[
  {
    "basic_shape": "cube",
    "openscad_code": "// Cube with rounded edges (filleted)\n// Overall 100 mm cube with 5 mm edge radius\n\n$fn = 32;\n\nedge_radius = 5;\n\n// Main body\ndifference() {\n    // Outer rounded cube\n    minkowski() {\n        cube([100 - 2*edge_radius, 100 - 2*edge_radius, 100 - 2*edge_radius], center = true);\n        sphere(r = edge_radius);\n    }\n    \n    // Hollow center\n    minkowski() {\n        cube([80 - 2*edge_radius, 80 - 2*edge_radius, 80 - 2*edge_radius], center = true);\n        sphere(r = edge_radius);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "cube_small",
    "openscad_code": "difference() {\n    // Main cube body with rounded edges\n    minkowski() {\n        cube([60, 60, 60], center=true);\n        sphere(r=5);\n    }\n    \n    // Remove internal material to create rounded edges\n    translate([0, 0, 0])\n    minkowski() {\n        cube([50, 50, 50], center=true);\n        sphere(r=5);\n    }\n    \n    // Top face chamfer\n    translate([0, 0, 35])\n    cylinder(h=30, r1=35, r2=40, center=true);\n    \n    // Bottom face chamfer\n    translate([0, 0, -35])\n    cylinder(h=30, r1=40, r2=35, center=true);\n}",
    "renders": true
  },
  {
    "basic_shape": "cube_medium",
    "openscad_code": "// Rounded-edge cube with chamfered top edges\nsize = 80;\nradius = 8;\nchamfer = 5;\n\n// Main rounded cube\nminkowski() {\n    cube([size - 2*radius, size - 2*radius, size - 2*radius], center = true);\n    sphere(r = radius, $fn = 32);\n}\n\n// Chamfer top edges\ndifference() {\n    translate([0, 0, size/2 - chamfer]) {\n        rotate([0, 0, 45]) {\n            cube([size*sqrt(2), size*sqrt(2), chamfer*sqrt(2)], center = true);\n        }\n    }\n    \n    translate([0, 0, size/2]) {\n        cube([size + 2, size + 2, chamfer*2], center = true);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "cube_large",
    "openscad_code": "// Medium-complexity cube with rounded edges\n$fn = 32;\n\nmodule rounded_cube(size, radius) {\n    hull() {\n        for (dx = [0, size.x - 2*radius])\n            for (dy = [0, size.y - 2*radius])\n                for (dz = [0, size.z - 2*radius])\n                    translate([dx + radius, dy + radius, dz + radius])\n                        sphere(r = radius);\n    }\n}\n\nrounded_cube([100, 100, 100], 8);",
    "renders": true
  },
  {
    "basic_shape": "cube_tall",
    "openscad_code": "// Tall cube with rounded vertical edges\n$fn = 32;\n\nwidth = 60;\ndepth = 60;\nheight = 120;\nradius = 8;\n\ndifference() {\n    // Main tall block\n    cube([width, depth, height], center = true);\n    \n    // Cut vertical edge rounds\n    translate([0, 0, 0]) {\n        // Front-left edge\n        rotate([0, 90, 0])\n            translate([0, -depth/2, -height/2])\n                cylinder(h = width, r = radius);\n        \n        // Front-right edge\n        rotate([0, 90, 0])\n            translate([0, -depth/2, height/2])\n                cylinder(h = width, r = radius);\n        \n        // Back-left edge\n        rotate([0, 90, 0])\n            translate([0, depth/2, -height/2])\n                cylinder(h = width, r = radius);\n        \n        // Back-right edge\n        rotate([0, 90, 0])\n            translate([0, depth/2, height/2])\n                cylinder(h = width, r = radius);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "cube_wide",
    "openscad_code": "$fn = 32;\n\n// Cube with rounded edges and slightly wider body\nmodule cube_wide() {\n    width = 120;\n    depth = 80;\n    height = 60;\n    radius = 8;\n    \n    difference() {\n        // Main rounded cube\n        minkowski() {\n            cube([width-2*radius, depth-2*radius, height-2*radius], center = true);\n            sphere(r = radius);\n        }\n        \n        // Optional slight rounding on top edges only\n        translate([0, 0, height/2 - radius])\n            cube([width-2*radius, depth-2*radius, radius*2 + 1], center = true);\n    }\n}\n\ncube_wide();",
    "renders": true
  },
  {
    "basic_shape": "cube_thin",
    "openscad_code": "// Thin cube with rounded edges\n$fn = 32;\n\nsize = 100;\nthickness = 10;\nradius = 8;\n\ndifference() {\n    // Outer rounded cube\n    minkowski() {\n        cube([size, size, thickness], center = true);\n        sphere(r = radius);\n    }\n    \n    // Inner cavity to thin the walls\n    minkowski() {\n        cube([size - 2*thickness, size - 2*thickness, thickness + 2], center = true);\n        sphere(r = radius - 1);\n    }\n}\n\n// Optional: Small corner fillets\ntranslate([size/2 - radius, size/2 - radius, 0])\n    sphere(r = radius);\n    \ntranslate([-size/2 + radius, size/2 - radius, 0])\n    sphere(r = radius);\n    \ntranslate([size/2 - radius, -size/2 + radius, 0])\n    sphere(r = radius);\n    \ntranslate([-size/2 + radius, -size/2 + radius, 0])\n    sphere(r = radius);",
    "renders": true
  },
  {
    "basic_shape": "cube_hollow",
    "openscad_code": "// hollow cube with rounded edges and internal ribs\nwall = 2;\nouter = 80;\ninner = outer - 2*wall;\nround = 5;\nrib_w = 2;\nrib_h = 4;\n\ndifference() {\n    // outer rounded cube\n    minkowski() {\n        cube([outer, outer, outer], center = true);\n        sphere(r = round);\n    }\n\n    // hollow center\n    minkowski() {\n        cube([inner, inner, inner], center = true);\n        sphere(r = round - wall);\n    }\n\n    // internal support ribs along X\n    translate([0, 0, 0])\n        difference() {\n            cube([outer - 2*round, rib_w, rib_h], center = true);\n            cube([inner, rib_w + 0.1, rib_h + 0.1], center = true);\n        }\n\n    // internal support ribs along Y\n    translate([0, 0, 0])\n        difference() {\n            cube([rib_w, outer - 2*round, rib_h], center = true);\n            cube([rib_w + 0.1, inner, rib_h + 0.1], center = true);\n        }\n}",
    "renders": true
  },
  {
    "basic_shape": "cube_rounded",
    "openscad_code": "// cube_rounded - 80 mm cube with 8 mm radius rounded edges\n$fn = 32;\n\nmodule rounded_edge() {\n    cylinder(h=80, r=8);\n}\n\nmodule rounded_corner() {\n    sphere(r=8);\n}\n\ndifference() {\n    cube([80, 80, 80], center=true);\n    \n    // Carve away sharp edges\n    for(x=[-36, 36])\n        for(y=[-36, 36])\n            translate([x, y, 0])\n                rotate([0, 0, 45])\n                    rounded_edge();\n    \n    // Carve away sharp corners\n    for(x=[-36, 36])\n        for(y=[-36, 36])\n            for(z=[-36, 36])\n                translate([x, y, z])\n                    rounded_corner();\n}",
    "renders": true
  },
  {
    "basic_shape": "cube_chamfered",
    "openscad_code": "// chamfered cube 100 mm on edge with 5 mm 45Â° chamfers on all edges\n\nch = 5;          // chamfer length\ns  = 100;        // cube size\n\ndifference() {\n    cube([s, s, s], center = true);\n\n    // top edges\n    for (a = [0, 90, 180, 270])\n        rotate([0, 0, a])\n            translate([s/2 - ch, 0, s/2 - ch])\n                rotate([0, 45, 0])\n                    cube([ch*sqrt(2), ch*2, ch*sqrt(2)], center = true);\n\n    // bottom edges\n    for (a = [0, 90, 180, 270])\n        rotate([0, 0, a])\n            translate([s/2 - ch, 0, -s/2 + ch])\n                rotate([0, -45, 0])\n                    cube([ch*sqrt(2), ch*2, ch*sqrt(2)], center = true);\n\n    // vertical edges\n    for (a = [0, 90, 180, 270])\n        rotate([0, 0, a])\n            translate([s/2 - ch, s/2 - ch, 0])\n                rotate([45, 0, 0])\n                    cube([ch*sqrt(2), ch*sqrt(2), ch*2], center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "cube_with_hole",
    "openscad_code": "// Cube with rounded edges and diagonal hole\nsize = 80;\nradius = 8;\nhole_d = 20;\n\ndifference() {\n    // Main rounded cube\n    minkowski() {\n        cube([size - 2*radius, size - 2*radius, size - 2*radius], center = true);\n        sphere(r = radius);\n    }\n    \n    // Diagonal hole\n    rotate([45, 45, 0])\n        cylinder(h = size * 1.5, d = hole_d, center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "cube_thick_walls",
    "openscad_code": "// cube_thick_walls.scad\nwall = 5;\nouter = 100;\ninner = outer - 2*wall;\n\ndifference() {\n    // outer cube with rounded edges\n    minkowski() {\n        cube([outer, outer, outer], center = true);\n        sphere(r = 3, $fn = 16);\n    }\n\n    // hollow center\n    translate([0, 0, -wall/2])\n        cube([inner, inner, outer + 1], center = true);\n\n    // bottom opening\n    translate([0, 0, -outer/2])\n        cube([inner + 2*wall, inner + 2*wall, wall + 1], center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "cube_minus_corner",
    "openscad_code": "// Cube with one corner removed and rounded edges\nsize = 80;\nradius = 8;\n\ndifference() {\n    // Main rounded cube\n    minkowski() {\n        cube([size - 2*radius, size - 2*radius, size - 2*radius], center = true);\n        sphere(r = radius);\n    }\n    \n    // Corner removal\n    translate([size/2, size/2, size/2])\n        rotate([0, 0, 45])\n            cube([size * 1.5, size * 1.5, size * 1.5], center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "cube_minus_edge",
    "openscad_code": "// cube_minus_edge: 100mm cube with one edge removed and rounded remaining edges\nedge_len = 100;\nradius = 5;\n\ndifference() {\n    // main rounded cube\n    minkowski() {\n        cube([edge_len - 2*radius, edge_len - 2*radius, edge_len - 2*radius], center = true);\n        sphere(r = radius);\n    }\n    \n    // remove one full edge along x axis at top front\n    translate([0, edge_len/2 - radius, edge_len/2 - radius])\n        cube([edge_len + 2*radius, edge_len, edge_len], center = false);\n}",
    "renders": true
  },
  {
    "basic_shape": "cube_with_slots",
    "openscad_code": "// Cube with slots on top and bottom faces\n$fn = 32;\n\n// Main cube with rounded edges\ndifference() {\n    // Rounded cube\n    minkowski() {\n        cube([80, 80, 80], center = true);\n        sphere(r = 5);\n    }\n    \n    // Top slots\n    translate([0, 0, 40])\n        cube([60, 10, 10], center = true);\n    translate([0, 0, 40])\n        cube([10, 60, 10], center = true);\n        \n    // Bottom slots\n    translate([0, 0, -40])\n        cube([60, 10, 10], center = true);\n    translate([0, 0, -40])\n        cube([10, 60, 10], center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "sphere",
    "openscad_code": "// Medium-complexity sphere with rounded equatorial groove\n// Overall Ã 100 mm\n\nmodule grooved_sphere(r=50, groove_r=3, groove_depth=2) {\n    difference() {\n        sphere(r=r, $fn=100);               // main sphere\n        rotate([0,90,0])                    // rotate groove to equator\n            difference() {\n                cylinder(h=r*2.2, r=r+1, center=true, $fn=100);  // cutting band\n                cylinder(h=r*2.3, r=r-groove_depth, center=true, $fn=100);\n            }\n    }\n}\n\ngrooved_sphere();",
    "renders": true
  },
  {
    "basic_shape": "sphere_small",
    "openscad_code": "// Small sphere with rounded edges via minkowski\n$fn = 32;\n\nminkowski() {\n    sphere(r = 20);\n    sphere(r = 3);\n}",
    "renders": true
  },
  {
    "basic_shape": "sphere_medium",
    "openscad_code": "// sphere_medium - sphere with rounded edges via minkowski\n$fn = 64;\n\nradius = 50;\n\n// core sphere\nsphere(r = radius);\n\n// add rounded edge effect\nminkowski() {\n    sphere(r = radius - 5);\n    sphere(r = 5);\n}",
    "renders": true
  },
  {
    "basic_shape": "sphere_large",
    "openscad_code": "// Sphere with rounded edge cutout\n$fn = 48;\n\ndifference() {\n    sphere(r = 60);\n    \n    // Remove 45-degree slice to show medium complexity\n    rotate([0, 45, 0])\n        cube([120, 120, 120], center = true);\n    \n    // Add a 30-degree wedge cutout\n    rotate([0, -30, 0])\n        cube([120, 120, 120], center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "sphere_hollow",
    "openscad_code": "// Hollow sphere with rounded edge on inner surface\nouter_r = 50;\nwall = 5;\ninner_r = outer_r - wall;\n\ndifference() {\n    sphere(r = outer_r);\n    \n    // Inner hollow sphere\n    sphere(r = inner_r);\n    \n    // Add a rounded fillet on the inner edge of the wall\n    translate([0, 0, -inner_r])\n        rotate_extrude(angle = 360)\n            translate([inner_r - wall/2, 0, 0])\n                circle(r = wall/2);\n}",
    "renders": true
  },
  {
    "basic_shape": "sphere_thick",
    "openscad_code": "// Thick-walled hollow sphere\n$fn = 48;\n\nouter_r = 50;\nwall_thickness = 5;\ninner_r = outer_r - wall_thickness;\n\ndifference() {\n    sphere(r = outer_r);\n    sphere(r = inner_r);\n}\n\n// Optional: Add a small alignment notch\nrotate([90, 0, 0])\n    cylinder(h = wall_thickness * 2, r = wall_thickness, center = true);",
    "renders": true
  },
  {
    "basic_shape": "sphere_flat_bottom",
    "openscad_code": "// Sphere with flat bottom and rounded edge\n$fn = 64;\n\nsphere_radius = 50;\nflat_height = 25;\nedge_radius = 5;\n\ndifference() {\n    sphere(sphere_radius);\n    \n    // Cut off bottom\n    translate([0, 0, -sphere_radius])\n        cube([sphere_radius*2.1, sphere_radius*2.1, sphere_radius - flat_height], center=true);\n}\n\n// Add rounded bottom edge\ntranslate([0, 0, flat_height])\n    difference() {\n        cylinder(h=edge_radius, r=sqrt(pow(sphere_radius, 2) - pow(flat_height, 2)) + edge_radius, center=true);\n        \n        translate([0, 0, edge_radius/2])\n            sphere(sphere_radius);\n        \n        translate([0, 0, -edge_radius/2 - 1])\n            cube([sphere_radius*2.1, sphere_radius*2.1, edge_radius + 2], center=true);\n    }",
    "renders": true
  },
  {
    "basic_shape": "sphere_flat_top",
    "openscad_code": "// sphere_flat_top: sphere with top sliced flat and rounded edge\nsphere_r = 50;          // original sphere radius\nflat_offset = 20;       // how much to slice off top\nedge_r = 5;             // radius for rounded edge\n\ndifference() {\n    sphere(r = sphere_r);\n    // cut off top\n    translate([0, 0, sphere_r - flat_offset])\n        cube([sphere_r*2, sphere_r*2, flat_offset + 1], center = true);\n}\n\n// add rounded edge ring\ntranslate([0, 0, sphere_r - flat_offset])\n    rotate_extrude(angle = 360)\n        translate([sphere_r - edge_r, 0, 0])\n            circle(r = edge_r);",
    "renders": true
  },
  {
    "basic_shape": "sphere_sliced_half",
    "openscad_code": "// sphere sliced in half with rounded edge\n$fn = 36;\nradius = 50;\n\ndifference() {\n    sphere(r = radius);\n    translate([0, -radius - 1, 0])\n        cube([2 * radius + 2, 2 * radius + 2, 2 * radius + 2], center = true);\n}\n\ntranslate([0, 0, -radius * 0.3])\n    difference() {\n        cylinder(h = radius * 0.3, r1 = radius, r2 = radius * 0.9, $fn = 36);\n        cylinder(h = radius * 0.3 + 0.1, r1 = radius * 0.8, r2 = radius * 0.7, $fn = 36);\n    }",
    "renders": true
  },
  {
    "basic_shape": "sphere_sliced_quarter",
    "openscad_code": "// sphere_sliced_quarter - medium complexity\nr = 40;\n$fn = 48;\n\n// full sphere\nfull = sphere(r);\n\n// slice along X, Y, and Z axes to keep only the positive octant\ndifference() {\n    sphere(r);\n    \n    // remove negative X\n    translate([-r-1, 0, 0])\n        cube([r+1, 2*r+2, 2*r+2], center=true);\n    \n    // remove negative Y\n    translate([0, -r-1, 0])\n        cube([2*r+2, r+1, 2*r+2], center=true);\n    \n    // remove negative Z\n    translate([0, 0, -r-1])\n        cube([2*r+2, 2*r+2, r+1], center=true);\n}",
    "renders": true
  },
  {
    "basic_shape": "sphere_elongated",
    "openscad_code": "// Elongated capsule (sphere stretched to cylinder)\n// Medium: combines sphere and cylinder with rounded ends\n\nlength = 100;\ndiameter = 50;\nradius = diameter / 2;\n\nmodule capsule(len, dia) {\n    $fn = 32;\n    difference() {\n        union() {\n            // Central cylinder\n            cylinder(h = len - dia, r = dia/2, center = true);\n            \n            // End spheres\n            translate([0, 0, (len - dia)/2])\n                sphere(r = dia/2);\n            \n            translate([0, 0, -(len - dia)/2])\n                sphere(r = dia/2);\n        }\n        \n        // Optional: remove slight overlap if desired\n        cube([dia, dia, len + 2], center = true);\n    }\n}\n\ncapsule(length, diameter);",
    "renders": true
  },
  {
    "basic_shape": "sphere_squashed",
    "openscad_code": "// Squashed sphere (ellipsoid) with rounded equator edge\n// Scaled sphere + torus belt for smoother transition\n\n$fn = 64;\n\n// Main squashed body\nscale([1, 1, 0.6])\n    sphere(r = 50);\n\n// Rounded equator ring\ndifference() {\n    scale([1, 1, 0.6])\n        sphere(r = 52);\n    scale([1, 1, 0.6])\n        sphere(r = 48);\n}",
    "renders": true
  },
  {
    "basic_shape": "sphere_oblong",
    "openscad_code": "// sphere_oblong: stretched sphere with rounded ends\nmodule sphere_oblong(length=100, radius=25){\n    // main body cylinder\n    cylinder(h=length-2*radius, r=radius, center=true);\n    \n    // end cap spheres\n    translate([0,0,(length/2)-radius]) sphere(r=radius);\n    translate([0,0,-(length/2)+radius]) sphere(r=radius);\n}\n\nsphere_oblong(100, 30);",
    "renders": true
  },
  {
    "basic_shape": "sphere_with_opening",
    "openscad_code": "sphere_radius = 50;\nwall_thickness = 4;\nopening_diameter = 30;\n\ndifference() {\n    sphere(r = sphere_radius);\n\n    // Top opening\n    cylinder(h = sphere_radius * 2, r = opening_diameter / 2, center = true);\n\n    // Optional bottom opening for symmetry\n    rotate([180, 0, 0])\n        cylinder(h = sphere_radius * 2, r = opening_diameter / 2, center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "cylinder",
    "openscad_code": "// Cylinder with rounded top and bottom edges\nh = 80;\nr = 25;\nfillet = 4;\n\ndifference() {\n    // Main cylinder plus edge spheres\n    union() {\n        cylinder(h = h, r = r, center = true);\n        translate([0, 0,  h/2]) sphere(r = fillet);\n        translate([0, 0, -h/2]) sphere(r = fillet);\n    }\n    \n    // Cut away excess sphere material\n    translate([0, 0,  h/2 + fillet]) cube([r*2+1, r*2+1, fillet*2], center = true);\n    translate([0, 0, -h/2 - fillet]) cube([r*2+1, r*2+1, fillet*2], center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "cylinder_short",
    "openscad_code": "// Short cylinder with rounded top and bottom edges\n$fn = 50;                      // Smooth curves\n\nh = 60;                        // Total height\nr = 30;                        // Main radius\nedge = 5;                      // Rounding radius\n\n// Main cylinder body minus top/bottom caps to create rounding\ndifference() {\n    cylinder(h = h, r = r);\n    \n    // Remove top sharp edge\n    translate([0, 0, h - edge])\n        cylinder(h = edge + 1, r1 = r, r2 = r - edge);\n    \n    // Remove bottom sharp edge\n    translate([0, 0, -1])\n        cylinder(h = edge + 1, r1 = r - edge, r2 = r);\n}\n\n// Add rounded top cap\ntranslate([0, 0, h - edge])\n    sphere(r = edge);\n\n// Add rounded bottom cap\ntranslate([0, 0, edge])\n    sphere(r = edge);",
    "renders": true
  },
  {
    "basic_shape": "cylinder_tall",
    "openscad_code": "// Tall cylinder with rounded top and bottom edges\nmodule cylinder_tall() {\n    height = 100;\n    radius = 30;\n    fillet = 5;\n    \n    difference() {\n        // Main cylinder\n        cylinder(h=height, r=radius, $fn=64);\n        \n        // Top edge rounding\n        translate([0, 0, height - fillet])\n            cylinder(h=fillet, r1=radius, r2=radius - fillet, $fn=64);\n        \n        // Bottom edge rounding\n        translate([0, 0, fillet])\n            cylinder(h=fillet, r1=radius - fillet, r2=radius, $fn=64);\n    }\n    \n    // Top rounded cap\n    translate([0, 0, height - fillet])\n        sphere(r=fillet, $fn=64);\n    \n    // Bottom rounded base\n    translate([0, 0, fillet])\n        sphere(r=fillet, $fn=64);\n}\n\ncylinder_tall();",
    "renders": true
  },
  {
    "basic_shape": "cylinder_thin",
    "openscad_code": "// Thin cylinder with rounded top and bottom edges\n$fn = 64;\n\nmodule cylinder_thin(height = 80, radius = 25, thickness = 3, fillet = 2) {\n    difference() {\n        // Outer cylinder\n        cylinder(h = height, r = radius);\n        \n        // Inner hollow\n        translate([0, 0, -1])\n            cylinder(h = height + 2, r = radius - thickness);\n        \n        // Top fillet removal\n        translate([0, 0, height - fillet])\n            rotate_extrude(angle = 90)\n                translate([radius - thickness, 0, 0])\n                    circle(r = fillet);\n        \n        // Bottom fillet removal\n        translate([0, 0, fillet])\n            rotate_extrude(angle = 90)\n                translate([radius - thickness, 0, 0])\n                    circle(r = fillet);\n    }\n    \n    // Add fillet material\n    union() {\n        // Top fillet\n        translate([0, 0, height - fillet])\n            rotate_extrude(angle = 90)\n                translate([radius - thickness - fillet, 0, 0])\n                    circle(r = fillet);\n        \n        // Bottom fillet\n        translate([0, 0, fillet])\n            rotate_extrude(angle = 270)\n                translate([radius - thickness - fillet, 0, 0])\n                    circle(r = fillet);\n    }\n}\n\ncylinder_thin();",
    "renders": true
  },
  {
    "basic_shape": "cylinder_thick",
    "openscad_code": "// Cylinder with rounded edges and thickened base\nheight = 80;\nradius = 30;\nbase_thickness = 15;\nedge_radius = 5;\n\ndifference() {\n    // Main cylinder with rounded edges\n    union() {\n        // Cylinder body\n        cylinder(h=height, r=radius, $fn=64);\n        \n        // Rounded top edge\n        translate([0, 0, height])\n            minkowski() {\n                cylinder(h=0.1, r=radius-edge_radius, $fn=64);\n                sphere(r=edge_radius, $fn=32);\n            }\n        \n        // Thickened base\n        cylinder(h=base_thickness, r=radius+10, $fn=64);\n    }\n    \n    // Hollow center\n    cylinder(h=height+base_thickness, r=radius-5, $fn=64);\n}",
    "renders": true
  },
  {
    "basic_shape": "cylinder_hollow",
    "openscad_code": "// Hollow cylinder with rounded top and bottom edges\n// Outer radius 30mm, inner radius 20mm, height 80mm\n// 2mm radius fillets on top and bottom edges\n\nouter_r = 30;\ninner_r = 20;\nheight = 80;\nfillet_r = 2;\n\ndifference() {\n    // Outer cylinder with rounded edges\n    union() {\n        // Main outer cylinder\n        cylinder(h=height - 2*fillet_r, r=outer_r, center=true);\n        \n        // Top rounded edge\n        translate([0, 0, height/2 - fillet_r])\n            cylinder(h=2*fillet_r, r1=outer_r, r2=outer_r - fillet_r, center=true);\n        \n        // Bottom rounded edge\n        translate([0, 0, -height/2 + fillet_r])\n            cylinder(h=2*fillet_r, r1=outer_r - fillet_r, r2=outer_r, center=true);\n    }\n    \n    // Inner hollow cylinder\n    cylinder(h=height + 2, r=inner_r, center=true);\n}",
    "renders": true
  },
  {
    "basic_shape": "cylinder_thick_walls",
    "openscad_code": "// Thick-walled cylinder with rounded top/bottom edges\n// Outer radius 40mm, wall thickness 8mm, height 60mm\n\n// Outer rounded cylinder\ndifference() {\n    cylinder(h=60, r=40, $fn=100);\n    \n    // Top roundover (negative sphere)\n    translate([0, 0, 55])\n        sphere(r=5, $fn=100);\n    \n    // Bottom roundover (negative sphere)  \n    translate([0, 0, 5])\n        sphere(r=5, $fn=100);\n}\n\n// Inner hollow cylinder\ntranslate([0, 0, 5])\n    cylinder(h=50, r=32, $fn=100);\n\n// Top closing ring with rounded inner edge\ndifference() {\n    cylinder(h=5, r=40, $fn=100);\n    \n    // Inner hole\n    cylinder(h=6, r=37, $fn=100);\n    \n    // Inner top roundover\n    translate([0, 0, -1])\n        sphere(r=5, $fn=100);\n}",
    "renders": true
  },
  {
    "basic_shape": "cylinder_with_bottom",
    "openscad_code": "// cylinder_with_bottom.scad\n\n$fn = 32;           // smooth curves\n\nh = 80;             // overall height\nr = 40;             // radius\nwall = 3;           // wall / bottom thickness\nr_fillet = 4;       // inside bottom fillet radius\n\ndifference() {\n    // outer shell\n    cylinder(h = h, r = r);\n\n    // hollow out\n    translate([0, 0, wall])\n        cylinder(h = h - wall + 0.01, r = r - wall);\n\n    // inside fillet at bottom edge\n    translate([0, 0, wall])\n        rotate_extrude(angle = 90)\n            translate([r - wall, 0])\n                circle(r = r_fillet);\n}",
    "renders": true
  },
  {
    "basic_shape": "cylinder_with_top",
    "openscad_code": "// cylinder with rounded top edge\nh = 80;\nr = 30;\nedge_r = 5;\n\ndifference() {\n    union() {\n        // main cylinder body\n        cylinder(h = h, r = r, $fn = 64);\n        \n        // rounded top edge\n        translate([0, 0, h])\n            cylinder(h = edge_r, r1 = r, r2 = r + edge_r, $fn = 64);\n    }\n    \n    // remove inner material to create rounded edge\n    translate([0, 0, h - edge_r * 0.5])\n        cylinder(h = edge_r * 2, r = r - edge_r * 0.5, $fn = 64);\n}",
    "renders": true
  },
  {
    "basic_shape": "cylinder_rounded_ends",
    "openscad_code": "// Rounded-end cylinder (capsule)\n// 100mm long, 50mm diameter, 10mm radius rounded ends\n\nlength = 100;\ndiameter = 50;\nradius = diameter / 2;\n\n// Central cylinder body\ncylinder(h=length - 2*radius, r=radius, center=true);\n\n// Rounded ends\ntranslate([0, 0, (length - 2*radius)/2]) sphere(r=radius);\ntranslate([0, 0, -(length - 2*radius)/2]) sphere(r=radius);",
    "renders": true
  },
  {
    "basic_shape": "cylinder_flat_ends",
    "openscad_code": "// Cylinder with flat ends and rounded top/bottom edges\n$fn = 50;\n\ndiameter = 60;\nheight = 80;\nedge_radius = 4;\n\ndifference() {\n    cylinder(h = height, r = diameter/2);\n    \n    // Rounded top edge\n    translate([0, 0, height - edge_radius])\n    rotate_extrude(angle = 90)\n    translate([diameter/2 - edge_radius, 0])\n    circle(r = edge_radius);\n    \n    // Rounded bottom edge\n    mirror([0, 0, 1])\n    translate([0, 0, height - edge_radius])\n    rotate_extrude(angle = 90)\n    translate([diameter/2 - edge_radius, 0])\n    circle(r = edge_radius);\n}",
    "renders": true
  },
  {
    "basic_shape": "cylinder_diameter_large",
    "openscad_code": "// Medium-complexity cylinder with rounded top and bottom edges\ncylinder_diameter_large = 80;   // diameter 80 mm\ncylinder_height      = 60;      // height 60 mm\nedge_radius          = 8;       // 8 mm radius rounding\n\n// Main body minus sharp edges\ndifference() {\n    cylinder(h = cylinder_height, d = cylinder_diameter_large, $fn = 64);\n    \n    // Top edge chamfer\n    translate([0, 0, cylinder_height - edge_radius])\n        cylinder(h = edge_radius + 1, \n                 r1 = cylinder_diameter_large/2 - edge_radius, \n                 r2 = cylinder_diameter_large/2 + 1, \n                 $fn = 64);\n    \n    // Bottom edge chamfer\n    translate([0, 0, -1])\n        cylinder(h = edge_radius + 1, \n                 r1 = cylinder_diameter_large/2 + 1, \n                 r2 = cylinder_diameter_large/2 - edge_radius, \n                 $fn = 64);\n}\n\n// Add rounded edge rings\ntranslate([0, 0, cylinder_height - edge_radius])\n    cylinder(h = edge_radius, \n             r = cylinder_diameter_large/2 - edge_radius, \n             $fn = 64);\n\ntranslate([0, 0, edge_radius])\n    cylinder(h = edge_radius, \n             r = cylinder_diameter_large/2 - edge_radius, \n             $fn = 64);",
    "renders": true
  },
  {
    "basic_shape": "cylinder_diameter_small",
    "openscad_code": "// Small cylinder with medium complexity - rounded edges and slight taper\n$fn = 32;\n\ndiameter = 50;\nheight = 80;\ntop_diameter = 45;\nfillet_radius = 3;\n\ndifference() {\n    // Main tapered cylinder with rounded edges\n    cylinder(h=height, r1=diameter/2, r2=top_diameter/2, center=false);\n    \n    // Bottom edge fillet\n    translate([0, 0, -0.1])\n        cylinder(h=fillet_radius + 0.2, r1=diameter/2 - fillet_radius, r2=diameter/2, center=false);\n    \n    // Top edge fillet\n    translate([0, 0, height - fillet_radius])\n        cylinder(h=fillet_radius + 0.2, r1=top_diameter/2, r2=top_diameter/2 - fillet_radius, center=false);\n}\n\n// Internal hollow cylinder\ntranslate([0, 0, fillet_radius])\n    cylinder(h=height - 2 * fillet_radius, r=top_diameter/4, center=false);",
    "renders": true
  },
  {
    "basic_shape": "cylinder_hollow_thin",
    "openscad_code": "// cylinder_hollow_thin - medium complexity hollow cylinder with rounded edges\n$fn = 64;\n\nouter_r = 50;\nwall = 2;\nheight = 100;\nround = 4;\n\n// Outer shell\ndifference() {\n    // Main tube with rounded top\n    union() {\n        cylinder(h = height - round, r = outer_r);\n        translate([0, 0, height - round])\n            cylinder(h = round, r1 = outer_r, r2 = outer_r);\n    }\n    \n    // Hollow interior\n    cylinder(h = height + 1, r = outer_r - wall);\n    \n    // Rounded bottom edge\n    translate([0, 0, -1])\n        cylinder(h = round + 1, r1 = outer_r - wall, r2 = outer_r - wall);\n}\n\n// Optional base ring for stability\ntranslate([0, 0, -2])\n    cylinder(h = 2, r = outer_r + 2);\n\n// Optional top lip\ntranslate([0, 0, height])\n    cylinder(h = 3, r = outer_r + 1);",
    "renders": true
  },
  {
    "basic_shape": "cylinder_with_flange",
    "openscad_code": "// cylinder with flange, rounded edges\n$fa = 1;\n$fs = 1;\n\n// overall height\nh = 80;\n\n// main cylinder\nr_body = 25;\n\n// flange\nflange_h = 12;\nflange_r = 45;\n\n// rounding\nr_fillet = 3;\n\nunion() {\n    // main body\n    cylinder(h = h - 2*r_fillet, r = r_body, center = true);\n\n    // top fillet\n    translate([0,0,h/2 - r_fillet])\n        rotate_extrude(angle = 90, convexity = 10)\n            translate([r_body - r_fillet, 0])\n                circle(r = r_fillet);\n\n    // bottom fillet\n    translate([0,0,-h/2 + r_fillet])\n        rotate_extrude(angle = 90, convexity = 10)\n            translate([r_body - r_fillet, 0])\n                circle(r = r_fillet);\n\n    // flange\n    translate([0,0,-h/2 - flange_h/2])\n        cylinder(h = flange_h, r = flange_r, center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "cylinder_tapped",
    "openscad_code": "// cylinder_tapped.scad\n// height 80 mm, radius 30 mm, M5 threaded hole centered on top\n\nmodule cylinder_tapped(h=80, r=30, thread_d=5, thread_depth=12) {\n    difference() {\n        // main body with rounded top edge\n        union() {\n            cylinder(h=h-2, r=r, $fn=60);                // main shaft\n            translate([0,0,h-2])\n                cylinder(h=2, r1=r, r2=r-2, $fn=60);    // chamfered top\n        }\n        \n        // central tap hole\n        translate([0,0,h-thread_depth])\n            cylinder(h=thread_depth+1, d=thread_d*0.85, $fn=32);\n        \n        // small vent hole from side\n        translate([0,0,5])\n            rotate([90,0,0])\n                cylinder(h=r+2, d=2, $fn=16);\n    }\n}\n\ncylinder_tapped();",
    "renders": true
  },
  {
    "basic_shape": "cone",
    "openscad_code": "// Rounded-base cone (medium complexity)\nr_base = 50;\nheight = 100;\nround_rad = 5;\n\ndifference() {\n    union() {\n        // Main cone body\n        cylinder(h = height, r1 = r_base, r2 = 0, $fn = 60);\n        \n        // Rounded base ring\n        translate([0, 0, -round_rad])\n            cylinder(h = round_rad, r1 = r_base, r2 = r_base, $fn = 60);\n    }\n    \n    // Cut underside rounding\n    translate([0, 0, -round_rad])\n        cylinder(h = round_rad + 1, r1 = r_base - round_rad, r2 = r_base, $fn = 60);\n}\n\n// Optional small tip truncation\ntranslate([0, 0, height - 2])\n    cylinder(h = 4, r1 = 2, r2 = 0, $fn = 20);",
    "renders": true
  },
  {
    "basic_shape": "cone_short",
    "openscad_code": "// cone_short with rounded base edge\nmodule cone_short(h = 40, r = 60, fillet = 3) {\n    difference() {\n        cylinder(h = h, r1 = r, r2 = 0, $fn = 64);\n        translate([0, 0, h - fillet])\n            cylinder(h = fillet + 0.01, r1 = r - fillet, r2 = 0, $fn = 64);\n    }\n    translate([0, 0, -0.01])\n        cylinder(h = fillet, r1 = r, r2 = r - fillet, $fn = 64);\n}\n\ncone_short();",
    "renders": true
  },
  {
    "basic_shape": "cone_tall",
    "openscad_code": "// Tall cone with rounded tip\nh = 100;\nr_base = 25;\nr_tip = 1.5;\n\ndifference() {\n    // Main cone body\n    cylinder(h = h, r1 = r_base, r2 = 0, $fn = 64);\n    \n    // Slight rounding at base\n    translate([0, 0, -0.1])\n        cylinder(h = 2, r1 = r_base + 0.1, r2 = r_base - 1.5, $fn = 64);\n}\n\n// Rounded tip via tiny sphere\ntranslate([0, 0, h])\n    sphere(r_tip, $fn = 32);",
    "renders": true
  },
  {
    "basic_shape": "cone_wide_base",
    "openscad_code": "// Cone with rounded base edge\n$fn = 32;\n\nbase_r = 50;\ntop_r = 0;\nh = 100;\nround_r = 5;\n\n// Main cone\ndifference() {\n    cylinder(h=h, r1=base_r, r2=top_r);\n    \n    // Remove bottom sharp edge\n    translate([0, 0, -0.1])\n        cylinder(h=round_r*2+0.2, r1=base_r-round_r, r2=base_r-round_r);\n}\n\n// Add rounded base ring\ntranslate([0, 0, -round_r]) {\n    rotate_extrude(angle=90) {\n        translate([base_r-round_r, round_r, 0])\n            circle(r=round_r);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "cone_narrow_base",
    "openscad_code": "module cone_narrow_base() {\n    // Main cone body\n    cylinder(h=80, r1=35, r2=5, $fn=64);\n    \n    // Rounded base edge\n    translate([0, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h=5, r1=5, r2=0, $fn=32);\n    \n    // Reinforced base rim\n    difference() {\n        cylinder(h=3, r1=37, r2=37, $fn=64);\n        cylinder(h=3, r1=34, r2=34, $fn=64);\n    }\n    \n    // Subtle top rounding\n    translate([0, 0, 80])\n    sphere(r=5.5, $fn=32);\n}\n\ncone_narrow_base();",
    "renders": true
  },
  {
    "basic_shape": "cone_truncated",
    "openscad_code": "// Truncated cone with rounded top edge\nr1 = 40;       // bottom radius\nr2 = 20;       // top radius\nh = 60;        // height\nr = 5;         // rounding radius\n\ndifference() {\n    cylinder(h=h, r1=r1, r2=r2, $fn=64);            // main cone\n    \n    // round top edge\n    translate([0, 0, h - r])\n    rotate_extrude(angle=360, $fn=64)\n    difference() {\n        square([r2, r]);\n        translate([r2 - r, r])\n        circle(r=r, $fn=32);\n    }\n    \n    // round bottom edge\n    translate([0, 0, -r])\n    rotate_extrude(angle=360, $fn=64)\n    difference() {\n        square([r1, r]);\n        translate([r1 - r, 0])\n        circle(r=r, $fn=32);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "cone_hollow",
    "openscad_code": "// Hollow cone with rounded base edge\n$fn = 32;\n\nheight = 80;\nouter_r = 40;\nwall = 3;\nround_r = 2;\n\ndifference() {\n    // Outer cone\n    cylinder(h = height, r1 = outer_r, r2 = 0);\n    \n    // Inner cone\n    translate([0, 0, wall])\n        cylinder(h = height - wall, r1 = outer_r - wall, r2 = 0);\n    \n    // Remove base edge rounding\n    translate([0, 0, -0.1])\n        cylinder(h = round_r + 0.2, r1 = outer_r + 0.1, r2 = outer_r - round_r);\n}\n\n// Add rounded base edge\ntranslate([0, 0, -round_r])\n    difference() {\n        cylinder(h = round_r, r1 = outer_r, r2 = outer_r - round_r);\n        cylinder(h = round_r + 0.2, r1 = outer_r - wall, r2 = outer_r - wall - round_r);\n    }",
    "renders": true
  },
  {
    "basic_shape": "cone_surface",
    "openscad_code": "// Medium-complexity cone with fillet at the base and a thin wall\nfillet_r = 5;\nwall = 2;\n\ndifference() {\n    // Main solid cone\n    cylinder(h = 100, r1 = 40, r2 = 0, $fn = 64);\n\n    // Hollow inside\n    translate([0, 0, wall])\n        cylinder(h = 100 - wall, r1 = 40 - wall, r2 = 0, $fn = 64);\n\n    // Fillet at base\n    translate([0, 0, -0.01])\n        cylinder(h = fillet_r * 2, r1 = 40 + 0.5, r2 = 40 - wall - 0.5, $fn = 64);\n}\n\n// Flattened tip to avoid needle\ntranslate([0, 0, 100 - 1])\n    cylinder(h = 2, r = 2, $fn = 16);",
    "renders": true
  },
  {
    "basic_shape": "cone_with_base",
    "openscad_code": "// Cone with rounded base edge\n$fn = 50;\n\n// Main cone body\ncylinder(h = 80, r1 = 40, r2 = 0, center = false);\n\n// Rounded base edge using torus segment\ntranslate([0, 0, 0.1])\nrotate_extrude(angle = 360, $fn = 100)\ntranslate([40, 0, 0])\ncircle(r = 3);\n\n// Base plate\ndifference() {\n    cylinder(h = 5, r = 40 + 3, center = false);\n    cylinder(h = 6, r = 40, center = false);\n}",
    "renders": true
  },
  {
    "basic_shape": "cone_thick_walls",
    "openscad_code": "$fn = 32;\n\n// Parameters\nh = 100;          // cone height\nr1 = 50;          // bottom outer radius\nr2 = 0;           // top outer radius (point)\nwall = 5;         // wall thickness\n\n// Outer cone\ndifference() {\n    cylinder(h = h, r1 = r1, r2 = r2, center = false);\n    \n    // Inner hollow cone\n    translate([0, 0, wall])\n        cylinder(h = h - wall, r1 = r1 - wall, r2 = r2, center = false);\n}\n\n// Flatten bottom\ndifference() {\n    cylinder(h = wall, r1 = r1, r2 = r1, center = false);\n    cylinder(h = wall + 0.1, r1 = r1 - wall, r2 = r1 - wall, center = false);\n}",
    "renders": true
  },
  {
    "basic_shape": "cone_smooth",
    "openscad_code": "// Smooth cone with rounded base and tip\n$fn = 40;  // Smooth surfaces\n\n// Main cone body\ndifference() {\n    cylinder(h = 100, r1 = 50, r2 = 0, center = false);\n    // Hollow out slightly for smoother appearance\n    translate([0, 0, -1])\n        cylinder(h = 102, r1 = 47, r2 = 0, center = false);\n}\n\n// Rounded base\ntranslate([0, 0, -5])\n    difference() {\n        cylinder(h = 10, r1 = 50, r2 = 50, center = false);\n        cylinder(h = 10, r1 = 47, r2 = 47, center = false);\n    }\n\n// Rounded tip\ntranslate([0, 0, 99])\n    sphere(r = 3);",
    "renders": true
  },
  {
    "basic_shape": "cone_steep",
    "openscad_code": "// Medium complexity cone with rounded tip and base fillet\n$fn = 64;\n\nheight = 100;\nbase_r = 50;\ntip_r = 4;\nfillet_r = 8;\n\n// Main cone body\ndifference() {\n    cylinder(h=height, r1=base_r, r2=tip_r, center=false);\n    \n    // Remove sharp tip\n    translate([0, 0, height - tip_r])\n        sphere(r=tip_r);\n}\n\n// Base fillet\ntranslate([0, 0, -fillet_r])\n    cylinder(h=fillet_r, r1=base_r + fillet_r, r2=base_r, center=false);\n\n// Tip fillet\ntranslate([0, 0, height - tip_r])\n    sphere(r=tip_r);",
    "renders": true
  },
  {
    "basic_shape": "cone_shallow",
    "openscad_code": "// Cone with rounded base edge\nbase_r = 60;\nheight = 80;\nround_r = 3;\n\ndifference() {\n    cylinder(h = height, r1 = base_r, r2 = 0, $fn = 64);\n    \n    translate([0, 0, -0.1])\n        cylinder(h = round_r + 0.2, r1 = base_r - round_r, r2 = base_r - round_r, $fn = 64);\n}\n\ntranslate([0, 0, -round_r])\n    minkowski() {\n        cylinder(h = round_r, r1 = base_r - round_r, r2 = 0, $fn = 64);\n        sphere(r = round_r, $fn = 32);\n    }",
    "renders": true
  },
  {
    "basic_shape": "cone_inverted",
    "openscad_code": "// Inverted cone with rounded tip and slight base fillet\nheight = 80;\nbase_r = 40;\nround_r = 2;\nfillet_r = 3;\n\ndifference() {\n    // Main inverted cone\n    cylinder(h=height, r1=base_r, r2=0, $fn=100);\n    \n    // Round the sharp tip\n    translate([0, 0, height - round_r])\n        sphere(r=round_r, $fn=50);\n    \n    // Add base fillet\n    translate([0, 0, -0.1])\n        cylinder(h=fillet_r + 0.2, r1=base_r - fillet_r, r2=base_r, $fn=100);\n}\n\n// Flip it upside-down\nrotate([180, 0, 0])\n    translate([0, 0, -height]);",
    "renders": true
  },
  {
    "basic_shape": "torus",
    "openscad_code": "// Medium complexity torus with rounded edges\n// Overall diameter ~100mm, tube diameter ~25mm\n\n$fn = 64;\n\n// Main torus body\nrotate_extrude(angle = 360)\n    translate([37.5, 0, 0])\n        circle(r = 12.5);\n\n// Smooth rounded edges using torus segments\nfor (i = [0:90:270]) {\n    rotate([0, 90, i])\n        rotate_extrude(angle = 90)\n            translate([37.5, 0, 0])\n                circle(r = 12.5);\n}",
    "renders": true
  },
  {
    "basic_shape": "torus_small",
    "openscad_code": "// torus_small - medium complexity with rounded edges\n$fn = 48;\n\n// Main torus body\nrotate_extrude(angle = 360)\n    translate([40, 0, 0])\n        circle(r = 15);\n\n// Soft fillet on outer edge\ndifference() {\n    rotate_extrude(angle = 360)\n        translate([40, 0, 0])\n            offset(r = 2)\n                circle(r = 13);\n                \n    rotate_extrude(angle = 360)\n        translate([40, 0, 0])\n            circle(r = 15);\n}\n\n// Soft fillet on inner edge\ndifference() {\n    rotate_extrude(angle = 360)\n        translate([40, 0, 0])\n            circle(r = 15);\n            \n    rotate_extrude(angle = 360)\n        translate([40, 0, 0])\n            offset(r = -2)\n                circle(r = 17);\n}",
    "renders": true
  },
  {
    "basic_shape": "torus_large",
    "openscad_code": "// Medium-complexity torus with rounded outer edge\n$fn = 48;           // smoother curves\n\ntorus_radius = 30;  // radius from center to tube center\ntube_radius  = 12;  // radius of the tube\nround_radius = 3;   // rounding radius\n\n// Main torus body\nrotate_extrude()\n    translate([torus_radius, 0, 0])\n        difference() {\n            circle(tube_radius);          // outer tube circle\n            circle(tube_radius - round_radius);  // inner circle for hollow\n        }\n\n// Rounding the outer edge\nrotate_extrude()\n    translate([torus_radius, 0, tube_radius - round_radius])\n        rotate([90, 0, 0])\n            cylinder(h = round_radius, r1 = round_radius, r2 = 0);\n\n// Rounding the inner edge\nrotate_extrude()\n    translate([torus_radius, 0, -tube_radius + round_radius])\n        rotate([90, 0, 0])\n            cylinder(h = round_radius, r1 = 0, r2 = round_radius);",
    "renders": true
  },
  {
    "basic_shape": "torus_thin",
    "openscad_code": "// torus_thin - medium complexity\n$fn = 36;\n\n// main torus\nrotate_extrude()\n    translate([40, 0, 0])\n        circle(r = 5);\n\n// rounded top edge\ndifference() {\n    rotate_extrude()\n        translate([40, 0, 0])\n            circle(r = 5);\n    translate([0, 0, -0.1])\n        rotate_extrude()\n            translate([40, 0, 0])\n                circle(r = 4.5);\n}\n\n// rounded bottom edge\ndifference() {\n    translate([0, 0, 0.1])\n        rotate_extrude()\n            translate([40, 0, 0])\n                circle(r = 5);\n    rotate_extrude()\n        translate([40, 0, 0])\n            circle(r = 4.5);\n}",
    "renders": true
  },
  {
    "basic_shape": "torus_thick",
    "openscad_code": "// torus_thick with rounded edges\n$fn=64;\n\n// main torus body\ntorus_major = 50;\ntorus_minor = 20;\nthickness = 8;\n\ndifference() {\n    rotate_extrude(angle=360) \n        translate([torus_major, 0, 0]) \n            circle(r=torus_minor);\n\n    // inner hole to make it thick-walled\n    rotate_extrude(angle=360) \n        translate([torus_major, 0, 0]) \n            circle(r=torus_minor-thickness);\n}\n\n// top and bottom edge fillets\ntranslate([0, 0, torus_minor]) \n    rotate_extrude(angle=360) \n        translate([torus_major, 0, 0]) \n            intersection() {\n                circle(r=torus_minor);\n                translate([0, 0, torus_minor-2]) \n                    cube([torus_minor*2, torus_minor*2, 2], center=true);\n            }\n\ntranslate([0, 0, -torus_minor]) \n    rotate([180, 0, 0]) \n        rotate_extrude(angle=360) \n            translate([torus_major, 0, 0]) \n                intersection() {\n                    circle(r=torus_minor);\n                    translate([0, 0, torus_minor-2]) \n                        cube([torus_minor*2, torus_minor*2, 2], center=true);\n                }",
    "renders": true
  },
  {
    "basic_shape": "torus_hollow",
    "openscad_code": "// hollow torus with rounded inner and outer edges\n$fn = 48;\n\n// outer torus body\nrotate_extrude(angle = 360)\n    translate([50, 0, 0])\n        circle(r = 15, $fn = 32);\n\n// inner hollow\nrotate_extrude(angle = 360)\n    translate([50, 0, 0])\n        circle(r = 10, $fn = 32);\n\ndifference() {\n    // outer rounded torus\n    rotate_extrude(angle = 360)\n        translate([50, 0, 0])\n            offset(r = 2)\n                circle(r = 15 - 2, $fn = 32);\n\n    // inner rounded cutout\n    rotate_extrude(angle = 360)\n        translate([50, 0, 0])\n            offset(r = -2)\n                circle(r = 10 + 2, $fn = 32);\n}",
    "renders": true
  },
  {
    "basic_shape": "torus_flat",
    "openscad_code": "// torus_flat with rounded edges and slight height variation\n$fn = 64;\n\n// Main torus\ndifference() {\n    rotate_extrude(angle = 360)\n        translate([40, 0, 0])\n            square([20, 8], center = true);\n    \n    // Round outer edge\n    rotate_extrude(angle = 360)\n        translate([60, 0, 0])\n            circle(r = 2);\n    \n    // Round inner edge\n    rotate_extrude(angle = 360)\n        translate([20, 0, 0])\n            circle(r = 2);\n}\n\n// Height variation rings\nfor (i = [0:5:355]) {\n    rotate([0, 0, i])\n        translate([50, 0, 4])\n            cylinder(h = 1, r1 = 10, r2 = 8);\n}",
    "renders": true
  },
  {
    "basic_shape": "torus_oblong",
    "openscad_code": "// torus_oblong: stretched torus with rounded edges\n$fn = 48;\n\n// Main torus ring\nrotate_extrude(angle = 360, convexity = 10)\n    translate([40, 0, 0])\n        circle(r = 15);\n\n// Stretch along Y by scaling\nscale([1, 1.6, 1])\n    rotate_extrude(angle = 360, convexity = 10)\n        translate([40, 0, 0])\n            circle(r = 15);\n\n// Combine both for oblong form\nunion() {\n    scale([1, 1.6, 1])\n        rotate_extrude(angle = 360, convexity = 10)\n            translate([40, 0, 0])\n                circle(r = 15);\n}",
    "renders": true
  },
  {
    "basic_shape": "torus_large_hole",
    "openscad_code": "// torus_large_hole with rounded edges\n$fn = 64;\n\n// outer torus body\nrotate_extrude(angle = 360) {\n    translate([40, 0, 0])\n        circle(r = 15);\n}\n\n// rounded outer edge profile\ndifference() {\n    intersection() {\n        rotate_extrude(angle = 360) {\n            translate([40, 0, 0])\n                offset(r = 3)\n                    circle(r = 15);\n        }\n        rotate_extrude(angle = 360) {\n            translate([40, 0, 0])\n                circle(r = 15);\n        }\n    }\n}\n\n// rounded inner edge profile\ndifference() {\n    intersection() {\n        rotate_extrude(angle = 360) {\n            translate([40, 0, 0])\n                circle(r = 15);\n        }\n        rotate_extrude(angle = 360) {\n            translate([40, 0, 0])\n                offset(r = -3)\n                    circle(r = 15);\n        }\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "torus_small_hole",
    "openscad_code": "// Torus with small hole - medium complexity\n$fn = 32;\n\n// Main torus body\nrotate_extrude(angle = 360)\n    translate([40, 0, 0])\n        circle(r = 10);\n\n// Rounded outer edges\ndifference() {\n    rotate_extrude(angle = 360)\n        translate([40, 0, 0])\n            circle(r = 10);\n    \n    // Inner hole\n    rotate_extrude(angle = 360)\n        translate([40, 0, 0])\n            circle(r = 8);\n}\n\n// Add fillets on top and bottom\nunion() {\n    difference() {\n        rotate_extrude(angle = 360)\n            translate([40, 0, 0])\n                circle(r = 10);\n        \n        rotate_extrude(angle = 360)\n            translate([40, 0, 0])\n                circle(r = 8);\n    }\n    \n    // Top fillet\n    translate([0, 0, 10])\n        rotate_extrude(angle = 360)\n            translate([40, 0, 0])\n                circle(r = 2);\n    \n    // Bottom fillet\n    translate([0, 0, -10])\n        rotate_extrude(angle = 360)\n            translate([40, 0, 0])\n                circle(r = 2);\n}",
    "renders": true
  },
  {
    "basic_shape": "donut",
    "openscad_code": "// rounded-edge torus\n$fa = 1;\n$fs = 1;\n\nmodule rounded_torus(outer_r = 40, inner_r = 15, fillet_r = 4) {\n    tube_r = (outer_r - inner_r) / 2;\n    mid_r = inner_r + tube_r;\n\n    difference() {\n        rotate_extrude(angle = 360)\n            translate([mid_r, 0])\n                circle(r = tube_r);\n\n        rotate_extrude(angle = 360)\n            translate([mid_r, 0])\n                offset(r = -fillet_r)\n                    circle(r = tube_r);\n    }\n\n    rotate_extrude(angle = 360)\n        translate([mid_r, 0])\n            offset(r = -tube_r + fillet_r)\n                circle(r = tube_r);\n}\n\nrounded_torus();",
    "renders": true
  },
  {
    "basic_shape": "donut_small",
    "openscad_code": "// Donut with rounded edges\n$fn = 64;\n\n// Outer ring\nrotate_extrude(angle = 360)\n    translate([40, 0, 0])\n        circle(r = 15);\n\n// Top edge fillet\ndifference() {\n    rotate_extrude(angle = 360)\n        translate([40, 0, 0])\n            circle(r = 15);\n    translate([0, 0, 15])\n        rotate_extrude(angle = 360)\n            translate([40, 0, 0])\n                circle(r = 15 - 3);\n}\n\n// Bottom edge fillet\ndifference() {\n    rotate_extrude(angle = 360)\n        translate([40, 0, 0])\n            circle(r = 15);\n    translate([0, 0, -15])\n        rotate_extrude(angle = 360)\n            translate([40, 0, 0])\n                circle(r = 15 - 3);\n}\n\n// Simplified single torus with rounded edges\nrotate_extrude(angle = 360, $fn = 64)\n    translate([40, 0, 0])\n        circle(r = 15, $fn = 32);",
    "renders": true
  },
  {
    "basic_shape": "donut_large",
    "openscad_code": "rotate_extrude($fn=64)\n    translate([40, 0, 0])\n        circle(r=10);\n\ndifference() {\n    rotate_extrude($fn=64)\n        translate([40, 0, 0])\n            circle(r=10);\n    rotate_extrude($fn=64)\n        translate([40, 0, 0])\n            circle(r=8);\n}",
    "renders": true
  },
  {
    "basic_shape": "donut_thick",
    "openscad_code": "// Donut with rounded edges\n$fn = 64;\n\n// Main torus\nrotate_extrude(angle = 360, convexity = 10)\n    translate([40, 0, 0])\n        circle(r = 15);\n\n// Round the outer edge\ndifference() {\n    rotate_extrude(angle = 360, convexity = 10)\n        translate([40, 0, 0])\n            circle(r = 15);\n    \n    rotate_extrude(angle = 360, convexity = 10)\n        translate([40, 0, 0])\n            circle(r = 13);\n}\n\n// Round the inner edge\ntranslate([0, 0, -1])\n    rotate_extrude(angle = 360, convexity = 10)\n        translate([40, 0, 0])\n            difference() {\n                circle(r = 15);\n                circle(r = 13);\n            }",
    "renders": true
  },
  {
    "basic_shape": "donut_thin",
    "openscad_code": "// Medium-complexity thin donut\n// Outer radius 50 mm, inner radius 40 mm, thickness 10 mm\n// Rounded edges (2 mm) on top and bottom faces\n\n$fa = 4; $fs = 1;\n\nmodule rounded_edge(radius, height) {\n    cylinder(h = height, r = radius, $fn = 32);\n}\n\ndifference() {\n    rotate_extrude($fn = 64)\n        translate([45, 0, 0])\n            square([5, 10], center = true);\n\n    // Top edge rounding\n    translate([0, 0, 5 - 2])\n        rotate_extrude($fn = 64)\n            translate([45, 0, 0])\n                circle(r = 2);\n\n    // Bottom edge rounding\n    translate([0, 0, -5 + 2])\n        rotate_extrude($fn = 64)\n            translate([45, 0, 0])\n                circle(r = 2);\n}",
    "renders": true
  },
  {
    "basic_shape": "ring",
    "openscad_code": "// Ring with rounded edges\nouter_r = 25;\ninner_r = 17;\nheight = 8;\nround_r = 2;\n\ndifference() {\n    // Outer rounded cylinder\n    minkowski() {\n        cylinder(h = height - 2*round_r, r = outer_r - round_r, $fn = 64);\n        sphere(r = round_r, $fn = 32);\n    }\n    \n    // Inner rounded hole\n    minkowski() {\n        cylinder(h = height + 2, r = inner_r + round_r, $fn = 64);\n        sphere(r = round_r, $fn = 32);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "ring_thin",
    "openscad_code": "// Thin ring with rounded edges\n$fn = 50;\n\nouter_r = 30;\ninner_r = 25;\nheight = 8;\nedge_r = 1.5;\n\ndifference() {\n    // Main ring body\n    difference() {\n        cylinder(h = height, r = outer_r, center = true);\n        cylinder(h = height + 2, r = inner_r, center = true);\n    }\n    \n    // Round top edge\n    translate([0, 0, height/2 - edge_r])\n        cylinder(h = edge_r * 2, r1 = outer_r - edge_r, r2 = outer_r, center = true);\n    \n    // Round bottom edge\n    translate([0, 0, -height/2 + edge_r])\n        cylinder(h = edge_r * 2, r1 = outer_r - edge_r, r2 = outer_r, center = true);\n    \n    // Round inner top edge\n    translate([0, 0, height/2 - edge_r])\n        cylinder(h = edge_r * 2, r1 = inner_r, r2 = inner_r + edge_r, center = true);\n    \n    // Round inner bottom edge\n    translate([0, 0, -height/2 + edge_r])\n        cylinder(h = edge_r * 2, r1 = inner_r, r2 = inner_r + edge_r, center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "ring_thick",
    "openscad_code": "// Ring with rounded edges and medium thickness\n$fn = 32;\n\n// Main ring body\ndifference() {\n    // Outer rounded cylinder\n    union() {\n        cylinder(h = 30, r = 25);\n        translate([0, 0, 30]) sphere(r = 25);\n        translate([0, 0, 0]) sphere(r = 25);\n    }\n    \n    // Inner hole\n    translate([0, 0, -5]) cylinder(h = 40, r = 17);\n    \n    // Top rounding\n    translate([0, 0, 30]) sphere(r = 17);\n    \n    // Bottom rounding\n    translate([0, 0, 0]) sphere(r = 17);\n}",
    "renders": true
  },
  {
    "basic_shape": "ring_wide",
    "openscad_code": "// Ring with rounded outer edge and chamfered inner edge\nr_outer = 60;\nr_inner = 45;\nh = 25;\nchamfer = 2;\n\ndifference() {\n    // Main ring body with rounded top/bottom\n    union() {\n        cylinder(h = h, r = r_outer, center = true);\n        torus(r1 = r_outer, r2 = 3);\n    }\n    \n    // Central hole with slight chamfer\n    union() {\n        cylinder(h = h + 1, r = r_inner - chamfer, center = true);\n        cylinder(h = h + 1, r1 = r_inner - chamfer, r2 = r_inner, center = true);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "ring_narrow",
    "openscad_code": "// Ring with rounded edges and a shallow groove\n$fn = 64;\n\n// Main ring body\ndifference() {\n    union() {\n        // Outer torus\n        rotate_extrude(angle = 360)\n            translate([25, 0, 0])\n                circle(r = 5);\n        \n        // Top rounded edge\n        translate([0, 0, 5])\n            rotate_extrude(angle = 360)\n                translate([20, 0, 0])\n                    circle(r = 5);\n        \n        // Bottom rounded edge\n        translate([0, 0, -5])\n            rotate_extrude(angle = 360)\n                translate([20, 0, 0])\n                    circle(r = 5);\n    }\n    \n    // Inner hole\n    rotate_extrude(angle = 360)\n        translate([20, 0, 0])\n            circle(r = 3);\n    \n    // Shallow groove\n    rotate_extrude(angle = 360)\n        translate([27.5, 0, 0])\n            circle(r = 1);\n}",
    "renders": true
  },
  {
    "basic_shape": "ring_large_hole",
    "openscad_code": "// ring_large_hole.scad\n\n$fn = 32;\n\n// outer torus\nrotate_extrude(angle = 360)\n    translate([35, 0, 0])\n        circle(r = 10);\n\n// inner torus (hole)\ndifference() {\n    rotate_extrude(angle = 360)\n        translate([35, 0, 0])\n            circle(r = 10);\n    \n    rotate_extrude(angle = 360)\n        translate([35, 0, 0])\n            circle(r = 7.5);\n}\n\n// rounded top edge\ntranslate([0, 0, 10])\n    difference() {\n        rotate_extrude(angle = 360)\n            translate([35, 0, 0])\n                circle(r = 2.5);\n        rotate_extrude(angle = 360)\n            translate([35, 0, 0])\n                circle(r = 1.5);\n    }\n\n// rounded bottom edge\ntranslate([0, 0, -10])\n    difference() {\n        rotate_extrude(angle = 360)\n            translate([35, 0, 0])\n                circle(r = 2.5);\n        rotate_extrude(angle = 360)\n            translate([35, 0, 0])\n                circle(r = 1.5);\n    }",
    "renders": true
  },
  {
    "basic_shape": "ring_small_hole",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\nmodule ring_small_hole() {\n    difference() {\n        // Main ring body\n        rotate_extrude(angle = 360, $fn = 64)\n            translate([25, 0, 0])\n                circle(r = 5);\n        \n        // Small hole through side\n        rotate([90, 0, 0])\n            cylinder(h = 15, r = 2, $fn = 16);\n        \n        // Small hole through top\n        cylinder(h = 15, r = 2, $fn = 16);\n    }\n}\n\nring_small_hole();",
    "renders": true
  },
  {
    "basic_shape": "pyramid",
    "openscad_code": "// Medium-complexity pyramid: square base with rounded edges\n// Overall size â 80 mm\n\n// Parameters\nbase = 80;\nheight = 80;\nround_r = 6;\nsteps = 30;\n\n// Main pyramid body with rounded base\ndifference() {\n    cylinder(h=height, r1=base/2, r2=0, $fn=4);\n    \n    // Cut off sharp edges at base\n    for (a = [0:90:270])\n        rotate([0, 0, a])\n            translate([base/2 - round_r, -round_r, 0])\n                cube([round_r*2, round_r*2, height+1]);\n}\n\n// Add rounded fillet at base\ntranslate([0, 0, -round_r])\n    minkowski() {\n        cylinder(h=1, r=base/2 - round_r, $fn=4);\n        sphere(r=round_r, $fn=steps);\n    }",
    "renders": true
  },
  {
    "basic_shape": "pyramid_triangular",
    "openscad_code": "// Triangular pyramid with rounded base edges and flat top point\n// Base: equilateral triangle 80 mm edge length\n// Height: 60 mm\n// Rounded edges on base only\n\n$fn = 32;\n\n// Define pyramid dimensions\nbase_side = 80;\nheight = 60;\n\n// Calculate geometric values\ntri_height = base_side * sqrt(3)/2;\ncenter_to_vertex = base_side / sqrt(3);\n\n// Construct pyramid from polyhedron\npoints = [\n    [0, 0, height],                          // apex\n    [center_to_vertex, 0, 0],                // base vertex 1\n    [-center_to_vertex/2, tri_height/2, 0],  // base vertex 2\n    [-center_to_vertex/2, -tri_height/2, 0]  // base vertex 3\n];\n\nfaces = [\n    [0, 1, 2],  // side face 1\n    [0, 2, 3],  // side face 2\n    [0, 3, 1],  // side face 3\n    [1, 3, 2]   // base face\n];\n\n// Main pyramid\npolyhedron(points = points, faces = faces, convexity = 4);\n\n// Add rounded edges to base using cylinder segments\nfor(i = [0:2]) {\n    j = (i + 1) % 3;\n    edge_vec = points[j+1] - points[i+1];\n    edge_len = norm(edge_vec);\n    angle = atan2(edge_vec.y, edge_vec.x);\n    \n    translate(points[i+1] + edge_vec/2)\n        rotate([0, 0, angle])\n        translate([0, -edge_len/2, 3])\n        cylinder(h = 6, r = 3, center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "pyramid_square",
    "openscad_code": "// Square pyramid with rounded base edges\nbase_size = 100;\nheight = 75;\nedge_radius = 5;\n\ndifference() {\n    // Main pyramid\n    cylinder(h=height, r1=base_size/2, r2=0, $fn=4);\n\n    // Round the four base edges\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n            translate([base_size/2 - edge_radius, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=base_size - 2*edge_radius, r=edge_radius, $fn=16);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "pyramid_pentagonal",
    "openscad_code": "// Pentagonal pyramid with rounded base edges\n// Height = 80 mm, base circumradius â 40 mm\n\n$fn = 32;  // smooth curves\n\n// Rounded base ring\ndifference() {\n    cylinder(h = 4, r1 = 42, r2 = 42, center = true);\n    translate([0, 0, -1])\n        cylinder(h = 6, r1 = 38, r2 = 38, center = true);\n}\n\n// Five-sided pyramid body\npolyhedron(\n    points = [\n        [0, 0, 42],                               // apex\n        [40 * cos(0),     40 * sin(0),     -2],   // base vertices\n        [40 * cos(72),    40 * sin(72),    -2],\n        [40 * cos(144),   40 * sin(144),   -2],\n        [40 * cos(216),   40 * sin(216),   -2],\n        [40 * cos(288),   40 * sin(288),   -2]\n    ],\n    faces = [\n        [1, 2, 0], [2, 3, 0], [3, 4, 0],\n        [4, 5, 0], [5, 1, 0], [1, 5, 4, 3, 2]\n    ]\n);",
    "renders": true
  },
  {
    "basic_shape": "pyramid_hexagonal",
    "openscad_code": "// Hexagonal pyramid with rounded edges\n$fn = 6;\n\n// Base hexagon with rounded bottom edges\ndifference() {\n    cylinder(h=2, r=50, r2=50);  // Base plate\n    translate([0,0,-1]) cylinder(h=4, r=48, r2=48);  // Inner cut for rounded edge\n}\n\n// Pyramid body with slightly rounded apex\ntranslate([0,0,2]) cylinder(h=75, r1=50, r2=0, center=false);\n\n// Small sphere at apex for rounded tip\ntranslate([0,0,77]) sphere(r=2);\n\n// Optional chamfer on base edges\ntranslate([0,0,-0.5]) cylinder(h=1, r1=52, r2=50, center=false);",
    "renders": true
  },
  {
    "basic_shape": "pyramid_tall",
    "openscad_code": "// Tall pyramid with rounded base edges\nmodule pyramid_tall() {\n    height = 120;\n    base = 80;\n    radius = 3;\n    \n    // Main pyramid body\n    cylinder(h=height, r1=base/2, r2=0, $fn=4);\n    \n    // Rounded base edges\n    difference() {\n        cylinder(h=radius*2, r=base/2, $fn=40);\n        translate([0, 0, radius])\n            cylinder(h=radius*2, r=base/2 - radius, $fn=40);\n    }\n}\n\npyramid_tall();",
    "renders": true
  },
  {
    "basic_shape": "pyramid_short",
    "openscad_code": "// Pyramid with rounded edges and flat base\nbase = 60;\nheight = 50;\nedge_radius = 3;\n\ndifference() {\n    // Main pyramid with slight rounding\n    cylinder(h=height, r1=base/2, r2=0, $fn=4);\n    \n    // Remove bottom corners to create rounded edges\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([base/2 - edge_radius, -edge_radius, -1])\n        cube([edge_radius, edge_radius*2, height+2]);\n    }\n}\n\n// Add rounded edges at corners\nfor(i=[0:3]) {\n    rotate([0, 0, i*90])\n    translate([base/2 - edge_radius, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=edge_radius, r=edge_radius, $fn=8);\n}",
    "renders": true
  },
  {
    "basic_shape": "pyramid_wide_base",
    "openscad_code": "// Wide-base pyramid with rounded edges\nbase_width = 100;\nbase_depth = 120;\nheight = 60;\nround_r = 3;\n\n// Create rounded base plate\ndifference() {\n    // Main pyramid\n    linear_extrude(height = height, scale = 0.01)\n        offset(round_r)\n            offset(-round_r)\n                square([base_width, base_depth], center = true);\n    \n    // Create rounded edges on top\n    translate([0, 0, height - round_r])\n        minkowski() {\n            cube([base_width*0.1, base_depth*0.1, round_r*2], center = true);\n            sphere(round_r);\n        }\n}\n\n// Add subtle bevel on bottom\ntranslate([0, 0, -1])\n    cube([base_width + 2, base_depth + 2, 2], center = true);",
    "renders": true
  },
  {
    "basic_shape": "pyramid_narrow_base",
    "openscad_code": "// Narrow-base pyramid with rounded edges\ndifference() {\n    // Main pyramid body\n    cylinder(h=80, r1=20, r2=60, $fn=4);\n    \n    // Rounded top edges\n    translate([0, 0, 76])\n        cylinder(h=8, r1=60, r2=64, $fn=4);\n    \n    // Smooth the base edges\n    translate([0, 0, -4])\n        cylinder(h=8, r1=16, r2=20, $fn=4);\n}\n\n// Subtle base platform\ntranslate([0, 0, -2])\n    cylinder(h=4, r=22, $fn=6);",
    "renders": true
  },
  {
    "basic_shape": "pyramid_truncated",
    "openscad_code": "// Truncated square pyramid with rounded top and bottom edges\nbottom = 80;\ntop = 40;\nheight = 60;\nradius = 3;\n\ndifference() {\n    union() {\n        // Main tapered body\n        cylinder(h=height, r1=bottom/2, r2=top/2, $fn=4);\n    }\n    \n    // Rounded bottom edges\n    translate([0, 0, -1])\n        cylinder(h=height+2, r1=bottom/2 - radius, r2=top/2 - radius, $fn=4);\n    \n    // Rounded top edges\n    translate([0, 0, height - radius])\n        cube([top + 1, top + 1, radius + 1], center=true);\n    \n    translate([0, 0, -1])\n        cube([bottom + 1, bottom + 1, radius + 1], center=true);\n}\n\n// Optional interior hollow\ntranslate([0, 0, height/2])\n    cylinder(h=height + 2, r1=bottom/2 - 5, r2=top/2 - 5, $fn=4);",
    "renders": true
  },
  {
    "basic_shape": "pyramid_hollow",
    "openscad_code": "// Hollow square pyramid, 100mm base, 80mm height, 5mm wall thickness\nmodule pyramid_hollow(base=100, height=80, wall=5) {\n    difference() {\n        // Outer pyramid\n        cylinder(h=height, r1=base/2, r2=0, $fn=4);\n        \n        // Inner hollow space\n        translate([0, 0, wall])  // shift up by wall thickness\n        cylinder(h=height-wall, r1=base/2-wall, r2=0, $fn=4);\n        \n        // Remove bottom face\n        translate([0, 0, -1])\n        cube([base*2, base*2, 2], center=true);\n    }\n}\n\npyramid_hollow();",
    "renders": true
  },
  {
    "basic_shape": "pyramid_inverted",
    "openscad_code": "// Inverted pyramid (pyramid pointing downward)\n// Base: 100mm square, height: 60mm, with rounded edges\n\nbase = 100;\nheight = 60;\nedge_radius = 4;\n\ndifference() {\n    // Main inverted pyramid\n    translate([0, 0, height/2])\n    rotate([180, 0, 0])\n    cylinder(h=height, r1=base/2, r2=0, $fn=4);\n\n    // Rounded edges by subtracting spheres at corners\n    for (x = [-1, 1])\n    for (y = [-1, 1])\n    translate([x * base/2, y * base/2, 0])\n    sphere(r=edge_radius, $fn=20);\n}",
    "renders": true
  },
  {
    "basic_shape": "polyhedron_tetrahedron",
    "openscad_code": "// Regular tetrahedron with rounded edges\n// Edge length 100mm, corner radius 5mm\n\nedge = 100;\ncorner_r = 5;\n\n// Vertices of a regular tetrahedron\nh = sqrt(2/3)*edge;\nv = [\n    [0, 0, 0],                          // bottom front left\n    [edge, 0, 0],                       // bottom front right\n    [edge/2, edge*sqrt(3)/2, 0],        // bottom back center\n    [edge/2, edge*sqrt(3)/6, h]         // top center\n];\n\n// Faces (outward normals)\nf = [\n    [0, 1, 2],  // bottom\n    [0, 3, 1],  // front left\n    [1, 3, 2],  // front right\n    [2, 3, 0]   // back\n];\n\n// Create rounded tetrahedron\ndifference() {\n    // Main shape\n    polyhedron(points = v, faces = f, convexity = 10);\n    \n    // Cut spheres at each vertex to round edges\n    for(pt = v)\n        translate(pt)\n            sphere(r = corner_r, $fn = 16);\n}\n\n// Optional: add small spheres to restore volume at vertices\nfor(pt = v)\n    translate(pt)\n        sphere(r = corner_r, $fn = 16);",
    "renders": true
  },
  {
    "basic_shape": "polyhedron_octahedron",
    "openscad_code": "// Octahedron with rounded edges (medium complexity)\nmodule octahedron_rounded(r=50, round=5) {\n    // Main octahedron via 8 faces\n    polyhedron(\n        points=[\n            [r, 0, 0], [-r, 0, 0],\n            [0, r, 0], [0, -r, 0],\n            [0, 0, r], [0, 0, -r]\n        ],\n        faces=[\n            [0,2,4], [2,1,4], [1,3,4], [3,0,4],\n            [2,0,5], [1,2,5], [3,1,5], [0,3,5]\n        ],\n        convexity=10\n    );\n    \n    // Add small spheres at vertices for rounding\n    for(p=[[r,0,0], [-r,0,0], [0,r,0], [0,-r,0], [0,0,r], [0,0,-r]]) {\n        translate(p) sphere(r=round, $fn=16);\n    }\n}\n\noctahedron_rounded(r=50, round=6);",
    "renders": true
  },
  {
    "basic_shape": "polyhedron_dodecahedron",
    "openscad_code": "// Dodecahedron with rounded edges, ~100 mm diameter\n$fn = 36;\n\nphi = (1 + sqrt(5)) / 2;  // golden ratio\n\n// Vertices of a regular dodecahedron\npts = [\n    [ 1,  1,  1], [ 1,  1, -1], [ 1, -1,  1], [ 1, -1, -1],\n    [-1,  1,  1], [-1,  1, -1], [-1, -1,  1], [-1, -1, -1],\n    [0,  phi, 1/phi], [0,  phi, -1/phi], [0, -phi, 1/phi], [0, -phi, -1/phi],\n    [1/phi, 0,  phi], [1/phi, 0, -phi], [-1/phi, 0,  phi], [-1/phi, 0, -phi],\n    [phi, 1/phi, 0], [phi, -1/phi, 0], [-phi, 1/phi, 0], [-phi, -1/phi, 0]\n];\n\n// Scale to ~50 mm radius\nscale = 50;\npts = [for (p = pts) [p.x * scale, p.y * scale, p.z * scale]];\n\n// Faces (each pentagon)\nfaces = [\n    [0, 16, 2, 12, 8], [0, 8, 4, 14, 12], [0, 12, 13, 1, 16],\n    [1, 13, 3, 17, 16], [2, 17, 3, 15, 12], [2, 16, 17, 3, 1],\n    [4, 8, 10, 18, 14], [5, 9, 11, 19, 15], [5, 15, 13, 1, 9],\n    [6, 10, 11, 19, 18], [6, 18, 14, 4, 10], [7, 11, 9, 5, 15],\n    [7, 19, 11, 10, 6], [7, 15, 3, 13, 5], [7, 19, 18, 14, 15]\n];\n\n// Rounded edges via minkowski\nminkowski() {\n    polyhedron(points = pts, faces = faces, convexity = 10);\n    sphere(r = 2);\n}",
    "renders": true
  },
  {
    "basic_shape": "polyhedron_icosahedron",
    "openscad_code": "// Regular icosahedron (20 equilateral triangular faces)\n// Approx 100 mm point-to-point\n\nphi = (1 + sqrt(5)) / 2;       // golden ratio\n\n// 12 vertices of a unit icosahedron\npts = [\n    [0, 1, phi],      // 0\n    [0, -1, phi],     // 1\n    [0, -1, -phi],    // 2\n    [0, 1, -phi],     // 3\n    [1, phi, 0],      // 4\n    [-1, phi, 0],     // 5\n    [-1, -phi, 0],    // 6\n    [1, -phi, 0],     // 7\n    [phi, 0, 1],      // 8\n    [-phi, 0, 1],     // 9\n    [-phi, 0, -1],    // 10\n    [phi, 0, -1]      // 11\n];\n\n// 20 faces (triangles)\nfaces = [\n    [0,1,8],  [0,9,1],  [1,6,7],  [1,9,6],  [7,8,1],\n    [4,8,0],  [4,0,5],  [5,0,9],  [5,10,3], [5,9,10],\n    [3,10,2], [3,2,11], [11,2,7], [11,7,8], [11,8,4],\n    [4,5,3],  [4,3,11], [2,6,10], [2,7,6],  [10,6,9]\n];\n\n// Scale to 100 mm overall\nscale(47.6)\n    polyhedron(points = pts, faces = faces, convexity = 10);",
    "renders": true
  },
  {
    "basic_shape": "box",
    "openscad_code": "// Rounded box with lid\nbox_w = 80;\nbox_d = 60;\nbox_h = 40;\nwall = 3;\nr = 5; // corner radius\n\ndifference() {\n    minkowski() {\n        cube([box_w-2*r, box_d-2*r, box_h-2*r], center=true);\n        sphere(r);\n    }\n    translate([0, 0, 1])\n    minkowski() {\n        cube([box_w-2*r-2*wall, box_d-2*r-2*wall, box_h-2*r], center=true);\n        sphere(r);\n    }\n}\n\n// Lid\ntranslate([0, 0, box_h+2])\ndifference() {\n    minkowski() {\n        cube([box_w-2*r, box_d-2*r, wall], center=true);\n        sphere(r);\n    }\n    translate([0, 0, -1])\n    cube([box_w-2*r-2*wall, box_d-2*r-2*wall, wall+2], center=true);\n}",
    "renders": true
  },
  {
    "basic_shape": "box_square",
    "openscad_code": "// Square box with rounded edges and bottom recess\nbox_size = 80;\nwall = 3;\nradius = 8;\nheight = 40;\n\ndifference() {\n    // Main rounded box\n    minkowski() {\n        cube([box_size-2*radius, box_size-2*radius, height-radius], center=true);\n        sphere(radius);\n    }\n    \n    // Hollow interior\n    minkowski() {\n        cube([box_size-2*radius-2*wall, box_size-2*radius-2*wall, height-radius], center=true);\n        sphere(radius-wall);\n    }\n    \n    // Bottom recess\n    translate([0, 0, -height/2 + 2])\n        cube([box_size/2, box_size/2, 5], center=true);\n}",
    "renders": true
  },
  {
    "basic_shape": "box_rectangular",
    "openscad_code": "$fn=32;\n\n// rounded rectangular box with lip and bottom plate\nwall = 2;\nradius = 8;\nsize = [80, 60, 40];\nlip = 3;\n\n// outer shell with rounded edges\nminkowski() {\n    difference() {\n        cube([size.x-2*radius, size.y-2*radius, size.z-2*radius]);\n        translate([wall, wall, wall + lip])\n            cube([size.x-2*(radius+wall), size.y-2*(radius+wall), size.z-2*(radius+wall)-lip]);\n    }\n    sphere(r=radius);\n}\n\n// bottom plate\ndifference() {\n    translate([0, 0, -wall])\n        cube([size.x, size.y, wall]);\n    translate([wall, wall, -wall])\n        cube([size.x-2*wall, size.y-2*wall, wall+1]);\n}",
    "renders": true
  },
  {
    "basic_shape": "box_long",
    "openscad_code": "// box_long - medium complexity\n// Long box with rounded edges and simple hollow interior\n\nlength = 120;\nwidth = 40;\nheight = 35;\nwall = 3;\nradius = 6;\n\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        translate([r, r, 0]) cylinder(h=h, r=r, $fn=20);\n        translate([l-r, r, 0]) cylinder(h=h, r=r, $fn=20);\n        translate([l-r, w-r, 0]) cylinder(h=h, r=r, $fn=20);\n        translate([r, w-r, 0]) cylinder(h=h, r=r, $fn=20);\n    }\n}\n\ndifference() {\n    rounded_box(length, width, height, radius);\n    translate([wall, wall, wall])\n        rounded_box(length-2*wall, width-2*wall, height-wall+1, radius-wall);\n}",
    "renders": true
  },
  {
    "basic_shape": "box_wide",
    "openscad_code": "// Box_wide with rounded edges and bottom relief\nbox_w = 100;\nbox_d = 70;\nbox_h = 40;\nwall = 3;\nr = 6;\n\ndifference() {\n    // Main rounded box\n    minkowski() {\n        cube([box_w-2*r, box_d-2*r, box_h-r]);\n        sphere(r);\n    }\n    \n    // Hollow interior\n    minkowski() {\n        cube([box_w-2*r-2*wall, box_d-2*r-2*wall, box_h-r-wall]);\n        sphere(r-wall/2);\n    }\n    \n    // Bottom relief groove\n    translate([0, 0, -1])\n        cube([box_w-2*wall-2*r, 10, wall+2], center=true);\n}",
    "renders": true
  },
  {
    "basic_shape": "box_tall",
    "openscad_code": "// Tall box with rounded edges\n$fn = 32;\n\nheight = 100;\nwidth = 60;\ndepth = 60;\nradius = 8;\nwall = 4;\n\ndifference() {\n    // Main rounded box\n    union() {\n        // Central box\n        translate([0, 0, height/2])\n            cube([width - 2*radius, depth - 2*radius, height], center=true);\n        \n        // Side edges\n        for(x = [-1, 1])\n            translate([x * (width - radius)/2, 0, height/2])\n                cube([radius, depth - 2*radius, height], center=true);\n        \n        for(y = [-1, 1])\n            translate([0, y * (depth - radius)/2, height/2])\n                cube([width - 2*radius, radius, height], center=true);\n        \n        // Corner cylinders\n        for(x = [-1, 1])\n            for(y = [-1, 1])\n                translate([x * (width - radius)/2, y * (depth - radius)/2, height/2])\n                    cylinder(h=height, r=radius, center=true);\n    }\n    \n    // Hollow interior\n    translate([0, 0, height/2 - wall/2])\n        cube([width - 2*wall, depth - 2*wall, height - wall], center=true);\n}",
    "renders": true
  },
  {
    "basic_shape": "box_thin",
    "openscad_code": "// box_thin - thin walled rectangular box with rounded edges\nwall = 2;\nouter_x = 80;\nouter_y = 60;\nouter_z = 40;\nradius = 6;\n\ndifference() {\n    // outer rounded box\n    minkowski() {\n        cube([outer_x - 2*radius, outer_y - 2*radius, outer_z - 2*radius], center = true);\n        sphere(r = radius);\n    }\n    \n    // hollow interior\n    translate([0, 0, wall/2])\n    minkowski() {\n        cube([outer_x - 2*radius - 2*wall, \n              outer_y - 2*radius - 2*wall, \n              outer_z - 2*wall], center = true);\n        sphere(r = radius - wall);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "box_hollow",
    "openscad_code": "// Hollow box with rounded edges and bottom opening\nwall = 3;\nsize = 60;\nround = 4;\ngap = 15;\n\ndifference() {\n    // outer rounded shell\n    minkowski() {\n        cube([size, size, size], center = true);\n        sphere(r = round);\n    }\n    \n    // inner cavity\n    minkowski() {\n        cube([size - 2*wall, size - 2*wall, size - wall], center = true);\n        sphere(r = round - wall);\n    }\n    \n    // bottom cutout\n    translate([0, 0, -size/2 - 1])\n        cube([gap, gap, size + 2], center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "box_rounded",
    "openscad_code": "// Rounded box with hollow interior\nouter_w = 80;\nouter_d = 60;\nouter_h = 40;\nwall = 3;\nr = 6;\n\n// outer shell\nminkowski() {\n    cube([outer_w-2*r, outer_d-2*r, outer_h-2*r], center=true);\n    sphere(r);\n}\n\n// hollow interior\ndifference() {\n    minkowski() {\n        cube([outer_w-2*r, outer_d-2*r, outer_h-2*r], center=true);\n        sphere(r);\n    }\n    minkowski() {\n        cube([outer_w-2*r-2*wall, outer_d-2*r-2*wall, outer_h-2*r-wall], center=true);\n        sphere(r-wall*0.7);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "box_with_lid",
    "openscad_code": "// Box with lid, medium complexity\nwall = 2;\nr = 8;\n\n// Box\ndifference() {\n    translate([0, 0, r])\n        minkowski() {\n            cube([60, 40, 30 - r], center = true);\n            sphere(r);\n        }\n    translate([0, 0, 30/2 + 0.5])\n        cube([60 - 2*wall, 40 - 2*wall, 30], center = true);\n}\n\n// Lid\ntranslate([0, 0, 30 + r + 2])\n    difference() {\n        minkowski() {\n            cube([60.2, 40.2, 8], center = true);\n            sphere(r);\n        }\n        translate([0, 0, 0])\n            cube([60.2 - 2*wall, 40.2 - 2*wall, 10], center = true);\n    }",
    "renders": true
  },
  {
    "basic_shape": "box_with_drawer",
    "openscad_code": "$fn = 32;\n\nbox_w = 100;\nbox_d = 80;\nbox_h = 60;\nwall_t = 3;\nround_r = 4;\n\nmodule rounded_box(w, d, h, r) {\n    translate([0, 0, r]) cube([w, d, h - 2*r], center = true);\n    translate([0, 0, h/2 - r]) cylinder(h = 2*r, r = r, center = true);\n    translate([0, 0, -h/2 + r]) cylinder(h = 2*r, r = r, center = true);\n}\n\ndifference() {\n    rounded_box(box_w, box_d, box_h, round_r);\n    translate([0, 0, -wall_t]) cube([box_w - 2*wall_t, box_d - 2*wall_t, box_h], center = true);\n}\n\ndrawer_w = box_w - 2*wall_t - 2;\ndrawer_d = box_d - 2*wall_t - 2;\ndrawer_h = box_h * 0.4;\n\ntranslate([0, 0, -box_h/2 + drawer_h/2 + wall_t])\ndifference() {\n    rounded_box(drawer_w, drawer_d, drawer_h, round_r);\n    translate([0, drawer_d/2 - wall_t - 1, 0])\n    cube([drawer_w - 10, 2*wall_t + 2, drawer_h - 10], center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "box_open_top",
    "openscad_code": "// Box with open top and rounded edges\nbox_w = 80;\nbox_d = 60;\nbox_h = 40;\nwall_t = 3;\nround_r = 4;\n\n// Outer shell\ndifference() {\n    minkowski() {\n        cube([box_w, box_d, box_h], center = true);\n        sphere(round_r);\n    }\n    \n    // Hollow interior\n    translate([0, 0, -round_r/2])\n    minkowski() {\n        cube([box_w - 2*wall_t, box_d - 2*wall_t, box_h - wall_t], center = true);\n        sphere(round_r - 0.01);\n    }\n    \n    // Remove top\n    translate([0, 0, box_h/2 + 1])\n    cube([box_w + 2, box_d + 2, 2], center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "box_open_sides",
    "openscad_code": "// Box with open sides and rounded edges\nwall = 3;\nsize = 60;\n\nmodule rounded_box(width, height, depth, r) {\n    difference() {\n        minkowski() {\n            cube([width-2*r, height-2*r, depth-2*r], center=true);\n            sphere(r);\n        }\n        translate([0,0,-depth/2])\n            cube([width+2, height+2, depth], center=true);\n    }\n}\n\ndifference() {\n    rounded_box(size, size, size, 5);\n    \n    // Cut out sides\n    translate([0, size/2, 0])\n        cube([size-wall*2, size, size-wall*2], center=true);\n    translate([0, -size/2, 0])\n        cube([size-wall*2, size, size-wall*2], center=true);\n    translate([size/2, 0, 0])\n        cube([size, size-wall*2, size-wall*2], center=true);\n    translate([-size/2, 0, 0])\n        cube([size, size-wall*2, size-wall*2], center=true);\n}",
    "renders": true
  },
  {
    "basic_shape": "box_corner_missing",
    "openscad_code": "// Box with one corner cut out (rounded edges)\ncorner = 8;          // corner radius\nwall = 3;            // wall thickness\nsize = 70;           // outer size\n\ndifference() {\n    // main rounded box\n    minkowski() {\n        cube([size-2*corner, size-2*corner, size-2*corner], center=true);\n        sphere(r=corner);\n    }\n\n    // cut away corner\n    translate([size/2, size/2, size/2])\n        cube([size/2+corner, size/2+corner, size/2+corner], center=false);\n\n    // hollow interior\n    minkowski() {\n        cube([size-2*corner-2*wall, size-2*corner-2*wall, size-2*corner-2*wall], center=true);\n        sphere(r=corner-wall);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "pillar",
    "openscad_code": "// Simple pillar with rounded top and bottom edges\npillar_height = 100;\npillar_radius = 20;\nedge_radius = 5;\n\ndifference() {\n    // Main pillar body\n    cylinder(h = pillar_height, r = pillar_radius, $fn = 50);\n    \n    // Round top edge\n    translate([0, 0, pillar_height - edge_radius])\n        cylinder(h = edge_radius, r = pillar_radius - edge_radius, $fn = 50);\n    \n    // Round bottom edge\n    translate([0, 0, 0])\n        cylinder(h = edge_radius, r = pillar_radius - edge_radius, $fn = 50);\n}\n\n// Add rounded top cap\ntranslate([0, 0, pillar_height - edge_radius])\n    sphere(r = edge_radius, $fn = 30);\n\n// Add rounded bottom cap\ntranslate([0, 0, edge_radius])\n    sphere(r = edge_radius, $fn = 30);",
    "renders": true
  },
  {
    "basic_shape": "pillar_round",
    "openscad_code": "// Pillar with rounded top and bottom edges\npillar_height = 100;\npillar_radius = 25;\nedge_radius = 5;\n\ndifference() {\n    // Main pillar body\n    cylinder(h=pillar_height, r=pillar_radius, $fn=64);\n    \n    // Remove sharp edges at top\n    translate([0, 0, pillar_height - edge_radius])\n        cylinder(h=edge_radius + 1, r=pillar_radius - edge_radius, $fn=64);\n    \n    // Remove sharp edges at bottom\n    translate([0, 0, -1])\n        cylinder(h=edge_radius + 1, r=pillar_radius - edge_radius, $fn=64);\n}\n\n// Add rounded top cap\ntranslate([0, 0, pillar_height - edge_radius])\n    sphere(r=edge_radius, $fn=32);\n\n// Add rounded bottom base\nmirror([0, 0, 1])\n    translate([0, 0, pillar_height - edge_radius])\n        sphere(r=edge_radius, $fn=32);",
    "renders": true
  },
  {
    "basic_shape": "pillar_square",
    "openscad_code": "// square pillar with rounded top and bottom edges\npillar_w = 40;\npillar_h = 100;\npillar_d = 40;\nedge_r = 5;\n\ndifference() {\n    union() {\n        // main body\n        cube([pillar_w, pillar_d, pillar_h - 2*edge_r]);\n        \n        // top rounded edge\n        translate([0, 0, pillar_h - edge_r])\n            minkowski() {\n                cube([pillar_w, pillar_d, 0.01]);\n                sphere(edge_r);\n            }\n        \n        // bottom rounded edge\n            minkowski() {\n                cube([pillar_w, pillar_d, 0.01]);\n                sphere(edge_r);\n            }\n    }\n    \n    // remove interior excess\n    translate([-1, -1, -1])\n        cube([pillar_w + 2, pillar_d + 2, edge_r]);\n    translate([-1, -1, pillar_h - edge_r + 1])\n        cube([pillar_w + 2, pillar_d + 2, edge_r + 2]);\n}",
    "renders": true
  },
  {
    "basic_shape": "pillar_tall",
    "openscad_code": "// Medium complexity pillar_tall with rounded edges and slight taper\nmodule pillar_tall() {\n    difference() {\n        // Main tapered column with rounded top\n        union() {\n            cylinder(h=120, r1=30, r2=25, $fn=32);\n            translate([0, 0, 120]) cylinder(h=10, r1=25, r2=25, $fn=32);\n            translate([0, 0, 130]) sphere(r=25, $fn=32);\n        }\n        \n        // Remove bottom to create flat base\n        translate([0, 0, -1]) cube(80, center=true);\n        \n        // Add subtle groove near top\n        translate([0, 0, 100]) cylinder(h=5, r=27, $fn=32);\n    }\n}\n\npillar_tall();",
    "renders": true
  },
  {
    "basic_shape": "pillar_short",
    "openscad_code": "// short pillar with rounded edges and base fillet\n$fn = 32;\n\npillar_height = 80;\npillar_dia = 40;\ntop_r = 3;\nbase_r = 5;\n\ndifference() {\n    // main body with rounded top\n    cylinder(h = pillar_height - top_r, r = pillar_dia/2);\n    translate([0, 0, pillar_height - top_r])\n        sphere(r = pillar_dia/2);\n\n    // base fillet\n    translate([0, 0, -0.01])\n        cylinder(h = base_r, r1 = pillar_dia/2 - base_r, r2 = pillar_dia/2);\n}\n\n// bottom base plate\ntranslate([0, 0, -5])\n    cylinder(h = 5, r = pillar_dia/2 + 5);",
    "renders": true
  },
  {
    "basic_shape": "pillar_thick",
    "openscad_code": "// Pillar with rounded edges and a slight taper\n$fn = 32;\n\npillar_height = 100;\nbase_radius = 25;\ntop_radius = 22;\nedge_radius = 3;\n\nmodule rounded_pillar(h, r1, r2, edge) {\n    difference() {\n        cylinder(h=h, r1=r1, r2=r2);\n        translate([0, 0, -0.1])\n            cylinder(h=h + 0.2, r1=r1 - edge, r2=r2 - edge);\n    }\n    \n    translate([0, 0, 0])\n        cylinder(h=edge, r1=edge, r2=r1);\n    \n    translate([0, 0, h - edge])\n        cylinder(h=edge, r1=r2, r2=edge);\n}\n\nrounded_pillar(pillar_height, base_radius, top_radius, edge_radius);",
    "renders": true
  },
  {
    "basic_shape": "pillar_thin",
    "openscad_code": "// Pillar_thin with rounded edges and slight taper\nh = 90;\nr_base = 20;\nr_top = 18;\nround_r = 4;\n\ndifference() {\n    cylinder(h=h, r1=r_base, r2=r_top, $fn=32);\n    translate([0, 0, -0.1])\n        cylinder(h=h+0.2, r1=r_base-round_r, r2=r_top-round_r, $fn=32);\n}\n\ntranslate([0, 0, -0.1])\n    cylinder(h=round_r, r1=r_base, r2=r_base-round_r, $fn=32);\n\ntranslate([0, 0, h-round_r])\n    cylinder(h=round_r+0.1, r1=r_top-round_r, r2=r_top, $fn=32);",
    "renders": true
  },
  {
    "basic_shape": "pillar_fluted",
    "openscad_code": "// fluted pillar - medium complexity\nmodule pillar_fluted(h=100, r=25, flutes=8, depth=2) {\n    // main shaft\n    cylinder(h=h, r=r, $fn=100);\n\n    // generate flute cuts\n    for(i=[0:flutes-1])\n        rotate([0,0,i*360/flutes])\n            translate([r+depth,0,0])\n                rotate([0,90,0])\n                    cylinder(h=r*2+depth*2, r=depth*2, $fn=6);\n}\n\n// subtract flutes from shaft\ndifference() {\n    pillar_fluted();\n    pillar_fluted();\n}",
    "renders": true
  },
  {
    "basic_shape": "pillar_tapered",
    "openscad_code": "// Tapered pillar with rounded top and bottom edges\n$fn = 32;\n\npillar_height = 100;\nbottom_radius = 25;\ntop_radius = 15;\nedge_radius = 3;\n\ndifference() {\n    cylinder(h = pillar_height, r1 = bottom_radius, r2 = top_radius, center = true);\n    \n    // Rounded bottom edge\n    translate([0, 0, -pillar_height/2 + edge_radius])\n        rotate_extrude(angle = 90)\n            translate([bottom_radius - edge_radius, 0, 0])\n                circle(r = edge_radius);\n    \n    // Rounded top edge\n    translate([0, 0, pillar_height/2 - edge_radius])\n        rotate([0, 180, 0])\n            rotate_extrude(angle = 90)\n                translate([top_radius - edge_radius, 0, 0])\n                    circle(r = edge_radius);\n}\n\n// Small smoothing fillet at top\ntranslate([0, 0, pillar_height/2 - edge_radius*2])\n    cylinder(h = edge_radius*2, r1 = top_radius, r2 = top_radius - 1, center = true);",
    "renders": true
  },
  {
    "basic_shape": "pillar_hollow",
    "openscad_code": "// hollow pillar with rounded top and bottom edges\nheight = 100;\nouter_r = 25;\nwall = 4;\nedge_r = 3;\n\ndifference() {\n    // outer shell with rounded ends\n    minkowski() {\n        cylinder(h = height - 2*edge_r, r = outer_r - edge_r, $fn = 64);\n        sphere(r = edge_r, $fn = 32);\n    }\n    \n    // inner hollow\n    minkowski() {\n        cylinder(h = height - 2*(edge_r + wall), r = outer_r - wall - edge_r, $fn = 64);\n        sphere(r = edge_r, $fn = 32);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "disk",
    "openscad_code": "// Disk with rounded edges\n$fn = 64;\n\n// Main disk body\ndifference() {\n    // Outer rounded disk\n    union() {\n        cylinder(h = 8, r = 40);\n        translate([0, 0, 8])\n            cylinder(h = 4, r1 = 40, r2 = 38);\n    }\n    \n    // Center hole\n    cylinder(h = 12, r = 6);\n    \n    // Lightening holes\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([25, 0, 0])\n                cylinder(h = 12, r = 4);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "disk_thick",
    "openscad_code": "// Disk with rounded edges and central hole\n$fn = 50;\n\n// Parameters\ndiameter = 80;\nthickness = 12;\nedge_radius = 2;\nhole_diameter = 20;\n\ndifference() {\n    // Main disk with rounded top/bottom edges\n    union() {\n        // Center cylinder\n        cylinder(h = thickness - 2*edge_radius, r = diameter/2 - edge_radius, center = true);\n        \n        // Top rounded edge\n        translate([0, 0, thickness/2 - edge_radius])\n            cylinder(h = edge_radius, r1 = diameter/2 - edge_radius, r2 = diameter/2, center = true);\n        \n        // Bottom rounded edge\n        translate([0, 0, -thickness/2 + edge_radius])\n            cylinder(h = edge_radius, r1 = diameter/2, r2 = diameter/2 - edge_radius, center = true);\n    }\n    \n    // Central hole\n    cylinder(h = thickness + 1, r = hole_diameter/2, center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "disk_thin",
    "openscad_code": "// disk_thin - medium complexity\n// Rounded top and bottom edges\n\nmodule disk_thin(r=60, h=5, edge_r=2) {\n    difference() {\n        // main disk\n        cylinder(h=h, r=r, $fn=128);\n        \n        // top edge chamfer\n        translate([0, 0, h-edge_r])\n            cylinder(h=edge_r+0.1, r1=r-edge_r, r2=r, $fn=128);\n            \n        // bottom edge chamfer\n        translate([0, 0, -0.1])\n            cylinder(h=edge_r+0.1, r1=r, r2=r-edge_r, $fn=128);\n    }\n    \n    // top rounded edge\n    translate([0, 0, h-edge_r])\n        cylinder(h=edge_r, r=r-edge_r, $fn=128);\n        \n    // bottom rounded edge\n    translate([0, 0, edge_r])\n        cylinder(h=edge_r, r=r-edge_r, $fn=128);\n}\n\ndisk_thin();",
    "renders": true
  },
  {
    "basic_shape": "disk_large",
    "openscad_code": "// Large disk with rounded top edge and center hole\nthickness = 20;\nradius = 75;\ncenter_hole = 15;\nedge_radius = 3;\n\ndifference() {\n    union() {\n        cylinder(h = thickness - edge_radius, r = radius, $fn = 64);\n        translate([0, 0, thickness - edge_radius])\n            cylinder(h = edge_radius, r1 = radius, r2 = radius - edge_radius, $fn = 64);\n    }\n    cylinder(h = thickness + 1, r = center_hole, $fn = 32);\n}",
    "renders": true
  },
  {
    "basic_shape": "disk_small",
    "openscad_code": "// disk_small - medium complexity\n// Small disk (~80 mm) with rounded top edge and central countersink\n\nd = 80;          // outer diameter\nh = 8;           // total thickness\nr_edge = 3;      // rounding radius\ncsink_d = 20;    // countersink diameter\ncsink_h = 2;     // countersink depth\n\ndifference() {\n    // main disk body\n    union() {\n        cylinder(h = h - r_edge, d = d, $fn = 100);\n        translate([0, 0, h - r_edge])\n            cylinder(h = r_edge, d1 = d, d2 = d - 2*r_edge, $fn = 100);\n    }\n    \n    // top countersink\n    translate([0, 0, h - csink_h])\n        cylinder(h = csink_h, d1 = csink_d, d2 = 0, $fn = 50);\n}",
    "renders": true
  },
  {
    "basic_shape": "disk_with_hole",
    "openscad_code": "// disk_with_hole.scad\n// Medium complexity: rounded edges and center hole\n\nouter_d = 100;\ninner_d = 20;\nthickness = 10;\nround_r = 2;\n\n// main disk body with rounded top edge\ndifference() {\n    union() {\n        // base disk\n        cylinder(h=thickness, r=outer_d/2, $fn=64);\n        \n        // rounded top edge\n        translate([0,0,thickness-round_r])\n            minkowski() {\n                cylinder(h=0.1, r=outer_d/2-round_r, $fn=64);\n                sphere(r=round_r, $fn=32);\n            }\n    }\n    \n    // center hole\n    cylinder(h=thickness+1, r=inner_d/2, $fn=64);\n    \n    // rounded bottom edge\n    translate([0,0,-0.5])\n        cylinder(h=0.1, r=outer_d/2, $fn=64);\n    translate([0,0,-round_r])\n        minkowski() {\n            cylinder(h=0.1, r=outer_d/2-round_r, $fn=64);\n            sphere(r=round_r, $fn=32);\n        }\n}",
    "renders": true
  },
  {
    "basic_shape": "disk_rounded",
    "openscad_code": "// rounded disk, 80 mm diameter, 10 mm thick with 2 mm rounded edges\n\nth = 10;\ndia = 80;\nr = dia/2;\nround = 2;\n\ndifference() {\n    cylinder(h = th, r = r, $fn = 120);\n    translate([0, 0, -1])\n        cylinder(h = th + 2, r = r - round, $fn = 120);\n}\n\ntranslate([0, 0, th - round])\n    difference() {\n        cylinder(h = round + 1, r = r, $fn = 120);\n        cylinder(h = round + 1, r = r - round, $fn = 120);\n}\n\ntranslate([0, 0, -1])\n    difference() {\n        cylinder(h = round + 1, r = r, $fn = 120);\n        cylinder(h = round + 1, r = r - round, $fn = 120);\n}",
    "renders": true
  },
  {
    "basic_shape": "disk_chamfered",
    "openscad_code": "// disk_chamfered.scad\n// medium-complexity disk with 45Â° chamfered top edge\n\ndisk_d = 80;\ndisk_h = 12;\nchamfer = 3;\n\ndifference() {\n    // main disk\n    cylinder(h = disk_h, r = disk_d/2, $fn = 80);\n    \n    // chamfer cut\n    translate([0, 0, disk_h - chamfer])\n        cylinder(h = chamfer + 0.1, r1 = disk_d/2 - chamfer,\n                       r2 = disk_d/2 + 0.1, $fn = 80);\n}\n\n// optional center hole\nhole_r = 8;\ntranslate([0, 0, -1])\n    cylinder(h = disk_h + 2, r = hole_r, $fn = 40);",
    "renders": true
  },
  {
    "basic_shape": "wedge",
    "openscad_code": "// Simple wedge with rounded leading edge and chamfered back\n$fn = 50;\n\ndifference() {\n    // Main wedged block\n    hull() {\n        translate([0, 0, 0]) cube([2, 40, 2], center=true);\n        translate([80, 0, 0]) cube([2, 20, 15], center=true);\n    }\n    \n    // Chamfer rear top edge\n    translate([65, 0, 7.5]) rotate([0, 45, 0]) cube([30, 50, 20], center=true);\n    \n    // Chamfer rear bottom edge\n    translate([65, 0, -7.5]) rotate([0, -45, 0]) cube([30, 50, 20], center=true);\n}\n\n// Round the front edge\ntranslate([80, 0, 0]) rotate([0, 90, 0]) cylinder(h=20, r=7.5, center=true);",
    "renders": true
  },
  {
    "basic_shape": "wedge_small",
    "openscad_code": "// Wedge with rounded leading edge and base fillet\nw = 60;\nl = 100;\nh = 40;\nr = 8;\n\ndifference() {\n    union() {\n        // Main wedge body\n        hull() {\n            translate([0, 0, 0])\n                cube([w, l, h]);\n            translate([0, l, 0])\n                cube([w, 0.1, 0.1]);\n        }\n\n        // Rounded leading edge\n        translate([w/2, l, h])\n            rotate([90, 0, 0])\n                cylinder(h=w, r=r, $fn=20);\n    }\n\n    // Remove excess material for rounded edge\n    translate([w/2, l, h + r])\n        rotate([90, 0, 0])\n            cylinder(h=w + 1, r=r + 1, $fn=20);\n\n    // Base fillet cut\n    translate([0, -1, -1])\n        cube([w + 2, l + 2, r]);\n    translate([r, r - 1, -1])\n        cube([w - 2*r, l - 2*r + 2, r + 1]);\n    translate([r, r - 1, -1])\n        rotate_extrude(angle=90, $fn=20)\n            translate([r, 0, 0])\n                circle(r=r, $fn=20);\n    translate([w - r, r - 1, -1])\n        rotate_extrude(angle=90, $fn=20)\n            translate([r, 0, 0])\n                circle(r=r, $fn=20);\n}",
    "renders": true
  },
  {
    "basic_shape": "wedge_large",
    "openscad_code": "// Simple wedge with rounded edges\nlength = 100;\nwidth = 60;\nheight = 30;\nfillet = 5;\n\ndifference() {\n    // Main wedge body\n    linear_extrude(height = height)\n        polygon([\n            [0, 0],\n            [length, 0],\n            [length, width],\n            [0, width]\n        ]);\n    \n    // Top edge fillet\n    translate([length - fillet, width - fillet, height - fillet])\n        rotate([0, 90, 0])\n            cylinder(h = fillet, r = fillet, $fn = 20);\n    \n    // Bottom edge fillet\n    translate([length - fillet, fillet, fillet])\n        rotate([0, 90, 0])\n            cylinder(h = fillet, r = fillet, $fn = 20);\n    \n    // Side edge fillets\n    translate([fillet, fillet, height - fillet])\n        rotate([90, 0, 0])\n            cylinder(h = fillet, r = fillet, $fn = 20);\n    \n    translate([fillet, width - fillet, height - fillet])\n        rotate([90, 0, 0])\n            cylinder(h = fillet, r = fillet, $fn = 20);\n}",
    "renders": true
  },
  {
    "basic_shape": "wedge_tall",
    "openscad_code": "// Wedge with rounded top edge\n$fn = 32;\n\nmodule wedge_tall() {\n    difference() {\n        // Main wedge body\n        linear_extrude(height = 80, scale = 0.2) \n            square([100, 60], center = true);\n        \n        // Round the top back edge\n        translate([0, 30, 80])\n            rotate([90, 0, 0])\n                cylinder(h = 100, r = 5);\n    }\n    \n    // Add slight fillet at front base\n    translate([0, -30, 0])\n        cube([100, 5, 3], center = true);\n}\n\nwedge_tall();",
    "renders": true
  },
  {
    "basic_shape": "wedge_thin",
    "openscad_code": "// Wedge with rounded edges\n$fn = 32;\n\nlength = 100;\nwidth  = 60;\nheight = 30;\nradius = 5;\n\ndifference() {\n    // Main wedge body with rounded edges\n    hull() {\n        translate([radius, radius, radius])\n            cube([length - 2*radius, width - 2*radius, height - 2*radius]);\n        for(x = [radius, length - radius], y = [radius, width - radius], z = [radius, height - radius])\n            translate([x, y, z])\n                sphere(r = radius);\n    }\n    \n    // Remove bottom to create flat base\n    translate([-1, -1, -1])\n        cube([length + 2, width + 2, 2]);\n}",
    "renders": true
  },
  {
    "basic_shape": "wedge_wide",
    "openscad_code": "// Wedge_wide with rounded edges\n// Overall dimensions: 100mm wide, 60mm deep, 30mm high\n\nlinear_extrude(height = 30, convexity = 10) {\n    offset(r = 5) offset(r = -5) polygon(points=[\n        [0, 0],\n        [100, 0],\n        [100, 20],\n        [20, 60],\n        [0, 60]\n    ]);\n}",
    "renders": true
  },
  {
    "basic_shape": "wedge_steep",
    "openscad_code": "// Medium-complexity wedge_steep â steep triangular wedge with rounded edges\n// Wedge size: 100 mm long, 50 mm wide, 30 mm high\n\n$fs = 2;\n$fa = 2;\n\nheight = 30;\nlength = 100;\nwidth  = 50;\nedge   = 3;          // rounding radius\n\ndifference() {\n    // Main wedge body\n    polyhedron(\n        points = [\n            [0, 0, 0],            // 0\n            [length, 0, 0],       // 1\n            [length, width, 0],   // 2\n            [0, width, 0],        // 3\n            [0, 0, height],       // 4\n            [length, 0, height],  // 5\n            [length, width, 0],   // 6 (duplicate 2 for clean edge)\n            [0, width, height]    // 7\n        ],\n        faces = [\n            [0, 3, 2, 1],         // bottom\n            [4, 5, 6, 7],         // top\n            [0, 1, 5, 4],         // front\n            [1, 2, 6, 5],         // right\n            [3, 7, 6, 2],         // back\n            [0, 4, 7, 3]          // left\n        ]\n    );\n\n    // Rounding cuts on the sharp edges\n    // Front-bottom edge\n    translate([length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = length + 2, r = edge, center = true);\n\n    // Back-bottom edge\n    translate([length/2, width, 0])\n        rotate([0, 90, 0])\n            cylinder(h = length + 2, r = edge, center = true);\n\n    // Left-bottom edge\n    translate([0, width/2, 0])\n        rotate([90, 0, 0])\n            cylinder(h = width + 2, r = edge, center = true);\n\n    // Right-bottom edge\n    translate([length, width/2, 0])\n        rotate([90, 0, 0])\n            cylinder(h = width + 2, r = edge, center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "wedge_shallow",
    "openscad_code": "// shallow wedge 100 x 60 x 10 mm with 2 mm edge fillets\n$fn = 32;\n\ndifference() {\n    // main wedge body\n    linear_extrude(height = 10, scale = 0.2) square([100, 60], center = true);\n\n    // remove sharp edges by cutting rounded corners\n    translate([ 0,  0, 9.9])\n        cube([110, 70, 2.1], center = true);\n\n    translate([ 0,  0, 0.1])\n        cube([110, 70, 2.1], center = true);\n\n    // side edge fillets\n    translate([ 50,  30, 5])\n        rotate([0, -90, 0])\n            cylinder(h = 2, r = 2);\n\n    translate([ 50, -30, 5])\n        rotate([0, -90, 0])\n            cylinder(h = 2, r = 2);\n\n    translate([-50,  30, 5])\n        rotate([0, -90, 0])\n            cylinder(h = 2, r = 2);\n\n    translate([-50, -30, 5])\n        rotate([0, -90, 0])\n            cylinder(h = 2, r = 2);\n}",
    "renders": true
  },
  {
    "basic_shape": "wedge_rounded",
    "openscad_code": "// wedge_rounded.scad â medium-complexity geometric primitive\n\nmodule wedge_rounded(w=80, d=60, h=40, r=5, fn=32) {\n    // outer block minus corner spheres to create rounded edges\n    difference() {\n        cube([w, d, h], center=false);\n        for(x=[0, w]) for(y=[0, d]) for(z=[0, h])\n            translate([x, y, z])\n                sphere(r=r, $fn=fn);\n    }\n\n    // sloped top face\n    difference() {\n        translate([0, 0, h])\n            cube([w, d, d], center=false);\n        rotate([0, 0, atan(d/h)])\n            translate([0, -1, -h])\n                cube([w, d+2, h*2], center=false);\n    }\n\n    // rounding the sloped edges\n    intersection() {\n        children();\n        difference() {\n            cube([w+2*r, d+2*r, h+r], center=false);\n            for(x=[-r, w+r]) for(y=[-r, d+r]) for(z=[-r, h+r])\n                translate([x, y, z])\n                    sphere(r=r, $fn=fn);\n        }\n    }\n}\n\nwedge_rounded();",
    "renders": true
  },
  {
    "basic_shape": "bevel",
    "openscad_code": "$fn=32;\n\nbevel_h = 20;\nbevel_w = 80;\nbevel_l = 80;\nedge_r = 5;\n\ndifference() {\n    // main block\n    cube([bevel_l, bevel_w, bevel_h]);\n\n    // top bevel cut\n    translate([0, 0, bevel_h])\n    rotate([45, 0, 0])\n    cube([bevel_l*2, bevel_w*2, bevel_h*2], center=true);\n\n    // rounded bottom edges\n    translate([edge_r, edge_r, -0.1])\n    cylinder(h=edge_r+0.2, r=edge_r);\n    translate([bevel_l-edge_r, edge_r, -0.1])\n    cylinder(h=edge_r+0.2, r=edge_r);\n    translate([edge_r, bevel_w-edge_r, -0.1])\n    cylinder(h=edge_r+0.2, r=edge_r);\n    translate([bevel_l-edge_r, bevel_w-edge_r, -0.1])\n    cylinder(h=edge_r+0.2, r=edge_r);\n}",
    "renders": true
  },
  {
    "basic_shape": "bevel_small",
    "openscad_code": "// bevel_small - medium complexity\n// 70mm base cube with 5mm chamfers on top edges\n\nbase_size = 70;\nchamfer = 5;\n\ndifference() {\n    // main cube\n    cube([base_size, base_size, base_size], center=true);\n    \n    // chamfer cuts on top\n    translate([0, 0, base_size/2 - chamfer/2])\n        cube([base_size + 2, base_size + 2, chamfer], center=true);\n    \n    // diagonal chamfer cuts\n    rotate([45, 0, 0])\n        translate([0, 0, base_size/2 - chamfer/2])\n            cube([base_size + 2, base_size + 2, chamfer*1.414], center=true);\n    \n    rotate([0, 45, 0])\n        translate([0, 0, base_size/2 - chamfer/2])\n            cube([base_size + 2, base_size + 2, chamfer*1.414], center=true);\n}",
    "renders": true
  },
  {
    "basic_shape": "bevel_large",
    "openscad_code": "// bevel_large - 100mm base cube with 5mm bevel on all edges\nmodule bevel_large() {\n    difference() {\n        // main cube\n        cube([100, 100, 100], center=true);\n        \n        // remove corner spheres to create bevels\n        for(x = [-1, 1])\n        for(y = [-1, 1])\n        for(z = [-1, 1]) {\n            translate([x*47.5, y*47.5, z*47.5])\n                sphere(r=7);\n        }\n        \n        // remove edge cylinders\n        for(a = [-1, 1])\n        for(b = [-1, 1]) {\n            // x-edge cylinders\n            translate([0, a*47.5, b*47.5])\n                rotate([0, 90, 0])\n                    cylinder(h=100, r=7, center=true);\n            \n            // y-edge cylinders\n            translate([a*47.5, 0, b*47.5])\n                rotate([90, 0, 0])\n                    cylinder(h=100, r=7, center=true);\n            \n            // z-edge cylinders\n            translate([a*47.5, b*47.5, 0])\n                cylinder(h=100, r=7, center=true);\n        }\n    }\n}\n\nbevel_large();",
    "renders": true
  },
  {
    "basic_shape": "bevel_thin",
    "openscad_code": "difference() {\n    // Main beveled thin plate\n    cube([100, 100, 5], center=true);\n    \n    // Rounded top edges\n    translate([0, 0, 2.5])\n    minkowski() {\n        cube([96, 96, 1], center=true);\n        sphere(r=2);\n    }\n    \n    // Rounded bottom edges\n    translate([0, 0, -2.5])\n    minkowski() {\n        cube([96, 96, 1], center=true);\n        sphere(r=2);\n    }\n    \n    // Remove sharp corners\n    for (x = [-47, 47])\n    for (y = [-47, 47])\n    translate([x, y, 0])\n    cylinder(r=3, h=6, center=true);\n}",
    "renders": true
  },
  {
    "basic_shape": "bevel_thick",
    "openscad_code": "// Medium-complexity beveled thick plate\n// 100 x 70 x 20 mm with 5 mm rounded top edges and 2 mm bottom chamfer\n\nbevel = 5;\nchamfer = 2;\nw = 100;\nd = 70;\nh = 20;\n\ndifference() {\n    // Main block\n    cube([w, d, h], center = true);\n\n    // Top edge round\n    translate([0, 0, h/2 - bevel])\n        minkowski() {\n            cube([w - 2*bevel, d - 2*bevel, 0.1], center = true);\n            sphere(r = bevel);\n        }\n\n    // Bottom chamfer\n    translate([0, 0, -h/2 + chamfer])\n        cylinder(h = h, r1 = w/2, r2 = w/2 - chamfer, center = true);\n    translate([0, 0, -h/2 + chamfer])\n        cylinder(h = h, r1 = d/2, r2 = d/2 - chamfer, center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "block",
    "openscad_code": "// Rounded-edge rectangular block with centered cylindrical hole\nblock_x = 100;\nblock_y = 60;\nblock_z = 40;\nradius = 8;\nhole_r = 15;\n\ndifference() {\n    // Main block with rounded vertical edges\n    minkowski() {\n        cube([block_x - 2*radius, block_y - 2*radius, block_z - 2*radius], center = true);\n        cylinder(h = 0.01, r = radius, $fn = 20);\n    }\n    \n    // Through-hole along X axis\n    rotate([0, 90, 0])\n        cylinder(h = block_x + 2, r = hole_r, center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "block_square",
    "openscad_code": "// block_square with rounded edges\n// Medium complexity - simple geometric form with edge rounding\n\n// Parameters\nblock_size = 80;\nedge_radius = 5;\n\n// Main block body minus edge areas\ndifference() {\n    cube([block_size, block_size, block_size], center=true);\n    \n    // Remove corners to prepare for edge rounding\n    for(x = [-1, 1])\n    for(y = [-1, 1])\n    for(z = [-1, 1])\n    translate([x*(block_size/2 - edge_radius), \n               y*(block_size/2 - edge_radius), \n               z*(block_size/2 - edge_radius)])\n    cube([edge_radius*2, edge_radius*2, edge_radius*2], center=true);\n}\n\n// Add rounded edges\nunion() {\n    // Main cube body\n    cube([block_size-edge_radius*2, block_size-edge_radius*2, block_size-edge_radius*2], center=true);\n    \n    // Edge cylinders for rounding\n    for(i = [-1, 1])\n    for(j = [-1, 1]) {\n        // Vertical edges\n        translate([i*(block_size/2-edge_radius), j*(block_size/2-edge_radius), 0])\n        cylinder(r=edge_radius, h=block_size-edge_radius*2, center=true, $fn=16);\n        \n        // Horizontal edges X\n        rotate([0, 90, 0])\n        translate([i*(block_size/2-edge_radius), 0, j*(block_size/2-edge_radius)])\n        cylinder(r=edge_radius, h=block_size-edge_radius*2, center=true, $fn=16);\n        \n        // Horizontal edges Y\n        rotate([90, 0, 0])\n        translate([0, i*(block_size/2-edge_radius), j*(block_size/2-edge_radius)])\n        cylinder(r=edge_radius, h=block_size-edge_radius*2, center=true, $fn=16);\n    }\n    \n    // Corner spheres\n    for(x = [-1, 1])\n    for(y = [-1, 1])\n    for(z = [-1, 1])\n    translate([x*(block_size/2-edge_radius), \n               y*(block_size/2-edge_radius), \n               z*(block_size/2-edge_radius)])\n    sphere(r=edge_radius, $fn=16);\n}",
    "renders": true
  },
  {
    "basic_shape": "block_rectangular",
    "openscad_code": "// Medium-complexity rectangular block with rounded edges and through-holes\nmodule block_rectangular() {\n    // Main block body\n    difference() {\n        // Rounded-edge cuboid (fillet radius 5 mm)\n        minkowski() {\n            cube([90, 60, 30], center = true);\n            sphere(r = 5);\n        }\n        \n        // Two vertical holes Ã10 mm\n        translate([0, 0, -20])\n            cylinder(h = 40, r = 5, center = true);\n        translate([30, 0, -20])\n            cylinder(h = 40, r = 5, center = true);\n        \n        // One horizontal hole Ã12 mm\n        rotate([0, 90, 0])\n            translate([0, 0, -20])\n                cylinder(h = 100, r = 6, center = true);\n    }\n}\n\nblock_rectangular();",
    "renders": true
  },
  {
    "basic_shape": "block_rounded",
    "openscad_code": "// Rounded rectangular block 80 x 50 x 30 mm\n$fn = 32;\n\nr = 5; // corner radius\nx = 80;\ny = 50;\nz = 30;\n\ndifference() {\n    // main body\n    hull() {\n        translate([ r,  r, 0]) cylinder(h = z, r = r);\n        translate([x-r,  r, 0]) cylinder(h = z, r = r);\n        translate([x-r, y-r, 0]) cylinder(h = z, r = r);\n        translate([ r, y-r, 0]) cylinder(h = z, r = r);\n    }\n    \n    // optional lightening hole\n    translate([x/2, y/2, z/2]) cube([x-2*r-10, y-2*r-10, z+1], center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "block_chamfered",
    "openscad_code": "// Chamfered block with 5 mm chamfers on all vertical edges\n// Dimensions: 80 x 60 x 40 mm\n\nchamfer = 5;\n\ndifference() {\n    // Main block\n    cube([80, 60, 40]);\n\n    // Chamfer cuts on vertical edges\n    // Edge 1 (front-left)\n    translate([chamfer, chamfer, 0])\n        rotate([0, 0, 45])\n            cube([chamfer*2, chamfer*2, 40]);\n    \n    // Edge 2 (front-right)\n    translate([80-chamfer, chamfer, 0])\n        rotate([0, 0, -45])\n            cube([chamfer*2, chamfer*2, 40]);\n    \n    // Edge 3 (back-left)\n    translate([chamfer, 60-chamfer, 0])\n        rotate([0, 0, 135])\n            cube([chamfer*2, chamfer*2, 40]);\n    \n    // Edge 4 (back-right)\n    translate([80-chamfer, 60-chamfer, 0])\n        rotate([0, 0, -135])\n            cube([chamfer*2, chamfer*2, 40]);\n}",
    "renders": true
  },
  {
    "basic_shape": "block_hollow",
    "openscad_code": "// Hollow block with rounded edges\n$fn = 32;\n\n// Outer dimensions\now = 80;\noh = 60;\nod = 40;\ncorner_r = 6;\n\n// Wall thickness\nwall = 4;\n\n// Outer rounded block\ndifference() {\n    minkowski() {\n        cube([ow - 2*corner_r, oh - 2*corner_r, od - 2*corner_r], center = true);\n        sphere(corner_r);\n    }\n\n    // Inner hollow cavity\n    minkowski() {\n        cube([ow - 2*corner_r - 2*wall, oh - 2*corner_r - 2*wall, od - 2*corner_r - 2*wall], center = true);\n        sphere(corner_r);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "block_thick",
    "openscad_code": "// block_thick - medium complexity rounded edge block\nmodule rounded_block(size = [80, 60, 40], r = 6) {\n    hull() {\n        translate([r, r, r]) sphere(r);\n        translate([size.x - r, r, r]) sphere(r);\n        translate([r, size.y - r, r]) sphere(r);\n        translate([size.x - r, size.y - r, r]) sphere(r);\n        translate([r, r, size.z - r]) sphere(r);\n        translate([size.x - r, r, size.z - r]) sphere(r);\n        translate([r, size.y - r, size.z - r]) sphere(r);\n        translate([size.x - r, size.y - r, size.z - r]) sphere(r);\n    }\n}\n\nrounded_block();",
    "renders": true
  },
  {
    "basic_shape": "block_thin",
    "openscad_code": "// Thin rectangular block with rounded edges\nmodule block_thin() {\n    // Main thin block\n    difference() {\n        // Rounded base block\n        minkowski() {\n            cube([80, 40, 8], center=true);\n            sphere(r=2);\n        }\n        \n        // Cut bottom to flatten\n        translate([0, 0, -6])\n            cube([200, 200, 10], center=true);\n    }\n}\n\nblock_thin();",
    "renders": true
  },
  {
    "basic_shape": "tube",
    "openscad_code": "// Medium-complexity tube: hollow cylinder with rounded ends\n$fn = 32;\n\n// Tube dimensions\nouter_r = 25;\ninner_r = 20;\nlen = 100;\nedge_r = 5;\n\n// Main tube body\ndifference() {\n    // Outer shape\n    hull() {\n        translate([0, 0, edge_r])\n            cylinder(h = len - 2*edge_r, r = outer_r);\n        \n        translate([0, 0, edge_r])\n            sphere(r = outer_r);\n            \n        translate([0, 0, len - edge_r])\n            sphere(r = outer_r);\n    }\n    \n    // Inner hollow\n    hull() {\n        translate([0, 0, edge_r])\n            cylinder(h = len - 2*edge_r, r = inner_r);\n            \n        translate([0, 0, edge_r])\n            sphere(r = inner_r);\n            \n        translate([0, 0, len - edge_r])\n            sphere(r = inner_r);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "tube_straight",
    "openscad_code": "// Basic straight tube with rounded ends\n$fn = 32;  // Smooth curves\n\nouter_r = 25;\ninner_r = 20;\nlength = 60;\n\n// Outer cylinder\ncylinder(h=length, r=outer_r);\n\n// Rounded ends - two hemispheres\ntranslate([0, 0, 0])\n    sphere(r=outer_r);\n\ntranslate([0, 0, length])\n    sphere(r=outer_r);\n\n// Remove inner hole\ndifference() {\n    cylinder(h=length, r=outer_r);\n    \n    translate([0, 0, -1])\n        cylinder(h=length+2, r=inner_r);\n}\n\n// Remove inner sphere halves\ntranslate([0, 0, 0])\n    sphere(r=inner_r);\n\ntranslate([0, 0, length])\n    sphere(r=inner_r);",
    "renders": true
  },
  {
    "basic_shape": "tube_thin_wall",
    "openscad_code": "// thin-wall tube with rounded edges\n$fn = 36;\n\nouter_r = 25;\ninner_r = 22;\nh = 80;\nedge_r = 3;\n\ndifference() {\n    // outer shell\n    cylinder(h = h, r = outer_r);\n    \n    // hollow center\n    cylinder(h = h + 0.2, r = inner_r);\n    \n    // top rounded edge\n    translate([0, 0, h - edge_r])\n        sphere(r = edge_r);\n    \n    // bottom rounded edge\n    translate([0, 0, -edge_r])\n        sphere(r = edge_r);\n}\n\n// cut top and bottom hemispheres\ntranslate([0, 0, h - edge_r])\n    cube([outer_r * 2, outer_r * 2, edge_r], center = true);\n\ntranslate([0, 0, -edge_r])\n    cube([outer_r * 2, outer_r * 2, edge_r], center = true);",
    "renders": true
  },
  {
    "basic_shape": "tube_thick_wall",
    "openscad_code": "// tube_thick_wall.scad\n// Basic thick-walled tube with rounded ends\n\n$fn = 50;\n\n// Parameters\nouter_d = 100;      // outer diameter\ninner_d = 60;       // inner diameter\nheight = 80;        // total height\nedge_r = 5;         // edge radius\n\n// Main tube body\ndifference() {\n    // Outer cylinder with rounded top/bottom\n    union() {\n        cylinder(h=height-2*edge_r, d=outer_d);\n        translate([0,0,edge_r]) cylinder(h=height-2*edge_r, d=outer_d);\n        translate([0,0,0]) sphere(r=outer_d/2);\n        translate([0,0,height]) sphere(r=outer_d/2);\n    }\n    \n    // Inner hollow with rounded edges\n    union() {\n        translate([0,0,-1]) cylinder(h=height+2, d=inner_d);\n        translate([0,0,edge_r]) cylinder(h=height-2*edge_r, d=inner_d);\n        translate([0,0,-edge_r]) sphere(r=inner_d/2);\n        translate([0,0,height+edge_r]) sphere(r=inner_d/2);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "tube_long",
    "openscad_code": "$fn = 32;\n\n// Tube_long: 100 mm long, 25 mm outer radius, 20 mm inner radius, rounded ends\ndifference() {\n    // Outer rounded-end tube\n    hull() {\n        translate([0, 0, 5]) sphere(r = 25);\n        translate([0, 0, 95]) sphere(r = 25);\n    }\n    \n    // Inner hollow\n    hull() {\n        translate([0, 0, 5]) sphere(r = 20);\n        translate([0, 0, 95]) sphere(r = 20);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "tube_short",
    "openscad_code": "$fn = 32;\nouter_r = 30;\ninner_r = 24;\nheight = 60;\nrad = 4;\n\ndifference() {\n    cylinder(h=height, r=outer_r);\n    cylinder(h=height+1, r=inner_r);\n}\n\ntranslate([0, 0, height])\ndifference() {\n    cylinder(h=rad, r=outer_r+rad);\n    cylinder(h=rad+1, r=inner_r);\n}\n\ntranslate([0, 0, -rad])\ndifference() {\n    cylinder(h=rad, r=outer_r+rad);\n    cylinder(h=rad+1, r=inner_r);\n}",
    "renders": true
  },
  {
    "basic_shape": "tube_wide",
    "openscad_code": "// tube_wide - medium complexity\n// Wide tube with rounded edges and slight flare at top\n$fn = 48;\n\n// Main tube body with rounded edges\ndifference() {\n    cylinder(h = 80, r1 = 40, r2 = 38);\n    cylinder(h = 80, r1 = 35, r2 = 33);\n}\n\n// Top rounded edge\ntranslate([0, 0, 80])\ndifference() {\n    cylinder(h = 5, r1 = 40, r2 = 42);\n    cylinder(h = 5, r1 = 35, r2 = 37);\n}\n\n// Bottom rounded edge\ntranslate([0, 0, -5])\ndifference() {\n    cylinder(h = 5, r1 = 38, r2 = 40);\n    cylinder(h = 5, r1 = 33, r2 = 35);\n}",
    "renders": true
  },
  {
    "basic_shape": "tube_narrow",
    "openscad_code": "// Medium-complexity narrow tube with rounded edges\n$fn = 32;\n\ndifference() {\n    // Main tube body\n    cylinder(h = 100, r = 20);\n    \n    // Hollow center\n    cylinder(h = 105, r = 15);\n}\n\n// Top rounded edge\ntranslate([0, 0, 100])\ndifference() {\n    cylinder(h = 5, r = 20);\n    cylinder(h = 6, r = 15);\n}\n\n// Bottom rounded edge\ndifference() {\n    cylinder(h = 5, r = 20);\n    cylinder(h = 6, r = 15);\n}",
    "renders": true
  },
  {
    "basic_shape": "tube_curved",
    "openscad_code": "$fn = 32;\n\n// Parameters\nouter_r = 25;   // outer radius\nwall  = 3;      // wall thickness\nbend_r = 60;    // bend radius\nangle = 90;     // bend angle degrees\nstraight = 20;  // straight end length\n\n// Helper module for curved segment\nmodule curved_segment(radius, thickness, angle) {\n    rotate_extrude(angle = angle)\n        translate([radius, 0, 0])\n            circle(r = thickness);\n}\n\n// Build the curved tube\ndifference() {\n    union() {\n        // Outer curved tube\n        curved_segment(bend_r, outer_r, angle);\n        \n        // Straight ends\n        translate([bend_r, 0, 0])\n            rotate([0, 0, -90])\n                cylinder(h = straight, r = outer_r);\n                \n        translate([0, bend_r, 0])\n            cylinder(h = straight, r = outer_r);\n    }\n    \n    // Inner hollow\n    curved_segment(bend_r, outer_r - wall, angle);\n    \n    translate([bend_r, 0, 0])\n        rotate([0, 0, -90])\n            cylinder(h = straight + 1, r = outer_r - wall);\n            \n    translate([0, bend_r, 0])\n        cylinder(h = straight + 1, r = outer_r - wall);\n}",
    "renders": true
  },
  {
    "basic_shape": "tube_bent",
    "openscad_code": "// tube_bent: two cylinders + torus segment, rounded ends\n$fn=32;\n\n// parameters\nr = 15;               // tube radius\nl = 40;               // straight part length\nbend_r = 40;          // bend centerline radius\nbend_h = 90;          // total height\n\n// straight vertical segment\ntranslate([0,0,0])\n    cylinder(h=l, r=r, center=true);\n\n// torus quarter for 90Â° bend\ntranslate([0,0,l])\n    rotate_extrude(angle=90)\n        translate([bend_r,0,0])\n            circle(r);\n\n// straight horizontal segment\ntranslate([bend_r+l,0,l])\n    rotate([0,-90,0])\n        cylinder(h=l, r=r, center=true);\n\n// rounded end caps\ntranslate([0,0,-l/2])\n    sphere(r);\ntranslate([bend_r+l,0,l])\n    sphere(r);",
    "renders": true
  },
  {
    "basic_shape": "tube_flanged",
    "openscad_code": "// Tube with flanges and rounded edges\nmodule tube_flanged(od=50, id=40, h=60, flange_od=70, flange_t=5, edge_r=2) {\n    difference() {\n        // Main tube body with rounded ends\n        union() {\n            cylinder(h=h, r=od/2, $fn=64);\n            translate([0, 0, 0])\n                cylinder(h=flange_t, r=flange_od/2, $fn=64);\n            translate([0, 0, h-flange_t])\n                cylinder(h=flange_t, r=flange_od/2, $fn=64);\n        }\n        \n        // Central bore\n        cylinder(h=h+flange_t*2, r=id/2, center=true, $fn=64);\n        \n        // Rounded edges on flanges\n        translate([0, 0, flange_t-edge_r])\n            rotate_extrude($fn=64)\n                translate([flange_od/2-edge_r, 0, 0])\n                    circle(r=edge_r);\n        translate([0, 0, h-flange_t+edge_r])\n            rotate_extrude($fn=64)\n                translate([flange_od/2-edge_r, 0, 0])\n                    circle(r=edge_r);\n    }\n}\n\ntube_flanged();",
    "renders": true
  },
  {
    "basic_shape": "tube_threaded",
    "openscad_code": "// tube_threaded.scad\n// Medium-complexity threaded tube (hex head, inner thread, rounded top)\n\n$fn = 60;\n\n// overall dimensions\nod = 25;      // outer diameter\nwall = 3;     // wall thickness\nh = 60;       // total height\n\n// hex head\nhead_h = 10;\nhead_d = od*1.4;\n\n// rounded top\nround_r = od/2;\n\ndifference() {\n    // body with rounded top\n    union() {\n        cylinder(h=h-head_h, r=od/2, center=false);\n        translate([0,0,h-head_h])\n            hull() {\n                sphere(r=round_r);\n                translate([0,0,round_r]) sphere(r=round_r);\n            }\n    }\n\n    // bore\n    cylinder(h=h+1, r=od/2-wall, center=false);\n\n    // inner thread\n    for(i=[0:5:h-5]) {\n        rotate_extrude()\n            translate([od/2-wall+0.5,0,0])\n                square([1, 2]);\n    }\n}\n\n// hex head\ndifference() {\n    cylinder(h=head_h, r=head_d/2, center=false);\n    cylinder(h=head_h+1, r=od/2, center=false);\n}\ntranslate([0,0,h-head_h])\n    cylinder(h=head_h+1, r=od/2, center=false);",
    "renders": true
  },
  {
    "basic_shape": "oval",
    "openscad_code": "// Oval with rounded edges (medium complexity)\n$fn = 64;\n\n// Basic oval shape using scale on cylinder\nscale([1.3, 1, 1])\n    cylinder(h = 40, r = 40);\n\n// Rounded top edge\ndifference() {\n    translate([0, 0, 39.9])\n        scale([1.3, 1, 1])\n            cylinder(h = 2, r = 40);\n    translate([0, 0, 39.9])\n        scale([1.3, 1, 1])\n            cylinder(h = 3, r = 38);\n}\n\n// Rounded bottom edge\ndifference() {\n    translate([0, 0, 0.1])\n        scale([1.3, 1, 1])\n            cylinder(h = 2, r = 40);\n    translate([0, 0, 0.1])\n        scale([1.3, 1, 1])\n            cylinder(h = 3, r = 38);\n}",
    "renders": true
  },
  {
    "basic_shape": "oval_long",
    "openscad_code": "// Oval long with rounded edges\nlength = 100;\nwidth  = 40;\nheight = 25;\nedge_r = 8;\n\n// Main oval body\ndifference() {\n    // Outer rounded block\n    minkowski() {\n        scale([1, width/length, 1])\n            cylinder(h=height-2*edge_r, r=length/2-edge_r, $fn=64);\n        sphere(r=edge_r, $fn=32);\n    }\n\n    // Hollow center for oval profile\n    translate([0,0,-edge_r])\n        scale([1, width/length-0.1, 1])\n            cylinder(h=height+2*edge_r, r=length/2-edge_r-2, $fn=64);\n}\n\n// End caps for clean finish\ntranslate([0, 0, height/2-edge_r])\n    scale([1, width/length, 1])\n        sphere(r=edge_r, $fn=32);\nmirror([0,0,1])\n    translate([0, 0, height/2-edge_r])\n        scale([1, width/length, 1])\n            sphere(r=edge_r, $fn=32);",
    "renders": true
  },
  {
    "basic_shape": "oval_wide",
    "openscad_code": "// Oval wide - elongated ellipsoid with rounded edges\nmodule oval_wide() {\n    // Main ellipsoid body\n    scale([1.5, 1, 0.7]) sphere(r=40, $fn=60);\n    \n    // Add rounded edge rings for medium complexity\n    translate([0, 0, 28]) \n        scale([1.5, 1, 0.2]) \n            sphere(r=40, $fn=60);\n    \n    translate([0, 0, -28]) \n        scale([1.5, 1, 0.2]) \n            sphere(r=40, $fn=60);\n    \n    // Smooth transition rings\n    difference() {\n        scale([1.5, 1, 0.7]) sphere(r=42, $fn=60);\n        scale([1.5, 1, 0.7]) sphere(r=40, $fn=60);\n    }\n}\n\noval_wide();",
    "renders": true
  },
  {
    "basic_shape": "oval_thick",
    "openscad_code": "// oval_thick - rounded edged oval plate\n$fn = 32;\n\nlength = 80;\nwidth  = 50;\nthick  = 12;\nedge_r = thick / 2;\n\n// main slab\ndifference() {\n    rounded_slab();\n    // hollow out center slightly for weight\n    translate([0, 0, -1])\n        cylinder(h = thick + 2, r1 = width/2 - 6, r2 = width/2 - 6);\n}\n\nmodule rounded_slab() {\n    // top & bottom rounded caps\n    translate([0, 0, thick/2])\n        scale([length/width, 1, 1])\n            cylinder(h = 0.01, r = width/2, center = true);\n    translate([0, 0, -thick/2])\n        scale([length/width, 1, 1])\n            cylinder(h = 0.01, r = width/2, center = true);\n\n    // central block\n    hull() {\n        translate([ length/2 - edge_r, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = length - 2*edge_r, r = edge_r, center = true);\n        translate([-length/2 + edge_r, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = length - 2*edge_r, r = edge_r, center = true);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "oval_thin",
    "openscad_code": "// Oval thin with rounded edges\n// Overall size 100x60x5 mm\n\nmodule oval_thin() {\n    // Main flat oval\n    linear_extrude(height=5)\n    difference() {\n        // Outer ellipse\n        scale([1, 0.6, 1])\n            circle(d=100);\n        \n        // Inner ellipse for thin wall\n        scale([0.9, 0.5, 1])\n            circle(d=100);\n    }\n    \n    // Rounded top edge\n    translate([0, 0, 2.5])\n        linear_extrude(height=2.5, convexity=10)\n        difference() {\n            scale([1, 0.6, 1])\n                circle(d=100);\n            scale([0.9, 0.5, 1])\n                circle(d=100);\n        }\n}\n\noval_thin();",
    "renders": true
  },
  {
    "basic_shape": "oval_hollow",
    "openscad_code": "// Oval hollow with rounded edges\nmodule oval_hollow(l=100, w=60, h=40, wall=4, r=8) {\n    difference() {\n        // Outer rounded box\n        minkowski() {\n            cube([l-2*r, w-2*r, h-2*r], center=true);\n            sphere(r);\n        }\n        \n        // Inner hollow\n        minkowski() {\n            cube([l-2*r-2*wall, w-2*r-2*wall, h-2*r-2*wall], center=true);\n            sphere(r);\n        }\n    }\n}\n\noval_hollow();",
    "renders": true
  },
  {
    "basic_shape": "oval_rounded",
    "openscad_code": "// oval_rounded: 90 x 60 mm footprint, 25 mm thick, all edges rounded\n// main slab\ndifference() {\n    minkowski() {\n        cube([90, 60, 15], center = true);\n        sphere(r = 5);\n    }\n    // flatten top and bottom\n    translate([0, 0, 12.5])\n        cube([200, 200, 25], center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "ellipse",
    "openscad_code": "// Ellipsoid with rounded top and bottom edges\n$fa = 1;\n$fs = 0.4;\n\n// Main shape\nscale([1, 0.7, 0.5]) sphere(d=100);\n\n// Flattened top edge\ndifference() {\n    scale([1, 0.7, 0.5]) sphere(d=100);\n    translate([0, 0, 49.5]) cube([200, 200, 1], center=true);\n}\n\n// Flattened bottom edge\ndifference() {\n    scale([1, 0.7, 0.5]) sphere(d=100);\n    translate([0, 0, -49.5]) cube([200, 200, 1], center=true);\n}\n\n// Smooth the edges\nintersection() {\n    scale([1, 0.7, 0.5]) sphere(d=100);\n    translate([0, 0, 0]) cylinder(h=100, d1=100, d2=100, center=true);\n}",
    "renders": true
  },
  {
    "basic_shape": "ellipse_long",
    "openscad_code": "// Elliptical cylinder with rounded ends\n// Main body - elliptical prism\nlinear_extrude(height=80)\n    scale([1.5, 1, 1])\n        circle(d=60, $fn=64);\n\n// Rounded top cap\ntranslate([0, 0, 80])\n    scale([1.5, 1, 1])\n        sphere(d=60, $fn=64);\n\n// Rounded bottom cap\ntranslate([0, 0, 0])\n    scale([1.5, 1, 1])\n        sphere(d=60, $fn=64);",
    "renders": true
  },
  {
    "basic_shape": "ellipse_wide",
    "openscad_code": "// Ellipse wide - rounded edge plate\n$fn = 32;\n\n// Main elliptical plate\nscale([1.5, 1, 1])\n    cylinder(h = 10, r = 40, center = true);\n\n// Rounded top edge\ntranslate([0, 0, 5])\n    scale([1.5, 1, 0.5])\n        cylinder(h = 2, r = 40, center = true);\n\n// Rounded bottom edge\ntranslate([0, 0, -5])\n    scale([1.5, 1, 0.5])\n        cylinder(h = 2, r = 40, center = true);",
    "renders": true
  },
  {
    "basic_shape": "ellipse_thick",
    "openscad_code": "// Elliptical prism with rounded top\nellipse_major = 80;\nellipse_minor = 50;\nheight = 30;\nround = 5;\n\nmodule ellipse_thick(r_major, r_minor, h, round_r) {\n    difference() {\n        // Main elliptical body\n        linear_extrude(height = h + round_r)\n            scale([r_major, r_minor, 1])\n                circle(r = 1, $fn = 64);\n\n        // Top rounding subtraction\n        translate([0, 0, h])\n            scale([r_major, r_minor, 1])\n                sphere(r = round_r, $fn = 64);\n    }\n\n    // Rounded top\n    translate([0, 0, h - round_r])\n        scale([r_major, r_minor, 1])\n            sphere(r = round_r, $fn = 64);\n}\n\nellipse_thick(ellipse_major/2, ellipse_minor/2, height, round);",
    "renders": true
  },
  {
    "basic_shape": "ellipse_thin",
    "openscad_code": "// Medium-complexity ellipse_thin: thin elliptical plate with rounded edges\n// Overall 90 Ã 60 Ã 5 mm, 2 mm edge rounding\n\n// Parameters\na = 45;   // half-length\nb = 30;   // half-width\nt = 5;    // thickness\nr = 2;    // edge radius\n\n// Elliptical plate with rounded edges\ndifference() {\n    // Main plate (elliptical prism)\n    linear_extrude(height = t)\n        scale([a, b, 1])\n            circle(r = 1, $fn = 64);\n\n    // Rounded top edge\n    translate([0, 0, t - r])\n        linear_extrude(height = r + 0.01)\n            scale([a - r, b - r, 1])\n                circle(r = 1, $fn = 64);\n\n    // Rounded bottom edge\n    translate([0, 0, -0.01])\n        linear_extrude(height = r + 0.01)\n            scale([a - r, b - r, 1])\n                circle(r = 1, $fn = 64);\n}",
    "renders": true
  },
  {
    "basic_shape": "ellipse_hollow",
    "openscad_code": "// Hollow ellipse (elliptical tube) with rounded ends\n// Outer ellipse tube\nrotate_extrude(angle = 360, $fn = 64)\n    translate([40, 0, 0])\n        circle(d = 30);\n\n// Inner ellipse tube (hollow part)\nrotate_extrude(angle = 360, $fn = 64)\n    translate([40, 0, 0])\n        circle(d = 20);\n\n// Rounded end caps\ndifference() {\n    translate([0, 0, -15])\n        cylinder(h = 30, r1 = 15, r2 = 15, $fn = 64);\n    translate([0, 0, -20])\n        cylinder(h = 40, r1 = 10, r2 = 10, $fn = 64);\n}\n\ndifference() {\n    translate([80, 0, -15])\n        cylinder(h = 30, r1 = 15, r2 = 15, $fn = 64);\n    translate([80, 0, -20])\n        cylinder(h = 40, r1 = 10, r2 = 10, $fn = 64);\n}",
    "renders": true
  },
  {
    "basic_shape": "ellipse_cut",
    "openscad_code": "// Ellipse cut: 2D ellipse extruded with a central slot removed\n// Overall size: 100 x 60 x 20 mm\n\n// Base ellipse slab\nlinear_extrude(height = 20)\n    scale([1, 0.6])  // Stretch circle into ellipse\n        circle(d = 100, $fn = 60);\n\n// Central rectangular slot\ntranslate([0, 0, -1])\n    cube([80, 8, 22], center = true);\n\n// Rounding top edges with offset\ntranslate([0, 0, 20])\n    linear_extrude(height = 2)\n        offset(r = -2)\n            scale([1, 0.6])\n                circle(d = 100, $fn = 60);",
    "renders": true
  },
  {
    "basic_shape": "brick",
    "openscad_code": "// Rounded-edge brick with simple studs on top\nbrick_w = 80;\nbrick_h = 40;\nbrick_d = 40;\nfillet_r = 4;\nstud_r = 6;\nstud_h = 3;\n\ndifference() {\n    // Main brick body with rounded edges via minkowski\n    minkowski() {\n        cube([brick_w - 2*fillet_r, brick_h - 2*fillet_r, brick_d - 2*fillet_r], center=true);\n        sphere(fillet_r);\n    }\n    \n    // Hollow inside to reduce material\n    translate([0, 0, -brick_d/2 + 5])\n        cube([brick_w - 10, brick_h - 10, brick_d - 5], center=true);\n}\n\n// Two studs on top surface\ntranslate([brick_w/4, 0, brick_d/2 + stud_h/2])\n    cylinder(h=stud_h, r=stud_r, center=true);\n\ntranslate([-brick_w/4, 0, brick_d/2 + stud_h/2])\n    cylinder(h=stud_h, r=stud_r, center=true);",
    "renders": true
  },
  {
    "basic_shape": "brick_standard",
    "openscad_code": "// Standard brick with rounded edges\nbrick_w = 100;\nbrick_h = 50;\nbrick_d = 50;\nedge_r = 5;\n\n// Main body\ndifference() {\n    minkowski() {\n        cube([brick_w - 2*edge_r, brick_h - 2*edge_r, brick_d - 2*edge_r], center=true);\n        sphere(r=edge_r);\n    }\n    \n    // Remove rounded ends\n    translate([brick_w/2 - edge_r, 0, 0])\n        cube([edge_r*2, brick_h, brick_d], center=true);\n    translate([-brick_w/2 + edge_r, 0, 0])\n        cube([edge_r*2, brick_h, brick_d], center=true);\n}",
    "renders": true
  },
  {
    "basic_shape": "brick_wide",
    "openscad_code": "// brick_wide - medium complexity, rounded edges\nmodule brick_wide() {\n    width = 100;\n    height = 40;\n    depth = 50;\n    radius = 5;\n    \n    // main body with rounded edges\n    difference() {\n        hull() {\n            translate([radius, radius, 0])\n                cylinder(h=height, r=radius);\n            translate([width-radius, radius, 0])\n                cylinder(h=height, r=radius);\n            translate([width-radius, depth-radius, 0])\n                cylinder(h=height, r=radius);\n            translate([radius, depth-radius, 0])\n                cylinder(h=height, r=radius);\n        }\n        \n        // hollow interior for medium complexity\n        translate([2*radius, 2*radius, radius])\n            cube([width-4*radius, depth-4*radius, height-radius]);\n    }\n}\n\nbrick_wide();",
    "renders": true
  },
  {
    "basic_shape": "brick_tall",
    "openscad_code": "// brick_tall - medium complexity\n// 60mm x 30mm x 120mm tall brick with rounded vertical edges\n\nbrick_width = 60;\nbrick_thickness = 30;\nbrick_height = 120;\nedge_radius = 5;\n\ndifference() {\n    // Main brick body with rounded vertical edges\n    minkowski() {\n        cube([brick_width - 2*edge_radius, \n              brick_thickness - 2*edge_radius, \n              brick_height]);\n        cylinder(h=0.1, r=edge_radius, $fn=16);\n    }\n    \n    // Remove extra height added by minkowski\n    translate([0, 0, -edge_radius])\n        cube([brick_width + 2*edge_radius, \n              brick_thickness + 2*edge_radius, \n              brick_height + 2*edge_radius]);\n}",
    "renders": true
  },
  {
    "basic_shape": "brick_thin",
    "openscad_code": "// brick_thin - medium complexity\n// Rounded edges on top & bottom only, slim profile\n\n$fn = 32;          // smooth fillets\nw = 100;           // length\nd = 50;            // width\nh = 20;            // height\nr = 3;             // edge radius\n\ndifference() {\n    // overall brick block\n    cube([w, d, h], center = true);\n\n    // remove sharp edges on top & bottom\n    translate([0, 0, h/2 - r])\n        cube([w - 2*r, d - 2*r, r*2], center = true);\n\n    translate([0, 0, -(h/2 - r)])\n        cube([w - 2*r, d - 2*r, r*2], center = true);\n}\n\n// add rounded edges back\ntranslate([0, 0, h/2 - r])\n    minkowski() {\n        translate([0, 0, r])\n            cube([w - 2*r, d - 2*r, 0.01], center = true);\n        sphere(r);\n    }\n\ntranslate([0, 0, -(h/2 - r)])\n    minkowski() {\n        translate([0, 0, -r])\n            cube([w - 2*r, d - 2*r, 0.01], center = true);\n        sphere(r);\n    }",
    "renders": true
  },
  {
    "basic_shape": "brick_hollow",
    "openscad_code": "// Brick with hollow rectangular cavity and rounded edges\nlength = 100;\nwidth = 50;\nheight = 30;\nwall = 5;\nradius = 3;\n\ndifference() {\n    // Outer rounded brick\n    minkowski() {\n        cube([length-2*radius, width-2*radius, height-2*radius]);\n        sphere(r=radius);\n    }\n    \n    // Inner hollow cavity\n    minkowski() {\n        cube([length-2*wall-2*radius, width-2*wall-2*radius, height-wall-2*radius]);\n        sphere(r=radius);\n    }\n    \n    translate([0, 0, -wall]) \n        minkowski() {\n            cube([length-2*wall-2*radius, width-2*wall-2*radius, wall+2*radius]);\n            sphere(r=radius);\n        }\n}",
    "renders": true
  },
  {
    "basic_shape": "brick_with_holes",
    "openscad_code": "// Brick with rounded edges and 3Ã2 pattern of holes\nbrick_w = 100;\nbrick_h = 50;\nbrick_d = 45;\nradius  = 4;\n\n// Main brick body\ndifference() {\n    minkowski() {\n        cube([brick_w-2*radius, brick_h-2*radius, brick_d-2*radius], center=true);\n        sphere(r=radius);\n    }\n\n    // Holes along length (3 holes)\n    for (x = [-brick_w/3, 0, brick_w/3])\n        translate([x, 0, -brick_d/2-1])\n            cylinder(h=brick_d+2, r=7, $fn=20);\n\n    // Holes along height (2 rows)\n    for (y = [-brick_h/4, brick_h/4])\n        translate([0, y, -brick_d/2-1])\n            cylinder(h=brick_d+2, r=7, $fn=20);\n}",
    "renders": true
  },
  {
    "basic_shape": "brick_rounded",
    "openscad_code": "// Rounded brick primitive\n// Dimensions: 80 x 40 x 30 mm\n// Rounded edges with 4 mm radius\n\n$fn = 32;\n\nmodule brick_rounded() {\n    // Main body minus corner spheres\n    difference() {\n        union() {\n            // Central block\n            translate([4, 4, 4])\n                cube([72, 32, 22]);\n            \n            // Edge cylinders along X\n            for(x = [4, 76]) {\n                translate([x, 4, 4])\n                    rotate([0, 90, 0])\n                        cylinder(r=4, h=32);\n                translate([x, 36, 4])\n                    rotate([0, 90, 0])\n                        cylinder(r=4, h=32);\n            }\n            \n            // Edge cylinders along Y\n            for(y = [4, 36]) {\n                translate([4, y, 4])\n                    rotate([90, 0, 0])\n                        cylinder(r=4, h=72);\n                translate([76, y, 4])\n                    rotate([90, 0, 0])\n                        cylinder(r=4, h=72);\n            }\n            \n            // Vertical cylinders\n            for(x = [4, 76])\n                for(y = [4, 36])\n                    translate([x, y, 4])\n                        cylinder(r=4, h=22);\n        }\n        \n        // Remove corner spheres\n        for(x = [0, 80])\n            for(y = [0, 40])\n                for(z = [0, 30])\n                    translate([x, y, z])\n                        sphere(r=4);\n    }\n}\n\nbrick_rounded();",
    "renders": true
  },
  {
    "basic_shape": "cube_half",
    "openscad_code": "// Cube half with rounded edges\nsize = 80;\nradius = 6;\n$fn = 32;\n\ndifference() {\n    // Main rounded cube\n    minkowski() {\n        cube([size-2*radius, size-2*radius, (size/2)-radius], center=true);\n        sphere(r=radius);\n    }\n    \n    // Cut in half\n    translate([0, 0, -size/4-1])\n        cube([size*2, size*2, size/2+2], center=true);\n}",
    "renders": true
  },
  {
    "basic_shape": "cube_quarter",
    "openscad_code": "// cube_quarter - medium complexity - rounded edges and slight taper\n$fn = 32;\n\nsize = 100;\nround = 8;\ntaper = 2;\n\ndifference() {\n    // main quarter cube with rounded edges\n    intersection() {\n        // rounded cube\n        minkowski() {\n            cube([size - round*2, size - round*2, size - round*2], center = true);\n            sphere(r = round);\n        }\n        \n        // quarter space\n        translate([size/2, size/2, size/2])\n            cube([size, size, size], center = true);\n    }\n    \n    // slight taper on inner faces\n    translate([size/2 - taper, size/2 - taper, size/2 - taper])\n        cube([size + taper*2, size + taper*2, size + taper*2], center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "cube_eighth",
    "openscad_code": "// cube_eighth - medium complexity\n// one corner of a cube with rounded edges\n\nmodule cube_eighth(size = 100, radius = 8) {\n    offset = radius * (sqrt(2) - 1);\n    \n    difference() {\n        cube([size, size, size]);\n        \n        // remove the other 7/8ths\n        translate([0, 0, size])\n            cube([size, size, size]);\n        translate([0, size, 0])\n            cube([size, size, size]);\n        translate([size, 0, 0])\n            cube([size, size, size]);\n        \n        // round the three outer edges\n        translate([size - offset, size - offset, 0])\n            rotate([0, 0, 45])\n            cylinder(h = size + 2*radius, r = radius, center = true);\n        \n        translate([size - offset, 0, size - offset])\n            rotate([0, 45, 0])\n            cylinder(h = size + 2*radius, r = radius, center = true);\n        \n        translate([0, size - offset, size - offset])\n            rotate([45, 0, 0])\n            cylinder(h = size + 2*radius, r = radius, center = true);\n        \n        // round the corner\n        translate([size - offset, size - offset, size - offset])\n            sphere(r = radius);\n    }\n}\n\ncube_eighth();",
    "renders": true
  },
  {
    "basic_shape": "cylinder_half",
    "openscad_code": "// Half-cylinder primitive with rounded ends\n// Overall size: 100mm long, 50mm radius, 50mm thick\n\n$fn = 32;\n\ndifference() {\n    // Main half cylinder body\n    intersection() {\n        cylinder(h=100, r=50, center=true);\n        translate([0, -50, 0])\n            cube([100, 50, 100], center=true);\n    }\n    \n    // Hollow center\n    translate([0, 0, 0])\n        cylinder(h=102, r=45, center=true);\n}\n\n// Round the front edge\ntranslate([0, 0, 50])\n    rotate([90, 0, 0])\n        cylinder(h=50, r1=50, r2=5);\n\n// Round the back edge\ntranslate([0, 0, -50])\n    rotate([90, 0, 0])\n        cylinder(h=50, r1=5, r2=50);",
    "renders": true
  },
  {
    "basic_shape": "cylinder_quarter",
    "openscad_code": "// Quarter cylinder with rounded edges\n// Dimensions: 100mm height, 50mm radius\n\n$fn = 32;\n\nh = 100;\nr = 50;\nedge_r = 5;\n\ndifference() {\n    // Main quarter cylinder\n    intersection() {\n        cylinder(h=h, r=r, center=false);\n        translate([0, 0, 0]) cube([r, r, h], center=false);\n    }\n    \n    // Round the vertical edge\n    translate([r - edge_r, r - edge_r, -1])\n        cylinder(h=h + 2, r=edge_r, center=false);\n    \n    // Round the bottom edges\n    translate([r - edge_r, r - edge_r, edge_r])\n        rotate([90, 0, 0])\n            cylinder(h=r - edge_r, r=edge_r, center=false);\n    \n    translate([r - edge_r, r - edge_r, h - edge_r])\n        rotate([90, 0, 0])\n            cylinder(h=r - edge_r, r=edge_r, center=false);\n}",
    "renders": true
  },
  {
    "basic_shape": "cylinder_diagonal",
    "openscad_code": "// Diagonal cylinder with rounded ends\n// 45Â° diagonal orientation, 100mm length, 20mm diameter\n\n$fn = 32;\n\n// Main diagonal cylinder\nrotate([0, 45, 0])\n    cylinder(h=100, r=10, center=true);\n\n// Rounded ends\ntranslate([-35.36, 0, 35.36])\n    sphere(r=10);\n\ntranslate([35.36, 0, -35.36])\n    sphere(r=10);",
    "renders": true
  },
  {
    "basic_shape": "sphere_eighth",
    "openscad_code": "// sphere_eighth - one octant of a sphere with rounded edges\nr = 50;                // sphere radius\ne = 4;                 // rounding radius on edges\n\ndifference() {\n    // main octant\n    intersection() {\n        sphere(r);\n        translate([0,0,0]) cube([r,r,r], center=false);\n    }\n    \n    // edge roundings\n    // bottom-front edge\n    translate([r-e, -e, -e])\n        rotate([0,90,0])\n            cylinder(h=r+2*e, r=e, center=true);\n    \n    // bottom-right edge\n    translate([-e, r-e, -e])\n        rotate([-90,0,0])\n            cylinder(h=r+2*e, r=e, center=true);\n    \n    // front-right edge\n    translate([-e, -e, r-e])\n        cylinder(h=r+2*e, r=e, center=true);\n    \n    // corner sphere\n    translate([r-e, r-e, r-e])\n        sphere(r=e);\n}",
    "renders": true
  },
  {
    "basic_shape": "sphere_half",
    "openscad_code": "// Half-sphere with rounded bottom rim\nmodule sphere_half(r=50, fn=100) {\n    difference() {\n        // Full sphere\n        sphere(r=r, $fn=fn);\n        \n        // Cut in half\n        translate([0, 0, -r])\n            cube([r*3, r*3, r], center=true);\n    }\n    \n    // Add rounded bottom edge\n    translate([0, 0, 0])\n        difference() {\n            // Torus for rounded edge\n            rotate_extrude($fn=fn)\n                translate([r-2, 0, 0])\n                    circle(r=2);\n                    \n            // Remove excess torus\n            translate([0, 0, -r])\n                cube([r*3, r*3, r], center=true);\n        }\n}\n\nsphere_half(r=50);",
    "renders": true
  },
  {
    "basic_shape": "sphere_three_quarter",
    "openscad_code": "// sphere_three_quarter - medium complexity\n// 75 mm diameter sphere with one octant removed\n\n$fn = 64;\n\ndifference() {\n    sphere(d = 75);\n    \n    // Remove the +X +Y +Z octant via a box larger than the sphere\n    translate([37.6, 37.6, 37.6])\n        cube(75.2, center = false);\n    \n    // Optional: soften the cut edge with a tiny fillet\n    intersection() {\n        sphere(d = 75);\n        translate([38, 38, 38])\n            sphere(d = 76);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "platform",
    "openscad_code": "difference() {\n    // Main platform body with rounded top edges\n    minkowski() {\n        cube([80, 80, 15], center=true);\n        cylinder(h=0.1, r=5, center=true);\n    }\n    \n    // Cut off bottom half of rounded edges\n    translate([0, 0, -7.5])\n        cube([82, 82, 15.1], center=true);\n    \n    // Central hole\n    translate([0, 0, -1])\n        cylinder(h=20, r=15, center=true);\n    \n    // Four corner holes\n    for(x = [-30, 30])\n        for(y = [-30, 30])\n            translate([x, y, -1])\n                cylinder(h=20, r=4, center=true);\n}",
    "renders": true
  },
  {
    "basic_shape": "platform_square",
    "openscad_code": "// Square platform with rounded top edges and slight recess\nplatform_size = 80;\nplatform_height = 12;\nedge_radius = 4;\nrecess_depth = 2;\n\ndifference() {\n    // Main platform body with rounded top edges\n    minkowski() {\n        cube([platform_size, platform_size, platform_height - edge_radius], center=true);\n        sphere(r=edge_radius);\n    }\n    \n    // Recess on top surface\n    translate([0, 0, platform_height/2 - recess_depth/2 + 0.1])\n        cube([platform_size - 10, platform_size - 10, recess_depth + 0.2], center=true);\n}",
    "renders": true
  },
  {
    "basic_shape": "platform_rectangular",
    "openscad_code": "// Rectangular platform with rounded edges and corner holes\nlength = 100;\nwidth = 70;\nheight = 8;\nradius = 5;\nhole_r = 3;\nhole_margin = 8;\n\n// Main body with rounded edges\ndifference() {\n    minkowski() {\n        cube([length-2*radius, width-2*radius, height-2*radius]);\n        sphere(radius);\n    }\n    \n    // Corner holes\n    for (x = [hole_margin, length-hole_margin]) {\n        for (y = [hole_margin, width-hole_margin]) {\n            translate([x, y, -1])\n                cylinder(r=hole_r, h=height+2);\n        }\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "platform_round",
    "openscad_code": "// platform_round.scad\n// Round platform with rounded top edge and center hole\n\ndiameter = 100;\nheight = 15;\nedge_radius = 3;\nhole_diameter = 20;\n\ndifference() {\n    // Main platform body with rounded top\n    union() {\n        // Bottom cylinder\n        cylinder(h=height - edge_radius, d=diameter, $fn=64);\n        \n        // Rounded top edge\n        translate([0, 0, height - edge_radius])\n            cylinder(h=edge_radius, d1=diameter, d2=diameter - edge_radius*2, $fn=64);\n    }\n    \n    // Center hole\n    translate([0, 0, -1])\n        cylinder(h=height + 2, d=hole_diameter, $fn=32);\n}",
    "renders": true
  },
  {
    "basic_shape": "platform_oval",
    "openscad_code": "// Oval platform with rounded edges and 4 corner cylinders\nmodule platform_oval() {\n    // Main oval plate\n    difference() {\n        // Flat oval base\n        scale([1.2, 1, 1])\n        cylinder(h=8, r=40, $fn=50);\n        \n        // Rounded top edge\n        translate([0, 0, 6])\n        scale([1.2, 1, 1])\n        cylinder(h=4, r=38, $fn=50);\n    }\n    \n    // Rounded bottom edge\n    translate([0, 0, 0])\n    scale([1.2, 1, 1])\n    cylinder(h=2, r=42, $fn=50);\n    \n    // Corner posts\n    for(x = [-35, 35], y = [-25, 25])\n        translate([x, y, 0])\n        cylinder(h=12, r=3, $fn=16);\n}\n\nplatform_oval();",
    "renders": true
  },
  {
    "basic_shape": "platform_thin",
    "openscad_code": "// Platform with rounded edges and lightening cutouts\nplatform_x = 100;\nplatform_y = 80;\nplatform_z = 5;\ncorner_r = 8;\nhole_r = 6;\n\ndifference() {\n    difference() {\n        minkowski() {\n            cube([platform_x - 2*corner_r, platform_y - 2*corner_r, platform_z]);\n            cylinder(r = corner_r, h = 0.01, $fn = 16);\n        }\n        translate([0, 0, -1])\n            cube([platform_x, platform_y, 2]);\n    }\n    \n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * 30, y * 25, -1])\n                cylinder(r = hole_r, h = platform_z + 2, $fn = 16);\n}",
    "renders": true
  },
  {
    "basic_shape": "platform_thick",
    "openscad_code": "// platform_thick.scad\n// A thick rectangular platform with rounded top edges and a shallow recess\n\nplatform_x = 100;\nplatform_y = 80;\nplatform_h = 25;\ncorner_r = 8;\nrecess_d = 3;\n\n// Main block\ndifference() {\n    // Rounded top block\n    minkowski() {\n        cube([platform_x - 2*corner_r, platform_y - 2*corner_r, platform_h - corner_r], center = true);\n        sphere(r = corner_r, $fn = 24);\n    }\n    \n    // Recessed top surface\n    translate([0, 0, (platform_h - recess_d)/2])\n        cube([platform_x - 4*corner_r, platform_y - 4*corner_r, recess_d + 1], center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "platform_with_legs",
    "openscad_code": "// platform with rounded legs\nplatform_w = 100;\nplatform_d = 80;\nplatform_h = 10;\nleg_r = 8;\nleg_h = 40;\nfillet = 3;\n\n// platform\ntranslate([0, 0, leg_h])\n    minkowski() {\n        cube([platform_w, platform_d, platform_h], center = true);\n        sphere(fillet);\n    }\n\n// legs\ntranslate([platform_w/2 - leg_r, platform_d/2 - leg_r, 0])\n    cylinder(h = leg_h, r = leg_r);\n\ntranslate([-platform_w/2 + leg_r, platform_d/2 - leg_r, 0])\n    cylinder(h = leg_h, r = leg_r);\n\ntranslate([platform_w/2 - leg_r, -platform_d/2 + leg_r, 0])\n    cylinder(h = leg_h, r = leg_r);\n\ntranslate([-platform_w/2 + leg_r, -platform_d/2 + leg_r, 0])\n    cylinder(h = leg_h, r = leg_r);",
    "renders": true
  },
  {
    "basic_shape": "platform_hollow",
    "openscad_code": "// platform_hollow.scad\n// Hollow rectangular platform with rounded edges\n\nwidth = 80;\ndepth = 80;\nheight = 20;\nwall = 4;\nradius = 4;\n\n// Outer rounded platform\ndifference() {\n    minkowski() {\n        cube([width - 2*radius, depth - 2*radius, height - radius]);\n        sphere(r = radius);\n    }\n    \n    // Hollow interior\n    translate([wall, wall, wall + radius]) {\n        minkowski() {\n            cube([width - 2*(wall + radius), depth - 2*(wall + radius), height - wall - 2*radius]);\n            sphere(r = radius);\n        }\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "platform_rounded",
    "openscad_code": "// platform_rounded - medium complexity rounded platform\n// dimensions: 100 x 80 x 20 mm with 5mm rounded edges\n\n$fn = 32;\n\nmodule platform_rounded() {\n    // main platform body\n    difference() {\n        // rounded top and bottom with minkowski\n        minkowski() {\n            cube([90, 70, 10], center=true);\n            sphere(r=5);\n        }\n        \n        // remove bottom rounded part to flatten base\n        translate([0, 0, -10])\n            cube([200, 200, 20], center=true);\n    }\n    \n    // flatten top surface\n    translate([0, 0, 10])\n        cube([90, 70, 1], center=true);\n}\n\nplatform_rounded();",
    "renders": true
  },
  {
    "basic_shape": "plate",
    "openscad_code": "// Rectangular plate with rounded top edges and mounting holes\n\n$fn = 48;\n\nplate_w = 80;\nplate_d = 60;\nplate_h = 5;\n\n// Main plate body\ndifference() {\n    // Rounded-top plate\n    union() {\n        translate([0, 0, plate_h/2])\n            cube([plate_w, plate_d, plate_h], center=true);\n        translate([0, 0, plate_h])\n            minkowski() {\n                cube([plate_w, plate_d, 0.01], center=true);\n                cylinder(h=plate_h/2, r=plate_h/2, center=true);\n            }\n    }\n    \n    // Corner mounting holes\n    hole_d = 4;\n    corner_offset = 8;\n    \n    translate([plate_w/2 - corner_offset, plate_d/2 - corner_offset, -1])\n        cylinder(h=plate_h + 2, r=hole_d/2, center=false);\n    translate([-plate_w/2 + corner_offset, plate_d/2 - corner_offset, -1])\n        cylinder(h=plate_h + 2, r=hole_d/2, center=false);\n    translate([plate_w/2 - corner_offset, -plate_d/2 + corner_offset, -1])\n        cylinder(h=plate_h + 2, r=hole_d/2, center=false);\n    translate([-plate_w/2 + corner_offset, -plate_d/2 + corner_offset, -1])\n        cylinder(h=plate_h + 2, r=hole_d/2, center=false);\n}",
    "renders": true
  },
  {
    "basic_shape": "plate_circular",
    "openscad_code": "// Circular plate with rounded top edge and center hole\n$fn = 48;\n\n// Main plate body\ndifference() {\n    union() {\n        // Base cylinder\n        cylinder(h = 8, r = 50);\n        \n        // Rounded top edge\n        translate([0, 0, 8])\n            cylinder(h = 2, r1 = 50, r2 = 48);\n    }\n    \n    // Center hole\n    cylinder(h = 10, r = 12);\n}\n\n// Optional: slight counterbore on top\ntranslate([0, 0, 8])\n    cylinder(h = 1, r = 15);",
    "renders": true
  },
  {
    "basic_shape": "plate_square",
    "openscad_code": "// Square plate with rounded top edges and slight chamfer on bottom\nplate_size = 100;\nplate_thickness = 5;\nedge_radius = 2;\nchamfer = 1;\n\ndifference() {\n    // Main plate body with rounded top edges\n    minkowski() {\n        cube([plate_size - 2*edge_radius, plate_size - 2*edge_radius, plate_thickness - edge_radius], center=true);\n        cylinder(r=edge_radius, h=0.01, $fn=20);\n    }\n    \n    // Bottom chamfer cut\n    translate([0, 0, -plate_thickness/2 + chamfer/2])\n        cylinder(h1=chamfer, h2=0, r1=plate_size/2, r2=plate_size/2 - chamfer, center=true, $fn=4);\n        \n    // Optional center hole\n    translate([0, 0, -plate_thickness/2 - 1])\n        cylinder(h=plate_thickness + 2, r=5, $fn=32);\n}",
    "renders": true
  },
  {
    "basic_shape": "plate_rectangular",
    "openscad_code": "// Rectangular plate with rounded edges\nlength = 100;\nwidth = 60;\nheight = 5;\nradius = 3;\n\ndifference() {\n    minkowski() {\n        cube([length-2*radius, width-2*radius, height]);\n        cylinder(r=radius, h=height, $fn=20);\n    }\n    \n    // Optional center hole\n    translate([length/2, width/2, -1])\n        cylinder(r=10, h=height+2, $fn=30);\n}",
    "renders": true
  },
  {
    "basic_shape": "plate_rounded",
    "openscad_code": "// Rounded plate with medium complexity\n// 100 mm diameter, 5 mm thick, 3 mm edge radius\n\nmodule rounded_plate(diameter, thickness, edge_radius) {\n    // Main plate body\n    difference() {\n        // Overall rounded top/bottom\n        cylinder(h=thickness, r=(diameter/2) - edge_radius, $fn=100);\n        \n        // Edge rounding on top\n        translate([0, 0, thickness - edge_radius])\n            cylinder(h=edge_radius, r1=(diameter/2) - edge_radius - edge_radius, r2=(diameter/2) - edge_radius, $fn=100);\n        \n        // Edge rounding on bottom\n        translate([0, 0, 0])\n            cylinder(h=edge_radius, r1=(diameter/2) - edge_radius, r2=(diameter/2) - edge_radius - edge_radius, $fn=100);\n    }\n    \n    // Outer edge rounding\n    union() {\n        // Top edge fillet\n        translate([0, 0, thickness - edge_radius])\n            rotate_extrude($fn=100)\n                translate([(diameter/2) - edge_radius, 0, 0])\n                    circle(r=edge_radius);\n        \n        // Bottom edge fillet\n        translate([0, 0, edge_radius])\n            rotate_extrude($fn=100)\n                translate([(diameter/2) - edge_radius, 0, 0])\n                    circle(r=edge_radius);\n    }\n}\n\nrounded_plate(100, 5, 3);",
    "renders": true
  },
  {
    "basic_shape": "plate_flat",
    "openscad_code": "// Flat plate with rounded top edges and four corner mounting holes\nplate_th = 6;\nplate_w = 80;\nplate_l = 120;\nedge_r = 3;\nhole_d = 4;\nmargin = 10;\n\ndifference() {\n    // Main plate body with rounded top edges\n    minkowski() {\n        cube([plate_w - 2*edge_r, plate_l - 2*edge_r, plate_th - edge_r], center = true);\n        cylinder(h = 0.01, r = edge_r, center = true);\n    }\n\n    // Four corner holes\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * (plate_w/2 - margin), y * (plate_l/2 - margin), 0])\n                cylinder(h = plate_th + 2, d = hole_d, center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "plate_curved",
    "openscad_code": "// plate_curved.scad\n\n// Main curved plate body\ndifference() {\n    // Rounded-top slab\n    minkowski() {\n        cube([100, 60, 5], center = true);\n        cylinder(h = 1, r = 3, center = true);\n    }\n\n    // Remove underside to thin the plate\n    translate([0, 0, -3])\n        cube([110, 70, 6], center = true);\n}\n\n// Simple curved underside\ntranslate([0, 0, -2])\n    scale([1, 1, 0.3])\n        cylinder(h = 6, r1 = 52, r2 = 52, center = true);\n\n// Light edge fillet\ndifference() {\n    minkowski() {\n        cube([104, 64, 1], center = true);\n        sphere(r = 1);\n    }\n    cube([106, 66, 2], center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "plate_with_rim",
    "openscad_code": "// plate_with_rim.scad\nplate_d = 80;\nplate_h = 4;\nrim_h = 6;\n\ndifference() {\n    union() {\n        // main plate body\n        cylinder(h = plate_h, d = plate_d, $fn = 64);\n        \n        // rim ring\n        translate([0, 0, plate_h])\n            cylinder(h = rim_h, d1 = plate_d, d2 = plate_d + 6, $fn = 64);\n    }\n    \n    // hollow center\n    cylinder(h = plate_h + rim_h + 2, d = plate_d - 10, $fn = 64);\n    \n    // round off top rim edge\n    translate([0, 0, plate_h + rim_h])\n        rotate_extrude(angle = 180, $fn = 64)\n            translate([plate_d/2 + 3, 0])\n                circle(r = 3, $fn = 32);\n}",
    "renders": true
  },
  {
    "basic_shape": "plate_hollow",
    "openscad_code": "// plate_hollow - medium complexity\n\n// outer plate with rounded edges\nmodule rounded_plate(w, d, h, r) {\n    difference() {\n        minkowski() {\n            cube([w-2*r, d-2*r, h-2*r], center=true);\n            sphere(r);\n        }\n        translate([0, 0, -h/2-1])\n            cube([w, d, h+2], center=true);\n    }\n}\n\ndifference() {\n    rounded_plate(100, 80, 6, 3);\n    // hollow center\n    translate([0, 0, -1])\n        cube([80, 60, 8], center=true);\n}",
    "renders": true
  },
  {
    "basic_shape": "cap",
    "openscad_code": "// Cap with rounded edges and basic form\ncap_height = 60;\ncap_diameter = 80;\ncap_thickness = 3;\nbrim_width = 5;\n\n// Main cap body\ndifference() {\n    // Rounded top with cylinder\n    cylinder(h=cap_height, r=cap_diameter/2, $fn=64);\n    \n    // Hollow it out\n    translate([0, 0, cap_thickness])\n    cylinder(h=cap_height, r=cap_diameter/2 - cap_thickness, $fn=64);\n}\n\n// Add brim\ntranslate([0, 0, cap_thickness])\ndifference() {\n    cylinder(h=brim_width, r=cap_diameter/2 + 5, $fn=64);\n    cylinder(h=brim_width, r=cap_diameter/2, $fn=64);\n}",
    "renders": true
  },
  {
    "basic_shape": "cap_round",
    "openscad_code": "// cap_round: rounded cylinder cap with smooth top edge\n$fn = 48;\n\ncap_h = 60;      // total height\ncap_r = 45;      // outer radius\nwall_t = 5;      // wall thickness\nedge_r = 8;      // rounding radius at top\n\ndifference() {\n    // outer shell with rounded top\n    minkowski() {\n        cylinder(h = cap_h - edge_r, r = cap_r - edge_r, center = false);\n        sphere(r = edge_r);\n    }\n    \n    // inner cavity\n    translate([0, 0, wall_t])\n        cylinder(h = cap_h, r = cap_r - wall_t, center = false);\n}\n\n// bottom rim for seating\ntranslate([0, 0, -0.1])\n    cylinder(h = wall_t + 0.2, r1 = cap_r - wall_t - 1, r2 = cap_r - wall_t, center = false);",
    "renders": true
  },
  {
    "basic_shape": "cap_cone",
    "openscad_code": "// Cap cone: cone with rounded top edge and base fillet\n$fn = 32;\n\n// Overall cone\ndifference() {\n    cylinder(h = 60, r1 = 35, r2 = 0, center = false);\n    // Rounded top edge subtraction\n    translate([0, 0, 57])\n        sphere(r = 5);\n}\n\n// Base fillet ring\ntranslate([0, 0, -1])\n    cylinder(h = 3, r1 = 35, r2 = 38, center = false);",
    "renders": true
  },
  {
    "basic_shape": "cap_cylinder",
    "openscad_code": "// Cap cylinder with rounded top edge\n$fn = 60;\n\ncap_h = 20;\nbody_h = 80;\nd = 60;\nr = d/2;\n\ndifference() {\n    // Main cylinder body\n    cylinder(h = body_h + cap_h, r = r, center = false);\n    \n    // Hollow interior\n    cylinder(h = body_h + 1, r = r - 3, center = false);\n    \n    // Round top edge\n    translate([0, 0, body_h + cap_h - 3])\n        sphere(r = 3);\n}\n\n// Handle grip ring\ntranslate([0, 0, body_h - 10])\n    difference() {\n        cylinder(h = 5, r = r + 2);\n        cylinder(h = 6, r = r);\n    }",
    "renders": true
  },
  {
    "basic_shape": "cap_thick",
    "openscad_code": "// Medium-complexity cap: flat disk with rounded top edge and slight recess\n$fn = 32;\n\ndifference() {\n    // Main cap body: disk with rounded top\n    union() {\n        translate([0, 0, 5]) cylinder(h = 5, r = 50);\n        translate([0, 0, 5]) sphere(r = 50);\n    }\n\n    // Recess on top\n    translate([0, 0, 9]) cylinder(h = 5, r = 45);\n\n    // Optional alignment pin hole (center)\n    cylinder(h = 10, r = 5);\n}",
    "renders": true
  },
  {
    "basic_shape": "cap_thin",
    "openscad_code": "// Thin cap with rounded edges\n$fn = 32;\n\n// Main thin disc\ndifference() {\n    union() {\n        // Flat disc\n        cylinder(h=2, r=50, center=true);\n        \n        // Rounded upper edge\n        translate([0, 0, 1])\n            cylinder(h=2, r1=50, r2=48);\n    }\n    \n    // Central hole\n    cylinder(h=10, r=20, center=true);\n    \n    // Remove bottom half of rounded edge\n    translate([0, 0, -5])\n        cube([120, 120, 10], center=true);\n}",
    "renders": true
  },
  {
    "basic_shape": "cap_with_knob",
    "openscad_code": "$fn = 32;\n\n// Main cap body\ndifference() {\n    cylinder(h = 35, r1 = 30, r2 = 25);\n    \n    // Hollow interior\n    translate([0, 0, 5])\n        cylinder(h = 30, r1 = 26, r2 = 21);\n}\n\n// Knob on top\ntranslate([0, 0, 35])\n    cylinder(h = 15, r = 8);\n\n// Rounded top of cap\ntranslate([0, 0, 35])\n    sphere(r = 30);\n\n// Knob sphere\ntranslate([0, 0, 50])\n    sphere(r = 10);",
    "renders": true
  },
  {
    "basic_shape": "cap_hollow",
    "openscad_code": "// Hollow cap with rounded top\n$fn=64;\n\ncap_height = 60;\ncap_radius = 45;\nwall_thickness = 3;\nround_radius = 8;\n\ndifference() {\n    // Outer shell with rounded top\n    union() {\n        cylinder(h=cap_height - round_radius, r=cap_radius);\n        translate([0, 0, cap_height - round_radius])\n            sphere(r=cap_radius);\n    }\n    \n    // Hollow interior\n    translate([0, 0, -1])  // slight overlap for clean bottom\n        cylinder(h=cap_height - round_radius + 1, \n                 r=cap_radius - wall_thickness);\n    translate([0, 0, cap_height - round_radius])\n        sphere(r=cap_radius - wall_thickness);\n}",
    "renders": true
  },
  {
    "basic_shape": "rod",
    "openscad_code": "// Rounded-rod with rounded ends\n$fn = 32;\n\nmodule rounded_rod(l=100, r=10) {\n    hull() {\n        translate([0,0,0])\n            sphere(r);\n        translate([0,0,l])\n            sphere(r);\n    }\n}\n\nrounded_rod(100, 10);",
    "renders": true
  },
  {
    "basic_shape": "rod_round",
    "openscad_code": "// rod_round.scad\n// Medium-complexity round rod with rounded ends\n\n$fn = 32;\n\n// Overall dimensions\nrod_d = 20;       // shaft diameter\nrod_h = 100;      // total height\ncap_r = rod_d/2;  // end-cap radius\n\n// Construct rod\nunion() {\n    // Cylindrical shaft\n    cylinder(h = rod_h - cap_r*2, r = rod_d/2, center = true);\n    \n    // Rounded top cap\n    translate([0, 0, (rod_h - cap_r*2)/2])\n        sphere(r = cap_r);\n    \n    // Rounded bottom cap\n    translate([0, 0, -(rod_h - cap_r*2)/2])\n        sphere(r = cap_r);\n}",
    "renders": true
  },
  {
    "basic_shape": "rod_square",
    "openscad_code": "// Square rod with rounded ends and filleted edges\n$fn = 32;\n\nlength = 100;\nsize = 20;\nradius = 5;\n\ndifference() {\n    // Main rod with rounded ends\n    hull() {\n        translate([0, 0, radius])\n            cube([size, size, length - 2*radius], center=true);\n        translate([0, 0, radius])\n            cylinder(h=size, r=radius, center=true);\n        translate([0, 0, length - radius])\n            cylinder(h=size, r=radius, center=true);\n    }\n    \n    // Rounded edges along length\n    for(x = [-1, 1])\n    for(y = [-1, 1])\n        translate([x*(size/2 - radius), y*(size/2 - radius), 0])\n            rotate([0, 90, 0])\n                cylinder(h=length, r=radius, center=true);\n}",
    "renders": true
  },
  {
    "basic_shape": "rod_hexagonal",
    "openscad_code": "// Rod with hexagonal cross-section, rounded ends\n// Total length 100 mm, hexagon circumradius 25 mm, rounded ends r=12 mm\n\n$fn = 6;  // hexagon resolution\n\nmodule hex_rod(r=25, h=100, end_r=12) {\n    difference() {\n        union() {\n            // Middle rod\n            cylinder(h=h-2*end_r, r=r, center=true);\n\n            // Top dome\n            translate([0, 0, (h-2*end_r)/2])\n                sphere(r=end_r);\n\n            // Bottom dome\n            translate([0, 0, -(h-2*end_r)/2])\n                sphere(r=end_r);\n        }\n\n        // Optional center hole Ã6 mm\n        cylinder(h=h+2, r=3, center=true);\n    }\n}\n\nhex_rod();",
    "renders": true
  },
  {
    "basic_shape": "rod_long",
    "openscad_code": "// Rod with rounded ends (medium complexity)\n// Total length 120 mm, diameter 12 mm\n\n$fn = 32;\n\nrod_length = 120;\nrod_diameter = 12;\nedge_radius = rod_diameter / 2;\n\n// Main cylindrical body\ncylinder(h = rod_length - rod_diameter, r = edge_radius, center = true);\n\n// Rounded ends\ntranslate([0, 0, (rod_length - rod_diameter) / 2])\n    sphere(r = edge_radius);\n\ntranslate([0, 0, -(rod_length - rod_diameter) / 2])\n    sphere(r = edge_radius);",
    "renders": true
  },
  {
    "basic_shape": "rod_short",
    "openscad_code": "// Rod with rounded ends and center collar\nrod_len = 100;\nrod_rad = 8;\ncollar_rad = 12;\ncollar_len = 10;\n\ndifference() {\n    union() {\n        cylinder(h = rod_len, r = rod_rad, $fn = 32);\n        translate([0, 0, rod_len/2 - collar_len/2])\n            cylinder(h = collar_len, r = collar_rad, $fn = 32);\n    }\n    // Rounded ends via spheres\n    translate([0, 0, -rod_rad]) sphere(r = rod_rad, $fn = 32);\n    translate([0, 0, rod_len + rod_rad]) sphere(r = rod_rad, $fn = 32);\n}",
    "renders": true
  },
  {
    "basic_shape": "rod_thick",
    "openscad_code": "// rod_thick.scad\n// Medium complexity thick rod with rounded ends and slight taper\n\n$fn = 32;\n\n// Parameters\nbase_d = 30;\nend_d = 25;\nlength = 100;\nround_r = 8;\n\n// Main tapered rod\ndifference() {\n    cylinder(h = length, r1 = base_d/2, r2 = end_d/2, center = true);\n    \n    // Hollow core for weight reduction\n    cylinder(h = length + 2, r1 = (base_d - 8)/2, r2 = (end_d - 8)/2, center = true);\n}\n\n// Rounded ends\ntranslate([0, 0, length/2])\n    sphere(r = round_r);\ntranslate([0, 0, -length/2])\n    sphere(r = round_r);\n\n// Fillet blend between rod and rounded ends\ndifference() {\n    translate([0, 0, length/2])\n        cylinder(h = round_r*1.5, r1 = base_d/2, r2 = round_r*0.8, center = true);\n    translate([0, 0, length/2 + round_r*0.5])\n        sphere(r = round_r - 1);\n}\n\ndifference() {\n    translate([0, 0, -length/2])\n        cylinder(h = round_r*1.5, r1 = end_d/2, r2 = round_r*0.8, center = true);\n    translate([0, 0, -length/2 - round_r*0.5])\n        sphere(r = round_r - 1);\n}",
    "renders": true
  },
  {
    "basic_shape": "rod_thin",
    "openscad_code": "$fn = 40;\n\nmodule rod_thin() {\n    rod_height = 100;\n    rod_radius = 4;\n    fillet_radius = 2;\n\n    // Main rod body\n    difference() {\n        cylinder(h = rod_height, r = rod_radius);\n\n        // Rounded top edge\n        translate([0, 0, rod_height - fillet_radius])\n            sphere(r = fillet_radius);\n        translate([0, 0, rod_height])\n            cylinder(h = fillet_radius, r = rod_radius - fillet_radius);\n    }\n\n    // Rounded bottom edge\n    translate([0, 0, -0.01])\n        sphere(r = fillet_radius);\n    translate([0, 0, -filletradius])\n        cylinder(h = fillet_radius, r = rod_radius - fillet_radius);\n}\n\nrod_thin();",
    "renders": true
  },
  {
    "basic_shape": "rod_tapered",
    "openscad_code": "$fn = 32;\n\n// tapered rod with rounded ends\nmodule rod_tapered() {\n    h = 100;\n    r1 = 25;\n    r2 = 12;\n    round = 6;\n\n    union() {\n        // lower rounded cap\n        translate([0, 0, round])\n            cylinder(h = h - 2*round, r1 = r1, r2 = r2, center = false);\n\n        // lower sphere\n        translate([0, 0, round])\n            sphere(r = r1);\n\n        // upper sphere\n        translate([0, 0, h - round])\n            sphere(r = r2);\n    }\n}\n\nrod_tapered();",
    "renders": true
  },
  {
    "basic_shape": "rod_threaded",
    "openscad_code": "// Threaded rod - medium complexity with rounded ends and threads\nrod_length = 100;\nrod_radius = 12;\nthread_pitch = 3;\nthread_depth = 1;\n\n// Main rod body with rounded ends\ndifference() {\n    union() {\n        // Cylindrical body\n        cylinder(h=rod_length, r=rod_radius, $fn=32);\n        \n        // Rounded top end\n        translate([0, 0, rod_length])\n            sphere(r=rod_radius, $fn=32);\n        \n        // Rounded bottom end\n            sphere(r=rod_radius, $fn=32);\n    }\n    \n    // Cut bottom sphere in half\n    translate([0, 0, -rod_radius])\n        cube([rod_radius*3, rod_radius*3, rod_radius], center=true);\n}\n\n// Add simple thread ridges (8 segments around)\nfor (i = [0:7]) {\n    rotate([0, 0, i * 45]) {\n        for (j = [0:floor(rod_length/thread_pitch)]) {\n            translate([rod_radius - thread_depth/2, 0, j * thread_pitch])\n                rotate([0, 90, 0])\n                    cylinder(h=thread_depth, r1=thread_pitch/2, r2=thread_pitch/2, $fn=8);\n        }\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "rod_with_head",
    "openscad_code": "// rod_with_head - medium complexity\n// 100mm total length, 20mm shaft diameter, 40mm head diameter\n\n$fn = 32;\n\n// Rounded head\ntranslate([0, 0, 90])\n    minkowski() {\n        cylinder(h=10, r=20, center=true);\n        sphere(r=2);\n    }\n\n// Head cylinder body\ntranslate([0, 0, 85])\n    cylinder(h=10, r=20);\n\n// Tapered shaft\ncylinder(h=85, r1=20, r2=10);\n\n// Rounded tip\nminkowski() {\n    translate([0, 0, 0])\n        sphere(r=10);\n    sphere(r=2);\n}",
    "renders": true
  },
  {
    "basic_shape": "bar",
    "openscad_code": "// Bar with rounded ends: 100mm long, 20mm diameter\n// Uses cylinders and spheres for rounded caps\n\nmodule rounded_bar(length, diameter) {\n    radius = diameter / 2;\n    \n    union() {\n        // Central cylinder\n        translate([0, 0, radius])\n            cylinder(h = length - diameter, r = radius, $fn = 32);\n        \n        // Left rounded cap\n        translate([0, 0, radius])\n            sphere(r = radius, $fn = 32);\n        \n        // Right rounded cap\n        translate([0, 0, length - radius])\n            sphere(r = radius, $fn = 32);\n    }\n}\n\nrounded_bar(100, 20);",
    "renders": true
  },
  {
    "basic_shape": "bar_round",
    "openscad_code": "// Bar with rounded ends\n// Dimensions: 100mm length, 20mm diameter\n\nmodule bar_round(l=100, d=20) {\n    r = d/2;\n    \n    // Main body cylinder\n    cylinder(h=l-d, r=r, center=true);\n    \n    // Rounded ends\n    translate([0, 0, (l-d)/2])\n        sphere(r=r);\n    translate([0, 0, -(l-d)/2])\n        sphere(r=r);\n}\n\nbar_round();",
    "renders": true
  },
  {
    "basic_shape": "bar_square",
    "openscad_code": "// Square bar with rounded edges and center hole\nbar_width = 80;\nbar_height = 15;\nbar_length = 100;\ncorner_radius = 5;\nhole_diameter = 12;\n\ndifference() {\n    // Main bar with rounded edges\n    minkowski() {\n        cube([bar_width - 2*corner_radius, bar_height - 2*corner_radius, bar_length - 2*corner_radius], center = true);\n        sphere(r = corner_radius, $fn = 16);\n    }\n    \n    // Center hole along length\n    rotate([0, 90, 0])\n        cylinder(h = bar_width + 2, d = hole_diameter, center = true, $fn = 32);\n}",
    "renders": true
  },
  {
    "basic_shape": "bar_rectangular",
    "openscad_code": "// Medium-complexity rectangular bar with rounded edges\nw = 100; l = 40; h = 20; r = 4;\n\n// Main bar body with rounded edges\ndifference() {\n    // Outer rounded box\n    minkowski() {\n        cube([w - 2*r, l - 2*r, h - 2*r], center = true);\n        sphere(r = r);\n    }\n    \n    // Optional central hole (vertical)\n    cylinder(h = h + 2, r = 8, center = true);\n    \n    // Optional side notches (horizontal)\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = l + 2, r = 6, center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "bar_long",
    "openscad_code": "// Medium-complexity bar_long with rounded edges and alignment holes\n// Bar dimensions: 120 mm long, 20 mm wide, 15 mm thick\n\n$fn = 32;\n\n// Main bar body with rounded edges\nmodule rounded_bar() {\n    difference() {\n        // Rounded edges via minkowski\n        minkowski() {\n            cube([100, 10, 5], center=true);\n            sphere(r=2.5);\n        }\n        \n        // End holes for mounting\n        for (x = [-45, 45])\n            translate([x, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=25, r=3, center=true);\n                    \n        // Center through hole\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=25, r=4, center=true);\n    }\n}\n\n// Position bar centered\ntranslate([0, 0, 0])\n    rounded_bar();",
    "renders": true
  },
  {
    "basic_shape": "bar_short",
    "openscad_code": "// short bar with rounded ends and central hole\ndifference() {\n    // rounded bar body\n    hull() {\n        cylinder(h=30, r=10, center=true);\n        translate([0, 0, 20]) cylinder(h=30, r=10, center=true);\n    }\n    \n    // central through hole\n    translate([0, 0, -20]) cylinder(h=60, r=3, $fn=32);\n    \n    // chamfer top edge\n    translate([0, 0, 35]) cylinder(h=5, r1=10, r2=8, $fn=32);\n    \n    // chamfer bottom edge\n    translate([0, 0, -35]) cylinder(h=5, r1=8, r2=10, $fn=32);\n}",
    "renders": true
  },
  {
    "basic_shape": "bar_thick",
    "openscad_code": "// bar_thick.scad\n\n// Parameters\nlength = 100;\nwidth = 25;\nheight = 25;\nedge_radius = 4;\n\n// Main body with rounded edges\nminkowski() {\n    cube([length - 2*edge_radius, width - 2*edge_radius, height - 2*edge_radius], center = true);\n    sphere(r = edge_radius);\n}\n\n// Optional end caps (uncomment if desired)\n// translate([length/2 - edge_radius, 0, 0]) sphere(r = edge_radius);\n// translate([-length/2 + edge_radius, 0, 0]) sphere(r = edge_radius);",
    "renders": true
  },
  {
    "basic_shape": "bar_thin",
    "openscad_code": "// bar_thin.scad\n// Thin bar with rounded ends and slightly rounded edges\n\nlength = 100;\nwidth = 8;\nheight = 6;\nedge_r = 1.5;\nend_r = height/2;\n\nunion() {\n    // Central bar body\n    cube([length - 2*end_r, width, height], center = true);\n    \n    // Rounded ends using cylinders rotated 90 degrees\n    translate([-(length/2 - end_r), 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = width, r = end_r, center = true);\n    \n    translate([(length/2 - end_r), 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = width, r = end_r, center = true);\n    \n    // Edge rounding using small cylinders\n    for(x = [-length/2 + edge_r, length/2 - edge_r]) {\n        for(y = [-width/2 + edge_r, width/2 - edge_r]) {\n            translate([x, y, height/2 - edge_r])\n                sphere(r = edge_r);\n            translate([x, y, -height/2 + edge_r])\n                sphere(r = edge_r);\n        }\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "bar_rounded",
    "openscad_code": "// Rounded bar (rectangular prism with rounded edges)\nlength = 100;\nwidth = 30;\nheight = 20;\nradius = 5;\n\ndifference() {\n    union() {\n        // Core central block\n        translate([radius, radius, 0])\n            cube([length-2*radius, width-2*radius, height]);\n\n        // Left cap\n        translate([radius, radius, 0])\n            cylinder(h=height, r=radius, $fn=20);\n\n        // Right cap\n        translate([length-radius, radius, 0])\n            cylinder(h=height, r=radius, $fn=20);\n\n        // Left edge\n        translate([radius, width-radius, 0])\n            cylinder(h=height, r=radius, $fn=20);\n\n        // Right edge\n        translate([length-radius, width-radius, 0])\n            cylinder(h=height, r=radius, $fn=20);\n    }\n\n    // Cut off excess cylinders outside bar length\n    translate([0, -1, -1])\n        cube([length+2, width+2, height+2]);\n}",
    "renders": true
  },
  {
    "basic_shape": "bar_chamfered",
    "openscad_code": "// Bar with chamfered edges\nlength = 80;\nwidth = 20;\nheight = 15;\nchamfer = 3;\n\nmodule chamfered_bar() {\n    difference() {\n        // Main bar\n        cube([length, width, height], center=true);\n        \n        // Chamfer bottom edges\n        translate([0, 0, -height/2-0.1])\n            hull() {\n                translate([-length/2+chamfer, -width/2+chamfer, 0])\n                    cylinder(h=height+0.2, r=chamfer, $fn=16);\n                translate([length/2-chamfer, -width/2+chamfer, 0])\n                    cylinder(h=height+0.2, r=chamfer, $fn=16);\n                translate([-length/2+chamfer, width/2-chamfer, 0])\n                    cylinder(h=height+0.2, r=chamfer, $fn=16);\n                translate([length/2-chamfer, width/2-chamfer, 0])\n                    cylinder(h=height+0.2, r=chamfer, $fn=16);\n            }\n    }\n    \n    // Add chamfer tops\n    intersection() {\n        translate([0, 0, height/2-0.1])\n            hull() {\n                translate([-length/2+chamfer, -width/2+chamfer, 0])\n                    cylinder(h=height+0.2, r=chamfer, $fn=16);\n                translate([length/2-chamfer, -width/2+chamfer, 0])\n                    cylinder(h=height+0.2, r=chamfer, $fn=16);\n                translate([-length/2+chamfer, width/2-chamfer, 0])\n                    cylinder(h=height+0.2, r=chamfer, $fn=16);\n                translate([length/2-chamfer, width/2-chamfer, 0])\n                    cylinder(h=height+0.2, r=chamfer, $fn=16);\n            }\n        translate([0, 0, height/2])\n            cube([length, width, height], center=true);\n    }\n}\n\nchamfered_bar();",
    "renders": true
  },
  {
    "basic_shape": "puck",
    "openscad_code": "// Puck with medium complexity: rounded edges and center bore\n// Overall diameter 76 mm, height 25 mm\n\n$fn = 50;\n\n// Main puck body with rounded edges\ndifference() {\n    // Cylindrical puck with rounded top and bottom\n    cylinder(h = 25, r = 38);\n\n    // Rounded edges: subtract smaller cylinder to create fillets\n    translate([0, 0, -0.1])\n        cylinder(h = 25.2, r = 32);\n\n    // Center bore 25 mm diameter\n    translate([0, 0, -0.1])\n        cylinder(h = 25.2, r = 12.5);\n}\n\n// Add small chamfers on top and bottom rims\ntranslate([0, 0, 25])\n    cylinder(h = 2, r1 = 38, r2 = 35);\n\ntranslate([0, 0, -2])\n    cylinder(h = 2, r1 = 35, r2 = 38);",
    "renders": true
  },
  {
    "basic_shape": "puck_thick",
    "openscad_code": "// puck_thick.scad\n// Medium-complexity thick puck with rounded edges\n\n// Dimensions\ndiameter = 76;      // Standard 3-inch puck\nthickness = 25;      // Thick variant\nedge_radius = 3;    // Rounding radius\n\n// Main puck body with rounded edges\ndifference() {\n    // Outer cylinder with rounded edges\n    minkowski() {\n        cylinder(h = thickness - 2*edge_radius, r = diameter/2 - edge_radius, $fn = 64);\n        sphere(r = edge_radius, $fn = 32);\n    }\n    \n    // Recessed top and bottom faces (1mm deep)\n    translate([0, 0, -1])\n        cylinder(h = 2, r = diameter/2 - 5, $fn = 64);\n    \n    // Center hole (optional finger hole)\n    cylinder(h = thickness + 2, r = 10, $fn = 32);\n}",
    "renders": true
  },
  {
    "basic_shape": "puck_thin",
    "openscad_code": "// Puck with rounded edges and central hole\n$fn=50;\npuck_thin();\n\nmodule puck_thin() {\n    difference() {\n        // Main puck body with rounded edges\n        minkowski() {\n            cylinder(h=8, r=32-2, center=true);\n            sphere(2);\n        }\n        \n        // Central hole\n        cylinder(h=10, r=8, center=true);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "puck_large",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Puck large â 80 mm diameter, 25 mm thick with rounded top/bottom edges\npuck_d = 80;\npuck_h = 25;\nedge_r = 3;\n\n// Main puck body\ndifference() {\n    cylinder(h = puck_h, r = puck_d/2, center = true);\n    \n    // Rounded top edge\n    translate([0, 0,  puck_h/2 - edge_r])\n        cylinder(h = edge_r + 1, r1 = puck_d/2 - edge_r, r2 = puck_d/2, center = true);\n\n    // Rounded bottom edge\n    translate([0, 0, -puck_h/2 + edge_r])\n        cylinder(h = edge_r + 1, r1 = puck_d/2, r2 = puck_d/2 - edge_r, center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "puck_small",
    "openscad_code": "// Puck with rounded top/bottom edges\nr = 25;\nh = 15;\nfillet = 2;\n\ndifference() {\n    union() {\n        cylinder(h=h-fillet*2, r=r, $fn=64);\n        translate([0,0,(h-fillet*2)/2])\n            cylinder(h=fillet*2, r1=r, r2=r-fillet, $fn=64);\n        translate([0,0,-(h-fillet*2)/2])\n            cylinder(h=fillet*2, r1=r-fillet, r2=r, $fn=64);\n    }\n    cylinder(h=h+1, r=r-2, center=true, $fn=64);\n}",
    "renders": true
  },
  {
    "basic_shape": "puck_with_hole",
    "openscad_code": "$fn = 50;\n\n// Puck dimensions\npuck_r = 25;\npuck_h = 15;\nhole_r = 8;\nfillet_r = 2;\n\n// Main puck body with rounded top/bottom edges\ndifference() {\n    union() {\n        // Cylindrical core\n        cylinder(h = puck_h - 2*fillet_r, r = puck_r);\n        \n        // Top rounded edge\n        translate([0, 0, puck_h/2 - fillet_r])\n            cylinder(h = fillet_r, r1 = puck_r, r2 = puck_r - fillet_r);\n        \n        // Bottom rounded edge\n        translate([0, 0, -puck_h/2 + fillet_r])\n            cylinder(h = fillet_r, r1 = puck_r - fillet_r, r2 = puck_r);\n    }\n    \n    // Central hole\n    cylinder(h = puck_h + 1, r = hole_r);\n}",
    "renders": true
  },
  {
    "basic_shape": "puck_rounded",
    "openscad_code": "// Rounded puck: 80 mm diameter, 25 mm thick, 3 mm rounded edges\n\npuck_height = 25;\npuck_diameter = 80;\nround_radius = 3;\n\ndifference() {\n    // Main body with rounded top/bottom\n    union() {\n        cylinder(h = puck_height - 2*round_radius, \n                 d1 = puck_diameter - 2*round_radius, \n                 d2 = puck_diameter - 2*round_radius, \n                 center = true);\n\n        // Top roundover\n        translate([0, 0, (puck_height - 2*round_radius)/2])\n            cylinder(h = round_radius, \n                     r1 = puck_diameter/2 - round_radius, \n                     r2 = puck_diameter/2, \n                     center = false);\n\n        // Bottom roundover\n        translate([0, 0, -(puck_height - 2*round_radius)/2 - round_radius])\n            cylinder(h = round_radius, \n                     r1 = puck_diameter/2, \n                     r2 = puck_diameter/2 - round_radius, \n                     center = false);\n    }\n\n    // Optional center hole (remove to make solid)\n    // cylinder(h = puck_height + 2, d = 10, center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "bead",
    "openscad_code": "// Rounded-edge cube bead\n$fn = 32;\n\n// Main cube with rounded edges\nminkowski() {\n    cube([60, 60, 60], center = true);\n    sphere(r = 5);\n}\n\n// Center hole\ndifference() {\n    children();\n    cylinder(h = 100, r = 8, center = true);\n    rotate([90, 0, 0]) cylinder(h = 100, r = 8, center = true);\n}",
    "renders": true
  },
  {
    "basic_shape": "bead_spherical",
    "openscad_code": "// bead_spherical.scad\n\n// Basic bead with rounded equatorial ridge\n// 90 mm diameter, 15 mm central hole\n\nmodule bead_spherical() {\n    difference() {\n        // Outer sphere\n        sphere(d=90, $fn=100);\n        \n        // Central hole\n        cylinder(h=100, d=15, center=true, $fn=50);\n    }\n    \n    // Equatorial ridge\n    translate([0, 0, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=5, d1=92, d2=92, center=true, $fn=100);\n        cylinder(h=6, d1=90, d2=90, center=true, $fn=100);\n    }\n}\n\nbead_spherical();",
    "renders": true
  },
  {
    "basic_shape": "bead_cylindrical",
    "openscad_code": "// Bead with rounded edges\n$fn = 32;\n\n// Main bead body\ndifference() {\n    // Outer rounded cylinder\n    minkowski() {\n        cylinder(h=30, r=20, center=true);\n        sphere(r=5);\n    }\n    \n    // Central hole\n    rotate([90, 0, 0])\n        cylinder(h=50, r=5, center=true);\n    \n    // Groove for string\n    rotate([0, 90, 0])\n        difference() {\n            cylinder(h=40, r=23, center=true);\n            cylinder(h=42, r=21, center=true);\n        }\n}",
    "renders": true
  },
  {
    "basic_shape": "bead_with_hole",
    "openscad_code": "// Bead with hole - medium complexity\n// Rounded bead with central hole\n\n// Main bead body - rounded cylinder\nmodule rounded_bead() {\n    difference() {\n        // Main bead - rounded cylinder\n        cylinder(h=40, r=25, $fn=50);\n        translate([0, 0, -1])\n            cylinder(h=42, r=22, $fn=50);\n        \n        // Top and bottom rounding\n        translate([0, 0, 40])\n            sphere(r=25, $fn=50);\n        translate([0, 0, 0])\n            sphere(r=25, $fn=50);\n    }\n}\n\n// Central hole\ntranslate([0, 0, 20])\n    rotate([90, 0, 0])\n    cylinder(h=60, r=6, $fn=30);\n\n// Create the bead\ntranslate([0, 0, 25])\n    rounded_bead();",
    "renders": true
  },
  {
    "basic_shape": "bead_rounded",
    "openscad_code": "// Rounded bead (sphere with beveled hole)\n$fn = 64;\n\n// Main bead body\ndifference() {\n    // Smooth sphere\n    sphere(30);\n    \n    // Beveled entry hole\n    translate([0, 0, -30])\n        cylinder(h=60, r1=8, r2=4);\n    \n    // Beveled exit hole\n    translate([0, 0, -30])\n        rotate([0, 180, 0])\n            cylinder(h=60, r1=8, r2=4);\n}\n\n// Optional chamfer for thread protection\ndifference() {\n    union() {\n        // Original bead\n        sphere(30);\n    }\n    \n    // Top outer chamfer\n    translate([0, 0, 25])\n        cylinder(h=5, r1=32, r2=28);\n    \n    // Bottom outer chamfer\n    translate([0, 0, -30])\n        cylinder(h=5, r1=28, r2=32);\n}",
    "renders": true
  },
  {
    "basic_shape": "slug",
    "openscad_code": "// slug - medium complexity geometric form\n// rounded rectangular body with simple segments\n\n$fn = 32;\n\n// main rounded body\nminkowski() {\n    cube([60, 25, 15], center = true);\n    sphere(5);\n}\n\n// head segment\ntranslate([30, 0, 0])\n    minkowski() {\n        cube([20, 25, 15], center = true);\n        sphere(5);\n    }\n\n// tail segment\ntranslate([-30, 0, 0])\n    minkowski() {\n        cube([20, 20, 13], center = true);\n        sphere(5);\n    }",
    "renders": true
  },
  {
    "basic_shape": "slug_small",
    "openscad_code": "// slug_small - medium complexity\n// Basic slug shape with rounded edges\n\n$fn = 50;\n\nunion() {\n    // Main body - rounded cylinder\n    cylinder(h = 80, r = 30);\n    \n    // Rounded head\n    translate([0, 0, 80])\n        sphere(r = 30);\n    \n    // Tail taper\n    translate([0, 0, -15])\n        cylinder(h = 15, r1 = 30, r2 = 20);\n}",
    "renders": true
  },
  {
    "basic_shape": "slug_large",
    "openscad_code": "// Slug_large â rounded rectangular bar with shallow rounded grooves\n$fn = 32;\n\nlength = 120;\nwidth  = 40;\nheight = 30;\nedge_r = 5;\ngroove_r = 3;\ngroove_d = 4;\n\ndifference() {\n    // main rounded block\n    minkowski() {\n        cube([length - 2*edge_r, width - 2*edge_r, height - 2*edge_r], center = true);\n        sphere(r = edge_r);\n    }\n\n    // shallow grooves along top\n    for (x = [-length/3, 0, length/3]) {\n        translate([x, 0, height/2 - groove_r/2 + 0.1])\n            rotate([90, 0, 0])\n                cylinder(h = width + 1, r = groove_r, center = true);\n    }\n}",
    "renders": true
  },
  {
    "basic_shape": "slug_round",
    "openscad_code": "// slug_round - medium complexity\n$fn = 40;\n\n// Main body cylinder with rounded ends\nhull() {\n    translate([0, 0, 5])\n        sphere(25);\n    translate([0, 0, 95])\n        sphere(25);\n}\n\n// Flatten bottom slightly for stability\ndifference() {\n    children();\n    translate([0, 0, -1])\n        cube([100, 100, 10], center = true);\n}\n\n// Gentle rounding along edges\nminkowski() {\n    cylinder(h = 90, r = 23, center = true);\n    sphere(2);\n}",
    "renders": true
  },
  {
    "basic_shape": "slug_oblong",
    "openscad_code": "// slug_oblong - medium complexity with rounded edges and slight taper\nlength = 100;\nwidth = 40;\nheight = 30;\nround_r = 5;\ntaper = 0.9;\n\ndifference() {\n    hull() {\n        translate([round_r, 0, 0])\n            cylinder(h=height, r1=width/2, r2=width/2*taper, $fn=30);\n        translate([length - round_r, 0, 0])\n            cylinder(h=height, r1=width/2*taper, r2=width/2*taper*taper, $fn=30);\n    }\n    \n    translate([round_r, 0, -1])\n        cube([length - 2*round_r, width + 2, height + 2]);\n    \n    translate([round_r, 0, height - round_r])\n        cube([length - 2*round_r, width + 2, round_r + 1]);\n}",
    "renders": true
  },
  {
    "basic_shape": "plug",
    "openscad_code": "// Medium-complexity plug\n// Main body with rounded edges and a keying tab\n\n// Parameters\nbody_d = 25;\nbody_h = 40;\npin_d = 8;\npin_h = 15;\nfillet_r = 3;\n\n// Main body with rounded top\nunion() {\n    // Cylindrical body\n    difference() {\n        cylinder(h = body_h, r = body_d/2, $fn = 32);\n        // Top rounding\n        translate([0, 0, body_h - fillet_r])\n            sphere(r = fillet_r, $fn = 32);\n    }\n    \n    // Keying tab\n    translate([0, body_d/2, body_h/2])\n        rotate([90, 0, 0])\n            cylinder(h = 5, r = 4);\n    \n    // Center pin\n    translate([0, 0, -pin_h])\n        cylinder(h = pin_h, r = pin_d/2, $fn = 24);\n}",
    "renders": false
  },
  {
    "basic_shape": "plug_round",
    "openscad_code": "// Basic rounded plug with shaft and collar\n$fn = 32;\n\n// Main shaft (hollow cylinder)\ndifference() {\n    cylinder(h = 40, r = 15);\n    cylinder(h = 45, r = 11);\n}\n\n// Rounded tip (hemisphere)\ntranslate([0, 0, 40])\n    sphere(r = 15);\n\n// Collar ring\ntranslate([0, 0, 10])\n    cylinder(h = 8, r1 = 20, r2 = 18);\n\n// Grip rings\nfor(i = [0:1:2]) {\n    translate([0, 0, 18 + i*6])\n        cylinder(h = 2, r = 17.5);\n}",
    "renders": false
  },
  {
    "basic_shape": "plug_hexagonal",
    "openscad_code": "// Hexagonal plug with rounded top\n$fn = 36;\n\nhex_r = 25;\nheight = 40;\nround_r = 8;\ncore_d = 20;\n\ndifference() {\n    // Main body\n    cylinder(h = height - round_r, r = hex_r);\n    translate([0, 0, height - round_r])\n        cylinder(h = round_r, r1 = hex_r, r2 = hex_r * 0.8);\n    \n    // Chamfer bottom\n    translate([0, 0, -1])\n        cylinder(h = 2, r1 = hex_r * 1.05, r2 = hex_r * 0.9);\n    \n    // Center hole\n    translate([0, 0, -1])\n        cylinder(h = height + 2, r = core_d / 2);\n}",
    "renders": false
  },
  {
    "basic_shape": "plug_with_slot",
    "openscad_code": "// plug_with_slot â 15 mm thick disk with rounded edges and a 6 mm wide slot across the top\n// overall Ã60 mm\n\nr = 30;          // disk radius\nh = 15;          // disk thickness\ns = 6;           // slot width\nf = 2;           // edge-rounding radius\n\ndifference() {\n    // main disk with rounded edges\n    minkowski() {\n        cylinder(h = h - 2*f, r = r - f, $fn = 60);\n        sphere(f, $fn = 30);\n    }\n\n    // slot cut across top\n    translate([-r-1, -s/2, h-0.1])\n        cube([2*r+2, s, 1]);\n}",
    "renders": false
  },
  {
    "basic_shape": "plug_hollow",
    "openscad_code": "// plug_hollow - hollow cylinder with rounded edges and internal cavity\ndifference() {\n    // outer shell with rounded ends\n    union() {\n        cylinder(h=100, r=25, $fn=100);\n        translate([0,0,-0.01]) sphere(r=25, $fn=100);\n        translate([0,0,100]) sphere(r=25, $fn=100);\n    }\n    \n    // inner cavity\n    translate([0,0,-1]) cylinder(h=102, r=20, $fn=100);\n    \n    // bottom opening\n    translate([0,0,0]) cylinder(h=5, r=22, $fn=100);\n    \n    // top opening\n    translate([0,0,95]) cylinder(h=5, r=22, $fn=100);\n}",
    "renders": false
  },
  {
    "basic_shape": "plug_tapered",
    "openscad_code": "// Tapered plug with rounded edges (medium complexity)\n// Overall dimensions: 80mm long, 40mm base diameter tapering to 20mm\n\n$fn = 64;\n\n// Main tapered body\ncylinder(h=70, r1=20, r2=10, center=false);\n\n// Rounded top cap\ntranslate([0, 0, 70])\n    sphere(r=10);\n\n// Flared base section\ntranslate([0, 0, -10])\n    cylinder(h=10, r1=20, r2=20);\n\n// Rounded bottom edge\ntranslate([0, 0, -10])\n    sphere(r=20);\n\n// Central alignment hole (optional)\ndifference() {\n    union() {\n        cylinder(h=70, r1=20, r2=10, center=false);\n        translate([0, 0, 70])\n            sphere(r=10);\n        translate([0, 0, -10])\n            cylinder(h=10, r1=20, r2=20);\n        translate([0, 0, -10])\n            sphere(r=20);\n    }\n    // Small central hole\n    translate([0, 0, -15])\n        cylinder(h=90, r=5, center=false);\n}",
    "renders": false
  },
  {
    "basic_shape": "disc",
    "openscad_code": "// Disc with rounded top/bottom edges\n$fn = 32;\n\nd = 100;         // diameter\nt = 10;          // thickness\nr = 2;           // rounding radius\n\ndifference() {\n    // main disc body\n    cylinder(h = t, r = d/2, center = true);\n\n    // top edge rounding\n    translate([0, 0, t/2 - r])\n        cylinder(h = r + 1, r1 = d/2 - r, r2 = d/2, center = false);\n\n    // bottom edge rounding\n    translate([0, 0, -t/2 + r])\n        cylinder(h = r + 1, r1 = d/2, r2 = d/2 - r, center = false);\n}",
    "renders": false
  },
  {
    "basic_shape": "disc_flat",
    "openscad_code": "// disc_flat with rounded edges\n$fn = 50;  // smooth curves\n\ndisc_diameter = 100;\ndisc_height   = 10;\nedge_radius   = 3;\n\n// main disc body\ndifference() {\n    cylinder(h = disc_height, r = disc_diameter/2, center = true);\n\n    // round top edge\n    translate([0, 0, disc_height/2 - edge_radius])\n        cylinder(h = edge_radius + 0.1, r1 = disc_diameter/2 - edge_radius, r2 = disc_diameter/2, center = false);\n\n    // round bottom edge\n    mirror([0, 0, 1])\n        translate([0, 0, disc_height/2 - edge_radius])\n            cylinder(h = edge_radius + 0.1, r1 = disc_diameter/2 - edge_radius, r2 = disc_diameter/2, center = false);\n}",
    "renders": false
  },
  {
    "basic_shape": "disc_rounded",
    "openscad_code": "// Rounded disc with medium complexity\n// Diameter 100mm, thickness 20mm\n\n$fn = 32;\n\n// Main disc body\ndifference() {\n    cylinder(h = 20, r = 50);\n    \n    // Top chamfer\n    translate([0, 0, 19.9])\n        cylinder(h = 2, r1 = 50, r2 = 45);\n    \n    // Bottom chamfer\n    translate([0, 0, -2])\n        cylinder(h = 2, r1 = 45, r2 = 50);\n}\n\n// Top edge rounding\ntranslate([0, 0, 20])\n    rotate_extrude()\n        translate([50, 0, 0])\n            circle(r = 2);\n\n// Bottom edge rounding\ntranslate([0, 0, 0])\n    rotate_extrude()\n        translate([50, 0, 0])\n            circle(r = 2);",
    "renders": false
  },
  {
    "basic_shape": "disc_with_hole",
    "openscad_code": "// Disc with central hole and rounded edges\n$fn = 64;\n\nmodule disc_with_hole() {\n    disc_d = 80;\n    disc_h = 8;\n    hole_d = 20;\n    round_r = 1.5;\n    \n    difference() {\n        // Main disc with rounded top and bottom\n        union() {\n            // Center cylinder\n            cylinder(h=disc_h-2*round_r, r=disc_d/2-round_r);\n            \n            // Top rounded edge\n            translate([0, 0, disc_h-round_r])\n            cylinder(h=round_r, r1=disc_d/2-round_r, r2=disc_d/2);\n            \n            // Bottom rounded edge\n            translate([0, 0, -round_r])\n            cylinder(h=round_r, r1=disc_d/2, r2=disc_d/2-round_r);\n        }\n        \n        // Central hole\n        cylinder(h=disc_h+1, r=hole_d/2);\n    }\n}\n\ndisc_with_hole();",
    "renders": false
  },
  {
    "basic_shape": "disc_thick",
    "openscad_code": "// disc_thick: 80 mm diameter, 10 mm thick, rounded top & bottom edges\n$fn = 36;\n\ndisc_r = 40;\ndisc_h = 10;\nedge_r = 2;\n\ndifference() {\n    cylinder(h = disc_h, r = disc_r);\n\n    // round top edge\n    translate([0, 0, disc_h - edge_r])\n        cylinder(h = edge_r + 0.1, r = disc_r - edge_r);\n\n    // round bottom edge\n    translate([0, 0, -0.1])\n        cylinder(h = edge_r + 0.1, r = disc_r - edge_r);\n}\n\n// optional center hole (Ã8 mm)\ntranslate([0, 0, -1])\n    cylinder(h = disc_h + 2, r = 4);",
    "renders": false
  },
  {
    "basic_shape": "disc_thin",
    "openscad_code": "// Thin disc with rounded edges and central hole\n$fn = 50;\n\ndiameter = 100;\nthickness = 4;\nedge_radius = 2;\nhole_diameter = 20;\n\ndifference() {\n    // Main disc body with rounded top and bottom edges\n    union() {\n        // Cylindrical core\n        cylinder(h = thickness - 2*edge_radius, r = diameter/2 - edge_radius, center = true);\n        \n        // Top rounded edge\n        translate([0, 0, (thickness - 2*edge_radius)/2])\n            cylinder(h = edge_radius, r1 = diameter/2 - edge_radius, r2 = diameter/2, center = false);\n        \n        // Bottom rounded edge\n        translate([0, 0, -(thickness - 2*edge_radius)/2 - edge_radius])\n            cylinder(h = edge_radius, r1 = diameter/2, r2 = diameter/2 - edge_radius, center = false);\n    }\n    \n    // Central hole\n    cylinder(h = thickness + 1, r = hole_diameter/2, center = true);\n}",
    "renders": false
  },
  {
    "basic_shape": "disc_large",
    "openscad_code": "difference() {\n    // Main disc body\n    cylinder(h = 8, r = 60, $fn = 100);\n    \n    // Center hole\n    cylinder(h = 10, r = 15, $fn = 60);\n    \n    // Rounded top edge\n    translate([0, 0, 8])\n        rotate_extrude($fn = 100)\n            translate([60, 0, 0])\n                circle(r = 2, $fn = 30);\n    \n    // Rounded bottom edge\n    translate([0, 0, 0])\n        rotate_extrude($fn = 100)\n            translate([60, 0, 0])\n                circle(r = 2, $fn = 30);\n}",
    "renders": false
  },
  {
    "basic_shape": "disc_small",
    "openscad_code": "// Disc with rounded edges\n$fn = 50;\n\ndifference() {\n    // Main disc\n    cylinder(h = 10, r = 60);\n    \n    // Top chamfer\n    translate([0, 0, 10])\n    cylinder(h = 2, r1 = 60, r2 = 54);\n    \n    // Bottom chamfer\n    translate([0, 0, -2])\n    cylinder(h = 2, r1 = 54, r2 = 60);\n}\n\n// Central hole\ntranslate([0, 0, -1])\ncylinder(h = 12, r = 8);",
    "renders": false
  },
  {
    "basic_shape": "dome",
    "openscad_code": "// Rounded-edge dome: hemisphere with chamfered base\n$fn = 64;\n\nr = 40;\nchamfer = 3;\n\ndifference() {\n    // Main dome\n    sphere(r = r);\n\n    // Flatten bottom\n    translate([0, 0, -r])\n        cube([r*2, r*2, r], center = true);\n\n    // Chamfer base edge\n    translate([0, 0, -r + chamfer])\n        cylinder(h = r, r1 = r - chamfer, r2 = r, center = true);\n}",
    "renders": false
  },
  {
    "basic_shape": "dome_high",
    "openscad_code": "// dome_high: 90 mm diameter, 60 mm tall, hollow with 3 mm wall\n// medium complexity: rounded top edge and stepped base\n\n// main dome shell\ndifference() {\n    sphere(d=90, $fn=128);\n\n    // hollow interior\n    translate([0,0,-3])\n        sphere(d=90-6, $fn=128);\n\n    // flatten bottom\n    translate([0,0,-30])\n        cube([100,100,60], center=true);\n}\n\n// stepped base ring for stability\ndifference() {\n    cylinder(h=8, d1=94, d2=90, $fn=128);\n    cylinder(h=9, d=86, $fn=128);\n}\n\n// rounded top edge\ntranslate([0,0,27])\n    cylinder(h=3, d1=90, d2=86, $fn=128);",
    "renders": false
  },
  {
    "basic_shape": "dome_low",
    "openscad_code": "// Dome with rounded base edge\n// Overall height 60 mm, base diameter 100 mm\n\n$fa = 2;\n$fs = 0.5;\n\n// Main dome\nsphere(d = 100);\n\n// Rounded base ring (torus section)\ntranslate([0, 0, -5])\nrotate_extrude(angle = 180)\ntranslate([50 - 5, 0, 0])\ncircle(r = 5);\n\n// Flatten bottom slightly for stability\ndifference() {\n    sphere(d = 100);\n    translate([0, 0, -10])\n    cube([200, 200, 20], center = true);\n}",
    "renders": false
  },
  {
    "basic_shape": "dome_wide",
    "openscad_code": "// Dome wide - medium complexity\n// Rounded edges and slight flattening for a modern look\n\n$fn = 64;\n\ndome_diameter = 100;\ndome_height = 50;\nedge_radius = 5;\n\n// Main dome body\ndifference() {\n    // Rounded dome shape\n    intersection() {\n        sphere(d = dome_diameter);\n        \n        // Flatten top slightly\n        translate([0, 0, -dome_height/3])\n            cube([dome_diameter*2, dome_diameter*2, dome_height*2], center=true);\n    }\n    \n    // Cut bottom flat\n    translate([0, 0, -dome_height/2])\n        cube([dome_diameter*2, dome_diameter*2, dome_height], center=true);\n}\n\n// Rounded base ring\ntranslate([0, 0, -dome_height/2])\n    difference() {\n        cylinder(h = edge_radius*2, r1 = dome_diameter/2, r2 = dome_diameter/2 + edge_radius);\n        \n        // Hollow center\n        cylinder(h = edge_radius*2, r1 = dome_diameter/2 - edge_radius, r2 = dome_diameter/2);\n    }",
    "renders": false
  },
  {
    "basic_shape": "dome_narrow",
    "openscad_code": "// Dome_narrow â medium complexity\n// Rounded-edge dome, 100 mm tall Ã 60 mm wide\n\n// Main dome\nsphere(d=60, $fn=60);\n\n// Thin cylindrical base to narrow the footprint\ndifference() {\n    cylinder(h=10, d1=60, d2=50, $fn=60);\n    translate([0,0,-1]) cylinder(h=12, d=48, $fn=60);\n}\n\n// Optional: slight flattening at top for a soft flat spot\ntranslate([0,0,49.5]) sphere(d=20, $fn=60);",
    "renders": false
  },
  {
    "basic_shape": "dome_flat",
    "openscad_code": "// Dome with flat top\n$fn = 32;\n\n// Main dome\ndifference() {\n    sphere(d = 100);\n    translate([0, 0, 30])\n        cube(120, center = true);\n}\n\n// Rounded edge ring\ntranslate([0, 0, 30])\n    rotate_extrude()\n        translate([50, 0])\n            circle(r = 5);\n\n// Small base ring\ntranslate([0, 0, 5])\n    cylinder(h = 5, r1 = 50, r2 = 50);\n\n// Center marker dot\ntranslate([0, 0, 31])\n    cylinder(h = 1, r = 3);",
    "renders": false
  },
  {
    "basic_shape": "dome_steep",
    "openscad_code": "// dome_steep - medium complexity\n// Steep dome (hemisphere) with rounded edge at equator\n\ndiameter = 100;\nradius = diameter/2;\nedge_radius = 5;\n\ndifference() {\n    // Main dome\n    sphere(r = radius);\n\n    // Cut bottom half to make dome\n    translate([0, 0, -radius])\n        cube([diameter*2, diameter*2, radius], center = true);\n\n    // Remove sharp edge at equator\n    translate([0, 0, 0.1])\n        cylinder(h = edge_radius*2, r = radius + edge_radius, center = true);\n\n    // Add rounded edge\n    translate([0, 0, 0])\n        cylinder(h = edge_radius*2, r = radius - edge_radius, center = true);\n}\n\n// Rounded edge ring\ntranslate([0, 0, 0])\n    torus(r1 = radius, r2 = edge_radius);\n\nmodule torus(r1, r2) {\n    rotate_extrude()\n        translate([r1, 0, 0])\n            circle(r = r2);\n}",
    "renders": false
  },
  {
    "basic_shape": "dome_hollow",
    "openscad_code": "// hollow dome with rounded rim\n$fn = 50;\n\nouter_r = 50;\nwall = 3;\nheight = 40;\nrim_rad = 2;\n\ndifference() {\n    // outside dome\n    intersection() {\n        sphere(outer_r);\n        translate([0, 0, -outer_r + height])\n            cube([outer_r*2, outer_r*2, outer_r], center = true);\n    }\n    \n    // inside hollow\n    intersection() {\n        sphere(outer_r - wall);\n        translate([0, 0, -outer_r + wall + height])\n            cube([(outer_r - wall)*2, (outer_r - wall)*2, outer_r], center = true);\n    }\n    \n    // round the rim\n    translate([0, 0, height - rim_rad])\n        minkowski() {\n            cylinder(h = 1, r = outer_r - rim_rad);\n            sphere(rim_rad);\n        }\n}",
    "renders": false
  },
  {
    "basic_shape": "dome_with_base",
    "openscad_code": "// Dome with base\ndome_h = 40;\nbase_h = 20;\ndia = 80;\nfillet = 5;\n\n$fn = 48;\n\ndifference() {\n    union() {\n        // Base cylinder\n        cylinder(h = base_h, r = dia/2);\n        \n        // Dome sphere\n        translate([0, 0, base_h])\n            sphere(r = dome_h);\n    }\n    \n    // Remove bottom half of sphere\n    translate([0, 0, base_h - 0.1])\n        cube([dia*2, dia*2, dome_h + 0.2], center = true);\n    \n    // Add fillet around base edge\n    translate([0, 0, base_h - fillet])\n        cylinder(h = fillet + 0.1, r = dia/2 - fillet);\n}",
    "renders": false
  },
  {
    "basic_shape": "bump",
    "openscad_code": "// Medium-complexity bump: rounded-top cylinder on a thin base plate\n// Overall footprint 80Ã80 mm, height 40 mm\n\nmodule roundedTop(h, r) {\n    // Build half-sphere cap on cylinder\n    cylinder(h=h-2*r, r=r, $fn=60);\n    translate([0,0,h-2*r])\n        sphere(r=r, $fn=60);\n}\n\ndifference() {\n    union() {\n        // Thin base plate\n        cube([80,80,5], center=true);\n        \n        // Central bump with rounded top\n        translate([0,0,2.5+18])\n            roundedTop(35, 30);\n    }\n    \n    // Optional light chamfer on base edges\n    for(x=[-1,1])\n        for(y=[-1,1])\n            translate([x*35, y*35, -1])\n                cube([10,10,7], center=true);\n}",
    "renders": false
  },
  {
    "basic_shape": "bump_small",
    "openscad_code": "$fn = 32;\n\ndifference() {\n    union() {\n        // main dome\n        sphere(d = 60);\n        \n        // flat base plate\n        translate([0, 0, -5])\n            cylinder(h = 10, r = 30);\n    }\n    \n    // hollow cavity\n    sphere(d = 50);\n    \n    // mounting hole\n    cylinder(h = 30, r = 6);\n}",
    "renders": false
  },
  {
    "basic_shape": "bump_large",
    "openscad_code": "// bump_large - medium complexity rounded dome\nmodule bump_large(height = 80, radius = 60) {\n    difference() {\n        // main rounded cap\n        union() {\n            cylinder(h = height * 0.6, r1 = radius, r2 = radius * 0.8, $fn = 48);\n            sphere(r = radius, $fn = 48);\n        }\n        // flatten top slightly\n        translate([0, 0, height * 0.5])\n            cylinder(h = radius, r = radius * 0.8, $fn = 48);\n    }\n}\n\nbump_large();",
    "renders": false
  },
  {
    "basic_shape": "bump_round",
    "openscad_code": "// bump_round: a rounded cylinder with a hemispherical dome on top\n$fn=32;\n\n// Main cylinder body with rounded edges\ndifference() {\n    // Full rounded shape\n    union() {\n        cylinder(h=60, r=30);\n        translate([0,0,60]) sphere(r=30);\n    }\n    \n    // Remove bottom half-sphere to flatten base\n    translate([0,0,-30]) sphere(r=30);\n}\n\n// Add small radius edge rounding at top transition\ndifference() {\n    translate([0,0,60]) sphere(r=30);\n    translate([0,0,60-2]) sphere(r=28);\n}",
    "renders": false
  },
  {
    "basic_shape": "bump_oval",
    "openscad_code": "// bump_oval.scad\n// Medium-complexity oval with rounded top \"bump\"\n\nlength = 100;\nwidth  = 60;\nheight = 40;\ndome_h = 15;\nfillet = 5;\n\ndifference() {\n    // main rounded base\n    minkowski() {\n        scale([1, width/length, 1])\n            cylinder(h=height - fillet, r=length/2 - fillet, $fn=64);\n        sphere(fillet, $fn=32);\n    }\n\n    // slight hollow to emphasize bump\n    translate([0, 0, height + dome_h/2])\n        scale([1, width/length, 0.5])\n            sphere(r=length/2 - 2 * fillet, $fn=64);\n}\n\n// top bump dome\ntranslate([0, 0, height - fillet])\n    scale([1, width/length, 0.75])\n        sphere(r=length/2, $fn=64);",
    "renders": false
  },
  {
    "basic_shape": "bump_raised",
    "openscad_code": "// bump_raised â medium complexity\nmodule bump_raised() {\n    // main dome\n    sphere(d = 40, $fn = 32);\n\n    // low rounded base\n    translate([0, 0, -2])\n        cylinder(h = 4, r1 = 22, r2 = 20, $fn = 32);\n\n    // gentle top fillet\n    difference() {\n        translate([0, 0, -0.5])\n            cylinder(h = 2, r1 = 18, r2 = 20, $fn = 32);\n        translate([0, 0, 2])\n            sphere(d = 40, $fn = 32);\n    }\n}\n\nbump_raised();",
    "renders": false
  },
  {
    "basic_shape": "indent",
    "openscad_code": "// Rectangular indent with rounded bottom\nmodule rounded_indent(w=80, d=60, h=20, r=8) {\n    difference() {\n        // Outer block\n        cube([w, d, h], center=true);\n        \n        // Indent cavity with rounded bottom\n        translate([0, 0, h/2 - r])\n        minkowski() {\n            cube([w-10, d-10, h-r], center=true);\n            sphere(r=r);\n        }\n        \n        // Flat top edge\n        translate([0, 0, h/2 + 0.1])\n        cube([w+2, d+2, 2], center=true);\n    }\n}\n\nrounded_indent();",
    "renders": false
  },
  {
    "basic_shape": "indent_small",
    "openscad_code": "module indent_small() {\n    // main block with rounded indent\n    difference() {\n        cube([60, 40, 25], center=true);\n        \n        // rounded indent on top face\n        translate([0, 0, 12.5])\n            cylinder(h=15, r1=20, r2=15, $fn=32);\n        \n        // chamfer edges of indent\n        translate([0, 0, 13])\n            cylinder(h=12, r1=18, r2=22, $fn=32);\n    }\n    \n    // optional small relief hole at bottom of indent\n    translate([0, 0, 12.5])\n        cylinder(h=5, r=5, $fn=16);\n}\n\nindent_small();",
    "renders": false
  },
  {
    "basic_shape": "indent_large",
    "openscad_code": "// Large indent block with rounded edges and shallow cavity\n$fn = 32;\n\ndifference() {\n    // Main block with rounded edges\n    minkowski() {\n        cube([80, 80, 40], center = true);\n        sphere(5);\n    }\n    \n    // Shallow rectangular cavity\n    translate([0, 0, 5])\n        cube([60, 60, 10], center = true);\n    \n    // Corner fillets for cavity\n    for (x = [-25, 25])\n    for (y = [-25, 25])\n        translate([x, y, 0])\n            cylinder(h=50, r=8, center=true);\n}",
    "renders": false
  },
  {
    "basic_shape": "indent_round",
    "openscad_code": "// indent_round - medium complexity\n$fn = 32;\n\n// Main disc\ndifference() {\n    cylinder(h = 10, r = 50);\n\n    // Central indent\n    translate([0, 0, -1])\n        cylinder(h = 12, r = 25);\n\n    // Edge fillet removal\n    translate([0, 0, 10])\n        cylinder(h = 5, r1 = 50, r2 = 45);\n}\n\n// Bottom chamfer ring\ntranslate([0, 0, -1])\n    cylinder(h = 2, r1 = 50, r2 = 48);",
    "renders": false
  },
  {
    "basic_shape": "indent_square",
    "openscad_code": "// indent_square.scad\n// Square base with rounded top edges and a centered square indent\n\nbase_size = 80;\nheight = 30;\nround_r = 5;\nindent_size = 40;\nindent_depth = 10;\n\ndifference() {\n    // main block with rounded top edges\n    minkowski() {\n        cube([base_size, base_size, height - round_r], center = true);\n        sphere(r = round_r, $fn = 20);\n    }\n    \n    // square indent on top\n    translate([0, 0, height/2 - indent_depth/2])\n        cube([indent_size, indent_size, indent_depth + 0.1], center = true);\n}",
    "renders": false
  },
  {
    "basic_shape": "indent_deep",
    "openscad_code": "// Rectangular indent with rounded bottom and chamfered entry\ndifference() {\n    cube([80, 80, 40], center=true);\n    \n    translate([0, 0, 5])\n        minkowski() {\n            cube([60, 60, 30], center=true);\n            sphere(r=5);\n        }\n    \n    translate([0, 0, 20])\n        cylinder(h=20, r1=35, r2=30, center=true);\n}",
    "renders": false
  },
  {
    "basic_shape": "indent_shallow",
    "openscad_code": "// Shallow rectangular indent with rounded edges\n$fn = 32;\n\n// Base plate\nplate_thickness = 10;\nplate_size = [80, 60, plate_thickness];\n\n// Indent dimensions\nindent_depth = 3;\nindent_size = [60, 40, indent_depth];\ncorner_radius = 5;\n\n// Create base\ndifference() {\n    cube(plate_size, center = true);\n    \n    // Rounded rectangular indent\n    translate([0, 0, plate_thickness/2 - indent_depth/2])\n    minkowski() {\n        cube([indent_size.x - 2*corner_radius, \n              indent_size.y - 2*corner_radius, \n              indent_depth + 1], center = true);\n        cylinder(r = corner_radius, h = 0.01, center = true);\n    }\n}",
    "renders": false
  },
  {
    "basic_shape": "nozzle",
    "openscad_code": "// Nozzle â medium complexity with rounded edges\n$fn = 32;\n\n// Main body\ndifference() {\n    union() {\n        // Cylindrical base\n        cylinder(h = 20, r = 30);\n\n        // Tapered neck\n        translate([0, 0, 20])\n            cylinder(h = 30, r1 = 30, r2 = 15);\n    }\n    \n    // Central bore\n    cylinder(h = 50, r = 8);\n}\n\n// Rounded tip\ntranslate([0, 0, 50])\n    sphere(r = 15);\n\n// Mounting flange\ntranslate([0, 0, 0])\n    difference() {\n        cylinder(h = 8, r = 40);\n        cylinder(h = 9, r = 25);\n    }",
    "renders": false
  },
  {
    "basic_shape": "nozzle_tapered",
    "openscad_code": "difference() {\n    // Main tapered nozzle body\n    cylinder(h1 = 80, r1 = 25, r2 = 8, $fn = 36);\n    \n    // Central bore\n    translate([0, 0, -1])\n        cylinder(h = 82, r1 = 12, r2 = 4, $fn = 36);\n    \n    // Fillet at base\n    translate([0, 0, 0])\n        rotate_extrude(angle = 90, $fn = 36)\n            translate([25, 0])\n                circle(r = 5);\n    \n    // Rounded tip\n    translate([0, 0, 80])\n        sphere(r = 8, $fn = 36);\n}",
    "renders": false
  },
  {
    "basic_shape": "nozzle_straight",
    "openscad_code": "// Straight nozzle with rounded inlet/outlet\n// Length 80 mm, inlet 25 mm, outlet 12 mm\n\n$fn = 32;\n\nmodule nozzle_straight() {\n    // Main body: cylinder with rounded edges\n    difference() {\n        union() {\n            // Central tube\n            cylinder(h = 80, r1 = 12.5, r2 = 12.5, center = true);\n            \n            // Rounded inlet flare (half-sphere)\n            translate([0, 0, 40])\n                sphere(r = 12.5);\n            \n            // Rounded outlet flare (half-sphere)\n            translate([0, 0, -40])\n                sphere(r = 12.5);\n        }\n        \n        // Central flow channel\n        cylinder(h = 100, r = 6, center = true);\n    }\n}\n\nnozzle_straight();",
    "renders": false
  },
  {
    "basic_shape": "nozzle_wide",
    "openscad_code": "// Wide nozzle with rounded edges\n$fn = 32;\n\nunion() {\n    // Main cylindrical body\n    cylinder(h=30, r=40);\n\n    // Rounded top lip\n    translate([0, 0, 30])\n        cylinder(h=5, r1=40, r2=45);\n\n    // Conical taper section\n    translate([0, 0, 35])\n        cylinder(h=20, r1=45, r2=15);\n\n    // Exit cylinder\n    translate([0, 0, 55])\n        cylinder(h=10, r=15);\n}\n\n// Central bore\ndifference() {\n    union();\n    translate([0, 0, -1])\n        cylinder(h=67, r=12);\n}",
    "renders": false
  },
  {
    "basic_shape": "nozzle_narrow",
    "openscad_code": "// nozzle_narrow.scad\n// Simple narrow nozzle with rounded edges\n\n$fn = 32;\n\ndifference() {\n    // Main nozzle body\n    union() {\n        // Cylindrical body\n        cylinder(h = 60, r = 25, center = true);\n        // Rounded tip\n        translate([0, 0, 30])\n            sphere(r = 25);\n    }\n    \n    // Central bore\n    cylinder(h = 70, r = 12, center = true);\n    \n    // Narrow outlet\n    translate([0, 0, 35])\n        cylinder(h = 15, r1 = 12, r2 = 6);\n}\n\n// Mounting flange\ntranslate([0, 0, -35])\n    cylinder(h = 10, r = 35);",
    "renders": false
  },
  {
    "basic_shape": "horn",
    "openscad_code": "// Basic geometric horn - medium complexity\n// 100mm tall, curved bell shape with rounded mouth and throat\n\n$fn = 32;\n\n// Main horn body - curved cone\ndifference() {\n    // Outer curved cone\n    cylinder(h=100, r1=25, r2=40, center=false);\n    \n    // Inner hollow cone\n    translate([0, 0, 2])\n    cylinder(h=98, r1=22, r2=37, center=false);\n}\n\n// Rounded bell mouth\ntranslate([0, 0, 100])\ndifference() {\n    torus(r1=40, r2=5);\n    cylinder(h=12, r=35, center=true);\n}\n\n// Rounded throat end\ntranslate([0, 0, 0])\ndifference() {\n    torus(r1=25, r2=3);\n    cylinder(h=8, r=22, center=true);\n}\n\n// Simple mounting ring at throat\ntranslate([0, 0, -5])\ncylinder(h=5, r=28);",
    "renders": false
  },
  {
    "basic_shape": "horn_short",
    "openscad_code": "difference() {\n    // Main horn body - truncated cone\n    cylinder(h=100, r1=35, r2=12, $fn=32);\n    \n    // Cut bell flare\n    translate([0, 0, 95])\n        cylinder(h=15, r1=40, r2=35, $fn=32);\n    \n    // Mouthpiece end\n    translate([0, 0, -5])\n        cylinder(h=15, r1=8, r2=12, $fn=32);\n}\n\n// Side tube connection\ntranslate([-20, 0, 65])\n    rotate([90, 0, 0])\n        cylinder(h=25, r=5, $fn=16);\n\n// Finger hook\ntranslate([-20, 0, 45])\n    rotate([0, 90, 0])\n        difference() {\n            cylinder(h=15, r=4, $fn=16);\n            translate([0, 0, 15])\n                sphere(r=4, $fn=16);\n        }",
    "renders": false
  },
  {
    "basic_shape": "horn_long",
    "openscad_code": "// horn_long - medium complexity\n// Flared horn shape with rounded bell and mouth\n\n$fn = 32;\n\nmodule horn_long() {\n    difference() {\n        // Main horn body - tapered cylinder\n        union() {\n            // Bell flare\n            translate([0, 0, 0])\n                cylinder(h=20, r1=25, r2=30);\n            \n            // Main tube\n            translate([0, 0, 20])\n                cylinder(h=80, r1=30, r2=15);\n                \n            // Mouthpiece stem\n            translate([0, 0, 100])\n                cylinder(h=20, r1=15, r2=5);\n        }\n        \n        // Center bore - hollow core\n        translate([0, 0, -5])\n            cylinder(h=130, r1=12, r2=2);\n            \n        // Rounded bell edge\n        translate([0, 0, 0])\n            cylinder(h=5, r1=22, r2=25);\n    }\n}\n\nhorn_long();",
    "renders": false
  },
  {
    "basic_shape": "horn_wide",
    "openscad_code": "// Horn wide - medium complexity\n// Basic geometric horn with rounded mouth and flare\n\n$fn = 32;\n\n// Main horn body - flared cone\ndifference() {\n    cylinder(h=80, r1=60, r2=15, center=false);\n    \n    // Hollow interior\n    translate([0, 0, -1])\n        cylinder(h=82, r1=55, r2=10, center=false);\n}\n\n// Rounded mouth edge\ntranslate([0, 0, 80])\n    difference() {\n        torus(60, 5);\n        translate([0, 0, -5])\n            cylinder(h=10, r=55, center=true);\n    }\n\n// Small mounting ring\ndifference() {\n    translate([0, 0, -2])\n        cylinder(h=4, r=20, center=false);\n    translate([0, 0, -3])\n        cylinder(h=6, r=15, center=false);\n}\n\nmodule torus(major, minor) {\n    rotate_extrude()\n        translate([major, 0, 0])\n            circle(r=minor);\n}",
    "renders": false
  },
  {
    "basic_shape": "horn_narrow",
    "openscad_code": "// horn_narrow - tapered cone with rounded tip\n// base diameter 30mm, tip diameter 2mm, length 100mm\n// rounded tip via sphere subtraction for smooth taper\n\ndifference() {\n    cylinder(h=100, r1=15, r2=0, $fn=32);\n    translate([0, 0, 98])\n        sphere(r=3, $fn=32);\n}\n\n// small neck section for mounting\ntranslate([0, 0, -5])\n    cylinder(h=5, r1=15, r2=18, $fn=32);",
    "renders": false
  },
  {
    "basic_shape": "horn_curved",
    "openscad_code": "// Horn curved - geometric primitive\n$fn = 36;\n\n// Main curved horn body\nrotate_extrude(angle = 180) \n    translate([30, 0, 0])\n        polygon(points=[\n            [0, 0],\n            [10, 0],\n            [20, 40],\n            [25, 80],\n            [20, 120],\n            [15, 140],\n            [8, 150],\n            [0, 155]\n        ]);\n\n// Bell flare extension\ntranslate([0, 0, 0])\n    rotate([90, 0, 0])\n        cylinder(h = 30, r1 = 25, r2 = 35);",
    "renders": false
  },
  {
    "basic_shape": "horn_straight",
    "openscad_code": "// Straight horn - medium complexity\n// Flared horn with rounded mouth and base\n\nmodule horn_straight(h = 100, r_base = 20, r_mouth = 50, wall = 2, round = 5) {\n    difference() {\n        // Outer horn shell\n        cylinder(h = h, r1 = r_base, r2 = r_mouth, $fn = 32);\n        \n        // Hollow interior\n        translate([0, 0, wall])\n            cylinder(h = h - wall, r1 = r_base - wall, r2 = r_mouth - wall, $fn = 32);\n        \n        // Rounded mouth edge\n        translate([0, 0, h - round])\n            sphere(r = round, $fn = 32);\n    }\n    \n    // Rounded base edge\n    translate([0, 0, 0])\n        sphere(r = round, $fn = 32);\n}\n\nhorn_straight();",
    "renders": false
  },
  {
    "basic_shape": "funnel",
    "openscad_code": "// Funnel with rounded edges and tapered walls\n$fn = 32;\n\n// Main funnel body with rounded top edge\ndifference() {\n    // Funnel cone\n    cylinder(h1 = 60, r1 = 40, r2 = 10);\n    \n    // Remove inner to create hollow cone\n    translate([0, 0, -1])\n        cylinder(h1 = 62, r1 = 38, r2 = 8);\n}\n\n// Rounded top edge\ndifference() {\n    // Outer torus\n    rotate_extrude(angle = 360)\n        translate([38, 0, 0])\n            circle(r = 2);\n    \n    // Remove inner\n    rotate_extrude(angle = 360)\n        translate([36, 0, 0])\n            circle(r = 2);\n}\ntranslate([0, 0, 60])\n    rotate_extrude(angle = 360)\n        translate([38, 0, 0])\n            circle(r = 2);\n\n// Short spout extension\ntranslate([0, 0, -5])\n    cylinder(h = 5, r = 10);",
    "renders": false
  },
  {
    "basic_shape": "funnel_tall",
    "openscad_code": "// Tall funnel with rounded top rim and slight wall taper\ntop_r = 35;\nbottom_r = 8;\nheight = 120;\nwall = 2;\nround_r = 3;\n\ndifference() {\n    // Outer cone\n    cylinder(h = height, r1 = top_r, r2 = bottom_r, $fn = 64);\n    \n    // Hollow interior\n    translate([0, 0, -0.1])\n        cylinder(h = height + 0.2, \n                 r1 = top_r - wall, \n                 r2 = bottom_r - wall, \n                 $fn = 64);\n}\n\n// Rounded top rim\ntranslate([0, 0, height])\n    rotate_extrude(angle = 360, $fn = 64)\n        translate([top_r - round_r, 0, 0])\n            circle(r = round_r, $fn = 32);",
    "renders": false
  },
  {
    "basic_shape": "funnel_short",
    "openscad_code": "// Short funnel with rounded lip and smooth inner bore\n$fn = 32;\n\nmodule funnel_short() {\n    difference() {\n        // Outer shell\n        union() {\n            // Flared top with rounded lip\n            cylinder(h = 8, r1 = 40, r2 = 38);\n            translate([0, 0, 8])\n                cylinder(h = 4, r1 = 38, r2 = 38);\n            // Spout\n            translate([0, 0, 12])\n                cylinder(h = 25, r1 = 38, r2 = 8);\n        }\n        \n        // Hollow bore\n        translate([0, 0, -1])\n            cylinder(h = 39, r1 = 36, r2 = 6);\n    }\n}\n\nfunnel_short();",
    "renders": false
  },
  {
    "basic_shape": "funnel_wide",
    "openscad_code": "// funnel_wide\n$fn = 36;\n\n// funnel base\ncylinder(h = 40, r1 = 60, r2 = 10);\n\n// rounded rim\ntranslate([0, 0, 40])\ndifference() {\n    cylinder(h = 10, r1 = 60, r2 = 65);\n    cylinder(h = 10, r1 = 55, r2 = 60);\n}\n\n// optional support ring\ntranslate([0, 0, 20])\ndifference() {\n    cylinder(h = 5, r1 = 61, r2 = 61);\n    cylinder(h = 5, r1 = 59, r2 = 59);\n}",
    "renders": false
  },
  {
    "basic_shape": "funnel_narrow",
    "openscad_code": "// funnel_narrow.scad\n// Medium complexity funnel with rounded edges\n\n$fn = 32;\n\n// Main funnel body\ndifference() {\n    // Outer cone with rounded top rim\n    union() {\n        cylinder(h1 = 20, r1 = 45, r2 = 40);\n        cylinder(h = 50, r1 = 40, r2 = 8);\n    }\n    \n    // Hollow out the interior\n    translate([0, 0, -0.1])\n        cylinder(h = 70.2, r1 = 38, r2 = 6);\n}\n\n// Add subtle fillet at cone base\ntranslate([0, 0, 50])\n    cylinder(h = 3, r1 = 8.5, r2 = 8, $fn = 32);",
    "renders": false
  },
  {
    "basic_shape": "funnel_steep",
    "openscad_code": "// Steep funnel with rounded inlet lip\n$fn = 36;\n\nmodule funnel_steep() {\n    difference() {\n        // Main steep cone body\n        cylinder(h1 = 80, r1 = 55, r2 = 8, center = false);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h1 = 82, r1 = 52, r2 = 5, center = false);\n    }\n    \n    // Rounded lip ring\n    translate([0, 0, 80])\n        rotate_extrude(angle = 360)\n            translate([55, 0, 0])\n                circle(r = 3);\n}\n\nfunnel_steep();",
    "renders": false
  },
  {
    "basic_shape": "funnel_shallow",
    "openscad_code": "// Shallow funnel with rounded top edge\n$fn = 32;\n\ndifference() {\n    // Funnel body with rounded top\n    union() {\n        cylinder(h = 5, r1 = 60, r2 = 20);           // main shallow cone\n        translate([0, 0, 5])\n            cylinder(h = 15, r1 = 20, r2 = 10);      // stem\n    }\n    \n    // Hollow it out\n    translate([0, 0, -1])\n        cylinder(h = 22, r1 = 58, r2 = 8);           // inner cavity\n    \n    // Rounded top edge via torus removal\n    rotate_extrude()\n        translate([60, 0])\n            circle(r = 2);\n}",
    "renders": false
  },
  {
    "basic_shape": "bell",
    "openscad_code": "// Bell - medium complexity geometric form\n// Main body\ndifference() {\n    cylinder(h=60, r1=35, r2=25);\n    // Hollow interior\n    cylinder(h=55, r1=30, r2=20);\n}\n\n// Rounded lip\ntranslate([0, 0, 60])\ndifference() {\n    cylinder(h=5, r1=25, r2=28);\n    cylinder(h=5, r1=20, r2=23);\n}\n\n// Top loop\ntranslate([0, 0, 65])\nrotate_extrude(angle=360, $fn=20)\ntranslate([20, 0, 0])\ncircle(r=5);",
    "renders": false
  },
  {
    "basic_shape": "bell_tall",
    "openscad_code": "// Bell tall - medium complexity\ndifference() {\n    // Main bell body\n    cylinder(h=100, r1=35, r2=25, $fn=50);\n    \n    // Hollow interior\n    translate([0, 0, -1])\n    cylinder(h=102, r1=30, r2=20, $fn=50);\n    \n    // Top hole for clapper\n    translate([0, 0, 100])\n    cylinder(h=5, r1=15, r2=15, $fn=20);\n    \n    // Rounded bottom edge\n    translate([0, 0, 0])\n    rotate_extrude($fn=50)\n    translate([25, 0, 0])\n    circle(r=5);\n}",
    "renders": false
  },
  {
    "basic_shape": "bell_short",
    "openscad_code": "// Bell short - medium complexity\ndifference() {\n    // Main bell body with rounded bottom\n    hull() {\n        cylinder(h=60, r1=40, r2=35);\n        translate([0, 0, 60]) cylinder(h=10, r1=35, r2=45);\n    }\n    \n    // Interior cavity\n    translate([0, 0, -1])\n    cylinder(h=70, r1=30, r2=25);\n    \n    // Top hole for clapper\n    translate([0, 0, 70])\n    cylinder(h=10, r=15);\n}\n\n// Small trapezoid handle\ntranslate([0, 0, 70])\nrotate([0, 180, 0])\ncylinder(h=15, r1=8, r2=12);",
    "renders": false
  },
  {
    "basic_shape": "bell_wide",
    "openscad_code": "// bell_wide - medium complexity\ndifference() {\n    // main bell shape - wide and slightly tapered\n    cylinder(h=60, r1=45, r2=40, $fn=100);\n    \n    // hollow center\n    translate([0, 0, -1])\n        cylinder(h=62, r1=42, r2=37, $fn=100);\n    \n    // round the bottom edge\n    translate([0, 0, -2])\n        cylinder(h=5, r1=40, r2=45, $fn=100);\n    \n    // top hole for clapper\n    translate([0, 0, 59])\n        cylinder(h=3, r=5, $fn=32);\n}\n\n// rounded top\ntranslate([0, 0, 60])\n    sphere(r=5, $fn=32);",
    "renders": false
  },
  {
    "basic_shape": "bell_narrow",
    "openscad_code": "// Narrow bell with rounded edges and slight taper\n$fn = 32;\n\n// Main bell body\nunion() {\n    // Bell shaft (narrow cylinder)\n    cylinder(h=80, r1=12, r2=10, center=true);\n    \n    // Bell flare (rounded top)\n    translate([0,0,40])\n        cylinder(h=25, r1=10, r2=25, center=false);\n    \n    // Rounded bottom edge\n    translate([0,0,-40])\n        rotate_extrude(angle=180)\n            translate([12,0,0])\n                circle(r=2);\n    \n    // Handle for ringing (small cylinder)\n    translate([0,0,-50])\n        cylinder(h=20, r=5, center=true);\n}",
    "renders": false
  },
  {
    "basic_shape": "bell_hollow",
    "openscad_code": "// Basic hollow bell shape with rounded edges\n// Overall height ~90mm, diameter ~70mm\n\n$fn = 36;\n\ndifference() {\n    // Main bell body with rounded top\n    union() {\n        cylinder(h=20, r1=35, r2=35);\n        cylinder(h=70, r1=35, r2=25);\n    }\n    \n    // Hollow interior\n    translate([0, 0, -1])\n    cylinder(h=92, r1=30, r2=20);\n    \n    // Round the bottom edge\n    translate([0, 0, 90])\n    sphere(r=5);\n}\n\n// Simple loop for hanging\ntranslate([0, 0, 90])\ndifference() {\n    rotate_extrude(angle=360)\n        translate([25, 0, 0])\n        circle(r=5);\n    rotate_extrude(angle=360)\n        translate([25, 0, 0])\n        circle(r=2.5);\n}",
    "renders": false
  },
  {
    "basic_shape": "bowl",
    "openscad_code": "// Bowl with rounded edges\ndifference() {\n    // Outer rounded cylinder\n    minkowski() {\n        cylinder(h=60, r=40);\n        sphere(r=5);\n    }\n    \n    // Inner cavity\n    translate([0, 0, 5])\n        minkowski() {\n            cylinder(h=55, r=35);\n            sphere(r=5);\n        }\n    \n    // Flatten bottom\n    translate([0, 0, -5])\n        cube([100, 100, 10], center=true);\n}",
    "renders": false
  },
  {
    "basic_shape": "bowl_deep",
    "openscad_code": "// Deep bowl with rounded rim and base\nmodule bowl_deep() {\n    // Main bowl body - hollow cylinder with rounded bottom\n    difference() {\n        // Outer rounded form\n        minkowski() {\n            cylinder(h=80, r=50, $fn=64);\n            sphere(r=5, $fn=32);\n        }\n        \n        // Inner cavity\n        translate([0, 0, 3])\n        minkowski() {\n            cylinder(h=77, r=40, $fn=64);\n            sphere(r=4, $fn=32);\n        }\n    }\n    \n    // Flatten base slightly\n    translate([0, 0, -1])\n    difference() {\n        cylinder(h=2, r=50, $fn=64);\n        cylinder(h=4, r=48, $fn=64);\n    }\n}\n\nbowl_deep();",
    "renders": false
  },
  {
    "basic_shape": "bowl_shallow",
    "openscad_code": "// Shallow bowl with rounded bottom\nmodule bowl_shallow() {\n    difference() {\n        // Outer rounded bowl\n        minkowski() {\n            cylinder(h = 2, r = 60, $fn = 64);\n            sphere(r = 4, $fn = 32);\n        }\n        \n        // Inner cavity\n        translate([0, 0, 2])\n        minkowski() {\n            cylinder(h = 2, r = 55, $fn = 64);\n            sphere(r = 4, $fn = 32);\n        }\n        \n        // Flatten bottom\n        translate([0, 0, -1])\n        cube([120, 120, 2], center = true);\n    }\n}\n\nbowl_shallow();",
    "renders": false
  },
  {
    "basic_shape": "bowl_wide",
    "openscad_code": "// Wide bowl with rounded edges\ndifference() {\n    // Outer rounded bowl\n    minkowski() {\n        cylinder(h=40, r=80, $fn=64);\n        sphere(r=5);\n    }\n    \n    // Inner hollow\n    translate([0, 0, 5])\n    minkowski() {\n        cylinder(h=100, r=70, $fn=64);\n        sphere(r=5);\n    }\n    \n    // Flatten bottom\n    translate([0, 0, -5])\n    cube([160, 160, 10], center=true);\n}",
    "renders": false
  },
  {
    "basic_shape": "bowl_narrow",
    "openscad_code": "// Bowl_narrow - medium complexity\ndifference() {\n    // Outer rounded bowl\n    minkowski() {\n        cylinder(h=80, r1=40, r2=35, center=true);\n        sphere(r=3);\n    }\n    \n    // Inner cavity\n    minkowski() {\n        cylinder(h=82, r1=37, r2=32, center=true);\n        sphere(r=3);\n    }\n    \n    // Flatten bottom\n    translate([0, 0, -43])\n        cube([100, 100, 10], center=true);\n}\n\n// Narrow base\ntranslate([0, 0, -40])\n    cylinder(h=5, r1=30, r2=25, center=true);",
    "renders": false
  },
  {
    "basic_shape": "bowl_rounded",
    "openscad_code": "// Rounded bowl - medium complexity\n// Basic bowl shape with rounded bottom and rim\n\nheight = 60;\nouter_rim = 80;\nwall = 4;\nrounding = 6;\n\ndifference() {\n    // Outer rounded bowl\n    minkowski() {\n        cylinder(h=height-rounding*2, r=outer_rim-rounding, $fn=64);\n        sphere(r=rounding, $fn=32);\n    }\n    \n    // Inner cavity\n    translate([0, 0, wall])\n    minkowski() {\n        cylinder(h=height-rounding*2-wall, r=outer_rim-wall-rounding, $fn=64);\n        sphere(r=rounding, $fn=32);\n    }\n}\n\n// Flat base\ndifference() {\n    translate([0, 0, -rounding])\n        cylinder(h=rounding*2, r=outer_rim, $fn=64);\n    \n    cylinder(h=rounding*2, r=outer_rim-wall, $fn=64);\n}",
    "renders": false
  },
  {
    "basic_shape": "bowl_straight",
    "openscad_code": "difference() {\n    // Outer bowl shell\n    cylinder(h=60, r1=45, r2=35, $fn=64);\n    \n    // Remove inner volume\n    translate([0, 0, 3])\n        cylinder(h=57, r1=42, r2=32, $fn=64);\n    \n    // Round bottom outer\n    translate([0, 0, 60])\n        sphere(r=35, $fn=64);\n    \n    // Round bottom inner\n    translate([0, 0, 60])\n        sphere(r=32, $fn=64);\n}",
    "renders": false
  },
  {
    "basic_shape": "bowl_tapered",
    "openscad_code": "// Tapered bowl with rounded lip and base\n$fn = 36;\n\n// Parameters\nheight = 60;\nbase_r = 40;\ntop_r = 60;\nwall_th = 4;\nround_r = 2;\n\n// Bowl shell\ndifference() {\n    // Outer tapered cylinder\n    cylinder(h = height, r1 = base_r, r2 = top_r);\n    \n    // Hollow interior\n    translate([0, 0, wall_th])\n    cylinder(h = height - wall_th + 1, r1 = base_r - wall_th, r2 = top_r - wall_th);\n}\n\n// Rounded lip\ntranslate([0, 0, height])\ndifference() {\n    torus(r1 = top_r, r2 = round_r);\n    cylinder(h = round_r + 1, r = top_r - wall_th - round_r);\n}\n\n// Rounded base\ntranslate([0, 0, 0])\ndifference() {\n    torus(r1 = base_r, r2 = round_r);\n    cylinder(h = round_r + 1, r = base_r - wall_th - round_r);\n}",
    "renders": false
  },
  {
    "basic_shape": "dish",
    "openscad_code": "// Rounded-edge shallow dish\nd = 100;           // outer diameter\nh = 25;            // overall height\nwall = 3;          // wall thickness\nr_fillet = 5;      // rounding radius\n\ndifference() {\n    // outer rounded dish\n    minkowski() {\n        cylinder(h = h - 2*r_fillet, r = d/2 - r_fillet, $fn = 48);\n        sphere(r = r_fillet, $fn = 24);\n    }\n\n    // hollow interior\n    translate([0, 0, wall])\n        minkowski() {\n            cylinder(h = h - 2*r_fillet - wall, r = d/2 - r_fillet - wall, $fn = 48);\n            sphere(r = r_fillet, $fn = 24);\n        }\n}",
    "renders": false
  },
  {
    "basic_shape": "dish_flat",
    "openscad_code": "// Dish flat with rounded edges\ndish_diameter = 100;\ndish_height = 20;\nwall_thickness = 3;\nedge_radius = 2;\n\ndifference() {\n    // Outer dish shape\n    cylinder(h = dish_height, r = dish_diameter/2, $fn = 64);\n    \n    // Hollow interior\n    translate([0, 0, wall_thickness])\n        cylinder(h = dish_height, r = dish_diameter/2 - wall_thickness, $fn = 64);\n    \n    // Round bottom edge\n    translate([0, 0, -edge_radius])\n        cylinder(h = dish_height + edge_radius, r = dish_diameter/2 - wall_thickness, $fn = 64);\n    \n    // Round top edge\n    translate([0, 0, dish_height - wall_thickness])\n        cylinder(h = wall_thickness + edge_radius, r = dish_diameter/2 - wall_thickness, $fn = 64);\n}\n\n// Add rounded bottom\ntranslate([0, 0, -edge_radius])\n    difference() {\n        sphere(r = dish_diameter/2 - wall_thickness, $fn = 64);\n        cube([dish_diameter, dish_diameter, dish_diameter/2 - wall_thickness], center = true);\n    }",
    "renders": false
  },
  {
    "basic_shape": "dish_curved",
    "openscad_code": "// Dish with curved bowl and rounded rim\ndifference() {\n    // Main curved bowl\n    minkowski() {\n        sphere(d = 100);\n        cube([0.1, 0.1, 1], center = true);\n    }\n    \n    // Hollow center\n    translate([0, 0, -1])\n    scale([0.8, 0.8, 0.5])\n    minkowski() {\n        sphere(d = 100);\n        cube([0.1, 0.1, 1], center = true);\n    }\n    \n    // Flatten bottom\n    translate([0, 0, -30])\n    cube([200, 200, 60], center = true);\n}\n\n// Rounded rim edge\ntranslate([0, 0, 20])\nrotate_extrude(angle = 360)\ntranslate([45, 0, 0])\ncircle(r = 5);",
    "renders": false
  },
  {
    "basic_shape": "dish_shallow",
    "openscad_code": "// shallow dish with rounded bottom and slight rim\ndish_diameter = 100;\ndish_height = 20;\nrim_thickness = 3;\nrim_height = 5;\nfillet_radius = 5;\n\ndifference() {\n    // outer shell\n    union() {\n        cylinder(h = dish_height, r = dish_diameter/2, $fn = 64);\n        translate([0, 0, dish_height])\n            cylinder(h = rim_height, r1 = dish_diameter/2, r2 = dish_diameter/2 + rim_thickness, $fn = 64);\n    }\n\n    // hollow interior with rounded bottom\n    translate([0, 0, fillet_radius])\n        minkowski() {\n            cylinder(h = dish_height - fillet_radius - rim_height, r = dish_diameter/2 - rim_thickness, $fn = 64);\n            sphere(fillet_radius, $fn = 32);\n        }\n}",
    "renders": false
  },
  {
    "basic_shape": "dish_rounded",
    "openscad_code": "// Dish with rounded bottom and straight sides\nouter_d = 100;\ninner_d = 90;\nwall_h = 20;\nbottom_r = 40;\nedge_r = 2;\n\ndifference() {\n    // Outer shell\n    cylinder(h = wall_h, r = outer_d/2, $fn = 60);\n    \n    // Inner cavity\n    translate([0, 0, -1])\n    union() {\n        // Straight wall section\n        cylinder(h = wall_h - edge_r, r = inner_d/2, $fn = 60);\n        \n        // Rounded bottom\n        translate([0, 0, wall_h - edge_r])\n        sphere(r = bottom_r, $fn = 60);\n    }\n}\n\n// Thin top edge rounding\ntranslate([0, 0, wall_h - edge_r])\ndifference() {\n    cylinder(h = edge_r, r1 = outer_d/2, r2 = outer_d/2 - edge_r, $fn = 60);\n    cylinder(h = edge_r + 1, r = inner_d/2 + edge_r, $fn = 60);\n}",
    "renders": false
  },
  {
    "basic_shape": "dish_with_rim",
    "openscad_code": "// Dish with rim - medium complexity\ndifference() {\n    // Main dish body with rounded bottom\n    union() {\n        cylinder(h=5, r=60, $fn=60);\n        translate([0, 0, 5])\n            cylinder(h=15, r1=60, r2=50, $fn=60);\n    }\n    \n    // Hollow out the dish\n    translate([0, 0, -1])\n        cylinder(h=21, r=47, $fn=60);\n    \n    // Add rim cutout\n    translate([0, 0, 15])\n        cylinder(h=10, r=54, $fn=60);\n}\n\n// Add curved rim edge\ntranslate([0, 0, 15])\n    difference() {\n        cylinder(h=3, r=60, $fn=60);\n        cylinder(h=3, r=54, $fn=60);\n    }",
    "renders": false
  },
  {
    "basic_shape": "knob",
    "openscad_code": "// Knob with rounded top and grip ridges\nknob_height = 30;\nbase_d = 50;\ntop_d = 35;\ngrip_ridges = 8;\n\ndifference() {\n    // Main knob body\n    union() {\n        cylinder(h = knob_height, d1 = base_d, d2 = top_d, $fn = 60);\n        cylinder(h = 5, d = base_d, $fn = 60);\n    }\n    \n    // Center hole\n    cylinder(h = knob_height + 2, d = 6, $fn = 30);\n    \n    // Grip ridges\n    for (i = [0 : grip_ridges - 1]) {\n        rotate([0, 0, i * (360 / grip_ridges)]) \n            translate([base_d / 2 - 2, -2, 0]) \n                cube([4, 4, knob_height - 5]);\n    }\n}",
    "renders": false
  },
  {
    "basic_shape": "knob_round",
    "openscad_code": "// Knob_round - medium complexity\n// Rounded top knob with cylindrical base and finger indent\n\n$fn = 32;\n\n// Main dome top\ndifference() {\n    sphere(r = 30);\n    translate([0, 0, -30])\n        cylinder(h = 30, r = 30);\n}\n\n// Cylindrical base\ntranslate([0, 0, -20])\n    cylinder(h = 20, r = 25);\n\n// Finger grip indent\nrotate([90, 0, 0])\n    translate([0, 0, -5])\n        difference() {\n            cylinder(h = 10, r = 3);\n            translate([0, 0, 5])\n                sphere(r = 3);\n        }",
    "renders": false
  },
  {
    "basic_shape": "knob_cylindrical",
    "openscad_code": "// Cylindrical knob (medium complexity)\n// Overall height 40 mm, diameter 30 mm\n\n$fn = 32;  // smooth curves\n\n// Main cylindrical body with rounded top\ntranslate([0,0,5])\n    cylinder(h = 30, r = 15, r2 = 15);  // 30 mm tall, 30 mm Ã\n\n// Rounded dome cap on top\ntranslate([0,0,35])\n    sphere(r = 15);\n\n// Base collar / lip\ndifference() {\n    cylinder(h = 5, r = 18);  // 5 mm tall collar\n    cylinder(h = 5, r = 15);  // remove inner part to create lip\n}\n\n// Optional through-hole (optional, uncomment if needed)\n// translate([0,0,-1])\n//     cylinder(h = 42, r = 4);",
    "renders": false
  },
  {
    "basic_shape": "knob_conical",
    "openscad_code": "// Conical knob with rounded top and base\n$fn = 36;\n\nbase_r = 25;\ntop_r = 18;\nheight = 40;\nedge_r = 3;\n\n// Main cone with rounded top\ndifference() {\n    cylinder(h=height, r1=base_r, r2=top_r);\n    translate([0, 0, height - edge_r])\n        sphere(r=edge_r);\n}\n\n// Rounded base edge\ntranslate([0, 0, 0])\n    difference() {\n        cylinder(h=edge_r, r=base_r + edge_r);\n        translate([0, 0, -edge_r])\n            cylinder(h=edge_r*2, r1=base_r, r2=base_r + edge_r);\n    }\n\n// Small grip indent\ntranslate([0, 0, height*0.7])\n    difference() {\n        cylinder(h=5, r=top_r + 5);\n        cylinder(h=7, r=top_r - 3);\n    }",
    "renders": false
  },
  {
    "basic_shape": "knob_small",
    "openscad_code": "// knob_small - medium complexity\n$fn = 36;\n\n// main cylindrical body with rounded top\ndifference() {\n    union() {\n        cylinder(h = 20, r = 15);\n        translate([0, 0, 20])\n            sphere(r = 15);\n    }\n    // flatten top slightly\n    translate([0, 0, 30])\n        cube([50, 50, 10], center = true);\n}\n\n// grip ridge\ntranslate([0, 0, 15])\n    difference() {\n        cylinder(h = 5, r = 16.5);\n        cylinder(h = 6, r = 14.5);\n    }\n\n// mounting hole\ntranslate([0, 0, -5])\n    cylinder(h = 25, r = 4);",
    "renders": false
  },
  {
    "basic_shape": "knob_large",
    "openscad_code": "// Knob - cylinder with rounded top and base\n$fn = 36;\n\nh = 25;\nr = 30;\n\ndifference() {\n    // Main body with rounded top\n    union() {\n        cylinder(h = h - 5, r = r, center = false);\n        translate([0, 0, h - 5])\n            sphere(r = r);\n    }\n    \n    // Cylindrical grip hole\n    translate([0, 0, -1])\n        cylinder(h = h + 2, r = 8, center = false);\n    \n    // Flatten grip face\n    translate([0, -r, 0])\n        cube([r * 2, r, h * 2], center = false);\n}",
    "renders": false
  },
  {
    "basic_shape": "knob_short",
    "openscad_code": "// knob_short.scad\n// Short cylindrical knob with rounded top and a small indicator dot\n\nknob_d = 30;\nknob_h = 20;\nstem_d = 6;\nstem_h = 8;\nfillet_r = 5;\n\nunion() {\n    // Main knob body with rounded top\n    hull() {\n        cylinder(h = knob_h - fillet_r, r = knob_d/2, $fn = 60);\n        translate([0, 0, knob_h - fillet_r])\n            sphere(r = knob_d/2, $fn = 60);\n    }\n    \n    // Central stem for shaft\n    translate([0, 0, -stem_h])\n        cylinder(h = stem_h, r = stem_d/2, $fn = 30);\n    \n    // Simple indicator dot\n    translate([knob_d/2 * 0.7, 0, knob_h - fillet_r])\n        sphere(r = 2.5, $fn = 20);\n}",
    "renders": false
  },
  {
    "basic_shape": "knob_tall",
    "openscad_code": "// Tall knob with rounded top and grip ridges\nmodule knob_tall() {\n    // Main shaft\n    cylinder(h=60, r=20, $fn=32);\n    \n    // Rounded top\n    translate([0, 0, 60])\n        sphere(r=20, $fn=32);\n    \n    // Grip ridges\n    for(i=[0:7]) {\n        rotate([0, 0, i * 45])\n            translate([0, 18, 20])\n                cube([3, 4, 20], center=true);\n    }\n    \n    // Base flange\n    translate([0, 0, -5])\n        cylinder(h=10, r1=25, r2=20, $fn=32);\n}\n\nknob_tall();",
    "renders": false
  },
  {
    "basic_shape": "button",
    "openscad_code": "// Medium-complexity push-button: flat cylindrical cap with rounded top and shallow base\n$fn = 32;\n\n// Base disc\ncylinder(h = 8, r = 25);\n\n// Rounded cap\ntranslate([0, 0, 8])\n    minkowski() {\n        cylinder(h = 1, r = 22);\n        sphere(r = 4);\n    }\n\n// Center locating pin\ntranslate([0, 0, -3])\n    cylinder(h = 6, r = 3);",
    "renders": false
  },
  {
    "basic_shape": "button_round",
    "openscad_code": "$fn = 36;\n\n// Overall dimensions\nd = 50;           // button diameter\nh = 20;           // total height\nr_top = 25;       // top radius\nr_bottom = 30;    // slightly larger base radius\nedge_r = 3;       // rounding radius for top edge\n\n// Main button shape with rounded top edge\ndifference() {\n    // Tapered solid\n    cylinder(h = h, r1 = r_bottom, r2 = r_top, center = false);\n\n    // Rounded top edge\n    translate([0, 0, h - edge_r])\n        minkowski() {\n            cylinder(h = 0.01, r = r_top - edge_r, center = false);\n            sphere(r = edge_r);\n        }\n}\n\n// Slight recess on top for finger placement\ndifference() {\n    translate([0, 0, h - 0.1])\n        cylinder(h = 0.2, r = r_top * 0.7);\n}",
    "renders": false
  },
  {
    "basic_shape": "button_square",
    "openscad_code": "// Square button with rounded top edges and slight dome\nmodule button_square(size = 40, height = 10, radius = 4) {\n    difference() {\n        // Main rounded block\n        minkowski() {\n            cube([size - 2*radius, size - 2*radius, height - radius], center = true);\n            sphere(r = radius);\n        }\n        \n        // Cut bottom flat\n        translate([0, 0, -height/2 - 1])\n            cube([size*2, size*2, 2], center = true);\n    }\n    \n    // Add slight dome top\n    translate([0, 0, height/2])\n        scale([1, 1, 0.3])\n            sphere(d = size, $fn = 50);\n}\n\nbutton_square();",
    "renders": false
  },
  {
    "basic_shape": "button_cylindrical",
    "openscad_code": "// Cylindrical button with rounded top edge and slight recess\n$fn = 32;\n\n// Main button body\nunion() {\n    // Cylindrical base\n    cylinder(h = 10, r = 25);\n    \n    // Rounded top\n    translate([0, 0, 10])\n        cylinder(h = 15, r1 = 25, r2 = 20);\n    \n    // Slight top dome\n    translate([0, 0, 25])\n        sphere(r = 20);\n}\n\n// Recessed center for finger tip\ndifference() {\n    // Combine main body\n    union();\n    \n    // Cylindrical recess\n    translate([0, 0, 30])\n        cylinder(h = 5, r = 12);\n}\n\n// Bottom edge chamfer\ndifference() {\n    // Combine previous shapes\n    union();\n    \n    // Chamfer cut\n    translate([0, 0, -1])\n        cylinder(h = 2, r1 = 26, r2 = 24);\n}",
    "renders": false
  },
  {
    "basic_shape": "button_with_hole",
    "openscad_code": "// Button with rounded edges and center hole\n$fn = 32;\n\n// Main button body with rounded top\nunion() {\n    // Rounded top cylinder\n    cylinder(h = 10, r = 25);\n    \n    // Main cylinder body\n    translate([0, 0, 10])\n        cylinder(h = 20, r = 25);\n}\n\n// Fillet at top edge\ntranslate([0, 0, 10])\n    rotate_extrude(angle = 360)\n        translate([23, 0, 0])\n            circle(r = 2);\n\n// Center hole\ntranslate([0, 0, -1])\n    cylinder(h = 32, r = 5);\n\n// Optional countersink\ntranslate([0, 0, 29])\n    cylinder(h = 5, r1 = 5, r2 = 8);",
    "renders": false
  },
  {
    "basic_shape": "button_convex",
    "openscad_code": "// convex button with rounded top and beveled edge\nmodule button_convex(d=40, h=8, r_top=20, bevel=1.5) {\n    union() {\n        // main cylindrical base\n        cylinder(h=h-bevel, d=d, $fn=60);\n\n        // rounded top dome\n        translate([0, 0, h-bevel])\n            sphere(r=r_top, $fn=60);\n\n        // bevel edge\n        translate([0, 0, h-bevel])\n            cylinder(h1=bevel, h2=0, d1=d, d2=d+bevel*2, $fn=60);\n    }\n}\n\nbutton_convex();",
    "renders": false
  },
  {
    "basic_shape": "button_flat",
    "openscad_code": "// Flat button with rounded top and beveled edges\nbutton_d = 30;\nbutton_h = 5;\nedge_r = 3;\ntop_r = 8;\n\ndifference() {\n    union() {\n        // Flat base cylinder\n        cylinder(h=button_h-edge_r, d=button_d, $fn=64);\n        // Rounded top dome\n        translate([0,0,button_h-edge_r])\n            sphere(r=top_r, $fn=64);\n    }\n    \n    // Bevel bottom edge\n    translate([0,0,-0.1])\n        cylinder(h=edge_r+0.2, d1=button_d-edge_r*2, d2=button_d, $fn=64);\n}",
    "renders": false
  },
  {
    "basic_shape": "button_indented",
    "openscad_code": "// Button with central indentation and rounded edges\n$fn=32;\n\nmodule button_indented() {\n    difference() {\n        // Main button body\n        minkowski() {\n            cylinder(h=10, r=25);\n            sphere(r=3);\n        }\n        \n        // Central indentation\n        translate([0, 0, 5])\n            cylinder(h=10, r=12);\n            \n        // Bevel inner edge\n        translate([0, 0, 15])\n            cylinder(h=5, r1=12, r2=10);\n    }\n}\n\nbutton_indented();",
    "renders": false
  },
  {
    "basic_shape": "nub",
    "openscad_code": "// Medium-complexity nub: rounded square peg with slight taper\n$fn = 32;\n\n// Main tapered peg\nunion() {\n    // Rounded top\n    translate([0, 0, 38])\n        minkowski() {\n            cube([20, 20, 4], center = true);\n            sphere(4);\n        }\n    \n    // Tapered body\n    hull() {\n        translate([0, 0, 0])\n            cylinder(h = 2, r = 12, center = true);\n        translate([0, 0, 36])\n            cylinder(h = 2, r = 14, center = true);\n    }\n}\n\n// Small locating bump on top\ntranslate([0, 0, 44])\n    sphere(r = 3);",
    "renders": false
  },
  {
    "basic_shape": "nub_small",
    "openscad_code": "// Small rounded nub with slight taper\nmodule rounded_nub() {\n    $fn = 32;\n    \n    // Main body with rounded top\n    difference() {\n        union() {\n            // Cylindrical base\n            cylinder(h = 20, r = 15);\n            // Hemispherical top\n            translate([0, 0, 20])\n            sphere(r = 15);\n        }\n        \n        // Small chamfer at bottom edge\n        translate([0, 0, -1])\n        cylinder(h = 5, r1 = 15, r2 = 13);\n    }\n    \n    // Slight fillet at base\n    translate([0, 0, -2])\n    cylinder(h = 2, r1 = 17, r2 = 15);\n}\n\nrounded_nub();",
    "renders": false
  },
  {
    "basic_shape": "nub_large",
    "openscad_code": "// nub_large - rounded-top peg with collar\ndifference() {\n    union() {\n        // main rounded head\n        cylinder(h = 30, r = 25, $fn = 32);\n        translate([0, 0, 30])\n            sphere(r = 25, $fn = 32);\n        \n        // collar\n        translate([0, 0, -10])\n            cylinder(h = 10, r = 35, $fn = 32);\n    }\n    \n    // central hole\n    translate([0, 0, -11])\n        cylinder(h = 71, r = 15, $fn = 32);\n}",
    "renders": false
  },
  {
    "basic_shape": "nub_round",
    "openscad_code": "// Medium complexity nub_round: rounded cylinder with domed top and bottom\n$fn = 32;\n\n// Main body: cylinder with rounded top and bottom\nunion() {\n    // Central cylinder\n    cylinder(h=80, r=30, center=true);\n    \n    // Top dome\n    translate([0, 0, 40])\n        sphere(r=30);\n    \n    // Bottom dome\n    translate([0, 0, -40])\n        sphere(r=30);\n}\n\n// Optional: slight edge rounding via smaller sphere subtraction\ndifference() {\n    union() {\n        cylinder(h=80, r=30, center=true);\n        translate([0, 0, 40]) sphere(r=30);\n        translate([0, 0, -40]) sphere(r=30);\n    }\n    // Remove inner sharp edges\n    translate([0, 0, 0])\n        cylinder(h=82, r=28.5, center=true);\n}",
    "renders": false
  },
  {
    "basic_shape": "nub_cylindrical",
    "openscad_code": "// nub_cylindrical - medium complexity\n// A short cylinder with rounded top and bottom edges\n$fn = 50;\n\nheight = 50;\nradius = 25;\nfillet = 5;\n\ndifference() {\n    union() {\n        // Main cylinder body\n        cylinder(h = height - 2*fillet, r = radius, center = true);\n        \n        // Rounded top\n        translate([0, 0, (height - 2*fillet)/2])\n            sphere(r = radius);\n        \n        // Rounded bottom\n        translate([0, 0, -(height - 2*fillet)/2])\n            sphere(r = radius);\n    }\n    \n    // Cut off bottom half of bottom sphere\n    translate([0, 0, -(height/2 + radius)])\n        cube([radius*4, radius*4, radius*2], center = true);\n    \n    // Cut off top half of top sphere\n    translate([0, 0, height/2 + radius])\n        cube([radius*4, radius*4, radius*2], center = true);\n}",
    "renders": false
  },
  {
    "basic_shape": "nub_conical",
    "openscad_code": "// nub_conical - medium complexity\n// Conical nub with rounded top edge and flat base\n\n$fn = 32;\n\nmodule nub_conical(h=80, r=30, rounding=8) {\n    difference() {\n        // main cone body\n        cylinder(h=h, r1=r, r2=0, center=false);\n        \n        // rounded top edge\n        translate([0, 0, h-rounding])\n            rotate_extrude(angle=360, $fn=32)\n                translate([r-rounding, 0, 0])\n                    circle(r=rounding);\n    }\n    \n    // flat base\n    cylinder(h=2, r=r+1, center=false);\n}\n\nnub_conical();",
    "renders": false
  },
  {
    "basic_shape": "nub_half_sphere",
    "openscad_code": "// nub_half_sphere.scad\n// half-sphere (dome) with rounded base edge\n\nd = 50;           // dome diameter\nr = d/2;          // dome radius\nfillet_r = 3;     // base edge rounding radius\nh = 25;           // height of cylinder base\n\n// rounded base cylinder\ndifference() {\n    cylinder(h=h, r=r, $fn=60);\n    translate([0,0,-0.1])\n        cylinder(h=h+0.2, r=r-fillet_r, $fn=60);\n}\n\n// half-sphere on top\ntranslate([0,0,h])\n    sphere(r=r, $fn=60);\n\n// fillet ring\ntranslate([0,0,h])\n    rotate_extrude(angle=90, $fn=60)\n        translate([r-fillet_r, 0])\n            circle(r=fillet_r);",
    "renders": false
  },
  {
    "basic_shape": "post",
    "openscad_code": "// Medium-complexity post with rounded top and chamfered base\npost_h = 100;\npost_r = 20;\nchamfer = 3;\nround_r = 10;\n\ndifference() {\n    union() {\n        // Main post body\n        cylinder(h = post_h - round_r, r = post_r);\n\n        // Rounded top\n        translate([0, 0, post_h - round_r])\n            sphere(r = round_r);\n    }\n\n    // Chamfer at base\n    translate([0, 0, -1])\n        cylinder(h = chamfer + 2, r1 = post_r + 1, r2 = post_r - chamfer, $fn = 32);\n}",
    "renders": false
  },
  {
    "basic_shape": "post_round",
    "openscad_code": "$fn = 32;\n\n// Main post body\ncylinder(h = 100, r = 20, center = false);\n\n// Rounded top cap\ntranslate([0, 0, 100])\n    sphere(r = 20);\n\n// Rounded bottom cap (optional for full rounding)\ntranslate([0, 0, 0])\n    sphere(r = 20);",
    "renders": false
  },
  {
    "basic_shape": "post_square",
    "openscad_code": "// post_square: square post with rounded top edges and base fillet\nmodule post_square(h=100, w=30, r=5) {\n    // main post body\n    difference() {\n        cube([w, w, h], center=true);\n\n        // rounded top edges\n        translate([0, 0, h/2 - r])\n        minkowski() {\n            cube([w - 2*r, w - 2*r, r*2], center=true);\n            sphere(r);\n        }\n\n        // remove inner cylinder to hollow post\n        cylinder(h=h+2, d=w - 6, center=true);\n    }\n\n    // base fillet ring\n    translate([0, 0, -h/2])\n    difference() {\n        cylinder(h=r, d=w+2, $fn=32);\n        cylinder(h=r+1, d=w, $fn=32);\n    }\n}\n\npost_square();",
    "renders": false
  },
  {
    "basic_shape": "post_tall",
    "openscad_code": "// Post_tall - medium complexity with rounded top and base\nmodule post_tall(h = 120, r = 25) {\n    // Main post body\n    cylinder(h = h - 2 * 2, r = r, $fn = 32);\n    \n    // Rounded top cap\n    translate([0, 0, h - 2 * 2])\n        sphere(r = r, $fn = 32);\n    \n    // Rounded base\n    translate([0, 0, 0])\n        sphere(r = r, $fn = 32);\n}\n\npost_tall();",
    "renders": false
  },
  {
    "basic_shape": "post_short",
    "openscad_code": "// post_short - medium complexity rounded post with flattened top and bottom\nmodule post_short() {\n    // Create rounded edges using minkowski\n    minkowski() {\n        // Core post shape - slightly shorter to account for rounding\n        cylinder(h = 90, r = 20, $fn = 32);\n        \n        // Small sphere for rounding\n        sphere(r = 5, $fn = 16);\n    }\n    \n    // Flatten top and bottom by cutting off rounded portions\n    difference() {\n        children(0);\n        \n        // Remove top dome\n        translate([0, 0, 95]) \n            cylinder(h = 10, r = 25, $fn = 32);\n        \n        // Remove bottom dome  \n        translate([0, 0, -10]) \n            cylinder(h = 10, r = 25, $fn = 32);\n    }\n}\n\npost_short();",
    "renders": false
  },
  {
    "basic_shape": "post_thick",
    "openscad_code": "// post_thick - medium complexity\n// Thick post with rounded top and base fillets\n\nfillet_r = 8;\npost_h = 100;\npost_r = 25;\n\n// main post cylinder\ncylinder(h=post_h - 2 * fillet_r, r=post_r, $fn=40);\n\n// top rounded cap\ntranslate([0, 0, post_h - fillet_r])\n    sphere(r=fillet_r, $fn=40);\n\n// bottom rounded base\ntranslate([0, 0, fillet_r])\n    sphere(r=fillet_r, $fn=40);\n\n// central through hole\ndifference() {\n    translate([0, 0, -1])\n        cylinder(h=post_h + 2, r=post_r, $fn=40);\n    translate([0, 0, -2])\n        cylinder(h=post_h + 4, r=post_r - 5, $fn=40);\n}",
    "renders": false
  },
  {
    "basic_shape": "post_thin",
    "openscad_code": "module post_thin(h=100, r=5, chamfer=2) {\n    difference() {\n        cylinder(h=h, r=r, $fn=32);\n        // top chamfer\n        translate([0, 0, h - chamfer])\n            cylinder(h=chamfer + 0.1, r1=r, r2=r - chamfer, $fn=32);\n        // bottom chamfer\n        translate([0, 0, -0.05])\n            cylinder(h=chamfer + 0.1, r1=r - chamfer, r2=r, $fn=32);\n    }\n}\n\npost_thin();",
    "renders": false
  },
  {
    "basic_shape": "post_tapered",
    "openscad_code": "// Post_tapered.scad\n// Medium complexity: tapered cylinder with rounded top and bottom edges\n\n$fn = 32;\n\n// Main body: tapered cylinder\ndifference() {\n    cylinder(h=120, r1=25, r2=15, center=true);\n\n    // Rounded top edge\n    translate([0, 0, 55])\n        cylinder(h=20, r1=12, r2=0, center=true);\n    \n    // Rounded bottom edge\n    translate([0, 0, -55])\n        cylinder(h=20, r1=0, r2=22, center=true);\n}\n\n// Add small fillet rings for smoother transitions\nunion() {\n    // Top fillet\n    translate([0, 0, 50])\n        cylinder(h=5, r1=13, r2=15, center=true);\n    \n    // Bottom fillet\n    translate([0, 0, -50])\n        cylinder(h=5, r1=25, r2=23, center=true);\n}",
    "renders": false
  },
  {
    "basic_shape": "post_fluted",
    "openscad_code": "// Fluted post with rounded top and base fillets\nmodule fluted_post(height=100, radius=25, flutes=8, fillet=5) {\n    flute_width = 2 * PI * radius / flutes / 2;\n    \n    // Main post\n    difference() {\n        // Base cylinder with fillets\n        cylinder(h=height, r=radius, $fn=64);\n        \n        // Flutes (vertical grooves)\n        for(i=[0:flutes-1]) {\n            rotate([0, 0, i * 360/flutes])\n                translate([radius - flute_width/2, 0, 0])\n                    cube([flute_width, radius*2, height], center=true);\n        }\n    }\n    \n    // Rounded top\n    translate([0, 0, height])\n        sphere(r=radius, $fn=64);\n    \n    // Base fillet ring\n    translate([0, 0, 0])\n        cylinder(h=fillet, r1=radius-fillet, r2=radius, $fn=64);\n}\n\nfluted_post();",
    "renders": false
  },
  {
    "basic_shape": "foot",
    "openscad_code": "translate([0, 0, 10])\ndifference() {\n    union() {\n        // sole plate\n        cube([80, 40, 10], center = true);\n        \n        // heel cylinder\n        translate([0, -20, 5])\n            cylinder(h = 30, r = 20, center = true);\n        \n        // toe cylinder\n        translate([0, 20, 5])\n            cylinder(h = 30, r = 20, center = true);\n    }\n    \n    // arch cutout\n    translate([0, 0, 10])\n        cube([60, 60, 10], center = true);\n}",
    "renders": false
  },
  {
    "basic_shape": "foot_round",
    "openscad_code": "// Simple rounded foot with beveled base\n$fn = 48;\n\n// Main rounded body\nsphere(r = 25);\n\n// Beveled base ring\ntranslate([0, 0, -20])\ndifference() {\n    cylinder(h = 20, r1 = 30, r2 = 25);\n    cylinder(h = 21, r = 20);\n}\n\n// Flat top surface\ntranslate([0, 0, 25])\ndifference() {\n    cylinder(h = 5, r = 25);\n    cylinder(h = 6, r = 20);\n}",
    "renders": false
  },
  {
    "basic_shape": "foot_square",
    "openscad_code": "// Simple square foot with rounded top edge and bottom recess\n$fn = 64;\n\nmodule foot_square() {\n    // Main block with rounded top corners\n    difference() {\n        // Outer rounded cube\n        minkowski() {\n            cube([80, 80, 25], center=true);\n            sphere(r=5);\n        }\n        \n        // Flatten bottom\n        translate([0, 0, -15])\n            cube([100, 100, 20], center=true);\n        \n        // Recess on bottom for mounting\n        translate([0, 0, -12])\n            cube([60, 60, 6], center=true);\n    }\n}\n\nfoot_square();",
    "renders": false
  },
  {
    "basic_shape": "foot_small",
    "openscad_code": "// foot_small\n$fn = 32;\n\n// Main foot block\ndifference() {\n    // Rounded block\n    minkowski() {\n        cube([40, 25, 15], center = true);\n        sphere(3);\n    }\n    \n    // Bottom arch\n    translate([0, 0, -7.5])\n        cube([30, 25, 8], center = true);\n}\n\n// Heel\ntranslate([-15, 0, -3.5])\n    cylinder(h = 7, r = 12, center = true);\n\n// Toe\ntranslate([15, 0, -3.5])\n    cylinder(h = 7, r = 12, center = true);",
    "renders": false
  },
  {
    "basic_shape": "foot_large",
    "openscad_code": "// Basic foot_large - rounded rectangular block with slight taper\nmodule foot_large() {\n    // Main block with rounded edges\n    difference() {\n        // Rounded base block\n        minkowski() {\n            cube([80, 40, 20], center=true);\n            sphere(r=5);\n        }\n        \n        // Cut bottom flat\n        translate([0, 0, -15])\n            cube([200, 200, 20], center=true);\n    }\n    \n    // Tapered heel extension\n    translate([35, 0, -7.5])\n        cube([30, 35, 5], center=true);\n}\n\nfoot_large();",
    "renders": false
  },
  {
    "basic_shape": "foot_tall",
    "openscad_code": "// Medium-complexity foot_tall (a tall cylinder with rounded top and base)\ndifference() {\n    // Main tall body with rounded top\n    union() {\n        cylinder(h=110, r1=25, r2=25, $fn=64);  // Shaft\n        sphere(d=50, $fn=64);                   // Rounded top\n        translate([0,0,-5]) cylinder(h=5, r1=30, r2=25, $fn=64); // Flared base\n    }\n    // Hollow center\n    translate([0,0,-5]) cylinder(h=115, r1=15, r2=15, $fn=64);\n}",
    "renders": false
  },
  {
    "basic_shape": "foot_short",
    "openscad_code": "// foot_short - rounded block base\n$fn = 32;\n\n// Main block\ndifference() {\n    // Rounded base\n    minkowski() {\n        cube([60, 40, 15], center = true);\n        sphere(3);\n    }\n    \n    // Cut bottom flat\n    translate([0, 0, -10])\n        cube([70, 50, 20], center = true);\n}\n\n// Front toe slope\ntranslate([30, 0, 0])\n    rotate([0, -90, 0])\n        cylinder(h = 40, r1 = 20, r2 = 0, center = true);\n\n// Rear heel slope\ntranslate([-30, 0, 0])\n    rotate([0, 90, 0])\n        cylinder(h = 40, r1 = 20, r2 = 0, center = true);",
    "renders": false
  },
  {
    "basic_shape": "foot_sloped",
    "openscad_code": "// Foot sloped - basic wedge with rounded front edge and bottom fillets\nmodule foot_sloped() {\n    // Main wedge body\n    difference() {\n        cube([80, 50, 20]);\n        \n        // Cut slope from back to front\n        translate([0, -5, 20])\n            rotate([0, -30, 0])\n            cube([100, 60, 20]);\n    }\n    \n    // Rounded front edge\n    translate([80, 25, 10])\n        rotate([90, 0, 0])\n        cylinder(h=50, r=10, $fn=20);\n    \n    // Bottom rear fillets\n    translate([5, 5, 0])\n        cylinder(h=5, r=5, $fn=16);\n    translate([75, 5, 0])\n        cylinder(h=5, r=5, $fn=16);\n}\n\nfoot_sloped();",
    "renders": false
  },
  {
    "basic_shape": "anchor",
    "openscad_code": "difference() {\n    // Main body\n    cylinder(h=80, r1=30, r2=25);\n    \n    // Cut shaft\n    translate([0, 0, -1])\n        cylinder(h=82, r1=10, r2=8);\n    \n    // Ring\n    translate([0, 0, 80])\n        cylinder(h=30, r1=25, r2=25);\n    \n    // Ring hole\n    translate([0, 0, 79])\n        cylinder(h=32, r1=15, r2=15);\n    \n    // Flukes\n    translate([30, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=50, r1=15, r2=0);\n    translate([-30, 0, 0])\n        rotate([0, -90, 0])\n            cylinder(h=50, r1=15, r2=0);\n}",
    "renders": false
  },
  {
    "basic_shape": "anchor_round",
    "openscad_code": "// anchor_round - medium complexity\n// rounded fluke anchor body with shank\n\n$fn = 32;\n\n// shank\ntranslate([0, 0, 90])\n    cylinder(h = 80, r = 8);\n\n// fluke body\ndifference() {\n    // main fluke\n    scale([1, 2, 0.5])\n        sphere(r = 30);\n    \n    // cut underside flat\n    translate([0, 0, -15])\n        cube([200, 200, 30], center = true);\n}\n\n// anchor ring\ntranslate([0, 0, 130])\n    rotate_extrude()\n        translate([15, 0, 0])\n            circle(r = 4);\n\n// small fluke tips\ntranslate([0, 40, 0])\n    rotate([0, 90, 0])\n        cylinder(h = 15, r1 = 8, r2 = 4);\n\ntranslate([0, -40, 0])\n    rotate([0, 90, 0])\n        cylinder(h = 15, r1 = 8, r2 = 4);",
    "renders": false
  },
  {
    "basic_shape": "anchor_square",
    "openscad_code": "// anchor_square - square base with rounded edges and central hole\n$fn = 32;\n\nsquare_size = 80;\nthickness = 12;\nedge_radius = 8;\nhole_d = 10;\n\ndifference() {\n    // rounded square base\n    linear_extrude(height = thickness, center = true)\n        offset(r = edge_radius)\n            offset(r = -edge_radius)\n                square(square_size, center = true);\n    \n    // central hole\n    cylinder(h = thickness + 2, r = hole_d/2, center = true);\n}",
    "renders": false
  },
  {
    "basic_shape": "anchor_large",
    "openscad_code": "$fn = 32;\n\nmodule anchor_large() {\n    // Main shank\n    cylinder(h = 80, r = 12);\n    \n    // Anchor stock (cross bar on top)\n    translate([0, 0, 80])\n        rotate([90, 0, 0])\n        cylinder(h = 60, r = 8);\n    \n    // Two flukes (arms)\n    translate([0, 0, 0])\n        rotate([0, 20, 45])\n        cylinder(h = 50, r1 = 20, r2 = 5);\n    \n    translate([0, 0, 0])\n        rotate([0, 20, -45])\n        cylinder(h = 50, r1 = 20, r2 = 5);\n    \n    // Rounded crown (base)\n    translate([0, 0, -15])\n        sphere(r = 20);\n}\n\nanchor_large();",
    "renders": false
  },
  {
    "basic_shape": "anchor_small",
    "openscad_code": "// anchor_small - simple fluked anchor shape\n$fn = 36;\n\n// main shank\ncylinder(h = 90, r = 8);\n\n// flukes\ntranslate([0, 0, 80])\n    rotate([0, 90, 0])\n    difference() {\n        cube([40, 20, 8], center = true);\n        translate([0, 0, -1])\n            cube([36, 16, 10], center = true);\n    }\n\n// stock perpendicular to flukes\ntranslate([0, 0, 50])\n    rotate([90, 0, 0])\n    cylinder(h = 60, r = 5);\n\n// ring\ntranslate([0, 0, 90])\n    rotate([90, 0, 0])\n    rotate_extrude()\n        translate([15, 0])\n            circle(r = 5);",
    "renders": false
  },
  {
    "basic_shape": "anchor_hollow",
    "openscad_code": "// Anchor hollow - medium complexity\n$fn = 32;\n\nmodule anchor_hollow() {\n    difference() {\n        // Outer rounded anchor body\n        hull() {\n            translate([0, -20, 0]) sphere(r=15);\n            translate([0, 20, 0]) sphere(r=15);\n        }\n        \n        // Top ring\n        rotate_extrude(angle=360, $fn=64)\n            translate([30, 0, 0]) circle(r=8);\n        \n        // Hollow center\n        translate([0, 0, -5]) cylinder(h=50, r1=12, r2=8);\n        \n        // Bottom hollow\n        translate([0, 0, -20]) cylinder(h=20, r=10);\n    }\n}\n\nanchor_hollow();",
    "renders": false
  },
  {
    "basic_shape": "anchor_solid",
    "openscad_code": "// Anchor with rounded shank and flukes\n$fn = 32;\n\n// Main shank\nunion() {\n    translate([0, 0, 10])\n        cylinder(h=80, r=8);\n\n    // Rounded top\n    translate([0, 0, 90])\n        sphere(r=8);\n\n    // Flukes\n    rotate([0, 0, 45])\n        translate([0, 0, 25])\n            difference() {\n                cube([50, 5, 40], center=true);\n                translate([0, 0, 20])\n                    rotate([0, 45, 0])\n                        cube([60, 10, 30], center=true);\n            }\n\n    rotate([0, 0, -45])\n        translate([0, 0, 25])\n            difference() {\n                cube([50, 5, 40], center=true);\n                translate([0, 0, 20])\n                    rotate([0, -45, 0])\n                        cube([60, 10, 30], center=true);\n            }\n\n    // Ring hole\n    translate([0, 0, 85])\n        rotate([90, 0, 0])\n            cylinder(h=20, r1=5, r2=5);\n    translate([0, 10, 85])\n        rotate([90, 0, 0])\n            cylinder(h=20, r1=3, r2=3);\n}",
    "renders": false
  },
  {
    "basic_shape": "boss",
    "openscad_code": "// Boss with rounded top and mounting hole\nheight = 60;\nbase_d = 80;\ntop_d = 60;\nhole_d = 20;\nfillet_r = 5;\n\ndifference() {\n    // Main boss shape\n    union() {\n        // Cylindrical base\n        cylinder(h = height * 0.7, r = base_d/2, $fn = 64);\n        \n        // Rounded top\n        translate([0, 0, height * 0.7])\n            cylinder(h = height * 0.3, r1 = base_d/2, r2 = top_d/2, $fn = 64);\n    }\n    \n    // Mounting hole\n    translate([0, 0, -1])\n        cylinder(h = height + 2, r = hole_d/2, $fn = 32);\n    \n    // Edge fillets\n    translate([0, 0, height * 0.7])\n        cylinder(h = height * 0.3 + 2, r = top_d/2 + 1, $fn = 64);\n}",
    "renders": false
  },
  {
    "basic_shape": "boss_round",
    "openscad_code": "// boss_round â medium complexity\n// 20 mm Ã base, 8 mm Ã post, 25 mm total height, all edges rounded\n\nmodule boss_round() {\n    // Base cylinder with rounded top edge\n    cylinder(h=5, r=10, $fn=64);\n    \n    // Rounded top fillet\n    translate([0,0,5])\n        cylinder(h=3, r1=10, r2=8, $fn=64);\n    \n    // Post cylinder\n    translate([0,0,8])\n        cylinder(h=17, r=4, $fn=64);\n    \n    // Rounded post top\n    translate([0,0,25])\n        sphere(r=4, $fn=64);\n}\n\nboss_round();",
    "renders": false
  },
  {
    "basic_shape": "boss_square",
    "openscad_code": "// boss_square.scad\n// Medium-complexity square boss with rounded top edges and central clearance hole\n\n// Overall dimensions\nboss_w = 60;\nboss_l = 60;\nboss_h = 30;\nfillet_r = 5;\nhole_d = 20;\n\n// Main block with rounded top edges\ndifference() {\n    union() {\n        // Main body\n        cube([boss_w, boss_l, boss_h - fillet_r], center = true);\n        \n        // Rounded top fillets\n        for (x = [-boss_w/2 + fillet_r, boss_w/2 - fillet_r])\n            for (y = [-boss_l/2 + fillet_r, boss_l/2 - fillet_r])\n                translate([x, y, boss_h/2 - fillet_r])\n                    cylinder(r = fillet_r, h = fillet_r, center = true);\n        \n        // Edge cylinders for rounded top perimeter\n        translate([0, 0, boss_h/2 - fillet_r]) {\n            // X edges\n            for (x = [-boss_w/2 + fillet_r, boss_w/2 - fillet_r])\n                translate([x, 0, 0])\n                    cylinder(r = fillet_r, h = boss_l - 2*fillet_r, center = true);\n            // Y edges\n            for (y = [-boss_l/2 + fillet_r, boss_l/2 - fillet_r])\n                translate([0, y, 0])\n                    rotate([0, 90, 0])\n                        cylinder(r = fillet_r, h = boss_w - 2*fillet_r, center = true);\n        }\n    }\n    \n    // Central through hole\n    rotate([0, 0, 0])\n        cylinder(d = hole_d, h = boss_h + 2, center = true);\n}",
    "renders": false
  },
  {
    "basic_shape": "boss_large",
    "openscad_code": "// boss_large - raised circular platform with rounded top and mounting holes\nmodule boss_large() {\n    // Main platform with rounded top\n    linear_extrude(height=20, convexity=10)\n    offset(r=5)\n    offset(r=-5)\n    circle(d=80);\n    \n    // Cylindrical base\n    cylinder(h=5, d=90, $fn=100);\n    \n    // Four mounting holes\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([30, 0, -1])\n        cylinder(h=22, d=8, $fn=32);\n    }\n}\n\nboss_large();",
    "renders": false
  },
  {
    "basic_shape": "boss_small",
    "openscad_code": "// boss_small - medium complexity\n// Small cylindrical boss with rounded top and base fillet\n\n$fn = 32;\n\n// Main boss body with rounded top\nunion() {\n    // Cylindrical base\n    cylinder(h = 8, r = 15, center = false);\n    \n    // Rounded top\n    translate([0, 0, 8])\n        sphere(r = 15);\n}\n\n// Central hole\ndifference() {\n    // Base cylinder\n    cylinder(h = 8, r = 15, center = false);\n    \n    // Hole through center\n    translate([0, 0, -1])\n        cylinder(h = 10, r = 5, center = false);\n    \n    // Counterbore at top\n    translate([0, 0, 8])\n        cylinder(h = 2, r = 8, center = false);\n}\n\n// Base fillet\ndifference() {\n    // Outer fillet\n    cylinder(h = 3, r = 18, center = false);\n    \n    // Inner cut to create fillet\n    translate([0, 0, 3])\n        cylinder(h = 3, r = 15, center = false);\n}",
    "renders": false
  },
  {
    "basic_shape": "boss_tall",
    "openscad_code": "// Tall boss with rounded top and base fillet\n\nh = 80;           // total height\nr = 30;           // radius\nf = 3;            // fillet radius\n\nunion() {\n    // main cylinder\n    cylinder(h=h-f, r=r, center=false);\n\n    // rounded top\n    translate([0,0,h-f])\n        sphere(r=r);\n\n    // base fillet\n    difference() {\n        cylinder(h=f, r=r, center=false);\n        translate([0,0,-f])\n            cylinder(h=f*2, r=r-f, center=false);\n    }\n}",
    "renders": false
  },
  {
    "basic_shape": "boss_short",
    "openscad_code": "// boss_short.scad\n// Short cylindrical boss with rounded top and filleted base\n\n// Main cylinder body\ncylinder(h=30, r=35, $fn=50);\n\n// Rounded top dome\ntranslate([0, 0, 30])\n    sphere(r=35, $fn=50);\n\n// Fillet at base (remove sharp edge)\ndifference() {\n    cylinder(h=5, r1=40, r2=35, $fn=50);\n    translate([0, 0, -0.1])\n        cylinder(h=5.2, r=34.9, $fn=50);\n}\n\n// Center hole\ntranslate([0, 0, -1])\n    cylinder(h=37, r=15, $fn=50);",
    "renders": false
  },
  {
    "basic_shape": "boss_tapered",
    "openscad_code": "module boss_tapered(h=40, r_base=25, r_top=15, fillet=3){\n    difference(){\n        cylinder(h=h, r1=r_base, r2=r_top, $fn=32);\n\n        // Top edge fillet\n        translate([0,0,h-fillet])\n            cylinder(h=fillet+0.1, r1=r_top-fillet, r2=r_top+0.1, $fn=32);\n\n        // Bottom edge fillet\n        translate([0,0,-0.1])\n            cylinder(h=fillet+0.1, r1=r_base+0.1, r2=r_base-fillet, $fn=32);\n    }\n\n    // Center hole\n    cylinder(h=h+0.2, r=6, center=true, $fn=32);\n}\n\nboss_tapered();",
    "renders": false
  },
  {
    "basic_shape": "recess",
    "openscad_code": "difference() {\n    // Main block with rounded top edges\n    translate([0, 0, -2])\n        minkowski() {\n            cube([80, 60, 20], center=true);\n            cylinder(h=0.1, r=4, $fn=16);\n        }\n\n    // Recess cavity with rounded bottom\n    translate([0, 0, 5])\n        hull() {\n            cylinder(h=15, r1=30, r2=25, $fn=32);\n            translate([0, 0, -0.1])\n                cylinder(h=0.1, r=25, $fn=32);\n        }\n}",
    "renders": false
  },
  {
    "basic_shape": "recess_round",
    "openscad_code": "// Recess with rounded edges â medium complexity primitive\n$fn = 32;\n\nmodule recess_round(d=80, h=20, wall=4, rad=5) {\n    inner_d = d - 2*wall;\n    difference() {\n        // outer cylinder with rounded top edge\n        minkowski() {\n            cylinder(h=h-rad, d=d, center=false);\n            sphere(r=rad);\n        }\n        // inner recess\n        translate([0, 0, -1])  // slight overcut\n            cylinder(h=h+2, d=inner_d, center=false);\n    }\n}\n\nrecess_round();",
    "renders": false
  },
  {
    "basic_shape": "recess_square",
    "openscad_code": "// Recessed square with rounded edges and center hole\nmodule recess_square(size=80, depth=10, radius=8, hole_d=20) {\n    difference() {\n        // Main square with rounded edges - outer frame\n        minkowski() {\n            cube([size, size, depth], center=true);\n            cylinder(h=0.1, r=radius, center=true);\n        }\n        \n        // Center recess\n        translate([0, 0, -depth/2 + 0.1])\n            cube([size - 2*radius - 4, size - 2*radius - 4, depth], center=true);\n        \n        // Center hole through bottom\n        translate([0, 0, -depth/2 - 1])\n            cylinder(h=depth + 2, d=hole_d, center=true);\n    }\n}\n\nrecess_square();",
    "renders": false
  },
  {
    "basic_shape": "recess_large",
    "openscad_code": "// Recess_large - medium complexity rounded rectangular recess\ndifference() {\n    // Outer block\n    cube([120, 80, 40], center=true);\n    \n    // Main recess with rounded edges\n    translate([0, 0, -5])\n    minkowski() {\n        cube([100, 60, 20], center=true);\n        sphere(r=5);\n    }\n}\n\n// Bottom fillet for recess\ntranslate([0, 0, -20])\ndifference() {\n    cube([100, 60, 2], center=true);\n    translate([0, 0, -1])\n    minkowski() {\n        cube([95, 55, 2], center=true);\n        sphere(r=3);\n    }\n}",
    "renders": false
  },
  {
    "basic_shape": "recess_small",
    "openscad_code": "// Recess_small - medium complexity with rounded edges\ndifference() {\n    // Outer block with rounded edges\n    minkowski() {\n        cube([60, 40, 20], center=true);\n        sphere(r=3);\n    }\n    \n    // Inner recess\n    translate([0, 0, 5])\n    minkowski() {\n        cube([50, 30, 15], center=true);\n        sphere(r=2);\n    }\n    \n    // Bottom access hole\n    translate([0, 0, -12])\n    cylinder(h=10, r=5, $fn=32);\n}",
    "renders": false
  },
  {
    "basic_shape": "recess_deep",
    "openscad_code": "difference() {\n    // Main recess block with rounded edges\n    minkowski() {\n        cube([80, 80, 40], center=true);\n        sphere(r=5);\n    }\n    \n    // Cut out the recess cavity\n    minkowski() {\n        cube([60, 60, 41], center=true);\n        sphere(r=3);\n    }\n    \n    // Add rounded bottom to the recess\n    translate([0, 0, -15])\n        cylinder(h=25, r1=30, r2=25, center=true, $fn=60);\n}",
    "renders": false
  },
  {
    "basic_shape": "recess_shallow",
    "openscad_code": "// Shallow rectangular recess with rounded inner edges\ndifference() {\n    // Outer block\n    cube([80, 60, 10], center = true);\n    \n    // Inner recess with rounded edges\n    translate([0, 0, -0.5])\n    minkowski() {\n        cube([60, 40, 10], center = true);\n        sphere(r = 5);\n    }\n}",
    "renders": false
  },
  {
    "basic_shape": "rib",
    "openscad_code": "$fn = 32;\n\ndifference() {\n    // Main rib block with rounded top\n    hull() {\n        translate([0, 0, 0])\n            cylinder(h=8, r=3);\n        translate([0, 0, 80])\n            cylinder(h=8, r=6);\n    }\n\n    // Central hollow channel\n    translate([0, 0, -1])\n        cylinder(h=82, r=2.5);\n        \n    // Mounting holes\n    translate([0, 0, 10])\n        cylinder(h=10, r=1.5);\n    translate([0, 0, 70])\n        cylinder(h=10, r=1.5);\n}",
    "renders": false
  },
  {
    "basic_shape": "rib_long",
    "openscad_code": "// rib_long - medium complexity\n// long rectangular bar with rounded ends\n\nlength = 120;\nwidth = 20;\nheight = 10;\ncorner_radius = height/2;\n\ndifference() {\n    union() {\n        // main body\n        cube([length - 2*corner_radius, width, height], center = true);\n        // rounded ends\n        translate([(length - corner_radius)/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = width, r = corner_radius, center = true);\n        translate([-(length - corner_radius)/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = width, r = corner_radius, center = true);\n    }\n    // center groove\n    cube([length + 2, 4, height + 2], center = true);\n}",
    "renders": false
  },
  {
    "basic_shape": "rib_short",
    "openscad_code": "// rib_short - short rib with rounded edges and slight taper\n$fn = 32;\n\n// Main body with rounded top and bottom edges\ndifference() {\n    // Tapered rounded body\n    hull() {\n        translate([0, 0, 5])\n            cylinder(h=2, r1=28, r2=30);\n        translate([0, 0, 28])\n            cylinder(h=2, r1=22, r2=24);\n    }\n    \n    // Hollow center\n    translate([0, 0, 0])\n        cylinder(h=35, r1=18, r2=20);\n}\n\n// Flat bottom base\ntranslate([0, 0, 0])\n    cylinder(h=5, r1=30, r2=30);\n\n// Rounded top cap\ntranslate([0, 0, 30])\n    sphere(r=24);",
    "renders": false
  },
  {
    "basic_shape": "rib_thick",
    "openscad_code": "// Ribbed thick plate (60 x 100 x 20 mm) with rounded edges and 5 ribs\nmodule rib_thick() {\n    plate = 60;\n    length = 100;\n    height = 20;\n    radius = 5;\n\n    // Main plate with rounded edges\n    difference() {\n        minkowski() {\n            cube([plate, length, height - radius]);\n            sphere(r = radius);\n        }\n\n        // Hollow out interior to create shell\n        translate([radius, radius, radius])\n            minkowski() {\n                cube([plate - 2*radius, length - 2*radius, height - 2*radius]);\n                sphere(r = 1);\n            }\n    }\n\n    // Add 5 vertical ribs\n    for (i = [1:4:20]) {\n        translate([i + 6, 0, 0])\n            minkowski() {\n                cube([6, length, height - radius]);\n                sphere(r = 2);\n            }\n    }\n}\n\nrib_thick();",
    "renders": false
  },
  {
    "basic_shape": "rib_thin",
    "openscad_code": "// rib_thin - thin curved rib with rounded edges\nmodule rib_thin() {\n    // Main thin curved plate\n    linear_extrude(height=4, center=true, twist=15)\n        offset(r=2)\n            difference() {\n                square([100, 30], center=true);\n                translate([0, 10, 0])\n                    square([90, 10], center=true);\n            }\n    \n    // Rounded top edge\n    translate([0, 15, 2])\n        rotate([90, 0, 0])\n            cylinder(h=100, r=2, center=true);\n    \n    // Rounded bottom edge\n    translate([0, -15, -2])\n        rotate([90, 0, 0])\n            cylinder(h=100, r=2, center=true);\n}\n\nrib_thin();",
    "renders": false
  },
  {
    "basic_shape": "rib_tall",
    "openscad_code": "// rib_tall - medium complexity\nmodule rib_tall(l=100, w=20, h=80, r=5) {\n    // main body\n    difference() {\n        union() {\n            // central slab\n            cube([l, w, h], center=true);\n            // rounded top cap\n            translate([0, 0, h/2 - r])\n                cylinder(h=r*2, r1=w/2, r2=w/2, center=true);\n        }\n        // round top edge\n        translate([0, 0, h/2 + r])\n            cube([l+1, w+1, r*2], center=true);\n    }\n}\n\nrib_tall();",
    "renders": false
  },
  {
    "basic_shape": "rib_short",
    "openscad_code": "// Rib short - basic geometric primitive\n// Medium complexity with rounded edges\n\n$fn = 32;\n\nmodule rib_short() {\n    // Main body with rounded edges\n    hull() {\n        translate([0, 0, 5]) cube([80, 30, 10], center = true);\n        translate([0, 0, -5]) cube([80, 30, 10], center = true);\n    }\n    \n    // Tapered ends\n    difference() {\n        hull() {\n            translate([-35, 0, 0]) sphere(r = 15);\n            translate([35, 0, 0]) sphere(r = 15);\n            cube([70, 26, 10], center = true);\n        }\n        \n        // Hollow center\n        cube([60, 22, 12], center = true);\n    }\n}\n\nrib_short();",
    "renders": false
  },
  {
    "basic_shape": "rib_tapered",
    "openscad_code": "// Rib tapered bar with rounded edges\nmodule rib_tapered() {\n    width = 100;\n    height = 20;\n    top_thick = 5;\n    base_thick = 12;\n    length = 80;\n    fillet = 2;\n    \n    // Tapered rib profile\n    difference() {\n        hull() {\n            translate([0, -base_thick/2, 0])\n                cube([length, base_thick, height], center=true);\n            translate([0, -top_thick/2, height/2])\n                cube([length, top_thick, height/2], center=true);\n        }\n        \n        // Corner rounding cuts\n        for(x = [-length/2 + fillet, length/2 - fillet])\n        for(z = [-height/2 + fillet, height/2 - fillet])\n            translate([x, 0, z])\n                sphere(r=fillet, $fn=16);\n    }\n}\n\nrib_tapered();",
    "renders": false
  },
  {
    "basic_shape": "flange",
    "openscad_code": "difference() {\n    // Main disc\n    cylinder(h = 12, r = 40, $fn = 48);\n\n    // Central hole\n    translate([0, 0, -1])\n        cylinder(h = 14, r = 20, $fn = 48);\n\n    // Mounting holes\n    for (a = [0:60:359])\n        rotate([0, 0, a])\n            translate([30, 0, -1])\n                cylinder(h = 14, r = 4, $fn = 16);\n\n    // Rounded top edge\n    translate([0, 0, 12])\n        cylinder(h = 2, r1 = 40, r2 = 38, $fn = 48);\n}",
    "renders": false
  },
  {
    "basic_shape": "flange_round",
    "openscad_code": "$fn = 32;\n\nd = 80;            // flange diameter\nt = 10;            // thickness\nhole_d = 8;        // bolt hole diameter\nbolt_circle = 60;  // bolt circle diameter\nn = 4;             // number of bolt holes\n\ndifference() {\n    // main disc\n    cylinder(h = t, r = d/2, center = true);\n\n    // rounded top edge\n    difference() {\n        translate([0, 0, t/2])\n            cylinder(h = t/2, r1 = d/2, r2 = d/2 - 2);\n        translate([0, 0, t/2 - 0.01])\n            cylinder(h = t/2 + 0.02, r = d/2 - 2, center = true);\n    }\n\n    // bolt holes\n    for(i = [0 : n-1])\n        rotate([0, 0, i * 360/n])\n            translate([bolt_circle/2, 0, 0])\n                cylinder(h = t + 1, r = hole_d/2, center = true);\n}",
    "renders": false
  },
  {
    "basic_shape": "flange_square",
    "openscad_code": "// Flange_square â 100 mm square plate, 10 mm thick, centered bolt pattern\nmodule flange_square(size=100, thick=10, hole_d=8, corner_r=5) {\n    difference() {\n        // Plate with rounded corners\n        linear_extrude(height=thick)\n            offset(r=corner_r)\n                offset(r=-corner_r)\n                    square(size, center=true);\n\n        // Four bolt holes on 70 mm PCD\n        for (a=[0:90:270])\n            rotate(a)\n                translate([70/2, 0, -1])\n                    cylinder(h=thick+2, d=hole_d, $fn=20);\n    }\n}\n\nflange_square();",
    "renders": false
  },
  {
    "basic_shape": "flange_large",
    "openscad_code": "// flange_large.scad\n$fn = 50;\n\n// Main disk\ndifference() {\n    cylinder(h=12, d=120);\n\n    // Center hole\n    cylinder(h=14, d=40);\n\n    // Bolt holes on PCD\n    for (a = [0:60:359])\n        rotate([0, 0, a])\n            translate([40, 0, -1])\n                cylinder(h=14, d=8);\n}\n\n// Rounded top edge\ndifference() {\n    translate([0, 0, 12])\n        cylinder(h=4, d=120);\n    translate([0, 0, 11.9])\n        cylinder(h=6, d=116);\n}",
    "renders": false
  },
  {
    "basic_shape": "flange_small",
    "openscad_code": "// Flange_small â medium complexity\n// Outer ring with rounded top edge, central bore, 4 bolt holes\n\nouter_d = 80;\ninner_d = 20;\nheight = 10;\nbolt_d = 6;\nbolt_circle = 50;\nedge_r = 2;\n\ndifference() {\n    union() {\n        // main disk\n        cylinder(h = height, r = outer_d/2, $fn = 60);\n        // rounded top edge\n        translate([0, 0, height - edge_r])\n            cylinder(h = edge_r, r1 = outer_d/2, r2 = outer_d/2 - edge_r, $fn = 60);\n    }\n    // central bore\n    translate([0, 0, -1])\n        cylinder(h = height + 2, r = inner_d/2, $fn = 60);\n    // bolt holes\n    for(a = [0:90:359])\n        rotate([0, 0, a])\n            translate([bolt_circle/2, 0, -1])\n                cylinder(h = height + 2, r = bolt_d/2, $fn = 20);\n}",
    "renders": false
  },
  {
    "basic_shape": "flange_thick",
    "openscad_code": "// Flange with rounded edges and bolt holes\n$fn = 50;\n\nmodule flange_thick() {\n    difference() {\n        // Main flange body with rounded edges\n        minkowski() {\n            cylinder(h=10, r=40, center=true);\n            sphere(r=2);\n        }\n        \n        // Central hole\n        cylinder(h=12, r=15, center=true);\n        \n        // Bolt holes\n        for(i=[0:3]) {\n            rotate([0, 0, 90*i])\n                translate([25, 0, 0])\n                    cylinder(h=12, r=3.5, center=true);\n        }\n    }\n}\n\nflange_thick();",
    "renders": false
  },
  {
    "basic_shape": "flange_thin",
    "openscad_code": "// flange_thin.scad\n$fn = 36;\n\n// main disk\ndifference() {\n    // outer rounded disk\n    union() {\n        cylinder(h=6, r=50);\n        cylinder(h=3, r=50);\n    }\n    // central hole\n    cylinder(h=7, r=12);\n    // bolt holes\n    for (a = [0:60:300])\n        rotate([0,0,a])\n            translate([35,0,0])\n                cylinder(h=7, r=4);\n}",
    "renders": false
  },
  {
    "basic_shape": "flange_with_holes",
    "openscad_code": "// flange_with_holes - medium complexity\nd = 80;              // flange diameter\nt = 10;              // thickness\nhd = 8;              // hole diameter\nn = 4;               // number of holes\nr = 30;              // hole circle radius\n\n// main disc with rounded edges\ndifference() {\n    cylinder(h = t, r = d/2, $fn = 64);\n    translate([0, 0, -0.1])\n        cylinder(h = t + 0.2, r = d/2 - 3, $fn = 64);\n}\n\n// bolt holes\nfor (i = [0 : n-1]) {\n    rotate([0, 0, i * 360/n])\n        translate([r, 0, -1])\n            cylinder(h = t + 2, r = hd/2, $fn = 32);\n}",
    "renders": false
  },
  {
    "basic_shape": "collar",
    "openscad_code": "// Basic collar with rounded edges\n$fn = 32;\n\ndifference() {\n    // Outer rounded ring\n    minkowski() {\n        cylinder(h=10, r=45);\n        sphere(r=3);\n    }\n    \n    // Inner hole\n    minkowski() {\n        cylinder(h=12, r=35);\n        sphere(r=2);\n    }\n    \n    // Bottom slice for flat base\n    translate([0, 0, -1])\n        cube([200, 200, 2], center=true);\n}\n\n// Top chamfer\ndifference() {\n    translate([0, 0, 10])\n        cylinder(h=3, r1=48, r2=45);\n    translate([0, 0, 9])\n        cylinder(h=5, r=35);\n}",
    "renders": false
  },
  {
    "basic_shape": "collar_tall",
    "openscad_code": "// collar_tall\n$fn = 32;\n\nh = 80;\nr_out = 35;\nr_in = 25;\nedge_r = 3;\n\ndifference() {\n    cylinder(h = h, r = r_out, center = true);\n    cylinder(h = h + 1, r = r_in, center = true);\n}\n\ntranslate([0, 0, -h/2 + edge_r])\n    cylinder(h = edge_r * 2, r1 = r_out - edge_r, r2 = r_out, center = true);\n\ntranslate([0, 0,  h/2 - edge_r])\n    cylinder(h = edge_r * 2, r1 = r_out, r2 = r_out - edge_r, center = true);",
    "renders": false
  },
  {
    "basic_shape": "collar_short",
    "openscad_code": "// collar_short - medium complexity\ndifference() {\n    // main collar ring with rounded edges\n    minkowski() {\n        difference() {\n            cylinder(h=15, r=40, $fn=60);\n            cylinder(h=18, r=32, $fn=60);\n        }\n        sphere(r=2, $fn=20);\n    }\n    \n    // small keying notch\n    translate([0, -40, 7.5])\n        rotate([90, 0, 0])\n            cylinder(h=10, r=3, $fn=20);\n    \n    // two alignment holes\n    translate([25, 0, 7.5])\n        rotate([90, 0, 0])\n            cylinder(h=30, r=2, $fn=20);\n    \n    translate([-25, 0, 7.5])\n        rotate([90, 0, 0])\n            cylinder(h=30, r=2, $fn=20);\n}",
    "renders": false
  },
  {
    "basic_shape": "collar_thick",
    "openscad_code": "// Collar thick - medium complexity with rounded edges\ndifference() {\n    // Outer rounded collar\n    minkowski() {\n        cylinder(h=40, r=60);\n        sphere(r=5);\n    }\n    \n    // Inner hole\n    minkowski() {\n        cylinder(h=50, r=30);\n        sphere(r=5);\n    }\n    \n    // Top bevel\n    translate([0, 0, 35])\n        cylinder(h=10, r1=65, r2=55);\n    \n    // Bottom bevel\n    translate([0, 0, -5])\n        cylinder(h=10, r1=55, r2=65);\n}",
    "renders": false
  },
  {
    "basic_shape": "collar_thin",
    "openscad_code": "// Collar_thin - thin ring with rounded top and bottom edges\n$fn=50;\nouter_r = 30;\ninner_r = 25;\nheight = 8;\nround_r = 2;\n\ndifference() {\n    union() {\n        cylinder(h=height-2*round_r, r=outer_r-round_r);\n        translate([0,0,0]) cylinder(h=round_r, r1=outer_r-round_r, r2=outer_r);\n        translate([0,0,height-round_r]) cylinder(h=round_r, r1=outer_r, r2=outer_r-round_r);\n    }\n    cylinder(h=height+1, r=inner_r, center=true);\n}",
    "renders": false
  },
  {
    "basic_shape": "collar_conical",
    "openscad_code": "// Conical collar with rounded edges and slight taper\n$fn = 32;\n\n// Main parameters\nbase_d = 80;\ntop_d = 60;\nheight = 30;\nedge_r = 3;\nwall_t = 4;\n\n// Outer cone\ndifference() {\n    cylinder(h = height, r1 = base_d/2, r2 = top_d/2, center = true);\n    translate([0, 0, -edge_r])\n        cylinder(h = height + 2*edge_r, r1 = (base_d/2)-wall_t, r2 = (top_d/2)-wall_t, center = true);\n}\n\n// Top rounded edge\ntranslate([0, 0, height/2])\n    rotate_extrude(angle = 360, convexity = 10)\n        translate([(top_d/2)-wall_t-edge_r, 0, 0])\n            circle(r = edge_r);\n\n// Bottom rounded edge\ntranslate([0, 0, -height/2])\n    rotate_extrude(angle = 360, convexity = 10)\n        translate([(base_d/2)-wall_t-edge_r, 0, 0])\n            circle(r = edge_r);",
    "renders": false
  },
  {
    "basic_shape": "collar_cylindrical",
    "openscad_code": "$fn = 50;\n\ndifference() {\n    // Main collar body with rounded top edge\n    union() {\n        cylinder(h = 30, r = 35, center = true);               // Base cylinder\n        translate([0, 0, 15])\n            cylinder(h = 5, r1 = 35, r2 = 30, center = true);  // Chamfered top\n    }\n    \n    // Center hole\n    cylinder(h = 32, r = 25, center = true);\n    \n    // Side slot\n    translate([0, -50, 0])\n        cube([50, 100, 32], center = true);\n}",
    "renders": false
  },
  {
    "basic_shape": "boss_cylindrical",
    "openscad_code": "// boss_cylindrical - medium complexity\n// basic cylinder with rounded top and mounting hole\n\n$fn = 50;\n\n// main body\nunion() {\n    // cylindrical base\n    cylinder(h = 30, r = 30);\n    \n    // rounded top\n    translate([0, 0, 30])\n        cylinder(h = 10, r1 = 30, r2 = 25);\n    \n    // top dome\n    translate([0, 0, 40])\n        sphere(r = 25);\n}\n\n// central hole\ntranslate([0, 0, -1])\n    cylinder(h = 52, r = 12.5);",
    "renders": false
  },
  {
    "basic_shape": "boss_conical",
    "openscad_code": "// boss_conical.scad\n// Medium complexity boss with rounded edge and counterbore\n\nmodule boss_conical(h = 20, r_base = 20, r_top = 15, r_bore = 6, h_bore = 8, fillet = 2) {\n    difference() {\n        union() {\n            // main conical body\n            cylinder(h = h, r1 = r_base, r2 = r_top, $fn = 64);\n            \n            // rounded top edge\n            translate([0, 0, h])\n                rotate_extrude($fn = 64)\n                    translate([r_top - fillet, 0])\n                        circle(r = fillet);\n        }\n        \n        // counterbore\n        translate([0, 0, -1])\n            cylinder(h = h_bore + 2, r = r_bore, $fn = 32);\n    }\n}\n\nboss_conical();",
    "renders": false
  },
  {
    "basic_shape": "boss_square",
    "openscad_code": "// boss_square - medium complexity square boss with rounded top edges and base fillet\nmodule boss_square(size = 60, height = 25, radius = 5) {\n    // Main square body\n    cube([size, size, height - radius], center = true);\n    \n    // Rounded top edges\n    translate([0, 0, height/2 - radius/2])\n        minkowski() {\n            cube([size - 2*radius, size - 2*radius, 0.1], center = true);\n            cylinder(h = radius, r = radius, center = true);\n        }\n    \n    // Base fillet\n    difference() {\n        translate([0, 0, -height/2 + radius/2])\n            cube([size, size, radius], center = true);\n        translate([0, 0, -height/2 - 0.1])\n            minkowski() {\n                cube([size - 2*radius, size - 2*radius, 0.1], center = true);\n                sphere(r = radius);\n            }\n    }\n}\n\nboss_square();",
    "renders": false
  },
  {
    "basic_shape": "boss_rounded",
    "openscad_code": "// boss_rounded.scad\n\n// Main body with rounded top\nh = 35;\nr = 25;\ntop_radius = 20;\n\n// Cylindrical base\ncylinder(h=h-8, r=r, $fn=60);\n\n// Rounded top\ntranslate([0, 0, h-8])\n    sphere(r=top_radius, $fn=60);\n\n// Optional fillet at base (difference to make it cleaner)\ndifference() {\n    union() {\n        cylinder(h=h-8, r=r, $fn=60);\n        translate([0, 0, h-8])\n            sphere(r=top_radius, $fn=60);\n    }\n    // Remove internal overlap\n    translate([0, 0, -0.1])\n        cylinder(h=h-8+0.2, r=r-0.1, $fn=60);\n}",
    "renders": false
  },
  {
    "basic_shape": "pocket",
    "openscad_code": "difference() {\n    // main block\n    translate([0, 0, 2])\n        minkowski() {\n            cube([80, 60, 20], center=true);\n            sphere(2);\n        }\n\n    // rounded pocket cavity\n    translate([0, 0, 1])\n        minkowski() {\n            cube([70, 50, 10], center=true);\n            sphere(2);\n        }\n\n    // cut through bottom\n    translate([0, 0, -5])\n        cube([200, 200, 10], center=true);\n}",
    "renders": false
  },
  {
    "basic_shape": "pocket_round",
    "openscad_code": "// pocket_round: a shallow cylinder with rounded top edge and small corner fillets\nh = 12;               // overall height\nr = 45;               // pocket radius\ncr = 3;               // corner fillet radius\ntop_r = 2;            // top edge round-over\n\ndifference() {\n    // main body with rounded top edge\n    union() {\n        // lower cylinder\n        cylinder(h = h - top_r, r = r, $fn = 64);\n        // rounded top lip\n        translate([0, 0, h - top_r])\n            cylinder(h = top_r, r1 = r, r2 = r - top_r, $fn = 64);\n    }\n    // corner fillets\n    for (a = [0, 90, 180, 270])\n        rotate([0, 0, a])\n            translate([r - cr, 0, -0.1])\n                cylinder(h = cr + 0.2, r = cr, $fn = 20);\n    // central recess\n    translate([0, 0, -0.1])\n        cylinder(h = h + 0.2, r = r - 8, $fn = 64);\n}",
    "renders": false
  },
  {
    "basic_shape": "pocket_square",
    "openscad_code": "// Pocket square with rounded edges and slight taper\n$fn = 32;\n\n// Main square body with rounded edges\nhull() {\n    translate([0, 0, 2])\n        cube([70, 70, 1], center = true);\n    translate([0, 0, 0])\n        cube([65, 65, 1], center = true);\n}\n\n// Folded corner detail\ndifference() {\n    translate([30, 30, 2.5])\n        rotate([0, 0, 45])\n            cube([25, 25, 1], center = true);\n    translate([30, 30, 2.5])\n        rotate([0, 0, 45])\n            cube([20, 20, 2], center = true);\n}",
    "renders": false
  },
  {
    "basic_shape": "pocket_deep",
    "openscad_code": "// Pocket â rectangular recess with rounded bottom edges\n$fn = 32;\n\n// Overall dimensions\npocket_w = 80;\npocket_d = 60;\npocket_h = 25;\n\n// Corner radius for rounded bottom and edges\nr = 8;\n\ndifference() {\n    // Outer block\n    cube([pocket_w, pocket_d, pocket_h]);\n\n    // Inner recess\n    translate([r, r, -1])\n    hull() {\n        // Four rounded bottom corners\n        translate([0, 0, 0]) cylinder(h = pocket_h + 2, r = r);\n        translate([pocket_w - 2*r, 0, 0]) cylinder(h = pocket_h + 2, r = r);\n        translate([0, pocket_d - 2*r, 0]) cylinder(h = pocket_h + 2, r = r);\n        translate([pocket_w - 2*r, pocket_d - 2*r, 0]) cylinder(h = pocket_h + 2, r = r);\n    }\n}",
    "renders": false
  },
  {
    "basic_shape": "pocket_shallow",
    "openscad_code": "// Pocket shallow tray with rounded edges\n$fn=32;\n\n// Main tray body\ndifference() {\n    // Outer rounded box\n    minkowski() {\n        cube([90, 90, 20], center=true);\n        sphere(r=5);\n    }\n    \n    // Inner cavity\n    translate([0, 0, 5])\n    minkowski() {\n        cube([80, 80, 15], center=true);\n        sphere(r=3);\n    }\n}\n\n// Bottom feet (4 corners)\nfor(x=[-40, 40], y=[-40, 40])\n    translate([x, y, -15])\n    cylinder(h=5, r=3, center=true);",
    "renders": false
  },
  {
    "basic_shape": "pocket_large",
    "openscad_code": "// Pocket large - medium complexity\n// Rounded rectangular prism with shallow depth\n\nmodule pocket_large() {\n    // Outer rounded box\n    difference() {\n        // Main rounded shape\n        minkowski() {\n            cube([90, 80, 15], center=true);\n            sphere(5);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([80, 70, 20], center=true);\n            sphere(4);\n        }\n    }\n}\n\npocket_large();",
    "renders": false
  },
  {
    "basic_shape": "pocket_small",
    "openscad_code": "// pocket_small â rounded-edge box with shallow cavity\nwall = 3;\nouter = [40, 35, 12];\ninner = [34, 29, 6];\nradius = 4;\n\ndifference() {\n    // outer rounded box\n    minkowski() {\n        cube(outer - [radius*2, radius*2, 0], center = true);\n        cylinder(r = radius, h = outer.z, center = true);\n    }\n\n    // inner cavity\n    translate([0, 0, 2])\n    minkowski() {\n        cube(inner - [radius*2, radius*2, 0], center = true);\n        cylinder(r = radius, h = inner.z, center = true);\n    }\n}",
    "renders": false
  }
]