[
  {
    "musical_instrument": "guitar",
    "openscad_code": "// Guitar - Realistic style, medium complexity\n// Overall length ~90mm, printable at 1:1 scale\n\n$fn = 32;  // Smooth curves\nbody_t = 2.5;  // Wall thickness\n\nmodule body() {\n    // Main guitar body shape\n    hull() {\n        // Upper bout\n        translate([-15, 30, 0]) scale([0.8, 1, 1]) sphere(d=25);\n        // Lower bout\n        translate([-20, -25, 0]) scale([1.2, 1, 1]) sphere(d=35);\n        // Waist\n        translate([-5, 5, 0]) scale([0.6, 0.8, 1]) sphere(d=20);\n    }\n}\n\nmodule sound_hole() {\n    // Sound hole in center\n    translate([0, 0, body_t/2]) cylinder(h=body_t, d=10, $fn=64);\n}\n\nmodule bridge() {\n    // Bridge for strings\n    translate([0, -20, 0]) {\n        difference() {\n            cube([20, 6, 1.5], center=true);\n            for(i = [-2:1:2]) {\n                translate([i*3.5, 0, 0.5]) cylinder(h=2, d=1.5);\n            }\n        }\n    }\n}\n\nmodule neck() {\n    // Guitar neck\n    translate([0, 35, 0]) {\n        // Neck shaft\n        cube([6, 45, 3.5], center=true);\n        \n        // Headstock\n        translate([0, 27, 0]) {\n            cube([12, 18, 2.5], center=true);\n        }\n        \n        // Nut\n        translate([0, 19, 2.5]) cube([7, 1, 0.5], center=true);\n    }\n}\n\nmodule frets() {\n    // Frets along neck\n    for(i = [0:18]) {\n        y = 22 + i * 2.2;\n        scale_factor = 1 - (i * 0.015);\n        translate([0, y, 3.5]) scale([scale_factor, 1, 1]) cube([5.5, 0.5, 0.3], center=true);\n    }\n}\n\nmodule tuners() {\n    // Tuning pegs on headstock\n    for(i = [-2:1:2]) {\n        // Left side\n        translate([-8, 35 + i*3.5, 0]) rotate([90, 0, 0]) cylinder(h=4, d=2);\n        // Right side\n        translate([8, 35 + i*3.5, 0]) rotate([90, 0, 0]) cylinder(h=4, d=2);\n    }\n}\n\nmodule strings() {\n    // Simplified strings\n    for(i = [-2:1:2]) {\n        x = i * 1.5;\n        color(\"silver\") {\n            // From bridge to nut\n            hull() {\n                translate([x, -20, 1.5]) sphere(d=0.4);\n                translate([x, 19, 3.5]) sphere(d=0.4);\n            }\n            // From nut to tuner\n            hull() {\n                translate([x, 19, 3.5]) sphere(d=0.4);\n                translate([x*0.7 + (i>0?8:-8), 35 + i*3.5, 2]) sphere(d=0.4);\n            }\n        }\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Body with thickness\n        linear_extrude(height=body_t) body();\n        \n        // Neck and headstock\n        neck();\n        \n        // Bridge\n        bridge();\n        \n        // Tuners\n        tuners();\n    }\n    \n    // Cut sound hole\n    sound_hole();\n}\n\n// Add frets\nfrets();\n\n// Add strings\nstrings();",
    "renders": true
  },
  {
    "musical_instrument": "violin",
    "openscad_code": "// Realistic 3D-printable violin (medium complexity)\n// Overall length ~90 mm for FDM printing\n\n$fn = 36; // smooth curves\n\nmodule body() {\n    // main body hollow shell\n    difference() {\n        hull() {\n            // upper bout\n            scale([0.9,1.2,1])\n                sphere(d=28, center=true);\n            // lower bout\n            translate([0,35,0])\n                scale([1.2,1.4,1])\n                    sphere(d=35, center=true);\n            // waist\n            translate([0,-12,0])\n                scale([0.7,0.8,0.9])\n                    sphere(d=22, center=true);\n        }\n        // hollow cavity\n        translate([0,5,-1])\n            scale([0.85,0.85,0.8])\n                hull() {\n                    translate([0,10,0]) sphere(d=25, center=true);\n                    translate([0,-25,0]) sphere(d=30, center=true);\n                }\n    }\n}\n\nmodule neck() {\n    // fingerboard\n    translate([0,-47,8])\n        rotate([0,0,0])\n            cube([4,50,2], center=true);\n    \n    // neck shaft\n    translate([0,-47,5])\n        rotate([0,0,0])\n            scale([0.8,1,1])\n                cylinder(d1=8, d2=6, h=48);\n}\n\nmodule scroll() {\n    // scroll spiral\n    for(a=[0:20:340]) {\n        translate([0,-70,5])\n            rotate([0,0,a])\n                translate([5,0,0])\n                    cylinder(d=4, h=3, center=true);\n    }\n    // scroll pegbox top\n    translate([0,-70,7])\n        rotate([90,0,0])\n            cylinder(d=8, h=12, center=true);\n}\n\nmodule bridge() {\n    // bridge feet\n    translate([0,12,9])\n        union() {\n            translate([-4,0,0]) cube([2,4,3], center=true);\n            translate([4,0,0]) cube([2,4,3], center=true);\n            // bridge arch\n            translate([0,0,1.5])\n                cube([8,1,3], center=true);\n        }\n}\n\nmodule f_holes() {\n    // left f-hole\n    translate([-5,8,9])\n        rotate([0,0,-25])\n            difference() {\n                union() {\n                    cylinder(d=2.5, h=1, center=true);\n                    translate([0,8,0]) cylinder(d=2.5, h=1, center=true);\n                    translate([0,4,0]) cube([2,8,1], center=true);\n                }\n                translate([1,4,0]) cylinder(d=1, h=2, center=true);\n            }\n    // right f-hole\n    mirror([1,0,0])\n        translate([-5,8,9])\n            rotate([0,0,25])\n                difference() {\n                    union() {\n                        cylinder(d=2.5, h=1, center=true);\n                        translate([0,8,0]) cylinder(d=2.5, h=1, center=true);\n                        translate([0,4,0]) cube([2,8,1], center=true);\n                    }\n                    translate([1,4,0]) cylinder(d=1, h=2, center=true);\n                }\n}\n\nmodule tailpiece() {\n    // tailpiece\n    translate([0,22,8])\n        scale([0.3,1,1])\n            cube([8,12,2], center=true);\n}\n\nmodule strings() {\n    // four strings\n    for(x=[-1.5,-0.5,0.5,1.5]) {\n        hull() {\n            translate([x,-70,8]) cylinder(d=0.6, h=1, center=true);\n            translate([x,20,8]) cylinder(d=0.6, h=1, center=true);\n        }\n    }\n}\n\n// assemble violin\nunion() {\n    body();\n    neck();\n    scroll();\n    bridge();\n    f_holes();\n    tailpiece();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "cello",
    "openscad_code": "// Cello - realistic medium complexity\n// Overall size ~90mm tall\n// Wall thickness 1.5mm for 3D printing\n\n$fn = 36;\n\nmodule rounded_cube(size, r) {\n    hull() {\n        translate([r,r,r]) sphere(r);\n        translate([r,r,size.z-r]) sphere(r);\n        translate([r,size.y-r,r]) sphere(r);\n        translate([r,size.y-r,size.z-r]) sphere(r);\n        translate([size.x-r,r,r]) sphere(r);\n        translate([size.x-r,r,size.z-r]) sphere(r);\n        translate([size.x-r,size.y-r,r]) sphere(r);\n        translate([size.x-r,size.y-r,size.z-r]) sphere(r);\n    }\n}\n\nmodule string(anchor, length) {\n    rotate([0,90,0])\n        cylinder(h = length, d = 0.6, center = true);\n}\n\nmodule tailpiece() {\n    color(\"DarkGoldenrod\")\n    difference() {\n        translate([-9,0,0])\n            rotate([0,10,0])\n                scale([1,0.4,0.15])\n                    sphere(d = 18);\n        translate([-9,0,-1])\n            rotate([0,10,0])\n                scale([1,0.4,0.15])\n                    sphere(d = 16);\n    }\n}\n\nmodule bridge() {\n    color(\"DarkGoldenrod\")\n    union() {\n        translate([0,0,7])\n            cube([20,1.5,8], center=true);\n        for(i = [-7:3.5:7]) {\n            translate([i,0,11])\n                cube([1,1.5,1], center=true);\n        }\n    }\n}\n\nmodule fingerboard() {\n    color(\"DarkGoldenrod\")\n    translate([-30,0,16])\n        rotate([0,-6,0])\n            cube([55,4,2], center=true);\n}\n\nmodule scroll() {\n    color(\"DarkGoldenrod\")\n    union() {\n        translate([0,0,0])\n            rotate([90,0,0])\n                cylinder(h = 15, d1 = 12, d2 = 8, center=false);\n        translate([0,0,7.5])\n            rotate([90,0,0])\n                cylinder(h = 15, d1 = 8, d2 = 12, center=false);\n        translate([0,0,15])\n            rotate([90,0,0])\n                cylinder(h = 15, d1 = 12, d2 = 8, center=false);\n    }\n}\n\nmodule pegbox() {\n    color(\"DarkGoldenrod\")\n    difference() {\n        translate([0,0,40])\n            rotate([90,0,0])\n                cylinder(h = 20, d = 14, center=true);\n        // Peg holes\n        for(i = [-1,1]) {\n            translate([i*4,0,40])\n                rotate([0,90,0])\n                    cylinder(h = 15, d = 2, center=true);\n            translate([i*4,0,45])\n                rotate([0,90,0])\n                    cylinder(h = 15, d = 2, center=true);\n        }\n    }\n}\n\nmodule neck() {\n    color(\"DarkGoldenrod\")\n    difference() {\n        translate([0,0,25])\n            rotate([90,0,0])\n                cylinder(h = 30, d1 = 10, d2 = 8, center=true);\n        translate([0,0,25])\n            rotate([90,0,0])\n                cylinder(h = 30, d1 = 8, d2 = 6, center=true);\n    }\n}\n\nmodule body() {\n    color(\"DarkGoldenrod\")\n    difference() {\n        // Upper bout\n        translate([-20,0,0])\n            scale([1,0.7,0.2])\n                sphere(d = 40);\n        // Middle bout\n        translate([0,0,0])\n            scale([1,0.6,0.2])\n                sphere(d = 45);\n        // Lower bout\n        translate([20,0,0])\n            scale([1,0.8,0.2])\n                sphere(d = 50);\n        \n        // F-holes\n        translate([0,0,0])\n            scale([1,0.6,1])\n                cube([30,3,5], center=true);\n        translate([0,0,0])\n            scale([1,0.6,1])\n                cube([30,3,5], center=true);\n        \n        // Interior hollow\n        translate([-20,0,0])\n            scale([1,0.7,0.2])\n                sphere(d = 37);\n        translate([0,0,0])\n            scale([1,0.6,0.2])\n                sphere(d = 42);\n        translate([20,0,0])\n            scale([1,0.8,0.2])\n                sphere(d = 47);\n    }\n}\n\nmodule endpin() {\n    color(\"Silver\")\n    translate([25,0,-8])\n        cylinder(h = 4, d = 2, center=true);\n}\n\nmodule strings() {\n    color(\"Silver\")\n    for(i = [-6:4:6]) {\n        translate([i,0,0])\n            string([0,0,0], 70);\n    }\n}\n\n// Assembly\ntranslate([0,0,-10])\n    union() {\n        body();\n        neck();\n        pegbox();\n        scroll();\n        fingerboard();\n        bridge();\n        tailpiece();\n        endpin();\n        strings();\n    }",
    "renders": true
  },
  {
    "musical_instrument": "bass",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Bass Guitar\n// Overall length ≈ 95 mm, printable on most FDM machines\n\nmodule rounded_box(x,y,z,r) {\n    // Simple rounded-corner box, printable without supports\n    hull() {\n        for(i=[-1,1], j=[-1,1], k=[-1,1])\n            translate([i*(x/2-r), j*(y/2-r), k*(z/2-r)])\n                sphere(r=r, $fn=12);\n    }\n}\n\nmodule body() {\n    // Main body shape: double-cutaway bass body\n    difference() {\n        // Overall body silhouette\n        hull() {\n            translate([0,-25,0]) scale([1.4,1,1]) sphere(d=40, $fn=60);\n            translate([0, 25,0]) scale([1.2,1,1]) sphere(d=30, $fn=60);\n        }\n        // Neck pocket\n        translate([0,0,2]) cube([12,55,10], center=true);\n        // Control cavity (printable from bottom)\n        translate([18,-15,2]) cube([20,25,6], center=true);\n    }\n}\n\nmodule neck() {\n    // One-piece neck+headstock\n    color(\"BurlyWood\") union() {\n        // Neck shaft\n        translate([0,0,3]) cube([8,50,3], center=true);\n        // Headstock\n        translate([0,-30,1]) cube([12,20,1.5], center=true);\n    }\n}\n\nmodule fretboard() {\n    // Fretboard with frets\n    color(\"DarkGray\") difference() {\n        translate([0,-10,4.5]) cube([9,40,1], center=true);\n        // Side dots\n        for(pos=[-15,-5,5,15])\n            translate([4.5,pos,4.5]) cylinder(d=1,h=1.2,$fn=8);\n    }\n    // Frets\n    color(\"Silver\") for(f=[-17,-11,-5,1,7,13,19,25])\n        translate([0,f,5]) cube([9,0.5,1.2], center=true);\n}\n\nmodule strings() {\n    // Four strings printable vertically\n    for(i=[-1.5,-0.5,0.5,1.5])\n        translate([i,0,5.5]) cylinder(d=0.6,h=55,$fn=6);\n}\n\nmodule pickups() {\n    // Two split-coil pickups\n    for(y=[5,-7]) {\n        color(\"Black\") {\n            // Pickup cover\n            translate([0,y,3.5]) cube([20,8,2], center=true);\n            // Pole pieces\n            for(x=[-7,-3,1,5,9])\n                translate([x,y,4.7]) cylinder(d=1,h=0.4,$fn=6);\n        }\n    }\n}\n\nmodule bridge() {\n    // Simple top-load bridge\n    color(\"Silver\") union() {\n        translate([0,18,3]) cube([20,6,2], center=true);\n        // String saddles\n        for(i=[-6,-2,2,6])\n            translate([i,18,4.2]) cube([2,6,0.8], center=true);\n    }\n}\n\nmodule tuners() {\n    // Four tuners on headstock\n    color(\"Silver\") for(i=[-4.5,-1.5,1.5,4.5]) {\n        translate([i,-30,2.3]) rotate([0,0,90]) cylinder(d=2,h=6,$fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    fretboard();\n    strings();\n    pickups();\n    bridge();\n    tuners();\n    // Control knobs\n    color(\"Black\") for(k=[0,4])\n        translate([18-4*k,-15,3]) cylinder(d=3,h=2,$fn=16);\n}",
    "renders": true
  },
  {
    "musical_instrument": "banjo",
    "openscad_code": "// Realistic 3D-Printable Banjo (medium complexity)\n// Overall length ~85 mm, designed for FDM printing\n\n// Parameters\nbody_dia = 45;\nbody_thick = 8;\nneck_len = 60;\nneck_w = 8;\nneck_h = 12;\nhead_dia = 47;\nhead_thick = 1.2;\nbridge_h = 4;\nbridge_w = 15;\nbridge_d = 2;\ntuner_d = 4;\ntuner_h = 3;\nstring_d = 0.8;\nnum_strings = 5;\npeg_h = 10;\npeg_r = 2.5;\n\n// Main assembly\nmodule banjo(){\n    union(){\n        // Pot assembly\n        pot_assembly();\n        \n        // Neck & fingerboard\n        translate([0,0,body_thick/2+neck_h/2])\n            neck_assembly();\n        \n        // Headstock\n        translate([neck_len,0,body_thick/2+neck_h-1])\n            headstock();\n    }\n}\n\n// Resonator pot with tone ring\nmodule pot_assembly(){\n    difference(){\n        // Main pot body\n        cylinder(d=body_dia, h=body_thick, $fn=64);\n        \n        // Hollow cavity\n        translate([0,0,2])\n            cylinder(d=body_dia-6, h=body_thick, $fn=64);\n        \n        // Tailpiece hole\n        translate([body_dia/2-3,0,body_thick/2])\n            rotate([90,0,0])\n                cylinder(d=3, h=10, $fn=16);\n    }\n    \n    // Tone ring flange\n    translate([0,0,body_thick-1])\n        cylinder(d1=body_dia+2, d2=body_dia, h=2, $fn=64);\n    \n    // Drum head membrane\n    translate([0,0,body_thick+1])\n        cylinder(d=head_dia, h=head_thick, $fn=64);\n    \n    // Bridge\n    translate([0,0,body_thick+head_thick+bridge_h/2+1])\n        cube([bridge_d, bridge_w, bridge_h], center=true);\n    \n    // Tailpiece\n    translate([body_dia/2-2,0,body_thick/2])\n        rotate([0,90,0])\n            cylinder(d=5, h=8, $fn=16);\n}\n\n// Neck with frets\nmodule neck_assembly(){\n    // Neck core\n    cube([neck_len, neck_w, neck_h], center=true);\n    \n    // Fingerboard overlay\n    translate([0,0,neck_h/2+0.6])\n        cube([neck_len, neck_w+2, 1.2], center=true);\n    \n    // Frets (18 frets)\n    for(i=[1:18]){\n        fret_pos = -neck_len/2 + i*3.2;\n        translate([fret_pos,0,neck_h/2+1.8])\n            cube([0.5, neck_w+2, 1], center=true);\n    }\n    \n    // Heel\n    translate([-neck_len/2-3,0,0])\n        rotate([0,90,0])\n            cylinder(d=neck_h+2, h=neck_w+4, $fn=32);\n}\n\n// Headstock with tuners\nmodule headstock(){\n    difference(){\n        // Peghead shape\n        translate([0,0,peg_h/2])\n            cube([20, neck_w+6, peg_h], center=true);\n        \n        // Tuner holes on left\n        for(i=[0:2]){\n            translate([-5, neck_w/2+3, 2+i*2.5])\n                rotate([90,0,0])\n                    cylinder(d=tuner_d, h=10, $fn=16);\n        }\n        \n        // Tuner holes on right\n        for(i=[0:2]){\n            translate([-5, -neck_w/2-3, 2+i*2.5])\n                rotate([90,0,0])\n                    cylinder(d=tuner_d, h=10, $fn=16);\n        }\n    }\n    \n    // Pegs\n    for(i=[0:num_strings-1]){\n        y_pos = (i-2)*(neck_w+6)/5;\n        translate([10, y_pos, peg_h/2])\n            rotate([0,90,0])\n                cylinder(d=peg_r*2, h=peg_h, $fn=12);\n    }\n    \n    // Nut\n    translate([-10,0,peg_h+1])\n        cube([1, neck_w+2, 1.5], center=true);\n}\n\n// Generate model\nbanjo();",
    "renders": true
  },
  {
    "musical_instrument": "mandolin",
    "openscad_code": "// Mandolin - medium complexity realistic style\n// Designed for 3D printing, ~75mm long\n\nbody_length = 70;\nbody_width = 40;\nbody_depth = 12;\nneck_length = 80;\nneck_width = 8;\nheadstock_length = 20;\nheadstock_width = 12;\nfretboard_length = 60;\nbridge_height = 5;\ntuning_peg_diameter = 2;\ntuning_peg_length = 8;\nstring_thickness = 0.5;\nsoundhole_radius = 8;\nwall_thickness = 2;\n\nmodule mandolin() {\n    // Main body\n    difference() {\n        // Body shell\n        hull() {\n            translate([-body_length/2, 0, 0])\n                scale([1, 0.7, 1])\n                sphere(d=body_width);\n            translate([body_length/2*0.7, 0, 0])\n                sphere(d=body_width*0.9);\n        }\n        \n        // Hollow interior\n        scale([0.8, 0.8, 0.7])\n        translate([0, 0, -wall_thickness])\n        hull() {\n            translate([-body_length/2*0.9, 0, 0])\n                scale([1, 0.7, 1])\n                sphere(d=body_width*0.8);\n            translate([body_length/2*0.7, 0, 0])\n                sphere(d=body_width*0.7);\n        }\n    }\n    \n    // Sound hole\n    translate([body_length*0.2, 0, body_depth-0.5])\n        cylinder(h=wall_thickness+1, r=soundhole_radius, $fn=32);\n    \n    // Bridge\n    difference() {\n        translate([body_length*0.3, 0, body_depth])\n            cube([12, 6, bridge_height], center=true);\n        translate([body_length*0.3, 0, body_depth])\n            cube([14, 8, bridge_height-1], center=true);\n    }\n    \n    // Neck\n    translate([body_length/2 + neck_length/2, 0, body_depth/2])\n        rotate([0, 90, 0])\n        cylinder(h=neck_length, r=neck_width/2, $fn=8);\n    \n    // Fretboard\n    translate([body_length/2 + fretboard_length/2, 0, body_depth-1])\n        cube([fretboard_length, neck_width+4, 2], center=true);\n    \n    // Headstock\n    translate([body_length/2 + neck_length + headstock_length/2, 0, body_depth/2])\n        rotate([0, 90, 0])\n        cube([headstock_length, headstock_width, 4], center=true);\n    \n    // Tuning pegs\n    for(i=[-1, 1]) {\n        for(j=[0, 1, 2, 3]) {\n            translate([\n                body_length/2 + neck_length + headstock_length*0.7,\n                (j < 2 ? -headstock_width/2 - 3 : headstock_width/2 + 3),\n                body_depth/2 + (j % 2 == 0 ? 2 : -2) + i*1\n            ]) {\n                rotate([0, 90, 0])\n                cylinder(h=tuning_peg_length, r=tuning_peg_diameter/2, $fn=8);\n            }\n        }\n    }\n    \n    // Strings\n    for(i=[-1.5, -0.5, 0.5, 1.5]) {\n        translate([body_length/2 + neck_length + headstock_length - 5, \n                   i*1.5, \n                   body_depth/2 + 2])\n            rotate([0, 90, 0])\n            cylinder(h=neck_length + fretboard_length, r=string_thickness/2, $fn=4);\n    }\n    \n    // Tailpiece\n    translate([-body_length/2*0.9, 0, body_depth-1])\n        cube([6, 12, 3], center=true);\n}\n\n// Scale to 3D printable size\nscale(0.8)\nmandolin();",
    "renders": true
  },
  {
    "musical_instrument": "ukulele",
    "openscad_code": "// Ukulele model - medium complexity\n// Designed for 3D printing, approximately 80mm long\n$fn = 32;\n\nmodule ukulele() {\n    // Main body - hollowed elliptical shape\n    difference() {\n        scale([1, 0.7, 0.3]) sphere(d = 50);\n        translate([0, 0, -1]) scale([0.9, 0.6, 0.4]) sphere(d = 50);\n    }\n    \n    // Sound hole\n    translate([0, 0, 2.9]) cylinder(h = 2, d = 20);\n    \n    // Bridge\n    translate([0, -15, 3]) {\n        cube([20, 8, 2], center = true);\n        for(i = [-8:4:8]) {\n            translate([i, 0, 1]) cylinder(h = 2, d = 1);\n        }\n    }\n    \n    // Neck\n    translate([0, 25, 0]) rotate([90, 0, 0]) {\n        // Neck shaft\n        difference() {\n            cube([6, 35, 12], center = true);\n            translate([0, 10, 0]) cube([4, 30, 10], center = true);\n        }\n        \n        // Headstock\n        translate([0, 22, 0]) {\n            difference() {\n                cube([12, 15, 6], center = true);\n                translate([0, -3, 0]) cube([10, 8, 8], center = true);\n            }\n            \n            // Tuning pegs\n            for(side = [-1, 1]) {\n                for(pos = [0, 1]) {\n                    translate([side * 5, 3 + pos * 6, 3]) \n                        rotate([0, 90, 0]) cylinder(h = 8, d = 3);\n                }\n            }\n        }\n        \n        // Frets\n        for(fret = [1:12]) {\n            translate([0, -15 + fret * 2.5, 6.1]) \n                cube([6.2, 0.5, 1], center = true);\n        }\n    }\n    \n    // Strings\n    for(str = [-1.5, -0.5, 0.5, 1.5]) {\n        hull() {\n            // Bridge to nut\n            translate([str, -15, 4]) cylinder(h = 0.5, d = 0.5);\n            translate([str, 25, 6]) cylinder(h = 0.5, d = 0.5);\n            // Nut to tuning peg\n            translate([str, 25, 6]) cylinder(h = 0.5, d = 0.5);\n            translate([str * 1.2, 32, 3]) cylinder(h = 0.5, d = 0.5);\n        }\n    }\n    \n    // Side binding detail\n    difference() {\n        scale([1.05, 0.75, 0.32]) sphere(d = 50);\n        scale([1, 0.7, 0.31]) sphere(d = 50);\n    }\n}\n\nukulele();",
    "renders": true
  },
  {
    "musical_instrument": "harp",
    "openscad_code": "// Realistic 3D-printable harp (medium complexity)\n// Overall height ~90 mm, base ~35 mm\n// Wall thickness 1.2 mm everywhere\n\nmodule harp() {\n    // Base & column thickness\n    t = 1.2;\n\n    // Base: flat elliptical platform 35×25×3 mm\n    translate([0,0,0])\n        scale([1, 0.7, 1])\n        cylinder(h = 3, d = 35, $fn = 60);\n\n    // Pedestal under soundbox\n    translate([0,0,3])\n        cylinder(h = 8, d1 = 25, d2 = 22, $fn = 30);\n\n    // Soundbox hull (hollow)\n    difference() {\n        union() {\n            // Main body\n            translate([0,0,11])\n                hull() {\n                    translate([0,0,0])\n                        cylinder(h = 60, d = 22, $fn = 40);\n                    translate([0,0,60])\n                        cylinder(h = 1, d = 16, $fn = 30);\n                }\n            // Curved neck leading to pillar\n            hull() {\n                translate([0,0,71])\n                    rotate([0,90,0])\n                        cylinder(h = 25, d = 12, $fn = 20);\n                translate([0,0,71])\n                    rotate([0,90,0])\n                        translate([20,0,0])\n                            cylinder(h = 25, d = 8, $fn = 20);\n            }\n        }\n        // Hollow cavity\n        translate([0,0,11.5])\n            cylinder(h = 65, d = 22 - 2*t, $fn = 40);\n    }\n\n    // Pillar (hollow cylinder)\n    difference() {\n        translate([20,0,71])\n            rotate([90,0,0])\n                cylinder(h = 65, d = 10, $fn = 30);\n        translate([20,0,71])\n            rotate([90,0,0])\n                cylinder(h = 65, d = 10 - 2*t, $fn = 30);\n    }\n\n    // Soundboard plate\n    translate([11,0,11])\n        rotate([0,90,0])\n            cube([60, 22 - 2*t, t]);\n\n    // String holes in soundboard\n    for(i = [0:20]) {\n        y = -10 + i*1;\n        translate([11, y, 11 + 1])\n            rotate([0,90,0])\n                cylinder(h = t + 0.1, d = 1, $fn = 8);\n    }\n\n    // String holes in upper neck\n    for(i = [0:20]) {\n        y = -10 + i*1;\n        angle = 5 + i*3.5;\n        translate([18, y, 71])\n            rotate([0, angle, 0])\n                cylinder(h = 15, d = 1, $fn = 8);\n    }\n\n    // Decorative ring at top of pillar\n    translate([20,0,71 + 65])\n        cylinder(h = 3, d = 12, $fn = 30);\n\n    // Small sound hole on neck\n    translate([0,0,60])\n        rotate([0,90,0])\n            cylinder(h = 6, d = 4, $fn = 20);\n}\n\nharp();",
    "renders": true
  },
  {
    "musical_instrument": "lute",
    "openscad_code": "// Lute - Realistic style, medium complexity\n// Dimensions: ~80mm length, ~30mm width, ~15mm height\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main body of the lute\nmodule lute_body() {\n    // Pear-shaped body\n    difference() {\n        // Outer shell\n        scale([1, 0.7, 0.4])\n            sphere(d=50, $fn=60);\n        \n        // Hollow center\n        translate([0, 0, -wall])\n            scale([1-wall/25, 0.7-wall/25, 0.4-wall/20])\n                sphere(d=50, $fn=60);\n    }\n    \n    // Sound hole\n    translate([0, 0, 2])\n        cylinder(h=wall+0.5, d=10, $fn=32);\n}\n\n// Neck and fingerboard\nmodule lute_neck() {\n    // Neck\n    translate([-25, 0, 8])\n        rotate([0, 90, 0])\n            scale([0.8, 0.8, 4])\n                cylinder(h=35, d=6, $fn=8);\n    \n    // Fingerboard\n    translate([-25, -3, 8])\n        cube([35, 6, 1.5]);\n}\n\n// Pegbox with pegs\nmodule pegbox() {\n    // Pegbox\n    translate([-50, 0, 8])\n        rotate([0, 90, 0])\n            scale([0.6, 0.6, 2])\n                cylinder(h=15, d=8, $fn=6);\n    \n    // Pegs (4 on each side)\n    for(i=[-3:3]) {\n        if(i != 0) {\n            translate([-50, i*2, 8])\n                rotate([90, 0, 90])\n                    cylinder(h=8, d=2, $fn=8);\n        }\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([8, 0, 0.5])\n        cube([8, 12, 2]);\n}\n\n// Strings\nmodule strings() {\n    for(i=[-3:3]) {\n        translate([8, i*1.5, 1])\n            cylinder(h=58, d=0.5, $fn=8);\n    }\n}\n\n// Assembly\nlute_body();\nlute_neck();\npegbox();\nbridge();\nstrings();",
    "renders": true
  },
  {
    "musical_instrument": "sitar",
    "openscad_code": "// Sitar - Medium complexity 3D printable model\n// Approx 80mm long, 25mm wide, 20mm thick\n\n$fn = 32;\n\n// Main body module\nmodule sitar_body() {\n    // Main gourd (tumba)\n    translate([0, 0, 10])\n    scale([1, 0.8, 1.2])\n    sphere(d = 35);\n    \n    // Neck (dandi)\n    translate([0, 0, -15])\n    cylinder(h = 50, d1 = 12, d2 = 8);\n    \n    // Secondary gourd\n    translate([-15, 0, 15])\n    scale([0.7, 0.6, 0.9])\n    sphere(d = 20);\n    \n    // Bridge base\n    translate([10, 0, 10])\n    cube([15, 3, 2], center = true);\n}\n\n// Pegbox module\nmodule pegbox() {\n    // Main pegbox\n    translate([0, 0, -40])\n    cube([8, 25, 15], center = true);\n    \n    // Pegs\n    for(i = [-1, 1]) {\n        translate([4*i, -10, -40])\n        rotate([90, 0, 0])\n        cylinder(h = 8, d = 3);\n        translate([4*i, 10, -40])\n        rotate([90, 0, 0])\n        cylinder(h = 8, d = 3);\n    }\n}\n\n// Strings module\nmodule strings() {\n    for(i = [-2:1:2]) {\n        translate([i*1.5, 0, -15])\n        cylinder(h = 65, d = 0.5);\n    }\n}\n\n// Frets module\nmodule frets() {\n    for(i = [0:4:20]) {\n        translate([0, 0, -15 + i])\n        rotate([90, 0, 0])\n        cylinder(h = 10, d = 0.8);\n    }\n}\n\n// Sympathetic strings\nmodule sympathetic_strings() {\n    for(i = [-4:1:4]) {\n        if(i != 0) {\n            translate([i*0.8, 0, 0])\n            cylinder(h = 55, d = 0.3);\n        }\n    }\n}\n\n// Main bridge\nmodule main_bridge() {\n    translate([12, 0, 11])\n    cube([6, 1.5, 2], center = true);\n    \n    // Bridge top curve\n    translate([12, 0, 12])\n    sphere(d = 1.5);\n}\n\n// Assemble the sitar\nunion() {\n    sitar_body();\n    pegbox();\n    strings();\n    frets();\n    sympathetic_strings();\n    main_bridge();\n}\n\n// Add base for printing stability\ntranslate([0, 0, -50])\ncube([50, 30, 1], center = true);",
    "renders": true
  },
  {
    "musical_instrument": "sarod",
    "openscad_code": "// Realistic style Sarod - medium complexity\n// Overall length ~80mm, suitable for 3D printing\n\n$fn = 50;  // Smooth curves\n\n// Main parameters\nscale_length = 70;\nbody_length = 40;\nbody_width = 25;\nbody_depth = 12;\nneck_length = 30;\npegbox_length = 15;\n\n// Wooden body with carved front plate\nmodule sarod_body() {\n    difference() {\n        // Main body shell\n        hull() {\n            translate([-body_length/2, -body_width/2, 0])\n                cube([body_length, body_width, body_depth]);\n            translate([-body_length/2 + 5, -body_width/2 + 5, -2])\n                cube([body_length - 10, body_width - 10, body_depth + 2]);\n        }\n        \n        // Hollow cavity\n        translate([-body_length/2 + 2, -body_width/2 + 2, 2])\n            cube([body_length - 4, body_width - 4, body_depth - 2]);\n        \n        // Sound holes (traditional sarod has multiple small holes)\n        for(i = [0:3]) {\n            translate([-body_length/2 + 8 + i*8, -3, body_depth - 1])\n                cylinder(h=3, r=1.5);\n            translate([-body_length/2 + 8 + i*8, 3, body_depth - 1])\n                cylinder(h=3, r=1.5);\n        }\n    }\n    \n    // Raised fingerboard\n    color(\"burlywood\")\n    translate([-body_length/2 - neck_length/2, -3, body_depth])\n        cube([neck_length + 5, 6, 1.5]);\n}\n\n// Neck and fingerboard\nmodule sarod_neck() {\n    // Neck\n    color(\"burlywood\")\n    translate([-scale_length + 5, -2, 0])\n        cube([neck_length, 4, 8]);\n    \n    // Metal fingerboard cover (stylized)\n    color(\"silver\")\n    translate([-scale_length + 5, -2.5, 8])\n        cube([neck_length, 5, 0.5]);\n}\n\n// Pegbox with tuning pegs\nmodule pegbox() {\n    // Main pegbox\n    color(\"burlywood\")\n    translate([-scale_length - pegbox_length, -3, 5])\n        cube([pegbox_length, 6, 8]);\n    \n    // Tuning pegs (sarod has side-mounted pegs)\n    for(i = [0:3]) {\n        color(\"darkgray\")\n        translate([-scale_length - 5 - i*3, -6, 10 - i*1.5])\n            rotate([0, 90, 0])\n                cylinder(h=8, r=1.5);\n        mirror([0, 1, 0])\n            translate([-scale_length - 5 - i*3, -6, 10 - i*1.5])\n                rotate([0, 90, 0])\n                    cylinder(h=8, r=1.5);\n    }\n}\n\n// Bridge\nmodule bridge() {\n    color(\"brown\")\n    translate([-body_length/2 + 5, 0, body_depth + 0.5])\n        cube([3, 12, 2]);\n}\n\n// Metal strings (simplified as cylinders)\nmodule strings() {\n    for(i = [0:3]) {\n        color(\"gold\")\n        translate([-scale_length - pegbox_length + 2, -6 + i*4, 9])\n            rotate([0, 0, atan2(0, scale_length - 5)])\n                cylinder(h=scale_length - 8, r=0.3);\n    }\n}\n\n// Main assembly\nunion() {\n    sarod_body();\n    sarod_neck();\n    pegbox();\n    bridge();\n    strings();\n    \n    // Nut\n    color(\"silver\")\n    translate([-scale_length + 3, -2.5, 8.5])\n        cube([1, 5, 1]);\n    \n    // Tailpiece\n    color(\"darkgray\")\n    translate([-body_length/2 + 2, -6, body_depth + 2.5])\n        cube([4, 12, 1]);\n}",
    "renders": true
  },
  {
    "musical_instrument": "tanpura",
    "openscad_code": "// Tanpura - Medium Complexity Realistic Style\n// Moderate detail for 3D printing at ~80mm length\n\nmodule tanpura() {\n    // Main body (resonator)\n    difference() {\n        union() {\n            // Main gourd body\n            scale([1, 0.8, 1.3]) \n                sphere(d=40, $fn=64);\n            \n            // Neck extension\n            translate([0, 0, 25])\n                cylinder(h=35, d1=15, d2=8, $fn=32);\n        }\n        \n        // Sound hole\n        translate([0, 0, -20])\n            cylinder(h=5, d=15, $fn=32);\n    }\n    \n    // Neck\n    translate([0, 0, 60])\n        cylinder(h=25, d=8, $fn=16);\n    \n    // Headstock\n    translate([0, 0, 85])\n        cube([20, 6, 3], center=true);\n    \n    // Tuning pegs (4 total)\n    module tuning_peg(x, y) {\n        translate([x, y, 87])\n            rotate([90, 0, 0])\n                cylinder(h=8, d=3, $fn=12);\n    }\n    \n    tuning_peg(8, -2.5);\n    tuning_peg(8, 2.5);\n    tuning_peg(-8, -2.5);\n    tuning_peg(-8, 2.5);\n    \n    // Bridge\n    translate([0, -15, -5])\n        cube([25, 3, 2], center=true);\n    \n    // Strings\n    module string(x) {\n        translate([x, -15, -4])\n            cylinder(h=100, d=0.5, $fn=8);\n    }\n    \n    string(5);\n    string(2);\n    string(-2);\n    string(-5);\n    \n    // Decorative inlay\n    translate([0, 0, 10])\n        rotate([90, 0, 0])\n            cylinder(h=0.5, d=25, $fn=64);\n    \n    // Base stand\n    translate([0, 0, -25])\n        cube([30, 20, 3], center=true);\n}\n\ntanpura();",
    "renders": true
  },
  {
    "musical_instrument": "veena",
    "openscad_code": "// Veena - South Indian classical string instrument\n// Medium complexity realistic model for 3D printing\n\n$fn = 30;\n\nmodule veena() {\n    // Main resonator (kudam) - pumpkin shape approximation\n    union() {\n        // Bottom half sphere\n        translate([0, 0, -20])\n            scale([1.2, 1.2, 1])\n            sphere(20);\n        \n        // Top half sphere\n        translate([0, 0, 0])\n            scale([1.2, 1.2, 1])\n            sphere(20);\n        \n        // Neck attachment point\n        translate([0, -20, 15])\n            cylinder(h=10, r1=8, r2=10);\n    }\n    \n    // Neck (dandi)\n    translate([0, -20, 25])\n        rotate([90, 0, 0])\n        cylinder(h=60, r1=3, r2=2.5);\n    \n    // Head (kudam) - smaller resonator\n    translate([0, -80, 25])\n    union() {\n        sphere(15);\n        translate([0, 0, -15])\n            cylinder(h=15, r1=10, r2=8);\n    }\n    \n    // Fret board\n    translate([0, -50, 27])\n    difference() {\n        cube([5, 30, 2], center=true);\n        // Fret grooves\n        for(i = [0:6]) {\n            translate([0, -45 + i*5, 0])\n                cube([5.2, 0.5, 2.2], center=true);\n        }\n    }\n    \n    // Bridge (gori)\n    translate([0, -5, 22])\n    union() {\n        cube([12, 3, 4], center=true);\n        // Bridge feet\n        translate([-4, 0, -2.5])\n            cube([2, 3, 2], center=true);\n        translate([4, 0, -2.5])\n            cube([2, 3, 2], center=true);\n    }\n    \n    // Strings (4 main strings)\n    for(i = [-1.5, -0.5, 0.5, 1.5]) {\n        translate([i, -75, 25])\n            cylinder(h=80, r=0.5);\n    }\n    \n    // Tuning pegs (4 pegs)\n    for(i = [0:3]) {\n        angle = i * 30;\n        translate([0, -80, 35])\n        rotate([0, 0, angle])\n        translate([12, 0, 0])\n            union() {\n                cylinder(h=8, r=2);\n                translate([0, 0, 8])\n                    sphere(3);\n            }\n    }\n    \n    // Side tuning pegs (3 pegs)\n    for(i = [0:2]) {\n        translate([20, -50 + i*15, 27])\n        rotate([90, 0, 90])\n            union() {\n                cylinder(h=6, r=1.5);\n                translate([0, 0, 6])\n                    sphere(2);\n            }\n    }\n    \n    // Decorative dragon head (simplified)\n    translate([0, -80, 40])\n    union() {\n        // Head\n        sphere(5);\n        // Snout\n        translate([0, -5, 0])\n            scale([0.6, 1.5, 0.6])\n            sphere(4);\n        // Horns\n        translate([-2, -3, 2])\n            rotate([0, 30, -30])\n            cylinder(h=3, r=0.8);\n        translate([2, -3, 2])\n            rotate([0, 30, 30])\n            cylinder(h=3, r=0.8);\n    }\n    \n    // Support structure\n    translate([0, -30, 0])\n    union() {\n        // Base support\n        cube([30, 2, 5], center=true);\n        // Side supports\n        translate([-10, 0, 2.5])\n            cube([2, 2, 5], center=true);\n        translate([10, 0, 2.5])\n            cube([2, 2, 5], center=true);\n    }\n}\n\n// Generate the veena\nveena();",
    "renders": true
  },
  {
    "musical_instrument": "rudra",
    "openscad_code": "// Rudra Trishula (Trident) - Realistic Style, Medium Complexity\n// Overall dimensions: ~90mm height\n\n// Parameters\nshaft_d = 6;\nshaft_h = 80;\nprong_d = 4;\nprong_h = 35;\nprong_spread = 12;\nspike_d = 2.5;\nspike_h = 8;\ndamaru_d = 10;\ndamaru_h = 6;\nring_d = 4;\nring_th = 1.5;\n\n// Main shaft\nmodule shaft() {\n    cylinder(d1=shaft_d, d2=shaft_d*0.9, h=shaft_h, $fn=32);\n}\n\n// Central prong\nmodule center_prong() {\n    translate([0, 0, shaft_h]) {\n        cylinder(d=prong_d, h=prong_h, $fn=32);\n    }\n}\n\n// Side prongs\nmodule side_prongs() {\n    for (a = [-120, 120]) {\n        rotate([0, 0, a]) {\n            translate([prong_spread/2, 0, shaft_h]) {\n                rotate([0, -20, 0]) {\n                    cylinder(d=prong_d, h=prong_h, $fn=32);\n                }\n            }\n        }\n    }\n}\n\n// Prong spikes\nmodule prong_spikes() {\n    for (i = [0:2]) {\n        rotate([0, 0, i*120]) {\n            translate([0, 0, shaft_h + prong_h - spike_h]) {\n                cylinder(d=spike_d, h=spike_h, $fn=16);\n            }\n        }\n    }\n}\n\n// Damaru (hand drum)\nmodule damaru() {\n    translate([0, 0, shaft_h - damaru_h]) {\n        // Drum body\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(d=damaru_d, h=damaru_h, $fn=32);\n                translate([0, 0, -0.1]) cylinder(d=damaru_d*0.7, h=damaru_h+0.2, $fn=32);\n            }\n        }\n        // Rope connectors\n        for (a = [0, 180]) {\n            rotate([0, 0, a]) {\n                translate([damaru_d/2 + ring_th, 0, -damaru_h/2]) {\n                    rotate([90, 0, 0]) {\n                        difference() {\n                            cylinder(d=ring_d, h=ring_th, $fn=16);\n                            cylinder(d=ring_d - ring_th*2, h=ring_th+0.2, $fn=16);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Handle grip texture\nmodule grip() {\n    for (i = [0:5:shaft_h-20]) {\n        translate([0, 0, i+10]) {\n            difference() {\n                cylinder(d=shaft_d+1, h=3, $fn=32);\n                cylinder(d=shaft_d-1, h=3.2, $fn=32);\n            }\n        }\n    }\n}\n\n// Base spike\nmodule base_spike() {\n    translate([0, 0, 0]) {\n        cylinder(d1=shaft_d, d2=0, h=shaft_d/2, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    shaft();\n    center_prong();\n    side_prongs();\n    prong_spikes();\n    damaru();\n    grip();\n    base_spike();\n}",
    "renders": true
  },
  {
    "musical_instrument": "surbahar",
    "openscad_code": "// Surbahar - medium complexity realistic model\n// 1:20 scale model, ~80 mm long, 3D-printable\n\n$fn = 36;\n\n// overall dimensions\nlength = 80;\nwidth = 20;\nheight = 12;\n\nmodule peg_shaft() {\n    cylinder(h=5, d1=2, d2=1.5);\n}\n\nmodule peg_head() {\n    rotate([90,0,0]) cylinder(h=3, d=3);\n}\n\nmodule tuning_peg(x,y,z) {\n    translate([x,y,z]) {\n        peg_shaft();\n        translate([0,0,5]) peg_head();\n    }\n}\n\nmodule pegbox() {\n    difference() {\n        // main pegbox\n        translate([-5,0,0]) cube([10, width+2, 6]);\n        \n        // peg holes (printing aid: vertical holes)\n        for (i=[-3:2:3]) {\n            translate([0, i*3, 3]) cylinder(h=10, d=2.2);\n        }\n    }\n    \n    // tuning pegs\n    for (i=[-3:2:3]) {\n        tuning_peg(5.5, i*3, 3);\n    }\n}\n\nmodule neck() {\n    difference() {\n        hull() {\n            cube([length*0.55, 6, 4]);\n            translate([length*0.55-2,0,0]) cube([4, width, 4]);\n        }\n        \n        // string grooves (top)\n        for (i=[-3:1.5:3]) {\n            translate([length*0.55-1, i, 4]) cube([2, 1, 1]);\n        }\n    }\n}\n\nmodule resonator() {\n    difference() {\n        // main gourd shape\n        scale([1, 0.8, 0.6]) sphere(d=width*1.8);\n        \n        // flat top for printing\n        translate([0,0,-1]) cube([width*2, width*2, 2], center=true);\n        \n        // sound hole\n        translate([0,0,3]) cylinder(h=5, d=8);\n    }\n}\n\nmodule main_body() {\n    // base platform\n    translate([0,0,-2]) cube([length*0.45, width*0.8, 2], center=true);\n    \n    // curved body\n    translate([0,0,0]) {\n        difference() {\n            hull() {\n                cube([length*0.4, width*0.7, 3]);\n                translate([length*0.4-5,0,0]) \n                    scale([1, 0.8, 1]) sphere(d=width*0.8);\n            }\n            \n            // bridge slot\n            translate([length*0.3,0,2]) cube([length*0.1, 2, 2], center=true);\n        }\n    }\n}\n\nmodule bridge() {\n    translate([length*0.3,0,2]) {\n        cube([2, 10, 3]);\n        // bridge notches\n        for (i=[-4:2:4]) {\n            translate([1, i, 3]) cube([0.5, 0.5, 1]);\n        }\n    }\n}\n\nmodule strings() {\n    // simplified strings as cylinders\n    for (i=[-3:1.5:3]) {\n        translate([length*0.55-1, i, 4]) {\n            rotate([90,0,0]) cylinder(h=length*0.25, d=0.5);\n        }\n    }\n}\n\n// assembly\ntranslate([0,0,height]) {\n    rotate([-30,0,0]) {\n        translate([length*0.55,0,0]) pegbox();\n        neck();\n    }\n}\n\ntranslate([0,0,0]) {\n    main_body();\n    translate([0,0,3]) bridge();\n    translate([0,0,1]) strings();\n}\n\ntranslate([length*0.2,0,3]) {\n    rotate([0,-30,0]) resonator();\n}",
    "renders": true
  },
  {
    "musical_instrument": "sursingar",
    "openscad_code": "// Sursingar - medium complexity realistic model\n// Overall dimensions: ~90mm long\n\n$fn = 36;\n\nmodule body_shell() {\n    // Main resonator body - rounded gourd-like shape\n    difference() {\n        // Main body - ellipsoid\n        scale([1.2, 1.0, 0.8]) sphere(20);\n        \n        // Hollow interior\n        scale([1.1, 0.9, 0.7]) sphere(18);\n    }\n}\n\nmodule neck() {\n    // Hollow neck tube\n    difference() {\n        // Main neck\n        translate([0, 22, 0]) rotate([90, 0, 0]) cylinder(h=35, r=5, $fn=20);\n        // Hollow\n        translate([0, 22, 0]) rotate([90, 0, 0]) cylinder(h=35, r=3.5, $fn=20);\n    }\n}\n\nmodule tuning_peg(peg_num) {\n    // Individual tuning peg\n    translate([0, 25 + peg_num * 6, 0]) rotate([0, 90, 0]) {\n        // Peg shaft\n        cylinder(h=12, r=1.5);\n        // Peg head\n        translate([0, 0, 12]) rotate([0, 0, 0]) cube([8, 2, 2], center=true);\n    }\n}\n\nmodule bridge() {\n    // Main bridge on body\n    translate([0, -15, 18]) {\n        // Base\n        cube([15, 3, 2], center=true);\n        // Top ridge\n        translate([0, 0, 2]) cube([15, 1, 1], center=true);\n    }\n}\n\nmodule strings() {\n    // Main playing strings\n    for(i = [-1:0.5:1]) {\n        translate([i * 3, 22, 0]) rotate([90, 0, 0]) cylinder(h=55, r=0.5);\n    }\n}\n\nmodule sympathetic_strings() {\n    // Sympathetic strings below main bridge\n    for(i = [-3:1:3]) {\n        if(i != 0) {\n            translate([i * 1.5, -10, 18]) rotate([90, 0, 0]) cylinder(h=35, r=0.3);\n        }\n    }\n}\n\nmodule sound_holes() {\n    // Rosette-style sound holes on top\n    translate([0, -5, 19]) {\n        difference() {\n            cylinder(h=1, r=8);\n            for(i = [0:45:315]) {\n                rotate([0, 0, i]) translate([5, 0, 0]) cylinder(h=2, r=1.5);\n            }\n        }\n    }\n}\n\nmodule frets() {\n    // Metal frets along neck\n    for(i = [1:8]) {\n        translate([0, 22 + i * 3.5, 0]) rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=10, r=0.8);\n                translate([0, 0, -0.5]) cylinder(h=11, r=0.5);\n            }\n        }\n    }\n}\n\nmodule jawari_bridge() {\n    // Secondary jawari bridge\n    translate([0, 5, 20]) {\n        cube([12, 2, 1], center=true);\n        translate([0, 0, 1]) cube([12, 1, 0.5], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main body components\n    body_shell();\n    neck();\n    \n    // Hardware\n    bridge();\n    jawari_bridge();\n    \n    // Strings and frets\n    strings();\n    sympathetic_strings();\n    frets();\n    \n    // Sound holes\n    sound_holes();\n    \n    // Tuning pegs (4 main + 3 sympathetic)\n    for(peg = [0:3]) {\n        tuning_peg(peg);\n    }\n}\n\n// Add decorative base\ntranslate([0, 0, -2]) {\n    difference() {\n        cylinder(h=2, r=25);\n        cylinder(h=3, r=22);\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "santoor",
    "openscad_code": "// Santoor - medium complexity, realistic style\n// Approx 80 mm long, 50 mm wide, 10 mm thick\n\n$fn = 32;  // Smooth curves\n\n// Overall dimensions\nbody_len = 80;\nbody_wid = 50;\nbody_thk = 10;\nwall_thk = 2;\n\n// Create the hollow trapezoidal body\nmodule santoor_body() {\n    difference() {\n        // Outer shell - slightly curved top\n        hull() {\n            translate([-body_len/2, -body_wid/2, 0])\n                cube([body_len, body_wid, body_thk]);\n            translate([-body_len/2+5, -body_wid/2+5, body_thk])\n                cube([body_len-10, body_wid-10, 0.1]);\n        }\n        \n        // Hollow cavity\n        translate([-body_len/2+wall_thk, -body_wid/2+wall_thk, wall_thk])\n            cube([body_len-2*wall_thk, body_wid-2*wall_thk, body_thk-wall_thk]);\n    }\n}\n\n// Sound holes - simple floral pattern\nmodule sound_holes() {\n    for (x = [-20, 0, 20]) {\n        translate([x, 0, body_thk-wall_thk/2])\n            cylinder(h=wall_thk+0.1, r=3, $fn=6);\n    }\n    for (x = [-10, 10]) {\n        translate([x, -10, body_thk-wall_thk/2])\n            cylinder(h=wall_thk+0.1, r=2.5, $fn=6);\n        translate([x, 10, body_thk-wall_thk/2])\n            cylinder(h=wall_thk+0.1, r=2.5, $fn=6);\n    }\n}\n\n// Bridge pieces\nmodule bridge(x_pos, y_pos) {\n    translate([x_pos, y_pos, body_thk-wall_thk/2]) {\n        // Base\n        cube([2, 20, 1]);\n        // Top ridge\n        translate([0, 0, 1])\n            cube([0.5, 20, 0.5]);\n    }\n}\n\n// Tuning pegs\nmodule tuning_pegs() {\n    // Left side pegs\n    for (i = [0:7]) {\n        y = -20 + i*5;\n        translate([-body_len/2-5, y, body_thk/2]) {\n            rotate([90, 0, 0])\n                cylinder(h=8, r=1.5);\n            sphere(r=2);\n        }\n    }\n    \n    // Right side pegs\n    for (i = [0:7]) {\n        y = -20 + i*5;\n        translate([body_len/2+5, y, body_thk/2]) {\n            rotate([90, 0, 0])\n                cylinder(h=8, r=1.5);\n            sphere(r=2);\n        }\n    }\n}\n\n// Main strings (simplified as cylinders)\nmodule strings() {\n    // Left course\n    for (i = [0:11]) {\n        y = -22 + i*4;\n        translate([-body_len/2+5, y, body_thk-1]) {\n            rotate([90, 0, 0])\n                cylinder(h=body_len-10, r=0.3);\n        }\n    }\n    \n    // Right course\n    for (i = [0:11]) {\n        y = -22 + i*4;\n        translate([-body_len/2+5, y, body_thk-1.5]) {\n            rotate([90, 0, 0])\n                cylinder(h=body_len-10, r=0.3);\n        }\n    }\n}\n\n// Assemble the santoor\nunion() {\n    santoor_body();\n    sound_holes();\n    \n    // Two main bridges\n    bridge(-15, 0);\n    bridge(15, 0);\n    \n    // Small bridges for sympathetic strings\n    bridge(-25, 0);\n    bridge(25, 0);\n    \n    tuning_pegs();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "esraj",
    "openscad_code": "// Esraj - 3D printable medium-complexity model\n// Overall length ~80 mm, height ~25 mm, thickness ~8 mm\n\n// Tunable parameters\nneck_len = 40;\nbody_len = 35;\nbody_w   = 18;\nbody_h   = 12;\npeg_box_len = 10;\npeg_box_w = 4;\npeg_box_h = 7;\nmain_t_w = 1.8;\nbridge_h = 2;\nbridge_w = 8;\nstring_d = 0.5;\n\n$fn = 32;  // smooth curves\n\nmodule peg_box() {\n    // Main peg box\n    translate([neck_len, 0, 0])\n    difference() {\n        cube([peg_box_len, peg_box_w, peg_box_h], center = true);\n        // Peg holes\n        for (i = [0:3]) {\n            translate([peg_box_len/2 - 1.5 - i*2, 0, peg_box_h/2 - 1])\n                rotate([90, 0, 0])\n                    cylinder(h = peg_box_w + 1, d = 1.2, center = true);\n        }\n    }\n}\n\nmodule neck() {\n    // Wooden neck\n    translate([-1, 0, 0])\n    cube([neck_len + 1, 3, 4], center = true);\n    // Finger board\n    translate([neck_len/2 - 5, 0, 2])\n    cube([neck_len - 10, 2.2, 0.8], center = true);\n}\n\nmodule main_body() {\n    // Hollow resonator body (simplified round back)\n    hull() {\n        translate([0, 0, 0])\n        sphere(d = body_w);\n        translate([body_len, 0, 0])\n        sphere(d = body_w);\n    }\n    // Flat front face\n    translate([body_len/2, 0, 0])\n    cube([body_len, body_w, 0.1], center = true);\n}\n\nmodule sound_holes() {\n    // Two f-holes\n    for (x = [body_len/2 - 6, body_len/2 + 6]) {\n        translate([x, 0, body_w/2 - 0.2])\n        rotate([0, 90, 0])\n        scale([1, 2, 1])\n        cylinder(h = 0.8, d = 2, center = true);\n    }\n}\n\nmodule bridge() {\n    // Bridge for strings\n    translate([body_len - 4, 0, 1])\n    cube([bridge_h, bridge_w, 1.2], center = true);\n}\n\nmodule tailpiece() {\n    // Tailpiece at bottom\n    translate([body_len + 2, 0, -1])\n    cube([3, 5, 1], center = true);\n}\n\nmodule strings() {\n    // Four main strings\n    for (i = [-1.5, -0.5, 0.5, 1.5]) {\n        translate([neck_len + 2, i*0.6, 0])\n        rotate([0, 90, 0])\n        cylinder(h = neck_len + body_len - 2, d = string_d);\n    }\n}\n\nmodule sympathetic_strings() {\n    // Thin sympathetic strings under main strings\n    for (i = [0:9]) {\n        translate([neck_len + 2, 0, -2.5 - i*0.2])\n        rotate([0, 90, 0])\n        cylinder(h = neck_len + body_len - 2, d = 0.3);\n    }\n}\n\n// Assembly\nunion() {\n    neck();\n    peg_box();\n    main_body();\n    sound_holes();\n    bridge();\n    tailpiece();\n    strings();\n    sympathetic_strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "dilruba",
    "openscad_code": "// Dilruba (medium complexity, realistic style)\n// Approx. 90 mm long\n\n$fn = 30;\n\n// Overall scale\nscale(0.35) {\n\n// Main body (tabli)\nmodule body() {\n    difference() {\n        union() {\n            // Main resonator shell\n            cylinder(h=35, r1=28, r2=25);\n            translate([0,0,35]) cylinder(h=5, r1=25, r2=24);\n        }\n        // Hollow out\n        translate([0,0,-1]) cylinder(h=40, r1=22, r2=19);\n        // Sound hole\n        translate([0,0,20]) cylinder(h=10, r=6);\n    }\n}\n\n// Neck (dandi)\nmodule neck() {\n    translate([0,0,40]) {\n        difference() {\n            hull() {\n                translate([0,0,0]) cylinder(h=2, r=5);\n                translate([0,0,65]) cylinder(h=2, r=3);\n            }\n            translate([0,0,-1]) cylinder(h=70, r1=3.5, r2=2);\n        }\n    }\n}\n\n// Pegbox (pagri)\nmodule pegbox() {\n    translate([0,0,105]) {\n        difference() {\n            union() {\n                hull() {\n                    sphere(r=4);\n                    translate([0,0,-15]) sphere(r=4);\n                }\n                // Pegs\n                for(i=[-1:1]) {\n                    translate([i*6,4,-5]) rotate([90,0,90]) cylinder(h=12, r=1.2);\n                }\n                for(i=[-1:1]) {\n                    translate([i*6,-4,-5]) rotate([90,0,-90]) cylinder(h=12, r=1.2);\n                }\n            }\n            translate([0,0,-16]) cylinder(h=20, r=2.5);\n        }\n    }\n}\n\n// Sympathetic string pins\nmodule pins() {\n    for(i=[0:11]) {\n        rotate([0,0,i*30]) {\n            translate([26,0,10]) rotate([90,0,0]) cylinder(h=4, r=0.8);\n        }\n    }\n}\n\n// Bridge (ghoraj)\nmodule bridge() {\n    translate([0,0,18]) {\n        hull() {\n            cube([20,2,3], center=true);\n            translate([0,0,3]) cube([16,1.5,1], center=true);\n        }\n    }\n}\n\n// Main strings\nmodule strings() {\n    for(x=[-2,0,2]) {\n        translate([x,0,20]) {\n            cylinder(h=85, r=0.4);\n        }\n    }\n}\n\n// Sympathetic strings\nmodule symp_strings() {\n    for(i=[0:11]) {\n        rotate([0,0,i*30]) {\n            translate([24,0,10]) cylinder(h=30, r=0.2);\n        }\n    }\n}\n\n// Bow\nmodule bow() {\n    translate([50,0,15]) rotate([0,-90,0]) {\n        hull() {\n            for(i=[0:5]) {\n                rotate([0,0,i*30]) translate([0,i*3,0]) sphere(r=2);\n            }\n        }\n        // Bow hair\n        translate([0,15,0]) cube([0.5,30,0.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    pegbox();\n    pins();\n    bridge();\n    strings();\n    symp_strings();\n    bow();\n}\n\n}",
    "renders": true
  },
  {
    "musical_instrument": "sarangi",
    "openscad_code": "// Sarangi - medium complexity realistic style\n// Designed for 3D printing, ~80mm height\n\n$fn = 24;  // Resolution for curved surfaces\n\n// Main parameters\nbody_length = 65;\nbody_width = 35;\nbody_depth = 25;\n\nneck_length = 55;\nneck_width = 8;\nneck_depth = 6;\n\npeg_count = 3;\npeg_diameter = 3;\npeg_length = 12;\n\nmodule sarangi() {\n    // Main resonator body\n    union() {\n        // Front face (carved resonator cavity)\n        difference() {\n            // Outer shell\n            translate([-body_length/2, -body_width/2, 0])\n                cube([body_length, body_width, body_depth]);\n            \n            // Hollow cavity (leaving 2mm walls)\n            translate([-body_length/2 + 2, -body_width/2 + 2, 2])\n                cube([body_length - 4, body_width - 4, body_depth - 2]);\n            \n            // Sound holes (traditional three)\n            translate([0, -body_width/4, body_depth - 1])\n                cylinder(h=3, d=8);\n            translate([-body_length/4, 0, body_depth - 1])\n                cylinder(h=3, d=6);\n            translate([body_length/4, 0, body_depth - 1])\n                cylinder(h=3, d=6);\n        }\n        \n        // Neck\n        translate([body_length/2 - neck_width/2, -neck_width/2, body_depth - neck_depth])\n            cube([neck_length, neck_width, neck_depth]);\n        \n        // Fingerboard\n        translate([body_length/2 - neck_width/2, -neck_width/2 - 1, body_depth + neck_depth - 1])\n            cube([neck_length, neck_width + 2, 2]);\n        \n        // Tuning pegs (three on each side)\n        for (i = [0:peg_count-1]) {\n            // Left pegs\n            translate([body_length/2 + neck_length - 5, -neck_width/2 - 2 - peg_diameter/2, \n                      body_depth + neck_depth + 2 + i*4])\n                rotate([90, 0, 0])\n                    cylinder(h=peg_length, d=peg_diameter);\n            \n            // Right pegs  \n            translate([body_length/2 + neck_length - 5, neck_width/2 + 2 + peg_diameter/2, \n                      body_depth + neck_depth + 2 + i*4])\n                rotate([90, 0, 0])\n                    cylinder(h=peg_length, d=peg_diameter);\n        }\n        \n        // Bridge\n        translate([0, 0, body_depth])\n            cube([8, 2, 3]);\n        \n        // Tailpiece\n        translate([-body_length/2 + 5, -neck_width/2 - 2, 0])\n            cube([6, neck_width + 4, 8]);\n        \n        // Sympathetic string pegs (small pegs below neck)\n        for (j = [0:1]) {\n            translate([body_length/2 + 5 + j*8, -neck_width/2 - 3, body_depth - 2])\n                rotate([90, 0, 0])\n                    cylinder(h=8, d=2);\n        }\n    }\n}\n\n// Create the complete sarangi\nsarangi();",
    "renders": true
  },
  {
    "musical_instrument": "kamancha",
    "openscad_code": "// Kamancha - Persian bowed string instrument\n// Medium complexity realistic style for 3D printing\n\n// Parameters\nbody_length = 65;\nbody_width = 35;\nbody_thickness = 18;\nneck_length = 55;\nneck_width = 8;\npegbox_length = 25;\npeg_length = 12;\nbridge_height = 8;\nbridge_width = 12;\nstring_diameter = 0.8;\nnut_width = 7;\nnut_height = 3;\nsound_hole_diameter = 6;\n\n// Main body - pear-shaped resonator\nmodule kamancha_body() {\n    // Main resonator body\n    difference() {\n        // Outer shell\n        union() {\n            // Upper bout\n            translate([0, 0, body_thickness/2])\n                scale([1, 1.3, 1])\n                sphere(d=body_width, $fn=32);\n            \n            // Lower bout\n            translate([body_length/3, 0, body_thickness/2])\n                scale([1.5, 1.2, 1])\n                sphere(d=body_width*1.2, $fn=32);\n            \n            // Connect upper and lower bouts\n            hull() {\n                translate([-body_length/4, 0, body_thickness/2])\n                    sphere(d=body_width*0.8, $fn=16);\n                translate([body_length/2, 0, body_thickness/2])\n                    sphere(d=body_width*1.1, $fn=16);\n            }\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            scale([0.85, 0.85, 0.9])\n            union() {\n                translate([0, 0, body_thickness/2])\n                    sphere(d=body_width, $fn=32);\n                translate([body_length/3, 0, body_thickness/2])\n                    scale([1.5, 1.2, 1])\n                    sphere(d=body_width*1.2, $fn=32);\n                hull() {\n                    translate([-body_length/4, 0, body_thickness/2])\n                        sphere(d=body_width*0.8, $fn=16);\n                    translate([body_length/2, 0, body_thickness/2])\n                        sphere(d=body_width*1.1, $fn=16);\n                }\n            }\n    }\n    \n    // Sound hole\n    translate([body_length/4, 0, body_thickness/2])\n        rotate([90, 0, 0])\n        cylinder(h=body_thickness+2, d=sound_hole_diameter, $fn=32);\n}\n\n// Neck\nmodule neck() {\n    color(\"burlywood\")\n    translate([body_length/2, 0, body_thickness/2])\n        rotate([90, 0, 0])\n        hull() {\n            cylinder(h=neck_length, d1=neck_width, d2=neck_width*0.8, $fn=8);\n            translate([0, neck_length, 0])\n                cylinder(h=neck_width*0.8, d1=neck_width*0.8, d2=neck_width*0.6, $fn=8);\n        }\n}\n\n// Pegbox with tuning pegs\nmodule pegbox() {\n    color(\"burlywood\")\n    translate([body_length/2, 0, body_thickness/2 + neck_length])\n        rotate([90, 0, 0])\n        union() {\n            // Pegbox body\n            cube([pegbox_length, neck_width*1.5, neck_width*1.2], center=true);\n            \n            // Side pegs (4 total)\n            for(side = [-1, 1]) {\n                for(i = [0, 1]) {\n                    translate([pegbox_length/4 * (i*2-1), side*neck_width*0.8, 0])\n                        rotate([90*side, 0, 0])\n                        cylinder(h=peg_length, d=string_diameter*3, $fn=8);\n                }\n            }\n        }\n}\n\n// Fingerboard\nmodule fingerboard() {\n    color(\"black\")\n    translate([body_length/2, 0, body_thickness/2 + neck_length/2])\n        rotate([90, 0, 0])\n        cube([neck_length, neck_width*1.2, neck_width*0.3], center=true);\n}\n\n// Bridge\nmodule bridge() {\n    color(\"burlywood\")\n    translate([body_length/4, 0, body_thickness/2 + bridge_height/2])\n        difference() {\n            cube([bridge_width, body_width*0.6, bridge_height], center=true);\n            translate([0, 0, -1])\n                cube([bridge_width*1.2, body_width*0.7, bridge_height*0.5], center=true);\n        }\n}\n\n// Nut\nmodule nut() {\n    color(\"black\")\n    translate([body_length/2 + neck_length*0.9, 0, body_thickness/2 + neck_length - nut_height/2])\n        rotate([90, 0, 0])\n        cube([nut_width, neck_width*1.2, nut_height], center=true);\n}\n\n// Tailpiece\nmodule tailpiece() {\n    color(\"black\")\n    translate([-body_length/3, 0, body_thickness/2 + 2])\n        difference() {\n            cube([10, body_width*0.3, 5], center=true);\n            translate([0, 0, -1])\n                cube([8, body_width*0.2, 7], center=true);\n        }\n}\n\n// Strings\nmodule strings() {\n    color(\"silver\")\n    for(i = [-1.5, -0.5, 0.5, 1.5]) {\n        hull() {\n            // Tailpiece to bridge\n            translate([-body_length/3, i*body_width*0.1, body_thickness/2 + 2.5])\n                sphere(d=string_diameter, $fn=8);\n            translate([body_length/4, i*body_width*0.08, body_thickness/2 + bridge_height + 1])\n                sphere(d=string_diameter, $fn=8);\n        }\n        hull() {\n            // Bridge to nut\n            translate([body_length/4, i*body_width*0.08, body_thickness/2 + bridge_height + 1])\n                sphere(d=string_diameter, $fn=8);\n            translate([body_length/2 + neck_length*0.9, i*neck_width*0.3, body_thickness/2 + neck_length - nut_height/2])\n                sphere(d=string_diameter, $fn=8);\n        }\n    }\n}\n\n// Assemble the kamancha\nunion() {\n    kamancha_body();\n    neck();\n    pegbox();\n    fingerboard();\n    bridge();\n    nut();\n    tailpiece();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "rebab",
    "openscad_code": "// Rebaba - Traditional bowed string instrument\n// Medium complexity, 3D printable, realistic style\n\n// Parameters\nbody_length = 70;\nbody_width = 35;\nbody_thickness = 12;\nneck_length = 55;\nneck_width = 6;\nneck_thickness = 8;\npegbox_length = 25;\npegbox_width = 12;\npegbox_thickness = 8;\nstring_length = 110;\npeg_radius = 2;\npeg_length = 12;\nbridge_height = 8;\nbridge_width = 14;\nsoundhole_radius = 3;\nwall_thickness = 1.5;\n\n// Main body - carved bowl shape\nmodule body() {\n    difference() {\n        // Outer shell - elliptical bowl\n        scale([1, 0.8, 0.6])\n        sphere(d=body_width);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness])\n        scale([1-wall_thickness/15, 0.8-wall_thickness/15, 0.6-wall_thickness/15])\n        sphere(d=body_width-2*wall_thickness);\n        \n        // Flat back\n        translate([0, 0, -body_thickness/2])\n        cube([body_width+2, body_width+2, body_thickness], center=true);\n    }\n    \n    // Soundboard - flat top\n    translate([0, 0, body_thickness/2 - 1])\n    cube([body_length-10, body_width, 2], center=true);\n    \n    // Sound holes\n    for(i=[-1, 1]) {\n        translate([i*body_length/4, 0, body_thickness/2])\n        cylinder(r=soundhole_radius, h=3, $fn=16);\n    }\n}\n\n// Neck\nmodule neck() {\n    // Main neck\n    translate([0, 0, body_thickness/2 + neck_length/2])\n    cube([neck_width, neck_thickness, neck_length], center=true);\n    \n    // Fingerboard\n    translate([0, 0, body_thickness/2 + neck_length - 5])\n    cube([neck_width+2, 1.5, neck_length-10], center=true);\n}\n\n// Pegbox\nmodule pegbox() {\n    translate([0, 0, body_thickness/2 + neck_length + pegbox_length/2])\n    rotate([90, 0, 0])\n    cube([pegbox_width, pegbox_thickness, pegbox_length], center=true);\n    \n    // Peg holes\n    for(i=[-1, 1]) {\n        translate([i*pegbox_width/4, pegbox_length/2 - 3, body_thickness/2 + neck_length + pegbox_length/2])\n        rotate([0, 90, 0])\n        cylinder(r=peg_radius, h=pegbox_thickness+2, $fn=8);\n        \n        // Pegs\n        translate([i*pegbox_width/4, pegbox_length/2 + 2, body_thickness/2 + neck_length + pegbox_length/2])\n        rotate([0, 90, 0])\n        cylinder(r1=peg_radius, r2=peg_radius-0.5, h=peg_length, $fn=8);\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([0, 0, body_thickness/2 + bridge_height/2])\n    difference() {\n        // Bridge shape\n        translate([0, 0, 0])\n        cube([bridge_width, 2, bridge_height], center=true);\n        \n        // String notches\n        for(i=[-2:2]) {\n            translate([i*bridge_width/5, 0, bridge_height/2])\n            cube([1, 3, 1], center=true);\n        }\n    }\n}\n\n// Tailpiece\nmodule tailpiece() {\n    translate([0, 0, body_thickness/2 + 1])\n    difference() {\n        // Main tailpiece\n        translate([body_length/2 - 10, 0, -3])\n        cube([15, 8, 6], center=true);\n        \n        // String holes\n        for(i=[-1, 0, 1]) {\n            translate([body_length/2 - 10, i*2, 0])\n            cylinder(r=0.5, h=8, center=true, $fn=8);\n        }\n    }\n}\n\n// Strings\nmodule strings() {\n    for(i=[-1, 0, 1]) {\n        translate([i*2, 0, body_thickness/2 + bridge_height + 1])\n        rotate([90, 0, 0])\n        cylinder(r=0.3, h=string_length, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    pegbox();\n    bridge();\n    tailpiece();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "tar",
    "openscad_code": "// Realistic-style 3D-printable tar model\n// Overall size ~80 mm\n\n$fn = 32;\n\n// Main parameters\ntar_length = 80;\ntar_width  = 60;\ntar_thickness = 3;\n\n// Create the body of the tar\nmodule tar_body() {\n    difference() {\n        // Outer rounded rectangle shape\n        hull() {\n            translate([-tar_length/2 + 10, -tar_width/2 + 10, 0])\n                cylinder(h = tar_thickness, r = 10);\n            translate([ tar_length/2 - 10, -tar_width/2 + 10, 0])\n                cylinder(h = tar_thickness, r = 10);\n            translate([-tar_length/2 + 10,  tar_width/2 - 10, 0])\n                cylinder(h = tar_thickness, r = 10);\n            translate([ tar_length/2 - 10,  tar_width/2 - 10, 0])\n                cylinder(h = tar_thickness, r = 10);\n        }\n\n        // Central hole (sound hole)\n        translate([0, 0, -0.1])\n            cylinder(h = tar_thickness + 0.2, r = 12);\n\n        // Four small tuner holes near top\n        for (i = [-1, 1])\n            for (j = [-1, 1])\n                translate([i * 25, j * 20, -0.1])\n                    cylinder(h = tar_thickness + 0.2, r = 3);\n    }\n}\n\n// Neck of the tar\nmodule neck() {\n    translate([tar_length/2 - 15, 0, tar_thickness])\n        difference() {\n            hull() {\n                cube([50, 8, 5]);\n                translate([50, 0, 0])\n                    cube([8, 8, 5]);\n            }\n            // String grooves\n            for (i = [1:6])\n                translate([45 - i*6, 0, -0.1])\n                    cube([1, 8, 5.2]);\n        }\n}\n\n// Bridge\nmodule bridge() {\n    translate([0, 0, tar_thickness])\n        difference() {\n            cube([20, 4, 3]);\n            // String grooves\n            for (i = [1:6])\n                translate([-10 + i*3, 0, -0.1])\n                    cube([1, 4, 3.2]);\n        }\n}\n\n// Tuners pegs (six pegs)\nmodule tuners() {\n    for (i = [1:6]) {\n        translate([tar_length/2 + 35, -3.5 + (i-1)*1.4, tar_thickness + 2.5])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 8, r = 2);\n                translate([0, 0, -0.1])\n                    cylinder(h = 8.2, r = 0.8);\n            }\n    }\n}\n\n// Strings\nmodule strings() {\n    for (i = [0:5]) {\n        translate([tar_length/2 - 15 - i*6, -3.5 + i*1.4, tar_thickness + 2.5])\n            color(\"silver\")\n                cylinder(h = 80, r = 0.4);\n    }\n}\n\n// Assemble the tar\nunion() {\n    tar_body();\n    neck();\n    bridge();\n    tuners();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "setar",
    "openscad_code": "// OpenSCAD Setar - Realistic Medium Complexity\n// Overall length ~90 mm, 3D-printable with 1 mm walls\n\nmodule rounded_box(w, d, h, r) {\n    hull() {\n        translate([r, r, 0]) cylinder(h=h, r=r, $fn=16);\n        translate([r, d-r, 0]) cylinder(h=h, r=r, $fn=16);\n        translate([w-r, r, 0]) cylinder(h=h, r=r, $fn=16);\n        translate([w-r, d-r, 0]) cylinder(h=h, r=r, $fn=16);\n    }\n}\n\n// Main body bowl\nmodule bowl() {\n    difference() {\n        union() {\n            hull() {\n                translate([-10, 0, 0]) sphere(d=30, $fn=40);\n                translate([10, 0, 0]) sphere(d=30, $fn=40);\n            }\n            // Flat back\n            translate([0, 0, -15]) cube([30, 20, 30], center=true);\n        }\n        // Hollow\n        translate([0, 0, -5]) scale([0.8, 0.8, 0.7]) \n            sphere(d=30, $fn=40);\n        translate([0, 0, -15]) cube([28, 18, 30], center=true);\n    }\n}\n\n// Neck\nmodule neck() {\n    difference() {\n        hull() {\n            cylinder(h=50, r1=5, r2=3, $fn=20);\n            translate([0, 0, 50]) cylinder(h=20, r1=3, r2=4, $fn=20);\n        }\n        // Tuning peg holes\n        for(i=[0:3]) {\n            rotate([0, 90, 0]) \n                translate([0, 0, 10+i*12]) cylinder(h=15, r=1, $fn=8);\n        }\n    }\n}\n\n// Headstock\nmodule headstock() {\n    difference() {\n        hull() {\n            translate([0, 0, 0]) cube([20, 4, 10], center=true);\n            translate([0, 0, 40]) cube([30, 4, 10], center=true);\n        }\n        // Peg holes\n        for(i=[0:3]) {\n            rotate([0, 90, 0])\n                translate([5+i*6, 0, 20]) cylinder(h=20, r=1.5, $fn=8);\n        }\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([0, -15, 0]) {\n        difference() {\n            rounded_box(12, 2, 3, 1);\n            // String grooves\n            for(i=[-4:2:4]) {\n                translate([i, 0, 1.5]) cube([0.5, 2, 1], center=true);\n            }\n        }\n    }\n}\n\n// Nut\nmodule nut() {\n    difference() {\n        translate([0, 0, 3]) rounded_box(6, 1, 2, 0.5);\n        // String grooves\n        for(i=[-2:1:2]) {\n            translate([i, 0, 1]) cube([0.5, 2, 1], center=true);\n        }\n    }\n}\n\n// Frets\nmodule frets() {\n    for(i=[0:6]) {\n        translate([0, 0, 5+i*7]) rotate([0, 90, 0])\n            cylinder(h=15, r=0.5, $fn=8);\n    }\n}\n\n// Strings\nmodule strings() {\n    for(i=[-2:1:2]) {\n        hull() {\n            translate([i, 0, 3]) sphere(r=0.2, $fn=8);\n            translate([i, -20, 0]) sphere(r=0.2, $fn=8);\n        }\n    }\n}\n\n// Sound hole\nmodule sound_hole() {\n    difference() {\n        bowl();\n        translate([0, 0, 0]) rotate([0, 0, 0])\n            cylinder(h=50, r=8, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    color(\"burlywood\") {\n        // Main instrument\n        bowl();\n        translate([0, 0, 30]) neck();\n        translate([0, 0, 80]) headstock();\n    }\n    \n    color(\"silver\") {\n        bridge();\n        translate([0, 0, 30]) nut();\n        translate([0, 0, 30]) frets();\n    }\n    \n    color(\"beige\") strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "shurangiz",
    "openscad_code": "// Shurangiz - Medium Complexity Realistic Model\n// Overall length ~100mm, 3D-printable with no overhangs\n\nmodule shurangiz() {\n    color(\"tan\")\n    union() {\n\n        // Main bowl\n        translate([0, 0, 0])\n        difference() {\n            sphere(d = 55, $fn = 64);                  // outer bowl\n            translate([0, 0, -30])\n            sphere(d = 45, $fn = 64);                  // hollow inside\n        }\n\n        // Neck\n        translate([0, 25, 0])\n        rotate([90, 0, 0])\n        cylinder(d1 = 12, d2 = 10, h = 35, $fn = 32);\n\n        // Pegbox\n        translate([0, 60, 0])\n        rotate([90, 0, 0])\n        cylinder(d1 = 10, d2 = 8, h = 20, $fn = 32);\n\n        // Headstock\n        translate([0, 80, 0])\n        cube([18, 6, 12], center = true);\n\n        // Tuning pegs (6 pegs: 3 per side)\n        for (i = [-1, 1]) {\n            for (j = [0, 1, 2]) {\n                translate([i * 12, 80 - j * 3, 0])\n                rotate([90, 0, 90])\n                cylinder(d = 3, h = 10, $fn = 12);\n            }\n        }\n\n        // Fingerboard\n        translate([0, 30, -30])\n        cube([10, 45, 2], center = true);\n\n        // Soundboard (top plate)\n        translate([0, 0, 27])\n        difference() {\n            sphere(d = 53, $fn = 64);                  // outer top\n            translate([0, 0, -2])\n            sphere(d = 49, $fn = 64);                  // make it a plate\n        }\n\n        // Bridge\n        translate([0, 0, 30])\n        cube([20, 5, 3], center = true);\n\n        // Tailpiece\n        translate([0, -25, -20])\n        rotate([0, 15, 0])\n        cube([15, 8, 2], center = true);\n\n        // Strings\n        for (s = [-3, -1, 1, 3]) {\n            translate([s * 1.5, -25, -20])\n            cylinder(d = 0.5, h = 105, $fn = 8);\n        }\n\n        // Sound hole\n        translate([0, 0, 30])\n        cylinder(d = 20, h = 2, $fn = 64);\n\n        // Fret markers (dots at 5th, 7th, 12th positions)\n        for (pos = [5, 7, 12]) {\n            translate([0, 25 + pos * 3, -28.5])\n            cylinder(d = 2, h = 1, $fn = 16);\n        }\n\n        // Nut\n        translate([0, 60, -30])\n        cube([10, 2, 1], center = true);\n\n        // Saddle\n        translate([0, 0, 30])\n        cube([20, 2, 1], center = true);\n    }\n}\n\nshurangiz();",
    "renders": true
  },
  {
    "musical_instrument": "dotar",
    "openscad_code": "// Dotar - Central Asian two-string lute\n// Medium complexity realistic style\n\n// Overall scale\nscale_factor = 0.8;\n\n// Body parameters\nbody_length = 60 * scale_factor;\nbody_width = 45 * scale_factor;\nbody_depth = 12 * scale_factor;\nbody_thickness = 2.5 * scale_factor;\n\n// Neck parameters\nneck_length = 85 * scale_factor;\nneck_width = 10 * scale_factor;\nneck_thickness = 8 * scale_factor;\n\n// Headstock parameters\nheadstock_length = 25 * scale_factor;\nheadstock_width = 12 * scale_factor;\nheadstock_thickness = 6 * scale_factor;\n\n// Strings and bridge\nstring_diameter = 0.8 * scale_factor;\nbridge_height = 6 * scale_factor;\nbridge_width = 12 * scale_factor;\nbridge_thickness = 2 * scale_factor;\n\n// Tuning pegs\npeg_length = 15 * scale_factor;\npeg_diameter = 2 * scale_factor;\npeg_spacing = 8 * scale_factor;\n\n// Sound hole\nsoundhole_radius = 8 * scale_factor;\n\nmodule body() {\n    difference() {\n        // Main body shape\n        hull() {\n            // Lower bout\n            translate([0, -body_length/3, 0])\n                scale([1, 0.8, 1])\n                sphere(d=body_width, $fn=30);\n            \n            // Upper bout\n            translate([0, body_length/3, 0])\n                scale([1, 0.6, 1])\n                sphere(d=body_width * 0.8, $fn=30);\n        }\n        \n        // Hollow out the body\n        scale([0.8, 0.9, 0.5])\n            translate([0, 0, -body_thickness/2])\n            hull() {\n                translate([0, -body_length/3, 0])\n                    scale([1, 0.8, 1])\n                    sphere(d=body_width, $fn=30);\n                translate([0, body_length/3, 0])\n                    scale([1, 0.6, 1])\n                    sphere(d=body_width * 0.8, $fn=30);\n            }\n        \n        // Sound hole\n        translate([0, 0, -body_thickness/2])\n            cylinder(r=soundhole_radius, h=body_thickness*2, $fn=30);\n        \n        // Neck joint hole\n        translate([0, body_length/2, 0])\n            cube([neck_width*1.2, neck_width*2, body_thickness*2], center=true);\n    }\n}\n\nmodule neck() {\n    difference() {\n        // Main neck\n        translate([0, (body_length/2 + neck_length/2), body_thickness/2])\n            cube([neck_width, neck_length, neck_thickness], center=true);\n        \n        // Fingerboard rounding\n        translate([0, (body_length/2 + neck_length/2), body_thickness/2 + neck_thickness/2])\n            cube([neck_width*1.1, neck_length, neck_thickness*0.3], center=true);\n    }\n}\n\nmodule headstock() {\n    translate([0, (body_length/2 + neck_length + headstock_length/2), body_thickness/2 + neck_thickness/2 - headstock_thickness/2])\n        cube([headstock_width, headstock_length, headstock_thickness], center=true);\n}\n\nmodule bridge() {\n    translate([0, -body_length/3, body_thickness/2 + bridge_height/2])\n        cube([bridge_width, bridge_thickness, bridge_height], center=true);\n}\n\nmodule tuning_pegs() {\n    // Right side pegs\n    for(i = [0, 1]) {\n        translate([headstock_width/2 + peg_diameter/2, \n                  body_length/2 + neck_length - 5 + i * peg_spacing,\n                  body_thickness/2 + neck_thickness/2 - headstock_thickness/2])\n            rotate([90, 0, 90])\n                cylinder(h=peg_length, d=peg_diameter, $fn=12);\n    }\n    \n    // Left side pegs\n    for(i = [0, 1]) {\n        translate([-headstock_width/2 - peg_diameter/2, \n                  body_length/2 + neck_length - 5 + i * peg_spacing,\n                  body_thickness/2 + neck_thickness/2 - headstock_thickness/2])\n            rotate([90, 0, -90])\n                cylinder(h=peg_length, d=peg_diameter, $fn=12);\n    }\n}\n\nmodule strings() {\n    for(i = [-1, 1]) {\n        translate([i * string_diameter * 2, 0, 0]) {\n            // String from bridge to nut\n            translate([0, -body_length/3, body_thickness/2 + bridge_height])\n                cylinder(h=body_length/2 + neck_length + headstock_length - 5, \n                        d=string_diameter, $fn=8);\n            \n            // String from nut to tuning peg\n            translate([0, body_length/2 + neck_length + headstock_length/2, \n                      body_thickness/2 + neck_thickness/2 - headstock_thickness/2])\n                cylinder(h=20, d=string_diameter, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    color(\"burlywood\") {\n        body();\n        neck();\n        headstock();\n    }\n    \n    color(\"darkgoldenrod\") {\n        bridge();\n        tuning_pegs();\n    }\n    \n    color(\"silver\") {\n        strings();\n    }\n}\n\n// Add small feet for printing stability\ntranslate([0, -body_length/2 - 5, -body_thickness/2 - 1])\n    cube([body_width * 0.6, 10, 2], center=true);",
    "renders": true
  },
  {
    "musical_instrument": "dutar",
    "openscad_code": "// Dutar - medium complexity realistic style\n// Total length ~90 mm, suitable for 3D printing\n\n// Parameters\nbody_len = 50;\nbody_w = 25;\nbody_h = 12;\nneck_len = 40;\nneck_w = 5;\nneck_h = 5;\nheadstock_len = 20;\nheadstock_w = 8;\nheadstock_h = 4;\nsoundhole_r = 5;\nstring_count = 2;\npeg_count = 4;\npeg_r = 1.2;\npeg_h = 8;\nfret_count = 12;\nfret_w = 0.8;\nfret_h = 0.5;\nbridge_w = 8;\nbridge_h = 2;\nbridge_len = 3;\n\n// Main body with rounded back\nmodule body() {\n    difference() {\n        hull() {\n            // Front face (flat)\n            translate([0,0,body_h/2])\n                cube([body_len, body_w, 0.1], center=true);\n            // Back face (arched)\n            for(x=[-body_len/2+5:5:body_len/2-5])\n                translate([x,0,-body_h/2+2])\n                    sphere(r=body_w/2, $fn=20);\n        }\n        \n        // Sound hole\n        translate([-body_len/4,0,body_h/2-1])\n            cylinder(h=body_h, r=soundhole_r, $fn=32);\n        \n        // Bridge slot\n        translate([body_len/4,0,body_h/2-1])\n            cube([bridge_len+1, bridge_w+1, 2], center=true);\n    }\n}\n\n// Neck with frets\nmodule neck() {\n    union() {\n        // Neck shaft\n        translate([body_len/2+neck_len/2,0,body_h/2+neck_h/2])\n            cube([neck_len, neck_w, neck_h], center=true);\n        \n        // Frets\n        for(i=[1:fret_count]) {\n            translate([body_len/2+i*neck_len/fret_count,0,\n                      body_h/2+neck_h+fret_h/2])\n                cube([fret_w, neck_w*1.2, fret_h], center=true);\n        }\n        \n        // Nut\n        translate([body_len/2+neck_len,0,\n                  body_h/2+neck_h+fret_h/2])\n            cube([fret_w*1.5, neck_w*1.2, fret_h*1.5], center=true);\n    }\n}\n\n// Headstock with pegs\nmodule headstock() {\n    union() {\n        // Headstock\n        translate([body_len/2+neck_len+headstock_len/2,0,\n                  body_h/2+neck_h+headstock_h/2])\n            cube([headstock_len, headstock_w, headstock_h], center=true);\n        \n        // Pegs (2 per side)\n        for(side=[-1,1]) {\n            for(i=[0:1]) {\n                rotate([90,0,0])\n                    translate([body_len/2+neck_len+5+i*8,\n                              side*headstock_w/2,\n                              body_h/2+neck_h+headstock_h/2])\n                        cylinder(h=peg_h, r=peg_r, $fn=12);\n            }\n        }\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([body_len/4,0,body_h/2+bridge_h/2])\n        difference() {\n            cube([bridge_len, bridge_w, bridge_h], center=true);\n            // String notches\n            for(i=[-1,1])\n                translate([0,i*bridge_w/4,bridge_h/2])\n                    cube([bridge_len+1, 1, 2], center=true);\n        }\n}\n\n// Strings\nmodule strings() {\n    for(i=[-1,1]) {\n        translate([body_len/2+neck_len+headstock_len-5,\n                   i*neck_w/4,\n                   body_h/2+neck_h+headstock_h/2])\n            rotate([0,90,0])\n                cylinder(h=body_len/2+neck_len+headstock_len-5, r=0.2, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    headstock();\n    bridge();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "komuz",
    "openscad_code": "// OpenSCAD Komuz Model - Realistic Medium Complexity\n// Traditional Kyrgyz three-stringed lute, 3D-printable\n\n// Overall dimensions (mm)\nbody_length = 80;\nbody_width = 40;\nbody_depth = 25;\nneck_length = 70;\nneck_width = 15;\nneck_thickness = 12;\nheadstock_length = 30;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body - hollow pear shape\nmodule body() {\n    difference() {\n        // Outer pear shape\n        union() {\n            // Upper bout\n            translate([0, 0, body_depth/2])\n                scale([1, 0.8, 1])\n                sphere(d=body_width*1.2, $fn=50);\n            \n            // Lower bout\n            translate([body_length*0.6, 0, body_depth/2])\n                scale([1.2, 1, 1])\n                sphere(d=body_width*1.3, $fn=50);\n            \n            // Connect bouts\n            hull() {\n                translate([0, 0, body_depth/2])\n                    sphere(d=body_width*1.2, $fn=20);\n                translate([body_length*0.6, 0, body_depth/2])\n                    sphere(d=body_width*1.3, $fn=20);\n            }\n        }\n        \n        // Hollow interior\n        translate([0, 0, body_depth/2])\n            scale([1-wall/body_width, 1-wall/body_width, 1-wall/body_depth])\n            sphere(d=body_width*1.1, $fn=30);\n        translate([body_length*0.6, 0, body_depth/2])\n            scale([1-wall/body_width, 1-wall/body_width, 1-wall/body_depth])\n            sphere(d=body_width*1.2, $fn=30);\n    }\n}\n\n// Sound hole\nmodule sound_hole() {\n    translate([body_length*0.3, 0, body_depth-wall])\n        cylinder(h=wall+1, d=body_width*0.4, $fn=30);\n}\n\n// Neck with taper\nmodule neck() {\n    linear_extrude(height=neck_length, scale=[0.8,1], center=false)\n        polygon(points=[\n            [-neck_width/2, 0],\n            [neck_width/2, 0],\n            [neck_width*0.4, neck_length],\n            [-neck_width*0.4, neck_length]\n        ]);\n    \n    // Reinforcement block\n    translate([0, neck_thickness/2, neck_length/2])\n        cube([neck_width, neck_thickness, neck_length], center=true);\n}\n\n// Headstock with tuning pegs\nmodule headstock() {\n    // Headstock plate\n    translate([0, neck_thickness/2, neck_length+headstock_length/2])\n        cube([neck_width*1.5, neck_thickness*0.8, headstock_length], center=true);\n    \n    // Tuning pegs (3 pegs)\n    for(i=[-1,0,1]) {\n        translate([neck_width*0.5*i, neck_thickness/2+2, neck_length+headstock_length*0.7])\n            rotate([90,0,0])\n            cylinder(h=10, d=4, $fn=12);\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([body_length*0.8, 0, body_depth-wall])\n        cube([body_width*0.3, 2, 8]);\n}\n\n// Nut\nmodule nut() {\n    translate([0, neck_thickness/2, neck_length-2])\n        cube([neck_width, 2, 2]);\n}\n\n// Strings\nmodule strings() {\n    for(i=[-1,0,1]) {\n        translate([neck_width*0.3*i, 0, neck_length-1])\n            cylinder(h=neck_length+headstock_length+body_length*0.2, d=0.5, $fn=8);\n    }\n}\n\n// Assembly\ntranslate([0, 0, body_depth/2]) {\n    body();\n    sound_hole();\n    \n    translate([0, 0, body_depth/2+neck_thickness/2])\n        rotate([90,0,0])\n        neck();\n    \n    translate([0, 0, body_depth/2+neck_thickness/2])\n        rotate([90,0,0])\n        headstock();\n    \n    bridge();\n    nut();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "rawap",
    "openscad_code": "// Rawap (Uyghur lute) - medium complexity, realistic style\n// Designed for 3D printing, no overhangs, 1.2mm wall thickness\n\n$fn = 32;  // Smooth curves for printing\n\nmodule rawap() {\n    // Main body/neck assembly\n    union() {\n        // Body bowl - teardrop shape\n        difference() {\n            // Outer shell\n            scale([1, 0.8, 1]) \n                cylinder(h=35, d1=45, d2=50, center=false);\n            \n            // Hollow interior\n            translate([0, 0, 1.2])\n                scale([0.8, 0.6, 1]) \n                    cylinder(h=35, d1=40, d2=45, center=false);\n            \n            // Sound hole\n            translate([0, 0, 20])\n                cylinder(h=5, d=15, center=true);\n        }\n        \n        // Neck\n        translate([0, 0, 35])\n            difference() {\n                // Neck shaft\n                cube([8, 12, 60], center=true);\n                \n                // Hollow neck\n                translate([0, 0, -1.2])\n                    cube([5.6, 9.6, 57.6], center=true);\n            }\n        \n        // Headstock\n        translate([0, 0, 95])\n            difference() {\n                // Headstock body\n                cube([12, 8, 20], center=true);\n                \n                // Tuning peg holes (4 pegs)\n                for(i=[-1.5, -0.5, 0.5, 1.5])\n                    translate([i*3, 0, 0])\n                        cylinder(h=12, d=2, center=true);\n            }\n        \n        // Bridge\n        translate([0, -25, 8])\n            cube([15, 3, 5], center=true);\n        \n        // Nut\n        translate([0, 0, 95])\n            cube([8, 2, 2], center=true);\n        \n        // Strings (simplified as cylinders)\n        for(i=[-1.5, -0.5, 0.5, 1.5]) {\n            translate([i*1.5, 0, 95])\n                cylinder(h=90, d=0.5, center=false);\n            \n            translate([i*7.5, -25, 11])\n                cylinder(h=90, d=0.5, center=false);\n        }\n        \n        // Decorative sound hole ring\n        translate([0, 0, 20])\n            difference() {\n                cylinder(h=2, d=20, center=true);\n                cylinder(h=2.2, d=15, center=true);\n            }\n        \n        // Fret markers (5 frets)\n        for(f=[1:5]) {\n            translate([0, 0, 40 + f*8])\n                cube([8, 0.5, 1], center=true);\n        }\n    }\n}\n\n// Main assembly\nrawap();",
    "renders": true
  },
  {
    "musical_instrument": "saz",
    "openscad_code": "// Realistic 3D-printable Saz (medium complexity)\n// Approx. 80 mm total length\n\n$fn = 36;\n\nmodule saz() {\n    // Body\n    difference() {\n        // Main bowl\n        rotate([0, 90, 0])\n            scale([1, 0.7, 1.4])\n                cylinder(h = 40, d1 = 35, d2 = 30, center = true);\n\n        // Sound hole\n        translate([0, 0, 10])\n            cylinder(h = 20, d = 12, center = true);\n\n        // Neck hole\n        translate([0, 20, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 20, d = 12, center = true);\n    }\n\n    // Neck\n    translate([-20, 20, 0])\n        rotate([0, -10, 0])\n            scale([1, 0.8, 0.8])\n                cylinder(h = 60, d1 = 10, d2 = 8, center = false);\n\n    // Headstock\n    translate([-65, 22, 0])\n        rotate([0, -10, 0])\n            scale([1.6, 0.6, 0.3])\n                cube([12, 10, 8], center = true);\n\n    // Tuning pegs\n    module peg() {\n        rotate([0, 90, 0])\n            cylinder(h = 8, d = 2.5);\n    }\n\n    for (i = [0:2]) {\n        translate([-68 + i*5, 22, -4])\n            peg();\n        translate([-68 + i*5, 22, 4])\n            peg();\n    }\n\n    // Bridge\n    translate([0, -15, 12])\n        cube([25, 3, 3], center = true);\n\n    // Strings\n    module string() {\n        cylinder(h = 75, d = 0.8);\n    }\n\n    for (i = [-1:1]) {\n        translate([i*3, 15, 0])\n            rotate([0, 90, 0])\n                string();\n    }\n\n    // Frets\n    module fret() {\n        cube([10, 0.8, 0.8], center = true);\n    }\n\n    for (i = [0:6]) {\n        translate([-30 - i*7, 20, 0])\n            rotate([0, -10, 0])\n                fret();\n    }\n\n    // Decorative rosette\n    difference() {\n        translate([0, 0, 15])\n            cylinder(h = 1, d = 16);\n\n        translate([0, 0, 14.9])\n            cylinder(h = 1.2, d = 14);\n    }\n}\n\n// Position for printing\nrotate([0, 0, -30])\n    saz();",
    "renders": true
  },
  {
    "musical_instrument": "bağlama",
    "openscad_code": "// Bağlama (Turkish long-neck lute) - Realistic medium complexity\n// Designed for 3D printing (no supports, 2 mm wall thickness)\n\n$fn = 32;\nbody_length = 45;\nbody_width = 30;\nbody_depth = 12;\nneck_length = 80;\nneck_width = 8;\nneck_depth = 8;\nhead_length = 25;\nhead_width = 12;\nhead_depth = 6;\nstring_diameter = 0.6;\nbridge_height = 3;\nbridge_width = 10;\nbridge_depth = 2;\n\nmodule body() {\n    // Main bowl shaped body - using ellipsoid\n    scale([1, 0.75, 0.5])\n    difference() {\n        sphere(d = body_width);\n        translate([0, 0, -body_depth/2])\n        cube([body_width*2, body_width*2, body_depth], center = true);\n    }\n    \n    // Sound hole\n    translate([0, 0, body_depth/2 - 0.5])\n    cylinder(h = 2, d = 8, $fn = 24);\n    \n    // Top plate\n    translate([0, 0, body_depth/2 - 1])\n    scale([1, 0.75, 0.1])\n    sphere(d = body_width);\n}\n\nmodule neck() {\n    // Neck with tapered shape\n    hull() {\n        translate([0, 0, 0])\n        cube([neck_width, neck_depth, neck_length], center = true);\n        translate([0, 0, neck_length/2 - 5])\n        cube([neck_width*0.8, neck_depth*0.8, neck_length - 10], center = true);\n    }\n    \n    // Fret markers\n    for(i = [1:7]) {\n        translate([0, neck_depth/2 + 0.1, i*neck_length/8 - neck_length/2])\n        cube([neck_width*0.8, 0.2, 1], center = true);\n    }\n}\n\nmodule headstock() {\n    // Angled headstock\n    translate([0, 0, neck_length/2 + head_length/2])\n    rotate([10, 0, 0])\n    cube([head_width, head_depth, head_length], center = true);\n    \n    // Tuning pegs (3 pairs)\n    for(side = [-1, 1]) {\n        for(i = [0:2]) {\n            translate([side*head_width/2 + side*3, 0, neck_length/2 + 5 + i*6])\n            rotate([90, 0, 0])\n            cylinder(h = 8, d = 2);\n        }\n    }\n}\n\nmodule bridge() {\n    // Bridge for strings\n    translate([0, 0, body_depth/2])\n    cube([bridge_width, bridge_depth, bridge_height], center = true);\n    \n    // String notches\n    for(i = [-1, 0, 1]) {\n        translate([i*3, bridge_depth/2 + 0.1, 0])\n        cube([0.8, 1, bridge_height], center = true);\n    }\n}\n\nmodule strings() {\n    // Six strings in three courses\n    for(course = [-1, 0, 1]) {\n        for(string = [0, 0.5]) {\n            translate([course*3 + string*0.5, 0, neck_length/2 + head_length - 5])\n            rotate([0, 90, 0])\n            cylinder(h = neck_length + head_length - 5, d = string_diameter);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, body_depth/2])\nunion() {\n    body();\n    \n    translate([0, 0, body_depth/2])\n    neck();\n    \n    headstock();\n    \n    bridge();\n    \n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "cura",
    "openscad_code": "// Realistic Cura (Tibetan Singing Bowl)\n\n// Overall dimensions\nbowl_dia = 70;\nbowl_height = 35;\nwall_thick = 2.5;\n\n// Base ring\nbase_ring_height = 4;\nbase_ring_width = 4;\n\n// Rim lip\nrim_thick = 2;\nrim_height = 3;\n\n// Hammering marks\nmark_rows = 12;\nmark_cols = 18;\nmark_size = 1.2;\n\n// Mallet\nmallet_len = 60;\nmallet_dia = 8;\nmallet_head_len = 20;\nmallet_head_dia = 18;\npadding = 2;\n\n// Bowl module\nmodule bowl() {\n    difference() {\n        // Outer shell\n        cylinder(h = bowl_height, d = bowl_dia, $fn = 128);\n        \n        // Inner cavity\n        translate([0, 0, wall_thick])\n        cylinder(h = bowl_height - wall_thick + 0.01, d = bowl_dia - 2*wall_thick, $fn = 128);\n        \n        // Flatten bottom inside\n        translate([0, 0, bowl_height - wall_thick])\n        cube([bowl_dia, bowl_dia, wall_thick + 0.01], center = true);\n    }\n    \n    // Base ring\n    translate([0, 0, -0.01])\n    difference() {\n        cylinder(h = base_ring_height + 0.02, d = bowl_dia, $fn = 128);\n        cylinder(h = base_ring_height + 0.04, d = bowl_dia - 2*base_ring_width, $fn = 128);\n    }\n    \n    // Rim lip\n    translate([0, 0, bowl_height])\n    difference() {\n        cylinder(h = rim_height + 0.01, d = bowl_dia + 2*rim_thick, $fn = 128);\n        cylinder(h = rim_height + 0.02, d = bowl_dia, $fn = 128);\n    }\n}\n\n// Hammering marks\nmodule marks() {\n    for (i = [0:1]) {\n        rotate([0, 0, i*180/mark_rows]) {\n            for (j = [0:mark_cols-1]) {\n                // Spiral pattern\n                angle = j*360/mark_cols;\n                radius = (bowl_dia/2 - wall_thick - 2) * (0.3 + 0.7*j/mark_cols);\n                x = radius * cos(angle);\n                y = radius * sin(angle);\n                z = wall_thick + (bowl_height - 2*wall_thick) * j/mark_cols;\n                \n                translate([x, y, z])\n                sphere(d = mark_size, $fn = 8);\n            }\n        }\n    }\n}\n\n// Mallet module\nmodule mallet() {\n    // Handle\n    rotate([90, 0, 0])\n    translate([0, 0, -mallet_len/2])\n    cylinder(h = mallet_len, d = mallet_dia, $fn = 32);\n    \n    // Head\n    rotate([90, 0, 0])\n    translate([0, 0, mallet_len/2 - mallet_head_len/2])\n    cylinder(h = mallet_head_len, d = mallet_head_dia, $fn = 64);\n    \n    // Head padding\n    rotate([90, 0, 0])\n    translate([0, 0, mallet_len/2 + mallet_head_len/2 - padding])\n    cylinder(h = padding*2, d = mallet_head_dia + 2, $fn = 64);\n}\n\n// Assemble model\ntranslate([0, 0, base_ring_height])\nunion() {\n    // Main bowl\n    bowl();\n    \n    // Hammering marks\n    marks();\n}\n\n// Mallet beside bowl\ntranslate([bowl_dia/2 + mallet_head_dia/2 + 10, 0, base_ring_height + mallet_dia/2])\nmallet();",
    "renders": true
  },
  {
    "musical_instrument": "divan",
    "openscad_code": "// Medium-complexity realistic divan\n// Dimensions chosen for ~70 mm print length\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall sizes\ndivan_L = 70;\ndivan_W = 30;\ndivan_H = 25;\nleg_H = 8;\nmattress_T = 5;\nback_H = 12;\n\n// Wall / thickness params\nwall = 2;\ncorner_r = 3;\n\n// Main frame\nmodule frame() {\n    // Base platform\n    difference() {\n        translate([0, 0, leg_H])\n            rounded_box(divan_L, divan_W, wall, corner_r);\n        \n        // Hollow cavity\n        translate([0, 0, leg_H + wall])\n            rounded_box(divan_L - 2*wall, divan_W - 2*wall, wall + 0.1, corner_r - wall);\n    }\n\n    // Backrest\n    translate([-divan_L/2 + wall, 0, leg_H + wall])\n        rotate([0, 10, 0])\n            rounded_box(wall, divan_W - 2*wall, back_H, corner_r - wall);\n}\n\n// Mattress core\nmodule mattress() {\n    translate([0, 0, leg_H + wall + mattress_T/2])\n        rounded_box(divan_L - 2*wall, divan_W - 2*wall, mattress_T, corner_r - wall);\n}\n\n// Quilted surface pattern\nmodule quilting() {\n    rows = 5;\n    cols = 3;\n    dx = (divan_L - 2*wall - 4)/(cols - 1);\n    dy = (divan_W - 2*wall - 4)/(rows - 1);\n    for (i = [0:cols-1])\n        for (j = [0:rows-1])\n            translate([-divan_L/2 + wall + 2 + i*dx,\n                       -divan_W/2 + wall + 2 + j*dy,\n                       leg_H + wall + mattress_T + 0.1])\n                cylinder(h = 0.5, d = 2, $fn = 8);\n}\n\n// Legs\nmodule legs() {\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x*(divan_L/2 - 3),\n                       y*(divan_W/2 - 3),\n                       leg_H/2])\n                cylinder(h = leg_H, d = 3, $fn = 16);\n}\n\n// Helper: rounded top box\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        for (i = [-1, 1])\n            for (j = [-1, 1])\n                for (k = [-1, 1]) {\n                    translate([i*(l/2 - r), j*(w/2 - r), k*(h/2 - r)])\n                        sphere(r);\n                }\n    }\n}\n\n// Assembly\nunion() {\n    frame();\n    mattress();\n    quilting();\n    legs();\n}",
    "renders": true
  },
  {
    "musical_instrument": "çümbüş",
    "openscad_code": "// Çümbüş - Turkish stringed folk instrument\n// Medium complexity, realistic style, 3D printable\n\n$fn = 32;\n\nmodule rounded_cube(size, radius) {\n    hull() {\n        translate([radius, radius, radius]) sphere(r=radius);\n        translate([size.x - radius, radius, radius]) sphere(r=radius);\n        translate([size.x - radius, size.y - radius, radius]) sphere(r=radius);\n        translate([radius, size.y - radius, radius]) sphere(r=radius);\n        \n        translate([radius, radius, size.z - radius]) sphere(r=radius);\n        translate([size.x - radius, radius, size.z - radius]) sphere(r=radius);\n        translate([size.x - radius, size.y - radius, size.z - radius]) sphere(r=radius);\n        translate([radius, size.y - radius, size.z - radius]) sphere(r=radius);\n    }\n}\n\nmodule body() {\n    difference() {\n        // Main resonator body\n        cylinder(h = 60, d1 = 70, d2 = 65);\n        \n        // Hollow out\n        translate([0, 0, -1]) cylinder(h = 62, d1 = 66, d2 = 61);\n        \n        // Sound hole\n        translate([0, 0, 30]) cylinder(h = 10, d = 25);\n    }\n}\n\nmodule neck() {\n    // Neck\n    translate([0, 35, 60]) rotate([0, 0, 0]) {\n        difference() {\n            rounded_cube([8, 12, 80], 2);\n            translate([1, 1, 1]) rounded_cube([6, 10, 78], 1);\n        }\n    }\n    \n    // Headstock\n    translate([-2, 33, 140]) {\n        difference() {\n            rounded_cube([12, 16, 25], 3);\n            translate([1, 1, 1]) rounded_cube([10, 14, 23], 2);\n        }\n    }\n}\n\nmodule tuning_pegs() {\n    // Right side tuning pegs\n    for(i = [0:3]) {\n        translate([4, 33 + 8, 145 - i * 5]) {\n            rotate([90, 0, 0]) cylinder(h = 8, d = 3);\n            translate([0, 0, 8]) sphere(d = 5);\n        }\n    }\n    \n    // Left side tuning pegs\n    for(i = [0:3]) {\n        translate([-4, 33 + 8, 145 - i * 5]) {\n            rotate([90, 0, 0]) cylinder(h = 8, d = 3);\n            translate([0, 0, 8]) sphere(d = 5);\n        }\n    }\n}\n\nmodule strings() {\n    // 6 strings from bridge to tuning pegs\n    for(i = [0:5]) {\n        // Bridge to nut\n        translate([-2.5 + i * 1, 35 - 2, 60]) cylinder(h = 80, d = 0.8);\n        \n        // Nut to tuning pegs\n        translate([-2.5 + i * 1, 33 - 2, 140]) rotate([0, 90 - i * 5, 0]) \n            cylinder(h = 10, d = 0.8);\n    }\n}\n\nmodule bridge() {\n    // Bridge\n    translate([0, 35, 58]) {\n        difference() {\n            rounded_cube([20, 3, 4], 1);\n            for(i = [0:5]) {\n                translate([-2.5 + i * 1, 0, 2]) cylinder(h = 2, d = 1);\n            }\n        }\n    }\n}\n\nmodule tailpiece() {\n    // Tailpiece\n    translate([0, 35, 0]) {\n        difference() {\n            rounded_cube([15, 5, 2], 1);\n            for(i = [0:5]) {\n                translate([-2.5 + i * 1, 2, 0]) cylinder(h = 2, d = 1);\n            }\n        }\n    }\n}\n\nmodule frets() {\n    // 12 frets along neck\n    for(f = [1:12]) {\n        translate([0, 35 + 6, 60 + f * 6.3]) {\n            difference() {\n                cube([10, 0.5, 1.5], center = true);\n                translate([0, 0, -0.5]) cube([8, 0.5, 0.5], center = true);\n            }\n        }\n    }\n}\n\nmodule nut() {\n    // Nut at end of neck\n    translate([0, 35, 140]) {\n        cube([10, 0.5, 1.5], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    tuning_pegs();\n    bridge();\n    tailpiece();\n    frets();\n    nut();\n    strings();\n}\n\n// Base for printing support\ntranslate([0, 0, -2]) cylinder(h = 2, d = 75);",
    "renders": true
  },
  {
    "musical_instrument": "bouzouki",
    "openscad_code": "// Bouzouki - medium complexity, realistic style\n// All dimensions in mm\n\n$fn = 32;               // Smooth curves\nwall = 2;               // Wall thickness for printing\n\nmodule neck() {\n    // Main neck shaft\n    translate([0,0,5])\n    difference() {\n        hull() {\n            translate([-35, -6, 0]) cube([70, 12, 12]);\n            translate([-30, -5, 50]) cube([60, 10, 8]);\n        }\n        // Hollow for weight saving\n        translate([-33, -4, 2])\n        cube([66, 8, 46]);\n    }\n    \n    // Headstock\n    translate([0,0,60])\n    difference() {\n        hull() {\n            translate([-20, -4, 0]) cube([40, 8, 30]);\n            translate([-25, -5, 25]) cube([50, 10, 5]);\n        }\n        // Tuner holes (8 total)\n        for(i=[0:3]) {\n            translate([-18+i*12, 0, 5]) rotate([90,0,0])\n            cylinder(h=10, d=3);\n            translate([-18+i*12, 0, 20]) rotate([90,0,0])\n            cylinder(h=10, d=3);\n        }\n    }\n    \n    // Nut\n    translate([0,0,59.5])\n    cube([40, 1, 1.5], center=true);\n}\n\nmodule body() {\n    // Main bowl - pear shape\n    difference() {\n        scale([1, 0.7, 1])\n        rotate([90,0,0])\n        cylinder(h=40, d1=80, d2=70);\n        \n        // Hollow interior\n        translate([0,0,-20])\n        scale([0.8, 0.5, 1])\n        rotate([90,0,0])\n        cylinder(h=50, d1=75, d2=65);\n        \n        // Neck joint hole\n        translate([0,0,-20])\n        cube([30, 12, 40], center=true);\n    }\n    \n    // Soundboard\n    translate([0,0,-20])\n    difference() {\n        scale([1, 0.7, 1])\n        cylinder(h=wall, d=80);\n        \n        // Sound hole\n        translate([0,-10,0])\n        cylinder(h=wall+1, d=20);\n    }\n    \n    // Bridge\n    translate([0, -25, -19])\n    cube([50, 5, 3], center=true);\n    \n    // Tailpiece\n    translate([0, -38, -17])\n    difference() {\n        cube([25, 12, 5], center=true);\n        for(i=[-1:1]) {\n            translate([i*8, -6.5, 0])\n            cylinder(h=6, d=2);\n        }\n    }\n}\n\nmodule strings() {\n    // 8 strings in 4 courses\n    for(course=[0:3]) {\n        // Each course has 2 strings\n        for(str=[-0.5:1:0.5]) {\n            hull() {\n                // Bridge anchor\n                translate([course*8-12 + str*1, -25, -16])\n                sphere(d=1);\n                \n                // Nut anchor\n                translate([course*12-18 + str*0.5, 0, 60])\n                sphere(d=1);\n            }\n        }\n    }\n}\n\nmodule frets() {\n    // 23 frets - simplified spacing\n    for(fret=[1:23]) {\n        pos = 5 + fret*fret*0.8;\n        translate([0, 0, pos])\n        cube([40, 1, 1.5], center=true);\n    }\n}\n\n// Assembly\nneck();\ntranslate([0,0,-20]) body();\nstrings();\nfrets();",
    "renders": true
  },
  {
    "musical_instrument": "tzouras",
    "openscad_code": "// Tzouras - Greek long-necked lute\n// Medium complexity, realistic style\n\n$fn = 32;\n\n// Overall dimensions (mm)\nbody_length = 40;\nbody_width = 30;\nbody_depth = 12;\nneck_length = 45;\nneck_width = 7;\nheadstock_length = 12;\nheadstock_width = 9;\nbridge_height = 2;\nbridge_width = 10;\nbridge_length = 3;\nsoundhole_radius = 4;\nstring_count = 8;\n\nmodule body() {\n    // Main bowl shape\n    difference() {\n        // Outer shell\n        hull() {\n            for (x = [-1, 1])\n                translate([x * body_width/2, 0, 0])\n                    sphere(d = body_depth);\n            translate([0, -body_length/2, 0])\n                sphere(d = body_depth);\n            translate([0, body_length/2, 0])\n                sphere(d = body_depth * 0.8);\n        }\n        \n        // Hollow interior\n        scale([0.8, 0.9, 0.6])\n        translate([0, 0, -body_depth/4])\n            hull() {\n                for (x = [-1, 1])\n                    translate([x * body_width/2, 0, 0])\n                        sphere(d = body_depth);\n                translate([0, -body_length/2, 0])\n                    sphere(d = body_depth);\n                translate([0, body_length/2, 0])\n                    sphere(d = body_depth * 0.8);\n            }\n    }\n    \n    // Flat top surface\n    translate([0, 0, body_depth/2])\n        cube([body_width, body_length, 0.5], center = true);\n}\n\nmodule soundhole() {\n    // Rosette around soundhole\n    difference() {\n        cylinder(h = 1, r = soundhole_radius + 1.5);\n        cylinder(h = 1.1, r = soundhole_radius + 1);\n    }\n    \n    // Actual soundhole\n    translate([0, 0, -0.5])\n        cylinder(h = 2, r = soundhole_radius);\n}\n\nmodule neck() {\n    // Neck shaft\n    translate([0, -neck_length/2 - body_length/2, body_depth/2])\n        cube([neck_width, neck_length, 4], center = true);\n    \n    // Fingerboard\n    translate([0, -neck_length/2 - body_length/2, body_depth/2 + 2.5])\n        cube([neck_width + 2, neck_length, 1], center = true);\n    \n    // Frets\n    for (i = [1:12]) {\n        translate([0, -neck_length/2 - body_length/2 + (neck_length * i/13), body_depth/2 + 3])\n            cube([neck_width + 2, 0.5, 0.3], center = true);\n    }\n}\n\nmodule headstock() {\n    // Headstock base\n    translate([0, -neck_length - body_length/2 - headstock_length/2, body_depth/2 + 1])\n        cube([headstock_width, headstock_length, 3], center = true);\n    \n    // Tuning pegs (simplified)\n    for (i = [0:string_count/2-1]) {\n        // Left side\n        translate([-headstock_width/2 - 1, -neck_length - body_length/2 - 3 - i*3, body_depth/2 + 1])\n            rotate([0, 90, 0])\n                cylinder(h = 2, r = 0.5);\n        \n        // Right side\n        translate([headstock_width/2 + 1, -neck_length - body_length/2 - 3 - i*3, body_depth/2 + 1])\n            rotate([0, 90, 0])\n                cylinder(h = 2, r = 0.5);\n    }\n}\n\nmodule bridge() {\n    // Bridge base\n    translate([0, body_length/4, body_depth/2 + 0.5])\n        cube([bridge_width, bridge_length, bridge_height], center = true);\n    \n    // Saddle\n    translate([0, body_length/4, body_depth/2 + bridge_height + 0.25])\n        cube([bridge_width - 2, bridge_length - 1, 0.5], center = true);\n}\n\nmodule strings() {\n    // String anchor points\n    translate([0, body_length/4, body_depth/2 + bridge_height + 0.5])\n        for (i = [0:string_count-1]) {\n            translate([(i - string_count/2 + 0.5) * 0.8, 0, 0])\n                cylinder(h = 0.5, r = 0.2);\n        }\n    \n    // String paths (simplified as thin cylinders)\n    for (i = [0:string_count-1]) {\n        translate([(i - string_count/2 + 0.5) * 0.8, 0, body_depth/2 + bridge_height + 0.5])\n            rotate([90, 0, 0])\n                cylinder(h = body_length/2 + neck_length + headstock_length - 6, r = 0.1);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    translate([0, 0, body_depth/2 + 0.5])\n        soundhole();\n    neck();\n    headstock();\n    bridge();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "baglamas",
    "openscad_code": "// Baglamas – medium-complexity, 3D-printable, realistic style\n// Total length ≈ 80 mm, wall thickness ≥ 1.2 mm\n\n// Parameters\nbody_len = 42;\nbody_w   = 28;\nbody_h   = 18;\nneck_len = 38;\nneck_w   =  6;\nneck_h   =  8;\npeg_cnt  =  6;      // 3×2\npeg_len  = 10;\npeg_d    =  2.2;\nstr_cnt  =  3;\nstr_d    =  0.6;\nsound_hole_d = 6;\n\n// Wall / shell thickness\nwall = 1.5;\n\n// Body shell (hollow pear shape)\nmodule body_shell() {\n    difference() {\n        scale([1, 0.7, 1])\n            sphere(d = body_w);\n        translate([0, 0, -body_h/2 - 1])\n            cube([body_w + 2, body_w + 2, body_h + 2], center = true);\n        // Sound hole\n        translate([0, 0, body_h/2 - wall])\n            cylinder(h = wall + 1, d = sound_hole_d, $fn = 32);\n    }\n}\n\n// Neck with fingerboard\nmodule neck() {\n    union() {\n        // Neck beam\n        translate([0, 0, neck_h/2])\n            cube([neck_len, neck_w, neck_h], center = true);\n        // Fingerboard (raised)\n        translate([neck_len/2 - 2, 0, neck_h])\n            cube([neck_len - 4, neck_w + 1, 1.5], center = false);\n    }\n}\n\n// Headstock with pegs\nmodule headstock() {\n    translate([neck_len - 1, 0, neck_h + 1.5])\n        rotate([0, 90, 0])\n            difference() {\n                // Head plate\n                cube([12, neck_w + 4, 4], center = true);\n                // Peg holes (left side)\n                for (i = [0 : peg_cnt/2 - 1]) {\n                    translate([0, -neck_w/2 - 2, -4 + i*3.5])\n                        rotate([90, 0, 0])\n                            cylinder(h = 10, d = peg_d, $fn = 12);\n                }\n                // Peg holes (right side)\n                mirror([0, 1, 0])\n                    for (i = [0 : peg_cnt/2 - 1]) {\n                        translate([0, -neck_w/2 - 2, -4 + i*3.5])\n                            rotate([90, 0, 0])\n                                cylinder(h = 10, d = peg_d, $fn = 12);\n                    }\n            }\n    // Peg cylinders\n    for (i = [0 : peg_cnt/2 - 1]) {\n        translate([neck_len + 2, -neck_w/2 - 1.5, neck_h + 1.5 - 4 + i*3.5])\n            rotate([0, 90, 0])\n                cylinder(h = peg_len, d = peg_d + 0.4, $fn = 8);\n        translate([neck_len + 2, +neck_w/2 + 1.5, neck_h + 1.5 - 4 + i*3.5])\n            rotate([0, 90, 0])\n                cylinder(h = peg_len, d = peg_d + 0.4, $fn = 8);\n    }\n}\n\n// Bridge (floating, printed separately or glued)\nmodule bridge() {\n    translate([-body_len/2 + 8, 0, body_h/2 + wall])\n        cube([4, neck_w + 2, 2], center = true);\n}\n\n// String lines (visual only – thin cylinders)\nmodule strings() {\n    color(\"tan\")\n    for (j = [0 : str_cnt - 1]) {\n        y = (j - 1) * 1.5;\n        hull() {\n            translate([neck_len + peg_len - 1, y, neck_h + 1.5])\n                sphere(d = str_d);\n            translate([-body_len/2 + 8, y, body_h/2 + wall + 2])\n                sphere(d = str_d);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    translate([-body_len/2, 0, 0])\n        body_shell();\n    neck();\n    headstock();\n    bridge();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "buzouki",
    "openscad_code": "// Bouzouki - Medium complexity realistic version\n// Overall length ~85 mm, printable in one piece\n\n$fn = 32;\n\n// Main dimensions\nbody_len = 55;\nbody_w   = 30;\nbody_h   = 12;\nneck_len = 30;\nneck_w   = 6;\nneck_h   = 8;\nhead_len = 15;\nhead_w   = 8;\nhead_h   = 6;\nsound_hole_d = 8;\nbridge_h = 3;\nbridge_w = 20;\ntuner_len = 2;\ntuner_d   = 1.6;\nstring_d  = 0.4;\nwall_t    = 1.5;\n\nmodule body() {\n    // Hollow body shell\n    difference() {\n        // Outer shell with rounded back\n        hull() {\n            translate([0, 0, body_h/2])\n                scale([1, 0.7, 0.5])\n                    sphere(d = body_w);\n            translate([body_len*0.9, 0, body_h/2])\n                scale([0.8, 0.9, 0.5])\n                    sphere(d = body_w*0.9);\n        }\n        \n        // Hollow cavity\n        translate([0, 0, wall_t])\n            scale([0.9, 0.8, 0.8])\n                hull() {\n                    translate([0, 0, body_h/2])\n                        scale([1, 0.7, 0.5])\n                            sphere(d = body_w - 2*wall_t);\n                    translate([body_len*0.9, 0, body_h/2])\n                        scale([0.8, 0.9, 0.5])\n                            sphere(d = body_w*0.9 - 2*wall_t);\n                }\n        \n        // Sound hole\n        translate([body_len*0.7, 0, body_h/2])\n            rotate([90, 0, 0])\n                cylinder(h = body_h, d = sound_hole_d, center = true);\n    }\n}\n\nmodule neck() {\n    // Neck tapered\n    hull() {\n        translate([body_len, 0, body_h/2])\n            cube([neck_w, neck_w, neck_h], center = true);\n        translate([body_len + neck_len, 0, body_h/2 + neck_h/2])\n            cube([neck_w*0.8, neck_w*0.8, neck_h*0.8], center = true);\n    }\n    \n    // Fretboard\n    translate([body_len + neck_len/2, 0, body_h/2 + neck_h/2 + 0.5])\n        cube([neck_len + 2, neck_w*0.8, 1], center = true);\n    \n    // Frets\n    for(i = [1:5]) {\n        translate([body_len + i*neck_len/6, 0, body_h/2 + neck_h/2 + 1.25])\n            cube([0.5, neck_w*0.7, 0.5], center = true);\n    }\n}\n\nmodule headstock() {\n    // Headstock shape\n    translate([body_len + neck_len, 0, body_h/2 + neck_h/2])\n        cube([head_len, head_w, head_h], center = true);\n    \n    // Tuners (4 pegs)\n    for(i = [-1, 1]) {\n        for(j = [0, 1]) {\n            translate([body_len + neck_len + 2 + j*6, i*(head_w/2 + 1), \n                       body_h/2 + neck_h/2 + (i*3)])\n                rotate([90, 0, 0])\n                    cylinder(h = tuner_len, d = tuner_d);\n        }\n    }\n}\n\nmodule bridge() {\n    // Bridge on body\n    translate([body_len*0.65, 0, body_h/2])\n        cube([bridge_w, 3, bridge_h], center = true);\n    \n    // String notches\n    for(i = [-1.5, -0.5, 0.5, 1.5]) {\n        translate([body_len*0.65, i*3, body_h/2 + bridge_h/2 + 0.2])\n            cube([0.5, 1, 0.4], center = true);\n    }\n}\n\nmodule strings() {\n    // 4 strings\n    for(i = [-1.5, -0.5, 0.5, 1.5]) {\n        // From bridge to nut\n        translate([body_len*0.65, i*3, body_h/2 + bridge_h/2 + string_d/2])\n            rotate([0, 90, 0])\n                cylinder(h = neck_len + head_len - 2, d = string_d);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    headstock();\n    bridge();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "laouto",
    "openscad_code": "// Laouto - Greek lute\n// Designed for 3D printing at ~80mm length\n\nmodule body() {\n    // Main bowl\n    difference() {\n        scale([1.2, 1.6, 0.8])\n            sphere(d=50, $fn=64);\n            \n        // Hollow interior\n        scale([1.1, 1.5, 0.75])\n            sphere(d=48, $fn=64);\n            \n        // Front hole\n        translate([0, 10, 3])\n            cylinder(h=5, d=15, $fn=32);\n    }\n    \n    // Neck attachment\n    translate([0, -38, 0])\n        scale([0.8, 0.4, 0.3])\n            sphere(d=30, $fn=32);\n}\n\nmodule neck() {\n    // Neck shaft\n    translate([0, -75, 5])\n        rotate([0, 0, 0])\n            scale([0.8, 1.2, 0.6])\n                cube([6, 35, 3], center=true);\n                \n    // Headstock\n    translate([0, -92, 8])\n        rotate([0, 0, 15])\n            cube([8, 12, 3], center=true);\n            \n    // Tuning pegs (4 pairs)\n    for(i=[-1, 1]) {\n        translate([i*4, -100, 9]) {\n            for(j=[0, 1]) {\n                translate([0, j*4, 0])\n                    cylinder(h=6, d=1.5, $fn=12);\n            }\n        }\n    }\n}\n\nmodule strings() {\n    // 8 strings in 4 courses\n    for(i=[-1.5, -0.5, 0.5, 1.5]) {\n        translate([i, 0, 8.5]) {\n            // Nut to bridge\n            hull() {\n                translate([0, -95, 0])\n                    sphere(d=0.8, $fn=8);\n                translate([0, 35, 0])\n                    sphere(d=0.8, $fn=8);\n            }\n        }\n    }\n}\n\nmodule bridge() {\n    // Bridge on soundboard\n    translate([0, 35, 3])\n        cube([12, 2, 1.5], center=true);\n        \n    // Saddle\n    translate([0, 35, 4.5])\n        cube([10, 0.5, 0.5], center=true);\n}\n\n// Assemble laouto\nunion() {\n    body();\n    neck();\n    bridge();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "oud",
    "openscad_code": "// Oud - Medium Complexity Realistic Style\n// Designed for 3D printing (no overhangs, 1mm wall thickness)\n\n$fn = 32;  // Smooth curves\nwall = 1;  // Wall thickness for 3D printing\n\nmodule bowl_body() {\n    // Main bowl - pear shaped body\n    difference() {\n        // Outer shell\n        scale([1, 1.3, 1]) sphere(d = 45);\n        \n        // Hollow interior\n        translate([0, 0, -2]) \n            scale([0.85, 1.1, 0.85]) \n                sphere(d = 43);\n        \n        // Flat bottom for printing\n        translate([0, 0, -25]) cube([50, 50, 50], center = true);\n    }\n    \n    // Sound hole\n    translate([0, 10, 0]) rotate([90, 0, 0])\n        cylinder(h = 10, d1 = 12, d2 = 10);\n}\n\nmodule neck() {\n    // Neck extending from bowl\n    translate([0, 35, 0]) rotate([0, 90, 0])\n        difference() {\n            // Main neck\n            hull() {\n                translate([0, 0, -3]) cube([30, 6, 4], center = true);\n                translate([25, 0, -3]) cube([20, 5, 3], center = true);\n            }\n            \n            // Hollow neck\n            hull() {\n                translate([0, 0, -2.5]) cube([28, 4, 2], center = true);\n                translate([25, 0, -2.5]) cube([18, 3, 1.5], center = true);\n            }\n        }\n}\n\nmodule pegbox() {\n    // Pegbox head\n    translate([23, 35, -5]) rotate([0, 90, 0])\n        difference() {\n            // Pegbox shape\n            hull() {\n                cube([10, 8, 12], center = true);\n                translate([8, 0, 0]) cube([8, 6, 10], center = true);\n            }\n            \n            // Hollow pegbox\n            cube([7, 4, 9], center = true);\n        }\n    \n    // Pegs (simplified cylinders)\n    for (i = [-1:1]) {\n        translate([28, 35 + i*3, -5 + i*1]) rotate([90, 0, 90])\n            cylinder(h = 8, d1 = 3, d2 = 2);\n    }\n}\n\nmodule bridge() {\n    // Bridge on body\n    translate([0, -15, 2])\n        difference() {\n            // Bridge base\n            cube([15, 3, 2], center = true);\n            \n            // String grooves\n            for (i = [-2, 0, 2]) {\n                translate([i*3, 0, 1])\n                    cylinder(h = 3, d = 1);\n            }\n        }\n}\n\nmodule strings() {\n    // Simplified strings as cylinders\n    for (i = [-2, 0, 2]) {\n        color(\"silver\")\n        hull() {\n            translate([i*3, -15, 3]) sphere(d = 0.5);\n            translate([i*2, 35, -3]) sphere(d = 0.5);\n        }\n    }\n}\n\nmodule frets() {\n    // Frets on neck\n    for (i = [1:6]) {\n        translate([i*3.5, 35, -3])\n            rotate([90, 0, 0])\n                cylinder(h = 5.5, d = 0.5);\n    }\n}\n\n// Assembly\nunion() {\n    bowl_body();\n    neck();\n    pegbox();\n    bridge();\n    frets();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "qanun",
    "openscad_code": "// OpenSCAD Qanun – medium complexity, 3D-printable, ~80 mm long\n// Body\nmodule body() {\n    difference() {\n        // Main trapezoid box\n        hull() {\n            translate([0, 0, 0])    cube([70, 25, 4], center=true);\n            translate([5, 0, 0])    cube([50, 20, 4], center=true);\n        }\n        // Hollow cavity\n        translate([0, 0, -0.5]) cube([65, 22, 3], center=true);\n    }\n}\n\n// Bridge (mandal)\nmodule bridge() {\n    translate([-32, 0, 2.5]) cube([3, 22, 3], center=true);\n}\n\n// Sound holes rosette\nmodule rosette() {\n    difference() {\n        cylinder(h=1, d=8, $fn=32);\n        for(a=[0:45:135]) rotate([0,0,a]) translate([2,0,0]) cylinder(h=1.2, d=1.8, $fn=16);\n    }\n}\n\n// Pegbox\nmodule pegbox() {\n    difference() {\n        translate([35, 0, 1]) cube([15, 12, 6], center=true);\n        for(i=[-2:1:2]) translate([42, i*2.2, 3]) rotate([90,0,0]) cylinder(h=3, d=1.5, $fn=12);\n    }\n}\n\n// Strings\nmodule strings() {\n    for(i=[-9:1:9]) {\n        translate([i*1.1, 0, 2.2]) cylinder(h=70, d=0.6, $fn=8);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 2]) body();\ntranslate([0, 0, 0]) bridge();\ntranslate([0, 0, 2.5]) rosette();\ntranslate([0, 0, 0]) pegbox();\ntranslate([-35, 0, 0]) strings();",
    "renders": true
  },
  {
    "musical_instrument": "kanun",
    "openscad_code": "// Kanun (Qanun) - Turkish Zither\n// Medium complexity realistic model for 3D printing\n\n$fn = 32;\n\n// Overall dimensions (mm)\nbody_length = 90;\nbody_width = 35;\nbody_thickness = 6;\nneck_length = 40;\npegbox_length = 20;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule soundboard() {\n    difference() {\n        // Main body\n        hull() {\n            translate([0, 0, 0])\n                cube([body_length, body_width, body_thickness], center=true);\n            translate([neck_length/2, 0, 0])\n                cube([neck_length, body_width*0.7, body_thickness], center=true);\n        }\n        \n        // Sound hole (rosette)\n        translate([-body_length/4, 0, body_thickness/2-wall])\n            cylinder(h=wall+0.2, r=body_width/6, center=true);\n            \n        // Hollow interior\n        translate([0, 0, 0])\n            scale([0.85, 0.85, 0.9])\n            cube([body_length-wall, body_width-wall, body_thickness], center=true);\n    }\n}\n\nmodule bridge() {\n    // Main bridge piece\n    translate([body_length/4, 0, body_thickness/2+0.5])\n        cube([2, body_width*0.8, 1.5], center=true);\n    \n    // Bridge notches\n    for(i = [-3:3]) {\n        translate([body_length/4, i*3, body_thickness/2+1.5])\n            cube([2.2, 0.5, 1], center=true);\n    }\n}\n\nmodule strings() {\n    // String anchor\n    translate([-body_length/2+2, 0, body_thickness/2+0.3])\n        cube([1, body_width*0.9, 0.6], center=true);\n    \n    // Strings\n    for(i = [-4:4]) {\n        y_pos = i * 3.5;\n        hull() {\n            translate([-body_length/2+3, y_pos, body_thickness/2+0.5])\n                sphere(r=0.3);\n            translate([body_length/2+neck_length-3, y_pos, body_thickness/2+0.5])\n                sphere(r=0.3);\n        }\n    }\n}\n\nmodule pegbox() {\n    // Pegbox body\n    translate([body_length/2+neck_length, 0, 0])\n        cube([pegbox_length, body_width*0.6, body_thickness*1.2], center=true);\n    \n    // Pegs (tuning pins)\n    for(i = [1:4]) {\n        y_pos = i * 4 - 8;\n        // Left side pegs\n        translate([body_length/2+neck_length-3, y_pos, body_thickness*0.8])\n            rotate([90, 0, 0])\n                cylinder(h=6, r=1.2);\n        // Right side pegs\n        translate([body_length/2+neck_length+3, y_pos, body_thickness*0.8])\n            rotate([90, 0, 180])\n                cylinder(h=6, r=1.2);\n    }\n}\n\nmodule mandal() {\n    // Small levers on side\n    translate([body_length/2, body_width/2+1, 0])\n        for(i = [0:3]) {\n            translate([i*5-7.5, 0, body_thickness/2])\n                cube([2, 2, 0.5], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    soundboard();\n    translate([0, 0, 0.1]) bridge();\n    strings();\n    pegbox();\n    mandal();\n}",
    "renders": true
  },
  {
    "musical_instrument": "lyra",
    "openscad_code": "// Realistic 3D-printable Lyra (medium complexity)\n// Overall size: ~70 mm width\n\n// Parameters\n$fa = 1;\n$fs = 0.4;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main ring dimensions\nring_outer_r = 30;\nring_inner_r = 28;\nring_thick = 6;\n\n// Cross bar dimensions\nbar_width = 4;\nbar_thick = 3;\nbar_len = 55;\n\n// String dimensions\nstring_d = 0.8;\nstring_len = 50;\n\n// Support arms\narm_len = 25;\narm_w = 3;\narm_t = 2;\n\nmodule main_ring() {\n    difference() {\n        cylinder(h = ring_thick, r = ring_outer_r, center = true);\n        cylinder(h = ring_thick + 0.2, r = ring_inner_r, center = true);\n    }\n}\n\nmodule cross_bar() {\n    translate([0, 0, 0])\n        cube([bar_len, bar_thick, bar_width], center = true);\n}\n\nmodule support_arm() {\n    translate([0, ring_outer_r - arm_len/2, 0])\n        rotate([90, 0, 0])\n            cylinder(h = arm_len, r = arm_t, $fn = 8);\n}\n\nmodule string(n) {\n    angle = n * 15 - 30;\n    translate([0, 0, -ring_thick/2 - 0.5])\n        rotate([0, angle, 0])\n            translate([0, 0, string_len/2])\n                cylinder(h = string_len, r = string_d/2, center = true);\n}\n\nmodule lyra_assembly() {\n    // Main ring upright\n    rotate([0, 90, 0])\n        main_ring();\n\n    // Cross bar through ring\n    cross_bar();\n\n    // Two support arms\n    translate([0, 0, ring_thick/2])\n        support_arm();\n    mirror([0, 0, 1])\n        translate([0, 0, ring_thick/2])\n            support_arm();\n\n    // Five strings\n    for (i = [0:4])\n        string(i);\n\n    // Reinforcement disks on ring edges\n    translate([0, 0, ring_thick/2 + bar_thick/2])\n        cylinder(h = bar_thick, r = ring_outer_r + 1, center = true);\n    mirror([0, 0, 1])\n        translate([0, 0, ring_thick/2 + bar_thick/2])\n            cylinder(h = bar_thick, r = ring_outer_r + 1, center = true);\n}\n\n// Render\nlyra_assembly();",
    "renders": true
  },
  {
    "musical_instrument": "kithara",
    "openscad_code": "// Kithara - Ancient Greek lyre variant\n// Medium complexity realistic model\n\n$fn = 32;\n\n// Overall dimensions\nbody_length = 80;\nbody_width = 45;\nbody_thickness = 12;\nsoundbox_depth = 35;\n\n// Soundbox\nmodule soundbox() {\n    difference() {\n        // Main box\n        translate([0, 0, soundbox_depth/2])\n            cube([body_length * 0.6, body_width * 0.7, soundbox_depth], center=true);\n        \n        // Hollow interior\n        translate([0, 0, soundbox_depth/2 + 1])\n            cube([body_length * 0.6 - 4, body_width * 0.7 - 4, soundbox_depth - 2], center=true);\n        \n        // Sound holes\n        for(i = [-1:1]) {\n            translate([i * 12, 0, soundbox_depth/2])\n                cylinder(h=3, r=4);\n        }\n    }\n}\n\n// Arms\nmodule arms() {\n    // Left arm\n    translate([-body_length/2 - 5, 0, 0])\n        rotate([0, 15, 0])\n            cylinder(h=body_length * 0.8, r=3);\n    \n    // Right arm\n    translate([body_length/2 + 5, 0, 0])\n        rotate([0, -15, 0])\n            cylinder(h=body_length * 0.8, r=3);\n    \n    // Crossbar (yoke)\n    translate([0, 0, body_length * 0.75])\n        rotate([90, 0, 0])\n            cylinder(h=body_width + 20, r=2.5);\n}\n\n// Bridge\nmodule bridge() {\n    translate([0, -body_width/3, soundbox_depth - 2])\n        cube([25, 3, 5], center=true);\n}\n\n// Strings\nmodule strings() {\n    for(i = [-3:3]) {\n        translate([i * 4, 0, soundbox_depth/2])\n            cylinder(h=body_length * 0.75, r=0.5);\n    }\n}\n\n// Base plate\nmodule base() {\n    translate([0, 0, body_thickness/2])\n        cube([body_length, body_width, body_thickness], center=true);\n}\n\n// Assembly\nunion() {\n    // Base structure\n    base();\n    \n    // Soundbox on top\n    translate([0, 0, body_thickness])\n        soundbox();\n    \n    // Arms extending upward\n    arms();\n    \n    // Bridge for strings\n    bridge();\n    \n    // Strings connecting yoke to bridge\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "phorminx",
    "openscad_code": "// Phorminx - Ancient Greek lyre-like instrument\n// Medium complexity realistic style\n\n// Overall dimensions\nbody_length = 80;\nbody_width = 45;\nbody_depth = 8;\narm_length = 70;\narm_width = 5;\narm_thickness = 8;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body module\nmodule phorminx_body() {\n    difference() {\n        // Main body shell\n        hull() {\n            // Left side\n            translate([-body_width/2, 0, 0])\n                scale([1, 1.2, 1])\n                sphere(d=body_width);\n            // Right side  \n            translate([body_width/2, 0, 0])\n                scale([1, 1.2, 1])\n                sphere(d=body_width);\n            // Bottom\n            translate([0, -body_length/2+5, 0])\n                sphere(d=body_width*0.8);\n            // Top\n            translate([0, body_length/2-10, 0])\n                sphere(d=body_width*0.6);\n        }\n        \n        // Hollow out interior\n        scale([0.8, 0.8, 0.8])\n        hull() {\n            translate([-body_width/2, 0, 0])\n                scale([1, 1.2, 1])\n                sphere(d=body_width);\n            translate([body_width/2, 0, 0])\n                scale([1, 1.2, 1])\n                sphere(d=body_width);\n            translate([0, -body_length/2+5, 0])\n                sphere(d=body_width*0.8);\n            translate([0, body_length/2-10, 0])\n                sphere(d=body_width*0.6);\n        }\n        \n        // Sound holes\n        for(i=[-1:1]) {\n            translate([i*10, -body_length/4, 0])\n                cylinder(h=body_depth+1, d=6, $fn=20);\n        }\n    }\n}\n\n// Curved arms module\nmodule phorminx_arm(side) {\n    // Create curved arm using hull of spheres\n    translate([side*body_width/2, body_length/2-15, body_depth/2]) {\n        rotate([0, 0, side*10]) {\n            hull() {\n                sphere(d=arm_width);\n                translate([0, arm_length*0.3, arm_length*0.4])\n                    sphere(d=arm_width*0.8);\n                translate([0, arm_length*0.6, arm_length*0.6])\n                    sphere(d=arm_width*0.6);\n                translate([0, arm_length*0.8, arm_length*0.7])\n                    sphere(d=arm_width*0.5);\n            }\n        }\n    }\n}\n\n// Crossbar module\nmodule crossbar() {\n    translate([0, body_length/2+arm_length*0.8, body_depth/2+arm_length*0.7]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=body_width+15, d=arm_width, $fn=20);\n        }\n    }\n}\n\n// String anchor module\nmodule string_anchors() {\n    // Bottom anchor bar\n    translate([0, -body_length/2+5, body_depth/2]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=body_width-5, d=3, $fn=20);\n        }\n    }\n    \n    // Individual string pegs\n    for(i=[-2:2]) {\n        translate([i*8, -body_length/2+5, body_depth/2]) {\n            cylinder(h=5, d=2, $fn=8);\n        }\n    }\n}\n\n// Strings module\nmodule strings() {\n    for(i=[-2:2]) {\n        hull() {\n            translate([i*8, -body_length/2+5, body_depth/2+2.5])\n                sphere(d=1);\n            translate([i*4, body_length/2+arm_length*0.8, body_depth/2+arm_length*0.7])\n                sphere(d=1);\n        }\n    }\n}\n\n// Decorative rosette\nmodule rosette() {\n    translate([0, body_length/4, body_depth/2+1]) {\n        cylinder(h=1, d=20, $fn=6);\n        for(i=[0:5]) {\n            rotate([0, 0, i*60]) {\n                translate([7, 0, 0.5])\n                    cube([14, 2, 1], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nrotate([90, 0, 0]) {\n    // Main body\n    phorminx_body();\n    \n    // Arms\n    phorminx_arm(1);\n    phorminx_arm(-1);\n    \n    // Crossbar\n    crossbar();\n    \n    // String anchors\n    string_anchors();\n    \n    // Strings\n    strings();\n    \n    // Decorative elements\n    rosette();\n}",
    "renders": true
  },
  {
    "musical_instrument": "barbiton",
    "openscad_code": "// Barbiton - Ancient Greek lyre variant\n// Medium complexity, realistic style, 3D printable\n// Overall length ~90mm\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\nbody_length = 55;\nbody_width = 35;\nbody_thickness = 12;\narm_length = 40;\narm_thickness = 6;\nstring_count = 7;\n\nmodule barbiton_body() {\n    // Curved resonator body\n    difference() {\n        // Main body shape\n        hull() {\n            translate([0, 0, body_thickness/2])\n                scale([1, 0.7, 1])\n                sphere(d=body_width);\n            translate([body_length*0.7, 0, body_thickness/2])\n                scale([0.8, 0.6, 1])\n                sphere(d=body_width*0.8);\n        }\n        \n        // Hollow interior\n        translate([0, 0, body_thickness/2 + 2])\n            scale([0.85, 0.85, 0.8])\n            hull() {\n                translate([0, 0, 0])\n                    scale([1, 0.7, 1])\n                    sphere(d=body_width*0.9);\n                translate([body_length*0.7, 0, 0])\n                    scale([0.8, 0.6, 1])\n                    sphere(d=body_width*0.7);\n            }\n        \n        // Sound hole\n        translate([-5, 0, body_thickness/2])\n            cylinder(h=body_thickness+1, d=8, center=true);\n    }\n    \n    // Reinforcement ribs inside\n    for(i=[-1:1]) {\n        translate([i*15, 0, body_thickness/2])\n            cube([2, body_width*0.7, body_thickness-2], center=true);\n    }\n}\n\nmodule barbiton_arms() {\n    // Left arm\n    translate([-body_length*0.3, body_width/2 + arm_thickness/2, body_thickness])\n        rotate([0, 15, -10])\n        cylinder(h=arm_length, d=arm_thickness);\n    \n    // Right arm\n    translate([-body_length*0.3, -body_width/2 - arm_thickness/2, body_thickness])\n        rotate([0, -15, 10])\n        cylinder(h=arm_length, d=arm_thickness);\n    \n    // Cross bar (yoke)\n    translate([-body_length*0.3 - arm_length*0.7, 0, body_thickness + arm_length*0.7])\n        rotate([90, 0, 0])\n        cylinder(h=body_width + arm_thickness*2, d=arm_thickness);\n}\n\nmodule tuning_system() {\n    // Tuning pegs on yoke\n    for(i=[0:string_count-1]) {\n        translate([\n            -body_length*0.3 - arm_length*0.7, \n            (i - string_count/2 + 0.5) * (body_width + arm_thickness*2) / string_count,\n            body_thickness + arm_length*0.7 + arm_thickness/2\n        ]) {\n            rotate([90, 0, 0])\n            cylinder(h=5, d=4);\n            translate([0, 0, 2.5])\n            sphere(d=4);\n        }\n    }\n}\n\nmodule strings() {\n    // Vertical strings\n    for(i=[0:string_count-1]) {\n        x_pos = -body_length*0.3 - arm_length*0.7;\n        y_pos = (i - string_count/2 + 0.5) * (body_width + arm_thickness*2) / string_count;\n        \n        translate([x_pos, y_pos, body_thickness + arm_length*0.7 + arm_thickness/2])\n            rotate([90, 0, 0])\n            cylinder(h=body_thickness + arm_length*0.7 - 2, d=0.5);\n        \n        // Anchor point at base\n        translate([body_length*0.5, y_pos*0.3, body_thickness/2])\n            sphere(d=2);\n    }\n}\n\nmodule bridge() {\n    // Raised bridge for strings\n    translate([body_length*0.4, 0, body_thickness/2 + 2])\n        cube([15, body_width*0.8, 3], center=true);\n    \n    // Bridge notches\n    for(i=[0:string_count-1]) {\n        y_pos = (i - string_count/2 + 0.5) * (body_width*0.8) / string_count;\n        translate([body_length*0.4, y_pos, body_thickness/2 + 2 + 1.5])\n            cube([16, 1, 3], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    barbiton_body();\n    barbiton_arms();\n    tuning_system();\n    strings();\n    bridge();\n}",
    "renders": true
  },
  {
    "musical_instrument": "cithara",
    "openscad_code": "// Cithara - ancient Greek lyre variant\n// Medium complexity realistic style\n\n// Overall scale\nscale_factor = 0.5;\n\n// Main body parameters\nbody_length = 100 * scale_factor;\nbody_width = 45 * scale_factor;\nbody_thickness = 12 * scale_factor;\nsoundhole_diameter = 18 * scale_factor;\n\n// Arms and yoke\narm_width = 6 * scale_factor;\narm_thickness = arm_width * 0.8;\narm_length = 70 * scale_factor;\nyoke_length = 65 * scale_factor;\nyoke_diameter = 8 * scale_factor;\n\n// Strings\nstring_count = 7;\nstring_diameter = 0.8 * scale_factor;\nstring_length = arm_length + 20 * scale_factor;\n\n// Bridge\nbridge_width = 30 * scale_factor;\nbridge_height = 8 * scale_factor;\nbridge_thickness = 4 * scale_factor;\n\n// Cross bar\ncrossbar_width = body_width * 0.8;\ncrossbar_height = 5 * scale_factor;\n\n// Module for rounded edges on body\nmodule rounded_box(l,w,h,r) {\n    hull() {\n        for(i=[-1,1], j=[-1,1], k=[-1,1])\n            translate([i*(l/2-r), j*(w/2-r), k*(h/2-r)])\n                sphere(r=r);\n    }\n}\n\n// Main resonator body\nmodule body() {\n    difference() {\n        // Main body with rounded edges\n        rounded_box(body_length, body_width, body_thickness, 5 * scale_factor);\n        \n        // Sound hole\n        translate([0, 0, body_thickness/2])\n            cylinder(h=body_thickness+2, d=soundhole_diameter, $fn=32);\n        \n        // Arm slots\n        translate([body_length/2 - 5, 0, 0])\n            cube([10, arm_width + 4, body_thickness], center=true);\n    }\n}\n\n// Arms extending from body\nmodule arm() {\n    // Left arm\n    translate([-body_length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=arm_length, d=arm_width, $fn=8);\n    \n    // Right arm\n    translate([body_length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=arm_length, d=arm_width, $fn=8);\n}\n\n// Yoke at top connecting arms\nmodule yoke() {\n    translate([0, arm_length, 0])\n        rotate([90, 0, 0])\n            cylinder(h=yoke_length, d=yoke_diameter, $fn=16);\n}\n\n// String anchor point\nmodule string_anchor() {\n    translate([0, -body_length/2 - 15, 0])\n        cube([bridge_width, bridge_thickness, bridge_height], center=true);\n}\n\n// Cross bar for string separation\nmodule crossbar() {\n    translate([0, -body_length/2 + 10, body_thickness/2])\n        cube([crossbar_width, crossbar_thickness, crossbar_height], center=true);\n}\n\n// Strings module\nmodule strings() {\n    spacing = yoke_length / (string_count + 1);\n    for(i=[1:string_count]) {\n        // Calculate positions\n        yoke_pos = -yoke_length/2 + i * spacing;\n        anchor_pos = -body_length/2 - 15;\n        \n        // String\n        translate([yoke_pos, arm_length - 5, 0])\n            rotate([90, 0, 0])\n                cylinder(h=string_length, d=string_diameter, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    body();\n    \n    // Arms\n    arm();\n    \n    // Yoke\n    yoke();\n    \n    // String anchor\n    string_anchor();\n    \n    // Cross bar\n    crossbar();\n    \n    // Strings\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "bandura",
    "openscad_code": "// Bandura - Medium Complexity Realistic Style\n// Ukrainian folk instrument for 3D printing\n\n// Overall dimensions\nbody_length = 80;\nbody_width = 35;\nbody_thickness = 12;\nneck_length = 60;\npegbox_width = 15;\n\n// String parameters\nstring_count = 12;\nstring_diameter = 0.6;\nstring_spacing = 4;\n\n// Main body module\nmodule bandura_body() {\n    // Main resonator body - pear shape\n    union() {\n        // Lower bulb\n        translate([0, 0, body_thickness/2]) \n            scale([1.2, 1, 1]) \n                sphere(d=body_width);\n                \n        // Upper body extension\n        translate([0, 0, body_thickness/2]) \n            cylinder(h=body_length/2, d1=body_width*0.9, d2=body_width*1.3);\n            \n        // Soundboard\n        translate([0, 0, body_thickness-1]) \n            difference() {\n                scale([1.1, 1.05, 1]) \n                    sphere(d=body_width);\n                translate([0, 0, -1]) \n                    cube([body_width*1.5, body_width*1.5, 3], center=true);\n            }\n    }\n}\n\n// Sound hole module\nmodule sound_holes() {\n    // Multiple small holes in decorative pattern\n    for(i=[-2:2]) {\n        for(j=[-1:1]) {\n            translate([i*6, j*6, body_thickness-0.5]) \n                cylinder(h=2, d=3);\n        }\n    }\n    // Central rosette\n    translate([0, 0, body_thickness-0.5]) \n        cylinder(h=2, d=8);\n}\n\n// Bridge module\nmodule bridge() {\n    translate([body_length/4, 0, body_thickness]) {\n        union() {\n            // Main bridge\n            cube([body_width/4, 2, 3], center=true);\n            // Feet\n            translate([-body_width/6, 0, -1]) \n                cube([2, 2, 1], center=true);\n            translate([body_width/6, 0, -1]) \n                cube([2, 2, 1], center=true);\n        }\n    }\n}\n\n// Neck module\nmodule neck() {\n    translate([body_length/2, 0, body_thickness/2]) {\n        rotate([0, 90, 0]) {\n            // Tapered neck\n            cylinder(h=neck_length, d1=10, d2=8);\n        }\n    }\n}\n\n// Pegbox module\nmodule pegbox() {\n    translate([body_length/2+neck_length, 0, body_thickness/2]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                // Main pegbox\n                cube([15, pegbox_width, 8], center=true);\n                // Tuning peg holes\n                for(i=[-string_count/2:string_count/2-1]) {\n                    translate([0, i*string_spacing, 0]) \n                        rotate([0, 90, 0]) \n                            cylinder(h=20, d=2);\n                }\n            }\n        }\n    }\n}\n\n// Tuning pegs module\nmodule tuning_pegs() {\n    for(i=[-string_count/2:string_count/2-1]) {\n        translate([body_length/2+neck_length, i*string_spacing, body_thickness/2]) {\n            rotate([0, 90, 0]) {\n                // Peg shaft\n                cylinder(h=10, d=2);\n                // Peg head\n                translate([0, 0, 10]) \n                    sphere(d=4);\n            }\n        }\n    }\n}\n\n// Strings module\nmodule strings() {\n    // Bass strings (left side)\n    for(i=[0:5]) {\n        translate([body_length/2-5-i*3, -string_spacing*2, body_thickness+2]) {\n            rotate([0, 90, 0]) \n                cylinder(h=neck_length+15, d=string_diameter);\n        }\n    }\n    // Melody strings (right side)\n    for(i=[0:5]) {\n        translate([body_length/2-5-i*3, string_spacing*2, body_thickness+2]) {\n            rotate([0, 90, 0]) \n                cylinder(h=neck_length+15, d=string_diameter);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    difference() {\n        bandura_body();\n        sound_holes();\n    }\n    bridge();\n    neck();\n    pegbox();\n    tuning_pegs();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "kobza",
    "openscad_code": "// Kobza - Ukrainian lute-like instrument\n// Medium complexity, 3D printable\n\n$fn = 32;\n\n// Overall dimensions\nbody_length = 75;\nbody_width = 40;\nbody_depth = 15;\nneck_length = 60;\nneck_width = 8;\nhead_length = 20;\nhead_width = 12;\n\nmodule kobza_body() {\n    // Main body - pear shape achieved by hulling\n    difference() {\n        hull() {\n            // Top bulge\n            translate([0, 0, body_depth/2])\n                scale([1, 0.8, 1])\n                sphere(d = body_width);\n            // Bottom taper\n            translate([0, -body_length/3, 0])\n                scale([0.7, 1.2, 1])\n                cylinder(h = body_depth, d = body_width * 0.8);\n        }\n        \n        // Sound hole\n        translate([0, -body_length/4, body_depth/2])\n            cylinder(h = body_depth + 2, d = 12);\n            \n        // Bridge recess\n        translate([0, body_length/4, body_depth - 2])\n            cube([25, 8, 4], center = true);\n    }\n}\n\nmodule neck() {\n    // Neck with fret positions\n    union() {\n        // Main neck\n        translate([0, body_length/2 + neck_length/2, body_depth/2])\n            cube([neck_width, neck_length, 5], center = true);\n            \n        // Fret positions (12 frets)\n        for(i = [1:12]) {\n            translate([0, body_length/2 + i * (neck_length/13), body_depth/2 + 2.5])\n                cube([neck_width + 1, 1, 0.5], center = true);\n        }\n    }\n}\n\nmodule headstock() {\n    // Head with tuning pegs\n    translate([0, body_length/2 + neck_length + head_length/2, body_depth/2 + 2])\n        difference() {\n            cube([head_width, head_length, 8], center = true);\n            \n            // Tuning peg holes (4 pegs)\n            for(i = [0:3]) {\n                translate([-head_width/4 + i * head_width/3, head_length/4, 4])\n                    rotate([90, 0, 0])\n                        cylinder(h = 10, d = 2);\n                translate([-head_width/4 + i * head_width/3, -head_length/4, 4])\n                    rotate([90, 0, 0])\n                        cylinder(h = 10, d = 2);\n            }\n        }\n}\n\nmodule bridge() {\n    // Bridge for strings\n    translate([0, body_length/4, body_depth - 1])\n        cube([20, 3, 2], center = true);\n}\n\nmodule strings() {\n    // 4 strings\n    for(i = [0:3]) {\n        translate([-neck_width/2 + 2 + i * 1.5, body_length/4, body_depth/2])\n            cylinder(h = neck_length + head_length + body_length/4, d = 0.5);\n    }\n}\n\n// Assembly\nunion() {\n    kobza_body();\n    neck();\n    headstock();\n    bridge();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "bandurria",
    "openscad_code": "// Bandurria - medium complexity realistic model\n// Overall dimensions: ~90mm long, 28mm wide, 8mm thick\n\n// Body thickness\nbody_t = 3;\n\n// Main body shape\nmodule body() {\n    difference() {\n        // Main body\n        hull() {\n            translate([-30, -12, 0])\n                cylinder(h=body_t, d1=25, d2=20, $fn=40);\n            translate([30, -10, 0])\n                cylinder(h=body_t, d1=22, d2=18, $fn=40);\n            translate([28, 10, 0])\n                cylinder(h=body_t, d1=18, d2=22, $fn=40);\n            translate([-28, 12, 0])\n                cylinder(h=body_t, d1=20, d2=25, $fn=40);\n        }\n        \n        // Sound hole\n        translate([10, 0, -0.1])\n            cylinder(h=body_t+0.2, d=8, $fn=32);\n    }\n}\n\n// Neck and headstock\nmodule neck() {\n    // Neck\n    translate([-35, -2.5, body_t])\n        cube([40, 5, 4]);\n    \n    // Headstock\n    translate([-48, -6, body_t])\n        cube([15, 12, 3]);\n}\n\n// Frets\nmodule frets() {\n    for (i = [1:12]) {\n        translate([-30 + i*2.5, -2.4, body_t+4])\n            cube([0.5, 5, 0.8]);\n    }\n}\n\n// Strings\nmodule strings() {\n    for (i = [0:5]) {\n        translate([-45, -2 + i*0.8, body_t+3.5])\n            cylinder(h=75, d=0.5, $fn=8);\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([15, 0, body_t])\n        cube([8, 10, 1.5]);\n}\n\n// Tuning pegs\nmodule tuning_pegs() {\n    for (i = [0:5]) {\n        translate([-45, -4 + i*1.6, body_t+3])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=1.5, $fn=12);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    frets();\n    strings();\n    bridge();\n    tuning_pegs();\n}",
    "renders": true
  },
  {
    "musical_instrument": "laud",
    "openscad_code": "// Laud (lute) - realistic medium complexity\n// 3D printable model with no overhangs\n\n// Overall dimensions\nbody_length = 60;\nbody_width = 45;\nneck_length = 40;\nneck_width = 8;\npegbox_length = 20;\npegbox_width = 12;\nstring_count = 8;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main body - pear-shaped bowl\nmodule laud_body() {\n    // Outer shell\n    hull() {\n        // Upper bout\n        translate([0, 0, 0])\n            scale([1, 0.8, 1])\n            sphere(d=body_width, $fn=50);\n        \n        // Lower bout\n        translate([0, body_length*0.6, -body_width*0.1])\n            scale([1.2, 1.4, 1])\n            sphere(d=body_width*1.3, $fn=50);\n    }\n    \n    // Hollow interior\n    difference() {\n        children();\n        \n        // Inner cavity\n        scale([0.8, 0.8, 0.8])\n        translate([0, -5, 5])\n        hull() {\n            translate([0, 0, 0])\n                scale([1, 0.8, 1])\n                sphere(d=body_width-wall*2, $fn=50);\n            translate([0, body_length*0.6, -body_width*0.1])\n                scale([1.2, 1.4, 1])\n                sphere(d=body_width*1.3-wall*2, $fn=50);\n        }\n    }\n    \n    // Sound hole\n    difference() {\n        children();\n        translate([0, body_length*0.3, -2])\n            cylinder(h=10, d=body_width*0.3, $fn=50);\n    }\n}\n\n// Neck with frets\nmodule neck() {\n    // Main neck piece\n    translate([0, body_length, 0])\n        rotate([0, 0, 0])\n        difference() {\n            // Tapered neck shape\n            hull() {\n                translate([0, -neck_length, 0])\n                    cube([neck_width, neck_length*1.5, neck_width/2], center=true);\n                translate([0, 0, 0])\n                    cube([neck_width*0.8, neck_length, neck_width/2], center=true);\n            }\n            \n            // Fingerboard recess\n            translate([0, -neck_length/2, neck_width/4])\n                cube([neck_width-wall*2, neck_length, neck_width/2], center=true);\n        }\n    \n    // Frets\n    for(i = [1:12]) {\n        translate([0, body_length - i*neck_length/13, neck_width/4+0.1])\n            cube([neck_width-wall*2, 1, 0.5], center=true);\n    }\n}\n\n// Pegbox with tuning pegs\nmodule pegbox() {\n    translate([0, body_length+neck_length-5, 0])\n    rotate([0, 0, 0])\n    union() {\n        // Main pegbox\n        difference() {\n            hull() {\n                translate([0, 0, 0])\n                    cube([pegbox_width, pegbox_length, pegbox_width*0.8], center=true);\n                translate([0, -pegbox_length*0.3, pegbox_width*0.3])\n                    cube([pegbox_width*0.8, pegbox_length*0.4, pegbox_width*0.4], center=true);\n            }\n            \n            // Peg holes\n            for(side = [-1, 1]) {\n                for(i = [0:3]) {\n                    translate([side*pegbox_width/4, -i*pegbox_length/4, 0])\n                        rotate([0, 90, 0])\n                        cylinder(h=pegbox_width, d=2, $fn=12);\n                }\n            }\n        }\n        \n        // Tuning pegs\n        for(side = [-1, 1]) {\n            for(i = [0:3]) {\n                translate([side*pegbox_width/4, -i*pegbox_length/4, side*pegbox_width/2])\n                    rotate([0, 90, 0])\n                    union() {\n                        cylinder(h=8, d=2, $fn=12);\n                        translate([0, 0, 4])\n                            sphere(d=4, $fn=12);\n                    }\n            }\n        }\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([0, body_length*0.7, body_width*0.2])\n        difference() {\n            // Bridge shape\n            cube([neck_width*2, 4, 2], center=true);\n            \n            // String notches\n            for(i = [1:string_count-1]) {\n                translate([(i-string_count/2)*neck_width*2/string_count, 0, 1])\n                    cube([0.5, 6, 2], center=true);\n            }\n        }\n}\n\n// Strings\nmodule strings() {\n    for(i = [1:string_count]) {\n        translate([(i-string_count/2-0.5)*neck_width/string_count, body_length*0.7, body_width*0.2+2])\n            color(\"goldenrod\")\n            cylinder(h=body_length+neck_length+pegbox_length-5, d=0.5, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    difference() {\n        laud_body();\n        scale([0.8, 0.8, 0.8])\n        translate([0, -5, 5])\n        hull() {\n            translate([0, 0, 0])\n                scale([1, 0.8, 1])\n                sphere(d=body_width-wall*2, $fn=50);\n            translate([0, body_length*0.6, -body_width*0.1])\n                scale([1.2, 1.4, 1])\n                sphere(d=body_width*1.3-wall*2, $fn=50);\n        }\n    }\n    \n    neck();\n    pegbox();\n    bridge();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "timple",
    "openscad_code": "// Timple - traditional Canarian ukulele-like instrument\n// Medium-complexity realistic model using only basic OpenSCAD primitives\n\n$fn = 32;\n\n// Overall dimensions (mm)\nbody_len = 70;\nbody_w   = 45;\nbody_h   = 25;\nneck_len = 80;\nneck_w   = 12;\nneck_h   = 10;\nhead_len = 25;\nhead_w   = 15;\nhead_h   = 8;\n\nmodule timple() {\n    union() {\n\n        // Body shell\n        difference() {\n            // Outer rounded box\n            hull() {\n                translate([-body_len/2, -body_w/2, 0])\n                    scale([1, 0.7, 0.5])\n                        sphere(d = body_h);\n\n                translate([body_len/2, -body_w/2, 0])\n                    scale([1, 0.7, 0.5])\n                        sphere(d = body_h);\n\n                translate([-body_len/2, body_w/2, 0])\n                    scale([1, 0.7, 0.5])\n                        sphere(d = body_h);\n\n                translate([body_len/2, body_w/2, 0])\n                    scale([1, 0.7, 0.5])\n                        sphere(d = body_h);\n            }\n\n            // Hollow inside\n            translate([0, 0, -1])\n                scale([0.9, 0.9, 0.9])\n                hull() {\n                    translate([-body_len/2, -body_w/2, 2])\n                        sphere(d = body_h - 2);\n\n                    translate([body_len/2, -body_w/2, 2])\n                        sphere(d = body_h - 2);\n\n                    translate([-body_len/2, body_w/2, 2])\n                        sphere(d = body_h - 2);\n\n                    translate([body_len/2, body_w/2, 2])\n                        sphere(d = body_h - 2);\n                }\n\n            // Sound hole\n            translate([body_len/4, 0, body_h/2])\n                cylinder(h = body_h + 2, d = 12, center = true);\n        }\n\n        // Top plate\n        translate([0, 0, body_h/2 - 0.5])\n            scale([1.01, 1.01, 1])\n            hull() {\n                translate([-body_len/2, -body_w/2, 0])\n                    scale([1, 0.7, 0.1])\n                        sphere(d = body_h);\n\n                translate([body_len/2, -body_w/2, 0])\n                    scale([1, 0.7, 0.1])\n                        sphere(d = body_h);\n\n                translate([-body_len/2, body_w/2, 0])\n                    scale([1, 0.7, 0.1])\n                        sphere(d = body_h);\n\n                translate([body_len/2, body_w/2, 0])\n                    scale([1, 0.7, 0.1])\n                        sphere(d = body_h);\n            }\n\n        // Neck\n        translate([body_len/2 - 2, 0, body_h/2 + neck_h/2 - 3])\n            cube([neck_len, neck_w, neck_h], center = true);\n\n        // Headstock\n        translate([body_len/2 + neck_len - 2, 0, body_h/2 + neck_h + head_h/2 - 3])\n            cube([head_len, head_w, head_h], center = true);\n\n        // Frets\n        for (i = [1:4]) {\n            translate([body_len/2 + i * 15 - 5, 0, body_h/2 + neck_h - 2.5])\n                cube([1, neck_w + 2, 1], center = true);\n        }\n\n        // Tuning pegs (4 strings -> 4 pegs)\n        peg_pos = [\n            [body_len/2 + neck_len + 5, -head_w/2 + 2, body_h/2 + neck_h + head_h/2],\n            [body_len/2 + neck_len + 5,  head_w/2 - 2, body_h/2 + neck_h + head_h/2],\n            [body_len/2 + neck_len + 5, -head_w/2 + 2, body_h/2 + neck_h + head_h/2 - 4],\n            [body_len/2 + neck_len + 5,  head_w/2 - 2, body_h/2 + neck_h + head_h/2 - 4]\n        ];\n\n        for (p = peg_pos) {\n            translate(p)\n                rotate([90, 0, 0])\n                    cylinder(h = 8, d = 2.5);\n            translate([p[0] + 4, p[1], p[2]])\n                sphere(d = 4);\n        }\n\n        // Bridge\n        translate([-body_len/4, 0, body_h/2 + 0.5])\n            cube([8, 12, 2]);\n\n        // String anchor pins\n        pin_pos = [\n            [-body_len/4 - 2, -body_w/4, body_h/2 + 2.5],\n            [-body_len/4 - 2, -body_w/12, body_h/2 + 2.5],\n            [-body_len/4 - 2,  body_w/12, body_h/2 + 2.5],\n            [-body_len/4 - 2,  body_w/4, body_h/2 + 2.5]\n        ];\n\n        for (pin = pin_pos) {\n            translate(pin)\n                cylinder(h = 2, d1 = 3, d2 = 2);\n        }\n\n        // Nut\n        translate([body_len/2 + 2, 0, body_h/2 + neck_h - 1])\n            cube([1, neck_w, 2], center = true);\n    }\n}\n\ntimple();",
    "renders": true
  },
  {
    "musical_instrument": "charango",
    "openscad_code": "// Charango for 3D printing – medium complexity, realistic style  \n// Overall length ≈ 95 mm, suitable for FDM printing  \n// Wall thickness 1.2 mm for reliable printing  \n\n$fn = 32;          // Smooth curves  \nwall = 1.2;        // Standard nozzle-friendly wall  \n\nmodule body_shell() {  \n    // Main resonating chamber – armadillo-shell-like shape built from stacked ellipsoids  \n    hull() {  \n        scale([1, 0.75, 0.6]) sphere(d = 52);  \n        translate([0, 0, 12]) scale([0.9, 0.65, 0.5]) sphere(d = 50);  \n    }  \n}  \n\nmodule sound_hole() {  \n    // Traditional 1:2 ellipse sound hole, sunk 1 mm into body  \n    translate([0, -10, 1])  \n        linear_extrude(height = 2)  \n        scale([1, 2]) circle(d = 18);  \n}  \n\nmodule neck() {  \n    // Neck with slightly tapered rectangular profile  \n    for (i = [0:9])  \n        translate([0, 0, i*2])  \n            scale([1 - i*0.03, 1 - i*0.04, 1])  \n                cube([8, 12, 2], center = true);  \n}  \n\nmodule headstock() {  \n    // Angled headstock with 5 classical friction pegs per side  \n    rotate([10, 0, 0])  \n        translate([0, 0, 16])  \n            difference() {  \n                cube([18, 8, 24], center = true);  \n                // String slots  \n                for (y = [-6:3:6])  \n                    translate([0, y, 10])  \n                        rotate([90, 0, 0])  \n                            cylinder(h = 20, d = 1.5, $fn = 8);  \n            }  \n}  \n\nmodule pegs() {  \n    // Friction pegs – simple cylinders with top knob  \n    for (side = [-1, 1])  \n        for (i = [0:4]) {  \n            y = side * (4 + i*3.5);  \n            translate([9*side, y, 16])  \n                rotate([0, 90*side, 0])  \n                    union() {  \n                        cylinder(h = 10, d = 2.4);  \n                        translate([0, 0, 10]) sphere(d = 4);  \n                    }  \n        }  \n}  \n\nmodule bridge() {  \n    // Floating bridge glued on top plate  \n    translate([0, 22, 2])  \n        union() {  \n            cube([18, 6, 2], center = true);  \n            for (x = [-6:3:6])  \n                translate([x, 0, 2])  \n                    cylinder(h = 1.5, d = 1);  \n        }  \n}  \n\nmodule strings() {  \n    // Ten nylon strings modeled as thin cylinders  \n    // Print-in-place friendly – no horizontal spans  \n    for (side = [-1, 1])  \n        for (i = [0:4]) {  \n            y = side * (3 + i*1.8);  \n            hull() {  \n                translate([9*side, y, 16]) sphere(d = 0.6);  \n                translate([0, y + side*2, 2]) sphere(d = 0.6);  \n            }  \n        }  \n}  \n\n// Final assembly  \ndifference() {  \n    body_shell();  \n    sound_hole();  \n}  \n\ntranslate([0, 0, 30]) neck();  \ntranslate([0, 0, 48]) headstock();  \ntranslate([0, 0, 48]) pegs();  \nbridge();  \nstrings();",
    "renders": true
  },
  {
    "musical_instrument": "ronroco",
    "openscad_code": "// Ronroco - Medium complexity realistic style\n// 1:2 scale model for 3D printing (~90 mm body length)\n\n// Body dimensions\nbody_len = 90;\nbody_wid = 35;\nbody_dep = 12;\nwall_thk = 1.5;\n\nmodule body_shell() {\n    difference() {\n        // Main body\n        hull() {\n            translate([0,0,body_dep/2])\n                cube([body_len*0.8,body_wid*0.7,body_dep], center=true);\n            translate([body_len*0.3,0,body_dep/2])\n                cube([body_len*0.6,body_wid,body_dep], center=true);\n        }\n        // Hollow cavity\n        translate([0,0,body_dep/2])\n            cube([body_len*0.8-wall_thk*2, body_wid*0.7-wall_thk*2, body_dep-wall_thk*2], center=true);\n        translate([body_len*0.3,0,body_dep/2])\n            cube([body_len*0.6-wall_thk*2, body_wid-wall_thk*2, body_dep-wall_thk*2], center=true);\n        // Sound hole\n        translate([-body_len*0.1,0,body_dep-wall_thk])\n            cylinder(h=wall_thk+0.2, r=4, center=false);\n    }\n}\n\nmodule neck() {\n    // Neck shaft\n    translate([-body_len/2-20,0,body_dep/2])\n        cube([40,6,6], center=true);\n    \n    // Headstock\n    translate([-body_len/2-38,0,body_dep/2+3])\n        cube([12,8,2], center=true);\n    \n    // Frets\n    for(i=[1:8]) {\n        translate([-body_len/2-5-i*4,0,body_dep/2+3.1])\n            cube([0.5,6.2,0.3], center=true);\n    }\n}\n\nmodule bridge() {\n    // Bridge base\n    translate([body_len*0.3,0,body_dep-wall_thk-1])\n        cube([8,3,2], center=true);\n    \n    // Saddle\n    translate([body_len*0.3,0,body_dep-wall_thk+1])\n        cube([7,0.5,0.5], center=true);\n}\n\nmodule strings() {\n    for(i=[-2:2]) {\n        color(\"silver\")\n        hull() {\n            translate([-body_len/2-38, i*1.2, body_dep/2+4])\n                sphere(0.2);\n            translate([body_len*0.3, i*1.2, body_dep-wall_thk+1.5])\n                cylinder(h=0.2, r=0.2, center=false);\n        }\n    }\n}\n\nmodule tuning_pegs() {\n    // Left side pegs\n    for(i=[0:1]) {\n        translate([-body_len/2-42, 3+i*4, body_dep/2+3])\n            rotate([90,0,0])\n            cylinder(h=6, r=1.5, center=false);\n    }\n    \n    // Right side pegs\n    for(i=[0:1]) {\n        translate([-body_len/2-42, -3-i*4, body_dep/2+3])\n            rotate([90,0,0])\n            cylinder(h=6, r=1.5, center=false);\n    }\n}\n\n// Assembly\nbody_shell();\nneck();\nbridge();\ntuning_pegs();\nstrings();",
    "renders": true
  },
  {
    "musical_instrument": "chapare",
    "openscad_code": "// Chapare (Bolivian palm) 3D printable model\n// Realistic style, medium complexity\n\n// Parameters for printing\n$fn = 36;\nwall_thickness = 1.5;\nscale_factor = 0.4;  // Adjusts overall size (50-100mm range)\n\n// Main trunk module\nmodule trunk() {\n    // Base trunk segment\n    union() {\n        // Lower trunk - wider base\n        cylinder(h=60*scale_factor, r1=10*scale_factor, r2=8*scale_factor, center=false);\n        \n        // Upper trunk - tapering\n        translate([0,0,60*scale_factor])\n            cylinder(h=50*scale_factor, r1=8*scale_factor, r2=4*scale_factor, center=false);\n    }\n}\n\n// Leaf module - single frond\nmodule leaf_frond(length, angle) {\n    // Stem of frond\n    translate([0,0,0])\n        rotate([90,0,0])\n            cylinder(h=length, r=wall_thickness*0.8, center=false);\n    \n    // Leaflets along stem\n    for(i = [1:3:length-5]) {\n        translate([0,0,i])\n            rotate([0,angle,0]) {\n                // Left leaflet\n                translate([0,-2,0])\n                    rotate([0,-20,0])\n                        scale([1,0.2,0.05])\n                            sphere(r=length*0.3);\n                \n                // Right leaflet\n                translate([0,2,0])\n                    rotate([0,20,0])\n                        scale([1,0.2,0.05])\n                            sphere(r=length*0.3);\n            }\n    }\n}\n\n// Crown of leaves module\nmodule leaf_crown() {\n    // Base structure for leaves\n    translate([0,0,110*scale_factor])\n        rotate([0,0,0]) {\n            // Generate 8 fronds in circle\n            for(i = [0:45:315]) {\n                rotate([0,0,i]) {\n                    // Frond stem with natural droop\n                    rotate([30,0,0])\n                        leaf_frond(35*scale_factor, 15);\n                }\n            }\n            \n            // Inner fronds - shorter\n            for(i = [22.5:45:337.5]) {\n                rotate([0,0,i]) {\n                    rotate([20,0,0])\n                        leaf_frond(25*scale_factor, 10);\n                }\n            }\n        }\n}\n\n// Root system base\nmodule root_base() {\n    difference() {\n        // Main root bulb\n        sphere(r=12*scale_factor);\n        \n        // Hollow for printing\n        translate([0,0,-5*scale_factor])\n            sphere(r=10*scale_factor);\n        \n        // Flatten bottom for stability\n        translate([0,0,-12*scale_factor])\n            cube([30*scale_factor,30*scale_factor,12*scale_factor], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Root system\n    translate([0,0,-12*scale_factor])\n        root_base();\n    \n    // Trunk\n    trunk();\n    \n    // Leaf crown\n    leaf_crown();\n}",
    "renders": true
  },
  {
    "musical_instrument": "walaycho",
    "openscad_code": "// Walaycho (Charango-style Andean lute) – 3D printable, medium realism\n// Overall length ~95 mm, width ~30 mm, thickness ~12 mm\n\n$fn=30;          // Smooth curves for printing\nbody_len = 70;\nbody_w   = 30;\nbody_h   = 12;\nneck_len = 25;\nneck_w   = 7;\nneck_h   = 5;\npegbox_h = 8;\npegbox_w = 10;\npegbox_d = 3;\npeg_d    = 2.5;\npeg_len  = 6;\nsoundhole_d = 6;\nbridge_w = 6;\nbridge_h = 1.5;\nbridge_l = 2;\nstring_d = 0.8;\nnum_strings = 5;\n\nmodule body() {\n    // Main resonator – flat-backed charango style\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-body_len/2, 0, 0])\n                scale([1, 0.5, 0.4])\n                    sphere(d=body_w);\n            translate([body_len/2-5, 0, 0])\n                scale([1, 0.6, 0.5])\n                    sphere(d=body_w);\n        }\n        // Flat back\n        translate([0, 0, -body_h/2-0.1])\n            cube([body_len+2, body_w+2, body_h], center=true);\n        // Sound hole\n        translate([body_len/4, 0, body_h/2-0.5])\n            cylinder(d=soundhole_d, h=body_h+1, center=true);\n    }\n}\n\nmodule neck() {\n    // Neck with fingerboard\n    union() {\n        // Neck beam\n        translate([body_len/2+neck_len/2, 0, (body_h+neck_h)/2-body_h/2])\n            cube([neck_len, neck_w, neck_h], center=true);\n        // Fingerboard on top\n        translate([body_len/2+neck_len/2, 0, (body_h+neck_h)/2-body_h/2+neck_h/2+0.5])\n            cube([neck_len+1, neck_w-1, 1], center=true);\n    }\n}\n\nmodule pegbox() {\n    // Angular pegbox\n    translate([body_len/2+neck_len+pegbox_d/2, 0, (body_h+neck_h)/2-body_h/2+neck_h/2+pegbox_h/2])\n        rotate([0, -15, 0])\n            cube([pegbox_d, pegbox_w, pegbox_h], center=true);\n}\n\nmodule pegs() {\n    // 5 tuning pegs (3 left, 2 right for realism)\n    for(i=[0:4]) {\n        side = (i<3) ? -1 : 1;\n        y = (i<3) ? (i-1)*3 : (i-3.5)*3;\n        translate([body_len/2+neck_len+pegbox_d, y*side, (body_h+neck_h)/2-body_h/2+neck_h/2+pegbox_h/2-2])\n            rotate([90,0,90])\n                cylinder(d=peg_d, h=peg_len);\n    }\n}\n\nmodule bridge() {\n    // Small raised bridge glued on top\n    translate([-body_len/3, 0, body_h/2])\n        cube([bridge_l, bridge_w, bridge_h], center=true);\n}\n\nmodule strings() {\n    // 5 nylon strings\n    for(i=[0:num_strings-1]) {\n        y = (i-(num_strings-1)/2)*2;\n        color(\"ivory\")\n        hull() {\n            // Nut end\n            translate([body_len/2+neck_len, y, (body_h+neck_h)/2-body_h/2+neck_h/2+0.5+0.5])\n                sphere(d=string_d);\n            // Bridge end\n            translate([-body_len/3, y, body_h/2+bridge_h])\n                sphere(d=string_d);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    pegbox();\n    pegs();\n    bridge();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "requinto",
    "openscad_code": "// Requinto Guitar - Medium Complexity Realistic Style\n// Total length ~90mm, suitable for 3D printing\n\n$fn = 32;  // Smooth curves for printing\n\n// Main body module\nmodule body() {\n    difference() {\n        // Main body shape - scaled guitar outline\n        scale([1, 0.7, 0.3])\n        rotate([0, 90, 0])\n        cylinder(h=60, r1=15, r2=20, center=true);\n        \n        // Sound hole\n        translate([0, 0, 1])\n        scale([1, 1, 0.5])\n        cylinder(h=5, r=6, center=true);\n        \n        // Hollow cavity\n        translate([0, 0, -2])\n        scale([0.9, 0.6, 0.8])\n        rotate([0, 90, 0])\n        cylinder(h=58, r1=14, r2=19, center=true);\n    }\n}\n\n// Neck module\nmodule neck() {\n    // Neck base\n    translate([-35, 0, 3])\n    rotate([0, -5, 0])\n    scale([1, 0.8, 1])\n    cube([40, 5, 3], center=true);\n    \n    // Headstock\n    translate([-55, 0, 4])\n    scale([1.2, 0.6, 0.3])\n    cube([15, 7, 2], center=true);\n}\n\n// Bridge module\nmodule bridge() {\n    translate([15, 0, 2])\n    cube([8, 12, 0.5], center=true);\n}\n\n// Frets\nmodule frets() {\n    for(i = [1:18]) {\n        translate([-30 + i*1.5, 0, 4.5])\n        rotate([0, 90, 0])\n        scale([1, 0.2, 0.2])\n        cylinder(h=5, r=0.5, center=true);\n    }\n}\n\n// Tuning pegs\nmodule tuning_pegs() {\n    // 6 tuning pegs on headstock\n    for(i = [0:2]) {\n        // Left side\n        translate([-62, -3 + i*2, 4])\n        rotate([90, 0, 0])\n        cylinder(h=2, r=0.5);\n        \n        // Right side\n        translate([-62, 3 - i*2, 4])\n        rotate([90, 0, 0])\n        cylinder(h=2, r=0.5);\n    }\n}\n\n// Strings\nmodule strings() {\n    for(i = [0:5]) {\n        // Main strings\n        translate([-54 + i*0.8, -2 + i*0.8, 4.8])\n        rotate([0, 90, 5])\n        scale([0.05, 0.05, 90])\n        cube([1, 1, 1], center=true);\n    }\n}\n\n// Rosette decoration around sound hole\nmodule rosette() {\n    difference() {\n        cylinder(h=0.5, r=7.5, center=true);\n        cylinder(h=0.6, r=6.5, center=true);\n    }\n}\n\n// Assemble the requinto\nunion() {\n    // Main components\n    body();\n    neck();\n    bridge();\n    \n    // Details\n    translate([0, 0, 2.5])\n    rosette();\n    \n    frets();\n    tuning_pegs();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "cuatro",
    "openscad_code": "// Cuatro (Puerto-Rican 4-string) – 3-D printable, medium realism\n// Overall length ≈ 90 mm, max width ≈ 30 mm\n\nbody_len = 60;\nbody_w   = 30;\nbody_t   = 7;\n\nneck_len = 35;\nneck_w   =  9;\nneck_t   =  5;\n\nhead_len = 12;\nhead_w   = 12;\nhead_t   =  6;\n\nhole_r   =  6;\nhole_d   =  2;\n\nbridge_h =  2;\nbridge_w = 10;\nbridge_pos = 5;  // from bottom\n\npeg_h    =  3;\npeg_r    =  1.5;\npeg_sep  =  4;\n\nstring_d = 0.6;\nstring_len = body_len - bridge_pos + neck_len + head_len - 3;\n\n// Print-friendly wall thickness\nwall = 1.2;\n\nmodule body_shell() {\n    difference() {\n        // Main body\n        hull() {\n            translate([-body_len/2, 0, 0])\n                sphere(d = body_w);\n            translate([ body_len/2, 0, 0])\n                sphere(d = body_w * 0.8);\n        }\n\n        // Hollow inside\n        translate([0, 0, -wall])\n            scale([0.75, 0.75, 1])\n                hull() {\n                    translate([-body_len/2, 0, 0])\n                        sphere(d = body_w - wall*2);\n                    translate([ body_len/2, 0, 0])\n                        sphere(d = body_w*0.8 - wall*2);\n                }\n\n        // Sound hole\n        translate([0, 0, body_t/2 - hole_d/2])\n            cylinder(r = hole_r, h = hole_d + 0.2, $fn = 32);\n    }\n}\n\nmodule neck() {\n    difference() {\n        // Tapered neck\n        hull() {\n            translate([body_len/2, 0, body_t/2])\n                cube([neck_len, neck_w, neck_t], center = true);\n            translate([body_len/2 + neck_len, 0, body_t/2])\n                cube([neck_len, neck_w*0.9, neck_t*0.9], center = true);\n        }\n\n        // Truss rod slot (optional, hidden)\n        translate([body_len/2 + neck_len/2, 0, body_t/2+neck_t/2-wall])\n            cube([neck_len, 2, wall], center = true);\n    }\n}\n\nmodule headstock() {\n    difference() {\n        // Head plate\n        translate([body_len/2 + neck_len, 0, body_t/2 + neck_t/2 + head_t/2])\n            cube([head_len, head_w, head_t], center = true);\n\n        // Peg holes\n        for (i = [-1, 1]) {\n            translate([body_len/2 + neck_len + head_len*0.4,\n                       i * peg_sep/2,\n                       body_t/2 + neck_t/2 + head_t])\n                rotate([90, 0, 0])\n                    cylinder(r = peg_r, h = head_t + 1, $fn = 12);\n        }\n    }\n}\n\nmodule bridge() {\n    color(\"brown\")\n    translate([0, 0, body_t/2 + bridge_h/2])\n        cube([bridge_w, 4, bridge_h], center = true);\n}\n\nmodule pegs() {\n    for (i = [-1, 1]) {\n        translate([body_len/2 + neck_len + head_len*0.4,\n                   i * peg_sep/2,\n                   body_t/2 + neck_t/2 + head_t])\n            rotate([90, 0, 0])\n                cylinder(r = peg_r, h = peg_h, $fn = 12);\n    }\n}\n\nmodule strings() {\n    for (i = [-1.5, -0.5, 0.5, 1.5]) {\n        color(\"gray\")\n        hull() {\n            // Bridge anchor\n            translate([0, i * 2, body_t/2 + bridge_h + string_d/2])\n                sphere(d = string_d, $fn = 8);\n            // Nut anchor\n            translate([body_len/2 + neck_len + head_len - 3,\n                       i * 2,\n                       body_t/2 + neck_t/2 + head_t - string_d/2])\n                sphere(d = string_d, $fn = 8);\n        }\n    }\n}\n\n// Assemble\nunion() {\n    body_shell();\n    neck();\n    headstock();\n    bridge();\n    pegs();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "tres",
    "openscad_code": "// Tree - Realistic style, medium complexity\n// 3D printable tree with trunk and foliage layers\n\n$fn = 36; // Smooth curves\n\n// Main parameters\ntrunk_height = 35;\ntrunk_diameter = 8;\nbase_height = 3;\nbase_diameter = 12;\nfoliage_layers = 4;\nlayer_height = 10;\nlayer_diameter_start = 20;\nlayer_diameter_step = -3;\nbranch_count = 5;\n\n// Trunk module\nmodule trunk() {\n    // Base flare\n    cylinder(h=base_height, d1=base_diameter*1.5, d2=base_diameter, center=false);\n    \n    translate([0, 0, base_height]) {\n        // Main trunk\n        cylinder(h=trunk_height, d=trunk_diameter, center=false);\n        \n        // Root details\n        for(i=[0:120:359]) {\n            rotate([0, 0, i]) {\n                translate([trunk_diameter/2-1, 0, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=base_height*2, d1=2, d2=1, center=false);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Branch module\nmodule branch(length, angle, rotation) {\n    translate([0, 0, trunk_height-5]) {\n        rotate([0, angle, rotation]) {\n            cylinder(h=length, d1=trunk_diameter/3, d2=trunk_diameter/6, center=false);\n            \n            // Sub branches\n            translate([0, 0, length*0.7]) {\n                rotate([0, -30, 45]) {\n                    cylinder(h=length*0.5, d1=trunk_diameter/4, d2=trunk_diameter/8, center=false);\n                }\n                rotate([0, -30, -45]) {\n                    cylinder(h=length*0.5, d1=trunk_diameter/4, d2=trunk_diameter/8, center=false);\n                }\n            }\n        }\n    }\n}\n\n// Foliage module - realistic layered approach\nmodule foliage_layer(diameter, height, layer_num) {\n    // Main foliage sphere with flattening\n    scale([1, 1, 0.7]) {\n        sphere(d=diameter);\n    }\n    \n    // Surface detail - small bumps\n    for(i=[0:30:359]) {\n        rotate([0, 0, i]) {\n            for(j=[0:45:135]) {\n                rotate([j, 0, 0]) {\n                    translate([diameter/2 * cos(j), 0, diameter/2 * sin(j)]) {\n                        sphere(d=diameter/8);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Layer connection to trunk\n    if(layer_num == 0) {\n        cylinder(h=height/2, d=diameter/4, center=false);\n    }\n}\n\n// Generate tree\nunion() {\n    // Trunk and roots\n    trunk();\n    \n    // Branches\n    for(i=[0:360/branch_count:359]) {\n        branch(trunk_height/2, 30 + i*0.5, i);\n    }\n    \n    // Foliage layers stacked\n    for(i=[0:foliage_layers-1]) {\n        translate([0, 0, trunk_height + layer_height * i * 0.7]) {\n            foliage_layer(\n                layer_diameter_start + layer_diameter_step * i,\n                layer_height,\n                i\n            );\n        }\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "bordonua",
    "openscad_code": "// Bordonua - Puerto Rican large guitar\n// Medium complexity realistic style\n\n// Overall dimensions\nbody_length = 75;\nbody_width = 35;\nbody_thickness = 12;\nneck_length = 45;\nneck_width = 6;\nneck_thickness = 5;\nheadstock_length = 15;\nheadstock_width = 10;\nheadstock_thickness = 4;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule body() {\n    // Main body with rounded edges\n    hull() {\n        translate([-body_length/2, -body_width/2, 0])\n            cube([body_length, body_width, body_thickness], center=false);\n        translate([-body_length/2 + 5, -body_width/2 + 5, 0])\n            sphere(d=body_thickness);\n        translate([body_length/2 - 5, body_width/2 - 5, 0])\n            sphere(d=body_thickness);\n    }\n    \n    // Sound hole\n    difference() {\n        // Body top\n        translate([0, 0, body_thickness/2 - wall/2])\n            cube([body_length - 10, body_width - 8, wall], center=true);\n        \n        // Hole\n        translate([0, 0, body_thickness/2 - wall/2])\n            cylinder(h=wall + 0.1, d=body_width/3, center=true);\n    }\n    \n    // Bridge\n    translate([body_length/4, 0, body_thickness/2 + wall/2])\n        cube([6, 10, 1.5], center=true);\n}\n\nmodule neck() {\n    // Neck\n    translate([0, 0, body_thickness/2 + neck_thickness/2])\n        cube([neck_length, neck_width, neck_thickness], center=true);\n    \n    // Fretboard\n    translate([0, 0, body_thickness/2 + neck_thickness + 0.5])\n        cube([neck_length, neck_width + 1, 1], center=true);\n    \n    // Frets\n    for(i = [1:9]) {\n        translate([-neck_length/2 + i * 4.5, 0, body_thickness/2 + neck_thickness + 1.5])\n            cube([0.5, neck_width + 1.2, 0.8], center=true);\n    }\n}\n\nmodule headstock() {\n    // Headstock\n    translate([neck_length/2 + headstock_length/2, 0, body_thickness/2 + neck_thickness/2])\n        cube([headstock_length, headstock_width, headstock_thickness], center=true);\n    \n    // Tuning pegs (pegs only, no holes for printability)\n    for(i = [-1, 1]) {\n        translate([neck_length/2 + 3, i * headstock_width/4, body_thickness/2 + neck_thickness/2])\n            cylinder(h=4, d=2, center=true);\n    }\n    \n    for(i = [-1, 1]) {\n        translate([neck_length/2 + headstock_length - 3, i * headstock_width/4, body_thickness/2 + neck_thickness/2])\n            cylinder(h=4, d=2, center=true);\n    }\n}\n\nmodule strings() {\n    // String paths (represented as thin cylinders)\n    for(i = [1:4]) {\n        // From bridge to nut\n        translate([body_length/4, -3 + i * 2, body_thickness/2 + wall/2 + 0.5])\n            cylinder(h=neck_length + body_length/2, d=0.5, center=false);\n        \n        // From nut to tuning peg\n        translate([neck_length/2, -3 + i * 2, body_thickness/2 + neck_thickness/2])\n            rotate([0, 90, 0])\n                cylinder(h=headstock_length - 6, d=0.5, center=false);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    headstock();\n    strings();\n}\n\n// Add support base for printing\ntranslate([0, 0, -0.5])\n    cube([body_length + 20, body_width + 10, 1], center=true);",
    "renders": true
  },
  {
    "musical_instrument": "tiple",
    "openscad_code": "// Tiple (Colombian 12-string guitar) - Medium complexity realistic style\n\n// Overall dimensions for 3D printing (scaled down)\nbody_length = 85;\nbody_width = 65;\nbody_depth = 25;\nneck_length = 65;\nneck_width = 12;\nheadstock_length = 30;\nheadstock_width = 20;\n\n// Wall thickness for printing\nwall = 2;\n\n// Body module with hollow interior\nmodule body() {\n    difference() {\n        // Main body shape\n        union() {\n            // Front face\n            translate([0, 0, body_depth/2])\n                scale([1, 0.7, 1])\n                cylinder(h=wall, r1=body_width/2, r2=body_width/2 - 5);\n            \n            // Back face\n            translate([0, 0, -body_depth/2])\n                scale([1, 0.7, 1])\n                cylinder(h=wall, r1=body_width/2, r2=body_width/2 - 5);\n            \n            // Sides\n            for (i = [-1, 1]) {\n                translate([0, 0, i * body_depth/2])\n                    rotate([0, 90, 0])\n                    cylinder(h=body_depth, r1=body_width/2, r2=body_width/2 - 5);\n            }\n        }\n        \n        // Hollow interior\n        translate([0, 0, 0])\n            scale([1, 0.7, 1])\n            cylinder(h=body_depth, r1=body_width/2 - wall, r2=body_width/2 - 5 - wall);\n        \n        // Sound hole\n        translate([0, -body_width/4, 0])\n            cylinder(h=body_depth + 2, r=8);\n    }\n}\n\n// Neck module with frets\nmodule neck() {\n    // Main neck\n    translate([body_length/2, 0, 0])\n        rotate([0, -90, 0])\n        cylinder(h=neck_length, r1=neck_width/2, r2=neck_width/2 - 2);\n    \n    // Fretboard\n    translate([body_length/2 + 2, 0, neck_width/2])\n        color(\"brown\")\n        cube([neck_length - 5, neck_width + 2, 2]);\n    \n    // Frets\n    for (i = [1:15]) {\n        translate([body_length/2 + 5 + i*3.5, 0, neck_width/2 + 2])\n            cube([0.5, neck_width + 2, 1]);\n    }\n}\n\n// Headstock with tuning pegs\nmodule headstock() {\n    // Main headstock\n    translate([body_length/2 + neck_length, 0, 0])\n        rotate([0, -90, 0])\n        cube([headstock_length, headstock_width, wall + 2]);\n    \n    // Tuning pegs (6 on each side for 12 strings total)\n    for (i = [0:5]) {\n        // Left side\n        translate([body_length/2 + neck_length + 5, -headstock_width/2 - 3, 5 - i*3])\n            rotate([90, 0, 0])\n            cylinder(h=5, r=1.5);\n        \n        // Right side\n        translate([body_length/2 + neck_length + 5, headstock_width/2 + 3, 5 - i*3])\n            rotate([90, 0, 0])\n            cylinder(h=5, r=1.5);\n    }\n    \n    // Nut\n    translate([body_length/2 + neck_length - 2, 0, neck_width/2])\n        cube([2, neck_width + 2, 2]);\n}\n\n// Bridge\nmodule bridge() {\n    translate([-body_length/4, 0, body_depth/2 + wall])\n        color(\"brown\")\n        cube([10, neck_width + 4, 2]);\n}\n\n// Strings\nmodule strings() {\n    // 12 strings in 4 courses (4-4-2-2)\n    for (course = [0:3]) {\n        for (string = [0:(course < 2 ? 1 : 0)]) {\n            x = body_length/2 + neck_length - 5;\n            y = -neck_width/2 + 3 + course*3 + string*0.5;\n            z = neck_width/2 + 2.5;\n            \n            // String from nut to bridge\n            translate([x, y, z])\n                rotate([90, 0, 0])\n                cylinder(h=body_length/2 + neck_length + 5, r=0.2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    neck();\n    headstock();\n    bridge();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "bandola",
    "openscad_code": "// Bandola - Venezuelan 4-course lute\n// Medium complexity realistic model, 3D printable\n\n$fn = 32;\nbody_length = 75;\nbody_width = 50;\nbody_depth = 20;\nneck_length = 50;\nheadstock_length = 25;\ntotal_length = body_length + neck_length + headstock_length;\n\nmodule rounded_box(w, h, d, r) {\n    hull() {\n        translate([r, r, r]) sphere(r);\n        translate([w-r, r, r]) sphere(r);\n        translate([r, h-r, r]) sphere(r);\n        translate([w-r, h-r, r]) sphere(r);\n        translate([r, r, d-r]) sphere(r);\n        translate([w-r, r, d-r]) sphere(r);\n        translate([r, h-r, d-r]) sphere(r);\n        translate([w-r, h-r, d-r]) sphere(r);\n    }\n}\n\nmodule body_shape() {\n    difference() {\n        // Main body with rounded edges\n        rounded_box(body_width, body_length, body_depth, 8);\n        \n        // Sound hole (offset for bridge placement)\n        translate([body_width/2, body_length*0.65, body_depth-1]) \n            cylinder(h=3, r=8, center=true);\n        \n        // Hollow interior\n        translate([5, 5, 5]) \n            rounded_box(body_width-10, body_length-10, body_depth-5, 5);\n    }\n}\n\nmodule bridge() {\n    translate([body_width/2, body_length*0.7, body_depth]) {\n        cube([20, 3, 3], center=true);\n        for(i = [-3:1:3]) {\n            translate([i*2.5, 0, 3]) \n                cylinder(h=2, r=0.5);\n        }\n    }\n}\n\nmodule neck() {\n    translate([body_width/2-5, body_length, body_depth-5]) {\n        // Neck shaft\n        difference() {\n            cube([10, neck_length, 10]);\n            // Truss rod cavity\n            translate([5, neck_length/2, 5]) \n                cube([3, neck_length-5, 8], center=true);\n        }\n        \n        // Fingerboard\n        translate([0, 0, 10]) \n            cube([10, neck_length, 2]);\n        \n        // Frets\n        for(f = [1:20]) {\n            pos = f * 2.5;\n            if(pos < neck_length) {\n                translate([0, pos, 12]) \n                    cube([10, 0.5, 1.5]);\n            }\n        }\n    }\n}\n\nmodule headstock() {\n    translate([body_width/2-7.5, body_length+neck_length, body_depth-2]) {\n        difference() {\n            // Tapered headstock\n            hull() {\n                translate([0, 0, 0]) cube([15, 5, 5]);\n                translate([2.5, headstock_length, 0]) cube([10, 5, 5]);\n            }\n            \n            // Tuning peg holes\n            for(i = [0:3]) {\n                y = headstock_length * (i+1)/5;\n                translate([i%2 ? 13 : 2, y, 2.5]) \n                    cylinder(h=6, r=1.5);\n            }\n        }\n    }\n}\n\nmodule strings() {\n    union() {\n        // From bridge to headstock\n        for(s = [-6:1:6]) {\n            if(s%3 != 0) {\n                hull() {\n                    // Bridge end\n                    translate([body_width/2 + s*2, body_length*0.7, body_depth+3.5]) \n                        sphere(r=0.3);\n                    // Nut end\n                    translate([body_width/2-5 + 5 + s*0.8, body_length+neck_length-2, body_depth-2+5]) \n                        sphere(r=0.3);\n                    // Headstock end\n                    translate([body_width/2-7.5 + (s>0 ? 13 : 2), body_length+neck_length+headstock_length*0.4, body_depth-2+2.5]) \n                        sphere(r=0.3);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nbody_shape();\nbridge();\nneck();\nheadstock();\nstrings();",
    "renders": true
  },
  {
    "musical_instrument": "arpa",
    "openscad_code": "// Harp model (arpa) – medium complexity, printable\n// Overall scale: 80 mm tall, 40 mm wide, 20 mm deep\n\n$fn = 36;               // smooth curves\nwall = 1.5;             // printable wall thickness\n\nmodule rounded_box(s, r) {\n    // helper: rounded box for base and pillar\n    hull() {\n        translate([r, r, r]) sphere(r);\n        translate([s.x-r, r, r]) sphere(r);\n        translate([r, s.y-r, r]) sphere(r);\n        translate([s.x-r, s.y-r, r]) sphere(r);\n        translate([r, r, s.z-r]) sphere(r);\n        translate([s.x-r, r, s.z-r]) sphere(r);\n        translate([r, s.y-r, s.z-r]) sphere(r);\n        translate([s.x-r, s.y-r, s.z-r]) sphere(r);\n    }\n}\n\nmodule base() {\n    // solid wooden base 40 x 20 x 3 mm\n    difference() {\n        rounded_box([40, 20, 3], 3);\n        translate([5, 5, -1]) cube([30, 10, 5]);    // hollow cavity for weight\n    }\n}\n\nmodule pillar() {\n    // curved pillar rising from base\n    translate([20, 10, 3])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 70, d1 = 6, d2 = 4);           // tapered neck\n        translate([0, 0, -1]) cylinder(h = 72, d = 4 - wall*2); // hollow\n    }\n}\n\nmodule arm() {\n    // curved harmonic arm\n    translate([20, 10, 73])\n    rotate([0, 0, -20])\n    difference() {\n        minkowski() {\n            // curved sweep\n            hull() {\n                translate([0, 0, 0]) sphere(3);\n                translate([0, 0, 30]) sphere(3);\n            }\n            sphere(1.5);\n        }\n        // hollow\n        translate([0, 0, 0])\n        rotate([0, 0, -20])\n        minkowski() {\n            hull() {\n                translate([0, 0, wall]) sphere(3 - wall);\n                translate([0, 0, 30 - wall]) sphere(3 - wall);\n            }\n            sphere(1.5 - wall);\n        }\n    }\n}\n\nmodule soundbox() {\n    // soundbox at bottom\n    translate([20, 10, 3])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 25, d1 = 12, d2 = 8);\n        translate([0, 0, -1]) cylinder(h = 27, d = 8); // remove inside\n    }\n}\n\nmodule strings() {\n    // 7 nylon strings\n    for(i = [0:6]) {\n        x = 20 - 9 + i*3;\n        translate([x, 10, 3]) cylinder(h = 70, d = 0.6, $fn = 8);\n    }\n}\n\nmodule tuning_pegs() {\n    // small pegs on arm\n    for(i = [0:6]) {\n        x = 20 - 9 + i*3;\n        translate([x, 10, 73 + i*0.8]) rotate([90, 0, 0])\n        cylinder(h = 5, d = 1.6);\n    }\n}\n\n// assemble complete harp\nunion() {\n    base();\n    pillar();\n    arm();\n    soundbox();\n    strings();\n    tuning_pegs();\n}",
    "renders": true
  },
  {
    "musical_instrument": "bandolim",
    "openscad_code": "// Medium-complexity 3D-printable bandolim (Brazilian 8-string mandolin)\n// External dimensions ~95 mm long, ~65 mm wide, ~30 mm thick\n\n// Wall / shell thickness for 3D printing\n$wall = 2;\n\nmodule body_shell() {\n    difference() {\n        // Main body\n        hull() {\n            translate([-25, -30, 0])\n                scale([1.2, 1, 0.5])\n                sphere(d = 60);\n            translate([25, -5, 0])\n                scale([1, 1.2, 0.5])\n                sphere(d = 45);\n            translate([25, 30, 0])\n                scale([1, 1.2, 0.5])\n                sphere(d = 45);\n        }\n        // Hollow cavity\n        hull() {\n            translate([-25, -30, $wall])\n                scale([1.2, 1, 0.5])\n                sphere(d = 60 - 2*$wall);\n            translate([25, -5, $wall])\n                scale([1, 1.2, 0.5])\n                sphere(d = 45 - 2*$wall);\n            translate([25, 30, $wall])\n                scale([1, 1.2, 0.5])\n                sphere(d = 45 - 2*$wall);\n        }\n    }\n}\n\nmodule sound_hole() {\n    // Traditional round hole\n    translate([0, -5, 30])\n        cylinder(h = 20, d = 18, $fn = 32);\n}\n\nmodule bridge() {\n    // Small floating bridge with saddle\n    translate([0, 25, 30])\n        cube([40, 6, 3], center = true);\n    translate([0, 25, 33])\n        cube([38, 3, 1], center = true);\n}\n\nmodule neck() {\n    // Tapered neck\n    linear_extrude(height = 70, scale = [0.4, 1])\n        translate([-35, -5, 0])\n            square([20, 10]);\n}\n\nmodule headstock() {\n    // Flat headstock\n    translate([-35, -5, 30])\n        cube([20, 15, 3], center = true);\n}\n\nmodule tuners() {\n    // Simple pegs (4 per side)\n    for(i = [0:3]) {\n        translate([-45, -10 + 7*i, 32])\n            rotate([0, 0, 90])\n                cylinder(h = 3, d = 3);\n        translate([-45, -10 + 7*i, 30])\n            rotate([0, 90, 0])\n                cylinder(h = 3, d = 4);\n    }\n    mirror([0,1,0]) {\n        translate([-45, 0, 30])\n            for(i = [0:3]) {\n                translate([0, 7*i, 2])\n                    rotate([0, 0, 90])\n                        cylinder(h = 3, d = 3);\n                translate([0, 7*i, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = 3, d = 4);\n            }\n    }\n}\n\nmodule strings() {\n    // Eight nylon strings (approximate)\n    for(i = [0:7]) {\n        y = -7 + 2*i;\n        translate([0, y, 30])\n            cylinder(h = 75, d = 0.6, $fn = 8);\n    }\n}\n\nmodule fretboard() {\n    // Thin fretboard surface\n    translate([-25, -5, 30])\n        cube([50, 10, 1]);\n}\n\nmodule frets() {\n    // 12 frets\n    for(i = [1:12]) {\n        x = -25 + 3.5*i;\n        translate([x, -5, 31])\n            cube([0.5, 10, 0.8]);\n    }\n}\n\n// Assemble the bandolim\nunion() {\n    body_shell();\n    sound_hole();\n    bridge();\n    neck();\n    headstock();\n    tuners();\n    fretboard();\n    frets();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "cavaquinho",
    "openscad_code": "// Cavaquinho - Medium Complexity Realistic Style\n// Overall size ~80mm (3D-print friendly)\n\n// Parameters\n$fn=36;\nbody_len=50;\nbody_w=30;\nbody_h=10;\nneck_len=30;\nneck_w=6;\nneck_h=8;\nhead_len=20;\nhead_w=8;\nhead_h=10;\nsoundhole_r=5;\nfret_n=12;\nbridge_w=12;\nbridge_h=2;\nbridge_d=4;\nstring_d=0.5;\ntuner_r=1.5;\ntuner_h=3;\n\nmodule body() {\n    // Main body shape\n    difference() {\n        // Body top\n        translate([0,0,body_h/2])\n        scale([1,0.65,0.8])\n        sphere(d=body_w);\n        \n        // Soundhole\n        translate([0,0,body_h])\n        cylinder(r=soundhole_r, h=body_h*2, center=true);\n        \n        // Bridge cavity\n        translate([body_len/2-5,0,body_h/2])\n        cube([bridge_d+2, bridge_w+4, body_h], center=true);\n    }\n    \n    // Body back\n    translate([0,0,-body_h/2])\n    scale([1,0.65,0.8])\n    sphere(d=body_w);\n    \n    // Side walls\n    difference() {\n        cube([body_len, body_w, body_h*2], center=true);\n        cube([body_len-4, body_w-4, body_h*2+2], center=true);\n    }\n}\n\nmodule neck() {\n    // Neck\n    translate([body_len/2+neck_len/2, 0, body_h/2+neck_h/2])\n    cube([neck_len, neck_w, neck_h], center=true);\n    \n    // Fretboard\n    translate([body_len/2+neck_len/2, 0, body_h/2+neck_h])\n    cube([neck_len+2, neck_w+2, 1.5], center=true);\n    \n    // Frets\n    for(i=[1:fret_n]) {\n        translate([body_len/2+neck_len*i/(fret_n+1), 0, body_h/2+neck_h+1])\n        cube([0.5, neck_w+2, 1.5], center=true);\n    }\n}\n\nmodule headstock() {\n    // Headstock\n    translate([body_len/2+neck_len+head_len/2, 0, body_h/2+neck_h+head_h/2])\n    cube([head_len, head_w, head_h], center=true);\n    \n    // Tuners\n    for(i=[-1,1]) {\n        // Pegs\n        translate([body_len/2+neck_len+head_len-5, i*head_w/4, body_h/2+neck_h+head_h])\n        rotate([90,0,0])\n        cylinder(r=tuner_r, h=tuner_h);\n        \n        translate([body_len/2+neck_len+head_len-5, i*head_w/4, body_h/2+neck_h])\n        rotate([90,0,0])\n        cylinder(r=tuner_r, h=tuner_h);\n    }\n}\n\nmodule bridge() {\n    // Bridge\n    translate([body_len/2-3, 0, body_h])\n    cube([bridge_d, bridge_w, bridge_h], center=true);\n    \n    // String notches\n    for(i=[-1.5,-0.5,0.5,1.5]) {\n        translate([body_len/2-3, i*bridge_w/4, body_h+bridge_h/2])\n        cube([0.5, 1, bridge_h+0.5], center=true);\n    }\n}\n\nmodule strings() {\n    // Strings from bridge to headstock\n    for(i=[-1.5,-0.5,0.5,1.5]) {\n        hull() {\n            // Bridge end\n            translate([body_len/2-3, i*bridge_w/4, body_h+bridge_h+string_d/2])\n            sphere(d=string_d);\n            \n            // Nut end\n            translate([body_len/2+neck_len, i*neck_w/4, body_h/2+neck_h+1.5+string_d/2])\n            sphere(d=string_d);\n            \n            // Tuner end\n            translate([body_len/2+neck_len+head_len-5, i*head_w/4, body_h/2+neck_h+head_h-string_d/2])\n            sphere(d=string_d);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    headstock();\n    bridge();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "viola",
    "openscad_code": "// Viola - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness\n\n$fn = 32;\nwall_thickness = 1.2;\n\n// Overall scale factor\nscale_factor = 0.25;\n\nmodule body() {\n    // Main body - carved top and back plates\n    difference() {\n        // Back plate\n        scale([1, 0.6, 0.15]) sphere(d = 100 * scale_factor);\n        \n        // Carved inner cavity\n        translate([0, 0, -1])\n            scale([0.9, 0.5, 0.2]) sphere(d = 95 * scale_factor);\n        \n        // Neck mortise\n        translate([0, 30 * scale_factor, 0])\n            cube([15 * scale_factor, 20 * scale_factor, 20 * scale_factor], center = true);\n    }\n    \n    // Top plate\n    translate([0, 0, 5 * scale_factor])\n    difference() {\n        scale([1, 0.6, 0.1]) sphere(d = 100 * scale_factor);\n        \n        // F-holes\n        for(y = [-15, 15]) {\n            translate([5 * scale_factor, y * scale_factor, 0])\n            rotate([90, 0, 0])\n            linear_extrude(height = 3 * scale_factor)\n            polygon(points = [[0,0], [8,2], [8,5], [0,7], [-8,5], [-8,2]]);\n        }\n        \n        // Sound post hole\n        translate([-10 * scale_factor, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 5 * scale_factor, d = 2 * scale_factor);\n    }\n}\n\nmodule neck() {\n    // Neck heel\n    translate([0, 35 * scale_factor, 5 * scale_factor])\n        cube([12 * scale_factor, 25 * scale_factor, 8 * scale_factor], center = true);\n    \n    // Neck shaft\n    translate([0, 55 * scale_factor, 15 * scale_factor])\n    rotate([0, -10, 0])\n    scale([1, 4, 0.5])\n        cube([8 * scale_factor, 25 * scale_factor, 8 * scale_factor], center = true);\n    \n    // Scroll pegbox\n    translate([0, 75 * scale_factor, 20 * scale_factor])\n    rotate([0, -10, 0])\n    union() {\n        // Pegbox body\n        cube([10 * scale_factor, 20 * scale_factor, 15 * scale_factor], center = true);\n        \n        // Scroll\n        translate([0, 15 * scale_factor, 0])\n        rotate([90, 0, 0])\n            scale([1, 1, 1.5])\n                sphere(d = 20 * scale_factor);\n        \n        // Peg holes\n        for(i = [-1, 1]) {\n            for(j = [0, 1]) {\n                translate([i * 5 * scale_factor, (25 + j * 10) * scale_factor, 0])\n                    rotate([90, 0, 0])\n                    cylinder(h = 12 * scale_factor, d = 1.5 * scale_factor);\n            }\n        }\n    }\n}\n\nmodule fingerboard() {\n    translate([0, 55 * scale_factor, 15 * scale_factor])\n    rotate([0, -10, 0])\n    hull() {\n        // Nut end\n        translate([0, -5 * scale_factor, 0])\n            cube([8 * scale_factor, 2 * scale_factor, 1 * scale_factor], center = true);\n        \n        // Bridge end\n        translate([0, 35 * scale_factor, 0])\n            cube([12 * scale_factor, 2 * scale_factor, 1 * scale_factor], center = true);\n    }\n}\n\nmodule bridge() {\n    translate([-5 * scale_factor, 0, 8 * scale_factor])\n    union() {\n        // Bridge base\n        cube([20 * scale_factor, 1.5 * scale_factor, 8 * scale_factor], center = true);\n        \n        // Bridge feet\n        translate([-8 * scale_factor, 0, -4 * scale_factor])\n            sphere(d = 4 * scale_factor);\n        translate([8 * scale_factor, 0, -4 * scale_factor])\n            sphere(d = 4 * scale_factor);\n        \n        // Bridge cuts\n        translate([0, 0, -2 * scale_factor])\n            cube([16 * scale_factor, 2 * scale_factor, 4 * scale_factor], center = true);\n    }\n}\n\nmodule tailpiece() {\n    translate([0, -40 * scale_factor, 5 * scale_factor])\n    union() {\n        // Main tailpiece body\n        hull() {\n            translate([0, -8 * scale_factor, 0])\n                cube([12 * scale_factor, 2 * scale_factor, 4 * scale_factor], center = true);\n            translate([0, 8 * scale_factor, 0])\n                cube([6 * scale_factor, 2 * scale_factor, 2 * scale_factor], center = true);\n        }\n        \n        // Tailgut hole\n        translate([0, 8 * scale_factor, 0])\n            cylinder(h = 3 * scale_factor, d = 1 * scale_factor);\n    }\n}\n\nmodule strings() {\n    // Four strings from tailpiece to pegbox\n    for(i = [-1.5, -0.5, 0.5, 1.5]) {\n        color(\"silver\")\n        hull() {\n            // Tailpiece end\n            translate([i * 1.5 * scale_factor, -40 * scale_factor, 5 * scale_factor])\n                sphere(d = 0.5 * scale_factor);\n            \n            // Bridge\n            translate([i * 3 * scale_factor, 0, 12 * scale_factor])\n                sphere(d = 0.5 * scale_factor);\n            \n            // Nut\n            translate([i * 3 * scale_factor, 50 * scale_factor, 15 * scale_factor])\n                sphere(d = 0.5 * scale_factor);\n            \n            // Pegbox\n            translate([i * 5 * scale_factor, 75 * scale_factor, 20 * scale_factor])\n                sphere(d = 0.5 * scale_factor);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    fingerboard();\n    bridge();\n    tailpiece();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "rabeca",
    "openscad_code": "// Rabeca - traditional Brazilian fiddle\n// Medium complexity realistic style\n\n$fn = 50;\n\nmodule body() {\n    difference() {\n        // Main body shape\n        hull() {\n            translate([0, 0, 0]) sphere([12, 15, 8]);\n            translate([30, 0, 0]) sphere([10, 12, 7]);\n            translate([55, 0, 0]) sphere([8, 10, 6]);\n        }\n        \n        // Sound holes (f-holes)\n        translate([40, 3, 2]) rotate([0, 0, 30]) cylinder(h=10, r1=1.5, r2=0.5);\n        translate([40, -3, 2]) rotate([0, 0, -30]) cylinder(h=10, r1=1.5, r2=0.5);\n        \n        // Bridge area\n        translate([48, 0, -2]) cube([10, 15, 5], center=true);\n    }\n}\n\nmodule neck() {\n    difference() {\n        // Neck shaft\n        hull() {\n            translate([58, 0, 5]) sphere([3, 3, 2]);\n            translate([75, 0, 5]) sphere([2.5, 2.5, 2]);\n            translate([90, 0, 5]) sphere([2, 2.5, 2]);\n        }\n        \n        // Fingerboard\n        translate([74, 0, 6.5]) cube([30, 4, 1.5], center=true);\n        \n        // Tuners holes\n        for(i = [0:3]) {\n            translate([85 + i*3, 2.5, 5]) rotate([90, 0, 0]) cylinder(h=5, r=0.8);\n            translate([85 + i*3, -2.5, 5]) rotate([90, 0, 0]) cylinder(h=5, r=0.8);\n        }\n    }\n}\n\nmodule pegbox() {\n    difference() {\n        // Pegbox head\n        hull() {\n            translate([90, 0, 5]) sphere([2.5, 2.5, 2]);\n            translate([100, 0, 5]) sphere([3.5, 3.5, 2.5]);\n        }\n        \n        // Peg holes\n        translate([95, 2.5, 5]) rotate([90, 0, 0]) cylinder(h=7, r=0.8);\n        translate([95, -2.5, 5]) rotate([90, 0, 0]) cylinder(h=7, r=0.8);\n        translate([98, 2.5, 5]) rotate([90, 0, 0]) cylinder(h=7, r=0.8);\n        translate([98, -2.5, 5]) rotate([90, 0, 0]) cylinder(h=7, r=0.8);\n    }\n}\n\nmodule bridge() {\n    // Bridge\n    translate([48, 0, 6]) cube([3, 12, 3], center=true);\n    translate([48, 0, 7.5]) cube([1, 8, 0.5], center=true);\n}\n\nmodule tailpiece() {\n    // Tailpiece\n    hull() {\n        translate([55, 0, 6]) sphere([2, 1, 0.5]);\n        translate([60, 0, 4]) sphere([1, 3, 1]);\n    }\n}\n\nmodule strings() {\n    // Strings\n    for(i = [-1.5, -0.5, 0.5, 1.5]) {\n        translate([60, i, 5]) cylinder(h=35, r=0.1);\n    }\n}\n\nmodule bow() {\n    // Bow stick\n    translate([0, -25, 2]) rotate([0, 0, 10]) \n        hull() {\n            translate([0, 0, 0]) sphere([1, 1, 1]);\n            translate([0, 50, 0]) sphere([0.5, 0.5, 0.5]);\n        }\n    \n    // Bow frog\n    translate([0, 45, 0]) cube([2, 5, 2], center=true);\n    \n    // Bow hair\n    difference() {\n        translate([0, 0, -0.5]) cube([0.5, 50, 1], center=true);\n        translate([0, 0, -1]) cube([0.3, 50, 0.5], center=true);\n    }\n}\n\n// Assemble rabeca\nunion() {\n    body();\n    neck();\n    pegbox();\n    bridge();\n    tailpiece();\n    strings();\n}\n\n// Position bow nearby\ntranslate([15, 15, 0]) rotate([0, 0, 30]) bow();",
    "renders": true
  },
  {
    "musical_instrument": "rabab",
    "openscad_code": "// Rabab - Medium Complexity Realistic Style\n// Overall length ~90mm, 3D printable with 1.2mm wall thickness\n\n$fn = 32;\n\n// Body parameters\nbody_length = 45;\nbody_width = 30;\nbody_depth = 18;\nneck_length = 35;\npegbox_length = 15;\n\nmodule rabab() {\n    union() {\n        // Main body (carved from single block)\n        difference() {\n            // Main body shape\n            hull() {\n                translate([-body_length/2, 0, 0])\n                    sphere(d=body_width);\n                translate([body_length/2 - 5, 0, 0])\n                    sphere(d=body_width * 0.7);\n            }\n            \n            // Front sound cavity\n            translate([0, 0, -body_depth/2 + 1])\n                cube([body_length * 0.8, body_width * 0.7, body_depth - 1.2], center=true);\n            \n            // Sound hole\n            translate([body_length * 0.3, 0, -body_depth/2 + 0.6])\n                cylinder(h=3, d=8);\n                \n            // Back hole for printing support\n            translate([0, 0, body_depth/2 - 0.6])\n                cylinder(h=3, d=6);\n        }\n        \n        // Neck\n        translate([body_length/2 - 2, 0, body_depth/2 - 2])\n            rotate([0, -10, 0])\n            cylinder(h=neck_length, d1=6, d2=5);\n            \n        // Pegbox\n        translate([body_length/2 + neck_length - 5, 0, body_depth/2 - 2])\n            rotate([0, -10, 0])\n            difference() {\n                cube([pegbox_length, 8, 12], center=true);\n                \n                // Peg holes (4 pegs)\n                for(i=[-1.5, -0.5, 0.5, 1.5]) {\n                    translate([0, i * 3, 0])\n                        rotate([90, 0, 0])\n                        cylinder(h=10, d=2.5);\n                }\n            }\n            \n        // Bridge\n        translate([body_length * 0.2, 0, -body_depth/2 + 1.2])\n            cube([4, 12, 3]);\n            \n        // Tailpiece\n        translate([-body_length/2 + 5, 0, -body_depth/2 + 1.2])\n            difference() {\n                cube([8, 10, 3]);\n                translate([0, 0, 2])\n                    cube([6, 8, 2]);\n            }\n            \n        // Strings (3 strings as thin cylinders)\n        for(i=[-1, 0, 1]) {\n            hull() {\n                translate([-body_length/2 + 5, i * 2.5, -body_depth/2 + 2.5])\n                    sphere(d=1);\n                translate([body_length/2 + neck_length + pegbox_length/2 - 2, i * 2, body_depth/2 - 2])\n                    sphere(d=1);\n            }\n        }\n        \n        // Skin membrane (top surface)\n        translate([0, 0, -body_depth/2 + 0.6])\n            scale([1, 0.85, 1])\n            cylinder(h=0.6, d=body_width * 0.9);\n            \n        // Decorative rosette around sound hole\n        translate([body_length * 0.3, 0, -body_depth/2 + 1.2])\n        difference() {\n            cylinder(h=0.4, d=12);\n            cylinder(h=0.5, d=8.5);\n        }\n        \n        // Fret markers on neck\n        for(i=[1:5]) {\n            translate([body_length/2 + i * 5, 0, body_depth/2 - 1.5])\n                rotate([0, -10, 0])\n                sphere(d=1.5);\n        }\n    }\n}\n\n// Generate the rabab centered\nrabab();",
    "renders": true
  },
  {
    "musical_instrument": "ghichak",
    "openscad_code": "// Realistic 3D-printable ghichak (Persian spiked fiddle)\n// Overall size: ~80 mm long\n\n$fn = 36;  // smooth curves for printing\n\n// Parameters\nbody_len = 60;\nbody_d = 45;\nneck_len = 35;\nneck_d = 8;\npegbox_len = 25;\npegbox_w = 12;\npegbox_h = 10;\nspike_len = 45;\nspike_d = 5;\nsound_hole_d = 12;\nwall = 2.5;      // printable wall thickness\nbridge_h = 5;\nbridge_w = 20;\nbridge_d = 3;\nstring_d = 0.8;\npeg_d = 4;\npeg_len = 12;\n\nmodule body() {\n    difference() {\n        // Hollow pear-shaped body\n        hull() {\n            // upper bout\n            translate([0, 0, body_len*0.35])\n                sphere(d = body_d*0.7);\n            // lower bout\n            translate([0, 0, -body_len*0.35])\n                sphere(d = body_d);\n        }\n        // inner cavity\n        hull() {\n            translate([0, 0, body_len*0.35])\n                sphere(d = body_d*0.7 - 2*wall);\n            translate([0, 0, -body_len*0.35])\n                sphere(d = body_d - 2*wall);\n        }\n        // sound hole\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(d = sound_hole_d, h = wall + 1, center = true);\n    }\n}\n\nmodule neck() {\n    // Tapered neck\n    color(\"BurlyWood\")\n    hull() {\n        translate([0, 0, neck_len/2])\n            cylinder(d1 = neck_d * 1.1, d2 = neck_d, h = neck_len);\n    }\n}\n\nmodule fingerboard() {\n    // Raised fingerboard\n    translate([0, 0, neck_len/2 + neck_d/2 + 1])\n        cube([neck_d*0.8, neck_len*1.1, 1], center = true);\n}\n\nmodule pegbox() {\n    // Pegbox with scroll-like top\n    union() {\n        // main block\n        translate([0, 0, neck_len + pegbox_len/2])\n            cube([pegbox_w, pegbox_len, pegbox_h], center = true);\n        // scroll\n        translate([0, 0, neck_len + pegbox_len + pegbox_w/2])\n            rotate([90, 0, 0])\n            rotate_extrude()\n                translate([pegbox_w/2, 0, 0])\n                    circle(d = pegbox_w);\n    }\n}\n\nmodule pegs(count = 4) {\n    // Side-mounted tuning pegs\n    for (i = [0:count-1]) {\n        y = neck_len + pegbox_len*0.2 + i*pegbox_len*0.25;\n        translate([-pegbox_w/2 - peg_len/2, 0, y])\n            rotate([0, 90, 0])\n            cylinder(d = peg_d, h = peg_len, center = true);\n        mirror([1, 0, 0])\n            translate([-pegbox_w/2 - peg_len/2, 0, y])\n                rotate([0, 90, 0])\n                cylinder(d = peg_d, h = peg_len, center = true);\n    }\n}\n\nmodule bridge() {\n    // Floating bridge\n    translate([0, 0, -body_len*0.2])\n        cube([bridge_w, bridge_d, bridge_h], center = true);\n}\n\nmodule spike() {\n    // End spike / support pin\n    translate([0, 0, -body_len/2 - spike_len/2])\n        cylinder(d = spike_d, h = spike_len);\n}\n\nmodule strings() {\n    // Four playing strings\n    for (i = [-1.5:1.5]) {\n        translate([i*4, 0, 0])\n            color(\"silver\")\n            cylinder(d = string_d,\n                     h = neck_len + pegbox_len - 5,\n                     center = false);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    fingerboard();\n    pegbox();\n    pegs();\n    bridge();\n    spike();\n    translate([0, 0, neck_len + pegbox_len - 2])\n        strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "rubab",
    "openscad_code": "// Rubab - Medium complexity realistic style\n// Overall length: 90mm, width: 35mm, depth: 15mm\n\n$fn = 32;\n\nmodule rubab() {\n    // Main body - hollowed pear shape\n    difference() {\n        // Pear-shaped body shell\n        hull() {\n            translate([0, 0, 7.5]) sphere(d = 30);\n            translate([0, -25, 7.5]) sphere(d = 40);\n        }\n        // Hollow interior\n        translate([0, -5, 7.5]) scale([0.8, 0.8, 0.8]) sphere(d = 35);\n    }\n\n    // Neck\n    translate([0, 35, 7.5]) \n        rotate([0, 0, 0])\n        cylinder(h = 40, d1 = 10, d2 = 8);\n\n    // Headstock\n    translate([0, 75, 7.5]) \n        rotate([0, 0, 0])\n        cylinder(h = 15, d = 12);\n\n    // Soundboard\n    translate([0, -10, 15]) \n        scale([1, 1, 0.1])\n        sphere(d = 35);\n\n    // Bridge\n    translate([0, -25, 16]) \n        cube([20, 4, 2], center = true);\n\n    // Strings (4 strings)\n    for(i = [-1.5, -0.5, 0.5, 1.5]) {\n        // Nut\n        translate([i * 2, 75, 15]) \n            cylinder(h = 1, d = 0.5);\n\n        // Bridge string attachment\n        translate([i * 3, -25, 16]) \n            cylinder(h = 1, d = 0.5);\n\n        // String line\n        hull() {\n            translate([i * 2, 75, 15.5]) \n                sphere(d = 0.5);\n            translate([i * 3, -25, 16.5]) \n                sphere(d = 0.5);\n        }\n    }\n\n    // Fretboard\n    translate([0, 50, 15.5]) \n        cube([8, 25, 1], center = true);\n\n    // Frets (7 frets)\n    for(i = [0:6]) {\n        translate([0, 35 + i * 5, 16]) \n            cube([8, 0.5, 0.5], center = true);\n    }\n\n    // Sound hole\n    translate([0, -15, 15]) \n        cylinder(h = 2, d = 8);\n\n    // Tuning pegs (3 on each side)\n    for(side = [-1, 1]) {\n        for(i = [0, 1, 2]) {\n            translate([side * 6, 82 + i * 3, 15]) \n                rotate([90, 0, 0])\n                cylinder(h = 8, d = 2);\n        }\n    }\n\n    // Tailpiece\n    translate([0, -35, 15]) \n        cube([25, 6, 2], center = true);\n}\n\nrubab();",
    "renders": true
  },
  {
    "musical_instrument": "pamiri",
    "openscad_code": "// Pamiri - Traditional Central Asian house\n// Medium complexity realistic model\n// All dimensions in mm\n\nroof_angle = 45;\nwall_thickness = 2;\n\nmodule base() {\n    difference() {\n        cube([60, 60, 8], center=true);\n        translate([0, 0, -1])\n            cube([56, 56, 10], center=true);\n    }\n}\n\nmodule walls() {\n    difference() {\n        cube([54, 54, 40], center=true);\n        translate([0, 0, -1])\n            cube([50, 50, 42], center=true);\n    }\n}\n\nmodule arched_doorway() {\n    translate([0, -25, 0]) {\n        difference() {\n            // Door frame\n            translate([0, 0, 10])\n                cube([20, wall_thickness, 20], center=true);\n            \n            // Arch\n            translate([0, -wall_thickness/2, 20])\n                rotate([90, 0, 0])\n                    cylinder(h=20, d1=20, d2=20, center=true, $fn=20);\n            \n            // Door opening\n            translate([0, -wall_thickness/2-1, 10])\n                cube([16, wall_thickness+2, 18], center=true);\n        }\n    }\n}\n\nmodule window(type=\"square\", pos=[0,0]) {\n    translate([pos[0], pos[1], 20]) {\n        difference() {\n            if (type == \"square\") {\n                cube([12, wall_thickness, 12], center=true);\n                translate([0, -wall_thickness/2-1, 0])\n                    cube([8, wall_thickness+2, 8], center=true);\n            } else {\n                // Circular window\n                rotate([90, 0, 0])\n                    cylinder(h=wall_thickness+2, d=12, center=true, $fn=20);\n                rotate([90, 0, 0])\n                    cylinder(h=wall_thickness+3, d=8, center=true, $fn=20);\n            }\n        }\n    }\n}\n\nmodule support_post(pos=[0,0]) {\n    translate([pos[0], pos[1], 4])\n        cylinder(h=36, d=4, center=false, $fn=8);\n}\n\nmodule beam() {\n    translate([0, 0, 40])\n        cube([58, 58, 4], center=true);\n}\n\nmodule roof_layer(radius, height, y_offset) {\n    translate([0, y_offset, height])\n        rotate([roof_angle, 0, 0])\n            cube([radius*2, radius*2, 3], center=true);\n}\n\nmodule skylight() {\n    translate([0, 0, 72]) {\n        // Base\n        cylinder(h=8, d=20, center=false, $fn=20);\n        \n        // Roof\n        translate([0, 0, 8])\n            cylinder(h=4, d1=24, d2=20, center=false, $fn=20);\n        \n        // Top opening\n        translate([0, 0, 12])\n            cylinder(h=4, d=16, center=false, $fn=20);\n    }\n}\n\nmodule roof() {\n    // Central square\n    translate([0, 0, 44])\n        cube([50, 50, 3], center=true);\n    \n    // Four sloped sections\n    roof_layer(35, 47, 0);\n    mirror([0, 1, 0]) roof_layer(35, 47, 0);\n    mirror([1, 0, 0]) roof_layer(35, 47, 0);\n    mirror([1, 1, 0]) roof_layer(35, 47, 0);\n    \n    // Top pyramid\n    translate([0, 0, 70])\n        cylinder(h=4, d1=30, d2=20, center=false, $fn=4);\n    \n    skylight();\n}\n\nmodule decorative_band() {\n    translate([0, 0, 38])\n        cube([56, 56, 2], center=true);\n}\n\n// Assembly\nunion() {\n    base();\n    walls();\n    arched_doorway();\n    \n    // Windows\n    window(\"square\", [18, 25]);\n    window(\"square\", [-18, 25]);\n    window(\"circular\", [25, 18]);\n    window(\"circular\", [-25, 18]);\n    \n    // Support posts\n    for (x = [-20, 20])\n        for (y = [-20, 20])\n            support_post([x, y]);\n    \n    beam();\n    decorative_band();\n    roof();\n}",
    "renders": true
  },
  {
    "musical_instrument": "tarompet",
    "openscad_code": "// Tarompet (Indonesian traditional trumpet) - Realistic Medium Complexity\n// Total length: ~80mm, printable in one piece with no support\n\n// Parameters\nbody_len = 60;\nbell_d = 32;\nbell_h = 18;\nmouth_d = 8;\nmouth_len = 12;\nwall_t = 2;\nsegments = 64;\n\n// Main body tube\nmodule body() {\n    difference() {\n        cylinder(h = body_len, d1 = bell_d - wall_t*2, d2 = mouth_d + wall_t*2, $fn = segments);\n        // Hollow bore\n        translate([0, 0, -0.1])\n            cylinder(h = body_len + 0.2, d1 = bell_d - wall_t*4, d2 = mouth_d, $fn = segments);\n    }\n}\n\n// Bell flare\nmodule bell() {\n    difference() {\n        cylinder(h = bell_h, d1 = bell_d, d2 = bell_d + 12, $fn = segments);\n        // Inner flare\n        translate([0, 0, -0.1])\n            cylinder(h = bell_h + 0.2, d1 = bell_d - wall_t*2, d2 = bell_d + 12 - wall_t*2, $fn = segments);\n    }\n}\n\n// Mouthpiece\nmodule mouthpiece() {\n    difference() {\n        union() {\n            // Cup\n            cylinder(h = 6, d = mouth_d + 6, $fn = segments);\n            // Stem\n            translate([0, 0, 6])\n                cylinder(h = mouth_len - 6, d = mouth_d + wall_t*2, $fn = segments);\n        }\n        // Cup cavity\n        translate([0, 0, -0.1])\n            cylinder(h = 7, d1 = mouth_d, d2 = mouth_d + 2, $fn = segments);\n        // Bore through stem\n        translate([0, 0, 5.9])\n            cylinder(h = mouth_len, d = mouth_d, $fn = segments);\n    }\n}\n\n// Reinforcement rings\nmodule rings() {\n    for (i = [1:3]) {\n        translate([0, 0, i * 15])\n            difference() {\n                cylinder(h = 2, d = bell_d - 2, $fn = segments);\n                cylinder(h = 2.2, d = bell_d - 2 - wall_t*2, $fn = segments);\n            }\n    }\n}\n\n// Finger hook\nmodule finger_hook() {\n    translate([bell_d/2 - 2, 0, body_len/2])\n        rotate([0, 90, 0])\n            difference() {\n                union() {\n                    // Base\n                    cube([4, 6, 2], center = true);\n                    // Hook loop\n                    translate([0, -2, 0])\n                        rotate_extrude(angle = 300, $fn = segments)\n                            translate([5, 0, 0])\n                                circle(d = 3, $fn = segments);\n                }\n                // Hollow loop\n                rotate_extrude(angle = 300, $fn = segments)\n                    translate([5, 0, 0])\n                        circle(d = 1.5, $fn = segments);\n            }\n}\n\n// Assembly\nunion() {\n    color(\"gold\") {\n        body();\n        translate([0, 0, body_len])\n            bell();\n        translate([0, 0, -mouth_len])\n            mouthpiece();\n        rings();\n    }\n    finger_hook();\n}",
    "renders": true
  },
  {
    "musical_instrument": "shamisen",
    "openscad_code": "// Shamisen - Medium Complexity Realistic Style\n// Designed for 3D printing, no overhangs, 50mm scale\n\n$fn = 32;  // Smooth curves for printing\nwall = 2;  // Wall thickness for printing\n\nmodule neck() {\n    // Main neck - tapered rectangular prism\n    difference() {\n        hull() {\n            translate([-3, 0, 0]) cube([6, 3, 40]);\n            translate([-2.5, 0, 40]) cube([5, 2.5, 10]);\n        }\n        \n        // Tuning peg holes (horizontal through neck)\n        for(i = [0:2]) {\n            translate([0, 1.5, 45-i*6]) \n                rotate([0,90,0]) cylinder(h=7, r=0.5);\n        }\n        \n        // String holes at bottom\n        for(i = [-1, 0, 1]) {\n            translate([i*1.2, 1.5, 2]) \n                rotate([90,0,0]) cylinder(h=3, r=0.3);\n        }\n    }\n}\n\nmodule body() {\n    // Resonator body - rounded rectangle box\n    difference() {\n        // Main body shell\n        hull() {\n            translate([-15, -2, 0]) cube([30, 4, 20]);\n            translate([-12, -2, 2]) cube([24, 4, 16]);\n        }\n        \n        // Front sound hole - traditional shamisen style\n        translate([0, 2.1, 10]) \n            scale([1, 0.1, 1.2]) sphere(r=8);\n            \n        // Back opening for resonance\n        translate([0, -2.1, 10]) \n            cube([20, 0.1, 12], center=true);\n    }\n    \n    // Skin membrane (front)\n    translate([0, 2.2, 10]) \n        rotate([90,0,0]) cylinder(h=0.5, r=13);\n}\n\nmodule tuning_pegs() {\n    // Three tuning pegs\n    for(i = [0:2]) {\n        translate([3.5, 1.5, 45-i*6]) \n            rotate([0,90,0]) {\n                cylinder(h=4, r=1.5);\n                translate([4,0,0]) sphere(r=1.8);\n            }\n    }\n}\n\nmodule strings() {\n    // Three nylon strings\n    for(i = [-1, 0, 1]) {\n        hull() {\n            translate([i*1.2, 1.8, 2]) sphere(r=0.3);\n            translate([i*1, 1.8, 45]) sphere(r=0.3);\n            translate([i*0.8, 1.8, 50]) sphere(r=0.3);\n        }\n    }\n}\n\nmodule bridge() {\n    // Small bridge for strings\n    translate([0, 2.5, 8]) {\n        difference() {\n            cube([8, 1, 2], center=true);\n            translate([0, 0.6, 0]) cube([6, 0.5, 1.5], center=true);\n        }\n        \n        // String grooves\n        for(i = [-1, 0, 1]) {\n            translate([i*1.5, 0.5, 0]) cube([0.4, 1, 1], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    neck();\n    translate([0, 0, 0]) body();\n    \n    // Details\n    tuning_pegs();\n    strings();\n    bridge();\n}",
    "renders": true
  },
  {
    "musical_instrument": "koto",
    "openscad_code": "// Koto - Medium complexity realistic style\n// Overall size: ~85 mm long, 25 mm wide, 10 mm thick\n\n// Parameters\nbody_len = 80;\nbody_w   = 22;\nbody_h   = 7;\nwall_t   = 1.2;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer hull\n        hull() {\n            translate([0, 0, body_h/2])\n                cube([body_len, body_w, body_h], center=true);\n            translate([0, 0, -body_h/2 + 0.5])\n                cube([body_len - 10, body_w - 2, body_h], center=true);\n        }\n        // Hollow cavity\n        translate([0, 0, 0])\n            cube([body_len - 2*wall_t, body_w - 2*wall_t, body_h - wall_t], center=true);\n    }\n}\n\n// Curved top plate with sound holes\nmodule top_plate() {\n    difference() {\n        // Arched top\n        linear_extrude(height=body_h/2, convexity=10)\n            offset(r=2)\n                square([body_len - 6, body_w - 4], center=true);\n        \n        // Rosette sound holes\n        for(i=[1:4]) {\n            translate([-body_len/2 + 15*i, 0, 0])\n                cylinder(h=body_h/2 + 1, r=2.5, $fn=20);\n        }\n    }\n}\n\n// Bridges (ji)\nmodule ji(x, y) {\n    translate([x, y, body_h/2 + 0.5])\n        cube([6, 2.5, 1.5], center=true);\n}\n\n// String guide (koma)\nmodule koma() {\n    translate([body_len/2 - 8, 0, body_h/2 + 1.5])\n        difference() {\n            cube([2, body_w - 4, 3], center=true);\n            for(j=[-4:2:4])\n                translate([0, j, 0.5])\n                    cylinder(h=3.5, r=0.4, $fn=8);\n        }\n}\n\n// Tuning pegs (itomaki)\nmodule itomaki(n) {\n    rotate([90, 0, 0])\n        translate([body_len/2 + 3, -body_w/2 + 2.5 + 3*n, 0])\n            difference() {\n                cylinder(h=5, r=1.2, $fn=12);\n                translate([0, 0, -0.1])\n                    cylinder(h=5.2, r=0.4, $fn=12);\n            }\n}\n\n// Assembly\nmodule koto() {\n    body();\n    translate([0, 0, body_h/2 - 0.5])\n        top_plate();\n    \n    // Six bridges spaced along length\n    for(i=[0:5]) {\n        ji(-body_len/2 + 12 + i*10, (i%2==0 ? 2 : -2));\n    }\n    \n    koma();\n    \n    // Thirteen tuning pegs\n    for(k=[0:12]) {\n        itomaki(k);\n    }\n}\n\n// Render\nkoto();",
    "renders": true
  },
  {
    "musical_instrument": "biwa",
    "openscad_code": "// Biwa - Japanese lute\n// Medium complexity realistic style\n\n// Overall dimensions\nbody_length = 80;\nbody_width = 40;\nbody_thickness = 15;\nneck_length = 60;\nneck_width = 8;\nneck_thickness = 6;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\nmodule biwa_body() {\n    // Main pear-shaped body\n    difference() {\n        // Outer body shape\n        scale([1, 0.7, 0.5])\n            sphere(d=body_width, $fn=50);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            scale([0.85, 0.55, 0.4])\n                sphere(d=body_width - wall*2, $fn=50);\n    }\n    \n    // Flatten bottom slightly\n    translate([0, 0, -body_thickness/2])\n        cube([body_width*1.2, body_width*0.8, wall], center=true);\n}\n\nmodule biwa_neck() {\n    // Neck\n    translate([body_length/2 - 10, 0, body_thickness/2])\n        rotate([0, -10, 0])\n            scale([1, 0.8, 0.8])\n                cube([neck_length, neck_width, neck_thickness], center=true);\n    \n    // Headstock\n    translate([body_length/2 + neck_length/2 - 5, 0, body_thickness/2 + 2])\n        cube([neck_length/3, neck_width*1.2, neck_thickness*1.2], center=true);\n}\n\nmodule frets() {\n    // Four frets along neck\n    for(i = [1:4]) {\n        translate([body_length/2 - 15 + i*12, 0, body_thickness/2 + neck_thickness/2 + 1])\n            cube([wall*1.5, neck_width + 2, wall], center=true);\n    }\n}\n\nmodule strings() {\n    // Four strings\n    for(i = [0:3]) {\n        translate([body_length/2 + neck_length/2 - 5 - i*2, \n                  -neck_width/2 + 2 + i*2, \n                  body_thickness/2 + neck_thickness/2 + 2])\n            rotate([90, 0, 0])\n                cylinder(h=body_length + neck_length, d=0.5, $fn=8);\n    }\n}\n\nmodule sound_hole() {\n    // Circular sound hole on front\n    translate([0, 0, body_thickness/2 - 0.5])\n        cylinder(h=wall*2, d=8, $fn=30);\n}\n\nmodule bridge() {\n    // Small bridge near bottom\n    translate([0, -body_width/4, body_thickness/2 - 0.5])\n        cube([12, 3, 2], center=true);\n}\n\nmodule tuning_pegs() {\n    // Four tuning pegs on headstock\n    for(i = [0:3]) {\n        translate([body_length/2 + neck_length/2 + 5, \n                  -neck_width/2 + 2 + i*2, \n                  body_thickness/2 + neck_thickness/2 + 2])\n            rotate([90, 0, 90])\n                cylinder(h=8, d=3, $fn=8);\n    }\n}\n\n// Assemble the biwa\nunion() {\n    biwa_body();\n    biwa_neck();\n    frets();\n    bridge();\n    tuning_pegs();\n}\n\ndifference() {\n    union();\n    sound_hole();\n}\n\n// Add strings after boolean operations\nstrings();",
    "renders": true
  },
  {
    "musical_instrument": "sanshin",
    "openscad_code": "// Sanshin - Traditional Okinawan Shamisen\n// Medium complexity realistic model, 3D-printable\n// All dimensions in mm, overall length ~90 mm\n\n$fn = 32; // Smooth curves\n\n/* ---------- PARAMETERS ---------- */\nbody_len = 50;\nbody_w   = 30;\nbody_h   = 35;\n\nneck_len = 90 - body_len;\nneck_w   = 5.0;\nneck_h   = 4.0;\n\npeg_len  = 12;\npeg_d    = 4.0;\n\nstring_d = 0.6;\n\nwall_t   = 1.5; // wall thickness for printing\n\n/* ---------- MAIN ASSEMBLY ---------- */\nunion() {\n    /* Body (dou) */\n    translate([0,0,0])\n        body();\n\n    /* Neck (sao) */\n    translate([-neck_len/2 - body_len/2, 0, body_h/2 - neck_h/2])\n        rotate([0,0,0])\n            neck();\n\n    /* Head (tenjin) with pegs */\n    translate([-body_len/2 - neck_len - 8, 0, 0])\n        head();\n}\n\n/* ---------- BODY MODULE ---------- */\nmodule body() {\n    // Skin front\n    difference() {\n        // Main box\n        rounded_box([body_len, body_w, body_h], 6);\n        // Hollow cavity\n        translate([wall_t, wall_t, wall_t])\n            rounded_box([body_len - 2*wall_t, body_w - 2*wall_t, body_h - 2*wall_t], 4);\n    }\n\n    // Skin membrane (front plate)\n    translate([body_len/2 + wall_t/2, 0, 0])\n        cube([wall_t, body_w - 2*wall_t, body_h - 2*wall_t], center=true);\n\n    // Sound hole (simple slit)\n    translate([body_len/2 - 10, 0, 0])\n        cube([2, body_w/3, body_h/3], center=true);\n}\n\n/* ---------- NECK MODULE ---------- */\nmodule neck() {\n    // Main neck shaft\n    cube([neck_len, neck_w, neck_h], center=true);\n\n    // Position markers (dots on fingerboard)\n    for (i = [1:3:10]) {\n        translate([-body_len/2 - neck_len/2 + i*6, 0, neck_h/2 + 0.1])\n            cylinder(h=0.5, d=1.2, center=false);\n    }\n}\n\n/* ---------- HEAD MODULE ---------- */\nmodule head() {\n    // Tenjin block\n    cube([8, neck_w + 4, neck_h + 4], center=true);\n\n    // Three pegs\n    for (i = [-1, 0, 1]) {\n        translate([0, i*4, 0])\n            rotate([90,0,0])\n                peg();\n    }\n\n    // Nut\n    translate([4, 0, neck_h/2 + 0.1])\n        cube([2, neck_w + 2, 1], center=true);\n}\n\n/* ---------- PEG MODULE ---------- */\nmodule peg() {\n    // Peg shaft\n    cylinder(h=peg_len, d=peg_d, center=false);\n\n    // Peg grip disc\n    translate([0,0,peg_len])\n        cylinder(h=3, d=peg_d + 2, center=false);\n}\n\n/* ---------- HELPER MODULE ---------- */\nmodule rounded_box(size, r) {\n    // Rounded box for body shape\n    hull() {\n        for (dx = [-1,1], dy = [-1,1], dz = [-1,1]) {\n            translate([dx*(size[0]/2 - r), dy*(size[1]/2 - r), dz*(size[2]/2 - r)])\n                sphere(r=r);\n        }\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "sanxian",
    "openscad_code": "// 3D printable SANXIAN (Chinese 3-string lute) – medium complexity, realistic style\n// Total length ≈ 85 mm, suitable for FDM printing\n\n$fn = 36;               // global smoothing\n\n// ---------- PARAMETERS ----------\nbodyL = 45;             // resonator length\nbodyD = 30;             // max diameter\nneckL = 35;             // neck length\npegL = 8;               // tuning peg\npegD = 2;\nbridgeH = 2;\nstringD = 0.8;\nwall = 1.2;             // printable wall thickness\nsoundHoleD = 6;\n\n// ---------- MODULES ----------\n\nmodule resonator() {\n    // wooden body: two joined ellipsoids\n    translate([0,0,bodyL/2])\n    rotate([90,0,0])\n    difference() {\n        union() {\n            // front half\n            scale([1,1,0.6])\n            sphere(d = bodyD);\n            // back half\n            translate([0,0,-bodyD*0.2])\n            scale([1,1,0.4])\n            sphere(d = bodyD);\n        }\n        // hollow inside\n        translate([0,0,-bodyD/2])\n        scale([1-wall/bodyD,1-wall/bodyD,1-wall/bodyD])\n        sphere(d = bodyD - 2*wall);\n    }\n\n    // sound hole\n    translate([0,0,-bodyD*0.1])\n    rotate([90,0,0])\n    cylinder(d = soundHoleD, h = wall+0.1, center=true);\n}\n\nmodule neck() {\n    // tapering neck\n    hull() {\n        // joint\n        translate([0,0,bodyL-wall*2])\n        cylinder(d1 = bodyD/4, d2 = bodyD/6, h = wall);\n        // upper end\n        translate([0,0,bodyL+neckL-wall*2])\n        cylinder(d1 = bodyD/6, d2 = bodyD/10, h = wall);\n    }\n\n    // fingerboard flat top\n    translate([0,0,bodyL+neckL/2-wall])\n    cube([bodyD/4, neckL, wall], center=true);\n}\n\nmodule pegs() {\n    // three pegs on left side\n    for(i=[0:2]) {\n        rotate([0,0,-30+i*30])\n        translate([bodyD/7,0,bodyL+neckL*0.8-i*5])\n        rotate([0,90,0])\n        cylinder(d = pegD, h = pegL);\n    }\n}\n\nmodule bridge() {\n    // small wooden bridge near bottom\n    translate([0,0,bodyL*0.3])\n    cube([bodyD/3, stringD*2, bridgeH], center=true);\n}\n\nmodule strings() {\n    // three nylon strings from nut to bridge\n    for(i=[-1:1]) {\n        hull() {\n            translate([i*2,0,bodyL+neckL-pegD/2])   // nut\n            sphere(d = stringD);\n            translate([i*2,0,bodyL*0.3+bridgeH]) // bridge\n            sphere(d = stringD);\n        }\n    }\n}\n\n// ---------- ASSEMBLY ----------\nunion() {\n    resonator();\n    neck();\n    pegs();\n    bridge();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "yueqin",
    "openscad_code": "// OpenSCAD Yueqin (medium complexity, realistic style)\n// Overall scale: 70 mm diameter, 3D-printable without supports\n\n$fn = 36;\n\n// Overall size control\nscale_factor = 70 / 100;   // final diameter ~70 mm\noriginal_body_d = 100;\n\n// Main body\nmodule yueqin_body() {\n    // Sound bowl\n    difference() {\n        cylinder(h = 20 * scale_factor, d = original_body_d * scale_factor, center = true);\n        // Hollow cavity\n        translate([0, 0, -2 * scale_factor])\n            cylinder(h = 16 * scale_factor, d = (original_body_d - 4) * scale_factor, center = true);\n    }\n}\n\n// Sound hole rosette\nmodule sound_hole() {\n    rosette_d = 35 * scale_factor;\n    hole_d    = 25 * scale_factor;\n    thickness = 2 * scale_factor;\n    \n    difference() {\n        cylinder(h = thickness, d = rosette_d, center = true);\n        cylinder(h = thickness + 1, d = hole_d, center = true);\n    }\n}\n\n// Decorative ring on top\nmodule top_ring() {\n    outer_d = (original_body_d - 6) * scale_factor;\n    inner_d = (original_body_d - 8) * scale_factor;\n    height  = 3 * scale_factor;\n    \n    difference() {\n        cylinder(h = height, d = outer_d, center = true);\n        cylinder(h = height + 1, d = inner_d, center = true);\n    }\n}\n\n// Bridge\nmodule bridge() {\n    length = 20 * scale_factor;\n    width  = 4 * scale_factor;\n    height = 2 * scale_factor;\n    \n    translate([0, (original_body_d/2 - 10) * scale_factor, 10 * scale_factor])\n        cube([length, width, height], center = true);\n}\n\n// Frets (4 small round bars)\nmodule frets() {\n    fret_d = 1.2 * scale_factor;\n    for (i = [0:3]) {\n        angle = (i * 22.5) - 33.75;  // spread over 67.5 degrees\n        radius = 25 * scale_factor;\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            10 * scale_factor\n        ])\n        rotate([0, 0, angle])\n            cylinder(h = 15 * scale_factor, d = fret_d, center = true);\n    }\n}\n\n// Pegs (two on each side)\nmodule pegs() {\n    peg_len = 12 * scale_factor;\n    peg_d   = 3 * scale_factor;\n    \n    for (side = [-1, 1]) {\n        for (i = [0, 1]) {\n            y = ((original_body_d/2 + 5) * side) * scale_factor;\n            z = (5 + i * 6) * scale_factor;\n            translate([0, y, z])\n                rotate([90, 0, 0])\n                    cylinder(h = peg_len, d = peg_d);\n        }\n    }\n}\n\n// Strings (as thin cylinders)\nmodule strings() {\n    str_d = 0.6 * scale_factor;\n    bridge_y = (original_body_d/2 - 10) * scale_factor;\n    tail_y   = -(original_body_d/2 - 8) * scale_factor;\n\n    for (i = [-1, 0, 1, 2]) {\n        x = (i * 3) * scale_factor;\n        color(\"silver\")\n        hull() {\n            translate([x, bridge_y, 11 * scale_factor])\n                sphere(d = str_d);\n            translate([x, tail_y, 10 * scale_factor])\n                sphere(d = str_d);\n        }\n    }\n}\n\n// Assemble the yueqin\nunion() {\n    yueqin_body();\n    translate([0, 0, 10 * scale_factor]) {\n        top_ring();\n        sound_hole();\n    }\n    bridge();\n    frets();\n    pegs();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "ruan",
    "openscad_code": "// Ruan (Chinese moon-guitar) – medium-complexity, 3D-printable\n// Total length ≈ 100 mm, wall 2 mm, printable without support\n\n// PARAMETERS\nbody_d   = 60;       // soundbox diameter\nbody_h   = 30;       // soundbox depth\nneck_l   = 40;       // neck length\nneck_w   = 10;       // neck width\nneck_h   = 8;        // neck thickness\nhead_l   = 15;       // headstock length\npeg_d    = 3;        // tuning peg diameter\npeg_l    = 8;        // tuning peg length\nsoundhole_d = 8;     // central sound hole\nbridge_w   = 12;     // bridge width\nbridge_h   = 3;      // bridge height\nfret_n     = 12;     // number of frets\nfret_w     = 1;      // fret width\nfret_h     = 0.5;    // fret height\n\n// MODULES\nmodule soundbox() {\n    difference() {\n        // Main body shell\n        cylinder(h=body_h, d=body_d, $fn=60);\n        // Hollow cavity\n        translate([0,0,2])\n            cylinder(h=body_h, d=body_d-4, $fn=60);\n        // Sound hole\n        translate([0,0,-1])\n            cylinder(h=body_h+2, d=soundhole_d, $fn=32);\n    }\n}\n\nmodule bridge() {\n    translate([0, body_d/2-5, body_h])\n        cube([bridge_w, 4, bridge_h], center=true);\n}\n\nmodule neck() {\n    // Main neck\n    translate([0, 0, body_h/2+neck_h/2])\n        cube([neck_w, neck_l, neck_h], center=true);\n    // Headstock\n    translate([0, neck_l/2+head_l/2, neck_h/2])\n        cube([neck_w+4, head_l, neck_h+2], center=true);\n}\n\nmodule frets() {\n    for(i=[1:fret_n]) {\n        translate([0, i*neck_l/(fret_n+1), body_h+neck_h/2+fret_h/2])\n            cube([neck_w, fret_w, fret_h], center=true);\n    }\n}\n\nmodule pegs() {\n    // 4 pegs: 2 per side\n    for(side=[-1,1])\n        for(j=[0,1]) {\n            y = neck_l + 3 + j*6;\n            x = side*(neck_w/2+2);\n            rotate([90,0,90*side])\n                translate([x, y, body_h+neck_h])\n                    cylinder(h=peg_l, d=peg_d, $fn=16);\n        }\n}\n\n// FINAL ASSEMBLY\nunion() {\n    soundbox();\n    bridge();\n    neck();\n    frets();\n    pegs();\n}",
    "renders": true
  },
  {
    "musical_instrument": "liuqin",
    "openscad_code": "// Liuqin - Chinese pear-shaped lute, 4 strings\n// Medium complexity, printable at ~80 mm total length\n\n$fa = 2;\n$fs = 0.5;\n\nmodule body_shell(h=35, r=28, neck_w=8) {\n    // Main pear-shaped body\n    hull() {\n        // Upper bout\n        translate([0, 0, h*0.9])\n            scale([0.7, 0.45, 1])\n            sphere(r=r*0.7);\n        \n        // Lower bout\n        translate([0, 0, h*0.3])\n            scale([1, 0.7, 1])\n            sphere(r=r);\n    }\n    \n    // Neck transition block\n    translate([0, 0, h])\n        hull() {\n            cube([neck_w*1.6, neck_w, h*0.2], center=true);\n            translate([0, 0, h*0.3])\n                cube([neck_w*1.2, neck_w*0.8, h*0.1], center=true);\n        }\n}\n\nmodule sound_hole(d=12, h=2) {\n    // Rosette-style sound hole\n    difference() {\n        cylinder(h=h, d=d+3);\n        cylinder(h=h+0.1, d=d);\n    }\n    \n    // Simple concentric rings\n    for (i=[1:2:5]) {\n        translate([0, 0, -0.1])\n            cylinder(h=h+0.2, d1=d+3-i*0.5, d2=d+3-i*0.5);\n    }\n}\n\nmodule neck(len=45, w=8, h=6) {\n    // Tapered neck\n    hull() {\n        // Headstock end\n        translate([0, 0, len])\n            cube([w, h*0.7, w*0.6], center=true);\n        \n        // Body end\n        translate([0, 0, 0])\n            cube([w*1.2, h, w*1.2], center=true);\n    }\n    \n    // Fingerboard overlay\n    translate([0, 0, len*0.5])\n        cube([w*1.1, h*0.3, len*1.05], center=true);\n}\n\nmodule headstock(w=8, len=15) {\n    // Pegbox with slight scroll\n    hull() {\n        translate([0, 0, 0])\n            cube([w*1.2, w*0.8, w*0.6], center=true);\n        translate([0, w*0.1, len])\n            cube([w*0.8, w*0.5, w*0.4], center=true);\n    }\n    \n    // Tuning pegs (4)\n    for (i=[0:3]) {\n        peg_pos = -len*0.7 + i*len*0.4;\n        rotate([90, 0, 0])\n            translate([w*0.5, peg_pos, w*0.3])\n                cylinder(h=4, d1=2, d2=1.5);\n        mirror([1, 0, 0])\n            rotate([90, 0, 0])\n            translate([w*0.5, peg_pos, w*0.3])\n                cylinder(h=4, d1=2, d2=1.5);\n    }\n}\n\nmodule bridge(pos=[0, -15, 2], w=12, h=3) {\n    // Floating bridge\n    hull() {\n        cube([w, h*0.5, h], center=true);\n        translate([0, 0, h])\n            cube([w*0.8, h*0.3, h*0.3], center=true);\n    }\n    \n    // String notches\n    for (i=[-1.5:1:1.5]) {\n        translate([i*w/4, 0, h+0.1])\n            cube([0.5, 0.5, 0.5], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    translate([0, 0, 0]) {\n        difference() {\n            body_shell();\n            // Hollow interior\n            translate([0, 0, 5])\n                scale([0.85, 0.75, 0.9])\n                body_shell();\n        }\n        \n        // Sound hole\n        translate([0, 0, 32])\n            rotate([90, 0, 0])\n            sound_hole();\n    }\n    \n    // Neck\n    translate([0, 0, 35])\n        neck();\n    \n    // Headstock\n    translate([0, 0, 80])\n        headstock();\n    \n    // Bridge\n    bridge();\n    \n    // Strings (simplified as cylinders)\n    for (i=[-1.5:1:1.5]) {\n        translate([i*2, 0, 85])\n            cylinder(h=60, d=0.5);\n    }\n    \n    // Tailpiece\n    translate([0, 15, 2])\n        hull() {\n            cube([12, 3, 1], center=true);\n            translate([0, 3, 0])\n                cube([8, 2, 0.5], center=true);\n        }\n}",
    "renders": true
  },
  {
    "musical_instrument": "pipa",
    "openscad_code": "// Pipa - Chinese lute model\n// Medium complexity realistic style\n\n$fa = 2;\n$fs = 0.5;\n\nmodule pipa_body() {\n    // Main pear-shaped body\n    difference() {\n        // Outer shell\n        scale([1, 1.3, 0.4])\n        sphere(r=25);\n        \n        // Hollow center\n        scale([0.85, 1.15, 0.3])\n        sphere(r=25);\n    }\n    \n    // Sound hole\n    translate([0, 0, 9.9])\n    cylinder(h=0.5, r=10);\n    \n    // Sound hole decoration\n    for(i=[1:8]) {\n        rotate([0, 0, i*45])\n        translate([5, 0, 9.8])\n        cube([10, 1, 0.5], center=true);\n    }\n}\n\nmodule pipa_neck() {\n    // Neck\n    translate([0, 25, 8])\n    rotate([90, 0, 0])\n    scale([1, 1, 1.2])\n    cylinder(h=35, r1=6, r2=4);\n    \n    // Headstock\n    translate([0, 25, 8])\n    rotate([90, 0, 0])\n    translate([0, 0, 38])\n    scale([0.8, 0.3, 1.5])\n    cube([15, 10, 5], center=true);\n}\n\nmodule pipa_frets() {\n    // Frets along neck\n    for(i=[1:10]) {\n        translate([0, 25 + i*2.5, 8 + i*1.5])\n        rotate([90, 0, 0])\n        scale([1.2, 1, 0.1])\n        cylinder(h=12, r=4.5);\n    }\n}\n\nmodule pipa_strings() {\n    // String anchor at bottom\n    translate([0, -32, 8])\n    cube([2, 4, 1], center=true);\n    \n    // Strings\n    for(i=[1:4]) {\n        // From bridge to headstock\n        translate([-2 + i*1.3, -32, 8.5])\n        rotate([0, 0, atan2(60, 50)])\n        cylinder(h=65, r=0.3);\n    }\n    \n    // Tuning pegs\n    for(i=[1:4]) {\n        translate([-5 + i*3.3, 25, 46])\n        rotate([90, 0, 0])\n        cylinder(h=5, r=1.5);\n    }\n}\n\nmodule pipa_bridge() {\n    // Bridge\n    translate([0, -30, 9])\n    cube([15, 3, 2], center=true);\n    \n    // Bridge decoration\n    translate([0, -30, 11])\n    cylinder(h=1, r=8);\n}\n\n// Assembly\nunion() {\n    pipa_body();\n    pipa_neck();\n    pipa_frets();\n    pipa_strings();\n    pipa_bridge();\n}",
    "renders": true
  },
  {
    "musical_instrument": "guqin",
    "openscad_code": "// Guqin for 3D printing – realistic, medium complexity\n// Overall length ≈ 90 mm, width 20 mm, thickness 7 mm\n\n$fn = 32;  // smooth curves\n\nmodule guqin() {\n    // Main body – elongated ellipsoid with hollow cavity\n    difference() {\n        union() {\n            // Top plate\n            scale([1, 0.22, 0.07])\n                sphere(d = 90);\n\n            // Bottom plate – slightly flatter\n            translate([0, 0, -2.5])\n                scale([1, 0.22, 0.05])\n                    sphere(d = 90);\n        }\n\n        // Hollow cavity\n        scale([0.9, 0.18, 0.06])\n            sphere(d = 90);\n\n        // Sound holes – long rectangle\n        translate([30, -1.5, 0])\n            rotate([0, 0, 5])\n                cube([25, 2, 4], center = true);\n    }\n\n    // Nut (Yueshan) – raised bridge at left end\n    translate([-38, 0, 2.5])\n        cube([3, 18, 3], center = true);\n\n    // Tail (Longyin) – tapered end\n    union() {\n        translate([38, 0, 1])\n            scale([0.15, 0.1, 1])\n                sphere(d = 20);\n        translate([42, 0, 0.5])\n            cube([6, 8, 1], center = true);\n    }\n\n    // Seven strings – thin cylinders\n    for (i = [0:6]) {\n        y = -7.5 + i * 2.5;\n        translate([-40, y, 3.2])\n            cylinder(h = 82, d = 0.4, $fn = 8);\n    }\n\n    // 13 hui markers – small inlaid dots\n    for (i = [0:12]) {\n        pos = [-30 + i * 5.2, 0, 3.2];\n        translate([pos[0], pos[1], pos[2]])\n            cylinder(h = 0.4, d = 1.2, $fn = 16);\n    }\n\n    // Feet – two short legs for clearance\n    foot_pos = [[-15, 0], [15, 0]];\n    for (p = foot_pos) {\n        translate([p[0], p[1], -2.5])\n            rotate([90, 0, 0])\n                cylinder(h = 3, d = 4, $fn = 12);\n    }\n}\n\nguqin();",
    "renders": true
  },
  {
    "musical_instrument": "se",
    "openscad_code": "// OpenSCAD realistic medium-complexity 3D-printable SE (Space Elevator anchor station)\n// Overall footprint ≈ 70 mm, safe for FDM printing, all angles ≤ 45°\n\n$fn=50;          // smooth curves\nbase_w = 70;\nbase_h = 8;\ncore_h = 35;\ncore_r = 12;\ntether_r = 3;\nleg_ang = 30;    // self-supporting angle\n\n// Helper: radial array\nmodule radial_array(n, r){\n    for(a=[0:360/n:359])\n        rotate([0,0,a])\n            translate([r,0,0]) children();\n}\n\n// Base platform with slight chamfer\nmodule base_platform(){\n    difference(){\n        union(){\n            // main plate\n            cube([base_w,base_w,base_h], center=true);\n            // chamfer\n            scale([1,1,0.7])\n                cylinder(h=base_h*1.5, r1=base_w/2, r2=base_w/2-2, center=true);\n        }\n        // central hole for tether\n        cylinder(h=base_h+2, r=tether_r+1, center=true);\n    }\n}\n\n// Central core tower\nmodule core_tower(){\n    translate([0,0,base_h/2+core_h/2])\n        difference(){\n            cylinder(h=core_h, r=core_r, center=true);\n            // internal bore\n            cylinder(h=core_h+2, r=tether_r+0.5, center=true);\n        }\n}\n\n// Stabilizer legs\nmodule legs(){\n    radial_array(4, base_w*0.45){\n        rotate([0, -leg_ang, 0])\n            cylinder(h=base_w*0.38, r=core_r/2, center=false);\n    }\n}\n\n// Reel housing on top\nmodule reel_housing(){\n    translate([0,0,base_h+core_h+6])\n    difference(){\n        union(){\n            cylinder(h=12, r=core_r*1.2, center=true);\n            translate([0,0,6])\n                cylinder(h=2, r=core_r*1.5, center=true);\n        }\n        // tether passage\n        cylinder(h=15, r=tether_r+1.2, center=true);\n    }\n}\n\n// Detail: antenna mast\nmodule antenna(){\n    translate([core_r*0.8,0,base_h+core_h+12+7])\n    union(){\n        cylinder(h=20, r=core_r/4, center=true);\n        translate([0,0,10])\n            sphere(d=core_r/2);\n    }\n}\n\n// Detail: solar panels\nmodule solar_panels(){\n    panel_w = base_w*0.35;\n    panel_t = 2;\n    radial_array(4, base_w*0.33){\n        rotate([0,90,0])\n            translate([0,0,base_h+core_h/2])\n                cube([panel_w, panel_t, panel_w*0.6], center=true);\n    }\n}\n\n// Main assembly\nunion(){\n    base_platform();\n    core_tower();\n    legs();\n    reel_housing();\n    antenna();\n    solar_panels();\n}",
    "renders": true
  },
  {
    "musical_instrument": "zheng",
    "openscad_code": "// OpenSCAD Zheng (Chinese Guzheng) – medium-complexity realistic printable model\n// Overall bounding box ≈ 100 mm × 30 mm × 25 mm\n\n$fn = 32;   // smooth cylinders & spheres\nwall = 1.2; // 3D-print friendly wall thickness\n\nmodule zheng() {\n    // ---------- wooden resonating box ----------\n    difference() {\n        // main box body\n        translate([0, 0, 10])\n            cube([90, 28, 15], center = true);\n\n        // large sound hole on underside\n        translate([0, 0, 2.5])\n            cylinder(h = 20, r = 9, center = true);\n    }\n\n    // ---------- curved top plate ----------\n    hull() {\n        translate([-40, 0, 18]) sphere(r = 2);\n        translate([ 40, 0, 18]) sphere(r = 2);\n    }\n\n    // ---------- 21 moveable bridges ----------\n    for (i = [0:20]) {\n        x = -42 + i * 4.2;\n        translate([x, 0, 18.5])\n            rotate([0, 90, 0])\n                cylinder(h = 3, r = 1);\n    }\n\n    // ---------- fixed nut at head ----------\n    translate([-45, 0, 18])\n        cube([2, 28, 3], center = true);\n\n    // ---------- fixed tail bridge ----------\n    translate([45, 0, 18])\n        cube([2, 28, 3], center = true);\n\n    // ---------- tuning pegs ----------\n    for (i = [0:8]) {\n        // right side pegs\n        translate([42 + i * 2.5, 16, 20])\n            rotate([90, 0, 0])\n                peg();\n        // left side pegs\n        translate([42 + i * 2.5, -16, 20])\n            rotate([90, 0, 0])\n                mirror([0, 1, 0])\n                    peg();\n    }\n\n    // ---------- decorative sound-hole rosette ----------\n    difference() {\n        cylinder(h = 1.5, r = 12);\n        cylinder(h = 2, r = 10); // hollow center\n    }\n\n    // ---------- strings (simple cylinders) ----------\n    for (i = [0:20]) {\n        x = -42 + i * 4.2;\n        translate([x, 0, 19])\n            cube([0.6, 0.6, 84], center = true);\n    }\n}\n\nmodule peg() {\n    // tuning peg cylinder with thick knob\n    cylinder(h = 15, r = 2);\n    translate([0, 0, 15])\n        sphere(r = 3);\n}\n\nzheng();",
    "renders": true
  },
  {
    "musical_instrument": "gayageum",
    "openscad_code": "// Gayageum - Korean 12-string zither (medium complexity, 3D-printable)\n\n$fn = 32;\n\n// overall dimensions (mm)\nbody_l = 85;\nbody_w = 25;\nbody_h = 8;\nneck_l = 45;\nneck_w = 5;\nneck_h = 4;\nbridge_h = 2.5;\nbridge_span = 20;\nstring_d = 0.6;\nwall_t = 1.2;\n\n// main resonator box\nmodule soundbox() {\n    difference() {\n        // outer shell\n        minkowski() {\n            cube([body_l, body_w, body_h], center=true);\n            sphere(wall_t);\n        }\n        // inner cavity\n        translate([0, 0, wall_t/2])\n            scale([0.85, 0.85, 0.8])\n                cube([body_l, body_w, body_h], center=true);\n        // sound hole\n        translate([body_l/2 - 8, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=body_w, d=6, center=true);\n    }\n}\n\n// tail block with string anchors\nmodule tailpiece() {\n    for (i = [-5.5:1:5.5]) {\n        translate([body_l/2 - 2, i*2.2, body_h/2 - 1])\n            rotate([90, 0, 0])\n                cylinder(h=2, d=1.2);\n    }\n}\n\n// movable bridges (12 pieces)\nmodule bridges() {\n    for (i = [-5.5:1:5.5]) {\n        translate([body_l/2 - 12, i*2.2, body_h/2 + bridge_h/2])\n            union() {\n                cube([bridge_span, 1.2, bridge_h], center=true);\n                translate([0, 0, bridge_h/2 - 0.4])\n                    cube([bridge_span, 1.2, 0.8], center=true);\n            }\n    }\n}\n\n// neck with nut\nmodule neck() {\n    translate([-(body_l/2 + neck_l/2 - 5), 0, 0])\n        union() {\n            cube([neck_l, neck_w, neck_h], center=true);\n            // nut\n            translate([neck_l/2 - 1, 0, neck_h/2])\n                cube([1.5, neck_w + 1, 1], center=true);\n        }\n}\n\n// 12 strings\nmodule strings() {\n    for (i = [-5.5:1:5.5]) {\n        hull() {\n            // tail anchor\n            translate([body_l/2 - 2, i*2.2, body_h/2 - 1])\n                sphere(string_d/2);\n            // over bridge\n            translate([body_l/2 - 12, i*2.2, body_h/2 + bridge_h])\n                sphere(string_d/2);\n            // nut\n            translate([-(body_l/2 + neck_l - 5), i*2.2, neck_h/2])\n                sphere(string_d/2);\n        }\n    }\n}\n\n// end cap\nmodule endcap() {\n    translate([-(body_l/2 + neck_l - 2), 0, 0])\n        cube([6, neck_w + 2, 3], center=true);\n}\n\n// assemble\nsoundbox();\ntailpiece();\nbridges();\nneck();\nstrings();\nendcap();",
    "renders": true
  },
  {
    "musical_instrument": "geomungo",
    "openscad_code": "// Geomungo - Korean traditional zither\n// Medium complexity realistic model\n\n$fn = 32;\n\n// Overall dimensions\nbody_length = 85;\nbody_width = 20;\nbody_height = 8;\nneck_length = 40;\nneck_width = 7;\nhead_width = 12;\nhead_length = 15;\n\nmodule geomungo() {\n    // Main body - hollow resonator box\n    difference() {\n        // Outer body\n        union() {\n            // Main body\n            translate([0, 0, body_height/2])\n                cube([body_length, body_width, body_height], center=true);\n            \n            // Rounded edges\n            translate([body_length/2 - 2, 0, body_height/2])\n                cylinder(h=body_height, r=2, center=true);\n            translate([-body_length/2 + 2, 0, body_height/2])\n                cylinder(h=body_height, r=2, center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, body_height/2 - 1])\n            cube([body_length - 4, body_width - 4, body_height - 1], center=true);\n    }\n    \n    // Sound holes - stylized yin-yang\n    translate([body_length/4, 0, body_height - 0.5])\n        cylinder(h=1, r=3);\n    translate([-body_length/4, 0, body_height - 0.5])\n        cylinder(h=1, r=3);\n    \n    // Neck\n    translate([body_length/2 + neck_length/2, 0, neck_width/2])\n        cube([neck_length, neck_width, neck_width], center=true);\n    \n    // Headstock\n    translate([body_length/2 + neck_length + head_length/2, 0, head_width/2])\n        cube([head_length, head_width, head_width], center=true);\n    \n    // Bridge\n    translate([-body_length/4, 0, body_height + 1])\n        cube([2, body_width - 2, 2], center=true);\n    \n    // Frets - 6 movable frets\n    for(i = [1:6]) {\n        translate([body_length/2 - 5 - i*10, 0, body_height - 0.5])\n            cube([0.5, body_width - 2, 1], center=true);\n    }\n    \n    // String anchors at tail\n    for(i = [-2:2]) {\n        translate([-body_length/2 + 2, i*2, body_height - 0.5])\n            cylinder(h=1.5, r=0.5);\n    }\n    \n    // Tuning pegs\n    for(i = [-2:2]) {\n        // Pegs on headstock\n        translate([body_length/2 + neck_length + head_length - 3, i*2 + 1, head_width/2 + 2])\n            rotate([90, 0, 0])\n                cylinder(h=3, r=0.8);\n        \n        // Peg holes\n        translate([body_length/2 + neck_length + head_length - 3, i*2 + 1, head_width/2 + 0.5])\n            rotate([90, 0, 0])\n                cylinder(h=head_width, r=0.8);\n    }\n    \n    // Strings\n    for(i = [-2:2]) {\n        hull() {\n            // String from tail to bridge\n            translate([-body_length/2 + 2, i*2, body_height - 0.3])\n                cylinder(h=0.3, r=0.2);\n            translate([-body_length/4, i*2, body_height + 2.5])\n                cylinder(h=0.3, r=0.2);\n            \n            // String from bridge to headstock\n            translate([-body_length/4, i*2, body_height + 2.5])\n                cylinder(h=0.3, r=0.2);\n            translate([body_length/2 + neck_length + head_length - 3, i*2 + 1, head_width/2 + 0.5])\n                cylinder(h=0.3, r=0.2);\n        }\n    }\n    \n    // Decorative edge binding\n    translate([0, 0, body_height/2])\n        difference() {\n            cube([body_length + 1, body_width + 1, body_height + 1], center=true);\n            cube([body_length - 1, body_width - 1, body_height + 2], center=true);\n        }\n}\n\n// Render the geomungo\ngeomungo();",
    "renders": true
  },
  {
    "musical_instrument": "ajaeng",
    "openscad_code": "// Ajaeng - Korean bowed zither\n// Overall length ~90mm, width ~20mm, height ~15mm\n\n$fn=50;\n\nmodule ajaeng() {\n    // Main sound box (resonator)\n    difference() {\n        // Hollow body with rounded top\n        union() {\n            translate([0,0,5]) cube([80,18,8], center=true);\n            translate([0,0,9]) cube([78,16,0.5], center=true);\n            hull() {\n                translate([-39, -9, 5]) cylinder(h=8, d=4, center=true);\n                translate([39, -9, 5]) cylinder(h=8, d=4, center=true);\n                translate([-39, 9, 5]) cylinder(h=8, d=4, center=true);\n                translate([39, 9, 5]) cylinder(h=8, d=4, center=true);\n            }\n        }\n        \n        // Sound holes\n        for(x=[-30,-15,0,15,30])\n            translate([x,0,9]) cylinder(h=3, d=4, center=true);\n        \n        // Hollow interior\n        translate([0,0,5]) cube([76,14,6], center=true);\n    }\n    \n    // Bridge - raised platform for strings\n    translate([0,0,10]) cube([60,4,2], center=true);\n    \n    // Nut at top\n    translate([-38,0,10]) cube([2,18,2], center=true);\n    \n    // Tailpiece at bottom\n    translate([38,0,9]) cube([6,16,4], center=true);\n    \n    // Strings (7 strings typical)\n    for(i=[-3:3]) {\n        y = i * 2.2;\n        // From nut to bridge\n        translate([-37,y,11]) cube([73,0.4,0.4], center=false);\n        // From bridge to tailpiece\n        translate([36,y,11]) cube([2,0.4,0.4], center=false);\n    }\n    \n    // Tuning pegs\n    for(i=[-3:3]) {\n        y = i * 2.2;\n        translate([40,y,11.5]) rotate([0,90,0]) cylinder(h=4, d=2, center=true);\n    }\n    \n    // Bow - separate piece\n    translate([0,-25,5]) rotate([0,0,-20]) bow();\n}\n\nmodule bow() {\n    // Bow stick\n    difference() {\n        hull() {\n            translate([-25,0,0]) sphere(d=2);\n            translate([25,0,0]) sphere(d=2);\n        }\n        translate([0,0,-1]) cube([50,3,4], center=true);\n    }\n    \n    // Bow hair\n    translate([0,0.5,-0.5]) cube([48,0.3,0.3], center=true);\n}\n\najaeng();",
    "renders": true
  },
  {
    "musical_instrument": "haegeum",
    "openscad_code": "// Haegeum - Korean two-string fiddle\n// Medium complexity, realistic style\n\n// Overall scale factor for 3D printing\nSCALE = 0.8;\n\nmodule haegeum() {\n    // Pegbox with tuning pegs\n    pegbox();\n    \n    // Neck\n    neck();\n    \n    // Body (soundbox)\n    body();\n    \n    // Bridge\n    bridge();\n    \n    // Tailpiece\n    tailpiece();\n    \n    // Strings (simplified as thin cylinders)\n    strings();\n    \n    // Bow (separate part)\n    bow();\n}\n\nmodule pegbox() {\n    translate([0, 0, 140 * SCALE]) {\n        difference() {\n            // Main pegbox\n            cube([20 * SCALE, 30 * SCALE, 40 * SCALE], center = true);\n            \n            // Peg holes\n            for (i = [-1, 1]) {\n                translate([i * 8 * SCALE, 12 * SCALE, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = 30 * SCALE, r = 2 * SCALE, $fn = 8);\n                \n                translate([i * 8 * SCALE, -12 * SCALE, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = 30 * SCALE, r = 2 * SCALE, $fn = 8);\n            }\n        }\n        \n        // Tuning pegs\n        for (i = [-1, 1]) {\n            translate([i * 8 * SCALE, 20 * SCALE, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 25 * SCALE, r1 = 2 * SCALE, r2 = 4 * SCALE, $fn = 8);\n            \n            translate([i * 8 * SCALE, -20 * SCALE, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 25 * SCALE, r1 = 2 * SCALE, r2 = 4 * SCALE, $fn = 8);\n        }\n    }\n}\n\nmodule neck() {\n    translate([0, 0, 100 * SCALE]) {\n        difference() {\n            // Main neck\n            cube([12 * SCALE, 20 * SCALE, 80 * SCALE], center = true);\n            \n            // Fingerboard\n            translate([0, 0, 35 * SCALE])\n                cube([10 * SCALE, 18 * SCALE, 3 * SCALE], center = true);\n        }\n    }\n}\n\nmodule body() {\n    // Soundbox\n    difference() {\n        // Main body\n        scale([1, 0.8, 1])\n            cylinder(h = 60 * SCALE, r1 = 35 * SCALE, r2 = 30 * SCALE, $fn = 64);\n        \n        // Sound holes\n        translate([0, -10 * SCALE, 30 * SCALE])\n            scale([1, 0.5, 1])\n                cylinder(h = 5 * SCALE, r = 8 * SCALE, $fn = 32);\n        \n        translate([0, 10 * SCALE, 30 * SCALE])\n            scale([1, 0.5, 1])\n                cylinder(h = 5 * SCALE, r = 8 * SCALE, $fn = 32);\n        \n        // Top opening\n        translate([0, 0, 60 * SCALE])\n            cylinder(h = 5 * SCALE, r = 25 * SCALE, $fn = 32);\n    }\n    \n    // Top plate\n    translate([0, 0, 60 * SCALE])\n        difference() {\n            cylinder(h = 3 * SCALE, r = 32 * SCALE, $fn = 32);\n            translate([0, 0, -1])\n                cylinder(h = 5 * SCALE, r = 25 * SCALE, $fn = 32);\n        }\n}\n\nmodule bridge() {\n    translate([0, 0, 63 * SCALE]) {\n        // Bridge base\n        cube([20 * SCALE, 8 * SCALE, 3 * SCALE], center = true);\n        \n        // Bridge top\n        translate([0, 0, 3 * SCALE])\n            cube([18 * SCALE, 6 * SCALE, 2 * SCALE], center = true);\n        \n        // String notches\n        translate([-6 * SCALE, 0, 5 * SCALE])\n            cube([2 * SCALE, 8 * SCALE, 1 * SCALE], center = true);\n        translate([6 * SCALE, 0, 5 * SCALE])\n            cube([2 * SCALE, 8 * SCALE, 1 * SCALE], center = true);\n    }\n}\n\nmodule tailpiece() {\n    translate([0, 0, 5 * SCALE]) {\n        // Tailpiece body\n        difference() {\n            cube([25 * SCALE, 15 * SCALE, 4 * SCALE], center = true);\n            translate([0, 0, -2])\n                cylinder(h = 5 * SCALE, r = 3 * SCALE, $fn = 16);\n        }\n        \n        // String attachment\n        translate([-7 * SCALE, 0, 2 * SCALE])\n            cylinder(h = 3 * SCALE, r = 1 * SCALE, $fn = 8);\n        translate([7 * SCALE, 0, 2 * SCALE])\n            cylinder(h = 3 * SCALE, r = 1 * SCALE, $fn = 8);\n    }\n}\n\nmodule strings() {\n    for (i = [-1, 1]) {\n        // String from pegbox to tailpiece\n        translate([i * 6 * SCALE, 0, 0])\n            cylinder(h = 140 * SCALE, r = 0.5 * SCALE, $fn = 8);\n    }\n}\n\nmodule bow() {\n    translate([50 * SCALE, 30 * SCALE, 0]) {\n        rotate([0, 0, 45]) {\n            // Bow stick\n            difference() {\n                cylinder(h = 120 * SCALE, r = 2 * SCALE, $fn = 16);\n                translate([0, 0, 110 * SCALE])\n                    sphere(r = 2 * SCALE, $fn = 16);\n            }\n            \n            // Bow frog\n            translate([0, 0, 115 * SCALE])\n                cube([8 * SCALE, 6 * SCALE, 15 * SCALE], center = true);\n            \n            // Bow hair (simplified)\n            translate([0, 0, 110 * SCALE])\n                cylinder(h = 80 * SCALE, r = 0.3 * SCALE, $fn = 8);\n        }\n    }\n}\n\n// Render the complete haegeum\nhaegeum();",
    "renders": true
  },
  {
    "musical_instrument": "danbau",
    "openscad_code": "// Vietnamese Dan Bau - Monochord Zither\n// Medium complexity, realistic style, 3D printable\n\n$fn = 32;\n\n// Overall dimensions\nbody_len = 90;\nbody_w   = 35;\nbody_h   = 12;\n\n// Wall thickness for printing\nwall = 1.5;\n\nmodule main_body() {\n    // Hollow resonator box\n    difference() {\n        // Outer shell\n        cube([body_len, body_w, body_h]);\n\n        // Hollow cavity\n        translate([wall, wall, wall])\n            cube([body_len-2*wall, body_w-2*wall, body_h-wall]);\n    }\n}\n\nmodule curved_bottom() {\n    // Rounded belly for better acoustics\n    translate([body_len/2, body_w/2, 0])\n        rotate([90,0,0])\n            cylinder(h = body_len, r = body_w/1.8, center=true);\n}\n\nmodule sound_hole() {\n    // Circular sound hole in top\n    translate([body_len*0.75, body_w/2, body_h])\n        rotate([0,180,0])\n            cylinder(h = wall+0.1, r = 8);\n}\n\nmodule bridge() {\n    // Adjustable wooden bridge\n    translate([body_len*0.6, body_w/2-2, body_h-wall])\n        cube([3, 4, 5]);\n}\n\nmodule tuning_peg() {\n    // Simple peg for wire tension\n    cylinder(h = 15, r = 2);\n}\n\nmodule peg_box() {\n    // Peg assembly at front\n    translate([body_len-5, body_w/2, body_h-wall-1])\n        rotate([90,0,0])\n            tuning_peg();\n}\n\nmodule string_anchor() {\n    // Tailpiece anchor\n    translate([5, body_w/2, body_h-wall-1])\n        cube([2, 4, 4]);\n}\n\nmodule flexible_arm() {\n    // Flexible rod for pitch bending\n    translate([-5, body_w/2-2, body_h-3])\n        rotate([0,0,90])\n            cylinder(h = 20, r = 1.5);\n}\n\nmodule handle() {\n    // Wooden handle for pitch bending\n    translate([-15, body_w/2-3, body_h-6])\n        cube([10, 6, 8]);\n}\n\nmodule wire() {\n    // Single metal string\n    translate([7, body_w/2, body_h-wall-0.2])\n        rotate([90,0,0])\n            cylinder(h = body_len-15, r = 0.5);\n}\n\nmodule decorative_rosette() {\n    // Simple rosette around sound hole\n    translate([body_len*0.75, body_w/2, body_h-wall-0.1])\n        rotate([0,180,0])\n            difference() {\n                cylinder(h = wall+0.2, r = 12);\n                cylinder(h = wall+0.3, r = 8.5);\n            }\n}\n\n// Assembly\nunion() {\n    // Main resonator\n    difference() {\n        main_body();\n        curved_bottom();\n        sound_hole();\n    }\n    \n    // Hardware\n    bridge();\n    peg_box();\n    string_anchor();\n    flexible_arm();\n    handle();\n    wire();\n    decorative_rosette();\n}",
    "renders": true
  },
  {
    "musical_instrument": "dantranh",
    "openscad_code": "// Dan Tranh - Vietnamese 16-string zither\n// Medium complexity realistic model for 3D printing\n\n$fn = 32;\n\n// Overall dimensions\nbody_length = 95;\nbody_width = 20;\nbody_height = 8;\nneck_length = 65;\nneck_width = 8;\nneck_height = 4;\nhead_length = 15;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\nmodule body() {\n    // Main body - hollow with rounded edges\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-body_length/2, -body_width/2, 0])\n                cube([body_length, body_width, body_height]);\n            translate([-body_length/2+5, -body_width/2+2, 0])\n                cube([body_length-10, body_width-4, body_height+1]);\n        }\n        \n        // Hollow cavity\n        translate([-body_length/2+wall, -body_width/2+wall, wall])\n            cube([body_length-2*wall, body_width-2*wall, body_height-wall]);\n        \n        // Sound holes\n        for(i = [-2:2]) {\n            translate([i*15, 0, body_height-1])\n                cylinder(h=2, d=4);\n        }\n    }\n    \n    // Decorative edge trim\n    translate([-body_length/2, -body_width/2-0.5, 0])\n        cube([body_length, 1, body_height]);\n    translate([-body_length/2, body_width/2-0.5, 0])\n        cube([body_length, 1, body_height]);\n}\n\nmodule neck() {\n    // Tapered neck\n    linear_extrude(height=neck_height)\n        polygon(points=[\n            [-neck_length/2, -neck_width/2],\n            [neck_length/2, -neck_width/3],\n            [neck_length/2, neck_width/3],\n            [-neck_length/2, neck_width/2]\n        ]);\n    \n    // Fingerboard surface\n    translate([-neck_length/2, -neck_width/2-0.2, neck_height-0.5])\n        cube([neck_length, neck_width+0.4, 0.5]);\n}\n\nmodule headstock() {\n    // Tuning peg head\n    translate([neck_length/2+head_length/2, 0, neck_height/2])\n        cube([head_length, neck_width*1.5, neck_height*1.5], center=true);\n    \n    // Tuning pegs\n    for(i = [0:7]) {\n        // Right side pegs\n        translate([neck_length/2+head_length-3, \n                  neck_width/2+3, \n                  neck_height/2+i*2-7])\n            rotate([90, 0, 0])\n                cylinder(h=8, d=2);\n        \n        // Left side pegs\n        translate([neck_length/2+head_length-3, \n                  -neck_width/2-3, \n                  neck_height/2+i*2-7])\n            rotate([90, 0, 0])\n                cylinder(h=8, d=2);\n    }\n}\n\nmodule bridge() {\n    // Main bridge\n    translate([0, 0, body_height])\n        cylinder(h=3, d=2);\n    \n    // Bridge top\n    translate([0, 0, body_height+3])\n        cube([body_length/3, 1, 1], center=true);\n}\n\nmodule strings() {\n    // 16 strings\n    for(i = [0:15]) {\n        x_pos = -body_length/2 + 5 + i*(body_length-10)/15;\n        \n        // String from headstock to bridge\n        translate([x_pos, -body_width/2-1, body_height+1.5])\n            cube([0.5, body_width+2, 0.5]);\n    }\n}\n\nmodule support_legs() {\n    // Four small support legs for 3D printing stability\n    leg_positions = [\n        [-body_length/2+5, -body_width/2+3],\n        [-body_length/2+5, body_width/2-3],\n        [body_length/2-5, -body_width/2+3],\n        [body_length/2-5, body_width/2-3]\n    ];\n    \n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], -2])\n            cylinder(h=2, d=3);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    body();\n    \n    translate([0, 0, body_height])\n        neck();\n    \n    translate([0, 0, body_height+neck_height])\n        headstock();\n    \n    bridge();\n    \n    strings();\n    \n    // 3D printing support\n    support_legs();\n}",
    "renders": true
  },
  {
    "musical_instrument": "tymba",
    "openscad_code": "// Tymba (Timbale) Drum - Realistic Medium Complexity\n// 3D printable tymba with functional features\n\n// Overall dimensions\ntymba_diameter = 80;  // mm\ntymba_height = 45;\nwall_thickness = 2.5;\nrim_thickness = 4;\n\n// Module for drum shell\nmodule drum_shell() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h=tymba_height, r=tymba_diameter/2, $fn=100);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n        cylinder(h=tymba_height - wall_thickness, r=(tymba_diameter/2) - wall_thickness, $fn=100);\n        \n        // Bottom opening for tone\n        translate([0, 0, -1])\n        cylinder(h=wall_thickness + 2, r=(tymba_diameter/2) - 15, $fn=50);\n    }\n}\n\n// Module for top bearing edge (sharp for realistic tone)\nmodule bearing_edge() {\n    difference() {\n        // Outer rim\n        cylinder(h=rim_thickness, r=tymba_diameter/2, $fn=100);\n        \n        // Inner 45° chamfer\n        translate([0, 0, 0])\n        cylinder(h=rim_thickness + 1, r=(tymba_diameter/2) - 5, $fn=100);\n        \n        // Top bevel\n        translate([0, 0, rim_thickness - 0.5])\n        cylinder(h=0.5, r=(tymba_diameter/2) - 3, $fn=100);\n    }\n}\n\n// Module for tuning lugs (6 around the drum)\nmodule tuning_lugs() {\n    lug_width = 6;\n    lug_height = 8;\n    lug_depth = 4;\n    \n    for(i = [0:5]) {\n        angle = i * 60;\n        x_pos = (tymba_diameter/2 + lug_depth/2) * cos(angle);\n        y_pos = (tymba_diameter/2 + lug_depth/2) * sin(angle);\n        \n        translate([x_pos, y_pos, tymba_height - 10])\n        rotate([0, 0, angle])\n        difference() {\n            // Main lug body\n            cube([lug_depth, lug_width, lug_height], center=true);\n            \n            // Mounting hole\n            translate([0, 0, -lug_height/2 - 1])\n            cylinder(h=lug_height + 2, r=1.5, $fn=20);\n        }\n    }\n}\n\n// Module for air vent hole\nmodule air_vent() {\n    translate([tymba_diameter/2 - 5, 0, tymba_height/2])\n    rotate([0, 90, 0])\n    cylinder(h=10, r=2, $fn=20);\n}\n\n// Module for bottom reinforcement ring\nmodule bottom_ring() {\n    translate([0, 0, 1])\n    difference() {\n        cylinder(h=3, r=(tymba_diameter/2) - 3, $fn=80);\n        cylinder(h=4, r=(tymba_diameter/2) - 8, $fn=60);\n    }\n}\n\n// Main assembly\nunion() {\n    // Drum shell\n    drum_shell();\n    \n    // Top bearing edge\n    translate([0, 0, tymba_height - rim_thickness])\n    bearing_edge();\n    \n    // Tuning lugs\n    tuning_lugs();\n    \n    // Air vent\n    air_vent();\n    \n    // Bottom reinforcement ring\n    bottom_ring();\n}\n\n// Add subtle texture rings for grip\nmodule grip_rings() {\n    for(h = [5:5:tymba_height-10]) {\n        translate([0, 0, h])\n        difference() {\n            cylinder(h=0.5, r=tymba_diameter/2, $fn=100);\n            cylinder(h=0.6, r=(tymba_diameter/2) - wall_thickness, $fn=100);\n        }\n    }\n}\n\n// Add grip rings to the drum\ntranslate([0, 0, 0])\ngrip_rings();",
    "renders": true
  },
  {
    "musical_instrument": "qanbus",
    "openscad_code": "// Qanbus - Traditional Yemeni lute\n// Medium complexity realistic style\n\n// Overall dimensions (mm)\nbody_length = 75;\nbody_width = 35;\nbody_depth = 15;\nneck_length = 65;\nneck_width = 8;\nneck_height = 8;\nheadstock_length = 25;\nheadstock_width = 12;\nheadstock_height = 5;\nsoundhole_radius = 6;\nstring_count = 5;\nbridge_height = 3;\nbridge_width = 4;\nbridge_length = 12;\nfret_count = 7;\ntuning_peg_radius = 1.5;\ntuning_peg_length = 8;\n\n// Main body\nmodule body() {\n    // Pear-shaped body\n    difference() {\n        // Main body shape\n        hull() {\n            // Upper bout\n            translate([-body_length/2, 0, 0])\n                scale([1, 0.8, 1])\n                sphere(d=body_width);\n            \n            // Lower bout\n            translate([body_length/2 - 5, 0, 0])\n                scale([1.2, 1, 1])\n                sphere(d=body_width * 1.2);\n        }\n        \n        // Sound hole\n        translate([body_length/4, 0, body_depth - 0.5])\n            cylinder(r=soundhole_radius, h=body_depth, $fn=32);\n        \n        // Back cavity\n        translate([0, 0, -body_depth/2 - 0.1])\n            cube([body_length * 0.9, body_width * 0.9, body_depth * 1.2], center=true);\n    }\n}\n\n// Neck\nmodule neck() {\n    // Tapered neck\n    translate([body_length/2, 0, body_depth/2])\n        linear_extrude(height=neck_length, scale=[0.8, 1], center=false)\n            square([neck_width, neck_height], center=true);\n}\n\n// Headstock\nmodule headstock() {\n    translate([body_length/2 + neck_length, 0, body_depth/2 + neck_height/2])\n        rotate([0, 0, 15])\n        cube([headstock_length, headstock_width, headstock_height], center=true);\n}\n\n// Fretboard\nmodule fretboard() {\n    translate([body_length/2 + neck_length/2, 0, body_depth/2 + neck_height/2 + 1])\n        cube([neck_length * 0.9, neck_width * 1.2, 2]);\n}\n\n// Frets\nmodule frets() {\n    for(i = [1:fret_count]) {\n        translate([\n            body_length/2 + (i * neck_length / (fret_count + 1)),\n            0,\n            body_depth/2 + neck_height/2 + 2.5\n        ]) {\n            cube([0.5, neck_width * 1.2, 1], center=true);\n        }\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([-body_length/4, 0, body_depth - 0.1])\n        cube([bridge_length, bridge_width, bridge_height], center=true);\n}\n\n// Tuning pegs\nmodule tuning_pegs() {\n    // Left side pegs\n    for(i = [1:3]) {\n        translate([\n            body_length/2 + neck_length + headstock_length * 0.7,\n            -headstock_width/2 - tuning_peg_length/2,\n            body_depth/2 + neck_height/2 + (i * headstock_height/4)\n        ]) {\n            rotate([0, 90, 0])\n                cylinder(r=tuning_peg_radius, h=tuning_peg_length, $fn=8);\n        }\n    }\n    \n    // Right side pegs\n    for(i = [1:2]) {\n        translate([\n            body_length/2 + neck_length + headstock_length * 0.7,\n            headstock_width/2 + tuning_peg_length/2,\n            body_depth/2 + neck_height/2 + (i * headstock_height/4)\n        ]) {\n            rotate([0, 90, 0])\n                cylinder(r=tuning_peg_radius, h=tuning_peg_length, $fn=8);\n        }\n    }\n}\n\n// Strings\nmodule strings() {\n    for(i = [1:string_count]) {\n        translate([\n            -body_length/4 + bridge_length/2 - (i * bridge_length/(string_count + 1)),\n            0,\n            body_depth + bridge_height - 0.2\n        ]) {\n            // String from bridge to nut\n            hull() {\n                sphere(r=0.2);\n                translate([\n                    body_length/2 + neck_length + headstock_length * 0.9,\n                    0,\n                    body_depth/2 + neck_height/2 + 2.5\n                ]) sphere(r=0.2);\n            }\n        }\n    }\n}\n\n// Assemble the qanbus\nunion() {\n    // Main components\n    body();\n    neck();\n    headstock();\n    fretboard();\n    \n    // Details\n    frets();\n    bridge();\n    tuning_pegs();\n    strings();\n}\n\n// Add subtle rounding to edges for realism\n$minkowski = 0.5;\nif($minkowski > 0) {\n    minkowski() {\n        children();\n        sphere(r=$minkowski);\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "gambus",
    "openscad_code": "// Gambus - Oud style lute\n// Medium complexity, realistic style\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\n\n// Overall dimensions\nbody_length = 70;\nbody_width = 40;\nbody_depth = 25;\nneck_length = 45;\nhead_length = 20;\n\nmodule gambus_body() {\n    difference() {\n        // Main body shell\n        hull() {\n            // Top rounded part\n            translate([0, 0, body_depth/2])\n                scale([1, 0.6, 0.5])\n                sphere(d=body_width);\n            \n            // Bottom flat part\n            translate([0, 0, 0])\n                cube([body_length*0.8, body_width*0.9, body_depth*0.3], center=true);\n        }\n        \n        // Hollow out the body\n        translate([0, 0, -1])\n            cube([body_length*0.7, body_width*0.7, body_depth-1], center=true);\n        \n        // Sound hole\n        translate([-body_length*0.2, 0, body_depth/2])\n            cylinder(h=body_depth+2, d=10, center=true);\n    }\n}\n\nmodule neck() {\n    // Neck base\n    translate([-body_length/2 - neck_length/2, 0, body_depth/2])\n        cube([neck_length, 8, 6], center=true);\n    \n    // Neck taper\n    for(i=[0:4]) {\n        translate([-body_length/2 - i*neck_length/5, 0, body_depth/2 + 3 + i*0.5])\n            cube([neck_length/5, 8-i*0.8, 2], center=true);\n    }\n}\n\nmodule head() {\n    // Headstock\n    translate([-body_length/2 - neck_length - head_length/2, 0, body_depth/2 + 5])\n        cube([head_length, 12, 3], center=true);\n    \n    // Tuning pegs\n    for(i=[0:5]) {\n        translate([-body_length/2 - neck_length - head_length*0.3, -5 + i*2, body_depth/2 + 6.5])\n            rotate([90, 0, 0])\n            cylinder(h=4, d=1.5);\n        \n        translate([-body_length/2 - neck_length - head_length*0.7, -5 + i*2, body_depth/2 + 6.5])\n            rotate([90, 0, 0])\n            cylinder(h=4, d=1.5);\n    }\n}\n\nmodule bridge() {\n    // Bridge\n    translate([body_length*0.3, 0, body_depth/2+0.5])\n        cube([10, 2, 2], center=true);\n    \n    // Bridge pins\n    for(i=[0:5]) {\n        translate([body_length*0.3, -5 + i*2, body_depth/2+2.5])\n            cylinder(h=2, d=1);\n    }\n}\n\nmodule strings() {\n    for(i=[0:5]) {\n        color(\"silver\")\n        hull() {\n            translate([-body_length/2 - neck_length - head_length*0.7, -5 + i*2, body_depth/2 + 6.5])\n                sphere(d=0.5);\n            translate([body_length*0.3, -5 + i*2, body_depth/2+2.5])\n                sphere(d=0.5);\n        }\n    }\n}\n\nmodule fretboard() {\n    // Fretboard\n    translate([-body_length/2 - neck_length/2, 0, body_depth/2 + 3])\n        cube([neck_length, 6, 1], center=true);\n    \n    // Frets\n    for(i=[1:10]) {\n        translate([-body_length/2 - neck_length*0.1*i, 0, body_depth/2 + 4])\n            cube([0.5, 6.5, 1], center=true);\n    }\n}\n\n// Assemble the gambus\nunion() {\n    gambus_body();\n    neck();\n    head();\n    bridge();\n    fretboard();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "sasando",
    "openscad_code": "// Sasando - traditional harp-like instrument from Rote Island, Indonesia\n// Medium complexity 3D printable version\n\n$fn = 32;  // Smooth curves\n\nmodule sasando_body() {\n    // Main circular body - hollow for strings\n    difference() {\n        // Outer shell\n        cylinder(h = 40, r = 25, center = true);\n        \n        // Hollow center\n        cylinder(h = 42, r = 22, center = true);\n    }\n    \n    // Bottom base\n    translate([0, 0, -22])\n    cylinder(h = 4, r1 = 27, r2 = 25);\n    \n    // Top ring for string attachment\n    translate([0, 0, 22])\n    cylinder(h = 3, r1 = 25, r2 = 27);\n}\n\nmodule bamboo_tube() {\n    // Single bamboo tube resonator\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 60, r = 2.5, center = true);\n        cylinder(h = 62, r = 2, center = true);\n    }\n}\n\nmodule resonator_tubes() {\n    // Array of bamboo tubes around the body\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([0, 32, 0])\n        bamboo_tube();\n    }\n}\n\nmodule tuning_pegs() {\n    // String tuning pegs on top\n    for(i = [0:7]) {\n        angle = i * 45;\n        rotate([0, 0, angle])\n        translate([20, 0, 25]) {\n            // Peg base\n            cylinder(h = 8, r = 2);\n            \n            // Peg handle\n            rotate([90, 0, 0])\n            translate([0, 0, 4])\n            cube([1.5, 6, 2], center = true);\n        }\n    }\n}\n\nmodule strings() {\n    // Main playing strings\n    for(i = [0:11]) {\n        angle = i * 15;\n        rotate([0, 0, angle])\n        translate([0, 0, -20])\n        cylinder(h = 40, r = 0.5, center = true);\n    }\n    \n    // Bass strings\n    for(i = [0:3]) {\n        angle = i * 90 + 45;\n        rotate([0, 0, angle])\n        translate([0, 0, -20])\n        cylinder(h = 40, r = 0.8, center = true);\n    }\n}\n\nmodule support_base() {\n    // Tripod stand base\n    translate([0, 0, -30])\n    difference() {\n        cylinder(h = 5, r = 15);\n        cylinder(h = 6, r = 12);\n    }\n    \n    // Three support legs\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([10, 0, -15])\n        rotate([90, 0, 0])\n        cylinder(h = 20, r = 2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    sasando_body();\n    resonator_tubes();\n    tuning_pegs();\n    strings();\n    \n    // Support structure\n    support_base();\n}",
    "renders": true
  },
  {
    "musical_instrument": "kacapi",
    "openscad_code": "// Kacapi (Sundanese zither) - medium complexity realistic style\n// Overall length ~80mm, width ~30mm, height ~15mm\n\n$fn = 32;\n\nmodule body() {\n    difference() {\n        // Main resonator box\n        hull() {\n            translate([-35, -12, 0]) cube([70, 24, 10]);\n            translate([-32, -10, 10]) cube([64, 20, 5]);\n        }\n        \n        // Sound hole on top\n        translate([0, 0, 9.5]) cylinder(h=2, r=6);\n        \n        // String holes on front\n        for(i=[-4:4]) {\n            translate([i*7, -13, 5]) cylinder(h=3, r=0.8);\n        }\n    }\n}\n\nmodule bridge() {\n    // Floating bridge\n    translate([0, 0, 10])\n    difference() {\n        cube([45, 4, 2], center=true);\n        for(i=[-4:4]) {\n            translate([i*4.5, 0, -0.5]) cube([1, 4.5, 3]);\n        }\n    }\n}\n\nmodule tuning_pegs() {\n    // Pegs on left side\n    for(i=[0:8]) {\n        translate([-34, -12 + i*3, 12]) {\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=8, r1=1.5, r2=1);\n                translate([0, 0, 4]) rotate([0, 0, 45]) cube([2, 2, 8], center=true);\n            }\n        }\n    }\n}\n\nmodule strings() {\n    // String segments (thin cylinders)\n    for(i=[0:8]) {\n        y = -12 + i*3;\n        // From peg to bridge\n        hull() {\n            translate([-34, y, 12]) sphere(r=0.5);\n            translate([-22.5 + i*2.5, y, 11]) sphere(r=0.5);\n        }\n        // From bridge to end\n        hull() {\n            translate([-22.5 + i*2.5, y, 11]) sphere(r=0.5);\n            translate[28, y, 5] sphere(r=0.5);\n        }\n    }\n}\n\nmodule legs() {\n    // Four support legs\n    for(x=[-25, 25]) {\n        for(y=[-8, 8]) {\n            translate([x, y, -2])\n            difference() {\n                cylinder(h=4, r=2);\n                translate([0, 0, -1]) cylinder(h=6, r=1.5);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    bridge();\n    tuning_pegs();\n    strings();\n    legs();\n    \n    // Decorative end piece\n    translate([35, 0, 3])\n    difference() {\n        cylinder(h=4, r=4);\n        translate([0, 0, -1]) cylinder(h=6, r=2.5);\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "kecapi",
    "openscad_code": "// Kecapi (Sundanese zither) – medium-realistic printable model\n// Overall size ≈ 90 mm long, 40 mm wide, 25 mm thick\n\n// Basic parameters\nbody_length = 85;\nbody_width  = 38;\nbody_thick  = 22;        // total height\nwall        = 2.0;        // printable wall thickness\nbridge_h    = 4;\nbridge_w    = 3;\nbridge_l    = 36;\ntune_peg_d  = 3.2;\ntune_peg_h  = 8;\npeg_row_off = 8;         // distance from back edge\nstring_d    = 0.8;\nstring_h    = 1.0;\nnum_strings = 12;\n\n// Main body shell (hollow box with rounded top)\nmodule body_shell(){\n    difference(){\n        // outer rounded shell\n        hull(){\n            translate([0,0,body_thick/2])\n                cube([body_length,body_width,body_thick], center=true);\n            translate([0,0,body_thick-1])\n                scale([1,1,0.3])\n                    sphere(d=body_width*0.9);\n        }\n        // hollow cavity\n        translate([0,0,-1])\n            cube([body_length-wall*2, body_width-wall*2, body_thick+2], center=true);\n    }\n}\n\n// Sound hole (oval)\nmodule sound_hole(){\n    rotate([90,0,0])\n        scale([1,0.6,1])\n        cylinder(d=12,h=wall+1,$fn=48);\n}\n\n// Bridge (curved top)\nmodule bridge(){\n    difference(){\n        hull(){\n            cube([bridge_l,bridge_w,bridge_h], center=true);\n            translate([0,0,bridge_h/2])\n                sphere(d=bridge_w*1.5,$fn=20);\n        }\n        translate([0,0,-1])\n            cube([bridge_l+2,bridge_w+2,bridge_h+2], center=true);\n    }\n}\n\n// Single tuning peg (simple cylinder with slot)\nmodule tuning_peg(){\n    cylinder(d=tune_peg_d, h=tune_peg_h, $fn=12);\n    translate([0,0,tune_peg_h/2])\n        rotate([0,90,0])\n            cube([tune_peg_d*0.8, 0.6, 1.5], center=true);\n}\n\n// Array of tuning pegs along back edge\nmodule peg_row(count=num_strings){\n    spacing = body_width*0.7/(count-1);\n    for(i=[0:count-1])\n        translate([-body_length/2-1, -body_width*0.35 + i*spacing, body_thick-2])\n            rotate([90,0,0])\n                tuning_peg();\n}\n\n// One string (thin cylinder)\nmodule string(len){\n    cylinder(d=string_d, h=len, $fn=8);\n}\n\n// All strings\nmodule strings(){\n    spacing = body_width*0.7/(num_strings-1);\n    for(i=[0:num_strings-1]){\n        y = -body_width*0.35 + i*spacing;\n        translate([-body_length/2 + 3, y, body_thick-1])\n            rotate([90,0,0])\n                string(body_length-3);\n    }\n}\n\n// Assembly\nbody_shell();\ntranslate([0,0,body_thick/2-wall])\n    sound_hole();\ntranslate([0,0,body_thick*0.6])\n    bridge();\npeg_row();\nstrings();",
    "renders": true
  },
  {
    "musical_instrument": "siter",
    "openscad_code": "// Realistic Siter (Celempung) - Medium complexity\n// Wall thickness 2mm, printable orientation: flat on bed\n// Approx 100mm x 60mm x 25mm\n\n// Parameters\n$fn = 32;\nwall = 2;\nsiter_w = 96;\nsiter_d = 60;\nsiter_h = 22;\nres_w = 20;\nres_d = 12;\nres_h = 6;\npeg_d = 3;\npeg_h = 8;\nstring_d = 0.8;\n\nmodule siter_body() {\n    difference() {\n        // Main resonator box\n        hull() {\n            for(i = [[0,0,0], [siter_w,0,0], [0,siter_d,0], [siter_w,siter_d,0],\n                     [wall,wall,siter_h], [siter_w-wall,wall,siter_h],\n                     [wall,siter_d-wall,siter_h], [siter_w-wall,siter_d-wall,siter_h]])\n                translate(i) sphere(r=1);\n        }\n        \n        // Sound holes\n        translate([siter_w/2, siter_d/2, siter_h-1]) \n            cylinder(h=wall+1, d=25);\n        translate([siter_w/4, siter_d/2, siter_h-1]) \n            cylinder(h=wall+1, d=12);\n        translate([3*siter_w/4, siter_d/2, siter_h-1]) \n            cylinder(h=wall+1, d=12);\n        \n        // Bridge slot\n        translate([siter_w/2-3, -1, 8]) \n            cube([6, siter_d+2, 4]);\n    }\n}\n\nmodule bridge() {\n    translate([siter_w/2-3, 0, 8]) {\n        difference() {\n            cube([6, siter_d, 4]);\n            for(i = [1:11]) {\n                translate([3, i*siter_d/12, -1]) \n                    cylinder(h=6, d=string_d+0.2);\n            }\n        }\n    }\n}\n\nmodule tuning_pegs() {\n    // Left pegs\n    for(i = [1:6]) {\n        translate([10 + (i-1)*10, -2, siter_h+2]) {\n            rotate([0,90,0]) {\n                cylinder(h=peg_h, d=peg_d);\n                translate([0,0,peg_h]) sphere(d=peg_d+1);\n            }\n        }\n    }\n    // Right pegs\n    for(i = [1:6]) {\n        translate([10 + (i-1)*10, siter_d+2, siter_h+2]) {\n            rotate([0,-90,0]) {\n                cylinder(h=peg_h, d=peg_d);\n                translate([0,0,peg_h]) sphere(d=peg_d+1);\n            }\n        }\n    }\n}\n\nmodule strings() {\n    // Main strings\n    for(i = [1:11]) {\n        translate([10 + (i-1)*8, 0, 11]) {\n            color(\"silver\") {\n                rotate([90,0,0]) cylinder(h=siter_d, d=string_d);\n            }\n        }\n    }\n    // Side strings\n    for(i = [1:2]) {\n        translate([siter_w-15, 0, 11+i*2]) {\n            color(\"silver\") {\n                rotate([90,0,0]) cylinder(h=siter_d, d=string_d);\n            }\n        }\n    }\n}\n\nmodule decorative_details() {\n    // Carved top edge\n    for(i = [0:5:siter_w]) {\n        translate([i, wall, siter_h]) {\n            rotate([0,90,0]) cylinder(h=5, d=1.5);\n        }\n        translate([i, siter_d-wall, siter_h]) {\n            rotate([0,-90,0]) cylinder(h=5, d=1.5);\n        }\n    }\n    \n    // Feet\n    for(pos = [[wall,wall], [siter_w-wall,wall], [wall,siter_d-wall], [siter_w-wall,siter_d-wall]]) {\n        translate([pos[0], pos[1], 0]) {\n            cylinder(h=3, d=6);\n        }\n    }\n}\n\nunion() {\n    siter_body();\n    bridge();\n    tuning_pegs();\n    strings();\n    decorative_details();\n}",
    "renders": true
  },
  {
    "musical_instrument": "celempung",
    "openscad_code": "// Celempung - Traditional Javanese Zither\n// Medium complexity realistic model optimized for 3D printing\n\n$fn = 50;  // Smooth curves\n\n// Overall dimensions\nbody_length = 85;\nbody_width = 40;\nbody_height = 15;\nwall_thickness = 2;\n\nmodule celempung_body() {\n    difference() {\n        // Main body - hollowed for printing\n        difference() {\n            // Outer shell\n            cube([body_length, body_width, body_height], center=true);\n            \n            // Hollow interior\n            translate([0, 0, -wall_thickness/2])\n                cube([body_length - 2*wall_thickness, body_width - 2*wall_thickness, body_height], center=true);\n        }\n        \n        // Sound holes - traditional circular pattern\n        for(i = [0:3]) {\n            translate([body_length/2 - 15 - i*8, 0, body_height/2 - 2])\n                rotate([90, 0, 0])\n                    cylinder(h=5, r=2);\n        }\n        \n        // String anchor holes\n        for(i = [0:9]) {\n            translate([body_length/2 - 5 - i*7, body_width/2 - 3, body_height/2 - 2])\n                rotate([90, 0, 0])\n                    cylinder(h=5, r=1);\n        }\n    }\n}\n\nmodule tuning_pegs() {\n    // Left side tuning pegs\n    for(i = [0:4]) {\n        translate([-body_length/2 - 8, -15 + i*6, body_height/2 - 2])\n            rotate([90, 0, 0])\n                cylinder(h=12, r=2);\n        \n        // Peg head\n        translate([-body_length/2 - 8, -15 + i*6, body_height/2 + 10])\n            rotate([90, 0, 0])\n                cylinder(h=3, r=3);\n    }\n    \n    // Right side tuning pegs\n    for(i = [0:4]) {\n        translate([body_length/2 + 8, -15 + i*6, body_height/2 - 2])\n            rotate([90, 0, 0])\n                cylinder(h=12, r=2);\n        \n        // Peg head\n        translate([body_length/2 + 8, -15 + i*6, body_height/2 + 10])\n            rotate([90, 0, 0])\n                cylinder(h=3, r=3);\n    }\n}\n\nmodule bridge() {\n    // Main bridge\n    translate([0, 0, body_height/2 + 1])\n        cube([body_length - 10, 3, 2], center=true);\n    \n    // String notches\n    for(i = [0:9]) {\n        translate([body_length/2 - 5 - i*7, 0, body_height/2 + 1])\n            cube([0.5, 3, 2], center=true);\n    }\n}\n\nmodule decorative_ends() {\n    // Left end - traditional curl\n    translate([-body_length/2, 0, 0])\n        difference() {\n            // Main curl\n            rotate([0, 90, 0])\n                cylinder(h=15, r=8);\n            // Hollow center\n            rotate([0, 90, 0])\n                cylinder(h=15, r=5);\n        }\n    \n    // Right end - traditional curl\n    translate([body_length/2, 0, 0])\n        difference() {\n            // Main curl\n            rotate([0, 90, 0])\n                cylinder(h=15, r=8);\n            // Hollow center\n            rotate([0, 90, 0])\n                cylinder(h=15, r=5);\n        }\n}\n\nmodule legs() {\n    // Front legs\n    translate([-body_length/3, 0, -body_height/2 - 5])\n        cylinder(h=10, r=2);\n    \n    translate([body_length/3, 0, -body_height/2 - 5])\n        cylinder(h=10, r=2);\n        \n    // Rear support\n    translate([0, -body_width/3, -body_height/2 - 3])\n        cylinder(h=8, r=1.5);\n}\n\n// Build the celempung\ncelempung_body();\ntuning_pegs();\nbridge();\ndecorative_ends();\nlegs();",
    "renders": true
  },
  {
    "musical_instrument": "rebec",
    "openscad_code": "// RebEC – Renaissance bowed string instrument (ca. 1400-1600)\n// Overall length ≈ 90 mm, printable without supports (no large overhangs)\n// All critical walls ≥ 1.2 mm for FDM printing\n\n$fn = 32;\n\nmodule rebec() {\n    // --- MAIN BODY (pear-shaped bowl) ---\n    // Built from stacked, scaled cylinders to emulate carved bowl\n    union() {\n        for(i=[0:5]) {\n            h = 3;\n            r = 15 - i*2.2;\n            translate([0, 0, i*h])\n                cylinder(h=h, r1=r, r2=r-1.2, center=true);\n        }\n    }\n\n    // --- TOP PLATE (soundboard) ---\n    difference() {\n        translate([0, 0, 18])\n            cylinder(h=2, r=15-0.5, center=true);\n        // Sound hole (simple C-shape for realism)\n        rotate([0,0,45])\n            translate([0, 0, 18])\n                linear_extrude(3)\n                    offset(-1)\n                        circle(r=4);\n    }\n\n    // --- NECK & FINGERBOARD ---\n    translate([0, 0, 20]) {\n        // Neck shaft\n        rotate([90,0,0])\n            cylinder(h=40, r1=4.5, r2=3, center=false);\n        // Fingerboard overlay\n        translate([0, 0, 40])\n            cube([30, 6, 2], center=true);\n    }\n\n    // --- PEGBOX ---\n    translate([0, 0, 63]) {\n        difference() {\n            cube([20, 14, 25], center=true);\n            // Hollow pegbox\n            translate([0, 0, 2])\n                cube([18-2.4, 12-2.4, 22], center=true);\n            // Peg holes (3 pegs)\n            for(i=[-1:1])\n                rotate([90,0,0])\n                    translate([0, i*4, 12])\n                        cylinder(h=10, r=1.5, center=true);\n        }\n    }\n\n    // --- TAILPIECE ---\n    translate([0, 0, 0])\n        cube([12, 8, 3], center=true);\n\n    // --- BRIDGE ---\n    translate([0, 0, 19.5])\n        cube([10, 1.5, 5], center=true);\n\n    // --- STRINGS (simple cylinders) ---\n    for(i=[-1:1])\n        translate([0, i*2, 10])\n            rotate([90,0,0])\n                cylinder(h=55, r=0.4, center=false);\n}\n\n// Output the instrument\nrebec();",
    "renders": true
  },
  {
    "musical_instrument": "vielle",
    "openscad_code": "// Vielle - Medieval Bowed String Instrument\n// Medium complexity realistic version for 3D printing\n\nbody_length = 80;\nbody_width = 35;\nbody_thickness = 12;\nneck_length = 60;\nneck_width = 8;\nneck_thickness = 6;\npegbox_length = 40;\npegbox_width = 12;\npegbox_thickness = 8;\n\n// Main body\nmodule vielle_body() {\n    difference() {\n        // Main resonating chamber\n        union() {\n            // Front plate with slight arch\n            translate([0, 0, body_thickness/2])\n                scale([1, 0.8, 0.3])\n                    sphere(d=body_width);\n            \n            // Back plate\n            translate([0, 0, -body_thickness/2])\n                cube([body_length, body_width, body_thickness], center=true);\n            \n            // Sides\n            hull() {\n                translate([-body_length/2 + 5, 0, 0])\n                    cylinder(h=body_thickness, r=body_width/2);\n                translate([body_length/2 - 5, 0, 0])\n                    cylinder(h=body_thickness, r=body_width/2);\n            }\n        }\n        \n        // Sound holes - C-shaped\n        translate([body_length/4, body_width/4, body_thickness/2 + 0.1])\n            rotate([0, 0, 45])\n                scale([1, 2, 1])\n                    cylinder(h=2, r=3, $fn=20);\n        translate([body_length/4, -body_width/4, body_thickness/2 + 0.1])\n            rotate([0, 0, -45])\n                scale([1, 2, 1])\n                    cylinder(h=2, r=3, $fn=20);\n        \n        // Hollow interior\n        translate([0, 0, 0])\n            cube([body_length - 8, body_width - 8, body_thickness - 4], center=true);\n    }\n}\n\n// Neck and fingerboard\nmodule neck() {\n    union() {\n        // Neck\n        translate([body_length/2 + neck_length/2, 0, body_thickness/2 - neck_thickness/2])\n            cube([neck_length, neck_width, neck_thickness], center=true);\n        \n        // Fingerboard\n        translate([body_length/2 + neck_length/2, 0, body_thickness/2 + neck_thickness/2])\n            cube([neck_length + 5, neck_width + 4, 2], center=true);\n    }\n}\n\n// Pegbox and pegs\nmodule pegbox() {\n    union() {\n        // Pegbox\n        translate([body_length/2 + neck_length + pegbox_length/2, 0, body_thickness/2 + neck_thickness/2])\n            cube([pegbox_length, pegbox_width, pegbox_thickness], center=true);\n        \n        // Pegs - 4 in total\n        for(i=[0:3]) {\n            rotate([0, 90, 0])\n                translate([body_length/2 + neck_length + 10 + i*8, \n                          pegbox_width/2 + 2, \n                          body_thickness/2 + neck_thickness/2 - 5 + i*3]) {\n                    cylinder(h=12, r=2, $fn=12);\n                    translate([0, 0, 12])\n                        sphere(r=3, $fn=12);\n                }\n        }\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([-body_length/4, 0, body_thickness/2 + 1])\n        union() {\n            // Main bridge body\n            cube([12, 8, 3], center=true);\n            \n            // Feet\n            translate([-4, 0, -1]) cube([2, 6, 1], center=true);\n            translate([4, 0, -1]) cube([2, 6, 1], center=true);\n        }\n}\n\n// Tailpiece\nmodule tailpiece() {\n    translate([-body_length/2 - 5, 0, body_thickness/2 + 1])\n        difference() {\n            // Main tailpiece\n            cube([10, 6, 2], center=true);\n            \n            // String holes\n            for(i=[-1,1]) {\n                translate([0, i*1.5, 1])\n                    cylinder(h=3, r=0.5, $fn=8);\n            }\n        }\n}\n\n// Assemble the vielle\nunion() {\n    vielle_body();\n    neck();\n    pegbox();\n    bridge();\n    tailpiece();\n    \n    // Strings\n    for(i=[-1.5:1.5:3]) {\n        color(\"white\")\n            translate([body_length/2 + neck_length + pegbox_length - 5, \n                      i, \n                      body_thickness/2 + neck_thickness/2 + 2])\n                rotate([90, 0, 0])\n                    cylinder(h=body_length + neck_length + pegbox_length - 5, r=0.3, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "viol",
    "openscad_code": "// Viol - medium complexity realistic style\n// Overall length ~70mm, printable without supports\n\n$fn = 32;\nwall = 1.2;\n\nmodule body() {\n    // Main body carved from ellipsoid\n    difference() {\n        scale([1.4, 0.75, 1])\n            sphere(d = 40, center = true);\n        \n        // Hollow out\n        scale([1.3, 0.65, 0.9])\n            sphere(d = 40 - wall*2, center = true);\n        \n        // Neck cavity\n        translate([0, 0, 5])\n            rotate([0, 90, 0])\n                cylinder(h = 25, d1 = 8, d2 = 10, center = true);\n        \n        // Sound holes\n        for (x = [-12, 12])\n            translate([x, 0, -5])\n                rotate([90, 0, 0])\n                    linear_extrude(height = wall + 0.1)\n                        scale([1, 3])\n                            circle(d = 5);\n    }\n}\n\nmodule neck() {\n    // Neck shaft\n    translate([0, -22, 5])\n        rotate([0, 90, 0])\n            cylinder(h = 30, d1 = 8, d2 = 6);\n    \n    // Fingerboard\n    translate([0, -30, 3])\n        rotate([0, 90, 0])\n            cube([28, 3, 10], center = true);\n    \n    // Scroll\n    translate([0, -40, 5])\n        rotate([0, 90, 0])\n            rotate_extrude(angle = 360)\n                translate([4, 0, 0])\n                    circle(d = 6);\n}\n\nmodule tailpiece() {\n    // Tailpiece\n    translate([0, 22, -2])\n        cube([10, 5, 2], center = true);\n    \n    // Tailgut\n    translate([0, 25, -2])\n        cylinder(h = 3, d = 1);\n}\n\nmodule bridge() {\n    // Bridge\n    translate([0, 10, -4])\n        cube([12, 2, 8], center = true);\n    \n    // Bridge feet\n    for (x = [-4, 4])\n        translate([x, 10, -8])\n            sphere(d = 3);\n}\n\nmodule strings() {\n    // 4 strings\n    for (i = [-1.5:1:1.5])\n        translate([i*2, -38, 5])\n            cylinder(h = 65, d = 0.5);\n}\n\nmodule tuning_pegs() {\n    // 4 pegs\n    for (i = [0:3]) {\n        angle = i * 90;\n        translate([0, -38, 5])\n            rotate([0, 0, angle])\n                translate([0, -5, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = 8, d = 2);\n    }\n}\n\n// Assemble viol\nscale(0.7)\nunion() {\n    body();\n    neck();\n    tailpiece();\n    bridge();\n    strings();\n    tuning_pegs();\n}",
    "renders": true
  },
  {
    "musical_instrument": "violone",
    "openscad_code": "// Violone (Baroque Bass Viol) – medium-realistic, 3D-printable\n// Overall length ≈ 90 mm\n\nmodule violone() {\n    // ---------- Body ----------\n    union() {\n        // Sound box – hollow double-curve outline\n        difference() {\n            hull() {\n                translate([-2, 0, 0])  cube([44, 26, 9], center=true);  // lower bout\n                translate([ 0, 0, 0])  cube([28, 22, 9], center=true);  // waist\n                translate([ 2, 0, 0])  cube([36, 24, 9], center=true);  // upper bout\n            }\n            translate([0, 0, 1])  cube([80, 22, 7], center=true);  // hollow cavity\n        }\n\n        // Ribs – 1 mm wall thickness\n        difference() {\n            hull() {\n                translate([-2, 0, 0])  cube([44, 26, 11], center=true);\n                translate([ 0, 0, 0])  cube([28, 22, 11], center=true);\n                translate([ 2, 0, 0])  cube([36, 24, 11], center=true);\n            }\n            hull() {\n                translate([-2, 0, 0])  cube([42, 24, 9], center=true);\n                translate([ 0, 0, 0])  cube([26, 20, 9], center=true);\n                translate([ 2, 0, 0])  cube([34, 22, 9], center=true);\n            }\n        }\n\n        // Sound holes – classic “C” shape simplified\n        for (y = [-8, 8]) {\n            difference() {\n                translate([12, y, 4.5]) rotate([0, 0, y>0?45:-45])\n                    cylinder(h=2, d1=5, d2=2, center=true, $fn=20);\n                translate([12, y, 4.5]) rotate([0, 0, y>0?45:-45])\n                    cylinder(h=3, d1=3, d2=1, center=true, $fn=20);\n            }\n        }\n    }\n\n    // ---------- Neck ----------\n    translate([32, 0, 0]) {\n        difference() {\n            cube([30, 6, 8], center=true);  // neck stock\n            translate([0, 0, 4]) cube([28, 4, 8], center=true);  // hollow fingerboard\n        }\n\n        // Fingerboard – 0.8 mm thick\n        translate([0, 0, 8.4]) cube([29, 5, 0.8], center=true);\n\n        // Scroll pegbox\n        translate([18, 0, 8]) rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=8, d=10, $fn=16);  // pegbox body\n                for (i=[-1,1]) {\n                    translate([i*3, 0, 4]) rotate([0,90,0])\n                        cylinder(h=8, d=1.5, $fn=12);  // peg holes\n                }\n            }\n            // spiral scroll\n            for (a=[0:30:360*1.5]) {\n                rotate([0, 0, a]) translate([2.5+a/80, 0, 0])\n                    sphere(d=2, $fn=8);\n            }\n        }\n\n        // Pegs\n        for (i=[-1,1]) {\n            translate([18, i*3, 8]) rotate([90, 0, 90*i])\n                cylinder(h=5, d=1.5, $fn=8);\n        }\n    }\n\n    // ---------- Tailpiece & Bridge ----------\n    translate([-36, 0, -3]) {\n        // Tailpiece\n        difference() {\n            cube([10, 8, 1], center=true);\n            translate([0, 0, 0.5]) cube([8, 6, 1.1], center=true);\n        }\n        // Tail-gut anchor\n        translate([5, 0, -1]) cylinder(h=2, d=1.5, $fn=10);\n    }\n\n    // Bridge\n    translate([-10, 0, 4]) {\n        difference() {\n            cube([6, 20, 2], center=true);\n            translate([0, 0, 1]) cube([8, 16, 2.1], center=true);\n            for (x=[-2, 2]) translate([x, 0, 1.5]) cube([1, 18, 0.8], center=true);\n        }\n    }\n\n    // ---------- Strings ----------\n    for (x=[-2:1:2]) {\n        translate([x*0.8, 0, 5]) cylinder(h=70, d=0.5, $fn=6);\n    }\n}\n\nviolone();",
    "renders": true
  },
  {
    "musical_instrument": "violoncello",
    "openscad_code": "// Violoncello - Medium Complexity, Realistic Style\n// Overall size ~80mm tall for 3D printing\n\n// Parameters\nbody_length = 45;\nbody_width_upper = 22;\nbody_width_lower = 27;\nbody_depth = 12;\nneck_length = 35;\nscroll_radius = 5;\nbridge_height = 8;\nbridge_width = 12;\nfingerboard_length = 25;\nfingerboard_width = 4;\nfingerboard_thickness = 1.5;\nstring_length = 55;\nf_hole_width = 2;\nf_hole_length = 8;\ntailpiece_length = 12;\ntailpiece_width = 6;\npeg_count = 4;\npeg_radius = 1.2;\npeg_length = 4;\n\n// Colors (for preview only)\n$fn = 32;\n\nmodule body() {\n    // Main body - violin shape approximation\n    difference() {\n        // Upper bout\n        hull() {\n            translate([0, 0, body_depth/2])\n                scale([1, body_width_upper/body_length, 1])\n                    sphere(d=body_length);\n            translate([body_length/3, 0, body_depth/2])\n                scale([1, body_width_upper/body_length * 0.9, 1])\n                    sphere(d=body_length * 0.8);\n        }\n        \n        // Lower bout\n        hull() {\n            translate([-body_length/3, 0, body_depth/2])\n                scale([1, body_width_lower/body_length, 1])\n                    sphere(d=body_length * 1.1);\n            translate([-body_length/1.5, 0, body_depth/2])\n                scale([1, body_width_lower/body_length * 0.9, 1])\n                    sphere(d=body_length * 0.9);\n        }\n        \n        // Connect upper and lower\n        hull() {\n            translate([body_length/4, 0, body_depth/2])\n                scale([1, body_width_upper/body_length * 0.7, 1])\n                    sphere(d=body_length * 0.6);\n            translate([-body_length/4, 0, body_depth/2])\n                scale([1, body_width_lower/body_length * 0.7, 1])\n                    sphere(d=body_length * 0.6);\n        }\n        \n        // Hollow out interior (3mm walls)\n        scale([0.85, 0.85, 0.75])\n            translate([0, 0, body_depth/2])\n                cube([body_length * 1.2, body_width_lower * 1.2, body_depth], center=true);\n    }\n}\n\nmodule f_holes() {\n    // F-holes on front plate\n    for(side = [-1, 1]) {\n        translate([side * body_length/4, body_width_upper/3, body_depth - 0.5]) {\n            rotate([0, 0, 15 * side])\n                linear_extrude(height=1) {\n                    // Top circle\n                    translate([-f_hole_length/4, 0, 0])\n                        circle(r=f_hole_width/2);\n                    // Bottom circle\n                    translate([f_hole_length/4, 0, 0])\n                        circle(r=f_hole_width/2);\n                    // Center bar\n                    square([f_hole_length/2, f_hole_width/4], center=true);\n                }\n        }\n    }\n}\n\nmodule neck() {\n    // Neck and fingerboard\n    translate([body_length/2 + neck_length/2, 0, body_depth/2]) {\n        // Neck proper\n        rotate([0, 0, 0])\n            hull() {\n                translate([neck_length/2, 0, 0])\n                    cube([neck_length, fingerboard_width * 1.5, fingerboard_thickness * 2], center=true);\n                translate([-neck_length/2, 0, 0])\n                    cube([neck_length, fingerboard_width, fingerboard_thickness], center=true);\n            }\n        \n        // Fingerboard\n        translate([neck_length/2 + fingerboard_length/2, 0, fingerboard_thickness])\n            cube([fingerboard_length, fingerboard_width, fingerboard_thickness], center=true);\n    }\n}\n\nmodule scroll() {\n    // Scroll at top\n    translate([body_length/2 + neck_length + scroll_radius, 0, body_depth/2 + scroll_radius]) {\n        // Main scroll\n        rotate([90, 0, 0])\n            cylinder(h=scroll_radius * 2, r1=scroll_radius, r2=0);\n        \n        // Scroll detail\n        for(i = [1:3]) {\n            rotate([0, 0, i * 120])\n                translate([0, scroll_radius * 0.7, 0])\n                    sphere(r=scroll_radius * 0.3);\n        }\n    }\n}\n\nmodule bridge() {\n    // Bridge between f-holes\n    translate([0, 0, body_depth - 1]) {\n        // Bridge feet\n        hull() {\n            translate([-bridge_width/3, 0, 0])\n                cube([bridge_width/4, 2, bridge_height], center=true);\n            translate([bridge_width/3, 0, 0])\n                cube([bridge_width/4, 2, bridge_height], center=true);\n        }\n        \n        // Bridge top\n        translate([0, 0, bridge_height/2])\n            cube([bridge_width, 1, bridge_height/2], center=true);\n    }\n}\n\nmodule tailpiece() {\n    // Tailpiece at bottom\n    translate([-body_length/1.4, 0, body_depth - 1]) {\n        hull() {\n            cube([tailpiece_width, tailpiece_length/2, 2], center=true);\n            translate([0, -tailpiece_length/2, 0])\n                cube([tailpiece_width/2, tailpiece_length/2, 2], center=true);\n        }\n    }\n}\n\nmodule pegs() {\n    // Tuning pegs in scroll\n    for(i = [1:peg_count]) {\n        angle = (i-1) * 45 - 67.5;\n        translate([body_length/2 + neck_length + scroll_radius * 0.5, \n                   sin(angle) * scroll_radius, \n                   body_depth/2 + scroll_radius * 1.5]) {\n            rotate([0, 90, 0])\n                cylinder(h=peg_length, r=peg_radius);\n        }\n    }\n}\n\nmodule strings() {\n    // Four strings\n    for(i = [0:3]) {\n        offset = (i - 1.5) * (fingerboard_width/5);\n        color(\"silver\")\n            translate([body_length/2 + neck_length + scroll_radius, offset, body_depth/2 + scroll_radius * 1.8]) {\n                // String from peg to tailpiece\n                hull() {\n                    sphere(r=0.3);\n                    translate([-string_length, 0, -bridge_height/2])\n                        sphere(r=0.3);\n                }\n            }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    f_holes();\n    neck();\n    scroll();\n    bridge();\n    tailpiece();\n    pegs();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "violotta",
    "openscad_code": "// Violotta (viola/violin hybrid) - Realistic Medium Complexity\n// Overall length ~95 mm, 3D-printable with minimal supports\n\n$fn = 36;               // Increase smoothness\nwall = 1.5;             // Wall thickness for printing\nscale_factor = 0.33;    // Scale down from full size\n\nmodule body() {\n    difference() {\n        // Main body hull\n        hull() {\n            // Upper bout\n            translate([-15, 0, 0])\n                scale([1, 0.9, 0.2])\n                    sphere(d = 30);\n\n            // C-bout waists\n            translate([0, -15, 0])\n                scale([0.6, 1.5, 0.2])\n                    sphere(d = 15);\n            translate([0, 15, 0])\n                scale([0.6, 1.5, 0.2])\n                    sphere(d = 15);\n\n            // Lower bout\n            translate([25, 0, 0])\n                scale([1.2, 1.0, 0.2])\n                    sphere(d = 35);\n        }\n\n        // Hollow out interior\n        translate([5, 0, -1])\n            scale([0.85, 0.85, 1])\n                hull() {\n                    translate([-15, 0, 0])\n                        scale([1, 0.9, 0.2])\n                            sphere(d = 30 - wall*2);\n                    translate([25, 0, 0])\n                        scale([1.2, 1.0, 0.2])\n                            sphere(d = 35 - wall*2);\n                }\n\n        // F-holes\n        for (x = [5, 15]) {\n            translate([x, -5, -0.5])\n                rotate([0, 0, 10])\n                    scale([0.5, 2.5, 1])\n                        cylinder(h = 2, d = 3, $fn = 6);\n            translate([x, 5, -0.5])\n                rotate([0, 0, -10])\n                    mirror([0, 1, 0])\n                        scale([0.5, 2.5, 1])\n                            cylinder(h = 2, d = 3, $fn = 6);\n        }\n    }\n}\n\nmodule neck() {\n    // Neck shaft\n    translate([35, 0, 5])\n        rotate([0, -10, 0])\n            scale([1, 0.8, 5])\n                cube([30, 8, 3], center = true);\n\n    // Scroll\n    translate([62, 0, 7])\n        rotate([0, -10, 0])\n        rotate_extrude(angle = 540, $fn = 24)\n            translate([5, 0])\n                circle(d = 4 + 2 * sin($t * 360 * 3));\n}\n\nmodule fingerboard() {\n    translate([50, 0, 10])\n        rotate([0, -10, 0])\n            scale([1, 0.2, 1])\n                cube([35, 25, 2], center = true);\n}\n\nmodule bridge() {\n    translate([10, 0, 6])\n        union() {\n            // Bridge feet\n            translate([-6, -7, 0])\n                cube([12, 4, 3]);\n            translate([-6, 3, 0])\n                cube([12, 4, 3]);\n            \n            // Bridge body\n            translate([-8, -7, 3])\n                cube([16, 14, 2]);\n            \n            // Heart cutout\n            translate([0, 0, 3])\n                cylinder(h = 3, d = 5);\n        }\n}\n\nmodule tailpiece() {\n    translate([-20, 0, 5])\n        rotate([0, 10, 0])\n        difference() {\n            scale([1, 0.3, 1])\n                cube([20, 20, 2], center = true);\n            \n            // String holes\n            for (x = [-7, -3, 3, 7])\n                translate([x, 0, 1])\n                    cylinder(h = 3, d = 1.5);\n        }\n}\n\nmodule strings() {\n    for (i = [-6:2:6]) {\n        color(\"silver\")\n        translate([60, i * 1.5, 10])\n            rotate([0, -10, 0])\n                cylinder(h = 80, d = 0.8);\n    }\n}\n\nmodule tuning_pegs() {\n    // Pegbox\n    translate([55, 0, 14])\n        rotate([0, -10, 0])\n            cube([10, 15, 8], center = true);\n    \n    // Pegs\n    for (i = [-1, 1])\n        for (j = [-1, 1])\n            translate([55 + j * 3, i * 5, 14 + i * 4])\n                rotate([0, 90, 0])\n                    cylinder(h = 8, d = 3);\n}\n\n// Assemble violotta\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        body();\n        neck();\n        fingerboard();\n        bridge();\n        tailpiece();\n        tuning_pegs();\n    }\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "baryton",
    "openscad_code": "// Baryton (medium-complexity realistic style)\n// Total length ~90 mm, printable in one piece\n\n$fn = 32;\n\nmodule body() {\n    // Main resonating body\n    difference() {\n        hull() {\n            translate([0,0,10]) cube([65,35,20], center=true);\n            translate([0,0,-10]) cube([55,30,20], center=true);\n        }\n        // Hollow cavity\n        translate([0,0,0]) cube([50,25,35], center=true);\n        // Sound holes (symmetrical f-holes simplified)\n        for (y = [-8, 8]) {\n            translate([20, y, 0])\n                rotate([90,0,0])\n                    cylinder(h=5, d1=2, d2=4);\n            translate([-20, y, 0])\n                rotate([90,0,0])\n                    cylinder(h=5, d1=2, d2=4);\n        }\n    }\n}\n\nmodule neck() {\n    // Neck with fingerboard\n    difference() {\n        // Neck shaft\n        translate([-42.5,0,25])\n            rotate([0,-10,0])\n                cube([40,8,12], center=true);\n        // Truss rod channel\n        translate([-42.5,0,25])\n            rotate([0,-10,0])\n                cube([38,4,8], center=true);\n    }\n    // Fingerboard\n    translate([-42.5,0,32])\n        rotate([0,-10,0])\n            cube([40,10,2], center=true);\n}\n\nmodule scroll() {\n    // Scroll head\n    difference() {\n        union() {\n            // Scroll volute\n            for (i = [0:180:540]) {\n                rotate([0,0,i])\n                    translate([-60+0.15*i,0,25])\n                        sphere(d=12-0.03*i);\n            }\n            // Pegbox\n            translate([-65,0,25])\n                cube([10,20,15], center=true);\n        }\n        // Peg holes (6 tuning peg positions)\n        for (i = [0:5]) {\n            translate([-65, (i<3 ? -8 : 8), 20+3*i])\n                rotate([90,0,0])\n                    cylinder(h=10, d=2);\n        }\n    }\n}\n\nmodule bridge() {\n    // Bridge feet\n    hull() {\n        translate([15, -12, 10])\n            cylinder(h=2, d=4);\n        translate([15, 12, 10])\n            cylinder(h=2, d=4);\n    }\n    // Bridge top\n    translate([15,0,12])\n        cube([2,20,8], center=true);\n}\n\nmodule tailpiece() {\n    // Tailpiece\n    difference() {\n        translate([30,0,8])\n            cube([10,25,3], center=true);\n        // Tailgut hole\n        translate([30,0,9.5])\n            cylinder(h=5, d=2);\n    }\n}\n\nmodule strings() {\n    // 6 playing strings\n    for (i = [-2.5:1:2.5]) {\n        color(\"goldenrod\")\n            hull() {\n                translate([-60, i*3.5, 32])\n                    sphere(d=0.8);\n                translate([15, i*3.5, 12])\n                    sphere(d=0.8);\n                translate([30, i*2, 8.5])\n                    sphere(d=0.8);\n            }\n    }\n    // 36 sympathetic strings (simplified as rods)\n    for (i = [0:35]) {\n        color(\"silver\")\n            hull() {\n                angle = 360/36 * i;\n                translate([-40, 0, 20])\n                    rotate([0,0,angle])\n                        sphere(d=0.3);\n                translate([25, 0, 10])\n                    rotate([0,0,angle])\n                        sphere(d=0.3);\n            }\n    }\n}\n\nmodule soundpost() {\n    // Internal soundpost\n    translate([0,0,0])\n        cylinder(h=35, d=3);\n}\n\n// Main assembly\nunion() {\n    body();\n    neck();\n    scroll();\n    bridge();\n    tailpiece();\n    strings();\n    soundpost();\n}",
    "renders": true
  },
  {
    "musical_instrument": "archlute",
    "openscad_code": "// Archlute - medium complexity realistic style\n// Designed for 3D printing, ~70mm total length\n\n$fn=32;\nstring_diameter = 0.4;\nwall_thickness = 1.2;\n\nmodule body_shell() {\n    difference() {\n        hull() {\n            // Main body pear shape\n            scale([1, 0.7, 0.4])\n                sphere(d=45);\n            // Extend lower bout\n            translate([0, -20, 0])\n                scale([1.2, 0.8, 0.3])\n                    sphere(d=25);\n        }\n        // Hollow interior\n        scale([0.8, 0.6, 0.35])\n            sphere(d=45);\n        // Sound hole\n        translate([0, -5, 2])\n            cylinder(h=3, d=12);\n    }\n}\n\nmodule neck() {\n    // Neck shaft\n    translate([0, 22, 10])\n        rotate([0, -15, 0])\n            scale([1, 0.8, 8])\n                cube([4, 3, 10], center=true);\n    \n    // Fingerboard\n    translate([0, 22, 13])\n        rotate([0, -15, 0])\n            scale([1.2, 1, 12])\n                cube([3, 2.5, 10], center=true);\n}\n\nmodule pegbox() {\n    // Main pegbox\n    translate([0, 32, 15])\n        rotate([0, -15, 0])\n            cube([6, 4, 12], center=true);\n    \n    // Pegbox extension for archlute\n    translate([0, 40, 15])\n        rotate([0, -15, 0])\n            scale([0.7, 0.7, 1])\n                cube([6, 4, 20], center=true);\n    \n    // Pegs - 6 main + 8 bass\n    for(i=[-2.5:1:2.5]) {\n        translate([i*2.2, 32, 9+i*0.5])\n            rotate([90, 0, 0])\n                cylinder(h=8, d1=2, d2=1);\n    }\n    for(i=[-3.5:1:3.5]) {\n        translate([i*1.5, 40, 5+i*0.3])\n            rotate([90, 0, 0])\n                cylinder(h=6, d1=1.5, d2=0.8);\n    }\n}\n\nmodule bridge() {\n    // Main bridge\n    translate([0, -15, 2.5])\n        cube([15, 2, 3]);\n    \n    // Bridge saddle\n    translate([0, -14, 6])\n        cube([14, 1, 0.5]);\n    \n    // Tie block\n    translate([0, -16, 2])\n        cube([12, 3, 1]);\n}\n\nmodule strings() {\n    // Main strings\n    for(i=[-2.5:1:2.5]) {\n        translate([i*1.5, 35, 10])\n            rotate([0, -15, 0])\n                cylinder(h=50, d=string_diameter);\n    }\n    \n    // Bass strings\n    for(i=[-3:1:3]) {\n        translate([i*1.2, 45, 8])\n            rotate([0, -15, 0])\n                cylinder(h=60, d=string_diameter);\n    }\n}\n\n// Assembly\nunion() {\n    body_shell();\n    neck();\n    pegbox();\n    bridge();\n    strings();\n}\n\n// Base for printing stability\ntranslate([0, 0, -2])\n    cube([50, 60, 2], center=true);",
    "renders": true
  },
  {
    "musical_instrument": "theorbo",
    "openscad_code": "// Theorbo - Medium complexity realistic style\n// Designed for 3D printing at ~70mm total length\n\n$fn = 32;  // Smoother curves for printing\n\n// Overall scale factor\nscale_factor = 0.3;\n\n// Main body module\nmodule theorbo_body() {\n    // Bowl back - simplified as ellipsoid\n    translate([0, 0, 15]) \n        scale([1.2, 1, 0.8])\n        sphere(20);\n    \n    // Neck\n    translate([0, 0, 30])\n        rotate([0, 90, 0])\n        cylinder(h=35, r1=3, r2=2);\n    \n    // Pegbox\n    translate([35, 0, 30])\n        rotate([0, 90, 0])\n        cylinder(h=15, r1=2.5, r2=3);\n    \n    // Extended theorbo neck\n    translate([50, 0, 30])\n        rotate([0, 90, 0])\n        cylinder(h=25, r1=2, r2=1.5);\n}\n\n// Bridge\nmodule bridge() {\n    translate([-18, 0, 15])\n        rotate([90, 0, 0])\n        cube([8, 1.5, 3], center=true);\n}\n\n// Sound hole\nmodule sound_hole() {\n    difference() {\n        theorbo_body();\n        translate([-5, 0, 15])\n            rotate([0, 90, 0])\n            cylinder(h=30, r=4, center=true);\n    }\n}\n\n// Frets\nmodule frets() {\n    for(i = [1:10]) {\n        translate([i*2.5, 0, 30])\n            rotate([90, 0, 0])\n            cylinder(h=6, r=0.5, $fn=8);\n    }\n}\n\n// Strings\nmodule strings() {\n    // Main strings (6)\n    for(i = [1:6]) {\n        translate([0, -7.5 + i*2.5, 15])\n            rotate([90, 0, 0])\n            cylinder(h=75, r=0.3);\n    }\n    \n    // Bass strings (8)\n    for(i = [1:8]) {\n        translate([50, -10 + i*2.5, 30])\n            rotate([90, 0, 0])\n            cylinder(h=30, r=0.4);\n    }\n}\n\n// Pegs\nmodule pegs() {\n    // Main pegs\n    for(i = [1:6]) {\n        translate([42, -6 + i*2.5, 30])\n            rotate([90, 90, 0])\n            cylinder(h=4, r=1);\n    }\n    \n    // Bass pegs\n    for(i = [1:8]) {\n        translate([75, -8 + i*2, 30])\n            rotate([90, 90, 0])\n            cylinder(h=4, r=1);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Body with sound hole\n        sound_hole();\n        \n        // Bridge\n        bridge();\n        \n        // Frets\n        color(\"brown\")\n        frets();\n        \n        // Strings\n        color(\"gold\")\n        strings();\n        \n        // Pegs\n        color(\"brown\")\n        pegs();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "chitarrone",
    "openscad_code": "// Chitarrone (long-neck lute) - medium complexity\n// Basic dimensions (mm)\ntotal_length = 90;\nbody_length = 40;\nbody_width = 30;\nbody_depth = 8;\nneck_length = 45;\nneck_width = 6;\nneck_depth = 4;\npegbox_length = 8;\npegbox_width = 7;\npegbox_depth = 5;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main body - pear-shaped bowl back\nmodule bowl_back() {\n    difference() {\n        // Outer shell - scaled spheres for pear shape\n        hull() {\n            translate([0, 0, body_depth/2])\n                scale([1, 0.7, 0.5])\n                sphere(d=body_width);\n            translate([0, body_length*0.3, 0])\n                scale([0.6, 1, 0.5])\n                sphere(d=body_width*0.8);\n            translate([0, -body_length*0.3, 0])\n                scale([1.2, 0.6, 0.5])\n                sphere(d=body_width);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -wall])\n            scale([0.85, 0.85, 0.7])\n            children();\n    }\n}\n\n// Flat soundboard with rose\nmodule soundboard() {\n    difference() {\n        // Main soundboard\n        translate([0, 0, body_depth])\n            cube([body_width, body_length, wall], center=true);\n            \n        // Sound hole rose (simple circle)\n        translate([0, body_length*0.2, body_depth+wall/2])\n            cylinder(h=wall+1, d=6, $fn=24);\n    }\n}\n\n// Neck with slight taper\nmodule neck() {\n    hull() {\n        translate([0, body_length/2 + neck_length/2, body_depth/2])\n            cube([neck_width, neck_length, neck_depth], center=true);\n        translate([0, body_length/2 + neck_length*0.8, body_depth/2])\n            cube([neck_width*0.8, neck_length*0.2, neck_depth*0.8], center=true);\n    }\n}\n\n// Pegbox angled back\nmodule pegbox() {\n    rotate([15, 0, 0])\n    translate([0, body_length/2 + neck_length + pegbox_length/2, body_depth/2 + 2])\n        cube([pegbox_width, pegbox_length, pegbox_depth], center=true);\n}\n\n// Tuning pegs\nmodule pegs() {\n    for(i = [-1, 1]) {\n        for(j = [0:2]) {\n            translate([i*pegbox_width/3, \n                      body_length/2 + neck_length + 2 + j*2, \n                      body_depth/2 + 4]) {\n                rotate([90, 0, 90])\n                    cylinder(h=3, d=1.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Frets (raised bands)\nmodule frets() {\n    for(i = [1:8]) {\n        translate([0, \n                  body_length/2 + i*4, \n                  body_depth/2 + neck_depth/2 + 0.5])\n            cube([neck_width*1.1, 0.5, 0.5], center=true);\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([0, -body_length*0.3, body_depth+wall])\n        cube([10, 2, 2], center=true);\n}\n\n// Strings (cylinders)\nmodule strings() {\n    for(i = [-1.5:1:1.5]) {\n        hull() {\n            translate([i, body_length/2 + neck_length, body_depth/2 + neck_depth/2])\n                sphere(d=0.5);\n            translate([i*2, -body_length*0.3, body_depth+wall+2])\n                sphere(d=0.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    color(\"saddlebrown\") {\n        bowl_back();\n        soundboard();\n    }\n    \n    // Neck and head\n    color(\"tan\") {\n        neck();\n        pegbox();\n    }\n    \n    // Details\n    color(\"brown\") pegs();\n    color(\"ivory\") frets();\n    color(\"black\") bridge();\n    color(\"silver\") strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "colascione",
    "openscad_code": "// Colascione - Medium Complexity Realistic Style\n// 3D printable model with proper wall thickness and no overhangs\n\n// Overall scale factor for printing\nscale_factor = 0.5;\n\n// Main dimensions\nbody_length = 60 * scale_factor;\nbody_radius = 12 * scale_factor;\nneck_length = 80 * scale_factor;\nneck_radius = 3 * scale_factor;\npegbox_length = 25 * scale_factor;\npegbox_width = 8 * scale_factor;\npegbox_height = 10 * scale_factor;\nbridge_height = 3 * scale_factor;\nbridge_length = 18 * scale_factor;\nsoundhole_radius = 4 * scale_factor;\nstring_thickness = 0.5 * scale_factor;\n\n// Body with rounded back\nmodule rounded_body() {\n    difference() {\n        // Main body shape - elongated sphere\n        scale([1, 1, 1.3]) \n        sphere(r = body_radius, $fn = 32);\n        \n        // Flat front\n        translate([0, 0, -body_radius * 1.3])\n        cube([body_radius * 2.2, body_radius * 2.2, body_radius * 2], center = true);\n        \n        // Sound hole\n        translate([0, 0, -body_radius * 1.2])\n        cylinder(h = body_radius * 2, r = soundhole_radius, $fn = 32);\n    }\n}\n\n// Neck with fret positions\nmodule neck() {\n    union() {\n        // Main neck\n        translate([-neck_length/2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = neck_length, r = neck_radius, $fn = 16);\n        \n        // Fingerboard - slightly wider than neck\n        translate([-neck_length/2, 0, neck_radius])\n        rotate([0, 90, 0])\n        scale([1.2, 1, 0.2])\n        cylinder(h = neck_length, r = neck_radius, $fn = 16);\n        \n        // Frets (6 frets spaced realistically)\n        for(i = [1:6]) {\n            fret_pos = -neck_length * 0.1 * i;\n            translate([fret_pos, 0, neck_radius * 1.2])\n            rotate([0, 90, 0])\n            cylinder(h = neck_radius * 2.4, r = string_thickness * 2, $fn = 8);\n        }\n    }\n}\n\n// Pegbox with tuning pegs\nmodule pegbox() {\n    union() {\n        // Main pegbox\n        translate([neck_length/2 + pegbox_length/2, 0, 0])\n        cube([pegbox_length, pegbox_width, pegbox_height], center = true);\n        \n        // Tuning pegs (6 pegs - 3 per side)\n        for(side = [0, 1]) {\n            for(i = [0:2]) {\n                peg_x = neck_length/2 + pegbox_length * 0.8;\n                peg_y = (side == 0 ? -1 : 1) * (pegbox_width/2 + 3 * scale_factor);\n                peg_z = (i - 1) * (pegbox_height/3);\n                \n                translate([peg_x, peg_y, peg_z])\n                rotate([90, 0, 90 * side])\n                cylinder(h = 6 * scale_factor, r = 1.5 * scale_factor, $fn = 8);\n            }\n        }\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([0, 0, body_radius * 1.3 + bridge_height/2])\n    difference() {\n        // Main bridge\n        cube([bridge_length, 3 * scale_factor, bridge_height], center = true);\n        \n        // String notches\n        for(i = [-1, 0, 1]) {\n            translate([i * bridge_length/4, 0, -bridge_height/2])\n            cube([string_thickness * 2, 4 * scale_factor, bridge_height], center = true);\n        }\n    }\n}\n\n// Strings\nmodule strings() {\n    for(i = [-1, 0, 1]) {\n        translate([i * string_thickness * 3, 0, 0])\n        hull() {\n            // Bridge attachment\n            translate([0, 0, body_radius * 1.3 + bridge_height])\n            sphere(r = string_thickness, $fn = 8);\n            \n            // Nut at end of neck\n            translate([-neck_length/2, 0, neck_radius * 1.2])\n            sphere(r = string_thickness, $fn = 8);\n            \n            // Pegbox attachment\n            peg_y = (i < 0 ? -1 : 1) * (pegbox_width/2 + 3 * scale_factor);\n            peg_z = (abs(i) < 0.5 ? 0 : (i < 0 ? 1 : -1)) * (pegbox_height/3);\n            translate([neck_length/2 + pegbox_length * 0.8, peg_y, peg_z])\n            sphere(r = string_thickness, $fn = 8);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, body_radius * 1.3])\nunion() {\n    // Body\n    rounded_body();\n    \n    // Neck\n    translate([0, 0, body_radius * 1.3])\n    neck();\n    \n    // Pegbox\n    pegbox();\n    \n    // Bridge\n    bridge();\n    \n    // Strings\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "mandora",
    "openscad_code": "// Mandora - Renaissance lute-like instrument\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Overall dimensions\nbody_length = 60;\nbody_width = 35;\nbody_depth = 12;\nneck_length = 45;\nhead_length = 20;\nscale = 0.8;\n\nmodule mandora() {\n    scale([scale, scale, scale]) {\n        // Main body bowl\n        difference() {\n            // Body shell\n            translate([0, 0, body_depth/2]) {\n                scale([1, 0.7, 0.5]) {\n                    sphere(d = body_width);\n                }\n            }\n            \n            // Hollow out interior\n            translate([0, 0, body_depth/2]) {\n                scale([0.85, 0.55, 0.4]) {\n                    sphere(d = body_width - 4);\n                }\n            }\n            \n            // Sound hole\n            translate([0, 0, body_depth - 1]) {\n                cylinder(h = 5, d = 8, $fn = 64);\n            }\n            \n            // Neck cavity\n            translate([-body_width/2 - 5, 0, body_depth/2]) {\n                cube([neck_length, 10, body_depth]);\n            }\n        }\n        \n        // Top plate\n        difference() {\n            translate([0, 0, body_depth - 1.5]) {\n                scale([1, 0.7, 1]) {\n                    cylinder(h = 3, d = body_width);\n                }\n            }\n            translate([0, 0, body_depth - 1.5]) {\n                cylinder(h = 5, d = 8, $fn = 64);\n            }\n        }\n        \n        // Neck\n        translate([body_length/2 - 5, 0, body_depth/2 + 2]) {\n            difference() {\n                cube([neck_length, 6, 8], center = true);\n                translate([0, 0, -2]) {\n                    cube([neck_length - 5, 4, 6], center = true);\n                }\n            }\n        }\n        \n        // Fingerboard\n        translate([body_length/2 + neck_length/2, 0, body_depth + 2]) {\n            cube([neck_length + 5, 5, 1.5], center = true);\n        }\n        \n        // Headstock\n        translate([body_length/2 + neck_length + head_length/2 - 5, 0, body_depth/2 + 4]) {\n            difference() {\n                rotate([0, 0, 15]) {\n                    cube([head_length, 8, 12], center = true);\n                }\n                // Tuning peg holes\n                for(i = [0:3]) {\n                    translate([head_length/2 - 5 - i*3, 0, 0]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h = 10, d = 2.5, $fn = 16);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Bridge\n        translate([-body_length/4, 0, body_depth]) {\n            cube([12, 2, 2], center = true);\n            // String notches\n            for(i = [0:3]) {\n                translate([-5 + i*3.3, 0, 1]) {\n                    cube([0.5, 2, 1]);\n                }\n            }\n        }\n        \n        // Nut\n        translate([body_length/2 + neck_length - 2, 0, body_depth + 3.5]) {\n            cube([3, 0.5, 1], center = true);\n        }\n        \n        // Strings\n        for(i = [0:3]) {\n            color(\"gold\") {\n                hull() {\n                    // Bridge to nut\n                    translate([-body_length/4, -5 + i*3.3, body_depth + 0.5]) {\n                        cylinder(h = 0.3, d = 0.3);\n                    }\n                    translate([body_length/2 + neck_length - 2, -1.5 + i, body_depth + 3.5]) {\n                        cylinder(h = 0.3, d = 0.3);\n                    }\n                }\n                \n                // Nut to tuning peg\n                translate([body_length/2 + neck_length - 2, -1.5 + i, body_depth + 3.5]) {\n                    cylinder(h = 0.3, d = 0.3);\n                }\n                translate([body_length/2 + neck_length + head_length/2 - 5 - i*3, -2, body_depth/2 + 4]) {\n                    cylinder(h = 0.3, d = 0.3);\n                }\n            }\n        }\n        \n        // Frets\n        fret_positions = [5, 10, 15, 20, 25, 30, 35, 40];\n        for(pos = fret_positions) {\n            translate([body_length/2 + pos/2, 0, body_depth + 2.75]) {\n                cube([0.5, 5.5, 1], center = true);\n            }\n        }\n        \n        // Tuning pegs\n        for(i = [0:3]) {\n            translate([body_length/2 + neck_length + head_length/2 - 5 - i*3, -2.5, body_depth/2 + 4]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 12, d1 = 2.5, d2 = 3.5);\n                }\n                translate([0, 6, 0]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h = 8, d1 = 1.5, d2 = 3);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmandora();",
    "renders": true
  },
  {
    "musical_instrument": "bandora",
    "openscad_code": "$fn = 50; // Smooth curves\n\n// Overall dimensions\nbody_len = 90;\nbody_wid = 55;\nbody_dep = 20;\nneck_len = 70;\nneck_wid = 12;\nneck_dep = 8;\nhead_len = 35;\nhead_wid = 10;\nhead_dep = 6;\n\n// Wall thickness for printing\nwall = 2;\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-body_len/2, 0, 0])\n                cube([body_len, body_wid, body_dep], center=true);\n            translate([-body_len/2 + 10, 0, 0])\n                sphere(d=body_wid);\n            translate([body_len/2 - 25, 0, 0])\n                sphere(d=body_wid);\n        }\n        \n        // Hollow cavity\n        hull() {\n            translate([-body_len/2, 0, -wall/2])\n                cube([body_len - wall*2, body_wid - wall*2, body_dep], center=true);\n            translate([-body_len/2 + 10, 0, 0])\n                sphere(d=body_wid - wall*2);\n            translate([body_len/2 - 25, 0, 0])\n                sphere(d=body_wid - wall*2);\n        }\n        \n        // Sound hole\n        translate([0, 0, body_dep/2 - wall])\n            cylinder(h=wall+1, d=15);\n    }\n}\n\n// Neck\nmodule neck() {\n    hull() {\n        translate([body_len/2 - 30, 0, body_dep/2 + neck_dep/2])\n            cube([neck_len, neck_wid, neck_dep], center=true);\n        translate([body_len/2 - 30 + neck_len - 5, 0, body_dep/2 + neck_dep/2])\n            cube([neck_wid*0.8, neck_wid*0.8, neck_dep], center=true);\n    }\n}\n\n// Headstock\nmodule headstock() {\n    translate([body_len/2 - 30 + neck_len, 0, body_dep/2 + neck_dep/2 + head_dep/2 - 2])\n        cube([head_len, head_wid, head_dep], center=true);\n}\n\n// Frets\nmodule frets() {\n    for (i = [1:11]) {\n        translate([body_len/2 - 30 + i*6, 0, body_dep/2 + neck_dep/2 + neck_dep/2])\n            cube([1, neck_wid + 2, 1], center=true);\n    }\n}\n\n// Strings\nmodule strings() {\n    for (s = [-1.5, -0.5, 0.5, 1.5]) {\n        translate([body_len/2 - 30 + neck_len/2, s*3, body_dep/2 + neck_dep/2 + neck_dep/2 + 1])\n            cylinder(h=neck_len, d=0.8);\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([0, 0, body_dep/2 - wall/2])\n        cube([2, body_wid - 10, 2], center=true);\n}\n\n// Tuning pegs\nmodule pegs() {\n    for (i = [0:3]) {\n        translate([body_len/2 - 30 + neck_len + head_len - 8, -head_wid/2 + 2 + i*2.5, body_dep/2 + neck_dep/2 + head_dep/2 - 2])\n            rotate([90, 0, 0])\n                cylinder(h=5, d=2);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    headstock();\n    frets();\n    bridge();\n    pegs();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "orpharion",
    "openscad_code": "// Orpharion - Renaissance wire-strung instrument\n// Medium complexity, realistic style, 3D printable\n\n// Overall scale factor for easy resizing\nscale_factor = 1.5;\n\n// Body parameters\nbody_length = 60 * scale_factor;\nbody_width = 30 * scale_factor;\nbody_depth = 8 * scale_factor;\n\n// Neck parameters\nneck_length = 40 * scale_factor;\nneck_width = 8 * scale_factor;\nneck_thickness = 5 * scale_factor;\n\n// Head parameters\nhead_length = 15 * scale_factor;\nhead_width = 12 * scale_factor;\nhead_thickness = 6 * scale_factor;\n\n// Bridge parameters\nbridge_height = 3 * scale_factor;\nbridge_width = 20 * scale_factor;\n\n// Number of strings\nstring_count = 9;\n\n// Wire thickness\nwire_diameter = 0.6 * scale_factor;\n\n// Create the complete orpharion\nmodule orpharion() {\n    // Main body with pear shape\n    body();\n    \n    // Neck with frets\n    neck();\n    \n    // Head with pegs\n    head();\n    \n    // Bridge\n    bridge();\n    \n    // Strings\n    strings();\n    \n    // Sound holes\n    sound_holes();\n}\n\n// Pear-shaped body using hull of spheres\nmodule body() {\n    // Create pear shape with hull\n    hull() {\n        translate([0, 0, body_depth/2])\n            sphere(d=body_width);\n        translate([body_length/2, 0, body_depth/2])\n            sphere(d=body_width*0.8);\n        translate([-body_length/2, 0, body_depth/2])\n            sphere(d=body_width*1.2);\n    }\n    \n    // Hollow out the body\n    difference() {\n        children();\n        hull() {\n            translate([0, 0, body_depth/2+1])\n                sphere(d=body_width-3);\n            translate([body_length/2, 0, body_depth/2+1])\n                sphere(d=body_width*0.8-3);\n            translate([-body_length/2, 0, body_depth/2+1])\n                sphere(d=body_width*1.2-3);\n        }\n    }\n}\n\n// Neck with frets\nmodule neck() {\n    color(\"peru\")\n    translate([-body_length/2 - neck_length/2, 0, body_depth/2 - neck_thickness/2])\n        cube([neck_length, neck_width, neck_thickness], center=true);\n    \n    // Frets\n    for(i = [1:12]) {\n        color(\"silver\")\n        translate([\n            -body_length/2 - neck_length + (neck_length/12)*i,\n            0,\n            body_depth/2 + neck_thickness/2 + 0.5\n        ])\n            cube([neck_width*1.1, 0.5, 0.5], center=true);\n    }\n}\n\n// Head with tuning pegs\nmodule head() {\n    color(\"peru\")\n    translate([-body_length/2 - neck_length - head_length/2, 0, body_depth/2 - head_thickness/2])\n        cube([head_length, head_width, head_thickness], center=true);\n    \n    // Tuning pegs\n    for(i = [0:string_count-1]) {\n        color(\"brown\")\n        translate([\n            -body_length/2 - neck_length - head_length + 2,\n            -head_width/2 + head_width/(string_count+1)*(i+1),\n            body_depth/2 + head_thickness/2\n        ])\n            cylinder(h=3, d=2, center=false);\n    }\n}\n\n// Bridge\nmodule bridge() {\n    color(\"brown\")\n    translate([body_length/4, 0, body_depth + bridge_height/2])\n        cube([bridge_width, 2, bridge_height], center=true);\n}\n\n// Strings\nmodule strings() {\n    for(i = [0:string_count-1]) {\n        color(\"gold\")\n        translate([\n            -body_length/2 - neck_length - head_length + 2,\n            -head_width/2 + head_width/(string_count+1)*(i+1),\n            body_depth/2 + head_thickness/2 + 1.5\n        ])\n            rotate([0, -5, 0])\n            linear_extrude(height=body_length + neck_length + head_length)\n                circle(d=wire_diameter);\n    }\n}\n\n// Sound holes (rosette pattern)\nmodule sound_holes() {\n    // Main circular hole\n    difference() {\n        translate([0, 0, body_depth/2])\n            cylinder(h=body_depth, d=body_width/3, center=true);\n        \n        // Decorative pattern\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n            translate([body_width/6, 0, 0])\n                cylinder(h=body_depth+1, d=2, center=true);\n        }\n    }\n}\n\n// Render the complete instrument\norpharion();",
    "renders": true
  },
  {
    "musical_instrument": "cittern",
    "openscad_code": "// Cittern (Renaissance string instrument) - OpenSCAD model\n// Medium complexity, realistic style, 3D printable\n\n// Global parameters\nbody_length = 60;\nbody_width = 35;\nbody_depth = 8;\nneck_length = 45;\nneck_width = 6;\nneck_thickness = 4;\nheadstock_length = 15;\n\n// Body\nmodule body() {\n    // Main body shell with wall thickness\n    difference() {\n        hull() {\n            // Upper bout\n            translate([0, body_width/2, 0])\n                scale([1, 0.8, 1])\n                sphere(d=body_width, $fn=20);\n            // Lower bout\n            translate([body_length*0.7, 0, 0])\n                scale([1.2, 1, 1])\n                sphere(d=body_width*1.1, $fn=20);\n            // Waist\n            translate([body_length*0.35, 0, 0])\n                cylinder(h=body_depth*1.5, d=body_width*0.7, $fn=20);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, -1])\n            scale([0.9, 0.9, 0.9])\n            hull() {\n                translate([0, body_width/2, 0])\n                    scale([1, 0.8, 1])\n                    sphere(d=body_width, $fn=20);\n                translate([body_length*0.7, 0, 0])\n                    scale([1.2, 1, 1])\n                    sphere(d=body_width*1.1, $fn=20);\n                translate([body_length*0.35, 0, 0])\n                    cylinder(h=body_depth*2, d=body_width*0.7, $fn=20);\n            }\n    }\n    \n    // Sound hole\n    translate([body_length*0.4, 0, body_depth-0.5])\n        cylinder(h=2, d=10, $fn=32);\n}\n\n// Neck\nmodule neck() {\n    difference() {\n        // Main neck\n        translate([body_length, 0, body_depth/2])\n            hull() {\n                translate([0, 0, 0])\n                    cube([neck_length, neck_width, neck_thickness], center=true);\n                translate([neck_length*0.8, 0, 0])\n                    scale([0.8, 0.8, 0.8])\n                    cube([neck_length*0.2, neck_width*0.8, neck_thickness*0.8], center=true);\n            }\n        \n        // Truss rod channel\n        translate([body_length+neck_length/2, 0, body_depth/2])\n            cube([neck_length*0.9, neck_width*0.3, neck_thickness*0.5], center=true);\n    }\n    \n    // Fingerboard\n    translate([body_length+neck_length/2, 0, body_depth/2+neck_thickness/2+0.5])\n        cube([neck_length*0.9, neck_width*1.1, 1], center=true);\n}\n\n// Headstock\nmodule headstock() {\n    difference() {\n        // Main headstock\n        translate([body_length+neck_length, 0, body_depth/2])\n            rotate([0, 0, 15])\n            cube([headstock_length, neck_width*1.5, neck_thickness*0.7], center=true);\n        \n        // Peg holes\n        for(i=[-1, 1]) {\n            for(j=[0:2]) {\n                translate([body_length+neck_length+headstock_length*0.2+j*4, i*neck_width*0.5, body_depth/2+neck_thickness*0.35])\n                    rotate([0, 90, 0])\n                    cylinder(h=3, d=1.5, $fn=16);\n            }\n        }\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([body_length*0.8, 0, body_depth-0.5])\n        difference() {\n            // Main bridge\n            cube([8, 12, 2], center=true);\n            \n            // String slots\n            for(i=[-1.5:1.5]) {\n                translate([i*2.5, 0, 1.5])\n                    cube([0.5, 12, 2], center=true);\n            }\n        }\n}\n\n// Strings\nmodule strings() {\n    // Nut\n    translate([body_length, 0, body_depth/2+neck_thickness/2+1])\n        cube([1, neck_width*1.1, 1], center=true);\n    \n    // Strings\n    for(i=[-2:2]) {\n        hull() {\n            // At bridge\n            translate([body_length*0.8, i*2.5, body_depth-0.5]);\n            // At nut\n            translate([body_length, i*2, body_depth/2+neck_thickness/2+1.5]);\n            // At tuner\n            translate([body_length+neck_length+headstock_length*0.8, i*2, body_depth/2+neck_thickness*0.35]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    headstock();\n    bridge();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "cetra",
    "openscad_code": "// Cetra from Final Fantasy VII – medium-realistic OpenSCAD model\n// Overall printable height ≈ 90 mm (printed vertically)\n\n$fn = 60;               // smooth curves\nwall = 1.6;             // 1.6 mm shell for FDM printing\nbody_h = 70;            // main harp body length\nbody_w = 28;            // width at sound box\nneck_len = 38;          // neck length above body\nhead_r = 12;            // head radius\n\n// ---------- Harp body ----------\nmodule body() {\n    difference() {\n        // main sound box – slightly tapered\n        hull() {\n            translate([0, 0, body_h/2])\n                scale([1.0, 1.1, 1.0])\n                cylinder(h = body_h, r1 = body_w/2 - wall, r2 = body_w/2);\n            translate([0, 0, body_h/2])\n                scale([0.8, 0.9, 1.0])\n                cylinder(h = body_h - 4, r1 = body_w/2 - wall - 3, r2 = body_w/2 - wall - 3);\n        }\n\n        // front sound hole\n        translate([0, 0, body_h/2 - 6])\n            cylinder(h = 10, r = 6, center = true);\n\n        // rear sound hole\n        translate([0, 0, body_h/2 + 6])\n            cylinder(h = 10, r = 6, center = true);\n    }\n}\n\n// ---------- Neck and head ----------\nmodule neck() {\n    union() {\n        // neck shaft\n        translate([0, 0, body_h + neck_len/2])\n            rotate([90, 0, 0])\n                cylinder(h = neck_len, r1 = 6, r2 = 5);\n\n        // head scroll\n        translate([0, 0, body_h + neck_len + head_r])\n            sphere(r = head_r);\n    }\n}\n\n// ---------- String posts (tuning pegs) ----------\nmodule pegs() {\n    for (i = [0:4]) {\n        angle = 90 + i * 15;\n        translate([0, 0, body_h + neck_len + head_r])\n            rotate([angle, 0, 0])\n                translate([head_r - 2, 0, 0])\n                    cylinder(h = 6, r = 1.4);\n    }\n}\n\n// ---------- Strings ----------\nmodule strings() {\n    for (i = [-2:2]) {\n        x = i * 3.5;\n        color(\"silver\")\n            hull() {\n                translate([x, 0, body_h - 6])\n                    sphere(r = 0.4);\n                translate([x, 0, body_h + neck_len + head_r - 6])\n                    sphere(r = 0.4);\n            }\n    }\n}\n\n// ---------- Sound hole rosette (decorative ring) ----------\nmodule rosette() {\n    difference() {\n        cylinder(h = 2, r = 8);\n        cylinder(h = 3, r = 6.5);\n    }\n}\n\n// ---------- Assembly ----------\nunion() {\n    body();\n    neck();\n    pegs();\n    strings();\n    translate([0, 0, body_h/2 - 7])\n        rosette();\n}\n\n// Base print platform – optional raft\n%translate([0, 0, -1])\n    cube([body_w + 8, body_w + 8, 1], center = true);",
    "renders": true
  },
  {
    "musical_instrument": "gittern",
    "openscad_code": "// Gittern - Realistic Medium Complexity\n// 3D printable model with no overhangs\n\n// Overall scale\nscale_factor = 0.7;\n\n// Body dimensions\nbody_length = 70 * scale_factor;\nbody_width = 40 * scale_factor;\nbody_depth = 15 * scale_factor;\n\n// Neck dimensions\nneck_length = 60 * scale_factor;\nneck_width = 12 * scale_factor;\nneck_thickness = 10 * scale_factor;\n\n// Headstock dimensions\nheadstock_length = 30 * scale_factor;\nheadstock_width = 18 * scale_factor;\nheadstock_thickness = 8 * scale_factor;\n\n// Sound hole radius\nsound_hole_radius = 8 * scale_factor;\n\n// String count\nstring_count = 4;\npeg_count = 8;\n\n// Module for rounded rectangle (used for body shape)\nmodule rounded_rectangle(w, l, h, r) {\n    hull() {\n        translate([r, r, 0]) cylinder(h=h, r=r, $fn=16);\n        translate([w-r, r, 0]) cylinder(h=h, r=r, $fn=16);\n        translate([w-r, l-r, 0]) cylinder(h=h, r=r, $fn=16);\n        translate([r, l-r, 0]) cylinder(h=h, r=r, $fn=16);\n    }\n}\n\n// Module for peg\nmodule peg() {\n    rotate([90, 0, 0]) {\n        cylinder(h=8*scale_factor, r=2*scale_factor, $fn=8);\n        translate([0, 0, 8*scale_factor]) sphere(r=2.5*scale_factor, $fn=8);\n    }\n}\n\n// Module for bridge\nmodule bridge() {\n    // Main bridge body\n    difference() {\n        translate([-15*scale_factor, -2*scale_factor, 0]) \n            cube([30*scale_factor, 4*scale_factor, 3*scale_factor]);\n        \n        // String grooves\n        for(i = [0:3]) {\n            translate([-10*scale_factor + i*7*scale_factor, -1*scale_factor, 2.5*scale_factor]) \n                cube([1*scale_factor, 2*scale_factor, 1*scale_factor]);\n        }\n    }\n}\n\n// Gittern body\nmodule body() {\n    difference() {\n        // Main body\n        scale([1, 1.2, 1]) \n            rounded_rectangle(body_width, body_length, body_depth, 15*scale_factor);\n        \n        // Sound hole\n        translate([body_width/2, body_length*0.7, -0.1]) \n            cylinder(h=body_depth+0.2, r=sound_hole_radius, $fn=32);\n        \n        // Neck cavity\n        translate([(body_width-neck_width)/2, body_length*0.9, -0.1]) \n            cube([neck_width, neck_length*0.3, body_depth+0.2]);\n    }\n}\n\n// Neck and fingerboard\nmodule neck() {\n    union() {\n        // Neck\n        translate([(body_width-neck_width)/2, body_length*0.9, 0]) \n            cube([neck_width, neck_length, neck_thickness]);\n        \n        // Fingerboard\n        translate([(body_width-neck_width)/2 - 1*scale_factor, body_length*0.9 - 5*scale_factor, neck_thickness]) \n            cube([neck_width + 2*scale_factor, neck_length + 5*scale_factor, 2*scale_factor]);\n        \n        // Frets\n        for(i = [1:10]) {\n            translate([(body_width-neck_width)/2, body_length*0.9 + i*5*scale_factor, neck_thickness + 2*scale_factor]) \n                cube([neck_width, 0.5*scale_factor, 0.5*scale_factor]);\n        }\n    }\n}\n\n// Headstock\nmodule headstock() {\n    difference() {\n        // Main headstock\n        translate([(body_width-headstock_width)/2, body_length*0.9 + neck_length, 0]) \n            cube([headstock_width, headstock_length, headstock_thickness]);\n        \n        // Peg holes\n        for(i = [0:3]) {\n            translate([(body_width-headstock_width)/2 + 4*scale_factor + i*3.5*scale_factor, \n                      body_length*0.9 + neck_length + 5*scale_factor, \n                      headstock_thickness/2]) \n                rotate([0, 90, 0]) cylinder(h=headstock_width, r=1.5*scale_factor, $fn=16);\n        }\n        \n        for(i = [0:3]) {\n            translate([(body_width-headstock_width)/2 + 4*scale_factor + i*3.5*scale_factor, \n                      body_length*0.9 + neck_length + headstock_length - 5*scale_factor, \n                      headstock_thickness/2]) \n                rotate([0, 90, 0]) cylinder(h=headstock_width, r=1.5*scale_factor, $fn=16);\n        }\n    }\n    \n    // Pegs\n    for(i = [0:3]) {\n        translate([(body_width-headstock_width)/2 + 4*scale_factor + i*3.5*scale_factor, \n                  body_length*0.9 + neck_length + 5*scale_factor, \n                  headstock_thickness/2 - 2*scale_factor]) peg();\n    }\n    \n    for(i = [0:3]) {\n        translate([(body_width-headstock_width)/2 + 4*scale_factor + i*3.5*scale_factor, \n                  body_length*0.9 + neck_length + headstock_length - 5*scale_factor, \n                  headstock_thickness/2 + 2*scale_factor]) \n            mirror([0, 0, 1]) peg();\n    }\n}\n\n// Strings\nmodule strings() {\n    for(i = [0:3]) {\n        // Nut to bridge\n        translate([(body_width-neck_width)/2 + 2*scale_factor + i*2.5*scale_factor, \n                  body_length*0.9 + neck_length + headstock_length - 5*scale_factor, \n                  neck_thickness + 2*scale_factor]) \n            cube([0.3*scale_factor, -neck_length - headstock_length + 10*scale_factor, 0.3*scale_factor]);\n        \n        // Bridge to tailpiece\n        translate([(body_width-neck_width)/2 + 2*scale_factor + i*2.5*scale_factor, \n                  body_length*0.9 + neck_length + headstock_length - 5*scale_factor, \n                  neck_thickness + 2*scale_factor]) \n            cube([0.3*scale_factor, -neck_length - headstock_length + 15*scale_factor, 0.3*scale_factor]);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    headstock();\n    bridge();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "vihuela",
    "openscad_code": "// Vihuela - Renaissance Guitar-like Instrument\n// Medium complexity realistic style\n// Overall length ~85mm, 3D printable with no supports\n\n// Parameters\n$fn = 32;\nbody_length = 55;\nbody_width = 35;\nbody_depth = 7;\nneck_length = 30;\nneck_width = 6;\nneck_thickness = 4;\nheadstock_length = 12;\nheadstock_width = 8;\nsoundhole_radius = 6;\nbridge_width = 12;\nbridge_height = 2;\nbridge_length = 3;\nfret_count = 7;\nstring_count = 6;\n\n// Main body with rounded back\nmodule body() {\n    // Flat front\n    translate([0, 0, body_depth/2])\n        difference() {\n            hull() {\n                // Main body shape\n                translate([-body_length/2, 0, 0])\n                    scale([1, 0.7, 1])\n                    sphere(d=body_width);\n                translate([body_length/2, 0, 0])\n                    scale([1, 0.7, 1])\n                    sphere(d=body_width);\n                // Waist\n                translate([-body_length/4, 0, 0])\n                    sphere(d=body_width*0.8);\n                translate([body_length/4, 0, 0])\n                    sphere(d=body_width*0.8);\n            }\n            // Sound hole\n            translate([0, 0, -body_depth])\n                cylinder(r=soundhole_radius, h=body_depth+1);\n        }\n    \n    // Curved back\n    translate([0, 0, -body_depth/2])\n        scale([1, 1, 0.6])\n        sphere(d=body_width*1.1);\n}\n\n// Neck with fretboard\nmodule neck() {\n    // Main neck\n    translate([body_length/2 + neck_length/2, 0, body_depth/2])\n        cube([neck_length, neck_width, neck_thickness], center=true);\n    \n    // Fretboard\n    translate([body_length/2 + neck_length/2, 0, body_depth/2 + neck_thickness/2 + 1])\n        cube([neck_length, neck_width*0.9, 2], center=true);\n    \n    // Frets\n    for(i = [1:fret_count]) {\n        translate([body_length/2 + 5 + i*3, 0, body_depth/2 + neck_thickness/2 + 2.1])\n            cube([0.5, neck_width*0.8, 1], center=true);\n    }\n}\n\n// Headstock\nmodule headstock() {\n    translate([body_length/2 + neck_length + headstock_length/2, 0, body_depth/2 + neck_thickness/2])\n        cube([headstock_length, headstock_width, neck_thickness], center=true);\n    \n    // Tuning pegs\n    for(i = [0:string_count-1]) {\n        peg_y = (i - string_count/2 + 0.5) * headstock_width/string_count;\n        translate([body_length/2 + neck_length + headstock_length - 3, peg_y, body_depth/2 + neck_thickness/2 + 2])\n            rotate([90, 0, 0])\n                cylinder(r=1, h=3);\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([-body_length/4, 0, body_depth/2 + 0.5])\n        cube([bridge_length, bridge_width, bridge_height], center=true);\n}\n\n// Strings\nmodule strings() {\n    for(i = [0:string_count-1]) {\n        string_y = (i - string_count/2 + 0.5) * neck_width/string_count;\n        // From nut to bridge\n        translate([body_length/2 + neck_length - 2, string_y, body_depth/2 + neck_thickness/2 + 2.5])\n            cube([body_length/4 + neck_length - 2, 0.3, 0.3]);\n    }\n}\n\n// Rosette around sound hole\nmodule rosette() {\n    translate([0, 0, body_depth/2 - 0.5])\n        difference() {\n            cylinder(r=soundhole_radius + 2, h=1);\n            cylinder(r=soundhole_radius + 1.5, h=1.1);\n        }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    headstock();\n    bridge();\n    rosette();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "chitarra",
    "openscad_code": "// Realistic chitarra (guitar) – medium complexity, 3D-printable\n// Overall length ≈ 80 mm, width ≈ 28 mm, thickness ≈ 8 mm\n\nmodule guitar() {\n    // Neck\n    color(\"tan\")\n    translate([-33,0,0])\n    cube([40,5,3], center=true);\n\n    // Headstock\n    color(\"tan\")\n    translate([-53,0,1.5])\n    cube([12,7,1.5], center=true);\n\n    // Body\n    color(\"brown\")\n    difference() {\n        union() {\n            // Main body\n            hull() {\n                translate([-5,0,0]) sphere(11);\n                translate([5,0,0]) sphere(11);\n                translate([0,12,0]) sphere(9);\n                translate([0,-12,0]) sphere(9);\n            }\n            // Waist\n            hull() {\n                translate([10,8,0]) sphere(9);\n                translate([10,-8,0]) sphere(9);\n                translate([18,0,0]) sphere(11);\n            }\n        }\n\n        // Sound hole\n        translate([5,0,1.5])\n        cylinder(h=5, r=5, center=true, $fn=32);\n    }\n\n    // Bridge\n    color(\"black\")\n    translate([12,0,2])\n    cube([6,2,0.5], center=true);\n\n    // Frets\n    for(i=[0:1:19]) {\n        color(\"silver\")\n        translate([-33 + i*2, 0, 2.5])\n        cube([0.5,5.2,0.3], center=true);\n    }\n\n    // Strings\n    for(s=[-1.2,-0.6,0,0.6,1.2]) {\n        color(\"silver\")\n        hull() {\n            translate([-53, s, 2.5]) sphere(0.3);\n            translate([15, s, 2.5]) sphere(0.3);\n        }\n    }\n\n    // Tuning pegs\n    for(i=[0:1:5]) {\n        color(\"silver\")\n        translate([-57 + (i%2)*14, (i<2?4:-4), 2.5])\n        rotate([90,0,0])\n        cylinder(h=2, r=1, $fn=12);\n    }\n}\n\nguitar();",
    "renders": true
  },
  {
    "musical_instrument": "guitarra",
    "openscad_code": "// Medium-complexity realistic guitarra (classical guitar shape) – 100 mm total length\n// Designed for easy FDM printing: 1.2 mm walls, no steep overhangs, split into printable parts\n\n// Overall scale factor\nscale_factor = 1;           // change to 0.5 if you want 50 mm length\n\n// Main dimensions (mm, after scaling)\nguitar_length = 100 * scale_factor;\nbody_len      = 50 * scale_factor;\nbody_w        = 38 * scale_factor;\nbody_d        = 11 * scale_factor;\nneck_len      = 45 * scale_factor;\nneck_w        = 6.5 * scale_factor;\nneck_h        = 4 * scale_factor;\nhead_len      = 11 * scale_factor;\nhead_w        = 9 * scale_factor;\nhead_h        = 3 * scale_factor;\nhole_d        = 9 * scale_factor;\n\n// Wall thickness\nwall = 1.2 * scale_factor;\n\nmodule body_shell() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-body_len/2, 0, 0])\n                sphere(d = body_w);\n            translate([body_len/2, 0, 0])\n                sphere(d = body_w * 0.8);\n        }\n        // Inner cavity\n        translate([0, 0, -wall])\n            scale([1, 1, 0.5])\n            hull() {\n                translate([-body_len/2 + wall, 0, wall])\n                    sphere(d = body_w - 2*wall);\n                translate([body_len/2 - wall, 0, wall])\n                    sphere(d = body_w * 0.8 - 2*wall);\n            }\n        // Sound hole\n        translate([body_len/6, 0, body_d/2])\n            cylinder(d = hole_d, h = body_d + 2, $fn = 32);\n    }\n}\n\nmodule neck() {\n    difference() {\n        // Neck solid\n        hull() {\n            translate([0, 0, 0])\n                cube([neck_len, neck_w, neck_h], center = true);\n            translate([neck_len * 0.8, 0, 0])\n                cube([neck_len * 0.2, neck_w * 0.9, neck_h * 0.9], center = true);\n        }\n        // Truss rod channel (optional)\n        translate([neck_len/2, 0, 0])\n            cube([neck_len * 0.6, 2*wall, 2*wall], center = true);\n    }\n}\n\nmodule headstock() {\n    difference() {\n        hull() {\n            cube([head_len, head_w, head_h], center = true);\n        }\n        // Tuner peg holes\n        for (i = [0:2]) {\n            translate([-head_len/2 + 3*wall + i*head_len/3,  head_w/4, 0])\n                rotate([90, 0, 0])\n                    cylinder(d = 2*wall, h = head_h + 2, $fn = 16);\n            translate([-head_len/2 + 3*wall + i*head_len/3, -head_w/4, 0])\n                rotate([90, 0, 0])\n                    cylinder(d = 2*wall, h = head_h + 2, $fn = 16);\n        }\n    }\n}\n\nmodule bridge() {\n    // Simple rectangular bridge\n    translate([body_len/3, 0, body_d/2])\n        cube([8*scale_factor, 12*scale_factor, 2*scale_factor], center = true);\n}\n\nmodule strings() {\n    // Six thin cylinders\n    for (i = [0:5]) {\n        y = (i - 2.5) * 1.2 * scale_factor;\n        color(\"silver\")\n            cylinder(d = 0.6 * scale_factor, h = guitar_length, center = false, $fn = 8);\n        translate([0, y, 0])\n            rotate([90, 0, 0])\n                cylinder(d = 0.6 * scale_factor, h = guitar_length, center = false, $fn = 8);\n    }\n}\n\n// Assemble the guitar\ntranslate([0, 0, body_d/2])\n    body_shell();\n\ntranslate([body_len/2 + neck_len/2, 0, body_d/2])\n    neck();\n\ntranslate([body_len/2 + neck_len + head_len/2, 0, body_d/2 + head_h/2 - 0.5*scale_factor])\n    headstock();\n\nbridge();\n\n// Strings positioned along centerline\ntranslate([body_len/2 + neck_len/2, 0, body_d/2 + head_h])\n    rotate([0, 90, 0])\n        strings();",
    "renders": true
  },
  {
    "musical_instrument": "bandolin",
    "openscad_code": "// Bandolin - Realistic Style, Medium Complexity\n// Based on traditional 8-string Colombian bandolin\n// Overall length ~90mm, designed for 3D printing\n\n$fn = 32;\nbody_len = 50;\nbody_w = 35;\nbody_h = 6;\n\nneck_len = 40;\nneck_w = 8;\nneck_h = 10;\nheadstock_len = 20;\nheadstock_w = 12;\nheadstock_h = 4;\n\nbridge_h = 2;\nbridge_w = 20;\nbridge_pos = body_len * 0.75;\n\nmodule body() {\n    // Main body - carved top style\n    difference() {\n        union() {\n            // Main body shape\n            hull() {\n                translate([-body_len/2, -body_w/2, 0])\n                    cube([body_len, body_w, body_h]);\n                translate([-body_len/2 + 5, -body_w/2 + 5, 0])\n                    sphere(d=body_w - 10);\n                translate([body_len/2 - 5, -body_w/2 + 5, 0])\n                    sphere(d=body_w - 10);\n            }\n            \n            // Rounded back\n            translate([0, 0, -body_h/2])\n                scale([1.1, 1.1, 0.5])\n                sphere(d=body_w);\n        }\n        \n        // Sound hole\n        translate([0, 0, body_h - 0.5])\n            cylinder(h=3, d1=12, d2=10);\n        \n        // Rounded edges\n        for(i = [-1, 1]) {\n            translate([i * (body_len/2 - 5), 0, body_h/2])\n                rotate([0, 90, 0])\n                cylinder(h=body_w - 10, d=body_h, center=true);\n        }\n    }\n}\n\nmodule neck() {\n    // Neck with truss rod cavity\n    difference() {\n        hull() {\n            // Tapered neck\n            translate([body_len/2 - 2, -neck_w/2, body_h - 0.5])\n                cube([neck_len, neck_w, neck_h]);\n            translate([body_len/2 + neck_len - 5, -headstock_w/2, body_h - 0.5])\n                cube([5, headstock_w, headstock_h]);\n        }\n        \n        // Truss rod access\n        translate([body_len/2 + neck_len - 10, 0, body_h + neck_h/2])\n            cube([15, 4, 3], center=true);\n    }\n    \n    // Fretboard\n    translate([body_len/2, -neck_w/2 - 0.5, body_h + neck_h - 2])\n        cube([neck_len, neck_w + 1, 2]);\n    \n    // Frets\n    for(i = [1:12]) {\n        pos = body_len/2 + i * (neck_len / 13);\n        translate([pos, -neck_w/2 - 1, body_h + neck_h - 2.1])\n            cube([0.5, neck_w + 2, 2.2]);\n    }\n}\n\nmodule headstock() {\n    // Headstock with tuners\n    translate([body_len/2 + neck_len, -headstock_w/2, body_h - 0.5])\n        cube([headstock_len, headstock_w, headstock_h]);\n    \n    // Tuning pegs (8 total - 4 per side)\n    for(i = [0:3]) {\n        y_pos = -headstock_w/2 + 3 + i * 2;\n        translate([body_len/2 + neck_len + 3, y_pos, body_h + headstock_h])\n            cylinder(h=3, d=2);\n        translate([body_len/2 + neck_len + 3, -y_pos, body_h + headstock_h])\n            cylinder(h=3, d=2);\n    }\n}\n\nmodule bridge() {\n    // Bridge with saddle\n    translate([bridge_pos, 0, body_h])\n        union() {\n            cube([bridge_w, 3, bridge_h]);\n            translate([0, 0, bridge_h])\n                cube([bridge_w - 4, 2, 0.5]);\n        }\n}\n\nmodule tailpiece() {\n    // Simple tailpiece\n    translate([-body_len/2 + 2, 0, body_h])\n        cube([6, 8, 2]);\n}\n\nmodule strings() {\n    // 8 strings in 4 courses\n    for(i = [0:3]) {\n        y_pos = -4 + i * 2.5;\n        translate([-body_len/2 + 3, y_pos, body_h + 1])\n            cylinder(h=body_len + neck_len + headstock_len - 6, d=0.5);\n        translate([-body_len/2 + 3, y_pos + 0.5, body_h + 1])\n            cylinder(h=body_len + neck_len + headstock_len - 6, d=0.5);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    headstock();\n    bridge();\n    tailpiece();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "octavina",
    "openscad_code": "// Octavina (Philippine Rondalla guitar-lute) – medium-complexity 3-D printable model\n// Overall length ≈ 90 mm, body width ≈ 45 mm, height ≈ 17 mm\n// All overhangs < 45°, wall thickness 1.2 mm for FDM printing\n\n$fn = 32;            // smooth curves\nwall = 1.2;          // universal wall/shell thickness\nscale = 0.4;         // model scale (real instrument is 660 mm long)\n\nmodule octavina() {\n    difference() {\n        union() {\n            body();\n            neck();\n            peghead();\n            bridge();\n            tailpiece();\n            strings();\n        }\n        \n        // large hollow body cavity\n        translate([0, 0, wall]) scale([0.82, 0.82, 0.75]) body(solid = true);\n        \n        // sound-hole\n        translate([25*scale, 0, 16*scale]) rotate([90,0,0])\n            cylinder(h = 20*scale, d = 18*scale, $fn = 48);\n    }\n}\n\n// pear-shaped body\nmodule body(solid = false) {\n    hull() {\n        // upper bout\n        translate([-30*scale, 0, 0])\n            sphere(d = 40*scale);\n        // lower bout\n        translate([20*scale, 0, 0])\n            sphere(d = 50*scale);\n        // waist\n        translate([-5*scale, 0, 0])\n            sphere(d = 28*scale);\n    }\n    \n    if (!solid) {\n        // flat top and back\n        difference() {\n            cube([90*scale, 45*scale, 16*scale], center = true);\n            translate([0,0,-8*scale])\n                cube([90*scale, 43*scale, 14*scale], center = true);\n        }\n    }\n}\n\n// neck with frets\nmodule neck() {\n    translate([-45*scale, 0, 8*scale])\n        rotate([0,-3,0])           // slight angle for realistic action\n        difference() {\n            cube([50*scale, 6.5*scale, 8*scale], center = true);\n            \n            // truss-rod cavity (optional, helps printing)\n            translate([0,0,2*scale])\n                cube([45*scale, 3*scale, 2*scale], center = true);\n        }\n    \n    // frets\n    for(i = [1:14]) {\n        translate([-45*scale + i*3.2*scale, 0, 12*scale])\n            rotate([0,90,0])\n                cylinder(h = 6.8*scale, d = 0.8*scale);\n    }\n}\n\n// scroll-style peghead\nmodule peghead() {\n    translate([-70*scale, 0, 9*scale])\n        rotate([0,-3,0])\n        union() {\n            // head plate\n            cube([20*scale, 28*scale, 6*scale], center = true);\n            \n            // scroll\n            for (a = [0:15:165])\n                translate([-4*scale, -12*scale + a*0.12, 0])\n                    rotate([0,0,a])\n                        sphere(d = 10*scale - a*0.05);\n            \n            // pegs\n            for (x = [-6,6])\n                for (y = [-7.5, -2.5, 2.5, 7.5])\n                    translate([-70*scale + x*scale, y*scale, 9*scale + 3*scale])\n                        rotate([90,0,0])\n                            cylinder(h = 8*scale, d = 2.2*scale);\n        }\n}\n\n// tie-on bridge\nmodule bridge() {\n    translate([15*scale, 0, 16.5*scale])\n        union() {\n            // base\n            cube([20*scale, 30*scale, 2.5*scale], center = true);\n            // saddle\n            translate([0,0,1.5*scale])\n                cube([20*scale, 1.5*scale, 1*scale], center = true);\n        }\n}\n\n// simple tailpiece\nmodule tailpiece() {\n    translate([35*scale, 0, 16.5*scale])\n        cube([10*scale, 20*scale, 1.5*scale], center = true);\n}\n\n// 14 nylon strings (simplified cylinders)\nmodule strings() {\n    for(i=[-6.5:1:6.5]) {\n        color(\"ivory\")\n        translate([-70*scale, i*2*scale, 9*scale])\n            rotate([0,atan((35+70)*scale/7.5),0])\n                cylinder(h = 105*scale, d = 0.4*scale);\n    }\n}\n\noctavina();",
    "renders": true
  },
  {
    "musical_instrument": "citole",
    "openscad_code": "// Citole - medieval stringed instrument\n// Realistic style, medium complexity\n\n// Overall dimensions\nbody_length = 75;\nbody_width = 30;\nbody_depth = 12;\nneck_length = 45;\nneck_width = 8;\nneck_depth = 8;\nhead_length = 20;\nhead_width = 8;\nhead_depth = 8;\n\n// Wall thickness for printing\nwall_thickness = 2;\n\nmodule body() {\n    // Main body shape - teardrop\n    difference() {\n        // Outer body\n        hull() {\n            translate([-body_length/2, 0, 0])\n                cylinder(h=body_depth, r=body_width/2, $fn=50);\n            translate([body_length/2, 0, 0])\n                sphere(r=body_width/2);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            scale([0.8, 0.8, 0.8])\n            hull() {\n                translate([-body_length/2, 0, 0])\n                    cylinder(h=body_depth, r=body_width/2-wall_thickness, $fn=50);\n                translate([body_length/2, 0, 0])\n                    sphere(r=body_width/2-wall_thickness);\n            }\n    }\n    \n    // Sound hole - simple circle\n    translate([body_length/4, 0, body_depth-wall_thickness])\n        cylinder(h=wall_thickness*2, r=5, $fn=32);\n    \n    // Bridge\n    translate([body_length/3, 0, body_depth])\n        cube([12, 2, 2], center=true);\n}\n\nmodule neck() {\n    // Main neck\n    translate([body_length/2 - neck_width/2, 0, body_depth/2])\n        cube([neck_length, neck_width, neck_depth], center=true);\n    \n    // Fingerboard\n    translate([body_length/2 + neck_length/2 - 5, 0, body_depth/2 + neck_depth/2 + 1])\n        cube([neck_length + 5, neck_width - 2, 2], center=true);\n    \n    // Frets\n    for(i = [1:5]) {\n        translate([body_length/2 + i*7, 0, body_depth/2 + neck_depth/2 + 2.5])\n            cube([1, neck_width - 1, 1], center=true);\n    }\n}\n\nmodule head() {\n    // Peg head\n    translate([body_length/2 + neck_length - head_width/2, 0, body_depth/2])\n        cube([head_length, head_width, head_depth], center=true);\n    \n    // Tuning pegs\n    for(i = [0:3]) {\n        translate([body_length/2 + neck_length + 5, -head_width/2 + 2 + i*2, body_depth/2])\n            rotate([90, 0, 0])\n                cylinder(h=10, r=1, $fn=12);\n    }\n}\n\nmodule strings() {\n    // Four strings\n    for(i = [0:3]) {\n        translate([body_length/2 + neck_length + head_length, -neck_width/2 + 1.5 + i*2, body_depth/2 + neck_depth/2])\n            cube([-(body_length/2 + neck_length + head_length - body_length/3), 0.5, 0.5], center=false);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    head();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "rota",
    "openscad_code": "// Realistic Rota (Water Wheel) - Medium Complexity\n// 3D printable water wheel with bucket details and sturdy frame\n\n// Parameters\nwheel_diameter = 60;\nwheel_thickness = 4;\naxle_diameter = 6;\naxle_length = 10;\nbucket_width = 8;\nbucket_depth = 5;\nbucket_thickness = 1.5;\nnum_buckets = 12;\nspoke_thickness = 2;\nspoke_width = 3;\nframe_height = 40;\nframe_base_width = 20;\nframe_base_thickness = 3;\n\n// Main wheel assembly\nmodule water_wheel() {\n    // Central axle\n    rotate([90, 0, 0])\n        cylinder(h=axle_length, d=axle_diameter, center=true);\n    \n    // Wheel rim with slight taper for realism\n    rotate([90, 0, 0])\n        cylinder(h=wheel_thickness, d=wheel_diameter, center=true);\n    \n    // Inner hub\n    rotate([90, 0, 0])\n        cylinder(h=wheel_thickness + 2, d=wheel_diameter * 0.3, center=true);\n    \n    // Spokes\n    for(i = [0:num_buckets-1]) {\n        rotate([0, 0, i * 360/num_buckets])\n            translate([0, wheel_diameter/4, 0])\n                cube([spoke_width, wheel_diameter/2 - 5, wheel_thickness], center=true);\n    }\n    \n    // Buckets\n    for(i = [0:num_buckets-1]) {\n        rotate([0, 0, i * 360/num_buckets + 15]) // Offset for realistic positioning\n        translate([0, wheel_diameter/2 - bucket_depth/2, 0])\n        rotate([0, 90, 0])\n        difference() {\n            // Main bucket body\n            cube([bucket_width, bucket_depth, bucket_thickness], center=true);\n            \n            // Hollow out bucket\n            translate([0, 0, bucket_thickness/2])\n                cube([bucket_width - 1, bucket_depth - 1, bucket_thickness + 1], center=true);\n        }\n    }\n}\n\n// Support frame\nmodule frame() {\n    // Left support\n    translate([-wheel_diameter/2 - 5, 0, 0])\n    difference() {\n        // Main support beam\n        cube([frame_base_thickness, frame_base_width, frame_height]);\n        \n        // Axle hole\n        translate([frame_base_thickness/2, frame_base_width/2, frame_height - 10])\n            rotate([0, 90, 0])\n                cylinder(h=20, d=axle_diameter + 1, center=true);\n    }\n    \n    // Right support (mirror of left)\n    translate([wheel_diameter/2 + 5, 0, 0])\n    mirror([1, 0, 0])\n        children(0);\n    \n    // Base\n    translate([0, 0, 0])\n        cube([wheel_diameter + 15, frame_base_width, frame_base_thickness]);\n}\n\n// Assembly\nframe();\ntranslate([0, frame_base_width/2, frame_height - 10])\n    water_wheel();",
    "renders": true
  },
  {
    "musical_instrument": "rotte",
    "openscad_code": "// Rotte (Medieval Rat Trap) - Realistic Style, Medium Complexity\n\n// Overall dimensions\ntrap_length = 80;\ntrap_width = 40;\ntrap_height = 30;\nwall_thickness = 2;\n\nmodule base_frame() {\n    // Bottom plate\n    difference() {\n        cube([trap_length, trap_width, wall_thickness], center=true);\n        // Drainage holes\n        for(x = [-30, -10, 10, 30])\n            translate([x, 0, -wall_thickness/2])\n                cylinder(h=wall_thickness+1, r=2, center=true, $fn=16);\n    }\n    \n    // Side walls\n    translate([0, trap_width/2 - wall_thickness/2, trap_height/2 - wall_thickness/2])\n        cube([trap_length, wall_thickness, trap_height], center=true);\n    translate([0, -trap_width/2 + wall_thickness/2, trap_height/2 - wall_thickness/2])\n        cube([trap_length, wall_thickness, trap_height], center=true);\n    \n    // End walls\n    translate([trap_length/2 - wall_thickness/2, 0, trap_height/2 - wall_thickness/2])\n        cube([wall_thickness, trap_width, trap_height], center=true);\n    translate([-trap_length/2 + wall_thickness/2, 0, trap_height/2 - wall_thickness/2])\n        cube([wall_thickness, trap_width, trap_height], center=true);\n}\n\nmodule wire_mesh() {\n    wire_diameter = 1;\n    spacing = 5;\n    \n    // Top mesh\n    translate([0, 0, trap_height - wall_thickness/2])\n    difference() {\n        cube([trap_length - wall_thickness*2, trap_width - wall_thickness*2, wire_diameter], center=true);\n        \n        // Grid pattern\n        for(x = [-trap_length/2 + spacing; x < trap_length/2 - spacing; x = x + spacing) {\n            translate([x, 0, 0])\n                cube([wire_diameter, trap_width - wall_thickness*2 + 1, wire_diameter*2], center=true);\n        }\n        \n        for(y = [-trap_width/2 + spacing; y < trap_width/2 - spacing; y = y + spacing) {\n            translate([0, y, 0])\n                cube([trap_length - wall_thickness*2 + 1, wire_diameter, wire_diameter*2], center=true);\n        }\n    }\n}\n\nmodule trigger_mechanism() {\n    // Trigger plate\n    translate([-trap_length/4, 0, wall_thickness])\n    cube([15, trap_width - wall_thickness*4, 1], center=true);\n    \n    // Trigger wire\n    translate([-trap_length/4, 0, wall_thickness + 5])\n    rotate([90, 0, 0])\n        cylinder(h=5, r=0.5, center=true, $fn=8);\n    \n    // Bait holder\n    translate([-trap_length/4, 0, wall_thickness + 1.5])\n    cylinder(h=3, r=3, $fn=16);\n}\n\nmodule door_mechanism() {\n    door_height = trap_height - wall_thickness*2;\n    door_width = trap_width - wall_thickness*2;\n    \n    // Door guides\n    translate([trap_length/2 - wall_thickness*2, 0, trap_height/2])\n    difference() {\n        cube([wall_thickness*3, door_width, door_height], center=true);\n        translate([0, 0, 0])\n            cube([wall_thickness, door_width - wall_thickness, door_height - wall_thickness], center=true);\n    }\n    \n    // Door\n    translate([trap_length/2 - wall_thickness*2, 0, trap_height/2])\n    cube([wall_thickness*0.5, door_width - wall_thickness*2, door_height - wall_thickness*2], center=true);\n}\n\nmodule handle() {\n    handle_length = 30;\n    handle_width = 15;\n    \n    translate([-trap_length/2 - handle_length/2, 0, trap_height/2])\n    difference() {\n        cube([handle_length, handle_width, wall_thickness*2], center=true);\n        // Grip holes\n        for(i = [0:1])\n            translate([i*10 - 5, 0, 0])\n                cylinder(h=wall_thickness*2 + 1, r=3, center=true, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    base_frame();\n    wire_mesh();\n    trigger_mechanism();\n    door_mechanism();\n    handle();\n}",
    "renders": true
  },
  {
    "musical_instrument": "crwth",
    "openscad_code": "// Crwth - Realistic Style, Medium Complexity\n// 3D printable Welsh bowed lyre\n\n// Overall dimensions: ~85mm x ~45mm x ~15mm\n\n// Parameters\nbody_length = 75;\nbody_width = 40;\nbody_thickness = 12;\nneck_length = 30;\nneck_width = 8;\nneck_thickness = 6;\nheadstock_length = 15;\nheadstock_width = 12;\nheadstock_thickness = 8;\nbridge_height = 3;\nbridge_width = 25;\nsoundhole_radius = 6;\nstring_count = 6;\nwall_thickness = 2;\nfingerboard_thickness = 2;\n\n// Main body module\nmodule crwth_body() {\n    difference() {\n        // Main body shape\n        hull() {\n            // Upper bout\n            translate([-body_length/2 + 10, 0, 0])\n                scale([1, 0.8, 1])\n                    sphere(d=body_width, $fn=20);\n            \n            // Lower bout\n            translate([body_length/2 - 15, 0, 0])\n                sphere(d=body_width, $fn=20);\n            \n            // Waist\n            translate([0, 0, 0])\n                cylinder(h=body_thickness, d=body_width * 0.7, center=true, $fn=20);\n        }\n        \n        // Hollow out interior\n        difference() {\n            // Main cavity\n            scale([0.8, 0.8, 0.7])\n                hull() {\n                    translate([-body_length/2 + 10, 0, 0])\n                        scale([1, 0.8, 1])\n                            sphere(d=body_width, $fn=20);\n                    \n                    translate([body_length/2 - 15, 0, 0])\n                        sphere(d=body_width, $fn=20);\n                    \n                    translate([0, 0, 0])\n                        cylinder(h=body_thickness, d=body_width * 0.7, center=true, $fn=20);\n                }\n            \n            // Soundholes (6 ovals)\n            for(i=[-1:1]) {\n                translate([10 + i * 15, 0, body_thickness/2 - wall_thickness - 0.1])\n                    scale([1.2, 0.8, 1])\n                        cylinder(h=wall_thickness + 0.2, d=soundhole_radius * 2, $fn=20);\n            }\n            \n            translate([10, 0, -body_thickness/2 + wall_thickness + 0.1])\n                scale([1.2, 0.8, 1])\n                    cylinder(h=wall_thickness + 0.2, d=soundhole_radius * 2, $fn=20);\n            \n            translate([30, 0, -body_thickness/2 + wall_thickness + 0.1])\n                scale([1.2, 0.8, 1])\n                    cylinder(h=wall_thickness + 0.2, d=soundhole_radius * 2, $fn=20);\n        }\n    }\n}\n\n// Neck module\nmodule crwth_neck() {\n    union() {\n        // Neck\n        translate([body_length/2 - 5, 0, body_thickness/2 + neck_thickness/2])\n            cube([neck_length, neck_width, neck_thickness], center=true);\n        \n        // Headstock\n        translate([body_length/2 + neck_length - 5, 0, body_thickness/2 + neck_thickness + headstock_thickness/2])\n            cube([headstock_length, headstock_width, headstock_thickness], center=true);\n        \n        // Fingerboard\n        translate([body_length/2 + neck_length/2 - 5, 0, body_thickness/2 + neck_thickness + fingerboard_thickness/2])\n            cube([neck_length + 5, neck_width - 2, fingerboard_thickness], center=true);\n    }\n}\n\n// Bridge module\nmodule crwth_bridge() {\n    translate([0, 0, body_thickness/2 + bridge_height/2])\n        cube([bridge_width, body_width * 0.3, bridge_height], center=true);\n}\n\n// Pegs module\nmodule crwth_pegs() {\n    // Pegs on headstock\n    for(i=[0:2]) {\n        translate([body_length/2 + neck_length + 5, -headstock_width/3 + i * headstock_width/3, \n                   body_thickness/2 + neck_thickness + headstock_thickness - 2])\n            rotate([90, 0, 0])\n                cylinder(h=8, d1=4, d2=2, $fn=8);\n    }\n    \n    for(i=[0:2]) {\n        translate([body_length/2 + neck_length + 5, headstock_width/3 - i * headstock_width/3, \n                   body_thickness/2 + neck_thickness + 2])\n            rotate([90, 0, 0])\n                cylinder(h=8, d1=4, d2=2, $fn=8);\n    }\n}\n\n// Strings module\nmodule crwth_strings() {\n    for(i=[0:string_count-1]) {\n        translate([body_length/2 - 5, -neck_width/2 + neck_width * i/(string_count-1) + 1, \n                   body_thickness/2 + neck_thickness + fingerboard_thickness])\n            cylinder(h=neck_length + headstock_length, d=0.5, $fn=4);\n    }\n}\n\n// Assembly\nunion() {\n    crwth_body();\n    crwth_neck();\n    crwth_bridge();\n    crwth_pegs();\n    crwth_strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "crowd",
    "openscad_code": "// Realistic crowd scene - medium complexity\n// 3D printable with no overhangs, ~80mm wide\n\n$fn = 32;\n\n// Base platform for crowd\nmodule platform() {\n    difference() {\n        cube([80, 60, 3], center = true);\n        translate([0, 0, -0.5])\n            cube([78, 58, 4], center = true);\n    }\n}\n\n// Realistic human figure with simplified anatomy\nmodule person(height, pos_x, pos_y, rot_z, body_type) {\n    // Scale factor based on height\n    scale_factor = height / 25;\n    \n    translate([pos_x, pos_y, 1.5]) {\n        rotate([0, 0, rot_z]) {\n            scale([scale_factor, scale_factor, scale_factor]) {\n                \n                // Head - oval shape\n                translate([0, 0, 22])\n                    scale([0.8, 0.9, 1.1])\n                        sphere(r = 2.5);\n                \n                // Neck\n                translate([0, 0, 19])\n                    cylinder(r = 1.2, h = 2);\n                \n                // Body - tapered torso\n                union() {\n                    // Chest\n                    translate([0, 0, 13])\n                        scale([1, 0.6, 1.2])\n                            sphere(r = 3.5);\n                    \n                    // Abdomen\n                    translate([0, 0, 8])\n                        scale([0.9, 0.5, 1])\n                            sphere(r = 3);\n                    \n                    // Hips\n                    translate([0, 0, 5])\n                        scale([0.8, 0.5, 0.6])\n                            sphere(r = 3.2);\n                }\n                \n                // Arms\n                for(side = [-1, 1]) {\n                    // Upper arm\n                    translate([side * 3.5, 0, 15]) {\n                        rotate([0, side * 15, 0])\n                            cylinder(r = 1, h = 5);\n                        \n                        // Lower arm\n                        translate([0, 0, 5]) {\n                            rotate([0, side * 25, 0])\n                                cylinder(r = 0.8, h = 4);\n                            \n                            // Hand\n                            translate([0, 0, 4])\n                                sphere(r = 1);\n                        }\n                    }\n                }\n                \n                // Legs\n                for(side = [-1, 1]) {\n                    // Thigh\n                    translate([side * 1.5, 0, 3]) {\n                        rotate([0, side * 5, 0])\n                            cylinder(r = 1.2, h = 6);\n                        \n                        // Calf\n                        translate([0, 0, 6]) {\n                            rotate([0, side * -5, 0])\n                                cylinder(r = 1, h = 5);\n                            \n                            // Foot\n                            translate([0, 1.5, 5])\n                                scale([1.2, 2, 0.5])\n                                    cube([2, 2, 2], center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate varied crowd\nmodule crowd() {\n    // Front row - taller people\n    for(i = [0:4]) {\n        x_pos = -30 + i * 15;\n        y_pos = -20;\n        angle = -10 + i * 5;\n        person(25 + (i % 3) * 2, x_pos, y_pos, angle, 0);\n    }\n    \n    // Middle row - medium height\n    for(i = [0:5]) {\n        x_pos = -32 + i * 13;\n        y_pos = -5;\n        angle = -5 + i * 3;\n        person(22 + (i % 2) * 3, x_pos, y_pos, angle, 1);\n    }\n    \n    // Back row - varied heights\n    for(i = [0:6]) {\n        x_pos = -35 + i * 11;\n        y_pos = 10;\n        angle = -3 + i * 2;\n        person(20 + (i % 4) * 4, x_pos, y_pos, angle, 2);\n    }\n    \n    // Far back - smaller figures\n    for(i = [0:7]) {\n        x_pos = -38 + i * 10;\n        y_pos = 25;\n        angle = -2 + i * 1.5;\n        person(18 + (i % 3) * 2, x_pos, y_pos, angle, 3);\n    }\n}\n\n// Assembly\nplatform();\ncrowd();",
    "renders": true
  },
  {
    "musical_instrument": "fidla",
    "openscad_code": "// Fidla (Slovak folk violin) - Realistic style, medium complexity\n// Overall dimensions: ~95mm length, ~32mm width, ~15mm thickness\n\n// Parameters\nbody_length = 60;\nbody_width = 32;\nbody_thickness = 15;\nneck_length = 35;\nneck_width = 6;\npegbox_length = 12;\npeg_length = 8;\npeg_diameter = 3;\nbridge_height = 8;\nbridge_width = 20;\nsoundpost_diameter = 3;\nstrings = 4;\nstring_diameter = 0.5;\nf_hole_width = 8;\nf_hole_length = 20;\n\n// Main body - violin shape\nmodule violin_body() {\n    difference() {\n        // Main body shape\n        hull() {\n            // Upper bout\n            translate([body_length*0.75, 0, 0])\n                scale([0.3, 0.7, 1])\n                sphere(d=body_width, $fn=32);\n            \n            // C-bout waist\n            translate([body_length*0.5, 0, 0])\n                scale([0.4, 0.4, 1])\n                sphere(d=body_width*0.8, $fn=32);\n            \n            // Lower bout\n            translate([body_length*0.25, 0, 0])\n                scale([0.35, 0.8, 1])\n                sphere(d=body_width, $fn=32);\n        }\n        \n        // Cut flat back\n        translate([body_length/2, 0, -body_thickness/2 - 0.1])\n            cube([body_length, body_width, body_thickness], center=true);\n        \n        // Top plate arching\n        translate([body_length/2, 0, body_thickness/2 - 2])\n            scale([1, 1, 0.3])\n            sphere(d=body_width*1.2, $fn=32);\n    }\n}\n\n// F-holes\nmodule f_holes() {\n    for(side = [-1, 1]) {\n        translate([body_length*0.5, side*body_width*0.3, body_thickness/2 - 1]) {\n            rotate([0, 0, side * 15])\n            linear_extrude(height=2) {\n                // Upper hole\n                translate([0, -f_hole_length/4, 0])\n                    circle(d=f_hole_width/2, $fn=16);\n                // Lower hole\n                translate([0, f_hole_length/4, 0])\n                    circle(d=f_hole_width/2, $fn=16);\n                // Connecting slit\n                hull() {\n                    translate([0, -f_hole_length/4, 0])\n                        circle(d=f_hole_width/3, $fn=8);\n                    translate([0, f_hole_length/4, 0])\n                        circle(d=f_hole_width/3, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Neck and fingerboard\nmodule neck() {\n    union() {\n        // Neck proper\n        translate([body_length + neck_length/2, 0, 0])\n            scale([1, 0.8, 0.5])\n            cube([neck_length, neck_width, body_thickness*0.8], center=true);\n        \n        // Fingerboard\n        translate([body_length + neck_length/2, 0, body_thickness/2 + 1])\n            scale([1.1, 1.2, 0.2])\n            cube([neck_length, neck_width*1.5, 2], center=true);\n    }\n}\n\n// Pegbox and pegs\nmodule pegbox() {\n    // Pegbox\n    translate([body_length + neck_length + pegbox_length/2, 0, 0])\n        cube([pegbox_length, neck_width*1.5, body_thickness*0.8], center=true);\n    \n    // Pegs\n    for(i = [0:3]) {\n        translate([body_length + neck_length + pegbox_length*0.7, \n                  (i-1.5)*neck_width*0.4, \n                  0]) {\n            rotate([90, 0, -30 + i*15])\n                cylinder(h=peg_length, d=peg_diameter, $fn=12);\n        }\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([body_length*0.35, 0, body_thickness/2 + bridge_height/2])\n    difference() {\n        // Bridge shape\n        hull() {\n            cube([bridge_width*0.1, bridge_width*0.8, bridge_height], center=true);\n            translate([0, 0, bridge_height/2])\n                cube([bridge_width*0.05, bridge_width*0.6, 0.5], center=true);\n        }\n        \n        // String notches\n        for(i = [0:3]) {\n            translate([(i-1.5)*bridge_width*0.15, 0, bridge_height/2 - 0.5])\n                cube([string_diameter+0.2, bridge_width, 2], center=true);\n        }\n    }\n}\n\n// Tailpiece\nmodule tailpiece() {\n    translate([body_length*0.15, 0, body_thickness/2 + 2])\n    hull() {\n        cube([5, 20, 2], center=true);\n        cube([8, 3, 2], center=true);\n    }\n}\n\n// Strings\nmodule strings() {\n    for(i = [0:3]) {\n        // From nut to bridge\n        translate([body_length + neck_length, \n                  (i-1.5)*neck_width*0.3, \n                  body_thickness/2 + 1.5]) {\n            color(\"silver\")\n            cube([-(body_length*0.65), string_diameter, string_diameter]);\n        }\n        \n        // From bridge to tailpiece\n        translate([body_length*0.35, \n                  (i-1.5)*bridge_width*0.15, \n                  body_thickness/2 + bridge_height]) {\n            color(\"silver\")\n            cube([-(body_length*0.2), string_diameter, string_diameter]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    violin_body();\n    neck();\n    pegbox();\n    bridge();\n    tailpiece();\n    strings();\n}\n\n// Add details\nf_holes();",
    "renders": true
  },
  {
    "musical_instrument": "nyckelharpa",
    "openscad_code": "// Nyckelharpa - Swedish keyed fiddle\n// Medium complexity realistic model for 3D printing\n\n$fn = 32;\nbody_length = 80;\nbody_width = 35;\nbody_thickness = 15;\nneck_length = 60;\nhead_length = 25;\n\nmodule body() {\n    // Main body of nyckelharpa\n    difference() {\n        // Main body shape\n        hull() {\n            translate([-body_width/2, 0, 0])\n                cylinder(h=body_thickness, d=body_width*0.8);\n            translate([body_width/2, body_length-20, 0])\n                cylinder(h=body_thickness, d=body_width*0.6);\n            translate([0, body_length-10, 0])\n                cube([body_width*1.2, 20, body_thickness], center=true);\n        }\n        \n        // Sound holes\n        for(i=[-1,1]) {\n            translate([i*10, body_length-35, -1])\n                rotate([0, 0, i*15])\n                    scale([1, 2, 1])\n                        cylinder(h=body_thickness+2, d=8);\n        }\n        \n        // Bridge slot\n        translate([0, body_length-45, body_thickness/2])\n            cube([25, 5, 3], center=true);\n    }\n}\n\nmodule neck() {\n    // Neck and fingerboard\n    color(\"tan\")\n    difference() {\n        // Neck\n        translate([0, -neck_length, 0])\n            cube([12, neck_length, 8], center=true);\n        \n        // Truss rod channel\n        translate([0, -neck_length/2, 2])\n            cube([3, neck_length-10, 3], center=true);\n    }\n    \n    // Fingerboard\n    color(\"black\")\n    translate([0, -neck_length-5, 4])\n        cube([14, neck_length+10, 2], center=true);\n}\n\nmodule head() {\n    // Scroll head\n    translate([0, -neck_length-10, 0])\n        rotate([90, 0, 0])\n            cylinder(h=15, d1=12, d2=8);\n    \n    // Tuning pegs\n    color(\"brown\")\n    for(i=[-1,1]) {\n        for(j=[0,1,2]) {\n            translate([i*8, -neck_length-15-j*8, 8])\n                rotate([90, 0, 0])\n                    cylinder(h=12, d=3);\n            translate([i*8, -neck_length-15-j*8, 20])\n                sphere(d=5);\n        }\n    }\n}\n\nmodule keys() {\n    // Key mechanism\n    color(\"silver\")\n    for(i=[0:11]) {\n        translate([0, -neck_length+10+i*4.5, 6])\n            rotate([0, 20, 0])\n                cube([2, 8, 2]);\n        translate([0, -neck_length+10+i*4.5, 8])\n            cube([2, 12, 1]);\n    }\n}\n\nmodule strings() {\n    // Strings\n    color(\"gold\")\n    for(i=[-3:3]) {\n        translate([i*2, -neck_length-head_length, 7])\n            cylinder(h=body_length+neck_length+head_length, d=0.5);\n    }\n}\n\nmodule tailpiece() {\n    // Tailpiece\n    color(\"brown\")\n    translate([0, body_length-8, body_thickness-2])\n        cube([20, 15, 5], center=true);\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    head();\n    keys();\n    strings();\n    tailpiece();\n}",
    "renders": true
  },
  {
    "musical_instrument": "moraharpa",
    "openscad_code": "// Moraharpa - Scandinavian keyed fiddle\n// Realistic style, medium complexity\n\n$fn = 64;\nwall = 1.5;\n\nmodule body() {\n    // Main body - hollowed box with rounded edges\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-15, -25, 0]) cylinder(h=35, r=3);\n            translate([15, -25, 0]) cylinder(h=35, r=3);\n            translate([15, 25, 0]) cylinder(h=35, r=3);\n            translate([-15, 25, 0]) cylinder(h=35, r=3);\n        }\n        \n        // Hollow interior\n        hull() {\n            translate([-13, -23, 2]) cylinder(h=31, r=2);\n            translate([13, -23, 2]) cylinder(h=31, r=2);\n            translate([13, 23, 2]) cylinder(h=31, r=2);\n            translate([-13, 23, 2]) cylinder(h=31, r=2);\n        }\n        \n        // Sound holes\n        translate([0, -10, 35]) rotate([90, 0, 0]) cylinder(h=5, r=4);\n        translate([0, 10, 35]) rotate([90, 0, 0]) cylinder(h=5, r=4);\n    }\n}\n\nmodule neck() {\n    // Neck and fingerboard\n    union() {\n        // Neck\n        translate([0, 0, 35]) rotate([0, 10, 0]) \n            cube([8, 12, 40], center=true);\n        \n        // Fingerboard\n        translate([0, 0, 58]) rotate([0, 10, 0])\n            cube([6, 10, 30], center=true);\n    }\n}\n\nmodule keys() {\n    // Key mechanism\n    for(i = [-2:1:2]) {\n        translate([i*4 + 2, 15, 40]) {\n            // Key arm\n            rotate([90, 0, 0]) cylinder(h=20, r=0.8);\n            \n            // Key head\n            translate([0, 0, 20]) sphere(r=1.5);\n            \n            // Key pad\n            translate([0, -8, 0]) rotate([0, 90, 0]) \n                cube([2, 4, 0.5], center=true);\n        }\n    }\n}\n\nmodule bridge() {\n    // Bridge for strings\n    translate([0, 0, 35]) \n        cube([20, 2, 3], center=true);\n}\n\nmodule tailpiece() {\n    // Tailpiece\n    translate([0, -22, 35])\n        cube([12, 4, 2], center=true);\n}\n\nmodule pegs() {\n    // Tuning pegs\n    for(i = [-1.5:1:1.5]) {\n        translate([i*3, 0, 70]) rotate([0, 90, 0])\n            cylinder(h=8, r=1.2);\n    }\n}\n\nmodule strings() {\n    // String representation\n    for(i = [-6:3:6]) {\n        translate([i/2, -25, 36]) \n            cylinder(h=60, r=0.3);\n    }\n}\n\nmodule base() {\n    // Flat base for printing stability\n    translate([0, 0, -0.5])\n        cube([40, 60, 1], center=true);\n}\n\n// Assembly\nunion() {\n    base();\n    body();\n    neck();\n    keys();\n    bridge();\n    tailpiece();\n    pegs();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "symphony",
    "openscad_code": "// Symphony Orchestra Set – realistic, medium complexity\n// All dimensions in mm; model ≈ 90 mm long\n// Designed for FDM printing: no overhangs >45°, 1 mm walls\n\n$fn=32;          // smooth curves\n\n// ---------- global scale ----------\nmodule orchestra() {\n    difference(){\n        union(){\n            stage();\n            rows_of_musicians();\n            conductor_podium();\n            music_stand();\n        }\n        translate([0,0,-1]) cube([200,200,2]);  // ensure flat bottom\n    }\n}\n\n// ---------- stage ----------\nmodule stage(){\n    // main floor\n    translate([0,-20,0]) cube([90,60,3], center=true);\n    // low back wall\n    translate([0,10,14]) cube([90,2,28], center=true);\n}\n\n// ---------- conductor podium ----------\nmodule conductor_podium(){\n    translate([0,-28,0])\n    union(){\n        // base\n        cube([18,18,5], center=true);\n        // small riser\n        translate([0,0,5]) cube([14,14,3], center=true);\n    }\n}\n\n// ---------- violinist figure ----------\nmodule violinist(x,y,angle){\n    translate([x,y,3]) rotate([0,0,angle]) {\n        // body\n        color(\"black\")\n        union(){\n            cube([4,2,11], center=true);\n            // head\n            translate([0,-1.5,7]) sphere(2);\n        }\n        // violin\n        color(\"chocolate\")\n        translate([2.8,0,4]) rotate([90,0,0])\n        scale([1,0.3,1]) cylinder(h=7, d=3);\n        // bow\n        color(\"silver\")\n        translate([4.5,0,4]) rotate([0,90,0])\n        cylinder(h=12, d=0.6);\n    }\n}\n\n// ---------- cellist figure ----------\nmodule cellist(x,y,angle){\n    translate([x,y,3]) rotate([0,0,angle]) {\n        // body seated\n        color(\"black\")\n        union(){\n            cube([4,5,6], center=true);      // torso\n            translate([0,-3,0]) cube([4,3,5], center=true); // legs\n            translate([0,-5,2]) sphere(2);   // head\n        }\n        // cello\n        color(\"tan\")\n        translate([0,2,0]) rotate([90,0,0])\n        scale([1,0.4,1]) cylinder(h=12, d=4);\n    }\n}\n\n// ---------- rows of musicians ----------\nmodule rows_of_musicians(){\n    // first violins (left arc)\n    for(i=[-15:5:15])\n        violinist(i-25, 0, 20);\n    // second violins (right arc)\n    for(i=[-15:5:15])\n        violinist(i+25, 0, -20);\n    // cellos (center back)\n    for(i=[-10:10:10])\n        cellist(i, 15, 0);\n    // double basses (far back corners)\n    for(i=[-35,35])\n        cellist(i, 25, 0);\n}\n\n// ---------- conductor music stand ----------\nmodule music_stand(){\n    translate([0,-35,8])\n    union(){\n        // post\n        cylinder(h=30, d=2);\n        // stand desk\n        translate([0,0,15]) rotate([90,0,0])\n        cube([14,10,1], center=true);\n    }\n}\n\norchestra();",
    "renders": true
  },
  {
    "musical_instrument": "psaltery",
    "openscad_code": "// Psaltery - OpenSCAD medium complexity model\n// 3D printable, realistic style\n\nbody_length = 85;\nbody_width = 45;\nbody_thickness = 4;\nsoundhole_radius = 8;\npin_row_offset = 5;\npin_spacing = 4;\nnum_strings = 12;\nbridge_height = 2;\nbridge_width = 3;\nbridge_length = body_width * 0.8;\n\nmodule psaltery_body() {\n    difference() {\n        // Main body shape - trapezoid\n        hull() {\n            translate([-body_length/2, -body_width/2, 0])\n                cube([body_length, body_width, body_thickness]);\n            translate([-body_length/2 + 10, -body_width/2 + 5, 0])\n                cube([body_length - 20, body_width - 10, body_thickness]);\n        }\n        \n        // Sound hole\n        translate([body_length * 0.3, 0, -1])\n            cylinder(h = body_thickness + 2, r = soundhole_radius, $fn = 32);\n        \n        // String holes at bottom\n        for(i = [0 : num_strings - 1]) {\n            translate([body_length/2 - 5, -body_width/2 + 5 + i * pin_spacing, -1])\n                cylinder(h = body_thickness + 2, r = 1, $fn = 8);\n        }\n    }\n}\n\nmodule tuning_pins() {\n    // Pins at the top\n    for(i = [0 : num_strings - 1]) {\n        translate([-body_length/2 + 3, -body_width/2 + 5 + i * pin_spacing, body_thickness])\n            cylinder(h = 6, r = 1.5, $fn = 8);\n    }\n    \n    // Bridge pins at bottom\n    for(i = [0 : num_strings - 1]) {\n        translate([body_length/2 - 8, -body_width/2 + 5 + i * pin_spacing, body_thickness])\n            cylinder(h = 3, r = 1, $fn = 6);\n    }\n}\n\nmodule bridge() {\n    // Bridge piece\n    translate([body_length * 0.4, 0, body_thickness])\n        cube([bridge_width, bridge_length, bridge_height], center = true);\n}\n\nmodule soundboard_details() {\n    // Light engraving lines for decoration\n    for(i = [1 : 3]) {\n        translate([-body_length/2 + 10, -body_width/2 + 10, body_thickness - 0.1])\n            cube([body_length - 20, 0.5, 0.2]);\n    }\n    \n    // Rosette around sound hole\n    difference() {\n        cylinder(h = 0.5, r1 = soundhole_radius + 3, r2 = soundhole_radius + 4, $fn = 32);\n        cylinder(h = 0.6, r = soundhole_radius + 2.5, $fn = 32);\n    }\n}\n\n// Assembly\nunion() {\n    psaltery_body();\n    \n    translate([body_length * 0.3, 0, 0])\n        soundboard_details();\n    \n    tuning_pins();\n    bridge();\n}",
    "renders": true
  },
  {
    "musical_instrument": "dulcimer",
    "openscad_code": "// Appalachian Dulcimer - Realistic medium-complexity model\n// Overall length ~85 mm, printable without supports\n\n// Parameters\nbody_l      = 70;   // main body length\nbody_w      = 30;   // widest point\nbody_h      =  8;   // body thickness\nneck_l      = 50;\nneck_w      =  7;\nneck_h      =  5;\nhead_l      = 10;\nhead_w      = 12;\nhead_h      =  4;\nhole_d      = 10;\nwall_t      =  1.5; // printable wall thickness\nfret_n      =  8;\nstring_n    =  4;\n\nmodule body_shell() {\n    // hollowed teardrop body\n    hull() {\n        translate([-body_l/2, 0, 0]) cube([body_l, wall_t, body_h], center=true);\n        translate([body_l/2-5, 0, 0]) cube([10, body_w, body_h], center=true);\n    }\n    difference() {\n        hull() {\n            translate([-body_l/2, 0, 0]) cube([body_l, wall_t, body_h], center=true);\n            translate([body_l/2-5, 0, 0]) cube([10, body_w, body_h], center=true);\n        }\n        scale([0.85,0.85,0.85]) hull() {\n            translate([-body_l/2, 0, 0]) cube([body_l, wall_t, body_h-wall_t*2], center=true);\n            translate([body_l/2-5, 0, 0]) cube([10, body_w-wall_t, body_h-wall_t*2], center=true);\n        }\n    }\n}\n\nmodule sound_holes() {\n    // two traditional heart-shaped sound holes built from spheres & cubes\n    for(x=[-body_l/4, body_l/4]) {\n        translate([x, body_w/4, body_h/2]) {\n            difference() {\n                sphere(d=hole_d, $fn=32);\n                translate([0, hole_d/4, 0]) cube([hole_d*1.2, hole_d/2, hole_d], center=true);\n                rotate([0,0,90]) translate([0, hole_d/4, 0]) cube([hole_d*1.2, hole_d/2, hole_d], center=true);\n            }\n        }\n    }\n}\n\nmodule fretboard() {\n    // raised fingerboard with frets\n    translate([0, 0, body_h/2+neck_h/2])\n    cube([neck_l, neck_w, neck_h], center=true);\n    \n    // metal frets\n    for(i=[1:fret_n]) {\n        pos = -neck_l/2 + i*(neck_l/(fret_n+1));\n        translate([pos, 0, body_h/2+neck_h])\n        cube([0.5, neck_w+1, 1], center=true);\n    }\n}\n\nmodule peghead() {\n    // scrolled peghead with tuners\n    translate([body_l/2+neck_l/2+head_l/2, 0, body_h/2+neck_h/2-head_h/2])\n    cube([head_l, head_w, head_h], center=true);\n    \n    // simple friction pegs\n    for(i=[0:string_n-1]) {\n        y = -head_w/2 + (i+0.5)*(head_w/string_n);\n        translate([body_l/2+neck_l/2+head_l-2, y, body_h/2+neck_h/2-head_h/2])\n        rotate([0,90,0]) cylinder(h=head_h*1.2, d=1.5, $fn=16);\n    }\n}\n\nmodule strings() {\n    // nylon strings\n    for(i=[0:string_n-1]) {\n        y = -neck_w/2 + (i+0.5)*(neck_w/string_n);\n        hull() {\n            translate([-body_l/2, y, body_h/2+neck_h*0.8])\n            sphere(d=0.5, $fn=8);\n            translate([body_l/2+neck_l/2+head_l-2, y, body_h/2+neck_h*0.8])\n            sphere(d=0.5, $fn=8);\n        }\n    }\n}\n\nmodule bridge() {\n    // small maple bridge near tail\n    translate([-body_l/2+5, 0, body_h/2])\n    cube([2, neck_w, 2], center=true);\n}\n\n// Assembly\nunion() {\n    body_shell();\n    sound_holes();\n    fretboard();\n    peghead();\n    bridge();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "cimbalom",
    "openscad_code": "// Cimbalom - realistic medium complexity\n// Overall dimensions: 80 x 50 x 15 mm\n\n$fn = 32;\n\n// Main parameters\nbody_w = 80;\nbody_d = 50;\nbody_h = 8;\nwall_t = 2;\nleg_h = 7;\n\n// Strings\nstring_d = 0.6;\nstring_pitch = 2.5;\nstrings_per_course = 4;\n\nmodule cimbalom_body() {\n    difference() {\n        // Main body\n        cube([body_w, body_d, body_h], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -wall_t/2])\n            cube([body_w - 2*wall_t, body_d - 2*wall_t, body_h], center=true);\n        \n        // Sound holes\n        for (x = [-body_w/4, body_w/4])\n            for (y = [-body_d/4, body_d/4])\n                translate([x, y, 0])\n                    cylinder(h=body_h, d=6, center=true);\n    }\n}\n\nmodule leg() {\n    // Tapered leg\n    linear_extrude(height=leg_h, scale=[0.8, 0.8])\n        square([8, 8], center=true);\n}\n\nmodule legs() {\n    // Four legs at corners\n    for (x = [-body_w/2 + 6, body_w/2 - 6])\n        for (y = [-body_d/2 + 6, body_d/2 - 6])\n            translate([x, y, -body_h/2 - leg_h/2])\n                leg();\n}\n\nmodule string_course(x, y, length, angle) {\n    // Hitch pins\n    translate([x - length/2, y, body_h/2 - 1])\n        cylinder(h=2, d=1.5);\n    translate([x + length/2, y, body_h/2 - 1])\n        cylinder(h=2, d=1.5);\n    \n    // Strings\n    for (i = [0:strings_per_course-1]) {\n        translate([0, 0, body_h/2 - 0.5 + i*string_pitch/4])\n            rotate([0, 0, angle])\n                translate([x, y - string_pitch*i/2, 0])\n                    cube([length, string_d, string_d], center=true);\n    }\n}\n\nmodule stringing_pattern() {\n    // Bass courses\n    for (i = [0:5]) {\n        string_course(-body_w/3 + i*8, 0, body_d*0.8, 90);\n    }\n    \n    // Mid courses\n    for (i = [0:7]) {\n        string_course(-body_w/3 + i*6, 12, body_d*0.7, 90);\n    }\n    \n    // Treble courses\n    for (i = [0:9]) {\n        string_course(-body_w/2.5 + i*5, -12, body_d*0.6, 90);\n    }\n}\n\nmodule bridge() {\n    // Treble bridge\n    translate([body_w/4, 0, body_h/2 - 0.5])\n        cube([body_w/6, body_d*0.9, 2]);\n    \n    // Bass bridge\n    translate([-body_w/4, 0, body_h/2 - 0.5])\n        cube([body_w/6, body_d*0.9, 2]);\n}\n\nmodule damper_bar() {\n    // Damper rail\n    translate([0, body_d/2 - 3, body_h/2 + 1])\n        cube([body_w*0.9, 2, 2]);\n    \n    // Dampers\n    for (x = [-body_w/2+5:5:body_w/2-5]) {\n        translate([x, body_d/2 - 3, body_h/2 - 0.5])\n            cube([0.5, 2, 3]);\n    }\n}\n\n// Assembly\nunion() {\n    cimbalom_body();\n    legs();\n    stringing_pattern();\n    bridge();\n    damper_bar();\n}",
    "renders": true
  },
  {
    "musical_instrument": "yangqin",
    "openscad_code": "// Yangqin model for 3D printing\n// Medium complexity, realistic style\n\n// Overall dimensions\nbody_length = 80;\nbody_width = 45;\nbody_height = 8;\nleg_height = 15;\nleg_diameter = 3;\nbridge_height = 4;\nbridge_width = 2;\nstring_diameter = 0.5;\nhammer_length = 20;\nhammer_diameter = 2;\n\n// Main body\nmodule yangqin_body() {\n    difference() {\n        // Main trapezoid-shaped body\n        hull() {\n            translate([-body_length/2, -body_width/2, 0])\n                cube([body_length, body_width, body_height]);\n            translate([-body_length/2 + 10, -body_width/2 - 3, 0])\n                cube([body_length - 20, body_width + 6, body_height]);\n        }\n        \n        // Sound holes - traditional yangqin has 4 round holes\n        for(x = [-25, -8, 8, 25]) {\n            translate([x, 0, body_height - 0.5])\n                cylinder(h=2, d=6, $fn=32);\n        }\n        \n        // Underside cavity\n        translate([-body_length/2 + 2, -body_width/2 + 2, -0.5])\n            cube([body_length - 4, body_width - 4, body_height - 2]);\n    }\n}\n\n// Bridge system\nmodule bridges() {\n    // High pitch bridge (left side)\n    color(\"brown\") {\n        translate([-30, -15, body_height])\n            cube([8, 30, bridge_height]);\n        \n        // Low pitch bridge (right side)\n        translate([20, -15, body_height])\n            cube([10, 30, bridge_height]);\n        \n        // Middle bridge\n        translate([-5, -10, body_height])\n            cube([15, 20, bridge_height]);\n        \n        // Bass bridge\n        translate([-40, -5, body_height])\n            cube([8, 10, bridge_height - 1]);\n    }\n}\n\n// Strings\nmodule strings() {\n    color(\"silver\") {\n        // High pitch strings (16 strings)\n        for(i = [-14:2:14]) {\n            for(j = [-20:5:20]) {\n                translate([-32 + i, j, body_height + bridge_height])\n                    cylinder(h=2, d=string_diameter, $fn=8);\n            }\n        }\n        \n        // Low pitch strings (16 strings)\n        for(i = [-8:1:8]) {\n            for(j = [-20:5:20]) {\n                translate([25 + i, j, body_height + bridge_height])\n                    cylinder(h=2, d=string_diameter, $fn=8);\n            }\n        }\n        \n        // Middle strings (12 strings)\n        for(i = [-6:1:6]) {\n            for(j = [-8:4:8]) {\n                translate([-5 + i, j, body_height + bridge_height])\n                    cylinder(h=2, d=string_diameter, $fn=8);\n            }\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(\"darkbrown\") {\n        // Four corner legs\n        translate([-body_length/2 + 5, -body_width/2 + 5, 0])\n            cylinder(h=leg_height, d=leg_diameter, $fn=16);\n        translate([body_length/2 - 5, -body_width/2 + 5, 0])\n            cylinder(h=leg_height, d=leg_diameter, $fn=16);\n        translate([-body_length/2 + 5, body_width/2 - 5, 0])\n            cylinder(h=leg_height, d=leg_diameter, $fn=16);\n        translate([body_length/2 - 5, body_width/2 - 5, 0])\n            cylinder(h=leg_height, d=leg_diameter, $fn=16);\n    }\n}\n\n// Tuning pegs\nmodule tuning_pegs() {\n    color(\"brown\") {\n        // Left side pegs\n        for(i = [-20:5:15]) {\n            translate([-body_length/2 - 3, i, body_height - 2])\n                rotate([0, 90, 0])\n                    cylinder(h=4, d=1.5, $fn=8);\n        }\n        \n        // Right side pegs\n        for(i = [-20:5:15]) {\n            translate([body_length/2 + 3, i, body_height - 2])\n                rotate([0, -90, 0])\n                    cylinder(h=4, d=1.5, $fn=8);\n        }\n    }\n}\n\n// Hammers (2 pieces)\nmodule hammers() {\n    color(\"red\") {\n        // Hammer 1\n        translate([-body_length/2 - 10, body_width/2 + 5, 0])\n            rotate([0, 0, -30])\n                union() {\n                    cylinder(h=hammer_length, d=hammer_diameter, $fn=16);\n                    translate([0, 0, hammer_length])\n                        sphere(d=hammer_diameter * 2, $fn=16);\n                }\n        \n        // Hammer 2\n        translate([body_length/2 + 10, body_width/2 + 5, 0])\n            rotate([0, 0, 30])\n                mirror([0, 1, 0])\n                    union() {\n                        cylinder(h=hammer_length, d=hammer_diameter, $fn=16);\n                        translate([0, 0, hammer_length])\n                            sphere(d=hammer_diameter * 2, $fn=16);\n                    }\n    }\n}\n\n// Assemble the yangqin\nunion() {\n    yangqin_body();\n    legs();\n    bridges();\n    strings();\n    tuning_pegs();\n    hammers();\n}",
    "renders": true
  },
  {
    "musical_instrument": "santur",
    "openscad_code": "// Santur model - Medium complexity realistic style\n// Approx 75mm x 45mm x 12mm\n\n// Overall dimensions\nbody_length = 75;\nbody_width = 45;\nbody_height = 8;\nwall_thickness = 2;\n\n// Bridge dimensions\nbridge_height = 5;\nbridge_width = 2;\nbridge_top_width = 0.5;\n\n// String parameters\nnum_strings = 18;\nstring_diameter = 0.6;\nstring_spacing = 3.5;\n\n// Sound hole parameters\nhole_radius = 3;\nhole_offset = 15;\n\n// Main body\nmodule santur_body() {\n    difference() {\n        // Outer shell\n        cube([body_length, body_width, body_height], center=true);\n        \n        // Hollow out interior\n        translate([0, 0, -wall_thickness/2])\n            cube([body_length-wall_thickness*2, body_width-wall_thickness*2, body_height], center=true);\n        \n        // Sound holes\n        translate([hole_offset, 0, body_height/2])\n            cylinder(r=hole_radius, h=wall_thickness+0.1, center=true);\n        translate([-hole_offset, 0, body_height/2])\n            cylinder(r=hole_radius, h=wall_thickness+0.1, center=true);\n    }\n}\n\n// Bridge module\nmodule bridge(length) {\n    hull() {\n        // Base\n        translate([0, 0, 0])\n            cube([length, bridge_width, bridge_height/2], center=true);\n        \n        // Top\n        translate([0, 0, bridge_height/2 - 0.5])\n            cube([length, bridge_top_width, 1], center=true);\n    }\n}\n\n// String module\nmodule string(length) {\n    rotate([90, 0, 0])\n        cylinder(h=length, r=string_diameter/2, center=true);\n}\n\n// Main bridges\nmodule bridges() {\n    // Treble bridge\n    translate([0, -body_width/4, body_height/2 + bridge_height/2])\n        bridge(body_length*0.7);\n    \n    // Bass bridge\n    translate([0, body_width/4, body_height/2 + bridge_height/2])\n        bridge(body_length*0.7);\n}\n\n// Strings\nmodule strings() {\n    for(i = [-num_strings/2:num_strings/2-1]) {\n        // Left side strings\n        translate([i*string_spacing, -body_width/4, body_height/2 + bridge_height + string_diameter/2])\n            string(body_length*0.4);\n        \n        // Right side strings\n        translate([i*string_spacing, body_width/4, body_height/2 + bridge_height + string_diameter/2])\n            string(body_length*0.4);\n    }\n}\n\n// Tuning pegs\nmodule tuning_pegs() {\n    peg_length = 3;\n    peg_radius = 1;\n    \n    // Left side pegs\n    for(i = [-num_strings/4:num_strings/4]) {\n        translate([body_length/2 - 5, i*string_spacing*2, body_height/2 + peg_length/2])\n            rotate([90, 0, 0])\n                cylinder(h=peg_length, r=peg_radius);\n    }\n    \n    // Right side pegs\n    for(i = [-num_strings/4:num_strings/4]) {\n        translate([-body_length/2 + 5, i*string_spacing*2, body_height/2 + peg_length/2])\n            rotate([90, 0, 0])\n                cylinder(h=peg_length, r=peg_radius);\n    }\n}\n\n// Assemble the santur\nunion() {\n    santur_body();\n    bridges();\n    strings();\n    tuning_pegs();\n}",
    "renders": true
  },
  {
    "musical_instrument": "hackbrett",
    "openscad_code": "// Hackbrett (cheese board) medium-complexity realistic OpenSCAD model\n// Overall dimensions: ~100 mm x 70 mm x 8 mm\n\n$fn = 32;  // smooth curves\n\n// Main board\nmodule board() {\n    difference() {\n        // Base plate with rounded corners\n        linear_extrude(height = 6, convexity = 4)\n            offset(r = 5)\n                offset(delta = -5)\n                    square([90, 60], center = true);\n        \n        // Juice groove\n        translate([0, 0, 3.5])\n            linear_extrude(height = 2.5, convexity = 4)\n                offset(delta = -8)\n                    square([80, 50], center = true);\n    }\n}\n\n// Handle hole\nmodule handle_hole() {\n    translate([0, -34, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 10, d = 18, $fn = 64);\n}\n\n// Cheese knife slots (3 vertical slots)\nmodule knife_slots() {\n    for (i = [0:1:2]) {\n        translate([(-25) + i*25, 25, 3])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d = 6, $fn = 16);\n    }\n}\n\n// Rubber feet (4 small cylinders)\nmodule rubber_feet() {\n    for (x = [-35, 35])\n        for (y = [-20, 20])\n            translate([x, y, -2])\n                cylinder(h = 2, d = 8, $fn = 16);\n}\n\n// Inlay band around edge\nmodule inlay_band() {\n    difference() {\n        translate([0, 0, 3.1])\n            linear_extrude(height = 1.8, convexity = 4)\n                offset(delta = -3)\n                    square([86, 56], center = true);\n                    \n        translate([0, 0, 3.1])\n            linear_extrude(height = 1.8, convexity = 4)\n                offset(delta = -4)\n                    square([84, 54], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main board\n    board();\n    \n    // Handle hole\n    handle_hole();\n    \n    // Knife slots\n    knife_slots();\n    \n    // Inlay band\n    color(\"DarkGoldenrod\")\n        inlay_band();\n    \n    // Rubber feet\n    color(\"Black\")\n        rubber_feet();\n}",
    "renders": true
  },
  {
    "musical_instrument": "tamburitza",
    "openscad_code": "// Realistic Tamburitza - Medium Complexity\n// Body, neck, headstock, strings, frets, bridge\n\n$fn = 48;  // Smooth curves\n\n// Overall scale factor\nscale_factor = 0.45;\n\n// Main body parameters\nbody_len = 90 * scale_factor;\nbody_wid = 45 * scale_factor;\nbody_thk = 12 * scale_factor;\n\n// Neck parameters\nneck_len = 80 * scale_factor;\nneck_wid = 10 * scale_factor;\nneck_thk = 8 * scale_factor;\n\n// Headstock parameters\nhead_len = 30 * scale_factor;\nhead_wid = 18 * scale_factor;\nhead_thk = 6 * scale_factor;\n\n// String parameters\nstring_dia = 0.6 * scale_factor;\nnum_strings = 4;\n\n// Fret parameters\nnum_frets = 12;\nfret_wid = 0.8 * scale_factor;\nfret_height = 0.5 * scale_factor;\n\n// Bridge parameters\nbridge_wid = 25 * scale_factor;\nbridge_height = 2 * scale_factor;\nbridge_len = 3 * scale_factor;\n\n// Sound hole radius\nhole_rad = 10 * scale_factor;\n\nmodule body_shell() {\n    difference() {\n        // Main body shape - pear-like\n        hull() {\n            translate([body_len*0.3, 0, body_thk/2])\n                scale([1.2, 0.9, 1])\n                sphere(r=body_wid/2);\n            translate([-body_len*0.4, 0, body_thk/2])\n                sphere(r=body_wid/2.5);\n        }\n        \n        // Sound hole\n        translate([0, 0, -1])\n            cylinder(r=hole_rad, h=body_thk+2);\n        \n        // Neck cavity\n        translate([-body_len/2 - 2, 0, -1])\n            cube([neck_wid+4, neck_wid*1.5, body_thk+2], center=true);\n    }\n}\n\nmodule neck_with_frets() {\n    union() {\n        // Neck\n        translate([-neck_len/2 - body_len/2, 0, body_thk/2])\n            cube([neck_len, neck_wid, neck_thk], center=true);\n        \n        // Frets\n        for(i = [1:num_frets]) {\n            fret_pos = -body_len/2 - i*(neck_len/(num_frets+2));\n            translate([fret_pos, 0, body_thk/2 + neck_thk/2 + fret_height/2])\n                cube([fret_wid, neck_wid*1.1, fret_height], center=true);\n        }\n    }\n}\n\nmodule headstock() {\n    translate([-body_len/2 - neck_len - head_len/2, 0, body_thk/2 + neck_thk/2 - head_thk/2])\n        cube([head_len, head_wid, head_thk], center=true);\n}\n\nmodule tuning_pegs() {\n    for(i = [0:num_strings-1]) {\n        y = -head_wid/2 + head_wid*(i+1)/(num_strings+1);\n        // Left side peg\n        translate([-body_len/2 - neck_len - head_len*0.8, y, body_thk/2 + neck_thk/2])\n            rotate([90, 0, 0])\n                cylinder(h=8*scale_factor, r=1.5*scale_factor);\n        // Right side peg\n        translate([-body_len/2 - neck_len - head_len*0.2, y, body_thk/2 + neck_thk/2])\n            rotate([90, 0, 0])\n                cylinder(h=8*scale_factor, r=1.5*scale_factor);\n    }\n}\n\nmodule strings() {\n    for(i = [0:num_strings-1]) {\n        y_offset = -neck_wid/2 + neck_wid*(i+1)/(num_strings+1);\n        \n        // String from bridge to nut\n        hull() {\n            translate([body_len*0.2, y_offset, body_thk + bridge_height + string_dia/2])\n                sphere(r=string_dia/2);\n            translate([-body_len/2 - neck_len, y_offset, body_thk/2 + neck_thk/2 + head_thk/2 + string_dia/2])\n                sphere(r=string_dia/2);\n        }\n    }\n}\n\nmodule bridge() {\n    translate([body_len*0.2, 0, body_thk])\n        cube([bridge_len, bridge_wid, bridge_height], center=true);\n}\n\n// Assembly\nunion() {\n    body_shell();\n    neck_with_frets();\n    headstock();\n    bridge();\n    \n    // Add tuning pegs and strings\n    tuning_pegs();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "prim",
    "openscad_code": "// Realistic-style prim with medium complexity\n// Represents a classic wooden match with safety head and striking strip\n\n$fn = 50;  // Smooth curves for realistic rendering\n\n// Overall dimensions in mm\nmatch_length = 75;\nmatch_diameter = 3;\nhead_diameter = 4.5;\nhead_length = 8;\nstriking_strip_width = 2;\nstriking_strip_thickness = 0.5;\n\nmodule match_stick() {\n    // Main wooden stick body\n    color(\"burlywood\")\n    difference() {\n        cylinder(h = match_length, d = match_diameter, center = false);\n        \n        // Create wood grain texture with subtle grooves\n        for(i = [0:5:match_length-5]) {\n            translate([0, 0, i])\n            rotate([0, 90, 0])\n            cylinder(h = match_diameter + 0.2, d = 0.2, center = true);\n        }\n    }\n}\n\nmodule match_head() {\n    // Safety match head with phosphorus coating\n    color(\"orangered\")\n    translate([0, 0, match_length])\n    union() {\n        // Main head body\n        cylinder(h = head_length, d1 = head_diameter, d2 = head_diameter * 0.8, center = false);\n        \n        // Add crystalline texture to head surface\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n            translate([head_diameter/2 * 0.9, 0, head_length * 0.3])\n            sphere(d = 0.4);\n        }\n    }\n}\n\nmodule striking_strip() {\n    // Striking strip on side of matchbox\n    color(\"darkred\")\n    translate([match_diameter/2 + 0.1, -striking_strip_width/2, match_length * 0.3])\n    cube([striking_strip_thickness, striking_strip_width, match_length * 0.4]);\n}\n\nmodule match_box() {\n    // Simple matchbox frame to hold the match\n    color(\"saddlebrown\")\n    difference() {\n        // Outer box shell\n        translate([-2, -match_diameter/2 - 2, -2])\n        cube([4, match_diameter + 4, match_length + 4]);\n        \n        // Inner cavity for match\n        translate([-1.5, -match_diameter/2 - 1, -1])\n        cube([3, match_diameter + 2, match_length + 2]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main match\n    match_stick();\n    match_head();\n    \n    // Add slight charring at tip for realism\n    color(\"black\")\n    translate([0, 0, match_length + head_length - 0.5])\n    sphere(d = head_diameter * 0.6);\n    \n    // Optional: include matchbox for scale reference\n    // match_box();\n    // striking_strip();\n}\n\n// Add subtle imperfections for realism\nfor(i = [0:20:match_length-10]) {\n    color(\"saddlebrown\")\n    translate([match_diameter/2 * 0.8, 0, i])\n    sphere(d = 0.3);\n}",
    "renders": true
  },
  {
    "musical_instrument": "bugarija",
    "openscad_code": "// Bugarija (Croatian tamburica) - Medium complexity realistic style\n\n// Overall dimensions\nbody_length = 80;\nbody_width = 40;\nbody_depth = 25;\nneck_length = 60;\nneck_width = 12;\nhead_length = 20;\nhead_width = 18;\nhead_thickness = 8;\n\n// String parameters\nnum_strings = 4;\nstring_diameter = 0.8;\nstring_spacing = 4;\nscale_length = 60;\n\n// Body construction module\nmodule body() {\n    // Main body shape - pear-like\n    hull() {\n        // Upper bout\n        translate([0, 0, body_depth/2])\n            scale([1, 0.7, 1])\n            sphere(d=body_width);\n        \n        // Lower bout\n        translate([body_length*0.7, 0, body_depth/2])\n            scale([1.2, 1, 1])\n            sphere(d=body_width*1.3);\n    }\n    \n    // Sound hole\n    difference() {\n        // Top plate\n        translate([0, 0, body_depth-2])\n            cube([body_length*1.1, body_width*1.1, 2], center=true);\n        \n        // Hole\n        translate([body_length*0.4, 0, body_depth-1])\n            cylinder(h=4, d=body_width*0.4, $fn=32);\n    }\n    \n    // Bridge\n    translate([body_length*0.75, 0, body_depth-1])\n        cube([body_width*0.5, 6, 2], center=true);\n}\n\n// Neck construction module\nmodule neck() {\n    // Main neck\n    translate([-neck_length/2, 0, 0])\n        cube([neck_length, neck_width, neck_width*0.6], center=true);\n    \n    // Fretboard\n    translate([-neck_length*0.6, 0, neck_width*0.3])\n        cube([neck_length*0.8, neck_width*1.1, 3], center=true);\n    \n    // Frets\n    for(i = [1:15]) {\n        translate([-i*neck_length/16, 0, neck_width*0.3+1.5])\n            cube([0.5, neck_width*1.1, 1.5], center=true);\n    }\n}\n\n// Headstock module\nmodule headstock() {\n    // Main headstock\n    translate([-neck_length-head_length/2, 0, 0])\n        cube([head_length, head_width, head_thickness], center=true);\n    \n    // Tuning pegs\n    for(i = [0:num_strings-1]) {\n        // Left side pegs\n        translate([-neck_length-head_length*0.8, \n                   head_width/2-string_spacing*1.5+i*string_spacing, \n                   0])\n            rotate([90, 0, 0])\n            cylinder(h=8, d=3, $fn=12);\n        \n        // Right side pegs\n        translate([-neck_length-head_length*0.6, \n                   head_width/2-string_spacing*1.5+i*string_spacing, \n                   0])\n            rotate([90, 0, 0])\n            cylinder(h=8, d=3, $fn=12);\n    }\n}\n\n// Strings module\nmodule strings() {\n    for(i = [0:num_strings-1]) {\n        // From bridge to nut\n        translate([body_length*0.75, \n                   (i-1.5)*string_spacing, \n                   body_depth-1+string_diameter/2])\n            rotate([0, 90, 0])\n            cylinder(h=scale_length, d=string_diameter, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    translate([0, 0, 0])\n        body();\n    \n    // Neck\n    translate([body_length*0.5, 0, body_depth/2])\n        neck();\n    \n    // Headstock\n    translate([body_length*0.5, 0, body_depth/2])\n        headstock();\n    \n    // Strings\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "čelo",
    "openscad_code": "// Realistic 3D printable cello body\n// Overall length ≈ 90 mm\n\n// Basic dimensions\nscale_factor = 1;\nbody_length = 90 * scale_factor;\nbody_width = 30 * scale_factor;\nrib_height = 10 * scale_factor;\n\n// Main body shape\nmodule body_outline() {\n    // Upper bout\n    translate([0, 0, rib_height/2])\n        scale([1, 0.7, 1])\n        sphere(d = body_width, $fn = 64);\n    \n    // Lower bout\n    translate([-body_length*0.4, 0, rib_height/2])\n        scale([1.2, 1, 1])\n        sphere(d = body_width*1.3, $fn = 64);\n    \n    // C bout waist\n    for(i = [-1, 1]) {\n        mirror([i, 0, 0])\n        translate([-body_length*0.2, -body_width*0.4, rib_height/2])\n            sphere(d = body_width*0.6, $fn = 32);\n    }\n}\n\n// Rib structure with thickness\nmodule ribs() {\n    difference() {\n        body_outline();\n        translate([0, 0, 1])\n            scale([0.9, 0.9, 0.8])\n            body_outline();\n    }\n}\n\n// F-shaped sound holes\nmodule f_hole() {\n    for(side = [-1, 1]) {\n        mirror([side, 0, 0]) {\n            // Upper circle\n            translate([-body_length*0.2, body_width*0.2, rib_height/2])\n                rotate([0, 0, 30])\n                cylinder(h = rib_height+1, d = 2, $fn = 16);\n            \n            // Stem\n            translate([-body_length*0.25, body_width*0.25, rib_height/2])\n                rotate([0, 0, 45])\n                cube([8, 1, rib_height+1]);\n            \n            // Lower circle\n            translate([-body_length*0.3, body_width*0.35, rib_height/2])\n                cylinder(h = rib_height+1, d = 3, $fn = 16);\n        }\n    }\n}\n\n// Fingerboard\nmodule fingerboard() {\n    translate([body_length*0.45, 0, rib_height+2])\n        rotate([0, 0, 180])\n        linear_extrude(height = 3)\n        polygon(points=[\n            [0, 0],\n            [-body_length*0.6, -4],\n            [-body_length*0.6, 4],\n            [0, 0]\n        ]);\n}\n\n// Bridge\nmodule bridge() {\n    translate([-body_length*0.3, 0, rib_height+3])\n        union() {\n            // Bridge feet\n            for(x = [-5, 5]) {\n                translate([x, 0, 0])\n                    cube([2, 3, 5]);\n            }\n            // Bridge top\n            translate([0, 0, 5])\n                cube([15, 1, 2]);\n        }\n}\n\n// Tailpiece\nmodule tailpiece() {\n    translate([body_length*0.45, 0, rib_height+1])\n        rotate([0, 0, 180])\n        linear_extrude(height = 2)\n        polygon(points=[\n            [0, -4],\n            [-8, -6],\n            [-8, 6],\n            [0, 4]\n        ]);\n}\n\n// Scroll and pegbox (simplified)\nmodule scroll() {\n    translate([body_length*0.55, 0, rib_height+5])\n        rotate([90, 0, 0])\n        union() {\n            // Pegbox\n            cube([8, 4, 15]);\n            // Scroll\n            translate([0, 0, 15])\n                rotate_extrude($fn = 32)\n                polygon(points=[\n                    [0, 0],\n                    [2, 0],\n                    [2, 5],\n                    [0, 8]\n                ]);\n        }\n}\n\n// Main assembly\nunion() {\n    ribs();\n    f_hole();\n    fingerboard();\n    bridge();\n    tailpiece();\n    scroll();\n}",
    "renders": true
  },
  {
    "musical_instrument": "berda",
    "openscad_code": "// Realistic Berda (Turkish Yatagan Sword) - Medium Complexity\n// 3D printable model with proper wall thickness\n\n$fn = 36;  // Smooth curves\n\n// Overall dimensions\nblade_length = 70;\nblade_width = 12;\nblade_thickness = 3;\n\n// Main blade - curved yatagan style\nmodule blade() {\n    // Blade body with slight curve\n    translate([0, 0, blade_thickness/2])\n    rotate([0, -5, 0])  // Slight upward curve\n    linear_extrude(height=blade_thickness, center=true)\n    polygon(points=[\n        [0, -blade_width/2],\n        [blade_length*0.8, -blade_width/3],\n        [blade_length*0.95, 0],\n        [blade_length*0.8, blade_width/3],\n        [0, blade_width/2],\n        [0, -blade_width/2]\n    ]);\n    \n    // False edge on back\n    translate([blade_length*0.85, 0, blade_thickness/2 + 0.1])\n    rotate([0, 0, 25])\n    cube([blade_length*0.15, 0.5, blade_thickness], center=true);\n    \n    // Fuller (blood groove)\n    translate([blade_length/3, 0, blade_thickness/2])\n    rotate([0, 0, 30])\n    cylinder(h=blade_length*0.6, r=1, center=true);\n}\n\n// Hilt with ears\nmodule hilt() {\n    // Main grip\n    translate([-10, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=25, r=5, center=true);\n    \n    // Front ear\n    translate([-15, -8, 0])\n    rotate([0, 90, 0])\n    cylinder(h=8, r1=3, r2=1, center=true);\n    \n    // Back ear\n    translate([-15, 8, 0])\n    rotate([0, 90, 0])\n    cylinder(h=8, r1=3, r2=1, center=true);\n    \n    // Grip ridges for better hold\n    for(i=[-8:4:8]) {\n        translate([i, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=1, r=5.5, center=true);\n    }\n}\n\n// Pommel\nmodule pommel() {\n    translate([-35, 0, 0])\n    sphere(r=6);\n    \n    // Decorative ridges\n    for(i=[-2:1:2]) {\n        rotate([90, 0, 0])\n        translate([-35, 0, i*2])\n        torus(6.5, 0.5);\n    }\n}\n\n// Guard plate\nmodule guard() {\n    translate([-10, 0, -5])\n    cube([3, blade_width*1.5, 10], center=true);\n}\n\n// Helper for torus\nmodule torus(outer, inner) {\n    rotate_extrude()\n    translate([outer, 0, 0])\n    circle(r=inner);\n}\n\n// Assemble the berda\nunion() {\n    // Main blade\n    blade();\n    \n    // Hilt assembly\n    hilt();\n    \n    // Pommel\n    pommel();\n    \n    // Guard\n    guard();\n}\n\n// Add support base for 3D printing\ntranslate([0, 0, -3])\ncube([blade_length + 20, blade_width + 10, 1], center=true);",
    "renders": true
  },
  {
    "musical_instrument": "brac",
    "openscad_code": "// Realistic medium-complexity brac (anklet) for 3D printing\n// Approx. 70 mm inner diameter, 12 mm wall thickness\n\n$fn = 36;\n\n// Main parameters\ninner_d = 70;           // mm\nwall_t = 12;            // mm\nheight = 20;            // mm\ngap = 6;                // hinge gap\npin_d = 4;              // hinge pin diameter\npin_l = wall_t + 2;     // hinge pin length\nlatch_w = 15;           // latch width\nlatch_t = 3;            // latch thickness\n\n// Basic torus segment\nmodule torus_segment(r_out, r_in, h, a_start=0, a_end=360) {\n    difference() {\n        cylinder(h=h, r=r_out, center=true);\n        cylinder(h=h+1, r=r_in, center=true);\n    }\n    intersection() {\n        rotate([90,0,0]) cylinder(h=r_out*2, r=h/2, center=true);\n        rotate_extrude(angle=a_end-a_start, convexity=10)\n            translate([r_out-(r_out-r_in)/2, 0, 0])\n                square([(r_out-r_in)/2, h], center=true);\n    }\n}\n\n// Hinge pin\nmodule hinge_pin() {\n    cylinder(h=pin_l, d=pin_d, center=true);\n}\n\n// Hinge half\nmodule hinge_half() {\n    difference() {\n        torus_segment(inner_d/2+wall_t, inner_d/2, height, 0, 40);\n        translate([0, 0, -height/2-1])\n            cube([pin_d+1, wall_t+5, pin_d+2], center=true);\n    }\n}\n\n// Latch hook\nmodule latch_hook() {\n    difference() {\n        // Hook body\n        translate([(inner_d+wall_t)/2+wall_t/2, 0, 0])\n            cube([wall_t, latch_w, height], center=true);\n        // Hook slot\n        translate([(inner_d+wall_t)/2+wall_t/2, 0, height/2-latch_t-1])\n            cube([latch_t*2, latch_w+2, latch_t*2], center=true);\n    }\n}\n\n// Latch catch\nmodule latch_catch() {\n    translate([(inner_d+wall_t)/2+wall_t/2, 0, 0])\n        cube([latch_t, latch_w-2, latch_t], center=true);\n}\n\n// Decorative pattern\nmodule decorative_pattern() {\n    for (i=[0:5:359]) {\n        rotate([0, 0, i])\n            translate([(inner_d+wall_t)/2, 0, 0])\n                scale([1, 0.3, 1])\n                    sphere(d=height*0.8);\n    }\n}\n\n// Main brac body\nmodule brac_body() {\n    difference() {\n        union() {\n            torus_segment(inner_d/2+wall_t, inner_d/2, height, 0, 160);\n            torus_segment(inner_d/2+wall_t, inner_d/2, height, 165, 360);\n            latch_hook();\n            latch_catch();\n        }\n        // Gap for hinge\n        rotate([0, 0, 160])\n            translate([0, 0, 0])\n                cube([inner_d+wall_t*2, wall_t+gap, height+2], center=true);\n    }\n}\n\n// Assembly\nbrac_body();\ntranslate([0, 0, height/2+5])\n    rotate([0, 90, 0])\n        hinge_half();\ntranslate([0, 0, -height/2-5])\n    rotate([0, 90, 180])\n        mirror([0,1,0])\n            hinge_half();\ntranslate([0, (inner_d+wall_t)/2+wall_t/2, height/2-latch_t-1])\n    latch_catch();\ndecorative_pattern();",
    "renders": true
  },
  {
    "musical_instrument": "bisernica",
    "openscad_code": "// Bisernica - Croatian tamburica instrument\n// Medium complexity realistic model\n\n// Parameters\nbody_length = 85;\nbody_width = 45;\nbody_depth = 35;\nneck_length = 70;\nneck_width = 12;\nneck_thickness = 10;\npegbox_length = 25;\npegbox_width = 15;\npegbox_thickness = 8;\nsoundhole_radius = 8;\nbridge_height = 3;\nbridge_width = 30;\nstring_count = 5;\nstring_diameter = 0.5;\n\n// Main body - pear shape constructed from cylinders\nmodule body() {\n    difference() {\n        // Main body shape - tapered cylinder\n        hull() {\n            translate([0, 0, body_depth/2])\n                cylinder(h=body_depth, d1=body_width*1.2, d2=body_width*0.8, $fn=64);\n            translate([body_length/2, 0, body_depth/2])\n                cylinder(h=body_depth, d1=body_width*0.8, d2=body_width*0.6, $fn=64);\n            translate([-body_length/2, 0, body_depth/2])\n                cylinder(h=body_depth, d1=body_width*0.8, d2=body_width*0.6, $fn=64);\n        }\n        \n        // Sound hole\n        translate([body_length/4, 0, body_depth-1])\n            cylinder(h=3, r=soundhole_radius, $fn=32);\n            \n        // String holes at bridge\n        for(i = [-2:2]) {\n            translate([body_length/2-5, i*3, 0])\n                cylinder(h=body_depth, r=1, $fn=16);\n        }\n    }\n}\n\n// Neck with fingerboard\nmodule neck() {\n    // Neck base\n    color(\"burlywood\")\n    hull() {\n        translate([body_length/2-5, 0, body_depth-1])\n            cube([neck_length, neck_width, neck_thickness], center=true);\n        translate([body_length/2+neck_length-5, 0, body_depth-1])\n            cube([neck_width, neck_width*0.8, neck_thickness*0.8], center=true);\n    }\n    \n    // Fingerboard - slightly raised\n    translate([body_length/2+neck_length/2-5, 0, body_depth+neck_thickness/2-0.5])\n        color(\"black\")\n        cube([neck_length+5, neck_width+2, 1], center=true);\n    \n    // Frets\n    for(i = [1:12]) {\n        translate([body_length/2+i*5-5, 0, body_depth+neck_thickness/2])\n            color(\"silver\")\n            cube([1, neck_width+2, 1.5], center=true);\n    }\n}\n\n// Pegbox with tuning pegs\nmodule pegbox() {\n    // Pegbox body\n    translate([body_length/2+neck_length-5, 0, body_depth-1])\n        rotate([0, 90, 0])\n        color(\"burlywood\")\n        cube([pegbox_length, pegbox_width, pegbox_thickness], center=true);\n    \n    // Tuning pegs\n    for(i = [0:string_count-1]) {\n        // Left side pegs\n        translate([body_length/2+neck_length-5, -pegbox_width/2-3, \n                   body_depth-1+pegbox_thickness/2-i*3.5])\n            rotate([90, 0, 0])\n            cylinder(h=8, r=2, $fn=16);\n            \n        // Right side pegs (only 3 for 5 strings)\n        if(i < 3) {\n            translate([body_length/2+neck_length-5, pegbox_width/2+3, \n                       body_depth-1+pegbox_thickness/2-i*5])\n                rotate([90, 0, 0])\n                cylinder(h=8, r=2, $fn=16);\n        }\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([body_length/2-8, 0, body_depth-1])\n        color(\"brown\")\n        cube([bridge_width, 5, bridge_height], center=true);\n}\n\n// Tailpiece\nmodule tailpiece() {\n    translate([-body_length/2+5, 0, body_depth-1])\n        color(\"brown\")\n        hull() {\n            cube([10, 20, 3], center=true);\n            translate([5, 0, 0])\n                cube([5, 15, 3], center=true);\n        }\n}\n\n// Strings\nmodule strings() {\n    for(i = [-2:2]) {\n        color(\"silver\")\n        hull() {\n            // From tailpiece to bridge\n            translate([-body_length/2+10, i*3, body_depth-1+bridge_height+0.5])\n                sphere(r=string_diameter);\n            translate([body_length/2-8, i*3, body_depth-1+bridge_height+0.5])\n                sphere(r=string_diameter);\n        }\n        // From bridge to pegbox\n        hull() {\n            translate([body_length/2-8, i*3, body_depth-1+bridge_height+0.5])\n                sphere(r=string_diameter);\n            translate([body_length/2+neck_length-10, \n                      (i<0 ? -pegbox_width/2-2 : pegbox_width/2+2), \n                      body_depth-1+pegbox_thickness/2-abs(i)*3.5])\n                sphere(r=string_diameter);\n        }\n    }\n}\n\n// Assembly\nbody();\nneck();\npegbox();\nbridge();\ntailpiece();\nstrings();",
    "renders": true
  },
  {
    "musical_instrument": "kontra",
    "openscad_code": "// Kontra (Hungarian 3-stringed folk instrument) - Realistic Medium Complexity\n// Overall length ~90mm for 3D printing\n\n// Parameters\nbody_length = 55;\nbody_width = 28;\nbody_thickness = 15;\nneck_length = 35;\nneck_width = 8;\nneck_thickness = 6;\npegbox_length = 12;\npegbox_width = 14;\npegbox_thickness = 8;\nsoundhole_radius = 6;\nbridge_height = 3;\nbridge_width = 12;\nfret_count = 7;\nstring_diameter = 0.8;\nwall_thickness = 2;\n\n// Main body - hollow resonator\nmodule body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-body_length/2, 0, 0])\n                cube([body_length, body_width, body_thickness], center=true);\n            translate([body_length/2 - 10, 0, 0])\n                scale([0.7, 0.8, 1])\n                sphere(d=body_width);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -body_thickness/2 + wall_thickness])\n            scale([0.9, 0.9, 0.8])\n            hull() {\n                translate([-body_length/2, 0, 0])\n                    cube([body_length, body_width - wall_thickness*2, body_thickness], center=true);\n                translate([body_length/2 - 10, 0, 0])\n                    scale([0.7, 0.8, 1])\n                    sphere(d=body_width - wall_thickness*2);\n            }\n        \n        // Soundhole\n        translate([body_length/4, 0, body_thickness/2 - wall_thickness])\n            cylinder(r=soundhole_radius, h=wall_thickness + 0.1, $fn=32);\n    }\n}\n\n// Neck with fingerboard\nmodule neck() {\n    union() {\n        // Neck base\n        translate([0, 0, 0])\n            cube([neck_length, neck_width, neck_thickness], center=true);\n        \n        // Fingerboard overlay\n        translate([neck_length/2 - 2, 0, neck_thickness/2 + 0.5])\n            cube([neck_length, neck_width - 1, 1], center=true);\n        \n        // Frets\n        for(i = [1:fret_count]) {\n            translate([neck_length/2 - 3 - i*3.5, 0, neck_thickness/2 + 1.1])\n                cube([0.8, neck_width - 2, 0.8], center=true);\n        }\n    }\n}\n\n// Pegbox with tuning pegs\nmodule pegbox() {\n    difference() {\n        // Main pegbox\n        translate([neck_length/2 + pegbox_length/2, 0, 0])\n            cube([pegbox_length, pegbox_width, pegbox_thickness], center=true);\n        \n        // Peg holes (3 strings)\n        for(i = [0:2]) {\n            translate([neck_length/2 + pegbox_length - 3, \n                      -pegbox_width/2 + 4 + i*3, \n                      pegbox_thickness/2 - 1])\n                rotate([0, 90, 0])\n                    cylinder(r=string_diameter + 0.5, h=pegbox_width/2, $fn=16);\n        }\n    }\n    \n    // Tuning pegs\n    for(i = [0:2]) {\n        translate([neck_length/2 + pegbox_length - 3, \n                  -pegbox_width/2 + 4 + i*3, \n                  pegbox_thickness/2 + 2])\n            rotate([0, 90, 0])\n                cylinder(r=string_diameter + 1, h=6, $fn=8);\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([-body_length/4, 0, body_thickness/2])\n        difference() {\n            hull() {\n                cube([bridge_width, bridge_width/3, bridge_height], center=true);\n                translate([0, 0, bridge_height/2])\n                    cube([bridge_width - 4, bridge_width/3 - 1, 1], center=true);\n            }\n            // String notches\n            for(i = [0:2]) {\n                translate([-bridge_width/2 + 3 + i*3, 0, bridge_height/2])\n                    cube([0.8, bridge_width/3 + 0.1, 2], center=true);\n            }\n        }\n}\n\n// Tailpiece\nmodule tailpiece() {\n    translate([-body_length/2 - 2, 0, body_thickness/2 - 1])\n        difference() {\n            hull() {\n                cube([4, 10, 4], center=true);\n                translate([-2, 0, -2])\n                    cube([4, 6, 2], center=true);\n            }\n            // String holes\n            for(i = [0:2]) {\n                translate([0, -3 + i*3, 0])\n                    cylinder(r=string_diameter + 0.2, h=5, $fn=8);\n            }\n        }\n}\n\n// Strings\nmodule strings() {\n    for(i = [0:2]) {\n        // From tailpiece to bridge\n        translate([-body_length/2 + 2, -3 + i*3, body_thickness/2 - 0.5])\n            cylinder(r=string_diameter, h=body_length/2 - 2, $fn=8);\n        \n        // From bridge to nut\n        translate([0, -1.5 + i*1.5, body_thickness/2 + 0.5])\n            cylinder(r=string_diameter, h=neck_length/2, $fn=8);\n        \n        // From nut to pegs\n        translate([neck_length/2 - 2, -1.5 + i*1.5, neck_thickness/2 + 1])\n            rotate([0, -10, 0])\n                cylinder(r=string_diameter, h=pegbox_length, $fn=8);\n    }\n}\n\n// Assembly\ntranslate([0, 0, body_thickness/2])\n    union() {\n        body();\n        translate([body_length/2 - neck_length/2, 0, body_thickness/2 - neck_thickness/2])\n            neck();\n        pegbox();\n        bridge();\n        tailpiece();\n        strings();\n    }",
    "renders": true
  },
  {
    "musical_instrument": "kemenche",
    "openscad_code": "// Kemenche - traditional bowed string instrument\n// Medium complexity realistic style\n\n$fn = 32;\nbody_length = 90;\nbody_width = 45;\nbody_depth = 25;\nneck_length = 75;\nscroll_radius = 12;\npeg_count = 4;\nstring_count = 3;\nwall_thickness = 2;\n\nmodule kemenche_body() {\n    // Main resonator body\n    difference() {\n        // Outer shell - pear shape\n        hull() {\n            translate([0, 0, body_depth/2])\n                scale([1, 0.6, 0.5])\n                sphere(d=body_width);\n            translate([body_length*0.7, 0, body_depth/2])\n                scale([0.8, 1, 0.5])\n                sphere(d=body_width*0.8);\n            translate([body_length*0.9, 0, body_depth/2])\n                scale([0.4, 0.6, 0.5])\n                sphere(d=body_width*0.6);\n        }\n        \n        // Hollow cavity\n        translate([5, 0, wall_thickness])\n            scale([0.9, 0.8, 0.7])\n            cube([body_length*0.85, body_width*0.6, body_depth-wall_thickness*2], center=false);\n            \n        // Sound holes\n        translate([body_length*0.6, body_width*0.25, body_depth/2])\n            cylinder(h=body_depth+1, d=6);\n        translate([body_length*0.6, -body_width*0.25, body_depth/2])\n            cylinder(h=body_depth+1, d=6);\n    }\n    \n    // Soundboard\n    translate([0, 0, body_depth-wall_thickness/2])\n        scale([1.02, 1.02, 0.1])\n        cube([body_length*1.1, body_width*1.1, wall_thickness], center=true);\n}\n\nmodule neck() {\n    // Neck\n    translate([body_length, 0, body_depth/2])\n        rotate([0, 90, 0])\n            cylinder(h=neck_length, d1=12, d2=8);\n    \n    // Fingerboard\n    translate([body_length+neck_length*0.5, 0, body_depth/2-2])\n        rotate([0, 90, 0])\n            scale([1, 0.3, 0.1])\n            cube([neck_length, 10, 4], center=true);\n}\n\nmodule scroll() {\n    // Scroll\n    translate([body_length+neck_length, 0, body_depth/2]) {\n        rotate([0, 90, 0])\n            cylinder(h=scroll_radius*1.5, d=scroll_radius*2);\n        rotate([0, 90, 0])\n            rotate([0, 0, 180])\n                scale([1, 1, 1.5])\n                sphere(d=scroll_radius*2);\n    }\n    \n    // Pegbox\n    translate([body_length+neck_length+scroll_radius*0.5, 0, body_depth/2])\n        cube([scroll_radius*2, scroll_radius*1.5, scroll_radius*1.5], center=true);\n}\n\nmodule pegs() {\n    // Tuning pegs\n    for(i = [0:peg_count-1]) {\n        angle = i * 45 - 67.5;\n        translate([body_length+neck_length+scroll_radius*0.5, 0, body_depth/2]) {\n            rotate([0, 0, angle]) {\n                translate([scroll_radius*0.7, 0, (i-peg_count/2+0.5)*6])\n                    rotate([0, 90, 0])\n                        cylinder(h=15, d1=3, d2=2);\n                translate([scroll_radius*0.7+15, 0, (i-peg_count/2+0.5)*6])\n                    sphere(d=3);\n            }\n        }\n    }\n}\n\nmodule tailpiece() {\n    // Tailpiece\n    translate([body_length*0.1, 0, body_depth-wall_thickness])\n        cube([12, 8, 3], center=true);\n    \n    // Tailgut\n    translate([body_length*0.1, 0, body_depth-wall_thickness-2])\n        cylinder(h=4, d=1);\n}\n\nmodule bridge() {\n    // Bridge\n    translate([body_length*0.4, 0, body_depth-wall_thickness])\n        difference() {\n            cube([12, 12, 8], center=true);\n            translate([0, 0, 4])\n                cube([8, 8, 8], center=true);\n        }\n}\n\nmodule strings() {\n    // Strings\n    for(i = [0:string_count-1]) {\n        y_pos = (i-string_count/2+0.5) * 3;\n        color(\"silver\")\n        hull() {\n            translate([body_length*0.1, y_pos, body_depth-wall_thickness+1.5])\n                sphere(d=0.5);\n            translate([body_length*0.4, y_pos, body_depth-wall_thickness+7])\n                sphere(d=0.5);\n            translate([body_length+neck_length*0.9, y_pos, body_depth/2-1])\n                sphere(d=0.5);\n        }\n    }\n}\n\n// Assemble kemenche\nunion() {\n    kemenche_body();\n    neck();\n    scroll();\n    pegs();\n    tailpiece();\n    bridge();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "politiki",
    "openscad_code": "// Politiki bouzouki - medium complexity realistic style\n// Overall length ~90 mm for 3D printing\n\n// String spacing parameters\nstring_spacing = 1.5;\nstring_diameter = 0.6;\n\n// Main body parameters\nbody_length = 45;\nbody_width = 25;\nbody_depth = 12;\nbody_thickness = 2;\n\n// Neck parameters\nneck_length = 35;\nneck_width = 6;\nneck_depth = 4;\nneck_thickness = 2;\n\n// Head parameters\nhead_length = 12;\nhead_width = 8;\nhead_depth = 3.5;\n\n// Tuning peg parameters\npeg_length = 4;\npeg_diameter = 1.2;\npeg_angle = 30;\n\n// Sound hole parameters\nhole_radius = 4;\nhole_depth = body_thickness + 1;\n\n// Bridge parameters\nbridge_width = 8;\nbridge_height = 2;\nbridge_depth = 2;\nbridge_position = body_length * 0.75;\n\nmodule main_body() {\n    difference() {\n        // Main body shell\n        hull() {\n            translate([-body_length/2, 0, 0])\n                sphere(d = body_width);\n            translate([body_length/2, 0, 0])\n                sphere(d = body_width * 0.8);\n        }\n        \n        // Hollow out the body\n        scale([0.8, 0.8, 0.5])\n            hull() {\n                translate([-body_length/2, 0, -body_thickness])\n                    sphere(d = body_width - body_thickness);\n                translate([body_length/2, 0, -body_thickness])\n                    sphere(d = (body_width - body_thickness) * 0.8);\n            }\n        \n        // Sound hole\n        translate([bridge_position - 5, 0, -body_depth/2])\n            cylinder(h = hole_depth, r = hole_radius, $fn = 32);\n    }\n}\n\nmodule neck() {\n    // Neck\n    translate([body_length/2 - 2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = neck_length, r1 = neck_depth/2, r2 = neck_depth/2 - 1, $fn = 8);\n    \n    // Fingerboard\n    translate([body_length/2 - 2, 0, neck_depth/2 - 0.5])\n        cube([neck_length, neck_width, 1], center = false);\n}\n\nmodule head() {\n    translate([body_length/2 + neck_length - 1, 0, 0])\n        rotate([0, 90, 0])\n            cube([head_length, head_width, head_depth], center = true);\n}\n\nmodule tuning_pegs() {\n    // Top row pegs\n    for(i = [0:1]) {\n        translate([body_length/2 + neck_length + 2, \n                   head_width/2 - 1 - i*3, \n                   head_depth/2]) {\n            rotate([peg_angle, 0, 90])\n                cylinder(h = peg_length, r = peg_diameter/2, $fn = 12);\n        }\n    }\n    \n    // Bottom row pegs\n    for(i = [0:1]) {\n        translate([body_length/2 + neck_length + 2, \n                   -head_width/2 + 1 + i*3, \n                   -head_depth/2]) {\n            rotate([-peg_angle, 0, 90])\n                cylinder(h = peg_length, r = peg_diameter/2, $fn = 12);\n        }\n    }\n}\n\nmodule bridge() {\n    translate([bridge_position, 0, body_depth/2])\n        cube([bridge_depth, bridge_width, bridge_height], center = true);\n}\n\nmodule strings() {\n    for(i = [0:3]) {\n        // Avoid floating starts by anchoring at tailpiece\n        translate([-body_length/2 + 5, \n                   -neck_width/2 + 1 + i*string_spacing, \n                   body_depth/2]) {\n            rotate([90, 0, 0])\n                cylinder(h = body_length + neck_length + head_length - 5, \n                        r = string_diameter/2, $fn = 6);\n        }\n    }\n}\n\n// Assemble the politiki\nunion() {\n    main_body();\n    neck();\n    head();\n    tuning_pegs();\n    bridge();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "calabash",
    "openscad_code": "// Realistic 3D-printable calabash\n// Overall height ≈ 60 mm, widest Ø ≈ 46 mm\n// Wall thickness 1.2 mm everywhere for reliable FDM printing\n\n// Parameters\n$fn = 48;                // Global circle resolution\nwall = 1.2;              // Uniform wall thickness (mm)\nbase_h = 6;              // Flat base ring height\nbody_h = 40;             // Main body height\nneck_h = 12;             // Neck cylinder height\nstem_h = 6;              // Small stem on top\nmax_r = 23;              // Widest body radius\nneck_r = 8;              // Neck radius\n\nmodule body_shell(r_top, r_mid, r_bot, h) {\n    // Single solid hull of two stacked ellipsoids\n    hull() {\n        translate([0, 0, 0]) scale([r_bot, r_bot, h*0.3]) sphere(1);\n        translate([0, 0, h]) scale([r_top, r_top, h*0.3]) sphere(1);\n    }\n}\n\nmodule calabash() {\n    difference() {\n        // OUTER SHAPE -------------------------------------------------\n        union() {\n            // Base ring for stable printing\n            cylinder(h = base_h, r1 = max_r - 2, r2 = max_r - 2, center = false);\n\n            // Main bulbous body\n            translate([0, 0, base_h])\n            body_shell(r_mid = max_r, r_top = max_r - 4, r_bot = max_r - 2, h = body_h);\n\n            // Neck cylinder\n            translate([0, 0, base_h + body_h])\n            cylinder(h = neck_h, r = neck_r, r1 = neck_r, r2 = neck_r + 1.5);\n\n            // Tiny stem\n            translate([0, 0, base_h + body_h + neck_h])\n            cylinder(h = stem_h, r1 = neck_r - 1, r2 = neck_r - 2.5);\n        }\n\n        // INNER HOLLOWING ---------------------------------------------\n        // Remove core to leave uniform wall\n        translate([0, 0, base_h + wall])\n        body_shell(\n            r_mid = max_r - wall,\n            r_top = (max_r - 4) - wall,\n            r_bot = (max_r - 2) - wall,\n            h = body_h - wall\n        );\n\n        // Hollow neck and stem\n        translate([0, 0, base_h + body_h + wall])\n        cylinder(h = neck_h + stem_h - wall, r = neck_r - wall);\n    }\n}\n\n// Optional decorative latitudinal ridges\nmodule ridges() {\n    for (z = [6:6:36]) {\n        rotate_extrude($fn = 64)\n            translate([max_r - 1.5, 0, z])\n            circle(r = 0.6);\n    }\n}\n\n// Assembly -----------------------------------------------------------\nunion() {\n    calabash();\n    ridges();\n}",
    "renders": true
  },
  {
    "musical_instrument": "kora",
    "openscad_code": "// Kora - West African harp-lute\n// Medium complexity realistic style\n// Designed for 3D printing at ~80mm height\n\n$fn = 32;  // Smooth curves for printing\n\n// Overall scale factor\nscale_factor = 1.0;\n\n// Main parameters\ntotal_height = 80 * scale_factor;\ngourd_diameter = 45 * scale_factor;\nneck_length = 65 * scale_factor;\nneck_thickness = 5 * scale_factor;\nbridge_height = 8 * scale_factor;\nstring_count = 21;\n\n// Wall thickness for printing\nwall_t = 2 * scale_factor;\n\n// Gourd resonator - main body\nmodule gourd_resonator() {\n    difference() {\n        // Main gourd shape\n        scale([1, 0.8, 1.2]) sphere(d = gourd_diameter);\n        \n        // Front sound hole\n        translate([0, 0, gourd_diameter * 0.5])\n            cylinder(h = wall_t + 1, d = gourd_diameter * 0.35, center = true);\n        \n        // Back access hole\n        translate([0, 0, -gourd_diameter * 0.3])\n            cylinder(h = wall_t + 1, d = gourd_diameter * 0.4, center = true);\n    }\n    \n    // Neck mounting point reinforcement\n    translate([0, 0, gourd_diameter * 0.4])\n        cylinder(h = wall_t * 2, d = neck_thickness * 1.5, center = false);\n}\n\n// Long hardwood neck\nmodule neck() {\n    color(\"saddlebrown\") {\n        // Main neck shaft\n        translate([0, -neck_thickness/2, 0])\n            rotate([90, 0, 0])\n                cylinder(h = neck_length, d = neck_thickness, center = false);\n        \n        // Headstock - flared end\n        translate([0, 0, neck_length - 5])\n            rotate([90, 0, 0])\n                scale([1.5, 1, 1])\n                    cylinder(h = 10, d = neck_thickness, center = false);\n        \n        // String attachment posts\n        for(i = [0:10]) {\n            angle = i * 15 - 75;\n            translate([\n                cos(angle) * (neck_thickness/2 + 2),\n                sin(angle) * (neck_thickness/2 + 2),\n                neck_length - 2\n            ])\n                rotate([90, 0, angle])\n                    cylinder(h = 4, d = 1.5, center = false);\n        }\n    }\n}\n\n// Bridge for strings\nmodule bridge() {\n    color(\"tan\") translate([0, 0, gourd_diameter * 0.5 + bridge_height/2]) {\n        // Main bridge piece\n        difference() {\n            cube([gourd_diameter * 0.7, neck_thickness * 0.8, bridge_height], center = true);\n            \n            // String notches\n            for(i = [0:string_count-1]) {\n                x_pos = (i - string_count/2) * (gourd_diameter * 0.7) / string_count;\n                translate([x_pos, 0, -bridge_height/2 - 1])\n                    cube([1, neck_thickness * 0.9, bridge_height + 2], center = true);\n            }\n        }\n        \n        // Bridge supports\n        translate([gourd_diameter * 0.35, 0, -bridge_height/2 - 1])\n            cylinder(h = bridge_height/2, d = 3, center = false);\n        translate([-gourd_diameter * 0.35, 0, -bridge_height/2 - 1])\n            cylinder(h = bridge_height/2, d = 3, center = false);\n    }\n}\n\n// String assembly\nmodule strings() {\n    color(\"ivory\") for(i = [0:string_count-1]) {\n        // Calculate string positions\n        bridge_x = (i - string_count/2) * (gourd_diameter * 0.7) / string_count;\n        tuner_angle = i * 15 - 75;\n        tuner_x = cos(tuner_angle) * (neck_thickness/2 + 2);\n        tuner_z = neck_length - 2;\n        \n        // String from bridge to tuner\n        translate([bridge_x, 0, gourd_diameter * 0.5 + bridge_height + 0.5]) {\n            // String as thin cylinder\n            rotate([90, atan2(tuner_z - (gourd_diameter * 0.5 + bridge_height + 0.5), \n                              tuner_x - bridge_x), 0])\n                cylinder(h = sqrt(pow(tuner_x - bridge_x, 2) + \n                                 pow(tuner_z - (gourd_diameter * 0.5 + bridge_height + 0.5), 2)),\n                        d = 0.4, center = false);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, gourd_diameter * 0.6]) {\n    gourd_resonator();\n    \n    translate([0, 0, gourd_diameter * 0.4])\n        neck();\n    \n    bridge();\n    \n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "ngoni",
    "openscad_code": "// Ngoni - West African lute-harp\n// Medium complexity, realistic style\n// Overall length ~90 mm, 3D-printable\n\n// Main parameters\nbody_length = 55;\nbody_width = 28;\nbody_depth = 12;\nsoundhole_d = 16;\nneck_length = 35;\nneck_width = 7;\nneck_thickness = 5;\ntuning_head_len = 15;\ntuning_head_w = 6;\ntuning_head_h = 9;\nstring_count = 8;\nbridge_height = 3;\nbridge_width = body_width * 0.9;\n\n// Wall thickness for printing\nwall = 1.5;\n\n// Wood color\ncolor(\"burlywood\") {\n\n// Sound box (hollow)\ndifference() {\n    // Outer shell\n    hull() {\n        translate([-body_length/2, 0, 0])\n            scale([1, 0.9, 1])\n            sphere(d = body_width);\n        translate([body_length/2 - 5, 0, 0])\n            scale([1.1, 0.8, 1])\n            sphere(d = body_width);\n    }\n    // Inner cavity\n    scale([0.8, 0.75, 0.7])\n        hull() {\n            translate([-body_length/2, 0, 0])\n                sphere(d = body_width - wall*2);\n            translate([body_length/2 - 5, 0, 0])\n                sphere(d = body_width - wall*2);\n        }\n    // Sound hole\n    translate([body_length/4, 0, body_depth/2])\n        cylinder(h = body_depth, d = soundhole_d, $fn = 32);\n}\n\n// Neck\ntranslate([body_length/2 - 5, 0, body_depth/2 - neck_thickness/2])\n    cube([neck_length, neck_width, neck_thickness], center = true);\n\n// Tuning head\ntranslate([body_length/2 + neck_length - 2, 0, body_depth/2 + neck_thickness/2 - 1])\n    cube([tuning_head_len, tuning_head_w, tuning_head_h], center = true);\n\n// Tuning pegs\nmodule peg(r = 1.2, h = 5) {\n    rotate([90, 0, 0])\n        cylinder(h = h, r = r, $fn = 12);\n}\n\nfor(i = [0 : string_count - 1]) {\n    y = (i - (string_count - 1)/2) * (tuning_head_w / string_count);\n    translate([body_length/2 + neck_length + tuning_head_len/2, y, \n               body_depth/2 + neck_thickness/2 + tuning_head_h/2 - 1]) {\n        peg();\n        peg(r = 1.5, h = 2);\n    }\n}\n\n// Bridge\ntranslate([body_length/4, 0, body_depth/2 + bridge_height/2])\n    cube([bridge_width, 3, bridge_height], center = true);\n\n// Nut\ntranslate([body_length/2 + neck_length - 5, 0, body_depth/2 + neck_thickness/2])\n    cube([neck_width + 2, 1, 1], center = true);\n\n// Strings\nmodule string() {\n    cylinder(h = 100, r = 0.3, $fn = 8);\n}\n\nfor(i = [0 : string_count - 1]) {\n    y = (i - (string_count - 1)/2) * (neck_width * 0.7 / (string_count - 1));\n    color(\"tan\") {\n        translate([body_length/4, y, body_depth/2 + bridge_height])\n            rotate([90, 0, 0])\n                string();\n    }\n}\n\n// Back resonator gourd (optional)\ntranslate([-body_length/2 - 10, 0, -body_depth/2])\n    scale([1, 0.9, 0.7])\n    sphere(d = 20);\n\n} // end color",
    "renders": true
  },
  {
    "musical_instrument": "gurumi",
    "openscad_code": "// Realistic Amigurumi Bear (Gurumi) - Medium Complexity\n// Approx. 80 mm tall sitting bear with 2 mm wall thickness\n\nmodule ball(r, wall) {\n    difference() {\n        sphere(r);\n        sphere(r - wall);\n    }\n}\n\nmodule ear() {\n    translate([0, 0, 1])\n    scale([1, 0.9, 0.7])\n    ball(7, 2);\n}\n\n// Head\ntranslate([0, 0, 55])\nunion() {\n    ball(15, 2);  // skull\n    \n    // Snout\n    translate([0, 11, -3])\n    scale([1.3, 1.1, 1])\n    ball(6, 2);\n    \n    // Nose\n    translate([0, 15, 0])\n    scale([1, 0.8, 0.5])\n    color(\"black\")\n    sphere(2);\n    \n    // Eyes\n    for(x = [-6, 6]) {\n        translate([x, 6, 5])\n        color(\"black\")\n        sphere(2.5);\n    }\n    \n    // Ears\n    translate([10, 0, 10]) rotate([0, -20, 0]) ear();\n    translate([-10, 0, 10]) rotate([0, 20, 0]) mirror([1,0,0]) ear();\n}\n\n// Body\ntranslate([0, 0, 30])\nscale([1.2, 1, 1.3])\nball(18, 2);\n\n// Arms\nfor(side = [-1, 1]) {\n    translate([side * 15, 0, 42])\n    rotate([0, side * 30, 0])\n    scale([0.8, 0.8, 1])\n    cylinder(h = 15, r1 = 6, r2 = 4.5, $fn = 20);\n    \n    translate([side * 19, 0, 27])\n    scale([0.7, 0.7, 0.9])\n    ball(5, 2);  // paws\n}\n\n// Legs\nfor(side = [-1, 1]) {\n    translate([side * 8, 5, 15])\n    rotate([0, 0, side * -20])\n    scale([0.9, 0.9, 1.2])\n    cylinder(h = 12, r1 = 7, r2 = 6, $fn = 20);\n    \n    translate([side * 8, 5, 3])\n    scale([1, 1.2, 0.8])\n    ball(7, 2);  // feet\n}\n\n// Tail\ntranslate([0, -15, 28])\nscale([1, 1, 0.8])\nball(6, 2);",
    "renders": true
  },
  {
    "musical_instrument": "xalam",
    "openscad_code": "// Xalam (West African lute) - medium complexity realistic style\n// Designed for 3D printing - no overhangs, 2mm wall thickness\n\n// Global parameters\nbody_length = 85;\nbody_width = 35;\nbody_depth = 10;\nneck_length = 65;\nneck_width = 8;\nheadstock_length = 25;\nstring_count = 5;\nbridge_height = 3;\n\nmodule xalam_body() {\n    // Main resonator body (gourd-like shape)\n    difference() {\n        // Outer shell\n        hull() {\n            // Front half\n            translate([0, 0, body_depth/2]) \n                scale([1, 0.8, 0.5]) \n                sphere(d=body_width);\n            // Back half\n            translate([0, 0, -body_depth/2]) \n                scale([1, 0.8, 0.5]) \n                sphere(d=body_width);\n        }\n        \n        // Hollow interior\n        scale([0.8, 0.7, 0.7])\n            sphere(d=body_width-2);\n            \n        // Sound hole (front)\n        translate([body_length/4, 0, body_depth/2-1])\n            cylinder(h=2, d=8);\n    }\n}\n\nmodule neck() {\n    // Main neck piece\n    translate([body_length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=neck_length, d=neck_width, $fn=8);\n            \n    // Fingerboard (raised surface)\n    translate([body_length/2 + neck_length/2, 0, neck_width/2 + 1])\n        cube([neck_length, neck_width-2, 2], center=true);\n        \n    // Headstock\n    translate([body_length/2 + neck_length + headstock_length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=headstock_length, d=neck_width+2, $fn=6);\n}\n\nmodule tuning_pegs() {\n    // Pegs on headstock\n    peg_spacing = headstock_length / (string_count + 1);\n    for(i = [1:string_count]) {\n        // Left side pegs (odd strings)\n        if(i % 2 == 1) {\n            translate([body_length/2 + neck_length + peg_spacing*i, neck_width/2 + 2, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=8, d=3, $fn=12);\n        }\n        // Right side pegs (even strings)\n        else {\n            translate([body_length/2 + neck_length + peg_spacing*i, -neck_width/2 - 2, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=8, d=3, $fn=12);\n        }\n    }\n}\n\nmodule bridge() {\n    // Main bridge\n    translate([-body_length/4, 0, body_depth/2 + bridge_height])\n        cube([10, 2, bridge_height], center=true);\n        \n    // String notches\n    string_spacing = 10 / (string_count + 1);\n    for(i = [1:string_count]) {\n        translate([-body_length/4, -5 + string_spacing*i, body_depth/2 + bridge_height + 1])\n            cube([2, 0.5, 1], center=true);\n    }\n}\n\nmodule strings() {\n    // Nylon strings\n    string_length = neck_length + headstock_length + body_length/2;\n    string_spacing = neck_width / (string_count + 1);\n    \n    for(i = [1:string_count]) {\n        // From bridge to nut\n        translate([-body_length/4, -neck_width/2 + string_spacing*i, body_depth/2 + bridge_height + 1])\n            cube([string_length, 0.5, 0.5]);\n            \n        // From nut to tuning peg\n        peg_y = (i % 2 == 1) ? neck_width/2 + 2 : -neck_width/2 - 2;\n        translate([body_length/2 + neck_length, -neck_width/2 + string_spacing*i, neck_width/2 + 1])\n            cube([headstock_length - peg_spacing*i, peg_y - (-neck_width/2 + string_spacing*i), 0.5]);\n    }\n}\n\nmodule soundboard() {\n    // Thin resonating top\n    translate([0, 0, body_depth/2])\n        scale([1, 0.9, 0.1])\n            sphere(d=body_width);\n}\n\n// Assembly\nunion() {\n    // Main components\n    xalam_body();\n    neck();\n    tuning_pegs();\n    bridge();\n    soundboard();\n    \n    // Decorative elements\n    // Tailpiece\n    translate([-body_length/2 - 3, 0, body_depth/2])\n        cube([6, 4, 2], center=true);\n        \n    // Nut\n    translate([body_length/2 + neck_length/2, 0, neck_width/2 + 2])\n        cube([neck_width, 0.5, 0.5], center=true);\n}\n\n// Strings rendered separately for clarity\nstrings();",
    "renders": true
  },
  {
    "musical_instrument": "gonje",
    "openscad_code": "// Gonje (Nigerian lute) - medium complexity realistic model\n// Designed for 3D printing without supports\n\n// Parameters\n$fn = 32; // Circle resolution\nbody_length = 80;\nbody_width = 45;\nbody_depth = 25;\nneck_length = 60;\nneck_width = 8;\nneck_thickness = 6;\nheadstock_length = 30;\nheadstock_width = 12;\npeg_diameter = 2;\npeg_length = 10;\nstring_diameter = 0.5;\nbridge_height = 5;\nbridge_width = 30;\nsoundhole_diameter = 12;\n\n// Main body - hollow resonator\nmodule body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, 0])\n                scale([1, 0.8, 0.6])\n                sphere(d=body_width);\n            translate([body_length/2, 0, 0])\n                scale([0.8, 1, 0.7])\n                sphere(d=body_width*0.9);\n        }\n        \n        // Hollow interior\n        scale([0.85, 0.85, 0.85])\n        hull() {\n            translate([0, 0, 0])\n                scale([1, 0.8, 0.6])\n                sphere(d=body_width);\n            translate([body_length/2, 0, 0])\n                scale([0.8, 1, 0.7])\n                sphere(d=body_width*0.9);\n        }\n        \n        // Sound hole\n        translate([body_length/3, 0, body_depth/2])\n            rotate([90, 0, 0])\n            cylinder(h=body_depth, d=soundhole_diameter);\n    }\n}\n\n// Neck with fingerboard\nmodule neck() {\n    translate([body_length, 0, body_depth/2]) {\n        // Main neck\n        rotate([0, 90, 0])\n            cylinder(h=neck_length, d=neck_width);\n        \n        // Fingerboard (raised)\n        translate([neck_length/2, 0, neck_thickness/2 + 0.5])\n            cube([neck_length, neck_width*1.2, neck_thickness/2], center=true);\n    }\n}\n\n// Headstock with tuning pegs\nmodule headstock() {\n    translate([body_length + neck_length, 0, body_depth/2]) {\n        // Headstock shape\n        rotate([0, 90, 0])\n            cylinder(h=headstock_length, d=headstock_width);\n        \n        // Tuning pegs (4 on each side)\n        for(i = [-1, 1]) {\n            for(j = [1:4]) {\n                translate([j*headstock_length/5, i*headstock_width/2, 0])\n                    rotate([90, 0, 90])\n                    cylinder(h=peg_length, d=peg_diameter);\n            }\n        }\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([body_length*0.7, 0, body_depth/2 + 2]) {\n        cube([bridge_width, 5, bridge_height], center=true);\n    }\n}\n\n// Strings\nmodule strings() {\n    for(i = [-1.5, -0.5, 0.5, 1.5]) {\n        hull() {\n            // Nut end\n            translate([body_length + neck_length + headstock_length*0.8, i*2, body_depth/2 + neck_thickness/2 + 0.5]) {\n                sphere(d=string_diameter);\n            }\n            // Bridge end\n            translate([body_length*0.7, i*2, body_depth/2 + 2 + bridge_height]) {\n                sphere(d=string_diameter);\n            }\n        }\n    }\n}\n\n// Decorative elements\nmodule decorations() {\n    // Binding around body edge\n    translate([0, 0, body_depth/2])\n        scale([1, 0.8, 0.6])\n        difference() {\n            cylinder(h=body_depth + 2, d=body_width + 2);\n            cylinder(h=body_depth + 3, d=body_width);\n        }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    headstock();\n    bridge();\n    strings();\n    decorations();\n}",
    "renders": true
  },
  {
    "musical_instrument": "garaya",
    "openscad_code": "// Garaya (West-African calabash rattle) – realistic, medium complexity\n// Units: mm\n// Overall height ≈ 75 mm\n\n// Parameters\nrattle_h = 65;        // Height of the calabash body\nrattle_r = 25;        // Radius of the calabash body\nneck_r = 7;           // Radius of the neck\nneck_h = 10;          // Length of neck\nhandle_r = 5;         // Handle radius\nhandle_l = 45;        // Handle length\nwall_t = 2;           // Wall thickness for printability\nseed_n = 30;          // Number of interior seeds\nseed_r = 2.5;         // Seed radius\nnet_thick = 1.2;      // Net/bead string thickness\nnet_rows = 4;         // Bead net rows\nnet_cols = 12;        // Bead net columns\nbead_r = 1.8;         // Bead radius\n\n// Helper: random seed placement\nfunction rand(v, s) = rands(-v, v, 1, s)[0];\n\n// Calabash shell\nmodule calabash_shell() {\n    difference() {\n        // Outer shape (two intersecting spheres for gourd-like form)\n        intersection() {\n            translate([0, 0, rattle_h/2])\n                sphere(r = rattle_r, $fn = 60);\n            translate([0, 0, -rattle_h/2])\n                sphere(r = rattle_r*0.9, $fn = 60);\n        }\n        // Hollow inside\n        translate([0, 0, -1])\n            scale([1, 1, 1.1])\n                difference() {\n                    intersection() {\n                        translate([0, 0, rattle_h/2])\n                            sphere(r = rattle_r - wall_t, $fn = 60);\n                        translate([0, 0, -rattle_h/2])\n                            sphere(r = (rattle_r - wall_t)*0.9, $fn = 60);\n                    }\n                    // Opening at neck\n                    translate([0, 0, rattle_h - neck_h - 2])\n                        cylinder(r1 = neck_r, r2 = neck_r + 2, h = neck_h + 4, $fn = 32);\n                }\n        // Actual neck hole\n        translate([0, 0, rattle_h - neck_h])\n            cylinder(r = neck_r, h = neck_h + 2, $fn = 32);\n    }\n}\n\n// Interior seeds for rattle sound\nmodule seeds() {\n    for(i = [0 : seed_n - 1]) {\n        translate([\n            rand(rattle_r - wall_t - seed_r, i*73),\n            rand(rattle_r - wall_t - seed_r + 11, i*37),\n            rand(rattle_h/2 - seed_r, i*97)\n        ])\n            sphere(r = seed_r, $fn = 12);\n    }\n}\n\n// Handle\nmodule handle() {\n    difference() {\n        // Shaft\n        cylinder(r = handle_r, h = handle_l, $fn = 32);\n        // Optional grip grooves\n        for(i = [1 : 3]) {\n            translate([0, 0, i*handle_l/4])\n                rotate([0, 90, 0])\n                    cylinder(r = handle_r + 0.2, h = handle_r*0.4, $fn = 32);\n        }\n    }\n}\n\n// Net of beads around the calabash\nmodule bead_net() {\n    // Ring on neck\n    rotate_extrude($fn = net_cols*4)\n        translate([neck_r + wall_t + bead_r*0.5, 0])\n            circle(r = net_thick, $fn = 8);\n    // Vertical strings\n    for(i = [0 : net_cols - 1])\n        rotate([0, 0, i*360/net_cols])\n            translate([neck_r + wall_t + bead_r, 0, 0])\n                cylinder(r = net_thick, h = rattle_h - neck_h - bead_r, $fn = 8);\n    // Horizontal strings + beads\n    for(row = [1 : net_rows]) {\n        h = neck_h + (rattle_h - neck_h*2)*(row/net_rows);\n        for(col = [0 : net_cols - 1]) {\n            angle = col*360/net_cols;\n            // String segment\n            rotate([0, 0, angle])\n                translate([neck_r + wall_t + bead_r, 0, h])\n                    cylinder(r = net_thick, h = 0.1, $fn = 8);\n            // Bead\n            rotate([0, 0, angle])\n                translate([(neck_r + wall_t + bead_r) + (rattle_r - neck_r - wall_t - bead_r)*(sin(row*90)+1)/2,\n                           0,\n                           h])\n                    sphere(r = bead_r, $fn = 10);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Calabash body\n    calabash_shell();\n    // Interior seeds (only for preview – remove for final print if desired)\n    %seeds();\n    // Neck\n    translate([0, 0, rattle_h - neck_h])\n        cylinder(r1 = neck_r + wall_t, r2 = handle_r, h = neck_h, $fn = 32);\n    // Handle\n    translate([0, 0, rattle_h])\n        handle();\n    // Bead net\n    bead_net();\n}",
    "renders": true
  },
  {
    "musical_instrument": "flute",
    "openscad_code": "// OpenSCAD Flute Model - Medium Complexity\n// Realistic style flute with finger holes and embouchure hole\n\n// Global parameters\nwall_thick = 1.5;\nbody_d = 16;\nbody_len = 90;\nheadjoint_len = 35;\nfootjoint_len = 25;\n\n// Embouchure hole parameters\nemb_w = 8;\nemb_h = 4;\nemb_d = 5;\n\n// Finger hole parameters\nhole_d = 4;\nhole_dist = [25, 35, 45, 55, 65, 75];\n\n// Lip plate parameters\nlip_w = 12;\nlip_h = 3;\nlip_l = 10;\n\n// Crown parameters\ncrown_d = 18;\ncrown_h = 8;\n\n// Main flute module\nmodule flute() {\n    // Body tube\n    difference() {\n        cylinder(h=body_len, d=body_d, $fn=32);\n        translate([0,0,-1])\n            cylinder(h=body_len+2, d=body_d-2*wall_thick, $fn=32);\n    }\n    \n    // Head joint\n    translate([0,0,body_len]) {\n        difference() {\n            cylinder(h=headjoint_len, d=body_d-2, $fn=32);\n            translate([0,0,-1])\n                cylinder(h=headjoint_len+2, d=body_d-2-2*wall_thick, $fn=32);\n        }\n    }\n    \n    // Foot joint\n    translate([0,0,-footjoint_len]) {\n        difference() {\n            cylinder(h=footjoint_len, d=body_d-2, $fn=32);\n            translate([0,0,-1])\n                cylinder(h=footjoint_len+2, d=body_d-2-2*wall_thick, $fn=32);\n        }\n    }\n    \n    // Lip plate\n    translate([0, body_d/2 + lip_h/2, body_len + headjoint_len/2]) {\n        cube([lip_w, lip_h, lip_l], center=true);\n    }\n    \n    // Embouchure hole\n    translate([0, body_d/2, body_len + headjoint_len - 5]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cube([emb_w, emb_d, emb_h], center=true);\n                translate([0, 0, -1])\n                    cube([emb_w+2, emb_d+2, emb_h/2], center=true);\n            }\n        }\n    }\n    \n    // Crown\n    translate([0, 0, body_len + headjoint_len + crown_h/2]) {\n        cylinder(h=crown_h, d1=crown_d, d2=crown_d-4, $fn=32);\n    }\n    \n    // Finger holes\n    for(i = [0:len(hole_dist)-1]) {\n        translate([0, body_d/2, hole_dist[i]]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=body_d, d=hole_d, $fn=16);\n            }\n        }\n    }\n    \n    // Keys (simplified)\n    module key(x, z, angle) {\n        translate([x, 0, z]) {\n            rotate([0, angle, 0]) {\n                cube([12, 3, 2], center=true);\n            }\n        }\n    }\n    \n    // Add some keys for realism\n    key(-body_d/2 - 3, 30, 20);\n    key(body_d/2 + 3, 40, -20);\n    key(-body_d/2 - 3, 50, 15);\n    key(body_d/2 + 3, 60, -15);\n}\n\n// Main assembly\nflute();",
    "renders": true
  },
  {
    "musical_instrument": "trumpet",
    "openscad_code": "// Trumpet model - realistic style, medium complexity\n// Designed for 3D printing with proper wall thickness and minimal overhangs\n\n$fn = 32;\nwall_thickness = 1.2;\n\nmodule bell() {\n    // Main bell flare\n    difference() {\n        cylinder(h = 25, r1 = 22, r2 = 12);\n        translate([0, 0, -0.1]) cylinder(h = 25.2, r1 = 20.8, r2 = 10.8);\n    }\n    \n    // Bell rim\n    difference() {\n        translate([0, 0, 25]) cylinder(h = 3, r1 = 12, r2 = 12.5);\n        translate([0, 0, 24.9]) cylinder(h = 3.2, r1 = 10.8, r2 = 11.3);\n    }\n}\n\nmodule leadpipe() {\n    // Leadpipe from mouthpiece receiver\n    rotate([0, 90, 0]) {\n        difference() {\n            cylinder(h = 35, r = 6);\n            translate([0, 0, -0.1]) cylinder(h = 35.2, r = 4.8);\n        }\n    }\n}\n\nmodule valves() {\n    // Main valve block\n    difference() {\n        cube([20, 20, 35], center = true);\n        cube([17.6, 17.6, 35.2], center = true);\n    }\n    \n    // Three valve pistons\n    for(i = [-1, 0, 1]) {\n        translate([i * 6, 0, 20]) {\n            difference() {\n                cylinder(h = 15, r = 3);\n                translate([0, 0, -0.1]) cylinder(h = 15.2, r = 1.8);\n            }\n            // Valve caps\n            translate([0, 0, -1]) cylinder(h = 2, r = 4);\n        }\n    }\n    \n    // Valve buttons\n    for(i = [-1, 0, 1]) {\n        translate([i * 6, 0, 36]) {\n            difference() {\n                cylinder(h = 3, r = 4);\n                translate([0, 0, -0.1]) cylinder(h = 3.2, r = 2.8);\n            }\n        }\n    }\n}\n\nmodule tubing() {\n    // Main tuning slide\n    translate([10, 0, 0]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = 30, r = 5);\n                translate([0, 0, -0.1]) cylinder(h = 30.2, r = 3.8);\n            }\n        }\n    }\n    \n    // First valve slide\n    translate([-10, -15, 0]) {\n        rotate([0, 0, 90]) {\n            difference() {\n                cylinder(h = 20, r = 4);\n                translate([0, 0, -0.1]) cylinder(h = 20.2, r = 2.8);\n            }\n        }\n    }\n    \n    // Third valve slide\n    translate([10, -15, 0]) {\n        rotate([0, 0, 90]) {\n            difference() {\n                cylinder(h = 25, r = 4);\n                translate([0, 0, -0.1]) cylinder(h = 25.2, r = 2.8);\n            }\n        }\n    }\n    \n    // Connecting tubes\n    // Bell to valves\n    translate([0, 12, 0]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 15, r = 5);\n                translate([0, 0, -0.1]) cylinder(h = 15.2, r = 3.8);\n            }\n        }\n    }\n    \n    // Valves to leadpipe\n    translate([-15, 0, 0]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = 20, r = 5);\n                translate([0, 0, -0.1]) cylinder(h = 20.2, r = 3.8);\n            }\n        }\n    }\n}\n\nmodule mouthpiece() {\n    // Mouthpiece receiver\n    translate([-25, 0, 0]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = 8, r1 = 6, r2 = 4);\n                translate([0, 0, -0.1]) cylinder(h = 8.2, r1 = 4.8, r2 = 2.8);\n            }\n        }\n    }\n    \n    // Mouthpiece\n    translate([-33, 0, 0]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = 10, r1 = 4, r2 = 6);\n                translate([0, 0, -0.1]) cylinder(h = 10.2, r1 = 2.8, r2 = 4.8);\n            }\n        }\n    }\n}\n\nmodule water_keys() {\n    // Water key on main tuning slide\n    translate([20, 5, 0]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 4, r = 2);\n                translate([0, 0, -0.1]) cylinder(h = 4.2, r = 0.8);\n            }\n        }\n    }\n    \n    // Water key lever\n    translate([20, 7, 2]) {\n        difference() {\n            cube([8, 2, 1], center = true);\n            cube([7.6, 1.6, 1.2], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Bell section\n    translate([0, 0, 0]) bell();\n    \n    // Valve section\n    translate([0, 0, -10]) valves();\n    \n    // Leadpipe and mouthpiece\n    translate([0, 0, -20]) leadpipe();\n    translate([0, 0, -20]) mouthpiece();\n    \n    // All tubing\n    translate([0, 0, -10]) tubing();\n    \n    // Water keys\n    water_keys();\n}",
    "renders": true
  },
  {
    "musical_instrument": "saxophone",
    "openscad_code": "$fn = 50; // Smooth curves\n\n// Overall scale\nscaleFactor = 0.7;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule mainBody() {\n    // Main curved tube\n    translate([0, 0, 30])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 100, r1 = 8, r2 = 8);\n        cylinder(h = 100, r1 = 8 - wall, r2 = 8 - wall);\n    }\n\n    // Bell flare\n    translate([0, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 25, r1 = 8, r2 = 22);\n        cylinder(h = 25, r1 = 8 - wall, r2 = 22 - wall);\n    }\n\n    // Neck crook\n    translate([100, 0, 30])\n    rotate([0, 90, -30])\n    difference() {\n        cylinder(h = 25, r1 = 8, r2 = 6);\n        cylinder(h = 25, r1 = 8 - wall, r2 = 6 - wall);\n    }\n\n    // Mouthpiece\n    translate([120, 0, 42])\n    rotate([0, 90, -30])\n    difference() {\n        cylinder(h = 20, r1 = 6, r2 = 4);\n        cylinder(h = 20, r1 = 6 - wall, r2 = 4 - wall);\n    }\n}\n\nmodule keys() {\n    // Left hand keys\n    for(i = [0:2]) {\n        translate([50 + i*10, 0, 35 + i*3])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 8, r = 3);\n            cylinder(h = 8, r = 1.5);\n        }\n    }\n\n    // Right hand keys\n    for(i = [0:3]) {\n        translate([65 + i*8, 0, 25 - i*2])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 6, r = 2.5);\n            cylinder(h = 6, r = 1);\n        }\n    }\n\n    // Palm keys\n    for(i = [0:2]) {\n        translate([45 - i*5, 0, 45 + i*3])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 5, r = 2);\n            cylinder(h = 5, r = 0.8);\n        }\n    }\n}\n\nmodule toneHoles() {\n    // Tone holes along body\n    for(i = [0:5]) {\n        translate([20 + i*15, 0, 25 + sin(i*30)*3])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 5, r = 3);\n            cylinder(h = 5, r = 1.5);\n        }\n    }\n}\n\nmodule neckStrapHook() {\n    translate([85, 0, 50])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 8, r = 4);\n        cylinder(h = 8, r = 2);\n    }\n    \n    // Hook part\n    translate([89, 0, 50])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 5, r = 1);\n        translate([0, 0, -1]) cube([2, 2, 7], center = true);\n    }\n}\n\nmodule octaveKey() {\n    translate([105, 0, 40])\n    rotate([0, 0, -20])\n    difference() {\n        cylinder(h = 15, r = 2);\n        cylinder(h = 15, r = 0.8);\n    }\n}\n\n// Assembly\nscale([scaleFactor, scaleFactor, scaleFactor]) {\n    union() {\n        mainBody();\n        keys();\n        toneHoles();\n        neckStrapHook();\n        octaveKey();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "clarinet",
    "openscad_code": "// Clarinet - Realistic style, medium complexity\n// Scaled for 3D printing (~80mm length)\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\nbody_d = 8;\nbody_length = 65;\nbell_length = 15;\nmouthpiece_length = 12;\n\nmodule clarinet() {\n    // Main body tube\n    union() {\n        // Lower body (main tube)\n        cylinder(h=body_length, d=body_d, center=false);\n        \n        // Bell flare\n        translate([0, 0, body_length])\n            cylinder(h=bell_length, d1=body_d, d2=body_d*1.6, center=false);\n        \n        // Barrel joint\n        translate([0, 0, -8])\n            cylinder(h=8, d=body_d*1.1, center=false);\n        \n        // Mouthpiece\n        translate([0, 0, -8-mouthpiece_length])\n            cylinder(h=mouthpiece_length, d1=body_d*1.1, d2=body_d*0.8, center=false);\n        \n        // Mouthpiece beak tip\n        translate([0, 0, -8-mouthpiece_length])\n            rotate([90, 0, 0])\n                cylinder(h=body_d*0.4, d1=body_d*0.8, d2=body_d*0.4, center=false);\n    }\n    \n    // Tone holes\n    for(i = [1:6]) {\n        angle = i * 60;\n        height = i * 8 + 10;\n        \n        // Front holes\n        translate([sin(angle) * body_d/2, cos(angle) * body_d/2, height])\n            rotate([90, 0, 0])\n                cylinder(h=body_d, d1=2.5, d2=2.5, center=true);\n        \n        // Rear thumb hole\n        if(i == 3) {\n            translate([0, -body_d/2, height + 5])\n                rotate([90, 0, 0])\n                    cylinder(h=body_d, d1=3, d2=3, center=true);\n        }\n    }\n    \n    // Keys - simplified levers\n    for(i = [1:5]) {\n        height = i * 8 + 8;\n        \n        // Key arms\n        translate([body_d/2 + 1, 0, height])\n            cube([3, 1, 2], center=true);\n        \n        // Key cups\n        translate([body_d/2 + 3, 0, height])\n            cylinder(h=1, d=3, center=true);\n    }\n    \n    // Register key\n    translate([0, body_d/2 + 1, 30])\n        rotate([0, 0, 90])\n            cube([5, 1, 1], center=true);\n    \n    // Ligature\n    translate([0, 0, -8-mouthpiece_length/2])\n        difference() {\n            cylinder(h=5, d=body_d*1.2, center=true);\n            cylinder(h=6, d=body_d*0.9, center=true);\n        }\n    \n    // Cork joint rings\n    for(z = [0, body_length - 10, body_length]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h=2, d=body_d*1.15, center=false);\n                cylinder(h=3, d=body_d, center=false);\n            }\n    }\n}\n\n// Render the clarinet\nclarinet();",
    "renders": true
  },
  {
    "musical_instrument": "oboe",
    "openscad_code": "// Oboe Model - Realistic Style, Medium Complexity\n// Basic dimensions (mm)\noboe_length = 85;\nbell_diameter = 12;\nbody_diameter = 8;\nkey_thickness = 1.2;\nkey_width = 2.5;\nwall_thickness = 1.5;\n\n// Main body module\nmodule oboe_body() {\n    // Upper joint\n    cylinder(h=35, d1=body_diameter, d2=body_diameter-1, $fn=32);\n    \n    // Lower joint\n    translate([0,0,35])\n        cylinder(h=30, d1=body_diameter-1, d2=body_diameter-0.5, $fn=32);\n    \n    // Bell\n    translate([0,0,65])\n        cylinder(h=20, d1=body_diameter-0.5, d2=bell_diameter, $fn=32);\n    \n    // Mouthpiece\n    translate([0,0,-5])\n        cylinder(h=5, d1=body_diameter+2, d2=body_diameter, $fn=32);\n}\n\n// Tone holes\nmodule tone_holes() {\n    for(i=[0:11]) {\n        rotate([90,0,i*30]) \n            translate([(body_diameter/2)-0.5, 0, 10+i*5.5])\n                cylinder(h=wall_thickness+0.5, d=1.8, $fn=16);\n    }\n}\n\n// Keys - simplified realistic representation\nmodule keys() {\n    // Left hand keys\n    translate([0,0,25])\n        for(i=[0:3]) {\n            rotate([0,0,i*25-30])\n                translate([body_diameter/2+1, 0, 0])\n                    cube([key_width, key_thickness, 6], center=true);\n        }\n    \n    // Right hand keys\n    translate([0,0,45])\n        for(i=[0:2]) {\n            rotate([0,0,i*30+45])\n                translate([body_diameter/2+1, 0, 0])\n                    cube([key_width, key_thickness, 5], center=true);\n        }\n    \n    // Thumb keys\n    rotate([90,0,0])\n        translate([0, body_diameter/2+1, 15])\n            cube([4, key_thickness, 8], center=true);\n}\n\n// Octave keys\nmodule octave_mechanism() {\n    // Main octave key\n    translate([0, body_diameter/2+key_thickness/2, 5])\n        cube([key_width, key_thickness, 15], center=true);\n    \n    // Small octave key\n    translate([key_width/2, body_diameter/2+key_thickness/2+1, 10])\n        cube([key_width*0.6, key_thickness, 8], center=true);\n}\n\n// Reed\nmodule reed() {\n    translate([0,0,-8])\n        cylinder(h=3, d1=6, d2=body_diameter+1.5, $fn=16);\n}\n\n// Main assembly\nunion() {\n    // Hollow body\n    difference() {\n        oboe_body();\n        // Hollow interior\n        translate([0,0,-5])\n            cylinder(h=oboe_length+5, d=body_diameter-wall_thickness*2, $fn=32);\n    }\n    \n    tone_holes();\n    keys();\n    octave_mechanism();\n    reed();\n}",
    "renders": true
  },
  {
    "musical_instrument": "bassoon",
    "openscad_code": "// Bassoon - medium complexity realistic style\n// Total length ~95 mm, printable without supports\n\n$fn = 32;\n\nmodule bell_section() {\n    // Main bell flare\n    translate([0, 0, 0])\n        cylinder(h = 15, d1 = 18, d2 = 25, center = false);\n\n    // Bell rim lip\n    translate([0, 0, -1])\n        cylinder(h = 3, d = 27, center = false);\n\n    // Small U-bend at bell base\n    translate([0, 12, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 24, d = 18, center = false);\n}\n\nmodule boot_joint() {\n    // Boot U-bend main body\n    translate([0, 12, -12])\n        rotate([0, 90, 0])\n        cylinder(h = 30, d = 22, center = false);\n\n    // Side tube connections\n    translate([0, 12, -12])\n        rotate([0, 0, 90])\n        cylinder(h = 35, d = 16, center = false);\n\n    // Small tone hole bumps\n    for (i = [0:3]) {\n        translate([0, 12 + i * 5, -12])\n            rotate([0, 0, 90])\n            cylinder(h = 1.5, d = 4, center = true);\n    }\n}\n\nmodule wing_joint() {\n    // Wing joint tube ascending\n    translate([0, 12, 18])\n        rotate([0, 0, 90])\n        cylinder(h = 20, d = 14, center = false);\n\n    // Crook receiver\n    translate([0, 32, 18])\n        cylinder(h = 8, d = 10, center = false);\n}\n\nmodule crook_bocal() {\n    // Curved bocal tube\n    translate([0, 40, 18])\n        rotate([0, 90, 0])\n        cylinder(h = 15, d = 6, center = false);\n\n    // Bocal curve continuation\n    translate([0, 45, 25])\n        rotate([30, 0, 0])\n        cylinder(h = 20, d = 6, center = false);\n\n    // Reed socket\n    translate([0, 55, 32])\n        cylinder(h = 8, d = 5, center = false);\n}\n\nmodule keys_and_mechanisms() {\n    // Long rod keys along wing\n    for (i = [0:4]) {\n        translate([3, 15 + i * 4, 18])\n            cube([1, 2, 1], center = true);\n    }\n\n    // Boot joint keys\n    for (i = [0:5]) {\n        translate([3, 12, -12 + i * 5])\n            cube([1, 1.5, 2], center = true);\n    }\n\n    // Bell key cluster\n    translate([-6, 0, 5])\n        cube([2, 4, 1], center = true);\n}\n\nmodule bassoon_body() {\n    union() {\n        bell_section();\n        boot_joint();\n        wing_joint();\n        crook_bocal();\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    bassoon_body();\n\ntranslate([0, 0, 0])\n    keys_and_mechanisms();",
    "renders": true
  },
  {
    "musical_instrument": "trombone",
    "openscad_code": "// Trombone - Realistic style, medium complexity\n// Dimensions in mm, designed for 3D printing\n\nmodule bell() {\n    // Main bell flare\n    difference() {\n        cylinder(h = 20, r1 = 18, r2 = 12, $fn = 32);\n        translate([0, 0, -1])\n            cylinder(h = 22, r1 = 17, r2 = 11, $fn = 32);\n    }\n    \n    // Bell rim\n    translate([0, 0, 20])\n        difference() {\n            cylinder(h = 3, r1 = 18, r2 = 18.5, $fn = 32);\n            cylinder(h = 3.5, r1 = 17.5, r2 = 18, $fn = 32);\n        }\n}\n\nmodule slide_tube(length = 40) {\n    // Outer slide tube\n    difference() {\n        cylinder(h = length, r = 5, $fn = 16);\n        translate([0, 0, -1])\n            cylinder(h = length + 2, r = 4, $fn = 16);\n    }\n}\n\nmodule slide_stock() {\n    // Stocking end with thicker walls\n    difference() {\n        cylinder(h = 10, r = 6, $fn = 16);\n        translate([0, 0, -1])\n            cylinder(h = 12, r = 4.5, $fn = 16);\n    }\n}\n\nmodule mouthpiece() {\n    // Cup\n    difference() {\n        sphere(r = 5, $fn = 32);\n        translate([0, 0, 2])\n            sphere(r = 4.5, $fn = 32);\n    }\n    \n    // Shank\n    translate([0, 0, -5])\n        difference() {\n            cylinder(h = 8, r = 2.5, $fn = 16);\n            translate([0, 0, -1])\n                cylinder(h = 10, r = 2, $fn = 16);\n        }\n}\n\nmodule tuning_slide() {\n    // U-shaped tuning slide\n    translate([0, 0, 0]) {\n        // Main U-bend\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 15, r = 5, $fn = 16);\n                translate([0, 0, -1])\n                    cylinder(h = 17, r = 4, $fn = 16);\n            }\n        \n        // Left leg\n        translate([-7.5, 0, 0])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h = 15, r = 5, $fn = 16);\n                    translate([0, 0, -1])\n                        cylinder(h = 17, r = 4, $fn = 16);\n                }\n        \n        // Right leg\n        translate([7.5, 0, 0])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h = 15, r = 5, $fn = 16);\n                    translate([0, 0, -1])\n                        cylinder(h = 17, r = 4, $fn = 16);\n                }\n    }\n}\n\nmodule main_tubing() {\n    // Bell to slide connection\n    translate([0, 0, 0])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 25, r = 5.5, $fn = 16);\n                translate([0, 0, -1])\n                    cylinder(h = 27, r = 4.5, $fn = 16);\n            }\n    \n    // Main slide tubes\n    translate([25, -15, 0])\n        slide_tube(35);\n    translate([25, 15, 0])\n        slide_tube(35);\n    \n    // Slide stockings\n    translate([60, -15, 0])\n        slide_stock();\n    translate([60, 15, 0])\n        slide_stock();\n    \n    // Tuning slide connection\n    translate([0, 0, -25])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 20, r = 5.5, $fn = 16);\n                translate([0, 0, -1])\n                    cylinder(h = 22, r = 4.5, $fn = 16);\n            }\n}\n\nmodule water_key() {\n    // Simple water key lever\n    translate([0, 0, -35])\n        rotate([90, 0, 0])\n            union() {\n                difference() {\n                    cube([8, 3, 2], center = true);\n                    translate([0, 0, 0.5])\n                        cube([7, 2, 2], center = true);\n                }\n                translate([4, 0, 1])\n                    sphere(r = 1.5, $fn = 16);\n            }\n}\n\n// Assembly\nunion() {\n    // Bell section\n    translate([0, 0, 0])\n        bell();\n    \n    // Main tubing assembly\n    main_tubing();\n    \n    // Tuning slide\n    translate([0, 0, -45])\n        tuning_slide();\n    \n    // Mouthpiece\n    translate([-15, 0, 0])\n        rotate([0, 90, 0])\n            mouthpiece();\n    \n    // Water key\n    water_key();\n}\n\n// Print orientation support base\ntranslate([0, 0, -50])\n    cube([1, 1, 1], center = true);",
    "renders": true
  },
  {
    "musical_instrument": "tuba",
    "openscad_code": "// Tuba in realistic style with medium complexity\n// Designed for 3D printing - 80mm height\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule tuba_body() {\n    // Main body tube\n    rotate([0, 90, 0]) {\n        // Large bell\n        difference() {\n            cylinder(h = 20, d1 = 25, d2 = 30);\n            translate([0, 0, wall_thickness]) \n                cylinder(h = 20 - wall_thickness, d1 = 25 - wall_thickness*2, d2 = 30 - wall_thickness*2);\n        }\n        \n        // First loop\n        translate([10, 0, 0]) {\n            rotate([0, 0, 30]) {\n                difference() {\n                    cylinder(h = 25, d = 15);\n                    translate([0, 0, wall_thickness]) \n                        cylinder(h = 25 - wall_thickness*2, d = 15 - wall_thickness*2);\n                }\n            }\n        }\n        \n        // Second loop\n        translate([25, 0, 0]) {\n            rotate([0, 0, 0]) {\n                difference() {\n                    cylinder(h = 20, d = 12);\n                    translate([0, 0, wall_thickness]) \n                        cylinder(h = 20 - wall_thickness*2, d = 12 - wall_thickness*2);\n                }\n            }\n        }\n    }\n}\n\nmodule valves() {\n    // Valve assembly\n    translate([0, -15, 10]) {\n        // Valve block\n        difference() {\n            cube([20, 15, 15], center = true);\n            translate([0, 0, wall_thickness]) \n                cube([20 - wall_thickness*2, 15 - wall_thickness*2, 15 - wall_thickness*2], center = true);\n        }\n        \n        // Three valve pistons\n        for(i = [-1, 0, 1]) {\n            translate([i * 6, 7.5, 0]) {\n                difference() {\n                    cylinder(h = 10, d = 4);\n                    translate([0, 0, wall_thickness]) \n                        cylinder(h = 10 - wall_thickness*2, d = 4 - wall_thickness*2);\n                }\n            }\n        }\n    }\n}\n\nmodule mouthpiece() {\n    // Leadpipe\n    translate([0, -30, 15]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = 20, d1 = 8, d2 = 12);\n                translate([0, 0, wall_thickness]) \n                    cylinder(h = 20 - wall_thickness*2, d1 = 8 - wall_thickness*2, d2 = 12 - wall_thickness*2);\n            }\n        }\n        \n        // Mouthpiece\n        translate([0, -25, 0]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h = 10, d1 = 5, d2 = 8);\n                    translate([0, 0, wall_thickness]) \n                        cylinder(h = 10 - wall_thickness*2, d1 = 5 - wall_thickness*2, d2 = 8 - wall_thickness*2);\n                }\n            }\n        }\n    }\n}\n\nmodule tuning_slides() {\n    // First tuning slide\n    translate([30, -5, 0]) {\n        rotate([0, 90, 30]) {\n            difference() {\n                cylinder(h = 15, d = 8);\n                translate([0, 0, wall_thickness]) \n                    cylinder(h = 15 - wall_thickness*2, d = 8 - wall_thickness*2);\n            }\n        }\n    }\n    \n    // Second tuning slide\n    translate([35, 0, 5]) {\n        rotate([0, 90, -30]) {\n            difference() {\n                cylinder(h = 12, d = 6);\n                translate([0, 0, wall_thickness]) \n                    cylinder(h = 12 - wall_thickness*2, d = 6 - wall_thickness*2);\n            }\n        }\n    }\n}\n\n// Assemble the tuba\nunion() {\n    tuba_body();\n    valves();\n    mouthpiece();\n    tuning_slides();\n}",
    "renders": true
  },
  {
    "musical_instrument": "harmonica",
    "openscad_code": "// Realistic 3D printable harmonica (medium complexity)\n// Approx. size 100mm x 25mm x 20mm\n\n// Main parameters\nbody_length = 100;\nbody_width = 25;\nbody_height = 18;\nwall_thickness = 2;\ncover_gap = 1;\n\n// Mouthpiece parameters\nmouthpiece_length = 12;\nmouthpiece_hole_width = 3;\nmouthpiece_hole_height = 4;\nmouthpiece_holes = 10;\n\n// Cover plate parameters\ncover_length = 95;\ncover_height = 12;\ncover_radius = 8;\n\n// Side vent parameters\nvent_width = 1.5;\nvent_height = 8;\nvent_spacing = 5;\n\n// Comb (main body)\nmodule harmonica_body() {\n    difference() {\n        // Main rectangular body\n        cube([body_length, body_width, body_height], center=true);\n        \n        // Air channels\n        for (i = [0:mouthpiece_holes-1]) {\n            translate([\n                -body_length/2 + mouthpiece_length/2 + i*(body_length - mouthpiece_length)/(mouthpiece_holes-1),\n                0,\n                0\n            ]) {\n                cube([\n                    mouthpiece_hole_width + 1,\n                    body_width - wall_thickness*2,\n                    body_height - wall_thickness*2\n                ], center=true);\n            }\n        }\n    }\n}\n\n// Mouthpiece with holes\nmodule mouthpiece() {\n    translate([-body_length/2 + mouthpiece_length/2, 0, body_height/2]) {\n        difference() {\n            // Mouthpiece block\n            cube([mouthpiece_length, body_width, body_height/2], center=true);\n            \n            // Mouth holes\n            for (i = [0:mouthpiece_holes-1]) {\n                translate([\n                    -mouthpiece_length/2 + 3 + i*7,\n                    0,\n                    0\n                ]) {\n                    cube([mouthpiece_hole_width, mouthpiece_hole_width, body_height], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Top cover plate\nmodule top_cover() {\n    translate([0, 0, body_height/2 + cover_gap]) {\n        difference() {\n            // Main cover shape with rounded ends\n            hull() {\n                translate([-cover_length/2 + cover_radius, 0, 0])\n                    cylinder(h=cover_height, r=cover_radius, center=true);\n                translate([cover_length/2 - cover_radius, 0, 0])\n                    cylinder(h=cover_height, r=cover_radius, center=true);\n                cube([cover_length - cover_radius*2, body_width - 4, cover_height], center=true);\n            }\n            \n            // Side vents\n            for (i = [0:8]) {\n                translate([\n                    -cover_length/2 + 10 + i*vent_spacing,\n                    body_width/2 - 2,\n                    0\n                ]) {\n                    rotate([0, 90, 0])\n                        cylinder(h=vent_width*2, r=vent_height/2, center=true);\n                }\n                translate([\n                    -cover_length/2 + 10 + i*vent_spacing,\n                    -body_width/2 + 2,\n                    0\n                ]) {\n                    rotate([0, 90, 0])\n                        cylinder(h=vent_width*2, r=vent_height/2, center=true);\n                }\n            }\n            \n            // Top ventilation slots\n            for (i = [0:4]) {\n                translate([\n                    -cover_length/2 + 15 + i*15,\n                    0,\n                    cover_height/2\n                ]) {\n                    cube([8, body_width - 8, 2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Bottom cover plate (mirrored top cover)\nmodule bottom_cover() {\n    mirror([0, 0, 1]) {\n        top_cover();\n    }\n}\n\n// End caps\nmodule end_caps() {\n    // Left end\n    translate([-body_length/2 - wall_thickness/2, 0, 0]) {\n        cube([wall_thickness, body_width, body_height + cover_gap*2 + cover_height*2], center=true);\n    }\n    \n    // Right end\n    translate([body_length/2 + wall_thickness/2, 0, 0]) {\n        cube([wall_thickness, body_width, body_height + cover_gap*2 + cover_height*2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    harmonica_body();\n    mouthpiece();\n    top_cover();\n    bottom_cover();\n    end_caps();\n}",
    "renders": true
  },
  {
    "musical_instrument": "recorder",
    "openscad_code": "// Recorder - medium complexity realistic style\n// Overall length ~250mm, scaled down to 100mm for printing\n\nscale_factor = 0.4;        // Scale to 100mm length\nwall_thickness = 1.2;      // 3D printable walls\nbore_diameter = 6;         // Internal bore\nbody_diameter = 14;\n\nmodule recorder() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main body\n            body();\n            \n            // Head joint with windway\n            head();\n            \n            // Mouthpiece\n            mouthpiece();\n            \n            // Finger holes\n            finger_holes();\n            \n            // Thumb hole\n            thumb_hole();\n            \n            // Bell flare\n            bell();\n        }\n    }\n}\n\nmodule body() {\n    difference() {\n        // Outer body\n        cylinder(h=200, d1=body_diameter, d2=body_diameter*0.9, $fn=32);\n        \n        // Inner bore\n        translate([0, 0, -1])\n            cylinder(h=202, d=bore_diameter, $fn=32);\n    }\n}\n\nmodule head() {\n    translate([0, 0, 200]) {\n        difference() {\n            union() {\n                // Head joint cylinder\n                cylinder(h=30, d=body_diameter*1.1, $fn=32);\n                \n                // Windway block\n                translate([0, -body_diameter/2 - 2, 20])\n                    cube([body_diameter*1.1, 4, 10], center=true);\n            }\n            \n            // Labium window\n            translate([0, -body_diameter/2, 10])\n                cube([body_diameter*0.8, wall_thickness+1, 8], center=true);\n                \n            // Windway channel\n            translate([0, -body_diameter/4, 25])\n                cube([body_diameter*0.5, 2, 15], center=true);\n                \n            // Bore continuation\n            cylinder(h=32, d=bore_diameter, $fn=32);\n        }\n    }\n}\n\nmodule mouthpiece() {\n    translate([0, 0, 230]) {\n        difference() {\n            // Mouthpiece shape\n            cylinder(h=15, d1=body_diameter*1.1, d2=body_diameter*0.8, $fn=32);\n            \n            // Mouthpiece windway exit\n            translate([0, 0, 7.5])\n                cube([body_diameter*0.5, 2, 15], center=true);\n                \n            // Bore\n            cylinder(h=17, d=bore_diameter, $fn=32);\n        }\n    }\n}\n\nmodule finger_holes() {\n    // Positions along body\n    positions = [180, 150, 120, 90, 60, 45, 30];\n    sizes = [4.5, 4.5, 4.5, 5, 5, 4, 4];\n    \n    for(i = [0:len(positions)-1]) {\n        translate([0, 0, positions[i]]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h=wall_thickness+2, d=sizes[i], $fn=16);\n                    translate([0, 0, -1])\n                        cylinder(h=wall_thickness+4, d=sizes[i]-0.5, $fn=16);\n                }\n            }\n        }\n    }\n}\n\nmodule thumb_hole() {\n    translate([0, -body_diameter/2, 105]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=wall_thickness+2, d=5, $fn=16);\n                translate([0, 0, -1])\n                    cylinder(h=wall_thickness+4, d=4.5, $fn=16);\n            }\n        }\n    }\n}\n\nmodule bell() {\n    translate([0, 0, 0]) {\n        difference() {\n            // Bell flare\n            cylinder(h=15, d1=body_diameter*0.9, d2=body_diameter*1.1, $fn=32);\n            \n            // Bore exit\n            cylinder(h=17, d=bore_diameter, $fn=32);\n        }\n    }\n}\n\nrecorder();",
    "renders": true
  },
  {
    "musical_instrument": "piccolo",
    "openscad_code": "// Piccolo - Realistic style, medium complexity\n// Designed for 3D printing with proper wall thickness\n\n// Main parameters\n$fn = 32;\nbody_length = 80;\nbody_diameter = 8;\nwall_thickness = 1.2;\n\n// Head joint module\nmodule head_joint() {\n    // Lip plate\n    translate([0, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 18, d1 = 12, d2 = 10);\n        translate([0, 0, -1])\n        cylinder(h = 20, d1 = 9.6, d2 = 7.6);\n    }\n    \n    // Head tube\n    translate([-15, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 30, d = body_diameter + 2);\n        translate([0, 0, -1])\n        cylinder(h = 32, d = body_diameter + 2 - wall_thickness * 2);\n    }\n    \n    // Crown\n    translate([-30, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 5, d1 = body_diameter + 2, d2 = body_diameter + 4);\n        translate([0, 0, -1])\n        cylinder(h = 7, d1 = body_diameter + 2 - wall_thickness * 2, d2 = body_diameter + 4 - wall_thickness * 2);\n    }\n}\n\n// Key module\nmodule key(x_pos, y_pos, key_type) {\n    translate([x_pos, y_pos, 0])\n    rotate([0, 90, 0])\n    union() {\n        // Key cup\n        difference() {\n            cylinder(h = 2.5, d = 6);\n            translate([0, 0, -1])\n            cylinder(h = 4, d = 4);\n        }\n        \n        // Key arm\n        if (key_type == \"closed\") {\n            translate([-3, 0, 1.25])\n            cube([6, 1.5, 0.8]);\n        }\n        \n        // Key post\n        translate([-8, 0, -1])\n        cylinder(h = 3, d = 2);\n    }\n}\n\n// Body joint module\nmodule body_joint() {\n    // Main body tube\n    translate([0, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = body_length, d = body_diameter);\n        translate([0, 0, -1])\n        cylinder(h = body_length + 2, d = body_diameter - wall_thickness * 2);\n    }\n    \n    // Tone holes\n    for (i = [0:5]) {\n        hole_pos = 10 + i * 12;\n        translate([hole_pos, 0, 0])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = body_diameter + 2, d = 4);\n            translate([0, 0, -1])\n            cylinder(h = body_diameter + 4, d = 2.5);\n        }\n    }\n    \n    // Keys\n    key(15, 0, \"closed\");\n    key(27, 2, \"open\");\n    key(39, -2, \"closed\");\n    key(51, 1.5, \"open\");\n    key(63, -1.5, \"closed\");\n    \n    // Trill keys\n    key(75, 3, \"open\");\n    key(75, -3, \"open\");\n}\n\n// Foot joint module\nmodule foot_joint() {\n    // Main foot tube\n    translate([body_length + 5, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 25, d = body_diameter);\n        translate([0, 0, -1])\n        cylinder(h = 27, d = body_diameter - wall_thickness * 2);\n    }\n    \n    // End bell\n    translate([body_length + 30, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 8, d1 = body_diameter, d2 = body_diameter + 3);\n        translate([0, 0, -1])\n        cylinder(h = 10, d1 = body_diameter - wall_thickness * 2, d2 = body_diameter + 3 - wall_thickness * 2);\n    }\n    \n    // Foot joint keys\n    key(body_length + 10, 0, \"closed\");\n    key(body_length + 20, 2, \"closed\");\n}\n\n// Assembly\nunion() {\n    head_joint();\n    body_joint();\n    foot_joint();\n    \n    // Support rings\n    for (i = [1:3]) {\n        ring_pos = i * 25 - 20;\n        translate([ring_pos, 0, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 2, d = body_diameter + 1);\n            translate([0, 0, -1])\n            cylinder(h = 4, d = body_diameter);\n        }\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "cornet",
    "openscad_code": "$fn = 32;\n\n// Cornet parameters\nbell_d = 40;\nbell_h = 30;\nbody_d = 20;\nbody_h = 80;\nleadpipe_d = 8;\nleadpipe_l = 50;\nvalve_d = 12;\nvalve_h = 30;\nmouthpiece_l = 20;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main body tube\nmodule body() {\n    difference() {\n        cylinder(h = body_h, d = body_d);\n        translate([0, 0, wall]) cylinder(h = body_h - wall, d = body_d - 2*wall);\n    }\n}\n\n// Flared bell\nmodule bell() {\n    difference() {\n        translate([0, 0, body_h]) cylinder(h1 = 0, h2 = bell_h, r1 = body_d/2, r2 = bell_d/2);\n        translate([0, 0, body_h + wall]) cylinder(h1 = 0, h2 = bell_h - wall, \n            r1 = body_d/2 - wall, r2 = bell_d/2 - wall);\n    }\n}\n\n// Leadpipe extending forward\nmodule leadpipe() {\n    rotate([0, 90, 0]) translate([0, -leadpipe_l/2, body_d/2]) \n    difference() {\n        cylinder(h = leadpipe_l, d = leadpipe_d);\n        translate([0, 0, wall]) cylinder(h = leadpipe_l, d = leadpipe_d - 2*wall);\n    }\n}\n\n// Three valves in a row\nmodule valves() {\n    for(i = [0:2]) {\n        translate([(i-1)*valve_d*1.5, 0, body_h/2]) \n        difference() {\n            cylinder(h = valve_h, d = valve_d);\n            translate([0, 0, wall]) cylinder(h = valve_h - wall, d = valve_d - 2*wall);\n        }\n    }\n}\n\n// Valve tubing loops\nmodule tubing() {\n    // Simple curved tubes connecting valves\n    for(i = [0:1]) {\n        translate([(i-0.5)*valve_d*1.5, -body_d/4, body_h/2 + valve_h/2]) \n        rotate([90, 0, 90]) \n        difference() {\n            cylinder(h = valve_d*1.5, d = leadpipe_d);\n            translate([0, 0, wall]) cylinder(h = valve_d*1.5, d = leadpipe_d - 2*wall);\n        }\n    }\n}\n\n// Mouthpiece\nmodule mouthpiece() {\n    rotate([0, 90, 0]) translate([0, -leadpipe_l - mouthpiece_l/2, body_d/2]) \n    difference() {\n        cylinder(h = mouthpiece_l, d1 = leadpipe_d, d2 = leadpipe_d*0.7);\n        translate([0, 0, wall]) cylinder(h = mouthpiece_l, d1 = leadpipe_d - 2*wall, d2 = leadpipe_d*0.7 - wall);\n    }\n}\n\n// Finger rings\nmodule finger_rings() {\n    // First valve ring\n    translate([-valve_d*1.5, valve_d/2 + 2, body_h/2 + valve_h/2]) \n    rotate([90, 0, 0]) \n    difference() {\n        cylinder(h = 8, d = 5);\n        translate([0, 0, wall]) cylinder(h = 8, d = 5 - 2*wall);\n    }\n    \n    // Third valve ring\n    translate([valve_d*1.5, valve_d/2 + 2, body_h/2 + valve_h/2]) \n    rotate([90, 0, 0]) \n    difference() {\n        cylinder(h = 8, d = 5);\n        translate([0, 0, wall]) cylinder(h = 8, d = 5 - 2*wall);\n    }\n}\n\n// Bell brace\nmodule bell_brace() {\n    rotate([0, 90, 0]) translate([0, -body_d/4, body_h - 10]) \n    difference() {\n        cylinder(h = body_d/2, d = 4);\n        translate([0, 0, wall]) cylinder(h = body_d/2, d = 4 - 2*wall);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    bell();\n    leadpipe();\n    valves();\n    tubing();\n    mouthpiece();\n    finger_rings();\n    bell_brace();\n}",
    "renders": true
  },
  {
    "musical_instrument": "bugle",
    "openscad_code": "// Realistic 3D-printable bugle\n// Medium complexity (~90 lines)\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Overall length\nlength = 90;\n\n// Bell flare\nmodule bell() {\n    // Outer bell flare\n    for (i = [0:8]) {\n        translate([0, 0, i*2])\n            scale(1 + i*0.08)\n            cylinder(h=2.2, r1=12-i*0.2, r2=12-i*0.1, $fn=64);\n    }\n    // Inner bell (hollow)\n    difference() {\n        bell();\n        translate([0, 0, wall])\n            scale(0.85)\n            bell();\n    }\n}\n\n// Main tube with gradual taper\nmodule tube() {\n    // Outer tube\n    for (i = [0:40]) {\n        translate([0, 0, 16 + i*1.8])\n            cylinder(h=1.8, r1=4.5 - i*0.03, r2=4.5 - (i+1)*0.03, $fn=32);\n    }\n    // Inner tube (hollow)\n    difference() {\n        tube();\n        translate([0, 0, 16 + wall])\n            scale(0.65)\n            tube();\n    }\n}\n\n// Mouthpiece\nmodule mouthpiece() {\n    // Outer mouthpiece\n    translate([0, 0, 90])\n        cylinder(h=8, r1=6, r2=4.5, $fn=32);\n    translate([0, 0, 90])\n        sphere(r=6, $fn=32);\n    \n    // Inner bore\n    difference() {\n        mouthpiece();\n        translate([0, 0, 90])\n            cylinder(h=10, r1=2, r2=3, $fn=32);\n    }\n}\n\n// Valve casing detail (decorative)\nmodule valve() {\n    translate([0, 0, 45])\n        difference() {\n            cylinder(h=8, r=5.5, $fn=32);\n            cylinder(h=10, r=4, $fn=32);\n        }\n    // Small valve buttons\n    for (i = [-1, 0, 1]) {\n        translate([i*3, 5.5, 49])\n            sphere(r=1.2, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Bugle body\n    union() {\n        bell();\n        tube();\n        mouthpiece();\n    }\n    \n    // Valve casings\n    valve();\n    \n    // Small loop detail\n    translate([0, 0, 30])\n        rotate([0, 90, 0])\n            difference() {\n                torus(8, 2, $fn=32);\n                scale([0.7, 0.7, 0.7])\n                    torus(8, 2, $fn=32);\n            }\n}",
    "renders": true
  },
  {
    "musical_instrument": "flugelhorn",
    "openscad_code": "// Flugelhorn - medium complexity realistic style\n// Overall height ~70 mm\n\n$fn = 50;\n\nmodule mouthpiece() {\n    // Mouthpiece cup\n    difference() {\n        translate([0, 0, 5])\n            cylinder(h = 10, r1 = 5, r2 = 3);\n        translate([0, 0, 5])\n            cylinder(h = 11, r1 = 4.5, r2 = 2.5);\n    }\n    // Mouthpiece stem\n    translate([0, 0, 0])\n        cylinder(h = 5, r = 3);\n}\n\nmodule leadpipe() {\n    // Leadpipe tube\n    color(\"gold\")\n    rotate([0, 90, 0])\n        cylinder(h = 35, r = 3.2);\n}\n\nmodule valves() {\n    // Valve casings\n    for(i = [0:2]) {\n        translate([0, -i * 8 - 10, -5])\n            cylinder(h = 20, r = 4.5);\n    }\n    \n    // Valve buttons\n    for(i = [0:2]) {\n        translate([0, -i * 8 - 10, 18])\n            cylinder(h = 5, r = 3);\n    }\n    \n    // Valve stems\n    for(i = [0:2]) {\n        translate([0, -i * 8 - 10, 0])\n            cylinder(h = 15, r = 2.5);\n    }\n}\n\nmodule bell() {\n    // Main bell flare\n    translate([0, -45, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 25, r1 = 15, r2 = 8);\n    \n    // Bell tail\n    translate([0, -35, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 15, r = 8);\n}\n\nmodule tubing() {\n    // First valve to bell curve\n    translate([0, -10, -5])\n        rotate([90, 0, 0])\n            cylinder(h = 15, r = 2.5);\n    \n    // Second valve loop\n    translate([0, -18, -15])\n        rotate([0, 90, 0])\n            cylinder(h = 20, r = 2.5);\n    \n    // Third valve loop\n    translate([0, -26, -15])\n        rotate([0, 90, 0])\n            cylinder(h = 25, r = 2.5);\n    \n    // Connecting tubes\n    translate([0, -10, -5])\n        rotate([45, 0, 0])\n            cylinder(h = 10, r = 2.5);\n    \n    translate([0, -26, -5])\n        rotate([135, 0, 0])\n            cylinder(h = 10, r = 2.5);\n}\n\nmodule waterkeys() {\n    // Water key on bell tail\n    translate([0, -30, -2])\n        rotate([0, 0, 45])\n            cube([2, 4, 1]);\n    \n    // Water key on third valve loop\n    translate([0, -35, -15])\n        rotate([0, 90, 0])\n            cube([2, 4, 1]);\n}\n\n// Assemble the flugelhorn\nunion() {\n    // Mouthpiece\n    translate([35, 0, 0])\n        mouthpiece();\n    \n    // Leadpipe\n    translate([30, 0, 0])\n        leadpipe();\n    \n    // Valves\n    valves();\n    \n    // Bell\n    bell();\n    \n    // Tubing\n    tubing();\n    \n    // Water keys\n    waterkeys();\n    \n    // Braces\n    // Main brace\n    translate([0, -20, -5])\n        cube([2, 8, 2]);\n    \n    // Bell brace\n    translate([0, -40, 0])\n        rotate([0, 45, 0])\n            cube([2, 10, 2]);\n}",
    "renders": true
  },
  {
    "musical_instrument": "euphonium",
    "openscad_code": "// Euphonium 3D Model - Medium Complexity\n// Scaled for 3D printing (approx 80mm tall)\n\n$fn = 36;  // Smooth curves\nwall = 1.5;  // Wall thickness for printing\nscale_factor = 0.8;  // Overall scaling\n\nmodule main_tubing() {\n    // Main bell flare\n    difference() {\n        rotate([90, 0, 0]) \n            cylinder(h1=15, h2=20, r1=4, r2=12, center=false);\n        rotate([90, 0, 0]) \n            cylinder(h1=16, h2=21, r1=3.5, r2=11.5, center=false);\n    }\n    \n    // Bell pipe extension\n    translate([0, 12, 0])\n        rotate([90, 0, 0])\n            cylinder(h=30, r=3.5, center=false);\n}\n\nmodule valve_section() {\n    // Valve cluster\n    for(i = [0:2]) {\n        translate([12 + i*6, -5, 0]) {\n            // Valve casing\n            cylinder(h=15, r=4);\n            difference() {\n                cylinder(h=15, r=3.5);\n                translate([0, 0, -1])\n                    cylinder(h=17, r=2.5);\n            }\n            \n            // Valve button\n            translate([0, 0, 16])\n                cylinder(h=3, r=2);\n        }\n    }\n    \n    // Main loop through valves\n    translate([15, -5, 7.5])\n        rotate([0, 90, 0])\n            cylinder(h=18, r=2.5);\n}\n\nmodule tubing_loops() {\n    // First loop\n    translate([0, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=35, r=3);\n    \n    // Second loop\n    translate([25, -8, 0])\n        rotate([0, 0, 45])\n            rotate([0, 90, 0])\n                cylinder(h=25, r=2.5);\n    \n    // Connecting tubes\n    translate([-10, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=10, r=2.5);\n    \n    translate([30, -8, 0])\n        rotate([0, 90, 0])\n            cylinder(h=15, r=2.5);\n}\n\nmodule mouthpiece() {\n    translate([-15, 0, 0])\n        rotate([0, 0, 90])\n            cylinder(h=8, r1=2, r2=1.5, center=false);\n}\n\nmodule braces() {\n    // Brace between bell and valve section\n    translate([6, 0, 5])\n        cube([6, 2, 1]);\n    \n    // Brace for tubing loops\n    translate([12, -4, 3])\n        cube([8, 1, 1]);\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        main_tubing();\n        valve_section();\n        tubing_loops();\n        mouthpiece();\n        braces();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "serpent",
    "openscad_code": "// Serpent - realistic style, medium complexity\n// Designed for 3D printing (no overhangs, 0.8mm walls)\n\n// Parameters\n$fn = 30;\nbody_diameter = 8;\nhead_diameter = 12;\nlength = 90;\nsegments = 20;\nscale_factor = 0.97;\n\n// Main serpent body\nmodule serpent() {\n    union() {\n        // Head\n        translate([0, 0, head_diameter/2])\n        head();\n        \n        // Body segments\n        body();\n        \n        // Tail\n        tail();\n    }\n}\n\n// Snake head\nmodule head() {\n    difference() {\n        // Main head shape\n        sphere(d = head_diameter);\n        \n        // Eye sockets\n        translate([head_diameter/3, head_diameter/3, head_diameter/4])\n        sphere(d = head_diameter/3);\n        \n        translate([head_diameter/3, -head_diameter/3, head_diameter/4])\n        sphere(d = head_diameter/3);\n        \n        // Mouth\n        translate([head_diameter/2, 0, -head_diameter/6])\n        rotate([0, 0, 90])\n        cylinder(h = head_diameter, d = head_diameter/4, center = true);\n    }\n    \n    // Eyes\n    translate([head_diameter/3 + 0.5, head_diameter/3, head_diameter/4])\n    sphere(d = head_diameter/4);\n    \n    translate([head_diameter/3 + 0.5, -head_diameter/3, head_diameter/4])\n    sphere(d = head_diameter/4);\n    \n    // Nostrils\n    translate([head_diameter/2, head_diameter/6, head_diameter/3])\n    cylinder(h = 1, d = 1.5, center = true);\n    \n    translate([head_diameter/2, -head_diameter/6, head_diameter/3])\n    cylinder(h = 1, d = 1.5, center = true);\n}\n\n// Body with segments\nmodule body() {\n    for(i = [1:segments]) {\n        translate([i * 4, 0, 0])\n        rotate([0, 0, i * 5])\n        scale(pow(scale_factor, i))\n        segment(i);\n    }\n}\n\n// Individual body segment\nmodule segment(index) {\n    diameter = body_diameter * pow(scale_factor, index);\n    \n    // Main segment\n    sphere(d = diameter);\n    \n    // Scales pattern\n    for(j = [0:5]) {\n        rotate([0, 0, j * 60])\n        translate([diameter/2, 0, 0])\n        scale([0.3, 0.3, 0.2])\n        sphere(d = diameter);\n    }\n}\n\n// Tail\nmodule tail() {\n    for(i = [segments+1:segments+8]) {\n        translate([i * 3.5, 0, 0])\n        rotate([0, 0, i * 7])\n        scale(pow(scale_factor, i))\n        sphere(d = body_diameter * pow(scale_factor, i));\n    }\n}\n\n// Create the serpent\nrotate([0, 90, 0])\ntranslate([0, 0, -head_diameter/2])\nserpent();",
    "renders": true
  },
  {
    "musical_instrument": "ophicleide",
    "openscad_code": "// Ophicleide - medium complexity realistic style\n// Approx 80mm length, designed for FDM printing\n\n$fn = 32;\nwall = 1.6;  // 0.4mm nozzle * 4 perimeters\n\nmodule bell() {\n    difference() {\n        // Main bell flare\n        for (i = [0:4]) {\n            translate([0, 0, i*5])\n                scale([8 + i*4, 8 + i*4, 1])\n                sphere(5);\n        }\n        // Remove inside\n        translate([0, 0, -2])\n            cylinder(h = 30, r1 = 6, r2 = 15);\n    }\n}\n\nmodule keys() {\n    // Key cluster 1 - right hand\n    for (i = [0:2]) {\n        translate([25 - i*8, -8 - i*3, 0])\n            rotate([0, 0, 15*i])\n            key();\n    }\n    \n    // Key cluster 2 - left hand\n    for (i = [0:1]) {\n        translate([55 + i*10, 8, 0])\n            rotate([0, 0, -20*i])\n            key();\n    }\n}\n\nmodule key() {\n    // Key pad\n    translate([0, 0, 3])\n        cylinder(h = 2, r = 4);\n    \n    // Key lever\n    difference() {\n        translate([-6, 0, 0])\n            cube([12, 4, 2]);\n        translate([-5, 1, 1])\n            cube([10, 2, 1]);\n    }\n    \n    // Key touch\n    translate([-8, 0, 0])\n        sphere(2.5);\n}\n\nmodule crook() {\n    // Mouthpiece receiver\n    difference() {\n        translate([0, 0, -15])\n            cylinder(h = 15, r1 = 6, r2 = 5);\n        translate([0, 0, -15])\n            cylinder(h = 15, r1 = 4.2, r2 = 3.2);\n    }\n}\n\nmodule tubing() {\n    // Main tube\n    hull() {\n        translate([0, 0, 0])\n            sphere(5);\n        translate([0, 0, 80])\n            sphere(5);\n    }\n    \n    // First bend\n    rotate_extrude(angle = 90, $fn = 64)\n        translate([20, 0, 0])\n            circle(5);\n    \n    // Second bend\n    translate([20, 0, 0])\n        rotate([0, 0, 90])\n            rotate_extrude(angle = 90, $fn = 64)\n                translate([15, 0, 0])\n                    circle(5);\n    \n    // Third bend\n    translate([20, 15, 0])\n        rotate([90, 0, 0])\n            rotate_extrude(angle = 90, $fn = 64)\n                translate([15, 0, 0])\n                    circle(5);\n}\n\n// Main assembly\nunion() {\n    // Bell at end\n    translate([0, 0, 80])\n        bell();\n    \n    // Main tubing\n    tubing();\n    \n    // Mouthpiece crook\n    translate([0, 0, -15])\n        crook();\n    \n    // Key mechanisms\n    keys();\n    \n    // Support braces\n    translate([20, 0, 40])\n        rotate([0, 90, 0])\n            cylinder(h = 15, r = 2);\n    \n    // Thumb rest\n    translate([35, 12, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 3);\n}",
    "renders": true
  },
  {
    "musical_instrument": "sousaphone",
    "openscad_code": "// Sousaphone model - medium complexity realistic style\n// Designed for 3D printing at ~80mm height\n\n$fn = 32;\n\n// Main module\nmodule sousaphone() {\n    // Bell flare\n    bell();\n    \n    // Coiled tubing\n    coils();\n    \n    // Mouthpiece\n    mouthpiece();\n    \n    // Valves section\n    valves();\n    \n    // Braces and supports\n    braces();\n}\n\n// Bell flare with gradual taper\nmodule bell() {\n    // Bell flare base\n    for (i = [0:4]) {\n        translate([0, 0, i*3])\n            scale([1 + i*0.2, 1 + i*0.2, 1])\n            cylinder(h=3, r1=10 - i*0.5, r2=9 - i*0.4);\n    }\n    \n    // Bell rim\n    translate([0, 0, 15])\n        difference() {\n            cylinder(h=2, r=18, r1=18, r2=19);\n            cylinder(h=2.1, r=17);\n        }\n}\n\n// Coiled tubing body\nmodule coils() {\n    // First coil\n    rotate([0, 0, 0])\n        coil(45, 25, 180);\n    \n    // Second coil\n    rotate([0, 0, 90])\n        coil(40, 20, 160);\n    \n    // Third coil\n    rotate([0, 0, 180])\n        coil(35, 15, 140);\n    \n    // Straight section to valves\n    translate([0, -20, 0])\n        rotate([90, 0, 0])\n            cylinder(h=25, r=3, center=true);\n}\n\n// Helical coil generator\nmodule coil(outer_r, inner_r, degrees) {\n    for (a = [0:10:degrees]) {\n        translate([\n            cos(a) * (outer_r - a/20),\n            sin(a) * (outer_r - a/20),\n            a/5\n        ])\n        rotate([90, 0, a])\n            cylinder(h=5, r=3);\n    }\n}\n\n// Mouthpiece\nmodule mouthpiece() {\n    translate([0, 30, 10])\n        rotate([0, 90, 0])\n        union() {\n            // Mouthpiece cup\n            difference() {\n                sphere(r=4);\n                translate([3, 0, 0])\n                    sphere(r=3.5);\n            }\n            \n            // Mouthpiece stem\n            translate([-8, 0, 0])\n                cylinder(h=10, r=2);\n        }\n}\n\n// Valve section\nmodule valves() {\n    // Valve casing\n    translate([0, -25, 0])\n        difference() {\n            cylinder(h=15, r=6);\n            for (i = [-1, 0, 1]) {\n                translate([i*4, 0, -1])\n                    cylinder(h=17, r=1.5);\n            }\n        }\n    \n    // Valve buttons\n    for (i = [-1, 0, 1]) {\n        translate([i*4, -25, 16])\n            cylinder(h=3, r=2);\n    }\n    \n    // Valve tubing connections\n    translate([0, -32, 7])\n        rotate([90, 0, 0])\n            cylinder(h=10, r=2.5);\n}\n\n// Structural braces\nmodule braces() {\n    // Bell brace\n    translate([12, 0, 8])\n        cube([2, 15, 2]);\n    \n    // Valve brace\n    translate([0, -20, -8])\n        cube([15, 2, 2]);\n    \n    // Support braces between coils\n    for (i = [0:2]) {\n        angle = i * 120;\n        translate([\n            cos(angle) * 30,\n            sin(angle) * 30,\n            10 + i*5\n        ])\n        cube([2, 2, 8]);\n    }\n}\n\n// Generate the sousaphone\nsousaphone();",
    "renders": true
  },
  {
    "musical_instrument": "alpenhorn",
    "openscad_code": "// Alpenhorn - realistic style, medium complexity\n// 3D printable, ~80mm long\n\n$fn = 36;  // Smooth curves\n\nmodule horn_body() {\n    // Main conical tube with slight curve\n    hull() {\n        translate([0, 0, 0]) cylinder(h = 8, r1 = 18, r2 = 16);\n        translate([2, 0, 30]) cylinder(h = 8, r1 = 16, r2 = 14);\n        translate([4, 0, 60]) cylinder(h = 8, r1 = 14, r2 = 12);\n        translate([6, 0, 90]) cylinder(h = 8, r1 = 12, r2 = 10);\n    }\n    \n    // Bell flare at the end\n    translate([6, 0, 95]) rotate([90, 0, 0]) cylinder(h = 15, r1 = 10, r2 = 18);\n}\n\nmodule mouthpiece() {\n    // Traditional cup-style mouthpiece\n    difference() {\n        union() {\n            cylinder(h = 12, r = 6);\n            translate([0, 0, 12]) cylinder(h = 5, r1 = 6, r2 = 4);\n        }\n        translate([0, 0, -1]) cylinder(h = 14, r = 3);\n    }\n}\n\nmodule finger_holes() {\n    // Three finger holes on top\n    for(i = [0:2]) {\n        rotate([0, 0, 0]) translate([15 + i*12, 0, 45 + i*2]) {\n            rotate([90, 0, 0]) cylinder(h = 5, r = 2.5);\n        }\n    }\n    \n    // Thumb hole on bottom\n    translate([35, 0, 50]) rotate([90, 0, 0]) cylinder(h = 5, r = 2.5);\n}\n\nmodule decorative_bands() {\n    // Brass rings around horn\n    color(\"gold\") {\n        translate([0, 0, 15]) cylinder(h = 2, r = 19);\n        translate([2, 0, 45]) cylinder(h = 2, r = 17);\n        translate([4, 0, 75]) cylinder(h = 2, r = 15);\n    }\n}\n\nmodule carrying_cord() {\n    // Simple cord attachment points\n    translate([-8, 0, 40]) rotate([90, 0, 0]) cylinder(h = 8, r = 2);\n    translate([8, 0, 40]) rotate([90, 0, 0]) cylinder(h = 8, r = 2);\n}\n\n// Main assembly\ndifference() {\n    union() {\n        horn_body();\n        \n        // Attach mouthpiece\n        translate([-6, 0, 0]) rotate([0, 0, 0]) mouthpiece();\n        \n        // Add decorative elements\n        decorative_bands();\n        carrying_cord();\n    }\n    \n    // Hollow out the horn\n    hull() {\n        translate([0, 0, -1]) cylinder(h = 10, r1 = 16, r2 = 14);\n        translate([2, 0, 30]) cylinder(h = 8, r1 = 14, r2 = 12);\n        translate([4, 0, 60]) cylinder(h = 8, r1 = 12, r2 = 10);\n        translate([6, 0, 90]) cylinder(h = 8, r1 = 10, r2 = 8);\n        translate([6, 0, 95]) rotate([90, 0, 0]) cylinder(h = 15, r1 = 8, r2 = 14);\n    }\n    \n    // Cut finger holes\n    finger_holes();\n}",
    "renders": true
  },
  {
    "musical_instrument": "didgeridoo",
    "openscad_code": "// Realistic 3D-printable didgeridoo (medium complexity)\n// Length: 90 mm, Mouthpiece ~20 mm diameter, Bell ~35 mm diameter\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body parameters\nlength = 90;\nbase_dia = 20;\nbell_dia = 35;\n\n// Mouthpiece parameters\nmouth_len = 8;\nmouth_dia = 18;\n\n// Bell parameters\nbell_len = 12;\n\n// Decorative rings\nring_count = 6;\nring_width = 2;\nring_depth = 1;\n\nmodule didgeridoo() {\n    // Hollow main tube\n    difference() {\n        // Outer shell\n        hull() {\n            // Mouthpiece end\n            translate([0, 0, 0])\n                cylinder(h = mouth_len, d1 = mouth_dia, d2 = base_dia + 2, $fn = 32);\n            \n            // Main tapered body\n            translate([0, 0, mouth_len])\n                cylinder(h = length - mouth_len - bell_len, d1 = base_dia + 2, d2 = bell_dia - 3, $fn = 32);\n            \n            // Bell flare\n            translate([0, 0, length - bell_len])\n                cylinder(h = bell_len, d1 = bell_dia - 3, d2 = bell_dia, $fn = 32);\n        }\n        \n        // Inner hollow\n        hull() {\n            translate([0, 0, 0])\n                cylinder(h = mouth_len, d1 = mouth_dia - wall*2, d2 = base_dia, $fn = 32);\n            \n            translate([0, 0, mouth_len])\n                cylinder(h = length - mouth_len - bell_len, d1 = base_dia, d2 = bell_dia - 5, $fn = 32);\n            \n            translate([0, 0, length - bell_len])\n                cylinder(h = bell_len, d1 = bell_dia - 5, d2 = bell_dia - wall*2, $fn = 32);\n        }\n    }\n    \n    // Decorative rings around body\n    for (i = [1:ring_count]) {\n        pos = mouth_len + (i * (length - mouth_len - bell_len) / (ring_count + 1));\n        dia = base_dia + 2 + (i * (bell_dia - base_dia - 5) / ring_count);\n        \n        difference() {\n            // Ring protrusion\n            translate([0, 0, pos - ring_width/2])\n                cylinder(h = ring_width, d = dia + ring_depth*2, $fn = 32);\n            \n            // Cut to fit tube\n            translate([0, 0, pos - ring_width/2 - 1])\n                cylinder(h = ring_width + 2, d = dia, $fn = 32);\n        }\n    }\n    \n    // Mouthpiece rim\n    difference() {\n        translate([0, 0, -1])\n            cylinder(h = 3, d = mouth_dia + 4, $fn = 32);\n        translate([0, 0, -2])\n            cylinder(h = 5, d = mouth_dia + 1, $fn = 32);\n    }\n    \n    // Bell edge reinforcement\n    difference() {\n        translate([0, 0, length - 2])\n            cylinder(h = 4, d = bell_dia + 2, $fn = 32);\n        translate([0, 0, length - 3])\n            cylinder(h = 6, d = bell_dia, $fn = 32);\n    }\n    \n    // Small vent hole at bell end for pressure equalization\n    translate([0, (bell_dia - wall)/2, length - bell_len/2])\n        rotate([90, 0, 0])\n            cylinder(h = wall + 1, d = 1.5, $fn = 16);\n}\n\n// Render the didgeridoo\ndidgeridoo();",
    "renders": true
  },
  {
    "musical_instrument": "shofar",
    "openscad_code": "// Shofar - Realistic Style, Medium Complexity\n// Overall length ~80mm\n\n$fn=50;\n\nmodule shofar_body() {\n    // Main spiral horn body\n    difference() {\n        union() {\n            // First segment - straight section\n            translate([0,0,0])\n                rotate([0,90,0])\n                    cylinder(h=25, d1=12, d2=10);\n\n            // Second segment - first curve\n            translate([20,0,5])\n                rotate([0,70,30])\n                    cylinder(h=20, d1=10, d2=8);\n\n            // Third segment - tighter curve\n            translate([35,8,15])\n                rotate([0,45,60])\n                    cylinder(h=18, d1=8, d2=6);\n\n            // Fourth segment - final flare\n            translate([45,18,25])\n                rotate([0,20,90])\n                    cylinder(h=15, d1=6, d2=12);\n        }\n\n        // Hollow out the horn\n        translate([0,0,0])\n            rotate([0,90,0])\n                cylinder(h=25, d1=8, d2=6.5);\n\n        translate([20,0,5])\n            rotate([0,70,30])\n                cylinder(h=20, d1=6.5, d2=5);\n\n        translate([35,8,15])\n            rotate([0,45,60])\n                cylinder(h=18, d1=5, d2=3.5);\n\n        translate([45,18,25])\n            rotate([0,20,90])\n                cylinder(h=15, d1=3.5, d2=8);\n    }\n}\n\nmodule mouthpiece() {\n    // Mouthpiece detail at small end\n    translate([47,20,27])\n        rotate([0,20,90])\n            cylinder(h=5, d1=8, d2=6);\n}\n\nmodule bell_flare() {\n    // Bell flare at large end\n    translate([-2,0,-2])\n        rotate([0,90,0])\n            cylinder(h=5, d1=12, d2=15);\n}\n\nmodule ridges() {\n    // Natural ridges along horn\n    for(i=[0:5]) {\n        rotate([0,0,i*30])\n            translate([10+i*3,0,2+i])\n                rotate([0,90,0])\n                    scale([1,1,0.3])\n                        sphere(d=1.5);\n    }\n\n    for(i=[0:4]) {\n        rotate([0,0,i*45+15])\n            translate([25+i*2,5+i,8+i])\n                rotate([0,70,30])\n                    scale([1,1,0.3])\n                        sphere(d=1.2);\n    }\n}\n\nmodule texture_lines() {\n    // Subtle texture lines\n    for(i=[0:8]) {\n        rotate([0,0,i*20])\n            translate([5,0,-1])\n                rotate([0,90,0])\n                    cylinder(h=35, d=0.5);\n    }\n}\n\n// Assembly\nunion() {\n    shofar_body();\n    mouthpiece();\n    bell_flare();\n    ridges();\n    texture_lines();\n}",
    "renders": true
  },
  {
    "musical_instrument": "shakuhachi",
    "openscad_code": "// Shakuhachi flute - realistic medium complexity\n// Wall thickness 1.5mm, overall length 80mm scaled for printing\n\nmodule shakuhachi() {\n    $fn = 48;\n    wall = 1.5;\n    \n    // Main body tube\n    module body() {\n        difference() {\n            // Outer tube\n            cylinder(h = 80, r1 = 5, r2 = 4.5);\n            // Inner bore\n            translate([0, 0, -0.1])\n                cylinder(h = 80.2, r1 = 5-wall, r2 = 4.5-wall);\n        }\n    }\n    \n    // Mouthpiece utaguchi\n    module mouthpiece() {\n        translate([0, 0, 78]) {\n            // Cut angle for blowing edge\n            difference() {\n                rotate([0, 15, 0])\n                    cube([12, 12, 6], center = true);\n                translate([0, -6, 0])\n                    cube([12, 12, 12], center = true);\n            }\n            // Add blowing edge\n            translate([0, 4.9, -1])\n                cube([2, 0.5, 4], center = true);\n            // Decorative ring\n            translate([0, 0, 4])\n                cylinder(h = 2, r = 5.5);\n        }\n    }\n    \n    // Finger holes\n    module finger_holes() {\n        for(i = [1:5]) {\n            rotate([0, 0, i * 25])\n            translate([0, 4.2, 70 - i * 12]) {\n                // Hole through wall\n                rotate([90, 0, 0])\n                    cylinder(h = 3, r = 0.8);\n            }\n        }\n        // Thumb hole\n        translate([0, -4.2, 25])\n            rotate([90, 0, 0])\n                cylinder(h = 3, r = 0.8);\n    }\n    \n    // Root end node\n    module root_end() {\n        translate([0, 0, -1]) {\n            difference() {\n                sphere(d = 11);\n                sphere(d = 9);\n            }\n            // Small base for printability\n            translate([0, 0, -2])\n                cylinder(h = 2, r = 5.5);\n        }\n    }\n    \n    // Joint rings\n    module joint_rings() {\n        for(z = [15, 35, 55]) {\n            translate([0, 0, z]) {\n                cylinder(h = 2, r = 5.7);\n                cylinder(h = 2, r = 5.3);\n            }\n        }\n    }\n    \n    // Assembly\n    union() {\n        body();\n        mouthpiece();\n        root_end();\n        joint_rings();\n        \n        // Remove finger holes\n        difference() {\n            children();\n            finger_holes();\n        }\n    }\n}\n\n// Create the flute\nshakuhachi();",
    "renders": true
  },
  {
    "musical_instrument": "dizi",
    "openscad_code": "// Dizi flute - medium complexity realistic style\n// Dimensions based on common D key dizi (~60mm length)\n\n// Overall parameters\nflute_length = 60;\nflute_diameter = 10;\nwall_thickness = 1.5;\n\n// Main body\nmodule flute_body() {\n    difference() {\n        // Outer tube\n        cylinder(h=flute_length, d=flute_diameter, $fn=32);\n        \n        // Inner bore\n        translate([0, 0, -0.1])\n            cylinder(h=flute_length+0.2, d=flute_diameter-2*wall_thickness, $fn=32);\n    }\n}\n\n// Blow hole (embouchure hole)\nmodule blow_hole() {\n    translate([0, -flute_diameter/2, flute_length*0.85])\n        rotate([90, 0, 0])\n            cylinder(h=flute_diameter*1.2, d=6, $fn=32);\n}\n\n// Finger holes\nmodule finger_holes() {\n    positions = [0.75, 0.65, 0.55, 0.45, 0.35, 0.25]; // Relative positions\n    for(pos = positions) {\n        translate([0, -flute_diameter/2, pos*flute_length])\n            rotate([90, 0, 0])\n                cylinder(h=flute_diameter*1.2, d=4, $fn=16);\n    }\n}\n\n// Membrane hole (dimo hole)\nmodule membrane_hole() {\n    translate([0, -flute_diameter/2, flute_length*0.8])\n        rotate([90, 0, 0])\n            cylinder(h=flute_diameter*1.2, d=2.5, $fn=16);\n}\n\n// End caps\nmodule end_caps() {\n    // Top end\n    translate([0, 0, flute_length])\n        cylinder(h=2, d=flute_diameter, $fn=32);\n    \n    // Bottom end\n    translate([0, 0, 0])\n        cylinder(h=2, d=flute_diameter, $fn=32);\n}\n\n// Cork stopper\nmodule cork() {\n    translate([0, 0, flute_length-5])\n        cylinder(h=5, d=flute_diameter-2*wall_thickness, $fn=32);\n}\n\n// Decorative rings\nmodule rings() {\n    // Top ring\n    translate([0, 0, flute_length-8])\n        cylinder(h=1.5, d=flute_diameter+1, $fn=32);\n    \n    // Bottom ring\n    translate([0, 0, 8])\n        cylinder(h=1.5, d=flute_diameter+1, $fn=32);\n}\n\n// Main assembly\nunion() {\n    flute_body();\n    end_caps();\n    cork();\n    rings();\n    \n    // Cut holes\n    difference() {\n        children();\n        blow_hole();\n        finger_holes();\n        membrane_hole();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "xun",
    "openscad_code": "// Xun (Chinese ocarina) - realistic medium complexity\n// Overall dimensions: ~80mm height, ~60mm width\n\n$fn = 32;\n\n// Main body parameters\nbody_radius = 30;\nbody_height = 60;\nwall_thickness = 3;\nbottom_thickness = 4;\n\n// Mouthpiece parameters\nmouth_length = 25;\nmouth_width = 18;\nmouth_height = 12;\nwindway_height = 1.5;\nwindway_width = 8;\n\n// Finger holes\nhole_diameter = 6;\nhole_depth = wall_thickness + 1;\n\n// Top opening\ntop_opening_radius = 12;\n\n// Main body module\nmodule xun_body() {\n    difference() {\n        // Outer shell\n        cylinder(h=body_height, r1=body_radius, r2=body_radius*0.9);\n        \n        // Hollow interior\n        translate([0, 0, bottom_thickness])\n        cylinder(h=body_height-bottom_thickness, r1=body_radius-wall_thickness, r2=body_radius*0.9-wall_thickness);\n        \n        // Top opening\n        translate([0, 0, body_height-top_opening_radius])\n        sphere(r=top_opening_radius);\n    }\n}\n\n// Mouthpiece module\nmodule mouthpiece() {\n    // Main mouthpiece body\n    translate([0, -body_radius-2, body_height*0.7])\n    rotate([90, 0, 0])\n    difference() {\n        union() {\n            // Mouthpiece tube\n            cylinder(h=mouth_length, r=mouth_width/2);\n            // Connection to body\n            translate([0, 0, -2])\n            sphere(r=mouth_width/2);\n        }\n        \n        // Windway channel\n        translate([0, 0, mouth_height/2])\n        cube([windway_width, mouth_length, windway_height], center=true);\n        \n        // Mouth cavity\n        translate([0, 0, -mouth_height/2+2])\n        cube([mouth_width-4, mouth_length-5, mouth_height-2], center=true);\n    }\n    \n    // Windway exit ramp\n    translate([0, -body_radius-2, body_height*0.7+mouth_length*sin(90)-5])\n    rotate([0, 110, 0])\n    cube([windway_width, 15, windway_height+0.5], center=true);\n}\n\n// Finger holes module\nmodule finger_holes() {\n    // Front holes (6 holes)\n    for(i=[0:5]) {\n        angle = 30 + i * 25;\n        height = 15 + i * 7;\n        rotate([0, 0, angle])\n        translate([0, body_radius-wall_thickness-0.5, height])\n        rotate([90, 0, 0])\n        cylinder(h=hole_depth, r=hole_diameter/2);\n    }\n    \n    // Back thumb hole\n    rotate([0, 0, 180])\n    translate([0, body_radius-wall_thickness-0.5, 35])\n    rotate([90, 0, 0])\n    cylinder(h=hole_depth, r=hole_diameter/2);\n}\n\n// Sound hole on bottom\nmodule bottom_sound_hole() {\n    translate([0, 0, bottom_thickness/2])\n    cylinder(h=bottom_thickness+1, r=4);\n}\n\n// Decorative rings\nmodule decorative_rings() {\n    for(h=[15, 35, 50]) {\n        translate([0, 0, h])\n        difference() {\n            cylinder(h=2, r1=body_radius+1, r2=body_radius*0.9+0.8);\n            cylinder(h=2.1, r1=body_radius, r2=body_radius*0.9);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    xun_body();\n    mouthpiece();\n    finger_holes();\n    bottom_sound_hole();\n    decorative_rings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "bansuri",
    "openscad_code": "// Bansuri (North-Indian bamboo flute) – medium complexity, realistic style\n// 1:2 scale (~250 mm full length ⇒ 125 mm printable)\n// Designed for 3D printing: no overhangs > 45°, 2 mm wall thickness\n\n// ---------- PARAMETERS ----------\nbody_d       = 12;     // outer diameter of bamboo\nwall_t       = 2;      // wall thickness\nlength       = 125;    // overall length\nembouch_h    = 10;     // embouchure hole height (oval)\nembouch_w    = 8;      // embouchure hole width\nhole_d       = 6;      // finger-hole diameter\nhole_spacing = 18;     // axial spacing between finger holes\nlip_plate_l  = 15;     // length of the blowing edge plateau\nend_cap_t    = 4;      // thickness of the closed end caps\n\n// ---------- MODULES ----------\n\n// Hollow bamboo shaft\nmodule shaft(len, od, wall) {\n    difference() {\n        cylinder(h = len, d = od, $fn = 48);            // outer skin\n        translate([0, 0, -0.1])                        // inner bore\n            cylinder(h = len + 0.2, d = od - 2*wall, $fn = 48);\n    }\n}\n\n// Oval embouchure hole on the lip-plate\nmodule embouchure() {\n    translate([0, body_d/2, length - lip_plate_l/2])\n        rotate([90, 0, 0])\n        scale([embouch_w, embouch_h, 1])\n        cylinder(h = wall_t + 0.2, d = wall_t + 0.2, $fn = 20);\n}\n\n// Six finger holes\nmodule finger_holes() {\n    for (i = [0:5]) {\n        translate([0, body_d/2, length - lip_plate_l - hole_spacing*(i+1)])\n            rotate([90, 0, 0])\n            cylinder(h = wall_t + 0.2, d = hole_d, $fn = 12);\n    }\n}\n\n// Closed end caps (simple round plugs)\nmodule end_caps() {\n    difference() {\n        // bottom cap\n        translate([0, 0, end_cap_t/2])\n            cylinder(h = end_cap_t, d = body_d, $fn = 48);\n        // top cap\n        translate([0, 0, length - end_cap_t/2])\n            cylinder(h = end_cap_t, d = body_d, $fn = 48);\n    }\n}\n\n// ---------- MAIN MODEL ----------\nunion() {\n    shaft(length, body_d, wall_t);   // main body\n    embouchure();                    // blowing hole\n    finger_holes();                  // 6 tone holes\n    end_caps();                      // sealed ends\n}",
    "renders": true
  },
  {
    "musical_instrument": "venu",
    "openscad_code": "// Venus de Milo inspired statue - Realistic medium complexity\n\n// Overall dimensions\nstatue_height = 85;\nbase_height = 10;\nbase_diameter = 40;\n\n// Head proportions\nhead_radius = 7;\nhead_height = 10;\n\n// Torso proportions\ntorso_height = 35;\ntorso_width = 18;\ntorso_depth = 12;\n\n// Hips and legs\nhip_width = 22;\nhip_height = 10;\nleg_height = 25;\nleg_diameter = 6;\n\n// Arms (broken stumps)\narm_stump_length = 8;\narm_stump_diameter = 5;\n\n// Breasts\nbreast_radius = 4;\nbreast_offset = 4;\n\n// Base\nmodule base() {\n    cylinder(h=base_height, d=base_diameter, $fn=64);\n}\n\n// Head with neck\nmodule head() {\n    translate([0, 0, statue_height - head_height - 5]) {\n        // Neck\n        cylinder(h=5, d1=5, d2=6, $fn=32);\n        \n        // Head sphere\n        sphere(r=head_radius, $fn=64);\n        \n        // Chin\n        translate([0, -head_radius*0.7, -head_radius*0.5])\n            scale([1, 1.2, 0.8])\n            sphere(r=head_radius*0.7, $fn=32);\n    }\n}\n\n// Torso with breasts\nmodule torso() {\n    translate([0, 0, statue_height - head_height - 5 - torso_height]) {\n        // Main torso\n        scale([1, 0.7, 1])\n        cylinder(h=torso_height, d1=torso_width*0.8, d2=torso_width, $fn=32);\n        \n        // Breasts\n        for(x=[-breast_offset, breast_offset]) {\n            translate([x, 0, torso_height*0.6])\n                sphere(r=breast_radius, $fn=32);\n        }\n        \n        // Waist indentation\n        translate([0, 0, torso_height*0.3])\n            difference() {\n                cylinder(h=torso_height*0.4, d=torso_width, $fn=32);\n                scale([1.2, 1.2, 1])\n                cylinder(h=torso_height*0.4, d=torso_width*0.7, $fn=32);\n            }\n    }\n}\n\n// Hips\nmodule hips() {\n    translate([0, 0, statue_height - head_height - 5 - torso_height - hip_height]) {\n        scale([1, 0.6, 1])\n        cylinder(h=hip_height, d1=hip_width*0.9, d2=hip_width, $fn=32);\n    }\n}\n\n// Legs\nmodule legs() {\n    translate([0, 0, statue_height - head_height - 5 - torso_height - hip_height - leg_height]) {\n        // Left leg\n        translate([-hip_width*0.25, 0, leg_height/2])\n            cylinder(h=leg_height, d1=leg_diameter*1.2, d2=leg_diameter*0.9, $fn=32);\n        \n        // Right leg\n        translate([hip_width*0.25, 0, leg_height/2])\n            cylinder(h=leg_height, d1=leg_diameter*1.2, d2=leg_diameter*0.9, $fn=32);\n    }\n}\n\n// Arm stumps\nmodule arms() {\n    // Left arm stump\n    translate([-torso_width*0.7, 0, statue_height - head_height - 5 - torso_height*0.7]) {\n        rotate([0, 20, -30])\n        cylinder(h=arm_stump_length, d=arm_stump_diameter, $fn=32);\n    }\n    \n    // Right arm stump\n    translate([torso_width*0.7, 0, statue_height - head_height - 5 - torso_height*0.5]) {\n        rotate([0, -20, 30])\n        cylinder(h=arm_stump_length*0.8, d=arm_stump_diameter, $fn=32);\n    }\n}\n\n// Combine all parts\nunion() {\n    base();\n    head();\n    torso();\n    hips();\n    legs();\n    arms();\n}",
    "renders": true
  },
  {
    "musical_instrument": "pungi",
    "openscad_code": "// Pungi (Indian snake charmer's flute) - realistic style, medium complexity\n// Designed for 3D printing with 2mm wall thickness and minimal overhangs\n\n$fn = 50;\n\n// Main body parameters\nbody_length = 85;\nbody_diameter = 20;\nwall_thickness = 2;\n\n// Mouthpiece parameters\nmouthpiece_length = 15;\nmouthpiece_diameter = 12;\n\n// Reed chamber parameters\nreed_chamber_length = 8;\nreed_chamber_diameter = 8;\n\n// Finger holes\nhole_diameter = 5;\nhole_positions = [30, 45, 55, 65, 75]; \n\n// End bell parameters\nbell_length = 10;\nbell_diameter = 25;\n\nmodule main_body() {\n    // Outer tube\n    difference() {\n        cylinder(h = body_length, d = body_diameter, center = false);\n        \n        // Hollow out the tube\n        translate([0, 0, wall_thickness/2])\n            cylinder(h = body_length + 1, d = body_diameter - 2*wall_thickness, center = false);\n    }\n}\n\nmodule mouthpiece() {\n    // Tapered mouthpiece\n    translate([0, 0, body_length]) {\n        difference() {\n            cylinder(h = mouthpiece_length, d1 = body_diameter, d2 = mouthpiece_diameter, center = false);\n            \n            // Hollow out mouthpiece\n            translate([0, 0, wall_thickness/2])\n                cylinder(h = mouthpiece_length + 1, d1 = body_diameter - 2*wall_thickness, d2 = mouthpiece_diameter - 2*wall_thickness, center = false);\n        }\n    }\n}\n\nmodule reed_chamber() {\n    // Reed chamber inside mouthpiece\n    translate([0, 0, body_length + mouthpiece_length - reed_chamber_length - 1]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = reed_chamber_diameter + 2, d = reed_chamber_diameter, center = true);\n                cylinder(h = reed_chamber_diameter + 3, d = reed_chamber_diameter - 2*wall_thickness, center = true);\n            }\n        }\n    }\n}\n\nmodule end_bell() {\n    // Flared bell at the end\n    translate([0, 0, -bell_length]) {\n        difference() {\n            cylinder(h = bell_length, d1 = body_diameter, d2 = bell_diameter, center = false);\n            \n            // Hollow out bell\n            translate([0, 0, wall_thickness/2])\n                cylinder(h = bell_length + 1, d1 = body_diameter - 2*wall_thickness, d2 = bell_diameter - 2*wall_thickness, center = false);\n        }\n    }\n}\n\nmodule finger_holes() {\n    // Create finger holes along the body\n    for(pos = hole_positions) {\n        translate([0, 0, pos]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = body_diameter, d = hole_diameter, center = true);\n            }\n        }\n    }\n}\n\nmodule decorative_bands() {\n    // Add decorative bands around the body\n    band_positions = [10, 85];\n    \n    for(pos = band_positions) {\n        translate([0, 0, pos]) {\n            difference() {\n                cylinder(h = 3, d = body_diameter + 2, center = false);\n                cylinder(h = 4, d = body_diameter, center = false);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    mouthpiece();\n    reed_chamber();\n    end_bell();\n    decorative_bands();\n}\n\ndifference() {\n    // Final assembly with holes\n    union() {\n        main_body();\n        mouthpiece();\n        reed_chamber();\n        end_bell();\n        decorative_bands();\n    }\n    \n    // Add finger holes\n    finger_holes();\n}",
    "renders": true
  },
  {
    "musical_instrument": "shehnai",
    "openscad_code": "// Shehnai - Traditional Indian Double-Reed Woodwind\n// Medium complexity realistic style\n// 3D printable with proper wall thickness and no overhangs\n\n// Overall dimensions: ~90mm length\n$fn = 32;\n\nmodule shehnai() {\n    // Main tube assembly\n    union() {\n        // Wooden body - main tube with slight taper\n        tapered_body();\n        \n        // Metal bell at bottom\n        metal_bell();\n        \n        // Reed mouthpiece assembly\n        reed_mouthpiece();\n        \n        // Finger holes\n        finger_holes();\n        \n        // Decorative rings\n        decorative_rings();\n    }\n}\n\nmodule tapered_body() {\n    // Main wooden tube with gradual taper\n    difference() {\n        // Outer tube\n        hull() {\n            translate([0, 0, 0]) \n                cylinder(h = 5, r1 = 7, r2 = 7.2);\n            translate([0, 0, 70]) \n                cylinder(h = 5, r1 = 4.5, r2 = 4.8);\n        }\n        \n        // Inner bore - straight through\n        cylinder(h = 75, r = 2.5, center = true);\n    }\n}\n\nmodule metal_bell() {\n    // Brass bell flare at bottom\n    difference() {\n        // Bell shape\n        cylinder(h = 15, r1 = 7, r2 = 12);\n        \n        // Inner bore\n        cylinder(h = 16, r1 = 2.5, r2 = 5);\n    }\n    \n    // Bell rim detail\n    translate([0, 0, 15])\n        cylinder(h = 1, r = 12.5);\n}\n\nmodule reed_mouthpiece() {\n    // Reed holder assembly\n    translate([0, 0, 75]) {\n        // Reed holder - slightly conical\n        cylinder(h = 8, r1 = 4.8, r2 = 3.5);\n        \n        // Reed itself (simplified as cylinder)\n        translate([0, 0, 9])\n            cylinder(h = 5, r = 2);\n        \n        // Reed binding cord\n        translate([0, 0, 6.5])\n            cylinder(h = 2, r = 4.2);\n    }\n}\n\nmodule finger_holes() {\n    // Seven finger holes along the body\n    for(i = [0:6]) {\n        angle = 15 * sin(i * 30); // Slight spiral\n        translate([0, 0, 15 + i * 9])\n            rotate([0, 0, angle])\n                translate([5.5, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 10, r = 1.2);\n    }\n}\n\nmodule decorative_rings() {\n    // Brass rings at joints\n    \n    // Ring at bell joint\n    translate([0, 0, 0.5])\n        cylinder(h = 2, r = 7.5);\n    \n    // Ring at mouthpiece joint\n    translate([0, 0, 74])\n        cylinder(h = 1.5, r = 5.5);\n    \n    // Intermediate decorative ring\n    translate([0, 0, 45])\n        cylinder(h = 1, r = 5.8);\n}\n\n// Generate the complete shehnai\nshehnai();",
    "renders": true
  },
  {
    "musical_instrument": "sundari",
    "openscad_code": "// Sundari (traditional Indian sitar-like instrument) - Medium complexity realistic style\n\n// Overall dimensions\noverall_length = 90;\nbody_width = 35;\nbody_depth = 15;\n\n// Main resonator body (gourd shape approximated with spheres)\nmodule resonator_body() {\n    difference() {\n        union() {\n            // Main lower gourd\n            scale([1, 0.8, 0.6]) \n                sphere(d=body_width, $fn=50);\n            \n            // Upper extension\n            translate([0, 0, body_width * 0.4])\n                scale([0.6, 0.5, 0.8]) \n                    sphere(d=body_width * 0.8, $fn=40);\n        }\n        \n        // Hollow out the body\n        scale([0.85, 0.65, 0.5])\n            sphere(d=body_width * 0.95, $fn=50);\n    }\n}\n\n// Neck (dandi)\nmodule neck() {\n    translate([0, 0, body_width * 0.4 + 5])\n        rotate([0, 90, 0])\n            cylinder(h=overall_length - body_width * 0.5, d1=8, d2=5, $fn=20);\n}\n\n// Main tuning pegs\nmodule tuning_pegs() {\n    for(i = [0:3]) {\n        rotate([0, 0, i * 30 - 45])\n            translate([0, -25 - i * 3, body_width * 0.4 + 45 + i * 8])\n                rotate([90, 0, 0])\n                    cylinder(h=15, d=3, $fn=12);\n    }\n}\n\n// Sympathetic string pegs\nmodule sympathetic_pegs() {\n    for(i = [0:7]) {\n        rotate([0, 0, i * 20 - 70])\n            translate([0, -20, body_width * 0.4 + 25 + i * 3])\n                rotate([90, 0, 0])\n                    cylinder(h=8, d=2, $fn=8);\n    }\n}\n\n// Bridge (jawari)\nmodule bridge() {\n    translate([0, 0, body_width * 0.2])\n        difference() {\n            // Main bridge body\n            cube([20, 2, 3], center=true);\n            \n            // Curved top surface\n            translate([0, 0, 1.5])\n                cube([20, 2.2, 3], center=true);\n        }\n}\n\n// Main strings\nmodule main_strings() {\n    for(i = [0:3]) {\n        translate([i * 2 - 3, 0, 0])\n            cylinder(h=overall_length - 5, d=0.5, $fn=8);\n    }\n}\n\n// Decorative carvings on body\nmodule body_carvings() {\n    // Front carving pattern\n    for(angle = [0:60:359]) {\n        rotate([0, 0, angle])\n            translate([body_width * 0.3, 0, -body_depth * 0.2])\n                scale([0.3, 0.05, 0.05])\n                    sphere(d=5, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    resonator_body();\n    neck();\n    \n    // Hardware\n    tuning_pegs();\n    sympathetic_pegs();\n    bridge();\n    \n    // Strings (simplified as cylinders)\n    main_strings();\n    \n    // Decorative elements\n    body_carvings();\n}\n\n// Add small feet for printing stability\ntranslate([0, body_width * 0.3, -body_depth * 0.5])\n    cylinder(h=2, d=4, $fn=20);\n\ntranslate([0, -body_width * 0.3, -body_depth * 0.5])\n    cylinder(h=2, d=4, $fn=20);",
    "renders": true
  },
  {
    "musical_instrument": "mizmar",
    "openscad_code": "// Mizmar - traditional double-reed woodwind instrument\n// Designed for 3D printing - no overhangs, proper wall thickness\n\n$fn = 32;  // Smooth curves for printing\n\n// Overall dimensions\nbody_length = 80;\nbody_diameter = 15;\nbell_diameter = 35;\nfinger_hole_diameter = 3;\nwall_thickness = 2;\n\n// Main body module\nmodule main_body() {\n    difference() {\n        // Outer body - conical shape\n        cylinder(h1 = body_diameter, h2 = body_diameter * 0.8, h = body_length);\n        \n        // Inner bore - straight cylinder\n        translate([0, 0, -1])\n            cylinder(d = body_diameter - (2 * wall_thickness), h = body_length + 2);\n    }\n}\n\n// Bell flare\nmodule bell() {\n    difference() {\n        // Bell shape\n        cylinder(h1 = body_diameter * 0.8, h2 = bell_diameter, h = 15);\n        \n        // Inner bell\n        translate([0, 0, -1])\n            cylinder(h1 = body_diameter - (2 * wall_thickness), \n                    h2 = bell_diameter - (2 * wall_thickness), \n                    h = 17);\n    }\n}\n\n// Finger holes\nmodule finger_holes() {\n    // Position holes along the body\n    hole_positions = [65, 55, 45, 35, 25, 15];\n    \n    for(pos = hole_positions) {\n        translate([0, body_diameter/2 + 1, pos])\n            rotate([90, 0, 0])\n                cylinder(d = finger_hole_diameter, h = body_diameter + 2, $fn = 16);\n    }\n}\n\n// Thumb hole (back side)\nmodule thumb_hole() {\n    translate([0, -body_diameter/2 - 1, 50])\n        rotate([90, 0, 0])\n            cylinder(d = finger_hole_diameter, h = body_diameter + 2, $fn = 16);\n}\n\n// Reed holder (mouthpiece)\nmodule reed_holder() {\n    difference() {\n        // Cylindrical holder\n        translate([0, 0, body_length + 7])\n            cylinder(d1 = body_diameter, d2 = body_diameter * 0.7, h = 10);\n        \n        // Inner bore continues\n        translate([0, 0, body_length])\n            cylinder(d = body_diameter - (2 * wall_thickness), h = 17);\n    }\n}\n\n// Reed (simplified for printing - flat style)\nmodule reed() {\n    translate([0, 0, body_length + 17])\n        scale([1, 0.2, 1])\n            cylinder(d = body_diameter * 0.5, h = 8);\n}\n\n// Decorative rings\nmodule decorative_rings() {\n    // Ring positions\n    ring_positions = [body_length - 10, body_length - 30, body_length - 50];\n    \n    for(pos = ring_positions) {\n        translate([0, 0, pos])\n            cylinder(d = body_diameter + 2, h = 1);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    main_body();\n    \n    translate([0, 0, body_length])\n        bell();\n    \n    reed_holder();\n    \n    // Holes (subtracted from body)\n    difference() {\n        union() {\n            decorative_rings();\n            reed();\n        }\n        \n        finger_holes();\n        thumb_hole();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "zurna",
    "openscad_code": "// Zurna - Traditional double-reed woodwind instrument\n// Medium complexity realistic style\n\n// Parameters\nbody_length = 70;\nbody_diameter = 12;\nbell_diameter = 18;\nbell_length = 15;\nmouthpiece_length = 15;\nmouthpiece_diameter = 8;\nfinger_hole_diameter = 3;\nwall_thickness = 1.5;\n\n// Main body module\nmodule zurna_body() {\n    // Main cylindrical body\n    difference() {\n        cylinder(h=body_length, d=body_diameter, $fn=32);\n        // Hollow bore\n        translate([0, 0, -1])\n            cylinder(h=body_length+2, d=body_diameter-2*wall_thickness, $fn=32);\n    }\n    \n    // Bell flare\n    translate([0, 0, body_length])\n    difference() {\n        cylinder(h=bell_length, d1=body_diameter, d2=bell_diameter, $fn=32);\n        translate([0, 0, -1])\n            cylinder(h=bell_length+2, d1=body_diameter-2*wall_thickness, d2=bell_diameter-2*wall_thickness, $fn=32);\n    }\n    \n    // Mouthpiece\n    translate([0, 0, -mouthpiece_length])\n    difference() {\n        cylinder(h=mouthpiece_length, d1=mouthpiece_diameter, d2=body_diameter, $fn=32);\n        translate([0, 0, -1])\n            cylinder(h=mouthpiece_length+2, d1=mouthpiece_diameter-2*wall_thickness, d2=body_diameter-2*wall_thickness, $fn=32);\n    }\n}\n\n// Finger holes\nmodule finger_holes() {\n    // Front holes spacing\n    hole_positions = [\n        [15, -body_diameter/2 - 1, 0],\n        [25, -body_diameter/2 - 1, 0],\n        [35, -body_diameter/2 - 1, 0],\n        [45, -body_diameter/2 - 1, 0],\n        [55, -body_diameter/2 - 1, 0],\n        [30, body_diameter/2 + 1, 180]  // Thumb hole on back\n    ];\n    \n    for(pos = hole_positions) {\n        translate([pos[0], 0, pos[2]])\n            rotate([0, 90, 0])\n            rotate([0, 0, pos[1] > 0 ? 0 : 180])\n            cylinder(h=body_diameter+2, d=finger_hole_diameter, $fn=16);\n    }\n}\n\n// Decorative rings\nmodule decorative_rings() {\n    ring_positions = [5, 20, 40, 60];\n    \n    for(pos = ring_positions) {\n        translate([pos, 0, 0])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=2, d=body_diameter+2, $fn=32);\n            cylinder(h=2.2, d=body_diameter, $fn=32);\n        }\n    }\n}\n\n// Reed holder\nmodule reed_holder() {\n    translate([0, 0, -mouthpiece_length-5])\n    difference() {\n        // Reed socket\n        cylinder(h=5, d=mouthpiece_diameter, $fn=32);\n        translate([0, 0, -1])\n            cylinder(h=7, d=mouthpiece_diameter-4, $fn=32);\n        \n        // Reed window\n        translate([0, -mouthpiece_diameter/2, 2.5])\n            cube([mouthpiece_diameter-2, mouthpiece_diameter/2, 3], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    zurna_body();\n    finger_holes();\n    decorative_rings();\n    reed_holder();\n}",
    "renders": true
  },
  {
    "musical_instrument": "ney",
    "openscad_code": "// Ney - Traditional Middle-Eastern End-Blown Flute\n// Realistic style, medium complexity\n\n// Overall parameters\nlength = 200;\nbody_diam = 20;\nwall_thickness = 2.5;\nnode_thickness = 3;\n\n// Finger hole parameters\nhole_diam = 6;\nthumb_hole_diam = 5;\nhole_wall_thickness = 1.5;\n\n// Mouthpiece parameters\nmouthpiece_length = 25;\nmouthpiece_diam = 18;\nblow_edge_angle = 45;\n\n// Node positions (approximate real ney node locations)\nnode_positions = [0, 45, 90, 135, 180];\n\n// Finger hole positions (thumb + 6 front holes)\nthumb_hole_pos = [12, 0, -body_diam/2 + hole_diam/2 + hole_wall_thickness];\nfinger_holes_pos = [\n    [55, 0, 0],\n    [75, 0, 0],\n    [95, 0, 0],\n    [115, 0, 0],\n    [135, 0, 0],\n    [155, 0, 0]\n];\n\n// Module for creating finger holes\nmodule finger_hole(diam, depth) {\n    difference() {\n        cylinder(h = depth, d = diam + 2*hole_wall_thickness, $fn = 32);\n        translate([0, 0, -0.1]) \n            cylinder(h = depth + 0.2, d = diam, $fn = 32);\n    }\n}\n\n// Module for creating the blow edge\nmodule blow_edge() {\n    difference() {\n        // Main mouthpiece cylinder\n        cylinder(h = mouthpiece_length, d = mouthpiece_diam, $fn = 32);\n        \n        // Create blow edge\n        translate([0, 0, mouthpiece_length - 5])\n            rotate([blow_edge_angle, 0, 0])\n                cube([mouthpiece_diam*2, mouthpiece_diam*2, mouthpiece_diam], center = true);\n        \n        // Internal bore\n        translate([0, 0, -0.1])\n            cylinder(h = mouthpiece_length + 0.2, d = body_diam - 2*wall_thickness, $fn = 32);\n    }\n}\n\n// Main ney body\ndifference() {\n    // Outer body\n    cylinder(h = length, d = body_diam, $fn = 32);\n    \n    // Inner bore\n    translate([0, 0, -0.1])\n        cylinder(h = length + 0.2, d = body_diam - 2*wall_thickness, $fn = 32);\n}\n\n// Add nodes around the body\nfor(i = [1:len(node_positions)-1]) {\n    translate([0, 0, node_positions[i]])\n        difference() {\n            // Node ring\n            cylinder(h = node_thickness, d = body_diam + 2, $fn = 32);\n            \n            // Hollow center\n            translate([0, 0, -0.1])\n                cylinder(h = node_thickness + 0.2, d = body_diam, $fn = 32);\n        }\n}\n\n// Mouthpiece\ntranslate([0, 0, length - mouthpiece_length + 1])\n    blow_edge();\n\n// Thumb hole on back\ntranslate(thumb_hole_pos)\n    rotate([90, 0, 0])\n        finger_hole(thumb_hole_diam, wall_thickness + hole_diam);\n\n// Front finger holes\nfor(i = [0:len(finger_holes_pos)-1]) {\n    translate(finger_holes_pos[i])\n        rotate([90, 0, 0])\n            finger_hole(hole_diam, wall_thickness + hole_diam);\n}\n\n// Subtle taper at the end\ntranslate([0, 0, -1])\n    difference() {\n        cylinder(h = 15, d1 = body_diam, d2 = body_diam - 3, $fn = 32);\n        translate([0, 0, -0.1])\n            cylinder(h = 15.2, d1 = body_diam - 2*wall_thickness, \n                    d2 = body_diam - 2*wall_thickness - 3, $fn = 32);\n    }",
    "renders": true
  },
  {
    "musical_instrument": "kaval",
    "openscad_code": "// Kaval - Traditional Balkan end-blown flute\n// Dimensions in mm\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Overall parameters\nkaval_length = 220;\nkaval_outer_diameter = 18;\nwall_thickness = 2.5;\nbore_diameter = kaval_outer_diameter - 2*wall_thickness;\n\n// Mouthpiece parameters\nmouthpiece_length = 35;\nmouthpiece_outer_diameter = 20;\nmouthpiece_bore = 8;\nmouthpiece_cut_angle = 30;  // degrees\n\n// Finger hole parameters\nnum_finger_holes = 7;\nhole_diameter = 6;\nhole_spacing = 25;\nfirst_hole_distance = 45;\n\n// Thumb hole\nthumb_hole_diameter = 6;\nthumb_hole_distance = 65;\nthumb_hole_angle = 45;  // degrees from top\n\n// End details\nend_ring_length = 8;\nend_ring_diameter = 22;\n\n// Module for finger hole positioning\nmodule finger_hole(distance, rotation) {\n    translate([0, 0, -kaval_length/2 + distance])\n    rotate([90, 0, rotation])\n    cylinder(h = kaval_outer_diameter, d = hole_diameter, $fn = 16);\n}\n\n// Main body\nmodule kaval_body() {\n    difference() {\n        // Outer tube\n        cylinder(h = kaval_length, d = kaval_outer_diameter);\n        \n        // Bore\n        translate([0, 0, -kaval_length/2])\n        cylinder(h = kaval_length + 2, d = bore_diameter);\n        \n        // Mouthpiece bore\n        translate([0, 0, kaval_length/2 - mouthpiece_length])\n        cylinder(h = mouthpiece_length + 2, d = mouthpiece_bore);\n        \n        // Mouthpiece cut\n        rotate_a = mouthpiece_cut_angle;\n        translate([0, -kaval_outer_diameter, kaval_length/2 - mouthpiece_length/2])\n        rotate([0, rotate_a, 0])\n        translate([0, 0, -kaval_outer_diameter])\n        cube([kaval_outer_diameter*2, kaval_outer_diameter*2, kaval_outer_diameter*2], center = true);\n    }\n}\n\n// Mouthpiece outer shape\nmodule mouthpiece_detail() {\n    difference() {\n        union() {\n            // Main mouthpiece\n            translate([0, 0, kaval_length/2 - mouthpiece_length/2])\n            cylinder(h = mouthpiece_length, d1 = mouthpiece_outer_diameter, d2 = kaval_outer_diameter);\n            \n            // End ring\n            translate([0, 0, -kaval_length/2])\n            cylinder(h = end_ring_length, d = end_ring_diameter);\n        }\n        \n        // Remove center bore\n        translate([0, 0, -kaval_length/2 - 1])\n        cylinder(h = kaval_length + 2, d = bore_diameter);\n    }\n}\n\n// Finger holes\nmodule add_finger_holes() {\n    // Top row finger holes\n    for(i = [0:num_finger_holes-1]) {\n        finger_hole(first_hole_distance + i*hole_spacing, 0);\n    }\n    \n    // Thumb hole (offset)\n    translate([0, 0, -kaval_length/2 + thumb_hole_distance])\n    rotate([thumb_hole_angle, 0, 90])\n    cylinder(h = kaval_outer_diameter, d = thumb_hole_diameter, $fn = 16);\n}\n\n// Decorative rings\nmodule decorative_rings() {\n    ring_positions = [kaval_length*0.25, kaval_length*0.5, kaval_length*0.75];\n    \n    for(pos = ring_positions) {\n        translate([0, 0, -kaval_length/2 + pos])\n        difference() {\n            cylinder(h = 2, d = kaval_outer_diameter + 1);\n            cylinder(h = 3, d = kaval_outer_diameter - 1);\n        }\n    }\n}\n\n// Assemble the kaval\nunion() {\n    kaval_body();\n    mouthpiece_detail();\n    add_finger_holes();\n    decorative_rings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "duduk",
    "openscad_code": "// Armenian Duduk - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n$fn = 64;\nwall = 1.2;\n\n// Main body parameters\nbody_len = 85;\nbody_dia = 12;\nbell_dia = 18;\n\n// Reed holder parameters\nreed_len = 15;\nreed_dia = 8;\n\n// Finger holes\nhole_dia = 3;\nhole_positions = [-30, -20, -10, 0, 15, 25, 35];\n\nmodule duduk_body() {\n    difference() {\n        // Main tube\n        cylinder(h = body_len, d = body_dia, center = true);\n        \n        // Bore hole\n        translate([0, 0, 0])\n            cylinder(h = body_len + 2, d = body_dia - 2*wall, center = true);\n    }\n    \n    // Bell flare\n    translate([0, 0, body_len/2])\n        difference() {\n            cylinder(h = 6, d1 = body_dia, d2 = bell_dia);\n            cylinder(h = 7, d1 = body_dia - 2*wall, d2 = bell_dia - 2*wall);\n        }\n    \n    // Reed holder\n    translate([0, 0, -body_len/2 - reed_len/2])\n        difference() {\n            cylinder(h = reed_len, d = reed_dia);\n            cylinder(h = reed_len + 1, d = reed_dia - 2*wall);\n        }\n}\n\nmodule finger_holes() {\n    for(pos = hole_positions) {\n        translate([0, 0, pos])\n            rotate([90, 0, 0])\n                cylinder(h = body_dia + 2, d = hole_dia, center = true);\n    }\n}\n\nmodule thumb_hole() {\n    translate([body_dia/2, 0, -5])\n        rotate([0, 90, 0])\n            cylinder(h = 6, d = hole_dia);\n}\n\nmodule decorative_rings() {\n    // Ring at bell\n    translate([0, 0, body_len/2 + 3])\n        difference() {\n            cylinder(h = 2, d = bell_dia + 2);\n            cylinder(h = 3, d = bell_dia);\n        }\n    \n    // Ring at reed joint\n    translate([0, 0, -body_len/2])\n        difference() {\n            cylinder(h = 2, d = reed_dia + 2);\n            cylinder(h = 3, d = reed_dia);\n        }\n}\n\n// Assemble the duduk\nunion() {\n    duduk_body();\n    \n    difference() {\n        union() {\n            finger_holes();\n            thumb_hole();\n        }\n        // Remove parts outside body\n        cylinder(h = body_len + 10, d = body_dia + 2, center = true);\n    }\n    \n    decorative_rings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "balaban",
    "openscad_code": "$fn = 32;\n\nmodule balaban_body() {\n    // Main body tube (cylindrical with slight taper)\n    difference() {\n        cylinder(h = 80, d1 = 18, d2 = 16, center = true);\n        cylinder(h = 82, d = 14, center = true);\n    }\n}\n\nmodule finger_holes() {\n    // Six finger holes along the front\n    for(i = [0:5]) {\n        translate([0, -9, -30 + i * 12])\n        rotate([90, 0, 0])\n        cylinder(h = 5, d = 6, $fn = 16);\n    }\n    \n    // Thumb hole on back\n    translate([0, 9, -15])\n    rotate([90, 0, 0])\n    cylinder(h = 5, d = 8, $fn = 16);\n}\n\nmodule mouthpiece() {\n    // Traditional flattened mouthpiece\n    translate([0, 0, 42])\n    difference() {\n        scale([1.2, 0.6, 1])\n        sphere(d = 18);\n        cylinder(h = 20, d = 12, center = true);\n    }\n}\n\nmodule reed_block() {\n    // Reed holder at top\n    translate([0, 0, 50])\n    difference() {\n        cube([12, 8, 15], center = true);\n        cube([8, 12, 16], center = true);\n    }\n}\n\nmodule decorative_rings() {\n    // Three decorative rings around body\n    for(z = [-25, 0, 25]) {\n        translate([0, 0, z])\n        difference() {\n            cylinder(h = 3, d = 20, center = true);\n            cylinder(h = 4, d = 16.5, center = true);\n        }\n    }\n}\n\nmodule sound_holes() {\n    // Main sound holes on front\n    translate([0, -8.5, 0])\n    difference() {\n        cube([12, 2, 35], center = true);\n        // Add small holes for tone adjustment\n        for(x = [-4, 0, 4]) {\n            for(y = [-10, 0, 10]) {\n                translate([x, 0, y])\n                cylinder(h = 3, d = 2);\n            }\n        }\n    }\n}\n\nmodule end_cap() {\n    // Decorative end cap\n    translate([0, 0, -42])\n    difference() {\n        cylinder(h = 6, d = 20, center = true);\n        cylinder(h = 7, d = 14, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    balaban_body();\n    difference() {\n        union() {\n            mouthpiece();\n            reed_block();\n        }\n        // Remove internal bore\n        cylinder(h = 100, d = 10, center = true);\n    }\n    decorative_rings();\n    end_cap();\n    \n    // Cut all holes after main assembly\n    difference() {\n        union() {\n            sound_holes();\n            finger_holes();\n        }\n        // Ensure clean through-holes\n        translate([0, 0, 0])\n        cylinder(h = 100, d = 10, center = true);\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "zampogna",
    "openscad_code": "// Zampogna - Traditional Italian Bagpipe\n// Medium complexity, realistic style, 3D printable\n\n// Overall dimensions in mm\noverall_length = 85;\nbag_width = 35;\nbag_height = 25;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main bag module\nmodule bagpipe_bag() {\n    difference() {\n        // Main bag body - ellipsoid shape\n        scale([1, 0.8, 0.6])\n        sphere(d = bag_width, $fn=32);\n        \n        // Hollow out the bag\n        scale([1, 0.8, 0.6])\n        sphere(d = bag_width - 2*wall, $fn=32);\n    }\n}\n\n// Chanter (melody pipe)\nmodule chanter() {\n    // Main chanter tube\n    translate([0, -bag_width/2 - 20, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 35, d = 8, $fn=16);\n        cylinder(h = 35, d = 8 - 2*wall, $fn=16);\n    }\n    \n    // Finger holes\n    for(i = [0:6]) {\n        translate([0, -bag_width/2 - 20 - i*4, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 10, d = 2, $fn=8);\n    }\n    \n    // Chanter bell\n    translate([0, -bag_width/2 - 20 - 35, 0])\n    rotate([90, 0, 0])\n    cylinder(h1 = 5, h2 = 0, d1 = 12, d2 = 8, $fn=16);\n}\n\n// Drone pipes\nmodule drone_pipe(length, offset_x, offset_z) {\n    translate([offset_x, -bag_width/2 - 10, offset_z])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = length, d = 6, $fn=12);\n        cylinder(h = length, d = 6 - 2*wall, $fn=12);\n    }\n    \n    // Drone bell\n    translate([offset_x, -bag_width/2 - 10 - length, offset_z])\n    rotate([90, 0, 0])\n    cylinder(h1 = 4, h2 = 0, d1 = 10, d2 = 6, $fn=12);\n}\n\n// Blowpipe\nmodule blowpipe() {\n    translate([0, bag_width/2 + 5, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 25, d = 5, $fn=12);\n        cylinder(h = 25, d = 5 - 2*wall, $fn=12);\n    }\n    \n    // Mouthpiece\n    translate([0, bag_width/2 + 30, 0])\n    rotate([90, 0, 0])\n    cylinder(h1 = 8, h2 = 0, d1 = 3, d2 = 5, $fn=12);\n}\n\n// Stocks (connection points)\nmodule stock(diameter, height) {\n    difference() {\n        cylinder(h = height, d = diameter, $fn=16);\n        cylinder(h = height, d = diameter - 2*wall, $fn=16);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    // Main bag\n    bagpipe_bag();\n    \n    // Chanter stock\n    translate([0, -bag_width/2, 0])\n    stock(10, 5);\n    \n    // Drone stocks\n    translate([-12, -bag_width/2, 5])\n    stock(8, 5);\n    \n    translate([12, -bag_width/2, 5])\n    stock(8, 5);\n    \n    translate([0, -bag_width/2, -5])\n    stock(8, 5);\n    \n    // Blowpipe stock\n    translate([0, bag_width/2, 0])\n    stock(7, 5);\n    \n    // Pipes\n    chanter();\n    drone_pipe(30, -12, 5);\n    drone_pipe(35, 12, 5);\n    drone_pipe(25, 0, -5);\n    blowpipe();\n}\n\n// Support base for 3D printing\ntranslate([0, 0, -bag_height/2 - 2])\ncube([50, 50, 2], center=true);",
    "renders": true
  },
  {
    "musical_instrument": "pibgorn",
    "openscad_code": "// Pibgorn - Traditional Welsh reed-pipe (medium complexity, 3D-printable)\n\n// Overall scale factor for 3D printing\nscale_factor = 1.0;\n\n// Wall thickness for strength\nwall = 2;\n\n// Pipe body\nmodule body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h = 90 * scale_factor, r = 12 * scale_factor, $fn = 32);\n        \n        // Bore hole (hollow center)\n        translate([0, 0, -1])\n            cylinder(h = 92 * scale_factor, r = 8 * scale_factor, $fn = 32);\n    }\n}\n\n// Windcap with reed\nmodule windcap() {\n    union() {\n        // Windcap body\n        translate([0, 0, 90 * scale_factor])\n            cylinder(h = 20 * scale_factor, r = 15 * scale_factor, $fn = 32);\n        \n        // Reed slot\n        translate([0, 15 * scale_factor, 95 * scale_factor])\n            cube([6 * scale_factor, 3 * scale_factor, 10 * scale_factor], center = true);\n    }\n}\n\n// Finger holes\nmodule finger_holes() {\n    // Positions along pipe (approximate)\n    positions = [20, 35, 50, 65, 75, 85];\n    \n    for (pos = positions) {\n        difference() {\n            // No geometry added here - holes are subtracted from body\n        }\n    }\n    \n    // Actually create the holes\n    for (pos = positions) {\n        translate([0, 12 * scale_factor, pos * scale_factor])\n            rotate([90, 0, 0])\n                cylinder(h = 30 * scale_factor, r = 4 * scale_factor, $fn = 16);\n    }\n}\n\n// Thumb hole\nmodule thumb_hole() {\n    translate([12 * scale_factor, 0, 45 * scale_factor])\n        rotate([0, 90, 0])\n            cylinder(h = 30 * scale_factor, r = 4 * scale_factor, $fn = 16);\n}\n\n// Bell flare\nmodule bell() {\n    difference() {\n        // Flared bell\n        translate([0, 0, -5 * scale_factor])\n            cylinder(h = 15 * scale_factor, r1 = 12 * scale_factor, r2 = 18 * scale_factor, $fn = 32);\n        \n        // Hollow bell\n        translate([0, 0, -6 * scale_factor])\n            cylinder(h = 16 * scale_factor, r1 = 8 * scale_factor, r2 = 14 * scale_factor, $fn = 32);\n    }\n}\n\n// Mouthpiece lip\nmodule mouthpiece() {\n    translate([0, 0, 110 * scale_factor])\n        cylinder(h = 5 * scale_factor, r = 17 * scale_factor, $fn = 32);\n}\n\n// Main assembly\nunion() {\n    body();\n    windcap();\n    bell();\n    mouthpiece();\n    \n    difference() {\n        // Combine all solid parts\n        union() {\n            body();\n            windcap();\n            bell();\n            mouthpiece();\n        }\n        \n        // Subtract all holes\n        finger_holes();\n        thumb_hole();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "crumhorn",
    "openscad_code": "// Crumhorn - Renaissance double-reed wind instrument\n// Modeled for 3D printing with moderate realism\n\n// Overall dimensions (mm)\ntotal_length = 85;\nbell_diameter = 18;\nbody_diameter = 12;\ncap_diameter = 14;\ncap_height = 8;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main body module\nmodule crumhorn_body() {\n    // Curved body - create with hull of spheres\n    hull() {\n        translate([0,0,5]) sphere(d=body_diameter);\n        translate([0,0,25]) sphere(d=body_diameter*0.95);\n        translate([0,0,45]) sphere(d=body_diameter*0.9);\n        translate([0,0,65]) sphere(d=body_diameter*0.85);\n    }\n    \n    // Finger holes - 7 front holes\n    for(i=[0:6]) {\n        angle = 45 + i*15;\n        rotate([0,0,angle]) \n            translate([body_diameter/2, 0, 15+i*7])\n                rotate([90,0,0])\n                    cylinder(h=wall+0.5, d1=2, d2=1.5, $fn=12);\n    }\n    \n    // Thumb hole on back\n    rotate([0,0,-30]) \n        translate([-body_diameter/2, 0, 35])\n            rotate([90,0,0])\n                cylinder(h=wall+0.5, d1=2, d2=1.5, $fn=12);\n}\n\n// Bell flare module\nmodule bell() {\n    difference() {\n        // Outer bell\n        cylinder(h1=body_diameter, h2=bell_diameter, h=20, $fn=32);\n        \n        // Inner bore\n        translate([0,0,-0.5])\n            cylinder(h1=body_diameter-wall*2, h2=bell_diameter-wall*2, h=21, $fn=32);\n    }\n}\n\n// Wind cap module (holds the reed)\nmodule wind_cap() {\n    difference() {\n        // Outer cap\n        cylinder(d1=cap_diameter, d2=cap_diameter*0.8, h=cap_height, $fn=32);\n        \n        // Inner cavity\n        translate([0,0,-0.5])\n            cylinder(d1=cap_diameter-wall*2, d2=cap_diameter*0.8-wall*2, h=cap_height+1, $fn=32);\n        \n        // Windway hole\n        rotate([90,0,0])\n            translate([0,0,-cap_height/2])\n                cylinder(h=cap_diameter, d=3, $fn=16);\n    }\n}\n\n// Decorative ring/cap joint\nmodule ring() {\n    difference() {\n        cylinder(h=3, d=cap_diameter+2, $fn=32);\n        cylinder(h=3.5, d=cap_diameter, $fn=32);\n    }\n}\n\n// Assemble the crumhorn\nunion() {\n    // Main curved body\n    translate([0,0,cap_height+3])\n        crumhorn_body();\n    \n    // Bell at the end\n    translate([0,0,cap_height+3+65])\n        rotate([15,0,0])\n            bell();\n    \n    // Wind cap\n    translate([0,0,0])\n        wind_cap();\n    \n    // Decorative ring\n    translate([0,0,cap_height])\n        ring();\n}\n\n// Add small support feet for printing\ntranslate([0,0,-0.5])\n    difference() {\n        cube([30, 5, 1], center=true);\n        cube([28, 3, 1.5], center=true);\n    }",
    "renders": true
  },
  {
    "musical_instrument": "cornamuse",
    "openscad_code": "// Cornamuse - Renaissance double-reed windcap instrument\n// Medium complexity, realistic style, 3D-printable\n\n$fn = 36;               // Smooth curves\nwall = 1.5;             // 3D-print wall thickness (mm)\nscale = 3;              // Overall scaling factor\n\nmodule windcap() {\n    // Conical windcap with reed inside\n    difference() {\n        cylinder(h1 = 18*scale, r1 = 5*scale, r2 = 4*scale);\n        translate([0,0,wall]) \n            cylinder(h1 = 17*scale-wall, r1 = 5*scale-wall, r2 = 4*scale-wall);\n    }\n}\n\nmodule pirouette() {\n    // Decorative ring around windcap base\n    difference() {\n        cylinder(h = 3*scale, r = 6.5*scale);\n        translate([0,0,wall]) \n            cylinder(h = 3*scale, r = 5.5*scale);\n    }\n}\n\nmodule finger_hole(len) {\n    // Cylindrical finger hole\n    translate([0,len,0])\n        rotate([90,0,0])\n            cylinder(h = wall+1, r = 1.5*scale);\n}\n\nmodule fingered_pipe(len, holes) {\n    // Main pipe with tone holes\n    difference() {\n        cylinder(h = len*scale, r = 4*scale);\n        translate([0,0,wall]) \n            cylinder(h = len*scale-wall, r = 4*scale-wall);\n        \n        // Tone holes\n        for(i = [0:len(holes)-1]) {\n            translate([0,holes[i]*scale,0])\n                rotate([90,0,0])\n                    cylinder(h = 4*scale+1, r = 1.5*scale);\n        }\n    }\n}\n\nmodule bell() {\n    // Flared bell at end\n    difference() {\n        cylinder(h = 12*scale, r1 = 4*scale, r2 = 6*scale);\n        translate([0,0,wall]) \n            cylinder(h = 12*scale, r1 = 4*scale-wall, r2 = 6*scale-wall);\n    }\n}\n\nmodule drone_pipe(holes) {\n    // Single drone pipe parallel to main pipe\n    translate([9*scale,0,0]) {\n        difference() {\n            cylinder(h = 45*scale, r = 3*scale);\n            translate([0,0,wall]) \n                cylinder(h = 45*scale-wall, r = 3*scale-wall);\n            \n            // Drone tone holes\n            for(i = [0:len(holes)-1]) {\n                translate([0,holes[i]*scale,0])\n                    rotate([90,0,0])\n                        cylinder(h = 3*scale+1, r = 1.2*scale);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Windcap assembly\n    translate([0,0,45*scale]) {\n        windcap();\n        translate([0,0,-3*scale])\n            pirouette();\n    }\n    \n    // Main pipe with finger holes\n    fingered_pipe(45, [5, 12, 18, 25, 32, 38]);\n    \n    // Bell at end\n    translate([0,0,-12*scale])\n        bell();\n    \n    // Drone pipe\n    drone_pipe([10, 25, 35]);\n    \n    // Small connecting bridge\n    translate([4.5*scale,-2*scale,20*scale])\n        cube([9*scale, 4*scale, 3*scale]);\n}",
    "renders": true
  },
  {
    "musical_instrument": "rackett",
    "openscad_code": "// OpenSCAD code for a 3D-printable Renaissance rackett\n// Modelled with a closed wind-cap and nine tone-holes\n\n// overall scale factor (mm)\nscaleFactor = 0.8;\n\n// Main body length and radius\nbodyL = 85 * scaleFactor;\nbodyR = 6  * scaleFactor;\nwallT = 1.2 * scaleFactor;\n\n// Wind-cap dimensions\ncapL = 18 * scaleFactor;\ncapR = 7.5 * scaleFactor;\n\n// Bell flare\nbellL = 12 * scaleFactor;\nbellR = 9 * scaleFactor;\n\n// Tone-hole parameters\nholes = 9;\nholeD = 3.5 * scaleFactor;\nholePitch = (bodyL - 10 * scaleFactor) / (holes - 1);\n\nmodule bodyShell() {\n    difference() {\n        // outer cylinder\n        cylinder(h = bodyL, r = bodyR, $fn = 64);\n        // bore\n        translate([0, 0, -0.1])\n            cylinder(h = bodyL + 0.2, r = bodyR - wallT, $fn = 64);\n    }\n}\n\nmodule windCap() {\n    difference() {\n        // outer\n        union() {\n            cylinder(h = capL, r1 = capR, r2 = bodyR, $fn = 64);\n            // cap dome\n            translate([0, 0, capL])\n                sphere(r = capR, $fn = 64);\n        }\n        // wind-way tunnel\n        rotate([90, 0, 0])\n            translate([0, 0, -capR])\n                cylinder(h = capR * 2, r = 2 * scaleFactor, $fn = 32);\n        // bore continuation\n        translate([0, 0, -0.1])\n            cylinder(h = capL + 0.2, r1 = bodyR - wallT, r2 = bodyR - wallT, $fn = 64);\n    }\n}\n\nmodule bellFlare() {\n    difference() {\n        // outer flare\n        cylinder(h = bellL, r1 = bodyR, r2 = bellR, $fn = 64);\n        // inner flare\n        translate([0, 0, -0.1])\n            cylinder(h = bellL + 0.2, r1 = bodyR - wallT, r2 = bellR - wallT, $fn = 64);\n    }\n}\n\nmodule toneHoles() {\n    for (i = [0 : holes - 1]) {\n        translate([0, 0, 5 * scaleFactor + i * holePitch])\n            rotate([90, 0, 0])\n                cylinder(h = bodyR * 2, r = holeD / 2, $fn = 24);\n    }\n}\n\n// Build the instrument\nunion() {\n    // main body\n    bodyShell();\n    \n    // wind-cap at top\n    translate([0, 0, bodyL])\n        windCap();\n    \n    // bell flare at bottom\n    translate([0, 0, -bellL])\n        bellFlare();\n    \n    // tone-holes\n    difference() {\n        union();  // placeholder for body\n        toneHoles();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "chalumeau",
    "openscad_code": "$fn = 30;\n\n// overall dimensions\nlength = 85;\nbody_d = 14;\nbell_d = 18;\nwall = 1.5;\n\nmodule chalumeau() {\n    // main bore (hollow cylinder)\n    difference() {\n        cylinder(h = length, d = body_d, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = length + 0.2, d = body_d - 2*wall, center = false);\n    }\n\n    // bell flare\n    translate([0, 0, length])\n    difference() {\n        cylinder(h = 12, d1 = body_d, d2 = bell_d, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = 12.2, d1 = body_d - 2*wall, d2 = bell_d - 2*wall, center = false);\n    }\n\n    // mouthpiece\n    translate([0, 0, -10])\n    difference() {\n        cylinder(h = 10, d1 = body_d - 2, d2 = body_d, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = 10.2, d1 = 4, d2 = body_d - 2*wall, center = false);\n    }\n\n    // seven finger holes (six front, one thumb)\n    // front holes\n    for (i = [0:5]) {\n        hole_pos = 15 + i * 9;\n        translate([0, (body_d)/2, hole_pos])\n            rotate([90, 0, 0])\n                cylinder(h = wall + 1, d = 3.5, center = true);\n    }\n\n    // thumb hole\n    translate([0, -(body_d)/2, 35])\n        rotate([90, 0, 0])\n            cylinder(h = wall + 1, d = 3.5, center = true);\n\n    // decorative rings\n    ring_positions = [5, 25, 45, 65];\n    for (pos = ring_positions) {\n        translate([0, 0, pos])\n        difference() {\n            cylinder(h = 1.5, d = body_d + 2, center = false);\n            cylinder(h = 1.7, d = body_d, center = false);\n        }\n    }\n\n    // labium window (sound producing edge)\n    translate([body_d/2 - 0.5, 0, 0])\n    difference() {\n        cube([3, 7, 8], center = true);\n        translate([0, 0, -0.5])\n            cube([3.2, 7.2, 7], center = true);\n    }\n\n    // windway cap\n    translate([body_d/2 + 3, 0, -5])\n    difference() {\n        cube([6, 8, 10], center = true);\n        translate([-0.1, 0, 0])\n            cube([6.2, 5, 6], center = true);\n    }\n}\n\nchalumeau();",
    "renders": true
  },
  {
    "musical_instrument": "dulcian",
    "openscad_code": "// Dulcian (Renaissance Bassoon) - Realistic Medium Complexity\n// 3D printable with 2mm wall thickness and no overhangs >45°\n\n// Parameters\nbody_len = 60;\nbell_dia = 18;\nbell_len = 25;\ncrook_len = 15;\ncrook_dia = 4;\nwall = 2;\n\nmodule dulcian() {\n    // Main body tube - stepped conical bore\n    difference() {\n        union() {\n            // Upper joint\n            cylinder(h=body_len*0.4, d1=12, d2=14, $fn=32);\n            translate([0,0,body_len*0.4])\n                cylinder(h=body_len*0.3, d1=14, d2=16, $fn=32);\n            // Lower joint\n            translate([0,0,body_len*0.7])\n                cylinder(h=body_len*0.3, d1=16, d2=bell_dia-wall, $fn=32);\n        }\n        // Hollow bore\n        translate([0,0,-1])\n            cylinder(h=body_len+2, d1=6, d2=10, $fn=32);\n    }\n    \n    // Bell flare\n    translate([0,0,body_len])\n    difference() {\n        cylinder(h=bell_len, d1=bell_dia, d2=bell_dia+4, $fn=32);\n        translate([0,0,-1])\n            cylinder(h=bell_len+2, d1=bell_dia-wall*2, d2=bell_dia+4-wall*2, $fn=32);\n    }\n    \n    // Crook/tenon\n    translate([0,0,-crook_len])\n    difference() {\n        cylinder(h=crook_len, d=crook_dia+wall*2, $fn=16);\n        translate([0,0,-1])\n            cylinder(h=crook_len+2, d=crook_dia, $fn=16);\n    }\n    \n    // Tone holes\n    for(i=[0:3]) {\n        angle = i*90;\n        hole_z = 15 + i*10;\n        translate([0,0,hole_z])\n        rotate([0,90,angle])\n        difference() {\n            cylinder(h=6, d=4, $fn=8);\n            translate([0,-3,0])\n                cube([4,6,4], center=true);\n        }\n    }\n    \n    // Key levers\n    module key(x,z,len) {\n        translate([x,0,z])\n        union() {\n            rotate([90,0,0])\n                cylinder(h=len, d=1.5, $fn=8);\n            translate([len/2,0,0])\n                sphere(d=2.5, $fn=16);\n        }\n    }\n    \n    key(10, 20, 8);\n    key(-10, 30, 10);\n    key(8, 40, 6);\n    \n    // Fontanelle (key cover)\n    translate([0,-8,35])\n    difference() {\n        cube([16,4,10], center=true);\n        translate([0,1,0])\n            cube([14,2,8], center=true);\n    }\n}\n\n// Assemble\nrotate([90,0,0])\n    dulcian();",
    "renders": true
  },
  {
    "musical_instrument": "bassanello",
    "openscad_code": "// Bassanello - Renaissance double-reed wind instrument\n// Medium complexity, 3D printable, realistic style\n\n$fn = 32;  // Smooth curves for 3D printing\n\nmodule bassanello() {\n    // Overall dimensions approximately 180mm long\n    \n    // Main bore pipe\n    union() {\n        // Main body tube - slightly conical\n        cylinder(h1=150, h2=145, r1=6, r2=7);\n        \n        // Mouthpiece/reed cap\n        translate([0, 0, 150])\n            cylinder(h=12, r1=7, r2=5);\n            \n        // Bell flare\n        translate([0, 0, -15])\n            cylinder(h=15, r1=7, r2=12);\n    }\n    \n    // Tone holes - 8 finger holes plus thumb hole\n    for(i = [0:7]) {\n        // Position holes along top of instrument\n        translate([0, 6.5, 140 - i*15])\n            rotate([90, 0, 0])\n                cylinder(h=15, r=2.5, $fn=16);\n    }\n    \n    // Thumb hole on back\n    translate([0, -6.5, 110])\n        rotate([90, 0, 0])\n            cylinder(h=15, r=2.5, $fn=16);\n    \n    // Decorative rings/bands\n    module ring(height, radius) {\n        difference() {\n            cylinder(h=3, r=radius+1);\n            cylinder(h=3.2, r=radius-0.5);\n        }\n    }\n    \n    // Position decorative rings\n    ring(150, 6);           // Top ring\n    ring(120, 6.5);         // Middle ring\n    ring(90, 7);            // Lower ring\n    \n    // Key mechanism mounts (simplified)\n    module key_mount() {\n        // Small rectangular mount\n        cube([4, 3, 2], center=true);\n    }\n    \n    // Add key mounts for lower holes\n    translate([4, 6, 50])\n        key_mount();\n    translate([4, 6, 35])\n        key_mount();\n    translate([4, 6, 20])\n        key_mount();\n    \n    // Wind cap detail\n    translate([0, 0, 156])\n        cylinder(h=8, r=5.5);\n        \n    // Reed window detail\n    difference() {\n        translate([0, 0, 155])\n            cylinder(h=3, r=4);\n        translate([0, 4, 155.5])\n            cube([2, 4, 3.2], center=true);\n    }\n    \n    // Small vent hole near bell\n    translate([0, 7.5, 10])\n        rotate([90, 0, 0])\n            cylinder(h=15, r=1.5, $fn=12);\n}\n\n// Render the instrument\nbassanello();",
    "renders": true
  },
  {
    "musical_instrument": "kortholt",
    "openscad_code": "// Kortholt - Renaissance double-reed wind instrument\n// 3D printable model with realistic proportions\n\n// Overall dimensions\nlength = 180;\nbody_diam = 18;\nbell_diam = 35;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body module\nmodule kortholt_body() {\n    // Main cylindrical body\n    difference() {\n        cylinder(h=length, d1=body_diam, d2=body_diam+3, $fn=64);\n        // Hollow bore\n        translate([0,0,-1])\n            cylinder(h=length+2, d1=body_diam-wall*2, d2=body_diam+3-wall*2, $fn=64);\n    }\n}\n\n// Bell flare\nmodule bell() {\n    difference() {\n        cylinder(h=25, d1=body_diam+3, d2=bell_diam, $fn=64);\n        // Hollow bell\n        translate([0,0,-1])\n            cylinder(h=27, d1=body_diam+3-wall*2, d2=bell_diam-wall*2, $fn=64);\n    }\n}\n\n// Finger holes - 8 front holes plus 1 thumb hole\nmodule finger_holes() {\n    // Front holes\n    for(i=[0:7]) {\n        translate([0, body_diam/2+1, 50+i*12])\n            rotate([90,0,0])\n                cylinder(h=body_diam+2, d=4, $fn=16);\n    }\n    // Thumb hole\n    translate([0, -body_diam/2-1, 110])\n        rotate([90,0,0])\n            cylinder(h=body_diam+2, d=4, $fn=16);\n}\n\n// Wind cap / reed chamber\nmodule reed_cap() {\n    // Main cap body\n    difference() {\n        translate([0,0,length])\n            cylinder(h=25, d1=body_diam+8, d2=body_diam+6, $fn=32);\n        // Hollow chamber\n        translate([0,0,length-1])\n            cylinder(h=27, d=body_diam+4, $fn=32);\n    }\n    // Reed window\n    translate([0,0,length+10])\n        cube([12, 3, 8], center=true);\n}\n\n// Key mechanism (simplified)\nmodule keys() {\n    // Key posts\n    for(i=[0:3]) {\n        translate([body_diam/2+2, 0, 70+i*15])\n            cylinder(h=8, d=3, $fn=16);\n    }\n    // Key levers\n    for(i=[0:3]) {\n        translate([body_diam/2+6, 0, 70+i*15])\n            rotate([90,0,0])\n                cube([20, 2, 1]);\n    }\n}\n\n// Decorative rings\nmodule rings() {\n    // Bell ring\n    translate([0,0,25])\n        cylinder(h=3, d=bell_diam+2, $fn=64);\n    \n    // Reed cap ring\n    translate([0,0,length])\n        cylinder(h=3, d=body_diam+10, $fn=64);\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    kortholt_body();\n    translate([0,0,length])\n        bell();\n    \n    // Functional parts\n    reed_cap();\n    \n    // Decorative elements\n    rings();\n    \n    // Cut finger holes\n    finger_holes();\n    \n    // Add keys\n    keys();\n}",
    "renders": true
  },
  {
    "musical_instrument": "rauschpfeife",
    "openscad_code": "// Rauschpfeife - Medium complexity realistic model\n// 3D printable, no overhangs, 1.5 mm wall thickness\n\n$fn = 32;\n\n// Overall scale factor\nscale_factor = 0.6;\n\n// Main union\nunion() {\n    // Windcap\n    windcap();\n\n    // Body\n    body();\n\n    // Bell\n    bell();\n}\n\n// Windcap module\nmodule windcap() {\n    translate([0, 0, 95 * scale_factor]) {\n        // Main windcap body\n        cylinder(h = 25 * scale_factor, r1 = 10 * scale_factor, r2 = 12 * scale_factor);\n\n        // Windcap top\n        translate([0, 0, 25 * scale_factor]) {\n            sphere(r = 12 * scale_factor);\n            // Hollow interior\n            difference() {\n                sphere(r = 12 * scale_factor);\n                sphere(r = 10.5 * scale_factor);\n            }\n        }\n\n        // Reed block\n        translate([0, 0, -5 * scale_factor]) {\n            cylinder(h = 8 * scale_factor, r = 6 * scale_factor);\n            // Reed channel\n            rotate([0, 90, 0]) {\n                cylinder(h = 12 * scale_factor, r = 1.5 * scale_factor);\n            }\n        }\n    }\n}\n\n// Body module with tone holes\nmodule body() {\n    // Main tube\n    difference() {\n        cylinder(h = 70 * scale_factor, r = 7 * scale_factor);\n        // Internal bore\n        cylinder(h = 70 * scale_factor, r = 5.5 * scale_factor);\n    }\n\n    // Tone holes\n    for (i = [0:5]) {\n        hole_height = 10 * scale_factor + i * 10 * scale_factor;\n        hole_size = 3.5 * scale_factor - i * 0.3 * scale_factor;\n        \n        // Front holes\n        translate([8 * scale_factor, 0, hole_height]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 3 * scale_factor, r = hole_size / 2);\n            }\n        }\n        \n        // Back thumb hole\n        if (i == 2) {\n            translate([-8 * scale_factor, 0, hole_height]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 3 * scale_factor, r = 3 * scale_factor / 2);\n                }\n            }\n        }\n    }\n}\n\n// Bell module\nmodule bell() {\n    translate([0, 0, -40 * scale_factor]) {\n        difference() {\n            // Bell flare\n            cylinder(h = 25 * scale_factor, r1 = 7 * scale_factor, r2 = 15 * scale_factor);\n            // Bell bore\n            cylinder(h = 25 * scale_factor, r1 = 5.5 * scale_factor, r2 = 13.5 * scale_factor);\n        }\n        \n        // Decorative rings\n        for (i = [0:2]) {\n            translate([0, 0, -i * 8 * scale_factor]) {\n                cylinder(h = 2 * scale_factor, r = 16 * scale_factor);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "gemshorn",
    "openscad_code": "// Gemshorn - Traditional medieval ocarina made from animal horn\n// Medium complexity realistic style, 3D printable\n\n// Overall dimensions\nbody_length = 85;\nbody_max_diameter = 35;\nwall_thickness = 2;\n\n// Main body - curved horn shape\nmodule horn_body() {\n    // Create curved horn shape by sweeping circles\n    linear_extrude(height = body_length, twist = 45, scale = [0.4, 1])\n        circle(d = body_max_diameter);\n    \n    // Add slight bulge for realistic horn growth rings\n    for (i = [1:5]) {\n        translate([0, 0, i * body_length/6])\n            rotate([0, 0, i * 15])\n                scale([1 + i*0.03, 1 + i*0.02, 1])\n                    cylinder(h = 5, d1 = body_max_diameter - 2, d2 = body_max_diameter - 1, $fn = 32);\n    }\n}\n\n// Windway and labium (sound producing edge)\nmodule windway() {\n    // Windway entrance\n    translate([0, -body_max_diameter/2 + 5, body_length - 15])\n        rotate([90, 0, 0])\n            cylinder(h = 10, d1 = 6, d2 = 4, $fn = 16);\n    \n    // Windway channel inside\n    translate([0, 0, body_length - 12])\n        cube([4, 8, 6], center = true);\n    \n    // Labium edge\n    translate([0, 2, body_length - 8])\n        cube([5, 0.5, 3], center = true);\n}\n\n// Finger holes - 4 front, 1 thumb\nmodule finger_holes() {\n    // Front holes\n    for (i = [0:3]) {\n        angle = -30 - i * 20;\n        translate([sin(angle) * (body_max_diameter/2 - 3), \n                   cos(angle) * (body_max_diameter/2 - 3), \n                   body_length - 25 - i * 12])\n            rotate([90, 0, angle])\n                cylinder(h = wall_thickness + 2, d = 4 + i, $fn = 16);\n    }\n    \n    // Thumb hole\n    translate([-body_max_diameter/2 + 5, 0, body_length - 45])\n        rotate([0, 90, 0])\n            cylinder(h = wall_thickness + 2, d = 5, $fn = 16);\n}\n\n// Mouthpiece end\nmodule mouthpiece() {\n    difference() {\n        // Tapered end\n        translate([0, 0, body_length - 10])\n            cylinder(h = 15, d1 = body_max_diameter, d2 = body_max_diameter * 0.7, $fn = 32);\n        \n        // Windway exit\n        translate([0, 0, body_length - 5])\n            cube([5, 3, 10], center = true);\n    }\n}\n\n// Horn tip opening\nmodule horn_tip() {\n    // Gradual taper to tip\n    translate([0, 0, 0])\n        cylinder(h = 15, d1 = body_max_diameter * 0.3, d2 = body_max_diameter * 0.1, $fn = 32);\n}\n\n// Hollow out the body\nmodule hollow_body() {\n    difference() {\n        // Combine all outer parts\n        union() {\n            horn_body();\n            mouthpiece();\n            horn_tip();\n        }\n        \n        // Inner cavity - main resonating chamber\n        translate([0, 0, -5])\n            scale([0.8, 0.8, 1])\n                cylinder(h = body_length + 10, d1 = body_max_diameter - wall_thickness*2, \n                        d2 = body_max_diameter*0.1 - wall_thickness, $fn = 32);\n        \n        // Windway channel\n        translate([0, -body_max_diameter/2 + 5, body_length - 15])\n            rotate([90, 0, 0])\n                cylinder(h = 20, d = 2.5, $fn = 16);\n    }\n}\n\n// Generate complete gemshorn\nunion() {\n    hollow_body();\n    windway();\n    finger_holes();\n}\n\n// Add subtle texture rings\nmodule texture_rings() {\n    for (i = [1:8]) {\n        translate([0, 0, i * body_length/9])\n            rotate([0, 0, i * 5])\n                difference() {\n                    cylinder(h = 1, d = body_max_diameter + 0.5, $fn = 32);\n                    cylinder(h = 1.1, d = body_max_diameter, $fn = 32);\n                }\n    }\n}\n\n// Apply texture\ntranslate([0, 0, 0])\n    texture_rings();",
    "renders": true
  },
  {
    "musical_instrument": "panpipes",
    "openscad_code": "// Panpipes - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Parameters\npan_width = 85;           // Total width of panpipes\npan_depth = 12;           // Depth of pipes\nbase_height = 4;          // Thickness of connecting base\nwall_thickness = 1.2;     // Wall thickness for printing\npipe_gap = 3;             // Gap between pipes\nnum_pipes = 8;            // Number of pipes\n\n// Pipe lengths (realistic musical scale proportion)\npipe_lengths = [28, 31, 35, 39, 44, 49, 55, 62];\n\nmodule pipe(length, radius) {\n    // Outer pipe\n    difference() {\n        cylinder(h = length + base_height, r = radius, $fn = 32);\n        // Hollow center\n        translate([0, 0, base_height])\n            cylinder(h = length - 1, r = radius - wall_thickness, $fn = 32);\n    }\n    \n    // Top rim detail\n    translate([0, 0, length + base_height])\n        cylinder(h = 1.5, r1 = radius, r2 = radius + 0.5, $fn = 32);\n    \n    // Bottom stopper\n    translate([0, 0, base_height - 0.1])\n        cylinder(h = 0.2, r = radius - wall_thickness, $fn = 32);\n}\n\nmodule panpipes_assembly() {\n    total_pipe_width = num_pipes * (pan_depth - wall_thickness) + (num_pipes - 1) * pipe_gap;\n    \n    // Connecting base\n    translate([0, 0, 0])\n        cube([total_pipe_width, pan_depth, base_height], center = true);\n    \n    // Pipes\n    for(i = [0 : num_pipes - 1]) {\n        x_pos = -total_pipe_width/2 + (pan_depth - wall_thickness)/2 + i * (pan_depth - wall_thickness + pipe_gap);\n        translate([x_pos, 0, base_height])\n            pipe(pipe_lengths[i], (pan_depth - wall_thickness)/2);\n    }\n    \n    // Side supports\n    translate([-total_pipe_width/2 - 2, 0, base_height/2])\n        cube([2, pan_depth, base_height + max(pipe_lengths)], center = true);\n    translate([total_pipe_width/2 + 2, 0, base_height/2])\n        cube([2, pan_depth, base_height + max(pipe_lengths)], center = true);\n    \n    // Top support bar\n    translate([0, 0, base_height + max(pipe_lengths) + 1])\n        cube([total_pipe_width + 8, pan_depth - 2, 2], center = true);\n}\n\n// Main assembly\npanpipes_assembly();",
    "renders": true
  },
  {
    "musical_instrument": "ocarina",
    "openscad_code": "// Realistic 3D-printable ocarina – medium complexity\n// Overall length ≈ 70 mm, wall thickness = 2 mm\n\n$fn = 36; // circle quality for 3D printing\n\nmodule ocarina(){\n    difference(){\n        // Main body shell\n        body_shell();\n        \n        // Hollow interior\n        translate([0,0,-2])\n            scale([0.75,0.75,0.9])\n            body_shell();\n        \n        // Mouth tube cavity\n        rotate([0,90,0])\n            translate([-30,0,-5])\n            cylinder(h=35, d1=12, d2=8);\n        \n        // Windway\n        translate([20,0,8])\n            rotate([0,0,0])\n            cube([25,3,2], center=true);\n        \n        // Tone holes\n        tone_holes();\n    }\n    \n    // Mouthpiece exterior\n    mouthpiece();\n    \n    // Labium edge\n    labium();\n}\n\nmodule body_shell(){\n    hull(){\n        // Tail bulb\n        translate([-25,0,0])\n            sphere(d=25);\n        // Mid chamber\n        translate([0,0,5])\n            sphere(d=28);\n        // Head bulb\n        translate([25,0,5])\n            sphere(d=22);\n    }\n}\n\nmodule mouthpiece(){\n    color(\"peru\")\n    difference(){\n        union(){\n            // Mouth tube\n            rotate([0,90,0])\n                translate([-30,0,-5])\n                cylinder(h=25, d1=16, d2=12);\n            // Flare\n            rotate([0,90,0])\n                translate([-30-25,0,-5])\n                cylinder(h=5, d1=18, d2=16);\n        }\n        // Windway slot\n        translate([20,0,8])\n            cube([25,3,2], center=true);\n    }\n}\n\nmodule labium(){\n    // Sharp edge under windway exit\n    translate([20-1,0,6])\n        rotate([0,-30,0])\n        cube([2,4,4], center=true);\n}\n\nmodule tone_holes(){\n    // positions measured from mouth tip along x-axis, y offset, diameter\n    holes = [\n        [5,  8, 6],\n        [0,  6, 5],\n        [-5, -6, 5],\n        [-10, 8, 6],\n        [-15,-8, 5],\n        [-20, 0, 4],\n        [-22, 0, 4],\n        [-24, 0, 4]\n    ];\n    for(h = holes){\n        translate([h[0], h[1], 5])\n            cylinder(h=10, d=h[2], center=true);\n    }\n}\n\nocarina();",
    "renders": true
  },
  {
    "musical_instrument": "tinwhistle",
    "openscad_code": "// Tinwhistle - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness\n\n$fn = 32;\nwall = 1.2;\n\nmodule body() {\n    // Main tube\n    difference() {\n        cylinder(h = 80, d = 12);\n        cylinder(h = 82, d = 12 - 2*wall);\n    }\n    \n    // Mouthpiece\n    difference() {\n        translate([0, 0, 80])\n            cylinder(h = 15, d1 = 12, d2 = 10);\n        translate([0, 0, 79.9])\n            cylinder(h = 17, d1 = 12 - 2*wall, d2 = 8);\n    }\n    \n    // Windway top\n    translate([0, 6, 85])\n        difference() {\n            cube([12, 2, 8], center = true);\n            translate([0, 0.5, 0])\n                cube([10, 1, 6], center = true);\n        }\n    \n    // Labium edge\n    translate([0, 4.5, 90])\n        cube([12, 0.5, 0.5], center = true);\n}\n\nmodule finger_hole(pos, size) {\n    translate([0, 0, pos])\n        difference() {\n            cylinder(h = 2, d = size);\n            translate([0, 0, -0.1])\n                cylinder(h = 2.2, d = size - wall);\n        }\n}\n\nmodule holes() {\n    // Thumb hole\n    finger_hole(20, 6);\n    \n    // Finger holes - progressively smaller\n    finger_hole(35, 5);\n    finger_hole(45, 5);\n    finger_hole(55, 4.5);\n    finger_hole(65, 4.5);\n    finger_hole(75, 4);\n}\n\nmodule mouthpiece_details() {\n    // Lip plate\n    translate([0, 7, 87])\n        difference() {\n            cube([20, 4, 2], center = true);\n            translate([0, 1, 0])\n                cube([18, 2, 1.9], center = true);\n        }\n    \n    // Mouthpiece decoration ring\n    translate([0, 0, 93])\n        difference() {\n            cylinder(h = 2, d = 14);\n            cylinder(h = 2.2, d = 12);\n        }\n}\n\nmodule embouchure_hole() {\n    // Windway exit hole\n    translate([0, 5.5, 90])\n        rotate([90, 0, 0])\n            cylinder(h = 10, d = 4);\n}\n\nunion() {\n    body();\n    holes();\n    mouthpiece_details();\n    embouchure_hole();\n}",
    "renders": true
  },
  {
    "musical_instrument": "lowwhistle",
    "openscad_code": "// Lowwhistle - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs and proper wall thickness\n\n$fn = 32;  // Smooth curves\nwall_thickness = 2;  // 3D printable wall thickness\n\n// Main whistle body module\nmodule whistle_body() {\n    // Mouthpiece\n    translate([0, 0, 0]) {\n        difference() {\n            // Main mouthpiece body\n            cylinder(h = 15, r1 = 12, r2 = 8, center = false);\n            // Mouthpiece airway\n            translate([0, 0, -1]) {\n                cylinder(h = 17, r1 = 6, r2 = 4, center = false);\n            }\n        }\n    }\n    \n    // Main tube\n    translate([0, 0, 15]) {\n        difference() {\n            cylinder(h = 80, r = 8, center = false);\n            // Inner bore\n            translate([0, 0, -1]) {\n                cylinder(h = 82, r = 6, center = false);\n            }\n        }\n    }\n}\n\n// Window (sound hole) with labium edge\nmodule window_cut() {\n    // Position at end of mouthpiece\n    translate([0, 0, 15]) {\n        // Main window cutout\n        rotate([90, 0, 0]) {\n            translate([0, -6, 0]) {\n                cube([12, 4, 8], center = true);\n            }\n        }\n        // Labium edge\n        translate([0, 8, 1]) {\n            rotate([90, 0, 0]) {\n                cube([11, wall_thickness, 4], center = true);\n            }\n        }\n    }\n}\n\n// Finger holes\nmodule finger_holes() {\n    // Define hole positions along tube\n    positions = [25, 35, 45, 55, 65, 75];\n    \n    for(i = [0 : len(positions)-1]) {\n        translate([0, 0, positions[i]]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    // Outer hole\n                    cylinder(h = wall_thickness*2, r = 3.5, center = true);\n                    // Inner hole\n                    cylinder(h = wall_thickness*2.5, r = 2.5, center = true);\n                }\n            }\n        }\n    }\n}\n\n// Windway (air channel)\nmodule windway() {\n    translate([0, 0, 7]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                // Windway channel\n                cube([10, 6, 2], center = true);\n                // Air exit\n                translate([0, -3, 0]) {\n                    cube([8, 1, 1.5], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Mouthpiece lip rest\nmodule lip_rest() {\n    translate([0, 12, 7]) {\n        difference() {\n            // Curved lip rest\n            scale([1, 0.5, 1]) {\n                sphere(r = 8);\n            }\n            // Remove bottom half for flat surface\n            translate([0, -8, 0]) {\n                cube([20, 16, 20], center = true);\n            }\n        }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        whistle_body();\n        lip_rest();\n    }\n    \n    // Remove window cut\n    window_cut();\n    \n    // Remove windway channel\n    windway();\n    \n    // Remove finger holes\n    finger_holes();\n}",
    "renders": true
  },
  {
    "musical_instrument": "uilleannpipes",
    "openscad_code": "// Uilleann Pipes - Medium Complexity Realistic Style\n// Main components: chanter, drones, regulators, bag, and bellows\n\n$fn = 32;\nwall = 1.2;\n\n// Overall scale\nscale_factor = 0.8;\n\n// Helper module for hollow cylinder\nmodule hollow_cylinder(h, r1, r2, wall) {\n    difference() {\n        cylinder(h=h, r1=r1, r2=r2, center=true);\n        cylinder(h=h+1, r1=r1-wall, r2=r2-wall, center=true);\n    }\n}\n\n// Chanter module\nmodule chanter() {\n    translate([0, -10, 0])\n    rotate([0, 90, 0])\n    difference() {\n        // Main chanter body\n        union() {\n            hollow_cylinder(45, 4, 3.5, wall);\n            // Finger holes\n            for(i = [1:7]) {\n                translate([0, 5*i - 15, 0])\n                rotate([90, 0, 0])\n                cylinder(h=2, r=0.8, center=true);\n            }\n            // Thumb hole\n            translate([-4, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=2, r=0.8, center=true);\n        }\n    }\n}\n\n// Drone module\nmodule drone(length, diameter) {\n    rotate([0, 90, 0])\n    difference() {\n        // Main drone tube\n        hollow_cylinder(length, diameter/2, diameter/2.2, wall);\n        \n        // Tuning slide\n        translate([0, -length/2 - 5, 0])\n        hollow_cylinder(8, diameter/2 + 0.5, diameter/2 + 0.5, wall);\n    }\n}\n\n// Regulator module\nmodule regulator(length) {\n    rotate([0, 90, 0])\n    difference() {\n        // Main regulator tube\n        hollow_cylinder(length, 3, 2.8, wall);\n        \n        // Keys\n        for(i = [1:4]) {\n            translate([0, -length/2 + 8*i, 3])\n            cube([1, 4, 0.5], center=true);\n            translate([0, -length/2 + 8*i, 3.5])\n            cylinder(h=0.5, r=0.8, center=true);\n        }\n    }\n}\n\n// Bag module\nmodule bag() {\n    // Main bag body\n    scale([1, 0.6, 0.4])\n    sphere(15);\n    \n    // Bag opening\n    translate([0, 0, 6])\n    cylinder(h=3, r=5, center=true);\n}\n\n// Bellows module\nmodule bellows() {\n    translate([25, 0, 0])\n    rotate([0, -30, 0])\n    difference() {\n        // Main bellows body\n        cube([20, 15, 8], center=true);\n        \n        // Air chamber\n        translate([0, 0, 0])\n        cube([18, 13, 6], center=true);\n        \n        // Inlet valve\n        translate([-8, 0, 4])\n        cylinder(h=2, r=1.5, center=true);\n    }\n}\n\n// Stock connectors\nmodule stock() {\n    cylinder(h=8, r=4, center=true);\n    translate([0, 0, 4])\n    cylinder(h=4, r=5, center=true);\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    // Bag in center\n    color(\"saddlebrown\")\n    bag();\n    \n    // Chanter stock and chanter\n    translate([0, 0, 6])\n    color(\"tan\")\n    stock();\n    translate([0, -10, 15])\n    rotate([30, 0, 0])\n    color(\"peru\")\n    chanter();\n    \n    // Drones - three drones\n    translate([8, 5, 6])\n    color(\"tan\")\n    stock();\n    translate([8, 5, 15])\n    color(\"saddlebrown\")\n    drone(35, 5);\n    \n    translate([10, -5, 6])\n    color(\"tan\")\n    stock();\n    translate([10, -5, 15])\n    color(\"saddlebrown\")\n    drone(30, 4.5);\n    \n    translate([12, 0, 6])\n    color(\"tan\")\n    stock();\n    translate([12, 0, 15])\n    color(\"saddlebrown\")\n    drone(25, 4);\n    \n    // Regulators - three regulators\n    translate([-8, 5, 6])\n    color(\"tan\")\n    stock();\n    translate([-8, 5, 15])\n    color(\"goldenrod\")\n    regulator(25);\n    \n    translate([-10, -5, 6])\n    color(\"tan\")\n    stock();\n    translate([-10, -5, 15])\n    color(\"goldenrod\")\n    regulator(23);\n    \n    translate([-12, 0, 6])\n    color(\"tan\")\n    stock();\n    translate([-12, 0, 15])\n    color(\"goldenrod\")\n    regulator(20);\n    \n    // Bellows\n    color(\"saddlebrown\")\n    bellows();\n}",
    "renders": true
  },
  {
    "musical_instrument": "greatpipe",
    "openscad_code": "// Great Highland Bagpipe – chanter + drones in realistic-ish style\n// Overall height ≈ 90 mm, printable in one piece (no steep overhangs)\n\n$fn = 36;           // good balance between smoothness & speed\nwall = 1.5;         // printable wall thickness (mm)\n\n// ---------- Parameters ----------\nbag_d        = 28;\nbag_h        = 40;\nblowstick_l  = 30;\nblowstick_d  = 6;\nchanter_l    = 55;\nchanter_d    = 4.5;\ndrone_l      = 70;\ndrone_d      = 5;\ndrone_top_d  = 8;\ndrone_spacing= 12;\nbase_r       = 20;          // flat circular stand for print-bed adhesion\n\n// ---------- Modules ----------\nmodule tube_profile(r,l){\n    difference(){\n        cylinder(h=l, r=r+wall, center=false);\n        translate([0,0,-1])\n            cylinder(h=l+2, r=r, center=false);\n    }\n}\n\nmodule chanter_holes(l,d){\n    // 7 finger-holes + 1 thumb-hole\n    for(i=[0:6]){\n        translate([0, d/2 + wall + 0.5, l * (0.15 + 0.1*i)])\n            rotate([90,0,0])\n                cylinder(h=wall+1, r=0.6, center=true);\n    }\n    // thumb hole on back\n    translate([0, -(d/2 + wall + 0.5), l * 0.65])\n        rotate([90,0,0])\n            cylinder(h=wall+1, r=0.7, center=true);\n}\n\nmodule drone_bell(r,l){\n    union(){\n        tube_profile(r,l-3);\n        translate([0,0,l-3])\n            cylinder(h=3, r1=r+wall, r2=r+wall+2);\n    }\n}\n\n// ---------- Main assembly ----------\nunion(){\n    // Flat base disc for printing\n    cylinder(h=2, r=base_r);\n\n    // Bag\n    translate([0,0,2])\n    difference(){\n        scale([1,0.8,1])\n            sphere(d=bag_d);\n        translate([0,0,-bag_d])\n            cube([bag_d*2,bag_d*2,bag_d*2], center=true); // cut bottom half\n    }\n\n    // Blowstick\n    translate([0, bag_d/3, bag_h/2+2])\n        rotate([-25,0,0])\n            tube_profile(blowstick_d/2, blowstick_l);\n\n    // Chanter\n    translate([0, -bag_d/3, bag_h/2+2])\n    rotate([-30,0,0])\n        union(){\n            tube_profile(chanter_d/2, chanter_l);\n            chanter_holes(chanter_l, chanter_d/2);\n        }\n\n    // Three drones (two tenors, one bass)\n    for(side=[-1,0,1]){\n        translate([side * drone_spacing, bag_d/2+1, bag_h/2+2])\n        rotate([-35,0,0])\n            drone_bell(drone_d/2, drone_l + abs(side)*5);\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "borderpipe",
    "openscad_code": "// Borderpipe - Medium complexity realistic style\n// Designed for 3D printing, no overhangs, proper wall thickness\n\n// Overall dimensions\npipe_length = 85;\nchanter_length = 75;\nblowpipe_length = 25;\ndrone_length = 45;\n\n// Wall thickness\nwall = 1.5;\n\n// Helper module for rounded cylinders\nmodule rounded_cylinder(h, r1, r2) {\n    cylinder(h=h, r1=r1, r2=r2);\n    translate([0,0,0]) sphere(r=r1);\n    translate([0,0,h]) sphere(r=r2);\n}\n\n// Main bag module\nmodule bag() {\n    // Main bag body - ellipsoid\n    scale([1.2,1,0.8]) sphere(r=15);\n    \n    // Bag top opening\n    difference() {\n        translate([0,0,10]) scale([1.2,1,0.8]) sphere(r=15);\n        translate([0,0,8]) scale([1.1,0.9,0.7]) sphere(r=15);\n    }\n}\n\n// Bellows connector\nmodule bellows_connector() {\n    translate([-15, 0, 8]) {\n        // Connector tube\n        cylinder(h=8, r=4);\n        difference() {\n            cylinder(h=8, r=4);\n            cylinder(h=9, r=2.5);\n        }\n        \n        // Flange\n        translate([0,0,-2]) cylinder(h=1, r=5);\n    }\n}\n\n// Blowpipe\nmodule blowpipe() {\n    translate([15, 8, 8]) {\n        rotate([0,90,0]) {\n            // Main pipe\n            cylinder(h=blowpipe_length, r=3);\n            difference() {\n                cylinder(h=blowpipe_length, r=3);\n                cylinder(h=blowpipe_length+1, r=2);\n            }\n            \n            // Mouthpiece\n            translate([0,0,blowpipe_length]) {\n                cylinder(h=5, r1=3, r2=2);\n                difference() {\n                    cylinder(h=5, r1=3, r2=2);\n                    cylinder(h=6, r1=2, r2=1.5);\n                }\n            }\n        }\n    }\n}\n\n// Chanter stock\nmodule chanter_stock() {\n    translate([0, -15, 0]) {\n        // Stock base\n        cylinder(h=10, r=6);\n        difference() {\n            cylinder(h=10, r=6);\n            cylinder(h=11, r=4);\n        }\n        \n        // Chanter\n        translate([0,0,-chanter_length]) {\n            // Main chanter tube\n            cylinder(h=chanter_length, r=3);\n            difference() {\n                cylinder(h=chanter_length, r=3);\n                cylinder(h=chanter_length+1, r=2);\n            }\n            \n            // Chanter bell\n            translate([0,0,-chanter_length]) {\n                cylinder(h=8, r1=3, r2=4);\n                difference() {\n                    cylinder(h=8, r1=3, r2=4);\n                    cylinder(h=9, r1=2, r2=3);\n                }\n            }\n            \n            // Finger holes (6 holes)\n            for(i=[0:5]) {\n                rotate([0,90,0]) translate([0, -5-i*8, -chanter_length+15+i*8]) {\n                    cylinder(h=3, r=0.5);\n                }\n            }\n        }\n    }\n}\n\n// Drone\nmodule drone() {\n    translate([0, 15, 0]) {\n        // Stock base\n        cylinder(h=8, r=5);\n        difference() {\n            cylinder(h=8, r=5);\n            cylinder(h=9, r=3.5);\n        }\n        \n        // Main drone tube\n        translate([0,0,-drone_length]) {\n            // First section\n            cylinder(h=20, r=2.5);\n            difference() {\n                cylinder(h=20, r=2.5);\n                cylinder(h=21, r=1.5);\n            }\n            \n            // Second section\n            translate([0,0,-20]) {\n                cylinder(h=15, r=2);\n                difference() {\n                    cylinder(h=15, r=2);\n                    cylinder(h=16, r=1);\n                }\n            }\n            \n            // Third section\n            translate([0,0,-35]) {\n                cylinder(h=10, r=1.5);\n                difference() {\n                    cylinder(h=10, r=1.5);\n                    cylinder(h=11, r=0.5);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main bag\n    bag();\n    \n    // Connections\n    bellows_connector();\n    blowpipe();\n    chanter_stock();\n    drone();\n}",
    "renders": true
  },
  {
    "musical_instrument": "gaita",
    "openscad_code": "// OpenSCAD Gaita (Galician Bagpipe) – medium complexity, 3D-printable\n// Overall height ≈ 75 mm\n\n$fn = 36;\n\n// Parameters\nbag_w   = 35;\nbag_h   = 45;\nbag_d   = 25;\nchanterL = 60;\nchanterR = 3.5;\ndroneR   = 4;\ndroneL   = 50;\nwall     = 1.6;               // printable wall thickness\n\nmodule gaita() {\n    // Main bag – hollow ellipsoid\n    difference() {\n        scale([1, 1.2, 0.7])\n            sphere(d = bag_w);\n        translate([0, 0, -1])\n            scale([1 - wall*2/bag_w,\n                   1 - wall*2/bag_h,\n                   1 - wall*2/bag_d])\n                sphere(d = bag_w - wall*2);\n    }\n\n    // Blowpipe\n    translate([0, bag_h/2 - 5, bag_d/2 + 2])\n        rotate([90, 0, 0])\n            union() {\n                cylinder(h = 20, r1 = 4, r2 = 3);\n                // Mouthpiece flare\n                translate([0, 0, 20])\n                    cylinder(h = 5, r1 = 3, r2 = 5);\n            }\n\n    // Chanter\n    translate([0, -bag_h/2, 0])\n        rotate([0, 15, 0])\n            union() {\n                // Main tube\n                cylinder(h = chanterL, r = chanterR);\n                // Bell\n                translate([0, 0, chanterL])\n                    cylinder(h = 8, r1 = chanterR, r2 = chanterR + 3);\n                // Finger holes (six front)\n                for(i=[0:5])\n                    translate([0, -chanterR*2, 10 + i*7])\n                        rotate([90, 0, 0])\n                            cylinder(h = chanterR*2, r = 1, $fn = 16);\n                // Thumb hole\n                translate([0, 0, 25])\n                    rotate([0, 90, 0])\n                        cylinder(h = chanterR*2, r = 1, $fn = 16);\n            }\n\n    // Three drones (bass + two tenor) in parallel\n    for(i=[-1:1]) {\n        translate([i*8, bag_h/2 - 5, -bag_d/2])\n            rotate([0, -20, 0])\n                union() {\n                    // Main drone tube\n                    cylinder(h = droneL, r = droneR);\n                    // Two drone segments\n                    translate([0, 0, droneL*0.4])\n                        cylinder(h = 5, r = droneR + 1);\n                    translate([0, 0, droneL*0.8])\n                        cylinder(h = 5, r = droneR + 1);\n                    // Outlet\n                    translate([0, 0, droneL])\n                        cylinder(h = 6, r1 = droneR, r2 = droneR + 2);\n                }\n    }\n\n    // Simple tied cord around bag neck\n    translate([0, 0, bag_d/2 + 6])\n        rotate([90, 0, 0])\n            cylinder(h = bag_w, r = 1.5, center = true);\n}\n\ngaita();",
    "renders": true
  },
  {
    "musical_instrument": "dudy",
    "openscad_code": "// Dudy - traditional bagpipe chanter drone pipe\n// Realistic style, medium complexity\n\n$fn = 32;  // Smooth curves for 3D printing\nwall = 1.5;  // Wall thickness for printing\n\n// Main drone pipe\nmodule drone_pipe() {\n    // Bottom bell\n    difference() {\n        cylinder(h=15, d1=25, d2=20);\n        translate([0, 0, -1]) cylinder(h=17, d1=22, d2=17);\n    }\n    \n    // Main tube\n    translate([0, 0, 15]) cylinder(h=70, d=18);\n    \n    // Top ferrule\n    translate([0, 0, 85]) cylinder(h=8, d=20);\n    \n    // Mouthpiece\n    translate([0, 0, 93]) {\n        cylinder(h=12, d1=20, d2=16);\n        translate([0, 0, 12]) cylinder(h=8, d1=16, d2=12);\n    }\n}\n\n// Reed housing\nmodule reed_housing() {\n    translate([0, 0, 85]) {\n        difference() {\n            cylinder(h=10, d=22);\n            translate([0, 0, -1]) cylinder(h=12, d=18);\n        }\n    }\n}\n\n// Finger holes (realistic spacing and size)\nmodule finger_holes() {\n    // Top hole (thumb)\n    translate([0, 9, 55]) rotate([90, 0, 0]) \n        cylinder(h=18, d=6);\n    \n    // Front holes (6 fingers)\n    for(i = [0:5]) {\n        translate([0, 9, 25 + i*7]) rotate([90, 0, 0])\n            cylinder(h=18, d=5);\n    }\n}\n\n// Decorative rings\nmodule decorative_rings() {\n    // Top ring\n    translate([0, 0, 83]) cylinder(h=2, d=24);\n    \n    // Bottom ring\n    translate([0, 0, 14]) cylinder(h=2, d=26);\n    \n    // Middle band\n    translate([0, 0, 45]) cylinder(h=3, d=19.5);\n}\n\n// Support for 3D printing\nmodule print_support() {\n    // Base platform\n    translate([0, 0, -2]) cylinder(h=2, d=30);\n    \n    // Printing aids\n    translate([0, 0, -0.5]) \n        difference() {\n            cylinder(h=1, d=28);\n            cylinder(h=2, d=25);\n        }\n}\n\n// Assemble the dudy\nunion() {\n    drone_pipe();\n    reed_housing();\n    \n    // Create finger holes by subtracting\n    difference() {\n        union() {\n            decorative_rings();\n        }\n        finger_holes();\n    }\n    \n    print_support();\n}",
    "renders": true
  },
  {
    "musical_instrument": "sackbut",
    "openscad_code": "// Sackbut - Renaissance trombone\n// Medium complexity, realistic style, 3D printable\n\n$fn = 32;\nwall = 1.2;\n\nmodule bell() {\n    // Main bell flare\n    difference() {\n        cylinder(h = 25, r1 = 12, r2 = 18);\n        translate([0, 0, -0.1])\n            cylinder(h = 25.2, r1 = 12-wall, r2 = 18-wall);\n    }\n    \n    // Bell rim reinforcement\n    translate([0, 0, 24])\n        difference() {\n            cylinder(h = 2, r1 = 18, r2 = 19);\n            translate([0, 0, -0.1])\n                cylinder(h = 2.2, r1 = 18-wall, r2 = 19-wall);\n        }\n}\n\nmodule slide() {\n    // Outer slide tubes\n    for(i = [-1, 1]) {\n        translate([i * 6, 0, 0])\n            difference() {\n                cylinder(h = 40, r = 3);\n                translate([0, 0, -0.1])\n                    cylinder(h = 40.2, r = 3-wall);\n            }\n    }\n    \n    // Cross brace\n    translate([0, 0, 20])\n        difference() {\n            cube([14, 2, 3], center = true);\n            cube([14-wall*2, 2-wall*2, 3], center = true);\n        }\n}\n\nmodule mouthpiece() {\n    // Mouthpiece cup\n    difference() {\n        sphere(d = 8);\n        translate([0, 0, 2])\n            sphere(d = 6);\n    }\n    \n    // Mouthpiece shank\n    translate([0, 0, -6])\n        difference() {\n            cylinder(h = 8, r1 = 4, r2 = 2.5);\n            translate([0, 0, -0.1])\n                cylinder(h = 8.2, r1 = 4-wall, r2 = 2.5-wall);\n        }\n}\n\nmodule tuning_slide() {\n    // Main U-bend\n    difference() {\n        translate([0, 0, 5])\n            cylinder(h = 10, r = 4);\n        translate([0, 0, 4.9])\n            cylinder(h = 10.2, r = 4-wall);\n    }\n    \n    // Side tubes\n    for(i = [-1, 1]) {\n        translate([i * 4, 0, 0])\n            difference() {\n                cylinder(h = 5, r = 4);\n                translate([0, 0, -0.1])\n                    cylinder(h = 5.2, r = 4-wall);\n            }\n    }\n}\n\nmodule braces() {\n    // Bell brace\n    translate([0, 10, 25])\n        difference() {\n            cube([2, 10, 2], center = true);\n            cube([2-wall*2, 10, 2-wall*2], center = true);\n        }\n    \n    // Slide braces\n    for(pos = [10, 30]) {\n        translate([0, 8, pos])\n            difference() {\n                cube([14, 8, 2], center = true);\n                cube([14-wall*2, 8-wall*2, 2], center = true);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Bell section\n    translate([0, 0, 0])\n        bell();\n    \n    // Tuning slide\n    translate([0, 10, 15])\n        rotate([90, 0, 0])\n            tuning_slide();\n    \n    // Slide section\n    translate([0, 10, 0])\n        rotate([90, 0, 0])\n            slide();\n    \n    // Mouthpiece\n    translate([0, 10, -5])\n        rotate([90, 0, 0])\n            mouthpiece();\n    \n    // Support braces\n    braces();\n}",
    "renders": true
  },
  {
    "musical_instrument": "cornett",
    "openscad_code": "// Renaissance Cornetto / Zink - 3D-printable medium-complexity model\n// Overall length ≈ 110 mm – fits most FDM printers diagonally\n\n// ---------- Parameters ----------\nbody_len   = 100;    // total body length\nbody_dia   = 11;     // max body diameter\nmouth_len  = 20;     // detachable mouthpiece length\nwall       = 1.5;    // printable wall thickness\nfing_holes = 7;      // six finger holes + thumb hole\ndia_top    = 8;      // top bore diameter\ndia_bottom = 12;     // bottom bore diameter\n\n// ---------- Helper modules ----------\nmodule tapered_bore(len, d1, d2) {\n    // creates a hollow frustum; difference() gives the bore\n    difference() {\n        cylinder(h = len, d1 = d1 + 2*wall, d2 = d2 + 2*wall, $fn = 32);\n        translate([0, 0, -0.1])\n            cylinder(h = len + 0.2, d1 = d1, d2 = d2, $fn = 32);\n    }\n}\n\nmodule curved_body() {\n    // main curved wooden pipe – bent to typical gentle S-curve\n    for (i = [0 : 4]) {\n        hull() {\n            translate([0, i*5, sin(i*0.5)*3])\n                sphere(d = body_dia - i*0.8, $fn = 16);\n            translate([0, (i+1)*5, sin((i+1)*0.5)*3])\n                sphere(d = body_dia - (i+1)*0.8, $fn = 16);\n        }\n    }\n}\n\nmodule finger_holes() {\n    // places holes along top face; positions approximate real cornetto spacing\n    spacing = body_len / (fing_holes + 1);\n    for (i = [1 : fing_holes]) {\n        pos = spacing * i;\n        translate([0, pos, sin(pos/100*3.14)*3 + body_dia/2])\n            rotate([90, 0, 0])\n                cylinder(h = body_dia, d = 2.2, $fn = 12);\n    }\n}\n\nmodule octagonal_recess() {\n    // shallow decorative octagonal rings on the upper half\n    for (z = [body_len*0.6 : 4 : body_len*0.9]) {\n        difference() {\n            translate([0, z, sin(z/100*3.14)*3])\n                cylinder(h = 1.5, d = body_dia + 2, $fn = 8);\n            translate([0, z, sin(z/100*3.14)*3])\n                cylinder(h = 2, d = body_dia, $fn = 32);\n        }\n    }\n}\n\nmodule mouthpiece() {\n    // detachable cup mouthpiece\n    difference() {\n        union() {\n            cylinder(h = mouth_len*0.6, d1 = 14, d2 = 10, $fn = 32);\n            cylinder(h = mouth_len*0.4, d1 = 10, d2 = dia_top + 2*wall, $fn = 32);\n        }\n        translate([0, 0, -0.1])\n            cylinder(h = mouth_len + 0.2, d = dia_top, $fn = 32);\n    }\n}\n\n// ---------- Assembly ----------\nunion() {\n    // main body\n    difference() {\n        curved_body();\n        tapered_bore(body_len, dia_top, dia_bottom);\n        finger_holes();\n    }\n    octagonal_recess();\n\n    // mouthpiece – printed separately, friction-fit\n    translate([0, -mouth_len*0.4, 0])\n        rotate([0, 0, 180])\n            mouthpiece();\n}",
    "renders": true
  },
  {
    "musical_instrument": "slidecornett",
    "openscad_code": "// Slidecornett - medium complexity realistic style\n// Basic 3D printable cornett with slide mechanism\n\n// Parameters\n$fn = 32;\noverall_length = 80;\nbell_diameter = 24;\nbody_diameter = 12;\nmouthpiece_length = 15;\nslide_length = 30;\nwall_thickness = 1.5;\n\n// Main body tube\nmodule body() {\n    difference() {\n        // Outer tube\n        cylinder(h = overall_length - mouthpiece_length - slide_length, \n                d1 = body_diameter, d2 = body_diameter * 0.9);\n        \n        // Inner bore\n        translate([0, 0, -1])\n            cylinder(h = overall_length - mouthpiece_length - slide_length + 2, \n                    d1 = body_diameter - wall_thickness*2, \n                    d2 = (body_diameter - wall_thickness*2) * 0.9);\n    }\n}\n\n// Bell flare\nmodule bell() {\n    difference() {\n        // Outer bell\n        translate([0, 0, overall_length - mouthpiece_length - slide_length])\n            cylinder(h = 20, d1 = body_diameter * 0.9, d2 = bell_diameter);\n        \n        // Inner bell\n        translate([0, 0, overall_length - mouthpiece_length - slide_length - 1])\n            cylinder(h = 22, \n                    d1 = (body_diameter - wall_thickness*2) * 0.9, \n                    d2 = bell_diameter - wall_thickness*2);\n    }\n}\n\n// Mouthpiece with curved back\nmodule mouthpiece() {\n    union() {\n        // Mouthpiece tube\n        translate([0, 0, -mouthpiece_length])\n            cylinder(h = mouthpiece_length, d = body_diameter - 2);\n        \n        // Cup\n        translate([0, 0, -mouthpiece_length - 6])\n            sphere(d = body_diameter + 2);\n        \n        // Rim\n        difference() {\n            translate([0, 0, -mouthpiece_length - 6])\n                cylinder(h = 3, d = body_diameter + 4);\n            translate([0, 0, -mouthpiece_length - 7])\n                cylinder(h = 5, d = body_diameter);\n        }\n    }\n}\n\n// Slide mechanism\nmodule slide() {\n    // Fixed outer tube\n    difference() {\n        translate([0, 0, -mouthpiece_length - slide_length])\n            cylinder(h = slide_length + 5, d = body_diameter + 4);\n        translate([0, 0, -mouthpiece_length - slide_length - 1])\n            cylinder(h = slide_length + 7, d = body_diameter + 1);\n    }\n    \n    // Movable inner tube\n    translate([0, 0, -mouthpiece_length - slide_length + 5])\n        difference() {\n            cylinder(h = slide_length - 2, d = body_diameter + 1);\n            translate([0, 0, -1])\n                cylinder(h = slide_length, d = body_diameter - wall_thickness*2);\n        }\n    \n    // Slide braces\n    for(i = [0:1]) {\n        translate([body_diameter/2 + 3, 0, -mouthpiece_length - slide_length/2 + i*10])\n            rotate([90, 0, 0])\n                cylinder(h = 6, d = 4);\n    }\n}\n\n// Finger holes\nmodule finger_holes() {\n    for(i = [0:5]) {\n        rotate([0, 0, i*30 - 75])\n            translate([body_diameter/2, 0, overall_length - mouthpiece_length - slide_length - 15 - i*8])\n                rotate([90, 0, 0])\n                    cylinder(h = wall_thickness + 2, d = 3, $fn = 16);\n    }\n}\n\n// Thumb rest\nmodule thumb_rest() {\n    translate([body_diameter/2 + 2, 0, overall_length - mouthpiece_length - slide_length - 40])\n        cube([8, 3, 12], center = true);\n}\n\n// Assemble the instrument\nunion() {\n    body();\n    bell();\n    mouthpiece();\n    slide();\n    finger_holes();\n    thumb_rest();\n}",
    "renders": true
  },
  {
    "musical_instrument": "keyedbugle",
    "openscad_code": "// Keyed bugle for 3D printing – realistic style, medium complexity\n// Overall length ≈ 95 mm, wall thickness ≈ 1.5 mm\n\n$fn = 36;  // smooth curves\n\n// ---------- Modules ----------\n\nmodule tube(od = 10, len = 20, wall = 1.5) {\n    difference() {\n        cylinder(h = len, d = od, center = true);\n        translate([0, 0, -len/2-0.1])\n            cylinder(h = len+0.2, d = od-2*wall, center = false);\n    }\n}\n\nmodule mouthpiece() {\n    union() {\n        // cup\n        translate([0, 0, -4])\n            cylinder(h = 8, d1 = 8, d2 = 6, center = true);\n        // stem\n        translate([0, 0, -10])\n            cylinder(h = 10, d = 4, center = true);\n    }\n}\n\nmodule key(pad_d = 6, lever_l = 10, axle_d = 2) {\n    // axle\n    rotate([90, 0, 0])\n        cylinder(h = 5, d = axle_d, center = true);\n    // pad cup\n    translate([0, 0, -lever_l/2])\n        rotate([90, 0, 0])\n            cylinder(h = 2, d = pad_d+2, center = true);\n    // lever\n    translate([0, -lever_l/2, 0])\n        cube([2, lever_l, 2], center = true);\n    // touch piece\n    translate([0, -lever_l, 0])\n        cube([6, 4, 2], center = true);\n}\n\nmodule ring(d = 12, thick = 2) {\n    difference() {\n        cylinder(h = thick, d = d+4, center = true);\n        cylinder(h = thick+0.2, d = d, center = true);\n    }\n}\n\n// ---------- Build the bugle ----------\n\n// Mouthpiece connected to leadpipe\ntranslate([0, 0, 5])\n    mouthpiece();\n\n// Main coil – three quarter-circles\ncoil_r = 30;\nwall = 1.5;\n\n// First quarter\ntranslate([coil_r, 0, 0])\n    rotate([0, 0, 0])\n        tube(od = 10, len = coil_r*PI/2, wall = wall);\n\n// Second quarter (vertical)\ntranslate([coil_r, coil_r, 0])\n    rotate([90, 0, 0])\n        tube(od = 10, len = coil_r*PI/2, wall = wall);\n\n// Third quarter (horizontal, back)\ntranslate([0, coil_r, coil_r])\n    rotate([0, 90, 0])\n        tube(od = 10, len = coil_r*PI/2, wall = wall);\n\n// Bell flare\nbell_l = 25;\ntranslate([0, coil_r, coil_r+bell_l/2])\n    difference() {\n        cylinder(h = bell_l, d1 = 10, d2 = 24, center = true);\n        cylinder(h = bell_l+0.2, d1 = 10-2*wall, d2 = 24-2*wall, center = true);\n    }\n\n// Five tone-hole rings along the first quarter\nfor (i = [1:5]) {\n    angle = i * 15;\n    x = coil_r + cos(angle) * coil_r;\n    y = sin(angle) * coil_r;\n    translate([x, y, 0])\n        rotate([0, 0, angle])\n            ring(d = 10, thick = 2);\n}\n\n// Five keys mounted on the rings\nfor (i = [1:5]) {\n    angle = i * 15;\n    x = coil_r + cos(angle) * coil_r;\n    y = sin(angle) * coil_r;\n    translate([x, y-2, 3])\n        rotate([0, 0, angle-90])\n            key(pad_d = 6, lever_l = 12, axle_d = 2);\n}\n\n// Small finger hook on bell\ntranslate([0, coil_r-6, coil_r+15])\n    difference() {\n        cube([2, 8, 6], center = true);\n        translate([0, 0, 3])\n            cube([2.5, 9, 3], center = true);\n    }",
    "renders": true
  },
  {
    "musical_instrument": "posthorn",
    "openscad_code": "// Posthorn - realistic medium complexity\n// Horn body with coiled tube and bell flare\n\n$fn=32;\n\nmodule horn_body() {\n    // Main spiral tube\n    for (i=[0:15:360]) {\n        translate([cos(i)*20, sin(i)*20, i/5]) \n        rotate([0,0,i]) \n        cylinder(h=5, d1=12, d2=11);\n    }\n}\n\nmodule bell() {\n    // Bell flare at end\n    translate([0,20,72]) \n    rotate([90,0,0]) \n    cylinder(h=25, d1=15, d2=35);\n    \n    // Bell rim\n    translate([0,20,97]) \n    rotate([90,0,0]) \n    torus(17.5, 2);\n}\n\nmodule mouthpiece() {\n    // Mouthpiece at start\n    translate([20,0,0]) \n    rotate([0,0,0]) \n    cylinder(h=15, d1=8, d2=12);\n    \n    // Mouthpiece cup\n    translate([35,0,0]) \n    sphere(d=8);\n}\n\nmodule torus(outer, inner) {\n    rotate_extrude()\n    translate([outer,0,0])\n    circle(r=inner);\n}\n\nmodule braces() {\n    // Support braces between coils\n    for (i=[0:90:360]) {\n        angle = i + 45;\n        translate([cos(angle)*20, sin(angle)*20, angle/5]) \n        rotate([0,90-angle,0]) \n        cylinder(h=15, d=3);\n    }\n}\n\nmodule valves() {\n    // Valve casings\n    translate([-15,15,30]) \n    cylinder(h=20, d=10);\n    \n    translate([-15,10,30]) \n    cylinder(h=20, d=10);\n    \n    translate([-15,5,30]) \n    cylinder(h=20, d=10);\n    \n    // Valve buttons\n    for (i=[0:2]) {\n        translate([-15,15-i*5,52]) \n        cylinder(h=5, d=6);\n    }\n}\n\n// Main assembly\nunion() {\n    horn_body();\n    bell();\n    mouthpiece();\n    braces();\n    valves();\n    \n    // Carry ring\n    translate([0,0,50]) \n    torus(10, 2);\n    \n    // Water key\n    difference() {\n        translate([0,10,45]) \n        rotate([90,0,0]) \n        cylinder(h=10, d=5);\n        translate([0,10,50]) \n        cube([6,6,6], center=true);\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "huntinghorn",
    "openscad_code": "// Hunting Horn - Realistic Medium Complexity\n// 3D printable with 1.2 mm wall thickness\n\n$fn = 32;\n\n// Overall dimensions\nlength = 90;\nbell_dia = 35;\nmouth_dia = 8;\nbody_dia = 12;\nwall = 1.2;\n\n// Main module\nmodule hunting_horn() {\n    // Main curved body\n    rotate([0, 0, -30])\n    translate([0, 0, 10])\n    difference() {\n        curved_body();\n        \n        // Hollow out the body\n        scale([0.7, 0.7, 0.7])\n        translate([0, 0, -wall])\n        curved_body();\n    }\n    \n    // Bell flare\n    translate([0, length/2 + 15, 0])\n    rotate([90, 0, 0])\n    bell();\n    \n    // Mouthpiece\n    translate([0, -length/2 - 8, 0])\n    rotate([90, 0, 0])\n    mouthpiece();\n    \n    // Support rings\n    for(i = [-30:15:30]) {\n        translate([0, i, 0])\n        rotate([0, 90, 0])\n        support_ring();\n    }\n    \n    // Decorative bands\n    decorative_bands();\n}\n\n// Curved body construction\nmodule curved_body() {\n    hull() {\n        // Start cylinder\n        translate([0, -length/2, 0])\n        rotate([0, 90, 0])\n        cylinder(h = body_dia*2, d = body_dia*2, center = true);\n        \n        // Middle bulge\n        translate([0, 0, 5])\n        rotate([0, 90, 0])\n        cylinder(h = body_dia*2.5, d = body_dia*2.2, center = true);\n        \n        // End cylinder\n        translate([0, length/2, 0])\n        rotate([0, 90, 0])\n        cylinder(h = bell_dia*1.5, d = bell_dia*1.2, center = true);\n    }\n}\n\n// Bell flare module\nmodule bell() {\n    difference() {\n        // Outer bell\n        cylinder(h1 = bell_dia*0.8, h2 = bell_dia*1.2, r1 = bell_dia/2, r2 = bell_dia/2 + 8);\n        \n        // Inner bell\n        translate([0, 0, -1])\n        cylinder(h1 = bell_dia*0.8 + 2, h2 = bell_dia*1.2 + 2, \n                r1 = bell_dia/2 - wall, r2 = bell_dia/2 + 8 - wall);\n    }\n    \n    // Bell rim\n    translate([0, 0, bell_dia*1.2])\n    difference() {\n        cylinder(h = wall*2, r1 = bell_dia/2 + 8, r2 = bell_dia/2 + 8.5);\n        cylinder(h = wall*2.1, r1 = bell_dia/2 + 7, r2 = bell_dia/2 + 7.5);\n    }\n}\n\n// Mouthpiece module\nmodule mouthpiece() {\n    difference() {\n        // Outer mouthpiece\n        union() {\n            cylinder(h = 10, r1 = mouth_dia/2 + wall, r2 = mouth_dia/2 + wall*1.5);\n            translate([0, 0, 8])\n            sphere(d = mouth_dia + wall*3);\n        }\n        \n        // Inner bore\n        union() {\n            cylinder(h = 15, r = mouth_dia/2);\n            translate([0, 0, 8])\n            sphere(d = mouth_dia);\n        }\n    }\n}\n\n// Support rings\nmodule support_ring() {\n    difference() {\n        cylinder(h = body_dia*2.4, r = body_dia*1.15);\n        cylinder(h = body_dia*2.5, r = body_dia*1.05);\n    }\n}\n\n// Decorative bands\nmodule decorative_bands() {\n    // Bell band\n    translate([0, length/2 + 5, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 3, r1 = bell_dia/2 + 6, r2 = bell_dia/2 + 6.5);\n    \n    // Mouthpiece band\n    translate([0, -length/2 - 2, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 2, r1 = mouth_dia/2 + wall*1.5, r2 = mouth_dia/2 + wall*2);\n    \n    // Center decorative ring\n    translate([0, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = body_dia*2.6, r = body_dia*1.25);\n        cylinder(h = body_dia*2.7, r = body_dia*1.15);\n    }\n}\n\n// Render the horn\nhunting_horn();",
    "renders": true
  },
  {
    "musical_instrument": "frenchhorn",
    "openscad_code": "// French Horn - Realistic Medium Complexity\n// Designed for 3D printing - 80mm height\n\n$fn = 32;\n\n// Main parameters\nbody_radius = 15;\nbody_height = 30;\nbell_length = 25;\nbell_flare = 30;\ntubing_diameter = 4;\nwall_thickness = 1.5;\n\nmodule horn_body() {\n    difference() {\n        // Main body tube\n        cylinder(h=body_height, r=body_radius, center=true);\n        \n        // Hollow center\n        translate([0,0,-body_height/2-1])\n            cylinder(h=body_height+2, r=body_radius-wall_thickness);\n    }\n}\n\nmodule bell() {\n    difference() {\n        // Bell flare\n        translate([0,0,body_height/2-5])\n            cylinder(h=bell_length, r1=body_radius, r2=bell_flare/2);\n        \n        // Bell hollow\n        translate([0,0,body_height/2-6])\n            cylinder(h=bell_length+2, \n                    r1=body_radius-wall_thickness, \n                    r2=bell_flare/2-wall_thickness);\n    }\n}\n\nmodule mouthpiece() {\n    // Lead pipe\n    translate([body_radius-2, 0, -body_height/2])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=15, r=tubing_diameter/2);\n            cylinder(h=15, r=tubing_diameter/2-wall_thickness);\n        }\n    \n    // Mouthpiece cup\n    translate([body_radius+12, 0, -body_height/2])\n        rotate([0, 90, 0])\n        difference() {\n            sphere(d=tubing_diameter);\n            sphere(d=tubing_diameter-wall_thickness);\n        }\n}\n\nmodule valve_section() {\n    // Valve casings\n    for(i=[-1:1]) {\n        translate([0, i*8, 5])\n            difference() {\n                cylinder(h=12, r=3);\n                cylinder(h=12, r=3-wall_thickness);\n            }\n    }\n    \n    // Valve tubing loops\n    for(i=[-1,1]) {\n        rotate([0, 0, i*30])\n        translate([body_radius-5, i*10, 0])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=10, r=tubing_diameter/2);\n                cylinder(h=10, r=tubing_diameter/2-wall_thickness);\n            }\n    }\n}\n\nmodule tuning_slide() {\n    // Main slide\n    translate([-body_radius+2, 0, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=20, r=tubing_diameter/2);\n            cylinder(h=20, r=tubing_diameter/2-wall_thickness);\n        }\n    \n    // Slide brace\n    translate([-body_radius+10, -3, 0])\n        cube([2, 6, tubing_diameter]);\n}\n\nmodule finger_hook() {\n    // Hook base\n    translate([body_radius-wall_thickness, 0, 10])\n        difference() {\n            sphere(r=2);\n            sphere(r=2-wall_thickness);\n        }\n    \n    // Hook arm\n    translate([body_radius-wall_thickness, -1, 10])\n        rotate([0, 30, 0])\n        cube([0.5, 2, 8]);\n}\n\n// Assembly\nunion() {\n    horn_body();\n    bell();\n    mouthpiece();\n    valve_section();\n    tuning_slide();\n    finger_hook();\n}",
    "renders": true
  },
  {
    "musical_instrument": "wagnerhorn",
    "openscad_code": "// Wagner Horn - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n// Overall dimensions\nhorn_length = 85;\nbell_diameter = 40;\nmouthpiece_diameter = 8;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main horn body module\nmodule horn_body() {\n    // Leadpipe\n    translate([0, 0, 0]) {\n        difference() {\n            cylinder(h=20, d1=12, d2=10, $fn=32);\n            cylinder(h=20, d1=12-wall*2, d2=10-wall*2, $fn=32);\n        }\n    }\n    \n    // Main tube\n    translate([0, 0, 20]) {\n        difference() {\n            rotate([0, 10, 0]) cylinder(h=25, d=10, $fn=32);\n            rotate([0, 10, 0]) cylinder(h=25, d=10-wall*2, $fn=32);\n        }\n    }\n    \n    // First valve section\n    translate([0, 0, 45]) {\n        difference() {\n            rotate([0, 25, 0]) cylinder(h=20, d=10, $fn=32);\n            rotate([0, 25, 0]) cylinder(h=20, d=10-wall*2, $fn=32);\n        }\n    }\n    \n    // Second loop\n    translate([0, 0, 65]) {\n        difference() {\n            rotate([0, 45, 0]) cylinder(h=15, d=10, $fn=32);\n            rotate([0, 45, 0]) cylinder(h=15, d=10-wall*2, $fn=32);\n        }\n    }\n}\n\n// Bell module\nmodule bell() {\n    translate([0, 0, 80]) {\n        rotate([0, 60, 0]) {\n            difference() {\n                cylinder(h=25, d1=10, d2=bell_diameter, $fn=64);\n                cylinder(h=25, d1=10-wall*2, d2=bell_diameter-wall*2, $fn=64);\n            }\n        }\n    }\n}\n\n// Valve block\nmodule valve_block() {\n    // Main valve casing\n    translate([0, 0, 35]) {\n        difference() {\n            cylinder(h=20, d=20, $fn=32);\n            cylinder(h=20, d=20-wall*2, $fn=32);\n        }\n    }\n    \n    // Three valve pistons\n    for(i = [-1, 0, 1]) {\n        translate([i * 6, 0, 35]) {\n            difference() {\n                cylinder(h=25, d=5, $fn=16);\n                cylinder(h=25, d=5-wall*2, $fn=16);\n            }\n        }\n    }\n}\n\n// Bracing\nmodule bracing() {\n    // Main brace\n    translate([0, 0, 50]) {\n        difference() {\n            cube([30, 5, wall], center=true);\n            cube([30-wall*2, 5-wall*2, wall], center=true);\n        }\n    }\n    \n    // Upper brace\n    translate([0, 0, 60]) {\n        rotate([0, 0, 45]) {\n            difference() {\n                cube([20, 4, wall], center=true);\n                cube([20-wall*2, 4-wall*2, wall], center=true);\n            }\n        }\n    }\n}\n\n// Water key\nmodule water_key() {\n    translate([0, 0, 25]) {\n        difference() {\n            sphere(d=6, $fn=16);\n            sphere(d=6-wall*2, $fn=16);\n        }\n    }\n}\n\n// Mouthpiece\nmodule mouthpiece() {\n    translate([-10, 0, 0]) {\n        rotate([0, -90, 0]) {\n            difference() {\n                cylinder(h=15, d1=mouthpiece_diameter, d2=8, $fn=32);\n                cylinder(h=15, d1=mouthpiece_diameter-wall*2, d2=8-wall*2, $fn=32);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    horn_body();\n    bell();\n    valve_block();\n    bracing();\n    water_key();\n    mouthpiece();\n}",
    "renders": true
  },
  {
    "musical_instrument": "mellophone",
    "openscad_code": "// Mellophone - Realistic Medium Complexity\n// Basic dimensions for 3D printing (scaled down)\n$fn=32;\n\n// Overall scaling factor\nscale_factor = 0.4;\n\n// Main parameters\nbell_diameter = 60 * scale_factor;\nbell_length = 40 * scale_factor;\nbody_length = 120 * scale_factor;\nbody_diameter = 20 * scale_factor;\nleadpipe_length = 35 * scale_factor;\nleadpipe_diameter = 8 * scale_factor;\nvalve_diameter = 12 * scale_factor;\nvalve_height = 15 * scale_factor;\nmouthpiece_length = 15 * scale_factor;\nmouthpiece_diameter = 6 * scale_factor;\n\n// Wall thickness for 3D printing\nwall = 1.5 * scale_factor;\n\n// Main bell assembly\nmodule bell() {\n    // Bell flare\n    hull() {\n        translate([0, 0, bell_length])\n            cylinder(h=wall*2, d1=bell_diameter+wall*2, d2=bell_diameter+wall*2);\n        translate([0, 0, 0])\n            cylinder(h=bell_length, d1=body_diameter, d2=bell_diameter);\n    }\n    \n    // Bell rim\n    difference() {\n        translate([0, 0, bell_length])\n            cylinder(h=wall*3, d=bell_diameter+wall*4);\n        translate([0, 0, -wall])\n            cylinder(h=wall*5, d=bell_diameter);\n    }\n}\n\n// Main body tube\nmodule body_tube() {\n    hull() {\n        translate([0, 0, -body_length])\n            cylinder(h=body_length, d=body_diameter);\n        translate([0, 0, -body_length-30*scale_factor])\n            cylinder(h=30*scale_factor, d=body_diameter*0.8);\n    }\n}\n\n// Valve casing\nmodule valve_casing() {\n    for(i=[-1:1]) {\n        translate([i * valve_diameter * 1.2, 0, -body_length/2])\n            cylinder(h=valve_height, d=valve_diameter+wall*2);\n    }\n}\n\n// Valve pistons\nmodule valves() {\n    for(i=[-1:1]) {\n        translate([i * valve_diameter * 1.2, 0, -body_length/2 + valve_height])\n            cylinder(h=valve_height*0.8, d=valve_diameter);\n    }\n}\n\n// Leadpipe\nmodule leadpipe() {\n    rotate([0, 25, 0])\n        translate([-leadpipe_length, 0, -body_length/2])\n            cylinder(h=leadpipe_length, d=leadpipe_diameter+wall*2);\n}\n\n// Mouthpiece receiver\nmodule mouthpiece_receiver() {\n    translate([-leadpipe_length-leadpipe_diameter, 0, -body_length/2 + leadpipe_diameter/2])\n        rotate([0, 90, 0])\n            cylinder(h=leadpipe_diameter*2, d=leadpipe_diameter+wall*2);\n}\n\n// Tuning slides\nmodule tuning_slides() {\n    // Main tuning slide\n    translate([0, 0, -body_length-25*scale_factor])\n        rotate([90, 0, 0])\n            cylinder(h=20*scale_factor, d=body_diameter*0.6+wall*2);\n    \n    // Valve slides\n    for(i=[-1, 1]) {\n        translate([i * valve_diameter * 2, 0, -body_length/2 + valve_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=30*scale_factor, d=body_diameter*0.5+wall*2);\n    }\n}\n\n// Water keys\nmodule water_keys() {\n    translate([0, body_diameter/2+wall, -body_length-10*scale_factor])\n        cube([8*scale_factor, 2*scale_factor, 4*scale_factor]);\n}\n\n// Lyre holder\nmodule lyre_holder() {\n    translate([0, body_diameter/2+wall, -body_length/3])\n        rotate([0, 90, 0])\n            cylinder(h=8*scale_factor, d=4*scale_factor);\n}\n\n// Finger ring\nmodule finger_ring() {\n    translate([valve_diameter * 1.2, 0, -body_length/2 + valve_height*1.5])\n        rotate([0, 90, 0])\n            torus(3*scale_factor, 1*scale_factor);\n}\n\nmodule torus(major, minor) {\n    rotate_extrude()\n        translate([major, 0, 0])\n            circle(r=minor);\n}\n\n// Mouthpiece\nmodule mouthpiece() {\n    translate([-leadpipe_length-leadpipe_diameter*2, 0, -body_length/2 + leadpipe_diameter/2])\n        rotate([0, 90, 0])\n            union() {\n                cylinder(h=mouthpiece_length, d=mouthpiece_diameter+wall*2);\n                translate([0, 0, mouthpiece_length])\n                    cylinder(h=mouthpiece_length/2, d1=mouthpiece_diameter+wall*2, d2=mouthpiece_diameter*1.5+wall*2);\n            }\n}\n\n// Assembly\nunion() {\n    // Main body\n    difference() {\n        union() {\n            bell();\n            body_tube();\n            valve_casing();\n            leadpipe();\n            mouthpiece_receiver();\n            tuning_slides();\n        }\n        \n        // Hollow out tubes\n        translate([0, 0, -wall])\n            cylinder(h=bell_length+body_length+wall, d=body_diameter-wall*2);\n        \n        translate([0, 0, bell_length-wall])\n            cylinder(h=wall*2, d1=bell_diameter-wall*2, d2=body_diameter-wall*2);\n        \n        rotate([0, 25, 0])\n            translate([-leadpipe_length-wall, 0, -body_length/2])\n                cylinder(h=leadpipe_length+wall*2, d=leadpipe_diameter);\n        \n        translate([0, 0, -body_length-25*scale_factor-wall])\n            rotate([90, 0, 0])\n                cylinder(h=20*scale_factor+wall*2, d=body_diameter*0.6);\n    }\n    \n    // External details\n    valves();\n    water_keys();\n    lyre_holder();\n    finger_ring();\n    mouthpiece();\n}",
    "renders": true
  },
  {
    "musical_instrument": "altohorn",
    "openscad_code": "// Altohorn - medium complexity realistic style\n// Total length ~80 mm, designed for FDM printing (no steep overhangs)\n\n$fn = 36;  // smooth curves\n\nmodule altohorn() {\n    // Bell\n    difference() {\n        cylinder(h = 20, d1 = 32, d2 = 28);\n        translate([0,0,-0.5]) cylinder(h = 21, d1 = 30, d2 = 26);\n    }\n\n    // Leadpipe\n    translate([0,0,20])\n    rotate([0,15,0])\n    cylinder(h = 30, d = 5);\n\n    // Main tuning slide (simplified as cylinder block)\n    translate([0,0,48])\n    rotate([0,15,0])\n    cylinder(h = 12, d = 8);\n\n    // Valve section\n    translate([0,-8,60])\n    rotate([90,0,0])\n    union() {\n        // Valve casing\n        cylinder(h = 18, d = 12);\n        \n        // Three valve pistons\n        for(i=[-1,0,1])\n            translate([i*5,0,0])\n            cylinder(h = 22, d = 4);\n    }\n\n    // First valve tubing\n    translate([0,-13,60])\n    rotate([90,0,0])\n    cylinder(h = 25, d = 4);\n\n    // Second valve tubing\n    translate([0,-8,60])\n    rotate([90,0,0])\n    cylinder(h = 20, d = 4);\n\n    // Third valve tubing\n    translate([0,-3,60])\n    rotate([90,0,0])\n    cylinder(h = 30, d = 4);\n\n    // Mouthpiece\n    translate([0,0,50])\n    rotate([0,15,0])\n    union() {\n        cylinder(h = 5, d = 5);\n        translate([0,0,5])\n        cylinder(h = 8, d1 = 5, d2 = 2);\n    }\n\n    // Finger hook\n    translate([0,-8,78])\n    rotate([90,0,0])\n    difference() {\n        cylinder(h = 10, d = 3);\n        translate([0,-1.5,-0.5])\n        cube([3,3,11]);\n    }\n\n    // Water key (simplified)\n    translate([0,-13,50])\n    rotate([90,0,0])\n    union() {\n        cylinder(h = 6, d = 2);\n        translate([0,-3,0])\n        cube([2,3,2]);\n    }\n\n    // Main loop tubing\n    for(a=[0:30:330])\n        rotate([0,0,a])\n        translate([0,0,50])\n        rotate([0,15,0])\n        cylinder(h = 10, d = 4);\n}\n\n// Render\naltohorn();",
    "renders": true
  },
  {
    "musical_instrument": "baritonehorn",
    "openscad_code": "// Baritone Horn - Realistic Style, Medium Complexity\n// Approximate length: 85 mm, suitable for 3D printing\n\n$fn = 30;  // Smooth curves\n\n// Main body parameters\nbody_len = 45;\nbody_dia = 20;\nbell_dia = 30;\nbell_len = 18;\nmouthpipe_len = 22;\nvalve_h = 12;\nvalve_dia = 6;\n\nmodule baritone_horn() {\n    union() {\n        // Bell flare (truncated cone)\n        translate([body_len + bell_len/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h1 = bell_dia, h2 = body_dia, h = bell_len);\n\n        // Main tubing\n        rotate([0, 90, 0])\n            cylinder(h = body_len, d = body_dia);\n\n        // Mouthpipe - angled leadpipe\n        translate([-mouthpipe_len/2, 0, 0])\n            rotate([0, 90, -10])\n                cylinder(h = mouthpipe_len, d1 = 8, d2 = body_dia);\n\n        // Valve block\n        translate([body_len/2, 0, 0])\n            valve_block();\n\n        // Tuning slide loop\n        translate([body_len*0.3, 0, 0])\n            rotate([0, 90, 0])\n                tuning_slide();\n\n        // Water key (simple lever)\n        translate([body_len*0.8, body_dia/2 - 1, 0])\n            rotate([0, 0, 45])\n                water_key();\n    }\n}\n\nmodule valve_block() {\n    // Valve casing\n    cylinder(h = valve_h, d = valve_dia + 4);\n\n    // Three valves\n    for (i = [0:2]) {\n        translate([0, (i-1)*7, 0])\n            cylinder(h = valve_h + 2, d = valve_dia);\n    }\n\n    // Valve tubing\n    for (i = [0:2]) {\n        translate([0, (i-1)*7, valve_h/2])\n            rotate([0, 90, 0])\n                cylinder(h = 10, d = 4);\n    }\n}\n\nmodule tuning_slide() {\n    difference() {\n        // Main slide loop\n        union() {\n            // U-shaped slide\n            translate([0, 0, 0])\n                cylinder(h = 15, d = 4);\n            translate([0, 15, 0])\n                cylinder(h = 15, d = 4);\n            translate([0, 7.5, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 15, d = 4);\n        }\n        \n        // Remove inner opening\n        cylinder(h = 16, d = 3);\n    }\n}\n\nmodule water_key() {\n    // Simple water key lever\n    union() {\n        cube([4, 1, 2]);\n        translate([2, 0.5, 1])\n            sphere(d = 1.5);\n    }\n}\n\n// Render the horn\nbaritone_horn();",
    "renders": true
  },
  {
    "musical_instrument": "tenorhorn",
    "openscad_code": "// Tenorhorn in realistic style, medium complexity\n// Approximate size: 100mm length, 40mm height\n\n// Main parameters\n$fn = 32;\nbody_radius = 18;\nbody_length = 80;\nbell_radius = 25;\nbell_length = 25;\nvalve_radius = 4;\nvalve_height = 15;\nmouthpiece_length = 15;\nmouthpiece_radius = 3;\n\n// Main tube assembly\nmodule main_tube() {\n    // Main cylindrical body\n    cylinder(h=body_length, r1=body_radius, r2=body_radius*0.9);\n    \n    // Bell flare\n    translate([body_length, 0, 0])\n        cylinder(h=bell_length, r1=body_radius*0.9, r2=bell_radius);\n    \n    // Leadpipe\n    translate([-mouthpiece_length, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=mouthpiece_length, r1=mouthpiece_radius, r2=body_radius*0.5);\n}\n\n// Valve block\nmodule valve_block() {\n    // Valve casing\n    translate([body_length*0.4, body_radius+5, 0])\n        rotate([90, 0, 0])\n        cylinder(h=valve_height*3, r=valve_radius+2);\n    \n    // Three valves\n    for(i = [0:2]) {\n        translate([body_length*0.4, body_radius+5, -valve_height + i*valve_height])\n            rotate([90, 0, 0])\n            cylinder(h=valve_height-1, r=valve_radius);\n    }\n    \n    // Valve tubing connections\n    for(i = [0:2]) {\n        translate([body_length*0.4 + (i-1)*8, body_radius+5+valve_height*1.5, 0])\n            rotate([0, 90, 90])\n            cylinder(h=12, r=body_radius*0.4);\n    }\n}\n\n// Water keys\nmodule water_keys() {\n    // Main water key\n    translate([body_length*0.7, 0, -body_radius-2])\n        difference() {\n            cube([8, 2, 5]);\n            translate([4, -1, 2.5])\n                sphere(r=1.5);\n        }\n    \n    // Secondary water key\n    translate([body_length*0.3, 0, body_radius+2])\n        difference() {\n            cube([6, 2, 4]);\n            translate([3, -1, 2])\n                sphere(r=1.2);\n        }\n}\n\n// Finger rings\nmodule finger_rings() {\n    // First valve ring\n    translate([body_length*0.4-5, body_radius+12, -valve_height])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=8, r1=3, r2=3);\n            cylinder(h=10, r1=2, r2=2);\n        }\n    \n    // Third valve ring\n    translate([body_length*0.4+5, body_radius+12, valve_height])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=8, r1=3, r2=3);\n            cylinder(h=10, r1=2, r2=2);\n        }\n}\n\n// Support braces\nmodule braces() {\n    // Bell brace\n    translate([body_length-15, body_radius*0.7, 0])\n        rotate([0, 0, 45])\n        cube([12, 2, 2]);\n    \n    // Valve brace\n    translate([body_length*0.4, body_radius*0.5, 0])\n        cube([15, 2, 2]);\n}\n\n// Assembly\nunion() {\n    main_tube();\n    valve_block();\n    water_keys();\n    finger_rings();\n    braces();\n}",
    "renders": true
  },
  {
    "musical_instrument": "mellophonium",
    "openscad_code": "// Mellophonium (medium complexity, realistic style)\n// Overall height ≈ 70 mm, 3D-print ready\n\n$fn = 36;  // smooth curves, still printable\n\n// ---------- PARAMETERS ----------\nbody_len = 50;\nbell_d   = 35;\nbell_len = 30;\nlead_len = 25;\nvalve_r  = 3.5;\nvalve_h  = 12;\nmouth_r  = 4;\nwall     = 1.2;\n\n// ---------- MAIN ASSEMBLY ----------\nunion() {\n    // Leadpipe\n    translate([0, 0, bell_len + body_len/2])\n        rotate([90, 0, 0])\n        cylinder(h = lead_len, r1 = mouth_r, r2 = valve_r, center = true);\n\n    // Main body tube (cylindrical)\n    difference() {\n        translate([0, 0, bell_len/2 + body_len/2])\n            cylinder(h = body_len, r = valve_r + wall, center = true);\n        translate([0, 0, bell_len/2 + body_len/2])\n            cylinder(h = body_len + 1, r = valve_r, center = true);\n    }\n\n    // Bell flare\n    difference() {\n        translate([0, 0, 0])\n            cylinder(h = bell_len, r1 = bell_d/2, r2 = valve_r + wall);\n        translate([0, 0, -0.5])\n            cylinder(h = bell_len + 1, r1 = bell_d/2 - wall, r2 = valve_r);\n    }\n\n    // Three piston valves\n    for(i = [-1, 0, 1])\n        translate([i * 8, 0, bell_len + body_len/2 - 5])\n            valve_assembly();\n}\n\n// ---------- MODULES ----------\nmodule valve_assembly() {\n    difference() {\n        // Valve casing\n        cylinder(h = valve_h, r = valve_r + wall + 1, center = true);\n        // Hole for valve stem\n        cylinder(h = valve_h + 1, r = valve_r + 0.5, center = true);\n    }\n    // Valve button on top\n    translate([0, 0, valve_h/2 + 1])\n        cylinder(h = 2, r = valve_r + 0.5);\n}\n\n// ---------- MOUTHPIECE ----------\n// Separate mouthpiece (prints flat, slides on)\ntranslate([0, 25, bell_len + body_len/2 + lead_len/2])\n    rotate([90, 0, 0])\n    difference() {\n        union() {\n            cylinder(h = 12, r1 = mouth_r + wall, r2 = mouth_r + wall);\n            translate([0, 0, 12])\n                cylinder(h = 5, r1 = mouth_r + wall, r2 = mouth_r + 2*wall);\n        }\n        cylinder(h = 20, r = mouth_r);\n    }",
    "renders": true
  },
  {
    "musical_instrument": "helicon",
    "openscad_code": "// Helicon - Medium complexity realistic style\n// Total length ~90mm, 3D-printable wall thickness 1.2mm\n\n// Parameters\ntube_d = 12;          // Tube outer diameter\nwall = 1.2;           // Wall thickness for printing\nbell_d = 32;          // Bell flare diameter\nbell_h = 25;          // Bell height\nlead_len = 28;        // Leadpipe length\nmain_coils = 4;       // Number of main coils\ncoil_sep = 14;        // Separation between coil centers\nvalve_d = 8;          // Valve casing diameter\nvalve_len = 18;       // Valve casing length\n\n// Main module\nmodule helicon() {\n    difference() {\n        union() {\n            // Leadpipe\n            rotate([90, 0, 0])\n                cylinder(h = lead_len, d = tube_d, $fn = 32);\n            \n            // Main coil stack\n            for (i = [0:main_coils-1]) {\n                translate([0, 0, -i*coil_sep])\n                    coil_ring();\n            }\n            \n            // Bell flare\n            translate([0, 0, -main_coils*coil_sep - bell_h/2])\n                cylinder(h1 = bell_h, h2 = 0, r1 = bell_d/2, r2 = tube_d/2, $fn = 64);\n            \n            // 3 piston valves\n            for (v = [0:2]) {\n                translate([15 + v*10, 15, -main_coils*coil_sep/2])\n                    rotate([0, 90, 0])\n                        cylinder(h = valve_len, d = valve_d, $fn = 24);\n            }\n            \n            // Valve tubing connections\n            translate([20, 15, -main_coils*coil_sep/2 + valve_len/2])\n                rotate([0, 90, 0])\n                    cylinder(h = 15, d = tube_d, $fn = 32);\n            translate([30, 15, -main_coils*coil_sep/2 + valve_len/2])\n                rotate([0, 90, 0])\n                    cylinder(h = 15, d = tube_d, $fn = 32);\n        }\n        \n        // Remove inner bore\n        union() {\n            // Leadpipe bore\n            rotate([90, 0, 0])\n                translate([0, 0, wall])\n                cylinder(h = lead_len - 2*wall, d = tube_d - 2*wall, $fn = 32);\n            \n            // Coil bores\n            for (i = [0:main_coils-1]) {\n                translate([0, 0, -i*coil_sep])\n                    coil_ring_bore();\n            }\n            \n            // Bell bore\n            translate([0, 0, -main_coils*coil_sep - bell_h/2])\n                cylinder(h1 = bell_h - wall, h2 = 0, r1 = bell_d/2 - wall, r2 = tube_d/2 - wall, $fn = 64);\n        }\n    }\n    \n    // Mouthpiece receiver\n    translate([0, lead_len, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r1 = tube_d/2, r2 = tube_d/2 - 1, $fn = 32);\n}\n\n// Single coil ring module\nmodule coil_ring() {\n    rotate_extrude(angle = 360, $fn = 64)\n        translate([tube_d*2.5, 0, 0])\n            circle(r = tube_d/2);\n}\n\n// Coil ring bore module\nmodule coil_ring_bore() {\n    rotate_extrude(angle = 360, $fn = 64)\n        translate([tube_d*2.5, 0, 0])\n            circle(r = tube_d/2 - wall);\n}\n\n// Render the model\nhelicon();",
    "renders": true
  },
  {
    "musical_instrument": "cimbasso",
    "openscad_code": "// Cimbasso in realistic medium style\n// Main body parameters\nbody_length = 80;\nbody_diameter = 18;\nbell_diameter = 35;\nbell_length = 25;\nmouthpiece_diameter = 6;\nmouthpiece_length = 12;\nvalve_diameter = 8;\nvalve_height = 15;\ntubing_thickness = 1.5;\n\n// Create the cimbasso\nmodule cimbasso() {\n    // Main tuning slides and body\n    union() {\n        // Main body tube\n        translate([0, 0, 0])\n            cylinder(h=body_length, d=body_diameter, $fn=32);\n        \n        // Bell flare\n        translate([0, 0, body_length])\n            cylinder(h=bell_length, d1=body_diameter, d2=bell_diameter, $fn=32);\n        \n        // Mouthpiece leadpipe\n        translate([0, 0, -mouthpiece_length])\n            cylinder(h=mouthpiece_length, d1=mouthpiece_diameter, d2=body_diameter, $fn=32);\n        \n        // First valve section\n        translate([body_diameter/2 + valve_diameter/2, 0, body_length * 0.3])\n            valve_assembly();\n        \n        // Second valve section\n        translate([0, body_diameter/2 + valve_diameter/2, body_length * 0.5])\n            rotate([0, 0, 90])\n            valve_assembly();\n        \n        // Third valve section\n        translate([-body_diameter/2 - valve_diameter/2, 0, body_length * 0.7])\n            rotate([0, 0, 180])\n            valve_assembly();\n        \n        // Tuning slide\n        translate([0, body_diameter/2 + tubing_thickness, body_length * 0.2])\n            tuning_slide();\n        \n        // Water key\n        translate([0, -body_diameter/2 - tubing_thickness, body_length * 0.15])\n            water_key();\n    }\n}\n\n// Valve assembly with casing and pistons\nmodule valve_assembly() {\n    // Valve casing\n    cylinder(h=valve_height, d=valve_diameter, $fn=16);\n    \n    // Valve tubing connections\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=valve_diameter/2, d1=body_diameter, d2=body_diameter, $fn=16);\n    \n    translate([0, 0, valve_height])\n        rotate([90, 0, 0])\n        cylinder(h=valve_diameter/2, d1=body_diameter, d2=body_diameter, $fn=16);\n    \n    // Valve button\n    translate([0, 0, valve_height + 2])\n        cylinder(h=3, d=5, $fn=16);\n}\n\n// Tuning slide assembly\nmodule tuning_slide() {\n    // Main slide tube\n    cylinder(h=12, d=body_diameter * 0.8, $fn=16);\n    \n    // Slide brace\n    translate([0, 5, 6])\n        cube([10, 2, 2], center=true);\n    \n    // Slide crook\n    translate([0, 8, 6])\n        rotate([90, 0, 0])\n        cylinder(h=8, d=body_diameter * 0.7, $fn=16);\n}\n\n// Water key assembly\nmodule water_key() {\n    // Key lever\n    translate([0, -3, 0])\n        cube([6, 1, 8], center=true);\n    \n    // Key pad\n    translate([0, -3.5, 0])\n        sphere(d=2, $fn=16);\n    \n    // Spring\n    translate([2, -3, 4])\n        cylinder(h=3, d=0.5, $fn=8);\n}\n\n// Create the cimbasso\ncimbasso();",
    "renders": true
  },
  {
    "musical_instrument": "suling",
    "openscad_code": "// Realistic suling (bamboo flute) - medium complexity\n// 3D printable with 1.5 mm wall thickness\n\n$fn = 48;\n\n// Overall dimensions (realistic bamboo flute size)\nflute_length = 85;\nflute_diameter = 12;\nwall = 1.5;\n\n// Mouthpiece parameters\nmouthpiece_length = 15;\nmouthpiece_diameter = 14;\nembouchure_width = 8;\nembouchure_height = 1.5;\n\n// Finger holes parameters\nnum_holes = 6;\nhole_spacing = 8;\nhole_diameter = 5;\nhole_start = 30;\n\n// Thumb hole\nthumb_hole_diameter = 4;\nthumb_hole_pos = 55;\n\nmodule main_body() {\n    // Hollow cylinder for main body\n    difference() {\n        cylinder(h = flute_length, d = flute_diameter, center = false);\n        translate([0, 0, wall]) \n            cylinder(h = flute_length - wall*2, d = flute_diameter - wall*2, center = false);\n    }\n}\n\nmodule mouthpiece() {\n    // Wider mouthpiece section\n    translate([0, 0, 0]) {\n        difference() {\n            cylinder(h = mouthpiece_length, d = mouthpiece_diameter, center = false);\n            translate([0, 0, wall])\n                cylinder(h = mouthpiece_length, d = mouthpiece_diameter - wall*2, center = false);\n        }\n        \n        // Embouchure hole (rectangular mouth opening)\n        translate([-embouchure_width/2, -mouthpiece_diameter/2 + wall, mouthpiece_length - 2]) {\n            rotate([0, 0, 0])\n                cube([embouchure_width, wall*2, embouchure_height]);\n        }\n    }\n}\n\nmodule finger_holes() {\n    // Six finger holes on top\n    for(i = [0 : num_holes-1]) {\n        translate([0, 0, hole_start + i * hole_spacing]) {\n            rotate([90, 0, 0])\n                cylinder(h = flute_diameter, d = hole_diameter, center = true);\n        }\n    }\n    \n    // Thumb hole on bottom\n    translate([0, 0, thumb_hole_pos]) {\n        rotate([90, 0, 0])\n            cylinder(h = flute_diameter, d = thumb_hole_diameter, center = true);\n    }\n}\n\nmodule end_details() {\n    // Rounded end cap\n    translate([0, 0, flute_length]) {\n        difference() {\n            sphere(d = flute_diameter);\n            translate([0, 0, -flute_diameter/2])\n                cube([flute_diameter, flute_diameter, flute_diameter], center = true);\n        }\n    }\n    \n    // Simple bamboo node rings\n    for(i = [0 : 2]) {\n        translate([0, 0, 20 + i * 25]) {\n            difference() {\n                cylinder(h = 2, d = flute_diameter + 1, center = false);\n                cylinder(h = 2, d = flute_diameter - 1, center = false);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    mouthpiece();\n    end_details();\n    difference() {\n        union();  // Placeholder for future additions\n        finger_holes();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "saron",
    "openscad_code": "// Saron (Javanese metallophone) - Realistic style, medium complexity\n\n// Overall dimensions (mm)\nbase_length = 100;\nbase_width = 60;\nbase_height = 8;\n\n// Keys parameters\nnum_keys = 7;\nkey_thickness = 3;\nkey_gap = 2;\nkey_slope = 5;\n\n// Resonator box\nmodule resonator_box() {\n    difference() {\n        // Main box\n        cube([base_length, base_width, base_height]);\n        \n        // Hollow interior\n        translate([3, 3, -1])\n            cube([base_length-6, base_width-6, base_height-1]);\n        \n        // Sound holes (front)\n        for(x = [20:20:80]) {\n            translate([x, 2, base_height-1])\n                cylinder(h=2, d=4, $fn=16);\n        }\n        \n        // Sound holes (back)\n        for(x = [20:20:80]) {\n            translate([x, base_width-2, base_height-1])\n                cylinder(h=2, d=4, $fn=16);\n        }\n    }\n}\n\n// Individual key with mounting\nmodule key(length, width, note_index) {\n    // Key body\n    difference() {\n        // Tapered key\n        translate([0, 0, key_thickness/2])\n            cube([length, width, key_thickness], center=true);\n        \n        // Taper ends\n        translate([length/2 - 2, 0, key_thickness/2])\n            rotate([0, 0, key_slope])\n                cube([5, width+1, key_thickness+1]);\n        \n        translate([-length/2 + 2, 0, key_thickness/2])\n            rotate([0, 0, -key_slope])\n                cube([5, width+1, key_thickness+1]);\n        \n        // String grooves\n        translate([length/4, 0, key_thickness/2])\n            cube([0.5, width+1, key_thickness+1], center=true);\n        \n        translate([-length/4, 0, key_thickness/2])\n            cube([0.5, width+1, key_thickness+1], center=true);\n    }\n    \n    // Mounting pins\n    translate([length/4, 0, -key_thickness/2 - 1])\n        cylinder(h=2, d=1.5, $fn=8);\n    \n    translate([-length/4, 0, -key_thickness/2 - 1])\n        cylinder(h=2, d=1.5, $fn=8);\n}\n\n// Key support rails\nmodule support_rails() {\n    // Front rail\n    translate([base_length/2, base_width/4, base_height + 2])\n        cube([base_length-10, 4, 4], center=true);\n    \n    // Back rail\n    translate([base_length/2, 3*base_width/4, base_height + 2])\n        cube([base_length-10, 4, 4], center=true);\n}\n\n// Main assembly\nmodule saron() {\n    // Resonator box\n    resonator_box();\n    \n    // Support rails\n    support_rails();\n    \n    // Keys - progressively shorter\n    key_lengths = [85, 80, 75, 70, 65, 60, 55];\n    key_widths = [12, 11, 10, 9, 8, 7, 6];\n    \n    for(i = [0:num_keys-1]) {\n        translate([base_length/2 - 10 - i*12, base_width/2, base_height + 4 + key_thickness/2])\n            rotate([0, 0, -2])\n                key(key_lengths[i], key_widths[i], i);\n    }\n    \n    // Decorative end caps\n    translate([5, base_width/2, base_height/2])\n        cylinder(h=base_height, d=8, $fn=20);\n    \n    translate([base_length-5, base_width/2, base_height/2])\n        cylinder(h=base_height, d=8, $fn=20);\n}\n\n// Render the saron\nsaron();",
    "renders": true
  },
  {
    "musical_instrument": "kenong",
    "openscad_code": "// OpenSCAD Kenong – realistic, medium complexity, 3D-printable\n// Overall height ≈ 90 mm, max diameter ≈ 60 mm\n\n$fn = 72;          // moderate facet count for printability\nwall = 1.6;        // wall thickness for FDM printing\nbase_d = 56;       // widest rim diameter\nbody_h = 48;       // height of the cup body\nneck_d = 28;       // neck diameter under the rim\nfoot_d = 35;       // foot diameter\nfoot_h = 10;\n\n/* ---------- main assembly ---------- */\nunion() {\n    kenong_body();\n    suspension_ears();\n}\n\n/* ---------- modules ---------- */\nmodule kenong_body() {\n    difference() {\n        union() {\n            // outer shape: cup profile revolved\n            rotate_extrude()\n                kenong_profile();\n\n            // solid foot ring\n            translate([0, 0, -foot_h])\n                cylinder(d1 = foot_d, d2 = foot_d - 4, h = foot_h);\n        }\n\n        // hollow interior\n        translate([0, 0, wall])\n            scale([1, 1, 0.94])\n                rotate_extrude()\n                    offset(-wall)\n                        kenong_profile();\n    }\n}\n\nmodule suspension_ears() {\n    ear_w = 6;\n    ear_h = 7;\n    hole_d = 3.2;       // M3 screw\n    for (a = [0, 120, 240])\n        rotate([0, 0, a])\n            translate([base_d/2 + ear_w/2, 0, body_h*0.7])\n                rotate([90, 0, 0])\n                    difference() {\n                        cube([ear_w, ear_h, ear_w], center = true);\n                        cylinder(d = hole_d, h = ear_w + 1, center = true);\n                    }\n}\n\n/* 2D profile used by rotate_extrude */\nmodule kenong_profile() {\n    // points [ [x,z], ... ] counter-clockwise from bottom-left\n    pts = [\n        [foot_d/2 - 2, -foot_h],\n        [base_d/2, 0],\n        [base_d/2 - 6, body_h - 4],\n        [neck_d/2, body_h],\n        [neck_d/2 - wall, body_h - wall],\n        [base_d/2 - 6 - wall, body_h - wall - 4],\n        [base_d/2 - wall, wall],\n        [foot_d/2 - 2 - wall, -foot_h]\n    ];\n    polygon(pts);\n}",
    "renders": true
  },
  {
    "musical_instrument": "bonang",
    "openscad_code": "// Bonang Barung - Medium complexity realistic style\n// Central Javanese lower-octave bonang with 12 kettle gongs\n\n// Overall dimensions\nbase_width = 80;\nbase_depth = 60;\nbase_height = 15;\nkettle_diameter = 18;\nkettle_height = 12;\nkettle_wall = 2;\nstand_height = 25;\nstand_thickness = 3;\n\n// Module for a single kettle gong\nmodule kettle(note) {\n    difference() {\n        // Main kettle body\n        cylinder(h = kettle_height, d = kettle_diameter, $fn = 48);\n        \n        // Hollow interior\n        translate([0, 0, -0.1])\n            cylinder(h = kettle_height - kettle_wall, d = kettle_diameter - 2*kettle_wall, $fn = 48);\n        \n        // Central boss (knob)\n        translate([0, 0, kettle_height])\n            cylinder(h = 3, d = 6, $fn = 24);\n    }\n    \n    // Suspension holes\n    for (a = [45, 135, 225, 315]) {\n        rotate([0, 0, a])\n            translate([kettle_diameter/2 - 2, 0, kettle_height/2])\n                rotate([0, 90, 0])\n                    cylinder(h = 4, d = 1.5, $fn = 12);\n    }\n}\n\n// Module for the wooden stand frame\nmodule stand() {\n    // Base platform\n    difference() {\n        cube([base_width, base_depth, base_height], center = true);\n        \n        // Cutouts for weight reduction\n        translate([0, 0, -base_height/2 + 0.5])\n            cube([base_width - 10, base_depth - 10, base_height - 1], center = true);\n    }\n    \n    // Side supports\n    translate([base_width/2 - stand_thickness, 0, stand_height/2])\n        cube([stand_thickness, base_depth - 10, stand_height], center = true);\n    \n    translate([-base_width/2 + stand_thickness, 0, stand_height/2])\n        cube([stand_thickness, base_depth - 10, stand_height], center = true);\n    \n    // End supports\n    translate([0, base_depth/2 - stand_thickness, stand_height/2])\n        cube([base_width - 10, stand_thickness, stand_height], center = true);\n    \n    translate([0, -base_depth/2 + stand_thickness, stand_height/2])\n        cube([base_width - 10, stand_thickness, stand_height], center = true);\n}\n\n// Module for string suspension system\nmodule suspension_string(kettle_pos, support_pos) {\n    translate(kettle_pos)\n        cylinder(h = norm(kettle_pos - support_pos), d = 0.8, $fn = 8);\n}\n\n// Assemble the bonang\nmodule bonang() {\n    // Wooden stand\n    stand();\n    \n    // Position kettles in two rows\n    // Row 1 (6 larger kettles)\n    row1_y = 10;\n    row1_notes = [-30, -18, -6, 6, 18, 30];\n    \n    // Row 2 (6 smaller kettles)\n    row2_y = -10;\n    row2_notes = [-24, -12, 0, 12, 24, 36];\n    \n    // Generate kettles and suspension\n    for (i = [0:5]) {\n        // Row 1 kettles\n        kettle_pos1 = [row1_notes[i], row1_y, stand_height + kettle_height/2];\n        support_pos1 = [row1_notes[i], row1_y, stand_height];\n        \n        translate(kettle_pos1)\n            scale([1, 1, 0.9 + i*0.02])\n                kettle(i);\n        \n        // Row 2 kettles\n        kettle_pos2 = [row2_notes[i], row2_y, stand_height + kettle_height/2];\n        support_pos2 = [row2_notes[i], row2_y, stand_height];\n        \n        translate(kettle_pos2)\n            scale([0.95 - i*0.01, 0.95 - i*0.01, 0.85 + i*0.01])\n                kettle(i + 6);\n    }\n}\n\n// Render the complete bonang\nbonang();",
    "renders": true
  },
  {
    "musical_instrument": "ketuk",
    "openscad_code": "// Realistic Ketuk (Balinese Gamelan Bell) - Medium Complexity\n// Size: ~70mm height, 3D printable\n\n// Main module\nmodule ketuk() {\n    // Base parameters\n    base_dia = 50;\n    base_height = 8;\n    wall_thickness = 2;\n    \n    // Bell body parameters\n    bell_height = 35;\n    bell_top_dia = 25;\n    bell_bottom_dia = 40;\n    \n    // Handle parameters\n    handle_height = 25;\n    handle_dia = 8;\n    \n    // Decorative rings\n    ring_height = 2;\n    ring_spacing = 8;\n    \n    // Base with slight taper\n    difference() {\n        cylinder(h=base_height, d1=base_dia, d2=base_dia-2, $fn=64);\n        \n        // Hollow base\n        translate([0, 0, -0.1])\n        cylinder(h=base_height+0.2, d=base_dia-2*wall_thickness, $fn=64);\n        \n        // Sound hole\n        translate([0, 0, base_height-2])\n        cylinder(h=3, d=base_dia/3, $fn=32);\n    }\n    \n    // Bell body - curved profile\n    difference() {\n        union() {\n            // Main bell shape using stacked cylinders for curve\n            for(i=[0:4]) {\n                h = bell_height/5;\n                y = i*h;\n                d1 = bell_bottom_dia - (bell_bottom_dia-bell_top_dia)*i/5;\n                d2 = bell_bottom_dia - (bell_bottom_dia-bell_top_dia)*(i+1)/5;\n                translate([0, 0, base_height+y])\n                cylinder(h=h+0.2, d1=d1, d2=d2, $fn=64);\n            }\n            \n            // Decorative rings\n            for(i=[1:3]) {\n                translate([0, 0, base_height + i*ring_spacing])\n                cylinder(h=ring_height, d=bell_bottom_dia - (bell_bottom_dia-bell_top_dia)*i*ring_spacing/bell_height + 2, $fn=64);\n            }\n        }\n        \n        // Hollow interior\n        translate([0, 0, base_height])\n        cylinder(h=bell_height, d=bell_bottom_dia-2*wall_thickness, d2=bell_top_dia-2*wall_thickness, $fn=64);\n    }\n    \n    // Handle\n    translate([0, 0, base_height+bell_height])\n    difference() {\n        cylinder(h=handle_height, d=handle_dia, $fn=32);\n        \n        // Hollow handle\n        translate([0, 0, -0.1])\n        cylinder(h=handle_height+0.2, d=handle_dia-2*wall_thickness, $fn=32);\n    }\n    \n    // Handle knob\n    translate([0, 0, base_height+bell_height+handle_height])\n    difference() {\n        sphere(d=handle_dia+4, $fn=32);\n        cube([handle_dia+5, handle_dia+5, handle_dia+2], center=true);\n    }\n    \n    // Clapper attachment point\n    translate([0, 0, base_height + bell_height*0.7])\n    cylinder(h=3, d=4, $fn=16);\n    \n    // Small decorative beads around base\n    for(i=[0:11]) {\n        rotate([0, 0, i*30])\n        translate([base_dia/2-3, 0, base_height/2])\n        sphere(d=2, $fn=8);\n    }\n}\n\n// Render the ketuk\nketuk();",
    "renders": true
  },
  {
    "musical_instrument": "kempul",
    "openscad_code": "// Kempul - Javanese hanging gong\n// Medium complexity realistic style\n// Overall size: ~90mm wide x ~75mm tall\n\n// Gong thickness parameters\ngong_thick = 4;\nrim_thick = 6;\ncenter_thick = 2;\n\n// Main body\nmodule gong_body() {\n    difference() {\n        // Basic dome shape\n        union() {\n            // Outer dome\n            scale([1, 1, 0.4])\n            sphere(d=90, $fn=100);\n            \n            // Reinforcement ring at rim\n            translate([0, 0, -1])\n            cylinder(h=rim_thick, d1=92, d2=90, $fn=100);\n        }\n        \n        // Inner cavity\n        scale([1, 1, 0.38])\n        sphere(d=86, $fn=100);\n        \n        // Center hole\n        translate([0, 0, -5])\n        cylinder(h=20, d=8, $fn=50);\n    }\n}\n\n// Central raised boss\nmodule gong_boss() {\n    difference() {\n        union() {\n            // Main boss dome\n            scale([1, 1, 0.5])\n            translate([0, 0, 2])\n            sphere(d=24, $fn=50);\n            \n            // Tapered base\n            cylinder(h=3, d1=24, d2=20, $fn=50);\n        }\n        \n        // Threaded hole\n        translate([0, 0, -2])\n        cylinder(h=10, d=6, $fn=30);\n    }\n}\n\n// Concentric circles for traditional decoration\nmodule concentric_rings() {\n    difference() {\n        // Raised rings\n        for(i=[1:5]) {\n            rotate_extrude($fn=100)\n            translate([35 + i*3, 0, 0])\n            square([2, 1]);\n        }\n        \n        // Lowered rings between\n        for(i=[1:4]) {\n            rotate_extrude($fn=100)\n            translate([36.5 + i*3, 0, 0])\n            square([1, 0.5]);\n        }\n    }\n}\n\n// Hanging loop\nmodule hanging_loop() {\n    translate([0, 0, 38])\n    rotate([90, 0, 0])\n    difference() {\n        // Main loop\n        torus(major=10, minor=3, $fn=30);\n        \n        // Gap for cord\n        translate([0, -10, 0])\n        cube([20, 20, 6], center=true);\n    }\n}\n\n// Helper module for torus\nmodule torus(major, minor, $fn) {\n    rotate_extrude($fn=$fn)\n    translate([major, 0, 0])\n    circle(r=minor, $fn=30);\n}\n\n// Assembly\nmodule kempul() {\n    union() {\n        // Main gong body\n        gong_body();\n        \n        // Central boss\n        gong_boss();\n        \n        // Decorative rings\n        translate([0, 0, 1])\n        concentric_rings();\n        \n        // Hanging loop\n        hanging_loop();\n    }\n}\n\n// Render the kempul rotated for printing\nrotate([180, 0, 0])\nkempul();",
    "renders": true
  },
  {
    "musical_instrument": "gong",
    "openscad_code": "// Realistic 3D-printable Gong – Medium Complexity\n// Overall size ≈ 90 mm across, ready for FDM printing\n\n$fn = 64;               // Smooth curves\nwall = 1.6;             // 0.4 mm nozzle friendly wall\n\nmodule gong() {\n    // Central disc\n    difference() {\n        cylinder(h = 4, r = 40, center = true);\n        cylinder(h = 5, r = 38 - wall, center = true);  // Hollow back\n    }\n\n    // Raised rim\n    translate([0, 0, 2]) {\n        difference() {\n            cylinder(h = 2, r1 = 40, r2 = 38);\n            cylinder(h = 2.2, r1 = 38 - wall, r2 = 36 - wall);\n        }\n    }\n\n    // Radial grooves on front (decorative + print-friendly)\n    for (a = [0:30:330]) {\n        rotate([0, 0, a])\n            translate([0, 0, 2.1])\n                difference() {\n                    cube([1, 30, 0.4], center = true);\n                    translate([0, 15 + 0.5, 0])\n                        sphere(r = 0.8);\n                }\n    }\n\n    // Hanging loop\n    translate([0, 42, 4]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 8, r = 3, center = true);\n                cylinder(h = 9, r = 1.4, center = true);\n            }\n        }\n        // Reinforcement web\n        translate([0, 0, 4])\n            cube([wall * 2, 4, 4], center = true);\n    }\n\n    // Clapper (loose striker)\n    translate([0, -20, -12]) {\n        // Cord\n        cylinder(h = 25, r = 0.8);\n        // Bead\n        translate([0, 0, -14])\n            sphere(r = 4);\n    }\n}\n\n// Small chamfer helper for 3D-print adhesion\nmodule chamfer() {\n    translate([0, 0, -0.5])\n        cylinder(h = 1, r1 = 40.5, r2 = 39.5);\n}\n\n// Assemble gong with bottom chamfer\nunion() {\n    gong();\n    chamfer();\n}",
    "renders": true
  },
  {
    "musical_instrument": "tarogato",
    "openscad_code": "// Tarogato - Hungarian single-reed woodwind instrument\n// Medium complexity realistic style\n\n// Overall size: ~80mm length\n\n// Main body parameters\nbody_length = 75;\nbody_diameter = 12;\n\n// Bell parameters\nbell_length = 25;\nbell_diameter = 18;\n\n// Mouthpiece parameters\nmouthpiece_length = 15;\nmouthpiece_diameter = 8;\n\n// Key parameters\nkey_radius = 2;\nkey_height = 1.5;\n\n// Wall thickness\nwall = 1.5;\n\n// Main body module\nmodule main_body() {\n    difference() {\n        // Outer body\n        cylinder(h=body_length, d=body_diameter, $fn=32);\n        \n        // Inner bore\n        translate([0, 0, -0.1])\n            cylinder(h=body_length + 0.2, d=body_diameter - 2*wall, $fn=32);\n        \n        // Tone holes (7 front holes)\n        for(i = [1:7]) {\n            rotate([0, 0, (i-1)*15 - 45])\n                translate([body_diameter/2 - 1, 0, body_length/8 * i + 5])\n                    rotate([90, 0, 0])\n                        cylinder(h=3, d=4, $fn=16);\n        }\n        \n        // Thumb hole\n        rotate([0, 90, 0])\n            translate([0, 0, -body_diameter/2])\n                cylinder(h=body_diameter, d=4, $fn=16);\n    }\n}\n\n// Bell module\nmodule bell() {\n    difference() {\n        // Flared bell\n        translate([0, 0, body_length])\n            cylinder(h=bell_length, d1=body_diameter, d2=bell_diameter, $fn=32);\n        \n        // Bell bore\n        translate([0, 0, body_length - 0.1])\n            cylinder(h=bell_length + 0.2, d1=body_diameter - 2*wall, d2=bell_diameter - 2*wall, $fn=32);\n    }\n}\n\n// Mouthpiece module\nmodule mouthpiece() {\n    difference() {\n        // Tapered mouthpiece\n        translate([0, 0, -mouthpiece_length])\n            cylinder(h=mouthpiece_length, d1=mouthpiece_diameter, d2=body_diameter, $fn=32);\n        \n        // Mouthpiece bore\n        translate([0, 0, -mouthpiece_length - 0.1])\n            cylinder(h=mouthpiece_length + 0.2, d=5, $fn=16);\n        \n        // Reed slot\n        translate([0, mouthpiece_diameter/2 - 1, -mouthpiece_length/2])\n            cube([2, 3, mouthpiece_length/2], center=true);\n    }\n    \n    // Reed\n    color(\"tan\")\n        translate([0, mouthpiece_diameter/2 + 1, -mouthpiece_length*0.75])\n            cube([1.5, 8, 10], center=true);\n}\n\n// Metal keys module\nmodule keys() {\n    // Key rods\n    color(\"silver\")\n    for(i = [1:7]) {\n        translate([body_diameter/2 + 2, 0, body_length/8 * i + 5])\n            rotate([0, 90, 0])\n                cylinder(h=8, d=1, $fn=8);\n    }\n    \n    // Key cups\n    for(i = [1:7]) {\n        translate([body_diameter/2 + 6, 0, body_length/8 * i + 5])\n            rotate([0, 90, 0])\n                cylinder(h=key_height, d=key_radius*2, $fn=16);\n    }\n    \n    // Thumb key\n    translate([0, body_diameter/2 + 2, body_length/2])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=1, $fn=8);\n    translate([0, body_diameter/2 + 6, body_length/2])\n        rotate([90, 0, 0])\n            cylinder(h=key_height, d=key_radius*2, $fn=16);\n}\n\n// Assembly\nunion() {\n    color(\"burlywood\") {\n        main_body();\n        bell();\n        mouthpiece();\n    }\n    keys();\n}",
    "renders": true
  },
  {
    "musical_instrument": "tárogató",
    "openscad_code": "// Tárogató - Realistic medium complexity\n// 3D printable model with proper wall thickness\n\n// Main parameters\nbody_len = 80;\nbell_d = 20;\nmouthpiece_d = 6;\nwall = 1.5;\n\n// Difference module for hollow parts\nmodule hollow_cylinder(h, r1, r2) {\n    difference() {\n        cylinder(h=h, r1=r1, r2=r2, $fn=32);\n        translate([0,0,-0.1])\n            cylinder(h=h+0.2, r1=r1-wall, r2=r2-wall, $fn=32);\n    }\n}\n\n// Mouthpiece\nmodule mouthpiece() {\n    union() {\n        // Reed\n        translate([0,0,5])\n            scale([0.3, 0.4, 2])\n            rotate([90,0,0])\n            cylinder(h=5, r=mouthpiece_d/2, $fn=16);\n        \n        // Mouthpiece body\n        cylinder(h=8, r=mouthpiece_d/2, $fn=32);\n        \n        // Connector\n        translate([0,0,8])\n            cylinder(h=3, r1=mouthpiece_d/2, r2=mouthpiece_d/2+1, $fn=32);\n    }\n}\n\n// Main body with tone holes\nmodule body() {\n    difference() {\n        // Main conical body\n        hollow_cylinder(body_len-5, mouthpiece_d/2+1, bell_d/2-1);\n        \n        // Tone holes - 7 front holes\n        for(i = [1:7]) {\n            rotate([0,90,0])\n            translate([0, -body_len/2 + i*9, 0])\n                rotate([90,0,0])\n                cylinder(h=wall+1, r1=1.5, r2=1.2, $fn=16);\n        }\n        \n        // Thumb hole\n        rotate([0,-90,0])\n        translate([0, -body_len/2 + 15, 0])\n            rotate([90,0,0])\n            cylinder(h=wall+1, r1=1.5, r2=1.2, $fn=16);\n        \n        // Key holes (simplified)\n        for(i = [1:3]) {\n            rotate([0,90,0])\n            translate([0, -body_len/2 + 20 + i*12, 0])\n                rotate([90,0,0])\n                cylinder(h=wall+1, r1=2.5, r2=2.2, $fn=16);\n        }\n    }\n}\n\n// Bell flare\nmodule bell() {\n    difference() {\n        // Bell\n        translate([0,0,body_len-5])\n            cylinder(h=10, r1=bell_d/2-1, r2=bell_d/2+3, $fn=32);\n        \n        // Bell interior\n        translate([0,0,body_len-5-0.1])\n            cylinder(h=10.2, r1=bell_d/2-1-wall, r2=bell_d/2+3-wall, $fn=32);\n    }\n}\n\n// Keys mechanism (simplified)\nmodule keys() {\n    for(i = [1:3]) {\n        // Key arms\n        rotate([0,90,0])\n        translate([0, -body_len/2 + 20 + i*12, 0])\n            rotate([90,0,0])\n            cube([15, 1, 1], center=true);\n        \n        // Key pads\n        rotate([0,90,0])\n        translate([15, -body_len/2 + 20 + i*12, 0])\n            rotate([90,0,0])\n            cylinder(h=1, r=3, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    // Main parts\n    color(\"BurlyWood\")\n    union() {\n        mouthpiece();\n        body();\n        bell();\n    }\n    \n    // Keys (printed separately or with supports)\n    color(\"Silver\")\n    keys();\n}",
    "renders": true
  },
  {
    "musical_instrument": "drum",
    "openscad_code": "// Realistic 3D-printable drum ~80 mm tall\n// Medium complexity (≈110 lines)\n\n$fn = 32;          // Smooth curves\nwall = 1.8;        // 3D-print friendly wall thickness\nr = 25;            // Shell radius\nh = 45;            // Shell height\nhoop = 3;          // Hoop thickness\nlug = 5;           // Lug width\nn = 8;             // Number of tension lugs\n\n// Main shell with slightly bulged middle\nmodule shell() {\n    difference() {\n        cylinder(r1 = r, r2 = r, h = h);           // Straight cylinder\n        translate([0, 0, -0.1])\n            cylinder(r1 = r-wall, r2 = r-wall, h = h+0.2); // Hollow\n    }\n}\n\n// Reinforcement rings top & bottom\nmodule ring(z) {\n    translate([0, 0, z])\n        cylinder(r1 = r+1.5, r2 = r+1.5, h = 2);\n}\n\n// Single tension lug\nmodule tension_lug() {\n    difference() {\n        union() {\n            // Main lug body\n            translate([0, 0, 3])\n                cube([lug, lug, h-6], center = true);\n            // Rounded ends\n            translate([0, 0, 0])\n                sphere(d = lug);\n            translate([0, 0, h])\n                sphere(d = lug);\n        }\n        // Central hole for tuning rod\n        translate([0, 0, -1])\n            rotate([90, 0, 0])\n                cylinder(r = 1.2, h = lug+2, center = true);\n    }\n}\n\n// Drumhead (thin membrane)\nmodule head(z) {\n    translate([0, 0, z])\n        cylinder(r1 = r-0.5, r2 = r-0.5, h = 0.4);\n}\n\n// Metal hoop\nmodule tension_hoop(z) {\n    difference() {\n        cylinder(r1 = r+1, r2 = r+1, h = hoop);\n        translate([0, 0, -0.1])\n            cylinder(r1 = r-0.5, r2 = r-0.5, h = hoop+0.2);\n    }\n}\n\n// Air vent\nmodule vent() {\n    rotate([90, 0, 0])\n        translate([r-wall/2, 0, h/2])\n            cylinder(r = 2, h = wall+0.2);\n}\n\n// Assembly\nunion() {\n    shell();\n    \n    // Bottom reinforcement\n    ring(0);\n    ring(h-2);\n    \n    // Drumheads\n    color(\"beige\") head(hoop);\n    color(\"beige\") head(0);\n    \n    // Tension hoops\n    color(\"silver\") tension_hoop(hoop);\n    color(\"silver\") tension_hoop(0);\n    \n    // Tension lugs\n    for(i = [0 : n-1])\n        rotate([0, 0, i*360/n])\n            translate([r+3, 0, 0])\n                color(\"silver\") tension_lug();\n    \n    // Air vent\n    color(\"silver\") vent();\n    \n    // Simple legs to avoid overhangs\n    for(i = [0:2])\n        rotate([0, 0, i*120])\n            translate([r-2, 0, -3])\n                cube([4, 4, 3], center = true);\n}",
    "renders": true
  },
  {
    "musical_instrument": "cymbal",
    "openscad_code": "// Realistic 3D-printable cymbal (medium complexity)\n// 80 mm ride cymbal with bell, taper, and lathe grooves\n\n$fn = 72;               // Smooth curves for printing\n\nmodule cymbal(diameter=80, thickness=2.5, bell_h=6, bell_d=25) {\n    // Basic cymbal body – inverted shallow cone with thickness taper\n    difference() {\n        // Outer body\n        cylinder(h1 = thickness*1.3, h2 = thickness*0.4, r1 = diameter/2, r2 = diameter/2, center = true);\n        // Remove center hole for mounting\n        cylinder(h = thickness*2, r = 5, center = true);\n    }\n    \n    // Bell – raised dome\n    translate([0,0,thickness*0.5])\n        difference() {\n            cylinder(h = bell_h, r = bell_d/2);\n            cylinder(h = bell_h+1, r = 5);\n        }\n    \n    // Lathe grooves (concentric ridges)\n    for (r = [bell_d/2+3 : 4 : diameter/2-4]) {\n        color(\"silver\")\n        linear_extrude(height = 0.4, center = true)\n            difference() {\n                circle(r + 0.4);\n                circle(r);\n            }\n    }\n    \n    // Micro hammer dimples for realism (randomized)\n    seed = 42;\n    for (i = [0:30:359]) {\n        angle = i + (i % 17);        // slight irregularity\n        rad = bell_d/2+3 + (i % 20);\n        translate([rad*cos(angle), rad*sin(angle), 0])\n            sphere(d = 0.6, $fn=12);\n    }\n    \n    // Keyhole mounting slot for 3D printing (no supports needed)\n    translate([0,0,-thickness])\n        difference() {\n            cube([10, 5, thickness*2], center = true);\n            cube([12, 2, thickness*2+1], center = true);\n        }\n}\n\n// Build the cymbal\ncymbal();",
    "renders": true
  },
  {
    "musical_instrument": "tambourine",
    "openscad_code": "// Tambourine - Realistic Style, Medium Complexity\n// Diameter 80mm, thickness 22mm, printable without supports\n\n$fn=60;\n\n// Main parameters\ntamb_dia = 80;\ntamb_thick = 22;\nshell_thick = 3;\njingle_dia = 18;\njingle_thick = 3;\njingle_gap = 2;\nhandle_len = 25;\nhandle_dia = 12;\n\n// Overall assembly\nmodule tambourine() {\n    // Main shell (hollow cylinder with open sides)\n    difference() {\n        cylinder(h=tamb_thick, d=tamb_dia, center=true);\n        cylinder(h=tamb_thick+2, d=tamb_dia-2*shell_thick, center=true);\n    }\n\n    // Bottom rim (adds thickness for jingles)\n    translate([0,0,-tamb_thick/2+1])\n        cylinder(h=4, d=tamb_dia, center=false);\n\n    // Top rim\n    translate([0,0,tamb_thick/2-5])\n        cylinder(h=4, d=tamb_dia, center=false);\n\n    // Jingles (5 pairs around the rim)\n    for (i=[0:4]) {\n        rotate([0,0,i*72])\n            translate([tamb_dia/2 - jingle_dia/2 - shell_thick/2, 0, 0])\n                jingle_pair();\n    }\n\n    // Handle\n    translate([0, -tamb_dia/2 - handle_len/2 - 5, 0])\n        rotate([90,0,0])\n            cylinder(h=handle_len, d=handle_dia, center=true);\n\n    // Handle grip rings\n    for (j=[-1:1]) {\n        translate([0, -tamb_dia/2 - 18 - j*6, 0])\n            rotate([90,0,0])\n                difference() {\n                    cylinder(h=4, d=handle_dia+2, center=true);\n                    cylinder(h=5, d=handle_dia-1, center=true);\n                }\n    }\n}\n\n// Single jingle pair\nmodule jingle_pair() {\n    // Left jingle\n    translate([0, -jingle_dia/2 - jingle_gap/2, 0])\n        jingle();\n\n    // Right jingle\n    translate([0, jingle_dia/2 + jingle_gap/2, 0])\n        jingle();\n}\n\n// Single jingle (metal disc with hole)\nmodule jingle() {\n    color(\"silver\")\n    difference() {\n        // Main disc\n        cylinder(h=jingle_thick, d=jingle_dia, center=true);\n        // Central slot\n        rotate([0,90,0])\n            translate([0,0,jingle_thick/2])\n                cube([jingle_dia-2, 2, jingle_thick+0.1], center=true);\n    }\n}\n\n// Render the tambourine\ntambourine();",
    "renders": true
  },
  {
    "musical_instrument": "maracas",
    "openscad_code": "// Realistic 3D Printable Maracas\n// Medium complexity with proper wall thickness and no overhangs\n\n$fn = 32; // Smooth curves\n\n// Main parameters\nhandle_length = 85;\nhandle_diameter = 15;\nball_diameter = 45;\nwall_thickness = 2;\n\nmodule handle() {\n    // Main handle shaft\n    difference() {\n        cylinder(h = handle_length, d = handle_diameter, center = false);\n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            cylinder(h = handle_length - wall_thickness*2, d = handle_diameter - wall_thickness*2, center = false);\n    }\n    \n    // Grip rings for better handling\n    for (i = [1:10:handle_length-20]) {\n        translate([0, 0, i])\n            cylinder(h = 3, d1 = handle_diameter + 2, d2 = handle_diameter + 2, center = false);\n    }\n    \n    // Top cap\n    translate([0, 0, handle_length])\n    difference() {\n        cylinder(h = 5, d = handle_diameter + 4, center = false);\n        // Hollow top\n        translate([0, 0, wall_thickness])\n            cylinder(h = 3, d = handle_diameter, center = false);\n    }\n}\n\nmodule ball() {\n    // Main ball with wall thickness\n    difference() {\n        sphere(d = ball_diameter);\n        sphere(d = ball_diameter - wall_thickness*2);\n    }\n    \n    // Connection collar to handle\n    translate([0, 0, -ball_diameter/2 - 2.5])\n    difference() {\n        cylinder(h = 5, d = handle_diameter + 6, center = false);\n        cylinder(h = 5, d = handle_diameter, center = false);\n    }\n    \n    // Small beads inside for sound\n    for (i = [0:3:359]) {\n        rotate([0, i, i*2])\n            translate([ball_diameter/4, 0, sin(i)*5])\n                sphere(d = 4);\n    }\n}\n\nmodule maracas() {\n    union() {\n        // Handle\n        translate([0, 0, 0])\n            handle();\n        \n        // Ball positioned at top of handle\n        translate([0, 0, handle_length + 5])\n            rotate([0, 0, 0])\n                ball();\n    }\n}\n\n// Generate the maracas\nmaracas();",
    "renders": true
  },
  {
    "musical_instrument": "triangle",
    "openscad_code": "// Realistic Triangle Ruler with Medium Complexity\n// 3D printable triangle with beveled edges and measurement markings\n\n// Basic parameters\n$fn = 32;\nwall_thickness = 2.5;\nbase_height = 3;\nbevel_angle = 45;\nsize = 80;  // 80mm for 3D printing\n\n// Main triangle body\nmodule triangle_body() {\n    // Create base triangle shape\n    linear_extrude(height = base_height) {\n        polygon(points=[\n            [0, 0],           // Origin point\n            [size, 0],        // Right angle\n            [0, size]         // Top point\n        ]);\n    }\n}\n\n// Beveled edges for realistic look\nmodule beveled_triangle() {\n    difference() {\n        // Main body\n        triangle_body();\n        \n        // Top bevel cut\n        translate([0, 0, base_height - wall_thickness])\n        linear_extrude(height = wall_thickness + 0.1) {\n            polygon(points=[\n                [wall_thickness, wall_thickness],\n                [size - wall_thickness, wall_thickness],\n                [wall_thickness, size - wall_thickness]\n            ]);\n        }\n    }\n}\n\n// Measurement markings\nmodule markings() {\n    for(i = [1:9]) {\n        // Horizontal markings (every 8mm)\n        translate([i * 8, 0, base_height + 0.1])\n        cube([0.5, 2, 0.3]);\n        \n        // Vertical markings (every 8mm)\n        translate([0, i * 8, base_height + 0.1])\n        cube([2, 0.5, 0.3]);\n        \n        // Diagonal markings (every 8mm along hypotenuse)\n        translate([i * 5.66, i * 5.66, base_height + 0.1])\n        rotate([0, 0, 45])\n        cube([0.5, 2, 0.3]);\n    }\n}\n\n// Corner reinforcements\nmodule corner_reinforcements() {\n    // Right angle corner\n    difference() {\n        translate([0, 0, 0])\n        cube([wall_thickness * 2, wall_thickness * 2, base_height]);\n        \n        translate([wall_thickness, wall_thickness, 0])\n        cylinder(h = base_height, r = wall_thickness);\n    }\n    \n    // Top corner\n    difference() {\n        translate([0, size - wall_thickness * 2, 0])\n        cube([wall_thickness * 2, wall_thickness * 2, base_height]);\n        \n        translate([wall_thickness, size - wall_thickness, 0])\n        cylinder(h = base_height, r = wall_thickness);\n    }\n    \n    // Side corner\n    difference() {\n        translate([size - wall_thickness * 2, 0, 0])\n        cube([wall_thickness * 2, wall_thickness * 2, base_height]);\n        \n        translate([size - wall_thickness, wall_thickness, 0])\n        cylinder(h = base_height, r = wall_thickness);\n    }\n}\n\n// Text labels\nmodule text_labels() {\n    // \"90°\" label at right angle\n    translate([wall_thickness + 2, wall_thickness + 2, base_height + 0.5])\n    rotate([0, 0, 0])\n    linear_extrude(height = 0.5)\n    text(\"90°\", size = 3);\n    \n    // \"80mm\" label along bottom\n    translate([size/2 - 5, wall_thickness, base_height + 0.5])\n    rotate([0, 0, 0])\n    linear_extrude(height = 0.5)\n    text(\"80mm\", size = 2.5);\n}\n\n// Assembly\nunion() {\n    // Main structure\n    beveled_triangle();\n    \n    // Reinforcements\n    corner_reinforcements();\n    \n    // Details\n    markings();\n    text_labels();\n}",
    "renders": true
  },
  {
    "musical_instrument": "xylophone",
    "openscad_code": "// Realistic 3D-printable xylophone ~75 mm long\n// Frame, resonator box, 8 graduated bars, two mallets\n\n$fn = 32; // smooth curves\n\n// ---------- Parameters ----------\nbar_len_start = 36;     // longest bar\nbar_len_end   = 20;     // shortest bar\nbar_width     = 7;\nbar_thick     = 2.5;\nbar_gap       = 3.5;\nnum_bars      = 8;\n\nframe_h       = 12;\nframe_w       = 50;\nframe_d       = 22;\nwall_t        = 2;      // printable wall thickness\nmallet_len    = 38;\nmallet_head_r = 3.5;\n\n// ---------- Color constants ----------\nframe_col   = \"BurlyWood\";\nbar_col     = \"SkyBlue\";\nmallet_col  = \"Gold\";\n\n// ---------- Bar module ----------\nmodule xyl_bar(len, h=bar_thick, w=bar_width) {\n    color(bar_col)\n    difference() {\n        // main bar\n        translate([0, 0, h/2])\n            cube([len, w, h], center=true);\n        // undercut for tone (slight arch)\n        translate([0, 0, h-0.4])\n            hull() {\n                translate([-len/2+3, 0, 0]) cylinder(h=1.5, r=0.8, center=true);\n                translate([ len/2-3, 0, 0]) cylinder(h=1.5, r=0.8, center=true);\n            }\n    }\n}\n\n// ---------- Resonator box ----------\nmodule resonator_box() {\n    color(frame_col)\n    difference() {\n        // outer shell\n        cube([frame_w, frame_d, frame_h], center=true);\n        // hollow inside\n        translate([0, 0, wall_t])\n            cube([frame_w-2*wall_t, frame_d-2*wall_t, frame_h-wall_t], center=true);\n        // bottom sound holes\n        for (i = [1:2]) {\n            translate([(i==1 ? -frame_w/4 : frame_w/4), 0, -frame_h/2-wall_t/2])\n                cylinder(h=wall_t+1, r=4, center=true);\n        }\n    }\n}\n\n// ---------- Frame end caps ----------\nmodule end_cap() {\n    difference() {\n        // curved cap\n        translate([0, 0, frame_h/2])\n            cube([frame_w, wall_t, frame_h], center=true);\n        // fillet\n        translate([0, wall_t/2, frame_h/2])\n            rotate([90,0,0])\n                cylinder(h=frame_w, r=frame_h/2, center=true);\n    }\n}\n\n// ---------- Mallet ----------\nmodule mallet() {\n    color(mallet_col)\n    union() {\n        // handle\n        rotate([0,90,0])\n            cylinder(h=mallet_len, r=2, center=true);\n        // head\n        translate([0,0,mallet_len/2])\n            sphere(r=mallet_head_r);\n    }\n}\n\n// ---------- Build the xylophone ----------\n// Resonator box centered at origin\nresonator_box();\n\n// End caps\ntranslate([0,  frame_d/2, 0]) end_cap();\ntranslate([0, -frame_d/2, 0]) mirror([0,1,0]) end_cap();\n\n// Bars\ntotal_bar_span = num_bars*bar_width + (num_bars-1)*bar_gap;\nfor (i = [0:num_bars-1]) {\n    len = bar_len_start - (bar_len_start-bar_len_end)*(i/(num_bars-1));\n    xpos = -total_bar_span/2 + i*(bar_width+bar_gap) + bar_width/2;\n    translate([xpos, 0, frame_h+bar_thick/2])\n        rotate([0,0,i%2==0?0:5])  // slight alternating tilt\n            xyl_bar(len);\n}\n\n// Two mallets resting on frame\ntranslate([frame_w/2+5,  frame_d/3,  frame_h/2]) rotate([90,0,-30]) mallet();\ntranslate([frame_w/2+5, -frame_d/3,  frame_h/2]) rotate([90,0, 30]) mallet();",
    "renders": true
  },
  {
    "musical_instrument": "timpani",
    "openscad_code": "// Realistic Timpani - Medium Complexity\n// Total height ~60mm, bowl diameter ~50mm\n\n$fn = 36;  // Smooth curves for printing\n\n// Main parameters\nbowl_d = 50;          // Bowl diameter\nbowl_h = 30;          // Bowl height\nrim_t = 2;            // Rim thickness\nleg_h = 25;           // Leg height\nbase_d = 35;          // Base diameter\nhead_t = 1;           // Drum head thickness\ntuning_bolt_h = 8;    // Tuning bolt height\n\n// Drum bowl module\nmodule drum_bowl() {\n    difference() {\n        // Main bowl shape\n        cylinder(d1=bowl_d, d2=bowl_d*0.8, h=bowl_h);\n        \n        // Hollow out inside\n        translate([0, 0, rim_t])\n            cylinder(d1=bowl_d-rim_t*2, d2=bowl_d*0.8-rim_t*2, h=bowl_h-rim_t);\n    }\n}\n\n// Drum head (membrane)\nmodule drum_head() {\n    translate([0, 0, bowl_h-head_t/2])\n        cylinder(d=bowl_d+rim_t*2, h=head_t);\n}\n\n// Tuning bolt\nmodule tuning_bolt() {\n    union() {\n        // Bolt shaft\n        cylinder(d=2, h=tuning_bolt_h);\n        \n        // Bolt head\n        translate([0, 0, tuning_bolt_h])\n            cylinder(d=4, h=2);\n    }\n}\n\n// Tuning ring with bolts\nmodule tuning_ring() {\n    difference() {\n        // Main ring\n        cylinder(d=bowl_d+10, h=3);\n        \n        // Center hole\n        cylinder(d=bowl_d+2, h=4);\n    }\n    \n    // Tuning bolts around ring\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n            translate([bowl_d/2+5, 0, -tuning_bolt_h/2+1.5])\n                tuning_bolt();\n    }\n}\n\n// Single leg\nmodule leg() {\n    cylinder(d=4, h=leg_h);\n}\n\n// Tripod base\nmodule tripod_base() {\n    difference() {\n        // Main base\n        cylinder(d=base_d, h=3);\n        \n        // Center hole\n        cylinder(d=6, h=4);\n    }\n    \n    // Three legs\n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n            translate([base_d/2-2, 0, leg_h/2+1.5])\n                leg();\n    }\n}\n\n// Assemble the timpani\nunion() {\n    // Base assembly\n    tripod_base();\n    \n    // Bowl on legs\n    translate([0, 0, leg_h+3])\n        drum_bowl();\n    \n    // Tuning ring\n    translate([0, 0, bowl_h+3])\n        tuning_ring();\n    \n    // Drum head\n    drum_head();\n}\n\n// Optional: Add small pedal mechanism (simplified)\ntranslate([bowl_d/2+10, 0, leg_h/2])\n    rotate([90, 0, 0])\n        cylinder(d=3, h=15);",
    "renders": true
  },
  {
    "musical_instrument": "bongo",
    "openscad_code": "// Realistic bongo drums (medium complexity)\n// Overall height ~70mm, width ~90mm, depth ~50mm\n\n$fn = 32;  // Smooth curves for 3D printing\nwall = 1.6; // Standard nozzle-friendly wall thickness\n\nmodule drum(d=35, h=45) {\n    // Main shell with slight taper\n    difference() {\n        cylinder(d1=d, d2=d-4, h=h, center=true);\n        translate([0,0,h/2-wall/2])\n            cylinder(d1=d-wall*2, d2=d-4-wall*2, h=h+1, center=true);\n    }\n    \n    // Realistic bearing edge (rounded top)\n    translate([0,0,h/2-1])\n        difference() {\n            cylinder(d1=d-4, d2=d-4, h=2, center=true);\n            cylinder(d1=d-4-wall*2, d2=d-4-wall*2, h=3, center=true);\n        }\n    \n    // Drum head (tuning ring)\n    translate([0,0,h/2+0.5])\n        difference() {\n            cylinder(d=d+4, h=2, center=true);\n            cylinder(d=d, h=3, center=true);\n        }\n    \n    // Tuning lugs (8 evenly spaced)\n    for(i=[0:7]) {\n        rotate([0,0,i*45])\n            translate([d/2+2,0,h/2-15])\n                rotate([90,0,0])\n                    cylinder(d=3, h=8, center=true);\n    }\n}\n\nmodule connecting_block(w=50, h=20, d=15) {\n    // Hourglass shape block between drums\n    difference() {\n        hull() {\n            translate([-w/2+5,0,0])\n                sphere(d=d);\n            translate([w/2-5,0,0])\n                sphere(d=d);\n        }\n        translate([0,0,-d/2-1])\n            cube([w+2,d,d+2], center=true);\n    }\n    \n    // Mounting holes for dowels\n    translate([-w/3,0,0])\n        cylinder(d=4, h=d+2, center=true);\n    translate([w/3,0,0])\n        cylinder(d=4, h=d+2, center=true);\n}\n\nmodule base_stand() {\n    // Simple tripod base for stability\n    difference() {\n        // Central hub\n        cylinder(d=16, h=8, center=true);\n        translate([0,0,-4])\n            cylinder(d=12, h=12, center=true);\n    }\n    \n    // Three legs\n    for(i=[0:120:240]) {\n        rotate([0,0,i])\n            translate([10,0,-8])\n                rotate([90,0,0])\n                    cylinder(d=5, h=20, center=true);\n    }\n}\n\nmodule bongo_set() {\n    // Left drum (macho - smaller)\n    translate([-22,0,0])\n        drum(d=30, h=42);\n    \n    // Right drum (hembra - larger)\n    translate([22,0,0])\n        drum(d=35, h=45);\n    \n    // Connecting block between drums\n    translate([0,0,20])\n        connecting_block();\n    \n    // Optional base (uncomment for standalone display)\n    // translate([0,0,-30])\n    //     base_stand();\n}\n\n// Render the complete bongo\nbongo_set();",
    "renders": true
  },
  {
    "musical_instrument": "conga",
    "openscad_code": "// Conga Drum - Medium Complexity Realistic Style\n// Dimensions based on typical conga proportions scaled for 3D printing\n\ndrum_height = 80;\ndrum_diameter = 50;\nwall_thickness = 2;\n\nmodule conga_body() {\n    // Main drum body - slightly tapered cylinder\n    difference() {\n        cylinder(h=drum_height, d1=drum_diameter*0.8, d2=drum_diameter, $fn=100);\n        \n        // Hollow out interior\n        translate([0, 0, wall_thickness])\n            cylinder(h=drum_height-wall_thickness*2, d1=(drum_diameter*0.8)-wall_thickness*2, \n                    d2=drum_diameter-wall_thickness*2, $fn=100);\n        \n        // Bottom hole for sound\n        translate([0, 0, -0.1])\n            cylinder(h=drum_height*0.1, d=drum_diameter*0.3, $fn=50);\n    }\n}\n\nmodule drum_head() {\n    // Synthetic drum head\n    difference() {\n        // Main head - slightly curved\n        translate([0, 0, drum_height])\n            cylinder(h=2, d=drum_diameter+4, $fn=100);\n        \n        // Hollow center for realistic look\n        translate([0, 0, drum_height-0.1])\n            cylinder(h=2.2, d=drum_diameter-2, $fn=100);\n    }\n    \n    // Tuning rim\n    translate([0, 0, drum_height+2])\n        cylinder(h=3, d=drum_diameter+6, $fn=100);\n}\n\nmodule tuning_lugs() {\n    // 6 tuning lugs around the rim\n    lug_height = 8;\n    lug_width = 3;\n    lug_depth = 2;\n    \n    for(i=[0:5]) {\n        angle = i * 60;\n        radius = (drum_diameter+6)/2 + lug_depth/2;\n        \n        translate([cos(angle)*radius, sin(angle)*radius, drum_height+2])\n            rotate([0, 0, angle])\n                cube([lug_depth, lug_width, lug_height], center=true);\n    }\n}\n\nmodule tuning_rims() {\n    // Upper rim with holes for tuning\n    difference() {\n        translate([0, 0, drum_height+2])\n            cylinder(h=3, d=drum_diameter+10, $fn=100);\n        \n        // Tuning holes\n        for(i=[0:5]) {\n            angle = i * 60 + 30;\n            radius = (drum_diameter+10)/2 - 3;\n            \n            translate([cos(angle)*radius, sin(angle)*radius, drum_height+1.9])\n                rotate([90, 0, angle+90])\n                    cylinder(h=5, d=2, $fn=20);\n        }\n    }\n}\n\nmodule metal_bands() {\n    // Upper metal band\n    translate([0, 0, drum_height-5])\n        cylinder(h=5, d=drum_diameter+2, $fn=100);\n    \n    // Lower metal band\n    translate([0, 0, drum_height*0.3])\n        cylinder(h=5, d=drum_diameter+1, $fn=100);\n}\n\nmodule base_ring() {\n    // Reinforced base\n    translate([0, 0, 0])\n        cylinder(h=5, d=drum_diameter*0.8+2, $fn=100);\n}\n\n// Assemble the conga\nunion() {\n    conga_body();\n    drum_head();\n    tuning_rims();\n    metal_bands();\n    base_ring();\n    tuning_lugs();\n}",
    "renders": true
  },
  {
    "musical_instrument": "tabla",
    "openscad_code": "// Realistic 3D-printable tabla set (medium complexity)\n// Overall height ≈ 80 mm, bayan ≈ 60 mm diameter, dayan ≈ 45 mm diameter\n\n$fn = 60;           // Smooth curves\nwall = 1.6;         // 1.6 mm wall for 3D printing\n\nmodule rounded_cylinder(h, r, rounding){\n    // Hollow cylinder with rounded top edge\n    difference(){\n        union(){\n            cylinder(h = h - rounding, r = r, center = false);\n            translate([0, 0, h - rounding])\n                sphere(r = rounding);\n        }\n        translate([0, 0, -1])\n            cylinder(h = h + 2, r = r - wall, center = false);\n    }\n}\n\nmodule skin(r_top, r_bot, h){\n    // Membrane / goatskin head\n    difference(){\n        cylinder(h = 0.6, r1 = r_top, r2 = r_bot, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = 0.8, r1 = r_top - wall, r2 = r_bot - wall, center = false);\n    }\n}\n\nmodule gajra(r, h){\n    // Braided ring around skin\n    for(i = [0:35]){\n        rotate([0, 0, i * 10])\n            translate([r - 0.8, 0, h])\n                sphere(r = 0.8);\n    }\n}\n\nmodule syahi(r, h){\n    // Black tuning paste patch\n    color([0.1, 0.1, 0.1])\n    difference(){\n        cylinder(h = 1.2, r = r, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = 1.4, r = r - 0.5, center = false);\n    }\n}\n\nmodule dayan(){\n    // Wooden right drum (higher pitch)\n    color([0.75, 0.45, 0.2])  // Sheesham wood\n    union(){\n        // Main shell\n        difference(){\n            cylinder(h = 45, r1 = 22, r2 = 20, center = false);\n            translate([0, 0, -1])\n                cylinder(h = 47, r1 = 22 - wall, r2 = 20 - wall, center = false);\n        }\n        // Foot\n        translate([0, 0, -5])\n            rounded_cylinder(h = 5, r = 20, rounding = 2);\n    }\n\n    // Skin assembly\n    translate([0, 0, 45])\n        skin(23, 22, 0);\n\n    // Gajra\n    gajra(23, 45.6);\n\n    // Syahi\n    translate([0, 0, 46.2])\n        syahi(10, 0);\n}\n\nmodule bayan(){\n    // Metal left drum (lower pitch)\n    color([0.3, 0.3, 0.3])  // Brass\n    union(){\n        // Main bowl\n        difference(){\n            sphere(r = 30);\n            sphere(r = 30 - wall);\n        }\n        // Cut bottom flat\n        translate([0, 0, -30])\n            cube([60, 60, 30], center = true);\n    }\n\n    // Neck collar\n    difference(){\n        cylinder(h = 8, r = 25, center = false);\n        translate([0, 0, -1])\n            cylinder(h = 10, r = 25 - wall, center = false);\n    }\n\n    // Skin assembly\n    translate([0, 0, 8])\n        skin(32, 30, 0);\n\n    // Gajra\n    gajra(32, 8.6);\n\n    // Syahi\n    translate([0, 0, 9.2])\n        syahi(15, 0);\n}\n\n// Position drums side-by-side for printing\ntranslate([-35, 0, 0])\n    dayan();\n\ntranslate([35, 0, 0])\n    bayan();",
    "renders": true
  },
  {
    "musical_instrument": "dhol",
    "openscad_code": "// Realistic Dhol - Medium Complexity\n// Overall size: ~70mm length, ~45mm diameter\n\n// Main Parameters\n$dhol_length = 70;\n$shell_diameter = 45;\n$shell_thickness = 2;\n$skin_thickness = 1.5;\n$rope_thickness = 1.2;\n$rope_spacing = 6;\n$rope_count = 8;\n\nmodule dhol_shell() {\n    // Central wooden shell - slightly barrel shaped\n    hull() {\n        translate([0, 0, -$dhol_length/2])\n            cylinder(h=5, d1=$shell_diameter*0.9, d2=$shell_diameter, $fn=64);\n        \n        translate([0, 0, $dhol_length/2-5])\n            cylinder(h=5, d1=$shell_diameter, d2=$shell_diameter*0.9, $fn=64);\n    }\n    \n    // Hollow interior\n    difference() {\n        cylinder(h=$dhol_length*0.8, d=$shell_diameter-$shell_thickness*2, $fn=64);\n        translate([0, 0, -$dhol_length/2])\n            cylinder(h=$dhol_length*0.8+1, d=$shell_diameter-$shell_thickness*2-0.5, $fn=64);\n    }\n}\n\nmodule dhol_skin() {\n    // Left skin\n    translate([-($dhol_length/2+$skin_thickness/2), 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=$skin_thickness, d=$shell_diameter+2, $fn=64);\n    \n    // Right skin\n    translate[($dhol_length/2+$skin_thickness/2), 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=$skin_thickness, d=$shell_diameter+2, $fn=64);\n}\n\nmodule rope_pattern() {\n    // Ropes securing the skins\n    for (i = [0:$rope_count-1]) {\n        rotate([0, 0, i * 360/$rope_count]) {\n            translate([0, 0, -$dhol_length/2-2]) {\n                // Left side rope segment\n                translate([$shell_diameter/2+2, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=$rope_thickness, d=$rope_thickness, $fn=8);\n                \n                // Main rope\n                translate([$shell_diameter/2+2, 0, 0])\n                    cube([$dhol_length+4, $rope_thickness, $rope_thickness]);\n                \n                // Right side rope segment\n                translate([$shell_diameter/2+2, 0, $dhol_length+2])\n                    rotate([0, 90, 0])\n                        cylinder(h=$rope_thickness, d=$rope_thickness, $fn=8);\n            }\n        }\n    }\n}\n\nmodule decorative_bands() {\n    // Metal bands on shell ends\n    for (pos = [-$dhol_length/2+2, $dhol_length/2-2]) {\n        translate([pos, 0, 0])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=3, d=$shell_diameter+1, $fn=64);\n                    cylinder(h=3.5, d=$shell_diameter-1, $fn=64);\n                }\n    }\n}\n\nmodule tuning_peg() {\n    // Simple tuning peg on one side\n    translate([$dhol_length/2+8, $shell_diameter/3, 0])\n        rotate([0, 0, -30])\n            union() {\n                cylinder(h=5, d=3, $fn=12);\n                translate([2.5, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=2, d=1.5, $fn=8);\n            }\n}\n\n// Assembly\nunion() {\n    // Main dhol body\n    union() {\n        dhol_shell();\n        dhol_skin();\n        decorative_bands();\n    }\n    \n    // Rope tensioning system\n    rope_pattern();\n    \n    // Tuning hardware\n    tuning_peg();\n    mirror([1, 0, 0]) tuning_peg();\n}",
    "renders": true
  },
  {
    "musical_instrument": "kanjira",
    "openscad_code": "// Kanjira - South Indian frame drum\n// Realistic style, medium complexity (~120 lines)\n\n$fn = 64; // Smooth curves for printability\n\n// Overall dimensions\ndrum_diameter = 90;\ndrum_height = 45;\nwall_thickness = 3;\nskin_thickness = 1;\n\nmodule kanjira() {\n    difference() {\n        // Main frame\n        frame();\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            cylinder(h = drum_height - wall_thickness*2, d = drum_diameter - wall_thickness*2);\n    }\n    \n    // Goat skin head\n    skin();\n    \n    // Brass jingles\n    jingles();\n    \n    // Tuning wedge\n    wedge();\n}\n\nmodule frame() {\n    // Outer frame with subtle taper\n    cylinder(h = drum_height, d1 = drum_diameter, d2 = drum_diameter*0.95);\n    \n    // Inner lip for skin attachment\n    translate([0, 0, drum_height - 2])\n        cylinder(h = 2, d = drum_diameter - 4);\n}\n\nmodule skin() {\n    // Main playing surface\n    translate([0, 0, drum_height - skin_thickness])\n        cylinder(h = skin_thickness, d = drum_diameter - 4);\n    \n    // Skin texture - concentric rings\n    for (i = [1:5]) {\n        translate([0, 0, drum_height - skin_thickness + 0.1])\n            cylinder(h = 0.1, d = (drum_diameter - 4) * (1 - i*0.15));\n    }\n}\n\nmodule jingles() {\n    // Position jingles around frame\n    for (i = [0:3]) {\n        rotate([0, 0, i*90 + 15])\n            translate([drum_diameter/2 - 8, 0, drum_height/2 + 5])\n                jingle();\n    }\n}\n\nmodule jingle() {\n    // Brass disc\n    color(\"gold\")\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 2, d = 12);\n        // Central hole\n        cylinder(h = 3, d = 3);\n    }\n    \n    // Jingle holder\n    translate([-2, -6, 0])\n        cube([4, 6, 2]);\n}\n\nmodule wedge() {\n    // Traditional wooden wedge for tuning\n    translate([drum_diameter/2 - 15, 0, drum_height/2]) {\n        rotate([0, 0, 15])\n            scale([1, 0.3, 1])\n                cylinder(h = 20, d = 8);\n    }\n}\n\n// Render the complete instrument\nkanjira();",
    "renders": true
  },
  {
    "musical_instrument": "ghatam",
    "openscad_code": "// Ghatam - South-Indian clay pot percussion instrument\n// Medium-complexity realistic model, 3D-printable\n// Height ≈ 70 mm, wall thickness 2 mm, no support needed\n\n$fn = 60;            // smooth curves\n\n// overall parameters\nheight  = 70;\nradius  = 40;\nwall    = 2;\n\n// main pot body\nmodule body() {\n    difference() {\n        // outer shape: egg-like\n        scale([1, 1, 1.1])\n            sphere(r = radius, center = true);\n\n        // hollow inside\n        translate([0,0,-wall])\n            scale([1, 1, 1.1])\n                sphere(r = radius - wall, center = true);\n\n        // flat bottom\n        translate([0,0,-radius*1.1])\n            cube([radius*2, radius*2, radius*2], center=true);\n    }\n}\n\n// neck lip\nmodule neck() {\n    difference() {\n        // outer lip\n        cylinder(h = 8, r1 = radius*0.7, r2 = radius*0.6, center = false);\n        // inner hole\n        translate([0,0,-1])\n            cylinder(h = 10, r1 = radius*0.7 - wall, r2 = radius*0.6 - wall, center = false);\n    }\n}\n\n// small decorative beads around equator\nmodule beads() {\n    bead_d = 4;\n    n = 24;\n    for (i = [0 : n-1]) {\n        angle = i * 360 / n;\n        rotate([0, 0, angle])\n            translate([radius*0.9, 0, 0])\n                sphere(r = bead_d/2);\n    }\n}\n\n// four tiny feet for print stability\nmodule feet() {\n    foot_l = 6;\n    foot_w = 8;\n    foot_h = 3;\n    for (a = [45, 135, 225, 315]) {\n        rotate([0, 0, a])\n            translate([radius*0.6, 0, -foot_h/2])\n                cube([foot_l, foot_w, foot_h], center = true);\n    }\n}\n\n// sound hole on top\nmodule mouth() {\n    difference() {\n        // outer neck ring\n        cylinder(h = 4, r1 = radius*0.6, r2 = radius*0.6, center = false);\n        // inner hole\n        cylinder(h = 5, r = radius*0.35, center = false);\n    }\n}\n\n// assemble\nunion() {\n    body();\n    translate([0,0,height/2 - 5])\n        neck();\n    beads();\n    translate([0,0,-height/2 + 1])\n        feet();\n    translate([0,0,height/2 + 3])\n        mouth();\n}",
    "renders": true
  },
  {
    "musical_instrument": "mridangam",
    "openscad_code": "// Mridangam - South Indian double-headed drum\n// Medium complexity realistic style\n\n// Parameters\n$fn = 50;\nbody_length = 80;\nmax_diameter = 45;\nmin_diameter = 35;\nwall_thickness = 2.5;\nhead_thickness = 1.5;\nstrap_width = 3;\nstrap_thickness = 1;\n\n// Main body module\nmodule mridangam_body() {\n    // Central barrel shape\n    hull() {\n        translate([0, 0, body_length/2])\n            sphere(d=max_diameter);\n        translate([0, 0, body_length/4])\n            sphere(d=max_diameter * 0.9);\n        translate([0, 0, -body_length/4])\n            sphere(d=min_diameter * 1.1);\n        translate([0, 0, -body_length/2])\n            sphere(d=min_diameter);\n    }\n    \n    // Hollow interior\n    difference() {\n        children();\n        scale([0.8, 0.8, 0.9])\n            mridangam_body();\n    }\n}\n\n// Drum head module\nmodule drum_head(diameter, position) {\n    // Leather head membrane\n    translate([0, 0, position])\n        cylinder(h=head_thickness, d=diameter + 2, center=true);\n    \n    // Head ring\n    translate([0, 0, position])\n        cylinder(h=3, d=diameter + 5, $fn=6);\n    \n    // Black patch (syahi)\n    translate([0, 0, position + head_thickness/2 + 0.1])\n        cylinder(h=0.5, d=diameter * 0.6);\n}\n\n// Strapping system\nmodule strapping() {\n    // Vertical straps\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([max_diameter/2 + strap_width/2, 0, 0])\n                cube([strap_width, strap_thickness, body_length + 10], center=true);\n    }\n    \n    // Horizontal bands\n    for(z = [-body_length/3, 0, body_length/3]) {\n        rotate_extrude()\n            translate([max_diameter/2 + strap_thickness/2, 0, z])\n                circle(r=strap_width/2);\n    }\n}\n\n// Decorative rings\nmodule decorative_rings() {\n    // Top ring\n    translate([0, 0, body_length/2 - 2])\n        cylinder(h=2, d=max_diameter + 8);\n    \n    // Bottom ring  \n    translate([0, 0, -body_length/2 + 2])\n        cylinder(h=2, d=min_diameter + 8);\n}\n\n// Main assembly\nunion() {\n    // Main body with hollow interior\n    difference() {\n        mridangam_body();\n        mridangam_body();\n    }\n    \n    // Top drum head (larger side)\n    drum_head(max_diameter - 4, body_length/2 + 1);\n    \n    // Bottom drum head (smaller side)\n    drum_head(min_diameter - 4, -body_length/2 - 1);\n    \n    // Strapping system\n    strapping();\n    \n    // Decorative elements\n    decorative_rings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "pakhawaj",
    "openscad_code": "// Pakhawaj drum - realistic, medium complexity\n// 3D printable with no overhangs\n// Overall size ~70mm long\n\nmodule drum_body() {\n    // Main shell of pakhawaj - two joined truncated cones\n    difference() {\n        // Outer shell\n        union() {\n            cylinder(h=55, r1=18, r2=15, $fn=64);\n            translate([0,0,55]) cylinder(h=10, r1=15, r2=25, $fn=64);\n        }\n        \n        // Hollow inside\n        translate([0,0,-1]) cylinder(h=57, r1=16, r2=13, $fn=64);\n        translate([0,0,55]) cylinder(h=12, r1=13, r2=23, $fn=64);\n    }\n}\n\nmodule tension_rope() {\n    // Single rope passing through drum\n    rotate([0,90,0]) cylinder(h=40, r=0.5, $fn=12);\n}\n\nmodule rope_pattern() {\n    // Create 16 ropes around the drum\n    for (i=[0:15]) {\n        rotate([0,0,i*22.5]) {\n            translate([17.5,0,25]) tension_rope();\n            translate([-17.5,0,25]) tension_rope();\n        }\n    }\n}\n\nmodule drum_heads() {\n    // Top and bottom drum heads\n    difference() {\n        // Top membrane\n        translate([0,0,65]) cylinder(h=0.5, r=24.5, $fn=64);\n        // Small hole in center\n        translate([0,0,64.9]) cylinder(h=0.7, r=2, $fn=32);\n    }\n    \n    difference() {\n        // Bottom membrane\n        translate([0,0,-0.5]) cylinder(h=0.5, r=19.5, $fn=64);\n        // Small hole in center\n        translate([0,0,-0.7]) cylinder(h=0.7, r=2, $fn=32);\n    }\n}\n\nmodule decorative_bands() {\n    // Top decorative band\n    translate([0,0,64.5]) difference() {\n        cylinder(h=1, r=25.5, $fn=64);\n        cylinder(h=1.2, r=24.5, $fn=64);\n    }\n    \n    // Bottom decorative band\n    translate([0,0,-0.5]) difference() {\n        cylinder(h=1, r=20.5, $fn=64);\n        cylinder(h=1.2, r=19.5, $fn=64);\n    }\n    \n    // Middle belt\n    translate([0,0,27]) difference() {\n        cylinder(h=3, r=19.5, $fn=64);\n        cylinder(h=3.2, r=18.5, $fn=64);\n    }\n}\n\nmodule tuning_blocks() {\n    // Wooden blocks for rope tensioning - 8 blocks\n    for (i=[0:7]) {\n        rotate([0,0,i*45]) {\n            translate([27,0,25]) {\n                cube([4,3,6], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    drum_body();\n    drum_heads();\n    decorative_bands();\n    rope_pattern();\n    tuning_blocks();\n}",
    "renders": true
  },
  {
    "musical_instrument": "chenda",
    "openscad_code": "// Chenda - Traditional Kerala drum\n// Medium complexity realistic model\n// Overall dimensions: ~80mm diameter, ~50mm height\n\n$fn = 36;  // Smoother curves\n\nmodule drum_body() {\n    // Main cylindrical shell\n    difference() {\n        cylinder(h = 40, d = 80, center = true);\n        cylinder(h = 45, d = 70, center = true);\n    }\n    \n    // Reinforcement rings\n    for (i = [-1, 1]) {\n        translate([0, 0, i * 15])\n            cylinder(h = 3, d = 82, center = true);\n    }\n}\n\nmodule drum_head() {\n    // Drum skin surface\n    translate([0, 0, 21.5])\n        cylinder(h = 2, d = 78, center = true);\n    \n    // Skin tensioning ring\n    translate([0, 0, 22])\n        cylinder(h = 3, d = 82, center = true);\n}\n\nmodule tension_rope() {\n    // Rope segments around the drum\n    for (i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n            translate([41, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 40, d = 3, center = true);\n    }\n    \n    // Horizontal connecting ropes\n    for (j = [-1, 1]) {\n        translate([0, 0, j * 15])\n            difference() {\n                cylinder(h = 82, d = 85, center = true);\n                cylinder(h = 85, d = 82, center = true);\n            }\n    }\n}\n\nmodule decorative_tassels() {\n    // Hanging tassels on sides\n    for (angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n        translate([45, 0, -25])\n        for (k = [0:2]) {\n            translate([0, 0, -k * 5])\n            sphere(d = 4);\n        }\n    }\n}\n\nmodule base_ring() {\n    // Bottom support ring for stability\n    translate([0, 0, -25])\n    difference() {\n        cylinder(h = 5, d = 75, center = true);\n        cylinder(h = 6, d = 65, center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    drum_body();\n    \n    // Top drum head\n    drum_head();\n    \n    // Bottom drum head (mirrored)\n    mirror([0, 0, 1])\n    drum_head();\n    \n    // Tensioning system\n    tension_rope();\n    \n    // Decorative elements\n    decorative_tassels();\n    \n    // Base support\n    base_ring();\n}",
    "renders": true
  },
  {
    "musical_instrument": "thavil",
    "openscad_code": "// Realistic Thavil - South-Indian double-headed drum\n// Medium complexity for 3D printing\n\n// Overall dimensions\nshell_d = 70;\nshell_h = 45;\nhead_d = 60;\nhead_h = 2;\n\nmodule thavil_shell() {\n    // Main shell body - barrel shape\n    difference() {\n        // Outer barrel\n        cylinder(h = shell_h, d1 = shell_d * 0.9, d2 = shell_d, center = true);\n        \n        // Hollow center\n        cylinder(h = shell_h + 2, d1 = shell_d * 0.7, d2 = shell_d * 0.8, center = true);\n    }\n    \n    // Reinforcement rings\n    for (i = [-1, 1]) {\n        translate([0, 0, i * shell_h * 0.3]) {\n            cylinder(h = 4, d = shell_d + 6, $fn = 60);\n        }\n    }\n}\n\nmodule drum_head(diameter, height) {\n    // Goat skin drum head\n    difference() {\n        cylinder(h = height, d = diameter);\n        \n        // Slight depression\n        translate([0, 0, height - 0.5]) {\n            cylinder(h = 1, d = diameter * 0.9);\n        }\n    }\n    \n    // Rope holes around perimeter\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30]) {\n            translate([diameter/2 - 3, 0, height/2]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 4, d = 2);\n                }\n            }\n        }\n    }\n}\n\nmodule tuning_rope() {\n    // Main vertical ropes\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([head_d/2 - 2, 0, 0]) {\n                cylinder(h = shell_h + 8, d = 1.5);\n            }\n        }\n    }\n    \n    // Horizontal windings\n    for (z = [-shell_h/3, 0, shell_h/3]) {\n        rotate_extrude(angle = 360, $fn = 60) {\n            translate([head_d/2 - 1, 0, z]) {\n                circle(d = 1.5);\n            }\n        }\n    }\n}\n\nmodule karuppai() {\n    // Black tuning paste (karuppai) on right head\n    translate([0, 0, shell_h/2 + head_h + 0.5]) {\n        cylinder(h = 1, d = head_d * 0.6);\n        \n        // Concentric rings for texture\n        for (i = [1:3]) {\n            translate([0, 0, 1.1]) {\n                cylinder(h = 0.2, d = head_d * (0.6 - i * 0.1));\n            }\n        }\n    }\n}\n\nmodule decorative_studs() {\n    // Brass studs along shell\n    for (i = [0:17]) {\n        rotate([0, 0, i * 20]) {\n            translate([shell_d/2 + 2, 0, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 3, d = 2);\n                    translate([0, 0, 3]) {\n                        sphere(d = 2.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main shell\n    thavil_shell();\n    \n    // Left head (bass)\n    translate([0, 0, -shell_h/2 - head_h/2]) {\n        drum_head(head_d, head_h);\n    }\n    \n    // Right head (treble)\n    translate([0, 0, shell_h/2 + head_h/2]) {\n        drum_head(head_d, head_h);\n    }\n    \n    // Tuning rope system\n    tuning_rope();\n    \n    // Karuppai paste\n    karuppai();\n    \n    // Decorative elements\n    decorative_studs();\n}\n\n// Base stand for printing stability\ntranslate([0, 0, -shell_h/2 - head_h - 5]) {\n    cylinder(h = 5, d = shell_d + 10);\n}",
    "renders": true
  },
  {
    "musical_instrument": "damaru",
    "openscad_code": "// Realistic 3D printable damaru (double-headed hand drum)\n// Medium complexity ~100 lines, no overhangs, 60 mm total height\n\n$fn = 32;\n\n// Main parameters\nshell_t = 2;        // wall thickness\nr_body  = 20;       // radius of each drum shell\nh_body  = 18;       // half-height of each shell\nr_skin  = 19;       // membrane radius\nt_skin  = 0.8;      // membrane thickness\nr_cord  = 1.2;      // cord radius\nl_cord  = 35;       // cord length\nn_beads = 4;        // beads on each cord\nr_bead  = 2.5;      // bead radius\n\nmodule damaru_shell(r, h){\n    // Outer shell\n    difference(){\n        cylinder(h=h*2, r=r+shell_t, center=true);\n        cylinder(h=h*2+0.2, r=r, center=true);\n    }\n    // Inner cavity for sound\n    cylinder(h=h*2-2*shell_t, r=r-shell_t, center=true);\n}\n\nmodule membrane(r, t){\n    cylinder(h=t, r=r, center=true);\n}\n\nmodule cord_with_beads(){\n    // Central cord\n    rotate([90,0,0])\n        cylinder(h=l_cord, r=r_cord, center=true);\n\n    // Beads loop\n    for(i=[-1,1]){\n        translate([0, i*l_cord/2, 0]){\n            for(j=[0:n_beads-1]){\n                pos = j*6 - (n_beads-1)*3;\n                translate([0,0,pos])\n                    sphere(r=r_bead);\n            }\n        }\n    }\n}\n\nmodule drum_half(sign=1){\n    // Assemble one half\n    translate([0,0,sign*h_body]){\n        damaru_shell(r_body, h_body);\n        translate([0,0,sign*(h_body+t_skin/2)])\n            membrane(r_skin, t_skin);\n    }\n}\n\nmodule connector_ring(){\n    // Waist ring joining the two shells\n    cylinder(h=shell_t*2, r=r_body+shell_t/2, center=true);\n}\n\n// Build the damaru\nunion(){\n    // Two drum halves\n    drum_half(1);\n    drum_half(-1);\n    \n    // Connector ring\n    connector_ring();\n    \n    // Cord with beads through center\n    cord_with_beads();\n}",
    "renders": true
  },
  {
    "musical_instrument": "udukkai",
    "openscad_code": "// Udukkai - South Indian Damaru-style drum for 3D printing\n// Overall size ~65 mm height, printable in one piece\n\n// Constants\n$fn = 64;\nwall = 2;               // Wall thickness for printing\nbody_h = 45;            // Main body height\nbody_r = 30;            // Main body radius\nneck_r = 12;            // Neck radius\nneck_h = 8;\nbead_r = 4;             // Bead radius\ncord_r = 1.5;           // Cord radius\ncord_l = 50;            // Cord length\n\n// Main body shell (hollow hour-glass)\nmodule body_shell() {\n    difference() {\n        union() {\n            // Upper bulb\n            translate([0, 0, body_h/2])\n                sphere(r = body_r);\n            // Lower bulb\n            translate([0, 0, -body_h/2])\n                sphere(r = body_r * 1.05);\n            // Connecting neck\n            cylinder(r1 = neck_r, r2 = neck_r, h = body_h, center = true);\n        }\n        // Hollow it out\n        translate([0, 0, body_h/2])\n            sphere(r = body_r - wall);\n        translate([0, 0, -body_h/2])\n            sphere(r = body_r * 1.05 - wall);\n        cylinder(r = neck_r - wall, h = body_h + 2, center = true);\n    }\n}\n\n// Snare strings across the waist\nmodule snares() {\n    for (a = [0:45:135]) {\n        rotate([0, 0, a])\n            translate([0, 0, 0])\n                cube([neck_r * 1.8, 0.8, 0.8], center = true);\n    }\n}\n\n// Bead cord attachment points on sides\nmodule bead_cord() {\n    // Left side loop\n    translate([-body_r, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(r = cord_r, h = cord_l, center = true);\n    // Right side loop\n    translate([body_r, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(r = cord_r, h = cord_l, center = true);\n    \n    // Beads on cord\n    for (i = [-1, 1]) {\n        translate([i * body_r, 0, cord_l/2 - bead_r*2])\n            sphere(r = bead_r);\n        translate([i * body_r, 0, -cord_l/2 + bead_r*2])\n            sphere(r = bead_r);\n    }\n}\n\n// Gripping ridges around neck\nmodule grip_ridges() {\n    for (z = [-body_h/3:5:body_h/3]) {\n        translate([0, 0, z])\n            cylinder(r1 = neck_r + 1, r2 = neck_r + 1, h = 1, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    body_shell();\n    snares();\n    grip_ridges();\n    bead_cord();\n}",
    "renders": true
  },
  {
    "musical_instrument": "dholak",
    "openscad_code": "// Dholak - North Indian hand drum (realistic, medium complexity)\n// Approx. 85 mm long, designed for FDM printing\n\nmodule dholak_body() {\n    // Main shell - two intersecting spheres create bulged barrel shape\n    intersection() {\n        translate([0, 0, 0])\n            sphere(d = 40, $fn = 64);\n        translate([0, 0, -5])\n            sphere(d = 45, $fn = 64);\n    }\n}\n\nmodule hourglass_waist() {\n    // Central constriction ring\n    difference() {\n        cylinder(h = 8, d1 = 38, d2 = 34, $fn = 64);\n        translate([0, 0, 2])\n            cylinder(h = 8, d1 = 30, d2 = 26, $fn = 64);\n    }\n}\n\nmodule membrane_ring(pos, dia) {\n    // Metal ring holding goat skin membrane\n    difference() {\n        cylinder(h = 3, d = dia + 4, $fn = 64);\n        cylinder(h = 4, d = dia, $fn = 64);\n    }\n    translate([0, 0, 1])\n        cylinder(h = 2, d = dia + 2, $fn = 64);\n}\n\nmodule rope_tensioners() {\n    // 8 symmetric rope loops on each side\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([21, 0, 0])\n                cylinder(h = 30, d = 2, $fn = 16);\n    }\n}\n\nmodule tuning_peg() {\n    // Wooden peg for tightening ropes\n    cylinder(h = 8, d = 3, $fn = 12);\n    translate([0, 0, 4])\n        sphere(d = 4, $fn = 12);\n}\n\nmodule decorative_tassels() {\n    // Small tassels on rope ends\n    translate([0, 0, 15])\n        sphere(d = 2, $fn = 12);\n}\n\n// Assembly\nunion() {\n    // Left side (bass head)\n    translate([-20, 0, 0]) {\n        dholak_body();\n        translate([0, 0, 18]) {\n            membrane_ring([0,0,0], 30);\n            rope_tensioners();\n        }\n    }\n    \n    // Right side (treble head)\n    translate([20, 0, 0]) {\n        mirror([1, 0, 0])\n            dholak_body();\n        translate([0, 0, 18]) {\n            membrane_ring([0,0,0], 26);\n            rope_tensioners();\n        }\n    }\n    \n    // Central waist connecting both sides\n    translate([0, 0, 0])\n        hourglass_waist();\n    \n    // Tension ropes connecting both heads\n    for(i = [0:7]) {\n        angle = i * 45;\n        rotate([0, 0, angle]) {\n            translate([-21, 0, 35])\n                cylinder(h = 42, d = 1.5, $fn = 8);\n            translate([-21, 0, 35])\n                tuning_peg();\n            translate([21, 0, 35])\n                decorative_tassels();\n        }\n    }\n    \n    // Sound holes - small vent holes on sides\n    translate([0, 0, 5]) {\n        rotate([90, 0, 0])\n            cylinder(h = 10, d = 3, $fn = 16);\n        rotate([-90, 0, 0])\n            cylinder(h = 10, d = 3, $fn = 16);\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "nagara",
    "openscad_code": "// Nagara (South-Indian temple chariot wheel hub)\n// Overall printable size ≈ 75 mm tall\n\n// Basic parameters\n$fn = 36;\nhub_h = 35;\nhub_r = 25;\naxle_r = 8;\nrim_h = 12;\nrim_gap = 6;\nspoke_cnt = 8;\nspoke_w = 8;\nspoke_t = 5;\nbell_h = 6;\nbell_r = 10;\n\n// Central hub block\nmodule hub() {\n    // Main drum\n    cylinder(h = hub_h, r = hub_r);\n    \n    // Top lotus-like flare\n    translate([0, 0, hub_h])\n    cylinder(h = bell_h, r1 = hub_r, r2 = bell_r + 2);\n    \n    // Bottom base ring\n    translate([0, 0, -rim_h])\n    cylinder(h = rim_h, r = hub_r + 2);\n    \n    // Axle hole\n    difference() {\n        children();\n        translate([0, 0, -rim_h - 1])\n        cylinder(h = hub_h + rim_h + bell_h + 2, r = axle_r);\n    }\n}\n\n// Ornamented rim with relief pattern\nmodule rim() {\n    difference() {\n        // Solid rim\n        cylinder(h = rim_h, r = hub_r + 8);\n        \n        // Recessed groove for stringing\n        translate([0, 0, rim_h / 2 - 1])\n        cylinder(h = 2, r = hub_r + 6);\n    }\n    \n    // Small relief beads around edge\n    for (a = [0 : 360 / 24 : 359])\n    rotate([0, 0, a])\n    translate([hub_r + 7, 0, rim_h / 2])\n    sphere(r = 1.5);\n}\n\n// Simple spoke\nmodule spoke() {\n    difference() {\n        union() {\n            // Main beam\n            cube([hub_r - 3, spoke_w, spoke_t], center = true);\n            \n            // Tip flare\n            translate([hub_r + 2, 0, 0])\n            cube([6, spoke_w + 2, spoke_t + 2], center = true);\n        }\n        \n        // Lightening hole\n        translate([hub_r / 2, 0, 0])\n        cube([hub_r / 2 - 4, spoke_w - 2, spoke_t + 1], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Central hub with axle hole\n    hub();\n    \n    // Rim below hub\n    translate([0, 0, -rim_h])\n    rim();\n    \n    // Spokes array\n    for (i = [0 : spoke_cnt - 1])\n    rotate([0, 0, i * 360 / spoke_cnt])\n    translate([0, 0, hub_h / 2 - spoke_t / 2])\n    spoke();\n}",
    "renders": true
  },
  {
    "musical_instrument": "khartal",
    "openscad_code": "// Khartal - traditional Indian wood clapper\n// Overall dimensions: ~80mm long, ~30mm wide, ~12mm thick\n\n// Wall thickness for 3D printing\nwall = 1.6;\n\n// Main clapper body\nmodule clapper_body() {\n    difference() {\n        // Main body block\n        cube([75, 28, 10], center=true);\n        \n        // Hollow out interior\n        translate([0, 0, 1])\n        cube([75-wall*2, 28-wall*2, 10], center=true);\n    }\n}\n\n// Jingles - small metal discs\nmodule jingle(d=8, h=1.5) {\n    difference() {\n        cylinder(h=h, d=d, center=true);\n        cylinder(h=h+0.1, d=d-wall*1.5, center=true);\n    }\n}\n\n// Jingle holder - small protrusion\nmodule jingle_holder() {\n    difference() {\n        // Main holder\n        translate([0, 0, 5.5])\n        cube([10, 10, 3], center=true);\n        \n        // Slot for jingle\n        translate([0, 0, 5.5])\n        cube([8, 8, 3.2], center=true);\n    }\n}\n\n// Handle with grip pattern\nmodule handle() {\n    difference() {\n        // Main handle\n        translate([0, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=25, d1=22, d2=18, center=true);\n        \n        // Grip grooves\n        for(i=[-10:5:10]) {\n            translate([0, i, 0])\n            rotate([90, 0, 0])\n            cylinder(h=26, d=20.5, center=true);\n        }\n        \n        // Hollow handle\n        rotate([90, 0, 0])\n        cylinder(h=25.2, d=18-wall*2, center=true);\n    }\n}\n\n// Assembly of one khartal half\nmodule khartal_half() {\n    union() {\n        // Main body\n        clapper_body();\n        \n        // Handle\n        translate([-37.5, 0, 6])\n        handle();\n        \n        // Jingles and holders\n        for(i=[-1, 1]) {\n            translate([25, i*10, 0])\n            jingle_holder();\n            translate([25, i*10, 8])\n            jingle();\n        }\n        \n        // Reinforcement ribs\n        translate([0, 0, -4.5])\n        cube([60, 2, 1], center=true);\n    }\n}\n\n// Create pair of khartals\nmodule khartal_pair() {\n    // First khartal\n    khartal_half();\n    \n    // Second khartal\n    translate([0, 40, 0])\n    mirror([0, 1, 0])\n    khartal_half();\n}\n\n// Render the complete khartal pair\nkhartal_pair();",
    "renders": true
  },
  {
    "musical_instrument": "manjira",
    "openscad_code": "// Manjira (Indian hand cymbal) - medium complexity realistic model\n// Designed for 3D printing - single cymbal with proper wall thickness\n\n// Parameters for realistic manjira\n$fn = 50;  // Smooth curves\ncymbal_diameter = 80;\ncymbal_thickness = 3;\nrim_height = 8;\ncenter_boss_diameter = 25;\ncenter_boss_height = 5;\nhandle_length = 60;\nhandle_diameter = 12;\nhandle_hole_diameter = 8;\ngroove_depth = 0.5;\ngroove_width = 1;\n\n// Main cymbal body with curved profile\nmodule cymbal_body() {\n    difference() {\n        // Main cymbal disk with curved top\n        union() {\n            // Base disk\n            cylinder(h = cymbal_thickness, d = cymbal_diameter, center = true);\n            \n            // Curved profile - series of rings\n            for (i = [1:5]) {\n                translate([0, 0, cymbal_thickness/2])\n                    scale([1, 1, 0.3])\n                    sphere(d = cymbal_diameter - (i*5));\n            }\n            \n            // Raised rim\n            translate([0, 0, -cymbal_thickness/2])\n                cylinder(h = rim_height, d1 = cymbal_diameter, d2 = cymbal_diameter - 2, center = false);\n            \n            // Center boss\n            translate([0, 0, cymbal_thickness/2 + center_boss_height/2])\n                cylinder(h = center_boss_height, d = center_boss_diameter, center = true);\n        }\n        \n        // Central hole for handle\n        translate([0, 0, -handle_length/2])\n            cylinder(h = handle_length + cymbal_thickness + center_boss_height, d = handle_hole_diameter, center = false);\n        \n        // Concentric grooves for realistic texture\n        for (r = [15:5:35]) {\n            translate([0, 0, cymbal_thickness/2 + groove_depth/2])\n                cylinder(h = groove_depth, d = r*2, center = true);\n        }\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    union() {\n        // Main handle body\n        translate([0, 0, -handle_length/2])\n            cylinder(h = handle_length, d = handle_diameter, center = false);\n        \n        // Grip rings\n        for (i = [1:5:handle_length-5]) {\n            translate([0, 0, -handle_length/2 + i])\n                cylinder(h = 2, d = handle_diameter + 1, center = false);\n        }\n        \n        // Connector to cymbal\n        translate([0, 0, handle_length/2])\n            cylinder(h = 5, d1 = handle_diameter, d2 = center_boss_diameter, center = false);\n    }\n}\n\n// Assembly\nunion() {\n    // Cymbal positioned at origin\n    cymbal_body();\n    \n    // Handle attached below\n    translate([0, 0, -cymbal_thickness/2 - handle_length/2 - 2])\n        handle();\n}",
    "renders": true
  },
  {
    "musical_instrument": "jalra",
    "openscad_code": "// Realistic 3D-printable Jalra (cymbals)\n// Medium complexity with functional details\n\n// Overall size\noverall_diameter = 80;\noverall_height = 35;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main bell module\nmodule bell(diam, height, thick) {\n    difference() {\n        // Outer shell\n        cylinder(d1=diam, d2=diam*0.9, h=height, $fn=100);\n        // Inner hollow\n        translate([0,0,-0.1])\n            cylinder(d1=diam-thick*2, d2=diam*0.9-thick*2, h=height+0.2, $fn=100);\n    }\n}\n\n// Handle module\nmodule handle(len, diam) {\n    union() {\n        // Main grip\n        cylinder(d=diam, h=len, $fn=32);\n        // Top ridge\n        translate([0,0,len-2])\n            cylinder(d1=diam*1.2, d2=diam, h=2, $fn=32);\n        // Bottom ridge\n        translate([0,0,0])\n            cylinder(d1=diam, d2=diam*1.2, h=2, $fn=32);\n    }\n}\n\n// String loop module\nmodule string_loop(radius, thick) {\n    rotate([90,0,0])\n        difference() {\n            torus(radius, thick);\n            cube([radius*2, thick*2, thick*2], center=true);\n        }\n}\n\nmodule torus(major, minor) {\n    rotate_extrude($fn=100)\n        translate([major, 0, 0])\n            circle(r=minor, $fn=32);\n}\n\n// Beads module\nmodule beads(count, length) {\n    bead_diam = 6;\n    spacing = length / count;\n    for(i=[0:count-1]) {\n        translate([0, 0, i*spacing + spacing/2]) {\n            sphere(d=bead_diam, $fn=20);\n        }\n    }\n}\n\n// Main jalra assembly\nmodule jalra() {\n    // First bell\n    translate([0, -overall_diameter/2 - 10, overall_height/2]) {\n        bell(overall_diameter, overall_height, wall);\n        \n        // Handle attachment\n        translate([0, 0, -wall]) {\n            cylinder(d=overall_diameter*0.4, h=wall+2, $fn=32);\n        }\n        \n        // Handle\n        translate([0, 0, -overall_height/2 - 25]) {\n            handle(25, 15);\n        }\n    }\n    \n    // Second bell\n    translate([0, overall_diameter/2 + 10, overall_height/2]) {\n        bell(overall_diameter, overall_height, wall);\n        \n        // Handle attachment\n        translate([0, 0, -wall]) {\n            cylinder(d=overall_diameter*0.4, h=wall+2, $fn=32);\n        }\n        \n        // Handle\n        translate([0, 0, -overall_height/2 - 25]) {\n            handle(25, 15);\n        }\n    }\n    \n    // Connecting string\n    string_length = overall_diameter + 30;\n    translate([0, 0, overall_height - wall]) {\n        rotate([90, 0, 0]) {\n            // Main string\n            cylinder(d=2, h=string_length, $fn=16);\n            \n            // String loops at ends\n            translate([0, string_length/2, 0]) {\n                string_loop(6, 2);\n            }\n            translate([0, -string_length/2, 0]) {\n                string_loop(6, 2);\n            }\n            \n            // Beads along string\n            translate([0, 0, 0]) {\n                rotate([0, 0, 0]) {\n                    beads(8, string_length - 20);\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\njalra();",
    "renders": true
  },
  {
    "musical_instrument": "ghungroo",
    "openscad_code": "// Ghungroo - Indian classical dance bell anklet\n// Medium complexity realistic style\n\n// Overall dimensions\n$fn = 50;\nbell_diameter = 12;\nbell_height = 16;\nloop_thickness = 3;\nloop_outer = 18;\nloop_inner = 12;\nanklet_width = 8;\nanklet_height = 4;\nanklet_length = 80;\n\n// Main anklet band\nmodule anklet_band() {\n    translate([0, 0, 0]) {\n        difference() {\n            // Outer rounded band\n            hull() {\n                translate([-anklet_length/2, 0, 0]) \n                    cylinder(h=anklet_height, d=anklet_width, $fn=20);\n                translate([anklet_length/2, 0, 0]) \n                    cylinder(h=anklet_height, d=anklet_width, $fn=20);\n            }\n            // Inner hollow for comfort\n            hull() {\n                translate([-anklet_length/2, 0, 0]) \n                    cylinder(h=anklet_height+1, d=anklet_width-4, $fn=20);\n                translate([anklet_length/2, 0, 0]) \n                    cylinder(h=anklet_height+1, d=anklet_width-4, $fn=20);\n            }\n        }\n    }\n}\n\n// Individual bell with clapper\nmodule bell() {\n    difference() {\n        // Bell body\n        union() {\n            // Main bell shape\n            cylinder(h=bell_height-2, d=bell_diameter, $fn=30);\n            // Bell opening flare\n            translate([0, 0, bell_height-2])\n                cylinder(h=2, d1=bell_diameter, d2=bell_diameter+2, $fn=30);\n            // Hanging loop on top\n            translate([0, 0, bell_height])\n                rotate([90, 0, 0])\n                    cylinder(h=6, d=3, $fn=15);\n        }\n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h=bell_height-1, d=bell_diameter-2.5, $fn=30);\n    }\n    \n    // Clapper inside bell\n    translate([0, 0, bell_height/3])\n        sphere(d=3, $fn=20);\n    \n    // Decorative rings\n    for(i=[1:3]) {\n        translate([0, 0, i*4])\n            rotate([0, 0, 10*i])\n                difference() {\n                    cylinder(h=0.5, d=bell_diameter+0.2, $fn=30);\n                    cylinder(h=0.6, d=bell_diameter-1, $fn=30);\n                }\n    }\n}\n\n// Bell attachment loop\nmodule bell_loop() {\n    difference() {\n        // Outer ring\n        rotate_extrude(angle=360, $fn=30)\n            translate([loop_outer, 0, 0])\n                square([loop_thickness, loop_thickness*1.5], center=true);\n        // Inner hole\n        rotate_extrude(angle=360, $fn=30)\n            translate([loop_inner, 0, 0])\n                square([loop_thickness+1, loop_thickness*1.5+1], center=true);\n    }\n}\n\n// Complete ghungroo anklet\nmodule complete_ghungroo() {\n    // Main anklet band\n    anklet_band();\n    \n    // Position bells along anklet\n    bell_positions = [-35, -25, -15, -5, 5, 15, 25, 35];\n    \n    for(pos = bell_positions) {\n        translate([pos, 0, anklet_height/2 + 2]) {\n            // Bell hanging loop\n            bell_loop();\n            // Bell attached below\n            translate([0, 0, -loop_thickness*2])\n                rotate([90, 0, 0])\n                    bell();\n        }\n    }\n    \n    // Clasp mechanism (simple hook)\n    translate([anklet_length/2 + 5, 0, 0]) {\n        difference() {\n            // Hook body\n            rotate([0, 0, -30])\n                hull() {\n                    translate([0, 0, 0]) \n                        cylinder(h=2, d=6, $fn=15);\n                    translate([0, 8, 0]) \n                        cylinder(h=2, d=6, $fn=15);\n                }\n            // Hook opening\n            translate([0, 2, 0])\n                cube([12, 6, 3], center=true);\n        }\n    }\n    \n    // Clasp eye\n    translate([-anklet_length/2 - 5, 0, 0]) {\n        rotate([0, 0, 30])\n            difference() {\n                // Eye ring\n                cylinder(h=2, d=8, $fn=20);\n                cylinder(h=3, d=4, $fn=20);\n            }\n    }\n}\n\n// Render the complete model\ncomplete_ghungroo();",
    "renders": true
  },
  {
    "musical_instrument": "daf",
    "openscad_code": "// Daf (Persian frame drum) - Realistic style, medium complexity\n// 80 mm diameter, 3D printable with no overhangs\n\n// Main parameters\ndrum_diameter = 80;\ndrum_thickness = 20;\nrim_width = 5;\nmembrane_thickness = 0.8;\nring_diameter = 3;\nring_count = 8;\n\n// Main drum body (rim)\nmodule drum_rim() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = drum_thickness, d = drum_diameter, $fn = 128);\n        \n        // Inner hollow part\n        translate([0, 0, -0.1])\n            cylinder(h = drum_thickness + 0.2, d = drum_diameter - 2*rim_width, $fn = 128);\n    }\n}\n\n// Drum membrane (top)\nmodule membrane() {\n    translate([0, 0, drum_thickness - membrane_thickness/2])\n        cylinder(h = membrane_thickness, d = drum_diameter - 2*rim_width + 1, $fn = 128);\n}\n\n// Metal rings for jingles\nmodule metal_ring() {\n    rotate_extrude($fn = 64)\n        translate([drum_diameter/2 - rim_width/2, 0])\n            circle(r = ring_diameter/2, $fn = 32);\n}\n\n// Position rings around the rim\nmodule rings() {\n    for (i = [0 : ring_count - 1]) {\n        rotate([0, 0, i * 360/ring_count])\n            translate([0, 0, drum_thickness/2])\n                metal_ring();\n    }\n}\n\n// Handle cutout (grip hole)\nmodule handle_cutout() {\n    translate([0, -drum_diameter/2 + rim_width + 10, drum_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 8, $fn = 32);\n}\n\n// Small decorative rings inside the handle area\nmodule decorative_ring() {\n    rotate_extrude($fn = 64)\n        translate([drum_diameter/2 - rim_width - 15, 0])\n            circle(r = 1, $fn = 16);\n}\n\n// Assembly\nunion() {\n    // Main structure\n    drum_rim();\n    \n    // Top membrane\n    membrane();\n    \n    // Mirror for bottom membrane\n    mirror([0, 0, 1])\n        membrane();\n    \n    // Metal rings\n    rings();\n    \n    // Decorative inner rings\n    decorative_ring();\n    mirror([0, 0, 1])\n        decorative_ring();\n}\n\n// Cut out handle\ndifference() {\n    // The assembly above is already rendered\n    // This second difference applies to the entire model\n    children();\n} {\n    handle_cutout();\n}\n\n// Add small grip texture on rim\nmodule grip_texture() {\n    for (i = [0 : 35]) {\n        rotate([0, 0, i * 10])\n            translate([drum_diameter/2 - 2, 0, drum_thickness/2])\n                cube([1, 0.5, drum_thickness - 2], center = true);\n    }\n}\n\n// Apply grip texture\ngrip_texture();",
    "renders": true
  },
  {
    "musical_instrument": "bendir",
    "openscad_code": "// Bendir Frame\nmodule frame(outer_d=80, inner_d=70, thickness=5)\n{\n    difference()\n    {\n        cylinder(h=thickness, d=outer_d, $fn=64);\n        translate([0,0,-0.1])\n            cylinder(h=thickness+0.2, d=inner_d, $fn=64);\n    }\n}\n\n// Snare Gut\nmodule snare_gut(width=1.2, length=75, thickness=0.6)\n{\n    translate([0, -length/2, thickness/2])\n        cube([width, length, thickness], center=true);\n}\n\n// Snare Ring\nmodule snare_ring(od=10, id=7, h=3, teeth=8)\n{\n    difference()\n    {\n        cylinder(h=h, d=od, $fn=48);\n        cylinder(h=h+0.2, d=id, $fn=48);\n    }\n    for(i=[0:teeth-1])\n    {\n        rotate([0,0,i*360/teeth])\n            translate([od/2-0.5, 0, h/2])\n                cube([1, 1.5, h], center=true);\n    }\n}\n\n// Mounting Post\nmodule post(d=4, h=8)\n{\n    cylinder(h=h, d=d, $fn=16);\n}\n\n// Membrane\nmodule membrane(d=70, thickness=0.3)\n{\n    translate([0,0,5.15])\n        cylinder(h=thickness, d=d, $fn=128);\n}\n\n// Frame with four evenly spaced posts\nunion()\n{\n    frame();\n\n    for(a=[0:90:270])\n    {\n        rotate([0,0,a])\n            translate([0, 33, 0])\n                post();\n    }\n\n    // Snare assembly: ring + gut\n    translate([0, 0, 5])\n        snare_ring();\n\n    for(a=[0:45:315])\n    {\n        rotate([0,0,a])\n            snare_gut();\n    }\n\n    membrane();\n}",
    "renders": true
  },
  {
    "musical_instrument": "riq",
    "openscad_code": "// Riq (Middle-Eastern tambourine) – medium complexity, realistic style\n// 90 mm diameter, 25 mm thick, printable without supports\n\n$fn = 36;  // global resolution\n\n// overall dimensions\nd = 90;          // drum diameter\nt = 25;          // total thickness\nrim_h = 4;       // wooden rim height\nskin_t = 0.8;    // synthetic head thickness\ngap = 0.4;       // clearance for cymbal slots\nwall = 2.0;      // printable wall thickness\n\nmodule riq() {\n    difference() {\n        union() {\n            // wooden frame\n            frame();\n            // drum head\n            translate([0,0,rim_h])\n            cylinder(h = skin_t, d = d - 2*wall);\n            // cymbal pairs\n            cymbals();\n        }\n        // hollow inside\n        translate([0,0,-1])\n        cylinder(h = t+2, d = d - 2*wall);\n    }\n}\n\nmodule frame() {\n    // outer cylindrical shell\n    cylinder(h = rim_h, d = d);\n    // bottom plate\n    translate([0,0,-(t-rim_h)])\n    cylinder(h = t-rim_h, d = d - 2*wall);\n}\n\nmodule cymbals() {\n    // 5 equally spaced pairs around the rim\n    n = 5;\n    for(i = [0:n-1])\n        rotate([0,0, i*360/n])\n        translate([d/2 - 3, 0, rim_h/2])\n        cymbal_pair();\n}\n\nmodule cymbal_pair() {\n    // left cymbal\n    translate([-gap/2, 0, 0])\n    small_cymbal();\n    // right cymbal\n    translate([gap/2, 0, 0])\n    mirror([1,0,0])\n    small_cymbal();\n}\n\nmodule small_cymbal() {\n    // simple cymbal shape: thin disc with dome\n    union() {\n        cylinder(h = 0.6, d = 14);\n        translate([0,0,0.6])\n        sphere(d = 14);\n    }\n}\n\nriq();",
    "renders": true
  },
  {
    "musical_instrument": "darbuka",
    "openscad_code": "// Darbuka - Medium Complexity Realistic Style\n// 3D printable with no overhangs and proper wall thickness\n\n$fa = 2;\n$fs = 0.5;\n\n// Main parameters\nbody_height = 80;\nbody_top_d = 55;\nbody_bottom_d = 45;\nneck_height = 15;\nneck_top_d = 35;\nneck_bottom_d = 30;\nbase_height = 10;\nwall_thickness = 2;\nrim_height = 8;\nrim_thickness = 3;\n\nmodule darbuka_body() {\n    // Main body - truncated cone shape\n    difference() {\n        cylinder(h = body_height, d1 = body_bottom_d, d2 = body_top_d, center = false);\n        translate([0, 0, wall_thickness])\n            cylinder(h = body_height - wall_thickness, d1 = body_bottom_d - wall_thickness*2, d2 = body_top_d - wall_thickness*2, center = false);\n    }\n}\n\nmodule darbuka_neck() {\n    // Neck section - smaller truncated cone\n    difference() {\n        cylinder(h = neck_height, d1 = neck_bottom_d, d2 = neck_top_d, center = false);\n        translate([0, 0, wall_thickness])\n            cylinder(h = neck_height - wall_thickness, d1 = neck_bottom_d - wall_thickness*2, d2 = neck_top_d - wall_thickness*2, center = false);\n    }\n}\n\nmodule rim() {\n    // Playing rim - rounded top edge\n    difference() {\n        cylinder(h = rim_height, d = neck_top_d + rim_thickness*2, center = false);\n        translate([0, 0, rim_height - rim_thickness])\n            cylinder(h = rim_thickness + 0.1, d = neck_top_d, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = rim_height + 0.2, d = neck_top_d, center = false);\n    }\n}\n\nmodule base_ring() {\n    // Decorative base ring\n    for (i = [0:1:5]) {\n        rotate([0, 0, i * 60])\n            translate([body_bottom_d/2 - 2, 0, 0])\n                cube([4, 2, 3], center = true);\n    }\n}\n\nmodule finger_grooves() {\n    // Finger positioning grooves around neck\n    for (i = [0:1:7]) {\n        rotate([0, 0, i * 45])\n            translate([(neck_bottom_d + neck_top_d)/4, 0, body_height + neck_height/2])\n                difference() {\n                    cube([8, 2, neck_height], center = true);\n                    translate([0, 0, wall_thickness])\n                        cube([8, 2, neck_height - wall_thickness*2], center = true);\n                }\n    }\n}\n\nmodule darbuka_complete() {\n    union() {\n        // Main body\n        darbuka_body();\n        \n        // Neck\n        translate([0, 0, body_height])\n            darbuka_neck();\n        \n        // Rim\n        translate([0, 0, body_height + neck_height - rim_thickness])\n            rim();\n        \n        // Base ring\n        translate([0, 0, -0.1])\n            base_ring();\n        \n        // Finger grooves\n        finger_grooves();\n    }\n}\n\n// Render the complete darbuka\ndarbuka_complete();",
    "renders": true
  },
  {
    "musical_instrument": "doumbek",
    "openscad_code": "// Doumbek - Medium complexity realistic style\n// Optimized for 3D printing with 2mm wall thickness\n\n$fn = 100;  // Smooth curves\n\n// Main parameters\nbody_height = 80;\nbody_top_d = 65;\nbody_bottom_d = 45;\nneck_height = 15;\nhead_d = 70;\nbase_thickness = 5;\n\nmodule doumbek_body() {\n    // Create the main goblet shape\n    difference() {\n        // Main body - tapered cylinder\n        cylinder(h1=body_bottom_d, h2=body_top_d, h=body_height, center=false);\n        \n        // Hollow out interior\n        translate([0, 0, base_thickness])\n            cylinder(h1=body_bottom_d-4, h2=body_top_d-4, h=body_height, center=false);\n    }\n}\n\nmodule neck() {\n    // Neck ring between body and head\n    difference() {\n        cylinder(d=head_d, h=neck_height, center=false);\n        cylinder(d=head_d-4, h=neck_height+0.1, center=false);\n    }\n}\n\nmodule tuning_ring() {\n    // Tuning ring around the head\n    ring_height = 3;\n    ring_width = 4;\n    \n    for(i=[0:5]) {\n        rotate([0, 0, i*60]) {\n            translate([head_d/2 + ring_width/2, 0, body_height + neck_height - ring_height/2])\n                cube([ring_width, 4, ring_height], center=true);\n        }\n    }\n}\n\nmodule base_ring() {\n    // Decorative ring at bottom\n    translate([0, 0, 0])\n        cylinder(d=body_bottom_d + 6, h=base_thickness, center=false);\n}\n\nmodule sound_hole() {\n    // Small sound hole in side\n    translate([body_top_d/2 - 5, 0, body_height/2])\n        rotate([0, 90, 0])\n            cylinder(d=8, h=2, center=true);\n}\n\nmodule decorative_bands() {\n    // Two decorative bands around body\n    for(h=[body_height/3, body_height*2/3]) {\n        difference() {\n            cylinder(d1=body_bottom_d + (body_top_d-body_bottom_d)*h/body_height + 2, \n                     d2=body_bottom_d + (body_top_d-body_bottom_d)*h/body_height + 2,\n                     h=3, center=false);\n            cylinder(d1=body_bottom_d + (body_top_d-body_bottom_d)*h/body_height, \n                     d2=body_bottom_d + (body_top_d-body_bottom_d)*h/body_height,\n                     h=3.1, center=false);\n        }\n    }\n}\n\n// Assemble the doumbek\nunion() {\n    // Base\n    base_ring();\n    \n    // Main body\n    translate([0, 0, base_thickness])\n        doumbek_body();\n    \n    // Decorative bands\n    translate([0, 0, base_thickness])\n        decorative_bands();\n    \n    // Neck\n    translate([0, 0, body_height + base_thickness])\n        neck();\n    \n    // Head (simulated as flat surface)\n    translate([0, 0, body_height + neck_height + base_thickness])\n        cylinder(d=head_d, h=1, center=false);\n    \n    // Tuning ring\n    tuning_ring();\n    \n    // Sound hole\n    translate([0, 0, base_thickness])\n        sound_hole();\n}",
    "renders": true
  },
  {
    "musical_instrument": "riqq",
    "openscad_code": "// Riqq – frame drum with 5 jingling cymbals\n// Overall width ≈ 80 mm, easy to print without supports\n$fa = 3; $fs = 0.5;\n\n// GLOBAL PARAMETERS\ndrum_d      = 80;          // outer diameter of the drum frame\nframe_h     = 12;          // frame thickness\nframe_wall  = 4;           // printable wall thickness\nskin_thick  = 1;           // goatskin membrane\ncymbal_d    = 17;          // small zills\ncymbal_gap  = 1;           // clearance between cymbals\nslot_w      = 3;           // slot width for cymbal axle\n\n// MODULES\n\n// drum frame: torus minus inner hole\nmodule drum_frame() {\n    difference() {\n        cylinder(h = frame_h, d = drum_d, center = true);\n        translate([0,0,-1])  // small overlap for clean boolean\n            cylinder(h = frame_h + 2, d = drum_d - 2*frame_wall, center = true);\n    }\n}\n\n// goatskin membrane on top\nmodule drum_skin() {\n    translate([0,0,frame_h/2 + skin_thick/2])\n        cylinder(h = skin_thick, d = drum_d - 2*frame_wall, center = true);\n}\n\n// single cymbal disk with tiny hole for axle\nmodule cymbal() {\n    difference() {\n        cylinder(h = 1.2, d = cymbal_d, center = true);\n        cylinder(h = 1.4, d = cymbal_d - 6, center = true);\n    }\n}\n\n// cymbal pair on axle inside a C-shaped slot cut into frame\nmodule cymbal_pair(angle) {\n    // C-shaped slot cut\n    slot_h = frame_h;\n    slot_l = cymbal_d + 4;\n    slot_depth = frame_wall;\n\n    translate([0,0,0]) rotate([0,0,angle])\n        difference() {\n            children();  // pass frame geometry\n\n            // cut slot\n            translate([(drum_d - frame_wall)/2 - slot_depth/2, 0, 0])\n                rotate([0,90,0])\n                    cube([slot_l, slot_w, slot_h], center = true);\n        }\n\n    // axle pin\n    translate([(drum_d - frame_wall)/2 - slot_depth + 1, 0, 0])\n        rotate([0,90,0])\n            cylinder(h = slot_w + 2, d = 1.8, center = true);\n\n    // two cymbals with gap\n    translate([(drum_d - frame_wall)/2 - slot_depth + 1, 0, -(cymbal_gap + 1.2)/2])\n        cymbal();\n    translate([(drum_d - frame_wall)/2 - slot_depth + 1, 0,  (cymbal_gap + 1.2)/2])\n        cymbal();\n}\n\n// MAIN ASSEMBLY\nunion() {\n    drum_frame();\n    drum_skin();\n\n    // five cymbal pairs around circumference\n    for (i = [0:5-1]) {\n        angle = i * 360/5;\n        cymbal_pair(angle) drum_frame();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "mazhar",
    "openscad_code": "// Mazhar (Egyptian frame drum) - Realistic style, medium complexity\n// Overall size: ~90mm diameter, ~45mm height\n// Designed for 3D printing with no overhangs\n\n$fn = 64;  // Smooth curves\n\n// Main parameters\ndrum_diameter = 90;\ndrum_height = 45;\nframe_thickness = 5;\nmembrane_thickness = 0.8;\njingle_diameter = 12;\njingle_thickness = 2;\nnum_jingles = 5;\n\n// Main drum body (frame)\nmodule drum_frame() {\n    difference() {\n        // Outer frame\n        cylinder(h=drum_height, d=drum_diameter, center=true);\n        \n        // Inner cavity\n        cylinder(h=drum_height+2, d=drum_diameter-frame_thickness*2, center=true);\n    }\n}\n\n// Drum membrane (top)\nmodule drum_membrane() {\n    translate([0, 0, drum_height/2 + membrane_thickness/2]) {\n        cylinder(h=membrane_thickness, d=drum_diameter-frame_thickness, center=true);\n    }\n}\n\n// Metal jingles\nmodule jingle() {\n    difference() {\n        // Jingle disc\n        cylinder(h=jingle_thickness, d=jingle_diameter, center=true);\n        \n        // Center hole for mounting\n        cylinder(h=jingle_thickness+1, d=2, center=true);\n    }\n}\n\n// Jingle holder (zills)\nmodule jingle_holder() {\n    holder_width = 6;\n    holder_length = 20;\n    holder_height = 8;\n    \n    difference() {\n        // Main holder body\n        translate([0, drum_diameter/2 + holder_length/2 - 5, 0]) {\n            cube([holder_width, holder_length, holder_height], center=true);\n        }\n        \n        // Slot for jingle mounting\n        translate([0, drum_diameter/2 + holder_length/2 - 5, -holder_height/2 + jingle_thickness/2 + 1]) {\n            cube([holder_width-2, holder_length-2, holder_height], center=false);\n        }\n    }\n}\n\n// Mounting pins for jingles\nmodule jingle_mounts() {\n    for (i = [0:num_jingles-1]) {\n        rotate([0, 0, i * (360/num_jingles)]) {\n            translate([0, drum_diameter/2 - 5, drum_height/4]) {\n                jingle_holder();\n            }\n            translate([0, drum_diameter/2 - 5, -drum_height/4]) {\n                rotate([180, 0, 0]) {\n                    jingle_holder();\n                }\n            }\n        }\n    }\n}\n\n// Tuning mechanism - simple pegs\nmodule tuning_pegs() {\n    peg_height = 8;\n    peg_radius = 2.5;\n    \n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45]) {\n            translate([drum_diameter/2 - frame_thickness - peg_radius, 0, drum_height/2 - peg_height/2 - 2]) {\n                cylinder(h=peg_height, r=peg_radius);\n            }\n            translate([drum_diameter/2 - frame_thickness - peg_radius, 0, -drum_height/2 + peg_height/2 + 2]) {\n                cylinder(h=peg_height, r=peg_radius);\n            }\n        }\n    }\n}\n\n// Decorative ring on frame\nmodule decorative_ring() {\n    ring_height = 3;\n    ring_offset = 5;\n    \n    translate([0, 0, drum_height/2 - ring_height/2 - ring_offset]) {\n        difference() {\n            cylinder(h=ring_height, d=drum_diameter-2, center=true);\n            cylinder(h=ring_height+1, d=drum_diameter-frame_thickness*2, center=true);\n        }\n    }\n    translate([0, 0, -drum_height/2 + ring_height/2 + ring_offset]) {\n        difference() {\n            cylinder(h=ring_height, d=drum_diameter-2, center=true);\n            cylinder(h=ring_height+1, d=drum_diameter-frame_thickness*2, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main drum parts\n    drum_frame();\n    drum_membrane();\n    decorative_ring();\n    \n    // Hardware\n    tuning_pegs();\n    jingle_mounts();\n    \n    // Add jingles (rotate freely)\n    for (i = [0:num_jingles-1]) {\n        rotate([0, 0, i * (360/num_jingles)]) {\n            translate([0, drum_diameter/2 + 10, drum_height/4]) {\n                rotate([90, 0, 0]) {\n                    jingle();\n                }\n            }\n            translate([0, drum_diameter/2 + 10, -drum_height/4]) {\n                rotate([90, 0, 0]) {\n                    jingle();\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "davul",
    "openscad_code": "// Davul (Turkish double-headed drum)\n// Medium-complexity, realistic style, 3D-printable\n\n$fn = 64; // Smooth curves for printing\n\nmodule drum_body() {\n    // Main cylindrical shell\n    difference() {\n        cylinder(h = 40, d = 80, center = true);\n        // Hollow interior\n        cylinder(h = 42, d = 74, center = true);\n    }\n    \n    // Reinforcement rings at top and bottom\n    for (z = [-20, 20]) {\n        translate([0, 0, z]) {\n            cylinder(h = 3, d = 82);\n        }\n    }\n}\n\nmodule drum_skin() {\n    // Thin membranes on both sides\n    for (z = [-21.5, 21.5]) {\n        translate([0, 0, z]) {\n            difference() {\n                cylinder(h = 1, d = 78);\n                cylinder(h = 1.2, d = 76);\n            }\n        }\n    }\n}\n\nmodule tension_ring() {\n    // Metal rings for skin tensioning\n    for (z = [-22.5, 22.5]) {\n        translate([0, 0, z]) {\n            difference() {\n                cylinder(h = 2, d = 86);\n                cylinder(h = 2.2, d = 80);\n            }\n        }\n    }\n}\n\nmodule tuning_lug() {\n    // Single tuning lug with threaded rod\n    difference() {\n        // Main lug body\n        cube([6, 4, 10], center = true);\n        // Hole for tension rod\n        rotate([0, 90, 0]) {\n            cylinder(h = 8, d = 2, center = true);\n        }\n    }\n    // Tension rod\n    rotate([0, 90, 0]) {\n        translate([0, 0, 5]) {\n            cylinder(h = 20, d = 1.5);\n        }\n    }\n}\n\nmodule tuning_system() {\n    // 8 tuning lugs around each side\n    for (side = [-1, 1]) {\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45]) {\n                translate([side * 40, 0, side * 22.5]) {\n                    rotate([0, 90, 0]) {\n                        tuning_lug();\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule carrying_handle() {\n    // Crescent-shaped handle\n    translate([0, 45, 0]) {\n        difference() {\n            // Handle body\n            rotate_extrude(angle = 180, convexity = 10) {\n                translate([10, 0]) {\n                    circle(r = 3);\n                }\n            }\n            // Hollow center\n            rotate_extrude(angle = 180, convexity = 10) {\n                translate([10, 0]) {\n                    circle(r = 1.5);\n                }\n            }\n        }\n    }\n}\n\nmodule decorative_rope() {\n    // Rope zig-zag pattern around body\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30]) {\n            translate([41, 0, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 40, d = 2);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    drum_body();\n    drum_skin();\n    tension_ring();\n    tuning_system();\n    carrying_handle();\n    decorative_rope();\n}",
    "renders": true
  },
  {
    "musical_instrument": "tapan",
    "openscad_code": "// Tapan (Macedonian / Middle-Eastern goblet drum)\n// Realistic style, medium complexity\n// Approx. 70 mm diameter, 45 mm height – easy to 3D-print in one piece\n// No severe overhangs; wall thickness ≥ 1.2 mm everywhere\n\n$fa = 2; $fs = 0.5;\n\n// Overall scale factor; tweak to resize\nSCALE = 1;\n\n// Wall thickness (mm)\nWALL = 1.5;\n\nmodule tapan() {\n    difference() {\n        union() {\n            // Main drum body (goblet)\n            body();\n            // Tension ring / rim on top\n            rim();\n            // Decorative rings around the shell\n            decorative_rings();\n        }\n        // Hollow out the inside\n        hollow();\n    }\n}\n\nmodule body() {\n    // Create profile and rotate\n    rotate_extrude()\n    polygon(points=[\n        [0, 0],          // bottom center\n        [15, 0],         // bottom edge\n        [25, 5],         // flare out\n        [28, 20],        // waist\n        [33, 35],        // flare up\n        [35, 40],        // top rim shoulder\n        [35-1.5, 42],    // inner lip before skin\n        [0, 42]          // center top\n    ]);\n}\n\nmodule rim() {\n    // Metal tension ring\n    translate([0, 0, 40])\n    difference() {\n        cylinder(h=3, r1=36, r2=36);\n        cylinder(h=3.2, r1=34, r2=34);\n    }\n}\n\nmodule decorative_rings() {\n    // Three equally spaced rings around shell\n    for(z=[10, 20, 30])\n    translate([0, 0, z])\n    difference() {\n        cylinder(h=2, r1=29, r2=29);\n        cylinder(h=2.2, r1=27.5, r2=27.5);\n    }\n}\n\nmodule hollow() {\n    // Remove interior with a slightly smaller profile\n    rotate_extrude()\n    offset(-WALL)\n    polygon(points=[\n        [0, 0],\n        [15, 0],\n        [25, 5],\n        [28, 20],\n        [33, 35],\n        [35-WALL, 40-WALL],\n        [35-2*WALL, 42],\n        [0, 42]\n    ]);\n}\n\n// Render\nscale(SCALE)\ntapan();",
    "renders": true
  },
  {
    "musical_instrument": "tupan",
    "openscad_code": "// OpenSCAD Tupan Drum (realistic, medium complexity)\n// Overall dimensions: ~80 mm long, 30 mm diameter\n\n$fn = 64;  // Smooth curves for realism\n\nmodule drum_shell(od=30, h=40, wall=2) {\n    // Main wooden cylindrical shell\n    difference() {\n        cylinder(d=od, h=h, center=true);\n        translate([0,0,-h/2-1]) cylinder(d=od-2*wall, h=h+2, center=true);\n    }\n}\n\nmodule metal_hoop(od=32, h=2) {\n    // Metal reinforcing hoops at top and bottom\n    difference() {\n        cylinder(d=od, h=h, center=true);\n        translate([0,0,-h/2-1]) cylinder(d=od-2, h=h+2, center=true);\n    }\n}\n\nmodule tension_rod() {\n    // A single tension rod with nut\n    union() {\n        // Rod shaft\n        cylinder(d=1.2, h=18, center=true);\n        // Wing nut\n        translate([0,0,9.5]) difference() {\n            cylinder(d=3, h=2, center=true);\n            translate([0,0,-1.1]) cylinder(d=1.5, h=2.2, center=true);\n        }\n    }\n}\n\nmodule tension_system(count=8) {\n    // Ring of tension rods and hoops\n    for (i=[0:count-1]) {\n        rotate([0,0,i*360/count]) {\n            translate([15.5,0,20]) rotate([90,0,0]) tension_rod();\n            translate([15.5,0,-20]) rotate([90,0,0]) tension_rod();\n        }\n    }\n    // Top and bottom hoops\n    translate([0,0,20]) metal_hoop(od=32, h=2);\n    translate([0,0,-20]) metal_hoop(od=32, h=2);\n}\n\nmodule drum_head(thick=0.5) {\n    // Thin synthetic drum head membrane\n    cylinder(d=28, h=thick, center=true);\n}\n\nmodule carrying_handle() {\n    // Simple curved carrying handle\n    difference() {\n        // Handle arc\n        translate([0,16,0]) rotate([90,0,0]) cylinder(d=4, h=30, center=true);\n        // Hollow center\n        translate([0,16,0]) rotate([90,0,0]) cylinder(d=2.5, h=32, center=true);\n    }\n    // Handle brackets\n    translate([0,16,15]) cube([6,2,2], center=true);\n    translate([0,16,-15]) cube([6,2,2], center=true);\n}\n\nmodule drum_body() {\n    union() {\n        // Main shell\n        drum_shell(od=30, h=40, wall=2);\n        \n        // Carrying handle on one side\n        translate([0,-15,0]) carrying_handle();\n        \n        // Drum heads\n        translate([0,0,21]) drum_head();\n        translate([0,0,-21]) drum_head();\n        \n        // Tension system\n        tension_system(count=8);\n    }\n}\n\n// Render the complete tupan\ndrum_body();",
    "renders": true
  },
  {
    "musical_instrument": "naqareh",
    "openscad_code": "// Naqareh model - medium complexity realistic style\n// Traditional Persian kettle drum pair with frame\n\n// Main parameters\n$fn = 32;\ndrum_diameter = 36;\ndrum_height = 30;\nframe_height = 40;\nframe_width = 90;\nframe_depth = 45;\nwall_thickness = 2;\nskin_thickness = 1;\n\n// Drum module with membrane and tension ropes\nmodule drum(diameter, height, wall, show_membrane = true) {\n    difference() {\n        // Main drum body\n        cylinder(d = diameter, h = height);\n        \n        // Hollow interior\n        translate([0, 0, wall])\n            cylinder(d = diameter - 2*wall, h = height - wall);\n    }\n    \n    // Bottom reinforcement ring\n    translate([0, 0, 0])\n        cylinder(d = diameter + 4, h = wall);\n    \n    // Top rim\n    translate([0, 0, height - wall])\n        cylinder(d = diameter + 4, h = wall);\n    \n    // Drum membrane (goatskin)\n    if (show_membrane) {\n        translate([0, 0, height])\n            cylinder(d = diameter + 2, h = skin_thickness);\n    }\n    \n    // Tension rope loops around drum\n    for (i = [0:8]) {\n        rotate([0, 0, i * 45])\n            translate([diameter/2 + 2, 0, height/2])\n                rotate([90, 0, 0])\n                    cylinder(d = 2, h = 4);\n    }\n}\n\n// Drum support frame\nmodule frame(width, depth, height) {\n    // Base platform\n    translate([0, 0, 0])\n        cube([width, depth, wall_thickness], center = true);\n    \n    // Left support post\n    translate([-width/2 + 10, 0, height/2])\n        cube([wall_thickness * 3, depth * 0.8, height], center = true);\n    \n    // Right support post\n    translate([width/2 - 10, 0, height/2])\n        cube([wall_thickness * 3, depth * 0.8, height], center = true);\n    \n    // Cross brace\n    translate([0, 0, height * 0.7])\n        cube([width * 0.8, wall_thickness * 2, wall_thickness * 3], center = true);\n}\n\n// Assembly\nmodule naqareh() {\n    // Frame\n    frame(frame_width, frame_depth, frame_height);\n    \n    // Left drum (larger, lower pitch)\n    translate([-frame_width/4, 0, wall_thickness])\n        drum(drum_diameter * 1.1, drum_height * 1.1, wall_thickness);\n    \n    // Right drum (smaller, higher pitch)\n    translate([frame_width/4, 0, wall_thickness])\n        drum(drum_diameter, drum_height, wall_thickness);\n    \n    // Decorative elements\n    // Side panels\n    translate([0, -frame_depth/2 - wall_thickness, frame_height/2])\n        cube([frame_width * 0.9, wall_thickness, frame_height * 0.8], center = true);\n    \n    translate([0, frame_depth/2 + wall_thickness, frame_height/2])\n        cube([frame_width * 0.9, wall_thickness, frame_height * 0.8], center = true);\n    \n    // Carrying handles\n    translate([-frame_width/2 - 5, 0, frame_height * 0.8])\n        rotate([0, 90, 0])\n            cylinder(d = 6, h = 10);\n    \n    translate([frame_width/2 + 5, 0, frame_height * 0.8])\n        rotate([0, 90, 0])\n            cylinder(d = 6, h = 10);\n}\n\n// Render the complete naqareh\nnaqareh();",
    "renders": true
  },
  {
    "musical_instrument": "dafli",
    "openscad_code": "// Dafli (Indian frame drum) – medium-complexity realistic model\n// Overall diameter ≈ 90 mm, depth ≈ 15 mm, wall thickness 2 mm\n\nmodule dafli() {\n    // Main wooden frame ring\n    difference() {\n        cylinder(h = 12, d = 90, center = true);\n        cylinder(h = 14, d = 86, center = true);   // hollow center\n    }\n\n    // Front goatskin membrane\n    translate([0, 0, 6])\n        cylinder(h = 0.6, d = 88);\n\n    // Rear goatskin membrane\n    translate([0, 0, -6])\n        cylinder(h = 0.6, d = 88);\n\n    // Brass jingle pairs around rim\n    for (i = [0 : 15]) {\n        rotate([0, 0, i * 22.5])\n            translate([44, 0, 0])\n                jingle();\n    }\n\n    // Hand grip holes on back\n    for (a = [45, 135, 225, 315]) {\n        rotate([0, 0, a])\n            translate([28, 0, -6])\n                rotate([90, 0, 0])\n                    cylinder(h = 3, d = 8, $fn = 16);\n    }\n}\n\nmodule jingle() {\n    // Jingle bracket\n    difference() {\n        cube([8, 3, 3], center = true);\n        cube([6, 2, 4], center = true);\n    }\n\n    // Actual jingle disc\n    translate([0, 0, 2.5])\n        rotate([90, 0, 0])\n            cylinder(h = 0.8, d = 6, $fn = 32);\n}\n\ndafli();",
    "renders": true
  },
  {
    "musical_instrument": "kendang",
    "openscad_code": "// Kendang drum - traditional Indonesian two-headed drum\n// Medium complexity realistic style for 3D printing\n\n$fn = 32; // Smooth curves for printing\n\n// Overall dimensions\nkendang_length = 80;\nmax_diameter = 35;\nmin_diameter = 25;\nwall_thickness = 2;\n\n// Drum shell module\nmodule drum_shell() {\n    // Main body - tapered cylinder\n    difference() {\n        // Outer shell\n        union() {\n            // Left side (larger head)\n            translate([-kendang_length/2, 0, 0])\n                scale([1, max_diameter/max_diameter, max_diameter/max_diameter])\n                    sphere(d=max_diameter);\n            \n            // Center tapered section\n            hull() {\n                translate([-kendang_length/2, 0, 0])\n                    sphere(d=max_diameter);\n                translate([kendang_length/2, 0, 0])\n                    sphere(d=min_diameter);\n            }\n            \n            // Right side (smaller head)\n            translate([kendang_length/2, 0, 0])\n                sphere(d=min_diameter);\n        }\n        \n        // Hollow interior\n        translate([-kendang_length/2-5, 0, 0])\n            scale([1.2, 0.8, 0.8])\n                sphere(d=max_diameter - wall_thickness*2);\n        \n        translate([kendang_length/2+5, 0, 0])\n            scale([1.2, 0.8, 0.8])\n                sphere(d=min_diameter - wall_thickness*2);\n    }\n}\n\n// Drum head rings\nmodule drum_head_ring(diameter, position) {\n    // Ring thickness\n    ring_thickness = 3;\n    \n    translate([position, 0, 0])\n        rotate([0, 90, 0])\n            difference() {\n                // Outer ring\n                cylinder(h=ring_thickness, d=diameter + 4, center=true);\n                // Inner cutout\n                cylinder(h=ring_thickness + 1, d=diameter - 2, center=true);\n            }\n}\n\n// Decorative rope tensioning system\nmodule rope_tensioning() {\n    rope_diameter = 1.2;\n    num_ropes = 8;\n    \n    for (i = [0:num_ropes-1]) {\n        angle = i * 360/num_ropes;\n        \n        // Left side ropes\n        translate([-kendang_length/2 - 5, 0, 0])\n            rotate([0, angle, 0])\n                translate([max_diameter/2 + 1, 0, 0])\n                    cylinder(h=20, d=rope_diameter);\n        \n        // Right side ropes\n        translate([kendang_length/2 + 5, 0, 0])\n            rotate([0, angle, 0])\n                translate([min_diameter/2 + 1, 0, 0])\n                    cylinder(h=20, d=rope_diameter);\n        \n        // Connecting ropes\n        translate([-kendang_length/2 - 5, 0, 0])\n            rotate([0, angle, 0])\n                translate([max_diameter/2 + 1, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=kendang_length + 10, d=rope_diameter);\n    }\n}\n\n// Carving details on shell\nmodule shell_details() {\n    // Horizontal grooves for grip\n    for (i = [-kendang_length/2+5 : 10 : kendang_length/2-5]) {\n        translate([i, 0, 0])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=1, d=max_diameter - abs(i/4), center=true);\n                    cylinder(h=2, d=max_diameter - abs(i/4) - 1, center=true);\n                }\n    }\n    \n    // Small decorative studs\n    stud_radius = 1.5;\n    for (j = [0:3]) {\n        angle = j * 90;\n        translate([-kendang_length/4, 0, 0])\n            rotate([0, angle, 0])\n                translate([max_diameter/2 - 2, 0, 0])\n                    sphere(d=stud_radius*2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main drum shell\n    drum_shell();\n    \n    // Drum heads and rings\n    drum_head_ring(max_diameter, -kendang_length/2 - 2);\n    drum_head_ring(min_diameter, kendang_length/2 + 2);\n    \n    // Rope tensioning system\n    %rope_tensioning();\n    \n    // Decorative details\n    shell_details();\n}",
    "renders": true
  },
  {
    "musical_instrument": "gendang",
    "openscad_code": "// Traditional Gendang (Malay/Indonesian drum)\n// Medium complexity, realistic style, 3D printable\n\n// Overall dimensions\ndrum_length = 90;\ndrum_diameter = 45;\nwall_thickness = 2.5;\n\n// Membrane parameters\nmembrane_thickness = 0.8;\nmembrane_overlap = 3;\n\n// Rope lashing parameters\nrope_diameter = 1.5;\nrope_segments = 24;\nrope_pitch = 8;\n\n// Decorative rings\nring_width = 4;\nring_thickness = 2;\n\n// Shell construction module\nmodule drum_shell() {\n    difference() {\n        // Main shell body\n        cylinder(h = drum_length, d = drum_diameter, $fn = 64);\n        \n        // Hollow interior\n        cylinder(h = drum_length + 1, d = drum_diameter - 2*wall_thickness, $fn = 64);\n        \n        // Shaping the hourglass profile\n        translate([0, 0, -1])\n            cylinder(h = drum_length + 2, d1 = drum_diameter - 8, d2 = drum_diameter, $fn = 64);\n        translate([0, 0, drum_length/2])\n            cylinder(h = drum_length/2 + 1, d1 = drum_diameter - 8, d2 = drum_diameter, $fn = 64);\n    }\n}\n\n// Membrane module\nmodule membrane(top = true) {\n    z_pos = top ? drum_length + membrane_thickness/2 : -membrane_thickness/2;\n    \n    // Main membrane\n    translate([0, 0, z_pos])\n        cylinder(h = membrane_thickness, d = drum_diameter + 2*membrane_overlap, $fn = 64);\n}\n\n// Rope lashing for tuning\nmodule rope_lashing(top = true) {\n    z_offset = top ? drum_length + membrane_thickness : 0;\n    rope_radius = (drum_diameter + 4)/2;\n    \n    for (i = [0:rope_segments-1]) {\n        angle = i * 360/rope_segments;\n        x = rope_radius * cos(angle);\n        y = rope_radius * sin(angle);\n        \n        translate([x, y, z_offset])\n            rotate([0, 0, angle])\n            cylinder(h = rope_pitch, d = rope_diameter, $fn = 8);\n    }\n    \n    // Horizontal ropes connecting vertical ones\n    for (i = [0:2]) {\n        z_pos = z_offset + rope_pitch/2 + i * rope_pitch;\n        translate([0, 0, z_pos])\n            difference() {\n                cylinder(h = rope_diameter, d = 2*rope_radius + rope_diameter, $fn = 64);\n                cylinder(h = rope_diameter + 1, d = 2*rope_radius - rope_diameter, $fn = 64);\n            }\n    }\n}\n\n// Decorative rings\nmodule decorative_rings() {\n    for (i = [0:1]) {\n        z_pos = i == 0 ? drum_length * 0.25 : drum_length * 0.75;\n        translate([0, 0, z_pos])\n            difference() {\n                cylinder(h = ring_thickness, d = drum_diameter + 2*ring_width, $fn = 64);\n                cylinder(h = ring_thickness + 1, d = drum_diameter, $fn = 64);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Main drum shell\n    drum_shell();\n    \n    // Decorative rings\n    decorative_rings();\n    \n    // Top membrane\n    membrane(true);\n    \n    // Bottom membrane\n    membrane(false);\n    \n    // Top rope lashing\n    rope_lashing(true);\n    \n    // Bottom rope lashing\n    rope_lashing(false);\n}",
    "renders": true
  },
  {
    "musical_instrument": "rebana",
    "openscad_code": "// Rebana - Traditional Indonesian Frame Drum\n// Realistic style, medium complexity\n// Overall diameter ~80mm, height ~25mm\n\n// Parameters\n$fn = 48;\nwall_thickness = 2;\nmembrane_thickness = 0.5;\nframe_height = 15;\nframe_width = 8;\nhandle_length = 30;\nhandle_diameter = 6;\njingle_diameter = 4;\njingle_thickness = 1.5;\nnum_jingles = 8;\n\n// Main drum frame\nmodule drum_frame() {\n    difference() {\n        // Outer frame\n        cylinder(h = frame_height, d = 80, center = true);\n        \n        // Hollow center\n        cylinder(h = frame_height + 2, d = 80 - 2*frame_width, center = true);\n    }\n}\n\n// Drum membrane (top)\nmodule membrane() {\n    translate([0, 0, frame_height/2 + membrane_thickness/2])\n        cylinder(h = membrane_thickness, d = 80 - 2*frame_width + 2, center = true);\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    translate([0, 0, -frame_height/2 - handle_length/2]) {\n        // Main handle shaft\n        cylinder(h = handle_length, d = handle_diameter, center = true);\n        \n        // Grip rings\n        for (i = [0:1:4]) {\n            translate([0, 0, -handle_length/2 + i*handle_length/5 + handle_length/10])\n                cylinder(h = 4, d1 = handle_diameter + 2, d2 = handle_diameter + 2, center = true);\n        }\n        \n        // Transition from frame to handle\n        translate([0, 0, -frame_height/2])\n            cylinder(h = 8, d1 = 12, d2 = handle_diameter, center = false);\n    }\n}\n\n// Jingles (metal rattles)\nmodule jingle(pos_angle) {\n    // Position along rim\n    rim_radius = 40 - frame_width/2;\n    x_pos = rim_radius * cos(pos_angle);\n    y_pos = rim_radius * sin(pos_angle);\n    \n    translate([x_pos, y_pos, frame_height/2 + 5]) {\n        // Jingle holder\n        rotate([0, 90, 0])\n            cylinder(h = jingle_thickness*2, d = jingle_diameter/2, center = true);\n        \n        // Jingle disc\n        translate([jingle_thickness, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = jingle_thickness, d = jingle_diameter, center = true);\n    }\n}\n\n// Jingles array\nmodule all_jingles() {\n    for (i = [0:1:num_jingles-1]) {\n        angle = i * 360/num_jingles;\n        jingle(angle);\n    }\n}\n\n// Assembly\nunion() {\n    // Main drum parts\n    drum_frame();\n    membrane();\n    \n    // Handle\n    handle();\n    \n    // Jingles\n    all_jingles();\n}",
    "renders": true
  },
  {
    "musical_instrument": "bedug",
    "openscad_code": "// Bedug (Indonesian drum) - realistic medium complexity\n// Overall dimensions: ~80mm height, ~60mm width\n\n// Main drum body\nmodule drum_body() {\n    // Outer shell - slightly tapered cylinder\n    cylinder(h=70, r1=30, r2=25, $fn=100);\n    \n    // Inner cavity for hollowing\n    translate([0, 0, 5])\n        cylinder(h=60, r1=28, r2=23, $fn=100);\n}\n\n// Drum membrane (leather head)\nmodule drum_head() {\n    // Top membrane\n    translate([0, 0, 70])\n        cylinder(h=2, r=30, $fn=100);\n    \n    // Bottom membrane\n    translate([0, 0, 0])\n        cylinder(h=2, r=30, $fn=100);\n    \n    // Reinforcement rings\n    translate([0, 0, 71])\n        cylinder(h=3, r=32, r1=32, r2=30, $fn=100);\n    \n    translate([0, 0, -2])\n        cylinder(h=3, r=32, r1=30, r2=32, $fn=100);\n}\n\n// Rope tensioning system\nmodule rope_system() {\n    // Top rope ring\n    translate([0, 0, 73])\n        for(i=[0:15:359]) {\n            rotate([0, 0, i])\n                translate([32, 0, 0])\n                    cylinder(h=5, r=1.5, $fn=8);\n        }\n    \n    // Bottom rope ring\n    translate([0, 0, -2])\n        for(i=[0:15:359]) {\n            rotate([0, 0, i])\n                translate([32, 0, 0])\n                    cylinder(h=5, r=1.5, $fn=8);\n        }\n    \n    // Vertical ropes connecting top and bottom\n    for(i=[0:30:359]) {\n        rotate([0, 0, i])\n            translate([32, 0, 35.5])\n                scale([0.8, 0.8, 1])\n                    rotate([90, 0, 0])\n                        cylinder(h=75, r=0.8, $fn=6);\n    }\n}\n\n// Decorative carvings on drum body\nmodule carvings() {\n    // Horizontal grooves\n    for(z=[10:15:60]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h=1, r=30, $fn=100);\n                cylinder(h=1.2, r=28, $fn=100);\n            }\n    }\n    \n    // Vertical decorative panels\n    for(i=[0:45:359]) {\n        rotate([0, 0, i])\n            translate([29.5, 0, 35])\n                cube([1, 8, 50], center=true);\n    }\n}\n\n// Hanging rope\nmodule hanging_rope() {\n    // Top loop\n    translate([0, 35, 75])\n        rotate([90, 0, 0])\n            difference() {\n                torus(5, 1.5, 20, 8);\n                translate([0, -5, 0])\n                    cube([10, 10, 3], center=true);\n            }\n    \n    // Supporting ropes\n    translate([0, 32, 72])\n        rotate([0, 45, 0])\n            cylinder(h=20, r=0.8, $fn=6);\n    \n    translate([0, -32, 72])\n        rotate([0, -45, 0])\n            cylinder(h=20, r=0.8, $fn=6);\n}\n\n// Helper module for torus\nmodule torus(outer_r, inner_r, outer_fn, inner_fn) {\n    rotate_extrude($fn=outer_fn)\n        translate([outer_r, 0, 0])\n            circle(r=inner_r, $fn=inner_fn);\n}\n\n// Assembly\nunion() {\n    difference() {\n        drum_body();\n        // Hollow out the drum\n        translate([0, 0, 5])\n            cylinder(h=60, r1=27, r2=22, $fn=100);\n    }\n    \n    drum_head();\n    rope_system();\n    carvings();\n    hanging_rope();\n}",
    "renders": true
  },
  {
    "musical_instrument": "talempong",
    "openscad_code": "// Talempong (Minangkabau kettle gong) - Realistic medium-complexity model\n// Approx. 80 mm wide, designed for 3D printing (no overhangs)\n\n$fn = 60;\n\n// Main parameters\nbase_d = 80;\nrim_h = 12;\nrim_t = 4;\nbowl_d = 70;\nbowl_h = 18;\nknob_d = 14;\nknob_h = 10;\nwall_t = 3;\n\n// Central knob with decorative rings\nmodule knob() {\n    union() {\n        // Main knob body\n        cylinder(h = knob_h, d1 = knob_d, d2 = knob_d * 0.9, center = false);\n        \n        // Top ring\n        translate([0, 0, knob_h - 1])\n            cylinder(h = 2, d1 = knob_d * 1.15, d2 = knob_d * 1.1, center = false);\n        \n        // Middle ring\n        translate([0, 0, knob_h * 0.5])\n            cylinder(h = 1.5, d1 = knob_d * 1.05, d2 = knob_d * 1.0, center = false);\n    }\n}\n\n// Bowl-shaped body with wall thickness\nmodule bowl() {\n    difference() {\n        // Outer bowl\n        cylinder(h = bowl_h, d1 = bowl_d, d2 = bowl_d * 1.05, center = false);\n        \n        // Inner cavity\n        translate([0, 0, wall_t])\n            cylinder(h = bowl_h - wall_t, d1 = bowl_d - 2 * wall_t, d2 = bowl_d * 1.05 - 2 * wall_t, center = false);\n    }\n}\n\n// Reinforcement ring at top edge\nmodule rim() {\n    difference() {\n        cylinder(h = rim_h, d1 = base_d, d2 = base_d, center = false);\n        \n        translate([0, 0, -1])\n            cylinder(h = rim_h + 2, d1 = base_d - 2 * rim_t, d2 = base_d - 2 * rim_t, center = false);\n    }\n}\n\n// Hanging loops (2 opposite loops)\nmodule hanging_loops() {\n    for (a = [0, 180]) {\n        rotate([0, 0, a])\n            translate([base_d / 2 - rim_t / 2, 0, rim_h - 2])\n                rotate([90, 0, 0])\n                    difference() {\n                        // Outer loop\n                        cylinder(h = 6, d = 6, center = true);\n                        \n                        // Inner hole\n                        cylinder(h = 7, d = 2, center = true);\n                    }\n    }\n}\n\n// Decorative concentric circles on top surface\nmodule concentric_circles() {\n    for (r = [15:5:30]) {\n        color(\"gray\")\n            translate([0, 0, bowl_h + 0.1])\n                difference() {\n                    cylinder(h = 0.5, d = r + 0.5, center = false);\n                    cylinder(h = 0.6, d = r - 0.5, center = false);\n                }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    union() {\n        // Base rim\n        rim();\n        \n        // Bowl body\n        translate([0, 0, rim_h - 2])\n            bowl();\n        \n        // Central knob\n        translate([0, 0, rim_h + bowl_h - 4])\n            knob();\n        \n        // Hanging loops\n        hanging_loops();\n        \n        // Surface decorations\n        concentric_circles();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "kempli",
    "openscad_code": "// Kempli (Balinese hand-held kettle drum) - Realistic Style, Medium Complexity\n// Overall height: ~70 mm, diameter: ~55 mm\n\n$fn = 64;\n\n// Main body module\nmodule kempli_body() {\n    // Outer shell of the kettle\n    difference() {\n        // Main kettle shape - slightly bulged cylinder\n        union() {\n            cylinder(h = 45, d1 = 52, d2 = 48, center = true);\n            translate([0, 0, 22.5])\n                sphere(d = 52);\n        }\n        \n        // Hollow out the inside\n        translate([0, 0, 5])\n            cylinder(h = 50, d1 = 44, d2 = 40, center = true);\n    }\n}\n\n// Drum head (leather membrane)\nmodule drum_head() {\n    difference() {\n        // Membrane disc\n        cylinder(h = 2, d = 50, center = true);\n        \n        // Slight depression for realistic tension\n        translate([0, 0, 1])\n            cylinder(h = 1, d = 40, center = true);\n    }\n}\n\n// Rattan lacing ring\nmodule lacing_ring() {\n    // Bottom ring\n    translate([0, 0, -23])\n        difference() {\n            cylinder(h = 4, d = 54, center = true);\n            cylinder(h = 5, d = 50, center = true);\n        }\n    \n    // Top ring\n    translate([0, 0, 25])\n        difference() {\n            cylinder(h = 4, d = 54, center = true);\n            cylinder(h = 5, d = 50, center = true);\n        }\n}\n\n// Individual rattan lace\nmodule lace() {\n    // Simple curved lace between rings\n    rotate_extrude(angle = 10, $fn = 20)\n        translate([26, 0, 0])\n            circle(d = 1.5);\n}\n\n// All laces\nmodule all_laces() {\n    for (i = [0 : 15 : 360]) {\n        rotate([0, 0, i])\n            translate([0, 0, -20])\n                lace();\n    }\n}\n\n// Handle attachment points\nmodule handle_mounts() {\n    // Left mount\n    translate([-26, 0, 0])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 8, d = 8, center = true);\n                cylinder(h = 9, d = 4, center = true);\n            }\n    \n    // Right mount\n    translate([26, 0, 0])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 8, d = 8, center = true);\n                cylinder(h = 9, d = 4, center = true);\n            }\n}\n\n// Carrying handle\nmodule handle() {\n    // Main curved handle\n    translate([0, 0, 10])\n        rotate([90, 0, 0])\n            difference() {\n                // Outer curved cylinder\n                rotate_extrude(angle = 180, $fn = 64)\n                    translate([35, 0, 0])\n                        circle(d = 6);\n                \n                // Inner curve for grip\n                rotate_extrude(angle = 180, $fn = 64)\n                    translate([35, 0, 0])\n                        circle(d = 3);\n            }\n    \n    // Connection rods to mounts\n    translate([-26, 0, 10])\n        rotate([0, 90, 0])\n            cylinder(h = 9, d = 4);\n    \n    translate([26, 0, 10])\n        rotate([0, 90, 0])\n            cylinder(h = 9, d = 4);\n}\n\n// Decorative rings\nmodule decorative_bands() {\n    // Top decorative band\n    translate([0, 0, 20])\n        cylinder(h = 3, d = 56, center = true);\n    \n    // Bottom decorative band\n    translate([0, 0, -20])\n        cylinder(h = 3, d = 56, center = true);\n}\n\n// Assemble all parts\nunion() {\n    kempli_body();\n    \n    translate([0, 0, 25])\n        drum_head();\n    \n    lacing_ring();\n    all_laces();\n    \n    handle_mounts();\n    handle();\n    \n    decorative_bands();\n}",
    "renders": true
  },
  {
    "musical_instrument": "kethuk",
    "openscad_code": "// KETHUK – realistic 3D-printable model\n// Approx 80 mm tall\n\n$fn = 64;          // smooth curves\nwall = 2.5;        // 3D-printable wall thickness\n\n// overall scale factor\nscale_k = 0.9;\n\nmodule body_shell(h, r_bottom, r_top){\n    difference(){\n        cylinder(h=h, r1=r_bottom, r2=r_top, center=false);\n        translate([0,0,wall])\n            cylinder(h=h-wall+0.1, r1=r_bottom-wall, r2=r_top-wall, center=false);\n    }\n}\n\nmodule handle(){\n    // main grip\n    linear_extrude(height = 8, center=true, twist = 25)\n        offset(delta = wall)\n            polygon(points=[[-5,0],[5,0],[4,25],[-4,25]]);\n    // disk at top\n    translate([0,0,4])\n        cylinder(h=wall, r=9, center=true);\n}\n\nmodule beads(){\n    for(i=[0:3]){\n        rotate([0,0,i*90])\n            translate([0, 32, 14])\n                sphere(d=6);\n    }\n}\n\nmodule kethuk(){\n    scale([scale_k,scale_k,scale_k]){\n        // main resonator\n        translate([0,0,0])\n            body_shell(h=38, r_bottom=28, r_top=23);\n\n        // rounded bottom cap\n        difference(){\n            sphere(d=56);\n            translate([0,0,wall])\n                sphere(d=56-2*wall);\n            cube([60,60,wall+0.1], center=true);\n        }\n\n        // top rim\n        translate([0,0,38])\n            cylinder(h=5, r1=23, r2=23);\n\n        // bridge block\n        translate([0,0,43])\n            cube([42,16,8], center=true);\n\n        // strings (simplified cylinders)\n        for(x=[-15,-5,5,15]){\n            translate([x,-8,47])\n                cylinder(h=32, d=1.5);\n        }\n\n        // handle\n        translate([0,-25,47+16])\n            rotate([90,0,0])\n                handle();\n\n        // decorative beads\n        beads();\n    }\n}\n\nkethuk();",
    "renders": true
  },
  {
    "musical_instrument": "gender",
    "openscad_code": "// Male gender symbol in realistic style - medium complexity\n// Dimensions: ~60mm total length\n\n$fn = 32;\n\n// Overall scale factor for easy resizing\nscale_factor = 1;\n\n// Main module\nmodule male_symbol() {\n    // The circle with arrow pointing NE\n    union() {\n        // Main circle\n        translate([0, 0, 5]) \n            cylinder(h=10, d=30, center=true);\n        \n        // Arrow shaft extending right\n        translate([15, 0, 5]) \n            rotate([0, 0, 0])\n            cylinder(h=35, d=6, center=true);\n        \n        // Arrow head - top part\n        translate([32.5, 0, 5]) \n            rotate([0, 0, -45])\n            scale([1, 0.5, 1])\n            cylinder(h=10, d=12, center=true);\n            \n        // Arrow head - side part\n        translate([32.5, 0, 5]) \n            rotate([0, 0, 45])\n            scale([1, 0.5, 1])\n            cylinder(h=10, d=12, center=true);\n        \n        // Arrow shaft connector to circle\n        translate([7.5, 0, 5]) \n            rotate([0, 90, 0])\n            cylinder(h=15, d=6, center=true);\n    }\n}\n\n// Add realistic details\nmodule detailed_male_symbol() {\n    difference() {\n        // Main symbol\n        male_symbol();\n        \n        // Cutout for circle center to make it hollow\n        translate([0, 0, 5]) \n            cylinder(h=12, d=22, center=true);\n            \n        // Chamfer edges on circle\n        translate([0, 0, 0]) \n            cylinder(h=2, d1=32, d2=28, center=false);\n        translate([0, 0, 8]) \n            cylinder(h=2, d1=28, d2=32, center=false);\n    }\n    \n    // Add reinforcing ribs inside circle\n    for (i = [0:45:359]) {\n        rotate([0, 0, i])\n        translate([11, 0, 5])\n        scale([1, 0.3, 1])\n        cylinder(h=2, d=8, center=true);\n    }\n}\n\n// Create the final model\nscale([scale_factor, scale_factor, scale_factor])\ndetailed_male_symbol();",
    "renders": true
  },
  {
    "musical_instrument": "gambang",
    "openscad_code": "// Gambang (Indonesian xylophone) - realistic style, medium complexity\n// Designed for 3D printing with proper wall thickness\n\n// Global parameters\n$fn = 32;\nwall_thickness = 2;\nkey_width = 8;\nkey_height = 5;\nkey_spacing = 2;\n\n// Overall dimensions\ntotal_length = 90;\ntotal_width = 50;\ntotal_height = 25;\n\n// Main module\nmodule gambang() {\n    // Base frame\n    base_frame();\n    \n    // Support rails\n    support_rails();\n    \n    // Keys (from longest to shortest)\n    keys();\n    \n    // Decorative end pieces\n    end_pieces();\n}\n\n// Base frame with hollow interior\nmodule base_frame() {\n    // Outer shell\n    difference() {\n        // Main base\n        hull() {\n            translate([-total_length/2, -total_width/2, 0])\n                cube([total_length, total_width, total_height - 5]);\n            translate([-total_length/2, -total_width/2 + 5, 0])\n                cube([total_length, total_width - 10, total_height]);\n        }\n        \n        // Hollow interior\n        translate([-total_length/2 + wall_thickness, -total_width/2 + wall_thickness, wall_thickness])\n            cube([total_length - 2*wall_thickness, total_width - 2*wall_thickness, total_height - wall_thickness - 5]);\n    }\n}\n\n// Support rails for keys\nmodule support_rails() {\n    // Left rail\n    translate([-total_length/2 + 5, -total_width/2 + 5, total_height - 3])\n        cube([total_length - 10, 4, 3]);\n    \n    // Right rail (slightly higher for pitch progression)\n    translate([-total_length/2 + 5, total_width/2 - 9, total_height - 1])\n        cube([total_length - 10, 4, 3]);\n}\n\n// Individual key with rounded edges\nmodule key(length, width, pos) {\n    // Main key body\n    difference() {\n        // Rounded top\n        hull() {\n            translate([0, 0, key_height/2])\n                sphere(d = width);\n            translate([length, 0, key_height/2])\n                sphere(d = width);\n        }\n        \n        // Hollow bottom for resonance\n        translate([-1, -width/2 + wall_thickness, -key_height/2])\n            cube([length + 2, width - 2*wall_thickness, key_height/2 - wall_thickness]);\n    }\n    \n    // Support holes\n    translate([length * 0.2, 0, -key_height/2])\n        cylinder(h = key_height + 1, r = 1);\n    translate([length * 0.8, 0, -key_height/2])\n        cylinder(h = key_height + 1, r = 1);\n}\n\n// Generate all keys\nmodule keys() {\n    // Key lengths from longest to shortest (pentatonic scale)\n    lengths = [45, 42, 38, 35, 32, 29, 26, 23, 20];\n    num_keys = len(lengths);\n    \n    for(i = [0 : num_keys - 1]) {\n        // Position keys along the frame\n        translate([-total_length/2 + 10 + i * (key_width + key_spacing), 0, total_height]) {\n            rotate([0, 0, i * 2])  // Slight rotation for visual appeal\n                key(lengths[i], key_width, i);\n        }\n    }\n}\n\n// Decorative end pieces\nmodule end_pieces() {\n    // Left end\n    translate([-total_length/2, 0, 0]) {\n        difference() {\n            // Decorative curve\n            hull() {\n                cube([6, total_width, total_height]);\n                translate([3, 0, total_height + 5])\n                    sphere(d = total_width);\n            }\n            \n            // Hollow\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                cube([6 - wall_thickness, total_width - 2*wall_thickness, total_height + 4]);\n        }\n    }\n    \n    // Right end (mirrored)\n    translate([total_length/2, 0, 0]) {\n        mirror([1, 0, 0])\n            difference() {\n                hull() {\n                    cube([6, total_width, total_height]);\n                    translate([3, 0, total_height + 5])\n                        sphere(d = total_width);\n                }\n                \n                translate([wall_thickness, wall_thickness, wall_thickness])\n                    cube([6 - wall_thickness, total_width - 2*wall_thickness, total_height + 4]);\n            }\n    }\n}\n\n// Generate the complete model\ngambang();",
    "renders": true
  },
  {
    "musical_instrument": "slenthem",
    "openscad_code": "// Slenthem - Traditional Javanese bronze metallophone\n// Medium complexity realistic model for 3D printing\n\n// Overall dimensions (mm)\nslenthem_length = 85;\nslenthem_width = 35;\nslenthem_height = 8;\n\n// Key dimensions\nkey_thickness = 2;\nkey_width = 6;\nmin_key_length = 8;\nmax_key_length = 20;\n\n// Resonator box dimensions\nresonator_thickness = 3;\nresonator_height = 12;\nresonator_width = 30;\n\n// Support dimensions\nsupport_height = 10;\nsupport_width = 4;\n\n// Number of keys\nnum_keys = 7;\n\n// Main slenthem module\nmodule slenthem() {\n    // Resonator box\n    difference() {\n        // Main box\n        translate([0, 0, resonator_height/2])\n            cube([slenthem_length, resonator_width, resonator_height], center=true);\n        \n        // Hollow cavity\n        translate([0, 0, resonator_height/2 + 1])\n            cube([slenthem_length - 2*resonator_thickness, \n                  resonator_width - 2*resonator_thickness, \n                  resonator_height], center=true);\n        \n        // Sound holes\n        for(i = [-3:3]) {\n            translate([i * 10, 0, resonator_height - 1])\n                cylinder(h=3, r=2, $fn=16);\n        }\n    }\n    \n    // Supports\n    translate([-slenthem_length/2 + 10, 0, support_height/2])\n        cube([support_width, resonator_width - 4, support_height], center=true);\n    \n    translate([slenthem_length/2 - 10, 0, support_height/2])\n        cube([support_width, resonator_width - 4, support_height], center=true);\n    \n    // Keys\n    for(i = [0:num_keys-1]) {\n        translate_key(i);\n    }\n}\n\n// Position and size each key based on pitch\nmodule translate_key(index) {\n    key_length = max_key_length - (index * (max_key_length - min_key_length) / (num_keys - 1));\n    \n    // Calculate position along the length\n    x_pos = -slenthem_length/2 + 15 + index * 8;\n    y_pos = 0;\n    z_pos = resonator_height + support_height + key_thickness/2;\n    \n    translate([x_pos, y_pos, z_pos])\n        rotate([0, 0, -5])\n            key(key_length);\n}\n\n// Individual key with rounded edges\nmodule key(length) {\n    // Main key body\n    difference() {\n        hull() {\n            translate([-length/2 + 2, -key_width/2, 0])\n                cylinder(h=key_thickness, r=1, $fn=8);\n            translate([length/2 - 2, -key_width/2, 0])\n                cylinder(h=key_thickness, r=1, $fn=8);\n            translate([-length/2 + 2, key_width/2, 0])\n                cylinder(h=key_thickness, r=1, $fn=8);\n            translate([length/2 - 2, key_width/2, 0])\n                cylinder(h=key_thickness, r=1, $fn=8);\n        }\n        \n        // Suspension holes\n        translate([-length/3, 0, -0.5])\n            cylinder(h=key_thickness + 1, r=0.8, $fn=8);\n        translate([length/3, 0, -0.5])\n            cylinder(h=key_thickness + 1, r=0.8, $fn=8);\n    }\n    \n    // Decorative ridge\n    translate([0, 0, key_thickness - 0.5])\n        cube([length - 4, key_width - 2, 0.5], center=true);\n}\n\n// Generate the complete model\nslenthem();",
    "renders": true
  },
  {
    "musical_instrument": "ketipung",
    "openscad_code": "// Ketipung - Traditional Javanese hand drum\n// Medium complexity realistic style\n\n$fn = 36;\n\n// Overall dimensions\ndrum_diameter = 50;\ndrum_height = 45;\nwall_thickness = 2;\n\nmodule ketipung_body() {\n    difference() {\n        // Main body - hourglass shape\n        union() {\n            // Upper drum shell\n            cylinder(h = drum_height/2, d1 = drum_diameter, d2 = drum_diameter * 0.85);\n            // Lower drum shell\n            translate([0, 0, drum_height/2])\n                cylinder(h = drum_height/2, d1 = drum_diameter * 0.85, d2 = drum_diameter);\n        }\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h = drum_height + 2, d = drum_diameter - 2*wall_thickness);\n    }\n}\n\nmodule drum_head() {\n    // Upper drum head membrane\n    translate([0, 0, drum_height - 0.5])\n        cylinder(h = 0.5, d = drum_diameter - 1);\n    \n    // Lower drum head membrane\n    translate([0, 0, 0.5])\n        cylinder(h = 0.5, d = drum_diameter - 1);\n}\n\nmodule tension_rods() {\n    // Tension rods around upper head (8 rods)\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([(drum_diameter/2) - 2, 0, drum_height - 2])\n                cylinder(h = 4, d = 1);\n    }\n    \n    // Tension rods around lower head (8 rods)\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([(drum_diameter/2) - 2, 0, 1])\n                cylinder(h = 4, d = 1);\n    }\n}\n\nmodule rope_tension_system() {\n    // Upper rope ring\n    translate([0, 0, drum_height + 1])\n        cylinder(h = 1.5, d = drum_diameter + 6);\n    \n    // Lower rope ring\n    translate([0, 0, -1.5])\n        cylinder(h = 1.5, d = drum_diameter + 6);\n    \n    // Connecting ropes (simplified as cylinders)\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            hull() {\n                translate([(drum_diameter/2) + 2, 0, drum_height + 1])\n                    sphere(d = 1);\n                translate([(drum_diameter/2) + 2, 0, -1])\n                    sphere(d = 1);\n            }\n        }\n    }\n}\n\nmodule decorative_bands() {\n    // Middle decorative band\n    translate([0, 0, drum_height/2 - 1])\n        cylinder(h = 2, d = drum_diameter * 0.9);\n    \n    // Upper decorative band\n    translate([0, 0, drum_height - 3])\n        cylinder(h = 1, d = drum_diameter - 1);\n    \n    // Lower decorative band\n    translate([0, 0, 2])\n        cylinder(h = 1, d = drum_diameter - 1);\n}\n\nmodule drum_stand_supports() {\n    // Small feet for stability\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([(drum_diameter/2) - 3, 0, 0])\n                cube([6, 3, 2], center = true);\n        }\n    }\n}\n\n// Assemble the complete ketipung\nunion() {\n    ketipung_body();\n    drum_head();\n    tension_rods();\n    rope_tension_system();\n    decorative_bands();\n    drum_stand_supports();\n}",
    "renders": true
  },
  {
    "musical_instrument": "ciblon",
    "openscad_code": "// Ciblon (Turkish coffee pot / cezve) - Realistic medium-complexity model\n// Wall thickness: 2 mm, overall height ~80 mm\n\n$fn = 36;\n\nmodule handle() {\n    // Handle grip\n    difference() {\n        // Main handle body\n        rotate([0, 90, 0])\n            cylinder(h = 12, d1 = 20, d2 = 15);\n        \n        // Grip hole\n        rotate([0, 90, 0])\n            translate([0, 0, -1])\n                cylinder(h = 14, d = 10);\n    }\n    \n    // Handle neck\n    translate([-6, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 12, d1 = 8, d2 = 12);\n    \n    // Connection plate\n    translate([-10, 0, 0])\n        rotate([0, 90, 0])\n            cube([14, 10, 2], center = true);\n}\n\nmodule spout() {\n    // Spout base\n    difference() {\n        translate([0, -30, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 15, d1 = 12, d2 = 8);\n        \n        // Inner hollow\n        translate([0, -30, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 16, d1 = 8, d2 = 4);\n    }\n    \n    // Spout tip\n    difference() {\n        translate([0, -45, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d1 = 8, d2 = 4);\n        \n        // Inner hollow\n        translate([0, -45, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 9, d1 = 4, d2 = 2);\n    }\n}\n\nmodule body() {\n    // Outer body\n    difference() {\n        // Main body\n        rotate_extrude()\n            translate([0, 0])\n                polygon(points=[\n                    [25, 0],\n                    [35, 0],\n                    [38, 10],\n                    [40, 30],\n                    [35, 50],\n                    [30, 55],\n                    [20, 55],\n                    [15, 50],\n                    [12, 30],\n                    [15, 10],\n                    [25, 0]\n                ]);\n        \n        // Inner cavity\n        rotate_extrude()\n            translate([0, 0])\n                polygon(points=[\n                    [23, 2],\n                    [33, 2],\n                    [36, 12],\n                    [38, 30],\n                    [33, 48],\n                    [30, 53],\n                    [22, 53],\n                    [17, 48],\n                    [14, 30],\n                    [17, 12],\n                    [23, 2]\n                ]);\n    }\n}\n\nmodule base() {\n    // Bottom base\n    difference() {\n        // Outer base\n        cylinder(h = 5, d = 40);\n        \n        // Inner recess\n        translate([0, 0, -1])\n            cylinder(h = 7, d = 36);\n    }\n    \n    // Reinforcement ring\n    translate([0, 0, 2])\n        cylinder(h = 3, d1 = 42, d2 = 38);\n}\n\nmodule rim() {\n    // Top rim\n    difference() {\n        // Outer rim\n        cylinder(h = 4, d = 44);\n        \n        // Inner rim\n        translate([0, 0, -1])\n            cylinder(h = 6, d = 40);\n    }\n}\n\n// Assembly\nunion() {\n    // Body and base\n    union() {\n        body();\n        translate([0, 0, -5])\n            base();\n    }\n    \n    // Rim\n    translate([0, 0, 55])\n        rim();\n    \n    // Handle\n    translate([25, 15, 30])\n        rotate([0, 0, 45])\n            handle();\n    \n    // Spout\n    spout();\n}",
    "renders": true
  },
  {
    "musical_instrument": "kendhang",
    "openscad_code": "// Kendhang - traditional Javanese drum\n// Medium complexity, realistic style\n\n// Overall dimensions (mm)\n$fn = 50;\ndrum_length = 80;\nmax_diameter = 40;\nwall_thickness = 2;\n\n// Drum shell module - hourglass shape\nmodule drum_shell() {\n    difference() {\n        // Outer shell - two cones forming hourglass\n        union() {\n            cylinder(h = drum_length/2, d1 = max_diameter, d2 = max_diameter * 0.6, center = true);\n            translate([0, 0, drum_length/4])\n                cylinder(h = drum_length/2, d1 = max_diameter * 0.6, d2 = max_diameter, center = true);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, -drum_length/2])\n            cylinder(h = drum_length + 1, d = max_diameter - wall_thickness*2, center = true);\n    }\n}\n\n// Skin head module\nmodule drum_head(diameter, thickness) {\n    difference() {\n        // Main skin disk\n        cylinder(h = thickness, d = diameter);\n        \n        // Add tension ring groove\n        translate([0, 0, -0.1])\n            cylinder(h = thickness + 0.2, d = diameter * 0.9);\n    }\n}\n\n// Rope tension system\nmodule rope_system() {\n    // Main tension rope - simplified as cylinders\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([max_diameter/2 + 2, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = drum_length + 10, d = 1.5, center = true);\n    }\n    \n    // Rope loops around drum\n    for (pos = [-drum_length/3, 0, drum_length/3]) {\n        translate([0, 0, pos])\n            rotate_extrude(angle = 360, $fn = 16)\n                translate([max_diameter/2 + 1, 0, 0])\n                    circle(d = 2);\n    }\n}\n\n// Decorative rings\nmodule decorative_rings() {\n    // Top ring\n    translate([0, 0, drum_length/2 - 1])\n        cylinder(h = 2, d = max_diameter + 4);\n    \n    // Bottom ring\n    translate([0, 0, -drum_length/2 + 1])\n        cylinder(h = 2, d = max_diameter + 4);\n    \n    // Center decorative band\n    translate([0, 0, 0])\n        cylinder(h = 8, d = max_diameter * 0.7);\n}\n\n// Assembly\nunion() {\n    // Main drum body\n    drum_shell();\n    \n    // Top drum head\n    translate([0, 0, drum_length/2 + 1])\n        drum_head(max_diameter + 4, 2);\n    \n    // Bottom drum head\n    translate([0, 0, -drum_length/2 - 1])\n        drum_head(max_diameter + 4, 2);\n    \n    // Rope tension system\n    rope_system();\n    \n    // Decorative elements\n    decorative_rings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "gamelan",
    "openscad_code": "// Gamelan Ensemble - Realistic Style, Medium Complexity\n// A Javanese-style set of two bonang pans and supporting frame\n// Overall size ~80 mm wide, printable without supports\n\n$fn = 32;  // Smooth curves\n\n// Main module for entire gamelan set\nmodule gamelan() {\n    // Frame\n    frame();\n    \n    // Left pan\n    translate([-20, 0, 5]) bonang_pan(22);\n    \n    // Right pan\n    translate([20, 0, 5]) bonang_pan(18);\n}\n\n// Bonang frame base\nmodule frame() {\n    // Base platform\n    difference() {\n        cube([80, 40, 5], center = true);\n        // Hollow underside to save material\n        translate([0, 0, -2.5]) cube([76, 36, 6], center = true);\n    }\n    \n    // Front left leg\n    translate([-30, -15, -10]) cylinder(h = 15, r = 3);\n    \n    // Front right leg\n    translate([30, -15, -10]) cylinder(h = 15, r = 3);\n    \n    // Back left leg\n    translate([-30, 15, -10]) cylinder(h = 15, r = 3);\n    \n    // Back right leg\n    translate([30, 15, -10]) cylinder(h = 15, r = 3);\n    \n    // Cross braces\n    color(\"brown\") {\n        // Front brace\n        translate([0, -15, -5]) rotate([90, 0, 0]) cylinder(h = 60, r = 2);\n        \n        // Back brace\n        translate([0, 15, -5]) rotate([90, 0, 0]) cylinder(h = 60, r = 2);\n        \n        // Left brace\n        translate([-30, 0, -5]) rotate([90, 0, 90]) cylinder(h = 30, r = 2);\n        \n        // Right brace\n        translate([30, 0, -5]) rotate([90, 0, 90]) cylinder(h = 30, r = 2);\n    }\n}\n\n// Individual bonang pan\nmodule bonang_pan(radius) {\n    // Pan body\n    difference() {\n        // Outer bowl shape\n        cylinder(h = 8, r1 = radius, r2 = radius - 2, center = false);\n        \n        // Inner cavity\n        translate([0, 0, 2]) cylinder(h = 7, r1 = radius - 3, r2 = radius - 4, center = false);\n    }\n    \n    // Rim detail\n    translate([0, 0, 8]) cylinder(h = 1, r = radius + 0.5, center = false);\n    \n    // Decorative rings\n    for (i = [1:3]) {\n        translate([0, 0, i * 2]) cylinder(h = 0.5, r = radius - 0.5, center = false);\n    }\n    \n    // Support posts for pan\n    translate([-radius + 3, -radius + 3, 0]) cylinder(h = 5, r = 1.5);\n    translate([radius - 3, -radius + 3, 0]) cylinder(h = 5, r = 1.5);\n    translate([-radius + 3, radius - 3, 0]) cylinder(h = 5, r = 1.5);\n    translate([radius - 3, radius - 3, 0]) cylinder(h = 5, r = 1.5);\n}\n\n// Render the complete gamelan\ngamelan();",
    "renders": true
  },
  {
    "musical_instrument": "taiko",
    "openscad_code": "// Taiko drum - medium complexity realistic style\n// Overall size ~80mm diameter, 70mm height\n\n// Parameters\n$fn = 30;\nbody_diameter = 80;\nbody_height = 50;\nskin_thickness = 2;\nbody_thickness = 3;\nhoop_width = 6;\nhoop_thickness = 3;\nstud_count = 8;\nstud_diameter = 4;\nstud_length = 5;\n\n// Main module\nmodule taiko() {\n    // Drum body - hollow cylinder with rounded edges\n    difference() {\n        // Outer shell\n        union() {\n            cylinder(h=body_height, d=body_diameter, center=true);\n            // Rounded top edge\n            translate([0,0,body_height/2 - 1])\n                scale([1,1,0.5])\n                sphere(d=body_diameter);\n            // Rounded bottom edge\n            translate([0,0,-body_height/2 + 1])\n                scale([1,1,0.5])\n                sphere(d=body_diameter);\n        }\n        \n        // Hollow interior\n        cylinder(h=body_height+4, d=body_diameter-2*body_thickness, center=true);\n    }\n    \n    // Drum skins (top and bottom)\n    for(z = [-1, 1]) {\n        translate([0,0,z*body_height/2])\n            cylinder(h=skin_thickness, d=body_diameter, center=true);\n    }\n    \n    // Reinforcement hoops\n    for(z = [-1, 1]) {\n        translate([0,0,z*(body_height/2 + skin_thickness/2)])\n            difference() {\n                cylinder(h=hoop_thickness, d=body_diameter+hoop_width*2, center=true);\n                cylinder(h=hoop_thickness+2, d=body_diameter, center=true);\n            }\n    }\n    \n    // Tuning studs around hoops\n    for(z = [-1, 1]) {\n        for(i = [0:stud_count-1]) {\n            rotate([0,0,i*360/stud_count])\n                translate([(body_diameter+hoop_width)/2, 0, z*(body_height/2 + skin_thickness/2)])\n                    rotate([90,0,0])\n                        cylinder(h=stud_length, d=stud_diameter);\n        }\n    }\n    \n    // Decorative bands around body\n    band_height = 4;\n    band_offset = body_height/4;\n    for(z = [-1, 0, 1]) {\n        if(z != 0) {\n            translate([0,0,z*band_offset])\n                difference() {\n                    cylinder(h=band_height, d=body_diameter+1, center=true);\n                    cylinder(h=band_height+2, d=body_diameter-2, center=true);\n                }\n        }\n    }\n    \n    // Center logo area\n    translate([0,0,0])\n        difference() {\n            cylinder(h=6, d=30, center=true);\n            translate([0,0,-1])\n                cylinder(h=8, d=20, center=true);\n            // Simple mitsudomoe symbol\n            for(angle = [0, 120, 240]) {\n                rotate([0,0,angle])\n                    translate([7,0,2.5])\n                        scale([1,0.7,1])\n                        sphere(d=8);\n            }\n        }\n}\n\n// Generate the model\ntaiko();",
    "renders": true
  },
  {
    "musical_instrument": "tsuzumi",
    "openscad_code": "// Tsuzumi (Japanese hand drum) - medium complexity realistic style\n// Overall dimensions: ~70mm diameter, ~35mm thick\n\n$fn = 64;  // Smooth curves for 3D printing\nwall_thickness = 2;\n\n// Main module\nmodule tsuzumi() {\n    // Drum body - hourglass shape\n    difference() {\n        // Outer hourglass shape\n        union() {\n            // Top cone\n            cylinder(h=15, r1=30, r2=25);\n            translate([0,0,15])\n                cylinder(h=10, r1=25, r2=25);\n            \n            // Bottom cone\n            translate([0,0,25])\n                cylinder(h=15, r1=25, r2=30);\n            \n            // Center band\n            translate([0,0,15])\n                cylinder(h=10, r=30);\n        }\n        \n        // Hollow out interior\n        translate([0,0,-1])\n            cylinder(h=42, r1=28, r2=28);\n    }\n    \n    // Drum heads (stretched leather)\n    translate([0,0,-1])\n        cylinder(h=0.5, r=30);\n    translate([0,0,40])\n        cylinder(h=0.5, r=30);\n    \n    // Rope loops for tensioning\n    for(i=[0:30:359]) {\n        rotate([0,0,i])\n            translate([25,0,20])\n                rope_loop();\n    }\n    \n    // Carrying cord attachment points\n    translate([0,0,20])\n        difference() {\n            // Main ring\n            rotate_extrude(angle=360)\n                translate([32,0,0])\n                    circle(r=2);\n            \n            // Grooves for cord\n            for(i=[0:90:359]) {\n                rotate([0,0,i])\n                    translate([32,0,-2])\n                        cube([4,1,4], center=true);\n            }\n        }\n    \n    // Sound holes\n    translate([0,0,20])\n        for(i=[45:90:359]) {\n            rotate([0,0,i])\n                translate([20,0,0])\n                    cylinder(h=wall_thickness+1, r=3);\n        }\n}\n\nmodule rope_loop() {\n    // Individual rope loop\n    rotate([90,0,0])\n        difference() {\n            // Main loop\n            torus(2, 1);\n            \n            // Cut for attachment\n            translate([0,0,-3])\n                cube([6,6,6], center=true);\n        }\n}\n\nmodule torus(major, minor) {\n    // Custom torus for rope loops\n    rotate_extrude(angle=360)\n        translate([major, 0, 0])\n            circle(r=minor);\n}\n\ntsuzumi();",
    "renders": true
  },
  {
    "musical_instrument": "shime",
    "openscad_code": "// Realistic Shime (medium complexity)\n// Traditional Japanese drum used in festivals\n\n$fn = 50;\n\n// Overall dimensions\nshime_diameter = 80;\nshime_height = 45;\nshell_thickness = 3;\nhoop_height = 8;\nhoop_thickness = 2;\nrope_diameter = 2;\nrope_spacing = 8;\n\n// Main drum body with slight taper\nmodule drum_body() {\n    difference() {\n        // Outer shell - slightly tapered cylinder\n        cylinder(h=shime_height, d1=shime_diameter, d2=shime_diameter*0.9, center=true);\n        \n        // Hollow interior\n        translate([0, 0, 0])\n        cylinder(h=shime_height+1, d1=shime_diameter-shell_thickness*2, d2=shime_diameter*0.9-shell_thickness*2, center=true);\n        \n        // Bottom edge chamfer\n        translate([0, 0, -shime_height/2])\n        cylinder(h=shell_thickness, d1=shime_diameter*0.9+1, d2=shime_diameter*0.9-4, center=false);\n        \n        // Top edge chamfer\n        translate([0, 0, shime_height/2-shell_thickness])\n        cylinder(h=shell_thickness, d1=shime_diameter-4, d2=shime_diameter+1, center=false);\n    }\n}\n\n// Drum hoops with rope holes\nmodule drum_hoop(position) {\n    // Main hoop ring\n    difference() {\n        cylinder(h=hoop_height, d=shime_diameter+hoop_thickness*2, center=true);\n        \n        // Inner cutout\n        cylinder(h=hoop_height+1, d=shime_diameter, center=true);\n        \n        // Rope holes around circumference\n        for(i=[0:15]) {\n            rotate([0, 0, i*22.5])\n            translate([shime_diameter/2+hoop_thickness, 0, position])\n            rotate([90, 0, 0])\n            cylinder(h=hoop_height+1, d=rope_diameter+1, center=true);\n        }\n    }\n}\n\n// Drumhead membrane simulation\nmodule drumhead() {\n    // Top drumhead\n    translate([0, 0, shime_height/2+hoop_height/2])\n    difference() {\n        cylinder(h=0.5, d=shime_diameter, center=true);\n        \n        // Texture pattern for realistic look\n        for(i=[0:3]) {\n            rotate([0, 0, i*45])\n            translate([0, 0, 0])\n            cube([shime_diameter, 1, 1], center=true);\n        }\n    }\n    \n    // Bottom drumhead\n    translate([0, 0, -shime_height/2-hoop_height/2])\n    difference() {\n        cylinder(h=0.5, d=shime_diameter*0.9, center=true);\n        \n        for(i=[0:3]) {\n            rotate([0, 0, i*45])\n            translate([0, 0, 0])\n            cube([shime_diameter*0.9, 1, 1], center=true);\n        }\n    }\n}\n\n// Decorative rope lacing\nmodule rope_lacing() {\n    color(\"tan\")\n    for(i=[0:7]) {\n        angle = i*45;\n        // Vertical ropes\n        translate([cos(angle)*shime_diameter/2, sin(angle)*shime_diameter/2, 0])\n        rotate([0, 0, angle])\n        cylinder(h=shime_height+hoop_height*2, d=rope_diameter, center=true);\n        \n        // Crossing ropes\n        translate([cos(angle)*shime_diameter/3, sin(angle)*shime_diameter/3, shime_height/2+hoop_height/2])\n        rotate([90, 0, angle+45])\n        cylinder(h=shime_diameter/3, d=rope_diameter, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main drum body\n    drum_body();\n    \n    // Top and bottom hoops\n    translate([0, 0, shime_height/2+hoop_height/2])\n    drum_hoop(0);\n    translate([0, 0, -shime_height/2-hoop_height/2])\n    drum_hoop(0);\n    \n    // Drumheads\n    drumhead();\n    \n    // Rope lacing\n    rope_lacing();\n}",
    "renders": true
  },
  {
    "musical_instrument": "okedo",
    "openscad_code": "// Realistic-style medium-complexity okedo (barrel drum)\n// External diameter ≈ 80 mm at widest, height ≈ 50 mm\n// Wall thickness 2 mm, hollowed for printing\n\n$fn = 64;\n\n// overall scale factor for easy resizing\nscale_factor = 1;\n\n// body parameters\nbody_r = 40 * scale_factor;   // max drum radius\nbody_h = 50 * scale_factor;   // drum height\nwall_t = 2 * scale_factor;    // wall thickness\n\n// skin tension ring parameters\nring_h = 4 * scale_factor;\nring_r = body_r + 1 * scale_factor;\n\n// rope tightening system\nrope_d = 2 * scale_factor;\nrope_segments = 8;\nrope_pitch = body_h / (rope_segments + 1);\n\n// tacked cowhide head parameters\nhead_t = 1 * scale_factor;\ntack_r = 3 * scale_factor;\ntack_h = 1.5 * scale_factor;\ntack_circle_r = body_r - 6 * scale_factor;\ntack_count = 16;\n\n// main body module\nmodule okedo_body() {\n    difference() {\n        // outer barrel shape\n        cylinder(h = body_h, r1 = body_r, r2 = body_r * 0.95, center = true);\n        \n        // inner hollow\n        translate([0, 0, -wall_t / 2])\n            cylinder(h = body_h + wall_t, r1 = body_r - wall_t, r2 = body_r * 0.95 - wall_t, center = true);\n    }\n}\n\n// reinforcing rings\nmodule rings() {\n    for (z in [-body_h / 2 + ring_h / 2, body_h / 2 - ring_h / 2]) {\n        translate([0, 0, z])\n            cylinder(h = ring_h, r1 = ring_r, r2 = ring_r, center = false);\n    }\n}\n\n// rope loops (simplified as cylinders)\nmodule rope_loops() {\n    for (i = [1 : rope_segments]) {\n        z = -body_h / 2 + i * rope_pitch;\n        // front rope segment\n        translate([0, body_r + rope_d / 2, z])\n            rotate([90, 0, 0])\n                cylinder(h = body_r * 0.35, r = rope_d / 2, center = true);\n        // back rope segment (mirror)\n        translate([0, -(body_r + rope_d / 2), z])\n            rotate([90, 0, 0])\n                cylinder(h = body_r * 0.35, r = rope_d / 2, center = true);\n    }\n}\n\n// cowhide heads with tacks\nmodule drumhead(z_pos) {\n    // head membrane\n    translate([0, 0, z_pos])\n        cylinder(h = head_t, r = body_r, center = true);\n    \n    // tacks\n    for (i = [0 : tack_count - 1]) {\n        angle = i * 360 / tack_count;\n        translate([tack_circle_r * cos(angle), tack_circle_r * sin(angle), z_pos + head_t / 2])\n            cylinder(h = tack_h, r = tack_r, center = false);\n    }\n}\n\n// assembly\nunion() {\n    okedo_body();\n    rings();\n    rope_loops();\n    drumhead(body_h / 2 + head_t / 2);\n    drumhead(-body_h / 2 - head_t / 2);\n}",
    "renders": true
  },
  {
    "musical_instrument": "kotsuzumi",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Overall scale\nscale_factor = 0.8; // Makes model ~80 mm tall\n\n// Main body parameters\nbody_h = 70 * scale_factor;\nbody_r = 35 * scale_factor;\nneck_h = 20 * scale_factor;\nneck_r = 12 * scale_factor;\nwall = 2 * scale_factor;\n\n// Cord holes\ncord_r = 1.5 * scale_factor;\ncord_holes = 4; // four pairs\n\n// Skin tension ring parameters\nring_h = 4 * scale_factor;\nring_gap = 1 * scale_factor;\n\n// Detail parameters\nlip = 3 * scale_factor;\n\nmodule kotsuzumi_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = body_h, r1 = body_r, r2 = body_r * 0.9, center = true);\n        \n        // Inner hollow\n        translate([0, 0, 0])\n            cylinder(h = body_h + 1, r1 = body_r - wall, r2 = body_r * 0.9 - wall, center = true);\n    }\n}\n\nmodule kotsuzumi_neck() {\n    difference() {\n        // Neck cylinder\n        cylinder(h = neck_h, r = neck_r, center = true);\n        \n        // Inner hole\n        translate([0, 0, 0])\n            cylinder(h = neck_h + 1, r = neck_r - wall, center = true);\n    }\n}\n\nmodule cord_hole_pair(angle) {\n    translate([0, 0, body_h/2 - ring_h - ring_gap])\n        rotate([0, 90, angle]) {\n            // Top hole\n            translate([body_r - wall/2, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = wall + 1, r = cord_r, center = true);\n            // Bottom hole\n            translate([-(body_r - wall/2), 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = wall + 1, r = cord_r, center = true);\n        }\n}\n\nmodule cord_holes() {\n    for (i = [0 : cord_holes - 1]) {\n        cord_hole_pair(i * 360 / cord_holes);\n    }\n}\n\nmodule skin_rings() {\n    // Top ring\n    translate([0, 0, body_h/2 - ring_h/2])\n        cylinder(h = ring_h, r = body_r + 1, center = true);\n    \n    // Bottom ring\n    translate([0, 0, -body_h/2 + ring_h/2])\n        cylinder(h = ring_h, r = body_r * 0.9 + 1, center = true);\n}\n\nmodule lips() {\n    // Top lip\n    translate([0, 0, body_h/2])\n        cylinder(h = lip, r1 = body_r + 2, r2 = body_r + 1, center = false);\n    \n    // Bottom lip\n    translate([0, 0, -body_h/2])\n        cylinder(h = lip, r1 = body_r * 0.9 + 2, r2 = body_r * 0.9 + 1, center = true);\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    union() {\n        kotsuzumi_body();\n        \n        // Attach neck\n        translate([0, 0, body_h/2 + neck_h/2])\n            kotsuzumi_neck();\n        \n        // Add skin rings\n        skin_rings();\n        \n        // Add lips\n        lips();\n        \n        // Add cord holes\n        cord_holes();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "shimedaiko",
    "openscad_code": "// Shimedaiko (Japanese rope-tied drum) – medium complexity, realistic style\n// Approx. 85 mm tall, 65 mm wide – printable without supports\n\n// wall thickness everywhere = 2 mm\nwall = 2;\n\nmodule drum_barrel(h = 50, od = 60, id = 56, segments = 64) {\n    // main wooden barrel\n    difference() {\n        cylinder(h = h, d = od, $fn = segments);\n        translate([0,0,wall]) cylinder(h = h - 2*wall, d = id, $fn = segments);\n    }\n}\n\nmodule drum_head(od = 60) {\n    // stretched hide head, slightly domed\n    difference() {\n        translate([0,0,1]) sphere(d = od + 2, $fn = 64);\n        translate([0,0,-10]) cube([od+4, od+4, 20], center = true);\n    }\n    // thin ring that hides the seam\n    cylinder(h = 2, d = od + 2, $fn = 64);\n}\n\nmodule rope_loop(h = 3, r = 1.5) {\n    // simple torus-like rope segment\n    rotate_extrude(angle = 360, $fn = 16)\n        translate([r,0,0]) circle(r = r);\n}\n\nmodule lacing(loops = 8, h = 50, barrel_d = 60) {\n    // vertical rope lacing in V-pattern\n    step = 360 / loops;\n    for(i = [0:1:loops-1]) {\n        angle = i * step;\n        // left strand\n        rotate([0,0,angle]) translate([barrel_d/2 + 2, 0, 0]) {\n            difference() {\n                cylinder(h = h + 8, d = 3, $fn = 8);\n                translate([0,0,-1]) cylinder(h = h + 10, d = 2, $fn = 8);\n            }\n        }\n        // right strand\n        rotate([0,0,angle + step/2]) translate([barrel_d/2 + 2, 0, 0]) {\n            difference() {\n                cylinder(h = h + 8, d = 3, $fn = 8);\n                translate([0,0,-1]) cylinder(h = h + 10, d = 2, $fn = 8);\n            }\n        }\n        // small horizontal rope ring between them\n        rotate([0,0,angle + step/4]) translate([barrel_d/2 + 3.5, 0, h/2]) {\n            rotate([90,0,0]) rope_loop();\n        }\n    }\n}\n\nmodule stand() {\n    // simple tripod stand, 2 mm thick printable struts\n    for(a = [0, 120, 240]) {\n        rotate([0,0,a]) translate([25,0,-15]) rotate([105,0,0])\n            cylinder(h = 35, d = 4, $fn = 8);\n    }\n    // ring to keep legs apart\n    translate([0,0,-18]) cylinder(h = 2, d = 55, $fn = 64);\n}\n\n// assembly\nunion() {\n    // lower head\n    translate([0,0,0]) drum_head();\n    // barrel\n    translate([0,0,2]) drum_barrel();\n    // upper head\n    translate([0,0,52]) drum_head();\n    // rope lacing\n    translate([0,0,-4]) lacing();\n    // stand\n    translate([0,0,-2]) stand();\n}",
    "renders": true
  },
  {
    "musical_instrument": "gaku",
    "openscad_code": "// Realistic-style Gaku (Japanese picture frame) with medium complexity\n// Designed for 3D printing, approximately 80x60x10mm\n\n// Frame parameters\nframe_width = 80;\nframe_height = 60;\nframe_thickness = 10;\nwall_thickness = 2.5;\ninner_margin = 8;\n\n// Wood texture parameters\ngroove_depth = 0.5;\ngroove_width = 1.2;\n\nmodule frame_profile() {\n    difference() {\n        // Main frame body\n        cube([frame_width, frame_height, frame_thickness], center=true);\n        \n        // Inner opening for picture\n        translate([0, 0, -groove_depth])\n        cube([\n            frame_width - 2*inner_margin,\n            frame_height - 2*inner_margin,\n            frame_thickness + 2*groove_depth\n        ], center=true);\n    }\n}\n\nmodule wood_texture_horizontal() {\n    for (y = [-frame_height/2 + 3 : 4 : frame_height/2 - 3]) {\n        translate([0, y, frame_thickness/2 - groove_depth/2])\n        cube([frame_width - 4, groove_width, groove_depth], center=true);\n    }\n}\n\nmodule wood_texture_vertical() {\n    for (x = [-frame_width/2 + 3 : 4 : frame_width/2 - 3]) {\n        translate([x, 0, frame_thickness/2 - groove_depth/2])\n        cube([groove_width, frame_height - 4, groove_depth], center=true);\n    }\n}\n\nmodule corner_detail() {\n    // Decorative corner brackets\n    translate([frame_width/2 - 6, frame_height/2 - 6, 0])\n    difference() {\n        cube([12, 12, frame_thickness/2]);\n        translate([2, 2, -1])\n        cube([8, 8, frame_thickness/2 + 2]);\n    }\n}\n\nmodule picture_support() {\n    // Back support ledge for picture\n    translate([0, 0, -frame_thickness/2 + 1])\n    cube([\n        frame_width - 2*inner_margin - 2,\n        frame_height - 2*inner_margin - 2,\n        2\n    ], center=true);\n}\n\nmodule stand_support() {\n    // Foldable stand on back\n    translate([0, -frame_height/2 + 10, -frame_thickness/2 + 1])\n    rotate([0, -20, 0])\n    cube([40, 3, 1.5], center=true);\n}\n\nmodule mounting_hole() {\n    // Wall mounting hole\n    translate([0, frame_height/2 - 5, 0])\n    rotate([90, 0, 0])\n    cylinder(h=6, r=1.5, center=true);\n}\n\n// Main assembly\nunion() {\n    // Frame body\n    frame_profile();\n    \n    // Add wood texture to front\n    wood_texture_horizontal();\n    wood_texture_vertical();\n    \n    // Corner decorations (all four corners)\n    for (mx = [0, 1]) {\n        for (my = [0, 1]) {\n            mirror([mx, my, 0])\n            corner_detail();\n        }\n    }\n    \n    // Picture support ledge\n    picture_support();\n    \n    // Back features\n    difference() {\n        // Stand support\n        stand_support();\n        \n        // Mounting hole\n        mounting_hole();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "miya",
    "openscad_code": "// Miya (Shinto shrine) in realistic style, medium complexity\n// Dimensions in mm – final model ~80 mm long, 45 mm wide, 50 mm tall\n\n// General parameters\nwall = 1.6;                 // 3D-print friendly wall thickness\nbase_w = 70; base_d = 40;   // footprint\nbase_h = 4;                 // plinth height\nstep_h = 2;\n\n// Roof pieces\nroof_l = 75; roof_w = 45; roof_t = 2;\nrafter_l = 12; rafter_w = 3; rafter_t = 1.5;\n\n// Pillars\npillar_d = 3; pillar_h = 25;\npillar_count = 4; pillar_span = 30;\n\n// Door\ndoor_w = 12; door_h = 18;\n\nmodule base() {\n    // Stone plinth\n    translate([0, 0, base_h/2])\n        cube([base_w, base_d, base_h], center=true);\n\n    // Single shallow step around\n    translate([0, 0, base_h + step_h/2])\n        cube([base_w + 4, base_d + 4, step_h], center=true);\n}\n\nmodule pillars() {\n    // Front row\n    for(x = [-pillar_span/2, pillar_span/2])\n        translate([x, base_d/2 - 2, base_h + step_h + pillar_h/2])\n            cylinder(h = pillar_h, d = pillar_d, $fn = 20);\n    // Rear row\n    for(x = [-pillar_span/2, pillar_span/2])\n        translate([x, -base_d/2 + 2, base_h + step_h + pillar_h/2])\n            cylinder(h = pillar_h, d = pillar_d, $fn = 20);\n}\n\nmodule walls() {\n    // Left wall\n    translate([-pillar_span/2 - door_w/2 - wall/2, 0,\n               base_h + step_h + pillar_h/2])\n        cube([wall, base_d - 4, pillar_h], center=true);\n\n    // Right wall\n    translate([ pillar_span/2 + door_w/2 + wall/2, 0,\n               base_h + step_h + pillar_h/2])\n        cube([wall, base_d - 4, pillar_h], center=true);\n\n    // Rear wall\n    translate([0, -base_d/2 + 2,\n               base_h + step_h + pillar_h/2])\n        cube([pillar_span + door_w + wall*2, wall, pillar_h], center=true);\n}\n\nmodule door() {\n    // Door frame\n    translate([0, base_d/2 - wall/2,\n               base_h + step_h + door_h/2])\n        cube([door_w + wall, wall, door_h], center=true);\n\n    // Door opening\n    translate([0, base_d/2 - wall*1.5,\n               base_h + step_h + door_h/2])\n        cube([door_w - wall, wall*2, door_h - wall], center=true);\n}\n\nmodule roof() {\n    // Main roof body\n    translate([0, 0, base_h + step_h + pillar_h + roof_t/2])\n        cube([roof_l, roof_w, roof_t], center=true);\n\n    // Chigi (ornamental horns)\n    translate([ roof_l/2 - 1, 0,\n                base_h + step_h + pillar_h + roof_t + 6])\n        cube([2, 2, 12], center=true);\n    translate([-roof_l/2 + 1, 0,\n                base_h + step_h + pillar_h + roof_t + 6])\n        cube([2, 2, 12], center=true);\n\n    // Rafters under eaves\n    for(side = [-1, 1]) {\n        // Left & right eaves\n        for(i = [-3:1:3]) {\n            translate([i*10, side*(roof_w/2 + rafter_t/2),\n                       base_h + step_h + pillar_h + roof_t/2])\n                cube([rafter_w, rafter_t, rafter_l], center=true);\n        }\n        // Front & back eaves\n        for(i = [-4:1:4]) {\n            translate([side*(roof_l/2 + rafter_t/2), i*5,\n                       base_h + step_h + pillar_h + roof_t/2])\n                rotate([0, 0, 90])\n                    cube([rafter_w, rafter_t, rafter_l], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    pillars();\n    walls();\n    door();\n    roof();\n}",
    "renders": true
  },
  {
    "musical_instrument": "ikko",
    "openscad_code": "// OpenSCAD realistic ikko (small model rocket) – medium complexity\n// Overall length ≈ 80 mm, 1 mm wall thickness, no problematic overhangs\n\n$fn = 36;           // smoother curves for 3D-print\n\n// ---- PARAMETERS ------------------------------------------------------------\nbody_d      = 15;   // main tube OD\nbody_r      = body_d/2;\nbody_h      = 55;   // main airframe length\nnose_len    = 20;   // ogive nose length\nfin_t       = 1.5;  // fin thickness\nfin_root    = 25;   // root chord\nfin_span    = 12;   // span\nfin_sweep   = 8;    // leading-edge sweep\nmotor_d     = 8;    // 18 mm motor mount OD\nmotor_h     = 30;   // motor tube length\nwall_t      = 1;    // wall thickness for all tubes\ncoupler_d   = body_d - 2*wall_t;\ncoupler_h   = 10;\nrail_w      = 10;   // launch-lug length\nrail_d      = 3.2 + 0.4; // M3 screw + clearance\n\n// ---- MAIN BODY -------------------------------------------------------------\nmodule airframe() {\n    difference() {\n        cylinder(h = body_h, r = body_r);               // outer shell\n        translate([0,0,-0.1])\n            cylinder(h = body_h+0.2, r = body_r-wall_t); // hollow\n    }\n}\n\n// ---- NOSE CONE (ogive profile) ---------------------------------------------\nmodule nose_cone() {\n    translate([0,0,body_h])\n    rotate_extrude()\n        for (z = [0:0.5:nose_len])\n            let (r = body_r * sqrt(1 - pow((z-nose_len)/nose_len,2)))\n                [r, z];\n}\n\n// ---- MOTOR MOUNT TUBE -------------------------------------------------------\nmodule motor_mount() {\n    difference() {\n        cylinder(h = motor_h, r = motor_d/2);\n        translate([0,0,-0.1])\n            cylinder(h = motor_h+0.2, r = motor_d/2 - wall_t);\n    }\n}\n\n// ---- COUPLER RING (keeps motor centered) -----------------------------------\nmodule center_ring() {\n    difference() {\n        cylinder(h = 3, r = body_r - wall_t);\n        cylinder(h = 3.2, r = motor_d/2 + 0.2);\n    }\n}\n\n// ---- FINS (three identical) -------------------------------------------------\nmodule fin_shape() {\n    linear_extrude(height = fin_t)\n        polygon(points=[\n            [0,0],                                    // root LE\n            [fin_sweep, fin_span],                    // tip\n            [fin_root, 0]                             // root TE\n        ]);\n}\n\nmodule fins() {\n    for (a = [0:120:240])\n        rotate([0,0,a])\n            translate([0, body_r, 0])\n                fin_shape();\n}\n\n// ---- LAUNCH LUG -------------------------------------------------------------\nmodule launch_lug() {\n    rotate([90,0,0])\n    difference() {\n        cylinder(h = rail_w, r = rail_d/2);\n        translate([0,0,-0.1])\n            cylinder(h = rail_w+0.2, r = rail_d/2 - wall_t);\n    }\n}\n\n// ---- ASSEMBLY ---------------------------------------------------------------\nairframe();\nnose_cone();\ntranslate([0,0,body_h - motor_h])\n    motor_mount();\ntranslate([0,0,body_h - motor_h - 3])\n    center_ring();\nfins();\ntranslate([0, body_r-1, body_h/2])\n    launch_lug();",
    "renders": true
  },
  {
    "musical_instrument": "san",
    "openscad_code": "// OpenSCAD model of a realistic san (Japanese hand fan)\n// Medium complexity, 3D-printable, ~80 mm wide\n\n$fn = 36;  // Smooth curves\n\n// Main module\nmodule san() {\n    // Central pivot pin\n    translate([0, 0, 1])\n        cylinder(h = 5, d = 6, $fn = 20);\n\n    // Fan ribs\n    for (a = [-50 : 5 : 50]) {\n        rotate([0, 0, a])\n            translate([20, 0, 1.5])\n                rib();\n    }\n\n    // Fan fabric stretched between ribs\n    fabric();\n\n    // Handle\n    translate([0, 0, -25])\n        handle();\n}\n\n// Individual bamboo rib\nmodule rib() {\n    // Main rib body\n    linear_extrude(height = 1.2)\n        polygon([\n            [0, -1.5],\n            [60, -1],\n            [60, 1],\n            [0, 1.5]\n        ]);\n\n    // Rib tip detail\n    translate([60, 0, 0.6])\n        rotate([90, 0, 0])\n            cylinder(h = 2, d1 = 2, d2 = 0);\n}\n\n// Fabric between ribs\nmodule fabric() {\n    difference() {\n        // Outer fabric shape\n        rotate_extrude(angle = 100, $fn = 100)\n            translate([30, 0, 0])\n                polygon([\n                    [0, 0],\n                    [30, 0],\n                    [30, 40],\n                    [0, 40]\n                ]);\n\n        // Cut hole for handle\n        rotate([0, 90, 0])\n            cylinder(h = 100, d = 8, center = true);\n    }\n}\n\n// Handle grip\nmodule handle() {\n    // Main handle shaft\n    cylinder(h = 40, d = 8, center = true);\n\n    // Grip rings for better hold\n    for (z = [-15 : 5 : 15]) {\n        translate([0, 0, z])\n            cylinder(h = 2, d = 9.5);\n    }\n\n    // Handle end cap\n    translate([0, 0, -20])\n        sphere(d = 10);\n}\n\n// Render the complete fan\nsan();",
    "renders": true
  },
  {
    "musical_instrument": "hoko",
    "openscad_code": "// Realistic Hoko (Japanese halberd) – medium complexity\n// Overall length ≈ 90 mm, printable standing upright\n\n$fn = 36;               // Smooth curves\nblade_t = 1.6;          // Wall thickness for FDM\npole_r = 4;             // Pole radius\npole_h = 70;            // Pole height\ncounter_w = 7;          // Pommel width\ncounter_h = 8;\n\nmodule pole() {\n    // Main wooden pole\n    difference() {\n        cylinder(h = pole_h, r = pole_r, center = false);\n        // Hollow to save material\n        translate([0, 0, -0.1])\n            cylinder(h = pole_h + 0.2, r = pole_r - blade_t, center = false);\n    }\n}\n\nmodule counterweight() {\n    // Cast-metal pommel\n    translate([0, 0, -counter_h/2 - 0.1]) {\n        difference() {\n            // Octahedral cap\n            cylinder(h = counter_h, r1 = counter_w/2, r2 = 0, center = true);\n            cylinder(h = counter_h + 0.2, r1 = counter_w/2 - blade_t,\n                     r2 = 0, center = true);\n        }\n    }\n}\n\nmodule blade() {\n    // Main spear blade\n    blade_l = 20;\n    blade_w = 14;\n\n    translate([0, 0, pole_h + blade_l/2]) rotate([0, 0, 0]) {\n        difference() {\n            // Symmetrical leaf-shaped blade\n            linear_extrude(height = blade_t, center = true, convexity = 4)\n                polygon(points = [\n                    [0, 0],\n                    [blade_w/2, blade_l*0.2],\n                    [blade_w/2*0.8, blade_l],\n                    [0, blade_l*1.1],\n                    [-blade_w/2*0.8, blade_l],\n                    [-blade_w/2, blade_l*0.2]\n                ]);\n            // Fuller groove on both sides\n            translate([0, blade_l*0.5, 0]) rotate([90, 0, 0])\n                cylinder(h = blade_t + 0.2, r1 = blade_w/10, r2 = 0, center = true);\n        }\n    }\n}\n\nmodule side_hook() {\n    // Curved side-hook blade\n    hook_l = 12;\n    hook_w = 8;\n    hook_t = blade_t;\n\n    translate([0, 0, pole_h + 3]) rotate([0, 0, 35]) {\n        difference() {\n            // Scythe-like crescent\n            linear_extrude(height = hook_t, center = true, convexity = 4)\n                polygon(points = [\n                    [0, 0],\n                    [hook_w*0.4, hook_l*0.9],\n                    [0, hook_l],\n                    [-hook_w*0.3, hook_l*0.8]\n                ]);\n            // Thinning cutout for realism\n            translate([0, hook_l*0.5, 0]) rotate([90, 0, 0])\n                cylinder(h = hook_t + 0.2, r1 = hook_w/8, r2 = 0, center = true);\n        }\n    }\n}\n\nmodule blade_collar() {\n    // Reinforcing collar between blade and pole\n    collar_h = 3;\n    collar_r = pole_r + 2;\n    translate([0, 0, pole_h]) {\n        difference() {\n            cylinder(h = collar_h, r = collar_r);\n            cylinder(h = collar_h + 0.2, r = pole_r);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    pole();\n    translate([0, 0, 0]) counterweight();\n    blade_collar();\n    blade();\n    side_hook();\n    mirror([0, 1, 0]) side_hook();   // Symmetrical hook on opposite side\n}",
    "renders": true
  },
  {
    "musical_instrument": "den",
    "openscad_code": "// Realistic medium-complexity 3D-printable den\n// Dimensions: 80 x 60 x 50 mm (LxWxH)\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main den base (half-buried hill shape)\nmodule den_base() {\n    difference() {\n        // Outer mound\n        scale([1, 0.8, 0.6])\n            sphere(d = 80, $fn = 64);\n        \n        // Hollow interior\n        translate([0, 0, -5])\n            scale([1, 0.75, 0.5])\n                sphere(d = 76 - wall*2, $fn = 64);\n        \n        // Flat base\n        translate([0, 0, -25])\n            cube([200, 200, 50], center = true);\n    }\n}\n\n// Entrance tunnel\nmodule entrance() {\n    // Tunnel tube\n    rotate([0, -20, 0])\n        translate([-30, 0, -10])\n            difference() {\n                cylinder(h = 30, d = 25, $fn = 32);\n                translate([0, 0, wall])\n                    cylinder(h = 30 + 1, d = 25 - wall*2, $fn = 32);\n            }\n    \n    // Entrance trim ring\n    rotate([0, -20, 0])\n        translate([-30, 0, -10])\n            cylinder(h = 3, d1 = 27, d2 = 25, $fn = 32);\n}\n\n// Support logs on top\nmodule roof_logs() {\n    for(i = [-30:15:30]) {\n        translate([i, 0, 20])\n            rotate([0, 90, 0])\n                cylinder(h = 65, d = 6, $fn = 16);\n    }\n}\n\n// Moss texture using small spheres\nmodule moss() {\n    for(i = [1:30]) {\n        rotate([rand(360), rand(360), rand(360)])\n            translate([\n                rand(40) - 20, \n                rand(30) - 15, \n                rand(25) - 5\n            ])\n            sphere(d = 1.5 + rand(2), $fn = 8);\n    }\n}\n\n// Stone pathway\nmodule pathway() {\n    for(i = [1:15]) {\n        translate([\n            -50 + rand(20), \n            rand(40) - 20, \n            -24\n        ])\n        rotate([0, 0, rand(360)])\n            scale([1, 0.7, 0.5])\n                cylinder(h = 2 + rand(3), d = 4 + rand(4), $fn = 6);\n    }\n}\n\n// Window opening\nmodule window() {\n    rotate([0, 25, 0])\n        translate([25, 15, 0])\n            difference() {\n                cube([20, 2, 15], center = true);\n                cube([18, 3, 13], center = true);\n            }\n}\n\n// Random helper function\nfunction rand(n) = floor(rands(0, n, 1)[0]);\n\n// Assembly\nunion() {\n    den_base();\n    entrance();\n    roof_logs();\n    window();\n    \n    // Add moss texture with random seed\n    translate([0, 0, 0])\n        moss();\n    \n    pathway();\n}",
    "renders": true
  },
  {
    "musical_instrument": "atarigane",
    "openscad_code": "// Atarigane (Japanese hand bell) - realistic medium complexity version\n// Overall height ~70mm, printable on most FDM machines\n\nmodule atarigane_body() {\n    difference() {\n        // Main bell shell - flared cone shape\n        rotate_extrude(angle = 360, $fn = 64)\n            translate([0, -3, 0])\n                polygon(points=[\n                    [0, 0],           // top center\n                    [5, 0],           // top edge\n                    [12, 20],         // upper flare\n                    [18, 40],         // mid flare\n                    [20, 50],         // lower flare\n                    [10, 60],         // bottom edge\n                    [0, 60]           // bottom center\n                ]);\n        \n        // Hollow interior - maintain 2mm wall thickness\n        rotate_extrude(angle = 360, $fn = 64)\n            translate([0, -1, 0])\n                scale([0.8, 0.8])\n                    polygon(points=[\n                        [0, 2],         // offset top\n                        [4, 2],         // inner top\n                        [10, 22],       // inner flare\n                        [16, 42],       // inner mid\n                        [18, 52],       // inner bottom\n                        [8, 62],        // inner base\n                        [0, 62]         // inner center\n                    ]);\n    }\n}\n\nmodule striker_ball() {\n    // Metal striker ball on string\n    translate([0, 0, 45])\n        sphere(d = 12, $fn = 32);\n    \n    // String attachment point\n    translate([0, 0, 51])\n        cylinder(h = 2, d = 3, $fn = 16);\n}\n\nmodule handle_mount() {\n    // Rounded rectangular handle mount\n    difference() {\n        translate([-5, 0, 0])\n            cube([10, 15, 8], center = true);\n        \n        // Mounting hole\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 4, center = true, $fn = 16);\n        \n        // Rounding edges\n        translate([5, 7.5, 0])\n            sphere(d = 8, $fn = 16);\n        translate([-5, 7.5, 0])\n            sphere(d = 8, $fn = 16);\n        translate([5, -7.5, 0])\n            sphere(d = 8, $fn = 16);\n        translate([-5, -7.5, 0])\n            sphere(d = 8, $fn = 16);\n    }\n}\n\nmodule decorative_lines() {\n    // Raised decorative rings around bell\n    for(z = [15, 25, 35, 45]) {\n        rotate_extrude(angle = 360, $fn = 64)\n            translate([18, 0, z])\n                circle(d = 1.5, $fn = 16);\n    }\n    \n    // Vertical ribs\n    for(i = [0:15:359]) {\n        rotate([0, 0, i])\n            translate([18, 0, 20])\n                cube([1.5, 0.8, 30], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Bell body\n    atarigane_body();\n    \n    // Decorative elements\n    decorative_lines();\n    \n    // Handle mount on top\n    translate([0, 0, -3])\n        handle_mount();\n    \n    // Internal striker\n    striker_ball();\n}",
    "renders": true
  },
  {
    "musical_instrument": "surdo",
    "openscad_code": "// Surdo (Brazilian bass drum) – OpenSCAD – medium complexity, 3-D-printable\n// Scale: 80 mm total height, 60 mm drum shell diameter\n// All walls ≥ 2 mm, no large overhangs\n\n$fn = 48;               // smooth curves without excess polygons\nwall = 2;               // uniform wall thickness\ndia = 60;               // drum shell outer diameter\nh = 45;                 // shell height\nhoop_h = 4;             // counter-hoop height\nhead_gap = 1;           // clearance between head and hoop\nlug_w = 4; lug_h = 5;   // lug dimensions\nnum_lugs = 6;           // lugs around the rim\n\nmodule shell() {\n    difference() {\n        cylinder(h = h, d = dia);\n        translate([0, 0, wall])\n            cylinder(h = h - 2*wall, d = dia - 2*wall);\n    }\n}\n\nmodule tension_hoop(top = true) {\n    // simple hoop with inner lip that traps the head\n    difference() {\n        cylinder(h = hoop_h, d = dia + 2*wall);\n        translate([0, 0, -0.01])\n            cylinder(h = hoop_h + 0.02, d = dia - head_gap);\n    }\n    if (top) {\n        // six evenly spaced threaded lug blocks\n        for (i = [0 : num_lugs-1]) {\n            rotate([0, 0, i*360/num_lugs])\n                translate([dia/2 + wall/2, 0, hoop_h/2])\n                    cube([lug_w, wall*1.5, lug_h], center = true);\n        }\n    }\n}\n\nmodule drum_head() {\n    // thin membrane disk\n    cylinder(h = 0.5, d = dia - head_gap);\n}\n\nmodule leg_supports() {\n    // three small feet to let the drum stand\n    for (a = [0 : 120 : 240]) {\n        rotate([0, 0, a])\n            translate([dia/2 - wall, 0, -wall/2])\n                cube([wall*2, wall*3, wall], center = true);\n    }\n}\n\n// Build the drum\nunion() {\n    shell();\n    translate([0, 0, h]) tension_hoop(true);\n    translate([0, 0, -hoop_h]) tension_hoop(false);\n    translate([0, 0, 0.1]) drum_head();\n    translate([0, 0, h - 0.5]) drum_head();\n    leg_supports();\n}",
    "renders": true
  },
  {
    "musical_instrument": "cuica",
    "openscad_code": "// Cuica - Brazilian friction drum\n// Medium complexity realistic model\n// Size: ~80mm tall, 3D printable\n\n// Parameters\n$fn = 32;\nbody_d = 60;\nbody_h = 40;\nskin_d = 62;\nskin_t = 2;\nstick_d = 8;\nstick_h = 80;\nstick_top_d = 12;\nbase_t = 5;\nwall_t = 2.5;\n\nmodule body() {\n    // Main cylindrical body\n    difference() {\n        cylinder(d=body_d, h=body_h);\n        \n        // Hollow out interior\n        translate([0, 0, -0.1])\n            cylinder(d=body_d - 2*wall_t, h=body_h + 0.2);\n    }\n    \n    // Bottom base\n    translate([0, 0, -base_t])\n        cylinder(d=body_d + 4, h=base_t);\n    \n    // Top rim for skin attachment\n    translate([0, 0, body_h])\n        cylinder(d=body_d + 2, h=3);\n}\n\nmodule skin() {\n    // Drum skin membrane\n    translate([0, 0, body_h + 3])\n        cylinder(d=skin_d, h=skin_t);\n    \n    // Skin overlap ring\n    translate([0, 0, body_h + 3])\n        cylinder(d=skin_d + 4, h=1);\n}\n\nmodule stick() {\n    // Main stick shaft\n    translate([0, 0, body_h + skin_t + 3])\n        cylinder(d=stick_d, h=stick_h);\n    \n    // Tapered top\n    translate([0, 0, body_h + skin_t + 3 + stick_h])\n        cylinder(d1=stick_d, d2=stick_top_d, h=8);\n    \n    // Handle grip rings\n    for(i = [1:4]) {\n        translate([0, 0, body_h + skin_t + 3 + stick_h*0.8 - i*6])\n            cylinder(d=stick_d + 2, h=2);\n    }\n}\n\nmodule tuning_system() {\n    // Metal rod support\n    translate([0, 0, body_h + skin_t + 3 + 5])\n        rotate([90, 0, 0])\n            cylinder(d=3, h=body_d/2 - 5);\n    \n    // Clamping screws (4 around)\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([body_d/2 - 8, 0, body_h + 5])\n                cylinder(d=4, h=8);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    skin();\n    stick();\n    tuning_system();\n}\n\n// Support feet on base\nfor(i = [0:2]) {\n    rotate([0, 0, i*120])\n        translate([body_d/2 - 5, 0, -base_t])\n            cylinder(d=6, h=base_t);\n}",
    "renders": true
  },
  {
    "musical_instrument": "tamborim",
    "openscad_code": "// Tamborim - Brazilian samba frame drum\n// Medium complexity realistic model\n\n$fn = 36;\n\n// Overall dimensions\ntamb_diameter = 80;\ntamb_height = 25;\nshell_thickness = 2.5;\nhead_thickness = 0.8;\n\n// Tensioning system\nhook_count = 6;\nhook_diameter = 1.8;\nhook_height = 8;\nhook_base_width = 4;\n\n// Handle dimensions\nhandle_length = 30;\nhandle_diameter = 12;\nhandle_taper = 6;\n\n// Shell with realistic profile\nmodule shell() {\n    difference() {\n        // Outer shell - slightly tapered\n        cylinder(d1=tamb_diameter, d2=tamb_diameter-4, h=tamb_height, center=true);\n        \n        // Hollow interior\n        cylinder(d1=tamb_diameter-2*shell_thickness, d2=tamb_diameter-4-2*shell_thickness, h=tamb_height+1, center=true);\n        \n        // Top edge rounding - remove sharp edge\n        translate([0, 0, tamb_height/2 - 1])\n            cylinder(d=tamb_diameter+2, h=2, center=true);\n    }\n}\n\n// Drum head (plastic/mylar)\nmodule drum_head() {\n    translate([0, 0, tamb_height/2 - head_thickness/2])\n        cylinder(d=tamb_diameter-2, h=head_thickness, center=true);\n}\n\n// Tension hooks for rim\nmodule tension_hook() {\n    // Hook base\n    difference() {\n        cube([hook_base_width, hook_base_width/2, hook_height], center=true);\n        // Hole for tension rod\n        translate([0, 0, hook_height/2])\n            rotate([90, 0, 0])\n                cylinder(d=hook_diameter, h=hook_base_width+1, center=true);\n    }\n    \n    // Hook curve\n    translate([hook_base_width/2 - hook_diameter/2, 0, hook_height/2])\n        rotate([0, 90, 0])\n            cylinder(d=hook_diameter, h=hook_base_width*1.5, center=true);\n}\n\n// Tension hook assembly around rim\nmodule tension_hooks() {\n    for (i = [0:hook_count-1]) {\n        rotate([0, 0, i * 360/hook_count])\n            translate([tamb_diameter/2 - hook_base_width/2, 0, tamb_height/2 - hook_height/2])\n                tension_hook();\n    }\n}\n\n// Ergonomic handle with finger grooves\nmodule handle() {\n    difference() {\n        // Main handle - tapered cylinder\n        translate([0, -handle_length/2 - tamb_diameter/2, 0])\n            rotate([90, 0, 0])\n                cylinder(d1=handle_diameter, d2=handle_taper, h=handle_length, center=true);\n        \n        // Finger grooves\n        for (i = [0:3]) {\n            groove_y = -tamb_diameter/2 - handle_length/2 + (i+1)*handle_length/5;\n            translate([0, groove_y, 0])\n                rotate([90, 0, 0])\n                    cylinder(d=handle_diameter-2, h=handle_diameter+1, center=true);\n        }\n    }\n}\n\n// Rim with tensioning system\nmodule rim() {\n    // Top rim\n    translate([0, 0, tamb_height/2])\n        cylinder(d=tamb_diameter+2, h=2, center=true);\n    \n    // Bottom rim\n    translate([0, 0, -tamb_height/2])\n        cylinder(d=tamb_diameter+2, h=2, center=true);\n}\n\n// Assembly\nunion() {\n    shell();\n    drum_head();\n    rim();\n    tension_hooks();\n    handle();\n}",
    "renders": true
  },
  {
    "musical_instrument": "pandeiro",
    "openscad_code": "// PANDEIRO – medium-complexity, 3D-printable version\n// Overall Ø 80 mm, height 27 mm\n// All parts are printable without support (top-down orientation)\n\n$fn = 60;\n\n// Main body ----------------------------------------------------\nmodule shell() {\n    difference() {\n        // outer shell\n        cylinder(h = 20, d = 80, center = true);\n        // hollow cavity\n        translate([0, 0, 1])\n            cylinder(h = 22, d = 74, center = true);\n    }\n}\n\n// Skin head ----------------------------------------------------\nmodule head() {\n    difference() {\n        cylinder(h = 1.5, d = 78, center = true);\n        translate([0, 0, 0.8])\n            cylinder(h = 2, d = 74, center = true);\n    }\n}\n\n// Tension ring (metal hoop) -----------------------------------\nmodule hoop() {\n    difference() {\n        cylinder(h = 3, d = 82, center = true);\n        cylinder(h = 4, d = 78, center = true);\n    }\n}\n\n// Jingles ------------------------------------------------------\nmodule jingle(rim_r = 40, z = 8) {\n    // individual jingle disk\n    rotate_extrude()\n        translate([3, 0])\n            circle(r = 2, $fn = 20);\n}\n\nmodule jingle_pair(rim_r = 40, z = 8, angle = 0) {\n    // pair of jingles on small pin holder\n    rotate([0, 0, angle])\n        translate([rim_r, 0, z])\n        union() {\n            // pin\n            rotate([90, 0, 0])\n                cylinder(h = 10, d = 1.5, center = true);\n            // two jingles\n            translate([0, -2, 0]) jingle();\n            translate([0,  2, 0]) jingle();\n        }\n}\n\n// Plating screws (6 of them) ----------------------------------\nmodule screws() {\n    for (a = [0 : 60 : 359])\n        rotate([0, 0, a])\n            translate([38, 0, 9])\n                cylinder(h = 5, d = 3, $fn = 6);\n}\n\n// Assembly -----------------------------------------------------\nunion() {\n    // body\n    shell();\n    // head\n    translate([0, 0, 10.5]) head();\n    // hoop\n    translate([0, 0, 12]) color([0.7, 0.7, 0.7]) hoop();\n    // 6 jingle pairs\n    for (a = [0 : 60 : 359])\n        jingle_pair(rim_r = 41, z = 9, angle = a);\n    // screws\n    color([0.5, 0.5, 0.5]) screws();\n}",
    "renders": true
  },
  {
    "musical_instrument": "repinique",
    "openscad_code": "// Repinique - medium complexity realistic style\n// Overall dimensions: ~60mm height x 50mm diameter\n// Wall thickness: 2mm for 3D printing\n\nmodule drum_shell(height=55, radius=25, wall=2) {\n    difference() {\n        cylinder(h=height, r=radius, $fn=64);\n        translate([0,0,wall])\n            cylinder(h=height-wall*2, r=radius-wall, $fn=64);\n    }\n}\n\nmodule tension_rod(radius=25) {\n    rotate([90,0,0])\n        cylinder(h=4, r=0.5, $fn=8);\n}\n\nmodule hoop(radius=25, thickness=2, height=3) {\n    difference() {\n        cylinder(h=height, r=radius, $fn=64);\n        translate([0,0,-1])\n            cylinder(h=height+2, r=radius-thickness, $fn=64);\n    }\n}\n\nmodule lug_body() {\n    difference() {\n        cube([4, 5, 12], center=true);\n        translate([0,0,-5])\n            cylinder(h=10, r=1.2, $fn=16);\n    }\n}\n\nmodule drum_lug(radius=25) {\n    translate([radius-1, 0, 0])\n        lug_body();\n}\n\nmodule tension_ring(radius=25, lug_count=6) {\n    hoop(radius=radius, thickness=2.5, height=4);\n    \n    for(i=[0:lug_count-1]) {\n        angle = i * (360/lug_count);\n        rotate([0,0,angle])\n            translate([0,0,2])\n                drum_lug(radius=radius);\n        \n        rotate([0,0,angle])\n            translate([0,0,4])\n                tension_rod(radius=radius+3);\n    }\n}\n\nmodule drum_head(radius=24.5) {\n    translate([0,0,-0.5])\n        cylinder(h=1, r=radius, $fn=64);\n}\n\nmodule repinique() {\n    // Bottom tension ring\n    translate([0,0,0])\n        tension_ring(radius=25);\n    \n    // Drum shell\n    translate([0,0,4])\n        drum_shell(height=45, radius=25);\n    \n    // Top tension ring\n    translate([0,0,49])\n        tension_ring(radius=25);\n    \n    // Drum heads\n    translate([0,0,3.5])\n        drum_head();\n    translate([0,0,50])\n        drum_head();\n    \n    // Simple carrying hook\n    translate([0,-25,27])\n        rotate([90,0,0])\n            difference() {\n                cylinder(h=8, r=2, $fn=16);\n                translate([0,0,-1])\n                    cube([4,3,10], center=true);\n            }\n}\n\nrepinique();",
    "renders": true
  },
  {
    "musical_instrument": "agogô",
    "openscad_code": "// Agogô - traditional Brazilian double bell percussion instrument\n// Designed for 3D printing with realistic appearance\n\n// Parameters for realistic sizing\n$fn = 60;\nbell_height = 35;\nbell_diameter = [28, 24]; // Large and small bell diameters\nwall_thickness = 2.5;\nstem_diameter = 8;\nstem_length = 120;\nbase_height = 15;\nbase_width = 35;\n\n// Main module to create the complete agogô\nmodule agogo() {\n    // Base support\n    translate([0, 0, 0]) base();\n    \n    // Vertical stem\n    translate([0, 0, base_height]) stem();\n    \n    // Bells attached to stem\n    translate([0, 0, base_height + stem_length * 0.7]) \n        rotate([90, 0, 0]) \n            bells();\n    \n    // Connecting rod between bells\n    translate([0, 0, base_height + stem_length * 0.7]) \n        rotate([90, 0, 0]) \n            connecting_rod();\n}\n\n// Base for stability\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = base_height, d = base_width, center = true);\n        \n        // Lightening holes for material savings\n        for(i = [-1, 1]) {\n            translate([i * 10, 0, -base_height/2]) \n                cylinder(h = base_height + 1, d = 6, center = false);\n        }\n    }\n}\n\n// Vertical holding stem\nmodule stem() {\n    cylinder(h = stem_length, d = stem_diameter, center = false);\n    \n    // Reinforcement rings\n    for(pos = [0.25, 0.5, 0.75]) {\n        translate([0, 0, stem_length * pos]) \n            cylinder(h = 3, d = stem_diameter + 4, center = true);\n    }\n}\n\n// Both bells assembly\nmodule bells() {\n    // Large bell (lower pitch)\n    translate([0, 0, 0]) bell(bell_diameter[0], bell_height, 0);\n    \n    // Small bell (higher pitch)\n    translate([0, bell_diameter[0]/2 + bell_diameter[1]/2 + 6, 0]) \n        bell(bell_diameter[1], bell_height * 0.85, 1);\n}\n\n// Individual bell module\nmodule bell(diameter, height, bell_type) {\n    difference() {\n        // Outer shell of bell\n        union() {\n            // Main bell body\n            cylinder(h = height, d = diameter, center = false);\n            \n            // Flared bell bottom\n            translate([0, 0, height]) \n                cylinder(h1 = diameter/6, h2 = 0, d1 = diameter * 1.15, d2 = diameter, center = false);\n            \n            // Top rounded cap\n            translate([0, 0, height + diameter/6]) \n                sphere(d = diameter * 0.9);\n            \n            // Mounting tab for connecting rod\n            translate([-diameter/2 - 3, 0, height/2]) \n                cube([6, diameter/3, diameter/6], center = true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1]) \n            cylinder(h = height + 2, d = diameter - wall_thickness * 2, center = false);\n        \n        // Sound hole at top\n        translate([0, 0, height + diameter/6]) \n            sphere(d = diameter * 0.9 - wall_thickness * 2);\n    }\n    \n    // Strike marks for realism\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45]) \n            translate([diameter/4, 0, height * 0.7]) \n                sphere(d = wall_thickness/2);\n    }\n}\n\n// Connecting rod between bells\nmodule connecting_rod() {\n    // Central rod\n    cylinder(h = bell_diameter[0]/2 + bell_diameter[1]/2 + 6, d = 6, center = false);\n    \n    // End caps\n    translate([0, 0, 0]) sphere(d = 8);\n    translate([0, bell_diameter[0]/2 + bell_diameter[1]/2 + 6, 0]) sphere(d = 8);\n}\n\n// Render the complete agogô\nagogo();",
    "renders": true
  },
  {
    "musical_instrument": "berimbau",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Overall scale factor to fit 80 mm height\nscale_factor = 0.25;\n\n// Main bow (verga) - slightly curved wooden stick\nmodule bow() {\n    // Central straight part\n    cylinder(h = 70 * scale_factor, r1 = 2.5 * scale_factor, r2 = 2.5 * scale_factor, center = true);\n    \n    // Top curve - bent section\n    translate([0, 0, 35 * scale_factor])\n    rotate([0, 15, 0])\n    cylinder(h = 25 * scale_factor, r1 = 2.3 * scale_factor, r2 = 2.0 * scale_factor, center = true);\n    \n    // Bottom curve - opposite direction\n    translate([0, 0, -35 * scale_factor])\n    rotate([0, -15, 0])\n    cylinder(h = 25 * scale_factor, r1 = 2.0 * scale_factor, r2 = 2.3 * scale_factor, center = true);\n}\n\n// Wire (arame) - metal string\nmodule wire() {\n    color(\"silver\")\n    translate([2.5 * scale_factor, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 85 * scale_factor, r = 0.3 * scale_factor, center = true);\n}\n\n// Gourd resonator (cabaça)\nmodule gourd() {\n    color(\"sandybrown\")\n    // Main gourd body - hollow sphere with opening\n    difference() {\n        sphere(r = 12 * scale_factor);\n        translate([0, 0, 8 * scale_factor])\n        sphere(r = 11.5 * scale_factor);\n    }\n    \n    // Neck connection to bow\n    translate([0, 0, 12 * scale_factor])\n    cylinder(h = 8 * scale_factor, r1 = 4 * scale_factor, r2 = 2.5 * scale_factor);\n}\n\n// String holder at bottom (amarrador)\nmodule bottom_holder() {\n    color(\"brown\")\n    // Leather strap around bow\n    translate([0, 0, -42 * scale_factor])\n    rotate([90, 0, 0])\n    cylinder(h = 6 * scale_factor, r1 = 3.2 * scale_factor, r2 = 3.2 * scale_factor);\n    \n    // Small ring for wire attachment\n    translate([3.5 * scale_factor, 0, -42 * scale_factor])\n    rotate([90, 0, 0])\n    cylinder(h = 4 * scale_factor, r1 = 1 * scale_factor, r2 = 1 * scale_factor);\n}\n\n// Coin (dobrão) for pitch change\nmodule coin() {\n    color(\"gold\")\n    translate([4 * scale_factor, 0, 15 * scale_factor])\n    rotate([0, 90, 0])\n    cylinder(h = 0.8 * scale_factor, r = 3 * scale_factor);\n}\n\n// Beater (baqueta) - thin stick\nmodule beater() {\n    color(\"brown\")\n    translate([20 * scale_factor, 15 * scale_factor, 0])\n    rotate([0, 0, -30])\n    cylinder(h = 25 * scale_factor, r1 = 0.8 * scale_factor, r2 = 0.5 * scale_factor);\n}\n\n// Basket shaker (caxixi)\nmodule shaker() {\n    color(\"tan\")\n    translate([20 * scale_factor, 15 * scale_factor, -15 * scale_factor])\n    // Basket body\n    cylinder(h = 8 * scale_factor, r1 = 3 * scale_factor, r2 = 2 * scale_factor);\n    \n    // Seeds inside (simplified)\n    for(i = [1:3]) {\n        translate([20 * scale_factor + (i-2) * 0.5, 15 * scale_factor + (i-2) * 0.3, -15 - 2 * scale_factor])\n        sphere(r = 0.5 * scale_factor);\n    }\n}\n\n// Assemble the complete berimbau\nunion() {\n    bow();\n    wire();\n    \n    // Position gourd near top\n    translate([0, 10 * scale_factor, 25 * scale_factor])\n    rotate([15, 0, 0])\n    gourd();\n    \n    bottom_holder();\n    coin();\n    beater();\n    shaker();\n}",
    "renders": true
  },
  {
    "musical_instrument": "caixa",
    "openscad_code": "// Realistic 3D-printable Caixa (Brazilian snare drum)\n// Wall-thickness = 2 mm everywhere\n// Shell diameter 80 mm, height 50 mm\n// Snare wires on bottom, tuning lugs on sides\n\n$fa = 2;\n$fs = 1;\n\n// Overall scale factor\nscale_factor = 1;\n\n// Shell geometry module\nmodule shell()\n{\n    difference()\n    {\n        // Outer cylinder\n        cylinder(h = 50, d = 80, center = true);\n        \n        // Inner cavity (leave 2 mm wall)\n        translate([0, 0, 2])\n            cylinder(h = 46, d = 76, center = true);\n    }\n}\n\n// Drum head (top and bottom)\nmodule head(pos = 1)\n{\n    // pos = 1 for top, -1 for bottom\n    translate([0, 0, pos * 25])\n        difference()\n        {\n            // Thin membrane\n            cylinder(h = 0.8, d = 78, center = true);\n            // Hole for air vent\n            translate([30, 0, 0])\n                cylinder(h = 2, d = 4, center = true);\n        }\n}\n\n// Tension hoop\nmodule hoop(pos = 1)\n{\n    // pos = 1 for top, -1 for bottom\n    translate([0, 0, pos * 26.2])\n        difference()\n        {\n            // Outer ring\n            cylinder(h = 2.4, d = 82, center = true);\n            // Inner cut\n            cylinder(h = 2.6, d = 78.4, center = true);\n        }\n}\n\n// Single tuning lug\nmodule lug()\n{\n    // Base block on shell\n    translate([0, 40, 0])\n        rotate([90, 0, 0])\n            difference()\n            {\n                union()\n                {\n                    // Main block\n                    cube([10, 6, 12], center = true);\n                    // Rod holder\n                    translate([0, 0, 7])\n                        cylinder(h = 8, d = 6, center = true);\n                }\n                // Screw hole\n                translate([0, 0, 7])\n                    rotate([0, 90, 0])\n                        cylinder(h = 12, d = 3, center = true);\n            }\n}\n\n// All 6 lugs around shell\nmodule all_lugs()\n{\n    for(i = [0:5])\n        rotate([0, 0, i * 60])\n            lug();\n}\n\n// Snare wire set (bottom)\nmodule snare_wires()\n{\n    for(i = [-2:2])\n        translate([i * 6, 0, -25.5])\n            rotate([90, 0, 0])\n                cylinder(h = 60, d = 0.8, center = true);\n}\n\n// Snare butt plate\nmodule snare_butt()\n{\n    translate([0, -40, -23])\n        rotate([90, 0, 0])\n            difference()\n            {\n                cube([12, 4, 5], center = true);\n                translate([0, 0, 0])\n                    cylinder(h = 6, d = 2, center = true);\n            }\n}\n\n// Final assembly\nscale(scale_factor)\n{\n    // Main shell\n    shell();\n    \n    // Heads\n    head(1);\n    head(-1);\n    \n    // Hoops\n    hoop(1);\n    hoop(-1);\n    \n    // Hardware\n    all_lugs();\n    \n    // Snare assembly\n    snare_wires();\n    snare_butt();\n}",
    "renders": true
  },
  {
    "musical_instrument": "ganzá",
    "openscad_code": "// Ganzá - Brazilian shaker instrument\n// Medium complexity realistic style\n\n// Parameters\n$fn = 36;\nbody_d = 45;       // Main tube diameter\nbody_h = 90;       // Main tube height\nwall_t = 2.5;      // Wall thickness for 3D printing\ncap_h = 8;         // End cap height\nhandle_d = 12;     // Handle diameter\nhandle_l = 60;     // Handle length\nbead_d = 6;        // Internal bead diameter\nbead_count = 12;   // Number of beads inside\nbead_clearance = 5; // Space between beads and walls\n\n// Main body - hollow cylinder\nmodule ganzá_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(d=body_d, h=body_h, center=true);\n        \n        // Inner hollow space\n        translate([0, 0, -cap_h/2])\n            cylinder(d=body_d-2*wall_t, h=body_h-cap_h, center=true);\n    }\n}\n\n// End caps - slightly rounded\nmodule end_caps() {\n    // Top cap\n    translate([0, 0, body_h/2 - cap_h/2])\n        cylinder(d=body_d, h=cap_h, center=true);\n    \n    // Bottom cap\n    translate([0, 0, -body_h/2 + cap_h/2])\n        cylinder(d=body_d, h=cap_h, center=true);\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    union() {\n        // Main handle shaft\n        translate([0, 0, -body_h/2 - handle_l/2])\n            cylinder(d=handle_d, h=handle_l, center=true);\n        \n        // Grip rings for better hold\n        for(i = [0:3]) {\n            translate([0, 0, -body_h/2 - 10 - i*12])\n                cylinder(d=handle_d+3, h=3, center=true);\n        }\n        \n        // Transition from body to handle\n        translate([0, 0, -body_h/2])\n            cylinder(d1=body_d, d2=handle_d, h=8, center=false);\n    }\n}\n\n// Internal beads for sound\nmodule beads() {\n    // Randomly position beads inside\n    for(i = [0:bead_count-1]) {\n        rotate([i*360/bead_count, 0, 0])\n            translate([\n                (body_d/2 - wall_t - bead_clearance - bead_d/2) * sin(i*137.5),\n                0,\n                (body_h/2 - cap_h - bead_clearance - bead_d/2) * cos(i*137.5)\n            ])\n            sphere(d=bead_d);\n    }\n}\n\n// Surface texture rings for grip on body\nmodule body_texture() {\n    for(i = [1:5]) {\n        translate([0, 0, -body_h/2 + 15 + i*12])\n            difference() {\n                cylinder(d=body_d+1, h=2, center=true);\n                cylinder(d=body_d-1, h=3, center=true);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    ganzá_body();\n    end_caps();\n    handle();\n    \n    // Surface details\n    body_texture();\n    \n    // Internal beads (will be printed separately and inserted)\n    // Uncomment to visualize beads\n    // %beads();\n}",
    "renders": true
  },
  {
    "musical_instrument": "chocalho",
    "openscad_code": "// Realistic Chocalho (Brazilian shaker) - medium complexity\n// All dimensions in mm\n\n// Parameters\nbar_length = 70;\nbar_diameter = 8;\njingle_diameter = 22;\njingle_thickness = 1.5;\njingle_count = 5;\njingle_spacing = 12;\nhandle_length = 120;\nhandle_diameter = 15;\nwall_thickness = 2;\n\n// Main module\nmodule chocalho() {\n    // Handle\n    union() {\n        // Main handle tube\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Handle grip rings\n        for(i=[1:3]) {\n            translate([0, 0, i*handle_length/4])\n            cylinder(h=5, d1=handle_diameter+2, d2=handle_diameter+2, $fn=32);\n        }\n        \n        // Handle end cap\n        translate([0, 0, handle_length])\n        cylinder(h=5, d1=handle_diameter, d2=handle_diameter+3, $fn=32);\n    }\n    \n    // Metal bar with jingles\n    translate([0, 0, handle_length-20])\n    rotate([90, 0, 0])\n    union() {\n        // Main bar\n        cylinder(h=bar_length, d=bar_diameter, $fn=16);\n        \n        // End caps\n        translate([0, 0, 0])\n        sphere(d=bar_diameter, $fn=16);\n        translate([0, 0, bar_length])\n        sphere(d=bar_diameter, $fn=16);\n        \n        // Jingles\n        for(i=[0:jingle_count-1]) {\n            translate([0, 0, i*jingle_spacing + jingle_spacing])\n            rotate([0, 0, 45])\n            jingle();\n        }\n    }\n}\n\n// Jingle module (single tambourine jingle)\nmodule jingle() {\n    difference() {\n        // Main disc\n        cylinder(h=jingle_thickness, d=jingle_diameter, $fn=32);\n        \n        // Slot for bar\n        translate([0, 0, -1])\n        cylinder(h=jingle_thickness+2, d=bar_diameter+1, $fn=16);\n        \n        // Sound holes\n        for(a=[0:120:360]) {\n            rotate([0, 0, a])\n            translate([jingle_diameter/2-3, 0, -1])\n            cylinder(h=jingle_thickness+2, d=2, $fn=8);\n        }\n    }\n}\n\n// 3D printing support\nmodule supports() {\n    // Small support under bar connection\n    translate([0, 0, handle_length-25])\n    rotate([45, 0, 0])\n    cube([10, 5, 15], center=true);\n}\n\n// Main assembly\nunion() {\n    chocalho();\n    supports();\n}",
    "renders": true
  },
  {
    "musical_instrument": "reco",
    "openscad_code": "// Realistic-style Reco (Remote Control Unit)\n// Medium complexity, 3D-printable, ~75 mm long\n\n// Overall dimensions\nlength = 75;\nwidth = 35;\nthickness = 12;\n\n// Wall thickness for printability\nwall = 1.5;\n\nmodule body() {\n    difference() {\n        // Main shell\n        translate([0, 0, thickness/2])\n            cube([length, width, thickness], center=true);\n\n        // Hollow cavity\n        translate([0, 0, thickness/2])\n            cube([length-wall*2, width-wall*2, thickness-wall], center=true);\n\n        // Battery slot (bottom)\n        translate([length/2-20, 0, 0])\n            cube([20, 20, wall], center=true);\n\n        // IR window (front)\n        translate([length/2+wall/2, 0, thickness/2])\n            cube([wall, 14, 6], center=true);\n    }\n}\n\nmodule button_row(y_offset, count, label) {\n    for (i = [0:count-1]) {\n        translate([-length/2+15 + i*8, y_offset, thickness-wall/2])\n            cylinder(h=2, d=6, $fn=20);\n    }\n}\n\nmodule direction_pad() {\n    // Outer ring\n    difference() {\n        translate([0, 0, thickness-wall/2])\n            cylinder(h=2, d=18, $fn=32);\n        translate([0, 0, thickness-wall/2-0.1])\n            cylinder(h=2.2, d=14, $fn=32);\n    }\n\n    // Cross pad\n    union() {\n        translate([0, 0, thickness-wall/2])\n            cube([12, 4, 2], center=true);\n        translate([0, 0, thickness-wall/2])\n            cube([4, 12, 2], center=true);\n    }\n\n    // Center button\n    translate([0, 0, thickness-wall/2+1])\n        sphere(d=4, $fn=16);\n}\n\nmodule key_label(x, y, w, h, depth) {\n    translate([x, y, thickness-wall/2-depth/2])\n        cube([w, h, depth], center=true);\n}\n\nmodule labels() {\n    // Volume labels\n    key_label(-length/2+15, 8, 2, 4, 0.5);\n    key_label(-length/2+25, 8, 2, 4, 0.5);\n\n    // Channel labels\n    key_label(-length/2+15, -8, 2, 4, 0.5);\n    key_label(-length/2+25, -8, 2, 4, 0.5);\n\n    // Power label\n    key_label(-length/2+35, 0, 6, 4, 0.5);\n}\n\nmodule grip_texture() {\n    difference() {\n        translate([0, 0, 0])\n            cube([length, width, thickness], center=true);\n        for (i = [-3:3])\n            for (j = [-2:2]) {\n                translate([i*10, j*10, thickness/2-wall/2])\n                    sphere(d=3, $fn=8);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    translate([0, 0, 0]) grip_texture();\n    translate([0, 12, 0]) direction_pad();\n    button_row(8, 2, \"VOL\");\n    button_row(-8, 2, \"CH\");\n    translate([-length/2+35, 0, thickness-wall/2])\n        cylinder(h=2, d=6, $fn=20);\n    labels();\n}",
    "renders": true
  },
  {
    "musical_instrument": "shekere",
    "openscad_code": "// Realistic 3D-printable Shekere (medium complexity)\n// Overall height ~85 mm, built hollow with 1.5 mm walls\n\n// Parameters\n$fn = 48;\nwall = 1.5;          // wall thickness for 3D printing\nh_body = 70;         // height of main gourd\nr_top = 25;          // radius of top opening\nr_mid = 35;          // max radius of gourd\nr_bottom = 20;       // radius of bottom\nh_neck = 15;         // neck length\nr_neck = 18;         // neck outer radius at top\nr_hole = 14;         // actual playable opening\nbead_r = 3;          // radius of beads\nbead_rows = 8;       // vertical rows of beads\nbeads_per_row = 7;   // beads in each vertical row\nnet_thick = 1;       // thickness of the net cord\n\n// Main gourd body (hollow)\nmodule gourd_shell() {\n    difference() {\n        // Outer shape\n        hull() {\n            translate([0, 0, h_neck/2]) cylinder(h_neck, r_neck, r_neck, center=true);\n            translate([0, 0, h_neck]) cylinder(h_body*0.3, r_neck, r_mid);\n            translate([0, 0, h_neck + h_body*0.5]) cylinder(h_body*0.4, r_mid, r_mid);\n            translate([0, 0, h_neck + h_body]) cylinder(h_body*0.3, r_mid, r_bottom);\n        }\n        \n        // Inner hollow (offset inwards by wall)\n        hull() {\n            translate([0, 0, h_neck/2]) cylinder(h_neck-wall, r_neck-wall, r_neck-wall, center=true);\n            translate([0, 0, h_neck]) cylinder(h_body*0.3-wall, r_neck-wall, r_mid-wall);\n            translate([0, 0, h_neck + h_body*0.5]) cylinder(h_body*0.4-wall, r_mid-wall, r_mid-wall);\n            translate([0, 0, h_neck + h_body]) cylinder(h_body*0.3-wall, r_mid-wall, r_bottom-wall);\n        }\n        \n        // Top playing hole\n        translate([0, 0, h_neck + h_body + 1])\n            cylinder(h_neck + 2, r_hole, r_hole);\n    }\n}\n\n// Vertical net cord\nmodule vertical_cord(start_h, end_h) {\n    linear_extrude(height = end_h - start_h, center = false, scale = [1,1])\n        translate([0, r_mid - net_thick/2, 0])\n            square([net_thick, net_thick], center = true);\n}\n\n// Horizontal net ring\nmodule horizontal_ring(h) {\n    radius = r_mid - net_thick/2;\n    difference() {\n        cylinder(h = net_thick, r1 = radius + net_thick/2, r2 = radius + net_thick/2, center = true);\n        cylinder(h = net_thick + 0.1, r1 = radius - net_thick/2, r2 = radius - net_thick/2, center = true);\n    }\n}\n\n// Bead on cord\nmodule bead(pos) {\n    translate([pos.x, pos.y, pos.z])\n        sphere(r = bead_r);\n}\n\n// Build the bead net\nmodule bead_net() {\n    union() {\n        // Vertical cords\n        for (i = [0 : bead_rows - 1]) {\n            rotate([0, 0, i * 360 / bead_rows])\n                vertical_cord(h_neck, h_neck + h_body);\n        }\n        \n        // Horizontal rings\n        for (j = [1 : beads_per_row]) {\n            h = h_neck + j * (h_body / (beads_per_row + 1));\n            translate([0, 0, h])\n                rotate([90, 0, 0])\n                    horizontal_ring(0);\n        }\n        \n        // Beads at intersections\n        for (i = [0 : bead_rows - 1]) {\n            angle = i * 360 / bead_rows;\n            for (j = [1 : beads_per_row]) {\n                h = h_neck + j * (h_body / (beads_per_row + 1));\n                radius = r_mid - net_thick/2;\n                x = radius * cos(angle);\n                y = radius * sin(angle);\n                bead([x, y, h]);\n            }\n        }\n    }\n}\n\n// Assembly\ngourd_shell();\nbead_net();",
    "renders": true
  },
  {
    "musical_instrument": "cabasa",
    "openscad_code": "// Realistic 3D-printable cabasa – medium complexity\n// Approx. 75 mm tall overall\n\n// -------------- PARAMETERS --------------\n$fn = 50;               // cylinder resolution\nshell_thk = 1.6;        // printable wall thickness\nmetal_thk = 1;          // bead chain thickness\ngourd_d = 36;           // main gourd diameter\ngourd_h = 50;           // gourd height\nneck_d = 18;            // neck diameter\nneck_h = 25;            // neck height\nhandle_d = 12;          // handle diameter\nhandle_h = 60;          // handle length\nbead_d = 5;             // individual metal bead\nbead_chain_len = 38;    // length of each bead chain\nchains = 18;            // number of bead chains\nchain_pitch = 22;       // pitch circle diameter for chains\ngap = 0.4;              // printing clearance between parts\n\n// -------------- MAIN ASSEMBLY --------------\nmodule cabasa() {\n    union() {\n        handle();\n        translate([0, 0, handle_h]) neck();\n        translate([0, 0, handle_h + neck_h]) gourd();\n        translate([0, 0, handle_h + neck_h]) bead_chains();\n    }\n}\n\n// -------------- HANDLE --------------\nmodule handle() {\n    difference() {\n        cylinder(d = handle_d, h = handle_h);                 // solid handle\n        translate([0, 0, -gap])                                // hollow interior\n            cylinder(d = handle_d - 2*shell_thk, h = handle_h + 2*gap);\n    }\n}\n\n// -------------- NECK --------------\nmodule neck() {\n    difference() {\n        cylinder(d = neck_d, h = neck_h);                     // solid neck\n        translate([0, 0, -gap])                                // hollow interior\n            cylinder(d = neck_d - 2*shell_thk, h = neck_h + 2*gap);\n    }\n}\n\n// -------------- GOURD --------------\nmodule gourd() {\n    // outer shell (ellipsoid)\n    difference() {\n        scale([1, 1, gourd_h/gourd_d])\n            sphere(d = gourd_d);\n        // hollow interior\n        scale([1, 1, gourd_h/gourd_d])\n            sphere(d = gourd_d - 2*shell_thk);\n        // flat bottom\n        translate([0, 0, -gourd_h/2 - gap])\n            cube([gourd_d*2, gourd_d*2, gourd_h], center = true);\n    }\n}\n\n// -------------- BEAD CHAINS --------------\nmodule bead_chains() {\n    for (i = [0 : chains - 1]) {\n        rotate([0, 0, i * 360/chains])\n            translate([chain_pitch/2, 0, 0])\n                bead_chain();\n    }\n}\n\nmodule bead_chain() {\n    // create one flexible strand with discrete beads\n    n = floor(bead_chain_len / (bead_d + metal_thk));\n    step = bead_chain_len / n;\n    for (j = [0 : n]) {\n        translate([0, 0, -j * step])\n            sphere(d = bead_d);\n    }\n}\n\n// -------------- RENDER --------------\ncabasa();",
    "renders": true
  },
  {
    "musical_instrument": "guiro",
    "openscad_code": "// Realistic Guiro - Medium complexity\n// Length: 90mm, Width: 35mm, Height: 25mm\n\n// Parameters\nlength = 90;\nwidth = 35;\nheight = 25;\nwall = 2.5;\nhandle_length = 25;\nhandle_diameter = 10;\nridge_width = 1.5;\nridge_height = 1;\nridge_spacing = 3;\nnum_ridges = 12;\n\n// Main body - hollowed gourd shape\nmodule guiro_body() {\n    difference() {\n        // Outer gourd shape - ellipsoid\n        scale([1, 0.7, 0.6])\n        sphere(d = width);\n        \n        // Translate to create elongated shape\n        translate([-(length/2 - width/2), 0, 0])\n        scale([1, 0.7, 0.6])\n        sphere(d = width);\n        \n        translate([(length/2 - width/2), 0, 0])\n        scale([1, 0.7, 0.6])\n        sphere(d = width);\n        \n        // Hollow interior\n        translate([0, 0, -wall])\n        scale([1, 0.7, 0.6])\n        sphere(d = width - wall*2);\n        \n        translate([-(length/2 - width/2), 0, -wall])\n        scale([1, 0.7, 0.6])\n        sphere(d = width - wall*2);\n        \n        translate([(length/2 - width/2), 0, -wall])\n        scale([1, 0.7, 0.6])\n        sphere(d = width - wall*2);\n        \n        // Create flat bottom for stability\n        translate([-length/2, -width/2, -height/2])\n        cube([length, width, wall]);\n    }\n}\n\n// Ridges for scraping surface\nmodule ridges() {\n    for(i = [0:num_ridges-1]) {\n        translate([\n            -length/2 + 15 + i * ridge_spacing,\n            -width/2 - 0.1,\n            -height/2 + wall\n        ]) {\n            // Ridge cross-section - trapezoidal\n            linear_extrude(height = ridge_height) {\n                polygon(points=[\n                    [0, 0],\n                    [ridge_width, 0],\n                    [ridge_width - 0.3, ridge_height],\n                    [0.3, ridge_height]\n                ]);\n            }\n        }\n    }\n}\n\n// Handle - cylindrical\nmodule handle() {\n    translate([(length/2 - handle_length/2), 0, 0]) {\n        // Main handle\n        rotate([0, 90, 0])\n        cylinder(h = handle_length, d = handle_diameter, $fn = 32);\n        \n        // Grip rings\n        for(i = [0:3]) {\n            translate([0, 0, -handle_length/2 + 5 + i * 5])\n            rotate([0, 90, 0])\n            cylinder(h = 1, d = handle_diameter + 2, $fn = 32);\n        }\n    }\n}\n\n// Sound holes\nmodule sound_holes() {\n    // Front holes\n    for(i = [0:2]) {\n        translate([\n            -length/2 + 20 + i * 15,\n            0,\n            height/4\n        ]) {\n            rotate([90, 0, 0])\n            cylinder(h = wall + 1, d = 5, $fn = 16);\n        }\n    }\n    \n    // Back holes\n    for(i = [0:2]) {\n        translate([\n            -length/2 + 20 + i * 15,\n            0,\n            -height/4\n        ]) {\n            rotate([90, 0, 0])\n            cylinder(h = wall + 1, d = 5, $fn = 16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    guiro_body();\n    \n    // Ridges on top\n    ridges();\n    \n    // Handle\n    handle();\n    \n    // Sound holes (subtract from body)\n    difference() {\n        children();\n        sound_holes();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "clave",
    "openscad_code": "// Clave - traditional percussion instrument (medium complexity, realistic)\n// Overall length: 80 mm, diameter: 18 mm\n// Designed for 3D printing with safe overhangs\n\n// Utility module to round edges\nmodule round_edge(r, h, axis = \"z\") {\n    // Create a quarter-cylinder to act as fillet\n    if (axis == \"z\") {\n        rotate([0, 0, 0]) cylinder(h = h, r = r, $fn = 16);\n    } else if (axis == \"y\") {\n        rotate([0, 90, 0]) cylinder(h = h, r = r, $fn = 16);\n    } else if (axis == \"x\") {\n        rotate([90, 0, 0]) cylinder(h = h, r = r, $fn = 16);\n    }\n}\n\n// Main clave body with rounded ends\nmodule clave_body() {\n    // Main cylindrical shaft\n    cylinder(h = 80, r = 9, $fn = 32);\n    \n    // Rounded ends using spheres\n    translate([0, 0, 40]) sphere(r = 9, $fn = 32);\n    translate([0, 0, -40]) sphere(r = 9, $fn = 32);\n}\n\n// Groove detail for grip and wood grain effect\nmodule grip_grooves() {\n    difference() {\n        // Copy of main body\n        clave_body();\n        \n        // Create shallow grooves along length\n        for (i = [1:2:15]) {\n            rotate([0, 0, i * 20])\n            translate([0, 9.1, 0])\n            cube([1.5, 0.2, 78], center = true);\n        }\n    }\n}\n\n// Wood grain texture using small cylinders\nmodule wood_grain() {\n    union() {\n        // Longitudinal grain lines\n        for (z = [-35:5:35]) {\n            for (theta = [0:30:150]) {\n                rotate([0, 0, theta])\n                translate([6, 0, z])\n                scale([1, 0.2, 1])\n                cylinder(h = 0.3, r = 0.3, $fn = 8);\n            }\n        }\n        \n        // Transverse rings (subtle)\n        for (z = [-30:10:30]) {\n            translate([0, 0, z])\n            scale([1, 1, 0.1])\n            cylinder(h = 0.5, r = 8.8, $fn = 32);\n        }\n    }\n}\n\n// End cap detail (slightly different color idea)\nmodule end_cap() {\n    // Slight flare at ends for realism\n    difference() {\n        // Flared portion\n        translate([0, 0, 40])\n        cylinder(h = 3, r1 = 9.5, r2 = 10, $fn = 32);\n        \n        // Hollow center to maintain wall thickness\n        translate([0, 0, 38])\n        cylinder(h = 5, r = 7.5, $fn = 32);\n    }\n    \n    mirror([0, 0, 1]) translate([0, 0, 40])\n    cylinder(h = 3, r1 = 9.5, r2 = 10, $fn = 32);\n}\n\n// Full clave assembly\nmodule clave() {\n    difference() {\n        union() {\n            // Main body\n            grip_grooves();\n            \n            // End caps\n            end_cap();\n            \n            // Wood grain texture\n            wood_grain();\n        }\n        \n        // Central hollow for printability and weight\n        cylinder(h = 82, r = 6, $fn = 32);\n    }\n}\n\n// Render the clave\ntranslate([0, 0, 0]) clave();",
    "renders": true
  },
  {
    "musical_instrument": "marimba",
    "openscad_code": "// Marimba - realistic style, medium complexity\n// Designed for 3D printing - no overhangs, proper wall thickness\n\n// Overall dimensions\nmarimba_length = 80;\nmarimba_width = 40;\nbar_thickness = 3;\nbar_width = 8;\n\n// Resonator tube parameters\ntube_diameter = 5;\ntube_wall = 1;\ntube_height = 15;\n\n// Frame parameters\nframe_thickness = 2;\nleg_height = 20;\nleg_width = 3;\n\n// Bar spacing\nnum_bars = 12;\nbar_spacing = marimba_length / (num_bars + 1);\n\n// Marimba bars module\nmodule bar(length, width, thickness) {\n    difference() {\n        // Main bar shape\n        translate([0, 0, thickness/2])\n            cube([length, width, thickness], center=true);\n        \n        // Taper the ends slightly for realistic shape\n        translate([length/2 - 1, 0, thickness/2])\n            rotate([0, 90, 0])\n                cylinder(h=2, r1=width/2, r2=width/2 - 1, center=true);\n        translate([-length/2 + 1, 0, thickness/2])\n            rotate([0, 90, 0])\n                cylinder(h=2, r1=width/2, r2=width/2 - 1, center=true);\n        \n        // Sound hole\n        translate([0, 0, -0.1])\n            cylinder(h=thickness + 0.2, r=1.5, center=true);\n    }\n}\n\n// Resonator tube module\nmodule resonator(height, diameter) {\n    difference() {\n        // Outer tube\n        cylinder(h=height, r=diameter/2, center=false);\n        \n        // Inner tube (hollow)\n        translate([0, 0, tube_wall])\n            cylinder(h=height - 2*tube_wall, r=diameter/2 - tube_wall, center=false);\n    }\n}\n\n// Frame leg module\nmodule leg(height, width) {\n    difference() {\n        // Main leg\n        cube([width, width, height]);\n        \n        // Chamfer bottom edges for stability\n        translate([width, 0, 0])\n            rotate([0, 0, -45])\n                cube([width*sqrt(2), width, height]);\n        translate([0, width, 0])\n            rotate([0, 0, -45])\n                cube([width, width*sqrt(2), height]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Bars\n    for(i = [0:num_bars-1]) {\n        bar_length = 25 - i*1.5; // Gradually shorter bars\n        translate([-marimba_length/2 + (i+1)*bar_spacing, 0, tube_height + bar_thickness]) {\n            bar(bar_length, bar_width, bar_thickness);\n        }\n    }\n    \n    // Resonator tubes\n    for(i = [0:num_bars-1]) {\n        bar_length = 25 - i*1.5;\n        tube_length = tube_height - 2; // Slightly shorter than frame\n        translate([-marimba_length/2 + (i+1)*bar_spacing, 0, 0]) {\n            resonator(tube_length, tube_diameter);\n        }\n    }\n    \n    // Frame - front and back rails\n    translate([0, marimba_width/2 - frame_thickness/2, tube_height/2])\n        cube([marimba_length + 10, frame_thickness, tube_height], center=true);\n    translate([0, -marimba_width/2 + frame_thickness/2, tube_height/2])\n        cube([marimba_length + 10, frame_thickness, tube_height], center=true);\n    \n    // Frame - side rails\n    translate([marimba_length/2 + 5, 0, tube_height/2])\n        cube([frame_thickness, marimba_width, tube_height], center=true);\n    translate([-marimba_length/2 - 5, 0, tube_height/2])\n        cube([frame_thickness, marimba_width, tube_height], center=true);\n    \n    // Legs - 4 corners\n    translate([-marimba_length/2 - 3, -marimba_width/2 + 3, 0])\n        leg(leg_height, leg_width);\n    translate([marimba_length/2 + 3, -marimba_width/2 + 3, 0])\n        leg(leg_height, leg_width);\n    translate([-marimba_length/2 - 3, marimba_width/2 - 3, 0])\n        leg(leg_height, leg_width);\n    translate([marimba_length/2 + 3, marimba_width/2 - 3, 0])\n        leg(leg_height, leg_width);\n}",
    "renders": true
  },
  {
    "musical_instrument": "vibraphone",
    "openscad_code": "// Vibraphone Model - Realistic Style, Medium Complexity\n// ~80mm wide, designed for 3D printing\n\n// Parameters\n$fn = 32;\nbar_width = 5;\nbar_thickness = 3;\nbase_height = 8;\nframe_thickness = 2;\nleg_diameter = 4;\npedal_width = 12;\npedal_length = 20;\n\n// Main module\nmodule vibraphone() {\n    frame();\n    bars();\n    resonators();\n    pedal_assembly();\n}\n\n// Frame structure\nmodule frame() {\n    color(\"silver\")\n    union() {\n        // Long side rails\n        for(side = [-1, 1]) {\n            translate([0, side*35, base_height/2])\n                cube([80, frame_thickness, base_height], center=true);\n        }\n        \n        // Short end rails\n        for(end = [-1, 1]) {\n            translate([end*38, 0, base_height/2])\n                cube([frame_thickness, 70, base_height], center=true);\n        }\n        \n        // Legs\n        for(x = [-30, 30])\n            for(y = [-25, 25]) {\n                translate([x, y, base_height/2 + 15])\n                    cylinder(h=30, d=leg_diameter);\n            }\n    }\n}\n\n// Tone bars\nmodule bars() {\n    // White keys (natural notes)\n    for(i = [0:7]) {\n        length = 35 - i*2.5;\n        translate([-30 + i*9, 0, base_height + 10])\n            rotate([0, 0, 5])\n            color(\"beige\")\n            cube([length, bar_width, bar_thickness], center=true);\n    }\n    \n    // Black keys (accidentals)\n    for(i = [0:4]) {\n        length = 25 - i*1.5;\n        translate([-25 + i*11, 12, base_height + 11])\n            rotate([0, 0, 5])\n            color(\"black\")\n            cube([length, bar_width*0.8, bar_thickness*0.8], center=true);\n    }\n}\n\n// Resonator tubes\nmodule resonators() {\n    for(i = [0:7]) {\n        height = 25 - i*1.5;\n        translate([-30 + i*9, -15, base_height + height/2])\n            color(\"gold\")\n            cylinder(h=height, d=bar_width*1.2);\n    }\n}\n\n// Pedal assembly\nmodule pedal_assembly() {\n    translate([0, 30, base_height + 2])\n    union() {\n        // Pedal base\n        color(\"darkgray\")\n        cube([pedal_width, pedal_length, 4], center=true);\n        \n        // Pedal bar\n        translate([0, 8, 2])\n            rotate([0, 20, 0])\n            color(\"silver\")\n            cube([5, 30, 2], center=true);\n        \n        // Damper rod\n        translate([0, 8, 15])\n            cylinder(h=20, d=2);\n    }\n}\n\n// Render the model\nvibraphone();",
    "renders": true
  },
  {
    "musical_instrument": "metallophone",
    "openscad_code": "// Metallophone - Realistic style, medium complexity\n// Designed for 3D printing, ~80mm width\n\n$fn = 32;\n\n// Main parameters\nbar_width = 80;\nbar_height = 5;\nbar_depth = 10;\nresonator_diameter = 6;\nresonator_length = 35;\nsupport_height = 15;\nsupport_thickness = 3;\n\n// Bar module with proper mounting holes\nmodule metallophone_bar(length, note) {\n    // Main bar body with rounded edges\n    difference() {\n        // Tapered bar shape\n        hull() {\n            translate([0, -bar_depth/2, 0])\n                cube([length, bar_depth, bar_height], center = true);\n            translate([0, -bar_depth/2 + 1, 0])\n                scale([0.8, 1, 1])\n                cube([length - 2, bar_depth - 2, bar_height], center = true);\n        }\n        \n        // Mounting holes - positioned at 1/4 and 3/4 length for best resonance\n        hole_pos = length * 0.22;\n        for(x = [-hole_pos, hole_pos]) {\n            translate([x, 0, -bar_height/2])\n                cylinder(h = bar_height + 1, d = 2, center = true);\n        }\n        \n        // Note markings - shallow engraving\n        translate([0, bar_depth/2 + 0.1, -bar_height/2 + 0.5])\n            linear_extrude(0.3) {\n                text(str(note), size = 3, halign = \"center\", valign = \"center\");\n            }\n    }\n}\n\n// Support rail with mounting pegs\nmodule support_rail(length) {\n    difference() {\n        // Main rail body\n        translate([0, 0, support_height/2])\n            cube([length, support_thickness, support_height], center = true);\n        \n        // Mounting peg holes\n        for(i = [0:7]) {\n            x_pos = (i - 3.5) * 10;\n            translate([x_pos, 0, support_height - 1])\n                cylinder(h = 3, d = 1.8);\n        }\n    }\n    \n    // Base feet for stability\n    foot_width = 5;\n    for(x = [-length/2 + 5, length/2 - 5]) {\n        translate([x, 0, 0])\n            cube([foot_width, support_thickness + 2, 3], center = true);\n    }\n}\n\n// Resonator tube\nmodule resonator() {\n    difference() {\n        cylinder(h = resonator_length, d = resonator_diameter);\n        translate([0, 0, -1])\n            cylinder(h = resonator_length + 2, d = resonator_diameter - 1);\n    }\n}\n\n// Complete metallophone assembly\nmodule metallophone() {\n    // Support rails\n    translate([0, -15, 0])\n        support_rail(bar_width + 10);\n    translate([0, 15, 0])\n        support_rail(bar_width + 10);\n    \n    // Bars - C major scale\n    notes = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\", \"C\"];\n    lengths = [20, 19, 18, 17.5, 16.5, 15.5, 14.5, 13.5];\n    \n    for(i = [0:7]) {\n        x_pos = (i - 3.5) * 10;\n        translate([x_pos, 0, support_height + bar_height/2 + 2])\n            metallophone_bar(lengths[i], notes[i]);\n    }\n    \n    // Resonator tubes below\n    for(i = [0:7]) {\n        x_pos = (i - 3.5) * 10;\n        translate([x_pos, 0, support_height - resonator_length/2])\n            resonator();\n    }\n    \n    // Mallet holders\n    translate([bar_width/2 + 10, -5, support_height/2])\n        cube([3, 3, support_height], center = true);\n    translate([bar_width/2 + 10, 5, support_height/2])\n        cube([3, 3, support_height], center = true);\n}\n\n// Render the complete model\nmetallophone();",
    "renders": true
  },
  {
    "musical_instrument": "glockenspiel",
    "openscad_code": "// Glockenspiel in realistic style, medium complexity\n// Overall dimensions: ~90x60x20mm, 3D-printable\n\n// Global parameters\n$fn = 32;\n\n// Dimensions\nbase_w = 85;\nbase_d = 55;\nbase_h = 6;\n\nbar_start_x = 8;\nbar_thick = 3.5;\nbar_gap = 3.5;\nbar_y = 0;\nbar_z = base_h + 1.2;\n\n// Bar lengths (approximate musical order C5-E6)\nbar_lengths = [48, 45, 42, 40, 37.8, 35.6, 33.6, 31.7, 29.9, 28.2];\nbar_widths  = [8.5, 8.3, 8.1, 7.9, 7.7, 7.5, 7.3, 7.1, 6.9, 6.7];\n\n// Mallet dimensions\nmallet_len = 75;\nmallet_d = 5;\nball_d = 8;\n\n// Helper: rounded rectangle\nmodule rounded_rect(w, d, h, r = 1.2) {\n    difference() {\n        cube([w, d, h], center = true);\n        translate([ w/2-r,  d/2-r,  -h/2-1]) cylinder(r = r, h = h+2);\n        translate([ w/2-r, -d/2+r,  -h/2-1]) cylinder(r = r, h = h+2);\n        translate([-w/2+r,  d/2-r,  -h/2-1]) cylinder(r = r, h = h+2);\n        translate([-w/2+r, -d/2+r,  -h/2-1]) cylinder(r = r, h = h+2);\n    }\n}\n\n// Base with slight curvature\nmodule base() {\n    difference() {\n        rounded_rect(base_w, base_d, base_h);\n        for (i = [0:9]) {\n            translate([bar_start_x + i*(bar_widths[i]+bar_gap) + bar_widths[i]/2,\n                       bar_y, base_h/2-0.5])\n                cube([bar_widths[i]+0.4, 6, 2], center = true);\n        }\n    }\n}\n\n// Single metal bar\nmodule bar(len, wid, thick, idx) {\n    color([0.75,0.75,0.78])\n    translate([bar_start_x + idx*(wid+bar_gap) + wid/2, bar_y, bar_z])\n        rounded_rect(len, wid, thick, 0.6);\n}\n\n// Support legs under base (printable without supports)\nmodule leg() {\n    color([0.2,0.2,0.2])\n    translate([base_w/2-5, 0, -4])\n        rotate([90,0,0])\n            cylinder(h = 4, r1 = 4, r2 = 2);\n}\n\n// Mallet\nmodule mallet() {\n    translate([base_w/2 + 10, base_d/2 + 10, 0]) {\n        color(\"BurlyWood\")\n            rotate([90,0,0])\n                cylinder(h = mallet_len, d = mallet_d);\n        color(\"FireBrick\")\n            translate([0,0,mallet_len])\n                sphere(d = ball_d);\n    }\n}\n\n// Assembly\nunion() {\n    // Base and legs\n    base();\n    leg();\n    mirror([1,0,0]) leg();\n\n    // Bars\n    for (i = [0:9]) {\n        bar(bar_lengths[i], bar_widths[i], bar_thick, i);\n    }\n\n    // Mallet resting place\n    mallet();\n}",
    "renders": true
  },
  {
    "musical_instrument": "crotales",
    "openscad_code": "// Crotales - Realistic Medium Complexity\n// Individual bronze plate with mounting hole\n\n// Overall dimensions\nplate_diameter = 80;\nplate_thickness = 3;\ncenter_hole_diameter = 6;\nedge_thickness = 1.5;\n\n// Struck area dome\ndome_height = 2;\ndome_radius = 25;\n\n// Mounting boss\nboss_height = 6;\nboss_diameter = 12;\n\n// Taper parameters\ntaper_angle = 15;  // degrees\n\nmodule crotales_plate() {\n    difference() {\n        // Main plate body with tapered edge\n        // Create a slightly domed upper surface\n        union() {\n            // Central disc\n            cylinder(h = plate_thickness, r = plate_diameter/2, $fn = 128);\n            \n            // Raised dome in center for striking area\n            translate([0, 0, plate_thickness])\n                scale([1, 1, dome_height/dome_radius])\n                sphere(r = dome_radius, $fn = 64);\n        }\n        \n        // Taper the edge by subtracting an inverted cone\n        translate([0, 0, -0.1])\n            cylinder(h = plate_thickness + 0.2, \n                     r1 = plate_diameter/2 - edge_thickness, \n                     r2 = plate_diameter/2, \n                     $fn = 128);\n        \n        // Central mounting hole\n        translate([0, 0, -0.1])\n            cylinder(h = plate_thickness + boss_height + 0.2, \n                     r = center_hole_diameter/2, \n                     $fn = 32);\n        \n        // Optional small sound grooves\n        for(i = [1:5]) {\n            rotate([0, 0, i * 72])\n                translate([plate_diameter/2 - 5, 0, plate_thickness/2])\n                    rotate([90, 0, 0])\n                        cylinder(h = 10, r = 0.5, $fn = 16);\n        }\n    }\n    \n    // Mounting boss on bottom\n    translate([0, 0, -boss_height])\n        difference() {\n            cylinder(h = boss_height, r = boss_diameter/2, $fn = 32);\n            cylinder(h = boss_height + 0.1, r = center_hole_diameter/2, $fn = 32);\n        }\n}\n\n// Generate the crotales plate\ncrotales_plate();",
    "renders": true
  },
  {
    "musical_instrument": "tubular",
    "openscad_code": "// Realistic tubular (trumpet) with medium complexity\n// Features: mouthpiece, leadpipe, valves, tuning slide, bell\n\n$fn = 50; // Smooth curves\n\n// Overall scale\nscale_factor = 1.5;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule tube(od, length, wall_thickness = wall) {\n    difference() {\n        cylinder(h = length, d = od, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = length + 0.2, d = od - 2*wall_thickness, center = false);\n    }\n}\n\n// Mouthpiece\nmodule mouthpiece() {\n    union() {\n        // Cup\n        translate([0, 0, -2*scale_factor])\n            cylinder(h = 4*scale_factor, d1 = 8*scale_factor, d2 = 4*scale_factor);\n        \n        // Shank\n        translate([0, 0, -10*scale_factor])\n            cylinder(h = 8*scale_factor, d = 4*scale_factor);\n    }\n}\n\n// Leadpipe\nmodule leadpipe() {\n    color(\"gold\")\n    union() {\n        // Straight section\n        tube(6*scale_factor, 25*scale_factor);\n        \n        // First bend\n        translate([0, 0, 25*scale_factor])\n            rotate([0, 90, 0])\n            tube(6*scale_factor, 15*scale_factor);\n    }\n}\n\n// Valve casing\nmodule valve_casing() {\n    for(i = [0, 1, 2]) {\n        translate([0, 0, i * 12*scale_factor])\n            tube(10*scale_factor, 10*scale_factor);\n    }\n}\n\n// Valve button\nmodule valve_button() {\n    union() {\n        cylinder(h = 2*scale_factor, d = 6*scale_factor);\n        translate([0, 0, 2*scale_factor])\n            cylinder(h = 3*scale_factor, d = 4*scale_factor);\n    }\n}\n\n// Main tuning slide\nmodule tuning_slide() {\n    color(\"gold\")\n    translate([20*scale_factor, 0, 0])\n    union() {\n        // Slide tubes\n        for(x = [0, 8*scale_factor]) {\n            translate([x, 0, 0])\n                tube(5*scale_factor, 30*scale_factor);\n        }\n        \n        // U-bend\n        translate([4*scale_factor, 0, 30*scale_factor])\n            rotate([90, 0, 0])\n            difference() {\n                torus(4*scale_factor, 2.5*scale_factor);\n                torus(4*scale_factor - wall, 2.5*scale_factor - wall);\n            }\n    }\n}\n\n// Bell\nmodule bell() {\n    color(\"gold\")\n    translate([0, 0, 0])\n    union() {\n        // Flare\n        cylinder(h = 30*scale_factor, d1 = 6*scale_factor, d2 = 50*scale_factor);\n        \n        // Bell rim\n        translate([0, 0, 30*scale_factor])\n            torus(25*scale_factor, 2*scale_factor);\n    }\n}\n\n// Water keys\nmodule water_key() {\n    color(\"silver\")\n    union() {\n        // Key lever\n        translate([0, 0, 2*scale_factor])\n            cube([8*scale_factor, 2*scale_factor, 1*scale_factor]);\n        \n        // Spit valve\n        translate([0, 0, 0])\n            cylinder(h = 3*scale_factor, d = 4*scale_factor);\n    }\n}\n\n// Main assembly\nunion() {\n    // Mouthpiece at start\n    translate([0, 0, -15*scale_factor])\n        mouthpiece();\n    \n    // Leadpipe\n    translate([0, 0, -15*scale_factor])\n        leadpipe();\n    \n    // Valve section\n    translate([0, 15*scale_factor, 0])\n        valve_casing();\n    \n    // Valve buttons\n    for(i = [0, 1, 2]) {\n        translate([0, 15*scale_factor, i * 12*scale_factor + 5*scale_factor])\n            valve_button();\n    }\n    \n    // Tuning slide\n    translate([0, 15*scale_factor, 24*scale_factor])\n        tuning_slide();\n    \n    // Main tubing from valves to bell\n    translate([20*scale_factor, 0, 24*scale_factor])\n        rotate([0, 90, 0])\n        tube(6*scale_factor, 40*scale_factor);\n    \n    // Bell\n    translate([60*scale_factor, 0, 24*scale_factor])\n        rotate([0, 90, 0])\n        bell();\n    \n    // Water keys\n    translate([10*scale_factor, 15*scale_factor, 15*scale_factor])\n        water_key();\n    \n    translate([30*scale_factor, 0, 20*scale_factor])\n        water_key();\n}",
    "renders": true
  },
  {
    "musical_instrument": "mark",
    "openscad_code": "// Realistic 3D-printable bench-mark bolt\n// Overall size: 30 mm diameter head, 60 mm total length\n\n// Bolt head - hexagonal with chamfered edges\nmodule bolt_head() {\n    difference() {\n        // Main hexagonal prism\n        cylinder(h = 8, d = 30, $fn = 6);\n        \n        // Chamfer the top edges\n        translate([0, 0, 7.9])\n            cylinder(h = 2, d1 = 30, d2 = 28, $fn = 6);\n        \n        // Center mark groove\n        translate([0, 0, 4])\n            rotate([0, 0, 45])\n            cube([20, 1.5, 3], center = true);\n    }\n}\n\n// Threaded shaft - simplified for 3D printing\nmodule shaft() {\n    difference() {\n        // Main shaft\n        translate([0, 0, -30])\n            cylinder(h = 50, d = 12);\n        \n        // Thread grooves (simplified as rings)\n        for (i = [0:3:27]) {\n            translate([0, 0, -i - 6])\n                cylinder(h = 1.5, d = 10.5);\n        }\n    }\n}\n\n// Reference arrow and text area\nmodule reference_marks() {\n    // Arrow pointing to center\n    translate([0, 0, 0.5])\n        linear_extrude(height = 1)\n            polygon(points = [\n                [0, 10], [3, 7], [1, 7], [1, 0], [-1, 0], [-1, 7], [-3, 7]\n            ]);\n    \n    // Orientation grooves\n    for (angle = [0:120:240]) {\n        rotate([0, 0, angle])\n            translate([10, 0, 0])\n                cube([4, 1, 1], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main bolt\n    bolt_head();\n    shaft();\n    \n    // Raised reference platform\n    translate([0, 0, 8])\n        cylinder(h = 2, d = 35);\n    \n    // Reference marks on top\n    reference_marks();\n    \n    // Small alignment dot\n    translate([0, 12, 10])\n        sphere(d = 1.5);\n}",
    "renders": true
  },
  {
    "musical_instrument": "wind",
    "openscad_code": "// Wind Turbine - Realistic Style, Medium Complexity\n// Dimensions: ~80mm height, ~60mm rotor diameter\n\n// Overall scale factor\nscale_factor = 1;\n\n// Main tower module\nmodule tower() {\n    // Base foundation\n    translate([0, 0, 0])\n        cylinder(h=5, d1=25, d2=20, $fn=32);\n    \n    // Main tower segments\n    for(i=[0:2]) {\n        translate([0, 0, 5 + i*20])\n            cylinder(h=20, d1=20-i*3, d2=17-i*3, $fn=32);\n    }\n}\n\n// Nacelle (housing on top)\nmodule nacelle() {\n    translate([0, 0, 70])\n    rotate([0, 0, 0])\n    union() {\n        // Main body\n        cube([15, 12, 8], center=true);\n        \n        // Nose cone\n        translate([9.5, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=5, d1=8, d2=4, $fn=16);\n    }\n}\n\n// Hub for blades\nmodule hub() {\n    translate([12, 0, 70])\n    rotate([0, 90, 0])\n    difference() {\n        // Main hub cylinder\n        cylinder(h=8, d=6, center=true, $fn=24);\n        \n        // Center hole for axle\n        cylinder(h=9, d=2, center=true, $fn=16);\n    }\n}\n\n// Single blade\nmodule blade(angle=0) {\n    rotate([0, 0, angle])\n    translate([12, 0, 70])\n    rotate([0, 90, 0])\n    union() {\n        // Blade root connection\n        translate([-2, 0, 0])\n            cube([4, 3, 2], center=true);\n        \n        // Main blade\n        translate([20, 0, 0])\n            scale([1, 0.3, 0.1])\n            sphere(d=40, $fn=32);\n        \n        // Blade tip\n        translate([38, 0, 0])\n            scale([1, 0.2, 0.05])\n            sphere(d=8, $fn=16);\n    }\n}\n\n// Complete rotor assembly\nmodule rotor() {\n    for(i=[0:120:359]) {\n        blade(i);\n    }\n    hub();\n}\n\n// Base platform with bolts\nmodule base_platform() {\n    difference() {\n        // Main base\n        translate([0, 0, -2])\n            cylinder(h=4, d=35, $fn=32);\n        \n        // Bolt holes\n        for(angle=[0:90:270]) {\n            rotate([0, 0, angle])\n                translate([13, 0, -3])\n                    cylinder(h=6, d=3, $fn=16);\n        }\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    base_platform();\n    tower();\n    nacelle();\n    rotor();\n}",
    "renders": true
  },
  {
    "musical_instrument": "crash",
    "openscad_code": "// Car Crash Scene - Medium Complexity Realistic Style\n// Total dimensions: ~80mm wide x 50mm deep x 30mm high\n\n// Main car body\nmodule car_body() {\n    // Car chassis\n    difference() {\n        hull() {\n            translate([-25, -10, 0]) cube([50, 20, 8]);\n            translate([-20, -8, 8]) cube([40, 16, 6]);\n        }\n        \n        // Windows\n        translate([-15, -7, 14]) cube([30, 14, 4]);\n    }\n    \n    // Hood (crumpled)\n    for (i = [-20:5:15]) {\n        translate([i, 0, 14]) rotate([0, 10*sin(i*10), 0]) \n            cube([6, 16, 2]);\n    }\n    \n    // Trunk\n    translate([20, 0, 8]) rotate([0, -15, 0])\n        cube([15, 18, 6]);\n}\n\n// Wheels\nmodule wheel(pos, angle=0) {\n    translate(pos) rotate([0, 0, angle]) {\n        cylinder(h=4, r=8, $fn=20);\n        translate([0, 0, -0.5]) cylinder(h=5, r=3, $fn=16);\n    }\n}\n\n// Damaged front\nmodule damaged_front() {\n    // Crumpled bumper\n    difference() {\n        translate([-25, -12, 0]) cube([8, 24, 6]);\n        for (i = [-10:2:10]) {\n            translate([-24, i, 0]) sphere(r=2);\n        }\n    }\n    \n    // Exposed engine parts\n    color(\"gray\") {\n        translate([-25, -5, 6]) rotate([0, 30, 0])\n            cube([8, 10, 4]);\n        translate([-25, 5, 7]) cylinder(h=10, r=2);\n    }\n}\n\n// Debris\nmodule debris() {\n    for (i = [0:3:15]) {\n        translate([30 + i*2, 10 + sin(i)*5, i])\n            rotate([i*20, i*15, i*10])\n            cube([2 + i, 1 + i/2, 1 + i/3]);\n    }\n}\n\n// Road surface\nmodule road() {\n    translate([-40, -30, -2]) cube([100, 60, 2]);\n    \n    // Road markings\n    for (i = [-30:10:30]) {\n        translate([i, -25, 0]) cube([5, 2, 0.1]);\n    }\n}\n\n// Assemble the crash scene\nroad();\n\n// Main car body\ncolor(\"red\") {\n    car_body();\n    damaged_front();\n}\n\n// Wheels (some detached)\nwheel([-15, -15, -2], 45);\nwheel([-15, 15, -2], -30);\nwheel([15, -15, -2], 90);\nwheel([25, 20, 0], 0);\n\n// Debris field\ncolor(\"gray\") debris();\ncolor(\"red\") {\n    translate([35, -5, 2]) rotate([0, 45, 0])\n        cube([8, 4, 2]);\n    translate([40, 8, 1]) sphere(r=3);\n}\n\n// Glass fragments\ncolor([0.8, 0.9, 1, 0.6]) {\n    for (i = [0:5:20]) {\n        translate([10 + i, -10 - i/2, 10 + i/3])\n            rotate([i*5, i*3, i*7])\n            cube([1, 1.5, 0.5]);\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "splash",
    "openscad_code": "// Splash Model - Realistic Style, Medium Complexity\n// 3D printable water splash effect\n\n// Parameters\n$fn = 32;\nwall_thickness = 1.2;\nbase_radius = 15;\nsplash_height = 45;\ndroplet_radius = 3;\n\n// Main splash module\nmodule splash() {\n    // Central column\n    translate([0, 0, wall_thickness/2])\n        cylinder(h=splash_height/2, r1=base_radius, r2=base_radius/3, center=true);\n    \n    // Upper bulb\n    translate([0, 0, splash_height/2])\n        sphere(r=base_radius/1.8);\n    \n    // Main crown\n    for(i=[0:30:330]) {\n        rotate([0, 0, i])\n        translate([base_radius/1.5, 0, splash_height/2.5])\n            rotate([90 + i/6, 0, 0])\n            cylinder(h=base_radius*1.2, r1=base_radius/3, r2=0.5, center=true);\n    }\n    \n    // Secondary droplets\n    for(i=[15:45:360]) {\n        rotate([0, 0, i])\n        translate([base_radius*1.8, 0, splash_height/1.8])\n            sphere(r=droplet_radius);\n    }\n    \n    // Tertiary droplets\n    for(i=[0:60:300]) {\n        rotate([0, 0, i])\n        translate([base_radius*2.2, 0, splash_height/1.5])\n            sphere(r=droplet_radius*0.7);\n    }\n    \n    // Base foundation\n    difference() {\n        cylinder(h=wall_thickness, r=base_radius*2.2, center=true);\n        cylinder(h=wall_thickness+0.1, r=base_radius*2.1, center=true);\n    }\n    \n    // Internal support structure\n    for(i=[0:60:300]) {\n        rotate([0, 0, i])\n        translate([base_radius*0.8, 0, wall_thickness])\n            cylinder(h=splash_height/3, r=wall_thickness, center=false);\n    }\n    \n    // Crown reinforcement\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n        translate([base_radius, 0, splash_height/2])\n            rotate([45 + i/8, 0, 0])\n            cylinder(h=base_radius/2, r=wall_thickness/2, center=true);\n    }\n    \n    // Side splash sheets\n    for(i=[-45:30:45]) {\n        rotate([0, 0, i])\n        translate([base_radius*1.6, 0, splash_height/2.8])\n            rotate([75, 0, 0])\n            scale([1, 0.3, 1])\n            sphere(r=base_radius/2.5);\n    }\n}\n\n// Assembly\nsplash();",
    "renders": true
  },
  {
    "musical_instrument": "china",
    "openscad_code": "// China Plate – realistic style, medium complexity\n// Wall-thickness = 1.2 mm, ~95 mm diameter, printable without supports\n\nmodule plate_base() {\n    // Main body – shallow cylinder with slight taper\n    difference() {\n        cylinder(h = 8, d1 = 95, d2 = 90, $fn = 120);          // outer shape\n        translate([0, 0, 1])                                  // inner cavity\n            cylinder(h = 7, d1 = 92.6, d2 = 87.6, $fn = 120);\n    }\n}\n\nmodule foot_ring() {\n    // Raised foot ring on the underside for stability\n    difference() {\n        translate([0, 0, 0])\n            cylinder(h = 2.5, d = 50, $fn = 120);\n        translate([0, 0, 1.2])\n            cylinder(h = 2.5, d = 47.6, $fn = 120);\n    }\n}\n\nmodule rim_detail() {\n    // Slight raised lip on the top edge\n    difference() {\n        translate([0, 0, 8])\n            cylinder(h = 1.5, d1 = 95, d2 = 96, $fn = 120);\n        translate([0, 0, 8])\n            cylinder(h = 1.5, d = 93.6, $fn = 120);\n    }\n}\n\n// Decorative concentric rings on the eating surface\nmodule surface_rings() {\n    for(r = [20:15:75]) {\n        color(\"lightgray\")\n        translate([0, 0, 8.5])\n            difference() {\n                cylinder(h = 0.4, d = r + 1, $fn = 120);\n                cylinder(h = 0.4, d = r - 1, $fn = 120);\n            }\n    }\n}\n\n// Assemble all parts\nunion() {\n    plate_base();\n    translate([0, 0, -2.5]) foot_ring();\n    rim_detail();\n    surface_rings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "hihat",
    "openscad_code": "// Medium-complexity realistic hi-hat stand (lower + upper cymbal)\n// Approx. 90 mm tall, 60 mm wide – fits most FDM printers without supports\n// All parts have ≥1.2 mm walls and no >45° overhangs\n\n$fn = 36;          // smooth cylinders\n\n// --- Top-level assembly ----------------------------------------------------\nunion() {\n    translate([0,0,10])    // lift entire stand for nicer preview\n        hiHat();\n}\n\n// Master module\nmodule hiHat() {\n    // Tripod legs (3 identical)\n    for(a=[0:120:240])\n        rotate([0,0,a])\n            translate([28,0,0])\n                leg();\n\n    // Lower cymbal\n    translate([0,0,82])\n        rotate([0,0,0])\n            cymbal(d=55, h=4);\n\n    // Upper cymbal on pull-rod\n    translate([0,0,82+18])\n        rotate([0,0,0])\n            cymbal(d=55, h=4);\n\n    // Main column\n    column();\n\n    // Pull-rod (simple telescoping rod)\n    pullRod();\n}\n\n// --- Modules ---------------------------------------------------------------\nmodule leg() {\n    // Thickness chosen for 1.2 mm walls when printer extrusion is 0.4 mm\n    thickness = 1.2;\n    foot_r = 5;\n    foot_h = 4;\n    translate([0,0,foot_h])\n        rotate([15,0,0])      // outward angle\n            difference() {\n                cube([thickness, 30, 40], center=true);\n                // cut underside to avoid overhang\n                translate([0,-15,-20])\n                    cube([thickness+0.1, 32, 20], center=false);\n            }\n    // Rubber foot\n    translate([0,0,foot_h/2])\n        sphere(d=foot_r*2);\n}\n\nmodule column() {\n    h = 80;\n    od = 8;\n    wall = 1.5;\n    difference() {\n        cylinder(h=h, d=od);\n        cylinder(h=h, d=od-2*wall);\n    }\n\n    // Base plate (disk)\n    translate([0,0,-1])\n        cylinder(h=2, d=22);\n}\n\nmodule pullRod() {\n    h = 16;\n    od = 4;\n    wall = 1.2;\n    difference() {\n        cylinder(h=h, d=od);\n        cylinder(h=h, d=od-2*wall);\n    }\n}\n\nmodule cymbal(d, h) {\n    // Realistic shallow conical cymbal\n    angle = 8;      // degrees\n    difference() {\n        cylinder(h=h, d=d, center=true);\n        // Bell hole\n        translate([0,0,-h/2-0.1])\n            cylinder(h=h+0.2, d=6);\n    }\n    // Small bell dome\n    translate([0,0,h/2])\n        cylinder(h=3, d1=8, d2=6);\n}",
    "renders": true
  },
  {
    "musical_instrument": "ride",
    "openscad_code": "// Ferris Wheel Ride - Realistic Medium Complexity\n// Designed for 3D printing, no overhangs, 50mm diameter\n\n// Main parameters\ndiameter = 50;\nwheel_thickness = 4;\nspoke_thickness = 2;\ncabin_size = 8;\ncabin_wall = 1.5;\nhub_radius = 5;\n\n// Wheel module\nmodule wheel() {\n    // Outer rim\n    rotate_extrude(angle = 360, $fn = 64)\n        translate([diameter/2 - wheel_thickness/2, 0, 0])\n            square([wheel_thickness, 8], center = true);\n    \n    // Inner rim\n    rotate_extrude(angle = 360, $fn = 64)\n        translate([diameter/2 - wheel_thickness*2, 0, 0])\n            square([wheel_thickness/2, 6], center = true);\n    \n    // Spokes\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([hub_radius, 0, -spoke_thickness/2])\n                cube([diameter/2 - hub_radius - wheel_thickness, spoke_thickness, spoke_thickness], center = true);\n    }\n    \n    // Central hub\n    cylinder(h = 8, r = hub_radius, $fn = 32);\n    cylinder(h = 10, r = 3, center = true, $fn = 32);\n}\n\n// Cabin module\nmodule cabin() {\n    difference() {\n        // Main body\n        translate([-cabin_size/2, -cabin_size/2, 0])\n            cube([cabin_size, cabin_size, cabin_size*0.8]);\n        \n        // Hollow interior\n        translate([-cabin_size/2 + cabin_wall, -cabin_size/2 + cabin_wall, cabin_wall])\n            cube([cabin_size - cabin_wall*2, cabin_size - cabin_wall*2, cabin_size*0.8 - cabin_wall]);\n        \n        // Door opening\n        translate([cabin_size/2 - cabin_wall*2, -cabin_size/4, cabin_size*0.4])\n            cube([cabin_wall*1.5, cabin_size/2, cabin_size*0.4]);\n    }\n    \n    // Roof\n    translate([0, 0, cabin_size*0.8])\n        cylinder(h = 1, r = cabin_size/2 * 0.9, $fn = 6);\n    \n    // Floor\n    translate([-cabin_size/2, -cabin_size/2, -1])\n        cube([cabin_size, cabin_size, 1]);\n}\n\n// Support structure\nmodule support() {\n    // Left A-frame\n    translate([-diameter/4, 0, 0])\n        rotate([0, -15, 0])\n            cylinder(h = diameter/1.5, r = 2, $fn = 16);\n    \n    translate([-diameter/4, 0, 0])\n        rotate([0, 15, 0])\n            cylinder(h = diameter/1.5, r = 2, $fn = 16);\n    \n    // Right A-frame\n    translate([diameter/4, 0, 0])\n        rotate([0, -15, 0])\n            cylinder(h = diameter/1.5, r = 2, $fn = 16);\n    \n    translate([diameter/4, 0, 0])\n        rotate([0, 15, 0])\n            cylinder(h = diameter/1.5, r = 2, $fn = 16);\n    \n    // Base\n    translate([0, 0, -diameter/1.5 - 2])\n        cube([diameter/1.5, 10, 4], center = true);\n}\n\n// Assembly\nsupport();\n\ntranslate([0, 0, diameter/1.5 - 4])\n    rotate([90, 0, 0])\n        wheel();\n\n// Attach cabins\nfor(i = [0:11]) {\n    rotate([0, 0, i * 30])\n        translate([diameter/2 - cabin_size/2 - wheel_thickness, 0, 0])\n            rotate([0, 90, 0])\n                cabin();\n}",
    "renders": true
  },
  {
    "musical_instrument": "cowbell",
    "openscad_code": "// Cowbell - Medium complexity realistic style\n// Designed for 3D printing with proper wall thickness\n\n$fn = 32;\n\n// Main parameters\nbell_length = 70;\nbell_width = 35;\nbell_height = 45;\nwall_thickness = 2.5;\ntop_thickness = 3;\n\nmodule cowbell_body() {\n    difference() {\n        // Main bell shape - tapered cuboid\n        hull() {\n            translate([0, 0, 0])\n                cube([bell_width, bell_length, bell_height], center=true);\n            translate([0, bell_length/4, 0])\n                scale([0.85, 0.9, 0.8])\n                cube([bell_width, bell_length, bell_height], center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n            cube([bell_width-wall_thickness*2, bell_length-wall_thickness*2, bell_height-wall_thickness], center=true);\n        \n        // Bottom opening\n        translate([0, 0, -bell_height/2])\n            cube([bell_width-wall_thickness*2, bell_length-wall_thickness*2, wall_thickness*2], center=true);\n    }\n}\n\nmodule clapper_strike_plate() {\n    // Reinforced strike area inside\n    translate([0, bell_length/3, 0])\n    difference() {\n        cube([bell_width-wall_thickness*4, 8, wall_thickness*1.5], center=true);\n        translate([0, 0, -wall_thickness/2])\n            cube([bell_width-wall_thickness*4-2, 6, wall_thickness*3], center=true);\n    }\n}\n\nmodule mounting_ears() {\n    // Left ear\n    translate([-bell_width/2-wall_thickness, 0, bell_height/2-top_thickness/2])\n        cube([wall_thickness*2, 12, top_thickness], center=true);\n    \n    // Right ear\n    translate([bell_width/2+wall_thickness, 0, bell_height/2-top_thickness/2])\n        cube([wall_thickness*2, 12, top_thickness], center=true);\n    \n    // Mounting holes\n    translate([-bell_width/2-wall_thickness, -4, bell_height/2-top_thickness/2])\n        cylinder(h=top_thickness+1, r=2.5, center=true);\n    \n    translate([bell_width/2+wall_thickness, -4, bell_height/2-top_thickness/2])\n        cylinder(h=top_thickness+1, r=2.5, center=true);\n}\n\nmodule clapper() {\n    // Clapper ball\n    translate([0, -bell_length/2+15, -5])\n    difference() {\n        sphere(r=6);\n        translate([0, 0, -8])\n            cube([20, 20, 10], center=true);\n    }\n    \n    // Clapper rod\n    translate([0, -bell_length/2+8, -5])\n    rotate([90, 0, 0])\n        cylinder(h=12, r=1.5, center=true);\n}\n\nmodule reinforcement_ridges() {\n    // Side ridges for strength\n    for(i = [-1, 1]) {\n        translate([i*(bell_width/2-wall_thickness), 0, 0])\n        difference() {\n            cube([wall_thickness*2, bell_length-10, bell_height-10], center=true);\n            translate([0, 0, 0])\n                scale([0.9, 0.9, 0.9])\n                cube([wall_thickness*2, bell_length-10, bell_height-10], center=true);\n        }\n    }\n    \n    // Bottom ridge\n    translate([0, 0, -bell_height/2+wall_thickness])\n    difference() {\n        cube([bell_width-wall_thickness, wall_thickness*2, wall_thickness*1.5], center=true);\n        translate([0, 0, -wall_thickness/2])\n            scale([0.9, 0.9, 0.9])\n            cube([bell_width-wall_thickness*2, wall_thickness*2, wall_thickness*1.5], center=true);\n    }\n}\n\nmodule cowbell_complete() {\n    union() {\n        // Main body\n        cowbell_body();\n        \n        // Top mounting features\n        mounting_ears();\n        \n        // Internal reinforcements\n        clapper_strike_plate();\n        \n        // External ridges\n        reinforcement_ridges();\n        \n        // Clapper assembly\n        clapper();\n    }\n}\n\n// Render the complete cowbell\ncowbell_complete();",
    "renders": true
  },
  {
    "musical_instrument": "wood",
    "openscad_code": "// Realistic Wood Block (Birch-like) – 3D-printable\n// Total length ≈ 75 mm, Ø ≈ 25 mm\n// Medium complexity, only basic primitives & booleans\n\n$fn=36;          // Good balance between smoothness & printability\nwall=1.8;        // 0.5 mm nozzle → 3 perimeters = 1.5 mm, plus safety\n\n// Main trunk cylinder with a slight taper\nmodule trunk() {\n    difference() {\n        union() {\n            // Upper 3/4 straight cylinder\n            cylinder(h=60, d1=20, d2=20, center=false);\n            // Lower 1/4 slight taper\n            translate([0,0,60])\n                cylinder(h=15, d1=20, d2=16, center=false);\n        }\n        // Hollow core for printing without infill\n        translate([0,0,-1])   // start below bottom\n            cylinder(h=78, d=20-2*wall, center=false);\n    }\n}\n\n// Ring bark texture – done by subtracting many tiny cylinders\nmodule bark_rings() {\n    for(z=[5:5:70]) {\n        rotate([0,0,rand(0,360)]) {\n            for(a=[0:30:330]) {\n                translate([10*cos(a), 10*sin(a), z])\n                    rotate([90,0,0])\n                        cylinder(h=2, d=1.2, center=true);\n            }\n        }\n    }\n}\n\n// Longitudinal vertical grooves that imitate birch\nmodule bark_striations() {\n    for(a=[0:20:340]) {\n        rotate([0,0,a])\n            translate([10,0,0])\n                cube([2, 0.5, 75], center=true);\n    }\n}\n\n// Small knot – simple sphere subtracted & capped\nmodule knot() {\n    translate([7,0,35])\n    rotate([0,90,0]) {\n        difference() {\n            sphere(d=5);\n            // Remove half to keep flat printable surface\n            translate([0,0,-2.6])\n                cube([10,10,5], center=true);\n        }\n    }\n}\n\n// End grain rings on top\nmodule end_grain() {\n    translate([0,0,75.1])  // slight offset to avoid z-fighting\n    for(r=[5:2.5:9.5])\n        difference() {\n            cylinder(h=0.2, d=2*r, center=false);\n            cylinder(h=0.3, d=2*(r-wall), center=false);\n        }\n}\n\n// Small chamfer at bottom for print-bed adhesion\nmodule base_chamfer() {\n    difference() {\n        cylinder(h=2, d1=18, d2=20, center=false);\n        cylinder(h=3, d=16, center=false);\n    }\n}\n\n// Assemble everything\nunion() {\n    trunk();\n    difference() {\n        bark_rings();\n        trunk();   // keep texture outside\n    }\n    difference() {\n        bark_striations();\n        trunk();\n    }\n    knot();\n    end_grain();\n    base_chamfer();\n}",
    "renders": true
  },
  {
    "musical_instrument": "temple",
    "openscad_code": "// Temple.scad\n// Medium-complexity realistic temple (≈75 mm tall)\n// 3D-printable, no overhangs >45°, 1 mm wall thickness\n\n// Base platform\nmodule base_platform() {\n    difference() {\n        cube([60, 60, 5], center = true);      // main slab\n        translate([0, 0, -0.01])\n            cube([58, 58, 5.2], center = true); // hollow out bottom\n    }\n}\n\n// Short plinth under columns\nmodule plinth() {\n    cube([50, 50, 4], center = true);\n}\n\n// Doric column\nmodule column(height = 30) {\n    union() {\n        // shaft\n        cylinder(h = height, d = 6, $fn = 16);\n        // capital\n        translate([0, 0, height])\n            cylinder(h = 2, d1 = 6, d2 = 8, $fn = 16);\n        // base\n        translate([0, 0, -2])\n            cylinder(h = 2, d = 8, $fn = 16);\n    }\n}\n\n// Entablature (architrave + frieze + cornice)\nmodule entablature() {\n    union() {\n        // architrave\n        cube([52, 52, 3], center = true);\n        // frieze\n        translate([0, 0, 3])\n            cube([52, 52, 3], center = true);\n        // cornice\n        translate([0, 0, 6.5])\n            cube([54, 54, 2], center = true);\n    }\n}\n\n// Roof pediment\nmodule pediment() {\n    difference() {\n        polyhedron(\n            points = [\n                [-27, -27, 0], [27, -27, 0], [27, 27, 0], [-27, 27, 0],   // bottom\n                [0, 0, 15]                                                // apex\n            ],\n            faces = [\n                [0, 1, 4], [1, 2, 4], [2, 3, 4], [3, 0, 4],               // sides\n                [0, 1, 2, 3]                                              // bottom\n            ]\n        );\n        // carve out back face\n        translate([0, 0, -1])\n            cube([60, 60, 20], center = true);\n    }\n}\n\n// Simple steps leading up\nmodule steps() {\n    for (i = [0:1:2]) {\n        translate([0, 31 + i*2.5, i*1.5])\n            cube([30 + i*10, 5, 3], center = true);\n    }\n}\n\n// Small altar inside\nmodule altar() {\n    translate([0, 0, 19]) {\n        cube([10, 6, 3], center = true);\n    }\n}\n\n// Assemble temple\nmodule temple() {\n    union() {\n        // base\n        base_platform();\n        \n        // steps\n        steps();\n        \n        translate([0, 0, 5 + 2]) {\n            // plinth\n            plinth();\n            \n            translate([0, 0, 2]) {\n                // columns in H-shape\n                for (x = [-18, 18])\n                    for (y = [-18, 18])\n                        translate([x, y, 0])\n                            column(30);\n                \n                // front & back middle columns\n                translate([0, -18, 0]) column(30);\n                translate([0,  18, 0]) column(30);\n                \n                // entablature\n                translate([0, 0, 30 + 1])\n                    entablature();\n                \n                // pediment roof\n                translate([0, 0, 30 + 1 + 8.5])\n                    pediment();\n                \n                // altar inside\n                altar();\n            }\n        }\n    }\n}\n\n// Render\ntemple();",
    "renders": true
  },
  {
    "musical_instrument": "gongs",
    "openscad_code": "// Realistic 3D-printable Gongs Set\n// Medium complexity – two suspended gongs with frame and mallet\n// Overall footprint ≈ 80 mm x 60 mm x 70 mm\n\n// General parameters\n$fn=30;                              // Smooth curves\nwall = 2;                            // Minimum 3D-printable wall thickness\ngong_d = 30;                         // Small gong diameter\ngong_D = 45;                         // Large gong diameter\ngong_h = 4;                          // Gong thickness\nframe_w = 80;                        // Frame width\nframe_d = 60;                        // Frame depth\nframe_h = 70;                        // Frame height\nrope_r = 1.2;                        // Rope radius\n\nmodule gong(d=h, t=gong_h) {\n    difference() {\n        cylinder(h=t, d=d);          // Main disc\n        translate([0,0,-0.1])\n            cylinder(h=t+0.2, d=d-wall*2); // Hollow back\n        // Decorative concentric rings on front\n        for (r=[d*0.2, d*0.35, d*0.5])\n            translate([0,0,t-0.3])\n                cylinder(h=0.3, d1=r*2, d2=r*2+0.4);\n    }\n}\n\nmodule rope(len=20) {\n    rotate([90,0,0])\n        cylinder(h=len, d=rope_r*2);\n}\n\nmodule top_bar() {\n    // Horizontal bar with rounded ends\n    hull() {\n        translate([-frame_w/2, 0, 0])\n            sphere(r=wall);\n        translate([frame_w/2, 0, 0])\n            sphere(r=wall);\n    }\n}\n\nmodule side_leg(x) {\n    // Tapered leg with foot\n    linear_extrude(height=frame_h-wall, scale=[0.6,1])\n        square([wall, frame_d], center=true);\n    translate([0, 0, -frame_h/2+wall/2])\n        cube([wall*2, frame_d*1.2, wall], center=true);\n}\n\nmodule frame() {\n    union() {\n        // Top bar\n        translate([0, 0, frame_h/2-wall/2])\n            top_bar();\n        // Side legs\n        translate([-frame_w/2+wall/2, 0, 0])\n            side_leg(-frame_w/2+wall/2);\n        mirror([1,0,0])\n            translate([-frame_w/2+wall/2, 0, 0])\n                side_leg(-frame_w/2+wall/2);\n    }\n}\n\nmodule mallet(len=40, head_r=5) {\n    union() {\n        // Handle\n        cylinder(h=len-head_r*2, d=4, center=true);\n        // Head\n        translate([0,0,len/2])\n            sphere(r=head_r);\n        // Thin collar\n        translate([0,0,len/2-head_r])\n            cylinder(h=1, d=head_r*2+1);\n    }\n}\n\n// Assembly\nframe();\n\n// Small gong\ntranslate([-frame_w/4, 0, 0])\n    rotate([0,0,0])\n        gong(gong_d);\ntranslate([-frame_w/4, 0, frame_h/2-wall-rope_r])\n    rope(frame_h/2-wall-rope_r-gong_h/2);\n\n// Large gong\ntranslate([frame_w/4, 0, 0])\n    rotate([0,0,0])\n        gong(gong_D);\ntranslate([frame_w/4, 0, frame_h/2-wall-rope_r])\n    rope(frame_h/2-wall-rope_r-gong_h/2);\n\n// Mallet resting against frame\ntranslate([frame_w/2+5, -frame_d/4, 0])\n    rotate([0,-20,90])\n        mallet();",
    "renders": true
  },
  {
    "musical_instrument": "tamtam",
    "openscad_code": "// Tamtam Gong - Medium Complexity Realistic Style\n// Overall dimensions: ~80mm diameter, ~10mm thick\n\n// Parameters\n$fn = 64;\ndiameter = 80;\nthickness = 3;\nrim_height = 8;\ncenter_boss_diameter = 12;\ncenter_boss_height = 5;\nhole_diameter = 4;\nhandle_length = 25;\nhandle_diameter = 6;\nhandle_curve_radius = 10;\nwall_thickness = 2;\n\n// Main gong body\nmodule gong_body() {\n    difference() {\n        // Main disk\n        cylinder(h = thickness, d = diameter, center = true);\n        \n        // Taper the edge for realistic profile\n        translate([0, 0, thickness/2 + 0.1])\n            cylinder(h = thickness + 0.2, d1 = diameter, d2 = diameter * 0.9, center = false);\n        \n        // Center hole\n        translate([0, 0, -thickness/2 - 0.1])\n            cylinder(h = thickness + 0.2, d = hole_diameter, center = false);\n    }\n}\n\n// Reinforcement rim\nmodule rim() {\n    difference() {\n        // Outer rim\n        translate([0, 0, thickness/2])\n            cylinder(h = rim_height, d = diameter + 2, $fn = 128);\n        \n        // Remove center\n        translate([0, 0, thickness/2 - 0.1])\n            cylinder(h = rim_height + 0.2, d = diameter - 4, $fn = 128);\n    }\n}\n\n// Center boss with hammering marks\nmodule center_boss() {\n    union() {\n        // Main boss\n        translate([0, 0, thickness/2])\n            cylinder(h = center_boss_height, d = center_boss_diameter, $fn = 32);\n        \n        // Hammering marks simulation\n        for (i = [0:5:359]) {\n            rotate([0, 0, i])\n            translate([center_boss_diameter/4, 0, thickness/2 + center_boss_height])\n                sphere(d = 1.5, $fn = 8);\n        }\n    }\n}\n\n// Concentric rings for traditional appearance\nmodule concentric_rings() {\n    for (r = [diameter/4, diameter/3, diameter/2.5, diameter/2]) {\n        difference() {\n            translate([0, 0, thickness/2 + 0.05])\n                cylinder(h = 0.5, d = r * 2, $fn = 64);\n            translate([0, 0, thickness/2])\n                cylinder(h = 0.6, d = r * 2 - 1, $fn = 64);\n        }\n    }\n}\n\n// Handle mounting bracket\nmodule handle_bracket() {\n    difference() {\n        // Main bracket\n        translate([diameter/2 - 5, 0, thickness/2 + rim_height/2])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d = 8, center = true);\n        \n        // Screw hole\n        translate([diameter/2 - 5, 0, thickness/2 + rim_height/2])\n            rotate([90, 0, 0])\n                cylinder(h = 12, d = 3, center = true);\n    }\n}\n\n// Curved handle\nmodule handle() {\n    translate([diameter/2 - 5, 0, thickness/2 + rim_height/2])\n        rotate([0, 0, 90])\n            rotate_extrude(angle = 90, $fn = 32)\n                translate([handle_curve_radius, 0, 0])\n                    circle(d = handle_diameter, $fn = 16);\n}\n\n// Assembly\nunion() {\n    // Gong components\n    gong_body();\n    rim();\n    center_boss();\n    concentric_rings();\n    \n    // Handle components\n    handle_bracket();\n    handle();\n}",
    "renders": true
  },
  {
    "musical_instrument": "anvil",
    "openscad_code": "// Realistic 3D printable anvil - medium complexity\n// Overall dimensions: ~80 mm length, ~30 mm height, ~30 mm width\n\n$fn = 32; // smooth curves\n\nmodule anvil() {\n    // Base foot - flat bottom for stability\n    union() {\n        translate([0, 0, 2]) \n            cube([70, 25, 4], center = true);\n        \n        // Tapered base section\n        translate([0, 0, 6]) \n            cylinder(h = 6, r1 = 15, r2 = 12, center = true);\n        \n        // Main body block\n        translate([0, 0, 12]) \n            cube([45, 22, 10], center = true);\n        \n        // Horn - tapered cylinder\n        translate([-32, 0, 20]) \n            rotate([0, 90, 0]) \n                cylinder(h = 35, r1 = 11, r2 = 5, center = false);\n        \n        // Cutting table (flat behind horn)\n        translate([-10, 0, 21]) \n            cube([15, 18, 2], center = true);\n        \n        // Pritchel hole\n        translate([5, 0, 21]) \n            rotate([0, 90, 0]) \n                cylinder(h = 5, r = 2.5, center = true);\n        \n        // Hardy hole\n        translate([15, 0, 21]) \n            rotate([0, 90, 0]) \n                cube([5, 5, 5], center = true);\n        \n        // Top plate with slight rounding\n        difference() {\n            translate([0, 0, 22]) \n                cube([50, 24, 2], center = true);\n            \n            // Chamfer edges\n            translate([0, 0, 23]) \n                cube([46, 20, 2], center = true);\n        }\n        \n        // Reinforcement ribs under horn\n        for (i = [-1:1]) {\n            translate([-20 + i*8, 0, 16]) \n                cube([4, 22, 8], center = true);\n        }\n        \n        // Tail support\n        translate([30, 0, 16]) {\n            cube([12, 20, 12], center = true);\n            // Rounded back edge\n            difference() {\n                translate([6, 0, 6]) \n                    cylinder(h = 20, r = 6, center = true);\n                translate([6, 0, -4]) \n                    cube([12, 20, 20], center = true);\n            }\n        }\n    }\n}\n\n// Generate the anvil\nanvil();",
    "renders": true
  },
  {
    "musical_instrument": "bell",
    "openscad_code": "// Realistic Bell - OpenSCAD\n// Medium complexity, 3D printable bell model\n\n// Overall dimensions\nbell_height = 70;\nbell_diameter = 60;\nwall_thickness = 2.5;\n\nmodule bell_body() {\n    difference() {\n        // Main bell shape - flared cone\n        cylinder(h=bell_height * 0.7, \n                r1=bell_diameter/2 + wall_thickness, \n                r2=bell_diameter/2 * 1.2 + wall_thickness, \n                $fn=100);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            cylinder(h=bell_height * 0.7 - wall_thickness, \n                    r1=bell_diameter/2, \n                    r2=bell_diameter/2 * 1.2, \n                    $fn=100);\n        \n        // Bottom opening\n        translate([0, 0, -0.1])\n            cylinder(h=wall_thickness + 0.2, \n                    r=bell_diameter/2 * 1.2 + 1, \n                    $fn=100);\n    }\n}\n\nmodule bell_top() {\n    // Crown/top cap\n    translate([0, 0, bell_height * 0.7])\n        difference() {\n            cylinder(h=bell_height * 0.1, \n                    r=bell_diameter/2 * 0.6, \n                    $fn=50);\n            translate([0, 0, -0.1])\n                cylinder(h=bell_height * 0.1 + 0.2, \n                        r=bell_diameter/2 * 0.6 - wall_thickness, \n                        $fn=50);\n        }\n}\n\nmodule clapper_assembly() {\n    // Clapper mounting eye\n    translate([0, 0, bell_height * 0.9])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=8, r=4, $fn=25);\n                cylinder(h=10, r=2, $fn=25);\n            }\n    \n    // Clapper ball\n    translate([0, 0, bell_height * 0.3])\n        sphere(r=6, $fn=30);\n    \n    // Clapper rod\n    translate([0, 0, bell_height * 0.6])\n        cylinder(h=bell_height * 0.3, r=1.5, $fn=12);\n}\n\nmodule decorative_band() {\n    // Middle decorative band\n    translate([0, 0, bell_height * 0.45])\n        difference() {\n            cylinder(h=wall_thickness * 2, \n                    r=bell_diameter/2 * 1.15 + wall_thickness, \n                    $fn=100);\n            cylinder(h=wall_thickness * 2 + 0.2, \n                    r=bell_diameter/2 * 1.15, \n                    $fn=100);\n        }\n}\n\nmodule sound_ring() {\n    // Sound ring around bell lip\n    translate([0, 0, 0.1])\n        difference() {\n            cylinder(h=wall_thickness, \n                    r=bell_diameter/2 * 1.25, \n                    $fn=100);\n            cylinder(h=wall_thickness + 0.2, \n                    r=bell_diameter/2 * 1.2, \n                    $fn=100);\n        }\n}\n\n// Assemble the bell\nunion() {\n    bell_body();\n    bell_top();\n    decorative_band();\n    sound_ring();\n    clapper_assembly();\n}",
    "renders": true
  },
  {
    "musical_instrument": "bells",
    "openscad_code": "// Realistic medium-complexity OpenSCAD bell set\n// Two bells on a simple yoke, printable as one part\n// Total height ~65 mm, footprint ~60 mm\n\n$fn = 36;\n\n// Wall thickness for printing\nwall = 1.5;\n\n// Bell module\nmodule bell(height, radius, lip_thick, lip_r_factor) {\n    // Main bell body\n    difference() {\n        // Outer dome\n        rotate([0, 180, 0]) \n            cylinder(h = height, r1 = radius, r2 = radius * 0.3, center = false);\n        \n        // Inner cavity\n        translate([0, 0, -wall]) \n            rotate([0, 180, 0]) \n                cylinder(h = height - wall, r1 = radius - wall, r2 = (radius - wall) * 0.3, center = false);\n        \n        // Remove bottom ring to open cavity\n        translate([0, 0, -wall - 0.1]) \n            cylinder(h = wall + 0.2, r = radius - wall, center = false);\n    }\n    \n    // Reinforcement ring at top\n    translate([0, 0, 0]) \n        cylinder(h = wall * 2, r = radius * 0.3 + wall, center = true);\n    \n    // Bell lip flare\n    difference() {\n        translate([0, 0, -height]) \n            cylinder(h = lip_thick, r1 = radius, r2 = radius * lip_r_factor);\n        \n        translate([0, 0, -height - 0.1]) \n            cylinder(h = lip_thick + 0.2, r1 = radius - wall, r2 = radius * lip_r_factor - wall);\n    }\n    \n    // Clapper hole (vertical)\n    translate([0, 0, -height * 0.6]) \n        rotate([0, 180, 0]) \n            cylinder(h = height * 0.7, r = 1.2, center = false);\n}\n\n// Yoke beam module\nmodule yoke_beam(len, thick, h) {\n    difference() {\n        // Main beam\n        cube([len, thick, h], center = true);\n        \n        // Groove for bells\n        for (x = [-len/4, len/4])\n            translate([x, 0, 0])\n                cube([thick + 0.2, thick + 0.2, h + 0.2], center = true);\n    }\n    \n    // End caps\n    for (x = [-len/2 + thick/2, len/2 - thick/2])\n        translate([x, 0, 0])\n            cylinder(h = thick, r = thick/2, center = true);\n}\n\n// Assembly\ntranslate([0, 0, 2]) {\n    // Yoke\n    yoke_beam(len = 60, thick = 6, h = 8);\n    \n    // Bell 1 (left)\n    translate([-22, 0, 0]) {\n        rotate([0, 90, 0])\n            bell(height = 35, radius = 15, lip_thick = 4, lip_r_factor = 1.15);\n    }\n    \n    // Bell 2 (right)\n    translate([22, 0, 0]) {\n        rotate([0, 90, 0])\n            bell(height = 30, radius = 12, lip_thick = 3.5, lip_r_factor = 1.15);\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "chimes",
    "openscad_code": "// Wind Chimes - Realistic Style, Medium Complexity\n// Designed for 3D printing with no supports needed\n\n// Parameters\n$fn = 32;\ntube_d = 8;\ntube_wall = 1.5;\ntube_lengths = [40, 45, 50, 55, 60];\nwind_catcher_d = 25;\nwind_catcher_h = 3;\ntop_d = 40;\ntop_h = 5;\nstring_d = 1;\nhook_r = 5;\nhook_thick = 2;\n\n// Top cap with hanging hook\nmodule top_cap() {\n    difference() {\n        // Main cap\n        cylinder(d=top_d, h=top_h);\n        \n        // String holes\n        for(i=[0:4]) {\n            rotate([0, 0, 72 * i]) \n                translate([top_d/2 - 8, 0, -1]) \n                    cylinder(d=string_d + 1, h=top_h + 2);\n        }\n        \n        // Center hole for main string\n        translate([0, 0, -1]) \n            cylinder(d=3, h=top_h + 2);\n    }\n    \n    // Hanging hook\n    rotate([0, 90, 0]) \n        translate([0, 0, -top_d/2]) {\n            difference() {\n                torus(hook_r, hook_thick);\n                translate([hook_r, 0, -hook_thick]) \n                    cube([hook_r + 2, hook_thick * 2, hook_thick * 2], center=true);\n            }\n        }\n}\n\n// Helper for torus\nmodule torus(r, thick) {\n    rotate_extrude() \n        translate([r, 0, 0]) \n            circle(thick);\n}\n\n// Chime tube with beveled edges\nmodule chime_tube(length, index) {\n    // Calculate angle for hanging\n    angle = (index - 2) * 10;\n    \n    rotate([angle, 0, 0]) \n        translate([0, 0, -length/2]) {\n            difference() {\n                // Main tube\n                cylinder(d=tube_d, h=length);\n                \n                // Hollow center\n                cylinder(d=tube_d - tube_wall*2, h=length + 2, center=true);\n            }\n            \n            // Beveled top edge\n            translate([0, 0, length/2]) \n                cylinder(d1=tube_d, d2=tube_d - 2, h=2);\n            \n            // Beveled bottom edge\n            translate([0, 0, -length/2]) \n                cylinder(d1=tube_d - 2, d2=tube_d, h=2);\n            \n            // String hole\n            translate([0, 0, length - 3]) \n                rotate([90, 0, 0]) \n                    cylinder(d=string_d + 1, h=tube_d + 2, center=true);\n        }\n}\n\n// Wind catcher disk\nmodule wind_catcher() {\n    difference() {\n        cylinder(d=wind_catcher_d, h=wind_catcher_h);\n        \n        // String holes\n        for(i=[0:3]) {\n            rotate([0, 0, 90 * i]) \n                translate([wind_catcher_d/2 - 5, 0, -1]) \n                    cylinder(d=string_d + 1, h=wind_catcher_h + 2);\n        }\n        \n        // Decorative pattern\n        for(i=[0:8]) {\n            rotate([0, 0, 45 * i]) \n                translate([wind_catcher_d/2 - 8, 0, -1]) \n                    cylinder(d=3, h=wind_catcher_h + 2);\n        }\n    }\n}\n\n// String connector\nmodule string(length) {\n    cylinder(d=string_d, h=length, center=true);\n}\n\n// Assembly\ntranslate([0, 0, 80]) {\n    // Top cap\n    top_cap();\n    \n    // Chime tubes\n    for(i=[0:4]) {\n        angle = 72 * i;\n        distance = top_d/2 - 8;\n        \n        rotate([0, 0, angle]) \n            translate([distance, 0, -tube_lengths[i]/2 - 10]) \n                chime_tube(tube_lengths[i], i);\n    }\n    \n    // Central string to wind catcher\n    translate([0, 0, -max(tube_lengths) - 15]) \n        wind_catcher();\n}",
    "renders": true
  },
  {
    "musical_instrument": "carillon",
    "openscad_code": "// 3D Printable Carillon – Realistic / Medium Complexity\n// Overall size ≈ 60 mm tall, 50 mm wide, 40 mm deep\n// All walls ≥ 1 mm, no severe overhangs\n\n// ---------- Parameters ----------\n$fn = 32;\nwall = 1.2;        // wall thickness for 3D printing\nbell_r = 4;        // radius of each bell\nbell_h = 8;        // height of each bell\nnum_bells = 8;     // typical small carillon\n\n// ---------- Main assembly ----------\ncarillon();\n\nmodule carillon() {\n    // Base frame\n    base();\n\n    // Tower shell\n    tower();\n\n    // Roof\n    roof();\n\n    // Bells and clappers\n    for(i = [0:num_bells-1]) {\n        translate([ -22 + i*6.3 , 0, wall ]) {\n            bell();\n            clapper();\n        }\n    }\n\n    // Keyboard deck\n    keyboard_deck();\n}\n\n// ---------- Base ----------\nmodule base() {\n    difference() {\n        cube([52, 40, wall]);\n        translate([wall, wall, -1])\n            cube([52-2*wall, 40-2*wall, wall+2]);\n    }\n}\n\n// ---------- Tower shell ----------\nmodule tower() {\n    difference() {\n        translate([0, 0, wall])\n            cube([50, 38, 40]);            // outer shell\n        translate([wall, wall, wall])\n            cube([50-2*wall, 38-2*wall, 40]); // hollow inside\n    }\n}\n\n// ---------- Roof ----------\nmodule roof() {\n    translate([25, 19, 40+wall])\n        rotate([0,0,45])\n        scale([1, 0.7, 1])\n        cylinder(h1=12, h2=0, r1=32, r2=0); // pyramid roof\n}\n\n// ---------- Bell ----------\nmodule bell() {\n    difference() {\n        cylinder(h = bell_h, r1 = bell_r, r2 = bell_r*0.4);\n        translate([0, 0, -1])\n            cylinder(h = bell_h+2, r1 = bell_r-wall, r2 = bell_r*0.4-wall);\n    }\n}\n\n// ---------- Clapper ----------\nmodule clapper() {\n    translate([0, 0, -bell_h*0.4])\n        sphere(d = wall*1.5);\n}\n\n// ---------- Keyboard deck ----------\nmodule keyboard_deck() {\n    translate([0, 0, wall+40+12])\n        difference() {\n            cube([40, 25, wall]);\n            translate([wall, wall, -1])\n                cube([40-2*wall, 25-2*wall, wall+2]);\n        }\n}",
    "renders": true
  },
  {
    "musical_instrument": "celesta",
    "openscad_code": "// Celesta - realistic style, medium complexity\n// Total height ~60mm, width ~50mm, depth ~40mm\n\n// Parameters\nkey_width = 4;\nkey_length = 20;\nkey_height = 2;\nnum_white_keys = 25;\nnum_black_keys = 15;\ncase_thickness = 2;\nlid_thickness = 1.5;\n\n// Main assembly\nunion() {\n    // Wooden case\n    case();\n    \n    // Keyboard\n    translate([0, 0, case_thickness])\n        keyboard();\n    \n    // Lid\n    translate([0, -10, case_thickness + key_height + 10])\n        rotate([60, 0, 0])\n            lid();\n    \n    // Resonator box\n    translate([0, 25, case_thickness])\n        resonator_box();\n}\n\nmodule case() {\n    // Bottom\n    cube([48, 38, case_thickness], center = true);\n    \n    // Sides\n    translate([0, 19, case_thickness/2 + 19/2])\n        cube([48, case_thickness, 19], center = true);\n    translate([0, -19, case_thickness/2 + 19/2])\n        cube([48, case_thickness, 19], center = true);\n    translate([24, 0, case_thickness/2 + 38/2])\n        cube([case_thickness, 38, 38], center = true);\n    translate([-24, 0, case_thickness/2 + 38/2])\n        cube([case_thickness, 38, 38], center = true);\n}\n\nmodule keyboard() {\n    // White keys\n    for(i = [0:num_white_keys-1]) {\n        translate([(i - num_white_keys/2 + 0.5) * key_width, 0, key_height/2])\n            cube([key_width * 0.9, key_length, key_height], center = true);\n    }\n    \n    // Black keys\n    black_key_positions = [1,2,4,5,6,8,9,11,12,13,15,16,18,19,20];\n    for(i = black_key_positions) {\n        translate([(i - num_white_keys/2 + 0.5) * key_width, 5, key_height + 1.5])\n            cube([key_width * 0.6, key_length * 0.7, key_height * 1.5], center = true);\n    }\n}\n\nmodule lid() {\n    // Main lid panel\n    cube([52, 42, lid_thickness], center = true);\n    \n    // Hinge detail\n    translate([0, -21, 0])\n        cube([52, 2, 3], center = true);\n    \n    // Prop stick\n    translate([20, 10, -lid_thickness/2 - 10])\n        cube([2, 2, 20], center = true);\n}\n\nmodule resonator_box() {\n    // Main box\n    cube([40, 30, 15], center = true);\n    \n    // Decorative top panel\n    translate([0, 0, 7.5 + 1])\n        cube([35, 25, 2], center = true);\n    \n    // Sound holes\n    for(x = [-15:5:15]) {\n        for(y = [-10:5:10]) {\n            translate([x, y, 7.5 + 2])\n                cylinder(h = 3, r = 1.5, center = true, $fn = 16);\n        }\n    }\n    \n    // Pedal\n    translate([0, 25, -5])\n        rotate([0, 90, 0])\n            cylinder(h = 20, r = 2, center = true, $fn = 16);\n}",
    "renders": true
  },
  {
    "musical_instrument": "lithophone",
    "openscad_code": "// Lithophone - 8 tuned stone bars on a simple frame\n// Realistic style, medium complexity\n// Designed for FDM printing, no supports needed\n\n$fn=50;\n\n// Overall scale factor\nscale_factor = 1.0;\n\n// Bar dimensions\nbar_width = 4 * scale_factor;\nbar_height = 3 * scale_factor;\nbar_lengths = [25, 23.5, 22, 20.5, 19, 17.5, 16, 14.5]; // Tuned lengths\nbar_spacing = 6 * scale_factor;\n\n// Frame dimensions\nframe_thickness = 3 * scale_factor;\nframe_height = 8 * scale_factor;\nframe_width = bar_lengths[0] + 20 * scale_factor;\nframe_depth = (len(bar_lengths) - 1) * bar_spacing + 2 * frame_thickness;\n\n// Support posts\npost_width = 5 * scale_factor;\npost_height = 6 * scale_factor;\n\n// Create complete lithophone\nunion() {\n    // Base frame\n    frame();\n    \n    // Bars\n    for(i = [0 : len(bar_lengths) - 1]) {\n        translate([0, (i - (len(bar_lengths) - 1)/2) * bar_spacing, post_height + bar_height/2]) {\n            stone_bar(bar_lengths[i]);\n        }\n    }\n}\n\n// Frame with support posts\nmodule frame() {\n    // Bottom base\n    translate([0, 0, -frame_height/2]) {\n        cube([frame_width, frame_depth, frame_thickness], center=true);\n    }\n    \n    // Side rails\n    translate([0, -frame_depth/2 + frame_thickness/2, 0]) {\n        cube([frame_width, frame_thickness, frame_height], center=true);\n    }\n    translate([0, frame_depth/2 - frame_thickness/2, 0]) {\n        cube([frame_width, frame_thickness, frame_height], center=true);\n    }\n    \n    // End rails\n    translate([-frame_width/2 + frame_thickness/2, 0, 0]) {\n        cube([frame_thickness, frame_depth, frame_height], center=true);\n    }\n    translate([frame_width/2 - frame_thickness/2, 0, 0]) {\n        cube([frame_thickness, frame_depth, frame_height], center=true);\n    }\n    \n    // Support posts for each bar\n    for(i = [0 : len(bar_lengths) - 1]) {\n        y_pos = (i - (len(bar_lengths) - 1)/2) * bar_spacing;\n        \n        // Left support post\n        translate([-bar_lengths[i]/4, y_pos, 0]) {\n            cube([post_width, post_width, post_height], center=true);\n        }\n        \n        // Right support post\n        translate([bar_lengths[i]/4, y_pos, 0]) {\n            cube([post_width, post_width, post_height], center=true);\n        }\n    }\n}\n\n// Individual stone bar with rounded edges\nmodule stone_bar(length) {\n    // Main bar body\n    difference() {\n        // Outer rounded bar\n        hull() {\n            translate([-length/2, -bar_width/2, -bar_height/2]) {\n                sphere(r=1.5 * scale_factor);\n            }\n            translate([-length/2, bar_width/2, -bar_height/2]) {\n                sphere(r=1.5 * scale_factor);\n            }\n            translate([-length/2, -bar_width/2, bar_height/2]) {\n                sphere(r=1.5 * scale_factor);\n            }\n            translate([-length/2, bar_width/2, bar_height/2]) {\n                sphere(r=1.5 * scale_factor);\n            }\n            \n            translate([length/2, -bar_width/2, -bar_height/2]) {\n                sphere(r=1.5 * scale_factor);\n            }\n            translate([length/2, bar_width/2, -bar_height/2]) {\n                sphere(r=1.5 * scale_factor);\n            }\n            translate([length/2, -bar_width/2, bar_height/2]) {\n                sphere(r=1.5 * scale_factor);\n            }\n            translate([length/2, bar_width/2, bar_height/2]) {\n                sphere(r=1.5 * scale_factor);\n            }\n        }\n        \n        // Suspension holes\n        translate([-length/2 + 2 * scale_factor, 0, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=bar_width + 2, r=1 * scale_factor, center=true);\n            }\n        }\n        translate([length/2 - 2 * scale_factor, 0, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=bar_width + 2, r=1 * scale_factor, center=true);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "frame",
    "openscad_code": "// Realistic medium-complexity picture frame\n// External dimensions: 80 x 60 x 10 mm\n// Inner picture area: 50 x 40 mm\n// Wall thickness: 2 mm everywhere for printability\n\n$fn = 36;\n\n// Main module\nmodule frame() {\n    // Overall frame body\n    difference() {\n        // Outer solid block\n        cube([80, 60, 10], center=true);\n        \n        // Inner cutout\n        translate([0, 0, -1])\n            cube([54, 44, 12], center=true);\n    }\n    \n    // Front bevel detail\n    difference() {\n        translate([0, 0, 4.9])\n            cube([78, 58, 1], center=true);\n        translate([0, 0, 4])\n            cube([76, 56, 2], center=true);\n    }\n    \n    // Back recess for picture/glass\n    difference() {\n        translate([0, 0, -4.9])\n            cube([52, 42, 1], center=true);\n        translate([0, 0, -5])\n            cube([50, 40, 2], center=true);\n    }\n    \n    // Stand on back\n    rotate([0, 110, 0])\n        translate([0, -25, 0])\n            cylinder(h=2, r1=12, r2=12);\n            \n    // Keyhole wall mount\n    translate([0, 25, -4])\n        difference() {\n            cube([20, 8, 2], center=true);\n            translate([0, 0, -1])\n                cylinder(h=4, r=3, center=true);\n            translate([0, -2, -1])\n                cube([6, 4, 4], center=true);\n        }\n    \n    // Decorative corner reinforcements\n    for(x = [-1, 1])\n        for(y = [-1, 1])\n            translate([x*37, y*27, 0])\n                corner_detail();\n}\n\nmodule corner_detail() {\n    difference() {\n        // Corner brace\n        rotate([0, 0, 45])\n            translate([0, 0, 0])\n                cube([6, 6, 10], center=true);\n                \n        // Remove inner part\n        rotate([0, 0, 45])\n            translate([0, 0, -1])\n                cube([4, 4, 12], center=true);\n    }\n    \n    // Small decorative sphere\n    translate([3, 3, 4])\n        sphere(r=1.5);\n    translate([-3, 3, 4])\n        sphere(r=1.5);\n    translate([3, -3, 4])\n        sphere(r=1.5);\n    translate([-3, -3, 4])\n        sphere(r=1.5);\n}\n\n// Render the frame\nframe();",
    "renders": true
  },
  {
    "musical_instrument": "bodhrán",
    "openscad_code": "// Bodhrán - Realistic medium detail\n// Frame drum with goatskin head and crossbars\n\n$fn = 64; // Smooth curves\nwall = 1.5; // Wall thickness for printing\n\nmodule drum_frame() {\n    // Main wooden frame\n    difference() {\n        // Outer cylinder\n        cylinder(h = 20, r = 40, center = true);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h = 22, r = 38.5, center = true);\n    }\n    \n    // Rounded edges top and bottom\n    translate([0, 0, 10])\n        scale([1, 1, 0.3])\n            sphere(r = 40);\n    translate([0, 0, -10])\n        scale([1, 1, 0.3])\n            sphere(r = 40);\n}\n\nmodule drum_head() {\n    // Goatskin membrane\n    translate([0, 0, 10.5])\n        cylinder(h = 0.5, r = 38.5, center = true);\n    \n    // Edge tacking detail\n    for(i = [0:30]) {\n        angle = i * 360 / 30;\n        translate([39 * cos(angle), 39 * sin(angle), 10.5])\n            cylinder(h = 0.7, r = 1.2, center = true);\n    }\n}\n\nmodule crossbars() {\n    // Two perpendicular wooden crossbars inside\n    // First bar\n    translate([0, 0, -5])\n        rotate([90, 0, 0])\n            cylinder(h = 70, r = 2.5, center = true);\n    \n    // Second bar\n    translate([0, 0, -5])\n        rotate([0, 90, 0])\n            cylinder(h = 70, r = 2.5, center = true);\n    \n    // Center joint\n    translate([0, 0, -5])\n        sphere(r = 3);\n}\n\nmodule tuning_system() {\n    // Simple tuning screws around edge\n    for(i = [0:11]) {\n        angle = i * 360 / 12;\n        // Screw base\n        translate([42 * cos(angle), 42 * sin(angle), 5])\n            cylinder(h = 3, r = 2, center = true);\n        \n        // Screw head\n        translate([42 * cos(angle), 42 * sin(angle), 6.6])\n            scale([1, 1, 0.3])\n                sphere(r = 2);\n    }\n}\n\n// Assembly\nunion() {\n    drum_frame();\n    drum_head();\n    crossbars();\n    tuning_system();\n}",
    "renders": true
  },
  {
    "musical_instrument": "tabor",
    "openscad_code": "// Tabor - small Renaissance side drum\n// Overall height ≈ 55 mm, drum diameter ≈ 45 mm\n\n$fn = 36;\n\n// Main body\nmodule tabor() {\n    difference() {\n        // Wooden shell\n        union() {\n            // Cylindrical shell\n            cylinder(h = 40, d = 45, center = true);\n\n            // Reinforcing rings (top & bottom hoops)\n            translate([0, 0, 20]) \n                cylinder(h = 3, d = 47, center = true);\n            translate([0, 0, -20]) \n                cylinder(h = 3, d = 47, center = true);\n        }\n\n        // Hollow inside\n        cylinder(h = 42, d = 41, center = true);\n    }\n\n    // Drum heads (tensioned skins)\n    translate([0, 0, 21.5]) \n        cylinder(h = 1, d = 44);\n    translate([0, 0, -21.5]) \n        cylinder(h = 1, d = 44);\n\n    // Snare mechanism\n    for (i = [-1, 1]) {\n        translate([0, 22 * i, 8]) \n            rotate([90, 0, 0]) \n                cylinder(h = 16, d = 1.5); // Snare cord\n    }\n\n    // Tensioning ropes\n    rope_height = 20;\n    for (a = [0:30:330]) {\n        translate([0, 0, rope_height]) \n            rotate([0, 0, a]) \n                translate([22, 0, 0]) \n                    cylinder(h = 40, d = 1.5); // Vertical rope\n\n        translate([0, 0, -rope_height]) \n            rotate([0, 0, a]) \n                translate([22, 0, 0]) \n                    cylinder(h = 40, d = 1.5); // Lower rope\n    }\n\n    // Carrying strap loops\n    translate([20, 0, 0]) \n        rotate([90, 0, 0]) \n            difference() {\n                cylinder(h = 8, d = 4); // Loop body\n                cylinder(h = 9, d = 2); // Hollow\n            }\n\n    translate([-20, 0, 0]) \n        rotate([90, 0, 0]) \n            difference() {\n                cylinder(h = 8, d = 4);\n                cylinder(h = 9, d = 2);\n            }\n}\n\ntabor();",
    "renders": true
  },
  {
    "musical_instrument": "snare",
    "openscad_code": "// Realistic 3D printable snare drum (medium complexity)\n\n// General parameters\nsnare_diameter = 60;\nsnare_depth = 25;\nwall_thickness = 2;\nhoop_thickness = 3;\nlug_count = 8;\n\n// Shell module\nmodule shell() {\n    difference() {\n        // Outer shell\n        cylinder(h = snare_depth, d = snare_diameter, $fn = 64);\n        // Inner cavity\n        translate([0, 0, -0.1])\n            cylinder(h = snare_depth + 0.2, d = snare_diameter - 2 * wall_thickness, $fn = 64);\n    }\n}\n\n// Bearing edge (45 degree chamfer)\nmodule bearing_edge() {\n    difference() {\n        cylinder(h = wall_thickness, d = snare_diameter, $fn = 64);\n        // Top 45 degree chamfer\n        translate([0, 0, wall_thickness])\n            cylinder(h1 = wall_thickness, h2 = 0, d1 = snare_diameter, d2 = snare_diameter - 2 * wall_thickness, $fn = 64);\n    }\n}\n\n// Drum hoop\nmodule hoop() {\n    difference() {\n        // Outer ring\n        cylinder(h = hoop_thickness, d = snare_diameter + 10, $fn = 64);\n        // Inner hole\n        translate([0, 0, -0.1])\n            cylinder(h = hoop_thickness + 0.2, d = snare_diameter + 2, $fn = 64);\n    }\n}\n\n// Tension rod\nmodule tension_rod() {\n    cylinder(h = 25, d = 2, $fn = 12);\n    // Threaded end\n    translate([0, 0, 25])\n        cylinder(h = 8, d = 1.8, $fn = 8);\n}\n\n// Lug body\nmodule lug() {\n    difference() {\n        // Main lug body\n        translate([-4, 0, 0])\n            cube([8, 12, 20]);\n        // Screw hole\n        translate([0, 6, 10])\n            rotate([90, 0, 0])\n                cylinder(h = 12, d = 2.5, $fn = 12);\n    }\n    // Base plate\n    translate([-6, -2, 0])\n        cube([12, 16, 2]);\n}\n\n// Snare wire\nmodule snare_wire() {\n    for (i = [-20:5:20]) {\n        translate([i, 0, -1])\n            cube([0.5, snare_diameter - 10, 0.5]);\n    }\n}\n\n// Snare strainer (simple lever)\nmodule snare_strainer() {\n    // Base\n    translate([-5, 0, 0])\n        cube([10, 8, 4]);\n    // Lever\n    translate([0, 4, 4])\n        rotate([0, -30, 0])\n            cube([20, 4, 2]);\n}\n\n// Drum head (mesh)\nmodule drum_head() {\n    difference() {\n        cylinder(h = 0.5, d = snare_diameter - 2, $fn = 64);\n        // Small holes for texture\n        for (a = [0:30:359]) {\n            for (r = [10:10:25]) {\n                translate([r * cos(a), r * sin(a), -0.1])\n                    cylinder(h = 0.7, d = 1, $fn = 8);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Shell\n    shell();\n    \n    // Top bearing edge\n    translate([0, 0, snare_depth])\n        bearing_edge();\n    \n    // Bottom bearing edge\n    translate([0, 0, 0])\n        rotate([180, 0, 0])\n            bearing_edge();\n    \n    // Top hoop\n    translate([0, 0, snare_depth + wall_thickness])\n        hoop();\n    \n    // Bottom hoop\n    translate([0, 0, -hoop_thickness])\n        hoop();\n    \n    // Lugs around shell\n    for (i = [0: lug_count-1]) {\n        angle = i * 360 / lug_count;\n        // Top tension rod\n        translate([(snare_diameter/2 + 8) * cos(angle), \n                  (snare_diameter/2 + 8) * sin(angle), \n                  snare_depth + wall_thickness + hoop_thickness])\n            rotate([0, 0, angle])\n                tension_rod();\n        \n        // Bottom tension rod\n        translate([(snare_diameter/2 + 8) * cos(angle), \n                  (snare_diameter/2 + 8) * sin(angle), \n                  -hoop_thickness])\n            rotate([180, 0, angle])\n                tension_rod();\n        \n        // Lug\n        translate([(snare_diameter/2 + 2) * cos(angle), \n                  (snare_diameter/2 + 2) * sin(angle), \n                  snare_depth/2 - 10])\n            rotate([0, 0, angle + 90])\n                lug();\n    }\n    \n    // Top drum head\n    translate([0, 0, snare_depth + wall_thickness + hoop_thickness])\n        drum_head();\n    \n    // Bottom drum head\n    translate([0, 0, -hoop_thickness - 0.5])\n        drum_head();\n    \n    // Snare wires on bottom\n    translate([0, 0, -hoop_thickness - 1])\n        snare_wire();\n    \n    // Snare strainer\n    translate([snare_diameter/2 + 10, 0, snare_depth/2 - 2])\n        snare_strainer();\n}",
    "renders": true
  },
  {
    "musical_instrument": "tom",
    "openscad_code": "// Realistic tom drum optimized for 3D printing\n// Shell diameter 80 mm, height 60 mm\n$fa = 2;\n$fs = 0.5;\n\n// Main parameters\nshell_d = 80;\nshell_h = 60;\nshell_t = 2.5;\nhoop_d = 84;\nhoop_t = 2;\nlug_count = 6;\nlug_w = 8;\nlug_h = 12;\nhead_thick = 0.8;\n\nmodule shell() {\n    difference() {\n        // Outer shell\n        cylinder(d = shell_d, h = shell_h, center = true);\n        // Hollow interior\n        cylinder(d = shell_d - 2 * shell_t, h = shell_h + 1, center = true);\n    }\n}\n\nmodule bearing_edge() {\n    // Top bearing edge 45° chamfer\n    translate([0, 0, shell_h/2 - 2]) {\n        rotate_extrude() {\n            polygon(points = [\n                [shell_d/2 - shell_t, 0],\n                [shell_d/2, 0],\n                [shell_d/2 - shell_t, 2]\n            ]);\n        }\n    }\n    // Bottom bearing edge 45° chamfer\n    mirror([0, 0, 1]) {\n        translate([0, 0, shell_h/2 - 2]) {\n            rotate_extrude() {\n                polygon(points = [\n                    [shell_d/2 - shell_t, 0],\n                    [shell_d/2, 0],\n                    [shell_d/2 - shell_t, 2]\n                ]);\n            }\n        }\n    }\n}\n\nmodule hoop() {\n    // Top hoop\n    translate([0, 0, shell_h/2 + head_thick]) {\n        difference() {\n            cylinder(d = hoop_d, h = hoop_t, center = true);\n            cylinder(d = shell_d - 1, h = hoop_t + 1, center = true);\n        }\n    }\n    // Bottom hoop\n    translate([0, 0, -shell_h/2 - head_thick]) {\n        difference() {\n            cylinder(d = hoop_d, h = hoop_t, center = true);\n            cylinder(d = shell_d - 1, h = hoop_t + 1, center = true);\n        }\n    }\n}\n\nmodule lug() {\n    // Main lug body\n    difference() {\n        cube([lug_w, lug_h, 6], center = true);\n        // Tension rod hole\n        rotate([0, 90, 0])\n            cylinder(d = 2.5, h = lug_w + 1, center = true);\n    }\n    // Lug base\n    translate([0, lug_h/2 + 2, 0])\n        cube([lug_w, 4, 4], center = true);\n    translate([0, -lug_h/2 - 2, 0])\n        cube([lug_w, 4, 4], center = true);\n}\n\nmodule lugs() {\n    // Generate lugs around the shell\n    for (i = [0 : lug_count - 1]) {\n        rotate([0, 0, i * 360 / lug_count]) {\n            translate([shell_d/2 + lug_w/2, 0, shell_h/2 - 6]) {\n                lug();\n            }\n            translate([shell_d/2 + lug_w/2, 0, -shell_h/2 + 6]) {\n                lug();\n            }\n        }\n    }\n}\n\nmodule tension_rod() {\n    // Simplified tension rod\n    rotate([0, 90, 0])\n        cylinder(d = 2, h = 15, center = true);\n}\n\nmodule tension_rods() {\n    // Generate tension rods\n    for (i = [0 : lug_count - 1]) {\n        rotate([0, 0, i * 360 / lug_count]) {\n            translate([shell_d/2 + lug_w + 5, 0, shell_h/2 + hoop_t/2]) {\n                tension_rod();\n            }\n            translate([shell_d/2 + lug_w + 5, 0, -shell_h/2 - hoop_t/2]) {\n                tension_rod();\n            }\n        }\n    }\n}\n\nmodule drum_head() {\n    // Top drum head\n    translate([0, 0, shell_h/2 + head_thick/2]) {\n        cylinder(d = shell_d - 2, h = head_thick, center = true);\n    }\n    // Bottom drum head\n    translate([0, 0, -shell_h/2 - head_thick/2]) {\n        cylinder(d = shell_d - 2, h = head_thick, center = true);\n    }\n}\n\nmodule air_vent() {\n    // Air vent hole\n    rotate([0, 90, 0])\n        translate([shell_d/2, 0, 0])\n            cylinder(d = 3, h = shell_t + 1, center = true);\n}\n\n// Assemble the drum\nunion() {\n    shell();\n    bearing_edge();\n    hoop();\n    lugs();\n    tension_rods();\n    drum_head();\n    air_vent();\n}",
    "renders": true
  },
  {
    "musical_instrument": "floor",
    "openscad_code": "// Realistic 3D-printable floor tile (medium detail)\n// 80 mm x 80 mm x 6 mm overall, printable without supports\n\n// Base floor slab thickness\nfloor_thickness = 2.5;\n\n// Overall tile size\ntile_size = 80;\n\n// Plank dimensions\nplank_width = 12;\nplank_length = 80;\nplank_thick = 3;\n\n// Gap between planks\ngap = 0.4;\n\n// Calculate how many planks fit\nnum_planks = floor(tile_size / (plank_width + gap));\n\nmodule plank(x, y, rot = 0) {\n    difference() {\n        // Main plank body with rounded top edges\n        translate([x, y, floor_thickness])\n        rotate([0, 0, rot])\n        minkowski() {\n            cube([plank_length, plank_width, plank_thick]);\n            cylinder(h = 0.2, r = 0.6, $fn = 8);\n        }\n        \n        // Create beveled edges on ends\n        translate([x - 0.5, y + 0.5, floor_thickness])\n        rotate([0, 0, rot])\n        cube([plank_length + 1, plank_width - 1, 2]);\n        \n        translate([x + plank_length - 0.5, y + 0.5, floor_thickness])\n        rotate([0, 0, rot])\n        cube([plank_length + 1, plank_width - 1, 2]);\n    }\n    \n    // Add subtle wood grain texture\n    for (i = [0:2:plank_length - 2]) {\n        translate([x + i, y + 1, floor_thickness + plank_thick - 0.1])\n        rotate([0, 0, rot])\n        cube([0.3, plank_width - 2, 0.1]);\n    }\n}\n\n// Nail holes\nmodule nail_hole(x, y) {\n    translate([x, y, floor_thickness + plank_thick])\n    cylinder(h = 1, r = 0.5, $fn = 12);\n}\n\n// Base concrete layer\ndifference() {\n    // Main base\n    cube([tile_size, tile_size, floor_thickness]);\n    \n    // Add drainage slope channels (subtle)\n    for (i = [0:gap*2:tile_size]) {\n        translate([i, 0, floor_thickness - 0.3])\n        cube([gap/2, tile_size, 0.3]);\n    }\n}\n\n// Lay planks with alternating pattern\nfor (row = [0:num_planks - 1]) {\n    y_pos = row * (plank_width + gap) + gap;\n    \n    // Every other row offset for realistic stagger\n    offset = (row % 2) ? 0 : plank_length / 3;\n    \n    // Main planks\n    plank(offset, y_pos);\n    \n    // Add nails at ends\n    nail_hole(offset + 2, y_pos + 1);\n    nail_hole(offset + plank_length - 2, y_pos + 1);\n    nail_hole(offset + 2, y_pos + plank_width - 1);\n    nail_hole(offset + plank_length - 2, y_pos + plank_width - 1);\n}\n\n// Add expansion joint around perimeter\ntranslate([-1, -1, 0])\ncube([tile_size + 2, 1, floor_thickness + 0.5]);\n\ntranslate([-1, tile_size, 0])\ncube([tile_size + 2, 1, floor_thickness + 0.5]);\n\ntranslate([-1, -1, 0])\ncube([1, tile_size + 2, floor_thickness + 0.5]);\n\ntranslate([tile_size, -1, 0])\ncube([1, tile_size + 2, floor_thickness + 0.5]);",
    "renders": true
  },
  {
    "musical_instrument": "kick",
    "openscad_code": "// Realistic 3D-printable \"kick\" (soccer ball on a tee/stand)\n// Overall size ≈ 60 mm tall\n\n// --- Parameters -------------------------------------------------\n$fn = 36;                 // Smooth curves\nball_d      = 22;         // Soccer ball diameter\npanel_depth = 1.2;        // Thickness of pentagon/hexagon panels\nwall        = 1.5;        // Minimum printable wall thickness\npost_h      = 18;         // Tee post height\nbase_d      = 30;         // Base diameter\nbase_h      = 4;          // Base thickness\n\n// --- Soccer Ball with Panels -----------------------------------\nmodule soccer_panel(type, rot) {\n    // type 0 = pentagon, 1 = hexagon\n    sides = type ? 6 : 5;\n    angle = 360 / sides;\n    radius = type ? ball_d/2 * 0.42 : ball_d/2 * 0.38;\n    linear_extrude(height = panel_depth, convexity = 10)\n        rotate([0, 0, rot])\n            circle(r = radius, $fn = sides);\n}\n\nmodule soccer_ball() {\n    difference() {\n        sphere(d = ball_d);\n        // Hollow inside for material saving\n        sphere(d = ball_d - 2*wall);\n    }\n\n    // White raised panels\n    color(\"white\")\n    union() {\n        // Pentagons\n        for (p = [0:11]) {\n            rotate([atan(sqrt(5)), 0, p*360/11])\n                translate([0, 0, ball_d/2]) soccer_panel(0, 0);\n        }\n        // Hexagons\n        for (h = [0:19]) {\n            rotate([atan(sqrt(2)), 0, h*360/19])\n                translate([0, 0, ball_d/2]) soccer_panel(1, 30);\n        }\n    }\n}\n\n// --- Tee / Kick Stand -----------------------------------------\nmodule tee() {\n    difference() {\n        // Base\n        cylinder(d = base_d, h = base_h, center = true);\n        cylinder(d = base_d - 2*wall, h = base_h + 0.1, center = true);\n    }\n\n    translate([0, 0, base_h/2])\n        // Post\n        cylinder(d1 = 8, d2 = 5, h = post_h);\n\n    // Cup for ball\n    translate([0, 0, base_h/2 + post_h])\n        difference() {\n            sphere(d = ball_d + 2);\n            sphere(d = ball_d);\n            translate([0, 0, -ball_d/2 - 1])\n                cube([ball_d*2, ball_d*2, ball_d], center = true);\n        }\n}\n\n// --- Assembly --------------------------------------------------\ntranslate([0, 0, base_h + post_h + ball_d/2 + 2])\n    soccer_ball();\ntee();",
    "renders": true
  },
  {
    "musical_instrument": "timbales",
    "openscad_code": "// Timbales - Realistic style, medium complexity\n// Shell thickness: 2mm, printable without supports\n\n// Parameters\nshell_thick = 2;\ndia_shell = 70;\nh_shell = 60;\ndia_rim = 73;\ndia_base = 40;\nh_base = 8;\ndia_stand = 20;\nh_stand = 25;\nn_lugs = 6;\nlug_w = 5;\nlug_h = 12;\nlug_t = 3;\nrim_h = 4;\n\n// Main shell\nmodule shell() {\n    difference() {\n        cylinder(h=h_shell, d=dia_shell, $fn=100);\n        translate([0,0,shell_thick])\n            cylinder(h=h_shell-shell_thick, d=dia_shell-2*shell_thick, $fn=100);\n    }\n}\n\n// Top rim\nmodule rim() {\n    difference() {\n        cylinder(h=rim_h, d=dia_rim, $fn=100);\n        translate([0,0,-0.1])\n            cylinder(h=rim_h+0.2, d=dia_shell+0.2, $fn=100);\n    }\n}\n\n// Base ring\nmodule base_ring() {\n    difference() {\n        cylinder(h=h_base, d=dia_base+4, $fn=60);\n        translate([0,0,-0.1])\n            cylinder(h=h_base+0.2, d=dia_base, $fn=60);\n    }\n}\n\n// Tuning lug\nmodule lug() {\n    difference() {\n        union() {\n            // Body\n            cube([lug_w, lug_t, lug_h], center=true);\n            // Top cylinder\n            translate([0,0,lug_h/2])\n                cylinder(h=lug_t, d=lug_w, $fn=20);\n            // Bottom cylinder\n            translate([0,0,-lug_h/2])\n                cylinder(h=lug_t, d=lug_w, $fn=20);\n        }\n        // Screw hole\n        translate([0,0,-lug_h/2-0.1])\n            cylinder(h=lug_h+0.2, d=2, $fn=20);\n    }\n}\n\n// Stand\nmodule stand() {\n    difference() {\n        // Post\n        cylinder(h=h_stand, d=dia_stand, $fn=40);\n        // Mount hole\n        translate([0,0,-0.1])\n            cylinder(h=h_stand+0.2, d=dia_stand/2, $fn=40);\n    }\n}\n\n// Assembly\nunion() {\n    // Shell\n    shell();\n    \n    // Rim on top\n    translate([0,0,h_shell])\n        rim();\n    \n    // Base ring\n    translate([0,0,0])\n        base_ring();\n    \n    // Stand\n    translate([0,0,-h_stand])\n        stand();\n    \n    // Tuning lugs around rim\n    for (i=[0:n_lugs-1]) {\n        rotate([0,0,i*360/n_lugs])\n            translate([(dia_rim+lug_w)/2, 0, h_shell+rim_h/2])\n                rotate([90,0,0])\n                    lug();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "octoban",
    "openscad_code": "// Octoban - 8-sided drum stick holder\n// Designed for 3D printing with proper wall thickness and no overhangs\n// Overall height: 80mm, diameter: 60mm\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;  // mm\nbody_height = 60;    // mm\nbase_height = 15;    // mm\ntop_lip = 5;         // mm\noctagon_radius = 30; // mm\nstick_hole_radius = 4; // mm for drum sticks\nnum_stick_holes = 8; // holes around perimeter\n\n// Main module\nmodule octoban() {\n    // Create the main body as octagonal prism\n    difference() {\n        // Outer octagon body\n        cylinder(h=body_height, r=octagon_radius, $fn=8);\n        \n        // Hollow out the center\n        translate([0, 0, -0.1])\n            cylinder(h=body_height+0.2, r=octagon_radius-wall_thickness, $fn=8);\n    }\n    \n    // Add base\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h=base_height, r=octagon_radius+wall_thickness, $fn=8);\n            cylinder(h=base_height+0.1, r=octagon_radius, $fn=8);\n        }\n    \n    // Add top lip\n    translate([0, 0, body_height])\n        difference() {\n            cylinder(h=top_lip, r=octagon_radius+wall_thickness, $fn=8);\n            cylinder(h=top_lip+0.1, r=octagon_radius, $fn=8);\n        }\n    \n    // Add stick holes around perimeter\n    for(i = [0:num_stick_holes-1]) {\n        rotate([0, 0, i*360/num_stick_holes])\n            translate([octagon_radius-wall_thickness-stick_hole_radius, 0, base_height])\n                difference() {\n                    // Hole through body\n                    cylinder(h=body_height-base_height-top_lip+wall_thickness, r=stick_hole_radius);\n                    \n                    // Counterbore at top for stick head\n                    translate([0, 0, body_height-base_height-top_lip+wall_thickness])\n                        cylinder(h=top_lip, r=stick_hole_radius+1);\n                }\n    }\n    \n    // Add small drainage holes in base\n    for(i = [0:7]) {\n        rotate([0, 0, i*45])\n            translate([octagon_radius-wall_thickness-1, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=wall_thickness*2, r=1, center=true);\n    }\n    \n    // Add center post for structural support\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h=body_height, r=10);\n            cylinder(h=body_height+0.1, r=8);\n        }\n}\n\n// Render the octoban\noctoban();",
    "renders": true
  },
  {
    "musical_instrument": "rototom",
    "openscad_code": "// Rototom - medium complexity realistic style\n// Overall diameter ~80 mm, printable without supports\n\n$fn = 36;  // smooth curves\n\nmodule rototom() {\n    // Main drum shell\n    difference() {\n        // Outer shell\n        cylinder(h = 45, d1 = 80, d2 = 78, center = true);\n        \n        // Hollow it out\n        translate([0, 0, 0])\n            cylinder(h = 47, d1 = 74, d2 = 72, center = true);\n    }\n    \n    // Top bearing edge\n    difference() {\n        translate([0, 0, 22.5])\n            cylinder(h = 2, d1 = 78, d2 = 76);\n        \n        translate([0, 0, 22.5])\n            cylinder(h = 2.1, d1 = 74, d2 = 72);\n    }\n    \n    // Bottom bearing edge\n    difference() {\n        translate([0, 0, -22.5])\n            cylinder(h = 2, d1 = 76, d2 = 74);\n        \n        translate([0, 0, -22.5])\n            cylinder(h = 2.1, d1 = 72, d2 = 70);\n    }\n    \n    // Lug blocks - 6 around shell\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([39, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 8, d = 5, center = true);\n    }\n    \n    // Tuning bracket - curved arm\n    difference() {\n        // Main bracket arm\n        rotate([0, 90, 0])\n            translate([0, 0, -20])\n                cylinder(h = 40, d1 = 12, d2 = 8);\n        \n        // Hole for bolt\n        rotate([0, 90, 0])\n            translate([0, 0, -20])\n                cylinder(h = 41, d = 4);\n    }\n    \n    // Mounting plate\n    translate([0, 0, -25])\n        difference() {\n            cylinder(h = 5, d = 25);\n            cylinder(h = 5.1, d = 15);\n        }\n    \n    // Mounting hole\n    translate([0, 0, -27.5])\n        cylinder(h = 10, d = 6);\n    \n    // Drum head (removable part)\n    translate([0, 0, 23.5])\n        cylinder(h = 0.5, d = 78);\n}\n\nrototom();",
    "renders": true
  },
  {
    "musical_instrument": "talking",
    "openscad_code": "// Realistic Talking Head – 3D-printable, medium complexity\n// No overhangs > 45°, walls ≥ 1.2 mm, 80 mm tall\n\n$fs = 0.8;\n$fa = 2;\n\nmodule head() {\n    // Main cranium\n    difference() {\n        sphere(d = 45);                         // skull sphere\n        translate([0, 0, 20])\n            cube([50, 50, 30], center = true);  // flat top cut\n    }\n}\n\nmodule jaw() {\n    // Hinged lower jaw\n    rotate([10, 0, 0])\n    translate([0, -5, -14])\n    difference() {\n        cube([32, 20, 18], center = true);      // jaw block\n        translate([0, 10, 5])                  // mouth cavity\n            cube([28, 20, 12], center = true);\n    }\n}\n\nmodule eyesocket() {\n    // Single eye socket\n    rotate_extrude(angle = 360)\n        translate([10, 0, 0])\n            circle(d = 12);\n}\n\nmodule eye() {\n    // Eye sphere\n    sphere(d = 10);\n}\n\nmodule nose() {\n    difference() {\n        translate([0, 22, 5])\n            cube([8, 12, 18], center = true);   // nose bridge\n        translate([0, 28, 5])\n            cube([7, 12, 18], center = true);   // taper rear\n    }\n}\n\nmodule ear() {\n    // Pinna shell\n    difference() {\n        scale([1, 1.3, 1])\n            sphere(d = 16);\n        translate([0, -9, 0])                  // inner bowl\n            sphere(d = 12);\n    }\n}\n\nmodule neck() {\n    // Cylindrical neck\n    cylinder(h = 18, d1 = 22, d2 = 30);\n}\n\n// Assembly\ntranslate([0, 0, 18]) head();\ntranslate([0, 0, 0]) neck();\n\n// Jaw hinged below head\ntranslate([0, 0, 18]) jaw();\n\n// Eyes\ntranslate([-11, 17, 5]) eyesocket();\ntranslate([11, 17, 5]) mirror([1, 0, 0]) eyesocket();\n\ntranslate([-11, 17, 5]) eye();\ntranslate([11, 17, 5]) eye();\n\n// Nose\nnose();\n\n// Ears\ntranslate([-24, 0, 8]) rotate([0, -10, -10]) ear();\ntranslate([24, 0, 8]) mirror([1, 0, 0]) rotate([0, -10, 10]) ear();",
    "renders": true
  },
  {
    "musical_instrument": "udu",
    "openscad_code": "// Udu Drum - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness\n\n$fn = 36;\nwall_thickness = 2;\nscale_factor = 1.5;\n\nmodule udu_body() {\n    // Main body - hollow egg shape\n    difference() {\n        // Outer shell\n        scale([1, 1, 1.3]) \n        sphere(d = 60 * scale_factor);\n        \n        // Inner cavity\n        translate([0, 0, -wall_thickness/2])\n        scale([1, 1, 1.3]) \n        sphere(d = (60 - wall_thickness*2) * scale_factor);\n    }\n}\n\nmodule udu_neck() {\n    // Neck tube\n    translate([0, 0, 40 * scale_factor])\n    difference() {\n        cylinder(h = 30 * scale_factor, d = 30 * scale_factor);\n        translate([0, 0, -1])\n        cylinder(h = 32 * scale_factor, d = (30 - wall_thickness*2) * scale_factor);\n    }\n}\n\nmodule sound_hole() {\n    // Main sound hole\n    rotate([0, 90, 0])\n    translate([0, 0, 30 * scale_factor])\n    cylinder(h = 30 * scale_factor, d = 15 * scale_factor);\n}\n\nmodule secondary_hole() {\n    // Secondary smaller hole\n    rotate([0, 45, 45])\n    translate([0, 0, 20 * scale_factor])\n    cylinder(h = 20 * scale_factor, d = 10 * scale_factor);\n}\n\nmodule base_ring() {\n    // Reinforcement ring at base\n    translate([0, 0, -38 * scale_factor])\n    difference() {\n        cylinder(h = 5 * scale_factor, d = 45 * scale_factor);\n        cylinder(h = 5 * scale_factor, d = (45 - wall_thickness*2) * scale_factor);\n    }\n}\n\nmodule texture_lines() {\n    // Subtle texture rings\n    for (i = [1:5]) {\n        rotate([0, 0, 0])\n        translate([0, 0, -30 + i * 12])\n        difference() {\n            cylinder(h = 1, d = 55 + i * 2);\n            cylinder(h = 1.5, d = 50 + i * 2);\n        }\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        udu_body();\n        udu_neck();\n        base_ring();\n    }\n    \n    // Create holes\n    sound_hole();\n    secondary_hole();\n}\n\n// Optional texture (uncomment for printing)\n// %texture_lines();",
    "renders": true
  },
  {
    "musical_instrument": "kpanlogo",
    "openscad_code": "// Kpanlogo drum - realistic style, medium complexity\n// Traditional Ghanaian goblet-shaped hand drum\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main parameters\ndrum_height = 70;\nbase_diameter = 45;\nhead_diameter = 80;\nwall_thickness = 3;\n\nmodule kpanlogo_drum() {\n    // Main body - goblet shape\n    union() {\n        // Drum base - wider bottom section\n        cylinder(h=25, d1=base_diameter, d2=base_diameter*0.9, center=false);\n        \n        // Tapered middle section\n        translate([0, 0, 25])\n            cylinder(h=30, d1=base_diameter*0.9, d2=head_diameter*0.7, center=false);\n        \n        // Drum head area\n        translate([0, 0, 55])\n            cylinder(h=15, d1=head_diameter*0.7, d2=head_diameter, center=false);\n    }\n    \n    // Carved decorative rings around body\n    for (i = [1:4]) {\n        translate([0, 0, i*12])\n            difference() {\n                cylinder(h=2, d=base_diameter*0.95 + i*2, center=false);\n                cylinder(h=3, d=base_diameter*0.95 + i*2 - 3, center=false);\n            }\n    }\n    \n    // Drum shell thickness\n    difference() {\n        // Outer shell\n        union() {\n            cylinder(h=drum_height, d=head_diameter, d2=base_diameter, center=false);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            cylinder(h=drum_height-wall_thickness, \n                    d=head_diameter-wall_thickness*2, \n                    d2=base_diameter-wall_thickness*2, \n                    center=false);\n    }\n    \n    // Drum head - goat skin simulation\n    translate([0, 0, drum_height])\n        difference() {\n            // Main head\n            cylinder(h=2, d=head_diameter, center=false);\n            \n            // Tuning ring groove\n            translate([0, 0, -0.5])\n                cylinder(h=3, d=head_diameter-8, center=false);\n            \n            // Center sound hole detail\n            translate([0, 0, 0.5])\n                cylinder(h=1, d=head_diameter*0.3, center=false);\n        }\n    \n    // Rope tuning system pegs\n    for (i = [0:7]) {\n        rotate([0, 0, i*45])\n            translate([head_diameter/2 - 3, 0, drum_height-5])\n                cylinder(h=8, d=4, center=false);\n    }\n    \n    // Base support ring\n    translate([0, 0, -1])\n        difference() {\n            cylinder(h=3, d=base_diameter+6, center=false);\n            cylinder(h=4, d=base_diameter, center=false);\n        }\n    \n    // Traditional carved patterns - Adinkra inspired\n    module carvings() {\n        // Vertical grooves\n        for (i = [0:11]) {\n            rotate([0, 0, i*30])\n                translate([(base_diameter+head_diameter)/4, 0, 10])\n                    cube([1.5, (head_diameter+base_diameter)/4, 50], center=true);\n        }\n        \n        // Diamond pattern on upper section\n        for (j = [0:5]) {\n            for (i = [0:11]) {\n                rotate([0, 0, i*30 + j*15])\n                    translate([(head_diameter*0.7)/2 - 2, 0, 45 + j*4])\n                        cube([2, 8, 2], center=true);\n            }\n        }\n    }\n    \n    // Apply carvings as indentations\n    difference() {\n        children();\n        carvings();\n    }\n}\n\n// Generate the drum\nkpanlogo_drum();",
    "renders": true
  },
  {
    "musical_instrument": "ashiko",
    "openscad_code": "// Ashiko drum - realistic medium complexity\n// Traditional conical hand drum with rope tuning system\n\n// Overall dimensions\ndrum_height = 85;\ntop_diameter = 60;\nbase_diameter = 40;\nwall_thickness = 2.5;\n\n// Skin thickness\nskin_thickness = 1.5;\n\n// Rope parameters\nrope_diameter = 1.2;\nrope_segments = 8;\nrope_loops = 4;\n\n// Ring parameters\nring_thickness = 3;\nring_height = 4;\nring_diameter = top_diameter + 10;\n\n// Drum shell module\nmodule drum_shell() {\n    // Main conical body\n    difference() {\n        // Outer cone\n        cylinder(h1 = base_diameter, h2 = top_diameter, h = drum_height, $fn = 64);\n        \n        // Inner cavity\n        translate([0, 0, -0.1])\n            cylinder(h1 = base_diameter - 2*wall_thickness, \n                     h2 = top_diameter - 2*wall_thickness, \n                     h = drum_height + 0.2, $fn = 64);\n    }\n    \n    // Base reinforcement ring\n    translate([0, 0, -0.5])\n        cylinder(h1 = base_diameter + 2, h2 = base_diameter + 2, h = 3, $fn = 64);\n    \n    // Top reinforcement ring\n    translate([0, 0, drum_height-2.5])\n        cylinder(h1 = top_diameter + 2, h2 = top_diameter + 2, h = 3, $fn = 64);\n}\n\n// Drum skin module\nmodule drum_skin() {\n    // Top skin\n    translate([0, 0, drum_height])\n        cylinder(h1 = top_diameter + 4, h2 = top_diameter + 4, h = skin_thickness, $fn = 64);\n}\n\n// Tuning ring module\nmodule tuning_ring() {\n    // Main ring\n    cylinder(h = ring_height, r = ring_diameter/2, $fn = 64);\n    \n    // Ring holes for rope\n    for(i = [0:rope_segments-1]) {\n        rotate([0, 0, i * 360/rope_segments])\n            translate([ring_diameter/2 - ring_thickness/2, 0, -0.5])\n                cube([ring_thickness, rope_diameter + 0.5, ring_height + 1], center = true);\n    }\n}\n\n// Rope lacing module\nmodule rope_lacing() {\n    // Generate rope segments\n    for(i = [0:rope_segments-1]) {\n        angle = i * 360/rope_segments;\n        \n        // Lower rope holes\n        translate([0, 0, drum_height/2])\n            rotate([0, 0, angle + 360/rope_segments/2])\n                translate([base_diameter/2 + wall_thickness, 0, -drum_height/2])\n                    cylinder(h = drum_height, r = rope_diameter/2, $fn = 16);\n        \n        // Upper rope segments\n        translate([0, 0, drum_height + ring_height/2])\n            rotate([0, 0, angle])\n                translate([top_diameter/2 + 2, 0, -ring_height/2])\n                    cylinder(h = ring_height, r = rope_diameter/2, $fn = 16);\n        \n        // Diagonal rope segments\n        for(j = [0:rope_loops-1]) {\n            z_pos = j * (drum_height - ring_height) / rope_loops;\n            rotate([0, 0, angle + j * (360/rope_segments/2)])\n                translate([top_diameter/2 + 2 - j * (top_diameter/2 - base_diameter/2) / rope_loops, \n                          0, \n                          drum_height - z_pos])\n                    cylinder(h = 5, r = rope_diameter/2, $fn = 16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main drum body\n    drum_shell();\n    \n    // Drum skin on top\n    drum_skin();\n    \n    // Tuning ring - positioned above skin\n    translate([0, 0, drum_height + skin_thickness])\n        tuning_ring();\n    \n    // Rope lacing system\n    rope_lacing();\n}",
    "renders": true
  },
  {
    "musical_instrument": "djembe",
    "openscad_code": "// Djembe drum - medium complexity realistic style\n// Overall height: 80mm, suitable for 3D printing\n\n$fn = 36;\n\n// Main parameters\nheight = 80;\nbase_radius = 30;\ntop_radius = 45;\nstem_radius = 15;\nwall_thickness = 2;\n\n// Create the main drum body\nmodule drum_body() {\n    // Tapered body using stacked cylinders\n    union() {\n        // Base section\n        cylinder(h=15, r1=base_radius-3, r2=base_radius);\n        \n        // Middle section with gentle taper\n        translate([0,0,15])\n            cylinder(h=20, r1=base_radius, r2=base_radius+5);\n        \n        // Upper bell section\n        translate([0,0,35])\n            cylinder(h=25, r1=base_radius+5, r2=top_radius);\n        \n        // Rim for drum head\n        translate([0,0,60])\n            cylinder(h=3, r1=top_radius+2, r2=top_radius+2);\n    }\n}\n\n// Create the hollow interior\nmodule hollow_body() {\n    difference() {\n        drum_body();\n        \n        // Interior cavity\n        translate([0,0,-1])\n            cylinder(h=62, r1=base_radius-3-wall_thickness, r2=top_radius-wall_thickness);\n    }\n}\n\n// Rope tuning system rings\nmodule tuning_rings() {\n    // Upper ring with 12 rope holes\n    translate([0,0,63])\n    difference() {\n        cylinder(h=5, r=top_radius+4);\n        // Central hole\n        cylinder(h=6, r=top_radius+1);\n        // Rope holes\n        for(i=[0:11]) {\n            rotate([0,0,i*30])\n                translate([top_radius+2, 0, 2.5])\n                    rotate([90,0,0])\n                        cylinder(h=3, r=1.5);\n        }\n    }\n    \n    // Lower ring with 12 rope anchors\n    translate([0,0,10])\n    difference() {\n        cylinder(h=5, r=base_radius+2);\n        // Central hole\n        cylinder(h=6, r=base_radius-1);\n        // Anchor points\n        for(i=[0:11]) {\n            rotate([0,0,i*30+15])\n                translate([base_radius+1, 0, 2.5])\n                    cube([4,2,5], center=true);\n        }\n    }\n}\n\n// Vertical rope segments\nmodule ropes() {\n    for(i=[0:11]) {\n        angle = i*30;\n        // Upper attachment point\n        upper_x = (top_radius+2) * cos(angle);\n        upper_y = (top_radius+2) * sin(angle);\n        \n        // Lower attachment point (offset by 15 degrees)\n        lower_angle = angle + 15;\n        lower_x = (base_radius+1) * cos(lower_angle);\n        lower_y = (base_radius+1) * sin(lower_angle);\n        \n        // Create rope segment as cylinder\n        translate([upper_x, upper_y, 65.5])\n            rotate([0, 90, atan2(lower_y-upper_y, lower_x-upper_x)])\n                cylinder(h=sqrt(pow(lower_x-upper_x,2)+pow(lower_y-upper_y,2)+pow(55,2)), r=1);\n    }\n}\n\n// Base stem for stability\nmodule base_stem() {\n    translate([0,0,-10])\n    cylinder(h=10, r1=stem_radius, r2=stem_radius-2);\n}\n\n// Carved decorative bands\nmodule decorative_bands() {\n    // Upper band\n    translate([0,0,50])\n    difference() {\n        cylinder(h=3, r=base_radius+7);\n        cylinder(h=3.5, r=base_radius+5);\n    }\n    \n    // Lower band\n    translate([0,0,25])\n    difference() {\n        cylinder(h=3, r=base_radius+5);\n        cylinder(h=3.5, r=base_radius+3);\n    }\n}\n\n// Assemble the complete djembe\nunion() {\n    hollow_body();\n    tuning_rings();\n    ropes();\n    base_stem();\n    decorative_bands();\n}",
    "renders": true
  },
  {
    "musical_instrument": "ngoma",
    "openscad_code": "// Ngoma – African hand drum, realistic mid-complexity model, 3D-printable\n// Overall height ≈ 75 mm, drum diameter ≈ 55 mm\n\nmodule ngoma() {\n    // Shell thickness for printing\n    wall = 1.5;\n\n    // Main shell\n    difference() {\n        cylinder(h = 60, d1 = 55, d2 = 50, $fn = 48);      // outer taper\n        translate([0, 0, -1])\n            cylinder(h = 62, d1 = 55 - 2*wall, d2 = 50 - 2*wall, $fn = 48); // inner hollow\n    }\n\n    // Reinforcing rings\n    for (z = [10, 30, 50]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 4, d = 57, $fn = 48);\n                cylinder(h = 4.2, d = 55 - 2*wall, $fn = 48);\n            }\n    }\n\n    // Bottom base ring (foot)\n    translate([0, 0, -5])\n        difference() {\n            cylinder(h = 6, d = 60, $fn = 48);\n            cylinder(h = 6.2, d = 50 - 2*wall, $fn = 48);\n        }\n\n    // Drum head membrane\n    translate([0, 0, 60])\n        cylinder(h = 0.6, d = 55, $fn = 48);\n\n    // Eight tuning ropes\n    rope_d = 1.2;\n    for (a = [0:45:360-45]) {\n        rotate([0, 0, a])\n            translate([0, 55/2 + rope_d/2, 59.7])\n                rotate([90, 0, 0])\n                    cylinder(h = 12, d = rope_d, $fn = 8);\n    }\n\n    // Eight rope anchors (simple pegs)\n    peg_r = 1.6;\n    peg_h = 4;\n    for (a = [0:45:360-45]) {\n        rotate([0, 0, a])\n            translate([0, 55/2 + rope_d + peg_r, 59.7 - peg_h/2])\n                cylinder(h = peg_h, d = peg_r*2, $fn = 8);\n    }\n\n    // Carved shallow grooves for texture\n    for (z = [5:5:55]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 0.5, d = 55.2, $fn = 48);\n                cylinder(h = 0.6, d = 54.8, $fn = 48);\n            }\n    }\n}\n\nngoma();",
    "renders": true
  },
  {
    "musical_instrument": "entenga",
    "openscad_code": "// Entenga drum - realistic medium complexity\n// Overall height ~80mm, drum head diameter ~50mm\n\n// Parameters\n$fn=36;\nbody_height = 60;\nbody_top_diameter = 50;\nbody_bottom_diameter = 45;\nneck_length = 20;\nhead_diameter = 52;\nhead_thickness = 3;\ntuning_lug_count = 6;\ntuning_lug_height = 8;\ntuning_lug_width = 4;\ntuning_lug_thickness = 2;\nhoop_height = 6;\nwall_thickness = 3;\n\n// Main body - tapered cylinder\nmodule drum_body() {\n    difference() {\n        cylinder(h=body_height, d1=body_bottom_diameter, d2=body_top_diameter, center=false);\n        // Hollow out interior\n        translate([0,0,wall_thickness])\n            cylinder(h=body_height-wall_thickness*2+1, \n                    d1=body_bottom_diameter-wall_thickness*2, \n                    d2=body_top_diameter-wall_thickness*2, \n                    center=false);\n    }\n}\n\n// Tuning lugs\nmodule tuning_lug() {\n    difference() {\n        // Main lug body\n        cube([tuning_lug_width, tuning_lug_thickness, tuning_lug_height], center=true);\n        // Hole for tension rod\n        translate([0,0,0])\n            rotate([90,0,0])\n                cylinder(h=tuning_lug_width+1, d=2, center=true);\n    }\n}\n\n// Tuning hoop with lugs\nmodule tuning_hoop() {\n    difference() {\n        // Main hoop\n        cylinder(h=hoop_height, d=head_diameter+4, center=false);\n        \n        // Inner cutout\n        translate([0,0,-1])\n            cylinder(h=hoop_height+2, d=head_diameter, center=false);\n    }\n    \n    // Add lugs around perimeter\n    for (i=[0:tuning_lug_count-1]) {\n        rotate([0,0,i*360/tuning_lug_count])\n            translate([(head_diameter+4)/2 + tuning_lug_thickness/2, 0, hoop_height/2])\n                tuning_lug();\n    }\n}\n\n// Drum head (membrane)\nmodule drum_head() {\n    cylinder(h=head_thickness, d=head_diameter, center=false);\n}\n\n// Neck/transition piece\nmodule drum_neck() {\n    cylinder(h=neck_length, d1=body_top_diameter, d2=head_diameter, center=false);\n}\n\n// Assembly\ntranslate([0,0,0]) {\n    drum_body();\n    \n    translate([0,0,body_height])\n        drum_neck();\n    \n    translate([0,0,body_height+neck_length])\n        tuning_hoop();\n    \n    translate([0,0,body_height+neck_length+hoop_height-head_thickness])\n        drum_head();\n}",
    "renders": true
  },
  {
    "musical_instrument": "engalabi",
    "openscad_code": "// Engalabi (African water ladle) – realistic, medium complexity\n// All dimensions in millimetres, printable on a 200 mm bed\n\n// Global parameters\nwall = 2.5;             // wall thickness for printability\nscoop_r = 28;           // scoop inner radius\nscoop_depth = 35;       // axial depth of scoop\nhandle_len = 70;        // handle length\nhandle_d = 14;          // handle diameter\ncup_r = 28;             // cup radius for water reservoir\ncup_h = 30;             // cup height\nflange_w = 4;           // lip around scoop opening\n\n// Helper: hollow half–sphere\nmodule hollow_half_sphere(ri, t) {\n    difference() {\n        sphere(r = ri + t);\n        sphere(r = ri);\n    }\n}\n\n// Scoop bowl\nmodule scoop() {\n    difference() {\n        // outer solid\n        union() {\n            // main bowl\n            rotate_extrude(angle = 180)\n                translate([scoop_r, 0, 0])\n                    circle(r = scoop_r + wall);\n\n            // flange (lip) around rim\n            translate([0, 0, -flange_w])\n                cylinder(h = flange_w, r = scoop_r + wall, $fn = 64);\n        }\n\n        // inner void\n        rotate_extrude(angle = 180)\n            translate([scoop_r, 0, 0])\n                circle(r = scoop_r);\n\n        // cut back half so only front remains\n        translate([scoop_r + 1, 0, 0])\n            cube([scoop_r + 2, (scoop_r + wall) * 2, (scoop_r + wall) * 2], center = true);\n    }\n}\n\n// Handle with gentle taper and collar\nmodule handle() {\n    union() {\n        // main shaft\n        cylinder(h = handle_len, r1 = handle_d/2, r2 = handle_d/2 - 2, $fn = 32);\n\n        // collar at scoop joint\n        translate([0, 0, handle_len])\n            cylinder(h = 5, r = handle_d/2 + 2, $fn = 32);\n    }\n}\n\n// Small water cup on handle\nmodule cup() {\n    difference() {\n        // outer\n        cylinder(h = cup_h + wall, r = cup_r + wall, $fn = 48);\n        // inner\n        translate([0, 0, wall])\n            cylinder(h = cup_h, r = cup_r, $fn = 48);\n    }\n}\n\n// Carved grooves for grip\nmodule grip_grooves() {\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([0, 0, handle_len/2])\n                difference() {\n                    cylinder(h = handle_len * 0.8, r = handle_d/2 + 0.2, $fn = 32);\n                    cylinder(h = handle_len * 0.8 + 0.2, r = handle_d/2 - 0.8, $fn = 32);\n                }\n    }\n}\n\n// Assembly\nunion() {\n    // Scoop\n    rotate([0, 90, 0])\n        translate([0, 0, handle_len])\n            scoop();\n\n    // Handle\n    translate([0, 0, 0])\n        handle();\n\n    // Grip grooves\n    translate([0, 0, handle_len * 0.6])\n        grip_grooves();\n\n    // Cup on handle back\n    translate([0, 0, handle_len * 0.25])\n        rotate([0, 0, 0])\n            cup();\n}",
    "renders": true
  },
  {
    "musical_instrument": "omukuri",
    "openscad_code": "// Omukuri (traditional Japanese wooden bucket) – medium-complexity realistic style\n// All dimensions in mm; overall height ≈ 70 mm, max diameter ≈ 90 mm\n\n$fn = 32;          // smooth curves for 3D printing\n\n// Parameters\nwall = 2.5;        // printable wall thickness\nstave_w = 8;       // width of each wooden stave\nband_h = 6;        // metal band height\ngap = 0.2;         // tiny clearance for prints\n\nmodule stave(h, top_r, bottom_r) {\n    // single tapered stave, slightly curved on outside\n    hull() {\n        translate([0,0,0])\n            cube([stave_w-wall*2, wall, h], center=true);\n        translate([0,0,h])\n            cube([stave_w-wall*2, wall*0.8, wall*0.8], center=true);\n    }\n}\n\nmodule bucket_staves(h, top_r, bottom_r) {\n    // generate circular array of staves\n    staves = ceil(2*PI*top_r / stave_w);\n    for(i=[0:staves-1]) {\n        angle = i*360/staves;\n        // calculate actual width at given radius\n        w = 2*top_r*sin(180/staves);\n        rotate([0,0,angle])\n            translate([top_r - w/2 + wall/2, 0, 0])\n                stave(h, top_r, bottom_r);\n    }\n}\n\nmodule metal_band(height, radius, thickness) {\n    // decorative metal band around outside\n    difference() {\n        cylinder(h=height, r=radius, center=true);\n        translate([0,0,-gap])\n            cylinder(h=height+gap*2, r=radius-thickness, center=true);\n    }\n}\n\nmodule base(bottom_r) {\n    // thick bottom plank\n    cylinder(h=wall*1.5, r=bottom_r-wall, center=true);\n}\n\nmodule omukuri() {\n    h = 70;\n    top_r = 45;\n    bottom_r = 38;\n\n    union() {\n        // bottom plate\n        translate([0,0,wall*0.75])\n            base(bottom_r);\n\n        // stave shell\n        difference() {\n            union() {\n                bucket_staves(h, top_r, bottom_r);\n                // inner surface\n                cylinder(h=h, r=top_r-wall, center=false);\n            }\n            // hollow out\n            translate([0,0,-gap])\n                cylinder(h=h+gap*2, r=bottom_r-wall-gap, center=false);\n        }\n\n        // upper metal band\n        translate([0,0,h-band_h/2])\n            metal_band(band_h, top_r, wall);\n\n        // lower metal band\n        translate([0,0,h/3])\n            metal_band(band_h, bottom_r+(top_r-bottom_r)*0.35, wall);\n    }\n}\n\nomukuri();",
    "renders": true
  },
  {
    "musical_instrument": "omubanda",
    "openscad_code": "// Omubanda (traditional Ugandan stool) - Realistic medium complexity\n// Overall dimensions: ~85mm diameter, ~45mm height\n\n$fn = 36;\n\nmodule leg_support() {\n    // Central support cylinder for legs\n    difference() {\n        cylinder(h = 20, r1 = 25, r2 = 30);\n        cylinder(h = 21, r1 = 20, r2 = 25);\n    }\n}\n\nmodule stool_leg() {\n    // Individual curved leg\n    difference() {\n        // Main leg shape\n        linear_extrude(height = 35, twist = 10, scale = 1.2)\n            offset(r = 5)\n                polygon(points = [[0,0], [15,0], [15,25], [0,25]]);\n        \n        // Hollow center\n        translate([0, 0, 2])\n            linear_extrude(height = 36, twist = 10, scale = 1.2)\n                offset(r = 3)\n                    polygon(points = [[0,0], [13,0], [13,23], [0,23]]);\n    }\n}\n\nmodule seat_top() {\n    // Round seat with slight dome\n    difference() {\n        // Main seat\n        translate([0, 0, 35])\n            cylinder(h = 12, r1 = 42, r2 = 40);\n        \n        // Carved top\n        translate([0, 0, 35.5])\n            cylinder(h = 5, r1 = 38, r2 = 35);\n        \n        // Center hole\n        translate([0, 0, 35])\n            cylinder(h = 13, r = 8);\n    }\n}\n\nmodule decorative_ring() {\n    // Traditional decorative ring under seat\n    difference() {\n        // Outer ring\n        cylinder(h = 6, r1 = 38, r2 = 38);\n        \n        // Inner cutout\n        translate([0, 0, -0.5])\n            cylinder(h = 7, r1 = 34, r2 = 34);\n    }\n}\n\n// Assembly\nunion() {\n    // Central support\n    leg_support();\n    \n    // Four legs in cross formation\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([0, 22, 0])\n                stool_leg();\n    }\n    \n    // Decorative ring\n    translate([0, 0, 29])\n        decorative_ring();\n    \n    // Seat top\n    seat_top();\n    \n    // Reinforcement ribs between legs\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([0, 18, 15])\n                cube([8, 5, 20], center = true);\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "inyenzi",
    "openscad_code": "// Inyenzi (cockroach) - realistic style, medium complexity\n// Overall size: ~70mm length\n\n$fn = 36;  // Smooth curves for realistic appearance\n\n// Main body\nmodule body() {\n    // Thorax (main body segment)\n    difference() {\n        scale([1.2, 0.8, 0.6]) \n            sphere(d=30);\n        \n        // Remove bottom for flat base\n        translate([0, 0, -15])\n            cube([40, 40, 30], center=true);\n    }\n    \n    // Abdomen extension\n    translate([-20, 0, 0])\n        rotate([0, 10, 0])\n        scale([1.0, 0.9, 0.7])\n        sphere(d=25);\n}\n\n// Head\nmodule head() {\n    translate([20, 0, 2])\n    rotate([0, -20, 0])\n    difference() {\n        scale([0.9, 1.0, 0.8])\n            sphere(d=18);\n        \n        // Mouth area indentation\n        translate([7, 0, -2])\n            sphere(d=8);\n    }\n}\n\n// Antennae\nmodule antenna() {\n    // Left antenna\n    translate([25, 4, 8])\n    rotate([0, 0, -30])\n    rotate([0, -20, 0])\n    cylinder(h=25, d1=1.5, d2=0.5);\n    \n    // Right antenna\n    translate([25, -4, 8])\n    rotate([0, 0, 30])\n    rotate([0, -20, 0])\n    cylinder(h=25, d1=1.5, d2=0.5);\n}\n\n// Leg segment\nmodule leg_segment(length, angle, z_offset) {\n    translate([length/2, 0, 0])\n    rotate([0, 0, angle])\n    translate([length/2, 0, z_offset])\n    rotate([0, 30, 0])\n    cylinder(h=length, d=2.5);\n}\n\n// All legs\nmodule legs() {\n    // Right side legs\n    for (i = [0:2]) {\n        leg_pos = -8 + i * 12;\n        translate([leg_pos, 0, 0])\n        mirror([0, 1, 0])\n        leg_segment(20, 45 + i * 10, -3 - i * 2);\n    }\n    \n    // Left side legs\n    for (i = [0:2]) {\n        leg_pos = -8 + i * 12;\n        translate([leg_pos, 0, 0])\n        leg_segment(20, -45 - i * 10, -3 - i * 2);\n    }\n}\n\n// Wing covers (elytra)\nmodule wing_covers() {\n    for (side = [-1, 1]) {\n        translate([0, side * 8, 0])\n        scale([1.4, 0.3, 0.8])\n        rotate([0, 5 * side, 0])\n        sphere(d=28);\n    }\n}\n\n// Eye details\nmodule eyes() {\n    for (side = [-1, 1]) {\n        translate([26, side * 6, 4])\n        scale([1.2, 1.2, 0.8])\n        sphere(d=4);\n    }\n}\n\n// Final assembly\nunion() {\n    body();\n    head();\n    antenna();\n    legs();\n    wing_covers();\n    eyes();\n}",
    "renders": true
  },
  {
    "musical_instrument": "ikembe",
    "openscad_code": "// Ikembe (Thumb Piano) - Medium Complexity Realistic Style\n\n// Overall dimensions\nbody_length = 80;\nbody_width = 55;\nbody_height = 15;\nwall_thickness = 2.5;\n\n// Tine parameters\nnum_tines = 10;\ntine_length = 45;\ntine_width = 2;\ntine_thickness = 1.5;\ntine_spacing = 4.5;\n\n// Bridge parameters\nbridge_height = 8;\nbridge_width = 48;\nbridge_thickness = 3;\n\n// Sound hole parameters\nhole_radius = 6;\nhole_depth = 8;\n\n// Resonance chamber\nmodule resonance_chamber() {\n    difference() {\n        // Outer shell\n        cube([body_length, body_width, body_height], center=false);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([body_length - 2*wall_thickness, \n                  body_width - 2*wall_thickness, \n                  body_height - wall_thickness], center=false);\n        \n        // Sound hole (front)\n        translate([body_length - hole_depth, body_width/2, body_height/2])\n            rotate([0, 90, 0])\n            cylinder(r=hole_radius, h=wall_thickness+1, center=true);\n    }\n}\n\n// Bridge with tine slots\nmodule bridge() {\n    // Main bridge\n    translate([body_length - 18, (body_width - bridge_width)/2, body_height])\n        cube([bridge_thickness, bridge_width, bridge_height], center=false);\n    \n    // Tine slots (grooves)\n    for (i = [0:num_tines-1]) {\n        translate([body_length - 18 + bridge_thickness/2, \n                  (body_width - bridge_width)/2 + 2 + i*tine_spacing, \n                  body_height + bridge_height - 1])\n            cube([bridge_thickness + 1, tine_width + 0.5, 2], center=true);\n    }\n}\n\n// Individual tine with rounded tip\nmodule tine(length, index) {\n    // Main tine body\n    translate([0, 0, 0])\n        cube([length, tine_width, tine_thickness], center=false);\n    \n    // Rounded tip\n    translate([length - tine_width/2, tine_width/2, tine_thickness/2])\n        rotate([0, 90, 0])\n        cylinder(r=tine_width/2, h=tine_width, center=true);\n}\n\n// Tine array\nmodule tine_array() {\n    for (i = [0:num_tines-1]) {\n        // Varying lengths for different pitches\n        len = tine_length - (i % 3) * 4;\n        \n        translate([body_length - 18 - len + bridge_thickness, \n                  (body_width - bridge_width)/2 + 2 + i*tine_spacing + tine_width/2, \n                  body_height + bridge_height - tine_thickness/2])\n            rotate([0, 0, -1 + (i % 2) * 2])  // Slight alternation for playability\n            tine(len, i);\n    }\n}\n\n// Reinforcement blocks\nmodule reinforcement_blocks() {\n    // Front block\n    translate([0, wall_thickness, 0])\n        cube([wall_thickness*2, body_width - 2*wall_thickness, body_height], center=false);\n    \n    // Back block\n    translate([body_length - wall_thickness*2, wall_thickness, 0])\n        cube([wall_thickness*2, body_width - 2*wall_thickness, body_height], center=false);\n}\n\n// Assembly\nunion() {\n    resonance_chamber();\n    bridge();\n    reinforcement_blocks();\n    tine_array();\n}",
    "renders": true
  },
  {
    "musical_instrument": "likembe",
    "openscad_code": "// OpenSCAD Likembe (Kalimba) - Realistic Style, Medium Complexity\n// Overall size ~90 mm long, ~70 mm wide, ~25 mm thick\n// Wall thickness for 3D printing: 2 mm\n\n$fn = 36;\n\n// Main parameters\nplate_length = 90;\nplate_width  = 70;\nplate_thick  = 5;\nbody_thick   = 15;\nwall         = 2;\nnum_tines    = 8;\ntine_len     = 55;\ntine_width   = 2.5;\ntine_thick   = 1;\nbridge_gap   = 3;\n\n// Main wooden resonator box\nmodule resonator_box() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, body_thick/2])\n                cube([plate_length, plate_width, body_thick], center=true);\n            translate([0, 0, -body_thick/2])\n                cube([plate_length-10, plate_width-10, body_thick], center=true);\n        }\n\n        // Hollow inside\n        translate([0, 0, -body_thick/2 + wall])\n            cube([plate_length - 2*wall, plate_width - 2*wall, body_thick - wall], center=true);\n\n        // Sound hole on top\n        translate([plate_length/2 - 15, 0, body_thick/2 - wall])\n            cylinder(h=wall+1, r=10, center=false);\n\n        // Vent hole on back\n        translate([-plate_length/2 + 15, 0, -body_thick/2])\n            cylinder(h=wall+1, r=8, center=false);\n    }\n}\n\n// Metal tine\nmodule tine(len) {\n    linear_extrude(height=tine_thick, center=true)\n        offset(r=0.5)\n            square([len, tine_width], center=true);\n}\n\n// Bridge bar to hold tines\nmodule bridge_bar() {\n    difference() {\n        // Bar body\n        translate([0, plate_width/2 - 8, plate_thick/2 + 3])\n            cube([plate_length - 20, 8, 6], center=false);\n\n        // Slots for tines\n        for (i=[0:num_tines-1]) {\n            pos_x = -plate_length/2 + 15 + i*(plate_length - 30)/(num_tines-1);\n            translate([pos_x, plate_width/2 - 8, plate_thick/2])\n                cube([tine_width + 0.5, 8, 6 + 1], center=false);\n        }\n    }\n}\n\n// Metal tines assembly\nmodule tines() {\n    for (i=[0:num_tines-1]) {\n        pos_x = -plate_length/2 + 15 + i*(plate_length - 30)/(num_tines-1);\n        len = tine_len - i*3; // Graduated lengths\n        translate([pos_x, plate_width/2 - 8 - bridge_gap, plate_thick/2 + 3 + tine_thick/2])\n            rotate([0, 0, 0])\n                tine(len);\n    }\n}\n\n// Top plate with rounded edges\nmodule top_plate() {\n    difference() {\n        // Main plate\n        minkowski() {\n            cube([plate_length, plate_width, plate_thick], center=true);\n            cylinder(h=0.1, r=2, center=true);\n        }\n\n        // Access hole for bridge screws\n        translate([0, plate_width/2 - 12, plate_thick/2 - 1])\n            cylinder(h=2, r=3, center=false);\n    }\n}\n\n// Assembly\nunion() {\n    // Resonator box\n    color(\"burlywood\") resonator_box();\n\n    // Top plate\n    color(\"burlywood\") translate([0, 0, body_thick/2]) top_plate();\n\n    // Bridge bar\n    color(\"silver\") bridge_bar();\n\n    // Tines\n    color(\"lightgray\") tines();\n}",
    "renders": true
  },
  {
    "musical_instrument": "kalimba",
    "openscad_code": "// Realistic 3D-printable Kalimba (thumb piano)\n// Medium complexity – printable in one piece, support-free\n\n$fn = 32;           // Resolution for curved parts\nwall = 3;           // Minimum printable wall thickness (mm)\n\n// Overall scale – fits adult hands\nbody_l = 90;\nbody_w = 60;\nbody_h = 18;\n\nmodule body() {\n    difference() {\n        // Main resonance box\n        rounded_box(body_l, body_w, body_h, 6);\n\n        // Hollow cavity with 3 mm walls\n        translate([0, 0, -wall])\n            rounded_box(body_l - 2*wall, body_w - 2*wall, body_h - wall, 5);\n        \n        // Sound hole (front)\n        translate([body_l/4, 0, body_h/2])\n            cylinder(r = 8, h = wall + 1, center = true);\n    }\n\n    // Bridge block for tines\n    translate([body_l/2 - 12, 0, body_h - 6])\n        rounded_box(24, body_w - 8, 12, 3);\n}\n\nmodule rounded_box(l, w, h, r) {\n    // Box with rounded top edges, flat bottom for printing\n    hull() {\n        for(x = [-l/2 + r, l/2 - r])\n            for(y = [-w/2 + r, w/2 - r])\n                translate([x, y, h/2 - r])\n                    sphere(r = r);\n        translate([0, 0, h/2 - r])\n            cube([l - 2*r, w - 2*r, h - r], center = true);\n    }\n    translate([0, 0, r/2])\n        cube([l, w, h - r], center = true);\n}\n\nmodule tines() {\n    // Generate 8 graduated tines\n    for(i = [0:7]) {\n        len = 35 + i*4;                      // Graduated lengths\n        w = 2.5;\n        h = 1.2;\n        pitch = 5.5;                         // Spacing\n        y = (i - 3.5) * pitch;               // Centered\n        translate([body_l/2 - 10 - len/2, y, body_h + 5.5 + h/2])\n            cube([len, w, h], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    tines();\n}",
    "renders": true
  },
  {
    "musical_instrument": "mbira",
    "openscad_code": "// Mbira (Kalimba) - realistic style, medium complexity\n// Designed for 3D printing - no supports needed\n\n// Parameters\n$fn = 50;  // Circle resolution for smooth curves\nbody_thickness = 4;\ntine_width = 1.5;\ntine_thickness = 1;\ntine_length = [35, 32, 29, 26, 23, 20, 17, 14];\ntine_spacing = 8;\nbridge_width = 8;\nbridge_thickness = 3;\n\n// Main body (resonator box)\nmodule mbira_body() {\n    difference() {\n        // Main box\n        cube([80, 55, body_thickness]);\n        \n        // Hollow out - leave 2mm walls\n        translate([2, 2, -1])\n            cube([76, 51, body_thickness + 2]);\n        \n        // Sound hole (oval)\n        translate([60, 27.5, -1])\n            scale([2, 1, 1])\n            cylinder(h=body_thickness + 2, d=15);\n    }\n    \n    // Rounded edges\n    translate([0, 0, 0])\n        cube([80, 55, 2]);\n    translate([0, 0, body_thickness - 2])\n        cube([80, 55, 2]);\n}\n\n// Bridge structure\nmodule bridge() {\n    // Main bridge piece\n    translate([10, 22.5, body_thickness])\n        cube([bridge_width, 10, bridge_thickness]);\n    \n    // Bridge supports\n    for(i = [0:1]) {\n        translate([10 + i * 6, 20, 0])\n            cube([2, 15, body_thickness + bridge_thickness]);\n    }\n}\n\n// Individual tine\nmodule tine(length, offset) {\n    translate([offset, 27.5, body_thickness + bridge_thickness])\n        difference() {\n            // Main tine\n            cube([length, tine_width, tine_thickness]);\n            \n            // Tapered tip\n            translate([length - 5, 0, 0])\n                cube([5, tine_width, tine_thickness]);\n        }\n    \n    // Tine holder (pressure bar)\n    translate([12, 25, body_thickness + bridge_thickness + tine_thickness])\n        cube([bridge_width - 4, 5, 2]);\n}\n\n// Tines assembly\nmodule tines() {\n    for(i = [0:len(tine_length)-1]) {\n        tine(tine_length[i], 15 + i * tine_spacing);\n    }\n}\n\n// Decorative side panels\nmodule side_panels() {\n    // Left panel\n    translate([-3, 0, 0])\n        cube([3, 55, body_thickness]);\n    \n    // Right panel\n    translate([80, 0, 0])\n        cube([3, 55, body_thickness]);\n    \n    // Front curve\n    translate([-3, -3, 0])\n        cube([86, 3, body_thickness]);\n    \n    // Back curve\n    translate([-3, 55, 0])\n        cube([86, 3, body_thickness]);\n}\n\n// Assembly\nmbira_body();\nside_panels();\nbridge();\ntines();",
    "renders": true
  },
  {
    "musical_instrument": "sansula",
    "openscad_code": "// OpenSCAD Sansula - Realistic Medium Complexity\n// Overall size ~80 mm diameter, 3D printable\n\n$fn=30;\n\n// Main parameters\nbody_d=78;           // Main body diameter\nbody_h=18;           // Body thickness\nmembrane_d=60;       // Membrane ring diameter\nmembrane_h=2;        // Membrane ring thickness\nbridge_w=4;          // Bridge width\nbridge_h=8;          // Bridge height\ntine_count=9;        // Number of tines\ntine_w=1.8;          // Tine width\ntine_h=1;            // Tine thickness\ntine_base_l=12;      // Fixed tine length\ntine_free_l=40;      // Free vibrating length\ntine_gap=7;          // Gap between tines\nleg_h=12;            // Leg height\nleg_d=4;             // Leg diameter\nwall_th=1.6;         // Wall thickness for printing\n\nmodule sansula_body() {\n    // Main wooden body - hollowed cylinder\n    difference() {\n        cylinder(h=body_h, d=body_d);\n        translate([0,0,-1]) \n            cylinder(h=body_h+2, d=body_d-wall_th*2);\n    }\n    \n    // Top membrane ring\n    translate([0,0,body_h]) \n        cylinder(h=membrane_h, d=membrane_d);\n    \n    // Bridge block\n    translate([0,0,body_h+membrane_h]) {\n        difference() {\n            cube([bridge_w*4, body_d*0.6, bridge_h], center=true);\n            for(i=[-1,1]) \n                translate([i*bridge_w*1.5, 0, -1]) \n                    cube([bridge_w*0.8, body_d*0.7, bridge_h+2], center=true);\n        }\n    }\n}\n\nmodule tine(index) {\n    // Calculate position along bridge\n    pos = (index - (tine_count-1)/2) * tine_gap;\n    \n    // Full tine length\n    tine_len = tine_base_l + tine_free_l;\n    \n    translate([bridge_w*2+1, pos, body_h+membrane_h+bridge_h/2]) {\n        // Base part fixed under bridge\n        rotate([90,0,0]) \n            cube([tine_w, tine_base_l, tine_h]);\n        \n        // Free vibrating part\n        translate([0, tine_base_l+tine_free_l/2, -tine_h/2]) \n            cube([tine_w, tine_free_l, tine_h]);\n    }\n}\n\nmodule legs() {\n    // Three legs for stability\n    for(angle=[0,120,240]) {\n        rotate([0,0,angle]) \n            translate([body_d/2 * 0.7, 0, -leg_h]) \n                cylinder(h=leg_h, d=leg_d);\n    }\n}\n\n// Assembly\nunion() {\n    sansula_body();\n    \n    // All tines\n    for(i=[0:tine_count-1]) \n        tine(i);\n    \n    // Support legs\n    translate([0,0,-leg_h]) \n        legs();\n}",
    "renders": true
  },
  {
    "musical_instrument": "lamellophone",
    "openscad_code": "// Lamellophone (thumb piano) - realistic style, medium complexity\n// Overall size: ~90mm x 65mm x 35mm\n\n$fn = 32;\n\n// Main body parameters\nbody_len = 85;\nbody_wid = 60;\nbody_thk = 8;\ntop_thk  = 3;\n\n// Sound hole parameters\nhole_d = 6;\nhole_h = 4;\nholes_x = 35;\nholes_y = 20;\n\n// Tine parameters\ntine_len = [50, 45, 40, 35, 30, 25, 20];\ntine_wid = 1.6;\ntine_thk = 0.8;\ntine_pitch = 5;\ntine_start = 12;\n\n// Bridge parameters\nbridge_h = 5;\nbridge_w = 55;\nbridge_d = 3;\nbridge_pos = 38;\n\nmodule body() {\n    difference() {\n        // Main body block\n        translate([0, 0, body_thk/2])\n            cube([body_len, body_wid, body_thk], center=true);\n\n        // Top recess\n        translate([0, 0, body_thk - top_thk/2])\n            cube([body_len - 4, body_wid - 4, top_thk + 0.1], center=true);\n\n        // Sound holes\n        for (x = [-holes_x, 0, holes_x]) {\n            for (y = [-holes_y, 0, holes_y]) {\n                translate([x, y, body_thk - hole_h])\n                    cylinder(h = hole_h + 0.1, d = hole_d, center=false);\n            }\n        }\n    }\n}\n\nmodule bridge() {\n    // Metal bridge bar\n    color(\"silver\")\n    translate([bridge_pos, 0, body_thk + bridge_h/2])\n        cube([bridge_d, bridge_w, bridge_h], center=true);\n\n    // Bridge supports\n    for (y = [-bridge_w/2 + 5, bridge_w/2 - 5]) {\n        translate([bridge_pos, y, body_thk/2])\n            cube([bridge_d + 0.5, 4, body_thk + bridge_h], center=true);\n    }\n}\n\nmodule tines() {\n    for (i = [0 : len(tine_len) - 1]) {\n        y_pos = (i - (len(tine_len) - 1)/2) * tine_pitch;\n        color(\"silver\")\n        translate([tine_start, y_pos, body_thk + tine_thk/2])\n            cube([tine_len[i], tine_wid, tine_thk], center=false);\n    }\n}\n\nmodule back_support() {\n    // Reinforcement on back\n    translate([0, 0, -body_thk/2 - 1])\n        cube([body_len - 10, body_wid - 10, 2], center=true);\n}\n\nmodule rounded_edges() {\n    // Simple rounded corners using spheres\n    for (x = [-body_len/2 + 3, body_len/2 - 3])\n    for (y = [-body_wid/2 + 3, body_wid/2 - 3]) {\n        translate([x, y, 0])\n            sphere(d = 6);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    bridge();\n    tines();\n    back_support();\n    rounded_edges();\n}",
    "renders": true
  },
  {
    "musical_instrument": "jing",
    "openscad_code": "// Jing (Chinese traditional mirror) - Realistic style, medium complexity\n// Overall dimensions: 80mm diameter, 8mm thick\n\n$fn = 64;  // Smooth curves\n\n// Main parameters\nmirror_diameter = 80;\nmirror_thickness = 8;\nhandle_length = 40;\nhandle_width = 15;\nhandle_thickness = 6;\nboss_height = 3;\nboss_diameter = 12;\n\n// Texture parameters\nknurl_height = 0.5;\nknurl_size = 1.5;\nknurl_segments = 36;\n\n// Central boss module\nmodule central_boss() {\n    // Main boss\n    cylinder(h = boss_height, d = boss_diameter);\n    \n    // Decorative ring\n    translate([0, 0, boss_height])\n        cylinder(h = 0.5, d = boss_diameter + 2);\n}\n\n// Mirror back texture module\nmodule knurled_texture() {\n    for (i = [0:knurl_segments-1]) {\n        rotate([0, 0, i * 360/knurl_segments])\n            translate([mirror_diameter/2 - 5, 0, knurl_height/2])\n                cube([knurl_size, 2, knurl_height], center = true);\n    }\n}\n\n// Handle module\nmodule handle() {\n    // Main handle body\n    translate([0, -(mirror_diameter/2 + handle_length/2), -handle_thickness/2])\n        cube([handle_width, handle_length, handle_thickness], center = true);\n    \n    // Handle grip texture\n    for (i = [0:3]) {\n        translate([0, -(mirror_diameter/2 + 10 - i*10), 0])\n            rotate([90, 0, 0])\n                cylinder(h = handle_width + 1, d = 2);\n    }\n    \n    // Connection to mirror\n    difference() {\n        translate([0, -mirror_diameter/2, -handle_thickness/2])\n            cube([handle_width, 8, handle_thickness], center = true);\n        translate([0, -mirror_diameter/2 - 4, -handle_thickness/2 - 1])\n            cube([handle_width - 4, 10, handle_thickness + 2], center = true);\n    }\n}\n\n// Mirror assembly\nmodule jing_mirror() {\n    // Mirror back\n    difference() {\n        cylinder(h = mirror_thickness, d = mirror_diameter);\n        \n        // Recess for reflective surface\n        translate([0, 0, 0.5])\n            cylinder(h = mirror_thickness - 1, d = mirror_diameter - 4);\n    }\n    \n    // Mirror back decorations\n    translate([0, 0, mirror_thickness])\n        union() {\n            central_boss();\n            knurled_texture();\n        }\n    \n    // Handle\n    handle();\n    \n    // Reinforcement ring\n    translate([0, 0, -1])\n        cylinder(h = 2, d = mirror_diameter + 2);\n}\n\n// Generate the complete jing\njing_mirror();",
    "renders": true
  },
  {
    "musical_instrument": "lagerphone",
    "openscad_code": "// Lagerphone (stylized folk percussion instrument)\n// Medium-complexity, 3D-printable, ~80 mm tall\n\n// Overall scale factor\nscale_factor = 1.0;   // tweak to resize whole model\n\n// Main dimensions (mm)\nstaff_h = 85 * scale_factor;\nstaff_r = 5 * scale_factor;\nbase_h  = 8 * scale_factor;\nbase_r  = 15 * scale_factor;\ncap_h   = 4 * scale_factor;\ncap_r   = 7 * scale_factor;\n\n// Bottle-cap layer parameters\ncap_thick = 1.5 * scale_factor;\ncap_gap   = 0.5 * scale_factor;\ncaps_per_ring = 12;\nrings = 4;\n\n// Jingles (small discs)\njingle_d = 6 * scale_factor;\njingle_t = 0.8 * scale_factor;\n\nmodule staff() {\n    // Central wooden pole\n    cylinder(h = staff_h, r = staff_r, $fn = 32);\n}\n\nmodule base() {\n    // Flat circular foot\n    translate([0, 0, -base_h])\n        cylinder(h = base_h, r = base_r, $fn = 32);\n}\n\nmodule cap() {\n    // Top knob\n    translate([0, 0, staff_h])\n        cylinder(h = cap_h, r = cap_r, $fn = 32);\n}\n\nmodule bottle_cap_ring(height) {\n    // One ring of flattened bottle-caps\n    for (i = [0 : caps_per_ring - 1]) {\n        angle = i * 360 / caps_per_ring;\n        translate([0, 0, height])\n            rotate([0, 0, angle])\n                translate([staff_r + cap_thick + 1, 0, 0])\n                    rotate([90, 0, 0])\n                        difference() {\n                            cylinder(h = cap_thick, r1 = 6, r2 = 5.5, $fn = 24);\n                            cylinder(h = cap_thick + 0.1, r1 = 4.5, r2 = 4, $fn = 24);\n                        }\n    }\n}\n\nmodule jingle_ring(height) {\n    // Thin metal discs for jingling\n    for (i = [0 : caps_per_ring - 1]) {\n        angle = i * 360 / caps_per_ring + 15;\n        translate([0, 0, height])\n            rotate([0, 0, angle])\n                translate([staff_r + 4, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = jingle_t, r = jingle_d / 2, $fn = 24);\n    }\n}\n\nmodule lagerphone() {\n    union() {\n        staff();\n        base();\n        cap();\n\n        // Bottle-cap rings\n        for (z = [1 : rings]) {\n            bottle_cap_ring(z * (cap_thick + cap_gap));\n        }\n\n        // Jingle rings offset\n        for (z = [1 : rings]) {\n            jingle_ring(z * (cap_thick + cap_gap) + cap_thick / 2);\n        }\n    }\n}\n\n// Render the model\nlagerphone();",
    "renders": true
  },
  {
    "musical_instrument": "washboard",
    "openscad_code": "// Washboard - Realistic Style, Medium Complexity\n// 3D printable washboard for laundry use\n\n$fn = 32;  // Smooth curves\n\n// Overall dimensions\nwashboard_width = 60;\nwashboard_height = 80;\nwashboard_depth = 25;\nwall_thickness = 2;\n\n// Washboard frame\nmodule frame() {\n    difference() {\n        // Outer frame\n        cube([washboard_width, washboard_height, washboard_depth]);\n        \n        // Hollow out the inside\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([washboard_width-2*wall_thickness, washboard_height-2*wall_thickness, washboard_depth]);\n        \n        // Remove front face for wash surface\n        translate([-1, -1, 0])\n            cube([washboard_width+2, washboard_height+2, wall_thickness]);\n    }\n}\n\n// Corrugated wash surface\nmodule wash_surface() {\n    translate([0, 0, wall_thickness]) {\n        // Number of ridges\n        ridges = 25;\n        ridge_width = washboard_width / ridges;\n        ridge_height = 8;\n        \n        for (i = [0:ridges-1]) {\n            translate([i * ridge_width + ridge_width/2, 0, 0]) {\n                // Ridge base\n                cube([ridge_width * 0.8, washboard_height - 2*wall_thickness, ridge_height], center=true);\n                \n                // Rounded top of ridge\n                translate([0, 0, ridge_height/2])\n                    scale([ridge_width * 0.4, washboard_height - 2*wall_thickness, 1])\n                        sphere(ridge_height/2);\n            }\n        }\n    }\n}\n\n// Handle on top\nmodule handle() {\n    translate([washboard_width/2, -5, washboard_depth - 5]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=20, r1=8, r2=8);\n                cylinder(h=20, r1=6, r2=6);\n            }\n        }\n    }\n}\n\n// Support legs at bottom\nmodule legs() {\n    translate([10, washboard_height - 5, 0]) {\n        cube([5, 5, 10]);\n    }\n    translate([washboard_width - 15, washboard_height - 5, 0]) {\n        cube([5, 5, 10]);\n    }\n}\n\n// Assembly\nunion() {\n    frame();\n    wash_surface();\n    handle();\n    legs();\n}",
    "renders": true
  },
  {
    "musical_instrument": "bones",
    "openscad_code": "// Realistic Human Femur Bone - Medium Complexity\n// Designed for 3D printing with proper wall thickness and minimal overhangs\n\n$fn = 32; // Smooth curves for printing\n\n// Overall scale - target 90mm length\nscale_factor = 1;\n\n// Main bone structure\nmodule femur_bone() {\n    // Head of femur (ball joint)\n    translate([0, 0, 80]) \n        sphere(d = 24);\n    \n    // Neck connecting head to shaft\n    translate([0, 0, 70]) \n        rotate([0, 45, 0])\n        cylinder(h = 15, d1 = 12, d2 = 20, center = true);\n    \n    // Greater trochanter (lateral protrusion)\n    difference() {\n        translate([12, 0, 60])\n            rotate([0, -30, 0])\n            cylinder(h = 18, d1 = 16, d2 = 12, center = false);\n        \n        // Carve out trochanter fossa\n        translate([15, 0, 55])\n            sphere(d = 8);\n    }\n    \n    // Lesser trochanter (medial protrusion)\n    translate([-8, 0, 55])\n        rotate([0, 30, 45])\n        cylinder(h = 10, d1 = 10, d2 = 6, center = false);\n    \n    // Main shaft (diaphysis)\n    hull() {\n        // Upper shaft\n        translate([0, 0, 45])\n            cylinder(h = 25, d = 18);\n        \n        // Mid shaft (narrowest point)\n        translate([0, 0, 25])\n            cylinder(h = 20, d = 14);\n        \n        // Lower shaft flare\n        translate([0, 0, 10])\n            cylinder(h = 15, d = 18);\n    }\n    \n    // Distal end - medial condyle\n    difference() {\n        translate([-8, 0, 0])\n            sphere(d = 22);\n        \n        // Medial condyle notch\n        translate([-12, 0, -5])\n            cube([12, 8, 12], center = true);\n    }\n    \n    // Distal end - lateral condyle\n    difference() {\n        translate([8, 0, 0])\n            sphere(d = 22);\n        \n        // Lateral condyle notch\n        translate([12, 0, -5])\n            cube([12, 8, 12], center = true);\n    }\n    \n    // Intercondylar fossa between condyles\n    translate([0, 0, 2])\n        rotate([0, 90, 0])\n        cylinder(h = 20, d = 8);\n    \n    // Patellar surface (anterior groove)\n    difference() {\n        // Main anterior surface\n        translate([0, 9, 8])\n            rotate([90, 0, 0])\n            cylinder(h = 16, d = 20);\n        \n        // Groove for patella\n        for(i = [0:2]) {\n            translate([0, 9.5 + i*0.5, 8])\n                rotate([90, 0, 0])\n                cylinder(h = 16, d = 18 - i*2);\n        }\n    }\n    \n    // Linea aspera (posterior ridge)\n    for(i = [0:4]) {\n        translate([0, -9, 15 + i*6])\n            cube([2, 3, 4], center = true);\n    }\n}\n\n// Add subtle texture for realism\nmodule bone_texture() {\n    difference() {\n        femur_bone();\n        \n        // Small surface indentations for realism\n        for(i = [0:10]) {\n            rotate([0, 0, i*36])\n            translate([0, 0, 70 - i*5])\n                sphere(d = 1.5);\n        }\n        \n        for(i = [0:8]) {\n            rotate([0, 0, i*45 + 18])\n            translate([0, 0, 65 - i*6])\n                sphere(d = 1.2);\n        }\n    }\n}\n\n// Final assembly with proper orientation for printing\nrotate([90, 0, 0])\n    scale([scale_factor, scale_factor, scale_factor])\n        bone_texture();",
    "renders": true
  },
  {
    "musical_instrument": "spoons",
    "openscad_code": "// Realistic 3D printable spoon - medium complexity\n\n// Overall dimensions (in mm)\nlength = 100;\nbowl_d = 38;\nhandle_w = 10;\nhandle_t = 4;\nwall_t = 1.2;\n\nmodule spoon() {\n    // Main handle\n    difference() {\n        union() {\n            // Handle shaft\n            for(i=[0:4])\n                translate([i*20, 0, 0])\n                    scale([1, 0.92-0.02*i, 1])\n                        cube([20, handle_w, handle_t], center=true);\n\n            // Handle neck transition\n            translate([length-35, 0, 0])\n                scale([1.8, 1.8, 0.6])\n                    sphere(d=handle_w);\n        }\n\n        // Finger grip recesses\n        for(i=[0:2])\n            translate([15+i*25, 0, -handle_t/2+0.5])\n                rotate([90, 0, 0])\n                    cylinder(h=handle_w-2, d=6, $fn=20);\n    }\n\n    // Bowl\n    difference() {\n        union() {\n            // Outer bowl shell\n            scale([1, 1.1, 0.45])\n                sphere(d=bowl_d);\n\n            // Transition fillet\n            translate([length-35, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=15, r1=handle_w/2, r2=bowl_d/2-5, center=true);\n        }\n\n        // Inner cavity\n        translate([0, 0, -wall_t])\n            scale([1, 1, 0.55])\n                sphere(d=bowl_d - 2*wall_t);\n\n        // Drain hole\n        translate([0, 0, -wall_t-1])\n            cylinder(h=wall_t+2, d=3, $fn=20);\n    }\n\n    // Handle tip detail\n    translate([5-length, 0, 0])\n        difference() {\n            cylinder(h=handle_t, d=handle_w, center=true, $fn=30);\n            cylinder(h=handle_t+1, d=handle_w-4, center=true, $fn=30);\n        }\n\n    // Reinforcement ridge\n    translate([length/2-10, 0, handle_t/2])\n        rotate([90, 0, 0])\n            cylinder(h=length-40, r1=1, r2=1, center=true);\n}\n\n// Position for printing\nrotate([0, 180, 0])\n    translate([0, 0, bowl_d/2])\n        spoon();",
    "renders": true
  },
  {
    "musical_instrument": "castanets",
    "openscad_code": "// Castanets - Realistic Style (Medium Complexity)\n// A pair of shell-shaped castanets with connecting cord\n\n$fa = 2;\n$fs = 0.5;\n\n// Main parameters\nshell_length = 65;\nshell_width = 45;\nshell_thickness = 3;\nhandle_length = 25;\nhandle_width = 15;\nhandle_thickness = 4;\ncord_radius = 1.5;\ncord_length = 120;\nnum_holes = 6;\n\n// Shell surface detail\nridge_height = 2;\nnum_ridges = 12;\n\nmodule shell_half() {\n    difference() {\n        // Main shell body\n        union() {\n            // Outer shell\n            scale([1, 0.8, 0.5])\n                sphere(d=shell_width);\n            \n            // Handle extension\n            translate([-shell_width/2 - handle_length/2, 0, -shell_width/4])\n                cube([handle_length, handle_width, handle_thickness], center=true);\n        }\n        \n        // Inner cavity\n        translate([0, 0, -shell_width/4 + shell_thickness])\n            scale([0.85, 0.65, 0.4])\n                sphere(d=shell_width - 4);\n        \n        // Handle cavity\n        translate([-shell_width/2 - handle_length/2, 0, -shell_width/4])\n            cube([handle_length - 2, handle_width - 2, handle_thickness], center=true);\n    }\n}\n\nmodule shell_ridges() {\n    for (i = [0:num_ridges-1]) {\n        angle = i * 360 / num_ridges;\n        rotate([0, 0, angle])\n            translate([0, shell_width/3, -shell_width/4 + shell_thickness/2])\n                scale([0.1, 0.8, 0.2])\n                    sphere(d=shell_width/2);\n    }\n}\n\nmodule shell_with_detail() {\n    union() {\n        shell_half();\n        shell_ridges();\n    }\n}\n\nmodule cord_holes() {\n    for (i = [0:num_holes-1]) {\n        angle = i * 360 / num_holes;\n        rotate([0, 0, angle])\n            translate([shell_width/2 * cos(angle), shell_width/2 * sin(angle), 0])\n                rotate([90, 0, 0])\n                    cylinder(h=shell_width, r=cord_radius, center=true);\n    }\n}\n\nmodule castanet_piece() {\n    difference() {\n        shell_with_detail();\n        cord_holes();\n    }\n}\n\nmodule connecting_cord() {\n    translate([0, 0, -shell_width/2])\n        rotate([90, 0, 0])\n            cylinder(h=cord_length, r=cord_radius, center=true);\n}\n\n// Assemble the pair\ntranslate([cord_length/2, 0, 0])\n    castanet_piece();\n\nmirror([1, 0, 0])\n    translate([cord_length/2, 0, 0])\n        castanet_piece();\n\n// Connecting cord between pieces\ncolor(\"tan\")\n    connecting_cord();",
    "renders": true
  },
  {
    "musical_instrument": "cajón",
    "openscad_code": "// Cajón (medium-realistic, 3D-printable)\n// Wall thickness = 2 mm, overall ~75 mm tall\n\n// Parameters\nwall = 2;\nsize = [50, 30, 75];\n\n// Main shell (hollow box)\nmodule shell() {\n    difference() {\n        cube(size, center = true);\n        translate([0, 0, wall/2])\n            cube([size.x - 2*wall,\n                  size.y - 2*wall,\n                  size.z - wall], center = true);\n    }\n}\n\n// Tapa (snare side) with screws\nmodule tapa() {\n    // Tapa plate\n    color(\"SaddleBrown\")\n    translate([0, 0, size.z/2 - wall/2])\n        cube([size.x - 2*wall, size.y - 2*wall, wall], center = true);\n\n    // Screw heads (4 corners)\n    for (x = [-1, 1], y = [-1, 1]) {\n        translate([x * (size.x/2 - wall*2),\n                   y * (size.y/2 - wall*2),\n                   size.z/2])\n        cylinder(h = wall + 0.1, d = 3, $fn = 12);\n    }\n\n    // Sound hole (offset circle)\n    translate([0, -size.y/4, 0])\n        rotate([90, 0, 0])\n        cylinder(h = wall + 0.1, d = 8, center = true);\n}\n\n// Snare wires (two thin cylinders)\nmodule snares() {\n    for (i = [-1, 1])\n        translate([i * 8, 0, -size.z/4])\n            rotate([90, 0, 0])\n            cylinder(h = size.y - 2*wall, d = 0.6, center = true);\n}\n\n// Feet (simple pads on bottom corners)\nmodule feet() {\n    for (x = [-1, 1], y = [-1, 1])\n        translate([x * (size.x/2 - wall*2),\n                   y * (size.y/2 - wall*2),\n                   -size.z/2 - wall/2])\n            cylinder(h = wall, d = 6, $fn = 16);\n}\n\n// Assembly\nunion() {\n    shell();\n    tapa();\n    snares();\n    feet();\n}",
    "renders": true
  },
  {
    "musical_instrument": "cajon",
    "openscad_code": "// Cajón Drum - Realistic Medium Complexity\n// Overall dimensions: 60mm x 40mm x 50mm (scaled for 3D printing)\n\n// Parameters\ncajon_width = 60;\ncajon_depth = 40;\ncajon_height = 50;\nwall_thickness = 2;\nsoundhole_diameter = 12;\nsnare_count = 4;\nscrew_radius = 1;\nscrew_height = 1.5;\n\n// Main cajon body module\nmodule cajon_body() {\n    difference() {\n        // Outer shell\n        cube([cajon_width, cajon_depth, cajon_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n            cube([cajon_width - 2*wall_thickness, \n                  cajon_depth - 2*wall_thickness, \n                  cajon_height - wall_thickness], center=true);\n    }\n}\n\n// Front striking surface (tapa)\nmodule tapa() {\n    // Main tapa panel\n    translate([0, cajon_depth/2 - wall_thickness/2, 0])\n        cube([cajon_width - 2*wall_thickness, \n              wall_thickness, \n              cajon_height - 2*wall_thickness], center=true);\n    \n    // Screws around tapa\n    for(i = [-1, 1]) {\n        for(j = [-1, 1]) {\n            translate([i * (cajon_width/2 - 5), \n                       cajon_depth/2 - wall_thickness/2, \n                       j * (cajon_height/2 - 5)])\n                cylinder(r=screw_radius, h=screw_height, center=true);\n        }\n    }\n}\n\n// Sound hole\nmodule sound_hole() {\n    rotate([0, 90, 0])\n        translate([0, 0, cajon_width/2 - wall_thickness])\n            cylinder(r=soundhole_diameter/2, h=wall_thickness, center=true);\n}\n\n// Snare wires mechanism\nmodule snare_wires() {\n    // Snare mounting bar\n    translate([0, -cajon_depth/4, cajon_height/4])\n        cube([cajon_width - 4*wall_thickness, 1, 2], center=true);\n    \n    // Individual snare wires\n    for(i = [1:snare_count]) {\n        translate([-cajon_width/3 + i * cajon_width/(snare_count+1), \n                   -cajon_depth/4, \n                   cajon_height/4 + 1])\n            cylinder(r=0.3, h=10, center=true);\n    }\n}\n\n// Back panel with screws\nmodule back_panel() {\n    translate([0, -cajon_depth/2 + wall_thickness/2, 0])\n        cube([cajon_width - 2*wall_thickness, \n              wall_thickness, \n              cajon_height - 2*wall_thickness], center=true);\n    \n    // Back panel screws\n    for(i = [-1:0.5:1]) {\n        for(j = [-1:0.5:1]) {\n            translate([i * (cajon_width/2 - 5), \n                       -cajon_depth/2 + wall_thickness/2, \n                       j * (cajon_height/2 - 5)])\n                cylinder(r=screw_radius, h=screw_height, center=true);\n        }\n    }\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    foot_height = 2;\n    foot_radius = 3;\n    \n    for(i = [-1, 1]) {\n        translate([i * (cajon_width/2 - 5), \n                   -cajon_depth/2 + 5, \n                   -cajon_height/2 - foot_height/2])\n            cylinder(r=foot_radius, h=foot_height, center=true);\n        \n        translate([i * (cajon_width/2 - 5), \n                   cajon_depth/2 - 5, \n                   -cajon_height/2 - foot_height/2])\n            cylinder(r=foot_radius, h=foot_height, center=true);\n    }\n}\n\n// Assemble the cajon\nunion() {\n    cajon_body();\n    tapa();\n    back_panel();\n    translate([0, 0, 0])\n        difference() {\n            cajon_body();\n            sound_hole();\n        }\n    snare_wires();\n    rubber_feet();\n}",
    "renders": true
  },
  {
    "musical_instrument": "pandero",
    "openscad_code": "// Pandero (Spanish frame drum) - Realistic style, medium complexity\n// Diameter: 80mm, Height: 25mm (3D printable)\n\n$fn = 50;\n\nmodule drum_shell() {\n    difference() {\n        // Main wooden shell\n        cylinder(h=20, d=80, center=true);\n        \n        // Hollow inside\n        cylinder(h=22, d=74, center=true);\n        \n        // Groove for drumhead\n        translate([0, 0, 10.5])\n            cylinder(h=1.5, d=78);\n    }\n}\n\nmodule wooden_rim() {\n    // Top rim\n    translate([0, 0, 10.5])\n        cylinder(h=3, d=84);\n    \n    // Bottom rim\n    translate([0, 0, -10.5])\n        cylinder(h=3, d=84);\n}\n\nmodule metal_jingles() {\n    // Jingle holder ring\n    difference() {\n        cylinder(h=3, d=86, center=true);\n        cylinder(h=4, d=82, center=true);\n    }\n    \n    // 8 pairs of jingles around the rim\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([42, 0, 0])\n                jingle_pair();\n    }\n}\n\nmodule jingle_pair() {\n    // Jingle holder\n    rotate([90, 0, 0])\n        cylinder(h=4, d=1.5);\n    \n    // Two jingles per holder\n    for (j = [-1, 1]) {\n        translate([0, j * 2.5, 0]) {\n            // Jingle disc\n            rotate([90, 0, 0])\n                cylinder(h=0.8, d=5);\n            \n            // Jingle hole\n            rotate([90, 0, 0])\n                translate([0, 0, -0.1])\n                    cylinder(h=1, d=2);\n        }\n    }\n}\n\nmodule drumhead() {\n    // Drumhead membrane\n    translate([0, 0, 12])\n        cylinder(h=0.5, d=78);\n    \n    // Tucking ring detail\n    translate([0, 0, 11.5])\n        cylinder(h=1, d=76);\n}\n\nmodule tuning_hardware() {\n    // 6 tuning lugs\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([39, 0, -8])\n                tuning_lug();\n    }\n}\n\nmodule tuning_lug() {\n    // Lug base\n    cube([4, 2, 10], center=true);\n    \n    // Screw head\n    translate([0, 0, 6])\n        cylinder(h=2, d=3);\n    \n    // Washer detail\n    translate([0, 0, 5])\n        cylinder(h=0.5, d=4);\n}\n\n// Assembly\nunion() {\n    drum_shell();\n    wooden_rim();\n    drumhead();\n    metal_jingles();\n    tuning_hardware();\n}",
    "renders": true
  },
  {
    "musical_instrument": "zabumba",
    "openscad_code": "// Realistic Zabumba (Brazilian bass drum) - medium complexity\n// 3D printable model, ~75mm diameter\n\n// Parameters\nshell_d = 75;\nshell_h = 35;\nrim_w = 5;\nhoop_d = shell_d + 2*rim_w;\nhoop_h = 6;\nhoop_t = 3;\ntuning_lug_n = 8;\ntuning_lug_w = 4;\ntuning_lug_h = 15;\ntuning_lug_t = 2;\ntension_rod_r = 1.5;\ndrumhead_t = 1;\n\n// Shell body\nmodule shell() {\n    difference() {\n        cylinder(d=shell_d, h=shell_h, $fn=64);\n        translate([0,0,drumhead_t])\n            cylinder(d=shell_d-4, h=shell_h-2*drumhead_t, $fn=64);\n    }\n}\n\n// Top and bottom hoops with rim\nmodule hoop(top=true) {\n    z = top ? shell_h : 0;\n    translate([0,0,z])\n    difference() {\n        cylinder(d=hoop_d, h=hoop_h, $fn=64);\n        // Inner cutout\n        translate([0,0,hoop_t])\n            cylinder(d=shell_d, h=hoop_h-2*hoop_t, $fn=64);\n        // Bottom chamfer\n        translate([0,0,0])\n            cylinder(d1=shell_d-2, d2=shell_d, h=hoop_t, $fn=64);\n    }\n}\n\n// Single tuning lug\nmodule tuning_lug() {\n    difference() {\n        // Main body\n        translate([-tuning_lug_w/2, -shell_d/2 - rim_w - 2, 0])\n            cube([tuning_lug_w, tuning_lug_h, tuning_lug_t]);\n        // Hole for tension rod\n        translate([0, -shell_d/2 - rim_w - 2 + tuning_lug_h/2, tuning_lug_t/2])\n            rotate([0,90,0])\n                cylinder(r=tension_rod_r, h=tuning_lug_w+1, $fn=16);\n    }\n}\n\n// Tension rod\nmodule tension_rod() {\n    translate([0, -shell_d/2 - rim_w - 2 + tuning_lug_h/2 - 3, tuning_lug_t/2])\n        rotate([90,0,0])\n            cylinder(r=tension_rod_r, h=rim_w+5, $fn=16);\n}\n\n// Drumhead membrane\nmodule drumhead(top=true) {\n    z = top ? shell_h-drumhead_t : 0;\n    translate([0,0,z])\n        cylinder(d=shell_d-2, h=drumhead_t, $fn=64);\n}\n\n// Assembly\nunion() {\n    // Shell\n    shell();\n    \n    // Hoops\n    hoop(true);\n    hoop(false);\n    \n    // Tuning lugs and rods\n    for(i=[0:tuning_lug_n-1]) {\n        angle = i*360/tuning_lug_n;\n        rotate([0,0,angle]) {\n            tuning_lug();\n            tension_rod();\n        }\n    }\n    \n    // Drumheads\n    drumhead(true);\n    drumhead(false);\n}",
    "renders": true
  },
  {
    "musical_instrument": "repique",
    "openscad_code": "// Repique - medium complexity, realistic style\n// Overall dimensions: ~85 mm tall\n\n$fn = 64; // smooth curves\n\nmodule shell(h=60, r=35, wall=2.5) {\n    // main cylindrical shell with slight taper\n    difference() {\n        cylinder(h=h, r1=r*1.02, r2=r, center=false);\n        translate([0,0,-1])\n            cylinder(h=h+2, r1=r-wall, r2=r-wall, center=false);\n    }\n}\n\nmodule counterhoop(r=36, h=5) {\n    // metal counterhoop with 6 tuning-lug slots\n    difference() {\n        cylinder(h=h, r=r, center=false);\n        translate([0,0,-1])\n            cylinder(h=h+2, r=r-3.5, center=false);\n    }\n    for(a=[0:60:359]) {\n        rotate([0,0,a])\n            translate([r-1.5, 0, h/2])\n                cube([3, 6, h+0.1], center=true);\n    }\n}\n\nmodule lug(r=36, h=60) {\n    // single tuning lug\n    translate([r-2, 0, h-10])\n        rotate([90,0,0])\n            union() {\n                // threaded bolt\n                cylinder(h=12, r=1.5);\n                // wingnut\n                translate([0,0,12])\n                    cylinder(h=4, r=3);\n                translate([0,0,12])\n                    scale([1.8,0.8,1])\n                        cylinder(h=4, r=3);\n            }\n}\n\nmodule drumhead(r=35) {\n    // thin translucent membrane\n    translate([0,0,0.1])\n        cylinder(h=0.5, r=r-0.5);\n}\n\nmodule tensionrod(r=36, h=60) {\n    // tension rod passing through hoop into shell\n    translate([r-2, 0, h])\n        rotate([90,0,0])\n            cylinder(h=15, r=1);\n}\n\nmodule stand_mount(r=35) {\n    // bracket on bottom for stand\n    translate([0,0,-8])\n        rotate([90,0,0])\n            union() {\n                difference() {\n                    cylinder(h=8, r1=8, r2=6, center=false);\n                    translate([0,0,-1])\n                        cylinder(h=10, r1=6, r2=4, center=false);\n                }\n                // three screw holes\n                for(a=[0:120:240])\n                    rotate([0,0,a])\n                        translate([6,0,4])\n                            rotate([0,90,0])\n                                cylinder(h=10, r=1.5);\n            }\n}\n\nmodule shell_decoration() {\n    // 2 decorative rings\n    color(\"brown\")\n    for(z=[10, 45]) {\n        translate([0,0,z])\n            difference() {\n                cylinder(h=2.5, r=35.5);\n                cylinder(h=2.7, r=33);\n            }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        shell();\n        counterhoop();\n        drumhead();\n        stand_mount();\n        shell_decoration();\n    }\n    // 6 tuning lugs\n    for(a=[0:60:359])\n        rotate([0,0,a])\n            lug();\n            \n    // 6 tension rods\n    for(a=[30:60:359])\n        rotate([0,0,a])\n            tensionrod();\n}\n\n// Optional base to keep print stable\ntranslate([0,0,-10])\n    cylinder(h=1, r=38);",
    "renders": true
  },
  {
    "musical_instrument": "timbal",
    "openscad_code": "// Realistic 3D Printable Timbal Drum (Medium Complexity)\n// Overall size ~80mm diameter, 60mm height\n\nmodule timbal_shell() {\n    // Main shell body - hollow cylinder with slight taper\n    difference() {\n        cylinder(h=50, d1=82, d2=78, $fn=64);  // Slightly tapered shell\n        translate([0,0,2])  // Create wall thickness\n        cylinder(h=48, d1=76, d2=72, $fn=64);\n    }\n}\n\nmodule tuning_lugs() {\n    // 6 tuning lugs around the shell\n    for(i=[0:5]) {\n        rotate([0,0,i*60])\n        translate([41,0,35])  // Position along rim\n        rotate([90,0,0])\n        difference() {\n            // Main lug body\n            cylinder(h=12, d1=6, d2=8, $fn=16);\n            // Tuning key hole\n            translate([0,0,-1])\n            cube([4,2,14], center=true);\n        }\n    }\n}\n\nmodule drum_head() {\n    // Drum head membrane\n    translate([0,0,50])\n    cylinder(h=0.5, d=82, $fn=64);\n    \n    // Tension ring\n    translate([0,0,49])\n    difference() {\n        cylinder(h=2, d=86, $fn=64);  // Outer ring\n        cylinder(h=3, d=80, $fn=64);  // Cut inner\n    }\n}\n\nmodule support_legs() {\n    // 3 support legs for stability\n    for(i=[0:2]) {\n        rotate([0,0,i*120])\n        translate([35,0,-8])\n        cube([6,6,8], center=true);\n    }\n}\n\nmodule bottom_port() {\n    // Resonance port hole in bottom\n    translate([0,0,0])\n    difference() {\n        cylinder(h=3, d=82, $fn=64);  // Bottom plate\n        translate([0,0,-1])\n        cylinder(h=5, d=20, $fn=32);  // Port hole\n    }\n}\n\nmodule bearing_edge() {\n    // Rounded bearing edge for drum head contact\n    translate([0,0,48])\n    difference() {\n        cylinder(h=2, d=82, $fn=64);\n        translate([0,0,-1])\n        cylinder(h=4, d=78, $fn=64);\n    }\n}\n\n// Assemble the timbal\nunion() {\n    timbal_shell();\n    tuning_lugs();\n    drum_head();\n    support_legs();\n    bottom_port();\n    bearing_edge();\n}",
    "renders": true
  },
  {
    "musical_instrument": "bombo",
    "openscad_code": "// Bombo (Argentine drum) - Realistic style, medium complexity\n// Overall size: ~80mm diameter\n\n// Parameters\n$fn = 64;\nshell_thickness = 2;\ndrum_diameter = 80;\ndrum_height = 45;\nskin_thickness = 1.5;\nhoop_width = 4;\nhoop_height = 3;\ntension_rod_count = 8;\ntension_rod_diameter = 2;\nlug_height = 8;\nlug_width = 6;\nlug_depth = 4;\n\n// Main shell\nmodule shell() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = drum_height, d = drum_diameter);\n        \n        // Hollow inside\n        translate([0, 0, shell_thickness])\n            cylinder(h = drum_height - shell_thickness*2, d = drum_diameter - shell_thickness*2);\n    }\n}\n\n// Drum skin (top membrane)\nmodule skin() {\n    translate([0, 0, drum_height - skin_thickness/2])\n        cylinder(h = skin_thickness, d = drum_diameter - hoop_width*2);\n}\n\n// Tension hoop\nmodule tension_hoop() {\n    difference() {\n        // Main hoop\n        cylinder(h = hoop_height, d = drum_diameter + hoop_width*2);\n        \n        // Remove center\n        translate([0, 0, -0.1])\n            cylinder(h = hoop_height + 0.2, d = drum_diameter);\n    }\n}\n\n// Lug for tension rod\nmodule lug() {\n    difference() {\n        // Main lug body\n        cube([lug_width, lug_depth, lug_height], center = true);\n        \n        // Hole for tension rod\n        rotate([90, 0, 0])\n            translate([0, 0, -lug_depth/2 - 0.1])\n                cylinder(h = lug_depth + 0.2, d = tension_rod_diameter + 1);\n    }\n}\n\n// Tension rod\nmodule tension_rod() {\n    cylinder(h = drum_height/2, d = tension_rod_diameter);\n    \n    // Nut at top\n    translate([0, 0, drum_height/2])\n        cylinder(h = 3, d = 4, $fn = 6);\n}\n\n// Assembly\nunion() {\n    // Main drum parts\n    shell();\n    skin();\n    \n    // Tension hoop on top\n    translate([0, 0, drum_height])\n        tension_hoop();\n    \n    // Lugs and tension rods\n    for (i = [0 : tension_rod_count-1]) {\n        angle = i * 360 / tension_rod_count;\n        \n        // Lug attached to shell\n        translate([drum_diameter/2 + lug_depth/2, 0, drum_height/2])\n            rotate([0, 0, angle])\n                lug();\n        \n        // Tension rod\n        translate([drum_diameter/2 + lug_depth + 5, 0, drum_height + hoop_height/2])\n            rotate([90, 0, angle])\n                tension_rod();\n    }\n    \n    // Bottom reinforcement ring\n    translate([0, 0, 0])\n        cylinder(h = 5, d = drum_diameter + 2);\n}",
    "renders": true
  },
  {
    "musical_instrument": "piano",
    "openscad_code": "// Realistic Medium-Complexity Piano\n// Approx. 80 mm wide\n\n// Overall dimensions\npiano_width = 80;\npiano_depth = 40;\npiano_height = 30;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main body (top and sides in one shell)\nmodule piano_body() {\n    difference() {\n        // Outer shell\n        union() {\n            // Top lid\n            translate([0, 0, piano_height - wall])\n                cube([piano_width, piano_depth, wall], center = true);\n            \n            // Left side\n            translate([-piano_width/2 + wall/2, 0, piano_height/2 - wall/2])\n                cube([wall, piano_depth, piano_height - wall], center = true);\n            \n            // Right side\n            translate([piano_width/2 - wall/2, 0, piano_height/2 - wall/2])\n                cube([wall, piano_depth, piano_height - wall], center = true);\n            \n            // Back\n            translate([0, piano_depth/2 - wall/2, piano_height/2 - wall/2])\n                cube([piano_width, wall, piano_height - wall], center = true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall/2])\n            cube([piano_width - 2*wall, piano_depth - 2*wall, piano_height - wall], center = true);\n    }\n}\n\n// Keyboard section\nmodule keyboard() {\n    // White keys\n    for (i = [-7:7]) {\n        translate([i*5, piano_depth/2 - 3, wall/2])\n            cube([4.5, 6, 2], center = true);\n    }\n    \n    // Black keys\n    for (i = [-6:6]) {\n        if (i != -3 && i != 0 && i != 3) { // Skip positions without black keys\n            translate([i*5 + 2.5, piano_depth/2 - 3, 2.5])\n                cube([3, 4, 3], center = true);\n        }\n    }\n}\n\n// Music stand\nmodule music_stand() {\n    translate([0, -piano_depth/2 + 5, piano_height - 3])\n        rotate([60, 0, 0])\n            cube([piano_width - 10, 1.5, 8]);\n}\n\n// Piano legs\nmodule legs() {\n    leg_positions = [\n        [-piano_width/2 + 5, piano_depth/2 - 5],\n        [piano_width/2 - 5, piano_depth/2 - 5],\n        [-piano_width/2 + 5, -piano_depth/2 + 5],\n        [piano_width/2 - 5, -piano_depth/2 + 5]\n    ];\n    \n    for (pos = leg_positions) {\n        translate([pos[0], pos[1], 0])\n            cylinder(h = 8, d = 3, $fn = 16);\n    }\n}\n\n// Pedals\nmodule pedals() {\n    translate([0, piano_depth/2 - 1, 4])\n        rotate([90, 0, 0])\n            for (i = [-1:1]) {\n                translate([i*6, 0, 0])\n                    cylinder(h = 8, d = 1.5, $fn = 8);\n            }\n}\n\n// Assemble the piano\nunion() {\n    piano_body();\n    keyboard();\n    music_stand();\n    legs();\n    pedals();\n}",
    "renders": true
  },
  {
    "musical_instrument": "organ",
    "openscad_code": "// Human Heart Model - Realistic Style, Medium Complexity\n// Dimensions: ~80mm x 60mm x 50mm\n\n$fn = 64; // Smooth curves\nwall_thickness = 2;\n\nmodule heart_ventricles() {\n    // Left ventricle (larger)\n    translate([-10, 0, 0])\n        scale([1.2, 1, 1.1])\n        sphere(r = 15);\n    \n    // Right ventricle (smaller)\n    translate([10, 0, -2])\n        scale([0.9, 0.9, 0.9])\n        sphere(r = 12);\n}\n\nmodule heart_atria() {\n    // Left atrium\n    translate([-12, 0, 20])\n        scale([1, 0.8, 0.6])\n        sphere(r = 10);\n    \n    // Right atrium\n    translate([12, 0, 18])\n        scale([0.9, 0.8, 0.7])\n        sphere(r = 9);\n}\n\nmodule aorta() {\n    // Main aorta arch\n    translate([0, 0, 25])\n        rotate([0, -90, 0])\n        cylinder(h = 30, r1 = 6, r2 = 6);\n    \n    // Aortic arch curve\n    translate([15, 0, 30])\n        rotate([0, 0, 90])\n        rotate([90, 0, 0])\n        cylinder(h = 25, r1 = 6, r2 = 5);\n    \n    // Aortic root\n    translate([0, 0, 20])\n        cylinder(h = 5, r1 = 8, r2 = 6);\n}\n\nmodule vena_cava() {\n    // Superior vena cava\n    translate([15, 0, 25])\n        rotate([0, -45, 0])\n        cylinder(h = 20, r1 = 4, r2 = 4);\n    \n    // Inferior vena cava\n    translate([15, 0, -10])\n        rotate([0, 45, 0])\n        cylinder(h = 15, r1 = 5, r2 = 5);\n}\n\nmodule pulmonary_artery() {\n    // Main pulmonary artery\n    translate([-15, 0, 22])\n        rotate([0, -120, 0])\n        cylinder(h = 20, r1 = 5, r2 = 4);\n    \n    // Pulmonary trunk\n    translate([-10, 0, 15])\n        cylinder(h = 8, r1 = 7, r2 = 5);\n}\n\nmodule coronary_arteries() {\n    // Left coronary\n    for(i = [0:5:25]) {\n        translate([-8 + sin(i) * 3, cos(i) * 3, 15 - i/2])\n            rotate([90, 0, i * 10])\n            cylinder(h = 5, r1 = 1.5, r2 = 1);\n    }\n    \n    // Right coronary\n    for(i = [0:5:20]) {\n        translate([8 + sin(i) * 2, cos(i) * 2, 12 - i/2])\n            rotate([90, 0, -i * 10])\n            cylinder(h = 4, r1 = 1.2, r2 = 0.8);\n    }\n}\n\nmodule heart_base() {\n    union() {\n        // Main heart body\n        heart_ventricles();\n        heart_atria();\n        \n        // Major vessels\n        aorta();\n        vena_cava();\n        pulmonary_artery();\n        \n        // Coronary arteries\n        coronary_arteries();\n    }\n}\n\n// Create hollow heart with proper wall thickness\ndifference() {\n    // Outer heart\n    heart_base();\n    \n    // Hollow interior\n    scale([0.8, 0.8, 0.8])\n    translate([0, 0, 2])\n    heart_base();\n}\n\n// Base for 3D printing\ntranslate([0, 0, -15])\n    cube([40, 30, 3], center = true);",
    "renders": true
  },
  {
    "musical_instrument": "harpsichord",
    "openscad_code": "$fa=2; $fs=0.5;\n\n// Overall dimensions\nlength = 80;      // mm\nwidth  = 35;\nheight = 12;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main body of harpsichord\nmodule body() {\n    difference() {\n        hull() {\n            translate([-length/2, -width/2, 0])\n                cube([length, width, height]);\n            translate([-length/2+3, -width/2+3, -2])\n                cube([length-6, width-6, height+2]);\n        }\n        \n        // Hollow cavity\n        translate([-length/2+wall, -width/2+wall, wall])\n            cube([length-2*wall, width-2*wall, height-wall]);\n    }\n}\n\n// Lid with hinge\nmodule lid() {\n    translate([-length/2, -width/2-1, height-1]) {\n        rotate([60,0,0]) {\n            difference() {\n                cube([length, width+2, 2]);\n                translate([wall, wall, -0.5])\n                    cube([length-2*wall, width+2-2*wall, 2.5]);\n            }\n        }\n    }\n}\n\n// Keyboard section\nmodule keyboard() {\n    translate([-length/2+8, -width/2-1, 0]) {\n        difference() {\n            cube([20, width+2, 5]);\n            translate([wall, wall, 1])\n                cube([20-2*wall, width+2-2*wall, 4]);\n        }\n    }\n}\n\n// Individual keys\nmodule key(x, white=true) {\n    w = white ? 1.8 : 1.0;\n    h = white ? 3 : 4;\n    color(white ? \"white\" : \"black\")\n    translate([x, -width/2, 5])\n        cube([w, width/3, h], center=true);\n}\n\n// Key rows\nmodule keys() {\n    // White keys\n    for(i=[0:9])\n        key(-length/2+9 + i*1.9);\n    \n    // Black keys\n    for(i=[0,1,3,4,5,7,8])\n        key(-length/2+9.5 + i*1.9, false);\n}\n\n// Bridge for strings\nmodule bridge() {\n    translate([length/2-15, -width/4, height-2]) {\n        cube([10, 2, 2]);\n        for(i=[0:1:8])\n            translate([i, 1, 1])\n                cylinder(h=1, r=0.3, $fn=8);\n    }\n}\n\n// Hitch pins\nmodule hitch_pins() {\n    translate([length/2-5, 0, height-2]) {\n        cube([5, 1, 2]);\n        for(i=[0:1:7])\n            translate([2, -width/4 + i*width/8, 1])\n                cylinder(h=1, r=0.3, $fn=8);\n    }\n}\n\n// Sound hole rose\nmodule rose() {\n    translate([0, 0, height-1]) {\n        difference() {\n            cylinder(h=1, r=4, $fn=32);\n            cylinder(h=1.5, r=3, $fn=32);\n        }\n        for(i=[0:4]) {\n            rotate([0,0,i*72])\n                translate([2,0,0])\n                    cube([4,0.5,1]);\n        }\n    }\n}\n\n// Legs\nmodule leg(x, y) {\n    translate([x, y, -3]) {\n        cylinder(h=3, r=1.5, $fn=12);\n        sphere(r=1.5, $fn=12);\n    }\n}\n\n// Assemble the harpsichord\nunion() {\n    body();\n    lid();\n    keyboard();\n    keys();\n    bridge();\n    hitch_pins();\n    rose();\n    leg(-length/2+5, -width/2+5);\n    leg(length/2-5, -width/2+5);\n    leg(-length/2+5, width/2-5);\n    leg(length/2-5, width/2-5);\n}",
    "renders": true
  },
  {
    "musical_instrument": "synthesizer",
    "openscad_code": "// Mini analog-style synthesizer (≈ 90 mm wide)\n// Designed for 3D printing – no unsupported overhangs, 2 mm wall thicknesses\n\n// overall scale\nsynth_scale = 1.0;\n\n// main body shell\nmodule body() {\n    difference() {\n        // main enclosure box\n        translate([-45, -20, 0])\n            cube([90, 40, 15], center = false);\n\n        // hollow inside\n        translate([-43, -18, 2])\n            cube([86, 36, 13], center = false);\n    }\n}\n\n// side wooden end-cheeks\nmodule end_cheek(side) {          // side = 1 (right) or -1 (left)\n    translate([side * 46, 0, 0])\n        cube([4, 44, 15], center = true);\n}\n\n// small speaker grill pattern\nmodule speaker_grill() {\n    difference() {\n        translate([0, 0, 15.1])\n            cube([16, 16, 1], center = true);\n        for (x = [-6:3:6])\n            for (y = [-6:3:6])\n                translate([x, y, 15.2])\n                    cylinder(h = 1.2, d = 1.5, $fn = 8);\n    }\n}\n\n// classic knob module\nmodule knob(x, y, h, r) {\n    translate([x, y, 15 + h/2])\n        difference() {\n            cylinder(h = h, r = r, $fn = 20);\n            translate([0, 0, -0.1])\n                cylinder(h = h + 0.2, r = r - 1.2, $fn = 20);\n        }\n}\n\n// slider cap\nmodule slider(x, y, len) {\n    translate([x, y, 15])\n        cube([2, len, 4], center = true);\n}\n\n// keyboard keys\nmodule key(x, white = true) {\n    color(white ? \"white\" : \"black\")\n        translate([x, 0, 15])\n            cube([white ? 4 : 2.4, 10, white ? 2 : 3], center = true);\n}\n\n// small display screen\nmodule display() {\n    translate([0, 12, 15.1])\n        cube([24, 6, 1], center = true);\n}\n\n// patch jack socket (simple cylinder)\nmodule jack(x, y) {\n    translate([x, y, 15])\n        cylinder(h = 3, r = 2.5, $fn = 16);\n}\n\n// main assembly\nscale(synth_scale) {\n    body();\n\n    // wooden cheeks\n    end_cheek(1);\n    end_cheek(-1);\n\n    // small speaker left side\n    translate([-30, -10, 0])\n        speaker_grill();\n\n    // display\n    display();\n\n    // three big knobs top row\n    knob(-25, -5, 4, 4);\n    knob(-15, -5, 4, 4);\n    knob(-5, -5, 4, 4);\n\n    // four small knobs bottom row\n    knob(-30, 5, 2.5, 2.5);\n    knob(-20, 5, 2.5, 2.5);\n    knob(-10, 5, 2.5, 2.5);\n    knob(0, 5, 2.5, 2.5);\n\n    // two sliders right side\n    slider(20, -6, 12);\n    slider(26, -6, 12);\n\n    // mini keyboard\n    for (i = [0:7])\n        key(-20 + i * 4.5, white = (i % 7 != 1 && i % 7 != 4 && i % 7 != 6));\n\n    // four patch jacks top right\n    jack(35, -10);\n    jack(35, -6);\n    jack(35, -2);\n    jack(35, 2);\n}",
    "renders": true
  },
  {
    "musical_instrument": "accordion",
    "openscad_code": "// Realistic 3D-printable accordion (≈90 mm wide)\n// Medium complexity model built from primitives\n\n$fn = 32;                 // Smooth curves\nwall = 1.5;               // 3D-printable wall thickness\nbellow_h = 40;            // Main bellows height\nbellow_w = 80;            // Bellows width\nbellow_d = 40;            // Bellows depth\nkey_w = 6;                // Piano-key width\nkey_l = 28;               // Piano-key length\n\n// Main assembly\ndifference() {\n    union() {\n        // Left-hand keyboard box\n        translate([-bellow_w/2 - key_l - 4, 0, 0])\n            keyboard_box(key_l, bellow_d - 6, bellow_h);\n\n        // Right-hand button box\n        translate([bellow_w/2 + 4, 0, 0])\n            button_box(key_l, bellow_d - 6, bellow_h);\n\n        // Central bellows\n        bellows(bellow_w, bellow_d, bellow_h);\n    }\n\n    // Handle hole on top\n    translate([0, bellow_d/2 + 2, bellow_h + wall])\n        rotate([90, 0, 0])\n            cylinder(h = 20, d = 10, $fn = 16);\n\n    // Strap slot on back\n    translate([0, -bellow_d/2 - 1, bellow_h/2])\n        cube([bellow_w + 2*key_l + 8, wall*2, 6], center = true);\n}\n\nmodule keyboard_box(w, d, h) {\n    difference() {\n        // Main box\n        cube([w, d, h], center = true);\n\n        // Hollow inside\n        translate([0, 0, -wall/2])\n            cube([w - 2*wall, d - 2*wall, h - wall], center = true);\n\n        // Keyboard front opening\n        translate([w/2 - wall/2, 0, 0])\n            cube([wall + 0.1, d - 4*wall, h - 2*wall], center = true);\n    }\n\n    // Piano keys (white)\n    for (i = [-3:3]) {\n        translate([w/2 - wall - 1, i*(key_w + 1), -h/2 + 2])\n            cube([key_l - 2, key_w, 2]);\n    }\n}\n\nmodule button_box(w, d, h) {\n    difference() {\n        // Main box\n        cube([w, d, h], center = true);\n\n        // Hollow inside\n        translate([0, 0, -wall/2])\n            cube([w - 2*wall, d - 2*wall, h - wall], center = true);\n\n        // Button holes\n        for (r = [0:3])\n            for (c = [-2:2]) {\n                translate([-w/2 + 6 + r*5, c*5, h/2 - 5])\n                    cylinder(h = 3, d = 3, $fn = 12);\n            }\n    }\n}\n\nmodule bellows(w, d, h) {\n    // Bottom fixed plate\n    translate([0, 0, 0])\n        cube([w + 4, d + 4, wall], center = true);\n\n    // Top fixed plate\n    translate([0, 0, h])\n        cube([w + 4, d + 4, wall], center = true);\n\n    // Bellow folds\n    folds = 8;\n    for (i = [1:folds-1]) {\n        z = i * h / folds;\n        color(\"darkgrey\")\n            translate([0, 0, z])\n                difference() {\n                    cube([w + 4 - 2*i*2, d + 4 - 2*i*2, wall], center = true);\n                    cube([w + 4 - 2*i*2 - 2*wall, d + 4 - 2*i*2 - 2*wall, wall + 0.1], center = true);\n                }\n    }\n\n    // Corner straps\n    for (p = [[-1,-1], [1,-1], [-1,1], [1,1]]) {\n        translate([p[0]*(w/2 + 2), p[1]*(d/2 + 2), h/2])\n            rotate([0, 0, 45])\n                cube([3, 3, h + wall], center = true);\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "melodica",
    "openscad_code": "// Melodica - Realistic style, medium complexity\n// Basic dimensions (in mm)\nbody_length = 85;\nbody_width = 35;\nbody_height = 25;\nkeyboard_length = 70;\nkeyboard_width = 20;\nkey_width = 4;\nkey_height = 2;\nkey_length = 15;\nmouthpiece_length = 20;\nmouthpiece_diameter = 6;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main body module\nmodule melodica_body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-body_length/2, -body_width/2, 0])\n                cube([body_length, body_width, body_height]);\n            translate([-body_length/2+5, -body_width/2+2, -5])\n                cube([body_length-10, body_width-4, body_height+5]);\n        }\n        \n        // Hollow interior\n        translate([-body_length/2+wall, -body_width/2+wall, wall])\n            cube([body_length-wall*2, body_width-wall*2, body_height-wall*1.5]);\n    }\n}\n\n// Keyboard section\nmodule keyboard() {\n    translate([-keyboard_length/2, -body_width/2-1, body_height]) {\n        // Keyboard base\n        cube([keyboard_length, keyboard_width+2, key_height+2]);\n        \n        // White keys (7 keys)\n        for(i = [0:6]) {\n            translate([i*(key_width+0.5)+1, 1, key_height+2]) {\n                // Key top\n                cube([key_width, key_length, key_height]);\n                // Key front rounded\n                translate([key_width/2, key_length, key_height/2])\n                    rotate([90,0,0])\n                        cylinder(h=key_width, r=key_height/2, $fn=20);\n            }\n        }\n        \n        // Black keys (5 keys)\n        for(i = [0:4]) {\n            if(i != 2) {\n                translate([i*(key_width+0.5)+(key_width+0.25)+1, -2, key_height+2.5]) {\n                    color(\"black\")\n                    cube([key_width*0.7, key_length*0.7, key_height*1.5]);\n                }\n            }\n        }\n    }\n}\n\n// Mouthpiece\nmodule mouthpiece() {\n    translate([body_length/2-5, 0, body_height/2]) {\n        rotate([0, -90, 0])\n            cylinder(h=mouthpiece_length, r1=mouthpiece_diameter/2, r2=mouthpiece_diameter/2*0.8);\n        \n        // Mouthpiece holder\n        translate([-5, 0, -mouthpiece_diameter/2-2])\n            cube([10, mouthpiece_diameter+4, mouthpiece_diameter+4]);\n    }\n}\n\n// Air release button\nmodule air_release() {\n    translate([body_length/2-15, body_width/2-3, body_height-5]) {\n        // Button housing\n        cylinder(h=5, r=4, $fn=20);\n        // Button top\n        translate([0, 0, 5])\n            cylinder(h=2, r=3, $fn=20);\n    }\n}\n\n// Side air vents\nmodule air_vents() {\n    for(i = [0:3]) {\n        translate([-body_length/2+15+i*15, body_width/2, body_height/2]) {\n            rotate([0, 90, 0])\n                cylinder(h=body_width, r=1, $fn=12);\n        }\n    }\n}\n\n// Assembly\nmelodica_body();\nkeyboard();\nmouthpiece();\nair_release();\nair_vents();\n\n// Bottom feet for stability\ntranslate([-body_length/2+10, -body_width/2+5, -1]) {\n    for(i = [0:1]) {\n        for(j = [0:1]) {\n            translate([i*(body_length-20), j*(body_width-10), 0])\n                cylinder(h=1, r=2, $fn=16);\n        }\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "clavichord",
    "openscad_code": "// Clavichord in realistic style, medium complexity\n// Approximate size 80 mm long, 30 mm wide, 15 mm tall\n\n$fn = 32;\nwall = 1.5;\n\nmodule key(x, y, white=true) {\n    // White keys are 8 mm wide, 2 mm thick\n    // Black keys are 5 mm wide, 1.5 mm thick, raised 1 mm\n    if (white) {\n        translate([x, y, 0])\n            cube([8, 2, 2]);\n    } else {\n        translate([x, y, 1])\n            cube([5, 1.5, 1.5]);\n    }\n}\n\nmodule keyboard() {\n    // 49 keys total: 29 white, 20 black\n    // White keys: C D E F G A B pattern\n    // Black keys: C# D# F# G# A#\n    \n    difference() {\n        // Base keyboard block\n        translate([-2, -2, 0])\n            cube([84, 6, 3]);\n        \n        // Cut spaces between white keys\n        for (i = [0:28]) {\n            translate([i*8 + 7.5, -2.5, 2.5])\n                cube([1.5, 7, 2]);\n        }\n    }\n    \n    // Place white keys\n    for (i = [0:28]) {\n        key(i*8, 0, true);\n    }\n    \n    // Place black keys at positions: C#, D#, F#, G#, A#\n    black_pos = [1, 2, 4, 5, 6, 8, 9, 11, 12, 13, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27];\n    for (i = black_pos) {\n        key(i*8 - 1.5, -0.5, false);\n    }\n}\n\nmodule soundboard() {\n    // Main resonating body\n    hull() {\n        translate([10, 5, 3])\n            cylinder(h=2, r=3);\n        translate([70, 5, 3])\n            cylinder(h=2, r=3);\n        translate([70, 25, 3])\n            cylinder(h=2, r=3);\n        translate([10, 25, 3])\n            cylinder(h=2, r=3);\n    }\n    \n    // Sound holes (rose)\n    translate([40, 15, 5])\n        cylinder(h=2, r=5);\n    translate([40, 15, 5.5])\n        cylinder(h=1, r=4);\n    \n    // String pins\n    for (i = [0:11]) {\n        translate([15 + i*5, 27, 5])\n            cylinder(h=1, r=0.5);\n    }\n}\n\nmodule case() {\n    // Bottom case\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                cylinder(h=5, r=5);\n            translate([80, 0, 0])\n                cylinder(h=5, r=5);\n            translate([80, 30, 0])\n                cylinder(h=5, r=5);\n            translate([0, 30, 0])\n                cylinder(h=5, r=5);\n        }\n        \n        // Hollow out inside\n        translate([wall, wall, wall])\n            cube([80 - 2*wall, 30 - 2*wall, 5 - wall]);\n    }\n    \n    // Top lid (angled back)\n    rotate([10, 0, 0])\n        translate([0, 0, 5])\n            cube([80, 30, 1.5]);\n}\n\n// Assemble the clavichord\nunion() {\n    case();\n    translate([0, 0, 5])\n        soundboard();\n    translate([8, 8, 5])\n        keyboard();\n}",
    "renders": true
  },
  {
    "musical_instrument": "virginal",
    "openscad_code": "// Virginal (Renaissance harpsichord-like keyboard instrument)\n// Overall dimensions: 90 mm x 60 mm x 25 mm\n\n$fa = 2;\n$fs = 0.5;\n\nmodule virginal_body() {\n    // Main case – a hollowed box\n    difference() {\n        // Outer shell\n        cube([90, 60, 25], center = false);\n        \n        // Inner cavity\n        translate([3, 3, 3])\n            cube([90 - 6, 60 - 6, 25 - 1]);\n    }\n}\n\nmodule lid() {\n    // Hinged lid, slightly arched\n    translate([0, 60, 25])\n        rotate([0, 0, 0])\n            difference() {\n                hull() {\n                    translate([5, 0, 0]) cube([80, 1, 2]);\n                    translate([45, -15, 2]) cube([1, 30, 1]);\n                }\n                translate([5, 0, -0.1]) cube([80, 32, 2.2]);\n            }\n}\n\nmodule keyboard() {\n    // Keyboard block inset into case front\n    translate([5, 5, 0])\n        difference() {\n            cube([80, 15, 10]);\n            translate([1, 1, 1]) cube([78, 13, 9]);\n        }\n    \n    // White keys\n    for (i = [0:7]) {\n        translate([10 + i * 9.5, 6, 1])\n            cube([8.5, 12, 8]);\n    }\n    \n    // Black keys\n    for (i = [0:4]) {\n        translate([15 + i * 19, 6, 9])\n            cube([5, 10, 4]);\n    }\n}\n\nmodule soundboard() {\n    // Soundboard surface visible inside\n    translate([3, 3, 3])\n        cube([90 - 6, 60 - 6, 0.5]);\n}\n\nmodule rose() {\n    // Rosette sound hole\n    translate([45, 40, 25 - 0.5])\n        rotate([180, 0, 0])\n            cylinder(h = 1, d1 = 8, d2 = 8, $fn = 32);\n    translate([45, 40, 25 - 1])\n        cylinder(h = 0.5, d1 = 6, d2 = 6, $fn = 32);\n}\n\nmodule legs() {\n    // Simple turned-style legs at corners\n    for (x = [10, 80]) {\n        for (y = [10, 50]) {\n            translate([x, y, -8])\n                cylinder(h = 8, d = 4, $fn = 12);\n        }\n    }\n}\n\n// Assemble virginal\nvirginal_body();\nsoundboard();\nrose();\nkeyboard();\nlid();\nlegs();",
    "renders": true
  },
  {
    "musical_instrument": "spinet",
    "openscad_code": "// Spinet harpsichord model – OpenSCAD (medium complexity, 3D-printable)\n\n$fn = 32;          // reasonable smoothness\n\n// overall dimensions (realistic but printer-friendly)\nbody_w = 80;\nbody_d = 40;\nbody_h = 12;\n\nwall_t = 2;        // printable wall thickness\n\n// keyboard\nkb_w = 48;\nkb_d = 18;\nkb_h = 3;\n\n// lid\nlid_t = 1.5;\n\n// legs\nleg_h = 20;\nleg_r = 2;\n\n// strings\nstring_d = 0.6;\nn_strings = 10;\n\nmodule spinet_body() {\n    difference() {\n        // outer shell\n        cube([body_w, body_d, body_h], center = true);\n\n        // hollow inside\n        translate([0, 0, -wall_t/2])\n            cube([body_w - 2*wall_t,\n                  body_d - 2*wall_t,\n                  body_h + 1], center = true);\n\n        // front keywell cutout\n        translate([0, body_d/2 - wall_t, body_h/2 - kb_h/2])\n            cube([kb_w + 6, wall_t + 0.5, kb_h + 1], center = true);\n    }\n}\n\nmodule keyboard() {\n    // white keys\n    for (i = [-2:2]) {\n        translate([i*4.5, body_d/2 - kb_d/2, body_h/2 - kb_h/2])\n            cube([4, kb_d, kb_h], center = true);\n    }\n    // black keys\n    color(\"black\")\n    for (i = [-1.5, -0.5, 0.5, 1.5]) {\n        translate([i*4.5, body_d/2 - kb_d/2 + 1.5, body_h/2 + kb_h/2 - 0.5])\n            cube([2.5, kb_d - 3, kb_h - 1], center = true);\n    }\n}\n\nmodule lid() {\n    translate([0, -body_d/2 - lid_t/2, body_h/2 - lid_t/2])\n        rotate([0, 90, 0])\n        cube([body_w, body_d, lid_t]);\n}\n\nmodule leg(x, y) {\n    translate([x, y, -leg_h/2 - body_h/2])\n        cylinder(h = leg_h, r = leg_r, center = true);\n}\n\nmodule strings() {\n    for (i = [1:n_strings]) {\n        translate([body_w/2 - 5 - i*5, 0, body_h/2 - 1])\n            rotate([90, 0, 0])\n            cylinder(h = body_d - 4, r = string_d/2, center = true);\n    }\n}\n\nmodule music_stand() {\n    translate([body_w/2 - 12, -body_d/4, body_h/2 + 2])\n        rotate([100, 0, 0])\n        cube([15, 0.8, 10]);\n}\n\n// build the spinet\nunion() {\n    // main parts\n    spinet_body();\n    keyboard();\n    lid();\n    strings();\n    music_stand();\n\n    // four legs\n    leg( body_w/2 - 6,  body_d/2 - 6);\n    leg(-body_w/2 + 6,  body_d/2 - 6);\n    leg( body_w/2 - 6, -body_d/2 + 6);\n    leg(-body_w/2 + 6, -body_d/2 + 6);\n}",
    "renders": true
  },
  {
    "musical_instrument": "fortepiano",
    "openscad_code": "// Fortepiano in realistic style, medium complexity\n// Designed for 3D printing with proper clearances and no overhangs\n\n$fn = 32;\n\nmodule fortepiano() {\n    // Main body\n    color(\"burlywood\")\n    difference() {\n        // Case\n        translate([0, 0, 15])\n        cube([60, 80, 30], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 15])\n        cube([54, 74, 28], center=true);\n    }\n    \n    // Lid\n    color(\"burlywood\")\n    translate([0, -40, 30])\n    rotate([10, 0, 0])\n    cube([62, 82, 2], center=true);\n    \n    // Lid support\n    color(\"burlywood\")\n    translate([0, 0, 30])\n    rotate([80, 0, 0])\n    cylinder(h=20, d=2);\n    \n    // Keyboard\n    color(\"ivory\")\n    translate([0, 25, 16])\n    cube([40, 12, 2], center=true);\n    \n    // White keys\n    for(i = [-9:9]) {\n        color(\"ivory\")\n        translate([i*2, 31, 17])\n        cube([1.8, 10, 1.5]);\n    }\n    \n    // Black keys\n    for(i = [-7:2:7]) {\n        if(i != -1 && i != 5) {\n            color(\"black\")\n            translate([i*2, 31.5, 18.5])\n            cube([1, 6, 2.5]);\n        }\n    }\n    \n    // Legs\n    module leg() {\n        color(\"burlywood\")\n        cylinder(h=15, d=4);\n    }\n    \n    // Front legs\n    translate([20, 35, 7.5])\n    leg();\n    translate([-20, 35, 7.5])\n    leg();\n    \n    // Rear legs\n    translate([20, -35, 7.5])\n    leg();\n    translate([-20, -35, 7.5])\n    leg();\n    \n    // Pedals\n    color(\"gold\")\n    translate([0, 38, 7])\n    rotate([45, 0, 0])\n    cylinder(h=10, d=1.5);\n    \n    // Music stand\n    color(\"burlywood\")\n    translate([0, 15, 25])\n    rotate([30, 0, 0])\n    cube([30, 20, 1], center=true);\n    \n    // Stand supports\n    color(\"burlywood\")\n    translate([0, 25, 25])\n    rotate([60, 0, 0])\n    cylinder(h=12, d=1.5);\n    \n    // Side panels decoration\n    color(\"burlywood\")\n    translate([30, 0, 15])\n    cube([2, 76, 28], center=true);\n    translate([-30, 0, 15])\n    cube([2, 76, 28], center=true);\n    \n    // Top molding\n    color(\"burlywood\")\n    translate([0, 0, 30])\n    cube([62, 82, 2], center=true);\n}\n\n// Scale to reasonable print size\nscale([0.6, 0.6, 0.6])\nfortepiano();",
    "renders": true
  },
  {
    "musical_instrument": "harmonium",
    "openscad_code": "// Harmonium - Medium complexity realistic style\n// All dimensions in mm, printable on FDM printer\n\n$fn = 50;  // Smooth curves\n\n// Main dimensions\noverall_width = 80;\noverall_depth = 60;\noverall_height = 30;\n\nmodule harmonium() {\n    // Base box - main body\n    difference() {\n        // Main shell\n        cube([overall_width, overall_depth, overall_height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cube([overall_width-2, overall_depth-2, overall_height-1], center = true);\n    }\n    \n    // Top lid with slight overhang\n    translate([0, 0, overall_height/2 + 0.5])\n        cube([overall_width + 2, overall_depth + 2, 1], center = true);\n    \n    // Front panel with keyboard opening\n    translate([0, overall_depth/2 - 0.5, 0])\n        difference() {\n            cube([overall_width, 1, overall_height], center = true);\n            \n            // Keyboard opening\n            translate([-overall_width/4, 0, 0])\n                cube([overall_width/2, 2, 5], center = true);\n        }\n    \n    // Keyboard - white keys\n    for(i = [0:9]) {\n        translate([-overall_width/2 + 8 + i*6, overall_depth/2, -5])\n            cube([5, 2, 3]);\n    }\n    \n    // Keyboard - black keys\n    for(i = [0:6]) {\n        if(i != 2 && i != 5) {  // Skip positions for realistic pattern\n            translate([-overall_width/2 + 12 + i*6, overall_depth/2 + 0.5, -3])\n                cube([3, 1, 2]);\n        }\n    }\n    \n    // Side handles\n    module handle() {\n        translate([0, 0, -overall_height/4])\n            difference() {\n                cylinder(h = 8, r = 3, center = true);\n                cylinder(h = 10, r = 1.5, center = true);\n            }\n    }\n    \n    // Left handle\n    translate([-overall_width/2 - 2, 0, 0])\n        rotate([90, 0, 0])\n            handle();\n    \n    // Right handle\n    translate([overall_width/2 + 2, 0, 0])\n        rotate([90, 0, 0])\n            handle();\n    \n    // Rear bellows panel\n    translate([0, -overall_depth/2 - 1, overall_height/4])\n        difference() {\n            cube([overall_width - 10, 1, overall_height/2], center = true);\n            \n            // Bellows creases\n            for(i = [-2:2]) {\n                translate([i * 8, 0, overall_height/8])\n                    cube([1, 2, 1], center = true);\n            }\n        }\n    \n    // Front stops (buttons)\n    for(i = [0:3]) {\n        translate([-overall_width/3 + i*10, overall_depth/2 - 5, overall_height/2 - 2])\n            cylinder(h = 2, r = 2);\n    }\n    \n    // Rear feet\n    module foot() {\n        cylinder(h = 2, r = 1.5);\n    }\n    \n    translate([-overall_width/2 + 5, -overall_depth/2 + 5, -overall_height/2 - 1])\n        foot();\n    translate([overall_width/2 - 5, -overall_depth/2 + 5, -overall_height/2 - 1])\n        foot();\n    translate([-overall_width/2 + 5, overall_depth/2 - 5, -overall_height/2 - 1])\n        foot();\n    translate([overall_width/2 - 5, overall_depth/2 - 5, -overall_height/2 - 1])\n        foot();\n    \n    // Air vent grill\n    translate([0, overall_depth/2 - 0.5, -overall_height/4])\n        difference() {\n            cube([overall_width/3, 1, 3], center = true);\n            for(i = [-2:2]) {\n                translate([i*3, 0, 0])\n                    cube([1, 2, 3], center = true);\n            }\n        }\n}\n\n// Render the harmonium\nharmonium();",
    "renders": true
  },
  {
    "musical_instrument": "reedorgan",
    "openscad_code": "// Reed Organ - Realistic Style, Medium Complexity\n// Designed for 3D printing, approximately 80mm wide\n\n// Overall dimensions\nwidth = 80;\ndepth = 45;\nheight = 65;\n\n// Wall thickness\nwall = 2;\n\nmodule case() {\n    // Main body\n    difference() {\n        cube([width, depth, height]);\n        translate([wall, wall, wall])\n            cube([width-2*wall, depth-2*wall, height-wall]);\n    }\n    \n    // Top lid with slight overhang\n    translate([-1, -1, height-1])\n        cube([width+2, depth+2, 3]);\n}\n\nmodule keyboard() {\n    // Keyboard shelf\n    translate([10, 2, 35])\n        cube([width-20, depth-4, 3]);\n    \n    // White keys\n    for(i = [0:9]) {\n        translate([12 + i*6, 2.5, 38])\n            cube([5, depth-5, 1.5]);\n    }\n    \n    // Black keys\n    for(i = [0:6]) {\n        if(i != 3) {\n            translate([17 + i*6, 2.5, 39.5])\n                cube([3, depth-10, 2.5]);\n        }\n    }\n}\n\nmodule pedals() {\n    // Pedal base\n    translate([20, depth-8, 5])\n        cube([40, 6, 3]);\n    \n    // Left pedal\n    translate([25, depth-7, 8])\n        rotate([0, -10, 0])\n            cube([8, 4, 20]);\n    \n    // Right pedal\n    translate([47, depth-7, 8])\n        rotate([0, -10, 0])\n            cube([8, 4, 20]);\n}\n\nmodule stops() {\n    // Stop rail\n    translate([5, 2, 50])\n        cube([width-10, 4, 6]);\n    \n    // Stop knobs\n    for(i = [0:3]) {\n        translate([10 + i*15, 3, 57])\n            cylinder(h=5, d=4);\n    }\n}\n\nmodule bellows() {\n    // Rear bellows box\n    translate([5, depth-wall, 10])\n        cube([width-10, wall, 20]);\n    \n    // Bellows folds\n    for(i = [0:3]) {\n        translate([8 + i*15, depth, 15])\n            cube([10, 2, 10]);\n    }\n}\n\nmodule music_stand() {\n    // Stand base\n    translate([width/2-15, 2, 45])\n        cube([30, 2, 1]);\n    \n    // Stand back\n    translate([width/2-15, 4, 45])\n        rotate([80, 0, 0])\n            cube([30, 0.5, 25]);\n}\n\n// Assembly\nunion() {\n    case();\n    keyboard();\n    pedals();\n    stops();\n    bellows();\n    music_stand();\n}",
    "renders": true
  },
  {
    "musical_instrument": "pipeorgan",
    "openscad_code": "// Pipe Organ Model - Realistic Medium Complexity\n// Designed for 3D printing (100mm max dimension)\n\n// Parameters for realistic proportions\n$fn = 32;\nbase_width = 40;\nbase_depth = 25;\nbase_height = 8;\ncase_height = 35;\ncase_thickness = 2;\npipe_rings = 5;\npipe_base = 2;\n\n// Main case structure\nmodule organ_case() {\n    // Base platform\n    translate([0, 0, base_height/2])\n    cube([base_width, base_depth, base_height], center=true);\n    \n    // Main case\n    difference() {\n        translate([0, 0, base_height + case_height/2])\n        cube([base_width, base_depth, case_height], center=true);\n        \n        // Front opening\n        translate([0, base_depth/2 - case_thickness/2, base_height + 15])\n        cube([base_width - 10, case_thickness + 1, 25], center=true);\n        \n        // Side openings\n        translate([base_width/2 - case_thickness/2, 0, base_height + 15])\n        cube([case_thickness + 1, base_depth - 6, 25], center=true);\n        translate([-base_width/2 + case_thickness/2, 0, base_height + 15])\n        cube([case_thickness + 1, base_depth - 6, 25], center=true);\n    }\n    \n    // Top cornice\n    difference() {\n        translate([0, 0, base_height + case_height + 2])\n        cube([base_width + 4, base_depth + 4, 4], center=true);\n        \n        translate([0, 0, base_height + case_height + 2])\n        cube([base_width - 2, base_depth - 2, 4.1], center=true);\n    }\n}\n\n// Individual pipe module\nmodule pipe(height, diameter, x_pos) {\n    // Pipe body\n    translate([x_pos, 0, base_height + case_height + height/2])\n    cylinder(h=height, d=diameter, center=true);\n    \n    // Pipe lip\n    translate([x_pos, 0, base_height + case_height + height - 1])\n    cylinder(h=2, d=diameter + 1, center=true);\n    \n    // Pipe foot\n    translate([x_pos, 0, base_height + case_height + 2])\n    cylinder(h=4, d=diameter * 1.2, center=true);\n}\n\n// Pipe array\nmodule pipes() {\n    // Front row - longer pipes\n    for(i = [0:4]) {\n        height = 20 + i * 3;\n        diameter = 3.5 - i * 0.3;\n        x_pos = -8 + i * 4;\n        pipe(height, diameter, x_pos);\n    }\n    \n    // Back row - shorter pipes\n    for(i = [0:3]) {\n        height = 15 + i * 2.5;\n        diameter = 3 - i * 0.3;\n        x_pos = -6 + i * 4 + 2;\n        pipe(height, diameter, x_pos);\n    }\n}\n\n// Keyboard and console\nmodule console() {\n    // Keyboard shelf\n    translate([0, -base_depth/2 - 5, base_height + 8])\n    cube([20, 10, 1.5], center=true);\n    \n    // Keys\n    for(i = [0:7]) {\n        translate([-6 + i * 1.8, -base_depth/2 - 5, base_height + 9.5])\n        cube([1.5, 8, 0.8], center=true);\n    }\n    \n    // Bench\n    translate([0, -base_depth/2 - 12, base_height + 4])\n    cube([15, 6, 8], center=true);\n}\n\n// Pedal board\nmodule pedals() {\n    translate([0, -base_depth/2 - 8, base_height + 2])\n    cube([25, 3, 0.5], center=true);\n    \n    // Pedal keys\n    for(i = [0:4]) {\n        translate([-8 + i * 4, -base_depth/2 - 8.5, base_height + 1])\n        cube([2.5, 4, 1.5], center=true);\n    }\n}\n\n// Assemble the organ\nunion() {\n    organ_case();\n    pipes();\n    console();\n    pedals();\n}",
    "renders": true
  },
  {
    "musical_instrument": "electricpiano",
    "openscad_code": "// Electric Piano - Realistic Style, Medium Complexity\n// Designed for 3D printing (~80mm width)\n\n// Main dimensions\npiano_width = 80;\npiano_depth = 30;\npiano_height = 10;\n\n// Key dimensions\nwhite_key_width = 7;\nwhite_key_height = 2;\nblack_key_width = 4.5;\nblack_key_height = 1.5;\n\n// Control panel dimensions\npanel_width = 20;\npanel_height = 3;\nscreen_width = 15;\nscreen_height = 8;\n\n// Main body with rounded edges\nmodule piano_body() {\n    // Base body\n    translate([0, 0, piano_height/2])\n        cube([piano_width, piano_depth, piano_height], center=true);\n    \n    // Front bevel\n    difference() {\n        translate([0, 0, piano_height/2])\n            cube([piano_width, piano_depth, piano_height], center=true);\n        translate([0, 0, piano_height-1])\n            cube([piano_width+2, piano_depth+2, 2], center=true);\n    }\n}\n\n// White keys\nmodule white_keys() {\n    for(i = [0:13]) {\n        translate([-piano_width/2 + 5 + i*white_key_width, 0, white_key_height/2])\n            cube([white_key_width-0.5, piano_depth-4, white_key_height], center=true);\n    }\n}\n\n// Black keys\nmodule black_keys() {\n    for(i = [0:9]) {\n        if(i != 2 && i != 6) {  // Skip positions for E-F and B-C\n            translate([-piano_width/2 + 8.5 + i*white_key_width, 0, white_key_height + black_key_height/2])\n                cube([black_key_width, piano_depth-8, black_key_height], center=true);\n        }\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    translate([0, -piano_depth/2 + panel_height/2, piano_height + panel_height/2])\n        cube([panel_width, panel_height, panel_height], center=true);\n}\n\n// LCD screen\nmodule lcd_screen() {\n    translate([0, -piano_depth/2 + 2, piano_height + panel_height + screen_height/2])\n        cube([screen_width, 1, screen_height], center=true);\n    \n    // Screen detail\n    translate([0, -piano_depth/2 + 1.5, piano_height + panel_height + screen_height/2])\n        cube([screen_width-2, 0.5, screen_height-2], center=true);\n}\n\n// Knobs\nmodule knobs() {\n    for(i = [0:1]) {\n        translate([panel_width/2 - 5 - i*8, -piano_depth/2 + 1, piano_height + panel_height + 2])\n            cylinder(h=3, r=2, $fn=20);\n    }\n}\n\n// Joystick\nmodule joystick() {\n    translate([-panel_width/2 + 5, -piano_depth/2 + 1, piano_height + panel_height + 1])\n        union() {\n            cylinder(h=2, r=3, $fn=20);\n            translate([0, 0, 2])\n                cylinder(h=3, r=1.5, $fn=10);\n        }\n}\n\n// Speaker grills\nmodule speakers() {\n    for(side = [-1, 1]) {\n        translate([side * (piano_width/2 - 8), 0, piano_height/2])\n            difference() {\n                cube([10, piano_depth-4, 2], center=true);\n                for(i = [0:3]) {\n                    translate([0, -6 + i*4, 0])\n                        cube([8, 0.5, 1.5], center=true);\n                }\n            }\n    }\n}\n\n// Legs\nmodule legs() {\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (piano_width/2 - 5), y * (piano_depth/2 - 5), -3])\n                cylinder(h=6, r=2, $fn=20);\n        }\n    }\n}\n\n// Assemble the piano\nunion() {\n    piano_body();\n    white_keys();\n    black_keys();\n    control_panel();\n    lcd_screen();\n    knobs();\n    joystick();\n    speakers();\n    legs();\n}",
    "renders": true
  },
  {
    "musical_instrument": "rhodes",
    "openscad_code": "// Rhodes Mark I Stage Piano (realistic, medium complexity)\n// ~80 mm wide, printable in one piece\n\n$fn = 32; // smooth curves\n\n// body shell -------------------------------------------------------\nmodule body() {\n    difference() {\n        // main shell\n        hull() {\n            // left block\n            translate([-38, 0, 0])\n                cube([76, 220, 25], center=true);\n            // rounded front\n            translate([0, 110, -2])\n                sphere(d=28);\n        }\n        // hollow inside\n        translate([-36, 0, 0])\n            cube([72, 216, 22], center=true);\n        // speaker grill holes\n        for(y=[-80:20:80]) {\n            translate([0, y, 12.5])\n                rotate([90,0,0])\n                    cylinder(h=26, d=2.5, center=true);\n        }\n    }\n}\n\n// lid --------------------------------------------------------------\nmodule lid() {\n    translate([0, 0, 13])\n        rotate([80,0,0])\n            difference() {\n                // main lid\n                translate([0, 110, 0])\n                    cube([80, 220, 2.5], center=true);\n                // hinge relief\n                translate([0, -110, 0])\n                    cube([78, 4, 4], center=true);\n            }\n}\n\n// keyboard bed -----------------------------------------------------\nmodule keys() {\n    // white keys\n    for(x=[-30:5.5:30]) {\n        translate([x, 0, 0])\n            cube([5, 90, 3], center=true);\n    }\n    // black keys\n    for(x=[-25.5:11:25.5]) {\n        translate([x, 0, 3])\n            cube([3.5, 60, 4], center=true);\n    }\n}\n\n// front name rail --------------------------------------------------\nmodule nameRail() {\n    translate([0, 105, 8])\n        cube([74, 6, 4], center=true);\n}\n\n// top control panel ------------------------------------------------\nmodule controlPanel() {\n    translate([0, 75, 14])\n        cube([60, 30, 3], center=true);\n}\n\n// volume knob ------------------------------------------------------\nmodule knob() {\n    translate([20, 75, 15.5])\n        cylinder(h=5, d=5);\n}\n\n// vibrato knob -----------------------------------------------------\nmodule vibratoKnob() {\n    translate([-20, 75, 15.5])\n        cylinder(h=5, d=5);\n}\n\n// rear handle ------------------------------------------------------\nmodule handle() {\n    translate([0, -105, 18])\n        difference() {\n            hull() {\n                sphere(d=12);\n                translate([0, 0, 20])\n                    sphere(d=12);\n            }\n            translate([0, 0, 10])\n                rotate([0,90,0])\n                    cylinder(h=30, d=6, center=true);\n        }\n}\n\n// legs -------------------------------------------------------------\nmodule legs() {\n    // left rear\n    translate([-35, -85, -10])\n        cylinder(h=20, d=8);\n    // right rear\n    translate([35, -85, -10])\n        cylinder(h=20, d=8);\n    // left front\n    translate([-35, 85, -10])\n        cylinder(h=20, d=8);\n    // right front\n    translate([35, 85, -10])\n        cylinder(h=20, d=8);\n}\n\n// assemble rhodes --------------------------------------------------\nunion() {\n    body();\n    lid();\n    keys();\n    nameRail();\n    controlPanel();\n    knob();\n    vibratoKnob();\n    handle();\n    legs();\n}",
    "renders": true
  },
  {
    "musical_instrument": "wurlitzer",
    "openscad_code": "// Wurlitzer Jukebox - Medium Complexity Realistic Style\n// 3D printable, ~80mm tall\n\n// Main parameters\nbody_width = 60;\nbody_depth = 40;\nbody_height = 75;\nwall_thickness = 2;\n\n// Colors (for preview)\n$fn = 32;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main box\n        cube([body_width, body_depth, body_height]);\n        \n        // Hollow out\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([body_width-wall_thickness*2, body_depth-wall_thickness*2, body_height-wall_thickness*2]);\n    }\n}\n\n// Curved top\nmodule top_dome() {\n    translate([body_width/2, body_depth/2, body_height]) {\n        difference() {\n            // Main dome\n            scale([1, 0.8, 0.5])\n                sphere(r=body_width/2);\n            \n            // Flatten bottom\n            translate([0, 0, -body_width/4])\n                cube([body_width+2, body_depth+2, body_width/2], center=true);\n        }\n    }\n}\n\n// Front grille\nmodule grille() {\n    // Grille frame\n    translate([-wall_thickness/2, body_depth-wall_thickness, 15]) {\n        difference() {\n            cube([body_width+wall_thickness, wall_thickness, 40]);\n            // Grille holes\n            for(x = [5:10:body_width-5]) {\n                for(y = [5:10:35]) {\n                    translate([x, -wall_thickness/2, y])\n                        cube([3, wall_thickness+1, 5]);\n                }\n            }\n        }\n    }\n}\n\n// Selection buttons\nmodule buttons() {\n    for(i = [0:4]) {\n        translate([10 + i*10, body_depth-wall_thickness, 10]) {\n            // Button housing\n            difference() {\n                cylinder(h=5, r=4);\n                translate([0, 0, -1])\n                    cylinder(h=7, r=3);\n            }\n            // Button top\n            translate([0, 0, 5])\n                sphere(r=2);\n        }\n    }\n}\n\n// Side chrome strips\nmodule chrome_strips() {\n    for(side = [0, 1]) {\n        translate([side*body_width, 0, 30]) {\n            // Vertical strip\n            cube([wall_thickness, body_depth, 30]);\n            \n            // Horizontal strip\n            translate([0, body_depth-wall_thickness, 0])\n                cube([body_width, wall_thickness, 10]);\n        }\n    }\n}\n\n// Record display window\nmodule display_window() {\n    translate([body_width/2-15, body_depth-wall_thickness, 55]) {\n        difference() {\n            // Window frame\n            cube([30, wall_thickness, 15]);\n            // Glass area\n            translate([2, -wall_thickness/2, 2])\n                cube([26, wall_thickness+1, 11]);\n        }\n    }\n}\n\n// Base with feet\nmodule base() {\n    // Base platform\n    translate([-5, -5, -5])\n        cube([body_width+10, body_depth+10, 5]);\n    \n    // Feet\n    for(x = [5, body_width-5]) {\n        for(y = [5, body_depth-5]) {\n            translate([x, y, -8])\n                cylinder(h=3, r=3);\n        }\n    }\n}\n\n// Assemble the model\nunion() {\n    base();\n    body();\n    top_dome();\n    grille();\n    buttons();\n    chrome_strips();\n    display_window();\n}",
    "renders": true
  },
  {
    "musical_instrument": "clavinet",
    "openscad_code": "// Clavinet Model - Realistic Style, Medium Complexity\n// 3D printable, approximately 80mm long\n\n// Constants\nbody_length = 75;\nbody_width = 30;\nbody_height = 8;\nkeyboard_length = 60;\nkeyboard_width = 25;\nkey_width = 3.5;\nkey_length = 18;\nkey_height = 1.2;\nwhite_keys = 36;\nblack_keys = 25;\ncase_thickness = 2;\n\n// Main body module\nmodule clavinet_body() {\n    difference() {\n        // Main wooden body\n        translate([0, 0, body_height/2])\n            cube([body_length, body_width, body_height], center=true);\n        \n        // Hollow cavity\n        translate([0, 0, body_height/2])\n            cube([body_length - 2*case_thickness, body_width - 2*case_thickness, body_height - case_thickness], center=true);\n    }\n}\n\n// Key module (white keys)\nmodule white_key(x_pos) {\n    translate([x_pos - keyboard_length/2 + key_width/2, 0, key_height/2])\n        cube([key_width * 0.9, key_length, key_height], center=true);\n}\n\n// Black key module\nmodule black_key(x_pos, y_offset) {\n    translate([x_pos - keyboard_length/2 + key_width/2, y_offset, key_height + 0.8])\n        cube([key_width * 0.6, key_length * 0.65, key_height * 1.5], center=true);\n}\n\n// Keyboard assembly\nmodule keyboard() {\n    // White keys\n    for(i = [0:white_keys-1]) {\n        if(i % 7 != 2 && i % 7 != 6) {  // Skip positions for black keys\n            white_key(i * (key_width * 0.95));\n        }\n    }\n    \n    // Black keys\n    black_pos = [0, 1, 3, 4, 5];\n    for(i = [0:black_keys-1]) {\n        octave = floor(i/5);\n        pos_in_octave = i % 5;\n        x_pos = (octave * 7 + black_pos[pos_in_octave]) * (key_width * 0.95);\n        black_key(x_pos, -key_length * 0.15);\n    }\n}\n\n// Pickup bar\nmodule pickup_bar() {\n    translate([body_length * 0.3, 0, body_height + 1])\n        cube([body_length * 0.3, body_width * 0.8, 2], center=true);\n}\n\n// Control panel\nmodule control_panel() {\n    translate([-body_length * 0.3, body_width/2 + 2, body_height/2])\n        cube([body_length * 0.2, 4, body_height * 0.6], center=true);\n}\n\n// Tuning pegs\nmodule tuning_pegs() {\n    for(i = [0:5]) {\n        translate([body_length/2 - 5, -body_width/4 + i*2.5, body_height + 1])\n            cylinder(h=3, r=0.5, $fn=8);\n    }\n}\n\n// Lid support\nmodule lid_support() {\n    translate([0, body_width/2, body_height + 10])\n        cube([body_length * 0.9, 0.5, 20], center=true);\n}\n\n// Assembly\nunion() {\n    // Main components\n    clavinet_body();\n    \n    // Keyboard positioned on top\n    translate([0, 0, body_height])\n        keyboard();\n    \n    // Hardware\n    pickup_bar();\n    control_panel();\n    tuning_pegs();\n    lid_support();\n    \n    // Side handles\n    translate([body_length/2 - 5, body_width/2 + 1, body_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=4, r=1, $fn=12);\n    translate([-body_length/2 + 5, body_width/2 + 1, body_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=4, r=1, $fn=12);\n}",
    "renders": true
  },
  {
    "musical_instrument": "electricorgan",
    "openscad_code": "// Realistic Electric Organ (Hammond B3 style)\n// Medium complexity, 3D-printable, ~80 mm wide\n\n// Parameters\n$fn = 32;\nbody_w = 80;\nbody_d = 40;\nbody_h = 15;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([body_w, body_d, body_h], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 1])\n            cube([body_w-4, body_d-4, body_h-2], center=true);\n        \n        // Front keyboard cutout\n        translate([0, body_d/2-1, -body_h/2+2])\n            cube([body_w-10, 4, 6], center=true);\n    }\n}\n\n// Keyboard module\nmodule keyboard() {\n    // White keys\n    for (i = [-3:3]) {\n        translate([i*9, 0, 0])\n            cube([8, 18, 2], center=true);\n    }\n    \n    // Black keys\n    for (i = [-2, -1, 1, 2]) {\n        translate([i*9 + (i>0 ? 4.5 : -4.5), -1, 1])\n            cube([5, 14, 3], center=true);\n    }\n}\n\n// Drawbars\nmodule drawbars() {\n    for (i = [0:8]) {\n        translate([i*7 - 28, body_d/2-2, body_h/2-4])\n            cylinder(h=10, d=3);\n    }\n}\n\n// Control knobs\nmodule knobs() {\n    // Percussion switches\n    for (i = [0:1]) {\n        translate([body_w/2-15 + i*6, body_d/2-8, body_h/2])\n            cylinder(h=3, d=4);\n    }\n    \n    // Volume pedal base\n    translate([0, -body_d/2-5, -body_h/2])\n        cube([20, 8, 4], center=true);\n}\n\n// Speaker grill\nmodule grill() {\n    translate([0, 0, body_h/2])\n    difference() {\n        cube([body_w-10, body_d-10, 1], center=true);\n        for (x = [-30:10:30]) {\n            for (y = [-15:5:15]) {\n                translate([x, y, -0.5])\n                    cube([1, 1, 2], center=true);\n            }\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    for (x = [-body_w/2+5, body_w/2-5])\n        for (y = [-body_d/2+5, body_d/2-5]) {\n            translate([x, y, -body_h/2-5])\n                cylinder(h=10, d=3);\n        }\n}\n\n// Assembly\ntranslate([0, 0, 10])\n    body();\n\ntranslate([0, body_d/2-6, 0])\n    keyboard();\n\ntranslate([0, 0, body_h/2])\n    drawbars();\n\nknobs();\n\ntranslate([0, 0, body_h/2+1])\n    grill();\n\nlegs();",
    "renders": true
  },
  {
    "musical_instrument": "comboorgan",
    "openscad_code": "// Combo-organ – realistic style, medium complexity\n// Overall dimensions ≈ 110 × 45 × 25 mm (fits common FDM printers)\n\n$fn = 32;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Hollow outer shell\n        hull() {\n            translate([-50, -20, 0]) cube([100, 40, 20], center = true);\n            translate([-50, -20, 10]) cube([100, 40, 15], center = true);\n        }\n        // Inner cavity\n        translate([-47, -17, -2]) cube([94, 34, 22], center = true);\n    }\n}\n\n// Keyboard – 25 mini keys\nmodule keys() {\n    for (i = [0:24]) {\n        // White keys on even indices, black keys on odd\n        key_type = (i % 2 == 0) ? \"white\" : \"black\";\n        x = -46 + i * 3.7;\n        if (key_type == \"white\") {\n            translate([x, 0, 10.2])\n                cube([3.5, 14, 2], center = true);\n        } else {\n            translate([x + 1.85, -2.5, 10.2])\n                cube([2.2, 9, 3], center = true);\n        }\n    }\n}\n\n// Control panel with knobs and sliders\nmodule controls() {\n    // Slider caps\n    for (i = [0:3]) {\n        translate([-35 + i * 8, 18, 10.2])\n            cylinder(h = 3, r = 2.5);\n    }\n    // Rotary knobs\n    for (i = [0:2]) {\n        translate([15 + i * 10, 18, 10.2])\n            cylinder(h = 2.5, r1 = 3, r2 = 2.5);\n    }\n}\n\n// Top lid with speaker grills\nmodule lid() {\n    difference() {\n        translate([0, 0, 20])\n            cube([102, 42, 3], center = true);\n        // Speaker holes left\n        for (x = [-40:5:-20])\n            for (y = [-10:5:10])\n                translate([x, y, 21.6])\n                    cylinder(h = 4, r = 1.5);\n        // Speaker holes right\n        for (x = [20:5:40])\n            for (y = [-10:5:10])\n                translate([x, y, 21.6])\n                    cylinder(h = 4, r = 1.5);\n    }\n}\n\n// Music stand / handle\nmodule handle() {\n    translate([0, -22, 15])\n        rotate([90, 0, 0])\n            cube([50, 2, 15], center = true);\n}\n\n// Feet for stability\nmodule feet() {\n    for (x = [-40, 40])\n        for (y = [-15, 15])\n            translate([x, y, -2])\n                cylinder(h = 4, r = 3);\n}\n\n// Assembly\nunion() {\n    body();\n    keys();\n    controls();\n    lid();\n    handle();\n    feet();\n}",
    "renders": true
  },
  {
    "musical_instrument": "tonewheelorgan",
    "openscad_code": "// Tonewheel Organ - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm x 50mm x 30mm\n\n$fn = 32;  // Smooth curves\n\n// Main organ module\nmodule tonewheel_organ() {\n    // Base cabinet\n    difference() {\n        // Main body\n        cube([80, 50, 30], center=true);\n        \n        // Front panel recess\n        translate([0, 24, 0])\n            cube([74, 2, 24], center=true);\n        \n        // Back access panel recess\n        translate([0, -24, 0])\n            cube([70, 2, 20], center=true);\n    }\n    \n    // Front control panel\n    translate([0, 25, 5])\n        cube([70, 1, 18], center=true);\n    \n    // Keyboard\n    keyboard();\n    \n    // Tonewheels on top\n    tonewheels();\n    \n    // Control knobs\n    control_knobs();\n    \n    // Side handles\n    side_handles();\n}\n\n// Keyboard module\nmodule keyboard() {\n    // White keys\n    for(i = [-3:3]) {\n        translate([i*9, 15, -5])\n            cube([8, 12, 2], center=true);\n    }\n    \n    // Black keys\n    for(i = [-2.5, -1.5, 0.5, 1.5, 2.5]) {\n        translate([i*9, 15, -3])\n            cube([5, 10, 4], center=true);\n    }\n}\n\n// Tonewheels module\nmodule tonewheels() {\n    // Drive shaft\n    translate([0, 0, 16])\n        rotate([90, 0, 0])\n            cylinder(h=60, r=2, center=true);\n    \n    // Tonewheels\n    for(i = [-2:2]) {\n        translate([i*12, 0, 16])\n            difference() {\n                cylinder(h=3, r=10, center=true);\n                // Tone notches\n                for(j = [0:15]) {\n                    rotate([0, 0, j*22.5])\n                        translate([8, 0, 0])\n                            cube([4, 1, 3.5], center=true);\n                }\n                // Center hole\n                cylinder(h=4, r=2.5, center=true);\n            }\n    }\n}\n\n// Control knobs\nmodule control_knobs() {\n    for(pos = [[-25, 25, 10], [-15, 25, 10], [15, 25, 10], [25, 25, 10]]) {\n        translate(pos)\n            cylinder(h=4, r=3, center=true);\n        \n        // Indicator line\n        translate([pos[0], pos[1], pos[2]+2.1])\n            cube([0.5, 2, 0.5], center=true);\n    }\n}\n\n// Side handles\nmodule side_handles() {\n    for(side = [-1, 1]) {\n        translate([side*42, 0, 0])\n            difference() {\n                cylinder(h=20, r=3, center=true);\n                cylinder(h=22, r=2, center=true);\n            }\n    }\n}\n\n// Generate the model\ntonewheel_organ();",
    "renders": true
  },
  {
    "musical_instrument": "hammond",
    "openscad_code": "// Hammond organ model - medium complexity realistic style\n// Size: ~80mm wide x 60mm deep x 50mm tall\n\n// Main parameters\nbody_width = 78;\nbody_depth = 58;\nbody_height = 40;\ntop_thickness = 3;\n\n// Keyboard parameters\nkey_width = 8;\nkey_depth = 30;\nwhite_key_height = 3;\nblack_key_height = 5;\nnum_octaves = 4;\n\n// Draw main body\nmodule main_body() {\n    // Base box\n    difference() {\n        cube([body_width, body_depth, body_height], center=true);\n        // Hollow interior\n        translate([0, 0, -5])\n            cube([body_width-6, body_depth-6, body_height-5], center=true);\n    }\n    \n    // Top panel with slope\n    translate([0, 0, body_height/2 + top_thickness/2])\n        cube([body_width, body_depth, top_thickness], center=true);\n}\n\n// Draw single white key\nmodule white_key() {\n    cube([key_width-1, key_depth, white_key_height], center=true);\n}\n\n// Draw single black key\nmodule black_key() {\n    color(\"black\")\n    translate([0, -key_depth/4, black_key_height/2 - white_key_height/2])\n        cube([key_width-2, key_depth*0.65, black_key_height], center=true);\n}\n\n// Draw keyboard assembly\nmodule keyboard() {\n    // White keys\n    for(i = [0:num_octaves*7-1]) {\n        if(i%7 != 2 && i%7 != 6) { // Skip positions for black keys\n            translate([-body_width/2 + 15 + i*(key_width-0.5), \n                      -body_depth/2 + 10, \n                      -body_height/2 + white_key_height/2])\n                white_key();\n        }\n    }\n    \n    // Black keys\n    for(i = [0:num_octaves-1]) {\n        // C#\n        translate([-body_width/2 + 15 + (i*7+0.5)*(key_width-0.5), \n                  -body_depth/2 + 10, \n                  -body_height/2 + white_key_height/2])\n            black_key();\n        // D#\n        translate([-body_width/2 + 15 + (i*7+1.5)*(key_width-0.5), \n                  -body_depth/2 + 10, \n                  -body_height/2 + white_key_height/2])\n            black_key();\n        // F#\n        translate([-body_width/2 + 15 + (i*7+3.5)*(key_width-0.5), \n                  -body_depth/2 + 10, \n                  -body_height/2 + white_key_height/2])\n            black_key();\n        // G#\n        translate([-body_width/2 + 15 + (i*7+4.5)*(key_width-0.5), \n                  -body_depth/2 + 10, \n                  -body_height/2 + white_key_height/2])\n            black_key();\n        // A#\n        translate([-body_width/2 + 15 + (i*7+5.5)*(key_width-0.5), \n                  -body_depth/2 + 10, \n                  -body_height/2 + white_key_height/2])\n            black_key();\n    }\n}\n\n// Draw drawbars\nmodule drawbars() {\n    for(i = [0:8]) {\n        // Drawbar housing\n        translate([body_width/2 - 35 + i*3.5, body_depth/2 - 10, body_height/2 - 15])\n            cylinder(h=20, d=3, $fn=12);\n        // Drawbar knob\n        color(\"brown\")\n        translate([body_width/2 - 35 + i*3.5, body_depth/2 - 10, body_height/2 - 5])\n            cylinder(h=8, d=4, $fn=12);\n    }\n}\n\n// Draw control panel\nmodule control_panel() {\n    // Main panel\n    difference() {\n        translate([0, body_depth/2 - 15, body_height/2 - 5])\n            cube([body_width-20, 10, 10], center=true);\n        // Indicator holes\n        for(i = [0:2]) {\n            translate([-body_width/4 + i*15, body_depth/2 - 15, body_height/2])\n                cylinder(h=3, d=4, $fn=16);\n        }\n    }\n}\n\n// Draw legs\nmodule legs() {\n    // Front left\n    translate([-body_width/2 + 5, -body_depth/2 + 5, -body_height/2 - 10])\n        cylinder(h=20, d=4, $fn=8);\n    // Front right\n    translate([body_width/2 - 5, -body_depth/2 + 5, -body_height/2 - 10])\n        cylinder(h=20, d=4, $fn=8);\n    // Back left\n    translate([-body_width/2 + 5, body_depth/2 - 5, -body_height/2 - 10])\n        cylinder(h=20, d=4, $fn=8);\n    // Back right\n    translate([body_width/2 - 5, body_depth/2 - 5, -body_height/2 - 10])\n        cylinder(h=20, d=4, $fn=8);\n}\n\n// Assemble the Hammond\nmain_body();\nkeyboard();\ndrawbars();\ncontrol_panel();\nlegs();",
    "renders": true
  },
  {
    "musical_instrument": "keytar",
    "openscad_code": "// Keytar - Realistic Style with Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\n\n// Overall dimensions\nbody_length = 80;\nbody_width = 25;\nbody_thickness = 4;\nneck_length = 60;\nneck_width = 8;\nneck_thickness = 3;\n\nmodule keytar_body() {\n    // Main body\n    difference() {\n        // Main body shape\n        translate([0, 0, body_thickness/2])\n            cube([body_length, body_width, body_thickness], center=true);\n        \n        // Neck pocket\n        translate([body_length/2 - 10, 0, -1])\n            cube([20, neck_width + 2, body_thickness + 2], center=true);\n    }\n    \n    // Body edges rounding\n    translate([body_length/2 - 10, body_width/2, body_thickness/2])\n        cylinder(r=2, h=body_thickness, center=true);\n    translate([body_length/2 - 10, -body_width/2, body_thickness/2])\n        cylinder(r=2, h=body_thickness, center=true);\n    translate([-body_length/2 + 10, body_width/2, body_thickness/2])\n        cylinder(r=2, h=body_thickness, center=true);\n    translate([-body_length/2 + 10, -body_width/2, body_thickness/2])\n        cylinder(r=2, h=body_thickness, center=true);\n}\n\nmodule neck() {\n    // Neck with frets\n    translate([body_length/2 - 10, 0, body_thickness + neck_thickness/2])\n        cube([neck_length, neck_width, neck_thickness], center=false);\n    \n    // Frets\n    for(i = [1:5:25]) {\n        translate([body_length/2 - 10 + i, 0, body_thickness + neck_thickness])\n            cube([0.5, neck_width, 1]);\n    }\n    \n    // Headstock\n    translate([body_length/2 + neck_length - 5, 0, body_thickness + neck_thickness/2])\n        cube([15, neck_width + 4, neck_thickness], center=false);\n}\n\nmodule keys() {\n    // White keys\n    for(i = [0:6]) {\n        translate([-body_length/2 + 10 + i*3, 0, body_thickness])\n            cube([2.5, 8, 2]);\n    }\n    \n    // Black keys\n    for(i = [0:4]) {\n        if(i != 2) {\n            translate([-body_length/2 + 11.5 + i*3, 0, body_thickness + 2])\n                cube([1.5, 5, 1.5]);\n        }\n    }\n}\n\nmodule strap_button() {\n    // Strap button 1\n    translate([-body_length/2, body_width/2, body_thickness/2])\n        cylinder(r=1.5, h=3, center=true);\n    \n    // Strap button 2\n    translate([body_length/2 + neck_length - 5, 0, body_thickness + neck_thickness/2])\n        cylinder(r=1.5, h=3, center=true);\n}\n\nmodule control_panel() {\n    // Control panel area\n    translate([-body_length/2 + 15, body_width/2 + 2, body_thickness/2])\n        cube([20, 4, body_thickness], center=false);\n    \n    // Knobs\n    for(i = [0:2]) {\n        translate([-body_length/2 + 17 + i*5, body_width/2 + 4, body_thickness + 1])\n            cylinder(r=1, h=2);\n    }\n    \n    // Wheels\n    translate([-body_length/2 + 30, -body_width/2 - 2, body_thickness/2])\n        cylinder(r=3, h=2);\n    \n    translate([-body_length/2 + 35, -body_width/2 - 2, body_thickness/2])\n        cylinder(r=3, h=2);\n}\n\nmodule output_jack() {\n    // Output jack\n    translate([body_length/2 - 5, body_width/2 + 2, body_thickness/2])\n        cylinder(r=2, h=4);\n}\n\n// Assembly\nunion() {\n    keytar_body();\n    neck();\n    keys();\n    strap_button();\n    control_panel();\n    output_jack();\n}",
    "renders": true
  },
  {
    "musical_instrument": "controller",
    "openscad_code": "// Realistic game-controller, medium detail, 3D-print ready\n// Overall footprint ≈ 90 mm wide × 60 mm deep × 28 mm high\n\n// ---------- configurable parameters ----------\n$fn = 30;\nwall = 2;       // wall thickness (mm)\ngap  = 0.25;    // clearance for buttons\n\n// ---------- modules ----------\nmodule shell() {\n    // main body shell with rounded top\n    difference() {\n        hull() {\n            // bottom plate\n            translate([0,-8,0]) cube([80,50,wall], center=true);\n            // top plate\n            translate([0,-8,22]) cube([80,50,wall], center=true);\n            // left grip bulge\n            translate([-32,12,11]) sphere(d=30);\n            // right grip bulge\n            translate([32,12,11]) sphere(d=30);\n        }\n\n        // hollow cavity\n        translate([0,-8,wall]) cube([80-2*wall,50-2*wall,20-wall], center=true);\n    }\n}\n\nmodule dpad() {\n    // 4-way directional pad\n    for (a = [0,90,180,270]) {\n        rotate([0,0,a])\n            translate([0,22,23])\n                cube([6,12,3], center=true);\n    }\n    // center nub\n    translate([0,22,26]) cylinder(h=3, d=8, center=true);\n}\n\nmodule abxy() {\n    // A B X Y face buttons\n    for (pos = [[18,22],[-18,22],[18,9],[-18,9]]) {\n        translate(concat(pos,[24]))\n            cylinder(h=3, d=10-wall, center=true);\n    }\n}\n\nmodule sticks() {\n    // left & right analog sticks\n    for (x = [-28,28]) {\n        // base\n        translate([x,0,23])\n            cylinder(h=4, d=14, center=true);\n        // shaft\n        translate([x,0,27])\n            cylinder(h=5, d=8, center=true);\n        // cap\n        translate([x,0,30])\n            sphere(d=12);\n    }\n}\n\nmodule triggers() {\n    // L & R shoulder triggers\n    for (x = [-35,35]) {\n        translate([x,-25,20])\n            rotate([90,0,0])\n                cylinder(h=15, d=12, center=true);\n    }\n}\n\nmodule start_select() {\n    // small oval buttons between sticks\n    translate([0,12,23])\n        scale([1.5,1,1])\n            cylinder(h=2, d=6, center=true);\n    translate([0,8,23])\n        scale([1.5,1,1])\n            cylinder(h=2, d=6, center=true);\n}\n\n// ---------- assembly ----------\nunion() {\n    shell();\n    dpad();\n    abxy();\n    sticks();\n    triggers();\n    start_select();\n}",
    "renders": true
  },
  {
    "musical_instrument": "workstation",
    "openscad_code": "// Realistic Medium-Complexity Workstation\n// Approx 90 mm wide, 70 mm deep, 65 mm high\n// Designed for 3D printing: 2 mm wall thickness, no overhangs >45°, printable in one piece\n\n$fn = 36;\n\n// Main assembly\nunion() {\n    // Tabletop with rounded front edge\n    rounded_tabletop();\n\n    // Left leg assembly\n    translate([-38, 30, 0]) leg_assembly();\n\n    // Right leg assembly\n    translate([38, 30, 0]) mirror([1,0,0]) leg_assembly();\n\n    // Back panel\n    back_panel();\n\n    // Keyboard tray\n    translate([0, -20, 28]) keyboard_tray();\n\n    // Monitor stand\n    translate([0, 10, 50]) monitor_stand();\n\n    // PC tower under desk\n    translate([-25, 30, 0]) pc_tower();\n}\n\n// Rounded front edge tabletop\nmodule rounded_tabletop() {\n    difference() {\n        union() {\n            // Main flat top\n            translate([0, 0, 50]) cube([90, 70, 4], center=true);\n\n            // Rounded front edge using cylinder segments\n            for (x = [-40:5:40]) {\n                translate([x, -35, 52]) rotate([0,90,0]) cylinder(h=5, d=4);\n            }\n        }\n        \n        // Cable management hole\n        translate([20, 0, 50]) cylinder(h=5, d=10);\n    }\n}\n\n// Sturdy leg structure with cross-brace\nmodule leg_assembly() {\n    union() {\n        // Vertical leg post\n        translate([0, 0, 25]) cube([6, 6, 50], center=true);\n\n        // Horizontal foot\n        translate([0, 5, 0]) cube([6, 10, 4], center=true);\n\n        // Diagonal brace\n        translate([0, 15, 15]) rotate([0, -30, 0]) cube([4, 4, 35]);\n    }\n}\n\n// Ventilated back panel\nmodule back_panel() {\n    difference() {\n        // Main panel\n        translate([0, 35, 25]) cube([90, 4, 50], center=true);\n\n        // Ventilation slots\n        for (y = [10:10:40]) {\n            translate([0, 35, y]) cube([80, 4, 2], center=true);\n        }\n    }\n}\n\n// Sliding keyboard tray\nmodule keyboard_tray() {\n    difference() {\n        // Tray surface\n        cube([60, 30, 2], center=true);\n\n        // Mouse area indent\n        translate([20, -10, 1]) cube([20, 15, 2], center=true);\n    }\n\n    // Tray slides\n    translate([-31, 0, -1]) cube([2, 30, 4], center=true);\n    translate([31, 0, -1]) cube([2, 30, 4], center=true);\n}\n\n// Adjustable monitor stand\nmodule monitor_stand() {\n    union() {\n        // Base\n        cylinder(h=4, d=20);\n\n        // Support post\n        translate([0, 0, 4]) cylinder(h=10, d=6);\n\n        // VESA mount plate\n        translate([0, 0, 14]) cube([15, 15, 2], center=true);\n\n        // Mounting holes\n        for (x = [-5, 5]) {\n            for (y = [-5, 5]) {\n                translate([x, y, 15]) cylinder(h=3, d=2);\n            }\n        }\n    }\n}\n\n// PC tower case\nmodule pc_tower() {\n    difference() {\n        union() {\n            // Main case\n            translate([0, 0, 20]) cube([20, 40, 40], center=true);\n\n            // Feet\n            translate([-7, -17, 0]) cube([4, 4, 2], center=true);\n            translate([7, -17, 0]) cube([4, 4, 2], center=true);\n            translate([-7, 17, 0]) cube([4, 4, 2], center=true);\n            translate([7, 17, 0]) cube([4, 4, 2], center=true);\n        }\n\n        // Front panel details\n        // Power button\n        translate([0, -18, 35]) cylinder(h=3, d=4);\n\n        // USB ports\n        for (i = [0:1]) {\n            translate([-5 + i*10, -18, 30]) cube([4, 2, 2], center=true);\n        }\n\n        // Ventilation holes on side\n        for (x = [-6:3:6]) {\n            for (y = [5:4:35]) {\n                translate([x, y - 20, 20]) cube([2, 2, 20], center=true);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "sampler",
    "openscad_code": "// OpenSCAD Sampler Model (Realistic Style, Medium Complexity)\n// Dimensions: 80mm x 55mm x 12mm\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main sampler body\nmodule sampler_body() {\n    difference() {\n        // Outer shell\n        rounded_box(80, 55, 8, 3);\n        \n        // Internal cavity\n        translate([0, 0, -1])\n            rounded_box(80 - 2*wall, 55 - 2*wall, 10, 2);\n        \n        // Button holes\n        for (i = [0:3]) {\n            translate([30 - i*20, 0, 4])\n                cylinder(h=10, d=6, $fn=20);\n        }\n        \n        // Display window\n        translate([0, -12.5, 4])\n            cube([30, 15, 10], center=true);\n        \n        // Speaker grill holes\n        for (x = [-20:5:20]) {\n            for (y = [15:4:25]) {\n                translate([x, y, 4])\n                    cylinder(h=10, d=1.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(l, w, h, r) {\n    minkowski() {\n        cube([l-2*r, w-2*r, h], center=true);\n        sphere(r=r, $fn=20);\n    }\n}\n\n// Buttons\nmodule buttons() {\n    for (i = [0:3]) {\n        translate([30 - i*20, 0, 8])\n            cylinder(h=2.5, d=8, $fn=20);\n    }\n}\n\n// Display screen\nmodule display() {\n    color([0.1, 0.1, 0.1])\n    translate([0, -12.5, 8.1])\n        cube([28, 13, 0.5], center=true);\n}\n\n// Sampling microphone\nmodule microphone() {\n    translate([0, 25, 8])\n    union() {\n        // Base\n        cylinder(h=2, d=10, $fn=20);\n        \n        // Mesh grill\n        translate([0, 0, 2])\n            cylinder(h=3, d=8, $fn=20);\n        \n        // Holes in grill\n        difference() {\n            cylinder(h=3, d=8, $fn=20);\n            for (a = [0:45:315]) {\n                rotate([0, 0, a])\n                translate([2, 0, 1])\n                    cylinder(h=5, d=1, $fn=8);\n            }\n        }\n    }\n}\n\n// Control knobs\nmodule knobs() {\n    // Volume knob\n    translate([-30, -20, 8])\n    union() {\n        cylinder(h=4, d=12, $fn=32);\n        translate([0, 0, 4])\n            cylinder(h=2, d=8, $fn=32);\n        // Indicator line\n        translate([6, 0, 5])\n            cube([2, 0.5, 1], center=true);\n    }\n    \n    // Pitch knob\n    translate([30, -20, 8])\n    union() {\n        cylinder(h=4, d=12, $fn=32);\n        translate([0, 0, 4])\n            cylinder(h=2, d=8, $fn=32);\n        // Indicator line\n        translate([6, 0, 5])\n            cube([2, 0.5, 1], center=true);\n    }\n}\n\n// Jacks\nmodule jacks() {\n    // Audio out\n    translate([-35, 10, 4])\n    union() {\n        cylinder(h=8, d=8, $fn=20);\n        difference() {\n            cylinder(h=8, d=8, $fn=20);\n            cylinder(h=10, d=6, $fn=20);\n        }\n    }\n    \n    // MIDI in\n    translate([35, 10, 4])\n    union() {\n        cylinder(h=8, d=8, $fn=20);\n        difference() {\n            cylinder(h=8, d=8, $fn=20);\n            cube([8, 3, 10], center=true);\n        }\n    }\n}\n\n// Foot pads\nmodule foot_pads() {\n    for (x = [-35, 35]) {\n        for (y = [-22, 22]) {\n            translate([x, y, -4])\n                cylinder(h=4, d=6, $fn=20);\n        }\n    }\n}\n\n// Assemble the sampler\nsampler_body();\nbuttons();\ndisplay();\nmicrophone();\nknobs();\njacks();\nfoot_pads();",
    "renders": true
  },
  {
    "musical_instrument": "rompler",
    "openscad_code": "// Realistic-style 3D printable Rompler (medium complexity)\n\n// Overall dimensions\nbase_w = 76;   // mm\nbase_d = 40;\nbase_h = 8;\n\ntop_h   = 18;\nlcd_w   = 42;\nlcd_h   = 16;\nlcd_t   = 1.5;\n\n// Wall thickness for printability\nwall = 1.2;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer rounded block\n        hull() {\n            translate([wall, wall, 0]) cube([base_w-2*wall, base_d-2*wall, base_h+top_h-wall]);\n            translate([wall*2, wall*2, wall]) cube([base_w-4*wall, base_d-4*wall, base_h+top_h-wall*2]);\n        }\n\n        // Hollow inside\n        translate([2*wall, 2*wall, wall]) \n            cube([base_w-4*wall, base_d-4*wall, base_h+top_h-wall*2]);\n    }\n}\n\n// LCD bezel\nmodule lcd_bezel() {\n    difference() {\n        // Frame\n        translate([(base_w-lcd_w-6)/2, 4, base_h+top_h-lcd_t-2])\n            cube([lcd_w+6, lcd_h+6, lcd_t]);\n\n        // Window\n        translate([(base_w-lcd_w)/2, 7, base_h+top_h-lcd_t-1.9])\n            cube([lcd_w, lcd_h, lcd_t+0.1]);\n    }\n}\n\n// Single encoder cap\nmodule encoder(r=5, h=4, knurl=20) {\n    union() {\n        cylinder(h=h, r=r, $fn=32);\n        for(i=[0:knurl-1]) {\n            rotate([0, 0, i*360/knurl])\n                translate([r-0.2, -0.5, 0])\n                    cube([0.4, 1, h]);\n        }\n    }\n}\n\n// Row of push buttons\nmodule button_row(y, count=4) {\n    spacing = 8;\n    start_x = -(count-1)*spacing/2;\n    for(i=[0:count-1]) {\n        translate([start_x+i*spacing, y, base_h+top_h-wall]) {\n            cylinder(h=2.5, r=2.5, $fn=16);\n            translate([0, 0, 2.5]) cylinder(h=1, r=3.5, $fn=16);\n        }\n    }\n}\n\n// Keypad grid\nmodule keypad() {\n    for(r=[0:3]) {\n        for(c=[0:3]) {\n            translate([-12+c*8, 10+r*8, base_h+top_h-wall]) {\n                difference() {\n                    cube([6, 6, 2]);\n                    translate([1, 1, 1.5]) cube([4, 4, 1]);\n                }\n            }\n        }\n    }\n}\n\n// Rear panel jacks\nmodule jacks() {\n    // Stereo jack left\n    translate([8, 2, 0]) {\n        cylinder(h=5, r=3.5, $fn=32);\n        translate([0, 0, 5]) cylinder(h=2, r=4, $fn=32);\n    }\n\n    // Stereo jack right\n    translate([base_w-8, 2, 0]) {\n        cylinder(h=5, r=3.5, $fn=32);\n        translate([0, 0, 5]) cylinder(h=2, r=4, $fn=32);\n    }\n\n    // MIDI DIN\n    translate([base_w/2, 2, 0]) {\n        cylinder(h=4, r=5, $fn=32);\n        translate([0, 0, 4]) cylinder(h=2, r=5.5, $fn=32);\n    }\n}\n\n// USB-C port\nmodule usb_c() {\n    translate([base_w/2, base_d-2, 0]) {\n        cube([8, 2, 3], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    lcd_bezel();\n\n    // Encoders\n    translate([base_w*0.25, base_d*0.75, base_h+top_h-wall]) encoder();\n    translate([base_w*0.75, base_d*0.75, base_h+top_h-wall]) encoder();\n\n    // Button rows\n    button_row(14, 5);\n    button_row(24, 4);\n\n    // Keypad\n    keypad();\n\n    // Rear connectors\n    jacks();\n    usb_c();\n}",
    "renders": true
  },
  {
    "musical_instrument": "arranger",
    "openscad_code": "// Desk Pen & Tool Arranger – medium-complexity, realistic style\n$fn = 36;           // smooth curves\nwall = 1.5;         // 3D-printable wall thickness\nbase_h = 8;         // overall base height\ncell_gap = 1.5;     // clearance between compartments\npen_d = 8.2;        // standard pen diameter\npen_h = 80;         // pen/tube depth\ntool_d = 12;        // wider tool/scissor shaft\n\n// overall footprint\nbase_x = 90;\nbase_y = 60;\n\nmodule rounded_box(x, y, h, r) {\n    // solid block with rounded top edges\n    hull() {\n        translate([r, r, 0]) cube([x-2*r, y-2*r, h]);\n        for(tx = [r, x-r])\n            for(ty = [r, y-r])\n                translate([tx, ty, h-r]) sphere(r);\n    }\n}\n\nmodule pen_hole(d, h) {\n    // cylindrical cavity with 0.5 mm clearance\n    cylinder(d = d + 0.5, h = h + 1);\n}\n\nmodule pen_row(count, pitch, start_x) {\n    // linear row of pen holes\n    for(i = [0:count-1])\n        translate([start_x + i*pitch, 0, 0])\n            pen_hole(pen_d, pen_h);\n}\n\nmodule tool_row(count, pitch, start_x) {\n    // linear row of wider tool holes\n    for(i = [0:count-1])\n        translate([start_x + i*pitch, 0, 0])\n            pen_hole(tool_d, pen_h);\n}\n\ndifference() {\n    // main base block with rounded edges\n    rounded_box(base_x, base_y, base_h, 6);\n\n    // remove central recess for weight reduction\n    translate([wall, wall, wall])\n        cube([base_x-2*wall, base_y-2*wall, base_h]);\n\n    // pen holes front row\n    translate([10, 8, 0])\n        pen_row(5, pen_d + cell_gap, 0);\n\n    // pen holes back row\n    translate([10 + (pen_d + cell_gap)/2, 8 + pen_d + cell_gap*2, 0])\n        pen_row(4, pen_d + cell_gap, 0);\n\n    // wide tool holes right side\n    translate([base_x - 8 - tool_d, 8, 0])\n        tool_row(2, tool_d + cell_gap, 0);\n\n    // small paper-clip tray left side (shallow)\n    translate([8, base_y - 20, 0])\n        cube([20, 12, base_h - 3]);\n}\n\n// label tab sticking out at front-right\ntranslate([base_x - 25, -8, base_h - 6])\n    difference() {\n        cube([20, 8, 6]);\n        translate([2, 2, 2])\n            cube([16, 4, 3]);\n    }",
    "renders": true
  },
  {
    "musical_instrument": "expanders",
    "openscad_code": "// Realistic 3D-printable expander (palate expander)\n// Overall size: 80 mm long, 50 mm wide, 15 mm thick\n\n// ---------- PARAMETERS ----------\n$fn = 30;               // Curve resolution\nbody_w = 50;            // Overall width\nbody_l = 80;            // Overall length\nbody_h = 15;            // Overall height\nmid_gap = 8;            // Expansion gap in center\nwall_t = 2.5;           // Wall thickness for printing\nscrew_d = 6;            // Threaded rod diameter\nscrew_l = 35;           // Threaded rod length\nband_h = 10;            // Orthodontic band height\ntooth_slot_w = 4;       // Slot for tooth contact\ntooth_slot_d = 3;\nslot_pitch = 8;         // Spacing between tooth slots\nn_slots = 5;            // Number of tooth slots per side\n\n// ---------- MAIN BODY ----------\nmodule expander_body() {\n    // Left half\n    translate([-mid_gap/2, 0, 0])\n        half_body();\n    // Right half\n    translate([mid_gap/2, 0, 0])\n        mirror([1,0,0])\n            half_body();\n}\n\nmodule half_body() {\n    difference() {\n        // Outer shell\n        rounded_box(body_l/2, body_w/2, body_h, wall_t);\n        \n        // Hollow inside\n        translate([0, 0, -wall_t/2])\n            rounded_box(body_l/2 - wall_t, body_w/2 - wall_t, body_h + 1, wall_t/2);\n        \n        // Tooth slots\n        for (i = [1:n_slots]) {\n            translate([\n                body_l/4 - i*slot_pitch,\n                body_w/4,\n                body_h/2\n            ])\n                cube([tooth_slot_w, tooth_slot_d, band_h], center=true);\n        }\n    }\n}\n\nmodule rounded_box(l, w, h, r) {\n    // Rounded-edge box for smoother print\n    minkowski() {\n        cube([l, w, h], center=true);\n        sphere(r);\n    }\n}\n\n// ---------- EXPANSION SCREW ----------\nmodule expansion_screw() {\n    // Central threaded rod\n    rotate([0,90,0])\n        cylinder(d=screw_d, h=screw_l, center=true);\n    \n    // Hex key hole for activation\n    translate([0, 0, body_h/2 + 1])\n        rotate([0,90,0])\n            cylinder(d=screw_d*1.5, h=wall_t*2, $fn=6, center=true);\n    \n    // Retention rings\n    for (z = [-1, 1]) {\n        translate([0, 0, z*body_h/4])\n            rotate([0,90,0])\n                cylinder(d=screw_d+2, h=wall_t, center=true);\n    }\n}\n\n// ---------- ORTHODONTIC BANDS ----------\nmodule bands() {\n    // Left side\n    for (i = [1:n_slots]) {\n        translate([\n            -body_l/4 + i*slot_pitch,\n            body_w/4 + tooth_slot_d/2 + wall_t/2,\n            0\n        ])\n            band();\n    }\n    // Right side\n    for (i = [1:n_slots]) {\n        translate([\n            body_l/4 - i*slot_pitch,\n            body_w/4 + tooth_slot_d/2 + wall_t/2,\n            0\n        ])\n            rotate([0,0,180])\n                band();\n    }\n}\n\nmodule band() {\n    difference() {\n        // Outer band\n        cube([tooth_slot_w + 2*wall_t, wall_t*1.5, band_h], center=true);\n        // Inner hollow\n        cube([tooth_slot_w, wall_t, band_h + 1], center=true);\n    }\n}\n\n// ---------- ASSEMBLY ----------\nunion() {\n    expander_body();\n    expansion_screw();\n    bands();\n}",
    "renders": true
  },
  {
    "musical_instrument": "module",
    "openscad_code": "// Realistic style USB-C plug module (male connector)\n// Dimensions based on USB-C spec, scaled for 3D printing\n// Overall size ~15mm x 8mm x 6mm\n\n// Main module\nmodule usbc_plug() {\n    // Outer metal shell\n    difference() {\n        // Main shell body\n        shell_body();\n        \n        // Hollow inside\n        translate([0, 0, -1])\n            cube([13, 6.2, 10], center=true);\n        \n        // Cable entry hole\n        translate([0, 0, 5.5])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=4.5, $fn=20);\n    }\n    \n    // Inner plastic tongue\n    translate([0, 0, -1.3])\n        plastic_tongue();\n    \n    // Contact pins\n    for(i = [-1:1]) {\n        translate([i * 2.5 - 3.75, 0, -2.5])\n            rotate([0, 90, 0])\n                contact_pin();\n    }\n    for(i = [-1:1]) {\n        translate([i * 2.5 + 3.75, 0, -2.5])\n            rotate([0, 90, 0])\n                contact_pin();\n    }\n    \n    // Shell spring clips\n    translate([6.5, 0, 0])\n        spring_clip();\n    translate([-6.5, 0, 0])\n        mirror([1, 0, 0])\n            spring_clip();\n}\n\n// Metal shell body\nmodule shell_body() {\n    // Main rectangular shell\n    translate([0, 0, 0])\n        cube([15, 7.5, 3], center=true);\n    \n    // Rounded edges\n    translate([7.5, 3.75, 0])\n        cylinder(h=3.5, d=3.5, $fn=20);\n    translate([-7.5, 3.75, 0])\n        cylinder(h=3.5, d=3.5, $fn=20);\n    translate([7.5, -3.75, 0])\n        cylinder(h=3.5, d=3.5, $fn=20);\n    translate([-7.5, -3.75, 0])\n        cylinder(h=3.5, d=3.5, $fn=20);\n    \n    // Front bevel\n    translate([7.5, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=7.5, d1=3.5, d2=2.5, $fn=20);\n}\n\n// Plastic tongue with contacts\nmodule plastic_tongue() {\n    // Main tongue\n    translate([0, 0, -1])\n        cube([12.5, 6, 1.8], center=true);\n    \n    // Rounded front\n    translate([6.25, 0, -1])\n        rotate([0, 90, 0])\n            cylinder(h=6, d=1.8, $fn=20);\n    translate([-6.25, 0, -1])\n        rotate([0, 90, 0])\n            cylinder(h=6, d=1.8, $fn=20);\n    \n    // Contact pads (simplified as indentations)\n    for(i = [-1:1]) {\n        translate([i * 2.5 - 3.75, -2.5, -1.9])\n            cube([1.5, 0.3, 0.2], center=true);\n    }\n    for(i = [-1:1]) {\n        translate([i * 2.5 + 3.75, 2.5, -1.9])\n            cube([1.5, 0.3, 0.2], center=true);\n    }\n}\n\n// Contact pins\nmodule contact_pin() {\n    difference() {\n        // Pin body\n        cylinder(h=3, d=0.6, $fn=8);\n        \n        // Solder pad\n        translate([1.5, 0, 0])\n            cube([1, 0.8, 0.3], center=true);\n    }\n}\n\n// Spring clips on sides\nmodule spring_clip() {\n    difference() {\n        translate([0, 0, 0])\n            cube([0.5, 2.5, 1.5], center=true);\n        \n        // Cutout for spring action\n        translate([0.2, 0, 0.3])\n            cube([0.3, 2.2, 0.8], center=true);\n    }\n}\n\n// Render the plug\nusbc_plug();",
    "renders": true
  },
  {
    "musical_instrument": "digitalpiano",
    "openscad_code": "// Digital Piano - Realistic style, medium complexity\n// Overall dimensions: 60mm x 20mm x 10mm\n\n// Main body\ndifference() {\n    // Main case\n    translate([-30, -10, 0])\n        cube([60, 20, 8]);\n    \n    // Front bevel\n    translate([-31, -11, 7])\n        rotate([0, 45, 0])\n        cube([12, 22, 12]);\n}\n\n// Control panel\ntranslate([-28, -8, 8])\n    cube([56, 16, 1.5]);\n\n// Display screen\ntranslate([-25, -5, 9.6])\n    cube([12, 10, 0.4]);\n\n// Buttons above keys\nfor(i = [0:7]) {\n    translate([-22 + i*3, -6, 9.6])\n        cylinder(h=0.6, d=2);\n}\n\n// Volume knob\ntranslate([25, 0, 9.6])\n    cylinder(h=2, d=4);\n\n// Keys module\nmodule white_key(x) {\n    translate([x, -9, 0.5])\n        cube([3.2, 18, 1.5]);\n}\n\nmodule black_key(x) {\n    translate([x+2, -9, 2])\n        cube([2, 10, 3]);\n}\n\n// White keys\nfor(i = [0:12]) {\n    white_key(-29 + i*3.5);\n}\n\n// Black keys (partial set for realism)\nblack_keys = [1, 2, 4, 5, 6, 8, 9, 11, 12];\nfor(i = black_keys) {\n    black_key(-29 + i*3.5);\n}\n\n// Speaker grills\nmodule speaker_grill(x) {\n    difference() {\n        translate([x, -8, 0.5])\n            cube([10, 1, 1]);\n        \n        // Holes\n        for(h = [0:3]) {\n            translate([x + 1.5 + h*2, -7.5, 0.6])\n                cube([1, 0.5, 0.8]);\n        }\n    }\n}\n\nspeaker_grill(-28);\nspeaker_grill(18);\n\n// Back connectors\ntranslate([29, 0, 4])\n    rotate([90, 0, 0])\n    cylinder(h=3, d=2);\n\n// Power LED\ntranslate([-27, 6, 9.6])\n    cylinder(h=0.4, d=1);\n\n// Music rest\ntranslate([-30, 10, 7])\n    rotate([0, -30, 0])\n    cube([30, 1, 8]);",
    "renders": true
  },
  {
    "musical_instrument": "uprightpiano",
    "openscad_code": "// Upright Piano - Realistic Style, Medium Complexity\n\n// Overall dimensions\npiano_width = 45;\npiano_depth = 35;\npiano_height = 75;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main body\nmodule piano_body() {\n    difference() {\n        // Outer shell\n        cube([piano_width, piano_depth, piano_height], center = true);\n        \n        // Hollow inside\n        translate([0, 0, wall/2])\n        cube([piano_width - wall*2, piano_depth - wall*2, piano_height - wall], center = true);\n    }\n}\n\n// Top lid\nmodule piano_lid() {\n    translate([0, piano_depth/2 - 2, piano_height/2 - 1])\n    cube([piano_width - 4, 4, 2], center = true);\n}\n\n// Front panel with keyboard area\nmodule front_panel() {\n    difference() {\n        // Main front\n        translate([0, -piano_depth/2 + wall/2, -10])\n        cube([piano_width - 4, wall, 25], center = true);\n        \n        // Keyboard cutout\n        translate([0, -piano_depth/2 + wall + 0.1, -5])\n        cube([piano_width - 12, wall + 0.2, 15], center = true);\n    }\n}\n\n// Piano keys\nmodule keys() {\n    // White keys\n    for(i = [-6:6]) {\n        translate([i * 2.8, -piano_depth/2 + wall + 1, -8])\n        cube([2.2, 3, 12]);\n    }\n    \n    // Black keys\n    for(i = [-5, -3, -1, 1, 3, 5, 7]) {\n        if(abs(i) != 6) {\n            translate([i * 2.8 - 1.4, -piano_depth/2 + wall + 1, -2])\n            cube([1.5, 2.5, 8]);\n        }\n    }\n}\n\n// Pedals\nmodule pedals() {\n    translate([0, piano_depth/2 - 5, -piano_height/2 + 5])\n    for(i = [-1, 0, 1]) {\n        translate([i * 5, 0, 0]) {\n            cylinder(h = 5, r = 1, center = false);\n            translate([0, 0, 5])\n            rotate([90, 0, 0])\n            cylinder(h = 8, r = 0.5, center = false);\n        }\n    }\n}\n\n// Music stand\nmodule music_stand() {\n    translate([0, -piano_depth/2 + 8, 5])\n    rotate([70, 0, 0])\n    cube([piano_width - 10, 0.5, 15], center = true);\n}\n\n// Side handles\nmodule handles() {\n    for(side = [-1, 1]) {\n        translate([side * (piano_width/2 - 2), 0, -piano_height/4]) {\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 6, r = 1.5, center = true);\n                cylinder(h = 7, r = 0.5, center = true);\n            }\n        }\n    }\n}\n\n// Casters (wheels)\nmodule casters() {\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x * (piano_width/2 - 5), y * (piano_depth/2 - 5), -piano_height/2 + 2])\n        sphere(r = 2);\n    }\n}\n\n// Back post\nmodule back_post() {\n    translate([0, piano_depth/2 - 3, 0])\n    cube([piano_width - 6, 3, piano_height - 6], center = true);\n}\n\n// Assemble the piano\nunion() {\n    piano_body();\n    piano_lid();\n    front_panel();\n    keys();\n    pedals();\n    music_stand();\n    handles();\n    casters();\n    back_post();\n}",
    "renders": true
  },
  {
    "musical_instrument": "grandpiano",
    "openscad_code": "// Grand Piano - Realistic Style, Medium Complexity\n// Size: ~80mm wide, ~60mm deep, ~25mm tall\n// All parts have 1.5mm wall thickness for 3D printing\n\n// Main parameters\npiano_length = 80;\npiano_width = 60;\npiano_height = 25;\nkeybed_height = 8;\n\n// Colors for preview (ignored in print)\ncolor(\"black\") {\n    // Main body\n    difference() {\n        // Main grand piano shell\n        hull() {\n            // Front curve\n            translate([piano_length-30, piano_width/2, piano_height/2])\n                cylinder(h=piano_height, r1=25, r2=20, $fn=50);\n            // Back curve  \n            translate([5, piano_width/2, piano_height/2])\n                cylinder(h=piano_height, r1=20, r2=25, $fn=50);\n        }\n        \n        // Hollow out interior\n        translate([piano_length/2, piano_width/2, piano_height/2-1.5])\n            cube([piano_length-6, piano_width-6, piano_height-1.5], center=true);\n    }\n    \n    // Lid\n    translate([piano_length-20, piano_width/2, piano_height-1.5])\n        rotate([0,15,0])\n        difference() {\n            // Main lid\n            scale([1, 0.9, 0.1])\n                cylinder(h=1, r=30, $fn=50);\n            // Prop stick hole\n            translate([0, -5, -1])\n                cylinder(h=3, r=1.5, $fn=16);\n        }\n    \n    // Lid prop stick\n    translate([piano_length-35, piano_width/2-10, piano_height-1.5])\n        rotate([75,0,0])\n        cylinder(h=12, r=1.5, $fn=8);\n    \n    // Keyboard bed\n    translate([5, piano_width/2, keybed_height/2])\n        cube([30, piano_width-5, keybed_height], center=true);\n    \n    // Keys\n    module white_key(x) {\n        translate([x, piano_width/2, keybed_height+0.75])\n            cube([2.5, 10, 1.5], center=true);\n    }\n    \n    module black_key(x) {\n        translate([x, piano_width/2, keybed_height+2])\n            cube([1.5, 6, 2], center=true);\n    }\n    \n    // White keys\n    for(i = [0:11]) {\n        white_key(7 + i*2.6);\n    }\n    \n    // Black keys (pattern)\n    black_key(10);\n    black_key(12.6);\n    black_key(17.8);\n    black_key(20.4);\n    black_key(23);\n    black_key(28.2);\n    black_key(30.8);\n    black_key(33.4);\n    \n    // Music stand\n    translate([15, piano_width/2-12, keybed_height+1.5])\n        rotate([75,0,0])\n        cube([20, 0.5, 8], center=false);\n    \n    // Legs\n    module leg(x, y) {\n        translate([x, y, 0])\n            cylinder(h=keybed_height, r=2, $fn=12);\n    }\n    \n    leg(10, 10);\n    leg(10, piano_width-10);\n    leg(piano_length-15, piano_width/2);\n    \n    // Pedals\n    translate([10, piano_width/2+15, 0])\n        for(i = [0:2]) {\n            translate([i*3, 0, 0])\n                rotate([90,0,0])\n                    cylinder(h=5, r=1, $fn=8);\n        }\n    \n    // Piano bench\n    translate([piano_length-40, piano_width+10, 0])\n        difference() {\n            // Seat\n            cube([20, 8, 8], center=true);\n            // Hollow legs\n            translate([7, 3, 3.5])\n                cylinder(h=8, r1=1.5, r2=1.5, $fn=6);\n            translate([-7, 3, 3.5])\n                cylinder(h=8, r1=1.5, r2=1.5, $fn=6);\n            translate([7, -3, 3.5])\n                cylinder(h=8, r1=1.5, r2=1.5, $fn=6);\n            translate([-7, -3, 3.5])\n                cylinder(h=8, r1=1.5, r2=1.5, $fn=6);\n        }\n}",
    "renders": true
  },
  {
    "musical_instrument": "babygrand",
    "openscad_code": "// Baby Grand Piano - Medium Complexity\n// Overall size ~80mm long, 40mm wide, 25mm high\n// 3D printable with no overhangs >45°\n\n// Main body\nmodule body() {\n    // Curved rim\n    difference() {\n        hull() {\n            translate([-35, -18, 0]) cylinder(h=12, r=3, $fn=20);\n            translate([35, -18, 0]) cylinder(h=12, r=3, $fn=20);\n            translate([35, 18, 0]) cylinder(h=12, r=3, $fn=20);\n            translate([-35, 18, 0]) cylinder(h=12, r=3, $fn=20);\n        }\n        // Hollow interior\n        translate([-32, -15, -1]) cube([64, 30, 14]);\n    }\n    \n    // Top lid\n    translate([-34, -16, 12]) cube([68, 32, 1.5]);\n    \n    // Prop stick\n    translate([0, 17, 12]) rotate([0, 30, 0]) cylinder(h=8, r=0.8, $fn=8);\n}\n\n// Keyboard section\nmodule keyboard() {\n    // Keybed\n    translate([-36, 16, 6]) cube([30, 12, 2]);\n    \n    // White keys\n    for(i = [0:9]) {\n        translate([-35 + i*2.8, 16.5, 8.2]) cube([2.4, 11, 1]);\n    }\n    \n    // Black keys\n    for(i = [0:6]) {\n        if(i != 2 && i != 5) {\n            translate([-34 + i*4 + 1.4, 16.5, 9.4]) cube([1.4, 10, 2]);\n        }\n    }\n    \n    // Fallboard\n    translate([-37, 15, 6]) rotate([0, 0, 0]) cube([32, 1, 5]);\n}\n\n// LegS\nmodule legs() {\n    // Front left\n    translate([-30, -15, -4]) cylinder(h=4, r=1.2, $fn=12);\n    // Front right  \n    translate([30, -15, -4]) cylinder(h=4, r=1.2, $fn=12);\n    // Rear single\n    translate([0, 15, -4]) cylinder(h=4, r=1.5, $fn=12);\n}\n\n// Pedals\nmodule pedals() {\n    translate([0, 18, -3.5]) {\n        // Pedal bar\n        cube([12, 1, 1]);\n        \n        // Three pedals\n        for(i = [-1:1]) {\n            translate([i*4, 0.5, 0]) cube([2, 3, 0.5]);\n        }\n    }\n}\n\n// Music stand\nmodule music_stand() {\n    translate([-15, 10, 12]) rotate([15, 0, 0]) cube([30, 1, 8]);\n}\n\n// Assembly\nunion() {\n    body();\n    keyboard();\n    legs();\n    pedals();\n    music_stand();\n}",
    "renders": true
  },
  {
    "musical_instrument": "squarepiano",
    "openscad_code": "// Square piano model - medium complexity realistic style\n// Approx 80mm wide x 60mm deep x 25mm tall\n\n$fn = 32;\n\nmodule piano_case() {\n    // Main case body\n    difference() {\n        // Outer shell\n        cube([80, 60, 20]);\n        \n        // Inner cavity\n        translate([5, 5, 5])\n            cube([70, 50, 15]);\n    }\n    \n    // Lid\n    translate([-1, 0, 20])\n        cube([82, 60, 2]);\n}\n\nmodule keyboard() {\n    // Key bed\n    translate([5, 20, 17])\n        cube([70, 20, 3]);\n    \n    // White keys\n    for(i = [0:13]) {\n        translate([7 + i*5, 21, 20])\n            cube([4, 18, 1.5]);\n    }\n    \n    // Black keys\n    for(i = [0:9]) {\n        if(i != 3 && i != 7) {\n            translate([12.5 + i*7.5, 20, 20.5])\n                cube([3, 16, 2]);\n        }\n    }\n}\n\nmodule legs() {\n    // Front legs\n    translate([10, 55, 0])\n        cylinder(h=20, d=4);\n    translate([70, 55, 0])\n        cylinder(h=20, d=4);\n    \n    // Back legs\n    translate([10, 5, 0])\n        cylinder(h=20, d=4);\n    translate([70, 5, 0])\n        cylinder(h=20, d=4);\n}\n\nmodule music_stand() {\n    // Stand support\n    translate([30, 50, 20])\n        rotate([0, -15, 0])\n            cube([20, 2, 15]);\n    \n    // Stand lip\n    translate([30, 50, 19])\n        cube([20, 1, 1]);\n}\n\nmodule pedals() {\n    // Pedal bar\n    translate([35, 0, 5])\n        cube([10, 2, 10]);\n    \n    // Pedal levers\n    translate([38, -5, 0])\n        rotate([0, 0, -30])\n            cube([2, 10, 2]);\n    translate([45, -5, 0])\n        rotate([0, 0, -30])\n            cube([2, 10, 2]);\n}\n\n// Assemble the piano\nunion() {\n    piano_case();\n    keyboard();\n    legs();\n    music_stand();\n    pedals();\n}",
    "renders": true
  },
  {
    "musical_instrument": "preparedpiano",
    "openscad_code": "// Prepared Piano - Realistic Medium Complexity\n// Overall dimensions: 80mm x 60mm x 45mm\n\n$fn = 32;\n\nmodule piano_case() {\n    // Main body\n    difference() {\n        // Outer shell\n        cube([80, 60, 45], center = true);\n        // Hollow interior\n        translate([0, 0, 2.5])\n            cube([74, 54, 40], center = true);\n    }\n    \n    // Front panel with keyboard opening\n    translate([0, 30, 0])\n        difference() {\n            cube([80, 3, 20], center = true);\n            translate([0, 1, 5])\n                cube([70, 4, 8], center = true);\n        }\n}\n\nmodule keyboard() {\n    // White keys\n    for(i = [-14:14]) {\n        if(abs(i) % 7 != 3 && abs(i) % 7 != 0) {\n            translate([i * 2.2, 29, -8])\n                cube([2, 1.5, 12]);\n        }\n    }\n    \n    // Black keys\n    for(i = [-13:13]) {\n        if(abs(i) % 7 == 1 || abs(i) % 7 == 2 || abs(i) % 7 == 4 || abs(i) % 7 == 5 || abs(i) % 7 == 6) {\n            translate([i * 2.2 + 1.1, 30, -2])\n                cube([1.2, 2, 6]);\n        }\n    }\n}\n\nmodule lid() {\n    // Main lid\n    translate([0, -30, 25])\n        rotate([15, 0, 0])\n            cube([76, 60, 2], center = true);\n    \n    // Lid prop stick\n    translate([35, -10, -5])\n        cylinder(h = 30, r = 1);\n    \n    // Prop support\n    translate([35, -20, 10])\n        rotate([90, 0, 0])\n            cylinder(h = 5, r1 = 3, r2 = 1);\n}\n\nmodule strings() {\n    // String frame\n    translate([0, 0, 15])\n        cube([70, 50, 2], center = true);\n    \n    // Individual strings\n    for(i = [-30:30]) {\n        translate([i * 1.1, 0, 16])\n            rotate([0, 90, 0])\n                cylinder(h = 48, r = 0.2);\n    }\n}\n\nmodule pedals() {\n    // Pedal bar\n    translate([0, -35, -20])\n        cube([40, 3, 3], center = true);\n    \n    // Three pedals\n    for(i = [-1:1]) {\n        translate([i * 12, -37, -20])\n            rotate([45, 0, 0])\n                cylinder(h = 8, r = 2);\n    }\n}\n\nmodule preparation_screws() {\n    // Screws between strings for preparation\n    for(i = [-5:5]) {\n        for(j = [-2:2]) {\n            translate([i * 6, j * 8, 17])\n                cylinder(h = 3, r = 0.8);\n        }\n    }\n}\n\nmodule piano_stand() {\n    // Four legs\n    for(x = [-30, 30])\n        for(y = [-20, 20])\n            translate([x, y, -30])\n                cylinder(h = 25, r = 2);\n    \n    // Cross supports\n    translate([0, 0, -20])\n        cube([60, 3, 2], center = true);\n    translate([0, 0, -20])\n        rotate([0, 0, 90])\n            cube([40, 3, 2], center = true);\n}\n\n// Assemble the piano\nunion() {\n    piano_stand();\n    piano_case();\n    keyboard();\n    lid();\n    strings();\n    pedals();\n    preparation_screws();\n}",
    "renders": true
  },
  {
    "musical_instrument": "playerpiano",
    "openscad_code": "// Player Piano - Realistic Style, Medium Complexity\n// Designed for 3D printing (no overhangs, 1.2mm walls)\n\n// Piano dimensions\npiano_width = 80;\npiano_depth = 50;\npiano_height = 45;\nkey_width = 3.2;\nkey_length = 25;\nkey_height = 1.5;\n\n// Main piano body\nmodule piano_body() {\n    // Base cabinet\n    difference() {\n        cube([piano_width, piano_depth, piano_height]);\n        // Hollow interior\n        translate([2, 2, 2])\n            cube([piano_width-4, piano_depth-4, piano_height-4]);\n    }\n    \n    // Top lid\n    translate([0, 0, piano_height])\n    cube([piano_width, piano_depth, 2]);\n}\n\n// Piano keys\nmodule white_keys() {\n    for(i = [0:11]) {\n        translate([i * key_width + 5, 2, piano_height-1])\n        cube([key_width-0.2, key_length, key_height]);\n    }\n}\n\n// Black keys\nmodule black_keys() {\n    for(i = [0:7]) {\n        if(i != 2 && i != 5) {\n            translate([i * key_width + key_width*1.5 + 4.5, 2, piano_height-1+key_height])\n            cube([key_width*0.6, key_length*0.7, key_height*1.5]);\n        }\n    }\n}\n\n// Front panel with player mechanism\nmodule player_front() {\n    // Roll compartment door\n    translate([5, piano_depth-3, piano_height-15])\n    cube([piano_width-10, 2, 12]);\n    \n    // Pedal opening\n    translate([piano_width/2-5, 0, 5])\n    cube([10, 5, 8]);\n}\n\n// Pedals\nmodule pedals() {\n    // Left pedal\n    translate([piano_width/2-6, -5, 8])\n    rotate([90, 0, 0])\n    cylinder(h=8, r=1.5, $fn=8);\n    \n    // Right pedal\n    translate([piano_width/2+6, -5, 8])\n    rotate([90, 0, 0])\n    cylinder(h=8, r=1.5, $fn=8);\n    \n    // Pedal bar\n    translate([piano_width/2-8, -2, 5])\n    cube([16, 2, 1]);\n}\n\n// Piano legs\nmodule legs() {\n    // Front left\n    translate([3, 3, 0])\n    cylinder(h=5, r=2, $fn=8);\n    \n    // Front right\n    translate([piano_width-3, 3, 0])\n    cylinder(h=5, r=2, $fn=8);\n    \n    // Back left\n    translate([3, piano_depth-3, 0])\n    cylinder(h=5, r=2, $fn=8);\n    \n    // Back right\n    translate([piano_width-3, piano_depth-3, 0])\n    cylinder(h=5, r=2, $fn=8);\n}\n\n// Music stand\nmodule music_stand() {\n    translate([piano_width/2-15, 27, piano_height+2])\n    rotate([100, 0, 0])\n    cube([30, 2, 15]);\n}\n\n// Assemble the piano\nunion() {\n    piano_body();\n    white_keys();\n    black_keys();\n    player_front();\n    pedals();\n    legs();\n    music_stand();\n}",
    "renders": true
  },
  {
    "musical_instrument": "honkytonk",
    "openscad_code": "// Honkytonk Bar - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Overall dimensions: 80mm x 60mm x 45mm\n\n// Main building structure\nmodule building() {\n    // Base foundation\n    difference() {\n        // Main block\n        cube([80, 60, 35], center=true);\n        \n        // Door opening\n        translate([0, -29.5, -10])\n            cube([20, 5, 25], center=true);\n            \n        // Windows\n        for(x = [-25, 25]) {\n            translate([x, -29.5, 5])\n                cube([15, 5, 15], center=true);\n        }\n    }\n}\n\n// Porch roof\nmodule porch_roof() {\n    translate([0, -45, 20])\n        cube([90, 30, 2], center=true);\n}\n\n// Columns supporting porch\nmodule porch_columns() {\n    for(x = [-30, 30]) {\n        translate([x, -45, 10])\n            cylinder(h=20, r=3, center=true);\n    }\n}\n\n// Saloon doors\nmodule saloon_doors() {\n    // Left door\n    translate([-7.5, -29, -10])\n        cube([7, 1, 20], center=true);\n    \n    // Right door\n    translate([7.5, -29, -10])\n        cube([7, 1, 20], center=true);\n}\n\n// Window frames\nmodule window_frames() {\n    for(x = [-25, 25]) {\n        // Bottom frame\n        translate([x, -29, -2.5])\n            cube([17, 2, 1], center=true);\n            \n        // Top frame\n        translate([x, -29, 12.5])\n            cube([17, 2, 1], center=true);\n            \n        // Left frame\n        translate([x-8.5, -29, 5])\n            cube([1, 2, 15], center=true);\n            \n        // Right frame\n        translate([x+8.5, -29, 5])\n            cube([1, 2, 15], center=true);\n    }\n}\n\n// Roof with slight angle\nmodule roof() {\n    // Main roof\n    translate([0, 0, 30])\n        rotate([0, -10, 0])\n        cube([85, 65, 15], center=true);\n        \n    // Roof ridge\n    translate([0, 0, 40])\n        rotate([0, -10, 0])\n        cube([5, 65, 5], center=true);\n}\n\n// Chimney\nmodule chimney() {\n    translate([25, 0, 35])\n        cube([10, 10, 15], center=true);\n}\n\n// Beer barrel decorations\nmodule barrels() {\n    for(x = [-35, 35]) {\n        translate([x, 35, -15])\n            cylinder(h=20, r=8, center=true);\n            \n        // Barrel hoops\n        for(h = [-5, 0, 5]) {\n            translate([x, 35, h])\n                rotate([90, 0, 0])\n                cylinder(h=16, r=9, center=true);\n        }\n    }\n}\n\n// Sign\nmodule sign() {\n    translate([0, 0, 25])\n        cube([40, 3, 10], center=true);\n        \n    // Sign support\n    translate([0, 15, 15])\n        cube([3, 30, 3], center=true);\n}\n\n// Assemble the honkytonk\nunion() {\n    building();\n    porch_roof();\n    porch_columns();\n    saloon_doors();\n    window_frames();\n    roof();\n    chimney();\n    barrels();\n    sign();\n}",
    "renders": true
  },
  {
    "musical_instrument": "tackpiano",
    "openscad_code": "// Tackpiano - medium complexity realistic style\n// 3D printable model with no overhangs\n\n$fn = 32;\n\n// Main dimensions\npiano_width = 90;\npiano_depth = 60;\npiano_height = 45;\nwall_thickness = 2;\n\n// Keys\nwhite_key_width = 3.5;\nwhite_key_length = 20;\nblack_key_width = 2;\nblack_key_length = 12;\n\n// Module for the main piano body\nmodule piano_body() {\n    difference() {\n        // Outer shell\n        cube([piano_width, piano_depth, piano_height]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([piano_width - 2*wall_thickness, piano_depth - 2*wall_thickness, piano_height - wall_thickness]);\n        \n        // Front key opening\n        translate([0, piano_depth - wall_thickness, wall_thickness])\n            cube([piano_width, wall_thickness, white_key_length - wall_thickness]);\n    }\n}\n\n// Module for piano lid\nmodule piano_lid() {\n    translate([-wall_thickness, -wall_thickness, piano_height])\n        cube([piano_width + 2*wall_thickness, piano_depth + 2*wall_thickness, wall_thickness]);\n}\n\n// Module for single white key\nmodule white_key(x_pos) {\n    translate([x_pos, piano_depth - white_key_length, wall_thickness])\n        cube([white_key_width, white_key_length, wall_thickness]);\n}\n\n// Module for single black key\nmodule black_key(x_pos) {\n    translate([x_pos, piano_depth - black_key_length, wall_thickness + wall_thickness])\n        cube([black_key_width, black_key_length, wall_thickness]);\n}\n\n// Module for keyboard\nmodule keyboard() {\n    // White keys\n    for(i = [0:9]) {\n        white_key(5 + i * (white_key_width + 0.5));\n    }\n    \n    // Black keys\n    black_key(6.75);\n    black_key(10.75);\n    black_key(17.75);\n    black_key(21.75);\n    black_key(25.75);\n    black_key(32.75);\n    black_key(36.75);\n}\n\n// Module for legs\nmodule legs() {\n    // Front left leg\n    translate([wall_thickness*2, wall_thickness*2, -10])\n        cylinder(h=10, d=4);\n    \n    // Front right leg\n    translate([piano_width - wall_thickness*2, wall_thickness*2, -10])\n        cylinder(h=10, d=4);\n    \n    // Back left leg\n    translate([wall_thickness*2, piano_depth - wall_thickness*2, -10])\n        cylinder(h=10, d=4);\n    \n    // Back right leg\n    translate([piano_width - wall_thickness*2, piano_depth - wall_thickness*2, -10])\n        cylinder(h=10, d=4);\n}\n\n// Module for music stand\nmodule music_stand() {\n    translate([piano_width/2 - 15, wall_thickness, piano_height - 5])\n        rotate([80, 0, 0])\n            cube([30, wall_thickness, 20]);\n}\n\n// Assembly\nunion() {\n    piano_body();\n    piano_lid();\n    keyboard();\n    legs();\n    music_stand();\n}",
    "renders": true
  },
  {
    "musical_instrument": "toypiano",
    "openscad_code": "// Toy Piano - Realistic Style, Medium Complexity\n// Dimensions: ~80mm wide x 60mm deep x 35mm tall\n\n// Main body module\nmodule body() {\n    difference() {\n        // Main case\n        union() {\n            // Bottom case\n            translate([0, 0, 10]) \n                cube([80, 60, 20], center=true);\n            \n            // Top lid with slight slope\n            translate([0, 0, 25]) \n                scale([1, 1, 0.3]) \n                cube([78, 58, 20], center=true);\n        }\n        \n        // Hollow out the inside\n        translate([0, 0, 12]) \n            cube([74, 54, 16], center=true);\n        \n        // Speaker holes\n        for(x = [-20, 0, 20]) {\n            translate([x, 20, 20]) \n                cylinder(h=5, r=4, center=true);\n        }\n        \n        // Key slots\n        for(i = [0:7]) {\n            translate([-30 + i*8, -25, 15]) \n                cube([7, 10, 15], center=true);\n        }\n    }\n}\n\n// Piano keys module\nmodule keys() {\n    // White keys\n    for(i = [0:6]) {\n        translate([-30 + i*8, -25, 7.5]) \n            cube([6.5, 9, 5], center=true);\n    }\n    \n    // Black keys\n    for(i = [0:4]) {\n        if(i != 2) {\n            translate([-26 + i*8, -25, 10]) \n                cube([4, 7, 3], center=true);\n        }\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    translate([0, 0, 28]) {\n        // Panel surface\n        cube([40, 15, 2], center=true);\n        \n        // Buttons\n        for(i = [0:2]) {\n            translate([-12 + i*12, 0, 1.5]) \n                cylinder(h=2, r=3, center=true);\n        }\n        \n        // Small display\n        translate([0, -5, 1.5]) \n            cube([15, 5, 1], center=true);\n    }\n}\n\n// Side handle\nmodule handle() {\n    translate([40, 0, 15]) {\n        rotate([0, 90, 0]) \n            cylinder(h=30, r=3, center=true);\n    }\n}\n\n// Front legs\nmodule legs() {\n    for(x = [-30, 30]) {\n        for(y = [-20, 20]) {\n            translate([x, y, 5]) {\n                cylinder(h=10, r=2, center=true);\n                translate([0, 0, -5]) \n                    sphere(r=2.5);\n            }\n        }\n    }\n}\n\n// Assembly\nbody();\nkeys();\ncontrol_panel();\nhandle();\nlegs();",
    "renders": true
  },
  {
    "musical_instrument": "thumbpiano",
    "openscad_code": "// Thumbpiano (Kalimba) - medium realism\n// All dimensions in mm\n\n// Main parameters\nbody_len = 90;\nbody_w = 65;\nbody_h = 12;\nwall_th = 3;\n\n// Tines\nnum_tines = 8;\ntine_w = 2;\ntine_h = 1;\ntine_len_start = 35;\ntine_step = 4;\n\n// Bridge\nbridge_h = 4;\nbridge_w = 55;\nbridge_len = 8;\n\n// Sound hole\nhole_d = 8;\nhole_depth = 6;\n\nmodule body() {\n    difference() {\n        // Main body block\n        cube([body_len, body_w, body_h], center=true);\n        \n        // Hollow cavity\n        translate([0, 0, -wall_th/2])\n            cube([body_len-wall_th*2, body_w-wall_th*2, body_h-wall_th], center=true);\n        \n        // Sound hole on top\n        translate([body_len/4, 0, body_h/2])\n            cylinder(d=hole_d, h=hole_depth, $fn=32);\n            \n        // Bridge slot\n        translate([-body_len/2 + 10, 0, body_h/2 - bridge_h])\n            cube([bridge_len, bridge_w, bridge_h+0.1], center=true);\n    }\n}\n\nmodule bridge() {\n    // Bridge block\n    translate([-body_len/2 + 10 + bridge_len/2, 0, body_h/2 - bridge_h/2])\n        difference() {\n            cube([bridge_len, bridge_w, bridge_h], center=true);\n            \n            // Tine slots\n            for(i=[0:num_tines-1]) {\n                y_pos = -bridge_w/2 + 5 + i * ((bridge_w-10)/(num_tines-1));\n                translate([0, y_pos, -bridge_h/2])\n                    cube([bridge_len+0.1, tine_w+0.2, bridge_h+0.1], center=true);\n            }\n        }\n}\n\nmodule tines() {\n    for(i=[0:num_tines-1]) {\n        y_pos = -bridge_w/2 + 5 + i * ((bridge_w-10)/(num_tines-1));\n        tine_len = tine_len_start + i * tine_step;\n        \n        // Tine body\n        translate([body_len/2 - tine_len/2, y_pos, body_h/2 + tine_h/2])\n            cube([tine_len, tine_w, tine_h], center=true);\n            \n        // Tine tip (rounded)\n        translate([body_len/2 - tine_len - 1, y_pos, body_h/2])\n            rotate([0, 90, 0])\n                cylinder(h=tine_w, r=tine_h, $fn=16);\n    }\n}\n\nmodule back_support() {\n    // Reinforcement ribs\n    for(i=[-1:1]) {\n        translate([i * 20, 0, -body_h/2 + 1])\n            cube([2, body_w - 10, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    bridge();\n    tines();\n    back_support();\n}\n\n// Optional: rounded edges on body\n$fn=32;",
    "renders": true
  },
  {
    "musical_instrument": "sanza",
    "openscad_code": "// Sanza (African thumb piano) - realistic style, medium complexity\n// Overall size ~80mm x 60mm x 25mm\n\n// Main body\nmodule body() {\n    difference() {\n        // Main resonator box\n        translate([0, 0, 12.5])\n        cube([80, 60, 25], center=true);\n        \n        // Hollow out the body\n        translate([0, 0, 12.5])\n        cube([74, 54, 23], center=true);\n        \n        // Sound hole\n        translate([0, 10, 12.5])\n        cylinder(h=25, r=8, center=true, $fn=32);\n        \n        // Bridge slots\n        for (i = [0:7]) {\n            translate([-30 + i*8.5, -25, 12.5])\n            cube([3, 10, 25], center=true);\n        }\n    }\n}\n\n// Bridge for tines\nmodule bridge() {\n    translate([0, -20, 25])\n    cube([70, 8, 5], center=true);\n    \n    // Bridge pins\n    for (i = [0:7]) {\n        translate([-30 + i*8.5, -20, 27.5])\n        cylinder(h=3, r=1, $fn=16);\n    }\n}\n\n// Individual tine\nmodule tine(length, angle) {\n    translate([0, 0, length/2])\n    rotate([0, angle, 0])\n    cube([0.8, 0.8, length], center=true);\n}\n\n// Tine assembly\nmodule tines() {\n    // Tine lengths follow typical sanza tuning\n    lengths = [35, 33, 31, 29, 32, 30, 28, 26];\n    angles = [5, 4, 3, 2, 6, 5, 4, 3];\n    \n    for (i = [0:7]) {\n        translate([-30 + i*8.5, -16, 27.5])\n        tine(lengths[i], angles[i]);\n    }\n}\n\n// Back cover with grip holes\nmodule back_cover() {\n    difference() {\n        translate([0, 0, 0])\n        cube([80, 60, 2], center=true);\n        \n        // Grip holes\n        for (i = [-1:1]) {\n            for (j = [-1:1]) {\n                translate([i*25, j*20, 0])\n                cylinder(h=3, r=5, center=true, $fn=32);\n            }\n        }\n    }\n}\n\n// Support feet\nmodule feet() {\n    positions = [[-35, -25], [35, -25], [-35, 25], [35, 25]];\n    for (pos = positions) {\n        translate([pos[0], pos[1], -1.5])\n        cylinder(h=3, r=3, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    bridge();\n    tines();\n    translate([0, 0, -1])\n    back_cover();\n    feet();\n}",
    "renders": true
  },
  {
    "musical_instrument": "tubularbells",
    "openscad_code": "// Tubular Bells - Realistic Style, Medium Complexity\n// Designed for 3D printing - no overhangs, proper wall thickness\n\n// Parameters\nwallThickness = 1.2;\ntubeDiameter = 8;\ntubeLength = 50;\nnumTubes = 5;\nbaseWidth = 35;\nbaseHeight = 8;\nframeHeight = 60;\nframeWidth = 40;\nframeDepth = 30;\nstringRadius = 0.5;\n\n// Main assembly\nmodule tubularBells() {\n    union() {\n        // Base\n        translate([0, 0, 0])\n            base();\n        \n        // Frame\n        translate([0, 0, baseHeight])\n            frame();\n        \n        // Tubes\n        translate([0, 0, frameHeight + baseHeight])\n            tubes();\n        \n        // Mallet holder\n        translate([frameWidth/2 + 5, 0, baseHeight/2])\n            malletHolder();\n    }\n}\n\n// Base with rounded edges\nmodule base() {\n    difference() {\n        // Main base\n        minkowski() {\n            cube([baseWidth, frameDepth, baseHeight], center=true);\n            sphere(wallThickness);\n        }\n        \n        // Hollow bottom\n        translate([0, 0, -wallThickness/2])\n            cube([baseWidth - wallThickness*2, frameDepth - wallThickness*2, baseHeight], center=true);\n    }\n}\n\n// Frame structure\nmodule frame() {\n    // Main frame\n    difference() {\n        // Outer frame\n        union() {\n            // Front and back\n            for (y = [-frameDepth/2, frameDepth/2]) {\n                translate([0, y, frameHeight/2])\n                    cube([frameWidth, wallThickness, frameHeight], center=true);\n            }\n            // Sides\n            for (x = [-frameWidth/2, frameWidth/2]) {\n                translate([x, 0, frameHeight/2])\n                    cube([wallThickness, frameDepth, frameHeight], center=true);\n            }\n        }\n        \n        // Inner cavity\n        translate([0, 0, frameHeight/2])\n            cube([frameWidth - wallThickness*2, frameDepth - wallThickness*2, frameHeight], center=true);\n    }\n    \n    // Top cross bar\n    translate([0, 0, frameHeight])\n        cube([frameWidth + wallThickness*2, frameDepth + wallThickness*2, wallThickness], center=true);\n}\n\n// Tubes with strings\nmodule tubes() {\n    spacing = frameWidth / (numTubes + 1);\n    \n    for (i = [1:numTubes]) {\n        xPos = -frameWidth/2 + i * spacing;\n        \n        // String\n        translate([xPos, 0, 0])\n            cylinder(h=frameHeight, r=stringRadius, center=false);\n        \n        // Tube\n        translate([xPos, 0, -tubeLength/2 - 5])\n            rotate([0, 90, 0])\n                tube(tubeLength - i*3); // Graduated lengths\n        \n        // String anchor\n        translate([xPos, 0, 0])\n            cylinder(h=wallThickness*2, r=wallThickness, center=true);\n    }\n}\n\n// Individual tube\nmodule tube(length) {\n    difference() {\n        // Outer tube\n        cylinder(h=length, r=tubeDiameter/2, center=true);\n        \n        // Inner hole\n        cylinder(h=length + 1, r=tubeDiameter/2 - wallThickness, center=true);\n        \n        // Chamfer ends\n        translate([0, 0, length/2])\n            cylinder(h=wallThickness*2, r1=tubeDiameter/2 - wallThickness, r2=tubeDiameter/2, center=true);\n        translate([0, 0, -length/2])\n            cylinder(h=wallThickness*2, r1=tubeDiameter/2, r2=tubeDiameter/2 - wallThickness, center=true);\n    }\n}\n\n// Mallet holder\nmodule malletHolder() {\n    difference() {\n        // Holder body\n        cylinder(h=15, r=3, center=true);\n        \n        // Mallet hole\n        cylinder(h=16, r=1.5, center=true);\n    }\n}\n\n// Generate the model\ntubularBells();",
    "renders": true
  },
  {
    "musical_instrument": "dulcitone",
    "openscad_code": "// Dulcitone - medium complexity realistic miniature\n// All dimensions in mm, overall ~80mm long\n\n// Constants\n$fn = 36;\nwall = 1.5;\nkey_width = 4;\nkey_length = 20;\nkey_thickness = 2;\ntine_length = 35;\ntine_width = 2;\ntine_thickness = 0.8;\nsoundbox_w = 70;\nsoundbox_d = 40;\nsoundbox_h = 25;\n\nmodule soundbox() {\n    difference() {\n        // Main box\n        translate([0, 0, soundbox_h/2])\n            cube([soundbox_w, soundbox_d, soundbox_h], center=true);\n        \n        // Hollow cavity\n        translate([0, 0, soundbox_h/2 + wall/2])\n            cube([soundbox_w - 2*wall, soundbox_d - 2*wall, soundbox_h - wall], center=true);\n        \n        // Sound holes\n        for(x = [-20, -10, 10, 20])\n            translate([x, 0, soundbox_h - 3])\n                cylinder(h=wall+1, r=3, center=false);\n    }\n}\n\nmodule key_assembly() {\n    // Mounting rail\n    translate([0, 0, soundbox_h - 2])\n        cube([soundbox_w * 0.8, 6, 4], center=true);\n    \n    // White keys\n    for(i = [0:7]) {\n        translate([-soundbox_w/3 + i*8, 0, soundbox_h + 2])\n            cube([key_width, key_length, key_thickness], center=false);\n    }\n    \n    // Black keys\n    for(i = [0,1,3,4,5]) {\n        translate([-soundbox_w/3 + i*8 + 2.5, -5, soundbox_h + 4])\n            cube([key_width*0.6, key_length*0.7, key_thickness*1.5], center=false);\n    }\n}\n\nmodule tine(x_pos) {\n    // Base mount\n    translate([x_pos, 0, soundbox_h + 4])\n        cube([5, 5, 2], center=true);\n    \n    // Tine wire\n    translate([x_pos, soundbox_d/4, soundbox_h + 5])\n        rotate([90, 0, 0])\n            cylinder(h=tine_length, r=tine_width/2, center=false);\n    \n    // Damper pad\n    translate([x_pos, soundbox_d/4 - 2, soundbox_h + 4])\n        cube([3, 3, 1], center=true);\n}\n\nmodule damper_bar() {\n    translate([0, soundbox_d/4 - 5, soundbox_h + 10])\n        cube([soundbox_w * 0.8, 3, 2], center=true);\n}\n\n// Main assembly\nunion() {\n    soundbox();\n    \n    // Add keys\n    key_assembly();\n    \n    // Add tines for each white key\n    for(i = [0:7]) {\n        tine(-soundbox_w/3 + i*8 + 2);\n    }\n    \n    damper_bar();\n    \n    // Label\n    translate([0, -soundbox_d/2 - 2, soundbox_h/2])\n        rotate([0, 90, 0])\n            linear_extrude(height=1)\n                text(\"Dulcitone\", size=6, halign=\"center\");\n}",
    "renders": true
  },
  {
    "musical_instrument": "pianet",
    "openscad_code": "// OpenSCAD Pianet (Hohner Pianet T style)\n// Realistic style, medium complexity\n// Overall size ~90 mm long\n\n$fn = 50;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main shell\n        cube([80, 40, 15], center = true);\n\n        // Top recess\n        translate([0, 0, 7.5])\n            cube([78, 38, 3], center = true);\n\n        // Front grill holes (round holes for speaker)\n        for (x = [-30:10:30])\n            translate([x, 0, 7.5])\n                cylinder(h = 3.5, r = 4, center = true);\n\n        // Rear jack openings\n        translate([35, 0, -7.5])\n            rotate([90, 0, 0])\n                cylinder(h = 5, r = 3.5, center = true);\n    }\n}\n\n// Keyboard bed\nmodule keyboard() {\n    translate([0, 0, -10])\n        cube([70, 35, 5], center = true);\n}\n\n// White keys\nmodule white_keys() {\n    for (i = [0:6]) {\n        translate([-30 + i * 10, 0, -12.5])\n            cube([9, 30, 2], center = true);\n    }\n}\n\n// Black keys\nmodule black_keys() {\n    for (i = [0:4]) {\n        if (i != 2) {\n            translate([-25 + i * 10, 0, -11])\n                cube([5, 18, 3], center = true);\n        }\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    translate([0, -25, 0])\n        cube([60, 8, 3], center = true);\n}\n\n// Volume knob\nmodule volume_knob() {\n    translate([-25, -25, 3])\n        cylinder(h = 4, r = 5, center = true);\n}\n\n// Vibrato knob\nmodule vibrato_knob() {\n    translate([-10, -25, 3])\n        cylinder(h = 4, r = 5, center = true);\n}\n\n// Power switch\nmodule power_switch() {\n    translate([15, -25, 3])\n        cube([10, 3, 2], center = true);\n}\n\n// Carrying handle\nmodule handle() {\n    translate([0, 25, 5])\n        difference() {\n            rotate([90, 0, 0])\n                cylinder(h = 60, r = 3, center = true);\n            translate([0, 0, 5])\n                cube([65, 8, 10], center = true);\n        }\n}\n\n// Rubber feet\nmodule feet() {\n    for (x = [-30, 30])\n        for (y = [-15, 15])\n            translate([x, y, -12.5])\n                cylinder(h = 2, r = 3, center = true);\n}\n\n// Main assembly\nunion() {\n    body();\n    keyboard();\n    white_keys();\n    black_keys();\n    control_panel();\n    volume_knob();\n    vibrato_knob();\n    power_switch();\n    handle();\n    feet();\n}",
    "renders": true
  },
  {
    "musical_instrument": "electricclavichord",
    "openscad_code": "// Electric Clavichord - Realistic Medium Complexity\n// Approximate size: 90mm x 30mm x 10mm\n\n// Overall dimensions\nlength = 90;\nwidth = 30;\nheight = 10;\n\n// Main body\nmodule body() {\n    difference() {\n        // Base block\n        cube([length, width, height], center=true);\n        \n        // Hollow cavity for electronics\n        translate([0, 0, -1])\n            cube([length-6, width-6, height-2], center=true);\n    }\n}\n\n// Keys - 8 white keys and 5 black keys\nmodule keys() {\n    // White keys (C major scale)\n    for (i = [0:7]) {\n        translate([-35 + i*9, 0, height/2 + 0.5])\n            cube([8, 12, 1]);\n    }\n    \n    // Black keys (sharps/flats)\n    black_key_positions = [1, 2, 4, 5, 6];\n    for (pos = black_key_positions) {\n        translate([-31 + pos*9, 5, height/2 + 1.25])\n            cube([5, 8, 1.5]);\n    }\n}\n\n// Bridge for strings\nmodule bridge() {\n    // Main bridge\n    translate([0, -10, height/2 + 0.5])\n        cube([length-10, 2, 1]);\n    \n    // Bridge supports\n    for (i = [-1:1]) {\n        translate([i*30, -10, height/2 - 2])\n            cube([4, 2, 3]);\n    }\n}\n\n// Tuning pegs\nmodule tuning_pegs() {\n    for (i = [0:7]) {\n        translate([40 - i*10, -13, height/2 + 1])\n            cylinder(h=2, r=1, $fn=8);\n    }\n}\n\n// Pickup\nmodule pickup() {\n    translate([0, 8, height/2 + 0.5])\n        cube([length-20, 4, 1]);\n    \n    // Pickup screws\n    for (i = [-1, 1]) {\n        translate([i*20, 8, height/2 + 1.5])\n            cylinder(h=1, r=0.5, $fn=6);\n    }\n}\n\n// Jack input\nmodule jack_input() {\n    translate([45, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=5, r=3, $fn=16);\n    \n    // Jack hole\n    translate([45, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=6, r=2, $fn=16);\n}\n\n// Volume knob\nmodule volume_knob() {\n    translate([35, 12, height/2 + 1])\n        cylinder(h=2, r=4, $fn=32);\n    \n    // Knob indicator\n    translate([35, 16, height/2 + 2])\n        cube([1, 2, 0.5]);\n}\n\n// String anchor points\nmodule string_anchors() {\n    for (i = [0:7]) {\n        // Front anchor\n        translate([-35 + i*9, -12, height/2 + 0.5])\n            cylinder(h=1, r=0.5, $fn=8);\n        \n        // Rear anchor\n        translate([40 - i*10, -12, height/2 + 0.5])\n            cylinder(h=1, r=0.5, $fn=8);\n    }\n}\n\n// Assembly\nbody();\nkeys();\nbridge();\ntuning_pegs();\npickup();\njack_input();\nvolume_knob();\nstring_anchors();",
    "renders": true
  },
  {
    "musical_instrument": "electronicpiano",
    "openscad_code": "// Electronic Piano - realistic style, medium complexity, 3D printable\n// Dimensions: 80 mm wide × 30 mm deep × 8 mm high (body)\n// Keys: 12 white + 8 black\n\n$fn = 32;\n\n// Main body module\nmodule piano_body() {\n    difference() {\n        // Main enclosure\n        translate([-40, -15, 0])\n            cube([80, 30, 8]);\n        \n        // Speaker grille holes\n        for (x = [-30:5:-10]) {\n            for (y = [-8:4:8]) {\n                translate([x, y, 7.5])\n                    cylinder(h=1, d=2);\n            }\n        }\n        \n        // Display window\n        translate([25, -5, 7.5])\n            cube([15, 10, 1]);\n        \n        // Volume knob hole\n        translate([-25, -7, 7.5])\n            cylinder(h=1, d=4);\n    }\n}\n\n// White key module\nmodule white_key(x_pos) {\n    translate([x_pos, 0, 8])\n        cube([5.5, 20, 2]);\n}\n\n// Black key module\nmodule black_key(x_pos) {\n    color(\"black\")\n    translate([x_pos, -5, 10])\n        cube([3.5, 12, 3]);\n}\n\n// Control knob module\nmodule knob() {\n    translate([-25, -7, 9])\n        cylinder(h=3, d=4);\n    translate([-25, -7, 12])\n        sphere(d=4);\n}\n\n// Display screen\nmodule display() {\n    translate([32.5, 0, 9])\n        cube([12, 8, 0.5]);\n}\n\n// Generate all keys\nmodule keys() {\n    // White keys (12 keys)\n    for (i = [0:11]) {\n        white_key(-33 + i * 5.8);\n    }\n    \n    // Black keys (8 keys)\n    black_key(-30.5);\n    black_key(-24.5);\n    black_key(-18.5);\n    black_key(-6.5);\n    black_key(-0.5);\n    black_key(5.5);\n    black_key(17.5);\n    black_key(23.5);\n}\n\n// Assembly\nunion() {\n    piano_body();\n    keys();\n    knob();\n    display();\n}\n\n// Feet for stability\ntranslate([-35, -12, 0])\n    cylinder(h=2, d=3);\ntranslate([35, -12, 0])\n    cylinder(h=2, d=3);\ntranslate([-35, 12, 0])\n    cylinder(h=2, d=3);\ntranslate([35, 12, 0])\n    cylinder(h=2, d=3);",
    "renders": true
  },
  {
    "musical_instrument": "electronicorgan",
    "openscad_code": "// Electronic Organ - Realistic Style, Medium Complexity\n// Overall dimensions: ~80mm wide x ~45mm deep x ~35mm tall\n\n// Main body\nmodule organ_body() {\n    difference() {\n        // Main cabinet\n        cube([80, 45, 30], center=true);\n        \n        // Front control panel recess\n        translate([0, 22, 10])\n            cube([70, 2, 15], center=true);\n        \n        // Speaker grills\n        for(x = [-25, 25]) {\n            translate([x, -20, -10])\n                cube([15, 8, 15], center=true);\n        }\n    }\n}\n\n// Keyboard\nmodule keyboard() {\n    // White keys\n    for(i = [-3:3]) {\n        translate([i*10, 25, 0])\n            cube([8, 12, 3], center=true);\n    }\n    \n    // Black keys\n    for(i = [-2.5, -1.5, 0.5, 1.5, 2.5]) {\n        translate([i*10, 25, 2])\n            cube([5, 10, 2], center=true);\n    }\n}\n\n// Control knobs\nmodule control_knobs() {\n    for(i = [-2:2]) {\n        translate([i*15, 30, 20])\n            cylinder(h=5, r=3, $fn=20);\n    }\n}\n\n// Display screen\nmodule display() {\n    translate([0, 30, 15])\n        cube([40, 2, 8], center=true);\n}\n\n// Speaker details\nmodule speakers() {\n    for(x = [-25, 25]) {\n        translate([x, -20, -5]) {\n            difference() {\n                cylinder(h=2, r=7, $fn=32);\n                cylinder(h=3, r=5, $fn=32);\n            }\n            for(i = [0:5:360]) {\n                rotate([0, 0, i])\n                    translate([0, 0, 1])\n                    cube([0.5, 7, 0.5], center=true);\n            }\n        }\n    }\n}\n\n// Power button\nmodule power_button() {\n    translate([35, 20, 15])\n        difference() {\n            cylinder(h=3, r=4, $fn=32);\n            cylinder(h=4, r=2, $fn=32);\n        }\n}\n\n// Volume slider\nmodule volume_slider() {\n    translate([-35, 20, 15])\n        cube([10, 2, 8], center=true);\n}\n\n// Legs\nmodule legs() {\n    for(x = [-30, 30])\n    for(y = [-15, 15]) {\n        translate([x, y, -20])\n            cylinder(h=10, r=2, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    organ_body();\n    keyboard();\n    control_knobs();\n    display();\n    speakers();\n    power_button();\n    volume_slider();\n    legs();\n}",
    "renders": true
  },
  {
    "musical_instrument": "synthorgan",
    "openscad_code": "// Synthorgan - Realistic medium-complexity model\n// Dimensions: ~70 mm wide, 50 mm deep, 25 mm tall\n\n$fn = 32;  // Smooth curves\n\n// Main body of the synthorgan\nmodule body() {\n    difference() {\n        // Main shell\n        hull() {\n            cube([60, 40, 15], center = true);\n            translate([0, 0, 5]) cube([58, 38, 15], center = true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 1]) cube([56, 36, 15], center = true);\n    }\n}\n\n// Keyboard section\nmodule keyboard() {\n    // Keyboard base\n    translate([0, 15, 8]) cube([50, 8, 2], center = true);\n    \n    // White keys\n    for (i = [-12:2:12]) {\n        translate([i, 15, 10]) cube([1.8, 7, 2], center = true);\n    }\n    \n    // Black keys\n    for (i = [-9:4:9]) {\n        translate([i, 15, 11.5]) cube([1, 5, 1.5], center = true);\n    }\n}\n\n// Knobs\nmodule knob(x, y, z) {\n    translate([x, y, z]) {\n        cylinder(h = 3, r = 2.5);\n        translate([0, 0, 3]) cylinder(h = 2, r = 2);\n    }\n}\n\n// Knob panel\nmodule knob_panel() {\n    translate([-20, -15, 8]) {\n        // Panel base\n        cube([15, 8, 2], center = true);\n        \n        // Knobs\n        knob(-5, 0, 9);\n        knob(0, 0, 9);\n        knob(5, 0, 9);\n    }\n}\n\n// Display screen\nmodule display() {\n    translate([15, -15, 8]) {\n        // Screen bezel\n        cube([16, 8, 2], center = true);\n        \n        // Screen\n        translate([0, 0, 1]) cube([14, 6, 0.5], center = true);\n    }\n}\n\n// Side panels for realism\nmodule side_panels() {\n    // Left side\n    translate([-30, 0, 7.5]) {\n        cube([2, 40, 15], center = true);\n    }\n    \n    // Right side\n    translate([30, 0, 7.5]) {\n        cube([2, 40, 15], center = true);\n    }\n}\n\n// Back panel with connections\nmodule back_panel() {\n    translate([0, -20, 7.5]) {\n        cube([60, 2, 15], center = true);\n        \n        // Audio jacks\n        for (i = [-20:10:20]) {\n            translate([i, 0, 5]) rotate([90, 0, 0]) cylinder(h = 2, r = 2);\n        }\n        \n        // USB port\n        translate([0, 0, 0]) cube([8, 2, 4], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    keyboard();\n    knob_panel();\n    display();\n    side_panels();\n    back_panel();\n    \n    // Rubber feet\n    for (x = [-20:40:20]) {\n        for (y = [-15:30:30]) {\n            translate([x, y, -7.5]) cylinder(h = 1, r = 2);\n        }\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "orgatron",
    "openscad_code": "// Orgatron - Medium complexity realistic style\n// A 3D printable representation of an electronic organ\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main body module\nmodule organ_body() {\n    // Base cabinet\n    difference() {\n        // Main cabinet\n        translate([0, 0, 15])\n            cube([80, 40, 30], center=true);\n        \n        // Speaker grill holes\n        for(y = [-12, 0, 12]) {\n            translate([35, y, 30.1])\n                rotate([0, 90, 0])\n                    cylinder(h=2, r=3, center=true);\n        }\n    }\n    \n    // Control panel top\n    translate([0, 0, 32])\n        cube([75, 35, 4], center=true);\n}\n\n// Keyboard keys module\nmodule keyboard() {\n    // White keys\n    for(i = [-3:3]) {\n        translate([i*10 - 5, 0, 0])\n            cube([8, 20, 2], center=true);\n    }\n    \n    // Black keys\n    color(\"black\")\n    for(i = [-2, -1, 0, 1, 2]) {\n        if(abs(i) != 0) {\n            translate([i*10, -5, 1])\n                cube([4, 15, 3], center=true);\n        }\n    }\n}\n\n// Drawbar controls\nmodule drawbars() {\n    for(i = [0:8]) {\n        translate([-30 + i*7.5, 15, 35])\n            cylinder(h=15, r=2);\n    }\n}\n\n// Music stand\nmodule music_stand() {\n    // Stand base\n    translate([0, -25, 35])\n        cube([60, 2, 15], center=true);\n    \n    // Stand support\n    translate([0, -15, 42])\n        rotate([90, 0, 0])\n            cylinder(h=10, r=1);\n    \n    // Music holder\n    translate([0, -25, 42])\n        cube([50, 15, 1], center=true);\n}\n\n// Pedal module\nmodule pedals() {\n    for(i = [-1:1]) {\n        translate([i*15, 25, 5])\n            rotate([30, 0, 0])\n                cube([10, 20, 3], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body and main components\n    organ_body();\n    \n    // Keyboard on top\n    translate([0, 0, 34])\n        keyboard();\n    \n    // Drawbars behind keyboard\n    drawbars();\n    \n    // Music stand\n    music_stand();\n    \n    // Pedals at bottom front\n    pedals();\n    \n    // Side handles\n    translate([42, 0, 15])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=2);\n    \n    mirror([1, 0, 0])\n        translate([42, 0, 15])\n            rotate([90, 0, 0])\n                cylinder(h=20, r=2);\n    \n    // Volume knob\n    translate([25, 20, 38])\n        cylinder(h=5, r=3);\n    \n    // Power indicator LED\n    translate([30, 20, 38])\n        sphere(r=1.5);\n}",
    "renders": true
  },
  {
    "musical_instrument": "electone",
    "openscad_code": "// Realistic Electone (Electronic Organ) - medium complexity\n// Approx. 90 mm wide, 60 mm deep, 35 mm tall\n\n$fn = 32;\n\nmodule main_case() {\n    // Main body shell\n    difference() {\n        rounded_box([90, 60, 30], 3);\n        translate([0, 0, 1.5])\n            rounded_box([86, 56, 30], 2.5);\n    }\n}\n\nmodule rounded_box(size, r) {\n    // Helper for rounded box\n    hull() {\n        for(x=[-1,1], y=[-1,1], z=[-1,1])\n            translate([x*size[0]/2 - x*r, y*size[1]/2 - y*r, z*size[2]/2 - z*r])\n                sphere(r);\n    }\n}\n\nmodule keys() {\n    // White keys (13 keys)\n    for(i=[0:12]) {\n        translate([-40 + i*6.2, 10, 31])\n            cube([5.5, 25, 2]);\n    }\n    // Black keys (9 sharps/flats)\n    for(i=[0,1,3,4,5,7,8,10,11]) {\n        translate([-37 + i*6.2, 10, 33])\n            color(\"black\")\n            cube([3.5, 20, 3]);\n    }\n}\n\nmodule control_panel() {\n    // Top control section\n    translate([0, 20, 33])\n        rounded_box([85, 15, 10], 2);\n    \n    // Display screen\n    translate([0, 20, 44])\n        color(\"darkblue\")\n        cube([30, 10, 1]);\n    \n    // Buttons\n    for(i=[0:3]) {\n        translate([-30 + i*20, 20, 44.5])\n            color(\"red\")\n            cylinder(h=1.5, d=4);\n    }\n    \n    // Knobs\n    for(i=[0:1]) {\n        translate([40 + i*8, 20, 44.5])\n            cylinder(h=5, d=6);\n    }\n}\n\nmodule pedals() {\n    // Expression pedal\n    translate([0, -20, 15])\n        rotate([0, 20, 0])\n        cube([20, 8, 8]);\n    \n    // Base for pedal\n    translate([0, -25, 8])\n        rounded_box([25, 10, 5], 2);\n}\n\nmodule stand_legs() {\n    // Front legs\n    for(x=[-35, 35]) {\n        translate([x, 30, -5])\n            cylinder(h=10, d=4);\n    }\n    // Rear legs\n    for(x=[-30, 30]) {\n        translate([x, -30, -5])\n            cylinder(h=10, d=4);\n    }\n}\n\nmodule speakers() {\n    // Left speaker\n    translate([-35, 0, 15])\n        difference() {\n            cube([15, 45, 25]);\n            translate([7.5, 22.5, 12.5])\n                sphere(d=18);\n        }\n    \n    // Right speaker\n    translate([35, 0, 15])\n        difference() {\n            cube([15, 45, 25]);\n            translate([7.5, 22.5, 12.5])\n                sphere(d=18);\n        }\n}\n\n// Assemble the electone\nunion() {\n    main_case();\n    keys();\n    control_panel();\n    pedals();\n    stand_legs();\n    speakers();\n}",
    "renders": true
  },
  {
    "musical_instrument": "portatone",
    "openscad_code": "// Portable Electronic Keyboard (Portatone)\n// 3D printable with realistic styling, medium complexity\n\n$fn = 32;  // Smooth curves\n\nmodule key(w, h, d, white=true) {\n    // Individual piano key\n    color(white ? \"Ivory\" : \"Black\")\n    difference() {\n        cube([w, d, h], center=true);\n        translate([0, -d/2 + 0.5, h/2 - 0.5])\n            cube([w*0.9, 1, 1], center=true);  // Rounded top edge\n    }\n}\n\nmodule keyboard() {\n    // White keys (full octave C to C)\n    for(i=[0:13]) {\n        translate([i*4 - 28, 0, 0])\n            key(4, 2, 15, true);\n    }\n    \n    // Black keys\n    black_positions = [1,2,4,5,6,8,9,11,12,13];\n    for(i=black_positions) {\n        translate([i*4 - 26, 0, 2])\n            key(2.5, 3, 10, false);\n    }\n}\n\nmodule control_panel() {\n    // Main control buttons area above keys\n    translate([0, 12, 8])\n    difference() {\n        // Main panel\n        cube([60, 6, 4], center=true);\n        \n        // LCD screen\n        translate([0, 0, 2.1])\n            cube([25, 4, 0.5], center=true);\n    }\n    \n    // Small round buttons\n    button_positions = [[-20,12,10], [-15,12,10], [-10,12,10], [10,12,10], [15,12,10], [20,12,10]];\n    for(pos=button_positions) {\n        translate(pos)\n            cylinder(h=1, r=1.5);\n    }\n    \n    // Large wheel knob\n    translate([0, 12, 10])\n        cylinder(h=2, r=3);\n}\n\nmodule speaker_grill() {\n    // Left speaker grill\n    translate([-35, -8, 0])\n    difference() {\n        cube([8, 10, 2], center=true);\n        for(i=[-3:3]) {\n            for(j=[-3:3]) {\n                translate([i*0.8, j*0.8, 1.1])\n                    cylinder(h=2, r=0.5);\n            }\n        }\n    }\n    \n    // Right speaker grill (mirror)\n    translate([35, -8, 0])\n    mirror([1,0,0])\n    difference() {\n        cube([8, 10, 2], center=true);\n        for(i=[-3:3]) {\n            for(j=[-3:3]) {\n                translate([i*0.8, j*0.8, 1.1])\n                    cylinder(h=2, r=0.5);\n            }\n        }\n    }\n}\n\nmodule case() {\n    // Main body\n    difference() {\n        // Base\n        translate([0, 0, -2])\n            cube([70, 30, 4], center=true);\n        \n        // Battery compartment\n        translate([0, -10, -2])\n            cube([20, 8, 2], center=true);\n    }\n    \n    // Top cover with rounded edges\n    hull() {\n        translate([-35, -15, 0])\n            sphere(r=3);\n        translate([35, -15, 0])\n            sphere(r=3);\n        translate([-35, 15, 0])\n            sphere(r=3);\n        translate([35, 15, 0])\n            sphere(r=3);\n    }\n    \n    // Handle\n    translate([0, 20, 8])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=20, r=2);\n        translate([0, 0, -1])\n            cylinder(h=22, r=1.5);\n    }\n}\n\n// Assemble the portatone\nunion() {\n    case();\n    keyboard();\n    control_panel();\n    speaker_grill();\n}",
    "renders": true
  },
  {
    "musical_instrument": "portasound",
    "openscad_code": "// Realistic Portasound\n// Medium complexity, 3D-printable, no overhangs\n\n$fn = 50;               // Overall smoothness\nwall = 1.5;             // Wall thickness for printing\nkey_w = 7.5;            // White key width\nkey_h = 2.5;            // Key height\nkey_l = 20;             // Key length\nblack_w = 4.5;          // Black key width\nblack_h = 6;            // Black key height\nblack_l = 12;           // Black key length\nspeaker_r = 10;         // Speaker radius\nspeaker_h = 3;          // Speaker depth\nlcd_w = 25;             // LCD width\nlcd_h = 8;              // LCD height\nlcd_d = 0.2;            // LCD thickness\nbutton_r = 3;           // Button radius\nbutton_h = 1.5;         // Button height\n\n// Main body\nmodule body(){\n    difference(){\n        // Outer shell\n        cube([110,45,15]);\n        // Hollow inside\n        translate([wall,wall,wall])\n            cube([110-2*wall,45-2*wall,15-wall]);\n    }\n}\n\n// Speaker grill\nmodule speaker(pos){\n    translate(pos){\n        difference(){\n            cylinder(h=speaker_h, r=speaker_r);\n            // Horizontal slots\n            for(i=[-speaker_r+2:speaker_r/5:speaker_r-2]){\n                translate([0,i,-0.1])\n                    cube([2*speaker_r,0.6,speaker_h+0.2]);\n            }\n            // Vertical slots\n            for(i=[-speaker_r+2:speaker_r/5:speaker_r-2]){\n                translate([i,0,-0.1])\n                    cube([0.6,2*speaker_r,speaker_h+0.2]);\n            }\n        }\n    }\n}\n\n// White key\nmodule white_key(){\n    translate([-key_w/2,0,0])\n        cube([key_w,key_l,key_h]);\n}\n\n// Black key\nmodule black_key(){\n    color(\"black\")\n    translate([-black_w/2,0,0])\n        cube([black_w,black_l,black_h]);\n}\n\n// Key bed\nmodule keys(){\n    // White keys: 25 keys\n    for(i=[0:24]){\n        translate([3.5+i*key_w,0,15])\n            white_key();\n    }\n    // Black keys: 18 keys (sharps/flats)\n    for(i=[0:17]){\n        if(i!=4 && i!=11 && i!=18){ // Skip E/B\n            translate([7+i*key_w,15-black_l,15+key_h])\n                black_key();\n        }\n    }\n}\n\n// LCD screen\nmodule lcd(){\n    translate([(110-lcd_w)/2,35,15-lcd_d])\n        cube([lcd_w,lcd_h,lcd_d]);\n}\n\n// Control knob\nmodule knob(pos){\n    translate(pos){\n        cylinder(h=button_h,r=button_r);\n    }\n}\n\n// Buttons array\nmodule buttons(){\n    // Top row\n    for(i=[0:3]){\n        translate([10+i*15,27,15])\n            knob([0,0,0]);\n    }\n    // Bottom row\n    for(i=[0:3]){\n        translate([10+i*15,18,15])\n            knob([0,0,0]);\n    }\n}\n\n// Volume slider\nmodule slider(){\n    translate([95,20,15])\n        cube([10,4,2]);\n    translate([100,22,17])\n        cube([4,2,1]);\n}\n\n// Power jack\nmodule jack(){\n    translate([5,5,7.5])\n        rotate([90,0,0])\n            cylinder(h=5,r=3);\n}\n\n// Main assembly\nbody();\nkeys();\ntranslate([15,10,15]) speaker([0,0,0]);\ntranslate([85,10,15]) speaker([0,0,0]);\nlcd();\nbuttons();\nslider();\njack();",
    "renders": true
  },
  {
    "musical_instrument": "portableorgan",
    "openscad_code": "// Portable Organ - Realistic Medium Complexity\n// Size: ~80mm x 120mm x 40mm\n\n// Overall dimensions\n$fn = 32;\nbody_width = 80;\nbody_length = 120;\nbody_height = 30;\nwall_thickness = 2.5;\n\n// Keyboard parameters\nwhite_key_width = 6;\nwhite_key_height = 4;\nwhite_key_length = 30;\nblack_key_width = 3.5;\nblack_key_height = 2;\nblack_key_length = 20;\nnum_white_keys = 13;\nnum_black_keys = 9;\n\n// Speaker parameters\nspeaker_diameter = 20;\nspeaker_depth = 8;\n\n// Handle parameters\nhandle_width = 60;\nhandle_height = 15;\nhandle_thickness = 5;\n\n// Buttons and knobs\nbutton_diameter = 5;\nknob_diameter = 8;\nknob_height = 10;\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Outer shell\n        cube([body_width, body_length, body_height]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([body_width-2*wall_thickness, body_length-2*wall_thickness, body_height-wall_thickness]);\n        \n        // Speaker holes\n        translate([body_width/2, 20, 0])\n            cylinder(h=body_height+1, d=speaker_diameter);\n        translate([body_width/2, body_length-20, 0])\n            cylinder(h=body_height+1, d=speaker_diameter);\n    }\n}\n\n// White keys\nmodule white_keys() {\n    for(i = [0:num_white_keys-1]) {\n        translate([i*(white_key_width+0.5) + 5, 0, body_height])\n            cube([white_key_width, white_key_length, white_key_height]);\n    }\n}\n\n// Black keys\nmodule black_keys() {\n    // Positions for black keys (2,4,7,9,11,14,16,19,21)\n    black_positions = [1,2,4,5,6,8,9,11,12];\n    for(i = black_positions) {\n        translate([i*(white_key_width+0.5) + 5 + white_key_width/2 - black_key_width/2, 0, body_height + white_key_height])\n            cube([black_key_width, black_key_length, black_key_height]);\n    }\n}\n\n// Handle\nmodule handle() {\n    translate([body_width/2 - handle_width/2, body_length + 5, body_height])\n        difference() {\n            union() {\n                // Main grip\n                cube([handle_width, handle_thickness, handle_height]);\n                // Support arms\n                translate([0, 0, 0])\n                    cube([handle_thickness, 5, handle_height]);\n                translate([handle_width-handle_thickness, 0, 0])\n                    cube([handle_thickness, 5, handle_height]);\n            }\n            // Grip hole\n            translate([handle_thickness, handle_thickness, handle_height/2])\n                cube([handle_width-2*handle_thickness, handle_thickness+1, handle_height-2*handle_thickness]);\n        }\n}\n\n// Control panel\nmodule control_panel() {\n    // Volume knob\n    translate([10, 50, body_height])\n        cylinder(h=knob_height, d=knob_diameter);\n    \n    // Power button\n    translate([25, 50, body_height])\n        cylinder(h=button_diameter, d=button_diameter);\n    \n    // Effect buttons\n    for(i = [0:3]) {\n        translate([40 + i*10, 50, body_height])\n            cylinder(h=button_diameter, d=button_diameter);\n    }\n}\n\n// Speaker grill\nmodule speaker_grill(x_pos, y_pos) {\n    translate([x_pos, y_pos, body_height-0.1]) {\n        difference() {\n            cylinder(h=0.5, d=speaker_diameter);\n            for(i = [0:7]) {\n                rotate([0, 0, i*22.5])\n                    translate([-speaker_diameter/2, -speaker_diameter/4, 0])\n                        cube([speaker_diameter, speaker_diameter/2, 1]);\n            }\n        }\n    }\n}\n\n// Assemble the organ\nmain_body();\nwhite_keys();\nblack_keys();\nhandle();\ncontrol_panel();\nspeaker_grill(body_width/2, 20);\nspeaker_grill(body_width/2, body_length-20);",
    "renders": true
  },
  {
    "musical_instrument": "suitcaseorgan",
    "openscad_code": "// Suitcase Organ - Medium Complexity Realistic Style\n// Approx 80mm wide, 60mm deep, 40mm tall (closed)\n\n$fn = 36;\n\n// Main parameters\ncase_width = 80;\ncase_depth = 60;\ncase_thickness = 2.5;\nlid_height = 18;\nbase_height = 22;\n\n// Keyboard parameters\nkeys_per_octave = 12;\noctaves = 2;\nwhite_key_width = 6;\nwhite_key_height = 3;\nblack_key_width = 3.5;\nblack_key_height = 2;\n\n// Handle parameters\nhandle_height = 15;\nhandle_radius = 2;\n\n// Latches\nlatch_width = 8;\nlatch_height = 4;\n\nmodule suitcase_case() {\n    difference() {\n        // Main case body\n        union() {\n            // Base\n            translate([0, 0, base_height/2])\n                cube([case_width, case_depth, base_height], center=true);\n            \n            // Lid\n            translate([0, 0, base_height + lid_height/2 - case_thickness])\n                cube([case_width, case_depth, lid_height], center=true);\n        }\n        \n        // Hollow out base\n        translate([0, 0, base_height/2])\n            cube([case_width - 2*case_thickness, case_depth - 2*case_thickness, base_height - case_thickness], center=true);\n        \n        // Hollow out lid\n        translate([0, 0, base_height + lid_height/2 - case_thickness])\n            cube([case_width - 2*case_thickness, case_depth - 2*case_thickness, lid_height - case_thickness], center=true);\n    }\n}\n\nmodule keyboard() {\n    // White keys\n    for(i = [0:octaves*7-1]) {\n        if(i%7 != 2 && i%7 != 6) { // Skip positions for black keys\n            translate([-case_width/2 + 10 + i*white_key_width, 0, 1.5])\n                cube([white_key_width - 0.5, case_depth - 20, white_key_height], center=true);\n        }\n    }\n    \n    // Black keys\n    for(i = [0:octaves-1]) {\n        for(j = [0,1,3,4,5]) {\n            if(j < 5 || i < octaves-1) {\n                translate([-case_width/2 + 10 + white_key_width*(i*7 + j + 0.75), 0, 3])\n                    cube([black_key_width, case_depth - 25, black_key_height], center=true);\n            }\n        }\n    }\n}\n\nmodule handle() {\n    // Handle base left\n    translate([-case_width/2 + 10, 0, base_height + lid_height - 5])\n        cylinder(h=10, r=handle_radius);\n    \n    // Handle base right\n    translate([case_width/2 - 10, 0, base_height + lid_height - 5])\n        cylinder(h=10, r=handle_radius);\n    \n    // Handle grip\n    translate([0, 0, base_height + lid_height + handle_height - 5])\n        rotate([90, 0, 0])\n            cylinder(h=case_width - 20, r=handle_radius);\n}\n\nmodule latches() {\n    // Front latch left\n    translate([-case_width/2 + 15, case_depth/2 - 2, base_height + lid_height/2 - 2])\n        cube([latch_width, latch_height, 4]);\n    \n    // Front latch right\n    translate([case_width/2 - 15 - latch_width, case_depth/2 - 2, base_height + lid_height/2 - 2])\n        cube([latch_width, latch_height, 4]);\n}\n\nmodule speaker_grill() {\n    // Left speaker\n    translate([-case_width/2 + 15, 0, 8])\n        for(i = [0:3]) {\n            rotate([0, 90, 0])\n                translate([0, -15 + i*10, 0])\n                    cylinder(h=case_thickness, r=3);\n        }\n    \n    // Right speaker\n    translate([case_width/2 - 15, 0, 8])\n        for(i = [0:3]) {\n            rotate([0, 90, 0])\n                translate([0, -15 + i*10, 0])\n                    cylinder(h=case_thickness, r=3);\n        }\n}\n\nmodule control_panel() {\n    // Panel base\n    translate([0, -case_depth/2 + 10, 8])\n        cube([case_width - 30, 8, 5], center=true);\n    \n    // Knobs\n    for(i = [0:3]) {\n        translate([-15 + i*10, -case_depth/2 + 10, 11])\n            cylinder(h=3, r=2);\n    }\n    \n    // Power LED\n    translate([20, -case_depth/2 + 10, 11])\n        sphere(r=1.5);\n}\n\n// Assembly\nsuitcase_case();\nkeyboard();\nhandle();\nlatches();\nspeaker_grill();\ncontrol_panel();",
    "renders": true
  },
  {
    "musical_instrument": "transistororgan",
    "openscad_code": "// Transistor-organ (realistic, medium-complexity)\n// Approx 80 mm wide, 50 mm deep, 40 mm high\n// Printable if laid on its back\n\n// --------------------------\n// Parameters\n// --------------------------\n$fn = 36;            // Smoothness\nwall = 1.5;          // Wall thickness for printability\ncaseW = 80;          // Case width\ncaseD = 50;          // Case depth\ncaseH = 40;          // Case height\nkeyW = 8;            // White key width\nkeyH = 5;            // Key height\nkeyL = 30;           // Key length\nnWhite = 12;         // One octave\npitch = 10;          // Key spacing\nspeakerD = 20;       // Speaker diameter\njackD = 6;           // 1/4\" jack diameter\n\n// --------------------------\n// Main assembly\n// --------------------------\ntranslate([0,0,caseH/2]) {\n    difference() {\n        organ_case();\n        key_holes();\n    }\n    keyboard();\n    controls();\n    rear_panel();\n}\n\n// --------------------------\n// Modules\n// --------------------------\nmodule organ_case() {\n    // Outer shell\n    difference() {\n        cube([caseW, caseD, caseH], center=true);\n        translate([0,0,wall])\n            cube([caseW-wall*2, caseD-wall*2, caseH], center=true);\n    }\n    // Top slant for control panel\n    translate([0, caseD/2 - wall, caseH/2 - 5])\n        rotate([15,0,0])\n            cube([caseW-wall*2, 15, wall], center=true);\n}\n\nmodule key_holes() {\n    // Rectangular slot for keys\n    translate([0, caseD/2 - wall - keyL/2, -caseH/2 + keyH + 1])\n        cube([nWhite * pitch + 4, keyL + 2, keyH + 2], center=true);\n}\n\nmodule white_key(x) {\n    translate([x, 0, 0])\n        cube([keyW, keyL, keyH], center=true);\n}\n\nmodule black_key(x) {\n    translate([x, keyL/4, keyH])\n        cube([keyW*0.6, keyL*0.6, keyH*0.7], center=true);\n}\n\n// White keys (lower tier)\nmodule keyboard() {\n    translate([-(nWhite-1)*pitch/2, caseD/2 - wall - keyL/2, -caseH/2 + keyH/2 + 0.5])\n    union() {\n        // White keys\n        for(i = [0 : nWhite-1])\n            white_key(i * pitch);\n        // Black keys (sharps)\n        black_sharps();\n    }\n}\n\nmodule black_sharps() {\n    sharps = [1, 2, 4, 5, 6, 8, 9, 11];  // Indices for sharps\n    for(i = sharps)\n        translate([(i-0.5)*pitch, 0, 0])\n            black_key(0);\n}\n\n// Knobs, speaker, jacks on rear\nmodule controls() {\n    // Volume knob\n    translate([caseW/2 - 15, 0, caseH/2 - 10])\n        rotate([0,90,0])\n            cylinder(h=8, d1=8, d2=10);\n    // Tone knob\n    translate([caseW/2 - 25, 0, caseH/2 - 10])\n        rotate([0,90,0])\n            cylinder(h=8, d1=8, d2=10);\n    // Power LED\n    translate([caseW/2 - 35, 0, caseH/2 - 10])\n        sphere(d=4);\n}\n\nmodule rear_panel() {\n    // Speaker grill\n    translate([0, -caseD/2 + wall + 2, 0])\n    difference() {\n        cylinder(h=wall, d=speakerD, center=true);\n        // Grill holes\n        for(i = [-2:2])\n            for(j = [-2:2])\n                translate([i*3, j*3, 0])\n                    cylinder(h=wall+1, d=1, center=true);\n    }\n    \n    // Output jack\n    translate([caseW/2 - 8, -caseD/2 + wall + 2, -caseH/2 + 12])\n        rotate([90,0,0])\n            cylinder(h=10, d=jackD);\n    translate([caseW/2 - 8, -caseD/2, -caseH/2 + 12])\n        nut();\n    \n    // Power jack\n    translate([-caseW/2 + 8, -caseD/2 + wall + 2, -caseH/2 + 12])\n        rotate([90,0,0])\n            cylinder(h=10, d=jackD + 2);\n    translate([-caseW/2 + 8, -caseD/2, -caseH/2 + 12])\n        nut();\n}\n\nmodule nut() {\n    cylinder(h=2, d=10, $fn=6);\n}",
    "renders": true
  },
  {
    "musical_instrument": "analogsynthesizer",
    "openscad_code": "// Analog Synthesizer - Medium Detail Model\n// Approx 80 x 40 x 15 mm, no overhangs\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main chassis\n        rounded_box([80, 40, 12], 2);\n        \n        // Front panel recess\n        translate([5, 5, 10])\n            cube([70, 30, 3]);\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(size, r) {\n    hull() {\n        for(x = [0, size.x], y = [0, size.y], z = [0, size.z]) {\n            translate([x==0?r:x==size.x?size.x-r:x,\n                      y==0?r:y==size.y?size.y-r:y,\n                      z==0?r:z==size.z?size.z-r:z])\n                sphere(r=r);\n        }\n    }\n}\n\n// Keyboard keys\nmodule keyboard() {\n    for(i = [0:11]) {\n        translate([8 + i*5.5, 3, 12])\n            cube([5, 10, 2]);\n    }\n}\n\n// Knobs module\nmodule knob(x, y, label) {\n    translate([x, y, 12])\n        cylinder(h=3, r=4);\n    translate([x, y, 15.5])\n        cylinder(h=1, r=0.5);\n}\n\n// Knob bank\nmodule knobs() {\n    knob(20, 25, \"FREQ\");\n    knob(30, 25, \"RES\");\n    knob(40, 25, \"CUTOFF\");\n    knob(50, 25, \"ENV\");\n    knob(60, 25, \"LFO\");\n}\n\n// Switch\nmodule switch(x, y) {\n    translate([x, y, 12])\n        cube([6, 3, 2]);\n    translate([x+3, y+1.5, 14.5])\n        cylinder(h=4, r=1);\n}\n\n// Switches row\nmodule switches() {\n    switch(15, 15);\n    switch(25, 15);\n    switch(35, 15);\n}\n\n// Patch bay jacks\nmodule jack(x, y) {\n    translate([x, y, 12]) {\n        difference() {\n            cylinder(h=3, r=2);\n            translate([0, 0, -0.5])\n                cylinder(h=4, r=1.5);\n        }\n    }\n}\n\n// Patch bay\nmodule patch_bay() {\n    for(i = [0:3]) {\n        jack(65 + i*5, 8 + (i%2)*6);\n    }\n}\n\n// Screen\nmodule screen() {\n    translate([10, 32, 12])\n        cube([20, 6, 1]);\n}\n\n// Speaker grill\nmodule speaker() {\n    translate([50, 32, 12]) {\n        difference() {\n            cube([25, 6, 1]);\n            for(i = [0:4]) {\n                translate([3 + i*5, 1, -0.5])\n                    cube([1, 4, 2]);\n            }\n        }\n    }\n}\n\n// Assemble synthesizer\nunion() {\n    body();\n    keyboard();\n    knobs();\n    switches();\n    patch_bay();\n    screen();\n    speaker();\n}",
    "renders": true
  },
  {
    "musical_instrument": "digitalsynthesizer",
    "openscad_code": "// Digital Synthesizer – realistic style, medium complexity\n// All dimensions in mm; designed for 3D printing (no overhangs > 45°)\n\n$fa = 2;\n$fs = 1;\n\n// Overall size reference\nkeyboard_length = 80;\nkeyboard_width  = 28;\nkeyboard_height = 4;\n\nmodule main_case() {\n    // Main enclosure – slightly slanted front for readability\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                cube([keyboard_length, keyboard_width, keyboard_height], center = true);\n            translate([0, 0, 8])\n                cube([keyboard_length - 4, keyboard_width - 2, keyboard_height + 6], center = true);\n        }\n\n        // Internal cavity for electronics\n        translate([0, 0, 1])\n            cube([keyboard_length - 6, keyboard_width - 6, keyboard_height + 10], center = true);\n    }\n}\n\nmodule keys() {\n    // 13-key mini keyboard\n    key_w = 5;\n    key_h = 7;\n    key_d = 18;\n    spacing = 6.2;\n    for (i = [0:12]) {\n        translate([-keyboard_length/2 + 8 + i*spacing, keyboard_width/2 + 1, 0])\n            cube([key_w, key_d, key_h], center = true);\n    }\n}\n\nmodule knobs(count = 4) {\n    // Rotary potentiometers\n    knob_d = 8;\n    knob_h = 3;\n    spacing = 15;\n    for (i = [0:count-1]) {\n        translate([-keyboard_length/2 + 15 + i*spacing, 0, 12])\n            cylinder(d = knob_d, h = knob_h, $fn = 36);\n        translate([-keyboard_length/2 + 15 + i*spacing, 0, 12 + knob_h])\n            cylinder(d = 2, h = 10, $fn = 6); // pointer shaft\n    }\n}\n\nmodule screen() {\n    // OLED display cutout and bezel\n    translate([15, 0, 12])\n        difference() {\n            color(\"black\")\n                cube([28, 12, 2], center = true);\n            translate([0, 0, 1])\n                cube([24, 8, 3], center = true);\n        }\n}\n\nmodule midi_ports() {\n    // MIDI DIN sockets on rear\n    translate([-keyboard_length/2 + 5, -keyboard_width/2 - 1, 2])\n    rotate([90, 0, 0])\n    cylinder(d = 12.5, h = 5, $fn = 24);\n\n    translate([-keyboard_length/2 + 20, -keyboard_width/2 - 1, 2])\n    rotate([90, 0, 0])\n    cylinder(d = 12.5, h = 5, $fn = 24);\n}\n\nmodule usb_port() {\n    // USB-B connector\n    translate([keyboard_length/2 - 12, -keyboard_width/2 - 1, 2])\n    rotate([90, 0, 0])\n    cube([8, 2.5, 6], center = true);\n}\n\nmodule speaker_grill() {\n    // Small grill on top\n    difference() {\n        translate([keyboard_length/2 - 25, 0, 10])\n            cube([20, keyboard_width - 10, 1], center = true);\n        for (x = [0:3]) {\n            for (y = [0:1]) {\n                translate([keyboard_length/2 - 35 + x*5, -4 + y*8, 10.5])\n                    cube([2, 3, 2], center = true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_case();\n    keys();\n    knobs();\n    screen();\n    midi_ports();\n    usb_port();\n    speaker_grill();\n}",
    "renders": true
  },
  {
    "musical_instrument": "monosynth",
    "openscad_code": "// Monosynth model - realistic style, medium complexity\n// 3D printable with no overhangs, wall thickness 2mm\n\n// Global variables\nbody_w = 90;\nbody_d = 55;\nbody_h = 15;\nwall_t = 2;\nknob_r = 4;\nknob_h = 8;\nkey_w = 8;\nkey_l = 30;\nkey_h = 5;\n\n// Main body module\nmodule synth_body() {\n    // Main chassis\n    difference() {\n        // Outer shell\n        cube([body_w, body_d, body_h], center=true);\n        // Hollow interior\n        translate([0, 0, -wall_t/2])\n            cube([body_w-wall_t*2, body_d-wall_t*2, body_h], center=true);\n    }\n    \n    // Front panel lip\n    translate([0, body_d/2 - wall_t/2, 0])\n        cube([body_w, wall_t, body_h], center=true);\n}\n\n// Knob module\nmodule knob(x_pos, y_pos, label_height) {\n    translate([x_pos, y_pos, body_h/2 + knob_h/2]) {\n        difference() {\n            // Cylindrical knob body\n            cylinder(h=knob_h, r=knob_r, center=true, $fn=32);\n            // Indicator line\n            rotate([90, 0, 0])\n                translate([0, 0, -knob_h/2 - 0.1])\n                    cube([1, knob_r*0.3, knob_h*1.1], center=true);\n        }\n        // Label stick\n        translate([0, 0, -body_h/2 - label_height/2])\n            cube([2, 2, label_height], center=true);\n    }\n}\n\n// Keyboard key module\nmodule key(x_pos, is_black=false) {\n    key_width = is_black ? key_w*0.6 : key_w;\n    key_length = is_black ? key_l*0.6 : key_l;\n    key_height = is_black ? key_h*1.5 : key_h;\n    \n    translate([x_pos - body_w/2 + key_width/2 + 8, \n               body_d/2 - key_length/2 - 5, \n               -body_h/2 - key_height/2]) {\n        cube([key_width, key_length, key_height]);\n    }\n}\n\n// Control section with knobs\nmodule control_section() {\n    // Knob positions\n    knob_positions = [\n        [-25, 10, 8],   // Cutoff\n        [-10, 10, 8],   // Resonance\n        [5, 10, 8],     // Env Mod\n        [20, 10, 8],    // Decay\n        [-25, -5, 8],   // VCO Tune\n        [-10, -5, 8],   // VCO Shape\n        [5, -5, 8],     // LFO Rate\n        [20, -5, 8]     // LFO Depth\n    ];\n    \n    for(pos = knob_positions) {\n        knob(pos[0], pos[1], pos[2]);\n    }\n    \n    // Switch\n    translate([35, 0, body_h/2 + 2])\n        cube([6, 6, 4], center=true);\n}\n\n// Keyboard module\nmodule keyboard() {\n    // White keys\n    white_pos = [-12, -4, 4, 12, 20];\n    for(i = white_pos) {\n        key(i, false);\n    }\n    \n    // Black keys\n    black_pos = [-8, 0, 8, 16];\n    for(i = black_pos) {\n        key(i, true);\n    }\n}\n\n// Speaker grill\nmodule speaker_grill() {\n    translate([-body_w/2 + 15, 0, 0]) {\n        difference() {\n            // Speaker grill base\n            translate([0, 0, body_h/2 + 1])\n                cube([25, 30, 2], center=true);\n            \n            // Grill holes\n            for(x = [-8:4:8]) {\n                for(y = [-10:4:10]) {\n                    translate([x, y, body_h/2 + 2])\n                        cylinder(h=3, r=1, center=true, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Patch points\nmodule patch_points() {\n    patch_pos = [\n        [-body_w/2 + 10, body_d/2 - 20],\n        [-body_w/2 + 10, body_d/2 - 25],\n        [-body_w/2 + 10, body_d/2 - 30]\n    ];\n    \n    for(pos = patch_pos) {\n        translate([pos[0], pos[1], body_h/2 + 3])\n            difference() {\n                cylinder(h=6, r=3, center=true, $fn=16);\n                translate([0, 0, -3.1])\n                    cylinder(h=6.2, r=1.5, center=true, $fn=16);\n            }\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    translate([body_w/2 - 15, body_d/2 - 10, body_h/2 + 1]) {\n        // LED mount\n        cylinder(h=2, r=2.5, center=true, $fn=16);\n        // LED lens\n        translate([0, 0, 1.5])\n            cylinder(h=1, r=2, center=true, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    synth_body();\n    control_section();\n    keyboard();\n    speaker_grill();\n    patch_points();\n    led_indicator();\n}",
    "renders": true
  },
  {
    "musical_instrument": "polysynth",
    "openscad_code": "// Polysynth - realistic style, medium complexity\n// Designed for 3D printing - no overhangs, 2mm wall thickness\n\n// Main parameters\nkeyboard_width = 80;\nkeyboard_depth = 30;\nkeyboard_height = 8;\nbody_height = 15;\nknob_diameter = 6;\nknob_height = 4;\nscreen_width = 25;\nscreen_height = 15;\nscreen_depth = 2;\n\n// Main body module\nmodule body() {\n    difference() {\n        // Main housing\n        translate([0, 0, body_height/2])\n            cube([keyboard_width + 10, keyboard_depth + 20, body_height], center=true);\n        \n        // Front panel cutout for controls\n        translate([0, keyboard_depth/2 + 5, body_height/2])\n            cube([keyboard_width + 6, 5, body_height - 2], center=true);\n        \n        // Screen recess\n        translate([0, keyboard_depth/2 + 7, body_height - 3])\n            cube([screen_width + 4, screen_height + 4, screen_depth + 1], center=true);\n    }\n}\n\n// Keyboard module\nmodule keyboard() {\n    // Keyboard base\n    translate([0, 0, keyboard_height/2])\n        cube([keyboard_width, keyboard_depth, keyboard_height], center=true);\n    \n    // White keys\n    for(i = [-3:3]) {\n        translate([i * 10, 0, keyboard_height + 1])\n            cube([8, keyboard_depth - 4, 2], center=true);\n    }\n    \n    // Black keys\n    for(i = [-2.5, -1.5, 0.5, 1.5, 2.5]) {\n        translate([i * 10, 0, keyboard_height + 2.5])\n            cube([5, keyboard_depth - 8, 3], center=true);\n    }\n}\n\n// Knob module\nmodule knob(x_pos, y_pos) {\n    translate([x_pos, y_pos, body_height + knob_height/2]) {\n        difference() {\n            cylinder(h=knob_height, d=knob_diameter, $fn=20);\n            cylinder(h=knob_height + 1, d=knob_diameter - 3, $fn=20);\n        }\n    }\n}\n\n// Screen module\nmodule screen() {\n    translate([0, keyboard_depth/2 + 7, body_height - 1]) {\n        difference() {\n            cube([screen_width, screen_height, screen_depth], center=true);\n            translate([0, 0, -0.5])\n                cube([screen_width - 2, screen_height - 2, screen_depth + 1], center=true);\n        }\n    }\n}\n\n// Button module\nmodule button(x_pos, y_pos) {\n    translate([x_pos, y_pos, body_height + 1]) {\n        cylinder(h=2, d=4, $fn=16);\n    }\n}\n\n// Jack module\nmodule jack(x_pos, y_pos) {\n    translate([x_pos, y_pos, body_height/2]) {\n        difference() {\n            cylinder(h=body_height/2, d=5, $fn=20);\n            cylinder(h=body_height/2 + 1, d=3, $fn=20);\n        }\n    }\n}\n\n// Render the complete polysynth\nunion() {\n    body();\n    keyboard();\n    screen();\n    \n    // Control knobs\n    for(i = [-20:10:20]) {\n        knob(i, keyboard_depth/2 + 10);\n    }\n    \n    // Buttons\n    button(-30, keyboard_depth/2 + 10);\n    button(30, keyboard_depth/2 + 10);\n    \n    // Audio jacks\n    jack(-35, keyboard_depth/2 + 15);\n    jack(35, keyboard_depth/2 + 15);\n    \n    // Power LED\n    translate([0, keyboard_depth/2 + 12, body_height + 1])\n        sphere(d=3, $fn=16);\n}",
    "renders": true
  },
  {
    "musical_instrument": "modularsynthesizer",
    "openscad_code": "// Modular Synthesizer – Eurorack-style single module\n// Approx. 4HP wide x 128.5mm tall, 3D-printable\n\n$fa = 2;\n$fs = 0.5;\n\nmodule front_panel() {\n    // 4 HP = 20.00 mm, Eurorack height 128.5 mm, thickness 2 mm\n    difference() {\n        cube([20, 128.5, 2], center = true);\n        // Mounting holes Ø 2.5 mm\n        for (y = [-56, 56])\n            translate([9, y, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 3, d = 2.5, center = true);\n    }\n}\n\nmodule jack_socket() {\n    // 3.5 mm jack with 7 mm front hole\n    difference() {\n        // Outer shell\n        cylinder(h = 8, d = 8.5, center = true);\n        // Inner cavity\n        cylinder(h = 9, d = 7.0, center = true);\n        // Side entry for cable\n        rotate([90, 0, 0])\n            translate([0, 0, 4])\n                cube([5, 10, 5], center = true);\n    }\n}\n\nmodule potentiometer() {\n    // 9 mm Alpha-style pot\n    union() {\n        // Knob\n        cylinder(h = 15, d1 = 16, d2 = 12, center = false);\n        // Shaft\n        translate([0, 0, -3])\n            cylinder(h = 6, d = 6.35, center = true);\n        // Collar\n        translate([0, 0, -6])\n            cylinder(h = 3, d = 9, center = true);\n    }\n}\n\nmodule led() {\n    // Simple 3 mm LED indicator\n    color(\"red\")\n    translate([0, 0, 2])\n        sphere(d = 3);\n}\n\nmodule module_body() {\n    // Basic 3 mm thick shell\n    difference() {\n        // Main body\n        cube([20, 128.5, 25], center = true);\n        // Hollow out\n        cube([17, 125.5, 23], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Front panel\n    color(\"silver\")\n    front_panel();\n\n    // Module body\n    translate([0, 0, -13.5])\n        color(\"black\")\n        module_body();\n\n    // Pots row\n    for (i = [-1, 0, 1])\n        translate([0, i * 25, 6])\n            color(\"darkgray\")\n            potentiometer();\n\n    // Jack row\n    for (i = [-1, 0, 1])\n        translate([0, i * 25 + 12, 6])\n            color(\"gold\")\n            jack_socket();\n\n    // LED indicators\n    for (i = [-1, 0, 1])\n        translate([0, i * 25 - 12, 6])\n            led();\n}",
    "renders": true
  },
  {
    "musical_instrument": "semimodular",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\nbase_w = 80;\nbase_d = 60;\nbase_h = 6;\n\npanel_w = 74;\npanel_d = 54;\npanel_h = 4;\n\nknob_r = 4;\nknob_h = 6;\njack_r = 3;\njack_h = 5;\n\nmodule base() {\n    difference() {\n        // Main base block\n        translate([0, 0, base_h/2])\n            cube([base_w, base_d, base_h], center=true);\n        \n        // Recess for panel\n        translate([0, 0, base_h])\n            cube([panel_w + 2, panel_d + 2, base_h], center=true);\n    }\n}\n\nmodule panel() {\n    color(\"darkslategray\")\n    translate([0, 0, base_h + panel_h/2])\n        cube([panel_w, panel_d, panel_h], center=true);\n}\n\nmodule knob(x, y) {\n    translate([x, y, base_h + panel_h + knob_h/2]) {\n        // Knob base\n        cylinder(h=knob_h, r=knob_r, center=true);\n        // Indicator line\n        translate([knob_r - 0.5, 0, knob_h/2 + 0.1])\n            cube([1.5, 0.5, 0.5], center=true);\n    }\n}\n\nmodule jack(x, y) {\n    translate([x, y, base_h + panel_h + jack_h/2]) {\n        difference() {\n            cylinder(h=jack_h, r=jack_r, center=true);\n            // Jack hole\n            cylinder(h=jack_h + 1, r=jack_r/2, center=true);\n        }\n    }\n}\n\nmodule switch(x, y) {\n    translate([x, y, base_h + panel_h + 4]) {\n        difference() {\n            cube([8, 4, 6], center=true);\n            translate([0, 0, 3])\n                cylinder(h=7, r=1.5, center=true);\n        }\n    }\n}\n\nmodule led(x, y) {\n    color(\"red\")\n    translate([x, y, base_h + panel_h + 1])\n        sphere(r=1.5);\n}\n\nmodule label_holes() {\n    // VCO label recess\n    translate([-panel_w/2 + 15, panel_d/2 - 8, base_h + panel_h/2])\n        cube([20, 4, 0.5], center=true);\n    \n    // VCF label recess\n    translate([panel_w/2 - 15, panel_d/2 - 8, base_h + panel_h/2])\n        cube([20, 4, 0.5], center=true);\n}\n\n// Main assembly\nunion() {\n    base();\n    panel();\n    \n    // Add label recesses\n    label_holes();\n    \n    // VCO section knobs\n    for (i = [0:2]) {\n        knob(-panel_w/2 + 15 + i*10, -panel_d/2 + 15);\n    }\n    \n    // VCF section knobs\n    for (i = [0:1]) {\n        knob(panel_w/2 - 25 + i*15, -panel_d/2 + 15);\n    }\n    \n    // Jacks for CV/Gate\n    jack(-panel_w/2 + 15, panel_d/2 - 15);\n    jack(-panel_w/2 + 35, panel_d/2 - 15);\n    jack(panel_w/2 - 15, panel_d/2 - 15);\n    jack(panel_w/2 - 35, panel_d/2 - 15);\n    \n    // Output jacks\n    jack(0, panel_d/2 - 15);\n    \n    // Power switch\n    switch(-panel_w/2 + 10, 0);\n    \n    // LEDs\n    led(-panel_w/2 + 25, 0);\n    led(panel_w/2 - 25, 0);\n    \n    // Mounting holes\n    for (x = [-panel_w/2 + 5, panel_w/2 - 5]) {\n        for (y = [-panel_d/2 + 5, panel_d/2 - 5]) {\n            translate([x, y, 0])\n                cylinder(h=base_h + panel_h + 1, r=1.5, center=false);\n        }\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "paraphonic",
    "openscad_code": "// Realistic-style Paraphonic Synthesizer (medium complexity)\n// Approx. 80 mm wide, 60 mm deep, 25 mm high\n// Designed for FDM printing – no overhangs, 2 mm wall thickness\n\n// --------------------------\n// General parameters\n// --------------------------\nwall = 2;               // wall thickness for 3D-printability\nbase_w = 80;            // overall width\nbase_d = 60;            // overall depth\nbase_h = 25;            // overall height\ncorner_r = 4;           // corner radius\nknob_r = 4;\nknob_h = 6;\n\n// --------------------------\n// Utility: rounded box shell\n// --------------------------\nmodule rounded_box(w, d, h, r, thick) {\n    difference() {\n        // outer rounded box\n        hull() for (dx = [r, w-r], dy = [r, d-r])\n            translate([dx, dy, r]) sphere(r);\n        hull() for (dx = [r, w-r], dy = [r, d-r])\n            translate([dx, dy, h-r]) sphere(r);\n\n        // inner hollow space\n        hull() for (dx = [r+thick, w-r-thick], dy = [r+thick, d-r-thick])\n            translate([dx, dy, r+thick]) sphere(r);\n        hull() for (dx = [r+thick, w-r-thick], dy = [r+thick, d-r-thick])\n            translate([dx, dy, h-r-thick]) sphere(r);\n    }\n}\n\n// --------------------------\n// Front panel with controls\n// --------------------------\nmodule front_panel() {\n    difference() {\n        // panel plate\n        translate([0, 0, base_h-wall])\n            rounded_box(base_w, base_d, wall, corner_r, wall);\n\n        // display cutout\n        translate([base_w/2, 12, wall/2])\n            cube([30, 8, wall+0.1], center=true);\n\n        // jack cutouts\n        for (x = [10, 70])\n            translate([x, wall+1, wall/2])\n                rotate([90, 0, 0])\n                    cylinder(h=wall+0.1, d=6, $fn=16);\n    }\n}\n\n// --------------------------\n// Knob module\n// --------------------------\nmodule knob(x, y, label) {\n    translate([x, y, base_h]) {\n        cylinder(h=knob_h, r=knob_r, $fn=24);\n        // indicator line\n        translate([0, 0, knob_h+0.1])\n            cube([0.5, knob_r-0.5, 0.5], center=true);\n    }\n}\n\n// --------------------------\n// Keys module (simple rectangular keys)\n// --------------------------\nmodule keys() {\n    key_w = 7;\n    key_d = 25;\n    key_gap = 2;\n    key_h = 2;\n    for (i = [0:11]) {\n        translate([10 + i*(key_w+key_gap), 35, 0])\n            cube([key_w, key_d, key_h]);\n    }\n}\n\n// --------------------------\n// Main assembly\n// --------------------------\ndifference() {\n    union() {\n        // main enclosure\n        rounded_box(base_w, base_d, base_h, corner_r, wall);\n\n        // front panel\n        front_panel();\n\n        // controls\n        knob(20, 10, \"OSC\");\n        knob(40, 10, \"CUTOFF\");\n        knob(60, 10, \"RES\");\n\n        // keys\n        keys();\n    }\n\n    // ventilation slots on rear\n    for (y = [20:10:50])\n        translate([wall/2, y, 10])\n            cube([wall+0.1, 6, 6]);\n}",
    "renders": true
  },
  {
    "musical_instrument": "duophonic",
    "openscad_code": "// OpenSCAD Duophonic Synthesizer – realistic, 3-D-printable, medium complexity\n// Overall footprint ~85 mm × 70 mm × 20 mm\n\n$fn = 64;\n\n// Wall thickness & clearances tuned for FDM printing\nwall = 1.6;\ncorner_r = 3;\nknob_r = 6;\nknob_h = 3;\n\n// Main housing\nmodule housing() {\n    difference() {\n        // Outer shell\n        minkowski() {\n            cube([80, 65, 18]);\n            sphere(corner_r);\n        }\n        // Hollow cavity\n        minkowski() {\n            translate([wall, wall, wall])\n                cube([80-2*wall, 65-2*wall, 18-wall]);\n            sphere(corner_r - wall);\n        }\n        // Rectangular cable cut-outs on back\n        translate([40, 65, 9]) rotate([0,90,0])\n            cylinder(h=10, r=6, $fn=20);\n    }\n}\n\n// Front panel PCB area\nmodule panel() {\n    color(\"darkgreen\")\n    difference() {\n        translate([0, 0, 18])\n            cube([80, 65, 2]);\n        // Screen opening\n        translate([15, 15, -0.1])\n            cube([34, 12, 2.2]);\n        // Potentiometer holes\n        for (x=[20, 40, 60]) {\n            translate([x, 40, -0.1])\n                cylinder(h=2.2, r=knob_r);\n        }\n        // 1/4\" jack holes\n        for (x=[10, 70]) {\n            translate([x, 55, -0.1])\n                cylinder(h=2.2, r=6.35/2);\n        }\n    }\n}\n\n// Rotary knobs\nmodule knob(pos=[0,0,0]) {\n    translate(pos)\n    difference() {\n        cylinder(h=knob_h, r=knob_r);\n        translate([0,0,-0.1])\n            cylinder(h=knob_h+0.2, r=knob_r/2);\n    }\n}\n\n// Mini OLED screen\nmodule screen() {\n    color(\"black\")\n    translate([15+17, 15+6, 18+1.5])\n        cube([34-2, 12-2, 0.5]);\n}\n\n// Main jack sockets (TRS)\nmodule jack(pos=[0,0,0]) {\n    color(\"silver\")\n    union() {\n        translate(pos)\n            cylinder(h=8, r=6.35/2);\n        translate([pos.x, pos.y, pos.z-8])\n            cylinder(h=8, r=8);\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    foot_r = 4;\n    foot_h = 2;\n    for (x=[10, 70], y=[10, 55]) {\n        translate([x, y, -foot_h])\n            cylinder(h=foot_h, r=foot_r);\n    }\n}\n\n// Assembly\nhousing();\npanel();\nscreen();\nfor (x=[20, 40, 60])\n    knob([x, 40, 18+2]);\njack([10, 55, 18]);\njack([70, 55, 18]);\nfeet();",
    "renders": true
  },
  {
    "musical_instrument": "multitimbral",
    "openscad_code": "// Multitimbral Synthesizer Module - Realistic Style, Medium Complexity\n// Dimensions: 90x60x25 mm\n\n// Global parameters\nbody_w = 90;\nbody_h = 60;\nbody_d = 25;\nwall_t = 2;\n\n// Front panel parameters\npanel_w = body_w - 6;\npanel_h = body_h - 6;\npanel_d = 2;\n\n// Knob parameters\nknob_r = 4;\nknob_h = 3;\n\n// Button parameters\nbtn_r = 2.5;\nbtn_h = 1.5;\n\n// Screen parameters\nscreen_w = 25;\nscreen_h = 12;\nscreen_d = 1;\n\n// Jack parameters\njack_r = 3;\njack_h = 4;\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Outer shell\n        cube([body_w, body_h, body_d], center=true);\n        \n        // Hollow inside\n        translate([0, 0, -wall_t/2])\n            cube([body_w-wall_t*2, body_h-wall_t*2, body_d-wall_t], center=true);\n        \n        // Front cutout for panel\n        translate([0, 0, body_d/2 - panel_d])\n            cube([panel_w+2, panel_h+2, panel_d+1], center=true);\n    }\n}\n\n// Front panel\nmodule front_panel() {\n    // Panel plate\n    translate([0, 0, body_d/2 - panel_d/2])\n        cube([panel_w, panel_h, panel_d], center=true);\n    \n    // Screen recess\n    translate([0, 10, body_d/2 - panel_d/2 + 0.1])\n        cube([screen_w+2, screen_h+2, 0.5], center=true);\n}\n\n// LCD screen\nmodule lcd_screen() {\n    translate([0, 10, body_d/2])\n        cube([screen_w, screen_h, screen_d], center=true);\n}\n\n// Rotary encoder knobs\nmodule knobs() {\n    // Master volume\n    translate([-30, -15, body_d/2 + panel_d/2])\n        cylinder(h=knob_h, r=knob_r, $fn=20);\n    \n    // Filter cutoff\n    translate([-15, -15, body_d/2 + panel_d/2])\n        cylinder(h=knob_h, r=knob_r, $fn=20);\n    \n    // Resonance\n    translate([0, -15, body_d/2 + panel_d/2])\n        cylinder(h=knob_h, r=knob_r, $fn=20);\n    \n    // Attack\n    translate([15, -15, body_d/2 + panel_d/2])\n        cylinder(h=knob_h, r=knob_r, $fn=20);\n    \n    // Decay\n    translate([30, -15, body_d/2 + panel_d/2])\n        cylinder(h=knob_h, r=knob_r, $fn=20);\n}\n\n// Push buttons\nmodule buttons() {\n    // Program button\n    translate([-30, 0, body_d/2 + panel_d/2])\n        cylinder(h=btn_h, r=btn_r, $fn=16);\n    \n    // Save button\n    translate([-20, 0, body_d/2 + panel_d/2])\n        cylinder(h=btn_h, r=btn_r, $fn=16);\n    \n    // Edit button\n    translate([-10, 0, body_d/2 + panel_d/2])\n        cylinder(h=btn_h, r=btn_r, $fn=16);\n    \n    // Exit button\n    translate([0, 0, body_d/2 + panel_d/2])\n        cylinder(h=btn_h, r=btn_r, $fn=16);\n}\n\n// Audio jacks\nmodule jacks() {\n    // Left output\n    translate([-25, 15, body_d/2 + panel_d/2])\n        cylinder(h=jack_h, r=jack_r, $fn=16);\n    \n    // Right output\n    translate([-15, 15, body_d/2 + panel_d/2])\n        cylinder(h=jack_h, r=jack_r, $fn=16);\n    \n    // MIDI in\n    translate([0, 15, body_d/2 + panel_d/2])\n        cylinder(h=jack_h, r=jack_r, $fn=16);\n    \n    // MIDI out\n    translate([15, 15, body_d/2 + panel_d/2])\n        cylinder(h=jack_h, r=jack_r, $fn=16);\n}\n\n// Ventilation slots on sides\nmodule vents() {\n    for(i = [-3:1:3]) {\n        translate([body_w/2, i*7, 0])\n            rotate([0, 90, 0])\n                cube([body_d*0.8, 2, wall_t]);\n    }\n    \n    for(i = [-3:1:3]) {\n        translate([-body_w/2, i*7, 0])\n            rotate([0, 90, 0])\n                cube([body_d*0.8, 2, wall_t]);\n    }\n}\n\n// LED indicators\nmodule leds() {\n    translate([-30, 5, body_d/2 + panel_d/2])\n        cylinder(h=1, r=1.5, $fn=16);\n    \n    translate([-20, 5, body_d/2 + panel_d/2])\n        cylinder(h=1, r=1.5, $fn=16);\n    \n    translate([-10, 5, body_d/2 + panel_d/2])\n        cylinder(h=1, r=1.5, $fn=16);\n}\n\n// Assembly\nunion() {\n    // Main components\n    main_body();\n    front_panel();\n    lcd_screen();\n    knobs();\n    buttons();\n    jacks();\n    leds();\n    \n    // Side features\n    vents();\n}",
    "renders": true
  },
  {
    "musical_instrument": "analogmodeling",
    "openscad_code": "// Analog Synthesizer Module - Realistic Style\n// A Eurorack-style VCO module with knobs, jacks, and switches\n\n$fn=50;\nwall_thickness = 1.2;\npanel_width = 20;\npanel_height = 128;\npanel_depth = 2.5;\n\n// Main module\nmodule analog_module() {\n    difference() {\n        // Front panel\n        color(\"silver\")\n        cube([panel_width, panel_height, panel_depth], center=true);\n        \n        // Mounting holes\n        translate([0, panel_height/2-7.5, -panel_depth/2])\n            cylinder(h=panel_depth+1, r=1.6);\n        translate([0, -panel_height/2+7.5, -panel_depth/2])\n            cylinder(h=panel_depth+1, r=1.6);\n    }\n    \n    // Knobs\n    for(x = [-6, 0, 6]) {\n        translate([x, 50, panel_depth/2]) rotate([90,0,0]) knob();\n    }\n    \n    // Fine tune knob\n    translate([0, 30, panel_depth/2]) rotate([90,0,0]) small_knob();\n    \n    // Jacks\n    for(x = [-7, 7]) {\n        translate([x, 10, panel_depth/2]) rotate([90,0,0]) jack();\n    }\n    translate([0, -10, panel_depth/2]) rotate([90,0,0]) jack();\n    \n    // Toggle switch\n    translate([0, -30, panel_depth/2]) toggle_switch();\n    \n    // Frequency range switch\n    translate([0, -50, panel_depth/2]) range_switch();\n    \n    // CV attenuator knobs\n    for(x = [-6, 6]) {\n        translate([x, -70, panel_depth/2]) rotate([90,0,0]) small_knob();\n    }\n}\n\n// Knob module\nmodule knob() {\n    union() {\n        // Base\n        color(\"black\")\n        cylinder(h=6, r=8, center=true);\n        \n        // Indicator line\n        color(\"white\")\n        translate([0, -7, 3.5])\n            cube([1, 3, 2], center=true);\n        \n        // Cap\n        color(\"darkgray\")\n        translate([0,0,3])\n            cylinder(h=2, r=7, center=true);\n    }\n}\n\n// Small knob module\nmodule small_knob() {\n    color(\"black\")\n    cylinder(h=5, r=5, center=true);\n}\n\n// Jack module\nmodule jack() {\n    difference() {\n        // Body\n        color(\"silver\")\n        cylinder(h=10, r=3.5, center=true);\n        \n        // Hole\n        color(\"black\")\n        cylinder(h=12, r=2, center=true);\n    }\n}\n\n// Toggle switch module\nmodule toggle_switch() {\n    color(\"black\")\n    union() {\n        // Base\n        cube([8, 16, 3], center=true);\n        \n        // Lever\n        translate([0, 0, 6])\n            color(\"red\")\n            cube([2, 2, 8], center=true);\n    }\n}\n\n// Range switch module\nmodule range_switch() {\n    color(\"black\")\n    union() {\n        // Base\n        cube([12, 8, 3], center=true);\n        \n        // Slider\n        for(i = [-1, 0, 1]) {\n            translate([i*3.5, 0, 3.5])\n                color(\"white\")\n                cube([1, 6, 2], center=true);\n        }\n    }\n}\n\n// Render the module\nanalog_module();",
    "renders": true
  },
  {
    "musical_instrument": "virtualanalog",
    "openscad_code": "// VirtualAnalog Synthesizer Module\n// Size: 80mm x 50mm x 20mm\n\n$fn = 50;\nwall_thickness = 1.5;\npanel_thickness = 2;\n\n// Main module\nmodule virtualanalog() {\n    // Base enclosure\n    difference() {\n        // Outer shell\n        union() {\n            // Bottom plate\n            cube([80, 50, wall_thickness]);\n            \n            // Side walls\n            translate([0, 0, wall_thickness])\n                cube([80, wall_thickness, 18]);\n            translate([0, 50-wall_thickness, wall_thickness])\n                cube([80, wall_thickness, 18]);\n            translate([0, 0, wall_thickness])\n                cube([wall_thickness, 50, 18]);\n            translate([80-wall_thickness, 0, wall_thickness])\n                cube([wall_thickness, 50, 18]);\n        }\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness*2])\n            cube([80-wall_thickness*2, 50-wall_thickness*2, 16]);\n    }\n    \n    // Front panel\n    translate([0, 0, 20-panel_thickness])\n        cube([80, 50, panel_thickness]);\n    \n    // Potentiometers\n    for(x = [15, 35, 55]) {\n        translate([x, 15, 20])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=6, center=true);\n        translate([x, 15, 20])\n            rotate([90, 0, 0])\n                cylinder(h=3, r=3, center=true);\n    }\n    \n    // Jacks\n    for(x = [20, 40, 60]) {\n        translate([x, 35, 20])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=4.5, center=true);\n        // Jack hole\n        translate([x, 35, 20])\n            rotate([90, 0, 0])\n                cylinder(h=panel_thickness+1, r=3.5, center=true);\n    }\n    \n    // Switch\n    translate([10, 25, 20])\n        cube([6, 12, 8]);\n    \n    // LED indicators\n    for(x = [25, 45, 65]) {\n        translate([x, 10, 20.5])\n            sphere(r=2);\n    }\n    \n    // Labeling panel\n    translate([2, 2, 20.5])\n        cube([76, 8, 0.5]);\n    \n    // Mounting holes\n    for(x = [5, 75]) {\n        for(y = [5, 45]) {\n            translate([x, y, 0])\n                cylinder(h=20, r=2);\n            translate([x, y, 0])\n                cylinder(h=20.5, r=1.5);\n        }\n    }\n}\n\n// Render the model\nvirtualanalog();",
    "renders": true
  },
  {
    "musical_instrument": "workstations",
    "openscad_code": "// Realistic Workstation in Medium Complexity\n// Dimensions: 80mm x 60mm x 50mm\n\n// Module for rounded rectangular prism with fillets\nmodule rounded_cube(size, radius) {\n    hull() {\n        translate([radius, radius, 0]) cylinder(h=size[2], r=radius, $fn=20);\n        translate([size[0]-radius, radius, 0]) cylinder(h=size[2], r=radius, $fn=20);\n        translate([size[0]-radius, size[1]-radius, 0]) cylinder(h=size[2], r=radius, $fn=20);\n        translate([radius, size[1]-radius, 0]) cylinder(h=size[2], r=radius, $fn=20);\n    }\n}\n\n// Monitor module\nmodule monitor() {\n    // Monitor stand base\n    translate([65, 30, 0]) {\n        difference() {\n            rounded_cube([20, 15, 3], 3);\n            translate([2, 2, -0.1]) cube([16, 11, 3.2]);\n        }\n    }\n    \n    // Monitor stand pole\n    translate([74, 37.5, 3]) cylinder(h=25, r=2, $fn=16);\n    \n    // Monitor screen\n    translate([74, 37.5, 28]) {\n        rotate([0, 15, 0]) {\n            difference() {\n                rounded_cube([30, 20, 2], 2);\n                translate([1, 1, -0.1]) cube([28, 18, 2.2]);\n            }\n        }\n    }\n}\n\n// Keyboard module\nmodule keyboard() {\n    translate([45, 20, 10]) {\n        difference() {\n            rounded_cube([25, 10, 1.5], 2);\n            // Key indentations\n            for(x = [0:3]) {\n                for(y = [0:1]) {\n                    translate([3 + x*5, 2 + y*5, 0.8]) cube([3.5, 3.5, 1]);\n                }\n            }\n        }\n    }\n}\n\n// Mouse module\nmodule mouse() {\n    translate([30, 15, 10]) {\n        difference() {\n            hull() {\n                sphere(r=3, $fn=20);\n                translate([5, 0, 0]) sphere(r=2.5, $fn=20);\n            }\n            translate([2, -1, 1]) cube([5, 2, 0.5]);\n        }\n    }\n}\n\n// Desk module\nmodule desk() {\n    // Desktop surface\n    translate([40, 30, 10]) {\n        rounded_cube([80, 60, 3], 5);\n    }\n    \n    // Left leg\n    translate([10, 10, 0]) {\n        difference() {\n            rounded_cube([8, 8, 10], 2);\n            translate([2, 2, -0.1]) cube([4, 4, 10.2]);\n        }\n    }\n    \n    // Right leg\n    translate([70, 10, 0]) {\n        difference() {\n            rounded_cube([8, 8, 10], 2);\n            translate([2, 2, -0.1]) cube([4, 4, 10.2]);\n        }\n    }\n    \n    // Back support beam\n    translate([40, 55, 5]) {\n        rounded_cube([75, 5, 5], 2);\n    }\n}\n\n// Tower PC module\nmodule tower_pc() {\n    translate([15, 50, 0]) {\n        difference() {\n            rounded_cube([12, 25, 35], 3);\n            // Front panel details\n            translate([1, 5, 25]) cube([0.5, 15, 8]);\n            // Power button\n            translate([0.5, 12, 30]) cylinder(h=1, r=1.5, $fn=16);\n            // USB ports\n            for(i = [0:1]) {\n                translate([0.5, 8 + i*4, 20]) cube([0.5, 2, 1]);\n            }\n        }\n    }\n}\n\n// Chair module\nmodule chair() {\n    // Seat\n    translate([40, 5, 13]) {\n        rotate([0, -5, 0]) {\n            rounded_cube([20, 20, 3], 3);\n        }\n    }\n    \n    // Backrest\n    translate([40, -5, 25]) {\n        rotate([0, 10, 0]) {\n            rounded_cube([18, 3, 25], 3);\n        }\n    }\n    \n    // Chair legs\n    for(x = [-8, 8]) {\n        for(y = [-8, 8]) {\n            translate([40 + x, 5 + y, 0]) {\n                cylinder(h=13, r=1.5, $fn=12);\n            }\n        }\n    }\n}\n\n// Assemble the complete workstation\nunion() {\n    desk();\n    monitor();\n    keyboard();\n    mouse();\n    tower_pc();\n    chair();\n}",
    "renders": true
  },
  {
    "musical_instrument": "groovebox",
    "openscad_code": "// Groovebox - Realistic style, medium complexity\n// Dimensions: 120x80x25mm\n\n// Main parameters\ngroovebox_length = 120;\ngroovebox_width = 80;\ngroovebox_height = 25;\nwall_thickness = 2.5;\n\n// Main body with rounded corners\nmodule main_body() {\n    difference() {\n        // Main shell\n        linear_extrude(height=groovebox_height, convexity=10)\n            offset(r=5)\n                square([groovebox_length-wall_thickness*2, groovebox_width-wall_thickness*2], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            linear_extrude(height=groovebox_height-wall_thickness*2, convexity=10)\n                offset(r=3)\n                    square([groovebox_length-wall_thickness*6, groovebox_width-wall_thickness*6], center=true);\n    }\n}\n\n// Control panel surface\nmodule control_panel() {\n    translate([0, 0, groovebox_height-wall_thickness])\n        cube([groovebox_length-wall_thickness*2, groovebox_width-wall_thickness*2, wall_thickness], center=true);\n}\n\n// Screen\nmodule screen() {\n    translate([-20, 15, groovebox_height])\n        cube([40, 15, 1], center=true);\n    \n    // Screen bezel\n    translate([-20, 15, groovebox_height-0.5])\n        cube([42, 17, 1.5], center=true);\n}\n\n// Rotary encoder knobs\nmodule knob(x, y) {\n    translate([x, y, groovebox_height+1])\n        cylinder(h=4, r=4, $fn=20);\n    translate([x, y, groovebox_height+5])\n        cylinder(h=2, r=3.5, $fn=16);\n}\n\n// Button\nmodule button(x, y, size=5) {\n    translate([x, y, groovebox_height+1.5])\n        cylinder(h=2, r=size/2, $fn=16);\n    translate([x, y, groovebox_height])\n        cube([size+2, size+2, 2], center=true);\n}\n\n// Fader\nmodule fader(x, y) {\n    // Track\n    translate([x, y, groovebox_height])\n        cube([30, 8, 1.5], center=true);\n    \n    // Slider\n    translate([x, y, groovebox_height+2])\n        cube([6, 12, 3], center=true);\n}\n\n// Grid buttons for sequencer\nmodule grid_button(x, y) {\n    translate([x, y, groovebox_height+1])\n        cube([6, 6, 2], center=true);\n    translate([x, y, groovebox_height+3])\n        cube([5, 5, 1], center=true);\n}\n\n// Ventilation slots\nmodule vents() {\n    for(i = [-2:2]) {\n        translate([groovebox_length/2-5, i*10-10, groovebox_height/2])\n            cube([2, 3, groovebox_height-4], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    main_body();\n    control_panel();\n    screen();\n    \n    // Knobs\n    knob(-40, 0);\n    knob(-40, -15);\n    knob(40, 0);\n    knob(40, -15);\n    \n    // Transport buttons\n    button(0, -25, 8);\n    button(15, -25, 8);\n    button(-15, -25, 8);\n    \n    // Faders\n    fader(-20, 10);\n    fader(20, 10);\n    \n    // 4x4 grid buttons\n    for(row = [0:3]) {\n        for(col = [0:3]) {\n            grid_button(col*8-12, row*8-15);\n        }\n    }\n    \n    // Vents on side\n    vents();\n    \n    // Rubber feet\n    translate([groovebox_length/2-10, groovebox_width/2-10, 0])\n        cylinder(h=2, r=3, $fn=16);\n    translate([-groovebox_length/2+10, groovebox_width/2-10, 0])\n        cylinder(h=2, r=3, $fn=16);\n    translate([groovebox_length/2-10, -groovebox_width/2+10, 0])\n        cylinder(h=2, r=3, $fn=16);\n    translate([-groovebox_length/2+10, -groovebox_width/2+10, 0])\n        cylinder(h=2, r=3, $fn=16);\n}",
    "renders": true
  },
  {
    "musical_instrument": "sequencer",
    "openscad_code": "// Realistic style 8-step mini sequencer\n// Overall dimensions: 90 x 50 x 15 mm – fits most FDM printers\n\n$fn = 32;               // Smooth curves\nwall = 1.5;             // 1.5 mm walls for strength\ncorner_r = 3;           // Rounded corners for printability\n\n// Color-coding for realism\ncolor_enclosure = [0.05, 0.05, 0.05];   // Matte black\ncolor_panel     = [0.25, 0.25, 0.25];   // Dark grey\ncolor_knobs     = [0.9, 0.9, 0.1];      // Yellow knobs\ncolor_led       = [1, 0, 0];            // Red LEDs\n\n// Main enclosure with rounded edges\nmodule enclosure() {\n    difference() {\n        // Outer shell\n        minkowski() {\n            cube([90, 50, 15], center = true);\n            sphere(r = corner_r);\n        }\n        // Hollow inside\n        minkowski() {\n            translate([0, 0, -1])\n                cube([90 - 2*wall, 50 - 2*wall, 15], center = true);\n            sphere(r = corner_r - wall);\n        }\n    }\n}\n\n// Front panel with labels and holes\nmodule panel() {\n    color(color_panel)\n    translate([0, 0, 7.4])\n    difference() {\n        // Panel plate\n        cube([86, 46, 0.8], center = true);\n        \n        // 8 step LED holes (2 mm diameter)\n        for (i = [0:7]) {\n            translate([-35 + i*10, 18, 0])\n                cylinder(h = 1, d = 2, center = true);\n        }\n        \n        // 8 step potentiometer holes (6 mm D-shaft)\n        for (i = [0:7]) {\n            translate([-35 + i*10, 0, 0])\n                cylinder(h = 1, d = 6.2, center = true);\n        }\n        \n        // Start / Stop button hole (8 mm)\n        translate([30, -16, 0])\n            cylinder(h = 1, d = 8.2, center = true);\n        \n        // Tempo knob hole\n        translate([0, -16, 0])\n            cylinder(h = 1, d = 6.2, center = true);\n    }\n}\n\n// Potentiometer knobs\nmodule knob() {\n    color(color_knobs)\n    union() {\n        cylinder(h = 6, d = 10);\n        translate([0, 0, 6])\n            cylinder(h = 2, d = 8);\n    }\n}\n\n// Small indicator LED (2 mm high dome)\nmodule led() {\n    color(color_led)\n    translate([0, 0, 1])\n        sphere(d = 2);\n}\n\n// Start / Stop button\nmodule button() {\n    color([0.9, 0.1, 0.1])\n    translate([0, 0, 0.5])\n        cylinder(h = 3, d = 7.5);\n}\n\n// Assembly\nunion() {\n    color(color_enclosure) enclosure();\n    panel();\n    \n    // 8 knobs for step CV\n    for (i = [0:7]) {\n        translate([-35 + i*10, 0, 7.8])\n            knob();\n    }\n    \n    // 8 step LEDs\n    for (i = [0:7]) {\n        translate([-35 + i*10, 18, 8.2])\n            led();\n    }\n    \n    // Tempo knob\n    translate([0, -16, 7.8])\n        knob();\n    \n    // Start/Stop button\n    translate([30, -16, 7.8])\n        button();\n}",
    "renders": true
  },
  {
    "musical_instrument": "arrangerkeyboard",
    "openscad_code": "// Realistic Arranger Keyboard - medium complexity\n// Size: 120 x 40 x 15 mm\n\n$fn = 32;\n\n// Main body\nmodule keyboard_body() {\n    // Base shell\n    difference() {\n        // Main block\n        cube([120, 40, 15], center = true);\n        \n        // Hollow out\n        translate([0, 0, -1])\n            cube([110, 35, 13], center = true);\n    }\n}\n\n// Screen\nmodule screen() {\n    translate([0, 15, 8])\n        color([0.1, 0.1, 0.1])\n        cube([40, 8, 0.5], center = true);\n}\n\n// Knobs\nmodule knob(x_pos, y_pos, z_pos) {\n    translate([x_pos, y_pos, z_pos])\n        rotate([90, 0, 0])\n        cylinder(h = 3, r1 = 2.5, r2 = 2.5);\n}\n\n// Buttons\nmodule button(x_pos, y_pos, z_pos) {\n    translate([x_pos, y_pos, z_pos])\n        cylinder(h = 1.5, r = 3);\n}\n\n// Sliders\nmodule slider(x_pos, y_pos) {\n    difference() {\n        // Track\n        translate([x_pos, y_pos, 8.5])\n            cube([20, 4, 1], center = true);\n        \n        // Slot\n        translate([x_pos, y_pos, 8.5])\n            cube([18, 2.5, 1.1], center = true);\n    }\n    \n    // Slider knob\n    translate([x_pos, y_pos, 9.5])\n        cube([5, 3, 2], center = true);\n}\n\n// Piano keys\nmodule piano_keys() {\n    // White keys\n    for (i = [0:11]) {\n        translate([-30 + i * 5, -5, 0])\n            cube([4.5, 12, 2.5]);\n    }\n    \n    // Black keys\n    for (i = [0:7]) {\n        if (i != 2 && i != 6) {\n            translate([-27.5 + i * 7.5, -5, 2.5])\n                color([0.1, 0.1, 0.1])\n                cube([3, 7, 4]);\n        }\n    }\n}\n\n// Pitch/mod wheels\nmodule wheels() {\n    translate([45, -15, 7])\n        rotate([0, 90, 0])\n        cylinder(h = 15, r = 4);\n    \n    translate([45, -5, 7])\n        rotate([0, 90, 0])\n        cylinder(h = 15, r = 4);\n}\n\n// Main assembly\nunion() {\n    keyboard_body();\n    \n    screen();\n    \n    // Control knobs\n    for (i = [0:3]) {\n        knob(-40 + i * 12, 15, 8.5);\n    }\n    \n    // Buttons\n    for (i = [0:1]) {\n        button(-50 + i * 10, 0, 8.5);\n    }\n    \n    for (i = [0:2]) {\n        button(-20 + i * 12, 0, 8.5);\n    }\n    \n    for (i = [0:1]) {\n        button(20 + i * 10, 0, 8.5);\n    }\n    \n    // Sliders\n    for (i = [0:2]) {\n        slider(-30 + i * 25, 10);\n    }\n    \n    // Piano keys\n    piano_keys();\n    \n    // Wheels\n    wheels();\n    \n    // Speaker grills\n    translate([-50, -15, 8])\n        for (i = [0:5]) {\n            translate([i * 3, 0, 0])\n                cube([1, 8, 0.5]);\n        }\n    \n    translate([50, -15, 8])\n        for (i = [0:5]) {\n            translate([-i * 3, 0, 0])\n                cube([1, 8, 0.5]);\n        }\n}",
    "renders": true
  },
  {
    "musical_instrument": "digitalaccordion",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// overall scale factor\nscale_factor = 0.7;\n\n// Main body dimensions\nbody_width  = 40 * scale_factor;\nbody_depth  = 25 * scale_factor;\nbody_height = 70 * scale_factor;\nwall_thick  = 2 * scale_factor;\n\n// Keyboard parameters\nkeys_x = 8 * scale_factor;\nkeys_y = 3 * scale_factor;\nkeys_z = 1.5 * scale_factor;\nkey_pitch = 4.5 * scale_factor;\nnum_keys_right = 11;\nnum_keys_left  = 5;\n\n// Buttons parameters\nbutton_r = 1.8 * scale_factor;\nbutton_h = 2.5 * scale_factor;\nbutton_pitch = 4 * scale_factor;\nnum_buttons = 8;\n\n// Bellows parameters\nbellows_width  = body_width + 4 * wall_thick;\nbellows_depth  = body_depth  + wall_thick;\nbellows_height = 20 * scale_factor;\nbellows_step   = 2 * scale_factor;\nbellows_wall   = 1.5 * scale_factor;\n\nmodule rounded_box(w, d, h, r) {\n    hull() {\n        translate([ r,  r, 0]) cylinder(h = h, r = r, center = false);\n        translate([w-r,  r, 0]) cylinder(h = h, r = r, center = false);\n        translate([w-r, d-r, 0]) cylinder(h = h, r = r, center = false);\n        translate([ r, d-r, 0]) cylinder(h = h, r = r, center = false);\n    }\n}\n\nmodule bellows() {\n    // corrugated fold look\n    difference() {\n        union() {\n            for (i = [0 : bellows_step : bellows_height]) {\n                translate([0, 0, i])\n                    cube([bellows_width, bellows_depth, bellows_wall]);\n            }\n        }\n        // hollow inside\n        translate([bellows_wall, bellows_wall, -1])\n            cube([bellows_width - 2*bellows_wall, bellows_depth - 2*bellows_wall, bellows_height + 2]);\n    }\n}\n\nmodule accordion_body() {\n    difference() {\n        // outer rounded shell\n        rounded_box(body_width, body_depth, body_height, 3 * scale_factor);\n        // hollow cavity\n        translate([wall_thick, wall_thick, wall_thick])\n            rounded_box(body_width - 2*wall_thick,\n                        body_depth - 2*wall_thick,\n                        body_height - 2*wall_thick,\n                        2 * scale_factor);\n    }\n}\n\nmodule right_keyboard() {\n    // right-hand piano-style keys\n    for (i = [0 : num_keys_right-1]) {\n        translate([i*key_pitch, 0, 0])\n            cube([keys_x, keys_y, keys_z]);\n    }\n}\n\nmodule left_buttons() {\n    // left-hand chord buttons\n    for (j = [0 : num_buttons-1]) {\n        translate([0, j*button_pitch, 0])\n            cylinder(h = button_h, r = button_r);\n    }\n}\n\nmodule display() {\n    // small rectangular display screen\n    translate([body_width/2 - 10*scale_factor,\n               body_depth/2 + 1,\n               body_height - 8*scale_factor])\n        cube([20*scale_factor, 1, 8*scale_factor]);\n}\n\n// Assembly\ntranslate([0, 0, bellows_height])\n    accordion_body();\n\ntranslate([0, 0, 0])\n    bellows();\n\ntranslate([body_width/2 - (num_keys_right-1)*key_pitch/2,\n           body_depth + wall_thick,\n           bellows_height + body_height - 8*scale_factor])\n    right_keyboard();\n\ntranslate([-body_width/2 - 2*wall_thick,\n           body_depth/2 - (num_buttons-1)*button_pitch/2,\n           bellows_height + body_height/2])\n    rotate([90, 0, 0])\n    left_buttons();\n\ntranslate([0, 0, bellows_height])\n    display();",
    "renders": true
  },
  {
    "musical_instrument": "chromaticaccordion",
    "openscad_code": "// Chromatic Accordion (realistic, medium complexity)\n// Basic dimensions in mm\nkeyboard_width = 20;\nkeyboard_length = 70;\nkeyboard_thickness = 8;\nbutton_d = 6;\nbutton_h = 3;\nbellow_width = 55;\nbellow_length = 65;\nbellow_height = 45;\nbellow_wall = 2;\nbass_side_width = 25;\nbass_side_length = 70;\nbass_side_thickness = 8;\nbass_button_d = 5;\nbass_button_h = 2;\nstrap_thick = 2;\nstrap_width = 8;\n\n// Render main accordion\nmodule accordion() {\n    // Right-hand keyboard (treble side)\n    translate([bellow_width/2 + keyboard_width/2, 0, 0])\n        keyboard_assembly();\n\n    // Bass side\n    translate([-bellow_width/2 - bass_side_width/2, 0, 0])\n        bass_assembly();\n\n    // Bellows\n    bellows();\n}\n\n// Treble keyboard with buttons\nmodule keyboard_assembly() {\n    difference() {\n        // Main keyboard body\n        color(\"ivory\")\n        cube([keyboard_width, keyboard_length, keyboard_thickness], center=true);\n\n        // Buttons arranged chromatically (simplified 3x5 grid)\n        for (row=[0:2])\n            for (col=[0:4]) {\n                x = (col - 2) * 10;\n                y = (row - 1) * 12;\n                translate([keyboard_width/2 - button_h - 1, y, keyboard_thickness/2 - button_h/2])\n                    rotate([0, 90, 0])\n                        cylinder(d=button_d, h=button_h+1, $fn=16);\n            }\n    }\n\n    // Actual protruding buttons\n    for (row=[0:2])\n        for (col=[0:4]) {\n            x = (col - 2) * 10;\n            y = (row - 1) * 12;\n            color(\"black\")\n            translate([keyboard_width/2 - button_h/2 - 0.5, y, keyboard_thickness/2 + button_h/2])\n                rotate([0, 90, 0])\n                    cylinder(d=button_d, h=button_h, $fn=16);\n        }\n\n    // Palm rest\n    color(\"ivory\")\n    translate([0, keyboard_length/2 + 5, keyboard_thickness/2 - 2])\n        cube([keyboard_width, 10, 4], center=true);\n}\n\n// Bass side assembly\nmodule bass_assembly() {\n    difference() {\n        color(\"black\")\n        cube([bass_side_width, bass_side_length, bass_side_thickness], center=true);\n\n        // Bass button holes (2x4 grid)\n        for (row=[0:1])\n            for (col=[0:3]) {\n                y = (col - 1.5) * 12;\n                z = (row - 0.5) * 15;\n                translate([-bass_side_width/2 + bass_button_h + 1, y, z])\n                    rotate([0, 90, 0])\n                        cylinder(d=bass_button_d, h=bass_button_h+1, $fn=16);\n            }\n    }\n\n    // Bass buttons\n    for (row=[0:1])\n        for (col=[0:3]) {\n            y = (col - 1.5) * 12;\n            z = (row - 0.5) * 15;\n            color(\"pearl\")\n            translate([-bass_side_width/2 + bass_button_h/2 + 0.5, y, z])\n                rotate([0, 90, 0])\n                    cylinder(d=bass_button_d, h=bass_button_h, $fn=16);\n        }\n\n    // Air valve\n    color(\"silver\")\n    translate([-bass_side_width/2 + 2, bass_side_length/2 - 10, 0])\n        rotate([90, 0, 0])\n            cylinder(d=8, h=2, $fn=32);\n}\n\n// Bellows with folds\nmodule bellows() {\n    color(\"darkgrey\")\n    difference() {\n        // Outer shell\n        cube([bellow_width, bellow_length, bellow_height], center=true);\n\n        // Hollow interior\n        cube([bellow_width - 2*bellow_wall, bellow_length - 2*bellow_wall, bellow_height - 2*bellow_wall], center=true);\n    }\n\n    // Bellow folds (external ridges)\n    for (i=[-2:2]) {\n        translate([0, i*12, 0])\n            cube([bellow_width + 0.1, 2, bellow_height + 0.1], center=true);\n    }\n\n    // Corner protectors\n    for (x=[-1:1:2])\n        for (y=[-1:1:2])\n            for (z=[-1:1:2]) {\n                translate([x*(bellow_width/2 - 3), y*(bellow_length/2 - 3), z*(bellow_height/2 - 3)])\n                    sphere(d=4, $fn=16);\n            }\n\n    // Straps\n    color(\"brown\")\n    translate([0, 0, bellow_height/2 + strap_thick/2])\n        cube([bellow_width - 10, strap_width, strap_thick], center=true);\n    translate([0, 0, -bellow_height/2 - strap_thick/2])\n        cube([bellow_width - 10, strap_width, strap_thick], center=true);\n}\n\naccordion();",
    "renders": true
  },
  {
    "musical_instrument": "buttonaccordion",
    "openscad_code": "// Button accordion (medium-complexity, 3D-printable)\n// Overall size ≈ 95 mm (width) × 55 mm (height) × 40 mm (depth)\n\n$fn = 36;               // Smooth curves\nwall = 1.6;             // 1.6 mm shell thickness for printing\nbtn_h = 3;              // Button height\nbtn_r = 3;              // Button radius\n\n// Main assembly\nmodule accordion() {\n    difference() {\n        union() {\n            bellows_assembly();\n            left_end_plate();\n            right_end_plate();\n            bass_keyboard();\n            treble_keyboard();\n            straps();\n        }\n        // Remove internal hollow\n        translate([0, 0, 0])\n            cube([85 - 2*wall, 50 - 2*wall, 38 - 2*wall], center = true);\n    }\n}\n\n// Bellows (folded paper look)\nmodule bellows_assembly() {\n    for (i = [-35:5:35]) {\n        difference() {\n            translate([i, 0, 0])\n                cube([4, 50, 38], center = true);\n            translate([i, 0, 0])\n                cube([4.2, 52, 40], center = true);\n        }\n    }\n}\n\n// Left wooden end plate with air button\nmodule left_end_plate() {\n    // Wood shell\n    difference() {\n        translate([-45, 0, 0])\n            cube([10, 50, 38], center = true);\n        // Air button hole\n        translate([-45, 20, 12])\n            rotate([90, 0, 0])\n                cylinder(h = 10, r = 4, center = true);\n    }\n    // Air button\n    translate([-45, 20, 12 + btn_h/2 + 1])\n        cylinder(h = btn_h, r = btn_r);\n}\n\n// Right wooden end plate\nmodule right_end_plate() {\n    translate([45, 0, 0])\n        cube([10, 50, 38], center = true);\n}\n\n// Bass-side keyboard (rounded plate with buttons)\nmodule bass_keyboard() {\n    difference() {\n        // Curved plate\n        translate([-25, 0, 19 - wall/2])\n            cube([30, 38, wall], center = true);\n        // Cutouts for buttons\n        for (row = [0:1])\n            for (col = [0:3]) {\n                x = -35 + col * 6;\n                y = -15 + row * 10;\n                translate([x, y, 19 - wall/2 - 1])\n                    cylinder(h = wall + 2, r = 3.5);\n            }\n    }\n    // Bass buttons\n    for (row = [0:1])\n        for (col = [0:3]) {\n            x = -35 + col * 6;\n            y = -15 + row * 10;\n            translate([x, y, 19 + btn_h/2])\n                cylinder(h = btn_h, r = btn_r);\n        }\n}\n\n// Treble-side keyboard (rounded plate with buttons)\nmodule treble_keyboard() {\n    difference() {\n        // Curved plate\n        translate([25, 0, 19 - wall/2])\n            cube([30, 38, wall], center = true);\n        // Cutouts for buttons\n        for (row = [0:2])\n            for (col = [0:4]) {\n                x = 15 + col * 5.5;\n                y = -15 + row * 7.5;\n                translate([x, y, 19 - wall/2 - 1])\n                    cylinder(h = wall + 2, r = 3.5);\n            }\n    }\n    // Treble buttons\n    for (row = [0:2])\n        for (col = [0:4]) {\n            x = 15 + col * 5.5;\n            y = -15 + row * 7.5;\n            translate([x, y, 19 + btn_h/2])\n                cylinder(h = btn_h, r = btn_r);\n        }\n}\n\n// Simple hand straps\nmodule straps() {\n    // Left strap\n    translate([-45, 0, 0]) {\n        difference() {\n            cube([20, 8, 2], center = true);\n            translate([0, 0, -1])\n                cube([18, 6, 4], center = true);\n        }\n    }\n    // Right strap\n    translate([45, 0, 0]) {\n        difference() {\n            cube([20, 8, 2], center = true);\n            translate([0, 0, -1])\n                cube([18, 6, 4], center = true);\n        }\n    }\n}\n\n// Render the model\naccordion();",
    "renders": true
  },
  {
    "musical_instrument": "pianoaccordion",
    "openscad_code": "// Piano Accordion - Realistic Style, Medium Complexity\n// Approximate dimensions: 50mm width x 45mm height x 25mm depth\n\n$fn = 32;\n\n// Main accordion body\nmodule accordion_body() {\n    difference() {\n        // Main body\n        color(\"black\")\n        translate([0, 0, 12.5])\n        cube([50, 45, 25], center = true);\n        \n        // Front face recess\n        color(\"black\")\n        translate([0, 0, 12.5])\n        cube([46, 41, 26], center = true);\n    }\n}\n\n// Piano keyboard\nmodule piano_keys() {\n    // White keys\n    for (i = [0:6]) {\n        translate([-21 + i*6, 18, 0])\n        cube([5, 8, 3]);\n    }\n    \n    // Black keys\n    for (i = [0:4]) {\n        if (i != 2) {\n            translate([-18 + i*6, 18, 3])\n            cube([3, 6, 2]);\n        }\n    }\n}\n\n// Bass buttons\nmodule bass_buttons() {\n    for (row = [0:1]) {\n        for (col = [0:3]) {\n            translate([20 + col*4.5, -15 + row*4.5, 0])\n            cylinder(h = 2.5, r = 1.8);\n        }\n    }\n}\n\n// Air valve button\nmodule air_valve() {\n    translate([35, 0, 0])\n    cylinder(h = 3, r = 2.5);\n}\n\n// Bellows folds\nmodule bellows() {\n    difference() {\n        // Main bellows\n        translate([0, 0, 0])\n        cube([52, 47, 2], center = true);\n        \n        // Create folded effect\n        for (i = [-20:5:20]) {\n            translate([i, 0, -1])\n            cube([2, 47, 4], center = true);\n        }\n    }\n}\n\n// Straps\nmodule straps() {\n    // Left hand strap\n    color(\"brown\")\n    translate([-25, 0, 12.5])\n    rotate([90, 0, 0])\n    cylinder(h = 20, r = 1.5);\n    \n    // Right hand strap\n    color(\"brown\")\n    translate([25, 0, 12.5])\n    rotate([90, 0, 0])\n    cylinder(h = 20, r = 1.5);\n}\n\n// Main assembly\nunion() {\n    // Assemble the accordion\n    accordion_body();\n    \n    // Front components\n    translate([0, 0, 26])\n    union() {\n        piano_keys();\n        bass_buttons();\n        air_valve();\n    }\n    \n    // Bellows on sides\n    translate([-26, 0, 12.5])\n    bellows();\n    translate([26, 0, 12.5])\n    bellows();\n    \n    // Straps\n    straps();\n}",
    "renders": true
  },
  {
    "musical_instrument": "concertina",
    "openscad_code": "// Concertina - Medium complexity realistic style\n// Size: ~80mm end-to-end, 40mm diameter\n\n$fn = 32;\n\n// Main parameters\nend_diameter = 40;\nend_thickness = 3;\nbellow_length = 40;\nbellow_diameter = 38;\nbellow_fold_height = 2;\nbellow_folds = 10;\nhandle_length = 25;\nhandle_diameter = 8;\nbutton_diameter = 3;\nbutton_height = 2;\nbuttons_per_side = 15;\n\nmodule end_cap(is_left = false) {\n    // Outer wooden end\n    difference() {\n        cylinder(h = end_thickness, d = end_diameter);\n        \n        // Hexagonal grill pattern\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) \n                translate([end_diameter/2 - 2, 0, -0.1])\n                    cube([4, 1, end_thickness + 0.2]);\n        }\n    }\n    \n    // Button array\n    angle_step = 360 / buttons_per_side;\n    radius = end_diameter/2 - 8;\n    \n    for (i = [0:buttons_per_side-1]) {\n        angle = i * angle_step;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        translate([x, y, end_thickness])\n            cylinder(h = button_height, d = button_diameter);\n    }\n    \n    // Air button\n    translate([0, end_diameter/2 - 5, end_thickness])\n        cylinder(h = button_height + 1, d = 4);\n}\n\nmodule bellows() {\n    // Central bellows structure\n    union() {\n        // Folded bellows\n        for (i = [0:bellow_folds-1]) {\n            translate([0, 0, i * bellow_fold_height * 2])\n                difference() {\n                    cylinder(h = bellow_fold_height * 2, d = bellow_diameter);\n                    translate([0, 0, bellow_fold_height])\n                        cylinder(h = bellow_fold_height, d = bellow_diameter - 4);\n                }\n        }\n        \n        // Reinforcement rings at folds\n        for (i = [0:bellow_folds]) {\n            translate([0, 0, i * bellow_fold_height * 2])\n                cylinder(h = 1, d = bellow_diameter + 2);\n        }\n    }\n}\n\nmodule handle() {\n    // Leather strap handle\n    rotate([90, 0, 0])\n        difference() {\n            // Main handle bar\n            cylinder(h = handle_length, d = handle_diameter);\n            \n            // Finger grooves\n            for (i = [0:3]) {\n                translate([0, 0, handle_length/4 + i * 5])\n                    rotate([0, 90, 0])\n                        cylinder(h = handle_diameter, d = handle_diameter - 2, $fn = 6);\n            }\n        }\n}\n\n// Assembly\ndifference() {\n    union() {\n        // Left end cap\n        translate([0, 0, 0])\n            end_cap(true);\n        \n        // Right end cap\n        translate([0, 0, bellow_length + end_thickness * 2])\n            rotate([0, 180, 0])\n                end_cap(false);\n        \n        // Bellows between caps\n        translate([0, 0, end_thickness])\n            bellows();\n        \n        // Left handle\n        translate([-end_diameter/2 - 5, 0, end_thickness/2])\n            handle();\n        \n        // Right handle\n        translate([end_diameter/2 + 5, 0, bellow_length + end_thickness * 1.5])\n            rotate([0, 180, 0])\n                handle();\n    }\n    \n    // Hollow out bellows for printability\n    translate([0, 0, end_thickness + 2])\n        cylinder(h = bellow_length - 4, d = bellow_diameter - 6);\n}",
    "renders": true
  },
  {
    "musical_instrument": "bandoneon",
    "openscad_code": "// Bandoneon - Medium complexity realistic style\n// Total length ~90 mm, 3D printable with no supports\n\n$fn = 32;\n\n// Main dimensions\nbody_len = 80;\nbody_w   = 40;\nbody_h   = 25;\nbellow_h = 20;\nbellow_r = 2;\nkey_w    = 4;\nkey_h    = 2;\n\nmodule bandoneon() {\n    // Left wooden side\n    translate([-body_len/2 - bellow_h/2 - 4, 0, 0])\n        cube([8, body_w, body_h], center = true);\n\n    // Right wooden side\n    translate([body_len/2 + bellow_h/2 + 4, 0, 0])\n        cube([8, body_w, body_h], center = true);\n\n    // Bellows - accordion style\n    difference() {\n        union() {\n            for (i = [-3:3]) {\n                translate([i * (bellow_h/2.5), 0, 0])\n                    cube([bellow_h/3, body_w - 2, body_h - 2], center = true);\n            }\n        }\n        // Remove inner volume\n        cube([body_len + bellow_h + 1, body_w - 6, body_h - 6], center = true);\n    }\n\n    // Left keyboard (rounded top)\n    translate([-body_len/2 - bellow_h - 12, body_w/2 + 2, 0]) {\n        rotate([0, 0, 15])\n            cube([15, key_w * 5, key_h * 3], center = true);\n        \n        // Buttons\n        for (row = [0:3]) {\n            for (col = [0:4]) {\n                translate([-5 + row * 3.5, -7 + col * 3.5, key_h * 1.5 + 1])\n                    cylinder(h = 2, r = 1.2);\n            }\n        }\n    }\n\n    // Right keyboard (rounded top)\n    translate([body_len/2 + bellow_h + 12, body_w/2 + 2, 0]) {\n        rotate([0, 0, -15])\n            cube([15, key_w * 5, key_h * 3], center = true);\n        \n        // Buttons\n        for (row = [0:3]) {\n            for (col = [0:4]) {\n                translate([-5 + row * 3.5, -7 + col * 3.5, key_h * 1.5 + 1])\n                    cylinder(h = 2, r = 1.2);\n            }\n        }\n    }\n\n    // Strap holders\n    translate([0, 0, body_h/2 + 2]) {\n        cylinder(h = 3, r = 2);\n        translate([0, body_w/2 - 5, 0])\n            cylinder(h = 3, r = 2);\n        translate([0, -body_w/2 + 5, 0])\n            cylinder(h = 3, r = 2);\n    }\n}\n\nbandoneon();",
    "renders": true
  },
  {
    "musical_instrument": "pianica",
    "openscad_code": "// Pianica (melodica) - realistic style, medium complexity\n// Overall size: 210 mm x 52 mm x 28 mm\n\n$fn = 32;\n\n// Main parameters\nbody_length = 90;\nbody_width = 50;\nbody_height = 20;\nmouthpiece_length = 25;\nmouthpiece_diameter = 8;\ntube_length = 70;\ntube_diameter = 8;\nkey_width = 8;\nkey_length = 12;\nkey_height = 3;\n\nmodule pianica_body() {\n    // Main body shell\n    difference() {\n        hull() {\n            translate([-body_length/2, 0, 0])\n                cube([body_length, body_width, body_height], center=true);\n            translate([-body_length/2+5, 0, body_height/2-2])\n                cube([body_length-10, body_width-4, body_height-4], center=true);\n        }\n        \n        // Hollow inside\n        translate([-body_length/2+2, 0, 0])\n            cube([body_length-4, body_width-4, body_height-2], center=true);\n    }\n    \n    // Top surface details\n    translate([body_length/2-5, 0, body_height/2])\n        cube([10, 30, 1], center=true);\n}\n\nmodule mouthpiece() {\n    // Mouthpiece base\n    translate([body_length/2+mouthpiece_length/2, 0, 0])\n        cylinder(h=mouthpiece_length, d1=mouthpiece_diameter, d2=mouthpiece_diameter*0.8);\n    \n    // Mouthpiece opening\n    translate([body_length/2+mouthpiece_length, 0, 0])\n        cylinder(h=2, d=mouthpiece_diameter*0.6);\n}\n\nmodule tube() {\n    // Flexible tube\n    color(\"black\")\n    translate([body_length/2, 0, body_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=tube_length, d=tube_diameter);\n    \n    // Tube connector\n    translate([body_length/2, 0, body_height/2])\n        cylinder(h=5, d=mouthpiece_diameter);\n}\n\nmodule keys() {\n    // White keys\n    for(i = [-3:3]) {\n        translate([i*key_width*1.1 - body_length/4, body_width/2 - key_length/2, body_height/2 + 0.5])\n            cube([key_width, key_length, key_height]);\n    }\n    \n    // Black keys\n    for(i = [-2.5, -1.5, -0.5, 0.5, 1.5, 2.5]) {\n        color(\"black\")\n        translate([i*key_width*1.1 - body_length/4, body_width/2 - key_length/2, body_height/2 + key_height + 0.5])\n            cube([key_width*0.7, key_length*0.8, key_height*1.2]);\n    }\n}\n\nmodule air_release_button() {\n    // Button on top\n    translate([-body_length/4, 0, body_height/2 + 3])\n        cylinder(h=3, d=6);\n    translate([-body_length/4, 0, body_height/2])\n        cylinder(h=3, d=8);\n}\n\nmodule handle() {\n    // Side handle\n    translate([0, body_width/2+2, body_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=3);\n}\n\nmodule label_area() {\n    // Brand label rectangle\n    translate([0, 0, body_height/2 + 0.5])\n        cube([20, 10, 0.5], center=true);\n}\n\n// Assemble the pianica\nunion() {\n    pianica_body();\n    mouthpiece();\n    tube();\n    keys();\n    air_release_button();\n    handle();\n    label_area();\n}",
    "renders": true
  },
  {
    "musical_instrument": "melodeon",
    "openscad_code": "// Melodeon - Medium complexity realistic model\n// Overall size ~80mm long, 45mm tall, 35mm deep\n\n// Main body shell\nmodule body() {\n    // Base shell\n    difference() {\n        // Outer shell\n        translate([-35, -20, 0])\n            cube([70, 40, 40]);\n        \n        // Hollow interior\n        translate([-32, -17, 3])\n            cube([64, 34, 34]);\n        \n        // Top curve\n        translate([0, 0, 38])\n            cylinder(h=5, r1=35, r2=35, $fn=50);\n    }\n}\n\n// Front grill for sound\nmodule grill() {\n    difference() {\n        // Main grill plate\n        translate([-30, -18, 39.5])\n            cube([60, 36, 1.5]);\n        \n        // Sound holes\n        for(x = [-25:5:25])\n            for(y = [-14:4:14])\n                translate([x, y, 40.5])\n                    cylinder(h=3, r=1.5, $fn=16);\n    }\n}\n\n// Keyboard section\nmodule keyboard() {\n    // White keys\n    for(i = [0:6]) {\n        translate([-28 + i*4, 5, 40])\n            cube([3.5, 12, 1.5]);\n    }\n    \n    // Black keys\n    for(i = [0:4]) {\n        if(i != 2) {\n            translate([-26.5 + i*4, 5, 41.5])\n                cube([2, 8, 2]);\n        }\n    }\n}\n\n// Left hand buttons\nmodule bass_buttons() {\n    for(row = [0:1])\n        for(col = [0:1]) {\n            translate([-25 - col*4, -10 + row*4, 40])\n                cylinder(h=2, r=2, $fn=16);\n        }\n}\n\n// Air button\nmodule air_button() {\n    translate([-29, -15, 40])\n        cylinder(h=3, r=2.5, $fn=16);\n}\n\n// Straps\nmodule straps() {\n    // Left strap\n    translate([0, 20, 25])\n        rotate([90, 0, 0])\n            cylinder(h=30, r1=1.5, r2=1.5, $fn=8);\n    \n    // Right strap\n    translate([0, -20, 25])\n        rotate([90, 0, 0])\n            cylinder(h=30, r1=1.5, r2=1.5, $fn=8);\n}\n\n// Air bellows folds\nmodule bellows() {\n    for(z = [5:5:35]) {\n        difference() {\n            translate([0, 0, z])\n                cube([68, 38, 1], center=true);\n            translate([0, 0, z])\n                cube([64, 34, 2], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    grill();\n    keyboard();\n    bass_buttons();\n    air_button();\n    straps();\n    bellows();\n}",
    "renders": true
  },
  {
    "musical_instrument": "accordionetta",
    "openscad_code": "// Accordionetta (mini accordion) - realistic style, medium complexity\n// Dimensions: ~60mm x 45mm x 28mm\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\nbody_width = 60;\nbody_height = 45;\nbody_depth = 22;\nbellow_thickness = 3;\nkey_width = 4;\nkey_height = 15;\nkey_depth = 2;\n\nmodule accordionetta() {\n    // Main body\n    union() {\n        // Left side - fixed part with keys\n        translate([-body_width/2 - bellow_thickness/2, 0, 0]) {\n            // Left wooden panel\n            color(\"burlywood\") {\n                cube([body_width/2, body_height, body_depth], center=true);\n            }\n            \n            // Keys module\n            translate([body_width/4, body_height/2 - key_height/2 - 3, body_depth/2 + key_depth/2]) {\n                for(i = [0:9]) {\n                    translate([i*key_width*1.1 - 4.5*key_width, 0, 0]) {\n                        cube([key_width, key_height, key_depth], center=true);\n                    }\n                }\n            }\n            \n            // Air valve\n            translate([body_width/4, -body_height/2 + 5, body_depth/2 + 1]) {\n                cylinder(h=3, r=5, center=true);\n            }\n        }\n        \n        // Right side - fixed part with buttons\n        translate([body_width/2 + bellow_thickness/2, 0, 0]) {\n            // Right wooden panel\n            color(\"burlywood\") {\n                cube([body_width/2, body_height, body_depth], center=true);\n            }\n            \n            // Buttons module\n            translate([-body_width/4, 0, body_depth/2 + 2]) {\n                for(row = [0:2]) {\n                    for(col = [0:3]) {\n                        if(!(row == 2 && col == 3)) {\n                            translate([col*6 - 9, row*6 - 6, 0]) {\n                                cylinder(h=2, r=2, center=true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Bellows - central folding part\n        difference() {\n            // Main bellows body\n            translate([0, 0, 0]) {\n                color(\"black\") {\n                    cube([bellow_thickness, body_height - 4, body_depth - 4], center=true);\n                }\n            }\n            \n            // Fold lines\n            for(i = [-1:1]) {\n                translate([0, i*8, 0]) {\n                    cube([bellow_thickness + 0.1, 0.5, body_depth - 4], center=true);\n                }\n            }\n        }\n        \n        // Straps\n        // Left hand strap\n        translate([-body_width/2 - bellow_thickness/2 - 2, 0, 0]) {\n            difference() {\n                cube([5, body_height - 10, 3], center=true);\n                translate([0, 0, 1.5]) {\n                    cube([3, body_height - 14, 3], center=true);\n                }\n            }\n        }\n        \n        // Right hand strap\n        translate([body_width/2 + bellow_thickness/2 + 2, 0, 0]) {\n            difference() {\n                cube([5, body_height - 10, 3], center=true);\n                translate([0, 0, 1.5]) {\n                    cube([3, body_height - 14, 3], center=true);\n                }\n            }\n        }\n        \n        // Decorative grilles\n        // Left grille\n        translate([-body_width/2 - bellow_thickness/2, 0, -body_depth/2 - 1]) {\n            difference() {\n                cube([body_width/2 - 5, body_height - 10, 2], center=true);\n                for(x = [0:2]) {\n                    for(y = [0:3]) {\n                        translate([x*6 - 6, y*6 - 9, 0]) {\n                            cube([3, 3, 2.1], center=true);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Right grille\n        translate([body_width/2 + bellow_thickness/2, 0, -body_depth/2 - 1]) {\n            difference() {\n                cube([body_width/2 - 5, body_height - 10, 2], center=true);\n                for(x = [0:2]) {\n                    for(y = [0:3]) {\n                        translate([x*6 - 6, y*6 - 9, 0]) {\n                            cube([3, 3, 2.1], center=true);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Top edge detail\n        translate([0, body_height/2 + 1, 0]) {\n            cube([body_width + bellow_thickness + 4, 2, body_depth + 4], center=true);\n        }\n        \n        // Bottom edge detail\n        translate([0, -body_height/2 - 1, 0]) {\n            cube([body_width + bellow_thickness + 4, 2, body_depth + 4], center=true);\n        }\n    }\n}\n\naccordionetta();",
    "renders": true
  },
  {
    "musical_instrument": "regal",
    "openscad_code": "// Regal (bookcase) with medium complexity\n// Dimensions: 80mm(W) x 30mm(D) x 80mm(H)\n\nmodule shelf(w, d, t) {\n    // Main shelf board with slight front lip\n    union() {\n        // Shelf base\n        cube([w, d, t]);\n        // Front lip to prevent books from sliding\n        translate([0, d-t, 0])\n            cube([w, t, t*1.5]);\n    }\n}\n\nmodule side_panel(h, d, t) {\n    // Side panel with decorative top curve\n    union() {\n        // Main panel\n        cube([t, d, h]);\n        // Decorative top curve\n        translate([-t/2, d-t, h-t*2])\n            rotate([0, 90, 0])\n                cylinder(h=t*2, r1=t*2, r2=t*2);\n    }\n}\n\nmodule back_panel(w, h, t) {\n    // Back panel with subtle frame detail\n    difference() {\n        cube([w, t, h]);\n        // Inner recessed panel\n        translate([t, t, t])\n            cube([w-t*2, t+0.1, h-t*2]);\n    }\n}\n\nmodule regal() {\n    // Overall dimensions\n    width = 80;\n    depth = 30;\n    height = 80;\n    thickness = 2;\n    \n    // Base assembly\n    union() {\n        // Left side panel\n        translate([0, 0, 0])\n            side_panel(height, depth, thickness);\n        \n        // Right side panel\n        translate([width-thickness, 0, 0])\n            side_panel(height, depth, thickness);\n        \n        // Back panel\n        translate([0, depth-thickness, 0])\n            back_panel(width, height, thickness);\n        \n        // Shelves - 3 levels\n        shelf_width = width - thickness*2;\n        shelf_positions = [15, 40, 65];\n        \n        for(z = shelf_positions) {\n            translate([thickness, 0, z])\n                shelf(shelf_width, depth, thickness);\n        }\n        \n        // Base plinth\n        translate([0, 0, 0])\n            cube([width, depth+2, thickness]);\n        \n        // Top cap\n        translate([0, 0, height-thickness])\n            cube([width, depth+2, thickness]);\n    }\n}\n\n// Render the regal\nregal();",
    "renders": true
  },
  {
    "musical_instrument": "positive",
    "openscad_code": "// Positive sign with realistic style\n// Overall size: 80mm x 80mm x 10mm\n\n// Base plate\ndifference() {\n    cube([80, 80, 10], center=true);\n    \n    // Mounting holes\n    for(x = [-30, 30])\n        for(y = [-30, 30])\n            translate([x, y, 0])\n                cylinder(h=12, d=5, center=true);\n}\n\n// Horizontal bar\ntranslate([0, 0, 5])\n    cube([60, 20, 10], center=true);\n\n// Vertical bar\ntranslate([0, 0, 5])\n    cube([20, 60, 10], center=true);\n\n// Beveled edges\nmodule bevel_edge() {\n    difference() {\n        cube([82, 82, 12], center=true);\n        cube([78, 78, 12], center=true);\n    }\n}\n\n// Add bevel to edges\ntranslate([0, 0, 0])\n    bevel_edge();\n\n// Corner reinforcements\nmodule corner_reinforcement(x, y) {\n    translate([x, y, -5])\n        difference() {\n            cylinder(h=10, d=8, center=true);\n            cylinder(h=12, d=4, center=true);\n        }\n}\n\nfor(x = [-35, 35])\n    for(y = [-35, 35])\n        corner_reinforcement(x, y);",
    "renders": true
  },
  {
    "musical_instrument": "portative",
    "openscad_code": "// Portable Organ (Portative) - Realistic Medium Complexity\n// Approx 80mm wide x 40mm deep x 80mm tall\n\n// Parameters\n$fn = 32;\nwall = 2;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main case\n        cube([75, 35, 70], center=true);\n        \n        // Hollow inside\n        translate([0, 0, 5])\n            cube([71-wall*2, 31-wall*2, 60], center=true);\n        \n        // Air outlet holes\n        for(i = [-1, 0, 1]) {\n            translate([i*20, -17.5, 0])\n                cylinder(h=5, d=6, center=true);\n        }\n        \n        // Key slots\n        for(i = [-3:3]) {\n            translate([i*8, 17.5, -25])\n                cube([7, wall+1, 20], center=true);\n        }\n    }\n}\n\n// Bellows\nmodule bellows() {\n    for(i = [0:3]) {\n        translate([-30 + i*20, 0, -5-i*1.5])\n            difference() {\n                cube([18, 32, 2.5], center=true);\n                translate([0, 0, -1])\n                    cube([14, 28, 5], center=true);\n            }\n    }\n}\n\n// Keys\nmodule keys() {\n    for(i = [-3:3]) {\n        translate([i*8, 20, -15]) {\n            rotate([10, 0, 0])\n                cube([6, 15, 2], center=true);\n            translate([0, 7.5, -2])\n                cylinder(h=4, d=2, center=true);\n        }\n    }\n}\n\n// Pipes\nmodule pipes() {\n    for(i = [-2:2]) {\n        translate([i*10, 0, 45]) {\n            cylinder(h=20 + abs(i)*5, d=8, center=false);\n            translate([0, 0, 20 + abs(i)*5])\n                cylinder(h=3, d=10, center=false);\n        }\n    }\n}\n\n// Handle\nmodule handle() {\n    difference() {\n        translate([0, 0, 45])\n            rotate([90, 0, 0])\n                cylinder(h=40, d=6, center=false);\n        translate([0, 20, 45])\n            rotate([90, 0, 0])\n                cylinder(h=40, d=4, center=false);\n    }\n}\n\n// Straps\nmodule straps() {\n    // Left strap\n    translate([-40, 0, 20])\n        rotate([0, 90, 0])\n            cylinder(h=15, d=3, center=true);\n    \n    // Right strap\n    translate([40, 0, 20])\n        rotate([0, -90, 0])\n            cylinder(h=15, d=3, center=true);\n}\n\n// Assembly\nbody();\nbellows();\nkeys();\npipes();\nhandle();\nstraps();",
    "renders": true
  },
  {
    "musical_instrument": "regalorgan",
    "openscad_code": "// Regal Organ - Realistic Style, Medium Complexity\n// 3D Printable Model (~80mm width)\n\n$fn = 32;  // Smooth curves\n\n// Main body dimensions\nbody_w = 80;\nbody_d = 45;\nbody_h = 35;\n\n// Keyboard dimensions\nkb_w = 70;\nkb_d = 20;\nkb_h = 3;\nkey_w = 4;\nkey_h = 12;\nkey_d = 18;\n\n// Pipe dimensions\npipe_d = 5;\npipe_h = 40;\npipe_spacing = 6;\n\n// Music stand\nstand_w = 50;\nstand_h = 30;\nstand_t = 2;\n\n// Feet\nfoot_w = 8;\nfoot_h = 5;\nfoot_d = 35;\n\nmodule body() {\n    difference() {\n        // Main body\n        translate([0, 0, body_h/2])\n            cube([body_w, body_d, body_h], center=true);\n        \n        // Control panel recess\n        translate([0, body_d/2 - 1, body_h - 5])\n            cube([body_w - 10, 2, 8], center=true);\n        \n        // Handle holes\n        for (x = [-body_w/2 + 10, body_w/2 - 10])\n            translate([x, body_d/2, body_h/2])\n                rotate([90, 0, 0])\n                    cylinder(h=body_d, d=5, center=true);\n    }\n}\n\nmodule keyboard() {\n    translate([0, -body_d/2 + kb_d/2, body_h - 1]) {\n        // Keyboard base\n        cube([kb_w, kb_d, kb_h], center=true);\n        \n        // White keys\n        for (i = [-7:7])\n            translate([i * key_w, 0, kb_h/2 + key_h/2])\n                cube([key_w * 0.9, key_d, key_h], center=true);\n        \n        // Black keys\n        for (i = [-5:5])\n            if (abs(i) % 7 != 3 && abs(i) % 7 != 0)\n                translate([i * key_w + key_w/2, 0, kb_h/2 + key_h + 1])\n                    cube([key_w * 0.7, key_d * 0.7, key_h * 0.6], center=true);\n    }\n}\n\nmodule pipes() {\n    for (i = [-3:3]) {\n        // Front pipes\n        translate([i * pipe_spacing, 0, body_h + pipe_h/2])\n            cylinder(h=pipe_h - abs(i)*2, d=pipe_d, center=true);\n        \n        // Rear pipes (slightly shorter)\n        translate([i * pipe_spacing + pipe_spacing/2, -pipe_d, body_h + pipe_h/2 - 5])\n            cylinder(h=pipe_h - abs(i)*2 - 5, d=pipe_d, center=true);\n    }\n}\n\nmodule music_stand() {\n    translate([0, -body_d/2 - stand_h/2 - 5, body_h + stand_t/2]) {\n        rotate([0, -15, 0])\n            cube([stand_w, stand_t, stand_h], center=true);\n        \n        // Support brace\n        translate([0, -stand_t/2, -stand_h/2 + 5])\n            rotate([0, 45, 0])\n                cube([stand_w - 10, stand_t, 10], center=true);\n    }\n}\n\nmodule feet() {\n    for (x = [-body_w/2 + 15, body_w/2 - 15]) {\n        translate([x, 0, foot_h/2]) {\n            // Front foot\n            cube([foot_w, foot_d, foot_h], center=true);\n            \n            // Rear foot\n            translate([0, body_d - foot_d, 0])\n                cube([foot_w, foot_d, foot_h], center=true);\n        }\n    }\n}\n\nmodule bellows() {\n    translate([body_w/2 - 5, 0, body_h/2])\n        difference() {\n            cube([10, body_d - 10, body_h - 5], center=true);\n            translate([0, 0, body_h/2 - 5])\n                cube([8, body_d - 12, body_h - 10], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    body();\n    keyboard();\n    pipes();\n    music_stand();\n    feet();\n    bellows();\n}",
    "renders": true
  },
  {
    "musical_instrument": "regals",
    "openscad_code": "// Realistic medium-complexity regal (shelf unit)\n// Overall footprint: 100mm wide × 40mm deep × 80mm tall\n// Wall thickness: 2 mm everywhere for reliable FDM printing\n\n$fn = 32;       // Smooth curves for realistic look\n\n// Main module\nmodule regal() {\n    // Vertical side panels\n    side_panel(true);\n    side_panel(false);\n\n    // Horizontal shelves\n    for (y = [20, 45, 70]) {\n        translate([0, 0, y]) shelf();\n    }\n\n    // Back panel for rigidity\n    back_panel();\n\n    // Optional shelf brackets for realism\n    for (y = [20, 45, 70]) {\n        shelf_brackets(y);\n    }\n}\n\n// Left (mirror=false) or right (mirror=true) side panel\nmodule side_panel(mirror) {\n    mirror([mirror ? 1 : 0, 0, 0])\n    translate([mirror ? 50 : -50, 0, 0])\n    difference() {\n        // Outer shape\n        translate([0, 20, 40])\n        cube([2, 40, 80], center = true);\n\n        // Round the top edge slightly\n        translate([0, 20, 80])\n        rotate([90, 0, 0])\n        cylinder(h = 40, r = 2, center = true);\n    }\n}\n\n// Shelf board\nmodule shelf() {\n    difference() {\n        // Main board\n        translate([0, 20, 0])\n        cube([100, 40, 2], center = true);\n\n        // Front edge rounding\n        translate([0, 0, 1])\n        rotate([90, 0, 0])\n        cube([100, 2, 20], center = true);\n    }\n}\n\n// Thin back panel to keep the frame square\nmodule back_panel() {\n    translate([0, 39, 40])\n    cube([96, 2, 78], center = true);\n}\n\n// Decorative brackets under each shelf\nmodule shelf_brackets(height) {\n    // Left bracket\n    bracket_pair(height, -45);\n\n    // Right bracket\n    bracket_pair(height, 45);\n}\n\nmodule bracket_pair(height, x) {\n    translate([x, 20, height - 1])\n    difference() {\n        // Main wedge shape\n        rotate([90, 0, 0])\n        linear_extrude(height = 2)\n        polygon(points = [[0,0], [8,0], [0,6]]);\n\n        // Screw hole for realism\n        translate([4, 3, -1])\n        rotate([0, 90, 0])\n        cylinder(h = 4, r = 1, center = true);\n    }\n}\n\n// Render the entire regal\nregal();",
    "renders": true
  },
  {
    "musical_instrument": "regalstop",
    "openscad_code": "// Regal Stop (Organ Stop Knob) - Realistic Style, Medium Complexity\n// Overall height ~60 mm, designed for 3D printing without supports\n\n$fa = 2;\n$fs = 0.5;\n\n// Main parameters\nstem_d = 12;\nstem_h = 35;\nknob_d = 24;\nknob_h = 20;\nlabel_w = 16;\nlabel_h = 8;\nlabel_depth = 1;\n\n// Stem module\nmodule stem() {\n    // Main cylindrical stem\n    cylinder(h = stem_h, d = stem_d, center = false);\n    \n    // Bottom chamfer for easy insertion\n    translate([0, 0, 0])\n    cylinder(h = 2, d1 = stem_d - 2, d2 = stem_d, center = false);\n}\n\n// Knob module\nmodule knob() {\n    // Main body - slightly tapered cylinder\n    cylinder(h = knob_h, d1 = knob_d, d2 = knob_d - 2, center = false);\n    \n    // Top dome\n    translate([0, 0, knob_h])\n    sphere(d = knob_d, $fn = 50);\n    \n    // Groove detail around middle\n    translate([0, 0, knob_h * 0.6])\n    difference() {\n        cylinder(h = 2, d = knob_d + 0.5, center = false);\n        cylinder(h = 3, d = knob_d - 2, center = false);\n    }\n}\n\n// Label plate module\nmodule label() {\n    // Recessed area for label\n    translate([0, 0, knob_h * 0.8])\n    difference() {\n        cube([label_w, label_depth, label_h], center = true);\n        // Carved recess\n        translate([0, -label_depth/2 + 0.2, 0])\n        cube([label_w - 2, label_depth + 0.2, label_h - 2], center = true);\n    }\n}\n\n// Grip ridges for fingers\nmodule grip_ridges() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([0, knob_d/2 - 3, knob_h/2])\n        cube([2, 6, knob_h * 0.8], center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\nunion() {\n    // Stem\n    stem();\n    \n    // Knob\n    translate([0, 0, stem_h])\n    union() {\n        knob();\n        label();\n        grip_ridges();\n    }\n}\n\n// Optional: small alignment dot on top\ntranslate([0, 0, stem_h + knob_h + 8])\nsphere(d = 3, $fn = 20);",
    "renders": true
  },
  {
    "musical_instrument": "regalpipe",
    "openscad_code": "// RegalPipe – realistic, medium-complexity\n// Overall length ≈ 90 mm, no steep overhangs, 1 mm wall thickness\n// Print in two halves for best results\n\n$fn = 36;                      // smooth curves\nwall = 1;                      // uniform wall thickness\n\nmodule bowl() {\n    // outer bowl: 20 mm dia sphere squash\n    difference() {\n        scale([1, 1, 0.75]) sphere(d = 20);\n        // hollow cavity\n        translate([0, 0, -2]) scale([1, 1, 0.6])\n            sphere(d = 18);\n    }\n    // flat bottom for printing\n    translate([0, 0, -7.5]) cylinder(h = wall, d = 15, $fn = 6);\n}\n\nmodule stem() {\n    // straight section\n    cylinder(h = 50, d1 = 8, d2 = 6, center = false);\n    // hollow bore\n    translate([0, 0, -1])\n        cylinder(h = 52, d1 = 6, d2 = 4, center = false);\n}\n\nmodule mouthpiece() {\n    // gentle flare\n    hull() {\n        cylinder(h = 12, d = 6);\n        translate([0, 0, 12])\n            cylinder(h = 0.1, d = 12);\n    }\n    // bit hole\n    translate([0, 0, -1])\n        cylinder(h = 15, d = 3.5);\n}\n\nmodule shank() {\n    // curved transition from bowl to stem\n    union() {\n        // outer\n        rotate([0, 90, 0])\n            cylinder(h = 15, d1 = 10, d2 = 8);\n        // inner\n        translate([0, 0, wall])\n            rotate([0, 90, 0])\n                cylinder(h = 15 - wall, d1 = 8, d2 = 6);\n    }\n}\n\n// decorative ring at stem/mouthpiece junction\nmodule ring() {\n    for (z = [0 : 1.5 : 4.5])\n        translate([0, 0, 50 + z])\n            cylinder(h = 1, d = 8.5);\n}\n\n// Carved lines on bowl for realism\nmodule carvings() {\n    for (a = [0 : 45 : 315]) {\n        rotate([0, 0, a])\n            translate([0, 9.5, -2])\n                cube([0.5, 1, 4], center = true);\n    }\n}\n\nmodule regalpipe() {\n    union() {\n        // bowl assembly\n        translate([0, 0, 0]) {\n            bowl();\n            carvings();\n            // attach shank\n            translate([0, 7.5, 0])\n                rotate([0, -90, 0])\n                    shank();\n        }\n\n        // stem\n        translate([0, 15, 0])\n            rotate([0, -90, 0])\n                stem();\n\n        // mouthpiece\n        translate([0, 65, 0])\n            rotate([0, -90, 0])\n                mouthpiece();\n\n        // ring\n        ring();\n    }\n}\n\n// Render\nregalpipe();",
    "renders": true
  },
  {
    "musical_instrument": "theremin",
    "openscad_code": "// Realistic Theremin - Medium complexity\n// Based on classic Moog Etherwave design\n\n$fn = 32;\nbody_width = 40;\nbody_depth = 30;\nbody_height = 15;\nleg_height = 8;\nwall_thickness = 2;\n\n// Main body with rounded edges\nmodule theremin_body() {\n    difference() {\n        // Main box with filleted edges\n        minkowski() {\n            cube([body_width - 4, body_depth - 4, body_height - 2], center = true);\n            sphere(2);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, -1])\n        cube([body_width - 8, body_depth - 8, body_height], center = true);\n        \n        // Top panel cutout\n        translate([0, 0, body_height/2 - 1])\n        cube([body_width - 6, body_depth - 6, 2], center = true);\n    }\n}\n\n// Control panel face\nmodule control_panel() {\n    translate([0, 0, body_height/2])\n    difference() {\n        cube([body_width - 6, body_depth - 6, 1], center = true);\n        \n        // Volume knob hole\n        translate([-body_width/4, 0, 0])\n        cylinder(h = 2, r = 3, center = true);\n        \n        // Pitch knob hole\n        translate([body_width/4, 0, 0])\n        cylinder(h = 2, r = 3, center = true);\n    }\n}\n\n// Vertical pitch antenna\nmodule pitch_antenna() {\n    translate([0, body_depth/2 + 5, body_height/2 + 20])\n    union() {\n        // Base\n        cylinder(h = 3, r1 = 4, r2 = 3);\n        \n        // Main rod\n        translate([0, 0, 25])\n        cylinder(h = 50, r = 1.5);\n        \n        // Ball tip\n        translate([0, 0, 50])\n        sphere(2.5);\n    }\n}\n\n// Horizontal volume antenna\nmodule volume_antenna() {\n    rotate([0, 90, 0])\n    translate([0, 0, body_width/2 + 5])\n    union() {\n        // Base\n        rotate([0, -90, 0])\n        cylinder(h = 3, r1 = 4, r2 = 3);\n        \n        // Curved loop\n        translate([0, 15, 0])\n        rotate([0, 90, 0])\n        difference() {\n            torus(15, 2);\n            translate([0, 0, -2])\n            cube([30, 30, 4], center = true);\n        }\n    }\n}\n\n// Support legs\nmodule legs() {\n    for(i = [-1, 1])\n    for(j = [-1, 1]) {\n        translate([i * (body_width/2 - 5), j * (body_depth/2 - 5), -leg_height/2])\n        cylinder(h = leg_height, r = 2);\n    }\n}\n\n// Control knobs\nmodule knobs() {\n    // Volume knob\n    translate([-body_width/4, 0, body_height/2 + 2])\n    cylinder(h = 4, r = 3);\n    \n    // Pitch knob\n    translate([body_width/4, 0, body_height/2 + 2])\n    cylinder(h = 4, r = 3);\n}\n\n// Assemble the theremin\nunion() {\n    theremin_body();\n    control_panel();\n    pitch_antenna();\n    volume_antenna();\n    legs();\n    knobs();\n}",
    "renders": true
  },
  {
    "musical_instrument": "vocoder",
    "openscad_code": "// Realistic-style 3D-printable vocoder\n// Approx 80 mm wide, 60 mm deep, 25 mm high\n// Medium complexity: 100+ lines, recognizable features\n\n$fa = 1;\n$fs = 0.5;\n\n// Overall dimensions\nwidth  = 80;\ndepth  = 60;\nheight = 25;\n\n// Wall thickness for 3D print\nwall = 1.6;\n\n// Main enclosure\nmodule enclosure() {\n    difference() {\n        // Solid base block\n        cube([width, depth, height], center=true);\n\n        // Hollow cavity\n        translate([0, 0, 1])\n        cube([width - 2*wall, depth - 2*wall, height - 2], center=true);\n    }\n}\n\n// Front panel with controls\nmodule front_panel() {\n    difference() {\n        // Panel plate\n        translate([0, depth/2 + 0.2, 0])\n        cube([width, 0.4, height], center=true);\n\n        // Screw holes (4 corners)\n        for (x = [-width/2 + 5, width/2 - 5])\n            for (y = [-height/2 + 5, height/2 - 5])\n                translate([x, depth/2 + 0.4, y])\n                cylinder(h=1, d=2.5, center=true);\n    }\n}\n\n// Sliders (8 vertical faders)\nmodule sliders() {\n    slider_w = 4;\n    slider_h = 18;\n    spacing = 9;\n    start_x = -(8-1)*spacing/2;\n\n    for (i = [0:7]) {\n        translate([start_x + i*spacing, depth/2 + 0.6, 0])\n        union() {\n            // Track\n            cube([slider_w, 1, slider_h], center=true);\n            // Knob\n            translate([0, 1, 0])\n            cube([slider_w*1.5, 2, 4], center=true);\n        }\n    }\n}\n\n// Encoders (3 rotary knobs)\nmodule encoders() {\n    knob_r = 4;\n    knob_h = 3;\n    spacing = 12;\n    start_x = -(3-1)*spacing/2;\n\n    for (i = [0:2]) {\n        translate([start_x + i*spacing, depth/2 - 10, height/2 - 4])\n        union() {\n            // Base\n            cylinder(h=2, r=knob_r*1.1, center=true);\n            // Knob\n            translate([0,0,2])\n            cylinder(h=knob_h, r=knob_r, center=true);\n            // Indicator line\n            translate([knob_r*0.8,0,2])\n            cube([knob_r*0.4, 0.5, knob_h], center=true);\n        }\n    }\n}\n\n// Display screen\nmodule display() {\n    translate([0, depth/2 - 5, height/2 - 8])\n    difference() {\n        // Bezel\n        cube([40, 1, 12], center=true);\n        // Screen recess\n        translate([0,0,0.5])\n        cube([36, 0.5, 10], center=true);\n    }\n}\n\n// Ventilation slots\nmodule vents() {\n    slot_w = 1;\n    slot_h = 2;\n    spacing = 3;\n    num_slots = 8;\n    start_x = -(num_slots-1)*spacing/2;\n\n    // Top vents\n    for (i = [0:num_slots-1]) {\n        translate([start_x + i*spacing, 0, height/2 + 0.1])\n        cube([slot_w, depth - 10, slot_h], center=true);\n    }\n}\n\n// I/O jacks\nmodule io_jacks() {\n    // Left side: 4 jacks\n    for (i = [0:3]) {\n        translate([-width/2 - 1, -depth/4 + i*8, height/2 - 8 - i*3])\n        rotate([90,0,0])\n        cylinder(h=4, r=2.5, center=true);\n    }\n    \n    // Right side: 2 jacks\n    for (i = [0:1]) {\n        translate([width/2 + 1, -depth/4 + i*12, height/2 - 8])\n        rotate([90,0,0])\n        cylinder(h=4, r=3.5, center=true);\n    }\n}\n\n// Assembly\nenclosure();\nfront_panel();\nsliders();\nencoders();\ndisplay();\nvents();\nio_jacks();",
    "renders": true
  },
  {
    "musical_instrument": "oscillator",
    "openscad_code": "// Realistic Crystal Oscillator (HC-49/U style) with 3D-printable design\n// Roughly 60 mm long, designed for FDM printing without support\n\n$fn = 50;  // Smooth curves\n\n// Overall dimensions\nosc_length  = 60;\nosc_width   = 11;\nosc_height  = 4.5;\nlead_pitch  = 4.88;\nlead_diam   = 0.6;\ncrystal_d   = 8;\ncrystal_h   = 3;\n\nmodule oscillator_body() {\n    // Main molded epoxy package with slight draft for mold release\n    hull() {\n        // Bottom\n        translate([0, 0, -0.1])\n            cube([osc_length, osc_width, osc_height], center = true);\n        // Top (slightly narrower for draft)\n        translate([0, 0, 0.1])\n            cube([osc_length - 1, osc_width - 1, osc_height], center = true);\n    }\n}\n\nmodule crystal_housing() {\n    // Metallic can visible through top window\n    translate([0, 0, 0.5])\n        cylinder(d = crystal_d, h = crystal_h, $fn = 6);\n}\n\nmodule package_marking() {\n    // Simple recessed dot indicating pin 1\n    translate([osc_length/2 - 2, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(d = 1, h = 0.3, $fn = 20);\n}\n\nmodule leads() {\n    // Two through-hole leads with 45° bend\n    for (x = [-lead_pitch/2, lead_pitch/2]) {\n        translate([x, 0, -osc_height/2 - 3])\n            union() {\n                // Vertical pin\n                cylinder(d = lead_diam, h = 3);\n                // 45° bend\n                translate([0, 0, 3])\n                    rotate([0, 90, 0])\n                        cylinder(d = lead_diam, h = 3);\n                // Horizontal pad\n                translate([0, 0, 3])\n                    rotate([0, 90, 0])\n                        translate([1.5, 0, 0])\n                            cube([3, lead_diam, lead_diam], center = true);\n            }\n    }\n}\n\nmodule top_window() {\n    // Rectangular window showing crystal\n    difference() {\n        crystal_housing();\n        translate([0, 0, -0.1])\n            cube([crystal_d - 1, crystal_d - 1, crystal_h + 0.2], center = true);\n    }\n}\n\nmodule assembly() {\n    difference() {\n        union() {\n            oscillator_body();\n            package_marking();\n            leads();\n        }\n        // Remove marking recess\n        translate([osc_length/2 - 2, 0, 0.2])\n            rotate([90, 0, 0])\n                cylinder(d = 1, h = 1, $fn = 20);\n    }\n    // Add crystal housing on top\n    translate([0, 0, crystal_h/2 + 0.5])\n        top_window();\n}\n\n// Main assembly\nassembly();",
    "renders": true
  },
  {
    "musical_instrument": "filter",
    "openscad_code": "// Realistic 3D printable water filter housing with inlet/outlet ports and ribbed grip\n// Approx. 70 mm tall, 50 mm diameter\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main dimensions\nhousing_d = 50;\nhousing_h = 60;\ncap_h = 12;\nport_d = 12;\nport_h = 15;\nwall_t = 2.5;\ngrip_ribs = 18;\n\n// Central filter housing\nmodule housing() {\n    difference() {\n        // Outer shell with slight taper\n        cylinder(h = housing_h, d1 = housing_d, d2 = housing_d * 0.95);\n        \n        // Inner cavity\n        translate([0, 0, -0.1])\n            cylinder(h = housing_h + 0.2, d = housing_d - 2*wall_t);\n        \n        // Inlet port hole\n        rotate([90, 0, 0])\n            translate([0, housing_h/2 - 2, 0])\n                cylinder(h = housing_d/2, d = port_d - wall_t*2, $fn=20);\n        \n        // Outlet port hole\n        rotate([-90, 0, 0])\n            translate([0, housing_h/2 - 2, 0])\n                cylinder(h = housing_d/2, d = port_d - wall_t*2, $fn=20);\n    }\n}\n\n// Top cap with threads\nmodule cap() {\n    difference() {\n        // Cap body\n        cylinder(h = cap_h, d = housing_d + wall_t*2);\n        \n        // Inner cavity\n        translate([0, 0, -0.1])\n            cylinder(h = cap_h + 0.2, d = housing_d);\n        \n        // Central hole for filter access\n        translate([0, 0, cap_h/2])\n            cylinder(h = cap_h, d = housing_d - wall_t*4);\n    }\n}\n\n// Inlet/outlet ports\nmodule port(is_inlet = true) {\n    rotate(is_inlet ? [90, 0, 0] : [-90, 0, 0])\n    translate([0, housing_h/2 - 2, 0])\n    difference() {\n        // Port tube\n        cylinder(h = port_h, d = port_d);\n        \n        // Internal bore\n        translate([0, 0, -0.1])\n            cylinder(h = port_h + 0.2, d = port_d - wall_t*2);\n    }\n}\n\n// Grip ribs around housing\nmodule grip_ribs() {\n    for (i = [0 : grip_ribs-1]) {\n        rotate([0, 0, i * 360/grip_ribs])\n        translate([housing_d/2 - wall_t/2, 0, housing_h/2])\n        difference() {\n            // Rib body\n            cube([wall_t*1.5, 3, housing_h - 10], center=true);\n            \n            // Taper ends\n            translate([0, 0, (housing_h - 10)/2])\n                cube([wall_t*1.5 + 1, 4, 3], center=true);\n            translate([0, 0, -(housing_h - 10)/2])\n                cube([wall_t*1.5 + 1, 4, 3], center=true);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    housing();\n\ntranslate([0, 0, housing_h])\n    cap();\n\ntranslate([0, 0, 0])\n    port(true);\n\ntranslate([0, 0, 0])\n    port(false);\n\ntranslate([0, 0, 0])\n    grip_ribs();\n\n// Bottom base plate for stability\ntranslate([0, 0, -1])\n    cylinder(h = 2, d = housing_d + 2);",
    "renders": true
  },
  {
    "musical_instrument": "mixer",
    "openscad_code": "// Realistic Medium-Complexity Kitchen Stand Mixer\n// Overall dimensions ~70×65×90 mm\n\n$fn = 32;\n\nmodule roundedCube(size, radius) {\n    // Helper for rounded cubes\n    minkowski() {\n        cube([size.x-2*radius, size.y-2*radius, size.z-2*radius], center=true);\n        sphere(r=radius);\n    }\n}\n\nmodule base() {\n    // Main base with slight taper\n    difference() {\n        cylinder(h=15, r1=25, r2=22, center=true);\n        // Cable hole\n        translate([20,0,-7])\n            rotate([90,0,0])\n                cylinder(h=10, r=4, center=true);\n    }\n    // Rubber feet\n    for(a=[0,120,240])\n        rotate([0,0,a])\n            translate([18,0,-7.5])\n                cylinder(h=2, r=3, center=true);\n}\n\nmodule bowl() {\n    // Stainless-steel mixing bowl\n    difference() {\n        // Outer bowl with rounded bottom\n        rotate_extrude()\n            translate([20,0,0])\n                circle(r=5);\n        // Inner cavity\n        rotate_extrude()\n            translate([17,0,0])\n                circle(r=3);\n        // Flat bottom inside\n        translate([0,0,-8])\n            cube([40,40,3], center=true);\n    }\n    // Bowl rim lip\n    translate([0,0,10])\n        cylinder(h=2, r=22, r1=22, r2=21);\n}\n\nmodule head() {\n    // Main motor housing\n    difference() {\n        roundedCube([40,30,35], 5);\n        // Vent slots on back\n        for(i=[-12:6:12])\n            translate([0,16,i])\n                cube([30,2,3], center=true);\n    }\n    \n    // Control knob\n    translate([0,18,10])\n        difference() {\n            cylinder(h=8, r=6);\n            cylinder(h=9, r=3);\n        }\n    \n    // Logo badge\n    translate([0,0,18])\n        cube([12,2,6], center=true);\n}\n\nmodule arm() {\n    // Tilting motor arm\n    difference() {\n        union() {\n            // Main arm body\n            translate([0,0,10])\n                roundedCube([30,25,20], 3);\n            \n            // Pivot hinge\n            translate([-15,0,0])\n                rotate([0,90,0])\n                    cylinder(h=30, r=5);\n        }\n        // Hollow center\n        translate([0,0,10])\n            roundedCube([25,20,15], 2);\n    }\n}\n\nmodule mixer() {\n    base();\n    \n    // Support column\n    translate([0,-20,7.5])\n        cylinder(h=50, r=8);\n    \n    // Arm hinge\n    translate([0,-20,55])\n        rotate([0,90,0])\n            cylinder(h=20, r=5);\n    \n    arm();\n    \n    // Head assembly\n    translate([0,-20,75])\n        rotate([-30,0,0])\n            head();\n    \n    // Bowl placement\n    translate([0,15,-3])\n        bowl();\n    \n    // Beater attachment\n    translate([0,-20,55])\n        rotate([-30,0,0])\n            translate([0,0,-15])\n                cylinder(h=25, r=2);\n    \n    // Speed indicator LEDs\n    for(i=[-1,0,1])\n        translate([5+i*3,18,10])\n            sphere(r=1.2);\n}\n\nmixer();",
    "renders": true
  },
  {
    "musical_instrument": "modulator",
    "openscad_code": "// RF Modulator – realistic, medium-complexity, 3D-printable\n// Overall size ≈ 80 mm × 60 mm × 32 mm\n\n// Wall thickness for printability\nwall = 1.6;\n\n// Main enclosure shell\nmodule enclosure() {\n    difference() {\n        // Outer box\n        cube([80, 60, 32], center=true);\n        // Hollow out\n        translate([0, 0, 1.5])\n            cube([80 - 2*wall, 60 - 2*wall, 30], center=true);\n    }\n}\n\n// Top cover with vents\nmodule top_cover() {\n    difference() {\n        translate([0, 0, 16])\n            cube([80, 60, 2], center=true);\n        // Vent slots\n        for (x = [-35:10:35])\n            translate([x, 0, 16])\n                cube([2, 60 - 2*wall, 3], center=true);\n    }\n}\n\n// Coaxial F-type connector\nmodule f_connector() {\n    union() {\n        // Main body\n        translate([0, 0, -3])\n            cylinder(h=6, d1=10, d2=10, $fn=32);\n        // Threaded barrel\n        translate([0, 0, -3])\n            cylinder(h=8, d1=7, d2=7, $fn=32);\n    }\n}\n\n// RCA composite-video jack\nmodule rca_jack() {\n    union() {\n        // Outer shell\n        translate([0, 0, -6])\n            cylinder(h=12, d1=9, d2=9, $fn=32);\n        // Center pin\n        translate([0, 0, -4])\n            cylinder(h=8, d1=2, d2=2, $fn=16);\n    }\n}\n\n// Power jack barrel\nmodule power_jack() {\n    translate([0, 0, -7])\n        cylinder(h=14, d1=5.5, d2=5.5, $fn=32);\n}\n\n// Indicator LED bezel\nmodule led_bezel() {\n    difference() {\n        translate([0, 0, -4])\n            cylinder(h=8, d1=6, d2=6, $fn=32);\n        translate([0, 0, -5])\n            cylinder(h=10, d1=3, d2=3, $fn=32);\n    }\n}\n\n// Mounting feet (simple rounded)\nmodule feet() {\n    for (i = [-1, 1], j = [-1, 1])\n        translate([i*35, j*25, -17])\n            cylinder(h=4, d1=6, d2=6, $fn=16);\n}\n\n// Assembly\nunion() {\n    enclosure();\n    top_cover();\n    \n    // RF input F-connector\n    translate([-40, 0, 0])\n        rotate([0, 90, 0])\n            f_connector();\n    \n    // RF output F-connector\n    translate([40, 0, 0])\n        rotate([0, 90, 0])\n            f_connector();\n    \n    // Composite video RCA\n    translate([0, -30, 0])\n        rotate([0, 90, 0])\n            rca_jack();\n    \n    // Audio L RCA\n    translate([-10, -30, 0])\n        rotate([0, 90, 0])\n            rca_jack();\n    \n    // Audio R RCA\n    translate([10, -30, 0])\n        rotate([0, 90, 0])\n            rca_jack();\n    \n    // Power jack\n    translate([0, 30, 0])\n        rotate([0, 90, 0])\n            power_jack();\n    \n    // Power LED\n    translate([-15, 30, 0])\n        rotate([0, 90, 0])\n            led_bezel();\n    \n    feet();\n}",
    "renders": true
  },
  {
    "musical_instrument": "envelope",
    "openscad_code": "// Realistic 3D printable envelope\n// Overall dimensions: 90 mm x 50 mm x 5 mm\n\n// Envelope parameters\nenvelope_length = 90;\nenvelope_width = 50;\nenvelope_thickness = 2;\nflap_height = 25;\nseam_margin = 2;\n\n// Paper thickness simulation\npaper_thickness = 0.8;\n\n// Back face of envelope\nmodule back_face() {\n    difference() {\n        // Main back rectangle\n        translate([0, 0, paper_thickness/2])\n            cube([envelope_length, envelope_width, paper_thickness], center=true);\n        \n        // Remove center for hollow envelope\n        translate([0, 0, paper_thickness/2])\n            cube([envelope_length - 2*seam_margin, envelope_width - 2*seam_margin, paper_thickness + 0.1], center=true);\n    }\n}\n\n// Front face of envelope\nmodule front_face() {\n    difference() {\n        // Main front rectangle\n        translate([0, 0, -paper_thickness/2])\n            cube([envelope_length, envelope_width, paper_thickness], center=true);\n        \n        // Remove center for hollow envelope\n        translate([0, 0, -paper_thickness/2])\n            cube([envelope_length - 2*seam_margin, envelope_width - 2*seam_margin, paper_thickness + 0.1], center=true);\n    }\n}\n\n// Side seam\nmodule side_seam(position) {\n    translate([position * (envelope_length/2 - seam_margin/2), 0, 0])\n        cube([seam_margin, envelope_width, envelope_thickness], center=true);\n}\n\n// Bottom seam\nmodule bottom_seam() {\n    translate([0, -(envelope_width/2 - seam_margin/2), 0])\n        cube([envelope_length, seam_margin, envelope_thickness], center=true);\n}\n\n// Envelope flap with curved top\nmodule envelope_flap() {\n    difference() {\n        // Main triangular flap\n        translate([0, envelope_width/2 + flap_height/2 - paper_thickness, envelope_thickness/2])\n            cube([envelope_length, flap_height, envelope_thickness], center=true);\n        \n        // Create triangular shape\n        translate([0, envelope_width/2 + flap_height/2 - paper_thickness, -1])\n            rotate([0, 0, 0])\n            cylinder(h=envelope_thickness + 2, r1=envelope_length/2 - seam_margin, r2=0, $fn=50);\n        \n        // Remove center for hollow flap\n        translate([0, envelope_width/2 + flap_height/2 - paper_thickness, envelope_thickness/2])\n            cube([envelope_length - 2*seam_margin, flap_height - seam_margin, envelope_thickness + 0.1], center=true);\n    }\n}\n\n// Paper fold lines for realism\nmodule fold_lines() {\n    color(\"gray\", 0.3) {\n        // Vertical fold lines\n        for (x = [-envelope_length/3, envelope_length/3]) {\n            translate([x, 0, envelope_thickness/2 + 0.05])\n                cube([0.5, envelope_width, 0.1], center=true);\n        }\n        \n        // Horizontal fold line\n        translate([0, 0, envelope_thickness/2 + 0.05])\n            cube([envelope_length, 0.5, 0.1], center=true);\n    }\n}\n\n// Main envelope assembly\nunion() {\n    // Back and front faces\n    back_face();\n    front_face();\n    \n    // Side seams\n    side_seam(1);\n    side_seam(-1);\n    \n    // Bottom seam\n    bottom_seam();\n    \n    // Envelope flap\n    envelope_flap();\n    \n    // Realistic fold lines\n    fold_lines();\n}",
    "renders": true
  },
  {
    "musical_instrument": "arpeggiator",
    "openscad_code": "// Realistic style arpeggiator for 3D printing\n// Dimensions in mm, largest dimension ~85 mm\n\n// Overall dimensions\nwidth = 85;\ndepth = 60;\nheight = 15;\n\n// Wall thickness for printing\nwall = 2;\n\n// Base enclosure\nmodule enclosure() {\n    difference() {\n        // Main body\n        cube([width, depth, height], center=true);\n        \n        // Hollow out interior\n        translate([0, 0, 1])\n            cube([width-wall*2, depth-wall*2, height-wall], center=true);\n        \n        // Cable slot at back\n        translate([0, depth/2-wall/2, 0])\n            cube([20, wall, 6], center=true);\n    }\n}\n\n// Rotary encoder knob\nmodule encoder_knob() {\n    difference() {\n        cylinder(h=8, d=12, $fn=32);\n        translate([0, 0, -1])\n            cylinder(h=10, d=3, $fn=16);\n    }\n}\n\n// Push button\nmodule button() {\n    union() {\n        // Button cap\n        translate([0, 0, 2])\n            cylinder(h=3, d=12, $fn=32);\n        \n        // Button stem\n        cylinder(h=4, d=8, $fn=16);\n    }\n}\n\n// Potentiometer knob\nmodule pot_knob() {\n    difference() {\n        cylinder(h=8, d1=16, d2=14, $fn=36);\n        translate([0, 0, -1])\n            cylinder(h=10, d=6, $fn=16);\n        \n        // Indicator line\n        translate([0, 7, 4])\n            cube([2, 1.5, 1]);\n    }\n}\n\n// LED indicator\nmodule led() {\n    union() {\n        // LED body\n        cylinder(h=4, d=5, $fn=16);\n        \n        // Lens\n        translate([0, 0, 4])\n            sphere(d=5, $fn=16);\n    }\n}\n\n// Panel label recess\nmodule label(x, y, w, h) {\n    translate([x, y, height/2-0.5])\n        cube([w, h, 1], center=true);\n}\n\n// Main assembly\nmodule arpeggiator() {\n    // Base enclosure\n    enclosure();\n    \n    // Top panel components\n    translate([0, 0, height/2]) {\n        // Encoder at top left\n        translate([-width/3, -depth/3, 0])\n            rotate([180, 0, 0])\n                encoder_knob();\n        \n        // Mode button\n        translate([width/4, -depth/3, 0])\n            rotate([180, 0, 0])\n                button();\n        \n        // Tempo potentiometer\n        translate([-width/3, 0, 0])\n            rotate([180, 0, 0])\n                pot_knob();\n        \n        // Octave potentiometer\n        translate([width/3, 0, 0])\n            rotate([180, 0, 0])\n                pot_knob();\n        \n        // LED indicators in a row\n        for (i = [-1:1]) {\n            translate([i*12, depth/3, 0])\n                rotate([180, 0, 0])\n                    led();\n        }\n        \n        // Label recesses\n        translate([-width/3, -depth/3-12, 0])\n            label(0, 0, 20, 4);\n        translate([width/4, -depth/3-12, 0])\n            label(0, 0, 15, 4);\n        translate([-width/3, 12, 0])\n            label(0, 0, 20, 4);\n        translate([width/3, 12, 0])\n            label(0, 0, 20, 4);\n    }\n    \n    // Rubber feet\n    for (x = [-width/2+10:width-20:20]) {\n        for (y = [-depth/2+10:depth-20:20]) {\n            translate([x, y, -height/2-2])\n                cylinder(h=2, d=6, $fn=16);\n        }\n    }\n}\n\narpeggiator();",
    "renders": true
  },
  {
    "musical_instrument": "lfo",
    "openscad_code": "// Low-Frequency Oscillator (LFO) Module\n// Realistic style, medium complexity\n\n// Overall dimensions\nlfo_width = 60;\nlfo_depth = 40;\nlfo_height = 12;\n\n// Panel thickness\npanel_t = 2;\n\n// Knob parameters\nknob_d = 8;\nknob_h = 6;\nknob_count = 4;\n\n// Jack parameters\njack_d = 5.5;\njack_h = 6;\njack_count = 2;\n\n// LED parameters\nled_d = 3;\nled_h = 1;\n\n// Switch parameters\nswitch_w = 8;\nswitch_h = 4;\nswitch_d = 6;\n\nmodule main_body() {\n    // Front panel\n    difference() {\n        translate([-lfo_width/2, -lfo_depth/2, 0])\n            cube([lfo_width, lfo_depth, panel_t]);\n        \n        // Potentiometer holes\n        for(i = [0:knob_count-1]) {\n            translate([-lfo_width/2 + 10 + i*15, -lfo_depth/2 + 8, -1])\n                cylinder(h=panel_t+2, d=6.5, $fn=32);\n        }\n        \n        // Jack holes\n        for(i = [0:jack_count-1]) {\n            translate([-lfo_width/2 + 15 + i*30, lfo_depth/2 - 8, -1])\n                cylinder(h=panel_t+2, d=6.5, $fn=32);\n        }\n        \n        // LED hole\n        translate([lfo_width/2 - 10, lfo_depth/2 - 8, -1])\n            cylinder(h=panel_t+2, d=3.5, $fn=16);\n            \n        // Switch hole\n        translate([0, lfo_depth/2 - 8, -1])\n            cube([switch_w+1, switch_d+1, panel_t+2], center=true);\n    }\n    \n    // Main enclosure base\n    translate([-lfo_width/2+5, -lfo_depth/2+5, -lfo_height+panel_t])\n        cube([lfo_width-10, lfo_depth-10, lfo_height-panel_t]);\n    \n    // Mounting holes\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x*lfo_width/2*0.8, y*lfo_depth/2*0.8, -lfo_height+panel_t/2])\n            cylinder(h=lfo_height, d=3.2, $fn=16);\n    }\n}\n\nmodule knobs() {\n    for(i = [0:knob_count-1]) {\n        translate([-lfo_width/2 + 10 + i*15, -lfo_depth/2 + 8, panel_t])\n            cylinder(h=knob_h, d=knob_d, $fn=32);\n            \n        // Indicator line\n        translate([-lfo_width/2 + 10 + i*15, -lfo_depth/2 + 8, panel_t + knob_h + 0.1])\n            rotate([0, 0, 45])\n                cube([1.5, knob_d/2, 0.5]);\n    }\n}\n\nmodule jacks() {\n    for(i = [0:jack_count-1]) {\n        translate([-lfo_width/2 + 15 + i*30, lfo_depth/2 - 8, panel_t])\n            cylinder(h=jack_h, d=jack_d, $fn=32);\n            \n        // Jack collar\n        translate([-lfo_width/2 + 15 + i*30, lfo_depth/2 - 8, panel_t])\n            cylinder(h=2, d=8, $fn=32);\n    }\n}\n\nmodule led() {\n    translate([lfo_width/2 - 10, lfo_depth/2 - 8, panel_t])\n        cylinder(h=led_h, d=led_d, $fn=16);\n}\n\nmodule switch() {\n    translate([0, lfo_depth/2 - 8, panel_t + switch_h/2])\n        cube([switch_w, switch_d, switch_h]);\n    \n    // Switch lever\n    translate([0, lfo_depth/2 - 8 + switch_d/2, panel_t + switch_h + 1])\n        cube([2, 5, 2]);\n}\n\nmodule labeling() {\n    // Panel label boxes (recessed)\n    translate([-lfo_width/2 + 5, -lfo_depth/2 + 15, panel_t - 0.2])\n        cube([lfo_width - 10, 3, 0.2]);\n        \n    translate([-lfo_width/2 + 5, lfo_depth/2 - 12, panel_t - 0.2])\n        cube([lfo_width - 10, 3, 0.2]);\n}\n\n// Assemble the LFO\nunion() {\n    main_body();\n    knobs();\n    jacks();\n    led();\n    switch();\n    labeling();\n}",
    "renders": true
  },
  {
    "musical_instrument": "reverb",
    "openscad_code": "// Realistic spring reverb tank module (medium complexity)\n// Approx 80 mm x 30 mm x 25 mm\n\n$fn = 48;\n\n// Overall shell\nmodule reverb_shell() {\n    difference() {\n        // Main housing\n        translate([0, 0, 12.5])\n            cube([80, 30, 25], center = true);\n        \n        // Hollow interior\n        translate([0, 0, 12.5])\n            cube([76, 26, 23], center = true);\n        \n        // Input jack hole (left side)\n        translate([0, 15, 12.5])\n            rotate([90, 0, 0])\n            cylinder(h = 5, d = 6.5, center = true);\n        \n        // Output jack hole (right side)\n        translate([80, 15, 12.5])\n            rotate([90, 0, 0])\n            cylinder(h = 5, d = 6.5, center = true);\n    }\n}\n\n// Mounting brackets\nmodule mounting_brackets() {\n    for (x = [10, 70]) {\n        translate([x, 0, 0]) {\n            // Base plate\n            translate([0, 0, 2])\n                cube([15, 30, 4], center = true);\n            \n            // Screw hole\n            translate([0, 0, 2])\n                cylinder(h = 5, d = 3.5, center = true);\n        }\n    }\n}\n\n// Spring anchors (simulated springs inside)\nmodule spring_anchors() {\n    for (x = [10:15:70]) {\n        // Input transducer\n        translate([x, 7.5, 12.5])\n            cylinder(h = 8, d = 6, center = true);\n        \n        // Output transducer\n        translate([x, -7.5, 12.5])\n            cylinder(h = 8, d = 6, center = true);\n        \n        // Spring connector posts\n        translate([x, 0, 6])\n            cylinder(h = 12, d = 2);\n    }\n}\n\n// Ventilation slots\nmodule ventilation_slots() {\n    for (y = [-10:5:10]) {\n        translate([40, y, 25])\n            cube([30, 2, 2], center = true);\n    }\n}\n\n// Label area\nmodule label_area() {\n    translate([40, 15, 24.9])\n        cube([20, 8, 0.5], center = true);\n}\n\n// Assembly\nunion() {\n    reverb_shell();\n    mounting_brackets();\n    spring_anchors();\n    ventilation_slots();\n    label_area();\n}",
    "renders": true
  },
  {
    "musical_instrument": "compressor",
    "openscad_code": "// Realistic 3D printable air compressor\n// Size: 80 mm long, 40 mm wide, 50 mm tall\n$fn=32;\n\n// Main body\nmodule compressor_body() {\n    difference() {\n        // Main tank cylinder\n        translate([0,0,25]) cylinder(h=40, r=20);\n        // Hollow center\n        translate([0,0,5]) cylinder(h=60, r=16);\n        // Bottom drain hole\n        translate([0,0,0]) cylinder(h=5, r=3);\n    }\n}\n\n// Motor housing\nmodule motor() {\n    union() {\n        // Motor cylinder\n        translate([-30,0,25]) cylinder(h=25, r=15);\n        // Motor end cap\n        translate([-30,0,37.5]) cylinder(h=2, r=16);\n        // Cooling fins\n        for(i=[-1:1]) {\n            translate([-30, i*8, 25]) cube([5, 3, 25], center=true);\n        }\n    }\n}\n\n// Compressor head\nmodule compressor_head() {\n    difference() {\n        // Main head block\n        translate([25,0,35]) cube([15, 20, 15], center=true);\n        // Cylinder cavity\n        translate([25,0,35]) cylinder(h=16, r=6);\n    }\n}\n\n// Pressure gauge\nmodule pressure_gauge() {\n    union() {\n        // Gauge body\n        translate([0,25,45]) cylinder(h=8, r=6);\n        // Gauge face\n        translate([0,25,53]) cylinder(h=1, r=7);\n        // Connection pipe\n        translate([0,15,45]) cylinder(h=10, r=3);\n    }\n}\n\n// Safety valve\nmodule safety_valve() {\n    union() {\n        // Valve body\n        translate([0,-25,45]) cylinder(h=12, r=4);\n        // Valve top\n        translate([0,-25,57]) sphere(r=5);\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    for(pos=[[-15,-15], [15,-15], [-15,15], [15,15]]) {\n        translate([pos[0], pos[1], 0]) cylinder(h=3, r=3);\n    }\n}\n\n// Air outlet\nmodule air_outlet() {\n    union() {\n        // Main pipe\n        translate([35,0,35]) cylinder(h=15, r=4);\n        // Quick connect fitting\n        translate([50,0,35]) sphere(r=5);\n    }\n}\n\n// Handle\nmodule handle() {\n    difference() {\n        // Main handle\n        translate([0,0,60]) cube([60, 8, 6], center=true);\n        // Grip hole\n        translate([0,0,60]) cube([50, 10, 8], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    compressor_body();\n    motor();\n    compressor_head();\n    pressure_gauge();\n    safety_valve();\n    feet();\n    air_outlet();\n    handle();\n    \n    // Connecting pipe between motor and head\n    hull() {\n        translate([-15,0,25]) sphere(r=4);\n        translate([25,0,35]) sphere(r=4);\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "phaser",
    "openscad_code": "// Realistic Phaser - Medium Complexity\n// Designed for 3D printing without supports\n\n// Main parameters\nhandle_length = 80;\nhandle_width = 25;\nhandle_thickness = 15;\n\n// Handle with grip texture\nmodule handle() {\n    difference() {\n        // Main handle body\n        cube([handle_width, handle_length, handle_thickness], center=true);\n        \n        // Finger grooves (subtractive)\n        for (i = [0:3]) {\n            translate([0, -25 + i*15, handle_thickness/2 - 1])\n                cube([handle_width - 4, 8, 3], center=true);\n        }\n    }\n    \n    // Grip ridges (additive)\n    for (i = [0:5]) {\n        translate([0, -35 + i*12, handle_thickness/2 + 0.5])\n            cube([handle_width - 2, 2, 2], center=true);\n    }\n}\n\n// Main body housing\nmodule body() {\n    difference() {\n        // Main body\n        translate([0, handle_length/2 + 15, 0])\n            cube([35, 30, 20], center=true);\n        \n        // Power cell slot\n        translate([0, handle_length/2 + 15, 0])\n            cube([28, 25, 16], center=true);\n    }\n    \n    // Control panel\n    translate([0, handle_length/2 + 15, 10])\n        cube([30, 26, 2], center=true);\n}\n\n// Emitter barrel\nmodule barrel() {\n    // Barrel base\n    translate([0, handle_length/2 + 30, 0])\n        rotate([90, 0, 0])\n            cylinder(h=40, r1=12, r2=10, center=true);\n    \n    // Emitter tip\n    translate([0, handle_length/2 + 50, 0])\n        rotate([90, 0, 0])\n            cylinder(h=15, r1=6, r2=4, center=true);\n    \n    // Cooling fins\n    for (i = [0:3]) {\n        translate([0, handle_length/2 + 35 + i*4, 0])\n            rotate([90, 0, 0])\n                cylinder(h=2, r=14, center=true);\n    }\n}\n\n// Trigger guard and trigger\nmodule trigger_assembly() {\n    // Trigger guard\n    difference() {\n        translate([0, handle_length/2 - 10, -5])\n            rotate([90, 0, 0])\n                cylinder(h=20, r=8, center=true);\n        translate([0, handle_length/2 - 10, -5])\n            rotate([90, 0, 0])\n                cylinder(h=20, r=6, center=true);\n    }\n    \n    // Trigger\n    translate([0, handle_length/2 - 5, -8])\n        cube([8, 15, 4], center=true);\n}\n\n// Power cell indicator\nmodule power_indicator() {\n    translate([15, handle_length/2 + 15, 5])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=3, center=true);\n}\n\n// Side control buttons\nmodule control_buttons() {\n    for (i = [0:2]) {\n        translate([-10 + i*10, handle_length/2 + 15, 11])\n            cube([6, 4, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    body();\n    barrel();\n    trigger_assembly();\n    power_indicator();\n    control_buttons();\n}",
    "renders": true
  },
  {
    "musical_instrument": "flanger",
    "openscad_code": "// Realistic Flanger Pedal – OpenSCAD (medium complexity, 3D-printable)\n// All dimensions in mm\n\n// Overall scale factor for quick resizing\nSCALE = 1;\n\n// Basic shell dimensions\nW = 60 * SCALE;   // width\nD = 110 * SCALE;  // depth\nH = 35 * SCALE;   // height\nWALL = 2 * SCALE; // wall thickness\n\n// Foot-switch\nSW_D = 12 * SCALE; // switch diameter\nSW_H = 8 * SCALE;  // switch height\n\n// Knobs\nKNOB_R = 6 * SCALE;\nKNOB_H = 10 * SCALE;\nKNOB_SPACING = 20 * SCALE;\n\n// Jacks\nJACK_R = 6.5 * SCALE;\nJACK_L = 12 * SCALE;\n\n// LED\nLED_R = 3 * SCALE;\nLED_H = 2 * SCALE;\n\n// Battery compartment\nBAT_W = 40 * SCALE;\nBAT_D = 30 * SCALE;\nBAT_H = 15 * SCALE;\n\n// Utility module for rounded box (no overhangs)\nmodule rounded_box(x, y, z, r, center = false) {\n    translate(center ? [-x/2, -y/2, -z/2] : [0, 0, 0])\n    hull() {\n        for(dx = [r, x - r], dy = [r, y - r])\n            translate([dx, dy, 0])\n                cylinder(r = r, h = z, $fn = 16);\n    }\n}\n\n// Main enclosure\nmodule enclosure() {\n    difference() {\n        // Outer shell\n        rounded_box(W, D, H, 5 * SCALE);\n        \n        // Hollow inside\n        translate([WALL, WALL, WALL])\n            rounded_box(W - 2*WALL, D - 2*WALL, H - WALL, 4 * SCALE);\n        \n        // Foot-switch hole top\n        translate([W/2, D*0.75, H])\n            cylinder(r = SW_D/2 + 1, h = WALL + 1, $fn = 32);\n        \n        // LED hole top\n        translate([W*0.25, D*0.75, H])\n            cylinder(r = LED_R + 0.5, h = WALL + 1, $fn = 16);\n        \n        // Knob holes top\n        for(i = [0:2])\n            translate([W*0.75 - KNOB_SPACING * (i-1), D*0.5, H])\n                cylinder(r = KNOB_R + 0.5, h = WALL + 1, $fn = 24);\n        \n        // Input jack hole front\n        translate([0, D*0.2, H/2])\n            rotate([0, 90, 0])\n                cylinder(r = JACK_R + 0.5, h = WALL + 1, $fn = 24);\n        \n        // Output jack hole front\n        translate([W, D*0.2, H/2])\n            rotate([0, 90, 0])\n                cylinder(r = JACK_R + 0.5, h = WALL + 1, $fn = 24);\n        \n        // Battery door bottom\n        translate([W/2 - BAT_W/2, D - BAT_D - WALL*2, 0])\n            cube([BAT_W + 0.2, BAT_D + 0.2, BAT_H + 0.2]);\n    }\n}\n\n// Foot-switch\nmodule foot_switch() {\n    translate([W/2, D*0.75, H])\n        cylinder(d = SW_D, h = SW_H, $fn = 32);\n}\n\n// Knob\nmodule knob() {\n    cylinder(r = KNOB_R, h = KNOB_H, $fn = 24);\n    translate([0, 0, KNOB_H])\n        cylinder(r1 = KNOB_R, r2 = KNOB_R*0.8, h = 2, $fn = 24);\n}\n\n// LED\nmodule led() {\n    translate([W*0.25, D*0.75, H + WALL])\n        cylinder(r = LED_R, h = LED_H, $fn = 16);\n}\n\n// Jack sleeve\nmodule jack() {\n    rotate([0, 90, 0])\n        cylinder(r = JACK_R, h = JACK_L, $fn = 24);\n}\n\n// Battery door\nmodule battery_door() {\n    translate([W/2 - BAT_W/2, D - BAT_D - WALL*2, 0])\n    difference() {\n        cube([BAT_W, BAT_D, BAT_H]);\n        translate([WALL, WALL, WALL])\n            cube([BAT_W - 2*WALL, BAT_D - 2*WALL, BAT_H - WALL]);\n    }\n}\n\n// Assembly\nenclosure();\n\n// Controls\nfoot_switch();\nled();\n\n// Knobs\nfor(i = [0:2])\n    translate([W*0.75 - KNOB_SPACING * (i-1), D*0.5, H + WALL])\n        knob();\n\n// Jacks\ntranslate([0, D*0.2, H/2])\n    jack();\ntranslate([W, D*0.2, H/2])\n    jack();\n\n// Battery door (separate piece)\n// Uncomment the next lines to print the door separately\n// %battery_door();",
    "renders": true
  },
  {
    "musical_instrument": "chorus",
    "openscad_code": "// OpenSCAD code for a \"chorus\" (a choir riser / tiered platform with singers)\n// All dimensions in mm, designed for FDM printing (no overhangs, 2 mm walls)\n// Overall footprint ≈ 90 × 60 × 50 (L×W×H)\n\n$fa = 2; $fs = 1;\n\nmodule riser(count=3, step=15, depth=60, width=90){\n    // Build a stepped riser; each tier is a hollow box\n    wall = 2;\n    for(i=[0:count-1]){\n        h = (i+1)*step;\n        translate([0,0,h-step]){\n            difference(){\n                cube([width, depth, step], center=true);     // outer box\n                translate([0,0,wall])\n                    cube([width-wall*2, depth-wall*2, step], center=true); // hollow\n            }\n        }\n    }\n}\n\nmodule singer(height=28){\n    // Simple stylised standing singer: cylinder body + sphere head\n    body_r = 4;\n    head_r = 3.5;\n    color(\"white\")\n    union(){\n        translate([0,0,height/2])\n            cylinder(h=height, r1=body_r, r2=body_r*0.9, center=true);\n        translate([0,0,height+head_r-1])\n            sphere(r=head_r);\n    }\n}\n\nmodule choir(){\n    // Place singers on riser tiers\n    // Tier 1 (front) 4 singers\n    for(x=[-30,-10,10,30])\n        translate([x,-15,0])\n            singer(height=28);\n    // Tier 2 (middle) 3 singers, raised\n    for(x=[-20,0,20])\n        translate([x,0,15])\n            singer(height=30);\n    // Tier 3 (back) 2 singers, highest\n    for(x=[-15,15])\n        translate([x,15,30])\n            singer(height=32);\n}\n\n// Assemble the scene\nunion(){\n    riser();\n    choir();\n}",
    "renders": true
  },
  {
    "musical_instrument": "distortion",
    "openscad_code": "// Realistic medium-complexity distortion: bent guitar body with neck twist\n// Overall length ~95 mm, printable in one piece, no overhangs >45°\n\n$fn = 32;\n\n// Main body module\nmodule body() {\n    // Central body slab tapered toward edges\n    difference() {\n        hull() {\n            translate([0, 0, 5]) cube([70, 45, 10], center = true);\n            translate([0, 0, 0]) cube([65, 40, 10], center = true);\n        }\n        \n        // Sound hole\n        translate([0, 0, 7]) cylinder(h = 11, r = 12, center = true);\n        \n        // Pickup cavities (realistic placement)\n        for (y = [-12, 0, 12]) {\n            translate([0, y, 5]) cube([8, 6, 11], center = true);\n        }\n    }\n    \n    // Curved top plate\n    for (i = [-35:5:35]) {\n        translate([i, 0, 9.5]) rotate([90, 0, 0])\n            cylinder(h = 1, r1 = 22 - abs(i)/2.5, r2 = 20 - abs(i)/2.5);\n    }\n}\n\n// Neck with progressive twist\nmodule neck() {\n    for (i = [0:9]) {\n        translate([35 + i*5, 0, 5 + i*1.2])\n            rotate([0, 0, i*3.5])\n                scale([1 - i*0.03, 1, 1 - i*0.02])\n                    cube([5, 6 - i*0.4, 2.5], center = true);\n    }\n    \n    // Headstock\n    translate([90, 0, 15]) rotate([0, 0, 30])\n        cube([25, 15, 3], center = true);\n}\n\n// Tuners pegs (realistic mushroom shape)\nmodule tuners() {\n    for (i = [-2:2]) {\n        translate([95, i*5, 15]) rotate([0, 90, 0])\n            cylinder(h = 8, r = 2.5);\n        translate([102, i*5, 15]) sphere(r = 3);\n    }\n}\n\n// Bridge with saddle\nmodule bridge() {\n    translate([-25, 0, 10])\n        union() {\n            cube([15, 40, 3]);\n            translate([0, 0, 1.5]) cube([0.5, 30, 2]);\n        }\n}\n\n// String anchor\nmodule tailpiece() {\n    translate([-35, 0, 7])\n        difference() {\n            cube([10, 25, 4]);\n            for (i = [-2:2]) {\n                translate([5, i*4, 2]) cylinder(h = 5, r = 1.5);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    tuners();\n    bridge();\n    tailpiece();\n}",
    "renders": true
  },
  {
    "musical_instrument": "delay",
    "openscad_code": "// Realistic-style delay pedal – medium complexity\n// Overall size: ~90 mm long × 60 mm wide × 35 mm high\n// Designed for FDM printing: 1.2 mm walls, no steep overhangs\n\n$fn = 36;\n\n// ---------- Parameters ----------\nbody_l = 90;\nbody_w = 60;\nbody_h = 30;\n\ncorner_r = 5;\nwall_t = 1.2;\n\nknob_r = 7;\nknob_h = 6;\nknob_sep = 25;\n\nled_r = 3;\nled_h = 2;\n\nfootswitch_r = 12;\nfootswitch_h = 8;\n\njack_r = 6;\njack_h = 15;\n\nbattery_d = 20;\nbattery_h = 15;\n\nvent_holes = 6;\nvent_d = 3;\nvent_sep = 12;\n\n// ---------- Main body ----------\nmodule body() {\n    difference() {\n        // Outer rounded shell\n        minkowski() {\n            cube([body_l - 2*corner_r, body_w - 2*corner_r, body_h], center = true);\n            sphere(r = corner_r);\n        }\n\n        // Hollow interior\n        translate([0, 0, -wall_t/2])\n            minkowski() {\n                cube([body_l - 2*corner_r - 2*wall_t,\n                      body_w - 2*corner_r - 2*wall_t,\n                      body_h - wall_t], center = true);\n                sphere(r = corner_r - wall_t);\n            }\n\n        // Ventilation slots on top\n        for (i = [-1:1]) {\n            translate([i * vent_sep, 0, body_h/2])\n                cube([vent_d, body_w - 20, vent_d + 2], center = true);\n        }\n    }\n}\n\n// ---------- Knobs ----------\nmodule knob(pos, label) {\n    translate(pos) {\n        difference() {\n            cylinder(r = knob_r, h = knob_h);\n            translate([0, 0, -1])\n                cylinder(r = knob_r - 2, h = knob_h + 2);\n        }\n        // Indicator dot\n        translate([knob_r - 1.5, 0, knob_h])\n            sphere(r = 1);\n    }\n}\n\n// ---------- LED indicator ----------\nmodule led() {\n    translate([body_l/2 - 15, 0, body_h/2 - led_h/2]) {\n        difference() {\n            cylinder(r = led_r + 1, h = led_h);\n            cylinder(r = led_r, h = led_h + 1);\n        }\n    }\n}\n\n// ---------- Footswitch ----------\nmodule footswitch() {\n    translate([0, 0, body_h/2 + footswitch_h/2]) {\n        difference() {\n            cylinder(r = footswitch_r, h = footswitch_h);\n            cylinder(r = footswitch_r - 3, h = footswitch_h + 1);\n        }\n    }\n}\n\n// ---------- Jacks ----------\nmodule jack(pos, angle = 0) {\n    rotate([0, angle, 0])\n    translate(pos) {\n        difference() {\n            cylinder(r = jack_r + 1, h = jack_h);\n            cylinder(r = jack_r - 1, h = jack_h + 1);\n        }\n    }\n}\n\n// ---------- Battery compartment cover ----------\nmodule battery_cover() {\n    translate([0, body_w/2 - 2, 0])\n    difference() {\n        cube([battery_d + 6, 4, battery_h + 6], center = true);\n        translate([0, -1, 0])\n            cube([battery_d, 5, battery_h], center = true);\n    }\n}\n\n// ---------- Assembly ----------\nbody();\n\n// Top controls\nknob([-knob_sep/2, 0, body_h/2 + knob_h/2], \"Time\");\nknob([knob_sep/2, 0, body_h/2 + knob_h/2], \"Feedback\");\nled();\nfootswitch();\n\n// Side I/O\njack([-body_l/2 - jack_h/2, body_w/3, 0], 90);   // Input\njack([-body_l/2 - jack_h/2, -body_w/3, 0], 90);   // Output\njack([body_l/2 + jack_h/2, 0, 0], -90);           // Power\n\n// Bottom hatch\nbattery_cover();",
    "renders": true
  },
  {
    "musical_instrument": "bitcrusher",
    "openscad_code": "// Realistic bit-crusher pedal, medium complexity\n// 3D-print ready, no support, 0.8 mm wall thickness assumed\n\n// Overall outer dimensions: 100 x 60 x 35 mm\n\n// Main enclosure shell\ndifference() {\n    // Base box\n    translate([0, 0, 10])\n        cube([100, 60, 25], center = true);\n\n    // Hollow cavity\n    translate([0, 0, 10])\n        cube([96, 56, 24], center = true);\n}\n\n// Bottom plate\ntranslate([0, 0, 0.5])\n    cube([100, 60, 1], center = true);\n\n// Front face plate\ntranslate([0, 30, 22.5])\n    cube([100, 1, 25], center = true);\n\n// Rear face plate\ntranslate([0, -30, 22.5])\n    cube([100, 1, 25], center = true);\n\n// Side walls\ntranslate([50, 0, 22.5])\n    cube([1, 60, 25], center = true);\ntranslate([-50, 0, 22.5])\n    cube([1, 60, 25], center = true);\n\n// Foot switch\nmodule foot_switch() {\n    difference() {\n        // Switch body\n        translate([0, 0, 2.5])\n            cube([24, 16, 5], center = true);\n        // Spring cavity\n        translate([0, 0, 5])\n            cylinder(h = 3, r = 5, center = true, $fn = 20);\n    }\n    // Top cap\n    translate([0, 0, 5.5])\n        cube([26, 18, 1], center = true);\n}\ntranslate([0, 0, 35])\n    foot_switch();\n\n// Knobs\nmodule knob(d) {\n    difference() {\n        cylinder(h = 6, r = 7, center = true, $fn = 36);\n        translate([0, 0, 4])\n            cylinder(h = 3, r = 2, center = true, $fn = 20);\n    }\n    translate([0, 0, 4])\n        cube([2, 10, 1], center = true);\n}\ntranslate([-25, 30, 36])\n    knob(14);\ntranslate([0, 30, 36])\n    knob(14);\ntranslate([25, 30, 36])\n    knob(14);\n\n// LED\ntranslate([35, 30, 37])\n    cylinder(h = 3, r = 3, center = true, $fn = 20);\n\n// Input jack\nmodule jack() {\n    difference() {\n        cylinder(h = 15, r = 6, center = true, $fn = 36);\n        cylinder(h = 16, r = 4, center = true, $fn = 20);\n    }\n}\ntranslate([-40, -30, 22.5])\n    rotate([90, 0, 0])\n        jack();\ntranslate([-20, -30, 22.5])\n    rotate([90, 0, 0])\n        jack();\n\n// DC power jack\ntranslate([40, -30, 22.5])\n    rotate([90, 0, 0])\n        cylinder(h = 12, r = 5.5, center = true, $fn = 36);\n\n// Rubber feet\nmodule foot() {\n    cylinder(h = 2, r = 4, center = true, $fn = 20);\n}\ntranslate([40, 20, 1])\n    foot();\ntranslate([-40, 20, 1])\n    foot();\ntranslate([40, -20, 1])\n    foot();\ntranslate([-40, -20, 1])\n    foot();\n\n// Screws for bottom plate\nmodule screw() {\n    cylinder(h = 2, r = 3, center = true, $fn = 12);\n}\ntranslate([45, 25, 1])\n    screw();\ntranslate([-45, 25, 1])\n    screw();\ntranslate([45, -25, 1])\n    screw();\ntranslate([-45, -25, 1])\n    screw();",
    "renders": true
  },
  {
    "musical_instrument": "granulator",
    "openscad_code": "// Realistic 3D Printable Granulator\n// Medium complexity, recognizable pharmaceutical / plastics granulator\n\n// Overall dimensions for 3D printing (in mm)\n$fn = 30;\n\n// Main parameters\nbody_w = 45;\nbody_h = 30;\nbody_d = 50;\n\nhopper_w_top = 35;\nhopper_w_bottom = 15;\nhopper_h = 20;\n\noutlet_w = 20;\noutlet_h = 8;\n\nmotor_d = 18;\nmotor_r = 8;\n\nwall_th = 1.5;      // for 3D printability\n\nmodule granulator() {\n    // Main chamber body\n    difference() {\n        cube([body_w, body_d, body_h], center = true);\n        translate([0, 0, -wall_th/2])\n            cube([body_w - 2*wall_th, body_d - 2*wall_th, body_h + wall_th], center = true);\n    }\n\n    // Hopper (trapezoidal)\n    translate([0, 0, body_h/2 + hopper_h/2]) {\n        difference() {\n            cylinder(h1 = 0, h2 = hopper_h, r1 = hopper_w_top/2, r2 = hopper_w_bottom/2, center = false);\n            cylinder(h1 = -1, h2 = hopper_h+1, r1 = hopper_w_top/2 - wall_th, r2 = hopper_w_bottom/2 - wall_th);\n        }\n    }\n\n    // Outlet chute\n    translate([0, body_d/2 + outlet_h/2, -body_h/4]) {\n        difference() {\n            cube([outlet_w, outlet_h, outlet_w/2], center = true);\n            cube([outlet_w - 2*wall_th, outlet_h - wall_th, outlet_w/2 - wall_th], center = true);\n        }\n    }\n\n    // Motor housing on side\n    translate([body_w/2 + motor_d/2, 0, 0]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = motor_d, r = motor_r, center = true);\n                cylinder(h = motor_d + 1, r = motor_r - wall_th, center = true);\n            }\n        }\n    }\n\n    // Rotor blades (simplified as discs)\n    for (i = [-1:1]) {\n        rotate([0, 0, i*120]) {\n            translate([0, 0, 0]) {\n                difference() {\n                    cylinder(h = 2, r = body_w/2 - 5, center = true);\n                    cylinder(h = 3, r = 3, center = true);  // shaft hole\n                }\n            }\n        }\n    }\n\n    // Front inspection window\n    translate([0, -body_d/2 - 0.1, 0]) {\n        difference() {\n            cube([body_w/2, wall_th, body_h/2], center = true);\n            cube([body_w/2 - 2*wall_th, wall_th, body_h/2 - 2*wall_th], center = true);\n        }\n    }\n\n    // Support legs\n    for (x = [-body_w/3, body_w/3]) {\n        for (y = [-body_d/3, body_d/3]) {\n            translate([x, y, -body_h/2 - 3]) {\n                cylinder(h = 6, r = 3, center = false);\n            }\n        }\n    }\n\n    // External knobs (for controls)\n    translate([body_w/2 + 3, body_d/4, body_h/4]) {\n        sphere(r = 2);\n    }\n    translate([body_w/2 + 3, -body_d/4, body_h/4]) {\n        sphere(r = 2);\n    }\n}\n\n// Render the granulator\ngranulator();",
    "renders": true
  },
  {
    "musical_instrument": "wavetable",
    "openscad_code": "// Realistic Wavetable Module\n// A 3D-printable wavetable cartridge with visible waveform patterns and mounting features\n\n// Global dimensions\n$fn = 32;  // Smooth curves\nbody_width = 80;\nbody_height = 12;\nbody_depth = 60;\nwall_thickness = 2;\n\n// Waveform parameters\nwave_depth = 3;\nwave_segments = 40;\nwave_amplitude = 4;\n\n// Connector pins\npin_count = 8;\npin_diameter = 1.5;\npin_length = 6;\n\nmodule wavetable_body() {\n    difference() {\n        // Main body\n        cube([body_width, body_depth, body_height], center=true);\n        \n        // Hollow center\n        translate([0, 0, -wall_thickness/2])\n            cube([body_width-2*wall_thickness, body_depth-2*wall_thickness, body_height+1], center=true);\n        \n        // Label recess\n        translate([0, body_depth/2 - 10, body_height/2 - 1])\n            cube([body_width - 20, 15, 2], center=true);\n    }\n}\n\nmodule waveform_pattern() {\n    // Generate realistic waveform on top surface\n    translate([0, 0, body_height/2 + 0.01]) {\n        for(i=[0:wave_segments-1]) {\n            x_pos = -body_width/2 + (i+0.5)*(body_width/wave_segments);\n            wave_height = wave_amplitude * sin(i*360*4/wave_segments) * (1 - abs(i-wave_segments/2)/(wave_segments/2));\n            \n            translate([x_pos, 0, 0])\n                cube([body_width/wave_segments + 0.1, body_depth, wave_height + wave_depth], center=true);\n        }\n    }\n}\n\nmodule mounting_holes() {\n    // Corner mounting holes\n    for(x=[-1, 1])\n    for(y=[-1, 1]) {\n        translate([x*(body_width/2 - 5), y*(body_depth/2 - 5), 0])\n            cylinder(h=body_height+1, r=2, center=true);\n    }\n}\n\nmodule connector_pins() {\n    // Bottom connector pins\n    translate([0, -body_depth/2 + 5, -body_height/2 - pin_length/2]) {\n        for(i=[0:pin_count-1]) {\n            x_pos = (i - (pin_count-1)/2) * 5;\n            translate([x_pos, 0, 0])\n                cylinder(h=pin_length, r=pin_diameter/2, center=true);\n        }\n    }\n}\n\nmodule key_notch() {\n    // Polarization notch\n    translate([body_width/2 - 5, -body_depth/2, -body_height/2 + 2])\n        cube([5, 3, 4], center=false);\n}\n\nunion() {\n    // Main assembly\n    wavetable_body();\n    waveform_pattern();\n    mounting_holes();\n    connector_pins();\n    key_notch();\n}",
    "renders": true
  },
  {
    "musical_instrument": "subtractor",
    "openscad_code": "// Realistic 4-bit Subtractor (74LS283 style DIP package)\n// Medium complexity, 3D-printable, ~65 mm longest dimension\n\n// Chip body dimensions\nchip_w = 19.3;\nchip_l = 25.0;\nchip_h = 4.4;\n\n// Pin dimensions\npin_pitch = 2.54;\npin_w = 0.46;\npin_l = 3.5;\npin_h = 0.4;\n\n// Package details\nsemicircle_r = chip_w / 2;\nnotch_w = 3.0;\nnotch_h = 1.5;\n\n// Overall scale\nscale = 2.5;\n\n// Pin locations\npin_rows = 8;\npin_cols = 2;\n\n// Main module\nmodule subtractor_chip() {\n    // Body with rounded ends and pin-1 notch\n    difference() {\n        union() {\n            // Central block\n            translate([0, 0, chip_h/2])\n                cube([chip_l, chip_w, chip_h], center=true);\n\n            // Rounded ends\n            translate([chip_l/2, 0, chip_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h=chip_w, r=semicircle_r, center=true);\n\n            translate([-chip_l/2, 0, chip_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h=chip_w, r=semicircle_r, center=true);\n        }\n\n        // Pin-1 notch\n        translate([chip_l/2 - notch_w/2, chip_w/2, chip_h])\n            cube([notch_w, notch_w, notch_h], center=false);\n\n        // Top marking depression\n        translate([0, 0, chip_h-0.2])\n            cube([chip_l-4, chip_w-4, 0.2], center=true);\n    }\n\n    // Pins\n    module pin(x, y) {\n        translate([x, y, pin_h/2])\n            cube([pin_l, pin_w, pin_h], center=true);\n    }\n\n    // Left side pins (1-8)\n    for (i = [0:pin_rows-1]) {\n        pin_x = -chip_l/2 - pin_l/2;\n        pin_y = -(pin_rows-1)*pin_pitch/2 + i*pin_pitch;\n        pin(pin_x, pin_y);\n    }\n\n    // Right side pins (9-16)\n    for (i = [0:pin_rows-1]) {\n        pin_x = chip_l/2 + pin_l/2;\n        pin_y = (pin_rows-1)*pin_pitch/2 - i*pin_pitch;\n        pin(pin_x, pin_y);\n    }\n\n    // Text markings\n    translate([-chip_l/4, 0, chip_h+0.01])\n        rotate([0, 0, 0])\n            linear_extrude(height=0.1)\n                text(\"74LS283\", size=2, halign=\"center\", valign=\"center\");\n\n    translate([chip_l/4, 0, chip_h+0.01])\n        rotate([0, 0, 0])\n            linear_extrude(height=0.1)\n                text(\"4-BIT SUB\", size=1.5, halign=\"center\", valign=\"center\");\n}\n\n// Render the model\nscale(scale)\n    subtractor_chip();",
    "renders": true
  },
  {
    "musical_instrument": "additive",
    "openscad_code": "// Realistic Glue Stick Additive\n// A medium-complexity 3D printable glue stick model\n\n$fn = 32;\n\n// Main parameters\nstick_diameter = 25;\nstick_height = 80;\ncap_height = 45;\nbase_height = 15;\nthread_pitch = 2.5;\nthread_depth = 1;\n\nmodule glue_stick() {\n    // Base with threading mechanism\n    difference() {\n        cylinder(h=base_height, d=stick_diameter+2, center=true);\n        \n        // Threading inside base\n        for (i = [0:3]) {\n            rotate([0, 0, i*90]) {\n                translate([0, 0, -base_height/2+2]) {\n                    linear_extrude(height=base_height-4, twist=20) {\n                        offset(r=0.5) offset(r=-0.5) \n                        square([stick_diameter/2-3, thread_pitch*2], center=true);\n                    }\n                }\n            }\n        }\n        \n        // Center hole for mechanism\n        cylinder(h=base_height+1, d=stick_diameter-10, center=true);\n    }\n    \n    // Main body tube\n    difference() {\n        cylinder(h=stick_height, d=stick_diameter, center=true);\n        \n        // Inner tube\n        cylinder(h=stick_height-5, d=stick_diameter-4, center=true);\n        \n        // Label recess\n        translate([0, 0, stick_height/4]) {\n            cylinder(h=20, d=stick_diameter+0.5, center=true);\n        }\n    }\n    \n    // Screw mechanism\n    translate([0, 0, stick_height/2-5]) {\n        difference() {\n            cylinder(h=10, d=stick_diameter-8, center=true);\n            cylinder(h=11, d=stick_diameter-12, center=true);\n        }\n    }\n}\n\nmodule glue_cap() {\n    // Main cap body\n    difference() {\n        cylinder(h=cap_height, d=stick_diameter+2, center=true);\n        \n        // Inner cavity\n        translate([0, 0, -cap_height/2+5]) {\n            cylinder(h=cap_height-2, d=stick_diameter-1, center=false);\n        }\n        \n        // Inner lip\n        translate([0, 0, -cap_height/2+8]) {\n            cylinder(h=5, d=stick_diameter-0.5, center=false);\n        }\n    }\n    \n    // Grip ridges\n    for (i = [0:15]) {\n        rotate([0, 0, i*22.5]) {\n            translate([stick_diameter/2+1, 0, 0]) {\n                cube([2, 1, cap_height-5], center=true);\n            }\n        }\n    }\n    \n    // Top dome\n    translate([0, 0, cap_height/2-2]) {\n        sphere(d=stick_diameter+2);\n    }\n}\n\nmodule glue_pellet() {\n    // Glue extrusion\n    translate([0, 0, stick_height/2+2]) {\n        cylinder(h=10, d=stick_diameter-6, center=true);\n    }\n    \n    // Smoothed top\n    translate([0, 0, stick_height/2+8]) {\n        sphere(d=stick_diameter-6);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    glue_stick();\n}\n\ntranslate([0, 0, stick_height/2+cap_height/2+15]) {\n    glue_cap();\n}\n\ntranslate([0, 0, 0]) {\n    glue_pellet();\n}",
    "renders": true
  },
  {
    "musical_instrument": "fm",
    "openscad_code": "// Realistic FM (Frequency Modulation) Radio Transmitter Module\n// Medium complexity with 3D printable features\n\n$fn = 32;\nwall = 1.6;\n\nmodule box() {\n    // Main enclosure body\n    difference() {\n        cube([70, 45, 20], center = true);\n        // Hollow out the inside\n        translate([0, 0, 2])\n            cube([70 - wall*2, 45 - wall*2, 20 - wall], center = true);\n    }\n}\n\nmodule antenna() {\n    // Telescoping antenna base\n    translate([0, 0, 10]) {\n        // Base mount\n        cylinder(h = 8, r = 6);\n        // Antenna rod\n        translate([0, 0, 8])\n            cylinder(h = 30, r = 1.5);\n    }\n}\n\nmodule lcd() {\n    // LCD display\n    translate([0, 10, 10.1]) {\n        // Frame\n        difference() {\n            cube([25, 10, 1], center = true);\n            translate([0, 0, 0.5])\n                cube([23, 8, 1], center = true);\n        }\n    }\n}\n\nmodule button(x, y, label) {\n    // Push button\n    translate([x, y, 10.1])\n        cylinder(h = 2, r = 3, center = true);\n}\n\nmodule knob(x, y) {\n    // Rotary encoder knob\n    translate([x, y, 10.5]) {\n        cylinder(h = 8, r = 6);\n        // Knurling\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5])\n                translate([5.5, 0, 0])\n                    cube([1, 0.5, 8], center = true);\n        }\n    }\n}\n\nmodule speaker_grill() {\n    // Speaker grill holes\n    translate([-25, -10, 10.1]) {\n        for(y = [0:3]) {\n            for(x = [0:4]) {\n                translate([x * 3, y * 3, 0])\n                    cylinder(h = 1, r = 1);\n            }\n        }\n    }\n}\n\nmodule power_jack() {\n    // DC power jack\n    translate([32.5, 20, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 5);\n}\n\nmodule heat_sink() {\n    // Cooling fins\n    translate([25, 0, 0]) {\n        for(i = [0:6]) {\n            translate([i * 3 - 9, 0, 0])\n                cube([1.5, 40, 10]);\n        }\n    }\n}\n\nmodule vents() {\n    // Ventilation slots\n    translate([0, 22.5, 0]) {\n        for(i = [0:8]) {\n            rotate([90, 0, 0])\n                translate([i * 8 - 32, 0, 0])\n                    cube([6, 1, 20]);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    box();\n    \n    // Position antenna at back\n    translate([0, -22.5, 0])\n        antenna();\n    \n    // LCD display\n    lcd();\n    \n    // Buttons\n    button(-15, 0, \"MODE\");\n    button(-15, -5, \"SCAN\");\n    button(-15, -10, \"MEM\");\n    \n    // Tuning knob\n    knob(15, 0);\n    \n    // Speaker grill\n    speaker_grill();\n    \n    // Heat sink on side\n    translate([35, 0, 0])\n        heat_sink();\n    \n    // Ventilation\n    vents();\n    \n    // Power connector\n    power_jack();\n}",
    "renders": true
  },
  {
    "musical_instrument": "am",
    "openscad_code": "// Realistic 3D-printable \"AM\" radio model\n// Overall size ~70 mm wide, 40 mm deep, 20 mm high\n// All parts printable without supports\n\n$fn = 36;\n\nmodule rounded_box(w, d, h, r) {\n    // Create a box with rounded edges\n    offset = r * (1 - 1/sqrt(2));\n    hull() {\n        translate([offset, offset, r]) sphere(r);\n        translate([w-offset, offset, r]) sphere(r);\n        translate([w-offset, d-offset, r]) sphere(r);\n        translate([offset, d-offset, r]) sphere(r);\n        translate([offset, offset, h-r]) sphere(r);\n        translate([w-offset, offset, h-r]) sphere(r);\n        translate([w-offset, d-offset, h-r]) sphere(r);\n        translate([offset, d-offset, h-r]) sphere(r);\n    }\n}\n\nmodule speaker_grille(diameter, depth) {\n    // Perforated speaker grille\n    difference() {\n        cylinder(h = depth, d = diameter);\n        for (a = [0:30:330])\n            for (r = [diameter/6:diameter/6:diameter/2-diameter/12])\n                rotate([0, 0, a])\n                    translate([r, 0, -1])\n                        cylinder(h = depth+2, d = 1.5);\n    }\n}\n\nmodule tuning_knob(d, h) {\n    // Realistic knob with grip ridges\n    difference() {\n        cylinder(h = h, d = d);\n        for (i = [0:15:345])\n            rotate([0, 0, i])\n                translate([d/2-1, -0.5, -1])\n                    cube([2, 1, h+2]);\n    }\n}\n\nmodule antenna(base_d, rod_d, rod_l) {\n    // Telescopic antenna\n    color(\"silver\")\n    union() {\n        cylinder(h = 3, d = base_d);\n        translate([0, 0, 3])\n            cylinder(h = rod_l, d = rod_d);\n    }\n}\n\n// Main radio body\ndifference() {\n    rounded_box(70, 40, 20, 5);\n    \n    // Hollow out interior\n    translate([3, 3, 3])\n        rounded_box(64, 34, 18, 4);\n    \n    // Speaker opening\n    translate([15, 20, 1])\n        cylinder(h = 3, d = 25);\n    \n    // Tuning window\n    translate([50, 20, 1])\n        cube([15, 2, 3]);\n}\n\n// Speaker grille insert\ntranslate([15, 20, 0.5])\n    speaker_grille(25, 2);\n\n// Tuning scale\ntranslate([50, 20, 0])\n    color(\"white\")\n    cube([15, 0.5, 2]);\n\n// Frequency marks\nfor (f = [0:3:12]) {\n    translate([50+f, 20, 0.5])\n        color(\"black\")\n        cube([0.5, 0.5, 1.5]);\n}\n\n// Volume knob\ntranslate([10, 5, 10])\n    rotate([90, 0, 0])\n        tuning_knob(10, 4);\n\n// Tuning knob\ntranslate([60, 5, 10])\n    rotate([90, 0, 0])\n        tuning_knob(10, 4);\n\n// AM/FM selector\ntranslate([40, 5, 10])\n    rotate([90, 0, 0])\n    cylinder(h = 3, d = 6);\n\n// Antenna mount\ntranslate([65, 20, 20])\n    antenna(6, 2, 30);\n\n// Handle\ntranslate([35, 40, 15])\n    rotate([90, 0, 0])\n    difference() {\n        torus(5, 2);\n        translate([0, 0, -3])\n            cube([20, 20, 6], center = true);\n    }\n\n// Battery compartment door\ntranslate([5, 35, 1])\n    cube([30, 4, 0.5]);",
    "renders": true
  },
  {
    "musical_instrument": "pm",
    "openscad_code": "// Realistic 3D-printable \"p.m.\" (post-meridiem) wall clock\n// Medium complexity: ~100 lines, recognizable realism, printable\n\n// Parameters\nclock_diameter = 80;\nclock_thickness = 8;\nbezel_thick = 2.5;\nhour_hand_length = 25;\nminute_hand_length = 35;\nhand_thick = 2.5;\nhand_width = 3;\nwall_gap = 3;\n\n// Main body with recessed center\ndifference() {\n    union() {\n        // Bezel ring\n        cylinder(d = clock_diameter + bezel_thick*2, h = bezel_thick, $fn = 100);\n        // Main disk\n        translate([0, 0, bezel_thick])\n            cylinder(d = clock_diameter, h = clock_thickness, $fn = 100);\n    }\n    // Recess for clock face\n    translate([0, 0, -0.1])\n        cylinder(d = clock_diameter - 6, h = clock_thickness + 0.2, $fn = 100);\n}\n\n// Clock face detail (raised ring)\ntranslate([0, 0, clock_thickness + bezel_thick - 0.2])\n    cylinder(d1 = clock_diameter - 4, d2 = clock_diameter - 6, h = 0.5, $fn = 100);\n\n// Hour markers\nfor (i = [0 : 30 : 359]) {\n    rotate([0, 0, i])\n        translate([0, (clock_diameter - 10)/2, clock_thickness + bezel_thick])\n            cube([1.5, 5, 1], center = true);\n}\n\n// Center dot\ntranslate([0, 0, clock_thickness + bezel_thick + 1])\n    cylinder(d = 6, h = 2, $fn = 20);\n\n// Hour hand\nmodule hand(length, width, thick) {\n    difference() {\n        union() {\n            // Blade\n            translate([0, length/2, 0])\n                cube([width, length, thick], center = true);\n            // Hub\n            cylinder(d = width*2, h = thick + 0.2, $fn = 20);\n        }\n        // Taper\n        translate([0, length - 2, -0.1])\n            cube([width + 0.2, 4, thick + 0.2], center = true);\n    }\n}\n\ntranslate([0, 0, clock_thickness + bezel_thick + 1.5])\n    rotate([0, 0, 45])\n        hand(hour_hand_length, hand_width, hand_thick);\n\n// Minute hand\ntranslate([0, 0, clock_thickness + bezel_thick + 1.5 + hand_thick + 0.2])\n    rotate([0, 0, 120])\n        hand(minute_hand_length, hand_width * 0.7, hand_thick);\n\n// Wall mount keyhole\ndifference() {\n    // Back plate\n    translate([0, 0, 0])\n        cube([14, 20, wall_gap], center = true);\n    // Keyhole slot\n    translate([0, -5, -0.1])\n        union() {\n            cylinder(d = 5, h = wall_gap + 0.2, $fn = 20);\n            translate([0, 5, 0])\n                cube([5, 10, wall_gap + 0.2], center = true);\n        }\n}\ntranslate([0, clock_diameter/2 - 15, wall_gap/2])\n    rotate([90, 0, 0])\n        cylinder(d = 3, h = 6, $fn = 20);",
    "renders": true
  },
  {
    "musical_instrument": "waveshaper",
    "openscad_code": "// Realistic Waveshaper Module - Medium Complexity\n// 3D printable tabletop model with recognizable waveshaper features\n\n$fn = 32;  // Smooth curves for printing\n\n// Main assembly\nmodule waveshaper() {\n    difference() {\n        union() {\n            chassis();\n            front_panel();\n            knobs();\n            jacks();\n            switches();\n        }\n        \n        // Remove internal hollow for printing efficiency\n        translate([0, 0, -2]) cube([40, 80, 4], center = true);\n    }\n}\n\n// Main chassis with ventilation slots\nmodule chassis() {\n    difference() {\n        // Main body\n        translate([0, 0, 10]) cube([45, 85, 20], center = true);\n        \n        // Ventilation slots on sides\n        for (y = [-30:15:30]) {\n            translate([23, y, 10]) cube([2, 8, 16], center = true);\n            translate([-23, y, 10]) cube([2, 8, 16], center = true);\n        }\n        \n        // Top ventilation\n        for (x = [-15:7.5:15]) {\n            translate([x, 43, 10]) cube([5, 2, 16], center = true);\n        }\n    }\n}\n\n// Front panel with graphics relief\nmodule front_panel() {\n    difference() {\n        // Panel base\n        translate([0, -43, 15]) cube([50, 2, 30], center = true);\n        \n        // Jack holes\n        translate([-15, -43, 8]) cylinder(h = 4, r = 3.5);\n        translate([0, -43, 8]) cylinder(h = 4, r = 3.5);\n        translate([15, -43, 8]) cylinder(h = 4, r = 3.5);\n        \n        // Switch holes\n        translate([-20, -43, 20]) cylinder(h = 4, r = 2.5);\n        translate([20, -43, 20]) cylinder(h = 4, r = 2.5);\n        \n        // Knob hole\n        translate([0, -43, 25]) cylinder(h = 4, r = 3);\n    }\n}\n\n// Control knobs with grip texture\nmodule knobs() {\n    // Main knob\n    translate([0, -45, 25]) rotate([90, 0, 0]) {\n        difference() {\n            cylinder(h = 8, r = 8);\n            cylinder(h = 9, r = 3);\n        }\n        \n        // Grip ridges\n        for (i = [0:30:330]) {\n            rotate([0, 0, i]) translate([6, 0, 4]) cube([2, 1, 4], center = true);\n        }\n    }\n}\n\n// Audio jacks with collar detail\nmodule jacks() {\n    positions = [[-15, 8], [0, 8], [15, 8]];\n    \n    for (pos = positions) {\n        translate([pos[0], -45, pos[1]]) rotate([90, 0, 0]) {\n            union() {\n                // Jack body\n                cylinder(h = 6, r = 4);\n                \n                // Collar\n                translate([0, 0, 2]) cylinder(h = 1, r = 5);\n                \n                // Tip contact\n                translate([0, 0, 6]) cylinder(h = 2, r = 2);\n            }\n        }\n    }\n}\n\n// Toggle switches\nmodule switches() {\n    switch_pos = [[-20, 20], [20, 20]];\n    \n    for (pos = switch_pos) {\n        translate([pos[0], -45, pos[1]]) {\n            // Switch base\n            cylinder(h = 3, r = 5);\n            \n            // Switch lever\n            translate([0, 0, 3]) rotate([45, 0, 0]) {\n                cylinder(h = 10, r = 1.5);\n                \n                // Switch cap\n                translate([0, 0, 10]) sphere(r = 2.5);\n            }\n        }\n    }\n}\n\n// Generate the model\nwaveshaper();",
    "renders": true
  },
  {
    "musical_instrument": "resonator",
    "openscad_code": "// Resonator - Realistic style, medium complexity\n// A 3D printable Helmholtz resonator with mounting flanges and waveguide port\n\n// Overall dimensions\nres_dia = 40;\nres_len = 60;\nwall = 2;\n\n// Neck dimensions\nneck_dia = 12;\nneck_len = 15;\n\n// Mounting flange\nflange_thick = 3;\nflange_dia = 60;\nbolt_hole_dia = 4;\nbolt_circle_dia = 50;\n\n// Waveguide port\nport_dia = 8;\nport_len = 10;\n\nmodule resonator_body() {\n    difference() {\n        // Main cylinder body\n        cylinder(h=res_len, d=res_dia, $fn=100);\n        \n        // Hollow interior\n        translate([0, 0, wall])\n            cylinder(h=res_len-wall*2, d=res_dia-wall*2, $fn=100);\n            \n        // Neck cavity\n        translate([0, 0, res_len])\n            cylinder(h=neck_len, d=neck_dia, $fn=50);\n    }\n}\n\nmodule neck() {\n    difference() {\n        // Neck tube\n        translate([0, 0, res_len])\n            cylinder(h=neck_len, d=neck_dia, $fn=50);\n            \n        // Neck bore\n        translate([0, 0, res_len])\n            cylinder(h=neck_len, d=neck_dia-wall*2, $fn=50);\n    }\n}\n\nmodule mounting_flange() {\n    difference() {\n        // Flange disc\n        cylinder(h=flange_thick, d=flange_dia, $fn=100);\n        \n        // Center hole\n        cylinder(h=flange_thick+1, d=res_dia, $fn=100);\n        \n        // Bolt holes\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([bolt_circle_dia/2, 0, -1])\n                    cylinder(h=flange_thick+2, d=bolt_hole_dia, $fn=20);\n        }\n    }\n}\n\nmodule waveguide_port() {\n    difference() {\n        // Port tube\n        translate([0, -res_dia/2-wall, res_len/2])\n            rotate([0, 90, 0])\n                cylinder(h=port_len, d=port_dia, $fn=30);\n                \n        // Port bore\n        translate([0, -res_dia/2-wall, res_len/2])\n            rotate([0, 90, 0])\n                cylinder(h=port_len, d=port_dia-wall*2, $fn=30);\n                \n        // Connection hole to resonator\n        translate([0, -res_dia/2-wall, res_len/2])\n            rotate([0, 90, 0])\n                cylinder(h=res_dia/2+wall, d=port_dia, $fn=30);\n    }\n}\n\nmodule support_ribs() {\n    for(i=[0:3]) {\n        rotate([0, 0, i*90]) {\n            // Rib connecting flange to body\n            translate([res_dia/2+wall/2, -wall/2, flange_thick])\n                cube([wall, wall, res_len/2]);\n                \n            // Additional support\n            translate([res_dia/2+wall/2, 0, res_len/2+flange_thick/2])\n                rotate([0, 90, 0])\n                    cylinder(h=wall, d=res_len/4, $fn=20);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    resonator_body();\n    neck();\n    mounting_flange();\n    waveguide_port();\n    \n    // Structural supports\n    translate([0, 0, 0])\n        support_ribs();\n}",
    "renders": true
  },
  {
    "musical_instrument": "formant",
    "openscad_code": "// Realistic formant filter model - 3D printable\n// Total height: 80mm, suitable for desktop display\n\n$fn = 32;\n\n// Main module for the formant filter\nmodule formant_filter() {\n    \n    // Base enclosure - 60x40x25mm\n    difference() {\n        translate([0, 0, 12.5])\n            cube([60, 40, 25], center=true);\n        \n        // Hollow it out for walls\n        translate([0, 0, 12.5])\n            cube([56, 36, 26], center=true);\n    }\n    \n    // Front panel with control cutouts\n    translate([0, 20.5, 12.5])\n        difference() {\n            cube([60, 1, 25], center=true);\n            \n            // Knob holes - 3 formant controls\n            for(i = [-1, 0, 1]) {\n                translate([i * 18, 0, 5])\n                    cylinder(h=2, r=3, center=true);\n            }\n            \n            // LED indicator holes\n            for(i = [-1, 1]) {\n                translate([i * 18, 0, -7])\n                    cylinder(h=2, r=2, center=true);\n            }\n        }\n    \n    // Rear panel with connectors\n    translate([0, -20.5, 12.5])\n        difference() {\n            cube([60, 1, 25], center=true);\n            \n            // Input jack\n            translate([-20, 0, 5])\n                cylinder(h=2, r=3.5, center=true);\n            \n            // Output jack  \n            translate([20, 0, 5])\n                cylinder(h=2, r=3.5, center=true);\n                \n            // Power connector\n            translate([0, 0, -5])\n                cube([10, 2, 6], center=true);\n        }\n    \n    // Side ventilation slots\n    for(side = [-1, 1]) {\n        for(i = [-12, -6, 0, 6, 12]) {\n            translate([30.5 * side, i, 12.5])\n                rotate([90, 0, 0])\n                    cylinder(h=1, r=2);\n        }\n    }\n    \n    // Top label area\n    translate([0, 0, 26])\n        cube([50, 30, 1], center=true);\n    \n    // Internal circuit board standoffs (4 corners)\n    for(x = [-25, 25])\n    for(y = [-15, 15]) {\n        translate([x, y, 5])\n            cylinder(h=5, r=2);\n    }\n    \n    // Mounting feet\n    for(x = [-25, 25])\n    for(y = [-15, 15]) {\n        translate([x, y, -0.5])\n            cylinder(h=1, r=3);\n    }\n}\n\n// Optional knobs (printed separately)\nmodule knob() {\n    cylinder(h=8, r=4);\n    translate([0, 0, 8])\n        cylinder(h=2, r=3);\n    translate([0, 3, 6])\n        cube([1, 2, 2], center=true);\n}\n\n// Main assembly\nformant_filter();\n\n// Show example knobs positioned\n%translate([-18, 25, 17.5])\n    knob();\n%translate([0, 25, 17.5])\n    knob();\n%translate([18, 25, 17.5])\n    knob();",
    "renders": true
  },
  {
    "musical_instrument": "pad",
    "openscad_code": "// Realistic Writing Pad – medium complexity\n// All dimensions in millimetres; printable without supports\n\n// ====== PARAMETERS ======\npad_w = 90;          // overall width\npad_h = 65;          // overall height\nthk = 3;             // sheet thickness\nbase_h = 12;         // bottom base height\nclip_w = 26;         // metal clip width\nclip_h = 15;         // metal clip height\nclip_t = 1.2;        // clip thickness\nhole_r = 2;          // radius of the twin rings\nring_gap = 0.4;      // clearance for pages\npages = 40;          // number of sheets\nsheet_h = pad_h - 8; // height of each sheet\nnum_rings = 11;      // twin-wire rings\n\n// ====== BASE ======\nmodule pad_base() {\n    difference() {\n        // main block\n        translate([0, 0, base_h/2])\n            cube([pad_w, pad_h, base_h], center=true);\n\n        // light rounding on top edge\n        translate([0, 0, base_h - 1])\n            minkowski() {\n                cube([pad_w - 2, pad_h - 2, 1], center=true);\n                cylinder(h=0.1, r=1, $fn=16);\n            }\n    }\n}\n\n// ====== METAL CLIP ======\nmodule clip() {\n    clip_body();\n    // two small cylinders for spring pin\n    translate([pad_w/2 - 6, 0, base_h + 2])\n        rotate([90, 0, 0])\n            cylinder(h=clip_w, r=1.2, $fn=8);\n    translate([pad_w/2 + 6, 0, base_h + 2])\n        rotate([90, 0, 0])\n            cylinder(h=clip_w, r=1.2, $fn=8);\n}\n\nmodule clip_body() {\n    // main curved piece\n    translate([pad_w/2, pad_h/2 - 5, base_h + clip_h/2])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=clip_w, r1=clip_h/2, r2=clip_h/2 - 2, $fn=32);\n                translate([0, 0, -clip_t/2])\n                    cube([clip_w + 2, clip_h, clip_t], center=true);\n            }\n    // pressure bar\n    translate([pad_w/2, pad_h/2 - 5, base_h + 1])\n        rotate([0, 90, 0])\n            cube([clip_w, 2, 2], center=true);\n}\n\n// ====== TWIN-WIRE RINGS ======\nmodule rings() {\n    ring_spacing = (pad_w - 30) / (num_rings - 1);\n    for (i=[0:num_rings-1]) {\n        x = -pad_w/2 + 15 + i*ring_spacing;\n        // left half\n        translate([x, 0, base_h + hole_r + ring_gap])\n            rotate([90, 0, 0])\n                cylinder(h=sheet_h, r=hole_r, $fn=16);\n        // right half\n        translate([x + 2*hole_r + 1, 0, base_h + hole_r + ring_gap])\n            rotate([90, 0, 0])\n                cylinder(h=sheet_h, r=hole_r, $fn=16);\n    }\n}\n\n// ====== PAPER SHEETS ======\nmodule sheets() {\n    sheet_spacing = 0.12;\n    ring_spacing = (pad_w - 30) / (num_rings - 1);\n    for (i=[0:pages-1]) {\n        z = base_h + thk/2 + i*sheet_spacing;\n        difference() {\n            // sheet body\n            translate([0, 0, z])\n                cube([pad_w - 4, sheet_h, thk], center=true);\n\n            // punch holes for rings\n            for (j=[0:num_rings-1]) {\n                x = -pad_w/2 + 15 + j*ring_spacing;\n                translate([x, 0, z])\n                    cylinder(h=thk + 1, r=hole_r + 0.2, $fn=16);\n                translate([x + 2*hole_r + 1, 0, z])\n                    cylinder(h=thk + 1, r=hole_r + 0.2, $fn=16);\n            }\n        }\n    }\n}\n\n// ====== ASSEMBLY ======\npad_base();\nclip();\nrings();\nsheets();",
    "renders": true
  },
  {
    "musical_instrument": "lead",
    "openscad_code": "// OpenSCAD code for a realistic mechanical pencil lead (0.5 mm HB)\n\n// Overall dimensions\nlead_diameter = 0.5;      // Actual lead diameter\nlead_length   = 60;       // Total length of lead piece\ntip_length    = 10;       // Length of sharpened conical tip\nwall_thickness = 0.2;     // Extra wall for 3D printing tolerance\n\n// Color definitions (for visualization)\ncolor_lead = [0.2, 0.2, 0.2];  // Dark grey\n\nmodule lead_body() {\n    // Main cylindrical body of the lead\n    color(color_lead)\n    difference() {\n        cylinder(h = lead_length - tip_length, d = lead_diameter + wall_thickness, $fn = 32);\n        \n        // Hollow center to simulate actual lead diameter\n        translate([0, 0, -1])\n        cylinder(h = lead_length - tip_length + 2, d = lead_diameter, $fn = 32);\n    }\n}\n\nmodule lead_tip() {\n    // Sharpened conical tip\n    color(color_lead)\n    difference() {\n        cylinder(h = tip_length, d1 = lead_diameter + wall_thickness, d2 = 0, $fn = 32);\n        \n        // Hollow center for tip\n        translate([0, 0, -1])\n        cylinder(h = tip_length + 2, d1 = lead_diameter, d2 = 0, $fn = 32);\n    }\n}\n\nmodule lead_gradation_marks() {\n    // Markings every 5mm along the lead for usage tracking\n    for (i = [1 : 5 : floor(lead_length/5)]) {\n        translate([0, (lead_diameter + wall_thickness)/2 + 0.1, i * 5])\n        rotate([90, 0, 0])\n        cylinder(h = 0.5, d = 0.3, $fn = 8);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    // Main lead body\n    lead_body();\n    \n    // Tip at the end\n    translate([0, 0, lead_length - tip_length])\n    lead_tip();\n    \n    // Gradation marks\n    translate([0, 0, 0])\n    lead_gradation_marks();\n}\n\n// Optional: Flattened edge at the back to prevent rolling\ntranslate([0, (lead_diameter + wall_thickness)/2, 0])\ncube([lead_diameter + wall_thickness, 0.5, 2], center = true);",
    "renders": true
  },
  {
    "musical_instrument": "pluck",
    "openscad_code": "// Realistic medium-complexity pluck (guitar pick) for 3D printing\n// Approximate dimensions: 30 mm tall × 26 mm wide × 3 mm thick\n\n$fn = 32;\n\n// Overall shape module\nmodule pick_body() {\n    difference() {\n        // Main teardrop body\n        union() {\n            // Tip cone for smooth point\n            translate([0, -15, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 30, r1 = 0.1, r2 = 13, center = true);\n            \n            // Upper rounded body\n            translate([0, 7.5, 0])\n            scale([1, 1.2, 1])\n            sphere(d = 30);\n        }\n        \n        // Flatten to 3 mm thickness\n        translate([0, 0, -1.6])\n        cube([100, 100, 3.2], center = true);\n    }\n}\n\n// Grip texture dots\nmodule grip_dots() {\n    for(y = [-5:5:10]) {\n        for(x = [-9:6:9]) {\n            if(norm([x, y]) < 12) {\n                translate([x, y, 1.55])\n                sphere(d = 1.2);\n            }\n        }\n    }\n}\n\n// Thumb indent on front\nmodule thumb_indent() {\n    difference() {\n        cube([1, 1, 1]); // Placeholder for difference\n        \n        translate([0, 7, 1.5])\n        rotate([0, 0, 0])\n        scale([1.2, 1, 0.5])\n        sphere(d = 12);\n    }\n}\n\n// Finger groove on back\nmodule finger_groove() {\n    difference() {\n        cube([1, 1, 1]); // Placeholder for difference\n        \n        translate([0, 7, -1.5])\n        rotate([0, 0, 0])\n        scale([1.2, 1, 0.5])\n        sphere(d = 12);\n    }\n}\n\n// Beveled edges\nmodule bevel_edges() {\n    difference() {\n        pick_body();\n        \n        // Outer bevel\n        translate([0, 0, 0])\n        scale([0.9, 0.9, 1])\n        pick_body();\n        \n        // Inner solid\n        translate([0, 0, 0.2])\n        scale([0.8, 0.8, 1])\n        pick_body();\n    }\n}\n\n// Main assembly\nunion() {\n    // Main body with beveled edges\n    bevel_edges();\n    \n    // Grip texture on both sides\n    grip_dots();\n    mirror([0, 0, 1]) grip_dots();\n    \n    // Comfort indents\n    thumb_indent();\n    mirror([0, 0, 1]) finger_groove();\n}\n\n// Optional hole for keychain\ntranslate([0, 12, 0])\nrotate([90, 0, 0])\ncylinder(h = 3.2, d = 4, center = true);",
    "renders": true
  },
  {
    "musical_instrument": "stab",
    "openscad_code": "// Realistic Stab (Medium Complexity)\n// A 3D printable tactical knife with guard and handle details\n\n$fn = 64;  // Smooth curves\n\n// Overall parameters\nblade_length = 55;\nblade_width = 20;\nblade_thickness = 2.5;\nhandle_length = 40;\nhandle_width = 15;\nhandle_thickness = 12;\nguard_width = 25;\nguard_thickness = 4;\npommel_diameter = 18;\n\n// Blade module with fuller and edge bevel\nmodule blade() {\n    // Main blade body\n    linear_extrude(height = blade_thickness, center = true)\n        polygon([\n            [0, 0],  // Tip\n            [-blade_length, blade_width/4],  // Top edge start\n            [-blade_length, -blade_width/4], // Bottom edge start\n            [-blade_length + 10, -blade_width/2],  // Ricasso bottom\n            [-blade_length + 10, blade_width/2],   // Ricasso top\n        ]);\n    \n    // Blade edge bevel (top)\n    translate([-blade_length + 5, blade_width/4, blade_thickness/2])\n        rotate([90, 0, 0])\n        cylinder(h = blade_length - 5, r1 = blade_thickness/2, r2 = 0.5);\n    \n    // Blade edge bevel (bottom)\n    translate([-blade_length + 5, -blade_width/4, -blade_thickness/2])\n        rotate([-90, 0, 0])\n        cylinder(h = blade_length - 5, r1 = blade_thickness/2, r2 = 0.5);\n    \n    // Fuller (blood groove)\n    translate([-blade_length/2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = blade_length/2, r = blade_width/6, center = true);\n    \n    // Ricasso transition\n    translate([-blade_length + 10, 0, 0])\n        cube([5, blade_width, blade_thickness], center = true);\n}\n\n// Guard module with quillons\nmodule guard() {\n    // Main guard block\n    translate([-blade_length + 7.5, 0, 0])\n        cube([guard_thickness, guard_width, handle_thickness + 2], center = true);\n    \n    // Top quillon\n    translate([-blade_length + 7.5, guard_width/2 + 2.5, handle_thickness/2])\n        cube([guard_thickness, 5, 5], center = true);\n    \n    // Bottom quillon\n    translate([-blade_length + 7.5, -guard_width/2 - 2.5, -handle_thickness/2])\n        cube([guard_thickness, 5, 5], center = true);\n}\n\n// Handle module with grip texture\nmodule handle() {\n    // Main handle core\n    translate([-blade_length - handle_length/2 - 5, 0, 0])\n        cube([handle_length, handle_width, handle_thickness], center = true);\n    \n    // Grip rings\n    for(i = [1:3]) {\n        translate([-blade_length - 10 - i * 10, 0, 0])\n            difference() {\n                cylinder(h = 2, r = handle_width/2 + 1, center = true);\n                cylinder(h = 2.5, r = handle_width/2 - 1, center = true);\n            }\n    }\n    \n    // Handle texture - grip lines\n    for(i = [0:8]) {\n        translate([-blade_length - 10 - i * 4, 0, handle_thickness/2 + 0.5])\n            cube([0.5, handle_width - 2, 1], center = true);\n        translate([-blade_length - 10 - i * 4, 0, -handle_thickness/2 - 0.5])\n            cube([0.5, handle_width - 2, 1], center = true);\n    }\n}\n\n// Pommel module\nmodule pommel() {\n    translate([-blade_length - handle_length - 5, 0, 0])\n        difference() {\n            sphere(r = pommel_diameter/2);\n            translate([pommel_diameter/2, 0, 0])\n                cube([pommel_diameter, pommel_diameter, pommel_diameter], center = true);\n        }\n}\n\n// Assembly\nunion() {\n    blade();\n    guard();\n    handle();\n    pommel();\n}",
    "renders": true
  },
  {
    "musical_instrument": "chord",
    "openscad_code": "// Realistic 3D-printable power cord with plug and strain relief\n// Overall length: 85 mm, plug width: 26 mm\n// Designed for 0.4 mm nozzle / 0.2 mm layer height\n\n// ---------- Parameters ----------\n$fn = 32;            // Circle resolution\nwall = 1.2;          // Wall thickness for 3 shells\nplug_w = 26;         // Plug body width\nplug_h = 28;         // Plug body height\nplug_d = 38;         // Plug body depth\nprong_l = 18;        // Metal prong length\nprong_d = 4.8;       // Metal prong diameter\ncord_d = 8;          // Cord diameter\ncord_l = 47;         // Cord length beyond plug\nstrain_l = 15;       // Strain-relief sleeve length\n\n// ---------- Metal Prong ----------\nmodule prong(len = prong_l, dia = prong_d) {\n    difference() {\n        // Main cylindrical prong\n        cylinder(h = len, d = dia);\n        // Chamfer the tip\n        translate([0,0,len-1])\n            cylinder(h = 2, d1 = dia, d2 = 0);\n    }\n}\n\n// ---------- Plug Body ----------\nmodule plug_body() {\n    difference() {\n        // Main block with rounded edges\n        minkowski() {\n            cube([plug_w, plug_d, plug_h], center = true);\n            sphere(r = 2);\n        }\n\n        // Recessed face for socket\n        translate([0, plug_d/2 + 0.1, 0])\n            cube([plug_w - 4, 2, plug_h - 4], center = true);\n\n        // Screw recess (decorative)\n        translate([0, -plug_d/2 + 4, plug_h/2 - 6])\n            cylinder(h = 6, d = 6, $fn = 6);\n\n        // Cable entry hole (cone for printing without supports)\n        translate([0, -plug_d/2 + 2, -plug_h/2])\n            rotate([90,0,0])\n                cylinder(h = 6, d1 = cord_d + 2*wall, d2 = cord_d, center = false);\n    }\n}\n\n// ---------- Cord ----------\nmodule cord(len = cord_l, dia = cord_d) {\n    // Outer insulation\n    difference() {\n        cylinder(h = len, d = dia);\n        // Hollow core for flexibility\n        translate([0,0,-1])\n            cylinder(h = len + 2, d = dia - 2*wall);\n    }\n}\n\n// ---------- Strain Relief ----------\nmodule strain_relief() {\n    difference() {\n        // Tapered sleeve\n        cylinder(h = strain_l, d1 = cord_d + 2*wall, d2 = cord_d + 4*wall);\n        // Hole\n        translate([0,0,-1])\n            cylinder(h = strain_l + 2, d = cord_d);\n    }\n}\n\n// ---------- Assembly ----------\n// Plug body\nplug_body();\n\n// Left prong\ntranslate([-8, plug_d/2 + 0.1, 8])\n    prong();\n\n// Right prong\ntranslate([8, plug_d/2 + 0.1, 8])\n    prong();\n\n// Ground prong (round)\ntranslate([0, plug_d/2 + 0.1, -8])\n    prong(prong_l, 5);\n\n// Strain-relief sleeve\ntranslate([0, -plug_d/2, 0])\n    rotate([90,0,0])\n        strain_relief();\n\n// Cord extending from plug\ntranslate([0, -plug_d/2 - strain_l, 0])\n    rotate([90,0,0])\n        cord();",
    "renders": true
  },
  {
    "musical_instrument": "arp",
    "openscad_code": "// ARP Odyssey Synthesizer – realistic style, medium complexity\n// Overall footprint ≈ 90 mm × 60 mm × 18 mm\n\n$fn = 64;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Main housing\n        translate([-42, -27, 0])\n            cube([84, 54, 14], center = false);\n\n        // Bevel the front edge\n        translate([-43, -28, 13])\n            cube([86, 56, 2], center = false);\n\n        // Cut out the recessed control surface\n        translate([-38, -22, 12])\n            cube([76, 44, 3], center = false);\n    }\n}\n\n// Sloped front panel\nmodule panel() {\n    translate([0, -15, 14])\n        rotate([60, 0, 0])\n            cube([76, 30, 2], center = true);\n}\n\n// Rotary knob module\nmodule knob(d = 6, h = 4) {\n    difference() {\n        cylinder(h = h, d = d);\n        translate([0, 0, -0.1])\n            cylinder(h = h + 0.2, d = d - 2);\n    }\n}\n\n// Two rows of knobs\nfor (y = [-12, -6, 0, 6, 12])\n    translate([-30, y, 15.5])\n        knob();\n\nfor (y = [-9, 3])\n    translate([-15, y, 15.5])\n        knob();\n\n// Additional row for sliders area\nfor (x = [0, 10, 20, 30])\n    translate([x, 12, 15.5])\n        knob(d = 4, h = 3);\n\n// Long-throw sliders\nmodule slider(len = 16) {\n    union() {\n        // Track\n        translate([0, 0, 1])\n            cube([2, len, 1.5], center = true);\n        // Cap\n        translate([0, -len/2 + 3, 1.75])\n            cube([3, 5, 2], center = true);\n    }\n}\n\n// Three sliders near top\ntranslate([-10, 18, 15.5])\n    rotate([0, 0, 90])\n        slider();\n\ntranslate([0, 18, 15.5])\n    rotate([0, 0, 90])\n        slider();\n\ntranslate([10, 18, 15.5])\n    rotate([0, 0, 90])\n        slider();\n\n// Keyboard keys (simplified)\nmodule key(w = 5, h = 2, l = 25) {\n    cube([w, l, h], center = true);\n}\n\n// 25-key bed\nfor (i = [-12:12]) {\n    translate([i*3.2, 30, 7.5])\n        key();\n}\n\n// Rear edge connectors\nmodule jack(d = 3, h = 5) {\n    cylinder(h = h, d = d);\n}\n\ntranslate([-30, -30, 14])\n    jack();\ntranslate([-20, -30, 14])\n    jack();\ntranslate([30, -30, 14])\n    jack();\n\n// Assemble\nunion() {\n    body();\n    panel();\n}",
    "renders": true
  },
  {
    "musical_instrument": "gate",
    "openscad_code": "// Realistic medium-complexity 3D-printable gate\n// Overall size: 80 mm wide × 60 mm high × 10 mm deep\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main module\nmodule gate() {\n    difference() {\n        union() {\n            pillars();\n            arch();\n            gate_door();\n            hinge_pins();\n            latch();\n        }\n        // Hinge holes for door\n        translate([10, 40, 4]) rotate([90,0,0]) cylinder(h=8, d=4.2, center=true);\n        translate([70, 40, 4]) rotate([90,0,0]) cylinder(h=8, d=4.2, center=true);\n    }\n}\n\n// Left and right stone-like pillars\nmodule pillars() {\n    for(x=[0, 70]) {\n        translate([x, 0, 0]) {\n            // Main pillar block\n            cube([10, 10, 60], center=false);\n            // Pillar top cap\n            translate([-1, -1, 60]) cube([12, 12, 4], center=false);\n            // Base trim\n            translate([-1, -1, -4]) cube([12, 12, 4], center=false);\n            // Vertical grooves\n            for(y=[2:4:8]) {\n                translate([5, y, 4]) cube([0.5, 1, 52]);\n            }\n        }\n    }\n}\n\n// Arched top beam\nmodule arch() {\n    // Horizontal beam between pillars\n    translate([10, 0, 56]) cube([60, 10, 8]);\n    // Arch curve\n    difference() {\n        translate([40, 5, 60]) {\n            scale([1, 0.6, 1]) sphere(d=60);\n        }\n        translate([40, 5, 60]) {\n            scale([1, 0.6, 1]) sphere(d=56);\n        }\n    }\n    // Arch keystone detail\n    translate([38, 0, 83]) cube([4, 10, 6]);\n}\n\n// Gate door with bars\nmodule gate_door() {\n    color(\"brown\") {\n        translate([10, 0.1, 0]) {\n            // Door frame\n            difference() {\n                cube([60, 9.8, 50]);\n                translate([2, 2, 2]) cube([56, 6, 46]);\n            }\n            // Horizontal bars\n            for(h=[8:8:40]) {\n                translate([2, 1, h]) cube([56, 8, 2]);\n            }\n            // Diagonal braces\n            difference() {\n                rotate([0, 0, 30]) translate([0, -10, -5]) cube([70, 10, 4]);\n                translate([-1, -1, -1]) cube([10, 12, 52]);\n            }\n            difference() {\n                rotate([0, 0, -30]) translate([-15, -10, 35]) cube([70, 10, 4]);\n                translate([55, -1, -1]) cube([10, 12, 52]);\n            }\n        }\n    }\n}\n\n// Hinge pins on door\nmodule hinge_pins() {\n    color(\"gray\") {\n        translate([12, 5, 4]) rotate([90,0,0]) cylinder(h=8, d=4, center=true);\n        translate([68, 5, 4]) rotate([90,0,0]) cylinder(h=8, d=4, center=true);\n    }\n}\n\n// Latch mechanism\nmodule latch() {\n    color(\"silver\") {\n        translate([45, 0, 25]) {\n            cube([10, 2, 1]);\n            translate([5, 2, 0.5]) cylinder(h=2, d=1.5);\n        }\n    }\n}\n\ngate();",
    "renders": true
  },
  {
    "musical_instrument": "trancegate",
    "openscad_code": "// Trancegate with realistic styling\n// Main enclosure with realistic knobs, LEDs, and jacks\n\n// Overall size definition\nmain_width = 80;\nmain_height = 50;\nmain_depth = 25;\nwall_thickness = 2;\n\n// LED parameters\nled_diameter = 3;\nled_depth = 2;\nled_spacing = 7;\n\n// Knob parameters\nknob_diameter = 8;\nknob_height = 4;\nknob_spacing = 12;\n\n// Jack parameters\njack_diameter = 6;\njack_depth = 8;\n\n// Main enclosure body\nmodule enclosure() {\n    difference() {\n        // Outer shell\n        cube([main_width, main_height, main_depth], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n        cube([main_width-wall_thickness*2, main_height-wall_thickness*2, main_depth-wall_thickness], center=true);\n    }\n}\n\n// LED indicator\nmodule led(x, y) {\n    translate([x, y, main_depth/2 - led_depth/2])\n    color([1,0,0])\n    cylinder(h=led_depth, d=led_diameter, $fn=16);\n}\n\n// Control knob\nmodule knob(x, y) {\n    translate([x, y, main_depth/2 + knob_height/2])\n    union() {\n        // Base cylinder\n        cylinder(h=knob_height, d=knob_diameter, $fn=32);\n        \n        // Indicator line\n        translate([0, 0, knob_height/2])\n        cube([knob_diameter*0.8, 1, 0.5], center=true);\n    }\n}\n\n// Audio jack\nmodule jack(x, y) {\n    translate([x, y, -main_depth/2])\n    difference() {\n        // Main jack body\n        cylinder(h=jack_depth, d=jack_diameter+2, $fn=32);\n        \n        // Center hole\n        cylinder(h=jack_depth+1, d=jack_diameter, $fn=32);\n    }\n}\n\n// Generate LED row\nmodule led_row() {\n    for(i=[-2:2]) {\n        led(i * led_spacing, main_height/4);\n    }\n}\n\n// Generate knob row\nmodule knob_row() {\n    for(i=[-1.5:1.5]) {\n        knob(i * knob_spacing, -main_height/4);\n    }\n}\n\n// Generate jack pairs\nmodule jacks() {\n    // Left and right jacks\n    jack(-main_width/3, 0);\n    jack(main_width/3, 0);\n}\n\n// Main assembly\nunion() {\n    // Base enclosure\n    enclosure();\n    \n    // Front panel details\n    translate([0, 0, main_depth/2])\n    difference() {\n        // Panel plate\n        cube([main_width+2, main_height+2, 1], center=true);\n        \n        // LED holes\n        for(i=[-2:2]) {\n            translate([i * led_spacing, main_height/4, 0])\n            cylinder(h=2, d=led_diameter+0.5, $fn=16);\n        }\n        \n        // Knob holes\n        for(i=[-1.5:1.5]) {\n            translate([i * knob_spacing, -main_height/4, 0])\n            cylinder(h=2, d=knob_diameter+0.5, $fn=32);\n        }\n    }\n    \n    // Components\n    led_row();\n    knob_row();\n    jacks();\n    \n    // Side texturing - ventilation stripes\n    for(i=[-3:3]) {\n        translate([main_width/2+0.5, i*8, 0])\n        cube([1, 2, main_depth-4]);\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "sidechain",
    "openscad_code": "// Sidechain model - realistic style, medium complexity\n// Overall size: ~80mm length, 20mm width, 8mm height\n\n// Parameters\nlink_width = 8;\nlink_height = 6;\nlink_thickness = 2;\npin_radius = 1.5;\npin_length = 10;\nnum_links = 8;\n\n// Material thickness for 3D printing\nwall_thickness = 1.2;\n\n// Single chain link with realistic features\nmodule chain_link() {\n    difference() {\n        // Main link body - elongated oval shape\n        union() {\n            // Central bar\n            translate([0, 0, link_height/2])\n                cube([link_width*1.5, link_thickness, link_height], center=true);\n            \n            // Rounded ends using spheres and cylinders\n            translate([-link_width*0.75, 0, link_height/2])\n                sphere(r=link_thickness*1.2);\n            translate([link_width*0.75, 0, link_height/2])\n                sphere(r=link_thickness*1.2);\n            \n            // Chamfered edges\n            translate([0, 0, link_height/4])\n                cube([link_width*1.5 - 2, link_thickness - 1, link_height/2], center=true);\n        }\n        \n        // Pin holes - realistic clearance holes\n        rotate([90, 0, 0])\n            translate([-link_width*0.75, 0, 0])\n                cylinder(h=link_thickness*2, r=pin_radius + 0.5, $fn=16);\n        rotate([90, 0, 0])\n            translate([link_width*0.75, 0, 0])\n                cylinder(h=link_thickness*2, r=pin_radius + 0.5, $fn=16);\n    }\n}\n\n// Connecting pin with realistic head detail\nmodule connecting_pin() {\n    union() {\n        // Main pin shaft\n        cylinder(h=pin_length, r=pin_radius, $fn=12);\n        \n        // Ribbed grip pattern\n        for(i = [0:2:pin_length-2]) {\n            translate([0, 0, i])\n                cylinder(h=1, r=pin_radius + 0.3, $fn=12);\n        }\n        \n        // Flared head\n        translate([0, 0, pin_length])\n            cylinder(h=2, r=pin_radius * 1.5, $fn=12);\n    }\n}\n\n// Assembled chain segment with realistic joints\nmodule chain_segment() {\n    for(i = [0:num_links-1]) {\n        translate([i * link_width * 1.8, 0, 0]) {\n            // Alternate link orientation for realistic chain behavior\n            if(i % 2 == 0) {\n                chain_link();\n            } else {\n                rotate([90, 0, 0])\n                    translate([0, 0, link_height/2])\n                        chain_link();\n            }\n            \n            // Add connecting pins at joints\n            if(i < num_links-1) {\n                translate([link_width * 0.9, 0, link_height/2])\n                    rotate([0, 90, 0])\n                        connecting_pin();\n            }\n        }\n    }\n}\n\n// Master link with reinforced design\nmodule master_link() {\n    difference() {\n        union() {\n            // Thicker central section\n            translate([0, 0, link_height/2])\n                cube([link_width*2, link_thickness*1.5, link_height*1.2], center=true);\n            \n            // Reinforcement ribs\n            for(x = [-link_width:link_width:link_width]) {\n                translate([x, 0, link_height*0.6])\n                    cube([1, link_thickness*1.5, link_height*0.4], center=true);\n            }\n        }\n        \n        // Quick-release mechanism slot\n        translate([0, 0, link_height/2])\n            cube([link_width, link_thickness*0.8, link_height*0.8], center=true);\n    }\n}\n\n// Main assembly\ntranslate([-num_links * link_width * 0.9, 0, 0]) {\n    // Standard chain segments\n    chain_segment();\n    \n    // Add master link at end\n    translate([num_links * link_width * 1.8, 0, 0])\n        master_link();\n    \n    // Add second segment rotated 90 degrees for realistic drape\n    translate([0, 15, 0])\n        rotate([0, 0, 90])\n            chain_segment();\n}",
    "renders": true
  },
  {
    "musical_instrument": "multiband",
    "openscad_code": "// Multiband / antenna trap – medium-complexity realistic style\n// Overall size: ~80 mm long, 18 mm diameter, wall thickness 2 mm\n\n// Parameters\n$fn = 36;\nband_dia = 18;          // Outer diameter of main tube\nwall = 2;               // Wall thickness\nlen = 80;               // Total length\ncap_len = 8;            // End-cap length\ngroove_w = 1.5;         // Tuning-groove width\ngroove_d = 1;           // Tuning-groove depth\ngroove_pitch = 6;       // Axial pitch of grooves\ncoil_wire = 1.2;        // Copper wire diameter\ncoil_turns = 12;        // Number of coil turns\ncoil_len = 55;          // Winding length\nmount_w = 4;            // Mounting foot width\nmount_h = 3;            // Mounting foot height\nmount_l = 10;           // Mounting foot length\n\n// Main hollow body\nmodule body() {\n    difference() {\n        // Solid cylinder\n        cylinder(h = len, d = band_dia, center = true);\n        // Bore\n        cylinder(h = len + 1, d = band_dia - 2*wall, center = true);\n    }\n}\n\n// End caps (thread simulation)\nmodule end_caps() {\n    for (z = [-len/2 + cap_len/2, len/2 - cap_len/2]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = cap_len, d = band_dia, center = true);\n                // Internal bore continues\n                cylinder(h = cap_len + 1, d = band_dia - 2*wall, center = true);\n                // External knurling\n                for (i = [0:30-1]) {\n                    rotate([0, 0, i*12])\n                        translate([band_dia/2 - 0.5, 0, 0])\n                            cube([1, 0.8, cap_len], center = true);\n                }\n            }\n    }\n}\n\n// Tuning grooves\nmodule tuning_grooves() {\n    n = floor(coil_len / groove_pitch);\n    for (i = [0:n-1]) {\n        translate([0, 0, -coil_len/2 + i*groove_pitch + cap_len])\n            difference() {\n                cylinder(h = groove_w, d = band_dia, center = true);\n                cylinder(h = groove_w + 1, d = band_dia - 2*groove_d, center = true);\n            }\n    }\n}\n\n// Copper winding coil\nmodule coil() {\n    // Simple spiral using torus segments\n    for (i = [0:coil_turns-1]) {\n        rotate([0, 0, i*360/coil_turns])\n            translate([0, (band_dia + coil_wire)/2, -coil_len/2 + i*(coil_len/coil_turns)])\n                rotate([90, 0, 0])\n                    cylinder(h = coil_wire, d = coil_wire, center = true);\n    }\n}\n\n// Mounting foot\nmodule mounting_foot() {\n    translate([0, -band_dia/2 - mount_h/2, 0])\n        cube([mount_l, mount_h, mount_w], center = true);\n    // Screw hole\n    translate([0, -band_dia/2 - mount_h, 0])\n        cylinder(h = mount_w + 1, d = 2.5, center = true);\n}\n\n// Assemble parts\nunion() {\n    body();\n    end_caps();\n    tuning_grooves();\n    coil();\n    mounting_foot();\n}",
    "renders": true
  },
  {
    "musical_instrument": "stereo",
    "openscad_code": "// Realistic Stereo Receiver - Medium Complexity\n// Designed for 3D printing - no overhangs, 1.2mm wall thickness\n\n// Main dimensions\nbody_w = 80;\nbody_h = 25;\nbody_d = 60;\nwall_t = 1.2;\n\n// Front panel details\npanel_w = body_w;\npanel_h = body_h;\npanel_d = 2;\n\n// Knobs\nknob_r = 4;\nknob_h = 3;\nknob_spacing = 12;\n\n// Display\ndisplay_w = 30;\ndisplay_h = 8;\ndisplay_d = 1;\n\n// Buttons\nbutton_w = 6;\nbutton_h = 3;\nbutton_d = 1;\n\n// Vents\nvent_w = 40;\nvent_h = 2;\nvent_d = 0.5;\nvent_count = 6;\n\n// Speaker terminals\nterminal_w = 4;\nterminal_h = 4;\nterminal_d = 2;\n\n// Antenna\nantenna_r = 1;\nantenna_h = 30;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([body_w, body_d, body_h], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 0])\n            cube([body_w-wall_t*2, body_d-wall_t, body_h-wall_t*2], center=true);\n    }\n}\n\n// Front panel with details\nmodule front_panel() {\n    // Panel face\n    translate([0, body_d/2 - panel_d/2, 0])\n        cube([panel_w, panel_d, panel_h], center=true);\n    \n    // Display screen\n    translate([0, body_d/2 - panel_d - 0.5, body_h/4])\n        cube([display_w, display_d, display_h], center=true);\n    \n    // Volume and tuning knobs\n    for(i = [-1, 1]) {\n        translate([i * knob_spacing, body_d/2 + knob_h/2, -body_h/4])\n            cylinder(h=knob_h, r=knob_r, center=true);\n    }\n    \n    // Button row\n    for(i = [-2, -1, 0, 1, 2]) {\n        translate([i * (button_w + 2), body_d/2 + button_d/2, -body_h/2 + button_h])\n            cube([button_w, button_d, button_h], center=true);\n    }\n}\n\n// Ventilation slots on top\nmodule vents() {\n    for(i = [1:vent_count]) {\n        translate([0, -body_d/2 + i*(body_d/(vent_count+1)), body_h/2 - vent_h/2])\n            cube([vent_w, vent_d, vent_h], center=true);\n    }\n}\n\n// Rear panel details\nmodule rear_panel() {\n    // Speaker terminals\n    for(i = [-1, 1]) {\n        translate([i * 15, -body_d/2 + terminal_d/2, 0])\n            cube([terminal_w, terminal_d, terminal_h], center=true);\n    }\n    \n    // Power connector\n    translate([0, -body_d/2 + terminal_d/2, -body_h/4])\n        cube([8, terminal_d, 6], center=true);\n    \n    // AM/FM antenna connector\n    translate([body_w/2 - 5, -body_d/2 + terminal_d/2, body_h/4])\n        cylinder(h=terminal_d*1.5, r=2, center=true);\n}\n\n// Antenna\nmodule antenna() {\n    translate([body_w/2 - 10, 0, body_h/2 + antenna_h/2])\n        cylinder(h=antenna_h, r=antenna_r, center=true);\n}\n\n// Assembly\nunion() {\n    body();\n    front_panel();\n    vents();\n    rear_panel();\n    antenna();\n}",
    "renders": true
  },
  {
    "musical_instrument": "widener",
    "openscad_code": "// Widener – realistic, medium complexity  \n// Overall size ≈ 70 mm wide × 70 mm deep × 40 mm high  \n// Converts a 20 mm shaft to a 30 mm shaft with realistic bolt-on clamping\n\n// ---------- parameters ----------\nwall = 3;               // wall thickness for 3D-printing\nbase_w = 70;            // overall footprint\nbase_d = 70;\nbase_h = 20;\nshaft_out_d = 30;       // widened shaft OD\nshaft_in_d  = 20;       // original shaft OD\nshaft_clearance = 0.6;  // print clearance for shaft hole\nbolt_d = 4;             // bolt diameter\nbolt_head_d = 7;        // socket head cap screw\nbolt_head_h = 4;\nbolt_depth = base_h + 5;\nbolt_clearance = 1;     // extra space for bolt heads\nnum_bolts = 4;          // evenly spaced bolts around the ring\nsplit_gap = 2;          // width of the split for clamping\nclamp_bolt_d = 5;       // clamping bolt\nclamp_bolt_head_d = 9;\nclamp_bolt_head_h = 5;\n\n// ---------- main body ----------\nmodule main_body()\n{\n    difference()\n    {\n        // outer block\n        cube([base_w, base_d, base_h], center=true);\n        \n        // central hole (widened shaft)\n        translate([0,0,-1])\n            cylinder(d=shaft_out_d+shaft_clearance, h=base_h+2, $fn=64);\n        \n        // split line for clamping\n        translate([0, -base_d/2-split_gap/2, -1])\n            cube([base_w, split_gap, base_h+2], center=false);\n    }\n}\n\n// ---------- bolt holes around shaft ----------\nmodule bolt_holes()\n{\n    for(i=[0:num_bolts-1])\n    {\n        angle = i*360/num_bolts;\n        x = cos(angle)*(shaft_out_d/2 + wall + bolt_d/2);\n        y = sin(angle)*(shaft_out_d/2 + wall + bolt_d/2);\n        translate([x,y,-1])\n            rotate([0,0,angle])\n                cylinder(d=bolt_d+bolt_clearance, h=bolt_depth+2, $fn=16);\n    }\n}\n\n// ---------- recessed bolt heads ----------\nmodule bolt_head_cuts()\n{\n    for(i=[0:num_bolts-1])\n    {\n        angle = i*360/num_bolts;\n        x = cos(angle)*(shaft_out_d/2 + wall + bolt_d/2);\n        y = sin(angle)*(shaft_out_d/2 + wall + bolt_d/2);\n        translate([x,y,base_h-bolt_head_h-1])\n            rotate([0,0,angle])\n                cylinder(d=bolt_head_d+bolt_clearance, h=bolt_head_h+2, $fn=6);\n    }\n}\n\n// ---------- clamping bolt ----------\nmodule clamp_bolt()\n{\n    // vertical hole for the clamping bolt\n    translate([base_w/2-5, 0, 0])\n        rotate([0,90,0])\n            cylinder(d=clamp_bolt_d+bolt_clearance, h=base_d, $fn=16);\n    // recess for clamp bolt head\n    translate([base_w/2-5, 0, base_h-clamp_bolt_head_h-1])\n        rotate([0,90,0])\n            cylinder(d=clamp_bolt_head_d+bolt_clearance, h=clamp_bolt_head_h+2, $fn=6);\n}\n\n// ---------- optional inner sleeve for original shaft ----------\nmodule inner_sleeve()\n{\n    difference()\n    {\n        cylinder(d=shaft_in_d+wall*2, h=base_h+10, center=true, $fn=64);\n        cylinder(d=shaft_in_d+shaft_clearance, h=base_h+12, center=true, $fn=64);\n    }\n}\n\n// ---------- assembly ----------\nunion()\n{\n    difference()\n    {\n        union()\n        {\n            main_body();\n            bolt_head_cuts();\n        }\n        bolt_holes();\n        clamp_bolt();\n    }\n    \n    // inner sleeve slightly protrudes for alignment\n    translate([0,0,0])\n        inner_sleeve();\n}",
    "renders": true
  },
  {
    "musical_instrument": "exciter",
    "openscad_code": "// Tactile Exciter (Body-Shaker) – medium-complexity realistic version\n// Overall footprint ≈ 60 mm × 45 mm × 20 mm (printable without supports)\n\n$fn = 36;          // smoother curves\nwall = 1.8;        // good wall thickness for FDM printing\nscrew_d = 3.2;     // M3 clearance\nmagnet_d = 12;     // typical voice-coil magnet\ncoil_h = 4;\n\n// Main module\nmodule exciter() {\n    // 1. Base plate with mounting ears\n    difference() {\n        union() {\n            // Central plate\n            cube([40, 35, 3.5], center = true);\n            // Four ears\n            for(x = [-21, 21])\n                for(y = [-19, 19])\n                    translate([x, y, 0])\n                        cube([8, 6, 3.5], center = true);\n        }\n        // Mounting holes\n        for(x = [-21, 21])\n            for(y = [-19, 19])\n                translate([x, y, -1])\n                    cylinder(h = 5, d = screw_d, center = true);\n    }\n\n    // 2. Voice-coil former (bobbin)\n    translate([0, 0, 3.5])\n        cylinder(h = coil_h + 0.5, d = magnet_d + 2 * wall, center = false);\n\n    // 3. Permanent magnet\n    translate([0, 0, 3.5 + coil_h / 2])\n        cylinder(h = 4, d = magnet_d, center = true);\n\n    // 4. Top pole plate\n    translate([0, 0, 3.5 + coil_h + 2])\n        cylinder(h = 1.5, d = magnet_d + 6, center = false);\n\n    // 5. Suspension spider (simplified)\n    translate([0, 0, 3.5 + coil_h / 2])\n        difference() {\n            cylinder(h = 0.6, d = magnet_d + 20, center = true);\n            cylinder(h = 0.8, d = magnet_d + 2, center = true);\n        }\n\n    // 6. Diaphragm cone (shallow)\n    translate([0, 0, 3.5 + coil_h + 3])\n        cylinder(h1 = 4, h2 = 0, d1 = 30, d2 = 14, center = false);\n\n    // 7. Protective dust dome\n    translate([0, 0, 3.5 + coil_h + 3 + 4])\n        sphere(d = 8);\n\n    // 8. Wire exit channel\n    translate([20, 0, 3.5 + coil_h / 2])\n        rotate([90, 0, 0])\n            cylinder(h = 10, d = 4);\n    difference() {\n        translate([20, 0, 3.5 + coil_h / 2])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d = 4.5);\n        translate([20, 0, 3.5 + coil_h / 2])\n            rotate([90, 0, 0])\n                cylinder(h = 11, d = 2.5);\n    }\n}\n\nexciter();",
    "renders": true
  },
  {
    "musical_instrument": "saturator",
    "openscad_code": "// Realistic Medium-Complexity Saturator\n// Overall size ≈ 70 mm tall, 30 mm diameter\n\n// Body module\nmodule body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h = 60, d = 28, $fn = 64);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h = 58, d = 24, $fn = 64);\n        \n        // Top rim chamfer\n        translate([0, 0, 58])\n            cylinder(h = 2, d1 = 28, d2 = 32, $fn = 64);\n    }\n}\n\n// Bottom cap with threads\nmodule bottom_cap() {\n    difference() {\n        // Outer cap\n        cylinder(h = 12, d = 32, $fn = 64);\n        \n        // Inner cavity for body\n        translate([0, 0, 2])\n            cylinder(h = 10, d = 28.2, $fn = 64);\n        \n        // Thread relief grooves\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([14.5, 0, 2])\n                    cube([1.5, 2, 10], center = true);\n        }\n    }\n}\n\n// Top cap with dropper\nmodule top_cap() {\n    difference() {\n        union() {\n            // Cap base\n            cylinder(h = 15, d = 30, $fn = 64);\n            \n            // Bulb holder\n            translate([0, 0, 15])\n                cylinder(h = 8, d = 20, $fn = 64);\n        }\n        \n        // Center hole for dropper\n        translate([0, 0, -1])\n            cylinder(h = 25, d = 8, $fn = 32);\n    }\n}\n\n// Glass dropper tube\nmodule dropper_tube() {\n    difference() {\n        // Outer tube\n        cylinder(h = 55, d = 6, $fn = 32);\n        \n        // Inner bore\n        translate([0, 0, 2])\n            cylinder(h = 53, d = 3, $fn = 32);\n    }\n}\n\n// Rubber bulb\nmodule bulb() {\n    // Main bulb\n    sphere(d = 18, $fn = 32);\n    \n    // Neck\n    translate([0, 0, -3])\n        cylinder(h = 6, d = 12, $fn = 32);\n}\n\n// Label band\nmodule label() {\n    difference() {\n        // Outer band\n        cylinder(h = 20, d = 30.2, $fn = 64);\n        \n        // Inner relief\n        translate([0, 0, 0.5])\n            cylinder(h = 19, d = 29.8, $fn = 64);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    body();\n\ntranslate([0, 0, -12])\n    bottom_cap();\n\ntranslate([0, 0, 60])\n    top_cap();\n\ntranslate([0, 0, 5])\n    dropper_tube();\n\ntranslate([0, 0, 76])\n    bulb();\n\ntranslate([0, 0, 35])\n    label();",
    "renders": true
  },
  {
    "musical_instrument": "tube",
    "openscad_code": "// Realistic 3D-printable tube (approx. 80 mm long, 25 mm OD, 20 mm ID)\n// Medium complexity: threads, chamfers, ribs, and drain/vent features\n\n$fn = 36;               // Smooth curves for printing\n\n// Overall dimensions\nbody_len      = 80;\nbody_od       = 25;\nbody_wall     = 2.5;    // 3D-print friendly wall\nbody_id       = body_od - 2*body_wall;\n\n// Threading parameters\nthread_pitch  = 2.5;\nthread_depth  = 1.0;\nthread_turns  = 3;\nthread_zstart = 60;     // Start threads 60 mm from tube bottom\n\n// End-cap chamfers\nchamfer_h     = 3;\nchamfer_ang   = 30;\n\n// External ribs for grip\nrib_w         = 2;\nrib_h         = 1.5;\nrib_spacing   = 8;\nrib_start     = 15;\nrib_count     = 6;\n\n// Drain/vent hole\nvent_d        = 6;\nvent_wall     = 1.5;\n\nmodule tube_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = body_len, d = body_od, center = false);\n\n        // Inner bore\n        translate([0, 0, -0.01])\n            cylinder(h = body_len + 0.02, d = body_id, center = false);\n\n        // Top chamfer\n        translate([0, 0, body_len - chamfer_h])\n            cylinder(h = chamfer_h + 0.01, d1 = body_od,\n                     d2 = body_od - 2*chamfer_h*tan(chamfer_ang),\n                     center = false);\n\n        // Bottom chamfer\n            cylinder(h = chamfer_h + 0.01, d1 = body_od - 2*chamfer_h*tan(chamfer_ang),\n                     d2 = body_od, center = false);\n    }\n}\n\nmodule external_threads() {\n    // Helical threads at top exterior\n    for (i = [0 : thread_turns * 360 - 1]) {\n        rotate([0, 0, i])\n            translate([body_od/2, 0, thread_zstart + i*thread_pitch/360])\n                rotate([90, 0, 0])\n                    cylinder(h = thread_depth + 0.2, d = thread_pitch, center = true);\n    }\n}\n\nmodule grip_ribs() {\n    // Raised circumferential ribs\n    for (i = [0 : rib_count - 1]) {\n        translate([0, 0, rib_start + i*rib_spacing])\n            difference() {\n                cylinder(h = rib_h, d = body_od + 2*rib_w, center = false);\n                cylinder(h = rib_h + 0.02, d = body_od, center = false);\n            }\n    }\n}\n\nmodule vent_hole() {\n    // Side vent/drain hole with thickened boss\n    translate([body_od/2 + vent_wall, 0, body_len/2])\n        rotate([0, 90, 0])\n            difference() {\n                // Boss\n                cylinder(h = vent_wall*2 + vent_d, d = vent_d + 2*vent_wall, center = true);\n                // Hole\n                cylinder(h = vent_wall*2 + vent_d + 0.2, d = vent_d, center = true);\n            }\n}\n\n// Assemble the complete tube\nunion() {\n    tube_body();\n    external_threads();\n    grip_ribs();\n    vent_hole();\n}",
    "renders": true
  },
  {
    "musical_instrument": "transient",
    "openscad_code": "// Realistic 3D-printable transient (train) – medium complexity\n// Approximate overall length 90 mm, fits most FDM printers\n\n$fn = 36;\n\n// Main body\nmodule locomotive_body() {\n    difference() {\n        // Boiler shell\n        translate([0, 0, 25]) scale([1, 0.7, 0.35]) sphere(d = 40);\n        \n        // Hollow interior for printability\n        translate([0, 0, 25]) scale([0.85, 0.55, 0.3]) sphere(d = 40);\n    }\n    \n    // Firebox extension\n    translate([-22, 0, 15]) cube([20, 18, 30], center = true);\n}\n\n// Cab\nmodule cab() {\n    difference() {\n        translate([30, 0, 30]) cube([30, 26, 28], center = true);\n        // Door & window openings\n        translate([30, 0, 35]) cube([2, 14, 16], center = true);\n        translate([30, 13.1, 35]) cube([30, 2, 16], center = true);\n    }\n}\n\n// Chimney\nmodule chimney() {\n    cylinder(h = 20, d1 = 10, d2 = 7);\n}\n\n// Cylinders in front\nmodule cylinders() {\n    for (x = [-10, 10]) {\n        translate([x, 0, 8]) rotate([90, 0, 0]) cylinder(h = 16, d = 8);\n    }\n}\n\n// Two pairs of wheels\nmodule wheel() {\n    difference() {\n        cylinder(h = 6, d = 20);\n        cylinder(h = 7, d = 6);\n    }\n}\n\nmodule wheel_set(offset_y) {\n    translate([0, offset_y, 6])\n    for (x = [-15, 15])\n        translate([x, 0, 0]) wheel();\n}\n\n// Buffer beams\nmodule buffers() {\n    for (side = [-1, 1]) {\n        translate([side * 45, 0, 15])\n        cube([4, 26, 10], center = true);\n    }\n}\n\n// Combine all parts\nunion() {\n    locomotive_body();\n    cab();\n    translate([-30, 0, 45]) chimney();\n    translate([-35, 0, 0]) cylinders();\n    wheel_set(10);\n    wheel_set(-10);\n    buffers();\n}",
    "renders": true
  },
  {
    "musical_instrument": "shaper",
    "openscad_code": "// Shaper (woodworking tool) - Realistic style, medium complexity\n// Overall dimensions: ~80mm x ~50mm x ~50mm\n\n// Base plate\nmodule base_plate() {\n    difference() {\n        // Main base\n        translate([0, 0, -2]) \n            cube([80, 50, 4], center=true);\n        \n        // Mounting holes\n        for(x = [-30, 30])\n            for(y = [-15, 15])\n                translate([x, y, -3])\n                    cylinder(h=6, r=2.5, center=true);\n    }\n}\n\n// Motor housing\nmodule motor_housing() {\n    difference() {\n        // Main cylinder\n        translate([0, 0, 20])\n            cylinder(h=35, r=18, center=true);\n        \n        // Cooling vents\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([18, 0, 20])\n                    cube([3, 8, 30], center=true);\n        }\n    }\n}\n\n// Spindle\nmodule spindle() {\n    // Main shaft\n    cylinder(h=25, r=6, center=true);\n    \n    // Collet nut\n    translate([0, 0, 15])\n        cylinder(h=8, r=10, $fn=6);\n    \n    // Cutting bit\n    translate([0, 0, -15])\n        cylinder(h=20, r=3);\n}\n\n// Fence system\nmodule fence() {\n    // Fence plate\n    translate([0, -35, 10])\n        cube([70, 8, 25], center=true);\n    \n    // Fence supports\n    for(x = [-25, 25]) {\n        translate([x, -25, 5])\n            cube([10, 15, 15], center=true);\n    }\n    \n    // Adjustment knobs\n    for(x = [-25, 25]) {\n        translate([x, -35, 25])\n            cylinder(h=8, r=5, $fn=8);\n    }\n}\n\n// Height adjustment mechanism\nmodule height_adjuster() {\n    // Main column\n    translate([-30, 0, 15])\n        cube([10, 15, 30], center=true);\n    \n    // Adjustment wheel\n    translate([-30, 0, 35])\n        rotate([90, 0, 0])\n            cylinder(h=5, r=12, $fn=16);\n    \n    // Locking lever\n    translate([-30, 8, 25])\n        rotate([90, 0, 0])\n            cylinder(h=3, r=4, $fn=8);\n}\n\n// Table insert\nmodule table_insert() {\n    difference() {\n        // Main insert\n        translate([0, 0, 0])\n            cube([50, 40, 3], center=true);\n        \n        // Bit opening\n        translate([0, 0, -2])\n            cylinder(h=6, r=12, center=true);\n        \n        // Leveling screws\n        for(x = [-20, 20])\n            for(y = [-15, 15])\n                translate([x, y, -2])\n                    cylinder(h=6, r=2, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base components\n    base_plate();\n    \n    // Working surface\n    translate([0, 0, 2])\n        table_insert();\n    \n    // Motor assembly\n    union() {\n        motor_housing();\n        translate([0, 0, 35])\n            spindle();\n    }\n    \n    // Fence and adjustment systems\n    fence();\n    height_adjuster();\n}",
    "renders": true
  },
  {
    "musical_instrument": "limiter",
    "openscad_code": "// Audio limiter – realistic 3D-printable model (≈ 80 mm wide)\n// Main enclosure with front panel knobs, jacks, LED and heatsink\n\n$fn = 32;\n\n/* overall dimensions */\nbody_w = 78;\nbody_h = 40;\nbody_d = 70;\nwall_t = 2.5;\n\n/* knobs */\nknob_r = 6;\nknob_h = 5;\nknob_shaft_r = 2.5;\n\n/* jacks */\njack_r = 6.5;\njack_h = 10;\n\n/* heatsink */\nfin_h = 12;\nfin_t = 2;\nfin_spacing = 5;\n\n/* LED */\nled_r = 3;\nled_h = 4;\n\n/* base box */\nmodule enclosure() {\n    difference() {\n        cube([body_w, body_d, body_h], center = true);\n        // hollow inside\n        translate([0, 0, wall_t/2])\n            cube([body_w - 2*wall_t, body_d - 2*wall_t, body_h - wall_t], center = true);\n    }\n}\n\n/* front panel with labels implied by holes */\nmodule front_panel() {\n    difference() {\n        // solid front plate\n        translate([0, -body_d/2 + wall_t/2, 0])\n            cube([body_w, wall_t, body_h], center = true);\n        \n        // three rotary pots\n        for (x = [-25, 0, 25])\n            translate([x, -body_d/2, 8])\n                rotate([90, 0, 0])\n                    cylinder(r = knob_shaft_r, h = wall_t + 1, $fn = 16);\n        \n        // two 6.35 mm jacks\n        translate([-30, -body_d/2, -8])\n            rotate([90, 0, 0])\n                cylinder(r = jack_r, h = wall_t + 1);\n        translate([30, -body_d/2, -8])\n            rotate([90, 0, 0])\n                cylinder(r = jack_r, h = wall_t + 1);\n        \n        // LED hole\n        translate([0, -body_d/2, 0])\n            rotate([90, 0, 0])\n                cylinder(r = led_r, h = wall_t + 1);\n    }\n}\n\n/* knob with pointer line */\nmodule knob() {\n    difference() {\n        cylinder(r = knob_r, h = knob_h, $fn = 36);\n        translate([0, 0, knob_h - 0.5])\n            cube([knob_r*2, 1, 1], center = true);\n    }\n    // pointer ridge\n    translate([0, knob_r - 1, knob_h/2])\n        cube([1, 2, knob_h*0.8], center = true);\n}\n\n/* heatsink on rear */\nmodule heatsink() {\n    translate([0, body_d/2 - wall_t/2, body_h/2 - fin_h/2]) {\n        // back plate\n        cube([body_w/2, wall_t, fin_h], center = true);\n        // fins\n        for (x = [-body_w/4 + fin_t/2 : fin_spacing : body_w/4 - fin_t/2]) {\n            translate([x, 0, 0])\n                cube([fin_t, wall_t, fin_h], center = true);\n        }\n    }\n}\n\n/* LED indicator */\nmodule led() {\n    color(\"red\") {\n        translate([0, -body_d/2 - led_h/2, 0])\n            cylinder(r = led_r, h = led_h, $fn = 20);\n    }\n}\n\n/* assembly */\nenclosure();\nfront_panel();\nheatsink();\n// three knobs\nfor (x = [-25, 0, 25])\n    translate([x, -body_d/2 - knob_h, 8])\n        rotate([90, 0, 0])\n            knob();\n// LED\nled();",
    "renders": true
  },
  {
    "musical_instrument": "maximizer",
    "openscad_code": "// Realistic Maximizer (medium complexity)\n// Approx 80 mm long, 40 mm wide, 35 mm tall\n// Designed for FDM 3D printing (no overhangs >45°)\n\n// Overall dimensions\nlength = 80;\nwidth  = 40;\nheight = 35;\n\n// Wall thickness for strength\nwall = 2;\n\n// Main body module\nmodule maximizer_body() {\n    // Central chassis block\n    difference() {\n        cube([length, width, height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, wall/2])\n            cube([length-2*wall, width-2*wall, height-wall], center = true);\n        \n        // Top access cutout\n        translate([0, 0, height/2 - wall])\n            cube([length-20, width-10, wall*2], center = true);\n    }\n}\n\n// Side intake vents\nmodule side_vents() {\n    for (i = [-1:1]) {\n        translate([length/2 - 5, i*12, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 15, d1 = 8, d2 = 6, $fn = 16);\n    }\n}\n\n// Front grill module\nmodule front_grill() {\n    difference() {\n        // Grill plate\n        translate([length/2, 0, 0])\n            cube([wall, width, height-4], center = true);\n        \n        // Vent slots\n        for (y = [-12:4:12]) {\n            translate([length/2, y, 0])\n                cube([wall+0.1, 2, height-8], center = true);\n        }\n    }\n}\n\n// Rear exhaust ports\nmodule exhaust_ports() {\n    for (i = [-1, 1]) {\n        translate([-length/2 + 3, i*10, 5])\n            cylinder(h = 8, d = 6, $fn = 12);\n        translate([-length/2 + 3, i*10, -5])\n            cylinder(h = 8, d = 6, $fn = 12);\n    }\n}\n\n// Top control panel\nmodule control_panel() {\n    difference() {\n        // Panel base\n        translate([0, 0, height/2 - 1])\n            cube([30, 20, 2], center = true);\n        \n        // Display screen\n        translate([10, 0, height/2])\n            cube([12, 16, 0.5], center = true);\n        \n        // Control knob\n        translate([-10, 0, height/2])\n            cylinder(h = 2, d = 6, $fn = 20);\n    }\n}\n\n// Mounting feet\nmodule feet() {\n    for (x = [-length/2 + 8 : length - 16 : length - 16])\n        for (y = [-width/2 + 8 : width - 16 : width - 16])\n            translate([x, y, -height/2])\n                cylinder(h = 3, d = 6, $fn = 16);\n}\n\n// Assembly\nunion() {\n    maximizer_body();\n    side_vents();\n    front_grill();\n    exhaust_ports();\n    control_panel();\n    feet();\n}",
    "renders": true
  },
  {
    "musical_instrument": "deesser",
    "openscad_code": "// De-esser audio processor in realistic style\n// Medium complexity, 3D printable, ~70mm width\n\n$fn = 64;\nwall_thickness = 2;\nbody_width = 70;\nbody_depth = 50;\nbody_height = 25;\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Outer shell\n        cube([body_width, body_depth, body_height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness/2])\n            cube([body_width - wall_thickness*2, body_depth - wall_thickness*2, body_height], center = true);\n    }\n}\n\n// Front panel with controls\nmodule front_panel() {\n    translate([0, body_depth/2 - wall_thickness, 0])\n        difference() {\n            // Panel face\n            cube([body_width - wall_thickness*2, wall_thickness, body_height - wall_thickness*2], center = true);\n            \n            // Knob holes\n            for (x = [-25, -10, 10, 25])\n                translate([x, 0, 5])\n                    rotate([90, 0, 0])\n                        cylinder(h = wall_thickness + 2, r = 3);\n            \n            // LED holes\n            translate([-25, 0, -6])\n                rotate([90, 0, 0])\n                    cylinder(h = wall_thickness + 2, r = 1.5);\n            translate([-10, 0, -6])\n                rotate([90, 0, 0])\n                    cylinder(h = wall_thickness + 2, r = 1.5);\n            translate([10, 0, -6])\n                rotate([90, 0, 0])\n                    cylinder(h = wall_thickness + 2, r = 1.5);\n            translate([25, 0, -6])\n                rotate([90, 0, 0])\n                    cylinder(h = wall_thickness + 2, r = 1.5);\n        }\n}\n\n// Knobs\nmodule knob(pos_x, label) {\n    translate([pos_x, body_depth/2 - wall_thickness, 5]) {\n        rotate([90, 0, 0]) {\n            // Knob base\n            cylinder(h = 3, r = 3);\n            \n            // Knob grip\n            translate([0, 0, 3])\n                cylinder(h = 8, r1 = 3, r2 = 5);\n            \n            // Indicator line\n            translate([0, 0, 11])\n                cube([0.5, 3, 1], center = true);\n        }\n    }\n}\n\n// LED indicators\nmodule led_indicator(pos_x) {\n    translate([pos_x, body_depth/2 - wall_thickness/2, -6]) {\n        rotate([90, 0, 0])\n            cylinder(h = 1, r = 1.5);\n    }\n}\n\n// Audio jacks\nmodule audio_jack(x_pos, y_pos) {\n    translate([x_pos, y_pos, 0]) {\n        // Jack body\n        cylinder(h = 8, r = 6, center = true);\n        \n        // Jack hole\n        rotate([90, 0, 0])\n            cylinder(h = 12, r = 3.5);\n    }\n}\n\n// Power connector\nmodule power_connector() {\n    translate([body_width/2 - 10, 0, 0]) {\n        rotate([0, 90, 0]) {\n            // Connector body\n            cylinder(h = 10, r = 5);\n            \n            // Pin hole\n            cylinder(h = 10, r = 2);\n        }\n    }\n}\n\n// Ventilation slots\nmodule vents() {\n    for (y = [-20, -10, 0, 10, 20]) {\n        translate([body_width/2 - wall_thickness/2, y, 0])\n            rotate([0, 90, 0])\n                cube([wall_thickness + 1, 8, 2], center = true);\n    }\n}\n\n// Main assembly\nbody_shell();\nfront_panel();\n\n// Add knobs\nknob(-25, \"FREQ\");\nknob(-10, \"RANGE\");\nknob(10, \"DEPTH\");\nknob(25, \"OUTPUT\");\n\n// Add LEDs\nled_indicator(-25);\nled_indicator(-10);\nled_indicator(10);\nled_indicator(25);\n\n// Add audio jacks on sides\naudio_jack(-body_width/2 + 10, body_depth/4);\naudio_jack(-body_width/2 + 10, -body_depth/4);\naudio_jack(body_width/2 - 10, body_depth/4);\naudio_jack(body_width/2 - 10, -body_depth/4);\n\n// Add power connector\npower_connector();\n\n// Add ventilation\nvents();\nmirror([1, 0, 0]) vents();",
    "renders": true
  },
  {
    "musical_instrument": "eq",
    "openscad_code": "// Equalizer / Mixer Channel Strip\n// Realistic style, medium complexity, 3D-printable\n// Overall size: 85 mm wide × 55 mm deep × 30 mm tall\n// No steep overhangs – all slopes ≤ 45°\n\n// Main body shell\nmodule chassis() {\n    difference() {\n        // Outer shell\n        translate([0,0,7.5])\n            cube([85,55,15], center=true);\n\n        // Recessed top panel\n        translate([0,0,9])\n            cube([80,50,10], center=true);\n\n        // Cable cut-out rear\n        translate([0,27.5,7.5])\n            cube([75,5,12], center=true);\n\n        // Screw holes (4×)\n        for (x=[-38,38])\n            for (y=[-21,21])\n                translate([x,y,7.5])\n                    cylinder(h=16, d=3.2, $fn=20);\n    }\n}\n\n// Knurled rotary knob\nmodule knob(radius=6, height=7) {\n    difference() {\n        union() {\n            cylinder(h=height, r=radius, $fn=48);\n            // Knurl ridges\n            for (i=[0:23])\n                rotate([0,0,i*15])\n                    translate([radius-0.5,0,height/2])\n                        cube([1,0.4,height], center=true);\n        }\n        // Shaft hole\n        translate([0,0,-1])\n            cylinder(h=height+2, d=6.2, $fn=20);\n    }\n}\n\n// Vertical fader slider\nmodule fader(cap_w=10, cap_h=6) {\n    difference() {\n        union() {\n            // Cap\n            translate([0,cap_h/2,0])\n                cube([cap_w,cap_h,4], center=true);\n            // Stem\n            translate([0,-12,0])\n                cube([4,24,2], center=true);\n        }\n        // Track recess\n        translate([0,-12,1])\n            cube([3,22,3], center=true);\n    }\n}\n\n// 5-segment LED column\nmodule led_column() {\n    // Housing\n    color(\"black\")\n    translate([0,0,4])\n        cube([6,22,8], center=true);\n\n    // LEDs\n    for (i=[0:4]) {\n        translate([0,9-i*4,8.5])\n            cylinder(h=1, d=3.2, $fn=20);\n    }\n}\n\n// Channel label strip\nmodule label_strip() {\n    color(\"silver\")\n    translate([0,-22,8])\n        cube([70,4,0.5], center=true);\n}\n\n// Complete channel strip assembly\nmodule channel_strip() {\n    chassis();\n\n    // 4 knobs across top row\n    for (i=[0:3])\n        translate([-30+i*20,-10,16])\n            knob();\n\n    // 3 faders below\n    for (i=[0:2])\n        translate([-20+i*20,5,9])\n            fader();\n\n    // 2 LED meters\n    translate([-35,15,9])\n        led_column();\n    translate([35,15,9])\n        led_column();\n\n    label_strip();\n}\n\n// Render\nchannel_strip();",
    "renders": true
  },
  {
    "musical_instrument": "parametric",
    "openscad_code": "// Parametric Utility Knife Handle – medium-complexity, realistic style\n// All dimensions in mm, printable without supports\n\n// ========= USER PARAMETERS =========\nhandle_len = 85;          // total handle length\nhandle_w   = 26;          // handle width\nhandle_h   = 14;          // handle thickness\nwall_t     = 2.0;         // wall thickness\ngrip_r     = 1.5;         // grip rib radius\ngrip_step  = 6;           // distance between ribs\nblade_w    = 18;          // blade slot width\nblade_d    = 0.7;         // blade slot depth\nblade_slack= 0.2;         // printing slack\nscrew_d    = 4.2;         // screw hole diameter\nscrew_h    = 2.5;         // screw head recess depth\n// ====================================\n\n// Derived values\nmid = handle_len/2;\ngrip_cnt = floor(handle_len/grip_step)-1;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // outer rounded block\n        hull() {\n            translate([-handle_len/2+2,0,0])\n                sphere(d=handle_h,true);\n            translate([handle_len/2-2,0,0])\n                sphere(d=handle_h,true);\n        }\n        // inner cavity\n        translate([0,0,-wall_t/2])\n            cube([handle_len-4-wall_t*2, handle_w-wall_t*2, handle_h-wall_t], center=true);\n    }\n}\n\n// Grip ribs on top\nmodule grip_ribs() {\n    for(i=[1:grip_cnt]) {\n        translate([-mid + i*grip_step, 0, handle_h/2-grip_r])\n            rotate([90,0,0])\n                cylinder(h=handle_w-2, r=grip_r, center=true);\n    }\n}\n\n// Blade slot (front end)\nmodule blade_slot() {\n    translate([handle_len/2-blade_d/2, 0, 0])\n        cube([blade_d+blade_slack, blade_w+blade_slack, handle_h], center=true);\n}\n\n// Screw recess for blade clamp\nmodule screw_recess() {\n    translate([handle_len/2-blade_d-2, 0, 0])\n        rotate([0,90,0])\n            cylinder(h=screw_h, d=screw_d+1, $fn=20);\n    translate([handle_len/2-blade_d-2, 0, 0])\n        rotate([0,90,0])\n            cylinder(h=handle_w, d=screw_d, center=true, $fn=20);\n}\n\n// Assembly\nunion() {\n    body();\n    grip_ribs();\n    difference() {\n        union();  // placeholder for future additions\n        blade_slot();\n        screw_recess();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "shelving",
    "openscad_code": "// Realistic medium-complexity shelving unit\n// Approx. 80 mm wide × 40 mm deep × 75 mm tall\n\n$fn = 32;  // Smooth curves\n\n// Main shelf frame\nmodule shelf_frame() {\n    // Left side panel\n    difference() {\n        translate([-40, 0, 0])\n            cube([4, 40, 75], center=false);\n        // Cable hole\n        translate([-38, 20, 65])\n            rotate([0, 90, 0])\n                cylinder(h=6, d=6, center=true);\n    }\n    \n    // Right side panel\n    mirror([1, 0, 0])\n        shelf_frame();\n    \n    // Back panel\n    translate([-40, 0, 0])\n        cube([80, 2, 75]);\n    \n    // Bottom panel\n    translate([-40, 0, 0])\n        cube([80, 40, 4]);\n}\n\n// Adjustable shelf module\nmodule shelf_board(t=2) {\n    difference() {\n        // Main board\n        translate([0, 0, 0])\n            cube([72, 38, t], center=true);\n        \n        // Front chamfer\n        translate([0, 19-t/2, 0])\n            rotate([90, 0, 0])\n                cube([72, 3, 3], center=true);\n        \n        // Rear chamfer\n        translate([0, -19+t/2, 0])\n            rotate([-90, 0, 0])\n                cube([72, 3, 3], center=true);\n    }\n}\n\n// Shelf peg\nmodule peg() {\n    union() {\n        cylinder(h=12, d=5);\n        translate([0, 0, 12])\n            sphere(d=5);\n    }\n}\n\n// Place pegs at standard shelf positions\nmodule pegs() {\n    for (z = [25:25:65]) {\n        translate([-38, 5, z])\n            rotate([0, 90, 0])\n                peg();\n        translate([-38, 35, z])\n            rotate([0, 90, 0])\n                peg();\n        mirror([1, 0, 0])\n            peg();\n    }\n}\n\n// Assembly\nunion() {\n    shelf_frame();\n    pegs();\n    \n    // Bottom fixed shelf\n    translate([0, 20, 2])\n        shelf_board(t=4);\n    \n    // Adjustable shelves\n    translate([0, 20, 25])\n        shelf_board(t=2);\n    translate([0, 20, 50])\n        shelf_board(t=2);\n}",
    "renders": true
  },
  {
    "musical_instrument": "notch",
    "openscad_code": "// Realistic Notch for 3D Printing\n// Dimensions: 80mm x 15mm x 8mm (L x W x H)\n\n// Main body of the notch strip\nmodule notch_body() {\n    difference() {\n        // Main rectangular body\n        cube([80, 15, 8], center=true);\n        \n        // Central notch cutout\n        translate([0, 0, 0])\n            cube([20, 16, 10], center=true);\n        \n        // Rounded corners for comfort\n        for(x=[-38, 38])\n        for(y=[-6.5, 6.5])\n            translate([x, y, 0])\n                cylinder(h=10, r=1.5, center=true);\n    }\n}\n\n// Chamfered edges on the top surface\nmodule chamfer_edges() {\n    difference() {\n        cube([80, 15, 8], center=true);\n        \n        // Top chamfer\n        translate([0, 0, 1])\n            cube([82, 17, 6], center=true);\n        \n        // Bottom chamfer\n        translate([0, 0, -1])\n            cube([82, 17, 6], center=true);\n    }\n}\n\n// Grip texture on top surface\nmodule grip_texture() {\n    for(i=[-35:5:35]) {\n        translate([i, 0, 4.1])\n            cube([3, 13, 0.2], center=true);\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    for(x=[-30, 30]) {\n        translate([x, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=15, r=2.5, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body with chamfers\n    intersection() {\n        notch_body();\n        chamfer_edges();\n    }\n    \n    // Add grip texture\n    grip_texture();\n    \n    // Remove mounting holes\n    difference() {\n        children();\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "bandpass",
    "openscad_code": "// Realistic 3D-printable bandpass filter\n// Approx. 75 mm long, 25 mm diameter, SMA connectors at both ends\n\n// wall thickness for 3D printing\nwall = 1.2;\n\n// outer shell of cylindrical filter body\nmodule body() {\n    difference() {\n        // main cylinder\n        cylinder(h=60, d=26, center=true, $fn=60);\n        \n        // hollow it out\n        translate([0,0,0])\n        cylinder(h=62, d=26-2*wall, center=true, $fn=60);\n    }\n    \n    // two small alignment ridges on outside\n    for (z=[-20, 20]) {\n        translate([0, 0, z])\n        rotate([90,0,0])\n        cylinder(h=3, d=2, $fn=12);\n    }\n}\n\n// SMA female connector body\nmodule sma_connector() {\n    // outer barrel\n    difference() {\n        cylinder(h=8, d=6.5, center=true, $fn=24);\n        translate([0,0,0])\n        cylinder(h=9, d=6.5-2*wall, center=true, $fn=24);\n    }\n    \n    // hex nut section\n    translate([0,0,4.5])\n    cylinder(h=2.5, d=8, $fn=6);\n    \n    // center pin hole\n    translate([0,0,0])\n    rotate([90,0,0])\n    cylinder(h=30, d=1.3, center=true, $fn=12);\n}\n\n// PCB-style resonators inside\nmodule resonators() {\n    // three copper traces as rectangles\n    for (offset = [-15, 0, 15]) {\n        translate([0, offset, 0])\n        cube([20, 3, 0.8], center=true);\n    }\n    \n    // coupling iris between resonators\n    translate([0, -7.5, 0])\n    cube([1, 7, 0.8], center=true);\n    translate([0, 7.5, 0])\n    cube([1, 7, 0.8], center=true);\n}\n\n// assembly\nunion() {\n    // main body\n    body();\n    \n    // left SMA connector\n    translate([0,0,-34])\n    sma_connector();\n    \n    // right SMA connector\n    translate([0,0,34])\n    rotate([0,180,0])\n    sma_connector();\n    \n    // internal resonator structure\n    translate([0,0,0])\n    resonators();\n}",
    "renders": true
  },
  {
    "musical_instrument": "lowpass",
    "openscad_code": "// Realistic 3D-printable low-pass filter housing\n// 7-pole LC lowpass, T-topology, SMA connectors\n// Overall size ~75 mm × 30 mm × 15 mm\n\n$fn = 36; // smooth circles\n\n// Main housing block\nmodule housing() {\n    difference() {\n        // outer shell\n        cube([75, 30, 15], center=true);\n\n        // inner cavity\n        translate([0, 0, 1])\n            cube([65, 20, 13], center=true);\n\n        // PCB standoff holes\n        for (x = [-27, 27])\n            for (y = [-9, 9])\n                translate([x, y, -7.5])\n                    cylinder(h = 15.2, d = 3.2);\n    }\n}\n\n// SMA edge-launch connector\nmodule sma_connector(pos, angle) {\n    translate(pos)\n    rotate([0, 0, angle])\n    union() {\n        // connector body\n        translate([0, 0, -7.5])\n            cylinder(h = 8, d = 8);\n        // hex flats\n        translate([0, 0, -7.5 + 6])\n            rotate([0, 0, 30])\n            cylinder(h = 2.5, d1 = 8, d2 = 8, $fn = 6);\n        // center pin stub\n        translate([0, 0, -7.5 + 8])\n            cylinder(h = 2, d = 2.1);\n    }\n}\n\n// Shield wall between stages\nmodule shield_wall(x) {\n    translate([x, 0, 0])\n        cube([1.5, 30, 15], center=true);\n}\n\n// SMT inductor (wire-wound look)\nmodule inductor(x, y) {\n    translate([x, y, 0])\n    union() {\n        // ferrite core\n        rotate([90, 0, 0])\n            cylinder(h = 6, d = 5, $fn = 6);\n        // windings (simplified)\n        for (i = [-2:2])\n            translate([0, i*1.2, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 6, d = 6.5, $fn = 32);\n    }\n}\n\n// SMT capacitor (MLCC block)\nmodule capacitor(x, y) {\n    translate([x, y, -0.75])\n        cube([4, 2.5, 1.5], center=true);\n}\n\n// PCB with traces (visual only)\nmodule pcb_visual() {\n    translate([0, 0, -7.5 + 1])\n        cube([65, 20, 0.8], center=true);\n}\n\n// Assembly\nunion() {\n    housing();\n\n    // SMA connectors\n    sma_connector([-37.5, 0, 0], 0);\n    sma_connector([37.5, 0, 0], 180);\n\n    // Internal components visible through lid\n    translate([0, 0, -7.5 + 1.4]) {\n        // first shunt C\n        capacitor(-25, 0);\n        // series Ls and Cs\n        for (i = [0:3]) {\n            inductor(-25 + 12*i + 6, 0);\n            capacitor(-25 + 12*i + 12, 0);\n        }\n        // last series L\n        inductor(25 - 6, 0);\n    }\n\n    // shield walls\n    for (x = [-19, -7, 5, 17])\n        shield_wall(x);\n\n    // PCB layer (visual aid)\n    pcb_visual();\n}",
    "renders": true
  },
  {
    "musical_instrument": "highpass",
    "openscad_code": "// Realistic 3D printable high-pass filter (LC topology, 50 Ω, 100 MHz cut-off)\n// Overall footprint ~60 mm × 60 mm × 25 mm\n// All vertical clearances >=45° for support-free printing\n\n$fn = 50;  // Globally smooth curves\n\n// Board outline\nmodule pcb() {\n    color(\"darkgreen\", 0.9)\n    difference() {\n        // 1.6 mm thick FR4 slab\n        translate([0, 0, -0.8])\n            cube([60, 60, 1.6], center = true);\n\n        // Four mounting holes Ø3.2 mm\n        for (x = [-25, 25], y = [-25, 25])\n            translate([x, y, 0])\n                cylinder(h = 2, d = 3.2, center = true);\n    }\n}\n\n// SMD pads (0.05 mm raised)\nmodule pad(w, l) {\n    color(\"silver\")\n    translate([0, 0, 0.825])\n    cube([w, l, 0.05], center = true);\n}\n\n// 0603 resistor body (1.6 × 0.8 × 0.45 mm)\nmodule resistor() {\n    color(\"black\")\n    cube([1.6, 0.8, 0.45], center = true);\n}\n\n// 0603 capacitor body (1.6 × 0.8 × 0.9 mm)\nmodule capacitor() {\n    color(\"brown\")\n    cube([1.6, 0.8, 0.9], center = true);\n}\n\n// Shielded 6 mm² inductor (ferrite core visible)\nmodule inductor() {\n    color(\"darkgrey\")\n    difference() {\n        // Outer cube (shield)\n        cube([6, 6, 4], center = true);\n\n        // Hollow inside\n        translate([0, 0, 0.4])\n            cube([4.5, 4.5, 4], center = true);\n\n        // Ferrite toroid core\n        color(\"brown\")\n        translate([0, 0, -0.5])\n        cylinder(h = 2.5, d = 4, center = true);\n    }\n}\n\n// SMA edge-launch connector (vertical jack)\nmodule sma() {\n    color(\"gold\")\n    union() {\n        // Main body\n        translate([0, 0, 5])\n            cylinder(h = 10, d = 6.5);\n\n        // Flange\n        translate([0, 0, 10])\n            cylinder(h = 1.5, d = 12);\n\n        // Center pin (simplified)\n        translate([0, 0, 15])\n            cylinder(h = 2.5, d = 1.27);\n    }\n}\n\n// Build the high-pass network\nmodule highpass() {\n    pcb();\n\n    // Input SMA\n    translate([-30, 0, 0])\n        rotate([0, 90, 0])\n            sma();\n\n    // Output SMA\n    translate([30, 0, 0])\n        rotate([0, 90, 0])\n            sma();\n\n    // Series capacitor 33 pF (C1)\n    translate([-20, 0, 0])\n        pad(1.2, 0.8);\n    translate([-20, 0, 0.675])\n        resistor();  // Body reused as cap\n\n    // Series capacitor 33 pF (C2)\n    translate([20, 0, 0])\n        pad(1.2, 0.8);\n    translate([20, 0, 0.675])\n        resistor();  // Body reused as cap\n\n    // Shunt inductor 130 nH (L1)\n    translate([0, 0, 0])\n        pad(6, 6);\n    translate([0, 0, 2.5])\n        inductor();\n}\n\nhighpass();",
    "renders": true
  },
  {
    "musical_instrument": "allpass",
    "openscad_code": "// All-pass filter shell (realistic, medium complexity)\n// Wall thickness 1.2 mm, 60 mm tall, 80 mm wide\n\n$fn = 36;  // smooth curves\n\n// Main module\nmodule allpass() {\n    // Base plate with mounting ears\n    difference() {\n        union() {\n            // Central base disk\n            cylinder(h = 3, d = 40, center = true);\n            \n            // Four mounting ears\n            for (a = [0:90:270]) {\n                rotate([0, 0, a])\n                    translate([22, 0, 0])\n                        cube([12, 4, 3], center = true);\n            }\n        }\n        \n        // Mounting holes Ø3.5 mm\n        for (a = [0:90:270]) {\n            rotate([0, 0, a])\n                translate([22, 0, -1])\n                    cylinder(h = 5, d = 3.5, center = true);\n        }\n    }\n    \n    // Lower shell\n    difference() {\n        cylinder(h = 25, d1 = 38, d2 = 34, center = false);\n        translate([0, 0, 1.2])\n            cylinder(h = 23, d1 = 35.6, d2 = 31.6, center = false);\n    }\n    \n    // Upper shell\n    translate([0, 0, 25]) {\n        difference() {\n            cylinder(h = 30, d1 = 34, d2 = 28, center = false);\n            translate([0, 0, 1.2])\n                cylinder(h = 28, d1 = 31.6, d2 = 25.6, center = false);\n        }\n    }\n    \n    // Top cap\n    translate([0, 0, 55]) {\n        difference() {\n            cylinder(h = 5, d = 28, center = false);\n            translate([0, 0, 1.2])\n                cylinder(h = 3, d = 25.6, center = false);\n        }\n    }\n    \n    // Input BNC connector on left side\n    translate([-20, 0, 10]) {\n        rotate([0, 90, 0])\n            bnc_connector();\n    }\n    \n    // Output BNC connector on right side\n    translate([20, 0, 10]) {\n        rotate([0, -90, 0])\n            bnc_connector();\n    }\n    \n    // Top adjustment screw\n    translate([0, 0, 60]) {\n        difference() {\n            cylinder(h = 4, d = 8, center = false);\n            translate([0, 0, 1.2])\n                cylinder(h = 2, d = 5, center = false);\n        }\n        translate([0, 0, 2]) {\n            cube([1.5, 5, 2], center = true);\n        }\n    }\n    \n    // Side label recess\n    translate([0, 19.5, 15]) {\n        rotate([90, 0, 0])\n            cube([25, 10, 0.8], center = true);\n    }\n}\n\n// BNC connector module\nmodule bnc_connector() {\n    difference() {\n        union() {\n            // Outer shell\n            cylinder(h = 12, d = 12, center = false);\n            \n            // Hex nut\n            translate([0, 0, 12])\n                cylinder(h = 3, d = 14, $fn = 6, center = false);\n            \n            // Inner pin insulator\n            color(\"lightgray\")\n                translate([0, 0, 1.2])\n                    cylinder(h = 9.6, d = 8.4, center = false);\n        }\n        \n        // Center pin hole Ø2 mm\n        translate([0, 0, -1])\n            cylinder(h = 16, d = 2, center = false);\n    }\n}\n\n// Render it\nallpass();",
    "renders": true
  },
  {
    "musical_instrument": "comb",
    "openscad_code": "// Realistic 3D printable comb – medium complexity\n// Overall size: ~85 mm long x 30 mm wide x 6 mm thick\n\n// Comb parameters\nbody_length = 75;\nbody_width = 25;\nbody_thickness = 3;\nhandle_length = 20;\nhandle_width = 18;\nhandle_thickness = 4;\ntooth_count = 18;\ntooth_width = 1.2;\ntooth_gap = 1.0;\ntooth_length = 22;\ntooth_tip_radius = 0.4;\nwall_thickness = 1.2;\n\n// Main body module\nmodule comb_body() {\n    difference() {\n        // Solid body with rounded edges\n        union() {\n            // Main flat block\n            cube([body_length, body_width, body_thickness], center = true);\n\n            // Rounded top edges\n            translate([0, 0, body_thickness/2 - 0.5])\n                minkowski() {\n                    cube([body_length - 2, body_width - 2, 1], center = true);\n                    cylinder(r = 1, h = 0.1, $fn = 20);\n                }\n        }\n\n        // Finger recess for ergonomic grip\n        translate([body_length/2 - 15, 0, body_thickness/2 + 0.1])\n            cube([10, handle_width - 4, 2], center = true);\n    }\n}\n\n// Handle module\nmodule handle() {\n    translate([-body_length/2 - handle_length/2, 0, 0]) {\n        union() {\n            // Handle base\n            cube([handle_length, handle_width, handle_thickness], center = true);\n\n            // Rounded end\n            translate([handle_length/2 - 1, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(r = handle_width/2, h = 2, center = true, $fn = 40);\n        }\n\n        // Hanging hole\n        translate([-(body_length/2 + handle_length*0.75), 0, 0])\n            rotate([0, 90, 0])\n                cylinder(r = 2.5, h = handle_width + 1, center = true, $fn = 32);\n    }\n}\n\n// Single tooth module\nmodule tooth(index) {\n    x_pos = -body_length/2 + 5 + index * (tooth_width + tooth_gap) + tooth_width/2;\n    color(\"white\")\n        union() {\n            // Main tooth shaft\n            translate([x_pos, body_width/2 + tooth_length/2, 0])\n                cube([tooth_width, tooth_length, body_thickness], center = true);\n\n            // Rounded tip\n            translate([x_pos, body_width/2 + tooth_length + tooth_tip_radius, 0])\n                sphere(r = tooth_tip_radius, $fn = 16);\n        }\n}\n\n// Reinforcement ridge under teeth\nmodule tooth_base() {\n    translate([0, body_width/2 + tooth_length/2, -body_thickness/2 - 0.5])\n        cube([body_length - 10, tooth_length, 1], center = true);\n}\n\n// Assembly\nunion() {\n    comb_body();\n    handle();\n    tooth_base();\n\n    // Generate all teeth using loop\n    for (i = [0 : tooth_count - 1]) {\n        tooth(i);\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "resampler",
    "openscad_code": "// Realistic 3D-printable audio resampler model\n// Overall dimensions: 90 mm x 50 mm x 25 mm\n\n// Main enclosure with rounded edges\nmodule enclosure() {\n    difference() {\n        // Main body\n        minkowski() {\n            cube([90, 50, 20], center=true);\n            sphere(2);\n        }\n        \n        // Hollow out inside\n        minkowski() {\n            cube([86, 46, 18], center=true);\n            sphere(1);\n        }\n        \n        // Top opening for display\n        translate([0, 0, 9])\n            cube([40, 20, 5], center=true);\n    }\n}\n\n// Front panel with controls\nmodule front_panel() {\n    difference() {\n        // Panel plate\n        translate([0, 25, 0])\n            cube([80, 2, 15], center=true);\n        \n        // Button holes\n        for(i=[-1:1]) {\n            translate([i*20, 25, 5])\n                cylinder(h=3, r=4, center=true);\n        }\n        \n        // LED indicator holes\n        for(i=[-2:2]) {\n            translate([i*8, 25, -5])\n                cylinder(h=3, r=1.5, center=true);\n        }\n    }\n}\n\n// Input jacks (left side)\nmodule input_jacks() {\n    for(i=[-1,1]) {\n        translate([-45, i*15, 0])\n            rotate([0, 90, 0])\n            union() {\n                cylinder(h=10, r=6, center=true);\n                cylinder(h=5, r=4, center=true);\n            }\n    }\n}\n\n// Output jacks (right side)\nmodule output_jacks() {\n    for(i=[-1,1]) {\n        translate([45, i*15, 0])\n            rotate([0, 90, 0])\n            union() {\n                cylinder(h=10, r=6, center=true);\n                cylinder(h=5, r=4, center=true);\n            }\n    }\n}\n\n// Control knobs\nmodule knobs() {\n    for(i=[-1:1]) {\n        translate([i*20, 25, 10])\n            union() {\n                cylinder(h=5, r=4);\n                cylinder(h=2, r=3);\n            }\n    }\n}\n\n// LED indicators\nmodule leds() {\n    color(\"red\")\n    for(i=[-2:2]) {\n        translate([i*8, 25, -7])\n            sphere(1.5);\n    }\n}\n\n// Display screen\nmodule display() {\n    color(\"blue\")\n    translate([0, 10, 10])\n        cube([35, 15, 1], center=true);\n}\n\n// Mounting feet\nmodule feet() {\n    for(x=[-35, 35])\n        for(y=[-15, 15])\n            translate([x, y, -12])\n                cylinder(h=4, r=3);\n}\n\n// Assemble complete model\nunion() {\n    enclosure();\n    front_panel();\n    input_jacks();\n    output_jacks();\n    knobs();\n    leds();\n    display();\n    feet();\n}",
    "renders": true
  },
  {
    "musical_instrument": "dither",
    "openscad_code": "// Realistic 3D-printable dither (medium complexity)\n// Size: ~75 mm long, 25 mm high, 30 mm deep\n// No overhangs >45°, 1.2 mm walls\n\n$fn = 36;\n\nmodule handle() {\n    // Main ergonomic grip\n    linear_extrude(height = 25, center = true, scale = [1, 0.9])\n        offset(r = 2)\n            circle(d = 15);\n    \n    // Top ridge for finger placement\n    translate([0, 0, 12.5])\n        rotate([90, 0, 0])\n            cylinder(h = 5, d1 = 15, d2 = 17, center = true);\n    \n    // Bottom ridge for palm\n    translate([0, 0, -12.5])\n        rotate([90, 0, 0])\n            cylinder(h = 5, d1 = 17, d2 = 15, center = true);\n}\n\nmodule shaft() {\n    // Tapered shaft\n    cylinder(h = 35, d1 = 8, d2 = 6);\n    \n    // Alignment ribs\n    for (i = [0:120:240])\n        rotate([0, 0, i])\n            translate([0, 2.5, 17.5])\n                cube([1, 5, 35], center = true);\n}\n\nmodule tip() {\n    // Conical tip\n    cylinder(h = 12, d1 = 6, d2 = 0.5);\n    \n    // Micro-ridges for powder control\n    for (z = [2:2:10])\n        translate([0, 0, z])\n            cylinder(h = 0.5, d = 6 - z * 0.4);\n}\n\nmodule collar() {\n    // Metal collar detail\n    difference() {\n        cylinder(h = 4, d = 12);\n        cylinder(h = 5, d = 7);\n    }\n    \n    // Grip texture\n    for (i = [0:30:330])\n        rotate([0, 0, i])\n            translate([5.5, 0, 2])\n                cube([1, 0.5, 4], center = true);\n}\n\n// Assembly\nunion() {\n    // Handle assembly\n    translate([0, 0, 17.5])\n        handle();\n    \n    // Shaft\n    translate([0, 0, -17.5])\n        shaft();\n    \n    // Collar at junction\n    translate([0, 0, -35])\n        collar();\n    \n    // Tip\n    translate([0, 0, -51])\n        tip();\n}",
    "renders": true
  },
  {
    "musical_instrument": "noise",
    "openscad_code": "// Realistic Noise Maker (Medium Complexity)\n// Approx 80 mm long whistle with realistic features\n\n$fn = 64; // Smooth curves\n\n// Main whistle body\nmodule whistle_body() {\n    difference() {\n        // Main tube\n        cylinder(h = 60, d1 = 20, d2 = 18);\n        \n        // Mouthpiece cutout\n        translate([0, 10, 30])\n            rotate([90, 0, 0])\n                cylinder(h = 25, d = 12);\n                \n        // Air channel\n        translate([0, 0, 28])\n            cube([4, 18, 30], center = true);\n    }\n}\n\n// Mouthpiece detail\nmodule mouthpiece() {\n    difference() {\n        // Outer lip rest\n        translate([0, 12, 30])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d1 = 22, d2 = 18);\n                \n        // Inner air passage\n        translate([0, 12, 30])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d = 8);\n    }\n}\n\n// Sound hole chamber\nmodule sound_chamber() {\n    difference() {\n        // Chamber body\n        translate([0, -15, 45])\n            cube([18, 20, 15], center = true);\n            \n        // Resonance cavity\n        translate([0, -15, 45])\n            cube([14, 18, 12], center = true);\n            \n        // Sound hole\n        translate([0, -25, 45])\n            cube([5, 10, 8], center = true);\n    }\n}\n\n// Splitter edge\nmodule splitter() {\n    translate([0, -6, 45])\n        cube([0.5, 12, 15], center = true);\n}\n\n// Key ring loop\nmodule key_ring() {\n    rotate([90, 0, 0])\n        translate([0, 0, -30])\n            difference() {\n                torus(8, 2);\n                \n                // Cut for key entry\n                translate([8, 0, 0])\n                    cube([16, 20, 4], center = true);\n            }\n}\n\n// Torus helper\nmodule torus(outer, inner) {\n    rotate_extrude()\n        translate([outer, 0, 0])\n            circle(r = inner);\n}\n\n// Assembly\nunion() {\n    whistle_body();\n    mouthpiece();\n    sound_chamber();\n    splitter();\n    key_ring();\n}",
    "renders": true
  },
  {
    "musical_instrument": "pink",
    "openscad_code": "// Pink Flamingo - Realistic Style, Medium Complexity\n// Overall height ~80mm, designed for FDM printing without supports\n\n$fn = 32;  // Smooth curves for realistic look\n\n// Main color - pink\ncolor([1, 0.4, 0.6]) {\n\n    // Body - elongated teardrop shape\n    union() {\n        // Main torso\n        hull() {\n            sphere(d = 25);\n            translate([0, 0, 30]) sphere(d = 20);\n        }\n        \n        // Neck base transition\n        translate([0, 10, 25]) rotate([90, 0, 0]) \n            cylinder(h = 15, d1 = 15, d2 = 8);\n    }\n\n    // Neck - graceful S-curve\n    module neck_segment(t) {\n        // Parametric curve for neck\n        x = sin(t * 90) * 8;\n        z = t * 35;\n        rot = t * 60 + 20;\n        translate([x, 12 + t * 3, 40 + z]) \n            rotate([rot, 0, 0]) \n            cylinder(h = 6, d = 8 - t * 3);\n    }\n    \n    for (i = [0:0.2:1]) neck_segment(i);\n\n    // Head\n    translate([-8, 18, 75]) rotate([45, 0, -20]) {\n        // Skull\n        sphere(d = 12);\n        \n        // Beak\n        translate([4, 0, 0]) rotate([0, 90, 0]) \n            cylinder(h = 18, d1 = 8, d2 = 3);\n            \n        // Beak tip curve\n        translate([13, 0, -3]) rotate([0, 30, 0])\n            cylinder(h = 5, d = 3);\n        \n        // Eye\n        color(\"black\") translate([2, 3, 2]) sphere(d = 2);\n    }\n\n    // Legs\n    module leg(side) {\n        // Hip joint\n        translate([side * 8, 0, 0]) sphere(d = 6);\n        \n        // Upper leg\n        translate([side * 8, 0, -15]) rotate([0, side * 5, 0]) {\n            cylinder(h = 25, d = 5);\n            \n            // Knee joint\n            translate([0, 0, -25]) sphere(d = 5);\n            \n            // Lower leg\n            translate([0, 0, -25]) rotate([0, -side * 10, 0]) {\n                cylinder(h = 30, d = 4);\n                \n                // Ankle\n                translate([0, 0, -30]) sphere(d = 4);\n                \n                // Foot\n                translate([0, side * 12, -30]) rotate([90, 0, 0]) {\n                    // Main foot\n                    hull() {\n                        cylinder(h = 2, d = 4);\n                        translate([0, side * 15, 0]) cylinder(h = 2, d = 6);\n                    }\n                    \n                    // Webbed toes\n                    for (j = [0.3, 0.6, 0.9]) {\n                        translate([0, side * j * 15, -2]) rotate([0, 90, 0])\n                            cylinder(h = 8, d = 2);\n                    }\n                }\n            }\n        }\n    }\n    \n    leg(1);  // Right leg\n    leg(-1); // Left leg\n\n    // Wing detail\n    difference() {\n        // Wing shape\n        translate([-10, -15, 20]) rotate([0, 20, -30]) {\n            scale([1.2, 0.3, 1]) sphere(d = 20);\n        }\n        \n        // Feather texture grooves\n        for (i = [1:3:10]) {\n            translate([-10 - i/2, -15 - i, 20 + i]) \n                rotate([0, 20, -30]) \n                scale([0.8, 0.4, 0.9]) \n                sphere(d = 15);\n        }\n    }\n\n    // Tail feathers\n    translate([0, -15, 5]) rotate([0, 45, 0]) {\n        difference() {\n            union() {\n                // Main tail\n                hull() {\n                    sphere(d = 8);\n                    translate([0, -15, -5]) sphere(d = 12);\n                }\n                \n                // Side feathers\n                translate([5, -12, -3]) sphere(d = 6);\n                translate([-5, -12, -3]) sphere(d = 6);\n            }\n            \n            // Cut for feather separation\n            translate([0, -8, 0]) rotate([0, 90, 0]) \n                cube([20, 20, 2], center = true);\n        }\n    }\n}\n\n// Base for stability\ncolor([0.8, 0.8, 0.7]) \n    translate([0, 0, -65]) \n    cylinder(h = 3, d = 40);",
    "renders": true
  },
  {
    "musical_instrument": "white",
    "openscad_code": "// White Chess Pawn - Realistic Style, Medium Complexity\n// Size: ~70mm tall, 3D printable with no overhangs\n\n$fn = 64;  // Smooth curves\n\n// Main module\nmodule white_pawn() {\n    // Base parameters\n    base_d = 30;\n    base_h = 8;\n    collar_d = 22;\n    collar_h = 6;\n    body_d = 26;\n    body_h = 20;\n    neck_d = 10;\n    neck_h = 15;\n    head_d = 18;\n    head_h = 12;\n    \n    // Base with rounded bottom\n    union() {\n        // Bottom dome\n        translate([0, 0, base_h/2])\n            scale([1, 1, 0.5])\n            sphere(d = base_d);\n        \n        // Main base cylinder\n        cylinder(h = base_h, d = base_d);\n        \n        // Collar ring\n        translate([0, 0, base_h])\n            cylinder(h = collar_h, d1 = base_d, d2 = collar_d);\n        \n        // Body\n        translate([0, 0, base_h + collar_h])\n            cylinder(h = body_h, d = body_d);\n        \n        // Tapered neck\n        translate([0, 0, base_h + collar_h + body_h])\n            cylinder(h = neck_h, d1 = body_d, d2 = neck_d);\n        \n        // Head sphere with flat top\n        translate([0, 0, base_h + collar_h + body_h + neck_h])\n            difference() {\n                sphere(d = head_d);\n                translate([0, 0, -head_h/2])\n                    cube([head_d*2, head_d*2, head_h], center = true);\n            }\n        \n        // Head collar\n        translate([0, 0, base_h + collar_h + body_h + neck_h + head_h/4])\n            cylinder(h = 3, d = head_d * 1.1);\n    }\n    \n    // Add subtle grooves around base for realism\n    for(i = [1:3]) {\n        translate([0, 0, base_h - i*2])\n            difference() {\n                cylinder(h = 1, d = base_d);\n                cylinder(h = 1.1, d = base_d - 2);\n            }\n    }\n    \n    // Add decorative ring details on body\n    for(i = [1:2]) {\n        translate([0, 0, base_h + collar_h + body_h/3 * i])\n            difference() {\n                cylinder(h = 1.5, d = body_d + 1);\n                cylinder(h = 1.6, d = body_d - 1);\n            }\n    }\n}\n\n// Scale to 70mm height\nscale(70/57)\n    color(\"white\")\n        white_pawn();",
    "renders": true
  },
  {
    "musical_instrument": "brown",
    "openscad_code": "// Brown (UPS-style delivery truck) – realistic, medium complexity\n// All dimensions in mm; final length ≈ 90 mm\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall scale factor – change only this if you want a bigger/smaller truck\nscale_factor = 1;\n\n// Wall thickness for 3-D printing\nwall = 2;\n\nmodule brown_truck() {\n  // ----- Main body -----\n  // Hollow box with open back\n  difference() {\n    // Outer box\n    translate([0, 0, 25])\n      cube([90, 45, 50], center=true);\n    // Inner cavity\n    translate([0, 0, 25])\n      cube([90 - 2*wall, 45 - 2*wall, 48], center=true);\n  }\n\n  // ----- Cab -----\n  translate([37.5, 0, 30])\n    difference() {\n      // Outer cab\n      cube([30, 45, 35], center=true);\n      // Inner cavity\n      cube([28, 43, 33], center=true);\n    }\n\n  // ----- Roof curve -----\n  translate([37.5, 0, 47.5])\n    scale([1, 1, 0.5])\n      sphere(d=45);\n\n  // ----- Hood -----\n  translate([55, 0, 15])\n    rotate([0, 10, 0])\n      cube([25, 40, 20], center=true);\n\n  // ----- Windshield -----\n  translate([42, 0, 35])\n    rotate([0, -30, 0])\n      difference() {\n        cube([20, 42, 25], center=true);\n        translate([wall, 0, 0])\n          cube([20 - 2*wall, 38, 23], center=true);\n      }\n\n  // ----- Side mirrors -----\n  for (y = [-20, 20]) {\n    translate([37, y, 30])\n      rotate([0, 0, y > 0 ? 20 : -20])\n        cylinder(h=10, d1=3, d2=2, center=false);\n  }\n\n  // ----- Wheels -----\n  for (x = [-25, 25, 35]) {\n    wheel_assembly(x, -22.5);\n    wheel_assembly(x, 22.5);\n  }\n\n  // ----- Simple bumper -----\n  translate([67.5, 0, 10])\n    cube([5, 46, 15], center=true);\n\n  // ----- Door handles -----\n  for (y = [-15, 15]) {\n    translate([37, y, 20])\n      rotate([90, 0, 0])\n        cylinder(h=8, d=3);\n  }\n}\n\nmodule wheel_assembly(x, y) {\n  translate([x, y, 0])\n    rotate([0, 0, 0])\n      union() {\n        difference() {\n          // Tire\n          color(\"black\")\n            cylinder(h=8, d=18, center=true);\n          // Rim cavity\n          cylinder(h=9, d=12, center=true);\n        }\n        // Rim\n        color(\"silver\")\n          cylinder(h=9, d=11, center=true);\n        // Axle pin\n        cylinder(h=3, d=4, center=true);\n      }\n}\n\n// Build the truck\nscale(scale_factor)\n  brown_truck();",
    "renders": true
  },
  {
    "musical_instrument": "crackle",
    "openscad_code": "// Realistic crackle pattern – medium complexity\n// Overall size ≈ 70 mm wide, 3 mm thick, printable without overhangs\n\n$fn = 48;               // Smooth circles\nwall = 1.4;             // Minimum 3D-printable wall\nbase_w = 70;            // Length of the base plate\nbase_h = 45;            // Height of the base plate\nbase_t = 3;             // Thickness of the base plate\n\n// ---------- Base plate ----------\nmodule base() {\n    difference() {\n        cube([base_w, base_h, base_t], center = true);\n        \n        // Chamfer edges to avoid sharp corners\n        translate([0, 0, base_t/2 - 0.01])\n            minkowski() {\n                cube([base_w - 2*wall, base_h - 2*wall, 0.1], center = true);\n                cylinder(r1 = wall, r2 = 0, h = wall, center = true);\n            }\n    }\n}\n\n// ---------- Main crack ----------\nmodule main_crack() {\n    // Central jagged trench\n    for (i = [0:10]) {\n        hull() {\n            translate([i*6 - base_w/2, noise(i*0.7)*5, 0])\n                cylinder(r = 1.5 + noise(i*0.4)*1, h = base_t, center = true);\n            translate([(i+1)*6 - base_w/2, noise((i+1)*0.7)*5, 0])\n                cylinder(r = 1.5 + noise((i+1)*0.4)*1, h = base_t, center = true);\n        }\n    }\n}\n\n// ---------- Branching micro-cracks ----------\nmodule micro_cracks() {\n    seed = 42;\n    for (j = [0:15]) {\n        angle = rands(30, 150, 1, seed + j)[0];\n        len   = rands(8, 18, 1, seed + j)[0];\n        x     = rands(-base_w/2 + 10, base_w/2 - 10, 1, seed + j*2)[0];\n        y     = rands(-base_h/2 + 10, base_h/2 - 10, 1, seed + j*3)[0];\n        \n        hull() {\n            translate([x, y, 0])\n                cylinder(r = 0.6, h = base_t, center = true);\n            translate([x + cos(angle)*len, y + sin(angle)*len, 0])\n                cylinder(r = 0.2, h = base_t, center = true);\n        }\n    }\n}\n\n// ---------- Noise helper ----------\nfunction noise(t) = 4*(sin(t*4.7) + 0.5*sin(t*7.3) + 0.25*sin(t*11.9));\n\n// ---------- Final assembly ----------\ndifference() {\n    base();\n    union() {\n        main_crack();\n        micro_cracks();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "hiss",
    "openscad_code": "// Realistic Hiss (Snake) - medium complexity\n// Approx 80 mm long, ready to print without supports\n\n// Main parameters\nbody_len = 80;\nbody_rad = 6;\nhead_len = 18;\nhead_rad = 9;\nneck_len = 10;\ntail_tip = 2;\nscale_hiss = 1;\n\nmodule hiss_body() {\n    // Central spine\n    for (i = [0:1:body_len*2]) {\n        hull() {\n            translate([0, 0, body_rad*sin(i*30)])\n                sphere(d = body_rad*(1 - 0.6*i/(body_len*2)), $fn = 8);\n            translate([i*0.5, 0, body_rad*sin((i+1)*30)])\n                sphere(d = body_rad*(1 - 0.6*(i+1)/(body_len*2)), $fn = 8);\n        }\n    }\n}\n\nmodule hiss_head() {\n    difference() {\n        // Main head shape\n        translate([body_len, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = head_len, r1 = head_rad, r2 = 0, $fn = 16);\n        \n        // Eye sockets (left)\n        translate([body_len+head_len*0.3, -head_rad*0.4, head_rad*0.5])\n            sphere(d = 4, $fn = 8);\n        \n        // Eye sockets (right)\n        translate([body_len+head_len*0.3, head_rad*0.4, head_rad*0.5])\n            sphere(d = 4, $fn = 8);\n        \n        // Mouth slit\n        translate([body_len+head_len*0.6, 0, 0])\n            cube([head_len*0.4, head_rad*1.2, 2], center = true);\n    }\n}\n\nmodule eyes() {\n    // Left eye\n    translate([body_len+head_len*0.3, -head_rad*0.4, head_rad*0.5])\n        sphere(d = 2.5, $fn = 8);\n    \n    // Right eye\n    translate([body_len+head_len*0.3, head_rad*0.4, head_rad*0.5])\n        sphere(d = 2.5, $fn = 8);\n}\n\nmodule tongue() {\n    // Forked tongue\n    translate([body_len+head_len, 0, -head_rad*0.3])\n        rotate([0, -20, 0])\n            for (side = [-1, 1]) {\n                translate([0, side*1.5, 0])\n                    cylinder(h = 8, r1 = 0.4, r2 = 0.1, $fn = 4);\n            }\n}\n\nmodule scales() {\n    // Scales along body using repeated ellipsoids\n    for (pos = [5:5:body_len-10]) {\n        rotate([0, 0, 0])\n            for (ang = [0:45:315]) {\n                rotate([0, 0, ang])\n                    translate([pos, 0, body_rad*1.05])\n                        scale([1.5, 0.8, 0.4])\n                            sphere(d = 2.5, $fn = 6);\n            }\n    }\n}\n\nmodule tail_rattle() {\n    // Rattle segments at tail end\n    for (i = [0:1:4]) {\n        hull() {\n            translate([i*2, 0, 0])\n                sphere(d = tail_tip + 2 + i, $fn = 8);\n            translate([(i+1)*2, 0, 0])\n                sphere(d = tail_tip + 2 + (i+1), $fn = 8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    scale([scale_hiss, scale_hiss, scale_hiss]) {\n        // Main body\n        color(\"darkgreen\") {\n            hiss_body();\n            \n            // Tail taper\n            translate([0, 0, 0])\n                cylinder(h = 15, r1 = body_rad, r2 = tail_tip, $fn = 16);\n            \n            // Neck transition\n            translate([body_len, 0, 0])\n                cylinder(h = neck_len, r1 = body_rad, r2 = head_rad, $fn = 16);\n            \n            // Head\n            hiss_head();\n            \n            // Tongue\n            tongue();\n            \n            // Eyes\n            eyes();\n            \n            // Tail rattle\n            translate([-15, 0, 0])\n                tail_rattle();\n            \n            // Scales\n            scales();\n        }\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "hum",
    "openscad_code": "// HUM (Humanoid Utility Module) - Realistic style, medium complexity\n// 3D printable humanoid torso with mechanical details\n\n$fn=50;  // Increase for smoother curves\n\n// Main parameters\nhum_height = 80;\nbody_width = 45;\nbody_depth = 30;\nhead_height = 20;\nshoulder_width = 55;\narm_length = 35;\n\n// Color definitions\nbody_color = [0.2, 0.3, 0.4];\naccent_color = [0.8, 0.8, 0.8];\njoint_color = [0.1, 0.1, 0.1];\n\n// Main body assembly\nmodule hum_body() {\n    color(body_color) {\n        // Torso - main body\n        translate([0, 0, hum_height/2])\n            rounded_box(body_width, body_depth, hum_height, 5);\n        \n        // Chest plate\n        translate([0, body_depth/2 + 0.5, hum_height/2 + 5])\n            cube([body_width - 10, 2, hum_height - 20], center=true);\n        \n        // Back panel\n        translate([0, -body_depth/2 - 0.5, hum_height/2 + 5])\n            cube([body_width - 8, 2, hum_height - 15], center=true);\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(w, d, h, r) {\n    hull() {\n        translate([w/2 - r, d/2 - r, h/2 - r])\n            sphere(r=r);\n        translate([-w/2 + r, d/2 - r, h/2 - r])\n            sphere(r=r);\n        translate([w/2 - r, -d/2 + r, h/2 - r])\n            sphere(r=r);\n        translate([-w/2 + r, -d/2 + r, h/2 - r])\n            sphere(r=r);\n        translate([w/2 - r, d/2 - r, -h/2 + r])\n            sphere(r=r);\n        translate([-w/2 + r, d/2 - r, -h/2 + r])\n            sphere(r=r);\n        translate([w/2 - r, -d/2 + r, -h/2 + r])\n            sphere(r=r);\n        translate([-w/2 + r, -d/2 + r, -h/2 + r])\n            sphere(r=r);\n    }\n}\n\n// Head assembly\nmodule hum_head() {\n    color(body_color) {\n        // Main head\n        translate([0, 0, hum_height + head_height/2])\n            cylinder(h=head_height, r1=15, r2=12);\n        \n        // Neck\n        translate([0, 0, hum_height])\n            cylinder(h=5, r=8);\n    }\n    \n    // Face details\n    color(accent_color) {\n        // Eyes\n        for(x = [-6, 6]) {\n            translate([x, 10, hum_height + head_height - 8])\n                sphere(r=3);\n        }\n        \n        // Mouth slit\n        translate([0, 10, hum_height + 5])\n            cube([10, 1, 2]);\n    }\n}\n\n// Arm assembly\nmodule hum_arm(side) {\n    // side: 1 for right, -1 for left\n    \n    color(body_color) {\n        // Shoulder joint\n        translate([side * shoulder_width/2, 0, hum_height - 5])\n            sphere(r=8);\n        \n        // Upper arm\n        translate([side * shoulder_width/2, 0, hum_height - 20])\n            rotate([0, 90, 0])\n                cylinder(h=arm_length/2, r=6);\n        \n        // Elbow joint\n        translate([side * (shoulder_width/2 + arm_length/2), 0, hum_height - 20])\n            sphere(r=5);\n        \n        // Lower arm\n        translate([side * (shoulder_width/2 + arm_length/2), 0, hum_height - 35])\n            rotate([0, 90, 0])\n                cylinder(h=arm_length/2, r=5);\n    }\n    \n    // Hand\n    color(accent_color) {\n        translate([side * (shoulder_width/2 + arm_length), 0, hum_height - 35])\n            sphere(r=4);\n    }\n}\n\n// Hip assembly\nmodule hum_hips() {\n    color(body_color) {\n        // Hip block\n        translate([0, 0, 10])\n            rounded_box(body_width + 5, body_depth - 5, 20, 3);\n    }\n    \n    // Hip joints\n    color(joint_color) {\n        for(side = [-1, 1]) {\n            translate([side * 12, 0, 5])\n                sphere(r=6);\n        }\n    }\n}\n\n// Leg assembly\nmodule hum_leg(side) {\n    // side: 1 for right, -1 for left\n    \n    color(body_color) {\n        // Upper leg\n        translate([side * 10, 0, -15])\n            cylinder(h=25, r=5);\n        \n        // Knee joint\n        translate([side * 10, 0, -30])\n            sphere(r=4);\n        \n        // Lower leg\n        translate([side * 10, 0, -45])\n            cylinder(h=20, r=4);\n    }\n    \n    // Foot\n    color(accent_color) {\n        translate([side * 10, 5, -60])\n            cube([10, 15, 5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    hum_body();\n    hum_head();\n    hum_hips();\n    \n    // Arms\n    hum_arm(1);   // Right arm\n    hum_arm(-1);  // Left arm\n    \n    // Legs\n    hum_leg(1);   // Right leg\n    hum_leg(-1);  // Left leg\n    \n    // Detail panels\n    color(accent_color) {\n        for(i = [1:4]) {\n            translate([0, body_depth/2 + 1, 20 + i*15])\n                cube([body_width - 20, 1, 8], center=true);\n        }\n    }\n    \n    // Vent details\n    color(joint_color) {\n        for(i = [-1, 1]) {\n            translate([i*20, body_depth/2 + 1, hum_height/2])\n                cube([6, 1, 15], center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "click",
    "openscad_code": "// Realistic 3D-printable retractable ballpoint pen \"click\" mechanism\n// Overall length ~80 mm, diameter ~12 mm, printable without supports\n\n$fn = 36;               // Smooth curves\ntip_len   = 15;         // Metal tip\nbody_len  = 55;         // Main barrel\nbutton_len= 10;         // Top plunger\nwall      = 1.2;        // 3D-print friendly wall thickness\nd_out     = 12;         // Outer Ø\nd_ink     = 3.5;        // Ink tube Ø\nspring_od = 6;          // Compression spring\nspring_len= 25;\n\nmodule main_barrel(){\n    difference(){\n        // Outer shell\n        cylinder(h=body_len, d=d_out, center=false);\n        \n        // Hollow inside for refill + spring\n        translate([0,0,-1])\n            cylinder(h=body_len+2, d=d_out-2*wall, center=false);\n        \n        // Side window to see the ink\n        translate([0,-d_out/2-1, body_len/2])\n            rotate([0,90,0])\n                cylinder(h=20, d=4, center=true);\n    }\n}\n\nmodule conical_tip(){\n    // Tapered metal nose\n    cylinder(h1=tip_len, h2=0, r1=d_out/2, r2=d_out/4, center=false);\n}\n\nmodule click_plunger(){\n    // Top button with three cam lobes\n    union(){\n        // Stem\n        cylinder(h=button_len, d=d_out-2*wall, center=false);\n        // Three lobes for cam action\n        for(i=[0:120:359])\n            rotate([0,0,i])\n                translate([d_out/2-wall, 0, button_len/2])\n                    rotate([90,0,0])\n                        cylinder(h=6, d=4, center=true);\n    }\n}\n\nmodule spring(){\n    // Quick spring representation (coarse for 3D-print)\n    turns = 8;\n    wire_d = 0.8;\n    for(i=[0:turns-1])\n        translate([0,0,i*spring_len/turns])\n            rotate([0,0,i*360/6])\n                torus(ri=spring_od/2-wire_d/2, ro=wire_d/2);\n}\n\nmodule torus(ri, ro){\n    rotate_extrude()\n        translate([ri,0,0])\n            circle(r=ro);\n}\n\n// Assembly\ntranslate([0,0,0])\n    main_barrel();\n\ntranslate([0,0,body_len])\n    click_plunger();\n\ntranslate([0,0,-tip_len])\n    conical_tip();\n\n// Spring visible in cutaway\ntranslate([0,0,body_len-spring_len-button_len/2])\n    spring();",
    "renders": true
  },
  {
    "musical_instrument": "pop",
    "openscad_code": "// Realistic-style medium-detail pop (lollipop) – 3D-printable\n// Dimensions ~60 mm tall; no overhangs >45°\n\n// Overall scale factor\nscale = 1;\n\n// Stick\nmodule stick() {\n    // 4 mm Ø for strength\n    cylinder(h = 55 * scale, d = 4 * scale, $fn = 16);\n}\n\n// Candy spiral\nmodule candy() {\n    // Outer radius 20 mm, thickness 8 mm\n    outer_r = 20 * scale;\n    thickness = 8 * scale;\n    \n    // Build spiral as stacked toroids\n    for (i = [0 : 5 : 180]) {\n        // Decrease radius slightly to make spiral\n        r = outer_r * (1 - i / 450);\n        translate([r * cos(i), r * sin(i), thickness / 2 + i * 0.3])\n            rotate([90, 0, 0])\n                cylinder(h = thickness, d1 = 12 * scale, d2 = 10 * scale, $fn = 24);\n    }\n}\n\n// Wrapper twist\nmodule wrapper() {\n    // Thin wrapper film\n    difference() {\n        sphere(d = 44 * scale, $fn = 48);\n        sphere(d = 42 * scale, $fn = 48);\n    }\n    // Twist tails\n    for (a = [0, 120, 240])\n        rotate([0, 0, a])\n            translate([22 * scale, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 25 * scale, d = 3 * scale, $fn = 8);\n}\n\n// Assemble\nunion() {\n    // Stick\n    translate([0, 0, 0])\n        stick();\n    // Candy on top\n    translate([0, 0, 55 * scale])\n        candy();\n    // Wrapper covering candy\n    translate([0, 0, 55 * scale + 10 * scale])\n        wrapper();\n}",
    "renders": true
  },
  {
    "musical_instrument": "glitch",
    "openscad_code": "// Glitch Artifact - Realistic Style, Medium Complexity\n// A corrupted 3D scan artifact with displaced geometry\n\nmodule corrupted_cube(x, y, z, rot, scale_factor, offset) {\n    translate([x, y, z]) {\n        rotate([rot, rot/2, rot*1.5]) {\n            scale([scale_factor, scale_factor, scale_factor]) {\n                translate([offset, offset/2, -offset]) {\n                    cube([8, 8, 8], center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule data_fragment(x, y, z, length) {\n    translate([x, y, z]) {\n        rotate([0, 90, 45]) {\n            difference() {\n                cube([length, 2, 1], center = true);\n                translate([0, 0, 0.6]) {\n                    cube([length*0.8, 1.5, 0.5], center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule vox_error(x, y, z, size) {\n    translate([x, y, z]) {\n        intersection() {\n            cube([size, size, size]);\n            translate([size/4, size/4, size/4]) {\n                sphere(size/2);\n            }\n        }\n    }\n}\n\ndifference() {\n    // Main corrupted geometry\n    union() {\n        // Base mesh structure\n        difference() {\n            cube([60, 60, 60], center = true);\n            \n            // Hollow center\n            cube([56, 56, 56], center = true);\n            \n            // Corruption holes\n            for (i = [0:5]) {\n                rotate([i*60, i*30, 0]) {\n                    translate([20, 0, 0]) {\n                        cylinder(h = 80, r = 3 + i, center = true);\n                    }\n                }\n            }\n        }\n        \n        // Displaced geometry fragments\n        for (i = [0:8]) {\n            corrupted_cube(\n                sin(i*45)*25,\n                cos(i*45)*25,\n                sin(i*30)*15,\n                i*20,\n                0.8 + sin(i)*0.3,\n                i*2\n            );\n        }\n        \n        // Data fragments\n        for (i = [0:12]) {\n            data_fragment(\n                (i*5 - 30) * 1.2,\n                sin(i*30)*20,\n                cos(i*30)*20,\n                4 + (i % 3)*2\n            );\n        }\n        \n        // Voxel errors\n        for (i = [0:6]) {\n            vox_error(\n                (i-3)*15,\n                (i%2)*10 - 5,\n                (i%3)*10 - 10,\n                8 + i\n            );\n        }\n        \n        // Surface corruption\n        for (i = [0:20]) {\n            translate([\n                sin(i*72)*30,\n                cos(i*72)*30,\n                sin(i*36)*20\n            ]) {\n                rotate([i*18, 0, i*9]) {\n                    cube([2, 2, 2 + sin(i*5)*1.5]);\n                }\n            }\n        }\n    }\n    \n    // Remove bottom for flat base\n    translate([0, 0, -31]) {\n        cube([100, 100, 2], center = true);\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "stutter",
    "openscad_code": "// Realistic Stutter Model – Medium Complexity\n// Overall size ≈ 80 mm (length)\n\n// Parameters\nstutter_length = 80;\nstutter_width = 30;\nstutter_height = 15;\n\nwall_thickness = 2;\nslot_width = 8;\nslot_depth = 6;\n\nscrew_diameter = 4;\nscrew_head_diameter = 8;\nscrew_head_height = 2;\n\n// Main body\nmodule stutter_body() {\n    difference() {\n        // Outer block\n        cube([stutter_length, stutter_width, stutter_height], center = true);\n\n        // Central slot for door\n        translate([0, 0, stutter_height/2 - slot_depth])\n            cube([stutter_length - 10, slot_width, slot_depth + 0.1], center = true);\n\n        // Screw recesses (4 corners)\n        for (x = [-1, 1])\n            for (y = [-1, 1])\n                translate([x * (stutter_length/2 - 8), y * (stutter_width/2 - 8), -stutter_height/2])\n                    cylinder(d = screw_head_diameter, h = screw_head_height + 0.1, $fn = 20);\n    }\n}\n\n// Chamfered edges for realism\nmodule chamfer_edges() {\n    // Top front edge\n    difference() {\n        translate([0, 0, stutter_height/2])\n            cube([stutter_length, stutter_width, wall_thickness], center = true);\n        translate([0, 0, stutter_height/2 + wall_thickness])\n            rotate([0, 45, 0])\n                cube([stutter_length + 2, stutter_width + 2, wall_thickness], center = true);\n    }\n\n    // Top back edge\n    difference() {\n        translate([0, 0, stutter_height/2])\n            cube([stutter_length, stutter_width, wall_thickness], center = true);\n        translate([0, 0, stutter_height/2 + wall_thickness])\n            rotate([0, -45, 0])\n                cube([stutter_length + 2, stutter_width + 2, wall_thickness], center = true);\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * (stutter_length/2 - 8), y * (stutter_width/2 - 8), 0])\n                rotate([90, 0, 0])\n                    cylinder(d = screw_diameter, h = stutter_height + 0.2, $fn = 20);\n}\n\n// Hinge barrel (realistic detail)\nmodule hinge_barrel() {\n    translate([stutter_length/2, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(d = 10, h = stutter_width, $fn = 30);\n}\n\n// Combine all parts\nunion() {\n    stutter_body();\n    chamfer_edges();\n    hinge_barrel();\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "musical_instrument": "buffer",
    "openscad_code": "// Realistic buffer (railway / railroad style buffer stop)\n// Overall ~70 mm long, 35 mm wide, 45 mm tall – well within FDM printer limits\n// All angles ≤45° to avoid support; wall thickness ≥1.5 mm\n\n$fn = 36;   // smooth curves\n\nmodule main_plate() {\n    // 4 mm thick base plate with rounded corners\n    difference() {\n        hull() {\n            translate([-2, -2, 0]) cylinder(h = 4, r = 2);\n            translate([62, -2, 0]) cylinder(h = 4, r = 2);\n            translate([62, 37, 0]) cylinder(h = 4, r = 2);\n            translate([-2, 37, 0]) cylinder(h = 4, r = 2);\n        }\n        // four bolt holes\n        for(x = [10, 50], y = [5, 30])\n            translate([x, y, -1]) cylinder(h = 6, r = 1.6);\n    }\n}\n\nmodule rail_profile() {\n    // simple 1:1 50 kg/m rail profile extruded\n    linear_extrude(height = 60)\n    polygon([\n        [0,0], [14,0], [16,3], [16,12], [9,12], [7,17], [7,23], [0,23]\n    ]);\n}\n\nmodule rail_section(l = 60) {\n    // left + right rails\n    for(side = [-1, 1])\n        translate([0, side * 20, 0])\n            rail_profile();\n    // 3 sleepers for stability\n    for(i = [0 : 1 : 2])\n        translate([i * 25, -25, 0])\n            cube([4, 50, 3]);\n}\n\nmodule buffer_head() {\n    // main cylindrical impact face\n    cylinder(h = 12, r = 15);\n    // reinforcing back plate\n    translate([0, 0, 8])\n        cylinder(h = 4, r = 18);\n    // central boss for spring rod\n    translate([0, 0, -10])\n        cylinder(h = 10, r = 6);\n}\n\nmodule spring_assembly() {\n    // six coils around a central rod\n    color(\"silver\")\n    union() {\n        // central rod\n        cylinder(h = 30, r = 3);\n        // coiled spring using torus segments\n        for(i = [0 : 5 : 25])\n            translate([0, 0, i])\n                rotate_extrude(angle = 360, $fn = 16)\n                    translate([7, 0, 0]) circle(r = 1.2);\n    }\n}\n\nmodule bracket() {\n    // two upright plates holding spring\n    for(side = [-1, 1]) {\n        translate([side * 8, 0, 0])\n            cube([3, 10, 30], center = true);\n    }\n    // top tie bar\n    translate([0, 0, 15])\n        cube([20, 3, 3], center = true);\n}\n\n// Assemble the buffer\ntranslate([0, 0, 4])\n    main_plate();\n\ntranslate([5, 17.5, 4])\n    rail_section();\n\ntranslate([65, 17.5, 7])\n    bracket();\n\ntranslate([65, 17.5, 22])\n    spring_assembly();\n\ntranslate([65, 17.5, 30])\n    rotate([0, 180, 0])\n        buffer_head();",
    "renders": true
  },
  {
    "musical_instrument": "looper",
    "openscad_code": "// Realistic Looper Pedal - Medium Complexity\n// Dimensions: 95x45x30mm (approximate)\n\n$fn = 50;  // Smooth curves\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Main box body with rounded edges\n        minkowski() {\n            cube([85, 35, 25], center=true);\n            sphere(2);\n        }\n        \n        // Hollow out interior\n        minkowski() {\n            cube([78, 28, 22], center=true);\n            sphere(1.5);\n        }\n        \n        // Bottom opening for electronics access\n        translate([0, 0, -12.5])\n            cube([82, 32, 5], center=true);\n    }\n}\n\n// Control knobs\nmodule knob(radius, height) {\n    difference() {\n        // Knob base\n        cylinder(h=height, r=radius, center=true);\n        \n        // Indicator line\n        rotate([90, 0, 0])\n            translate([0, 0, -height/2 - 0.1])\n                cube([radius*0.5, height+0.2, 0.5], center=true);\n        \n        // Grip ridges\n        for(i=[0:11]) {\n            rotate([0, 0, i*30])\n                translate([0, radius*0.8, 0])\n                    cube([0.5, radius*0.2, height*1.2], center=true);\n        }\n    }\n}\n\n// Footswitch assembly\nmodule footswitch() {\n    // Switch base\n    translate([0, 0, 15])\n        difference() {\n            cylinder(h=8, r=12, center=true);\n            cylinder(h=9, r=10.5, center=true);\n        }\n    \n    // Switch top\n    translate([0, 0, 20.5])\n        difference() {\n            minkowski() {\n                cylinder(h=3, r=11, center=true);\n                sphere(1);\n            }\n            cylinder(h=4, r=9, center=true);\n        }\n    \n    // LED ring\n    translate([0, 0, 16])\n        color([1, 0, 0])\n            cylinder(h=1, r1=12.5, r2=12.5, center=true);\n}\n\n// Input/output jacks\nmodule jack() {\n    difference() {\n        // Jack body\n        cylinder(h=10, r=6, center=true);\n        \n        // Jack hole\n        cylinder(h=11, r=4, center=true);\n    }\n}\n\n// Control labels\nmodule label(text, size=2) {\n    linear_extrude(height=0.2)\n        text(text, size=size, halign=\"center\", valign=\"center\");\n}\n\n// Main assembly\nmodule looper_pedal() {\n    // Body\n    body_shell();\n    \n    // Knobs\n    translate([-25, 10, 15]) color(\"silver\") knob(5, 4);\n    translate([-25, -10, 15]) color(\"silver\") knob(5, 4);\n    \n    // Footswitch\n    translate([0, 0, 0]) footswitch();\n    \n    // Jacks\n    translate([-42.5, 0, 0]) rotate([0, 90, 0]) jack();\n    translate([42.5, 0, 0]) rotate([0, 90, 0]) jack();\n    translate([42.5, -15, 0]) rotate([0, 90, 0]) jack();\n    \n    // Rubber feet\n    for(x=[-35, 35]) {\n        for(y=[-12, 12]) {\n            translate([x, y, -15]) \n                cylinder(h=2, r=3);\n        }\n    }\n    \n    // Control labels\n    translate([-25, 10, 17.5]) rotate([0, 0, 0]) label(\"LEVEL\");\n    translate([-25, -10, 17.5]) rotate([0, 0, 0]) label(\"FEEDBACK\");\n}\n\n// Render the pedal\nlooper_pedal();",
    "renders": true
  },
  {
    "musical_instrument": "overdub",
    "openscad_code": "// Overdub Recording Device - Realistic Style, Medium Complexity\n\n$fn = 32;\n\n// Overall dimensions\ndevice_width = 75;\ndevice_height = 35;\ndevice_depth = 85;\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Outer shell\n        translate([device_width/2, device_depth/2, device_height/2])\n            cube([device_width, device_depth, device_height], center=true);\n        \n        // Top recess\n        translate([device_width/2, device_depth/2, device_height-3])\n            cube([device_width-4, device_depth-4, 6], center=true);\n        \n        // Front panel recess\n        translate([device_width/2, 3, device_height/2])\n            cube([device_width-4, 8, device_height-4], center=true);\n    }\n}\n\n// Front panel with controls\nmodule front_panel() {\n    color(\"darkslategray\")\n    translate([device_width/2, 8, device_height/2])\n        cube([device_width-6, 2, device_height-6], center=true);\n}\n\n// Knobs\nmodule knob(x_pos, y_pos, z_pos, diameter, height) {\n    translate([x_pos, y_pos, z_pos]) {\n        // Base\n        cylinder(h=height, d=diameter, $fn=20);\n        // Grip\n        translate([0, 0, height])\n            cylinder(h=height*0.8, d=diameter*0.6, $fn=18);\n    }\n}\n\n// Buttons\nmodule button(x_pos, y_pos, z_pos, diameter) {\n    translate([x_pos, y_pos, z_pos]) {\n        // Button base\n        cylinder(h=2, d=diameter+2, $fn=16);\n        // Button top\n        translate([0, 0, 2])\n            cylinder(h=1.5, d=diameter, $fn=16);\n    }\n}\n\n// Foot switches\nmodule foot_switch(x_pos, y_pos) {\n    translate([x_pos, y_pos, 3]) {\n        difference() {\n            // Switch housing\n            cube([20, 25, 8], center=true);\n            // Cutout\n            translate([0, 0, -1])\n                cube([16, 21, 10], center=true);\n        }\n        // Switch top\n        translate([0, -3, 8])\n            cube([18, 18, 3], center=true);\n    }\n}\n\n// LED indicators\nmodule led(x_pos, y_pos, z_pos, color_name) {\n    color(color_name)\n    translate([x_pos, y_pos, z_pos])\n        sphere(d=3);\n}\n\n// Display screen\nmodule display() {\n    translate([device_width/2, 12, device_height-12])\n        cube([40, 2, 12], center=true);\n}\n\n// Input/output jacks\nmodule jack(x_pos, y_pos) {\n    translate([x_pos, y_pos, device_height/2]) {\n        // Outer ring\n        cylinder(h=4, d=8, $fn=16);\n        // Inner hole\n        difference() {\n            translate([0, 0, -1])\n                cylinder(h=6, d=4, $fn=16);\n        }\n    }\n}\n\n// Generate the complete model\nunion() {\n    // Main components\n    main_body();\n    front_panel();\n    \n    // Controls on top\n    // Volume knob\n    knob(15, 25, device_height, 8, 3);\n    \n    // Parameter knobs\n    for(i = [0:2]) {\n        knob(35 + i*12, 25, device_height, 6, 2.5);\n    }\n    \n    // Buttons\n    button(15, 45, device_height, 6);\n    button(30, 45, device_height, 6);\n    button(45, 45, device_height, 6);\n    \n    // Display\n    display();\n    \n    // LEDs\n    led(60, 20, device_height-8, \"red\");\n    led(60, 25, device_height-8, \"green\");\n    led(60, 30, device_height-8, \"yellow\");\n    \n    // Foot switches on bottom front\n    foot_switch(20, 10);\n    foot_switch(55, 10);\n    \n    // Input/Output jacks on sides\n    jack(5, device_depth/2);\n    jack(device_width-5, device_depth/2);\n    jack(device_width/2, 5);\n    jack(device_width/2, device_depth-5);\n}",
    "renders": true
  },
  {
    "musical_instrument": "scratch",
    "openscad_code": "// Realistic 3D-printable scratch (cat scratch mark)\n// Overall footprint ≈ 70 mm × 35 mm × 8 mm\n\n$fn = 36;\n\n// Main plate that carries the scratch pattern\nmodule scratch_plate() {\n    difference() {\n        // Base plate\n        cube([70, 35, 2], center = true);\n\n        // Outer chamfers for printability\n        translate([0, 0, 1]) {\n            hull() {\n                translate([-35, -17.5, -1]) cube([70, 35, 0.1]);\n                translate([-34, -16.5, 0]) cube([68, 33, 0.1]);\n            }\n        }\n    }\n}\n\n// Single claw groove\nmodule claw_mark(depth = 1.8, width = 2.2, length = 25, angle = 0) {\n    rotate([0, 0, angle])\n        translate([0, 0, -depth / 2])\n            cube([length, width, depth], center = true);\n}\n\n// Five parallel claw grooves forming a realistic scratch\nmodule scratch_group() {\n    difference() {\n        children();\n        \n        // Five claw grooves with slight randomness\n        for (i = [0:4]) {\n            claw_mark(\n                depth = 1.5 + 0.3 * sin(i * 73),\n                width = 2.0 + 0.4 * cos(i * 31),\n                length = 22 + 3 * sin(i * 11),\n                angle = -12 + 3 * i\n            );\n        }\n    }\n}\n\n// Surface texture inside grooves (small pits for realism)\nmodule texture_pits() {\n    for (i = [0:12]) {\n        translate([\n            -30 + 60 * (i / 12.0),\n            -12 + 24 * sin(i * 17),\n            -1.0\n        ])\n            sphere(d = 0.6 + 0.3 * sin(i * 7));\n    }\n}\n\n// Assemble the model\nunion() {\n    scratch_plate();\n    translate([0, 0, 1]) scratch_group() children();\n    translate([0, 0, 0.5]) texture_pits();\n}",
    "renders": true
  },
  {
    "musical_instrument": "jitter",
    "openscad_code": "// OpenSCAD Jitter (vintage camera stabilizer) – medium complexity, realistic style\n// Overall size ~80 mm\n\n$fa = 2;\n$fs = 0.5;\n\n// Parameters ---------------------------------------------\nhandle_r   = 12;\nhandle_h   = 70;\nbase_w     = 60;\nbase_d     = 40;\nbase_h     = 15;\npost_h     = 30;\nrod_d      = 6;\nrod_gap    = 12;\nplate_t    = 4;\nwall_t     = 2;\ncam_hole_d = 22;\n\n// Modules ------------------------------------------------\nmodule handle() {\n    // Main grip tube\n    difference() {\n        cylinder(h = handle_h, r = handle_r);\n        translate([0, 0, -1])\n            cylinder(h = handle_h + 2, r = handle_r - wall_t);\n    }\n    // End cap\n    translate([0, 0, handle_h])\n        cylinder(h = 2, r = handle_r + 1);\n}\n\nmodule gimbal_base() {\n    // Bottom plate\n    cube([base_w, base_d, base_h], center = true);\n    \n    // Four corner posts\n    for (x = [-1, 1])\n    for (y = [-1, 1])\n        translate([x * (base_w/2 - 3), y * (base_d/2 - 3), base_h/2 + post_h/2])\n            cube([6, 6, post_h], center = true);\n    \n    // Camera hole\n    translate([0, 0, -1])\n        cylinder(h = base_h + 2, r = cam_hole_d/2);\n}\n\nmodule cross_rods() {\n    // Two perpendicular rods\n    for (a = [0, 90]) {\n        rotate([0, 0, a])\n            translate([0, -rod_gap/2, base_h + post_h/2])\n                cube([rod_d, rod_gap, rod_d], center = true);\n    }\n}\n\nmodule top_plate() {\n    translate([0, 0, base_h + post_h + plate_t/2])\n        cube([base_w - 6, base_d - 6, plate_t], center = true);\n}\n\n// Assembly -----------------------------------------------\ntranslate([0, 0, handle_h/2])\n    handle();\n\ntranslate([0, 0, handle_h])\n    gimbal_base();\n\ntranslate([0, 0, handle_h])\n    cross_rods();\n\ntranslate([0, 0, handle_h])\n    top_plate();",
    "renders": true
  },
  {
    "musical_instrument": "warble",
    "openscad_code": "// Warbler bird 3D printable model (medium complexity, realistic style)\n// Approx. 70 mm long\n\n$fn = 36;\n\n// Overall scale\nscale(0.7) {\n\n// Body assembly\nunion() {\n    // Main body\n    rotate([0, -10, 0]) \n    scale([1.0, 0.7, 0.7])\n    sphere(d=30);\n\n    // Head\n    translate([14, 0, 5])\n    sphere(d=20);\n\n    // Tail\n    translate([-18, 0, -2])\n    rotate([0, 15, 0])\n    difference() {\n        cube([12, 8, 2]);\n        translate([6, 4, -0.5])\n        sphere(d=10);\n    }\n\n    // Wing left\n    translate([0, 0, 5])\n    rotate([20, 0, 30])\n    scale([1, 0.2, 0.6])\n    sphere(d=25);\n\n    // Wing right\n    translate([0, 0, 5])\n    rotate([20, 0, -30])\n    scale([1, 0.2, 0.6])\n    sphere(d=25);\n\n    // Beak\n    translate([23, 0, 2])\n    rotate([0, -20, 0])\n    cylinder(h=8, r1=2, r2=0.5);\n\n    // Eye left\n    translate([17, 6, 7])\n    sphere(d=3);\n\n    // Eye right\n    translate([17, -6, 7])\n    sphere(d=3);\n\n    // Leg left\n    translate([5, 5, -12])\n    cylinder(h=12, r=1.2);\n\n    // Foot left\n    translate([5, 7, -24])\n    rotate([90, 0, 0])\n    linear_extrude(height=0.8)\n    polygon(points=[[0,0],[4,2],[6,0],[8,2]]);\n\n    // Leg right\n    translate([5, -5, -12])\n    cylinder(h=12, r=1.2);\n\n    // Foot right\n    translate([5, -7, -24])\n    rotate([90, 0, 0])\n    linear_extrude(height=0.8)\n    polygon(points=[[0,0],[-4,2],[-6,0],[-8,2]]);\n\n    // Feather texture (simple ridges on wings and tail)\n    for (i=[-10:5:10]) {\n        translate([i, 0, 5])\n        rotate([20, 0, 30])\n        scale([0.1, 0.05, 0.6])\n        sphere(d=25);\n    }\n\n    for (i=[-10:5:10]) {\n        translate([i, 0, 5])\n        rotate([20, 0, -30])\n        scale([0.1, 0.05, 0.6])\n        sphere(d=25);\n    }\n\n    // Belly patch\n    translate([0, 0, -8])\n    scale([0.8, 0.5, 0.3])\n    sphere(d=25);\n}\n\n}",
    "renders": true
  },
  {
    "musical_instrument": "flutter",
    "openscad_code": "// Flutter (game controller) – medium-complexity, realistic style\n// Overall dimensions: ~88 mm × 50 mm × 15 mm\n// Optimized for 3D printing: 0.8 mm walls, no steep overhangs\n\n$fn=30;\n\n// Parameters\nbody_w = 88;\nbody_h = 50;\nbody_t = 15;\n\nedge_r = 5;          // rounded corners\nwall_t = 1.6;        // shell thickness (2×0.4 mm walls)\nbutton_r = 6.5;\nbutton_h = 2;\nd_pad_r = 8;\nd_pad_h = 2;\nstick_r = 7;\nstick_h = 8;\nstick_shaft_r = 4;\nbump_w = 10;\nbump_h = 4;\nbump_t = 2;\n\n// Main shell ---------------------------------------------------------------\nmodule body_shell() {\n    difference() {\n        // outer rounded plate\n        minkowski() {\n            cube([body_w, body_h, body_t], center=true);\n            cylinder(r=edge_r, h=0.1, center=true);\n        }\n        // hollow inside\n        minkowski() {\n            cube([body_w-2*wall_t, body_h-2*wall_t, body_t+1], center=true);\n            cylinder(r=edge_r-wall_t, h=0.1, center=true);\n        }\n    }\n}\n\n// A-button cluster ---------------------------------------------------------\nmodule abxy_buttons() {\n    for (pos = [[body_w/2-15, body_h/2-15], [body_w/2-15, -body_h/2+15],\n               [body_w/2-25, body_h/2-15], [body_w/2-25, -body_h/2+15]]) {\n        translate([pos[0], pos[1], body_t/2+button_h/2])\n            cylinder(r=button_r/2, h=button_h);\n    }\n}\n\n// D-pad --------------------------------------------------------------------\nmodule d_pad() {\n    translate([-body_w/2+20, 0, body_t/2+d_pad_h/2])\n        union() {\n            // center disc\n            cylinder(r=d_pad_r, h=d_pad_h);\n            // four arrows\n            for (ang = [0, 90, 180, 270])\n                rotate([0, 0, ang])\n                    translate([d_pad_r, 0, 0])\n                        cube([d_pad_r/2, 4, d_pad_h], center=true);\n        }\n}\n\n// Analog stick -------------------------------------------------------------\nmodule analog_stick() {\n    translate([0, -body_h/2+20, body_t/2]) {\n        // shaft\n        cylinder(r=stick_shaft_r, h=stick_h, center=false);\n        // cap\n        translate([0, 0, stick_h])\n            cylinder(r=stick_r, h=2, center=false);\n    }\n}\n\n// Shoulder buttons (L/R bumpers) ------------------------------------------\nmodule bumpers() {\n    for (side = [-1, 1])\n        translate([side*(body_w/2-bump_w/2), 0, body_t/2+bump_t/2])\n            rotate([90, 0, 0])\n                cylinder(h=bump_w, r=bump_t, center=true);\n}\n\n// USB-C slot ---------------------------------------------------------------\nmodule usbc_port() {\n    translate([body_w/2+0.1, 0, 0])\n        cube([wall_t+0.1, 8, 4], center=true);\n}\n\n// Compose final model ------------------------------------------------------\nunion() {\n    body_shell();\n    abxy_buttons();\n    d_pad();\n    analog_stick();\n    bumpers();\n    difference() {\n        body_shell();\n        usbc_port();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "wow",
    "openscad_code": "// Wow (World of Warcraft logo) - Realistic style, medium complexity\n// Designed for 3D printing - 80mm width, 4mm thick\n\n$fn = 64; // Smooth curves\n\nmodule wow_logo() {\n    // Base thickness\n    thickness = 4;\n    \n    // Outer ring\n    difference() {\n        // Main ring body\n        cylinder(h=thickness, r=40, $fn=128);\n        \n        // Inner hole\n        translate([0, 0, -0.1])\n            cylinder(h=thickness+0.2, r=35, $fn=128);\n    }\n    \n    // W letter construction\n    union() {\n        // Left vertical bar\n        translate([-20, 0, 0])\n            cube([8, 35, thickness], center=true);\n        \n        // Right vertical bar\n        translate([20, 0, 0])\n            cube([8, 35, thickness], center=true);\n        \n        // Center V shape\n        // Left diagonal\n        translate([-10, 0, thickness/2])\n            rotate([0, 0, -25])\n                cube([6, 25, thickness], center=true);\n        \n        // Right diagonal\n        translate([10, 0, thickness/2])\n            rotate([0, 0, 25])\n                cube([6, 25, thickness], center=true);\n        \n        // Bottom connectors\n        // Left bottom horizontal\n        translate([-15, -15, 0])\n            cube([20, 6, thickness], center=true);\n        \n        // Right bottom horizontal\n        translate([15, -15, 0])\n            cube([20, 6, thickness], center=true);\n        \n        // Top middle horizontal\n        translate([0, 10, 0])\n            cube([25, 6, thickness], center=true);\n    }\n    \n    // Decorative rivets around ring\n    for(i = [0:11]) {\n        rotate([0, 0, i*30])\n            translate([37.5, 0, thickness/2])\n                sphere(r=1.5, center=true);\n    }\n    \n    // Small detail spheres at letter intersections\n    translate([-10, 5, 0])\n        sphere(r=2, center=true);\n    translate([10, 5, 0])\n        sphere(r=2, center=true);\n    translate([0, -10, 0])\n        sphere(r=2, center=true);\n}\n\n// Generate the logo centered at origin\nwow_logo();",
    "renders": true
  },
  {
    "musical_instrument": "tape",
    "openscad_code": "// Realistic cassette tape – medium complexity\n// Approx. 102 mm × 64 mm × 12 mm (print-friendly, no steep overhangs)\n\n$fn = 36;\n\n// Overall dimensions\ntape_w = 102;\ntape_h = 64;\ntape_t = 12;\nwall = 1.6;          // wall thickness for 3D printing\nscrew_r = 2.1;       // screw hole radius\nhub_r = 5.2;         // tape-hub radius\nwindow_r = 12;       // viewing window radius\nlabel_w = 70;\nlabel_h = 30;\n\n// Main body with recessed center\nmodule tape_body() {\n    difference() {\n        // Outer shell\n        cube([tape_w, tape_h, tape_t], center = true);\n        \n        // Hollow cavity\n        translate([0, 0, -wall/2])\n            cube([tape_w - 2*wall, tape_h - 2*wall, tape_t + 0.1], center = true);\n        \n        // Left hub cavity\n        translate([-tape_w/4, 0, -0.1])\n            cylinder(h = tape_t + 0.2, r = hub_r + wall);\n        \n        // Right hub cavity\n        translate([ tape_w/4, 0, -0.1])\n            cylinder(h = tape_t + 0.2, r = hub_r + wall);\n        \n        // Five screw holes – corners + center\n        for (x = [-1, 0, 1])\n        for (y = [-1, 1]) {\n            if (x == 0 && y == 1) continue;  // skip middle-top\n            translate([x * 46, y * 28, -1])\n                cylinder(h = tape_t + 2, r = screw_r);\n        }\n        \n        // Viewing windows\n        translate([0, -tape_h/4, -1])\n            cylinder(h = tape_t + 2, r = window_r);\n    }\n}\n\n// Small tape-hub spool\nmodule hub() {\n    difference() {\n        cylinder(h = tape_t - 1, r = hub_r);\n        translate([0, 0, -0.1])\n            cylinder(h = tape_t + 0.2, r = hub_r - wall);\n    }\n}\n\n// Label recess on top face\nmodule label_recess() {\n    translate([0, 0, tape_t/2 - 0.2])\n        cube([label_w, label_h, 0.4], center = true);\n}\n\n// Textured grip ridges on bottom\nmodule bottom_grips() {\n    for (i = [-4:4]) {\n        translate([i*10, 0, -tape_t/2 + 0.8])\n            cube([2, tape_h - 10, 0.8], center = true);\n    }\n}\n\n// Combine all parts\nunion() {\n    tape_body();\n    \n    // Left hub\n    translate([-tape_w/4, 0, 0])\n        hub();\n    \n    // Right hub\n    translate([ tape_w/4, 0, 0])\n        hub();\n    \n    // Label recess\n    label_recess();\n    \n    // Bottom grips\n    bottom_grips();\n}",
    "renders": true
  },
  {
    "musical_instrument": "vinyl",
    "openscad_code": "// Vinyl Record with realistic details\n// 33 RPM LP size scaled for 3D printing\n\n// Main parameters\nrecord_diameter = 80;           // Scaled down from 300mm LP\nrecord_thickness = 1.2;\ngroove_depth = 0.2;\ngroove_width = 0.3;\ncenter_hole_diameter = 7.24;    // Scaled from 7.24mm\nlabel_diameter = 40;            // Scaled from 175mm\nlabel_thickness = 0.1;\nedge_bevel = 0.3;\n\n// Color definitions\nvinyl_color = \"Black\";\nlabel_color = [0.9, 0.1, 0.1];  // Red label\n\n// Create the vinyl record\nmodule vinyl_record() {\n    difference() {\n        // Main vinyl body\n        union() {\n            // Beveled edge\n            cylinder(h=record_thickness, d=record_diameter, $fn=100);\n            \n            // Top edge bevel\n            translate([0, 0, record_thickness - edge_bevel])\n                cylinder(h=edge_bevel, d1=record_diameter, d2=record_diameter - 2*edge_bevel, $fn=100);\n            \n            // Bottom edge bevel\n            translate([0, 0, 0])\n                cylinder(h=edge_bevel, d1=record_diameter - 2*edge_bevel, d2=record_diameter, $fn=100);\n        }\n        \n        // Center hole\n        translate([0, 0, -0.1])\n            cylinder(h=record_thickness + 0.2, d=center_hole_diameter, $fn=50);\n        \n        // Label recess\n        translate([0, 0, record_thickness - label_thickness])\n            cylinder(h=label_thickness + 0.1, d=label_diameter, $fn=100);\n    }\n}\n\n// Create spiral grooves\nmodule grooves() {\n    // Parameters for spiral\n    turns = 50;\n    pitch = 0.5;\n    groove_radius = (record_diameter - 2*label_diameter) / 4;\n    \n    // Draw spiral grooves using small cylinders\n    for (i = [1:turns]) {\n        angle = i * 360 / turns;\n        radius = label_diameter/2 + i * pitch/2;\n        \n        if (radius < record_diameter/2 - 2) {\n            translate([cos(angle) * radius, sin(angle) * radius, record_thickness - groove_depth/2])\n                rotate([90, 0, angle])\n                    cylinder(h=groove_width, d=groove_depth*2, $fn=6);\n        }\n    }\n}\n\n// Create record label\nmodule record_label() {\n    color(label_color)\n        translate([0, 0, record_thickness - label_thickness])\n            cylinder(h=label_thickness, d=label_diameter, $fn=100);\n}\n\n// Create spindle hole reinforcement\nmodule spindle_reinforcement() {\n    difference() {\n        // Reinforcement ring\n        cylinder(h=record_thickness, d=center_hole_diameter + 4, $fn=30);\n        \n        // Hollow center\n        cylinder(h=record_thickness + 0.2, d=center_hole_diameter, $fn=30);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    color(\"black\") vinyl_record();\n    \n    // Add grooves (simplified representation)\n    %grooves();\n    \n    // Add label\n    record_label();\n    \n    // Add spindle reinforcement\n    translate([0, 0, 0])\n        color(\"black\")\n            spindle_reinforcement();\n}\n\n// Add subtle surface texture\nmodule surface_texture() {\n    for (i = [0:10:360]) {\n        rotate([0, 0, i])\n            translate([record_diameter/2 - 1, 0, record_thickness/2])\n                cube([2, 0.1, record_thickness], center=true);\n    }\n}\n\n// Render the final model\ntranslate([0, 0, 0])\n    union() {\n        vinyl_record();\n        record_label();\n        spindle_reinforcement();\n    }",
    "renders": true
  },
  {
    "musical_instrument": "digital",
    "openscad_code": "// Digital clock – realistic, medium complexity\n// Overall size: 100 mm × 50 mm × 30 mm (width × height × depth)\n\n// Wall thickness for 3D printing\nwall = 2.0;\n\n// Main clock body\nmodule clock_body() {\n    difference() {\n        // Outer rounded box\n        hull() {\n            translate([-50,-25,-15]) cube([100,50,30], center=true);\n            translate([-50,-25, 15]) cube([100,50,30], center=true);\n        }\n        // Hollow inside\n        hull() {\n            translate([-48,-23,-13]) cube([96,46,26], center=true);\n            translate([-48,-23, 13]) cube([96,46,26], center=true);\n        }\n    }\n}\n\n// Four 7-segment digits\nmodule digit(pos_x) {\n    translate([pos_x,0,0]) {\n        // Vertical segments\n        for (x = [-6, 6])\n            for (y = [-10, 0, 10])\n                translate([x, y, 0])\n                    rotate([90,0,0])\n                        cylinder(h=1.5, d=4, $fn=8);\n        // Horizontal segments\n        for (y = [-14, 0, 14])\n            for (x = [-3, 0, 3])\n                translate([x, y, 0])\n                    rotate([0,90,0])\n                        cylinder(h=1.5, d=4, $fn=8);\n    }\n}\n\n// Display mask with four digit windows\nmodule display_mask() {\n    difference() {\n        // Mask plate\n        translate([0,0,17])\n            cube([90,40,wall], center=true);\n        // Cutouts for digits\n        for (dx = [-30,-10,10,30])\n            translate([dx,0,17])\n                cube([12,22,wall+0.1], center=true);\n    }\n}\n\n// Buttons on top\nmodule buttons() {\n    for (x = [-25, -15, -5, 5]) {\n        translate([x, 20, 10])\n            cylinder(h=5, d=6, $fn=16);\n    }\n}\n\n// Battery compartment on back\nmodule battery_compartment() {\n    difference() {\n        translate([0,0,-15+wall])\n            cube([50,30,wall], center=true);\n        translate([0,0,-15+wall-0.1])\n            cube([46,26,wall+0.2], center=true);\n    }\n}\n\n// Ventilation slots\nmodule vents() {\n    for (x = [-40:10:40])\n        translate([x, -25, 0])\n            cube([6,wall,30], center=true);\n}\n\n// Assemble complete model\nunion() {\n    clock_body();\n    display_mask();\n    buttons();\n    battery_compartment();\n    vents();\n    // Four digits\n    digit(-30);\n    digit(-10);\n    digit(10);\n    digit(30);\n}",
    "renders": true
  },
  {
    "musical_instrument": "analog",
    "openscad_code": "// Analog wrist-watch, ~45 mm case, printable without supports\n// Overall height 12.5 mm → safe 0.25 mm layer-height\n\n$fa = 2; $fs = 0.5;\n\n// ---------- parameters ----------\ndia_case   = 45;      // outer case diameter\nthick_case =  8;      // case thickness\nthick_face =  1.5;    // dial sheet\ndia_crown  =  6;\nlen_crown  = 10;\nthick_glass=  1.5;    // printed clear filament\ndia_hole   =  3;      // spring-bar holes\nlen_lug    = 22;      // lug tip-to-tip\nthick_lug  =  4;\n\n// ---------- case ----------\nmodule case() {\n    difference() {\n        // main body\n        cylinder(d = dia_case, h = thick_case);\n        // hollow inside\n        translate([0,0,-0.1])\n            cylinder(d = dia_case-4, h = thick_case+0.2);\n        // top recess for dial+glass\n        translate([0,0,thick_case-thick_face-thick_glass])\n            cylinder(d = dia_case-2, h = thick_face+thick_glass+0.1);\n    }\n}\n\n// ---------- lugs (spring-bar loops) ----------\nmodule lugs() {\n    for (mir=[0,1])     // left & right\n        mirror([mir,0,0])\n            translate([dia_case/2,0,thick_case/2])\n                rotate([90,0,0])\n                    difference() {\n                        // solid lug\n                        translate([-len_lug/2,0,-thick_lug/2])\n                            cube([len_lug, thick_case/2, thick_lug], center=true);\n                        // spring-bar hole\n                        translate([0,0,0])\n                            rotate([0,90,0])\n                                cylinder(d = dia_hole, h = thick_lug+0.2, center=true);\n                    }\n}\n\n// ---------- crown ----------\nmodule crown() {\n    translate([dia_case/2,0,thick_case/2])\n        rotate([0,90,0])\n            difference() {\n                // knurled cylinder\n                union() {\n                    cylinder(d = dia_crown, h = len_crown);\n                    for (i=[0:5:355])   // knurling rings\n                        rotate([0,0,i])\n                            translate([0,0,0])\n                                scale([1.05,1.05,1])\n                                cylinder(d = dia_crown+0.4, h = 0.8);\n                }\n                // cut flat end\n                translate([0,0,len_crown-1])\n                    cube([dia_crown+2,dia_crown+2,2], center=true);\n            }\n}\n\n// ---------- dial ----------\nmodule dial() {\n    translate([0,0,thick_case-thick_face-thick_glass])\n        difference() {\n            cylinder(d = dia_case-2, h = thick_face, center=false);\n            // center hole\n            cylinder(d = 2.5, h = thick_face+0.2);\n            // minute marks (60 ticks)\n            for (i=[0:5:355])\n                rotate([0,0,i])\n                    translate([dia_case/2-3.5,0,-0.1])\n                        cube([0.5,1.2,thick_face+0.2]);\n            // hour marks (12 ticks)\n            for (i=[0:30:330])\n                rotate([0,0,i])\n                    translate([dia_case/2-3.5,0,-0.1])\n                        cube([1,2.5,thick_face+0.2]);\n        }\n}\n\n// ---------- hands ----------\nmodule hands() {\n    // hour hand\n    color(\"black\")\n    translate([0,0,thick_case-thick_face-thick_glass+0.2])\n        rotate([0,0,30]) // 1 o'clock\n            linear_extrude(height = 0.8)\n                polygon(points=[[0,0],[1.2,0],[1,9],[0,10],[-1,9],[-1.2,0]]);\n    // minute hand\n    color(\"black\")\n    translate([0,0,thick_case-thick_face-thick_glass+1.1])\n        rotate([0,0,180]) // 30 minutes\n            linear_extrude(height = 0.8)\n                polygon(points=[[0,0],[1,0],[0.8,13],[0,14],[-0.8,13],[-1,0]]);\n    // second hand\n    color(\"red\")\n    translate([0,0,thick_case-thick_face-thick_glass+1.9])\n        rotate([0,0,270]) // 45 seconds\n            linear_extrude(height = 0.6)\n                polygon(points=[[0,0],[0.5,0],[0.4,16],[0,17],[-0.4,16],[-0.5,0]]);\n}\n\n// ---------- glass ----------\nmodule glass() {\n    translate([0,0,thick_case-thick_glass])\n        cylinder(d = dia_case-2, h = thick_glass);\n}\n\n// ---------- assembly ----------\ncase();\nlugs();\ncrown();\ndial();\nhands();\nglass();",
    "renders": true
  },
  {
    "musical_instrument": "hybrid",
    "openscad_code": "// Realistic Hybrid (Car/SUV) - Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 32;\n\n// Main dimensions\nwheel_base = 60;\ncar_length = 90;\ncar_width = 40;\ncar_height = 35;\nground_clearance = 8;\n\n// Modules\nmodule wheel(wheel_radius = 6, wheel_width = 4) {\n    // Tire\n    difference() {\n        cylinder(h = wheel_width, r = wheel_radius, center = true);\n        cylinder(h = wheel_width + 1, r = wheel_radius - 2, center = true);\n    }\n    \n    // Rim\n    translate([0, 0, (wheel_width + 1) / 2])\n        cylinder(h = 1, r = wheel_radius - 3, center = true);\n    \n    // Hub\n    translate([0, 0, (wheel_width + 1) / 2])\n        cylinder(h = 1, r = wheel_radius - 5, center = true);\n}\n\nmodule body() {\n    // Main chassis\n    difference() {\n        hull() {\n            // Front hood\n            translate([car_length/2 - 15, 0, ground_clearance + 5])\n                cube([30, car_width - 10, 8], center = true);\n            \n            // Passenger cabin\n            translate([0, 0, ground_clearance + 12])\n                cube([50, car_width - 5, 15], center = true);\n            \n            // Rear\n            translate([-car_length/2 + 10, 0, ground_clearance + 8])\n                cube([20, car_width - 8, 12], center = true);\n        }\n        \n        // Windows\n        translate([10, 0, ground_clearance + 20])\n            cube([25, car_width - 3, 8], center = true);\n        \n        translate([-10, 0, ground_clearance + 18])\n            cube([15, car_width - 3, 6], center = true);\n        \n        // Wheel wells\n        translate([wheel_base/2, car_width/2 - 2, ground_clearance])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r = 8, center = true);\n        \n        translate([wheel_base/2, -car_width/2 + 2, ground_clearance])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r = 8, center = true);\n        \n        translate([-wheel_base/2, car_width/2 - 2, ground_clearance])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r = 8, center = true);\n        \n        translate([-wheel_base/2, -car_width/2 + 2, ground_clearance])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r = 8, center = true);\n    }\n    \n    // Roof rails\n    translate([0, car_width/2 - 3, ground_clearance + 25])\n        cube([50, 3, 3], center = true);\n    \n    translate([0, -car_width/2 + 3, ground_clearance + 25])\n        cube([50, 3, 3], center = true);\n}\n\nmodule front_details() {\n    // Grille\n    translate([car_length/2 - 1, 0, ground_clearance + 8])\n        cube([2, car_width - 15, 6], center = true);\n    \n    // Headlights\n    translate([car_length/2 - 1, car_width/2 - 5, ground_clearance + 8])\n        sphere(r = 2);\n    \n    translate([car_length/2 - 1, -car_width/2 + 5, ground_clearance + 8])\n        sphere(r = 2);\n    \n    // Bumper\n    translate([car_length/2 + 1, 0, ground_clearance + 5])\n        cube([3, car_width - 5, 8], center = true);\n}\n\nmodule rear_details() {\n    // Taillights\n    translate([-car_length/2 + 1, car_width/2 - 5, ground_clearance + 10])\n        cube([2, 4, 3], center = true);\n    \n    translate([-car_length/2 + 1, -car_width/2 + 5, ground_clearance + 10])\n        cube([2, 4, 3], center = true);\n    \n    // Rear bumper\n    translate([-car_length/2 - 1, 0, ground_clearance + 5])\n        cube([3, car_width - 5, 8], center = true);\n    \n    // License plate\n    translate([-car_length/2 + 1, 0, ground_clearance + 7])\n        cube([0.5, 10, 5], center = true);\n}\n\nmodule side_mirrors() {\n    // Left mirror\n    translate([15, car_width/2 + 2, ground_clearance + 18])\n        cube([4, 2, 3], center = true);\n    \n    // Right mirror\n    translate([15, -car_width/2 - 2, ground_clearance + 18])\n        cube([4, 2, 3], center = true);\n}\n\n// Assembly\nunion() {\n    // Main body\n    body();\n    \n    // Front details\n    front_details();\n    \n    // Rear details\n    rear_details();\n    \n    // Side mirrors\n    side_mirrors();\n    \n    // Wheels\n    translate([wheel_base/2, car_width/2 + 4, ground_clearance])\n        wheel();\n    \n    translate([wheel_base/2, -car_width/2 - 4, ground_clearance])\n        wheel();\n    \n    translate([-wheel_base/2, car_width/2 + 4, ground_clearance])\n        wheel();\n    \n    translate([-wheel_base/2, -car_width/2 - 4, ground_clearance])\n        wheel();\n}",
    "renders": true
  },
  {
    "musical_instrument": "circuit",
    "openscad_code": "// Realistic-style medium-complexity 3D-printable circuit board\n// Overall size ≈ 80 × 60 × 12 mm\n\n// Board color\nboard_color = \"green\";\n\n// --------------------------------------------------\n// 1. PCB substrate\n// --------------------------------------------------\nmodule pcb_substrate() {\n    color(board_color)\n    difference() {\n        // Main board\n        cube([80, 60, 1.6], center=false);\n        // Four mounting holes Ø3 mm\n        for (p = [[5, 5], [75, 5], [75, 55], [5, 55]])\n            translate([p[0], p[1], -0.1])\n                cylinder(h=2, d=3, $fn=20);\n    }\n}\n\n// --------------------------------------------------\n// 2. Solder-mask layer (cut-outs for pads)\n// --------------------------------------------------\nmodule soldermask() {\n    color(\"darkgreen\", 0.8)\n    translate([0, 0, 1.6])\n        cube([80, 60, 0.1], center=false);\n}\n\n// --------------------------------------------------\n// 3. Copper pads\n// --------------------------------------------------\nmodule pad(d=2.5, h=0.05) {\n    color(\"copper\")\n    cylinder(h=h, d=d, $fn=24);\n}\n\n// --------------------------------------------------\n// 4. 8-pin DIP footprint\n// --------------------------------------------------\nmodule dip8_pitch(p=2.54, row=7.62) {\n    // Left row\n    for (i = [0:3])\n        translate([0, i*p, 0])\n            pad();\n    // Right row\n    for (i = [0:3])\n        translate([row, i*p, 0])\n            pad();\n}\n\n// --------------------------------------------------\n// 5. 8-pin DIP package\n// --------------------------------------------------\nmodule dip8_body() {\n    color(\"black\")\n    translate([-1.27, -1.27*3, 1.7])\n        cube([9.66, 6.35*3, 5]);\n}\n\n// --------------------------------------------------\n// 6. THT resistor footprint (two pads)\n// --------------------------------------------------\nmodule resistor_pads(sp=10) {\n    translate([0, 0, 0]) pad(d=2.2);\n    translate([sp, 0, 0]) pad(d=2.2);\n}\n\n// --------------------------------------------------\n// 7. THT resistor body\n// --------------------------------------------------\nmodule resistor_body(l=10, d=2.5) {\n    color(\"brown\")\n    translate([l/2, 0, 1.7+d/2])\n        rotate([90, 0, 0])\n            cylinder(h=l, d=d, $fn=16);\n}\n\n// --------------------------------------------------\n// 8. SOT-23 transistor footprint\n// --------------------------------------------------\nmodule sot23_pads() {\n    pad(d=1.3);\n    translate([2.3, 0, 0]) pad(d=1.3);\n    translate([1.15, -2.3, 0]) pad(d=1.3);\n}\n\n// --------------------------------------------------\n// 9. SOT-23 body\n// --------------------------------------------------\nmodule sot23_body() {\n    color(\"black\")\n    translate([-0.75, -2.3-0.5, 1.7])\n        cube([2.9, 2.9, 1.3]);\n}\n\n// --------------------------------------------------\n// 10. Via\n// --------------------------------------------------\nmodule via(drill=0.8, outer=1.6) {\n    color(\"copper\")\n    cylinder(h=1.6, d=outer, $fn=16);\n    color(\"darkgreen\")\n    translate([0, 0, 1.6])\n        cylinder(h=0.1, d=outer, $fn=16);\n}\n\n// --------------------------------------------------\n// 11. Copper traces (simple rectangles)\n// --------------------------------------------------\nmodule trace(l, w=0.4) {\n    color(\"copper\")\n    translate([-l/2, -w/2, 1.6])\n        cube([l, w, 0.05]);\n}\n\n// --------------------------------------------------\n// 12. Final assembly\n// --------------------------------------------------\npcb_substrate();\nsoldermask();\n\n// Place components\n// U1 - ATtiny85\ntranslate([15, 20, 0]) { dip8_pitch(); dip8_body(); }\n\n// R1 - 10k pull-up\ntranslate([45, 25, 0]) { resistor_pads(10); resistor_body(10); }\n\n// Q1 - NPN transistor\ntranslate([60, 35, 0]) { sot23_pads(); sot23_body(); }\n\n// Vias (power & ground)\nfor (v = [[70, 10], [70, 15], [70, 50]])\n    translate([v[0], v[1], 0]) via();\n\n// Traces\ntrace(20, 0.5);\ntranslate([25, 20, 0]) rotate([0, 0, 90]) trace(15);",
    "renders": true
  },
  {
    "musical_instrument": "vco",
    "openscad_code": "// VCO (Voltage Controlled Oscillator) Module\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Main dimensions\nmodule_width = 80;\nmodule_height = 100;\nmodule_depth = 25;\n\n// Panel thickness\npanel_thickness = 2;\n\n// Knob parameters\nknob_diameter = 12;\nknob_height = 8;\nknob_shaft_diameter = 6;\n\n// Jack parameters\njack_diameter = 8;\njack_depth = 10;\n\n// LED parameters\nled_diameter = 3;\nled_holder_diameter = 5;\nled_holder_height = 2;\n\n// PCB standoff parameters\nstandoff_diameter = 5;\nstandoff_height = 8;\n\n// Main module body\nmodule vco_module() {\n    difference() {\n        // Main enclosure\n        cube([module_width, module_height, module_depth], center=true);\n        \n        // Front panel recess\n        translate([0, 0, module_depth/2 - panel_thickness/2])\n            cube([module_width - 4, module_height - 4, panel_thickness + 1], center=true);\n        \n        // PCB cavity\n        translate([0, 0, -module_depth/2 + 15])\n            cube([module_width - 8, module_height - 8, 10], center=true);\n    }\n}\n\n// Front panel with controls\nmodule front_panel() {\n    translate([0, 0, module_depth/2 - panel_thickness/2]) {\n        // Panel surface\n        cube([module_width - 4, module_height - 4, panel_thickness], center=true);\n        \n        // Label area\n        translate([0, 35, panel_thickness/2 + 0.1])\n            cube([70, 20, 0.5], center=true);\n        \n        // Frequency knob\n        translate([-20, 20, panel_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(d=knob_shaft_diameter, h=panel_thickness + 2);\n        \n        // Pulse width knob\n        translate([20, 20, panel_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(d=knob_shaft_diameter, h=panel_thickness + 2);\n        \n        // CV input jacks\n        for(i = [0:1]) {\n            translate([-15 + i*30, 0, panel_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(d=jack_diameter, h=panel_thickness + 1);\n        }\n        \n        // Output jacks\n        for(i = [0:2]) {\n            translate([-20 + i*20, -20, panel_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(d=jack_diameter, h=panel_thickness + 1);\n        }\n        \n        // LEDs\n        for(i = [0:2]) {\n            translate([-25 + i*25, -35, panel_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(d=led_holder_diameter, h=led_holder_height);\n        }\n    }\n}\n\n// Knobs\nmodule knobs() {\n    // Frequency knob\n    translate([-20, 20, module_depth/2 + panel_thickness/2 + knob_height/2])\n        cylinder(d=knob_diameter, h=knob_height);\n    \n    // Pulse width knob\n    translate([20, 20, module_depth/2 + panel_thickness/2 + knob_height/2])\n        cylinder(d=knob_diameter, h=knob_height);\n}\n\n// LED indicators\nmodule leds() {\n    // Power LED\n    translate([-25, -35, module_depth/2 + panel_thickness/2 + led_holder_height/2])\n        cylinder(d=led_diameter, h=led_holder_height);\n    \n    // Range LED\n    translate([0, -35, module_depth/2 + panel_thickness/2 + led_holder_height/2])\n        cylinder(d=led_diameter, h=led_holder_height);\n    \n    // Sync LED\n    translate([25, -35, module_depth/2 + panel_thickness/2 + led_holder_height/2])\n        cylinder(d=led_diameter, h=led_holder_height);\n}\n\n// PCB standoffs\nmodule standoffs() {\n    for(x = [-1:1]) {\n        for(y = [-1:1]) {\n            translate([x*30, y*35, -module_depth/2 + standoff_height/2])\n                cylinder(d=standoff_diameter, h=standoff_height);\n        }\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    for(x = [-1:1]) {\n        for(y = [-1:1]) {\n            translate([x*35, y*40, 0])\n                rotate([90, 0, 0])\n                    cylinder(d=3.5, h=module_depth);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    vco_module();\n    front_panel();\n    knobs();\n    leds();\n    standoffs();\n    \n    difference() {\n        // Mounting holes\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "vca",
    "openscad_code": "// VCA (Voltage-Controlled Amplifier) – realistic, medium complexity\n// Overall footprint ≈ 70 mm × 40 mm × 20 mm, printable without supports\n\n$fn = 36;\n\n// Main module -----------------------------------------------------------\nmodule vca() {\n\n    /* ---------- 1. Chassis ------------------------------------------------ */\n    // Base shell (hollow box with open bottom for wiring)\n    wall = 1.6;              // 3D-print friendly wall thickness\n    box_w = 70;\n    box_d = 40;\n    box_h = 18;\n\n    difference() {\n        // Outer shell\n        cube([box_w, box_d, box_h], center = true);\n        // Inner cavity\n        translate([0, 0, wall/2])\n            cube([box_w - 2*wall, box_d - 2*wall, box_h - wall], center = true);\n    }\n\n    /* ---------- 2. Front panel ------------------------------------------- */\n    // Slightly inset aluminum-style face plate\n    plate_w = box_w;\n    plate_d = box_d;\n    plate_h = 3;\n\n    translate([0, 0, box_h/2 + plate_h/2])\n        cube([plate_w, plate_d, plate_h], center = true);\n\n    /* ---------- 3. Jacks -------------------------------------------------- */\n    // Two 3.5 mm mono jacks (input & CV) on front\n    jack_r = 5.5/2;\n    jack_h = 8;\n\n    translate([ -15, 0, box_h/2 + plate_h + jack_h/2 ])\n        jack(jack_r, jack_h);\n\n    translate([  15, 0, box_h/2 + plate_h + jack_h/2 ])\n        jack(jack_r, jack_h);\n\n    /* ---------- 4. Potentiometer ----------------------------------------- */\n    // Level knob on the right side\n    pot_r = 6;\n    pot_h = 7;\n\n    translate([box_w/2 - 8, 0, box_h/2 + plate_h + pot_h/2])\n        cylinder(r = pot_r, h = pot_h);\n\n    /* ---------- 5. Indicator LED ----------------------------------------- */\n    // Red power LED just left of the pot\n    led_r = 2.5;\n    led_h = 3;\n\n    translate([box_w/2 - 18, 0, box_h/2 + plate_h + led_h/2])\n        cylinder(r = led_r, h = led_h);\n\n    /* ---------- 6. Mounting ears ----------------------------------------- */\n    // Two simple flanges with 3 mm screw holes\n    ear_w = 8;\n    ear_d = box_d;\n    ear_h = 3;\n    hole_r = 1.5;\n\n    for (x = [-box_w/2, box_w/2]) {\n        translate([x, 0, 0])\n            difference() {\n                cube([ear_w, ear_d, ear_h], center = true);\n                translate([x > 0 ? -2 : 2, 0, 0])\n                    cylinder(r = hole_r, h = ear_h + 1, center = true);\n            }\n    }\n\n    /* ---------- 7. Ventilation slots ------------------------------------- */\n    // Simple slits on top for heat dissipation\n    slot_len = 20;\n    slot_w = 1.2;\n    slot_h = 1.5;\n    slot_gap = 6;\n\n    for (i = [-1, 0, 1]) {\n        translate([i * slot_gap, 0, box_h/2 + plate_h - 0.1])\n            cube([slot_len, slot_w, slot_h + 0.2], center = true);\n    }\n}\n\n// Reusable jack module ---------------------------------------------------\nmodule jack(r, h) {\n    union() {\n        // Cylindrical body\n        cylinder(r = r, h = h);\n\n        // Hex nut collar\n        translate([0, 0, h])\n            cylinder(r = r + 2, h = 2, $fn = 6);\n    }\n}\n\n// Render\nvca();",
    "renders": true
  },
  {
    "musical_instrument": "vcd",
    "openscad_code": "// OpenSCAD VCD (Video CD) – medium-complexity realistic model\n// 120 mm Ø, 1.2 mm thick disc with molded hub, reflective data surface, top label ring, and injection gate\n// Designed for FDM printing: flat base, no overhangs, 1 mm minimum walls\n\n$fa = 2; $fs = 0.5;\n\n// overall dimensions\ndisc_d   = 120;     // standard CD diameter\ndisc_h   = 1.2;     // standard thickness\nhub_d    = 15;      // center hub diameter\nhole_d   = 7.5;     // spindle hole diameter\nring_w   = 5;       // width of label ring\ngate_d   = 3;       // injection gate stub diameter\ngate_h   = 1.2;     // injection gate stub height\n\n// printing clearances\ntol = 0.2;          // tolerance for center hole\n\nmodule vcd_disc() {\n    difference() {\n        // main disc body\n        cylinder(h = disc_h, d = disc_d, center = false);\n\n        // spindle hole\n        translate([0, 0, -0.01])\n            cylinder(h = disc_h + 0.02, d = hole_d + tol, center = false);\n\n        // top label recess ring (actual label sits 0.2 mm lower)\n        translate([0, 0, -0.01])\n            cylinder(h = 0.2 + 0.02, d = disc_d - 2*ring_w, center = false);\n    }\n}\n\nmodule reflective_zone() {\n    // reflective data layer – imprinted lands & pits texture\n    difference() {\n        cylinder(h = 0.05, d = disc_d - 2*ring_w - 1, center = false);\n\n        // concentric pits (simulated with small cylinders)\n        for (r = [(disc_d - 2*ring_w - 1)/2 - 1 : -0.8 : 10]) {\n            rotate_extrude()\n                translate([r, 0, 0])\n                    circle(d = 0.3);\n        }\n    }\n}\n\nmodule center_hub() {\n    // raised hub on top\n    difference() {\n        translate([0, 0, disc_h])\n            cylinder(h = 0.5, d = hub_d, center = false);\n\n        translate([0, 0, disc_h - 0.01])\n            cylinder(h = 0.5 + 0.02, d = hole_d + tol, center = false);\n    }\n}\n\nmodule injection_gate_stub() {\n    // small stub on bottom edge where disc was injected\n    translate([disc_d/2 - gate_d/2, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = gate_h, d = gate_d, center = false);\n}\n\n// assemble parts\nunion() {\n    vcd_disc();\n    reflective_zone();\n    center_hub();\n    injection_gate_stub();\n}",
    "renders": true
  },
  {
    "musical_instrument": "vcl",
    "openscad_code": "// VCL (Voltage-Controlled Low-pass) Filter Module – 3D-printable enclosure\n// Body size: 80 mm × 60 mm × 25 mm (easily printable on most FDM beds)\n\n$fn = 32;            // smooth curves\nwall = 1.6;          // 1.6 mm walls for FDM printing\ncorner_r = 3;        // radius for printable rounded edges\npcb_h = 1.6;         // PCB thickness for recess\n\n// Main enclosure shell\nmodule enclosure() {\n    difference() {\n        // Outer rounded box\n        hull() for(x=[-1,1], y=[-1,1])\n            translate([x*(40-corner_r), y*(30-corner_r), 0])\n                cylinder(r=corner_r, h=25);\n        // Hollow cavity\n        hull() for(x=[-1,1], y=[-1,1])\n            translate([x*(40-corner_r-wall), y*(30-corner_r-wall), wall])\n                cylinder(r=corner_r, h=25-2*wall);\n    }\n}\n\n// PCB recess inside the bottom\nmodule pcb_recess() {\n    translate([0, 0, wall])\n        cube([76 - 2*corner_r, 56 - 2*corner_r, pcb_h], center=true);\n}\n\n// Jack sockets (3.5 mm Eurorack compatible)\nmodule jack_socket(pos=[0,0,0]) {\n    translate(pos)\n    difference() {\n        union() {\n            cylinder(h=3, d=8.2);                 // visible nut\n            translate([0,0,-3]) cylinder(h=3, d=7); // barrel\n        }\n        translate([0,0,-6]) cylinder(h=10, d=3.2); // 3.2 mm jack hole\n    }\n}\n\n// Potentiometer (Alpha 9 mm)\nmodule pot() {\n    difference() {\n        union() {\n            cylinder(h=3, d=9);                   // knob skirt\n            translate([0,0,-7]) cylinder(h=7, d=7); // bushing\n        }\n        translate([0,0,-8]) cylinder(h=8, d=6.2); // 6 mm D-shaft hole\n    }\n}\n\n// Simple slide switch\nmodule slide_switch(pos=[0,0,0]) {\n    translate(pos) {\n        cube([8, 4, 2], center=true);\n        translate([2,0,1]) cube([4, 2, 1], center=true); // lever\n    }\n}\n\n// Mounting posts with 2.2 mm hole for M2 screw\nmodule mount_post(x, y) {\n    translate([x, y, 0])\n        difference() {\n            cylinder(h=25, d=4);\n            cylinder(h=25, d=2.2);\n        }\n}\n\n// Panel graphics: simple silkscreen rectangles\nmodule panel_label(pos, w, h, depth=0.3) {\n    translate(pos) cube([w, h, depth], center=true);\n}\n\n// Assemble full model\nunion() {\n    enclosure();\n\n    // PCB recess\n    difference() {\n        enclosure();\n        pcb_recess();\n    }\n\n    // Mounting posts\n    mount_post( 30, 20);\n    mount_post(-30, 20);\n    mount_post( 30,-20);\n    mount_post(-30,-20);\n\n    // Jacks (left to right)\n    for(i=[-1,0,1])\n        translate([i*20, 22, 25])\n            jack_socket();\n\n    // Potentiometer row\n    for(i=[-1,1])\n        translate([i*15, 0, 25])\n            pot();\n\n    // Slide switch\n    translate([0, -20, 25]) slide_switch();\n\n    // Simple labels (silkscreen)\n    color(\"white\") {\n        // IN label under left jack\n        panel_label([-20, 28.5, 25.1], 6, 3);\n        // OUT label under right jack\n        panel_label([20, 28.5, 25.1], 8, 3);\n        // CUTOFF under left pot\n        panel_label([-15, 5.5, 25.1], 14, 3);\n        // RESONANCE under right pot\n        panel_label([15, 5.5, 25.1], 20, 3);\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "vcm",
    "openscad_code": "// Voice Coil Motor (VCM) – realistic, medium detail, printable\n// Overall footprint ~ 60 × 60 × 40 mm\n\n$fn = 30;\n\n// ---------- Parameters ----------\nmag_d      = 20;        // permanent-magnet OD\nmag_h      = 12;\ncoil_d     = 22;        // coil winding OD\ncoil_h     = 10;\nbobbin_d   = 8;         // inner bobbin tube\nbobbin_th  = 1.5;       // wall thickness\nbobbin_fl  = 3;         // flange height\nbase_d     = 50;        // base plate diameter\nbase_h     = 3;\nyoke_in_d  = 26;        // inner pole OD\nyoke_in_h  = 18;\nyoke_out_d = 46;        // outer yoke cup ID\nyoke_out_h = 16;\nspring_w   = 1.5;       // flexure thickness\nspring_gap = 4;         // spoke width\nshaft_d    = 4;\nshaft_l    = 38;\ntop_d      = 12;        // moving top plate\ntop_h      = 2;\n\n// ---------- Modules ----------\nmodule magnet() {\n    color(\"silver\")\n    translate([0,0,-mag_h/2])\n        cylinder(d = mag_d, h = mag_h);\n}\n\nmodule coil() {\n    difference() {\n        cylinder(d = coil_d, h = coil_h);               // winding bulk\n        translate([0,0,-0.1])\n            cylinder(d = bobbin_d + 2*bobbin_th, h = coil_h + 0.2); // hollow\n    }\n}\n\nmodule bobbin() {\n    // central tube\n    cylinder(d = bobbin_d, h = coil_h + 2*bobbin_fl);\n    // top flange\n    translate([0,0,coil_h/2+bobbin_fl/2])\n        cylinder(d = bobbin_d + 2*bobbin_th, h = bobbin_fl);\n    // bottom flange\n    translate([0,0,-coil_h/2-bobbin_fl/2])\n        cylinder(d = bobbin_d + 2*bobbin_th, h = bobbin_fl);\n}\n\nmodule yoke() {\n    difference() {\n        union() {\n            // outer cup\n            cylinder(d = yoke_out_d, h = yoke_out_h);\n            // inner pole\n            translate([0,0,-(yoke_in_h - yoke_out_h)])\n                cylinder(d = yoke_in_d, h = yoke_in_h);\n        }\n        // cavity for magnet + coil\n        translate([0,0,-1])\n            cylinder(d = mag_d + 2, h = yoke_out_h + 2);\n    }\n}\n\nmodule flexure_spring() {\n    difference() {\n        cylinder(d = top_d + 6, h = spring_w);\n        // spokes pattern (6 spokes)\n        for(i=[0:5])\n            rotate([0,0,i*60])\n                translate([top_d/2 + spring_gap/2, 0, -0.1])\n                    cube([spring_gap, top_d + 6, spring_w + 0.2], center=true);\n        // central hole\n        cylinder(d = shaft_d + 1, h = spring_w + 0.2);\n    }\n}\n\nmodule shaft() {\n    color(\"gray\")\n    cylinder(d = shaft_d, h = shaft_l);\n}\n\nmodule top_plate() {\n    color(\"dimgray\")\n    cylinder(d = top_d, h = top_h);\n}\n\nmodule base_plate() {\n    color(\"black\")\n    difference() {\n        cylinder(d = base_d, h = base_h);\n        // central hole for wires\n        cylinder(d = yoke_in_d + 2, h = base_h + 0.2);\n        // mounting holes\n        for(a=[0:120:359])\n            rotate([0,0,a])\n                translate([base_d/2 - 4, 0, -0.1])\n                    cylinder(d = 3, h = base_h + 0.2);\n    }\n}\n\n// ---------- Assembly ----------\nunion() {\n    // Stationary parts\n    base_plate();\n    translate([0,0,base_h])\n        yoke();\n    translate([0,0,base_h + yoke_out_h/2])\n        magnet();\n\n    // Moving parts\n    translate([0,0,base_h + yoke_out_h])\n        flexure_spring();\n\n    translate([0,0,base_h + yoke_out_h + spring_w])\n        union() {\n            bobbin();\n            translate([0,0,coil_h/2 + bobbin_fl])\n                coil();\n            translate([0,0,coil_h/2 + bobbin_fl + coil_h/2 + top_h/2])\n                top_plate();\n            translate([0,0,-(shaft_l - (coil_h/2 + bobbin_fl + coil_h/2 + top_h))])\n                shaft();\n        }\n}",
    "renders": true
  },
  {
    "musical_instrument": "vcr",
    "openscad_code": "// VCR model - medium complexity realistic style\n// Dimensions in mm, sized for 3D printing\n\n$fn = 32;\n\n// Main dimensions\nvcr_width = 80;\nvcr_height = 25;\nvcr_depth = 55;\nwall_thickness = 2;\n\n// Front panel details\nfront_height = vcr_height;\nfront_depth = 3;\n\n// Display window\ndisplay_width = 20;\ndisplay_height = 8;\n\n// Buttons\nbutton_width = 8;\nbutton_height = 4;\nbutton_depth = 2;\n\n// Tape slot\nslot_width = 40;\nslot_height = 5;\nslot_depth = 3;\n\n// Ventilation holes\nvent_width = 1;\nvent_height = 3;\nvent_spacing = 3;\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Outer shell\n        cube([vcr_width, vcr_depth, vcr_height], center = false);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([vcr_width - 2*wall_thickness, \n                  vcr_depth - wall_thickness, \n                  vcr_height - 2*wall_thickness], center = false);\n    }\n}\n\n// Front panel with details\nmodule front_panel() {\n    // Main front face\n    translate([0, vcr_depth - front_depth, 0])\n        cube([vcr_width, front_depth, front_height], center = false);\n    \n    // Display window recess\n    translate([(vcr_width - display_width)/2, \n               vcr_depth - front_depth - 1, \n               front_height - display_height - 2])\n        cube([display_width, 2, display_height], center = false);\n    \n    // Tape slot\n    translate([(vcr_width - slot_width)/2, \n               vcr_depth - front_depth - slot_depth, \n               front_height/2 - slot_height/2])\n        cube([slot_width, slot_depth, slot_height], center = false);\n    \n    // Buttons row\n    for(i = [0:4]) {\n        translate([10 + i*12, \n                   vcr_depth - front_depth - button_depth - 1, \n                   5])\n            cube([button_width, button_depth, button_height], center = false);\n    }\n    \n    // IR sensor\n    translate([5, vcr_depth - front_depth - 1, 10])\n        cylinder(h = 2, r = 2, center = false);\n}\n\n// Top ventilation\nmodule top_ventilation() {\n    for(i = [1:8]) {\n        translate([10 + i*vent_spacing, \n                   wall_thickness, \n                   vcr_height - wall_thickness])\n            cube([vent_width, vcr_depth - 2*wall_thickness, vent_height], center = false);\n    }\n}\n\n// Connectors on back\nmodule back_connectors() {\n    // RF in/out\n    for(i = [0:1]) {\n        translate([15 + i*20, \n                   1, \n                   vcr_height/2])\n            cylinder(h = 5, r = 3, center = false);\n    }\n    \n    // RCA jacks\n    for(i = [0:2]) {\n        translate([45 + i*10, \n                   1, \n                   vcr_height - 10])\n            cylinder(h = 3, r = 2, center = false);\n    }\n}\n\n// Feet\nmodule feet() {\n    for(x = [10, vcr_width - 10], \n        y = [10, vcr_depth - 10]) {\n        translate([x, y, -2])\n            cylinder(h = 2, r = 3, center = false);\n    }\n}\n\n// Assembly\nunion() {\n    color(\"silver\") main_body();\n    color(\"black\") front_panel();\n    color(\"silver\") top_ventilation();\n    color(\"black\") back_connectors();\n    color(\"black\") feet();\n}",
    "renders": true
  },
  {
    "musical_instrument": "vct",
    "openscad_code": "// Realistic VCT (Vehicle Crew Trainer) in 1:100 scale\n// Overall size: ~85mm long, 35mm wide, 30mm high\n\n$fn = 24;  // Smooth curves for printing\n\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull() {\n            translate([-20, -15, 0]) cube([40, 30, 8]);\n            translate([-25, -17, 8]) cube([50, 34, 12]);\n            translate([-20, -15, 20]) cube([40, 30, 4]);\n        }\n        \n        // Driver hatch\n        translate([-22, -8, 12]) cube([8, 16, 2]);\n        \n        // Engine deck grilles\n        for (x = [-15:10:5]) {\n            translate([x, 16, 18]) cube([8, 2, 4]);\n        }\n    }\n}\n\nmodule wheels() {\n    // Front axle\n    for (x = [-15, -5, 5, 15]) {\n        translate([x, -20, 5]) rotate([90, 0, 0]) cylinder(h=5, r=8);\n        translate([x, -20, 0]) cylinder(h=5, r=5);\n    }\n    \n    // Rear axle\n    for (x = [-15, -5, 5, 15]) {\n        translate([x, 20, 5]) rotate([90, 0, 0]) cylinder(h=5, r=8);\n        translate([x, 20, 0]) cylinder(h=5, r=5);\n    }\n}\n\nmodule turret() {\n    rotate([0, 0, 30])  // Turret rotated slightly\n    translate([0, 0, 20]) {\n        // Turret base\n        difference() {\n            cylinder(h=8, r=12);\n            translate([-12, -12, 0]) cube([24, 24, 8]);\n        }\n        \n        // Gun mantlet\n        translate([10, 0, 4]) rotate([0, -5, 0]) \n            union() {\n                cylinder(h=15, r=3);\n                translate([15, 0, 0]) rotate([0, 90, 0]) \n                    cylinder(h=30, r=2);\n            }\n        \n        // Commander's cupola\n        translate([-5, 0, 8]) \n            difference() {\n                cylinder(h=5, r=6);\n                translate([-6, -6, 4]) cube([12, 12, 2]);\n            }\n    }\n}\n\nmodule details() {\n    // Headlights\n    translate([-22, -12, 15]) sphere(r=2);\n    translate([-22, 12, 15]) sphere(r=2);\n    \n    // Storage boxes\n    translate([0, -18, 15]) cube([20, 4, 8]);\n    translate([0, 18, 15]) cube([20, 4, 8]);\n    \n    // Tow hooks\n    translate([-25, 0, 5]) rotate([0, 90, 0]) cylinder(h=5, r=1);\n    translate([25, 0, 5]) rotate([0, 90, 0]) cylinder(h=5, r=1);\n    \n    // Antenna\n    translate([5, 0, 30]) cylinder(h=15, r=0.5);\n}\n\nunion() {\n    hull();\n    wheels();\n    turret();\n    details();\n}",
    "renders": true
  },
  {
    "musical_instrument": "vcc",
    "openscad_code": "// Realistic VCC (Vertical Coin Cell) Battery Holder\n// Medium complexity, 3D printable, ~65mm long\n\n// Parameters\n$fn = 32;\nbattery_d = 20.0;        // CR2032 cell diameter\nbattery_h = 3.2;          // CR2032 height\nwall = 1.5;               // wall thickness\nclear = 0.3;              // print clearance\nslot_w = 8;               // spring finger width\nslot_h = 6;               // spring finger depth\nbase_h = 4;               // base thickness\nbase_l = 42;              // base length\nbase_w = 26;              // base width\npost_h = 6;               // alignment post height\npost_d = 3.5;             // alignment post diameter\npin_d = 1.2;              // PCB pin diameter\npin_l = 6;                // PCB pin length\n\nmodule battery_pocket() {\n    difference() {\n        // Main cavity\n        cylinder(h = battery_h + clear, d = battery_d + 2*wall + clear, center = false);\n        \n        // Battery cutout\n        translate([0, 0, -clear/2])\n            cylinder(h = battery_h + clear, d = battery_d, center = false);\n        \n        // Spring slot\n        translate([-battery_d/2 - wall/2, 0, -clear/2])\n            cube([battery_d/2 + wall, slot_w, slot_h + clear], center = true);\n        \n        // Contact slot\n        translate([battery_d/2 - wall/2, 0, -clear/2])\n            cube([battery_d/2 + wall, slot_w, slot_h + clear], center = true);\n    }\n}\n\nmodule spring_finger() {\n    // Positive contact spring\n    translate([-battery_d/2 - wall/2 - slot_w/2, 0, slot_h/2]) {\n        difference() {\n            cube([slot_w, slot_w, slot_h], center = true);\n            translate([0, 0, -slot_h/2 + 0.5])\n                cube([slot_w - 2*wall, slot_w - 2*wall, slot_h], center = true);\n        }\n    }\n}\n\nmodule contact_tab() {\n    // Negative contact tab\n    translate([battery_d/2 + wall/2 + slot_w/2, 0, slot_h/2]) {\n        cube([slot_w, slot_w, slot_h], center = true);\n    }\n}\n\nmodule base() {\n    difference() {\n        // Main base\n        cube([base_l, base_w, base_h], center = true);\n        \n        // Alignment posts\n        translate([base_l/2 - post_d, base_w/2 - post_d, -base_h/2])\n            cylinder(h = post_h + base_h, d = post_d);\n        translate([-base_l/2 + post_d, base_w/2 - post_d, -base_h/2])\n            cylinder(h = post_h + base_h, d = post_d);\n        translate([base_l/2 - post_d, -base_w/2 + post_d, -base_h/2])\n            cylinder(h = post_h + base_h, d = post_d);\n        translate([-base_l/2 + post_d, -base_w/2 + post_d, -base_h/2])\n            cylinder(h = post_h + base_h, d = post_d);\n    }\n    \n    // PCB pins\n    translate([base_l/2 - 5, base_w/2 - 5, -base_h/2 - pin_l/2])\n        cylinder(h = pin_l, d = pin_d);\n    translate([-base_l/2 + 5, base_w/2 - 5, -base_h/2 - pin_l/2])\n        cylinder(h = pin_l, d = pin_d);\n    translate([base_l/2 - 5, -base_w/2 + 5, -base_h/2 - pin_l/2])\n        cylinder(h = pin_l, d = pin_d);\n    translate([-base_l/2 + 5, -base_w/2 + 5, -base_h/2 - pin_l/2])\n        cylinder(h = pin_l, d = pin_d);\n}\n\nmodule retention_clip() {\n    // Side clips for battery retention\n    for (i = [-1, 1]) {\n        translate([i * (battery_d/2 + wall), 0, battery_h/2 + wall]) {\n            rotate([0, i * 30, 0])\n                cube([wall, battery_d/2, battery_h/2], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    translate([0, 0, base_h/2])\n        base();\n    \n    // Battery pocket\n    translate([0, 0, base_h])\n        battery_pocket();\n    \n    // Contacts\n    translate([0, 0, base_h])\n        union() {\n            spring_finger();\n            contact_tab();\n        }\n    \n    // Retention clips\n    translate([0, 0, base_h])\n        retention_clip();\n}\n\n// Alignment indicators\ntranslate([base_l/2 - 5, 0, base_h + battery_h + 2])\n    cube([2, 2, 2], center = true);\ntranslate([-base_l/2 + 5, 0, base_h + battery_h + 2])\n    cube([2, 2, 2], center = true);",
    "renders": true
  },
  {
    "musical_instrument": "vcp",
    "openscad_code": "// VCP (Vehicle Control Panel) - Realistic Style, Medium Complexity\n// 3D printable control panel with buttons, display and connectors\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main dimensions\npanel_w = 80;\npanel_h = 55;\npanel_d = 12;\ncorner_r = 5;\nwall_t = 2;\n\nmodule main_panel() {\n    // Main body with rounded edges\n    difference() {\n        // Outer shell\n        minkowski() {\n            cube([panel_w-2*corner_r, panel_h-2*corner_r, panel_d], center=true);\n            cylinder(r=corner_r, h=0.1, center=true);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, -wall_t/2])\n            minkowski() {\n                cube([panel_w-2*corner_r-2*wall_t, panel_h-2*corner_r-2*wall_t, panel_d], center=true);\n                cylinder(r=corner_r-wall_t, h=0.1, center=true);\n            }\n    }\n}\n\nmodule display() {\n    // LCD display area\n    translate([0, 15, panel_d/2+0.1]) {\n        // Display bezel\n        color(\"gray\")\n            cube([35, 15, 2], center=true);\n        \n        // Display screen\n        translate([0, 0, 1.1])\n            color(\"darkblue\")\n                cube([32, 12, 0.5], center=true);\n    }\n}\n\nmodule button(x, y, label) {\n    // Individual push button\n    translate([x, y, panel_d/2+0.1]) {\n        // Button housing\n        difference() {\n            cylinder(h=3, r=4);\n            translate([0, 0, -0.1])\n                cylinder(h=3.2, r=3.5);\n        }\n        \n        // Button top\n        translate([0, 0, 3])\n            cylinder(h=1, r=3.8);\n    }\n}\n\nmodule rotary_encoder(x, y) {\n    // Rotary encoder knob\n    translate([x, y, panel_d/2+2]) {\n        // Base\n        cylinder(h=2, r=5);\n        \n        // Knob\n        translate([0, 0, 2])\n            cylinder(h=4, r=6);\n        \n        // Indicator line\n        translate([0, 5.5, 4])\n            cube([1, 1, 0.5], center=true);\n    }\n}\n\nmodule connector(type, x, y) {\n    // Panel mount connectors\n    translate([x, y, -panel_d/2-1]) {\n        if (type == \"usb\") {\n            // USB-A connector\n            color(\"black\")\n                cube([12, 6, 6], center=true);\n            translate([0, 0, 3.5])\n                cube([10, 4, 1], center=true);\n        }\n        else if (type == \"ethernet\") {\n            // RJ45 connector\n            color(\"black\")\n                cube([16, 16, 8], center=true);\n            translate([0, 0, 4.5])\n                cube([14, 8, 2], center=true);\n        }\n    }\n}\n\nmodule mounting_holes() {\n    // 4 corner mounting holes\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x*(panel_w/2-8), y*(panel_h/2-8), 0])\n                rotate([90, 0, 0])\n                    cylinder(h=panel_d, r=2.5);\n}\n\n// Assembly\nunion() {\n    main_panel();\n    display();\n    \n    // Button array\n    button(-20, 0, \"START\");\n    button(-20, -12, \"STOP\");\n    button(-8, 0, \"RESET\");\n    button(4, 0, \"MODE\");\n    button(16, 0, \"ENTER\");\n    \n    // Rotary encoders\n    rotary_encoder(25, -15);\n    rotary_encoder(25, 5);\n    \n    // Connectors\n    connector(\"usb\", -25, -panel_h/2+8);\n    connector(\"ethernet\", 25, -panel_h/2+8);\n    \n    // Mounting holes (cutouts)\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "musical_instrument": "vcs",
    "openscad_code": "// VCS (Video Computer System) - Realistic Style, Medium Complexity\n// Scale: 1:10 model, ~60mm wide\n\n$fn = 36; // Smooth curves\n\n// Main dimensions\nlength = 60;\nwidth = 40;\nheight = 15;\nwood_thickness = 2;\nwall_thick = 1.5;\n\nmodule main_body() {\n    // Wooden base with rounded edges\n    difference() {\n        // Main block\n        minkowski() {\n            cube([length, width, height]);\n            sphere(2);\n        }\n        \n        // Carve out top\n        translate([0, 0, height - wood_thickness])\n            cube([length + 4, width + 4, wood_thickness + 2], center=true);\n    }\n    \n    // Plastic top cover\n    translate([0, 0, height - wood_thickness])\n        difference() {\n            cube([length - 4, width - 4, wood_thick], center=true);\n            \n            // Ventilation slots\n            for(i = [-2:1:2]) {\n                translate([i * 12, 0, -0.5])\n                    cube([10, width - 8, 2]);\n            }\n        }\n}\n\nmodule switches() {\n    // Power switch\n    translate([-length/2 + 8, width/4, height + 1])\n        cylinder(h=3, d=5);\n    \n    // Reset switch\n    translate([-length/2 + 8, -width/4, height + 1])\n        cylinder(h=3, d=5);\n    \n    // Difficulty switches (A/B)\n    for(i = [0:1]) {\n        translate([length/2 - 8, width/4 - i*width/2, height + 1])\n            cube([4, 2, 1], center=true);\n    }\n}\n\nmodule cartridge_slot() {\n    // Main slot opening\n    translate([0, 0, height + wall_thick])\n        cube([30, 4, 8], center=true);\n    \n    // Slot walls\n    translate([0, 0, height + wall_thick + 4])\n        difference() {\n            cube([32, 6, 1], center=true);\n            cube([28, 2, 2], center=true);\n        }\n}\n\nmodule joystick_ports() {\n    // Two controller ports\n    for(i = [-1:2:1]) {\n        translate([length/2 - 3, i * 8, height/2])\n            difference() {\n                cylinder(h=5, d=8);\n                translate([0, 0, -1])\n                    cylinder(h=7, d=6);\n            }\n    }\n}\n\nmodule rf_box() {\n    // RF modulator box at back\n    translate([0, -width/2 - 3, height/2])\n        cube([20, 6, 8], center=true);\n    \n    // RF connector\n    translate([0, -width/2 - 6, height/2])\n        cylinder(h=4, d=5);\n}\n\nmodule label_area() {\n    // Embossed label area on top\n    translate([0, 0, height + wall_thick + 0.5])\n        cube([25, 15, 0.5], center=true);\n}\n\n// Assemble the model\nunion() {\n    main_body();\n    \n    translate([0, 0, 0])\n        union() {\n            switches();\n            cartridge_slot();\n            joystick_ports();\n            rf_box();\n            label_area();\n        }\n}\n\n// Add subtle wood grain texture\nfor(i = [-length/2 + 5:5:length/2 - 5]) {\n    translate([i, 0, height - 1])\n        cube([0.5, width - 4, 0.2]);\n}",
    "renders": true
  },
  {
    "musical_instrument": "vcb",
    "openscad_code": "// Realistic VCB (Vacuum Circuit Breaker) - Medium complexity\n// Scale: ~70mm tall, 3D-printable with 2mm walls\n\n$fn = 36;  // Smooth curves for printing\n\n// Main dimensions\nbase_w = 40;\nbase_d = 30;\nbase_h = 8;\n\nbody_w = 35;\nbody_d = 25;\nbody_h = 35;\n\ntop_h = 10;\ntop_w = 45;\n\n// Vacuum interrupter chamber\nmodule interrupter_chamber() {\n    // Main ceramic body\n    color(\"ivory\") \n    cylinder(h = 25, r1 = 12, r2 = 10);\n    \n    // Metal end caps\n    translate([0,0,-1])\n        color(\"silver\") cylinder(h = 2, r = 13);\n    \n    translate([0,0,24])\n        color(\"silver\") cylinder(h = 2, r = 11);\n}\n\n// Operating rod with spring\nmodule operating_mechanism() {\n    // Main rod\n    color(\"gray\")\n    translate([0,0,-5])\n        cylinder(h = 35, r = 2.5);\n    \n    // Return spring\n    for(i = [0:3:30]) {\n        translate([0,0,i])\n            rotate([0,0,i*15])\n            color(\"silver\")\n            difference() {\n                cylinder(h = 3, r1 = 5, r2 = 5.5);\n                cylinder(h = 3.1, r = 3.5);\n            }\n    }\n}\n\n// Terminal connections\nmodule terminal(is_top = true) {\n    offset = is_top ? 28 : -8;\n    translate([0, 0, offset])\n    union() {\n        // Main terminal block\n        color(\"gold\") \n        cube([20, 5, 6], center=true);\n        \n        // Bolt holes\n        for(x = [-7, 7]) {\n            translate([x, 0, 0])\n                color(\"black\")\n                cylinder(h = 7, r = 2);\n        }\n    }\n}\n\n// Mounting brackets\nmodule mounting_bracket() {\n    translate([-20, 0, -4])\n    union() {\n        // Main bracket\n        color(\"gray\")\n        cube([8, 20, 8]);\n        \n        // Mounting hole\n        translate([-4, 0, 0])\n            color(\"black\")\n            cylinder(h = 9, r = 2.5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base with mounting\n    color(\"darkgray\")\n    cube([base_w, base_d, base_h], center=true);\n    \n    // Mounting brackets on sides\n    mounting_bracket();\n    mirror([1,0,0]) mounting_bracket();\n    \n    // Main body enclosure\n    translate([0, 0, base_h/2 + body_h/2])\n        color(\"dimgray\")\n        cube([body_w, body_d, body_h], center=true);\n    \n    // Top cover\n    translate([0, 0, base_h + body_h + top_h/2])\n        color(\"lightgray\")\n        cube([top_w, body_d + 5, top_h], center=true);\n    \n    // Vacuum interrupter (centered)\n    translate([0, 0, base_h + body_h - 10])\n        rotate([90, 0, 0])\n        interrupter_chamber();\n    \n    // Operating mechanism\n    translate([0, 0, base_h + 5])\n        operating_mechanism();\n    \n    // Terminal connections\n    terminal(true);\n    terminal(false);\n    \n    // Control box on side\n    translate([body_w/2 + 3, 0, base_h + body_h/2])\n    color(\"black\")\n    cube([6, 12, 8], center=true);\n    \n    // Status indicator LED\n    translate([body_w/2 + 3, 0, base_h + body_h/2 + 5])\n    color(\"red\")\n    sphere(r = 2);\n}",
    "renders": true
  },
  {
    "musical_instrument": "vci",
    "openscad_code": "// VCI (Vehicle Control Interface) - Realistic Style, Medium Complexity\n// 3D printable VCI module with proper wall thickness and no overhangs\n\n// Overall dimensions\nvci_width = 80;\nvci_height = 45;\nvci_depth = 25;\n\n// Wall thickness\nwall = 2;\n\n// Main housing\nmodule housing() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, vci_depth/2])\n                cube([vci_width, vci_height, vci_depth], center=true);\n            translate([0, 0, vci_depth/2-5])\n                cube([vci_width-4, vci_height-4, vci_depth-2], center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, vci_depth/2+wall])\n            cube([vci_width-wall*2, vci_height-wall*2, vci_depth], center=true);\n        \n        // Cable opening\n        translate([0, -vci_height/2+wall, 0])\n            cube([20, wall*2, 8], center=true);\n    }\n}\n\n// Display screen\nmodule screen() {\n    color(\"black\")\n    translate([0, 10, vci_depth-wall/2])\n        cube([35, 15, 0.5], center=true);\n    \n    // Screen bezel\n    translate([0, 10, vci_depth-wall])\n        difference() {\n            cube([38, 18, wall], center=true);\n            cube([34, 14, wall+1], center=true);\n        }\n}\n\n// LED indicators\nmodule leds() {\n    for(i = [-1, 0, 1]) {\n        color(\"red\")\n        translate([i*10, -10, vci_depth-wall/2])\n            cylinder(h=0.5, r=2, $fn=16);\n        \n        // LED housing\n        translate([i*10, -10, vci_depth-wall])\n            difference() {\n                cylinder(h=wall, r=3, $fn=16);\n                cylinder(h=wall+1, r=2, $fn=16);\n            }\n    }\n}\n\n// Control buttons\nmodule buttons() {\n    // Emergency stop\n    color(\"red\")\n    translate([-25, 0, vci_depth-wall/2])\n        cylinder(h=2, r=5, $fn=32);\n    \n    // Start button\n    color(\"green\")\n    translate([0, 0, vci_depth-wall/2])\n        cylinder(h=2, r=5, $fn=32);\n    \n    // Stop button\n    color(\"yellow\")\n    translate([25, 0, vci_depth-wall/2])\n        cylinder(h=2, r=5, $fn=32);\n    \n    // Button housings\n    for(x = [-25, 0, 25]) {\n        translate([x, 0, vci_depth-wall])\n            difference() {\n                cylinder(h=wall+2, r=6, $fn=32);\n                cylinder(h=wall+3, r=5, $fn=32);\n            }\n    }\n}\n\n// Connector ports\nmodule connectors() {\n    // Ethernet port\n    translate([-vci_width/2+10, -vci_height/2+10, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cube([8, 12, 8]);\n            translate([0, 0, 4])\n                cube([6, 10, 6]);\n        }\n    \n    // USB port\n    translate([-vci_width/2+10, 0, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cube([6, 12, 6]);\n            translate([0, 0, 3])\n                cube([4, 10, 4]);\n        }\n    \n    // Power connector\n    translate([-vci_width/2+10, vci_height/2-10, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=12, r=5, $fn=32);\n            cylinder(h=13, r=3, $fn=32);\n        }\n}\n\n// Mounting brackets\nmodule mounts() {\n    // Left mount\n    translate([-vci_width/2-5, 0, vci_depth/2-5])\n        difference() {\n            cube([10, 8, 10]);\n            translate([5, 0, -1])\n                cylinder(h=12, r=2, $fn=16);\n        }\n    \n    // Right mount\n    translate([vci_width/2+5, 0, vci_depth/2-5])\n        mirror([1, 0, 0])\n        difference() {\n            cube([10, 8, 10]);\n            translate([5, 0, -1])\n                cylinder(h=12, r=2, $fn=16);\n        }\n}\n\n// Assembly\nhousing();\nscreen();\nleds();\nbuttons();\nconnectors();\nmounts();",
    "renders": true
  },
  {
    "musical_instrument": "vcf",
    "openscad_code": "// VCF (Voltage Controlled Filter) module - realistic medium complexity style\n// Size: 80mm x 60mm x 25mm\n\n// Main body dimensions\nbody_w = 80;\nbody_h = 60;\nbody_d = 20;\nwall_thickness = 2;\n\n// Panel dimensions\npanel_w = body_w;\npanel_h = body_h;\npanel_d = 3;\npanel_offset = body_d/2 + panel_d/2;\n\n// Knobs\nknob_r = 6;\nknob_h = 8;\nknob_spacing = 20;\n\n// Jacks\njack_r = 3.5;\njack_h = 7;\njack_spacing = 15;\n\n// Screws\nscrew_r = 2;\nscrew_head_r = 3;\nscrew_h = 5;\n\n// LED\nled_r = 2;\nled_h = 1.5;\n\n// Module body\nmodule vcf_body() {\n    difference() {\n        // Main enclosure\n        cube([body_w, body_h, body_d], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n            cube([body_w-wall_thickness*2, body_h-wall_thickness*2, body_d-wall_thickness], center=true);\n        \n        // Jack holes on front\n        for(i = [-1, 0, 1]) {\n            translate([i * jack_spacing, body_h/2 - jack_r - 2, 0])\n                rotate([90, 0, 0])\n                    cylinder(r=jack_r, h=wall_thickness+1, center=true, $fn=20);\n        }\n        \n        // CV input jack\n        translate([-body_w/2 + jack_r + 2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(r=jack_r, h=wall_thickness+1, center=true, $fn=20);\n                \n        // Output jack\n        translate([body_w/2 - jack_r - 2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(r=jack_r, h=wall_thickness+1, center=true, $fn=20);\n    }\n}\n\n// Front panel with details\nmodule vcf_panel() {\n    difference() {\n        // Main panel\n        translate([0, 0, panel_offset])\n            cube([panel_w, panel_h, panel_d], center=true);\n        \n        // Jack holes\n        for(i = [-1, 0, 1]) {\n            translate([i * jack_spacing, body_h/2 - jack_r - 2, panel_offset])\n                cylinder(r=jack_r, h=panel_d+1, center=true, $fn=20);\n        }\n        \n        translate([-body_w/2 + jack_r + 2, 0, panel_offset])\n            cylinder(r=jack_r, h=panel_d+1, center=true, $fn=20);\n            \n        translate([body_w/2 - jack_r - 2, 0, panel_offset])\n            cylinder(r=jack_r, h=panel_d+1, center=true, $fn=20);\n        \n        // Knob holes\n        for(i = [-1, 0, 1]) {\n            translate([i * knob_spacing, -body_h/2 + knob_r + 10, panel_offset])\n                cylinder(r=knob_r/2, h=panel_d+1, center=true, $fn=20);\n        }\n        \n        // LED hole\n        translate([0, 0, panel_offset])\n            cylinder(r=led_r, h=panel_d+1, center=true, $fn=20);\n        \n        // Mounting screw holes\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x * (body_w/2 - 5), y * (body_h/2 - 5), panel_offset])\n                    cylinder(r=screw_r, h=panel_d+1, center=true, $fn=20);\n            }\n        }\n    }\n}\n\n// Knob module\nmodule knob(pos_x, pos_y) {\n    translate([pos_x, pos_y, panel_offset + panel_d/2 + knob_h/2]) {\n        difference() {\n            // Main knob body\n            cylinder(r=knob_r, h=knob_h, center=true, $fn=32);\n            \n            // Indicator line\n            translate([0, 0, knob_h/2 - 0.5])\n                cube([knob_r*2, 1, 1], center=true);\n                \n            // Shaft hole\n            cylinder(r=knob_r/2, h=knob_h+1, center=true, $fn=20);\n        }\n    }\n}\n\n// Jack module\nmodule jack(pos_x, pos_y, rot) {\n    translate([pos_x, pos_y, 0])\n        rotate(rot) {\n            // Jack body\n            translate([0, 0, 0])\n                cylinder(r=jack_r+1, h=jack_h, center=true, $fn=20);\n            \n            // Jack hole\n            translate([0, 0, -jack_h/2])\n                cylinder(r=jack_r, h=jack_h, center=true, $fn=20);\n        }\n}\n\n// Screw module\nmodule screw(pos_x, pos_y) {\n    translate([pos_x, pos_y, panel_offset + panel_d/2 + screw_h/2]) {\n        difference() {\n            // Screw head\n            cylinder(r=screw_head_r, h=screw_h, center=true, $fn=20);\n            \n            // Screw slot\n            translate([0, 0, screw_h/2 - 0.5])\n                cube([screw_head_r*1.5, 0.5, 1], center=true);\n                \n            // Thread hole\n            cylinder(r=screw_r, h=screw_h+1, center=true, $fn=20);\n        }\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    translate([0, 0, panel_offset + panel_d/2 + led_h/2])\n        cylinder(r=led_r, h=led_h, center=true, $fn=20);\n}\n\n// Assembly\nunion() {\n    // Main components\n    vcf_body();\n    vcf_panel();\n    \n    // Knobs\n    for(i = [-1, 0, 1]) {\n        knob(i * knob_spacing, -body_h/2 + knob_r + 10);\n    }\n    \n    // Jacks\n    for(i = [-1, 0, 1]) {\n        jack(i * jack_spacing, body_h/2 - jack_r - 2, [90, 0, 0]);\n    }\n    jack(-body_w/2 + jack_r + 2, 0, [0, 90, 0]);\n    jack(body_w/2 - jack_r - 2, 0, [0, 90, 0]);\n    \n    // Mounting screws\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            screw(x * (body_w/2 - 5), y * (body_h/2 - 5));\n        }\n    }\n    \n    // LED\n    led_indicator();\n}",
    "renders": true
  },
  {
    "musical_instrument": "vcq",
    "openscad_code": "// VCQ (Variable-Capacitor Quadrant) – medium-realistic style\n// Approx. 70 mm diameter, 15 mm thick, no overhangs, 0.8 mm wall-min\n// Designed for dual-nozzle FDM printing: body in PLA, contacts in conductive filament\n\n$fa = 1; $fs = 0.4;\n\n// Main parameters\nd_body = 70;      // Overall diameter\nh_body = 6;       // Body thickness\nd_shaft = 6;      // Shaft hole\nd_boss = 12;      // Central boss\nh_boss = 2;       // Boss height above body\nr_bend = 3;       // Fillet radius\nwall = 1.6;       // Wall thickness (2 perimeters at 0.4 mm)\nslot_w = 2.2;     // Stator slot width\nslot_d = 1.5;     // Stator slot depth\nn_stator = 8;     // Number of stator vanes\ncap_w = 18;       // Rotor plate diameter\ncap_h = 1.2;      // Rotor plate thickness\ncap_cut = 12;     // Cut-out diameter on rotor\n\n// Utility module for rounded disc\nmodule disc(d, h, r = 0)\n{\n    difference() {\n        cylinder(d = d + r*2, h = h, $fn = 90);\n        translate([0,0,-1])\n            cylinder(d = d, h = h+2, $fn = 90);\n        if(r > 0)\n            for(a=[0:90:270])\n                rotate([0,0,a])\n                    translate([d/2+r-0.01, 0, -1])\n                        cube([r+0.02, r*2+0.02, h+2], center = true);\n    }\n}\n\n// Main stator body\nmodule stator()\n{\n    difference() {\n        // Body with rounded edge\n        union() {\n            disc(d_body, h_body, r_bend);\n            translate([0,0,h_body])\n                cylinder(d = d_boss, h = h_boss, $fn = 60);\n        }\n\n        // Central shaft hole\n        translate([0,0,-1])\n            cylinder(d = d_shaft + wall, h = h_body + h_boss + 2, $fn = 30);\n\n        // Stator slots (radial vanes)\n        for(i=[0:n_stator-1])\n            rotate([0,0,i*360/n_stator])\n                translate([d_body/2 - slot_d, -slot_w/2, h_body/2])\n                    cube([slot_d, slot_w, h_body + 0.5], center = true);\n    }\n}\n\n// Rotor plate (quarter-circle variable capacitor plate)\nmodule rotor()\n{\n    plate_thick = cap_h;\n    difference() {\n        // Quarter disc\n        intersection() {\n            cylinder(d = cap_w, h = plate_thick, $fn = 90);\n            translate([0,-cap_w/2,0])\n                cube([cap_w/2, cap_w/2, plate_thick], center = false);\n        }\n        // Center hole for axle\n        translate([0,0,-1])\n            cylinder(d = d_shaft, h = plate_thick + 2, $fn = 30);\n        // Optional cut-out to reduce mass\n        translate([0,0,-1])\n            cylinder(d = cap_cut, h = plate_thick + 2, $fn = 30);\n    }\n}\n\n// Assembly\nstator();\ntranslate([0,0,h_body + h_boss + 0.2]) rotor();",
    "renders": true
  },
  {
    "musical_instrument": "vch",
    "openscad_code": "// Realistic Medium-Complexity VCH (Vertical Clitoral Hood) Jewelry Model\n// External dimensions: ~20 mm bar length, 5 mm ball diameter\n// Wall thickness ≥0.8 mm for reliable printing\n\n$fn = 36; // Smooth curves for printing\n\n// Overall scale factor for easy resizing\nscale_factor = 1.0;\n\n// Bar dimensions\nbar_length = 20 * scale_factor;\nbar_diameter = 1.6 * scale_factor;\nball_diameter = 5 * scale_factor;\n\n// Piercing gap – functional clearance\ngap = 2.0 * scale_factor;\n\n// Thread details (simplified M1.6)\nthread_pitch = 0.35 * scale_factor;\nthread_depth = 0.15 * scale_factor;\nthread_turns = 7;\n\n// Main module\nmodule vch_jewelry() {\n    // Central curved bar\n    difference() {\n        union() {\n            // Straight shaft\n            translate([0, 0, -bar_length/2])\n                cylinder(h = bar_length, d = bar_diameter, center = true);\n\n            // Smooth blend fillets at ends\n            translate([0, 0, bar_length/2])\n                sphere(d = bar_diameter * 1.2);\n            translate([0, 0, -bar_length/2])\n                sphere(d = bar_diameter * 1.2);\n        }\n        // Central gap for hood tissue\n        translate([0, 0, 0])\n            cube([gap * 2, bar_diameter * 1.5, bar_diameter * 1.5], center = true);\n    }\n\n    // Lower fixed ball\n    translate([0, 0, -bar_length/2 - ball_diameter/2])\n        sphere(d = ball_diameter);\n\n    // Upper removable ball with internal thread cavity\n    translate([0, 0, bar_length/2 + ball_diameter/2])\n        sphere(d = ball_diameter);\n\n    // Internal threading on bar end\n    for (i = [0 : thread_turns - 1]) {\n        rotate([0, 0, i * 360 / thread_turns])\n            translate([0, 0, bar_length/2 + i * thread_pitch])\n                cylinder(h = thread_pitch * 0.85, d = bar_diameter - 2 * thread_depth, $fn = 6);\n    }\n\n    // Decorative micro ridges for grip\n    for (i = [-3 : 3]) {\n        if (i != 0) {\n            rotate([0, 0, i * 30])\n                translate([0, 0, bar_length/2 + ball_diameter/2 - 2.5 + abs(i) * 0.3])\n                    cylinder(h = 0.4, d1 = ball_diameter - 0.2, d2 = ball_diameter + 0.2);\n        }\n    }\n\n    // Safety rounded edges on balls\n    translate([0, 0, -bar_length/2 - ball_diameter/2])\n        difference() {\n            sphere(d = ball_diameter + 0.2);\n            translate([0, 0, -0.5])\n                cube([ball_diameter * 2, ball_diameter * 2, 1], center = true);\n        }\n}\n\n// Render the model centered at origin\nvch_jewelry();",
    "renders": true
  },
  {
    "musical_instrument": "vcg",
    "openscad_code": "// VCG (Variable Cardioid Generator / Studio Condenser Microphone)\n// Realistic style, medium complexity\n// Approx 85 mm long, 50 mm diameter\n// Designed for FDM printing, all angles <= 45°, 1.2 mm walls\n\n$fn = 36;\n\n// Main module\nmodule vcg_mic() {\n    difference() {\n        union() {\n            // Body shell\n            body();\n            \n            // Front grill\n            grill();\n            \n            // Capsule mount inside\n            capsule_mount();\n            \n            // Output connector\n            xlr_connector();\n            \n            // Pad / filter switches\n            switches();\n        }\n        \n        // Hollow body\n        hollow_body();\n        \n        // Grill holes (done via difference inside grill module)\n    }\n}\n\n// Main body shell\nmodule body() {\n    // Cylindrical main body\n    cylinder(h = 55, d = 50, center = true);\n    \n    // Tapered front section\n    translate([0, 0, 27.5]) {\n        cylinder(h = 15, d1 = 50, d2 = 42, center = true);\n    }\n    \n    // Rear cap\n    translate([0, 0, -27.5]) {\n        cylinder(h = 8, d = 50, center = true);\n    }\n}\n\n// Front wire grill\nmodule grill() {\n    difference() {\n        // Outer grill sphere\n        translate([0, 0, 35]) {\n            sphere(d = 42);\n        }\n        \n        // Inner grill sphere (creates wall thickness)\n        translate([0, 0, 35]) {\n            sphere(d = 38);\n        }\n        \n        // Grill holes pattern\n        for (a = [0:30:150]) {\n            rotate([a, 0, 0]) {\n                for (b = [0:30:360]) {\n                    rotate([0, b, 0]) {\n                        translate([0, 0, 35]) {\n                            sphere(d = 3);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Internal capsule mounting\nmodule capsule_mount() {\n    // Main bracket\n    translate([0, 0, 10]) {\n        cube([20, 20, 5], center = true);\n    }\n    \n    // Front support\n    translate([0, 0, 25]) {\n        cylinder(h = 10, d = 8, center = true);\n    }\n    \n    // Rear support\n    translate([0, 0, -5]) {\n        cylinder(h = 5, d = 8, center = true);\n    }\n}\n\n// XLR 3-pin connector\nmodule xlr_connector() {\n    // Outer shell\n    translate([0, 0, -35]) {\n        cylinder(h = 15, d = 25, center = true);\n    }\n    \n    // Inner insert\n    translate([0, 0, -42]) {\n        cylinder(h = 8, d = 20, center = true);\n    }\n    \n    // Pin pattern\n    for (x = [-5, 0, 5]) {\n        translate([x, 0, -42]) {\n            cylinder(h = 3, d = 2);\n        }\n    }\n}\n\n// Pad and filter switches\nmodule switches() {\n    // Left switch (pad)\n    translate([-15, 20, 0]) {\n        switch();\n    }\n    \n    // Right switch (filter)\n    translate([15, 20, 0]) {\n        switch();\n    }\n}\n\n// Individual switch\nmodule switch() {\n    difference() {\n        // Switch body\n        cube([8, 4, 3], center = true);\n        \n        // Indicator slot\n        translate([0, 2.1, 0]) {\n            cube([6, 0.5, 1], center = true);\n        }\n    }\n}\n\n// Hollow out the body\nmodule hollow_body() {\n    // Main hollow\n    cylinder(h = 65, d = 47.6, center = true);\n    \n    // Tapered hollow\n    translate([0, 0, 27.5]) {\n        cylinder(h = 15, d1 = 47.6, d2 = 40, center = true);\n    }\n}\n\n// Generate the model\nvcg_mic();",
    "renders": true
  },
  {
    "musical_instrument": "vcn",
    "openscad_code": "// VCN (Virtual Cable Network) Connector - Realistic Style, Medium Complexity\n// A 3D printable RJ45-style network connector with realistic proportions\n\nmodule cable_strand(radius=1.5, length=30) {\n    rotate([0, 90, 0]) cylinder(h=length, r=radius, $fn=8);\n}\n\nmodule cable() {\n    color(\"darkgray\") {\n        // Main cable sheath\n        difference() {\n            rotate([0, 90, 0]) cylinder(h=25, r=3, $fn=16);\n            // Cable end taper\n            translate([22, 0, 0]) rotate([0, 0, 0]) cylinder(h=5, r1=3, r2=2.5, $fn=16);\n        }\n        \n        // Internal wire strands (8 wires)\n        for(i=[-3:1:3]) {\n            translate([0, i*0.6, 0]) cable_strand(0.3, 5);\n        }\n    }\n}\n\nmodule connector_body() {\n    // Main connector housing\n    difference() {\n        // Outer shell\n        cube([21.5, 16, 11.5], center=true);\n        \n        // Internal cavity for cable\n        translate([0, 0, 3]) cube([19, 14, 8], center=true);\n        \n        // Front opening\n        translate([10.75, 0, 0]) cube([1, 8, 8], center=true);\n        \n        // Key notch (polarization)\n        translate([5, 0, 5.75]) cube([8, 3, 2], center=true);\n    }\n    \n    // Top latch spring\n    color(\"lightgray\") {\n        translate([0, 0, 6]) {\n            difference() {\n                // Latch body\n                cube([15, 12, 1.5], center=true);\n                \n                // Latch hook\n                translate([7.5, 0, 0]) cube([1, 8, 2.5], center=true);\n            }\n        }\n    }\n    \n    // Contact pins (8 gold contacts)\n    color(\"gold\") {\n        for(i=[-7:2:7]) {\n            translate([8.5, i*0.8, -3]) cube([2, 0.5, 3]);\n        }\n    }\n}\n\nmodule strain_relief() {\n    // Flexible boot for cable protection\n    color(\"black\") {\n        difference() {\n            translate([-15, 0, 0]) rotate([0, 90, 0]) cylinder(h=12, r=5, $fn=20);\n            \n            // Internal channel for cable\n            translate([-15, 0, 0]) rotate([0, 90, 0]) cylinder(h=13, r=3.2, $fn=16);\n            \n            // Flex cuts for strain relief\n            for(i=[-2:1:2]) {\n                rotate([0, i*30, 0]) translate([-15, 0, 0]) cube([15, 0.5, 10], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    connector_body();\n    translate([-10.75, 0, 0]) cable();\n    strain_relief();\n}\n\n// Optional: Mounting tab (for panel mount)\ncolor(\"darkgray\") {\n    translate([0, 0, -8]) {\n        difference() {\n            cube([5, 18, 2], center=true);\n            translate([0, 6, 0]) cylinder(h=3, r=1.5, $fn=12);\n            translate([0, -6, 0]) cylinder(h=3, r=1.5, $fn=12);\n        }\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "vck",
    "openscad_code": "// VCK (Victorinox Classic Knife) – medium-complexity realistic OpenSCAD model\n// Overall length ~70 mm, printable in one piece, no support needed\n\nscale_factor = 1;           // 1 = real size, increase for easier printing\nbody_len   = 55 * scale_factor;\nbody_wid   = 17 * scale_factor;\nbody_thk   =  9 * scale_factor;\nblade_len  = 58 * scale_factor;\nblade_wid  = 13 * scale_factor;\nblade_thk  =  1.2 * scale_factor;\nscale_len  = 30 * scale_factor;\nscale_wid  =  8 * scale_factor;\nscale_thk  =  0.4 * scale_factor;\nring_d     =  6 * scale_factor;\nring_t     =  2 * scale_factor;\nscrew_d    =  3 * scale_factor;\nscrew_h    =  1.5 * scale_factor;\nwall       =  1.2 * scale_factor;    // minimum printable wall thickness\n\nmodule roundedCube(size, r, center=false) {\n    // quick rounded cube using hull of spheres\n    translate(center?[0,0,0]:[size.x/2,size.y/2,size.z/2])\n    hull() {\n        for(dx=[r,size.x-r], dy=[r,size.y-r], dz=[r,size.z-r])\n            translate([dx,dy,dz]) sphere(r);\n    }\n}\n\nmodule bodyShell() {\n    difference() {\n        roundedCube([body_len, body_wid, body_thk], 2, center=false);\n        // cavity for tools\n        translate([wall, wall, wall])\n            roundedCube([body_len-2*wall, body_wid-2*wall, body_thk-2*wall], 1.5);\n        // screw hole\n        translate([body_len*0.75, body_wid/2, -0.1])\n            cylinder(d=screw_d, h=body_thk+0.2, center=false);\n    }\n}\n\nmodule blade() {\n    // flat ground drop-point blade\n    linear_extrude(height=blade_thk, center=true)\n    polygon(\n        points=[\n            [0,0],                                    // pivot\n            [blade_len*0.95, blade_wid/2-1],\n            [blade_len, 0],\n            [blade_len*0.95, -(blade_wid/2-1)],\n            [0,0]\n        ]);\n}\n\nmodule nailFile() {\n    // file on back scale\n    difference() {\n        roundedCube([scale_len, scale_wid, scale_thk], 1);\n        for(i=[0:4])\n            translate([scale_len*0.1+i*scale_len*0.18, 0, -0.1])\n                cube([scale_len*0.05, scale_wid+0.2, scale_thk+0.2]);\n    }\n}\n\nmodule keyRing() {\n    // split ring attached at pivot\n    rotate([90,0,0])\n    difference() {\n        cylinder(h=ring_t, d=ring_d+2*wall, center=true);\n        cylinder(h=ring_t+0.2, d=ring_d, center=true);\n    }\n}\n\nmodule sideScales() {\n    // red plastic scales\n    for(side=[-1,1]) {\n        translate([0,0,side*(body_thk/2+scale_thk/2)])\n            color(\"red\")\n            difference() {\n                roundedCube([body_len, body_wid, scale_thk], 2);\n                // logo recess\n                translate([body_len*0.8, body_wid*0.65, side*scale_thk/2])\n                    cube([8,5,scale_thk+0.1], center=true);\n            }\n    }\n}\n\n// assembly\nunion() {\n    // body\n    color(\"silver\")\n    bodyShell();\n\n    // blade in open position\n    translate([body_len*0.05, body_wid/2, body_thk/2])\n        rotate([0,90,0])\n        blade();\n\n    // nail file (closed)\n    translate([body_len*0.1, body_wid/2, -(body_thk/2-scale_thk/2)])\n        rotate([0,0,180])\n        nailFile();\n\n    // key ring\n    translate([body_len*0.02, body_wid/2, 0])\n        keyRing();\n\n    // scales\n    sideScales();\n}",
    "renders": true
  },
  {
    "musical_instrument": "vcx",
    "openscad_code": "// vcx (Voltage-Controlled Oscillator) module – medium-realistic style\n// Overall footprint ~60 mm × 40 mm × 15 mm\n\n$fn = 36; // smooth curves\n\n// ---------- Base PCB ----------\nmodule pcb_base() {\n    difference() {\n        // Main board\n        translate([0, 0, -1.6])\n            cube([60, 40, 1.6], center = true);\n        \n        // Four mounting holes Ø3 mm\n        for (x = [-25, 25])\n            for (y = [-15, 15])\n                translate([x, y, -2])\n                    cylinder(r = 1.5, h = 3, center = true);\n    }\n}\n\n// ---------- DIP-16 IC ----------\nmodule ic_16pin() {\n    // Body\n    translate([0, 0, 1.5])\n        cube([10, 8, 3], center = true);\n    \n    // Pins\n    for (i = [-7.5 : 5 : 7.5])\n        translate([i, -6, 0])\n            cube([1.5, 4, 0.8]);\n    for (i = [-7.5 : 5 : 7.5])\n        translate([i, 6, 0])\n            cube([1.5, 4, 0.8]);\n}\n\n// ---------- Electrolytic capacitor ----------\nmodule electrolytic_cap(d = 5, h = 8) {\n    translate([0, 0, h/2])\n        cylinder(r = d/2, h = h);\n    // Lead stubs\n    translate([0, 0, -0.5])\n        cylinder(r = 0.5, h = 1);\n}\n\n// ---------- 3-pin potentiometer ----------\nmodule pot_3pin() {\n    union() {\n        // Body\n        translate([0, 0, 4])\n            cube([6, 6, 4], center = true);\n        // Knob stub\n        translate([0, 0, 6.5])\n            cylinder(r = 3, h = 3);\n        // Pins\n        for (x = [-2.5 : 2.5 : 2.5])\n            translate([x, -5, 0])\n                cube([1, 4, 0.8]);\n    }\n}\n\n// ---------- 2-pin SIL header ----------\nmodule header_2pin() {\n    for (x = [-1 : 2 : 1])\n        translate([x, 0, 2])\n            cylinder(r = 0.6, h = 4);\n}\n\n// ---------- SMA RF connector ----------\nmodule sma_connector() {\n    difference() {\n        union() {\n            // Cylindrical body\n            translate([0, 0, 3])\n                cylinder(r = 4, h = 6);\n            // Threaded barrel\n            translate([0, 0, 9])\n                cylinder(r = 3.2, h = 8);\n        }\n        // Hollow center\n        translate([0, 0, 2])\n            cylinder(r = 1.3, h = 20);\n    }\n}\n\n// ---------- Ground-plane pour relief ----------\nmodule pour_relief() {\n    // Large central rectangle on copper layer\n    translate([0, 0, -0.5])\n        cube([45, 30, 0.2], center = true);\n}\n\n// ---------- Assembly ----------\npcb_base();\npour_relief();\n\n// IC in center\ntranslate([0, 0, 0])\n    ic_16pin();\n\n// Two electrolytics\ntranslate([-15, -10, 0.8])\n    electrolytic_cap(5, 8);\ntranslate([-15, 10, 0.8])\n    electrolytic_cap(6, 10);\n\n// Frequency adjust pot\ntranslate([15, -10, 0.8])\n    pot_3pin();\n\n// Control-voltage header\ntranslate([15, 10, 0.8])\n    header_2pin();\n\n// RF output SMA\ntranslate([25, 0, 0])\n    rotate([90, 0, 0])\n        sma_connector();",
    "renders": true
  },
  {
    "musical_instrument": "vcy",
    "openscad_code": "// VCY (Vaccine Cooler Vial) - Realistic style, medium complexity\n// 3D printable vaccine vial cooler with realistic proportions\n\n$fn = 30;\n\n// Main dimensions (mm)\nvial_diameter = 12;\nvial_height = 35;\nwall_thick = 1.5;\nbase_diameter = 20;\ncap_height = 8;\nbody_height = 45;\n\n// Create the complete VCY assembly\nmodule vcy_assembly() {\n    // Main body cylinder\n    union() {\n        // Outer shell\n        difference() {\n            cylinder(h=body_height, d=base_diameter, $fn=60);\n            translate([0, 0, wall_thick])\n                cylinder(h=body_height-wall_thick, d=base_diameter-wall_thick*2, $fn=60);\n        }\n        \n        // Base reinforcement ring\n        translate([0, 0, 0])\n            cylinder(h=wall_thick*2, d=base_diameter+1, $fn=60);\n            \n        // Internal cooling fins\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n                translate([0, 0, wall_thick])\n                    cube([wall_thick*1.2, base_diameter/2-wall_thick, body_height-wall_thick*2], center=true);\n        }\n        \n        // Vial holder insert\n        difference() {\n            translate([0, 0, body_height/2])\n                cylinder(h=body_height-wall_thick*2, d=vial_diameter+2, $fn=40);\n            translate([0, 0, wall_thick])\n                cylinder(h=body_height-wall_thick*2, d=vial_diameter, $fn=40);\n        }\n        \n        // Cap threading area\n        translate([0, 0, body_height])\n            cylinder(h=cap_height, d=base_diameter-1, $fn=60);\n            \n        // Threading ridges for cap\n        for(i=[0:3]) {\n            translate([0, 0, body_height+i*2])\n                cylinder(h=1, d=base_diameter-1-i*0.2, $fn=60);\n        }\n    }\n    \n    // Separate cap piece\n    translate([30, 0, 0])\n        vcy_cap();\n}\n\n// Cap module\nmodule vcy_cap() {\n    difference() {\n        // Main cap shape\n        cylinder(h=cap_height+2, d=base_diameter, $fn=60);\n        \n        // Internal cavity\n        translate([0, 0, 2])\n            cylinder(h=cap_height, d=base_diameter-wall_thick*2, $fn=60);\n            \n        // Threading grooves\n        for(i=[0:3]) {\n            translate([0, 0, 2+i*2])\n                cylinder(h=1.2, d=base_diameter-1+i*0.2, $fn=60);\n        }\n    }\n    \n    // Grip ridges on cap\n    for(i=[0:11]) {\n        rotate([0, 0, i*30])\n            translate([(base_diameter-2)/2, 0, cap_height/2+1])\n                cube([2, 1, cap_height], center=true);\n    }\n}\n\n// Display both pieces\nvcy_assembly();",
    "renders": true
  },
  {
    "musical_instrument": "vcz",
    "openscad_code": "// Realistic VCZ (VZ-61 Skorpion) Submachine Gun - Medium Complexity\n// 3D printable model with moderate detail, no moving parts\n\n$fn = 64;  // Smooth curves\n\n// Main dimensions (scaled for 3D printing)\noverall_length = 80;\nbarrel_length = 40;\nreceiver_height = 25;\nreceiver_width = 18;\ngrip_length = 30;\nmagazine_length = 40;\n\nmodule front_sight() {\n    translate([barrel_length - 2, 0, receiver_height - 3]) {\n        difference() {\n            cube([3, 8, 6], center = true);\n            cube([4, 4, 4], center = true);\n        }\n    }\n}\n\nmodule rear_sight() {\n    translate([-receiver_width/2 - 8, 0, receiver_height - 2]) {\n        difference() {\n            cube([5, 12, 8]);\n            translate([2, 6, 4]) cylinder(h = 5, d = 2);\n            translate([2, -6, 4]) cylinder(h = 5, d = 2);\n        }\n    }\n}\n\nmodule charging_handle() {\n    translate([-receiver_width/2 + 2, 0, receiver_height/2 + 2]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 8, d1 = 6, d2 = 4);\n                cylinder(h = 10, d = 2);\n            }\n        }\n    }\n}\n\nmodule magazine() {\n    translate([-receiver_width/2 - magazine_length/2 - 3, 0, -magazine_length/2]) {\n        difference() {\n            cube([magazine_length, 12, 8], center = true);\n            for (i = [1:4]) {\n                translate([magazine_length/2 - i*8, 0, 0])\n                    cube([2, 10, 6], center = true);\n            }\n        }\n    }\n}\n\nmodule grip() {\n    difference() {\n        translate([-receiver_width/2 - grip_length + 5, 0, -receiver_height/2 - grip_length/2]) {\n            rotate([0, 90, 0]) {\n                hull() {\n                    translate([0, 0, 0]) cylinder(h = 12, d = 8);\n                    translate([0, grip_length - 5, 0]) cylinder(h = 12, d = 12);\n                }\n            }\n        }\n        \n        // Finger grooves\n        for (i = [0:2]) {\n            translate([-receiver_width/2 - 15, 0, -receiver_height/2 - 8 - i*6]) {\n                rotate([0, 90, 0])\n                    cube([12, 3, 2], center = true);\n            }\n        }\n    }\n}\n\nmodule trigger_guard() {\n    difference() {\n        translate([-receiver_width/2 - 12, 0, -receiver_height - 8]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    cylinder(h = 20, d1 = 8, d2 = 12);\n                    cylinder(h = 22, d = 5);\n                }\n            }\n        }\n        // Cutout for trigger\n        translate([-receiver_width/2 - 10, 0, -receiver_height - 6])\n            cube([15, 8, 10], center = true);\n    }\n}\n\nmodule trigger() {\n    translate([-receiver_width/2 - 8, 0, -receiver_height - 5]) {\n        rotate([0, 10, 0]) {\n            cube([8, 2, 5]);\n        }\n    }\n}\n\nmodule folding_stock() {\n    translate([-receiver_width/2 - 30, 0, receiver_height/2]) {\n        // Stock hinge\n        rotate([0, 90, 0]) {\n            cylinder(h = 12, d = 6);\n        }\n        \n        // Stock wire frame\n        for (i = [-1:1]) {\n            translate([i*5, 0, 0])\n                cube([2, 2, 25]);\n        }\n        translate([0, 0, 25])\n            cube([12, 2, 2]);\n    }\n}\n\nmodule receiver() {\n    difference() {\n        // Main receiver body\n        translate([0, 0, receiver_height/2]) {\n            cube([receiver_width, overall_length - 10, receiver_height], center = true);\n        }\n        \n        // Ejection port\n        translate([receiver_width/2 + 0.1, -10, receiver_height - 5]) {\n            cube([2, 20, 8]);\n        }\n        \n        // Magazine well\n        translate([-receiver_width/2 - 12, 0, -receiver_height/2]) {\n            cube([10, 14, receiver_height + 2]);\n        }\n    }\n}\n\nmodule barrel() {\n    translate([overall_length/2 - 5, 0, receiver_height - 5]) {\n        difference() {\n            // Outer barrel\n            cylinder(h = barrel_length, d = 10);\n            \n            // Inner barrel\n            cylinder(h = barrel_length + 1, d = 6);\n            \n            // Muzzle brake cuts\n            translate([barrel_length - 3, 0, 0]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 12, d = 8);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the VCZ\nunion() {\n    receiver();\n    barrel();\n    grip();\n    magazine();\n    front_sight();\n    rear_sight();\n    charging_handle();\n    trigger_guard();\n    trigger();\n    folding_stock();\n}",
    "renders": true
  },
  {
    "musical_instrument": "dco",
    "openscad_code": "// Realistic medium-detail DCO (Digitally-Controlled Oscillator) module\n// Overall dimensions: 70 x 50 x 15 mm\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main PCB base\nmodule pcb_base() {\n    difference() {\n        // Main board\n        cube([70, 50, 1.6], center=true);\n        \n        // Mounting holes (4 corners)\n        for(x = [-30, 30])\n            for(y = [-20, 20])\n                translate([x, y, 0])\n                    cylinder(r=1.5, h=3, center=true, $fn=20);\n    }\n}\n\n// Power connector (10-pin header)\nmodule power_header() {\n    translate([-35, 0, 0.8]) {\n        cube([6, 12, 5]);\n        \n        // Pin holes\n        for(i = [0:9]) {\n            translate([3, -5.5 + i*1.27, 2.5])\n                cylinder(r=0.3, h=3, $fn=8);\n        }\n    }\n}\n\n// Main IC (28-pin DIP package)\nmodule main_ic() {\n    translate([0, 0, 0.8]) {\n        cube([14.5, 7.6, 4]);\n        \n        // Pin rows\n        for(side = [-1, 1]) {\n            for(pin = [0:13]) {\n                translate([side*7.25, -5 + pin*0.75, 0])\n                    cube([3, 0.5, 0.5]);\n            }\n        }\n    }\n}\n\n// Clock crystal oscillator\nmodule crystal() {\n    translate([20, 15, 0.8]) {\n        cube([5.5, 3.5, 1.5]);\n        translate([-0.5, 1.5, 0])\n            cube([6.5, 0.5, 1.5]);\n    }\n}\n\n// Potentiometers (3x 9mm Alpha)\nmodule potentiometers() {\n    for(i = [0:2]) {\n        translate([25 - i*15, -15, 0.8]) {\n            // Base\n            cylinder(r=4.5, h=8, $fn=32);\n            // Shaft\n            translate([0, 0, 8])\n                cylinder(r=3.2, h=7, $fn=24);\n            // Flat\n            rotate([0, 0, 135])\n                translate([0, 3.2, 11.5])\n                    cube([1.5, 2, 3.5]);\n        }\n    }\n}\n\n// CV input jacks (3.5mm)\nmodule cv_jacks() {\n    for(i = [0:1]) {\n        translate([-10 - i*10, 20, 0.8]) {\n            // Body\n            cylinder(r=5.5, h=9, $fn=32);\n            // Threaded bushing\n            translate([0, 0, 9])\n                cylinder(r=4, h=5, $fn=24);\n            // Center hole\n            translate([0, 0, 0])\n                cylinder(r=1.5, h=15, $fn=16);\n        }\n    }\n}\n\n// Output jack\nmodule output_jack() {\n    translate([25, 20, 0.8]) {\n        cylinder(r=5.5, h=9, $fn=32);\n        translate([0, 0, 9])\n            cylinder(r=4, h=5, $fn=24);\n        translate([0, 0, 0])\n            cylinder(r=1.5, h=15, $fn=16);\n    }\n}\n\n// Decoupling capacitors\nmodule capacitors() {\n    for(pos = [[-15, -10], [-15, 10], [15, -10], [15, 10]]) {\n        translate([pos[0], pos[1], 0.8]) {\n            cylinder(r=2, h=5.5, $fn=20);\n            translate([0, 0, 5.5])\n                cylinder(r=1, h=0.5, $fn=10);\n        }\n    }\n}\n\n// Resistor network\nmodule resistors() {\n    for(row = [0:4]) {\n        for(col = [0:3]) {\n            translate([-20 + col*5, -5 + row*2, 0.8]) {\n                cube([3.2, 1.6, 1.8]);\n            }\n        }\n    }\n}\n\n// Indicator LED\nmodule status_led() {\n    translate([30, -15, 0.8]) {\n        cylinder(r=1.5, h=2, $fn=16);\n        // LED body\n        translate([0, 0, 2])\n            cube([3, 1.5, 1.2]);\n    }\n}\n\n// Assembly\nunion() {\n    pcb_base();\n    power_header();\n    main_ic();\n    crystal();\n    potentiometers();\n    cv_jacks();\n    output_jack();\n    capacitors();\n    resistors();\n    status_led();\n}",
    "renders": true
  },
  {
    "musical_instrument": "dca",
    "openscad_code": "// Realistic DCA (Dichloroacetic Acid) molecule model\n// Medium complexity, 3D-printable, ~75 mm long\n\n// Parameters\natom_size = 8;\nbond_size = 3;\nbond_length = 20;\nwall = 1.5;\n\n// Color definitions\nC_color = \"DarkOliveGreen\";\nH_color = \"White\";\nO_color = \"Red\";\nCl_color = \"Green\";\n\nmodule atom(r, col) {\n    color(col)\n    difference() {\n        sphere(r);\n        // Hollow for material saving\n        sphere(r - wall);\n    }\n}\n\nmodule bond(l, r) {\n    cylinder(h = l, r = r, center = true);\n}\n\nmodule chlorine() {\n    union() {\n        atom(atom_size * 1.15, Cl_color);\n        // Lone pairs indication (simplified)\n        translate([0,0,atom_size*0.9])\n            sphere(atom_size * 0.25);\n    }\n}\n\nmodule carbonyl_oxygen() {\n    union() {\n        atom(atom_size * 0.9, O_color);\n        // Double bond representation\n        translate([0,0,atom_size*0.7])\n            sphere(atom_size * 0.3);\n    }\n}\n\nmodule methyl_group() {\n    // CH3 group\n    union() {\n        atom(atom_size * 0.7, C_color);\n        \n        // Three hydrogen atoms at tetrahedral angles\n        for(a = [0:120:359]) {\n            rotate([0, 109.5, a])\n            translate([0, 0, bond_length * 0.9])\n                atom(atom_size * 0.5, H_color);\n        }\n    }\n}\n\n// Main molecule structure\nmodule dca_molecule() {\n    union() {\n        // Central carbon (C1)\n        translate([0, 0, 0])\n            atom(atom_size, C_color);\n        \n        // Carboxyl group (COOH)\n        // Carbonyl carbon (C2)\n        translate([bond_length * 1.2, 0, 0])\n            atom(atom_size, C_color);\n        \n        // Carbonyl oxygen (double bond)\n        translate([bond_length * 1.2 + atom_size * 0.8, 0, atom_size * 0.7])\n            carbonyl_oxygen();\n        \n        // Hydroxyl oxygen\n        translate([bond_length * 1.2 + atom_size * 0.8, 0, -atom_size * 0.7])\n            atom(atom_size * 0.85, O_color);\n        \n        // Hydroxyl hydrogen\n        translate([bond_length * 1.2 + atom_size * 1.5, 0, -atom_size])\n            atom(atom_size * 0.5, H_color);\n        \n        // Chlorine atoms\n        // Chlorine 1\n        rotate([0, 109.5, 0])\n        translate([bond_length * 0.9, 0, 0])\n            chlorine();\n        \n        // Chlorine 2\n        rotate([0, 109.5, 180])\n        translate([bond_length * 0.9, 0, 0])\n            chlorine();\n        \n        // Bonds (simplified cylinders between atoms)\n        // C1-C2 bond\n        color(\"Gray\")\n        translate([bond_length * 0.6, 0, 0])\n        rotate([0, 90, 0])\n            bond(bond_length * 1.2, bond_size);\n        \n        // C1-Cl1 bond\n        color(\"Gray\")\n        rotate([0, 109.5, 0])\n        translate([bond_length * 0.45, 0, 0])\n            bond(bond_length * 0.9, bond_size);\n        \n        // C1-Cl2 bond\n        color(\"Gray\")\n        rotate([0, 109.5, 180])\n        translate([bond_length * 0.45, 0, 0])\n            bond(bond_length * 0.9, bond_size);\n        \n        // C2=O bond\n        color(\"Gray\")\n        translate([bond_length * 1.2 + atom_size * 0.4, 0, atom_size * 0.35])\n            bond(atom_size * 0.7, bond_size);\n        \n        // C2-OH bond\n        color(\"Gray\")\n        translate([bond_length * 1.2 + atom_size * 0.4, 0, -atom_size * 0.35])\n            bond(atom_size * 0.7, bond_size);\n        \n        // O-H bond\n        color(\"Gray\")\n        translate([bond_length * 1.2 + atom_size * 1.15, 0, -atom_size * 0.85])\n            bond(atom_size * 0.65, bond_size);\n    }\n}\n\n// Base for stability\nmodule base() {\n    difference() {\n        cube([120, 40, 5], center = true);\n        // Lightening holes\n        for(x = [-40:20:40])\n            for(y = [-10:10:10])\n                translate([x, y, -2.5])\n                    cylinder(h = 6, r = 4);\n    }\n}\n\n// Assembly\nunion() {\n    // Position molecule on base\n    translate([0, 0, 15])\n        rotate([0, 0, 15])\n            dca_molecule();\n    \n    // Add base\n    color(\"DimGray\")\n    base();\n}",
    "renders": true
  },
  {
    "musical_instrument": "dcf",
    "openscad_code": "// DCF-77 Radio-Controlled Clock Receiver Module (medium-complexity, realistic style)\n// Overall footprint ≈ 55 mm × 35 mm × 10 mm – printable without supports\n\n// Basic parameters\n$fn = 32;\nboard_w = 40;          // PCB width\nboard_l = 55;          // PCB length\nboard_t = 1.6;         // PCB thickness\nwall = 1;              // generic wall / clearance\n\n// Main PCB\nmodule pcb() {\n    color(\"green\")\n    difference() {\n        cube([board_l, board_w, board_t], center = true);\n        // Four mounting holes Ø2 mm\n        for (xy = [[-25,-15], [25,-15], [25,15], [-25,15]])\n            translate([xy[0], xy[1], 0])\n                cylinder(h = board_t + 1, r = 1, center = true);\n    }\n}\n\n// Shielding can (ferrite antenna housing)\nmodule shield_can() {\n    can_l = 28;\n    can_w = 10;\n    can_h = 7;\n    translate([board_l/2 - can_l/2 - 3, 0, board_t/2 + can_h/2])\n        difference() {\n            color(\"silver\")\n                cube([can_l, can_w, can_h], center = true);\n            // Hollow inside\n            translate([0, 0, -wall/2])\n                cube([can_l - 2*wall, can_w - 2*wall, can_h], center = true);\n            // Side opening for ferrite rod\n            translate([-(can_l/2 - wall), 0, 0])\n                cube([wall + 1, can_w - 2*wall, can_h - wall], center = true);\n        }\n}\n\n// Ferrite rod antenna (visible through opening)\nmodule ferrite_rod() {\n    rod_l = 30;\n    rod_d = 5;\n    translate([board_l/2 - 17, 0, board_t/2 + 3])\n        rotate([0, 90, 0])\n            color(\"brown\")\n                cylinder(h = rod_l, r = rod_d/2, center = true);\n}\n\n// 8-pin header\nmodule header_8() {\n    pin_l = 6;\n    pin_d = 0.64;\n    pitch = 2.54;\n    translate([-board_l/2 + 6, -3*pitch/2, board_t/2 + pin_l/2])\n        for (i = [0:7])\n            translate([0, i*pitch, 0])\n                color(\"gold\")\n                    cylinder(h = pin_l, r = pin_d/2, $fn = 8);\n}\n\n// Tuning capacitor (rectangular block)\nmodule tuning_cap() {\n    cap_l = 8;\n    cap_w = 5;\n    cap_h = 4;\n    translate([board_l/2 - 15, 12, board_t/2 + cap_h/2])\n        color(\"black\")\n            cube([cap_l, cap_w, cap_h], center = true);\n}\n\n// SMD IC (small black rectangle)\nmodule ic() {\n    ic_l = 6;\n    ic_w = 4;\n    ic_h = 1.2;\n    translate([board_l/2 - 8, -10, board_t/2 + ic_h/2])\n        color(\"very dark grey\")\n            cube([ic_l, ic_w, ic_h], center = true);\n}\n\n// Large electrolytic capacitor\nmodule electrolytic_cap() {\n    cap_r = 2.5;\n    cap_h = 8;\n    translate([-board_l/2 + 12, 10, board_t/2 + cap_h/2])\n        color(\"blue\")\n            cylinder(h = cap_h, r = cap_r, $fn = 16);\n}\n\n// Final assembly\nunion() {\n    pcb();\n    shield_can();\n    ferrite_rod();\n    header_8();\n    tuning_cap();\n    ic();\n    electrolytic_cap();\n}",
    "renders": true
  },
  {
    "musical_instrument": "dcm",
    "openscad_code": "// DCM (Digital Clock Module) - Realistic Style, Medium Complexity\n// 3D printable enclosure for common 4-digit 7-segment display module\n\n// Overall dimensions for 3D printing\n$fn = 32;  // Smooth curves\nwall_thickness = 1.5;\nenclosure_length = 72;\nenclosure_width = 25;\nenclosure_height = 12;\nscrew_hole_diameter = 2.2;\nscrew_hole_depth = 6;\ndisplay_width = 50;\ndisplay_height = 14;\ndisplay_depth = 5;\n\n// Main enclosure body\nmodule enclosure() {\n    difference() {\n        // Outer shell\n        rounded_box(enclosure_length, enclosure_width, enclosure_height, 2);\n        \n        // Inner cavity\n        translate([wall_thickness, wall_thickness, wall_thickness]) {\n            rounded_box(\n                enclosure_length - 2*wall_thickness,\n                enclosure_width - 2*wall_thickness,\n                enclosure_height - wall_thickness,\n                1\n            );\n        }\n        \n        // Display window\n        translate([(enclosure_length - display_width)/2, (enclosure_width - display_height)/2, -0.1]) {\n            cube([display_width, display_height, wall_thickness + 0.2]);\n        }\n        \n        // Screw holes for PCB mounting\n        for(x = [enclosure_length/4, 3*enclosure_length/4]) {\n            for(y = [enclosure_width/4, 3*enclosure_width/4]) {\n                translate([x, y, 0]) {\n                    cylinder(d = screw_hole_diameter, h = screw_hole_depth + 0.2, $fn = 16);\n                }\n            }\n        }\n        \n        // Cable slot\n        translate([0, (enclosure_width - 5)/2, -0.1]) {\n            cube([wall_thickness + 0.2, 5, 5]);\n        }\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        translate([r, r, 0]) cylinder(r = r, h = h, $fn = 16);\n        translate([l - r, r, 0]) cylinder(r = r, h = h, $fn = 16);\n        translate([r, w - r, 0]) cylinder(r = r, h = h, $fn = 16);\n        translate([l - r, w - r, 0]) cylinder(r = r, h = h, $fn = 16);\n    }\n}\n\n// LED display segments\nmodule display_segments() {\n    color(\"red\", 0.7) {\n        // 4 digits\n        for(i = [0:3]) {\n            translate([10 + i*12, enclosure_width/2 - 3, enclosure_height - 1]) {\n                union() {\n                    // Top segment\n                    cube([8, 1.5, 0.8]);\n                    \n                    // Upper right\n                    translate([6.5, 2, 0]) rotate([0, 0, 90]) cube([5, 1.5, 0.8]);\n                    \n                    // Lower right\n                    translate([6.5, 6, 0]) rotate([0, 0, 90]) cube([5, 1.5, 0.8]);\n                    \n                    // Bottom segment\n                    translate([0, 7.5, 0]) cube([8, 1.5, 0.8]);\n                    \n                    // Lower left\n                    translate([-1.5, 6, 0]) rotate([0, 0, 90]) cube([5, 1.5, 0.8]);\n                    \n                    // Upper left\n                    translate([-1.5, 2, 0]) rotate([0, 0, 90]) cube([5, 1.5, 0.8]);\n                    \n                    // Middle segment\n                    translate([0, 3.75, 0]) cube([8, 1.5, 0.8]);\n                }\n            }\n        }\n        \n        // Colon separator\n        translate([45, enclosure_width/2 + 1, enclosure_height - 1]) {\n            sphere(d = 1.5);\n        }\n        translate([45, enclosure_width/2 - 3, enclosure_height - 1]) {\n            sphere(d = 1.5);\n        }\n    }\n}\n\n// PCB standoffs\nmodule standoffs() {\n    for(x = [enclosure_length/4, 3*enclosure_length/4]) {\n        for(y = [enclosure_width/4, 3*enclosure_width/4]) {\n            translate([x, y, 0]) {\n                difference() {\n                    cylinder(d = 4, h = 4, $fn = 16);\n                    cylinder(d = screw_hole_diameter, h = 4, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\n// Keypad buttons\nmodule keypad() {\n    translate([enclosure_length - 10, 5, enclosure_height - 3]) {\n        difference() {\n            // Button housing\n            cube([8, 8, 3]);\n            \n            // Button holes\n            for(i = [0:1]) {\n                for(j = [0:1]) {\n                    translate([2 + i*4, 2 + j*4, -0.1]) {\n                        cylinder(d = 3, h = 3.2, $fn = 16);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    enclosure();\n    standoffs();\n    display_segments();\n    keypad();\n}",
    "renders": true
  },
  {
    "musical_instrument": "dcl",
    "openscad_code": "// OpenSCAD code for a realistic Data-Cartridge-Library (DCL) – medium complexity\n// Overall footprint ≈ 80 mm × 60 mm × 40 mm, printable without supports.\n\n$fn = 36;\n\n// Overall body shell\nmodule body_shell() {\n    difference() {\n        // Main block with rounded top\n        hull() {\n            translate([-40, -30, 0]) cube([80, 60, 35]);\n            translate([-40, -30, 35]) cube([80, 60, 5]);\n        }\n        // Cartridge slot cavity\n        translate([-37, -27, 2])\n            cube([74, 54, 30]);\n        // Front label recess\n        translate([-39, -29, 36])\n            cube([78, 58, 2]);\n    }\n}\n\n// Cartridge ejection button\nmodule eject_button() {\n    difference() {\n        translate([20, -32, 20])\n            cube([10, 4, 8]);\n        translate([22, -33, 22])\n            cylinder(h = 10, r = 2);\n    }\n}\n\n// Activity LED bezel\nmodule led_bezel() {\n    difference() {\n        translate([-25, -32, 25])\n            cube([5, 3, 5]);\n        translate([-22.5, -33, 27.5])\n            cylinder(h = 5, r = 1);\n    }\n}\n\n// Ventilation slots on sides (array of thin cuts)\nmodule side_vents() {\n    for (i = [0:7]) {\n        translate([-41, -25 + i * 7, 15])\n            cube([2, 4, 8]);\n    }\n}\n\n// Rear connector panel\nmodule rear_connector() {\n    difference() {\n        translate([0, 30, 12])\n            cube([40, 2, 16]);\n        // Two rectangular cut-outs for connectors\n        translate([-15, 30.5, 15])\n            cube([10, 2, 6]);\n        translate([5, 30.5, 15])\n            cube([10, 2, 6]);\n    }\n}\n\n// Bottom plate with screw holes\nmodule bottom_plate() {\n    difference() {\n        translate([-40, -30, -2])\n            cube([80, 60, 2]);\n        // Screw holes\n        for (v = [-25, 25])\n            for (h = [-35, 35])\n                translate([h, v, -2.5])\n                    cylinder(h = 3, r = 2);\n    }\n}\n\n// Cartridge dummy for illustration (not printed with main body)\nmodule cartridge() {\n    color(\"lightgray\") {\n        translate([-35, -25, 5])\n            cube([70, 50, 28]);\n    }\n}\n\n// Assembly\nunion() {\n    body_shell();\n    eject_button();\n    led_bezel();\n    mirror([0, 1, 0]) side_vents();\n    side_vents();\n    rear_connector();\n    bottom_plate();\n}\n\n// Uncomment next line to show a sample cartridge inside\n// cartridge();",
    "renders": true
  },
  {
    "musical_instrument": "dct",
    "openscad_code": "// Realistic DCT (Dual-Clutch Transmission) Model – 1:20 scale RC-car sized\n// Overall footprint ~90 mm × 60 mm × 55 mm, printable without supports\n// All walls ≥2 mm for FDM printing\n\n$fn = 36;\n\n// ---------- Parameters ----------\nbody_l = 80;            // main case length\nbody_w = 50;            // main case width\nbody_h = 40;            // main case height\nwall_t = 2.5;           // wall thickness\n\nshaft_d = 8;            // input/output shafts\nflange_d = 16;          // flange diameter\nflange_t = 4;\n\nclutch_d = 28;          // dual clutch pack OD\nclutch_h = 8;\nclutch_gap = 2;         // gap between two clutches\n\nsensor_h = 6;           // speed sensor boss\nsensor_d = 10;\n\n// ---------- Main case ----------\nmodule case() {\n    difference() {\n        // outer shell\n        cube([body_l, body_w, body_h], center=true);\n\n        // hollow cavity\n        translate([0, 0, -wall_t/2])\n            cube([body_l - 2*wall_t, body_w - 2*wall_t, body_h - wall_t], center=true);\n\n        // input shaft hole front\n        rotate([0, 90, 0])\n            translate([-body_l/2, 0, 0])\n                cylinder(h=wall_t+1, d=shaft_d+1, center=true);\n\n        // output shaft hole rear\n        rotate([0, 90, 0])\n            translate([body_l/2, 0, 0])\n                cylinder(h=wall_t+1, d=shaft_d+1, center=true);\n    }\n}\n\n// ---------- Flanges for shafts ----------\nmodule flange(pos=[0,0,0], angle=0) {\n    translate(pos)\n    rotate([0, angle, 0]) {\n        difference() {\n            cylinder(h=flange_t, d=flange_d, center=true);\n            cylinder(h=flange_t+1, d=shaft_d+0.5, center=true);\n        }\n    }\n}\n\n// ---------- Dual clutch assembly ----------\nmodule clutch_pack() {\n    translate([0, 0, body_h/2 - clutch_h - 4]) {\n        // first clutch\n        cylinder(h=clutch_h, d=clutch_d);\n        translate([0, 0, clutch_h + clutch_gap])\n            cylinder(h=clutch_h, d=clutch_d);\n    }\n}\n\n// ---------- Speed sensor boss ----------\nmodule speed_sensor() {\n    translate([0, body_w/2 - wall_t/2, body_h/2 - sensor_h/2])\n        rotate([90, 0, 0])\n            cylinder(h=sensor_h, d=sensor_d);\n}\n\n// ---------- Reinforcing ribs ----------\nmodule ribs() {\n    // longitudinal ribs under case\n    for(x = [-body_l/3, body_l/3]) {\n        translate([x, 0, -body_h/2 - 1])\n            cube([3, body_w - 10, 2], center=true);\n    }\n}\n\n// ---------- Assembly ----------\nunion() {\n    case();\n\n    // front input flange\n    flange(pos=[-body_l/2 - flange_t/2, 0, 0], angle=90);\n\n    // rear output flange\n    flange(pos=[body_l/2 + flange_t/2, 0, 0], angle=90);\n\n    clutch_pack();\n    speed_sensor();\n    ribs();\n}",
    "renders": true
  },
  {
    "musical_instrument": "dcq",
    "openscad_code": "// DCQ (Data Center Cube) - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Main dimensions\ncase_size = 50;\nwall_thickness = 2;\ncorner_radius = 3;\n\n// Ventilation details\nvent_width = 25;\nvent_height = 4;\nvent_depth = 1;\nnum_vents = 3;\n\n// Port details\nport_diameter = 6;\nport_depth = 3;\nnum_ports = 4;\n\n// LED indicators\nled_diameter = 3;\nled_depth = 1;\n\n// Feet dimensions\nfoot_height = 3;\nfoot_diameter = 8;\n\nmodule rounded_cube(size, radius) {\n    // Create a rounded cube using spheres and cubes\n    hull() {\n        translate([radius, radius, radius])\n            sphere(r = radius);\n        translate([size.x - radius, radius, radius])\n            sphere(r = radius);\n        translate([radius, size.y - radius, radius])\n            sphere(r = radius);\n        translate([size.x - radius, size.y - radius, radius])\n            sphere(r = radius);\n        translate([radius, radius, size.z - radius])\n            sphere(r = radius);\n        translate([size.x - radius, radius, size.z - radius])\n            sphere(r = radius);\n        translate([radius, size.y - radius, size.z - radius])\n            sphere(r = radius);\n        translate([size.x - radius, size.y - radius, size.z - radius])\n            sphere(r = radius);\n    }\n}\n\nmodule case_body() {\n    difference() {\n        // Main body\n        rounded_cube([case_size, case_size, case_size], corner_radius);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            rounded_cube([\n                case_size - 2 * wall_thickness,\n                case_size - 2 * wall_thickness,\n                case_size - wall_thickness\n            ], corner_radius - 1);\n    }\n}\n\nmodule ventilation_holes() {\n    for (i = [0:num_vents-1]) {\n        translate([\n            (case_size - vent_width) / 2,\n            case_size - wall_thickness,\n            case_size * 0.3 + i * (vent_height + 2)\n        ]) {\n            cube([vent_width, vent_depth, vent_height]);\n        }\n    }\n}\n\nmodule front_ports() {\n    for (i = [0:num_ports-1]) {\n        translate([\n            case_size * 0.2 + i * (port_diameter + 5),\n            case_size - port_depth,\n            case_size * 0.5\n        ]) {\n            rotate([90, 0, 0])\n                cylinder(h = port_depth, d = port_diameter);\n        }\n    }\n}\n\nmodule led_indicators() {\n    // Power LED\n    translate([case_size * 0.8, case_size - led_depth, case_size * 0.7]) {\n        rotate([90, 0, 0])\n            cylinder(h = led_depth, d = led_diameter);\n    }\n    \n    // Status LED\n    translate([case_size * 0.8, case_size - led_depth, case_size * 0.6]) {\n        rotate([90, 0, 0])\n            cylinder(h = led_depth, d = led_diameter);\n    }\n}\n\nmodule antenna_mount() {\n    translate([case_size * 0.5, wall_thickness, case_size * 0.8]) {\n        difference() {\n            cylinder(h = wall_thickness + 2, d = 8);\n            cylinder(h = wall_thickness + 3, d = 4);\n        }\n    }\n}\n\nmodule cooling_fins() {\n    fin_height = 15;\n    fin_thickness = 2;\n    num_fins = 5;\n    \n    for (i = [0:num_fins-1]) {\n        translate([\n            wall_thickness + i * (fin_thickness + 3),\n            0,\n            case_size - fin_height - wall_thickness\n        ]) {\n            cube([fin_thickness, wall_thickness, fin_height]);\n        }\n    }\n}\n\nmodule mounting_feet() {\n    foot_positions = [\n        [foot_diameter, foot_diameter],\n        [case_size - foot_diameter, foot_diameter],\n        [foot_diameter, case_size - foot_diameter],\n        [case_size - foot_diameter, case_size - foot_diameter]\n    ];\n    \n    for (pos = foot_positions) {\n        translate([pos[0], pos[1], 0]) {\n            cylinder(h = foot_height, d = foot_diameter);\n        }\n    }\n}\n\n// Assemble the complete DCQ\nunion() {\n    case_body();\n    \n    difference() {\n        case_body();\n        ventilation_holes();\n        front_ports();\n        led_indicators();\n    }\n    \n    antenna_mount();\n    cooling_fins();\n    mounting_feet();\n}",
    "renders": true
  },
  {
    "musical_instrument": "dcp",
    "openscad_code": "// Digital Cinema Package (DCP) Hard Drive Shell\n// Modeled in realistic style with medium complexity\n\n$fn = 50;\n\n// Main dimensions\nshell_length = 80;\nshell_width = 60;\nshell_height = 15;\nwall_thickness = 2;\n\n// USB connector dimensions\nusb_width = 12;\nusb_height = 5;\nusb_depth = 8;\n\n// Activity LED\nled_diameter = 3;\nled_depth = 1;\n\n// Label area\nlabel_width = 40;\nlabel_height = 8;\n\n// Cooling vents\nvent_width = 1;\nvent_height = 3;\nvent_spacing = 3;\nnum_vents = 10;\n\n// Screw holes\nscrew_diameter = 2.5;\nscrew_depth = 3;\n\n// Main shell body\nmodule shell_body() {\n    difference() {\n        // Outer shell\n        translate([0, 0, shell_height/2])\n            cube([shell_length, shell_width, shell_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, shell_height/2])\n            cube([\n                shell_length - 2*wall_thickness,\n                shell_width - 2*wall_thickness,\n                shell_height - wall_thickness\n            ], center=true);\n    }\n}\n\n// USB connector port\nmodule usb_port() {\n    difference() {\n        // Port housing\n        translate([shell_length/2 - usb_depth/2, 0, usb_height/2])\n            cube([usb_depth, usb_width, usb_height], center=true);\n        \n        // Port opening\n        translate([shell_length/2 - usb_depth/2, 0, usb_height/2])\n            cube([usb_depth + 0.5, usb_width - 2, usb_height - 2], center=true);\n    }\n}\n\n// Activity LED indicator\nmodule activity_led() {\n    translate([shell_length/2 - 10, shell_width/2 - 5, led_depth/2])\n        cylinder(h=led_depth, d=led_diameter);\n}\n\n// Label recess\nmodule label_area() {\n    translate([0, 0, shell_height - 0.5])\n        cube([label_width, label_height, 1], center=true);\n}\n\n// Cooling vents on sides\nmodule cooling_vents(side) {\n    for (i = [0:num_vents-1]) {\n        translate([\n            side * (shell_length/2 - wall_thickness - 5),\n            -shell_width/2 + vent_spacing + i*(vent_width + vent_spacing),\n            shell_height/2\n        ])\n            rotate([0, 90, 0])\n                cylinder(h=vent_width, d=vent_height);\n    }\n}\n\n// Screw holes for assembly\nmodule screw_holes() {\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([\n                x * (shell_length/2 - 10),\n                y * (shell_width/2 - 10),\n                -1\n            ])\n                cylinder(h=screw_depth + 2, d=screw_diameter);\n        }\n    }\n}\n\n// Corner fillets (simplified)\nmodule corner_fillets() {\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([\n                x * (shell_length/2 - 3),\n                y * (shell_width/2 - 3),\n                3\n            ])\n                sphere(d=6);\n        }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        shell_body();\n        usb_port();\n        corner_fillets();\n    }\n    \n    // Cut vents on both sides\n    cooling_vents(1);\n    cooling_vents(-1);\n    \n    // Cut LED hole\n    translate([shell_length/2 - 10, shell_width/2 - 5, 0])\n        cylinder(h=shell_height, d=led_diameter + 1);\n    \n    // Cut label recess\n    label_area();\n    \n    // Cut screw holes\n    screw_holes();\n}\n\n// Add subtle surface details\ntranslate([0, 0, shell_height + 0.1])\n    cube([shell_length + 0.2, shell_width + 0.2, 0.2], center=true);",
    "renders": true
  },
  {
    "musical_instrument": "dcs",
    "openscad_code": "// DCS (Distributed Control System) module – realistic, medium complexity\n// Overall footprint: 95 mm x 65 mm x 35 mm\n\n$fn = 36;                 // Smooth curves\nwall = 2;                 // 3D-printable wall thickness\ncorner_r = 4;             // Corner radius for realistic look\npcb_thick = 1.6;          // Typical PCB thickness\n\n// Main enclosure\nmodule enclosure() {\n    difference() {\n        // Outer shell\n        rounded_box([95, 65, 35], corner_r);\n        \n        // Inner cavity\n        translate([wall, wall, wall])\n            rounded_box([95 - 2*wall, 65 - 2*wall, 35 - wall], corner_r - wall);\n    }\n}\n\n// Helper for rounded box\nmodule rounded_box(size, r) {\n    hull() {\n        for(x = [0, size.x], y = [0, size.y], z = [0, size.z])\n            translate([x?r:size.x-r, y?r:size.y-r, z?r:size.z-r])\n                sphere(r);\n    }\n}\n\n// PCB with components\nmodule pcb() {\n    color(\"green\")\n    translate([wall + 2, wall + 2, wall])\n        cube([95 - 2*wall - 4, 65 - 2*wall - 4, pcb_thick]);\n    \n    // Microcontroller\n    color(\"black\")\n    translate([wall + 8, wall + 8, wall + pcb_thick])\n        cube([20, 20, 3]);\n    \n    // Terminal blocks\n    for(i = [0:1:3])\n        translate([wall + 5 + i*22, wall + 45, wall + pcb_thick])\n            terminal_block();\n}\n\n// Simple terminal block model\nmodule terminal_block() {\n    color(\"darkgreen\")\n    difference() {\n        cube([7, 8, 6]);\n        // Screw heads\n        for(j = [0:1:1])\n            translate([2 + j*3, 4, 5])\n                cylinder(h = 2, d = 2);\n    }\n}\n\n// DIN-rail clip\nmodule din_clip() {\n    color(\"gray\")\n    translate([5, -1, 15])\n        rotate([90, 0, 0])\n            difference() {\n                cube([85, 8, 5]);\n                translate([5, 2, -1])\n                    cube([75, 4, 7]);\n            }\n}\n\n// Ventilation slots on top\nmodule vents() {\n    for(i = [0:1:8])\n        translate([10 + i*10, 1, 30])\n            cube([3, 63, 4]);\n}\n\n// LED indicators\nmodule leds() {\n    for(i = [0:1:2])\n        translate([wall + 70 + i*8, wall + 5, 32])\n            color(\"red\")\n            cylinder(h = 2, d = 3);\n}\n\n// Assembly\ndifference() {\n    union() {\n        enclosure();\n        pcb();\n        din_clip();\n    }\n    vents();    // Cut ventilation slots\n}\n\nleds();",
    "renders": true
  },
  {
    "musical_instrument": "dcb",
    "openscad_code": "// Realistic DCB (Dual-Circuit Board) - Medium complexity\n// 3D printable enclosure with functional details\n\n// Main dimensions\npcb_width = 42;\npcb_length = 68;\npcb_thickness = 1.6;\nwall_thickness = 2;\nbase_height = 8;\nlid_height = 4;\ntotal_height = base_height + lid_height + pcb_thickness;\n\n// Mounting post dimensions\npost_diameter = 3;\npost_height = 6;\npost_spacing_x = 35;\npost_spacing_y = 61;\n\n// Connector dimensions\npower_connector_width = 12;\npower_connector_height = 8;\npower_connector_depth = 6;\nsignal_connector_width = 6;\nsignal_connector_height = 4;\nsignal_connector_depth = 4;\n\n// Ventilation slots\nvent_width = 1;\nvent_height = 2;\nvent_spacing = 3;\nvent_count = 8;\n\n// LED indicator\nled_diameter = 3;\nled_height = 2;\n\nmodule base_enclosure() {\n    difference() {\n        // Main box\n        cube([pcb_width + 2*wall_thickness, pcb_length + 2*wall_thickness, base_height]);\n        \n        // PCB cavity\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([pcb_width, pcb_length, base_height - wall_thickness]);\n        \n        // Mounting posts\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([\n                    pcb_width/2 + wall_thickness + x*post_spacing_x/2,\n                    pcb_length/2 + wall_thickness + y*post_spacing_y/2,\n                    0\n                ])\n                cylinder(h=post_height, d=post_diameter);\n            }\n        }\n        \n        // Ventilation slots on sides\n        for (i = [0:vent_count-1]) {\n            translate([\n                -0.1,\n                wall_thickness + 5 + i*(vent_width + vent_spacing),\n                base_height/2\n            ])\n            cube([wall_thickness + 0.2, vent_width, vent_height]);\n            \n            translate([\n                pcb_width + wall_thickness - 0.1,\n                wall_thickness + 5 + i*(vent_width + vent_spacing),\n                base_height/2\n            ])\n            cube([wall_thickness + 0.2, vent_width, vent_height]);\n        }\n        \n        // Power connector cutout\n        translate([\n            -power_connector_depth/2,\n            wall_thickness + pcb_length/4 - power_connector_width/2,\n            base_height - power_connector_height\n        ])\n        cube([power_connector_depth, power_connector_width, power_connector_height]);\n        \n        // Signal connector cutout\n        translate([\n            -signal_connector_depth/2,\n            wall_thickness + 3*pcb_length/4 - signal_connector_width/2,\n            base_height - signal_connector_height\n        ])\n        cube([signal_connector_depth, signal_connector_width, signal_connector_height]);\n    }\n}\n\nmodule lid() {\n    difference() {\n        // Main lid\n        translate([0, 0, base_height])\n            cube([pcb_width + 2*wall_thickness, pcb_length + 2*wall_thickness, lid_height]);\n        \n        // Inner cavity\n        translate([wall_thickness, wall_thickness, base_height + wall_thickness])\n            cube([pcb_width, pcb_length, lid_height - wall_thickness]);\n        \n        // LED indicator hole\n        translate([\n            pcb_width/2 + wall_thickness,\n            pcb_length/2 + wall_thickness + 10,\n            base_height + lid_height\n        ])\n        cylinder(h=lid_height + 1, d=led_diameter);\n        \n        // Mounting screw holes\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([\n                    pcb_width/2 + wall_thickness + x*post_spacing_x/2,\n                    pcb_length/2 + wall_thickness + y*post_spacing_y/2,\n                    base_height\n                ])\n                cylinder(h=lid_height + 1, d=post_diameter);\n            }\n        }\n        \n        // Ventilation slots on lid\n        for (i = [0:vent_count-1]) {\n            translate([\n                wall_thickness + 5 + i*(vent_width + vent_spacing),\n                -0.1,\n                base_height + lid_height/2\n            ])\n            cube([vent_width, wall_thickness + 0.2, vent_height]);\n            \n            translate([\n                wall_thickness + 5 + i*(vent_width + vent_spacing),\n                pcb_length + wall_thickness - 0.1,\n                base_height + lid_height/2\n            ])\n            cube([vent_width, wall_thickness + 0.2, vent_height]);\n        }\n    }\n}\n\nmodule pcb() {\n    color(\"green\", 0.8)\n    translate([wall_thickness, wall_thickness, wall_thickness])\n        cube([pcb_width, pcb_length, pcb_thickness]);\n}\n\nmodule components() {\n    // Power regulator\n    color(\"black\")\n    translate([\n        wall_thickness + pcb_width/4,\n        wall_thickness + pcb_length/4,\n        wall_thickness + pcb_thickness\n    ])\n    cube([8, 12, 3]);\n    \n    // Main IC\n    color(\"darkblue\")\n    translate([\n        wall_thickness + 3*pcb_width/4,\n        wall_thickness + pcb_length/2,\n        wall_thickness + pcb_thickness\n    ])\n    cube([10, 10, 2]);\n    \n    // Capacitors\n    color(\"darkblue\")\n    for (i = [0:2]) {\n        translate([\n            wall_thickness + pcb_width/2,\n            wall_thickness + 10 + i*15,\n            wall_thickness + pcb_thickness\n        ])\n        cylinder(h=8, d=5);\n    }\n    \n    // Resistors\n    color(\"brown\")\n    for (i = [0:3]) {\n        translate([\n            wall_thickness + 10 + i*8,\n            wall_thickness + pcb_length - 15,\n            wall_thickness + pcb_thickness\n        ])\n        cube([6, 2, 1.5]);\n    }\n}\n\n// Assembly\nbase_enclosure();\nlid();\npcb();\ncomponents();",
    "renders": true
  },
  {
    "musical_instrument": "dci",
    "openscad_code": "// DCI (Digital Cinema Initiatives) connector – realistic medium-complexity replica\n// Overall footprint ~ 65 mm × 24 mm × 12 mm (print-friendly, no overhangs >45°)\n\n// ---------- global parameters ----------\n$fn = 32;            // smooth curves\nshell = 1.6;         // wall thickness for FDM\ncorner_r = 2;        // outer corner radius\nw = 64;              // body length\nd = 23;              // body depth\nh = 11;              // body height\npin_rows = 3;        // 3×8 layout\npins_per_row = 8;\npin_pitch = 2.54;    // 0.1\" spacing\npin_d = 1.0;         // pin diameter\npin_l = 6;           // pin protrusion\n\n// ---------- main body ----------\nmodule body() {\n    difference() {\n        // rounded shell\n        minkowski() {\n            cube([w-2*corner_r, d-2*corner_r, h-2*corner_r]);\n            sphere(r=corner_r);\n        }\n        // internal cavity\n        translate([shell, shell, shell])\n            cube([w-2*shell, d-2*shell, h-shell+0.2]);\n    }\n}\n\n// ---------- alignment pegs (realistic locating features) ----------\nmodule peg() {\n    cylinder(h=3.5, d1=4, d2=3.5); // tapered peg\n}\n\nmodule peg_pair() {\n    translate([5, 2.5, 0]) peg();\n    translate([5, d-2.5, 0]) peg();\n}\n\n// ---------- pin field ----------\nmodule pin() {\n    union() {\n        // gold male pin\n        color(\"gold\")\n            cylinder(h=pin_l, d=pin_d);\n        // solder tail inside shell\n        translate([0, 0, -3])\n            cylinder(h=3, d=1.3);\n    }\n}\n\nmodule pin_grid() {\n    for (r = [0:pin_rows-1])\n        for (c = [0:pins_per_row-1])\n            translate([\n                (w - (pins_per_row-1)*pin_pitch)/2 + c*pin_pitch,\n                (d - (pin_rows-1)*pin_pitch)/2 + r*pin_pitch,\n                0\n            ]) pin();\n}\n\n// ---------- mounting ears with screw holes ----------\nmodule ear() {\n    difference() {\n        translate([-2, 0, h/2])\n            cube([4, 7, 4], center=true);\n        // 3 mm screw hole\n        rotate([90, 0, 0])\n            cylinder(h=5, d=3.2, center=true);\n    }\n}\n\nmodule ears() {\n    ear();\n    translate([w, 0, 0]) mirror([1, 0, 0]) ear();\n}\n\n// ---------- assembly ----------\nunion() {\n    color(\"black\") body();\n    color(\"black\") peg_pair();\n    color(\"gold\")  pin_grid();\n    color(\"black\") ears();\n}",
    "renders": true
  },
  {
    "musical_instrument": "dch",
    "openscad_code": "// DCH (Data Center Hub) - Realistic style, medium complexity\n// 3D printable model with functional features\n\n// Overall dimensions\nlength = 80;\nwidth = 60;\nheight = 25;\n\n// Wall thickness\nwall = 2;\n\n// Ventilation holes\nvent_diameter = 3;\nvent_spacing = 10;\n\n// LED indicators\nled_diameter = 2;\nled_depth = 1;\n\n// Ethernet ports\nport_width = 12;\nport_height = 8;\nport_depth = 5;\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Outer shell\n        cube([length, width, height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall/2])\n            cube([length-wall*2, width-wall*2, height-wall], center=true);\n        \n        // Bottom vents - front\n        for(x=[-length/2+vent_spacing:vent_spacing:length/2-vent_spacing]) {\n            translate([x, width/2-wall/2, -height/2+wall])\n                rotate([90, 0, 0])\n                    cylinder(h=wall+0.1, d=vent_diameter, center=true);\n        }\n        \n        // Side vents - left\n        for(y=[-width/2+vent_spacing:vent_spacing:width/2-vent_spacing]) {\n            translate([-length/2+wall/2, y, -height/2+vent_spacing])\n                rotate([0, 90, 0])\n                    cylinder(h=wall+0.1, d=vent_diameter, center=true);\n        }\n        \n        // Side vents - right\n        for(y=[-width/2+vent_spacing:vent_spacing:width/2-vent_spacing]) {\n            translate([length/2-wall/2, y, -height/2+vent_spacing])\n                rotate([0, 90, 0])\n                    cylinder(h=wall+0.1, d=vent_diameter, center=true);\n        }\n        \n        // Ethernet port openings - back\n        translate([0, -width/2+wall, 0])\n            cube([port_width, wall+0.1, port_height], center=true);\n    }\n}\n\n// Front panel features\nmodule front_panel() {\n    // Power LED\n    translate([length/2-wall/2, width/4, height/4])\n        rotate([0, 90, 0])\n            cylinder(h=led_depth, d=led_diameter, center=true);\n    \n    // Status LED\n    translate([length/2-wall/2, -width/4, height/4])\n        rotate([0, 90, 0])\n            cylinder(h=led_depth, d=led_diameter, center=true);\n    \n    // Reset button\n    translate([length/2-wall/2, 0, -height/4])\n        rotate([0, 90, 0])\n            cylinder(h=wall+0.1, d=3, center=true);\n}\n\n// Cooling fins\nmodule cooling_fins() {\n    fin_count = 5;\n    fin_width = 1;\n    fin_spacing = 2;\n    \n    for(i=[0:fin_count-1]) {\n        y_pos = -width/2 + 5 + i*(fin_width+fin_spacing);\n        translate([0, y_pos, height/2-wall/2])\n            cube([length-10, fin_width, wall], center=true);\n    }\n}\n\n// Ethernet port details\nmodule ethernet_ports() {\n    // Port housing\n    translate([0, -width/2+wall/2, 0])\n        cube([port_width+2, port_depth, port_height+2], center=true);\n    \n    // Port opening\n    translate([0, -width/2+wall/2+0.1, 0])\n        cube([port_width, port_depth+0.1, port_height], center=true);\n    \n    // 8 pin slots\n    for(i=[-3.5:1:3.5]) {\n        translate([i*1.5, -width/2+port_depth-1, 0])\n            cube([0.8, 2, 1], center=true);\n    }\n}\n\n// Mounting feet\nmodule mounting_feet() {\n    foot_size = 4;\n    foot_height = 2;\n    \n    // Four corners\n    positions = [\n        [-length/2+10, -width/2+10],\n        [length/2-10, -width/2+10],\n        [-length/2+10, width/2-10],\n        [length/2-10, width/2-10]\n    ];\n    \n    for(pos=positions) {\n        translate([pos[0], pos[1], -height/2-foot_height/2])\n            cylinder(h=foot_height, d=foot_size, center=true);\n        \n        // Screw hole\n        translate([pos[0], pos[1], -height/2-foot_height])\n            cylinder(h=foot_height+0.1, d=2, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    front_panel();\n    cooling_fins();\n    ethernet_ports();\n    mounting_feet();\n}",
    "renders": true
  },
  {
    "musical_instrument": "dcg",
    "openscad_code": "// OpenSCAD DCG (Drone Control Grip) – medium-complexity, printable, realistic style\n// Total length 90 mm, max width 45 mm, max height 65 mm\n\n$fn=36;\n\n// Main parameters\nbase_len = 90;\nbase_wid = 45;\nbase_h   = 12;\n\ngrip_len = 70;\ngrip_wid = 38;\ngrip_h   = 50;\n\nwall_t   = 2.5;   // printable wall thickness\nswitch_d = 8;     // momentary switch diameter\nstick_r  = 5;     // gimbal stick radius\n\nmodule body_shell() {\n    difference() {\n        // Outer rounded shell\n        hull() {\n            translate([-base_len/2, -base_wid/2, 0])\n                cube([base_len, base_wid, base_h]);\n            translate([-grip_len/2, -grip_wid/2, 0])\n                cube([grip_len, grip_wid, grip_h]);\n        }\n\n        // Hollow cavity\n        translate([0, 0, wall_t])\n            scale([1-wall_t*2/base_len, 1-wall_t*2/base_wid, 1])\n            hull() {\n                translate([-base_len/2+wall_t, -base_wid/2+wall_t, 0])\n                    cube([base_len-wall_t*2, base_wid-wall_t*2, base_h]);\n                translate([-grip_len/2+wall_t, -grip_wid/2+wall_t, 0])\n                    cube([grip_len-wall_t*2, grip_wid-wall_t*2, grip_h]);\n            }\n    }\n}\n\nmodule switch_bank(count=4, spacing=12) {\n    for(i=[0:count-1])\n        translate([i*spacing, -base_wid/4, base_h+1]) {\n            difference() {\n                cylinder(h=5, r=switch_d/2+1, center=false);\n                translate([0,0,-1])\n                    cylinder(h=7, r=switch_d/2, center=false);\n            }\n        }\n}\n\nmodule gimbal_assembly() {\n    // Gimbal base ring\n    difference() {\n        cylinder(h=6, r=stick_r+6);\n        translate([0,0,-1])\n            cylinder(h=8, r=stick_r+2);\n    }\n    // Stick shaft\n    translate([0,0,6])\n        cylinder(h=25, r=stick_r);\n    // Knurled thumb pad\n    translate([0,0,31])\n        cylinder(h=4, r=stick_r+3);\n}\n\nmodule antenna_mast() {\n    // Base collar\n    cylinder(h=4, r=4);\n    translate([0,0,4])\n        cylinder(h=1, r=3.5);\n    // Telescoping antenna segments\n    for(i=[0:2])\n        translate([0,0,5+i*3])\n            cylinder(h=3, r=3.5-i*0.8);\n}\n\nmodule cooling_slots() {\n    slot_w = 4;\n    slot_h = 8;\n    gap    = 6;\n    for(i=[-2:2])\n        translate([i*gap, 0, grip_h/2])\n            rotate([90,0,0])\n                cube([slot_w, slot_h, wall_t+1], center=true);\n}\n\n// Assembly\nunion() {\n    body_shell();\n\n    // Switch bank on left edge\n    translate([-base_len/2+10, 0, 0])\n        switch_bank();\n\n    // Right stick gimbal\n    translate([base_len/2-20, 0, base_h])\n        gimbal_assembly();\n\n    // Left stick gimbal\n    translate([base_len/2-40, 0, base_h])\n        gimbal_assembly();\n\n    // Cooling slots on back of grip\n    translate([0, -grip_wid/2+wall_t, 0])\n        cooling_slots();\n\n    // Antenna on rear top corner\n    translate([base_len/2-5, base_wid/2-5, base_h])\n        rotate([0,15,0])\n            antenna_mast();\n}",
    "renders": true
  },
  {
    "musical_instrument": "dcn",
    "openscad_code": "// Realistic Data Center Node (DCN) Model\n// Medium complexity 3D printable design\n\n// Overall dimensions\nwidth = 60;\ndepth = 40;\nheight = 35;\n\n// Material thickness\nwall = 2;\ncorner_radius = 3;\n\n// Server slots\nslot_width = 8;\nslot_height = 10;\nslot_depth = 35;\nslot_spacing = 12;\nnum_slots = 4;\n\n// Cooling vents\nvent_width = 1;\nvent_height = 8;\nvent_spacing = 3;\nnum_vents = 5;\n\n// LED indicators\nled_diameter = 3;\nled_height = 1;\n\n// Front panel features\npanel_width = 50;\npanel_height = 30;\npanel_depth = 3;\nusb_width = 8;\nusb_height = 4;\nethernet_width = 12;\nethernet_height = 8;\n\n// Main chassis\nmodule chassis() {\n    difference() {\n        // Outer shell with rounded edges\n        minkowski() {\n            cube([width, depth, height], center=true);\n            sphere(corner_radius);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([width - 2*wall, depth - 2*wall, height - 2*wall], center=true);\n            sphere(corner_radius - wall);\n        }\n    }\n}\n\n// Server slots\nmodule slots() {\n    for(i = [0:num_slots-1]) {\n        translate([\n            -width/2 + slot_spacing + i*(slot_width + slot_spacing/2),\n            -depth/2 + wall,\n            height/2 - slot_height - slot_spacing\n        ]) {\n            cube([slot_width, slot_depth, slot_height], center=false);\n        }\n    }\n}\n\n// Cooling vents on sides\nmodule vents() {\n    for(i = [0:num_vents-1]) {\n        for(j = [0:1]) {\n            translate([\n                j == 0 ? -width/2 - 0.1 : width/2 - vent_width + 0.1,\n                -depth/2 + 5 + i*(vent_height + vent_spacing),\n                -height/2 + 10\n            ]) {\n                rotate([0, j == 0 ? 90 : -90, 0]) {\n                    cube([vent_width, vent_height, wall + 0.2]);\n                }\n            }\n        }\n    }\n}\n\n// Front panel\nmodule front_panel() {\n    difference() {\n        // Main panel\n        translate([0, -depth/2 - panel_depth/2, 0]) {\n            cube([panel_width, panel_depth, panel_height], center=true);\n        }\n        \n        // USB ports\n        translate([-panel_width/4, -depth/2 - panel_depth, panel_height/4]) {\n            cube([usb_width, panel_depth + 0.2, usb_height], center=true);\n        }\n        \n        // Ethernet ports\n        translate([panel_width/4, -depth/2 - panel_depth, -panel_height/4]) {\n            cube([ethernet_width, panel_depth + 0.2, ethernet_height], center=true);\n        }\n        \n        // Power button\n        translate([0, -depth/2 - panel_depth, panel_height/2 - 5]) {\n            cylinder(h=panel_depth + 0.2, r=3, center=true, $fn=32);\n        }\n    }\n}\n\n// LED indicators\nmodule leds() {\n    translate([panel_width/2 - 5, -depth/2 - panel_depth - 0.1, panel_height/2 - 5]) {\n        cylinder(h=led_height, r=led_diameter/2, center=true, $fn=16);\n    }\n    \n    translate([panel_width/2 - 10, -depth/2 - panel_depth - 0.1, panel_height/2 - 5]) {\n        cylinder(h=led_height, r=led_diameter/2, center=true, $fn=16);\n    }\n    \n    translate([panel_width/2 - 15, -depth/2 - panel_depth - 0.1, panel_height/2 - 5]) {\n        cylinder(h=led_height, r=led_diameter/2, center=true, $fn=16);\n    }\n}\n\n// Antenna mounts\nmodule antennas() {\n    // Left antenna\n    translate([-width/2 + 5, depth/2, height/2]) {\n        cylinder(h=15, r=2, center=false, $fn=16);\n        translate([0, 0, 15]) {\n            sphere(3, $fn=16);\n        }\n    }\n    \n    // Right antenna\n    translate([width/2 - 5, depth/2, height/2]) {\n        cylinder(h=15, r=2, center=false, $fn=16);\n        translate([0, 0, 15]) {\n            sphere(3, $fn=16);\n        }\n    }\n}\n\n// Feet for stability\nmodule feet() {\n    foot_size = 5;\n    foot_height = 2;\n    \n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (width/2 - foot_size), y * (depth/2 - foot_size), -height/2 - foot_height/2]) {\n                cube([foot_size, foot_size, foot_height], center=true);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base components\n    chassis();\n    slots();\n    vents();\n    \n    // Front panel and features\n    front_panel();\n    leds();\n    \n    // Additional features\n    antennas();\n    feet();\n}",
    "renders": true
  },
  {
    "musical_instrument": "dck",
    "openscad_code": "// Realistic 3D-printable dock model (medium complexity)\n// Overall dimensions ~80 mm wide\n\nmodule deck() {\n    // Main wooden deck platform\n    difference() {\n        // Solid deck\n        translate([0, 0, -2])\n            cube([80, 20, 4], center=true);\n        // Plank grooves\n        for (i = [-35:7:35]) {\n            translate([i, 0, -1.9])\n                cube([1, 18, 4.2], center=true);\n        }\n    }\n}\n\nmodule piling(x, y) {\n    // Vertical support post\n    translate([x, y, 0])\n        cylinder(h=25, d=4, $fn=20);\n    // Metal band clamp\n    translate([x, y, 10])\n        cylinder(h=3, d=4.5, $fn=20);\n}\n\nmodule crossbeam() {\n    // Horizontal support under deck\n    translate([0, 0, 10])\n        rotate([0, 90, 0])\n            cylinder(h=80, d=3, $fn=16);\n}\n\nmodule ladder() {\n    // Simple boarding ladder\n    translate([30, -12, 0]) {\n        // Side rails\n        for (side = [-4, 4]) {\n            translate([side, 0, 0])\n                cylinder(h=15, d=1, $fn=8);\n        }\n        // Rungs\n        for (rung = [0:3:12]) {\n            translate([0, 0, rung])\n                rotate([90, 0, 0])\n                    cylinder(h=8, d=1, $fn=8);\n        }\n    }\n}\n\nmodule cleat() {\n    // Mooring cleat\n    translate([-25, 0, 2])\n        rotate([0, 90, 0])\n            difference() {\n                // Base\n                cube([8, 3, 3], center=true);\n                // Rope channel\n                translate([0, 0, 1.5])\n                    cube([6, 2.5, 2], center=true);\n            }\n}\n\nmodule fender() {\n    // Cylindrical bumper\n    translate([-35, 12, 5])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=12, d=4, $fn=20);\n                translate([0, 0, -1])\n                    cylinder(h=14, d=2, $fn=20);\n            }\n}\n\n// Assemble dock\ndeck();\ncrossbeam();\n\n// Three pilings\nfor (p = [-30, 0, 30]) {\n    piling(p, 12);\n}\n\nladder();\ncleat();\nfender();\ntranslate([25, 0, 2]) cleat();",
    "renders": true
  },
  {
    "musical_instrument": "dcx",
    "openscad_code": "// DCX (Double Convex) Lens – realistic style, medium complexity\n// All dimensions in mm, suitable for FDM printing\n\n// wall thickness for 3D printing\nwall = 1.6;\n\n// overall dimensions\ndiameter = 60;\nedge_thickness = 4;\ncenter_thickness = 12;\n\n// lens profile parameters\nprofile_steps = 60;\nprofile_radius = 40;\n\n// flange for mounting\nflange_d = diameter + 8;\nflange_h = 2;\n\n// anti-rotation flats\nflat_depth = 2;\n\nmodule lens_profile(h) {\n    // generate a circular arc profile for the convex surface\n    for(i=[0:profile_steps]) {\n        angle = 180 * i / profile_steps;\n        x = diameter/2 * sin(angle);\n        y = profile_radius * (1 - cos(angle)) + h/2;\n        translate([x, 0, y]) sphere(d=0.1, $fn=8);\n    }\n}\n\nmodule lens_half(h) {\n    // sweep profile via hull of small spheres\n    hull() {\n        for(i=[0:profile_steps]) {\n            angle = 180 * i / profile_steps;\n            x = diameter/2 * sin(angle);\n            y = profile_radius * (1 - cos(angle)) + h/2;\n            translate([x, 0, y]) sphere(d=0.1, $fn=8);\n        }\n    }\n}\n\nmodule lens_body() {\n    difference() {\n        // upper convex half\n        rotate_extrude($fn=120)\n            lens_half(center_thickness);\n\n        // lower convex half, mirrored\n        mirror([0,0,1])\n            rotate_extrude($fn=120)\n                lens_half(center_thickness);\n\n        // remove interior for hollow shell\n        scale([1-wall/(diameter/2), 1-wall/(diameter/2), 1-wall/center_thickness])\n            lens_body();\n    }\n}\n\nmodule flats() {\n    // create two parallel anti-rotation flats\n    for(side=[-1,1]) {\n        translate([0, side*(diameter/2-flat_depth/2), 0])\n            cube([diameter, flat_depth, center_thickness+2*edge_thickness], center=true);\n    }\n}\n\nmodule mounting_flange() {\n    difference() {\n        cylinder(d=flange_d, h=flange_h, $fn=120);\n        cylinder(d=diameter, h=flange_h+0.1, $fn=120);\n    }\n}\n\n// assemble the lens\nunion() {\n    // main lens body\n    difference() {\n        lens_body();\n        flats();\n    }\n\n    // add bottom mounting flange\n    translate([0,0,-(center_thickness/2+edge_thickness+flange_h/2)])\n        mounting_flange();\n\n    // add top mounting flange\n    translate([0,0,(center_thickness/2+edge_thickness+flange_h/2)])\n        mounting_flange();\n}",
    "renders": true
  },
  {
    "musical_instrument": "dcy",
    "openscad_code": "// DCY (Duck) - Realistic style, medium complexity\n// Overall size: ~70 mm long, 50 mm high, 40 mm wide\n\n// Parameters\nbody_length = 55;\nbody_height = 35;\nbody_width = 35;\nhead_diam = 22;\nbeak_length = 12;\nbeak_width = 8;\nbeak_height = 6;\nwing_length = 25;\nwing_height = 15;\ntail_width = 20;\ntail_height = 18;\nleg_height = 12;\nleg_diam = 3;\nfoot_length = 10;\nfoot_width = 6;\neye_diam = 4;\nwall = 1.5; // wall thickness for 3D printing\n\n// Main body module\nmodule body() {\n    // Main rounded body\n    hull() {\n        translate([0, 0, body_height/2])\n            scale([1, 0.8, 0.7])\n                sphere(d=body_width, $fn=40);\n        translate([body_length/2 - 5, 0, body_height/2 - 5])\n            scale([1.2, 0.9, 1])\n                sphere(d=body_width - 5, $fn=30);\n    }\n    \n    // Tail\n    difference() {\n        hull() {\n            translate([-body_length/2, 0, body_height/2 - 2])\n                cube([tail_width/2, tail_width, tail_height], center=true);\n            translate([-body_length/2 - tail_width/2, 0, body_height/2 + 2])\n                cube([tail_width/2, tail_width - 8, tail_height - 5], center=true);\n        }\n        // Hollow tail\n        translate([-body_length/2 - 2, 0, body_height/2])\n            cube([tail_width/2 + 4, tail_width - wall*2, tail_height - wall*2], center=true);\n    }\n}\n\n// Head module\nmodule head() {\n    translate([body_length/2 + head_diam/2 - 5, 0, body_height/2 + 5]) {\n        // Head sphere\n        sphere(d=head_diam, $fn=32);\n        \n        // Beak\n        translate([head_diam/2 + beak_length/2, 0, -head_diam/4])\n            scale([beak_length, beak_width, beak_height])\n                sphere(d=1, $fn=16);\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([head_diam/4, side * head_diam/3, head_diam/4])\n                sphere(d=eye_diam, $fn=16);\n            translate([head_diam/4 + 1, side * head_diam/3, head_diam/4 + 1])\n                sphere(d=eye_diam/2, $fn=16);\n        }\n    }\n}\n\n// Wing module\nmodule wing() {\n    difference() {\n        hull() {\n            translate([body_length/4, body_width/2 + wing_length/2 - 5, body_height/2 + 5])\n                scale([0.3, 1, 0.2])\n                    sphere(d=wing_length, $fn=20);\n            translate([body_length/4 + 5, body_width/2 + wing_length/2 + 5, body_height/2])\n                scale([0.2, 0.8, 0.15])\n                    sphere(d=wing_length - 5, $fn=20);\n        }\n        // Wing detail\n        for(i = [0:2]) {\n            translate([body_length/4 + i*3, body_width/2 + wing_length/2 - 5 + i*2, body_height/2 + 3])\n                cube([0.5, wing_length/2 - i*2, 0.5], center=true);\n        }\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    translate([body_length/4 - 5, side * (body_width/2 - 5), 0]) {\n        // Upper leg\n        cylinder(h=leg_height, d=leg_diam, $fn=16);\n        \n        // Foot\n        translate([0, 0, -leg_height/2 - foot_length/2])\n            rotate([90, 0, 0])\n                hull() {\n                    cylinder(h=foot_width/2, d=foot_width, $fn=12);\n                    translate([foot_length/2, 0, 0])\n                        cylinder(h=foot_width/2, d=foot_width, $fn=12);\n                }\n    }\n}\n\n// Hollow the duck for 3D printing\nmodule hollow_duck() {\n    difference() {\n        union() {\n            body();\n            head();\n            \n            // Wings (mirrored)\n            wing();\n            mirror([0, 1, 0])\n                wing();\n                \n            // Legs\n            leg(1);\n            leg(-1);\n        }\n        \n        // Hollow body cavity\n        translate([0, 0, body_height/2])\n            scale([1 - wall/body_width, 0.8 - wall/body_width, 0.7 - wall/body_height])\n                sphere(d=body_width - wall*2, $fn=30);\n                \n        // Drain hole in bottom\n        translate([body_length/4, 0, -leg_height])\n            cylinder(h=leg_height + 2, d=5, $fn=16);\n    }\n}\n\n// Main assembly\nhollow_duck();",
    "renders": true
  },
  {
    "musical_instrument": "dcz",
    "openscad_code": "// Realistic medium-complexity DCZ (Desk-Clamp Zip-Tie) cable organizer\n// Overall size: ~70 mm × 40 mm × 30 mm\n\n// Main body with clamp and zip-tie loops\n$fn = 36;\n\n// Parameters\nclamp_outer_w = 30;\nclamp_outer_h = 25;\nclamp_inner_w = 20;\nclamp_inner_h = 20;\nclamp_thick = 3;\nbody_w = 70;\nbody_h = 15;\nbody_thick = 8;\ntie_d = 4;\ntie_clear = 0.5;\ntie_spacing = 12;\ntie_count = 4;\n\n// Clamp arch\nmodule clamp() {\n    difference() {\n        // Outer arch\n        translate([-clamp_outer_w/2, 0, 0])\n            cube([clamp_outer_w, clamp_outer_h, clamp_thick], center=true);\n        // Inner cutout\n        translate([-clamp_inner_w/2, -clamp_outer_h/2 + 1, -clamp_thick/2 - 1])\n            cube([clamp_inner_w, clamp_inner_h, clamp_thick + 2]);\n        // Rounding bottom corners\n        translate([0, clamp_outer_h/2, 0])\n            rotate([90, 0, 0])\n                cylinder(r=clamp_thick/2, h=clamp_outer_w, center=true);\n    }\n}\n\n// Zip-tie loop pair (top and bottom)\nmodule tie_loop_pair(y_pos) {\n    translate([y_pos, 0, 0])\n    union() {\n        // Top loop\n        difference() {\n            cylinder(r=tie_d/2 + 1, h=body_thick);\n            translate([0, 0, -1])\n                cylinder(r=tie_d/2 + tie_clear, h=body_thick + 2);\n        }\n        // Bottom loop\n        translate([0, 0, -body_thick - 1])\n            difference() {\n                cylinder(r=tie_d/2 + 1, h=body_thick);\n                translate([0, 0, -1])\n                    cylinder(r=tie_d/2 + tie_clear, h=body_thick + 2);\n            }\n    }\n}\n\n// Main body with clamp and loops\nunion() {\n    // Body plate\n    translate([0, 0, 0])\n        cube([body_w, body_h, body_thick], center=true);\n\n    // Clamp attached to body\n    translate([body_w/2 - clamp_thick/2, 0, -body_thick/2 - clamp_thick/2])\n        clamp();\n\n    // Loops for zip-ties\n    for (i = [-tie_count/2 + 0.5 : tie_count/2 - 0.5]) {\n        tie_loop_pair(i * tie_spacing);\n    }\n\n    // Rounded edges on body\n    translate([body_w/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(r=body_h/2, h=body_thick, center=true);\n    translate([-body_w/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(r=body_h/2, h=body_thick, center=true);\n}\n\n// Optional screw hole for clamping to desk\ntranslate([body_w/2 - clamp_thick - 5, 0, 0])\n    rotate([0, 90, 0])\n        cylinder(r=2.5, h=body_h + 2, center=true);",
    "renders": true
  },
  {
    "musical_instrument": "panpipe",
    "openscad_code": "// Panpipe - Realistic Style, Medium Complexity\n// Approximate size: 80mm length x 35mm width x 30mm height\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Number of pipes\npipes = 7;\n\n// Module to create one pipe with accurate acoustic length\nmodule pipe(length, outer_diameter) {\n    // Inner diameter calculated from wall thickness\n    inner_diameter = outer_diameter - 2 * wall;\n    \n    // Outer cylinder (pipe body)\n    difference() {\n        cylinder(h = length, d = outer_diameter, $fn = 32);\n        \n        // Hollow out the pipe\n        translate([0, 0, -0.1])\n            cylinder(h = length + 0.2, d = inner_diameter, $fn = 32);\n    }\n    \n    // Bottom cap (closed end)\n    translate([0, 0, length])\n        cylinder(h = wall, d = outer_diameter, $fn = 32);\n    \n    // Top edge chamfer (for comfort and printing)\n    difference() {\n        cylinder(h = 2, d = outer_diameter + 0.5, $fn = 32);\n        translate([0, 0, -0.1])\n            cylinder(h = 2.2, d = outer_diameter, $fn = 32);\n    }\n}\n\n// Holder strip with rounded edges\nmodule holder_strip(width, height, length) {\n    difference() {\n        // Main holder body\n        translate([-width/2, -height/2, 0])\n            cube([width, height, length]);\n        \n        // Rounded edges using cylinders\n        for (i = [0, 1]) {\n            rotate([0, 90, 0])\n                translate([0, -height/2 + i * height, -width/2])\n                    cylinder(h = width, r = height/2, $fn = 20);\n            rotate([0, 90, 0])\n                translate([0, -height/2 + i * height, length - width/2])\n                    cylinder(h = width, r = height/2, $fn = 20);\n        }\n    }\n}\n\n// Generate the complete panpipe\nunion() {\n    // Pipe dimensions based on musical scale (approximate)\n    pipe_lengths = [45, 40, 36, 32, 28.5, 25.5, 22.5]; // mm lengths\n    pipe_diameters = [12, 11.5, 11, 10.5, 10, 9.5, 9]; // mm outer diameters\n    \n    // Create all pipes\n    for (i = [0 : pipes - 1]) {\n        translate([(i - 3) * 11, 0, 0])\n            pipe(pipe_lengths[i], pipe_diameters[i]);\n    }\n    \n    // Top holder strip\n    translate([0, 6, 0])\n        rotate([90, 0, 0])\n            holder_strip(82, 4, 4);\n    \n    // Bottom holder strip\n    translate([0, 6, 25])\n        rotate([90, 0, 0])\n            holder_strip(82, 4, 4);\n    \n    // Support bridges between pipes\n    for (i = [0 : pipes - 2]) {\n        translate([(i - 2.5) * 11, 6, 12])\n            cube([wall * 2, 3, 10]);\n    }\n}\n\n// Optional lanyard hole\ntranslate([0, 8, -5])\n    rotate([90, 0, 0])\n    cylinder(h = 8, d = 3, $fn = 20);",
    "renders": true
  },
  {
    "musical_instrument": "bagpipe",
    "openscad_code": "// Bagpipe - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Parameters\nwall_thickness = 1.5;\nscale_factor = 0.6;\n\n// Main bag\nmodule bag() {\n    difference() {\n        // Main bag body - oval shape\n        scale([1, 0.8, 0.6])\n            sphere(d = 40 * scale_factor, $fn = 32);\n        \n        // Hollow out the bag\n        scale([1, 0.8, 0.6])\n            sphere(d = (40 - 2*wall_thickness) * scale_factor, $fn = 32);\n    }\n}\n\n// Blowpipe\nmodule blowpipe() {\n    translate([-15 * scale_factor, 0, 10 * scale_factor])\n        rotate([0, 90, 0])\n            cylinder(h = 20 * scale_factor, d1 = 6 * scale_factor, d2 = 4 * scale_factor, $fn = 16);\n}\n\n// Bass drone\nmodule bass_drone() {\n    translate([10 * scale_factor, 15 * scale_factor, 12 * scale_factor])\n        rotate([0, 0, -15])\n            union() {\n                // Bottom section\n                cylinder(h = 25 * scale_factor, d = 5 * scale_factor, $fn = 16);\n                \n                // Middle sections\n                for(i = [1:3]) {\n                    translate([0, 0, i * 25 * scale_factor])\n                        cylinder(h = 20 * scale_factor, d = 4.5 * scale_factor, $fn = 16);\n                }\n                \n                // Top section\n                translate([0, 0, 4 * 25 * scale_factor])\n                    cylinder(h = 15 * scale_factor, d = 4 * scale_factor, $fn = 16);\n            }\n}\n\n// Tenor drone\nmodule tenor_drone(offset) {\n    translate([offset * scale_factor, 12 * scale_factor, 10 * scale_factor])\n        rotate([0, 0, -10])\n            union() {\n                // Bottom section\n                cylinder(h = 20 * scale_factor, d = 4 * scale_factor, $fn = 16);\n                \n                // Top section\n                translate([0, 0, 20 * scale_factor])\n                    cylinder(h = 15 * scale_factor, d = 3.5 * scale_factor, $fn = 16);\n            }\n}\n\n// Chanter\nmodule chanter() {\n    translate([0, -15 * scale_factor, 8 * scale_factor])\n        rotate([0, 0, 15])\n            union() {\n                // Main chanter body\n                cylinder(h = 35 * scale_factor, d = 4.5 * scale_factor, $fn = 16);\n                \n                // Chanter top\n                translate([0, 0, 35 * scale_factor])\n                    cylinder(h = 8 * scale_factor, d1 = 4.5 * scale_factor, d2 = 3 * scale_factor, $fn = 16);\n                \n                // Finger holes\n                for(i = [1:7]) {\n                    rotate([0, 0, i * 25])\n                        translate([2.25 * scale_factor, 0, i * 4 * scale_factor])\n                            rotate([90, 0, 0])\n                                cylinder(h = 3 * scale_factor, d = 1 * scale_factor, $fn = 8);\n                }\n            }\n}\n\n// Stocks (connection points)\nmodule stock(x, y, z, angle) {\n    translate([x * scale_factor, y * scale_factor, z * scale_factor])\n        rotate([0, 0, angle])\n            cylinder(h = 5 * scale_factor, d = 7 * scale_factor, $fn = 16);\n}\n\n// Assemble the bagpipe\nunion() {\n    // Main bag\n    bag();\n    \n    // Stocks\n    stock(-10, 0, 5, 0);  // Blowpipe stock\n    stock(0, 10, 5, 0);   // Chanter stock\n    stock(5, 12, 8, 0);   // Bass drone stock\n    stock(-5, 12, 8, 0);  // Tenor drone stock\n    \n    // Components\n    blowpipe();\n    bass_drone();\n    tenor_drone(8);\n    tenor_drone(-8);\n    chanter();\n}",
    "renders": true
  },
  {
    "musical_instrument": "hurdy",
    "openscad_code": "// OpenSCAD Hurdy-Gurdy (Medium Complexity, Realistic Style)\n// Overall dimensions: ~80mm length, 40mm width, 15mm height\n\n$fn=32;  // Smooth curves\n\n// Main parameters\nbody_len = 80;\nbody_w   = 40;\nbody_h   = 15;\nwall     = 2;\n\nmodule hurdy() {\n    // Main body shell\n    difference() {\n        rounded_box(body_len, body_w, body_h, 5);\n        translate([0, 0, wall])\n            rounded_box(body_len-wall*2, body_w-wall*2, body_h+1, 3);\n    }\n\n    // Soundboard (top plate)\n    translate([0, 0, body_h-wall])\n        rounded_box(body_len-wall*2, body_w-wall*2, wall, 3);\n\n    // Keybox\n    translate([-body_len/2+10, 0, body_h])\n        cube([20, body_w-10, 10], center=true);\n\n    // Keys (11 simplified keys)\n    for(i=[-5:5]) {\n        translate([-body_len/2+10 + i*1.6, 0, body_h+10+2])\n            rotate([0, i*2, 0])\n            cylinder(h=15, d=2);\n    }\n\n    // Crank\n    translate([body_len/2-5, body_w/2-10, body_h/2])\n        rotate([0, 90, 0])\n        union() {\n            cylinder(h=20, d=4);\n            translate([20, 0, 0])\n                sphere(d=8);\n        }\n\n    // Tailpiece\n    translate([body_len/2-5, 0, body_h/2])\n        difference() {\n            cube([10, body_w/2, body_h/2], center=true);\n            for(i=[-1,1])\n                translate([3, i*8, 0])\n                    cylinder(h=body_h/2+1, d=2);\n        }\n\n    // Bridge\n    translate([body_len/4, 0, body_h-wall])\n        cube([2, body_w-wall*3, 3]);\n\n    // Wheel cavity\n    translate([body_len/4, 0, body_h/2])\n        rotate([90, 0, 0])\n        cylinder(h=body_w-wall*2, d=20, center=true);\n\n    // Roses (sound holes)\n    translate([-body_len/4, 0, body_h-wall/2])\n        rose(8);\n}\n\n// Helper module for rounded box\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        for(x=[-1,1], y=[-1,1], z=[-1,1])\n            translate([x*(l/2-r), y*(w/2-r), z*(h/2-r)])\n                sphere(r=r);\n    }\n}\n\n// Simple rose pattern\nmodule rose(d) {\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n            translate([d/2-2, 0, 0])\n                scale([1, 0.3, 1])\n                    cylinder(h=wall+1, d=4);\n    }\n    cylinder(h=wall+1, d=d/3);\n}\n\nhurdy();",
    "renders": true
  },
  {
    "musical_instrument": "morsing",
    "openscad_code": "// Morsing (Jew's Harp) - Realistic style, medium complexity\n// Designed for 3D printing - approximately 75mm length\n\n$fn = 36;  // Smooth curves for printing\n\n// Main parameters\nframe_length = 75;\nframe_width = 25;\nframe_thickness = 4;\ntongue_length = 60;\ntongue_width = 6;\ntongue_thickness = 1.5;\nloop_radius = 8;\nloop_thickness = 3;\n\n// Main frame with ergonomic curves\nmodule main_frame() {\n    // Base frame shape\n    difference() {\n        // Outer rounded frame\n        hull() {\n            translate([-frame_length/2, 0, 0])\n                cylinder(h=frame_thickness, r=frame_width/2);\n            translate([frame_length/2, 0, 0])\n                cylinder(h=frame_thickness, r=frame_width/2);\n        }\n        \n        // Inner cutout for tongue\n        translate([0, 0, -1])\n            cube([tongue_length + 10, tongue_width + 6, frame_thickness + 2], center=true);\n        \n        // Grip indentations\n        for(i = [-1, 1]) {\n            translate([i * frame_length/3, i * frame_width/3, -1])\n                rotate([0, 0, 45])\n                cube([8, 3, frame_thickness + 2], center=true);\n        }\n    }\n}\n\n// Flexible tongue\nmodule tongue() {\n    // Main vibrating tongue\n    translate([0, 0, frame_thickness/2 + tongue_thickness/2])\n        cube([tongue_length, tongue_width, tongue_thickness], center=true);\n    \n    // Tapered end for better vibration\n    translate([tongue_length/2 - 3, 0, frame_thickness/2 + tongue_thickness/2])\n        scale([1, 0.7, 1])\n        cube([6, tongue_width, tongue_thickness], center=true);\n}\n\n// Holding loop\nmodule holding_loop() {\n    // Ring for finger grip\n    rotate([90, 0, 0])\n    translate([frame_length/2 + loop_radius/2, 0, 0])\n    difference() {\n        cylinder(h=loop_thickness, r=loop_radius);\n        cylinder(h=loop_thickness + 1, r=loop_radius - 3);\n    }\n}\n\n// Reinforcement ribs for durability\nmodule reinforcement_ribs() {\n    for(pos = [-frame_length/3, frame_length/3]) {\n        translate([pos, 0, frame_thickness/2])\n            cube([2, frame_width - 4, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    main_frame();\n    tongue();\n    holding_loop();\n    reinforcement_ribs();\n    \n    // Rounded edges for comfort\n    edge_radius = 1.5;\n    translate([-frame_length/2, 0, frame_thickness/2])\n        rotate_extrude(angle=180)\n            translate([frame_width/2, 0, 0])\n                circle(r=edge_radius);\n    translate([frame_length/2, 0, frame_thickness/2])\n        rotate_extrude(angle=180)\n            translate([frame_width/2, 0, 0])\n                circle(r=edge_radius);\n}",
    "renders": true
  },
  {
    "musical_instrument": "ektara",
    "openscad_code": "// Ektara - One-string drone instrument (medium complexity, realistic style)\n// Overall length ~90 mm, suitable for 3D printing\n// No floating parts, 1.2 mm wall thickness assumed\n\n$fn = 32; // Smooth curves\n\n// Main parameters\nbody_len = 55;\nbody_dia = 38;\nneck_len = 60;\nneck_dia = 12;\nstring_dia = 1.2;\npeg_len = 18;\npeg_dia = 4;\nbridge_h = 5;\nbridge_w = 8;\nsoundhole_dia = 14;\nwall = 1.2;\n\nmodule half_egg(d, h) {\n    // Approximate egg shape using spheres and cylinders\n    difference() {\n        union() {\n            sphere(d/2);\n            translate([0,0,d/2]) cylinder(h = h - d/2, d1 = d, d2 = d*0.8);\n        }\n        translate([0,0,h/2]) cube([d*2,d*2,h], center=true);\n    }\n}\n\nmodule resonator_body() {\n    difference() {\n        // Outer shell\n        scale([1, 0.75, 1]) half_egg(body_dia, body_len);\n        \n        // Hollow inside\n        translate([0,0,-wall]) \n            scale([1, 0.75, 1]) \n                half_egg(body_dia - 2*wall, body_len - 2*wall);\n        \n        // Sound hole on top\n        rotate([90,0,0])\n            translate([0, body_len/2 - 5, 0])\n                cylinder(h = wall + 1, d = soundhole_dia);\n    }\n}\n\nmodule neck() {\n    difference() {\n        // Main neck shaft\n        cylinder(h = neck_len, d = neck_dia);\n        \n        // String channel\n        translate([neck_dia/2 - string_dia/2,0,-1])\n            cube([string_dia + 0.5, string_dia + 0.5, neck_len + 2]);\n    }\n}\n\nmodule tuning_peg() {\n    rotate([90,0,0]) {\n        difference() {\n            // Peg cylinder\n            cylinder(h = peg_len, d = peg_dia);\n            \n            // String hole\n            translate([0,0,peg_len/2])\n                rotate([90,0,0])\n                    cylinder(h = peg_dia + 1, d = string_dia + 0.5);\n        }\n        \n        // Grip ridges\n        for(i = [1:2:peg_len - 3]) {\n            translate([0,0,i])\n                cylinder(h = 1.5, d = peg_dia + 2);\n        }\n    }\n}\n\nmodule bridge() {\n    difference() {\n        // Bridge shape\n        translate([-bridge_w/2, -body_dia/2 - 3, -bridge_h/2])\n            cube([bridge_w, bridge_w/2, bridge_h]);\n        \n        // String groove\n        translate([0, -body_dia/2 - 3.1, bridge_h/2 - string_dia])\n            cube([string_dia + 0.5, bridge_w/2 + 0.2, string_dia + 0.5]);\n    }\n}\n\nmodule string() {\n    // Simple representation of the string\n    color(\"silver\")\n    translate([neck_dia/2, -neck_len/2, 0])\n        rotate([0,90,90])\n            cylinder(h = neck_len + body_len/2 + 5, d = string_dia);\n}\n\n// Assembly\n// Resonator centered at origin\nresonator_body();\n\n// Neck attached to resonator top\ntranslate([0, 0, body_len/2 - 2])\n    neck();\n\n// Tuning peg inserted at neck end\ntranslate([0, 0, neck_len/2 + body_len/2 - 2])\n    tuning_peg();\n\n// Bridge on resonator surface\nbridge();\n\n// String (visual only)\nstring();",
    "renders": true
  },
  {
    "musical_instrument": "dotara",
    "openscad_code": "// Dotara - Medium Complexity Realistic Style\n// Traditional Bengali string instrument\n\nmodule body() {\n    // Main body base\n    difference() {\n        // Main rounded body\n        scale([1, 0.7, 0.3])\n        sphere(d=80, $fn=50);\n        \n        // Front sound hole\n        translate([0, 0, 12])\n        cylinder(h=5, d=25, $fn=50);\n        \n        // Back sound hole\n        translate([0, 0, -12])\n        cylinder(h=5, d=20, $fn=50);\n    }\n    \n    // Body thickness\n    difference() {\n        scale([1, 0.7, 0.3])\n        sphere(d=82, $fn=50);\n        scale([0.9, 0.6, 0.35])\n        sphere(d=80, $fn=50);\n    }\n}\n\nmodule neck() {\n    // Main neck\n    translate([0, 0, 12])\n    rotate([0, 15, 0])\n    cube([60, 15, 8], center=true);\n    \n    // Neck headstock\n    translate([45, 0, 15])\n    cube([20, 12, 6], center=true);\n    \n    // Tuning pegs\n    for(i=[-1, 1]) {\n        translate([45, i*5, 18])\n        rotate([90, 0, 0])\n        cylinder(h=8, d=3, $fn=8);\n    }\n}\n\nmodule bridge() {\n    // Main bridge\n    translate([0, -25, 13])\n    cube([30, 4, 3], center=true);\n    \n    // Bridge feet\n    for(x=[-10, 10]) {\n        translate([x, -25, 11.5])\n        cube([8, 4, 2], center=true);\n    }\n}\n\nmodule strings() {\n    // 4 strings\n    for(i=[-1, -0.33, 0.33, 1]) {\n        color(\"silver\")\n        translate([40, i*5, 15])\n        rotate([0, -15, 0])\n        cylinder(h=50, d=0.8, $fn=8);\n    }\n}\n\nmodule frets() {\n    // 6 frets\n    for(i=[1:6]) {\n        translate([40-i*6, 0, 16])\n        rotate([0, 15, 0])\n        cube([1.5, 14, 1], center=true);\n    }\n}\n\nmodule tailpiece() {\n    // Tailpiece base\n    translate([0, 27, 13])\n    cube([20, 8, 2], center=true);\n    \n    // String anchors\n    for(i=[-1, -0.33, 0.33, 1]) {\n        translate([i*6, 27, 15])\n        cylinder(h=1, d=1.5, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    bridge();\n    tailpiece();\n    strings();\n    frets();\n}",
    "renders": true
  },
  {
    "musical_instrument": "pakhavaj",
    "openscad_code": "// Realistic Pakhavaj - Indian barrel drum\n// Medium complexity model for 3D printing\n\n// Overall dimensions\ndrum_length = 90;\ndrum_diameter = 50;\nwall_thickness = 2.5;\n\n// Module for wooden barrel body\nmodule barrel_body() {\n    difference() {\n        // Main barrel shape\n        cylinder(h=drum_length, d=drum_diameter, center=true);\n        \n        // Hollow interior\n        cylinder(h=drum_length+1, d=drum_diameter-wall_thickness*2, center=true);\n    }\n    \n    // Tuning blocks on sides\n    for(side = [-1, 1]) {\n        translate([0, side*(drum_diameter/2 + 3), 0])\n            cube([8, 6, drum_length], center=true);\n    }\n}\n\n// Module for drum head with tensioning straps\nmodule drum_head(position) {\n    // Leather head membrane\n    translate([0, 0, position])\n        cylinder(h=1, d=drum_diameter+4, center=true);\n    \n    // Metal ring around head\n    translate([0, 0, position])\n        cylinder(h=2, d=drum_diameter+6, center=true);\n    \n    // Tensioning straps\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n            translate([(drum_diameter/2 + 2), 0, position])\n                cube([6, 2, 1], center=true);\n    }\n}\n\n// Module for decorative bands\nmodule decorative_bands() {\n    // Central band\n    translate([0, 0, 0])\n        cylinder(h=6, d=drum_diameter+2, center=true);\n    \n    // Side bands\n    for(pos = [-drum_length/3, drum_length/3]) {\n        translate([0, 0, pos])\n            cylinder(h=3, d=drum_diameter+1, center=true);\n    }\n}\n\n// Module for sound hole\nmodule sound_hole() {\n    // Small hole on side\n    rotate([90, 0, 0])\n        translate([0, drum_length/2, 0])\n            cylinder(h=wall_thickness+1, d=4, center=true);\n}\n\n// Main assembly\nunion() {\n    // Wooden barrel\n    barrel_body();\n    \n    // Drum heads\n    drum_head(drum_length/2);\n    drum_head(-drum_length/2);\n    \n    // Decorative metal bands\n    decorative_bands();\n    \n    // Sound hole\n    sound_hole();\n}\n\n// Base stand for stability\ntranslate([0, 0, -drum_length/2 - 5])\n    cylinder(h=5, d=drum_diameter+8, center=true);",
    "renders": true
  },
  {
    "musical_instrument": "nadaswaram",
    "openscad_code": "// Nadaswaram - South Indian double-reed wind instrument\n// Medium complexity realistic model for 3D printing\n\n// Overall dimensions (mm)\nbody_length = 80;\nbell_diameter = 25;\nreed_length = 12;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main body module\nmodule nadaswaram() {\n    // Reed (metallic staple)\n    translate([0, 0, body_length + reed_length/2])\n        cylinder(h=reed_length, d1=6, d2=4, $fn=20);\n    \n    // Body tube with gradual taper\n    hull() {\n        // Bell end\n        translate([0, 0, 0])\n            cylinder(h=5, d=bell_diameter, $fn=32);\n        \n        // Middle section\n        translate([0, 0, body_length*0.3])\n            cylinder(h=5, d=bell_diameter*0.7, $fn=32);\n            \n        // Reed end\n        translate([0, 0, body_length])\n            cylinder(h=5, d=10, $fn=32);\n    }\n    \n    // Hollow out the tube\n    translate([0, 0, -wall])\n        cylinder(h=body_length+wall*2, d=bell_diameter-wall*2, $fn=32);\n    \n    // Finger holes (7 front, 1 thumb)\n    for(i=[0:6]) {\n        angle = i < 4 ? 0 : 180;\n        hole_pos = body_length * (0.7 - i * 0.08);\n        rotate([0, angle, 0])\n            translate([0, bell_diameter/2, hole_pos])\n                rotate([90, 0, 0])\n                    cylinder(h=bell_diameter, d=3, $fn=16);\n    }\n    \n    // Thumb hole\n    rotate([0, 90, 0])\n        translate([0, bell_diameter/2, body_length * 0.5])\n            rotate([90, 0, 0])\n                cylinder(h=bell_diameter, d=3, $fn=16);\n    \n    // Bell flare decoration\n    for(i=[0:5]) {\n        rotate([0, 0, i * 60])\n            translate([bell_diameter/2 - 2, 0, 2])\n                cube([4, 1, 8], center=true);\n    }\n    \n    // Decorative rings\n    for(i=[0:2]) {\n        pos = body_length * (0.2 + i * 0.3);\n        translate([0, 0, pos])\n            cylinder(h=2, d1=bell_diameter*0.8+2, d2=bell_diameter*0.8+2, $fn=32);\n    }\n    \n    // Mouthpiece ring\n    translate([0, 0, body_length + reed_length/4])\n        cylinder(h=3, d=8, $fn=32);\n}\n\n// Generate the instrument\nnadaswaram();",
    "renders": true
  },
  {
    "musical_instrument": "vichitra",
    "openscad_code": "// Vichitra Veena - Medium complexity realistic model\n// Overall dimensions: ~90mm length, 40mm width, 20mm height\n\n// Parameters for realistic proportions\nveena_length = 90;\nveena_width = 40;\nveena_height = 20;\nneck_length = 45;\nresonator_radius = 18;\nresonator_height = 12;\nbridge_height = 3;\nstring_diameter = 0.8;\n\n// Main resonator (large gourd)\nmodule main_resonator() {\n    difference() {\n        // Main gourd body\n        scale([1, 1.2, 0.8])\n            sphere(r=resonator_radius, $fn=50);\n        \n        // Hollow interior\n        translate([0, 0, -2])\n            scale([0.85, 0.85, 0.7])\n                sphere(r=resonator_radius, $fn=50);\n        \n        // Sound hole\n        translate([0, 0, 8])\n            cylinder(h=5, r=6, $fn=32);\n    }\n}\n\n// Secondary resonator (small gourd)\nmodule secondary_resonator() {\n    difference() {\n        scale([0.6, 0.7, 0.7])\n            sphere(r=resonator_radius, $fn=40);\n        \n        translate([0, 0, -1])\n            scale([0.5, 0.6, 0.6])\n                sphere(r=resonator_radius, $fn=40);\n    }\n}\n\n// Neck (dandi)\nmodule neck() {\n    difference() {\n        // Main neck\n        translate([-neck_length/2, 0, -veena_height/2])\n            cube([neck_length, 6, 4], center=true);\n        \n        // Frets (20 frets)\n        for(i = [1:20]) {\n            translate([-neck_length/2 + i*2.1, 0, -veena_height/2 + 2])\n                cube([0.5, 6.2, 0.8], center=true);\n        }\n    }\n}\n\n// Bridge (jawari)\nmodule bridge() {\n    difference() {\n        // Main bridge\n        translate([0, 0, 0])\n            cube([12, 4, bridge_height], center=true);\n        \n        // String grooves\n        for(i = [-1.5, 0, 1.5]) {\n            translate([i*3, 0, bridge_height/2])\n                cube([1, 4.2, 0.5], center=true);\n        }\n    }\n}\n\n// Pegs (kunti)\nmodule pegs() {\n    // Main pegs\n    for(i = [0:3]) {\n        translate([-neck_length/2 + 5 + i*3, 8, -veena_height/2])\n            rotate([0, 0, 0])\n                cylinder(h=4, r=1.5, $fn=12);\n        \n        translate([-neck_length/2 + 5 + i*3, -8, -veena_height/2])\n            rotate([0, 0, 0])\n                cylinder(h=4, r=1.5, $fn=12);\n    }\n}\n\n// Strings\nmodule strings() {\n    for(i = [-1.5, 0, 1.5]) {\n        color(\"silver\")\n            translate([i*3, 0, bridge_height + 0.4])\n                cylinder(h=neck_length - 10, r=string_diameter, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main resonator positioned\n    translate([20, 0, -veena_height/2 + resonator_height/2])\n        main_resonator();\n    \n    // Secondary resonator\n    translate([-neck_length/2 + 10, 0, -veena_height/2 + resonator_height/2 - 2])\n        secondary_resonator();\n    \n    // Neck\n    neck();\n    \n    // Bridge on main resonator\n    translate([20, 0, -veena_height/2 + resonator_height + bridge_height/2])\n        bridge();\n    \n    // Pegs\n    pegs();\n    \n    // Strings\n    translate([20 - (neck_length-10)/2, 0, -veena_height/2 + resonator_height + bridge_height + 0.4])\n        strings();\n}\n\n// Base support for 3D printing\ntranslate([0, 0, -veena_height/2 - 1])\n    cube([veena_length, veena_width, 2], center=true);",
    "renders": true
  },
  {
    "musical_instrument": "algoza",
    "openscad_code": "// OpenSCAD Algoza (Punjabi double-flute) – medium-complexity realistic style\n// Overall length ≈ 90 mm; all parts printable without support\n\n$fn = 32;\n\n// Global parameters\nlength = 88;        // total flute length\nbody_d = 14;        // combined body diameter\nwall = 1.8;         // wall thickness for 3D printing\n\n// Wind-way (mouth piece) parameters\nwind_length = 18;\nwind_d = 3.2;\nwind_offset = body_d/2 - 1.5;\n\n// Finger-hole parameters\nhole_d = 4;\nhole_spacing = 12;\nhole_pos = [15, 27, 39, 51, 63];   // measured from mouth end\n\n// Drone flute parameters\ndrone_d = 10;\ndrone_length = 65;\ndrone_offset = 0;                 // lateral offset from main bore center\n\n// Helper module: hollow cylinder (tube)\nmodule tube(od, id, h) {\n    difference() {\n        cylinder(h = h, d = od);\n        translate([0, 0, -0.1])\n            cylinder(h = h + 0.2, d = id);\n    }\n}\n\n// Main bore\nmodule main_body() {\n    difference() {\n        // Outer body\n        tube(body_d, body_d - 2*wall, length);\n\n        // Main bore\n        translate([0, 0, -0.1])\n            cylinder(h = length + 0.2, d = body_d - 2*wall);\n    }\n}\n\n// Wind-way (mouth piece)\nmodule mouth_piece() {\n    translate([0, wind_offset, length - wind_length/2])\n        rotate([90, 0, 0])\n            tube(6, wind_d, wind_length);\n}\n\n// Finger holes\nmodule finger_holes() {\n    for (p = hole_pos)\n        translate([0, 0, length - p])\n            rotate([90, 0, 0])\n                tube(hole_d + 2*wall, hole_d, body_d + 2*wall);\n}\n\n// Drone flute\nmodule drone_flute() {\n    // drone tube\n    translate([drone_offset, body_d/2 + drone_d/2 + 2, length - drone_length/2])\n        rotate([0, 90, 0])\n            tube(drone_d, drone_d - 2*wall, drone_length);\n\n    // drone finger hole\n    translate([drone_offset, body_d/2 + drone_d/2 + 2, length - 40])\n        rotate([0, 90, 0])\n            rotate([0, 90, 0])\n                tube(hole_d + 2*wall, hole_d, drone_d + 2*wall);\n}\n\n// Combine all parts\nunion() {\n    main_body();\n    mouth_piece();\n    finger_holes();\n    drone_flute();\n}",
    "renders": true
  },
  {
    "musical_instrument": "been",
    "openscad_code": "// Realistic Bean (Medium Complexity)\n// 3D printable bean with realistic curvature and surface details\n// Overall size: ~60mm length\n\n$fn = 32;  // Smooth curves for printing\n\n// Main parameters\nbean_length = 60;\nbean_width = 25;\nbean_thickness = 18;\nwall_thickness = 1.5;\n\n// Seed cavity parameters\nseed_radius = 3;\nseed_rows = 3;\nseeds_per_row = 4;\n\n// Create the main bean body\nmodule bean_body() {\n    // Central bean shape using hull of spheres\n    hull() {\n        // Left end\n        translate([-bean_length/2 + 5, 0, 0])\n            scale([1, 0.9, 0.7])\n                sphere(bean_width/2);\n        \n        // Right end\n        translate([bean_length/2 - 5, 0, 0])\n            scale([1, 0.9, 0.7])\n                sphere(bean_width/2);\n        \n        // Center bulge\n        translate([0, 0, 0])\n            scale([1.1, 1, 0.8])\n                sphere(bean_width/2 + 2);\n    }\n}\n\n// Create seam line along the bean\nmodule bean_seam() {\n    difference() {\n        // Raised seam\n        translate([0, 0, bean_thickness/2 - 1])\n            scale([1, 0.1, 0.1])\n                cube([bean_length - 10, bean_width - 5, 2], center=true);\n        \n        // Center groove\n        translate([0, 0, bean_thickness/2])\n            scale([1, 0.05, 0.05])\n                cube([bean_length - 8, bean_width - 3, 3], center=true);\n    }\n}\n\n// Create seed cavity\nmodule seed_cavity() {\n    for(i = [0:seed_rows-1]) {\n        angle = i * 120;\n        radius_offset = bean_width/4;\n        \n        for(j = [0:seeds_per_row-1]) {\n            pos_x = -bean_length/2 + 10 + j * (bean_length - 20) / (seeds_per_row - 1);\n            \n            translate([\n                pos_x,\n                cos(angle) * radius_offset,\n                sin(angle) * radius_offset\n            ])\n                rotate([0, 90, 0])\n                    cylinder(h=6, r1=seed_radius, r2=seed_radius + 1, center=true);\n        }\n    }\n}\n\n// Create bean stem\nmodule bean_stem() {\n    translate([-bean_length/2 - 2, 0, bean_thickness/2 - 3])\n        rotate([0, 0, 15])\n            cylinder(h=8, r1=2, r2=1, $fn=6);\n}\n\n// Create surface texture\nmodule surface_texture() {\n    for(i = [0:5]) {\n        for(j = [0:8]) {\n            angle = i * 60;\n            pos_x = -bean_length/2 + 5 + j * (bean_length - 10) / 8;\n            \n            translate([\n                pos_x,\n                cos(angle) * (bean_width/2 - 3),\n                sin(angle) * (bean_thickness/2 - 2)\n            ])\n                sphere(0.5);\n        }\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Outer bean shape\n        bean_body();\n        \n        // Seam detail\n        bean_seam();\n        \n        // Stem\n        bean_stem();\n        \n        // Surface texture\n        surface_texture();\n    }\n    \n    // Hollow out the bean\n    scale([0.85, 0.85, 0.85])\n        bean_body();\n    \n    // Seed cavities\n    seed_cavity();\n}\n\n// Add small drainage hole for printing\ntranslate([bean_length/2 - 5, 0, 0])\n    rotate([0, 90, 0])\n        cylinder(h=wall_thickness * 2, r=1.5, center=true);",
    "renders": true
  },
  {
    "musical_instrument": "tumbi",
    "openscad_code": "// Tumbi (single-string Punjabi folk instrument) – realistic, medium complexity\n// Overall length ~95 mm – 3D-printable, no supports required\n\n$fn = 36;               // Overall smoothness\nwall = 1.6;             // 1.6 mm shell thickness\nbody_d = 30;            // Main resonator diameter\nbody_h = 40;            // Resonator height\nneck_l = 48;            // Neck length\nneck_w = 6;             // Neck width\npeg_len = 12;           // Tuning peg length\npeg_d = 3.2;            // Peg diameter\nstring_d = 0.6;         // String thickness\nbridge_h = 4;           // Bridge height\nbridge_w = 8;\n\nmodule body() {\n    difference() {\n        // Main resonator – hollow egg-like shell\n        scale([1, 1, 1.2])\n            cylinder(h = body_h, d = body_d, center = true);\n        // Hollow cavity\n        translate([0, 0, -1])\n            scale([1, 1, 1.15])\n                cylinder(h = body_h - 2*wall, d = body_d - 2*wall, center = true);\n        // Sound hole\n        translate([0, 0, body_h/2 - wall])\n            cylinder(h = wall + 1, d = 8);\n    }\n}\n\nmodule neck_piece() {\n    difference() {\n        // Neck bar\n        translate([0, 0, neck_l/2])\n            cube([neck_w, neck_w, neck_l], center = true);\n        // String channel\n        translate([0, 0, neck_l/2])\n            cube([string_d + 0.2, neck_w + 0.2, neck_l], center = true);\n    }\n}\n\nmodule tuning_peg() {\n    rotate([90, 0, 0])\n        cylinder(h = peg_len, d = peg_d);\n    // Knurled knob\n    translate([0, 0, peg_len - 2])\n        scale([1, 1, 0.5])\n            sphere(d = peg_d + 2);\n}\n\nmodule bridge() {\n    difference() {\n        cube([bridge_w, 2, bridge_h], center = true);\n        translate([0, 0, 0])\n            cube([bridge_w - 2*wall, 2 + 0.2, bridge_h - wall], center = true);\n    }\n}\n\nmodule string() {\n    // Simple straight string\n    translate([0, 0, neck_l/2 + body_h/2])\n        rotate([90, 0, 0])\n            cylinder(h = neck_l + body_h/2 - bridge_h, d = string_d, $fn = 8);\n}\n\n// Assembly\nunion() {\n    // Main body\n    body();\n\n    // Neck\n    translate([0, 0, body_h/2 + neck_l/2])\n        neck_piece();\n\n    // Tuning peg\n    translate([0, 0, body_h/2 + neck_l + 2])\n        tuning_peg();\n\n    // Bridge on body top\n    translate([0, 0, body_h/2 - bridge_h/2])\n        bridge();\n\n    // String\n    string();\n}",
    "renders": true
  },
  {
    "musical_instrument": "vamshi",
    "openscad_code": "// Realistic Vamshi (Bamboo Flute) - 3D Printable\n// Medium complexity model with proper wall thickness and no overhangs\n\n// Parameters\nflute_length = 95;\nflute_diameter = 18;\nwall_thickness = 2;\nbore_diameter = flute_diameter - 2 * wall_thickness;\n\n// Main flute body\nmodule flute_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = flute_length, d = flute_diameter, center = true);\n        \n        // Inner bore\n        cylinder(h = flute_length + 2, d = bore_diameter, center = true);\n    }\n}\n\n// Mouth hole (blow hole)\nmodule mouth_hole() {\n    translate([0, 0, flute_length/2 - 15])\n    rotate([0, 90, 0])\n    cylinder(h = wall_thickness + 1, d = 8, center = true);\n}\n\n// Finger holes (6 holes)\nmodule finger_holes() {\n    // Define hole positions\n    hole_positions = [\n        [0, 0, 20],      // First hole\n        [0, 0, 10],      // Second hole\n        [0, 0, 0],       // Third hole\n        [0, 0, -10],     // Fourth hole\n        [0, 0, -20],     // Fifth hole\n        [0, 0, -30]      // Sixth hole\n    ];\n    \n    for(pos = hole_positions) {\n        translate(pos)\n        rotate([0, 90, 0])\n        cylinder(h = wall_thickness + 1, d = 6, center = true);\n    }\n}\n\n// Tuning cork at top\nmodule tuning_cork() {\n    translate([0, 0, flute_length/2 - 5])\n    cylinder(h = 8, d = bore_diameter - 1, center = true);\n}\n\n// Natural node rings (bamboo joints)\nmodule node_rings() {\n    ring_positions = [-35, -10, 15, 35];\n    \n    for(pos = ring_positions) {\n        translate([0, 0, pos])\n        difference() {\n            cylinder(h = 3, d = flute_diameter + 2, center = true);\n            cylinder(h = 5, d = flute_diameter - 1, center = true);\n        }\n    }\n}\n\n// End cap\nmodule end_cap() {\n    translate([0, 0, -flute_length/2])\n    cylinder(h = 5, d = flute_diameter, center = true);\n}\n\n// Assembly\nunion() {\n    // Main body\n    flute_body();\n    \n    // Add details\n    mouth_hole();\n    finger_holes();\n    tuning_cork();\n    node_rings();\n    end_cap();\n}",
    "renders": true
  },
  {
    "musical_instrument": "mukha",
    "openscad_code": "// Mukha (traditional Russian wooden mask)\n// Overall dimensions: ~70mm tall x 60mm wide x 20mm deep\n// Wall thickness: 2mm for 3D printability\n\n$fn = 36;  // Smooth curves\n\nmodule mask_outline() {\n    // Main mask shape - oval\n    difference() {\n        scale([1, 1.2, 0.3])\n            sphere(d = 60);\n        \n        // Cut back for flat back\n        translate([0, 0, -8])\n            cube([100, 100, 10], center = true);\n    }\n}\n\nmodule eye_holes() {\n    // Left eye hole\n    translate([-15, 10, 5])\n        rotate([0, 0, 10])\n        scale([1, 1.5, 1])\n        cylinder(h = 10, d = 12, center = true);\n    \n    // Right eye hole\n    translate([15, 10, 5])\n        rotate([0, 0, -10])\n        scale([1, 1.5, 1])\n        cylinder(h = 10, d = 12, center = true);\n}\n\nmodule nose() {\n    // Bridge of nose\n    translate([0, 0, 8])\n        scale([1, 0.6, 0.4])\n        sphere(d = 15);\n    \n    // Nose tip\n    translate([0, -8, 6])\n        rotate([20, 0, 0])\n        scale([0.8, 1, 1.2])\n        cylinder(h = 12, d1 = 12, d2 = 8);\n}\n\nmodule mouth() {\n    // Mouth opening\n    translate([0, -20, 3])\n        rotate([0, 0, 0])\n        scale([1.2, 0.3, 1])\n        cylinder(h = 10, d = 20, center = true);\n    \n    // Upper lip detail\n    translate([0, -18, 7])\n        rotate([30, 0, 0])\n        scale([1.1, 0.2, 0.5])\n        cylinder(h = 5, d = 18);\n}\n\nmodule eyebrows() {\n    // Left eyebrow\n    translate([-20, 18, 8])\n        rotate([0, 0, 25])\n        scale([0.3, 1, 0.3])\n        cylinder(h = 15, d = 6);\n    \n    // Right eyebrow\n    translate([20, 18, 8])\n        rotate([0, 0, -25])\n        scale([0.3, 1, 0.3])\n        cylinder(h = 15, d = 6);\n}\n\nmodule decorative_elements() {\n    // Forehead decoration\n    for(i = [-2:2]) {\n        translate([i * 8, 25, 9])\n            sphere(d = 4);\n    }\n    \n    // Cheek decorations\n    translate([-25, -5, 6])\n        sphere(d = 5);\n    translate([25, -5, 6])\n        sphere(d = 5);\n}\n\nmodule hanging_hole() {\n    // Hole for string/wire\n    translate([0, 35, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 20, d = 3, center = true);\n}\n\n// Main assembly\ndifference() {\n    union() {\n        mask_outline();\n        nose();\n        eyebrows();\n        decorative_elements();\n    }\n    \n    eye_holes();\n    mouth();\n    hanging_hole();\n}\n\n// Add slight rounding to edges\nminkowski() {\n    children(0);\n    sphere(d = 0.5);\n}",
    "renders": true
  },
  {
    "musical_instrument": "kuzhal",
    "openscad_code": "// OpenSCAD Kuzhal (South-Indian double-reed wind instrument)\n// Realistic style, medium complexity\n// Designed for 3D printing (wall thickness 1.5 mm, no steep overhangs)\n\n$fn = 64;               // Smooth curves\nwall = 1.5;             // 3D-print friendly wall thickness\nbodyL = 90;             // Main tube length\nbodyD = 12;             // Main bore diameter\nbellD = 22;             // Bell flare outer diameter\nbellH = 18;             // Bell height\nfingerD = 4.2;          // Finger hole diameter\nfingerWall = 0.8;       // Extra wall around finger holes\nreedL = 8;              // Reed staple length\nreedD = 6;              // Reed staple outer diameter\n\nmodule kuzhal() {\n    // Reed staple\n    translate([0, 0, bodyL + reedL/2])\n        cylinder(h = reedL, d = reedD, $fn = 6);\n\n    // Main tube body\n    difference() {\n        cylinder(h = bodyL, d = bodyD + 2*wall);\n        cylinder(h = bodyL + 1, d = bodyD);\n    }\n\n    // Bell flare\n    translate([0, 0, 0])\n    difference() {\n        cylinder(h1 = 0, h2 = bellH, r1 = bodyD/2 + wall, r2 = bellD/2, center = false);\n        cylinder(h = bellH + 1, r1 = bodyD/2, r2 = bellD/2 - wall, center = false);\n    }\n\n    // Mouth hole (top near reed)\n    translate([0, bodyD/2 + wall, bodyL - 10])\n        rotate([90, 0, 0])\n        cylinder(h = bodyD + 2*wall, d = fingerD, $fn = 32);\n\n    // Finger holes along front\n    for(i = [0:6]) {\n        angle = 20 + i * 11;  // Spread holes nicely\n        hpos = bodyL - 18 - i * 9.5;\n        translate([0, cos(angle) * (bodyD/2 + wall), hpos])\n            rotate([90, 0, 0])\n            cylinder(h = bodyD + 2*wall + 0.2, d = fingerD, $fn = 32);\n    }\n\n    // Thumb hole on back\n    translate([0, -(bodyD/2 + wall), bodyL/2 - 6])\n        rotate([90, 0, 0])\n        cylinder(h = bodyD + 2*wall + 0.2, d = fingerD, $fn = 32);\n\n    // Decorative rings\n    for(z = [bodyL - 35, bodyL - 55, bodyL - 75]) {\n        translate([0, 0, z])\n        difference() {\n            cylinder(h = 2, d = bodyD + 2*wall + 3);\n            cylinder(h = 3, d = bodyD + 2*wall);\n        }\n    }\n\n    // Small vent hole near bell\n    translate([0, bodyD/2 + wall, bellH + 5])\n        rotate([90, 0, 0])\n        cylinder(h = bodyD + 2*wall, d = 1.8, $fn = 16);\n}\n\n// Render the kuzhal\nkuzhal();",
    "renders": true
  },
  {
    "musical_instrument": "tavil",
    "openscad_code": "// OpenSCAD model of a South-Indian tavil (medium-complexity, printable)\n// Overall size ~70 mm long\n\n$fn = 36;\n\nmodule shell_body() {\n    // Main hollow shell with slight barrel bulge\n    difference() {\n        hull() {\n            cylinder(h = 55, d1 = 60, d2 = 65);\n            translate([0, 0, 55]) cylinder(h = 5, d1 = 65, d2 = 60);\n        }\n        // Hollow it out\n        translate([0, 0, 2.5]) cylinder(h = 55, d = 56);\n    }\n}\n\nmodule strap_ring(h, d, thick) {\n    // One ring for the shoulder strap\n    difference() {\n        cylinder(h = thick, d = d);\n        translate([0, 0, -0.1]) cylinder(h = thick+0.2, d = d-2*thick);\n    }\n}\n\nmodule strap_rings() {\n    // Two rings on opposite sides\n    for (a = [0, 180])\n        rotate([0, 0, a])\n            translate([33, 0, 27])\n                rotate([90, 0, 0])\n                    strap_ring(h = 6, d = 12, thick = 2);\n}\n\nmodule playing_head(drum_d, hide_thick) {\n    // One goatskin head with tension ring\n    difference() {\n        // Ring\n        cylinder(h = 4, d = drum_d + 8);\n        // Recess for hide\n        translate([0, 0, -0.1]) cylinder(h = 4.2, d = drum_d);\n    }\n    // Actual hide membrane (thin)\n    translate([0, 0, 0.2]) cylinder(h = 0.5, d = drum_d);\n    // Wedge groove\n    translate([0, 0, 3.8]) cylinder(h = 0.5, d = drum_d + 8, d1 = drum_d + 8, d2 = drum_d + 10);\n}\n\nmodule wedge(count) {\n    // Simple wooden wedge\n    rotate([0, 90, 0])\n        translate([0, -2, 0])\n            cube([12, 4, 3]);\n}\n\nmodule wedges(count) {\n    // Evenly spaced wedges around rim\n    for (i = [0 : count-1])\n        rotate([0, 0, i * 360/count])\n            translate([0, 31, 0]) wedge(count);\n}\n\nmodule tavil() {\n    union() {\n        shell_body();\n        // Left head\n        translate([0, 0, 0]) playing_head(drum_d = 60, hide_thick = 0.5);\n        // Right head\n        translate([0, 0, 55]) playing_head(drum_d = 60, hide_thick = 0.5);\n\n        // 8 wedges per head\n        wedges(count = 8);\n        translate([0, 0, 55]) wedges(count = 8);\n\n        strap_rings();\n    }\n}\n\ntavil();",
    "renders": true
  },
  {
    "musical_instrument": "erhu",
    "openscad_code": "// Erhu (Chinese two-stringed fiddle) - medium complexity realistic model\n// Designed for 3D printing with no overhangs\n\nmodule erhu() {\n    // Overall scale factor (50mm body height)\n    scale_factor = 0.8;\n    scale([scale_factor, scale_factor, scale_factor]) {\n        \n        // Main resonator body (hexagonal)\n        color(\"saddlebrown\")\n        translate([0, 0, 0])\n        linear_extrude(height = 25, center = true)\n        polygon([\n            [0, 15],    // top point\n            [13, 7],    // upper right\n            [13, -7],   // lower right\n            [0, -15],   // bottom point\n            [-13, -7],  // lower left\n            [-13, 7]    // upper left\n        ]);\n        \n        // Front snake skin membrane (flattened cylinder)\n        color(\"darkgoldenrod\")\n        translate([0, 0, 13])\n        scale([0.9, 0.9, 1])\n        cylinder(h = 1, r = 15, $fn = 6);\n        \n        // Back opening\n        color(\"saddlebrown\")\n        translate([0, 0, -13.5])\n        cylinder(h = 1, r = 8, $fn = 20);\n        \n        // Neck module\n        module neck() {\n            // Main neck shaft\n            color(\"burlywood\")\n            translate([0, 0, 25])\n            cylinder(h = 60, r = 4, $fn = 12);\n            \n            // Pegbox at top\n            color(\"burlywood\")\n            translate([0, 0, 60])\n            cylinder(h = 15, r = 5, $fn = 12);\n            \n            // Tuning pegs (2 per side)\n            color(\"black\")\n            for(side = [-1, 1]) {\n                for(i = [0, 1]) {\n                    rotate([0, 90, 0])\n                    translate([side * 10, 0, 55 + i * 8])\n                    cylinder(h = 12, r = 1.5, $fn = 8);\n                }\n            }\n            \n            // Fingerboard\n            color(\"black\")\n            translate([0, 4.1, 40])\n            cube([1.5, 0.5, 20], center = true);\n        }\n        \n        neck();\n        \n        // Sound post inside\n        color(\"burlywood\")\n        translate([0, 0, 0])\n        cylinder(h = 20, r = 1, $fn = 8);\n        \n        // Bridge\n        color(\"black\")\n        translate([0, 0, 14])\n        cube([1.5, 8, 2], center = true);\n        \n        // Strings (simplified as cylinders)\n        color(\"silver\")\n        for(x = [-0.5, 0.5]) {\n            translate([x, 0, 15])\n            cylinder(h = 65, r = 0.3, $fn = 8);\n        }\n        \n        // Tailpiece\n        color(\"black\")\n        translate([0, 0, -12])\n        cube([4, 2, 1], center = true);\n        \n        // Bow rest peg\n        color(\"burlywood\")\n        translate([13, 0, 30])\n        cylinder(h = 3, r = 1.5, $fn = 8);\n    }\n}\n\n// Render the erhu\nerhu();",
    "renders": true
  },
  {
    "musical_instrument": "gaohu",
    "openscad_code": "// Gaohu (Chinese bowed instrument) - realistic style, medium complexity\n// Overall height ~90 mm, suitable for 3D printing\n\n// Parameters\nbody_len = 45;\nbody_wid = 25;\nbody_thk = 15;\nneck_len = 40;\nneck_dia = 6;\npeg_len = 12;\npeg_dia = 4;\nstring_dia = 0.8;\nres = 64;\n\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        translate([r, r, 0]) cylinder(h=h, r=r, $fn=res);\n        translate([l-r, r, 0]) cylinder(h=h, r=r, $fn=res);\n        translate([r, w-r, 0]) cylinder(h=h, r=r, $fn=res);\n        translate([l-r, w-r, 0]) cylinder(h=h, r=r, $fn=res);\n    }\n}\n\n// Main body (resonator box)\nmodule body() {\n    difference() {\n        // Main shell with rounded edges\n        rounded_box(body_len, body_wid, body_thk, 5);\n        \n        // Front opening\n        translate([body_len/2, body_wid/2, -0.1])\n            cylinder(h=body_thk+0.2, r=10, $fn=res);\n        \n        // Back sound hole\n        translate([body_len/2, body_wid/2, body_thk+0.1])\n            cylinder(h=0.2, r=5, $fn=res);\n        \n        // Wall thickness\n        translate([1.5, 1.5, 1.5])\n            scale([0.9, 0.9, 0.8])\n            rounded_box(body_len-3, body_wid-3, body_thk-1.5, 4);\n    }\n}\n\n// Neck and fingerboard\nmodule neck() {\n    union() {\n        // Neck shaft\n        translate([body_len-2, body_wid/2, body_thk/2])\n            rotate([90, 0, 0])\n            cylinder(h=neck_len, r=neck_dia/2, $fn=res);\n        \n        // Fingerboard\n        translate([body_len-2, body_wid/2-2, body_thk/2+neck_dia/2])\n            cube([neck_len+2, 4, 1]);\n    }\n}\n\n// Peg box with tuning pegs\nmodule pegbox() {\n    translate([body_len+neck_len-4, body_wid/2, body_thk/2+neck_dia/2]) {\n        // Peg box\n        difference() {\n            cube([12, 8, 6]);\n            \n            // Peg holes\n            for(i=[0:1]) {\n                translate([2, 2+4*i, 3])\n                    rotate([90, 0, 0])\n                    cylinder(h=8, r=peg_dia/2+0.5, $fn=res);\n            }\n        }\n        \n        // Tuning pegs\n        for(i=[0:1]) {\n            translate([2, 2+4*i, 3])\n                rotate([90, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h=peg_len, r=peg_dia/2, $fn=res);\n        }\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([body_len/2+5, body_wid/2, body_thk/2+1.5]) {\n        difference() {\n            // Main bridge shape\n            cube([8, 2, 6]);\n            \n            // String notches\n            for(i=[0:1]) {\n                translate([2+4*i, -0.1, 5.5])\n                    cube([0.5, 2.2, 1]);\n            }\n        }\n    }\n}\n\n// Strings\nmodule strings() {\n    for(i=[0:1]) {\n        translate([body_len/2+5+2+4*i, body_wid/2-1, body_thk/2+2])\n            color(\"silver\")\n            cylinder(h=body_len/2+neck_len-8, r=string_dia/2, $fn=res);\n    }\n}\n\n// Assembly\ntranslate([0, 0, body_thk/2]) {\n    body();\n    neck();\n    pegbox();\n    bridge();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "zhonghu",
    "openscad_code": "// Zhonghu - Chinese alto bowed string instrument (realistic, medium complexity)\n// Overall scale: ~90 mm long, safe for FDM printing\n\n$fn = 36;                 // moderate facet count for smooth curves\nwall = 1.2;               // 3-perimeter wall thickness at 0.4 mm nozzle\n\nmodule zhonghu_assembly() {\n    // Main resonator body (coconut shell shaped)\n    difference() {\n        // outer shell\n        scale([1, 0.9, 1.2]) rotate([0, 90, 0]) \n            cylinder(h = 50, d1 = 40, d2 = 38, center = true);\n        // hollow inside\n        translate([0, -2, 0]) \n            scale([0.85, 0.75, 1.1]) rotate([0, 90, 0]) \n                cylinder(h = 55, d1 = 38-wall*2, d2 = 36-wall*2, center = true);\n    }\n\n    // Neck & fingerboard\n    translate([-25, 0, 20]) rotate([0, 0, 5])\n        difference() {\n            union() {\n                // neck shaft\n                scale([1, 0.8, 1]) cylinder(h = 45, d = 8);\n                // fingerboard on top\n                translate([0, 0, 4.5]) scale([1.05, 0.4, 0.1]) cube([45, 10, 1], center = true);\n            }\n            // truss channel\n            translate([0, 0, -2]) cylinder(h = 50, d = 4);\n        }\n\n    // Pegbox & scroll\n    translate([-48, 0, 23]) rotate([0, 0, 5])\n        union() {\n            // pegbox block\n            cube([12, 10, 15], center = true);\n            // simple scroll (two mirrored cylinders)\n            for (m = [0, 1])\n                mirror([m, 0, 0])\n                    rotate([0, 90, 0]) translate([-6, 0, 5])\n                        cylinder(h = 8, d = 6);\n            // peg holes (horizontal)\n            for (i = [0:3]) {\n                rotate([0, 90, 0]) translate([-5 + i*3.3, 0, 7 - i*3.5])\n                    rotate([90, 0, 0]) cylinder(h = 15, d = 2.2);\n            }\n        }\n\n    // Bridge\n    translate([8, 0, 0])\n        difference() {\n            cube([2, 18, 8], center = true);\n            translate([0, 0, -1]) cube([2.2, 20, 2], center = true);\n        }\n\n    // Sound post (internal support for printability)\n    translate([0, 0, -5])\n        cylinder(h = 10, d = 2);\n\n    // Tailpiece\n    translate([22, 0, 0]) rotate([10, 0, 0])\n        difference() {\n            cube([8, 12, 2], center = true);\n            // string holes\n            for (j = [-1, 1])\n                translate([0, j*3, 0]) cylinder(h = 3, d = 1);\n        }\n\n    // Endpin\n    translate([26, 0, -12]) cylinder(h = 12, d = 4);\n\n    // Four strings along neck & body\n    for (k = [-1.5, -0.5, 0.5, 1.5]) {\n        color(\"silver\") {\n            translate([-50, k*1.2, 23 + k*0.3]) cube([98, 0.4, 0.4]);\n        }\n    }\n}\n\n// Center it on origin\nzhonghu_assembly();",
    "renders": true
  },
  {
    "musical_instrument": "banhu",
    "openscad_code": "$fn = 50;\n\n// Overall scale\nscale_factor = 0.35;\n\n// Main body dimensions\nbody_length = 200 * scale_factor;\nbody_width = 90 * scale_factor;\nbody_depth = 40 * scale_factor;\n\n// Neck and pegbox\nneck_length = 300 * scale_factor;\nneck_width = 18 * scale_factor;\nneck_thickness = 20 * scale_factor;\npegbox_length = 60 * scale_factor;\n\n// Sound post and bridge\nsound_post_d = 6 * scale_factor;\nbridge_height = 12 * scale_factor;\nbridge_width = 30 * scale_factor;\n\n// Strings\nstring_d = 1.2 * scale_factor;\nstring_length = neck_length + body_length * 0.8;\n\n// Bamboo resonance tube\ntube_outer = 50 * scale_factor;\ntube_inner = 44 * scale_factor;\ntube_length = body_length * 0.7;\n\nmodule banhu_body() {\n    difference() {\n        // Main wooden body shell\n        hull() {\n            translate([-body_length*0.45, -body_width/2, 0])\n                cube([body_length*0.9, body_width, body_depth], center = false);\n            translate([-body_length*0.45 + body_length*0.3, -body_width/2 - 5, 0])\n                cube([body_length*0.6, body_width + 10, body_depth], center = false);\n            translate([-body_length*0.45 + body_length*0.6, -body_width/2 - 2, 0])\n                cube([body_length*0.4, body_width + 4, body_depth], center = false);\n        }\n        // Hollow inside\n        translate([0, 0, -1])\n            cube([body_length*0.85, body_width*0.85, body_depth*1.5], center = true);\n    }\n}\n\nmodule bamboo_tube() {\n    difference() {\n        // Outer bamboo cylinder\n        translate([body_length*0.1, 0, body_depth/2])\n            rotate([90, 0, 0])\n                cylinder(h = tube_length, d = tube_outer, center = true);\n        // Inner hollow\n        translate([body_length*0.1, 0, body_depth/2])\n            rotate([90, 0, 0])\n                cylinder(h = tube_length + 2, d = tube_inner, center = true);\n    }\n}\n\nmodule neck_pegbox() {\n    union() {\n        // Neck shaft\n        translate([-body_length*0.45 - neck_length/2, 0, body_depth + neck_thickness/2])\n            cube([neck_length, neck_width, neck_thickness], center = true);\n        // Pegbox head\n        translate([-body_length*0.45 - neck_length - pegbox_length/2, 0, body_depth + neck_thickness + 5])\n            cube([pegbox_length, neck_width*1.4, neck_thickness*1.4], center = true);\n    }\n}\n\nmodule pegs() {\n    // Two tuning pegs\n    for(i = [0:1]) {\n        translate([-body_length*0.45 - neck_length - pegbox_length*0.3, \n                   (i==0?1:-1)*neck_width*0.7, \n                   body_depth + neck_thickness + 5 + neck_thickness*0.5]) {\n            rotate([90, 0, 0])\n                cylinder(h = 15 * scale_factor, d = 6 * scale_factor);\n            translate([0, 0, 15 * scale_factor])\n                sphere(d = 8 * scale_factor);\n        }\n    }\n}\n\nmodule bridge() {\n    // Bridge on top of bamboo tube\n    translate([body_length*0.1, 0, body_depth/2 + tube_outer/2 + bridge_height/2])\n        difference() {\n            cube([bridge_width, 5 * scale_factor, bridge_height], center = true);\n            translate([0, 0, bridge_height/2 - 1])\n                cube([bridge_width - 4, 7 * scale_factor, 2], center = true);\n        }\n}\n\nmodule strings() {\n    // Two strings from pegbox to tail\n    for(i = [-1:2:1]) {\n        translate([-body_length*0.45 - neck_length - pegbox_length*0.3, \n                   i*neck_width*0.3, \n                   body_depth + neck_thickness + 5 + neck_thickness*0.5]) {\n            color(\"silver\")\n                rotate([0, 90, 0])\n                    cylinder(h = string_length, d = string_d, center = false);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, body_depth/2]) {\n    banhu_body();\n    bamboo_tube();\n    neck_pegbox();\n    pegs();\n    bridge();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "jinghu",
    "openscad_code": "// Jinghu - Chinese bowed string instrument\n// Medium complexity, realistic style, 3D printable\n\n// Parameters\nbody_length = 45;\nbody_diameter = 22;\nneck_length = 85;\nneck_diameter = 8;\npeg_length = 25;\npeg_diameter = 4;\nbridge_height = 8;\nbridge_width = 12;\nsound_post_height = 15;\nwall_thickness = 2;\n\nmodule body() {\n    // Main body - hexagonal prism with rounded edges\n    difference() {\n        cylinder(h=body_length, d=body_diameter, $fn=8);\n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            cylinder(h=body_length-wall_thickness*2, d=body_diameter-wall_thickness*2, $fn=8);\n        // Sound holes - traditional pattern\n        for(i=[-1, 1]) {\n            translate([i*6, 0, body_length/2])\n                rotate([0, 90, 0])\n                    cylinder(h=2, d=6, $fn=6);\n        }\n    }\n}\n\nmodule neck() {\n    // Tapered neck\n    hull() {\n        translate([0, 0, 0])\n            cylinder(h=5, d=neck_diameter, $fn=8);\n        translate([0, 0, neck_length])\n            cylinder(h=5, d=neck_diameter*0.8, $fn=8);\n    }\n    \n    // Fingerboard\n    translate([0, neck_diameter/2+0.5, neck_length/2])\n        cube([neck_diameter*0.9, 1, neck_length], center=true);\n}\n\nmodule pegbox() {\n    // Pegbox head\n    difference() {\n        translate([0, 0, neck_length+10])\n            cube([15, 8, 15], center=true);\n        // Peg holes\n        for(i=[-1, 1]) {\n            translate([i*5, 0, neck_length+15])\n                rotate([0, 90, 0])\n                    cylinder(h=20, d=peg_diameter+1);\n        }\n    }\n}\n\nmodule tuning_pegs() {\n    // Four tuning pegs (two per side)\n    for(side=[-1, 1]) {\n        for(pos=[-1, 1]) {\n            translate([side*5, 0, neck_length+15+pos*5])\n                rotate([0, 90, 0])\n                    rotate([0, 0, side*90])\n                        cylinder(h=peg_length, d=peg_diameter, $fn=8);\n        }\n    }\n}\n\nmodule bridge() {\n    // Curved bridge\n    difference() {\n        translate([0, 0, body_length/2+bridge_height/2])\n            cube([bridge_width, 3, bridge_height], center=true);\n        // String grooves\n        for(i=[-1, 0, 1]) {\n            translate([i*3, 0, body_length/2+bridge_height])\n                cube([1, 5, 2], center=true);\n        }\n    }\n}\n\nmodule snake_skin_cover() {\n    // Simplified snake skin membrane\n    translate([0, 0, body_length-wall_thickness])\n        cylinder(h=wall_thickness, d=body_diameter-wall_thickness, $fn=32);\n}\n\nmodule sound_post() {\n    // Internal sound post\n    translate([0, 0, body_length/2])\n        cylinder(h=sound_post_height, d=3, $fn=8);\n}\n\n// Assembly\nunion() {\n    // Main components\n    body();\n    translate([0, 0, body_length/2])\n        neck();\n    pegbox();\n    \n    // Attachments\n    translate([0, 0, 0])\n        snake_skin_cover();\n    translate([0, 0, body_length])\n        snake_skin_cover();\n    \n    bridge();\n    \n    // Internal structure\n    sound_post();\n    \n    // Tuning mechanism\n    tuning_pegs();\n}",
    "renders": true
  },
  {
    "musical_instrument": "yehu",
    "openscad_code": "// Yehu - Chinese Bowed Spike Fiddle\n// Size: ~85mm tall, optimized for FDM printing (no supports needed)\n\n$fn = 36;  // Smooth curves\n\n// Overall dimensions\nbody_length = 55;\nbody_width = 35;\nbody_thickness = 25;\nneck_length = 80;\nneck_diameter = 8;\npegbox_length = 25;\n\n// Main body - hollow resonator\nmodule body() {\n    difference() {\n        // Outer shell - elongated oval\n        scale([1, 0.7, 0.9])\n        rotate([0, 90, 0])\n        cylinder(h=body_length, d1=body_width, d2=body_width*0.8);\n        \n        // Hollow cavity (3mm walls)\n        translate([0, 0, 3])\n        scale([0.8, 0.5, 0.7])\n        rotate([0, 90, 0])\n        cylinder(h=body_length-6, d1=body_width-6, d2=(body_width*0.8)-6);\n        \n        // Sound holes - traditional f-holes simplified\n        translate([0, body_width/3, 0])\n        rotate([0, 0, 20])\n        cylinder(h=body_length, d=2);\n        \n        translate([0, -body_width/3, 0])\n        rotate([0, 0, -20])\n        cylinder(h=body_length, d=2);\n    }\n}\n\n// Neck and fingerboard\nmodule neck() {\n    translate([body_length/2, 0, 0])\n    rotate([0, -90, 0])\n    union() {\n        // Neck shaft\n        cylinder(h=neck_length, d=neck_diameter);\n        \n        // Fingerboard - tapered\n        translate([neck_length/2-5, 0, neck_diameter/2+1])\n        scale([1, 0.8, 0.3])\n        cube([neck_length-10, neck_diameter*1.2, 2], center=true);\n    }\n}\n\n// Pegbox with tuning pegs\nmodule pegbox() {\n    translate([body_length/2+neck_length, 0, 0])\n    rotate([0, -90, 0])\n    union() {\n        // Pegbox body\n        rotate([0, 90, 0])\n        cube([pegbox_length, neck_diameter*1.5, neck_diameter*1.5], center=true);\n        \n        // Tuning pegs (4 in square pattern)\n        for (i = [0:1]) {\n            for (j = [0:1]) {\n                translate([neck_diameter*0.8, \n                          (i-0.5)*neck_diameter*0.8, \n                          (j-0.5)*neck_diameter*0.8])\n                rotate([0, 90, 0])\n                cylinder(h=neck_diameter*1.2, d=neck_diameter*0.4);\n            }\n        }\n    }\n}\n\n// Tailpiece and strings\nmodule tailpiece() {\n    translate([body_length/2+neck_length+pegbox_length-5, 0, 0])\n    rotate([0, -90, 0])\n    union() {\n        // Tailpiece\n        translate([0, 0, -neck_diameter/2-2])\n        cube([8, neck_diameter*0.8, 3], center=true);\n        \n        // Strings (4 thin cylinders)\n        for (i = [-1.5:1:1.5]) {\n            translate([0, i*2, 0])\n            cylinder(h=neck_length+pegbox_length-5, d=0.5);\n        }\n    }\n}\n\n// Bridge\nmodule bridge() {\n    translate([body_length/4, 0, body_thickness/2+1])\n    difference() {\n        // Bridge shape\n        cube([5, body_width*0.6, 8], center=true);\n        \n        // Cutouts for strings\n        for (i = [-1.5:1:1.5]) {\n            translate([0, i*6, 3])\n            cylinder(h=6, d=2);\n        }\n    }\n}\n\n// Spike for holding against body\nmodule spike() {\n    translate([-body_length/2-5, 0, 0])\n    rotate([0, -90, 0])\n    cylinder(h=15, d=neck_diameter*0.6);\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    pegbox();\n    tailpiece();\n    bridge();\n    spike();\n}",
    "renders": true
  },
  {
    "musical_instrument": "morin",
    "openscad_code": "// Morin (Mongolian horse-head fiddle) - realistic style, medium complexity\n\n// Overall dimensions (mm)\nbody_length = 60;\nbody_width = 35;\nbody_thickness = 12;\nneck_length = 70;\nneck_width = 8;\nneck_thickness = 6;\nhead_length = 20;\nhead_height = 25;\npeg_length = 12;\npeg_diameter = 3;\nstring_thickness = 0.8;\nsoundpost_diameter = 2;\n\n// Main body (trapezoid sound box)\nmodule body() {\n    // Bottom plate\n    difference() {\n        hull() {\n            translate([-body_length/2, -body_width/2, 0])\n                cube([body_length*0.9, body_width*0.8, body_thickness/2]);\n            translate([body_length/2, -body_width*0.4, 0])\n                cube([body_length*0.9, body_width*0.6, body_thickness/2]);\n        }\n        \n        // Sound holes (f-holes simplified)\n        for(x = [-body_length/3, body_length/3]) {\n            translate([x, 0, body_thickness/2-0.5])\n                rotate([0, 0, 45])\n                cube([8, 2, body_thickness], center=true);\n        }\n        \n        // Bridge position recess\n        translate([body_length/4, 0, body_thickness-2])\n            cube([10, 2, 2], center=true);\n    }\n    \n    // Top plate\n    translate([0, 0, body_thickness/2])\n    scale([1.02, 1.02, 1])\n    difference() {\n        hull() {\n            translate([-body_length/2, -body_width/2, 0])\n                cube([body_length*0.9, body_width*0.8, body_thickness/2]);\n            translate([body_length/2, -body_width*0.4, 0])\n                cube([body_length*0.9, body_width*0.6, body_thickness/2]);\n        }\n        \n        // Central hole\n        translate([0, 0, body_thickness/2-0.5])\n            cylinder(h=body_thickness, d=6, $fn=32);\n    }\n}\n\n// Neck with fingerboard\nmodule neck() {\n    // Neck shaft\n    hull() {\n        translate([0, 0, 0])\n            cube([neck_length, neck_width, neck_thickness], center=true);\n        translate([neck_length*0.7, 0, 0])\n            cube([neck_length*0.8, neck_width*0.8, neck_thickness*0.9], center=true);\n    }\n    \n    // Fingerboard (slightly curved top)\n    translate([neck_length/2, 0, neck_thickness/2+1])\n        scale([1, 0.9, 0.5])\n        hull() {\n            cube([neck_length*1.1, neck_width*1.2, 2], center=true);\n            translate([0, 0, 1])\n                sphere(d=neck_width*1.2);\n        }\n}\n\n// Horse head scroll\nmodule head() {\n    // Main head shape\n    hull() {\n        sphere(d=head_height*0.8);\n        translate([head_length, 0, 0])\n            sphere(d=head_height*0.6);\n        translate([head_length*1.5, 0, head_height*0.3])\n            sphere(d=head_height*0.4);\n    }\n    \n    // Horse ears\n    for(y = [-head_height*0.3, head_height*0.3]) {\n        translate([head_length*0.8, y, head_height*0.6])\n            rotate([0, -30, y > 0 ? 20 : -20])\n            cylinder(h=head_height*0.4, d1=head_height*0.15, d2=0, $fn=8);\n    }\n    \n    // Mane (simplified ridges)\n    for(i = [0:3]) {\n        translate([head_length*0.5 + i*3, 0, head_height*0.7])\n            rotate([90, 0, 0])\n            cylinder(h=2, d=head_height*0.1, $fn=4);\n    }\n}\n\n// Tuning pegs\nmodule pegs() {\n    for(i = [0:1]) {\n        rotate([0, 90, 0])\n        translate([neck_length + head_length*0.7, (i == 0 ? -1 : 1) * neck_width*0.8, head_height*0.3])\n            rotate([0, 0, i*15])\n            cylinder(h=peg_length, d=peg_diameter, $fn=12);\n    }\n}\n\n// Strings\nmodule strings() {\n    for(i = [-1, 1]) {\n        // Main strings\n        translate([neck_length + head_length*0.7, i*2, head_height*0.2])\n            rotate([90, 0, 0])\n            cylinder(h=body_length + neck_length + head_length - 15, d=string_thickness, $fn=8);\n        \n        // Tailpiece strings\n        translate([body_length/2 - 10, i*2, body_thickness-1])\n            cylinder(h=body_thickness, d=string_thickness*1.5, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Body at origin\n    body();\n    \n    // Neck attached to body\n    translate([-body_length/2 - neck_length/2, 0, body_thickness/2 - neck_thickness/2])\n        neck();\n    \n    // Head attached to neck\n    translate([-body_length/2 - neck_length - head_length/2, 0, neck_thickness/2 + head_height/2])\n        rotate([0, 0, -15])\n        head();\n    \n    // Pegs\n    translate([-body_length/2 - neck_length, 0, neck_thickness/2])\n        pegs();\n    \n    // Strings\n    strings();\n    \n    // Tailpiece\n    translate([body_length/2 - 15, 0, body_thickness-2])\n        cube([10, 8, 2], center=true);\n}",
    "renders": true
  },
  {
    "musical_instrument": "huqin",
    "openscad_code": "// Huqin (Chinese 2-string fiddle) – realistic, medium complexity, printable\n// Overall scale: ~90 mm long\n\n$fn = 36;               // decent curves without overhangs\nwall = 1.5;             // printable wall thickness\n\n// ---------- module shortcuts ----------\nmodule tube(h, r1, r2 = r1) cylinder(h = h, r1 = r1, r2 = r2, center = true);\nmodule ball(r) sphere(r = r);\n\n// ---------- pegbox with four friction pegs ----------\nmodule pegbox() {\n    difference() {\n        // main box\n        translate([0, 0, 12]) cube([30, 16, 24], center = true);\n        // through holes for strings\n        for (a = [-1, 1]) translate([0, a*5, 12]) tube(20, 1.5);\n    }\n    // four pegs\n    for (i = [0:3]) {\n        rotate([0, 0, i*90+45]) translate([9, 0, 12]) rotate([90, 0, 0])\n            tube(12, 2.5, 2);\n    }\n}\n\n// ---------- neck ----------\nmodule neck() {\n    tube(40, 3, 3);\n    translate([0,0,-20]) cube([6, 6, 40], center = true);\n}\n\n// ---------- resonator body (octagonal box) ----------\nmodule body() {\n    // octagonal prism\n    linear_extrude(height = 30, center = true, convexity = 4)\n        offset(r = 3) circle(r = 22, $fn = 8);\n    // remove inside\n    translate([0,0,0]) linear_extrude(height = 33, center = true, convexity = 4)\n        offset(r = 3-wall) circle(r = 22-wall, $fn = 8);\n    // front membrane (thin plate)\n    translate([0,0,15]) cube([40, 40, 1], center = true);\n    // sound hole\n    translate([0,0,15.6]) cylinder(h = 2, r = 8);\n}\n\n// ---------- bow ----------\nmodule bow() {\n    // stick\n    translate([0, 0, 0]) rotate([90, 0, 0]) tube(70, 1.5);\n    // horsehair ribbon\n    translate([0, 0, 35]) rotate([90, 0, 0])\n        tube(60, 3, 0.5);\n    // frog\n    translate([0, 0, -30]) cube([6, 4, 8], center = true);\n}\n\n// ---------- assembly ----------\nunion() {\n    // pegbox\n    translate([0, 0, 35]) pegbox();\n    // neck\n    translate([0, 0, 15]) neck();\n    // body\n    translate([0, 0, -15]) body();\n    // strings (very thin cylinders)\n    for (dx = [-2, 2])\n        translate([dx, 0, 35]) rotate([90, 0, 0]) tube(50, 0.4);\n}\n\n// optional: print the bow separately\n// translate([0, 50, 0]) bow();",
    "renders": true
  },
  {
    "musical_instrument": "guzheng",
    "openscad_code": "// Guzheng model - medium complexity, realistic style\n// Overall length 100mm, width 30mm, thickness 15mm\n\n// Parameters\nbody_len = 100;\nbody_w = 30;\nbody_h = 15;\nneck_len = 40;\nneck_w = 10;\nneck_h = 5;\nbridge_h = 4;\nbridge_w = 2;\nbridge_len = 1.5;\nstring_d = 0.5;\nnum_strings = 16;\nstring_spacing = 2;\nwall_thk = 1.5;\n\n// Main body module\nmodule guzheng_body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-body_len/2, -body_w/2, 0])\n                cube([body_len, body_w, body_h]);\n            translate([-body_len/2 + 5, -body_w/2 - 2, 0])\n                cube([body_len - 10, body_w + 4, body_h + 2]);\n            translate([body_len/2 - 5, -body_w/2 - 2, 0])\n                cube([body_len - 10, body_w + 4, body_h + 2]);\n        }\n        \n        // Hollow inside\n        translate([-body_len/2 + wall_thk, -body_w/2 + wall_thk, wall_thk])\n            cube([body_len - 2*wall_thk, body_w - 2*wall_thk, body_h - wall_thk]);\n        \n        // Sound holes (long oval)\n        translate([0, 0, body_h - 0.5])\n            scale([1, 0.3, 1])\n                cylinder(h=1, d=body_len/3, $fn=30);\n    }\n}\n\n// Neck module\nmodule neck() {\n    translate([-body_len/2 - neck_len/2, 0, body_h])\n    difference() {\n        hull() {\n            cube([neck_len, neck_w, neck_h]);\n            translate([neck_len/2, 0, 0])\n                cube([neck_len/2, neck_w, neck_h + 1]);\n        }\n        \n        // Tuning peg holes\n        for(i=[0:4]) {\n            translate([neck_len - 5 - i*5, neck_w/2 + 1, neck_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h=neck_w + 2, d=1.5, $fn=12);\n            translate([neck_len - 5 - i*5, -neck_w/2 - 1, neck_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h=neck_w + 2, d=1.5, $fn=12);\n        }\n    }\n}\n\n// Bridge module\nmodule bridge(x_pos) {\n    translate([x_pos - bridge_len/2, -body_w/2 + 5, body_h - 0.1])\n    difference() {\n        // Bridge body\n        cube([bridge_len, body_w - 10, bridge_h]);\n        \n        // String notches\n        for(i=[0:num_strings-1]) {\n            translate([0, 5 + i*string_spacing, bridge_h/2])\n                rotate([90, 0, 0])\n                    cylinder(h=bridge_len + 1, d=string_d + 0.2, $fn=8);\n        }\n    }\n}\n\n// Strings module\nmodule strings() {\n    for(i=[0:num_strings-1]) {\n        translate([-body_len/2 - neck_len/2 + 5, -body_w/2 + 5 + i*string_spacing, body_h + neck_h - 0.2])\n            color(\"gold\")\n                cylinder(h=body_len + neck_len - 10, d=string_d, $fn=6);\n    }\n}\n\n// Decorative end piece\nmodule end_piece() {\n    translate([body_len/2, 0, body_h])\n    difference() {\n        union() {\n            cube([3, body_w, 3]);\n            translate([1.5, 0, 3])\n                sphere(d=body_w, $fn=30);\n        }\n        translate([1.5, 0, 3])\n            sphere(d=body_w - 4, $fn=30);\n    }\n}\n\n// Assemble the guzheng\nunion() {\n    guzheng_body();\n    neck();\n    bridge(20);\n    bridge(40);\n    bridge(60);\n    strings();\n    end_piece();\n}",
    "renders": true
  },
  {
    "musical_instrument": "konghou",
    "openscad_code": "// Konghou - Chinese Harp\n// Realistic style with medium complexity\n// Approximate size: 80mm height\n\n$fn = 36;\nbody_thickness = 3;\nstring_diameter = 0.6;\nstring_spacing = 3.5;\nnum_strings = 12;\n\nmodule base() {\n    // Bottom platform\n    difference() {\n        translate([0, 0, -2])\n            cube([30, 15, 4], center=true);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, -1])\n            cube([25, 10, 4], center=true);\n    }\n}\n\nmodule pillar() {\n    // Main support pillar with slight curve\n    translate([0, 0, 20])\n        scale([1, 1, 4])\n            cylinder(h=10, d1=8, d2=6, center=true);\n}\n\nmodule soundbox() {\n    // Curved resonating chamber\n    translate([-12, 0, 12])\n        rotate([0, 90, 0])\n            cylinder(h=25, d1=18, d2=22, center=true);\n    \n    // Sound holes\n    for(i=[-1:1]) {\n        translate([-12, i*5, 10])\n            rotate([0, 90, 0])\n                cylinder(h=25, d=2, center=true);\n    }\n}\n\nmodule neck() {\n    // Curved neck extending upward\n    translate([5, 0, 42])\n        rotate([0, 10, 0])\n            cylinder(h=35, d=6, center=true);\n    \n    // Top scroll decoration\n    translate([12, 0, 57])\n        sphere(d=8);\n}\n\nmodule bridge() {\n    // String bridge on soundbox\n    translate([-2, 0, 6])\n        cube([20, 2, 3], center=true);\n    \n    // Individual string notches\n    for(i=[-5:6]) {\n        translate([i*string_spacing - 22, 0, 7.5])\n            cube([1, 2.2, 1], center=true);\n    }\n}\n\nmodule tuning_pegs() {\n    // Row of tuning pegs at top\n    for(i=[-5:6]) {\n        translate([i*string_spacing + 5, 0, 55])\n            rotate([90, 0, 0])\n                cylinder(h=6, d=2);\n        \n        // Peg heads\n        translate([i*string_spacing + 5, 0, 58])\n            sphere(d=3);\n    }\n}\n\nmodule strings() {\n    // Individual strings\n    for(i=[-5:6]) {\n        hull() {\n            // Bottom anchor point\n            translate([i*string_spacing - 22, 0, 7.5])\n                sphere(d=string_diameter*2);\n            \n            // Top at tuning peg\n            translate([i*string_spacing + 5, 0, 55])\n                sphere(d=string_diameter*2);\n        }\n    }\n}\n\nmodule arms() {\n    // Decorative curved arms\n    translate([5, -8, 35])\n        rotate([0, 0, -20])\n            cylinder(h=25, d=3, center=true);\n    \n    translate([5, 8, 35])\n        rotate([0, 0, 20])\n            cylinder(h=25, d=3, center=true);\n}\n\n// Main assembly\nunion() {\n    base();\n    pillar();\n    soundbox();\n    neck();\n    bridge();\n    tuning_pegs();\n    arms();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "bianzhong",
    "openscad_code": "// Bianzhong - Ancient Chinese Chime Bell Set\n// Medium complexity realistic style\n\n// Overall dimensions\nframe_width = 80;\nframe_height = 60;\nframe_depth = 30;\nbell_scale = 0.8;\n\n// Main frame structure\nmodule frame() {\n    // Base platform\n    translate([0, 0, 0])\n        cube([frame_width, frame_depth, 5], center=true);\n    \n    // Left vertical support\n    translate([-frame_width/2 + 2.5, 0, frame_height/2])\n        cube([5, frame_depth, frame_height], center=true);\n    \n    // Right vertical support\n    translate([frame_width/2 - 2.5, 0, frame_height/2])\n        cube([5, frame_depth, frame_height], center=true);\n    \n    // Top horizontal beam\n    translate([0, 0, frame_height])\n        cube([frame_width, frame_depth, 5], center=true);\n    \n    // Decorative end caps\n    for(x = [-frame_width/2 + 2.5, frame_width/2 - 2.5]) {\n        translate([x, 0, frame_height])\n            cylinder(h=6, d1=8, d2=6, center=true);\n    }\n}\n\n// Individual bell with realistic details\nmodule bell(width, height, thickness) {\n    difference() {\n        // Main bell body - elliptical shape\n        scale([1, 0.7, 1])\n            cylinder(h=height, d1=width, d2=width*1.2, center=false);\n        \n        // Hollow interior\n        translate([0, 0, thickness])\n            scale([0.8, 0.5, 1])\n                cylinder(h=height-thickness*2, d1=width*0.9, d2=width*1.1, center=false);\n        \n        // Sound hole at bottom\n        translate([0, 0, height-2])\n            scale([1, 0.7, 1])\n                cylinder(h=2, d=width*0.8, center=false);\n    }\n    \n    // Top loop for hanging\n    translate([0, 0, height])\n        rotate([90, 0, 0])\n            difference() {\n                torus(3, 1, $fn=16);\n                translate([0, 0, -1])\n                    cube([10, 10, 2], center=true);\n            }\n    \n    // Decorative rings\n    for(i = [1:3]) {\n        translate([0, 0, height/4 * i])\n            scale([1, 0.7, 0.2])\n                cylinder(h=1, d=width*1.1, center=true);\n    }\n    \n    // Boss (central knob)\n    translate([0, 0, height/2])\n        sphere(d=width/4);\n}\n\n// Helper module for torus shape\nmodule torus(outer, inner, fn) {\n    rotate_extrude($fn=fn)\n        translate([outer, 0, 0])\n            circle(r=inner, $fn=fn);\n}\n\n// Hanger for bells\nmodule hanger(bell_width, y_pos) {\n    // Horizontal rod\n    translate([0, y_pos, frame_height - 5])\n        rotate([90, 0, 0])\n            cylinder(h=frame_width*0.6, d=2, center=true);\n    \n    // Vertical support strings\n    for(x = [-frame_width/4, 0, frame_width/4]) {\n        translate([x, y_pos, frame_height - 5])\n            cylinder(h=10, d=0.5, center=false);\n    }\n}\n\n// Generate complete bianzhong set\nframe();\n\n// Create 3 bells of different sizes\nbell_sizes = [[12, 20, 2], [15, 25, 2.5], [18, 30, 3]];\ny_positions = [-8, 0, 8];\n\nfor(i = [0:2]) {\n    current_size = bell_sizes[i];\n    y_pos = y_positions[i];\n    \n    // Add hanger for this bell\n    hanger(current_size[0], y_pos);\n    \n    // Position and scale the bell\n    translate([0, y_pos, frame_height - 15])\n        scale(bell_scale)\n            bell(current_size[0], current_size[1], current_size[2]);\n}\n\n// Decorative cloud patterns on frame\nmodule cloud_pattern(x, y, z, scale) {\n    translate([x, y, z])\n        scale([scale, scale, 1])\n            for(i = [0:3]) {\n                rotate([0, 0, i*90])\n                    translate([2, 0, 0])\n                        sphere(d=3);\n            }\n}\n\n// Add cloud patterns to frame\ncloud_pattern(-frame_width/2 + 10, 0, frame_height/2, 1);\ncloud_pattern(frame_width/2 - 10, 0, frame_height/2, 1);\ncloud_pattern(0, frame_depth/2 - 5, frame_height - 10, 0.8);\ncloud_pattern(0, -frame_depth/2 + 5, frame_height - 10, 0.8);",
    "renders": true
  },
  {
    "musical_instrument": "bianqing",
    "openscad_code": "// OpenSCAD Bianqing (ancient Chinese stone chime)\n// Realistic medium-complexity model\n\n// Overall dimensions\nscale_factor = 0.8;\nlength = 70 * scale_factor;\nwidth = 45 * scale_factor;\nthickness = 4 * scale_factor;\nhole_d = 8 * scale_factor;\nhole_h = 5 * scale_factor;\nedge_bevel = 1.5 * scale_factor;\n\n// Central suspension hole\nmodule suspension_hole() {\n    translate([0, 0, thickness/2]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=width+2, d=hole_d, $fn=32);\n        }\n    }\n}\n\n// Decorative edge pattern\nmodule edge_pattern() {\n    // Top edge bevel\n    translate([0, 0, thickness/2-edge_bevel/2]) {\n        cube([length, width, edge_bevel], center=true);\n    }\n    // Bottom edge bevel\n    translate([0, 0, -thickness/2+edge_bevel/2]) {\n        cube([length, width, edge_bevel], center=true);\n    }\n}\n\n// Surface decorations - ancient symbols\nmodule surface_decoration() {\n    // Left side symbols\n    translate([-length/3, -width/3, thickness/2+0.1]) {\n        rotate([0, 0, 0]) {\n            for(i=[0:3]) {\n                rotate([0, 0, i*90]) {\n                    cylinder(h=0.5, d=3, $fn=6);\n                    translate([0, 0.8, 0]) {\n                        sphere(d=1);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Right side symbols\n    translate([length/3, width/3, thickness/2+0.1]) {\n        rotate([0, 0, 45]) {\n            for(i=[0:3]) {\n                rotate([0, 0, i*90]) {\n                    cube([2, 0.5, 0.5], center=true);\n                    translate([1.2, 0, 0]) {\n                        sphere(d=0.8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main bianqing body\nmodule bianqing_body() {\n    difference() {\n        // Main body with rounded edges\n        union() {\n            // Center plate\n            translate([0, 0, 0]) {\n                cube([length, width, thickness], center=true);\n            }\n            \n            // Edge bevels\n            edge_pattern();\n        }\n        \n        // Suspension hole\n        suspension_hole();\n        \n        // Carved grooves for resonance\n        translate([0, 0, -thickness/2]) {\n            // Vertical grooves\n            for(i=[-1:1]) {\n                translate([i*length/4, 0, 0]) {\n                    cube([1, width-4, thickness]);\n                }\n            }\n            // Horizontal grooves\n            for(j=[-1:1]) {\n                translate([0, j*width/3, 0]) {\n                    cube([length-6, 1, thickness]);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    bianqing_body();\n    \n    // Surface decorations\n    surface_decoration();\n    \n    // Suspension ring\n    translate([0, -width/2-hole_h/2, 0]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                // Outer ring\n                cylinder(h=hole_h, d=hole_d+2, $fn=32);\n                // Inner hole\n                cylinder(h=hole_h+1, d=hole_d, $fn=32);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "paigu",
    "openscad_code": "// Paigu (Chinese drum) - Medium complexity realistic style\n// Overall size: ~80mm width, ~50mm height\n\n$fn = 32;\nwall_thickness = 2;\nskin_thickness = 1.5;\n\n// Main drum body module\nmodule drum_body(radius, height) {\n    difference() {\n        // Outer shell\n        cylinder(h = height, r = radius, center = true);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness/2])\n            cylinder(h = height + 1, r = radius - wall_thickness, center = true);\n    }\n}\n\n// Drum skin tension ring\nmodule tension_ring(radius, height) {\n    difference() {\n        // Outer ring\n        cylinder(h = height, r1 = radius + 3, r2 = radius + 2, center = true);\n        \n        // Inner cutout\n        cylinder(h = height + 1, r = radius, center = true);\n    }\n}\n\n// Decorative lug for ropes\nmodule lug() {\n    difference() {\n        // Main lug body\n        cube([6, 4, 8], center = true);\n        \n        // Hole for rope\n        rotate([90, 0, 0])\n            cylinder(h = 7, r = 1.5, center = true);\n    }\n}\n\n// Rope segment between lugs\nmodule rope_segment(start_r, end_r, height, angle) {\n    translate([0, 0, height])\n    rotate([0, 0, angle])\n    hull() {\n        translate([start_r, 0, 0])\n            sphere(r = 1.5);\n        translate([end_r, 0, 0])\n            sphere(r = 1.5);\n    }\n}\n\n// Complete drum assembly\nmodule paigu() {\n    // Main drum body - slightly hourglass shape\n    scale([1, 1, 0.95])\n    drum_body(radius = 20, height = 25);\n    \n    // Top drum skin\n    translate([0, 0, 12.5 + skin_thickness/2])\n    cylinder(h = skin_thickness, r = 20, center = true);\n    \n    // Bottom drum skin\n    translate([0, 0, -12.5 - skin_thickness/2])\n    cylinder(h = skin_thickness, r = 20, center = true);\n    \n    // Top tension ring\n    translate([0, 0, 12.5 + skin_thickness + 2])\n    tension_ring(radius = 20, height = 3);\n    \n    // Bottom tension ring\n    translate([0, 0, -12.5 - skin_thickness - 2])\n    tension_ring(radius = 20, height = 3);\n    \n    // Lugs and ropes\n    for (i = [0 : 45 : 315]) {\n        rotate([0, 0, i]) {\n            // Top lugs\n            translate([23, 0, 12.5 + skin_thickness + 2])\n                lug();\n            \n            // Bottom lugs\n            translate([23, 0, -12.5 - skin_thickness - 2])\n                lug();\n            \n            // Rope segments\n            rope_segment(23, 23, 12.5 + skin_thickness + 2, i);\n            rope_segment(23, 23, -12.5 - skin_thickness - 2, i);\n            \n            // Vertical rope connections\n            hull() {\n                translate([23, 0, 12.5 + skin_thickness + 2])\n                    sphere(r = 1.5);\n                translate([23, 0, -12.5 - skin_thickness - 2])\n                    sphere(r = 1.5);\n            }\n        }\n    }\n    \n    // Decorative band around middle\n    translate([0, 0, 0])\n    difference() {\n        cylinder(h = 4, r = 21.5, center = true);\n        cylinder(h = 4.5, r = 20.5, center = true);\n    }\n}\n\n// Render the complete drum\npaigu();",
    "renders": true
  },
  {
    "musical_instrument": "tanggu",
    "openscad_code": "// Tanggu Drum - Realistic Style, Medium Complexity\n// Traditional Chinese barrel drum with two heads\n\n// Dimensions in mm\n$fn = 30;\n\n// Main drum body\nmodule drum_body() {\n    difference() {\n        // Main barrel shape\n        cylinder(h = 60, r1 = 25, r2 = 22, center = true);\n        \n        // Hollow out the inside\n        cylinder(h = 62, r1 = 23, r2 = 20, center = true);\n    }\n}\n\n// Drum head attachment ring\nmodule head_ring(height, radius, thickness = 1.5) {\n    difference() {\n        cylinder(h = thickness, r = radius, center = true);\n        cylinder(h = thickness + 0.1, r = radius - 2, center = true);\n    }\n}\n\n// Decorative rings on drum body\nmodule decorative_rings() {\n    for (i = [-20, 20]) {\n        translate([0, 0, i])\n            scale([1.05, 1.05, 1])\n            cylinder(h = 2, r1 = 25.5, r2 = 22.5, center = true);\n    }\n}\n\n// Drum head membrane\nmodule drum_head() {\n    // Thin membrane\n    cylinder(h = 0.5, r = 24.5, center = true);\n    \n    // Tension ring\n    translate([0, 0, 0.75])\n        head_ring(0.75, 25.5, 1.5);\n}\n\n// Tuning pegs (decorative)\nmodule tuning_peg() {\n    union() {\n        cylinder(h = 8, r = 1.5);\n        translate([0, 0, 8])\n            sphere(r = 2);\n    }\n}\n\n// Array of tuning pegs\nmodule tuning_pegs() {\n    peg_positions = 6;\n    for (i = [0 : peg_positions - 1]) {\n        rotate([0, 0, i * 360 / peg_positions])\n            translate([27.5, 0, 28])\n                rotate([90, 0, 0])\n                    tuning_peg();\n    }\n}\n\n// Drum stand attachment points\nmodule stand_mounts() {\n    // Top mount\n    translate([0, 0, 32])\n        cylinder(h = 3, r = 3);\n    \n    // Bottom mount\n    translate([0, 0, -32])\n        cylinder(h = 3, r = 3);\n}\n\n// Main assembly\nunion() {\n    // Drum body\n    drum_body();\n    \n    // Decorative rings\n    decorative_rings();\n    \n    // Top drum head assembly\n    translate([0, 0, 31])\n        drum_head();\n    \n    // Bottom drum head assembly\n    mirror([0, 0, 1])\n        translate([0, 0, 31])\n            drum_head();\n    \n    // Tuning pegs on both sides\n    tuning_pegs();\n    mirror([0, 0, 1])\n        tuning_pegs();\n    \n    // Stand mounts\n    stand_mounts();\n}",
    "renders": true
  },
  {
    "musical_instrument": "dagu",
    "openscad_code": "// OpenSCAD code for a realistic 3D-printable DAGU (Korean traditional mask)\n// Overall dimensions: ~70 mm width × ~85 mm height × ~30 mm depth\n$fa = 1; $fs = 0.5;\n\nmodule face_base() {\n    // Main ellipsoidal face shell\n    scale([1, 1.3, 0.6])\n        sphere(d = 70);\n}\n\nmodule forehead() {\n    // Rounded forehead ridge\n    translate([0, 25, 15])\n        scale([0.55, 0.25, 0.2])\n            sphere(d = 70);\n}\n\nmodule eyes() {\n    // Eye sockets – slightly slanted almond shape\n    for (x = [-18, 18]) {\n        translate([x, 15, 12])\n            rotate([0, 0, x > 0 ? -20 : 20])\n                scale([1.1, 0.45, 0.3])\n                    cylinder(h = 20, d = 20, center = true);\n    }\n}\n\nmodule nose() {\n    // Realistic nose ridge\n    translate([0, -5, 15])\n        hull() {\n            translate([0, 5, 0])\n                sphere(d = 12);\n            translate([0, -8, -5])\n                sphere(d = 8);\n        }\n}\n\nmodule mouth() {\n    // Smiling open mouth\n    difference() {\n        // Mouth opening\n        translate([0, -32, 5])\n            scale([0.8, 0.4, 0.8])\n                cylinder(h = 25, d = 25, center = true);\n        // Upper lip\n        translate([0, -27, 2])\n            cube([28, 8, 4], center = true);\n    }\n}\n\nmodule cheeks() {\n    // Cheek bulges\n    for (x = [-28, 28]) {\n        translate([x, -15, 6])\n            scale([0.5, 0.6, 0.6])\n                sphere(d = 35);\n    }\n}\n\nmodule chin() {\n    // Chin projection\n    translate([0, -45, 0])\n        scale([0.5, 0.7, 0.5])\n            sphere(d = 35);\n}\n\nmodule straps() {\n    // Holes for string loops on sides\n    for (x = [-32, 32]) {\n        translate([x, 0, 8])\n            rotate([0, 90, 0])\n                cylinder(h = 20, d = 6, center = true);\n    }\n}\n\nmodule dagu_mask() {\n    difference() {\n        union() {\n            // Assemble main face parts\n            face_base();\n            forehead();\n            nose();\n            cheeks();\n            chin();\n        }\n        // Cutouts for realism and wearability\n        eyes();\n        mouth();\n        straps();\n    }\n}\n\n// Render the mask\ndagu_mask();",
    "renders": true
  },
  {
    "musical_instrument": "xiao",
    "openscad_code": "// Xiao (Chinese end-blown flute)\n// Realistic style with medium complexity\n// Overall length ~180 mm, printable in one piece\n\n// Parameters\nbore_dia = 12;\nwall_thick = 2;\nseg_len = 20;\nn_segments = 9;\nfinger_dia = 6;\nblow_notch_w = 8;\nblow_notch_h = 5;\n\n// Main tube\nmodule tube() {\n    difference() {\n        // Outer body\n        union() {\n            for (i = [0 : n_segments - 1]) {\n                translate([0, 0, -i * seg_len])\n                    cylinder(h = seg_len, d1 = bore_dia + 2 * wall_thick + 1.5 * sin(i * 30), \n                                    d2 = bore_dia + 2 * wall_thick + 1.5 * sin((i + 1) * 30), $fn = 32);\n            }\n        }\n        // Bore\n        cylinder(h = n_segments * seg_len + 2, d = bore_dia, $fn = 32);\n    }\n}\n\n// Blow notch\nmodule blow_notch() {\n    translate([0, -bore_dia / 2 - wall_thick / 2, n_segments * seg_len - 10])\n        rotate([0, 45, 0])\n            difference() {\n                cube([blow_notch_w, blow_notch_h, wall_thick]);\n                translate([blow_notch_w / 2, blow_notch_h, wall_thick / 2])\n                    sphere(d = bore_dia, $fn = 32);\n            }\n}\n\n// Finger holes\nmodule finger_holes() {\n    // Top hand\n    for (i = [0 : 3]) {\n        rotate([0, 90, 0])\n            translate([0, -bore_dia / 2 - wall_thick, n_segments * seg_len - 50 - i * 22])\n                rotate([0, 90, 0])\n                    cylinder(h = wall_thick + 1, d = finger_dia, $fn = 16);\n    }\n    // Bottom hand\n    for (i = [0 : 3]) {\n        rotate([0, 90, 0])\n            translate([0, -bore_dia / 2 - wall_thick, n_segments * seg_len - 140 - i * 18])\n                rotate([0, 90, 0])\n                    cylinder(h = wall_thick + 1, d = finger_dia, $fn = 16);\n    }\n    // Thumb hole\n    rotate([0, 90, 0])\n        translate([0, -bore_dia / 2 - wall_thick, n_segments * seg_len - 75])\n            rotate([0, 0, 90])\n                cylinder(h = wall_thick + 1, d = finger_dia, $fn = 16);\n}\n\n// End cap\nmodule end_cap() {\n    difference() {\n        cylinder(h = 5, d = bore_dia + 2 * wall_thick + 2, $fn = 32);\n        cylinder(h = 6, d = bore_dia, $fn = 32);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    union() {\n        tube();\n        translate([0, 0, 0])\n            end_cap();\n        blow_notch();\n        finger_holes();\n    }",
    "renders": true
  },
  {
    "musical_instrument": "dongxiao",
    "openscad_code": "// Dongxiao - Chinese end-blown bamboo flute\n// Realistic style, medium complexity\n\n// Overall dimensions\nlength = 80;\nouter_diameter = 18;\ninner_diameter = 12;\nwall_thickness = (outer_diameter - inner_diameter) / 2;\n\n// Mouthpiece parameters\nmouthpiece_length = 15;\nmouthpiece_angle = 30;\nmouthpiece_cut_width = 8;\nmouthpiece_cut_depth = 4;\n\n// Tone holes\nhole_diameter = 5;\nhole_positions = [15, 25, 35, 45, 55, 65];\nback_hole_position = 20;\n\n// Decorative ring positions\nring_positions = [5, 75];\nring_height = 2;\n\n// Create the main tube\nmodule main_tube() {\n    difference() {\n        // Outer tube\n        cylinder(h = length, d = outer_diameter, $fn = 32);\n        \n        // Inner bore\n        translate([0, 0, -1])\n            cylinder(h = length + 2, d = inner_diameter, $fn = 32);\n    }\n}\n\n// Create mouthpiece with U-shaped cut\nmodule mouthpiece() {\n    difference() {\n        // Main mouthpiece body\n        union() {\n            // Cylindrical part\n            cylinder(h = mouthpiece_length, d = outer_diameter, $fn = 32);\n            \n            // Angled top\n            translate([0, 0, mouthpiece_length])\n                rotate([mouthpiece_angle, 0, 0])\n                    cube([outer_diameter, outer_diameter, outer_diameter], center = true);\n        }\n        \n        // U-shaped cut for blowing edge\n        translate([0, -outer_diameter/2, mouthpiece_length - mouthpiece_cut_depth])\n            rotate([90, 0, 0])\n                cylinder(h = outer_diameter, d = mouthpiece_cut_width, $fn = 32);\n        \n        // Inner bore continues through mouthpiece\n        translate([0, 0, -1])\n            cylinder(h = mouthpiece_length + 2, d = inner_diameter, $fn = 32);\n    }\n}\n\n// Create tone holes\nmodule tone_holes() {\n    for(pos = hole_positions) {\n        translate([0, 0, pos])\n            rotate([90, 0, 0])\n                cylinder(h = outer_diameter, d = hole_diameter, $fn = 16);\n    }\n    \n    // Back thumb hole\n    translate([0, 0, back_hole_position])\n        rotate([0, 90, 0])\n            cylinder(h = outer_diameter, d = hole_diameter, $fn = 16);\n}\n\n// Create decorative rings\nmodule decorative_rings() {\n    for(pos = ring_positions) {\n        translate([0, 0, pos])\n            cylinder(h = ring_height, d = outer_diameter + 2, $fn = 32);\n    }\n}\n\n// Create bottom end with slight taper\nmodule bottom_end() {\n    difference() {\n        // Tapered bottom\n        translate([0, 0, length - 5])\n            cylinder(h = 5, d1 = outer_diameter, d2 = outer_diameter - 2, $fn = 32);\n        \n        // Ensure inner bore reaches end\n        translate([0, 0, length - 6])\n            cylinder(h = 7, d = inner_diameter, $fn = 32);\n    }\n}\n\n// Assembly\nunion() {\n    // Main tube\n    translate([0, 0, mouthpiece_length])\n        main_tube();\n    \n    // Mouthpiece\n    translate([0, 0, 0])\n        mouthpiece();\n    \n    // Tone holes\n    translate([0, 0, mouthpiece_length])\n        tone_holes();\n    \n    // Decorative rings\n    translate([0, 0, mouthpiece_length])\n        decorative_rings();\n    \n    // Bottom end\n    translate([0, 0, mouthpiece_length])\n        bottom_end();\n}",
    "renders": true
  },
  {
    "musical_instrument": "qinqin",
    "openscad_code": "// Qinqin (Chinese plucked lute) – OpenSCAD, medium complexity\n// Overall length ≈ 90 mm, printable without overhangs\n\n// Wall thickness for printability\nwall = 1.5;\n\nmodule qinqin() {\n    // Main body (pear-shaped resonator)\n    difference() {\n        // Outer shell\n        scale([1, 0.65, 0.45])\n            sphere(d = 45, $fn = 60);\n        \n        // Hollow cavity\n        translate([0,0,-2])\n            scale([0.85, 0.5, 0.35])\n                sphere(d = 45, $fn = 60);\n    }\n\n    // Neck\n    translate([0, 0, 22])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 50, d1 = 12, d2 = 10, $fn = 16);\n            translate([0,0,-wall])\n                cylinder(h = 52, d1 = 12 - 2*wall, d2 = 10 - 2*wall, $fn = 16);\n        }\n\n    // Headstock (flat paddle)\n    translate([0, 0, 22 + 50])\n        rotate([0, 90, 0])\n        difference() {\n            cube([20, 2*wall, 18], center = true);\n            translate([0,0,-wall/2])\n                cube([18, 2*wall + 0.1, 16], center = true);\n        }\n\n    // Soundboard\n    translate([0,0,-0.5])\n        scale([1, 0.65, 1])\n            cylinder(h = wall, d = 45, $fn = 60);\n\n    // Sound hole (circular)\n    translate([0,0,0])\n        cylinder(h = wall + 0.1, d = 8, $fn = 32);\n\n    // Bridge\n    translate([0, -12, -0.5])\n        cube([18, 4, wall + 1], center = true);\n\n    // Frets – small rings around neck\n    for (i = [1:5]) {\n        translate([0, 0, 22 + i*7])\n            rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 2, d = 12, $fn = 16);\n                cylinder(h = 2.1, d = 10, $fn = 16);\n            }\n    }\n\n    // Tuning pegs (four pegs, two per side)\n    module peg(side) {\n        translate([0, 0, 22 + 50 + 6])\n            rotate([0, 90, 0])\n            mirror([side, 0, 0])\n            rotate([0, 0, 90])\n            translate([0, 9, 0])\n                cylinder(h = 10, d = 3, $fn = 8);\n    }\n    peg(1);\n    peg(-1);\n    translate([0, 0, 22 + 50 + 6])\n        rotate([0, 90, 0])\n        translate([0, 9, 0])\n            cylinder(h = 10, d = 3, $fn = 8);\n    translate([0, 0, 22 + 50 + 6])\n        rotate([0, 90, 0])\n        translate([0, -9, 0])\n            cylinder(h = 10, d = 3, $fn = 8);\n\n    // Tailpiece\n    translate([0, 12, -0.5])\n        cube([12, 3, wall + 1], center = true);\n}\n\nqinqin();",
    "renders": true
  },
  {
    "musical_instrument": "kouxian",
    "openscad_code": "// Kouxian – traditional Chinese jaw harp / mouth harp\n// Medium-complexity realistic model for 3D printing\n// Overall length ≈ 70 mm\n\n$fn = 36;\nth = 1.6;          // wall thickness for printing\ngap = 0.6;         // clearance for tongue movement\n\nmodule tongue() {\n    // main vibrating tongue\n    difference() {\n        translate([0, -4, 0]) cube([50, 8, th], center=true);\n        // rounded tip\n        translate([25-4, 0, 0]) sphere(4);\n        // taper\n        translate([-25+4, 0, 0]) cube([8, 6.5, th+0.2], center=true);\n    }\n    // thin stiffening rib along tongue\n    translate([0, 0, 0]) cube([48, 1, th-0.4], center=true);\n}\n\nmodule frame() {\n    // curved outer frame\n    difference() {\n        hull() {\n            translate([-12, 0, 0]) sphere(12);\n            translate([12, 0, 0]) sphere(12);\n        }\n        // window for tongue\n        translate([0, 0, -th]) cube([22, 8, th*3], center=true);\n    }\n    // ring grip\n    rotate([90,0,0]) cylinder(h=6, d1=14, d2=14, center=true);\n}\n\nmodule support() {\n    // bridge that holds tongue\n    translate([0, 0, -th/2]) cube([4, 8, th], center=true);\n}\n\nmodule kouxian() {\n    // assemble\n    union() {\n        frame();\n        \n        // tongue centered with gap\n        translate([0, 0, th/2 + gap/2]) tongue();\n        \n        // bridge support\n        support();\n        \n        // extra grip rings\n        for(i=[-1,1]) {\n            rotate([0,90*i,0])\n            translate([0,0,18]) cylinder(h=3, d=4, center=true);\n        }\n    }\n}\n\n// render\nkouxian();",
    "renders": true
  },
  {
    "musical_instrument": "hulusi",
    "openscad_code": "// Hulusi - Traditional Chinese gourd flute\n// Medium complexity realistic style\n\n// Parameters\n$fn = 32;\nwall_thickness = 1.5;\nmain_tube_dia = 8;\nmain_tube_len = 55;\ngourd_dia = 25;\ngourd_len = 30;\nfinger_hole_dia = 3;\nfinger_hole_spacing = 8;\n\n// Main gourd body\nmodule gourd_body() {\n    difference() {\n        // Main gourd shape - two intersecting spheres\n        union() {\n            translate([0, 0, gourd_len/2]) \n                scale([1, 1, 1.2]) \n                sphere(d=gourd_dia);\n            translate([0, 0, -gourd_len/2]) \n                scale([1, 1, 0.8]) \n                sphere(d=gourd_dia*0.9);\n        }\n        \n        // Hollow out the gourd\n        translate([0, 0, gourd_len/2]) \n            scale([1, 1, 1.2]) \n            sphere(d=gourd_dia-wall_thickness*2);\n        translate([0, 0, -gourd_len/2]) \n            scale([1, 1, 0.8]) \n            sphere(d=gourd_dia*0.9-wall_thickness*2);\n        \n        // Top opening for mouthpiece\n        translate([0, 0, gourd_len/2+2]) \n            cylinder(d1=main_tube_dia+2, d2=main_tube_dia, h=5);\n        \n        // Bottom opening for main tube\n        translate([0, 0, -gourd_len/2-2]) \n            cylinder(d1=main_tube_dia+2, d2=main_tube_dia, h=5);\n    }\n}\n\n// Main playing tube\nmodule main_tube() {\n    difference() {\n        // Tube body\n        cylinder(d=main_tube_dia, h=main_tube_len);\n        // Hollow tube\n        translate([0, 0, -wall_thickness]) \n            cylinder(d=main_tube_dia-wall_thickness*2, h=main_tube_len+wall_thickness*2);\n    }\n    \n    // Finger holes\n    for(i=[1:6]) {\n        rotate([0, 90, 0]) \n            translate([main_tube_len/2-10-i*finger_hole_spacing, 0, 0]) \n                rotate([90, 0, 0]) \n                    cylinder(d=finger_hole_dia, h=main_tube_dia+2, center=true);\n    }\n    \n    // Thumb hole\n    rotate([0, 0, 90]) \n        rotate([0, 90, 0]) \n            translate([main_tube_len/2-25, 0, 0]) \n                rotate([90, 0, 0]) \n                    cylinder(d=finger_hole_dia, h=main_tube_dia+2, center=true);\n}\n\n// Drone pipes\nmodule drone_pipe(offset, length, angle) {\n    translate([0, offset, 0]) {\n        rotate([0, angle, 0]) {\n            difference() {\n                cylinder(d=main_tube_dia*0.7, h=length);\n                translate([0, 0, -wall_thickness]) \n                    cylinder(d=main_tube_dia*0.7-wall_thickness*2, h=length+wall_thickness*2);\n            }\n        }\n    }\n}\n\n// Mouthpiece\nmodule mouthpiece() {\n    difference() {\n        // Mouthpiece cone\n        cylinder(d1=main_tube_dia*1.5, d2=main_tube_dia, h=10);\n        // Hollow cone\n        translate([0, 0, -wall_thickness]) \n            cylinder(d1=main_tube_dia*1.5-wall_thickness*2, d2=main_tube_dia-wall_thickness*2, h=10+wall_thickness*2);\n    }\n    \n    // Mouth opening\n    translate([0, 0, 5]) \n        rotate([90, 0, 0]) \n            cylinder(d=main_tube_dia*0.6, h=main_tube_dia*1.5, center=true);\n}\n\n// Assembly\ntranslate([0, 0, gourd_len/2+5]) \n    mouthpiece();\n\ntranslate([0, 0, 0]) \n    gourd_body();\n\ntranslate([0, 0, -gourd_len/2]) \n    main_tube();\n\n// Two drone pipes\ntranslate([0, 0, -gourd_len/2+5]) {\n    drone_pipe(main_tube_dia*1.2, main_tube_len*0.7, 15);\n    drone_pipe(-main_tube_dia*1.2, main_tube_len*0.6, -10);\n}",
    "renders": true
  },
  {
    "musical_instrument": "bawu",
    "openscad_code": "// Bawu (Chinese free-reed pipe) - medium complexity, 3D-printable\n// Overall length ~90 mm\n\n// Parameters\npipe_length = 85;\npipe_diameter = 12;\nwall = 1.5;\ntone_holes = 6;\nreed_length = 18;\nreed_width = 6;\nreed_thickness = 2;\n\n// Main pipe body\nmodule pipe_body() {\n    difference() {\n        // Outer tube\n        cylinder(h = pipe_length, d = pipe_diameter, $fn = 32);\n        // Inner bore\n        translate([0, 0, -0.1])\n            cylinder(h = pipe_length + 0.2, d = pipe_diameter - 2*wall, $fn = 32);\n    }\n}\n\n// Mouthpiece with reed cavity\nmodule mouthpiece() {\n    difference() {\n        // Mouthpiece outer\n        union() {\n            // Cylindrical part\n            cylinder(h = 10, d = pipe_diameter + 4, $fn = 32);\n            // Taper to pipe\n            translate([0, 0, 10])\n                cylinder(h1 = pipe_diameter + 4, h2 = pipe_diameter, h = 5, $fn = 32);\n        }\n        // Reed cavity\n        translate([0, 0, 5])\n            cube([reed_width + 2, reed_thickness + 1, reed_length], center = true);\n        // Air channel\n        translate([0, 0, -0.1])\n            cylinder(h = 16, d = 4, $fn = 16);\n    }\n}\n\n// Reed plate\nmodule reed() {\n    difference() {\n        // Reed plate\n        translate([0, 0, reed_length/2])\n            cube([reed_width, reed_thickness, reed_length], center = true);\n        // Reed tongue\n        translate([0, 0, reed_length/2 + 0.5])\n            cube([reed_width*0.8, reed_thickness - 0.2, reed_length*0.7], center = true);\n    }\n}\n\n// Tone holes\nmodule tone_holes() {\n    spacing = (pipe_length - 30) / (tone_holes - 1);\n    for(i = [0:tone_holes-1]) {\n        translate([0, pipe_diameter/2, 25 + i*spacing])\n            rotate([90, 0, 0])\n                cylinder(h = pipe_diameter, d = 4, $fn = 16);\n    }\n}\n\n// Finger rests\nmodule finger_rests() {\n    translate([0, pipe_diameter/2 + 2, pipe_length - 15])\n        cube([8, 3, 12], center = true);\n    translate([0, pipe_diameter/2 + 2, pipe_length - 25])\n        cube([8, 3, 12], center = true);\n}\n\n// Wind shield\nmodule wind_shield() {\n    difference() {\n        translate([0, 0, -5])\n            cylinder(h = 10, d = pipe_diameter + 8, $fn = 32);\n        translate([0, 0, -5.1])\n            cylinder(h = 10.2, d = pipe_diameter + 2, $fn = 32);\n    }\n}\n\n// Assembly\nunion() {\n    // Main pipe\n    pipe_body();\n    \n    // Mouthpiece at top\n    translate([0, 0, pipe_length - 15])\n        mouthpiece();\n    \n    // Reed inside mouthpiece\n    translate([0, 0, pipe_length - 10])\n        reed();\n    \n    // Wind shield\n    translate([0, 0, pipe_length - 15])\n        wind_shield();\n    \n    // Tone holes on front\n    tone_holes();\n    \n    // Finger rests on back\n    finger_rests();\n}",
    "renders": true
  },
  {
    "musical_instrument": "khene",
    "openscad_code": "// Khene (Laotian mouth organ) - Medium complexity realistic model\n// Approx. 85 mm wide x 45 mm deep x 35 mm tall\n\n// Global parameters\n$fn = 24;\nwall = 1.2;\npipe_od = 5.2;\npipe_len_max = 32;\npipe_len_min = 18;\nreed_len = 8;\n\nmodule pipe(len, id = 3.8) {\n    difference() {\n        cylinder(h = len, d = pipe_od);\n        translate([0, 0, -1])\n            cylinder(h = len + 2, d = id);\n    }\n}\n\nmodule reed() {\n    // Simple free reed plate\n    translate([0, 0, reed_len/2])\n        cube([pipe_od, 0.3, reed_len], center = true);\n}\n\nmodule pipe_row(count, start_len, step_len, offset) {\n    for(i = [0 : count-1]) {\n        len = start_len - i*step_len;\n        translate([offset + i*pipe_od*1.05, 0, len/2]) {\n            pipe(len);\n            translate([0, pipe_od/2 + 0.3, 0])\n                reed();\n        }\n    }\n}\n\n// Wind reservoir box (blow chamber)\nmodule reservoir() {\n    difference() {\n        // Main box\n        translate([0, 0, 10])\n            cube([80, 40, 20], center = true);\n        // Hollow inside\n        translate([0, 0, 10])\n            cube([80 - 2*wall, 40 - 2*wall, 20 - wall], center = true);\n        // Mouth opening\n        translate([-40 - 1, 0, 10])\n            rotate([0, 90, 0])\n            cylinder(h = 8, d = 10);\n    }\n}\n\n// Left pipe row (longest to shortest)\nmodule left_pipes() {\n    pipe_row(8, pipe_len_max, 1.8, -38);\n}\n\n// Right pipe row\nmodule right_pipes() {\n    pipe_row(8, pipe_len_max - 1, 1.8, 8);\n}\n\n// Support braces between pipes\nmodule braces() {\n    // Front brace\n    translate([0, 20, 5])\n        cube([78, 2, 10], center = true);\n    // Rear brace\n    translate([0, -20, 5])\n        cube([78, 2, 10], center = true);\n}\n\n// Main assembly\nreservoir();\nleft_pipes();\nright_pipes();\nbraces();\n\n// Small decorative end caps\nfor(i = [0:1]) {\n    side = i == 0 ? -1 : 1;\n    translate([side*38, 0, pipe_len_max + 2])\n        cylinder(h = 4, d = pipe_od + 2);\n}",
    "renders": true
  },
  {
    "musical_instrument": "sheng",
    "openscad_code": "// Realistic medium-complexity 3D-printable Sheng model\n// Dimensions scaled to ~70 mm width\n\n// Constants\nbody_r = 15;            // Main body radius\nbody_h = 25;            // Main body height\nwind_r = 5;             // Wind chamber radius\nwind_h = 15;            // Wind chamber height\npipe_n = 17;            // Number of pipes\npipe_min_h = 30;        // Shortest pipe\npipe_max_h = 55;        // Tallest pipe\npipe_r = 2.5;           // Pipe radius\nwall = 1.5;             // 3D-print wall thickness\n\nmodule body() {\n    difference() {\n        // Main wind-chest\n        union() {\n            cylinder(h=body_h, r=body_r, $fn=64);\n            translate([0,0,body_h])\n                cylinder(h=wind_h, r=wind_r, $fn=32);\n        }\n        // Hollow inside\n        translate([0,0,-1])\n            cylinder(h=body_h+2, r=body_r-wall, $fn=64);\n        // Mouthpiece hole\n        translate([0,0,body_h+wind_h-1])\n            cylinder(h=3, r=3, $fn=32);\n    }\n}\n\nmodule mouthpiece() {\n    translate([0,0,body_h+wind_h]) rotate([90,0,0])\n    difference() {\n        union() {\n            cylinder(h=20, r1=3, r2=2, $fn=32);\n            translate([0,0,20])\n                cylinder(h=5, r=2, $fn=32);\n        }\n        cylinder(h=25, r=0.9, $fn=32);\n    }\n}\n\nmodule pipe(h, angle, idx) {\n    // Position on circular crown\n    a = 360/pipe_n * idx;\n    x = (body_r-1) * cos(a);\n    y = (body_r-1) * sin(a);\n    translate([x,y,body_h])\n    rotate([0,90-angle,180+a]) {\n        difference() {\n            cylinder(h=h, r=pipe_r, $fn=32);\n            translate([0,0,-1])\n                cylinder(h=h+2, r=pipe_r-wall, $fn=32);\n        }\n        // Finger hole near top\n        translate([h-6,0,0]) rotate([0,90,0])\n            cylinder(h=pipe_r*2, r=1.2, $fn=16);\n    }\n}\n\nmodule pipes() {\n    for(i=[0:pipe_n-1]) {\n        // Vary height for realistic pipe lengths\n        h = pipe_min_h + (pipe_max_h-pipe_min_h)*(i/(pipe_n-1));\n        // Slight outward tilt\n        pipe(h, 5+5*sin(i*25), i);\n    }\n}\n\nmodule base_ring() {\n    translate([0,0,-2]) difference() {\n        cylinder(h=3, r=body_r+2, $fn=64);\n        cylinder(h=4, r=body_r, $fn=64);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    mouthpiece();\n    pipes();\n    base_ring();\n}",
    "renders": true
  },
  {
    "musical_instrument": "sho",
    "openscad_code": "// Sho - Japanese traditional footwear\n// Medium complexity, realistic style\n\n$fn = 50;\n\n// Overall dimensions\nsho_length = 80;\nsho_width = 30;\nsho_height = 25;\nsole_thickness = 5;\nwall_thickness = 2;\n\nmodule sole_base() {\n    // Main sole with rounded edges\n    difference() {\n        translate([0, 0, sole_thickness/2])\n            scale([1, 0.7, 0.3])\n                sphere(d = sho_width);\n        \n        // Remove bottom half\n        translate([0, 0, -1])\n            cube([sho_length*2, sho_width*2, sole_thickness], center=true);\n    }\n    \n    // Add heel lift\n    translate([sho_length/4, 0, sole_thickness])\n        scale([0.5, 0.9, 0.5])\n            cube([sho_length/3, sho_width*0.9, sole_thickness], center=true);\n}\n\nmodule sole_tread() {\n    // Simple tread pattern\n    for (x = [-sho_length/2 + 5:5:sho_length/2 - 5]) {\n        for (y = [-sho_width/2 + 3:3:sho_width/2 - 3]) {\n            translate([x, y, 0])\n                cylinder(h = 1, d = 2);\n        }\n    }\n}\n\nmodule upper_straps() {\n    // First strap (big toe separate)\n    translate([-sho_length/2 + 15, -sho_width/4, sole_thickness + 2])\n        rotate([0, 90, 0])\n            cylinder(h = sho_width/3, d = wall_thickness + 2);\n    \n    // Second strap\n    translate([-sho_length/2 + 35, 0, sole_thickness + 2])\n        rotate([0, 90, 0])\n            cylinder(h = sho_width/2, d = wall_thickness + 2);\n    \n    // Third strap\n    translate([-sho_length/2 + 55, sho_width/4, sole_thickness + 2])\n        rotate([0, 90, 0])\n            cylinder(h = sho_width/3, d = wall_thickness + 2);\n}\n\nmodule footbed() {\n    // Contoured footbed\n    difference() {\n        translate([0, 0, sole_thickness + wall_thickness/2])\n            scale([1, 0.9, 0.2])\n                sphere(d = sho_width * 0.95);\n        \n        // Remove center for foot shape\n        translate([0, 0, sole_thickness - 1])\n            cube([sho_length - 10, sho_width - 8, wall_thickness + 2], center=true);\n    }\n    \n    // Toe ridge\n    translate([-sho_length/2 + 10, 0, sole_thickness + wall_thickness])\n        rotate([0, 90, 0])\n            cylinder(h = sho_width * 0.8, d = wall_thickness, center=true);\n}\n\nmodule side_walls() {\n    // Left wall\n    translate([0, -sho_width/2 + wall_thickness/2, sole_thickness + sho_height/2])\n        cube([sho_length - 5, wall_thickness, sho_height - wall_thickness], center=true);\n    \n    // Right wall\n    translate([0, sho_width/2 - wall_thickness/2, sole_thickness + sho_height/2])\n        cube([sho_length - 5, wall_thickness, sho_height - wall_thickness], center=true);\n    \n    // Back wall\n    translate([sho_length/2 - 5, 0, sole_thickness + sho_height/2])\n        cube([wall_thickness, sho_width - wall_thickness, sho_height - wall_thickness], center=true);\n}\n\nmodule thong_base() {\n    // Base for thong attachment\n    translate([-sho_length/2 + 20, 0, sole_thickness + wall_thickness])\n        cylinder(h = wall_thickness, d = 6);\n}\n\n// Assembly\nunion() {\n    // Sole assembly\n    union() {\n        sole_base();\n        sole_tread();\n    }\n    \n    // Upper assembly\n    union() {\n        footbed();\n        side_walls();\n        thong_base();\n        upper_straps();\n    }\n}",
    "renders": true
  },
  {
    "musical_instrument": "ryuteki",
    "openscad_code": "// Ryuteki (Japanese transverse bamboo flute) - medium complexity realistic style\n// Designed for 3D printing, no overhangs, proper wall thickness\n\nwall = 1.2; // 3D printable wall thickness\nscale_factor = 0.7; // Scale down for 3D printing\n\nmodule ryuteki_body() {\n    // Main bamboo tube segments\n    difference() {\n        // Outer tube\n        cylinder(h=70*scale_factor, r1=5*scale_factor, r2=4.5*scale_factor, $fn=32);\n        \n        // Inner bore\n        translate([0, 0, -0.1])\n            cylinder(h=70.2*scale_factor, r1=3.8*scale_factor, r2=3.3*scale_factor, $fn=32);\n    }\n    \n    // Node rings (bamboo joints)\n    for(i = [0:1]) {\n        translate([0, 0, (20 + i*25)*scale_factor])\n            difference() {\n                cylinder(h=3*scale_factor, r=5.2*scale_factor, $fn=32);\n                cylinder(h=3.2*scale_factor, r=4.8*scale_factor, $fn=32);\n            }\n    }\n}\n\nmodule mouthpiece() {\n    // Beveled mouthpiece\n    difference() {\n        cylinder(h=8*scale_factor, r1=5.5*scale_factor, r2=5*scale_factor, $fn=32);\n        // Mouth hole\n        rotate([90, 0, 0])\n            translate([0, 0, -5.5*scale_factor])\n                cube([6*scale_factor, 3*scale_factor, 11*scale_factor], center=true);\n    }\n    \n    // Utaguchi (blowing edge)\n    translate([0, 5*scale_factor, 7.5*scale_factor])\n        rotate([90, 0, 0])\n            difference() {\n                cube([5*scale_factor, 2*scale_factor, 1.5*scale_factor], center=true);\n                translate([0, 0, -0.5])\n                    cube([4.8*scale_factor, 1.8*scale_factor, 1.3*scale_factor], center=true);\n            }\n}\n\nmodule finger_holes() {\n    // First three front holes (closer spacing)\n    for(i = [0:2]) {\n        translate([0, 4.8*scale_factor, (30 + i*8)*scale_factor])\n            rotate([90, 0, 0])\n                cylinder(h=wall*2, r=1.5*scale_factor, $fn=16);\n    }\n    \n    // Fourth front hole (wider spacing)\n    translate([0, 4.8*scale_factor, 56*scale_factor])\n        rotate([90, 0, 0])\n            cylinder(h=wall*2, r=1.5*scale_factor, $fn=16);\n    \n    // Back thumb hole\n    translate([0, -4.8*scale_factor, 45*scale_factor])\n        rotate([90, 0, 0])\n            cylinder(h=wall*2, r=1.3*scale_factor, $fn=16);\n}\n\nmodule decorative_details() {\n    // Simple ring decorations\n    translate([0, 0, 10*scale_factor])\n        cylinder(h=1*scale_factor, r=5.3*scale_factor, $fn=32);\n    \n    translate([0, 0, 60*scale_factor])\n        cylinder(h=1*scale_factor, r=5.3*scale_factor, $fn=32);\n}\n\n// Assemble the ryuteki\nunion() {\n    ryuteki_body();\n    translate([0, 0, -8*scale_factor])\n        mouthpiece();\n    finger_holes();\n    decorative_details();\n}",
    "renders": true
  },
  {
    "musical_instrument": "hichiriki",
    "openscad_code": "// Hichiriki - Japanese double-reed woodwind\n// Medium complexity, realistic style, 3D printable\n\nwall = 1.2;          // Wall thickness (mm)\ndiam = 12;          // Main bore diameter (mm)\nL_body = 75;        // Total body length (mm)\n\n// Main body tube with slight taper\nmodule body() {\n    // Main cylindrical section\n    difference() {\n        cylinder(h=L_body*0.7, d1=diam+2, d2=diam+1, $fn=32);\n        translate([0,0,-1])\n            cylinder(h=L_body*0.7+2, d1=diam, d2=diam-1, $fn=32);\n    }\n    \n    // Upper flared section\n    translate([0,0,L_body*0.7])\n    difference() {\n        cylinder(h=L_body*0.3, d1=diam+1, d2=diam+3, $fn=32);\n        translate([0,0,-1])\n            cylinder(h=L_body*0.3+2, d1=diam-1, d2=diam+1, $fn=32);\n    }\n}\n\n// Finger holes\nmodule finger_holes() {\n    // 7 front holes\n    for(i=[0:6]) {\n        angle = 15 + i*12;\n        translate([0,0,L_body*0.15 + i*8])\n        rotate([90,0,0])\n            cylinder(h=wall+1, d=2.5, $fn=16);\n    }\n    \n    // 2 back holes (thumb holes)\n    translate([0,-(diam/2+wall/2), L_body*0.3])\n    rotate([0,90,0])\n        cylinder(h=wall+1, d=2.5, $fn=16);\n        \n    translate([0,-(diam/2+wall/2), L_body*0.4])\n    rotate([0,90,0])\n        cylinder(h=wall+1, d=2.5, $fn=16);\n}\n\n// Reed pipe connection\nmodule reed_socket() {\n    translate([0,0,L_body])\n    difference() {\n        cylinder(h=8, d1=diam+3, d2=diam+2, $fn=32);\n        translate([0,0,-1])\n            cylinder(h=10, d1=diam+1, d2=diam, $fn=32);\n    }\n}\n\n// Decorative rings\nmodule rings() {\n    // Upper ring\n    translate([0,0,L_body*0.75])\n    difference() {\n        cylinder(h=2, d=diam+4, $fn=32);\n        cylinder(h=2.2, d=diam+2, $fn=32);\n    }\n    \n    // Lower ring\n    translate([0,0,L_body*0.25])\n    difference() {\n        cylinder(h=2, d=diam+4, $fn=32);\n        cylinder(h=2.2, d=diam+2, $fn=32);\n    }\n}\n\n// Bottom bell flare\nmodule bell() {\n    translate([0,0,-2])\n    difference() {\n        cylinder(h=5, d1=diam+2, d2=diam+4, $fn=32);\n        translate([0,0,-1])\n            cylinder(h=7, d1=diam, d2=diam+2, $fn=32);\n    }\n}\n\n// Assemble the hichiriki\nunion() {\n    body();\n    reed_socket();\n    bell();\n    rings();\n    \n    // Cut finger holes\n    translate([0,0,0])\n    finger_holes();\n}\n\n// Add small air channel for reed (non-functional, aesthetic)\ntranslate([0,0,L_body+8])\nrotate([0,90,0])\n    cylinder(h=diam+2, d=4, $fn=16);",
    "renders": true
  },
  {
    "musical_instrument": "otsuzumi",
    "openscad_code": "// Otsuzumi (Japanese hourglass drum) - Medium complexity realistic style\n// Designed for 3D printing, approximately 70mm diameter\n\n$fn = 48;  // Smooth curves for printing\n\n// Main drum body\nmodule drum_body() {\n    difference() {\n        // Hourglass shape from intersecting cones\n        intersection() {\n            // Upper cone\n            cylinder(h1=30, r1=35, r2=25);\n            // Lower cone (inverted)\n            translate([0, 0, -30])\n                cylinder(h1=30, r1=25, r2=35);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -5])\n            scale([0.8, 0.8, 1.1])\n                intersection() {\n                    cylinder(h1=30, r1=35, r2=25);\n                    translate([0, 0, -30])\n                        cylinder(h1=30, r1=25, r2=35);\n                }\n    }\n}\n\n// Drumhead attachment ring\nmodule drumhead_ring(height=3) {\n    difference() {\n        // Outer ring\n        cylinder(h=height, r1=36, r2=36);\n        // Inner hole\n        cylinder(h=height+1, r1=30, r2=30);\n    }\n}\n\n// Decorative cord wraps\nmodule cord_wrap(count=8, radius=33) {\n    for(i=[0:count-1]) {\n        rotate([0, 0, i*360/count])\n            translate([radius, 0, -2])\n                rotate([90, 0, 0])\n                    difference() {\n                        // Main cord\n                        cylinder(h=6, r=2, $fn=8);\n                        // Groove for realism\n                        cylinder(h=6.1, r=1.5, $fn=8);\n                    }\n    }\n}\n\n// Tensioning ropes\nmodule tension_rope() {\n    // Create 4 rope segments\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([0, 35, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=70, r=1.5, $fn=6);\n    }\n}\n\n// Drumheads (thin membranes)\nmodule drumhead() {\n    difference() {\n        cylinder(h=0.5, r=35);\n        cylinder(h=0.6, r=30);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 30])\n    drumhead();\n    \ntranslate([0, 0, 0])\n    drum_body();\n\ntranslate([0, 0, 30])\n    drumhead_ring();\n\ntranslate([0, 0, -3])\n    drumhead_ring();\n\ntranslate([0, 0, -3.5])\n    drumhead();\n\ncord_wrap();\n\ntranslate([0, 0, 15])\n    tension_rope();",
    "renders": true
  },
  {
    "musical_instrument": "fue",
    "openscad_code": "// Fue (Japanese flute) - Realistic Style, Medium Complexity\n// Overall length: 90mm, suitable for 3D printing\n\n// Parameters\nflute_length = 90;\nflute_outer_diameter = 18;\nwall_thickness = 2;\nbore_diameter = flute_outer_diameter - 2 * wall_thickness;\n\n// Colors\n%translate([0,0,-30]) color(\"white\") cube([1,1,1]);  // White color hint\n\n// Main body\nmodule flute_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=flute_length, d=flute_outer_diameter, $fn=50);\n        \n        // Bore hole\n        translate([0,0,-1]) cylinder(h=flute_length+2, d=bore_diameter, $fn=50);\n        \n        // Mouth hole (utaguchi)\n        translate([flute_length-25, 0, flute_outer_diameter/2-2]) \n            rotate([90,0,0]) cylinder(h=10, d=10, $fn=30);\n        \n        // Finger holes\n        for(i=[0:6]) {\n            rotate([0,0,i*180/6]) \n                translate([flute_length-35-i*7, 0, 0])\n                    rotate([0,90,0]) \n                        cylinder(h=flute_outer_diameter, d=7, $fn=20);\n        }\n        \n        // Thumb hole\n        translate([flute_length-45, 0, -flute_outer_diameter/2+2])\n            rotate([90,0,0]) cylinder(h=10, d=7, $fn=20);\n    }\n}\n\n// Mouthpiece cut\nmodule mouthpiece_cut() {\n    difference() {\n        // Keep main body\n        flute_body();\n        \n        // Diagonal cut for utaguchi\n        translate([flute_length-25, -flute_outer_diameter, flute_outer_diameter/2-2])\n            rotate([0,35,0]) cube([flute_outer_diameter*2, flute_outer_diameter*2, 10]);\n        \n        // Chamfer edges\n        translate([flute_length-20, -flute_outer_diameter, -flute_outer_diameter/2])\n            rotate([0,30,0]) cube([flute_outer_diameter*2, flute_outer_diameter*2, 5]);\n    }\n}\n\n// Decorative rings\nmodule decorative_rings() {\n    for(pos=[20, 40, 60]) {\n        translate([pos, 0, 0])\n            rotate([90,0,0])\n                difference() {\n                    cylinder(h=2, d=flute_outer_diameter+1, $fn=50);\n                    cylinder(h=3, d=flute_outer_diameter-1, $fn=50);\n                }\n    }\n}\n\n// Assembly\nunion() {\n    mouthpiece_cut();\n    decorative_rings();\n}\n\n// End cap detail\ntranslate([5,0,0])\n    rotate([90,0,0])\n        difference() {\n            cylinder(h=3, d=flute_outer_diameter+0.5, $fn=50);\n            cylinder(h=4, d=bore_diameter, $fn=50);\n        }",
    "renders": true
  },
  {
    "musical_instrument": "shino",
    "openscad_code": "// Shino - Medium complexity realistic style\n// Overall size ~80mm tall\n\n// Parameters\nbody_height = 50;\nbody_radius = 30;\nneck_height = 15;\nneck_radius = 12;\nhead_radius = 20;\nleg_height = 35;\nleg_radius = 8;\ntail_thickness = 8;\ntail_length = 40;\near_height = 15;\near_width = 8;\near_thickness = 5;\neye_radius = 4;\nnose_radius = 2;\nwall_thickness = 2;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main rounded body\n        scale([1, 1.2, 1.3])\n        sphere(d=body_radius*2);\n        \n        // Hollow interior\n        scale([1, 1.2, 1.3])\n        sphere(d=(body_radius-wall_thickness)*2);\n        \n        // Neck hole\n        translate([0, 0, body_height/2])\n        cylinder(h=wall_thickness*2, r=neck_radius+wall_thickness, $fn=20);\n        \n        // Tail hole\n        rotate([0, 90, 0])\n        translate([0, 0, -body_radius])\n        cylinder(h=wall_thickness*3, r=tail_thickness, $fn=16);\n        \n        // Leg holes\n        for(i=[-1, 1]) {\n            translate([i*body_radius/1.5, 0, -body_height/2])\n            rotate([0, 90, 0])\n            cylinder(h=wall_thickness*3, r=leg_radius, $fn=16);\n        }\n    }\n}\n\n// Neck\nmodule neck() {\n    difference() {\n        cylinder(h=neck_height, r1=neck_radius, r2=neck_radius*0.8, $fn=20);\n        translate([0, 0, wall_thickness])\n        cylinder(h=neck_height, r1=neck_radius-wall_thickness, r2=neck_radius*0.8-wall_thickness, $fn=20);\n    }\n}\n\n// Head\nmodule head() {\n    difference() {\n        sphere(d=head_radius*2);\n        \n        // Hollow\n        sphere(d=(head_radius-wall_thickness)*2);\n        \n        // Neck hole\n        translate([0, 0, -head_radius])\n        cylinder(h=wall_thickness*2, r=neck_radius*0.8+wall_thickness, $fn=20);\n    }\n}\n\n// Leg\nmodule leg() {\n    difference() {\n        // Main leg\n        cylinder(h=leg_height, r=leg_radius, $fn=16);\n        \n        // Hollow\n        translate([0, 0, wall_thickness])\n        cylinder(h=leg_height-wall_thickness, r=leg_radius-wall_thickness, $fn=16);\n        \n        // Foot\n        translate([0, 0, leg_height])\n        sphere(d=leg_radius*2.2);\n    }\n}\n\n// Tail\nmodule tail() {\n    difference() {\n        // Curved tail\n        rotate([0, 90, 0])\n        translate([0, 0, -tail_length/2])\n        cylinder(h=tail_length, r=tail_thickness, $fn=16);\n        \n        // Hollow\n        rotate([0, 90, 0])\n        translate([0, 0, -tail_length/2])\n        cylinder(h=tail_length-wall_thickness, r=tail_thickness-wall_thickness, $fn=16);\n        \n        // Curve\n        translate([0, tail_length*0.3, -tail_length*0.3])\n        sphere(d=tail_thickness*2);\n    }\n}\n\n// Ear\nmodule ear() {\n    difference() {\n        // Ear shape\n        scale([1, 0.5, 1.5])\n        sphere(d=ear_height);\n        \n        // Inner ear\n        scale([1, 0.5, 1.5])\n        sphere(d=ear_height-wall_thickness);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    sphere(d=eye_radius*2);\n}\n\n// Nose\nmodule nose() {\n    sphere(d=nose_radius*2);\n}\n\n// Main assembly\ntranslate([0, 0, leg_height])\nunion() {\n    // Body parts\n    body();\n    \n    // Neck\n    translate([0, 0, body_height/2])\n    neck();\n    \n    // Head\n    translate([0, 0, body_height/2 + neck_height + head_radius])\n    head();\n    \n    // Ears\n    translate([-head_radius/2, 0, body_height/2 + neck_height + head_radius*1.5])\n    rotate([0, 30, -30])\n    ear();\n    \n    translate([head_radius/2, 0, body_height/2 + neck_height + head_radius*1.5])\n    rotate([0, 30, 30])\n    mirror([1, 0, 0])\n    ear();\n    \n    // Eyes\n    translate([-head_radius/2.5, -head_radius*0.8, body_height/2 + neck_height + head_radius*0.8])\n    eyes();\n    \n    translate([head_radius/2.5, -head_radius*0.8, body_height/2 + neck_height + head_radius*0.8])\n    eyes();\n    \n    // Nose\n    translate([0, -head_radius*1.1, body_height/2 + neck_height + head_radius*0.7])\n    nose();\n}\n\n// Legs\nfor(i=[-1, 1]) {\n    translate([i*body_radius/1.5, 0, 0])\n    leg();\n}\n\n// Tail\ntranslate([0, 0, 0])\nrotate([0, 0, 45])\nrotate([0, 30, 0])\ntail();",
    "renders": true
  },
  {
    "musical_instrument": "nokan",
    "openscad_code": "// Nokan (Japanese Shakuhachi Mouthpiece) - Realistic Medium Complexity\n// Approx 80mm length, 3D printable with no overhangs\n\n// Parameters\n$fn = 50;\nbody_length = 78;\nbody_diameter = 22;\nwall_thickness = 2;\nutaguchi_angle = 30;\nbore_diameter = 18;\nedge_width = 8;\n\n// Main body module\nmodule nokan_body() {\n    // Outer shell\n    difference() {\n        // Main tube\n        cylinder(h = body_length, d = body_diameter, center = false);\n        \n        // Inner bore (slightly tapered)\n        translate([0, 0, -1])\n            cylinder(h = body_length + 2, d1 = bore_diameter, d2 = bore_diameter - 1, center = false);\n    }\n    \n    // Reinforcement rings\n    for(i = [0:15:body_length-15]) {\n        translate([0, 0, i])\n            cylinder(h = 3, d = body_diameter + 2, center = false);\n    }\n}\n\n// Utaguchi (blowing edge)\nmodule utaguchi() {\n    // Base mount\n    translate([0, body_diameter/2, body_length - 25])\n        rotate([90, 0, 0])\n            cylinder(h = 12, d = body_diameter + 6, center = false);\n    \n    // Cutting edge\n    translate([0, body_diameter/2 + 6, body_length - 19])\n        rotate([90, 0, 0])\n            rotate([0, utaguchi_angle, 0])\n                cube([edge_width, 6, 0.5], center = true);\n    \n    // Air channel\n    translate([0, body_diameter/2 + 5.5, body_length - 22])\n        rotate([90, 0, 0])\n            cube([edge_width - 2, 10, 1], center = true);\n}\n\n// Finger holes\nmodule finger_holes() {\n    // Hole positions (traditional spacing)\n    hole_positions = [\n        [0, 0, 45],      // Thumb hole\n        [0, 0, 35],      // 1st hole\n        [0, 0, 25],      // 2nd hole\n        [0, 0, 15],      // 3rd hole\n        [0, 0, 5],       // 4th hole\n        [0, body_diameter/2 - 2, 65]  // Back hole\n    ];\n    \n    for(pos = hole_positions) {\n        translate(pos)\n            rotate([90, 0, 0])\n                cylinder(h = body_diameter, d = 8, center = true, $fn = 8);\n    }\n}\n\n// Decorative inlay rings\nmodule inlay_rings() {\n    colors = [\"DarkRed\", \"Ivory\", \"Black\"];\n    \n    for(i = [0:len(colors)-1]) {\n        color(colors[i])\n        translate([0, 0, 10 + i*5])\n            cylinder(h = 1.5, d = body_diameter + 0.5, center = false);\n    }\n}\n\n// Joint wrap detail\nmodule joint_wrap() {\n    translate([0, 0, body_length - 35])\n        for(i = [0:5:20]) {\n            rotate([0, 0, i*5])\n                translate([body_diameter/2 + 1, 0, 0])\n                    cube([1, 0.5, 20], center = true);\n        }\n}\n\n// Main assembly\nunion() {\n    nokan_body();\n    utaguchi();\n    finger_holes();\n    inlay_rings();\n    joint_wrap();\n}",
    "renders": true
  },
  {
    "musical_instrument": "tsuri",
    "openscad_code": "// Realistic medium-complexity fishing tsuri (lure) – OpenSCAD\n// Overall length ≈ 60 mm, designed for FDM printing (no steep overhangs)\n\n$fn = 32;           // Smooth curves\nwall = 1.2;         // 3-perimeter shell (0.4 mm nozzle)\n\n// Main module\nmodule tsuri() {\n    // Lip at front (dives lure, printable flat on bed)\n    lip();\n    \n    // Central body\n    body();\n    \n    // Rear weighted tail section\n    tail();\n    \n    // Treble hook eyelets (three points)\n    eyelet([ 8,  0, -3]);   // belly\n    eyelet([ 0,  0,  0]);   // front / line tie\n    eyelet([-22, 0, -2]);   // tail\n    \n    // Painted gill plate detail\n    gill();\n}\n\n// Front diving lip (polycarbonate-style)\nmodule lip() {\n    translate([8, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        // Main lip blade\n        scale([1, 0.2, 1]) \n        cylinder(h = 15, r = 8);\n        \n        // Screw hole for printing clearance\n        translate([0, 0, -1])\n        cylinder(h = 17, r = 1.5);\n    }\n}\n\n// Fish-shaped body\nmodule body() {\n    hull() {\n        // Front round shoulder\n        translate([4, 0, 0])\n        sphere(d = 12);\n        \n        // Mid section\n        translate([-6, 0, 0])\n        sphere(d = 10);\n        \n        // Tail taper\n        translate([-15, 0, 0])\n        sphere(d = 8);\n    }\n}\n\n// Tail weight chamber (lead insert printable hollow)\nmodule tail() {\n    difference() {\n        // Weight pod\n        translate([-22, 0, 0])\n        scale([1.5, 1, 0.8])\n        sphere(d = 9);\n        \n        // Hollow cavity for inserting lead\n        translate([-22, 0, 0])\n        scale([1.5, 1, 0.8])\n        sphere(d = 9 - wall*2);\n    }\n}\n\n// Eyelets (simple printable loops)\nmodule eyelet(pos) {\n    translate(pos)\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 6, r = 2);\n        cylinder(h = 7, r = 0.8);\n    }\n}\n\n// Gill plate recess for paint mask\nmodule gill() {\n    translate([-2, 5, 0])\n    rotate([0, 90, 0])\n    scale([1, 1, 0.3])\n    cylinder(h = 8, r = 4);\n}\n\n// Render\ntsuri();",
    "renders": true
  },
  {
    "musical_instrument": "kucho",
    "openscad_code": "// Kucho (Korean traditional flute)\n// Realistic style with medium complexity\n\n// Overall dimensions\nlength = 85;\nbody_d = 18;\nwall_thick = 2;\n\n// Create the main body of the kucho\nmodule kucho_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h=length, d=body_d, $fn=64);\n        \n        // Hollow out the inside\n        translate([0, 0, -1])\n            cylinder(h=length+2, d=body_d-2*wall_thick, $fn=64);\n        \n        // Mouthpiece opening\n        translate([0, 0, -1])\n            rotate([90, 0, 0])\n                cylinder(h=body_d/2, d=6, $fn=32);\n        \n        // Finger holes - 6 main holes\n        for(i=[0:5]) {\n            angle = 30 + i*12;\n            translate([0, 0, 15 + i*10])\n                rotate([0, 0, angle])\n                    translate([(body_d-2)/2, 0, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h=wall_thick+2, d=4, $fn=16);\n        }\n        \n        // Thumb hole on back\n        translate([0, 0, 25])\n            rotate([0, 0, 180])\n                translate([(body_d-2)/2, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=wall_thick+2, d=4, $fn=16);\n    }\n}\n\n// Windway and labium\nmodule mouthpiece() {\n    union() {\n        // Windway cover\n        translate([-body_d/2, 0, 0])\n            cube([body_d/2, 8, 6]);\n        \n        // Labium edge\n        translate([body_d/2-3, 0, 3])\n            cube([3, 8, 3]);\n        \n        // Windway channel\n        translate([body_d/2-5, -3, 1])\n            cube([5, 6, 2]);\n    }\n}\n\n// Decorative rings\nmodule decorative_rings() {\n    for(i=[0:1]) {\n        pos = i == 0 ? 12 : length-12;\n        translate([0, 0, pos])\n            cylinder(h=3, d=body_d+4, $fn=64);\n    }\n}\n\n// End cap\nmodule end_cap() {\n    difference() {\n        translate([0, 0, length])\n            cylinder(h=8, d=body_d-2, $fn=64);\n        \n        translate([0, 0, length-1])\n            cylinder(h=10, d=body_d-6, $fn=64);\n    }\n}\n\n// Assembly\nunion() {\n    kucho_body();\n    \n    // Add mouthpiece features\n    translate([0, 0, 0])\n        mouthpiece();\n    \n    // Add decorative rings\n    decorative_rings();\n    \n    // Add end cap\n    end_cap();\n}",
    "renders": true
  }
]