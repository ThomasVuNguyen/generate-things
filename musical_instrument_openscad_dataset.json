[
  {
    "musical_instrument": "guitar",
    "openscad_code": "// Guitar - Realistic style, medium complexity\n// Overall length ~90mm, printable at 1:1 scale\n\n$fn = 32;  // Smooth curves\nbody_t = 2.5;  // Wall thickness\n\nmodule body() {\n    // Main guitar body shape\n    hull() {\n        // Upper bout\n        translate([-15, 30, 0]) scale([0.8, 1, 1]) sphere(d=25);\n        // Lower bout\n        translate([-20, -25, 0]) scale([1.2, 1, 1]) sphere(d=35);\n        // Waist\n        translate([-5, 5, 0]) scale([0.6, 0.8, 1]) sphere(d=20);\n    }\n}\n\nmodule sound_hole() {\n    // Sound hole in center\n    translate([0, 0, body_t/2]) cylinder(h=body_t, d=10, $fn=64);\n}\n\nmodule bridge() {\n    // Bridge for strings\n    translate([0, -20, 0]) {\n        difference() {\n            cube([20, 6, 1.5], center=true);\n            for(i = [-2:1:2]) {\n                translate([i*3.5, 0, 0.5]) cylinder(h=2, d=1.5);\n            }\n        }\n    }\n}\n\nmodule neck() {\n    // Guitar neck\n    translate([0, 35, 0]) {\n        // Neck shaft\n        cube([6, 45, 3.5], center=true);\n        \n        // Headstock\n        translate([0, 27, 0]) {\n            cube([12, 18, 2.5], center=true);\n        }\n        \n        // Nut\n        translate([0, 19, 2.5]) cube([7, 1, 0.5], center=true);\n    }\n}\n\nmodule frets() {\n    // Frets along neck\n    for(i = [0:18]) {\n        y = 22 + i * 2.2;\n        scale_factor = 1 - (i * 0.015);\n        translate([0, y, 3.5]) scale([scale_factor, 1, 1]) cube([5.5, 0.5, 0.3], center=true);\n    }\n}\n\nmodule tuners() {\n    // Tuning pegs on headstock\n    for(i = [-2:1:2]) {\n        // Left side\n        translate([-8, 35 + i*3.5, 0]) rotate([90, 0, 0]) cylinder(h=4, d=2);\n        // Right side\n        translate([8, 35 + i*3.5, 0]) rotate([90, 0, 0]) cylinder(h=4, d=2);\n    }\n}\n\nmodule strings() {\n    // Simplified strings\n    for(i = [-2:1:2]) {\n        x = i * 1.5;\n        color(\"silver\") {\n            // From bridge to nut\n            hull() {\n                translate([x, -20, 1.5]) sphere(d=0.4);\n                translate([x, 19, 3.5]) sphere(d=0.4);\n            }\n            // From nut to tuner\n            hull() {\n                translate([x, 19, 3.5]) sphere(d=0.4);\n                translate([x*0.7 + (i>0?8:-8), 35 + i*3.5, 2]) sphere(d=0.4);\n            }\n        }\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Body with thickness\n        linear_extrude(height=body_t) body();\n        \n        // Neck and headstock\n        neck();\n        \n        // Bridge\n        bridge();\n        \n        // Tuners\n        tuners();\n    }\n    \n    // Cut sound hole\n    sound_hole();\n}\n\n// Add frets\nfrets();\n\n// Add strings\nstrings();",
    "renders": true
  },
  {
    "musical_instrument": "violin",
    "openscad_code": "// Realistic 3D-printable violin (medium complexity)\n// Overall length ~90 mm for FDM printing\n\n$fn = 36; // smooth curves\n\nmodule body() {\n    // main body hollow shell\n    difference() {\n        hull() {\n            // upper bout\n            scale([0.9,1.2,1])\n                sphere(d=28, center=true);\n            // lower bout\n            translate([0,35,0])\n                scale([1.2,1.4,1])\n                    sphere(d=35, center=true);\n            // waist\n            translate([0,-12,0])\n                scale([0.7,0.8,0.9])\n                    sphere(d=22, center=true);\n        }\n        // hollow cavity\n        translate([0,5,-1])\n            scale([0.85,0.85,0.8])\n                hull() {\n                    translate([0,10,0]) sphere(d=25, center=true);\n                    translate([0,-25,0]) sphere(d=30, center=true);\n                }\n    }\n}\n\nmodule neck() {\n    // fingerboard\n    translate([0,-47,8])\n        rotate([0,0,0])\n            cube([4,50,2], center=true);\n    \n    // neck shaft\n    translate([0,-47,5])\n        rotate([0,0,0])\n            scale([0.8,1,1])\n                cylinder(d1=8, d2=6, h=48);\n}\n\nmodule scroll() {\n    // scroll spiral\n    for(a=[0:20:340]) {\n        translate([0,-70,5])\n            rotate([0,0,a])\n                translate([5,0,0])\n                    cylinder(d=4, h=3, center=true);\n    }\n    // scroll pegbox top\n    translate([0,-70,7])\n        rotate([90,0,0])\n            cylinder(d=8, h=12, center=true);\n}\n\nmodule bridge() {\n    // bridge feet\n    translate([0,12,9])\n        union() {\n            translate([-4,0,0]) cube([2,4,3], center=true);\n            translate([4,0,0]) cube([2,4,3], center=true);\n            // bridge arch\n            translate([0,0,1.5])\n                cube([8,1,3], center=true);\n        }\n}\n\nmodule f_holes() {\n    // left f-hole\n    translate([-5,8,9])\n        rotate([0,0,-25])\n            difference() {\n                union() {\n                    cylinder(d=2.5, h=1, center=true);\n                    translate([0,8,0]) cylinder(d=2.5, h=1, center=true);\n                    translate([0,4,0]) cube([2,8,1], center=true);\n                }\n                translate([1,4,0]) cylinder(d=1, h=2, center=true);\n            }\n    // right f-hole\n    mirror([1,0,0])\n        translate([-5,8,9])\n            rotate([0,0,25])\n                difference() {\n                    union() {\n                        cylinder(d=2.5, h=1, center=true);\n                        translate([0,8,0]) cylinder(d=2.5, h=1, center=true);\n                        translate([0,4,0]) cube([2,8,1], center=true);\n                    }\n                    translate([1,4,0]) cylinder(d=1, h=2, center=true);\n                }\n}\n\nmodule tailpiece() {\n    // tailpiece\n    translate([0,22,8])\n        scale([0.3,1,1])\n            cube([8,12,2], center=true);\n}\n\nmodule strings() {\n    // four strings\n    for(x=[-1.5,-0.5,0.5,1.5]) {\n        hull() {\n            translate([x,-70,8]) cylinder(d=0.6, h=1, center=true);\n            translate([x,20,8]) cylinder(d=0.6, h=1, center=true);\n        }\n    }\n}\n\n// assemble violin\nunion() {\n    body();\n    neck();\n    scroll();\n    bridge();\n    f_holes();\n    tailpiece();\n    strings();\n}",
    "renders": true
  },
  {
    "musical_instrument": "cello",
    "openscad_code": "// Cello - realistic medium complexity\n// Overall size ~90mm tall\n// Wall thickness 1.5mm for 3D printing\n\n$fn = 36;\n\nmodule rounded_cube(size, r) {\n    hull() {\n        translate([r,r,r]) sphere(r);\n        translate([r,r,size.z-r]) sphere(r);\n        translate([r,size.y-r,r]) sphere(r);\n        translate([r,size.y-r,size.z-r]) sphere(r);\n        translate([size.x-r,r,r]) sphere(r);\n        translate([size.x-r,r,size.z-r]) sphere(r);\n        translate([size.x-r,size.y-r,r]) sphere(r);\n        translate([size.x-r,size.y-r,size.z-r]) sphere(r);\n    }\n}\n\nmodule string(anchor, length) {\n    rotate([0,90,0])\n        cylinder(h = length, d = 0.6, center = true);\n}\n\nmodule tailpiece() {\n    color(\"DarkGoldenrod\")\n    difference() {\n        translate([-9,0,0])\n            rotate([0,10,0])\n                scale([1,0.4,0.15])\n                    sphere(d = 18);\n        translate([-9,0,-1])\n            rotate([0,10,0])\n                scale([1,0.4,0.15])\n                    sphere(d = 16);\n    }\n}\n\nmodule bridge() {\n    color(\"DarkGoldenrod\")\n    union() {\n        translate([0,0,7])\n            cube([20,1.5,8], center=true);\n        for(i = [-7:3.5:7]) {\n            translate([i,0,11])\n                cube([1,1.5,1], center=true);\n        }\n    }\n}\n\nmodule fingerboard() {\n    color(\"DarkGoldenrod\")\n    translate([-30,0,16])\n        rotate([0,-6,0])\n            cube([55,4,2], center=true);\n}\n\nmodule scroll() {\n    color(\"DarkGoldenrod\")\n    union() {\n        translate([0,0,0])\n            rotate([90,0,0])\n                cylinder(h = 15, d1 = 12, d2 = 8, center=false);\n        translate([0,0,7.5])\n            rotate([90,0,0])\n                cylinder(h = 15, d1 = 8, d2 = 12, center=false);\n        translate([0,0,15])\n            rotate([90,0,0])\n                cylinder(h = 15, d1 = 12, d2 = 8, center=false);\n    }\n}\n\nmodule pegbox() {\n    color(\"DarkGoldenrod\")\n    difference() {\n        translate([0,0,40])\n            rotate([90,0,0])\n                cylinder(h = 20, d = 14, center=true);\n        // Peg holes\n        for(i = [-1,1]) {\n            translate([i*4,0,40])\n                rotate([0,90,0])\n                    cylinder(h = 15, d = 2, center=true);\n            translate([i*4,0,45])\n                rotate([0,90,0])\n                    cylinder(h = 15, d = 2, center=true);\n        }\n    }\n}\n\nmodule neck() {\n    color(\"DarkGoldenrod\")\n    difference() {\n        translate([0,0,25])\n            rotate([90,0,0])\n                cylinder(h = 30, d1 = 10, d2 = 8, center=true);\n        translate([0,0,25])\n            rotate([90,0,0])\n                cylinder(h = 30, d1 = 8, d2 = 6, center=true);\n    }\n}\n\nmodule body() {\n    color(\"DarkGoldenrod\")\n    difference() {\n        // Upper bout\n        translate([-20,0,0])\n            scale([1,0.7,0.2])\n                sphere(d = 40);\n        // Middle bout\n        translate([0,0,0])\n            scale([1,0.6,0.2])\n                sphere(d = 45);\n        // Lower bout\n        translate([20,0,0])\n            scale([1,0.8,0.2])\n                sphere(d = 50);\n        \n        // F-holes\n        translate([0,0,0])\n            scale([1,0.6,1])\n                cube([30,3,5], center=true);\n        translate([0,0,0])\n            scale([1,0.6,1])\n                cube([30,3,5], center=true);\n        \n        // Interior hollow\n        translate([-20,0,0])\n            scale([1,0.7,0.2])\n                sphere(d = 37);\n        translate([0,0,0])\n            scale([1,0.6,0.2])\n                sphere(d = 42);\n        translate([20,0,0])\n            scale([1,0.8,0.2])\n                sphere(d = 47);\n    }\n}\n\nmodule endpin() {\n    color(\"Silver\")\n    translate([25,0,-8])\n        cylinder(h = 4, d = 2, center=true);\n}\n\nmodule strings() {\n    color(\"Silver\")\n    for(i = [-6:4:6]) {\n        translate([i,0,0])\n            string([0,0,0], 70);\n    }\n}\n\n// Assembly\ntranslate([0,0,-10])\n    union() {\n        body();\n        neck();\n        pegbox();\n        scroll();\n        fingerboard();\n        bridge();\n        tailpiece();\n        endpin();\n        strings();\n    }",
    "renders": true
  },
  {
    "musical_instrument": "bass",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Bass Guitar\n// Overall length ≈ 95 mm, printable on most FDM machines\n\nmodule rounded_box(x,y,z,r) {\n    // Simple rounded-corner box, printable without supports\n    hull() {\n        for(i=[-1,1], j=[-1,1], k=[-1,1])\n            translate([i*(x/2-r), j*(y/2-r), k*(z/2-r)])\n                sphere(r=r, $fn=12);\n    }\n}\n\nmodule body() {\n    // Main body shape: double-cutaway bass body\n    difference() {\n        // Overall body silhouette\n        hull() {\n            translate([0,-25,0]) scale([1.4,1,1]) sphere(d=40, $fn=60);\n            translate([0, 25,0]) scale([1.2,1,1]) sphere(d=30, $fn=60);\n        }\n        // Neck pocket\n        translate([0,0,2]) cube([12,55,10], center=true);\n        // Control cavity (printable from bottom)\n        translate([18,-15,2]) cube([20,25,6], center=true);\n    }\n}\n\nmodule neck() {\n    // One-piece neck+headstock\n    color(\"BurlyWood\") union() {\n        // Neck shaft\n        translate([0,0,3]) cube([8,50,3], center=true);\n        // Headstock\n        translate([0,-30,1]) cube([12,20,1.5], center=true);\n    }\n}\n\nmodule fretboard() {\n    // Fretboard with frets\n    color(\"DarkGray\") difference() {\n        translate([0,-10,4.5]) cube([9,40,1], center=true);\n        // Side dots\n        for(pos=[-15,-5,5,15])\n            translate([4.5,pos,4.5]) cylinder(d=1,h=1.2,$fn=8);\n    }\n    // Frets\n    color(\"Silver\") for(f=[-17,-11,-5,1,7,13,19,25])\n        translate([0,f,5]) cube([9,0.5,1.2], center=true);\n}\n\nmodule strings() {\n    // Four strings printable vertically\n    for(i=[-1.5,-0.5,0.5,1.5])\n        translate([i,0,5.5]) cylinder(d=0.6,h=55,$fn=6);\n}\n\nmodule pickups() {\n    // Two split-coil pickups\n    for(y=[5,-7]) {\n        color(\"Black\") {\n            // Pickup cover\n            translate([0,y,3.5]) cube([20,8,2], center=true);\n            // Pole pieces\n            for(x=[-7,-3,1,5,9])\n                translate([x,y,4.7]) cylinder(d=1,h=0.4,$fn=6);\n        }\n    }\n}\n\nmodule bridge() {\n    // Simple top-load bridge\n    color(\"Silver\") union() {\n        translate([0,18,3]) cube([20,6,2], center=true);\n        // String saddles\n        for(i=[-6,-2,2,6])\n            translate([i,18,4.2]) cube([2,6,0.8], center=true);\n    }\n}\n\nmodule tuners() {\n    // Four tuners on headstock\n    color(\"Silver\") for(i=[-4.5,-1.5,1.5,4.5]) {\n        translate([i,-30,2.3]) rotate([0,0,90]) cylinder(d=2,h=6,$fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    fretboard();\n    strings();\n    pickups();\n    bridge();\n    tuners();\n    // Control knobs\n    color(\"Black\") for(k=[0,4])\n        translate([18-4*k,-15,3]) cylinder(d=3,h=2,$fn=16);\n}",
    "renders": true
  },
  {
    "musical_instrument": "banjo",
    "openscad_code": "// Realistic 3D-Printable Banjo (medium complexity)\n// Overall length ~85 mm, designed for FDM printing\n\n// Parameters\nbody_dia = 45;\nbody_thick = 8;\nneck_len = 60;\nneck_w = 8;\nneck_h = 12;\nhead_dia = 47;\nhead_thick = 1.2;\nbridge_h = 4;\nbridge_w = 15;\nbridge_d = 2;\ntuner_d = 4;\ntuner_h = 3;\nstring_d = 0.8;\nnum_strings = 5;\npeg_h = 10;\npeg_r = 2.5;\n\n// Main assembly\nmodule banjo(){\n    union(){\n        // Pot assembly\n        pot_assembly();\n        \n        // Neck & fingerboard\n        translate([0,0,body_thick/2+neck_h/2])\n            neck_assembly();\n        \n        // Headstock\n        translate([neck_len,0,body_thick/2+neck_h-1])\n            headstock();\n    }\n}\n\n// Resonator pot with tone ring\nmodule pot_assembly(){\n    difference(){\n        // Main pot body\n        cylinder(d=body_dia, h=body_thick, $fn=64);\n        \n        // Hollow cavity\n        translate([0,0,2])\n            cylinder(d=body_dia-6, h=body_thick, $fn=64);\n        \n        // Tailpiece hole\n        translate([body_dia/2-3,0,body_thick/2])\n            rotate([90,0,0])\n                cylinder(d=3, h=10, $fn=16);\n    }\n    \n    // Tone ring flange\n    translate([0,0,body_thick-1])\n        cylinder(d1=body_dia+2, d2=body_dia, h=2, $fn=64);\n    \n    // Drum head membrane\n    translate([0,0,body_thick+1])\n        cylinder(d=head_dia, h=head_thick, $fn=64);\n    \n    // Bridge\n    translate([0,0,body_thick+head_thick+bridge_h/2+1])\n        cube([bridge_d, bridge_w, bridge_h], center=true);\n    \n    // Tailpiece\n    translate([body_dia/2-2,0,body_thick/2])\n        rotate([0,90,0])\n            cylinder(d=5, h=8, $fn=16);\n}\n\n// Neck with frets\nmodule neck_assembly(){\n    // Neck core\n    cube([neck_len, neck_w, neck_h], center=true);\n    \n    // Fingerboard overlay\n    translate([0,0,neck_h/2+0.6])\n        cube([neck_len, neck_w+2, 1.2], center=true);\n    \n    // Frets (18 frets)\n    for(i=[1:18]){\n        fret_pos = -neck_len/2 + i*3.2;\n        translate([fret_pos,0,neck_h/2+1.8])\n            cube([0.5, neck_w+2, 1], center=true);\n    }\n    \n    // Heel\n    translate([-neck_len/2-3,0,0])\n        rotate([0,90,0])\n            cylinder(d=neck_h+2, h=neck_w+4, $fn=32);\n}\n\n// Headstock with tuners\nmodule headstock(){\n    difference(){\n        // Peghead shape\n        translate([0,0,peg_h/2])\n            cube([20, neck_w+6, peg_h], center=true);\n        \n        // Tuner holes on left\n        for(i=[0:2]){\n            translate([-5, neck_w/2+3, 2+i*2.5])\n                rotate([90,0,0])\n                    cylinder(d=tuner_d, h=10, $fn=16);\n        }\n        \n        // Tuner holes on right\n        for(i=[0:2]){\n            translate([-5, -neck_w/2-3, 2+i*2.5])\n                rotate([90,0,0])\n                    cylinder(d=tuner_d, h=10, $fn=16);\n        }\n    }\n    \n    // Pegs\n    for(i=[0:num_strings-1]){\n        y_pos = (i-2)*(neck_w+6)/5;\n        translate([10, y_pos, peg_h/2])\n            rotate([0,90,0])\n                cylinder(d=peg_r*2, h=peg_h, $fn=12);\n    }\n    \n    // Nut\n    translate([-10,0,peg_h+1])\n        cube([1, neck_w+2, 1.5], center=true);\n}\n\n// Generate model\nbanjo();",
    "renders": true
  },
  {
    "musical_instrument": "mandolin",
    "openscad_code": "// Mandolin - medium complexity realistic style\n// Designed for 3D printing, ~75mm long\n\nbody_length = 70;\nbody_width = 40;\nbody_depth = 12;\nneck_length = 80;\nneck_width = 8;\nheadstock_length = 20;\nheadstock_width = 12;\nfretboard_length = 60;\nbridge_height = 5;\ntuning_peg_diameter = 2;\ntuning_peg_length = 8;\nstring_thickness = 0.5;\nsoundhole_radius = 8;\nwall_thickness = 2;\n\nmodule mandolin() {\n    // Main body\n    difference() {\n        // Body shell\n        hull() {\n            translate([-body_length/2, 0, 0])\n                scale([1, 0.7, 1])\n                sphere(d=body_width);\n            translate([body_length/2*0.7, 0, 0])\n                sphere(d=body_width*0.9);\n        }\n        \n        // Hollow interior\n        scale([0.8, 0.8, 0.7])\n        translate([0, 0, -wall_thickness])\n        hull() {\n            translate([-body_length/2*0.9, 0, 0])\n                scale([1, 0.7, 1])\n                sphere(d=body_width*0.8);\n            translate([body_length/2*0.7, 0, 0])\n                sphere(d=body_width*0.7);\n        }\n    }\n    \n    // Sound hole\n    translate([body_length*0.2, 0, body_depth-0.5])\n        cylinder(h=wall_thickness+1, r=soundhole_radius, $fn=32);\n    \n    // Bridge\n    difference() {\n        translate([body_length*0.3, 0, body_depth])\n            cube([12, 6, bridge_height], center=true);\n        translate([body_length*0.3, 0, body_depth])\n            cube([14, 8, bridge_height-1], center=true);\n    }\n    \n    // Neck\n    translate([body_length/2 + neck_length/2, 0, body_depth/2])\n        rotate([0, 90, 0])\n        cylinder(h=neck_length, r=neck_width/2, $fn=8);\n    \n    // Fretboard\n    translate([body_length/2 + fretboard_length/2, 0, body_depth-1])\n        cube([fretboard_length, neck_width+4, 2], center=true);\n    \n    // Headstock\n    translate([body_length/2 + neck_length + headstock_length/2, 0, body_depth/2])\n        rotate([0, 90, 0])\n        cube([headstock_length, headstock_width, 4], center=true);\n    \n    // Tuning pegs\n    for(i=[-1, 1]) {\n        for(j=[0, 1, 2, 3]) {\n            translate([\n                body_length/2 + neck_length + headstock_length*0.7,\n                (j < 2 ? -headstock_width/2 - 3 : headstock_width/2 + 3),\n                body_depth/2 + (j % 2 == 0 ? 2 : -2) + i*1\n            ]) {\n                rotate([0, 90, 0])\n                cylinder(h=tuning_peg_length, r=tuning_peg_diameter/2, $fn=8);\n            }\n        }\n    }\n    \n    // Strings\n    for(i=[-1.5, -0.5, 0.5, 1.5]) {\n        translate([body_length/2 + neck_length + headstock_length - 5, \n                   i*1.5, \n                   body_depth/2 + 2])\n            rotate([0, 90, 0])\n            cylinder(h=neck_length + fretboard_length, r=string_thickness/2, $fn=4);\n    }\n    \n    // Tailpiece\n    translate([-body_length/2*0.9, 0, body_depth-1])\n        cube([6, 12, 3], center=true);\n}\n\n// Scale to 3D printable size\nscale(0.8)\nmandolin();",
    "renders": true
  },
  {
    "musical_instrument": "ukulele",
    "openscad_code": "// Ukulele model - medium complexity\n// Designed for 3D printing, approximately 80mm long\n$fn = 32;\n\nmodule ukulele() {\n    // Main body - hollowed elliptical shape\n    difference() {\n        scale([1, 0.7, 0.3]) sphere(d = 50);\n        translate([0, 0, -1]) scale([0.9, 0.6, 0.4]) sphere(d = 50);\n    }\n    \n    // Sound hole\n    translate([0, 0, 2.9]) cylinder(h = 2, d = 20);\n    \n    // Bridge\n    translate([0, -15, 3]) {\n        cube([20, 8, 2], center = true);\n        for(i = [-8:4:8]) {\n            translate([i, 0, 1]) cylinder(h = 2, d = 1);\n        }\n    }\n    \n    // Neck\n    translate([0, 25, 0]) rotate([90, 0, 0]) {\n        // Neck shaft\n        difference() {\n            cube([6, 35, 12], center = true);\n            translate([0, 10, 0]) cube([4, 30, 10], center = true);\n        }\n        \n        // Headstock\n        translate([0, 22, 0]) {\n            difference() {\n                cube([12, 15, 6], center = true);\n                translate([0, -3, 0]) cube([10, 8, 8], center = true);\n            }\n            \n            // Tuning pegs\n            for(side = [-1, 1]) {\n                for(pos = [0, 1]) {\n                    translate([side * 5, 3 + pos * 6, 3]) \n                        rotate([0, 90, 0]) cylinder(h = 8, d = 3);\n                }\n            }\n        }\n        \n        // Frets\n        for(fret = [1:12]) {\n            translate([0, -15 + fret * 2.5, 6.1]) \n                cube([6.2, 0.5, 1], center = true);\n        }\n    }\n    \n    // Strings\n    for(str = [-1.5, -0.5, 0.5, 1.5]) {\n        hull() {\n            // Bridge to nut\n            translate([str, -15, 4]) cylinder(h = 0.5, d = 0.5);\n            translate([str, 25, 6]) cylinder(h = 0.5, d = 0.5);\n            // Nut to tuning peg\n            translate([str, 25, 6]) cylinder(h = 0.5, d = 0.5);\n            translate([str * 1.2, 32, 3]) cylinder(h = 0.5, d = 0.5);\n        }\n    }\n    \n    // Side binding detail\n    difference() {\n        scale([1.05, 0.75, 0.32]) sphere(d = 50);\n        scale([1, 0.7, 0.31]) sphere(d = 50);\n    }\n}\n\nukulele();",
    "renders": true
  }
]