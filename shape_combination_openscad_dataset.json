[
  {
    "shape_combination": "union_cube_sphere",
    "openscad_code": "// union_cube_sphere.scad\n// Medium complexity: cube with rounded corners via sphere union\n\n$fn = 32;\n\nmodule rounded_cube_sphere() {\n    translate([0, 0, 50]) {\n        union() {\n            // Main cube body\n            cube([80, 80, 100], center = true);\n            \n            // Sphere on top\n            translate([0, 0, 50])\n                sphere(40);\n            \n            // Four smaller spheres at corners\n            translate([-30, -30, -50])\n                sphere(20);\n            translate([30, -30, -50])\n                sphere(20);\n            translate([-30, 30, -50])\n                sphere(20);\n            translate([30, 30, -50])\n                sphere(20);\n        }\n    }\n}\n\nrounded_cube_sphere();",
    "renders": true
  },
  {
    "shape_combination": "union_cube_sphere_large",
    "openscad_code": "// union_cube_sphere_large\n// Medium complexity: union of large cube with sphere and additional fillet features\n\ndifference() {\n    union() {\n        // Main cube\n        cube([100, 100, 100], center=true);\n        \n        // Sphere centered on top face\n        translate([0, 0, 50])\n            sphere(60);\n        \n        // Side sphere\n        translate([0, 50, 0])\n            sphere(40);\n    }\n    \n    // Central hole through cube\n    cylinder(h=120, r=15, center=true);\n    \n    // Corner cutout\n    translate([30, 30, 30])\n        cube([40, 40, 40]);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_cube_sphere_small",
    "openscad_code": "// union_cube_sphere_small.scad\n// Medium complexity: cube + sphere + rounded edges via small spheres\n\n$fn = 32;\n\nunion() {\n    // Main cube (60 mm)\n    cube([60, 60, 60], center = true);\n    \n    // Sphere centered on top face\n    translate([0, 0, 30])\n        sphere(d = 50);\n    \n    // Smaller spheres at each top corner for rounded edges\n    translate([30, 30, 30])\n        sphere(d = 15);\n    translate([-30, 30, 30])\n        sphere(d = 15);\n    translate([30, -30, 30])\n        sphere(d = 15);\n    translate([-30, -30, 30])\n        sphere(d = 15);\n    \n    // Small sphere centered at bottom for stability\n    translate([0, 0, -30])\n        sphere(d = 20);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_cube_two_spheres",
    "openscad_code": "// union_cube_two_spheres.scad\n\ncube_size = 60;\nsphere_r  = 30;\n\nunion() {\n    // Center cube\n    cube(cube_size, center = true);\n\n    // First sphere offset along X\n    translate([ cube_size/2 + sphere_r/2, 0, 0 ])\n        sphere(r = sphere_r);\n\n    // Second sphere offset along Y\n    translate([ 0, cube_size/2 + sphere_r/2, 0 ])\n        sphere(r = sphere_r);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_two_cubes",
    "openscad_code": "// union_two_cubes\n// combines two cubes offset and rotated\n\nmodule union_two_cubes() {\n    union() {\n        // first cube at origin\n        cube([40, 40, 60], center = true);\n        \n        // second cube rotated 45° and translated\n        translate([25, 25, 0])\n            rotate([0, 0, 45])\n                cube([30, 30, 50], center = true);\n    }\n}\n\nunion_two_cubes();",
    "renders": true
  },
  {
    "shape_combination": "union_three_cubes",
    "openscad_code": "// union_three_cubes.scad\n// Medium complexity: three cubes arranged in an L-shape with a small cube bridging\n\nunion() {\n    // Base cube\n    cube([40, 40, 20], center = true);\n    \n    // Vertical cube on top\n    translate([0, 0, 20])\n        cube([20, 20, 40], center = true);\n    \n    // Side cube\n    translate([30, 0, 0])\n        cube([20, 40, 20], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_four_cubes",
    "openscad_code": "// union_four_cubes.scad\n\n// Four cubes united in a 2×2 grid with slight overlaps and one corner cube taller\ncube_size = 25;\ngap = 5;\noverlap = 2;\n\nunion() {\n    // Bottom-left\n    translate([0, 0, 0])\n        cube([cube_size, cube_size, cube_size]);\n\n    // Bottom-right\n    translate([cube_size + gap - overlap, 0, 0])\n        cube([cube_size, cube_size, cube_size]);\n\n    // Top-left\n    translate([0, cube_size + gap - overlap, 0])\n        cube([cube_size, cube_size, cube_size]);\n\n    // Top-right, taller\n    translate([cube_size + gap - overlap, cube_size + gap - overlap, 0])\n        cube([cube_size, cube_size, cube_size * 1.5]);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_cube_column",
    "openscad_code": "module union_cube_column() {\n    // main column body\n    union() {\n        // base cube\n        cube([60, 60, 20], center = true);\n        \n        // middle cylinder\n        translate([0, 0, 20])\n            cylinder(h = 80, d = 40, center = true);\n            \n        // top cube\n        translate([0, 0, 60])\n            cube([50, 50, 30], center = true);\n            \n        // decorative sphere on top\n        translate([0, 0, 75])\n            sphere(d = 20);\n    }\n}\n\nunion_cube_column();",
    "renders": true
  },
  {
    "shape_combination": "union_cube_wall",
    "openscad_code": "// union_cube_wall - wall made by unioning several cubes\n\ndifference() {\n    union() {\n        // base wall\n        cube([80, 10, 60], center=true);\n        \n        // left buttress\n        translate([-35, 0, 0])\n            cube([10, 15, 50], center=true);\n        \n        // right buttress\n        translate([35, 0, 0])\n            cube([10, 15, 50], center=true);\n        \n        // top crenelation row\n        for(i = [-30:10:30])\n            translate([i, 0, 35])\n                cube([8, 12, 8], center=true);\n    }\n    \n    // window cutout\n    translate([0, 0, 0])\n        cube([20, 12, 30], center=true);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_cube_platform",
    "openscad_code": "union() {\n    // Main platform cube\n    cube([80, 80, 10], center = true);\n    \n    // Side rails\n    translate([0, -45, 5])\n        cube([90, 10, 20], center = true);\n    \n    translate([0, 45, 5])\n        cube([90, 10, 20], center = true);\n    \n    // End caps\n    translate([-45, 0, 5])\n        cube([10, 70, 20], center = true);\n    \n    translate([45, 0, 5])\n        cube([10, 70, 20], center = true);\n    \n    // Corner posts\n    for (x = [-35:70:70])\n        for (y = [-35:70:70])\n            translate([x, y, 15])\n                cube([10, 10, 30], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_cylinder_sphere",
    "openscad_code": "// union_cylinder_sphere.scad\n\n// main cylinder\ncylinder(h = 60, r = 25, $fn = 50);\n\n// sphere on top\ntranslate([0, 0, 60])\n    sphere(r = 25, $fn = 50);\n\n// second smaller sphere inset half way\ntranslate([0, 0, 30])\n    sphere(r = 15, $fn = 50);\n\n// side cylinder intersecting main cylinder\ntranslate([25, 0, 30])\n    rotate([0, 90, 0])\n        cylinder(h = 50, r = 12, $fn = 40);",
    "renders": true
  },
  {
    "shape_combination": "union_cylinder_top_sphere",
    "openscad_code": "union() {\n    cylinder(h=80, r=30, center=true, $fn=64);\n    \n    translate([0, 0, 40])\n    sphere(r=30, $fn=64);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_cylinder_bottom_sphere",
    "openscad_code": "// union_cylinder_bottom_sphere\n// Medium complexity: combine a vertical cylinder with a sphere at the bottom\n// plus a thin ring around the cylinder-sphere joint for added detail\n\nmodule union_cylinder_bottom_sphere() {\n    cylinder_h = 60;\n    cylinder_r = 25;\n    sphere_r   = 30;\n\n    union() {\n        // Main vertical cylinder\n        cylinder(h = cylinder_h, r = cylinder_r, $fn = 48);\n\n        // Sphere attached to cylinder base\n        translate([0, 0, -sphere_r])\n            sphere(r = sphere_r, $fn = 48);\n\n        // Decorative ring where cylinder meets sphere\n        translate([0, 0, 0])\n            rotate_extrude($fn = 48)\n                translate([cylinder_r, 0, 0])\n                    square([2, 5]);\n    }\n}\n\nunion_cylinder_bottom_sphere();",
    "renders": true
  },
  {
    "shape_combination": "union_two_cylinders",
    "openscad_code": "// union_two_cylinders.scad\n// Two cylinders joined at 90° with fillet blend\n\n$fn = 32;\n\n// Main horizontal cylinder\ncylinder1();\nrotate([0, 90, 0])\n    cylinder2();\n\nmodule cylinder1() {\n    union() {\n        // Horizontal cylinder body\n        cylinder(h = 80, d = 30, center = true);\n        \n        // Vertical cylinder body\n        rotate([90, 0, 0])\n            cylinder(h = 70, d = 25, center = true);\n        \n        // Blend fillet between cylinders\n        translate([0, 0, 15])\n            rotate_extrude(angle = 90, $fn = 32)\n                translate([15, 0, 0])\n                    circle(r = 8);\n    }\n}\n\nmodule cylinder2() {\n    difference() {\n        // End cap on horizontal cylinder\n        translate([40, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 10, d = 35);\n                \n        // Hollow center\n        translate([40, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 12, d = 20);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "union_three_cylinders",
    "openscad_code": "// union_three_cylinders.scad\n\nunion() {\n    // Vertical cylinder\n    cylinder(h = 60, d = 30, center = true);\n    \n    // Horizontal cylinder along X\n    rotate([0, 90, 0])\n        cylinder(h = 60, d = 25, center = true);\n    \n    // Horizontal cylinder along Y, elevated\n    translate([0, 0, 20])\n        rotate([90, 0, 0])\n            cylinder(h = 60, d = 25, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_cylinder_grid",
    "openscad_code": "$fn = 32;\n\nunion() {\n    // Main 3x3 grid of cylinders\n    for (x = [0:2])\n        for (z = [0:2])\n            translate([x*30 - 30, 0, z*30 - 30])\n                cylinder(h = 60, d = 20);\n    \n    // Horizontal connecting rods\n    for (z = [0:2])\n        translate([0, 0, z*30 - 30])\n            rotate([0, 90, 0])\n                cylinder(h = 60, d = 10);\n    \n    // Vertical connecting rods\n    for (x = [0:2])\n        translate([x*30 - 30, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 60, d = 10);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_cube_cylinder",
    "openscad_code": "// union_cube_cylinder.scad\n// union of cube and cylinder with 45° rotation\n\n$fn = 36;\n\nunion() {\n    // main cube\n    cube([50, 50, 50], center = true);\n    \n    // cylinder rotated 45° on X axis\n    rotate([45, 0, 0])\n        cylinder(h = 70, d = 50, center = true);\n        \n    // second cylinder rotated 45° on Y axis for cross shape\n    rotate([0, 45, 0])\n        cylinder(h = 70, d = 50, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_box_cylinder",
    "openscad_code": "// union_box_cylinder.scad\n// Medium complexity: union of box and two cylinders with offset and rotation\n\n$fn = 32;\n\n// Main box\nbox_w = 60;\nbox_d = 40;\nbox_h = 30;\n\n// Cylinders\ncyl_r = 15;\ncyl_h = 70;\noffset = 20;\n\nunion() {\n    // Base box\n    translate([0, 0, box_h/2])\n        cube([box_w, box_d, box_h], center=true);\n    \n    // Vertical cylinder on top\n    translate([offset, 0, box_h])\n        cylinder(h = cyl_h, r = cyl_r);\n    \n    // Horizontal cylinder across front\n    translate([0, -box_d/2 - cyl_r, box_h/2])\n        rotate([90, 0, 0])\n        cylinder(h = box_w + 2*cyl_r, r = cyl_r);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_box_column",
    "openscad_code": "// union_box_column.scad\n// A box merged with a column on top\n\n$fn = 32;\n\nmodule union_box_column() {\n    // Main box base\n    difference() {\n        cube([60, 40, 30], center = true);\n        translate([0, 0, 14])\n            cube([50, 30, 3], center = true);\n    }\n\n    // Column on top\n    union() {\n        translate([0, 0, 15])\n            cylinder(h = 50, r = 15, center = true);\n        translate([0, 0, 40])\n            cylinder(h = 5, r = 18, center = true);\n    }\n\n    // Support rings\n    for (z = [25, 35]) {\n        translate([0, 0, z])\n            cylinder(h = 2, r = 20, center = true);\n    }\n}\n\nunion_box_column();",
    "renders": true
  },
  {
    "shape_combination": "union_box_support",
    "openscad_code": "// union_box_support.scad\n// Medium complexity support structure combining box, cylinder and wedge\n\nunion() {\n    // Main box body\n    translate([0, 0, 10])\n        cube([60, 40, 20], center=true);\n    \n    // Front support cylinder\n    translate([0, -30, 0])\n        cylinder(h=40, d1=30, d2=20);\n    \n    // Side support wedge\n    translate([40, 0, 0])\n        rotate([0, 0, -30])\n            cube([30, 20, 15]);\n    \n    // Top mounting flange\n    translate([0, 0, 25])\n        difference() {\n            cube([70, 50, 5], center=true);\n            translate([0, 0, -1])\n                cube([50, 30, 7], center=true);\n        }\n}",
    "renders": true
  },
  {
    "shape_combination": "union_cylinder_cone",
    "openscad_code": "// union_cylinder_cone.scad\n\n$fn = 50;\n\nunion() {\n    // main cylinder\n    cylinder(h = 40, r = 25, center = true);\n\n    // cone on top\n    translate([0, 0, 20])\n        cylinder(h = 30, r1 = 25, r2 = 0, center = false);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_cylinder_torus",
    "openscad_code": "// union_cylinder_torus.scad\n\n$fn = 32;\n\n// Union of vertical cylinder and horizontal torus\nmodule union_cylinder_torus() {\n    union() {\n        // Central vertical cylinder\n        cylinder(h = 80, d = 40, center = true);\n\n        // Horizontal torus around middle\n        rotate([90, 0, 0])\n            torus(30, 12);\n    }\n}\n\n// Helper module for torus\nmodule torus(r_major, r_minor) {\n    rotate_extrude()\n        translate([r_major, 0, 0])\n            circle(r = r_minor);\n}\n\nunion_cylinder_torus();",
    "renders": true
  },
  {
    "shape_combination": "union_cone_sphere",
    "openscad_code": "// union_cone_sphere.scad\n// Medium complexity – cone and sphere union with subtle fillet\n\nr = 20;\nh = 60;\nsphere_r = 30;\nfillet_r = 3;\n\nmodule union_cone_sphere() {\n    union() {\n        // main cone\n        cylinder(h = h, r1 = r, r2 = 0, $fn = 50);\n\n        // main sphere sitting on tip\n        translate([0, 0, h])\n            sphere(r = sphere_r, $fn = 60);\n\n        // small fillet ring at join\n        translate([0, 0, h - fillet_r])\n            rotate_extrude($fn = 50)\n                translate([sphere_r - fillet_r, 0, 0])\n                    circle(r = fillet_r);\n    }\n}\n\nunion_cone_sphere();",
    "renders": true
  },
  {
    "shape_combination": "union_cone_cylinder",
    "openscad_code": "// union_cone_cylinder.scad\n\nmodule union_cone_cylinder() {\n    union() {\n        // Main cylinder body\n        cylinder(h = 60, r = 25, $fn = 50);\n        \n        // Cone on top\n        translate([0, 0, 60])\n            cylinder(h = 40, r1 = 25, r2 = 0, $fn = 50);\n        \n        // Small decorative ring at junction\n        translate([0, 0, 58])\n            cylinder(h = 4, r = 28, $fn = 50);\n    }\n}\n\nunion_cone_cylinder();",
    "renders": true
  },
  {
    "shape_combination": "union_sphere_torus",
    "openscad_code": "union_sphere_torus() {\n    $fn = 48;\n    \n    // Main sphere\n    sphere(30);\n    \n    // Torus around the equator\n    rotate([90, 0, 0])\n        translate([0, 0, 0])\n            torus(45, 8);\n    \n    // Smaller torus at 45 degrees\n    rotate([45, 0, 0])\n        translate([0, 0, 0])\n            torus(40, 6);\n    \n    // Torus at perpendicular angle\n    rotate([0, 90, 0])\n        translate([0, 0, 0])\n            torus(35, 7);\n}\n\nmodule torus(major, minor) {\n    rotate_extrude()\n        translate([major, 0, 0])\n            circle(r = minor);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_pyramid_base",
    "openscad_code": "union_pyramid_base() {\n    // Main pyramid\n    pyramid();\n    \n    // Base with rounded corners\n    translate([0, 0, -5])\n        rounded_base();\n}\n\nmodule pyramid() {\n    union() {\n        // Main pyramid body\n        rotate([0, 0, 45])\n            linear_extrude(height = 60, scale = 0)\n                square(50, center = true);\n        \n        // Reinforcement base\n        translate([0, 0, -5])\n            cylinder(h = 5, r = 35, $fn = 4);\n    }\n}\n\nmodule rounded_base() {\n    difference() {\n        // Rounded square base\n        minkowski() {\n            square(70, center = true);\n            cylinder(h = 2, r = 8, $fn = 20);\n        }\n        \n        // Center hole for mounting\n        cylinder(h = 10, r = 10, $fn = 32);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "union_pyramid_cube",
    "openscad_code": "// union_pyramid_cube.scad\n// pyramid sitting atop a cube, joined with union\n\n$fn = 32;\n\nunion() {\n    // base cube\n    cube([60, 60, 60], center = true);\n    \n    // pyramid on top\n    translate([0, 0, 60])\n        cylinder(h = 50, r1 = 40, r2 = 0, center = false);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_pyramid_cylinder",
    "openscad_code": "union_pyramid_cylinder();\n\nmodule union_pyramid_cylinder() {\n    union() {\n        // Square pyramid on top\n        translate([0, 0, 40])\n            cylinder(h = 50, r1 = 30, r2 = 0, $fn = 4);\n        \n        // Main cylinder\n        cylinder(h = 40, r = 30, $fn = 64);\n        \n        // Decorative base ring\n        translate([0, 0, -5])\n            cylinder(h = 5, r1 = 35, r2 = 30, $fn = 64);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "union_dome_cylinder",
    "openscad_code": "$fs = 1;\n$fa = 2;\n\n// Union of a dome (sphere cap) and a cylinder\nunion() {\n    // Dome: top half of sphere\n    intersection() {\n        sphere(d = 60);\n        translate([0, 0, 30])\n            cube(60, center = true);\n    }\n    \n    // Cylinder below the dome\n    cylinder(h = 40, d = 60, center = false);\n    \n    // Optional fillet ring (small torus) to smooth the join\n    rotate_extrude()\n        translate([30, 0, 0])\n            circle(d = 4);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_dome_box",
    "openscad_code": "// union_dome_box.scad\n// A box with domed top created via union()\n\n// Domed lid\ntranslate([0, 0, 30]) {\n    union() {\n        cylinder(h = 5, r = 30, $fn = 64);\n        translate([0, 0, 5])\n            sphere(r = 30, $fn = 64);\n    }\n}\n\n// Box body\ndifference() {\n    cube([60, 60, 30], center = true);\n    translate([0, 0, -5])\n        cube([54, 54, 30], center = true);\n}\n\n// Optional alignment pins\ntranslate([20, 20, 15])\n    cylinder(h = 20, r = 3, $fn = 16);\ntranslate([-20, 20, 15])\n    cylinder(h = 20, r = 3, $fn = 16);\ntranslate([20, -20, 15])\n    cylinder(h = 20, r = 3, $fn = 16);\ntranslate([-20, -20, 15])\n    cylinder(h = 20, r = 3, $fn = 16);",
    "renders": true
  },
  {
    "shape_combination": "union_dome_sphere",
    "openscad_code": "// union_dome_sphere.scad\n// dome (hemisphere) on top of a sphere with a connecting cylinder\n\nmodule dome_sphere() {\n    union() {\n        // bottom sphere\n        translate([0, 0, 0])\n            sphere(d = 60, $fn = 64);\n            \n        // connecting cylinder\n        translate([0, 0, 30])\n            cylinder(h = 10, d = 60, $fn = 64);\n            \n        // dome (hemisphere)\n        translate([0, 0, 40])\n            sphere(d = 60, $fn = 64);\n        \n        // small decorative ring at joint\n        translate([0, 0, 39])\n            cylinder(h = 2, d1 = 70, d2 = 60, $fn = 64);\n    }\n}\n\ndome_sphere();",
    "renders": true
  },
  {
    "shape_combination": "union_funnel_base",
    "openscad_code": "// union_funnel_base: funnel + base plate + mounting holes\nmodule union_funnel_base() {\n    union() {\n        // funnel cone\n        cylinder(h = 60, r1 = 50, r2 = 15, $fn = 64);\n\n        // wide base plate\n        translate([0, 0, -5])\n            cylinder(h = 5, r = 60, $fn = 64);\n\n        // mounting posts\n        for (a = [0:120:359]) {\n            rotate([0, 0, a])\n                translate([45, 0, -5])\n                    cylinder(h = 15, r = 4, $fn = 16);\n        }\n    }\n}\n\nunion_funnel_base();",
    "renders": true
  },
  {
    "shape_combination": "union_funnel_cylinder",
    "openscad_code": "union_funnel_cylinder() {\n    union() {\n        // funnel\n        cylinder(h1 = 20, h2 = 5, r1 = 30, r2 = 10, center = true);\n        \n        // cylinder base\n        translate([0, 0, -12.5])\n            cylinder(h = 25, r = 10, center = true);\n        \n        // optional ring shoulder\n        difference() {\n            translate([0, 0, -20])\n                cylinder(h = 5, r = 12, center = true);\n            translate([0, 0, -20])\n                cylinder(h = 5, r = 10, center = true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "union_bell_top",
    "openscad_code": "union() {\n    // Main bell body\n    cylinder(h = 50, r1 = 40, r2 = 20, $fn = 100);\n    \n    // Top sphere dome\n    translate([0, 0, 50])\n    sphere(r = 20, $fn = 100);\n    \n    // Hanging loop\n    translate([0, 0, 70])\n    rotate([90, 0, 0])\n    torus(5, 15, $fn = 50);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_bowl_base",
    "openscad_code": "// union_bowl_base\n// Base for a small bowl: flat bottom with rounded top created via union\n\ndifference() {\n    union() {\n        // Flat base disk\n        cylinder(h = 5, d = 80, $fn = 48);\n        \n        // Rounded upper bowl\n        translate([0, 0, 2.5])\n            scale([1, 1, 0.6])\n            sphere(d = 80, $fn = 48);\n    }\n    \n    // Hollow out center\n    translate([0, 0, -1])\n        cylinder(h = 50, d = 70, $fn = 48);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_pill_cap",
    "openscad_code": "union_pill_cap();\n\nmodule union_pill_cap() {\n    // Main cap body\n    difference() {\n        union() {\n            // Cylindrical base\n            cylinder(h=20, d=40, $fn=60);\n            \n            // Rounded top dome\n            translate([0, 0, 20])\n                sphere(d=40, $fn=60);\n                \n            // Grip ring\n            translate([0, 0, 10])\n                cylinder(h=5, d1=45, d2=45, $fn=60);\n        }\n        \n        // Internal cavity\n        translate([0, 0, -1])\n            cylinder(h=25, d=36, $fn=60);\n            \n        // Internal dome cavity\n        translate([0, 0, 20])\n            sphere(d=36, $fn=60);\n    }\n    \n    // Thread starter\n    difference() {\n        cylinder(h=5, d=38, $fn=60);\n        cylinder(h=5.5, d=34, $fn=60);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "union_pill_body",
    "openscad_code": "// union_pill_body.scad\n// Medium-complexity pill-shaped capsule using union and difference\n\n$fn = 32;\n\nmodule union_pill_body() {\n    // Main pill body\n    union() {\n        // Cylindrical mid-section\n        cylinder(h = 60, r = 20, center = true);\n        \n        // Left hemispherical cap\n        translate([-30, 0, 0])\n            sphere(r = 20);\n            \n        // Right hemispherical cap\n        translate([30, 0, 0])\n            sphere(r = 20);\n    }\n    \n    // Optional through-hole (difference)\n    difference() {\n        union_pill_body();\n        rotate([0, 90, 0])\n            cylinder(h = 100, r = 8, center = true);\n    }\n}\n\nunion_pill_body();",
    "renders": true
  },
  {
    "shape_combination": "union_pin_head",
    "openscad_code": "// union_pin_head.scad\n// Union of cylinder and sphere to form a pin head\n\n// Pin head\nunion() {\n    // Main cylindrical shaft\n    cylinder(h = 40, d = 10, $fn = 32);\n    \n    // Top sphere\n    translate([0, 0, 40])\n        sphere(d = 12, $fn = 32);\n    \n    // Flat base disk\n    translate([0, 0, -2])\n        cylinder(h = 2, d = 14, $fn = 32);\n}\n\n// Optional chamfer at sphere-cylinder junction\ntranslate([0, 0, 38])\n    cylinder(h = 2, d1 = 10, d2 = 12, $fn = 32);",
    "renders": true
  },
  {
    "shape_combination": "union_pin_shaft",
    "openscad_code": "// union_pin_shaft: combines a pin head and shaft using union\n\n$fn = 32;\n\nmodule union_pin_shaft() {\n    union() {\n        // Cylindrical head\n        cylinder(h = 15, d = 30, center = false);\n        \n        // Tapered shaft\n        cylinder(h = 80, d1 = 20, d2 = 14, center = false);\n        \n        // Chamfer at shaft base\n        translate([0, 0, 80])\n            cylinder(h = 3, d1 = 14, d2 = 10, center = false);\n    }\n}\n\nunion_pin_shaft();",
    "renders": true
  },
  {
    "shape_combination": "union_bolt_head",
    "openscad_code": "module union_bolt_head(d=40,h=20,hex=30){\n    // Main hex head\n    union(){\n        cylinder(d1=hex,d2=hex,h=h,$fn=6);\n        \n        // Top rounded dome\n        translate([0,0,h])\n            sphere(d=hex,$fn=30);\n        \n        // Washer base\n        translate([0,0,-2])\n            cylinder(d=hex+8,h=2,$fn=30);\n    }\n}\n\nunion_bolt_head();",
    "renders": true
  },
  {
    "shape_combination": "union_bolt_shaft",
    "openscad_code": "// union_bolt_shaft\n$fn = 32;\n\nmodule bolt_shaft() {\n    union() {\n        // bolt head - hex\n        cylinder(h = 10, r1 = 12, r2 = 12, $fn = 6);\n        \n        // shaft - threaded\n        cylinder(h = 60, r = 7);\n        \n        // shaft tip - chamfer\n        translate([0, 0, 60])\n            cylinder(h = 5, r1 = 7, r2 = 0);\n    }\n    \n    // threaded detail grooves\n    for (i = [1:10]) {\n        translate([0, 0, 5 + i * 5])\n            rotate([0, 0, i * 15])\n            difference() {\n                cylinder(h = 3, r = 7.5);\n                cylinder(h = 3, r = 6.5);\n            }\n    }\n}\n\nbolt_shaft();",
    "renders": true
  },
  {
    "shape_combination": "union_nut_body",
    "openscad_code": "module union_nut_body() {\n    // Main hex body\n    union() {\n        // Hex prism\n        cylinder(h = 30, r = 25, $fn = 6);\n        \n        // Top collar\n        translate([0, 0, 30])\n            cylinder(h = 5, r1 = 25, r2 = 30, $fn = 6);\n        \n        // Bottom collar\n        translate([0, 0, -5])\n            cylinder(h = 5, r1 = 30, r2 = 25, $fn = 6);\n        \n        // Central reinforcing ring\n        translate([0, 0, 10])\n            cylinder(h = 10, r = 20, $fn = 6);\n    }\n}\n\nunion_nut_body();",
    "renders": true
  },
  {
    "shape_combination": "union_nut_hex",
    "openscad_code": "// union_nut_hex.scad\n// Hex nut created by unioning a hexagonal prism with a chamfered cylinder\n\n$fn = 6;\n\n// Main hexagonal body\ndifference() {\n    cylinder(h = 15, r = 10);\n    \n    // Central threaded hole\n    cylinder(h = 20, r = 5.5);\n}\n\n// Chamfered top edge\nunion() {\n    translate([0, 0, 7.5])\n        cylinder(h = 2.5, r1 = 10, r2 = 8);\n    \n    // Chamfered bottom edge\n    translate([0, 0, 0])\n        cylinder(h = 2.5, r1 = 8, r2 = 10);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_washer_round",
    "openscad_code": "// union_washer_round.scad\n// combines washer and rounded elements via union\n\nmodule union_washer_round() {\n    // main washer body\n    washer = difference() {\n        cylinder(h = 4, r = 30, $fn = 60);\n        cylinder(h = 5, r = 12, $fn = 60);\n    };\n\n    // rounded top cap\n    cap = translate([0, 0, 4])\n        cylinder(h = 4, r1 = 30, r2 = 28, $fn = 60);\n\n    // rounded bottom cap\n    base = translate([0, 0, -4])\n        cylinder(h = 4, r1 = 28, r2 = 30, $fn = 60);\n\n    union() {\n        washer;\n        cap;\n        base;\n    }\n}\n\nunion_washer_round();",
    "renders": true
  },
  {
    "shape_combination": "union_washer_square",
    "openscad_code": "// Square washer made by subtracting two squares from a larger square\nmodule union_washer_square(outer=60, inner=30, thick=5) {\n    difference() {\n        // Main square plate\n        cube([outer, outer, thick], center=true);\n        \n        // Central square hole\n        cube([inner, inner, thick+2], center=true);\n        \n        // Optional corner holes for mounting\n        for(x=[-1,1], y=[-1,1]) {\n            translate([x*outer/3, y*outer/3, 0])\n                cylinder(h=thick+2, r=5, $fn=20);\n        }\n    }\n}\n\nunion_washer_square();",
    "renders": true
  },
  {
    "shape_combination": "union_spacer_round",
    "openscad_code": "// union_spacer_round: a round spacer created by unioning a central cylinder\n// with two flanges (top & bottom) and four radial gussets for stiffness\n\n$fn = 48;\n\n// Central hollow shaft\ndifference() {\n    cylinder(h = 40, d = 30);\n    translate([0, 0, -1])\n        cylinder(h = 42, d = 16);\n}\n\n// Bottom flange\ntranslate([0, 0, -5])\n    cylinder(h = 10, d = 60);\n\n// Top flange\ntranslate([0, 0, 35])\n    cylinder(h = 10, d = 60);\n\n// Radial gussets (4× 90° apart)\nfor (a = [0:90:270]) {\n    rotate([0, 0, a])\n        translate([30, -2.5, 10])\n            cube([15, 5, 20]);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_spacer_square",
    "openscad_code": "// union_spacer_square.scad\n// Medium-complexity square spacer with mounting holes and chamfers\n\n$fn = 50;\n\n// Main square plate\ndifference() {\n    union() {\n        // Main body\n        linear_extrude(height = 8)\n            offset(r = 2)\n                square(60, center = true);\n\n        // Top rim\n        translate([0, 0, 8])\n            cylinder(h = 3, r = 35);\n    }\n\n    // Central hole\n    translate([0, 0, -1])\n        cylinder(h = 12, r = 15);\n\n    // Corner holes\n    for (x = [-25, 25])\n        for (y = [-25, 25])\n            translate([x, y, -1])\n                cylinder(h = 12, r = 3.5);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_bushing_outer",
    "openscad_code": "// union_bushing_outer.scad\n// Medium-complexity bushing outer shell formed by a union of shapes\n\n$fn = 36;\n\n// Main cylindrical sleeve\nunion() {\n    // Outer tube\n    difference() {\n        cylinder(h = 40, d = 60, center = true);\n        cylinder(h = 42, d = 50, center = true);\n    }\n\n    // Top flange\n    translate([0, 0, 20])\n        difference() {\n            cylinder(h = 6, d = 80, center = false);\n            cylinder(h = 7, d = 60, center = false);\n        }\n\n    // Bottom flange\n    translate([0, 0, -26])\n        difference() {\n            cylinder(h = 6, d = 80, center = false);\n            cylinder(h = 7, d = 60, center = false);\n        }\n\n    // Reinforcement ring\n    translate([0, 0, 0])\n        cylinder(h = 20, d = 70, center = true);\n\n    // Mounting ears (X direction)\n    translate([40, 0, 5])\n        cube([20, 20, 10], center = true);\n    translate([-40, 0, 5])\n        cube([20, 20, 10], center = true);\n\n    // Mounting ears (Y direction)\n    translate([0, 40, -5])\n        cube([20, 20, 10], center = true);\n    translate([0, -40, -5])\n        cube([20, 20, 10], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_bushing_inner",
    "openscad_code": "union_bushing_inner() {\n    difference() {\n        union() {\n            cylinder(h = 30, r = 25, $fn = 64);\n            translate([0, 0, 30]) cylinder(h = 20, r1 = 25, r2 = 20, $fn = 64);\n        }\n        translate([0, 0, -1]) cylinder(h = 52, r = 15, $fn = 64);\n        translate([0, 0, 10]) rotate([90, 0, 0]) cylinder(h = 50, r = 7, $fn = 32);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "union_mounting_block",
    "openscad_code": "union_mounting_block() {\n    $fn = 50;\n\n    difference() {\n        union() {\n            // Main block with rounded top\n            hull() {\n                cube([40, 40, 15], center=true);\n                translate([0, 0, 10])\n                    cylinder(d=40, h=10, center=true);\n            }\n\n            // Mounting flanges\n            translate([-35, 0, 0])\n                cube([25, 20, 8], center=true);\n            translate([35, 0, 0])\n                cube([25, 20, 8], center=true);\n        }\n\n        // Mounting holes\n        translate([-35, 0, 0])\n            cylinder(d=6, h=10, center=true);\n        translate([35, 0, 0])\n            cylinder(d=6, h=10, center=true);\n\n        // Center clearance\n        translate([0, 0, 5])\n            cylinder(d=15, h=20, center=true);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "union_mounting_plate",
    "openscad_code": "union_mounting_plate();\n\nmodule union_mounting_plate() {\n    // Main plate\n    union() {\n        difference() {\n            cube([80, 60, 4], center=true);\n            translate([0, 0, 2]) cube([70, 50, 4], center=true);\n        }\n        \n        // Mounting tabs\n        translate([-40, 0, 0]) cube([10, 20, 2], center=true);\n        translate([40, 0, 0]) cube([10, 20, 2], center=true);\n        translate([0, -30, 0]) cube([20, 10, 2], center=true);\n        translate([0, 30, 0]) cube([20, 10, 2], center=true);\n        \n        // Reinforcement ribs\n        translate([0, 0, -1]) cube([76, 2, 2], center=true);\n        translate([0, 0, -1]) cube([2, 56, 2], center=true);\n        \n        // Corner gussets\n        for(x = [-35, 35])\n        for(y = [-25, 25])\n        translate([x, y, 1]) rotate([0, 0, 45]) cube([8, 8, 2], center=true);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "union_bracket_l_shape",
    "openscad_code": "// union_bracket_l_shape.scad\n\ndifference() {\n    union() {\n        // vertical arm\n        cube([10, 10, 60], center = false);\n        \n        // horizontal arm\n        translate([0, 0, -40])\n            cube([40, 10, 10], center = false);\n    }\n    \n    // mounting hole vertical\n    translate([5, 5, 30])\n        cylinder(h = 12, d = 5, center = true);\n    \n    // mounting hole horizontal\n    translate([30, 5, -35])\n        cylinder(h = 12, d = 5, center = true);\n    \n    // lightening cutout vertical\n    translate([5, 5, 45])\n        cube([7, 7, 25], center = true);\n    \n    // lightening cutout horizontal\n    translate([20, 5, -35])\n        cube([30, 7, 7], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_bracket_t_shape",
    "openscad_code": "// union_bracket_t_shape.scad\n// T-shaped bracket made by unioning three blocks\n\n$fn=32;\n\n// vertical post\nunion() {\n    // vertical stem\n    translate([0, 0, 25])\n        cube([20, 15, 50], center=true);\n    \n    // horizontal top bar\n    translate([0, 0, 60])\n        cube([60, 15, 20], center=true);\n    \n    // base plate\n    translate([0, 0, 0])\n        cube([40, 30, 5], center=true);\n    \n    // two gusset supports\n    translate([10, 0, 30])\n        rotate([0, 45, 0])\n        cube([15, 15, 5], center=true);\n    translate([-10, 0, 30])\n        rotate([0, -45, 0])\n        cube([15, 15, 5], center=true);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_bracket_u_shape",
    "openscad_code": "// union_bracket_u_shape.scad\n// U-shaped bracket with mounting holes\n\nwidth = 80;\nheight = 60;\ndepth = 20;\nwall = 6;\nhole_d = 5;\nslot_w = 30;\n\ndifference() {\n    union() {\n        // Left arm\n        translate([-width/2 + wall/2, 0, 0])\n            cube([wall, height, depth], center=true);\n            \n        // Right arm\n        translate([width/2 - wall/2, 0, 0])\n            cube([wall, height, depth], center=true);\n            \n        // Base\n        translate([0, -height/2 + wall/2, 0])\n            cube([width, wall, depth], center=true);\n    }\n    \n    // Mounting holes\n    translate([-width/4, -height/2 + wall + 2, 0])\n        rotate([90, 0, 0])\n            cylinder(h=depth+2, d=hole_d, center=true);\n            \n    translate([width/4, -height/2 + wall + 2, 0])\n        rotate([90, 0, 0])\n            cylinder(h=depth+2, d=hole_d, center=true);\n            \n    // Center slot\n    translate([0, 0, 0])\n        cube([slot_w, height + 2, depth + 2], center=true);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_frame_four_posts",
    "openscad_code": "// union_frame_four_posts.scad\n\n// overall frame size\nframe_w = 100;\nframe_d = 80;\nframe_h = 60;\n\n// post size\npost_r = 5;\npost_h = 70;\n\n// top & bottom rails\nrail_t = 4;\n\nmodule frame_with_posts() {\n    // four vertical posts\n    for (x = [-1, 1], y = [-1, 1])\n        translate([x * (frame_w/2 - post_r), y * (frame_d/2 - post_r), 0])\n            cylinder(r = post_r, h = post_h);\n\n    // bottom plate\n    translate([0, 0, 0])\n        cube([frame_w, frame_d, rail_t], center = true);\n\n    // top plate\n    translate([0, 0, post_h - rail_t])\n        cube([frame_w, frame_d, rail_t], center = true);\n}\n\nunion() {\n    frame_with_posts();\n}",
    "renders": true
  },
  {
    "shape_combination": "union_frame_cross_bar",
    "openscad_code": "// union_frame_cross_bar.scad\n// Two perpendicular bars joined by a central cube\n\nbar_len = 120;\nbar_wid = 12;\nbar_thk = 8;\ncube_size = 20;\n\nmodule union_frame_cross_bar() {\n    union() {\n        // horizontal bar\n        cube([bar_len, bar_wid, bar_thk], center = true);\n\n        // vertical bar\n        cube([bar_wid, bar_len, bar_thk], center = true);\n\n        // central connecting cube\n        cube([cube_size, cube_size, bar_thk + 6], center = true);\n\n        // corner reinforcements\n        translate([bar_len/2 - 10, bar_len/2 - 10, 0])\n            cube([10, 10, bar_thk + 6], center = true);\n        translate([-bar_len/2 + 10, bar_len/2 - 10, 0])\n            cube([10, 10, bar_thk + 6], center = true);\n        translate([bar_len/2 - 10, -bar_len/2 + 10, 0])\n            cube([10, 10, bar_thk + 6], center = true);\n        translate([-bar_len/2 + 10, -bar_len/2 + 10, 0])\n            cube([10, 10, bar_thk + 6], center = true);\n    }\n}\n\nunion_frame_cross_bar();",
    "renders": true
  },
  {
    "shape_combination": "union_stand_base",
    "openscad_code": "// union_stand_base.scad\n// A small stand base made by unioning a thick cylinder with four rounded feet\n\n// Overall base size\nbase_d = 80;\nbase_h = 12;\n\n// Feet dimensions\nfoot_d = 16;\nfoot_h = 4;\n\n// Center cylinder\nunion() {\n    cylinder(h = base_h, d = base_d, $fn = 48);\n\n    // Four rounded feet at 45° positions\n    translate([28, 28, 0])\n        cylinder(h = foot_h, d = foot_d, $fn = 24);\n\n    translate([28, -28, 0])\n        cylinder(h = foot_h, d = foot_d, $fn = 24);\n\n    translate([-28, 28, 0])\n        cylinder(h = foot_h, d = foot_d, $fn = 24);\n\n    translate([-28, -28, 0])\n        cylinder(h = foot_h, d = foot_d, $fn = 24);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_stand_column",
    "openscad_code": "// union_stand_column.scad\n// A simple stand column made by unioning three cylinders of different sizes\n\nunion() {\n    // Base cylinder\n    cylinder(h=10, d=60, $fn=50);\n    \n    // Middle taper\n    translate([0,0,10])\n        cylinder(h=20, d1=60, d2=40, $fn=50);\n    \n    // Top post\n    translate([0,0,30])\n        cylinder(h=80, d=40, $fn=50);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_stand_top",
    "openscad_code": "// union_stand_top.scad\n// Medium complexity stand top created with union and difference\n\n// Main body disk\ndifference() {\n    union() {\n        // Base disk\n        cylinder(h = 8, d = 80, center = true);\n        \n        // Raised ring\n        translate([0, 0, 4])\n            cylinder(h = 8, d1 = 70, d2 = 75, center = true);\n        \n        // Central post\n        translate([0, 0, 8])\n            cylinder(h = 20, d = 30, center = true);\n    }\n    \n    // Central hole\n    translate([0, 0, 0])\n        cylinder(h = 25, d = 12, center = true);\n    \n    // Four mounting holes\n    for (a = [0:90:270])\n        rotate([0, 0, a])\n            translate([27, 0, 0])\n                cylinder(h = 20, d = 4, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_table_base",
    "openscad_code": "// union_table_base.scad\n// Medium complexity union of shapes forming a table base\n\nmodule union_table_base() {\n    union() {\n        // central column\n        cylinder(h = 80, d = 20, $fn = 32);\n        \n        // top plate\n        translate([0, 0, 80])\n            cube([60, 60, 8], center = true);\n        \n        // four legs\n        for (a = [0:90:270])\n            rotate([0, 0, a])\n                translate([25, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 35, d1 = 12, d2 = 6, $fn = 8);\n        \n        // bottom ring\n        translate([0, 0, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 70, d = 12, $fn = 64);\n    }\n}\n\nunion_table_base();",
    "renders": true
  },
  {
    "shape_combination": "union_table_top",
    "openscad_code": "// union_table_top.scad\n// Medium complexity: union of table top, rounded edges, and chamfered legs\n\nunion() {\n    // main table top\n    cube([120, 80, 8], center = true);\n\n    // rounded front edge\n    translate([0, 40, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 120, r = 4, center = true);\n\n    // rounded back edge\n    translate([0, -40, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 120, r = 4, center = true);\n\n    // chamfered leg supports (4 corners)\n    translate([50, 30, -6])\n        rotate([0, 45, 0])\n            cube([8, 8, 12], center = true);\n\n    translate([-50, 30, -6])\n        rotate([0, 45, 0])\n            cube([8, 8, 12], center = true);\n\n    translate([50, -30, -6])\n        rotate([0, 45, 0])\n            cube([8, 8, 12], center = true);\n\n    translate([-50, -30, -6])\n        rotate([0, 45, 0])\n            cube([8, 8, 12], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_table_leg",
    "openscad_code": "// union_table_leg.scad\n// Medium complexity: union of cylinder, sphere and torus\n\n$fn = 32;\n\n// Main leg cylinder\ncylinder(h = 90, r = 20);\n\n// Spherical foot\ntranslate([0, 0, -5])\n    sphere(r = 25);\n\n// Decorative ring at top\ntranslate([0, 0, 90])\n    rotate_extrude()\n        translate([15, 0, 0])\n            circle(r = 5);\n\n// Support ring at middle\ntranslate([0, 0, 45])\n    rotate_extrude()\n        translate([18, 0, 0])\n            circle(r = 4);\n\n// Top mounting plate\ntranslate([0, 0, 95])\n    cylinder(h = 5, r = 30);",
    "renders": true
  },
  {
    "shape_combination": "union_chair_seat",
    "openscad_code": "// union_chair_seat.scad\n\n// seat plate\nunion() {\n    difference() {\n        // main seat surface\n        cube([120, 110, 8], center=true);\n        // rear left corner notch\n        translate([40, 45, 0])\n            cube([30, 20, 10], center=true);\n        // rear right corner notch\n        translate([-40, 45, 0])\n            cube([30, 20, 10], center=true);\n    }\n    \n    // front edge lip\n    translate([0, -55, -4])\n        cube([120, 8, 4], center=true);\n    \n    // rear support rib\n    translate([0, 40, -7])\n        cube([100, 6, 6], center=true);\n    \n    // two front support ribs\n    translate([40, -20, -7])\n        cube([30, 6, 6], center=true);\n    translate([-40, -20, -7])\n        cube([30, 6, 6], center=true);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_chair_back",
    "openscad_code": "// union_chair_back.scad\n// Medium complexity chair back using unions and differences\n\nunion() {\n    // Main back panel with rounded top\n    difference() {\n        cylinder(h=5, d=80, $fn=64);\n        translate([0, 0, -1])\n            cylinder(h=7, d=75, $fn=64);\n    }\n    \n    // Center spine\n    translate([0, -2.5, 0])\n        cube([8, 5, 60], center=true);\n    \n    // Left support\n    translate([-30, -2.5, 0])\n        cube([8, 5, 50], center=true);\n    \n    // Right support\n    translate([30, -2.5, 0])\n        cube([8, 5, 50], center=true);\n    \n    // Top rail\n    translate([0, 0, 27])\n        cube([70, 5, 10], center=true);\n    \n    // Decorative circles\n    for(x=[-20, 0, 20]) {\n        difference() {\n            translate([x, 0, 15])\n                cylinder(h=5.5, d=12, $fn=32);\n            translate([x, 0, 15])\n                cylinder(h=6, d=8, $fn=32);\n        }\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "union_chair_arm",
    "openscad_code": "// union_chair_arm\ndifference() {\n    // main arm rest shape\n    union() {\n        // top pad\n        translate([0, 0, 15]) cube([60, 120, 15], center = true);\n        // support post\n        translate([0, 0, 7.5]) cylinder(h = 15, r = 12, center = true);\n        // base plate\n        translate([0, 0, 0]) cube([80, 140, 5], center = true);\n    }\n    \n    // screw holes\n    translate([25, 50, 0]) cylinder(h = 20, r = 3, center = true);\n    translate([-25, 50, 0]) cylinder(h = 20, r = 3, center = true);\n    translate([25, -50, 0]) cylinder(h = 20, r = 3, center = true);\n    translate([-25, -50, 0]) cylinder(h = 20, r = 3, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_hook_base",
    "openscad_code": "// union_hook_base.scad\n// Medium complexity union of shapes to form a wall-hook base\n\n$fn = 32;\n\n// Main plate\nunion() {\n    difference() {\n        // Base plate with rounded corners\n        cube([60, 30, 8], center=true);\n        \n        // Screw holes\n        translate([ -20, 0, -4 ])\n            cylinder(r=3, h=10, center=true);\n        translate([ 20, 0, -4 ])\n            cylinder(r=3, h=10, center=true);\n    }\n    \n    // Hook loop\n    translate([ 0, 0, 8 ])\n        rotate([90, 0, 0 ])\n            difference() {\n                torus(12, 4);\n                translate([ 0, -15, 0 ])\n                    cube([30, 30, 30], center=true);\n            }\n    \n    // Reinforcing ribs\n    translate([ 0, 0, 4 ])\n        cube([40, 6, 8], center=true);\n    translate([ 0, 0, 4 ])\n        rotate([0, 0, 90 ])\n            cube([30, 6, 8], center=true);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_hook_curved",
    "openscad_code": "// union_hook_curved - curved hook formed by unioning a torus segment and a cylinder\nunion() {\n    // Curved hook body - partial torus rotated upright\n    rotate([90, 0, 0])\n        rotate_extrude(angle=200)\n            translate([25, 0, 0])\n                circle(r=8);\n    \n    // Hook tip - cylinder to close the end\n    translate([0, -23, 0])\n        rotate([90, 0, 0])\n            cylinder(h=15, r=8, $fn=20);\n    \n    // Mounting base - cylinder for attachment\n    translate([0, 25, 0])\n        cylinder(h=10, r=12, $fn=20);\n}",
    "renders": true
  },
  {
    "shape_combination": "union_knob_body",
    "openscad_code": "union_knob_body() {\n    union() {\n        // Main knob body\n        cylinder(h = 20, r = 15, $fn = 60);\n        \n        // Top grip ring\n        translate([0, 0, 20])\n            cylinder(h = 8, r1 = 17, r2 = 19, $fn = 60);\n        \n        // Base flange\n        translate([0, 0, -2])\n            cylinder(h = 5, r = 18, $fn = 60);\n        \n        // Indicator ridge\n        translate([0, 19, 10])\n            rotate([90, 0, 0])\n            cylinder(h = 15, r1 = 3, r2 = 0, $fn = 20);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "union_knob_top",
    "openscad_code": "// union_knob_top.scad\n// Medium complexity knob top using multiple unions\n\nmodule union_knob_top() {\n    difference() {\n        // Main knob body\n        union() {\n            // Base cylinder\n            cylinder(h=15, d=60, $fn=60);\n            \n            // Top dome\n            translate([0, 0, 15])\n                sphere(d=60, $fn=60);\n            \n            // Grip ridges\n            for(a=[0:60:359])\n                rotate([0, 0, a])\n                    translate([28, 0, 7.5])\n                        cube([8, 2, 15], center=true);\n        }\n        \n        // Central hole\n        translate([0, 0, -5])\n            cylinder(h=35, d=8, $fn=32);\n    }\n}\n\nunion_knob_top();",
    "renders": true
  },
  {
    "shape_combination": "union_button_base",
    "openscad_code": "union_button_base() {\n    // Main button body\n    union() {\n        // Large rounded base\n        cylinder(h = 10, r = 30, $fn = 64);\n        \n        // Raised ring\n        translate([0, 0, 10])\n            cylinder(h = 5, r1 = 28, r2 = 25, $fn = 64);\n        \n        // Center post\n        translate([0, 0, 15])\n            cylinder(h = 8, r = 12, $fn = 32);\n        \n        // Top dome\n        translate([0, 0, 23])\n            sphere(r = 12, $fn = 32);\n        \n        // Side grips (4 cylinders)\n        for(i = [0:90:270]) {\n            rotate([0, 0, i])\n                translate([22, 0, 5])\n                    cylinder(h = 8, r = 4, $fn = 16);\n        }\n    }\n}\n\nunion_button_base();",
    "renders": true
  },
  {
    "shape_combination": "union_button_top",
    "openscad_code": "// union_button_top.scad\n\nmodule union_button_top() {\n    // Main button body\n    union() {\n        // Top dome\n        translate([0, 0, 8])\n            sphere(d = 40, $fn = 60);\n        \n        // Cylindrical base\n        cylinder(h = 8, d = 38, $fn = 60);\n        \n        // Inner cylindrical support\n        translate([0, 0, -2])\n            cylinder(h = 10, d = 20, $fn = 60);\n        \n        // Four corner posts for mounting\n        for(i = [-1, 1])\n            for(j = [-1, 1])\n                translate([i * 15, j * 15, 0])\n                    cylinder(h = 8, d = 5, $fn = 20);\n    }\n}\n\nunion_button_top();",
    "renders": true
  },
  {
    "shape_combination": "union_handle_base",
    "openscad_code": "union_handle_base() {\n    union() {\n        // Main base plate\n        cube([80, 50, 8], center = true);\n        \n        // Handle grip\n        translate([0, 0, 4])\n            cylinder(h = 30, r1 = 12, r2 = 10, center = false);\n        \n        // Reinforcement rib\n        translate([0, 0, 8])\n            cube([15, 50, 6], center = true);\n        \n        // Mounting posts\n        translate([-25, -15, -10])\n            cylinder(h = 20, r = 4, center = false);\n        translate([-25, 15, -10])\n            cylinder(h = 20, r = 4, center = false);\n        translate([25, -15, -10])\n            cylinder(h = 20, r = 4, center = false);\n        translate([25, 15, -10])\n            cylinder(h = 20, r = 4, center = false);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "union_handle_grip",
    "openscad_code": "$fn = 32;\n\nmodule union_handle_grip() {\n    // Main handle cylinder\n    union() {\n        // Central grip tube\n        cylinder(h = 100, r = 15, center = true);\n        \n        // Top grip ring\n        translate([0, 0, 40])\n            cylinder(h = 15, r1 = 20, r2 = 20, center = true);\n        \n        // Bottom grip ring\n        translate([0, 0, -40])\n            cylinder(h = 15, r1 = 20, r2 = 20, center = true);\n        \n        // Cross braces for grip\n        rotate([90, 0, 0])\n            cylinder(h = 30, r = 3, center = true);\n        \n        rotate([0, 90, 0])\n            cylinder(h = 30, r = 3, center = true);\n        \n        rotate([90, 0, 0])\n            translate([0, 0, 25])\n                cylinder(h = 20, r = 3, center = true);\n        \n        rotate([0, 90, 0])\n            translate([0, 0, -25])\n                cylinder(h = 20, r = 3, center = true);\n    }\n}\n\nunion_handle_grip();",
    "renders": true
  },
  {
    "shape_combination": "difference_cube_hole",
    "openscad_code": "difference_cube_hole() {\n    difference() {\n        // Main cube body\n        cube([80, 80, 80], center=true);\n        \n        // Vertical hole\n        cylinder(h=100, d=25, center=true);\n        \n        // Horizontal hole\n        rotate([90, 0, 0])\n            cylinder(h=100, d=20, center=true);\n        \n        // Corner chamfer\n        translate([-40, -40, -40])\n            cube([30, 30, 30]);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_cube_hole_through",
    "openscad_code": "difference() {\n    // Main cube\n    cube([60, 60, 60], center = true);\n    \n    // First hole - vertical through Z\n    cylinder(h = 70, d = 20, center = true, $fn = 32);\n    \n    // Second hole - horizontal through X\n    rotate([0, 90, 0])\n        cylinder(h = 70, d = 15, center = true, $fn = 32);\n    \n    // Third hole - diagonal through XY plane\n    rotate([0, 0, 45])\n        cylinder(h = 90, d = 12, center = true, $fn = 32);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_cube_hole_blind",
    "openscad_code": "difference_cube_hole_blind();\n\nmodule difference_cube_hole_blind() {\n    // Main cube\n    difference() {\n        cube([80, 80, 80], center=true);\n        \n        // Blind hole - cylinder not going all the way through\n        translate([0, 0, 20])\n            cylinder(h=60, d1=30, d2=20, $fn=32);\n        \n        // Additional side hole\n        rotate([0, 90, 0])\n            translate([0, 0, 20])\n                cylinder(h=60, d=25, $fn=32);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_cube_hole_countersunk",
    "openscad_code": "difference_cube_hole_countersunk() {\n    difference() {\n        cube([80, 80, 40], center=true);\n        \n        // countersink + through hole\n        union() {\n            cylinder(h=10, r1=20, r2=10, center=true, $fn=32);\n            translate([0,0,-15])\n                cylinder(h=40, r=10, center=true, $fn=32);\n        }\n        \n        // second countersunk hole on adjacent face\n        rotate([0,90,0])\n            union() {\n                cylinder(h=10, r1=15, r2=8, center=true, $fn=32);\n                translate([0,0,-15])\n                    cylinder(h=30, r=8, center=true, $fn=32);\n            }\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_cube_two_holes",
    "openscad_code": "difference() {\n    // Main cube\n    cube([80, 80, 40], center = true);\n    \n    // First hole - vertical\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 100, d = 20, center = true);\n    \n    // Second hole - horizontal\n    translate([0, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 100, d = 25, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_cube_four_holes",
    "openscad_code": "// difference_cube_four_holes\n// A 100mm cube with four cylindrical holes through each face center\n\n// Main cube\ndifference() {\n    cube([100, 100, 100], center=true);\n    \n    // Hole on +X face\n    translate([50, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=120, d=30, center=true);\n    \n    // Hole on -X face\n    translate([-50, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=120, d=30, center=true);\n    \n    // Hole on +Y face\n    translate([0, 50, 0])\n        rotate([90, 0, 0])\n            cylinder(h=120, d=30, center=true);\n    \n    // Hole on -Y face\n    translate([0, -50, 0])\n        rotate([90, 0, 0])\n            cylinder(h=120, d=30, center=true);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_cube_hole_grid",
    "openscad_code": "// difference_cube_hole_grid\n$fn=32;\n\ndifference() {\n    cube([60,60,30], center=true);\n    \n    // grid of 5x5 holes\n    for (x=[-20,-10,0,10,20])\n    for (y=[-20,-10,0,10,20])\n        translate([x,y,0])\n            cylinder(h=35, d=8, center=true);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_cube_slot",
    "openscad_code": "difference_cube_slot() {\n    difference() {\n        cube([80, 60, 40], center = true);\n        translate([0, 0, 5])\n            cube([70, 50, 50], center = true);\n        translate([0, 0, -25])\n            cube([20, 15, 10], center = true);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_cube_slot_through",
    "openscad_code": "// difference_cube_slot_through.scad\n\ndifference() {\n    // main cube\n    cube([80, 80, 80], center = true);\n    \n    // vertical slot\n    rotate([0, 90, 0])\n        cube([100, 20, 8], center = true);\n    \n    // horizontal slot (perpendicular)\n    rotate([90, 0, 0])\n        cube([100, 20, 8], center = true);\n    \n    // diagonal slot\n    rotate([0, 0, 45])\n        cube([110, 15, 8], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_cube_slot_blind",
    "openscad_code": "difference_cube_slot_blind();\nmodule difference_cube_slot_blind() {\n    difference() {\n        // main cube\n        cube([80, 60, 40], center = true);\n        \n        // blind slot on top\n        translate([0, 0, 20])\n            cube([70, 10, 20], center = true);\n        \n        // two side holes\n        translate([30, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 60, d = 10, center = true);\n        \n        translate([-30, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 60, d = 10, center = true);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_cube_slot_t_shape",
    "openscad_code": "difference_cube_slot_t_shape() {\n    difference() {\n        cube([60, 60, 20], center = true);\n        \n        // horizontal slot\n        translate([0, 0, -1])\n            cube([70, 20, 22], center = true);\n        \n        // vertical slot\n        translate([0, 0, -1])\n            cube([20, 70, 22], center = true);\n        \n        // corner relief\n        translate([0, 0, 11])\n            cylinder(h = 12, r = 5, center = true);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_sphere_hole",
    "openscad_code": "// difference_sphere_hole.scad\n// Medium complexity: sphere with 3 radial holes and one central hole\n\n$fn = 48;\n\n// Main sphere\ndifference() {\n    sphere(d = 100);\n    \n    // Central vertical hole\n    cylinder(h = 120, d = 25, center = true);\n    \n    // First radial hole (X-axis)\n    rotate([0, 90, 0])\n        cylinder(h = 120, d = 20, center = true);\n    \n    // Second radial hole (Y-axis)\n    rotate([90, 0, 0])\n        cylinder(h = 120, d = 20, center = true);\n    \n    // Third radial hole (Z-axis)\n    rotate([0, 0, 0])\n        cylinder(h = 120, d = 20, center = true);\n    \n    // Diagonal hole at 45 degrees\n    rotate([45, 0, 45])\n        cylinder(h = 140, d = 15, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_sphere_hole_small",
    "openscad_code": "difference_sphere_hole_small();\n\nmodule difference_sphere_hole_small() {\n    // Main sphere\n    difference() {\n        sphere(d = 60, $fn = 64);\n        \n        // Central hole\n        cylinder(h = 70, d = 12, center = true, $fn = 32);\n        \n        // Side hole 1\n        translate([20, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 30, d = 8, center = true, $fn = 32);\n        \n        // Side hole 2\n        translate([-20, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 30, d = 8, center = true, $fn = 32);\n        \n        // Top countersink\n        translate([0, 0, 25])\n            cylinder(h = 5, d1 = 20, d2 = 12, center = true, $fn = 32);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_sphere_hole_large",
    "openscad_code": "difference_sphere_hole_large() {\n    difference() {\n        // Large outer sphere\n        sphere(d=100, $fn=64);\n        \n        // Central hole through sphere\n        cylinder(h=120, d=30, center=true, $fn=64);\n        \n        // Second hole perpendicular to first\n        rotate([90, 0, 0])\n            cylinder(h=120, d=25, center=true, $fn=64);\n        \n        // Top countersink\n        translate([0, 0, 45])\n            cylinder(h=10, d1=40, d2=25, center=true, $fn=64);\n        \n        // Bottom countersink\n        translate([0, 0, -45])\n            cylinder(h=10, d1=25, d2=40, center=true, $fn=64);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_sphere_hole_through",
    "openscad_code": "difference_sphere_hole_through() {\n    // Main sphere\n    difference() {\n        sphere(d = 80);\n        \n        // Vertical hole\n        rotate([90, 0, 0]) \n            cylinder(h = 100, d = 30, center = true);\n            \n        // Horizontal hole\n        rotate([0, 90, 0])\n            cylinder(h = 100, d = 25, center = true);\n            \n        // Offset diagonal hole\n        translate([10, 10, 0])\n            rotate([45, 0, 45])\n                cylinder(h = 120, d = 20, center = true);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_cylinder_slot",
    "openscad_code": "difference_cylinder_slot() {\n    difference() {\n        // Main cylinder body\n        cylinder(h = 80, d = 60, $fn = 100);\n        \n        // Horizontal slot through the middle\n        translate([0, 0, 30])\n            rotate([90, 0, 0])\n            cylinder(h = 100, d = 20, $fn = 100);\n        \n        // Vertical slot offset from center\n        translate([10, 0, 40])\n            rotate([0, 90, 0])\n            cylinder(h = 100, d = 15, $fn = 100);\n        \n        // Top chamfer cut\n        translate([0, 0, 70])\n            cylinder(h = 15, d1 = 50, d2 = 60, $fn = 100);\n    }\n}\n\ndifference_cylinder_slot();",
    "renders": true
  },
  {
    "shape_combination": "difference_cylinder_slot_length",
    "openscad_code": "difference_cylinder_slot_length() {\n    height = 60;\n    radius = 30;\n    slot_width = 15;\n    slot_depth = 40;\n\n    difference() {\n        cylinder(h = height, r = radius, center = true);\n\n        // longitudinal slot along full length\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                cube([height + 2, slot_width, slot_depth], center = true);\n\n        // perpendicular cross-slot in middle\n        translate([0, 0, 0])\n            cube([slot_width, radius * 2, slot_depth], center = true);\n    }\n}\n\ndifference_cylinder_slot_length();",
    "renders": true
  },
  {
    "shape_combination": "difference_cylinder_slot_circumference",
    "openscad_code": "difference() {\n    // Outer cylinder\n    cylinder(h = 80, d = 100, $fn = 64);\n    \n    // Slot across circumference\n    rotate([0, 90, 0])\n        cube([120, 10, 100], center = true);\n    \n    // Inner clearance cylinder\n    cylinder(h = 81, d = 80, $fn = 64);\n    \n    // Center hole\n    cylinder(h = 81, d = 20, $fn = 32);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_cylinder_two_slots",
    "openscad_code": "difference() {\n    // Main cylinder body\n    cylinder(h = 60, r = 25, $fn = 64);\n    \n    // First slot - vertical through cylinder\n    rotate([0, 90, 0])\n        cube([40, 5, 50], center = true);\n    \n    // Second slot - horizontal through cylinder\n    rotate([90, 0, 0])\n        cube([40, 5, 50], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_cylinder_keyway",
    "openscad_code": "difference_cylinder_keyway() {\n    // main cylinder\n    cylinder(h = 60, r = 25, $fn = 100);\n    \n    // subtract keyway: centered slot along Z\n    translate([0, -25, 0])\n        cube([6, 50, 60], center = true);\n    \n    // subtract top chamfer\n    translate([0, 0, 55])\n        cylinder(h = 5, r1 = 25, r2 = 22, $fn = 100);\n    \n    // subtract bottom chamfer\n    translate([0, 0, 0])\n        cylinder(h = 5, r1 = 22, r2 = 25, $fn = 100);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_box_hole",
    "openscad_code": "difference_box_hole() {\n    difference() {\n        // main box\n        cube([80, 60, 40], center = true);\n        \n        // center round hole\n        cylinder(h = 45, d = 20, center = true, $fn = 32);\n        \n        // side rectangular hole\n        translate([30, 0, 0])\n            rotate([0, 90, 0])\n            cube([30, 15, 45], center = true);\n        \n        // corner chamfer hole\n        translate([-30, -25, 15])\n            rotate([45, 0, 0])\n            cube([20, 20, 30], center = true);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_box_cavity",
    "openscad_code": "difference_box_cavity() {\n    // Main solid box\n    difference() {\n        cube([60, 40, 30], center = true);\n        \n        // Central cavity\n        cube([50, 30, 25], center = true);\n        \n        // Side holes\n        difference() {\n            cube([60, 40, 30], center = true);\n            \n            // Left hole\n            translate([-30, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 15, r = 8, center = true);\n            \n            // Right hole\n            translate([30, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 15, r = 8, center = true);\n            \n            // Bottom hole\n            translate([0, 0, -15])\n                cylinder(h = 20, r = 10, center = true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_box_notch",
    "openscad_code": "// difference_box_notch.scad\n// Medium complexity: subtract a stepped notch from a box\n\ndifference() {\n    // main box\n    cube([80, 60, 40], center = true);\n\n    // stepped notch cutout\n    translate([10, 0, 0])\n    difference() {\n        // outer notch volume\n        cube([30, 50, 30], center = true);\n\n        // inner relief to create stepped notch\n        translate([5, 0, 5])\n        cube([20, 60, 20], center = true);\n    }\n\n    // additional side cutout\n    translate([-30, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 20, r = 10, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_box_chamfer",
    "openscad_code": "// difference_box_chamfer.scad\n// A box with chamfered edges created by subtracting rotated cubes from a main box\n\ndifference() {\n    // Main box\n    cube([60, 40, 30], center = true);\n    \n    // Chamfer cuts on top edges\n    rotate([45, 0, 0]) translate([0, 0, 15]) cube([62, 4, 4], center = true);\n    rotate([-45, 0, 0]) translate([0, 0, 15]) cube([62, 4, 4], center = true);\n    rotate([0, 45, 0]) translate([0, 0, 15]) cube([4, 42, 4], center = true);\n    rotate([0, -45, 0]) translate([0, 0, 15]) cube([4, 42, 4], center = true);\n    \n    // Chamfer cuts on bottom edges\n    rotate([45, 0, 0]) translate([0, 0, -15]) cube([62, 4, 4], center = true);\n    rotate([-45, 0, 0]) translate([0, 0, -15]) cube([62, 4, 4], center = true);\n    rotate([0, 45, 0]) translate([0, 0, -15]) cube([4, 42, 4], center = true);\n    rotate([0, -45, 0]) translate([0, 0, -15]) cube([4, 42, 4], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_box_corner_cut",
    "openscad_code": "// difference_box_corner_cut.scad\n// Box with rounded corner cutouts\n\nbox_size = 80;\nwall = 4;\ncut_radius = 25;\ncut_depth = 30;\n\ndifference() {\n    // main box shell\n    difference() {\n        cube([box_size, box_size, box_size], center = true);\n        cube([box_size - wall*2, box_size - wall*2, box_size], center = true);\n    }\n    \n    // corner cutouts on top\n    translate([box_size/2 - cut_radius/2, box_size/2 - cut_radius/2, box_size/2])\n        cylinder(r = cut_radius, h = cut_depth, $fn = 32);\n    \n    translate([-box_size/2 + cut_radius/2, box_size/2 - cut_radius/2, box_size/2])\n        rotate([0, 0, 90])\n        cylinder(r = cut_radius, h = cut_depth, $fn = 32);\n    \n    translate([box_size/2 - cut_radius/2, -box_size/2 + cut_radius/2, box_size/2])\n        rotate([0, 0, -90])\n        cylinder(r = cut_radius, h = cut_depth, $fn = 32);\n    \n    translate([-box_size/2 + cut_radius/2, -box_size/2 + cut_radius/2, box_size/2])\n        rotate([0, 0, 180])\n        cylinder(r = cut_radius, h = cut_depth, $fn = 32);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_box_edge_cut",
    "openscad_code": "$fn = 32;\n\ndifference() {\n    // Main box\n    cube([80, 60, 50], center = true);\n    \n    // Edge cutouts\n    translate([0, -30, 0])\n        cube([85, 10, 55], center = true);\n    \n    translate([40, 0, 0])\n        cube([10, 65, 55], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_pyramid_truncated",
    "openscad_code": "// Truncated pyramid with a stepped cavity carved out\ndifference() {\n    // Main truncated pyramid\n    cylinder(h = 60, r1 = 40, r2 = 20, $fn = 6);\n\n    // First removal: large inverted pyramid cavity\n    translate([0, 0, -5])\n        cylinder(h = 70, r1 = 35, r2 = 15, $fn = 6);\n\n    // Second removal: cylinder through the center\n    translate([0, 0, -5])\n        cylinder(h = 70, r = 8, $fn = 32);\n\n    // Third removal: rectangular slot on one side\n    translate([0, -30, 30])\n        rotate([0, 90, 0])\n        cube([50, 15, 20], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_cone_hollow",
    "openscad_code": "// difference_cone_hollow.scad\ndifference() {\n    // outer cone\n    cylinder(h = 80, r1 = 40, r2 = 0);\n    \n    // hollow out center with smaller cone\n    translate([0, 0, 5])\n        cylinder(h = 75, r1 = 35, r2 = 0);\n    \n    // cut off bottom for flat base\n    translate([0, 0, -1])\n        cube([100, 100, 2], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_cone_hollow_thick",
    "openscad_code": "difference() {\n    // Outer cone\n    cylinder(h = 60, r1 = 30, r2 = 0, $fn = 64);\n    \n    // Hollow core cone\n    translate([0, 0, 5])\n        cylinder(h = 55, r1 = 25, r2 = 0, $fn = 64);\n    \n    // Thicken bottom ring\n    difference() {\n        cylinder(h = 10, r1 = 30, r2 = 30, $fn = 64);\n        cylinder(h = 10, r1 = 25, r2 = 25, $fn = 64);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_torus_notch",
    "openscad_code": "// difference_torus_notch.scad\n// Torus with a wedge-shaped notch removed\n\n$fn = 48;\n\ndifference() {\n    rotate([90, 0, 0])\n      torus(40, 15);\n\n    // Wedge notch\n    translate([0, 0, -20])\n      rotate([0, 45, 0])\n        cube([60, 30, 40], center=true);\n\n    // Additional smaller notch\n    translate([0, -25, 0])\n      rotate([0, 0, 45])\n        cube([15, 15, 30], center=true);\n}\n\nmodule torus(major, minor) {\n    rotate_extrude()\n      translate([major, 0, 0])\n        circle(r = minor);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_torus_slot",
    "openscad_code": "// difference_torus_slot.scad\n// Torus with rectangular slot cut through it\n\n$fn = 32;\n\ndifference() {\n    // Main torus\n    rotate_extrude()\n        translate([35, 0, 0])\n            circle(r = 10);\n    \n    // First slot cut - horizontal\n    translate([0, 0, -15])\n        cube([80, 12, 30], center = true);\n    \n    // Second slot cut - vertical (perpendicular)\n    translate([0, 0, -15])\n        rotate([0, 0, 90])\n            cube([80, 12, 30], center = true);\n    \n    // Corner relief cylinders\n    for (a = [45, 135, 225, 315]) {\n        rotate([0, 0, a])\n            translate([35, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 25, r = 6, center = true);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_pillar_fluted",
    "openscad_code": "difference_pillar_fluted();\n\nmodule difference_pillar_fluted() {\n    // Main fluted pillar\n    difference() {\n        // Outer cylinder\n        cylinder(h=100, d=40, $fn=64);\n        \n        // Hollow core\n        cylinder(h=110, d=30, $fn=64);\n        \n        // Flutes (8 vertical grooves)\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([20, 0, -5])\n                    cube([2, 4, 110], center=true);\n        }\n        \n        // Top chamfer\n        translate([0, 0, 95])\n            cylinder(h=5, d1=30, d2=40, $fn=64);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_pillar_groove",
    "openscad_code": "difference_pillar_groove() {\n    difference() {\n        // Main pillar\n        cylinder(h = 100, d = 50, $fn = 64);\n        \n        // Central groove\n        translate([0, 0, 40])\n            cube([40, 3, 20], center = true);\n        \n        // Side grooves\n        translate([0, 15, 60])\n            rotate([0, 90, 0])\n                cylinder(h = 30, d = 8, $fn = 32);\n        \n        translate([0, -15, 60])\n            rotate([0, 90, 0])\n                cylinder(h = 30, d = 8, $fn = 32);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_disk_center_hole",
    "openscad_code": "// Medium complexity: disk with centered hole and chamfered edge\n// Uses difference(), union(), and cylinder primitives\n\n$fn = 48;\n\ndifference() {\n    // Main disk with chamfered edges\n    union() {\n        // Main disk body\n        cylinder(h = 10, d = 80);\n        \n        // Chamfer ring - outer bevel\n        translate([0, 0, 10])\n            cylinder(h = 5, d1 = 80, d2 = 85);\n        \n        // Chamfer ring - bottom bevel\n        translate([0, 0, -5])\n            cylinder(h = 5, d1 = 85, d2 = 80);\n    }\n    \n    // Central hole\n    cylinder(h = 25, d = 20);\n    \n    // Optional: 4 smaller mounting holes\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([30, 0, 0])\n                cylinder(h = 25, d = 6);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_disk_many_holes",
    "openscad_code": "difference() {\n    // Base disk\n    cylinder(h=8, d=100, $fn=64);\n    \n    // Central hole\n    cylinder(h=10, d=20, $fn=32);\n    \n    // Ring of 8 holes around edge\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([35, 0, 0])\n                cylinder(h=10, d=12, $fn=16);\n    }\n    \n    // 4 corner holes\n    translate([30, 30, 0])\n        cylinder(h=10, d=10, $fn=16);\n    translate([-30, 30, 0])\n        cylinder(h=10, d=10, $fn=16);\n    translate([30, -30, 0])\n        cylinder(h=10, d=10, $fn=16);\n    translate([-30, -30, 0])\n        cylinder(h=10, d=10, $fn=16);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_ring_thick_wall",
    "openscad_code": "difference() {\n    // Outer thick ring\n    cylinder(h = 30, r = 50, $fn = 100);\n    \n    // Remove inner hole\n    cylinder(h = 35, r = 30, $fn = 100);\n    \n    // Remove bottom groove\n    translate([0, 0, -1])\n        cube([100, 10, 10], center = true);\n    \n    // Remove top groove\n    translate([0, 0, 29])\n        cube([100, 10, 10], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_ring_thin_wall",
    "openscad_code": "difference() {\n    // outer ring\n    cylinder(h=12, d=80, $fn=100);\n    \n    // inner hole\n    translate([0, 0, -1])\n        cylinder(h=14, d=76, $fn=100);\n    \n    // side cutout 1\n    translate([0, 0, 5])\n        rotate([90, 0, 0])\n        cylinder(h=25, d=10, $fn=32);\n    \n    // side cutout 2 (opposite)\n    translate([0, 0, 5])\n        rotate([-90, 0, 0])\n        cylinder(h=25, d=10, $fn=32);\n    \n    // top cutout\n    translate([0, 0, 12])\n        rotate([0, 0, 0])\n        cylinder(h=25, d=8, $fn=32);\n    \n    // bottom cutout\n    translate([0, 0, -12])\n        rotate([0, 0, 0])\n        cylinder(h=25, d=8, $fn=32);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_box_bottom_hollow",
    "openscad_code": "// difference_box_bottom_hollow.scad\n// Hollow open-top box with rounded interior corners\n\nbox_w = 80;\nbox_d = 60;\nbox_h = 40;\nwall_t = 4;\n\ndifference() {\n    // Outer box\n    cube([box_w, box_d, box_h], center = false);\n    \n    // Inner hollow space\n    translate([wall_t, wall_t, wall_t])\n        cube([box_w - 2*wall_t, box_d - 2*wall_t, box_h], center = false);\n    \n    // Bottom corner fillets\n    translate([wall_t, wall_t, wall_t])\n        cylinder(r = wall_t, h = box_h - wall_t, $fn = 16);\n    translate([box_w - wall_t, wall_t, wall_t])\n        cylinder(r = wall_t, h = box_h - wall_t, $fn = 16);\n    translate([wall_t, box_d - wall_t, wall_t])\n        cylinder(r = wall_t, h = box_h - wall_t, $fn = 16);\n    translate([box_w - wall_t, box_d - wall_t, wall_t])\n        cylinder(r = wall_t, h = box_h - wall_t, $fn = 16);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_box_side_hollow",
    "openscad_code": "difference_box_side_hollow() {\n    difference() {\n        // main 100mm cube\n        cube([100, 100, 100], center = true);\n        \n        // hollow out interior\n        cube([80, 80, 80], center = true);\n        \n        // side slot opening\n        translate([50, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 100, d = 40, center = true);\n        \n        // top ventilation hole\n        translate([0, 0, 50])\n            cylinder(h = 20, d = 30, center = true);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_cylinder_internal",
    "openscad_code": "difference_cylinder_internal() {\n    difference() {\n        // Main cylinder body\n        cylinder(h=80, d=60, $fn=60);\n        \n        // Remove hollow center\n        cylinder(h=80, d=45, $fn=60);\n        \n        // Add internal cross braces\n        difference() {\n            cube([60, 10, 80], center=true);\n            cube([10, 30, 80], center=true);\n        }\n        \n        // Remove top access port\n        translate([0, 0, 70])\n            cylinder(h=15, d=20, $fn=30);\n            \n        // Remove side holes\n        for(i=[1:-1:-1]) {\n            rotate([0, 90, i*120])\n                translate([0, 0, 30])\n                    cylinder(h=20, d=15, $fn=30);\n        }\n    }\n}\n\ndifference_cylinder_internal();",
    "renders": true
  },
  {
    "shape_combination": "difference_cone_internal",
    "openscad_code": "difference_cone_internal() {\n    difference() {\n        // Solid cone\n        cylinder(h = 60, r1 = 25, r2 = 0, $fn = 48);\n        \n        // Internal cavity: inverted cone\n        translate([0, 0, 5])\n            cylinder(h = 55, r1 = 20, r2 = 0, $fn = 48);\n        \n        // Side access hole\n        rotate([0, 90, 0])\n            translate([0, 0, -30])\n                cylinder(h = 60, r = 4, $fn = 32);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_sphere_internal_thin",
    "openscad_code": "difference() {\n    // outer sphere shell\n    sphere(d = 100, $fn = 48);\n    \n    // subtract larger inner sphere to hollow it\n    sphere(d = 96, $fn = 48);\n    \n    // subtract thin vertical cylinder to create internal slot\n    translate([0, 0, -55])\n        cylinder(h = 110, d = 4, $fn = 32);\n    \n    // subtract thin horizontal cylinder for perpendicular slot\n    translate([-55, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 110, d = 4, $fn = 32);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_sphere_internal_thick",
    "openscad_code": "difference_sphere_internal_thick(){\n    difference(){\n        sphere(d = 100, $fn=64);\n        \n        // hollow core\n        sphere(d = 70, $fn=64);\n        \n        // thickening ribs inside\n        rotate([0,90,0]) \n        difference(){\n            cylinder(h = 100, d = 50, center=true, $fn=32);\n            cylinder(h = 110, d = 40, center=true, $fn=32);\n        }\n        \n        rotate([90,0,0]) \n        difference(){\n            cylinder(h = 100, d = 50, center=true, $fn=32);\n            cylinder(h = 110, d = 40, center=true, $fn=32);\n        }\n        \n        rotate([0,0,90]) \n        difference(){\n            cylinder(h = 100, d = 50, center=true, $fn=32);\n            cylinder(h = 110, d = 40, center=true, $fn=32);\n        }\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_pipe_straight",
    "openscad_code": "difference_pipe_straight() {\n    // Main pipe body\n    difference() {\n        // Outer pipe\n        cylinder(h=80, d=40, $fn=64);\n        \n        // Inner hole\n        cylinder(h=82, d=30, $fn=64);\n    }\n    \n    // End caps with holes\n    difference() {\n        // Top cap\n        translate([0, 0, 80])\n            cylinder(h=5, d=45, $fn=64);\n        \n        // Top hole\n        translate([0, 0, 80])\n            cylinder(h=6, d=32, $fn=64);\n    }\n    \n    difference() {\n        // Bottom cap\n            cylinder(h=5, d=45, $fn=64);\n        \n        // Bottom hole\n            cylinder(h=6, d=32, $fn=64);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_pipe_bent",
    "openscad_code": "difference_pipe_bent() {\n    // outer bent pipe\n    rotate([0, 90, 0])\n        rotate_extrude(angle = 90, $fn = 48)\n            translate([30, 0, 0])\n                circle(d = 20);\n\n    // straight extension\n    translate([30, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 40, d = 20, $fn = 48);\n\n    // inner hole\n    difference() {\n        union() {\n            rotate([0, 90, 0])\n                rotate_extrude(angle = 90, $fn = 48)\n                    translate([30, 0, 0])\n                        circle(d = 16);\n\n            translate([30, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 40, d = 16, $fn = 48);\n        }\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_pipe_elbow",
    "openscad_code": "// difference_pipe_elbow.scad\n// Elbow pipe created by subtracting an inner cylinder from a torus segment\n\n$fn = 32;\n\n// Outer elbow\ndifference() {\n    // Solid elbow\n    rotate([90,0,0])\n    rotate_extrude(angle = 90)\n        translate([25,0,0])\n            circle(5);\n    \n    // Inner hollow\n    rotate([90,0,0])\n    rotate_extrude(angle = 90)\n        translate([25,0,0])\n            circle(3);\n}\n\n// End caps\ndifference() {\n    // Outer cap 1\n    translate([0,25,0])\n        rotate([90,0,0])\n            cylinder(h = 5, r = 5);\n    // Inner cap 1\n    translate([0,25,0])\n        rotate([90,0,0])\n            cylinder(h = 5, r = 3);\n}\n\ndifference() {\n    // Outer cap 2\n    translate([25,0,0])\n        cylinder(h = 5, r = 5);\n    // Inner cap 2\n    translate([25,0,0])\n        cylinder(h = 5, r = 3);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_pipe_t_connector",
    "openscad_code": "difference_pipe_t_connector();\n\nmodule difference_pipe_t_connector() {\n    // Main pipe body\n    difference() {\n        // Create T-shaped pipe\n        union() {\n            cylinder(h=100, d=40, center=true);\n            rotate([90, 0, 0]) cylinder(h=100, d=40, center=true);\n        }\n        \n        // Remove internal hollow space\n        union() {\n            cylinder(h=110, d=35, center=true);\n            rotate([90, 0, 0]) cylinder(h=110, d=35, center=true);\n        }\n    }\n    \n    // Remove end openings\n    difference() {\n        // Keep the pipe\n        children();\n        \n        // Cut off ends\n        translate([0, 0, 55]) cylinder(h=10, d=45, center=true);\n        translate([0, 0, -55]) cylinder(h=10, d=45, center=true);\n        translate([55, 0, 0]) rotate([90, 0, 0]) cylinder(h=10, d=45, center=true);\n        translate([-55, 0, 0]) rotate([90, 0, 0]) cylinder(h=10, d=45, center=true);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_pipe_cross",
    "openscad_code": "difference_pipe_cross() {\n    // Main horizontal pipe\n    rotate([0, 90, 0])\n        cylinder(h=100, d=20, center=true);\n    \n    // Vertical pipe\n    cylinder(h=100, d=20, center=true);\n    \n    // Remove crossing hole\n    difference() {\n        union() {\n            // Main horizontal pipe\n            rotate([0, 90, 0])\n                cylinder(h=100, d=20, center=true);\n            \n            // Vertical pipe\n            cylinder(h=100, d=20, center=true);\n        }\n        \n        // Central hole (larger diameter for clean intersection)\n        cylinder(h=120, d=18, center=true);\n        \n        // Horizontal hole through crossing\n        rotate([0, 90, 0])\n            cylinder(h=120, d=18, center=true);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_vase_hollow",
    "openscad_code": "difference_vase_hollow();\n\nmodule difference_vase_hollow() {\n    difference() {\n        // outer vase shape\n        union() {\n            cylinder(h=80, d1=30, d2=50, $fn=100);\n            translate([0, 0, 80])\n                cylinder(h=20, d1=50, d2=45, $fn=100);\n        }\n        \n        // hollow center\n        translate([0, 0, -1])\n            cylinder(h=82, d=25, $fn=100);\n        \n        // decorative cutouts\n        for (i = [0:5]) {\n            rotate([0, 0, i*60])\n                translate([20, 0, 30])\n                    rotate([90, 0, 0])\n                        cylinder(h=20, d=10, $fn=100);\n        }\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_bowl_hollow",
    "openscad_code": "// difference_bowl_hollow.scad\n// Hollow bowl created by subtracting a smaller offset bowl from a larger one\n\ndifference() {\n    // Outer bowl\n    difference() {\n        sphere(d = 100, $fn = 60);\n        translate([0, 0, 40])\n            cube([200, 200, 100], center = true);\n    }\n    \n    // Inner hollow space (offset smaller bowl)\n    translate([0, 0, 2])\n        difference() {\n            sphere(d = 94, $fn = 60);\n            translate([0, 0, 40])\n                cube([200, 200, 100], center = true);\n        }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_cap_hollow",
    "openscad_code": "difference_cap_hollow() {\n    difference() {\n        // main cap body\n        union() {\n            cylinder(h=20, d=60, $fn=60);\n            translate([0,0,20])\n            cylinder(h=15, d1=60, d2=50, $fn=60);\n        }\n        \n        // inner hollow space\n        cylinder(h=33, d=50, $fn=60);\n        \n        // top vent hole\n        translate([0,0,32])\n        cylinder(h=5, d=10, $fn=32);\n        \n        // side vent holes\n        for (a=[0:120:359])\n            rotate([0,0,a])\n            translate([25,0,15])\n            rotate([0,90,0])\n            cylinder(h=5, d=8, $fn=32);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_box_with_drawer",
    "openscad_code": "// difference_box_with_drawer.scad\n\n// outer shell\ndifference() {\n    // main box\n    cube([80, 60, 50], center = true);\n\n    // hollow interior\n    translate([0, 0, 5])\n        cube([74, 54, 45], center = true);\n\n    // drawer slot\n    translate([0, 0, -25])\n        cube([70, 50, 30], center = true);\n}\n\n// drawer body\ntranslate([0, 0, -10])\n    cube([68, 48, 20], center = true);\n\n// drawer front\ntranslate([0, 0, 5])\n    cube([76, 56, 5], center = true);\n\n// drawer handle\ntranslate([0, 30, 5])\n    rotate([90, 0, 0])\n        cylinder(h = 20, d = 10, center = true);",
    "renders": true
  },
  {
    "shape_combination": "difference_box_separator",
    "openscad_code": "difference_box_separator()\n{\n    difference() {\n        // main 100x60x40 mm box\n        cube([100, 60, 40], center = true);\n        \n        // vertical slot divider\n        translate([0, 0, 0])\n            cube([110, 3, 45], center = true);\n        \n        // horizontal slot divider\n        translate([0, 0, 0])\n            cube([110, 65, 3], center = true);\n        \n        // finger holes on front/back\n        translate([0, -31, 10])\n            rotate([90, 0, 0])\n            cylinder(h = 10, d = 20, $fn = 32);\n        translate([0, 31, 10])\n            rotate([90, 0, 0])\n            cylinder(h = 10, d = 20, $fn = 32);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_platform_with_hole",
    "openscad_code": "difference_platform_with_hole() {\n    difference() {\n        union() {\n            // Main platform\n            cube([80, 60, 10], center=true);\n            \n            // Side support\n            translate([40, 0, -10])\n                cube([10, 50, 20], center=true);\n            \n            // Front support\n            translate([0, 35, -10])\n                cube([70, 10, 20], center=true);\n        }\n        \n        // Central hole\n        translate([0, 0, 5])\n            cylinder(h=15, r1=12, r2=12, center=true, $fn=32);\n        \n        // Side holes\n        translate([30, 0, 5])\n            cylinder(h=15, r1=5, r2=5, center=true, $fn=32);\n        translate([-30, 0, 5])\n            cylinder(h=15, r1=5, r2=5, center=true, $fn=32);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_platform_with_slot",
    "openscad_code": "difference_platform_with_slot() {\n    difference() {\n        // Main platform\n        cube([80, 50, 8], center=true);\n        \n        // Central slot\n        translate([0, 0, 1])\n            cube([60, 10, 10], center=true);\n        \n        // Corner holes\n        translate([-30, -20, 0])\n            cylinder(h=10, d=6, center=true);\n        translate([30, -20, 0])\n            cylinder(h=10, d=6, center=true);\n        translate([-30, 20, 0])\n            cylinder(h=10, d=6, center=true);\n        translate([30, 20, 0])\n            cylinder(h=10, d=6, center=true);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_frame_hollow",
    "openscad_code": "// difference_frame_hollow.scad\n// 80x80mm square frame with rounded corners and hollow center\n\nmodule frame() {\n    // outer frame\n    difference() {\n        // main frame body\n        difference() {\n            minkowski() {\n                square([80, 80], center = true);\n                circle(r = 5);\n            }\n            \n            // hollow center\n            minkowski() {\n                square([60, 60], center = true);\n                circle(r = 5);\n            }\n        }\n        \n        // cutout holes on sides\n        translate([0, 40, 0]) rotate([90, 0, 0]) cylinder(h = 20, d = 8);\n        translate([0, -40, 0]) rotate([90, 0, 0]) cylinder(h = 20, d = 8);\n        translate([40, 0, 0]) rotate([0, 90, 0]) cylinder(h = 20, d = 8);\n        translate([-40, 0, 0]) rotate([0, 90, 0]) cylinder(h = 20, d = 8);\n    }\n}\n\nlinear_extrude(height = 10) frame();",
    "renders": true
  },
  {
    "shape_combination": "difference_frame_with_holes",
    "openscad_code": "difference_frame_with_holes() {\n    // Outer frame\n    difference() {\n        // Main frame body\n        cube([80, 80, 10], center=true);\n        \n        // Inner cutout\n        cube([60, 60, 12], center=true);\n        \n        // Corner holes\n        for (x = [-35, 35])\n            for (y = [-35, 35])\n                translate([x, y, 0])\n                    cylinder(h=12, d=8, center=true, $fn=20);\n        \n        // Side holes\n        for (pos = [-25, 0, 25]) {\n            translate([0, pos, 0])\n                cylinder(h=12, d=6, center=true, $fn=20);\n            translate([pos, 0, 0])\n                cylinder(h=12, d=6, center=true, $fn=20);\n        }\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_mounting_plate",
    "openscad_code": "difference() {\n    // main plate 80x60x5 mm\n    cube([80, 60, 5], center=true);\n    \n    // four mounting holes Ø4 mm\n    translate([-30, -20, 0]) cylinder(h=10, d=4, center=true);\n    translate([ 30, -20, 0]) cylinder(h=10, d=4, center=true);\n    translate([-30,  20, 0]) cylinder(h=10, d=4, center=true);\n    translate([ 30,  20, 0]) cylinder(h=10, d=4, center=true);\n    \n    // central large hole Ø20 mm\n    cylinder(h=10, d=20, center=true);\n    \n    // slot on right edge 25x8 mm\n    translate([40+4, 0, 0]) cube([8, 25, 10], center=true);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_mounting_plate_holes",
    "openscad_code": "difference() {\n    // Main mounting plate\n    cube([80, 60, 4], center = true);\n    \n    // Corner mounting holes (M3 clearance)\n    for(x = [-35, 35])\n        for(y = [-25, 25])\n            translate([x, y, -3])\n                cylinder(h = 8, d = 3.5, center = true);\n                \n    // Center hole for cable pass-through\n    translate([0, 0, -3])\n        cylinder(h = 8, d = 12, center = true);\n        \n    // Keying slot\n    translate([0, -28, -3])\n        cube([6, 8, 8], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_bracket_lightweight",
    "openscad_code": "difference_bracket_lightweight();\n\nmodule difference_bracket_lightweight()\n{\n    // Main bracket body\n    difference() {\n        union() {\n            // Base plate\n            cube([60, 40, 4], center=true);\n            \n            // Vertical support\n            translate([20, 0, 17.5])\n                cube([20, 40, 35], center=true);\n                \n            // Top flange\n            translate([40, 0, 35])\n                cube([20, 40, 4], center=true);\n        }\n        \n        // Mounting holes\n        translate([0, 0, -2])\n            cylinder(h=8, d=4, center=true, $fn=20);\n            \n        translate([40, 0, 35-2])\n            cylinder(h=8, d=4, center=true, $fn=20);\n            \n        // Lightening cutouts\n        translate([20, 0, 17.5])\n            cube([15, 35, 30], center=true);\n            \n        translate([0, 0, 0])\n            cube([50, 30, 2], center=true);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "difference_stand_hollow",
    "openscad_code": "difference_stand_hollow();\nmodule difference_stand_hollow(){\n    // overall size ~100 mm\n    difference(){\n        // main stand body\n        union(){\n            // base plate\n            cube([80,60,6], center=true);\n            \n            // vertical pillar\n            translate([0,0,28])\n                cube([20,20,50], center=true);\n                \n            // top platform\n            translate([0,0,56])\n                cube([70,50,6], center=true);\n        }\n        \n        // large hollow cavity\n        translate([0,0,20])\n            cube([60,40,40], center=true);\n            \n        // front cable slot\n        translate([0,30.1,20])\n            cube([20,6,20], center=true);\n            \n        // back cable slot\n        translate([0,-30.1,20])\n            cube([20,6,20], center=true);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_cube_sphere",
    "openscad_code": "// intersection_cube_sphere\n$fn = 48;\n\n// Main intersection: cube and sphere\nintersection() {\n    // Centered cube 60 mm\n    cube([60, 60, 60], center = true);\n    \n    // Sphere diameter 80 mm\n    sphere(d = 80, center = true);\n}\n\n// Optional: add small decorative elements\ntranslate([0, 0, 35])\n    cylinder(h = 5, d = 20, center = true);\n\ntranslate([0, 0, -35])\n    cylinder(h = 5, d = 20, center = true);",
    "renders": true
  },
  {
    "shape_combination": "intersection_cube_sphere_small",
    "openscad_code": "// intersection_cube_sphere_small.scad\n\n// Small cube-sphere intersection with beveled edges\n$fn = 48;\n\nintersection() {\n    // Main cube\n    cube([60, 60, 60], center = true);\n    \n    // Central sphere\n    sphere(d = 70);\n    \n    // Remove top corner for viewing\n    difference() {\n        sphere(d = 70);\n        translate([30, 30, 30]) \n            cube([40, 40, 40], center = true);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_cube_sphere_large",
    "openscad_code": "// intersection_cube_sphere_large\n// Medium complexity: cube intersected with large sphere plus decorative features\n\n$fn = 48;\n\n// Main intersection shape\nintersection() {\n    // Large cube\n    cube([100, 100, 100], center = true);\n    \n    // Larger sphere\n    sphere(d = 120);\n}\n\n// Add small accent spheres at corners\nfor (x = [-1, 1], y = [-1, 1], z = [-1, 1]) {\n    translate([x*45, y*45, z*45]) {\n        sphere(d = 15);\n    }\n}\n\n// Add cylindrical through-holes\ndifference() {\n    intersection() {\n        cube([100, 100, 100], center = true);\n        sphere(d = 120);\n    }\n    \n    // X-axis hole\n    rotate([0, 90, 0]) cylinder(h = 150, d = 20, center = true);\n    \n    // Y-axis hole\n    rotate([90, 0, 0]) cylinder(h = 150, d = 20, center = true);\n    \n    // Z-axis hole\n    cylinder(h = 150, d = 20, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_cube_two_spheres",
    "openscad_code": "// intersection_cube_two_spheres.scad\n\n// Parameters\ncube_size = 80;\nsphere_r1 = 50;\nsphere_r2 = 50;\noffset = 30;\n\n// Main shape: intersection of cube and two offset spheres\nintersection() {\n    cube(cube_size, center=true);\n    \n    union() {\n        translate([-offset, 0, 0])\n            sphere(r=sphere_r1, $fn=48);\n        \n        translate([offset, 0, 0])\n            sphere(r=sphere_r2, $fn=48);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_two_cubes",
    "openscad_code": "// intersection_two_cubes.scad\n\ncube_size = 60;\noffset = 25;\nangle = 35;\n\nintersection() {\n    // First cube\n    cube(cube_size, center = true);\n    \n    // Second cube rotated and offset\n    translate([offset, offset, 0])\n        rotate([0, 0, angle])\n        cube(cube_size, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_cylinder_sphere",
    "openscad_code": "$fn = 50;\n\n// Intersection of cylinder and sphere, centered\nintersection() {\n    cylinder(h = 80, d = 60, center = true);\n    sphere(d = 100);\n}\n\n// Add a small base plate for stability\ntranslate([0, 0, -40])\ndifference() {\n    cylinder(h = 10, d = 80, center = true);\n    cylinder(h = 12, d = 50, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_cylinder_two_spheres",
    "openscad_code": "// intersection_cylinder_two_spheres.scad\n\n$fn = 48;\n\n// two spheres\ntranslate([0, 0, 30]) sphere(d = 80);\ntranslate([0, 0, -30]) sphere(d = 80);\n\n// cylinder that will intersect\nintersection() {\n    cylinder(h = 100, d = 60, center = true);\n    union() {\n        translate([0, 0, 30]) sphere(d = 80);\n        translate([0, 0, -30]) sphere(d = 80);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_two_cylinders",
    "openscad_code": "// intersection_two_cylinders.scad\n// Medium complexity: two cylinders at 90° with beveled ends and mounting holes\n\n$fn = 32;\n\n// First cylinder\ncyl1_d = 40;\ncyl1_h = 80;\n\n// Second cylinder\ncyl2_d = 30;\ncyl2_h = 70;\n\n// Bevel angle\nbevel = 5;\n\n// Mounting holes\nhole_d = 6;\nhole_h = 30;\n\nintersection() {\n    // Main cylinder 1\n    rotate([0, 0, 0])\n        cylinder(d=cyl1_d, h=cyl1_h, center=true);\n    \n    // Main cylinder 2 perpendicular to first\n    rotate([0, 90, 0])\n        cylinder(d=cyl2_d, h=cyl2_h, center=true);\n}\n\n// Add bevels to clean up edges\ndifference() {\n    intersection() {\n        // Beveled cylinder 1\n        rotate([0, 0, 0])\n            cylinder(d1=cyl1_d + bevel*2, d2=cyl1_d, h=cyl1_h + bevel, center=true);\n        \n        // Beveled cylinder 2\n        rotate([0, 90, 0])\n            cylinder(d1=cyl2_d + bevel*2, d2=cyl2_d, h=cyl2_h + bevel, center=true);\n    }\n    \n    // Mounting holes on cylinder 1 ends\n    translate([0, 0, cyl1_h/2 + 1])\n        cylinder(d=hole_d, h=hole_h, center=true);\n    translate([0, 0, -cyl1_h/2 - 1])\n        cylinder(d=hole_d, h=hole_h, center=true);\n    \n    // Mounting holes on cylinder 2 ends\n    translate([cyl2_h/2 + 1, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(d=hole_d, h=hole_h, center=true);\n    translate([-cyl2_h/2 - 1, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(d=hole_d, h=hole_h, center=true);\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_cylinder_cube",
    "openscad_code": "// intersection_cylinder_cube.scad\n\n$fn = 64;\n\n// Main intersection: cylinder and cube\nintersection() {\n    // Centered cylinder along Z\n    cylinder(h = 80, d = 60, center = true);\n    \n    // Rotated cube to create angled intersection\n    rotate([30, 30, 0])\n        cube([80, 80, 80], center = true);\n}\n\n// Optional: visual guide showing original shapes\n%translate([120, 0, 0]) {\n    color(\"red\", 0.3)\n        cylinder(h = 80, d = 60, center = true);\n    \n    color(\"blue\", 0.3)\n        rotate([30, 30, 0])\n            cube([80, 80, 80], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_cone_sphere",
    "openscad_code": "// intersection_cone_sphere.scad\n\n// cone pointing up\ncylinder(h=80, r1=25, r2=0, center=true);\n\n// sphere centered on cone base\ntranslate([0,0,40])\n    sphere(r=40, $fn=64);\n\n// perform intersection\nintersection() {\n    cylinder(h=80, r1=25, r2=0, center=true);\n    translate([0,0,40])\n        sphere(r=40, $fn=64);\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_cone_cylinder",
    "openscad_code": "// Intersection of cone and cylinder\n// Result is a cone with cylindrical hole only where shapes overlap\n\ndifference() {\n    // Keep the overlapping part\n    intersection() {\n        // Main cone\n        cylinder(h = 80, r1 = 40, r2 = 0, center = true);\n        \n        // Intersecting cylinder\n        rotate([90, 0, 0])\n            cylinder(h = 100, r = 25, center = true);\n    }\n    \n    // Remove center portion for clearer view\n    cylinder(h = 100, r = 10, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_torus_sphere",
    "openscad_code": "$fn = 32;\n\n// Torus parameters\nmajor_r = 25;\nminor_r = 10;\n\n// Sphere parameters\nsphere_r = 30;\n\n// Position both shapes centered at origin\nintersection() {\n    // Create torus as swept circle\n    rotate_extrude(angle = 360, $fn = 32)\n        translate([major_r, 0, 0])\n            circle(r = minor_r);\n    \n    // Create sphere\n    sphere(r = sphere_r);\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_pyramid_cube",
    "openscad_code": "// intersection_pyramid_cube: keep only the part of a pyramid that is inside a cube\npyramid_height = 80;\ncube_size = 60;\n\nintersection() {\n    translate([0, 0, -10])\n        cube(cube_size, center = true);\n    \n    rotate([0, 0, 45])\n        linear_extrude(height = pyramid_height, scale = 0.1, center = false)\n            square(70, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_pyramid_cylinder",
    "openscad_code": "// intersection_pyramid_cylinder.scad\n// Intersection of a pyramid and a cylinder\n\nheight = 80;\nbase = 60;\nradius = 35;\n\nrotate([0,0,45])\nintersection() {\n    // Square pyramid\n    translate([0,0,0])\n    cylinder(h = height, r1 = base/2, r2 = 0, $fn = 4);\n    \n    // Vertical cylinder\n    translate([0,0,0])\n    cylinder(h = height, r = radius, $fn = 64);\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_box_cylinder",
    "openscad_code": "// intersection_box_cylinder.scad\n// Medium complexity intersection of a box and a cylinder\n\n// Main intersection\nintersection() {\n    // Large box\n    cube([80, 60, 40], center=true);\n    \n    // Angled cylinder passing through\n    rotate([15, 25, 10]) \n        cylinder(h=120, d=50, center=true);\n}\n\n// Optional: add small fillet at the sharp intersection edge\n// Uncomment below for smoother edge\n/*\ndifference() {\n    intersection() {\n        cube([80, 60, 40], center=true);\n        rotate([15, 25, 10]) \n            cylinder(h=120, d=50, center=true);\n    }\n    \n    // Slightly smaller version to create edge fillet\n    intersection() {\n        cube([78, 58, 38], center=true);\n        rotate([15, 25, 10]) \n            cylinder(h=120, d=48, center=true);\n    }\n}\n*/",
    "renders": true
  },
  {
    "shape_combination": "intersection_box_sphere",
    "openscad_code": "// intersection_box_sphere.scad\n// A box and a sphere intersect to form a rounded cube\n\n$fn = 64;      // sphere smoothness\n\nbox_size = 80; // cube edge length\nsphere_r   = 60; // sphere radius\n\nintersection() {\n    // centered cube\n    cube(box_size, center = true);\n    \n    // sphere centered at same point\n    sphere(sphere_r);\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_box_pyramid",
    "openscad_code": "// intersection_box_pyramid.scad\n// Medium complexity intersection of box and square pyramid\n\nmodule intersection_box_pyramid() {\n    intersection() {\n        // Main box 80x60x50mm\n        cube([80, 60, 50], center=true);\n        \n        // Square pyramid centered on top face of box\n        translate([0, 0, 25]) \n        rotate([0, 0, 45])  // 45-degree rotation for interesting intersection\n        cylinder(\n            h1=60, h2=0,    // pyramid height 60mm\n            r1=40, r2=0,    // base radius 40mm\n            $fn=4           // square pyramid\n        );\n    }\n}\n\nintersection_box_pyramid();",
    "renders": true
  },
  {
    "shape_combination": "intersection_cylindrical_cube",
    "openscad_code": "// intersection of a cylinder and a cube\n$fn = 48;\n\nintersection() {\n    // central cube\n    cube([80, 80, 80], center = true);\n\n    // vertical cylinder\n    cylinder(h = 100, r = 40, center = true);\n\n    // horizontal cylinder along X\n    rotate([0, 90, 0])\n        cylinder(h = 100, r = 30, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_spherical_cube",
    "openscad_code": "// intersection of a sphere and a cube\n// sphere radius 40 mm, cube centered and 70 mm edge length\ndifference() {\n    intersection() {\n        sphere(d = 80, $fn = 64);      // full sphere\n        cube(70, center = true);       // full cube\n    }\n\n    // optional: hollow it out for medium complexity\n    sphere(d = 74, $fn = 64);          // remove inner core\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_cubic_sphere",
    "openscad_code": "// intersection of a cube and sphere\nintersection() {\n    cube([80, 80, 80], center = true);\n    sphere(d = 100, $fn = 48);\n}\n\n// optional base for stability\ntranslate([0, 0, -45]) {\n    difference() {\n        cylinder(h = 10, d = 120, $fn = 48);\n        cylinder(h = 12, d = 110, $fn = 48);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_lens_convex",
    "openscad_code": "// intersection_lens_convex.scad\n// Medium complexity convex lens via intersection of spheres\n\nmodule intersection_lens_convex() {\n    // Full lens body\n    intersection() {\n        // First sphere\n        translate([0, 0, 25])\n            sphere(d = 100, $fn = 64);\n        \n        // Second sphere offset for convexity\n        translate([0, 0, -25])\n            sphere(d = 100, $fn = 64);\n            \n        // Cylinder to flatten edges\n        cylinder(h = 60, d = 80, $fn = 64);\n    }\n    \n    // Center hole (optional, adds detail)\n    difference() {\n        children();\n        translate([0, 0, -30])\n            cylinder(h = 60, d = 10, $fn = 32);\n    }\n}\n\nintersection_lens_convex();",
    "renders": true
  },
  {
    "shape_combination": "intersection_lens_concave",
    "openscad_code": "// intersection_lens_concave.scad\n// Medium-complexity concave lens via intersection of spheres and cylinder\n\n$fn = 50;\n\nmodule intersection_lens_concave() {\n    difference() {\n        // outer lens cylinder\n        cylinder(h = 20, d = 60, center = true);\n        \n        // carve two spherical hollows\n        translate([0, 0, 10])\n            sphere(d = 80);\n        translate([0, 0, -10])\n            sphere(d = 80);\n    }\n    \n    // add thin rim ring\n    difference() {\n        cylinder(h = 5, d1 = 62, d2 = 62, center = true);\n        cylinder(h = 6, d = 58, center = true);\n    }\n}\n\nintersection_lens_concave();",
    "renders": true
  },
  {
    "shape_combination": "intersection_ovoid_sphere",
    "openscad_code": "// intersection_ovoid_sphere.scad\n\n// Ovoid (stretched sphere)\ntranslate([0,0,0]) {\n    intersection() {\n        // Main ellipsoid (ovoid shape)\n        scale([1.4, 1.0, 1.2])\n        sphere(d=60);\n\n        // Intersecting sphere offset to create interesting cut\n        translate([10, -5, 15])\n        sphere(d=70);\n    }\n}\n\n// Optional: centering hole for visual clarity\ndifference() {\n    intersection();\n    %translate([0,0,-5])\n    cylinder(h=100, d=8, center=true);\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_elliptical_cube",
    "openscad_code": "// intersection_elliptical_cube.scad\n// Intersection of rotated elliptical cylinder and cube frame\n\n$fn = 48;\n\nmodule elliptical_cube() {\n    // Main elliptical cylinder\n    rotate([0, 30, 45])\n        scale([1.5, 1, 1])\n            cylinder(h = 100, d = 80);\n    \n    // Cube frame for intersection\n    difference() {\n        cube(100, center = true);\n        // Hollow center\n        cube(60, center = true);\n    }\n}\n\n// Perform intersection\nintersection() {\n    elliptical_cube();\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_diamond_sphere",
    "openscad_code": "$fn = 50;\n\ndifference() {\n    intersection() {\n        scale([1, 1, 0.7])\n        sphere(d = 80);\n        \n        rotate([45, 0, 45])\n        cube(100, center = true);\n    }\n    \n    cylinder(h = 15, d1 = 20, d2 = 15, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_star_sphere",
    "openscad_code": "// intersection_star_sphere.scad\n// Intersection of a 5-point star and a sphere\n\n// Star parameters\nstar_r = 60;\nstar_h = 20;\n\n// Sphere parameters\nsphere_r = 50;\n\n// Create star via linear_extrude of 2D star\nmodule star_5(r, h) {\n    linear_extrude(height = h, center = true)\n        scale([r, r])\n            polygon([\n                [0, 1],\n                [0.22, 0.31],\n                [0.95, 0.31],\n                [0.36, -0.12],\n                [0.59, -0.81],\n                [0, -0.38],\n                [-0.59, -0.81],\n                [-0.36, -0.12],\n                [-0.95, 0.31],\n                [-0.22, 0.31]\n            ]);\n}\n\n// Perform intersection\nintersection() {\n    star_5(star_r, star_h);\n    sphere(sphere_r, $fn = 64);\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_rounded_cube_sphere",
    "openscad_code": "intersection_rounded_cube_sphere() {\n    $fn = 32;\n    \n    difference() {\n        intersection() {\n            minkowski() {\n                cube([60, 60, 60], center = true);\n                sphere(r = 10);\n            }\n            \n            sphere(d = 90);\n        }\n        \n        translate([0, 0, 25])\n            cylinder(h = 40, d = 30, center = true);\n            \n        translate([0, 0, -25])\n            cylinder(h = 40, d = 30, center = true);\n            \n        rotate([90, 0, 0])\n            translate([0, 0, 25])\n            cylinder(h = 40, d = 30, center = true);\n            \n        rotate([90, 0, 0])\n            translate([0, 0, -25])\n            cylinder(h = 40, d = 30, center = true);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "intersection_box_rounded",
    "openscad_code": "$fn = 32;\n\nmodule rounded_box(size = [60, 40, 30], r = 5) {\n    difference() {\n        cube(size, center = true);\n        cube([size.x - 2*r, size.y - 2*r, size.z + 0.1], center = true);\n        cube([size.x - 2*r, size.y + 0.1, size.z - 2*r], center = true);\n        cube([size.x + 0.1, size.y - 2*r, size.z - 2*r], center = true);\n    }\n    intersection() {\n        sphere(r = r);\n        translate([-size.x/2 + r, -size.y/2 + r, -size.z/2 + r]) sphere(r = r);\n        translate([ size.x/2 - r, -size.y/2 + r, -size.z/2 + r]) sphere(r = r);\n        translate([-size.x/2 + r,  size.y/2 - r, -size.z/2 + r]) sphere(r = r);\n        translate([ size.x/2 - r,  size.y/2 - r, -size.z/2 + r]) sphere(r = r);\n        translate([-size.x/2 + r, -size.y/2 + r,  size.z/2 - r]) sphere(r = r);\n        translate([ size.x/2 - r, -size.y/2 + r,  size.z/2 - r]) sphere(r = r);\n        translate([-size.x/2 + r,  size.y/2 - r,  size.z/2 - r]) sphere(r = r);\n        translate([ size.x/2 - r,  size.y/2 - r,  size.z/2 - r]) sphere(r = r);\n    }\n}\n\nintersection() {\n    rounded_box([80, 60, 40], 8);\n    rotate([45, 0, 0])\n    rotate([0, 45, 0])\n    cylinder(h = 100, r = 25, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_box",
    "openscad_code": "// hollow_box.scad\n// difference() between an outer box and an inner box to make it hollow\n\nwall = 3;\n\ndifference() {\n    // outer shell\n    cube([60, 40, 30], center = true);\n\n    // inner void shifted slightly down to leave a thicker bottom\n    translate([0, 0, wall/2])\n        cube([60 - 2*wall, 40 - 2*wall, 30 - wall], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_box_thin_wall",
    "openscad_code": "// hollow_box_thin_wall\n// outer box minus inner box to leave hollow shell\n\nouter_x = 80;\nouter_y = 60;\nouter_z = 50;\nwall = 3;\n\ndifference() {\n    cube([outer_x, outer_y, outer_z], center=true);\n    \n    translate([0,0,wall/2])\n    cube([\n        outer_x - 2*wall,\n        outer_y - 2*wall,\n        outer_z - wall\n    ], center=true);\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_box_thick_wall",
    "openscad_code": "// Hollow box with thick walls using difference()\ndifference() {\n    // Outer box\n    cube([80, 60, 50], center = true);\n    \n    // Inner cavity\n    cube([60, 40, 45], center = true);\n    \n    // Remove bottom face\n    translate([0, 0, -25.1])\n    cube([120, 120, 10], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_box_with_lid",
    "openscad_code": "// hollow_box_with_lid.scad\n// outer box\ndifference() {\n    cube([60, 40, 30], center = true);\n    translate([0, 0, 2])\n        cube([56, 36, 30], center = true);\n}\n\n// lid\ntranslate([0, 0, 32])\n    difference() {\n        cube([64, 44, 4], center = true);\n        translate([0, 0, -1])\n            cube([60, 40, 4], center = true);\n    }\n\n// hinge pins\ntranslate([25, 22, 30])\n    rotate([90, 0, 0])\n    cylinder(h = 5, r = 2, center = true);\n\ntranslate([-25, 22, 30])\n    rotate([90, 0, 0])\n    cylinder(h = 5, r = 2, center = true);",
    "renders": true
  },
  {
    "shape_combination": "hollow_box_with_drawer",
    "openscad_code": "// hollow_box_with_drawer\nwall = 3;\nbox_w = 60;\nbox_d = 50;\nbox_h = 40;\ngap = 1;\n\ndifference() {\n    // outer box\n    cube([box_w, box_d, box_h], center=true);\n    \n    // hollow cavity\n    translate([0,0,wall/2])\n        cube([box_w-2*wall, box_d-2*wall, box_h-wall], center=true);\n    \n    // drawer opening front\n    translate([0, box_d/2, 0])\n        cube([box_w-2*wall+gap, wall+gap, box_h-2*wall+gap], center=true);\n}\n\n// drawer\ndrawer_w = box_w-2*wall-gap*2;\ndrawer_d = box_d-2*wall-gap*2;\ndrawer_h = box_h-2*wall-gap*2;\n\ntranslate([0, -box_d/2 + drawer_d/2 + wall, 0])\ndifference() {\n    // drawer body\n    cube([drawer_w, drawer_d, drawer_h], center=true);\n    \n    // drawer cavity\n    translate([0, 0, wall/2])\n        cube([drawer_w-2*wall, drawer_d-wall*2, drawer_h-wall], center=true);\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_box_two_cavities",
    "openscad_code": "// Hollow box with two internal cavities\n// Outer shell removed, leaving two empty spaces inside\n\ndifference() {\n    // Main solid box\n    cube([80, 60, 40], center=true);\n    \n    // First cavity - shifted left\n    translate([-20, 0, 0])\n        cube([30, 50, 30], center=true);\n    \n    // Second cavity - shifted right\n    translate([20, 0, 0])\n        cube([30, 50, 30], center=true);\n    \n    // Remove bottom to make it hollow\n    translate([0, 0, -21])\n        cube([82, 62, 2], center=true);\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_box_with_separator",
    "openscad_code": "// hollow_box_with_separator\nwall = 2;\nsize = 60;\nheight = 40;\ngap = 30;\n\ndifference() {\n    // outer box\n    cube([size, size, height], center = true);\n    \n    // inner cavity\n    translate([0, 0, wall/2])\n        cube([size - 2*wall, size - 2*wall, height - wall], center = true);\n    \n    // vertical separator slot\n    translate([0, gap/2, wall/2])\n        cube([size - 2*wall, wall, height - wall], center = true);\n    \n    // horizontal separator slot\n    translate([gap/2, 0, wall/2])\n        cube([wall, size - 2*wall, height - wall], center = true);\n}\n\n// vertical separator\ntranslate([0, gap/2, 0])\n    cube([size - 2*wall, wall, height - wall], center = true);\n\n// horizontal separator\ntranslate([gap/2, 0, 0])\n    cube([wall, size - 2*wall, height - wall], center = true);",
    "renders": true
  },
  {
    "shape_combination": "hollow_cylinder_thin",
    "openscad_code": "difference() {\n    // Outer cylinder - main body\n    cylinder(h=80, r=35, $fn=100);\n    \n    // Inner cylinder - creates hollow space\n    cylinder(h=82, r=32, $fn=100);\n    \n    // Bottom cap removal - makes it open at bottom\n    translate([0, 0, -1])\n        cylinder(h=2, r=36, $fn=100);\n    \n    // Top cap removal - makes it open at top\n    translate([0, 0, 79])\n        cylinder(h=2, r=36, $fn=100);\n    \n    // Side hole 1 - perpendicular to axis\n    translate([0, 0, 40])\n        rotate([0, 90, 0])\n            cylinder(h=70, r=8, $fn=50);\n    \n    // Side hole 2 - at 90 degrees to first hole\n    translate([0, 0, 40])\n        rotate([90, 0, 0])\n            cylinder(h=70, r=8, $fn=50);\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_cylinder_thick",
    "openscad_code": "// Hollow thick-walled cylinder with chamfered edges\nheight = 60;\nouter_r = 35;\nwall = 6;\ninner_r = outer_r - wall;\n\ndifference() {\n    // Outer cylinder with rounded top\n    union() {\n        cylinder(h = height, r = outer_r, $fn = 80);\n        translate([0, 0, height])\n            cylinder(h = wall, r1 = outer_r, r2 = outer_r - wall, $fn = 80);\n    }\n    \n    // Inner hollow space\n    union() {\n        // Main inner cylinder\n        translate([0, 0, -1])\n            cylinder(h = height + 2, r = inner_r, $fn = 80);\n        \n        // Chamfer at top edge\n        translate([0, 0, height - 1])\n            cylinder(h = wall + 2, r1 = inner_r + wall, r2 = inner_r, $fn = 80);\n    }\n    \n    // Bottom opening\n    translate([0, 0, -wall - 1])\n        cube([outer_r * 2, outer_r * 2, wall + 1], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_cylinder_with_base",
    "openscad_code": "// hollow_cylinder_with_base\n// cylinder minus cylinder plus base plate\n\ndifference() {\n    // outer cylinder\n    cylinder(h = 80, d = 60, $fn = 64);\n    \n    // inner cylinder to hollow it\n    translate([0, 0, -1])\n        cylinder(h = 82, d = 50, $fn = 64);\n}\n\n// base plate\ntranslate([0, 0, -10])\n    difference() {\n        cylinder(h = 10, d = 80, $fn = 64);\n        translate([0, 0, -1])\n            cylinder(h = 12, d = 50, $fn = 64);\n    }",
    "renders": true
  },
  {
    "shape_combination": "hollow_cylinder_with_top",
    "openscad_code": "// hollow_cylinder_with_top\n// cylinder with hollow center and a flat top cap\n// uses difference() and union()\n\n$fn = 50;\n\nouter_r = 30;\nouter_h = 60;\nwall_t = 5;\ntop_t = 5;\n\ndifference() {\n    union() {\n        // outer cylinder body\n        cylinder(h = outer_h, r = outer_r);\n        \n        // top cap\n        translate([0, 0, outer_h])\n            cylinder(h = top_t, r = outer_r);\n    }\n    \n    // hollow center\n    cylinder(h = outer_h + top_t + 1, r = outer_r - wall_t);\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_cylinder_tapped",
    "openscad_code": "// hollow cylinder with a threaded hole\n$fn = 60;\n\nouter_r = 30;\nouter_h = 60;\nwall_t    = 4;\n\ntap_d = 6;\ntap_h = outer_h + 2;\n\ndifference() {\n    // main hollow tube\n    difference() {\n        cylinder(h = outer_h, r = outer_r, center = true);\n        cylinder(h = outer_h + 2, r = outer_r - wall_t, center = true);\n    }\n    \n    // threaded through-hole\n    cylinder(h = tap_h, r = tap_d/2, center = true);\n    \n    // hex socket on top\n    translate([0,0,outer_h/2])\n        rotate([180,0,0])\n            cylinder(h = 6, r1 = 6/sqrt(3), r2 = 0, center = false);\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_sphere_thin",
    "openscad_code": "// hollow_sphere_thin.scad\n// Create a thin-walled hollow sphere using difference()\n\ndifference() {\n    // Outer sphere\n    sphere(d = 80, $fn = 64);\n    \n    // Inner sphere offset slightly smaller for thin wall\n    translate([0, 0, -0.5])\n        sphere(d = 76, $fn = 64);\n    \n    // Optional: Remove bottom quarter for printing support\n    translate([0, 0, -40])\n        cube([100, 100, 40], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_sphere_thick",
    "openscad_code": "// hollow_sphere_thick: thick-walled hollow sphere\n// outer sphere minus inner sphere\n\nouter_r = 50;\nwall = 8;\ninner_r = outer_r - wall;\n\ndifference() {\n    sphere(outer_r, $fn = 64);\n    sphere(inner_r, $fn = 64);\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_sphere_with_opening",
    "openscad_code": "// hollow sphere with an opening on top\n// outer shell and inner cavity, plus a cylindrical cutout\n\n$fn = 60;\n\ndifference() {\n    // outer sphere\n    sphere(d = 100);\n    \n    // inner cavity\n    sphere(d = 90);\n    \n    // opening on top\n    translate([0, 0, 30])\n        cylinder(h = 80, d = 40, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_sphere_with_base",
    "openscad_code": "// hollow_sphere_with_base.scad\n// A hollow sphere sitting on a circular base\n\n// Parameters\nsphere_r = 30;\nwall_t = 3;\nbase_h = 8;\nbase_r = 35;\n\n// Hollow sphere\ndifference() {\n    sphere(r = sphere_r, $fn = 64);\n    sphere(r = sphere_r - wall_t, $fn = 64);\n}\n\n// Circular base\nunion() {\n    translate([0, 0, -sphere_r]) {\n        cylinder(h = base_h, r = base_r, $fn = 64);\n    }\n    \n    // Remove bottom half of sphere so it sits flat\n    difference() {\n        translate([0, 0, -sphere_r - base_h/2]) {\n            cube([sphere_r*2, sphere_r*2, base_h], center = true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_sphere_half",
    "openscad_code": "// hollow_sphere_half.scad\n// Half a hollow sphere (bowl shape) with a flat base\n\nsphere_r = 50;\nwall_th = 4;\nbase_h = 2;\n\ndifference() {\n    // outer half-sphere\n    intersection() {\n        sphere(sphere_r);\n        translate([0, 0, -sphere_r]) \n            cube([sphere_r*2, sphere_r*2, sphere_r], center = true);\n    }\n    \n    // inner hollow\n    translate([0, 0, wall_th]) {\n        intersection() {\n            sphere(sphere_r - wall_th);\n            translate([0, 0, -(sphere_r - wall_th)]) \n                cube([(sphere_r - wall_th)*2, (sphere_r - wall_th)*2, sphere_r - wall_th], center = true);\n        }\n    }\n    \n    // flat bottom\n    translate([0, 0, -sphere_r - 1]) \n        cube([sphere_r*2.2, sphere_r*2.2, base_h + 2], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_cone_thin",
    "openscad_code": "difference() {\n    // Outer cone\n    cylinder(h = 100, r1 = 50, r2 = 0, $fn = 100);\n    \n    // Inner cone - hollow space\n    translate([0, 0, 2])\n        cylinder(h = 100, r1 = 48, r2 = 0, $fn = 100);\n    \n    // Flat base to close bottom\n    translate([0, 0, -1])\n        cylinder(h = 2, r1 = 50, r2 = 50, $fn = 100);\n    \n    // Remove center from base\n    translate([0, 0, -1])\n        cylinder(h = 4, r1 = 48, r2 = 48, $fn = 100);\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_cone_thick",
    "openscad_code": "// hollow_cone_thick\n// cone with a conical hole inside\n\n$fn = 50;\n\nheight = 80;\nouter_r = 30;\ninner_r = 20;\nwall = 5;\noffset = 3;\n\ndifference() {\n    cylinder(h = height, r1 = outer_r, r2 = 0);\n    \n    translate([0, 0, -offset])\n        cylinder(h = height + 2*offset, r1 = inner_r - wall, r2 = 0);\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_pyramid_thin",
    "openscad_code": "// hollow_pyramid_thin.scad\n// Medium complexity: difference between solid pyramid and inner pyramid\n\ndifference() {\n    // outer pyramid shell\n    linear_extrude(height = 60, center = true)\n        polygon(points = [[-40,-40], [40,-40], [0,40]]);\n    \n    // inner hollow space\n    translate([0, 0, -1])\n        linear_extrude(height = 62, center = true)\n            polygon(points = [[-38,-38], [38,-38], [0,38]]);\n}\n\n// optional base ring for stability\ndifference() {\n    cylinder(h = 5, r1 = 42, r2 = 42, center = true);\n    cylinder(h = 5.2, r1 = 39, r2 = 39, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_pyramid_thick",
    "openscad_code": "difference() {\n    // outer pyramid shell\n    pyramid(size = 80, height = 70);\n\n    // inner hollow space\n    translate([0, 0, 3])\n        scale([0.82, 0.82, 0.9])\n        pyramid(size = 78, height = 68);\n}\n\n// helper module for a centered pyramid\nmodule pyramid(size, height) {\n    linear_extrude(height = height, scale = 0, center = true)\n        square(size, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_box_rounded",
    "openscad_code": "// hollow_box_rounded.scad\n// Medium complexity: rounded hollow box with multiple boolean operations\n\nbox_w = 80;\nbox_h = 60;\nbox_d = 70;\nwall_t = 4;\nr = 8;  // corner radius\n\ndifference() {\n    // outer rounded box\n    minkowski() {\n        cube([box_w - 2*r, box_h - 2*r, box_d - 2*r], center = true);\n        sphere(r);\n    }\n    \n    // inner hollow space\n    minkowski() {\n        cube([box_w - 2*r - 2*wall_t, box_h - 2*r - 2*wall_t, box_d - 2*r], center = true);\n        sphere(r - wall_t);\n    }\n    \n    // cut bottom for open box\n    translate([0, 0, -box_d/2 - 1])\n        cube([box_w + 2, box_h + 2, 2], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "hollow_box_chamfered",
    "openscad_code": "// hollow_box_chamfered.scad\n// Medium-complexity hollow box with chamfered edges\n\nmodule hollow_box_chamfered() {\n    wall = 2;\n    size = 60;\n    chamfer = 5;\n    \n    difference() {\n        // outer chamfered box\n        minkowski() {\n            cube([size-2*chamfer, size-2*chamfer, size-2*chamfer], center=true);\n            cylinder(r=chamfer, h=0.01, $fn=16);\n        }\n        \n        // inner hollow space\n        minkowski() {\n            cube([size-2*wall-2*chamfer, size-2*wall-2*chamfer, size-2*wall-2*chamfer], center=true);\n            cylinder(r=chamfer-wall, h=0.01, $fn=16);\n        }\n        \n        // bottom opening\n        translate([0, 0, -size/2-1])\n            cube([size, size, 2], center=true);\n    }\n}\n\nhollow_box_chamfered();",
    "renders": true
  },
  {
    "shape_combination": "hollow_cylinder_flanged",
    "openscad_code": "// hollow_cylinder_flanged.scad\n// medium-complexity hollow cylinder with top & bottom flanges\n\n$fn = 48;\n\nmodule hollow_cylinder_flanged() {\n    // overall dimensions\n    outer_d = 60;\n    height = 90;\n    wall = 4;\n\n    // flange parameters\n    flange_h = 8;\n    flange_d = 90;\n\n    // bolt pattern\n    bolt_d = 6;\n    bolt_circle_d = 75;\n    n_bolts = 6;\n\n    difference() {\n        union() {\n            // main hollow cylinder\n            difference() {\n                cylinder(d = outer_d, h = height);\n                translate([0, 0, -1])\n                    cylinder(d = outer_d - 2*wall, h = height + 2);\n            }\n\n            // top flange\n            translate([0, 0, height])\n                cylinder(d = flange_d, h = flange_h);\n\n            // bottom flange\n                cylinder(d = flange_d, h = flange_h);\n        }\n\n        // bolt holes top\n        for (i = [0 : n_bolts-1]) {\n            rotate([0, 0, i * 360/n_bolts])\n                translate([bolt_circle_d/2, 0, height + flange_h/2])\n                    rotate([90, 0, 0])\n                        cylinder(d = bolt_d, h = flange_d);\n        }\n\n        // bolt holes bottom\n        for (i = [0 : n_bolts-1]) {\n            rotate([0, 0, i * 360/n_bolts])\n                translate([bolt_circle_d/2, 0, flange_h/2])\n                    rotate([90, 0, 0])\n                        cylinder(d = bolt_d, h = flange_d);\n        }\n    }\n}\n\nhollow_cylinder_flanged();",
    "renders": true
  },
  {
    "shape_combination": "hollow_cylinder_threaded",
    "openscad_code": "difference() {\n    // outer cylinder\n    cylinder(h = 60, d = 50, $fn = 32);\n\n    // inner cylinder to hollow it out\n    cylinder(h = 60, d = 40, $fn = 32);\n\n    // threaded groove - spiral cut\n    translate([0, 0, -1])\n        rotate_extrude($fn = 32)\n            translate([22.5, 0])\n                square([2.5, 62]);\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_top",
    "openscad_code": "$fn = 40;\n\n// Main cylinder body\ndifference() {\n    // Outer cylinder with top\n    union() {\n        cylinder(h = 60, d = 40, center = false);\n        translate([0, 0, 60])\n            cylinder(h = 10, d = 50, center = false);\n    }\n    \n    // Central hole\n    translate([0, 0, -1])\n        cylinder(h = 72, d = 15, center = false);\n    \n    // Side holes at 90 degrees\n    for (a = [0, 90, 180, 270]) {\n        rotate([0, 0, a]) {\n            translate([20, 0, 30])\n                rotate([0, 90, 0])\n                    cylinder(h = 50, d = 8, center = true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_top_conical",
    "openscad_code": "// cylinder_with_top_conical.scad\n// medium-complexity: cylinder + cone, hollowed by inner cylinder\n\ndifference() {\n    union() {\n        // main cylinder body\n        cylinder(h = 60, r = 25, $fn = 64);\n\n        // conical top added to cylinder\n        translate([0, 0, 60])\n            cylinder(h = 30, r1 = 25, r2 = 0, $fn = 64);\n    }\n\n    // central hole through both parts\n    cylinder(h = 100, r = 12, $fn = 48);\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_top_spherical",
    "openscad_code": "// cylinder_with_top_spherical.scad\n\n// cylinder capped with a sphere on top\nunion() {\n    // main cylinder body\n    cylinder(h = 60, r = 25, $fn = 100);\n\n    // sphere sitting on top\n    translate([0, 0, 60])\n        sphere(r = 25, $fn = 100);\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_top_rounded",
    "openscad_code": "// cylinder_with_top_rounded.scad\n// Medium complexity: cylinder + rounded top via difference/union\n\n$fn=36;\n\nmodule cylinder_with_top_rounded() {\n    h = 80;          // total height\n    r = 30;          // cylinder radius\n    rounding = 15;   // rounding radius\n\n    difference() {\n        union() {\n            // straight cylindrical base\n            cylinder(h=h-rounding, r=r, center=false);\n\n            // rounded cap (upper half of sphere)\n            translate([0, 0, h-rounding])\n                sphere(r=rounding);\n        }\n\n        // cut off lower half of sphere to leave dome\n        translate([0, 0, h-rounding])\n            cube([r*2+1, r*2+1, rounding], center=true);\n    }\n}\n\ncylinder_with_top_rounded();",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_base",
    "openscad_code": "difference() {\n    // Main cylinder\n    cylinder(h = 60, r = 40, $fn = 100);\n    \n    // Base plate\n    translate([0, 0, -5])\n        cube([100, 100, 5], center = true);\n    \n    // Central hole\n    translate([0, 0, -10])\n        cylinder(h = 80, r = 15, $fn = 50);\n    \n    // Side cutouts\n    translate([0, 50, 30])\n        rotate([0, 90, 0])\n            cylinder(h = 100, r = 20, $fn = 50);\n    \n    translate([50, 0, 30])\n        rotate([0, 90, 0])\n            cylinder(h = 100, r = 20, $fn = 50);\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_base_cylindrical",
    "openscad_code": "// cylinder_with_base_cylindrical\n// cylinder on a larger cylindrical base with screw holes\n\nbase_r = 25;\nbase_h = 10;\n\ncyl_r = 12;\ncyl_h = 40;\n\nhole_r = 2.5;\nhole_h = base_h + 1;\n\ndifference() {\n    union() {\n        // base cylinder\n        cylinder(h = base_h, r = base_r, $fn = 60);\n        \n        // upper cylinder\n        translate([0, 0, base_h])\n            cylinder(h = cyl_h, r = cyl_r, $fn = 60);\n    }\n    \n    // screw holes in base\n    for (a = [0:120:359])\n        rotate([0, 0, a])\n            translate([base_r * 0.7, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = hole_h, r = hole_r, $fn = 16);\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_base_flanged",
    "openscad_code": "// cylinder_with_base_flanged\n$fn = 32;\n\n// main cylinder\ncylinder(h = 60, r = 20);\n\n// flanged base\ntranslate([0, 0, -5])\ndifference() {\n    cylinder(h = 10, r = 35);\n    \n    // center hole\n    cylinder(h = 12, r = 21);\n}\n\n// mounting holes\nfor (a = [0:90:270])\nrotate([0, 0, a])\ntranslate([28, 0, -2])\ncylinder(h = 14, r = 3);",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_base_threaded",
    "openscad_code": "module cylinder_with_base_threaded() {\n    // Main cylinder\n    cylinder(h = 60, r = 25, $fn = 64);\n    \n    // Base flange\n    translate([0, 0, -5])\n        cylinder(h = 10, r = 35, $fn = 64);\n    \n    // Threaded hole\n    difference() {\n        // Hole body\n        translate([0, 0, -10])\n            cylinder(h = 80, r = 15, $fn = 64);\n        \n        // Thread grooves\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([12, 0, -10 + i * 12])\n                    cylinder(h = 10, r = 3, $fn = 16);\n        }\n    }\n    \n    // Mounting holes\n    for (a = [0:120:359]) {\n        rotate([0, 0, a])\n            translate([28, 0, -5])\n                cylinder(h = 10, r = 3.5, $fn = 16);\n    }\n}\n\ncylinder_with_base_threaded();",
    "renders": true
  },
  {
    "shape_combination": "box_with_lid",
    "openscad_code": "// box_with_lid.scad\n// Medium complexity box with press-fit lid using boolean ops\n\nbox_w = 60; box_d = 40; box_h = 30;\nwall_t = 2.5;\nlip_h = 4;\n\nmodule box() {\n    difference() {\n        // outer shell\n        cube([box_w, box_d, box_h]);\n        // inner cavity\n        translate([wall_t, wall_t, wall_t])\n            cube([box_w-2*wall_t, box_d-2*wall_t, box_h-wall_t]);\n        // lip recess for lid\n        translate([wall_t, wall_t, box_h-wall_t])\n            cube([box_w-2*wall_t, box_d-2*wall_t, lip_h]);\n    }\n}\n\nmodule lid() {\n    difference() {\n        // lid plate\n        cube([box_w, box_d, wall_t]);\n        // finger notch\n        translate([box_w/2-7, -1, 0])\n            cube([14, wall_t+2, wall_t]);\n    }\n    // lip tongue\n    translate([wall_t, wall_t, wall_t])\n        cube([box_w-2*wall_t, box_d-2*wall_t, lip_h]);\n}\n\n// preview assembly\ntranslate([0, 0, 0]) box();\ntranslate([0, box_d+10, 0]) lid();",
    "renders": true
  },
  {
    "shape_combination": "box_with_lid_snapping",
    "openscad_code": "// Box with lid and snap-fit\nbox_w = 60;\nbox_h = 40;\nbox_d = 40;\nwall = 2;\nsnap = 3;\n\nmodule box() {\n    difference() {\n        cube([box_w, box_d, box_h]);                 // outer shell\n        translate([wall, wall, wall])\n            cube([box_w-2*wall, box_d-2*wall, box_h]); // hollow\n    }\n    // snap ridges on sides\n    translate([-snap/2, box_d/2-2, box_h/2])\n        cube([snap, 4, 2]);\n    translate([box_w-snap/2, box_d/2-2, box_h/2])\n        cube([snap, 4, 2]);\n}\n\nmodule lid() {\n    difference() {\n        union() {\n            translate([0,0,wall])\n                cube([box_w, box_d, wall]);          // lid plate\n            cube([box_w, box_d, wall]);              // lip\n        }\n        translate([wall, wall, wall])\n            cube([box_w-2*wall, box_d-2*wall, wall+1]); // underside cavity\n    }\n    // snap notches\n    translate([-1, box_d/2-2, wall/2])\n        cube([snap+1, 4, wall+1]);\n    translate([box_w-snap, box_d/2-2, wall/2])\n        cube([snap+1, 4, wall+1]);\n}\n\ntranslate([0,0,0]) box();\ntranslate([0, box_d+10, 0]) lid();",
    "renders": true
  },
  {
    "shape_combination": "box_with_lid_hinged",
    "openscad_code": "module box_with_lid_hinged(){\n    // Box\n    difference(){\n        cube([60,40,30], center=true);\n        cube([55,35,25], center=true);\n    }\n    \n    // Lid\n    translate([0,0,30])\n    rotate([0,180,0])\n    difference(){\n        cube([60,40,10], center=true);\n        cube([55,35,8], center=true);\n    }\n    \n    // Hinge pin\n    translate([30,0,30])\n    cylinder(h=5, r=2, center=true);\n    \n    // Hinge loops on box\n    translate([30,0,25])\n    difference(){\n        cylinder(h=8, r=3, center=true);\n        cylinder(h=9, r=1.5, center=true);\n    }\n    \n    // Hinge loops on lid\n    translate([30,0,30])\n    rotate([0,180,0])\n    difference(){\n        cylinder(h=7, r=3, center=true);\n        cylinder(h=8, r=1.5, center=true);\n    }\n}\n\nbox_with_lid_hinged();",
    "renders": true
  },
  {
    "shape_combination": "box_with_drawer",
    "openscad_code": "// Medium-complexity box_with_drawer\n// Outer shell (box) minus inner cavity, plus drawer\n\n$fn = 32;\n\n// Box shell\ndifference() {\n    cube([80, 60, 50], center = true);\n    \n    // Inner cavity for storage\n    translate([0, 0, 5])\n        cube([74, 54, 45], center = true);\n}\n\n// Drawer body\ntranslate([0, 0, -15])\n    union() {\n        difference() {\n            // Drawer front\n            translate([0, 0, 0])\n                cube([76, 56, 10], center = true);\n            \n            // Finger hole\n            translate([0, 28, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 12, d = 20, center = true);\n        }\n        \n        // Drawer box\n        translate([0, 0, -15])\n            cube([70, 50, 20], center = true);\n    }",
    "renders": true
  },
  {
    "shape_combination": "box_with_drawer_sliding",
    "openscad_code": "// Box with sliding drawer – medium complexity\nwall = 3;\nouter = [80, 60, 50];\ninner = outer - [wall*2, wall*2, wall];\n\n// Main shell\ndifference() {\n    cube(outer);\n    translate([wall, wall, wall])\n        cube(inner);\n}\n\n// Drawer body\ntranslate([wall, wall, -wall]) {\n    difference() {\n        cube([inner.x, inner.y - 10, inner.z]);\n        translate([10, 5, 5])\n            cube([inner.x - 20, inner.y - 20, inner.z - 10]);\n    }\n}\n\n// Pull handle\ntranslate([outer.x/2, outer.y - 5, outer.z/2])\n    difference() {\n        cube([20, 10, 10], center = true);\n        cylinder(h = 11, d = 8, center = true);\n    }",
    "renders": true
  },
  {
    "shape_combination": "box_with_drawer_sectioned",
    "openscad_code": "// Box with drawer sectioned\nbox_w = 80;\nbox_d = 50;\nbox_h = 60;\nwall = 4;\ngap = 1;\n\nmodule box_shell() {\n    difference() {\n        cube([box_w, box_d, box_h]);\n        // Hollow interior\n        translate([wall, wall, wall])\n            cube([box_w - 2*wall, box_d - 2*wall, box_h - wall]);\n        // Front opening for drawer\n        translate([wall, 0, wall])\n            cube([box_w - 2*wall, wall + gap, box_h - 2*wall]);\n    }\n}\n\nmodule drawer() {\n    drawer_w = box_w - 2*wall - 2*gap;\n    drawer_d = box_d - wall - 3*gap;\n    drawer_h = box_h - 2*wall - 2*gap;\n    difference() {\n        // Drawer body\n        translate([wall + gap, wall + 2*gap, wall + gap])\n            cube([drawer_w, drawer_d, drawer_h]);\n        // Cut drawer in half for section view\n        translate([wall + gap, wall + 2*gap, wall + gap + drawer_h/2])\n            cube([drawer_w, drawer_d, drawer_h]);\n        // Handle hole\n        translate([box_w/2 - 5, wall + 2*gap + drawer_d - 6, wall + gap + drawer_h/2 - 3])\n            cube([10, 3, 6]);\n    }\n}\n\nunion() {\n    box_shell();\n    drawer();\n}",
    "renders": true
  },
  {
    "shape_combination": "tube_with_flange",
    "openscad_code": "// tube_with_flange.scad\n// Medium-complexity tube with mounting flange\n\n$fn = 32;\n\n// Main tube\ndifference() {\n    union() {\n        // Tube body\n        cylinder(h = 60, d = 30);\n        \n        // Flange base\n        translate([0, 0, 60])\n            cylinder(h = 10, d = 60);\n        \n        // Fillet at flange junction\n        translate([0, 0, 55])\n            cylinder(h = 5, d1 = 30, d2 = 60);\n    }\n    \n    // Central bore\n    cylinder(h = 75, d = 20);\n    \n    // Mounting holes\n    for (a = [0:60:359])\n        rotate([0, 0, a])\n            translate([25, 0, 60])\n                cylinder(h = 10, d = 5);\n}",
    "renders": true
  },
  {
    "shape_combination": "tube_with_flange_one_end",
    "openscad_code": "difference() {\n    // Main tube body\n    cylinder(h = 80, d = 40, $fn = 32);\n    \n    // Flange at one end\n    translate([0, 0, 75])\n        cylinder(h = 10, d = 70, $fn = 32);\n    \n    // Central hole through tube and flange\n    translate([0, 0, -1])\n        cylinder(h = 87, d = 30, $fn = 32);\n    \n    // Mounting holes in flange\n    for (i = [0:3])\n        rotate([0, 0, i * 90])\n            translate([25, 0, 75])\n            cylinder(h = 12, d = 5, $fn = 16);\n}",
    "renders": true
  },
  {
    "shape_combination": "tube_with_flange_both_ends",
    "openscad_code": "// tube_with_flange_both_ends\n// Medium complexity: tube + flanges at both ends via unions & differences\n\nmodule tube_with_flange_both_ends() {\n    tube_od = 20;\n    tube_id = 16;\n    tube_h = 80;\n\n    flange_od = 40;\n    flange_id = tube_id;\n    flange_h = 8;\n\n    // lower flange\n    difference() {\n        cylinder(h = flange_h, d = flange_od, $fn = 32);\n        cylinder(h = flange_h + 0.1, d = flange_id, $fn = 32);\n    }\n\n    // tube body\n    translate([0, 0, flange_h])\n        difference() {\n            cylinder(h = tube_h, d = tube_od, $fn = 32);\n            cylinder(h = tube_h + 0.2, d = tube_id, $fn = 32);\n        }\n\n    // upper flange\n    translate([0, 0, flange_h + tube_h])\n        difference() {\n            cylinder(h = flange_h, d = flange_od, $fn = 32);\n            cylinder(h = flange_h + 0.1, d = flange_id, $fn = 32);\n        }\n}\n\ntube_with_flange_both_ends();",
    "renders": true
  },
  {
    "shape_combination": "tube_with_flange_center",
    "openscad_code": "// tube with centered flange\n$fn = 36;\n\nmodule tube_with_flange_center() {\n    // tube body\n    difference() {\n        cylinder(h = 80, d = 40);           // outer tube\n        cylinder(h = 82, d = 30);           // inner hole\n    }\n    \n    // flange plate\n    difference() {\n        cube([80, 80, 8], center = true);   // flange\n        cylinder(h = 10, d = 42);           // hole in flange\n    }\n    \n    // chamfer on tube top\n    difference() {\n        cylinder(h = 5, d1 = 40, d2 = 36);  // top chamfer\n        cylinder(h = 5, d = 30);            // remove inner\n    }\n}\n\ntube_with_flange_center();",
    "renders": true
  },
  {
    "shape_combination": "tube_with_connector",
    "openscad_code": "// tube_with_connector\ndifference() {\n    union() {\n        // main tube\n        cylinder(h=80, d=30, center=true);\n        \n        // connector collar\n        translate([0, 0, 40])\n        cylinder(h=15, d1=40, d2=30, center=false);\n        \n        // mounting flange\n        translate([0, 0, -50])\n        cylinder(h=10, d=50, center=false);\n    }\n    \n    // central bore\n    cylinder(h=100, d=20, center=true);\n    \n    // bolt holes\n    for (a = [0:120:359])\n        rotate([0, 0, a])\n        translate([20, 0, -50])\n        cylinder(h=12, d=4, center=false);\n}",
    "renders": true
  },
  {
    "shape_combination": "tube_with_connector_t",
    "openscad_code": "// tube_with_connector_t.scad\n// Medium complexity: tube + T-shaped connector via union/difference\n\n$fn = 36;\n\nmodule tube_with_connector_t() {\n    // Main tube\n    difference() {\n        cylinder(h = 80, d = 30, center = true);\n        cylinder(h = 82, d = 26, center = true);\n    }\n\n    // T-connector branch\n    translate([0, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        union() {\n            // Connector tube\n            cylinder(h = 35, d = 20, center = true);\n            // Reinforcement discs\n            translate([0, 0, 17])\n            cylinder(h = 4, d = 30);\n            translate([0, 0, -17])\n            cylinder(h = 4, d = 30);\n        }\n        // Hollow it\n        cylinder(h = 37, d = 16, center = true);\n    }\n\n    // Cut slot in main tube for T pass-through\n    translate([0, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 40, d = 21, center = true);\n}\n\ntube_with_connector_t();",
    "renders": true
  },
  {
    "shape_combination": "tube_with_connector_cross",
    "openscad_code": "module tube_with_connector_cross() {\n    // main tube\n    difference() {\n        cylinder(h = 100, d = 30, center = true);\n        cylinder(h = 110, d = 26, center = true);\n    }\n\n    // perpendicular connector\n    rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 50, d = 20, center = true);\n            cylinder(h = 60, d = 16, center = true);\n        }\n\n    // cross connector\n    rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 50, d = 20, center = true);\n            cylinder(h = 60, d = 16, center = true);\n        }\n\n    // union of all parts\n    union() {\n        %tube_with_connector_cross();\n    }\n}\n\ntube_with_connector_cross();",
    "renders": true
  },
  {
    "shape_combination": "tube_with_connector_elbow",
    "openscad_code": "module tube_with_connector_elbow() {\n    // Main tube\n    difference() {\n        cylinder(h = 100, d = 20, $fn = 64);\n        cylinder(h = 100, d = 14, $fn = 64);\n    }\n    \n    // Elbow connector\n    rotate([90, 0, 0]) {\n        translate([0, 0, -10]) {\n            difference() {\n                cylinder(h = 30, d = 20, $fn = 64);\n                cylinder(h = 30, d = 14, $fn = 64);\n            }\n        }\n    }\n    \n    // Connector flange\n    translate([0, 0, 100]) {\n        difference() {\n            cylinder(h = 5, d = 30, $fn = 32);\n            cylinder(h = 5, d = 20, $fn = 32);\n        }\n    }\n    \n    // Second flange\n    translate([0, 20, 0]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 5, d = 30, $fn = 32);\n                cylinder(h = 5, d = 20, $fn = 32);\n            }\n        }\n    }\n}\n\ntube_with_connector_elbow();",
    "renders": true
  },
  {
    "shape_combination": "cube_with_rounded_corners",
    "openscad_code": "// cube_with_rounded_corners.scad\n// rounded edges on a 60 mm cube using spheres and cylinders\n\nsize = 60;\nr = 8;\n\nmodule corner(x,y,z){\n    translate([x*size/2-r, y*size/2-r, z*size/2-r])\n        sphere(r);\n}\n\nmodule edge(cx,cy,cz,rx,ry,rz){\n    translate([cx*(size/2-r), cy*(size/2-r), cz*(size/2-r)])\n        rotate([rx,ry,rz])\n            cylinder(h=size-2*r, r=r, center=true);\n}\n\ndifference(){\n    cube(size, center=true);\n    \n    // negative corners\n    for(i=[-1,1], j=[-1,1], k=[-1,1])\n        corner(i,j,k);\n\n    // negative edges\n    for(i=[-1,1])\n        edge(i,0,0,0,90,0);\n    for(j=[-1,1])\n        edge(0,j,0,90,0,0);\n    for(k=[-1,1])\n        edge(0,0,k,0,0,90);\n}\n\n// add positive rounded corners and edges\nunion(){\n    difference(){\n        cube(size-2*r, center=true);\n    }\n    \n    for(i=[-1,1], j=[-1,1], k=[-1,1])\n        corner(i,j,k);\n    for(i=[-1,1])\n        edge(i,0,0,0,90,0);\n    for(j=[-1,1])\n        edge(0,j,0,90,0,0);\n    for(k=[-1,1])\n        edge(0,0,k,0,0,90);\n}",
    "renders": true
  },
  {
    "shape_combination": "cube_with_rounded_corners_large",
    "openscad_code": "module rounded_cube(size, r) {\n    hull() {\n        for (x = [0, 1], y = [0, 1], z = [0, 1]) {\n            translate([x ? size.x - r : r, y ? size.y - r : r, z ? size.z - r : r])\n                sphere(r);\n        }\n    }\n}\n\nmodule cube_with_rounded_corners_large() {\n    difference() {\n        rounded_cube([100, 100, 100], 10);\n        translate([0, 0, -1]) cube([80, 80, 102], center = true);\n    }\n}\n\ncube_with_rounded_corners_large();",
    "renders": true
  },
  {
    "shape_combination": "cube_with_rounded_corners_small",
    "openscad_code": "module cube_with_rounded_corners_small(size = 40, r = 5) {\n    // Main rounded cube body\n    difference() {\n        // Outer rounded cube\n        minkowski() {\n            cube([size - 2*r, size - 2*r, size - 2*r], center = true);\n            sphere(r);\n        }\n        \n        // Hollow out center to reduce material\n        cube([size - 2*r - 4, size - 2*r - 4, size - 2*r - 4], center = true);\n    }\n    \n    // Add small corner spheres for detail\n    for(x = [-1, 1], y = [-1, 1], z = [-1, 1]) {\n        translate([x*(size/2 - r), y*(size/2 - r), z*(size/2 - r)])\n            sphere(r/2);\n    }\n}\n\ncube_with_rounded_corners_small();",
    "renders": true
  },
  {
    "shape_combination": "cube_with_chamfer",
    "openscad_code": "// cube_with_chamfer.scad\n// Medium complexity: chamfers on all top edges via difference()\n\ndifference() {\n    // Main cube\n    cube([60, 60, 60], center = true);\n    \n    // Remove top chamfers\n    translate([30, 30, 30]) rotate([45, 0, 45]) cylinder(h = 50, d = 50, $fn = 4);\n    translate([-30, 30, 30]) rotate([45, 0, -45]) cylinder(h = 50, d = 50, $fn = 4);\n    translate([30, -30, 30]) rotate([-45, 0, 45]) cylinder(h = 50, d = 50, $fn = 4);\n    translate([-30, -30, 30]) rotate([-45, 0, -45]) cylinder(h = 50, d = 50, $fn = 4);\n    \n    // Remove bottom chamfers\n    translate([30, 30, -30]) rotate([45, 0, 45]) cylinder(h = 50, d = 50, $fn = 4);\n    translate([-30, 30, -30]) rotate([45, 0, -45]) cylinder(h = 50, d = 50, $fn = 4);\n    translate([30, -30, -30]) rotate([-45, 0, 45]) cylinder(h = 50, d = 50, $fn = 4);\n    translate([-30, -30, -30]) rotate([-45, 0, -45]) cylinder(h = 50, d = 50, $fn = 4);\n}",
    "renders": true
  },
  {
    "shape_combination": "cube_with_chamfer_wide",
    "openscad_code": "// cube_with_chamfer_wide.scad\n// Medium complexity: subtract four chamfers from a cube\n\nchamfer = 8;\nsize = 60;\nwide = 100;\n\ndifference() {\n    // Main wide cube body\n    cube([wide, size, size], center = true);\n    \n    // Top-front chamfer\n    rotate([45, 0, 0])\n        translate([0, 0, size/2 + chamfer/2])\n            cube([wide + 2, size + 2, chamfer], center = true);\n    \n    // Top-back chamfer\n    rotate([-45, 0, 0])\n        translate([0, 0, size/2 + chamfer/2])\n            cube([wide + 2, size + 2, chamfer], center = true);\n    \n    // Bottom-front chamfer\n    rotate([-45, 0, 0])\n        translate([0, 0, -size/2 - chamfer/2])\n            cube([wide + 2, size + 2, chamfer], center = true);\n    \n    // Bottom-back chamfer\n    rotate([45, 0, 0])\n        translate([0, 0, -size/2 - chamfer/2])\n            cube([wide + 2, size + 2, chamfer], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "cube_with_chamfer_narrow",
    "openscad_code": "$fn = 32;\n\ndifference() {\n    // outer cube body\n    cube([60, 60, 60], center = true);\n    \n    // chamfers along all 12 edges via eight corner cutouts\n    // bottom four corners\n    translate([ 27, 27, -27]) rotate([ 0, 45, 0]) cube([20,20,20], center = true);\n    translate([-27, 27, -27]) rotate([ 0, 45, 0]) cube([20,20,20], center = true);\n    translate([-27,-27, -27]) rotate([ 0, 45, 0]) cube([20,20,20], center = true);\n    translate([ 27,-27, -27]) rotate([ 0, 45, 0]) cube([20,20,20], center = true);\n    \n    // top four corners\n    translate([ 27, 27, 27]) rotate([ 0, 45, 0]) cube([20,20,20], center = true);\n    translate([-27, 27, 27]) rotate([ 0, 45, 0]) cube([20,20,20], center = true);\n    translate([-27,-27, 27]) rotate([ 0, 45, 0]) cube([20,20,20], center = true);\n    translate([ 27,-27, 27]) rotate([ 0, 45, 0]) cube([20,20,20], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "cube_with_corner_cut",
    "openscad_code": "// cube_with_corner_cut.scad\n\n$fn = 32;\n\ndifference() {\n    // main cube\n    cube([60, 60, 60], center = true);\n    \n    // corner cutting wedge\n    rotate([0, 45, 0])\n        translate([0, 0, 45])\n            cube([120, 120, 30], center = true);\n}\n\n// optional small fillet to soften edges\nminkowski() {\n    difference() {\n        // main cube\n        cube([60, 60, 60], center = true);\n        \n        // corner cutting wedge\n        rotate([0, 45, 0])\n            translate([0, 0, 45])\n                cube([120, 120, 30], center = true);\n    }\n    sphere(d = 1, $fn = 8);\n}",
    "renders": true
  },
  {
    "shape_combination": "cube_with_edge_cut",
    "openscad_code": "// cube_with_edge_cut\n// A 60 mm cube with a cylindrical cut along one edge\n\ndifference() {\n    // Main cube\n    cube([60, 60, 60], center = true);\n    \n    // Edge-cutting cylinder\n    translate([0, 30, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 80, r = 15, center = true, $fn = 32);\n    \n    // Second cylinder for perpendicular edge cut\n    translate([30, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 80, r = 15, center = true, $fn = 32);\n}",
    "renders": true
  },
  {
    "shape_combination": "cube_with_corner_rounded",
    "openscad_code": "$fn=32;\n\n// Cube with rounded corners\ndifference() {\n    // Main rounded cube\n    minkowski() {\n        cube([60, 60, 60], center=true);\n        sphere(5);\n    }\n    \n    // Remove sharp edges to create rounded corners\n    for (i=[-1,1]) {\n        for (j=[-1,1]) {\n            for (k=[-1,1]) {\n                translate([i*30, j*30, k*30]) {\n                    sphere(8);\n                }\n            }\n        }\n    }\n    \n    // Add slight chamfer to edges\n    difference() {\n        // Rounded cube body\n        minkowski() {\n            cube([50, 50, 50], center=true);\n            sphere(3);\n        }\n        \n        // Subtract inner cube for hollow effect\n        cube([40, 40, 40], center=true);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "cube_with_tab",
    "openscad_code": "// cube_with_tab.scad\n\n// Main cube\ndifference() {\n    union() {\n        // Base cube\n        cube([60, 60, 60], center = true);\n        \n        // Tab on top\n        translate([0, 0, 30])\n            cube([20, 8, 10], center = true);\n    }\n    \n    // Hole through cube\n    rotate([0, 90, 0])\n        cylinder(h = 80, d = 20, center = true, $fn = 32);\n    \n    // Slot in tab\n    translate([0, 0, 35])\n        cube([22, 10, 5], center = true);\n}\n\n// Chamfer on tab edges\ntranslate([0, 0, 25])\n    difference() {\n        cube([20, 8, 10], center = true);\n        translate([0, 0, 5])\n            cube([18, 6, 10], center = true);\n    }",
    "renders": true
  },
  {
    "shape_combination": "cube_with_slot",
    "openscad_code": "difference() {\n    cube([60, 60, 60], center = true);\n\n    // horizontal slot through X\n    translate([0, 0, 0])\n        rotate([0, 90, 0])\n        cube([70, 15, 15], center = true);\n\n    // vertical slot through Z\n    translate([0, 0, 0])\n        rotate([0, 0, 0])\n        cube([15, 70, 15], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "cube_with_t_slot",
    "openscad_code": "// cube_with_t_slot.scad\n// medium complexity: cube with T-slot along each face center\n\nsize = 40;\nslot_width = 8;\nslot_depth = 4;\nflange_width = 3;\nflange_depth = 1;\n\nmodule t_slot_along_x() {\n    difference() {\n        cube([size, size, size], center=true);\n        translate([0, 0, 0])\n            cube([size+2, slot_width, slot_depth], center=true);\n        translate([0, 0, 0])\n            cube([size+2, flange_width, flange_depth], center=true);\n    }\n}\n\ndifference() {\n    cube([size, size, size], center=true);\n    \n    // X axis T-slot\n    translate([0, 0, 0])\n        cube([size+2, slot_width, slot_depth], center=true);\n    translate([0, 0, (slot_depth-flange_depth)/2])\n        cube([size+2, flange_width, flange_depth], center=true);\n    \n    // Y axis T-slot\n    translate([0, 0, 0])\n        cube([slot_width, size+2, slot_depth], center=true);\n    translate([0, 0, (slot_depth-flange_depth)/2])\n        cube([flange_width, size+2, flange_depth], center=true);\n    \n    // Z axis T-slot\n    translate([0, 0, 0])\n        cube([slot_depth, slot_width, size+2], center=true);\n    translate([(slot_depth-flange_depth)/2, 0, 0])\n        cube([flange_depth, flange_width, size+2], center=true);\n}",
    "renders": true
  },
  {
    "shape_combination": "cube_with_dovetail",
    "openscad_code": "// cube_with_dovetail.scad\n// Medium complexity: cube with a dovetail slot along one edge\n\n$fn = 32;\n\n// Main cube\ndifference() {\n    cube([60, 60, 40], center=true);\n    \n    // Dovetail slot along Y axis\n    translate([0, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        // Outer dovetail shape\n        cylinder(h=55, r1=12, r2=8);\n        \n        // Inner dovetail shape for slot\n        translate([0, 0, -1])\n        cylinder(h=57, r1=9, r2=5);\n    }\n    \n    // Clean up ends of dovetail\n    translate([0, 30, 0])\n    cube([20, 5, 20], center=true);\n    \n    translate([0, -30, 0])\n    cube([20, 5, 20], center=true);\n}",
    "renders": true
  },
  {
    "shape_combination": "cube_with_boss",
    "openscad_code": "// cube_with_boss.scad\n\ndifference() {\n    // main cube\n    cube([60, 60, 60], center = true);\n\n    // chamfer bottom edge\n    translate([0, 0, -30])\n    cylinder(h = 5, r1 = 45, r2 = 42, $fn = 32);\n}\n\nunion() {\n    // main cube already exists via difference above\n\n    // top boss cylinder\n    translate([0, 0, 38])\n    cylinder(h = 20, r = 25, $fn = 32);\n\n    // alignment pin\n    translate([0, 0, 58])\n    cylinder(h = 10, r = 8, $fn = 16);\n}\n\n// side boss\ntranslate([40, 0, 0])\nrotate([0, 90, 0])\ncylinder(h = 20, r = 15, $fn = 32);\n\n// countersink on side boss\ntranslate([51, 0, 0])\nrotate([0, 90, 0])\ncylinder(h = 10, r1 = 8, r2 = 5, $fn = 16);",
    "renders": true
  },
  {
    "shape_combination": "cube_with_pocket",
    "openscad_code": "// cube_with_pocket\ndifference() {\n    // main cube body\n    cube([40, 40, 40], center = true);\n    \n    // central cube pocket\n    translate([0, 0, 5])\n        cube([20, 20, 30], center = true);\n    \n    // side cylindrical pocket\n    translate([-20, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 25, r = 8, center = true);\n    \n    // top spherical pocket\n    translate([0, 0, 15])\n        sphere(r = 12, $fn = 32);\n}",
    "renders": true
  },
  {
    "shape_combination": "sphere_with_flat_bottom",
    "openscad_code": "// sphere_with_flat_bottom.scad\n// sphere minus bottom half, resting on flat base\n\nsphere_d = 60;\n\ndifference() {\n    // full sphere\n    sphere(d = sphere_d, $fn = 48);\n    \n    // cut away bottom half\n    translate([0, 0, -sphere_d/2])\n        cube([sphere_d*1.5, sphere_d*1.5, sphere_d], center = true);\n}\n\n// optional thin base plate\ntranslate([0, 0, -0.5])\n    cylinder(h = 1, d = sphere_d*1.2, $fn = 48);",
    "renders": true
  },
  {
    "shape_combination": "sphere_with_flat_bottom_large",
    "openscad_code": "// sphere_with_flat_bottom_large\nsphere_r = 60;\nflat_h   = 20;\n\ndifference() {\n    sphere(sphere_r, $fn = 100);\n\n    // flat bottom\n    translate([0, 0, -sphere_r])\n        cube([sphere_r*2.5, sphere_r*2.5, sphere_r + flat_h], center = true);\n\n    // optional hole through top for key-ring / handle\n    translate([0, 0, sphere_r - 5])\n        cylinder(r1 = 8, r2 = 8, h = 10, $fn = 32);\n}",
    "renders": true
  },
  {
    "shape_combination": "sphere_with_flat_top",
    "openscad_code": "// sphere_with_flat_top.scad\n// Flatten top of a sphere with a simple difference\n\n$fn = 60;\n\ndifference() {\n    // main sphere\n    sphere(d = 80);\n\n    // cut off top hemisphere\n    translate([0, 0, 0])\n        cylinder(h = 40, d = 81, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "sphere_with_opening",
    "openscad_code": "// sphere_with_opening.scad\n// Medium complexity: sphere with a circular opening and internal cavity\n\n$fn = 64;\n\n// Main sphere body\ndifference() {\n    sphere(d = 80);\n    \n    // Internal hollow cavity\n    sphere(d = 60);\n    \n    // Top circular opening\n    translate([0, 0, 20])\n        cylinder(h = 40, d = 30);\n    \n    // Bottom drainage hole\n    translate([0, 0, -40])\n        cylinder(h = 20, d = 15);\n    \n    // Side ventilation hole\n    translate([30, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 60, d = 20);\n}",
    "renders": true
  },
  {
    "shape_combination": "sphere_with_opening_top",
    "openscad_code": "// sphere_with_opening_top.scad\n// Medium complexity: sphere minus cylinder for top opening\n\n$fn = 50;\n\nsphere_d = 80;\nwall_thickness = 3;\nopening_d = 30;\nopening_h = 25;\n\ndifference() {\n    difference() {\n        sphere(d = sphere_d);\n        sphere(d = sphere_d - 2 * wall_thickness);\n    }\n    \n    translate([0, 0, sphere_d/2 - opening_h/2]) \n        cylinder(d = opening_d, h = opening_h + 1, center = true);\n}\n\ntranslate([0, 0, sphere_d/2 - opening_h - wall_thickness/2])\n    cylinder(d = opening_d + 2 * wall_thickness, h = wall_thickness, center = true);",
    "renders": true
  },
  {
    "shape_combination": "sphere_with_opening_side",
    "openscad_code": "// sphere_with_opening_side.scad\n\nr = 30;\nwall = 3;\nh = 40;\n\ndifference() {\n    union() {\n        // main sphere\n        sphere(r);\n        \n        // collar for side opening\n        translate([r,0,0])\n            rotate([0,90,0])\n                cylinder(h = h, r1 = r*0.8, r2 = r*0.8, $fn = 48);\n    }\n    \n    // hollow out sphere\n    sphere(r - wall);\n    \n    // side hole\n    translate([r,0,0])\n        rotate([0,90,0])\n            cylinder(h = h + 2, r = r*0.6, $fn = 48);\n}",
    "renders": true
  },
  {
    "shape_combination": "sphere_with_base",
    "openscad_code": "// sphere_with_base.scad\n\n// Sphere on a cylindrical base\n$fn = 36;\n\n// Parameters\nsphere_d = 40;\nbase_d = 60;\nbase_h = 20;\noverlap = 2;  // prevents z-fighting\n\nmodule sphere_with_base() {\n    union() {\n        // main sphere\n        translate([0, 0, base_h + sphere_d/2 - overlap])\n            sphere(d = sphere_d);\n\n        // base cylinder\n        cylinder(h = base_h, d = base_d, center = false);\n\n        // small fillet ring for smooth transition\n        translate([0, 0, base_h - 1])\n            cylinder(h = 2, d1 = base_d, d2 = sphere_d * 0.9, center = false);\n    }\n}\n\nsphere_with_base();",
    "renders": true
  },
  {
    "shape_combination": "sphere_with_base_cylindrical",
    "openscad_code": "// sphere_with_base_cylindrical.scad\n\n// sphere sitting on top of a cylindrical base\n// uses union to combine sphere and cylinder\n// uses difference to create hole through base\n\n$fn=50;\n\n// main union\nunion() {\n    // sphere on top\n    translate([0,0,40])\n        sphere(d=60);\n\n    // cylindrical base\n    difference() {\n        cylinder(h=40, d=80, center=false);\n        \n        // hole through base\n        translate([0,0,-1])\n            cylinder(h=42, d=20, center=false);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "sphere_with_base_cone",
    "openscad_code": "// sphere_with_base_cone.scad\n\n// sphere resting on a cone base\nsphere_d = 60;\ncone_h   = 40;\nbase_d   = 80;\n\nunion() {\n    // sphere\n    translate([0, 0, cone_h])\n        sphere(d = sphere_d, $fn = 40);\n\n    // cone base\n    cylinder(h = cone_h, d1 = base_d, d2 = sphere_d, $fn = 40);\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_cone_top",
    "openscad_code": "cylinder_diameter = 40;\ncylinder_height = 60;\ncone_height = 30;\n\nunion() {\n    // Main cylinder\n    cylinder(h = cylinder_height, d = cylinder_diameter, $fn = 64);\n    \n    // Cone on top\n    translate([0, 0, cylinder_height])\n        cylinder(h = cone_height, d1 = cylinder_diameter, d2 = 0, $fn = 64);\n    \n    // Optional base fillet ring (hidden union)\n    translate([0, 0, -2])\n        cylinder(h = 4, d = cylinder_diameter + 6, $fn = 64);\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_cone_top_tall",
    "openscad_code": "// cylinder_with_cone_top_tall\n// Tall cylinder with a cone on top, hollow center\n\n$fn = 36;\n\n// main body\ndifference() {\n    union() {\n        // tall cylinder\n        cylinder(h = 80, d = 40, center = false);\n\n        // cone on top\n        translate([0, 0, 80])\n            cylinder(h = 30, d1 = 40, d2 = 0, center = false);\n    }\n\n    // hollow center\n    translate([0, 0, -1])\n        cylinder(h = 112, d = 20, center = false);\n}\n\n// optional base ring for stability\ntranslate([0, 0, -2])\n    difference() {\n        cylinder(h = 2, d = 46, center = false);\n        cylinder(h = 2.1, d = 38, center = false);\n    }",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_cone_top_short",
    "openscad_code": "// Cylinder with cone on top, shortened\n$fn = 48;\n\nunion() {\n    // Main cylinder body\n    cylinder(h = 40, r = 25);\n\n    // Short cone cap\n    translate([0, 0, 40])\n        cylinder(h = 20, r1 = 25, r2 = 0);\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_cone_top_steep",
    "openscad_code": "// cylinder_with_cone_top_steep.scad\n// cylinder body with steep cone on top\n\n// cylinder base\ncylinder(h=60, r=30, $fn=60);\n\n// steep cone on top\ntranslate([0,0,60])\ncylinder(h1=0, h2=40, r1=0, r2=30, $fn=60);",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_conical_base",
    "openscad_code": "// cylinder_with_conical_base.scad\n// Medium complexity: cylinder on top of a conical base\n\n$fn = 50;\n\n// overall height\nh = 80;\n\n// cylinder radius\nr = 25;\n\n// cone base radius (larger than cylinder for taper)\nrb = 35;\n\n// cylinder portion height\nch = h * 0.6;\n\n// cone portion height\nkh = h * 0.4;\n\n// union the cylinder and cone\nunion() {\n    // vertical cylinder\n    translate([0, 0, kh])\n        cylinder(h = ch, r = r, center = false);\n\n    // conical base\n    cylinder(h1 = kh, h2 = 0, r1 = r, r2 = rb, center = false);\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_conical_base_tall",
    "openscad_code": "// cylinder_with_conical_base_tall\n// Tall cylinder sitting on a conical base, hollowed\n\n$fn = 50;\n\ndifference() {\n    // solid shape: cylinder + cone\n    union() {\n        // tall cylinder\n        translate([0, 0, 30])\n            cylinder(h = 80, d = 40, center = false);\n        \n        // conical base\n        cylinder(h = 30, d1 = 60, d2 = 40, center = false);\n    }\n    \n    // hollow out center\n    translate([0, 0, -1])\n        cylinder(h = 112, d = 30, center = false);\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_conical_base_flared",
    "openscad_code": "// cylinder_with_conical_base_flared.scad\n// Medium: 3 boolean ops, 30 lines\n\nh = 60;         // total height\nr = 25;         // top cylinder radius\nbr = 35;        // base flare radius\nt = 3;          // wall thickness\n\nmodule solid() {\n    union() {\n        cylinder(h1 = r, h2 = br, r1 = r, r2 = br, $fn = 50);  // conical flare\n        translate([0, 0, h - r]) cylinder(h = r, r = r, $fn = 50);  // top cylinder\n    }\n}\n\nmodule hollow() {\n    difference() {\n        solid();\n        translate([0, 0, -1])\n        union() {\n            cylinder(h1 = r + 2, h2 = br + 2, r1 = r - t, r2 = br - t, $fn = 50);\n            translate([0, 0, h - r])\n            cylinder(h = r + 2, r = r - t, $fn = 50);\n        }\n    }\n}\n\nhollow();",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_rounded_ends",
    "openscad_code": "// cylinder_with_rounded_ends.scad\n$fn = 32;\n\ndifference() {\n    // main cylinder plus two hemispheres\n    union() {\n        // central cylinder body\n        cylinder(h = 80, d = 40, center = true);\n        \n        // top rounded cap\n        translate([0, 0, 40])\n            sphere(d = 40);\n        \n        // bottom rounded cap\n        translate([0, 0, -40])\n            sphere(d = 40);\n    }\n    \n    // hollow center along Z axis\n    cylinder(h = 120, d = 20, center = true);\n    \n    // flatten bottom with cube cut\n    translate([0, 0, -48])\n        cube([50, 50, 20], center = true);\n    \n    // flatten top with cube cut\n    translate([0, 0, 48])\n        cube([50, 50, 20], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_threaded_end",
    "openscad_code": "// cylinder_with_threaded_end.scad\n// Medium-complexity: cylinder + threaded end (grooves via difference)\n\nthread_d = 20;          // major thread diameter\nthread_h = 25;          // thread length\nbody_d = 30;            // cylinder body diameter\nbody_h = 60;            // cylinder body height\ngroove_w = 2;           // thread groove width\ngroove_d = 1.5;         // thread groove depth\npitch = 5;              // distance between grooves\n\ndifference() {\n    union() {\n        // main cylinder body\n        cylinder(h = body_h, d = body_d, $fn = 50);\n\n        // threaded end (smaller cylinder)\n        translate([0, 0, body_h])\n            cylinder(h = thread_h, d = thread_d, $fn = 50);\n    }\n\n    // cut V-shaped thread grooves\n    for (i = [0 : pitch : thread_h - 1]) {\n        rotate([0, 0, 0])\n            translate([0, 0, body_h + i])\n                cylinder(h = groove_w + 0.1, d = thread_d - 2 * groove_d, $fn = 3);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_tapped_hole",
    "openscad_code": "// cylinder_with_tapped_hole\n// difference() between solid cylinder and threaded hole\n\n$fn = 36;\n\nmodule cylinder_with_tapped_hole() {\n    difference() {\n        // main cylinder\n        cylinder(h = 60, d = 40, center = true);\n        \n        // clearance hole\n        translate([0, 0, -30.5])\n            cylinder(h = 62, d = 8, center = false);\n        \n        // tapered tap\n        translate([0, 0, 25])\n            cylinder(h = 20, d1 = 8, d2 = 6, center = false);\n        \n        // counterbore for bolt head\n        translate([0, 0, -30.5])\n            cylinder(h = 8, d = 15, center = false);\n    }\n}\n\ncylinder_with_tapped_hole();",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_counter_bore",
    "openscad_code": "difference() {\n    // main cylinder\n    cylinder(h = 60, d = 50, $fn = 64);\n\n    // counter-bore\n    translate([0, 0, -1])\n        cylinder(h = 20, d1 = 30, d2 = 30, $fn = 64);\n\n    // through hole\n    rotate([0, 0, 0])\n        translate([0, 0, -1])\n            cylinder(h = 80, d = 20, $fn = 64);\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_counter_sink",
    "openscad_code": "// cylinder_with_counter_sink.scad\n// A cylinder with a countersunk hole through its center\n\nlength = 80;\nradius = 20;\nhole_r = 8;\ncsink_r = 16;\ncsink_depth = 10;\n\ndifference() {\n    // main cylinder body\n    cylinder(h = length, r = radius, $fn = 100);\n    \n    // countersink cone\n    translate([0, 0, -0.1])\n        cylinder(h1 = csink_depth + 0.2,\n                 h2 = 0,\n                 r1 = csink_r,\n                 r2 = 0,\n                 $fn = 100);\n    \n    // straight hole\n    translate([0, 0, csink_depth - 0.1])\n        cylinder(h = length - csink_depth + 0.2,\n                 r = hole_r,\n                 $fn = 100);\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_slot",
    "openscad_code": "// cylinder_with_slot.scad\n\ndifference() {\n    // main cylinder\n    cylinder(h = 60, r = 25, $fn = 48);\n    \n    // horizontal slot\n    translate([0, 0, 30])\n        rotate([0, 90, 0])\n            cylinder(h = 55, r = 8, $fn = 32);\n    \n    // vertical slot\n    translate([0, 0, 30])\n        rotate([90, 0, 0])\n            cylinder(h = 55, r = 8, $fn = 32);\n    \n    // central hole\n    cylinder(h = 70, r = 10, $fn = 32);\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_keyway",
    "openscad_code": "// cylinder_with_keyway.scad\n// medium complexity: cylinder minus keyway slot and minus center hole\n\ncyl_h = 60;\ncyl_r = 25;\nkey_w = 6;\nkey_d = 3;\nhole_r = 12;\n\ndifference() {\n    // main cylinder\n    cylinder(h = cyl_h, r = cyl_r, center = true);\n    \n    // keyway slot\n    translate([0, -cyl_r, 0])\n        cube([key_w, key_d, cyl_h + 2], center = true);\n    \n    // center through-hole\n    cylinder(h = cyl_h + 2, r = hole_r, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_flute",
    "openscad_code": "// cylinder_with_flute.scad\n// Main cylinder with four fluted cut-outs along its sides\n\nr = 25;          // cylinder radius\nh = 80;          // cylinder height\nf = 10;          // flute radius\ns = 3;           // flute wall thickness\n\ndifference() {\n    // Main solid cylinder\n    cylinder(h = h, r = r, center = true, $fn = 100);\n\n    // Four flutes cut into the cylinder sides\n    for (a = [0, 90, 180, 270])\n        rotate([0, 0, a])\n            translate([r - f + s, 0, 0])\n                cylinder(h = h + 2, r = f, center = true, $fn = 32);\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_groove",
    "openscad_code": "// cylinder_with_groove\n// medium: cylinder minus two rotated cylinders to create a cross-groove\n\n$fn = 32;\n\ndifference() {\n    cylinder(h = 60, d = 40, center = true);\n    \n    // vertical groove\n    rotate([90, 0, 0])\n        cylinder(h = 50, d = 8, center = true);\n    \n    // horizontal groove\n    rotate([0, 90, 0])\n        cylinder(h = 50, d = 8, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_o_ring_groove",
    "openscad_code": "difference() {\n    cylinder(h = 60, d = 50, $fn = 100);\n    translate([0, 0, 25])\n        cylinder(h = 10, d = 40, $fn = 100);\n    translate([0, 0, 35])\n        cylinder(h = 10, d = 45, $fn = 100);\n    translate([0, 0, 5])\n        cylinder(h = 50, d = 20, $fn = 100);\n}",
    "renders": true
  },
  {
    "shape_combination": "cylinder_with_retaining_groove",
    "openscad_code": "// cylinder_with_retaining_groove\n// medium complexity: cylinder + groove cutouts\n\ngroove_depth = 3;\ngroove_width = 4;\ncyl_h = 50;\ncyl_r = 25;\ntop_groove_y = 10;\nbottom_groove_y = cyl_h - 10;\n\ndifference() {\n    // main cylinder\n    cylinder(h = cyl_h, r = cyl_r, center = false);\n\n    // top retaining groove\n    translate([0, -groove_width/2, top_groove_y])\n        cube([cyl_r + groove_depth, groove_width, groove_depth], center = false);\n\n    // bottom retaining groove (rotated 90°)\n    translate([-groove_width/2, 0, bottom_groove_y])\n        cube([groove_width, cyl_r + groove_depth, groove_depth], center = false);\n\n    // center hole\n    cylinder(h = cyl_h + 1, r = cyl_r/3, center = false);\n}",
    "renders": true
  },
  {
    "shape_combination": "platform_with_support",
    "openscad_code": "// platform_with_support: union of rectangular platform and two angled struts\nplatform_l = 80;\nplatform_w = 60;\nplatform_h = 6;\nstrut_w = 8;\nstrut_h = 35;\nstrut_ang = 30;\n\nunion() {\n    // main platform\n    cube([platform_l, platform_w, platform_h], center=true);\n\n    // left strut\n    translate([-platform_l/2 + strut_w/2, 0, -strut_h/2])\n        rotate([0, strut_ang, 0])\n            cube([strut_w, strut_w, strut_h], center=true);\n\n    // right strut\n    translate([platform_l/2 - strut_w/2, 0, -strut_h/2])\n        rotate([0, -strut_ang, 0])\n            cube([strut_w, strut_w, strut_h], center=true);\n}",
    "renders": true
  },
  {
    "shape_combination": "platform_with_four_supports",
    "openscad_code": "// platform and four supports\nmodule platform_with_four_supports() {\n    plate_th = 4;\n    plate_w = 80;\n    plate_d = 80;\n\n    support_h = 20;\n    support_r = 5;\n\n    margin = 15;\n\n    union() {\n        // top plate\n        cube([plate_w, plate_d, plate_th], center = true);\n\n        // four cylindrical supports\n        translate([ plate_w/2 - margin,  plate_d/2 - margin, -support_h/2 - plate_th/2])\n            cylinder(h = support_h, r = support_r, center = true);\n\n        translate([-plate_w/2 + margin,  plate_d/2 - margin, -support_h/2 - plate_th/2])\n            cylinder(h = support_h, r = support_r, center = true);\n\n        translate([ plate_w/2 - margin, -plate_d/2 + margin, -support_h/2 - plate_th/2])\n            cylinder(h = support_h, r = support_r, center = true);\n\n        translate([-plate_w/2 + margin, -plate_d/2 + margin, -support_h/2 - plate_th/2])\n            cylinder(h = support_h, r = support_r, center = true);\n    }\n}\n\nplatform_with_four_supports();",
    "renders": true
  },
  {
    "shape_combination": "platform_with_center_support",
    "openscad_code": "// platform_with_center_support: union of three blocks forming a platform and T-shaped support\nplatform_w = 100;\nplatform_d = 80;\nplatform_h = 5;\nsupport_w = 12;\nsupport_h = 40;\n\nunion() {\n    // main platform slab\n    cube([platform_w, platform_d, platform_h], center = true);\n\n    // vertical center support\n    translate([0, 0, -(support_h + platform_h) / 2])\n        cube([support_w, platform_d * 0.8, support_h], center = true);\n\n    // horizontal top brace\n    translate([0, 0, -(support_h + platform_h) / 2 + support_h / 2])\n        cube([platform_w * 0.7, support_w, support_h], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "platform_with_corner_supports",
    "openscad_code": "// platform_with_corner_supports.scad\n\nplatform_w = 100;\nplatform_d = 100;\nplatform_h = 5;\nsupport_r = 6;\nsupport_h = 20;\n\ndifference() {\n    union() {\n        // main platform\n        cube([platform_w, platform_d, platform_h], center=true);\n\n        // corner supports\n        translate([ platform_w/2 - support_r,  platform_d/2 - support_r, -support_h/2 - platform_h/2])\n            cylinder(r=support_r, h=support_h, center=true);\n\n        translate([-platform_w/2 + support_r,  platform_d/2 - support_r, -support_h/2 - platform_h/2])\n            cylinder(r=support_r, h=support_h, center=true);\n\n        translate([ platform_w/2 - support_r, -platform_d/2 + support_r, -support_h/2 - platform_h/2])\n            cylinder(r=support_r, h=support_h, center=true);\n\n        translate([-platform_w/2 + support_r, -platform_d/2 + support_r, -support_h/2 - platform_h/2])\n            cylinder(r=support_r, h=support_h, center=true);\n    }\n\n    // central through hole\n    translate([0, 0, 0])\n        cylinder(r=15, h=platform_h+2, center=true);\n}",
    "renders": true
  },
  {
    "shape_combination": "platform_with_edge_supports",
    "openscad_code": "// platform_with_edge_supports.scad\n\n// Main platform\ndifference() {\n    cube([100, 80, 10], center=true);\n    \n    // Cutouts for edge supports\n    translate([40, 0, 0]) cube([20, 100, 20], center=true);\n    translate([-40, 0, 0]) cube([20, 100, 20], center=true);\n}\n\n// Edge supports\nunion() {\n    // Left support\n    translate([-60, 0, -10]) cube([20, 80, 20], center=true);\n    \n    // Right support\n    translate([60, 0, -10]) cube([20, 80, 20], center=true);\n    \n    // Front support\n    translate([0, 50, -10]) cube([60, 20, 20], center=true);\n    \n    // Back support\n    translate([0, -50, -10]) cube([60, 20, 20], center=true);\n}",
    "renders": true
  },
  {
    "shape_combination": "platform_with_cross_supports",
    "openscad_code": "// platform_with_cross_supports.scad\n// Medium complexity: union of platform and crossed supports, difference of lightening pockets\n\nplatform_w = 100;\nplatform_h = 5;\nsupport_h = 20;\n\nunion() {\n    // main platform plate\n    cube([platform_w, platform_w, platform_h], center=true);\n    \n    // cross supports\n    difference() {\n        union() {\n            // vertical support\n            translate([0, 0, -(support_h+platform_h)/2])\n                cube([platform_w*0.8, 10, support_h], center=true);\n            \n            // horizontal support\n            translate([0, 0, -(support_h+platform_h)/2])\n                cube([10, platform_w*0.8, support_h], center=true);\n        }\n        \n        // lightening cutouts in supports\n        translate([0, 0, -(support_h+platform_h)/2])\n            cube([platform_w*0.7, 8, support_h-4], center=true);\n        \n        translate([0, 0, -(support_h+platform_h)/2])\n            cube([8, platform_w*0.7, support_h-4], center=true);\n    }\n    \n    // corner gussets\n    for(x=[-1,1], y=[-1,1]) {\n        translate([x*platform_w/3, y*platform_w/3, -platform_h/2])\n            rotate([0,0,45*y])\n            cube([40, 5, platform_h], center=true);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "platform_rounded",
    "openscad_code": "// platform_rounded.scad\n\n// rounded rectangular platform with beveled top and four mounting holes\n$fn = 32;\n\nbase_width  = 100;\nbase_depth  = 60;\nbase_height = 12;\nradius      = 10;\nhole_d      = 6;\nhole_h      = base_height + 2;\n\n// main platform body with rounded edges\ndifference() {\n    minkowski() {\n        cube([base_width - 2*radius,\n              base_depth - 2*radius,\n              base_height - 2], center = true);\n        sphere(r = radius);\n    }\n\n    // bevel the top edges\n    translate([0, 0, base_height/2 - 1])\n        minkowski() {\n            cube([base_width - 2*radius - 2,\n                  base_depth - 2*radius - 2,\n                  2], center = true);\n            sphere(r = radius + 1);\n        }\n\n    // mounting holes\n    for (x = [-base_width/2 + 15, base_width/2 - 15],\n         y = [-base_depth/2 + 15, base_depth/2 - 15])\n        translate([x, y, 0])\n            cylinder(d = hole_d, h = hole_h, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "platform_rounded_thin",
    "openscad_code": "// platform_rounded_thin.scad\n// rounded thin platform with four corner cut-outs\n\n// main platform disc\ndifference() {\n    // thin rounded base\n    cylinder(h=5, d=100, $fn=64);\n    \n    // corner cut-out cylinders\n    for (i = [-1, 1]) {\n        for (j = [-1, 1]) {\n            translate([i*35, j*35, -1])\n                cylinder(h=7, d=15, $fn=32);\n        }\n    }\n    \n    // central shallow recess\n    translate([0, 0, 2])\n        cylinder(h=3, d=40, $fn=64);\n}\n\n// add four small feet\nunion() {\n    for (i = [-1, 1]) {\n        for (j = [-1, 1]) {\n            translate([i*40, j*40, -2])\n                cylinder(h=2, d=8, $fn=16);\n        }\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "platform_rounded_thick",
    "openscad_code": "// platform_rounded_thick.scad\n// Medium: rounded platform with inset groove and central hole\n\ndifference() {\n    // main rounded-top block\n    union() {\n        // thick base plate\n        cube([80, 80, 12], center = true);\n        \n        // rounded top dome\n        translate([0, 0, 6])\n            minkowski() {\n                cube([78, 78, 2], center = true);\n                sphere(d = 4, $fn = 32);\n            }\n    }\n    \n    // central through-hole\n    translate([0, 0, -7])\n        cylinder(d = 12, h = 14, center = true, $fn = 32);\n    \n    // peripheral groove\n    translate([0, 0, 2])\n        cylinder(d = 70, h = 3, center = true, $fn = 32);\n    \n    // corner holes\n    for (x = [-30, 30])\n        for (y = [-30, 30])\n            translate([x, y, -7])\n                cylinder(d = 5, h = 14, center = true, $fn = 16);\n}",
    "renders": true
  },
  {
    "shape_combination": "platform_with_legs",
    "openscad_code": "// platform_with_legs: union() of thin platform and four cylinders as legs\nplatform_w = 80;\nplatform_h = 5;\nleg_r = 4;\nleg_h = 40;\n\nunion() {\n    // platform\n    cube([platform_w, platform_w, platform_h], center = true);\n\n    // four legs in corners\n    translate([platform_w/2 - leg_r, platform_w/2 - leg_r, -leg_h/2 - platform_h/2])\n        cylinder(r = leg_r, h = leg_h, $fn = 20);\n\n    translate([-platform_w/2 + leg_r, platform_w/2 - leg_r, -leg_h/2 - platform_h/2])\n        cylinder(r = leg_r, h = leg_h, $fn = 20);\n\n    translate([platform_w/2 - leg_r, -platform_w/2 + leg_r, -leg_h/2 - platform_h/2])\n        cylinder(r = leg_r, h = leg_h, $fn = 20);\n\n    translate([-platform_w/2 + leg_r, -platform_w/2 + leg_r, -leg_h/2 - platform_h/2])\n        cylinder(r = leg_r, h = leg_h, $fn = 20);\n}",
    "renders": true
  },
  {
    "shape_combination": "platform_with_rounded_legs",
    "openscad_code": "// platform with four rounded legs\n// main platform\ndifference() {\n    union() {\n        // top plate\n        cube([80, 80, 8], center = true);\n\n        // four rounded legs (vertical cylinders)\n        for (x = [-30, 30])\n            for (y = [-30, 30])\n                translate([x, y, -24])\n                    cylinder(d = 20, h = 40, center = true);\n    }\n\n    // center hole\n    translate([0, 0, 0])\n        cylinder(d = 25, h = 10, center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "platform_with_square_legs",
    "openscad_code": "// Platform with square legs\nplatform_size = 100;\nplatform_thickness = 10;\nleg_size = 15;\nleg_height = 60;\n\ndifference() {\n    union() {\n        // main platform\n        cube([platform_size, platform_size, platform_thickness], center = true);\n        \n        // four square legs\n        translate([platform_size/2 - leg_size/2, platform_size/2 - leg_size/2, -leg_height/2 - platform_thickness/2])\n            cube([leg_size, leg_size, leg_height], center = true);\n            \n        translate([-platform_size/2 + leg_size/2, platform_size/2 - leg_size/2, -leg_height/2 - platform_thickness/2])\n            cube([leg_size, leg_size, leg_height], center = true);\n            \n        translate([platform_size/2 - leg_size/2, -platform_size/2 + leg_size/2, -leg_height/2 - platform_thickness/2])\n            cube([leg_size, leg_size, leg_height], center = true);\n            \n        translate([-platform_size/2 + leg_size/2, -platform_size/2 + leg_size/2, -leg_height/2 - platform_thickness/2])\n            cube([leg_size, leg_size, leg_height], center = true);\n    }\n    \n    // hollow center in platform\n    cube([platform_size - 30, platform_size - 30, platform_thickness + 2], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "platform_with_tapered_legs",
    "openscad_code": "// platform_with_tapered_legs\n// flat top surface with four tapered legs underneath\n\nplatform_x = 100;\nplatform_y = 70;\nplatform_z = 6;\n\nleg_top_r = 6;\nleg_bot_r = 3;\nleg_h = 35;\n\nleg_spacing = 10;\n\nunion() {\n    // top platform\n    cube([platform_x, platform_y, platform_z], center=true);\n\n    // front-left leg\n    translate([-(platform_x/2 - leg_spacing), -(platform_y/2 - leg_spacing), -leg_h/2])\n        cylinder(h=leg_h, r1=leg_top_r, r2=leg_bot_r, center=true);\n\n    // front-right leg\n    translate([(platform_x/2 - leg_spacing), -(platform_y/2 - leg_spacing), -leg_h/2])\n        cylinder(h=leg_h, r1=leg_top_r, r2=leg_bot_r, center=true);\n\n    // back-left leg\n    translate([-(platform_x/2 - leg_spacing), (platform_y/2 - leg_spacing), -leg_h/2])\n        cylinder(h=leg_h, r1=leg_top_r, r2=leg_bot_r, center=true);\n\n    // back-right leg\n    translate([(platform_x/2 - leg_spacing), (platform_y/2 - leg_spacing), -leg_h/2])\n        cylinder(h=leg_h, r1=leg_top_r, r2=leg_bot_r, center=true);\n}",
    "renders": true
  },
  {
    "shape_combination": "rounded_block",
    "openscad_code": "module rounded_block() {\n    // Outer block with rounded edges\n    difference() {\n        // Main rounded shape\n        union() {\n            // Central block\n            cube([60, 40, 30], center = true);\n            \n            // Add rounded edges along length\n            for (x = [-25, 25])\n                translate([x, 0, 0])\n                    cylinder(h = 30, r = 20, center = true);\n            \n            // Add rounded edges along width\n            for (y = [-15, 15])\n                translate([0, y, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 60, r = 15, center = true);\n        }\n        \n        // Remove center hole\n        translate([0, 0, 0])\n            cylinder(h = 35, r = 10, center = true);\n    }\n}\n\nrounded_block();",
    "renders": true
  },
  {
    "shape_combination": "rounded_block_large",
    "openscad_code": "module rounded_block_large() {\n    // Main block\n    difference() {\n        // Outer rounded block\n        union() {\n            // Main rectangular body\n            cube([100, 60, 40], center = true);\n            \n            // Rounded edges using cylinders\n            translate([0, 0, 20])\n                cylinder(h = 42, r = 30, $fn = 32);\n            translate([0, 0, -20])\n                cylinder(h = 42, r = 30, $fn = 32);\n        }\n        \n        // Hollow center with rounded interior\n        difference() {\n            // Large hollow space\n            cube([80, 40, 30], center = true);\n            \n            // Rounded interior bottom\n            translate([0, 0, -20])\n                cylinder(h = 10, r = 25, $fn = 32);\n            \n            // Rounded interior top\n            translate([0, 0, 20])\n                cylinder(h = 10, r = 25, $fn = 32);\n        }\n        \n        // Side holes\n        for (x = [-40, 40]) {\n            translate([x, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 70, r = 8, $fn = 24);\n        }\n    }\n}\n\nrounded_block_large();",
    "renders": true
  },
  {
    "shape_combination": "rounded_block_small",
    "openscad_code": "module rounded_block_small() {\n    // Main rounded block\n    difference() {\n        // Rounded base block\n        union() {\n            minkowski() {\n                cube([60, 30, 25], center = true);\n                sphere(5);\n            }\n            \n            // Top rounded ridge\n            translate([0, 0, 15])\n                minkowski() {\n                    cube([50, 25, 8], center = true);\n                    sphere(3);\n                }\n        }\n        \n        // Center hole through block\n        translate([0, 0, 0])\n            cylinder(h = 40, r = 8, center = true, $fn = 32);\n        \n        // Side cutouts\n        translate([25, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 35, r = 6, center = true, $fn = 32);\n        \n        translate([-25, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 35, r = 6, center = true, $fn = 32);\n    }\n}\n\nrounded_block_small();",
    "renders": true
  },
  {
    "shape_combination": "rounded_block_tall",
    "openscad_code": "// rounded_block_tall.scad\n\n// Tall rectangular block with rounded edges and top\ndifference() {\n    union() {\n        // Main tall block\n        cube([40, 40, 100], center=true);\n        \n        // Rounded top cap\n        translate([0, 0, 50])\n            cylinder(h=20, d=40, center=true);\n    }\n    \n    // Hollow center\n    cube([30, 30, 90], center=true);\n    \n    // Top rounding cutout\n    translate([0, 0, 60])\n        cylinder(h=20, d=30, center=true);\n}\n\n// Small corner fillets\nfor(x=[-1,1], y=[-1,1])\n    translate([x*15, y*15, 0])\n        cylinder(h=100, d=5, center=true);",
    "renders": true
  },
  {
    "shape_combination": "rounded_block_wide",
    "openscad_code": "$fn = 32;\n\nmodule rounded_block_wide() {\n    // Main wide block body\n    difference() {\n        // Base rounded-edge block\n        union() {\n            // Central cuboid\n            translate([0, 0, 5])\n                cube([80, 60, 20], center = true);\n            \n            // Rounding cylinders along length\n            translate([-35, 0, 5])\n                cylinder(h = 20, r = 30);\n            translate([35, 0, 5])\n                cylinder(h = 20, r = 30);\n            \n            // Rounding cylinders along width\n            translate([0, -25, 5])\n                cylinder(h = 20, r = 20);\n            translate([0, 25, 5])\n                cylinder(h = 20, r = 20);\n        }\n        \n        // Central hole\n        translate([0, 0, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 100, r = 15, center = true);\n        \n        // Side cutouts\n        translate([-50, 0, 5])\n            rotate([0, 90, 0])\n                cylinder(h = 30, r = 10);\n        translate([50, 0, 5])\n            rotate([0, 90, 0])\n                cylinder(h = 30, r = 10);\n    }\n    \n    // Top rounded cap\n    union() {\n        translate([0, 0, 20])\n            minkowski() {\n                cube([60, 40, 1], center = true);\n                cylinder(h = 1, r = 10);\n            }\n    }\n}\n\nrounded_block_wide();",
    "renders": true
  },
  {
    "shape_combination": "rounded_wedge",
    "openscad_code": "module rounded_wedge() {\n    // Main wedge body\n    wedge = linear_extrude(height = 60, center = true)\n        polygon([[0,-30], [0,30], [50,0]]);\n    \n    // Rounded top using sphere intersection\n    round_top = intersection() {\n        translate([0,0,30]) sphere(d = 65);\n        translate([0,0,-30]) cube([60,60,60], center = true);\n    }\n    \n    // Remove bottom edge rounding\n    bottom_cut = difference() {\n        cube([60,60,30], center = true);\n        translate([0,0,-45]) sphere(d = 70);\n    }\n    \n    union() {\n        wedge;\n        round_top;\n    }\n}\n\nrounded_wedge();",
    "renders": true
  },
  {
    "shape_combination": "rounded_wedge_tall",
    "openscad_code": "// rounded_wedge_tall.scad\n\n$fn = 32;\n\n// Main tall wedge body\ndifference() {\n    // Create a tall, thick wedge\n    linear_extrude(height = 100, scale = 0.4)\n        square([50, 80], center = true);\n    \n    // Carve out a rounded front edge\n    translate([0, 50, 50])\n        rotate([0, 90, 0])\n            cylinder(h = 60, r = 10, center = true);\n}\n\n// Add rounded top cap\ntranslate([0, 0, 100])\n    scale([0.4, 1, 1])\n        sphere(r = 25);\n\n// Add fillet at back bottom\ntranslate([0, -40, 0])\n    rotate([0, 90, 0])\n        cylinder(h = 60, r = 8, center = true);",
    "renders": true
  },
  {
    "shape_combination": "rounded_wedge_short",
    "openscad_code": "// rounded_wedge_short.scad\n\n$fn = 32;\n\ndifference() {\n    // main rounded wedge\n    intersection() {\n        // basic wedge\n        polyhedron(\n            points = [\n                [0, -25, 0],      // 0 bottom front left\n                [0, 25, 0],       // 1 bottom front right\n                [0, -25, 25],     // 2 bottom back left\n                [0, 25, 25],      // 3 bottom back right\n                [60, -25, 0],     // 4 top front left\n                [60, 25, 0],      // 5 top front right\n                [60, -25, 25],    // 6 top back left\n                [60, 25, 25]      // 7 top back right\n            ],\n            faces = [\n                [0,1,5,4], [2,3,7,6], [0,2,6,4],\n                [1,3,7,5], [0,1,3,2], [4,5,7,6]\n            ]\n        );\n        // rounding sphere\n        translate([30, 0, 12.5])\n            sphere(d = 70);\n    }\n    \n    // cut off bottom for flat base\n    translate([30, 0, -10])\n        cube([100, 100, 20], center = true);\n}",
    "renders": true
  },
  {
    "shape_combination": "rounded_wedge_steep",
    "openscad_code": "// rounded_wedge_steep.scad\n\ndifference() {\n    // Main steep wedge\n    wedge();\n    \n    // Cut rounded bottom\n    translate([0, -5, -2])\n        rotate([90, 0, 0])\n            cylinder(h=20, r1=40, r2=25, $fn=60);\n    \n    // Trim rear for steepness\n    translate([-30, -30, 15])\n        cube([60, 60, 30]);\n}\n\nmodule wedge() {\n    difference() {\n        // Base wedge\n        rotate([0, 0, 90])\n            linear_extrude(height=100)\n                polygon(points=[[0,0],[50,0],[0,50]]);\n        \n        // Round front corner\n        translate([0, 50, 0])\n            rotate([0, 90, 0])\n                cylinder(h=50, r=15, $fn=30);\n    }\n    \n    // Add top rounded edge\n    translate([0, 25, 100])\n        rotate([0, 90, 0])\n            cylinder(h=50, r=8, $fn=30);\n}",
    "renders": true
  },
  {
    "shape_combination": "rounded_wedge_shallow",
    "openscad_code": "// Rounded wedge with shallow angle, made by subtracting a cylinder from a wedge\ndifference() {\n    // Main shallow wedge\n    wedge();\n    \n    // Rounding cut along front edge\n    translate([0, 5, -5])\n        rotate([0, 90, 0])\n            cylinder(h=100, r=15, center=true);\n}\n\nmodule wedge() {\n    difference() {\n        // Full block\n        cube([80, 50, 10], center=true);\n        \n        // Remove back half at angle to create wedge\n        translate([0, 25, 5])\n            rotate([0, 10, 0])\n                cube([100, 50, 20], center=true);\n    }\n}",
    "renders": true
  },
  {
    "shape_combination": "beveled_box",
    "openscad_code": "// Beveled box = outer box minus slightly smaller box with rounded edges\ndifference() {\n    // Outer box with bevels\n    minkowski() {\n        cube([60, 40, 30], center = true);\n        cylinder(r = 3, h = 0.1, center = true);\n    }\n    \n    // Hollow out the center\n    translate([0, 0, 0])\n    cube([54, 34, 35], center = true);\n    \n    // Add a cutout for cables\n    translate([0, -25, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 50, r = 5, center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "beveled_box_large",
    "openscad_code": "// beveled_box_large.scad\n\n// Main box with beveled edges\ndifference() {\n    // Outer box\n    cube([100, 80, 60], center = true);\n    \n    // Remove inner box for bevel effect\n    cube([90, 70, 50], center = true);\n    \n    // Remove top chamfers\n    intersection() {\n        cube([100, 80, 60], center = true);\n        translate([0, 0, 15]) rotate([45, 0, 0]) cube([200, 200, 50], center = true);\n    }\n    \n    // Remove bottom chamfers\n    intersection() {\n        cube([100, 80, 60], center = true);\n        translate([0, 0, -15]) rotate([-45, 0, 0]) cube([200, 200, 50], center = true);\n    }\n}\n\n// Add rounded corner cylinders\nunion() {\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * 45, y * 35, 0]) \n                cylinder(h = 60, r = 10, center = true);\n        }\n    }\n}",
    "renders": false
  },
  {
    "shape_combination": "beveled_box_small",
    "openscad_code": "// beveled_box_small.scad\n\nmodule beveled_box_small() {\n    difference() {\n        // main box with rounded top edges\n        difference() {\n            cube([40, 40, 30], center=true);\n            translate([0, 0, 15])\n                minkowski() {\n                    cube([36, 36, 20], center=true);\n                    cylinder(r=3, h=1, $fn=16);\n                }\n        }\n        \n        // hollow interior\n        cube([32, 32, 26], center=true);\n        \n        // beveled bottom edges\n        translate([0, 0, -15])\n            cube([45, 45, 5], center=true);\n    }\n}\n\nbeveled_box_small();",
    "renders": false
  },
  {
    "shape_combination": "beveled_box_corners_only",
    "openscad_code": "// beveled_box_corners_only.scad\n// Medium complexity: subtract cylindrical bevels at each corner\n\n$fn = 32;\n\nbox_x = 80;\nbox_y = 60;\nbox_z = 40;\nbevel_r = 12;\nwall_t = 3;\n\nmodule beveled_box_corners_only() {\n    difference() {\n        // solid outer box\n        cube([box_x, box_y, box_z], center = true);\n        \n        // hollow center\n        translate([0, 0, 0])\n            cube([box_x - 2*wall_t, box_y - 2*wall_t, box_z + 1], center = true);\n        \n        // bevel cuts at corners\n        for(x = [-1, 1])\n        for(y = [-1, 1])\n        for(z = [-1, 1])\n            translate([x * (box_x/2 - bevel_r),\n                       y * (box_y/2 - bevel_r),\n                       z * (box_z/2 - bevel_r)])\n                rotate([0, 90*(abs(y)), 90*(abs(x))])\n                    cylinder(h = bevel_r*2, r = bevel_r, center = true);\n    }\n}\n\nbeveled_box_corners_only();",
    "renders": false
  },
  {
    "shape_combination": "beveled_box_all_edges",
    "openscad_code": "// beveled_box_all_edges.scad\n// Medium complexity: 4 chamfer operations per edge\n\n$fn = 30;\n\nbox_x = 80;\nbox_y = 60;\nbox_z = 40;\nchamfer = 6;\n\n// Main box with rounded edges\ndifference() {\n    // Outer box\n    cube([box_x, box_y, box_z], center = true);\n    \n    // Edge chamfers\n    // Top front edge\n    translate([0, box_y/2 - chamfer/2, box_z/2 - chamfer/2])\n        rotate([45, 0, 0])\n            cube([box_x*1.2, chamfer*1.2, chamfer*1.2], center = true);\n    \n    // Top back edge\n    translate([0, -box_y/2 + chamfer/2, box_z/2 - chamfer/2])\n        rotate([-45, 0, 0])\n            cube([box_x*1.2, chamfer*1.2, chamfer*1.2], center = true);\n    \n    // Top left edge\n    translate([-box_x/2 + chamfer/2, 0, box_z/2 - chamfer/2])\n        rotate([0, -45, 0])\n            cube([chamfer*1.2, box_y*1.2, chamfer*1.2], center = true);\n    \n    // Top right edge\n    translate([box_x/2 - chamfer/2, 0, box_z/2 - chamfer/2])\n        rotate([0, 45, 0])\n            cube([chamfer*1.2, box_y*1.2, chamfer*1.2], center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "beveled_cylinder",
    "openscad_code": "$fn = 32;\n\nmodule beveled_cylinder() {\n    h = 60;\n    r = 25;\n    b = 8;  // bevel size\n    \n    // main cylinder\n    difference() {\n        cylinder(h = h, r = r);\n        \n        // top bevel\n        translate([0, 0, h - b])\n            cylinder(h = b + 1, r1 = r - b, r2 = r);\n        \n        // bottom bevel\n        translate([0, 0, -1])\n            cylinder(h = b + 1, r1 = r, r2 = r - b);\n    }\n    \n    // optional inner hole\n    difference() {\n        cylinder(h = h, r = r - 2);\n        cylinder(h = h + 2, r = r - 4);\n    }\n}\n\nbeveled_cylinder();",
    "renders": false
  },
  {
    "shape_combination": "beveled_cylinder_top",
    "openscad_code": "// beveled_cylinder_top.scad\n// Medium complexity: top of a cylinder beveled by subtracting a rotated cube\n\nh = 40;          // overall height\nr = 35;          // cylinder radius\nb = 8;           // bevel depth\nt = 5;           // top flat thickness\n\ndifference() {\n    cylinder(h = h, r = r, $fn = 64);          // main cylinder\n    \n    // bevel cutting shape\n    translate([0, 0, h - t])\n        rotate([45, 0, 0])\n            translate([0, 0, -r])\n                cube([r*2, r*2, r*2], center = true);\n    \n    // central hole\n    cylinder(h = h + 1, r = 8, $fn = 32);\n}",
    "renders": false
  },
  {
    "shape_combination": "beveled_cylinder_bottom",
    "openscad_code": "// beveled_cylinder_bottom: cylinder with a beveled bottom edge\n$fn = 36;\n\ndifference() {\n    // main cylinder\n    cylinder(h = 80, d = 60, center = false);\n    \n    // bevel cut\n    translate([0, 0, -0.1])\n        cylinder(h1 = 10, h2 = 0, d1 = 80, d2 = 0, center = false);\n}",
    "renders": false
  },
  {
    "shape_combination": "beveled_cylinder_both",
    "openscad_code": "// beveled_cylinder_both.scad\n// cylinder with bevels on both ends\n\n$fn=32;\n\nmodule beveled_cylinder_both(r=25, h=80, bevel=5) {\n    difference() {\n        cylinder(r=r, h=h);\n        \n        // top bevel\n        translate([0,0,h-bevel])\n            cylinder(r1=r+bevel, r2=r-bevel, h=bevel*2);\n        \n        // bottom bevel\n        translate([0,0,-bevel])\n            cylinder(r1=r-bevel, r2=r+bevel, h=bevel*2);\n    }\n}\n\nbeveled_cylinder_both();",
    "renders": false
  },
  {
    "shape_combination": "rounded_pyramid",
    "openscad_code": "// Rounded pyramid: union of pyramid and sphere at tip\nmodule rounded_pyramid(h = 60, base = 50, radius = 12) {\n    // Main pyramid body\n    pyramid();\n    \n    // Rounded tip\n    translate([0, 0, h])\n        sphere(r = radius);\n    \n    module pyramid() {\n        // Create pyramid by subtracting rotated cubes\n        difference() {\n            // Tall center cube as base\n            cube([base, base, h], center = true);\n            \n            // Cut 4 sides at 45 degrees\n            rotate([0, 45, 0])\n                translate([0, 0, -h/2 - 1])\n                    cube([base*2, base*2, h + 2], center = true);\n            rotate([45, 0, 0])\n                translate([0, 0, -h/2 - 1])\n                    cube([base*2, base*2, h + 2], center = true);\n        }\n    }\n}\n\nrounded_pyramid();",
    "renders": false
  },
  {
    "shape_combination": "rounded_pyramid_tall",
    "openscad_code": "// Rounded pyramid tall: difference() between tall cone and off-center sphere\n$fn = 50;\n\ndifference() {\n    // Tall pyramid body as cone\n    cylinder(h = 120, r1 = 30, r2 = 0, center = false);\n    \n    // Sphere to round the top\n    translate([0, 0, 100])\n        sphere(r = 40);\n    \n    // Optional: small sphere to smooth bottom edge\n    translate([0, 0, -10])\n        sphere(r = 35);\n}",
    "renders": false
  },
  {
    "shape_combination": "rounded_pyramid_short",
    "openscad_code": "// rounded_pyramid_short\nmodule rounded_pyramid_short(h = 40, r = 30) {\n    // build the short pyramid\n    pyramid = cylinder(h, r, 0, $fn = 4);\n    \n    // generate rounded edges\n    edge = rotate([0, 90, 0]) cylinder(r, r, r, $fn = 32);\n    \n    // add rounding at base corners\n    rounded = union() {\n        pyramid;\n        for(a = [0:90:270])\n            rotate([0, 0, a])\n                translate([r/sqrt(2), r/sqrt(2), 0])\n                    edge;\n    };\n    \n    // flatten bottom and remove inner\n    difference() {\n        intersection() {\n            rounded;\n            cube([r*2, r*2, h], center = true);\n        }\n        translate([0, 0, -1])\n            cylinder(h - 2, r*0.7, 0, $fn = 4);\n    }\n}\n\nrounded_pyramid_short();",
    "renders": false
  },
  {
    "shape_combination": "rounded_pyramid_wide_base",
    "openscad_code": "// rounded_pyramid_wide_base.scad\n// rounded top on a wide square base\n\n$fn = 36;\n\nbase_w = 100;\nbase_h = 15;\ntop_r = 12;\npyramid_h = 60;\n\ndifference() {\n    union() {\n        // wide base\n        cube([base_w, base_w, base_h], center = true);\n\n        // pyramid body\n        cylinder(h1 = 0, h2 = pyramid_h, r1 = base_w/2, r2 = top_r, center = false);\n    }\n\n    // hollow core\n    cylinder(h = base_h + pyramid_h + 2, r = top_r - 4, center = true);\n}\n\n// chamfer bottom edge\ndifference() {\n    cube([base_w, base_w, base_h], center = true);\n    translate([0, 0, -base_h])\n        cylinder(h = base_h*2, r1 = base_w/2 + 1, r2 = base_w/2 - 3, center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "rounded_cone",
    "openscad_code": "// rounded_cone\n// Medium complexity: cone with rounded top via sphere subtraction and base fillet via torus\n\n$fn = 64;\n\nunion() {\n    // Main cone body\n    cylinder(h = 60, r1 = 25, r2 = 0, center = false);\n    \n    // Base fillet ring\n    translate([0, 0, -2])\n        rotate_extrude()\n            translate([23, 2, 0])\n                circle(r = 2);\n}\n\n// Rounded tip via subtracting sphere from cone\ndifference() {\n    // Keep the cone body with fillet\n    children();\n    \n    // Sphere to round the tip\n    translate([0, 0, 60])\n        sphere(r = 8);\n}",
    "renders": false
  },
  {
    "shape_combination": "rounded_cone_tall",
    "openscad_code": "// rounded cone with rounded top removed to make it tall\ndifference() {\n    // main rounded cone\n    minkowski() {\n        cylinder(h = 60, d1 = 30, d2 = 0, $fn = 32);  // tall cone\n        sphere(5, $fn = 24);                          // rounding\n    }\n    \n    // cut off rounded tip to keep it tall\n    translate([0, 0, 65])\n        sphere(8, $fn = 24);\n    \n    // slice bottom flat \n    translate([0, 0, -1])\n        cube([100, 100, 2], center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "rounded_cone_short",
    "openscad_code": "// rounded_cone_short : union() of small cone on top of larger cone\n// overall height 60mm, max diameter 80mm, rounded top via small cone\n\n$fn = 32;\n\nheight_large = 50;\nr_base = 40;\nr_mid = 30;\n\nheight_small = 10;\nr_top = 10;\n\nunion() {\n    // main short cone body\n    cylinder(h = height_large, r1 = r_base, r2 = r_mid, center = false);\n\n    // small rounded tip cone\n    translate([0, 0, height_large])\n        cylinder(h = height_small, r1 = r_mid, r2 = r_top, center = false);\n}",
    "renders": false
  },
  {
    "shape_combination": "rounded_cone_steep",
    "openscad_code": "// rounded_cone_steep: difference of steep cone with sphere chamfer, then union with toroidal edge\n\nheight = 90;\nbase_r = 40;\ntip_r = 5;\nedge_r = 8;\n\ndifference() {\n    cylinder(h = height, r1 = base_r, r2 = tip_r, $fn = 60);\n    translate([0, 0, height - edge_r])\n        sphere(r = edge_r, $fn = 60);\n}\n\ntranslate([0, 0, height - edge_r])\n    rotate_extrude($fn = 60)\n        translate([tip_r + edge_r, 0])\n            circle(r = edge_r);\n\n%translate([0, 0, -1])\n    cylinder(h = height + 2, r1 = base_r + 1, r2 = tip_r + 1, $fn = 60);",
    "renders": false
  },
  {
    "shape_combination": "rounded_cone_shallow",
    "openscad_code": "// rounded_cone_shallow\n// shallow cone with rounded top via sphere subtraction\n\ndifference() {\n    union() {\n        cylinder(h = 20, r1 = 40, r2 = 0, $fn = 50);\n        translate([0, 0, 18])\n            sphere(r = 15, $fn = 50);\n    }\n    translate([0, 0, 25])\n        sphere(r = 20, $fn = 50);\n}",
    "renders": false
  },
  {
    "shape_combination": "frame_square",
    "openscad_code": "// Square frame using difference of two cubes\ndifference() {\n    // Outer cube\n    cube([80, 80, 20], center=true);\n    \n    // Inner cube (creates hollow frame)\n    cube([60, 60, 25], center=true);\n    \n    // Corner holes for mounting\n    #translate([30, 30, 0]) cylinder(h=25, d=5, center=true);\n    #translate([-30, 30, 0]) cylinder(h=25, d=5, center=true);\n    #translate([30, -30, 0]) cylinder(h=25, d=5, center=true);\n    #translate([-30, -30, 0]) cylinder(h=25, d=5, center=true);\n}",
    "renders": false
  },
  {
    "shape_combination": "frame_square_thick",
    "openscad_code": "// frame_square_thick.scad\n// medium complexity: thick square frame with rounded edges and inner chamfers\n\nouter = 100;\ninner = 60;\nthick = 15;\ncham = 5;\nfillet = 3;\n\ndifference() {\n    // main thick square frame\n    difference() {\n        minkowski() {\n            square([outer, outer], center = true);\n            circle(fillet);\n        }\n        minkowski() {\n            square([inner, inner], center = true);\n            circle(fillet);\n        }\n        linear_extrude(height = thick) children();\n    }\n    \n    // top chamfer all around\n    translate([0, 0, thick - cham])\n    linear_extrude(height = cham)\n    offset(delta = -cham)\n    offset(delta = cham)\n    difference() {\n        square([outer + 2, outer + 2], center = true);\n        square([inner - 2, inner - 2], center = true);\n    }\n    \n    // bottom chamfer\n    translate([0, 0, 0])\n    linear_extrude(height = cham)\n    offset(delta = -cham)\n    offset(delta = cham)\n    difference() {\n        square([outer + 2, outer + 2], center = true);\n        square([inner - 2, inner - 2], center = true);\n    }\n}\n\nlinear_extrude(height = thick) children();",
    "renders": false
  },
  {
    "shape_combination": "frame_square_thin",
    "openscad_code": "// frame_square_thin.scad\n// Medium-complexity square frame made from thin walls using boolean operations\n\nwall_th = 2;\nouter = 60;\ninner = outer - 2*wall_th;\ndepth = 10;\n\ndifference() {\n    // solid square block\n    cube([outer, outer, depth], center=true);\n    \n    // cut out center to leave thin frame\n    cube([inner, inner, depth+2], center=true);\n    \n    // add decorative corner cut-outs\n    translate([outer/2-3, outer/2-3, 0])\n        cylinder(h=depth+2, r=3, center=true);\n    mirror([1,0,0])\n        translate([outer/2-3, outer/2-3, 0])\n            cylinder(h=depth+2, r=3, center=true);\n    mirror([0,1,0])\n        translate([outer/2-3, outer/2-3, 0])\n            cylinder(h=depth+2, r=3, center=true);\n    mirror([1,1,0])\n        translate([outer/2-3, outer/2-3, 0])\n            cylinder(h=depth+2, r=3, center=true);\n}",
    "renders": false
  },
  {
    "shape_combination": "frame_rectangular",
    "openscad_code": "difference() {\n    // outer rectangular frame\n    linear_extrude(height = 8)\n        square([80, 50], center = true);\n    \n    // inner rectangular cutout\n    translate([0, 0, -1])\n        linear_extrude(height = 10)\n            square([70, 40], center = true);\n    \n    // corner holes\n    translate([35, 20, -1])\n        cylinder(h = 10, d = 6, $fn = 20);\n    translate([-35, 20, -1])\n        cylinder(h = 10, d = 6, $fn = 20);\n    translate([35, -20, -1])\n        cylinder(h = 10, d = 6, $fn = 20);\n    translate([-35, -20, -1])\n        cylinder(h = 10, d = 6, $fn = 20);\n}",
    "renders": false
  },
  {
    "shape_combination": "frame_rectangular_wide",
    "openscad_code": "// frame_rectangular_wide.scad\n// Medium-complexity wide rectangular frame using difference() and union()\n\n// Overall frame dimensions\nframe_w = 100;\nframe_h = 60;\nframe_d = 10;\nwall = 4;\n\n// Outer ring\ndifference() {\n    cube([frame_w, frame_h, frame_d], center=true);\n    // Inner cutout\n    translate([0,0,-1])\n        cube([frame_w - 2*wall, frame_h - 2*wall, frame_d + 2], center=true);\n}\n\n// Reinforcement ribs along long edges\nunion() {\n    translate([0, (frame_h - wall)/2, 0])\n        cube([frame_w - 2*wall, wall, frame_d], center=true);\n    translate([0, -(frame_h - wall)/2, 0])\n        cube([frame_w - 2*wall, wall, frame_d], center=true);\n}\n\n// Corner gussets\nfor(x = [-1, 1])\nfor(y = [-1, 1])\n    translate([x*(frame_w/2 - wall/2), y*(frame_h/2 - wall/2), 0])\n        cube([wall, wall, frame_d], center=true);",
    "renders": false
  },
  {
    "shape_combination": "frame_rectangular_tall",
    "openscad_code": "// frame_rectangular_tall: tall rectangular frame using difference of outer box and inner box\nwall_thickness = 3;\nouter_w = 80;\nouter_h = 120;\nouter_d = 40;\ninner_w = outer_w - 2*wall_thickness;\ninner_h = outer_h - 2*wall_thickness;\ninner_d = outer_d - wall_thickness;\n\ndifference() {\n    // outer hollow box\n    difference() {\n        cube([outer_w, outer_h, outer_d], center=true);\n        translate([0,0,wall_thickness/2])\n            cube([inner_w, inner_h, outer_d+1], center=true);\n    }\n\n    // bottom opening\n    translate([0, -outer_h/2, -outer_d/2])\n        cube([inner_w, wall_thickness, wall_thickness]);\n\n    // top opening\n    translate([0, outer_h/2, -outer_d/2])\n        cube([inner_w, wall_thickness, wall_thickness]);\n}",
    "renders": false
  },
  {
    "shape_combination": "frame_circular",
    "openscad_code": "// frame_circular - circular frame made from difference of torus and cube\n// outer ring: 90 mm OD, 10 mm thick\n// inner cutout: 70 mm square\n// thickness: 15 mm\n\ndifference() {\n    // main torus ring\n    rotate_extrude(angle = 360)\n        translate([35, 0, 0])\n            circle(d = 10);\n\n    // central square cutout\n    translate([-35, -35, -8])\n        cube([70, 70, 16]);\n\n    // side clearance cuts for easier mounting\n    translate([-50, -7.5, -8])\n        cube([100, 15, 16]);\n}",
    "renders": false
  },
  {
    "shape_combination": "frame_circular_thick",
    "openscad_code": "// frame_circular_thick: thick circular frame with inner cutout and mounting holes\n$fn = 48;\n\nmodule frame_circular_thick(od=100, id=60, h=10, hole_d=4) {\n    difference() {\n        // outer thick ring\n        cylinder(h=h, d=od);\n        \n        // remove center\n        cylinder(h=h+1, d=id);\n        \n        // four mounting holes\n        for(a=[0:90:270])\n            rotate([0,0,a])\n                translate([id/2, 0, -1])\n                    cylinder(h=h+2, d=hole_d);\n    }\n}\n\nframe_circular_thick();",
    "renders": false
  },
  {
    "shape_combination": "frame_circular_thin",
    "openscad_code": "// frame_circular_thin: thin circular frame made by subtracting a smaller cylinder from a larger one and adding four mounting holes\n\n$fn = 50;\n\ndifference() {\n    union() {\n        difference() {\n            cylinder(h = 4, d = 100);\n            cylinder(h = 4.5, d = 90);\n        }\n        \n        // small tabs for mounting\n        for (a = [0:90:270]) {\n            rotate([0, 0, a])\n                translate([45, 0, 0])\n                    cube([10, 6, 4], center = true);\n        }\n    }\n    \n    // mounting holes\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n            translate([45, 0, -1])\n                cylinder(h = 6, d = 3.5);\n    }\n}",
    "renders": false
  },
  {
    "shape_combination": "frame_hexagonal",
    "openscad_code": "// hexagonal frame made by subtracting an inner hexagon from an outer hexagon\n// then adding six small cylinders at the corners for fillets\n\nouter_r = 50;\ninner_r = 40;\nheight = 10;\nfillet_r = 3;\n\ndifference() {\n    // outer hexagon\n    cylinder(h = height, r = outer_r, $fn = 6);\n    \n    // inner hexagon\n    cylinder(h = height + 1, r = inner_r, $fn = 6, center = true);\n}\n\n// corner fillets\nfor (a = [0:60:360]) {\n    rotate([0, 0, a])\n        translate([outer_r, 0, height/2])\n            rotate([90, 0, 0])\n                cylinder(h = fillet_r * 2, r = fillet_r, $fn = 16);\n}",
    "renders": false
  },
  {
    "shape_combination": "frame_octagonal",
    "openscad_code": "// frame_octagonal: octagonal frame built from union of 8 thin cuboid segments\n// outer edge 80 mm, wall thickness 5 mm\n$fn = 32;\n\nmodule octa_frame() {\n    difference() {\n        cube([80, 80, 10], center=true);\n        cube([70, 70, 12], center=true);\n    }\n}\n\nfor (a = [0:45:315]) {\n    rotate([0, 0, a])\n        translate([0, 37.5, 0])\n            cube([5, 5, 10], center=true);\n}\n\nunion() {\n    octa_frame();\n    for (a = [0:45:315]) {\n        rotate([0, 0, a])\n            translate([0, 37.5, 0])\n                cube([5, 5, 10], center=true);\n    }\n}",
    "renders": false
  },
  {
    "shape_combination": "ring_thick",
    "openscad_code": "// ring_thick.scad\n// a thick ring created by subtracting a smaller cylinder from a larger one\n\nr_outer = 30;\nr_inner = 20;\nheight = 15;\n\ndifference() {\n    cylinder(h = height, r = r_outer, center = true);\n    cylinder(h = height + 2, r = r_inner, center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "ring_thick_large",
    "openscad_code": "$fa = 1;\n$fs = 0.4;\n\n// ring_thick_large: thick band with rounded edges and internal groove\ndifference() {\n    difference() {\n        // thick rounded outer band\n        minkowski() {\n            difference() {\n                cylinder(h = 12, d = 80, center = true);\n                cylinder(h = 14, d = 60, center = true);\n            }\n            sphere(d = 4);\n        }\n        // internal groove\n        translate([0, 0, -1])\n            cylinder(h = 14, d = 70, center = true);\n    }\n    // remove center hole\n    cylinder(h = 20, d = 58, center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "ring_thick_small",
    "openscad_code": "// ring_thick_small - medium complexity thick ring with chamfered edges\n$fn = 32;\n\n// Main thick ring body\ndifference() {\n    // Outer ring\n    difference() {\n        cylinder(h=12, d=60);\n        cylinder(h=14, d=40);\n    }\n    \n    // Inner comfort-fit curve\n    intersection() {\n        difference() {\n            cylinder(h=12, d=38);\n            cylinder(h=14, d=36);\n        }\n        \n        // Sphere for inner curve\n        translate([0, 0, -6])\n            sphere(d=42);\n    }\n}\n\n// Top chamfer\ndifference() {\n    cylinder(h=3, d1=60, d2=56);\n    cylinder(h=4, d1=40, d2=38);\n}\n\n// Bottom chamfer\ntranslate([0, 0, 9])\n    difference() {\n        cylinder(h=3, d1=56, d2=60);\n        cylinder(h=4, d1=38, d2=40);\n    }",
    "renders": false
  },
  {
    "shape_combination": "ring_thick_wide",
    "openscad_code": "// ring_thick_wide: thick wide band with rounded edges and inner comfort fit\n$fn = 50;\n\nouter_r = 30;\nouter_h = 15;\n\ninner_r = 22;\ninner_h = 15;\n\nedge_r = 3;\n\ndifference() {\n    // main thick wide band\n    cylinder(h = outer_h, r = outer_r);\n    \n    // central hole\n    cylinder(h = inner_h + 2, r = inner_r);\n    \n    // chamfer top outer edge\n    translate([0, 0, outer_h - edge_r])\n        rotate_extrude()\n            translate([outer_r - edge_r, 0, 0])\n                circle(r = edge_r);\n    \n    // chamfer bottom outer edge\n    translate([0, 0, -1])\n        rotate_extrude()\n            translate([outer_r - edge_r, 0, 0])\n                circle(r = edge_r);\n    \n    // comfort chamfer top inner edge\n    translate([0, 0, inner_h - edge_r])\n        rotate_extrude()\n            translate([inner_r + edge_r, 0, 0])\n                circle(r = edge_r);\n    \n    // comfort chamfer bottom inner edge\n    translate([0, 0, -1])\n        rotate_extrude()\n            translate([inner_r + edge_r, 0, 0])\n                circle(r = edge_r);\n}",
    "renders": false
  },
  {
    "shape_combination": "ring_thick_narrow",
    "openscad_code": "$fn = 48;\n\n// Ring: thick band, narrow top surface\ndifference() {\n    // Outer thick band\n    difference() {\n        cylinder(h = 20, r = 40, center = true);\n        cylinder(h = 22, r = 30, center = true);\n    }\n    \n    // Narrow top surface via angled cut\n    translate([0, 0, 5])\n        cylinder(h = 30, r1 = 50, r2 = 0, center = true);\n    \n    // Mirror cut for bottom\n    translate([0, 0, -5])\n        cylinder(h = 30, r1 = 0, r2 = 50, center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "ring_thin",
    "openscad_code": "// ring_thin: thin ring created by differencing two cylinders\n$fn = 64;\n\ndifference() {\n    // outer cylinder\n    cylinder(h = 5, r = 25, center = true);\n    \n    // inner cylinder (hole)\n    cylinder(h = 6, r = 22, center = true);\n}\n\n// optional: add small sphere on top for detail\ntranslate([0, 0, 3]) {\n    sphere(r = 3);\n}",
    "renders": false
  },
  {
    "shape_combination": "ring_thin_large",
    "openscad_code": "// ring_thin_large: large thin ring created by differencing two cylinders\ndifference() {\n    // outer cylinder - large diameter, thin height\n    cylinder(h = 6, d = 100, center = true, $fn = 100);\n    \n    // inner cylinder - slightly smaller diameter for thin wall\n    cylinder(h = 8, d = 90, center = true, $fn = 100);\n}",
    "renders": false
  },
  {
    "shape_combination": "ring_thin_small",
    "openscad_code": "// Ring: thin, small\n// Outer band minus inner band = thin ring\n$fn = 48;\nheight = 6;\nouter_r = 12;\ninner_r = 10;\ngroove_h = 1.0;\ngroove_r = 11;\n\ndifference() {\n    difference() {\n        // Outer band\n        cylinder(h = height, r = outer_r, center = true);\n        // Remove center\n        cylinder(h = height + 0.2, r = inner_r, center = true);\n    }\n    // Cosmetic groove on top\n    translate([0, 0, height/2 - groove_h/2])\n        cylinder(h = groove_h + 0.1, r = groove_r, center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "washer_small",
    "openscad_code": "difference() {\n    // outer washer disc\n    cylinder(h = 3, d = 40, $fn = 60);\n    \n    // inner hole\n    cylinder(h = 3.5, d = 20, $fn = 60);\n    \n    // chamfer lower edge\n    translate([0, 0, -0.1])\n        cylinder(h = 3.5, d1 = 42, d2 = 36, $fn = 60);\n    \n    // chamfer upper edge\n    translate([0, 0, -0.1])\n        cylinder(h = 3.5, d1 = 36, d2 = 42, $fn = 60);\n}",
    "renders": false
  },
  {
    "shape_combination": "washer_large",
    "openscad_code": "// washer_large.scad\n// Large washer with medium-complexity features\n\n// Washer parameters\nouter_d = 60;\ninner_d = 30;\nthickness = 6;\nchamfer = 1;\n\nmodule washer_large() {\n    // Main washer body\n    difference() {\n        // Outer cylinder with chamfer\n        difference() {\n            cylinder(h=thickness, d=outer_d, $fn=64);\n            translate([0, 0, -0.1])\n                cylinder(h=thickness+0.2, d=outer_d-2*chamfer, $fn=64);\n        }\n        \n        // Inner hole with chamfer\n        union() {\n            cylinder(h=thickness+0.2, d=inner_d, $fn=64);\n            translate([0, 0, -0.1])\n                cylinder(h=thickness+0.4, d=inner_d+2*chamfer, $fn=64);\n        }\n    }\n    \n    // Add small drainage groove\n    difference() {\n        translate([0, 0, thickness/2])\n            cube([outer_d, 2, thickness], center=true);\n        cylinder(h=thickness+1, d=inner_d, $fn=64);\n    }\n}\n\nwasher_large();",
    "renders": false
  },
  {
    "shape_combination": "washer_thick",
    "openscad_code": "// washer_thick.scad\n// Thick washer created by difference between two cylinders and union with a torus for rounded edges\n\n// main washer body\ndifference() {\n    // outer thick cylinder\n    cylinder(h=8, d=40, center=true);\n    \n    // inner hole\n    cylinder(h=10, d=20, center=true);\n}\n\n// top rounded edge\ntranslate([0, 0, 4])\n    rotate_extrude()\n        translate([20, 0])\n            circle(r=2);\n\n// bottom rounded edge\ntranslate([0, 0, -4])\n    rotate_extrude()\n        translate([20, 0])\n            circle(r=2);\n\n// chamfer detail on top face\ndifference() {\n    cylinder(h=1, d=36, center=true);\n    cylinder(h=2, d=32, center=true);\n}\ntranslate([0, 0, 3.5])\n    difference() {\n        cylinder(h=1, d=36, center=true);\n        cylinder(h=2, d=32, center=true);\n    }",
    "renders": false
  },
  {
    "shape_combination": "washer_thin",
    "openscad_code": "difference() {\n    cylinder(h=2, d=50, $fn=64);          // main thin washer disc\n    \n    cylinder(h=3, d=20, $fn=64);          // central hole\n    \n    for(i=[0:5:355])                      // six small anti-rotation notches\n        rotate([0,0,i])\n            translate([22.5,0,-0.5])\n                cube([2,2,3], center=true);\n}",
    "renders": false
  },
  {
    "shape_combination": "washer_square",
    "openscad_code": "// washer_square.scad\n// square washer with rounded corners and chamfer\n\n$fn = 50;\n\nouter = 60;\ninner = 30;\nthickness = 5;\nchamfer = 1.5;\n\ndifference() {\n    // main washer body with rounded corners\n    difference() {\n        minkowski() {\n            square([outer, outer], center = true);\n            circle(r = 4);\n        }\n        \n        // center hole with rounded corners\n        minkowski() {\n            square([inner, inner], center = true);\n            circle(r = 2);\n        }\n    }\n    \n    // top chamfer\n    translate([0, 0, thickness - chamfer])\n    cube([outer + 2, outer + 2, chamfer], center = true);\n    \n    // bottom chamfer\n    mirror([0, 0, 1])\n    translate([0, 0, thickness - chamfer])\n    cube([outer + 2, outer + 2, chamfer], center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "washer_round",
    "openscad_code": "// washer_round.scad\n// round washer with rounded top and bottom edges\n\n$fn = 36;\n\nmodule washer_round(od=30, id=10, h=4, r=1) {\n    difference() {\n        // main washer body with rounded top/bottom\n        difference() {\n            union() {\n                // top rounded edge\n                translate([0, 0, h-r])\n                    minkowski() {\n                        cylinder(h=0.1, r=od/2-r);\n                        sphere(r=r);\n                    }\n                // bottom rounded edge\n                translate([0, 0, r])\n                    minkowski() {\n                        cylinder(h=0.1, r=od/2-r);\n                        sphere(r=r);\n                    }\n                // straight center\n                cylinder(h=h-2*r, r=od/2);\n            }\n            // inner hole\n            cylinder(h=h+2, r=id/2, center=true);\n        }\n        \n        // optional chamfer on hole top/bottom\n        translate([0, 0, h/2])\n            cylinder(h=h+1, r1=id/2+0.5, r2=id/2-0.5, center=true);\n        translate([0, 0, -h/2])\n            cylinder(h=h+1, r1=id/2-0.5, r2=id/2+0.5, center=true);\n    }\n}\n\nwasher_round();",
    "renders": false
  },
  {
    "shape_combination": "spacer_round",
    "openscad_code": "// spacer_round: round spacer with central hole and four mounting holes\n// uses difference() to subtract holes from a short fat cylinder\n\n// overall dimensions\n$fn = 48;\nd = 60;          // outer diameter\nh = 12;          // thickness\nhole_d = 6;      // central hole\nbolt_d = 3.5;    // mounting bolts\nbolt_r = 22;     // bolt circle radius\n\ndifference() {\n    // main spacer disc\n    cylinder(d = d, h = h, center = true);\n\n    // central hole\n    cylinder(d = hole_d, h = h + 0.2, center = true);\n\n    // four mounting holes\n    for (a = [0:90:360-1]) {\n        rotate([0, 0, a])\n            translate([bolt_r, 0, 0])\n                cylinder(d = bolt_d, h = h + 0.2, center = true);\n    }\n}",
    "renders": false
  },
  {
    "shape_combination": "spacer_round_tall",
    "openscad_code": "// spacer_round_tall\n$fn = 60;\n\nheight = 60;\nouter_d = 30;\ninner_d = 12;\nflange_d = 40;\nflange_h = 3;\n\ndifference() {\n    union() {\n        // main tall spacer tube\n        cylinder(h = height, d = outer_d, center = true);\n        \n        // top flange\n        translate([0, 0, height/2 - flange_h/2])\n            cylinder(h = flange_h, d = flange_d, center = true);\n            \n        // bottom flange\n        translate([0, 0, -height/2 + flange_h/2])\n            cylinder(h = flange_h, d = flange_d, center = true);\n    }\n    \n    // central through hole\n    cylinder(h = height + 2, d = inner_d, center = true);\n}\n\n// optional chamfers\ndifference() {\n    cylinder(h = height, d = outer_d, center = true);\n    cylinder(h = height + 0.5, d = outer_d - 2, center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "spacer_round_short",
    "openscad_code": "// spacer_round_short.scad\n// short round spacer with centered clearance hole and counter-bore\n\nheight = 12;\nouter_d = 30;\ninner_d = 8;\ncb_d = 14;\ncb_depth = 3;\n\ndifference() {\n    // main round spacer\n    cylinder(h = height, d = outer_d, $fn = 60);\n    \n    // clearance hole through\n    cylinder(h = height + 2, d = inner_d, $fn = 32);\n    \n    // counter-bore from top\n    translate([0, 0, height - cb_depth])\n        cylinder(h = cb_depth + 1, d = cb_d, $fn = 32);\n}",
    "renders": false
  },
  {
    "shape_combination": "spacer_round_thick",
    "openscad_code": "// spacer_round_thick.scad\n// Medium-complexity round spacer with thick walls and lightening cuts\n\n$fn = 64;\n\n// Main dimensions\nouter_d = 60;\ninner_d = 30;\nthick = 25;\n\n// Spokes and lightening\nspoke_w = 8;\nspoke_h = 20;\nlighten_r = 6;\n\ndifference() {\n    union() {\n        // Outer thick ring\n        cylinder(d = outer_d, h = thick, center = true);\n        \n        // Four spokes\n        for (a = [0:90:270]) {\n            rotate([0, 0, a])\n                translate([0, (outer_d + inner_d) / 4, 0])\n                    cube([spoke_w, (outer_d - inner_d) / 2, spoke_h], center = true);\n        }\n    }\n    \n    // Central hole\n    cylinder(d = inner_d, h = thick + 2, center = true);\n    \n    // Lightening holes on spokes\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n            translate([0, (outer_d + inner_d) / 4, 0])\n                cylinder(r = lighten_r, h = spoke_h + 2, center = true);\n    }\n}",
    "renders": false
  },
  {
    "shape_combination": "spacer_round_thin",
    "openscad_code": "// spacer_round_thin.scad\n\n// overall dimensions\n$fn = 36;\n\nouter_d = 100;\nheight = 10;\n\n// shaft hole\nshaft_d = 22;\n\n// mounting holes\nbolt_d = 6;\nbolt_pcd = 80;\n\ndifference() {\n    // main thin round plate\n    cylinder(d = outer_d, h = height, center = true);\n\n    // central shaft hole\n    cylinder(d = shaft_d, h = height + 2, center = true);\n\n    // four mounting bolt holes\n    for (a = [0:90:359]) {\n        rotate([0, 0, a])\n            translate([bolt_pcd/2, 0, 0])\n                cylinder(d = bolt_d, h = height + 2, center = true);\n    }\n\n    // optional lightening cutouts between bolt holes\n    for (a = [45:90:359]) {\n        rotate([0, 0, a])\n            translate([bolt_pcd/2, 0, -height/2])\n                cube([14, 10, height + 1], center = true);\n    }\n}",
    "renders": false
  },
  {
    "shape_combination": "spacer_square",
    "openscad_code": "// spacer_square: difference between outer cube and inner cube with chamfered edges\n$fn = 50;\n\ndifference() {\n    // Outer cube with rounded edges\n    minkowski() {\n        cube([50, 50, 10], center = true);\n        sphere(2);\n    }\n    \n    // Inner cube to hollow it out\n    cube([42, 42, 12], center = true);\n    \n    // Screw clearance holes at corners\n    for(x = [-20, 20], y = [-20, 20]) {\n        translate([x, y, 0])\n            cylinder(h = 12, d = 6, center = true);\n    }\n}",
    "renders": false
  },
  {
    "shape_combination": "spacer_square_tall",
    "openscad_code": "// spacer_square_tall.scad\n// Square spacer with vertical through-hole and lightening cutouts\n\n// Main block\ndifference() {\n    union() {\n        // Tall square body\n        cube([60,60,100], center=true);\n        \n        // Top chamfers\n        translate([0,0,45])\n            rotate([45,0,0])\n                cube([60,28.28,20], center=true);\n        \n        // Bottom chamfers\n        translate([0,0,-45])\n            rotate([45,0,0])\n                cube([60,28.28,20], center=true);\n    }\n    \n    // Central through hole\n    cylinder(h=110, d=20, center=true, $fn=32);\n    \n    // Lightening cutouts on sides\n    translate([0, 30, 20])\n        cube([40,2,60], center=true);\n    translate([0, -30, 20])\n        cube([40,2,60], center=true);\n    translate([30, 0, 20])\n        cube([2,40,60], center=true);\n    translate([-30, 0, 20])\n        cube([2,40,60], center=true);\n}",
    "renders": false
  },
  {
    "shape_combination": "spacer_square_short",
    "openscad_code": "// spacer_square_short.scad\n\n// Main square plate\ndifference() {\n    // 70 mm square base, 12 mm thick\n    cube([70, 70, 12], center = true);\n    \n    // Central through hole\n    cylinder(h = 15, d = 8, center = true, $fn = 32);\n    \n    // Four corner mounting holes (5 mm diameter)\n    translate([28, 28, 0]) cylinder(h = 15, d = 5, center = true, $fn = 32);\n    translate([-28, 28, 0]) cylinder(h = 15, d = 5, center = true, $fn = 32);\n    translate([28, -28, 0]) cylinder(h = 15, d = 5, center = true, $fn = 32);\n    translate([-28, -28, 0]) cylinder(h = 15, d = 5, center = true, $fn = 32);\n    \n    // Lightening pockets on bottom face\n    translate([0, 0, -6]) {\n        for (x = [-25, 25]) {\n            for (y = [-25, 25]) {\n                translate([x, y, 0])\n                    cylinder(h = 6, d = 18, $fn = 32);\n            }\n        }\n    }\n}",
    "renders": false
  },
  {
    "shape_combination": "bushing_small",
    "openscad_code": "// bushing_small.scad\n\n// Outer shell\ndifference() {\n    union() {\n        // Main cylinder body\n        cylinder(h=25, d=30, $fn=50);\n        \n        // Flange\n        translate([0,0,25])\n        cylinder(h=5, d=45, $fn=50);\n    }\n    \n    // Central hole\n    cylinder(h=35, d=15, $fn=50);\n    \n    // Keyway slot\n    translate([7.5,0,0])\n    cube([15,3,35], center=true);\n}\n\n// Grease grooves\ndifference() {\n    for(z=[8,16]) {\n        translate([0,0,z])\n        difference() {\n            cylinder(h=1.5, d=28, $fn=50);\n            cylinder(h=1.5, d=20, $fn=50);\n        }\n    }\n}",
    "renders": false
  },
  {
    "shape_combination": "bushing_large",
    "openscad_code": "// bushing_large\n// Medium complexity bushing combining multiple boolean operations\n// Outer cylinder with inner hole and mounting flange\n\ndifference() {\n    union() {\n        // Main bushing body\n        cylinder(h=30, d=60, $fn=100);\n        \n        // Top mounting flange\n        translate([0, 0, 30])\n        cylinder(h=8, d=80, $fn=100);\n        \n        // Bottom mounting flange\n        translate([0, 0, -8])\n        cylinder(h=8, d=80, $fn=100);\n    }\n    \n    // Central hole\n    cylinder(h=48, d=25, $fn=100);\n    \n    // Mounting holes (4x)\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([30, 0, 0])\n        cylinder(h=16, d=6, $fn=32);\n    }\n}",
    "renders": false
  },
  {
    "shape_combination": "bushing_thick_wall",
    "openscad_code": "// Bushing with thick wall: difference() between outer cylinder and inner cylinder\ndifference() {\n    // Main thick cylinder\n    cylinder(h = 40, d = 80, $fn = 64);\n    \n    // Central hole\n    cylinder(h = 40, d = 40, $fn = 64);\n    \n    // Flange cutouts\n    translate([0, 0, -0.1])\n        cylinder(h = 20.2, d = 60, $fn = 64);\n    \n    // Mounting holes\n    for (a = [0:120:359]) {\n        rotate([0, 0, a])\n            translate([30, 0, -0.1])\n                cylinder(h = 20.2, d = 6, $fn = 16);\n    }\n}",
    "renders": false
  },
  {
    "shape_combination": "bushing_thin_wall",
    "openscad_code": "// bushing_thin_wall\n\nouter_od = 30;\ninner_od = 26;\nheight = 40;\nrim_h = 3;\nrim_od = 36;\n\ndifference() {\n    // main hollow cylinder\n    difference() {\n        cylinder(h = height, d = outer_od, center = true);\n        cylinder(h = height + 2, d = inner_od, center = true);\n    }\n    \n    // top rim hole\n    cylinder(h = height + 2, d = inner_od, center = true);\n    \n    // bottom chamfer cut\n    translate([0, 0, height/2 - rim_h])\n        cylinder(h = rim_h + 1, d1 = inner_od, d2 = outer_od, center = false);\n}\n\n// top rim\ntranslate([0, 0, height/2 - rim_h/2])\n    difference() {\n        cylinder(h = rim_h, d = rim_od, center = true);\n        cylinder(h = rim_h + 2, d = outer_od, center = true);\n    }",
    "renders": false
  },
  {
    "shape_combination": "bushing_tall",
    "openscad_code": "// bushing_tall: tall flanged bushing with inner bore\n// Medium complexity: multiple difference() operations to create flanged sleeve with chamfers\n\ndifference() {\n    // Main flanged sleeve\n    union() {\n        // Tall sleeve body\n        cylinder(h = 70, r = 20, $fn = 64);\n        \n        // Top flange\n        translate([0, 0, 65])\n            cylinder(h = 10, r = 30, $fn = 64);\n            \n        // Bottom flange\n        cylinder(h = 10, r = 30, $fn = 64);\n    }\n    \n    // Central bore\n    cylinder(h = 80, r = 10, $fn = 64);\n    \n    // Top chamfer\n    translate([0, 0, 70])\n        cylinder(h = 5, r1 = 30, r2 = 20, $fn = 64);\n        \n    // Bottom chamfer\n    rotate([180, 0, 0])\n        translate([0, 0, -5])\n            cylinder(h = 5, r1 = 30, r2 = 20, $fn = 64);\n}",
    "renders": false
  },
  {
    "shape_combination": "bushing_short",
    "openscad_code": "// bushing_short: difference() of outer cylinder and inner hole, plus chamfers\nouter_d = 30;\ninner_d = 12;\nh = 20;\ncham = 2;\n\ndifference() {\n    union() {\n        // main body\n        cylinder(d = outer_d, h = h, $fn = 60);\n        \n        // top chamfer\n        translate([0, 0, h])\n        cylinder(d1 = outer_d, d2 = outer_d - cham*2, h = cham, $fn = 60);\n        \n        // bottom chamfer\n        translate([0, 0, -cham])\n        cylinder(d1 = outer_d - cham*2, d2 = outer_d, h = cham, $fn = 60);\n    }\n    \n    // central hole\n    translate([0, 0, -cham-1])\n    cylinder(d = inner_d, h = h + cham*2 + 2, $fn = 60);\n}",
    "renders": false
  },
  {
    "shape_combination": "mounting_block",
    "openscad_code": "// mounting_block with two countersink holes and a center slot\ndifference() {\n    union() {\n        // main block 80x60x20 mm\n        cube([80, 60, 20], center = true);\n        \n        // center rib 70x10x5 mm on top\n        translate([0, 0, 10 + 2.5])\n            cube([70, 10, 5], center = true);\n    }\n    \n    // countersink hole 1\n    translate([-25, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 25, d1 = 9, d2 = 5, $fn = 32, center = true);\n    \n    // countersink hole 2\n    translate([25, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 25, d1 = 9, d2 = 5, $fn = 32, center = true);\n    \n    // center slot 10x8x25 mm\n    translate([0, 0, 0])\n        cube([10, 8, 25], center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "mounting_block_with_holes",
    "openscad_code": "// mounting_block_with_holes.scad\n\ndifference() {\n    // main block\n    cube([80, 40, 30], center = true);\n\n    // large center hole\n    translate([0, 0, 0])\n        cylinder(h = 35, d = 12, center = true, $fn = 32);\n\n    // front mounting holes\n    translate([-30, 0, 0])\n        cylinder(h = 35, d = 6, center = true, $fn = 32);\n    translate([30, 0, 0])\n        cylinder(h = 35, d = 6, center = true, $fn = 32);\n\n    // side chamfers\n    translate([0, -25, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 80, d = 10, center = true, $fn = 32);\n    translate([0, 25, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 80, d = 10, center = true, $fn = 32);\n}",
    "renders": false
  },
  {
    "shape_combination": "mounting_block_tapped",
    "openscad_code": "// mounting_block_tapped.scad\n// Medium-complexity tapped block for M5 screws\n\n$fn = 30;\n\n// Main block\ndifference() {\n    union() {\n        // Base plate\n        cube([60, 30, 12], center = true);\n        \n        // Raised boss\n        translate([0, 0, 6])\n            cylinder(h = 8, r = 10, center = true);\n    }\n    \n    // Clearance holes\n    for (x = [-20, 20])\n        translate([x, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 50, r = 3.5, center = true);\n    \n    // Tapped hole through boss\n    translate([0, 0, 10])\n        cylinder(h = 20, r = 2.5, center = true);\n    \n    // Counter-bore on bottom\n    translate([0, 0, -7])\n        cylinder(h = 4, r1 = 6, r2 = 3.5, center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "mounting_block_with_slot",
    "openscad_code": "// Mounting block with slot - medium complexity\n$fn = 50;\n\ndifference() {\n    // Main block\n    cube([80, 40, 20], center = true);\n    \n    // Center slot\n    cube([60, 6, 25], center = true);\n    \n    // Mounting holes\n    for (x = [-30, 30]) {\n        for (y = [-15, 15]) {\n            translate([x, y, 0])\n                cylinder(h = 25, r = 3, center = true);\n        }\n    }\n}",
    "renders": false
  },
  {
    "shape_combination": "mounting_plate",
    "openscad_code": "difference() {\n    // Main plate with rounded corners\n    minkowski() {\n        cube([80, 60, 4], center = true);\n        cylinder(r = 5, h = 1, $fn = 20);\n    }\n    \n    // Large center hole\n    cylinder(h = 10, r = 15, center = true, $fn = 32);\n    \n    // Four corner mounting holes\n    for (x = [-30, 30], y = [-20, 20]) {\n        translate([x, y, 0])\n            cylinder(h = 10, r = 3.5, center = true, $fn = 16);\n    }\n    \n    // Two side slots\n    translate([-40, 0, 0])\n        cube([15, 30, 10], center = true);\n    translate([40, 0, 0])\n        cube([15, 30, 10], center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "mounting_plate_thick",
    "openscad_code": "// mounting_plate_thick.scad\n// Medium-complexity mounting plate with thick body and cut-outs\n\ndifference() {\n    union() {\n        // Main thick base plate\n        cube([100, 80, 12], center=true);\n        \n        // Raised boss for extra thickness at mount points\n        translate([30, 25, 6])\n            cylinder(h=8, d=20, $fn=32);\n        translate([-30, 25, 6])\n            cylinder(h=8, d=20, $fn=32);\n        translate([30, -25, 6])\n            cylinder(h=8, d=20, $fn=32);\n        translate([-30, -25, 6])\n            cylinder(h=8, d=20, $fn=32);\n    }\n    \n    // Mounting holes through entire thickness\n    translate([30, 25, 0])\n        cylinder(h=20, d=6, $fn=32);\n    translate([-30, 25, 0])\n        cylinder(h=20, d=6, $fn=32);\n    translate([30, -25, 0])\n        cylinder(h=20, d=6, $fn=32);\n    translate([-30, -25, 0])\n        cylinder(h=20, d=6, $fn=32);\n    \n    // Central wire clearance slot\n    translate([0, 0, -2])\n        cube([60, 15, 10], center=true);\n}",
    "renders": false
  },
  {
    "shape_combination": "mounting_plate_thin",
    "openscad_code": "// mounting_plate_thin.scad\n// Thin plate with mounting holes and center cutout\n\nplate_w = 100;\nplate_h = 60;\nplate_t = 3;\n\nhole_d = 4;\nhole_margin = 8;\n\ncenter_cut_w = 30;\ncenter_cut_h = 20;\n\ndifference() {\n    // Main thin plate\n    cube([plate_w, plate_h, plate_t], center=true);\n    \n    // Corner mounting holes\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x*(plate_w/2-hole_margin), y*(plate_h/2-hole_margin), 0])\n                cylinder(d=hole_d, h=plate_t+2, center=true);\n    \n    // Center rectangular cutout\n    translate([0, 0, 0])\n        cube([center_cut_w, center_cut_h, plate_t+2], center=true);\n}",
    "renders": false
  },
  {
    "shape_combination": "mounting_plate_with_holes",
    "openscad_code": "// mounting_plate_with_holes – difference + union combo\nplate_w = 100;\nplate_h = 80;\nplate_t = 6;\ncorner_r = 8;\nhole_d = 6;\nedge = 10;\n\ndifference() {\n    union() {\n        // main plate\n        linear_extrude(plate_t)\n            offset(r = corner_r)\n                offset(r = -corner_r)\n                    square([plate_w, plate_h], center = true);\n        // side ears\n        translate([plate_w/2, 0, plate_t/2])\n            cube([20, 30, plate_t], center = true);\n        translate([-plate_w/2, 0, plate_t/2])\n            cube([20, 30, plate_t], center = true);\n    }\n\n    // corner holes\n    for (dx = [-1, 1], dy = [-1, 1])\n        translate([dx * (plate_w/2 - edge), dy * (plate_h/2 - edge), -1])\n            cylinder(h = plate_t + 2, d = hole_d, $fn = 20);\n\n    // central hole\n    translate([0, 0, -1])\n        cylinder(h = plate_t + 2, d = 20, $fn = 40);\n}",
    "renders": false
  },
  {
    "shape_combination": "mounting_plate_counter_sunk",
    "openscad_code": "// mounting_plate_counter_sunk.scad\n// Counter-sunk mounting plate with 4 holes\n\nplate_w = 80;\nplate_h = 60;\nplate_t = 6;\nhole_d = 5;\ncs_d = 9;\ncs_ang = 90;\nedge = 5;\n\ndifference() {\n    // main plate with rounded corners\n    difference() {\n        cube([plate_w, plate_h, plate_t], center=true);\n        // chamfer edges\n        translate([0,0,plate_t/2-0.1])\n        minkowski() {\n            cube([plate_w-edge*2, plate_h-edge*2, 0.2], center=true);\n            cylinder(r=edge, h=0.2, $fn=20);\n        }\n    }\n    \n    // counter-sunk holes\n    for(x=[-1,1])\n    for(y=[-1,1])\n    translate([x*25, y*20, 0])\n    rotate([0,180,0])\n    cylinder(d1=cs_d, d2=hole_d, h=plate_t, $fn=32);\n}",
    "renders": false
  },
  {
    "shape_combination": "mounting_plate_with_slots",
    "openscad_code": "// Mounting plate with four slotted holes\n// Created using difference() to cut slots from a rectangular plate\n\nplate_w = 80;\nplate_h = 60;\nplate_t = 4;\n\nslot_w = 6;\nslot_l = 20;\n\ndifference() {\n    // Main plate\n    cube([plate_w, plate_h, plate_t], center = true);\n    \n    // Four slotted mounting holes\n    translate([ plate_w/2 - slot_l/2 - 5,  plate_h/2 - slot_l/2 - 5, 0])\n        cube([slot_l, slot_w, plate_t + 2], center = true);\n    \n    translate([-plate_w/2 + slot_l/2 + 5,  plate_h/2 - slot_l/2 - 5, 0])\n        cube([slot_l, slot_w, plate_t + 2], center = true);\n    \n    translate([ plate_w/2 - slot_l/2 - 5, -plate_h/2 + slot_l/2 + 5, 0])\n        cube([slot_l, slot_w, plate_t + 2], center = true);\n    \n    translate([-plate_w/2 + slot_l/2 + 5, -plate_h/2 + slot_l/2 + 5, 0])\n        cube([slot_l, slot_w, plate_t + 2], center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "mounting_plate_with_cutout",
    "openscad_code": "difference() {\n    // main plate\n    cube([100, 80, 6], center = true);\n    \n    // central cutout\n    translate([0, 0, -1])\n        cylinder(h = 8, d = 40, center = true);\n    \n    // corner clearance holes\n    for (x = [-40, 40])\n        for (y = [-30, 30])\n            translate([x, y, -1])\n                cylinder(h = 8, d = 6, center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "support_bracket",
    "openscad_code": "difference() {\n    // Main L-shaped bracket\n    union() {\n        // Base plate\n        cube([60, 40, 5]);\n        \n        // Vertical support\n        translate([0, 0, 5])\n            cube([5, 40, 50]);\n        \n        // Triangular gusset\n        translate([5, 0, 5])\n            rotate([0, 90, 0])\n                linear_extrude(5)\n                    polygon([[0,0], [45,0], [0,35]]);\n    }\n    \n    // Mounting holes\n    translate([30, 20, -1])\n        cylinder(h=7, d=6);\n    \n    translate([30, 20, 54])\n        cylinder(h=7, d=6);\n    \n    // Lightening holes\n    translate([20, 10, 30])\n        cylinder(h=25, d=10);\n    \n    translate([40, 30, 30])\n        cylinder(h=25, d=10);\n}",
    "renders": false
  },
  {
    "shape_combination": "support_bracket_l_shape",
    "openscad_code": "// L-shaped bracket with mounting holes\ndifference() {\n    // Main L-shape body\n    union() {\n        // Vertical leg\n        translate([0, 0, 0])\n            cube([10, 60, 80]);\n        \n        // Horizontal leg\n        translate([0, 0, 0])\n            cube([60, 10, 80]);\n        \n        // Corner gusset\n        translate([10, 10, 0])\n            cube([50, 50, 20]);\n    }\n    \n    // Mounting holes - vertical leg\n    translate([5, 30, 70])\n        cylinder(h=12, r=3.5, $fn=20);\n    translate([5, 30, 10])\n        cylinder(h=12, r=3.5, $fn=20);\n    \n    // Mounting holes - horizontal leg\n    translate([30, 5, 70])\n        cylinder(h=12, r=3.5, $fn=20);\n    translate([50, 5, 70])\n        cylinder(h=12, r=3.5, $fn=20);\n}",
    "renders": false
  },
  {
    "shape_combination": "support_bracket_t_shape",
    "openscad_code": "// T-shaped bracket made from union and difference operations\n// Overall size ~80 mm\n\ndifference() {\n    union() {\n        // Vertical stem\n        translate([-10, 0, 0])\n            cube([20, 15, 60]);\n\n        // Horizontal top bar\n        translate([-30, 0, 50])\n            cube([60, 15, 10]);\n    }\n\n    // Mounting holes\n    translate([0, -2, 30])\n        rotate([90, 0, 0])\n            cylinder(h = 20, d = 6, $fn = 20);\n\n    translate([0, -2, 55])\n        rotate([90, 0, 0])\n            cylinder(h = 20, d = 6, $fn = 20);\n}",
    "renders": false
  },
  {
    "shape_combination": "support_bracket_angle",
    "openscad_code": "// support bracket angle: union of L-profile base with web, minus screw holes\nmodule support_bracket_angle() {\n    // L-profile base\n    difference() {\n        union() {\n            // horizontal flange\n            translate([0, -10, 0]) cube([60, 20, 5], center=true);\n            // vertical flange\n            translate([-10, 0, 0]) cube([20, 60, 5], center=true);\n            // triangular web\n            rotate([0, 0, 90]) linear_extrude(height=5) polygon([[0,0], [40,0], [0,40]]);\n        }\n        // horizontal screw holes\n        translate([15, 0, -3]) cylinder(h=10, d=4, $fn=16);\n        translate([45, 0, -3]) cylinder(h=10, d=4, $fn=16);\n        // vertical screw holes\n        translate([0, 15, -3]) rotate([90, 0, 0]) cylinder(h=10, d=4, $fn=16);\n        translate([0, 45, -3]) rotate([90, 0, 0]) cylinder(h=10, d=4, $fn=16);\n    }\n}\n\nsupport_bracket_angle();",
    "renders": false
  },
  {
    "shape_combination": "support_bracket_triangular",
    "openscad_code": "// Triangular bracket with mounting holes and lightening cut-outs\ndifference() {\n    union() {\n        // Main triangular plate\n        linear_extrude(height = 8)\n            polygon(points = [[0,0], [80,0], [40,70]]);\n        \n        // Reinforcing rib\n        translate([40, 35, 4])\n            rotate([90,0,0])\n                cube([60, 8, 10], center = true);\n        \n        // Gusset at corner\n        translate([0, 0, 4])\n            rotate([0,0,45])\n                cube([20, 8, 8], center = true);\n    }\n    \n    // Mounting holes\n    translate([10, 10, -1])\n        cylinder(h = 10, d = 6.5);\n    translate([70, 10, -1])\n        cylinder(h = 10, d = 6.5);\n    \n    // Lightening holes\n    translate([40, 25, 4])\n        cylinder(h = 10, d = 20);\n    translate([25, 45, 4])\n        cylinder(h = 10, d = 15);\n}",
    "renders": false
  },
  {
    "shape_combination": "support_bracket_curved",
    "openscad_code": "// Curved support bracket with mounting flanges and lightening cut-outs\ndifference() {\n    union() {\n        // Main curved arm\n        rotate([90,0,0])\n            cylinder(h=100, d1=30, d2=15, $fn=64);\n        \n        // Top mounting flange\n        translate([0,0,100])\n            rotate([0,0,0])\n                cube([50,8,6], center=true);\n        \n        // Bottom mounting flange\n        translate([0,0,-10])\n            rotate([0,0,90])\n                cube([8,40,6], center=true);\n    }\n    \n    // Central lightening hole\n    rotate([90,0,0])\n        cylinder(h=110, d=10, $fn=32);\n    \n    // Top screw hole\n    translate([0,0,103])\n        rotate([0,0,0])\n            cylinder(h=10, d=4, $fn=16);\n    \n    // Bottom screw hole\n    translate([0,0,-13])\n        rotate([0,0,90])\n            cylinder(h=10, d=4, $fn=16);\n}",
    "renders": false
  },
  {
    "shape_combination": "clamp_half",
    "openscad_code": "module clamp_half() {\n    // Main clamp body\n    difference() {\n        union() {\n            // Base plate\n            cube([80, 40, 10], center=true);\n            \n            // Arched clamp section\n            translate([0, 0, 15])\n                cylinder(h=30, r1=25, r2=25, center=true);\n            \n            // Reinforcement ribs\n            translate([0, 20, 0])\n                cube([70, 10, 20], center=true);\n            translate([0, -20, 0])\n                cube([70, 10, 20], center=true);\n        }\n        \n        // Mounting hole\n        translate([0, 0, -5])\n            cylinder(h=20, r=5, center=true);\n        \n        // Cable channel\n        translate([0, 0, 25])\n            rotate([90, 0, 0])\n                cylinder(h=50, r=12, center=true);\n        \n        // Screw hole\n        translate([30, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=40, r=4, center=true);\n    }\n}\n\nclamp_half();",
    "renders": false
  },
  {
    "shape_combination": "clamp_full",
    "openscad_code": "// clamp_full: basic C-clamp body built from difference & union\n\n$fn = 32;\n\nmodule clamp_full() {\n    difference() {\n        // overall C-shaped body\n        union() {\n            // top jaw block\n            translate([0, 0, 40]) cube([50, 20, 15], center = true);\n\n            // vertical spine\n            translate([-17.5, 0, 20]) cube([15, 20, 40], center = true);\n\n            // bottom jaw block\n            translate([0, 0, 0]) cube([50, 20, 15], center = true);\n        }\n\n        // throat clearance\n        translate([0, 0, 20]) cube([30, 22, 30], center = true);\n\n        // screw hole through bottom jaw\n        translate([0, 0, -2.5]) cylinder(h = 20, r = 6, center = true);\n    }\n}\n\nclamp_full();",
    "renders": false
  },
  {
    "shape_combination": "clamp_tightening",
    "openscad_code": "// clamp_tightening.scad\n\nmodule clamp_tightening() {\n    // main body\n    difference() {\n        union() {\n            // lower jaw block\n            translate([0, 0, 5])\n                cube([80, 25, 10], center = true);\n            \n            // upper jaw block\n            translate([0, 25, 0])\n                cube([80, 25, 10], center = true);\n            \n            // connecting arch\n            translate([0, 12.5, 15])\n                rotate([90, 0, 0])\n                    cylinder(h = 25, r = 10, $fn = 20);\n        }\n        \n        // screw hole through lower jaw\n        translate([0, 0, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 30, r = 6, $fn = 20);\n        \n        // screw hole through upper jaw\n        translate([0, 25, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 30, r = 6, $fn = 20);\n        \n        // grip grooves on lower jaw\n        for (i = [-30:10:30])\n            translate([i, 0, 10.1])\n                cube([2, 25, 1], center = true);\n        \n        // grip grooves on upper jaw\n        for (i = [-30:10:30])\n            translate([i, 25, 5.1])\n                cube([2, 25, 1], center = true);\n    }\n}\n\nclamp_tightening();",
    "renders": false
  },
  {
    "shape_combination": "hub_round",
    "openscad_code": "// hub_round.scad\n// Medium complexity hub using difference and union operations\n$fn = 60;\n\n// Main hub body\ndifference() {\n    union() {\n        // Central hub cylinder\n        cylinder(h = 20, r = 30);\n        \n        // Flange at bottom\n        cylinder(h = 8, r = 40);\n    }\n    \n    // Center hole\n    cylinder(h = 30, r = 12);\n    \n    // Keyway slot\n    translate([0, 0, 10])\n        cube([5, 12, 20], center = true);\n    \n    // Bolt holes on flange (6x)\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([32, 0, 4])\n                cylinder(h = 10, r = 4);\n    }\n    \n    // Lightening holes in hub\n    translate([0, 0, 5])\n        cylinder(h = 15, r = 20);\n}",
    "renders": false
  },
  {
    "shape_combination": "hub_square",
    "openscad_code": "square_hub_with_key_and_clearance = 100;        // overall square size\nhub_thickness = 20;\nshaft_diameter = 20;\nkey_width = 6;\nkey_depth = 3;\nclearance = 1;\n\ndifference() {\n    // main square hub\n    cube([square_hub_with_key_and_clearance,\n          square_hub_with_key_and_clearance,\n          hub_thickness], center = true);\n\n    // central shaft hole\n    cylinder(d = shaft_diameter + 2 * clearance,\n             h = hub_thickness + 2,\n             center = true, $fn = 32);\n\n    // keyway slot\n    translate([0,\n               (shaft_diameter + key_width) / 4,\n               0])\n        cube([shaft_diameter + 2 * clearance,\n              key_width + 2 * clearance,\n              hub_thickness + 2], center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "hub_with_spokes",
    "openscad_code": "// hub_with_spokes.scad\n\nhub_d = 40;\nspoke_len = 50;\nspoke_w = 8;\nrim_th = 6;\n\nmodule hub() {\n    difference() {\n        cylinder(h=20, d=hub_d, center=true);\n        cylinder(h=22, d=hub_d-10, center=true);\n    }\n}\n\nmodule spoke(a) {\n    rotate([0, 0, a])\n        translate([hub_d/2 + spoke_len/2, 0, 0])\n            cube([spoke_len, spoke_w, 8], center=true);\n}\n\nmodule rim() {\n    difference() {\n        cylinder(h=10, d=hub_d + 2*spoke_len + 2*rim_th, center=true);\n        cylinder(h=12, d=hub_d + 2*spoke_len, center=true);\n    }\n}\n\nunion() {\n    hub();\n    for(i=[0:60:359]) spoke(i);\n    rim();\n}",
    "renders": false
  },
  {
    "shape_combination": "hub_with_hubcap",
    "openscad_code": "// hub_with_hubcap.scad\n// Medium complexity hub with integrated hubcap\n\ndifference() {\n    // Main hub body\n    union() {\n        // Central hub cylinder\n        cylinder(h = 25, d = 40, $fn = 64);\n        \n        // Hubcap disk\n        translate([0, 0, 25])\n            cylinder(h = 5, d = 50, $fn = 64);\n            \n        // Small rim lip\n        translate([0, 0, -5])\n            cylinder(h = 5, d = 45, $fn = 64);\n    }\n    \n    // Central axle hole\n    cylinder(h = 40, d = 12, $fn = 64);\n    \n    // Hubcap bolt holes (5 evenly spaced)\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([17.5, 0, 25])\n                cylinder(h = 7, d = 5, $fn = 16);\n    }\n    \n    // Weight reduction cutouts on hubcap\n    translate([0, 0, 27.5])\n        cylinder(h = 5, d = 35, $fn = 64);\n}",
    "renders": false
  },
  {
    "shape_combination": "cap_round",
    "openscad_code": "// cap_round.scad\n// Medium-complexity rounded cap: union of sphere+cylinder, minus inner hollow cylinder\n\n$fn = 48;\n\ndifference() {\n    union() {\n        // main dome\n        sphere(d = 60, center = true);\n\n        // cylindrical base ring\n        cylinder(h = 20, d = 60, center = true);\n    }\n\n    // hollow cavity\n    cylinder(h = 60, d = 40, center = true);\n\n    // small vent hole on top\n    translate([0, 0, 30])\n        cylinder(h = 5, d = 6, center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "cap_cone",
    "openscad_code": "$fn = 32;\n\ndifference() {\n    union() {\n        cylinder(h = 60, r1 = 30, r2 = 0);\n        cylinder(h = 10, r = 30);\n    }\n    cylinder(h = 70, r1 = 26, r2 = 0);\n    translate([0, 0, 10])\n        cylinder(h = 50, r = 7);\n}",
    "renders": false
  },
  {
    "shape_combination": "cap_dome",
    "openscad_code": "// Cap dome with rounded top and inner cavity\n$fn = 32;\n\ndifference() {\n    // Main domed cap\n    union() {\n        cylinder(h = 15, d = 60, center = true);\n        translate([0, 0, 7.5])\n            sphere(d = 60);\n    }\n    \n    // Inner cavity\n    translate([0, 0, 5])\n        sphere(d = 50);\n    \n    // Bottom opening\n    translate([0, 0, -15])\n        cylinder(h = 30, d = 40, center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "cap_flat",
    "openscad_code": "// flat cap with recessed logo cavity and alignment pegs\ndifference() {\n    union() {\n        // main disc\n        cylinder(h=5, d=80, $fn=64);\n        \n        // rim lip\n        translate([0, 0, 5])\n            cylinder(h=3, d1=80, d2=82, $fn=64);\n        \n        // center peg\n        cylinder(h=8, d=10, $fn=32);\n        \n        // two alignment pegs\n        translate([30, 0, 0])\n            cylinder(h=8, d=6, $fn=16);\n        translate([-30, 0, 0])\n            cylinder(h=8, d=6, $fn=16);\n    }\n    \n    // recessed logo cavity\n    translate([0, 0, 2])\n        cylinder(h=3, d=40, $fn=64);\n    \n    // peg holes\n    translate([0, 0, 5])\n        cylinder(h=8, d=4, $fn=32);\n    translate([30, 0, 5])\n        cylinder(h=8, d=3, $fn=16);\n    translate([-30, 0, 5])\n        cylinder(h=8, d=3, $fn=16);\n}",
    "renders": false
  },
  {
    "shape_combination": "plug_round",
    "openscad_code": "// plug_round - a round plug with a cable hole and keying ridge\n// overall ~40 mm diameter, ~50 mm long\n\n$fn = 36;\n\nunion() {\n    // main body cylinder\n    cylinder(d = 40, h = 50);\n\n    // keying ridge\n    translate([0, 20, 25])\n        cube([8, 4, 10], center = true);\n\n    difference() {\n        // plug face with rounded lip\n        translate([0, 0, 50])\n            cylinder(d1 = 40, d2 = 36, h = 5);\n\n        // cable entry hole\n        translate([0, 0, -1])\n            cylinder(d = 12, h = 52);\n    }\n}",
    "renders": false
  },
  {
    "shape_combination": "plug_square",
    "openscad_code": "// plug_square – a square plug with rounded edges and a center hole\nsize = 40;\nthick = 20;\nedge = 6;\ndia = 12;\n\n// main body\ndifference() {\n    // rounded square plug\n    union() {\n        // central block\n        cube([size, size, thick], center = true);\n\n        // four rounded edges\n        translate([ size/2 - edge,  size/2 - edge, 0])\n            cylinder(r = edge, h = thick, center = true);\n        translate([ size/2 - edge, -size/2 + edge, 0])\n            cylinder(r = edge, h = thick, center = true);\n        translate([-size/2 + edge,  size/2 - edge, 0])\n            cylinder(r = edge, h = thick, center = true);\n        translate([-size/2 + edge, -size/2 + edge, 0])\n            cylinder(r = edge, h = thick, center = true);\n    }\n\n    // central hole\n    cylinder(d = dia, h = thick + 2, center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "plug_hexagonal",
    "openscad_code": "// plug_hexagonal.scad\n// Medium-complexity hexagonal plug with chamfer and keyway\n\nhex_d = 30;      // hex across flats\nlen = 50;        // overall length\npin_d = 8;       // center pin diameter\nchamfer = 3;     // chamfer depth\nkey_w = 6;       // keyway width\nkey_h = 4;       // keyway depth\n\nmodule hex_body() {\n    cylinder(h = len, r = hex_d / cos(30) / 2, $fn = 6);\n}\n\nmodule chamfered_end() {\n    difference() {\n        cylinder(h = chamfer, r = hex_d / cos(30) / 2, $fn = 6);\n        cylinder(h = chamfer + 0.1, r1 = hex_d / cos(30) / 2 - chamfer,\n                 r2 = 0, $fn = 6);\n    }\n}\n\nmodule center_pin() {\n    cylinder(h = len, r = pin_d / 2, $fn = 24);\n}\n\nmodule keyway() {\n    translate([0, 0, -0.1])\n        cube([key_w, key_h, len + 0.2], center = true);\n}\n\ndifference() {\n    union() {\n        difference() {\n            hex_body();\n            translate([0, 0, len - chamfer])\n                chamfered_end();\n        }\n        center_pin();\n    }\n    translate([hex_d / 2 - key_h / 2, 0, 0])\n        keyway();\n}",
    "renders": false
  },
  {
    "shape_combination": "plug_tapered",
    "openscad_code": "// Tapered plug formed by subtracting a tapered hole from a tapered cylinder\ndifference() {\n    // Main tapered plug body\n    cylinder(\n        h = 50,\n        r1 = 30,\n        r2 = 20,\n        $fn = 48\n    );\n    \n    // Tapered hole down the center\n    translate([0, 0, -1])\n        cylinder(\n            h = 52,\n            r1 = 15,\n            r2 = 10,\n            $fn = 48\n        );\n}",
    "renders": false
  },
  {
    "shape_combination": "plug_with_slot",
    "openscad_code": "// Plug with slot - difference between main plug and slot\ndifference() {\n    // Main plug body\n    union() {\n        // Cylindrical plug\n        cylinder(h=30, d=20, center=true);\n        \n        // Flanged top\n        translate([0,0,15])\n            cylinder(h=5, d=30, center=true);\n    }\n    \n    // Slot cut through the plug\n    translate([0,0,0])\n        rotate([0,90,0])\n            cube([40,3,25], center=true);\n}",
    "renders": false
  },
  {
    "shape_combination": "plug_with_holes",
    "openscad_code": "// plug_with_holes.scad\n// A plug shape with multiple holes through it\n\ndifference() {\n    // Main plug body\n    union() {\n        cylinder(h = 40, r1 = 25, r2 = 25, $fn = 60);\n        translate([0, 0, 40])\n            cylinder(h = 15, r1 = 25, r2 = 30, $fn = 60);\n    }\n    \n    // Central hole\n    translate([0, 0, -1])\n        cylinder(h = 42, r = 12, $fn = 40);\n    \n    // Three side holes 120° apart\n    for (a = [0, 120, 240]) {\n        rotate([0, 0, a])\n            translate([18, 0, -1])\n                rotate([90, 0, 0])\n                    cylinder(h = 26, r = 4, $fn = 20);\n    }\n}",
    "renders": false
  },
  {
    "shape_combination": "stopper_round",
    "openscad_code": "// stopper_round: round stopper with grip ring and sealing lip\ndifference(){\n    // main body\n    union(){\n        cylinder(h=25, d=40, $fn=60);               // top grip head\n        translate([0,0,-3]) cylinder(h=26, d=32, $fn=60); // main shaft\n        translate([0,0,-10]) cylinder(h=10, d1=32, d2=28, $fn=60); // taper seal\n    }\n\n    // central hole\n    translate([0,0,-5]) cylinder(h=35, d=8, $fn=30);\n\n    // grip ring groove\n    translate([0,0,18]) cylinder(h=3, d=36, $fn=60);\n}\n\n// side vent slot\ntranslate([0,18,-5]) rotate([0,90,0]) cylinder(h=4, d=3, $fn=20);",
    "renders": false
  },
  {
    "shape_combination": "stopper_conical",
    "openscad_code": "// stopper_conical: conical plug with handle and sealing ridge\n// uses difference to hollow cone and union to add grip\n\ndifference() {\n    // solid conical plug body\n    union() {\n        // main taper\n        cylinder(h1 = 30, r1 = 20, r2 = 10, $fn = 60);\n        // top grip disk\n        translate([0, 0, 30])\n            cylinder(h = 8, r = 14, $fn = 60);\n        // sealing ridge\n        translate([0, 0, 15])\n            cylinder(h = 3, r = 21, $fn = 60);\n    }\n\n    // hollow out center\n    translate([0, 0, -1])\n        cylinder(h = 40, r = 7, $fn = 60);\n\n    // grip finger hole\n    translate([0, 0, 34])\n        rotate([90, 0, 0])\n            cylinder(h = 20, r = 5, $fn = 30);\n}",
    "renders": false
  },
  {
    "shape_combination": "stopper_cylindrical",
    "openscad_code": "$fn = 30;\n\ndifference() {\n    // Main tapered cylinder\n    cylinder(h = 60, r1 = 20, r2 = 15, center = true);\n    \n    // Central through hole\n    cylinder(h = 70, r = 5, center = true);\n    \n    // Top grip ring groove\n    translate([0, 0, 25])\n        cylinder(h = 10, r1 = 18, r2 = 16);\n    \n    // Bottom sealing ring groove\n    translate([0, 0, -25])\n        cylinder(h = 10, r1 = 16, r2 = 14);\n}\n\n// Side grip ridges\nfor(i = [0:3]) {\n    rotate([0, 0, i * 90])\n        translate([17, 0, 0])\n            cube([6, 2, 50], center = true);\n}",
    "renders": false
  },
  {
    "shape_combination": "stopper_flanged",
    "openscad_code": "// stopper_flanged\n// Medium complexity: difference() and union() to create a flanged stopper\n\nflange_d = 40;\ncore_d = 20;\nplug_d = 18;\nplug_h = 30;\nflange_th = 4;\ngrip_d = 12;\ngrip_h = 15;\n\ndifference() {\n    union() {\n        // flange\n        cylinder(h = flange_th, d = flange_d, $fn = 48);\n        // plug\n        translate([0, 0, flange_th])\n            cylinder(h = plug_h, d = plug_d, $fn = 48);\n        // grip knob\n        translate([0, 0, flange_th + plug_h])\n            cylinder(h = grip_h, d = grip_d, $fn = 48);\n    }\n    // central hole through grip and plug\n    translate([0, 0, flange_th])\n        cylinder(h = plug_h + grip_h, d = 6, $fn = 32);\n    // chamfer on plug tip\n    translate([0, 0, flange_th])\n        cylinder(h = 2, d1 = plug_d, d2 = plug_d - 2, $fn = 48);\n}",
    "renders": false
  }
]