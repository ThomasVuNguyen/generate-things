[
  {
    "electronic_device": "computer",
    "openscad_code": "// OpenSCAD Laptop Model - Realistic Style, Medium Complexity\n// Overall size: ~90mm x 60mm x 12mm (closed)\n\n// Base dimensions\nlaptop_x = 90;\nlaptop_y = 60;\nlaptop_z = 6;\nscreen_thickness = 4;\n\n// Colors\n$fn = 50;\ncolor_base = [0.2, 0.2, 0.2];  // Dark gray\ncolor_screen = [0.05, 0.05, 0.05];  // Black\ncolor_keys = [0.1, 0.1, 0.1];  // Dark gray keys\ncolor_trackpad = [0.15, 0.15, 0.15];  // Slightly lighter\ncolor_ports = [0.3, 0.3, 0.3];  // Medium gray\ncolor_logo = [0.5, 0.5, 0.5];  // Light gray\n\n// Main laptop base\nmodule laptop_base() {\n    color(color_base)\n    difference() {\n        // Main body\n        cube([laptop_x, laptop_y, laptop_z], center = true);\n        \n        // Taper edges\n        translate([0, 0, laptop_z/2 - 0.5])\n        cube([laptop_x - 4, laptop_y - 4, 1], center = true);\n    }\n}\n\n// Keyboard keys\nmodule keyboard() {\n    key_width = 6;\n    key_height = 6;\n    key_depth = 0.5;\n    spacing = 1.5;\n    \n    // Keyboard area\n    translate([0, 10, laptop_z/2 + 0.1])\n    color(color_keys)\n    for (row = [0:4]) {\n        for (col = [0:11]) {\n            if (!(row == 4 && col > 6)) {  // Skip space where trackpad is\n                translate([\n                    -laptop_x/2 + 10 + col * (key_width + spacing),\n                    -laptop_y/2 + 15 + row * (key_height + spacing),\n                    0\n                ])\n                cube([key_width, key_height, key_depth], center = true);\n            }\n        }\n    }\n}\n\n// Trackpad\nmodule trackpad() {\n    translate([15, -laptop_y/2 + 10, laptop_z/2 + 0.1])\n    color(color_trackpad)\n    cube([25, 15, 0.5], center = true);\n}\n\n// USB ports\nmodule usb_ports() {\n    port_width = 7;\n    port_height = 3;\n    \n    translate([-laptop_x/2 - 0.1, 15, 0])\n    rotate([0, 90, 0])\n    color(color_ports)\n    for (i = [0:1]) {\n        translate([0, i * 8, 0])\n        cube([port_width, port_height, 2]);\n    }\n}\n\n// HDMI port\nmodule hdmi_port() {\n    translate([-laptop_x/2 - 0.1, -10, 0])\n    rotate([0, 90, 0])\n    color(color_ports)\n    cube([12, 5, 7]);\n}\n\n// Power connector\nmodule power_port() {\n    translate([-laptop_x/2 - 0.1, 0, 0])\n    rotate([0, 90, 0])\n    color(color_ports)\n    cylinder(h = 8, r1 = 3, r2 = 3);\n}\n\n// Screen bezel\nmodule screen_bezel() {\n    color(color_base)\n    difference() {\n        // Outer frame\n        translate([0, 0, laptop_z/2 + screen_thickness/2])\n        cube([laptop_x - 2, laptop_y - 2, screen_thickness], center = true);\n        \n        // Screen cutout\n        translate([0, 0, laptop_z/2 + screen_thickness/2 + 0.1])\n        cube([laptop_x - 10, laptop_y - 10, screen_thickness + 0.2], center = true);\n    }\n}\n\n// LCD panel\nmodule lcd_panel() {\n    color(color_screen)\n    translate([0, 0, laptop_z/2 + screen_thickness/2])\n    cube([laptop_x - 12, laptop_y - 12, 0.5], center = true);\n}\n\n// Hinge\nmodule hinge() {\n    color(color_base)\n    translate([0, laptop_y/2 - 3, 0])\n    cylinder(h = laptop_y - 6, r = 2, center = true);\n}\n\n// Logo\nmodule logo() {\n    color(color_logo)\n    translate([0, 0, laptop_z/2 + screen_thickness - 0.2])\n    cube([8, 12, 0.3], center = true);\n}\n\n// Status LEDs\nmodule status_leds() {\n    color([0, 1, 0])  // Green LED\n    translate([laptop_x/2 - 5, laptop_y/2 - 3, laptop_z/2 + 0.1])\n    cylinder(h = 0.5, r = 1);\n    \n    color([1, 1, 0])  // Yellow LED\n    translate([laptop_x/2 - 5, laptop_y/2 - 6, laptop_z/2 + 0.1])\n    cylinder(h = 0.5, r = 1);\n}\n\n// Assemble laptop\nunion() {\n    // Base\n    laptop_base();\n    \n    // Keyboard and trackpad\n    keyboard();\n    trackpad();\n    \n    // Ports\n    usb_ports();\n    hdmi_port();\n    power_port();\n    \n    // Status LEDs\n    status_leds();\n    \n    // Screen assembly\n    translate([0, 0, laptop_z])\n    rotate([30, 0, 0])  // Screen open at 30 degrees\n    union() {\n        screen_bezel();\n        lcd_panel();\n        logo();\n    }\n    \n    // Hinges\n    translate([laptop_x/2 - 8, 0, 0])\n    hinge();\n    translate([-laptop_x/2 + 8, 0, 0])\n    hinge();\n}",
    "renders": true
  },
  {
    "electronic_device": "laptop",
    "openscad_code": "// OpenSCAD Laptop Model\n// Realistic style, medium complexity\n\n// Overall dimensions (mm)\nlaptop_width = 80;\nlaptop_depth = 50;\nlaptop_closed_height = 8;\nlaptop_open_angle = 30;\n\n// Base thickness\nbase_thickness = 3;\nscreen_thickness = 2;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.2;\n\n// Colors\ncolor_base = [0.2, 0.2, 0.2];\ncolor_screen = [0.05, 0.05, 0.05];\ncolor_keys = [0.3, 0.3, 0.3];\ncolor_trackpad = [0.25, 0.25, 0.25];\ncolor_ports = [0.4, 0.4, 0.4];\n\nmodule laptop_base() {\n    color(color_base)\n    difference() {\n        // Main base\n        cube([laptop_width, laptop_depth, base_thickness], center=true);\n        \n        // Hollow inside for weight reduction\n        translate([0, 0, -0.5])\n        cube([laptop_width - 2*wall_thickness, laptop_depth - 2*wall_thickness, base_thickness], center=true);\n    }\n}\n\nmodule keyboard() {\n    // Keyboard area\n    translate([0, 10, base_thickness/2 + 0.01])\n    color(color_keys)\n    cube([laptop_width - 10, 20, 0.3], center=true);\n    \n    // Individual keys\n    for (x = [-30:6:30]) {\n        for (y = [5:4:15]) {\n            translate([x, y, base_thickness/2 + 0.4])\n            color(color_keys)\n            cube([5, 3, 0.2], center=true);\n        }\n    }\n}\n\nmodule trackpad() {\n    translate([0, -10, base_thickness/2 + 0.01])\n    color(color_trackpad)\n    cube([20, 12, 0.2], center=true);\n}\n\nmodule ports() {\n    // USB ports on left side\n    for (i = [0:1]) {\n        translate([-laptop_width/2 - 0.01, -10 + i*8, 0])\n        rotate([0, 90, 0])\n        color(color_ports)\n        cube([4, 7, 2], center=true);\n    }\n    \n    // Power port on right side\n    translate([laptop_width/2 + 0.01, 0, 0])\n    rotate([0, -90, 0])\n    color(color_ports)\n    cylinder(h=5, r=2.5, center=true);\n}\n\nmodule screen_bezel() {\n    color(color_base)\n    difference() {\n        // Outer frame\n        cube([laptop_width, laptop_depth, screen_thickness], center=true);\n        \n        // Screen cutout\n        translate([0, 0, -0.5])\n        cube([laptop_width - 6, laptop_depth - 6, screen_thickness], center=true);\n    }\n}\n\nmodule screen_display() {\n    translate([0, 0, screen_thickness/2 - 0.1])\n    color(color_screen)\n    cube([laptop_width - 8, laptop_depth - 8, 0.2], center=true);\n}\n\nmodule webcam() {\n    translate([0, laptop_depth/2 - 3, screen_thickness/2 - 0.1])\n    color([0.1, 0.1, 0.1])\n    cylinder(h=0.5, r=1.5, center=true);\n}\n\nmodule ventilation_grills() {\n    // Bottom ventilation\n    for (x = [-20:5:20]) {\n        translate([x, 0, -base_thickness/2 - 0.01])\n        cube([3, laptop_depth - 10, 0.5], center=true);\n    }\n}\n\nmodule hinges() {\n    // Left hinge\n    translate([-laptop_width/2 + 5, laptop_depth/2, 0])\n    rotate([90, 0, 0])\n    cylinder(h=3, r=1.5, center=true);\n    \n    // Right hinge\n    translate([laptop_width/2 - 5, laptop_depth/2, 0])\n    rotate([90, 0, 0])\n    cylinder(h=3, r=1.5, center=true);\n}\n\nmodule laptop_screen() {\n    translate([0, laptop_depth/2, base_thickness/2])\n    rotate([laptop_open_angle, 0, 0])\n    translate([0, laptop_depth/2, screen_thickness/2])\n    union() {\n        screen_bezel();\n        screen_display();\n        webcam();\n    }\n}\n\nmodule status_leds() {\n    // Power LED\n    translate([-laptop_width/2 + 5, -laptop_depth/2 + 2, base_thickness/2 + 0.01])\n    color([0, 1, 0])\n    sphere(r=0.5);\n    \n    // Battery LED\n    translate([-laptop_width/2 + 10, -laptop_depth/2 + 2, base_thickness/2 + 0.01])\n    color([0, 0.5, 1])\n    sphere(r=0.5);\n}\n\n// Main assembly\nunion() {\n    laptop_base();\n    keyboard();\n    trackpad();\n    ports();\n    ventilation_grills();\n    hinges();\n    laptop_screen();\n    status_leds();\n}",
    "renders": true
  },
  {
    "electronic_device": "tablet",
    "openscad_code": "// Realistic Tablet Model - OpenSCAD\n// Dimensions in mm for 3D printing\n\n// Tablet dimensions\ntablet_length = 80;\ntablet_width = 120;\ntablet_thickness = 6;\nscreen_border = 4;\ncorner_radius = 5;\n\n// Colors\ncolor_body = \"silver\";\ncolor_screen = \"black\";\ncolor_button = \"darkgray\";\ncolor_cam = \"black\";\ncolor_port = \"darkgray\";\n\n// Main body with rounded corners\nmodule tablet_body() {\n    color(color_body)\n    difference() {\n        // Main rounded body\n        minkowski() {\n            cube([tablet_length - 2*corner_radius, tablet_width - 2*corner_radius, tablet_thickness], center = true);\n            sphere(r = corner_radius);\n        }\n        \n        // Screen cutout\n        translate([0, 0, tablet_thickness/2 - 0.5])\n            cube([tablet_length - 2*screen_border, tablet_width - 2*screen_border, tablet_thickness], center = true);\n    }\n}\n\n// Screen display\nmodule screen() {\n    color(color_screen)\n    translate([0, 0, tablet_thickness/2 - 0.4])\n        cube([tablet_length - 2*screen_border - 1, tablet_width - 2*screen_border - 1, 0.2], center = true);\n}\n\n// Home button\nmodule home_button() {\n    color(color_button)\n    translate([0, -tablet_width/2 + 8, tablet_thickness/2 - 0.5])\n        cylinder(h = 1, r = 4, $fn = 32);\n}\n\n// Volume buttons\nmodule volume_buttons() {\n    color(color_button)\n    // Volume up\n    translate([tablet_length/2 + 0.5, 15, tablet_thickness/4])\n        cube([1, 10, 3], center = true);\n    \n    // Volume down\n    translate([tablet_length/2 + 0.5, 0, tablet_thickness/4])\n        cube([1, 10, 3], center = true);\n}\n\n// Power button\nmodule power_button() {\n    color(color_button)\n    translate([tablet_length/2 + 0.5, tablet_width/2 - 15, tablet_thickness/4])\n        cube([1, 15, 3], center = true);\n}\n\n// Camera\nmodule camera() {\n    color(color_cam)\n    translate([0, tablet_width/2 - 8, tablet_thickness/2 - 0.5])\n        cylinder(h = 0.5, r = 2.5, $fn = 16);\n    \n    // Camera lens detail\n    translate([0, tablet_width/2 - 8, tablet_thickness/2 - 0.2])\n        cylinder(h = 0.2, r = 1.5, $fn = 16);\n}\n\n// Speaker holes\nmodule speakers() {\n    for (i = [-2:1:2]) {\n        color(color_body)\n        translate([i * 6, -tablet_width/2 + 2, tablet_thickness/2 - 0.5])\n            cylinder(h = 1, r = 0.8, $fn = 16);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    color(color_port)\n    translate([0, -tablet_width/2 - 0.1, 0])\n        cube([6, 1, 3], center = true);\n}\n\n// LED indicator\nmodule led_indicator() {\n    color(\"red\")\n    translate([tablet_length/2 - 8, tablet_width/2 - 2, tablet_thickness/2 - 0.5])\n        cylinder(h = 0.5, r = 0.5, $fn = 8);\n}\n\n// Assemble the tablet\nunion() {\n    tablet_body();\n    screen();\n    home_button();\n    volume_buttons();\n    power_button();\n    camera();\n    speakers();\n    usb_port();\n    led_indicator();\n}",
    "renders": true
  },
  {
    "electronic_device": "desktop",
    "openscad_code": "// Realistic Desktop Bluetooth Speaker\n// Approx 85 mm tall, 85 mm wide, 80 mm deep\n\n// Main body parameters\nbody_w = 80;\nbody_d = 75;\nbody_h = 45;\nwall_t = 2.5;\n\n// Grille parameters\ngrille_h = 25;\ngrille_d = 68;\nbar_w = 1.5;\nbar_gap = 3;\n\n// Top control ring\nring_outer = 35;\nring_inner = 24;\nring_h = 8;\n\n// Ports\nusb_w = 8;\nusb_h = 3.5;\nusb_d = 5;\naux_w = 6;\naux_h = 3;\n\n// Feet\nfoot_r = 5;\nfoot_h = 4;\n\n// Colors\nbody_col = [0.1, 0.1, 0.1];\ngrille_col = [0.25, 0.25, 0.25];\naccent_col = [0.8, 0.1, 0.15];\n\nmodule main_body() {\n    difference() {\n        // Outer shell\n        color(body_col)\n        cube([body_w, body_d, body_h], center=true);\n        \n        // Hollow inside\n        translate([0,0,-wall_t/2])\n            cube([body_w-2*wall_t, body_d-2*wall_t, body_h], center=true);\n    }\n}\n\nmodule speaker_grille() {\n    translate([0, (body_d-grille_d)/2 - wall_t, body_h/2 - grille_h/2 - wall_t]) {\n        // Grille frame\n        color(grille_col)\n        difference() {\n            cube([body_w-2*wall_t, grille_d, grille_h], center=true);\n            translate([0,0,1])\n                cube([body_w-2*wall_t-2*wall_t, grille_d-2*wall_t, grille_h], center=true);\n        }\n        \n        // Grille bars\n        for(x = [-((body_w-2*wall_t)/2 - bar_w/2) : bar_gap : ((body_w-2*wall_t)/2 - bar_w/2)]) {\n            color(grille_col)\n            translate([x, 0, 0])\n                cube([bar_w, grille_d, grille_h], center=true);\n        }\n    }\n}\n\nmodule control_ring() {\n    translate([0, 0, body_h/2 + ring_h/2 - wall_t]) {\n        color(accent_col)\n        difference() {\n            cylinder(h=ring_h, r=ring_outer, center=true);\n            cylinder(h=ring_h+1, r=ring_inner, center=true);\n        }\n        \n        // Center button\n        color([0.9,0.9,0.9])\n        translate([0,0,ring_h/2+0.5])\n            cylinder(h=2, r=ring_inner/2, center=true);\n    }\n}\n\nmodule ports() {\n    // USB-C port\n    translate([body_w/2 - usb_w/2 - wall_t, 0, -body_h/2 + usb_h*2]) {\n        color([0,0,0])\n        rotate([0,90,0])\n            cube([usb_w, usb_h, usb_d], center=true);\n    }\n    \n    // 3.5mm aux port\n    translate([body_w/2 - aux_w/2 - wall_t, 15, -body_h/2 + usb_h*2]) {\n        color([0,0,0])\n        rotate([0,90,0])\n            cube([aux_w, aux_h, aux_h*2], center=true);\n    }\n}\n\nmodule indicator_led() {\n    translate([body_w/2 - 5, -body_d/2 + 5, body_h/2 - 3]) {\n        color([0,0.8,0])\n        sphere(r=1.5, center=true);\n    }\n}\n\nmodule rubber_feet() {\n    module foot() {\n        color([0.1,0.1,0.1])\n        cylinder(h=foot_h, r=foot_r, center=true);\n    }\n    \n    positions = [\n        [-body_w/2 + foot_r*1.5, -body_d/2 + foot_r*1.5, -body_h/2 - foot_h/2],\n        [ body_w/2 - foot_r*1.5, -body_d/2 + foot_r*1.5, -body_h/2 - foot_h/2],\n        [-body_w/2 + foot_r*1.5,  body_d/2 - foot_r*1.5, -body_h/2 - foot_h/2],\n        [ body_w/2 - foot_r*1.5,  body_d/2 - foot_r*1.5, -body_h/2 - foot_h/2]\n    ];\n    \n    for(pos = positions) {\n        translate(pos)\n            foot();\n    }\n}\n\n// Logo placeholder\nmodule logo() {\n    translate([0, 0, body_h/2 + ring_h + 1]) {\n        color([0.9,0.9,0.9])\n        linear_extrude(height=0.5)\n            text(\"BTX\", size=6, halign=\"center\", valign=\"center\");\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    speaker_grille();\n    control_ring();\n    ports();\n    indicator_led();\n    rubber_feet();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "server",
    "openscad_code": "// Server 1U rack-mount case (realistic style, medium complexity)\n// 1U height = 44.45 mm, scaled to ~70 mm length for printing\n\n// Color definitions\ncolor_case = \"gray20\";\ncolor_front = \"gray10\";\ncolor_hdd = \"silver\";\ncolor_fan = \"gray30\";\ncolor_led = \"red\";\ncolor_usb = \"blue\";\ncolor_ethernet = \"yellow\";\n\n// Overall dimensions\ncase_w = 70;\ncase_h = 44;\ncase_d = 40;\n\n// Wall thickness\nwall = 2;\n\n// Main case body\nmodule server_case() {\n    difference() {\n        // Outer shell\n        color(color_case)\n            cube([case_w, case_h, case_d], center=false);\n\n        // Hollow interior\n        translate([wall, wall, wall])\n            cube([case_w-2*wall, case_h-2*wall, case_d-wall], center=false);\n    }\n}\n\n// Front bezel with vents and ports\nmodule front_bezel() {\n    difference() {\n        // Front plate\n        color(color_front)\n            translate([0, 0, case_d-2])\n            cube([case_w, case_h, 2]);\n\n        // Power button\n        translate([case_w*0.1, case_h*0.5, case_d-1.5])\n        cylinder(h=2, d=6);\n        \n        // LED holes\n        for(i=[0:2]) {\n            translate([case_w*0.2 + i*8, case_h*0.2, case_d-1])\n            cylinder(h=2, d=3);\n        }\n        \n        // USB ports\n        for(i=[0:1]) {\n            translate([case_w*0.7 + i*10, case_h*0.3, case_d-1])\n            cube([8, 12, 2]);\n        }\n        \n        // Ethernet ports\n        for(i=[0:1]) {\n            translate([case_w*0.7 + i*10, case_h*0.7, case_d-1])\n            cube([12, 8, 2]);\n        }\n        \n        // Ventilation slots\n        for(i=[0:4]) {\n            translate([case_w*0.15, case_h*0.1 + i*8, case_d-1])\n            cube([case_w*0.4, 2, 2]);\n        }\n    }\n}\n\n// Hard drive caddies\nmodule hdd_caddy(pos) {\n    translate([pos, case_h*0.3, case_d*0.7])\n    color(color_hdd)\n    difference() {\n        // Drive body\n        cube([35, 8, 25]);\n        \n        // Handle\n        translate([32, 4, 20])\n        cube([8, 1, 3]);\n        \n        // Screw holes\n        for(x=[5:15:25])\n            for(z=[5:15:15]) {\n                translate([x, 4, z])\n                cylinder(h=10, d=1, center=true);\n            }\n    }\n}\n\n// Cooling fan\nmodule fan() {\n    translate([case_w*0.7, case_h*0.5, case_d*0.3])\n    color(color_fan)\n    difference() {\n        // Fan frame\n        cylinder(h=10, d=30);\n        \n        // Center hub\n        translate([0, 0, -1])\n        cylinder(h=12, d=8);\n        \n        // Blades (7 blades)\n        for(i=[0:6]) {\n            rotate([0, 0, i*51.4])\n            translate([0, 6, 5])\n            cube([20, 2, 10], center=true);\n        }\n        \n        // Mounting holes\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n            translate([10, 0, 5])\n            cylinder(h=10, d=3);\n        }\n    }\n}\n\n// Rear IO shield\nmodule rear_io() {\n    translate([0, 0, 0])\n    difference() {\n        // IO plate\n        color(color_front)\n        cube([case_w, case_h, 2]);\n        \n        // Power connector\n        translate([case_w*0.1, case_h*0.5, 1])\n        cube([15, 15, 2]);\n        \n        // VGA port\n        translate([case_w*0.4, case_h*0.7, 1])\n        cube([12, 10, 2]);\n        \n        // More ethernet ports\n        for(i=[0:3]) {\n            translate([case_w*0.6 + i*8, case_h*0.3, 1])\n            cube([6, 8, 2]);\n        }\n    }\n}\n\n// Status LEDs\nmodule status_leds() {\n    for(i=[0:2]) {\n        translate([case_w*0.2 + i*8, case_h*0.2, case_d-1])\n        color(color_led)\n        cylinder(h=1, d=3);\n    }\n    \n    translate([case_w*0.1, case_h*0.5, case_d-0.5])\n    color(\"green\")\n    cylinder(h=1, d=6);\n}\n\n// Assembly\nserver_case();\nfront_bezel();\nhdd_caddy(case_w*0.2);\nhdd_caddy(case_w*0.6);\nfan();\ntranslate([0, 0, -2])\nrear_io();\nstatus_leds();\n\n// USB port coloring\ntranslate([case_w*0.7, case_h*0.3, case_d-1])\ncolor(color_usb)\ncube([8, 12, 1]);\n\ntranslate([case_w*0.8, case_h*0.3, case_d-1])\ncolor(color_usb)\ncube([8, 12, 1]);\n\n// Ethernet port coloring\nfor(i=[0:3]) {\n    translate([case_w*0.6 + i*8, case_h*0.3, -1])\n    color(color_ethernet)\n    cube([6, 8, 1]);\n}",
    "renders": true
  },
  {
    "electronic_device": "workstation",
    "openscad_code": "// Professional audio workstation - mixer-style interface\n// 3D-printable model with no overhangs\n\n// Main dimensions\nbase_width = 80;\nbase_depth = 60;\nbase_height = 8;\npanel_thickness = 2;\n\n// Screen dimensions\nscreen_width = 40;\nscreen_height = 25;\nscreen_depth = 3;\nscreen_offset = 10;\n\n// Knob dimensions\nknob_radius = 3;\nknob_height = 4;\nknob_rows = 3;\nknob_cols = 4;\n\n// Fader slot dimensions\nfader_width = 30;\nfader_height = 2;\nfader_depth = 3;\n\n// Port dimensions\nport_radius = 2.5;\nport_height = 4;\n\n// Main base\nunion() {\n    // Base enclosure\n    color([0.1, 0.1, 0.1]) \n    difference() {\n        cube([base_width, base_depth, base_height], center=true);\n        translate([0, 0, base_height/2 - panel_thickness])\n            cube([base_width-2, base_depth-2, panel_thickness+1], center=true);\n    }\n    \n    // Top control panel\n    color([0.15, 0.15, 0.15])\n    translate([0, 0, base_height/2 + panel_thickness/2])\n        cube([base_width, base_depth, panel_thickness], center=true);\n    \n    // LCD screen\n    color([0.05, 0.05, 0.05])\n    translate([0, screen_offset, base_height/2 + panel_thickness + screen_depth/2])\n        cube([screen_width, screen_height, screen_depth], center=true);\n    \n    // Screen bezel\n    color([0.2, 0.2, 0.2])\n    translate([0, screen_offset, base_height/2 + panel_thickness + screen_depth/2])\n        cube([screen_width+4, screen_height+4, screen_depth/2], center=true);\n    \n    // Display content (simplified waveform)\n    color([0, 1, 0.2])\n    for(i = [-15:5:15]) {\n        translate([i, screen_offset, base_height/2 + panel_thickness + screen_depth + 0.1])\n            cube([2, abs(sin(i*5)*8) + 2, 0.2], center=true);\n    }\n    \n    // LED indicators above screen\n    module led_indicator(x_pos) {\n        color([0.8, 0, 0])\n        translate([x_pos, screen_offset + screen_height/2 + 5, base_height/2 + panel_thickness + 1])\n            cylinder(r=1.5, h=1, $fn=8);\n    }\n    \n    for(x = [-15, -5, 5, 15]) {\n        led_indicator(x);\n    }\n    \n    // Control knobs grid\n    module control_knob(x, y) {\n        color([0.7, 0.7, 0.7])\n        translate([x, y, base_height/2 + panel_thickness + knob_height/2])\n            cylinder(r=knob_radius, h=knob_height, $fn=16);\n        color([0.3, 0.3, 0.3])\n        translate([x, y, base_height/2 + panel_thickness + knob_height + 0.1])\n            cube([1, knob_radius*1.6, 0.5], center=true);\n    }\n    \n    // Knob grid layout\n    for(row = [0:knob_rows-1]) {\n        for(col = [0:knob_cols-1]) {\n            control_knob(\n                -base_width/3 + col * (base_width/4),\n                -base_depth/3 + row * (base_depth/4)\n            );\n        }\n    }\n    \n    // Fader slot\n    color([0.05, 0.05, 0.05])\n    translate([0, -screen_offset - 5, base_height/2 + panel_thickness + fader_depth/2])\n        cube([fader_width, fader_height, fader_depth], center=true);\n    \n    // Fader cap\n    color([0.8, 0.1, 0.1])\n    translate([0, -screen_offset - 5, base_height/2 + panel_thickness + fader_depth + 2])\n        cube([6, 10, 3], center=true);\n    \n    // Input/output ports on back\n    module audio_port(x, y) {\n        color([0.2, 0.2, 0.2])\n        translate([x, y, -base_height/2 - port_height/2])\n            cylinder(r=port_radius, h=port_height, $fn=12);\n        color([0.05, 0.05, 0.05])\n        translate([x, y, -base_height/2 - port_height - 0.1])\n            cylinder(r=port_radius*0.7, h=0.5, $fn=8);\n    }\n    \n    // Back panel ports\n    for(i = [-3:1:3]) {\n        audio_port(base_width/2 - 8, i * 6);\n    }\n    \n    // USB port\n    color([0.15, 0.15, 0.15])\n    translate([base_width/2 - 8, 0, -base_height/2 - 2])\n        cube([7, 3, 4], center=true);\n    \n    // Brand label\n    color([0.8, 0.8, 0.8])\n    translate([0, base_depth/2 - 2, base_height/2 + panel_thickness + 1])\n        cube([25, 8, 0.5], center=true);\n    \n    // Power LED\n    color([0, 1, 0])\n    translate([base_width/2 - 5, base_depth/2 - 5, base_height/2 + panel_thickness + 1])\n        cylinder(r=2, h=1, $fn=8);\n    \n    // Rubber feet\n    module foot(x, y) {\n        color([0.05, 0.05, 0.05])\n        translate([x, y, -base_height/2 - 1])\n            cylinder(r=3, h=2, $fn=12);\n    }\n    \n    foot(base_width/2 - 5, base_depth/2 - 5);\n    foot(-base_width/2 + 5, base_depth/2 - 5);\n    foot(base_width/2 - 5, -base_depth/2 + 5);\n    foot(-base_width/2 + 5, -base_depth/2 + 5);\n}",
    "renders": true
  },
  {
    "electronic_device": "terminal",
    "openscad_code": "// Terminal Electronic Device - Vintage Computer Terminal\n// Size: ~80mm x ~60mm x ~65mm (realistic, medium complexity)\n\n// Main color scheme\nterm_color = \"darkolivegreen\";\naccent_color = \"saddlebrown\";\nscreen_color = \"black\";\nkey_color = \"gray20\";\nled_color = \"red\";\n\n// Overall dimensions\nwidth = 80;\ndepth = 60;\nheight = 65;\n\n// Main housing\nmodule main_housing() {\n    color(term_color)\n    union() {\n        // Base box\n        translate([-width/2, -depth/2, 0])\n            cube([width, depth, height*0.7]);\n        \n        // Top bezel\n        translate([-width/2, -depth/2, height*0.7])\n            cube([width, depth, height*0.3]);\n    }\n}\n\n// Screen bezel and CRT\nmodule crt_screen() {\n    color(accent_color)\n    difference() {\n        // Outer bezel\n        translate([-width/2+5, -depth/2+5, height*0.75])\n            cube([width-10, depth-10, height*0.2]);\n        \n        // Screen opening\n        translate([-width/2+8, -depth/2+8, height*0.75-0.1])\n            cube([width-16, depth-16, height*0.3]);\n    }\n    \n    // Actual screen\n    color(screen_color)\n    translate([-width/2+8.5, -depth/2+8.5, height*0.75])\n        cube([width-17, depth-17, 0.5]);\n}\n\n// Keyboard module\nmodule keyboard() {\n    color(key_color)\n    translate([-width/2+10, -depth/2-2, height*0.5-2])\n    cube([width-20, 4, 2]);\n}\n\n// Key rows\nmodule keys() {\n    color(key_color)\n    for (row = [0:2]) {\n        for (col = [0:9]) {\n            translate([-width/2+12 + col*6, -depth/2-1, height*0.5-1 + row*1.5])\n                cube([4, 2, 1]);\n        }\n    }\n}\n\n// Control panel with buttons\nmodule control_panel() {\n    color(accent_color)\n    translate([-width/2+5, depth/2-15, height*0.4])\n        cube([width-10, 10, height*0.3]);\n    \n    // Power button\n    color(led_color)\n    translate([-width/2+10, depth/2-10, height*0.4+height*0.3+1])\n        cylinder(h=2, r=2);\n    \n    // Reset button\n    color(\"gray\")\n    translate([-width/2+20, depth/2-10, height*0.4+height*0.3+1])\n        cylinder(h=2, r=2);\n}\n\n// Rear ports\nmodule rear_ports() {\n    color(\"gray30\")\n    translate([width/2-5, -depth/2+10, height*0.3])\n        cube([5, 8, 4]);\n    \n    translate([width/2-5, -depth/2+20, height*0.3])\n        cube([5, 8, 4]);\n    \n    // Ventilation slots\n    for (i = [0:3]) {\n        translate([width/2-3, -depth/2+5 + i*12, height*0.6])\n            cube([2, 8, 1]);\n    }\n}\n\n// Side carrying handle\nmodule handle() {\n    color(term_color)\n    translate([-width/2-2, -depth/2+20, height*0.5])\n    rotate([0, 90, 0])\n        cylinder(h=20, r=2);\n    \n    translate([-width/2-2, depth/2-20, height*0.5])\n    rotate([0, 90, 0])\n        cylinder(h=20, r=2);\n    \n    translate([-width/2-2, 0, height*0.5])\n    rotate([0, 90, 0])\n        cylinder(h=depth-40, r=1.5);\n}\n\n// Power indicator LED\nmodule power_led() {\n    color(led_color)\n    translate([-width/2+30, depth/2-5, height*0.75+height*0.2])\n        sphere(r=1);\n}\n\n// Logo plate\nmodule logo() {\n    color(\"gold\")\n    translate([0, -depth/2-0.1, height*0.85])\n        cube([15, 0.2, 5]);\n}\n\n// Assemble the terminal\nmain_housing();\ncrt_screen();\nkeyboard();\nkeys();\ncontrol_panel();\nrear_ports();\nhandle();\npower_led();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "mainframe",
    "openscad_code": "// Mainframe Computer - Realistic Style, Medium Complexity\n// Dimensions: 100mm x 40mm x 60mm\n\n// Overall dimensions\nwidth = 100;\ndepth = 40;\nheight = 60;\nwall = 2;\n\n// Main chassis\nmodule main_chassis() {\n    difference() {\n        // Main body\n        color(\"silver\") cube([width, depth, height], center=true);\n        \n        // Front panel recess\n        translate([0, depth/2 - 1, 10])\n            color(\"black\") cube([width - 10, 2, height - 20], center=true);\n    }\n}\n\n// Front panel with controls and indicators\nmodule front_panel() {\n    translate([0, depth/2 + 0.5, 0]) {\n        // Panel plate\n        color(\"black\") cube([width - 8, 1, height - 8], center=true);\n        \n        // Power button\n        translate([-width/4, 1, height/4])\n            color(\"red\") cylinder(h=2, r=3, center=true);\n            \n        // Status LEDs\n        for (i = [0:3]) {\n            translate([width/4 - 15 + i*10, 1, height/4 - 10])\n                color(\"green\") sphere(1.5);\n        }\n        \n        // Drive bays\n        for (i = [0:1]) {\n            translate([0, 1, -height/4 + i*15])\n                color(\"darkgray\") cube([width/2, 0.5, 8], center=true);\n        }\n    }\n}\n\n// Rear panel with ports\nmodule rear_panel() {\n    translate([0, -depth/2 - 0.5, 0]) {\n        // Panel plate\n        color(\"black\") cube([width - 8, 1, height - 8], center=true);\n        \n        // Ventilation slots\n        for (i = [0:4]) {\n            translate([0, 1, -height/3 + i*15])\n                color(\"gray\") cube([width - 12, 1, 2], center=true);\n        }\n        \n        // I/O ports\n        for (i = [0:5]) {\n            translate([width/2 - 15 - i*8, 1, -height/4])\n                color(\"gold\") cylinder(h=3, r=1.5, center=true);\n        }\n    }\n}\n\n// Side panels with ventilation\nmodule side_panels() {\n    // Left side\n    translate([-width/2 - 1, 0, 0]) {\n        color(\"lightgray\") cube([2, depth - 4, height - 4], center=true);\n        \n        // Ventilation holes\n        for (row = [0:3]) {\n            for (col = [0:2]) {\n                translate([0, -depth/3 + col*15, -height/3 + row*15])\n                    color(\"black\") cylinder(h=3, r=2, center=true);\n            }\n        }\n    }\n    \n    // Right side (mirrored)\n    translate([width/2 + 1, 0, 0])\n        mirror([1,0,0]) side_panels();\n}\n\n// Top cover with handles\nmodule top_cover() {\n    translate([0, 0, height/2 + 0.5]) {\n        // Main top plate\n        color(\"silver\") cube([width - 4, depth - 4, 2], center=true);\n        \n        // Handles\n        for (x = [-width/3, width/3]) {\n            translate([x, 0, 1]) {\n                color(\"darkgray\") {\n                    // Handle base\n                    cube([8, depth/2, 2], center=true);\n                    \n                    // Handle grip\n                    translate([0, 0, 3])\n                        cube([6, depth/2 - 4, 4], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Base with feet\nmodule base() {\n    translate([0, 0, -height/2 - 2]) {\n        color(\"black\") cube([width + 4, depth + 4, 4], center=true);\n        \n        // Rubber feet\n        for (x = [-width/2 + 10, width/2 - 10]) {\n            for (y = [-depth/2 + 10, depth/2 - 10]) {\n                translate([x, y, -2])\n                    color(\"gray\") cylinder(h=4, r=3, center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_chassis();\n    front_panel();\n    rear_panel();\n    side_panels();\n    top_cover();\n    base();\n}",
    "renders": true
  },
  {
    "electronic_device": "minicomputer",
    "openscad_code": "// Minicomputer model - realistic style, medium complexity\n// Overall dimensions: 70mm x 40mm x 25mm\n\n$fn = 32;\nwall_thickness = 1.5;\n\nmodule body() {\n    difference() {\n        // Main body\n        color([0.2, 0.2, 0.2])\n        cube([70, 40, 25], center=true);\n        \n        // Ventilation slots on sides\n        for (i = [-1:1]) {\n            translate([35, i*10, 0])\n            rotate([0, 90, 0])\n            cylinder(h=30, r=1.5, center=true);\n            \n            translate([-35, i*10, 0])\n            rotate([0, 90, 0])\n            cylinder(h=30, r=1.5, center=true);\n        }\n    }\n}\n\nmodule front_panel() {\n    // Front face with ports and indicators\n    color([0.15, 0.15, 0.15])\n    translate([35.1, 0, 0])\n    cube([0.5, 38, 23], center=true);\n    \n    // USB ports\n    for (i = [0:3]) {\n        color([0.3, 0.3, 0.3])\n        translate([35.2, -12 + i*8, 5])\n        cube([0.5, 5, 3]);\n    }\n    \n    // Ethernet port\n    color([0.3, 0.3, 0.3])\n    translate([35.2, 12, -5])\n    cube([0.5, 8, 2.5]);\n    \n    // Power LED\n    color([0, 1, 0])\n    translate([35.2, 0, 8])\n    sphere(r=1);\n    \n    // Activity LED\n    color([1, 0.5, 0])\n    translate([35.2, -5, 8])\n    sphere(r=1);\n}\n\nmodule top_cover() {\n    // Removable top panel\n    color([0.25, 0.25, 0.25])\n    translate([0, 0, 12.5])\n    cube([68, 38, 1.5], center=true);\n    \n    // Cooling vents\n    for (y = [-15:5:15]) {\n        for (x = [-30:5:30]) {\n            if (x != 0 || y != 0) {\n                translate([x, y, 13.5])\n                cube([3, 2, 0.5]);\n            }\n        }\n    }\n}\n\nmodule heatsink() {\n    // Aluminum heatsink block\n    color([0.7, 0.7, 0.7])\n    translate([0, 0, 0])\n    cube([30, 30, 8], center=true);\n    \n    // Fins\n    for (i = [-12:2:12]) {\n        translate([i, 0, 4])\n        cube([1.5, 28, 8], center=true);\n    }\n}\n\nmodule mounting_holes() {\n    // Screw holes in base\n    for (x = [-30, 30]) {\n        for (y = [-15, 15]) {\n            translate([x, y, -12.5])\n            cylinder(h=25, r=1.5, center=true);\n        }\n    }\n}\n\nmodule logo() {\n    // Simple brand logo on top\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, 13.5])\n    linear_extrude(0.5)\n    text(\"MINI\", size=8, halign=\"center\", valign=\"center\");\n}\n\n// Main assembly\ndifference() {\n    union() {\n        body();\n        front_panel();\n        top_cover();\n        translate([0, 0, 12.5 + 8])\n        heatsink();\n        logo();\n    }\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "electronic_device": "microcomputer",
    "openscad_code": "// Raspberry Pi Zero style microcomputer\n// Overall dimensions: 65mm x 30mm x 5.5mm\n\n// Main board color\ncolor(\"darkgreen\") {\n    // Main PCB\n    translate([-32.5, -15, 0])\n        cube([65, 30, 1.6]);\n}\n\n// Copper traces (simplified)\nfor (x = [-25:5:25]) {\n    for (y = [-10:5:10]) {\n        color(\"copper\") {\n            translate([x, y, 1.7])\n                cube([4, 0.5, 0.1]);\n        }\n    }\n}\n\n// CPU/GPU SoC\ncolor(\"black\") {\n    translate([-20, -8, 1.7])\n        cube([12, 12, 1]);\n}\n\n// USB port\nmodule usb_port() {\n    difference() {\n        color(\"silver\") {\n            translate([0, 0, 0])\n                cube([8, 6, 3]);\n        }\n        color(\"black\") {\n            translate([1, 1, 0.5])\n                cube([6, 4, 2]);\n        }\n    }\n}\n\n// Micro USB power port\ntranslate([30, -10, -2.5])\n    rotate([0, 90, 0])\n    usb_port();\n\n// Micro USB OTG port\ntranslate([30, 10, -2.5])\n    rotate([0, 90, 0])\n    usb_port();\n\n// GPIO header\nmodule gpio_header() {\n    for (pin = [0:19]) {\n        color(\"gold\") {\n            translate([-31 + pin * 2, -13, 1.7])\n                cylinder(h=2.5, d=1, $fn=8);\n        }\n    }\n    for (pin = [0:19]) {\n        color(\"gold\") {\n            translate([-30 + pin * 2, -11, 1.7])\n                cylinder(h=2.5, d=1, $fn=8);\n        }\n    }\n}\n\ngpio_header();\n\n// HDMI mini connector\ncolor(\"silver\") {\n    translate([-30, 12, 1.7])\n        cube([7, 4, 3]);\n}\n\n// Micro SD card slot\ncolor(\"black\") {\n    translate([15, -14, 1.7])\n        cube([15, 2, 1]);\n}\n\n// Activity LEDs\ncolor(\"red\") {\n    translate([22, -6, 1.7])\n        cylinder(h=0.5, d=1, $fn=16);\n}\ncolor(\"green\") {\n    translate([22, -4, 1.7])\n        cylinder(h=0.5, d=1, $fn=16);\n}\n\n// Mounting holes\nmodule mounting_hole() {\n    difference() {\n        color(\"darkgreen\") {\n            cylinder(h=1.6, d=3, $fn=16);\n        }\n        color(\"black\") {\n            cylinder(h=2, d=2.2, $fn=16);\n        }\n    }\n}\n\ntranslate([-26, -10, 0])\n    mounting_hole();\ntranslate([26, -10, 0])\n    mounting_hole();\ntranslate([-26, 10, 0])\n    mounting_hole();\ntranslate([26, 10, 0])\n    mounting_hole();\n\n// Silkscreen logo\ncolor(\"white\") {\n    translate([-15, 0, 1.7])\n        cube([8, 3, 0.1]);\n}\n\n// WiFi antenna area\ncolor(\"lightgreen\") {\n    translate([-25, 8, 1.7])\n        cube([10, 5, 0.1]);\n}\n\n// Crystal oscillator\ncolor(\"silver\") {\n    translate([-10, 8, 1.7])\n        cube([3, 2, 1.2]);\n}\n\n// Decoupling capacitors\nfor (cap = [0:3]) {\n    color(\"brown\") {\n        translate([5 + cap * 3, 8, 1.7])\n            cylinder(h=1.5, d=1, $fn=16);\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "netbook",
    "openscad_code": "// Netbook model - medium complexity, realistic style\n// Dimensions (mm): 80 x 55 x 12 when closed\n\n// Main colors\n$fn = 32;\n\n// Base shell module\nmodule shell_base() {\n    difference() {\n        // Main body\n        color([0.2, 0.2, 0.2])\n        cube([80, 55, 6], center=true);\n        \n        // Inner cavity\n        color([0.15, 0.15, 0.15])\n        cube([78, 53, 4], center=true);\n    }\n}\n\n// Top shell module\nmodule shell_top() {\n    difference() {\n        // Main lid\n        color([0.2, 0.2, 0.2])\n        cube([80, 55, 3], center=true);\n        \n        // Screen recess\n        color([0.1, 0.1, 0.1])\n        translate([0, 0, 0.5])\n        cube([72, 48, 2], center=true);\n    }\n}\n\n// Screen display\nmodule screen() {\n    color([0.05, 0.05, 0.05])\n    translate([0, 0, 2.6])\n    cube([70, 46, 0.5], center=true);\n    \n    // Screen surface\n    color([0.0, 0.0, 0.0])\n    translate([0, 0, 2.9])\n    cube([68, 44, 0.1], center=true);\n}\n\n// Keyboard grid\nmodule keyboard() {\n    // Keyboard area\n    color([0.25, 0.25, 0.25])\n    translate([0, -8, -1.5])\n    cube([65, 25, 0.5], center=true);\n    \n    // Individual keys using loops\n    for (row = [0:5]) {\n        for (col = [0:9]) {\n            if (!(row == 5 && col > 6)) {\n                translate([-28 + col*6.5, -17 + row*5.5, -1])\n                color([0.15, 0.15, 0.15])\n                cube([5.5, 4.5, 1], center=true);\n            }\n        }\n    }\n}\n\n// Touchpad\nmodule touchpad() {\n    color([0.3, 0.3, 0.3])\n    translate([0, 15, -1.5])\n    cube([25, 15, 0.5], center=true);\n    \n    // Touchpad buttons\n    translate([-6, 15, -1])\n    color([0.2, 0.2, 0.2])\n    cube([10, 3, 0.5], center=true);\n    \n    translate([6, 15, -1])\n    color([0.2, 0.2, 0.2])\n    cube([10, 3, 0.5], center=true);\n}\n\n// Ports\nmodule ports() {\n    // USB ports\n    for (i = [0:1]) {\n        translate([30 + i*8, 27.5, 0])\n        color([0.1, 0.1, 0.1])\n        cube([6, 2, 4], center=true);\n    }\n    \n    // Power port\n    translate([-30, 27.5, 0])\n    color([0.1, 0.1, 0.1])\n    cylinder(h=2, r=3, center=true);\n    \n    // Headphone jack\n    translate([-20, 27.5, 0])\n    color([0.1, 0.1, 0.1])\n    cylinder(h=2, r=2, center=true);\n}\n\n// Hinges\nmodule hinges() {\n    for (side = [-1:2:1]) {\n        translate([side*35, 27.5, -2.5])\n        color([0.3, 0.3, 0.3])\n        cylinder(h=10, r=2, center=true);\n        \n        translate([side*35, 27.5, 4])\n        color([0.3, 0.3, 0.3])\n        cylinder(h=6, r=2, center=true);\n    }\n}\n\n// Status LEDs\nmodule status_leds() {\n    // Power LED\n    translate([35, -20, 3])\n    color([0, 1, 0])\n    cylinder(h=1, r=1, center=true);\n    \n    // Battery LED\n    translate([35, -15, 3])\n    color([0.8, 0.8, 0])\n    cylinder(h=1, r=1, center=true);\n}\n\n// Camera\nmodule camera() {\n    translate([0, -25, 2.8])\n    color([0.05, 0.05, 0.05])\n    cylinder(h=1, r=3, center=true);\n    \n    translate([0, -25, 3.3])\n    color([0.1, 0.1, 0.1])\n    cylinder(h=0.5, r=1.5, center=true);\n}\n\n// Logo\nmodule logo() {\n    translate([0, -25, 3])\n    color([0.7, 0.7, 0.7])\n    cube([8, 3, 0.2], center=true);\n}\n\n// Main assembly\n// Base assembly\ntranslate([0, 0, -3])\nshell_base();\n\n// Ports on back\nports();\n\n// Keyboard and touchpad\nkeyboard();\ntouchpad();\n\n// Hinges\nhinges();\n\n// Top assembly (lid)\ntranslate([0, 0, 6])\nrotate([60, 0, 0])\nunion() {\n    shell_top();\n    screen();\n    camera();\n    logo();\n}\n\n// Status indicators\nstatus_leds();",
    "renders": true
  },
  {
    "electronic_device": "ultrabook",
    "openscad_code": "// Ultrabook 3D printable model – medium complexity\n// Overall footprint 90 x 60 x 7 mm\n\nuse <colors.scad>        // fallback: color() calls still work\n\n// Main parameters\nbase_w = 90;\nbase_d = 60;\nbase_h = 3.5;\nscreen_h = 3.5;\nwall_t   = 1.2;          // printable wall thickness\n\n// Colors\ncolor_base   = [0.2,0.2,0.2];\ncolor_keys   = [0.1,0.1,0.1];\ncolor_aluminum = [0.4,0.4,0.45];\ncolor_lcd    = [0.05,0.05,0.05];\n\n// **** Base shell ****\nmodule base_shell(){\n    difference(){\n        // outer form\n        hull(){\n            translate([-base_w/2,-base_d/2,0])\n                cube([base_w,base_d,base_h], center=false);\n            translate([-base_w/2+2,-base_d/2+2,-0.5])\n                cube([base_w-4,base_d-4,base_h+0.5], center=false);\n        }\n        // hollow inside\n        translate([-base_w/2+wall_t,-base_d/2+wall_t,wall_t])\n            cube([base_w-2*wall_t,base_d-2*wall_t,base_h], center=false);\n    }\n}\n\n// **** Keyboard island ****\nmodule keyboard(){\n    translate([0,-5,base_h]){\n        color(color_keys)\n        for(y=[-20:10:20])\n            for(x=[-35:7:35]){\n                translate([x,y,0])\n                    cube([6,4,0.6], center=true);\n            }\n    }\n}\n\n// **** Touchpad ****\nmodule touchpad(){\n    translate([0,-22,base_h]){\n        color([0.15,0.15,0.15])\n            cube([30,20,0.3], center=true);\n    }\n}\n\n// **** Screen lid ****\nmodule screen_lid(){\n    translate([0,0,base_h]){\n        rotate([60,0,0]){      // open position\n            difference(){\n                // lid shell\n                color(color_aluminum)\n                hull(){\n                    translate([-base_w/2,-base_d/2-2,0])\n                        cube([base_w,base_d+4,screen_h], center=false);\n                    translate([-base_w/2+2,-base_d/2,0])\n                        cube([base_w-4,base_d,screen_h+0.5], center=false);\n                }\n                // screen cutout\n                translate([-base_w/2+5,-base_d/2+3,-0.1])\n                    cube([base_w-10,base_d-6,screen_h+0.2], center=false);\n            }\n            // LCD surface\n            color(color_lcd)\n            translate([-base_w/2+5.5,-base_d/2+3.5,0.1])\n                cube([base_w-11,base_d-7,0.1], center=false);\n        }\n    }\n}\n\n// **** Ports ****\nmodule ports(){\n    // left side USB-C\n    translate([-base_w/2-0.1, -10, base_h/2])\n        rotate([0,90,0])\n            cylinder(h=5, d=3, $fn=16);\n    // right side USB-A\n    translate([base_w/2+0.1, -5, base_h/2-1])\n        rotate([0,90,0])\n            cube([7,4,2], center=true);\n    // 3.5 mm audio\n    translate([-base_w/2-0.1, 10, base_h/2])\n        rotate([0,90,0])\n            cylinder(h=5, d=3.5, $fn=32);\n}\n\n// **** LED indicator ****\nmodule power_led(){\n    translate([base_w/2-5, base_d/2-5, base_h-0.3])\n        color([0,1,0])\n        cylinder(h=0.5, d=1.5, $fn=16);\n}\n\n// **** Logo ****\nmodule logo(){\n    translate([0, base_d/2-2, screen_h+0.1])\n        rotate([60,0,0])\n            color([0.25,0.25,0.3])\n            linear_extrude(height=0.2)\n                text(\"Ultra\", size=4, halign=\"center\", valign=\"center\");\n}\n\n// **** Assembly ****\ncolor(color_base) base_shell();\nkeyboard();\ntouchpad();\nscreen_lid();\nports();\npower_led();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "notebook",
    "openscad_code": "// Notebook Electronic Device (Laptop) - Realistic Style, Medium Complexity\n\n// Device dimensions (in mm)\nlaptop_width = 90;\nlaptop_depth = 60;\nlaptop_thickness = 8;\nscreen_bezel = 3;\nkeyboard_depression = 0.5;\n\n// Colors\ncolor_base = [0.2, 0.2, 0.2];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_keys = [0.15, 0.15, 0.15];\ncolor_trackpad = [0.3, 0.3, 0.3];\ncolor_ports = [0.4, 0.4, 0.4];\n\n// Main body\nmodule laptop_base() {\n    color(color_base)\n    difference() {\n        // Main chassis\n        cube([laptop_width, laptop_depth, laptop_thickness], center=true);\n        \n        // Hollow out interior\n        translate([0, 0, -0.5])\n        cube([laptop_width-4, laptop_depth-4, laptop_thickness-1], center=true);\n    }\n}\n\n// Screen assembly\nmodule laptop_screen() {\n    color(color_base)\n    difference() {\n        // Screen lid\n        translate([0, 0, laptop_thickness/2 + 4])\n        cube([laptop_width, laptop_depth, 4], center=true);\n        \n        // Screen cutout\n        translate([0, 0, laptop_thickness/2 + 5.5])\n        color(color_screen)\n        cube([laptop_width - screen_bezel*2, laptop_depth - screen_bezel*2, 2], center=true);\n    }\n    \n    // Screen surface\n    translate([0, 0, laptop_thickness/2 + 6.5])\n    color([0.05, 0.05, 0.05])\n    cube([laptop_width - screen_bezel*2 - 2, laptop_depth - screen_bezel*2 - 2, 0.1], center=true);\n}\n\n// Keyboard keys\nmodule keyboard() {\n    key_width = (laptop_width - 20) / 12;\n    key_depth = (laptop_depth - 30) / 4;\n    \n    // Keyboard area depression\n    translate([0, 8, -laptop_thickness/2 + 0.1])\n    color([0.25, 0.25, 0.25])\n    cube([laptop_width - 10, 25, keyboard_depression], center=true);\n    \n    // Individual keys\n    for (row = [0:3]) {\n        for (col = [0:11]) {\n            translate([\n                -laptop_width/2 + 10 + col * key_width + key_width/2,\n                8 - 10 + row * key_depth + key_depth/2,\n                -laptop_thickness/2 + keyboard_depression + 0.1\n            ])\n            color(color_keys)\n            cube([key_width * 0.8, key_depth * 0.7, 0.3], center=true);\n        }\n    }\n}\n\n// Trackpad\nmodule trackpad() {\n    translate([0, -12, -laptop_thickness/2 + 0.1])\n    color(color_trackpad)\n    cube([25, 15, 0.2], center=true);\n}\n\n// Ports on left side\nmodule ports() {\n    // USB ports\n    for (i = [0:1]) {\n        translate([-laptop_width/2 - 0.1, -5 + i*10, 0])\n        rotate([90, 0, 0])\n        color(color_ports)\n        cube([7, 2, 5]);\n    }\n    \n    // Power port\n    translate([-laptop_width/2 - 0.1, 8, 0])\n    rotate([90, 0, 0])\n    color(color_ports)\n    cylinder(h=3, d=5);\n}\n\n// Status LEDs\nmodule status_leds() {\n    // Power LED\n    translate([laptop_width/2 - 5, laptop_depth/2 - 3, 0])\n    color([0, 1, 0])\n    cylinder(h=0.5, d=2);\n    \n    // HDD LED\n    translate([laptop_width/2 - 10, laptop_depth/2 - 3, 0])\n    color([0, 0.5, 1])\n    cylinder(h=0.5, d=2);\n}\n\n// Hinges\nmodule hinges() {\n    for (side = [-1:1:1]) {\n        translate([side * (laptop_width/2 - 5), laptop_depth/2, 0])\n        color(color_base)\n        cylinder(h=6, d=3, center=true);\n    }\n}\n\n// Webcam\nmodule webcam() {\n    translate([0, laptop_depth/2 - screen_bezel - 2, laptop_thickness/2 + 6])\n    color([0.1, 0.1, 0.1])\n    cylinder(h=1, d=3);\n}\n\n// Logo on lid\nmodule logo() {\n    translate([0, 0, laptop_thickness/2 + 6])\n    color([0.3, 0.3, 0.3])\n    linear_extrude(height=0.2) {\n        text(\"NB\", size=8, halign=\"center\", valign=\"center\");\n    }\n}\n\n// Assemble the laptop\nunion() {\n    laptop_base();\n    laptop_screen();\n    keyboard();\n    trackpad();\n    ports();\n    status_leds();\n    hinges();\n    webcam();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "palmtop",
    "openscad_code": "// Palm-top PDA (Personal Digital Assistant)\n// Overall dimensions: 85mm x 55mm x 12mm\n\n// Color definitions\ncase_color = [0.15, 0.15, 0.15];  // Dark gray\nscreen_color = [0.05, 0.05, 0.05];  // Black\nbutton_color = [0.2, 0.2, 0.2];  // Medium gray\naccent_color = [0.8, 0.8, 0.8];  // Light gray\nport_color = [0.1, 0.1, 0.1];  // Very dark gray\n\n// Main case\nmodule main_case() {\n    color(case_color)\n    difference() {\n        // Outer shell with rounded edges\n        minkowski() {\n            cube([80, 50, 8], center = true);\n            sphere(2);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, -1])\n        minkowski() {\n            cube([74, 44, 10], center = true);\n            sphere(1.5);\n        }\n        \n        // Screen opening\n        translate([0, 10, 3])\n        cube([50, 30, 2], center = true);\n    }\n}\n\n// LCD screen\nmodule lcd_screen() {\n    color(screen_color)\n    translate([0, 10, 3.5])\n    cube([48, 28, 0.5], center = true);\n    \n    // Screen surface\n    color([0.3, 0.3, 0.8, 0.3])\n    translate([0, 10, 4])\n    cube([46, 26, 0.1], center = true);\n}\n\n// Navigation buttons (D-pad style)\nmodule dpad() {\n    color(button_color)\n    translate([-20, -15, 3.5])\n    union() {\n        // Center button\n        cylinder(h = 1.5, r = 4, $fn = 16);\n        \n        // Up button\n        translate([0, 6, 0])\n        cube([8, 4, 1.5], center = true);\n        \n        // Down button\n        translate([0, -6, 0])\n        cube([8, 4, 1.5], center = true);\n        \n        // Left button\n        translate([-6, 0, 0])\n        cube([4, 8, 1.5], center = true);\n        \n        // Right button\n        translate([6, 0, 0])\n        cube([4, 8, 1.5], center = true);\n    }\n}\n\n// Application buttons\nmodule app_buttons() {\n    color(button_color)\n    for (i = [0:3]) {\n        translate([25 + i*8, -15, 3.5])\n        cylinder(h = 1.5, r = 3, $fn = 12);\n    }\n}\n\n// Stylus slot\nmodule stylus_slot() {\n    color(port_color)\n    translate([38, -24, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 30, r = 2.5, $fn = 12);\n    \n    // Slot opening\n    translate([38, -24, -3])\n    cube([5, 2, 6], center = true);\n}\n\n// IR port\nmodule ir_port() {\n    color(port_color)\n    translate([0, 26, 2])\n    cube([10, 2, 1], center = true);\n}\n\n// Charging/sync port\nmodule sync_port() {\n    color(port_color)\n    translate([0, -26, 1])\n    cube([12, 2, 2], center = true);\n}\n\n// Power LED indicator\nmodule power_led() {\n    color([1, 0, 0])\n    translate([-30, 24, 3.5])\n    cylinder(h = 0.5, r = 1.5, $fn = 8);\n    \n    // LED lens\n    color([1, 0, 0, 0.7])\n    translate([-30, 24, 4.1])\n    sphere(1.5, $fn = 8);\n}\n\n// Stylus\nmodule stylus() {\n    color(accent_color)\n    translate([38, -9, -3])\n    rotate([0, 90, 0])\n    union() {\n        // Main body\n        cylinder(h = 35, r = 2, $fn = 12);\n        \n        // Tip\n        translate([0, 0, 35])\n        cylinder(h = 3, r1 = 2, r2 = 0.5, $fn = 12);\n        \n        // Top cap\n        translate([0, 0, 0])\n        sphere(2.5, $fn = 12);\n    }\n}\n\n// Assembly\nmain_case();\nlcd_screen();\ndpad();\napp_buttons();\nstylus_slot();\nir_port();\nsync_port();\npower_led();\nstylus();",
    "renders": true
  },
  {
    "electronic_device": "handheld",
    "openscad_code": "// Handheld Game Console - Realistic Style, Medium Complexity\n$fn = 64;\n\n// Main body dimensions\nbody_w = 85;\nbody_h = 155;\nbody_d = 25;\nwall_thickness = 2;\n\n// Screen dimensions\nscreen_w = 65;\nscreen_h = 40;\nscreen_d = 2;\n\n// Button parameters\nbutton_r = 5;\nbutton_h = 3;\nd_pad_r = 3;\nd_pad_h = 4;\naction_button_r = 4.5;\n\n// Colors\ncolor_body = [0.15, 0.15, 0.15];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_screen_active = [0.2, 0.8, 0.2];\ncolor_buttons = [0.2, 0.2, 0.2];\ncolor_accent = [0.3, 0.3, 0.3];\n\n// Main body with rounded edges\nmodule main_body() {\n    color(color_body)\n    difference() {\n        // Main rounded body\n        minkowski() {\n            cube([body_w - 6, body_h - 6, body_d - 2], center = true);\n            sphere(r = 3);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 2])\n        minkowski() {\n            cube([body_w - 6 - wall_thickness*2, body_h - 6 - wall_thickness*2, body_d - 2], center = true);\n            sphere(r = 2);\n        }\n        \n        // Screen cutout\n        translate([0, 30, body_d/2 - 0.5])\n        cube([screen_w + 4, screen_h + 4, screen_d + 2], center = true);\n        \n        // Speaker holes left\n        translate([-30, -55, body_d/2 - 0.5])\n        for (i = [-2:2])\n            translate([0, i*4, 0])\n            cylinder(h = 3, r = 1);\n            \n        // Speaker holes right\n        translate([30, -55, body_d/2 - 0.5])\n        for (i = [-2:2])\n            translate([0, i*4, 0])\n            cylinder(h = 3, r = 1);\n    }\n}\n\n// Screen assembly\nmodule screen() {\n    // Screen bezel\n    color(color_accent)\n    translate([0, 30, body_d/2 - 1])\n    cube([screen_w + 4, screen_h + 4, screen_d], center = true);\n    \n    // Screen display\n    color(color_screen)\n    translate([0, 30, body_d/2 - 0.5])\n    cube([screen_w, screen_h, screen_d + 0.5], center = true);\n    \n    // Active screen area\n    color(color_screen_active)\n    translate([0, 30, body_d/2])\n    cube([screen_w - 4, screen_h - 4, 0.1], center = true);\n}\n\n// D-pad module\nmodule d_pad() {\n    color(color_buttons)\n    union() {\n        // Center button\n        translate([-25, 0, body_d/2 - 1])\n        cylinder(h = d_pad_h, r = d_pad_r * 2);\n        \n        // Up\n        translate([-25, 8, body_d/2 - 1])\n        cylinder(h = d_pad_h, r = d_pad_r);\n        \n        // Down\n        translate([-25, -8, body_d/2 - 1])\n        cylinder(h = d_pad_h, r = d_pad_r);\n        \n        // Left\n        translate([-33, 0, body_d/2 - 1])\n        cylinder(h = d_pad_h, r = d_pad_r);\n        \n        // Right\n        translate([-17, 0, body_d/2 - 1])\n        cylinder(h = d_pad_h, r = d_pad_r);\n    }\n}\n\n// Action buttons\nmodule action_buttons() {\n    color(color_buttons)\n    union() {\n        // A button\n        translate([25, 5, body_d/2 - 1])\n        cylinder(h = button_h, r = action_button_r);\n        \n        // B button\n        translate([15, -5, body_d/2 - 1])\n        cylinder(h = button_h, r = action_button_r);\n        \n        // X button\n        translate([15, 15, body_d/2 - 1])\n        cylinder(h = button_h, r = action_button_r);\n        \n        // Y button\n        translate([25, 5, body_d/2 - 1])\n        translate([0, 10, 0])\n        cylinder(h = button_h, r = action_button_r);\n    }\n}\n\n// Menu buttons\nmodule menu_buttons() {\n    color(color_accent)\n    union() {\n        // Start button\n        translate([0, -20, body_d/2 - 1])\n        rounded_cube([12, 4, 2], 1);\n        \n        // Select button\n        translate([0, -27, body_d/2 - 1])\n        rounded_cube([12, 4, 2], 1);\n    }\n}\n\n// Power LED indicator\nmodule power_led() {\n    color([1, 0, 0])\n    translate([-35, 55, body_d/2 - 0.5])\n    cylinder(h = 1, r = 2);\n}\n\n// Charging port\nmodule charging_port() {\n    color([0.1, 0.1, 0.1])\n    translate([0, -70, body_d/2 - 0.5])\n    cube([10, 4, 3], center = true);\n}\n\n// Rounded cube helper\nmodule rounded_cube(size, radius) {\n    minkowski() {\n        cube(size - [radius*2, radius*2, 0], center = true);\n        cylinder(h = size.z, r = radius);\n    }\n}\n\n// Assemble the device\nmain_body();\nscreen();\nd_pad();\naction_buttons();\nmenu_buttons();\npower_led();\ncharging_port();",
    "renders": true
  },
  {
    "electronic_device": "wearable",
    "openscad_code": "// Smartwatch 3D printable model - realistic style, medium complexity\n\n// Overall dimensions\nwatch_width = 42;\nwatch_height = 48;\nwatch_thickness = 12;\nscreen_thickness = 1;\nwall_thickness = 1.5;\n\n// Watch band dimensions\nband_width = 20;\nband_thickness = 2.5;\nband_length = 85;\nband_gap = 8;\n\n// Button dimensions\nbutton_radius = 3;\nbutton_height = 5;\nbutton_offset = 21;\n\n// Sensor dimensions\nsensor_diameter = 8;\nsensor_height = 1;\n\n// Colors\ncase_color = \"Silver\";\nscreen_color = \"Black\";\nband_color = [0.2, 0.2, 0.2];\nbutton_color = \"Gray\";\nsensor_color = \"DarkGreen\";\n\nmodule watch_case() {\n    // Main case body\n    color(case_color)\n    difference() {\n        // Outer rounded rectangle\n        minkowski() {\n            cube([watch_width, watch_height, watch_thickness], center = true);\n            sphere(wall_thickness);\n        }\n        \n        // Hollow center\n        translate([0, 0, -wall_thickness/2])\n        minkowski() {\n            cube([watch_width - 2*wall_thickness, watch_height - 2*wall_thickness, watch_thickness + 1], center = true);\n            sphere(wall_thickness);\n        }\n        \n        // Screen opening\n        translate([0, 0, watch_thickness/2 - screen_thickness/2])\n        cube([watch_width - 4*wall_thickness, watch_height - 4*wall_thickness, screen_thickness + 1], center = true);\n    }\n}\n\nmodule screen() {\n    // Display screen\n    color(screen_color)\n    translate([0, 0, watch_thickness/2 - screen_thickness/2 + 0.1])\n    cube([watch_width - 4*wall_thickness, watch_height - 4*wall_thickness, screen_thickness], center = true);\n    \n    // Screen border\n    color(\"Gray\")\n    translate([0, 0, watch_thickness/2 - screen_thickness/2 - 0.1])\n    cube([watch_width - 3.8*wall_thickness, watch_height - 3.8*wall_thickness, 0.2], center = true);\n}\n\nmodule side_button() {\n    // Digital crown button\n    color(button_color)\n    translate([watch_width/2 + button_height/2, button_offset, 0])\n    rotate([0, 90, 0])\n    cylinder(h = button_height, r = button_radius, center = true);\n    \n    // Button base\n    translate([watch_width/2, button_offset, 0])\n    cylinder(h = 1, r = button_radius + 1, center = true);\n}\n\nmodule watch_band_attachment() {\n    // Left band attachment\n    translate([-watch_width/2 - band_gap/2, 0, 0])\n    color(band_color)\n    difference() {\n        cube([band_gap, band_width, watch_thickness], center = true);\n        // Pin holes\n        for(i = [-1, 1]) {\n            translate([0, i*band_width/4, 0])\n            rotate([90, 0, 0])\n            cylinder(h = band_gap + 1, r = 1, center = true);\n        }\n    }\n    \n    // Right band attachment\n    translate([watch_width/2 + band_gap/2, 0, 0])\n    color(band_color)\n    difference() {\n        cube([band_gap, band_width, watch_thickness], center = true);\n        // Pin holes\n        for(i = [-1, 1]) {\n            translate([0, i*band_width/4, 0])\n            rotate([90, 0, 0])\n            cylinder(h = band_gap + 1, r = 1, center = true);\n        }\n    }\n}\n\nmodule band_section(side = 1) {\n    // Watch band with holes\n    color(band_color)\n    translate([side * (watch_width/2 + band_gap + band_length/2), 0, 0])\n    cube([band_length, band_width, band_thickness], center = true);\n    \n    // Band holes\n    for(i = [1:7]) {\n        translate([side * (watch_width/2 + band_gap + i*band_length/8), 0, 0])\n        cylinder(h = band_thickness + 1, r = 1.5, center = true);\n    }\n}\n\nmodule heart_sensor() {\n    // Heart rate sensor array\n    color(sensor_color)\n    translate([0, 0, -watch_thickness/2 - sensor_height/2])\n    cylinder(h = sensor_height, r = sensor_diameter/2, center = true);\n    \n    // LED windows\n    for(i = [0:1]) {\n        translate([i*3 - 1.5, 0, -watch_thickness/2 - sensor_height/2])\n        color(\"Red\")\n        cylinder(h = sensor_height, r = 1, center = true);\n    }\n}\n\nmodule charging_contacts() {\n    // Charging pins\n    for(i = [-1, 1]) {\n        translate([i*5, -watch_height/4, -watch_thickness/2 - 0.5])\n        color(\"Gold\")\n        cube([2, 4, 1], center = true);\n    }\n}\n\n// Assembly\nwatch_case();\nscreen();\nside_button();\nwatch_band_attachment();\nband_section(-1);  // Left band\nband_section(1);   // Right band\nheart_sensor();\ncharging_contacts();",
    "renders": true
  },
  {
    "electronic_device": "smartphone",
    "openscad_code": "// Realistic Smartphone - OpenSCAD Model (Medium Complexity)\n// Overall dimensions: 75mm x 150mm x 8mm\n\n// Color definitions\n$fn = 50;\n\nmodule smartphone() {\n    // Main phone body\n    color(\"lightgray\") \n    difference() {\n        // Outer shell\n        translate([-37.5, -75, 0]) \n        cube([75, 150, 8]);\n        \n        // Screen cutout\n        translate([-35, -73, 7.9]) \n        cube([70, 146, 0.2]);\n    }\n    \n    // Screen glass\n    color(\"black\") \n    translate([-34.9, -72.9, 7.9]) \n    cube([69.8, 145.8, 0.1]);\n    \n    // Screen display area\n    color(\"navy\") \n    translate([-32, -70, 7.8]) \n    cube([64, 140, 0.1]);\n    \n    // Camera bump\n    color(\"lightgray\") \n    translate([25, 65, 8]) \n    cylinder(h=1.5, r=8);\n    \n    // Camera lens\n    color(\"black\") \n    translate([25, 65, 9.4]) \n    cylinder(h=0.5, r=4);\n    \n    // LED flash\n    color(\"yellow\") \n    translate([12, 65, 9.4]) \n    cylinder(h=0.5, r=2);\n    \n    // Microphone holes\n    for(i = [-2:1:2]) {\n        color(\"black\") \n        translate([i*4, -76, 3]) \n        cylinder(h=2, r=0.8);\n    }\n    \n    // Speaker grille\n    color(\"darkgray\") \n    translate([0, -76, 5]) \n    cube([40, 2, 3]);\n    \n    // Speaker holes\n    for(i = [-9:1:9]) {\n        color(\"black\") \n        translate([i*2, -75.9, 6]) \n        cylinder(h=1, r=0.5);\n    }\n    \n    // Volume buttons\n    color(\"lightgray\") \n    translate([37.5, 30, 4]) \n    cube([2, 20, 2]);\n    \n    // Power button\n    color(\"lightgray\") \n    translate([37.5, -10, 4]) \n    cube([2, 10, 2]);\n    \n    // Charging port\n    color(\"black\") \n    translate([0, 76, 2]) \n    cube([12, 2, 4]);\n    \n    // Charging port chamfer\n    color(\"black\") \n    translate([0, 76.9, 2]) \n    cube([12, 1, 4]);\n    \n    // SIM tray\n    color(\"darkgray\") \n    translate([-30, 76, 3]) \n    cube([20, 0.5, 2]);\n    \n    // SIM ejector hole\n    color(\"black\") \n    translate([-20, 76.4, 4]) \n    cylinder(h=1, r=0.5);\n    \n    // Front camera\n    color(\"black\") \n    translate([0, 60, 7.9]) \n    cylinder(h=0.5, r=2.5);\n    \n    // Earpiece speaker\n    color(\"darkgray\") \n    translate([0, 55, 7.9]) \n    cube([25, 3, 0.5]);\n    \n    // Home button (fingerprint sensor)\n    color(\"gray\") \n    translate([0, -65, 7.9]) \n    cylinder(h=0.5, r=5);\n    \n    // Logo placeholder\n    color(\"silver\") \n    translate([0, 0, 7.9]) \n    cube([10, 2, 0.1]);\n    \n    // Antenna lines\n    color(\"white\") \n    translate([-37.5, 20, 4]) \n    cube([75, 1, 0.5]);\n    \n    color(\"white\") \n    translate([-37.5, -20, 4]) \n    cube([75, 1, 0.5]);\n}\n\n// Render the smartphone\nsmartphone();",
    "renders": true
  },
  {
    "electronic_device": "phablet",
    "openscad_code": "// Phablet (phone-tablet hybrid) with realistic styling\n// Medium complexity OpenSCAD model\n\n// Color definitions\n$fn = 32;\n$fa = 2;\n$fs = 0.5;\n\n// Main dimensions\nphone_length = 75;\nphone_width = 40;\nphone_thickness = 7;\n\n// Screen dimensions\nscreen_length = 65;\nscreen_width = 35;\nscreen_thickness = 1;\n\n// Corner radius\ncorner_radius = 5;\n\n// Camera bump\ncamera_diameter = 8;\ncamera_height = 1.5;\n\n// Button dimensions\nbutton_width = 2;\nbutton_height = 8;\nbutton_thickness = 1;\n\n// Port dimensions\nport_width = 10;\nport_height = 3;\n\n// Speaker grill holes\nspeaker_hole_diameter = 1;\nspeaker_hole_spacing = 2;\nspeaker_grill_length = 20;\n\n// Create rounded corners for body\nmodule rounded_cube(length, width, height, radius) {\n    hull() {\n        for (x = [-1, 1], y = [-1, 1]) {\n            translate([x * (length/2 - radius), y * (width/2 - radius), 0]) {\n                cylinder(h=height, r=radius, center=true);\n            }\n        }\n    }\n}\n\n// Create phablet body\nmodule phablet_body() {\n    color([0.15, 0.15, 0.15])  // Dark gray/black\n    rounded_cube(phone_length, phone_width, phone_thickness, corner_radius);\n}\n\n// Create screen\nmodule screen() {\n    translate([0, 0, phone_thickness/2 + screen_thickness/2 - 0.1]) {\n        color([0.05, 0.05, 0.05])  // Black screen\n        rounded_cube(screen_length, screen_width, screen_thickness, corner_radius - 1);\n    }\n}\n\n// Create camera bump\nmodule camera_bump() {\n    translate([phone_length/2 - camera_diameter - 5, phone_width/2 - camera_diameter - 5, phone_thickness/2 + camera_height/2]) {\n        color([0.2, 0.2, 0.2])  // Dark gray\n        cylinder(h=camera_height, r=camera_diameter/2, center=true);\n    }\n}\n\n// Create camera lens\nmodule camera_lens() {\n    translate([phone_length/2 - camera_diameter - 5, phone_width/2 - camera_diameter - 5, phone_thickness/2 + camera_height + 0.5]) {\n        color([0, 0, 0])  // Black lens\n        cylinder(h=0.5, r=camera_diameter/3, center=true);\n    }\n}\n\n// Create side buttons\nmodule side_buttons() {\n    // Power button\n    translate([phone_length/2 + button_thickness/2, -phone_width/4, phone_thickness/4]) {\n        color([0.3, 0.3, 0.3])  // Gray buttons\n        cube([button_thickness, button_width, button_height], center=true);\n    }\n    \n    // Volume buttons\n    translate([phone_length/2 + button_thickness/2, phone_width/4, phone_thickness/4 + 5]) {\n        color([0.3, 0.3, 0.3])\n        cube([button_thickness, button_width, button_height], center=true);\n    }\n    \n    translate([phone_length/2 + button_thickness/2, phone_width/4, phone_thickness/4 - 5]) {\n        color([0.3, 0.3, 0.3])\n        cube([button_thickness, button_width, button_height], center=true);\n    }\n}\n\n// Create charging port\nmodule charging_port() {\n    translate([0, -phone_width/2 - 0.1, -phone_thickness/2 + port_height/2 + 1]) {\n        color([0.1, 0.1, 0.1])\n        cube([port_width, 0.2, port_height], center=true);\n    }\n}\n\n// Create speaker grill\nmodule speaker_grill() {\n    translate([0, -phone_width/2 - 0.1, -phone_thickness/2 + 2]) {\n        for (i = [-speaker_grill_length/2 + speaker_hole_spacing : speaker_hole_spacing : speaker_grill_length/2 - speaker_hole_spacing]) {\n            translate([i, 0, 0]) {\n                color([0.1, 0.1, 0.1])\n                cylinder(h=0.5, r=speaker_hole_diameter/2, center=true);\n            }\n        }\n    }\n}\n\n// Create front-facing camera\nmodule front_camera() {\n    translate([phone_length/2 - 10, phone_width/2 - 5, phone_thickness/2 + screen_thickness + 0.1]) {\n        color([0, 0, 0])\n        cylinder(h=0.5, r=1.5, center=true);\n    }\n}\n\n// Create earpiece speaker\nmodule earpiece() {\n    translate([phone_length/2 - 20, phone_width/2 - 2, phone_thickness/2 + screen_thickness + 0.1]) {\n        color([0.1, 0.1, 0.1])\n        cube([10, 1, 0.5], center=true);\n    }\n}\n\n// Create home button (virtual)\nmodule home_button() {\n    translate([0, -phone_width/2 + 5, phone_thickness/2 + screen_thickness + 0.1]) {\n        color([0.15, 0.15, 0.15])\n        difference() {\n            cube([8, 2, 0.5], center=true);\n            cube([7.5, 1.5, 0.6], center=true);\n        }\n    }\n}\n\n// Assemble the phablet\nunion() {\n    phablet_body();\n    screen();\n    camera_bump();\n    camera_lens();\n    side_buttons();\n    charging_port();\n    speaker_grill();\n    front_camera();\n    earpiece();\n    home_button();\n}",
    "renders": true
  },
  {
    "electronic_device": "ebookreader",
    "openscad_code": "// Realistic 6-inch e-book reader (Kobo/Kindle style)\n// Overall footprint ~120 mm × 160 mm × 9 mm\n\n$fn = 36;               // smooth curves\n\n// Color palette\nc_case   = [0.15,0.15,0.15];  // dark graphite\nc_screen = [0.05,0.05,0.05];  // deep black\nc_key    = [0.25,0.25,0.25];  // slightly lighter\nc_led    = [0,1,0];           // status LED\nc_port   = [0.2,0.2,0.2];     // metal tone\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Outer rounded shell\n        minkowski() {\n            cube([118,158,8.5], center=true);\n            sphere(2);\n        }\n\n        // Hollow inside\n        minkowski() {\n            cube([114,154,10], center=true);\n            sphere(1.5);\n        }\n\n        // Screen opening\n        translate([0,0,3.5])\n            cube([108,144,5], center=true);\n\n        // Micro-USB port\n        translate([0,-79.5,0])\n            cube([8,2,3.5], center=true);\n\n        // Power button slot\n        translate([59,20,0])\n            rotate([90,0,0])\n                cylinder(h=5, d1=3.5, d2=2.5);\n    }\n}\n\n// Screen glass\nmodule screen_glass() {\n    color(c_screen)\n    difference() {\n        translate([0,0,4.5])\n            cube([110,146,0.8], center=true);\n        // Bevel around the glass\n        translate([0,0,4.4])\n            cube([106,142,1], center=true);\n    }\n}\n\n// Power button\nmodule power_button() {\n    color(c_key)\n    translate([59,20,-1])\n        rotate([90,0,0])\n            cylinder(h=2.5, d1=2.4, d2=3.2);\n}\n\n// Page-turn buttons (tactile dots)\nmodule page_buttons() {\n    color(c_key)\n    for (y=[-40, 40]) {\n        translate([0,y,4.5])\n            cylinder(h=0.6, d=5);\n        translate([0,y,4.5])\n            cylinder(h=0.2, d=2.2);\n    }\n}\n\n// Status LED\nmodule status_led() {\n    color(c_led)\n    translate([0,-68,4.5])\n        cylinder(h=0.3, d=1.5);\n}\n\n// Micro-USB connector detail\nmodule usb_port() {\n    color(c_port)\n    translate([0,-79.5,0])\n        cube([7.5,1.8,3], center=true);\n}\n\n// Rubber feet (anti-slip)\nmodule feet() {\n    color(c_key)\n    for (x=[-45, 45])\n        for (y=[-70, 70])\n            translate([x,y,-4.75])\n                cylinder(h=0.5, d=3);\n}\n\n// Assemble the e-reader\nunion() {\n    color(c_case) body_shell();\n    screen_glass();\n    power_button();\n    page_buttons();\n    status_led();\n    usb_port();\n    feet();\n}",
    "renders": true
  },
  {
    "electronic_device": "smartwatch",
    "openscad_code": "// Smartwatch model with realistic styling\n// Dimensions based on typical 44mm watch\n\n// Color definitions\nwatch_body_color = [0.15,0.15,0.15];  // Dark gray aluminum\nscreen_color = [0,0,0];               // Black screen\nbutton_color = [0.8,0.8,0.8];         // Silver buttons\nband_color = [0.1,0.1,0.1];           // Black fluoroelastomer\nsensor_color = [0.9,0.9,0.9];         // Light gray sensors\n\n// Main dimensions\nwatch_width = 38;\nwatch_height = 44;\nwatch_thickness = 10.7;\nscreen_width = 32;\nscreen_height = 38;\nscreen_thickness = 0.5;\nwall_thickness = 2;\n\n// Create complete smartwatch\nmodule smartwatch() {\n    // Watch body\n    color(watch_body_color)\n    difference() {\n        // Main body - rounded rectangle\n        minkowski() {\n            cube([watch_width, watch_height, watch_thickness], center=true);\n            sphere(2.5);\n        }\n        \n        // Hollow out for electronics\n        translate([0,0,-1])\n        minkowski() {\n            cube([watch_width-wall_thickness*2, watch_height-wall_thickness*2, watch_thickness], center=true);\n            sphere(2);\n        }\n        \n        // Screen cutout\n        translate([0,0,watch_thickness/2])\n        cube([screen_width+1, screen_height+1, screen_thickness*2], center=true);\n    }\n    \n    // Screen\n    color(screen_color)\n    translate([0,0,watch_thickness/2+0.1])\n    cube([screen_width, screen_height, screen_thickness], center=true);\n    \n    // Digital Crown\n    color(button_color)\n    rotate([90,0,0])\n    translate([watch_width/2+2, 0, 0])\n    cylinder(h=3, d1=4, d2=3.5, center=true);\n    \n    // Side button\n    color(button_color)\n    translate([watch_width/2+1, watch_height/4, 0])\n    cube([2, 6, 2], center=true);\n    \n    // Speaker holes (left side)\n    for(i=[-2:1:2]) {\n        color(watch_body_color)\n        translate([-watch_width/2-0.5, i*4, -watch_thickness/4])\n        rotate([0,90,0])\n        cylinder(h=1, d=0.8);\n    }\n    \n    // Watch band attachment points\n    translate([0, watch_height/2+5, 0])\n    band_attachment();\n    mirror([0,1,0])\n    translate([0, watch_height/2+5, 0])\n    band_attachment();\n    \n    // Heart rate sensor array (bottom)\n    color(sensor_color)\n    translate([0,0,-watch_thickness/2])\n    difference() {\n        cylinder(h=0.5, d=8, center=true);\n        for(i=[-1:1:1]) {\n            for(j=[-1:1:1]) {\n                translate([i*2.5, j*2.5, -0.1])\n                cylinder(h=0.7, d=0.8);\n            }\n        }\n    }\n    \n    // Wireless charging coil indicator\n    color([0.2,0.2,0.2])\n    translate([0,0,-watch_thickness/2+0.3])\n    difference() {\n        cylinder(h=0.1, d=20, center=true);\n        cylinder(h=0.2, d=18, center=true);\n    }\n}\n\n// Band attachment module\nmodule band_attachment() {\n    color(watch_body_color)\n    difference() {\n        // Attachment lug\n        translate([0,0,0])\n        cube([watch_width-4, 10, 6], center=true);\n        \n        // Band slot\n        translate([0,0,0])\n        cube([watch_width-6, 12, 2], center=true);\n    }\n    \n    // Watch band\n    color(band_color)\n    translate([0,5,0])\n    cube([watch_width-6, 20, 2], center=true);\n}\n\n// Assemble the watch\nsmartwatch();",
    "renders": true
  },
  {
    "electronic_device": "smartband",
    "openscad_code": "// Smartband electronic device for 3D printing\n// Main dimensions (mm)\nband_width = 18;\nband_thickness = 3;\nscreen_width = 12;\nscreen_height = 10;\nscreen_depth = 1;\nbody_length = 40;\nbody_height = 12;\n\n// Colors\nband_color = \"LightGray\";\nbody_color = \"DarkSlateGray\";\nscreen_color = \"Black\";\nbutton_color = \"Silver\";\nsensor_color = \"Crimson\";\n\n// Main body module\nmodule smartband_body() {\n    color(body_color) {\n        // Main rectangular body\n        translate([0, 0, band_thickness/2])\n            cube([body_length, band_width, body_height], center=true);\n        \n        // Rounded top edges\n        for(y = [-band_width/2+1, band_width/2-1]) {\n            translate([body_length/2-1, y, band_thickness/2+body_height/2-1])\n                rotate([0, 90, 0])\n                    cylinder(h=2, r=1, $fn=16);\n            translate([-body_length/2+1, y, band_thickness/2+body_height/2-1])\n                rotate([0, 90, 0])\n                    cylinder(h=2, r=1, $fn=16);\n        }\n    }\n}\n\n// Display screen module\nmodule display_screen() {\n    color(screen_color) {\n        translate([0, 0, band_thickness/2+body_height/2-screen_depth/2])\n            cube([screen_width, screen_height, screen_depth], center=true);\n    }\n    \n    // Screen bevel\n    color(\"Gray\")\n    translate([0, 0, band_thickness/2+body_height/2-screen_depth/2-0.1])\n        cube([screen_width+2, screen_height+2, 0.2], center=true);\n}\n\n// Side button module\nmodule side_button() {\n    color(button_color) {\n        translate([body_length/2+1, 0, band_thickness/2+body_height/2-2])\n            cylinder(h=2, r=1.5, $fn=16);\n    }\n}\n\n// Heart rate sensor module\nmodule heart_sensor() {\n    color(sensor_color) {\n        translate([0, 0, band_thickness/2-1])\n            cylinder(h=0.5, r=3, $fn=32);\n        \n        // LED indicators\n        for(i = [-1, 1]) {\n            translate([i*1.5, 0, band_thickness/2-1.2])\n                cylinder(h=0.2, r=0.5, $fn=16);\n        }\n    }\n}\n\n// Charging port module\nmodule charging_port() {\n    color(\"Black\")\n    translate([-body_length/2-0.5, 0, band_thickness/2-body_height/2+2])\n        rotate([0, 90, 0])\n            cylinder(h=2, r=2, $fn=16);\n    \n    // Port detail\n    difference() {\n        translate([-body_length/2-0.5, 0, band_thickness/2-body_height/2+2])\n            cube([4, 4, 2], center=true);\n        translate([-body_length/2-0.5, 0, band_thickness/2-body_height/2+2])\n            cube([3.5, 3.5, 2.5], center=true);\n    }\n}\n\n// Band strap module\nmodule strap_segment(length, is_top=true) {\n    color(band_color) {\n        // Tapered strap\n        hull() {\n            translate([0, 0, 0])\n                cylinder(h=band_thickness, r=band_width/2, $fn=32);\n            translate([length, 0, 0])\n                cylinder(h=band_thickness, r=band_width/3, $fn=32);\n        }\n        \n        // Holes for sizing\n        if(is_top) {\n            for(i = [1:2:10]) {\n                translate([length - i*5, 0, band_thickness/2])\n                    cylinder(h=band_thickness+1, r=1.5, $fn=16);\n            }\n        }\n        \n        // Buckle attachment\n        if(!is_top) {\n            translate([length, 0, band_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(h=band_width/2, r=1.5, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    smartband_body();\n    \n    // Display\n    display_screen();\n    \n    // Buttons\n    side_button();\n    \n    // Sensor\n    heart_sensor();\n    \n    // Charging port\n    charging_port();\n    \n    // Top strap\n    translate([body_length/2+15, 0, 0])\n        strap_segment(50, true);\n    \n    // Bottom strap\n    translate([-body_length/2-15, 0, 0])\n        rotate([0, 180, 0])\n            strap_segment(40, false);\n}",
    "renders": true
  },
  {
    "electronic_device": "smartglasses",
    "openscad_code": "// Smartglasses – realistic style, medium complexity\n// Overall width ≈ 150 mm, temple length ≈ 140 mm, bridge height ≈ 45 mm\n\nframe_th = 3.2;          // wall thickness for 3D printing\nlens_gap = 2;            // air gap for lens insertion\ncolor_frame = \"DarkSlateGray\";\ncolor_lens  = \"RoyalBlue\";\ncolor_tech  = \"Black\";\n\nmodule rounded_box(s, r) {\n    hull() {\n        for(dx=[-1,1], dy=[-1,1], dz=[-1,1])\n            translate([dx*(s.x/2-r), dy*(s.y/2-r), dz*(s.z/2-r)])\n                sphere(r=r);\n    }\n}\n\nmodule lens(w, h, d) {\n    difference() {\n        color(color_lens)\n            scale([1,0.7,1])\n                rotate([0,90,0])\n                    cylinder(h=w, d=h, $fn=60);\n        // anti-glare chamfer\n        translate([d/2,0,0])\n            rotate([0,90,0])\n                cylinder(h=w*1.2, d1=h*0.9, d2=h*1.1, $fn=60);\n    }\n}\n\nmodule micro_display() {\n    color(color_tech)\n    translate([-frame_th-1.5, 12, -5])\n        rotate([110,0,0])\n            cube([6,10,4], center=true);\n}\n\nmodule temple_arm(len) {\n    color(color_frame) {\n        difference() {\n            hull() {\n                translate([0,0,0]) sphere(r=frame_th);\n                translate([len-10,0,0]) sphere(r=frame_th);\n                translate([len-10,0,-8]) sphere(r=frame_th);\n            }\n            // cable channel\n            translate([0,-frame_th,0])\n                cube([len, frame_th*2, 15], center=false);\n        }\n    }\n    // temple tip rubber\n    color(\"DimGray\")\n        translate([len-8,0,-8])\n            scale([1,0.8,1.2])\n                sphere(r=frame_th+1.2);\n}\n\nmodule nose_pad() {\n    color(\"SlateGray\")\n        rotate([0,-20,0])\n            scale([1,0.4,1])\n                sphere(r=6);\n}\n\n// Main assembly\nunion() {\n    // Front frame\n    color(color_frame)\n    difference() {\n        hull() {\n            translate([-65,0,0]) sphere(r=frame_th);\n            translate([ 65,0,0]) sphere(r=frame_th);\n            translate([0,0,35])  sphere(r=frame_th);\n        }\n        // lens cut-outs\n        for(x=[-35,35])\n            translate([x,0,15])\n                scale([1,0.7,1])\n                    cylinder(h=50, d=40, center=true, $fn=60);\n    }\n\n    // Left lens\n    translate([-35,0,15]) lens(38,40,frame_th);\n\n    // Right lens\n    translate([35,0,15]) mirror([1,0,0]) lens(38,40,frame_th);\n\n    // Left temple arm\n    translate([-65,0,0]) rotate([0,90,0]) temple_arm(140);\n\n    // Right temple arm\n    translate([65,0,0]) mirror([1,0,0]) rotate([0,90,0]) temple_arm(140);\n\n    // Nose pads\n    for(x=[-12,12])\n        translate([x,-frame_th-2,26]) nose_pad();\n\n    // Hinge detail\n    for(side=[-1,1])\n        translate([side*65,0,0])\n            rotate([0,90,0])\n                cylinder(h=frame_th*2, d=frame_th*4, center=true);\n\n    // Micro OLED modules\n    translate([-35,0,15]) micro_display();\n    translate([35,0,15])  mirror([1,0,0]) micro_display();\n\n    // Status LED on right temple\n    color(\"Cyan\")\n        translate([65+frame_th+1, 0, -8])\n            sphere(r=1.2);\n\n    // USB-C charging port\n    color(color_tech)\n        translate([65+frame_th+2, -frame_th-1, -2])\n            cube([4,2,6], center=true);\n}",
    "renders": true
  },
  {
    "electronic_device": "headset",
    "openscad_code": "// Realistic VR-style headset – medium complexity, 3D-printable\n// Overall printable footprint ≈ 85 mm wide × 45 mm tall × 50 mm deep\n\n// Wall thickness for FDM printing\nwall = 1.6;\n\nmodule roundedBox(w,d,h,r)\n{\n    hull()\n    {\n        translate([r,r,0]) cylinder(h=h,r=r,$fn=16);\n        translate([w-r,r,0]) cylinder(h=h,r=r,$fn=16);\n        translate([r,d-r,0]) cylinder(h=h,r=r,$fn=16);\n        translate([w-r,d-r,0]) cylinder(h=h,r=r,$fn=16);\n    }\n}\n\nmodule mainBody()\n{\n    difference()\n    {\n        color(\"dimgray\")\n        roundedBox(80,40,35,8);\n        \n        // Front cavity for face\n        translate([5,wall,wall]) roundedBox(70-2*wall,40-2*wall,35-2*wall,5);\n        \n        // Lens cutouts\n        for(x=[-25,25])\n            translate([x+40,20,15]) rotate([90,0,0])\n                cylinder(h=20,d=30,$fn=32);\n    }\n}\n\nmodule headband()\n{\n    color(\"black\")\n    difference()\n    {\n        // Arc\n        rotate([90,0,0])\n            translate([-5,0,0])\n                cylinder(h=90,d=12,$fn=24);\n        // Remove underside for printability\n        translate([-10,-10,-1]) cube([110,20,7]);\n    }\n}\n\nmodule strapClip(x)\n{\n    translate([x,0,0])\n    {\n        color(\"silver\")\n        difference()\n        {\n            rotate([90,0,0])\n                cylinder(h=8,d=12,$fn=16);\n            translate([-5,-1,-1]) cube([10,14,10]);\n        }\n    }\n}\n\nmodule button(x,y,z)\n{\n    translate([x,y,z])\n    {\n        color(\"red\")\n        cylinder(h=2,d=6,$fn=16);\n    }\n}\n\nmodule usbPort(x)\n{\n    translate([x,38,15])\n    {\n        color(\"black\")\n        cube([12,5,6]);\n    }\n}\n\nmodule ledIndicator(x)\n{\n    translate([x,40,25])\n    {\n        color(\"blue\")\n        sphere(d=3,$fn=12);\n    }\n}\n\nmodule facePad()\n{\n    color(\"darkgray\")\n    difference()\n    {\n        translate([0,0,2])\n            roundedBox(78,38,8,6);\n        translate([5,wall,2])\n            roundedBox(78-2*wall,38-2*wall,8,4);\n    }\n}\n\nmodule logo()\n{\n    translate([40,20,34])\n    {\n        color(\"white\")\n        linear_extrude(height=0.5)\n            text(\"VR-X\",size=6,halign=\"center\",valign=\"center\");\n    }\n}\n\n// Assembly\nheadband();\ntranslate([0,0,20]) mainBody();\ntranslate([0,0,12]) facePad();\nstrapClip(5);\nstrapClip(75);\nbutton(10,35,30);\nbutton(70,35,30);\nusbPort(40);\nledIndicator(60);\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "hub",
    "openscad_code": "// USB-C Hub with 4 ports and activity LEDs\n// Overall dimensions: 80mm x 40mm x 18mm\n\n// Main case dimensions\ncase_w = 80;\ncase_d = 40;\ncase_h = 18;\nwall = 2;\n\n// Port details\nport_w = 8;\nport_h = 3.5;\nport_depth = 10;\nport_spacing = 12;\n\n// LED indicators\nled_r = 1.5;\nled_spacing = 8;\n\n// Color definitions\ncolor_case = [0.2, 0.2, 0.2];\ncolor_ports = [0.1, 0.1, 0.1];\ncolor_led_on = [0, 1, 0];\ncolor_led_off = [0, 0.3, 0];\ncolor_logo = [0.8, 0.8, 0.8];\n\n// Main case with rounded edges\nmodule main_case() {\n    color(color_case)\n    difference() {\n        // Main body with rounded top\n        hull() {\n            translate([wall, wall, 0]) cube([case_w-2*wall, case_d-2*wall, case_h]);\n            translate([case_w/2, case_d/2, case_h+2]) sphere(d=case_w-10);\n        }\n        \n        // Hollow out interior\n        translate([wall, wall, wall]) cube([case_w-2*wall, case_d-2*wall, case_h+2]);\n        \n        // Port cutouts - front\n        for(i = [0:3]) {\n            translate([case_w-10-i*port_spacing, case_d/2-port_h/2, -1]) \n                cube([port_w, port_h, port_depth+1]);\n        }\n        \n        // LED holes - front\n        for(i = [0:3]) {\n            translate([case_w-10-i*port_spacing, case_d/2+port_h/2+led_spacing, case_h/2]) \n                cylinder(h=2, r=led_r);\n        }\n        \n        // Cable entry - back\n        translate([10, case_d/2-port_h/2, -1]) \n            cube([port_w, port_h, port_depth+1]);\n    }\n}\n\n// USB-C port module\nmodule usb_c_port() {\n    color(color_ports)\n    difference() {\n        // Port housing\n        translate([0, 0, 0]) cube([port_w, port_h, port_depth]);\n        \n        // Inner cavity\n        translate([1, 1, -1]) cube([port_w-2, port_h-2, port_depth+2]);\n        \n        // Tongue\n        translate([port_w/2-0.5, port_h/2-0.25, port_depth-2]) \n            cube([1, 0.5, 1.5]);\n    }\n}\n\n// LED indicator\nmodule led_indicator(on=true) {\n    color(on ? color_led_on : color_led_off)\n    translate([0, 0, -1]) cylinder(h=2, r=led_r);\n}\n\n// Logo text (simplified)\nmodule logo() {\n    color(color_logo)\n    translate([case_w/2-3, case_d/2-3, case_h-0.1]) \n        linear_extrude(0.5) text(\"USB\", size=6);\n}\n\n// Assembly\nmain_case();\n\n// Front ports\nfor(i = [0:3]) {\n    translate([case_w-10-i*port_spacing-port_w, case_d/2-port_h/2, 0]) \n        usb_c_port();\n}\n\n// Back port (upstream)\ntranslate([10, case_d/2-port_h/2, 0]) \n    mirror([1,0,0]) usb_c_port();\n\n// LED indicators\nfor(i = [0:3]) {\n    translate([case_w-10-i*port_spacing, case_d/2+port_h/2+led_spacing, case_h/2-1]) \n        led_indicator(i%2==0);\n}\n\n// Add logo\nlogo();\n\n// Small feet for stability\nmodule foot() {\n    color(color_case)\n    cylinder(h=1, r=3);\n}\n\n// Four feet\ntranslate([5, 5, 0]) foot();\ntranslate([case_w-5, 5, 0]) foot();\ntranslate([5, case_d-5, 0]) foot();\ntranslate([case_w-5, case_d-5, 0]) foot();",
    "renders": true
  },
  {
    "electronic_device": "router",
    "openscad_code": "// Realistic Router Model - Medium Complexity\n// Dimensions: 120x90x30mm\n\n// Color definitions\ncolor_body = \"dimgray\";\ncolor_antenna = \"black\";\ncolor_led = \"red\";\ncolor_ports = \"silver\";\n\n// Main body\nmodule router_body() {\n    color(color_body)\n    difference() {\n        // Main enclosure\n        cube([120, 90, 30], center=true);\n        \n        // Front bevel\n        translate([0, 0, -14])\n        cube([110, 80, 5], center=true);\n        \n        // Ventilation slots on top\n        for(x = [-50:10:50]) {\n            translate([x, 0, 14])\n            cube([8, 85, 2], center=true);\n        }\n    }\n}\n\n// Antenna module\nmodule antenna(angle) {\n    rotate([0, angle, 0])\n    translate([60, 0, 15])\n    color(color_antenna)\n    union() {\n        // Antenna base\n        cylinder(h=5, r=5, center=true);\n        \n        // Antenna rod\n        translate([0, 0, 10])\n        rotate([90, 0, 0])\n        cylinder(h=30, r=1.5, center=false);\n    }\n}\n\n// LED indicators\nmodule leds() {\n    for(pos = [-40, -20, 0, 20, 40]) {\n        translate([pos, 40, 15])\n        color(color_led)\n        sphere(r=1.5);\n    }\n}\n\n// Ethernet ports\nmodule ethernet_ports() {\n    color(color_ports)\n    for(i = [0:3]) {\n        translate([-45 + i*15, -40, 0])\n        difference() {\n            cube([10, 8, 8], center=true);\n            translate([0, -4, 0])\n            cube([8, 2, 6], center=true);\n        }\n    }\n}\n\n// Power port\nmodule power_port() {\n    color(color_ports)\n    translate([45, -40, 0])\n    difference() {\n        cube([12, 8, 8], center=true);\n        translate([0, -4, 0])\n        cylinder(h=2, r=4, center=true);\n    }\n}\n\n// Reset button\nmodule reset_button() {\n    color(\"darkred\")\n    translate([0, -40, -10])\n    cylinder(h=3, r=2, center=true);\n}\n\n// Brand label area\nmodule brand_label() {\n    translate([0, 0, 15.5])\n    color(\"lightgray\")\n    cube([40, 15, 1], center=true);\n}\n\n// Main assembly\nunion() {\n    router_body();\n    leds();\n    ethernet_ports();\n    power_port();\n    reset_button();\n    brand_label();\n    \n    // Two antennas at different angles\n    antenna(30);\n    translate([0, 20, 0])\n    antenna(-30);\n}",
    "renders": true
  },
  {
    "electronic_device": "switch",
    "openscad_code": "// Realistic 3D printable light switch module\n// Overall dimensions: 54mm x 54mm x 34mm\n\n// Color constants\n$fn = 50;\n\n// Main housing module\nmodule housing() {\n    difference() {\n        // Main body\n        color(\"ivory\") cube([54, 54, 34], center=true);\n        \n        // Mounting box cavity\n        color(\"ivory\") translate([0, 0, 5]) cube([48, 48, 28], center=true);\n        \n        // Screw holes for mounting\n        for (x = [-21, 21])\n            for (y = [-21, 21])\n                translate([x, y, 0]) cylinder(h=40, d=3.5, center=true);\n    }\n}\n\n// Switch paddle module\nmodule paddle() {\n    // Pivot axis\n    translate([0, 0, 10]) rotate([90, 0, 0]) cylinder(h=50, d=3, center=true);\n    \n    // Upper paddle\n    translate([0, 0, 27]) rotate([15, 0, 0]) {\n        // Main paddle body\n        color(\"white\") cube([36, 22, 4], center=true);\n        \n        // Indicator ridge\n        color(\"ivory\") translate([0, 0, 2.1]) cube([30, 18, 0.5], center=true);\n    }\n    \n    // Lower paddle\n    translate([0, 0, 13]) rotate([-15, 0, 0]) {\n        color(\"white\") cube([36, 22, 4], center=true);\n        color(\"ivory\") translate([0, 0, 2.1]) cube([30, 18, 0.5], center=true);\n    }\n}\n\n// Screws for faceplate\nmodule screws() {\n    color(\"silver\") {\n        for (x = [-24, 24])\n            for (y = [-24, 24])\n                translate([x, y, 17]) cylinder(h=4, d=6, $fn=6);\n    }\n}\n\n// Faceplate\nmodule faceplate() {\n    difference() {\n        // Main plate\n        color(\"ivory\") translate([0, 0, 19]) cube([60, 60, 2], center=true);\n        \n        // Opening for switch\n        translate([0, 0, 20]) cube([40, 26, 4], center=true);\n    }\n}\n\n// LED indicator\nmodule indicator() {\n    color(\"red\") translate([20, 0, 19.5]) cylinder(h=1.5, d=4);\n}\n\n// Terminal screws\nmodule terminals() {\n    color(\"brass\") {\n        for (i = [-1:1]) {\n            translate([0, i*10, -15]) {\n                cube([6, 4, 8], center=true);\n                translate([0, 0, 4.5]) cylinder(h=4, d=3, $fn=8);\n            }\n        }\n    }\n}\n\n// Ground screw\nmodule ground_screw() {\n    color(\"silver\") translate([0, 0, -15]) {\n        cube([8, 4, 4], center=true);\n        translate([0, 0, 2.5]) cylinder(h=4, d=4, $fn=8);\n    }\n}\n\n// Assembly\nhousing();\npaddle();\nfaceplate();\nscrews();\nindicator();\ntranslate([0, 0, 0]) terminals();\ntranslate([0, 24, 0]) ground_screw();",
    "renders": true
  },
  {
    "electronic_device": "bridge",
    "openscad_code": "// Bridge Electronic Device - Ethernet Switch\n// Realistic style, medium complexity\n\n// Overall dimensions (mm)\nswitch_length = 80;\nswitch_width = 50;\nswitch_height = 20;\nwall_thickness = 1.5;\n\n// Colors\ncolor_case = [0.15, 0.15, 0.15];\ncolor_ports = [0.8, 0.8, 0.8];\ncolor_leds = [0.1, 0.9, 0.1];\ncolor_label = [0.9, 0.9, 0.9];\ncolor_screen = [0.05, 0.05, 0.05];\n\n// Main case\nmodule main_case() {\n    color(color_case) difference() {\n        // Outer shell\n        cube([switch_length, switch_width, switch_height], center=true);\n        \n        // Hollow out inside\n        translate([0, 0, -wall_thickness/2])\n            cube([switch_length-wall_thickness*2, switch_width-wall_thickness*2, switch_height-wall_thickness], center=true);\n        \n        // Ventilation slots on top\n        for (i = [-35:10:35]) {\n            translate([i, 0, switch_height/2-0.1])\n                cube([8, switch_width-10, 1]);\n        }\n        \n        // Label recess\n        translate([0, switch_width/2-8, switch_height/2-2])\n            cube([40, 15, 1], center=true);\n    }\n}\n\n// Ethernet port\nmodule ethernet_port(x_pos) {\n    translate([x_pos, -switch_width/2+5, 0]) {\n        color(color_ports) {\n            // Port housing\n            cube([12, 8, 10], center=true);\n            \n            // Port opening\n            difference() {\n                cube([10, 6, 8], center=true);\n                translate([0, 2, 0])\n                    cube([8, 4, 6], center=true);\n            }\n            \n            // LED hole\n            translate([0, -3.5, 4])\n                rotate([90, 0, 0])\n                    cylinder(h=1, d=2, $fn=16);\n        }\n        \n        // LED\n        translate([0, -3.5, 4])\n            color(color_leds)\n                sphere(d=1.5, $fn=16);\n    }\n}\n\n// Power connector\nmodule power_connector() {\n    translate([switch_length/2-7, 0, 0]) {\n        color(color_ports)\n            difference() {\n                cube([10, 10, 6], center=true);\n                translate([0, 0, 0])\n                    cube([6, 6, 8], center=true);\n            }\n    }\n}\n\n// Reset button\nmodule reset_button() {\n    translate([switch_length/2-15, switch_width/2-8, switch_height/2-2]) {\n        color(color_ports)\n            cylinder(h=2, d=4, center=true, $fn=20);\n    }\n}\n\n// Activity LEDs strip\nmodule activity_leds() {\n    translate([0, 0, switch_height/2-1]) {\n        color(color_screen)\n            cube([switch_length-20, 3, 0.5], center=true);\n        \n        for (i = [-30:8:30]) {\n            translate([i, 0, 0.3])\n                color(color_leds)\n                    sphere(d=1, $fn=16);\n        }\n    }\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    for (x = [-30, 30])\n        for (y = [-20, 20]) {\n            translate([x, y, -switch_height/2-1])\n                color([0.1, 0.1, 0.1])\n                    cylinder(h=2, d=5, $fn=20);\n        }\n}\n\n// Label text area\nmodule label() {\n    translate([0, switch_width/2-8, switch_height/2-1]) {\n        color(color_label)\n            cube([38, 13, 0.5], center=true);\n    }\n}\n\n// Assemble the switch\nmain_case();\n\n// Add 8 ethernet ports\nfor (i = [-30:8:26]) {\n    ethernet_port(i);\n}\n\npower_connector();\nreset_button();\nactivity_leds();\nlabel();\nrubber_feet();",
    "renders": true
  },
  {
    "electronic_device": "repeater",
    "openscad_code": "// Wi-Fi Repeater / Range Extender\n// Realistic style, medium complexity\n// Overall size: 60 x 110 x 45 mm\n\n// Colors\ncolor_body   = [0.15,0.15,0.15];  // dark matte plastic\ncolor_face   = [0.2,0.2,0.2];     // slightly lighter front\ncolor_ports  = [0.1,0.1,0.1];     // black inserts\ncolor_led    = [0,1,0];           // green status\ncolor_ant    = [0.3,0.3,0.3];     // antenna grey\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        union() {\n            // Main box with rounded edges\n            hull() {\n                translate([-27,-52,-20]) sphere(d=4);\n                translate([27,-52,-20]) sphere(d=4);\n                translate([27,52,-20]) sphere(d=4);\n                translate([-27,52,-20]) sphere(d=4);\n                translate([-27,-52,20]) sphere(d=4);\n                translate([27,-52,20]) sphere(d=4);\n                translate([27,52,20]) sphere(d=4);\n                translate([-27,52,20]) sphere(d=4);\n            }\n        }\n        \n        // Ventilation slots on top\n        for(y=[-40:10:40])\n            translate([0,y,20.1])\n                cube([50,8,2],center=true);\n                \n        // Ventilation slots on bottom\n        for(y=[-40:10:40])\n            translate([0,y,-20.1])\n                cube([50,8,2],center=true);\n                \n        // Screw holes\n        for(pos=[[-22,-45,-20],[22,-45,-20],[-22,45,-20],[22,45,-20]])\n            translate(pos)\n                cylinder(h=5,d=4,$fn=6);\n    }\n}\n\n// Front face with details\nmodule front_face() {\n    color(color_face)\n    difference() {\n        translate([0,0,0])\n            cube([54,104,40],center=true);\n            \n        // Status LEDs\n        translate([-15,40,21])\n            cube([8,2,2],center=true);\n        translate([0,40,21])\n            cube([8,2,2],center=true);\n        translate([15,40,21])\n            cube([8,2,2],center=true);\n            \n        // WPS button\n        translate([20,-40,21])\n            cube([10,8,2],center=true);\n    }\n    \n    // LED indicators\n    translate([-15,40,22.1])\n        color(color_led) sphere(d=1.5);\n    translate([0,40,22.1])\n        color([0,0.5,1]) sphere(d=1.5);\n    translate([15,40,22.1])\n        color([1,0.2,0]) sphere(d=1.5);\n        \n    // WPS button label\n    translate([20,-40,22.1])\n        color([0.8,0.8,0.8]) cube([8,6,0.5],center=true);\n}\n\n// Ethernet port\nmodule ethernet_port(x,y,z) {\n    color(color_ports)\n    difference() {\n        translate([x,y,z])\n            cube([14,16,8],center=true);\n        translate([x,y,z+1])\n            cube([12,14,8],center=true);\n    }\n}\n\n// Power connector\nmodule power_jack(x,y,z) {\n    color(color_ports)\n    difference() {\n        cylinder(h=10,d=12,center=true);\n        translate([0,0,5.1])\n            cylinder(h=2,d=6,center=true);\n    }\n}\n\n// Antenna\nmodule antenna(left_right) {\n    translate([left_right*25,55,10]) {\n        rotate([0,left_right*20,0]) {\n            color(color_ant) {\n                // Antenna base\n                cylinder(h=8,d=12);\n                translate([0,0,8])\n                    cylinder(h=5,d=8);\n                    \n                // Antenna rod\n                translate([0,0,13])\n                    rotate([0,-left_right*20,0])\n                        cylinder(h=35,d=3);\n                        \n                // Antenna tip\n                translate([0,0,48])\n                    rotate([0,-left_right*20,0])\n                        sphere(d=4);\n            }\n        }\n    }\n}\n\n// Assembly\ncolor(color_body) body();\ncolor(color_face) front_face();\n\n// Ports on the back\nethernet_port(0,55,0);\nethernet_port(0,40,0);\ntranslate([0,25,0]) rotate([90,0,0]) power_jack(0,0,0);\n\n// Antennas\nantenna(1);\nantenna(-1);\n\n// Reset button\ntranslate([20,55,0])\n    color(color_ports)\n    cylinder(h=3,d=6);",
    "renders": true
  },
  {
    "electronic_device": "accesspoint",
    "openscad_code": "// Realistic Medium-Complexity Wi-Fi Access Point (AP)\n// Overall size ~90 mm × 90 mm × 30 mm\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer rounded box\n        minkowski() {\n            cube([90, 90, 30], center = true);\n            sphere(3);\n        }\n        // Hollow it out\n        translate([0, 0, 1])\n            cube([90 - 2*wall, 90 - 2*wall, 30 - wall], center = true);\n    }\n}\n\n// Ventilation grill pattern\nmodule vents() {\n    color(\"gray20\")\n    for (i = [-40:5:40]) {\n        translate([i, 44, 0])\n            cube([3, 2, 28], center = true);\n    }\n}\n\n// LED indicators\nmodule leds() {\n    color(\"red\")\n    translate([-30, -44, 8])\n        sphere(2);\n    color(\"green\")\n    translate([-20, -44, 8])\n        sphere(2);\n    color(\"blue\")\n    translate([-10, -44, 8])\n        sphere(2);\n}\n\n// Ethernet ports\nmodule ports() {\n    color(\"black\")\n    for (i = [0:1:3]) {\n        translate([35 - i*12, 44, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d = 6, $fn = 20);\n    }\n}\n\n// Reset button\nmodule reset_button() {\n    color(\"red\")\n    translate([30, -44, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 3, d = 4, $fn = 20);\n}\n\n// Antenna mount points\nmodule antenna_mounts() {\n    for (a = [0:1:3]) {\n        rotate([0, 0, a*90])\n            translate([45, 0, 0])\n                cylinder(h = 8, d = 6, center = true, $fn = 20);\n    }\n}\n\n// Antenna (simple cylinder rotated out)\nmodule antenna() {\n    color(\"black\")\n    rotate([-45, 0, 0])\n        cylinder(h = 40, d = 3, center = true);\n}\n\n// Logo plate\nmodule logo() {\n    color(\"white\")\n    translate([0, 0, 15.2])\n        cube([20, 6, 0.5], center = true);\n}\n\n// Assemble the complete access point\nunion() {\n    color(\"gray60\") body();\n    vents();\n    leds();\n    ports();\n    reset_button();\n    antenna_mounts();\n    for (a = [0:1:3]) {\n        rotate([0, 0, a*90])\n            translate([45, 0, 8])\n                antenna();\n    }\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "firewall",
    "openscad_code": "// OpenSCAD Firewall Electronic Device\n// Medium complexity, realistic style\n\n// Overall dimensions\ndevice_w = 80;\ndevice_h = 30;\ndevice_d = 100;\n\n// Wall thickness\nwall_t = 2;\n\n// Colors\ncolor_case = [0.2, 0.2, 0.2];\ncolor_front = [0.15, 0.15, 0.15];\ncolor_ports = [0.3, 0.3, 0.3];\ncolor_leds = [0, 1, 0];\ncolor_display = [0.05, 0.05, 0.05];\n\n// Main case\nmodule main_case() {\n    difference() {\n        // Outer shell\n        color(color_case)\n        cube([device_w, device_h, device_d], center=true);\n        \n        // Hollow center\n        translate([0, 0, 0])\n        cube([device_w-wall_t*2, device_h-wall_t*2, device_d-wall_t], center=true);\n    }\n}\n\n// Front panel with ports\nmodule front_panel() {\n    translate([0, 0, device_d/2 - wall_t/2]) {\n        difference() {\n            // Front face\n            color(color_front)\n            cube([device_w, device_h, wall_t], center=true);\n            \n            // Port cutouts\n            for(i=[0:3]) {\n                translate([device_w/2 - 15 - i*15, 0, 0])\n                cube([8, 8, wall_t+0.1], center=true);\n            }\n            \n            // LED indicators\n            for(i=[0:4]) {\n                translate([device_w/2 - 30 - i*8, device_h/2 - 3, 0])\n                cylinder(h=wall_t+0.1, r=1.5, center=true);\n            }\n        }\n        \n        // Port connectors\n        for(i=[0:3]) {\n            translate([device_w/2 - 15 - i*15, 0, wall_t/2+0.5])\n            color(color_ports)\n            cube([6, 6, 3], center=true);\n        }\n        \n        // LED housings\n        for(i=[0:4]) {\n            translate([device_w/2 - 30 - i*8, device_h/2 - 3, wall_t/2])\n            color(color_leds)\n            cylinder(h=1, r=1.5, center=true);\n        }\n    }\n}\n\n// Rear panel with power and management ports\nmodule rear_panel() {\n    translate([0, 0, -device_d/2 + wall_t/2]) {\n        difference() {\n            // Rear face\n            color(color_front)\n            cube([device_w, device_h, wall_t], center=true);\n            \n            // Power port\n            translate([device_w/2 - 10, 0, 0])\n            cube([12, 6, wall_t+0.1], center=true);\n            \n            // Management port\n            translate([-device_w/2 + 15, 0, 0])\n            cube([8, 8, wall_t+0.1], center=true);\n            \n            // Ventilation holes\n            for(row=[0:1]) {\n                for(col=[0:4]) {\n                    translate([-device_w/2 + 15 + col*10, -device_h/2 + 5 + row*10, 0])\n                    cylinder(h=wall_t+0.1, r=1.5, center=true);\n                }\n            }\n        }\n        \n        // Power connector\n        translate([device_w/2 - 10, 0, -wall_t/2-1])\n        color(color_ports)\n        cube([10, 4, 2], center=true);\n        \n        // Management port connector\n        translate([-device_w/2 + 15, 0, -wall_t/2-1])\n        color(color_ports)\n        cube([6, 6, 2], center=true);\n    }\n}\n\n// Top display area\nmodule top_display() {\n    translate([0, device_h/2 - wall_t, 0]) {\n        difference() {\n            color(color_display)\n            cube([device_w - 20, 2, 30], center=true);\n            \n            // Status LEDs\n            for(i=[0:2]) {\n                translate([-device_w/3 + i*15, 0, device_d/4])\n                cylinder(h=2.1, r=2, center=true);\n            }\n        }\n        \n        // LED lights\n        for(i=[0:2]) {\n            translate([-device_w/3 + i*15, 0, device_d/4])\n            color([1, 0.3, 0])\n            cylinder(h=1, r=1.5, center=true);\n        }\n    }\n}\n\n// Ventilation slots on sides\nmodule side_ventilation() {\n    for(side=[-1, 1]) {\n        translate([side*(device_w/2 - wall_t/2), 0, 0]) {\n            rotate([0, 90, 0]) {\n                for(i=[0:8]) {\n                    translate([0, -device_h/2 + 5 + i*6, 0])\n                    cube([device_h-10, 1, wall_t], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Mounting brackets\nmodule mounting_brackets() {\n    for(side=[-1, 1]) {\n        translate([side*(device_w/2 + 5), 0, device_d/2 - 10]) {\n            color(color_case)\n            difference() {\n                cube([10, device_h - 10, 5], center=true);\n                cylinder(h=6, r=2, center=true);\n            }\n        }\n    }\n}\n\n// Assemble the firewall\nmain_case();\nfront_panel();\nrear_panel();\ntop_display();\nside_ventilation();\nmounting_brackets();",
    "renders": true
  },
  {
    "electronic_device": "gateway",
    "openscad_code": "// Gateway Electronic Device - Realistic Style, Medium Complexity\n// Dimensions: 120x80x30mm\n\n// Main body dimensions\nbody_w = 120;\nbody_d = 80;\nbody_h = 25;\n\n// Wall thickness for 3D printing\nwall_t = 2;\n\n// Corner radius\ncorner_r = 5;\n\n// Module for rounded cube (main body)\nmodule rounded_cube(size, r, center=false) {\n    [w, d, h] = size;\n    offset = center ? [-w/2, -d/2, -h/2] : [0, 0, 0];\n    \n    translate(offset) {\n        hull() {\n            for (x = [r, w-r])\n                for (y = [r, d-r])\n                    for (z = [r, h-r])\n                        translate([x, y, z]) sphere(r=r);\n        }\n    }\n}\n\n// Main body\nmodule main_body() {\n    difference() {\n        color(\"#2E2E2E\") rounded_cube([body_w, body_d, body_h], corner_r);\n        \n        // Hollow interior\n        translate([wall_t, wall_t, wall_t])\n            rounded_cube([body_w-2*wall_t, body_d-2*wall_t, body_h], corner_r-wall_t);\n    }\n}\n\n// Ventilation slots on top\nmodule vents() {\n    slot_w = 30;\n    slot_d = 2;\n    slot_h = 1;\n    spacing = 5;\n    \n    for (i = [0:4]) {\n        translate([body_w/2 - slot_w/2, 10 + i*(slot_d + spacing), body_h-0.5])\n            color(\"#1A1A1A\") cube([slot_w, slot_d, slot_h]);\n    }\n}\n\n// LED indicators\nmodule leds() {\n    led_r = 2;\n    spacing = 8;\n    \n    for (i = [0:2]) {\n        translate([body_w - 15 - i*spacing, body_d - 8, body_h-0.5])\n            color(\"#00FF00\") cylinder(h=1.5, r=led_r, $fn=16);\n    }\n}\n\n// Ethernet ports\nmodule ethernet_ports() {\n    port_w = 15;\n    port_h = 12;\n    port_d = 8;\n    spacing = 18;\n    \n    for (i = [0:3]) {\n        translate([10 + i*spacing, 0, body_h/2])\n            difference() {\n                color(\"#404040\") cube([port_w, port_d, port_h]);\n                translate([wall_t, port_d-wall_t, wall_t])\n                    cube([port_w-2*wall_t, wall_t, port_h-2*wall_t]);\n            }\n    }\n}\n\n// Power connector\nmodule power_port() {\n    port_r = 5;\n    port_d = 8;\n    \n    translate([body_w/2, 0, body_h/2])\n        difference() {\n            color(\"#404040\") cylinder(h=port_d, r=port_r, $fn=32);\n            cylinder(h=port_d, r=port_r-wall_t, $fn=32);\n        }\n}\n\n// Reset button\nmodule reset_button() {\n    btn_r = 3;\n    \n    translate([body_w - 15, 0, body_h/2])\n        color(\"#FF0000\") cylinder(h=3, r=btn_r, $fn=16);\n}\n\n// WiFi antenna connectors\nmodule antenna_connectors() {\n    conn_r = 4;\n    conn_h = 5;\n    spacing = 25;\n    \n    for (i = [0:1]) {\n        translate([body_w - 20 + i*spacing, body_d, body_h-10])\n            difference() {\n                color(\"#888888\") cylinder(h=conn_h, r=conn_r, $fn=16);\n                cylinder(h=conn_h, r=conn_r-wall_t, $fn=16);\n            }\n    }\n}\n\n// Status display\nmodule status_display() {\n    screen_w = 40;\n    screen_h = 15;\n    \n    translate([body_w/2 - screen_w/2, body_d - 2, body_h-0.5])\n        color(\"#000080\") cube([screen_w, 1, screen_h]);\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    foot_r = 3;\n    foot_h = 2;\n    \n    for (x = [10, body_w-10])\n        for (y = [10, body_d-10])\n            translate([x, y, -foot_h])\n                color(\"#333333\") cylinder(h=foot_h, r=foot_r, $fn=16);\n}\n\n// Assembly\nmain_body();\ntranslate([0, 0, 0]) vents();\ntranslate([0, 0, 0]) leds();\ntranslate([0, 0, 0]) ethernet_ports();\ntranslate([0, 0, 0]) power_port();\ntranslate([0, 0, 0]) reset_button();\ntranslate([0, 0, 0]) antenna_connectors();\ntranslate([0, 0, 0]) status_display();\nrubber_feet();",
    "renders": true
  },
  {
    "electronic_device": "loadbalancer",
    "openscad_code": "// Load Balancer Electronic Device - Realistic Style\n// Medium Complexity - 3D Printable\n\n// Colors\ncolor_case = \"DimGray\";\ncolor_front = \"Black\";\ncolor_led = \"Lime\";\ncolor_screen = \"Navy\";\ncolor_ports = \"Silver\";\n\n// Dimensions\ncase_w = 80;\ncase_h = 25;\ncase_d = 120;\nwall_t = 2;\n\nmodule case() {\n    color(color_case)\n    difference() {\n        // Main case body\n        cube([case_w, case_d, case_h], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -wall_t/2])\n        cube([case_w-wall_t*2, case_d-wall_t*2, case_h-wall_t], center=true);\n        \n        // Front panel cutout\n        translate([0, case_d/2-0.1, 0])\n        cube([case_w-wall_t*2, wall_t+0.2, case_h-wall_t*2], center=true);\n    }\n}\n\nmodule front_panel() {\n    color(color_front)\n    translate([0, case_d/2-wall_t/2, 0])\n    cube([case_w-wall_t*2, wall_t, case_h-wall_t*2], center=true);\n    \n    // LED indicators\n    for(i = [0:3]) {\n        translate([-case_w/3 + i*15, case_d/2, case_h/4])\n        color(color_led)\n        cylinder(h=wall_t+0.1, r=2, $fn=16);\n    }\n    \n    // Status screen\n    translate([0, case_d/2, -case_h/4])\n    color(color_screen)\n    cube([40, wall_t+0.1, 10], center=true);\n}\n\nmodule ethernet_ports() {\n    // Back panel ports\n    color(color_ports)\n    for(i = [0:3]) {\n        translate([-case_w/3 + i*15, -case_d/2+wall_t/2, case_h/4])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=10, r=6, $fn=30);\n            translate([0, 0, wall_t])\n            cylinder(h=10, r=4.5, $fn=30);\n        }\n    }\n}\n\nmodule power_connector() {\n    // DC power jack\n    color(color_ports)\n    translate([case_w/3, -case_d/2+wall_t/2, -case_h/4])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=8, r=7, $fn=30);\n        translate([0, 0, -1])\n        cylinder(h=10, r=4, $fn=30);\n    }\n}\n\nmodule ventilation_holes() {\n    // Side ventilation slots\n    color(color_case)\n    for(i = [-2:2]) {\n        translate([case_w/2-0.1, i*20, 0])\n        cube([wall_t+0.2, 8, 3]);\n    }\n    \n    mirror([1, 0, 0])\n    for(i = [-2:2]) {\n        translate([case_w/2-0.1, i*20, 0])\n        cube([wall_t+0.2, 8, 3]);\n    }\n}\n\nmodule reset_button() {\n    // Reset button on front\n    color(\"Red\")\n    translate([case_w/3, case_d/2, 0])\n    cylinder(h=wall_t+0.2, r=3, $fn=16);\n}\n\nmodule mounting_feet() {\n    // Rubber feet\n    color(\"Black\")\n    for(x = [-case_w/3:case_w/3]) {\n        for(y = [-case_d/3:case_d/3]) {\n            translate([x, y, -case_h/2+1])\n            cylinder(h=2, r=3, $fn=16);\n        }\n    }\n}\n\n// Assembly\ncase();\nfront_panel();\nethernet_ports();\npower_connector();\nventilation_holes();\nreset_button();\nmounting_feet();",
    "renders": true
  },
  {
    "electronic_device": "storagearray",
    "openscad_code": "// Storage Array Electronic Device - Medium Complexity\n// 3D printable model with realistic features\n\n// Base dimensions\ndevice_length = 90;\ndevice_width = 60;\ndevice_height = 25;\nwall_thickness = 2;\n\n// HDD bay modules\nmodule hdd_bay(x, y) {\n    color(\"silver\") {\n        // HDD tray\n        translate([x, y, 2]) cube([12, 8, 3]);\n        \n        // HDD label area\n        color(\"black\") translate([x+1, y+1, 5.1]) cube([10, 6, 0.1]);\n        \n        // LED indicator\n        color(\"red\") translate([x+10, y+6.5, 5]) cylinder(h=0.5, d=1);\n    }\n}\n\n// Main chassis\ncolor(\"darkgray\") difference() {\n    // Main body\n    cube([device_length, device_width, device_height]);\n    \n    // Front ventilation slots\n    for (i = [0:4:40]) {\n        translate([i+5, 0, 10]) cube([3, 2, 5]);\n    }\n    \n    // Rear ventilation slots\n    for (i = [0:4:40]) {\n        translate([i+5, device_width-2, 10]) cube([3, 2, 5]);\n    }\n}\n\n// Front bezel\ncolor(\"black\") translate([0, 0, device_height]) cube([device_length, device_width, 3]);\n\n// LCD display\ncolor(\"lightgray\") translate([device_length/2-15, device_width/2-10, device_height+3.1]) cube([30, 20, 0.5]);\n\n// Control buttons\nfor (i = [0:3]) {\n    color(\"darkblue\") translate([device_length/2-20 + i*10, device_width-5, device_height+3.1]) \n        cylinder(h=1, d=3);\n}\n\n// Power button\ncolor(\"red\") translate([device_length-15, device_width/2, device_height+3.1]) \n    cylinder(h=1, d=5);\n\n// Ethernet ports\nfor (i = [0:3]) {\n    color(\"yellow\") translate([device_length-15, 10 + i*10, 5]) \n        cube([10, 8, 8]);\n}\n\n// USB ports\nfor (i = [0:1]) {\n    color(\"blue\") translate([device_length-15, 45 + i*10, 5]) \n        cube([8, 6, 4]);\n}\n\n// HDD bays (8 bays in 2 rows)\nfor (x = [0:3]) {\n    for (y = [0:1]) {\n        hdd_bay(5 + x*20, 10 + y*30);\n    }\n}\n\n// Cooling fans\nfor (i = [0:1]) {\n    color(\"gray\") translate([device_length/2-10 + i*20, device_width-4, 15]) \n        difference() {\n            cylinder(h=3, d=15);\n            for (a = [0:45:315]) {\n                rotate([0, 0, a]) translate([0, 3, 0]) cube([2, 9, 3.1]);\n            }\n        }\n}\n\n// Status LEDs\nfor (i = [0:7]) {\n    color(\"green\") translate([10 + i*10, device_width-1, device_height+2]) \n        cylinder(h=2, d=1.5);\n}\n\n// Mounting rails\ncolor(\"silver\") {\n    translate([-2, 5, 10]) cube([2, 50, 5]);\n    translate([device_length, 5, 10]) cube([2, 50, 5]);\n    translate([-2, 5, 0]) cube([device_length+4, 2, 25]);\n    translate([-2, device_width-5, 0]) cube([device_length+4, 2, 25]);\n}\n\n// Brand label\ncolor(\"white\") translate([device_length/2-10, device_width/2-2.5, device_height+3.1]) \n    cube([20, 5, 0.1]);",
    "renders": true
  },
  {
    "electronic_device": "nas",
    "openscad_code": "$fn = 50;\n\n// NAS enclosure body\nmodule nas_body() {\n    difference() {\n        // Main box\n        color(\"silver\")\n        cube([90, 120, 45], center = true);\n        \n        // Front bevel\n        translate([0, 58, 0])\n        rotate([0, 45, 0])\n        cube([100, 20, 50], center = true);\n    }\n}\n\n// Front panel with ports and LEDs\nmodule front_panel() {\n    translate([0, 61, 0])\n    color(\"black\")\n    cube([86, 2, 41], center = true);\n}\n\n// Drive bays (4 bay NAS)\nmodule drive_bays() {\n    for(i = [-1.5, -0.5, 0.5, 1.5]) {\n        translate([i * 20, 61, 0])\n        color(\"black\")\n        cube([16, 1, 35]);\n        \n        // Drive activity LEDs\n        translate([i * 20, 62, 12])\n        color(\"blue\")\n        sphere(1);\n    }\n}\n\n// Power button\nmodule power_button() {\n    translate([35, 62, 12])\n    color(\"green\")\n    cylinder(h = 2, r = 3);\n}\n\n// Ethernet ports (2x)\nmodule ethernet_ports() {\n    for(i = [-1, 1]) {\n        translate([i * 12, -61, -10])\n        color(\"black\")\n        cube([10, 2, 8]);\n        \n        // Port LEDs\n        translate([i * 12, -62, -6])\n        color(\"yellow\")\n        sphere(1);\n    }\n}\n\n// USB ports (2x USB 3.0)\nmodule usb_ports() {\n    for(i = [-1, 1]) {\n        translate([i * 6, -61, 5])\n        color(\"darkblue\")\n        cube([4, 2, 6]);\n    }\n}\n\n// Rear fan grill\nmodule fan_grill() {\n    translate([0, -61, 0])\n    color(\"silver\")\n    difference() {\n        cube([40, 1, 40], center = true);\n        \n        // Fan holes pattern\n        for(x = [-15, -5, 5, 15]) {\n            for(y = [-15, -5, 5, 15]) {\n                translate([x, 0, y])\n                cylinder(h = 2, r = 2);\n            }\n        }\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    for(x = [-35, 35]) {\n        for(y = [-50, 50]) {\n            translate([x, y, -23])\n            color(\"black\")\n            cylinder(h = 3, r = 3);\n        }\n    }\n}\n\n// Ventilation slots on top\nmodule ventilation() {\n    translate([0, 0, 23])\n    for(i = [-4:4]) {\n        translate([i * 10, 0, 0])\n        color(\"silver\")\n        cube([8, 110, 1]);\n    }\n}\n\n// Status LCD screen\nmodule lcd_screen() {\n    translate([0, 61, -15])\n    color(\"darkgray\")\n    cube([30, 0.5, 12], center = true);\n    \n    // Screen display\n    translate([0, 62, -15])\n    color(\"lightblue\")\n    cube([28, 0.1, 10], center = true);\n}\n\n// Brand label\nmodule brand_label() {\n    translate([0, 61, 20])\n    color(\"white\")\n    cube([25, 0.5, 8], center = true);\n}\n\n// Main assembly\nunion() {\n    nas_body();\n    front_panel();\n    drive_bays();\n    power_button();\n    ethernet_ports();\n    usb_ports();\n    fan_grill();\n    feet();\n    ventilation();\n    lcd_screen();\n    brand_label();\n}",
    "renders": true
  },
  {
    "electronic_device": "san",
    "openscad_code": "// SAN (Storage Area Network) Switch\n// Realistic 3D printable model with 8 ports, cooling vents, status LEDs and management port\n\n$fn = 64;\n\n// Main dimensions (mm)\nwidth = 100;\ndepth = 80;\nheight = 22;\nwall = 2;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_ports = [0.1, 0.1, 0.1];\ncolor_leds = [0, 1, 0];\ncolor_mgmt = [0.8, 0.8, 0.8];\n\n// Module for ethernet port\nmodule ethernet_port() {\n    difference() {\n        // Main port housing\n        color(color_ports)\n        translate([0, 0, -1])\n        cube([14, 13, 8], center=true);\n        \n        // Port opening\n        translate([0, 0, 2.5])\n        cube([12, 11, 6], center=true);\n        \n        // LED hole\n        translate([5, 0, 2.5])\n        cylinder(h=3, r=1, center=true);\n    }\n    \n    // LED indicator\n    color(color_leds)\n    translate([5, 0, 3.5])\n    sphere(r=0.8);\n}\n\n// Module for management port\nmodule management_port() {\n    color(color_mgmt)\n    difference() {\n        cube([10, 8, 6], center=true);\n        translate([0, 0, 3])\n        cube([8, 6, 4], center=true);\n    }\n}\n\n// Main body\ndifference() {\n    // Base chassis\n    color(color_body)\n    cube([width, depth, height], center=true);\n    \n    // Top ventilation slots\n    for (x = [-40:10:40]) {\n        translate([x, 0, height/2 - 0.5])\n        cube([8, depth - 10, 1]);\n    }\n    \n    // Side ventilation holes\n    for (y = [-30:10:30]) {\n        translate([width/2 - 0.5, y, 0])\n        cube([1, 6, height - 4]);\n    }\n}\n\n// Front panel with ports\ntranslate([0, -depth/2 + 1, 0])\ndifference() {\n    // Front face\n    color(color_body)\n    cube([width - 4, 2, height - 4], center=true);\n    \n    // Port labels\n    for (i = [-3:1:4]) {\n        translate([i * 11, 0, -5])\n        cube([2, 0.5, 2]);\n    }\n}\n\n// 8 ethernet ports on front\nfor (i = [-3.5:1:3.5]) {\n    translate([i * 11, -depth/2 + 1, -2])\n    rotate([90, 0, 0])\n    ethernet_port();\n}\n\n// Management port (right side)\ntranslate([width/2 - 8, -depth/2 + 15, -2])\nrotate([90, 0, 90])\nmanagement_port();\n\n// Power connector (left side)\ntranslate([-width/2 + 8, -depth/2 + 15, -2])\nrotate([90, 0, 90])\ndifference() {\n    color(color_ports)\n    cylinder(h=8, r=4, center=true);\n    cylinder(h=9, r=2.5, center=true);\n}\n\n// Status LEDs on front\ntranslate([-40, -depth/2 + 1, 7])\nfor (i = [0:2]) {\n    color(i == 1 ? [0,1,0] : [1,0,0])\n    translate([i * 10, 0, 0])\n    sphere(r=1.2);\n}\n\n// Rubber feet\nfor (x = [-40, 40])\n    for (y = [-30, 30]) {\n        color([0.1, 0.1, 0.1])\n        translate([x, y, -height/2 - 0.5])\n        cylinder(h=1, r=2.5);\n    }",
    "renders": true
  },
  {
    "electronic_device": "blade",
    "openscad_code": "// Blade Electronic Device - Realistic Style, Medium Complexity\n// A thin, electronic blade device with screen, buttons, and ports\n\n// Overall dimensions\nblade_length = 80;\nblade_width = 12;\nblade_thickness = 3.5;\n\n// Module for the main blade body\nmodule blade_body() {\n    color(\"silver\")\n    difference() {\n        // Main blade shape\n        cube([blade_length, blade_width, blade_thickness], center=true);\n        \n        // Bevel edges for realism\n        translate([blade_length/2-2, 0, 0])\n            rotate([0,90,0])\n            cylinder(h=blade_width+2, r=2, center=true);\n        translate([-blade_length/2+2, 0, 0])\n            rotate([0,90,0])\n            cylinder(h=blade_width+2, r=2, center=true);\n    }\n}\n\n// Module for the display screen\nmodule display_screen() {\n    color(\"black\")\n    translate([0, 0, blade_thickness/2+0.1])\n    cube([blade_length-8, blade_width-4, 0.2], center=true);\n    \n    // Screen bezel\n    color(\"gray20\")\n    translate([0, 0, blade_thickness/2+0.05])\n    cube([blade_length-6, blade_width-2, 0.1], center=true);\n}\n\n// Module for control buttons\nmodule control_buttons() {\n    // Power button\n    color(\"red\")\n    translate([blade_length/2-6, 0, blade_thickness/2+0.1])\n    cylinder(h=0.5, r=1.5, $fn=16);\n    \n    // Volume buttons\n    color(\"darkgray\")\n    for(i=[-1:1]) {\n        translate([blade_length/2-6, i*3, blade_thickness/2+0.1])\n        cube([2, 1.5, 0.5], center=true);\n    }\n}\n\n// Module for USB-C port\nmodule usb_port() {\n    color(\"black\")\n    translate([0, blade_width/2+0.1, 0])\n    cube([6, 1, 1.5], center=true);\n    \n    // Port housing\n    color(\"gray30\")\n    translate([0, blade_width/2+0.05, 0])\n    cube([7, 2, 2], center=true);\n}\n\n// Module for status LEDs\nmodule status_leds() {\n    // Charging LED\n    color(\"green\")\n    translate([-blade_length/2+5, blade_width/2-1, blade_thickness/2+0.1])\n    cylinder(h=0.3, r=0.8, $fn=12);\n    \n    // Activity LED\n    color(\"blue\")\n    translate([-blade_length/2+5, -blade_width/2+1, blade_thickness/2+0.1])\n    cylinder(h=0.3, r=0.8, $fn=12);\n}\n\n// Module for speaker grilles\nmodule speaker_grilles() {\n    color(\"gray40\")\n    for(pos=[-blade_length/4, blade_length/4]) {\n        translate([pos, 0, -blade_thickness/2-0.1])\n        cube([10, blade_width-2, 0.2], center=true);\n        \n        // Grille holes\n        for(i=[-4:4]) {\n            for(j=[-2:2]) {\n                translate([pos+i, j*1.5, -blade_thickness/2-0.05])\n                color(\"black\")\n                cylinder(h=0.3, r=0.3, $fn=8);\n            }\n        }\n    }\n}\n\n// Module for brand logo\nmodule brand_logo() {\n    color(\"white\")\n    translate([0, 0, blade_thickness/2+0.2])\n    linear_extrude(height=0.1)\n    text(\"BLADE\", size=3, halign=\"center\", valign=\"center\");\n}\n\n// Assembly\nblade_body();\ndisplay_screen();\ncontrol_buttons();\nusb_port();\nstatus_leds();\nspeaker_grilles();\nbrand_logo();",
    "renders": true
  },
  {
    "electronic_device": "rackmount",
    "openscad_code": "// 1U Rack-Mount Audio Mixer – medium-complexity realistic style\n// Fully printable, no overhangs, 50 mm front-to-back at 1:10 scale\n\n// overall scale\nscale(10) {\n\n    // 19\" rack width is 48.26 cm → 48.26 mm in 1:10\n    width = 48.26;\n    height = 4.445 * 1;  // 1U\n    depth = 50;\n\n    // front panel plate\n    color(\"silver\")\n    difference() {\n        cube([width, height, 2], center = true);\n        // ventilation slots left\n        for (y = [-1.5, -0.5, 0.5, 1.5])\n            translate([-18, y, 0])\n            cube([8, 0.5, 2.1], center = true);\n        // ventilation slots right\n        for (y = [-1.5, -0.5, 0.5, 1.5])\n            translate([18, y, 0])\n            cube([8, 0.5, 2.1], center = true);\n    }\n\n    // rack ears\n    ear_x = width/2 + 4;\n    ear_thk = 2;\n    color(\"silver\")\n    for (side = [-1, 1])\n        translate([side * ear_x, 0, 0])\n        cube([8, height, ear_thk], center = true);\n\n    // rack ear mounting holes\n    color(\"black\")\n    for (side = [-1, 1])\n        for (y = [-height/4, height/4])\n            translate([side * ear_x, y, 0])\n            cylinder(h = ear_thk + 0.2, r = 1.2, center = true, $fn = 20);\n\n    // main enclosure box\n    color(\"black\")\n    translate([0, 0, -depth/2 - 1])\n    cube([width - 6, height - 1, depth], center = true);\n\n    // top heat vents\n    color(\"black\")\n    for (x = [-20:5:20])\n        translate([x, 0, -1])\n        cube([2, height - 1, 2], center = true);\n\n    // front panel knobs\n    knob_positions = [-20, -14, -8, -2, 2, 8, 14, 20];\n    color(\"darkslategray\")\n    for (x = knob_positions)\n        translate([x, 0, 1.5])\n        cylinder(h = 2, r = 2, center = true, $fn = 20);\n\n    // colored channel gain caps\n    color(\"red\")\n    for (x = [-20, -8, 2, 14])\n        translate([x, 0, 2.5])\n        cylinder(h = 1, r = 1.5, center = true, $fn = 20);\n\n    // small OLED screen\n    color(\"black\")\n    translate([-7, -1.2, 1.5])\n    cube([10, 2, 1], center = true);\n    color(\"cyan\")\n    translate([-7, -1.2, 2.1])\n    cube([9.5, 1.5, 0.2], center = true);\n\n    // LED level meters\n    for (i = [0:3])\n        translate([10 + i*2.5, 0, 1.5])\n        color(\"darkgreen\") cylinder(h = 1, r = 0.8, center = true, $fn = 10);\n\n    // XLR input sockets (left)\n    color(\"silver\")\n    translate([-21, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 3, r1 = 2.5, r2 = 1.8, center = true, $fn = 30);\n    color(\"black\")\n    translate([-21, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 3.2, r = 1.2, center = true, $fn = 20);\n\n    // 6.35 mm jacks (right)\n    for (i = [0:1])\n        translate([21, -1 + i*2, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 3, r = 3.5/2, center = true, $fn = 20);\n    color(\"black\")\n    for (i = [0:1])\n        translate([21, -1 + i*2, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 3.2, r = 3/2, center = true, $fn = 20);\n\n    // rear panel\n    color(\"silver\")\n    translate([0, 0, -depth - 2])\n    cube([width - 6, height - 1, 2], center = true);\n\n    // IEC power inlet\n    color(\"black\")\n    translate([0, 0, -depth - 3])\n    cube([10, 6, 4], center = true);\n    color(\"lightgray\")\n    translate([0, 0, -depth - 1.1])\n    cube([8, 4, 0.5], center = true);\n\n    // USB-B port\n    color(\"black\")\n    translate([-10, 0, -depth - 3])\n    cube([8, 2.5, 4], center = true);\n    color(\"blue\")\n    translate([-10, 0, -depth - 1.1])\n    cube([7, 1.5, 0.5], center = true);\n\n    // rear air vents\n    for (x = [-15:5:15])\n        translate([x, 0, -depth - 3])\n        cube([2, height - 3, 4], center = true);\n}",
    "renders": true
  },
  {
    "electronic_device": "tower",
    "openscad_code": "// Tower computer chassis – OpenSCAD 2024\n// 3D-printable, no overhangs, ~90 mm tall\n// Main body: 40×40×70 mm\n\n$fn = 48;\n\n// Overall color scheme\ncolor(\"silver\") \ndifference() {\n    // Main chassis box\n    translate([0,0,35]) cube([40,40,70], center=true);\n\n    // Front I/O cutout\n    translate([0, -19.9, 35]) cube([20,1,8], center=true);\n\n    // Rear exhaust grid cutouts (horizontal slats)\n    for(z=[55:4:85]) {\n        translate([0, 19.9, z]) cube([40,1,2], center=true);\n    }\n\n    // Side ventilation holes (simple circular)\n    for(y=[-15:10:15]) {\n        for(z=[20:10:60]) {\n            translate([19.9, y, z]) rotate([0,90,0]) cylinder(h=1, d=3);\n            translate([-19.9, y, z]) rotate([0,90,0]) cylinder(h=1, d=3);\n        }\n    }\n}\n\n// Front bezel with ports and LEDs\nmodule frontBezel() {\n    color(\"black\") \n    translate([0, -20, 35]) cube([40,2,70], center=true);\n    // USB-A ports\n    color(\"darkslategray\")\n    for(x=[-12, -6, 0, 6, 12]) {\n        translate([x, -19.9, 30]) rotate([90,0,0]) cylinder(h=2, d=7);\n    }\n    // Power LED\n    color(\"lime\") translate([0,-19.9,45]) sphere(d=3);\n}\nfrontBezel();\n\n// Top exhaust fan grille\nmodule topFan() {\n    color(\"dimgray\")\n    translate([0,0,70.5]) difference() {\n        cylinder(h=2, d=35);        // fan shroud\n        for(a=[0:30:150]) {\n            rotate([0,0,a])\n                translate([0,0,-1]) cube([30,2,4], center=true);\n        }\n    }\n}\ntopFan();\n\n// Feet – simple tapered cylinders\nmodule feet() {\n    color(\"black\")\n    for(x=[-15,15]) for(y=[-15,15]) {\n        translate([x,y,-2])\n            cylinder(h=4, d1=8, d2=6, center=false);\n    }\n}\nfeet();\n\n// Rear I/O shield outline\ncolor(\"darkgray\")\ntranslate([0,20,50]) cube([40,2,35], center=true);\n\n// Side window (optional aesthetic)\ncolor([0.2,0.2,0.3,0.5])\ntranslate([0,0,35]) cube([38,1,65], center=true);",
    "renders": true
  },
  {
    "electronic_device": "cluster",
    "openscad_code": "// OpenSCAD Cluster Node (Medium Complexity Realistic)\n// A 4-node mini cluster with front I/O, fans, and stackable frame\n// 80 mm x 80 mm x 130 mm – printable on most FDM printers\n\n// Color constants\nframe_col   = [0.25,0.25,0.25];   // dark grey aluminium\npanel_col   = [0.10,0.10,0.10];   // matte black steel\nled_col     = [0,1,0];            // power LED green\nfan_col     = [0.15,0.15,0.15];   // injection-molded plastic\npcb_col     = [0.1,0.6,0.1];      // green PCB\n\n$fn = 32;\n\n// ---- Main assembly ----\nunion() {\n    difference() {\n        // Frame rails\n        color(frame_col) frame();\n        \n        // Front I/O cut-outs\n        translate([0, -40.5, 60]) cube([80, 2, 15], center=true);\n    }\n    \n    // Front panel with details\n    color(panel_col) front_panel();\n    \n    // Four node trays\n    for(z=[-45, -15, 15, 45])\n        translate([0,0,z]) color(pcb_col) node_tray();\n    \n    // Top exhaust fan\n    translate([0,0,65]) color(fan_col) fan(40);\n    \n    // Bottom intake fan\n    translate([0,0,-65]) color(fan_col) fan(40);\n    \n    // Power LED\n    translate([30, -40.5, 67]) color(led_col) sphere(d=3);\n}\n\n// ---- Modules ----\n\nmodule frame() {\n    // Outer shell\n    difference() {\n        cube([82,82,130], center=true);\n        cube([78,78,132], center=true);\n    }\n    \n    // Corner posts for stacking\n    for(x=[-38,38])\n        for(y=[-38,38])\n            translate([x,y,0]) cylinder(h=132, d=6, center=true);\n}\n\nmodule front_panel() {\n    difference() {\n        translate([0, -40, 0]) cube([78, 2, 128], center=true);\n        \n        // USB-C ports\n        for(x=[-25,-15,-5,5,15,25])\n            translate([x, -41, 50]) rotate([90,0,0]) cylinder(h=3, d1=8, d2=6);\n        \n        // Gigabit Ethernet\n        translate([-35, -41, 30]) rotate([90,0,0]) cube([12,5,2], center=true);\n        translate([ 35, -41, 30]) rotate([90,0,0]) cube([12,5,2], center=true);\n        \n        // Power button\n        translate([0, -41, 10]) cylinder(h=2, d=10);\n    }\n}\n\nmodule node_tray() {\n    difference() {\n        // PCB outline\n        cube([60,60,1], center=true);\n        \n        // CPU heat spreader\n        translate([0,0,-0.5]) cube([25,25,2], center=true);\n        \n        // RAM SO-DIMM slots\n        for(y=[-20, 20])\n            translate([0,y,0]) cube([40,8,1.5], center=true);\n        \n        // M.2 slot\n        translate([20,0,-0.5]) cube([22,5,2], center=true);\n    }\n    \n    // Heatsink fins\n    translate([0,0,1]) {\n        for(i=[-22:4:22])\n            translate([i,0,0]) cube([1,60,5], center=true);\n    }\n}\n\nmodule fan(d) {\n    difference() {\n        cylinder(h=10, d=d);\n        cylinder(h=11, d=d-8);\n    }\n    \n    // Blades (5 pcs)\n    for(a=[0:72:359])\n        rotate([0,0,a])\n            translate([0,d/4,5])\n                rotate([90,0,0])\n                    difference() {\n                        cylinder(h=d/2, d1=d/4, d2=d/6);\n                        translate([0,0,-1]) cube([d/4,d/4,12], center=true);\n                    }\n}",
    "renders": true
  },
  {
    "electronic_device": "node",
    "openscad_code": "// Node Electronic Device - Realistic Style, Medium Complexity\n// Wireless IoT Sensor Node with OLED Display and Antenna\n\n// Overall dimensions\ndevice_width = 42;\ndevice_height = 20;\ndevice_depth = 60;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5;\n\n// Main body shell\nmodule main_body() {\n    difference() {\n        // Main enclosure\n        color(\"dimgray\")\n        translate([0, 0, device_height/2])\n        rounded_cube([device_width, device_depth, device_height], 3);\n        \n        // Hollow interior\n        translate([0, 0, device_height/2])\n        rounded_cube([device_width - 2*wall_thickness, device_depth - 2*wall_thickness, device_height - wall_thickness], 2);\n        \n        // USB-C port\n        translate([device_width/2 - 6, -device_depth/2, device_height/2])\n        cube([12, 1, 4]);\n        \n        // Ventilation slots on sides\n        for(i = [-1, 1]) {\n            translate([i * device_width/2, 0, device_height/2 + 3])\n            rotate([90, 0, 0])\n            for(y = [-20:5:20]) {\n                translate([0, y, 0])\n                cube([wall_thickness, 3, 1]);\n            }\n        }\n    }\n}\n\n// Helper module for rounded cubes\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(x = [0, 1])\n        for(y = [0, 1])\n        for(z = [0, 1])\n        translate([x * (size[0] - 2*radius), y * (size[1] - 2*radius), z * (size[2] - 2*radius)])\n        sphere(r = radius);\n    }\n}\n\n// OLED Display module\nmodule oled_display() {\n    // Display frame\n    color(\"black\")\n    translate([0, device_depth/2 - 2, device_height - 3])\n    cube([30, 4, 10], center = true);\n    \n    // Screen\n    color(\"darkblue\")\n    translate([0, device_depth/2 - 1.5, device_height - 4])\n    cube([26, 2, 8], center = true);\n    \n    // Screen pixels\n    color(\"cyan\")\n    for(x = [-9:3:9])\n    for(y = [-2:2:2]) {\n        translate([x, device_depth/2 - 1.4, device_height - 4 + y])\n        cube([1.5, 0.2, 1.5]);\n    }\n}\n\n// Status LEDs\nmodule status_leds() {\n    // LED holes\n    for(i = [0:2]) {\n        color(\"black\")\n        translate([-12 + i*12, device_depth/2 - 1, device_height/2 + 5])\n        cylinder(h = 2, r = 2.5);\n        \n        // LED lenses\n        color(i == 1 ? \"red\" : i == 0 ? \"green\" : \"yellow\")\n        translate([-12 + i*12, device_depth/2 - 0.5, device_height/2 + 6])\n        cylinder(h = 1, r = 2);\n    }\n}\n\n// Push button\nmodule button() {\n    // Button housing\n    color(\"gray20\")\n    translate([device_width/2 - 8, 10, device_height/2 + 3])\n    cylinder(h = 4, r = 3);\n    \n    // Actual button\n    color(\"red\")\n    translate([device_width/2 - 8, 10, device_height/2 + 5])\n    cylinder(h = 2, r = 2.5);\n}\n\n// Antenna connector\nmodule antenna_connector() {\n    color(\"silver\")\n    translate([device_width/2 - 5, -device_depth/2 - 3, device_height/2])\n    union() {\n        // SMA connector body\n        cylinder(h = 6, r = 5);\n        \n        // Center pin\n        cylinder(h = 2, r = 1);\n        \n        // Threads\n        translate([0, 0, 6])\n        difference() {\n            cylinder(h = 3, r = 5);\n            cylinder(h = 3.1, r = 4.5);\n        }\n    }\n}\n\n// Mounting holes for PCB standoffs\nmodule mounting_holes() {\n    color(\"black\")\n    for(x = [-device_width/2 + 8, device_width/2 - 8])\n    for(y = [-device_depth/2 + 8, device_depth/2 - 8]) {\n        translate([x, y, device_height/2])\n        cylinder(h = device_height, r = 1.5);\n    }\n}\n\n// PCB visible through ventilation\nmodule pcb_traces() {\n    color(\"darkgreen\")\n    for(i = [-1, 1]) {\n        translate([i * device_width/2 + i*wall_thickness/2, 0, device_height/2 - 5])\n        cube([0.5, device_depth - 16, 0.5]);\n        \n        translate([i * device_width/2 + i*wall_thickness/2, 0, device_height/2 + 2])\n        cube([0.5, device_depth - 16, 0.5]);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    oled_display();\n    status_leds();\n    button();\n    antenna_connector();\n    mounting_holes();\n    \n    // PCB traces visible through vents\n    pcb_traces();\n    \n    // Device label\n    color(\"white\")\n    translate([-device_width/2 + 5, -device_depth/2 + 5, device_height - 0.5])\n    linear_extrude(height = 0.5)\n    text(\"IoT-NODE v2.1\", size = 3, halign = \"left\");\n}",
    "renders": true
  },
  {
    "electronic_device": "datacenter",
    "openscad_code": "// Datacenter 1U Rack-Mount Switch\n// Realistic style, medium complexity\n\n$fa = 2;\n$fs = 0.5;\n\n// Main colors\ncolor_chassis = [0.2, 0.2, 0.2];\ncolor_front = [0.1, 0.1, 0.1];\ncolor_ports = [0.8, 0.8, 0.8];\ncolor_led = [0, 1, 0];\ncolor_lcd = [0.1, 0.1, 0.1];\n\n// Dimensions (1U = 44.45mm height)\nchassis_w = 80;\nchassis_h = 44.45;\nchassis_d = 120;\nwall_thk = 2;\n\n// Main chassis\nmodule chassis() {\n    color(color_chassis)\n    difference() {\n        // Outer shell\n        cube([chassis_w, chassis_d, chassis_h], center=false);\n        \n        // Hollow inside\n        translate([wall_thk, wall_thk, wall_thk])\n            cube([chassis_w-wall_thk*2, chassis_d-wall_thk*2, chassis_h-wall_thk*2], center=false);\n    }\n}\n\n// Front panel with ports and indicators\nmodule front_panel() {\n    color(color_front)\n    translate([0, chassis_d-wall_thk, 0])\n    cube([chassis_w, wall_thk, chassis_h], center=false);\n    \n    // LCD screen\n    translate([chassis_w/2-15, chassis_d-wall_thk+0.1, chassis_h/2+5])\n    color(color_lcd)\n    cube([30, 0.2, 10]);\n    \n    // Status LEDs\n    for(i=[0:7]) {\n        translate([10 + i*8, chassis_d-wall_thk+0.1, 5])\n        color(color_led)\n        cylinder(h=0.5, d=2, center=true);\n    }\n    \n    // Ethernet ports (24 ports)\n    for(row=[0:1]) {\n        for(col=[0:11]) {\n            translate([5 + col*6, chassis_d-wall_thk+0.1, 15 + row*8])\n            color(color_ports)\n            difference() {\n                cube([4, 0.2, 6]);\n                translate([2, -0.1, 3])\n                    cube([3, 0.4, 4], center=true);\n            }\n        }\n    }\n    \n    // Console port\n    translate([chassis_w-15, chassis_d-wall_thk+0.1, 35])\n    color(color_ports)\n    cube([8, 0.2, 6]);\n}\n\n// Ventilation holes on top\nmodule vents() {\n    for(i=[0:9]) {\n        translate([10 + i*6, 10, chassis_h-wall_thk-0.1])\n        cube([3, chassis_d-20, 0.2]);\n    }\n}\n\n// Mounting ears\nmodule mounting_ears() {\n    for(side=[-1,1]) {\n        translate([side*(chassis_w/2+5), chassis_d/2, chassis_h/2])\n        color(color_chassis)\n        cube([10, 15, 20], center=true);\n        \n        // Mounting holes\n        translate([side*(chassis_w/2+5), chassis_d-5, chassis_h/2])\n        rotate([90,0,0])\n        cylinder(h=10, d=3, center=true);\n    }\n}\n\n// Power supply module\nmodule power_supply() {\n    translate([10, 5, 2])\n    color([0.3, 0.3, 0.3])\n    cube([20, 20, 5]);\n    \n    // Power connector\n    translate([20, wall_thk+0.1, 4.5])\n    color([0.1, 0.1, 0.1])\n    cube([4, 0.2, 3]);\n}\n\n// Cooling fans\nmodule fans() {\n    for(pos=[0:1]) {\n        translate([chassis_w-30 + pos*15, 5, 10])\n        color([0.25, 0.25, 0.25])\n        difference() {\n            cylinder(h=5, d=12, center=false);\n            for(i=[0:5]) {\n                rotate([0,0,i*60])\n                translate([6, 0, 2.5])\n                cube([12, 1, 5], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nchassis();\nfront_panel();\nvents();\nmounting_ears();\npower_supply();\nfans();",
    "renders": true
  },
  {
    "electronic_device": "supercomputer",
    "openscad_code": "// OpenSCAD Supercomputer Model\n// Realistic style, medium complexity\n\n// Color definitions\n$fn = 32;\n\n// Main rack frame\nmodule rack_frame() {\n    color(\"darkslategray\")\n    difference() {\n        // Outer frame\n        cube([80, 40, 100], center=true);\n        \n        // Hollow center\n        translate([0, 0, 5])\n        cube([74, 34, 90], center=true);\n    }\n}\n\n// Server blade module\nmodule server_blade(pos) {\n    color(\"silver\")\n    translate([0, 0, pos])\n    union() {\n        // Blade chassis\n        cube([72, 30, 8], center=true);\n        \n        // Front panel with vents\n        translate([0, 15.5, 0])\n        difference() {\n            cube([70, 2, 7], center=true);\n            // Vent holes\n            for(i = [-30:5:30]) {\n                translate([i, 0, 0])\n                cube([3, 3, 7], center=true);\n            }\n        }\n        \n        // LED indicators\n        translate([30, 16, -2.5])\n        color(\"red\") sphere(0.5);\n        translate([30, 16, 0])\n        color(\"green\") sphere(0.5);\n        translate([30, 16, 2.5])\n        color(\"yellow\") sphere(0.5);\n    }\n}\n\n// Cooling fans\nmodule cooling_fans() {\n    color(\"black\")\n    for(pos = [-40, -20, 0, 20, 40]) {\n        translate([0, 0, pos])\n        difference() {\n            cylinder(h=5, r=12, center=true);\n            for(i = [0:45:315]) {\n                rotate([0, 0, i])\n                translate([0, 4, 0])\n                cube([1, 8, 6], center=true);\n            }\n        }\n    }\n}\n\n// Power supply units\nmodule psu() {\n    color(\"darkgray\")\n    translate([0, 0, -45])\n    union() {\n        // PSU housing\n        cube([70, 30, 10], center=true);\n        \n        // Power connectors\n        for(i = [-25:12:25]) {\n            translate([i, 16, -2])\n            color(\"black\")\n            cube([8, 2, 4], center=true);\n        }\n        \n        // Power switch\n        translate([35, 16, 0])\n        color(\"red\")\n        cube([4, 1, 2], center=true);\n    }\n}\n\n// Network ports\nmodule network_ports() {\n    color(\"black\")\n    translate([0, -16, -30])\n    for(i = [-30:8:30]) {\n        translate([i, 0, 0])\n        cube([6, 2, 4], center=true);\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    color(\"darkblue\")\n    translate([0, -15.5, 35])\n    union() {\n        // Panel base\n        cube([60, 2, 15], center=true);\n        \n        // LCD display\n        translate([0, 1.1, 0])\n        color(\"cyan\")\n        cube([40, 0.2, 10], center=true);\n        \n        // Control buttons\n        for(pos = [-20:10:20]) {\n            translate([pos, 1.1, 5])\n            color(\"gray\")\n            cylinder(h=0.5, r=2);\n        }\n    }\n}\n\n// Rack mount ears\nmodule mount_ears() {\n    color(\"silver\")\n    translate([0, 0, 0])\n    union() {\n        // Left ear\n        translate([-41, 0, 0])\n        cube([4, 40, 100], center=true);\n        \n        // Right ear\n        translate([41, 0, 0])\n        cube([4, 40, 100], center=true);\n        \n        // Mounting holes\n        for(z = [-45:10:45]) {\n            translate([-41, 0, z])\n            rotate([90, 0, 0])\n            cylinder(h=5, r=1.5);\n            translate([41, 0, z])\n            rotate([90, 0, 0])\n            cylinder(h=5, r=1.5);\n        }\n    }\n}\n\n// Assemble the supercomputer\nunion() {\n    // Main rack\n    rack_frame();\n    \n    // Server blades\n    for(pos = [-35:10:35]) {\n        server_blade(pos);\n    }\n    \n    // Cooling system\n    cooling_fans();\n    \n    // Power supplies\n    psu();\n    \n    // Network connectivity\n    network_ports();\n    \n    // Control interface\n    control_panel();\n    \n    // Mounting hardware\n    mount_ears();\n}",
    "renders": true
  },
  {
    "electronic_device": "quantumcomputer",
    "openscad_code": "// Quantum Computer 3D Printable Model\n// Medium complexity, realistic style\n\n$fn = 50;\n\n// Main dimensions\nbase_width = 80;\nbase_depth = 60;\nbase_height = 8;\ngoldmane_width = 70;\ngoldmane_height = 45;\ngoldmane_depth = 50;\ndilution_height = 30;\n\n// Colors\ncolor_base = [0.2, 0.2, 0.2];\ncolor_metal = [0.7, 0.7, 0.7];\ncolor_gold = [0.8, 0.6, 0.2];\ncolor_blue = [0.1, 0.3, 0.8];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_led = [0, 1, 0];\n\nmodule base_unit() {\n    // Main base chassis\n    color(color_base)\n    cube([base_width, base_depth, base_height], center=true);\n    \n    // Cooling ports on sides\n    for(side = [-1, 1]) {\n        translate([side * (base_width/2 - 2), 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=2, r=3, center=true);\n    }\n}\n\nmodule goldmane_cage() {\n    // Gold-colored quantum chamber cage\n    color(color_gold)\n    difference() {\n        // Outer frame\n        cube([goldmane_width, goldmane_depth, goldmane_height], center=true);\n        \n        // Hollow center\n        translate([0, 0, -1])\n        cube([goldmane_width-4, goldmane_depth-4, goldmane_height+2], center=true);\n    }\n    \n    // Vertical support bars\n    for(x = [-30, -15, 0, 15, 30]) {\n        for(y = [-20, -10, 0, 10, 20]) {\n            translate([x, y, 0])\n            color(color_metal)\n            cylinder(h=goldmane_height, r=1, center=true);\n        }\n    }\n}\n\nmodule dilution_refrigerator() {\n    // Upper cooling stage\n    color(color_metal)\n    cylinder(h=dilution_height, r=goldmane_width/2 - 5, center=true);\n    \n    // Cooling stages\n    for(i = [1:4]) {\n        translate([0, 0, -dilution_height/2 + i*7])\n        color([0.5, 0.5, 0.5])\n        cylinder(h=2, r=goldmane_width/2 - 5 + i*2, center=true);\n    }\n    \n    // Top plate\n    translate([0, 0, dilution_height/2])\n    color(color_base)\n    cube([goldmane_width, goldmane_depth, 3], center=true);\n}\n\nmodule control_panel() {\n    // Front control interface\n    translate([-base_width/2 - 2, 0, base_height/2 + 5])\n    rotate([0, 90, 0])\n    color(color_base)\n    cube([15, base_depth/1.5, 2], center=true);\n    \n    // Display screen\n    translate([-base_width/2 - 1.5, -5, base_height/2 + 5])\n    rotate([0, 90, 0])\n    color(color_screen)\n    cube([8, 20, 0.5], center=true);\n    \n    // Control buttons\n    for(i = [0:3]) {\n        translate([-base_width/2 - 1, -15 + i*8, base_height/2 + 5])\n        rotate([0, 90, 0])\n        color(color_blue)\n        cylinder(h=2, r=2, center=true);\n    }\n    \n    // Status LEDs\n    for(i = [0:2]) {\n        translate([-base_width/2 - 1, 10 + i*6, base_height/2 + 8])\n        rotate([0, 90, 0])\n        color(color_led)\n        sphere(r=1);\n    }\n}\n\nmodule cable_management() {\n    // Rear cable bundle\n    translate([base_width/2 + 5, 0, 0])\n    for(i = [0:4]) {\n        rotate([0, 90, 0])\n        translate([0, -10 + i*5, 0])\n        color([0.1, 0.1, 0.1])\n        cylinder(h=15, r=1.5, center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base unit\n    base_unit();\n    \n    // Goldmane cage\n    translate([0, 0, base_height/2 + goldmane_height/2])\n    goldmane_cage();\n    \n    // Dilution refrigerator\n    translate([0, 0, base_height/2 + goldmane_height + dilution_height/2])\n    dilution_refrigerator();\n    \n    // Control panel\n    control_panel();\n    \n    // Cable management\n    cable_management();\n    \n    // Side cooling fins\n    for(side = [-1, 1]) {\n        translate([0, side * (base_depth/2 + 3), base_height/2])\n        color(color_metal)\n        for(i = [0:3]) {\n            translate([i*20 - 30, 0, 0])\n            cube([3, 6, 4], center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "embedded",
    "openscad_code": "// Embedded IoT Sensor Node - Realistic Style\n// 3D printable enclosure for ESP32-based environmental sensor\n\n$fn = 64;  // Smooth curves for printing\n\n// Main colors\ncase_color = \"DarkSlateGray\";\naccent_color = \"LightGray\";\nscreen_color = \"Black\";\nled_color = \"Red\";\n\n// Overall dimensions\nlength = 75;\nwidth = 45;\nheight = 20;\nwall_thickness = 2;\n\n// Main enclosure body\nmodule main_body() {\n    union() {\n        // Base shell with rounded edges\n        difference() {\n            // Outer rounded box\n            minkowski() {\n                cube([length, width, height], center = true);\n                sphere(3);\n            }\n            \n            // Inner hollow space\n            translate([0, 0, -1])\n            minkowski() {\n                cube([length - 2*wall_thickness, width - 2*wall_thickness, height - wall_thickness + 2], center = true);\n                sphere(1);\n            }\n        }\n        \n        // Mounting posts for PCB\n        for (x = [-length/2 + 15, length/2 - 15])\n            for (y = [-width/2 + 10, width/2 - 10])\n                translate([x, y, -height/2 + 5])\n                    cylinder(h = 8, r = 2.5);\n    }\n}\n\n// OLED display window\nmodule display_window() {\n    translate([0, width/2 - 8, height/2 - 2])\n        cube([30, 1, 12], center = true);\n}\n\n// Ventilation slots for sensor\nmodule ventilation_slots() {\n    for (i = [-3:3]) {\n        translate([i*8, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 20, r = 1.5);\n    }\n}\n\n// USB-C port opening\nmodule usb_port() {\n    translate([-length/2 + 1, 0, 0])\n        rotate([0, 90, 0])\n            cube([10, 8, 3], center = true);\n}\n\n// Button array\nmodule buttons() {\n    for (i = [0:2]) {\n        translate([length/2 - 12, -width/2 + 8 + i*10, height/2 - 2])\n            cylinder(h = 2, r = 3);\n    }\n}\n\n// LED indicators\nmodule status_leds() {\n    for (i = [0:2]) {\n        translate([length/2 - 8 - i*6, width/2 - 5, height/2 - 1])\n            cylinder(h = 1, r = 1.5);\n    }\n}\n\n// Antenna area\nmodule wifi_antenna() {\n    translate([0, -width/2 + 1, 0])\n        cube([20, 1, 8], center = true);\n}\n\n// Assembly\ncolor(case_color) main_body();\n\ncolor(screen_color) \n    translate([0, width/2 - 8, height/2 - 2])\n        difference() {\n            cube([28, 0.5, 10], center = true);\n            translate([0, 0, -2])\n                cube([26, 1, 8], center = true);\n        }\n\ncolor(accent_color) \n    difference() {\n        translate([0, 0, height/2 - 1])\n            cube([length - 4, width - 4, 2], center = true);\n        \n        // Cut ventilation\n        translate([0, 0, height/2 - 1])\n            ventilation_slots();\n        \n        // Cut USB port\n        translate([-length/2 + 2, 0, 0])\n            cube([6, 8, 3], center = true);\n    }\n\n// Functional elements\ndifference() {\n    color(case_color) {\n        // USB-C port\n        translate([-length/2 - 1, 0, 0])\n            cube([2, 8, 4], center = true);\n        \n        // Buttons\n        buttons();\n        \n        // LED holes\n        status_leds();\n    }\n}\n\n// LED covers\nfor (i = [0:2]) {\n    color(led_color) {\n        translate([length/2 - 8 - i*6, width/2 - 5, height/2])\n            cylinder(h = 0.5, r = 1.5);\n    }\n}\n\n// Sensor window\ncolor(\"RoyalBlue\")\n    translate([0, -width/2, height/2 - 5])\n        cube([15, 0.5, 6], center = true);",
    "renders": true
  },
  {
    "electronic_device": "microcontroller",
    "openscad_code": "// Realistic Arduino Uno R3 Style Microcontroller\n// 3D printable with proper wall thickness and no overhangs\n\n// Overall dimensions\nboard_x = 68.6;\nboard_y = 53.4;\nboard_z = 1.6;\npcb_color = \"#006400\";\n\n// Main PCB\nmodule pcb() {\n    color(pcb_color) {\n        difference() {\n            cube([board_x, board_y, board_z], center=true);\n            // Mounting holes\n            for(x=[-25.4, 25.4]) {\n                for(y=[-20.3, 20.3]) {\n                    translate([x, y, 0])\n                        cylinder(h=2, r=1.5, center=true);\n                }\n            }\n        }\n    }\n}\n\n// USB Connector\nmodule usb_connector() {\n    color(\"silver\") {\n        translate([-board_x/2 - 4, 0, 0])\n            cube([8, 12, 4], center=true);\n    }\n    \n    color(\"black\") {\n        translate([-board_x/2 - 2, 0, 0])\n            cube([2, 8, 2], center=true);\n    }\n}\n\n// Power Jack\nmodule power_jack() {\n    color(\"black\") {\n        translate([board_x/2 - 5, 0, 0])\n            difference() {\n                cube([10, 8, 8], center=true);\n                translate([4, 0, 0])\n                    cylinder(h=10, r=3.5, center=true);\n            }\n    }\n}\n\n// Female Headers\nmodule header(x, y, pins, orientation) {\n    color(\"black\") {\n        if(orientation == \"vertical\") {\n            translate([x, y, 1.6]) {\n                for(i=[0:pins-1]) {\n                    translate([i*2.54, 0, 3.75])\n                        cube([2.5, 2.54, 7.5], center=true);\n                }\n            }\n        } else {\n            translate([x, y, 1.6]) {\n                for(i=[0:pins-1]) {\n                    translate([0, i*2.54, 3.75])\n                        cube([2.54, 2.5, 7.5], center=true);\n                }\n            }\n        }\n    }\n}\n\n// ATmega328P IC\nmodule atmega_chip() {\n    color(\"teal\") {\n        translate([-10, 0, 1.6])\n            cube([11.5, 11.5, 2.5]);\n    }\n    \n    // Pin markings\n    color(\"silver\") {\n        for(i=[0:13]) {\n            translate([-15, -6.5+i*1.27, 1.6])\n                cube([1, 0.5, 0.5]);\n        }\n    }\n}\n\n// Reset Button\nmodule reset_button() {\n    color(\"red\") {\n        translate([-25, 15, 1.6])\n            cube([6, 5, 2]);\n    }\n    \n    color(\"black\") {\n        translate([-25, 15, 3.6])\n            cube([4, 3, 0.5]);\n    }\n}\n\n// LEDs\nmodule led(x, y, color_name) {\n    color(color_name) {\n        translate([x, y, 1.6])\n            cylinder(h=1.5, r=1.5);\n    }\n    \n    color(\"silver\") {\n        translate([x, y, 1.6])\n            cube([3, 3, 1]);\n    }\n}\n\n// Crystal Oscillator\nmodule crystal() {\n    color(\"silver\") {\n        translate([-15, -15, 1.6])\n            cube([5, 3, 3]);\n    }\n}\n\n// Capacitors\nmodule capacitor(x, y) {\n    color(\"blue\") {\n        translate([x, y, 1.6])\n            cube([2.5, 2, 3]);\n    }\n}\n\n// Voltage Regulator\nmodule voltage_regulator() {\n    color(\"black\") {\n        translate([20, -15, 1.6])\n            cube([8, 6, 4]);\n    }\n}\n\n// Main assembly\nmodule arduino_uno() {\n    pcb();\n    \n    // Headers\n    header(-board_x/2 + 5, 22.8, 8, \"vertical\");\n    header(-board_x/2 + 5, 15.2, 8, \"vertical\");\n    header(-board_x/2 + 5, -22.8, 6, \"vertical\");\n    header(-board_x/2 + 5, -15.2, 6, \"vertical\");\n    header(board_x/2 - 5, -22.8, 10, \"vertical\");\n    header(board_x/2 - 5, -7.62, 8, \"vertical\");\n    header(-board_x/2 + 5, 7.62, 18, \"horizontal\");\n    \n    // Components\n    usb_connector();\n    power_jack();\n    atmega_chip();\n    reset_button();\n    crystal();\n    voltage_regulator();\n    \n    // LEDs\n    led(-15, 18, \"green\");\n    led(-15, 15.5, \"red\");\n    led(-15, 13, \"orange\");\n    \n    // Capacitors\n    capacitor(-12, -12);\n    capacitor(-12, -9);\n    capacitor(-12, -6);\n    \n    // Silkscreen markings (simplified)\n    color(\"white\") {\n        translate([0, 0, 0.81])\n            cube([20, 8, 0.1], center=true);\n    }\n}\n\n// Render the model\narduino_uno();",
    "renders": true
  },
  {
    "electronic_device": "microprocessor",
    "openscad_code": "// Microprocessor Development Board - Arduino Uno Style\n// Medium complexity realistic model for 3D printing\n\n// Main board dimensions\nboard_width = 68;\nboard_height = 54;\nboard_thickness = 1.6;\nboard_color = \"darkgreen\";\n\n// Component dimensions\nic_width = 14;\nic_length = 14;\nic_height = 3;\nusb_width = 12;\nusb_height = 8;\nusb_depth = 7;\npower_jack_d = 10;\npower_jack_h = 8;\n\n// Pin header settings\npin_rows = 2;\npin_cols = 10;\npin_spacing = 2.54;\npin_height = 8;\npin_diameter = 0.64;\n\nmodule board() {\n    color(board_color)\n    difference() {\n        cube([board_width, board_height, board_thickness], center=true);\n        \n        // Mounting holes\n        for (x = [-board_width/2 + 3, board_width/2 - 3])\n            for (y = [-board_height/2 + 3, board_height/2 - 3])\n                translate([x, y, 0])\n                    cylinder(h=board_thickness+1, d=3, center=true);\n        \n        // USB cutout\n        translate([board_width/2 - 3, 0, board_thickness/2])\n            cube([usb_depth+1, usb_width+2, board_thickness], center=true);\n    }\n}\n\nmodule pin_header(x, y, cols, rows, angle=0) {\n    color(\"silver\")\n    rotate([0, 0, angle])\n    translate([x, y, 0])\n    for (i = [0:cols-1])\n        for (j = [0:rows-1])\n            translate([i*pin_spacing, j*pin_spacing, pin_height/2])\n                cylinder(h=pin_height, d=pin_diameter, center=true);\n}\n\nmodule atmega328() {\n    color(\"black\")\n    translate([5, 0, board_thickness/2 + ic_height/2])\n    cube([ic_length, ic_width, ic_height], center=true);\n    \n    // IC legs\n    color(\"silver\")\n    for (side = [0:3])\n        rotate([0, 0, side*90])\n        translate([ic_length/2 - 0.5, 0, board_thickness/2 + 0.5])\n        for (i = [-3:4])\n            translate([0, i*1.27, 0])\n                cube([1, 0.5, 1]);\n}\n\nmodule usb_connector() {\n    color(\"silver\")\n    translate([board_width/2 - 3, 0, board_thickness/2 + usb_height/2])\n        cube([usb_depth, usb_width, usb_height], center=true);\n    \n    // USB shield\n    color(\"silver\")\n    translate([board_width/2 - 3, 0, board_thickness/2 + usb_height + 1])\n        cube([usb_depth + 2, usb_width + 2, 0.5], center=true);\n}\n\nmodule power_jack() {\n    color(\"black\")\n    translate([-board_width/2 + 5, 0, board_thickness/2 + power_jack_h/2])\n        cylinder(h=power_jack_h, d=power_jack_d, center=true);\n    \n    // Center pin\n    color(\"silver\")\n    translate([-board_width/2 + 5, 0, board_thickness/2 + power_jack_h/2])\n        cylinder(h=power_jack_h + 1, d=2, center=true);\n}\n\nmodule capacitor(x, y, height) {\n    color(\"blue\")\n    translate([x, y, board_thickness/2 + height/2])\n        cylinder(h=height, d=4, center=true);\n    \n    // Leads\n    color(\"silver\")\n    translate([x - 1.5, y, board_thickness/2 + 1])\n        cube([3, 0.5, height - 2], center=true);\n}\n\nmodule led(x, y, color_name) {\n    color(color_name)\n    translate([x, y, board_thickness/2 + 2])\n        cylinder(h=2, d=3, center=true);\n    \n    // LED body\n    color(\"clear\")\n    translate([x, y, board_thickness/2 + 3.5])\n        sphere(d=3);\n}\n\nmodule reset_button() {\n    color(\"red\")\n    translate([board_width/2 - 15, board_height/2 - 10, board_thickness/2 + 2])\n        cube([8, 6, 3], center=true);\n}\n\n// Assembly\nunion() {\n    board();\n    \n    // Main IC\n    atmega328();\n    \n    // I/O Headers\n    pin_header(-board_width/2 + 5, board_height/2 - 5, 6, 2, 270);\n    pin_header(-board_width/2 + 5, -board_height/2 + 5, 6, 2, 270);\n    pin_header(board_width/2 - 20, board_height/2 - 5, 8, 2, 270);\n    pin_header(board_width/2 - 20, -board_height/2 + 5, 8, 2, 270);\n    \n    // Power headers\n    pin_header(-board_width/2 + 5, 0, 4, 2, 270);\n    \n    // USB\n    usb_connector();\n    \n    // Power jack\n    power_jack();\n    \n    // Reset button\n    reset_button();\n    \n    // LEDs\n    led(board_width/2 - 30, board_height/2 - 5, \"green\");\n    led(board_width/2 - 35, board_height/2 - 5, \"yellow\");\n    led(board_width/2 - 40, board_height/2 - 5, \"red\");\n    \n    // Capacitors\n    capacitor(-10, 10, 6);\n    capacitor(-10, -10, 6);\n    capacitor(20, 15, 8);\n    capacitor(20, -15, 8);\n    \n    // Crystal oscillator\n    color(\"silver\")\n    translate([-5, 5, board_thickness/2 + 2])\n        cube([6, 2, 4], center=true);\n}",
    "renders": true
  },
  {
    "electronic_device": "coprocessor",
    "openscad_code": "// Coprocessor Electronic Device – Realistic Style, Medium Complexity\n// Dimensions: ~70 x 50 x 12 mm\n\n// Overall color palette\nPCB_COLOR = \"darkgreen\";\nCHIP_COLOR = \"black\";\nHEATSINK_COLOR = \"silver\";\nPORT_COLOR = \"darkgrey\";\nLED_COLOR = \"red\";\n\n// PCB base\nmodule pcb_base() {\n    color(PCB_COLOR)\n    translate([0, 0, 1])\n        cube([70, 50, 1.6], center = true);\n}\n\n// Main processor chip\nmodule main_chip() {\n    color(CHIP_COLOR)\n    translate([0, 0, 2.9])\n        cube([20, 20, 1.5], center = true);\n}\n\n// Heatsink on chip\nmodule heatsink() {\n    color(HEATSINK_COLOR)\n    difference() {\n        translate([0, 0, 4.5])\n            cube([22, 22, 6], center = true);\n        // Fins\n        for (x = [-9:3:9])\n            translate([x, 0, 4.5])\n                cube([1.8, 22, 6], center = true);\n    }\n}\n\n// Memory modules\nmodule memory_modules() {\n    color(CHIP_COLOR)\n    for (y = [-15, -5, 5, 15])\n        translate([-22, y, 2.8])\n            cube([8, 6, 1.4], center = true);\n}\n\n// PCI-e fingers\nmodule pcie_fingers() {\n    color(\"gold\")\n    translate([0, 0, 0.8])\n        cube([70, 5, 0.8], center = true);\n    // Contact stripes\n    for (i = [-30:4:30])\n        translate([i, 0, 0.4])\n            cube([2, 5, 0.4], center = true);\n}\n\n// Small SMD resistors\nmodule smd_resistors() {\n    color(\"black\")\n    for (x = [-25:6:25])\n        for (y = [-20:5:20])\n            if (abs(x) > 10 || abs(y) > 10)\n                translate([x, y, 2.8])\n                    cube([1.2, 0.6, 0.4], center = true);\n}\n\n// Power connector\nmodule power_connector() {\n    color(PORT_COLOR)\n    translate([32, 0, 2])\n        rotate([0, 90, 0])\n            cylinder(h = 8, d = 6, $fn = 20);\n    // Pin holes\n    for (i = [-2.5:2.5:2.5])\n        translate([32, i, 2])\n            rotate([0, 90, 0])\n                cylinder(h = 9, d = 1.2, $fn = 8);\n}\n\n// Status LED\nmodule status_led() {\n    color(LED_COLOR)\n    translate([-30, 20, 2.5])\n        cylinder(h = 0.8, d = 2, $fn = 12);\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    for (x = [-30, 30])\n        for (y = [-20, 20])\n            translate([x, y, 0])\n                cylinder(h = 10, d = 3.2, $fn = 20);\n}\n\n// Silkscreen label\nmodule silkscreen_label() {\n    color(\"white\")\n    translate([-25, 0, 3.2])\n        cube([10, 4, 0.1], center = true);\n}\n\n// Main assembly\nunion() {\n    difference() {\n        union() {\n            pcb_base();\n            main_chip();\n            heatsink();\n            memory_modules();\n            pcie_fingers();\n            smd_resistors();\n            power_connector();\n            status_led();\n            silkscreen_label();\n        }\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "gpu",
    "openscad_code": "// GPU - Realistic Medium Complexity\n// Dimensions scaled for 3D printing (≈70 mm long)\n\n// Main colors\n$fa = 2;\n$fs = 0.5;\n\nmodule gpu() {\n    // PCB base\n    color(\"darkgreen\") translate([0,0,-1]) cube([70,30,1.6], center=true);\n    \n    // GPU shroud frame\n    color([0.2,0.2,0.2]) difference() {\n        cube([72,32,10], center=true);\n        translate([0,0,5]) cube([68,28,10], center=true);\n    }\n    \n    // Backplate\n    color([0.15,0.15,0.15]) translate([0,0,-3.8]) cube([70,30,1], center=true);\n    \n    // Fans (dual)\n    color([0.1,0.1,0.1]) for(x=[-20,20]) translate([x,0,5]) {\n        difference() {\n            cylinder(h=2, r=11, center=true);\n            for(i=[0:11]) rotate([0,0,i*30]) translate([5,0,0]) cube([10,1,3], center=true);\n        }\n        color([0.05,0.05,0.05]) cylinder(h=3, r=2.5, center=true);\n    }\n    \n    // Heatpipes visible at top\n    color([0.7,0.7,0.7]) for(x=[-25:10:25]) translate([x,0,5.5]) rotate([90,0,0]) cylinder(h=30, r=1.5, center=true);\n    \n    // PCIe connector\n    color([0.5,0.5,0.5]) translate([-35,0,-5]) cube([10,25,1.6], center=true);\n    for(y=[-10:2:10]) color(\"gold\") translate([-34.8,y,-4.2]) cube([0.5,1.2,0.5], center=true);\n    \n    // Display ports\n    color([0.6,0.6,0.6]) for(i=[0:3]) translate([34, -10+i*6, 0]) cube([4,4,6], center=true);\n    \n    // Power connectors (8-pin)\n    color([0.4,0.4,0.4]) translate([0,15,4]) cube([12,4,4], center=true);\n    for(i=[0:7]) color(\"black\") translate([-5.5+i*1.5,15,5.9]) cube([0.5,2,0.5], center=true);\n    \n    // LED strip\n    color([0,0.7,1]) translate([0,0,10.1]) cube([70,1,0.5], center=true);\n    \n    // Brand logo area\n    color([0.3,0.3,0.3]) translate([0,-8,5.1]) cube([12,4,0.5], center=true);\n    color(\"white\") translate([0,-8,5.3]) cube([10,2,0.2], center=true);\n    \n    // Memory chips\n    color([0.8,0.8,0.8]) for(x=[-25:12.5:25]) for(y=[-10:7:10]) translate([x,y,-0.8]) cube([5,3,0.8], center=true);\n    \n    // VRM heatsink\n    color([0.25,0.25,0.25]) translate([25,0,5]) cube([15,30,5], center=true);\n    for(i=[-2:2]) translate([25, i*6, 7]) cube([15,1,8], center=true);\n}\n\ngpu();",
    "renders": true
  },
  {
    "electronic_device": "fpga",
    "openscad_code": "// FPGA Development Board - Medium Complexity\n// Realistic style with functional features\n\n$fn = 50;\n\n// Main colors\ncolor_case = [0.1, 0.1, 0.1];\ncolor_pcb = [0.0, 0.4, 0.0];\ncolor_metal = [0.7, 0.7, 0.7];\ncolor_plastic = [0.2, 0.2, 0.2];\ncolor_led = [1, 0, 0];\ncolor_gold = [0.8, 0.6, 0.2];\n\n// Module for PCB with components\nmodule pcb_base() {\n    color(color_pcb)\n    cube([45, 35, 1.6], center=true);\n}\n\n// Module for main FPGA chip\nmodule fpga_chip() {\n    translate([0, 0, 1.6]) {\n        // Chip body\n        color(color_case)\n        cube([25, 25, 3], center=true);\n        \n        // Top markings\n        translate([0, 0, 1.51])\n        color([0.8, 0.8, 0.8])\n        cube([24, 24, 0.1], center=true);\n        \n        // Pins on all sides\n        for(side = [0:3]) {\n            rotate([0, 0, side * 90])\n            translate([12.5, 0, 0])\n            for(i = [-6:6]) {\n                translate([0, i * 2, 0])\n                color(color_gold)\n                cube([1, 1, 0.5], center=true);\n            }\n        }\n    }\n}\n\n// Module for decoupling capacitors\nmodule capacitors() {\n    for(pos = [[-15, -10], [-15, 10], [15, -10], [15, 10]]) {\n        translate([pos[0], pos[1], 1.6])\n        color([0.1, 0.1, 0.1])\n        cylinder(h=2, d=1.5, center=true);\n    }\n}\n\n// Module for configuration flash\nmodule flash_chip() {\n    translate([0, -12, 1.6])\n    color(color_plastic)\n    cube([8, 6, 2], center=true);\n}\n\n// Module for voltage regulators\nmodule voltage_regulators() {\n    for(pos = [[-20, 12], [20, 12]]) {\n        translate([pos[0], pos[1], 1.6])\n        color(color_metal)\n        cube([5, 5, 3], center=true);\n    }\n}\n\n// Module for JTAG header\nmodule jtag_header() {\n    translate([-22, 0, 1.6])\n    color(color_plastic)\n    cube([6, 12, 5], center=true);\n    \n    // Pin holes\n    for(i = [-4:4:4]) {\n        translate([-22, i, 3])\n        color([0, 0, 0])\n        cylinder(h=5, d=1, center=true);\n    }\n}\n\n// Module for GPIO headers\nmodule gpio_headers() {\n    // Left header\n    translate([-22, 0, 5])\n    rotate([90, 0, 0])\n    color(color_plastic)\n    cube([12, 2, 2], center=true);\n    \n    // Right header\n    translate([22, 0, 5])\n    rotate([90, 0, 0])\n    color(color_plastic)\n    cube([12, 2, 2], center=true);\n    \n    // Top header\n    translate([0, -17, 5])\n    rotate([90, 90, 0])\n    color(color_plastic)\n    cube([12, 2, 2], center=true);\n    \n    // Bottom header\n    translate([0, 17, 5])\n    rotate([90, 90, 0])\n    color(color_plastic)\n    cube([12, 2, 2], center=true);\n}\n\n// Module for status LEDs\nmodule status_leds() {\n    for(i = [0:3]) {\n        translate([10 - i*5, 15, 1.6])\n        color(color_led)\n        cylinder(h=0.5, d=2, center=true);\n    }\n}\n\n// Module for oscillator\nmodule oscillator() {\n    translate([10, -12, 1.6])\n    color(color_metal)\n    cube([4, 4, 2], center=true);\n}\n\n// Module for reset button\nmodule reset_button() {\n    translate([-10, 15, 1.6])\n    color([0.8, 0.8, 0.8])\n    cube([6, 4, 2], center=true);\n    \n    // Button top\n    translate([-10, 15, 3.1])\n    color([1, 0, 0])\n    cylinder(h=1, d=3, center=true);\n}\n\n// Module for mounting holes\nmodule mounting_holes() {\n    for(pos = [[-20, -15], [20, -15], [-20, 15], [20, 15]]) {\n        translate([pos[0], pos[1], 0])\n        color([0.1, 0.1, 0.1])\n        cylinder(h=5, d=3, center=true);\n    }\n}\n\n// Module for silkscreen text indication\nmodule silkscreen_marks() {\n    // FPGA label\n    translate([0, 0, 1.51])\n    color([1, 1, 1])\n    cube([10, 3, 0.1], center=true);\n    \n    // Pin labels\n    for(i = [0:7]) {\n        translate([-20 + i*5, -19, 1.51])\n        color([1, 1, 1])\n        cube([2, 1, 0.1], center=true);\n    }\n}\n\n// Assemble the complete FPGA board\nunion() {\n    pcb_base();\n    fpga_chip();\n    capacitors();\n    flash_chip();\n    voltage_regulators();\n    jtag_header();\n    gpio_headers();\n    status_leds();\n    oscillator();\n    reset_button();\n    mounting_holes();\n    silkscreen_marks();\n}",
    "renders": true
  },
  {
    "electronic_device": "asic",
    "openscad_code": "// ASIC Miner Unit - Realistic Design\n// 120mm x 120mm x 35mm - Medium complexity\n\n// Main colors\n$fa = 1;\n$fs = 0.5;\n\nmodule heatsink() {\n    color(\"silver\") {\n        difference() {\n            cube([110, 110, 25]);\n            for (i = [0:9]) {\n                translate([5 + i*10, 5, 10])\n                    cube([8, 100, 15]);\n            }\n            for (i = [0:9]) {\n                translate([5, 5 + i*10, 10])\n                    cube([100, 8, 15]);\n            }\n        }\n    }\n}\n\nmodule fan_housing() {\n    color(\"gray20\") {\n        // Fan frame\n        difference() {\n            cube([110, 110, 10]);\n            translate([55, 55, -1])\n                cylinder(h=12, r=50);\n        }\n        // Fan blades\n        color(\"black\") {\n            for (i = [0:7]) {\n                rotate([0, 0, i*45])\n                    translate([55, 55, 4])\n                        cube([2, 20, 1.5], center=true);\n            }\n        }\n        // Fan center hub\n        color(\"gray40\")\n            translate([55, 55, 4])\n                cylinder(h=3, r=12);\n    }\n}\n\nmodule pcb_base() {\n    color(\"darkgreen\") {\n        cube([120, 120, 1.6]);\n    }\n}\n\nmodule asic_chips() {\n    color(\"gray20\") {\n        for (x = [0:3]) {\n            for (y = [0:3]) {\n                translate([15 + x*25, 15 + y*25, 1.6])\n                    cube([20, 20, 2]);\n            }\n        }\n    }\n}\n\nmodule capacitors() {\n    color(\"blue\") {\n        for (i = [0:5]) {\n            translate([5 + i*20, 105, 1.6])\n                cylinder(h=8, r=2);\n        }\n    }\n}\n\nmodule power_connectors() {\n    color(\"gold\") {\n        // 6-pin PCIe connectors\n        translate([110, 30, 1.6])\n            cube([10, 15, 5]);\n        translate([110, 60, 1.6])\n            cube([10, 15, 5]);\n    }\n}\n\nmodule ethernet_port() {\n    color(\"gray30\") {\n        translate([110, 90, 0]) {\n            cube([10, 20, 8]);\n            translate([5, 10, -1])\n                cube([8, 16, 10]);\n        }\n    }\n}\n\nmodule status_leds() {\n    color(\"red\") {\n        translate([115, 5, 1.6])\n            cylinder(h=1, r=2);\n    }\n    color(\"green\") {\n        translate([115, 10, 1.6])\n            cylinder(h=1, r=2);\n    }\n}\n\nmodule mounting_holes() {\n    for (x = [10, 110]) {\n        for (y = [10, 110]) {\n            translate([x, y, -1])\n                cylinder(h=5, r=3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    translate([0, 0, 0])\n        pcb_base();\n    \n    translate([0, 0, 1.6])\n        asic_chips();\n    \n    translate([0, 0, 3.6])\n        heatsink();\n    \n    translate([0, 0, 28.6])\n        fan_housing();\n    \n    // Side components\n    translate([0, 0, 0])\n        capacitors();\n    \n    translate([0, 0, 0])\n        power_connectors();\n    \n    translate([0, 0, 0])\n        ethernet_port();\n    \n    translate([0, 0, 0])\n        status_leds();\n    \n    // Mounting holes\n    translate([0, 0, 0])\n        mounting_holes();\n}",
    "renders": true
  },
  {
    "electronic_device": "soc",
    "openscad_code": "// Raspberry Pi 4 Model B – realistic medium-complexity OpenSCAD model\n// Overall footprint ~85 mm × 55 mm, 3-D printable without supports\n\n// configurable wall thickness\nwall = 1.6;\n\n// base PCB\ncolor(\"green\")\n    cube([85, 56, 1.6], center=true);\n\n// top & bottom layer copper pour (thin visual only)\ncolor(\"teal\")\n    translate([0,0,0.82])\n        cube([85, 56, 0.05], center=true);\n\n// mounting holes Ø2.75 mm\nmodule mount_hole() {\n    cylinder(h=5, d=2.75, center=true, $fn=20);\n}\nfor (off = [[-32.5, 23.5], [32.5, 23.5], [-32.5, -23.5], [32.5, -23.5]])\n    translate([off[0], off[1], 0])\n        difference() {\n            cube([0.1, 0.1, 5], center=true);   // dummy to keep hole in tree\n            mount_hole();\n        }\n\n// USB-C power port\nmodule usbc_port() {\n    difference() {\n        color(\"black\")\n            translate([-42.5, 0, 0]) cube([8, 8, 6], center=true);\n        translate([-39, 0, 0]) cube([3, 6.2, 3.5], center=true);\n    }\n}\ntranslate([0, -20, 3]) usbc_port();\n\n// dual USB-A 2.0 stack\nmodule usb2_stack() {\n    for (dy = [0, -10])\n        translate([0, dy, 0])\n            difference() {\n                color(\"black\")\n                    cube([12, 8, 6], center=true);\n                translate([2, 0, 0])\n                    cube([8, 6.5, 3.5], center=true);\n            }\n}\ntranslate([42.5, -15, 3]) usb2_stack();\n\n// dual USB-A 3.0 stack (blue tongue)\nmodule usb3_stack() {\n    for (dy = [0, -10])\n        translate([0, dy, 0])\n            difference() {\n                color(\"black\")\n                    cube([15, 8.5, 6], center=true);\n                translate([4, 0, 0])\n                    color(\"dodgerblue\")\n                        cube([10, 7, 3.5], center=true);\n            }\n}\ntranslate([42.5, 5, 3]) usb3_stack();\n\n// ethernet jack + leds\nmodule ethernet_jack() {\n    difference() {\n        color(\"black\")\n            cube([15, 12, 10], center=true);\n        translate([7, 0, -3])\n            cube([12, 8, 8], center=true);\n    }\n    // indicator leds\n    translate([8, 5.5, 4])\n        color(\"lime\") sphere(d=1.2, $fn=10);\n    translate([8, 5.5, 1])\n        color(\"yellow\") sphere(d=1.2, $fn=10);\n}\ntranslate([42.5, 22, 5]) ethernet_jack();\n\n// 40-pin GPIO header\nmodule gpio_header() {\n    color(\"black\")\n        cube([51, 5, 8.5], center=true);\n    for (x = [-45:5:45])\n        for (y = [-1.27, 1.27])\n            translate([x, y, 0])\n                cylinder(h=8.5, d=1.0, center=true, $fn=8);\n}\ntranslate([-21, 0, 4.25]) gpio_header();\n\n// MIPI DSI display connector\ncolor(\"darkgray\")\n    translate([-21, -13, 2.5])\n        cube([15, 5, 5], center=true);\n\n// MIPI CSI camera connector\ncolor(\"darkgray\")\n    translate([-21, 13, 2.5])\n        cube([15, 5, 5], center=true);\n\n// micro HDMI ports\nmodule hdmi_port() {\n    difference() {\n        color(\"black\")\n            cube([15, 6, 4], center=true);\n        translate([7, 0, 0])\n            cube([12, 4.5, 3], center=true);\n    }\n}\ntranslate([42.5, -35, 2]) hdmi_port();\ntranslate([42.5, -28, 2]) hdmi_port();\n\n// 3.5 mm AV jack\ndifference() {\n    color(\"silver\")\n        cylinder(h=10, d=8, center=true, $fn=30);\n    translate([0, 0, -5.5])\n        cylinder(h=7, d=3.5, center=true, $fn=20);\n}\ntranslate([42.5, 35, 5]) rotate([90, 0, 0]) children();\n\n// SoC package + heat spreader\ncolor(\"silver\")\n    translate([0, 0, 1.6 + 1.5])\n        cube([45, 45, 3], center=true);\ncolor(\"silver\")\n    translate([0, 0, 1.6 + 4])\n        cube([35, 35, 0.5], center=true);\n\n// PoE header\ncolor(\"black\")\n    translate([-40, 0, 2])\n        cube([8, 8, 4], center=true);\n\n// status LEDs\ntranslate([30, 22, 3])\n    color(\"red\") sphere(d=2, $fn=10);\ntranslate([30, 19, 3])\n    color(\"green\") sphere(d=2, $fn=10);\n\n// silkscreen logo (simple extruded square)\ncolor(\"white\")\n    translate([0, 0, 1.6 + 0.1])\n        cube([14, 7, 0.1], center=true);",
    "renders": true
  },
  {
    "electronic_device": "chipset",
    "openscad_code": "// Realistic 3D-printable chipset model – medium complexity\n// Overall footprint ≈ 55 × 55 × 9 mm\n\n// Colors\nPCB_GREEN   = [0.1, 0.4, 0.1];\nBLACK_RESIN = [0.05, 0.05, 0.05];\nSILVER_PIN  = [0.7, 0.7, 0.7];\nGOLD_PAD    = [0.8, 0.7, 0.2];\nWHITE_LABEL = [0.9, 0.9, 0.9];\n\n$fn = 32; // smooth curves\n\n// ---------- PCB substrate ----------\nmodule pcb_base() {\n    color(PCB_GREEN) {\n        difference() {\n            cube([55, 55, 1.6], center = true);\n            translate([0, 0, 0.8]) // chamfer edges for printability\n                cube([55+0.2, 55+0.2, 1.8], center = true);\n        }\n    }\n}\n\n// ---------- Through-hole plated pads ----------\nmodule pads() {\n    for (p = [[-22,-22], [-22, 0], [-22, 22], [0, -22], [0, 22], [22, -22], [22, 0], [22, 22]])\n        translate([p.x, p.y, 0.8]) color(GOLD_PAD)\n            cylinder(h = 0.8, d = 3.2);\n}\n\n// ---------- 64-pin QFP package ----------\nmodule qfp64() {\n    color(BLACK_RESIN) {\n        translate([0, 0, 1.6 + 0.5]) cube([14, 14, 2], center = true);\n    }\n\n    // 64 silver leads (16 per side, 0.5 mm thick, 0.4 mm pitch)\n    for (side = [0:1:3]) {\n        rotate([0, 0, side * 90])\n            for (i = [-7.5:1:7.5])\n                translate([8.5, i * 0.8, 1.6 + 0.5 + 1]) color(SILVER_PIN)\n                    cube([1.5, 0.3, 0.5]);\n    }\n}\n\n// ---------- Silkscreen label ----------\nmodule label() {\n    translate([0, -10, 1.6 + 0.05])\n        color(WHITE_LABEL)\n            linear_extrude(height = 0.1)\n                text(\"QFP64\", size = 2.5, halign = \"center\");\n}\n\n// ---------- Decoupling capacitors ----------\nmodule caps() {\n    for (pos = [[-10, 15], [10, 15], [-10, -15], [10, -15]]) {\n        translate([pos.x, pos.y, 1.6 + 0.6]) color(BLACK_RESIN)\n            cube([2.5, 1.2, 1.2]);\n        translate([pos.x, pos.y, 1.6])\n            color(SILVER_PIN)\n                cylinder(h = 0.6, d = 0.8);\n    }\n}\n\n// ---------- JTAG connector ----------\nmodule jtag_header() {\n    translate([27, 0, 1.6 + 0.5]) difference() {\n        color(BLACK_RESIN) cube([8, 5, 2.5]);\n        for (i = [-1.5:1:1.5])\n            translate([0, i * 1.25, 1.25])\n                cylinder(h = 2.5, d = 0.6);\n    }\n}\n\n// ---------- Top silkscreen layer ----------\nmodule silkscreen() {\n    linear_extrude(height = 0.05)\n        translate([0, 20, 1.6 + 0.05])\n            color(WHITE_LABEL)\n                text(\"CHIPSET v1.2\", size = 2, halign = \"center\");\n}\n\n// ---------- Assembly ----------\nunion() {\n    pcb_base();\n    pads();\n    qfp64();\n    label();\n    caps();\n    jtag_header();\n    silkscreen();\n}",
    "renders": true
  },
  {
    "electronic_device": "modem",
    "openscad_code": "// Modem 3D Model - Realistic Style, Medium Complexity\n// Overall dimensions: 120x90x30mm\n\n$fn = 50;\n\n// Main body color\ncolor(\"darkslategray\") {\n    // Base housing\n    difference() {\n        cube([120, 90, 30], center=false);\n        \n        // Ventilation slots on top\n        for (x = [20:10:100]) {\n            translate([x, 5, 25])\n                cube([8, 80, 8]);\n        }\n        \n        // Side ventilation holes\n        for (y = [15:15:75]) {\n            translate([0, y, 10])\n                rotate([0, 90, 0])\n                    cylinder(h=5, d=5);\n            translate([120, y, 10])\n                rotate([0, 90, 0])\n                    cylinder(h=5, d=5);\n        }\n    }\n    \n    // Front bezel\n    translate([0, 0, -5])\n        cube([120, 90, 5], center=false);\n}\n\n// LED indicators\nmodule led_row() {\n    for (i = [0:3]) {\n        color(\"limegreen\")\n            translate([10 + i*25, 85, 35])\n                cylinder(h=2, d=5);\n    }\n}\n\nled_row();\n\n// Status display\ncolor(\"black\") {\n    translate([20, 65, 35])\n        cube([80, 15, 1]);\n}\n\n// Ethernet ports module\nmodule ethernet_port() {\n    color(\"black\") {\n        translate([0, 0, 0])\n            cube([15, 12, 8]);\n        translate([2, 2, -1])\n            cube([11, 8, 10]);\n    }\n}\n\n// Ethernet ports array\nfor (i = [0:3]) {\n    translate([15 + i*20, 0, 15])\n        ethernet_port();\n}\n\n// Power connector\ncolor(\"black\") {\n    translate([100, 0, 15])\n        cube([10, 8, 6]);\n}\n\n// Coaxial cable connector\ncolor(\"silver\") {\n    translate([100, 82, 15])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=10);\n    translate([100, 82, 15])\n        rotate([90, 0, 0])\n            cylinder(h=5, d=5);\n}\n\n// Antenna mounts\nmodule antenna_mount() {\n    color(\"black\") {\n        translate([0, 0, 0])\n            cylinder(h=5, d=8);\n        translate([0, 0, 5])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=12);\n    }\n}\n\n// Two antenna mounts\ntranslate([10, 45, 30])\n    antenna_mount();\ntranslate([110, 45, 30])\n    antenna_mount();\n\n// Rubber feet\nmodule rubber_foot() {\n    color(\"black\")\n        cylinder(h=3, d=8);\n}\n\n// Four feet at corners\ntranslate([10, 10, -3])\n    rubber_foot();\ntranslate([110, 10, -3])\n    rubber_foot();\ntranslate([10, 80, -3])\n    rubber_foot();\ntranslate([110, 80, -3])\n    rubber_foot();\n\n// Brand label recess\ncolor(\"silver\") {\n    translate([50, 40, 35])\n        cube([20, 10, 0.5]);\n}\n\n// Reset button\ncolor(\"red\") {\n    translate([5, 40, 35])\n        cylinder(h=2, d=4);\n}",
    "renders": true
  },
  {
    "electronic_device": "transceiver",
    "openscad_code": "// Medium-complexity handheld transceiver (walkie-talkie) in realistic style\n// Overall dimensions: 55 x 110 x 30 mm\n\n$fa = 2;\n$fs = 0.5;\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Main body block\n        color(\"darkslategray\") \n        cube([55, 110, 30], center = true);\n\n        // Top grip indent\n        translate([0, 25, 14])\n        cube([45, 20, 8], center = true);\n\n        // Side grip grooves\n        for (y = [-40:-20:40]) {\n            translate([28, y, 0])\n            cube([2, 15, 20], center = true);\n            translate([-28, y, 0])\n            cube([2, 15, 20], center = true);\n        }\n    }\n}\n\n// Front faceplate with display and keys\nmodule front_face() {\n    translate([0, 0, 16]) {\n        // Faceplate\n        color(\"black\") \n        cube([52, 105, 2], center = true);\n\n        // LCD screen\n        translate([0, 30, 1])\n        color(\"limegreen\") \n        cube([40, 20, 0.5], center = true);\n\n        // Keypad grid 3x4\n        for (row = [0:2]) {\n            for (col = [0:2]) {\n                translate([-15 + col*15, -10 - row*15, 1])\n                color(\"dimgray\") \n                cylinder(h = 1.5, d = 8, $fn = 16);\n            }\n        }\n\n        // PTT (Push-to-Talk) button\n        translate([0, -45, 1])\n        color(\"firebrick\") \n        cube([20, 12, 2], center = true);\n\n        // LED indicator\n        translate([20, 45, 1])\n        color(\"crimson\") \n        cylinder(h = 1.5, d = 5, $fn = 8);\n    }\n}\n\n// Top antenna\nmodule antenna() {\n    translate([0, -45, 16])\n    rotate([0, 0, 0])\n    color(\"silver\") {\n        cylinder(h = 40, d1 = 8, d2 = 3, $fn = 16);\n        translate([0, 0, 40])\n        sphere(d = 4, $fn = 16);\n    }\n}\n\n// Volume/channel knob\nmodule top_knob() {\n    translate([-20, -45, 16])\n    color(\"dimgray\") {\n        cylinder(h = 8, d = 12, $fn = 32);\n        translate([0, 0, 4])\n        cube([2, 8, 2], center = true);\n    }\n}\n\n// Belt clip on back\nmodule belt_clip() {\n    translate([0, 0, -16])\n    difference() {\n        color(\"black\") \n        cube([50, 80, 4], center = true);\n\n        // Clip opening\n        translate([0, 20, 0])\n        cube([40, 30, 5], center = true);\n    }\n}\n\n// Side speaker grille\nmodule speaker_grille() {\n    translate([28, 0, 0])\n    rotate([0, 90, 0])\n    color(\"darkgray\") {\n        for (i = [-40:5:40]) {\n            translate([0, i, 0])\n            cube([0.5, 3, 1], center = true);\n        }\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    translate([0, 50, -13])\n    color(\"black\") \n    cube([10, 8, 5], center = true);\n}\n\n// Assembly\nunion() {\n    body_shell();\n    front_face();\n    antenna();\n    top_knob();\n    belt_clip();\n    speaker_grille();\n    mirror([1, 0, 0]) speaker_grille(); // Speaker on both sides\n    usb_port();\n}",
    "renders": true
  },
  {
    "electronic_device": "transmitter",
    "openscad_code": "// Realistic medium-complexity 2.4 GHz RC transmitter\n// Overall size ≈ 90 × 180 × 40 mm; wall thickness 2 mm\n\n$fn = 60;\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Outer shell\n        rounded_box([90, 180, 40], 6);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            rounded_box([86, 176, 38], 5);\n    }\n}\n\n// Utility: rounded box\nmodule rounded_box(size, r) {\n    minkowski() {\n        cube([size.x-2*r, size.y-2*r, size.z-2*r], center = true);\n        sphere(r);\n    }\n}\n\n// Front face with screen and controls\nmodule front_face() {\n    color(\"black\") {\n        // LCD screen\n        translate([0, 50, 19.9])\n            cube([50, 30, 0.6], center = true);\n        \n        // Button grid\n        for (y = [-40, -25, -10]) {\n            translate([-30, y, 20])\n                cylinder(h = 1.2, d = 6);\n            translate([-15, y, 20])\n                cylinder(h = 1.2, d = 6);\n        }\n        \n        // Trim tabs\n        for (x = [-35, 35]) {\n            translate([x, 0, 20])\n                cube([8, 12, 1.2], center = true);\n        }\n    }\n}\n\n// Top antenna mount & antenna\nmodule antenna() {\n    // Base stub\n    color(\"black\")\n        translate([0, -75, 25])\n            cylinder(h = 8, d = 12);\n    \n    // Hinged antenna\n    translate([0, -75, 33])\n        rotate([0, 100, 0])\n            color(\"gray\")\n                cylinder(h = 60, d = 4);\n}\n\n// Left stick assembly\nmodule stick() {\n    translate([-25, 20, 20]) {\n        // Gimbal base\n        color(\"darkgray\")\n            cylinder(h = 8, d = 20);\n        \n        // Stick shaft\n        translate([0, 0, 8])\n            color(\"black\")\n                cylinder(h = 25, d = 6);\n        \n        // Knob\n        translate([0, 0, 33])\n            color(\"red\")\n                sphere(d = 12);\n    }\n}\n\n// Right stick (mirrored)\nmodule right_stick() {\n    mirror([1, 0, 0]) stick();\n}\n\n// Battery door on rear\nmodule battery_door() {\n    color(\"gray\")\n        translate([0, 0, -19.9])\n            cube([50, 60, 1]);\n    \n    // Thumb notch\n    translate([25, 20, -19.9])\n        cube([5, 10, 1]);\n}\n\n// Rubber grips\nmodule grips() {\n    color(\"black\") {\n        // Left grip\n        translate([-45, 0, 0]) {\n            difference() {\n                rounded_box([15, 160, 36], 4);\n                translate([2, 0, 0])\n                    rounded_box([11, 156, 32], 4);\n            }\n        }\n        \n        // Right grip\n        mirror([1, 0, 0]) {\n            translate([-45, 0, 0]) {\n                difference() {\n                    rounded_box([15, 160, 36], 4);\n                    translate([2, 0, 0])\n                        rounded_box([11, 156, 32], 4);\n                }\n            }\n        }\n    }\n}\n\n// USB-C port on top edge\nmodule usb_port() {\n    color(\"black\")\n        translate([0, -90, 0])\n            rotate([90, 0, 0])\n                cube([10, 4, 6], center = true);\n}\n\n// Assembly\ntranslate([0, 0, 20])\n    color(\"lightgray\") body_shell();\n\nfront_face();\nantenna();\nstick();\nright_stick();\nbattery_door();\ngrips();\nusb_port();",
    "renders": true
  },
  {
    "electronic_device": "receiver",
    "openscad_code": "// Receiver electronic device - medium complexity realistic style\n// Features: OLED display, rotary encoder, speaker grill, antenna connector, power port\n\n// Device dimensions (mm)\nlength = 85;\nwidth = 50;\nheight = 20;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\nmodule main_body() {\n    // Main enclosure with rounded edges\n    color(\"#2C2C2C\") {\n        difference() {\n            minkowski() {\n                cube([length, width, height], center=true);\n                sphere(r=3);\n            }\n            // Hollow out the inside\n            translate([0, 0, 1])\n                minkowski() {\n                    cube([length-wall*2, width-wall*2, height-wall*2], center=true);\n                    sphere(r=2);\n                }\n        }\n    }\n}\n\nmodule display_screen() {\n    // OLED display\n    color(\"#000000\") translate([0, 15, height/2-0.1]) {\n        cube([40, 15, 0.2], center=true);\n    }\n    \n    // Display bezel\n    color(\"#1A1A1A\") translate([0, 15, height/2-0.2]) {\n        cube([42, 17, 0.1], center=true);\n    }\n}\n\nmodule rotary_encoder() {\n    // Main encoder body\n    color(\"#4A4A4A\") translate([30, -15, height/2-1]) {\n        cylinder(h=2, r=6, $fn=32);\n    }\n    \n    // Encoder knob\n    color(\"#666666\") translate([30, -15, height/2+1]) {\n        cylinder(h=5, r=4, $fn=20);\n    }\n    \n    // Knurled grip\n    for(i=[0:9]) {\n        rotate([0, 0, i*36]) translate([30, -15, height/2+1]) {\n            color(\"#888888\") cube([0.5, 4, 5], center=true);\n        }\n    }\n}\n\nmodule push_buttons() {\n    // Three push buttons\n    for(i=[0:2]) {\n        color(\"#333333\") translate([-20 + i*10, 0, height/2-0.2]) {\n            cylinder(h=1, r=3, $fn=16);\n        }\n        \n        // Button tops\n        color(\"#E0E0E0\") translate([-20 + i*10, 0, height/2+0.8]) {\n            cylinder(h=0.5, r=2.5, $fn=16);\n        }\n    }\n}\n\nmodule speaker_grill() {\n    // Speaker grill area\n    color(\"#1A1A1A\") translate([0, -width/2+5, 0]) {\n        cube([30, 8, height-2], center=true);\n    }\n    \n    // Grill holes\n    color(\"#2C2C2C\") for(x=[-12:3:12]) {\n        for(y=[-2:2:2]) {\n            translate([x, -width/2+5, y]) {\n                cylinder(h=1, r=0.5, $fn=8);\n            }\n        }\n    }\n}\n\nmodule antenna_connector() {\n    // SMA connector base\n    color(\"#C0C0C0\") translate([length/2-2, 0, 0]) {\n        rotate([0, 90, 0]) cylinder(h=6, r=4, $fn=32);\n    }\n    \n    // Connector threads\n    color(\"#A0A0A0\") translate([length/2-2, 0, 0]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h=4, r=3.5, $fn=32);\n                cylinder(h=4, r=2.5, $fn=32);\n            }\n        }\n    }\n}\n\nmodule power_port() {\n    // USB-C port\n    color(\"#2C2C2C\") translate([-length/2+3, 0, -5]) {\n        cube([6, 8, 4]);\n    }\n    \n    // Port opening\n    color(\"#000000\") translate([-length/2+2.9, 0, -5]) {\n        cube([2, 6, 2]);\n    }\n}\n\nmodule status_led() {\n    // Power LED\n    color(\"#00FF00\") translate([length/2-8, width/2-3, height/2-0.1]) {\n        cylinder(h=0.5, r=1.5, $fn=16);\n    }\n    \n    // LED bezel\n    color(\"#333333\") translate([length/2-8, width/2-3, height/2-0.5]) {\n        cylinder(h=0.5, r=2, $fn=16);\n    }\n}\n\n// Assemble the receiver\nmain_body();\ndisplay_screen();\nrotary_encoder();\npush_buttons();\nspeaker_grill();\nantenna_connector();\npower_port();\nstatus_led();",
    "renders": true
  },
  {
    "electronic_device": "encoder",
    "openscad_code": "// Rotary Encoder Module\n// Medium complexity realistic encoder with shaft, body, mounting bracket and connector\n\n$fn = 50;\n\n// Main dimensions\nbody_d = 40;\nbody_h = 30;\nflange_d = 50;\nflange_h = 3;\nshaft_d = 6;\nshaft_l = 20;\nmount_w = 58;\nmount_h = 15;\nmount_t = 3;\npcb_w = 36;\npcb_h = 20;\npcb_t = 1.6;\nconnector_w = 12;\nconnector_h = 8;\nconnector_l = 15;\n\n// Colors\nbody_color = [0.2, 0.2, 0.2];\nshaft_color = [0.8, 0.8, 0.8];\nflange_color = [0.15, 0.15, 0.15];\nmount_color = [0.5, 0.5, 0.5];\npcb_color = [0.0, 0.4, 0.0];\nconnector_color = [0.1, 0.1, 0.1];\nled_color = [1, 0, 0];\n\nmodule encoder_body() {\n    // Main cylindrical body\n    color(body_color)\n    cylinder(d=body_d, h=body_h);\n    \n    // Top flange with mounting holes\n    color(flange_color)\n    translate([0, 0, body_h])\n    cylinder(d=flange_d, h=flange_h);\n    \n    // Mounting holes (4x M3)\n    for(i=[0:3]) {\n        rotate([0, 0, i*90+45])\n        translate([flange_d/2*cos(45)-1.5, flange_d/2*sin(45)-1.5, body_h])\n        color(flange_color)\n        cylinder(d=3.2, h=flange_h+0.1);\n    }\n}\n\nmodule encoder_shaft() {\n    // Main shaft\n    color(shaft_color)\n    translate([0, 0, body_h+flange_h])\n    cylinder(d=shaft_d, h=shaft_l);\n    \n    // Flat on shaft\n    color(shaft_color)\n    translate([0, -shaft_d/2, body_h+flange_h+shaft_l/2])\n    cube([shaft_d/2, shaft_d, shaft_l], center=true);\n    \n    // Shaft collar\n    color(body_color)\n    translate([0, 0, body_h+flange_h+1])\n    cylinder(d=shaft_d+4, h=2);\n}\n\nmodule mounting_bracket() {\n    // Main bracket\n    color(mount_color)\n    translate([0, -body_d/2-mount_h/2, -mount_t])\n    cube([mount_w, mount_h, mount_t], center=true);\n    \n    // Mounting slots\n    for(i=[-1:1]) {\n        translate([i*15, -body_d/2-mount_h/2, -mount_t])\n        color([0,0,0])\n        cube([4, mount_h+0.1, mount_t+0.2], center=true);\n    }\n}\n\nmodule pcb_assembly() {\n    // PCB\n    color(pcb_color)\n    translate([0, body_d/2+pcb_h/2, body_h/2-pcb_t/2])\n    cube([pcb_w, pcb_h, pcb_t], center=true);\n    \n    // Connector\n    color(connector_color)\n    translate([0, body_d/2+pcb_h+connector_l/2, body_h/2-connector_h/2])\n    cube([connector_w, connector_l, connector_h], center=true);\n    \n    // Connector pins\n    for(i=[-1.5:1.5]) {\n        color([0.8,0.8,0.8])\n        translate([i*2.54, body_d/2+pcb_h+connector_l+1, body_h/2-connector_h/2+2])\n        cylinder(d=0.6, h=5);\n    }\n    \n    // Indicator LED\n    color(led_color)\n    translate([10, body_d/2+pcb_h/2, body_h/2+pcb_t+1])\n    sphere(d=3);\n}\n\nmodule labels() {\n    // Encoder label on body\n    color([1,1,1])\n    translate([0, body_d/2+0.1, body_h/2])\n    rotate([0, 90, 0])\n    linear_extrude(height=0.1)\n    text(\"ENCODER\", size=4, halign=\"center\", valign=\"center\");\n    \n    // Arrow direction indicator\n    color([1,1,0])\n    translate([0, body_d/2+0.2, body_h/2+8])\n    rotate([0, 90, 0])\n    linear_extrude(height=0.1)\n    text(\"→\", size=6, halign=\"center\", valign=\"center\");\n}\n\n// Assembly\nunion() {\n    encoder_body();\n    encoder_shaft();\n    mounting_bracket();\n    pcb_assembly();\n    labels();\n}",
    "renders": true
  },
  {
    "electronic_device": "decoder",
    "openscad_code": "// Realistic Decoder Device - Medium complexity\n// Approx 75mm x 45mm x 20mm\n\n// Main colors\n$fa = 1;\n$fs = 0.5;\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Main enclosure\n        color(\"black\") \n        cube([75, 45, 18], center=true);\n        \n        // Top display recess\n        translate([0, 15, 8.5])\n            cube([35, 12, 2], center=true);\n        \n        // Button recesses\n        for(i = [0:3]) {\n            translate([-25 + i*15, -15, 8.5])\n                cube([8, 8, 2], center=true);\n        }\n    }\n}\n\n// Display screen\nmodule display() {\n    translate([0, 15, 9])\n        color([0.1, 0.1, 0.1])\n        cube([32, 10, 0.5], center=true);\n    \n    // Display pixels\n    for(x = [-12:4:12]) {\n        for(y = [-3:3:3]) {\n            translate([x, 15+y, 9.5])\n                color([0.2, 0.8, 0.2])\n                cube([2, 1.5, 0.1], center=true);\n        }\n    }\n}\n\n// Buttons\nmodule buttons() {\n    for(i = [0:3]) {\n        translate([-25 + i*15, -15, 9])\n            color(\"darkgray\")\n            cylinder(h=1.5, r=3, $fn=16);\n        \n        // Button labels\n        translate([-25 + i*15, -15, 10.5])\n            rotate([90, 0, 0])\n            color(\"white\")\n            linear_extrude(0.1)\n            text(chr(65+i), size=2, halign=\"center\");\n    }\n}\n\n// LED indicators\nmodule leds() {\n    // Power LED\n    translate([30, 20, 9])\n        color(\"red\")\n        cylinder(h=1, r=2, $fn=16);\n    \n    // Status LEDs\n    for(i = [0:2]) {\n        translate([30 - i*8, 0, 9])\n            color(\"green\")\n            cylinder(h=1, r=1.5, $fn=16);\n    }\n}\n\n// Antenna connector\nmodule antenna() {\n    translate([-35, 0, 0])\n        rotate([0, 90, 0])\n        difference() {\n            // Outer shell\n            color(\"silver\")\n            cylinder(h=8, r=4, $fn=16);\n            \n            // Inner hole\n            cylinder(h=8.1, r=2.5, $fn=16);\n        }\n}\n\n// USB port\nmodule usb_port() {\n    translate([0, -20, 0])\n        rotate([0, 90, 0])\n        difference() {\n            // Port housing\n            color(\"black\")\n            cube([12, 8, 4], center=true);\n            \n            // Inner connector\n            translate([0, 0, 2.1])\n                cube([10, 6, 2], center=true);\n        }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    for(x = [-30, 30]) {\n        for(y = [-18, 18]) {\n            translate([x, y, 0])\n                cylinder(h=20, r=2, $fn=16);\n        }\n    }\n}\n\n// Side vents\nmodule side_vents() {\n    for(i = [0:3]) {\n        translate([0, 20, -6 + i*4])\n            rotate([90, 0, 0])\n            cube([0.5, 15, 1.5], center=true);\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        main_body();\n        display();\n        buttons();\n        leds();\n        antenna();\n        usb_port();\n    }\n    \n    // Mounting holes (internal)\n    mounting_holes();\n}\n\n// Add side vents\ntranslate([37.5, 0, 0])\n    side_vents();\ntranslate([-37.5, 0, 0])\n    mirror([1, 0, 0])\n    side_vents();",
    "renders": true
  },
  {
    "electronic_device": "multiplexer",
    "openscad_code": "// 74HC4051 8-Channel Analog Multiplexer\n// Realistic DIP-16 package with 3D-printable orientation and details\n\n// ====== PARAMETERS ======\nbody_w = 19.3;          // DIP-16 body width (mm)\nbody_l = 9.5;           // DIP-16 body length (mm)\nbody_h = 6.5;           // DIP-16 body height (mm)\npin_pitch = 2.54;       // 0.1\" pin spacing\npin_w = 0.5;\npin_l = 3.8;\npin_h = 0.4;\nled_d = 1.5;\nled_h = 1.0;\n\n// ====== COLORS ======\nbody_color = \"black\";\npin_color = \"silver\";\ntext_color = \"white\";\nled_color = \"red\";\n\n// ====== MAIN MODULE ======\nmodule multiplexer_74HC4051() {\n    difference() {\n        // Main plastic body\n        color(body_color)\n        union() {\n            // Body with rounded top\n            translate([0, 0, body_h/2])\n                minkowski() {\n                    cube([body_l, body_w, body_h*0.8], center=true);\n                    sphere(0.8);\n                }\n            \n            // Pin support rails\n            translate([0, (body_w+pin_pitch*2)/2-pin_pitch, 0])\n                cube([body_l+2, pin_pitch, body_h*0.3], center=true);\n            translate([0, -(body_w+pin_pitch*2)/2+pin_pitch, 0])\n                cube([body_l+2, pin_pitch, body_h*0.3], center=true);\n                \n            // Identification notch\n            translate([body_l/2-1, 0, body_h-0.5])\n                rotate([90, 0, 0])\n                    cylinder(r=0.8, h=0.8, $fn=20);\n        }\n        \n        // Pin holes (for 3D printing support)\n        for (i = [0:7]) {\n            translate([-body_l/2-0.5, -body_w/2+pin_pitch + i*pin_pitch, body_h/2-1])\n                rotate([0, 90, 0])\n                    cylinder(r=pin_w*0.8, h=3, $fn=8);\n        }\n        for (i = [0:7]) {\n            translate([-body_l/2-0.5, body_w/2-pin_pitch - i*pin_pitch, body_h/2-1])\n                rotate([0, 90, 0])\n                    cylinder(r=pin_w*0.8, h=3, $fn=8);\n        }\n    }\n    \n    // Pins\n    color(pin_color)\n    for (i = [0:7]) {\n        // Left side pins 1-8\n        translate([-body_l/2, -body_w/2+pin_pitch + i*pin_pitch, body_h/2-1])\n            rotate([90, 0, 0])\n                cube([pin_l, pin_w, pin_h], center=true);\n                \n        // Right side pins 16-9\n        translate([-body_l/2, body_w/2-pin_pitch - i*pin_pitch, body_h/2-1])\n            rotate([90, 0, 0])\n                cube([pin_l, pin_w, pin_h], center=true);\n    }\n    \n    // Pin 1 indicator dot\n    color(led_color)\n    translate([body_l/2-1.5, -body_w/2+pin_pitch, body_h-0.5])\n        sphere(r=0.4);\n    \n    // Package markings\n    color(text_color)\n    translate([0, 0, body_h-0.1])\n        linear_extrude(height=0.1)\n            text(\"74HC4051\", size=1.5, halign=\"center\", valign=\"center\");\n    \n    // Enable indicator LED\n    color(led_color)\n    translate([body_l/2-2.5, 0, body_h-0.8])\n        cylinder(d=led_d, h=led_h, $fn=12);\n}\n\n// ====== RENDER ======\nmultiplexer_74HC4051();",
    "renders": true
  },
  {
    "electronic_device": "demultiplexer",
    "openscad_code": "// 1-to-4 Demultiplexer – realistic, medium-complexity, 3D-printable\n\n$fn = 32;\n\n// color palette\ncolor_case     = \"DarkSlateGray\";\ncolor_label    = \"Silver\";\ncolor_led      = \"Red\";\ncolor_display  = \"Black\";\ncolor_pins     = \"Gold\";\ncolor_buttons  = \"DimGray\";\n\n// overall dimensions\nbody_w = 60;\nbody_d = 30;\nbody_h = 12;\nwall_t = 2;\ncorner_r = 3;\n\n// helper module for rounded box\nmodule rounded_box(w, d, h, r) {\n    hull() {\n        for(x = [-1,1], y = [-1,1])\n            translate([x*(w/2-r), y*(d/2-r), 0])\n                cylinder(r=r, h=h, center=true);\n    }\n}\n\n// main enclosure\nmodule enclosure() {\n    difference() {\n        rounded_box(body_w, body_d, body_h, corner_r);\n        // hollow inside\n        translate([0,0,-wall_t/2])\n            rounded_box(body_w-2*wall_t, body_d-2*wall_t, body_h, corner_r-1);\n    }\n}\n\n// label recess on top\nmodule label() {\n    color(color_label)\n    translate([0, body_d/4, body_h-0.1])\n        cube([body_w-10, 8, 0.2], center=true);\n}\n\n// indicator LEDs\nmodule leds() {\n    for(i = [0:3]) {\n        color(color_led)\n        translate([-22.5 + i*15, body_d/2-4, body_h-0.5])\n            cylinder(r=1.5, h=0.5);\n    }\n}\n\n// 4-digit 7-segment display opening\nmodule display() {\n    color(color_display)\n    translate([0, -body_d/4, body_h-0.1])\n        cube([28, 10, 0.2], center=true);\n}\n\n// push-button switches\nmodule buttons() {\n    for(i = [0:1]) {\n        color(color_buttons)\n        translate([-10 + i*20, 0, body_h+2])\n            cylinder(r=2.5, h=4);\n    }\n}\n\n// right-angle header pins (output)\nmodule header(count, pitch) {\n    color(color_pins)\n    for(i = [0:count-1]) {\n        translate([body_w/2+1.5, -body_d/2+pitch/2+i*pitch, 0])\n            rotate([0,90,0])\n                cylinder(r=0.6, h=6);\n        translate([body_w/2+1.5, -body_d/2+pitch/2+i*pitch, 0])\n            cube([6, 1.2, 1.2], center=true);\n    }\n}\n\n// mounting ears\nmodule ears() {\n    for(side = [-1,1]) {\n        translate([side*(body_w/2+4), 0, 0])\n            difference() {\n                cube([8, 10, 6], center=true);\n                translate([0, 0, -3])\n                    cylinder(r=2, h=7);\n            }\n    }\n}\n\n// assemble\ncolor(color_case) {\n    enclosure();\n    ears();\n}\nlabel();\nleds();\ndisplay();\nbuttons();\nheader(5, 2.54);",
    "renders": true
  },
  {
    "electronic_device": "buffer",
    "openscad_code": "// OpenSCAD Buffer Device Model - Realistic Style, Medium Complexity\n// 3D printable buffer module with input/output ports, status LEDs and mounting holes\n\n$fn = 50;\n\n// Color definitions\ncolor_case = [0.2, 0.2, 0.2];      // Dark gray aluminum case\ncolor_ports = [0.1, 0.1, 0.1];    // Black ports\ncolor_leds = [0, 1, 0];           // Green LEDs\ncolor_labels = [0.8, 0.8, 0.8];   // Light gray labels\n\n// Main dimensions\ncase_length = 80;\ncase_width = 40;\ncase_height = 25;\nwall_thickness = 2;\n\n// Port definitions\nport_width = 8;\nport_height = 8;\nport_depth = 5;\nport_spacing = 15;\n\n// LED definitions\nled_diameter = 3;\nled_depth = 1;\n\n// Mounting hole definitions\nhole_diameter = 3.5;\nhole_depth = 10;\n\nmodule case() {\n    difference() {\n        // Main case body\n        color(color_case)\n        cube([case_length, case_width, case_height], center = true);\n        \n        // Hollow out the inside\n        translate([0, 0, wall_thickness/2])\n        cube([case_length - 2*wall_thickness, \n              case_width - 2*wall_thickness, \n              case_height - wall_thickness], center = true);\n    }\n}\n\nmodule input_ports() {\n    for(i = [-1, 1]) {\n        translate([i * (case_length/4), -case_width/2 + port_depth/2, 0])\n        color(color_ports)\n        cube([port_width, port_depth, port_height], center = true);\n    }\n}\n\nmodule output_ports() {\n    for(i = [-1, 1]) {\n        translate([i * (case_length/4), case_width/2 - port_depth/2, 0])\n        color(color_ports)\n        cube([port_width, port_depth, port_height], center = true);\n    }\n}\n\nmodule status_leds() {\n    // Input LEDs\n    for(i = [-1, 1]) {\n        translate([i * (case_length/4), -case_width/2 + port_depth + led_diameter, case_height/2 - led_depth])\n        color(color_leds)\n        cylinder(h = led_depth, d = led_diameter);\n    }\n    \n    // Output LEDs\n    for(i = [-1, 1]) {\n        translate([i * (case_length/4), case_width/2 - port_depth - led_diameter, case_height/2 - led_depth])\n        color(color_leds)\n        cylinder(h = led_depth, d = led_diameter);\n    }\n    \n    // Power LED\n    translate([0, 0, case_height/2 - led_depth])\n    color([0, 0, 1])\n    cylinder(h = led_depth, d = led_diameter);\n}\n\nmodule mounting_holes() {\n    for(x = [-case_length/2 + 10, case_length/2 - 10])\n    for(y = [-case_width/2 + 10, case_width/2 - 10]) {\n        translate([x, y, -case_height/2])\n        cylinder(h = hole_depth, d = hole_diameter);\n    }\n}\n\nmodule case_top_details() {\n    // Brand label area\n    translate([0, 0, case_height/2 + 0.1])\n    color(color_labels)\n    cube([30, 15, 0.5], center = true);\n    \n    // Ventilation slots\n    for(y = [-case_width/3, 0, case_width/3]) {\n        translate([0, y, case_height/2 + 0.1])\n        color([0.3, 0.3, 0.3])\n        cube([case_length - 20, 2, 0.5], center = true);\n    }\n}\n\nmodule port_labels() {\n    // Input labels\n    for(i = [-1, 1]) {\n        translate([i * (case_length/4), -case_width/2 - 3, 0])\n        rotate([90, 0, 0])\n        color(color_labels)\n        linear_extrude(height = 0.5)\n        text(\"IN\", size = 3, halign = \"center\");\n    }\n    \n    // Output labels\n    for(i = [-1, 1]) {\n        translate([i * (case_length/4), case_width/2 + 3, 0])\n        rotate([90, 0, 180])\n        color(color_labels)\n        linear_extrude(height = 0.5)\n        text(\"OUT\", size = 3, halign = \"center\");\n    }\n}\n\n// Assemble the buffer device\nunion() {\n    case();\n    input_ports();\n    output_ports();\n    status_leds();\n    case_top_details();\n    port_labels();\n}\n\n// Remove mounting holes\ndifference() {\n    children();\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "electronic_device": "cache",
    "openscad_code": "// Cache Memory Module (DDR4-style DIMM)\n// Realistic medium-complexity model with 3D-printable features\n\n// Overall dimensions\nmodule = 133.35;  // Standard 133.35mm length\nheight = 30;\nthickness = 7.6;\n\n// Colors\npcb_color = \"#006400\";      // Green PCB\nchip_color = \"#202020\";     // Black IC packages\ncontact_color = \"#C0C0C0\";  // Gold contacts\nlabel_color = \"#FFFFFF\";    // White silkscreen\n\n// Main PCB body\nmodule cache_pcb() {\n    color(pcb_color) \n        cube([module, thickness, height], center = true);\n}\n\n// Gold contact fingers at bottom\nmodule contacts() {\n    contact_width = 1.5;\n    contact_height = 5;\n    spacing = 2.54;\n    num_contacts = 42;\n    \n    for (i = [0:num_contacts-1]) {\n        translate([(i - num_contacts/2 + 0.5) * spacing, thickness/2, -height/2 + contact_height/2]) {\n            color(contact_color)\n                cube([contact_width, 0.2, contact_height], center = true);\n        }\n    }\n}\n\n// Memory chips (8 chips per side)\nmodule memory_chips() {\n    chip_width = 11;\n    chip_length = 13;\n    chip_height = 1.2;\n    \n    for (side = [0, 1]) {\n        for (row = [0, 1]) {\n            for (col = [0, 3]) {\n                translate([\n                    -module/2 + 20 + col * 25,\n                    (side == 0 ? 1.5 : -1.5),\n                    (row == 0 ? height/4 : -height/4)\n                ]) {\n                    color(chip_color)\n                        cube([chip_length, chip_height, chip_width], center = true);\n                }\n            }\n        }\n    }\n}\n\n// SPD chip (small chip near contacts)\nmodule spd_chip() {\n    translate([-module/2 + 10, 0, -height/2 + 8]) {\n        color(chip_color)\n            cube([4, 1.2, 3], center = true);\n    }\n}\n\n// Notch for orientation\nmodule orientation_notch() {\n    notch_width = 5;\n    notch_depth = 2;\n    \n    translate([module/2 - 25, 0, 0]) {\n        difference() {\n            cube([module, thickness, height], center = true);\n            translate([0, thickness/2 + 0.1, 0])\n                cube([notch_width, notch_depth + 0.2, height], center = true);\n        }\n    }\n}\n\n// Mounting holes (small indentations)\nmodule mounting_holes() {\n    hole_diameter = 2.5;\n    \n    for (pos = [-module/2 + 20, module/2 - 20]) {\n        translate([pos, 0, height/2 - 5]) {\n            difference() {\n                cube([5, thickness + 0.2, 5], center = true);\n                cylinder(h = thickness + 0.4, d = hole_diameter, center = true, $fn = 16);\n            }\n        }\n    }\n}\n\n// Label area with text indication\nmodule label() {\n    label_width = 30;\n    label_height = 8;\n    \n    translate([module/2 - 40, -thickness/2 - 0.1, height/2 - 10]) {\n        color(label_color)\n            cube([label_width, 0.2, label_height], center = false);\n    }\n}\n\n// Heat spreader clips (simplified)\nmodule heat_spreader() {\n    spreader_thickness = 1;\n    \n    // Top spreader\n    translate([0, 0, height/2 + spreader_thickness/2]) {\n        color(\"#303030\")\n            cube([module * 0.8, thickness + 2, spreader_thickness], center = true);\n    }\n    \n    // Bottom spreader\n    translate([0, 0, -height/2 - spreader_thickness/2]) {\n        color(\"#303030\")\n            cube([module * 0.8, thickness + 2, spreader_thickness], center = true);\n    }\n}\n\n// Combine all components\nmodule cache_dimm() {\n    union() {\n        // Main assembly\n        difference() {\n            cache_pcb();\n            orientation_notch();\n            mounting_holes();\n        }\n        \n        // Components\n        contacts();\n        memory_chips();\n        spd_chip();\n        label();\n        \n        // Optional heat spreader (comment out if not needed)\n        // heat_spreader();\n    }\n}\n\n// Render the cache module\ncache_dimm();",
    "renders": true
  },
  {
    "electronic_device": "register",
    "openscad_code": "// OpenSCAD model – 8-bit register / shift-register module (realistic, medium detail)\n// Overall footprint ≈ 80×30×10 mm, printable without support\n\n$fa = 2;\n$fs = 0.5;\n\n// global wall thickness\nwall = 1.2;\n\n// main PCB outline\npcb_w = 80;\npcb_h = 30;\npcb_t = 1.6;\n\nmodule pcb() {\n    color(\"darkgreen\")\n        cube([pcb_w, pcb_h, pcb_t], center = true);\n}\n\n// black epoxy package body (16-pin DIP-300)\npackage_w = 10.16;\npackage_l = 19.05;\npackage_t = 5;\nmodule package() {\n    color([0.1, 0.1, 0.1])\n        cube([package_l, package_w, package_t], center = true);\n}\n\n// 16 metallic legs (0.45×0.45 mm, 2.54 mm pitch)\npin = 0.45;\npitch = 2.54;\nmodule pin() {\n    color(\"silver\")\n    translate([0, 0, -pcb_t/2 - 3.5])\n        cube([pin, pin, 7], center = true);\n}\n\nmodule pins() {\n    for (i = [0:7])\n        translate([pitch * (i - 3.5), package_w/2 + wall, 0])\n            pin();\n    mirror([0, 1, 0])\n        for (i = [0:7])\n            translate([pitch * (i - 3.5), package_w/2 + wall, 0])\n                pin();\n}\n\n// silk-screen label rectangle\nlabel_w = package_l + 4;\nlabel_h = package_w + 4;\nmodule silk() {\n    color(\"white\")\n    translate([0, 0, package_t/2 + 0.05])\n        cube([label_w, label_h, 0.1], center = true);\n}\n\n// 8 red LEDs in a row (status indicators)\nled_pitch = 7;\nled_d = 3;\nled_h = 2;\nmodule led() {\n    color(\"red\")\n    translate([0, 0, pcb_t/2 + led_h/2])\n        cylinder(d = led_d, h = led_h, $fn = 12);\n}\n\nmodule leds() {\n    for (i = [0:7])\n        translate([-pcb_w/2 + 10 + i * led_pitch, 0, 0])\n            led();\n}\n\n// tact-switch reset button\nbtn_w = 6;\nbtn_h = 6;\nbtn_t = 3;\nmodule button() {\n    color(\"dimgray\")\n    translate([0, 0, pcb_t/2 + btn_t/2])\n        cube([btn_w, btn_h, btn_t], center = true);\n    color(\"red\")\n    translate([0, 0, pcb_t/2 + btn_t])\n        cylinder(d1 = 4, d2 = 3, h = 1.5, $fn = 12);\n}\n\nmodule reset_button() {\n    translate([pcb_w/2 - 10, 0, 0])\n        button();\n}\n\n// 6-pin ISP header\nheader_pitch = 2.54;\nheader_pins = 3;\nheader = 2.54;\nmodule header_pin() {\n    color(\"gold\")\n    cylinder(d = 0.64, h = 6, $fn = 8);\n}\n\nmodule isp_header() {\n    for (r = [0:1])\n        for (c = [0:header_pins - 1])\n            translate([pcb_w/2 - 15 - c * header_pitch,\n                       (r == 0 ? -1 : 1) * header_pitch,\n                       pcb_t/2])\n                header_pin();\n}\n\n// assembly\ntranslate([0, 0, pcb_t/2])\n    pcb();\n\ntranslate([0, 0, pcb_t/2 + package_t/2])\n    union() {\n        package();\n        silk();\n    }\n\npins();\nleds();\nreset_button();\nisp_header();",
    "renders": true
  },
  {
    "electronic_device": "accumulator",
    "openscad_code": "// Realistic 3D-printable accumulator (power bank) with medium complexity\n// Dimensions: 110 x 65 x 25 mm (fit in hand)\n\n// Main body dimensions\nbody_w = 110;\nbody_h = 65;\nbody_d = 25;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Color definitions\ncolor_case = [0.1, 0.1, 0.1];  // Dark grey\ncolor_endcap = [0.2, 0.2, 0.2];  // Lighter grey\ncolor_ports = [0.1, 0.1, 0.1];  // Black\ncolor_button = [0.15, 0.15, 0.15];  // Dark button\ncolor_led = [0, 1, 0];  // Green LED\ncolor_usb = [0.8, 0.8, 0.8];  // Silver\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Outer shell\n        color(color_case)\n        cube([body_w, body_h, body_d], center=true);\n        \n        // Inner cavity (hollow)\n        translate([0, 0, -1])  // Slight offset for bottom\n        cube([body_w-wall*2, body_h-wall*2, body_d-wall], center=true);\n    }\n}\n\n// Rounded corners for realism\nmodule rounded_corners() {\n    // Corner cylinders\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*(body_w/2-wall), y*(body_h/2-wall), 0])\n            cylinder(h=body_d, r=wall, center=true);\n        }\n    }\n}\n\n// End caps for battery\nmodule end_caps() {\n    // Top cap with ports\n    difference() {\n        color(color_endcap)\n        translate([0, 0, body_d/2-wall/2])\n        cube([body_w, body_h, wall], center=true);\n        \n        // USB-C port\n        translate([35, 0, body_d/2-wall/2])\n        cube([12, 7, wall+1], center=true);\n        \n        // USB-A port\n        translate([10, 0, body_d/2-wall/2])\n        cube([12, 7, wall+1], center=true);\n        \n        // Micro USB port\n        translate([-35, 0, body_d/2-wall/2])\n        cube([12, 7, wall+1], center=true);\n    }\n    \n    // Bottom cap\n    color(color_endcap)\n    translate([0, 0, -body_d/2+wall/2])\n    cube([body_w, body_h, wall], center=true);\n}\n\n// Port details\nmodule port_details() {\n    // USB-C port detail\n    translate([35, 0, body_d/2-wall/2])\n    color(color_usb)\n    cube([10, 5, wall+2], center=true);\n    \n    // USB-A port detail\n    translate([10, 0, body_d/2-wall/2])\n    color(color_usb)\n    cube([10, 5, wall+2], center=true);\n    \n    // Micro USB port detail\n    translate([-35, 0, body_d/2-wall/2])\n    color(color_usb)\n    cube([10, 5, wall+2], center=true);\n}\n\n// Power button\nmodule power_button() {\n    translate([body_w/2-wall-3, body_h/4, 0])\n    color(color_button)\n    cylinder(h=4, r=3, center=true);\n}\n\n// LED indicators\nmodule led_indicators() {\n    for(i = [0:3]) {\n        translate([body_w/2-wall-3, -body_h/4 + i*10, 0])\n        color(color_led)\n        sphere(r=2);\n    }\n}\n\n// Side grip texture\nmodule grip_texture() {\n    for(i = [0:15]) {\n        translate([-body_w/2 + i*7 + 3, body_h/2, 0])\n        color(color_case)\n        cube([1, 2, body_d-wall*2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    body_shell();\n    rounded_corners();\n    end_caps();\n    port_details();\n    power_button();\n    led_indicators();\n    \n    // Mirror grip texture to both sides\n    grip_texture();\n    mirror([0, 1, 0])\n    grip_texture();\n}",
    "renders": true
  },
  {
    "electronic_device": "counter",
    "openscad_code": "// Electronic Counter Device - Realistic Style, Medium Complexity\n// Dimensions: 80mm x 40mm x 15mm\n\n// Main body with rounded edges\nmodule main_body() {\n    color(\"lightgray\") {\n        difference() {\n            // Rounded main body\n            minkowski() {\n                cube([80, 40, 15], center=true);\n                sphere(2);\n            }\n            // Hollow center\n            translate([0, 0, 2])\n                cube([76, 36, 15], center=true);\n        }\n    }\n}\n\n// LCD display with bezel\nmodule display() {\n    translate([0, 10, 8]) {\n        // Display bezel\n        color(\"darkgray\") {\n            cube([60, 20, 2], center=true);\n        }\n        // LCD screen\n        translate([0, 0, 1.1])\n            color(\"black\") cube([56, 16, 0.5], center=true);\n        \n        // Screen segments\n        for(x = [-20, -10, 0, 10, 20]) {\n            translate([x, 0, 1.7])\n                color(\"lightgreen\") cube([8, 12, 0.1], center=true);\n        }\n    }\n}\n\n// Buttons\nmodule buttons() {\n    // Up button\n    translate([-30, -15, 8]) {\n        color(\"dimgray\") {\n            cylinder(h=2, r=3, center=true);\n            translate([0, 0, 1.1])\n                cylinder(h=0.5, r=2.5, center=true);\n        }\n    }\n    \n    // Down button\n    translate([-20, -15, 8]) {\n        color(\"dimgray\") {\n            cylinder(h=2, r=3, center=true);\n            translate([0, 0, 1.1])\n                cylinder(h=0.5, r=2.5, center=true);\n        }\n    }\n    \n    // Reset button\n    translate([30, -15, 8]) {\n        color(\"red\") {\n            cylinder(h=2, r=2.5, center=true);\n            translate([0, 0, 1.1])\n                cylinder(h=0.5, r=2, center=true);\n        }\n    }\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    translate([0, 0, -7]) {\n        difference() {\n            // Battery cover\n            color(\"darkgray\") {\n                translate([0, -15, 0])\n                    cube([70, 10, 1], center=true);\n            }\n            // Screw holes\n            for(x = [-25, 25]) {\n                translate([x, -15, 0.5])\n                    cylinder(h=2, r=1, center=true);\n            }\n            // Grip texture\n            for(i = [-2:2]) {\n                translate([i*10, -15, 0.6])\n                    cube([1, 8, 0.2], center=true);\n            }\n        }\n    }\n}\n\n// USB-C port\nmodule usbc_port() {\n    translate([40, 0, -5]) {\n        color(\"black\") {\n            translate([0, 0, 0])\n                cube([8, 6, 3], center=true);\n            translate([0, 0, 1.6])\n                color(\"silver\") cube([6, 4, 0.5], center=true);\n        }\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    for(pos = [[-35, 15, 0], [35, 15, 0], [-35, -15, 0], [35, -15, 0]]) {\n        translate(pos)\n            cylinder(h=15, r=2, center=true);\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    translate([35, 15, 8]) {\n        color(\"darkgray\") {\n            cylinder(h=1, r=3, center=true);\n        }\n        translate([0, 0, 1.1])\n            color(\"red\") sphere(1.5);\n    }\n}\n\n// Brand label area\nmodule brand_label() {\n    translate([0, -5, 8]) {\n        color(\"white\") {\n            cube([30, 6, 0.2], center=true);\n        }\n    }\n}\n\n// Assemble the counter\nmain_body();\ndisplay();\nbuttons();\nbattery_compartment();\nusbc_port();\nled_indicator();\nbrand_label();",
    "renders": true
  },
  {
    "electronic_device": "timer",
    "openscad_code": "// Simple Digital Timer - 3D Printable Model\n// Medium complexity OpenSCAD timer with realistic features\n\ntimer_width = 60;\ntimer_height = 80;\ntimer_depth = 20;\nwall_thickness = 2;\n\n// Main body\ndifference() {\n    // Outer shell\n    color(\"darkslategray\")\n    rounded_cube(timer_width, timer_height, timer_depth, 3);\n    \n    // Screen cutout\n    color(\"black\")\n    translate([0, timer_height*0.25, timer_depth/2])\n    cube([timer_width*0.7, timer_height*0.3, wall_thickness+1], center=true);\n    \n    // Button holes\n    for (i = [0:2]) {\n        translate([timer_width*0.35 - i*12, -timer_height*0.3, timer_depth/2])\n        cylinder(h=wall_thickness+1, r=3.5, $fn=20);\n    }\n    \n    // USB-C port\n    translate([0, -timer_height*0.45, timer_depth/2])\n    cube([10, 4, wall_thickness+1], center=true);\n}\n\n// LCD Screen\ntranslate([0, timer_height*0.25, timer_depth/2 - wall_thickness/2])\ncolor(\"lightgray\")\ncube([timer_width*0.65, timer_height*0.25, 0.5], center=true);\n\n// LCD segments (7-segment display for 4 digits)\nmodule seven_segment(x, y, scale) {\n    translate([x, y, timer_depth/2])\n    scale([scale, scale, 1])\n    color(\"black\")\n    union() {\n        // Top\n        translate([0, 4, 0])\n        cube([6, 1, 0.2], center=true);\n        // Top-left\n        translate([-3, 2, 0])\n        cube([1, 3, 0.2], center=true);\n        // Top-right\n        translate([3, 2, 0])\n        cube([1, 3, 0.2], center=true);\n        // Middle\n        translate([0, 0, 0])\n        cube([6, 1, 0.2], center=true);\n        // Bottom-left\n        translate([-3, -2, 0])\n        cube([1, 3, 0.2], center=true);\n        // Bottom-right\n        translate([3, -2, 0])\n        cube([1, 3, 0.2], center=true);\n        // Bottom\n        translate([0, -4, 0])\n        cube([6, 1, 0.2], center=true);\n    }\n}\n\n// Display 4 digits\nfor (i = [0:3]) {\n    seven_segment(-20 + i*12, timer_height*0.25, 0.8);\n}\n\n// Buttons\nfor (i = [0:2]) {\n    translate([timer_width*0.35 - i*12, -timer_height*0.3, timer_depth/2 + 1])\n    color(\"dimgray\")\n    cylinder(h=2, r=3.2, $fn=20);\n}\n\n// Button labels\ntranslate([timer_width*0.35, -timer_height*0.3 - 8, timer_depth/2 + 2])\ncolor(\"white\")\ntext(\"START\", size=2, h=0.2, center=true);\ntranslate([timer_width*0.35 - 12, -timer_height*0.3 - 8, timer_depth/2 + 2])\ncolor(\"white\")\ntext(\"STOP\", size=2, h=0.2, center=true);\ntranslate([timer_width*0.35 - 24, -timer_height*0.3 - 8, timer_depth/2 + 2])\ncolor(\"white\")\ntext(\"RESET\", size=2, h=0.2, center=true);\n\n// USB-C port detail\ntranslate([0, -timer_height*0.45, timer_depth/2 - wall_thickness/2])\ncolor(\"black\")\ncube([8, 2.5, 1], center=true);\n\n// Battery compartment (back)\ntranslate([0, timer_height*0.3, -timer_depth/2 + 3])\ncolor(\"darkgray\")\ncube([timer_width*0.4, timer_height*0.25, 0.5], center=true);\n\n// Screw holes for battery cover\nfor (pos = [[-timer_width*0.15, timer_height*0.4], [timer_width*0.15, timer_height*0.4],\n           [-timer_width*0.15, timer_height*0.2], [timer_width*0.15, timer_height*0.2]]) {\n    translate([pos[0], pos[1], -timer_depth/2 + 2.5])\n    color(\"silver\")\n    cylinder(h=1, r=1.5, $fn=16);\n}\n\n// Status LED\ntranslate([timer_width*0.3, timer_height*0.45, timer_depth/2 - 0.5])\ncolor(\"red\")\nsphere(r=1.5, $fn=20);\n\n// Brand label\ntranslate([timer_width*0.3, timer_height*0.4, timer_depth/2 - 0.5])\ncolor(\"white\")\ntext(\"TIMER-PRO\", size=2.5, h=0.2, center=false);\n\n// Rounded cube module\nmodule rounded_cube(w, h, d, r) {\n    hull() {\n        for (x = [-1, 1], y = [-1, 1], z = [-1, 1]) {\n            translate([x*(w/2-r), y*(h/2-r), z*(d/2-r)])\n            sphere(r=r, $fn=20);\n        }\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "clock",
    "openscad_code": "// Digital Alarm Clock - Realistic Style, Medium Complexity\n\n// Overall dimensions: 80mm x 40mm x 80mm (L x W x H)\n\n// Main body with slight taper\nmodule clock_body() {\n    color(\"lightgray\")\n    difference() {\n        // Main body with rounded edges\n        minkowski() {\n            cube([80, 40, 80], center=true);\n            sphere(2);\n        }\n        \n        // Hollow out the inside\n        translate([0, 0, 0])\n        cube([70, 30, 75], center=true);\n    }\n}\n\n// LCD screen display\nmodule screen() {\n    // Screen bezel\n    color(\"darkgray\")\n    difference() {\n        translate([0, 19.5, 20])\n        cube([65, 2, 40], center=true);\n        \n        // Screen opening\n        translate([0, 20, 20])\n        cube([55, 1, 30], center=true);\n    }\n    \n    // Actual screen\n    color(\"black\")\n    translate([0, 20, 20])\n    cube([55, 0.5, 30], center=true);\n    \n    // Screen time segments (simplified)\n    for(i = [-20:10:20]) {\n        color(\"lightgreen\")\n        translate([i, 20.5, 20])\n        cube([1, 0.2, 8], center=true);\n    }\n}\n\n// Buttons on top\nmodule buttons() {\n    // Snooze button\n    color(\"darkred\")\n    translate([0, 0, 40])\n    rotate([0, 180, 0])\n    cylinder(h=3, r1=8, r2=7, center=true);\n    \n    // Hour and minute buttons\n    for(pos = [[-25, 0], [25, 0]]) {\n        color(\"darkblue\")\n        translate([pos[0], 0, 40])\n        rotate([0, 180, 0])\n        cylinder(h=2, r1=4, r2=3, center=true);\n    }\n}\n\n// Speaker grill on back\nmodule speaker_grill() {\n    color(\"gray\")\n    translate([0, -19, 0])\n    difference() {\n        cube([60, 2, 30], center=true);\n        \n        // Speaker holes\n        for(x = [-25:5:25])\n        for(y = [-10:5:10]) {\n            translate([x, -19.5, y])\n            cylinder(h=3, r=1);\n        }\n    }\n}\n\n// Power port on side\nmodule power_port() {\n    color(\"black\")\n    translate([39, 0, -20])\n    rotate([90, 0, 0])\n    cylinder(h=5, r=4);\n    \n    // Port opening\n    translate([41, 0, -20])\n    rotate([90, 0, 0])\n    cylinder(h=7, r=2);\n}\n\n// LED indicators\nmodule indicators() {\n    color(\"red\")\n    translate([-30, 19, 35])\n    sphere(1.5);\n    \n    color(\"green\")\n    translate([-30, 19, 30])\n    sphere(1.5);\n    \n    color(\"yellow\")\n    translate([-30, 19, 25])\n    sphere(1.5);\n}\n\n// Feet for stability\nmodule feet() {\n    for(pos = [[-30, -15], [30, -15], [-30, 15], [30, 15]]) {\n        color(\"darkgray\")\n        translate([pos[0], pos[1], -40])\n        cylinder(h=2, r=3);\n    }\n}\n\n// Assemble the clock\nclock_body();\nscreen();\nbuttons();\nspeaker_grill();\npower_port();\nindicators();\nfeet();",
    "renders": true
  },
  {
    "electronic_device": "oscillator",
    "openscad_code": "// Realistic 3D-Printable Oscillator Device (Model: XR2206 Function Generator)\n// Overall size: 80mm × 60mm × 22mm\n\n$fn = 50;                       // Smooth curves for printability\n\n// Main colors\nCOLOR_CASE      = [0.18,0.18,0.18];   // Dark grey aluminium\nCOLOR_FRONT     = [0.9,0.9,0.9];      // Light grey panel\nCOLOR_KNOB      = [0.1,0.1,0.1];      // Black plastic\nCOLOR_SCREEN    = [0.05,0.05,0.05];   // LCD black\nCOLOR_LED       = [1,0,0];            // Red indicator\nCOLOR_LABEL     = [0,0,0];            // Black text (embossed)\nCOLOR_CONNECTOR = [0.5,0.5,0.5];      // Nickel plated\n\n// Overall enclosure\nmodule enclosure() {\n    difference() {\n        // Main body\n        color(COLOR_CASE)\n            cube([80,60,22], center=true);\n\n        // Inside cavity for electronics (2 mm walls)\n        translate([0,0,2])\n            cube([76,56,18], center=true);\n    }\n}\n\n// Front panel with texturing\nmodule front_panel() {\n    color(COLOR_FRONT) {\n        translate([0,0,11])\n            cube([80,60,1], center=true);\n    }\n}\n\n// LCD screen with bevel\nmodule lcd_screen() {\n    color(COLOR_SCREEN)\n        translate([0,15,11.5])\n            cube([36,16,0.5], center=true);\n    \n    // Bevel around screen\n    difference() {\n        translate([0,15,11.3])\n            cube([40,20,0.7], center=true);\n        translate([0,15,11.8])\n            cube([38,18,0.7], center=true);\n    }\n}\n\n// Frequency adjustment knob with pointer\nmodule knob(pos_x, pos_y) {\n    translate([pos_x,pos_y,11.8]) {\n        color(COLOR_KNOB)\n            cylinder(h=4, d=12, center=true);\n        color(COLOR_KNOB)\n            cylinder(h=6, d=8, center=true);\n        // Pointer line\n        color(COLOR_LABEL)\n            translate([0,6,2.1])\n            cube([1,3,0.3], center=true);\n    }\n}\n\n// BNC output connector\nmodule bnc_connector(pos_x, pos_y) {\n    translate([pos_x,pos_y,11]) {\n        color(COLOR_CONNECTOR) {\n            // Main barrel\n            cylinder(h=8, d=10);\n            // Inner insulator\n            color(COLOR_KNOB)\n                cylinder(h=8, d=6);\n            // Center pin\n            color(COLOR_CONNECTOR)\n                cylinder(h=2, d=2);\n        }\n    }\n}\n\n// LED indicator\nmodule led_indicator(pos_x, pos_y) {\n    translate([pos_x,pos_y,11.5]) {\n        color(COLOR_LED)\n            sphere(d=3);\n        // LED holder\n        color(COLOR_CASE)\n            translate([0,0,-1])\n                cylinder(h=2, d=5);\n    }\n}\n\n// Power switch\nmodule power_switch() {\n    translate([-30,-10,11.5]) {\n        color(COLOR_KNOB) {\n            cube([10,5,3], center=true);\n            translate([0,0,2])\n                cylinder(h=4, d=3, center=true);\n        }\n    }\n}\n\n// Create label text (embossed)\nmodule label(pos_x, pos_y, text) {\n    translate([pos_x,pos_y,11.8]) {\n        color(COLOR_LABEL) {\n            if(text == \"FREQ\") {\n                cube([8,2,0.2], center=true);\n                translate([-4,0,0]) cube([1,1,0.2]);\n                translate([3,0,0]) cube([1,1,0.2]);\n            }\n            if(text == \"OUT\") {\n                cube([6,2,0.2], center=true);\n                translate([-3,0,0]) cube([1,1,0.2]);\n                translate([2,0,0]) cube([1,1,0.2]);\n            }\n        }\n    }\n}\n\n// Assembly\nenclosure();\nfront_panel();\nlcd_screen();\n\n// Knobs for frequency and amplitude\nknob(-20, 0);\nlabel(-20, -10, \"FREQ\");\nknob(-20, -25);\nlabel(-20, -35, \"AMPL\");\n\n// Output connectors\nbnc_connector(30, 15);\nlabel(30, 5, \"OUT\");\nbnc_connector(30, -15);\nlabel(30, -25, \"SYNC\");\n\n// LED indicators\nled_indicator(0, 25);\nled_indicator(10, 25);\n\n// Power switch\npower_switch();\ntranslate([-35, -10, 11.8]) color(COLOR_LABEL) cube([6,2,0.2]);\n\n// Ventilation slots on top\nfor(i=[-30:10:30]) {\n    color(COLOR_CASE)\n        translate([i,0,11])\n            cube([2,58,1], center=true);\n}\n\n// Rubber feet (4 corners)\nmodule foot(x,y) {\n    color(COLOR_KNOB)\n        translate([x,y,-10.5])\n            cylinder(h=3, d=6);\n}\n\nfoot(-35,-25);\nfoot(35,-25);\nfoot(-35,25);\nfoot(35,25);",
    "renders": true
  },
  {
    "electronic_device": "amplifier",
    "openscad_code": "// Guitar amplifier with realistic styling\n// Overall dimensions: 80mm x 45mm x 55mm\n\n// Main module\nmodule amplifier() {\n    color(\"black\") {\n        // Main chassis\n        difference() {\n            // Main body\n            translate([0, 0, 25]) cube([80, 45, 50], center=true);\n            \n            // Front panel recess\n            translate([0, 20.5, 35]) cube([74, 2, 40], center=true);\n            \n            // Back panel vents\n            for(i = [-30:10:30]) {\n                translate([39, i, 25]) cube([2, 8, 40], center=true);\n            }\n        }\n        \n        // Front panel\n        color(\"silver\") translate([0, 21, 35]) cube([76, 1, 42], center=true);\n        \n        // Control knobs\n        for(i = [-25:12.5:25]) {\n            translate([i, 22, 45]) rotate([90, 0, 0]) {\n                cylinder(h=3, r=4, $fn=20);\n                cylinder(h=1, r=0.5, $fn=10);\n            }\n        }\n        \n        // Power indicator LED\n        color(\"red\") translate([30, 22, 40]) sphere(r=1.5);\n        \n        // Input jacks\n        for(i = [-15:30:15]) {\n            color(\"gold\") {\n                translate([i, 22, 30]) rotate([90, 0, 0]) {\n                    cylinder(h=2, r=3.5, $fn=20);\n                    difference() {\n                        cylinder(h=2, r=2.5, $fn=20);\n                        cylinder(h=3, r=1.5, $fn=15);\n                    }\n                }\n            }\n        }\n        \n        // Carry handle\n        color(\"black\") translate([0, -22.5, 45]) {\n            difference() {\n                // Handle base\n                cube([60, 5, 8], center=true);\n                // Handle grip\n                translate([0, -2.5, 4]) cube([50, 5, 4], center=true);\n            }\n        }\n        \n        // Corner protectors\n        for(x = [-35:70:70]) {\n            for(y = [-20:40:40]) {\n                for(z = [0:50:50]) {\n                    translate([x, y, z]) {\n                        difference() {\n                            sphere(r=3);\n                            translate([-1, -1, -1]) cube([2, 2, 2]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Speaker grill\n        color(\"darkgray\") {\n            translate([0, -15, 15]) {\n                difference() {\n                    cylinder(h=3, r=25, $fn=100);\n                    // Grill holes\n                    for(i = [-20:5:20]) {\n                        for(j = [-20:5:20]) {\n                            if(sqrt(i*i + j*j) < 22) {\n                                translate([i, j, -1]) cylinder(h=5, r=1.5, $fn=8);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Brand logo\n        color(\"white\") translate([-10, 22, 50]) {\n            linear_extrude(height=0.5) {\n                text(\"AMP\", size=8, font=\"Arial:style=Bold\");\n            }\n        }\n        \n        // Power switch\n        color(\"red\") translate([35, 22, 30]) rotate([90, 0, 0]) {\n            difference() {\n                cube([6, 3, 4], center=true);\n                translate([0, 0, -2]) cube([3, 2, 4], center=true);\n            }\n        }\n        \n        // Rubber feet\n        for(x = [-30:60:60]) {\n            for(y = [-15:30:30]) {\n                color(\"gray\") translate([x, y, 0]) {\n                    cylinder(h=2, r=3, $fn=16);\n                    translate([0, 0, -0.5]) cylinder(h=1, r=4, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Render the amplifier\namplifier();",
    "renders": true
  },
  {
    "electronic_device": "sensor",
    "openscad_code": "// Multi-sensor environmental monitoring device (65x50x20mm)\n// Features: OLED display, 4 buttons, USB-C port, 6 sensor windows, mounting holes\n\n$fn = 45;  // Smooth curves for printing\n\n// Main enclosure\nmodule enclosure() {\n    color(\"gray40\") difference() {\n        rounded_box([65,50,20], 3);  // Main body\n        \n        // OLED display cutout (top face)\n        translate([32.5, 42, 20.1])\n            cube([25, 12, 1], center=true);\n        \n        // Button holes (top face)\n        for(pos = [[20,30], [35,30], [50,30], [32.5,15]])\n            translate([pos[0], pos[1], 20.1])\n                cylinder(h=2, d=5, $fn=32);\n        \n        // USB-C port\n        translate([-0.1, 25, 10])\n            rotate([0,90,0])\n                cylinder(h=12, d=8.5, $fn=32);\n        \n        // Sensor windows (bottom face)\n        for(pos = [[15,15], [50,15], [15,35], [50,35]])\n            translate([pos[0], pos[1], -0.1])\n                cylinder(h=2, d=6, $fn=32);\n        \n        // Mounting holes\n        for(pos = [[5,5], [60,5], [5,45], [60,45]])\n            translate([pos[0], pos[1], 10])\n                cylinder(h=20, d=3.2, $fn=32);\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(size, radius) {\n    hull() {\n        for(dx=[-1,1])\n        for(dy=[-1,1])\n        for(dz=[-1,1])\n            translate([dx*(size[0]/2-radius), \n                       dy*(size[1]/2-radius), \n                       dz*(size[2]/2-radius)])\n                sphere(r=radius);\n    }\n}\n\n// OLED display\nmodule display() {\n    translate([32.5, 42, 21])\n        color(\"black\")\n            cube([23, 10, 0.8], center=true);\n    \n    translate([32.5, 42, 21.9])\n        color(\"cyan\")\n            cube([20, 8, 0.2], center=true);\n}\n\n// Buttons\nmodule buttons() {\n    colors = [\"red\", \"green\", \"blue\", \"yellow\"];\n    positions = [[20,30], [35,30], [50,30], [32.5,15]];\n    \n    for(i=[0:3]) {\n        translate([positions[i][0], positions[i][1], 21])\n            color(colors[i])\n                cylinder(h=1.2, d=4.5, $fn=32);\n        \n        // Button bases\n        translate([positions[i][0], positions[i][1], 19.5])\n            color(\"gray20\")\n                cylinder(h=1.5, d=5.8, $fn=32);\n    }\n}\n\n// USB-C connector\nmodule usbc_port() {\n    translate([0, 25, 10])\n        rotate([0,90,0])\n            color(\"black\")\n                cylinder(h=10, d=8, $fn=32);\n}\n\n// Sensor modules\nmodule sensors() {\n    positions = [[15,15], [50,15], [15,35], [50,35]];\n    types = [\"BME680\", \"LTR-329\", \"ENS160\", \"SHT30\"];\n    \n    for(i=[0:3]) {\n        // Sensor windows\n        translate([positions[i][0], positions[i][1], -1])\n            color(\"gray70\")\n                cylinder(h=1, d=5.5, $fn=32);\n        \n        // Sensor labels\n        translate([positions[i][0], positions[i][1], -2])\n            rotate([0,180,0])\n                color(\"white\")\n                    linear_extrude(height=0.2)\n                        text(types[i], size=2.5, halign=\"center\", valign=\"center\");\n    }\n}\n\n// LED indicators\nmodule indicators() {\n    translate([60, 40, 19])\n        color(\"lime\")\n            cylinder(h=1, d=3, $fn=32);\n    \n    translate([60, 35, 19])\n        color(\"red\")\n            cylinder(h=1, d=3, $fn=32);\n}\n\n// Assembly\nenclosure();\ndisplay();\nbuttons();\nusbc_port();\nsensors();\nindicators();",
    "renders": true
  },
  {
    "electronic_device": "actuator",
    "openscad_code": "// Rotary Servo Actuator with Controller Board\n// Realistic style, medium complexity\n\n$fn = 64;\n\n// Main dimensions\nbody_length = 60;\nbody_width = 30;\nbody_height = 40;\nhorn_length = 20;\nhorn_thickness = 3;\nmount_hole_diameter = 4;\nwall_thickness = 2;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_horn = [0.8, 0.8, 0.8];\ncolor_screws = [0.5, 0.5, 0.5];\ncolor_circuit = [0, 0.4, 0];\ncolor_connector = [1, 0.5, 0];\n\n// Main body\nmodule servo_body() {\n    color(color_body) {\n        difference() {\n            // Main housing\n            cube([body_length, body_width, body_height], center=true);\n            \n            // Hollow out center\n            translate([0, 0, body_height/2 - wall_thickness])\n                cube([body_length - 2*wall_thickness, body_width - 2*wall_thickness, body_height], center=true);\n            \n            // Wire channel\n            translate([-body_length/2 - 1, 0, -body_height/4])\n                rotate([0, 90, 0])\n                    cylinder(h=body_length/4, d=6, center=true);\n        }\n        \n        // Top cover\n        translate([0, 0, body_height/2 + 0.5])\n            cube([body_length, body_width, 1], center=true);\n    }\n}\n\n// Mounting flanges\nmodule mounting_flanges() {\n    color(color_body) {\n        for(i = [-1, 1]) {\n            translate([0, i * (body_width/2 + 5), 0])\n                difference() {\n                    cube([20, 10, body_height/2], center=true);\n                    translate([0, 0, -body_height/4])\n                        cylinder(h=10, d=mount_hole_diameter, center=true);\n                }\n        }\n    }\n}\n\n// Control horn\nmodule control_horn() {\n    color(color_horn) {\n        translate([body_length/2 + horn_length/2, 0, body_height/2 - horn_thickness])\n            difference() {\n                cube([horn_length, 15, horn_thickness], center=true);\n                // Horn holes\n                for(i = [0:2]) {\n                    translate([horn_length/2 - i*5, 0, 0])\n                        cylinder(h=horn_thickness + 1, d=2, center=true);\n                }\n            }\n    }\n}\n\n// Circuit board\nmodule circuit_board() {\n    color(color_circuit) {\n        translate([0, 0, -body_height/2 - 2])\n            cube([body_length - 10, body_width - 10, 1.6], center=true);\n        \n        // SMD components\n        for(x = [-20:10:20]) {\n            for(y = [-10:5:10]) {\n                translate([x, y, -body_height/2 - 0.8])\n                    color([0.1, 0.1, 0.1])\n                        cube([2, 1.5, 0.8], center=true);\n            }\n        }\n        \n        // Processor\n        translate([10, 0, -body_height/2 - 0.8])\n            color([0.3, 0.3, 0.3])\n                cube([8, 6, 1], center=true);\n    }\n}\n\n// Connector pins\nmodule connector() {\n    color(color_connector) {\n        translate([-body_length/2 - 3, 0, -body_height/4])\n            for(i = [-1, 0, 1]) {\n                translate([0, i*2.54, 0])\n                    cylinder(h=6, d=1, center=true);\n            }\n    }\n}\n\n// Indicator LED\nmodule status_led() {\n    translate([body_length/2 - 5, body_width/2 - 3, body_height/2 + 1])\n        color([1, 0, 0])\n            sphere(d=3);\n}\n\n// Assembly\nservo_body();\nmounting_flanges();\ncontrol_horn();\ncircuit_board();\nconnector();\nstatus_led();\n\n// Screws for assembly\nfor(i = [-1, 1]) {\n    translate([body_length/2 - 5, i * (body_width/2 - 3), body_height/2 + 1])\n        color(color_screws)\n            cylinder(h=3, d=3, $fn=6);\n}",
    "renders": true
  },
  {
    "electronic_device": "detector",
    "openscad_code": "// Geiger-Müller Radiation Detector\n// Realistic handheld survey meter with display, buttons, and probe connector\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Overall dimensions\ncase_length = 90;\ncase_width = 60;\ncase_thickness = 25;\n\n// Main case with rounded edges\nmodule main_case() {\n    color(\"darkolivegreen\")\n    difference() {\n        // Main body with rounded edges using hull\n        hull() {\n            translate([0, 0, 0])\n                cube([case_length-6, case_width-6, case_thickness-2], center=true);\n            translate([0, 0, 2])\n                scale([0.9, 0.9, 1])\n                cube([case_length-6, case_width-6, case_thickness-2], center=true);\n        }\n        \n        // Display window recess\n        translate([10, 0, case_thickness/2-1])\n            cube([35, 30, 2], center=true);\n        \n        // Speaker grill holes\n        for(x = [-30:-20]) {\n            for(y = [-20:5:20]) {\n                translate([x, y, case_thickness/2-0.5])\n                    cylinder(h=2, d=2, center=true);\n            }\n        }\n    }\n}\n\n// Display screen\nmodule display() {\n    color(\"black\")\n    translate([10, 0, case_thickness/2-0.5])\n        cube([33, 27, 0.5], center=true);\n    \n    // LCD segments\n    color(\"lime\")\n    for(i = [-10:6:10]) {\n        translate([i, 0, case_thickness/2])\n            cube([4, 20, 0.2], center=true);\n    }\n}\n\n// Buttons and controls\nmodule controls() {\n    // Power button (red)\n    color(\"red\")\n    translate([-25, -20, case_thickness/2-0.5])\n        cylinder(h=2, d=8);\n    \n    // Mode button (yellow)\n    color(\"yellow\")\n    translate([-25, 0, case_thickness/2-0.5])\n        cylinder(h=2, d=6);\n    \n    // Calibration button (blue)\n    color(\"blue\")\n    translate([-25, 20, case_thickness/2-0.5])\n        cylinder(h=2, d=6);\n    \n    // Rotary dial\n    color(\"gray\")\n    translate([-35, 0, case_thickness/2-2])\n        cylinder(h=5, d=15);\n    color(\"black\")\n    translate([-35, 0, case_thickness/2])\n        cube([2, 10, 1], center=true);\n}\n\n// Probe connector BNC\nmodule bnc_connector() {\n    color(\"silver\")\n    translate([case_length/2-5, 0, 0])\n        rotate([90, 0, 0])\n        difference() {\n            union() {\n                cylinder(h=15, d=12);\n                translate([0, 0, 15])\n                    cylinder(h=5, d=8);\n            }\n            cylinder(h=20, d=6);\n        }\n}\n\n// Battery compartment\nmodule battery_door() {\n    color(\"black\")\n    translate([0, case_width/2-2, -case_thickness/2+3])\n        cube([40, 1, 15], center=true);\n    \n    // Screws\n    color(\"silver\")\n    for(x = [-15:30:15]) {\n        translate([x, case_width/2-1.5, -case_thickness/2+8])\n            cylinder(h=2, d=3);\n    }\n}\n\n// Handle\nmodule handle() {\n    color(\"darkolivegreen\")\n    translate([0, 0, case_thickness/2+10])\n        difference() {\n            hull() {\n                translate([case_length/2-20, 0, 0])\n                    sphere(d=10);\n                translate([-case_length/2+20, 0, 0])\n                    sphere(d=10);\n            }\n            translate([0, 0, -5])\n                cube([case_length-30, 20, 20], center=true);\n        }\n}\n\n// Warning label\nmodule warning_label() {\n    color(\"yellow\")\n    translate([0, case_width/2-1, case_thickness/2-5])\n        cube([25, 0.5, 10], center=true);\n    \n    color(\"black\")\n    translate([0, case_width/2-0.7, case_thickness/2-5])\n        cube([20, 0.2, 8], center=true);\n}\n\n// LED indicator\nmodule led_indicator() {\n    color(\"darkred\")\n    translate([25, case_width/2-8, case_thickness/2-1])\n        cylinder(h=2, d=5);\n}\n\n// Assemble the detector\nunion() {\n    main_case();\n    display();\n    controls();\n    bnc_connector();\n    battery_door();\n    handle();\n    warning_label();\n    led_indicator();\n}",
    "renders": true
  },
  {
    "electronic_device": "scanner",
    "openscad_code": "// Flatbed Scanner - Realistic Style, Medium Complexity\n// Suitable for 3D printing, ~90mm wide\n\n$fn = 32;  // Higher resolution for realism\n\n// Main colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_lid = [0.25, 0.25, 0.25];\ncolor_glass = [0.7, 0.85, 0.95, 0.3];\ncolor_buttons = [0.1, 0.1, 0.1];\ncolor_screen = [0, 0, 0];\ncolor_led = [0, 1, 0];\n\n// Main body\nmodule scanner_body() {\n    difference() {\n        // Main housing\n        color(color_body)\n        translate([0, 0, 10])\n            cube([90, 60, 20], center=true);\n        \n        // Recess for glass\n        translate([0, 0, 21])\n            cube([80, 50, 2], center=true);\n        \n        // Ventilation slots on sides\n        for (i = [-30:10:30]) {\n            translate([45, i, 10])\n                rotate([0, 90, 0])\n                    cylinder(h=2, r=1.5);\n            translate([-45, i, 10])\n                rotate([0, 90, 0])\n                    cylinder(h=2, r=1.5);\n        }\n    }\n}\n\n// Glass platen\nmodule glass_platen() {\n    color(color_glass)\n    translate([0, 0, 20.5])\n        cube([78, 48, 1], center=true);\n}\n\n// Scanner lid with hinge\nmodule scanner_lid() {\n    // Hinge\n    color(color_body)\n    translate([0, -31, 20])\n        cube([80, 2, 4], center=true);\n    \n    // Lid\n    color(color_lid)\n    translate([0, -31, 35])\n        cube([82, 58, 4], center=true);\n    \n    // Document pad\n    color([0.9, 0.9, 0.9])\n    translate([0, -31, 32])\n        cube([76, 54, 1], center=true);\n}\n\n// Control panel\nmodule control_panel() {\n    // Panel housing\n    color(color_body)\n    translate([0, 35, 15])\n        cube([60, 12, 8], center=true);\n    \n    // LCD screen\n    color(color_screen)\n    translate([-20, 35, 19.5])\n        cube([15, 8, 0.5], center=true);\n    \n    // Buttons\n    for (i = [0:3]) {\n        color(color_buttons)\n        translate([5 + i*8, 35, 19.5])\n            cylinder(h=0.5, r=2.5);\n    }\n    \n    // Power button\n    color([0.8, 0, 0])\n    translate([25, 35, 19.5])\n        cylinder(h=0.5, r=3.5);\n}\n\n// LED indicator\nmodule status_led() {\n    color(color_led)\n    translate([35, 35, 19.5])\n        cylinder(h=0.5, r=1.5);\n}\n\n// USB port\nmodule usb_port() {\n    color([0.1, 0.1, 0.1])\n    translate([45, 0, 10])\n        difference() {\n            cube([8, 12, 5], center=true);\n            translate([0, 0, 3])\n                cube([6, 10, 2], center=true);\n        }\n}\n\n// Power connector\nmodule power_connector() {\n    color([0.1, 0.1, 0.1])\n    translate([45, -15, 10])\n        difference() {\n            cylinder(h=8, r=4);\n            translate([0, 0, -1])\n                cylinder(h=10, r=2.5);\n        }\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    color([0.1, 0.1, 0.1])\n    for (x = [-35, 35])\n        for (y = [-20, 20])\n            translate([x, y, 0])\n                cylinder(h=2, r=3);\n}\n\n// Logo\nmodule logo() {\n    color([0.8, 0.8, 0.8])\n    translate([0, 0, 30.5])\n        linear_extrude(height=0.5)\n            text(\"SCAN\", size=8, halign=\"center\", valign=\"center\");\n}\n\n// Assemble scanner\nscanner_body();\nglass_platen();\nscanner_lid();\ncontrol_panel();\nstatus_led();\nusb_port();\npower_connector();\nrubber_feet();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "printer",
    "openscad_code": "// Compact Desktop Inkjet Printer - Realistic Style\n// Overall dimensions: 90mm x 120mm x 60mm\n\n$fn = 50;\n\n// Main colors\ncolor_body = [0.15,0.15,0.15];\ncolor_paper = [0.95,0.95,0.95];\ncolor_accent = [0.2,0.2,0.4];\ncolor_screen = [0.1,0.1,0.1];\ncolor_light = [0,1,0];\n\n// Main printer body\nmodule printer_body() {\n    difference() {\n        // Outer shell\n        color(color_body)\n        cube([90,120,60], center=true);\n        \n        // Paper tray cavity\n        translate([0,50,-30])\n            cube([85,20,15]);\n            \n        // Output tray cavity\n        translate([0,-50,-30])\n            cube([85,20,15]);\n    }\n}\n\n// Paper input tray\nmodule paper_tray() {\n    translate([0,55,-25])\n    color(color_paper)\n    cube([80,5,2]);\n}\n\n// Paper output tray\nmodule output_tray() {\n    translate([0,-55,-25])\n    color(color_paper)\n    cube([80,5,2]);\n}\n\n// Control panel\nmodule control_panel() {\n    translate([40,0,35])\n    rotate([0,30,0])\n    color(color_accent)\n    cube([20,60,10]);\n    \n    // LCD screen\n    translate([45,0,42])\n    color(color_screen)\n    cube([12,30,1]);\n    \n    // Buttons\n    for(i=[-1:1]) {\n        translate([45, i*8, 36])\n        color([0.8,0.8,0.8])\n        cylinder(h=2, r=3);\n    }\n}\n\n// USB port\nmodule usb_port() {\n    translate([45,60,0])\n    rotate([0,90,0])\n    color([0.3,0.3,0.3])\n    cube([8,15,6]);\n    \n    // USB connector hole\n    translate([45,60,0])\n    rotate([0,90,0])\n    color([0,0,0])\n    cube([6,10,4]);\n}\n\n// Power button\nmodule power_button() {\n    translate([0,60,25])\n    color([0.8,0,0])\n    cylinder(h=5, r=4);\n}\n\n// Status LED\nmodule status_led() {\n    translate([0,60,35])\n    color(color_light)\n    cylinder(h=2, r=2);\n}\n\n// Paper feed slot\nmodule paper_slot() {\n    difference() {\n        // Front face\n        translate([0,0,10])\n        color(color_body)\n        cube([85,120,5]);\n        \n        // Input slot\n        translate([0,45,-10])\n        cube([75,10,25]);\n        \n        // Output slot\n        translate([0,-45,-10])\n        cube([75,10,25]);\n    }\n}\n\n// Top cover\nmodule top_cover() {\n    translate([0,0,35])\n    color(color_body)\n    cube([85,115,3]);\n    \n    // Hinge detail\n    translate([0,60,32])\n    color([0.5,0.5,0.5])\n    cylinder(h=6, r=2);\n}\n\n// Brand logo\nmodule logo() {\n    translate([0,0,37])\n    rotate([0,0,0])\n    color([0.7,0.7,0.7])\n    cube([20,5,0.5]);\n}\n\n// Assembly\nprinter_body();\npaper_tray();\noutput_tray();\ncontrol_panel();\nusb_port();\npower_button();\nstatus_led();\npaper_slot();\ntop_cover();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "plotter",
    "openscad_code": "// Electronic Plotter Model - OpenSCAD\n// Medium complexity realistic style\n\n// Color definitions\n$fn=50;\n\n// Main dimensions\nbase_width = 80;\nbase_depth = 60;\nbase_height = 8;\nframe_height = 25;\narm_length = 45;\npen_holder_height = 15;\n\n// Base unit\nmodule base() {\n    color([0.2, 0.2, 0.2])\n    difference() {\n        cube([base_width, base_depth, base_height], center=true);\n        // Ventilation slots\n        for (i = [-2:2]) {\n            translate([i*15, 0, base_height/2-0.5])\n            cube([3, base_depth-10, 2], center=true);\n        }\n    }\n}\n\n// Frame structure\nmodule frame() {\n    color([0.8, 0.8, 0.8])\n    union() {\n        // Left support\n        translate([-base_width/2+5, 0, frame_height/2+base_height/2])\n        cube([4, base_depth-10, frame_height], center=true);\n        \n        // Right support\n        translate([base_width/2-5, 0, frame_height/2+base_height/2])\n        cube([4, base_depth-10, frame_height], center=true);\n        \n        // Top rail\n        translate([0, 0, frame_height+base_height/2-2])\n        cube([base_width, 4, 4], center=true);\n    }\n}\n\n// X-axis carriage\nmodule x_carriage() {\n    color([0.9, 0.9, 0.9])\n    translate([0, -base_depth/2+10, base_height+frame_height/2])\n    difference() {\n        cube([10, 8, frame_height-4], center=true);\n        // Cable channel\n        translate([0, 0, -frame_height/4])\n        cylinder(h=10, r=2, center=true);\n    }\n}\n\n// Y-axis arm\nmodule y_arm() {\n    color([0.7, 0.7, 0.8])\n    translate([0, -base_depth/2+10, base_height+frame_height+5])\n    rotate([90, 0, 0])\n    cylinder(h=arm_length, r=2, center=true);\n}\n\n// Pen holder assembly\nmodule pen_holder() {\n    color([0.3, 0.3, 0.3])\n    union() {\n        // Pen holder body\n        translate([0, arm_length/2-5, base_height+frame_height+5])\n        cube([6, 6, pen_holder_height], center=true);\n        \n        // Pen slot\n        translate([0, arm_length/2-5, base_height+frame_height+5-pen_holder_height/2])\n        cube([2, 2, 12], center=true);\n        \n        // LED indicator\n        color([0, 1, 0])\n        translate([3.5, arm_length/2-5, base_height+frame_height+5+pen_holder_height/4])\n        sphere(r=1);\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    color([0.1, 0.1, 0.1])\n    difference() {\n        translate([base_width/2-12, base_depth/2-12, base_height/2+1])\n        cube([20, 20, 2], center=true);\n        \n        // Display screen\n        color([0.2, 0.3, 0.5])\n        translate([base_width/2-12, base_depth/2-12, base_height/2+2.1])\n        cube([16, 12, 0.5], center=true);\n    }\n    \n    // Control buttons\n    for (i = [0:2]) {\n        color([0.5, 0.5, 0.5])\n        translate([base_width/2-12-5+i*5, base_depth/2-12+7, base_height/2+2.1])\n        cylinder(h=0.8, r=1.5);\n    }\n}\n\n// USB port\nmodule usb_port() {\n    color([0.1, 0.1, 0.1])\n    translate([base_width/2-2, -base_depth/2+5, base_height/2])\n    cube([8, 2, 3], center=true);\n}\n\n// Paper tray\nmodule paper_tray() {\n    color([0.9, 0.9, 0.9])\n    difference() {\n        translate([0, base_depth/2-2, base_height/2-2])\n        cube([base_width-10, 4, base_height-4], center=true);\n        \n        // Paper recess\n        translate([0, base_depth/2-2, base_height/2-4])\n        cube([base_width-14, 3, 2], center=true);\n    }\n}\n\n// Power connector\nmodule power_connector() {\n    color([0.2, 0.2, 0.2])\n    translate([-base_width/2+5, -base_depth/2+3, base_height/2])\n    cylinder(h=4, r=2.5);\n}\n\n// Assembly\nunion() {\n    base();\n    frame();\n    x_carriage();\n    y_arm();\n    pen_holder();\n    control_panel();\n    usb_port();\n    power_connector();\n    paper_tray();\n    \n    // Rubber feet\n    color([0.1, 0.1, 0.1])\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x*base_width/3, y*base_depth/3, -base_height/2+1])\n            cylinder(h=2, r=3);\n        }\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "copier",
    "openscad_code": "// Office Copier - Medium Complexity\n// Dimensions: 80 x 60 x 45 mm (L x W x H)\n\n// Main color constants\npaper_tray_color = [0.9, 0.9, 0.9];\nbody_color = [0.2, 0.2, 0.2];\ndisplay_color = [0.1, 0.1, 0.1];\nbutton_color = [0.3, 0.3, 0.3];\naccent_color = [0.8, 0.8, 0.8];\n\n// Main body\nmodule copier_body() {\n    color(body_color)\n    union() {\n        // Main chassis\n        cube([80, 60, 35], center=false);\n        \n        // Top cover with slight slope\n        translate([0, 0, 35])\n        cube([80, 60, 10], center=false);\n    }\n}\n\n// Paper tray\nmodule paper_tray() {\n    color(paper_tray_color)\n    translate([5, 5, 25])\n    cube([70, 50, 2]);\n}\n\n// Output tray\nmodule output_tray() {\n    color(paper_tray_color)\n    translate([5, 55, 30])\n    cube([70, 3, 5]);\n}\n\n// Control panel\nmodule control_panel() {\n    color(accent_color)\n    translate([10, 2, 40])\n    cube([60, 10, 8]);\n    \n    // Display screen\n    color(display_color)\n    translate([15, 3, 49])\n    cube([25, 8, 0.5]);\n    \n    // Buttons\n    for(i = [0:4]) {\n        color(button_color)\n        translate([45 + i*3, 5, 49])\n        cube([2, 6, 0.5]);\n    }\n}\n\n// Scanner bed glass\nmodule scanner_bed() {\n    color([0.7, 0.8, 0.9, 0.5])\n    translate([10, 10, 45])\n    cube([60, 40, 0.5]);\n}\n\n// Ventilation grilles\nmodule vents() {\n    color(body_color)\n    for(i = [0:3]) {\n        translate([5, 30, 10 + i*7])\n        cube([70, 2, 2]);\n    }\n}\n\n// USB port\nmodule usb_port() {\n    color([0.1, 0.1, 0.1])\n    translate([75, 30, 20])\n    cube([3, 8, 4]);\n}\n\n// Power button\nmodule power_button() {\n    color([0.9, 0.2, 0.2])\n    translate([78, 10, 40])\n    cylinder(h=2, r=2);\n}\n\n// Paper guides\nmodule paper_guides() {\n    color(accent_color)\n    // Left guide\n    translate([5, 5, 27])\n    cube([1, 50, 3]);\n    \n    // Right guide\n    translate([74, 5, 27])\n    cube([1, 50, 3]);\n}\n\n// Status LEDs\nmodule status_leds() {\n    // Green ready LED\n    color([0, 1, 0])\n    translate([40, 1, 49])\n    sphere(r=1);\n    \n    // Orange warning LED\n    color([1, 0.5, 0])\n    translate([35, 1, 49])\n    sphere(r=1);\n}\n\n// Document feeder (ADF)\nmodule adf() {\n    color(body_color)\n    translate([15, 58, 45])\n    cube([50, 2, 8]);\n    \n    // ADF tray\n    color(paper_tray_color)\n    translate([15, 60, 47])\n    cube([50, 5, 1]);\n}\n\n// Main assembly\nunion() {\n    copier_body();\n    paper_tray();\n    output_tray();\n    control_panel();\n    scanner_bed();\n    vents();\n    usb_port();\n    power_button();\n    paper_guides();\n    status_leds();\n    adf();\n}",
    "renders": true
  },
  {
    "electronic_device": "fax",
    "openscad_code": "// Realistic Fax Machine - Medium Complexity\n// Overall dimensions: 90mm x 70mm x 50mm\n\n// Main body module\nmodule fax_body() {\n    difference() {\n        // Main chassis\n        color([0.85, 0.85, 0.85])  // Light gray\n        cube([90, 70, 50], center=true);\n        \n        // Paper tray cutout\n        translate([0, -25, 15])\n        cube([75, 30, 10], center=true);\n    }\n}\n\n// Paper tray\nmodule paper_tray() {\n    color([0.7, 0.7, 0.7])  // Darker gray\n    translate([0, -25, 5])\n    cube([73, 28, 8], center=true);\n}\n\n// Control panel\nmodule control_panel() {\n    color([0.2, 0.2, 0.2])  // Black\n    translate([0, 20, 25])\n    cube([60, 15, 5], center=true);\n}\n\n// LCD display\nmodule lcd_display() {\n    color([0.1, 0.1, 0.1])  // Dark LCD\n    translate([0, 20, 28])\n    cube([40, 8, 1], center=true);\n    \n    // LCD screen glow\n    color([0.2, 0.3, 0.5, 0.3])\n    translate([0, 20, 28.5])\n    cube([38, 6, 0.5], center=true);\n}\n\n// Buttons module with grid pattern\nmodule buttons() {\n    for(x = [-12:6:12]) {\n        for(y = [14:4:22]) {\n            color([0.3, 0.3, 0.3])  // Dark gray\n            translate([x, y, 28.5])\n            cylinder(h=1, r=2, $fn=16);\n        }\n    }\n}\n\n// Number pad\nmodule number_pad() {\n    for(x = [-8:8:8]) {\n        for(y = [-8:8:8]) {\n            color([0.2, 0.2, 0.2])  // Black\n            translate([x, y - 15, 28.5])\n            cylinder(h=1, r=3, $fn=16);\n        }\n    }\n}\n\n// Handset cradle\nmodule handset_cradle() {\n    color([0.15, 0.15, 0.15])  // Very dark gray\n    translate([35, 0, 25])\n    cube([20, 10, 3], center=true);\n    \n    // Cradle indentations\n    translate([35, 0, 26.5])\n    cylinder(h=1, r=4, $fn=32);\n}\n\n// Handset\nmodule handset() {\n    color([0.15, 0.15, 0.15])  // Very dark gray\n    translate([35, 15, 35])\n    rotate([0, 90, 0])\n    cylinder(h=30, r=4, $fn=32);\n    \n    // Handset cord\n    color([0.1, 0.1, 0.1])  // Black\n    translate([35, 15, 35])\n    rotate([90, 0, 0])\n    cylinder(h=15, r=1, $fn=8);\n}\n\n// Paper feed slot\nmodule paper_feed() {\n    color([0.1, 0.1, 0.1])  // Black\n    translate([0, -25, 20])\n    cube([65, 2, 2], center=true);\n}\n\n// Output tray\nmodule output_tray() {\n    color([0.7, 0.7, 0.7])  // Darker gray\n    translate([0, 25, 5])\n    cube([80, 20, 2], center=true);\n}\n\n// LED indicators\nmodule leds() {\n    // Green LED\n    color([0, 1, 0])  // Green\n    translate([-30, 20, 28.5])\n    cylinder(h=1, r=1.5, $fn=16);\n    \n    // Red LED\n    color([1, 0, 0])  // Red\n    translate([-20, 20, 28.5])\n    cylinder(h=1, r=1.5, $fn=16);\n}\n\n// USB port\nmodule usb_port() {\n    color([0.1, 0.1, 0.1])  // Black\n    translate([-42, 0, 10])\n    cube([2, 8, 4], center=true);\n}\n\n// Phone line port\nmodule phone_port() {\n    color([0.1, 0.1, 0.1])  // Black\n    translate([-42, -15, 10])\n    cube([2, 8, 4], center=true);\n}\n\n// Power connector\nmodule power_port() {\n    color([0.1, 0.1, 0.1])  // Black\n    translate([-42, 15, 10])\n    cylinder(h=2, r=4, $fn=16);\n}\n\n// Assemble the fax machine\nfax_body();\npaper_tray();\ncontrol_panel();\nlcd_display();\nbuttons();\nnumber_pad();\nhandset_cradle();\nhandset();\npaper_feed();\noutput_tray();\nleds();\nusb_port();\nphone_port();\npower_port();",
    "renders": true
  },
  {
    "electronic_device": "projector",
    "openscad_code": "// Projector with realistic styling - medium complexity\n// Overall dimensions: 120mm x 80mm x 40mm\n\n// Color definitions\n$fn = 32;\n\n// Main body\nmodule main_body() {\n    color(\"lightgray\") {\n        difference() {\n            // Main chassis\n            cube([120, 80, 40], center = true);\n            \n            // Top ventilation slots\n            for (x = [-50:10:50]) {\n                translate([x, 0, 20])\n                    cube([6, 70, 3], center = true);\n            }\n            \n            // Side ventilation\n            for (y = [-30:10:30]) {\n                translate([0, y, 0])\n                    rotate([90, 0, 0])\n                    cylinder(h = 120, r = 2, center = true);\n            }\n        }\n    }\n}\n\n// Lens assembly\nmodule lens() {\n    color(\"black\") {\n        translate([-65, 0, 0])\n        rotate([0, 90, 0])\n        union() {\n            // Outer lens barrel\n            cylinder(h = 25, r = 15);\n            \n            // Inner lens\n            translate([0, 0, 25])\n            cylinder(h = 5, r = 12);\n            \n            // Focus ring\n            translate([0, 0, 10])\n            cylinder(h = 8, r = 16);\n            \n            // Lens glass\n            color(\"darkblue\") {\n                translate([0, 0, 29])\n                cylinder(h = 1, r = 11);\n            }\n        }\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    color(\"darkgray\") {\n        translate([50, 0, 15])\n        cube([30, 60, 5], center = true);\n        \n        // Power button\n        color(\"red\") {\n            translate([50, 20, 18])\n            cylinder(h = 2, r = 4);\n        }\n        \n        // LED indicator\n        color(\"green\") {\n            translate([50, -20, 18])\n            cylinder(h = 1, r = 2);\n        }\n        \n        // Menu buttons\n        for (i = [-1:1]) {\n            color(\"black\") {\n                translate([50, i * 8, 18])\n                cube([6, 4, 2], center = true);\n            }\n        }\n    }\n}\n\n// Connection ports\nmodule ports() {\n    color(\"black\") {\n        translate([0, 40, 15])\n        rotate([0, 90, 0])\n        for (i = [0:3]) {\n            translate([i * 8 - 12, 0, 0])\n            cylinder(h = 10, r = 3.5);\n        }\n    }\n}\n\n// Adjustable feet\nmodule feet() {\n    color(\"black\") {\n        // Front foot\n        translate([0, 35, -25])\n        cylinder(h = 10, r = 5);\n        \n        // Rear feet\n        for (x = [-40, 40]) {\n            translate([x, -35, -25])\n            cylinder(h = 8, r = 5);\n        }\n    }\n}\n\n// Cooling vents detail\nmodule cooling_vents() {\n    color(\"darkgray\") {\n        translate([0, 0, 20])\n        for (i = [-4:4]) {\n            translate([i * 12, 0, 0])\n            cube([8, 70, 2], center = true);\n        }\n    }\n}\n\n// Brand label\nmodule brand_label() {\n    color(\"white\") {\n        translate([0, 0, 21])\n        cube([20, 10, 0.5], center = true);\n    }\n}\n\n// IR sensor\nmodule ir_sensor() {\n    color(\"darkred\") {\n        translate([55, 0, 15])\n        sphere(r = 2);\n    }\n}\n\n// Assembly\nmain_body();\nlens();\ncontrol_panel();\nports();\nfeet();\ncooling_vents();\nbrand_label();\nir_sensor();",
    "renders": true
  },
  {
    "electronic_device": "display",
    "openscad_code": "// Realistic Medium-Complexity 3D Printable Smartphone Display Stand\n// Dimensions: 100mm x 50mm x 15mm\n// Includes screen, buttons, ports, camera, speaker grill\n\n$fn = 64; // Smooth curves\n\n// Main body module\nmodule smartphone() {\n    // Phone body\n    color(\"#1a1a1a\")\n    difference() {\n        // Main rectangular body with rounded edges\n        minkowski() {\n            cube([80, 40, 8], center=true);\n            cylinder(h=1, r=2);\n        }\n        \n        // Screen cutout\n        translate([0, 0, 4.5])\n            cube([72, 36, 2], center=true);\n    }\n    \n    // Screen glass\n    color(\"#003366\")\n    translate([0, 0, 4])\n        cube([72, 36, 0.5], center=true);\n    \n    // Screen display area\n    color(\"#000033\")\n    translate([0, 0, 3.5])\n        cube([70, 34, 0.3], center=true);\n    \n    // Home button\n    color(\"#333333\")\n    translate([0, -15, 4.5])\n        cylinder(h=1, r=3);\n    \n    // Volume buttons\n    color(\"#222222\")\n    for (y = [12:5:22]) {\n        translate([-41, y, 0])\n            cube([2, 3, 1], center=true);\n    }\n    \n    // Power button\n    color(\"#222222\")\n    translate([41, 10, 0])\n        cube([2, 6, 1], center=true);\n    \n    // Camera assembly\n    color(\"#000000\")\n    translate([-25, 15, 4.5])\n        cylinder(h=1, r=3.5);\n    \n    // Camera lens\n    color(\"#001122\")\n    translate([-25, 15, 5.5])\n        cylinder(h=0.5, r=2);\n    \n    // Front speaker grill\n    color(\"#111111\")\n    translate([0, 18, 4.5])\n        cube([20, 2, 0.5], center=true);\n    \n    // Speaker grill holes\n    for (x = [-10:2:10]) {\n        color(\"#000000\")\n        translate([x, 18, 5.1])\n            cube([0.8, 1.5, 0.5], center=true);\n    }\n    \n    // Charging port\n    color(\"#000000\")\n    translate([0, -20, -3.5])\n        cube([10, 2, 2], center=true);\n    \n    // Headphone jack\n    color(\"#000000\")\n    translate([-15, -20, -3.5])\n        cylinder(h=2, r=1.75);\n    \n    // Microphone hole\n    color(\"#000000\")\n    translate([15, -20, -3.5])\n        cylinder(h=2, r=0.5);\n    \n    // Flash LED\n    color(\"#ffcc00\")\n    translate([25, 15, 4.5])\n        cylinder(h=0.5, r=1);\n    \n    // Proximity sensor\n    color(\"#333333\")\n    translate([10, 18, 4.5])\n        cylinder(h=0.5, r=0.75);\n}\n\n// Stand base for 3D printing stability\nmodule stand() {\n    color(\"#666666\")\n    difference() {\n        // Base platform\n        translate([0, 0, -7.5])\n            cube([100, 50, 3], center=true);\n        \n        // Cable routing channel\n        translate([0, -25, -7.5])\n            cube([6, 3, 1.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Phone body\n    smartphone();\n    \n    // Stand\n    stand();\n    \n    // Support ribs for printing\n    color(\"#444444\")\n    for (x = [-30:20:30]) {\n        translate([x, 0, -4])\n            cube([2, 42, 2], center=true);\n    }\n}\n\n// Print orientation indicator arrow\ncolor(\"#ffffff\")\ntranslate([0, -15, -6])\n    rotate([0, 0, 90])\n    linear_extrude(height=0.5)\n    text(\"FRONT\", size=5, halign=\"center\");",
    "renders": true
  },
  {
    "electronic_device": "monitor",
    "openscad_code": "// Realistic Monitor - 70 mm wide\n// Medium complexity with detailed features\n\n$fn = 64;\n\n// Colors\nscreen_color = [0, 0, 0];\nbezel_color = [0.15, 0.15, 0.15];\nstand_color = [0.1, 0.1, 0.1];\nport_color = [0.2, 0.2, 0.2];\nindicator_color = [0, 1, 0];\n\nmodule monitor_assembly() {\n    union() {\n        // Main screen assembly\n        translate([0, 0, 20])\n            screen_assembly();\n        \n        // Stand\n        monitor_stand();\n        \n        // Back ports\n        back_ports();\n    }\n}\n\nmodule screen_assembly() {\n    difference() {\n        union() {\n            // Bezel frame\n            color(bezel_color)\n                cube([70, 45, 5], center=true);\n            \n            // Front lip\n            translate([0, 0, 2.5])\n                color(bezel_color)\n                    cube([68, 43, 2], center=true);\n            \n            // Brand logo bump\n            translate([25, -20, 3])\n                color([0.8, 0.8, 0.8])\n                    cube([12, 3, 0.5], center=true);\n        }\n        \n        // Screen cutout\n        translate([0, 0, 1])\n            cube([64, 39, 6], center=true);\n    }\n    \n    // Actual screen\n    color(screen_color)\n        cube([64, 39, 0.5], center=true);\n    \n    // Power indicator LED\n    translate([30, 20, 3])\n        color(indicator_color)\n            cylinder(h=0.5, r=1, center=true);\n    \n    // Control buttons\n    for(i = [0:2]) {\n        translate([-25 + i*5, 20, 3])\n            color([0.3, 0.3, 0.3])\n                cylinder(h=0.7, r=1.2, center=true);\n    }\n}\n\nmodule monitor_stand() {\n    // Stand neck\n    translate([0, 15, 10])\n        color(stand_color)\n            cube([8, 10, 20], center=true);\n    \n    // Stand base\n    difference() {\n        translate([0, 25, 0])\n            color(stand_color)\n                cube([35, 15, 4], center=true);\n        \n        // Cable management hole\n        translate([0, 25, 0])\n            rotate([90, 0, 0])\n                cylinder(h=15, r=2, center=true);\n    }\n    \n    // Hinge mechanism\n    translate([0, 10, 20])\n        union() {\n            color(stand_color)\n                cube([10, 10, 2], center=true);\n            translate([0, 0, 1])\n                rotate([90, 0, 0])\n                    cylinder(h=10, r=2, center=true);\n        }\n}\n\nmodule back_ports() {\n    translate([0, 0, 22.5])\n        rotate([180, 0, 0])\n            union() {\n                // Main back cover\n                color(bezel_color)\n                    cube([70, 45, 5], center=true);\n                \n                // Ventilation slots\n                for(i = [-3:3]) {\n                    translate([i*8, 0, 2.5])\n                        color(port_color)\n                            cube([5, 30, 1], center=true);\n                }\n                \n                // Port cluster\n                translate([-25, 0, 2.5])\n                    port_cluster();\n                \n                // Power connector\n                translate([25, 0, 2.5])\n                    color(port_color)\n                        cube([10, 8, 2], center=true);\n            }\n}\n\nmodule port_cluster() {\n    difference() {\n        color(port_color)\n            cube([15, 20, 2], center=true);\n        \n        // Individual port holes\n        for(i = [-1.5:1.5]) {\n            translate([0, i*4, 1])\n                cube([12, 2, 2], center=true);\n        }\n    }\n}\n\n// Render the complete monitor\nmonitor_assembly();",
    "renders": true
  },
  {
    "electronic_device": "screen",
    "openscad_code": "// Realistic medium-complexity 3D-printable smartphone model\n// Approx. 75 mm tall, 36 mm wide, 8 mm thick\n// Ready for FDM printing in place (no supports needed)\n\n$fn = 50; // Smooth curves\n\n// Main body color\ncolor(\"silver\") smartphone();\n\nmodule smartphone() {\n    // --- Main chassis --------------------------------------------------------\n    difference() {\n        // Outer rounded shell\n        minkowski() {\n            cube([70, 36, 8], center = true);\n            sphere(2); // 2 mm radius fillets\n        }\n\n        // Hollow inside for electronics\n        translate([0, 0, 1]) // Leave 1 mm bottom wall\n            cube([66, 32, 7], center = true);\n\n        // Speaker grille holes (bottom)\n        for (x = [-30:5:30])\n            translate([x, -19, -4])\n                cylinder(h = 3, d = 1.5, center = true);\n\n        // Microphone hole (bottom, center)\n        translate([0, -19, -4])\n            cylinder(h = 3, d = 1, center = true);\n    }\n\n    // --- Front glass ---------------------------------------------------------\n    translate([0, 0, 4])\n        color(\"gainsboro\")\n            cube([68, 34, 0.5], center = true);\n\n    // --- Display screen ------------------------------------------------------\n    translate([0, 0, 4.3])\n        color(\"black\")\n            cube([64, 32, 0.2], center = true);\n\n    // --- Top speaker slit ----------------------------------------------------\n    translate([0, 16.5, 4.3])\n        color(\"dimgray\")\n            cube([20, 1, 0.5], center = true);\n\n    // --- Front camera --------------------------------------------------------\n    translate([20, 16, 4.3])\n        color(\"black\")\n            cylinder(h = 0.5, d = 3, center = true);\n\n    // --- Volume buttons (right side) -----------------------------------------\n    difference() {\n        translate([36, 8, 1])\n            color(\"gray\")\n                cube([1.5, 8, 2], center = true);\n        // Slight indent for tactile feel\n        translate([36.5, 8, 1])\n            cube([0.5, 7, 1.8], center = true);\n    }\n\n    difference() {\n        translate([36, -8, 1])\n            color(\"gray\")\n                cube([1.5, 8, 2], center = true);\n        translate([36.5, -8, 1])\n            cube([0.5, 7, 1.8], center = true);\n    }\n\n    // --- Power button (right side, top) --------------------------------------\n    difference() {\n        translate([36, 15, 1])\n            color(\"gray\")\n                cube([1.5, 4, 2], center = true);\n        translate([36.5, 15, 1])\n            cube([0.5, 3.5, 1.8], center = true);\n    }\n\n    // --- USB-C port (bottom) --------------------------------------------------\n    difference() {\n        translate([0, -18.5, -4])\n            cube([8, 1.5, 2], center = true);\n        // Chamfer entry\n        translate([0, -18.5, -3])\n            cube([7, 1, 1], center = true);\n    }\n\n    // --- Rear camera bump -----------------------------------------------------\n    translate([-20, 10, 4.5])\n        color(\"black\")\n            cylinder(h = 1, d = 10, center = true);\n\n    // Camera lens\n    translate([-20, 10, 5.3])\n        color(\"royalblue\")\n            cylinder(h = 0.3, d = 8, center = true);\n\n    // LED flash\n    translate([-20, -5, 4.5])\n        color(\"lemonchiffon\")\n            cylinder(h = 0.5, d = 4, center = true);\n\n    // --- Logo placeholder -----------------------------------------------------\n    translate([0, 0, 5])\n        color(\"gray\")\n            linear_extrude(height = 0.2)\n                text(\"PHONE\", size = 6, halign = \"center\", valign = \"center\");\n}",
    "renders": true
  },
  {
    "electronic_device": "panel",
    "openscad_code": "// Panel-mount audio analyzer with LED bar graph\n// Overall dimensions: 90mm wide x 50mm high x 15mm deep\n\n// Main panel body\ncolor(\"gray40\") difference() {\n    translate([-45,-25,-7]) cube([90,50,14]);\n    // Mounting holes (4mm diameter, 5mm from edges)\n    for(dx=[-35,35], dy=[-15,15])\n        translate([dx,dy,-8]) cylinder(h=16,d=4,$fn=32);\n}\n\n// Recessed display area\ncolor(\"black\") translate([-40,-20,-6.5]) cube([80,25,1]);\n\n// 10-segment LED bar graph (green to yellow to red)\nmodule led_bar() {\n    for(i=[0:9]) {\n        hue = i<7 ? 0.33 : i<9 ? 0.16 : 0.0;\n        color([hue,1,1]) translate([-36+i*7.5,-18,-5.5]) cube([5,20,0.5]);\n    }\n}\nled_bar();\n\n// Power button (red push button)\ncolor(\"red\") difference() {\n    translate([20,-10,-5]) cylinder(h=8,d=8,$fn=32);\n    translate([20,-10,-6]) cylinder(h=10,d=6,$fn=32);\n}\n\n// Control knob (black)\ncolor(\"black\") difference() {\n    rotate([0,0,0]) translate([30,-10,-4]) {\n        cylinder(h=6,d=12,$fn=32);\n        translate([0,0,6]) cylinder(h=2,d=8,$fn=32);\n    }\n    translate([30,-10,-5]) cylinder(h=8,d=4,$fn=32);\n}\n\n// Audio input jack (3.5mm stereo)\ncolor(\"silver\") difference() {\n    translate([-30,10,-5]) {\n        cylinder(h=8,d=8,$fn=32);\n        translate([0,0,8]) cylinder(h=2,d=6,$fn=32);\n    }\n    translate([-30,10,-6]) cylinder(h=10,d=3.5,$fn=32);\n}\n\n// USB-C port\ncolor(\"black\") difference() {\n    translate([15,10,-5]) cube([12,7,1.5]);\n    translate([15,10,-5.5]) cube([12,7,3]);\n}\n\n// Label area\ncolor(\"white\") translate([-40,-24,-6]) cube([80,3,0.2]);\n\n// Mounting tabs\ncolor(\"gray40\") for(side=[-1,1]) {\n    translate([side*50,0,-3]) cube([10,20,6]);\n    translate([side*55,-10,-3]) cube([5,40,6]);\n}",
    "renders": true
  },
  {
    "electronic_device": "camera",
    "openscad_code": "// Realistic Medium-Complexity Camera Model for 3D Printing\n// Overall size: ~70mm wide, ~45mm deep, ~50mm tall\n\n// Main body shell thickness\nwall = 2;\n\n// Main body\nmodule camera_body() {\n    difference() {\n        // Outer shell\n        color(\"black\")\n        cube([70, 45, 30], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 1])\n        cube([70-wall*2, 45-wall*2, 30-wall], center=true);\n    }\n}\n\n// Front lens assembly\nmodule lens() {\n    translate([0, 25, 8])\n    rotate([90, 0, 0])\n    union() {\n        // Lens barrel\n        color(\"darkgray\")\n        cylinder(h=20, d1=20, d2=18, $fn=32);\n        \n        // Front lens element\n        translate([0, 0, 20])\n        color(\"lightblue\")\n        cylinder(h=2, d=18, $fn=32);\n        \n        // Focus ring\n        translate([0, 0, 8])\n        color(\"gray\")\n        cylinder(h=5, d=22, $fn=64);\n    }\n}\n\n// Rear LCD screen\nmodule screen() {\n    translate([0, -25, 8])\n    rotate([0, 180, 0])\n    union() {\n        // Screen bezel\n        color(\"black\")\n        cube([40, 25, 1], center=true);\n        \n        // Actual screen\n        translate([0, 0, 0.6])\n        color(\"blue\")\n        cube([38, 23, 0.5], center=true);\n    }\n}\n\n// Top controls\nmodule top_controls() {\n    translate([0, 0, 15.5])\n    union() {\n        // Shutter button\n        translate([-15, 0, 0])\n        color(\"red\")\n        cylinder(h=3, d=8, $fn=32);\n        \n        // Mode dial\n        translate([15, 0, 0])\n        color(\"gray\")\n        cylinder(h=4, d=12, $fn=32);\n        \n        // Power switch\n        translate([0, 10, 0])\n        color(\"green\")\n        cube([8, 3, 2], center=true);\n    }\n}\n\n// Side ports\nmodule side_ports() {\n    translate([35.5, 0, 0])\n    rotate([0, 90, 0])\n    union() {\n        // USB-C port\n        translate([0, 0, 5])\n        color(\"gray\")\n        cube([6, 2, 3], center=true);\n        \n        // HDMI port\n        translate([0, 0, 0])\n        color(\"gray\")\n        cube([10, 2, 5], center=true);\n        \n        // SD card slot\n        translate([0, 0, -5])\n        color(\"gray\")\n        cube([15, 1, 5], center=true);\n    }\n}\n\n// Front grip\nmodule grip() {\n    difference() {\n        translate([-30, 20, 0])\n        color(\"black\")\n        cube([15, 25, 28], center=true);\n        \n        // Grip texture grooves\n        for(i = [-1:1]) {\n            translate([-30, 20 + i*8, 0])\n            cube([15, 1, 28], center=true);\n        }\n    }\n}\n\n// Flash hot shoe\nmodule hot_shoe() {\n    translate([0, 0, 30.5])\n    color(\"silver\")\n    union() {\n        cube([20, 2, 4], center=true);\n        translate([0, 0, 2])\n        cube([16, 1.5, 4], center=true);\n    }\n}\n\n// Viewfinder\nmodule viewfinder() {\n    translate([0, 15, 25])\n    union() {\n        // Eyepiece\n        color(\"black\")\n        cube([20, 8, 10], center=true);\n        \n        // Optical window\n        translate([0, 4, 5])\n        color(\"darkgray\")\n        cube([18, 1, 8], center=true);\n    }\n}\n\n// LED indicators\nmodule indicators() {\n    translate([25, -25, 8])\n    rotate([0, 180, 0])\n    union() {\n        // Recording LED\n        color(\"red\")\n        translate([0, 0, 0])\n        cylinder(h=1, d=3, $fn=16);\n        \n        // AF assist LED\n        color(\"yellow\")\n        translate([-5, 0, 0])\n        cylinder(h=1, d=3, $fn=16);\n    }\n}\n\n// Assemble the camera\ncamera_body();\nlens();\nscreen();\ntop_controls();\nside_ports();\ngrip();\nhot_shoe();\nviewfinder();\nindicators();",
    "renders": true
  },
  {
    "electronic_device": "webcam",
    "openscad_code": "// Webcam with realistic styling - medium complexity\n// Features: lens, LED indicators, microphone holes, USB port, mounting clip\n\n// Color scheme\n$fn = 50;\n\n// Main body dimensions\nbody_width = 40;\nbody_height = 30;\nbody_depth = 50;\n\n// Lens dimensions\nlens_diameter = 20;\nlens_depth = 8;\n\n// LED indicators\nled_diameter = 3;\n\n// USB port\nusb_width = 12;\nusb_height = 5;\nusb_depth = 10;\n\n// Mounting clip\nclip_width = 30;\nclip_height = 25;\nclip_thickness = 4;\n\nmodule webcam_body() {\n    // Main camera body\n    color([0.15, 0.15, 0.15])  // Dark gray\n    difference() {\n        cube([body_width, body_height, body_depth], center=true);\n        \n        // Front face rounding\n        translate([0, body_height/2 - 2, body_depth/2 - 2])\n            cube([body_width - 4, 4, 4], center=true);\n        translate([0, -body_height/2 + 2, body_depth/2 - 2])\n            cube([body_width - 4, 4, 4], center=true);\n    }\n}\n\nmodule lens_assembly() {\n    // Lens ring\n    color([0.3, 0.3, 0.3])  // Medium gray\n    difference() {\n        cylinder(h=5, d=lens_diameter + 6);\n        cylinder(h=6, d=lens_diameter + 2);\n    }\n    \n    // Lens glass\n    color([0.1, 0.1, 0.1])  // Black\n    translate([0, 0, 2.5])\n        cylinder(h=1, d=lens_diameter);\n    \n    // Lens inner ring\n    color([0.05, 0.05, 0.05])\n    translate([0, 0, 3.5])\n        cylinder(h=2, d=lens_diameter - 4);\n}\n\nmodule led_indicators() {\n    // Power LED (blue)\n    color([0, 0.3, 0.8])\n    translate([10, body_height/2 - 3, body_depth/2 - 1])\n        cylinder(h=1, d=led_diameter);\n    \n    // Recording LED (red)\n    color([0.8, 0, 0])\n    translate([5, body_height/2 - 3, body_depth/2 - 1])\n        cylinder(h=1, d=led_diameter);\n}\n\nmodule microphone_holes() {\n    // Left microphone holes\n    color([0.1, 0.1, 0.1])\n    for(i = [-2:2]) {\n        translate([-body_width/2 + 5, i*3, body_depth/2 - 1])\n            cylinder(h=2, d=1.5);\n    }\n    \n    // Right microphone holes\n    for(i = [-2:2]) {\n        translate([body_width/2 - 5, i*3, body_depth/2 - 1])\n            cylinder(h=2, d=1.5);\n    }\n}\n\nmodule usb_port() {\n    // USB port housing\n    color([0.2, 0.2, 0.2])\n    translate([0, -body_height/2 - 1, -body_depth/2 + 5])\n        cube([usb_width, usb_height, usb_depth], center=true);\n    \n    // USB port opening\n    color([0.05, 0.05, 0.05])\n    translate([0, -body_height/2 - 2, -body_depth/2 + 5])\n        cube([usb_width - 2, usb_height - 1, usb_depth], center=true);\n}\n\nmodule mounting_clip() {\n    // Clip base\n    color([0.25, 0.25, 0.25])\n    translate([0, -body_height/2 - clip_height/2 - 2, -body_depth/2 + 10])\n        cube([clip_width, clip_height, clip_thickness], center=true);\n    \n    // Clip grip teeth\n    color([0.2, 0.2, 0.2])\n    for(i = [-1:1]) {\n        translate([i*10, -body_height/2 - 2, -body_depth/2 + 10])\n            cube([2, 4, clip_thickness + 2], center=true);\n    }\n    \n    // Clip spring area\n    color([0.3, 0.3, 0.3])\n    translate([0, -body_height/2 - clip_height - 3, -body_depth/2 + 10])\n        cube([clip_width - 10, 3, clip_thickness/2], center=true);\n}\n\nmodule brand_logo() {\n    // Simple \"CAM\" text as logo\n    color([0.4, 0.4, 0.4])\n    translate([0, 0, body_depth/2 + 0.1])\n        linear_extrude(height=0.5) {\n            text(\"CAM\", size=6, halign=\"center\", valign=\"center\");\n        }\n}\n\n// Assemble the webcam\ntranslate([0, 0, body_depth/2])\n    webcam_body();\n\n// Position lens at front\ntranslate([0, 0, body_depth/2 + 2.5])\n    rotate([90, 0, 0])\n        lens_assembly();\n\n// Add LED indicators\nled_indicators();\n\n// Add microphone holes\nmicrophone_holes();\n\n// Add USB port\nusb_port();\n\n// Add mounting clip\nmounting_clip();\n\n// Add brand logo\nbrand_logo();",
    "renders": true
  },
  {
    "electronic_device": "touchpad",
    "openscad_code": "// Touchpad Electronic Device - Realistic Style, Medium Complexity\n// Dimensions: 105mm x 70mm x 8mm\n\n// Color definitions\n$fn = 50;\n\nmodule touchpad_device() {\n    // Main body - slightly curved top surface\n    difference() {\n        // Base chassis with rounded edges\n        union() {\n            // Main body\n            translate([0, 0, 4])\n                minkowski() {\n                    cube([100, 65, 6], center = true);\n                    sphere(2);\n                }\n            \n            // Bottom plate\n            translate([0, 0, 0.5])\n                cube([100, 65, 1], center = true);\n        }\n        \n        // Hollow out inside\n        translate([0, 0, 5])\n            minkowski() {\n                cube([94, 59, 8], center = true);\n                sphere(1.5);\n            }\n    }\n    \n    // Touch surface - glass-like top\n    color([0.9, 0.9, 0.95, 0.7])\n    translate([0, 10, 7.5])\n        cube([85, 45, 0.5], center = true);\n    \n    // Click buttons\n    color([0.2, 0.2, 0.2])\n    for (x = [-25, 25]) {\n        translate([x, -25, 7])\n            cube([30, 10, 0.8], center = true);\n    }\n    \n    // LED indicators\n    color([0, 1, 0])\n    translate([-40, -30, 7.5])\n        cylinder(h = 0.5, d = 3);\n    \n    color([0, 0.5, 1])\n    translate([-40, -35, 7.5])\n        cylinder(h = 0.5, d = 3);\n    \n    // USB-C port\n    color([0.1, 0.1, 0.1])\n    translate([48, 0, 3])\n        rotate([90, 0, 0])\n        cube([8, 2.5, 5], center = true);\n    \n    // Rubber feet\n    color([0.1, 0.1, 0.1])\n    for (x = [-40, 40])\n    for (y = [-25, 25]) {\n        translate([x, y, 0])\n            cylinder(h = 1, d = 5);\n    }\n    \n    // Brand text area\n    color([0.3, 0.3, 0.3])\n    translate([0, 35, 7.5])\n        cube([30, 5, 0.3], center = true);\n    \n    // Scroll area indicators\n    color([0.7, 0.7, 0.7])\n    translate([42, 10, 7.5])\n        cube([3, 35, 0.2], center = true);\n    \n    // Power button\n    color([0.8, 0, 0])\n    translate([40, -30, 7.5])\n        cylinder(h = 0.8, d = 5);\n    \n    // Side buttons for gestures\n    color([0.15, 0.15, 0.15])\n    for (i = [-1:1]) {\n        translate([47, i * 15, 5])\n            rotate([0, 90, 0])\n            cylinder(h = 5, d = 4);\n    }\n}\n\n// Render the complete device\ncolor([0.2, 0.2, 0.2])\ntouchpad_device();",
    "renders": true
  },
  {
    "electronic_device": "trackpad",
    "openscad_code": "// Trackpad Electronic Device - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm x 80mm x 8mm\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\n// Main body module\nmodule trackpad_body() {\n    color(\"silver\", 0.8)\n    difference() {\n        // Main chassis\n        translate([0, 0, 4])\n        minkowski() {\n            cube([120, 80, 6], center=true);\n            sphere(1);\n        }\n        \n        // Top surface recess\n        translate([0, 0, 7.5])\n        cube([118, 78, 2], center=true);\n        \n        // USB-C port cutout\n        translate([60, 40, 0])\n        rotate([0, 90, 0])\n        cube([8, 6, 3], center=true);\n    }\n}\n\n// Touch surface module\nmodule touch_surface() {\n    color(\"black\", 0.9)\n    translate([0, 0, 7.5])\n    cube([116, 76, 0.5], center=true);\n}\n\n// Physical buttons (bottom edge)\nmodule buttons() {\n    for(i = [-1, 1]) {\n        color(\"darkgray\", 0.9)\n        translate([i * 30, 35, 7.5])\n        cube([25, 5, 1], center=true);\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    // LED housing\n    color(\"black\", 0.9)\n    translate([50, 35, 7.5])\n    cylinder(h=1, d=3, center=true);\n    \n    // LED light\n    color(\"green\", 0.8)\n    translate([50, 35, 8.1])\n    cylinder(h=0.2, d=2, center=true);\n}\n\n// USB-C port detail\nmodule usbc_port() {\n    color(\"black\", 0.9)\n    translate([60, 40, 2.5])\n    rotate([0, 90, 0])\n    cylinder(h=4, d=5, center=true);\n    \n    // Internal contacts\n    color(\"gold\", 0.8)\n    translate([60, 40, 2.5])\n    rotate([0, 90, 0])\n    cube([3.5, 0.3, 2], center=true);\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    color(\"black\", 0.9)\n    for(x = [-50, 50])\n    for(y = [-30, 30]) {\n        translate([x, y, 0.5])\n        cylinder(h=1, d=5, center=true);\n    }\n}\n\n// Logo placeholder\nmodule logo() {\n    color(\"black\", 0.9)\n    translate([0, 0, 8.1])\n    linear_extrude(height=0.2)\n    text(\"TRACK\", size=8, halign=\"center\", valign=\"center\");\n}\n\n// Assembly\ntrackpad_body();\ntouch_surface();\nbuttons();\nled_indicator();\nusbc_port();\nrubber_feet();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "trackball",
    "openscad_code": "// Trackball Electronic Device - Realistic Style, Medium Complexity\n// Dimensions: ~80mm x ~100mm x ~45mm\n\n$fn = 50;\n\n// Main colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_ball = [0.9, 0.9, 0.9];\ncolor_buttons = [0.15, 0.15, 0.15];\ncolor_trim = [0.5, 0.5, 0.5];\ncolor_led = [0, 1, 0];\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Base shell\n        color(color_body)\n        union() {\n            // Main base\n            translate([0, 0, 10])\n                cube([80, 100, 30], center=true);\n            \n            // Front sloped section\n            translate([0, 40, 5])\n                rotate([15, 0, 0])\n                    cube([75, 20, 20], center=true);\n        }\n        \n        // Ball cavity\n        translate([0, -10, 25])\n            sphere(r=18);\n        \n        // Button holes\n        translate([-25, 35, 20])\n            cube([15, 25, 10], center=true);\n        translate([25, 35, 20])\n            cube([15, 25, 10], center=true);\n    }\n}\n\n// Trackball\nmodule trackball() {\n    color(color_ball)\n    translate([0, -10, 25])\n        sphere(r=16);\n}\n\n// Buttons\nmodule buttons() {\n    // Left button\n    color(color_buttons)\n    translate([-25, 35, 15])\n        cube([13, 22, 8], center=true);\n    \n    // Right button\n    translate([25, 35, 15])\n        cube([13, 22, 8], center=true);\n    \n    // Scroll wheel\n    color(color_trim)\n    translate([0, 35, 25])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=4, center=true);\n}\n\n// USB port\nmodule usb_port() {\n    color([0, 0, 0])\n    translate([0, -50, 15])\n        cube([12, 2, 6], center=true);\n    \n    // Port housing\n    color(color_trim)\n    difference() {\n        translate([0, -51, 15])\n            cube([14, 4, 8], center=true);\n        translate([0, -50, 15])\n            cube([12, 2, 6], center=true);\n    }\n}\n\n// LED indicators\nmodule leds() {\n    for(i = [-1, 1]) {\n        color(color_led)\n        translate([i * 30, 45, 26])\n            sphere(r=1.5);\n        \n        // LED housing\n        color([0.1, 0.1, 0.1])\n        translate([i * 30, 45, 25])\n            cylinder(h=2, r=3);\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    color([0.05, 0.05, 0.05])\n    for(x = [-30, 30])\n        for(y = [-35, 35]) {\n            translate([x, y, 0])\n                cylinder(h=2, r=4);\n        }\n}\n\n// Logo area\nmodule logo_area() {\n    color(color_trim)\n    translate([0, 0, 26])\n        cube([20, 8, 1], center=true);\n}\n\n// Assembly\nmain_body();\ntrackball();\nbuttons();\nusb_port();\nleds();\nfeet();\nlogo_area();",
    "renders": true
  },
  {
    "electronic_device": "mouse",
    "openscad_code": "// Realistic 3D Printable Computer Mouse\n// Medium complexity OpenSCAD model\n\n// Main parameters\nmouse_length = 110;\nmouse_width = 60;\nmouse_height = 38;\nwall_thickness = 2;\n\n// Colors\nbody_color = [0.15, 0.15, 0.15];\nbutton_color = [0.85, 0.85, 0.85];\nwheel_color = [0.2, 0.2, 0.2];\nled_color = [0, 0.8, 1];\nusb_color = [0.8, 0.8, 0.8];\n\n// Main body module\nmodule mouse_body() {\n    color(body_color)\n    union() {\n        // Main body shell\n        difference() {\n            hull() {\n                translate([-mouse_length/2, -mouse_width/2, 0])\n                    cube([mouse_length, mouse_width, mouse_height]);\n                translate([-mouse_length/2 + 15, -mouse_width/2 + 5, mouse_height + 15])\n                    cube([mouse_length - 30, mouse_width - 10, 5]);\n            }\n            \n            // Hollow interior\n            translate([-mouse_length/2 + wall_thickness, -mouse_width/2 + wall_thickness, wall_thickness])\n                cube([mouse_length - 2*wall_thickness, mouse_width - 2*wall_thickness, mouse_height - wall_thickness]);\n        }\n        \n        // Side grips\n        for(side = [-1, 1]) {\n            translate([mouse_length/2 - 35, side*(mouse_width/2 - 2), 5])\n                rotate([0, 0, side*20])\n                cube([20, 4, mouse_height - 5]);\n        }\n    }\n}\n\n// Left and right buttons\nmodule mouse_buttons() {\n    color(button_color)\n    union() {\n        // Left button\n        translate([-mouse_length/2 + 10, -mouse_width/2 + 5, mouse_height])\n            cube([mouse_length/2 - 5, mouse_width/2 - 5, 8]);\n        \n        // Right button\n        translate([-mouse_length/2 + 10, 0, mouse_height])\n            cube([mouse_length/2 - 5, mouse_width/2 - 5, 8]);\n    }\n}\n\n// Scroll wheel\nmodule scroll_wheel() {\n    color(wheel_color)\n    translate([0, 0, mouse_height + 4])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 8, r = 6, $fn = 20);\n        cylinder(h = 9, r = 1.5, $fn = 16);\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    color(led_color)\n    translate([mouse_length/2 - 15, 0, mouse_height + 4.5])\n    cylinder(h = 1, r = 3, $fn = 16);\n}\n\n// USB cable\nmodule usb_cable() {\n    color(usb_color)\n    union() {\n        // Cable exit\n        translate([-mouse_length/2, 0, mouse_height/2])\n            rotate([0, 90, 0])\n            cylinder(h = 15, r = 3, $fn = 16);\n        \n        // Cable strain relief\n        translate([-mouse_length/2 - 7, 0, mouse_height/2])\n            rotate([0, 90, 0])\n            cylinder(h = 10, r1 = 4, r2 = 3, $fn = 16);\n        \n        // Cable\n        translate([-mouse_length/2 - 15, -20, mouse_height/2])\n            rotate([0, 0, -45])\n            scale([1, 1, 0.3])\n            cylinder(h = 100, r = 3, $fn = 8);\n    }\n}\n\n// DPI button\nmodule dpi_button() {\n    color(button_color)\n    translate([mouse_length/2 - 25, -mouse_width/2 - 2, mouse_height - 10])\n        cube([8, 2, 4]);\n}\n\n// Main assembly\nmouse_body();\nmouse_buttons();\nscroll_wheel();\nled_indicator();\nusb_cable();\ndpi_button();",
    "renders": true
  },
  {
    "electronic_device": "keyboard",
    "openscad_code": "// 75-key compact mechanical keyboard (75 %)\n// Overall footprint: 95 mm × 32 mm × 6 mm\n// 3D-printable, no support, 1 mm wall thickness\n\n// ---------- color constants ----------\n$fn = 32;               // smooth curves\nwall = 1;               // printable wall thickness\nkey_spacing = 12;       // 12 mm center-to-center\nkeycap_h = 5;\ncase_h = 6;\n\n// ---------- main body ----------\nmodule case() {\n    difference() {\n        color(\"silver\")\n            cube([95, 32, case_h], center = false);\n\n        // hollow cavity for electronics\n        translate([wall, wall, wall])\n            cube([95 - 2*wall, 32 - 2*wall, case_h - wall], center = false);\n    }\n}\n\n// ---------- single MX-style keycap ----------\nmodule keycap(row = 0) {\n    // staggered profile per row (SA-like)\n    profile = [5.5, 5.2, 5, 4.8, 4.6];\n    \n    translate([0, 0, profile[row]])\n    difference() {\n        // sculpted top\n        scale([1, 1, 0.4])\n            sphere(d = 10.5);\n\n        // slightly rounded edges\n        translate([0, 0, -0.5])\n            scale([0.9, 0.9, 0.5])\n                cube([10, 10, 6], center = true);\n\n        // stem hole\n        color(\"black\")\n            cylinder(h = 4, d = 4.2, center = false);\n    }\n}\n\n// ---------- key matrix ----------\nmodule key_matrix() {\n    // 75-key layout (15 × 5)\n    rows = 5;\n    cols = 15;\n\n    for (r = [0:rows-1]) {\n        for (c = [0:cols-1]) {\n            // skip empty positions\n            if (!(r == 0 && c > 12) && !(r == 1 && c > 14)) {\n                translate([c * key_spacing + 2, \n                          (rows - r - 1) * key_spacing + 2, \n                          case_h])\n                    color(\"ivory\")\n                        keycap(r);\n            }\n        }\n    }\n}\n\n// ---------- PCB with visible traces ----------\nmodule pcb() {\n    translate([wall, wall, case_h - 1.6])\n    color(\"darkgreen\")\n    cube([95 - 2*wall, 32 - 2*wall, 1.6]);\n}\n\n// ---------- USB-C port ----------\nmodule usbc_port() {\n    translate([95 - 7, 16 - 4, 2])\n    difference() {\n        color(\"black\")\n            cube([7, 8, 4]);\n        translate([1, 2, 1])\n            cube([5, 4, 2]);\n    }\n}\n\n// ---------- status LEDs ----------\nmodule status_leds() {\n    for (i = [0:2]) {\n        translate([2 + i*4, 2, case_h - 0.2])\n            color(\"red\")\n                sphere(d = 1.5);\n    }\n}\n\n// ---------- logo engraving ----------\nmodule logo() {\n    translate([95 - 15, 32 - 8, 0.2])\n    linear_extrude(height = 0.5)\n        text(\"MK-V3\", size = 5);\n}\n\n// ---------- assembly ----------\nunion() {\n    case();\n    pcb();\n    key_matrix();\n    usbc_port();\n    status_leds();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "joystick",
    "openscad_code": "// Joystick Controller - Realistic Style, Medium Complexity\n// Designed for 3D printing with 1.2mm wall thickness\n\n// Overall dimensions: 80mm x 120mm x 160mm (L x W x H)\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\n// Main body module\nmodule main_body() {\n    color(\"black\")\n    difference() {\n        // Main housing\n        translate([0, 0, 20])\n        cube([80, 120, 40], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 20])\n        cube([76, 116, 38], center=true);\n        \n        // USB-C port\n        translate([40, 0, 20])\n        cube([4, 12, 6], center=true);\n        \n        // Shoulder button cutouts\n        translate([30, 50, 40])\n        cube([15, 8, 4], center=true);\n        translate([30, -50, 40])\n        cube([15, 8, 4], center=true);\n    }\n}\n\n// Grip handles\nmodule handles() {\n    for(side = [-1, 1]) {\n        color(\"darkgrey\")\n        translate([30 * side, side * 45, 0])\n        rotate([0, 90, 0])\n        cylinder(h=25, r1=15, r2=10, center=true);\n    }\n}\n\n// Analog sticks\nmodule analog_stick(x, y, color_name) {\n    color(color_name)\n    union() {\n        // Base\n        translate([x, y, 40])\n        cylinder(h=8, r=12, $fn=32);\n        \n        // Stick\n        color(\"darkgrey\")\n        translate([x, y, 48])\n        cylinder(h=20, r=4, $fn=16);\n        \n        // Thumb grip\n        color(color_name)\n        translate([x, y, 68])\n        sphere(r=8);\n    }\n}\n\n// D-pad\nmodule d_pad() {\n    color(\"darkgrey\")\n    union() {\n        // Center\n        translate([-30, 0, 40])\n        cube([15, 15, 5], center=true);\n        \n        // Buttons\n        for(dir = [[0, 8], [8, 0], [0, -8], [-8, 0]]) {\n            translate([-30 + dir[0], dir[1], 42])\n            cube([6, 6, 3], center=true);\n        }\n    }\n}\n\n// Action buttons\nmodule action_buttons() {\n    color(\"red\")\n    translate([30, 20, 40])\n    cylinder(h=5, r=6, $fn=20);\n    \n    color(\"green\")\n    translate([38, 12, 40])\n    cylinder(h=5, r=6, $fn=20);\n    \n    color(\"blue\")\n    translate([22, 12, 40])\n    cylinder(h=5, r=6, $fn=20);\n    \n    color(\"yellow\")\n    translate([30, 4, 40])\n    cylinder(h=5, r=6, $fn=20);\n}\n\n// Menu buttons\nmodule menu_buttons() {\n    color(\"grey\")\n    translate([-15, -25, 40])\n    cube([12, 5, 3], center=true);\n    \n    color(\"grey\")\n    translate([15, -25, 40])\n    cube([12, 5, 3], center=true);\n}\n\n// LED indicators\nmodule leds() {\n    for(i = [0:3]) {\n        color(\"red\")\n        translate([-35 + i * 8, -40, 39.5])\n        cylinder(h=1, r=2, $fn=16);\n    }\n}\n\n// Shoulder buttons\nmodule shoulder_buttons() {\n    for(side = [-1, 1]) {\n        color(\"black\")\n        translate([30 * side, side * 50, 42])\n        cube([15, 10, 6], center=true);\n    }\n}\n\n// Assembly\nmain_body();\nhandles();\nanalog_stick(-20, 20, \"darkgrey\");\nanalog_stick(20, -20, \"darkgrey\");\nd_pad();\naction_buttons();\nmenu_buttons();\nleds();\nshoulder_buttons();",
    "renders": true
  },
  {
    "electronic_device": "gamepad",
    "openscad_code": "// Gamepad Electronic Device - Realistic Style, Medium Complexity\n\n// Overall dimensions\ngamepad_width = 150;\ngamepad_height = 60;\ngamepad_thickness = 25;\n\n// Colors\nbody_color = \"DarkSlateGray\";\nbutton_color = \"Black\";\nstick_color = \"DimGray\";\naccent_color = \"Red\";\nport_color = \"Silver\";\n\n// Main body\nmodule body() {\n    color(body_color)\n    difference() {\n        // Main rounded base\n        hull() {\n            translate([-gamepad_width/2, -gamepad_height/2, 0])\n                cube([gamepad_width/2, gamepad_height, gamepad_thickness]);\n            translate([gamepad_width/4, -gamepad_height/2, 0])\n                cube([gamepad_width/2, gamepad_height, gamepad_thickness]);\n        }\n        \n        // Handle grips\n        for (x = [-gamepad_width/2.5, gamepad_width/2.5]) {\n            translate([x, -gamepad_height/2 - 5, -1])\n                cylinder(h=gamepad_thickness+2, r=15, $fn=20);\n        }\n        \n        // Finger grooves\n        for (x = [-gamepad_width/3, gamepad_width/3])\n        for (i = [-10, 0, 10]) {\n            translate([x+i, -gamepad_height/2 - 5, gamepad_thickness/2])\n                sphere(r=3, $fn=12);\n        }\n    }\n}\n\n// D-pad module\nmodule dpad(x_pos, y_pos) {\n    color(button_color)\n    translate([x_pos, y_pos, gamepad_thickness]) {\n        // Base\n        cylinder(h=2, r=8, $fn=20);\n        \n        // Cross\n        for (rot = [0, 90]) {\n            rotate([0, 0, rot])\n                translate([0, 3.5, 2])\n                    cube([6, 7, 2], center=true);\n        }\n        \n        // Center button\n        translate([0, 0, 4])\n            cylinder(h=1, r=3, $fn=20);\n    }\n}\n\n// Action buttons module\nmodule action_buttons(x_pos, y_pos) {\n    color(button_color)\n    translate([x_pos, y_pos, gamepad_thickness]) {\n        // Base\n        cylinder(h=2, r=12, $fn=20);\n        \n        // Buttons (A,B,X,Y)\n        for (angle = [45, 135, 225, 315]) {\n            rotate([0, 0, angle])\n                translate([7, 0, 2])\n                    cylinder(h=3, r=3.5, $fn=20);\n        }\n    }\n}\n\n// Analog stick module\nmodule analog_stick(x_pos, y_pos) {\n    color(stick_color)\n    translate([x_pos, y_pos, gamepad_thickness]) {\n        // Base\n        cylinder(h=3, r=10, $fn=20);\n        \n        // Stick\n        translate([0, 0, 3])\n            cylinder(h=8, r1=6, r2=4, $fn=20);\n        \n        // Top cap\n        translate([0, 0, 11])\n            sphere(r=5, $fn=20);\n    }\n}\n\n// Shoulder buttons\nmodule shoulder_button(x_pos, side) {\n    color(button_color)\n    translate([x_pos, side * (gamepad_height/2 + 2), gamepad_thickness - 2]) {\n        rotate([30 * side, 0, 0])\n            cube([20, 8, 4]);\n    }\n}\n\n// Center buttons and touchpad\nmodule center_controls() {\n    color(button_color)\n    translate([0, 0, gamepad_thickness]) {\n        // Home button\n        cylinder(h=2, r=6, $fn=20);\n        \n        // Start/Select buttons\n        translate([-15, 0, 0])\n            cube([8, 4, 2]);\n        translate([15, 0, 0])\n            cube([8, 4, 2]);\n        \n        // Touchpad area\n        color(accent_color)\n        translate([0, 10, 0])\n            cube([30, 20, 1]);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    color(port_color)\n    translate([0, gamepad_height/2 + 2, gamepad_thickness/2]) {\n        cube([12, 2, 4]);\n        \n        // Port opening\n        color(\"Black\")\n        translate([0, 1, 1])\n            cube([8, 2, 2]);\n    }\n}\n\n// LED indicators\nmodule led_indicators() {\n    for (i = [-2, 0, 2]) {\n        color(\"Red\")\n        translate([i * 10, gamepad_height/2 - 5, gamepad_thickness + 1])\n            cylinder(h=1, r=2, $fn=20);\n    }\n}\n\n// Assembly\nbody();\n\n// Left controls\ndpad(-gamepad_width/3, -gamepad_height/4);\nanalog_stick(-gamepad_width/3, gamepad_height/4);\n\n// Right controls\naction_buttons(gamepad_width/3, -gamepad_height/4);\nanalog_stick(gamepad_width/3, gamepad_height/4);\n\n// Shoulder buttons\nshoulder_button(-gamepad_width/3, 1);\nshoulder_button(gamepad_width/3, 1);\nshoulder_button(-gamepad_width/3, -1);\nshoulder_button(gamepad_width/3, -1);\n\n// Center features\ncenter_controls();\nusb_port();\nled_indicators();",
    "renders": true
  },
  {
    "electronic_device": "controller",
    "openscad_code": "// OpenSCAD Game Controller - Realistic Style, Medium Complexity\n// Approximate size: 95mm x 65mm x 35mm\n\n// Main body color\nbody_color = \"DimGrey\";\n\n// Colors for different components\nbutton_color = \"Black\";\nstick_color = \"DarkSlateGray\";\naccent_color = \"DarkRed\";\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule controller_body() {\n    // Main controller shell\n    difference() {\n        // Outer shell - ergonomic shape\n        hull() {\n            // Left grip\n            translate([-35, -20, 0])\n                scale([1.2, 1, 1])\n                sphere(d=30, $fn=32);\n            // Right grip\n            translate([35, -20, 0])\n                scale([1.2, 1, 1])\n                sphere(d=30, $fn=32);\n            // Center body\n            translate([0, 0, 0])\n                sphere(d=40, $fn=32);\n        }\n        \n        // Hollow out the inside\n        translate([0, 0, -wall])\n            scale([0.8, 0.8, 0.7])\n            hull() {\n                translate([-35, -20, 0])\n                    scale([1.2, 1, 1])\n                    sphere(d=30, $fn=32);\n                translate([35, -20, 0])\n                    scale([1.2, 1, 1])\n                    sphere(d=30, $fn=32);\n                translate([0, 0, 0])\n                    sphere(d=40, $fn=32);\n            }\n    }\n}\n\nmodule dpad() {\n    // D-pad base\n    translate([-25, 10, 15]) {\n        difference() {\n            cube([15, 15, 3], center=true);\n            // Center hole\n            cylinder(h=4, d=4, center=true, $fn=32);\n        }\n        \n        // D-pad buttons\n        for(x = [-5, 5]) {\n            translate([x, 0, 1.5]) \n                cube([3, 7, 1], center=true);\n        }\n        for(y = [-5, 5]) {\n            translate([0, y, 1.5]) \n                cube([7, 3, 1], center=true);\n        }\n    }\n}\n\nmodule action_buttons() {\n    // Action button cluster\n    translate([25, 10, 15]) {\n        // Button base\n        difference() {\n            cylinder(h=3, d=16, $fn=32);\n            cylinder(h=4, d=12, $fn=32);\n        }\n        \n        // Four colored buttons\n        color(\"DarkRed\")\n            translate([5, 5, 2])\n                cylinder(h=2, d=5, $fn=16);\n        color(\"LimeGreen\")\n            translate([-5, 5, 2])\n                cylinder(h=2, d=5, $fn=16);\n        color(\"DodgerBlue\")\n            translate([5, -5, 2])\n                cylinder(h=2, d=5, $fn=16);\n        color(\"Gold\")\n            translate([-5, -5, 2])\n                cylinder(h=2, d=5, $fn=16);\n    }\n}\n\nmodule analog_sticks() {\n    // Left stick\n    translate([-15, -5, 15]) {\n        // Stick base\n        difference() {\n            cylinder(h=4, d=14, $fn=32);\n            cylinder(h=5, d=10, $fn=32);\n        }\n        // Stick\n        translate([0, 0, 4])\n            cylinder(h=8, d=8, $fn=32);\n        // Thumb grip\n        translate([0, 0, 12])\n            sphere(d=10, $fn=32);\n    }\n    \n    // Right stick\n    translate([15, -5, 15]) {\n        difference() {\n            cylinder(h=4, d=14, $fn=32);\n            cylinder(h=5, d=10, $fn=32);\n        }\n        translate([0, 0, 4])\n            cylinder(h=8, d=8, $fn=32);\n        translate([0, 0, 12])\n            sphere(d=10, $fn=32);\n    }\n}\n\nmodule shoulder_buttons() {\n    // Left shoulder (L1)\n    translate([-25, -30, 10]) {\n        rotate([0, 20, 0])\n            cube([20, 8, 3]);\n    }\n    \n    // Right shoulder (R1)\n    translate([25, -30, 10]) {\n        rotate([0, -20, 0])\n            cube([20, 8, 3]);\n    }\n    \n    // Triggers (L2/R2)\n    translate([-25, -32, 5]) {\n        rotate([0, 30, 0])\n            cube([20, 10, 4]);\n    }\n    translate([25, -32, 5]) {\n        rotate([0, -30, 0])\n            cube([20, 10, 4]);\n    }\n}\n\nmodule center_buttons() {\n    // Home button\n    translate([0, 0, 15]) {\n        color(\"DarkBlue\")\n            cylinder(h=2, d=8, $fn=32);\n    }\n    \n    // Share button\n    translate([-8, 0, 15]) {\n        color(\"DarkSlateBlue\")\n            cube([6, 3, 1.5]);\n    }\n    \n    // Options button\n    translate([8, 0, 15]) {\n        color(\"DarkSlateBlue\")\n            cube([6, 3, 1.5]);\n    }\n}\n\nmodule charging_port() {\n    // USB-C port\n    translate([0, -30, 5]) {\n        difference() {\n            cube([8, 4, 2], center=true);\n            cube([6, 3, 3], center=true);\n        }\n    }\n}\n\nmodule status_leds() {\n    // LED indicators\n    translate([0, -25, 15]) {\n        for(i = [-6, -2, 2, 6]) {\n            translate([i, 0, 0])\n                sphere(d=2, $fn=16);\n        }\n    }\n}\n\n// Main assembly\ncolor(body_color) controller_body();\ncolor(button_color) dpad();\ncolor(button_color) action_buttons();\ncolor(stick_color) analog_sticks();\ncolor(button_color) shoulder_buttons();\ncolor(button_color) center_buttons();\ncolor(\"Silver\") charging_port();\ncolor(\"Green\") status_leds();",
    "renders": true
  },
  {
    "electronic_device": "pen",
    "openscad_code": "// Digital Smart Pen with OLED screen and USB-C port\n// Realistic styling, medium complexity\n\n// Colors\n$fn = 50;\n\n// Main pen body\nmodule pen_body() {\n    difference() {\n        // Main cylindrical body\n        color(\"silver\")\n        cylinder(h=100, d1=12, d2=11, center=false);\n        \n        // Grip area grooves\n        for (i = [0:5]) {\n            translate([0, 0, 15 + i*6])\n            rotate([0, 0, 0])\n            color(\"silver\")\n            cylinder(h=1.5, d=14);\n        }\n    }\n}\n\n// Grip section\nmodule grip_section() {\n    translate([0, 0, 15])\n    difference() {\n        color(\"darkblue\")\n        cylinder(h=30, d=13);\n        \n        // Grip pattern\n        for (i = [0:5]) {\n            rotate([0, 0, i*60])\n            translate([6.5, 0, 5])\n            color(\"darkblue\")\n            cube([2, 0.5, 20], center=true);\n        }\n    }\n}\n\n// OLED screen\nmodule oled_screen() {\n    translate([-7, -6.5, 55])\n    difference() {\n        color(\"black\")\n        cube([14, 1, 6]);\n        \n        // Actual screen area\n        translate([1, 0.5, 1])\n        color(\"lightblue\")\n        cube([12, 0.1, 4]);\n    }\n}\n\n// Navigation button\nmodule nav_button() {\n    translate([0, -7.5, 52])\n    color(\"gray20\")\n    cylinder(h=1.5, d=4);\n}\n\n// Power button\nmodule power_button() {\n    translate([6, 0, 48])\n    color(\"red\")\n    cube([2, 1.5, 4]);\n}\n\n// USB-C port\nmodule usbc_port() {\n    translate([0, 5.5, 0])\n    difference() {\n        color(\"black\")\n        cube([8, 4, 6]);\n        \n        // Inner port detail\n        translate([1, 1, 1])\n        color(\"gray30\")\n        cube([6, 2, 4]);\n    }\n}\n\n// Clip\nmodule clip() {\n    translate([0, 6, 75])\n    difference() {\n        union() {\n            // Clip body\n            color(\"silver\")\n            cube([2, 3, 20]);\n            \n            // Rounded top\n            translate([1, 1.5, 20])\n            rotate([0, 90, 0])\n            color(\"silver\")\n            cylinder(h=2, d=3);\n        }\n        \n        // Spring gap\n        translate([1, -0.5, 10])\n        color(\"silver\")\n        cube([0.5, 4, 10]);\n    }\n}\n\n// Pen tip\nmodule pen_tip() {\n    translate([0, 0, 0])\n    union() {\n        // Metal tip\n        color(\"silver\")\n        cylinder(h=8, d1=2, d2=11);\n        \n        // Stylus tip\n        translate([0, 0, -2])\n        color(\"black\")\n        sphere(d=3);\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    translate([-3, -6.5, 65])\n    color(\"green\")\n    cylinder(h=0.5, d=2);\n}\n\n// Assembly\nunion() {\n    pen_body();\n    grip_section();\n    oled_screen();\n    nav_button();\n    power_button();\n    usbc_port();\n    clip();\n    pen_tip();\n    led_indicator();\n}",
    "renders": true
  },
  {
    "electronic_device": "stylus",
    "openscad_code": "// Stylus Electronic Device - OpenSCAD\n// A realistic stylus with medium complexity\n\n// Color definitions\n$fn = 50;\n\n// Main module\nmodule stylus() {\n    // Main body\n    color(\"silver\") \n    union() {\n        // Pen body\n        difference() {\n            cylinder(h=120, d1=10, d2=8, center=true);\n            // Grip texture grooves\n            for(i = [-55:10:55]) {\n                translate([0, 0, i])\n                rotate([90, 0, 0])\n                cylinder(h=8.1, d=1.2, center=true);\n            }\n        }\n        \n        // Tip\n        translate([0, 0, 60])\n        color(\"darkgray\")\n        sphere(d=3);\n        \n        // Cap end\n        translate([0, 0, -60])\n        color(\"silver\")\n        union() {\n            cylinder(h=5, d=10, center=true);\n            sphere(d=10);\n        }\n        \n        // Clip\n        translate([5, 0, -45])\n        rotate([90, 0, 0])\n        color(\"black\")\n        difference() {\n            cube([1, 25, 3], center=true);\n            translate([0, 10, 0])\n            cylinder(h=4, d=2);\n        }\n        \n        // Button 1\n        translate([5, 0, -20])\n        color(\"dimgray\")\n        cube([2, 5, 3], center=true);\n        \n        // Button 2\n        translate([5, 0, -10])\n        color(\"dimgray\")\n        cube([2, 5, 3], center=true);\n        \n        // Status LED\n        translate([5, 0, 0])\n        color(\"red\")\n        sphere(d=1.5);\n        \n        // Charging port\n        translate([0, 0, -50])\n        rotate([90, 0, 0])\n        color(\"black\")\n        cylinder(h=8, d=4);\n        \n        // Brand label area\n        translate([0, 0, 30])\n        rotate([0, 90, 0])\n        color(\"white\")\n        linear_extrude(height=0.5)\n        text(\"STYLUS\", size=3, halign=\"center\", valign=\"center\");\n    }\n    \n    // Internal structure (for electronics)\n    difference() {\n        translate([0, 0, 20])\n        cylinder(h=60, d=6, center=true);\n        \n        // Battery cavity\n        translate([0, 0, 25])\n        cylinder(h=50, d=5.5, center=true);\n    }\n}\n\n// Assembly\nstylus();",
    "renders": true
  },
  {
    "electronic_device": "microphone",
    "openscad_code": "// OpenSCAD Realistic Microphone Model\n// Medium complexity microphone with 3D-print-friendly design\n// Overall size ~60mm height, 25mm diameter\n\n// Color constants\n$fn = 50;\n\nmodule microphone_body() {\n    // Main cylindrical body\n    color(\"silver\") \n    difference() {\n        cylinder(h = 40, r = 12.5, center = true);\n        // Hollow interior for electronics\n        translate([0, 0, 0])\n        cylinder(h = 45, r = 11, center = true);\n    }\n    \n    // Bottom cap with USB-C port\n    color(\"darkslategray\")\n    translate([0, 0, -20.5])\n    difference() {\n        cylinder(h = 2, r = 12.5);\n        // USB-C port opening\n        translate([0, -8, -1])\n        cube([10, 4, 4], center = true);\n    }\n    \n    // Status LED ring\n    color(\"lime\") \n    translate([0, 0, -19])\n    cylinder(h = 0.5, r = 12.2);\n}\n\nmodule mesh_grille() {\n    // Top mesh grille cover\n    color(\"silver\")\n    translate([0, 0, 20])\n    difference() {\n        sphere(r = 15);\n        // Hollow interior\n        sphere(r = 14);\n    }\n    \n    // Grille pattern using loops\n    color(\"gray\")\n    for (i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n        translate([0, 0, 20])\n        rotate([90, 0, 0])\n        cylinder(h = 30, r = 0.5, center = true);\n    }\n    \n    for (j = [0:3]) {\n        rotate([0, 0, 0])\n        translate([0, 0, 20])\n        rotate([0, j * 30, 0])\n        cylinder(h = 30, r = 0.5, center = true);\n    }\n}\n\nmodule buttons() {\n    // Mute button\n    color(\"darkred\")\n    translate([12.5, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 2, r = 3);\n    \n    // Volume up button\n    color(\"darkgreen\")\n    translate([12.5, 6, 5])\n    rotate([90, 0, 0])\n    cube([3, 2, 4], center = true);\n    \n    // Volume down button\n    color(\"darkgreen\")\n    translate([12.5, -6, 5])\n    rotate([90, 0, 0])\n    cube([3, 2, 4], center = true);\n}\n\nmodule stand_mount() {\n    // 5/8\" thread adapter (standard mic stand)\n    color(\"black\")\n    translate([0, 0, -22])\n    difference() {\n        cylinder(h = 8, r = 5);\n        // Internal thread (simplified)\n        cylinder(h = 8, r = 4.5);\n    }\n}\n\nmodule logo() {\n    // Simple brand logo on front\n    color(\"black\")\n    translate([12.6, 0, 10])\n    rotate([0, 90, 0])\n    linear_extrude(height = 0.5)\n    text(\"MIC\", size = 5, halign = \"center\", valign = \"center\");\n}\n\nmodule cable_strain_relief() {\n    // Cable exit with strain relief\n    color(\"darkgray\")\n    translate([0, -8, -20])\n    rotate([0, 0, 90])\n    cylinder(h = 10, r = 3);\n}\n\n// Assembly\nunion() {\n    microphone_body();\n    mesh_grille();\n    buttons();\n    stand_mount();\n    logo();\n    cable_strain_relief();\n}",
    "renders": true
  },
  {
    "electronic_device": "speaker",
    "openscad_code": "// Realistic 3D printable speaker (medium complexity)\n// Approx 85 mm tall, 65 mm wide, 65 mm deep\n\n// Main dimensions\n$fa = 2;\n$fs = 0.5;\n\nmodule speaker_body() {\n    // Main enclosure - slightly rounded edges\n    color([0.15, 0.15, 0.15])\n    difference() {\n        minkowski() {\n            cube([60, 60, 70], center = true);\n            sphere(2);\n        }\n        translate([0, 0, -35])\n            cube([58, 58, 70], center = true);\n    }\n}\n\nmodule front_grill() {\n    // Front grill with hexagonal pattern\n    color([0.3, 0.3, 0.3])\n    translate([0, 0, 35.5])\n    difference() {\n        cube([58, 58, 2], center = true);\n        \n        // Hex pattern holes\n        for (x = [-25:5:25]) {\n            for (y = [-25:5:25]) {\n                translate([x + (y % 10 == 0 ? 2.5 : 0), y, -1])\n                    cylinder(h = 4, r = 1.5, $fn = 6);\n            }\n        }\n    }\n}\n\nmodule woofer() {\n    // Main woofer cone\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, 36])\n    difference() {\n        cylinder(h = 8, r1 = 20, r2 = 18, $fn = 48);\n        // Speaker cone detail\n        translate([0, 0, 0.5])\n            cylinder(h = 7, r1 = 19, r2 = 17, $fn = 48);\n    }\n    \n    // Dust cap\n    color([0.8, 0.8, 0.8])\n    translate([0, 0, 44])\n    cylinder(h = 2, r = 8, $fn = 32);\n}\n\nmodule tweeter() {\n    // Smaller tweeter above woofer\n    color([0.1, 0.1, 0.1])\n    translate([0, 15, 36])\n    difference() {\n        cylinder(h = 5, r = 8, $fn = 32);\n        translate([0, 0, 0.5])\n            cylinder(h = 4, r = 7, $fn = 32);\n    }\n    \n    color([0.8, 0.8, 0.8])\n    translate([0, 15, 41])\n    cylinder(h = 1.5, r = 3, $fn = 16);\n}\n\nmodule control_panel() {\n    // Top control panel with LED ring\n    color([0.2, 0.2, 0.2])\n    translate([0, -20, 35])\n    cube([40, 15, 3], center = true);\n    \n    // Volume knob\n    color([0.9, 0.9, 0.9])\n    translate([-15, -20, 38])\n    cylinder(h = 5, r = 6, $fn = 32);\n    \n    // Power button\n    color([0.1, 0.1, 0.1])\n    translate([15, -20, 38])\n    cylinder(h = 2, r = 4, $fn = 24);\n    \n    // LED ring indicator\n    color([0, 1, 0])\n    translate([15, -20, 40.5])\n    cylinder(h = 0.5, r = 4.5, $fn = 32);\n}\n\nmodule ports() {\n    // Rear ports - USB-C and 3.5mm aux\n    color([0.1, 0.1, 0.1])\n    translate([25, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 8, r = 5.5, $fn = 32);\n    \n    color([0.1, 0.1, 0.1])\n    translate([25, 10, -10])\n    rotate([0, 90, 0])\n    cylinder(h = 8, r = 3.5, $fn = 24);\n    \n    // Port holes\n    color([0.05, 0.05, 0.05])\n    translate([30, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 3, r = 4.5, $fn = 32);\n    \n    translate([30, 10, -10])\n    rotate([0, 90, 0])\n    cylinder(h = 3, r = 2.5, $fn = 24);\n}\n\nmodule rubber_feet() {\n    // Four rubber feet for stability\n    color([0.05, 0.05, 0.05])\n    for (x = [-25, 25]) {\n        for (y = [-25, 25]) {\n            translate([x, y, -36])\n            cylinder(h = 3, r = 4, $fn = 16);\n        }\n    }\n}\n\n// Assemble the speaker\nspeaker_body();\nfront_grill();\nwoofer();\ntweeter();\ncontrol_panel();\nports();\nrubber_feet();",
    "renders": true
  },
  {
    "electronic_device": "headphone",
    "openscad_code": "$fn = 50;\n\nheadphone_color = [0.1,0.1,0.1];\npad_color     = [0.2,0.2,0.2];\nmetal_color   = [0.4,0.4,0.4];\nled_color     = [0.0,0.8,0.2];\n\nmodule earcup(side){\n    translate([side*40,0,0]){\n        difference(){\n            color(headphone_color) sphere(d=60);\n            color(headphone_color) translate([0,0,5]) sphere(d=58);\n            color(headphone_color) translate([0,0,10]) cylinder(h=20,d=35);\n        }\n        color(pad_color) translate([side*3,0,12]) rotate([90,0,0]) cylinder(h=15,d=50,$fn=60);\n        \n        // status LED ring\n        color(led_color) translate([side*29,0,0]) rotate([90,0,0]) cylinder(h=1,d=15);\n        \n        // micro-usb port\n        difference(){\n            color(headphone_color) translate([0,-30,-25]) cube([10,6,3],center=true);\n            color(headphone_color) translate([0,-30.1,-25]) cube([11,6.2,2.5],center=true);\n        }\n        \n        // three control buttons\n        for(i=[-1:1]){\n            color(headphone_color) translate([side*26, i*8, 0]) rotate([0,90,0]) cylinder(h=4,d=4);\n        }\n    }\n}\n\nmodule headband(){\n    color(headphone_color){\n        hull(){\n            translate([-40,0,0]) sphere(d=10);\n            translate([40,0,0])  sphere(d=10);\n        }\n        translate([0,0,5]) rotate([90,0,0]) cylinder(h=80,d=8);\n    }\n    \n    color(metal_color){\n        translate([0,0,-5]) rotate([0,0,0]) cylinder(h=10,d=3);\n        translate([0,0,-5]) rotate([0,30,0]) cylinder(h=10,d=3);\n        translate([0,0,-5]) rotate([0,-30,0]) cylinder(h=10,d=3);\n    }\n}\n\nmodule slider(side){\n    color(metal_color){\n        translate([side*40,0,35]) rotate([0,90,0]) cylinder(h=30,d=6);\n        translate([side*40,0,50]) rotate([0,90,0]) cylinder(h=20,d=5);\n    }\n}\n\nearcup(-1);\nearcup(1);\nheadband();\nslider(-1);\nslider(1);",
    "renders": true
  },
  {
    "electronic_device": "earphone",
    "openscad_code": "// Realistic medium-complexity 3D-printable earphone (TWS) model\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\nbud_d = 18;\nbud_h = 22;\nstem_l = 28;\nstem_d = 7;\n\nmodule earbud() {\n    // Main body shell\n    difference() {\n        color(\"white\")\n        union() {\n            // Outer shell\n            hull() {\n                sphere(d = bud_d);\n                translate([0, 0, bud_h/2])\n                    sphere(d = bud_d * 0.9);\n            }\n            // Stem\n            translate([0, 0, -stem_l/2 + 2])\n                cylinder(d = stem_d, h = stem_l, $fn = 32);\n        }\n\n        // Hollow interior\n        translate([0, 0, -2])\n            cylinder(d = bud_d - 4, h = bud_h, $fn = 32);\n    }\n\n    // Touch sensor area\n    color(\"lightgray\")\n    translate([0, 0, bud_h - 2])\n        cylinder(d = 10, h = 0.5, $fn = 32);\n\n    // LED indicator\n    color(\"red\")\n    translate([0, -bud_d/2 + 2, bud_h/2])\n        sphere(d = 1.5);\n\n    // Microphone mesh\n    color(\"black\")\n    translate([0, 0, -stem_l + 1])\n        cylinder(d = 2, h = 0.5, $fn = 16);\n\n    // Speaker grille\n    color(\"silver\")\n    rotate([90, 0, 0])\n        translate([0, 0, bud_d/2 - 1])\n            cylinder(d = 6, h = 1, $fn = 32);\n}\n\n// Charging contacts\nmodule contacts() {\n    for(i = [-1, 1]) {\n        translate([i * 2.5, 0, -stem_l + 1.5])\n            color(\"gold\")\n                cube([1.5, 3, 0.3], center = true);\n    }\n}\n\n// Case\nmodule case() {\n    difference() {\n        // Case shell\n        color(\"white\")\n        minkowski() {\n            cube([60, 45, 25], center = true);\n            sphere(d = 5);\n        }\n        \n        // Hollow cavity\n        color(\"white\")\n        minkowski() {\n            cube([56, 41, 22], center = true);\n            sphere(d = 4);\n        }\n    }\n\n    // Lid\n    translate([0, 0, 27])\n        rotate([45, 0, 0])\n            difference() {\n                color(\"white\")\n                minkowski() {\n                    cube([58, 43, 12], center = true);\n                    sphere(d = 5);\n                }\n                minkowski() {\n                    cube([54, 39, 10], center = true);\n                    sphere(d = 4);\n                }\n            }\n\n    // Charging port\n    color(\"black\")\n    translate([25, 0, -12])\n        rotate([90, 0, 0])\n            cylinder(d = 8, h = 5, $fn = 32);\n\n    // Status LED\n    color(\"green\")\n    translate([0, 20, -12])\n        sphere(d = 2);\n}\n\n// Assembly\nearbud();\ntranslate([0, 0, -stem_l - 5])\n    contacts();\n\ntranslate([0, -50, 0])\n    case();",
    "renders": true
  },
  {
    "electronic_device": "subwoofer",
    "openscad_code": "// Subwoofer Electronic Device - Realistic Style, Medium Complexity\n// Compact 3D-printable subwoofer with electronic features\n\n$fs = 0.4;\n$fa = 2;\n\n// Main dimensions\nbox_w = 60;\nbox_h = 80;\nbox_d = 55;\nwall_t = 3;\n\n// Speaker cone\ncone_d = 45;\ncone_h = 8;\ncone_depth = 10;\n\n// Ports\nport_d = 8;\nport_h = 12;\n\n// Controls\nknob_d = 8;\nknob_h = 4;\nscreen_w = 25;\nscreen_h = 12;\nscreen_d = 1;\n\n// LED indicators\nled_d = 4;\nled_h = 2;\n\nmodule subwoofer_body() {\n    difference() {\n        // Main enclosure\n        color(\"darkslategray\")\n        cube([box_w, box_h, box_d], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -wall_t/2])\n        cube([box_w-wall_t*2, box_h-wall_t*2, box_d-wall_t], center=true);\n        \n        // Speaker opening\n        translate([0, box_h/2 - cone_depth, 0])\n        rotate([90, 0, 0])\n        cylinder(d=cone_d, h=cone_depth, $fn=64);\n        \n        // Bass port front\n        translate([box_w/4, box_h/2 - port_h/2, 0])\n        rotate([90, 0, 0])\n        cylinder(d=port_d, h=port_h);\n        \n        translate([-box_w/4, box_h/2 - port_h/2, 0])\n        rotate([90, 0, 0])\n        cylinder(d=port_d, h=port_h);\n    }\n}\n\nmodule speaker_cone() {\n    // Cone assembly\n    color(\"black\")\n    translate([0, box_h/2 - cone_depth, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(d=cone_d, h=cone_h, $fn=64);\n        cylinder(d=cone_d*0.7, h=cone_h+1, $fn=64);\n    }\n    \n    // Dust cap\n    color(\"silver\")\n    translate([0, box_h/2 - cone_depth, 0])\n    rotate([90, 0, 0])\n    cylinder(d=cone_d*0.3, h=0.5, $fn=32);\n    \n    // Surround\n    color(\"dimgray\")\n    translate([0, box_h/2 - cone_depth/2, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(d=cone_d+8, h=cone_depth/2, $fn=64);\n        cylinder(d=cone_d, h=cone_depth/2+1, $fn=64);\n    }\n}\n\nmodule control_panel() {\n    // Panel surface\n    color(\"black\")\n    translate([0, -box_h/2 + wall_t, box_d/2 - wall_t])\n    cube([box_w*0.8, wall_t, wall_t], center=true);\n    \n    // Volume knob\n    color(\"silver\")\n    translate([-box_w/4, -box_h/2 + wall_t, box_d/2 - wall_t - knob_h/2])\n    cylinder(d=knob_d, h=knob_h, $fn=32);\n    \n    // Bass knob\n    color(\"silver\")\n    translate([box_w/4, -box_h/2 + wall_t, box_d/2 - wall_t - knob_h/2])\n    cylinder(d=knob_d, h=knob_h, $fn=32);\n    \n    // LED indicators\n    for(i=[-1:1]) {\n        color(\"red\")\n        translate([i*10, -box_h/2 + wall_t, box_d/2 - wall_t - led_h/2])\n        cylinder(d=led_d, h=led_h, $fn=16);\n    }\n}\n\nmodule lcd_display() {\n    // Screen bezel\n    color(\"darkgray\")\n    translate([0, box_h/2 - screen_d/2 - 15, box_d/2 - wall_t - screen_d/2])\n    cube([screen_w+4, screen_h+4, screen_d], center=true);\n    \n    // Actual screen\n    color(\"dodgerblue\")\n    translate([0, box_h/2 - screen_d/2 - 15, box_d/2 - wall_t - screen_d/2])\n    cube([screen_w, screen_h, screen_d+0.1], center=true);\n}\n\nmodule input_panel() {\n    // Rear panel\n    color(\"black\")\n    translate([0, 0, -box_d/2 + wall_t/2])\n    cube([box_w*0.9, box_h*0.8, wall_t], center=true);\n    \n    // RCA inputs\n    for(i=[-1, 1]) {\n        color(\"gold\")\n        translate([i*15, 0, -box_d/2 + wall_t/2])\n        cylinder(d=8, h=wall_t, $fn=32);\n    }\n    \n    // Power connector\n    color(\"black\")\n    translate([0, -20, -box_d/2 + wall_t/2])\n    cube([15, 8, wall_t], center=true);\n}\n\nmodule feet() {\n    // Rubber feet\n    for(x=[-box_w/3, box_w/3])\n    for(z=[-box_d/3, box_d/3]) {\n        color(\"black\")\n        translate([x, -box_h/2 - 2, z])\n        cylinder(d=8, h=4, $fn=16);\n    }\n}\n\nmodule brand_logo() {\n    // Logo placeholder\n    color(\"white\")\n    translate([0, box_h/2 - 10, box_d/2 - wall_t - 1])\n    linear_extrude(height=0.5)\n    text(\"BASS\", size=8, halign=\"center\", valign=\"center\");\n}\n\n// Assembly\nsubwoofer_body();\nspeaker_cone();\ncontrol_panel();\nlcd_display();\ninput_panel();\nfeet();\nbrand_logo();",
    "renders": true
  },
  {
    "electronic_device": "battery",
    "openscad_code": "// Realistic Li-ion Battery with USB-C port and LED indicators\n// Medium complexity, 3D-printable, ~85mm length\n\n// Main dimensions\nbattery_d = 18; // 18650 cell diameter\nbattery_l = 65;\nwall_th = 1.2;  // 3D-printable wall thickness\ncap_l = 10;\n\n// Colors\n$fn = 50;\n\n// Positive terminal nipple\nmodule positive_terminal() {\n    color(\"gold\") {\n        cylinder(h = 2, d = 5, $fn = 30);\n        translate([0, 0, 2])\n            cylinder(h = 1, d1 = 5, d2 = 3, $fn = 30);\n    }\n}\n\n// Negative terminal base\nmodule negative_terminal() {\n    color(\"silver\")\n        difference() {\n            cylinder(h = 1.5, d = battery_d, $fn = 60);\n            translate([0, 0, -0.1])\n                cylinder(h = 1.7, d = battery_d - 4, $fn = 60);\n        }\n}\n\n// Main cell body with wrapper\nmodule cell_body() {\n    difference() {\n        // Outer wrapper\n        color([0.2, 0.2, 0.2]) // Dark grey wrap\n            cylinder(h = battery_l, d = battery_d, $fn = 100);\n        \n        // Label recess\n        translate([0, battery_d/2 - 0.3, battery_l/2])\n            cube([battery_d*PI*0.8, 0.3, battery_l*0.7], center = true);\n    }\n    \n    // Warning ring near positive end\n    color(\"red\")\n        translate([0, 0, battery_l - 8])\n            cylinder(h = 2, d = battery_d + 0.2, $fn = 100);\n}\n\n// PCB cap with electronics\nmodule electronics_cap() {\n    difference() {\n        // Main cap body\n        color(\"black\")\n            cylinder(h = cap_l, d = battery_d, $fn = 60);\n        \n        // USB-C port cutout\n        translate([0, battery_d/2 - 2, cap_l - 6])\n            cube([8.4, 4, 6], center = true);\n        \n        // LED windows\n        for(i = [0:2]) {\n            translate([battery_d/2 - 2.5, 0, 2 + i*2.5])\n                rotate([90, 0, 0])\n                    cylinder(h = 0.5, d = 1.5, $fn = 20);\n        }\n    }\n    \n    // USB-C port tongue\n    color(\"silver\")\n        translate([0, battery_d/2 - 1.8, cap_l - 5])\n            cube([6.8, 0.3, 2.5], center = true);\n    \n    // LED lights\n    for(i = [0:2]) {\n        color(\"green\")\n            translate([battery_d/2 - 2.5, 0, 2 + i*2.5])\n                rotate([90, 0, 0])\n                    cylinder(h = 0.1, d = 1, $fn = 20);\n    }\n    \n    // Vent holes pattern\n    for(angle = [0:60:359]) {\n        rotate([0, 0, angle])\n            translate([battery_d/2 - 1, 0, cap_l/2])\n                rotate([90, 0, 0])\n                    cylinder(h = cap_l - 2, d = 1, $fn = 12);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    negative_terminal();\n\ntranslate([0, 0, 1.5])\n    cell_body();\n\ntranslate([0, 0, 1.5 + battery_l])\n    electronics_cap();\n\ntranslate([0, 0, 1.5 + battery_l + cap_l])\n    positive_terminal();\n\n// Label details\ntranslate([0, battery_d/2, battery_l/2])\n    rotate([90, 0, 0])\n        color(\"white\")\n            linear_extrude(height = 0.1)\n                text(\"3.7V 3000mAh\", size = 3, halign = \"center\", valign = \"center\");",
    "renders": true
  },
  {
    "electronic_device": "charger",
    "openscad_code": "// USB-C wall charger with foldable prongs and LED indicator\n// Medium complexity realistic style\n\n// Main color scheme\ncolor_wall = \"dimgray\";\ncolor_prongs = \"silver\";\ncolor_usb = \"black\";\ncolor_led = \"red\";\n\n// Dimensions (mm)\ncharger_width = 45;\ncharger_height = 55;\ncharger_depth = 25;\nprong_length = 8;\nprong_width = 6;\nprong_thickness = 1.5;\nusb_port_depth = 5;\nusb_port_radius = 4;\nled_radius = 1.5;\nled_depth = 1;\n\n// Main body with rounded edges\nmodule charger_body() {\n    color(color_wall) {\n        // Main rectangular body\n        difference() {\n            // Rounded outer shell\n            minkowski() {\n                cube([charger_width-4, charger_height-4, charger_depth-4], center=true);\n                sphere(2);\n            }\n            \n            // Hollow center\n            minkowski() {\n                cube([charger_width-8, charger_height-8, charger_depth-8], center=true);\n                sphere(1);\n            }\n        }\n        \n        // Front bevel\n        translate([0, 0, charger_depth/2 - 2])\n            scale([1, 1, 0.3])\n                sphere(charger_width/2 - 2);\n    }\n}\n\n// Foldable prongs module\nmodule prongs() {\n    color(color_prongs) {\n        // Prong housing\n        translate([0, charger_height/2 - 10, charger_depth/2 - 1])\n            cube([prong_width*2.5, 20, 2], center=true);\n        \n        // Two prongs\n        for(x = [-prong_width/2, prong_width/2]) {\n            translate([x, charger_height/2 - 10, charger_depth/2 + prong_length/2])\n                rotate([180, 0, 0])\n                    cube([prong_thickness, prong_width, prong_length], center=true);\n        }\n        \n        // Prong retention clips\n        for(x = [-prong_width/2, prong_width/2]) {\n            translate([x, charger_height/2 - 10, charger_depth/2 + 5])\n                cylinder(h=2, r=prong_thickness+0.5, center=true);\n        }\n    }\n}\n\n// USB-C port\nmodule usb_c_port() {\n    color(color_usb) {\n        // Port cavity\n        translate([0, -charger_height/2 + 10, charger_depth/2 - usb_port_depth/2])\n            cube([usb_port_radius*2, usb_port_radius*1.5, usb_port_depth], center=true);\n        \n        // Inner connector\n        translate([0, -charger_height/2 + 10, charger_depth/2 - usb_port_depth + 1])\n            cube([usb_port_radius*1.5, usb_port_radius*0.5, 1], center=true);\n        \n        // Port chamfer\n        translate([0, -charger_height/2 + 10, charger_depth/2])\n            cylinder(h=1, r1=usb_port_radius*1.2, r2=usb_port_radius*1.1, center=true);\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    color(color_led) {\n        translate([charger_width/2 - 8, charger_height/2 - 8, charger_depth/2])\n            cylinder(h=led_depth, r=led_radius, center=true);\n        \n        // LED diffuser\n        translate([charger_width/2 - 8, charger_height/2 - 8, charger_depth/2 + led_depth/2])\n            sphere(led_radius*1.5);\n    }\n}\n\n// Ventilation slots\nmodule ventilation_slots() {\n    color(color_wall) translate([0, 0, charger_depth/2 - 1]) {\n        for(y = [-charger_height/2 + 15 : 5 : charger_height/2 - 15]) {\n            translate([0, y, 0])\n                cube([charger_width - 10, 1, 1], center=true);\n        }\n    }\n}\n\n// Branding text area\nmodule branding_area() {\n    color(\"gainsboro\")\n        translate([0, 0, charger_depth/2 - 0.5])\n            cube([20, 8, 0.5], center=true);\n}\n\n// Assembly\ncharger_body();\nprongs();\nusb_c_port();\nled_indicator();\nventilation_slots();\nbranding_area();",
    "renders": true
  },
  {
    "electronic_device": "adapter",
    "openscad_code": "// USB-C to HDMI Adapter - Realistic Style\n// Dimensions: 60mm x 35mm x 15mm\n\n$fn = 32;\n\n// Main adapter body\nmodule adapter_body() {\n    color(\"black\")\n    difference() {\n        // Main housing\n        union() {\n            // Central block\n            translate([5, 0, 0])\n                cube([50, 35, 15], center=true);\n            \n            // Tapered edges\n            translate([5, 0, 7.5])\n                cylinder(h=15, r1=17.5, r2=15);\n            translate([5, 0, -7.5])\n                cylinder(h=15, r1=15, r2=17.5);\n        }\n        \n        // Ventilation slots\n        for(i = [-20:10:20]) {\n            translate([30, i, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=20, r=1);\n        }\n        \n        // Logo recess\n        translate([-20, 0, 7.6])\n            cube([8, 12, 0.5], center=true);\n    }\n}\n\n// USB-C male connector\nmodule usbc_connector() {\n    color(\"silver\")\n    union() {\n        // Metal shell\n        translate([-25, 0, 0])\n            cube([10, 8, 4], center=true);\n        \n        // Inner plastic\n        color(\"black\")\n        translate([-25, 0, 0])\n            cube([9, 6.5, 2.5], center=true);\n        \n        // Contact pins\n        color(\"gold\")\n        for(i = [-2.5:0.65:2.5]) {\n            translate([-24.5, i, 0])\n                cube([0.3, 0.3, 2.4], center=true);\n        }\n    }\n}\n\n// HDMI female port\nmodule hdmi_port() {\n    color(\"silver\")\n    difference() {\n        // Port housing\n        translate([30, 0, 2.5])\n            cube([15, 14, 5], center=true);\n        \n        // Port opening\n        color(\"black\")\n        translate([37.1, 0, 2.5])\n            cube([1, 11, 4.5], center=true);\n        \n        // Mounting holes\n        for(y = [-5, 5]) {\n            translate([37, y, 2.5])\n                cylinder(h=3, r=1);\n        }\n    }\n}\n\n// Activity LED indicator\nmodule led_indicator() {\n    color(\"darkblue\")\n    translate([-5, 15, 7.6])\n        cylinder(h=0.5, r=2);\n    \n    color(\"lightblue\")\n    translate([-5, 15, 7.7])\n        cylinder(h=0.2, r=1.5);\n}\n\n// Model text\nmodule product_text() {\n    color(\"white\")\n    translate([-20, 0, 7.6])\n        linear_extrude(height=0.2)\n            text(\"4K\", size=3, halign=\"center\", valign=\"center\", font=\"Arial:style=Bold\");\n}\n\n// Assembly\nadapter_body();\nusbc_connector();\nhdmi_port();\nled_indicator();\nproduct_text();\n\n// Ensure 3D printability\ntranslate([0, 0, -10])\n    cube([0.1, 0.1, 0.1], center=true);",
    "renders": true
  },
  {
    "electronic_device": "dongle",
    "openscad_code": "// USB-C Dongle - Realistic Style, Medium Complexity\n// Approx 60mm x 25mm x 12mm\n\n// Main colors\n$fn = 40;\n\n// Main dongle body\nmodule dongle_body() {\n    color(\"lightgray\")\n    difference() {\n        // Main shell\n        translate([0,0,6])\n        cube([60,25,12], center=true);\n        \n        // Top chamfers\n        translate([0,0,11.5])\n        cube([58,23,1], center=true);\n        \n        // Bottom chamfers\n        translate([0,0,0.5])\n        cube([58,23,1], center=true);\n    }\n}\n\n// USB-C connector\nmodule usbc_connector() {\n    color(\"silver\")\n    translate([-30,0,6])\n    rotate([0,90,0])\n    cylinder(h=8, r1=5.6, r2=5.6);\n    \n    color(\"black\")\n    translate([-30,0,6])\n    rotate([0,90,0])\n    cylinder(h=6.5, r1=4.5, r2=4.5);\n}\n\n// HDMI port\nmodule hdmi_port() {\n    color(\"black\")\n    translate([25,10,6])\n    cube([8,15,4.5]);\n    \n    color(\"silver\")\n    translate([25,10,6])\n    difference() {\n        cube([9,16,5.5]);\n        translate([0.5,0.5,2.5])\n        cube([8,15,3]);\n    }\n}\n\n// USB-A port\nmodule usba_port() {\n    color(\"black\")\n    translate([25,-10,6])\n    cube([8,12,4.5]);\n    \n    color(\"silver\")\n    translate([25,-10,6])\n    difference() {\n        cube([9,13,5.5]);\n        translate([0.5,0.5,2.5])\n        cube([8,12,3]);\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    color(\"darkgray\")\n    translate([15,12.5,11.5])\n    cube([3,2,1]);\n    \n    color(\"red\")\n    translate([15.5,12.5,12.1])\n    sphere(r=0.8);\n}\n\n// Ventilation slots\nmodule ventilation_slots() {\n    for(i=[-20:5:20]) {\n        color(\"gray\")\n        translate([i,0,11.5])\n        cube([2,23,0.5]);\n    }\n}\n\n// Brand text embossing\nmodule brand_text() {\n    color(\"dimgray\")\n    translate([5,8,11.5])\n    cube([8,2,0.3]);\n    \n    translate([5,-8,11.5])\n    cube([8,2,0.3]);\n}\n\n// Screw holes for assembly\nmodule screw_holes() {\n    for(pos=[[-20,10,6], [20,10,6], [-20,-10,6], [20,-10,6]]) {\n        translate(pos)\n        cylinder(h=12, r=1.5, center=true);\n    }\n}\n\n// Assembly\ndongle_body();\nusbc_connector();\nhdmi_port();\nusba_port();\nled_indicator();\nventilation_slots();\nbrand_text();\n\n// Remove screw holes from body\ndifference() {\n    children();\n    screw_holes();\n}",
    "renders": true
  },
  {
    "electronic_device": "cable",
    "openscad_code": "// USB-C Cable with Connector in Realistic Style\n// Overall dimensions: ~80mm length, ~12mm width\n\n// Color definitions\n$fn = 50;  // Smooth curves\n\n// Main cable module\nmodule usb_c_cable() {\n    // USB-C male connector (plug)\n    color(\"silver\")\n    translate([0, 0, 0])\n    usb_c_connector();\n    \n    // Cable strain relief at connector\n    color(\"darkgray\")\n    translate([-8, 0, 0])\n    strain_relief();\n    \n    // Main cable body\n    color(\"black\")\n    translate([-50, 0, 0])\n    cable_body();\n    \n    // Cable end cap\n    color(\"lightgray\")\n    translate([-90, 0, 0])\n    cable_end();\n}\n\n// USB-C connector with shell and pins\nmodule usb_c_connector() {\n    // Outer metal shell\n    difference() {\n        // Main shell body\n        cube([12, 8.4, 2.6], center = true);\n        \n        // Hollow interior\n        translate([0, 0, -1.3])\n        cube([10.5, 6.9, 2.6], center = true);\n        \n        // Beveled edges\n        translate([5.5, 3.7, 0])\n        rotate([0, 45, 0])\n        cube([2, 2, 3], center = true);\n        translate([5.5, -3.7, 0])\n        rotate([0, -45, 0])\n        cube([2, 2, 3], center = true);\n        translate([-5.5, 3.7, 0])\n        rotate([0, -45, 0])\n        cube([2, 2, 3], center = true);\n        translate([-5.5, -3.7, 0])\n        rotate([0, 45, 0])\n        cube([2, 2, 3], center = true);\n    }\n    \n    // Plastic tongue with contacts\n    color(\"darkgray\")\n    translate([0, 0, 1.3])\n    difference() {\n        cube([6.7, 6.5, 0.7], center = true);\n        \n        // Contact pads\n        for (i = [-3:3]) {\n            translate([i * 0.85, 0, 0.35])\n            cube([0.4, 6.2, 0.1], center = true);\n        }\n    }\n    \n    // Ground contacts on sides\n    color(\"gold\")\n    translate([0, 4.2, 0])\n    cube([12, 0.3, 2.6], center = true);\n    translate([0, -4.2, 0])\n    cube([12, 0.3, 2.6], center = true);\n}\n\n// Strain relief where cable meets connector\nmodule strain_relief() {\n    // Tapered cylinder\n    cylinder(h = 8, r1 = 4, r2 = 2.5, center = true);\n    \n    // Reinforcement ribs\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, 3.5, 0])\n        cube([7, 1, 5], center = true);\n    }\n}\n\n// Cable body with texture\nmodule cable_body() {\n    // Main cable cylinder\n    cylinder(h = 60, r = 2.5, center = true);\n    \n    // Braided texture pattern\n    color(\"darkgray\")\n    for (j = [0:29]) {\n        rotate([0, 0, j * 12])\n        translate([2.2, 0, -30 + j * 2])\n        rotate([90, 0, 0])\n        cylinder(h = 1.8, r = 0.3, center = true);\n    }\n}\n\n// Cable end cap\nmodule cable_end() {\n    // Cylindrical cap\n    cylinder(h = 4, r = 2.8, center = true);\n    \n    // Tapered end\n    translate([2, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 2, r1 = 2.8, r2 = 0, center = true);\n}\n\n// Render the complete cable\ntranslate([45, 0, 0])\nrotate([90, 0, 0])\nusb_c_cable();",
    "renders": true
  },
  {
    "electronic_device": "connector",
    "openscad_code": "// USB-C Connector Module\n// Realistic medium complexity 3D printable USB-C connector\n\n// Color definitions\n$fn = 50;\n\n// Main connector module\nmodule usb_c_connector() {\n    // Overall dimensions: 15mm x 8mm x 40mm\n    \n    // Main connector body\n    color(\"black\") {\n        difference() {\n            union() {\n                // Main rectangular body\n                translate([-7.5, -4, 0])\n                    cube([15, 8, 25]);\n                \n                // Tapered front section\n                hull() {\n                    translate([-7.5, -4, 0])\n                        cube([15, 8, 0.1]);\n                    translate([-6.8, -3.3, 5])\n                        cube([13.6, 6.6, 0.1]);\n                }\n                \n                // Cable strain relief\n                translate([-5, -3, 25])\n                    cylinder(h=15, r1=3, r2=4);\n            }\n            \n            // USB-C port opening\n            translate([-3.75, -1.25, -1])\n                cube([7.5, 2.5, 6]);\n            \n            // Internal cavity for contacts\n            translate([-3.5, -1, -0.5])\n                cube([7, 2, 4]);\n        }\n    }\n    \n    // Metal shell\n    color([0.7, 0.7, 0.7]) {\n        // Top shell\n        translate([-7.6, -4.1, -0.1])\n            cube([15.2, 8.2, 0.3]);\n        \n        // Bottom shell\n        translate([-7.6, -4.1, 5.1])\n            cube([15.2, 8.2, 0.3]);\n        \n        // Side shells\n        translate([-7.6, -4.1, 0])\n            cube([0.3, 8.2, 5]);\n        translate([7.3, -4.1, 0])\n            cube([0.3, 8.2, 5]);\n    }\n    \n    // Contact pins\n    color(\"gold\") {\n        for (i = [0:11]) {\n            translate([-3.5 + i * 0.65, -0.5, 2.5])\n                cube([0.25, 1, 0.5]);\n        }\n    }\n    \n    // Center tongue\n    color(\"black\") {\n        translate([-3.5, -0.75, 2.5])\n            cube([7, 1.5, 1.8]);\n    }\n    \n    // LED indicator\n    color(\"red\") {\n        translate([5, 3.5, 12])\n            sphere(r=0.5);\n    }\n    \n    // Cable details\n    color(\"gray20\") {\n        hull() {\n            translate([-4, -2.5, 40])\n                cylinder(h=0.1, r=3.5);\n            translate([-4, -2.5, 35])\n                cylinder(h=0.1, r=3);\n        }\n    }\n    \n    // Grip texture\n    color(\"black\") {\n        for (i = [0:4]) {\n            translate([-6, -3.8, 8 + i * 3])\n                cube([12, 0.4, 0.2]);\n        }\n    }\n    \n    // Logo area\n    color(\"white\") {\n        translate([0, 0, 25.1])\n            cube([8, 4, 0.1], center=true);\n    }\n}\n\n// Print orientation\nrotate([90, 0, 0])\n    usb_c_connector();",
    "renders": true
  },
  {
    "electronic_device": "port",
    "openscad_code": "// USB-C Port Module\n// Realistic style, medium complexity\n\n// Device parameters\ndevice_width = 40;\ndevice_height = 12;\ndevice_depth = 20;\nport_width = 8.3;\nport_height = 2.5;\nport_depth = 6;\n\n// Shell with rounded edges\nmodule device_shell() {\n    difference() {\n        // Main body\n        color(\"black\")\n        minkowski() {\n            cube([device_width, device_depth, device_height], center=true);\n            sphere(2);\n        }\n        \n        // Hollow interior\n        color(\"black\")\n        minkowski() {\n            cube([device_width-4, device_depth-4, device_height-4], center=true);\n            sphere(1);\n        }\n        \n        // Front face cutout for port\n        translate([0, device_depth/2, 0])\n        cube([port_width+2, 2, port_height+2], center=true);\n    }\n}\n\n// USB-C tongue inside port\nmodule usbc_tongue() {\n    color(\"darkgray\")\n    translate([0, device_depth/2 - 0.5, 0])\n    cube([6.7, 1.2, 0.7], center=true);\n}\n\n// USB-C pins on tongue\nmodule usbc_pins() {\n    for(i=[-3:1:3]) {\n        color(\"gold\")\n        translate([i*1.0, device_depth/2 - 0.5, 0.35])\n        cube([0.3, 0.5, 0.1], center=true);\n    }\n}\n\n// Port housing\nmodule port_housing() {\n    color(\"silver\")\n    difference() {\n        translate([0, device_depth/2 - port_depth/2, 0])\n        cube([port_width, port_depth, port_height], center=true);\n        \n        // Interior cavity\n        translate([0, device_depth/2 + 1, 0])\n        cube([port_width-1.5, port_depth+2, port_height-1], center=true);\n    }\n}\n\n// Mounting tabs\nmodule mounting_tabs() {\n    // Left tab\n    translate([-device_width/2 - 5, 0, 0])\n    color(\"black\")\n    cube([10, 15, 2], center=true);\n    \n    // Right tab\n    translate([device_width/2 + 5, 0, 0])\n    color(\"black\")\n    cube([10, 15, 2], center=true);\n    \n    // Mounting holes\n    translate([-device_width/2 - 5, 0, 0])\n    color(\"white\")\n    cylinder(h=3, r=2, center=true);\n    \n    translate([device_width/2 + 5, 0, 0])\n    color(\"white\")\n    cylinder(h=3, r=2, center=true);\n}\n\n// LED indicator\nmodule led_indicator() {\n    translate([device_width/2 - 5, -device_depth/2 + 3, device_height/2 + 1])\n    color(\"red\")\n    sphere(1.5);\n}\n\n// Cable strain relief feature\nmodule strain_relief() {\n    translate([0, device_depth/2 + 3, 0])\n    color(\"black\")\n    difference() {\n        cube([port_width + 8, 6, port_height + 4], center=true);\n        translate([0, 3, 0])\n        cube([port_width + 6, 6, port_height + 2], center=true);\n    }\n}\n\n// Assembly\ndevice_shell();\nport_housing();\nusbc_tongue();\nusbc_pins();\nmounting_tabs();\nled_indicator();\nstrain_relief();",
    "renders": true
  },
  {
    "electronic_device": "jack",
    "openscad_code": "// Realistic 1/4\" Audio Jack (6.35 mm) with plug and body\n// Overall length ~82 mm, body ~50 mm long, Ø19 mm\n\n// Color constants\n$fa = 2; $fs = 0.5;\n\nmodule jack_body() {\n    color(\"saddlebrown\") {\n        difference() {\n            // Main barrel\n            cylinder(h = 38, d = 19, center = true);\n            // Hollow core for plug\n            cylinder(h = 40, d = 6.5, center = true);\n        }\n        \n        // Front rim lip\n        translate([0,0,19.5])\n            cylinder(h = 2, d1 = 19, d2 = 21);\n    }\n    \n    // Knurled grip band\n    color(\"burlywood\") {\n        difference() {\n            cylinder(h = 14, d = 21, center = true);\n            cylinder(h = 15, d = 19, center = true);\n        }\n        // Knurls via tiny cubes rotated around\n        for (i=[-60:10:60])\n            rotate([0,0,i])\n                translate([10.5,0,0])\n                    cube([1, 1, 14], center = true);\n    }\n}\n\nmodule jack_rear() {\n    color(\"silver\") {\n        // Rear strain-relief cylinder\n        translate([0,0,-21])\n            cylinder(h = 10, d = 12);\n        \n        // Cable exit hole\n        translate([0,0,-26])\n            rotate([90,0,0])\n                cylinder(h = 15, d = 8);\n    }\n    \n    // Solder lugs\n    color(\"gold\")\n    for (a=[0:120:240])\n        rotate([0,0,a])\n            translate([8.5,0,-21])\n                cube([5, 2, 4], center = true);\n}\n\nmodule jack_plug() {\n    color(\"silver\") {\n        // Tip – conductive\n        translate([0,0,25])\n            cylinder(h = 7, d = 6);\n        \n        // Insulator ring\n        color(\"black\")\n            translate([0,0,21.5])\n                cylinder(h = 3, d = 6);\n        \n        // Sleeve – conductive\n        color(\"silver\")\n            translate([0,0,15])\n                cylinder(h = 10, d = 6);\n        \n        // Second insulator\n        color(\"black\")\n            translate([0,0,11.5])\n                cylinder(h = 3, d = 6);\n        \n        // Ring – conductive\n        color(\"silver\")\n            translate([0,0,7])\n                cylinder(h = 8, d = 6);\n        \n        // Cable end ferrule\n        color(\"silver\")\n            translate([0,0,-5])\n                cylinder(h = 12, d = 8);\n    }\n    \n    // Cable\n    color(\"black\")\n    translate([0,0,-15])\n        cylinder(h = 20, d = 5, $fn = 20);\n}\n\n// Assemble the jack\njack_body();\njack_rear();\njack_plug();",
    "renders": true
  },
  {
    "electronic_device": "slot",
    "openscad_code": "// Slot-style electronic device (USB flash drive)\n// Realistic style, medium complexity\n\n// Color definitions\n$fn=50;\n\n// Main body\nmodule body() {\n    color(\"silver\")\n    union() {\n        // Main housing\n        difference() {\n            cube([58, 20, 8]);\n            // LED window\n            translate([54, 8, 7.5])\n                cube([4, 4, 1]);\n        }\n        \n        // Keychain hole reinforcement\n        translate([5, 10, -1])\n            cylinder(h=10, r=3);\n    }\n}\n\n// USB connector\nmodule usb_connector() {\n    color(\"gold\")\n    difference() {\n        // Connector shell\n        translate([58, 0, 0])\n            cube([16, 20, 8]);\n        \n        // Inner space\n        translate([59, 2, 2])\n            cube([14, 16, 4]);\n    }\n    \n    // Contact pads\n    color(\"gold\")\n    for(i=[0:3]) {\n        translate([60+i*3.5, 2, 0.5])\n            cube([3, 16, 0.5]);\n    }\n}\n\n// Activity LED\nmodule led() {\n    color(\"red\")\n    translate([56, 10, 7.5])\n        sphere(r=0.8);\n}\n\n// Brand label area\nmodule label() {\n    color([0.2, 0.2, 0.2])\n    translate([20, 1, 8])\n        cube([18, 18, 0.5]);\n}\n\n// Ventilation slots\nmodule vents() {\n    color(\"silver\")\n    difference() {\n        cube([58, 20, 8]);\n        // Side vents\n        for(i=[0:4]) {\n            translate([10+i*8, 0, 2])\n                cube([3, 1, 4]);\n            translate([10+i*8, 19, 2])\n                cube([3, 1, 4]);\n        }\n    }\n}\n\n// Grip texture\nmodule grip() {\n    color(\"silver\")\n    for(i=[0:3]) {\n        for(j=[0:1]) {\n            translate([15+i*7, 2+j*14, 8])\n                cube([3, 3, 0.5]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    usb_connector();\n    led();\n    label();\n    vents();\n    grip();\n}",
    "renders": true
  },
  {
    "electronic_device": "socket",
    "openscad_code": "// Realistic 3D printable wall socket with USB ports\n// Overall dimensions: 86 mm x 86 mm x 35 mm\n\n// Wall thickness for 3D printing\nwall = 1.6;\n\n// Main body dimensions\nbody_w = 86;\nbody_h = 86;\nbody_d = 30;\n\n// Faceplate dimensions\nplate_w = body_w;\nplate_h = body_h;\nplate_d = 5;\n\n// Socket cutouts\nsocket_w = 13;\nsocket_h = 19;\nsocket_d = 8;\nsocket_gap = 14.5;\n\n// USB port dimensions\nusb_w = 12;\nusb_h = 7;\nusb_d = 10;\nusb_gap = 15;\n\n// LED indicator\nled_r = 2;\nled_d = 3;\n\n// Screw hole\nscrew_r = 3;\nscrew_d = 8;\n\n// Colors\ncolor_body = [0.9, 0.9, 0.9];\ncolor_face = [0.95, 0.95, 0.95];\ncolor_usb = [0.2, 0.2, 0.2];\ncolor_metal = [0.7, 0.7, 0.7];\ncolor_led = [0, 1, 0];\n\nmodule socket_holes() {\n    // Top socket holes\n    translate([0, socket_gap/2, 0])\n        cube([socket_w, socket_h, socket_d*2], center=true);\n    translate([0, -socket_gap/2, 0])\n        cube([socket_w, socket_h, socket_d*2], center=true);\n    \n    // USB port holes\n    translate([usb_gap, 0, 0])\n        cube([usb_w, usb_h, usb_d*2], center=true);\n    translate([-usb_gap, 0, 0])\n        cube([usb_w, usb_h, usb_d*2], center=true);\n}\n\nmodule screw_holes() {\n    // Top and bottom screw holes\n    translate([0, body_h/2 - 10, -screw_d/2])\n        cylinder(h=screw_d*2, r=screw_r, center=true);\n    translate([0, -body_h/2 + 10, -screw_d/2])\n        cylinder(h=screw_d*2, r=screw_r, center=true);\n}\n\nmodule led_indicator() {\n    translate([body_w/2 - 10, 0, -led_d/2])\n        cylinder(h=led_d, r=led_r, center=true);\n}\n\n// Main body\ncolor(color_body)\ndifference() {\n    // Main box\n    cube([body_w, body_h, body_d], center=true);\n    \n    // Hollow out back\n    translate([0, 0, -wall/2])\n        cube([body_w-wall*2, body_h-wall*2, body_d], center=true);\n    \n    // Socket holes\n    translate([0, 0, body_d/2 - socket_d/2])\n        socket_holes();\n    \n    // Screw holes\n    screw_holes();\n}\n\n// Faceplate\ncolor(color_face)\ndifference() {\n    // Faceplate\n    translate([0, 0, body_d/2 + plate_d/2])\n        cube([plate_w, plate_h, plate_d], center=true);\n    \n    // Socket holes\n    translate([0, 0, -plate_d/2])\n        socket_holes();\n    \n    // Screw holes\n    translate([0, 0, -plate_d/2])\n        screw_holes();\n    \n    // LED hole\n    translate([0, 0, -plate_d/2])\n        led_indicator();\n}\n\n// USB port internals\ncolor(color_usb)\nfor(x = [usb_gap, -usb_gap]) {\n    translate([x, 0, body_d/2 - usb_d/2])\n        cube([usb_w - wall*2, usb_h - wall*2, usb_d], center=true);\n}\n\n// Metal contacts inside sockets\ncolor(color_metal)\nfor(y = [socket_gap/2, -socket_gap/2]) {\n    translate([0, y, body_d/2 - socket_d/2])\n        cube([socket_w - wall*4, 1, socket_d - wall], center=true);\n    \n    // Side contacts\n    for(x = [-socket_w/4, socket_w/4]) {\n        translate([x, y, body_d/2 - socket_d/2])\n            cube([1, socket_h - wall*4, socket_d - wall], center=true);\n    }\n}\n\n// LED\ncolor(color_led)\ntranslate([body_w/2 - 10, 0, body_d/2 + plate_d - led_d/2])\n    cylinder(h=led_d, r=led_r, center=true);",
    "renders": true
  },
  {
    "electronic_device": "plug",
    "openscad_code": "// Realistic 3-prong power plug with molded strain-relief and 3D-printable orientation\n// Overall length ≈ 90 mm, width ≈ 45 mm, thickness ≈ 30 mm\n\n// Colors\nplug_color = \"dimgray\";\nblade_color = \"silver\";\nstrain_color = \"black\";\ncable_color = \"gray\";\n\n// Global parameters\nblade_thick  = 1.2;\nblade_wide   = 6.2;\nblade_long   = 22;\nwall_thick   = 1.6;\nstrain_len   = 40;\nbody_len     = 50;\nbody_w       = 45;\nbody_t       = 30;\ncable_d      = 8;\n\n// Main body shell\nmodule plug_body() {\n    color(plug_color)\n    difference() {\n        // Outer shell with rounded edges\n        hull() {\n            for(x=[-body_w/2+3, body_w/2-3])\n                for(z=[0, body_t])\n                    translate([x, 0, z]) sphere(3, $fn=20);\n        }\n        // Hollow cavity\n        translate([0, 5, wall_thick])\n            cube([body_w-2*wall_thick, body_len-10, body_t-2*wall_thick], center=true);\n        // Cable exit hole\n        translate([0, body_len/2, body_t/2])\n            rotate([90,0,0])\n                cylinder(d=cable_d+2, h=wall_thick+1, $fn=20);\n    }\n}\n\n// Blade (prong) generator\nmodule blade(w, h, l) {\n    color(blade_color)\n    linear_extrude(height=l, center=false)\n        offset(r=0.4)\n            square([w, h], center=true);\n}\n\n// Assemble the three blades\nmodule blades() {\n    // Hot & neutral\n    for(x=[-9.5, 9.5])\n        translate([x, -body_len/2-0.1, body_t/2])\n            rotate([90,0,0])\n                blade(blade_wide, blade_thick, blade_long);\n    // Ground pin\n    translate([0, -body_len/2-0.1, 4])\n        rotate([90,0,0])\n            blade(8, blade_thick, blade_long-2);\n}\n\n// Molded strain-relief collar\nmodule strain_relief() {\n    color(strain_color)\n    difference() {\n        union() {\n            // Tapered collar\n            hull() {\n                translate([0, body_len/2, body_t/2])\n                    sphere(cable_d/2+2, $fn=20);\n                translate([0, body_len/2+strain_len, body_t/2])\n                    sphere(cable_d/2+1, $fn=20);\n            }\n            // Grip ridges\n            for(i=[0:3:strain_len-3])\n                translate([0, body_len/2+i, body_t/2])\n                    scale([1.2,1,1])\n                        sphere(cable_d/2+1.5, $fn=20);\n        }\n        // Cable hole\n        translate([0, body_len/2+strain_len/2, body_t/2])\n            rotate([90,0,0])\n                cylinder(d=cable_d, h=strain_len+2, center=true, $fn=20);\n    }\n}\n\n// Cable\nmodule cable() {\n    color(cable_color)\n    translate([0, body_len/2+strain_len, body_t/2])\n        rotate([90,0,0])\n            cylinder(d=cable_d, h=40, center=true, $fn=20);\n}\n\n// Assembly\nplug_body();\nblades();\nstrain_relief();\ncable();\n\n// Optional logo emboss\ntranslate([0, -body_len/4, body_t-0.5])\n    linear_extrude(height=0.5)\n        text(\"3D-PWR\", size=6, halign=\"center\");",
    "renders": true
  },
  {
    "electronic_device": "pin",
    "openscad_code": "// Pin-style electronic device - realistic style, medium complexity\n// A compact 3D printed pin with integrated LED matrix display and control button\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main dimensions (mm)\npin_diameter = 35;\npin_height = 8;\nbase_thickness = 2;\nscreen_recess = 1.5;\nbutton_height = 1.2;\nusb_width = 7;\nusb_height = 3;\nled_matrix_size = 20;\nled_count = 8;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_button = [0.8, 0.2, 0.2];\ncolor_led = [0.1, 0.9, 0.1];\ncolor_usb = [0.3, 0.3, 0.3];\n\n// Main pin body\nmodule pin_body() {\n    color(color_body) {\n        // Base cylinder\n        cylinder(h=pin_height, r=pin_diameter/2, center=true);\n        \n        // Chamfered edge for realism\n        translate([0, 0, pin_height/2 - 0.5])\n            cylinder(h=1, r1=pin_diameter/2, r2=pin_diameter/2 - 1, center=true);\n    }\n}\n\n// LED matrix display area\nmodule led_display() {\n    // Recessed screen area\n    color(color_screen) {\n        translate([0, 0, pin_height/2 - screen_recess/2])\n            cube([led_matrix_size, led_matrix_size, screen_recess], center=true);\n    }\n    \n    // Individual LED dots\n    color(color_led) {\n        for (x = [-3:3]) {\n            for (y = [-3:3]) {\n                if (abs(x) + abs(y) <= 4) {\n                    translate([x*2.2, y*2.2, pin_height/2 - screen_recess + 0.1])\n                        sphere(r=0.5);\n                }\n            }\n        }\n    }\n    \n    // Screen bezel\n    color(color_body) {\n        translate([0, 0, pin_height/2 - screen_recess/2])\n            difference() {\n                cube([led_matrix_size + 4, led_matrix_size + 4, screen_recess], center=true);\n                cube([led_matrix_size + 2, led_matrix_size + 2, screen_recess + 1], center=true);\n            }\n    }\n}\n\n// Control button\nmodule control_button() {\n    color(color_button) {\n        translate([0, -pin_diameter/2 + 6, pin_height/2 + button_height/2 - 0.5])\n            cylinder(h=button_height, r=3, center=true);\n    }\n    \n    // Button indicator ring\n    color([0.9, 0.9, 0.9]) {\n        translate([0, -pin_diameter/2 + 6, pin_height/2 + button_height/2 + 0.1])\n            cylinder(h=0.2, r=2.5, center=true);\n    }\n}\n\n// USB-C charging port\nmodule usb_port() {\n    color(color_usb) {\n        translate([pin_diameter/2 - 2, 0, pin_height/2 - usb_height/2])\n            cube([usb_width, usb_height, 1], center=true);\n    }\n    \n    // USB-C connector detail\n    color([0.1, 0.1, 0.1]) {\n        translate([pin_diameter/2 - 2, 0, pin_height/2])\n            cube([usb_width - 2, usb_height - 1, 0.5], center=true);\n    }\n}\n\n// Pin attachment post\nmodule pin_post() {\n    color(color_body) {\n        translate([0, 0, -pin_height/2 - base_thickness/2])\n            cylinder(h=base_thickness + 2, r=2, center=true);\n    }\n    \n    // Pin back detail\n    color([0.5, 0.5, 0.5]) {\n        translate([0, 0, -pin_height/2 - base_thickness])\n            cylinder(h=0.5, r=pin_diameter/2 - 2, center=true);\n    }\n}\n\n// Device label text (simplified as grooves)\nmodule device_label() {\n    color([0.1, 0.1, 0.1]) {\n        translate([0, pin_diameter/2 - 3, pin_height/2 - 0.2])\n            cube([12, 0.3, 0.3], center=true);\n        translate([0, pin_diameter/2 - 4, pin_height/2 - 0.2])\n            cube([8, 0.3, 0.3], center=true);\n    }\n}\n\n// Assembly\npin_body();\nled_display();\ncontrol_button();\nusb_port();\npin_post();\ndevice_label();",
    "renders": true
  },
  {
    "electronic_device": "led",
    "openscad_code": "// LED light bulb – realistic style, medium complexity\n// Dimensions: ~60 mm Ø, ~110 mm long\n// Wall thickness ≥ 1 mm for 3D printing\n// No support required – all overhangs < 45°\n\n$fn = 50;                 // smooth curves\n\n// main assembly\nmodule led_bulb() {\n    // Edison E27 metal base\n    color(\"silver\") base();\n\n    // white PBT/plastic housing\n    color(\"white\") housing();\n\n    // internal aluminium heat-sink fins\n    color(\"silver\") heat_sink();\n\n    // frosted PMMA diffuser dome\n    color(\"gainsboro\", 0.8) diffuser();\n}\n\n// E27 screw thread base\nmodule base() {\n    // cylindrical shell\n    cylinder(h = 18, d = 27, center = false);\n\n    // thread rings – simple stacked cylinders\n    for (i = [0 : 3]) {\n        translate([0, 0, i * 3 + 1])\n            cylinder(h = 2, d1 = 27, d2 = 26.5);\n    }\n\n    // bottom contact plate\n    translate([0, 0, -1])\n        cylinder(h = 2, d = 15);\n}\n\n// plastic housing\nmodule housing() {\n    // hollow cylinder with 1 mm walls\n    difference() {\n        cylinder(h = 40, d = 60);\n        translate([0, 0, 1])\n            cylinder(h = 38, d = 58);\n    }\n\n    // vent slits for airflow\n    for (a = [0 : 30 : 330]) {\n        rotate([0, 0, a])\n            translate([29, 0, 25])\n                cube([2, 1, 12], center = true);\n    }\n}\n\n// aluminium heat-sink fins inside housing\nmodule heat_sink() {\n    // central core\n    cylinder(h = 38, d = 20);\n\n    // 12 radial fins, 1 mm thick\n    for (a = [0 : 30 : 330]) {\n        rotate([0, 0, a])\n            translate([10, 0, 0])\n                cube([20, 1, 38], center = true);\n    }\n}\n\n// frosted dome diffuser\nmodule diffuser() {\n    // hollow hemisphere\n    difference() {\n        translate([0, 0, 40])\n            sphere(d = 60);\n        translate([0, 0, 40])\n            sphere(d = 58);\n    }\n\n    // inner LED ring visible through diffuser\n    color(\"yellow\", 0.5)\n        translate([0, 0, 41])\n            rotate_extrude()\n                translate([20, 0, 0])\n                    circle(d = 4);\n}\n\n// render the bulb\nled_bulb();",
    "renders": true
  },
  {
    "electronic_device": "lcd",
    "openscad_code": "// Realistic LCD Monitor Model (Medium Complexity)\n// 3D printable with 2mm wall thickness\n\n// Overall dimensions\nwidth = 80;\nheight = 55;\ndepth = 8;\nscreen_bezel = 3;\nwall_thickness = 2;\n\n// Screen parameters\nscreen_width = width - 2 * screen_bezel;\nscreen_height = height - 2 * screen_bezel;\n\n// Base parameters\nbase_width = 40;\nbase_depth = 20;\nbase_height = 5;\n\n// Module for rounded cube edges\nmodule rounded_cube(size, radius) {\n    x = size[0];\n    y = size[1];\n    z = size[2];\n    \n    hull() {\n        translate([radius, radius, radius]) sphere(r=radius);\n        translate([x-radius, radius, radius]) sphere(r=radius);\n        translate([radius, y-radius, radius]) sphere(r=radius);\n        translate([x-radius, y-radius, radius]) sphere(r=radius);\n        translate([radius, radius, z-radius]) sphere(r=radius);\n        translate([x-radius, radius, z-radius]) sphere(r=radius);\n        translate([radius, y-radius, z-radius]) sphere(r=radius);\n        translate([x-radius, y-radius, z-radius]) sphere(r=radius);\n    }\n}\n\n// Main monitor body\nmodule monitor_body() {\n    difference() {\n        // Outer shell\n        color([0.2, 0.2, 0.2]) rounded_cube([width, height, depth], 2);\n        \n        // Screen recess\n        translate([screen_bezel, screen_bezel, -1])\n            cube([screen_width, screen_height, depth + 2]);\n            \n        // Ventilation slots on back\n        for(i = [5:10:width-10]) {\n            translate([i, 2, depth-wall_thickness])\n                cube([6, height-4, wall_thickness]);\n        }\n    }\n}\n\n// LCD screen\nmodule lcd_screen() {\n    color([0.05, 0.05, 0.05])\n    translate([screen_bezel, screen_bezel, depth-wall_thickness])\n    cube([screen_width, screen_height, wall_thickness]);\n    \n    // Active display area\n    color([0.1, 0.1, 0.15])\n    translate([screen_bezel + 2, screen_bezel + 2, depth-wall_thickness+0.1])\n    cube([screen_width-4, screen_height-4, wall_thickness/2]);\n}\n\n// Control buttons\nmodule control_buttons() {\n    translate([width-8, height/2-5, depth-1])\n    for(i = [0:3]) {\n        translate([0, i*3, 0])\n        color([0.3, 0.3, 0.3])\n        cylinder(h=1.5, d=2, $fn=16);\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    color([0, 1, 0])\n    translate([width-12, height-4, depth-0.5])\n    cylinder(h=0.5, d=1.5, $fn=16);\n}\n\n// Ports panel\nmodule ports_panel() {\n    translate([wall_thickness, wall_thickness, depth/2])\n    rotate([90, 0, 0])\n    difference() {\n        color([0.15, 0.15, 0.15])\n        cube([width-2*wall_thickness, 6, 3]);\n        \n        // HDMI port\n        translate([8, 1, -1])\n            cube([8, 4, 4]);\n            \n        // USB ports\n        for(i = [0:1]) {\n            translate([20+i*7, 1, -1])\n                cube([5, 4, 4]);\n        }\n        \n        // Power port\n        translate([width-2*wall_thickness-8, 1, -1])\n            cube([6, 4, 4]);\n    }\n}\n\n// Monitor stand\nmodule monitor_stand() {\n    // Neck\n    translate([width/2-5, -3, -base_height])\n    color([0.25, 0.25, 0.25])\n    rounded_cube([10, 6, base_height], 1);\n    \n    // Base\n    translate([width/2-base_width/2, -base_depth, -base_height-1])\n    color([0.2, 0.2, 0.2])\n    rounded_cube([base_width, base_depth, 1], 1);\n    \n    // Base pads\n    for(x = [5, base_width-5]) {\n        for(y = [5, base_depth-5]) {\n            translate([width/2-base_width/2+x, -base_depth+y, -base_height-1.5])\n            color([0.1, 0.1, 0.1])\n            cylinder(h=0.5, d=3, $fn=16);\n        }\n    }\n}\n\n// Brand text placeholder (as embossed logo)\nmodule brand_logo() {\n    translate([width/2-10, height-8, depth-0.2])\n    color([0.3, 0.3, 0.3])\n    linear_extrude(height=0.3)\n    text(\"LCD\", size=4, font=\"Arial:style=Bold\");\n}\n\n// Assemble the complete monitor\nmonitor_body();\nlcd_screen();\ncontrol_buttons();\nled_indicator();\nports_panel();\nmonitor_stand();\nbrand_logo();",
    "renders": true
  },
  {
    "electronic_device": "oled",
    "openscad_code": "// OLED Display Module – medium-complexity, printable, 0.4 mm wall friendly\n// Overall footprint 64 × 30 × 12 mm\n\n$fn = 36;\n\n// --- Color constants -------------------------------------------------\nC_BLACK   = [0.10, 0.10, 0.10];\nC_GRAY    = [0.30, 0.30, 0.30];\nC_SILVER  = [0.70, 0.70, 0.70];\nC_GREEN   = [0.00, 0.60, 0.00];\nC_RED     = [0.80, 0.00, 0.00];\n\n// --- Main assembly ---------------------------------------------------\ndifference() {\n    union() {\n        color(C_BLACK) body();\n        color(C_GRAY)  screen_glass();\n        color(C_SILVER) pcb_bottom();\n        color(C_SILVER) side_buttons();\n        color(C_SILVER) mounting_tabs();\n    }\n\n    color(C_BLACK)   // printable cut-outs\n        translate([0,0,-1])\n        union() {\n            // micro-USB cut-out on left side\n            translate([-32.5, 0, 6])\n                rotate([0,90,0])\n                cylinder(h = 8, d = 7.8);\n\n            // four mounting screws\n            for (p = [[-25,12], [-25,-12], [25,12], [25,-12]])\n                translate(concat(p,[0]))\n                    cylinder(h = 15, d = 3.2);\n        };\n}\n\n// --- Modules ---------------------------------------------------------\nmodule body() {\n    difference() {\n        // main enclosure\n        translate([0,0,5])\n            rounded_box([64,30,10], 2);\n\n        // top recess for glass\n        translate([0,0,9.7])\n            rounded_box([56,24,2], 1.5);\n\n        // indicator led window\n        translate([25,10,9.9])\n            cube([3,6,1]);\n    }\n}\n\nmodule rounded_box(size, r) {\n    // simple rounded box using minkowski\n    minkowski() {\n        cube([size.x-2*r, size.y-2*r, size.z-2*r], center=true);\n        sphere(r);\n    }\n}\n\nmodule screen_glass() {\n    translate([0,0,9.9])\n        color([0,0,0], 0.7)  // translucent\n        rounded_box([54,22,0.5], 1);\n}\n\nmodule pcb_bottom() {\n    translate([0,0,0.8])\n        cube([58,26,1.6], center=true);\n}\n\nmodule side_buttons() {\n    // two tactile buttons on right edge\n    for (i = [0,1]) {\n        translate([32, 8 - i*16, 7])\n            rotate([90,0,0])\n            cylinder(h = 3.2, d = 5.2);\n    }\n}\n\nmodule mounting_tabs() {\n    // 1 mm thick printable ears\n    for (x = [-27,27]) {\n        translate([x,0,5])\n            cube([8,2,10], center=true);\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "crt",
    "openscad_code": "// Realistic CRT Television Model - Medium Complexity\n// 3D printable, ~80mm wide\n\n// Main colors\n$fa = 2;\n$fs = 0.5;\n\n// CRT Television Module\nmodule crt_tv() {\n    // Main body - plastic casing\n    color([0.2, 0.2, 0.2]) \n    difference() {\n        // Front half\n        union() {\n            // Main rectangular body\n            cube([80, 60, 70], center=true);\n            \n            // Back curve for CRT tube\n            translate([0, 0, 35])\n            scale([1, 1, 0.8])\n            sphere(d=80, $fn=30);\n        }\n        \n        // Hollow inside\n        cube([75, 55, 65], center=true);\n    }\n    \n    // Front bezel\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, -35.1])\n    cube([82, 62, 5], center=true);\n    \n    // Screen glass\n    color([0.3, 0.3, 0.4, 0.8])\n    translate([0, 0, -33])\n    cube([70, 50, 2], center=true);\n    \n    // Screen surface detail\n    color([0.2, 0.2, 0.3, 0.9])\n    translate([0, 0, -32.9])\n    cube([68, 48, 0.5], center=true);\n    \n    // Control panel below screen\n    color([0.15, 0.15, 0.15])\n    translate([0, 22, -32.5])\n    cube([60, 8, 3], center=true);\n    \n    // Power button\n    color([0.8, 0.1, 0.1])\n    translate([-25, 22, -30.5])\n    cylinder(h=2, d=4, $fn=16);\n    \n    // Channel buttons\n    for(i = [-1:1]) {\n        color([0.2, 0.2, 0.2])\n        translate([i * 8, 22, -30.5])\n        cube([5, 4, 1.5], center=true);\n    }\n    \n    // Volume knob\n    color([0.3, 0.3, 0.3])\n    translate([25, 22, -31])\n    cylinder(h=3, d=6, $fn=32);\n    \n    // Power indicator LED\n    color([0.1, 0.8, 0.1])\n    translate([-35, 22, -30.5])\n    sphere(d=2, $fn=16);\n    \n    // Vents on top\n    for(i = [-30:10:30]) {\n        color([0.1, 0.1, 0.1])\n        translate([i, 0, 35])\n        cube([8, 60, 2], center=true);\n    }\n    \n    // Antenna connector on back\n    color([0.4, 0.4, 0.4])\n    translate([0, 30, 30])\n    rotate([90, 0, 0])\n    cylinder(h=8, d1=6, d2=4, $fn=16);\n    \n    // Power cord entry\n    color([0.2, 0.2, 0.2])\n    translate([0, -30, 15])\n    rotate([90, 0, 0])\n    cylinder(h=5, d=4, $fn=16);\n    \n    // Bottom feet\n    for(x = [-25, 25]) {\n        for(y = [-20, 20]) {\n            color([0.3, 0.3, 0.3])\n            translate([x, y, -38])\n            cylinder(h=3, d=6, $fn=16);\n        }\n    }\n    \n    // Brand name plate\n    color([0.8, 0.8, 0.8])\n    translate([0, -28, -32.5])\n    cube([20, 4, 0.5], center=true);\n}\n\n// Rotate to proper orientation\nrotate([0, -10, 0])\ncrt_tv();",
    "renders": true
  },
  {
    "electronic_device": "plasma",
    "openscad_code": "// Plasma Electronic Device - Realistic Style\n// A handheld plasma cutter control unit with display and controls\n\n// Device dimensions (mm)\ndevice_width = 85;\ndevice_height = 150;\ndevice_depth = 25;\n\n// Main body with rounded edges\nmodule main_body() {\n    color(\"darkslategray\") {\n        // Front shell\n        difference() {\n            rounded_box(device_width, device_height, device_depth, 5);\n            translate([0, 0, -1])\n                rounded_box(device_width - 2, device_height - 2, device_depth + 2, 4);\n        }\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(w, h, d, r) {\n    hull() {\n        translate([r, r, 0]) cylinder(h=d, r=r);\n        translate([w-r, r, 0]) cylinder(h=d, r=r);\n        translate([r, h-r, 0]) cylinder(h=d, r=r);\n        translate([w-r, h-r, 0]) cylinder(h=d, r=r);\n    }\n}\n\n// LCD display\nmodule display() {\n    color(\"black\") {\n        translate([10, 120, device_depth/2 + 0.1])\n            cube([65, 30, 1]);\n    }\n    color(\"deepskyblue\") {\n        translate([12, 122, device_depth/2 + 1.2])\n            cube([61, 26, 0.5]);\n    }\n}\n\n// Control buttons\nmodule control_buttons() {\n    // Power button\n    color(\"red\") {\n        translate([15, 20, device_depth/2 + 0.1])\n            cylinder(h=2, r=5);\n    }\n    \n    // Mode buttons\n    for(i = [0:3]) {\n        color(\"dimgray\") {\n            translate([35 + i*15, 45, device_depth/2 + 0.1])\n                cylinder(h=1.5, r=4);\n        }\n    }\n    \n    // Arrow keys\n    for(i = [-1:1]) {\n        color(\"dimgray\") {\n            translate([device_width/2 + i*12, 70, device_depth/2 + 0.1])\n                cube([8, 8, 1.5]);\n        }\n    }\n}\n\n// Air inlet\nmodule air_inlet() {\n    color(\"silver\") {\n        translate([device_width - 10, 30, -device_depth/2 - 5])\n            rotate([90, 0, 0])\n                cylinder(h=10, r1=6, r2=4);\n    }\n}\n\n// Cable connector\nmodule cable_connector() {\n    color(\"gold\") {\n        translate([device_width/2, 5, -device_depth/2 - 8])\n            cylinder(h=8, r=4);\n    }\n    color(\"black\") {\n        translate([device_width/2, 5, -device_depth/2 - 8])\n            cylinder(h=8, r=3);\n    }\n}\n\n// LED indicators\nmodule indicators() {\n    for(i = [0:2]) {\n        color(\"lime\") {\n            translate([15 + i*25, 100, device_depth/2 + 0.1])\n                cylinder(h=1, r=2);\n        }\n    }\n}\n\n// Cooling vents\nmodule cooling_vents() {\n    color(\"darkslategray\") {\n        for(i = [0:8]) {\n            translate([device_width - 5, 20 + i*15, 0])\n                rotate([0, 90, 0])\n                    cube([device_depth, 2, 1]);\n        }\n    }\n}\n\n// Brand label\nmodule brand_label() {\n    color(\"white\") {\n        translate([device_width/2, 135, device_depth/2 + 0.1])\n            cube([40, 8, 0.5]);\n    }\n}\n\n// Assembly\nmain_body();\ndisplay();\ncontrol_buttons();\nair_inlet();\ncable_connector();\nindicators();\ncooling_vents();\nbrand_label();",
    "renders": true
  },
  {
    "electronic_device": "touchscreen",
    "openscad_code": "// Touchscreen Smartphone - Realistic Style, Medium Complexity\n// Overall dimensions: 70mm x 150mm x 8.5mm\n\n// Main colors\nphone_color = [0.15, 0.15, 0.15];  // Dark gray/black\nscreen_color = [0.05, 0.05, 0.05]; // Very dark for screen\nbutton_color = [0.2, 0.2, 0.2];    // Slightly lighter gray\ncamera_color = [0.1, 0.1, 0.1];    // Black camera module\nspeaker_color = [0.25, 0.25, 0.25];// Speaker grill color\n\n// Wall thickness for 3D printing\nwall_thickness = 1.2;\n\nmodule rounded_cube(size, radius) {\n    // Create a rounded cube using sphere and cube differences\n    difference() {\n        cube(size, center = true);\n        translate([size[0]/2 - radius, size[1]/2 - radius, size[2]/2 - radius])\n            sphere(r = radius);\n        translate([-size[0]/2 + radius, size[1]/2 - radius, size[2]/2 - radius])\n            sphere(r = radius);\n        translate([size[0]/2 - radius, -size[1]/2 + radius, size[2]/2 - radius])\n            sphere(r = radius);\n        translate([-size[0]/2 + radius, -size[1]/2 + radius, size[2]/2 - radius])\n            sphere(r = radius);\n        translate([size[0]/2 - radius, size[1]/2 - radius, -size[2]/2 + radius])\n            sphere(r = radius);\n        translate([-size[0]/2 + radius, size[1]/2 - radius, -size[2]/2 + radius])\n            sphere(r = radius);\n        translate([size[0]/2 - radius, -size[1]/2 + radius, -size[2]/2 + radius])\n            sphere(r = radius);\n        translate([-size[0]/2 + radius, -size[1]/2 + radius, -size[2]/2 + radius])\n            sphere(r = radius);\n    }\n}\n\nmodule phone_body() {\n    color(phone_color)\n    difference() {\n        // Main rounded body\n        rounded_cube([70, 150, 8.5], 8);\n        \n        // Screen cutout\n        translate([0, 0, 4.5])\n            cube([65, 135, 2], center = true);\n    }\n}\n\nmodule screen() {\n    color(screen_color)\n    translate([0, 0, 4.5])\n        cube([64.5, 134.5, 0.1], center = true);\n}\n\nmodule camera_bump() {\n    color(camera_color)\n    translate([25, 60, 4.5])\n        cylinder(h = 1.5, r = 6, $fn = 32);\n    \n    // Camera lens\n    color([0, 0, 0])\n    translate([25, 60, 6.1])\n        cylinder(h = 0.5, r = 4, $fn = 32);\n}\n\nmodule flash_led() {\n    color([1, 1, 0.8])\n    translate([-25, 60, 4.5])\n        cylinder(h = 1, r = 2.5, $fn = 16);\n}\n\nmodule speaker_grill() {\n    color(speaker_color)\n    translate([0, -68, 4.5])\n        cube([40, 3, 0.5], center = true);\n    \n    // Speaker holes\n    for(i = [-15:5:15]) {\n        translate([i, -68, 5.1])\n            cylinder(h = 1, r = 0.5, $fn = 8);\n    }\n}\n\nmodule power_button() {\n    color(button_color)\n    translate([35.5, 30, 0])\n        cube([2, 15, 4], center = true);\n}\n\nmodule volume_buttons() {\n    color(button_color)\n    // Volume up button\n    translate([-35.5, 40, 0])\n        cube([2, 10, 4], center = true);\n    \n    // Volume down button\n    translate([-35.5, 20, 0])\n        cube([2, 10, 4], center = true);\n}\n\nmodule charging_port() {\n    color([0.3, 0.3, 0.3])\n    translate([0, -75, -3])\n        cube([10, 2, 3], center = true);\n}\n\nmodule home_button() {\n    color(button_color)\n    translate([0, 60, 4.5])\n        cylinder(h = 0.5, r = 5, $fn = 32);\n}\n\nmodule microphone_hole() {\n    color([0, 0, 0])\n    translate([15, -75, -3.5])\n        cylinder(h = 2, r = 0.8, $fn = 8);\n}\n\n// Assemble the phone\nphone_body();\nscreen();\ncamera_bump();\nflash_led();\nspeaker_grill();\npower_button();\nvolume_buttons();\ncharging_port();\nhome_button();\nmicrophone_hole();",
    "renders": true
  },
  {
    "electronic_device": "keypad",
    "openscad_code": "// Realistic keypad electronic device - 3D printable model\n// Dimensions: 80mm x 50mm x 15mm\n\n// Main parameters\nkeypad_width = 80;\nkeypad_height = 50;\nkeypad_depth = 15;\nwall_thickness = 2;\nkey_size = 8;\nkey_spacing = 12;\nkey_height = 3;\n\n// Colors\n$fn = 32;\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Outer shell\n        color([0.2, 0.2, 0.2])\n        minkowski() {\n            cube([keypad_width, keypad_height, keypad_depth], center=true);\n            sphere(1);\n        }\n        \n        // Hollow interior\n        color([0.15, 0.15, 0.15])\n        translate([0, 0, wall_thickness - 0.5])\n        cube([keypad_width - wall_thickness*2, keypad_height - wall_thickness*2, keypad_depth], center=true);\n    }\n}\n\n// LCD display\nmodule lcd_display() {\n    translate([0, 15, keypad_depth/2 - 0.5])\n    difference() {\n        // Display frame\n        color([0.1, 0.1, 0.1])\n        cube([30, 10, 1], center=true);\n        \n        // Actual screen\n        color([0.05, 0.05, 0.05])\n        translate([0, 0, 0.6])\n        cube([28, 8, 0.5], center=true);\n    }\n}\n\n// Individual key\nmodule key() {\n    difference() {\n        // Key body\n        color([0.3, 0.3, 0.3])\n        cylinder(h=key_height, r=key_size/2, center=true);\n        \n        // Key top depression\n        color([0.25, 0.25, 0.25])\n        translate([0, 0, 0.5])\n        cylinder(h=key_height/2, r=key_size/2 - 1, center=true);\n    }\n}\n\n// Keypad grid\nmodule keypad_grid() {\n    for (y = [-1, 0, 1, 2]) {\n        for (x = [-1, 0, 1]) {\n            translate([x * key_spacing, y * key_spacing - 8, keypad_depth/2 - key_height/2 - 0.5])\n            key();\n        }\n    }\n}\n\n// Function buttons\nmodule function_buttons() {\n    // Power button\n    translate([-30, 15, keypad_depth/2 - key_height/2 - 0.5])\n    color([0.8, 0.1, 0.1])\n    cylinder(h=key_height, r=3, center=true);\n    \n    // Enter button\n    translate([30, -8, keypad_depth/2 - key_height/2 - 0.5])\n    color([0.1, 0.8, 0.1])\n    cube([key_size+2, key_size-2, key_height], center=true);\n    \n    // Clear button\n    translate([30, 8, keypad_depth/2 - key_height/2 - 0.5])\n    color([0.8, 0.8, 0.1])\n    cube([key_size+2, key_size-2, key_height], center=true);\n}\n\n// LED indicators\nmodule led_indicators() {\n    // Power LED\n    translate([-35, 0, keypad_depth/2 - 0.5])\n    color([0, 1, 0])\n    cylinder(h=1, r=1.5, center=true);\n    \n    // Status LED\n    translate([-35, -5, keypad_depth/2 - 0.5])\n    color([0, 0, 1])\n    cylinder(h=1, r=1.5, center=true);\n}\n\n// USB port\nmodule usb_port() {\n    translate([0, -keypad_height/2 + 3, 0])\n    difference() {\n        // Port housing\n        color([0.1, 0.1, 0.1])\n        cube([12, 6, 4], center=true);\n        \n        // Port opening\n        color([0, 0, 0])\n        translate([0, 1, 0])\n        cube([10, 4, 5], center=true);\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    for (x = [-30, 30]) {\n        for (y = [-20, 20]) {\n            translate([x, y, 0])\n            cylinder(h=keypad_depth, r=2, center=true);\n        }\n    }\n}\n\n// Assembly\nmain_body();\nlcd_display();\nkeypad_grid();\nfunction_buttons();\nled_indicators();\nusb_port();\n\n// Cut mounting holes after all parts are placed\ndifference() {\n    children();\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "electronic_device": "touchbar",
    "openscad_code": "// Touchbar Electronic Device - Realistic Style, Medium Complexity\n// Dimensions: 70mm x 10mm x 110mm (L x H x W)\n\n// Main color scheme\ndevice_color = [0.85, 0.85, 0.85]; // Aluminum\nscreen_color = [0.1, 0.1, 0.1]; // Black\nkey_color = [0.15, 0.15, 0.15]; // Dark gray\nport_color = [0.2, 0.2, 0.2]; // Dark gray\nled_color = [0, 0.8, 0.2]; // Green LED\n\n// Overall dimensions\nlength = 70;\nheight = 10;\nwidth = 110;\n\n// Create the main body\nmodule main_body() {\n    color(device_color)\n    difference() {\n        // Main aluminum chassis\n        translate([-length/2, -height/2, -width/2])\n            cube([length, height, width]);\n        \n        // Touchbar recess\n        translate([-length/2 + 5, -height/2 + 1, -width/2 + 5])\n            cube([length - 10, 2, width - 10]);\n        \n        // Side ports cutouts\n        translate([-length/2 + 2, -height/2 + 3, -width/2 + 5])\n            cube([2, 4, 4]);\n        translate([-length/2 + 2, -height/2 + 3, width/2 - 9])\n            cube([2, 4, 4]);\n    }\n}\n\n// Touchbar OLED display\nmodule touchbar_display() {\n    color(screen_color)\n    translate([-length/2 + 6, -height/2 + 2, -width/2 + 6])\n        cube([length - 12, 0.5, width - 12]);\n}\n\n// Function keys\nmodule function_keys() {\n    for (i = [0:3]) {\n        color(key_color)\n        translate([-length/2 + 8 + i*15, -height/2 + 3, -width/2 + 8])\n            cube([12, 0.8, 8]);\n    }\n}\n\n// Touch ID button\nmodule touch_id() {\n    color(device_color)\n    union() {\n        // Button base\n        translate([length/2 - 15, -height/2 + 3, width/2 - 15])\n            cylinder(h=0.8, d=12);\n        // Metal ring\n        color([0.7, 0.7, 0.7])\n        translate([length/2 - 15, -height/2 + 4, width/2 - 15])\n            cylinder(h=0.2, d=12.5);\n    }\n}\n\n// USB-C ports\nmodule usb_c_port(x, z) {\n    color(port_color)\n    union() {\n        // Port opening\n        translate([x, -height/2 + 3, z])\n            cube([2, 4, 4]);\n        // Internal connector\n        color([0.1, 0.1, 0.1])\n        translate([x + 0.5, -height/2 + 4, z + 1])\n            cube([1, 2, 2]);\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    color(led_color)\n    translate([length/2 - 5, -height/2 + 1.5, -width/2 + 5])\n        sphere(d=1.5);\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    color([0.1, 0.1, 0.1])\n    for (x = [-length/2 + 10, length/2 - 10])\n        for (z = [-width/2 + 10, width/2 - 10])\n            translate([x, -height/2 - 0.5, z])\n                cylinder(h=1, d=5);\n}\n\n// Assembly\nunion() {\n    main_body();\n    touchbar_display();\n    function_keys();\n    touch_id();\n    usb_c_port(-length/2 + 1, -width/2 + 7);\n    usb_c_port(-length/2 + 1, width/2 - 7);\n    led_indicator();\n    rubber_feet();\n}",
    "renders": true
  },
  {
    "electronic_device": "trackpoint",
    "openscad_code": "// TrackPoint Electronic Device - Realistic Style\n// Main body dimensions\nbody_w = 42;\nbody_d = 28;\nbody_h = 8;\n\n// TrackPoint stick dimensions\nstick_r = 4;\nstick_h = 12;\n\n// Keycap dimensions\nkey_w = 15;\nkey_d = 13;\nkey_h = 4;\n\n$fn = 50;\n\n// Main body shell\nmodule main_body() {\n    color(\"#2F2F2F\")\n    difference() {\n        // Main rounded body\n        translate([0, 0, body_h/2])\n        minkowski() {\n            cube([body_w, body_d, body_h], center=true);\n            sphere(r=2);\n        }\n        \n        // Top cavity for keys\n        translate([0, 0, body_h])\n        cube([body_w-6, body_d-6, body_h], center=true);\n        \n        // USB-C port\n        translate([body_w/2-0.5, 0, 2])\n        rotate([0, 90, 0])\n        cylinder(h=10, r=4.5);\n        \n        // Status LED hole\n        translate([body_w/2-6, body_d/2-3, body_h-0.5])\n        cylinder(h=2, r=1.5);\n    }\n}\n\n// TrackPoint stick with rubber cap\nmodule trackpoint() {\n    // Base post\n    color(\"#404040\")\n    translate([0, 0, body_h])\n    cylinder(h=stick_h-3, r=stick_r, center=false);\n    \n    // Rubber cap\n    color(\"#B22222\")\n    translate([0, 0, body_h+stick_h-3])\n    difference() {\n        cylinder(h=3, r=stick_r+1);\n        translate([0, 0, 2])\n        cylinder(h=1.5, r=stick_r-0.5);\n    }\n}\n\n// Individual key\nmodule key(x, y, label) {\n    translate([x, y, body_h])\n    color(\"#E8E8E8\")\n    difference() {\n        cube([key_w, key_d, key_h], center=true);\n        translate([0, 0, key_h/2-0.5])\n        cube([key_w-2, key_d-2, key_h], center=true);\n    }\n    \n    // Key label\n    translate([x, y, body_h+key_h/2+0.1])\n    color(\"#000000\")\n    linear_extrude(0.2)\n    text(label, size=4, halign=\"center\", valign=\"center\");\n}\n\n// Button assembly with three mouse buttons\nmodule button_assembly() {\n    key(-body_w/4, 0, \"L\");\n    key(0, 0, \"M\");\n    key(body_w/4, 0, \"R\");\n}\n\n// PCB indicators\nmodule pcb_indicators() {\n    // Power LED\n    translate([body_w/2-6, body_d/2-3, body_h-0.5])\n    color(\"#00FF00\")\n    cylinder(h=1, r=1.5);\n    \n    // Screw posts\n    for (x = [-body_w/2+4, body_w/2-4])\n    for (y = [-body_d/2+4, body_d/2-4]) {\n        translate([x, y, body_h/2])\n        color(\"#505050\")\n        cylinder(h=body_h, r=1.5);\n    }\n}\n\n// USB-C connector detail\nmodule usb_c_connector() {\n    color(\"#C0C0C0\")\n    translate([body_w/2-0.5, 0, 2])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=8, r=4);\n        translate([0, 0, 4])\n        cube([8, 8.5, 2.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    trackpoint();\n    button_assembly();\n    pcb_indicators();\n    usb_c_connector();\n}",
    "renders": true
  },
  {
    "electronic_device": "dial",
    "openscad_code": "// Realistic Dial Electronic Device - Medium Complexity\n// 3D printable dial interface with screen, rotary encoder, buttons and ports\n\n// Color constants\n$fn = 50;\n\n// Main body module\nmodule dial_body() {\n    difference() {\n        // Main housing - rounded rectangular box\n        color(\"silver\")\n        minkowski() {\n            cube([60, 40, 25], center=true);\n            sphere(2);\n        }\n        \n        // Hollow out interior\n        cube([56, 36, 22], center=true);\n        \n        // USB-C port cutout\n        translate([30, -20, 0])\n        rotate([0, 90, 0])\n        cylinder(h=15, d=8, center=true);\n        \n        // 3.5mm jack cutout\n        translate([30, 20, 0])\n        rotate([0, 90, 0])\n        cylinder(h=15, d=6, center=true);\n    }\n}\n\n// LCD screen module\nmodule lcd_screen() {\n    // Screen bezel\n    color(\"darkslategray\")\n    translate([0, 0, 14])\n    cube([50, 30, 2], center=true);\n    \n    // Actual screen\n    color(\"black\")\n    translate([0, 0, 15.5])\n    cube([46, 26, 0.5], center=true);\n    \n    // Screen content - simple dial indicator\n    color(\"cyan\")\n    translate([0, 0, 16])\n    cube([42, 22, 0.2], center=true);\n    \n    // Dial scale marks\n    color(\"black\")\n    for(i = [-4:4]) {\n        translate([i*5, 0, 16.5])\n        cube([1, 15, 0.1]);\n    }\n}\n\n// Rotary encoder dial\nmodule rotary_dial() {\n    // Base ring\n    color(\"dimgray\")\n    translate([0, -15, 13])\n    cylinder(h=3, d1=18, d2=18, center=true);\n    \n    // Knob\n    color(\"black\")\n    translate([0, -15, 15])\n    cylinder(h=8, d=16);\n    \n    // Knob grip ridges\n    color(\"gray\")\n    for(i = [0:11]) {\n        rotate([0, 0, i*30])\n        translate([0, -15, 19])\n        translate([7, 0, 0])\n        cube([1, 2, 1], center=true);\n    }\n    \n    // Center indicator\n    color(\"red\")\n    translate([0, -15, 23.5])\n    cylinder(h=1, d=4);\n}\n\n// Push buttons module\nmodule push_buttons() {\n    // Button positions\n    positions = [[-20, 15], [-20, 5], [-20, -5]];\n    \n    for(pos = positions) {\n        // Button housing\n        color(\"darkgray\")\n        translate([pos[0], pos[1], 13])\n        cylinder(h=2, d=6);\n        \n        // Button top\n        color(\"red\")\n        translate([pos[0], pos[1], 15.5])\n        cylinder(h=1, d=5);\n    }\n}\n\n// LED indicators\nmodule led_indicators() {\n    // Power LED\n    color(\"green\")\n    translate([25, 15, 13.5])\n    cylinder(h=1, d=3);\n    \n    // Activity LED\n    color(\"blue\")\n    translate([25, 5, 13.5])\n    cylinder(h=1, d=3);\n}\n\n// Ventilation slots\nmodule vents() {\n    color(\"silver\")\n    for(i = [-2:2]) {\n        translate([0, 0, i*6 - 6])\n        cube([60, 2, 1], center=true);\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    color(\"black\")\n    positions = [[-25, -15], [25, -15], [25, 15], [-25, 15]];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], -13])\n        cylinder(h=2, d=6);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 15])\nunion() {\n    dial_body();\n    lcd_screen();\n    rotary_dial();\n    push_buttons();\n    led_indicators();\n    translate([0, 0, -12])\n    vents();\n    feet();\n}",
    "renders": true
  },
  {
    "electronic_device": "knob",
    "openscad_code": "// Realistic Electronic Knob with Display\n// Medium complexity 3D printable design\n\n// Overall dimensions\nknob_diameter = 60;\nknob_height = 35;\nwall_thickness = 2;\n\n// Base module for the main knob body\nmodule knob_body() {\n    // Main cylindrical body\n    difference() {\n        cylinder(h = knob_height, d = knob_diameter, $fn = 100);\n        \n        // Hollow center for shaft\n        translate([0, 0, -1])\n            cylinder(h = knob_height + 2, d = 6, $fn = 32);\n        \n        // Top chamfer\n        translate([0, 0, knob_height - 5])\n            cylinder(h = 6, d1 = knob_diameter, d2 = knob_diameter - 8, $fn = 100);\n    }\n}\n\n// Display module (OLED style)\nmodule display() {\n    // Display recess\n    translate([0, 0, knob_height - 2])\n        difference() {\n            cube([30, 12, 2], center = true);\n            translate([0, 0, -1])\n                cube([28, 10, 3], center = true);\n        }\n    \n    // Actual display screen\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, knob_height - 1.5])\n        cube([26, 8, 0.5], center = true);\n    \n    // Display border\n    color([0.3, 0.3, 0.3])\n    translate([0, 0, knob_height - 2.1])\n        cube([31, 13, 0.2], center = true);\n}\n\n// Indicator LED module\nmodule indicator_led(x_pos) {\n    translate([x_pos, knob_diameter/2 - 5, knob_height - 5])\n        difference() {\n            cylinder(h = 2, d = 4, $fn = 16);\n            translate([0, 0, -1])\n                cylinder(h = 4, d = 2.5, $fn = 16);\n        }\n}\n\n// Grip texture rings\nmodule grip_rings() {\n    for (i = [0:3]) {\n        translate([0, 0, i * 7 + 5])\n            difference() {\n                cylinder(h = 2, d = knob_diameter + 2, $fn = 100);\n                cylinder(h = 3, d = knob_diameter - 2, $fn = 100);\n            }\n    }\n}\n\n// Control buttons\nmodule control_buttons() {\n    // Up button\n    translate([10, 0, knob_height - 8])\n        difference() {\n            cube([6, 4, 2], center = true);\n            translate([0, 0, -1])\n                cube([5.5, 3.5, 3], center = true);\n        }\n    \n    // Down button\n    translate([-10, 0, knob_height - 8])\n        difference() {\n            cube([6, 4, 2], center = true);\n            translate([0, 0, -1])\n                cube([5.5, 3.5, 3], center = true);\n        }\n}\n\n// Position indicator line\nmodule position_indicator() {\n    translate([0, knob_diameter/2 - 1, knob_height/2])\n        rotate([90, 0, 0])\n            cylinder(h = knob_height - 10, d = 1.5, $fn = 16);\n}\n\n// Main assembly\ncolor([0.15, 0.15, 0.15])\nknob_body();\n\ncolor([0.2, 0.2, 0.2])\ngrip_rings();\n\ncolor([0.1, 0.1, 0.1])\ndisplay();\n\ncolor([0.05, 0.05, 0.05])\ncontrol_buttons();\n\n// Red power LED\ncolor([0.8, 0.1, 0.1])\nindicator_led(15);\n\n// Green status LED\ncolor([0.1, 0.8, 0.1])\nindicator_led(-15);\n\n// White position line\ncolor([0.9, 0.9, 0.9])\nposition_indicator();\n\n// Bottom shaft key\ntranslate([0, 2.5, 0])\n    cube([2, 5, 10], center = true);",
    "renders": true
  },
  {
    "electronic_device": "slider",
    "openscad_code": "// Slider Electronic Device - Realistic Style, Medium Complexity\n// A handheld electronic slider device with screen, buttons, and ports\n\n$fn = 32;\n\n// Device dimensions (mm)\ndevice_len = 80;\ndevice_width = 35;\ndevice_height = 15;\nwall_thickness = 2;\n\n// Color definitions\ncolor_body = [0.15, 0.15, 0.15];  // Dark gray\ncolor_screen = [0.1, 0.1, 0.1];   // Black screen\ncolor_buttons = [0.3, 0.3, 0.3];  // Medium gray\ncolor_accents = [0.8, 0.8, 0.8];  // Light gray\ncolor_led = [0, 1, 0];            // Green LED\n\n// Main device body\nmodule device_body() {\n    color(color_body)\n    difference() {\n        // Main rounded body\n        union() {\n            translate([0, 0, device_height/2])\n                minkowski() {\n                    cube([device_len, device_width, device_height], center=true);\n                    sphere(r=2);\n                }\n            \n            // Grip texture strips on sides\n            for(i = [-1, 1]) {\n                translate([0, i * device_width/2, device_height/2])\n                    cube([device_len - 10, 1, device_height - 2], center=true);\n            }\n        }\n        \n        // Screen cutout\n        translate([0, 0, device_height - 1])\n            cube([device_len - 8, device_width - 6, 2], center=true);\n        \n        // Button holes\n        translate([-device_len/2 + 10, device_width/2 - 5, device_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=5, r=3);\n        \n        translate([-device_len/2 + 15, device_width/2 - 5, device_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=5, r=3);\n                \n        // USB-C port\n        translate([device_len/2 - 8, 0, 3])\n            cube([5, 8, 6], center=true);\n    }\n}\n\n// Screen assembly\nmodule screen() {\n    // Screen bezel\n    color(color_body)\n    translate([0, 0, device_height - 0.5])\n        cube([device_len - 8.5, device_width - 6.5, 1], center=true);\n    \n    // Actual screen\n    color(color_screen)\n    translate([0, 0, device_height - 1.5])\n        cube([device_len - 10, device_width - 8, 0.5], center=true);\n    \n    // LED indicators\n    for(i = [0, 1, 2]) {\n        color(color_led)\n        translate([device_len/2 - 15 + i*4, device_width/2 - 2, device_height - 1])\n            sphere(r=0.5);\n    }\n}\n\n// Buttons\nmodule buttons() {\n    // Power button\n    color(color_buttons)\n    translate([-device_len/2 + 10, device_width/2 - 5, device_height/2])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=2, r=2.5);\n                translate([0, 0, -1])\n                    cylinder(h=5, r=1.5);\n            }\n    \n    // Mode button\n    translate([-device_len/2 + 15, device_width/2 - 5, device_height/2])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=2, r=2.5);\n                translate([0, 0, -1])\n                    cylinder(h=5, r=1.5);\n            }\n    \n    // Navigation pad\n    color(color_accents)\n    translate([device_len/2 - 12, -device_width/2 + 8, device_height - 1])\n        for(x = [-1, 0, 1])\n            for(y = [-1, 0, 1])\n                if(!(x == 0 && y == 0))\n                    translate([x*3, y*3, 0])\n                        sphere(r=1);\n}\n\n// USB-C connector details\nmodule usb_port() {\n    color(color_body)\n    translate([device_len/2 - 8, 0, 3])\n        difference() {\n            cube([7, 10, 8], center=true);\n            translate([1.5, 0, 0])\n                cube([3, 6, 4], center=true);\n        }\n}\n\n// Assembly\ndevice_body();\nscreen();\nbuttons();\nusb_port();\n\n// Logo/text area\ncolor(color_accents)\ntranslate([0, 0, device_height - 0.5])\n    cube([20, 4, 0.2], center=true);",
    "renders": true
  },
  {
    "electronic_device": "button",
    "openscad_code": "// Electronic Emergency Stop Button (E-Stop)\n// Realistic industrial push-button with 60 mm mushroom head\n$fn = 60;\n\n// Main colors\ncolor_body = \"FireBrick\";\ncolor_button = \"Crimson\";\ncolor_base = \"DarkSlateGray\";\ncolor_text = \"White\";\ncolor_led = \"Yellow\";\n\n// Overall dimensions\nmodule e_stop_assembly() {\n    // Base plate with mounting holes\n    difference() {\n        color(color_base)\n            cylinder(h = 4, d = 80);\n        \n        // 4 mounting holes M4\n        for (a = [0:90:270])\n            rotate([0,0,a])\n                translate([30,0,-1])\n                    cylinder(h = 6, d = 4.5);\n    }\n    \n    // Lower housing cylinder\n    translate([0,0,4])\n        color(color_body)\n            cylinder(h = 18, d = 70);\n    \n    // Threaded collar (for panel nut)\n    translate([0,0,22])\n        color(color_base)\n            cylinder(h = 8, d = 50);\n    \n    // Upper housing\n    translate([0,0,30])\n        color(color_body)\n            difference() {\n                cylinder(h = 20, d = 60);\n                \n                // Internal cavity for mechanism\n                translate([0,0,2])\n                    cylinder(h = 18, d = 40);\n                \n                // Key slot\n                translate([25,0,10])\n                    cube([8, 4, 10], center = true);\n            }\n    \n    // Button head (mushroom)\n    translate([0,0,50])\n        color(color_button)\n        union() {\n            // Curved top\n            scale([1,1,0.4])\n                sphere(d = 60);\n            \n            // Cylindrical stem\n            cylinder(h = 10, d = 45);\n        }\n    \n    // LED indicator ring\n    translate([0,0,28])\n        color(color_led)\n            cylinder(h = 2, d = 52);\n    \n    // \"EMERGENCY STOP\" text band\n    translate([0,0,38])\n        color(color_text)\n        rotate([90,0,0])\n        linear_extrude(height = 1.5)\n            text(\"EMERGENCY STOP\", size = 5, halign = \"center\", font = \"Arial:style=Bold\");\n    \n    // Arrow indicators\n    for (rot = [0, 120, 240])\n        rotate([0,0,rot])\n            translate([0, 21, 39])\n                rotate([0,0,180])\n                    color(color_text)\n                    linear_extrude(height = 1)\n                        polygon(points=[[0,0], [4,2], [0,4]]);\n}\n\n// Generate the complete assembly\ne_stop_assembly();",
    "renders": true
  },
  {
    "electronic_device": "toggle",
    "openscad_code": "// Toggle switch electronic device\n// Dimensions in mm\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\n// Main parameters\ncase_width = 40;\ncase_height = 25;\ncase_depth = 60;\nwall_thickness = 2;\ntoggle_height = 20;\n\n// Case module\nmodule main_case() {\n    color(\"dimgray\") {\n        difference() {\n            // Main body\n            cube([case_width, case_depth, case_height], center=true);\n            \n            // Hollow cavity\n            translate([0, 0, wall_thickness/2])\n                cube([case_width-2*wall_thickness, case_depth-2*wall_thickness, case_height-wall_thickness], center=true);\n            \n            // Wire entry holes (back)\n            for(i = [-1, 1]) {\n                translate([i*8, case_depth/2, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=case_depth, r=2.5, center=true);\n            }\n        }\n        \n        // Mounting flanges\n        for(x = [-case_width/2-5, case_width/2+5]) {\n            translate([x, case_depth/2-5, 0])\n                cube([10, 10, case_height], center=true);\n        }\n        \n        // Mounting holes\n        for(x = [-case_width/2-5, case_width/2+5]) {\n            for(y = [case_depth/2-8, case_depth/2-2]) {\n                translate([x, y, 0])\n                    cylinder(h=case_height+2, r=1.5, center=true);\n            }\n        }\n    }\n}\n\n// Toggle lever\nmodule toggle_switch() {\n    color(\"black\") {\n        // Toggle base\n        translate([0, 0, case_height/2])\n            cylinder(h=8, r1=6, r2=4, center=true);\n            \n        // Toggle lever\n        translate([0, 0, case_height/2 + toggle_height + 4])\n            rotate([0, 0, 0])\n                union() {\n                    // Lever shaft\n                    cylinder(h=toggle_height, r=2, center=true);\n                    \n                    // Lever handle\n                    translate([0, 0, toggle_height/2 + 2])\n                        sphere(r=3);\n                }\n    }\n}\n\n// Terminal screws\nmodule terminal_screws() {\n    color(\"gold\") {\n        for(i = [-1, 1]) {\n            translate([i*8, case_depth/2-10, 0])\n                rotate([90, 0, 0])\n                    union() {\n                        // Screw head\n                        cylinder(h=2, r=3, center=true);\n                        \n                        // Screw slot\n                        translate([0, 0, 0])\n                            rotate([0, 90, 0])\n                                cube([5, 0.5, 1], center=true);\n                    }\n        }\n    }\n}\n\n// ON/OFF markings\nmodule markings() {\n    color(\"white\") {\n        // ON marking\n        translate([case_width/2-5, -case_depth/2+8, case_height/2+0.1])\n            rotate([0, 0, 0])\n                linear_extrude(height=0.5)\n                    text(\"ON\", size=3, halign=\"center\");\n        \n        // OFF marking\n        translate([case_width/2-5, case_depth/2-8, case_height/2+0.1])\n            rotate([0, 0, 0])\n                linear_extrude(height=0.5)\n                    text(\"OFF\", size=3, halign=\"center\");\n    }\n}\n\n// Assembly\nmain_case();\ntoggle_switch();\nterminal_screws();\nmarkings();",
    "renders": true
  },
  {
    "electronic_device": "lever",
    "openscad_code": "// Lever-style electronic dimmer switch\n// Realistic appearance, medium complexity\n// Overall size: 70 mm tall, 50 mm wide, 30 mm deep\n\n$fn = 32;\n\n// Main colors\ncolor_wallplate = [0.9, 0.9, 0.9];\ncolor_switch_body = [0.95, 0.95, 0.95];\ncolor_lever = [0.15, 0.15, 0.15];\ncolor_screen = [0.05, 0.05, 0.05];\ncolor_led = [0.0, 1.0, 0.0];\ncolor_screw = [0.7, 0.7, 0.7];\n\n// Wall plate module\nmodule wall_plate() {\n    color(color_wallplate)\n    difference() {\n        // Main plate\n        translate([-25, -35, -3])\n            cube([50, 70, 3]);\n        \n        // Central hole\n        translate([-18, -28, -3])\n            cube([36, 56, 3.1]);\n        \n        // Screw holes\n        for (y = [-25, 25]) {\n            translate([0, y, -3])\n                cylinder(h = 3.1, r = 2.5);\n        }\n    }\n    \n    // Screw heads\n    color(color_screw)\n    for (y = [-25, 25]) {\n        translate([0, y, 0])\n            cylinder(h = 1.5, r = 4);\n        translate([0, y, 1.5])\n            cylinder(h = 1, r1 = 4, r2 = 2.5);\n    }\n}\n\n// Switch body module\nmodule switch_body() {\n    color(color_switch_body)\n    difference() {\n        // Main body\n        translate([-18, -28, 0])\n            cube([36, 56, 25]);\n        \n        // Lever slot\n        translate([-3, -30, 10])\n            cube([6, 60, 15]);\n        \n        // Cable entry holes (top)\n        for (x = [-12, 0, 12]) {\n            translate([x, -28, 20])\n                rotate([90, 0, 0])\n                    cylinder(h = 10, r = 3);\n        }\n    }\n    \n    // Mounting posts\n    for (x = [-10, 10]) {\n        for (y = [-20, 20]) {\n            translate([x, y, 0])\n                cylinder(h = 5, r = 2);\n        }\n    }\n}\n\n// Lever module with pivot\nmodule lever() {\n    color(color_lever)\n    union() {\n        // Pivot axle\n        translate([0, 0, 10])\n            rotate([90, 0, 0])\n                cylinder(h = 36, r = 3);\n        \n        // Lever arm\n        translate([0, 0, 10])\n            rotate([30, 0, 0])\n                translate([0, 0, 5])\n                    cube([6, 4, 30], center = true);\n        \n        // Lever paddle\n        translate([0, 25 * sin(30), 10 + 25 * cos(30)])\n            rotate([30, 0, 0])\n                cube([12, 2, 18], center = true);\n        \n        // Finger grip ridges\n        for (i = [-3:3]) {\n            translate([i * 2, 25 * sin(30), 10 + 25 * cos(30) + 8])\n                rotate([30, 0, 0])\n                    cube([1, 2, 14], center = true);\n        }\n    }\n}\n\n// OLED display module\nmodule display() {\n    color(color_screen)\n    translate([-12, -15, 22])\n        cube([24, 10, 0.5]);\n    \n    // Screen bevel\n    color([0.7, 0.7, 0.7])\n    translate([-13, -16, 21.5])\n        cube([26, 12, 1]);\n    \n    // LED indicators\n    color(color_led)\n    translate([15, -10, 22])\n        cylinder(h = 0.5, r = 1.5);\n    \n    translate([15, -5, 22])\n        color([1, 0.2, 0])\n        cylinder(h = 0.5, r = 1.5);\n}\n\n// Button module\nmodule buttons() {\n    color([0.2, 0.2, 0.2])\n    for (i = [0:2]) {\n        translate([-15 + i * 15, 10, 22])\n            cylinder(h = 1, r = 3);\n    }\n    \n    // Button markings\n    color([0.05, 0.05, 0.05])\n    for (i = [0:2]) {\n        translate([-15 + i * 15, 10, 23.1])\n            cube([1, 4, 0.2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    wall_plate();\n    switch_body();\n    lever();\n    display();\n    buttons();\n}",
    "renders": true
  },
  {
    "electronic_device": "pedal",
    "openscad_code": "// Guitar multi-effects pedal - realistic style\n// Dimensions: 90mm x 60mm x 35mm\n\n// Color constants\n$fa = 2;\n$fs = 0.5;\n\n// Main pedal body\nmodule pedal_body() {\n    color(\"gray20\")\n    difference() {\n        // Main enclosure\n        translate([-45, -30, 0])\n            cube([90, 60, 30], center=false);\n        \n        // Top recess\n        translate([-42, -27, 25])\n            cube([84, 54, 5], center=false);\n        \n        // Display window\n        translate([-20, -15, 25])\n            cube([40, 20, 1], center=false);\n        \n        // Footswitch cutouts (2x)\n        for (x = [-25, 15]) {\n            translate([x, -10, 25])\n                cylinder(h=10, r=12, $fn=32);\n        }\n    }\n}\n\n// Display screen\nmodule display() {\n    color(\"darkblue\")\n    translate([-19, -14, 26])\n        cube([38, 18, 0.5], center=false);\n    \n    // Screen content (simple grid pattern)\n    color(\"cyan\")\n    for (i = [0:3]) {\n        for (j = [0:2]) {\n            translate([-17 + i*8, -12 + j*5, 26.6])\n                cube([6, 3, 0.1], center=false);\n        }\n    }\n}\n\n// Foot switches with rubber tops\nmodule footswitch(x_pos) {\n    color(\"silver\")\n    translate([x_pos, -10, 15])\n        cylinder(h=10, r=10, $fn=32);\n    \n    color(\"black\")\n    translate([x_pos, -10, 25])\n        cylinder(h=2, r=11, $fn=32);\n    \n    // Tactile dots\n    color(\"gray50\")\n    for (a = [0:120:359]) {\n        rotate([0, 0, a])\n            translate([x_pos + 7, -10, 27])\n                sphere(r=1, $fn=8);\n    }\n}\n\n// Control knobs (3x)\nmodule knob(x_pos, y_pos) {\n    color(\"black\")\n    translate([x_pos, y_pos, 30])\n        cylinder(h=8, r=6, $fn=32);\n    \n    // Knob indicator line\n    color(\"white\")\n    translate([x_pos + 4, y_pos, 38])\n        cube([2, 1, 1], center=true);\n}\n\n// Input/output jacks\nmodule jack(x_pos, label) {\n    color(\"gold\")\n    translate([x_pos, -30, 15])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=6, $fn=32);\n    \n    // Jack hole\n    color(\"black\")\n    translate([x_pos, -30, 15])\n        rotate([90, 0, 0])\n            cylinder(h=10, r=3, $fn=16);\n}\n\n// LED indicators\nmodule led(x_pos, color_name) {\n    color(color_name)\n    translate([x_pos, -5, 30.5])\n        cylinder(h=1, r=2, $fn=16);\n}\n\n// DC power jack\nmodule power_jack() {\n    color(\"black\")\n    translate([45, 0, 15])\n        rotate([0, -90, 0])\n            cylinder(h=10, r=5.5, $fn=32);\n}\n\n// USB port\nmodule usb_port() {\n    color(\"black\")\n    translate([45, 15, 20])\n        cube([10, 6, 4], center=true);\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    color(\"black\")\n    for (x = [-35, 35])\n        for (y = [-20, 20]) {\n            translate([x, y, -2])\n                cylinder(h=2, r=3, $fn=16);\n        }\n}\n\n// Assembly\npedal_body();\ndisplay();\n\n// Foot switches\nfootswitch(-25);\nfootswitch(15);\n\n// Control knobs\nknob(-30, 10);\nknob(0, 10);\nknob(30, 10);\n\n// Audio jacks\njack(-45, \"INPUT\");\njack(45, \"OUTPUT\");\n\n// LEDs\nled(-35, \"red\");\nled(-25, \"green\");\nled(-15, \"blue\");\n\n// Ports\npower_jack();\nusb_port();\n\n// Bottom features\ntranslate([0, 0, 0])\n    rubber_feet();",
    "renders": true
  },
  {
    "electronic_device": "footmouse",
    "openscad_code": "// Footmouse - Ergonomic foot-operated computer mouse\n// Realistic style, medium complexity\n\n// Main dimensions (mm)\nbase_length = 85;\nbase_width = 65;\nbase_height = 12;\narch_height = 25;\nball_diameter = 25;\nbutton_height = 8;\nusb_port_width = 12;\nusb_port_height = 6;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Base platform with curved edges\nmodule base_platform() {\n    difference() {\n        // Main base shape\n        color([0.2, 0.2, 0.2])\n        minkowski() {\n            cube([base_length, base_width, base_height], center=true);\n            cylinder(r=5, h=0.1, center=true);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, -wall_thickness/2])\n        scale([0.9, 0.9, 0.8])\n        cube([base_length, base_width, base_height], center=true);\n    }\n}\n\n// Foot arch support\nmodule arch_support() {\n    color([0.3, 0.3, 0.3])\n    translate([0, 0, base_height/2 + arch_height/2])\n    scale([1, 0.7, 1])\n    difference() {\n        cylinder(h=arch_height, r1=base_width/2 - 5, r2=base_width/2 - 10, center=true);\n        // Remove bottom half\n        translate([0, 0, -arch_height/2])\n        cube([base_length*2, base_width*2, arch_height], center=true);\n    }\n}\n\n// Trackball assembly\nmodule trackball() {\n    // Ball housing\n    color([0.4, 0.4, 0.4])\n    translate([-base_length/4, 0, base_height + arch_height/2])\n    difference() {\n        sphere(d=ball_diameter + 8);\n        // Hole for ball\n        sphere(d=ball_diameter + 1);\n        // Remove bottom quarter\n        translate([0, 0, -ball_diameter/2])\n        cube([ball_diameter*2, ball_diameter*2, ball_diameter], center=true);\n    }\n    \n    // The trackball\n    color([0.9, 0.9, 0.9])\n    translate([-base_length/4, 0, base_height + arch_height/2])\n    sphere(d=ball_diameter);\n}\n\n// Left and right foot buttons\nmodule foot_buttons() {\n    // Left button\n    color([0.15, 0.15, 0.15])\n    translate([base_length/3, -base_width/3, base_height + button_height/2])\n    rounded_cube([base_length/3, base_width/3, button_height], 3);\n    \n    // Right button\n    color([0.15, 0.15, 0.15])\n    translate([base_length/3, base_width/3, base_height + button_height/2])\n    rounded_cube([base_length/3, base_width/3, button_height], 3);\n}\n\n// Scroll wheel\nmodule scroll_wheel() {\n    color([0.8, 0.8, 0.8])\n    translate([base_length/3, 0, base_height + button_height + 5])\n    rotate([90, 0, 0])\n    cylinder(h=base_width/6, r=5, center=true);\n}\n\n// USB-C port\nmodule usb_port() {\n    color([0.1, 0.1, 0.1])\n    translate([base_length/2 - 1, 0, -base_height/2 + 3])\n    cube([2, usb_port_width, usb_port_height], center=true);\n}\n\n// LED indicators\nmodule led_indicators() {\n    // Power LED\n    color([0, 1, 0])\n    translate([-base_length/2 + 5, -base_width/2 + 5, base_height/2])\n    sphere(d=3);\n    \n    // Activity LED\n    color([0, 0, 1])\n    translate([-base_length/2 + 10, -base_width/2 + 5, base_height/2])\n    sphere(d=3);\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    color([0.05, 0.05, 0.05])\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * base_length/3, y * base_width/3, -base_height/2 - 1])\n            cylinder(h=2, r=5);\n        }\n    }\n}\n\n// Helper module for rounded cubes\nmodule rounded_cube(size, radius) {\n    minkowski() {\n        cube([size[0]-2*radius, size[1]-2*radius, size[2]-2*radius], center=true);\n        sphere(r=radius, $fn=20);\n    }\n}\n\n// Assembly\nbase_platform();\narch_support();\ntrackball();\nfoot_buttons();\nscroll_wheel();\nusb_port();\nled_indicators();\nrubber_feet();",
    "renders": true
  },
  {
    "electronic_device": "handglove",
    "openscad_code": "// OpenSCAD Handglove Electronic Device\n// Medium complexity, realistic style\n\n// Main parameters\npalm_width = 40;\npalm_length = 70;\npalm_thickness = 12;\nfinger_width = 10;\nfinger_length = 30;\nthumb_width = 12;\nthumb_length = 25;\nwall_thickness = 2;\n\nmodule palm_base() {\n    color(\"#2c3e50\")\n    union() {\n        // Main palm body\n        difference() {\n            cube([palm_length, palm_width, palm_thickness], center=true);\n            translate([0, 0, -wall_thickness])\n                cube([palm_length-2*wall_thickness, palm_width-2*wall_thickness, palm_thickness], center=true);\n        }\n        \n        // Wrist strap mount\n        translate([-palm_length/2+5, 0, 0])\n            cylinder(h=8, r=3, center=true);\n    }\n}\n\nmodule finger_segment(index, length, angle) {\n    color(\"#34495e\")\n    rotate([0, angle, 0])\n    translate([palm_length/2 + length/2, (index-1.5)*(finger_width+2), 0])\n    difference() {\n        cube([length, finger_width, 8], center=true);\n        translate([0, 0, -wall_thickness])\n            cube([length-2*wall_thickness, finger_width-2*wall_thickness, 8], center=true);\n    }\n}\n\nmodule thumb_segment() {\n    color(\"#34495e\")\n    rotate([0, 0, -45])\n    translate([palm_length/2-15, palm_width/2+5, 0])\n    difference() {\n        cube([thumb_length, thumb_width, 10], center=true);\n        translate([0, 0, -wall_thickness])\n            cube([thumb_length-2*wall_thickness, thumb_width-2*wall_thickness, 10], center=true);\n    }\n}\n\nmodule display_module() {\n    color(\"#1a1a1a\")\n    translate([0, -palm_width/2-3, palm_thickness/2])\n    union() {\n        // Display housing\n        cube([25, 8, 6], center=true);\n        \n        // OLED screen\n        color(\"#000080\")\n        translate([0, 0, 3.1])\n            cube([20, 5, 0.5], center=true);\n        \n        // Side buttons\n        for(i=[-1, 0, 1]) {\n            color(\"#7f8c8d\")\n            translate([i*7, -5.1, 0])\n                cube([4, 2, 3], center=true);\n        }\n    }\n}\n\nmodule sensors() {\n    // Flex sensors on fingers\n    for(i=[0:3]) {\n        color(\"#e74c3c\")\n        rotate([0, 10, 0])\n        translate([palm_length/2 + finger_length/2, (i-1.5)*(finger_width+2), 3])\n            cylinder(h=1, r=2, center=true);\n    }\n    \n    // IMU sensor on back\n    color(\"#3498db\")\n    translate([0, 0, palm_thickness/2+3])\n        cube([10, 10, 4], center=true);\n}\n\nmodule charging_port() {\n    color(\"#95a5a6\")\n    translate([-palm_length/2-1, 0, 0])\n    union() {\n        // USB-C port\n        cube([4, 8, 3], center=true);\n        translate([0, 0, 1.6])\n            color(\"#000000\")\n            cube([3.5, 7, 0.5], center=true);\n    }\n}\n\nmodule led_indicators() {\n    // Status LEDs\n    for(i=[-1, 1]) {\n        color(\"#27ae60\")\n        translate([palm_length/2-10, i*(palm_width/2-3), palm_thickness/2+0.5])\n            cylinder(h=1, r=1.5);\n    }\n}\n\n// Main assembly\nunion() {\n    palm_base();\n    \n    // Fingers\n    for(i=[0:3]) {\n        finger_segment(i, finger_length, 0);\n    }\n    \n    thumb_segment();\n    \n    // Electronics\n    display_module();\n    sensors();\n    charging_port();\n    led_indicators();\n}",
    "renders": true
  },
  {
    "electronic_device": "dataglove",
    "openscad_code": "// Dataglove Electronic Device - Realistic Medium Complexity\n// 3D printable with electronic features\n\n// Parameters\n$fn = 32;\nwall_thickness = 1.5;\nscreen_thickness = 0.5;\nbutton_height = 0.8;\nport_depth = 3;\n\n// Main glove body\nmodule glove_body() {\n    color([0.2, 0.2, 0.2]) {\n        // Palm base\n        difference() {\n            translate([0, -20, 5]) cube([45, 40, 10], center=true);\n            translate([0, -20, 10]) cube([43, 38, 10], center=true);\n        }\n        \n        // Wrist strap\n        translate([0, -38, 5]) cube([35, 12, 6], center=true);\n        \n        // Finger bases\n        for(i = [-1, 0, 1]) {\n            translate([i * 12, -10, 12]) cube([8, 15, 4], center=true);\n        }\n    }\n}\n\n// Finger sensor modules\nmodule finger_sensor(base_x, base_y, base_z) {\n    color([0.15, 0.15, 0.15]) {\n        // Main sensor housing\n        translate([base_x, base_y, base_z + 2]) \n            cube([6, 8, 3], center=true);\n        \n        // Flex sensor slot\n        color([0.3, 0.3, 0.3]) {\n            translate([base_x, base_y + 2, base_z + 2.5]) \n                cube([1, 6, 1], center=true);\n        }\n        \n        // LED indicator\n        color([0, 1, 0]) {\n            translate([base_x, base_y - 3, base_z + 3.5]) \n                sphere(r=0.8);\n        }\n    }\n}\n\n// Main control unit\nmodule control_unit() {\n    color([0.25, 0.25, 0.25]) {\n        // Main housing\n        difference() {\n            translate([-20, 0, 5]) cube([15, 25, 8], center=true);\n            translate([-20, 0, 8.5]) cube([13, 23, 8], center=true);\n        }\n        \n        // OLED screen\n        color([0.05, 0.05, 0.05]) {\n            translate([-19, 0, 9]) cube([11, 18, screen_thickness], center=true);\n        }\n        \n        // Navigation buttons\n        for(i = [0, 1, 2]) {\n            color([0.4, 0.4, 0.4]) {\n                translate([-19, -8 + i * 8, 9.5 + button_height/2]) \n                    cube([3, 3, button_height], center=true);\n            }\n        }\n        \n        // USB-C port\n        color([0.1, 0.1, 0.1]) {\n            translate([-27, 0, 5]) \n                cube([4, 6, port_depth], center=true);\n        }\n    }\n}\n\n// Battery pack\nmodule battery_pack() {\n    color([0.3, 0.3, 0.3]) {\n        translate([25, 0, 5]) {\n            difference() {\n                cube([12, 20, 6], center=true);\n                translate([0, 0, 2.5]) cube([11, 18, 3], center=true);\n            }\n            \n            // Battery indicator LEDs\n            for(i = [0, 1, 2, 3]) {\n                color([0, 0.8, 0]) {\n                    translate([5.5, -7.5 + i * 5, 3.5]) \n                        sphere(r=0.5);\n                }\n            }\n        }\n    }\n}\n\n// Conductive pads\nmodule finger_pad(pos_x, pos_y, pos_z) {\n    color([0.8, 0.8, 0.8]) {\n        translate([pos_x, pos_y, pos_z]) {\n            difference() {\n                cube([5, 7, 1], center=true);\n                for(i = [-1, 0, 1]) {\n                    for(j = [-1, 0, 1]) {\n                        translate([i * 1.5, j * 1.5, 0.5]) \n                            cylinder(r=0.3, h=1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nglove_body();\n\n// Place finger sensors\nfinger_sensor(-15, -15, 12);\nfinger_sensor(-5, -18, 12);\nfinger_sensor(5, -18, 12);\nfinger_sensor(15, -15, 12);\n\n// Place finger pads\nfinger_pad(-15, -15, 0.5);\nfinger_pad(-5, -18, 0.5);\nfinger_pad(5, -18, 0.5);\nfinger_pad(15, -15, 0.5);\n\ncontrol_unit();\nbattery_pack();",
    "renders": true
  },
  {
    "electronic_device": "vrheadset",
    "openscad_code": "// VR Headset - Realistic Medium Complexity\n// Size: 80mm width, 50mm height, 90mm depth\n\n// Main colors\n$fa = 2;\n$fs = 0.5;\n\nmodule vr_headset() {\n    // Main body shell\n    color(\"gray20\")\n    difference() {\n        // Front curved shell\n        hull() {\n            translate([-35, -25, 5]) sphere(r=20);\n            translate([35, -25, 5]) sphere(r=20);\n            translate([-35, 25, 5]) sphere(r=20);\n            translate([35, 25, 5]) sphere(r=20);\n        }\n        \n        // Cut out for face\n        translate([0, 0, -20])\n        scale([1.2, 1.2, 0.5])\n        sphere(r=40);\n        \n        // Lens openings\n        for(x = [-20, 20]) {\n            translate([x, 5, 5])\n            rotate([0, 0, 0])\n            cylinder(h=30, r=15, $fn=32);\n        }\n    }\n    \n    // Face padding\n    color(\"black\")\n    difference() {\n        translate([0, 0, -15])\n        scale([1.1, 1.1, 0.3])\n        sphere(r=40);\n        \n        translate([0, 0, -25])\n        scale([1.2, 1.2, 0.5])\n        sphere(r=40);\n    }\n    \n    // Lenses\n    for(x = [-20, 20]) {\n        color(\"lightblue\", 0.6)\n        translate([x, 5, 10])\n        rotate([0, 0, 0])\n        cylinder(h=3, r=12, $fn=32);\n    }\n    \n    // Front display panel\n    color(\"gray30\")\n    translate([0, 0, 25])\n    cube([60, 40, 3], center=true);\n    \n    // Camera/sensor array\n    color(\"black\")\n    for(pos = [[-25, -15, 27], [25, -15, 27], [0, 0, 27]]) {\n        translate(pos)\n        cylinder(h=2, r=4, $fn=16);\n    }\n    \n    // Power button\n    color(\"red\")\n    translate([35, -30, 15])\n    cylinder(h=3, r=3, $fn=16);\n    \n    // Volume buttons\n    color(\"gray60\")\n    for(y = [-5, 5]) {\n        translate([35, -30+y, 15])\n        cube([5, 3, 2], center=true);\n    }\n    \n    // USB-C port\n    color(\"gray40\")\n    translate([-40, 0, 10])\n    rotate([0, 90, 0])\n    cube([8, 4, 3], center=true);\n    \n    // Head strap mounts\n    color(\"gray20\")\n    translate([0, -40, 0])\n    rotate([90, 0, 0])\n    cylinder(h=15, r=5, $fn=16);\n    \n    // Cooling vents\n    color(\"gray25\")\n    for(x = [-30, -10, 10, 30]) {\n        translate([x, -20, 25])\n        cube([8, 2, 5], center=true);\n    }\n    \n    // LED indicator\n    color(\"green\", 0.8)\n    translate([20, 30, 25])\n    sphere(r=2);\n    \n    // IPD adjustment wheel\n    color(\"gray50\")\n    translate([0, 35, 10])\n    rotate([90, 0, 0])\n    cylinder(h=5, r=8, $fn=32);\n    \n    // Microphone holes\n    color(\"black\")\n    for(y = [-10, 0, 10]) {\n        translate([-45, y, 0])\n        cylinder(h=2, r=1, $fn=8);\n    }\n}\n\nvr_headset();",
    "renders": true
  },
  {
    "electronic_device": "arheadset",
    "openscad_code": "// AR Headset - Realistic Style\n// Dimensions: 90mm width × 60mm height × 40mm depth\n\n$fn = 50;\n\n// Main colors\ncolor_headset = [0.2, 0.2, 0.2];    // Dark grey\ncolor_glass = [0.1, 0.3, 0.7, 0.6]; // Transparent blue\ncolor_button = [0.1, 0.1, 0.1];     // Black\ncolor_indicator = [0, 1, 0];        // Green LED\ncolor_pad = [0.05, 0.05, 0.05];     // Very dark grey\n\n// Main headset frame\nmodule headset_frame() {\n    color(color_headset)\n    difference() {\n        union() {\n            // Main body\n            translate([-40, -20, -15])\n                cube([80, 40, 30]);\n            \n            // Front visor mount\n            translate([-38, -18, 15])\n                cube([76, 36, 5]);\n            \n            // Side arms\n            translate([-45, -3, -5])\n                cube([5, 6, 20]);\n            translate([40, -3, -5])\n                cube([5, 6, 20]);\n            \n            // Top bridge\n            translate([-15, -18, 30])\n                cube([30, 36, 3]);\n        }\n        \n        // Cutouts for lenses\n        translate([-25, -12, 5])\n            cube([20, 24, 20]);\n        translate([5, -12, 5])\n            cube([20, 24, 20]);\n        \n        // Light sensor hole\n        translate([0, -2, 29])\n            cylinder(h=5, r=2);\n    }\n}\n\n// Lenses/AR displays\nmodule lenses() {\n    color(color_glass)\n    union() {\n        translate([-15, -8, 10])\n            rotate([90, 0, 0])\n                cylinder(h=15, r1=12, r2=12);\n        translate([15, -8, 10])\n            rotate([90, 0, 0])\n                cylinder(h=15, r1=12, r2=12);\n    }\n}\n\n// Buttons and controls\nmodule controls() {\n    // Power button\n    color(color_button)\n    translate([42, 5, 8])\n        cylinder(h=3, r=3);\n    \n    // Volume buttons\n    translate([42, -5, 8])\n        cube([6, 3, 2]);\n    translate([42, -10, 8])\n        cube([6, 3, 2]);\n    \n    // USB-C port\n    difference() {\n        translate([42, 0, 0])\n            cube([8, 8, 6]);\n        translate([43, 2, 2])\n            cube([6, 4, 2]);\n    }\n}\n\n// LED indicators\nmodule indicators() {\n    // Power LED\n    color(color_indicator)\n    translate([0, -3, 32])\n        sphere(r=1.5);\n    \n    // Recording LED\n    color([1, 0, 0])\n    translate([-35, 0, 20])\n        sphere(r=1);\n    \n    // Status LED\n    color([0, 0, 1])\n    translate([35, 0, 20])\n        sphere(r=1);\n}\n\n// Cushioning pads\nmodule pads() {\n    color(color_pad)\n    union() {\n        // Forehead pad\n        translate([0, -22, 25])\n            rotate([90, 0, 0])\n                cylinder(h=5, r1=25, r2=25);\n        \n        // Nose bridge pad\n        translate([0, 0, -2])\n            rotate([90, 0, 0])\n                cylinder(h=8, r1=8, r2=5);\n        \n        // Side pads\n        for(side = [-1, 1]) {\n            translate([side * 35, -8, 5])\n                cube([8, 16, 3]);\n        }\n    }\n}\n\n// Camera modules\nmodule cameras() {\n    color(color_headset)\n    union() {\n        // Front depth camera\n        translate([0, 18, 12])\n            cylinder(h=5, r=4);\n        \n        // Side tracking cameras\n        for(side = [-1, 1]) {\n            translate([side * 30, 18, 10])\n                rotate([0, 15 * side, 0])\n                    cylinder(h=6, r=3);\n        }\n    }\n}\n\n// Speaker modules\nmodule speakers() {\n    color(color_headset)\n    for(side = [-1, 1]) {\n        translate([side * 45, 0, -10])\n            rotate([90, 0, 0])\n                cylinder(h=15, r=8);\n        \n        // Speaker grill holes\n        for(i = [1:4]) {\n            for(j = [1:3]) {\n                translate([side * (45 + (i-2.5)*2), (j-2)*2, -2])\n                    cylinder(h=3, r=0.5);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    headset_frame();\n    lenses();\n    controls();\n    indicators();\n    pads();\n    cameras();\n    speakers();\n}",
    "renders": true
  },
  {
    "electronic_device": "mrheadset",
    "openscad_code": "// mrheadset - Mixed Reality Headset\n// Realistic style with medium complexity\n\nheadset_color = \"silver\";\nlens_color = \"darkblue\";\nstrap_color = \"black\";\nled_color = \"green\";\n\n// Main headset body\nmodule headset_body() {\n    color(headset_color) {\n        // Front visor\n        translate([0, 0, 0])\n            difference() {\n                cube([70, 40, 25], center=true);\n                // Taper the front\n                translate([0, -15, 0])\n                    cube([75, 10, 30], center=true);\n            }\n        \n        // Top ridge\n        translate([0, 0, 12])\n            cube([65, 35, 5], center=true);\n    }\n}\n\n// Lenses\nmodule lenses() {\n    color(lens_color) {\n        for (x = [-25, 25]) {\n            translate([x, -5, -10])\n                difference() {\n                    sphere(d=20);\n                    // Cut to create flat lens surface\n                    translate([0, 0, -10])\n                        cube([25, 25, 25], center=true);\n                }\n        }\n    }\n}\n\n// Front cameras\nmodule cameras() {\n    color(\"black\") {\n        // Left camera\n        translate([-35, 15, 0])\n            rotate([90, 0, 0])\n                cylinder(h=5, d1=8, d2=6);\n        \n        // Right camera  \n        translate([35, 15, 0])\n            rotate([90, 0, 0])\n                cylinder(h=5, d1=8, d2=6);\n        \n        // Depth sensor\n        translate([0, 18, -2])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=5);\n    }\n}\n\n// Side adjustment knobs\nmodule adjustment_knobs() {\n    color(headset_color) {\n        for (y = [-25, 25]) {\n            translate([y, 0, 0])\n                rotate([90, 0, 90])\n                    cylinder(h=8, d=12);\n        }\n    }\n}\n\n// Head strap connection points\nmodule strap_mounts() {\n    color(headset_color) {\n        // Top mount\n        translate([0, 0, 15])\n            cube([15, 5, 10], center=true);\n        \n        // Side mounts\n        for (x = [-35, 35]) {\n            translate([x, 0, 0])\n                cube([5, 8, 8], center=true);\n        }\n    }\n}\n\n// LED status indicator\nmodule status_led() {\n    color(led_color) {\n        translate([0, 20, 5])\n            sphere(d=3);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    color(\"black\") {\n        translate([0, -20, -10])\n            cube([8, 2, 4], center=true);\n    }\n}\n\n// Head strap\nmodule head_strap() {\n    color(strap_color) {\n        // Top strap\n        translate([0, 0, 25])\n            rotate([90, 0, 0])\n                cylinder(h=60, d=15);\n        \n        // Back strap\n        translate([0, -30, 0])\n            rotate([0, 90, 0])\n                cylinder(h=70, d=15);\n        \n        // Strap connectors\n        translate([0, -30, 0])\n            cube([70, 15, 15], center=true);\n    }\n}\n\n// Assembly\nhead_strap();\nheadset_body();\nlenses();\ncameras();\nadjustment_knobs();\nstrap_mounts();\nstatus_led();\nusb_port();",
    "renders": true
  },
  {
    "electronic_device": "hud",
    "openscad_code": "// HUD Electronic Device - Realistic Style, Medium Complexity\n// 3D printable heads-up display unit with screen, buttons, and ports\n\n// Color definitions\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_body = [0.2, 0.2, 0.2];\ncolor_buttons = [0.3, 0.3, 0.3];\ncolor_accent = [0.8, 0.1, 0.1];\ncolor_port = [0.5, 0.5, 0.5];\n\n// Main dimensions\nbody_width = 70;\nbody_height = 30;\nbody_depth = 45;\nscreen_width = 60;\nscreen_height = 25;\nbutton_diameter = 6;\nport_width = 8;\nport_height = 4;\n\n// Main body\nmodule hud_body() {\n    difference() {\n        // Main housing\n        color(color_body)\n        translate([-body_width/2, -body_depth/2, 0])\n            cube([body_width, body_depth, body_height]);\n        \n        // Screen recess\n        color(color_screen)\n        translate([-screen_width/2 - 1, -body_depth/2 + 2, body_height - 3])\n            cube([screen_width + 2, 4, 3]);\n    }\n}\n\n// Screen assembly\nmodule hud_screen() {\n    // Screen glass\n    color([0.05, 0.05, 0.05, 0.7])\n    translate([-screen_width/2, -body_depth/2 + 2.5, body_height - 2.5])\n        cube([screen_width, 3, 2.5]);\n    \n    // Screen bezel\n    color([0.15, 0.15, 0.15])\n    translate([-screen_width/2 - 1, -body_depth/2 + 1.5, body_height - 3])\n        cube([screen_width + 2, 5, 0.5]);\n}\n\n// Control buttons\nmodule hud_buttons() {\n    for(i = [0:1:2]) {\n        color(color_buttons)\n        translate([-body_width/2 + 10 + i*15, -body_depth/2 - 2, 5 + i*5])\n            rotate([90, 0, 0])\n            cylinder(h=3, d=button_diameter, $fn=20);\n    }\n}\n\n// Status LED\nmodule hud_led() {\n    color(color_accent)\n    translate([body_width/2 - 8, -body_depth/2 + 5, body_height - 8])\n        sphere(d=3, $fn=16);\n}\n\n// Connection ports\nmodule hud_ports() {\n    // USB-C port\n    color(color_port)\n    translate([body_width/2 - port_width - 2, -body_depth/2 + 10, body_height/2])\n        cube([port_width, 2, port_height]);\n    \n    // Power port\n    color(color_port)\n    translate([body_width/2 - port_width - 2, -body_depth/2 + 20, body_height/2])\n        cube([port_width, 2, port_height]);\n}\n\n// Cooling vents\nmodule hud_vents() {\n    difference() {\n        color(color_body)\n        translate([-body_width/2 + 5, body_depth/2 - 2, 5])\n            cube([body_width - 10, 2, body_height - 10]);\n        \n        for(i = [0:1:4]) {\n            translate([-body_width/2 + 8 + i*12, body_depth/2 - 2, 8])\n                cube([1.5, 2.5, body_height - 16]);\n        }\n    }\n}\n\n// Mounting bracket\nmodule hud_mount() {\n    color(color_body)\n    translate([-body_width/2 - 5, -body_depth/2 + 15, 0])\n        cube([5, 15, 8]);\n    \n    // Mounting holes\n    for(pos = [[-body_width/2 - 2.5, -body_depth/2 + 18], \n               [-body_width/2 - 2.5, -body_depth/2 + 27]]) {\n        translate([pos[0], pos[1], 4])\n            rotate([90, 0, 0])\n            cylinder(h=5, d=3, $fn=16);\n    }\n}\n\n// Assembly\nhud_body();\nhud_screen();\nhud_buttons();\nhud_led();\nhud_ports();\nhud_vents();\nhud_mount();",
    "renders": true
  },
  {
    "electronic_device": "eyetracker",
    "openscad_code": "// Realistic Eye-Tracker (medium complexity, 3D-printable)\n$fn = 40;\n\n// Overall size\nbase_x = 80;\nbase_y = 40;\nbase_z = 6;\n\n// Main body shell\nmodule body() {\n    difference() {\n        color(\"silver\") cube([base_x, base_y, base_z], center=true);\n        // Hollow cavity for electronics\n        translate([0,0,base_z/2-2])\n            cube([base_x-4, base_y-4, base_z], center=true);\n    }\n}\n\n// IR LED holders (3x along front edge)\nmodule ir_led(i) {\n    translate([i*25-25, base_y/2-3, 0])\n        rotate([90,0,0])\n            cylinder(h=4, d=6);\n}\n\n// Camera module (center)\nmodule camera() {\n    difference() {\n        translate([0, -base_y/2+4, base_z-2])\n            color(\"black\") cylinder(h=8, d=12);\n        translate([0, -base_y/2-2, base_z])\n            color(\"darkgray\") cylinder(h=2, d=10);\n    }\n}\n\n// USB-C port on side\nmodule usb_c() {\n    translate([-base_x/2+1, 0, 0])\n        rotate([0,90,0])\n            color(\"black\") cube([8, 10, 3], center=true);\n}\n\n// Status LED indicator\nmodule status_led() {\n    translate([base_x/2-4, 0, base_z/2+1])\n        color(\"red\") sphere(d=3);\n}\n\n// Mounting clip for glasses\nmodule clip() {\n    difference() {\n        translate([0, 0, -base_z-3])\n            color(\"gray\") cube([base_x-20, 8, 6], center=true);\n        translate([0, 0, -base_z-6])\n            cube([base_x-24, 4, 6], center=true);\n    }\n}\n\n// Ventilation slots (array on top)\nmodule vents() {\n    for(i=[-2:1:2])\n        translate([i*12, 0, base_z/2+0.1])\n            cube([2, base_y-10, 1]);\n}\n\n// Logo placeholder\nmodule logo() {\n    translate([0, 0, base_z/2+0.1])\n        color(\"blue\") cube([12, 6, 0.5], center=true);\n}\n\n// Assembly\nunion() {\n    body();\n    for(i=[-1:1:1]) ir_led(i);\n    camera();\n    usb_c();\n    status_led();\n    clip();\n    vents();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "braininterface",
    "openscad_code": "// Brain-Interface Neural Implant Device\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Main device colors\ncolor_case = [0.15, 0.15, 0.2];\ncolor_electrodes = [0.8, 0.8, 0.9];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_led = [0, 1, 0];\ncolor_metal = [0.7, 0.7, 0.75];\n\n// Main module\nmodule brain_interface() {\n    difference() {\n        union() {\n            // Main housing\n            color(color_case)\n            translate([0, 0, 5])\n            rounded_box([40, 30, 8], 2);\n            \n            // Curved top surface for skull contact\n            color(color_case)\n            translate([0, 0, 13])\n            scale([1, 1, 0.3])\n            sphere(22);\n            \n            // Front display\n            color(color_screen)\n            translate([-19, 0, 8])\n            cube([2, 20, 6]);\n            \n            // Side charging port\n            color(color_metal)\n            translate([0, -16, 6])\n            rotate([90, 0, 0])\n            cylinder(h=3, r=3);\n            \n            // LED indicators\n            for(i = [0:2]) {\n                color(color_led)\n                translate([18, -10 + i*10, 9])\n                sphere(1.5);\n            }\n            \n            // Electrode array base\n            color(color_electrodes)\n            translate([0, 0, -2])\n            cylinder(h=3, r=25);\n            \n            // Electrode pins\n            for(x = [-20:10:20]) {\n                for(y = [-15:10:15]) {\n                    if(x*x + y*y < 400) {\n                        color(color_electrodes)\n                        translate([x, y, -5])\n                        cylinder(h=3, r=0.5);\n                    }\n                }\n            }\n        }\n        \n        // Remove charging port hole\n        translate([0, -16, 6])\n        rotate([90, 0, 0])\n        cylinder(h=4, r=2);\n        \n        // Remove display cavity\n        translate([-20, 0, 8])\n        cube([1, 18, 4]);\n        \n        // Cooling vents on sides\n        for(i = [0:3]) {\n            translate([0, -14 + i*8, 10])\n            rotate([0, 90, 0])\n            cube([15, 1, 2]);\n        }\n    }\n    \n    // Mounting clips\n    for(angle = [0:120:240]) {\n        rotate([0, 0, angle])\n        translate([28, 0, 5])\n        mounting_clip();\n    }\n}\n\n// Helper module for rounded box\nmodule rounded_box(size, radius) {\n    hull() {\n        for(x = [radius, size[0]-radius])\n        for(y = [radius, size[1]-radius])\n        for(z = [radius, size[2]-radius])\n        translate([x - size[0]/2, y - size[1]/2, z - size[2]/2])\n        sphere(r=radius);\n    }\n}\n\n// Mounting clip module\nmodule mounting_clip() {\n    color(color_case)\n    difference() {\n        union() {\n            translate([0, 0, 0])\n            cube([8, 5, 3], center=true);\n            \n            translate([4, 0, 0])\n            rotate([0, 0, 45])\n            cube([5, 5, 3], center=true);\n        }\n        \n        translate([0, 0, -1.5])\n        cylinder(h=5, r=1.5, center=true);\n    }\n}\n\n// Generate the device\nbrain_interface();",
    "renders": true
  },
  {
    "electronic_device": "neuroimplant",
    "openscad_code": "// Neuroimplant Electronic Device\n// Medium complexity realistic style\n\n// Main parameters\nbase_width = 25;\nbase_length = 40;\nbase_height = 8;\n\n// Electrode array parameters\nelectrode_diameter = 1.5;\nelectrode_height = 3;\nelectrode_spacing = 3;\nelectrode_rows = 6;\nelectrode_cols = 8;\n\n// PCB mounting posts\npost_diameter = 3;\npost_height = 5;\n\n// Battery compartment\nbattery_width = 20;\nbattery_length = 15;\nbattery_height = 6;\n\n// Module for single electrode\nmodule electrode() {\n    color(\"silver\")\n    union() {\n        cylinder(d=electrode_diameter, h=electrode_height);\n        translate([0, 0, electrode_height])\n        sphere(d=electrode_diameter);\n    }\n}\n\n// Module for electrode array\nmodule electrode_array() {\n    for(i = [0:electrode_rows-1]) {\n        for(j = [0:electrode_cols-1]) {\n            translate([\n                -((electrode_cols-1)*electrode_spacing)/2 + j*electrode_spacing,\n                -((electrode_rows-1)*electrode_spacing)/2 + i*electrode_spacing,\n                0\n            ])\n            electrode();\n        }\n    }\n}\n\n// Main implant body\nmodule implant_body() {\n    color(\"ivory\")\n    difference() {\n        // Main rounded base\n        union() {\n            minkowski() {\n                cube([base_width, base_length, base_height], center=true);\n                sphere(2);\n            }\n        }\n        \n        // PCB cavity\n        translate([0, 0, -1])\n        cube([base_width-4, base_length-4, base_height-2], center=true);\n        \n        // Battery compartment\n        translate([0, 8, 0])\n        cube([battery_width+2, battery_length+2, battery_height], center=true);\n    }\n}\n\n// Battery cover with retention clips\nmodule battery_cover() {\n    color(\"darkslategray\")\n    difference() {\n        // Cover plate\n        translate([0, 8, -battery_height/2-0.5])\n        cube([battery_width, battery_length, 1], center=true);\n        \n        // Grip indentations\n        for(i = [-1:1]) {\n            translate([i*6, 8, -battery_height/2-0.6])\n            cube([2, battery_length-4, 0.5], center=true);\n        }\n    }\n}\n\n// PCB mounting posts\nmodule mounting_posts() {\n    color(\"silver\")\n    for(pos = [[-8, -12, 0], [8, -12, 0], [-8, 12, 0], [8, 12, 0]]) {\n        translate(pos)\n        cylinder(d=post_diameter, h=post_height);\n    }\n}\n\n// Antenna coil\nmodule antenna_coil() {\n    color(\"gold\")\n    difference() {\n        // Outer ring\n        translate([0, -base_length/2+5, base_height/2-1])\n        cylinder(d=20, h=2, center=true);\n        \n        // Inner hole\n        translate([0, -base_length/2+5, base_height/2-1])\n        cylinder(d=16, h=3, center=true);\n    }\n}\n\n// Programming port cover\nmodule programming_port() {\n    color(\"black\")\n    union() {\n        // Port housing\n        translate([base_width/2+1, 0, 0])\n        cube([2, 8, 6], center=true);\n        \n        // Sealing cap\n        translate([base_width/2+2, 0, 0])\n        cylinder(d=6, h=2, center=true);\n    }\n}\n\n// Status LED indicator\nmodule status_led() {\n    color(\"red\")\n    translate([0, -base_length/2+2, base_height/2+1])\n    cylinder(d=3, h=1);\n}\n\n// Assembly\ntranslate([0, 0, base_height/2])\nunion() {\n    implant_body();\n    battery_cover();\n    mounting_posts();\n    antenna_coil();\n    programming_port();\n    status_led();\n    \n    // Electrode array on bottom\n    translate([0, 0, -base_height/2-electrode_height])\n    electrode_array();\n}",
    "renders": true
  },
  {
    "electronic_device": "exoskeleton",
    "openscad_code": "// OpenSCAD Exoskeleton Electronic Wearable Device\n// 3D-printable medium-complexity model ~70 mm long\n\n// Basic parameters\n$fn = 50;\nwall = 1.5;               // 3D-print wall thickness\nscale = 0.9;              // Global scale for printability\n\n// Color definitions\ncolor_shell = [0.15,0.15,0.15];   // dark grey carbon-fiber look\ncolor_joint = [0.8,0.8,0.8];      // light grey hinges\ncolor_screen = [0.05,0.05,0.25];  // deep blue LCD\ncolor_led = [0,1,0];              // green status LED\ncolor_pad = [0.2,0.2,0.2];        // cushion pads\n\n// Main assembly\nmodule exo_device() {\n  scale([scale,scale,scale])\n  union() {\n    forearm_support();\n    wrist_module();\n    strap_loops();\n    electronics();\n  }\n}\n\n// Forearm shell\nmodule forearm_support() {\n  color(color_shell)\n  difference() {\n    // main shell\n    hull() {\n      translate([0,0,5]) cube([50,35,wall], center=true);\n      translate([0,0,-20]) cube([45,30,wall], center=true);\n    }\n    // interior cavity\n    translate([0,0,-7.5]) cube([47,32,20], center=true);\n    // ventilation slots\n    for(i=[-20:5:20]) {\n      translate([i,0,0]) rotate([0,90,0])\n        cylinder(h=50, d=3, center=true);\n    }\n  }\n}\n\n// Wrist hinge joint\nmodule wrist_module() {\n  translate([25,0,0])\n  color(color_joint)\n  union() {\n    // hinge block\n    cube([10,20,15], center=true);\n    // pivot pin\n    rotate([90,0,0])\n      cylinder(h=25, d=4, center=true);\n  }\n}\n\n// Flexible strap loops\nmodule strap_loops() {\n  color(color_shell)\n  for(pos=[[0,0,0], [0,0,-15]]) {\n    translate(pos)\n    difference() {\n      translate([-25,0,0]) cube([10,5,10], center=true);\n      translate([-25,0,0]) cube([8,7,8], center=true);\n    }\n  }\n}\n\n// Electronic components\nmodule electronics() {\n  // Main display\n  translate([0,-12,5])\n  color(color_screen)\n  cube([20,10,1], center=true);\n\n  // Control buttons\n  for(i=[-1,1])\n    translate([i*7,-12,6])\n    color(color_joint)\n      cylinder(h=2, d=4);\n\n  // Status LEDs\n  for(i=[-1,0,1])\n    translate([-5+i*5,12,5])\n    color(color_led)\n      sphere(d=3);\n\n  // Micro USB port\n  translate([-23,0,-5])\n  color(color_joint)\n    cube([3,7,4], center=true);\n\n  // Pressure sensor pads\n  for(pos=[[10,8,-5], [-10,8,-5], [0,-8,-5]])\n    color(color_pad)\n      translate(pos)\n      cylinder(h=2, d=8);\n}\n\n// Render the model\nexo_device();",
    "renders": true
  },
  {
    "electronic_device": "prosthetic",
    "openscad_code": "// Prosthetic Myoelectric Hand - Medium Complexity Realistic Model\n// Approximate dimensions: 180mm x 80mm x 40mm\n\n// Color definitions\n$fn = 50;\n\n// Main prosthetic hand assembly\nmodule prosthetic_hand() {\n    color(\"silver\") {\n        union() {\n            // Palm base\n            palm_base();\n            \n            // Four fingers\n            for (i = [-15, -5, 5, 15]) {\n                translate([i, 0, 0]) finger();\n            }\n            \n            // Thumb\n            translate([-25, 20, 0]) rotate([0, 0, -30]) thumb();\n            \n            // Electronics housing on back of hand\n            electronics_housing();\n            \n            // Wrist connector\n            wrist_connector();\n        }\n    }\n}\n\n// Main palm structure\nmodule palm_base() {\n    difference() {\n        // Main palm shape\n        hull() {\n            translate([0, 0, 0]) sphere(d = 35);\n            translate([0, 40, 0]) sphere(d = 30);\n        }\n        \n        // Socket for finger joints\n        for (i = [-15, -5, 5, 15]) {\n            translate([i, 5, -10]) cube([8, 20, 20], center = true);\n        }\n        \n        // Thumb socket\n        translate([-25, 15, -10]) rotate([0, 0, -30]) \n            cube([8, 20, 20], center = true);\n    }\n}\n\n// Individual finger module\nmodule finger() {\n    union() {\n        // First phalange\n        translate([0, 25, 0]) \n            scale([1, 1.5, 1]) \n            sphere(d = 12);\n        \n        // Second phalange\n        translate([0, 40, 0]) \n            scale([0.9, 1.3, 0.9]) \n            sphere(d = 10);\n        \n        // Third phalange\n        translate([0, 52, -2]) \n            hull() {\n                sphere(d = 8);\n                translate([0, 8, 0]) sphere(d = 6);\n            }\n        \n        // Tendon guides (hollow cylinders)\n        color(\"gray20\") {\n            for (pos = [20, 35, 50]) {\n                translate([0, pos, 4])\n                    cylinder(h = 8, d = 3, center = true);\n            }\n        }\n    }\n}\n\n// Thumb module\nmodule thumb() {\n    rotate([0, 20, 0]) {\n        // Thumb base\n        translate([0, 15, 0])\n            scale([1.2, 1.5, 1.2])\n            sphere(d = 14);\n        \n        // Thumb tip\n        translate([0, 30, -3])\n            hull() {\n                sphere(d = 12);\n                translate([0, 10, 0]) sphere(d = 10);\n            }\n    }\n}\n\n// Electronics housing with display and controls\nmodule electronics_housing() {\n    difference() {\n        // Main housing\n        translate([0, 20, 20])\n            cube([50, 40, 15], center = true);\n        \n        // OLED display cutout\n        translate([0, 25, 27.6])\n            color(\"black\")\n            cube([30, 15, 1], center = true);\n        \n        // Control buttons\n        color(\"red\") {\n            translate([-15, 15, 27.6]) cylinder(h = 2, d = 4);\n            translate([-15, 10, 27.6]) cylinder(h = 2, d = 4);\n            translate([-15, 5, 27.6]) cylinder(h = 2, d = 4);\n        }\n        \n        // Charging port\n        translate([22, 20, 27.6])\n            cube([10, 6, 2], center = true);\n        \n        // LED indicators\n        color(\"green\") {\n            translate([15, 35, 27.6]) cylinder(h = 1, d = 3);\n        }\n    }\n    \n    // USB-C port detail\n    color(\"gray20\") {\n        translate([22, 20, 30])\n            difference() {\n                cube([8, 3, 2], center = true);\n                translate([0, 0, 0.5]) cube([6, 2, 1], center = true);\n            }\n    }\n}\n\n// Wrist connector for prosthetic socket\nmodule wrist_connector() {\n    difference() {\n        // Main connector cylinder\n        translate([0, -15, 0])\n            cylinder(h = 20, d = 35);\n        \n        // Tapered end\n        translate([0, -25, 0])\n            cylinder(h = 10, d1 = 35, d2 = 30);\n        \n        // Central hole for wiring\n        translate([0, -25, 0])\n            cylinder(h = 30, d = 15);\n        \n        // Locking pin holes\n        for (angle = [0:90:270]) {\n            rotate([0, 0, angle])\n                translate([17, -15, 0])\n                    cylinder(h = 10, d = 4);\n        }\n    }\n    \n    // Strain relief for cables\n    color(\"black\") {\n        translate([0, -25, 7.5])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d = 6);\n    }\n}\n\n// Generate the complete prosthetic hand\nprosthetic_hand();",
    "renders": true
  },
  {
    "electronic_device": "drone",
    "openscad_code": "// Quadcopter Drone with FPV Camera\n// Realistic style, medium complexity\n\n$fa = 2;\n$fs = 1;\n\n// Main dimensions (mm)\ndrone_diameter = 120;\narm_length = 50;\nmotor_diameter = 12;\nprop_diameter = 35;\nbody_height = 15;\nbattery_size = [40,25,15];\n\nmodule motor_with_prop() {\n    // Motor\n    color([0.2,0.2,0.2]) \n    cylinder(h=8, d=motor_diameter);\n    \n    // Propeller\n    translate([0,0,8])\n    for(i=[0:1])\n    rotate([0,0,i*180])\n    color([0.8,0.8,0.8])\n    scale([1, 0.15, 0.5])\n    rotate([90,0,0])\n    cylinder(h=prop_diameter/2, d=prop_diameter, center=true);\n}\n\nmodule landing_leg() {\n    // Landing strut\n    color([0.3,0.3,0.3])\n    difference() {\n        translate([-2,0,0])\n        cube([4, 4, 15]);\n        \n        // Taper bottom\n        translate([2,2,-1])\n        rotate([0,45,0])\n        cube([5,5,15]);\n    }\n    \n    // Foot pad\n    translate([-5, -2, -2])\n    color([0.1,0.1,0.1])\n    cube([10, 8, 2]);\n}\n\nmodule led_indicator() {\n    color([0,1,0]) sphere(d=3);\n}\n\nmodule body_shell() {\n    // Central body\n    color([0.7,0.7,0.7])\n    difference() {\n        cylinder(h=body_height, d=50);\n        \n        // Top vent holes\n        for(a=[0:60:300])\n        translate([15*cos(a), 15*sin(a), -1])\n        cylinder(h=body_height+2, d=3);\n        \n        // Camera cutout\n        translate([20,0,body_height/2])\n        rotate([90,0,0])\n        cube([30,10,body_height], center=true);\n    }\n    \n    // Battery compartment\n    translate([0,-10,body_height+1])\n    color([0.9,0.9,0.9])\n    cube([battery_size[0]+4, battery_size[1]+4, battery_size[2]+2], center=true);\n    \n    // Battery\n    translate([0,-10,body_height+2])\n    color([0.1,0.1,0.1])\n    cube(battery_size, center=true);\n}\n\nmodule fpv_camera() {\n    // Camera housing\n    translate([25,0,body_height/2])\n    rotate([90,0,0])\n    color([0.1,0.1,0.1])\n    difference() {\n        cube([20,15,15]);\n        translate([0,0,7.5])\n        cylinder(h=20, d=10);\n    }\n    \n    // Camera lens\n    translate([25,0,body_height/2-7])\n    rotate([90,0,0])\n    color([0,0,0])\n    cylinder(h=5, d=8);\n    \n    // Antenna\n    translate([30,0,body_height/2+5])\n    color([0.6,0.6,0.6])\n    difference() {\n        cylinder(h=20, d=2);\n        translate([0,0,10])\n        rotate([0,90,0])\n        cylinder(h=15, d=1);\n    }\n}\n\nmodule status_leds() {\n    // Front LEDs\n    translate([20,15,body_height-2])\n    led_indicator();\n    translate([20,-15,body_height-2])\n    led_indicator();\n    \n    // Rear LEDs\n    translate([-20,15,body_height-2])\n    color([1,0,0]) sphere(d=3);\n    translate([-20,-15,body_height-2])\n    color([1,0,0]) sphere(d=3);\n}\n\n// Main assembly\nunion() {\n    // Body\n    body_shell();\n    \n    // Arms with motors\n    for(angle=[0:90:270])\n    rotate([0,0,angle])\n    translate([drone_diameter/2 - arm_length/2, 0, body_height/2])\n    union() {\n        // Arm\n        color([0.4,0.4,0.4])\n        cube([arm_length, 8, 6], center=true);\n        \n        // Motor at end\n        translate([arm_length/2, 0, 3])\n        motor_with_prop();\n        \n        // Landing leg\n        translate([arm_length/2, 0, -body_height/2-7])\n        landing_leg();\n    }\n    \n    // FPV Camera\n    fpv_camera();\n    \n    // Status LEDs\n    status_leds();\n}",
    "renders": true
  },
  {
    "electronic_device": "robot",
    "openscad_code": "// Medium-complexity realistic robot with built-in tablet-like electronic device\n// Designed for FDM 3D printing – 0.8 mm walls, 45° max overhangs\n\n$fa = 2;\n$fs = 0.5;\n\n// --- Main assembly ----------------------------------------------------------\nrobot();\n\n// --- Modules ----------------------------------------------------------------\nmodule robot() {\n    // Colors\n    color(\"silver\") head();\n    color(\"silver\") torso();\n    color(\"silver\") arm(side = 1);\n    color(\"silver\") arm(side = -1);\n    color(\"slategray\") legs();\n    color(\"black\") eyes();\n    color(\"red\") antenna();\n}\n\n// --- Head with integrated tablet --------------------------------------------\nmodule head() {\n    translate([0, 0, 70])\n    union() {\n        // Head shell\n        difference() {\n            cube([40, 30, 35], center = true);\n            translate([0, 0, 17.5])\n            cube([36, 26, 35], center = true);  // Hollow cavity\n        }\n\n        // Tablet screen (embedded)\n        translate([-15, -13, 18])\n        color(\"black\") cube([30, 26, 1]);\n\n        // Tablet bezel\n        translate([-16, -14, 17.5])\n        color(\"darkgray\") cube([32, 28, 1.5]);\n\n        // Home button\n        translate([0, -14, 17.5])\n        color(\"lightgray\") cylinder(h = 1.5, r = 2.5, $fn = 20);\n\n        // Speaker grill\n        for (i = [-6:3:6])\n            translate([i, 14, 17.5])\n            color(\"dimgray\") cube([1.5, 2, 1.5]);\n    }\n}\n\n// --- Torso with power connector ---------------------------------------------\nmodule torso() {\n    difference() {\n        translate([0, 0, 40])\n        cube([45, 30, 55], center = true);  // Main torso block\n\n        // Hollow cavity\n        translate([0, 0, 67.5])\n        cube([40, 25, 50], center = true);\n\n        // USB-C port\n        translate([23, 0, 25])\n        rotate([0, 90, 0])\n        cylinder(h = 10, r = 3, center = true);\n    }\n\n    // Power LED indicator\n    translate([22.5, 0, 60])\n    color(\"lime\") sphere(r = 1.5);\n}\n\n// --- Arms -------------------------------------------------------------------\nmodule arm(side = 1) {  // side = 1 for right, -1 for left\n    translate([side * 30, 0, 60])\n    rotate([0, 0, side * 10])\n    union() {\n        // Upper arm\n        translate([side * 7.5, 0, 0])\n        rotate([0, 0, 90])\n        cube([15, 10, 10], center = true);\n\n        // Elbow joint\n        translate([side * 15, 0, 0])\n        sphere(r = 6);\n\n        // Forearm\n        translate([side * 22.5, 0, -7.5])\n        rotate([0, 0, 90])\n        cube([15, 8, 8], center = true);\n\n        // Hand (simple block)\n        translate([side * 30, 0, -15])\n        cube([12, 8, 6], center = true);\n    }\n}\n\n// --- Legs -------------------------------------------------------------------\nmodule legs() {\n    for (side = [-1, 1])\n    translate([side * 12, 0, 10])\n    union() {\n        // Upper leg\n        cube([10, 10, 25], center = true);\n\n        // Knee\n        translate([0, 0, -15])\n        sphere(r = 5);\n\n        // Lower leg\n        translate([0, 0, -30])\n        cube([8, 8, 20], center = true);\n\n        // Foot\n        translate([0, 7, -40])\n        cube([20, 14, 6], center = true);\n    }\n}\n\n// --- Eyes -------------------------------------------------------------------\nmodule eyes() {\n    for (side = [-1, 1])\n    translate([side * 10, 0, 85])\n    color(\"lightblue\")\n    sphere(r = 3);\n}\n\n// --- Antenna ----------------------------------------------------------------\nmodule antenna() {\n    translate([0, 0, 90])\n    union() {\n        // Base\n        cylinder(h = 5, r = 5);\n\n        // Rod\n        translate([0, 0, 5])\n        cylinder(h = 15, r = 1);\n\n        // Ball tip\n        translate([0, 0, 20])\n        sphere(r = 2);\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "automaton",
    "openscad_code": "// Automated Smart-Watch Charging Dock (realistic style, medium complexity)\n\n// Overall dimensions: 60 x 50 x 40 mm\n\n// Base plate\ndifference() {\n    color(\"dimgray\") cube([60, 50, 3], center=true);\n    // Screw holes for mounting\n    for (x = [-25, 25])\n        translate([x, 0, -2]) cylinder(h=4, d=3.2, $fn=16);\n}\n\n// Main body\ntranslate([0, 0, 1.5]) {\n    difference() {\n        color(\"silver\") cube([55, 45, 35], center=true);\n        // Hollow cavity\n        color(\"silver\") cube([51, 41, 31], center=true);\n    }\n}\n\n// Front sloped panel for watch rest\ntranslate([0, -20, 20]) {\n    rotate([60, 0, 0]) cube([45, 30, 4], center=true);\n}\n\n// Watch recess with soft pad\ntranslate([0, -12, 12]) {\n    color(\"lightgray\") cube([42, 28, 2], center=true);\n    color(\"black\") cube([40, 26, 1], center=true);\n}\n\n// Wireless charging coil housing\ntranslate([0, -12, 14]) {\n    color(\"white\") cylinder(h=3, d=30, $fn=32);\n}\n\n// LED indicator ring around coil\ntranslate([0, -12, 17]) {\n    color(\"royalblue\") cylinder(h=1, d=32, $fn=32);\n}\n\n// USB-C port\ntranslate([27, 0, 0]) {\n    rotate([0, 90, 0]) {\n        difference() {\n            color(\"black\") cube([12, 8, 6], center=true);\n            color(\"black\") cube([10, 6.5, 4], center=true);\n        }\n        // Port contacts\n        for (i = [-2:2])\n            translate([4, i*1.2, 0])\n                color(\"gold\") cube([0.5, 0.6, 2], center=true);\n    }\n}\n\n// Air vents on sides\nfor (side = [-1, 1]) {\n    translate([0, side*25, 15]) {\n        rotate([side*90, 0, 0]) {\n            for (y = [-12:4:12])\n                translate([y, 0, 0])\n                    color(\"dimgray\") cube([3, 10, 2], center=true);\n        }\n    }\n}\n\n// Cable management groove on back\ntranslate([0, 22, 6]) {\n    color(\"silver\") cube([50, 8, 12], center=true);\n    // Groove for cable\n    translate([0, 0, -6])\n        color(\"black\") cube([48, 6, 6], center=true);\n}\n\n// Brand logo on front\ntranslate([0, -20, 26]) {\n    scale([0.2, 0.2, 0.2])\n        color(\"white\") {\n            // Stylized W shape\n            for (x = [-15, 0, 15])\n                translate([x, 0, 0])\n                    cube([5, 20, 2], center=true);\n            cube([35, 5, 2], center=true);\n        }\n}\n\n// Anti-slip feet\nfor (x = [-20, 20])\n    for (y = [-15, 15])\n        translate([x, y, -1.5])\n            color(\"black\") cylinder(h=3, d=6, $fn=16);",
    "renders": true
  },
  {
    "electronic_device": "android",
    "openscad_code": "// Android phone in realistic style - medium complexity\n// Overall dimensions: 70mm x 140mm x 8mm\n\n// Device body\nmodule phone_body() {\n    difference() {\n        // Main body\n        color([0.2, 0.2, 0.2])\n        rounded_cube([70, 140, 8], 10);\n        \n        // Screen recess\n        translate([5, 15, 7.9])\n            color([0.1, 0.1, 0.1])\n            cube([60, 110, 0.5]);\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(x = [0, 1], y = [0, 1], z = [0, 1]) {\n            translate([x * (size[0] - 2*radius), y * (size[1] - 2*radius), z * (size[2] - 2*radius)])\n                sphere(r = radius);\n        }\n    }\n}\n\n// Screen assembly\nmodule screen() {\n    union() {\n        // Glass\n        translate([5, 15, 8])\n            color([0.9, 0.9, 0.95, 0.8])\n            cube([60, 110, 0.2]);\n            \n        // Display\n        translate([6, 16, 8.1])\n            color([0, 0, 0])\n            cube([58, 108, 0.1]);\n    }\n}\n\n// Camera bump\nmodule camera_bump() {\n    translate([55, 125, 8])\n        color([0.3, 0.3, 0.3])\n        cylinder(h = 2, r = 8);\n    \n    // Camera lens\n    translate([55, 125, 10])\n        color([0.1, 0.1, 0.1])\n        cylinder(h = 0.5, r = 6);\n    \n    // Second lens\n    translate([55, 110, 10])\n        color([0.1, 0.1, 0.1])\n        cylinder(h = 0.5, r = 4);\n}\n\n// Buttons\nmodule buttons() {\n    // Power button\n    translate([0, 70, 4])\n        color([0.4, 0.4, 0.4])\n        cube([1.5, 15, 3]);\n    \n    // Volume buttons\n    translate([0, 40, 4])\n        color([0.4, 0.4, 0.4])\n        cube([1.5, 20, 3]);\n}\n\n// USB-C port\nmodule usb_port() {\n    translate([35, 0, 2])\n        color([0.1, 0.1, 0.1])\n        cube([12, 3, 2]);\n}\n\n// Speaker grill\nmodule speaker_grill() {\n    translate([20, 0, 1])\n        for(i = [0:5]) {\n            translate([i * 2.5, 0, 0])\n                color([0.1, 0.1, 0.1])\n                cube([1.5, 3, 2]);\n        }\n}\n\n// Front camera\nmodule front_camera() {\n    translate([35, 135, 8.2])\n        color([0.1, 0.1, 0.1])\n        cylinder(h = 0.5, r = 3);\n}\n\n// LED flash\nmodule led_flash() {\n    translate([45, 125, 10.2])\n        color([1, 1, 0.8])\n        cylinder(h = 0.3, r = 2);\n}\n\n// Antenna lines\nmodule antenna_lines() {\n    color([0.3, 0.3, 0.3, 0.5])\n    translate([-0.1, 30, 4])\n        cube([0.2, 2, 8]);\n    \n    translate([-0.1, 100, 4])\n        cube([0.2, 2, 8]);\n}\n\n// Logo\nmodule logo() {\n    translate([35, 60, 7.9])\n        color([0.5, 0.5, 0.5])\n        linear_extrude(0.2)\n            text(\"ANDROID\", size = 5, halign = \"center\", valign = \"center\");\n}\n\n// Assembly\nphone_body();\nscreen();\ncamera_bump();\nbuttons();\nusb_port();\nspeaker_grill();\nfront_camera();\nled_flash();\nantenna_lines();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "cyborg",
    "openscad_code": "// Cyborg Electronic Wrist Console - Realistic Style\n// 3D printable cybernetic augmentation with integrated display and interface\n\n// Device dimensions\ndevice_length = 70;\ndevice_width = 45;\ndevice_height = 20;\nwall_thickness = 2;\n\n// Main chassis module\nmodule chassis() {\n    // Base housing - ergonomic curved design\n    difference() {\n        // Main body with rounded edges\n        minkowski() {\n            cube([device_length, device_width, device_height], center=true);\n            sphere(3);\n        }\n        \n        // Hollow interior for electronics\n        translate([0, 0, wall_thickness/2])\n        cube([device_length-2*wall_thickness, device_width-2*wall_thickness, device_height-wall_thickness], center=true);\n    }\n}\n\n// Display module with screen\nmodule display() {\n    // Screen bezel frame\n    color(\"darkslategray\")\n    translate([0, 10, device_height/2 - 1])\n    cube([device_length - 20, 25, 2], center=true);\n    \n    // OLED display\n    color(\"black\")\n    translate([0, 10, device_height/2])\n    cube([device_length - 24, 21, 0.5], center=true);\n    \n    // Screen content (simulated UI)\n    color(\"cyan\")\n    for(i = [-3:3]) {\n        translate([-30 + i*8, 10, device_height/2 + 0.3])\n        cube([6, 0.3, 0.1], center=true);\n    }\n}\n\n// Control interface module\nmodule controls() {\n    // Navigation pad\n    color(\"dimgray\")\n    translate([-device_length/2 + 15, -device_width/2 + 10, device_height/2 - 2])\n    cylinder(h=2, r=6, $fn=20);\n    \n    // Directional buttons\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n        translate([-device_length/2 + 15, -device_width/2 + 4, device_height/2 - 2])\n        color(\"darkgray\")\n        cube([4, 2, 1], center=true);\n    }\n    \n    // Power button\n    color(\"red\")\n    translate([device_length/2 - 10, -device_width/2 + 10, device_height/2 - 1.5])\n    cylinder(h=1.5, r=3, $fn=16);\n    \n    // Function buttons\n    for(i = [0:3]) {\n        color(\"lightgray\")\n        translate([device_length/2 - 15 - i*8, device_width/2 - 8, device_height/2 - 2])\n        cube([5, 5, 1.5], center=true);\n    }\n}\n\n// Sensor array\nmodule sensors() {\n    // Heart rate sensor\n    color(\"darkgreen\")\n    translate([0, 0, -device_height/2 + 0.5])\n    cylinder(h=1, r=8, $fn=32);\n    \n    // UV sensor\n    color(\"purple\")\n    translate([20, 0, -device_height/2 + 0.5])\n    cylinder(h=1, r=3, $fn=16);\n    \n    // Ambient light sensor\n    color(\"white\")\n    translate([-20, 0, -device_height/2 + 0.5])\n    cylinder(h=1, r=3, $fn=16);\n}\n\n// Charging port\nmodule charging_port() {\n    color(\"black\")\n    translate([device_length/2 - 5, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=8, r1=2.5, r2=2, center=true);\n}\n\n// Wrist attachment system\nmodule wrist_mount() {\n    // Left strap mount\n    color(\"darkgray\")\n    translate([-device_length/2 - 10, 0, 0])\n    cube([20, 15, 8], center=true);\n    \n    // Right strap mount\n    translate([device_length/2 + 10, 0, 0])\n    cube([20, 15, 8], center=true);\n    \n    // Strap holes\n    for(pos = [-7:7:7]) {\n        translate([-device_length/2 - 10, pos, 0])\n        rotate([90, 0, 0])\n        cylinder(h=15, r=2, center=true);\n        \n        translate([device_length/2 + 10, pos, 0])\n        rotate([90, 0, 0])\n        cylinder(h=15, r=2, center=true);\n    }\n}\n\n// Cooling vents\nmodule cooling_vents() {\n    color(\"gray\")\n    for(i = [-2:2]) {\n        translate([i*10, 0, -device_height/2 + 5])\n        cube([2, device_width - 10, 3], center=true);\n    }\n}\n\n// Assembly\ncolor(\"silver\") chassis();\ndisplay();\ncontrols();\nsensors();\ncharging_port();\nwrist_mount();\ncooling_vents();",
    "renders": true
  },
  {
    "electronic_device": "biocomputer",
    "openscad_code": "// Biocomputer - realistic style, medium complexity\n// 3D printable lab-grade biocomputer with bio-reactor chamber and control interface\n\n$fn = 50;\n\n// Main dimensions\nbase_w = 80;\nbase_d = 60;\nbase_h = 12;\nreactor_w = 50;\nreactor_h = 40;\nscreen_w = 30;\nscreen_h = 20;\nport_d = 8;\n\n// Colors\ncolor_base = [0.25, 0.25, 0.25];\ncolor_reactor = [0.1, 0.5, 0.7];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_led = [0.9, 0.2, 0.1];\ncolor_port = [0.3, 0.3, 0.3];\n\n// Main assembly\nmodule biocomputer() {\n    // Base housing\n    color(color_base)\n    translate([0, 0, base_h/2])\n    cube([base_w, base_d, base_h], center=true);\n    \n    // Top cover with vents\n    color(color_base)\n    difference() {\n        translate([0, 0, base_h + 2])\n        cube([base_w - 4, base_d - 4, 4], center=true);\n        \n        // Vent slots\n        for(i = [-30:10:30]) {\n            translate([i, 0, base_h + 2])\n            cube([2, base_d - 8, 5], center=true);\n        }\n    }\n    \n    // Bio-reactor chamber\n    color(color_reactor)\n    translate([0, 0, base_h + 4 + reactor_h/2])\n    cube([reactor_w, reactor_w*0.8, reactor_h], center=true);\n    \n    // Reactor window\n    color([0.8, 0.9, 1, 0.5])\n    translate([0, reactor_w*0.4 + 0.5, base_h + 4 + reactor_h/2])\n    cube([reactor_w - 10, 1, reactor_h - 10], center=true);\n    \n    // Control panel\n    color(color_base)\n    translate([base_w/2 - 15, 0, base_h + 2])\n    cube([25, 30, 8], center=true);\n    \n    // Display screen\n    color(color_screen)\n    translate([base_w/2 - 15, 0, base_h + 8])\n    cube([screen_w, screen_h, 1], center=true);\n    \n    // Control buttons\n    for(pos = [[-10, -8], [-10, 0], [-10, 8]]) {\n        color([0.8, 0.8, 0.8])\n        translate([base_w/2 - 15 + pos[0], pos[1], base_h + 10])\n        cylinder(h=2, r=3, center=true);\n    }\n    \n    // Status LEDs\n    for(i = [-1:1]) {\n        color(color_led)\n        translate([base_w/2 - 15 + 10, i*8, base_h + 10])\n        sphere(r=1.5);\n    }\n    \n    // USB ports\n    for(i = [0:1]) {\n        color(color_port)\n        translate([base_w/2 - 2, -20 + i*10, base_h/2])\n        rotate([90, 0, 0])\n        cylinder(h=port_d, r=3.5, center=true);\n    }\n    \n    // Power connector\n    color(color_port)\n    translate([0, base_d/2 - 2, base_h/2])\n    rotate([90, 0, 0])\n    cylinder(h=10, r=5, center=true);\n    \n    // Sample input port\n    color(color_reactor)\n    translate([0, -reactor_w*0.4 - 5, base_h + 4 + reactor_h/2])\n    cylinder(h=10, r=6, center=true);\n    \n    // Cooling fins\n    for(i = [-20:8:20]) {\n        color([0.3, 0.3, 0.3])\n        translate([i, base_d/2 - 1, base_h + 4 + reactor_h/2])\n        cube([4, 2, reactor_h - 5], center=true);\n    }\n    \n    // Rubber feet\n    for(x = [-30, 30])\n    for(y = [-20, 20]) {\n        color([0.1, 0.1, 0.1])\n        translate([x, y, 1])\n        cylinder(h=2, r=3, center=true);\n    }\n}\n\n// Render the biocomputer\nbiocomputer();",
    "renders": true
  },
  {
    "electronic_device": "opticalcomputer",
    "openscad_code": "// Optical Computer - Realistic Style (Medium Complexity)\n// 3D printable model with optical interconnects, photonic chips, and cooling\n\n// Dimensions (mm)\ncase_w = 80;\ncase_h = 25;\ncase_d = 60;\nwall_th = 2;\n\n// Case body\ncolor(\"silver\") \ndifference() {\n    cube([case_w, case_d, case_h], center=true);\n    translate([0,0,wall_th/2]) cube([case_w-wall_th*2, case_d-wall_th*2, case_h], center=true);\n}\n\n// Front panel with optical ports\nmodule optical_port(x,y) {\n    translate([x, y, case_h/2-wall_th]) \n    color(\"black\") \n    difference() {\n        cylinder(h=wall_th+1, d=6, $fn=20);\n        translate([0,0,-1]) cylinder(h=wall_th+3, d=4, $fn=20);\n    }\n}\n\n// Create 4 optical ports\nfor(i=[-1,1]) {\n    for(j=[-1,1]) {\n        optical_port(i*15, j*15);\n    }\n}\n\n// Status LEDs above ports\nmodule status_led(x,y,col) {\n    translate([x, y, case_h/2]) \n    color(col) \n    cylinder(h=1, d=3, $fn=16);\n}\n\nstatus_led(-20, 20, \"red\");\nstatus_led(-20, -20, \"green\");\nstatus_led(20, 20, \"blue\");\nstatus_led(20, -20, \"yellow\");\n\n// Top heatsink fins\nmodule heatsink() {\n    translate([0,0,case_h/2+1]) \n    for(i=[-35:7:35]) {\n        translate([i, 0, 0]) \n        color(\"gray\") \n        cube([4, case_d-10, 8]);\n    }\n}\nheatsink();\n\n// Side ventilation slots\nmodule vent_slot(y) {\n    translate([case_w/2+1, y, 0]) \n    color(\"black\") \n    cube([1, 8, 2]);\n}\n\nfor(y=[-25:5:25]) {\n    vent_slot(y);\n}\n\n// Photonic chip module visible through window\ntranslate([0, 0, -case_h/2+wall_th+3]) \ndifference() {\n    color(\"darkblue\") cube([20, 20, 3], center=true);\n    // Optical waveguides\n    for(a=[-30:30:30]) {\n        rotate([0,0,a]) \n        translate([0,5,0]) \n        color(\"cyan\") \n        cube([20, 1, 1]);\n    }\n}\n\n// Input power connector\ntranslate([case_w/2, -case_d/2+5, 0]) \ncolor(\"black\") \ndifference() {\n    cube([4, 8, 6]);\n    translate([2, 4, 0]) rotate([90,0,0]) cylinder(h=8, d=3, $fn=12);\n}\n\n// Mounting holes (3D print friendly)\nmodule mount_hole(x,y) {\n    translate([x, y, -case_h/2]) \n    cylinder(h=case_h, d=3, $fn=20);\n}\n\nmount_hole(-35, -25);\nmount_hole(35, -25);\nmount_hole(-35, 25);\nmount_hole(35, 25);",
    "renders": true
  },
  {
    "electronic_device": "analogcomputer",
    "openscad_code": "// Analog Computer Module - Realistic Style\n// Based on 1970s EAI TR-48 style analog computing module\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\nmodule main_chassis() {\n    color(\"darkslategray\")\n    difference() {\n        cube([80, 120, 25], center=true);\n        translate([0, 0, 12.5])\n            cube([78, 118, 26], center=true);\n    }\n}\n\nmodule front_panel() {\n    color(\"saddlebrown\")\n    difference() {\n        cube([82, 122, 2], center=true);\n        translate([0, 0, 1])\n            cube([80, 120, 3], center=true);\n    }\n}\n\nmodule meter_display() {\n    color(\"black\")\n    difference() {\n        translate([-30, 45, 14])\n            cube([20, 15, 5]);\n        translate([-20, 52.5, 19.5])\n            cylinder(h=1, r=7);\n    }\n    \n    color(\"lightgray\")\n    translate([-20, 52.5, 19.5])\n        cylinder(h=0.5, r=6.5);\n    \n    color(\"red\")\n    translate([-20, 52.5, 20])\n        rotate([90, 0, 0])\n            cylinder(h=12, r=0.5);\n}\n\nmodule potentiometers() {\n    for(i=[-2:2]) {\n        color(\"silver\")\n        translate([i*15, 20, 14]) {\n            cylinder(h=8, r=6);\n            translate([0, 0, 8])\n                cylinder(h=3, r=4);\n        }\n        \n        color(\"black\")\n        translate([i*15, 20, 22])\n            cylinder(h=1, r=3);\n    }\n}\n\nmodule input_jacks() {\n    for(i=[-3:3]) {\n        color(\"gold\")\n        translate([i*10, -40, 14]) {\n            cylinder(h=5, r=3);\n            translate([0, 0, 5])\n                cylinder(h=2, r=2);\n        }\n        \n        color(\"black\")\n        translate([i*10, -40, 21])\n            cylinder(h=1, r=1.5);\n    }\n}\n\nmodule toggle_switches() {\n    for(i=[0:2]) {\n        color(\"black\")\n        translate([-35 + i*35, 0, 14]) {\n            cube([8, 5, 6], center=true);\n            translate([0, 0, 9])\n                rotate([0, 90, 0])\n                    cylinder(h=8, r=2);\n        }\n        \n        color(\"red\")\n        translate([-35 + i*35, 4, 19])\n            sphere(r=2.5);\n    }\n}\n\nmodule labeling() {\n    color(\"white\")\n    translate([-35, 55, 13])\n        cube([0.5, 8, 3]);\n    translate([15, 55, 13])\n        cube([0.5, 8, 3]);\n    translate([-35, -35, 13])\n        cube([70, 0.5, 3]);\n}\n\nmodule cooling_vent() {\n    color(\"black\")\n    for(i=[-3:3]) {\n        translate([0, 0, i*5])\n            cube([76, 2, 1], center=true);\n    }\n}\n\nmodule power_indicator() {\n    color(\"darkred\")\n    translate([30, -50, 14]) {\n        difference() {\n            cylinder(h=3, r=4);\n            translate([0, 0, 3])\n                cylinder(h=1, r=3.5);\n        }\n    }\n    \n    color(\"lightcoral\")\n    translate([30, -50, 17])\n        cylinder(h=0.5, r=3);\n}\n\n// Assembly\nmain_chassis();\ntranslate([0, 0, 13.5])\n    front_panel();\nmeter_display();\npotentiometers();\ninput_jacks();\ntoggle_switches();\npower_indicator();\ntranslate([0, 60, 12])\n    cooling_vent();",
    "renders": true
  },
  {
    "electronic_device": "digitalcomputer",
    "openscad_code": "// Digital Computer - Realistic Style\n// 3D Printable Mini Computer Case\n\n// Overall dimensions\ncase_width = 60;\ncase_height = 40;\ncase_depth = 55;\n\n// Color definitions\n$fn = 32;\n\nmodule computer_case() {\n    // Main body\n    difference() {\n        // Outer shell\n        color(\"silver\") cube([case_width, case_depth, case_height], center=true);\n        \n        // Hollow out\n        translate([0, 0, 2])\n            color(\"silver\") cube([case_width-4, case_depth-4, case_height-2], center=true);\n    }\n}\n\nmodule front_panel() {\n    // Front face\n    translate([0, case_depth/2, 0])\n    color(\"black\") cube([case_width, 1, case_height], center=true);\n    \n    // Power button\n    translate([-20, case_depth/2+0.5, 10])\n    color(\"green\") cylinder(h=2, r=3);\n    \n    // Reset button\n    translate([-10, case_depth/2+0.5, 10])\n    color(\"red\") cylinder(h=2, r=2);\n    \n    // HDD LED\n    translate([10, case_depth/2+0.5, 10])\n    color(\"yellow\") cylinder(h=1, r=1.5);\n    \n    // Power LED\n    translate([20, case_depth/2+0.5, 10])\n    color(\"blue\") cylinder(h=1, r=1.5);\n    \n    // USB ports\n    for(x = [-25, -15, -5, 5, 15, 25]) {\n        translate([x, case_depth/2+0.5, -5])\n        color(\"darkgray\") cube([4, 2, 6], center=true);\n    }\n    \n    // Audio jacks\n    translate([30, case_depth/2+0.5, -5])\n    color(\"gold\") cylinder(h=3, r=2.5);\n    \n    translate([30, case_depth/2+0.5, -10])\n    color(\"gold\") cylinder(h=3, r=2.5);\n}\n\nmodule rear_panel() {\n    // Rear face\n    translate([0, -case_depth/2, 0])\n    color(\"black\") cube([case_width, 1, case_height], center=true);\n    \n    // Power supply port\n    translate([-20, -case_depth/2-0.5, 5])\n    color(\"black\") cylinder(h=5, r=5);\n    \n    // VGA port\n    translate([0, -case_depth/2-0.5, 5])\n    color(\"blue\") {\n        cube([10, 2, 6], center=true);\n        translate([0, 0, 0])\n        for(i = [-2, 0, 2]) {\n            translate([i, 2, 0])\n            cylinder(h=2, r=1);\n        }\n    }\n    \n    // USB ports\n    for(x = [15, 20, 25, 30]) {\n        translate([x, -case_depth/2-0.5, 5])\n        color(\"black\") cube([4, 2, 6], center=true);\n    }\n    \n    // Ethernet port\n    translate([0, -case_depth/2-0.5, -5])\n    color(\"black\") cube([8, 2, 8], center=true);\n}\n\nmodule side_ventilation() {\n    // Left side vents\n    for(z = [-15, -10, -5, 0, 5, 10, 15]) {\n        translate([-case_width/2-0.5, 0, z])\n        color(\"silver\") cube([1, case_depth-10, 2], center=true);\n    }\n    \n    // Right side vents\n    for(z = [-15, -10, -5, 0, 5, 10, 15]) {\n        translate([case_width/2+0.5, 0, z])\n        color(\"silver\") cube([1, case_depth-10, 2], center=true);\n    }\n}\n\nmodule top_features() {\n    // Top panel\n    translate([0, 0, case_height/2+0.5])\n    color(\"black\") cube([case_width, case_depth, 1], center=true);\n    \n    // DVD drive slot\n    translate([0, case_depth/4, case_height/2+0.5])\n    color(\"darkgray\") cube([case_width-10, 10, 2], center=true);\n    \n    // Air vents\n    for(y = [-20, -10, 0, 10, 20]) {\n        for(x = [-20, -10, 0, 10, 20]) {\n            translate([x, y, case_height/2+1.5])\n            color(\"black\") cylinder(h=2, r=1);\n        }\n    }\n}\n\nmodule feet() {\n    // Rubber feet\n    foot_positions = [\n        [-case_width/2+5, case_depth/2-5, -case_height/2-1],\n        [case_width/2-5, case_depth/2-5, -case_height/2-1],\n        [-case_width/2+5, -case_depth/2+5, -case_height/2-1],\n        [case_width/2-5, -case_depth/2+5, -case_height/2-1]\n    ];\n    \n    for(pos = foot_positions) {\n        translate(pos)\n        color(\"black\") cylinder(h=2, r=3);\n    }\n}\n\n// Assemble the computer\ncomputer_case();\nfront_panel();\nrear_panel();\nside_ventilation();\ntop_features();\nfeet();",
    "renders": true
  },
  {
    "electronic_device": "hybridcomputer",
    "openscad_code": "// Hybrid Computer - Realistic Medium Complexity\n// Dimensions: 80x60x25mm\n\n// Color definitions\n$fn = 32;\n\n// Main body module\nmodule hybrid_computer() {\n    // Base chassis\n    color(\"silver\") \n    difference() {\n        cube([80, 60, 25], center=true);\n        translate([0, 0, 12.5]) \n        cube([76, 56, 26], center=true);\n    }\n    \n    // Top panel with vents\n    color(\"darkgray\") \n    difference() {\n        translate([0, 0, 11]) \n        cube([78, 58, 2], center=true);\n        \n        // Ventilation slots\n        for(i = [-35:7:35]) {\n            translate([i, 0, 11.5]) \n            cube([5, 56, 1.5], center=true);\n        }\n    }\n    \n    // Front panel controls\n    color(\"black\") \n    translate([0, 29.5, 0]) \n    cube([70, 1, 20], center=true);\n    \n    // Display screen\n    color(\"navy\") \n    translate([0, 20, 5]) \n    cube([40, 18, 1], center=true);\n    \n    color(\"cyan\") \n    translate([0, 20, 5.6]) \n    cube([38, 16, 0.2], center=true);\n    \n    // Control buttons\n    color(\"red\") \n    for(pos = [[-25, 25, 5], [-15, 25, 5], [-5, 25, 5], [5, 25, 5], [15, 25, 5], [25, 25, 5]]) {\n        translate(pos) \n        cylinder(h=2, r=2.5, center=true);\n    }\n    \n    // Rotary encoder\n    color(\"silver\") \n    translate([30, 25, 5]) {\n        cylinder(h=3, r=4, center=true);\n        translate([0, 0, 2]) \n        cylinder(h=2, r=2, center=true);\n    }\n    \n    // Side ports\n    color(\"black\") \n    for(i = [0:3]) {\n        translate([-38.5, -20 + i*10, 5]) \n        rotate([0, 90, 0]) \n        cylinder(h=5, r=1.5, center=true);\n    }\n    \n    // USB ports\n    color(\"darkgray\") \n    for(j = [0:1]) {\n        translate([-38.5, 10 + j*8, 0]) \n        rotate([0, 90, 0]) \n        cube([6, 7, 2], center=true);\n    }\n    \n    // Power connector\n    color(\"black\") \n    translate([38.5, 0, 5]) \n    rotate([0, -90, 0]) \n    cylinder(h=3, r=2.5, center=true);\n    \n    // Status LEDs\n    color(\"green\") \n    translate([35, -25, 10]) \n    sphere(r=1);\n    \n    color(\"yellow\") \n    translate([35, -25, 7]) \n    sphere(r=1);\n    \n    color(\"red\") \n    translate([35, -25, 4]) \n    sphere(r=1);\n    \n    // Cooling fan grille\n    color(\"darkgray\") \n    difference() {\n        translate([0, 0, -11]) \n        cube([20, 20, 2], center=true);\n        \n        for(x = [-8:4:8]) {\n            for(y = [-8:4:8]) {\n                translate([x, y, -10]) \n                cylinder(h=3, r=1, center=true);\n            }\n        }\n    }\n    \n    // Rubber feet\n    color(\"black\") \n    for(x = [-30, 30]) {\n        for(y = [-20, 20]) {\n            translate([x, y, -12.5]) \n            cylinder(h=2, r=3, center=true);\n        }\n    }\n}\n\n// Generate the model\nhybrid_computer();",
    "renders": true
  },
  {
    "electronic_device": "portable",
    "openscad_code": "// Portable Game Console - Nintendo Switch Style\n// Medium complexity 3D printable model\n\n// Colors\n$fn=32;\n\n// Main dimensions\nwidth = 102;\nheight = 55;\ndepth = 14;\n\n// Screen dimensions\nscreen_width = 90;\nscreen_height = 50;\nscreen_depth = 1;\n\n// Button dimensions\nbutton_d = 8;\nbutton_h = 2;\nd_pad_size = 18;\nd_pad_h = 2;\n\n// Joystick dimensions\njoy_d = 12;\njoy_h = 6;\n\n// Port dimensions\nusb_c_w = 8;\nusb_c_h = 3;\n\n// Wall thickness\nwall = 1.5;\n\nmodule main_body() {\n    color(\"LightGray\")\n    difference() {\n        // Main shell\n        cube([width, height, depth], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -wall/2])\n        cube([width-wall*2, height-wall*2, depth], center=true);\n    }\n}\n\nmodule screen() {\n    color(\"Black\")\n    translate([0, 0, depth/2 - screen_depth/2])\n    cube([screen_width, screen_height, screen_depth], center=true);\n    \n    // Screen glass\n    color([0.1,0.1,0.1,0.8])\n    translate([0, 0, depth/2 + 0.2])\n    cube([screen_width+0.5, screen_height+0.5, 0.5], center=true);\n}\n\nmodule button(x, y, color_name=\"Red\") {\n    translate([x, y, depth/2 - button_h/2])\n    color(color_name)\n    cylinder(h=button_h, d=button_d, center=true);\n}\n\nmodule d_pad(x, y) {\n    color(\"DarkGray\")\n    translate([x, y, depth/2 - d_pad_h/2])\n    cube([d_pad_size, d_pad_size, d_pad_h], center=true);\n    \n    // D-pad cross\n    color(\"Black\")\n    translate([x, y, depth/2 - d_pad_h/2 + 0.5])\n    cube([d_pad_size*0.8, d_pad_size*0.3, 1], center=true);\n    translate([x, y, depth/2 - d_pad_h/2 + 0.5])\n    cube([d_pad_size*0.3, d_pad_size*0.8, 1], center=true);\n}\n\nmodule joystick(x, y) {\n    color(\"DarkGray\")\n    translate([x, y, depth/2 - joy_h/2])\n    cylinder(h=joy_h, d=joy_d, center=true);\n    \n    color(\"Black\")\n    translate([x, y, depth/2 - joy_h/2 + joy_h/2])\n    sphere(d=joy_d*0.8);\n}\n\nmodule shoulder_button(x, side) {\n    color(\"Gray\")\n    translate([x, side*(height/2 - 3), depth/2 - 1])\n    cube([20, 6, 3], center=true);\n}\n\nmodule ports() {\n    // USB-C port\n    color(\"Black\")\n    translate([0, height/2 + 0.1, 0])\n    rotate([90, 0, 0])\n    cube([usb_c_w, usb_c_h, wall+0.2], center=true);\n    \n    // Headphone jack\n    color(\"Black\")\n    translate([-15, height/2 + 0.1, 0])\n    rotate([90, 0, 0])\n    cylinder(h=wall+0.2, d=5, center=true);\n}\n\nmodule vents() {\n    // Cooling vents\n    for(i=[-40:5:40]) {\n        color(\"Black\")\n        translate([i, 0, depth/2 + 0.1])\n        cube([3, height*0.8, 0.5], center=true);\n    }\n}\n\nmodule logo() {\n    // Simple Nintendo logo placeholder\n    color(\"Red\")\n    translate([0, -height/2 - 3, 0])\n    cube([20, 2, 1], center=true);\n}\n\n// Main assembly\nmain_body();\n\n// Screen\nscreen();\n\n// Left side controls\nd_pad(-width/2 + 15, 0);\nbutton(-width/2 + 25, 15, \"Green\");\nbutton(-width/2 + 25, -15, \"Blue\");\n\n// Right side controls\njoystick(width/2 - 15, 0);\nbutton(width/2 - 25, 15, \"Red\");\nbutton(width/2 - 25, -15, \"Yellow\");\n\n// Shoulder buttons\nshoulder_button(width/2 - 15, 1);\nshoulder_button(-width/2 + 15, 1);\nshoulder_button(width/2 - 15, -1);\nshoulder_button(-width/2 + 15, -1);\n\n// Ports\nports();\n\n// Top vents\ntranslate([0, 0, 0])\nrotate([0, 0, 90])\nvents();\n\n// Logo\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "pocket",
    "openscad_code": "// Pocket game console – realistic, medium-complexity, 3D-printable\n// ~90 mm × 45 mm × 15 mm\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main case shell\nmodule case_shell() {\n    difference() {\n        // Outer rounded shell\n        minkowski() {\n            cube([87, 42, 13], center=true);\n            sphere(r=2, $fn=20);\n        }\n        // Hollow interior\n        translate([0, 0, -1])\n            minkowski() {\n                cube([87-2*wall, 42-2*wall, 13-2*wall], center=true);\n                sphere(r=1.5, $fn=20);\n            }\n        // Cut-outs: USB-C, audio jack, speaker grill\n        // USB-C\n        translate([40, -22, 0])\n            rotate([0, 90, 0])\n                cylinder(h=15, d=8.3, center=true, $fn=30);\n        // 3.5 mm jack\n        translate([25, -22, 0])\n            rotate([0, 90, 0])\n                cylinder(h=15, d=6, center=true, $fn=30);\n        // Speaker grill (array of small holes)\n        for (x=[-35:5:-15])\n            for (y=[-18:3:-12])\n                translate([x, y, -7.5])\n                    cylinder(h=3, d=1, $fn=8);\n    }\n}\n\n// Display screen opening\nmodule screen_opening() {\n    translate([0, 8, 5.9])\n        color(\"black\")\n            cube([60, 30, 0.4], center=true);\n}\n\n// Display panel\nmodule screen() {\n    translate([0, 8, 6.1])\n        color(\"royalblue\")\n            cube([58, 28, 0.2], center=true);\n}\n\n// D-pad\nmodule dpad() {\n    translate([-25, -10, 6]) {\n        color(\"dimgray\")\n            difference() {\n                cube([12, 12, 1.5], center=true);\n                cube([4, 12, 2], center=true);\n                cube([12, 4, 2], center=true);\n            }\n    }\n}\n\n// ABXY buttons\nmodule action_buttons() {\n    translate([25, -10, 6]) {\n        for (p = [[-6, 6], [6, 6], [-6, -6], [6, -6]]) {\n            translate(p)\n                color(\"crimson\")\n                    cylinder(h=1.5, d=6, $fn=20);\n        }\n    }\n}\n\n// Select / Start\nmodule small_buttons() {\n    for (i = [-1:1]) {\n        translate([i*8, -20, 6])\n            color(\"dimgray\")\n                cylinder(h=1, d=4, $fn=16);\n    }\n}\n\n// Power LED indicator\nmodule led() {\n    translate([-40, 15, 6])\n        color(\"lime\")\n            cylinder(h=0.5, d=2, $fn=10);\n}\n\n// Assemble the device\ncase_shell();\nscreen_opening();\nscreen();\ndpad();\naction_buttons();\nsmall_buttons();\nled();",
    "renders": true
  },
  {
    "electronic_device": "slate",
    "openscad_code": "// Slate tablet device - Realistic medium complexity\n// Overall dimensions: 130mm x 80mm x 7mm\n\n// Color definitions\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_body = [0.2, 0.2, 0.2];\ncolor_button = [0.3, 0.3, 0.3];\ncolor_camera = [0.05, 0.05, 0.05];\n\n// Main body\nmodule tablet_body() {\n    color(color_body)\n    difference() {\n        // Main tablet shape with rounded edges\n        hull() {\n            for(x = [-64, 64])\n                for(y = [-39, 39])\n                    translate([x, y, 0])\n                        cylinder(h=7, r=3, $fn=20);\n        }\n        \n        // Screen cutout\n        translate([0, 0, 3.5])\n            cube([110, 60, 8], center=true);\n        \n        // Camera hole\n        translate([-55, 28, 0])\n            cylinder(h=8, r=2.5, $fn=20);\n        \n        // Speaker holes top\n        for(i = [-2:2])\n            translate([i*8, -36, 0])\n                cylinder(h=8, r=1, $fn=8);\n        \n        // Speaker holes bottom\n        for(i = [-2:2])\n            translate([i*8, 36, 0])\n                cylinder(h=8, r=1, $fn=8);\n    }\n}\n\n// Screen assembly\nmodule screen() {\n    color(color_screen)\n    difference() {\n        // Screen glass\n        translate([0, 0, 3.5])\n            cube([108, 58, 0.5], center=true);\n        \n        // Bezel area\n        translate([0, 0, 3.9])\n            cube([106, 56, 0.5], center=true);\n    }\n    \n    // Screen display area\n    color([0.05, 0.05, 0.05])\n    translate([0, 0, 3.8])\n        cube([104, 54, 0.1], center=true);\n}\n\n// Home button\nmodule home_button() {\n    color(color_button)\n    difference() {\n        // Button base\n        translate([0, -32, 3.5])\n            cylinder(h=1, r=4.5, $fn=20);\n        \n        // Button depression\n        translate([0, -32, 4.6])\n            cylinder(h=1, r=3.5, $fn=20);\n    }\n}\n\n// Volume buttons\nmodule volume_buttons() {\n    color(color_body)\n    translate([-64.5, 15, 3.5])\n        cube([3, 8, 1.5]);\n    translate([-64.5, 0, 3.5])\n        cube([3, 8, 1.5]);\n}\n\n// Power button\nmodule power_button() {\n    color(color_body)\n    translate([64.5, 10, 3.5])\n        cube([3, 15, 1.5]);\n}\n\n// Camera module\nmodule camera() {\n    color(color_camera)\n    translate([-55, 28, 7.5])\n        cylinder(h=1, r=2.5, $fn=20);\n    \n    // Camera lens detail\n    color([0.9, 0.9, 0.9])\n    translate([-55, 28, 8])\n        cylinder(h=0.5, r=1.5, $fn=20);\n}\n\n// Charging port\nmodule charging_port() {\n    color([0.15, 0.15, 0.15])\n    translate([0, -39.5, 1])\n        cube([12, 2, 1.5]);\n}\n\n// Assemble the tablet\ntablet_body();\nscreen();\nhome_button();\nvolume_buttons();\npower_button();\ncamera();\ncharging_port();",
    "renders": true
  },
  {
    "electronic_device": "convertible",
    "openscad_code": "// Convertible tablet-laptop 2-in-1 device\n// Overall size: ~80mm x 55mm x 6mm closed, opens to ~80mm x 110mm x 3mm\n\n// Device colors\ncolorScreen = [0.1,0.1,0.1];\ncolorBody = [0.8,0.8,0.8];\ncolorKeys = [0.2,0.2,0.2];\ncolorPorts = [0.15,0.15,0.15];\n\n// Main assembly\nmodule convertible_device() {\n    // Tablet/screen half\n    translate([0,0,3]) {\n        difference() {\n            color(colorBody) cube([80,55,6], center=true);\n            \n            // Beveled edges\n            translate([0,0,1]) scale([0.9,0.9,1]) cube([80,55,6], center=true);\n            \n            // Screen recess\n            translate([0,0,2.9]) cube([70,45,0.5], center=true);\n        }\n        \n        // Screen\n        color(colorScreen) translate([0,0,3]) cube([68,43,0.2], center=true);\n        \n        // Camera\n        color(colorScreen) translate([0,23.5,6.2]) cylinder(h=0.5, d=3, $fn=20);\n    }\n    \n    // Keyboard base half\n    translate([0,-55,0]) rotate([180,0,0]) {\n        difference() {\n            color(colorBody) cube([80,55,3], center=true);\n            \n            // Beveled edges\n            translate([0,0,-0.5]) scale([0.9,0.9,1]) cube([80,55,3], center=true);\n            \n            // Keyboard cutout\n            translate([0,5,0]) cube([70,35,2], center=true);\n        }\n        \n        // Keyboard keys\n        for(x=[-30:15:30]) {\n            for(y=[-15:7.5:15]) {\n                translate([x,y+5,1.6]) color(colorKeys) cube([12,5,0.4], center=true);\n            }\n        }\n        \n        // Trackpad\n        color(colorKeys) translate([0,-12.5,1.6]) cube([30,18,0.2], center=true);\n        \n        // USB-C ports\n        translate([38,0,0]) {\n            color(colorPorts) cube([4,3,1.5], center=true);\n            translate([0,-4,0]) color(colorPorts) cube([4,3,1.5], center=true);\n        }\n        \n        // Hinge mechanism\n        translate([0,27.5,0]) {\n            difference() {\n                cube([75,5,3], center=true);\n                for(i=[-30:15:30]) {\n                    translate([i,0,1.5]) cylinder(h=5, d=3, center=true, $fn=20);\n                }\n            }\n        }\n    }\n    \n    // Power button\n    color(colorPorts) translate([37.5,27.5,6.3]) cylinder(h=1, d=4, $fn=20);\n    \n    // Volume buttons\n    color(colorPorts) translate([-37.5,25,6.3]) cube([2,8,1], center=true);\n    translate([-37.5,15,6.3]) cube([2,8,1], center=true);\n}\n\n// Display assembled device\nconvertible_device();",
    "renders": true
  },
  {
    "electronic_device": "detachable",
    "openscad_code": "// Detachable USB-C flash drive (realistic style, medium complexity)\n\n$fn = 36;\n\n// Main colors\ncolor_casing = [0.2, 0.2, 0.2];  // Dark gray\ncolor_metal = [0.6, 0.6, 0.6];   // Metallic\ncolor_plastic = [0.1, 0.1, 0.1]; // Black plastic\ncolor_led = [0.9, 0.1, 0.1];     // Red LED\ncolor_label = [0.95, 0.95, 0.95]; // White label\n\n// Overall dimensions\ndrive_length = 60;\ndrive_width = 18;\ndrive_height = 8;\nusb_length = 12;\nusb_width = 8.4;\nusb_height = 2.6;\n\n// Main body\nmodule drive_body() {\n    difference() {\n        // Main casing\n        color(color_casing)\n        translate([0, 0, drive_height/2])\n            cube([drive_length, drive_width, drive_height], center=true);\n        \n        // Keyring hole\n        translate([drive_length/2 - 5, 0, drive_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=drive_width, d=3, center=true);\n        \n        // Brand label recess\n        translate([0, 0, drive_height/2 + 0.05])\n            cube([20, 8, 0.3], center=true);\n    }\n}\n\n// USB-C connector\nmodule usb_connector() {\n    // Metal shell\n    color(color_metal)\n    translate([drive_length/2 + usb_length/2, 0, 0])\n        cube([usb_length, usb_width, usb_height], center=true);\n    \n    // Plastic insert\n    color(color_plastic)\n    translate([drive_length/2 + usb_length/2, 0, 0])\n        cube([usb_length - 0.5, usb_width - 0.8, usb_height - 0.8], center=true);\n    \n    // Contact pads\n    for(i = [-3:1:3]) {\n        color(color_metal)\n        translate([drive_length/2 + usb_length - 1.5, i*1.1, usb_height/2 - 0.3])\n            cube([2, 0.6, 0.2]);\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    color(color_led)\n    translate([-drive_length/2 + 3, 0, drive_height/2 + 0.3])\n        sphere(d=1.5);\n}\n\n// Brand label\nmodule brand_label() {\n    color(color_label)\n    translate([0, 0, drive_height/2 + 0.2])\n        cube([18, 6, 0.1], center=true);\n}\n\n// Grip texture\nmodule grip_texture() {\n    for(i = [-3:1:3]) {\n        color(color_casing)\n        translate([-drive_length/2 + 10 + i*2, 0, drive_height/2 - 0.5])\n            cube([1, drive_width - 2, 0.5]);\n    }\n}\n\n// Assembly\ndrive_body();\nusb_connector();\nled_indicator();\nbrand_label();\ngrip_texture();",
    "renders": true
  },
  {
    "electronic_device": "allinone",
    "openscad_code": "// All-in-One Mini PC (80mm x 60mm x 35mm)\n// 3D printable with no supports, includes screen, ports, vents and stand\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        color([0.2, 0.2, 0.25])\n        cube([80, 60, 35], center=true);\n        \n        // Hollow inside\n        translate([0, 0, 2.5])\n        color([0.2, 0.2, 0.25])\n        cube([74, 54, 35], center=true);\n    }\n}\n\n// Front screen area\nmodule screen() {\n    // Screen bezel\n    difference() {\n        translate([0, 0, 18])\n        color([0.1, 0.1, 0.1])\n        cube([70, 42, 2], center=true);\n        \n        // Actual screen\n        translate([0, 0, 19])\n        color([0, 0, 0])\n        cube([64, 36, 0.5], center=true);\n    }\n    \n    // Power LED indicator\n    translate([-25, 20, 19.5])\n    color([0.1, 1, 0.1])\n    sphere(d=2);\n}\n\n// Rear ports panel\nmodule ports() {\n    // USB ports\n    for(x = [-25, -15, -5, 5, 15, 25]) {\n        translate([x, 0, 0])\n        cylinder(h=8, d=6, center=true);\n    }\n    \n    // HDMI port\n    translate([0, -25, 0])\n    color([0.1, 0.1, 0.1])\n    cube([12, 8, 6], center=true);\n    \n    // Power port\n    translate([30, -25, 0])\n    cylinder(h=8, d=8, center=true);\n}\n\n// Cooling vents\nmodule vents() {\n    for(y = [-20, -10, 0, 10, 20]) {\n        translate([0, y, -17.5])\n        color([0.15, 0.15, 0.15])\n        cube([76, 2, 2], center=true);\n    }\n}\n\n// Stand feet\nmodule feet() {\n    for(x = [-30, 30]) {\n        for(y = [-25, 25]) {\n            translate([x, y, -19])\n            color([0.3, 0.3, 0.3])\n            cylinder(h=3, d=6);\n        }\n    }\n}\n\n// Logo embossing\nmodule logo() {\n    translate([35, 25, 19])\n    color([0.8, 0.8, 0.8])\n    linear_extrude(height=0.5)\n    text(\"AIO\", size=4);\n}\n\n// Assembly\nbody();\nscreen();\n\n// Rear features\ntranslate([0, 30, 0])\nrotate([90, 0, 0])\nports();\n\nvents();\nfeet();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "stick",
    "openscad_code": "// Stick-style USB flash drive - Realistic medium complexity\n// Dimensions: 58mm x 19mm x 9mm\n\n$fn = 32;\n\n// Main colors\ncolor_body = \"silver\";\ncolor_cap = \"darkblue\";\ncolor_connector = \"gold\";\ncolor_led = \"red\";\n\n// Main body assembly\nmodule usb_stick() {\n    union() {\n        // Main body shell\n        color(color_body)\n        translate([0, 0, 4.5])\n        rounded_box([58, 19, 9], 2);\n        \n        // Keyring hole\n        color(color_body)\n        translate([50, 0, 4.5])\n        rotate([90, 0, 0])\n        cylinder(h = 20, d = 4, center = true);\n        \n        // LED indicator\n        color(color_led)\n        translate([5, 0, 8.5])\n        sphere(d = 2);\n        \n        // USB connector\n        color(color_connector)\n        translate([-33, 0, 3.5])\n        usb_connector();\n        \n        // Cap\n        color(color_cap)\n        translate([-41, 0, 4.5])\n        usb_cap();\n        \n        // Grip texture\n        grip_texture();\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(size, r) {\n    hull() {\n        for(dx = [-0.5, 0.5], dy = [-0.5, 0.5], dz = [-0.5, 0.5]) {\n            translate([dx * (size[0] - 2*r), dy * (size[1] - 2*r), dz * (size[2] - 2*r)])\n            sphere(r = r);\n        }\n    }\n}\n\n// USB-A connector\nmodule usb_connector() {\n    difference() {\n        union() {\n            // Outer shell\n            cube([12, 12, 7], center = true);\n            \n            // Inner plastic part\n            color(\"black\")\n            translate([0, 0, -2.5])\n            cube([11.5, 7, 2.5], center = true);\n        }\n        \n        // Contact slots\n        for(i = [0:3]) {\n            translate([-5.5 + i*3.7, 0, -3])\n            cube([1.5, 6, 1], center = true);\n        }\n    }\n}\n\n// USB cap\nmodule usb_cap() {\n    difference() {\n        union() {\n            // Main cap body\n            rounded_box([15, 14, 9], 1.5);\n            \n            // Cap grip ridges\n            for(i = [0:3]) {\n                translate([0, 0, -3.5 + i*2])\n                cube([15.1, 14.2, 0.5], center = true);\n            }\n        }\n        \n        // USB socket cavity\n        translate([7.5, 0, 0])\n        cube([12.5, 12.1, 7.1], center = true);\n    }\n}\n\n// Grip texture pattern\nmodule grip_texture() {\n    color(\"gray\")\n    for(i = [0:8]) {\n        translate([10 + i*4.5, 0, 9])\n        rotate([90, 0, 0])\n        cylinder(h = 0.5, d = 1.5);\n    }\n}\n\n// Assembly\nusb_stick();",
    "renders": true
  },
  {
    "electronic_device": "compute",
    "openscad_code": "// Raspberry Pi 4 Model B – 3D-printable, medium-complexity replica\n// Overall footprint ~85 mm × 55 mm × 20 mm\n\n// Wall thickness chosen for FDM printing (1.2 mm)\nwall = 1.2;\n\n// Main board dimensions\npcb_w = 85;\npcb_d = 56;\npcb_t = 1.6;\n\n// USB / Ethernet row height\nio_h = 15;\n\nmodule board_shape() {\n    // Rounded corners via hull of cylinders\n    hull() {\n        for (x = [pcb_w/2 - 3, -(pcb_w/2 - 3)])\n            for (y = [pcb_d/2 - 3, -(pcb_d/2 - 3)])\n                translate([x, y, 0])\n                    cylinder(r=3, h=pcb_t, $fn=20);\n    }\n}\n\n// PCB green soldermask\ncolor(\"darkgreen\")\n    board_shape();\n\n// Top-side copper lands (just visual)\nfor (xy = [[-30, 20], [-30, 10], [-30, 0], [-30, -10], [-30, -20]])\n    translate([xy[0], xy[1], pcb_t + 0.01])\n        color(\"copper\")\n            cube([3, 3, 0.05], center=true);\n\n// BCM SoC with metal lid\ntranslate([0, 12, pcb_t])\n    color(\"silver\")\n    cube([15, 15, 1.4], center=true);\n\n// 4 × USB2/3 ports\nmodule usb_port() {\n    difference() {\n        color(\"black\")\n            cube([12, 14, 10]);\n        // Opening\n        translate([1, -wall, -wall])\n            cube([10, 16, 12]);\n    }\n}\n\nfor (i = [0:3]) {\n    translate([-pcb_w/2 + 10 + i*15, -pcb_d/2 - 7, 0])\n        usb_port();\n}\n\n// Ethernet jack next to USBs\ntranslate([-pcb_w/2 + 73, -pcb_d/2 - 7, 0])\n    color(\"black\")\n    difference() {\n        cube([15, 14, 10]);\n        translate([1, -wall, -wall])\n            cube([13, 16, 12]);\n    }\n\n// GPIO 40-pin header\nmodule header() {\n    for (i = [0:19])\n        translate([i*2.54 - 19*2.54/2, 0, 0])\n            cylinder(h=5, r=0.6, $fn=8);\n}\n\ntranslate([0, 23, pcb_t])\n    color(\"black\")\n        header();\n\n// Micro-SD slot\ntranslate([pcb_w/2 - 14, 0, 0])\n    difference() {\n        color(\"black\")\n            cube([12, 2, 3]);\n        translate([wall, -wall, -wall])\n            cube([10 - 2*wall, 2 + 2*wall, 5 + 2*wall]);\n    }\n\n// USB-C power jack\ntranslate([pcb_w/2 - 7, -pcb_d/2 - 7, 0])\n    difference() {\n        color(\"black\")\n            cube([8, 7, 3]);\n        translate([wall, -wall, -wall])\n            cube([6, 7 + 2*wall, 5]);\n    }\n\n// HDMI micro connectors\nmodule hdmi() {\n    difference() {\n        color(\"black\")\n            cube([14, 7, 4]);\n        translate([wall, -wall, -wall])\n            cube([12, 7 + 2*wall, 6]);\n    }\n}\n\ntranslate([-pcb_w/2 + 8, pcb_d/2 + 3.5, 0])\n    hdmi();\n\ntranslate([-pcb_w/2 + 25, pcb_d/2 + 3.5, 0])\n    hdmi();\n\n// Activity LEDs\ntranslate([10, -20, pcb_t + 0.1])\n    color(\"red\")\n        sphere(r=0.7, $fn=8);\n\ntranslate([14, -20, pcb_t + 0.1])\n    color(\"green\")\n        sphere(r=0.7, $fn=8);\n\n// Mounting holes\nmodule hole() {\n    translate([0, 0, -0.1])\n        cylinder(h=pcb_t + 0.2, r=1.5, $fn=20);\n}\n\nfor (x = [-58/2, 58/2])\n    for (y = [-49/2, 49/2])\n        translate([x, y, 0])\n            difference() {\n                board_shape();\n                hole();\n            }",
    "renders": true
  },
  {
    "electronic_device": "device",
    "openscad_code": "color(\"silver\") difference() {\n    // Main body\n    translate([0,0,10]) cube([75,150,20], center=true);\n    \n    // Screen recess\n    translate([0,30,20.1]) cube([65,80,2], center=true);\n    \n    // Camera lens recess\n    translate([25,60,20.1]) cylinder(h=2, r=4, $fn=32);\n    \n    // Speaker grill holes\n    for (x=[-30:10:30]) {\n        for (y=[-65:5:-45]) {\n            translate([x,y,20.1]) cylinder(h=2, r=1, $fn=16);\n        }\n    }\n    \n    // Charging port\n    translate([0,-75,10]) cube([10,5,8], center=true);\n    \n    // Headphone jack\n    translate([-20,-75,10]) cylinder(h=5, r=3.5, center=true);\n}\n\n// Screen glass\ncolor(\"black\") translate([0,30,21]) cube([67,82,1], center=true);\n\n// Home button\ncolor(\"gray20\") translate([0,-35,21]) cylinder(h=1, r=7, $fn=32);\n\n// Volume buttons\ncolor(\"gray40\") {\n    translate([-38,20,20]) cube([3,15,6], center=true);\n    translate([-38,5,20]) cube([3,15,6], center=true);\n}\n\n// Power button\ncolor(\"gray40\") translate([38,20,20]) cube([3,25,6], center=true);\n\n// Camera lens\ncolor(\"black\") translate([25,60,21]) cylinder(h=1, r=3.5, $fn=32);\n\n// Camera ring\ncolor(\"gray30\") difference() {\n    translate([25,60,21.5]) cylinder(h=1, r=5, $fn=32);\n    translate([25,60,21.4]) cylinder(h=1.2, r=3.6, $fn=32);\n}\n\n// Flash LED\ncolor(\"yellow\") translate([-25,60,21]) cylinder(h=1, r=2, $fn=16);\n\n// Logo placeholder\ncolor(\"gray20\") translate([0,15,21]) cube([12,6,0.5], center=true);\n\n// Rounded corners using spheres\nmodule rounded_corner(x,y,z) {\n    translate([x,y,z]) sphere(r=10, $fn=16);\n}\n\n// Add rounded edges\nunion() {\n    translate([-37.5,75,20]) rotate([90,0,0]) cylinder(h=75, r=10, center=true);\n    translate([37.5,75,20]) rotate([90,0,0]) cylinder(h=75, r=10, center=true);\n    translate([-37.5,-75,20]) rotate([90,0,0]) cylinder(h=75, r=10, center=true);\n    translate([37.5,-75,20]) rotate([90,0,0]) cylinder(h=75, r=10, center=true);\n}",
    "renders": true
  },
  {
    "electronic_device": "phone",
    "openscad_code": "// Realistic Phone Model - 3D Printable\n// Dimensions in mm, scaled for 3D printing (1:1 scale)\n\n// Main color scheme\nscreen_color = [0, 0, 0];\nbody_color = [0.2, 0.2, 0.2];\nbutton_color = [0.1, 0.1, 0.1];\ncamera_color = [0.05, 0.05, 0.05];\nspeaker_color = [0.15, 0.15, 0.15];\n\n// Overall dimensions\nphone_length = 140;\nphone_width = 68;\nphone_thickness = 7.8;\nwall_thickness = 1.2;\n\n// Screen dimensions\nscreen_length = 125;\nscreen_width = 60;\nscreen_depth = 0.5;\n\n// Camera module\ncamera_diameter = 12;\ncamera_height = 1.5;\ncamera_offset_x = -phone_length/2 + 25;\ncamera_offset_y = phone_width/2 - 15;\n\n// Flash LED\nflash_diameter = 4;\nflash_height = 0.8;\nflash_offset_x = camera_offset_x + 20;\n\n// Buttons\nbutton_width = 3;\nbutton_height = 12;\nbutton_depth = 1;\n\n// Speaker grill holes\ngrill_holes = 12;\ngrill_hole_diameter = 1;\ngrill_length = 30;\ngrill_width = 4;\n\n// USB-C port\nusb_width = 8;\nusb_height = 2.4;\nusb_depth = 3;\n\n// Main phone body\nmodule phone_body() {\n    difference() {\n        // Main body with rounded edges\n        union() {\n            cube([phone_length, phone_width, phone_thickness], center=true);\n            // Rounded corners using spheres\n            translate([phone_length/2-wall_thickness, phone_width/2-wall_thickness, 0])\n                sphere(r=wall_thickness);\n            translate([-phone_length/2+wall_thickness, phone_width/2-wall_thickness, 0])\n                sphere(r=wall_thickness);\n            translate([phone_length/2-wall_thickness, -phone_width/2+wall_thickness, 0])\n                sphere(r=wall_thickness);\n            translate([-phone_length/2+wall_thickness, -phone_width/2+wall_thickness, 0])\n                sphere(r=wall_thickness);\n        }\n        \n        // Screen cutout\n        translate([0, 0, phone_thickness/2 - screen_depth/2])\n            cube([screen_length, screen_width, screen_depth + 0.1], center=true);\n            \n        // Camera hole\n        translate([camera_offset_x, camera_offset_y, phone_thickness/2])\n            cylinder(h=camera_height + 0.2, r=camera_diameter/2, center=true);\n            \n        // Flash hole\n        translate([flash_offset_x, camera_offset_y, phone_thickness/2])\n            cylinder(h=flash_height + 0.2, r=flash_diameter/2, center=true);\n    }\n}\n\n// Screen assembly\nmodule phone_screen() {\n    color(screen_color)\n    translate([0, 0, phone_thickness/2 - screen_depth/2])\n        cube([screen_length, screen_width, screen_depth], center=true);\n}\n\n// Camera module\nmodule camera_module() {\n    color(camera_color)\n    translate([camera_offset_x, camera_offset_y, phone_thickness/2 - camera_height/2])\n        cylinder(h=camera_height, r=camera_diameter/2, center=true);\n    \n    // Camera lens detail\n    color([0, 0, 0])\n    translate([camera_offset_x, camera_offset_y, phone_thickness/2 - camera_height/2])\n        cylinder(h=camera_height + 0.1, r=camera_diameter/3, center=true);\n}\n\n// Flash LED\nmodule flash_led() {\n    color([1, 1, 0.8])\n    translate([flash_offset_x, camera_offset_y, phone_thickness/2 - flash_height/2])\n        cylinder(h=flash_height, r=flash_diameter/2, center=true);\n}\n\n// Side buttons\nmodule side_buttons() {\n    color(button_color)\n    // Volume buttons\n    translate([phone_length/2 - button_width/2, 0, phone_thickness/4])\n        cube([button_width, button_height, button_depth], center=true);\n    translate([phone_length/2 - button_width/2, -phone_width/4, phone_thickness/4])\n        cube([button_width, button_height, button_depth], center=true);\n    \n    // Power button\n    translate([-phone_length/2 + button_width/2, 0, phone_thickness/4])\n        cube([button_width, button_height * 1.5, button_depth], center=true);\n}\n\n// Speaker grill\nmodule speaker_grill() {\n    color(speaker_color)\n    translate([0, phone_width/2 - grill_width/2 - 2, -phone_thickness/2 + grill_width/2])\n        cube([grill_length, grill_width, wall_thickness], center=true);\n    \n    // Grill holes\n    for(i = [0:grill_holes-1]) {\n        translate([-grill_length/2 + (i+0.5)*(grill_length/grill_holes), \n                   phone_width/2 - 2, -phone_thickness/2 - 0.1])\n            cylinder(h=wall_thickness + 0.2, r=grill_hole_diameter/2, center=true);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    color(button_color)\n    translate([0, -phone_width/2 + usb_width/2 + 2, -phone_thickness/2 + usb_height/2])\n        cube([usb_width, usb_depth, usb_height], center=true);\n}\n\n// Main assembly\ncolor(body_color) phone_body();\ncolor(screen_color) phone_screen();\ncolor(camera_color) camera_module();\nflash_led();\ncolor(button_color) side_buttons();\nspeaker_grill();\nusb_port();",
    "renders": true
  },
  {
    "electronic_device": "pager",
    "openscad_code": "// OpenSCAD code for a realistic 1990s-style pager\n// Medium complexity, 3D printable, no overhangs\n\n// Overall dimensions (mm)\nlength = 75;\nwidth = 45;\nheight = 18;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main body module\nmodule pager_body() {\n    difference() {\n        // Outer rounded shell\n        union() {\n            rounded_box(length, width, height, 3);\n        }\n        \n        // Hollow out interior\n        translate([0,0,wall])\n            rounded_box(length-wall*2, width-wall*2, height-wall, 2.5);\n        \n        // Screen cutout\n        translate([0, 12, height])\n            cube([35, 12, 2], center=true);\n        \n        // Button cutouts\n        for (i = [0:2]) {\n            translate([-20 + i*20, -12, height])\n                cylinder(h=2, r=4, center=true);\n        }\n    }\n}\n\n// Rounded box helper module\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        for (x = [-1, 1])\n            for (y = [-1, 1])\n                for (z = [-1, 1])\n                    translate([x*(l/2-r), y*(w/2-r), z*(h/2-r)])\n                        sphere(r=r);\n    }\n}\n\n// LCD screen module\nmodule lcd_screen() {\n    color([0.2, 0.2, 0.2])\n    translate([0, 12, height-0.1])\n        cube([33, 10, 0.5], center=true);\n    \n    // LCD display area\n    color([0.1, 0.8, 0.1])\n    translate([0, 12.5, height-0.05])\n        cube([30, 7, 0.3], center=true);\n}\n\n// Button module\nmodule buttons() {\n    for (i = [0:2]) {\n        // Button\n        color([0.1, 0.1, 0.1])\n        translate([-20 + i*20, -12, height-0.1])\n            cylinder(h=1.5, r=3.5, center=true);\n        \n        // Button top\n        color([0.8, 0.8, 0.8])\n        translate([-20 + i*20, -12, height+0.1])\n            cylinder(h=0.5, r=3, center=true);\n    }\n}\n\n// Side button\nmodule side_button() {\n    color([0.3, 0.3, 0.3])\n    translate([length/2+1, 0, height/2])\n        rotate([0, 90, 0])\n            cylinder(h=8, r=2, center=true);\n}\n\n// Antenna stub\nmodule antenna() {\n    color([0.1, 0.1, 0.1])\n    translate([0, width/2+3, height-5])\n        cylinder(h=8, r=1.5);\n}\n\n// Belt clip\nmodule belt_clip() {\n    color([0.5, 0.5, 0.5])\n    difference() {\n        translate([0, -width/2-2, height/2])\n            cube([40, 4, 12], center=true);\n        \n        // Clip opening\n        translate([0, -width/2-4, height/2-2])\n            cube([30, 4, 8], center=true);\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    color([0.8, 0, 0])\n    translate([length/2-8, width/2-3, height-0.1])\n        cylinder(h=0.5, r=1.5);\n}\n\n// Speaker grill\nmodule speaker_grill() {\n    color([0.2, 0.2, 0.2])\n    translate([0, -18, height-0.1])\n        cube([25, 8, 0.5], center=true);\n    \n    // Grill holes\n    for (x = [-10:5:10])\n        for (y = [-3:2:3]) {\n            translate([x, y-18, height+0.1])\n                cylinder(h=1, r=0.5, center=true);\n        }\n}\n\n// Battery cover\nmodule battery_cover() {\n    color([0.3, 0.3, 0.3])\n    translate([0, 0, 0])\n        cube([length-4, width-4, 1], center=true);\n}\n\n// Assembly\n$fn = 32;\n\n// Main pager assembly\npager_body();\nlcd_screen();\nbuttons();\nside_button();\nantenna();\nbelt_clip();\nled_indicator();\nspeaker_grill();\ntranslate([0, 0, 0.5]) battery_cover();",
    "renders": true
  },
  {
    "electronic_device": "walkie",
    "openscad_code": "// Walkie-Talkie model for 3D printing (realistic style, medium complexity)\n// Overall dimensions ~90 mm tall\n\n// Color definitions\ncolor_case = [0.15, 0.15, 0.15];    // Dark gray\ncolor_body = [0.25, 0.25, 0.25];    // Medium gray\ncolor_screen = [0.05, 0.05, 0.05];  // Black\ncolor_button = [0.1, 0.1, 0.1];     // Dark\ncolor_antenna = [0.4, 0.4, 0.4];    // Light gray\n\n// Main module\nmodule walkie() {\n    difference() {\n        union() {\n            // Main body shell\n            color(color_case)\n            rounded_cube([40, 25, 85], 3);\n            \n            // Speaker grill area\n            color(color_body)\n            translate([0, 13, 30])\n                cube([38, 1, 20], center = true);\n            \n            // Channel knob\n            color(color_case)\n            translate([20, 0, 65])\n                rotate([90, 0, 0])\n                    cylinder(h = 5, r = 6, $fn = 18);\n            \n            // Volume knob\n            color(color_case)\n            translate([-20, 0, 65])\n                rotate([90, 0, 0])\n                    cylinder(h = 5, r = 6, $fn = 18);\n            \n            // PTT button\n            color(color_button)\n            translate([0, -13, 45])\n                rounded_cube([30, 8, 12], 2);\n            \n            // Antenna base\n            color(color_case)\n            translate([0, 13, 85])\n                cylinder(h = 8, r1 = 8, r2 = 6, $fn = 20);\n            \n            // Antenna\n            color(color_antenna)\n            translate([0, 13, 93])\n                cylinder(h = 40, r = 2, $fn = 16);\n                \n            // Clip mount\n            color(color_case)\n            translate([0, -13, 60])\n                cube([3, 10, 25], center = true);\n        }\n        \n        // Screen cutout\n        color(color_screen)\n        translate([0, 12.5, 55])\n            cube([30, 0.5, 15], center = true);\n            \n        // Speaker holes\n        for (i = [-2:2]) {\n            translate([i * 7, 13.5, 30])\n                cube([3, 1, 2], center = true);\n        }\n        \n        // Microphone holes\n        for (i = [-1:1]) {\n            translate([i * 5, 13.5, 10])\n                cube([2, 1, 2], center = true);\n        }\n        \n        // LED indicator hole\n        translate([15, 12.5, 55])\n            cylinder(h = 2, r = 1.5, $fn = 8);\n            \n        // Charging port\n        translate([0, 13, 5])\n            cube([8, 1, 4], center = true);\n    }\n    \n    // Screen detail\n    color([0, 0.8, 0])\n    translate([0, 12.4, 55])\n        cube([28, 0.1, 13], center = true);\n        \n    // Buttons detail\n    color(color_button)\n    for (j = [0:2]) {\n        translate([-10 + j * 10, -13.5, 55])\n            rounded_cube([6, 1, 3], 1);\n    }\n}\n\n// Helper module for rounded cubes\nmodule rounded_cube(size, radius) {\n    x = size[0]; y = size[1]; z = size[2];\n    hull() {\n        translate([radius - x/2, radius - y/2, radius - z/2])\n            sphere(r = radius, $fn = 16);\n        translate([x/2 - radius, radius - y/2, radius - z/2])\n            sphere(r = radius, $fn = 16);\n        translate([radius - x/2, y/2 - radius, radius - z/2])\n            sphere(r = radius, $fn = 16);\n        translate([x/2 - radius, y/2 - radius, radius - z/2])\n            sphere(r = radius, $fn = 16);\n        translate([radius - x/2, radius - y/2, z/2 - radius])\n            sphere(r = radius, $fn = 16);\n        translate([x/2 - radius, radius - y/2, z/2 - radius])\n            sphere(r = radius, $fn = 16);\n        translate([radius - x/2, y/2 - radius, z/2 - radius])\n            sphere(r = radius, $fn = 16);\n        translate([x/2 - radius, y/2 - radius, z/2 - radius])\n            sphere(r = radius, $fn = 16);\n    }\n}\n\n// Render the walkie\nwalkie();",
    "renders": true
  },
  {
    "electronic_device": "radio",
    "openscad_code": "// Portable FM Radio - Realistic Style\n// Dimensions: 90x55x25mm\n\n// Main colors\n$fn = 64;\n\nmodule main_body() {\n    color(\"darkgray\")\n    difference() {\n        // Main case\n        rounded_box([90, 55, 25], 3);\n        \n        // Speaker grill holes\n        for(x = [-30, -20, -10, 0, 10, 20, 30]) {\n            for(y = [-15, -10, -5, 0, 5, 10, 15]) {\n                translate([x, y, 12.5])\n                    cylinder(h = 2, d = 2, $fn = 16);\n            }\n        }\n        \n        // Battery compartment\n        translate([0, 0, -12.5])\n            cube([40, 25, 2], center = true);\n    }\n}\n\nmodule rounded_box(size, radius) {\n    hull() {\n        for(x = [-1, 1])\n            for(y = [-1, 1])\n                for(z = [-1, 1])\n                    translate([x * (size[0]/2 - radius), y * (size[1]/2 - radius), z * (size[2]/2 - radius)])\n                        sphere(r = radius);\n    }\n}\n\nmodule display() {\n    color(\"black\")\n    translate([0, 10, 12.5])\n        cube([40, 15, 0.5], center = true);\n    \n    // LCD screen\n    color([0.2, 0.2, 0.2])\n    translate([0, 10, 13])\n        cube([38, 13, 0.2], center = true);\n}\n\nmodule buttons() {\n    // Power button\n    color(\"red\")\n    translate([-30, 0, 12.5])\n        cylinder(h = 2, d = 8, $fn = 32);\n    \n    // Volume buttons\n    color(\"lightgray\")\n    translate([25, 5, 12.5])\n        cylinder(h = 2, d = 6, $fn = 32);\n    translate([25, -5, 12.5])\n        cylinder(h = 2, d = 6, $fn = 32);\n    \n    // Tuning buttons\n    color(\"darkblue\")\n    translate([25, 15, 12.5])\n        cube([8, 4, 2], center = true);\n    translate([25, 25, 12.5])\n        cube([8, 4, 2], center = true);\n}\n\nmodule antenna() {\n    color(\"silver\")\n    translate([-45, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 50, d = 2, $fn = 16);\n}\n\nmodule ports() {\n    // Headphone jack\n    color(\"black\")\n    translate([0, -27, 0])\n        cylinder(h = 5, d = 6, $fn = 32);\n    \n    // USB-C port\n    color(\"black\")\n    translate([20, -27, 0])\n        cube([10, 2, 4], center = true);\n}\n\nmodule speaker_grill() {\n    color(\"darkgray\")\n    difference() {\n        translate([-30, 0, 5])\n            cube([60, 30, 2], center = true);\n        \n        // Perforated pattern\n        for(x = [-25:5:25]) {\n            for(y = [-10:5:10]) {\n                translate([x, y, 6])\n                    cylinder(h = 3, d = 1.5, $fn = 16);\n            }\n        }\n    }\n}\n\nmodule battery_cover() {\n    color(\"lightgray\")\n    translate([0, 0, -13])\n        cube([38, 23, 1], center = true);\n    \n    // Thumb grip\n    color(\"black\")\n    translate([15, 0, -12.8])\n        cube([10, 2, 0.5], center = true);\n}\n\n// Assembly\nmain_body();\ndisplay();\nbuttons();\nantenna();\nports();\nspeaker_grill();\nbattery_cover();\n\n// Antenna cap\ncolor(\"silver\")\ntranslate([-45, 0, 50])\n    sphere(d = 3);\n\n// Brand label\ncolor(\"white\")\ntranslate([0, -20, 12.5])\n    cube([25, 5, 0.1], center = true);",
    "renders": true
  },
  {
    "electronic_device": "cell",
    "openscad_code": "// Realistic cell phone model - medium complexity\n// Designed for 3D printing with no overhangs\n\n// Overall dimensions (mm)\nphone_length = 75;\nphone_width = 35;\nphone_thickness = 8;\n\n// Wall thickness for printing\nwall = 1.2;\n\n// Main body - rounded rectangle base\nmodule phone_body() {\n    difference() {\n        // Outer rounded shell\n        minkowski() {\n            color(\"silver\") \n            cube([phone_length, phone_width, phone_thickness], center=true);\n            sphere(2);\n        }\n        \n        // Inner cavity\n        translate([0, 0, -1])\n        minkowski() {\n            color(\"silver\")\n            cube([phone_length-wall*2, phone_width-wall*2, phone_thickness], center=true);\n            sphere(1.5);\n        }\n    }\n}\n\n// Screen display\nmodule screen() {\n    color(\"black\")\n    translate([0, phone_width/4, phone_thickness/2-0.1])\n    cube([phone_length-6, phone_width/2, 0.2], center=true);\n}\n\n// Home button\nmodule home_button() {\n    color(\"gray20\")\n    translate([0, -phone_width/3.5, phone_thickness/2-0.1])\n    cylinder(h=0.3, r=3, $fn=32);\n}\n\n// Volume buttons on side\nmodule volume_buttons() {\n    // Volume up\n    translate([phone_length/2-0.1, 5, phone_thickness/4])\n    color(\"gray30\")\n    cube([0.6, 8, 3]);\n    \n    // Volume down\n    translate([phone_length/2-0.1, -5, phone_thickness/4])\n    color(\"gray30\")\n    cube([0.6, 8, 3]);\n}\n\n// Power button\nmodule power_button() {\n    translate([0, phone_width/2-0.1, phone_thickness/4])\n    color(\"gray30\")\n    rotate([0, 0, 90])\n    cube([0.6, 6, 3]);\n}\n\n// Camera lens\nmodule camera() {\n    // Camera bump\n    color(\"gray10\")\n    translate([phone_length/2-8, phone_width/2-8, phone_thickness/2+0.5])\n    cylinder(h=1, r=4, $fn=32);\n    \n    // Lens\n    color(\"black\")\n    translate([phone_length/2-8, phone_width/2-8, phone_thickness/2+1.6])\n    cylinder(h=0.2, r=2, $fn=32);\n}\n\n// Speaker grill\nmodule speaker() {\n    // Main speaker area\n    color(\"gray15\")\n    translate([0, -phone_width/2+3, phone_thickness/2-0.1])\n    cube([phone_length/3, 2, 0.3]);\n    \n    // Speaker holes\n    for(i = [-6:1:6]) {\n        color(\"black\")\n        translate([i*2, -phone_width/2+3, phone_thickness/2+0.2])\n        cylinder(h=0.5, r=0.3, $fn=8);\n    }\n}\n\n// Charging port\nmodule charging_port() {\n    color(\"black\")\n    translate([0, phone_width/2-0.1, -phone_thickness/4])\n    cube([6, 1, 3]);\n}\n\n// Logo\nmodule logo() {\n    color(\"white\")\n    translate([phone_length/2-12, phone_width/2-12, phone_thickness/2-0.1])\n    linear_extrude(height=0.1)\n    text(\"PHONE\", size=2, halign=\"center\");\n}\n\n// Assemble the phone\nphone_body();\nscreen();\nhome_button();\nvolume_buttons();\npower_button();\ncamera();\nspeaker();\ncharging_port();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "handset",
    "openscad_code": "// Handset Electronic Device - Realistic OpenSCAD Model\n// Medium complexity 3D printable handset design\n\n// Main dimensions\nhandset_length = 85;\nhandset_width = 40;\nhandset_thickness = 12;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main body\nmodule handset_body() {\n    difference() {\n        // Outer shell\n        color(\"silver\")\n        minkowski() {\n            cube([handset_length, handset_width, handset_thickness], center=true);\n            sphere(2);\n        }\n        \n        // Inner cavity\n        translate([0, 0, -1])\n        cube([handset_length-wall*2, handset_width-wall*2, handset_thickness+2], center=true);\n    }\n}\n\n// Speaker grille\nmodule speaker_grille() {\n    translate([handset_length/2 - 15, 0, handset_thickness/2])\n    difference() {\n        color(\"darkgray\")\n        cube([10, 20, 1]);\n        \n        // Grille holes\n        for(y = [-8:4:8]) {\n            translate([5, y, -0.5])\n            cylinder(h=2, d=1.5, $fn=8);\n        }\n    }\n}\n\n// Microphone grille\nmodule microphone_grille() {\n    translate([-handset_length/2 + 15, 0, handset_thickness/2])\n    difference() {\n        color(\"darkgray\")\n        cube([8, 12, 1]);\n        \n        // Grille holes\n        for(y = [-4:3:4]) {\n            translate([4, y, -0.5])\n            cylinder(h=2, d=1.2, $fn=8);\n        }\n    }\n}\n\n// Control buttons\nmodule control_buttons() {\n    // Volume up\n    translate([handset_length/2 - 25, handset_width/2 + 1, 0])\n    rotate([90, 0, 0])\n    color(\"black\")\n    cylinder(h=2, d=6, $fn=16);\n    \n    // Volume down\n    translate([handset_length/2 - 35, handset_width/2 + 1, 0])\n    rotate([90, 0, 0])\n    color(\"black\")\n    cylinder(h=2, d=6, $fn=16);\n    \n    // Mute button\n    translate([handset_length/2 - 45, handset_width/2 + 1, 0])\n    rotate([90, 0, 0])\n    color(\"red\")\n    cylinder(h=2, d=6, $fn=16);\n}\n\n// Status LED\nmodule status_led() {\n    translate([handset_length/2 - 10, -handset_width/2 - 1, 2])\n    rotate([90, 0, 0])\n    color(\"green\")\n    cylinder(h=1, d=3, $fn=8);\n}\n\n// USB-C port\nmodule usb_c_port() {\n    translate([0, -handset_width/2 - 0.5, 0])\n    color(\"black\")\n    cube([8, 2, 3], center=true);\n}\n\n// Antenna indicator\nmodule antenna_indicator() {\n    translate([0, 0, handset_thickness/2 + 0.5])\n    color(\"white\")\n    for(i = [0:3]) {\n        translate([handset_length/2 - 8 - i*3, 0, 0])\n        scale([0.3, 1, 1])\n        sphere(1.5);\n    }\n}\n\n// Brand text area (placeholder)\nmodule brand_area() {\n    translate([0, 0, handset_thickness/2])\n    color(\"gray\")\n    cube([20, 8, 0.5], center=true);\n}\n\n// Assembly\nhandset_body();\nspeaker_grille();\nmicrophone_grille();\ncontrol_buttons();\nstatus_led();\nusb_c_port();\nantenna_indicator();\nbrand_area();",
    "renders": true
  },
  {
    "electronic_device": "communicator",
    "openscad_code": "// Communicator device - realistic style, medium complexity\n// 3D printable with 2mm wall thickness and no overhangs\n\n// Main body dimensions\nbody_w = 50;\nbody_h = 90;\nbody_d = 12;\n\n// Screen dimensions\nscreen_w = 38;\nscreen_h = 25;\nscreen_d = 2;\n\n// Button grid\nbuttons_x = 3;\nbuttons_y = 4;\nbutton_size = 6;\nbutton_spacing = 3;\n\nmodule communicator() {\n    // Main body shell\n    difference() {\n        // Outer rounded body\n        color([0.2, 0.2, 0.2])\n        minkowski() {\n            cube([body_w, body_h, body_d], center=true);\n            sphere(2);\n        }\n        \n        // Hollow center\n        color([0.15, 0.15, 0.15])\n        minkowski() {\n            cube([body_w-4, body_h-4, body_d-2], center=true);\n            sphere(1);\n        }\n    }\n    \n    // Screen recess\n    translate([0, 15, body_d/2-0.1])\n    color([0.05, 0.05, 0.05])\n    cube([screen_w, screen_h, screen_d], center=true);\n    \n    // Glass screen\n    translate([0, 15, body_d/2+0.9])\n    color([0.3, 0.3, 0.5, 0.7])\n    cube([screen_w-2, screen_h-2, 0.5], center=true);\n    \n    // Speaker grill\n    translate([0, 30, body_d/2-0.1])\n    color([0.1, 0.1, 0.1])\n    difference() {\n        cube([35, 8, 1], center=true);\n        for(i = [-15:3:15]) {\n            translate([i, 0, 0])\n            cylinder(h=2, d=1, center=true);\n        }\n    }\n    \n    // Microphone grill\n    translate([0, -30, body_d/2-0.1])\n    color([0.1, 0.1, 0.1])\n    difference() {\n        cube([20, 4, 1], center=true);\n        for(i = [-8:2:8]) {\n            translate([i, 0, 0])\n            cylinder(h=2, d=0.8, center=true);\n        }\n    }\n    \n    // Button array\n    for(x = [0:buttons_x-1]) {\n        for(y = [0:buttons_y-1]) {\n            translate([\n                -((buttons_x-1)*button_spacing)/2 + x*button_spacing,\n                -5 + y*button_spacing,\n                body_d/2\n            ]) {\n                // Button base\n                color([0.1, 0.1, 0.1])\n                cylinder(h=1, d=button_size, center=true);\n                \n                // Button top\n                color([0.3, 0.3, 0.3])\n                translate([0, 0, 0.6])\n                cylinder(h=0.5, d=button_size-1, center=true);\n            }\n        }\n    }\n    \n    // Antenna nub\n    translate([0, body_h/2-5, 0])\n    color([0.4, 0.4, 0.4])\n    cylinder(h=5, d=4, center=true);\n    \n    // Power button\n    translate([-body_w/2-1, 0, 0])\n    color([0.2, 0.2, 0.2])\n    cube([2, 8, 3], center=true);\n    \n    // Volume buttons\n    translate([body_w/2+1, 10, 0])\n    color([0.2, 0.2, 0.2])\n    cube([2, 8, 3], center=true);\n    \n    translate([body_w/2+1, -10, 0])\n    color([0.2, 0.2, 0.2])\n    cube([2, 8, 3], center=true);\n    \n    // Charging port\n    translate([0, -body_h/2+5, -body_d/2])\n    color([0.1, 0.1, 0.1])\n    cube([8, 4, 2], center=true);\n    \n    // LED indicator\n    translate([screen_w/2-3, 15+screen_h/2+2, body_d/2-0.1])\n    color([0, 1, 0, 0.8])\n    cylinder(h=0.5, d=2, center=true);\n}\n\n// Render the communicator\ncommunicator();",
    "renders": true
  },
  {
    "electronic_device": "beacon",
    "openscad_code": "// Medium-complexity realistic beacon device\n// Overall size ~ 85 mm tall, 60 mm wide, 30 mm deep\n\n// Main colors\nbeacon_case = [0.15,0.15,0.15];      // dark grey\nbeacon_accent = [0.25,0.25,0.25];    // mid grey\nbeacon_red = [0.9,0.1,0.1];          // led red\nbeacon_yellow = [0.95,0.75,0.05];    // status led\nbeacon_screen = [0.1,0.1,0.1];       // lcd black\nbeacon_label = [0.95,0.95,0.95];     // white text\n\n// Main body\nmodule beacon_body() {\n    difference() {\n        color(beacon_case)\n            cube([58,28,82], center=true);\n        // Battery compartment cavity\n        translate([0,15.5,25])\n            cube([50,2,40], center=true);\n        // Ventilation slots\n        for (i=[-20:10:20])\n            translate([i,15,0])\n                cube([4,2,80], center=true);\n    }\n}\n\n// Front panel\nmodule front_panel() {\n    difference() {\n        translate([0,0,0])\n            color(beacon_accent)\n            cube([58,1,82], center=true);\n        // LCD window\n        translate([0,-0.6,-10])\n            color(beacon_screen)\n            cube([40,0.2,20], center=true);\n        // Control buttons\n        for (b=[-20,-10,0,10,20])\n            translate([b,-0.6,20])\n                color(beacon_case)\n                cube([6,0.3,6], center=true);\n    }\n}\n\n// Top LED dome\nmodule beacon_dome() {\n    translate([0,0,50])\n    union() {\n        color(beacon_red, 0.6)  // translucent red\n            sphere(d=24, $fn=32);\n        // Internal reflector\n        color([0.9,0.9,0.9])\n            scale([0.8,0.8,0.3])\n                sphere(d=20, $fn=32);\n    }\n}\n\n// Side I/O panel\nmodule io_panel() {\n    translate([30,0,0])\n    rotate([0,90,0])\n    difference() {\n        color(beacon_accent)\n            cube([20,12,2], center=true);\n        // USB-C port\n        translate([5,0,0])\n            cube([8,6,3], center=true);\n        // Power jack\n        translate([-5,0,0])\n            cylinder(h=3, r=4, center=true, $fn=16);\n    }\n}\n\n// Antenna module\nmodule antenna() {\n    translate([0,0,65])\n    union() {\n        color(beacon_case)\n            cylinder(h=18, r=4, $fn=16);\n        color(beacon_accent)\n            translate([0,0,12])\n                sphere(d=8, $fn=16);\n    }\n}\n\n// Status LEDs\nmodule status_leds() {\n    for (pos=[[-20,-14,40],[-10,-14,30],[0,-14,20],[10,-14,10],[20,-14,0]]) {\n        translate(pos)\n            color(beacon_yellow)\n                sphere(d=3, $fn=8);\n    }\n}\n\n// Mounting brackets\nmodule mounts() {\n    for (x=[-25,25])\n    translate([x,0,-42])\n    difference() {\n        color(beacon_case)\n            cube([10,20,4], center=true);\n        translate([0,0,-2])\n            cylinder(h=5, r=2, center=true, $fn=16);\n    }\n}\n\n// Assembly\nbeacon_body();\nfront_panel();\nbeacon_dome();\nantenna();\nio_panel();\nstatus_leds();\nmounts();",
    "renders": true
  },
  {
    "electronic_device": "walkietalkie",
    "openscad_code": "// Realistic Walkie-Talkie Model\n// Medium complexity, 3D printable\n\n// Color constants\nantenna_col = \"silver\";\nbody_col = \"darkgreen\";\nscreen_col = \"black\";\nbutton_col = \"gray\";\nspeaker_col = \"darkgray\";\n\n// Main body\nmodule body() {\n    color(body_col)\n    difference() {\n        // Main shell with rounded edges\n        hull() {\n            translate([0,0,10]) cube([40,20,4], center=true);\n            translate([0,0,-10]) cube([40,20,4], center=true);\n            translate([0,0,0]) cube([36,16,20], center=true);\n        }\n        \n        // Speaker grill holes\n        for(x = [-12:3:12])\n            for(y = [-5:3:5])\n                translate([x,y,-7]) cylinder(h=3,d=1.5,center=true);\n        \n        // Battery compartment\n        translate([0,8,-9]) cube([30,6,2], center=true);\n    }\n}\n\n// Antenna\nmodule antenna() {\n    color(antenna_col)\n    union() {\n        cylinder(h=25, d=4);\n        translate([0,0,12.5]) cylinder(h=15, d=2);\n    }\n}\n\n// LCD Screen\nmodule screen() {\n    color(screen_col)\n    difference() {\n        translate([0,8,2]) cube([25,12,1], center=true);\n        translate([0,8,2.5]) color(\"lime\") cube([20,8,0.1], center=true);\n    }\n}\n\n// Push-to-talk button\nmodule ptt_button() {\n    color(button_col)\n    translate([0,-8,2]) cube([15,8,3], center=true);\n}\n\n// Channel knob\nmodule channel_knob() {\n    color(button_col)\n    difference() {\n        cylinder(h=4, d=8, center=true);\n        for(i = [0:45:315])\n            rotate([0,0,i])\n            translate([3.5,0,2]) cube([1.5,1,4], center=true);\n    }\n}\n\n// Volume knob\nmodule volume_knob() {\n    color(button_col)\n    rotate([90,0,0])\n    translate([0,20,0])\n    difference() {\n        cylinder(h=4, d=8, center=true);\n        for(i = [0:45:315])\n            rotate([0,0,i])\n            translate([3.5,0,2]) cube([1.5,1,4], center=true);\n    }\n}\n\n// Side buttons\nmodule side_buttons() {\n    color(button_col)\n    for(pos = [-8, 0, 8]) {\n        translate([20,pos,3]) rotate([90,0,0]) cylinder(h=3,d=3,center=true);\n    }\n}\n\n// Belt clip\nmodule belt_clip() {\n    color(\"black\")\n    translate([20,0,-5]) {\n        // Clip base\n        cube([2,15,10], center=true);\n        // Spring part\n        translate([1,0,5]) rotate([15,0,0]) cube([2,15,15], center=true);\n    }\n}\n\n// Mic port\nmodule mic_port() {\n    color(\"black\")\n    translate([-20,6,0]) rotate([0,90,0]) cylinder(h=5,d=6,center=true);\n}\n\n// USB port\nmodule usb_port() {\n    color(\"black\")\n    translate([-20,-6,0]) rotate([0,90,0]) cube([5,8,3], center=true);\n}\n\n// LED indicator\nmodule led_indicator() {\n    color(\"red\")\n    translate([15,8,3.5]) sphere(d=2);\n}\n\n// Assemble walkie-talkie\ntranslate([0,0,10]) {\n    // Main body\n    body();\n    \n    // Top antenna\n    translate([0,0,12]) antenna();\n    \n    // Front features\n    translate([0,0,10]) {\n        screen();\n        ptt_button();\n    }\n    \n    // Top knobs\n    translate([8,10,12]) channel_knob();\n    translate([-8,10,12]) volume_knob();\n    \n    // Side buttons\n    side_buttons();\n    \n    // Belt clip on back\n    belt_clip();\n    \n    // Ports on left side\n    mic_port();\n    usb_port();\n    \n    // LED indicator\n    led_indicator();\n}",
    "renders": true
  },
  {
    "electronic_device": "hotspot",
    "openscad_code": "// Hotspot Electronic Device - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thicknesses and no overhangs\n\n// Main dimensions (mm)\ndevice_width = 80;\ndevice_height = 15;\ndevice_depth = 80;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5;\n\n// Main body with rounded edges\nmodule main_body() {\n    difference() {\n        // Outer rounded shell\n        minkowski() {\n            cube([device_width-4, device_height-4, device_depth-4], center=true);\n            sphere(r=2);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([device_width-7, device_height-7, device_depth-7], center=true);\n            sphere(r=1.5);\n        }\n    }\n}\n\n// Top display area\nmodule display() {\n    color([0.2, 0.2, 0.2]) {\n        translate([0, device_height/2 - 0.5, 15]) {\n            cube([35, 0.5, 20], center=true);\n        }\n    }\n    \n    // Display screen\n    color([0.1, 0.1, 0.1]) {\n        translate([0, device_height/2 - 0.8, 15]) {\n            cube([30, 0.2, 15], center=true);\n        }\n    }\n}\n\n// LED indicators\nmodule indicators() {\n    for(i = [-1, 0, 1]) {\n        translate([i * 8, device_height/2 - 0.5, 25]) {\n            color([0, 1, 0]) {\n                cylinder(h=0.5, r=2, $fn=16);\n            }\n            // LED housing\n            color([0.3, 0.3, 0.3]) {\n                cylinder(h=1, r=2.5, $fn=16);\n            }\n        }\n    }\n}\n\n// Power button\nmodule power_button() {\n    translate([-device_width/2 + 10, 0, 0]) {\n        difference() {\n            // Button housing\n            color([0.4, 0.4, 0.4]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=5, r=3, $fn=32);\n                }\n            }\n            // Button itself\n            translate([0, 0, 1]) {\n                color([0.2, 0.2, 0.2]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=3, r=2, $fn=32);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// USB-C port\nmodule usbc_port() {\n    translate([device_width/2 - 5, 0, -20]) {\n        difference() {\n            // Port housing\n            color([0.3, 0.3, 0.3]) {\n                cube([8, 4, 6], center=true);\n            }\n            // Port opening\n            cube([6, 2, 4], center=true);\n        }\n    }\n}\n\n// Ventilation holes pattern\nmodule ventilation_holes() {\n    color([0.15, 0.15, 0.15]) {\n        for(y = [-20:10:20]) {\n            for(x = [-30:10:30]) {\n                translate([x, -device_height/2 + 0.5, y]) {\n                    cylinder(h=1, r=1.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Antenna modules (4 corners)\nmodule antennas() {\n    for(x = [-1, 1]) {\n        for(z = [-1, 1]) {\n            translate([x * 35, device_height/2 - 2, z * 35]) {\n                color([0.5, 0.5, 0.5]) {\n                    cylinder(h=3, r=4, $fn=16);\n                }\n                // Antenna lines\n                color([0.1, 0.1, 0.1]) {\n                    for(i = [0:45:315]) {\n                        rotate([0, 90, i]) {\n                            translate([0, 0, 2]) {\n                                cube([0.5, 0.5, 3], center=true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    for(x = [-1, 1]) {\n        for(z = [-1, 1]) {\n            translate([x * 30, -device_height/2, z * 30]) {\n                color([0.2, 0.2, 0.2]) {\n                    cylinder(h=1, r=3, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Brand label area\nmodule brand_label() {\n    translate([0, -device_height/2 + 0.5, 0]) {\n        color([0.1, 0.1, 0.1]) {\n            cube([20, 0.5, 8], center=true);\n        }\n    }\n}\n\n// Assembly\ncolor([0.8, 0.8, 0.8]) {\n    main_body();\n}\ndisplay();\nindicators();\npower_button();\nusbc_port();\nventilation_holes();\nantennas();\nfeet();\nbrand_label();",
    "renders": true
  },
  {
    "electronic_device": "mesh",
    "openscad_code": "// Realistic Mesh Router Device\n// Medium complexity 3D printable model\n\n// Global parameters\nrouter_width = 80;\nrouter_height = 25;\nrouter_depth = 120;\n\n// Main body\nmodule router_body() {\n    color(\"#2B2B2B\")\n    difference() {\n        // Main chassis\n        translate([0, 0, router_height/2])\n            cube([router_width, router_depth, router_height], center=true);\n        \n        // Ventilation slots on top\n        for(x = [-30:10:30]) {\n            translate([x, -50, 12])\n                cube([8, 100, 2]);\n        }\n        \n        // Front LED indicators\n        translate([0, 60, 5])\n            cube([router_width-20, 2, 10], center=true);\n    }\n}\n\n// WiFi antennas\nmodule antennas() {\n    color(\"#1A1A1A\")\n    for(side = [-1, 1]) {\n        translate([side * 45, -55, 15])\n            rotate([0, 15*side, 0])\n            cylinder(h=30, d1=4, d2=2);\n    }\n}\n\n// Front panel\nmodule front_panel() {\n    color(\"#E0E0E0\")\n    difference() {\n        // Panel base\n        translate([0, 60, 12])\n            cube([router_width-10, 1, 5], center=true);\n        \n        // LED holes\n        for(pos = [-30, -15, 0, 15, 30]) {\n            translate([pos, 61, 12])\n                cube([3, 2, 2], center=true);\n        }\n    }\n}\n\n// Ethernet ports\nmodule ethernet_ports() {\n    color(\"#333333\")\n    for(port = [1:4]) {\n        translate([-25 + (port-1)*15, 60, 8])\n            cube([12, 1, 8]);\n    }\n}\n\n// Power connector\nmodule power_port() {\n    color(\"#111111\")\n    translate([25, 60, 8])\n        cube([8, 1, 6]);\n}\n\n// Status LEDs\nmodule status_leds() {\n    // Power LED\n    color(\"#00FF00\")\n    translate([30, 61, 12])\n        sphere(1.5);\n    \n    // Activity LED\n    color(\"#0000FF\")\n    translate([20, 61, 12])\n        sphere(1.5);\n    \n    // WiFi LED\n    color(\"#FF0000\")\n    translate([10, 61, 12])\n        sphere(1.5);\n}\n\n// Cooling vents\nmodule side_vents() {\n    color(\"#2B2B2B\")\n    difference() {\n        // Side panel\n        translate([router_width/2, 0, router_height/2])\n            cube([1, router_depth-20, router_height], center=true);\n        \n        // Vent holes\n        for(y = [-50:8:50]) {\n            translate([router_width/2+0.5, y, 0])\n                cube([1, 6, 15], center=true);\n        }\n    }\n}\n\n// Brand label\nmodule brand_label() {\n    color(\"#FFFFFF\")\n    translate([0, 0, 13])\n        cube([40, 15, 0.5], center=true);\n}\n\n// Mesh pattern on top\nmodule mesh_pattern() {\n    color(\"#404040\")\n    for(x = [-35:7:35]) {\n        for(y = [-55:7:55]) {\n            translate([x, y, 12.5])\n                cube([5, 5, 0.5]);\n        }\n    }\n}\n\n// Assemble the complete router\nunion() {\n    router_body();\n    antennas();\n    front_panel();\n    ethernet_ports();\n    power_port();\n    status_leds();\n    side_vents();\n    mirror([1, 0, 0]) side_vents();\n    brand_label();\n    mesh_pattern();\n}",
    "renders": true
  },
  {
    "electronic_device": "satellite",
    "openscad_code": "// Satellite Electronic Device - CubeSat Style\n// Medium complexity 3D printable model with realistic features\n\n$fn = 32;\n\n// Main dimensions (mm)\nmain_body = [50, 50, 30];\nsolar_panel = [25, 50, 2];\nantenna_length = 20;\nwall_thickness = 2;\n\n// Colors\ncolor_body = [0.8, 0.8, 0.9];      // Light gray aluminum\ncolor_solar = [0.1, 0.1, 0.4];     // Dark blue solar cells\ncolor_gold = [0.8, 0.6, 0.2];      // Gold contacts\ncolor_black = [0.1, 0.1, 0.1];     // Black components\n\n// Main satellite body\nmodule satellite_body() {\n    color(color_body) {\n        difference() {\n            // Main cube structure\n            cube(main_body, center=true);\n            \n            // Hollow interior\n            translate([0, 0, 0])\n                cube([main_body.x-wall_thickness*2, main_body.y-wall_thickness*2, main_body.z-wall_thickness], center=true);\n            \n            // Access ports on sides\n            for(side = [-1, 1]) {\n                translate([side * (main_body.x/2 - wall_thickness), 0, main_body.z/4])\n                    rotate([0, 90, 0])\n                        cylinder(h=wall_thickness*2, r=5, center=true);\n            }\n        }\n        \n        // Corner reinforcements\n        for(x = [-1, 1])\n        for(y = [-1, 1])\n        for(z = [-1, 1]) {\n            translate([x*main_body.x/2 - x*wall_thickness, y*main_body.y/2 - y*wall_thickness, z*main_body.z/2 - z*wall_thickness])\n                cube([wall_thickness*2, wall_thickness*2, wall_thickness*2], center=true);\n        }\n    }\n}\n\n// Solar panel array\nmodule solar_panels() {\n    color(color_solar) {\n        // Generate 4 solar panels\n        for(side = [-1, 1]) {\n            // Side panels\n            translate([side * (main_body.x/2 + solar_panel.z/2), 0, 0])\n                rotate([0, 90, 0])\n                    cube(solar_panel, center=true);\n                    \n            // Top/bottom panels\n            translate([0, side * (main_body.y/2 + solar_panel.z/2), 0])\n                rotate([90, 0, 0])\n                    cube(solar_panel, center=true);\n        }\n        \n        // Solar cell grid pattern\n        color(color_black) {\n            for(side = [-1, 1])\n            for(i = [-20:10:20])\n            for(j = [-20:10:20]) {\n                translate([side * (main_body.x/2 + solar_panel.z), i, j])\n                    cube([0.5, 8, 8], center=true);\n            }\n        }\n    }\n    \n    // Gold contact strips\n    color(color_gold) {\n        for(side = [-1, 1]) {\n            translate([side * (main_body.x/2 + solar_panel.z/2), 0, solar_panel.y/2 - 2])\n                rotate([0, 90, 0])\n                    cube([solar_panel.x, 1, solar_panel.z], center=true);\n        }\n    }\n}\n\n// Communication antennas\nmodule antennas() {\n    color(color_gold) {\n        // Deployable dipole antennas\n        for(angle = [0:120:359]) {\n            rotate([0, 0, angle]) {\n                translate([main_body.x/2 + 5, 0, main_body.z/2 - 5])\n                    rotate([0, 90, 0])\n                        cylinder(h=antenna_length, r=1, center=true);\n            }\n        }\n        \n        // Main communication dish\n        translate([0, 0, main_body.z/2 + 10])\n            rotate_extrude(angle=360)\n                translate([8, 0, 0])\n                    circle(r=1);\n    }\n}\n\n// Electronic components visible through window\nmodule electronics() {\n    color([0.2, 0.2, 0.3]) {\n        // Main circuit board\n        translate([0, 0, -main_body.z/4])\n            cube([40, 40, 2], center=true);\n            \n        // Processor chip\n        color([0.3, 0.3, 0.3])\n            translate([0, 0, -main_body.z/4 + 2])\n                cube([10, 10, 1], center=true);\n                \n        // Memory modules\n        for(pos = [[-15, 0], [15, 0], [0, -15], [0, 15]]) {\n            translate([pos[0], pos[1], -main_body.z/4 + 2])\n                cube([5, 5, 2], center=true);\n        }\n        \n        // Status LED\n        color([1, 0, 0])\n            translate([20, 20, -main_body.z/4 + 1])\n                sphere(r=1);\n    }\n}\n\n// Camera/sensor module\nmodule camera_module() {\n    color(color_black) {\n        // Camera lens barrel\n        translate([main_body.x/2 - 5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=8, r=5, center=true);\n                \n        // Lens glass\n        color([0.2, 0.2, 0.3])\n            translate([main_body.x/2, 0, 0])\n                sphere(r=4.5);\n                \n        // Lens hood\n        color(color_body)\n            translate([main_body.x/2 + 2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=3, r1=6, r2=7, center=true);\n    }\n}\n\n// Assembly\nsatellite_body();\nsolar_panels();\nantennas();\nelectronics();\ncamera_module();\n\n// Support struts for 3D printing\ncolor(color_body) {\n    for(i = [-1, 1])\n    for(j = [-1, 1]) {\n        translate([i*20, j*20, -main_body.z/2 - 2])\n            cylinder(h=4, r=2, center=false);\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "dongles",
    "openscad_code": "// USB-C Dongle - USB-C to USB-A + HDMI + SD Card Reader\n// Realistic style, medium complexity (~120 lines)\n\n$fn = 50;\n\n// Main dimensions\ndongle_length = 75;\ndongle_width = 28;\ndongle_height = 12;\nwall_thickness = 1.5;\n\n// Colors\ndongle_color = \"DarkSlateGray\";\nport_color = \"Silver\";\nusb_color = \"Silver\";\n\nmodule dongle_body() {\n    color(dongle_color) {\n        // Main enclosure\n        difference() {\n            hull() {\n                translate([0, 0, dongle_height/2])\n                    cube([dongle_length, dongle_width, dongle_height], center=true);\n                translate([dongle_length/2 - 5, 0, dongle_height/2])\n                    cube([dongle_length - 10, dongle_width - 2, dongle_height - 2], center=true);\n            }\n            \n            // Internal cavity for electronics\n            translate([0, 0, dongle_height/2])\n                cube([dongle_length - 2*wall_thickness, dongle_width - 2*wall_thickness, dongle_height - wall_thickness], center=true);\n            \n            // USB-C port opening\n            translate([dongle_length/2 + 0.1, 0, dongle_height/2])\n                cube([5, 8, 3], center=true);\n            \n            // USB-A port opening\n            translate([-dongle_length/2 + 0.1, 0, dongle_height/2])\n                cube([5, 12, 5], center=true);\n            \n            // HDMI port opening\n            translate([0, dongle_width/2 - 2, dongle_height/2])\n                cube([14, 5, 8], center=true);\n            \n            // SD card slot opening\n            translate([dongle_length/4, -dongle_width/2 + 1, dongle_height/2])\n                cube([20, 3, 2], center=true);\n        }\n        \n        // LED indicator\n        translate([dongle_length/2 - 10, dongle_width/2 - 3, dongle_height - 0.5])\n            cube([3, 3, 0.5], center=true);\n    }\n}\n\nmodule usb_c_connector() {\n    color(usb_color) {\n        // USB-C plug\n        translate([dongle_length/2 + 5, 0, dongle_height/2])\n            cube([10, 7, 2.5], center=true);\n        \n        // Metal shell\n        difference() {\n            translate([dongle_length/2 + 5, 0, dongle_height/2])\n                cube([10, 8.5, 3.5], center=true);\n            translate([dongle_length/2 + 5, 0, dongle_height/2])\n                cube([11, 7, 2.5], center=true);\n        }\n    }\n}\n\nmodule usb_a_port() {\n    color(port_color) {\n        // USB-A port\n        translate([-dongle_length/2 - 5, 0, dongle_height/2])\n            cube([10, 12, 5], center=true);\n        \n        // Internal cavity\n        translate([-dongle_length/2 - 5, 0, dongle_height/2])\n            cube([9, 11, 4.5], center=true);\n    }\n}\n\nmodule hdmi_port() {\n    color(port_color) {\n        // HDMI port\n        rotate([90, 0, 0])\n            translate([0, 0, dongle_width/2 + 3])\n                cube([13, 8, 5], center=true);\n        \n        // Internal contacts\n        for(i = [-5:1:5]) {\n            translate([i*1.1, dongle_width/2 + 6, dongle_height/2])\n                cube([0.5, 2, 0.5], center=true);\n        }\n    }\n}\n\nmodule sd_card_slot() {\n    color(port_color) {\n        // SD card slot\n        translate([dongle_length/4, -dongle_width/2 - 2, dongle_height/2])\n            cube([20, 4, 1.5], center=true);\n        \n        // Slot guides\n        translate([dongle_length/4 - 10, -dongle_width/2 - 2, dongle_height/2 - 1])\n            cube([1, 4, 3.5], center=true);\n        translate([dongle_length/4 + 10, -dongle_width/2 - 2, dongle_height/2 - 1])\n            cube([1, 4, 3.5], center=true);\n    }\n}\n\nmodule text_labels() {\n    color(\"White\") {\n        // USB-C label\n        translate([dongle_length/2 + 2, dongle_width/2 - 2, dongle_height + 0.1])\n            rotate([90, 0, 0])\n                linear_extrude(0.5)\n                    text(\"USB-C\", size=2, halign=\"center\");\n        \n        // HDMI label\n        translate([0, dongle_width/2 + 1, dongle_height + 0.1])\n            rotate([90, 0, 0])\n                linear_extrude(0.5)\n                    text(\"HDMI\", size=2, halign=\"center\");\n        \n        // USB-A label\n        translate([-dongle_length/2 - 2, dongle_width/2 - 2, dongle_height + 0.1])\n            rotate([90, 0, 0])\n                linear_extrude(0.5)\n                    text(\"USB-A\", size=2, halign=\"center\");\n    }\n}\n\n// Assembly\ndongle_body();\nusb_c_connector();\nusb_a_port();\nhdmi_port();\nsd_card_slot();\ntext_labels();",
    "renders": true
  },
  {
    "electronic_device": "earpiece",
    "openscad_code": "// Realistic earpiece design with medium complexity\n// Features: main body, earbud, speaker grill, button, micro-USB port, LED indicator, microphone hole\n\n// Color constants\n$fn = 50;\nearbud_color = \"LightGray\";\nbody_color = \"DarkSlateGray\";\nbutton_color = \"Black\";\ngrill_color = \"Gray\";\nled_color = \"Red\";\n\n// Main module\nearpiece();\n\nmodule earpiece() {\n    // Main body\n    translate([0, 0, 0]) {\n        difference() {\n            // Main housing\n            color(body_color) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 40, r1 = 12, r2 = 10, center = true);\n                }\n            }\n            \n            // Hollow interior\n            rotate([0, 90, 0]) {\n                cylinder(h = 38, r1 = 10, r2 = 8, center = true);\n            }\n        }\n    }\n    \n    // Earbud tip\n    translate([-20, 0, 0]) {\n        color(earbud_color) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 15, r1 = 12, r2 = 8, center = true);\n            }\n        }\n        \n        // Soft silicone tip\n        difference() {\n            translate([0, 0, 0]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 8, r1 = 9, r2 = 7, center = true);\n                }\n            }\n            \n            // Inner hole\n            rotate([0, 90, 0]) {\n                cylinder(h = 9, r = 4, center = true);\n            }\n        }\n    }\n    \n    // Speaker grill\n    translate([-12, 0, 0]) {\n        color(grill_color) {\n            difference() {\n                // Grill base\n                rotate([0, 90, 0]) {\n                    cylinder(h = 2, r = 8, center = true);\n                }\n                \n                // Grill holes\n                for (i = [-3:3]) {\n                    for (j = [-3:3]) {\n                        if (i*i + j*j <= 9) {\n                            translate([0, i*2, j*2]) {\n                                rotate([0, 90, 0]) {\n                                    cylinder(h = 3, r = 0.5, center = true);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Multi-function button\n    translate([5, 8, 0]) {\n        color(button_color) {\n            difference() {\n                // Button body\n                cube([8, 3, 6], center = true);\n                \n                // Button top\n                translate([0, 2, 0]) {\n                    cube([6, 0.5, 4], center = true);\n                }\n            }\n        }\n    }\n    \n    // Volume buttons\n    translate([5, 4, 6]) {\n        color(button_color) {\n            cube([6, 2, 2], center = true);\n        }\n    }\n    \n    translate([5, 4, -6]) {\n        color(button_color) {\n            cube([6, 2, 2], center = true);\n        }\n    }\n    \n    // Micro-USB charging port\n    translate([20, 0, 0]) {\n        difference() {\n            // Port housing\n            color(body_color) {\n                cube([4, 8, 6], center = true);\n            }\n            \n            // Port opening\n            translate([1, 0, 0]) {\n                cube([2, 6, 4], center = true);\n            }\n        }\n    }\n    \n    // LED indicator\n    translate([-10, 0, 12]) {\n        color(led_color) {\n            difference() {\n                sphere(r = 1.5);\n                cube([3, 3, 0.5], center = true);\n            }\n        }\n    }\n    \n    // Microphone hole\n    translate([10, 0, -12]) {\n        difference() {\n            // Mic housing\n            color(body_color) {\n                sphere(r = 3);\n            }\n            \n            // Mic opening\n            rotate([0, 0, 45]) {\n                cube([2, 2, 4], center = true);\n            }\n        }\n    }\n    \n    // Brand label area\n    translate([0, 12, 0]) {\n        color(\"White\") {\n            cube([12, 0.5, 6], center = true);\n        }\n    }\n    \n    // Strain relief for earhook\n    translate([15, 0, 0]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = 5, r = 3, center = true);\n        }\n    }\n    \n    // Vent hole for pressure equalization\n    translate([-5, 0, 8]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = 2, r = 1, center = true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "headphones",
    "openscad_code": "// Realistic Over-Ear Wireless Headphones for 3D printing\n// Medium complexity, ~120 lines, no overhangs\n\n$fa = 2; $fs = 0.5;\n\n// Overall scale\nscale(0.35)\nunion() {\n    // Headband\n    color(\"DimGray\")\n    translate([0, 0, 70])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 80, r1 = 25, r2 = 25, center = true);\n        cylinder(h = 82, r1 = 22, r2 = 22, center = true);\n    }\n\n    // Left ear cup\n    module left_ear() {\n        translate([-50, 0, 0]) {\n            // Outer shell\n            color(\"Black\")\n            difference() {\n                sphere(d = 40);\n                sphere(d = 36);\n            }\n            // Foam pad\n            color(\"DarkGray\")\n            translate([0, 0, 18])\n            difference() {\n                cylinder(h = 5, d = 36);\n                cylinder(h = 6, d = 30);\n            }\n            // Control buttons\n            color(\"DarkRed\")\n            translate([0, 14, 0])\n            rotate([0, 90, 0])\n            for (a = [0:120:240])\n                rotate([0, 0, a])\n                translate([16, 0, 0])\n                cylinder(h = 3, d = 6);\n            // LED indicator\n            color(\"Cyan\")\n            translate([19, 0, 0])\n            sphere(d = 2);\n            // Charging port\n            color(\"Silver\")\n            translate([0, -14, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 4, d = 5);\n        }\n    }\n\n    // Right ear cup (mirrored from left)\n    mirror([1, 0, 0]) children();\n\n    // Left yoke\n    color(\"DimGray\")\n    translate([-50, 0, 35])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 30, d = 8, center = true);\n        cylinder(h = 32, d = 5, center = true);\n    }\n\n    // Right yoke (mirrored)\n    mirror([1, 0, 0]) children();\n\n    // Adjustment sliders\n    for (side = [-1, 1]) {\n        color(\"Black\")\n        translate([side * 35, 0, 55])\n        rotate([side * 10, 0, 0])\n        difference() {\n            cylinder(h = 20, d = 10);\n            cylinder(h = 22, d = 8);\n        }\n    }\n\n    // Brand label on headband\n    color(\"White\")\n    translate([0, 25, 70])\n    rotate([90, 0, 0])\n    linear_extrude(height = 0.5)\n    text(\"AUDIO+\", size = 5, halign = \"center\");\n}",
    "renders": true
  },
  {
    "electronic_device": "earbuds",
    "openscad_code": "// Realistic Earbuds Charging Case with Earbuds\n// Overall dimensions: 60mm x 45mm x 30mm\n\n// Color definitions\ncase_color = \"Silver\";\nearbud_color = \"White\";\nbutton_color = \"Black\";\nled_color = \"Green\";\n\n// Main module\nmodule earbuds_case() {\n    // Main charging case body\n    color(case_color) {\n        difference() {\n            // Outer rounded case\n            minkowski() {\n                cube([55, 40, 25], center=true);\n                sphere(3);\n            }\n            \n            // Hollow interior\n            translate([0, 0, -2])\n            minkowski() {\n                cube([50, 35, 20], center=true);\n                sphere(2.5);\n            }\n            \n            // Charging port cutout\n            translate([28, 0, -12])\n                rotate([90, 0, 0])\n                cylinder(h=15, r=4.5, $fn=20);\n        }\n    }\n    \n    // Lid\n    color(case_color) {\n        translate([0, 0, 14.5]) {\n            difference() {\n                // Lid body\n                minkowski() {\n                    cube([55, 40, 3], center=true);\n                    sphere(2);\n                }\n                \n                // Interior hollow\n                translate([0, 0, -1])\n                minkowski() {\n                    cube([50, 35, 2], center=true);\n                    sphere(1.5);\n                }\n            }\n        }\n    }\n    \n    // Hinge\n    color(case_color) {\n        translate([0, -20.5, 10])\n            rotate([90, 0, 0])\n            cylinder(h=50, r=1.5, center=true, $fn=20);\n    }\n    \n    // LED indicator\n    color(led_color) {\n        translate([27, 0, -6])\n            sphere(1.5, $fn=20);\n    }\n    \n    // Pairing button\n    color(button_color) {\n        translate([-27, 0, -6])\n            cylinder(h=2, r=3, $fn=20);\n    }\n    \n    // Earbuds inside\n    translate([15, 10, -5]) rotate([0, 0, 45]) earbud();\n    translate([-15, 10, -5]) mirror([1, 0, 0]) rotate([0, 0, 45]) earbud();\n    \n    // Charging pins\n    for (x = [-15, 15]) {\n        color(\"Gold\") {\n            translate([x, 10, -9])\n                cylinder(h=2, r=1.5, $fn=20);\n        }\n    }\n}\n\n// Earbud module\nmodule earbud() {\n    // Main body\n    color(earbud_color) {\n        translate([0, 0, 5])\n            scale([1, 1, 1.2])\n            sphere(8, $fn=30);\n    }\n    \n    // Stem\n    color(earbud_color) {\n        translate([0, -8, -8])\n            rotate([90, 0, 0])\n            cylinder(h=16, r=3.5, $fn=20);\n    }\n    \n    // Eartip\n    color(\"Black\") {\n        translate([0, 0, 10.5])\n            rotate_extrude(angle=360, $fn=30)\n            translate([0, 4]) circle(r=2);\n    }\n    \n    // Speaker grill\n    color(\"Gray\") {\n        translate([0, 0, 11])\n            cylinder(h=0.5, r=4, $fn=30);\n        \n        // Grill holes\n        for (i = [-2:2]) {\n            for (j = [-2:2]) {\n                if (i*i + j*j <= 4) {\n                    translate([i*1.5, j*1.5, 11.3])\n                        cylinder(h=1, r=0.3, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Touch sensor area\n    color(\"Silver\", 0.5) {\n        translate([0, -5, 5])\n            sphere(8.2, $fn=30);\n    }\n    \n    // Charging contacts\n    color(\"Gold\") {\n        translate([0, -8, -15.5])\n            sphere(1.5, $fn=20);\n    }\n}\n\n// Render the complete model\nearbuds_case();",
    "renders": true
  },
  {
    "electronic_device": "antenna",
    "openscad_code": "// Wi-Fi Router with External Antennas - Realistic Style, Medium Complexity\n// Dimensions: ~80mm wide x 120mm deep x 35mm tall (without antennas)\n\n// Main color scheme\nrouter_color = [0.15, 0.15, 0.15];  // Dark gray\nantenna_color = [0.8, 0.8, 0.8];    // Silver\nled_color = [0.2, 1, 0.2];          // Green LED\nport_color = [0.1, 0.1, 0.1];       // Black ports\n\n// Router body\nmodule router_body() {\n    color(router_color)\n    difference() {\n        // Main chassis\n        translate([0, 0, 15])\n        cube([80, 120, 30], center=true);\n        \n        // Front vents\n        for(i = [-35:5:35]) {\n            translate([38, i, 15])\n            cube([2, 3, 25], center=true);\n        }\n        \n        // Side vents (left)\n        for(i = [-35:8:35]) {\n            translate([i, 58, 15])\n            cube([5, 2, 25], center=true);\n        }\n        \n        // Side vents (right)\n        for(i = [-35:8:35]) {\n            translate([i, -58, 15])\n            cube([5, 2, 25], center=true);\n        }\n    }\n    \n    // Top surface details\n    color(router_color)\n    translate([0, 0, 31])\n    cube([78, 118, 2], center=true);\n    \n    // Status LEDs\n    translate([25, 55, 32.5])\n    color(led_color) sphere(1.5);\n    translate([15, 55, 32.5])\n    color([1, 0.2, 0.2]) sphere(1.5);\n    translate([5, 55, 32.5])\n    color([1, 1, 0.2]) sphere(1.5);\n}\n\n// Antenna module\nmodule antenna(rotation=0) {\n    color(antenna_color) {\n        // Base joint\n        rotate([rotation, 0, 0])\n        translate([0, 0, 15])\n        cylinder(h=8, r1=6, r2=5, center=true);\n        \n        // Antenna rod\n        rotate([rotation, 0, 0])\n        translate([0, 0, 15 + 8 + 25])\n        cylinder(h=50, r=2.5, center=true);\n        \n        // Antenna tip\n        rotate([rotation, 0, 0])\n        translate([0, 0, 15 + 8 + 50 + 25])\n        sphere(3);\n    }\n}\n\n// Rear port panel\nmodule port_panel() {\n    color(port_color) {\n        // Main panel\n        translate([0, -60, 15])\n        cube([70, 2, 20], center=true);\n        \n        // Power port\n        translate([-25, -60, 20])\n        cylinder(h=3, r=3.5, center=true);\n        \n        // WAN port\n        translate([-15, -60, 20])\n        cylinder(h=3, r=4, center=true);\n        \n        // LAN ports (4x)\n        for(i = [-5:5:10]) {\n            translate([i, -60, 20])\n            cylinder(h=3, r=4, center=true);\n        }\n        \n        // USB port\n        translate([25, -60, 20])\n        cube([8, 3, 3], center=true);\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    color([0.05, 0.05, 0.05])\n    for(x = [-30:60:30])\n    for(y = [-50:100:100]) {\n        translate([x, y, 1])\n        cylinder(h=2, r=3, center=true);\n    }\n}\n\n// Assemble the model\nrouter_body();\n\n// Position antennas at corners\ntranslate([-35, 45, 30]) antenna(45);\ntranslate([35, 45, 30]) antenna(45);\ntranslate([-35, -45, 30]) antenna(-45);\ntranslate([35, -45, 30]) antenna(-45);\n\nport_panel();\nfeet();",
    "renders": true
  },
  {
    "electronic_device": "booster",
    "openscad_code": "// Booster Wi-Fi Repeater - Realistic Style, Medium Complexity\n// Dimensions: 80mm x 45mm x 28mm (L x W x H)\n\n// Main body dimensions\nbody_l = 80;\nbody_w = 45;\nbody_h = 28;\nwall_t = 2.5;\n\n// Front panel details\nscreen_w = 30;\nscreen_h = 12;\nbutton_r = 3;\nbutton_d = 2;\n\n// Antenna dimensions\nantenna_l = 35;\nantenna_r = 4;\n\n// Ventilation slots\nslot_w = 1.5;\nslot_h = 1;\nslot_spacing = 3;\nslot_count = 8;\n\n// LED indicators\nled_r = 1.5;\n\nmodule main_body() {\n    color(\"white\") difference() {\n        // Main enclosure\n        cube([body_l, body_w, body_h], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -wall_t/2])\n            cube([body_l - 2*wall_t, body_w - 2*wall_t, body_h - wall_t], center=true);\n        \n        // Front panel cutout for screen\n        translate([0, body_w/2 - 0.1, 5])\n            cube([screen_w + 4, 0.2, screen_h + 4], center=true);\n        \n        // Ventilation slots on top\n        for (i = [0:slot_count-1]) {\n            translate([-(slot_count*slot_spacing)/2 + i*slot_spacing + slot_spacing/2, \n                      0, body_h/2 - 0.1])\n                cube([slot_w, body_w - 10, slot_h], center=true);\n        }\n        \n        // Side ventilation\n        for (i = [0:slot_count-1]) {\n            translate([body_l/2 - 0.1, \n                      -(slot_count*slot_spacing)/2 + i*slot_spacing + slot_spacing/2, 0])\n                cube([0.2, slot_w, slot_h], center=true);\n        }\n    }\n}\n\nmodule front_panel() {\n    color(\"black\") {\n        // Screen\n        translate([0, body_w/2 - 0.5, 5])\n            cube([screen_w, 1, screen_h], center=true);\n        \n        // LED indicators\n        translate([-10, body_w/2 - 0.5, -2])\n            color(\"green\") sphere(led_r);\n        translate([0, body_w/2 - 0.5, -2])\n            color(\"yellow\") sphere(led_r);\n        translate([10, body_w/2 - 0.5, -2])\n            color(\"red\") sphere(led_r);\n    }\n}\n\nmodule buttons() {\n    color(\"darkgray\") {\n        // WPS button\n        translate([-15, body_w/2 - 0.5, -8])\n            cylinder(h=button_d, r=button_r, center=true);\n        \n        // Reset button\n        translate([15, body_w/2 - 0.5, -8])\n            cylinder(h=button_d, r=button_r, center=true);\n    }\n}\n\nmodule ethernet_ports() {\n    color(\"black\") {\n        // Main port\n        translate([body_l/2 - 0.5, -10, 0])\n            cube([1, 12, 8], center=true);\n        \n        // Secondary port\n        translate([body_l/2 - 0.5, 10, 0])\n            cube([1, 12, 8], center=true);\n    }\n}\n\nmodule antennas() {\n    color(\"black\") {\n        // Left antenna\n        translate([-body_l/2 + 5, -body_w/2 - antenna_r, body_h/2 - antenna_r]) {\n            rotate([0, -30, 0]) {\n                cylinder(h=antenna_l, r=antenna_r);\n                translate([0, 0, antenna_l])\n                    sphere(antenna_r * 1.2);\n            }\n        }\n        \n        // Right antenna\n        translate([body_l/2 - 5, -body_w/2 - antenna_r, body_h/2 - antenna_r]) {\n            rotate([0, -30, 0]) {\n                cylinder(h=antenna_l, r=antenna_r);\n                translate([0, 0, antenna_l])\n                    sphere(antenna_r * 1.2);\n            }\n        }\n    }\n}\n\nmodule power_connector() {\n    color(\"darkgray\") {\n        translate([0, -body_w/2 - 0.5, -8])\n            cube([10, 5, 6], center=true);\n    }\n}\n\nmodule feet() {\n    color(\"gray\") {\n        // Rubber feet\n        translate([body_l/2 - 5, body_w/2 - 5, -body_h/2 - 1])\n            cylinder(h=2, r=3);\n        translate([-body_l/2 + 5, body_w/2 - 5, -body_h/2 - 1])\n            cylinder(h=2, r=3);\n        translate([body_l/2 - 5, -body_w/2 + 5, -body_h/2 - 1])\n            cylinder(h=2, r=3);\n        translate([-body_l/2 + 5, -body_w/2 + 5, -body_h/2 - 1])\n            cylinder(h=2, r=3);\n    }\n}\n\n// Assembly\nmain_body();\nfront_panel();\nbuttons();\nethernet_ports();\npower_connector();\nantennas();\nfeet();",
    "renders": true
  },
  {
    "electronic_device": "extender",
    "openscad_code": "// Wi-Fi Range Extender with Realistic Styling – Medium Complexity\n// 3D-printable, 75 mm tall\n\n// Color definitions\ncase_color = \"lightgray\";\nantenna_color = \"black\";\nled_color = \"green\";\nport_color = \"darkgray\";\nvent_color = \"slategray\";\n\n// Wall thickness for printing\nwall = 1.6;\n\n// Main case\nmodule main_case() {\n    color(case_color)\n    difference() {\n        // Outer shell with rounded edges\n        minkowski() {\n            cube([55, 40, 30], center=true);\n            sphere(3);\n        }\n        // Hollow inside\n        translate([0,0,1.5])\n            cube([55-2*wall, 40-2*wall, 30-2*wall], center=true);\n    }\n}\n\n// Top ventilation grill\nmodule top_grill() {\n    color(vent_color)\n    difference() {\n        translate([0,0,16])\n            cube([40, 30, 2], center=true);\n        for (x = [-16:4:16])\n            translate([x,0,17.1])\n                cube([1.5, 30, 2], center=true);\n    }\n}\n\n// LED indicator strip\nmodule led_strip() {\n    color(led_color)\n    translate([0, -18.5, 10])\n        cube([20, 1, 3], center=true);\n    // Diffuser effect\n    color(\"white\", 0.5)\n        translate([0, -18.4, 10])\n            cube([20.1, 0.8, 3.1], center=true);\n}\n\n// Ethernet port\nmodule ethernet_port() {\n    color(port_color)\n    translate([25.5, 10, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=12, d1=14, d2=12, center=true);\n            translate([0,0,1])\n                cube([10, 8, 13], center=true);\n        }\n}\n\n// WPS button\nmodule wps_button() {\n    color(\"white\")\n    translate([0, 18.5, 0])\n    minkowski() {\n        cube([10, 2, 5], center=true);\n        sphere(1);\n    }\n}\n\n// Foldable antenna\nmodule antenna(angle=0) {\n    color(antenna_color)\n    translate([28, 0, 15])\n    rotate([angle, 0, 90])\n    union() {\n        // Pivot cylinder\n        rotate([90,0,0])\n            cylinder(h=10, d=6, center=true);\n        // Antenna rod\n        translate([0,0,-20])\n            cylinder(h=40, d=5, center=true);\n    }\n}\n\n// Reset pinhole\nmodule reset_pin() {\n    color(\"black\")\n    translate([25.5, -10, 0])\n        rotate([0, 90, 0])\n        cylinder(h=5, d=2, center=true);\n}\n\n// Assembly\nmain_case();\ntop_grill();\nled_strip();\nethernet_port();\nwps_button();\nreset_pin();\nantenna(30);",
    "renders": true
  },
  {
    "electronic_device": "donglestick",
    "openscad_code": "// USB-C Dongle Stick with HDMI, USB-A, and SD Card ports\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Main dimensions\ndongle_length = 65;\ndongle_width = 28;\ndongle_height = 12;\nwall_thickness = 1.5;\n\n// Colors\nplastic_color = \"SlateGray\";\nmetal_color = \"Silver\";\nport_color = \"DimGray\";\nled_color = \"Red\";\n\n// Main body module\nmodule dongle_body() {\n    color(plastic_color) {\n        difference() {\n            // Outer shell\n            cube([dongle_length, dongle_width, dongle_height], center = true);\n            \n            // Hollow interior\n            translate([0, 0, -wall_thickness/2])\n                cube([dongle_length - 2*wall_thickness, \n                      dongle_width - 2*wall_thickness, \n                      dongle_height - wall_thickness], center = true);\n            \n            // USB-C connector cutout\n            translate([-dongle_length/2 - 1, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 10, r = 5.5, center = true);\n        }\n    }\n}\n\n// USB-C connector\nmodule usb_c_connector() {\n    color(metal_color) {\n        translate([-dongle_length/2 - 5.5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 11, r = 6.5, center = true);\n        \n        // Inner plastic part\n        color(\"Black\") {\n            translate([-dongle_length/2 - 5.5, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 8, r = 5.5, center = true);\n        }\n    }\n}\n\n// Port module\nmodule port(type, position_x, position_y) {\n    if (type == \"HDMI\") {\n        // HDMI port\n        color(port_color) {\n            translate([position_x, position_y, dongle_height/2 - 1])\n                cube([15, 12, 2], center = true);\n            \n            // Inner hole\n            translate([position_x, position_y, dongle_height/2 + 0.1])\n                cube([13, 10, 2], center = true);\n        }\n        \n        // Screws\n        for (i = [-1, 1]) {\n            translate([position_x + i*6, position_y + 5, dongle_height/2 - 0.5])\n                cylinder(h = 1, r = 0.5);\n        }\n    }\n    \n    if (type == \"USB-A\") {\n        // USB-A port\n        color(port_color) {\n            translate([position_x, position_y, dongle_height/2 - 1])\n                cube([12, 15, 2], center = true);\n            \n            // Inner hole\n            translate([position_x, position_y, dongle_height/2 + 0.1])\n                cube([11, 14, 2], center = true);\n        }\n        \n        // Plastic tongue\n        color(\"Black\") {\n            translate([position_x, position_y - 2, dongle_height/2 - 0.8])\n                cube([9.5, 8, 1.5], center = true);\n        }\n    }\n    \n    if (type == \"SD\") {\n        // SD card slot\n        color(port_color) {\n            translate([position_x, position_y, dongle_height/2 - 1])\n                cube([20, 2, 3], center = true);\n            \n            // Beveled edge\n            translate([position_x - 8, position_y, dongle_height/2])\n                cube([4, 2, 1], center = true);\n        }\n    }\n}\n\n// Status LED\nmodule status_led() {\n    color(led_color) {\n        translate([dongle_length/2 - 5, dongle_width/2 - 3, dongle_height/2 - 0.1])\n            cylinder(h = 1, r = 1.5);\n    }\n}\n\n// Ventilation holes\nmodule ventilation_holes() {\n    color(plastic_color) {\n        for (i = [0:3]) {\n            translate([-dongle_length/2 + 10 + i*10, 0, dongle_height/2 - 0.1])\n                cube([6, dongle_width - 10, 1], center = true);\n        }\n    }\n}\n\n// Brand text (simulated as indentations)\nmodule brand_text() {\n    translate([dongle_length/4, dongle_width/4, dongle_height/2 - 0.5])\n        cube([10, 2, 0.5], center = true);\n    translate([dongle_length/4, -dongle_width/4, dongle_height/2 - 0.5])\n        cube([10, 2, 0.5], center = true);\n}\n\n// Assembly\ndongle_body();\nusb_c_connector();\n\n// Ports\nport(\"HDMI\", dongle_length/2 - 10, 0);\nport(\"USB-A\", dongle_length/2 - 20, dongle_width/2 - 10);\nport(\"USB-A\", dongle_length/2 - 20, -dongle_width/2 + 10);\nport(\"SD\", dongle_length/2 - 5, 0);\n\n// Details\nstatus_led();\nventilation_holes();\nbrand_text();",
    "renders": true
  },
  {
    "electronic_device": "datacard",
    "openscad_code": "// Datacard electronic device - realistic style, medium complexity\n// A modern USB-C flash drive with activity LED and textured grip\n\n// Main dimensions\nlength = 60;\nwidth = 20;\nheight = 8;\nwall = 1.2;\n\n// Colors\ncolor_plastic = [0.2, 0.2, 0.2];  // Dark gray\ncolor_metal = [0.8, 0.8, 0.8];   // Silver\ncolor_led = [0, 1, 0];          // Green LED\ncolor_label = [0.95, 0.95, 0.95]; // Light gray label\n\nmodule datacard() {\n    // Main body\n    color(color_plastic) {\n        difference() {\n            // Outer shell\n            cube([length, width, height], center = true);\n            \n            // Hollow interior for weight reduction\n            translate([0, 0, 0])\n                cube([length - wall*2, width - wall*2, height - wall], center = true);\n            \n            // USB-C port opening\n            translate([length/2 - 1, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h = 2.5, d1 = 8.4, d2 = 8.4, center = true);\n        }\n    }\n    \n    // USB-C connector\n    color(color_metal) {\n        translate([length/2 - 4, 0, 0])\n        difference() {\n            // Metal shell\n            cube([8, 12, height - 2], center = true);\n            \n            // Inner cavity\n            translate([0, 0, 1])\n                cube([6, 10, height - 4], center = true);\n            \n            // Tongue\n            translate([-1, 0, 0])\n                cube([2, 7, 0.8], center = true);\n            \n            // Contact pads\n            for (i = [0:5]) {\n                translate([0, -3 + i*1.2, -1.6])\n                    cube([1.5, 0.6, 0.1], center = true);\n            }\n        }\n    }\n    \n    // Activity LED window\n    color(color_led) {\n        translate([-length/4, width/2 - 1, height/2 - 1])\n            cube([3, 0.5, 0.5]);\n    }\n    \n    // Textured grip pattern\n    color(color_plastic) {\n        for (x = [-20:5:15]) {\n            for (y = [-7:3:7]) {\n                translate([x, y, -height/2 + 0.1])\n                    cube([4, 2, 0.2]);\n            }\n        }\n    }\n    \n    // Keychain hole\n    translate([-length/2 + 3, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = width, d = 3, center = true);\n    \n    // Brand label area\n    color(color_label) {\n        translate([0, 0, height/2 - 0.1])\n            cube([15, 8, 0.1], center = true);\n    }\n    \n    // Capacity indicator dots\n    color([0.9, 0.9, 0.9]) {\n        for (i = [0:3]) {\n            translate([length/2 - 15 - i*3, -width/2 + 2, height/2 - 0.5])\n                sphere(d = 1);\n        }\n    }\n}\n\n// Assembly\ndatacard();",
    "renders": true
  },
  {
    "electronic_device": "aircard",
    "openscad_code": "// Realistic AirCard 4G LTE USB Modem\n// Dimensions: 90mm x 30mm x 12mm\n\n// Main body dimensions\nbody_length = 90;\nbody_width = 30;\nbody_thickness = 12;\n\n// USB connector dimensions\nusb_length = 12;\nusb_width = 12.5;\nusb_thickness = 2.4;\n\n// Material colors\n$fn = 32;\n\n// Main module\nmodule aircard() {\n    // Main body\n    color(\"dimgray\") \n    difference() {\n        // Main shell\n        cube([body_length, body_width, body_thickness], center=true);\n        \n        // Top face details\n        translate([0, 0, body_thickness/2 - 0.1])\n        cube([body_length - 4, body_width - 4, 0.2], center=true);\n    }\n    \n    // USB connector\n    translate([-body_length/2 - usb_length/2, 0, 0])\n    color(\"silver\") \n    union() {\n        // USB metal part\n        cube([usb_length, usb_width, usb_thickness], center=true);\n        \n        // USB plastic insert\n        translate([usb_length/2 - 1, 0, 0])\n        color(\"black\")\n        cube([4, 11.5, 1.65], center=true);\n    }\n    \n    // LED indicator\n    translate([body_length/4, body_width/4, body_thickness/2 + 0.1])\n    color(\"red\")\n    cylinder(h=0.5, r=2, center=true);\n    \n    // Activity LED\n    translate([body_length/4, -body_width/4, body_thickness/2 + 0.1])\n    color(\"blue\")\n    cylinder(h=0.5, r=2, center=true);\n    \n    // Micro SD slot\n    translate([body_length/4, body_width/2 - 2, 0])\n    difference() {\n        color(\"black\")\n        cube([15, 1, 1], center=true);\n        // Slot opening\n        translate([0, 0.5, 0])\n        cube([13, 0.5, 0.8], center=true);\n    }\n    \n    // Side buttons\n    for (i = [0:1]) {\n        translate([body_length/6 + i*10, -body_width/2 - 0.5, 0])\n        color(\"darkgray\")\n        difference() {\n            cube([6, 1, 3], center=true);\n            translate([0, 0.6, 0])\n            cube([5.5, 0.2, 2.5], center=true);\n        }\n    }\n    \n    // Antenna lines\n    translate([0, 0, body_thickness/2 + 0.05])\n    color(\"white\") {\n        // Top antenna trace\n        for (i = [-2:2]) {\n            translate([-15 + i*7.5, 8, 0])\n            cube([5, 0.2, 0.1], center=true);\n        }\n        \n        // Side antenna trace\n        for (i = [-3:3]) {\n            translate([body_length/2 - 10, -10 + i*2.5, 0])\n            cube([0.2, 2, 0.1], center=true);\n        }\n    }\n    \n    // Brand label area\n    translate([0, 0, body_thickness/2 + 0.1])\n    color(\"lightgray\")\n    cube([30, 12, 0.1], center=true);\n    \n    // Ventilation slots\n    translate([body_length/2 - 15, 0, 0])\n    for (i = [0:4]) {\n        rotate([90, 0, 0])\n        translate([-body_thickness/2 - 0.1, body_width/2 - 5 - i*4, 0])\n        cube([0.8, 3, 0.1], center=true);\n    }\n    \n    // Model text area (raised)\n    translate([body_length/2 - 25, 0, body_thickness/2 - 0.5])\n    color(\"black\")\n    cube([15, 8, 0.3], center=true);\n}\n\n// Generate the model\naircard();",
    "renders": true
  },
  {
    "electronic_device": "broadband",
    "openscad_code": "// Broadband Router / Modem - Realistic Medium Complexity\n// Dimensions: 150mm x 100mm x 30mm (scaled to 75mm x 50mm x 15mm for printing)\n\ncolor([0.1,0.1,0.1]) \ntranslate([0,0,0]) router_body();\n\nmodule router_body() {\n    // Main plastic enclosure\n    difference() {\n        color([0.1,0.1,0.1]) rounded_box([75,50,15], 3);\n        \n        // Ventilation slots on top\n        for(y=[-20:10:20]) {\n            translate([-30, y, 7.5])\n                cube([60, 1.5, 5]);\n        }\n        \n        // LED indicators hole\n        translate([32, -20, 7.5])\n            cube([8, 2, 2]);\n    }\n    \n    // Front panel with glossy finish\n    color([0.05,0.05,0.05]) \n    translate([0, 0, 7.5])\n        rounded_box([75.2,50.2,0.5], 3);\n    \n    // Status LEDs\n    for(i=[0:2:8]) {\n        color([0,1,0]) \n        translate([32-i, -20, 7.5])\n            sphere(0.5);\n    }\n    \n    // Brand logo area\n    color([0.8,0.8,0.8])\n    translate([20, 15, 7.5])\n        cube([20, 5, 0.1]);\n    \n    // Antenna arrays (4 antennas)\n    for(pos=[[-35,25,7.5], [35,25,7.5], [-35,-25,7.5], [35,-25,7.5]]) {\n        translate(pos) {\n            rotate([90,0,0]) {\n                // Antenna base\n                color([0.2,0.2,0.2])\n                cylinder(h=2, r1=3, r2=3);\n                \n                // Antenna shaft\n                color([0.15,0.15,0.15])\n                translate([0,0,2])\n                    cylinder(h=15, r1=1.5, r2=1.5);\n            }\n        }\n    }\n    \n    // Ethernet ports (4x)\n    for(i=[0:3]) {\n        translate([-25+i*12, -22.5, -5]) {\n            color([0.3,0.3,0.3])\n            difference() {\n                cube([10, 5, 5]);\n                translate([2,2,2.5])\n                    cube([6, 1, 2.5]);\n            }\n        }\n    }\n    \n    // WAN port\n    color([0.5,0.2,0.2])\n    translate([25, -22.5, -5]) {\n        difference() {\n            cube([10, 5, 5]);\n            translate([2,2,2.5])\n                cube([6, 1, 2.5]);\n        }\n    }\n    \n    // Power connector\n    color([0.8,0.8,0.8])\n    translate([32, 22.5, -5]) {\n        difference() {\n            cube([8, 5, 4]);\n            translate([1,1,2])\n                cube([6, 3, 2]);\n        }\n    }\n    \n    // Reset button\n    color([0.6,0.6,0.6])\n    translate([-30, 22.5, -5]) {\n        cylinder(h=2, r=2);\n    }\n    \n    // Rubber feet\n    for(pos=[[-30,20,0], [30,20,0], [-30,-20,0], [30,-20,0]]) {\n        color([0.05,0.05,0.05])\n        translate(pos)\n            cylinder(h=1, r=3);\n    }\n}\n\nmodule rounded_box(size, radius) {\n    x = size[0]/2 - radius;\n    y = size[1]/2 - radius;\n    z = size[2]/2;\n    \n    hull() {\n        // Corner spheres\n        for(i=[-1,1], j=[-1,1], k=[-1,1]) {\n            translate([i*x, j*y, k*z])\n                sphere(radius);\n        }\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "airmodem",
    "openscad_code": "// OpenSCAD AirModem - Realistic Style, Medium Complexity\n// Approx 80mm x 60mm x 20mm\n\n$fn = 64;\n\n// Main colors\nplastic_color = [0.15, 0.15, 0.15];\nscreen_color = [0.05, 0.05, 0.05];\nled_color = [0.2, 0.8, 0.2];\nmetal_color = [0.4, 0.4, 0.4];\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        color(plastic_color)\n        translate([-40, -30, -10])\n            cube([80, 60, 20], center = false);\n        \n        // Top chamfers\n        difference() {\n            translate([-40, -30, -10])\n                cube([80, 60, 20]);\n            translate([-38, -28, -8])\n                cube([76, 56, 20]);\n        }\n        \n        // Ventilation slots\n        for(x = [-30:10:30]) {\n            translate([x, -30, -5])\n                cube([2, 5, 10]);\n        }\n    }\n}\n\n// Front panel with screen\nmodule front_panel() {\n    difference() {\n        color(plastic_color)\n        translate([-35, -25, 8])\n            cube([70, 50, 2]);\n        \n        // Screen cutout\n        color(screen_color)\n        translate([-25, -15, 9.5])\n            cube([50, 30, 0.5]);\n    }\n}\n\n// Status LEDs\nmodule status_leds() {\n    for(i = [0:2]) {\n        translate([15 + i*10, 20, 9.5])\n            color(led_color)\n            cylinder(h = 1, r = 2);\n    }\n}\n\n// Antenna connectors\nmodule antennas() {\n    // Left antenna\n    translate([-40, -15, 0])\n        rotate([0, 90, 0])\n        color(metal_color)\n        cylinder(h = 10, r = 3);\n    \n    // Right antenna\n    translate([40, -15, 0])\n        rotate([0, 90, 0])\n        color(metal_color)\n        cylinder(h = 10, r = 3);\n}\n\n// Ethernet ports\nmodule ports() {\n    // Left port\n    translate([-35, -30, 0])\n    difference() {\n        color(metal_color)\n        cube([10, 5, 8]);\n        translate([-33, -30.5, 1])\n            cube([6, 2, 6]);\n    }\n    \n    // Right port\n    translate([25, -30, 0])\n    difference() {\n        color(metal_color)\n        cube([10, 5, 8]);\n        translate([27, -30.5, 1])\n            cube([6, 2, 6]);\n    }\n}\n\n// Power connector\nmodule power_port() {\n    translate([0, -30, 0])\n    difference() {\n        color(metal_color)\n        cube([8, 5, 6]);\n        translate([1, -30.5, 1])\n            cube([6, 2, 4]);\n    }\n}\n\n// Reset button\nmodule reset_button() {\n    translate([30, 20, 9.5])\n        color(plastic_color)\n        cylinder(h = 1, r = 3);\n}\n\n// Rubber feet\nmodule feet() {\n    for(pos = [[-30, -20], [30, -20], [-30, 20], [30, 20]]) {\n        translate([pos[0], pos[1], -10])\n            color([0.1, 0.1, 0.1])\n            cylinder(h = 2, r = 4);\n    }\n}\n\n// Assembly\nbody();\nfront_panel();\nstatus_leds();\nantennas();\nports();\npower_port();\nreset_button();\nfeet();",
    "renders": true
  },
  {
    "electronic_device": "pocketmodem",
    "openscad_code": "// PocketModem - Medium complexity, realistic style\n// Dimensions: 75mm x 45mm x 15mm\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        color([0.2, 0.2, 0.2]) \n        cube([75, 45, 15], center=true);\n        \n        // Top face chamfers\n        translate([0, 0, 7.4])\n        cube([73, 43, 0.2], center=true);\n        \n        // Bottom face chamfers\n        translate([0, 0, -7.4])\n        cube([73, 43, 0.2], center=true);\n        \n        // USB-C port\n        translate([38, 0, -7.5])\n        cube([8, 8, 4], center=true);\n        \n        // LED indicator window\n        translate([-25, 18, 7.6])\n        cube([3, 1.5, 1], center=true);\n    }\n}\n\n// Top surface details\nmodule top_details() {\n    // Antenna lines\n    for(y = [-15:5:15]) {\n        translate([0, y, 7.6])\n        color([0.1, 0.1, 0.1])\n        cube([60, 0.5, 0.2], center=true);\n    }\n    \n    // Status LEDs\n    translate([-25, 18, 7.6])\n    color([0, 1, 0])\n    cube([3, 1.5, 0.5], center=true);\n    \n    // Power button\n    translate([30, -15, 7.6])\n    color([0.3, 0.3, 0.3])\n    cube([6, 4, 0.8], center=true);\n    \n    // Reset button\n    translate([30, -8, 7.6])\n    color([0.8, 0.2, 0.2])\n    cube([4, 2, 0.5], center=true);\n    \n    // Branding text area\n    translate([-5, 0, 7.6])\n    color([0.4, 0.4, 0.4])\n    cube([25, 8, 0.3], center=true);\n}\n\n// Side buttons\nmodule side_buttons() {\n    // Volume buttons\n    for(i = [0:1]) {\n        translate([-37.6, -5 + i*5, 5 - i*10])\n        rotate([0, 90, 0])\n        color([0.25, 0.25, 0.25])\n        cylinder(h=3, r=1.5, center=true);\n    }\n    \n    // SIM card tray\n    translate([37.6, 10, 0])\n    rotate([0, 90, 0])\n    difference() {\n        color([0.15, 0.15, 0.15])\n        cylinder(h=15, r=2.5, center=true);\n        translate([0, 0, 7.5])\n        cube([1, 0.5, 1], center=true);\n    }\n}\n\n// USB-C connector detail\nmodule usb_port() {\n    translate([38, 0, -5.5])\n    difference() {\n        color([0.1, 0.1, 0.1])\n        cube([7, 6, 3], center=true);\n        \n        // USB-C opening\n        translate([0, 0, 1.6])\n        cube([6, 2.5, 1], center=true);\n        \n        // Internal contacts\n        for(i = [-2:1:2]) {\n            translate([i*0.7, 0, 1.6])\n            color([0.8, 0.8, 0])\n            cube([0.3, 2.4, 0.1], center=true);\n        }\n    }\n}\n\n// Cooling vents\nmodule cooling_vents() {\n    for(x = [-20:5:20]) {\n        translate([x, -22.6, 0])\n        color([0.05, 0.05, 0.05])\n        cube([3, 0.5, 8], center=true);\n    }\n}\n\n// Assembly\nbody();\ntop_details();\nside_buttons();\nusb_port();\ncooling_vents();",
    "renders": true
  },
  {
    "electronic_device": "minimodem",
    "openscad_code": "// MiniModem – compact 56k-style desktop modem\n// Overall size: 80 mm × 60 mm × 25 mm\n// 3D-print friendly – all slopes ≤45°, 1 mm wall thickness\n\n// Color constants\ncase_col   = [0.15,0.15,0.15]; // matte black\npanel_col  = [0.9,0.9,0.9];    // light gray\nled_col    = [0.1,0.8,0.1];    // green LED\nbutton_col = [0.2,0.2,0.2];    // dark gray\nport_col   = [0.3,0.3,0.3];    // darker gray\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // rounded main box\n        minkowski() {\n            cube([80,60,22], center=true);\n            sphere(2);\n        }\n        // hollow inside\n        translate([0,0,-1])\n        cube([76,56,25], center=true);\n    }\n}\n\n// Front panel with label recess\nmodule front_panel() {\n    difference() {\n        color(panel_col)\n        translate([0,-31.5,0])\n        cube([76,3,20], center=true);\n\n        // engraved text area\n        translate([0,-32.5,5])\n        cube([30,1,4], center=true);\n    }\n}\n\n// Indicator LEDs\nmodule leds() {\n    for (x = [-30,-20,-10,0,10,20,30]) {\n        color(led_col)\n        translate([x,-32.5,8])\n        cylinder(h=1.5, d=3, $fn=16);\n    }\n}\n\n// Push-button\nmodule button() {\n    color(button_col)\n    translate([30,-32.5,2])\n    cylinder(h=4, d=6, $fn=32);\n}\n\n// RJ-11 port module\nmodule rj11_port() {\n    color(port_col)\n    translate([-30,-31,0])\n    cube([12,8,8], center=true);\n}\n\n// Power jack barrel\nmodule power_jack() {\n    color(port_col)\n    rotate([90,0,0])\n    translate([-10,-31,0])\n    cylinder(h=10, d=8, $fn=32);\n}\n\n// Ventilation slots\nmodule vents() {\n    for (y = [-22,-12,-2,8,18]) {\n        translate([0,y,12])\n        cube([78,2,1], center=true);\n    }\n}\n\n// Assemble the MiniModem\nunion() {\n    color(case_col) body_shell();\n    front_panel();\n    leds();\n    button();\n    rj11_port();\n    power_jack();\n    vents();\n}",
    "renders": true
  },
  {
    "electronic_device": "microcell",
    "openscad_code": "// 5G Microcell Base Station\n// Realistic medium-complexity model suitable for 3D printing\n\n// Main dimensions\nbase_w = 60;\nbase_d = 40;\nbase_h = 10;\ntower_h = 80;\ntower_r = 6;\npanel_w = 20;\npanel_h = 15;\npanel_th = 2;\n\nmodule base_station() {\n    color(\"lightgray\") \n    difference() {\n        // Main enclosure\n        translate([0, 0, base_h/2])\n            rounded_cube([base_w, base_d, base_h], 3);\n        \n        // Cooling vents on sides\n        for (i = [-1, 1])\n            translate([i * (base_w/2 - 2), 0, base_h/2])\n                cube([4, base_d + 1, base_h - 4], center = true);\n    }\n    \n    // LED status ring\n    translate([0, 0, base_h + 1])\n        color(\"blue\") \n        cylinder(h = 0.5, r = 18, $fn = 32);\n    \n    // Mounting bracket\n    translate([0, base_d/2 + 5, base_h/2])\n        color(\"darkgray\")\n        cube([30, 10, base_h], center = true);\n}\n\nmodule tower() {\n    // Central pole\n    color(\"darkgray\")\n    translate([0, 0, base_h + tower_h/2])\n        cylinder(h = tower_h, r = tower_r, $fn = 32);\n    \n    // Antenna arrays (4 sides)\n    for (angle = [0, 90, 180, 270]) {\n        rotate([0, 0, angle])\n            translate([tower_r + panel_w/2 + 1, 0, base_h + tower_h * 0.7])\n                antenna_panel();\n    }\n    \n    // Top cap\n    translate([0, 0, base_h + tower_h + 2])\n        color(\"black\")\n        sphere(r = 4, $fn = 16);\n}\n\nmodule antenna_panel() {\n    color(\"white\")\n    difference() {\n        // Main panel\n        cube([panel_w, panel_th, panel_h], center = true);\n        \n        // Radiating elements\n        for (row = [-1, 0, 1])\n            for (col = [-1, 0, 1])\n                translate([col * 5, 0, row * 4])\n                    cube([2, panel_th + 0.1, 1], center = true);\n    }\n}\n\nmodule rounded_cube(size, radius) {\n    // Create rounded cube using hull of spheres\n    hull() {\n        for (dx = [-1, 1])\n            for (dy = [-1, 1])\n                for (dz = [-1, 1])\n                    translate([dx * (size[0]/2 - radius), \n                              dy * (size[1]/2 - radius), \n                              dz * (size[2]/2 - radius)])\n                        sphere(r = radius, $fn = 16);\n    }\n}\n\n// Assembly\nunion() {\n    base_station();\n    tower();\n    \n    // Cable entry\n    translate([base_w/2 + 3, 0, base_h/2])\n        color(\"black\")\n        rotate([0, 90, 0])\n            cylinder(h = 6, r = 3, $fn = 16);\n    \n    // Grounding plate\n    translate([0, -base_d/2 - 2, 2])\n        color(\"gold\")\n        cube([20, 4, 4], center = true);\n}",
    "renders": true
  },
  {
    "electronic_device": "femtocell",
    "openscad_code": "// Femtocell device - realistic medium complexity\n// Overall dimensions: 80mm x 80mm x 25mm\n\n$fn = 32;\n\n// Main colors\ncolor_case = [0.15, 0.15, 0.15];\ncolor_front = [0.8, 0.8, 0.8];\ncolor_ports = [0.2, 0.2, 0.2];\ncolor_led = [0, 1, 0];\ncolor_antenna = [0.5, 0.5, 0.5];\n\n// Main case\nmodule main_case() {\n    color(color_case)\n    difference() {\n        // Main body\n        cube([80, 80, 25], center = true);\n        \n        // Top chamfers\n        translate([0, 0, 12.5])\n        for(x = [-37.5, 37.5], y = [-37.5, 37.5])\n            translate([x, y, 0])\n            rotate([0, 0, 45])\n            cube([10, 10, 15], center = true);\n        \n        // Ventilation slots on top\n        for(y = [-30, -20, -10, 0, 10, 20, 30])\n            translate([0, y, 12.5])\n            cube([70, 2, 5], center = true);\n    }\n}\n\n// Front panel with LEDs and button\nmodule front_panel() {\n    translate([0, 0, 5])\n    color(color_front)\n    difference() {\n        // Panel\n        cube([76, 76, 2], center = true);\n        \n        // LED indicators\n        translate([-25, 30, 1])\n        cylinder(h = 3, r = 2);\n        translate([-10, 30, 1])\n        cylinder(h = 3, r = 2);\n        translate([5, 30, 1])\n        cylinder(h = 3, r = 2);\n        translate([20, 30, 1])\n        cylinder(h = 3, r = 2);\n        \n        // Reset button hole\n        translate([30, -30, 1])\n        cylinder(h = 3, r = 3);\n    }\n    \n    // LEDs\n    translate([-25, 30, 7])\n    color(color_led)\n    sphere(r = 1.5);\n    translate([-10, 30, 7])\n    color([1, 1, 0])\n    sphere(r = 1.5);\n    translate([5, 30, 7])\n    color([0, 0.5, 1])\n    sphere(r = 1.5);\n    translate([20, 30, 7])\n    color([1, 0, 0])\n    sphere(r = 1.5);\n    \n    // Reset button\n    translate([30, -30, 6.5])\n    color([0.3, 0.3, 0.3])\n    cylinder(h = 2, r = 2.5);\n}\n\n// Rear ports\nmodule rear_ports() {\n    translate([0, -37.5, -5])\n    color(color_ports)\n    union() {\n        // Power port\n        translate([-25, 0, 0])\n        cube([10, 5, 8], center = true);\n        \n        // Ethernet ports\n        translate([-5, 0, 0])\n        cube([10, 5, 8], center = true);\n        translate([15, 0, 0])\n        cube([10, 5, 8], center = true);\n    }\n    \n    // Port details\n    translate([-25, -35, -5])\n    color([0.1, 0.1, 0.1])\n    cube([6, 2, 4], center = true);\n    \n    translate([-5, -35, -5])\n    color([0.1, 0.1, 0.1])\n    cube([6, 2, 4], center = true);\n    \n    translate([15, -35, -5])\n    color([0.1, 0.1, 0.1])\n    cube([6, 2, 4], center = true);\n}\n\n// Antennas\nmodule antennas() {\n    color(color_antenna)\n    union() {\n        // Left antenna\n        translate([-35, 0, 10])\n        rotate([0, 90, 0])\n        cylinder(h = 20, r = 2);\n        \n        // Right antenna\n        translate([35, 0, 10])\n        rotate([0, 90, 0])\n        cylinder(h = 20, r = 2);\n        \n        // Antenna bases\n        translate([-35, 0, 0])\n        cylinder(h = 10, r1 = 5, r2 = 3);\n        translate([35, 0, 0])\n        cylinder(h = 10, r1 = 5, r2 = 3);\n    }\n}\n\n// Status display\nmodule status_display() {\n    translate([0, 0, 7])\n    color([0.05, 0.05, 0.05])\n    cube([40, 15, 0.5], center = true);\n    \n    // Display segments\n    for(i = [-15:5:15])\n        translate([i, 0, 7.5])\n        color([0, 0.8, 0])\n        cube([3, 10, 0.1], center = true);\n}\n\n// Rubber feet\nmodule feet() {\n    color([0.1, 0.1, 0.1])\n    for(x = [-30, 30], y = [-30, 30])\n        translate([x, y, -12.5])\n        cylinder(h = 2, r = 3);\n}\n\n// Assembly\nmain_case();\nfront_panel();\nrear_ports();\nantennas();\nstatus_display();\nfeet();",
    "renders": true
  },
  {
    "electronic_device": "picocell",
    "openscad_code": "// Picocell base dimensions\nbase_width = 45;\nbase_depth = 30;\nbase_height = 15;\n\n// Antenna parameters\nantenna_diameter = 8;\nantenna_segments = 5;\nantenna_height = 25;\n\n// LED indicators\nled_diameter = 2;\nled_depth = 1;\n\n// Port cutouts\neth_width = 12;\neth_height = 8;\neth_depth = 3;\n\nusb_width = 8;\nusb_height = 4;\nusb_depth = 3;\n\n// Wall thickness\nwall = 1.5;\n\nmodule picocell_body() {\n    difference() {\n        // Main enclosure\n        color(\"gray\") cube([base_width, base_depth, base_height], center=true);\n        \n        // Hollow inside\n        translate([0, 0, -wall/2]) \n            cube([base_width-wall*2, base_depth-wall*2, base_height-wall], center=true);\n        \n        // Ethernet port\n        translate([-base_width/2 - eth_depth/2, 0, -base_height/2 + eth_height/2 + 2])\n            cube([eth_depth, eth_width, eth_height], center=true);\n        \n        // USB port\n        translate([-base_width/2 - usb_depth/2, -10, -base_height/2 + usb_height/2 + 2])\n            cube([usb_depth, usb_width, usb_height], center=true);\n        \n        // Ventilation slots on top\n        for(i = [-20:5:20]) {\n            translate([i, 0, base_height/2 - 1])\n                cube([3, base_depth - 4, 2]);\n        }\n    }\n}\n\nmodule antenna() {\n    // Antenna base\n    color(\"black\") \n        translate([0, 0, base_height/2 + 2]) \n        cylinder(h=4, d=antenna_diameter + 4, center=true);\n    \n    // Antenna segments\n    for(i = [0:antenna_segments-1]) {\n        color(\"black\") \n            translate([0, 0, base_height/2 + 4 + i*5]) \n            cylinder(h=3, d=antenna_diameter - i*1.2, center=true);\n    }\n    \n    // Antenna tip\n    color(\"black\") \n        translate([0, 0, base_height/2 + antenna_height]) \n        sphere(d=antenna_diameter - antenna_segments*1.2);\n}\n\nmodule led_indicators() {\n    // Power LED\n    color(\"green\") \n        translate([base_width/2 - 5, 10, base_height/2 - led_depth/2]) \n        cylinder(h=led_depth, d=led_diameter);\n    \n    // Status LED\n    color(\"blue\") \n        translate([base_width/2 - 5, 0, base_height/2 - led_depth/2]) \n        cylinder(h=led_depth, d=led_diameter);\n    \n    // Signal LED\n    color(\"red\") \n        translate([base_width/2 - 5, -10, base_height/2 - led_depth/2]) \n        cylinder(h=led_depth, d=led_diameter);\n}\n\nmodule mounting_feet() {\n    // Rubber feet\n    for(x = [-base_width/2 + 8, base_width/2 - 8]) {\n        for(y = [-base_depth/2 + 8, base_depth/2 - 8]) {\n            color(\"black\") \n                translate([x, y, -base_height/2 - 1]) \n                cylinder(h=2, d=6);\n        }\n    }\n}\n\nmodule label_area() {\n    // Recessed label area\n    difference() {\n        color(\"gray\") \n            translate([0, base_depth/2 - 4, 0]) \n            cube([30, 8, 0.5], center=true);\n        \n        // Recess\n        translate([0, base_depth/2 - 4, 0.25]) \n            cube([28, 6, 0.5], center=true);\n    }\n}\n\n// Assemble the picocell\npicocell_body();\nantenna();\nled_indicators();\nmounting_feet();\nlabel_area();",
    "renders": true
  },
  {
    "electronic_device": "nanocell",
    "openscad_code": "// Nanocell Electronic Device – medium-complexity realistic style\n// Overall size ≈ 65 × 35 × 11 mm, printable without support\n\n$fa = 1;\n$fs = 0.5;\n\n// Main colors\ncolor_body   = \"SlateGray\";\ncolor_screen = \"Black\";\ncolor_frame  = \"Silver\";\ncolor_btn    = \"DimGray\";\ncolor_port   = \"Gold\";\n\nmodule nanocell() {\n    // Main body shell (rounded rectangle profile)\n    hull() {\n        translate([-31.5, -17, 0]) sphere(d=2);\n        translate([31.5, -17, 0]) sphere(d=2);\n        translate([31.5, 17, 0])  sphere(d=2);\n        translate([-31.5, 17, 0]) sphere(d=2);\n    }\n    linear_extrude(height=10, convexity=10)\n        offset(r=1)\n        square([63, 34], center=true);\n\n    // Top plate/frame\n    color(color_frame)\n    translate([0, 0, 10])\n    cube([65, 35, 0.5], center=true);\n\n    // Screen recess\n    color(color_screen)\n    translate([0, 0, 10.6])\n    cube([38, 28, 0.3], center=true);\n\n    // Screen border\n    color(color_frame)\n    translate([0, 0, 10.3])\n    cube([40, 30, 0.2], center=true);\n\n    // Side buttons (power & volume)\n    for (y = [-8, 8]) {\n        color(color_btn)\n        translate([-32.5, y, 7])\n        cube([1.5, 4, 2]);\n    }\n\n    // Bottom ports – USB-C + mic\n    color(color_port)\n    translate([10, -17.3, 2])\n    rotate([90, 0, 0])\n    cylinder(h=2.8, d=8.4, $fn=40);\n\n    color(color_btn)\n    translate([-15, -17.3, 2])\n    rotate([90, 0, 0])\n    cylinder(h=2.8, d=3, $fn=20);\n\n    // Rear camera bump\n    color(color_frame)\n    translate([18, 12, 10])\n    cylinder(h=1.5, d=8, $fn=40);\n\n    color(color_screen)\n    translate([18, 12, 11.6])\n    cylinder(h=0.2, d=6, $fn=40);\n\n    // Antenna lines\n    color(\"White\")\n    for (x = [-25, 25]) {\n        translate([x, -17.3, 5])\n        cube([0.5, 0.5, 10]);\n        translate([x, 17.3, 5])\n        cube([0.5, 0.5, 10]);\n    }\n\n    // Logo (simple raised text)\n    color(\"White\")\n    translate([0, 0, 10.8])\n    linear_extrude(height=0.1)\n        text(\"NANO\", size=4, halign=\"center\", valign=\"center\");\n}\n\ncolor(color_body) nanocell();",
    "renders": true
  },
  {
    "electronic_device": "smallcell",
    "openscad_code": "// SmallCell 5G Base Station – 1:10 scale, 3-D printable, medium complexity\n// All dimensions in mm, wall-thickness ≥1.2 mm, no overhang >45°\n\n$fn = 32;               // global smoothness\n\n/* ---- overall size ---- */\nw = 60;     // width\nd = 40;     // depth\nh = 90;     // height (pole-mount bracket excluded)\n\nmodule smallcell() {\n    // Main housing – extruded aluminium look\n    color(\"silver\")\n    difference() {\n        rounded_box([w, d, h], 3);     // outer shell\n        rounded_box([w-2.4, d-2.4, h-2], 3);  // hollow inside\n    }\n\n    // Front plastic radome\n    color([0.05,0.05,0.05])\n    translate([0, 0, 0])\n    difference() {\n        rounded_box([w+0.2, d+0.2, 5], 3);\n        offset_box([w-2, d-2, 6], 3);\n    }\n\n    // Status LEDs on front\n    translate([0, d/2+0.1, h*0.7])\n    for (i=[-1:1])\n        translate([i*8, 0, 0])\n            color(\"lime\")\n            cylinder(h=1.5, d=3);\n\n    // RJ-45 port on bottom face\n    color(\"black\")\n    translate([0, -d/2-0.1, h*0.3])\n    rotate([90,0,0])\n        cube([12, 15, 7], center=true);\n\n    // Power gland + cable\n    color(\"black\")\n    translate([-w/2-0.1, 0, h*0.2])\n    rotate([0,90,0])\n        cylinder(h=10, d=8);\n    translate([-w/2-6, 0, h*0.2])\n    rotate([90,0,0])\n        cylinder(h=20, d=5);\n\n    // Vent slots on sides\n    for (side=[-1,1])\n        translate([side*w/2+0.1, 0, h*0.5])\n        rotate([0,90,0])\n            for (z=[-20:10:20])\n                translate([0,0,z])\n                    cube([20, 2, 5]);\n\n    // Antenna arrays – stylised patch panels\n    color(\"silver\")\n    for (row=[-1,1])\n        translate([0, d/2-5-row*10, h*0.4])\n        for (col=[-2:2])\n            translate([col*10, 0, 0])\n                cube([7, 2, 5]);\n\n    // Pole-mount bracket\n    color(\"gray40\")\n    difference() {\n        translate([0, 0, -20])\n            cube([w, 20, 8], center=true);\n        translate([0, 10, -20])\n            cylinder(h=12, d=40);\n    }\n}\n\n/* ---- helper modules ---- */\nmodule rounded_box(s, r) {\n    hull() {\n        translate([ s[0]/2-r,  s[1]/2-r,  s[2]/2-r]) sphere(r=r);\n        translate([-s[0]/2+r,  s[1]/2-r,  s[2]/2-r]) sphere(r=r);\n        translate([ s[0]/2-r, -s[1]/2+r,  s[2]/2-r]) sphere(r=r);\n        translate([-s[0]/2+r, -s[1]/2+r,  s[2]/2-r]) sphere(r=r);\n        translate([ s[0]/2-r,  s[1]/2-r, -s[2]/2+r]) sphere(r=r);\n        translate([-s[0]/2+r,  s[1]/2-r, -s[2]/2+r]) sphere(r=r);\n        translate([ s[0]/2-r, -s[1]/2+r, -s[2]/2+r]) sphere(r=r);\n        translate([-s[0]/2+r, -s[1]/2+r, -s[2]/2+r]) sphere(r=r);\n    }\n}\n\nmodule offset_box(s, r) {\n    rounded_box([s[0]-2*r, s[1]-2*r, s[2]], r);\n}\n\nsmallcell();",
    "renders": true
  },
  {
    "electronic_device": "cellcard",
    "openscad_code": "// Cellcard Electronic Device - Realistic Style\n// Medium complexity OpenSCAD model\n\n$fn = 50;\n\n// Main dimensions\ncard_width = 85;\ncard_height = 54;\ncard_thickness = 4.5;\ncorner_radius = 3;\nscreen_width = 30;\nscreen_height = 20;\nbutton_diameter = 4;\nport_width = 10;\nport_height = 2.5;\n\n// Colors\ncolor_body = [0.15, 0.15, 0.15];\ncolor_screen = [0, 0.2, 0.8];\ncolor_metal = [0.7, 0.7, 0.7];\ncolor_button = [0.9, 0.9, 0.9];\ncolor_gold = [0.8, 0.6, 0.2];\n\n// Rounded card body with filleted edges\nmodule card_body() {\n    difference() {\n        // Main body\n        color(color_body)\n        minkowski() {\n            cube([card_width-2*corner_radius, card_height-2*corner_radius, card_thickness], center=true);\n            sphere(corner_radius);\n        }\n        \n        // Hollow center for electronics\n        translate([0, 0, card_thickness/4])\n        cube([card_width-5, card_height-5, card_thickness/2], center=true);\n    }\n}\n\n// Screen display\nmodule screen() {\n    translate([0, -10, card_thickness/2 + 0.1])\n    color(color_screen)\n    cube([screen_width, screen_height, 0.2], center=true);\n    \n    // Screen bezel\n    translate([0, -10, card_thickness/2 + 0.05])\n    color(color_metal)\n    cube([screen_width + 2, screen_height + 2, 0.1], center=true);\n}\n\n// Navigation buttons\nmodule buttons() {\n    // Up button\n    translate([0, 15, card_thickness/2 + 0.1])\n    color(color_button)\n    cylinder(h=0.5, d=button_diameter);\n    \n    // Down button\n    translate([0, 20, card_thickness/2 + 0.1])\n    color(color_button)\n    cylinder(h=0.5, d=button_diameter);\n    \n    // Select button\n    translate([0, 25, card_thickness/2 + 0.1])\n    color(color_button)\n    cylinder(h=0.5, d=button_diameter);\n}\n\n// SIM card contacts\nmodule sim_contacts() {\n    for(i = [0:5]) {\n        translate([card_width/2 - 8 - i*2.5, card_height/2 - 8, card_thickness/2 + 0.05])\n        color(color_gold)\n        cube([1.8, 4, 0.1]);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    translate([card_width/2 - 5, 0, -card_thickness/2 - 0.1])\n    difference() {\n        color(color_metal)\n        cube([port_width, port_width/2, port_height]);\n        \n        // Port opening\n        translate([0.5, 0, 0.5])\n        cube([port_width-1, port_width/2-1, port_height+0.2]);\n    }\n}\n\n// LED indicators\nmodule indicators() {\n    // Power LED\n    translate([-card_width/2 + 5, card_height/2 - 5, card_thickness/2 + 0.1])\n    color([0, 1, 0])\n    cylinder(h=0.3, d=2);\n    \n    // Network LED\n    translate([-card_width/2 + 10, card_height/2 - 5, card_thickness/2 + 0.1])\n    color([0, 0.5, 1])\n    cylinder(h=0.3, d=2);\n}\n\n// Antenna lines\nmodule antenna_lines() {\n    // Top antenna line\n    translate([0, card_height/2 - 3, 0])\n    color(color_metal)\n    cube([card_width-4, 0.5, card_thickness*0.8], center=true);\n    \n    // Bottom antenna line\n    translate([0, -card_height/2 + 3, 0])\n    color(color_metal)\n    cube([card_width-4, 0.5, card_thickness*0.8], center=true);\n}\n\n// Branding text area\nmodule branding() {\n    translate([0, 0, card_thickness/2 + 0.1])\n    color(color_metal)\n    cube([20, 5, 0.1], center=true);\n}\n\n// Assembly\nunion() {\n    card_body();\n    screen();\n    buttons();\n    sim_contacts();\n    usb_port();\n    indicators();\n    antenna_lines();\n    branding();\n}",
    "renders": true
  },
  {
    "electronic_device": "mobilecard",
    "openscad_code": "// Mobilecard electronic device - realistic style, medium complexity\n// Overall dimensions: 85mm x 54mm x 6mm (standard credit card size)\n\n// Main card body\nmodule card_body() {\n    difference() {\n        // Main plastic card\n        translate([0, 0, 0])\n            color([0.95, 0.95, 0.95])\n            cube([85, 54, 6], center=true);\n        \n        // Rounded corners\n        translate([0, 0, 3])\n            linear_extrude(height=6)\n            offset(r=3)\n            offset(delta=-3)\n            square([85, 54], center=true);\n    }\n}\n\n// Metallic contact pad\nmodule contact_pad() {\n    translate([-42.5 + 15, -27 + 12, 3])\n        color([0.7, 0.7, 0.7])\n        linear_extrude(height=0.5)\n        square([20, 15]);\n    \n    // Contact fingers\n    for(i = [0:7]) {\n        translate([-42.5 + 16 + i*2.2, -27 + 13, 3.6])\n            color([0.5, 0.5, 0.5])\n            cube([1.8, 13, 0.3]);\n    }\n}\n\n// Microchip visible through translucent plastic\nmodule chip() {\n    translate([-42.5 + 25, -27 + 27, 1])\n        color([0.1, 0.1, 0.1])\n        cube([8, 8, 2]);\n    \n    // Bond wires\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n            translate([20, 0, 2])\n                color([0.8, 0.8, 0.1])\n                cube([3, 0.1, 0.05]);\n    }\n}\n\n// NFC antenna coil\nmodule nfc_antenna() {\n    difference() {\n        // Antenna substrate\n        translate([0, 0, 0.1])\n            color([0.8, 0.8, 0.8])\n            cube([80, 49, 0.2], center=true);\n        \n        // Cutout area\n        translate([0, 0, 0])\n            cube([60, 30, 2], center=true);\n    }\n    \n    // Antenna coil traces\n    for(i = [1:5]) {\n        offset = i * 2;\n        translate([0, 0, 0.2])\n            color([0.9, 0.7, 0.2])\n            linear_extrude(height=0.05)\n            offset(delta=-offset)\n            square([78, 47], center=true);\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    translate([42.5 - 8, 27 - 8, 3.1])\n        color([0.1, 0.1, 0.1])\n        cylinder(h=0.5, d=2, $fn=20);\n    \n    translate([42.5 - 8, 27 - 8, 3.6])\n        color([0.2, 0.8, 0.2])\n        sphere(d=1.8, $fn=20);\n}\n\n// Magnetic stripe\nmodule magnetic_stripe() {\n    translate([0, -27 + 16, 3.1])\n        color([0.2, 0.2, 0.2])\n        cube([85, 12, 0.1], center=false);\n}\n\n// Embossed card number\nmodule card_number() {\n    for(i = [0:15]) {\n        digit = i % 10;\n        x_pos = -42.5 + 10 + (i % 4) * 5;\n        y_pos = 27 - 10 - floor(i / 4) * 4;\n        \n        translate([x_pos, y_pos, 3.1])\n            color([0.3, 0.3, 0.3])\n            linear_extrude(height=0.3)\n            text(str(digit), size=3, font=\"Arial:style=Bold\");\n    }\n}\n\n// Embossed name\nmodule card_holder() {\n    translate([-42.5 + 10, 27 - 20, 3.1])\n        color([0.3, 0.3, 0.3])\n        linear_extrude(height=0.3)\n        text(\"ELECTRONIC\", size=3, font=\"Arial:style=Bold\");\n}\n\n// Expiry date\nmodule expiry_date() {\n    translate([42.5 - 15, 27 - 20, 3.1])\n        color([0.3, 0.3, 0.3])\n        linear_extrude(height=0.3)\n        text(\"12/28\", size=3, font=\"Arial:style=Bold\");\n}\n\n// Assemble the complete mobilecard\nunion() {\n    card_body();\n    \n    translate([0, 0, 2.9])\n        nfc_antenna();\n    \n    translate([0, 0, 3])\n        chip();\n    \n    contact_pad();\n    magnetic_stripe();\n    card_number();\n    card_holder();\n    expiry_date();\n    led_indicator();\n}",
    "renders": true
  },
  {
    "electronic_device": "dataphone",
    "openscad_code": "// Dataphone Electronic Payment Terminal\n// Realistic style, medium complexity\n// Approximate size: 80mm x 60mm x 25mm\n\n$fn = 50;\n\n// Main colors\ncolor_case = [0.15, 0.15, 0.15];\ncolor_screen = [0.1, 0.1, 0.3];\ncolor_keys = [0.2, 0.2, 0.2];\ncolor_display = [0.9, 0.9, 0.9];\ncolor_logo = [0.8, 0.8, 0.8];\ncolor_led = [0, 1, 0];\n\n// Main body\nmodule main_body() {\n    color(color_case) {\n        rounded_cube([80, 60, 25], 3);\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(size, radius) {\n    hull() {\n        translate([radius, radius, 0])\n            cylinder(h=size[2], r=radius);\n        translate([size[0]-radius, radius, 0])\n            cylinder(h=size[2], r=radius);\n        translate([size[0]-radius, size[1]-radius, 0])\n            cylinder(h=size[2], r=radius);\n        translate([radius, size[1]-radius, 0])\n            cylinder(h=size[2], r=radius);\n        for(x=[radius, size[0]-radius])\n            for(y=[radius, size[1]-radius])\n                translate([x, y, radius])\n                    sphere(r=radius);\n    }\n}\n\n// Display screen\nmodule display() {\n    translate([5, 5, 25.1]) {\n        // Screen bezel\n        color(color_screen)\n            cube([50, 35, 1]);\n        \n        // Active display area\n        translate([2.5, 2.5, 0.6])\n            color(color_display)\n                cube([45, 30, 0.5]);\n    }\n}\n\n// Keypad\nmodule keypad() {\n    translate([60, 8, 25.1]) {\n        // Keypad base\n        color(color_case)\n            cube([15, 44, 1]);\n        \n        // Number keys 0-9\n        for(i=[0:9]) {\n            x_pos = (i % 3) * 4.5 + 1.5;\n            y_pos = floor(i / 3) * 4.5 + 1.5;\n            if(i == 9) {\n                x_pos = 4.5;\n                y_pos = 4.5 * 3 + 1.5;\n            }\n            translate([x_pos, y_pos, 1.1])\n                color(color_keys)\n                    cylinder(h=0.8, r=1.5);\n        }\n        \n        // Enter key\n        translate([1.5, 1, 1.1])\n            color(color_keys)\n                cube([12, 3, 0.8]);\n    }\n}\n\n// Card reader slot\nmodule card_slot() {\n    translate([5, 55, 10]) {\n        difference() {\n            // Raised area\n            color(color_case)\n                cube([70, 8, 8]);\n            \n            // Slot opening\n            translate([10, 2, 4])\n                cube([50, 4, 2]);\n        }\n    }\n}\n\n// Contactless reader area\nmodule nfc_area() {\n    translate([15, 25, 25.1]) {\n        // NFC symbol area\n        color([0.3, 0.3, 0.9])\n            cube([25, 25, 0.5]);\n        \n        // NFC waves\n        for(i=[1:3]) {\n            color([0.5, 0.5, 1])\n            translate([12.5, 12.5, 0.6])\n            rotate([0, 0, 45])\n            difference() {\n                cube([i*3, 1, 0.3]);\n                cube([i*3, 0.5, 0.3]);\n            }\n        }\n    }\n}\n\n// Status LED\nmodule status_led() {\n    translate([75, 5, 25.5]) {\n        color(color_led)\n            sphere(r=1.5);\n    }\n}\n\n// Speaker grill\nmodule speaker_grill() {\n    translate([5, 45, 25.1]) {\n        color(color_case)\n            cube([30, 8, 1]);\n        \n        // Small holes\n        for(i=[0:5]) {\n            translate([3 + i*4.5, 2, 1.1])\n                cylinder(h=1, r=0.5);\n        }\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    translate([40, -0.5, 12]) {\n        color([0.1, 0.1, 0.1])\n            cube([10, 2, 5]);\n    }\n}\n\n// Logo\nmodule logo() {\n    translate([70, 45, 25.1]) {\n        color(color_logo)\n            cube([8, 8, 0.3]);\n        \n        // Simple text representation\n        translate([2, 3.5, 0.4])\n            color([0, 0, 0])\n                cube([4, 1, 0.1]);\n    }\n}\n\n// Assembly\nmain_body();\ndisplay();\nkeypad();\ncard_slot();\nnfc_area();\nstatus_led();\nspeaker_grill();\nusb_port();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "textphone",
    "openscad_code": "// Textphone - Realistic style, medium complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n// Main dimensions\nphone_width = 80;\nphone_height = 50;\nphone_depth = 25;\nwall_thickness = 2;\n\n// Colors\ncolor_case = [0.15, 0.15, 0.15];  // Dark gray\ncolor_screen = [0.1, 0.1, 0.1];   // Black\ncolor_keys = [0.8, 0.8, 0.8];     // Light gray\ncolor_display = [0.2, 0.3, 0.5];  // Blue display\ncolor_text = [0.9, 0.9, 0.9];     // White text\ncolor_port = [0.3, 0.3, 0.3];     // Dark gray ports\n\n// Main case\nmodule main_case() {\n    color(color_case)\n    difference() {\n        // Outer shell\n        cube([phone_width, phone_depth, phone_height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness/2])\n        cube([phone_width-wall_thickness*2, phone_depth-wall_thickness*2, phone_height-wall_thickness], center=true);\n        \n        // Rounded edges\n        translate([phone_width/2-wall_thickness, phone_depth/2-wall_thickness, phone_height/2-wall_thickness])\n        sphere(r=wall_thickness*2, $fn=16);\n        translate([-phone_width/2+wall_thickness, phone_depth/2-wall_thickness, phone_height/2-wall_thickness])\n        sphere(r=wall_thickness*2, $fn=16);\n        translate([phone_width/2-wall_thickness, -phone_depth/2+wall_thickness, phone_height/2-wall_thickness])\n        sphere(r=wall_thickness*2, $fn=16);\n        translate([-phone_width/2+wall_thickness, -phone_depth/2+wall_thickness, phone_height/2-wall_thickness])\n        sphere(r=wall_thickness*2, $fn=16);\n    }\n}\n\n// LCD display\nmodule lcd_display() {\n    translate([0, -phone_depth/2+1, phone_height/2-12])\n    color(color_screen)\n    cube([phone_width-wall_thickness*4, wall_thickness, 10], center=false);\n    \n    // Screen surface\n    translate([0, -phone_depth/2+1.5, phone_height/2-11])\n    color(color_display)\n    cube([phone_width-wall_thickness*6, 0.5, 8], center=false);\n}\n\n// Keypad with text labels\nmodule keypad() {\n    // Keypad base\n    translate([0, -phone_depth/2+1, phone_height/2-25])\n    color([0.2, 0.2, 0.2])\n    cube([phone_width-wall_thickness*4, wall_thickness, 12], center=false);\n    \n    // Individual keys\n    for(x = [-3:3]) {\n        for(y = [0:2]) {\n            translate([x*8, -phone_depth/2+2, phone_height/2-24+y*3.5])\n            color(color_keys)\n            cube([6, 0.5, 2.5], center=true);\n        }\n    }\n}\n\n// Function buttons\nmodule function_buttons() {\n    // Power button\n    translate([phone_width/2-8, -phone_depth/2+1, phone_height/2-8])\n    color([0.9, 0.2, 0.2])\n    cube([4, 0.5, 2], center=false);\n    \n    // Volume buttons\n    translate([phone_width/2-8, -phone_depth/2+1, phone_height/2-12])\n    color([0.2, 0.2, 0.9])\n    cube([2, 0.5, 1.5], center=false);\n    \n    translate([phone_width/2-8, -phone_depth/2+1, phone_height/2-14])\n    color([0.2, 0.2, 0.9])\n    cube([2, 0.5, 1.5], center=false);\n}\n\n// Speaker grille\nmodule speaker_grille() {\n    translate([-phone_width/2+5, -phone_depth/2+1, phone_height/2-20])\n    color([0.1, 0.1, 0.1])\n    for(i = [0:7]) {\n        translate([i*2.5, 0, 0])\n        cube([0.5, 0.5, 8], center=false);\n    }\n}\n\n// Microphone hole\nmodule microphone() {\n    translate([phone_width/2-5, -phone_depth/2+1, phone_height/2-30])\n    color([0.1, 0.1, 0.1])\n    cylinder(h=0.5, r=1.5, center=false);\n}\n\n// Ports\nmodule ports() {\n    // USB-C port\n    translate([0, phone_depth/2-wall_thickness, 0])\n    color(color_port)\n    cube([8, wall_thickness, 3], center=true);\n    \n    // 3.5mm jack\n    translate([-10, phone_depth/2-wall_thickness, 0])\n    color(color_port)\n    cylinder(h=wall_thickness, r=2, center=true);\n}\n\n// LED indicator\nmodule led_indicator() {\n    translate([phone_width/2-3, -phone_depth/2+1, phone_height/2-3])\n    color([0, 1, 0])\n    cylinder(h=0.5, r=1, center=false);\n}\n\n// Braille labels\nmodule braille_labels() {\n    translate([-phone_width/2+10, -phone_depth/2+1, phone_height/2-15])\n    color(color_text)\n    for(i = [0:2]) {\n        for(j = [0:1]) {\n            translate([i*3, 0, j*3])\n            sphere(r=0.3, $fn=8);\n        }\n    }\n}\n\n// Assemble the textphone\nmain_case();\nlcd_display();\nkeypad();\nfunction_buttons();\nspeaker_grille();\nmicrophone();\nports();\nled_indicator();\nbraille_labels();",
    "renders": true
  },
  {
    "electronic_device": "pushphone",
    "openscad_code": "// Pushphone - Realistic style, medium complexity\n// Overall dimensions: 60mm x 120mm x 25mm\n\n// Phone body\nmodule phone_body() {\n    color(\"darkslategray\")\n    difference() {\n        // Main body\n        cube([60, 120, 25], center=true);\n        \n        // Speaker holes (top)\n        for (x = [-20:10:20])\n            for (y = [50:5:55])\n                translate([x, y, 12.1])\n                    cylinder(h=3, d=2, $fn=8);\n        \n        // Microphone holes (bottom)\n        for (x = [-20:10:20])\n            for (y = [-50:5:-45])\n                translate([x, y, 12.1])\n                    cylinder(h=3, d=2, $fn=8);\n    }\n}\n\n// Keypad\nmodule keypad() {\n    color(\"black\")\n    difference() {\n        // Keypad surface\n        translate([0, 5, 0])\n            cube([45, 60, 2], center=true);\n        \n        // Button holes\n        for (row = [0:3])\n            for (col = [0:2]) {\n                x = -15 + col * 15;\n                y = 25 - row * 15;\n                translate([x, y, 1.1])\n                    cylinder(h=3, d=10, $fn=16);\n            }\n    }\n}\n\n// Individual keys\nmodule keys() {\n    color(\"white\")\n    for (row = [0:3])\n        for (col = [0:2]) {\n            x = -15 + col * 15;\n            y = 25 - row * 15;\n            translate([x, y, 2])\n                cylinder(h=2, d=9, $fn=16);\n        }\n}\n\n// Display screen\nmodule display() {\n    color(\"black\")\n    translate([0, 45, 1])\n        cube([35, 15, 1], center=true);\n    \n    color(\"lightblue\")\n    translate([0, 45, 2.1])\n        cube([32, 12, 0.5], center=true);\n}\n\n// Antenna stub\nmodule antenna() {\n    color(\"darkslategray\")\n    translate([0, 60, 12.5])\n        cylinder(h=15, d=8, $fn=16);\n}\n\n// Charging port\nmodule charging_port() {\n    color(\"black\")\n    translate([20, -60, -10])\n        cube([8, 4, 5]);\n}\n\n// Volume buttons\nmodule volume_buttons() {\n    color(\"darkslategray\")\n    // Volume up\n    translate([-31, 20, 0])\n        cube([4, 10, 3]);\n    \n    // Volume down\n    translate([-31, 5, 0])\n        cube([4, 10, 3]);\n}\n\n// Power button\nmodule power_button() {\n    color(\"red\")\n    translate([31, 20, 0])\n        cube([4, 15, 3]);\n}\n\n// Brand label\nmodule brand_label() {\n    color(\"gold\")\n    translate([0, -30, 2.1])\n        cube([25, 6, 0.5], center=true);\n}\n\n// Main assembly\nphone_body();\nkeypad();\nkeys();\ndisplay();\nantenna();\ncharging_port();\nvolume_buttons();\npower_button();\nbrand_label();",
    "renders": true
  },
  {
    "electronic_device": "flipphone",
    "openscad_code": "// Flip-phone model – medium complexity, realistic style\n// All parts are printable without support\n\n$fn = 60;                 // global circle resolution\nwall = 1.2;               // 3D-print friendly wall thickness\nhingeD = 4;               // hinge pin diameter\n\n// overall scale factor – adjust to fit print bed\nscaleFactor = 0.8;\n\nmodule flipphone() {\n    // main body halves\n    color(\"silver\")\n    translate([0,-3,0])\n    union() {\n        bottomShell();\n        translate([0, 55, 0])\n            rotate([180,0,0])\n            topShell();\n    }\n}\n\n// lower half with keypad\nmodule bottomShell() {\n    difference() {\n        // outer shell\n        roundedBox([48,50,10], 3);\n\n        // screen window\n        translate([0, 18, 1.1])\n            roundedBox([42,18,1], 2);\n\n        // keypad grid\n        for (x = [-15, -5, 5, 15])\n            for (y = [-15, -5, 5])\n                translate([x, y, 5.1])\n                    cylinder(h = 1.5, d = 7.5);\n\n        // mic hole\n        translate([0, -21, 5.1])\n            cylinder(h = 1.5, d = 3);\n\n        // charging port\n        translate([0, -24.5, 3])\n            rotate([0,90,0])\n            cube([12, 4, 2]);\n    }\n\n    // inner keypad buttons\n    color(\"black\")\n    for (x = [-15, -5, 5, 15])\n        for (y = [-15, -5, 5])\n            translate([x, y, 4.9])\n                roundedBox([7,7,1], 1);\n\n    // small inner screen\n    color(\"darkblue\")\n    translate([0, 18, 0])\n        cube([40,16,0.2], center=true);\n}\n\n// upper half with main screen\nmodule topShell() {\n    difference() {\n        // outer shell\n        roundedBox([48,50,10], 3);\n\n        // main display window\n        translate([0, -5, 1.1])\n            roundedBox([42,30,1], 2);\n\n        // earpiece grille holes\n        translate([0, 21, 5.1])\n            for (i = [-6:3:6])\n                translate([i,0,0])\n                    cylinder(h = 1.5, d = 1.5);\n    }\n\n    // inner screen\n    color(\"darkblue\")\n    translate([0, -5, 0])\n        cube([40,28,0.2], center=true);\n}\n\n// helper – rounded box with optional wall thickness\nmodule roundedBox(size, r) {\n    linear_extrude(height=size.z)\n    offset(r=r) offset(-r)\n    square([size.x, size.y], center=true);\n}\n\n// scale whole model\nscale([scaleFactor, scaleFactor, scaleFactor])\nflipphone();",
    "renders": true
  },
  {
    "electronic_device": "slab",
    "openscad_code": "// Smartphone slab style device\n// Overall dimensions: 75 x 150 x 8 mm\n\n$fn = 64;\n\n// Main colors\ncolor_body = [0.15, 0.15, 0.15];\ncolor_screen = [0.05, 0.05, 0.08];\ncolor_camera = [0.2, 0.2, 0.2];\ncolor_button = [0.3, 0.3, 0.3];\ncolor_led = [0.1, 0.1, 0.9];\n\n// Main body shell with rounded edges\nmodule phone_body() {\n    color(color_body)\n    union() {\n        // Main slab\n        difference() {\n            // Outer rounded block\n            minkowski() {\n                cube([71, 146, 6.5], center = true);\n                sphere(2.5);\n            }\n            // Inner cavity for electronics\n            minkowski() {\n                cube([67, 142, 8], center = true);\n                sphere(1.5);\n            }\n            \n            // Camera hole\n            translate([30, 68, 3.5])\n                cylinder(h = 5, d = 8);\n                \n            // Flash hole\n            translate([30, 55, 3.5])\n                cylinder(h = 5, d = 4);\n                \n            // Speaker grill holes\n            for(x = [-30:6:30]) {\n                translate([x, -68, 3.5])\n                    cylinder(h = 5, d = 1);\n            }\n        }\n        \n        // Screen bezel raised edge\n        translate([0, 0, 3.5])\n            cube([69, 144, 1], center = true);\n    }\n}\n\n// Glass screen\nmodule screen() {\n    color(color_screen)\n    translate([0, 0, 4.2])\n        cube([67, 134, 0.5], center = true);\n}\n\n// Camera module with lens\nmodule camera() {\n    color(color_camera)\n    union() {\n        // Camera housing\n        translate([30, 68, 4.5])\n            cylinder(h = 2, d = 7);\n            \n        // Camera lens\n        translate([30, 68, 5.8])\n            cylinder(h = 0.5, d = 5);\n            \n        // Lens glass\n        color([0.1, 0.1, 0.1, 0.7])\n        translate([30, 68, 6.3])\n            cylinder(h = 0.2, d = 4.5);\n    }\n}\n\n// Flash LED\nmodule flash() {\n    color(color_led)\n    translate([30, 55, 5])\n        cylinder(h = 1, d = 3);\n}\n\n// Side buttons\nmodule side_buttons() {\n    color(color_button)\n    union() {\n        // Power button\n        translate([36.5, 30, 0])\n            cube([2, 12, 1.5], center = true);\n            \n        // Volume up button\n        translate([36.5, -10, 0])\n            cube([2, 8, 1.5], center = true);\n            \n        // Volume down button\n        translate([36.5, -22, 0])\n            cube([2, 8, 1.5], center = true);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    color(color_button)\n    difference() {\n        translate([0, -74, -2])\n            cube([10, 2, 4], center = true);\n        translate([0, -74, -1.5])\n            cube([8, 2.5, 3], center = true);\n    }\n}\n\n// Speaker grill pattern\nmodule speaker_grill() {\n    color(color_body)\n    for(x = [-30:6:30]) {\n        translate([x, -68, 4])\n            cylinder(h = 1, d = 0.8);\n    }\n}\n\n// Assemble the phone\nunion() {\n    phone_body();\n    screen();\n    camera();\n    flash();\n    side_buttons();\n    usb_port();\n    speaker_grill();\n}",
    "renders": true
  },
  {
    "electronic_device": "viewer",
    "openscad_code": "// Electronic Viewer Device - Medium Complexity\n// Realistic style with 3D printable features\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\nscreen_thickness = 1;\ncase_color = \"gray\";\nscreen_color = \"black\";\nbutton_color = \"darkblue\";\n\n// Main module\nmodule viewer_device() {\n    // Main body\n    union() {\n        // Front case\n        translate([0, 0, 0]) {\n            color(case_color) {\n                difference() {\n                    cube([60, 100, 8], center = true);\n                    translate([0, 0, 3.5])\n                        cube([56, 96, 2], center = true);\n                }\n            }\n        }\n        \n        // Back case\n        translate([0, 0, -8]) {\n            color(case_color) {\n                difference() {\n                    cube([60, 100, 8], center = true);\n                    translate([0, 0, -3.5])\n                        cube([56, 96, 2], center = true);\n                }\n            }\n        }\n        \n        // Screen\n        translate([0, 0, 4.5]) {\n            color(screen_color) {\n                cube([50, 70, screen_thickness], center = true);\n            }\n        }\n        \n        // Screen bezel\n        translate([0, 0, 4])\n            difference() {\n                color(\"dimgray\") {\n                    cube([54, 74, 1], center = true);\n                }\n                translate([0, 0, 0.5])\n                    cube([50, 70, 2], center = true);\n            }\n        \n        // Power button\n        translate([25, -40, 5]) {\n            color(button_color) {\n                cylinder(h = 3, r = 4, center = true);\n                translate([0, 0, 1.5])\n                    cube([2, 4, 1], center = true);\n            }\n        }\n        \n        // Volume buttons\n        for (i = [0:1]) {\n            translate([-25, -45 + i * 8, 5]) {\n                color(button_color) {\n                    cube([8, 4, 2], center = true);\n                }\n            }\n        }\n        \n        // Camera module\n        translate([20, 30, 5]) {\n            union() {\n                color(\"darkgray\") {\n                    cylinder(h = 2, r = 6, center = true);\n                }\n                translate([0, 0, 1.5])\n                    color(\"black\") {\n                        cylinder(h = 1, r = 4, center = true);\n                    }\n                translate([0, 0, 2.5])\n                    color(\"lightgray\") {\n                        sphere(r = 3);\n                    }\n            }\n        }\n        \n        // Speaker grille\n        translate([0, 48, 4.5]) {\n            for (i = [-2:2]) {\n                translate([i * 5, 0, 0])\n                    color(\"black\") {\n                        cube([1, 8, 0.5], center = true);\n                    }\n            }\n        }\n        \n        // USB-C port\n        translate([0, -50, 0]) {\n            difference() {\n                cube([10, 4, 3], center = true);\n                translate([0, -2, 0])\n                    cube([8, 2, 2], center = true);\n            }\n        }\n        \n        // LED indicator\n        translate([0, 35, 5]) {\n            color(\"red\") {\n                sphere(r = 1);\n            }\n        }\n        \n        // Logo\n        translate([0, 0, 5]) {\n            color(\"white\") {\n                linear_extrude(height = 0.5) {\n                    text(\"VIEW\", size = 6, halign = \"center\", valign = \"center\");\n                }\n            }\n        }\n    }\n}\n\n// Generate the device\nviewer_device();",
    "renders": true
  },
  {
    "electronic_device": "reader",
    "openscad_code": "// E-reader device model\n// Dimensions (mm)\ndevice_width = 95;\ndevice_height = 130;\ndevice_thickness = 8;\n\n// Screen dimensions\nscreen_width = 70;\nscreen_height = 90;\nscreen_depth = 1;\n\n// Button dimensions\nbutton_width = 15;\nbutton_height = 8;\nbutton_thickness = 2;\n\n// Port dimensions\nport_width = 10;\nport_height = 3;\nport_depth = 4;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5;\n\n// Main body module\nmodule ereader_body() {\n    difference() {\n        // Main body\n        color([0.2, 0.2, 0.2])\n        cube([device_width, device_height, device_thickness], center=true);\n        \n        // Screen recess\n        translate([0, 5, (device_thickness/2) - screen_depth/2])\n        color([0.1, 0.1, 0.1])\n        cube([screen_width, screen_height, screen_depth + 0.1], center=true);\n        \n        // Charging port\n        translate([(device_width/2) - port_depth/2 - wall_thickness, -device_height/2 + 15, 0])\n        cube([port_depth, port_width, port_height], center=true);\n    }\n}\n\n// Screen module\nmodule screen() {\n    translate([0, 5, (device_thickness/2) - screen_depth/2 + 0.1])\n    color([0.9, 0.9, 0.85])\n    cube([screen_width - 4, screen_height - 4, screen_depth], center=true);\n}\n\n// Power button module\nmodule power_button() {\n    translate([device_width/2 - button_width/2 - 3, device_height/2 - 20, 0])\n    color([0.3, 0.3, 0.3])\n    cube([button_width, button_height, button_thickness], center=true);\n}\n\n// Navigation buttons module\nmodule navigation_buttons() {\n    // Previous button\n    translate([-(device_width/2) + 8, -device_height/2 + 25, 0])\n    color([0.3, 0.3, 0.3])\n    rotate([0, 0, -90])\n    cube([button_height, button_width/2, button_thickness], center=true);\n    \n    // Next button\n    translate([-(device_width/2) + 8, -device_height/2 + 35, 0])\n    color([0.3, 0.3, 0.3])\n    rotate([0, 0, 90])\n    cube([button_height, button_width/2, button_thickness], center=true);\n}\n\n// Bezel detail module\nmodule bezel_detail() {\n    // Top bezel\n    translate([0, device_height/2 - 15, device_thickness/2 - 0.5])\n    color([0.15, 0.15, 0.15])\n    cube([device_width - 10, 2, 1], center=true);\n    \n    // Bottom bezel\n    translate([0, -device_height/2 + 15, device_thickness/2 - 0.5])\n    color([0.15, 0.15, 0.15])\n    cube([device_width - 10, 2, 1], center=true);\n}\n\n// Logo module\nmodule logo() {\n    translate([(device_width/2) - 15, (device_height/2) - 15, device_thickness/2 + 0.1])\n    color([0.5, 0.5, 0.5])\n    linear_extrude(height=0.5)\n    text(\"eR\", size=5, halign=\"center\", valign=\"center\");\n}\n\n// Corner radius detail\nmodule rounded_corners() {\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (device_width/2 - 3), y * (device_height/2 - 3), 0])\n            color([0.15, 0.15, 0.15])\n            sphere(r=3, $fn=16);\n        }\n    }\n}\n\n// Speaker holes\nmodule speaker_grill() {\n    translate([0, -device_height/2 + 8, device_thickness/2 - 0.5])\n    color([0.1, 0.1, 0.1])\n    for(i = [-3:3]) {\n        translate([i * 3, 0, 0])\n        cylinder(h=1, r=0.8, $fn=8);\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    translate([(device_width/2) - 10, (device_height/2) - 8, device_thickness/2 - 0.5])\n    color([0.1, 0.1, 0.1])\n    sphere(r=1.5);\n}\n\n// Assembly\nunion() {\n    ereader_body();\n    screen();\n    power_button();\n    navigation_buttons();\n    bezel_detail();\n    logo();\n    rounded_corners();\n    speaker_grill();\n    led_indicator();\n}",
    "renders": true
  },
  {
    "electronic_device": "tracker",
    "openscad_code": "// GPS Tracker - Medium complexity realistic model\n\n// Main dimensions\ntracker_length = 85;\ntracker_width = 45;\ntracker_thickness = 12;\nwall_thickness = 2;\n\n// Colors\nbody_color = [0.2, 0.2, 0.2];  // Dark gray\naccent_color = [0.8, 0.8, 0.8];  // Light gray\nscreen_color = [0.1, 0.1, 0.1];  // Black\nled_color = [0, 1, 0];  // Green\n\nmodule tracker_body() {\n    color(body_color)\n    difference() {\n        // Main body with rounded edges\n        minkowski() {\n            cube([tracker_length, tracker_width, tracker_thickness], center=true);\n            sphere(r=3);\n        }\n        \n        // Hollow out the inside\n        translate([0, 0, -1])\n        minkowski() {\n            cube([tracker_length-wall_thickness*2, tracker_width-wall_thickness*2, tracker_thickness], center=true);\n            sphere(r=2);\n        }\n    }\n}\n\nmodule screen() {\n    color(screen_color)\n    translate([0, tracker_width/4, tracker_thickness/2+0.1])\n    cube([tracker_length*0.6, tracker_width*0.3, 0.5], center=true);\n    \n    // Screen frame\n    color(accent_color)\n    translate([0, tracker_width/4, tracker_thickness/2])\n    cube([tracker_length*0.65, tracker_width*0.35, 0.3], center=true);\n}\n\nmodule button(x_pos, label=\"\") {\n    color(accent_color)\n    translate([x_pos, -tracker_width/3, tracker_thickness/2+0.1])\n    cylinder(h=0.5, r=3, center=true, $fn=20);\n    \n    // Button surround\n    color(body_color)\n    translate([x_pos, -tracker_width/3, tracker_thickness/2])\n    cylinder(h=0.3, r=4, center=true, $fn=20);\n}\n\nmodule led_indicator() {\n    color(led_color)\n    translate([-tracker_length/2+5, 0, tracker_thickness/2+0.1])\n    cylinder(h=0.5, r=1.5, center=true, $fn=20);\n}\n\nmodule usb_port() {\n    color(accent_color)\n    translate([tracker_length/2+0.1, 0, -2])\n    cube([4, 8, 4], center=true);\n    \n    // Port opening\n    color(screen_color)\n    translate([tracker_length/2+0.2, 0, -2])\n    cube([3, 6, 2], center=true);\n}\n\nmodule antenna_lines() {\n    // Decorative antenna lines on top\n    for(i = [-2:1:2]) {\n        color(accent_color)\n        translate([i*8, tracker_width/2-3, tracker_thickness/2-0.5])\n        cube([1, 6, 0.5]);\n    }\n}\n\nmodule speaker_grill() {\n    color(body_color)\n    translate([0, -tracker_width/2+5, tracker_thickness/2-1])\n    for(i = [-3:1:3]) {\n        translate([i*4, 0, 0])\n        cube([2, 8, 0.5]);\n    }\n}\n\nmodule clip_mount() {\n    color(body_color)\n    translate([0, 0, -tracker_thickness/2-3])\n    union() {\n        // Clip base\n        cube([tracker_length*0.8, 8, 6], center=true);\n        \n        // Clip holes\n        for(i = [-1:1:1]) {\n            translate([i*15, 0, -1])\n            cylinder(h=8, r=2, center=true, $fn=20);\n        }\n    }\n}\n\nmodule logo() {\n    // Simple tracker logo\n    color(accent_color)\n    translate([-tracker_length/2+10, tracker_width/2-10, tracker_thickness/2])\n    linear_extrude(height=0.3) {\n        text(\"GPS\", size=4);\n    }\n}\n\n// Assemble the tracker\ntracker_body();\nscreen();\nbutton(-15, \"P1\");\nbutton(0, \"P2\");\nbutton(15, \"P3\");\nled_indicator();\nusb_port();\nantenna_lines();\nspeaker_grill();\nclip_mount();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "locator",
    "openscad_code": "// GPS Locator Device - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm x 50mm x 20mm\n\n// Main color definitions\n$fn = 32;\n\n// Main device body\nmodule device_body() {\n    color([0.2, 0.2, 0.2])  // Dark gray plastic\n    difference() {\n        // Main housing\n        cube([80, 50, 20], center=true);\n        \n        // Top detail recess\n        translate([0, 0, 10.1])\n            cube([76, 46, 2], center=true);\n        \n        // Bottom battery compartment\n        translate([0, 0, -10.1])\n            cube([70, 40, 2], center=true);\n    }\n}\n\n// Front face with screen and buttons\nmodule front_face() {\n    translate([0, -25.1, 0])\n    color([0.1, 0.1, 0.1])  // Black face\n    cube([78, 1, 18], center=true);\n}\n\n// LCD Display\nmodule lcd_display() {\n    color([0.1, 0.2, 0.1])  // Dark green LCD\n    translate([0, -25, 5])\n    cube([60, 0.5, 30], center=true);\n    \n    // Screen border\n    color([0.15, 0.15, 0.15])\n    translate([0, -25.1, 5])\n    cube([64, 0.2, 34], center=true);\n}\n\n// Control buttons\nmodule control_buttons() {\n    // Power button\n    color([0.9, 0.9, 0.9])  // Light gray\n    translate([-25, -25, -5])\n    rotate([90, 0, 0])\n    cylinder(h=2, r=3);\n    \n    // SOS button\n    color([0.8, 0, 0])  // Red\n    translate([25, -25, -5])\n    rotate([90, 0, 0])\n    cylinder(h=2, r=3);\n    \n    // Navigation buttons\n    for(i = [0:1]) {\n        color([0.4, 0.4, 0.4])\n        translate([-10 + i*20, -25, -7])\n        rotate([90, 0, 0])\n        cube([8, 2, 6], center=true);\n    }\n}\n\n// GPS antenna bump\nmodule gps_antenna() {\n    color([0.3, 0.3, 0.3])\n    translate([0, 15, 10])\n    scale([1, 0.8, 0.3])\n    sphere(r=10);\n}\n\n// LED indicators\nmodule led_indicators() {\n    // GPS LED\n    color([0, 0.5, 1])  // Blue\n    translate([-30, 20, 9.5])\n    cylinder(h=0.5, r=2);\n    \n    // Power LED\n    color([0, 1, 0])  // Green\n    translate([30, 20, 9.5])\n    cylinder(h=0.5, r=2);\n}\n\n// USB-C port\nmodule usb_port() {\n    color([0.1, 0.1, 0.1])\n    translate([0, 25, -5])\n    cube([12, 2, 6], center=true);\n    \n    // Port opening\n    color([0.05, 0.05, 0.05])\n    translate([0, 25.1, -5])\n    cube([10, 1, 4], center=true);\n}\n\n// Speaker grill holes\nmodule speaker_grill() {\n    color([0.15, 0.15, 0.15])\n    translate([0, 25, 5])\n    cube([30, 0.5, 10], center=true);\n    \n    // Holes\n    for(i = [-3:3]) {\n        color([0, 0, 0])\n        translate([i*4, 25.1, 5])\n        cylinder(h=0.5, r=1);\n    }\n}\n\n// Lanyard loop\nmodule lanyard_loop() {\n    color([0.3, 0.3, 0.3])\n    translate([0, 0, 12])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=5, r=4);\n        cylinder(h=6, r=2);\n    }\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    color([0.25, 0.25, 0.25])\n    translate([0, 0, -10.5])\n    cube([68, 38, 1], center=true);\n    \n    // Battery contacts\n    for(i = [-1:1:1]) {\n        color([0.8, 0.8, 0.8])\n        translate([i*20, 0, -10.5])\n        cube([4, 30, 0.5], center=true);\n    }\n}\n\n// Assembly\ndevice_body();\nfront_face();\nlcd_display();\ncontrol_buttons();\ngps_antenna();\nled_indicators();\nusb_port();\nspeaker_grill();\nlanyard_loop();\nbattery_compartment();",
    "renders": true
  },
  {
    "electronic_device": "finder",
    "openscad_code": "// Finder Electronic Device - Realistic Style, Medium Complexity\n// Dimensions: 60mm x 40mm x 12mm\n\n// Overall device body with rounded edges\nmodule device_body() {\n    difference() {\n        // Main body with rounded top and bottom\n        union() {\n            // Central block\n            translate([0, 0, 6])\n                cube([60, 40, 10], center=true);\n            \n            // Rounded top edge\n            translate([0, 0, 11])\n                scale([60, 40, 10])\n                sphere(1, $fn=50);\n            \n            // Rounded bottom edge\n            translate([0, 0, 1])\n                scale([60, 40, 10])\n                sphere(1, $fn=50);\n        }\n        \n        // Screen cutout\n        translate([0, 8, 12])\n            cube([50, 22, 2], center=true);\n        \n        // Home button hole\n        translate([0, -12, 11.5])\n            cylinder(h=2, r=6, $fn=50);\n        \n        // Camera hole\n        translate([20, 13, 11.5])\n            cylinder(h=2, r=1.5, $fn=20);\n        \n        // Speaker holes\n        for(x = [-20:5:20]) {\n            translate([x, 18, 11.5])\n                cylinder(h=2, r=0.5, $fn=10);\n        }\n    }\n}\n\n// Screen assembly\nmodule screen() {\n    color([0.1, 0.1, 0.1])\n    translate([0, 8, 12.5])\n        cube([48, 20, 0.5], center=true);\n    \n    color([0.2, 0.2, 0.2])\n    translate([0, 8, 12.8])\n        cube([46, 18, 0.2], center=true);\n}\n\n// Home button\nmodule home_button() {\n    color([0.3, 0.3, 0.3])\n    translate([0, -12, 11])\n        cylinder(h=1, r=6, $fn=50);\n    \n    color([0.1, 0.1, 0.1])\n    translate([0, -12, 10.5])\n        cube([8, 1, 0.5], center=true);\n}\n\n// Camera assembly\nmodule camera() {\n    color([0.05, 0.05, 0.05])\n    translate([20, 13, 11])\n        cylinder(h=1, r=1.5, $fn=20);\n    \n    color([0.2, 0.2, 0.2])\n    translate([20, 13, 10.5])\n        cylinder(h=0.5, r=2.5, $fn=20);\n}\n\n// Volume buttons\nmodule volume_buttons() {\n    color([0.3, 0.3, 0.3])\n    translate([-31, 5, 7])\n        cube([2, 8, 3], center=true);\n    \n    translate([-31, -5, 7])\n        cube([2, 8, 3], center=true);\n}\n\n// Power button\nmodule power_button() {\n    color([0.3, 0.3, 0.3])\n    translate([31, 5, 7])\n        cube([2, 12, 2], center=true);\n}\n\n// Charging port\nmodule charging_port() {\n    color([0.1, 0.1, 0.1])\n    translate([0, -21, 4])\n        cube([12, 2, 4], center=true);\n}\n\n// Main assembly\ncolor([0.9, 0.9, 0.9])\ndevice_body();\n\nscreen();\nhome_button();\ncamera();\nvolume_buttons();\npower_button();\ncharging_port();",
    "renders": true
  },
  {
    "electronic_device": "spotter",
    "openscad_code": "// Spotter Device - Realistic Medium Complexity\n// A handheld electronic spotting device with screen, buttons and antenna\n\n// Main body dimensions\nbody_w = 42;\nbody_h = 75;\nbody_d = 18;\n\n// Screen\nscreen_w = 28;\nscreen_h = 18;\nscreen_d = 1;\n\n// Buttons\nbutton_r = 3;\nbutton_h = 1.5;\n\n// Antenna\nantenna_r = 2;\nantenna_h = 25;\n\n// Ports\nport_w = 8;\nport_h = 4;\nport_d = 3;\n\n// LEDs\nled_r = 1.5;\n\n// Main body with rounded edges\nmodule main_body() {\n    difference() {\n        // Body shell\n        color(\"darkslategray\")\n        translate([-body_w/2, -body_h/2, -body_d/2])\n        minkowski() {\n            cube([body_w, body_h, body_d]);\n            sphere(2);\n        }\n        \n        // Hollow interior\n        color(\"darkslategray\")\n        translate([-body_w/2+2, -body_h/2+2, -body_d/2+2])\n        minkowski() {\n            cube([body_w-4, body_h-4, body_d-4]);\n            sphere(1);\n        }\n    }\n}\n\n// Display screen\nmodule display() {\n    difference() {\n        // Screen bezel\n        color(\"black\")\n        translate([-screen_w/2-1, body_h/2-screen_h-8, body_d/2-0.1])\n        cube([screen_w+2, screen_h+2, screen_d+0.5]);\n        \n        // Screen glass\n        color(\"lightblue\")\n        translate([-screen_w/2, body_h/2-screen_h-7, body_d/2+0.3])\n        cube([screen_w, screen_h, screen_d]);\n    }\n}\n\n// Control buttons\nmodule buttons() {\n    // Power button\n    translate([body_w/2-8, body_h/2-15, body_d/2+0.1])\n    color(\"red\")\n    cylinder(h=button_h+0.5, r=button_r+0.5);\n    translate([body_w/2-8, body_h/2-15, body_d/2+0.5])\n    color(\"darkred\")\n    cylinder(h=button_h, r=button_r);\n    \n    // Mode buttons\n    for(i=[0:2]) {\n        translate([-body_w/2+10+i*10, body_h/2-25, body_d/2+0.1])\n        color(\"gray\")\n        cylinder(h=button_h+0.5, r=button_r+0.5);\n        translate([-body_w/2+10+i*10, body_h/2-25, body_d/2+0.5])\n        color(\"darkgray\")\n        cylinder(h=button_h, r=button_r);\n    }\n}\n\n// Antenna assembly\nmodule antenna() {\n    // Antenna base\n    translate([0, -body_h/2-2, body_d/2-3])\n    color(\"black\")\n    cylinder(h=4, r=antenna_r+1);\n    \n    // Antenna mast\n    translate([0, -body_h/2-6, body_d/2-1])\n    color(\"silver\")\n    cylinder(h=antenna_h, r=antenna_r);\n    \n    // Antenna tip\n    translate([0, -body_h/2-6-antenna_h, body_d/2-1])\n    color(\"red\")\n    sphere(r=antenna_r+0.5);\n}\n\n// Ports\nmodule ports() {\n    // USB-C port\n    translate([0, -body_h/2+5, -body_d/2])\n    color(\"black\")\n    cube([port_w, port_h, port_d]);\n    \n    // Charging indicator\n    translate([port_w/2+2, -body_h/2+7, -body_d/2+0.1])\n    color(\"green\")\n    sphere(r=led_r);\n    \n    // Status LED\n    translate([-port_w/2-2, -body_h/2+7, -body_d/2+0.1])\n    color(\"blue\")\n    sphere(r=led_r);\n}\n\n// Grip texture\nmodule grip_texture() {\n    difference() {\n        union() {\n            for(i=[-1:1]) {\n                for(j=[0:6]) {\n                    translate([i*10, -body_h/2+10+j*5, -body_d/2+0.1])\n                    color(\"dimgray\")\n                    cube([2, 3, 0.5]);\n                }\n            }\n        }\n    }\n}\n\n// Speaker grill\nmodule speaker_grill() {\n    difference() {\n        translate([body_w/2-15, -body_h/2+30, body_d/2-0.1])\n        color(\"black\")\n        cube([10, 8, 0.5]);\n        \n        for(i=[0:3]) {\n            for(j=[0:1]) {\n                translate([body_w/2-14+i*2, -body_h/2+31+j*3, body_d/2+0.1])\n                color(\"darkslategray\")\n                cube([1, 1, 0.6]);\n            }\n        }\n    }\n}\n\n// Assembly\nmain_body();\ndisplay();\nbuttons();\nantenna();\nports();\ngrip_texture();\nspeaker_grill();",
    "renders": true
  },
  {
    "electronic_device": "pinger",
    "openscad_code": "// OpenSCAD Pinger Electronic Device\n// Realistic style, medium complexity\n\n// Color definitions\n$fn = 50;\n\n// Main dimensions\nbody_w = 45;\nbody_h = 85;\nbody_d = 12;\nwall = 1.5;\n\n// Module for rounded rectangle\nmodule rounded_rect(w, h, d, r) {\n    hull() {\n        translate([r, r, 0]) cylinder(h=d, r=r);\n        translate([w-r, r, 0]) cylinder(h=d, r=r);\n        translate([w-r, h-r, 0]) cylinder(h=d, r=r);\n        translate([r, h-r, 0]) cylinder(h=d, r=r);\n    }\n}\n\n// Main device body\nmodule device_body() {\n    color(\"white\") \n    difference() {\n        rounded_rect(body_w, body_h, body_d, 5);\n        \n        // Screen recess\n        translate([5, 15, body_d-0.5])\n            cube([body_w-10, 40, 2]);\n        \n        // Button holes\n        for(i=[0:3]) {\n            translate([10 + i*8, 62, body_d-1])\n                cylinder(h=2, r=2.5);\n        }\n    }\n}\n\n// Display screen\nmodule display() {\n    color(\"black\")\n    translate([6, 16, body_d-0.3])\n        cube([body_w-12, 38, 0.2]);\n    \n    // Screen content\n    color(\"cyan\")\n    translate([7, 17, body_d-0.1])\n        cube([body_w-14, 36, 0.1]);\n}\n\n// Buttons\nmodule buttons() {\n    for(i=[0:3]) {\n        color(\"darkgray\")\n        translate([10 + i*8, 62, body_d-0.5])\n            cylinder(h=1, r=2);\n    }\n}\n\n// Speaker grill\nmodule speaker_grill() {\n    color(\"black\")\n    translate([body_w/2-10, 5, body_d-0.5])\n        cube([20, 8, 0.5]);\n    \n    // Grill holes\n    for(x=[-8:2:8])\n        for(y=[-3:2:3])\n            translate([body_w/2+x, 6+y, body_d-0.2])\n                cylinder(h=1, r=0.5);\n}\n\n// LED indicators\nmodule leds() {\n    // Power LED\n    color(\"red\")\n    translate([body_w-8, body_h-8, body_d-0.3])\n        cylinder(h=0.5, r=1.5);\n    \n    // Status LED\n    color(\"green\")\n    translate([8, body_h-8, body_d-0.3])\n        cylinder(h=0.5, r=1.5);\n}\n\n// Antenna\nmodule antenna() {\n    color(\"silver\")\n    translate([body_w/2, body_h, body_d/2])\n        rotate([90, 0, 0])\n            cylinder(h=15, r=1);\n}\n\n// USB port\nmodule usb_port() {\n    color(\"black\")\n    translate([5, 77, body_d/2])\n        rotate([0, 90, 0])\n            cube([8, 6, 3]);\n}\n\n// Battery compartment\nmodule battery_door() {\n    color(\"lightgray\")\n    translate([body_w/2-10, body_h-15, -0.5])\n        cube([20, 10, 1]);\n    \n    // Screws\n    for(x=[-7, 7])\n        color(\"gray\")\n        translate([body_w/2+x, body_h-10, -0.2])\n            cylinder(h=1, r=1);\n}\n\n// Assembly\ndevice_body();\ndisplay();\nbuttons();\nspeaker_grill();\nleds();\nantenna();\nusb_port();\nbattery_door();",
    "renders": true
  },
  {
    "electronic_device": "beeper",
    "openscad_code": "// Realistic 3D-printable beeper pager\n// Overall size ~80 mm x 45 mm x 18 mm\n\n// Device colors\ncolor_casing = [0.15, 0.15, 0.15];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_buttons = [0.2, 0.2, 0.2];\ncolor_clip = [0.3, 0.3, 0.3];\ncolor_led = [0.2, 0.8, 0.2];\n\n// Main body shell rounded\nmodule body_shell() {\n    difference() {\n        minkowski() {\n            cube([78, 43, 14], center = true);\n            sphere(1.5);\n        }\n        // Hollow inside for electronics cavity\n        translate([0, 0, -0.5])\n            minkowski() {\n                cube([72, 37, 12], center = true);\n                sphere(1.2);\n            }\n    }\n}\n\n// LCD screen window\nmodule lcd_window() {\n    difference() {\n        translate([0, 8, 8.5])\n            cube([45, 15, 0.5], center = true);\n        translate([0, 8, 9.1])\n            cube([43, 13, 0.5], center = true);\n    }\n}\n\n// Button grid\nmodule button_row(y) {\n    for (x = [-25, -15, -5, 5, 15, 25]) {\n        translate([x, y, 8.5])\n            cylinder(h = 1.5, r = 2.2, $fn = 16);\n    }\n}\n\n// Side button\nmodule side_button() {\n    translate([40, -10, 2])\n        rotate([0, 90, 0])\n            cylinder(h = 8, r = 2.5, $fn = 16);\n}\n\n// Belt clip\nmodule belt_clip() {\n    difference() {\n        union() {\n            // Clip base\n            translate([-39, 0, -7])\n                cube([3, 38, 8], center = true);\n            // Springy clip arm\n            translate([-39, 0, -11.5])\n                rotate([0, 10, 0])\n                    cube([2, 36, 3], center = true);\n        }\n        // Slot for belt\n        translate([-39, 0, -9])\n            cube([4, 30, 6], center = true);\n    }\n}\n\n// Speaker grille holes\nmodule speaker_grille() {\n    difference() {\n        translate([0, -15, 8.5])\n            cube([20, 8, 0.5], center = true);\n        for (i = [-4:4]) {\n            translate([i * 2, -15, 9.1])\n                cylinder(h = 1, r = 0.8, $fn = 8);\n        }\n    }\n}\n\n// Indicator LED\nmodule status_led() {\n    translate([-30, 15, 8.8])\n        cylinder(h = 1, r = 1.5, $fn = 12);\n}\n\n// Battery door screws\nmodule screws() {\n    for (p = [[-30, -20], [30, -20], [30, 20], [-30, 20]]) {\n        translate([p[0], p[1], -7.5])\n            cylinder(h = 2, r = 1.2, $fn = 6);\n        translate([p[0], p[1], -7.5])\n            cylinder(h = 0.5, r = 2.2, $fn = 6);\n    }\n}\n\n// Assemble the beeper\ncolor(color_casing) body_shell();\ncolor(color_screen) lcd_window();\ncolor(color_buttons) {\n    button_row(-5);\n    side_button();\n}\ncolor(color_clip) belt_clip();\ncolor(color_casing) speaker_grille();\ncolor(color_led) status_led();\ncolor(color_casing) screws();",
    "renders": true
  },
  {
    "electronic_device": "buzz",
    "openscad_code": "// OpenSCAD Buzz Electronic Device (Medium Complexity)\n// A realistic buzzer/notification device with speaker, LED ring and control button\n\n$fa = 2;\n$fs = 0.5;\n\n// Main dimensions\ndevice_w = 60;\ndevice_h = 20;\ndevice_d = 60;\nwall_thickness = 2;\nspeaker_diameter = 35;\nbutton_diameter = 12;\nport_width = 8;\nport_height = 5;\n\n// Main housing\nmodule main_housing() {\n    difference() {\n        // Outer shell\n        color(\"darkslategray\")\n        cube([device_w, device_h, device_d], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness/2])\n        cube([device_w-wall_thickness*2, device_h-wall_thickness, device_d-wall_thickness*2], center=true);\n        \n        // Speaker grille holes\n        for (x = [-15:5:15]) {\n            for (y = [-15:5:15]) {\n                translate([x, device_h/2-0.1, y])\n                rotate([90, 0, 0])\n                cylinder(h=wall_thickness+0.2, d=1.5, $fn=16);\n            }\n        }\n    }\n}\n\n// Speaker cone\nmodule speaker() {\n    color(\"black\")\n    translate([0, device_h/2-0.5, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=3, d=speaker_diameter, $fn=64);\n        cylinder(h=4, d=speaker_diameter-8, $fn=64);\n    }\n}\n\n// LED ring around speaker\nmodule led_ring() {\n    color(\"red\")\n    translate([0, device_h/2-1, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=2, d=speaker_diameter+6, $fn=64);\n        cylinder(h=3, d=speaker_diameter, $fn=64);\n    }\n}\n\n// Control button\nmodule button() {\n    translate([0, -device_h/2+3, 20])\n    union() {\n        // Button housing\n        color(\"dimgray\")\n        cylinder(h=2, d=button_diameter+4, $fn=32);\n        \n        // Button top\n        color(\"crimson\")\n        translate([0, 0, 2])\n        cylinder(h=3, d=button_diameter, $fn=32);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    translate([-device_w/2-0.1, 0, -15])\n    rotate([0, 90, 0])\n    color(\"black\")\n    difference() {\n        cube([port_height+2, port_width+2, 2]);\n        cube([port_height, port_width, 3]);\n    }\n}\n\n// Status LED\nmodule status_led() {\n    translate([20, device_h/2-1, 20])\n    color(\"lime\")\n    sphere(d=3, $fn=16);\n}\n\n// Mounting feet\nmodule feet() {\n    foot_diameter = 5;\n    foot_height = 2;\n    \n    for (x = [-device_w/2+10, device_w/2-10]) {\n        for (z = [-device_d/2+10, device_d/2-10]) {\n            translate([x, -device_h/2-foot_height/2, z])\n            color(\"black\")\n            cylinder(h=foot_height, d=foot_diameter, $fn=16);\n        }\n    }\n}\n\n// Device label\nmodule label() {\n    translate([0, device_h/2+0.1, 0])\n    rotate([90, 0, 0])\n    color(\"white\")\n    linear_extrude(height=0.2)\n    text(\"BUZZ\", size=8, halign=\"center\", valign=\"center\");\n}\n\n// Assembly\nmain_housing();\nspeaker();\nled_ring();\nbutton();\nusb_port();\nstatus_led();\nfeet();\nlabel();",
    "renders": true
  },
  {
    "electronic_device": "alert",
    "openscad_code": "// Alert device - Emergency beacon / SOS transmitter\n// Dimensions: 80x45x25 mm body, suitable for 3D printing\n\n$fn = 32;\n\n// Main body color\ncolor([0.85, 0.85, 0.85]) {\n\n    // Main housing - rounded rectangle body\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-35, -17.5, 0]) cylinder(h = 20, r = 5);\n            translate([-35, 17.5, 0]) cylinder(h = 20, r = 5);\n            translate([35, -17.5, 0]) cylinder(h = 20, r = 5);\n            translate([35, 17.5, 0]) cylinder(h = 20, r = 5);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 2]) cube([70, 30, 18], center = true);\n        \n        // USB-C port opening\n        translate([37, 0, 10]) cube([6, 8, 4], center = true);\n        \n        // Lanyard hole\n        translate([0, 25, 10]) rotate([0, 90, 0]) cylinder(h = 10, r = 2);\n    }\n}\n\n// Top panel with speaker grill\ndifference() {\n    // Speaker grill panel\n    color([0.2, 0.2, 0.2]) translate([0, 0, 20]) cube([76, 38, 2], center = true);\n    \n    // Speaker holes pattern\n    for(x = [-30:10:30]) {\n        for(y = [-15:5:15]) {\n            translate([x, y, 21]) cylinder(h = 3, r = 1.5);\n        }\n    }\n}\n\n// Large red alert button on top\ncolor([0.8, 0.1, 0.1]) {\n    translate([0, 0, 23]) cylinder(h = 3, r = 8);\n    translate([0, 0, 26]) cylinder(h = 1, r = 9);\n}\n\n// Status LED indicators\nmodule led_indicator(x_pos, y_pos, color_val) {\n    color(color_val) {\n        translate([x_pos, y_pos, 22]) cylinder(h = 1, r = 2.5);\n    }\n}\n\nled_indicator(-25, -12, [0, 1, 0]);    // GPS\nled_indicator(-25, -6, [0, 0.5, 1]);   // Bluetooth\nled_indicator(-25, 0, [1, 0.8, 0]);    // Battery\nled_indicator(-25, 6, [1, 1, 1]);      // Power\nled_indicator(-25, 12, [0.8, 0, 0]);   // Alert active\n\n// Side buttons\ncolor([0.3, 0.3, 0.3]) {\n    translate([0, 20, 15]) cube([10, 2, 4], center = true);\n    translate([0, -20, 15]) cube([10, 2, 4], center = true);\n}\n\n// Display screen on front\ncolor([0.1, 0.1, 0.1]) {\n    translate([0, 0, 20.5]) cube([30, 15, 0.5], center = true);\n}\n\n// Screen content - simple SOS symbol\ncolor([0.9, 0, 0]) {\n    translate([-10, 5, 21]) cube([2, 2, 0.1]);\n    translate([-7, 5, 21]) cube([2, 2, 0.1]);\n    translate([-4, 5, 21]) cube([2, 2, 0.1]);\n    translate([4, 5, 21]) cube([2, 2, 0.1]);\n    translate([7, 5, 21]) cube([2, 2, 0.1]);\n    translate([10, 5, 21]) cube([2, 2, 0.1]);\n}\n\n// Antenna - retractable stub\ncolor([0.6, 0.6, 0.6]) {\n    translate([22, 0, 20]) rotate([0, 90, 0]) cylinder(h = 15, r = 1.5);\n    translate([22, 0, 35]) sphere(r = 2);\n}\n\n// Rubber grip strips on sides\ncolor([0.2, 0.2, 0.2]) {\n    for(z = [5:5:15]) {\n        translate([36, 0, z]) cube([2, 30, 3], center = true);\n        translate([-36, 0, z]) cube([2, 30, 3], center = true);\n    }\n}\n\n// Emergency label text (represented as raised rectangles)\ncolor([1, 1, 1]) {\n    translate([0, -15, 20.5]) cube([16, 3, 0.3], center = true);\n}\n\n// Battery compartment cover on bottom\ndifference() {\n    color([0.4, 0.4, 0.4]) translate([0, 0, 1]) cube([40, 25, 1], center = true);\n    \n    // Screw holes\n    translate([-15, -8, 1]) cylinder(h = 2, r = 1.5);\n    translate([-15, 8, 1]) cylinder(h = 2, r = 1.5)\n    translate([15, -8, 1]) cylinder(h = 2, r = 1.5)\n    translate([15, 8, 1]) cylinder(h = 2, r = 1.5)\n}",
    "renders": true
  },
  {
    "electronic_device": "buzzer",
    "openscad_code": "// 50 mm diameter piezo buzzer with PCB mount, realistic style\n// Wall thickness 1.5 mm for 3D printing, no overhangs\n\n$fn = 64;\n\n// Overall scale factor – 50 mm diameter\nscale_factor = 1;\n\n// Main body\nmodule buzzer_body() {\n    color([0.1, 0.1, 0.1]) // Matte black plastic\n    difference() {\n        cylinder(h = 15, d = 50, center = true);\n        // Central hole for sound\n        cylinder(h = 16, d = 25, center = true);\n    }\n}\n\n// Piezo diaphragm visible from top\nmodule piezo_diaphragm() {\n    color([0.9, 0.9, 0.9]) // Silver metallic\n    translate([0, 0, 7.4])\n    difference() {\n        cylinder(h = 0.2, d = 28);\n        cylinder(h = 0.3, d = 8);\n    }\n}\n\n// Vent holes around the top edge for sound\nmodule vent_holes() {\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([20, 0, 7])\n        color([0.1, 0.1, 0.1])\n        cylinder(h = 2, d = 4);\n    }\n}\n\n// PCB base plate\nmodule pcb_base() {\n    color([0.0, 0.7, 0.0]) // Green soldermask\n    difference() {\n        cylinder(h = 2, d = 50, center = true);\n        \n        // Mounting holes\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90 + 45])\n            translate([18, 0, 0])\n            cylinder(h = 3, d = 3.2, center = true);\n        }\n        \n        // Center hole\n        cylinder(h = 3, d = 25, center = true);\n    }\n}\n\n// Copper pads on PCB\nmodule copper_pads() {\n    color([0.8, 0.4, 0.0]) // Copper color\n    for (i = [0:1]) {\n        rotate([0, 0, i * 180])\n        translate([15, 0, 0])\n        cube([8, 5, 0.2], center = true);\n    }\n}\n\n// Solder points for wires\nmodule solder_points() {\n    color([0.6, 0.6, 0.6]) // Silver solder\n    for (i = [0:1]) {\n        rotate([0, 0, i * 180])\n        translate([15, 0, 1.1])\n        sphere(d = 2.5);\n    }\n}\n\n// Indicator label area\nmodule label_area() {\n    color([0.95, 0.95, 0.95]) // White label\n    translate([0, 0, -7.5])\n    difference() {\n        cube([20, 8, 0.5], center = true);\n        translate([0, 0, 0.3])\n        color([0, 0, 0])\n        linear_extrude(0.3)\n        text(\"12V BUZZER\", size = 3, halign = \"center\", valign = \"center\");\n    }\n}\n\n// Main assembly\nunion() {\n    buzzer_body();\n    piezo_diaphragm();\n    vent_holes();\n    translate([0, 0, -8.5]) pcb_base();\n    translate([0, 0, -8.4]) copper_pads();\n    translate([0, 0, -8.4]) solder_points();\n    label_area();\n}",
    "renders": true
  },
  {
    "electronic_device": "vibe",
    "openscad_code": "// Vibrator with realistic styling - medium complexity\n// Designed for 3D printing with proper wall thickness\n\n// Main parameters\n$fn = 50;\nwall_thickness = 2;\nmain_diameter = 35;\nmain_length = 85;\ntaper_length = 15;\nbutton_diameter = 6;\nbutton_height = 2;\n\n// Main body - tapered cylinder\nmodule main_body() {\n    color(\"#FFB6C1\")  // Light pink silicone\n    difference() {\n        // Main tapered shape\n        cylinder(h = main_length, d1 = main_diameter, d2 = main_diameter * 0.8);\n        \n        // Hollow center\n        translate([0, 0, wall_thickness])\n        cylinder(h = main_length - wall_thickness * 2, d1 = main_diameter - wall_thickness * 2, d2 = (main_diameter * 0.8) - wall_thickness * 2);\n        \n        // Charging port hole\n        translate([0, -main_diameter/2 + 1, main_length - 15])\n        rotate([90, 0, 0])\n        cylinder(h = main_diameter/4, d = 8);\n    }\n}\n\n// Control buttons\nmodule control_panel() {\n    color(\"#FF1493\")  // Deep pink\n    translate([0, main_diameter/2 + 0.1, main_length - 25])\n    difference() {\n        // Panel base\n        cube([25, 1, 20], center = true);\n        \n        // Button holes\n        for(i = [-1, 0, 1]) {\n            translate([i * 8, 0, 0])\n            cylinder(h = 2, d = button_diameter + 1);\n        }\n    }\n    \n    // Individual buttons\n    for(i = [-1, 0, 1]) {\n        color(\"#FFFFFF\")\n        translate([i * 8, main_diameter/2 + 1.1, main_length - 25])\n        cylinder(h = button_height, d = button_diameter);\n    }\n}\n\n// LED indicator ring\nmodule led_ring() {\n    color(\"#FF0000\", 0.5)  // Translucent red\n    translate([0, 0, main_length - 30])\n    difference() {\n        cylinder(h = 2, d = main_diameter + 2);\n        cylinder(h = 3, d = main_diameter - 4);\n    }\n}\n\n// Textured grip pattern\nmodule grip_pattern() {\n    color(\"#FF69B4\")  // Hot pink\n    for(i = [0:15]) {\n        rotate([0, 0, i * 24])\n        translate([main_diameter/2 - 1, 0, 15])\n        rotate([90, 0, 0])\n        cylinder(h = main_length - 30, d = 3);\n    }\n}\n\n// Charging contacts\nmodule charging_contacts() {\n    color(\"#C0C0C0\")  // Silver\n    translate([0, -main_diameter/2 + 2, main_length - 12])\n    cube([12, 1, 4], center = true);\n    \n    translate([0, -main_diameter/2 + 2.5, main_length - 12])\n    cube([8, 0.5, 2], center = true);\n}\n\n// Base cap with threads\nmodule base_cap() {\n    color(\"#FFB6C1\")\n    translate([0, 0, -5])\n    difference() {\n        cylinder(h = 10, d = main_diameter);\n        \n        // Thread pattern\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([main_diameter/2 - 2, 0, 0])\n            cube([4, 1, 10]);\n        }\n        \n        // Center hole for charging\n        cylinder(h = 11, d = 8);\n    }\n}\n\n// Assembly\nmain_body();\ncontrol_panel();\nled_ring();\ngrip_pattern();\ncharging_contacts();\nbase_cap();",
    "renders": true
  },
  {
    "electronic_device": "vibra",
    "openscad_code": "// Vibrating fitness tracker - realistic medium complexity\n// Overall dimensions: 45mm x 35mm x 12mm\n\n// Main body with rounded edges\nmodule main_body() {\n    color([0.15, 0.15, 0.15])  // Dark gray\n    difference() {\n        // Main rounded rectangle\n        minkowski() {\n            cube([40, 30, 8], center=true);\n            sphere(2);\n        }\n        \n        // Top recess for screen\n        translate([0, 0, 4.1])\n            cube([36, 26, 2], center=true);\n            \n        // Bottom recess for charging contacts\n        translate([0, 0, -4.1])\n            cube([20, 8, 1], center=true);\n    }\n}\n\n// OLED display screen\nmodule display() {\n    color([0.05, 0.05, 0.05])  // Black\n    translate([0, 0, 5.1])\n        cube([34, 24, 0.5], center=true);\n        \n    // Screen glass effect\n    color([0.9, 0.9, 0.95, 0.3])  // Transparent\n    translate([0, 0, 5.4])\n        cube([33.5, 23.5, 0.2], center=true);\n}\n\n// Side buttons\nmodule buttons() {\n    // Top button\n    color([0.8, 0.8, 0.8])\n    translate([21, 10, 2])\n        rotate([90, 0, 0])\n        cylinder(h=3, r1=2, r2=1.5, $fn=16);\n        \n    // Bottom button\n    translate([21, -10, 2])\n        rotate([90, 0, 0])\n        cylinder(h=3, r1=2, r2=1.5, $fn=16);\n}\n\n// Heart rate sensor window\nmodule heart_sensor() {\n    color([0.1, 0.1, 0.1])  // Dark green\n    translate([0, 0, -4.5])\n        cube([12, 8, 0.5], center=true);\n        \n    // LED windows (2x)\n    for(x = [-3, 3]) {\n        color([0.3, 0.8, 0.9, 0.8])\n        translate([x, 2, -4.6])\n            cylinder(h=0.3, r=1.5, $fn=16);\n    }\n}\n\n// Charging contacts\nmodule charging_contacts() {\n    color([0.7, 0.7, 0.0])  // Gold\n    for(x = [-6, 6]) {\n        translate([x, 0, -4.6])\n            cube([4, 4, 0.3], center=true);\n    }\n}\n\n// Vibration motor housing\nmodule vibrator() {\n    color([0.5, 0.5, 0.5])\n    translate([-12, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=8, r=4, $fn=16);\n}\n\n// Watch band lugs\nmodule band_lugs() {\n    color([0.2, 0.2, 0.2])\n    // Top lugs\n    translate([0, 17, 0]) {\n        for(x = [-8, 8]) {\n            translate([x, 0, 0])\n                cube([4, 4, 6], center=true);\n            translate([x, 2, 0])\n                cylinder(h=4, r=1.5, $fn=16);\n        }\n    }\n    \n    // Bottom lugs\n    translate([0, -17, 0]) {\n        mirror([0, 1, 0]) {\n            for(x = [-8, 8]) {\n                translate([x, 0, 0])\n                    cube([4, 4, 6], center=true);\n                translate([x, 2, 0])\n                    cylinder(h=4, r=1.5, $fn=16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    display();\n    buttons();\n    heart_sensor();\n    charging_contacts();\n    vibrator();\n    band_lugs();\n    \n    // Status LED\n    color([0, 1, 0])  // Green\n    translate([18, 0, 3])\n        cylinder(h=0.5, r=1, $fn=8);\n}",
    "renders": true
  },
  {
    "electronic_device": "pulse",
    "openscad_code": "// OpenSCAD code for a realistic pulse oximeter\n// Dimensions: 60mm x 35mm x 30mm\n\n// Main colors\n$fn = 50;\n\nmodule pulseOximeter() {\n    // Main body shell\n    color([0.9, 0.9, 0.9]) \n    difference() {\n        hull() {\n            translate([0, 0, 15]) \n                sphere(d = 35);\n            translate([0, 0, -5]) \n                sphere(d = 35);\n        }\n        \n        // Finger slot\n        translate([0, 0, 10])\n            cube([60, 30, 20], center = true);\n        \n        // Display cutout\n        translate([10, 12, 28])\n            cube([25, 15, 2], center = true);\n    }\n    \n    // Display screen\n    color([0.1, 0.1, 0.1])\n    translate([10, 12, 29])\n        cube([23, 13, 1], center = true);\n    \n    // LED indicators\n    color([0, 1, 0])\n    translate([-15, 12, 29])\n        cylinder(h = 1, d = 3);\n    \n    color([0.8, 0.8, 0])\n    translate([-15, 8, 29])\n        cylinder(h = 1, d = 3);\n    \n    // Control button\n    color([0.2, 0.2, 0.2])\n    translate([15, -12, 29])\n        cylinder(h = 2, d = 8);\n    \n    // Battery door\n    color([0.7, 0.7, 0.7])\n    difference() {\n        translate([-5, -15, 5])\n            cube([20, 10, 1]);\n        \n        // Screw holes\n        for(x = [-10, 0, 10]) {\n            translate([x, -10, 5.5])\n                cylinder(h = 2, d = 2);\n        }\n    }\n    \n    // Spring contacts inside finger slot (top)\n    color([0.8, 0.8, 0.8])\n    for(i = [-20:10:20]) {\n        translate([i, 0, 18])\n            cylinder(h = 2, d = 4);\n    }\n    \n    // Spring contacts inside finger slot (bottom)\n    color([0.8, 0.8, 0.8])\n    for(i = [-20:10:20]) {\n        translate([i, 0, 2])\n            cylinder(h = 2, d = 4);\n    }\n    \n    // LED sensor window\n    color([0.9, 0.9, 0.9])\n    translate([0, 0, 18])\n        cylinder(h = 1, d = 8);\n    \n    // Photodiode window\n    color([0.9, 0.9, 0.9])\n    translate([0, 0, 2])\n        cylinder(h = 1, d = 8);\n    \n    // USB-C port\n    color([0.1, 0.1, 0.1])\n    translate([-25, 0, 15])\n        cube([3, 8, 4], center = true);\n    \n    // Brand text area\n    color([0.3, 0.3, 0.3])\n    translate([0, 0, 25])\n        cube([15, 6, 0.5], center = true);\n    \n    // Finger grip pads\n    color([0.2, 0.2, 0.2])\n    translate([0, 15, 10])\n        cube([50, 3, 15], center = true);\n    \n    translate([0, -15, 10])\n        cube([50, 3, 15], center = true);\n}\n\npulseOximeter();",
    "renders": true
  },
  {
    "electronic_device": "signal",
    "openscad_code": "// Wi-Fi Router / Signal Booster\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.15, 0.15, 0.15];\ncolor_antenna = [0.2, 0.2, 0.2];\ncolor_led = [0, 1, 0];\ncolor_port = [0.8, 0.8, 0.8];\ncolor_label = [0.9, 0.9, 0.9];\n\n// Main router body\nmodule router_body() {\n    color(color_body)\n    difference() {\n        // Main housing\n        cube([120, 80, 25], center = true);\n        \n        // Ventilation slots on top\n        for (x = [-50:15:50]) {\n            translate([x, 0, 12.6])\n                cube([8, 75, 2]);\n        }\n        \n        // Front LED indicator strip\n        translate([0, 42, 0])\n            cube([60, 2, 5], center = true);\n    }\n    \n    // Side ventilation holes\n    for (y = [-30:8:30]) {\n        color(color_body)\n        translate([61, y, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 2, r = 2);\n        translate([-61, y, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 2, r = 2);\n    }\n}\n\n// Antenna module\nmodule antenna(rotate_base = 0, rotate_tilt = 0) {\n    color(color_antenna)\n    translate([0, 0, 12.5])\n    rotate([0, 0, rotate_base])\n    translate([0, 45, 0])\n    rotate([rotate_tilt, 0, 0])\n    translate([0, 0, 25])\n    union() {\n        // Antenna base\n        cylinder(h = 8, r = 6);\n        \n        // Antenna rod\n        translate([0, 0, 4])\n            cylinder(h = 50, r = 2);\n        \n        // Antenna tip\n        translate([0, 0, 54])\n            sphere(r = 3);\n    }\n}\n\n// Ethernet port\nmodule ethernet_port(x_pos) {\n    color(color_port)\n    translate([x_pos, -42, 0])\n    union() {\n        // Port housing\n        difference() {\n            cube([12, 8, 8], center = true);\n            translate([0, -4.1, 0])\n                cube([10, 8, 6], center = true);\n        }\n        \n        // Port pins (simplified)\n        for (i = [-3:1:3]) {\n            translate([i * 1.2, -4.5, 2])\n                cube([0.5, 1, 0.5]);\n        }\n    }\n}\n\n// LED indicators\nmodule led_indicators() {\n    // Power LED\n    color(color_led)\n    translate([-25, 42.5, 0])\n        cylinder(h = 1, r = 2);\n    \n    // Signal strength LEDs\n    for (i = [0:3]) {\n        color([0, 0.8 - i * 0.2, 0])\n        translate([10 + i * 8, 42.5, 0])\n            cylinder(h = 1, r = 1.5);\n    }\n}\n\n// Brand label\nmodule brand_label() {\n    color(color_label)\n    translate([0, 20, -12.6])\n    linear_extrude(height = 0.5)\n    text(\"SIGNAL+\", size = 8, halign = \"center\");\n}\n\n// Power connector\nmodule power_connector() {\n    color(color_port)\n    translate([50, -42, 0])\n    union() {\n        // Connector housing\n        cube([8, 12, 8], center = true);\n        \n        // Center pin\n        translate([0, -6.5, 0])\n            cylinder(h = 3, r = 1.5);\n    }\n}\n\n// Assemble the router\nunion() {\n    router_body();\n    \n    // Four antennas\n    antenna(45, 30);\n    antenna(135, 30);\n    antenna(225, 30);\n    antenna(315, 30);\n    \n    // Four ethernet ports\n    ethernet_port(-40);\n    ethernet_port(-20);\n    ethernet_port(0);\n    ethernet_port(20);\n    \n    // LED indicators\n    led_indicators();\n    \n    // Brand label\n    brand_label();\n    \n    // Power connector\n    power_connector();\n}",
    "renders": true
  },
  {
    "electronic_device": "recorder",
    "openscad_code": "// OpenSCAD Digital Voice Recorder (Medium Complexity, Realistic Style)\n// Overall dimensions: 83 × 28 × 12 mm (fits in pocket)\n\n// Color constants\nrecorder_color = \"Silver\";\nbutton_color = \"DimGray\";\nscreen_color = \"Black\";\nport_color = \"DarkGray\";\nled_color = \"Red\";\n\n// Main body shell\nmodule recorder_body() {\n    difference() {\n        color(recorder_color)\n        union() {\n            // Central chassis\n            translate([0,0,-1.5])\n                cube([83,28,12], center=true);\n\n            // Top ridge for grip\n            translate([0,0,5.5])\n                cube([70, 24, 2], center=true);\n\n            // Bottom ridge for grip\n            translate([0,0,-5.5])\n                cube([70, 24, 2], center=true);\n        }\n\n        // USB-C port cutout (centered on right side)\n        translate([42,0,-1])\n            cube([6, 8, 5], center=true);\n\n        // Microphone hole (top edge)\n        translate([-38,12,0])\n            rotate([0,90,0])\n                cylinder(h=3, d=2, center=true);\n\n        // 3.5 mm line-in jack\n        translate([-42,0,-1])\n            rotate([0,90,0])\n                cylinder(h=6, d=5.5, center=true);\n    }\n}\n\n// Display module\nmodule display() {\n    translate([-25,8,6.5])\n        color(screen_color)\n        cube([30, 10, 1]);\n\n    // Screen bezel\n    translate([-25,8,7])\n        cube([31, 11, 0.5], center=true);\n}\n\n// Buttons cluster (D-pad + center)\nmodule buttons() {\n    // D-pad ring\n    translate([25,8,7])\n        color(button_color)\n        cube([15, 15, 1.5], center=true);\n\n    // Up\n    translate([25,12,8])\n        cube([4, 4, 1], center=true);\n\n    // Down\n    translate([25,4,8])\n        cube([4, 4, 1], center=true);\n\n    // Left\n    translate([21,8,8])\n        cube([4, 4, 1], center=true);\n\n    // Right\n    translate([29,8,8])\n        cube([4, 4, 1], center=true);\n\n    // Center button\n    translate([25,8,8.5])\n        color(\"RoyalBlue\")\n        cylinder(h=1.5, d=5, center=true);\n}\n\n// Recording LED indicator\nmodule led() {\n    translate([0, -12, 7])\n        color(led_color)\n        cylinder(h=1, d=3, center=true);\n}\n\n// Speaker grill holes (array)\nmodule speaker_grill() {\n    color(\"DarkSlateGray\")\n    for (x = [-35:-15:5])\n        for (y = [-6:3:6])\n            translate([x, y, -6.5])\n                cylinder(h=1, d=1.5, center=true);\n}\n\n// Clip on rear for attaching to pocket\nmodule clip() {\n    color(recorder_color)\n    translate([0,0,-13])\n        difference() {\n            union() {\n                // Base plate\n                cube([50, 25, 1], center=true);\n                // Curved lip\n                translate([0, 12, -2])\n                    rotate([0,90,0])\n                        cylinder(h=50, d=4, center=true);\n            }\n            // Cutout for spring action\n            translate([0,0,-2])\n                cube([45, 20, 5], center=true);\n        }\n}\n\n// Branding text placeholder\nmodule branding() {\n    translate([-10, -10, 7])\n        color(\"Black\")\n        cube([20, 3, 0.5], center=true);\n}\n\n// Assembly\nrecorder_body();\ndisplay();\nbuttons();\nled();\nspeaker_grill();\nclip();\nbranding();",
    "renders": true
  },
  {
    "electronic_device": "player",
    "openscad_code": "// Portable Media Player - Realistic Style, Medium Complexity\n// Dimensions: 80mm x 45mm x 12mm\n\n// Main body with rounded edges\nmodule body() {\n    difference() {\n        // Main rounded rectangle\n        minkowski() {\n            cube([75, 40, 7], center=true);\n            cylinder(h=0.1, r=2.5, $fn=20);\n        }\n        \n        // Screen recess\n        translate([0, 5, 3.6])\n            cube([50, 30, 1], center=true);\n        \n        // Button area recess\n        translate([0, -12, 3.6])\n            cube([60, 10, 1], center=true);\n    }\n}\n\n// Screen assembly\nmodule screen() {\n    color([0.1, 0.1, 0.1])\n    translate([0, 5, 4.1])\n        cube([48, 28, 0.5], center=true);\n    \n    color([0.2, 0.2, 0.2])\n    translate([0, 5, 4.6])\n        cube([46, 26, 0.1], center=true);\n}\n\n// Navigation wheel\nmodule wheel() {\n    color([0.3, 0.3, 0.3])\n    translate([0, -12, 4.1])\n        cylinder(h=1.5, r=12, $fn=40);\n    \n    // Center button\n    color([0.2, 0.2, 0.2])\n    translate([0, -12, 5.1])\n        cylinder(h=0.5, r=5, $fn=20);\n    \n    // Direction buttons (4-way)\n    for(a = [0:90:270]) {\n        rotate([0, 0, a])\n        translate([8, -12, 5.1])\n            cube([6, 4, 0.5], center=true);\n    }\n}\n\n// Play/Pause button\nmodule playButton() {\n    color([0.3, 0.3, 0.3])\n    translate([-20, -12, 4.1])\n        cube([8, 6, 1.5], center=true);\n    \n    color([0.1, 0.1, 0.1])\n    translate([-20, -12, 4.6])\n        cube([6, 4, 0.5], center=true);\n}\n\n// Menu button\nmodule menuButton() {\n    color([0.3, 0.3, 0.3])\n    translate([20, -12, 4.1])\n        cube([8, 6, 1.5], center=true);\n    \n    color([0.1, 0.1, 0.1])\n    translate([20, -12, 4.6])\n        cube([6, 4, 0.5], center=true);\n}\n\n// Headphone jack\nmodule headphoneJack() {\n    color([0.2, 0.2, 0.2])\n    translate([-30, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=5, r=1.5, $fn=20);\n}\n\n// USB port\nmodule usbPort() {\n    color([0.2, 0.2, 0.2])\n    translate([30, 0, 0])\n        rotate([90, 0, 0])\n            cube([8, 5, 2], center=true);\n    \n    color([0.1, 0.1, 0.1])\n    translate([30, 0, 1.1])\n        cube([6, 3, 0.5], center=true);\n}\n\n// Hold switch\nmodule holdSwitch() {\n    color([0.3, 0.3, 0.3])\n    translate([0, 20, 0])\n        cube([15, 3, 2], center=true);\n    \n    color([0.5, 0.5, 0.5])\n    translate([5, 20, 0.5])\n        cube([5, 2.5, 1], center=true);\n}\n\n// LED indicator\nmodule led() {\n    color([0.1, 0.1, 0.1])\n    translate([25, 15, 4.1])\n        cylinder(h=0.5, r=1.5, $fn=10);\n}\n\n// Back with Apple logo\nmodule back() {\n    color([0.8, 0.8, 0.8])\n    difference() {\n        translate([0, 0, -6])\n            minkowski() {\n                cube([75, 40, 7], center=true);\n                cylinder(h=0.1, r=2.5, $fn=20);\n            }\n        \n        // Apple logo recess\n        translate([0, 0, -2.4])\n            scale([0.05, 0.05, 1])\n                rotate([90, 0, 0])\n                    linear_extrude(0.5)\n                        import(\"apple.dxf\");\n    }\n}\n\n// Assembly\nunion() {\n    color([0.9, 0.9, 0.9])\n    body();\n    \n    screen();\n    wheel();\n    playButton();\n    menuButton();\n    headphoneJack();\n    usbPort();\n    holdSwitch();\n    led();\n    \n    back();\n}",
    "renders": true
  },
  {
    "electronic_device": "mixer",
    "openscad_code": "// Mixer Electronic Device - Realistic Style, Medium Complexity\n// Dimensions: 60mm x 80mm x 25mm (main body)\n\n// Color definitions\n$fn = 32;\n\n// Main body module\nmodule mixer_body() {\n    color(\"silver\") \n    difference() {\n        // Main enclosure\n        translate([-30, -40, 0])\n            rounded_cube(60, 80, 25, 3);\n        \n        // Top display recess\n        translate([-25, -20, 20])\n            cube([50, 40, 5]);\n            \n        // Front panel recess\n        translate([-25, -39, 5])\n            cube([50, 30, 15]);\n            \n        // USB port\n        translate([20, -41, 10])\n            cube([10, 2, 8]);\n            \n        // Power jack\n        translate([-25, -41, 10])\n            cube([8, 2, 8]);\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(w, d, h, r) {\n    hull() {\n        for(x = [r, w-r], y = [r, d-r]) {\n            translate([x, y, r])\n                sphere(r = r);\n            translate([x, y, h-r])\n                sphere(r = r);\n        }\n    }\n}\n\n// Knobs module\nmodule knobs() {\n    // Master volume\n    color(\"darkslategray\")\n    translate([0, -25, 25.5])\n        cylinder(h = 5, r = 8);\n    color(\"black\")\n    translate([0, -25, 30])\n        cylinder(h = 2, r = 6);\n    \n    // Channel 1\n    color(\"darkslategray\")\n    translate([-15, -25, 25.5])\n        cylinder(h = 5, r = 6);\n    color(\"black\")\n    translate([-15, -25, 30])\n        cylinder(h = 2, r = 4);\n        \n    // Channel 2\n    color(\"darkslategray\")\n    translate([15, -25, 25.5])\n        cylinder(h = 5, r = 6);\n    color(\"black\")\n    translate([15, -25, 30])\n        cylinder(h = 2, r = 4);\n}\n\n// Buttons module\nmodule buttons() {\n    // Power button\n    color(\"red\")\n    translate([-20, 0, 25.5])\n        cylinder(h = 1, r = 4);\n        \n    // Mute buttons\n    for(i = [-1, 1]) {\n        color(\"darkgray\")\n        translate([i * 15, 0, 25.5])\n            cylinder(h = 1, r = 3);\n    }\n}\n\n// Display module\nmodule display() {\n    // LCD screen\n    color(\"black\")\n    translate([-20, -15, 21])\n        cube([40, 30, 0.5]);\n        \n    // Screen border\n    color(\"dimgray\")\n    translate([-22, -17, 20.5])\n        cube([44, 34, 1]);\n        \n    // LED indicators\n    for(i = [-20, 0, 20]) {\n        color(\"lime\")\n        translate([i, 16, 25.5])\n            cylinder(h = 1, r = 2);\n    }\n}\n\n// Input jacks module\nmodule input_jacks() {\n    // XLR inputs\n    for(i = [-20, 0, 20]) {\n        color(\"black\")\n        translate([i, -35, 15])\n            cylinder(h = 10, r = 4);\n        color(\"silver\")\n        translate([i, -35, 15])\n            cylinder(h = 2, r = 3);\n    }\n    \n    // 1/4\" jacks\n    for(i = [-10, 10]) {\n        color(\"black\")\n        translate([i, -35, 10])\n            cylinder(h = 8, r = 3);\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    color(\"black\")\n    for(x = [-25, 25], y = [-35, 35]) {\n        translate([x, y, 0])\n            cylinder(h = 2, r = 3);\n    }\n}\n\n// Assembly\nmixer_body();\nknobs();\nbuttons();\ndisplay();\ninput_jacks();\nfeet();\n\n// Logo\ncolor(\"blue\")\ntranslate([0, 30, 25.5])\n    linear_extrude(height = 0.5)\n        text(\"MIX-2000\", size = 5, halign = \"center\");",
    "renders": true
  },
  {
    "electronic_device": "transducer",
    "openscad_code": "// Transducer Electronic Device - Realistic Style (Medium Complexity)\n// Approximate size: 80mm x 45mm x 32mm\n\n// Main color definitions\ncolor_body = \"Black\";\ncolor_screen = \"LightBlue\";\ncolor_button = \"Gray\";\ncolor_connector = \"Silver\";\ncolor_labels = \"White\";\n\n// Overall dimensions\nbody_width = 80;\nbody_height = 45;\nbody_depth = 32;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main body with rounded edges\nmodule main_body() {\n    color(color_body)\n    union() {\n        // Main rectangular body\n        translate([-body_width/2, -body_height/2, 0])\n            cube([body_width, body_height, body_depth]);\n        \n        // Rounded front edge\n        translate([-body_width/2 + wall_thickness, -body_height/2, body_depth - wall_thickness])\n            cylinder(h=body_height - 2*wall_thickness, r=wall_thickness, $fn=20);\n        translate([body_width/2 - wall_thickness, -body_height/2, body_depth - wall_thickness])\n            cylinder(h=body_height - 2*wall_thickness, r=wall_thickness, $fn=20);\n    }\n}\n\n// LCD display screen\nmodule display_screen() {\n    color(color_screen)\n    translate([-body_width/2 + 8, -body_height/2 + 8, body_depth])\n        cube([body_width - 16, 20, 0.5]);\n    \n    // Screen border\n    color(\"Black\")\n    translate([-body_width/2 + 7, -body_height/2 + 7, body_depth])\n        cube([body_width - 14, 22, 0.1]);\n}\n\n// Control buttons\nmodule control_buttons() {\n    for (i = [0:3]) {\n        color(color_button)\n        translate([-body_width/2 + 15 + i*12, -body_height/2 + 32, body_depth])\n            cylinder(h=1.5, r=3, $fn=16);\n    }\n    \n    // Power button (larger, red)\n    color(\"Red\")\n    translate([body_width/2 - 12, -body_height/2 + 35, body_depth])\n        cylinder(h=1.5, r=4, $fn=16);\n}\n\n// Cable connector port\nmodule connector_port() {\n    color(color_connector)\n    difference() {\n        // Main connector housing\n        translate([0, -body_height/2 - 3, 16])\n            cube([20, 6, 8]);\n        \n        // Connector hole\n        translate([0, -body_height/2 - 4, 18])\n            cube([16, 8, 4]);\n    }\n    \n    // Connector pins\n    for (i = [0:3]) {\n        color(\"Gold\")\n        translate([-6 + i*4, -body_height/2 - 4.5, 20])\n            cylinder(h=2, r=0.5, $fn=8);\n    }\n}\n\n// Status LEDs\nmodule status_leds() {\n    for (i = [0:2]) {\n        color([\"Green\", \"Yellow\", \"Red\"][i])\n        translate([-body_width/2 + 8 + i*8, body_height/2 - 6, body_depth])\n            cylinder(h=0.5, r=2, $fn=12);\n    }\n}\n\n// Ventilation slots\nmodule ventilation_slots() {\n    for (i = [0:5]) {\n        color(\"Black\")\n        translate([body_width/2 - 15, -body_height/2 + 5 + i*6, body_depth - 1])\n            cube([10, 2, 1]);\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    for (pos = [[-30, -15], [30, -15], [-30, 15], [30, 15]]) {\n        translate([pos[0], pos[1], -1])\n            cylinder(h=body_depth + 2, r=2, $fn=20);\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        main_body();\n        display_screen();\n        control_buttons();\n        connector_port();\n        status_leds();\n        ventilation_slots();\n    }\n    \n    // Mounting holes cutouts\n    mounting_holes();\n}\n\n// Device label\ncolor(color_labels)\ntranslate([-body_width/2 + 5, body_height/2 - 12, body_depth + 0.1])\n    linear_extrude(0.2)\n        text(\"ULTRASONIC\", size=4, font=\"Arial:style=Bold\");",
    "renders": true
  },
  {
    "electronic_device": "tweeter",
    "openscad_code": "// OpenSCAD Tweeter (Smart Speaker) Model\n// Medium complexity realistic style\n\n// Main dimensions\nspeaker_diameter = 80;\nspeaker_height = 45;\nwall_thickness = 2;\n\n// Colors\nbody_color = [0.2, 0.2, 0.2];\nmesh_color = [0.1, 0.1, 0.1];\naccent_color = [0.8, 0.8, 0.8];\nled_color = [0, 0.8, 1];\nport_color = [0.3, 0.3, 0.3];\n\n// Main body\nmodule main_body() {\n    color(body_color) {\n        difference() {\n            // Outer cylinder\n            cylinder(h=speaker_height, d=speaker_diameter, $fn=64);\n            \n            // Hollow center\n            translate([0, 0, wall_thickness])\n            cylinder(h=speaker_height-wall_thickness*2, d=speaker_diameter-wall_thickness*2, $fn=64);\n            \n            // Bottom cavity for electronics\n            translate([0, 0, speaker_height-8])\n            cylinder(h=8, d=speaker_diameter-20, $fn=32);\n        }\n    }\n}\n\n// Speaker mesh grill\nmodule speaker_mesh() {\n    color(mesh_color) {\n        difference() {\n            // Grill base\n            cylinder(h=3, d=speaker_diameter-4, $fn=64);\n            \n            // Holes pattern\n            for(angle = [0:30:330]) {\n                rotate([0, 0, angle])\n                for(r = [15:10:35]) {\n                    translate([r, 0, -1])\n                    cylinder(h=5, d=2, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Control ring with buttons\nmodule control_ring() {\n    color(accent_color) {\n        // Volume ring\n        translate([0, 0, speaker_height-12])\n        difference() {\n            cylinder(h=8, d=speaker_diameter-8, $fn=64);\n            \n            // Volume buttons\n            translate([0, 35, 4])\n            cube([6, 8, 2], center=true);\n            \n            translate([0, -35, 4])\n            cube([6, 8, 2], center=true);\n        }\n        \n        // Play/pause button\n        translate([35, 0, speaker_height-8])\n        color(body_color)\n        cylinder(h=2, d=12, $fn=32);\n    }\n}\n\n// LED indicator ring\nmodule led_ring() {\n    color(led_color) {\n        translate([0, 0, speaker_height-2])\n        difference() {\n            cylinder(h=1, d=speaker_diameter-12, $fn=64);\n            translate([0, 0, -1])\n            cylinder(h=3, d=speaker_diameter-20, $fn=64);\n        }\n    }\n}\n\n// Base with ports\nmodule base() {\n    color(body_color) {\n        // Base platform\n        translate([0, 0, -2])\n        cylinder(h=4, d=speaker_diameter+6, $fn=64);\n        \n        // Ports\n        color(port_color) {\n            // USB-C port\n            translate([20, 0, -1])\n            cube([8, 3, 2], center=true);\n            \n            // 3.5mm jack\n            translate([-20, 0, -1])\n            rotate([0, 90, 0])\n            cylinder(h=6, d=6, $fn=16);\n            \n            // Power port\n            translate([0, -25, -1])\n            cube([12, 4, 2], center=true);\n        }\n        \n        // Rubber feet\n        for(angle = [45:90:315]) {\n            rotate([0, 0, angle])\n            translate([30, 0, -1])\n            color([0.1, 0.1, 0.1])\n            cylinder(h=1, d=6, $fn=16);\n        }\n    }\n}\n\n// Brand logo placeholder\nmodule logo() {\n    color(accent_color) {\n        translate([0, 0, 2])\n        linear_extrude(height=1)\n        text(\"TWEETER\", size=6, halign=\"center\", valign=\"center\");\n    }\n}\n\n// Assemble the model\nmain_body();\ntranslate([0, 0, speaker_height-3]) speaker_mesh();\ncontrol_ring();\nled_ring();\nbase();\ntranslate([0, 0, 0]) logo();",
    "renders": true
  },
  {
    "electronic_device": "woofer",
    "openscad_code": "// Woofer Speaker - Realistic Style, Medium Complexity\n// 3D Printable design with proper wall thickness and no overhangs\n// Features: Driver cone, surround, basket, magnet, terminals, grill, enclosure\n\n// Define dimensions (mm)\nenclosure_d = 80;\nenclosure_h = 45;\nwall_thickness = 2;\ndriver_d = 60;\nmagnet_d = 35;\nmagnet_h = 15;\ncone_depth = 12;\nsurround_thickness = 2;\ngrill_thickness = 1.5;\nterminal_size = 4;\n\n// Main assembly\nunion() {\n    // Enclosure box\n    color([0.1, 0.1, 0.1])  // Dark gray/black\n    difference() {\n        // Main box\n        cube([enclosure_d, enclosure_d, enclosure_h], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n            cube([enclosure_d-wall_thickness*2, enclosure_d-wall_thickness*2, enclosure_h-wall_thickness], center=true);\n        \n        // Front hole for driver\n        translate([0, 0, enclosure_h/2])\n            cylinder(d=driver_d+4, h=wall_thickness+1, center=true);\n    }\n    \n    // Front grill\n    color([0.2, 0.2, 0.2])\n    translate([0, 0, enclosure_h/2+wall_thickness/2])\n        grill();\n    \n    // Driver assembly\n    translate([0, 0, enclosure_h/2-wall_thickness/2])\n        driver_assembly();\n    \n    // Rear panel features\n    color([0.15, 0.15, 0.15])\n    translate([enclosure_d/2-wall_thickness/2, 0, 0])\n    rotate([0, 90, 0])\n        rear_panel();\n}\n\n// Driver assembly module\nmodule driver_assembly() {\n    // Basket frame\n    color([0.4, 0.4, 0.4])  // Light gray\n    difference() {\n        cylinder(d=driver_d+8, h=8, center=true);\n        cylinder(d=driver_d+4, h=9, center=true);\n    }\n    \n    // Spider (suspension)\n    color([0.8, 0.8, 0.8])  // Light gray\n    translate([0, 0, -3])\n        cylinder(d=driver_d-10, h=1, center=true);\n    \n    // Voice coil former\n    color([0.3, 0.3, 0.3])\n    translate([0, 0, -cone_depth/2])\n        cylinder(d=driver_d-25, h=cone_depth+2, center=true);\n    \n    // Cone\n    color([0.9, 0.9, 0.9])  // White/light gray\n    translate([0, 0, -cone_depth/2])\n    cylinder(d1=driver_d-4, d2=driver_d-25, h=cone_depth, center=true);\n    \n    // Surround (rubber edge)\n    color([0.2, 0.2, 0.2])  // Black rubber\n    translate([0, 0, -cone_depth/2+cone_depth+1])\n    difference() {\n        cylinder(d=driver_d, h=2, center=true);\n        cylinder(d=driver_d-4, h=3, center=true);\n    }\n    \n    // Dust cap\n    color([0.7, 0.7, 0.7])\n    translate([0, 0, -cone_depth/2+cone_depth-1])\n        sphere(d=driver_d/4);\n    \n    // Magnet\n    color([0.3, 0.3, 0.3])  // Dark gray\n    translate([0, 0, -10])\n        cylinder(d=magnet_d, h=magnet_h, center=true);\n}\n\n// Grill module with holes\nmodule grill() {\n    difference() {\n        // Grill plate\n        cylinder(d=driver_d+6, h=grill_thickness, center=true);\n        \n        // Center hole\n        cylinder(d=driver_d/6, h=grill_thickness+1, center=true);\n        \n        // Perimeter holes in circular pattern\n        for(i=[0:11]) {\n            rotate([0, 0, i*30])\n            translate([driver_d/2.5, 0, 0])\n                cylinder(d=driver_d/20, h=grill_thickness+1, center=true);\n        }\n        \n        // Additional holes\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n            translate([driver_d/3.5, 0, 0])\n                cylinder(d=driver_d/15, h=grill_thickness+1, center=true);\n        }\n    }\n}\n\n// Rear panel with terminals and port\nmodule rear_panel() {\n    // Terminal plate\n    difference() {\n        cube([enclosure_h-4, 20, wall_thickness], center=true);\n        \n        // Terminal holes\n        for(i=[-1:1]) {\n            translate([i*6, 0, 0])\n                cylinder(d=terminal_size, h=wall_thickness+1, center=true);\n        }\n    }\n    \n    // Bass reflex port\n    color([0.1, 0.1, 0.1])\n    translate([10, 0, 0])\n    difference() {\n        cylinder(d=12, h=wall_thickness+1, center=true);\n        cylinder(d=8, h=wall_thickness+2, center=true);\n    }\n    \n    // Label area\n    color([0.05, 0.05, 0.05])\n    translate([-5, 0, 0])\n        cube([8, 15, 0.5], center=true);\n}",
    "renders": true
  },
  {
    "electronic_device": "soundbar",
    "openscad_code": "// Soundbar model - realistic medium complexity\n// 3D printable with no overhangs\n\n// Main body dimensions\nbody_width = 90;\nbody_height = 30;\nbody_depth = 40;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Speaker grill parameters\ngrill_holes = 8;\ngrill_hole_diameter = 4;\ngrill_hole_spacing = 8;\n\n// LED indicator strip\nled_width = 30;\nled_height = 2;\nled_depth = 1;\n\n// Control buttons\nbutton_width = 6;\nbutton_height = 3;\nbutton_depth = 1;\nbutton_spacing = 10;\n\n// Ports\nusb_port_width = 8;\nusb_port_height = 4;\naux_port_width = 6;\naux_port_height = 4;\n\n// Main body module\nmodule soundbar_body() {\n    difference() {\n        // Outer shell\n        color([0.2, 0.2, 0.2])\n        cube([body_width, body_depth, body_height], center=true);\n        \n        // Hollow interior\n        color([0.2, 0.2, 0.2])\n        translate([0, 0, wall_thickness/2])\n        cube([body_width-wall_thickness*2, body_depth-wall_thickness, body_height-wall_thickness*2], center=true);\n    }\n}\n\n// Speaker grill module\nmodule speaker_grill() {\n    difference() {\n        // Grill plate\n        color([0.1, 0.1, 0.1])\n        translate([0, body_depth/2 - 1, 0])\n        cube([body_width-10, 2, body_height-10], center=true);\n        \n        // Speaker holes\n        for(i = [0:grill_holes-1]) {\n            translate([-(grill_holes-1)*grill_hole_spacing/2 + i*grill_hole_spacing, \n                      body_depth/2 - 0.5, 0])\n            cylinder(h=3, d=grill_hole_diameter, center=true);\n        }\n    }\n}\n\n// LED indicator strip\nmodule led_indicator() {\n    color([0.1, 0.1, 0.8])\n    translate([0, body_depth/2 - 0.5, body_height/2 - 5])\n    cube([led_width, led_depth, led_height], center=true);\n}\n\n// Control buttons\nmodule control_buttons() {\n    for(i = [0:2]) {\n        color([0.3, 0.3, 0.3])\n        translate([-(button_spacing) + i*button_spacing, \n                  body_depth/2 - 2, \n                  body_height/2 - 10])\n        cube([button_width, button_depth, button_height], center=true);\n    }\n}\n\n// Ports panel\nmodule ports_panel() {\n    // Left side ports\n    difference() {\n        color([0.15, 0.15, 0.15])\n        translate([-body_width/2 + 2, 0, 0])\n        cube([4, body_depth, body_height-10], center=true);\n        \n        // USB port\n        color([0.05, 0.05, 0.05])\n        translate([-body_width/2 + 2, body_depth/2 - 5, 5])\n        cube([usb_port_width, 1, usb_port_height], center=true);\n        \n        // AUX port\n        color([0.05, 0.05, 0.05])\n        translate([-body_width/2 + 2, body_depth/2 - 5, -5])\n        cube([aux_port_width, 1, aux_port_height], center=true);\n    }\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    for(x = [-30, 30]) {\n        color([0.1, 0.1, 0.1])\n        translate([x, 0, -body_height/2 - 1])\n        cylinder(h=2, d=8, center=true);\n    }\n}\n\n// Brand logo\nmodule logo() {\n    color([0.9, 0.9, 0.9])\n    translate([0, body_depth/2 - 0.5, 0])\n    cube([20, 0.5, 5], center=true);\n}\n\n// Assembly\nsoundbar_body();\nspeaker_grill();\nled_indicator();\ncontrol_buttons();\nports_panel();\nrubber_feet();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "boombox",
    "openscad_code": "// Boombox 3D Model - Medium Complexity Realistic Style\n// Roughly 80mm wide, 40mm tall, 25mm deep\n\n// Overall dimensions\nboombox_width = 80;\nboombox_height = 40;\nboombox_depth = 25;\nwall_thickness = 2;\n\n// Main body module\nmodule boombox_body() {\n    // Main chassis\n    difference() {\n        // Outer shell\n        color([0.2, 0.2, 0.2])\n        cube([boombox_width, boombox_depth, boombox_height], center=true);\n        \n        // Hollow out interior\n        translate([0, 0, wall_thickness/2])\n        cube([boombox_width-2*wall_thickness, boombox_depth-wall_thickness, boombox_height-2*wall_thickness], center=true);\n    }\n}\n\n// Speaker grill module\nmodule speaker_grill(x_pos, diameter) {\n    // Speaker frame\n    color([0.1, 0.1, 0.1])\n    translate([x_pos, boombox_depth/2 - wall_thickness, 0])\n    cylinder(h=wall_thickness, d=diameter+4, center=true);\n    \n    // Grill holes pattern\n    for(i=[-3:3]) {\n        for(j=[-3:3]) {\n            if(sqrt(i*i+j*j) < 3) {\n                translate([x_pos + i*3, boombox_depth/2 - wall_thickness/2, j*3])\n                cylinder(h=wall_thickness+1, d=1.5, center=true);\n            }\n        }\n    }\n}\n\n// Control panel with buttons\nmodule control_panel() {\n    // Panel surface\n    color([0.3, 0.3, 0.3])\n    translate([0, boombox_depth/2 - wall_thickness - 2, boombox_height/2 - 10])\n    cube([boombox_width/2, 4, 8], center=true);\n    \n    // Buttons\n    button_positions = [-15, -10, -5, 0, 5, 10, 15];\n    for(i=[0:len(button_positions)-1]) {\n        color([0.8, 0.1, 0.1])\n        translate([button_positions[i], boombox_depth/2 - wall_thickness - 3, boombox_height/2 - 8])\n        cube([3, 1, 2], center=true);\n    }\n}\n\n// LCD display\nmodule lcd_display() {\n    // Screen bezel\n    color([0.15, 0.15, 0.15])\n    translate([0, boombox_depth/2 - wall_thickness - 1, boombox_height/2 - 5])\n    cube([30, 2, 12], center=true);\n    \n    // LCD screen\n    color([0.05, 0.05, 0.05])\n    translate([0, boombox_depth/2 - wall_thickness, boombox_height/2 - 5])\n    cube([28, 0.5, 10], center=true);\n}\n\n// Handle module\nmodule handle() {\n    // Handle grips\n    color([0.4, 0.4, 0.4])\n    translate([0, 0, boombox_height/2 + 5])\n    rotate([90, 0, 0])\n    cylinder(h=boombox_width - 10, d=6, center=true);\n    \n    // Handle supports\n    for(x=[-boombox_width/2 + 5, boombox_width/2 - 5]) {\n        translate([x, 0, boombox_height/2 + 2.5])\n        cylinder(h=5, d=6, center=true);\n    }\n}\n\n// Antenna\nmodule antenna() {\n    // Base\n    color([0.3, 0.3, 0.3])\n    translate([boombox_width/2 - 5, 0, boombox_height/2 - 5])\n    cylinder(h=3, d=4, center=true);\n    \n    // Telescoping antenna\n    color([0.7, 0.7, 0.7])\n    translate([boombox_width/2 - 5, 0, boombox_height/2 - 5 + 3 + 5])\n    cylinder(h=15, d=1.5, center=true);\n}\n\n// Ports module\nmodule ports() {\n    // Headphone jack\n    color([0.1, 0.1, 0.1])\n    translate([-boombox_width/2 + 10, 0, -boombox_height/2 + 5])\n    cylinder(h=wall_thickness+1, d=3.5, center=true);\n    \n    // USB port\n    color([0.1, 0.1, 0.1])\n    translate([-boombox_width/2 + 10, 0, -boombox_height/2 + 10])\n    cube([7, wall_thickness+1, 2], center=true);\n}\n\n// Power button\nmodule power_button() {\n    color([0.1, 0.8, 0.1])\n    translate([boombox_width/2 - 10, boombox_depth/2 - wall_thickness - 1, 0])\n    cylinder(h=2, d=6, center=true);\n}\n\n// Volume knob\nmodule volume_knob() {\n    color([0.2, 0.2, 0.2])\n    translate([boombox_width/2 - 20, boombox_depth/2 - wall_thickness - 1, 0])\n    cylinder(h=3, d=8, center=true);\n    \n    // Knob indicator\n    color([0.8, 0.8, 0.8])\n    translate([boombox_width/2 - 20, boombox_depth/2 - wall_thickness - 1 + 4, 0])\n    cube([1, 2, 0.5], center=true);\n}\n\n// Logo\nmodule logo() {\n    color([0.8, 0.8, 0.8])\n    translate([0, boombox_depth/2 - 1, boombox_height/2 - 2])\n    cube([15, 0.5, 4], center=true);\n}\n\n// Assemble the boombox\nunion() {\n    boombox_body();\n    speaker_grill(-25, 20);\n    speaker_grill(25, 20);\n    control_panel();\n    lcd_display();\n    handle();\n    antenna();\n    ports();\n    power_button();\n    volume_knob();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "turntable",
    "openscad_code": "// Turntable Electronic Device - Realistic Style, Medium Complexity\n\n// Overall dimensions\nturntable_width = 80;\nturntable_depth = 60;\nturntable_height = 15;\n\n// Base unit\nmodule base_unit() {\n    difference() {\n        // Main base\n        color([0.2, 0.2, 0.2])\n        cube([turntable_width, turntable_depth, turntable_height], center=true);\n        \n        // Recessed top\n        color([0.15, 0.15, 0.15])\n        translate([0, 0, turntable_height/2 - 1])\n        cube([turntable_width - 4, turntable_depth - 4, 2], center=true);\n    }\n}\n\n// Platter\nmodule platter() {\n    // Platter base\n    color([0.3, 0.3, 0.3])\n    cylinder(h=3, r=28, center=true);\n    \n    // Rubber mat\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, 1.6])\n    cylinder(h=0.5, r=27, center=true);\n    \n    // Spindle\n    color([0.8, 0.8, 0.8])\n    translate([0, 0, 2])\n    cylinder(h=5, r=1.5, center=true);\n}\n\n// Tonearm assembly\nmodule tonearm() {\n    // Tonearm base\n    color([0.4, 0.4, 0.4])\n    translate([25, 0, 7.5])\n    rotate([0, 0, 45])\n    cylinder(h=5, r=5, center=true);\n    \n    // Tonearm tube\n    color([0.9, 0.9, 0.9])\n    translate([25, 0, 10])\n    rotate([90, 0, 45])\n    cylinder(h=30, r=1, center=true);\n    \n    // Headshell\n    color([0.1, 0.1, 0.1])\n    translate([45, 20, 10])\n    rotate([90, 0, 45])\n    cube([8, 2, 5], center=true);\n}\n\n// Control buttons\nmodule controls() {\n    // Power button\n    color([0.8, 0, 0])\n    translate([-30, -20, 7.5])\n    cylinder(h=2, r=3, center=true);\n    \n    // Speed buttons\n    for(i=[0:2]) {\n        color([0, 0.7, 0])\n        translate([-30, -10 + i*6, 7.5])\n        cylinder(h=1.5, r=2, center=true);\n    }\n    \n    // LED indicators\n    for(i=[0:2]) {\n        color([0, 1, 0])\n        translate([-25, -10 + i*6, 8.5])\n        sphere(r=0.8);\n    }\n}\n\n// Display screen\nmodule display() {\n    // Screen bezel\n    color([0.1, 0.1, 0.1])\n    translate([-15, 20, 7.5])\n    cube([20, 8, 1], center=true);\n    \n    // Screen\n    color([0, 0.2, 0])\n    translate([-15, 20, 8])\n    cube([18, 6, 0.5], center=true);\n}\n\n// RCA outputs\nmodule rca_outputs() {\n    // Output jacks\n    for(i=[0:1]) {\n        color([0.9, 0.9, 0.9])\n        translate([30, 20 - i*6, 7.5])\n        rotate([90, 0, 0])\n        cylinder(h=4, r=2.5, center=true);\n        \n        color([0.8, 0, 0])\n        translate([30, 20 - i*6, 9.5])\n        rotate([90, 0, 0])\n        cylinder(h=2, r=1.5, center=true);\n    }\n}\n\n// USB port\nmodule usb_port() {\n    color([0.2, 0.2, 0.2])\n    translate([30, -20, 7.5])\n    cube([8, 4, 2], center=true);\n    \n    color([0.8, 0.8, 0.8])\n    translate([30, -20, 8.5])\n    cube([7, 3, 0.5], center=true);\n}\n\n// Feet\nmodule feet() {\n    for(x=[-1, 1]) {\n        for(y=[-1, 1]) {\n            color([0.3, 0.3, 0.3])\n            translate([x*35, y*25, -7.5])\n            cylinder(h=3, r=3, center=true);\n            \n            color([0.2, 0.2, 0.2])\n            translate([x*35, y*25, -9])\n            sphere(r=3);\n        }\n    }\n}\n\n// Main assembly\nbase_unit();\ntranslate([0, 0, 7.5])\nplatter();\ntonearm();\ncontrols();\ndisplay();\nrca_outputs();\nusb_port();\nfeet();",
    "renders": true
  },
  {
    "electronic_device": "preamplifier",
    "openscad_code": "// OpenSCAD Preamplifier Model\n// Realistic medium-complexity preamplifier for 3D printing\n\n$fn = 50;\n\n// Main dimensions\ncase_width = 80;\ncase_depth = 120;\ncase_height = 30;\nwall_thickness = 2;\n\n// Front panel features\npanel_thickness = 3;\nknob_diameter = 10;\nknob_height = 8;\nbutton_diameter = 6;\n\n// Module for rounded rectangle\nmodule rounded_cube(size, radius) {\n    hull() {\n        translate([radius, radius, 0])\n            cylinder(h=size.z, r=radius);\n        translate([size.x - radius, radius, 0])\n            cylinder(h=size.z, r=radius);\n        translate([radius, size.y - radius, 0])\n            cylinder(h=size.z, r=radius);\n        translate([size.x - radius, size.y - radius, 0])\n            cylinder(h=size.z, r=radius);\n    }\n}\n\n// Main enclosure\nmodule enclosure() {\n    difference() {\n        // Outer shell\n        color(\"darkslategray\")\n        rounded_cube([case_width, case_depth, case_height], 5);\n        \n        // Inner cavity\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            rounded_cube([\n                case_width - 2*wall_thickness,\n                case_depth - 2*wall_thickness,\n                case_height - wall_thickness\n            ], 3);\n    }\n}\n\n// Front panel\nmodule front_panel() {\n    color(\"black\")\n    translate([0, 0, case_height - panel_thickness])\n        cube([case_width, case_depth, panel_thickness], center=false);\n}\n\n// Knob module\nmodule knob(x_pos, label) {\n    translate([x_pos, 10, case_height + knob_height/2])\n        rotate([90, 0, 0])\n        difference() {\n            // Knob body\n            color(\"silver\")\n            cylinder(h=knob_height, r=knob_diameter/2);\n            \n            // Indicator line\n            translate([0, 0, -0.1])\n                cube([knob_diameter/4, 1, knob_height + 0.2], center=true);\n        }\n}\n\n// Button module\nmodule button(x_pos, y_pos) {\n    translate([x_pos, y_pos, case_height + button_diameter/2])\n        color(\"red\")\n        sphere(d=button_diameter);\n}\n\n// RCA connector module\nmodule rca_connector(x_pos, label) {\n    translate([x_pos, 5, case_height/2])\n        difference() {\n            // Outer shell\n            color(\"gold\")\n            cylinder(h=8, r=4);\n            \n            // Inner hole\n            color(\"black\")\n            cylinder(h=9, r=1.5);\n        }\n}\n\n// LED indicator\nmodule led_indicator(x_pos) {\n    translate([x_pos, case_depth - 10, case_height + 1])\n        color(\"lime\")\n        sphere(d=3);\n}\n\n// Ventilation slots on top\nmodule ventilation_slots() {\n    for(i = [1:5]) {\n        translate([10 + i*12, case_depth/2 - 5, case_height - 2])\n            cube([8, 10, 2]);\n    }\n}\n\n// Brand label\nmodule brand_label() {\n    translate([case_width/2 - 15, case_depth - 5, case_height + 0.1])\n        linear_extrude(height=0.5)\n            text(\"PRE-AMP\", size=4);\n}\n\n// Assemble the preamplifier\nenclosure();\nfront_panel();\n\n// Knobs\nknob(20, \"Volume\");\nknob(40, \"Bass\");\nknob(60, \"Treble\");\n\n// Buttons\nbutton(15, 25);\nbutton(30, 25);\nbutton(45, 25);\n\n// RCA connectors (inputs)\nrca_connector(15);\nrca_connector(25);\nrca_connector(35);\n\n// RCA connectors (outputs)\ntranslate([0, case_depth - 15, 0])\n    rca_connector(15);\ntranslate([0, case_depth - 15, 0])\n    rca_connector(25);\n\n// LED indicators\nled_indicator(50);\nled_indicator(65);\n\n// Ventilation\nventilation_slots();\n\n// Brand label\nbrand_label();",
    "renders": true
  },
  {
    "electronic_device": "equalizer",
    "openscad_code": "// Equalizer Electronic Device - Realistic Style, Medium Complexity\n// Dimensions: 120mm x 80mm x 30mm\n\n$fn = 64;\n\n// Main colors\ncolor_body = [0.15, 0.15, 0.15];\ncolor_sliders = [0.8, 0.8, 0.8];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_text = [0.9, 0.9, 0.9];\ncolor_led = [1, 0, 0];\ncolor_buttons = [0.3, 0.3, 0.3];\n\n// Main body\nmodule main_body() {\n    color(color_body)\n    difference() {\n        // Outer shell\n        cube([120, 80, 30], center = true);\n        \n        // Hollow inside\n        translate([0, 0, 5])\n        cube([110, 70, 20], center = true);\n        \n        // Front panel recess\n        translate([0, 35, 0])\n        cube([110, 8, 28], center = true);\n    }\n}\n\n// LCD screen\nmodule lcd_screen() {\n    color(color_screen)\n    translate([0, 25, 13])\n    cube([60, 15, 1], center = true);\n    \n    // Screen border\n    color([0.5, 0.5, 0.5])\n    translate([0, 25, 14])\n    cube([64, 19, 0.5], center = true);\n}\n\n// Frequency slider module\nmodule slider(frequency, height, position) {\n    // Slider track\n    color([0.2, 0.2, 0.2])\n    translate([position, 10, 12])\n    cube([6, 2, 20], center = true);\n    \n    // Slider knob\n    color(color_sliders)\n    translate([position, 10, 12 + height])\n    cube([8, 4, 3], center = true);\n    \n    // Frequency label\n    color(color_text)\n    translate([position, 0, 14])\n    cube([2, 1, 0.5], center = true);\n}\n\n// Power button\nmodule power_button() {\n    color(color_buttons)\n    difference() {\n        translate([-50, 25, 13])\n        cylinder(h = 2, r = 3, center = true);\n        \n        // Power symbol\n        color(color_body)\n        translate([-50, 25, 14])\n        cylinder(h = 3, r = 1, center = true);\n        translate([-50, 27, 14])\n        cube([0.5, 2, 3], center = true);\n    }\n}\n\n// LED indicators\nmodule led_indicator(position, color) {\n    color(color)\n    translate([position, -25, 13])\n    cylinder(h = 1, r = 1.5, center = true);\n}\n\n// Input/output ports\nmodule io_ports() {\n    color([0.1, 0.1, 0.1])\n    // Left ports\n    for(i = [0:2]) {\n        translate([-55 + i*8, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 5, r = 3, center = true);\n    }\n    \n    // Right ports\n    for(i = [0:2]) {\n        translate([55 - i*8, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 5, r = 3, center = true);\n    }\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    color([0.05, 0.05, 0.05])\n    for(x = [-40, 40])\n    for(y = [-25, 25]) {\n        translate([x, y, -16])\n        cylinder(h = 2, r = 3, center = true);\n    }\n}\n\n// Main assembly\nmain_body();\nlcd_screen();\n\n// Frequency sliders array (12 bands)\nfrequencies = [31, 62, 125, 250, 500, 1, 2, 4, 8, 16, 32, 64];\nfor(i = [0:11]) {\n    slider(frequencies[i], sin(i*30)*5, -45 + i*8);\n}\n\n// Control buttons\npower_button();\n\n// LED indicators\nled_indicator(-30, color_led);\nled_indicator(-20, [0, 1, 0]);\nled_indicator(-10, [0, 0, 1]);\n\n// I/O ports\nio_ports();\n\n// Rubber feet\nrubber_feet();",
    "renders": true
  },
  {
    "electronic_device": "compressor",
    "openscad_code": "// Audio Compressor Electronic Device\n// Realistic style, medium complexity\n\nmodule body() {\n    // Main housing - aluminum extrusion style\n    difference() {\n        // Main block\n        color([0.7, 0.7, 0.75]) \n        cube([80, 120, 35], center=true);\n        \n        // Front face chamfer\n        translate([0, 59, 0])\n        rotate([45, 0, 0])\n        cube([82, 20, 35], center=true);\n        \n        // Rear face chamfer\n        translate([0, -59, 0])\n        rotate([-45, 0, 0])\n        cube([82, 20, 35], center=true);\n        \n        // Ventilation slots on top\n        for(y = [-50:10:50]) {\n            translate([0, y, 17.5])\n            cube([78, 8, 2], center=true);\n        }\n        \n        // Side vents\n        for(z = [-15:7:15]) {\n            translate([40.5, 0, z])\n            rotate([0, 90, 0])\n            cylinder(h=2, r=3, center=true);\n        }\n    }\n}\n\nmodule front_panel() {\n    // Front control panel\n    difference() {\n        color([0.1, 0.1, 0.1])\n        translate([0, 60, 0])\n        cube([76, 2, 30], center=true);\n        \n        // LED meter display window\n        translate([-20, 61, 10])\n        cube([30, 1, 8], center=true);\n        \n        // Power LED indicator\n        translate([30, 61, 12])\n        cylinder(h=2, r=3, center=true);\n    }\n    \n    // Knobs\n    for(x = [-30, -10, 10, 30]) {\n        // Knob base\n        color([0.2, 0.2, 0.2])\n        translate([x, 61, 0])\n        cylinder(h=4, r=6, center=true);\n        \n        // Knob cap\n        color([0.9, 0.9, 0.9])\n        translate([x, 63, 0])\n        cylinder(h=2, r=5, center=true);\n        \n        // Knob marker line\n        color([0.1, 0.1, 0.1])\n        translate([x, 64, 0])\n        cube([10, 0.5, 1], center=true);\n    }\n}\n\nmodule connectors() {\n    // Input jacks (left side)\n    for(z = [-10, 0, 10]) {\n        color([0.5, 0.5, 0.5])\n        translate([-40, 0, z])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=8, r=6, center=true);\n            cylinder(h=9, r=3, center=true);\n        }\n    }\n    \n    // Output jacks (right side)\n    for(z = [-10, 0, 10]) {\n        color([0.5, 0.5, 0.5])\n        translate([40, 0, z])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=8, r=6, center=true);\n            cylinder(h=9, r=3, center=true);\n        }\n    }\n    \n    // Power connector (rear)\n    color([0.2, 0.2, 0.2])\n    translate([0, -60, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cube([12, 8, 8], center=true);\n        cube([10, 6, 6], center=true);\n    }\n}\n\nmodule feet() {\n    // Rubber feet\n    for(x = [-30, 30])\n    for(y = [-50, 50]) {\n        color([0.1, 0.1, 0.1])\n        translate([x, y, -18])\n        cylinder(h=3, r=4, center=true);\n    }\n}\n\nmodule display() {\n    // LED meter display\n    translate([-20, 61, 10])\n    color([0.05, 0.05, 0.05])\n    cube([28, 0.5, 6], center=true);\n    \n    // LED segments\n    for(i = [0:7]) {\n        color([0.2, 0.8, 0.2])\n        translate([-33 + i*4, 61.5, 10])\n        cube([2, 0.1, 4], center=true);\n    }\n}\n\n// Assembly\nbody();\nfront_panel();\nconnectors();\nfeet();\ndisplay();",
    "renders": true
  },
  {
    "electronic_device": "limiter",
    "openscad_code": "// Realistic 3D printable limiter device model\n// Overall dimensions: 80mm x 45mm x 25mm\n\n$fn = 32;\n\n// Main body color - dark grey\ncolor([0.2, 0.2, 0.2]) {\n    difference() {\n        // Main enclosure\n        cube([80, 45, 25], center=true);\n        \n        // Front panel recess\n        translate([0, 20, 10])\n            cube([70, 3, 20], center=true);\n        \n        // Back panel recess\n        translate([0, -20, 10])\n            cube([70, 3, 20], center=true);\n    }\n}\n\n// Front panel - brushed aluminum\ncolor([0.7, 0.7, 0.75]) {\n    translate([0, 21.5, 0])\n        cube([70, 1, 22], center=true);\n}\n\n// Back panel - brushed aluminum\ncolor([0.7, 0.7, 0.75]) {\n    translate([0, -21.5, 0])\n        cube([70, 1, 22], center=true);\n}\n\n// LED meter display\nmodule meter_leds() {\n    for(i = [-2:2]) {\n        color([0.1, 0.8, 0.1]) {\n            translate([i * 8, 15, 13])\n                cube([6, 2, 1.5], center=true);\n        }\n    }\n}\nmeter_leds();\n\n// Main rotary knob\ncolor([0.1, 0.1, 0.1]) {\n    translate([-20, 15, 12.5])\n        cylinder(h=3, r=6, center=true);\n}\ncolor([0.3, 0.3, 0.3]) {\n    translate([-20, 15, 14])\n        cylinder(h=1, r=5, center=true);\n}\n\n// Threshold knob\ncolor([0.1, 0.1, 0.1]) {\n    translate([0, 15, 12.5])\n        cylinder(h=3, r=6, center=true);\n}\ncolor([0.3, 0.3, 0.3]) {\n    translate([0, 15, 14])\n        cylinder(h=1, r=5, center=true);\n}\n\n// Release knob\ncolor([0.1, 0.1, 0.1]) {\n    translate([20, 15, 12.5])\n        cylinder(h=3, r=6, center=true);\n}\ncolor([0.3, 0.3, 0.3]) {\n    translate([20, 15, 14])\n        cylinder(h=1, r=5, center=true);\n}\n\n// Input jacks\nmodule input_jack() {\n    color([0.1, 0.1, 0.1]) {\n        difference() {\n            cylinder(h=8, r=6, center=true);\n            cylinder(h=10, r=3.5, center=true);\n        }\n    }\n}\n\ntranslate([-25, -15, 0])\n    rotate([90, 0, 0])\n        input_jack();\n\ntranslate([-25, -25, 0])\n    rotate([90, 0, 0])\n        input_jack();\n\n// Output jacks\ntranslate([25, -15, 0])\n    rotate([90, 0, 0])\n        input_jack();\n\ntranslate([25, -25, 0])\n    rotate([90, 0, 0])\n        input_jack();\n\n// Power LED indicator\ncolor([0.8, 0.1, 0.1]) {\n    translate([-35, 0, 12])\n        cylinder(h=1, r=2, center=true);\n}\n\n// Bypass switch\ncolor([0.1, 0.1, 0.1]) {\n    translate([35, 0, 12.5])\n        cube([8, 6, 3], center=true);\n}\ncolor([0.8, 0.1, 0.1]) {\n    translate([35, 0, 14])\n        cube([6, 4, 1], center=true);\n}\n\n// Rubber feet\nmodule foot() {\n    color([0.05, 0.05, 0.05]) {\n        translate([0, 0, -12.5])\n            cylinder(h=2, r=2, center=true);\n    }\n}\n\ntranslate([-30, -15, 0])\n    foot();\ntranslate([30, -15, 0])\n    foot();\ntranslate([-30, 15, 0])\n    foot();\ntranslate([30, 15, 0])\n    foot();\n\n// Side ventilation slots\nmodule vent_slots() {\n    for(i = [-3:3]) {\n        translate([0, 0, i * 4])\n            cube([1, 45, 2], center=true);\n    }\n}\n\ndifference() {\n    translate([40, 0, 0])\n        cube([2, 45, 25], center=true);\n    translate([40, 0, 0])\n        vent_slots();\n}\n\ndifference() {\n    translate([-40, 0, 0])\n        cube([2, 45, 25], center=true);\n    translate([-40, 0, 0])\n        vent_slots();\n}",
    "renders": true
  },
  {
    "electronic_device": "crossover",
    "openscad_code": "// Crossover electronic device - realistic style, medium complexity\n// Dimensions: 75mm x 120mm x 25mm\n\n// Main colors\n$fa = 1;\n$fs = 0.5;\n\n// Main body\ncolor([0.2, 0.2, 0.2]) \ndifference() {\n    cube([120, 75, 25], center=true);\n    \n    // Hollow out inside\n    translate([0, 0, 2])\n    cube([110, 65, 23], center=true);\n}\n\n// Top panel with controls\ntranslate([0, 0, 13])\ncolor([0.3, 0.3, 0.3])\ndifference() {\n    cube([120, 75, 1], center=true);\n    \n    // Display cutout\n    translate([0, 15, 0])\n    cube([60, 30, 2], center=true);\n    \n    // Knob holes\n    for (y = [-20, 0, 20]) {\n        translate([40, y, 0])\n        cylinder(h=2, r=6, center=true);\n    }\n}\n\n// LCD display\ntranslate([0, 15, 14])\ncolor([0.1, 0.2, 0.1, 0.8])\ncube([55, 25, 1], center=true);\n\n// Control knobs\nfor (y = [-20, 0, 20]) {\n    translate([40, y, 14])\n    color([0.4, 0.4, 0.4])\n    union() {\n        cylinder(h=8, r=6);\n        translate([0, 0, 8])\n        cylinder(h=2, r=7);\n        translate([0, 0, 10])\n        color([0.1, 0.1, 0.1])\n        cylinder(h=5, r=3);\n    }\n}\n\n// Input/output jacks on front\nfor (i = [0:3]) {\n    translate([-50 + i * 15, 38, 0])\n    color([0.1, 0.1, 0.1])\n    difference() {\n        cylinder(h=10, r=6, center=true);\n        translate([0, 0, -6])\n        cylinder(h=15, r=4);\n    }\n}\n\n// Output jacks on back\nfor (i = [0:3]) {\n    translate([-50 + i * 15, -38, 0])\n    color([0.1, 0.1, 0.1])\n    difference() {\n        cylinder(h=10, r=6, center=true);\n        translate([0, 0, 6])\n        cylinder(h=15, r=4);\n    }\n}\n\n// LED indicators\nfor (i = [0:1]) {\n    translate([-20 + i * 40, 0, 14])\n    color([0.8, 0.1, 0.1])\n    cylinder(h=1, r=3);\n}\n\n// Ventilation slots on sides\nfor (i = [0:4]) {\n    translate([60, -30 + i * 15, 0])\n    rotate([0, 90, 0])\n    color([0.1, 0.1, 0.1])\n    cube([15, 2, 1]);\n}\n\nfor (i = [0:4]) {\n    translate([-60, -30 + i * 15, 0])\n    rotate([0, 90, 0])\n    color([0.1, 0.1, 0.1])\n    cube([15, 2, 1]);\n}\n\n// Rubber feet\nfor (x = [-50, 50])\nfor (y = [-30, 30]) {\n    translate([x, y, -13])\n    color([0.1, 0.1, 0.1])\n    cylinder(h=2, r=3);\n}\n\n// Power connector\ntranslate([-55, 0, -5])\ncolor([0.2, 0.2, 0.2])\ndifference() {\n    cube([10, 8, 8], center=true);\n    translate([0, 0, -5])\n    cube([6, 4, 10], center=true);\n}",
    "renders": true
  },
  {
    "electronic_device": "synthesizer",
    "openscad_code": "// Mini Synthesizer – 3D-printable, medium-complexity, realistic style\n// Approx. 90 mm wide × 60 mm deep × 25 mm high\n\n$fn = 32;\n\n// Color constants\nc_case   = [0.15,0.15,0.15]; // matte black\nc_panel  = [0.25,0.25,0.25]; // dark grey\nc_keys   = [0.9,0.9,0.9];    // off-white\nc_knobs  = [0.1,0.1,0.1];    // black\nc_screen = [0.05,0.05,0.05]; // deep black\nc_led    = [0,1,0];          // green\nc_jack   = [0.6,0.6,0.6];    // nickel\n\n// Main case shell\nmodule case_shell() {\n    difference() {\n        // Outer shell\n        color(c_case)\n        cube([90,60,25], center=true);\n\n        // Hollow cavity – 1.5 mm wall all around\n        translate([0,0,-1.25])\n            cube([87,57,23.5], center=true);\n    }\n}\n\n// Aluminum front panel insert\nmodule front_panel() {\n    color(c_panel)\n    translate([0,0,11.8])\n        cube([90.2,60.2,2], center=true);\n}\n\n// OLED screen\nmodule screen() {\n    translate([-30,15,13])\n        color(c_screen)\n        cube([28,12,1]);\n}\n\n// Rotary encoder knobs\nmodule knob(pos) {\n    translate(pos)\n    difference() {\n        color(c_knobs)\n        rotate([90,0,0])\n            cylinder(h=6, d1=8, d2=10);\n        translate([0,0,-1])\n            cylinder(h=8, d=3.5, $fn=16); // shaft hole\n    }\n}\n\n// Mini keys (2-octave)\nmodule mini_key(x) {\n    translate([x, 0, 12.5])\n    cube([4,18,2], center=true);\n}\n\nmodule keys() {\n    for (i=[-36:4:36]) {\n        color(c_keys)\n        mini_key(i);\n    }\n}\n\n// Button pad\nmodule button(pos) {\n    translate(pos)\n    color(c_knobs)\n    cylinder(h=2, d=6);\n}\n\n// LED indicator\nmodule led() {\n    translate([35,15,13])\n    color(c_led)\n    sphere(d=3);\n}\n\n// 3.5 mm jack\nmodule jack(pos) {\n    translate(pos)\n    rotate([90,0,0])\n    difference() {\n        color(c_jack)\n        union() {\n            cylinder(h=6, d=6.5);\n            translate([0,0,6])\n                cylinder(h=2, d=8);\n        }\n        translate([0,0,-1])\n            cylinder(h=9, d=3.2); // bore\n    }\n}\n\n// Logo recess\nmodule logo() {\n    translate([-42,0,12])\n    rotate([0,0,45])\n        cube([10,1,1.5], center=true);\n}\n\n// Build the model\ncase_shell();\nfront_panel();\nscreen();\nkeys();\nled();\nlogo();\n\n// Encoders\nknob([-20,-10,13]);\nknob([ 0,-10,13]);\nknob([20,-10,13]);\n\n// Buttons\nbutton([-30,-15,13]);\nbutton([-20,-15,13]);\nbutton([-10,-15,13]);\n\n// Jacks\njack([30,-20]);\njack([30,-30]);\njack([30,-40]);",
    "renders": true
  },
  {
    "electronic_device": "sampler",
    "openscad_code": "// Portable MIDI Sampler (medium complexity, realistic style)\n// Overall size: 120 x 80 x 25 mm – fits on most FDM printers\n\n$fa = 2;\n$fs = 0.5;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer shell\n        color(\"DarkSlateGray\")\n        minkowski() {\n            cube([120, 80, 20], center = true);\n            sphere(2);\n        }\n\n        // Hollow inside\n        translate([0, 0, -1])\n        cube([116, 76, 18], center = true);\n\n        // SD-card slot\n        translate([-62, 15, 0])\n        cube([4, 15, 1.5], center = true);\n\n        // USB-C port\n        translate([-62, -15, 0])\n        cube([4, 9, 2], center = true);\n    }\n}\n\n// Top panel with controls\nmodule top_panel() {\n    color(\"Black\")\n    translate([0, 0, 11])\n    cube([118, 78, 2], center = true);\n}\n\n// OLED screen\nmodule screen() {\n    color(\"Black\")\n    translate([0, 20, 12.2])\n    cube([50, 20, 0.5], center = true);\n\n    // Display surface\n    color(\"DeepSkyBlue\")\n    translate([0, 20, 12.8])\n    cube([46, 16, 0.2], center = true);\n}\n\n// Rotary encoder knobs\nmodule knob(pos_x, pos_y) {\n    color(\"Silver\")\n    translate([pos_x, pos_y, 12.5])\n    cylinder(h = 3, r = 6, $fn = 24);\n\n    color(\"Black\")\n    translate([pos_x, pos_y, 15.6])\n    cylinder(h = 1, r = 4, $fn = 24);\n\n    // Knurling\n    for (i = [0 : 30 : 330]) {\n        rotate([0, 0, i])\n        translate([pos_x + 4.5, pos_y, 13])\n        cube([1, 0.5, 2], center = true);\n    }\n}\n\n// Tactile pads (4x4 grid)\nmodule pads() {\n    for (x = [-1 : 1]) {\n        for (y = [-1.5 : 0.5 : 0.5]) {\n            translate([x * 20 + 10, y * 20, 12.5])\n            color(\"DimGray\")\n            cube([16, 16, 1.5], center = true);\n\n            // Pad surface\n            translate([x * 20 + 10, y * 20, 14.1])\n            color(\"LightGray\")\n            cube([14, 14, 0.3], center = true);\n        }\n    }\n}\n\n// Transport buttons\nmodule transport_buttons() {\n    // Play\n    translate([-30, -25, 12.5])\n    color(\"LimeGreen\")\n    cylinder(h = 2, r = 5, $fn = 24);\n\n    // Stop\n    translate([-15, -25, 12.5])\n    color(\"Red\")\n    cube([9, 9, 2], center = true);\n\n    // Rec\n    translate([0, -25, 12.5])\n    color(\"FireBrick\")\n    cylinder(h = 2, r = 5, $fn = 24);\n}\n\n// Volume pot\nmodule volume_pot() {\n    color(\"Silver\")\n    translate([45, -25, 12.5])\n    cylinder(h = 3, r = 7, $fn = 32);\n\n    color(\"Black\")\n    translate([45, -25, 15.6])\n    cylinder(h = 1, r = 5, $fn = 32);\n}\n\n// Rubber feet\nmodule feet() {\n    for (x = [-50, 50]) {\n        for (y = [-30, 30]) {\n            color(\"Black\")\n            translate([x, y, -11.5])\n            cylinder(h = 2, r = 3, $fn = 20);\n        }\n    }\n}\n\n// Logo text placeholder\nmodule logo() {\n    color(\"White\")\n    translate([-50, 35, 12.8])\n    cube([10, 3, 0.2], center = true);\n}\n\n// Assemble the device\nbody();\ntop_panel();\nscreen();\nknob(-40, 0);\nknob(-40, 15);\npads();\ntransport_buttons();\nvolume_pot();\nfeet();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "sequencer",
    "openscad_code": "// Step Sequencer Electronic Device\n// Realistic style, medium complexity\n\n// Overall dimensions\nseq_width = 85;\nseq_depth = 55;\nseq_height = 12;\n\n// Main body\nmodule main_body() {\n    color(\"black\")\n    difference() {\n        // Main case\n        cube([seq_width, seq_depth, seq_height], center=true);\n        \n        // Top face recess\n        translate([0, 0, seq_height/2 - 0.5])\n            cube([seq_width-2, seq_depth-2, 1], center=true);\n        \n        // USB-C port\n        translate([seq_width/2 - 1, -5, 0])\n            cube([2, 10, 3], center=true);\n        \n        // 3.5mm jack\n        translate([seq_width/2 - 1, 8, 0])\n            cube([2, 6, 4], center=true);\n    }\n}\n\n// Screen\nmodule screen() {\n    color(\"darkblue\")\n    translate([0, 15, seq_height/2 - 0.1])\n        cube([40, 12, 0.5], center=true);\n    \n    // Screen bezel\n    color(\"gray20\")\n    translate([0, 15, seq_height/2 - 0.2])\n        cube([42, 14, 0.2], center=true);\n}\n\n// Step buttons (16 steps)\nmodule step_buttons() {\n    for (i = [0:15]) {\n        x_pos = -35 + (i % 8) * 10;\n        y_pos = (i < 8) ? 0 : -12;\n        \n        // Button housing\n        color(\"gray30\")\n        translate([x_pos, y_pos, seq_height/2 - 0.1])\n            cylinder(h=1, d=6, $fn=32);\n        \n        // Button top\n        color((i == 0) ? \"red\" : \"gray50\")\n        translate([x_pos, y_pos, seq_height/2 + 0.4])\n            cylinder(h=0.5, d=4.5, $fn=32);\n    }\n}\n\n// Control buttons\nmodule control_buttons() {\n    // Play button\n    color(\"green\")\n    translate([-20, -20, seq_height/2])\n        cylinder(h=1, d=5, $fn=32);\n    \n    // Stop button\n    color(\"red\")\n    translate([-10, -20, seq_height/2])\n        cube([4, 4, 1], center=true);\n    \n    // Tempo encoder\n    color(\"gray50\")\n    translate([0, -20, seq_height/2])\n        cylinder(h=2, d=6, $fn=32);\n    \n    // Mode button\n    color(\"blue\")\n    translate([10, -20, seq_height/2])\n        cylinder(h=1, d=5, $fn=32);\n}\n\n// LED indicators for each step\nmodule step_leds() {\n    for (i = [0:15]) {\n        x_pos = -35 + (i % 8) * 10;\n        y_pos = (i < 8) ? 3 : -15;\n        \n        color(\"yellow\")\n        translate([x_pos, y_pos, seq_height/2 - 0.1])\n            cylinder(h=0.3, d=2, $fn=16);\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    for (x = [-1, 1])\n        for (y = [-1, 1]) {\n            color(\"gray20\")\n            translate([x * 35, y * 22, -seq_height/2 + 1])\n                cylinder(h=2, d=4, $fn=16);\n        }\n}\n\n// Render the complete sequencer\nunion() {\n    main_body();\n    screen();\n    step_buttons();\n    control_buttons();\n    step_leds();\n    feet();\n}",
    "renders": true
  },
  {
    "electronic_device": "interface",
    "openscad_code": "// USB-C Hub Interface - Realistic Style\n// Dimensions: 80mm x 35mm x 12mm\n\n// Main hub body\nmodule hub_body() {\n    color(\"lightgray\")\n    difference() {\n        // Main shell\n        translate([-40, -17.5, 0])\n            cube([80, 35, 12]);\n        \n        // USB-C port cutouts (left side)\n        for (i = [0:1])\n            translate([-42, -12 + i*24, 3])\n                rotate([0, 90, 0])\n                    cylinder(h=4, r=4.5, $fn=20);\n        \n        // USB-A port cutouts (right side)\n        for (i = [0:2])\n            translate([42, -12 + i*12, 3])\n                rotate([0, 90, 0])\n                    cube([8, 11, 6]);\n        \n        // LED indicator holes (front)\n        translate([30, -18, 10.5])\n            cylinder(h=2, r=1, $fn=16);\n        translate([35, -18, 10.5])\n            cylinder(h=2, r=1, $fn=16);\n    }\n}\n\n// USB-C connector detail\nmodule usbc_connector() {\n    color(\"darkgray\")\n    translate([-42, -12, 3])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=7, r=4.5, $fn=20);\n                translate([0, 0, -1])\n                    cylinder(h=8, r=3.5, $fn=20);\n            }\n}\n\n// USB-A connector detail\nmodule usba_connector() {\n    color(\"darkgray\")\n    translate([42, -12, 3])\n        rotate([0, 90, 0])\n            difference() {\n                cube([8, 11.5, 6.5]);\n                translate([0, 5.75, 3.25])\n                    cube([7, 0.8, 2.5]);\n            }\n}\n\n// LED indicators\nmodule led_indicators() {\n    // Power LED (blue)\n    color(\"blue\")\n    translate([30, -18, 11])\n        cylinder(h=1, r=1, $fn=16);\n    \n    // Activity LED (green)\n    color(\"green\")\n    translate([35, -18, 11])\n        cylinder(h=1, r=1, $fn=16);\n}\n\n// Top surface details\nmodule top_details() {\n    // Brand label area\n    color(\"white\")\n    translate([-20, -8, 12])\n        cube([40, 16, 0.2]);\n    \n    // Ventilation slots\n    color(\"gray\")\n    for (i = [0:7])\n        translate([-32 + i*8, -15, 11])\n            cube([6, 30, 0.5]);\n}\n\n// Bottom rubber feet\nmodule rubber_feet() {\n    color(\"black\")\n    for (x = [-30, 30])\n        for (y = [-10, 10])\n            translate([x, y, -0.5])\n                cylinder(h=1, r=2.5, $fn=16);\n}\n\n// Assembly\nunion() {\n    hub_body();\n    \n    // USB connectors\n    usbc_connector();\n    translate([0, 12, 0]) usbc_connector();\n    \n    translate([0, 12, 0]) usba_connector();\n    translate([0, 0, 0]) usba_connector();\n    translate([0, -12, 0]) usba_connector();\n    \n    led_indicators();\n    top_details();\n    translate([0, 0, -0.5]) rubber_feet();\n}",
    "renders": true
  },
  {
    "electronic_device": "modulator",
    "openscad_code": "// Modulator Electronic Device - Realistic Style, Medium Complexity\n// 3D printable RF modulator with realistic features\n\n$fn = 32;\n\n// Main dimensions\nbase_width = 65;\nbase_depth = 45;\nbase_height = 15;\ntop_height = 8;\nscreen_width = 35;\nscreen_height = 15;\nbutton_diameter = 6;\nport_height = 8;\nport_width = 12;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_top = [0.1, 0.1, 0.1];\ncolor_screen = [0.1, 0.1, 0.3];\ncolor_buttons = [0.8, 0.8, 0.8];\ncolor_ports = [0.9, 0.9, 0.9];\ncolor_led = [1, 0, 0];\n\nmodule modulator_body() {\n    color(color_body)\n    union() {\n        // Main base\n        cube([base_width, base_depth, base_height], center=true);\n        \n        // Top cover with slight taper\n        translate([0, 0, base_height/2 + top_height/2])\n        scale([1, 0.95, 1])\n        cube([base_width-2, base_depth-4, top_height], center=true);\n    }\n}\n\nmodule screen() {\n    translate([0, base_depth/2 - 10, base_height/2 + top_height/2 + 0.5])\n    color(color_screen)\n    difference() {\n        cube([screen_width, screen_height, 1], center=true);\n        // Screen bevel\n        translate([0, 0, -0.5])\n        cube([screen_width-2, screen_height-2, 2], center=true);\n    }\n    \n    // Screen text indicators\n    translate([-screen_width/2 + 5, base_depth/2 - 10, base_height/2 + top_height/2 + 1.1])\n    color([0, 1, 0])\n    cube([2, 1, 0.1]);\n    translate([-screen_width/2 + 8, base_depth/2 - 10, base_height/2 + top_height/2 + 1.1])\n    cube([2, 1, 0.1]);\n    translate([-screen_width/2 + 11, base_depth/2 - 10, base_height/2 + top_height/2 + 1.1])\n    cube([2, 1, 0.1]);\n}\n\nmodule buttons() {\n    // Control buttons\n    for(i = [0:3]) {\n        translate([-20 + i*12, 0, base_height/2 + top_height + 3])\n        color(color_buttons)\n        cylinder(h=2, d=button_diameter, center=true);\n        \n        // Button caps\n        translate([-20 + i*12, 0, base_height/2 + top_height + 4.5])\n        color([0.3, 0.3, 0.3])\n        cylinder(h=1, d=button_diameter-2, center=true);\n    }\n}\n\nmodule ports() {\n    // RF input\n    translate([-base_width/2 - 0.5, -10, -base_height/2 + port_height/2])\n    color(color_ports)\n    rotate([0, 90, 0])\n    cylinder(h=port_width, d=8, center=true);\n    \n    // RF output\n    translate([-base_width/2 - 0.5, 10, -base_height/2 + port_height/2])\n    color(color_ports)\n    rotate([0, 90, 0])\n    cylinder(h=port_width, d=8, center=true);\n    \n    // Power port\n    translate([base_width/2 + 0.5, 0, -base_height/2 + port_height/2])\n    color([0.8, 0.8, 0])\n    rotate([0, -90, 0])\n    cylinder(h=port_width, d=6, center=true);\n}\n\nmodule ventilation() {\n    // Ventilation slots on sides\n    for(i = [-2:2]) {\n        translate([0, base_depth/2 + 0.5, i*5])\n        color(color_body)\n        cube([base_width-10, 1, 2]);\n    }\n    \n    for(i = [-1:1]) {\n        translate([base_width/2 + 0.5, 0, i*6])\n        color(color_body)\n        cube([1, base_depth-10, 2]);\n    }\n}\n\nmodule led_indicators() {\n    // Power LED\n    translate([20, base_depth/2 - 5, base_height/2 + top_height/2 + 0.5])\n    color(color_led)\n    sphere(d=3);\n    \n    // Signal LED\n    translate([25, base_depth/2 - 5, base_height/2 + top_height/2 + 0.5])\n    color([0, 1, 0])\n    sphere(d=3);\n}\n\nmodule antenna_connector() {\n    // Antenna connector on top\n    translate([0, -base_depth/2 + 5, base_height/2 + top_height + 2])\n    color([0.5, 0.5, 0.5])\n    cylinder(h=5, d=10, center=true);\n    \n    translate([0, -base_depth/2 + 5, base_height/2 + top_height + 5])\n    cylinder(h=2, d=6, center=true);\n}\n\nmodule text_labels() {\n    // \"MODULATOR\" text placeholder\n    translate([0, -base_depth/2 + 2, base_height/2 - 2])\n    color([0.8, 0.8, 0.8])\n    cube([30, 2, 0.5], center=true);\n    \n    // Channel indicator\n    translate([30, -base_depth/2 + 2, base_height/2 - 2])\n    color([0.8, 0.8, 0.8])\n    cube([10, 2, 0.5], center=true);\n}\n\n// Assemble the modulator\nunion() {\n    modulator_body();\n    screen();\n    buttons();\n    ports();\n    ventilation();\n    led_indicators();\n    antenna_connector();\n    text_labels();\n}",
    "renders": true
  },
  {
    "electronic_device": "renderer",
    "openscad_code": "// Renderer Electronic Device - OpenSCAD\n// A realistic 3D printable GPU-style renderer\n\n$fn = 50;\n\n// Colors\npcb_color = [0.1, 0.5, 0.1];\nblack = [0.1, 0.1, 0.1];\nsilver = [0.7, 0.7, 0.7];\ngold = [0.8, 0.7, 0.2];\nblue = [0.2, 0.3, 0.8];\nred = [0.8, 0.2, 0.2];\ngreen = [0.2, 0.8, 0.2];\n\n// Main dimensions\nlength = 80;\nheight = 35;\nwidth = 120;\n\n// Main PCB\nmodule pcb() {\n    color(pcb_color) {\n        cube([length, width, 1.6], center=true);\n    }\n}\n\n// GPU chip\nmodule gpu_chip() {\n    translate([0, width/4, 1]) {\n        color(black) {\n            cube([25, 25, 3], center=true);\n        }\n        translate([0, 0, 2]) {\n            color(silver) {\n                cube([23, 23, 0.5], center=true);\n            }\n        }\n    }\n}\n\n// RAM chips\nmodule ram_chips() {\n    for(y = [-30, -10, 10, 30]) {\n        translate([length/4, y, 1]) {\n            color(black) {\n                cube([12, 8, 2], center=true);\n            }\n        }\n    }\n}\n\n// Cooling fan\nmodule fan() {\n    translate([-length/2 - 15, 0, height/2]) {\n        rotate([90, 0, 0]) {\n            color(silver) {\n                cylinder(h=15, r=15, center=true);\n                translate([0, 0, 7.5]) {\n                    cylinder(h=2, r=13, center=true);\n                }\n            }\n            // Fan blades\n            for(i = [0:30:359]) {\n                rotate([0, 0, i]) {\n                    translate([0, 7, 0]) {\n                        color(black) alpha(0.7)\n                        cube([1, 8, 1.5], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Heat sink\nmodule heatsink() {\n    translate([0, 0, height/2 - 10]) {\n        color(silver) {\n            difference() {\n                cube([length - 10, width - 20, 20], center=true);\n                for(x = [-30:5:30]) {\n                    for(y = [-45:5:45]) {\n                        translate([x, y, 5]) {\n                            cube([3, 3, 20], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// PCIe connector\nmodule pcie_connector() {\n    translate([0, -width/2 - 5, -height/2 + 2]) {\n        color(gold) {\n            for(i = [0:5:35]) {\n                translate([i - 20, 0, 0]) {\n                    cube([3, 10, 1], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Display ports\nmodule display_ports() {\n    translate([-length/2 + 5, 0, 0]) {\n        // HDMI ports\n        for(i = [0, 1]) {\n            translate([0, -20 + i*15, 0]) {\n                color(black) {\n                    difference() {\n                        cube([6, 8, 5], center=true);\n                        translate([0, 0, 2.6]) {\n                            cube([4, 6, 2], center=true);\n                        }\n                    }\n                }\n            }\n        }\n        // DisplayPort\n        translate([0, 10, 0]) {\n            color(black) {\n                difference() {\n                    cube([6, 10, 5], center=true);\n                    translate([0, 0, 2.6]) {\n                        cube([4, 8, 2], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Power connectors\nmodule power_connectors() {\n    translate([length/2 - 10, 0, height/2 - 5]) {\n        color(black) {\n            for(i = [-1, 1]) {\n                translate([0, i*10, 0]) {\n                    cube([10, 10, 8], center=true);\n                    translate([0, 0, 4.5]) {\n                        color(red) {\n                            for(j = [-2:2:2]) {\n                                translate([j, 0, 0]) {\n                                    cylinder(h=1, r=1.5, center=true);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// LED indicators\nmodule leds() {\n    translate([length/2 - 5, 0, height/2 + 2]) {\n        color(green) {\n            sphere(r=2);\n        }\n        translate([0, 5, 0]) {\n            color(red) {\n                sphere(r=2);\n            }\n        }\n    }\n}\n\n// Bracket\nmodule bracket() {\n    translate([-length/2 - 2, 0, 0]) {\n        color(silver) {\n            cube([4, width, height], center=true);\n            // Vent holes\n            for(y = [-40:10:40]) {\n                for(z = [-10:5:10]) {\n                    translate([-2, y, z]) {\n                        cylinder(h=5, r=2, center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assemble the renderer\nunion() {\n    pcb();\n    gpu_chip();\n    ram_chips();\n    heatsink();\n    fan();\n    pcie_connector();\n    display_ports();\n    power_connectors();\n    leds();\n    bracket();\n}",
    "renders": true
  },
  {
    "electronic_device": "streamer",
    "openscad_code": "// Streamer Electronic Device - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Main dimensions\ndevice_width = 85;\ndevice_height = 50;\ndevice_depth = 12;\nwall_thickness = 2;\n\n// Colors\ncolor_case = [0.15, 0.15, 0.15];        // Dark gray\ncolor_screen = [0.1, 0.1, 0.1];        // Black\ncolor_buttons = [0.8, 0.8, 0.8];       // Light gray\ncolor_ports = [0.3, 0.3, 0.3];         // Medium gray\ncolor_led = [0, 1, 0];                 // Green\n\n// Main case shell\nmodule case_shell() {\n    difference() {\n        // Outer shell\n        color(color_case)\n        minkowski() {\n            cube([device_width, device_height, device_depth], center = true);\n            sphere(wall_thickness);\n        }\n        \n        // Inner cavity\n        translate([0, 0, -1])\n        cube([device_width - 4*wall_thickness, \n              device_height - 4*wall_thickness, \n              device_depth - 2*wall_thickness], center = true);\n    }\n}\n\n// Front face with screen and buttons\nmodule front_panel() {\n    // Front plate\n    color(color_case)\n    translate([0, 0, device_depth/2 - 0.5])\n    cube([device_width - 4*wall_thickness, \n          device_height - 4*wall_thickness, \n          1], center = true);\n    \n    // Screen recess\n    color(color_screen)\n    translate([0, 8, device_depth/2])\n    cube([device_width - 12*wall_thickness, \n          25, \n          0.5], center = true);\n    \n    // Screen glass\n    color([0.2, 0.2, 0.2, 0.8])\n    translate([0, 8, device_depth/2 + 0.25])\n    cube([device_width - 12.5*wall_thickness, \n          24.5, \n          0.1], center = true);\n}\n\n// Control buttons\nmodule control_buttons() {\n    // Power button\n    color(color_buttons)\n    translate([device_width/2 - 10, -device_height/2 + 10, device_depth/2])\n    rotate([90, 0, 0])\n    cylinder(h = 2, r = 3, $fn = 20);\n    \n    // Volume buttons\n    for(i = [0:1]) {\n        translate([device_width/2 - 10, -device_height/2 + 18 + i*6, device_depth/2])\n        rotate([90, 0, 0])\n        cylinder(h = 1.5, r = 2, $fn = 16);\n    }\n    \n    // Navigation buttons\n    color(color_buttons)\n    translate([0, -device_height/2 + 10, device_depth/2])\n    rotate([90, 0, 0])\n    cylinder(h = 1.5, r = 4, $fn = 20);\n    \n    // Center button\n    color(color_buttons)\n    translate([0, -device_height/2 + 10, device_depth/2 + 1])\n    sphere(r = 2, $fn = 16);\n}\n\n// LED indicators\nmodule status_leds() {\n    for(i = [0:2]) {\n        color(color_led)\n        translate([-device_width/2 + 10 + i*8, device_height/2 - 5, device_depth/2])\n        cylinder(h = 0.5, r = 1.5, $fn = 12);\n    }\n}\n\n// Ports on the side\nmodule ports() {\n    // HDMI port\n    color(color_ports)\n    translate([device_width/2 - 5, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cube([8, 15, 5], center = true);\n        cube([6, 13, 7], center = true);\n    }\n    \n    // USB-C port\n    color(color_ports)\n    translate([device_width/2 - 5, 10, 0])\n    rotate([0, 90, 0])\n    cube([4, 8, 2], center = true);\n    \n    // Micro SD slot\n    color(color_ports)\n    translate([device_width/2 - 5, -10, 0])\n    rotate([0, 90, 0])\n    cube([2, 12, 1], center = true);\n}\n\n// Ventilation holes\nmodule ventilation() {\n    color(color_case)\n    difference() {\n        translate([0, 0, 0])\n        cube([device_width, device_height, device_depth], center = true);\n        \n        // Top vents\n        for(i = [-3:3]) {\n            translate([i*10, device_height/2 - 2, 0])\n            cube([2, 1, device_depth - 2*wall_thickness]);\n        }\n        \n        // Bottom vents\n        for(i = [-3:3]) {\n            translate([i*10, -device_height/2 + 2, 0])\n            cube([2, 1, device_depth - 2*wall_thickness]);\n        }\n    }\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    color([0.1, 0.1, 0.1])\n    for(x = [-1:1]) {\n        for(y = [-1:1]) {\n            translate([x*30, y*15, -device_depth/2 + 1])\n            cylinder(h = 1, r = 3, $fn = 16);\n        }\n    }\n}\n\n// Brand logo placeholder\nmodule logo() {\n    color([0.9, 0.9, 0.9])\n    translate([0, 0, device_depth/2 + 0.1])\n    linear_extrude(height = 0.2)\n    text(\"STREAM\", size = 5, halign = \"center\", valign = \"center\");\n}\n\n// Assembly\nunion() {\n    case_shell();\n    front_panel();\n    control_buttons();\n    status_leds();\n    ports();\n    ventilation();\n    rubber_feet();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "switcher",
    "openscad_code": "// Realistic Style Switcher Electronic Device\n// Medium complexity OpenSCAD model\n\n// Main dimensions\nswitcher_width = 80;\nswitcher_height = 30;\nswitcher_depth = 60;\nwall_thickness = 2.5;\n\n// Colors\ncolor_case = [0.15, 0.15, 0.15];  // Dark gray\ncolor_face = [0.2, 0.2, 0.2];     // Slightly lighter\ncolor_ports = [0.1, 0.1, 0.1];    // Black\ncolor_leds = [0, 1, 0];           // Green\ncolor_buttons = [0.8, 0.8, 0.8];  // Light gray\ncolor_screen = [0.05, 0.05, 0.05]; // Very dark\n\n// Main body\nmodule body() {\n    difference() {\n        // Main case\n        color(color_case)\n        rounded_box(switcher_width, switcher_height, switcher_depth, 3);\n        \n        // Hollow inside for electronics\n        translate([0, 0, wall_thickness])\n        rounded_box(switcher_width - 2*wall_thickness, \n                   switcher_height - wall_thickness, \n                   switcher_depth - 2*wall_thickness, 2);\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(w, h, d, r) {\n    hull() {\n        for (x = [-1, 1])\n        for (y = [-1, 1])\n        for (z = [-1, 1])\n        translate([x*(w/2-r), y*(h/2-r), z*(d/2-r)])\n        sphere(r);\n    }\n}\n\n// Front panel with ports and indicators\nmodule front_panel() {\n    translate([0, 0, switcher_depth/2 - 0.1])\n    difference() {\n        color(color_face)\n        cube([switcher_width, switcher_height, 0.5], center=true);\n        \n        // Ethernet ports (8P8C)\n        for (i = [0, 1, 2, 3]) {\n            translate([30 - i*15, -5, 0])\n            cube([12, 8, 1], center=true);\n        }\n        \n        // Status LEDs\n        for (i = [0, 1, 2, 3]) {\n            translate([30 - i*15, 8, 0])\n            cylinder(h=1.5, r=1.5, center=true);\n        }\n    }\n    \n    // Ethernet port details\n    for (i = [0, 1, 2, 3]) {\n        color(color_ports)\n        translate([30 - i*15, -5, switcher_depth/2 + 0.2])\n        difference() {\n            cube([12, 8, 2], center=true);\n            translate([0, 0, 0.5])\n            cube([10, 6, 3], center=true);\n        }\n    }\n    \n    // LED indicators\n    for (i = [0, 1, 2, 3]) {\n        color(color_leds)\n        translate([30 - i*15, 8, switcher_depth/2 + 0.8])\n        sphere(1.5);\n    }\n}\n\n// Top panel with screen and buttons\nmodule top_panel() {\n    translate([0, switcher_height/2 - 0.1, 0])\n    difference() {\n        color(color_face)\n        cube([switcher_width, 0.5, switcher_depth], center=true);\n        \n        // LCD screen cutout\n        translate([0, 0, 10])\n        cube([40, 1, 20], center=true);\n        \n        // Button holes\n        translate([-25, 0, -15])\n        cylinder(h=1, r=3, center=true);\n        translate([-25, 0, -25])\n        cylinder(h=1, r=3, center=true);\n    }\n    \n    // LCD screen\n    translate([0, switcher_height/2 + 0.4, 10])\n    color(color_screen)\n    cube([38, 0.5, 18], center=true);\n    \n    // Buttons\n    color(color_buttons)\n    translate([-25, switcher_height/2 + 0.5, -15])\n    cylinder(h=2, r=2.8);\n    translate([-25, switcher_height/2 + 0.5, -25])\n    cylinder(h=2, r=2.8);\n    \n    // Button labels\n    translate([-25, switcher_height/2 + 1, -15])\n    rotate([90, 0, 0])\n    linear_extrude(0.1)\n    text(\"▲\", size=3, halign=\"center\");\n    translate([-25, switcher_height/2 + 1, -25])\n    rotate([90, 0, 0])\n    linear_extrude(0.1)\n    text(\"▼\", size=3, halign=\"center\");\n}\n\n// Side vents for cooling\nmodule side_vents() {\n    // Left side\n    translate([-switcher_width/2 - 0.1, 0, 0])\n    for (i = [0:5]) {\n        translate([0, -switcher_height/2 + 5 + i*4, 0])\n        cube([0.5, 2, switcher_depth - 10], center=true);\n    }\n    \n    // Right side\n    translate([switcher_width/2 + 0.1, 0, 0])\n    for (i = [0:5]) {\n        translate([0, -switcher_height/2 + 5 + i*4, 0])\n        cube([0.5, 2, switcher_depth - 10], center=true);\n    }\n}\n\n// Bottom with feet and label\nmodule bottom() {\n    translate([0, -switcher_height/2 - 0.1, 0])\n    difference() {\n        color(color_face)\n        cube([switcher_width, 0.5, switcher_depth], center=true);\n        \n        // Serial number label area\n        translate([0, 0, 0])\n        cube([30, 1, 15], center=true);\n    }\n    \n    // Rubber feet\n    color([0.1, 0.1, 0.1])\n    for (x = [-1, 1])\n    for (z = [-1, 1]) {\n        translate([x*30, -switcher_height/2 - 1, z*20])\n        cylinder(h=2, r=3);\n    }\n    \n    // Label\n    translate([0, -switcher_height/2 - 0.5, 0])\n    rotate([90, 0, 0])\n    linear_extrude(0.1)\n    text(\"8-Port Gigabit Switch\", size=4, halign=\"center\", font=\"Arial:style=Bold\");\n}\n\n// Power connector\nmodule power_connector() {\n    translate([0, 0, -switcher_depth/2 - 0.5])\n    difference() {\n        color(color_ports)\n        cube([10, 8, 1], center=true);\n        \n        translate([0, 0, -0.5])\n        cylinder(h=2, r=2.5, center=true);\n    }\n}\n\n// Assemble the complete switcher\nbody();\nfront_panel();\ntop_panel();\nside_vents();\nbottom();\npower_connector();",
    "renders": true
  },
  {
    "electronic_device": "splitter",
    "openscad_code": "// 3-Port USB-C Splitter Hub\n// Realistic style, medium complexity\n// 75 mm x 35 mm x 15 mm overall\n\n// Color definitions\ncolor_body = [0.15,0.15,0.15];        // Dark gray plastic\ncolor_ports = [0.3,0.3,0.3];          // Lighter port plastic\ncolor_led = [0,1,0];                  // Green LED\ncolor_labels = [0.8,0.8,0.8];         // Light gray text\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Outer shell\n        color(color_body)\n        minkowski() {\n            cube([70,30,11], center=true);\n            sphere(1.5);\n        }\n        \n        // Top recess for logo\n        translate([0,0,5.5])\n        cube([25,12,2], center=true);\n        \n        // Bottom cable relief\n        translate([0,0,-5.5])\n        cube([60,26,2], center=true);\n    }\n}\n\n// USB-C port module\nmodule usbc_port(x_pos=0, angle=0) {\n    translate([x_pos,0,0])\n    rotate([0,angle,0])\n    translate([0,-15,0])\n    color(color_ports) {\n        // Port housing\n        difference() {\n            cube([8,6,4], center=true);\n            translate([0,3.2,0])\n            cube([6,0.5,2.5], center=true);\n        }\n        \n        // Internal contacts\n        translate([0,3.5,0])\n        color([0.1,0.1,0.1])\n        cube([5.5,0.3,1.2], center=true);\n        \n        // Port label\n        translate([0,3.5,2.5])\n        rotate([90,0,0])\n        color(color_labels)\n        linear_extrude(0.2)\n        text(\"USB-C\", size=2, halign=\"center\");\n    }\n}\n\n// LED indicator\nmodule status_led() {\n    translate([25,0,5.5])\n    color(color_led)\n    cylinder(h=1, d=3, $fn=20);\n    \n    // LED lens\n    translate([25,0,6.5])\n    color([0,1,0,0.5])\n    sphere(1.5, $fn=20);\n}\n\n// Cable strain relief\nmodule cable_relief() {\n    translate([-30,0,-5.5])\n    color(color_body)\n    difference() {\n        cylinder(h=3, d=8, $fn=30);\n        translate([0,0,-0.5])\n        cylinder(h=4, d=5, $fn=30);\n    }\n}\n\n// Assembly\nmain_body();\n\n// Three USB-C ports\nusbc_port(-20, 0);\nusbc_port(0, 0);\nusbc_port(20, 0);\n\n// Status LED\nstatus_led();\n\n// Input cable\ncable_relief();\n\n// Top logo\ntranslate([0,0,6.6])\ncolor(color_labels)\nlinear_extrude(0.5)\ntext(\"SPLIT\", size=4, halign=\"center\", font=\"Arial:style=Bold\");\n\n// Ventilation slots\nfor(i=[-25:10:25]) {\n    translate([i,0,0])\n    difference() {\n        cube([6,30,11], center=true);\n        translate([0,0,5.5])\n        cube([7,32,12], center=true);\n    }\n}\n\n// Bottom rubber feet\nmodule foot(x,y) {\n    translate([x,y,-6.5])\n    color([0.05,0.05,0.05])\n    cylinder(h=1, d=4, $fn=20);\n}\n\nfoot(-25,-10);\nfoot(25,-10);\nfoot(-25,10);\nfoot(25,10);",
    "renders": true
  },
  {
    "electronic_device": "tuner",
    "openscad_code": "// Electronic Guitar Tuner - Realistic Style with Medium Complexity\n// Dimensions: 80mm x 35mm x 15mm\n\n// Color definitions\ncolor_body = \"Black\";\ncolor_screen = \"DarkBlue\";\ncolor_buttons = \"Gray\";\ncolor_text = \"White\";\ncolor_ports = \"DarkGray\";\n\n// Main body module\nmodule tuner_body() {\n    color(color_body)\n    difference() {\n        // Main rounded rectangular body\n        minkowski() {\n            cube([75, 30, 10], center = true);\n            sphere(2);\n        }\n        \n        // Screen cutout\n        translate([0, 5, 5.1])\n            cube([50, 20, 2], center = true);\n            \n        // Button holes\n        translate([20, -10, 5.1])\n            cylinder(h = 2, r = 3, $fn = 20);\n        translate([0, -10, 5.1])\n            cylinder(h = 2, r = 3, $fn = 20);\n        translate([-20, -10, 5.1])\n            cylinder(h = 2, r = 3, $fn = 20);\n    }\n}\n\n// LCD Screen module\nmodule lcd_screen() {\n    color(color_screen)\n    translate([0, 5, 5])\n    cube([48, 18, 0.5], center = true);\n    \n    // Screen details\n    color(\"LightBlue\")\n    translate([0, 5, 5.3])\n    cube([45, 15, 0.2], center = true);\n    \n    // Tuning indicator bars\n    for(i = [-2:2]) {\n        color(\"Cyan\")\n        translate([i * 8, 10, 5.5])\n        cube([4, 2, 0.1], center = true);\n    }\n}\n\n// Button module\nmodule button(x_pos) {\n    color(color_buttons)\n    translate([x_pos, -10, 5])\n    cylinder(h = 2, r = 2.8, $fn = 20);\n    \n    // Button top detail\n    color(\"LightGray\")\n    translate([x_pos, -10, 7.1])\n    cylinder(h = 0.5, r = 2.5, $fn = 20);\n}\n\n// Input jack module\nmodule input_jack() {\n    color(color_ports)\n    translate([-35, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 8, r1 = 5, r2 = 6, $fn = 30);\n        cylinder(h = 8, r1 = 3.5, r2 = 3.5, $fn = 30);\n    }\n    \n    // Jack hole\n    color(\"Black\")\n    translate([-39, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 10, r = 3.5, $fn = 30);\n}\n\n// Power LED indicator\nmodule power_led() {\n    color(\"Red\")\n    translate([30, -10, 5.5])\n    cylinder(h = 0.5, r = 1.5, $fn = 15);\n}\n\n// Clip mechanism\nmodule clip() {\n    color(color_body)\n    translate([0, 0, -8])\n    union() {\n        // Clip base\n        cube([70, 25, 8], center = true);\n        \n        // Clip spring housing\n        translate([0, 12, -4])\n            cube([60, 6, 4], center = true);\n            \n        // Clip teeth\n        for(i = [-20:20:40]) {\n            translate([i, 12.5, -6])\n                cube([15, 1, 2]);\n        }\n    }\n}\n\n// Brand label\nmodule brand_label() {\n    color(color_text)\n    translate([0, 0, 5.5])\n    linear_extrude(height = 0.2)\n    text(\"TUNE-TECH\", size = 4, halign = \"center\", valign = \"center\");\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    color(\"DarkGray\")\n    translate([0, 0, -5])\n    difference() {\n        cube([40, 20, 2], center = true);\n        translate([0, 0, -0.5])\n            cube([38, 18, 1], center = true);\n    }\n}\n\n// Assembly\ntuner_body();\nlcd_screen();\nbutton(20);  // Power button\nbutton(0);   // Mode button\nbutton(-20); // Calibrate button\ninput_jack();\npower_led();\nclip();\nbrand_label();\nbattery_compartment();",
    "renders": true
  },
  {
    "electronic_device": "preamp",
    "openscad_code": "// Preamp Electronic Device - Realistic Style with Medium Complexity\n// 3D printable preamplifier model with functional features\n\n// Dimensions\nbody_width = 80;\nbody_depth = 120;\nbody_height = 35;\nfront_panel_thickness = 5;\n\n// Knob dimensions\nknob_radius = 8;\nknob_height = 10;\n\n// Button dimensions\nbutton_width = 8;\nbutton_height = 4;\nbutton_depth = 3;\n\n// LED dimensions\nled_radius = 2;\nled_depth = 3;\n\n// RCA jack dimensions\nrca_outer_radius = 5;\nrca_inner_radius = 2;\nrca_depth = 8;\n\n// Main body\nmodule body() {\n    color([0.2, 0.2, 0.2])  // Dark gray\n    difference() {\n        // Main box\n        cube([body_width, body_depth, body_height], center=true);\n        \n        // Front panel recess\n        translate([0, body_depth/2 - front_panel_thickness/2, 0])\n            cube([body_width + 1, front_panel_thickness + 1, body_height + 1], center=true);\n    }\n}\n\n// Front panel\nmodule front_panel() {\n    color([0.1, 0.1, 0.1])  // Black\n    translate([0, body_depth/2 - front_panel_thickness/2, 0])\n        cube([body_width, front_panel_thickness, body_height], center=true);\n}\n\n// Volume knob\nmodule volume_knob() {\n    color([0.8, 0.8, 0.8])  // Silver\n    translate([-body_width/3, body_depth/2 + knob_height/2, 0])\n        rotate([90, 0, 0])\n            cylinder(h=knob_height, r1=knob_radius, r2=knob_radius*0.9);\n}\n\n// Gain knob\nmodule gain_knob() {\n    color([0.8, 0.8, 0.8])  // Silver\n    translate([body_width/3, body_depth/2 + knob_height/2, 0])\n        rotate([90, 0, 0])\n            cylinder(h=knob_height, r1=knob_radius, r2=knob_radius*0.9);\n}\n\n// Power button\nmodule power_button() {\n    color([0.9, 0.1, 0.1])  // Red\n    translate([0, body_depth/2 + button_depth/2, body_height/4])\n        cube([button_width, button_depth, button_height], center=true);\n}\n\n// LED indicators\nmodule leds() {\n    for(i = [-1, 1]) {\n        color([0, 1, 0])  // Green\n        translate([i * body_width/4, body_depth/2 + led_depth/2, -body_height/4])\n            sphere(r=led_radius);\n    }\n}\n\n// RCA input jacks\nmodule rca_jacks() {\n    color([0.7, 0.7, 0.7])  // Silver\n    for(i = [-1, 1]) {\n        translate([i * 15, -body_depth/2 - rca_depth/2, -body_height/4])\n            difference() {\n                cylinder(h=rca_depth, r=rca_outer_radius);\n                translate([0, 0, -1])\n                    cylinder(h=rca_depth + 2, r=rca_inner_radius);\n            }\n    }\n}\n\n// RCA output jacks\nmodule rca_outputs() {\n    color([0.7, 0.7, 0.7])  // Silver\n    for(i = [-1, 1]) {\n        translate([i * 15, -body_depth/2 - rca_depth/2, body_height/4])\n            difference() {\n                cylinder(h=rca_depth, r=rca_outer_radius);\n                translate([0, 0, -1])\n                    cylinder(h=rca_depth + 2, r=rca_inner_radius);\n            }\n    }\n}\n\n// VU meter\nmodule vu_meter() {\n    color([0, 0, 0])  // Black\n    translate([0, body_depth/2 + 0.1, 0])\n        cube([40, 0.2, 15], center=true);\n    \n    color([0.9, 0.9, 0.9])  // White\n    translate([0, body_depth/2 + 0.2, 0])\n        cube([36, 0.1, 11], center=true);\n}\n\n// Ventilation holes on top\nmodule vents() {\n    color([0.2, 0.2, 0.2])\n    for(i = [-2:2]) {\n        translate([i * 15, 0, body_height/2 + 0.1])\n            cube([10, 100, 1], center=true);\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    color([0.1, 0.1, 0.1])  // Black\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * body_width/2.5, y * body_depth/2.5, -body_height/2 - 2])\n                cylinder(h=4, r=5);\n        }\n    }\n}\n\n// Logo placeholder\nmodule logo() {\n    color([0.8, 0.8, 0.8])\n    translate([body_width/2 - 15, body_depth/2 - 15, body_height/2 + 0.1])\n        cube([20, 10, 0.5]);\n}\n\n// Assemble the preamp\nunion() {\n    body();\n    front_panel();\n    volume_knob();\n    gain_knob();\n    power_button();\n    leds();\n    rca_jacks();\n    rca_outputs();\n    vu_meter();\n    vents();\n    feet();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "deck",
    "openscad_code": "// Deck electronic device - Realistic portable audio recorder\n// Main body dimensions: 70mm x 40mm x 15mm\n\n// Colors\nrecorder_body = [0.2, 0.2, 0.2];      // Dark gray body\nscreen_color = [0.1, 0.1, 0.1];       // Black screen\nbutton_color = [0.3, 0.3, 0.3];       // Medium gray buttons\naccent_color = [0.8, 0.1, 0.1];       // Red accent\nmetal_color = [0.6, 0.6, 0.6];        // Silver metal\n\n// Main body\nmodule recorder_body() {\n    difference() {\n        // Main shell\n        color(recorder_body)\n        rounded_cube([70, 40, 15], 2);\n        \n        // Top display recess\n        translate([5, 5, 12])\n            cube([60, 15, 3]);\n            \n        // Button recesses\n        for (x = [0:1:6]) {\n            translate([8 + x*8, 25, 12])\n                cube([6, 10, 3]);\n        }\n    }\n}\n\n// Create rounded cube\nmodule rounded_cube(size, radius) {\n    hull() {\n        for (x = [0, 1])\n            for (y = [0, 1])\n                for (z = [0, 1])\n                    translate([x*(size[0]-2*radius), y*(size[1]-2*radius), z*(size[2]-2*radius)])\n                        sphere(r=radius);\n    }\n}\n\n// Display screen\nmodule display() {\n    color(screen_color)\n    translate([7, 6, 12.5])\n        cube([58, 13, 0.5]);\n        \n    // Screen bezel\n    color(metal_color)\n    translate([6.5, 5.5, 12.2])\n        cube([59, 14, 0.3]);\n}\n\n// Control buttons\nmodule buttons() {\n    // Record button (red)\n    color(accent_color)\n    translate([10, 30, 12.5])\n        cylinder(h=1.5, r=3);\n        \n    // Play/pause buttons\n    for (i = [0:1:3]) {\n        color(button_color)\n        translate([20 + i*12, 30, 12.5])\n            cube([6, 6, 1.5]);\n    }\n    \n    // Volume wheel\n    color(metal_color)\n    translate([62, 12, 7.5])\n        rotate([90, 0, 0])\n            cylinder(h=3, r=4);\n}\n\n// Microphone grilles\nmodule microphones() {\n    for (x = [-1, 1]) {\n        translate([x*25, 38, 7.5]) {\n            // Outer grille\n            color(metal_color)\n            cylinder(h=2, r=6);\n            \n            // Holes pattern\n            difference() {\n                cylinder(h=2.1, r=6);\n                for (i = [-2:2])\n                    for (j = [-2:2])\n                        translate([i*2, j*2, -0.1])\n                            cylinder(h=2.3, r=0.8);\n            }\n        }\n    }\n}\n\n// Input/output ports\nmodule ports() {\n    // 3.5mm jack\n    color(metal_color)\n    translate([0, 20, 7.5])\n        rotate([0, 90, 0])\n            cylinder(h=8, r=3);\n            \n    // USB-C port\n    color([0.1, 0.1, 0.1])\n    translate([0, 25, 5])\n        rotate([0, 90, 0])\n            cube([5, 12, 3]);\n            \n    // SD card slot\n    translate([0, 30, 10])\n        rotate([0, 90, 0])\n            cube([2, 15, 11]);\n}\n\n// LED indicators\nmodule indicators() {\n    // Power LED\n    color([0, 1, 0])\n    translate([65, 5, 12.5])\n        cylinder(h=1, r=1.5);\n        \n    // Record LED\n    color(accent_color)\n    translate([65, 8, 12.5])\n        cylinder(h=1, r=1.5);\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    difference() {\n        // Cover\n        translate([35, 0, 3])\n            cube([30, 8, 6]);\n            \n        // Screws\n        for (x = [40, 60]) {\n            color(metal_color)\n            translate([x, 2, 2.5])\n                cylinder(h=2, r=1);\n        }\n    }\n}\n\n// Assemble the recorder\nrecorder_body();\ndisplay();\nbuttons();\nmicrophones();\nports();\nindicators();\nbattery_compartment();",
    "renders": true
  },
  {
    "electronic_device": "drive",
    "openscad_code": "// USB Flash Drive – realistic, medium-complexity, 3D-printable\n// Footprint ≈ 55 × 20 × 9 mm, prints without supports\n\n$fn = 36;\n\n// ---------- Colors ----------\ncolor_case   = [0.15, 0.15, 0.15];   // matte black plastic\ncolor_metal  = [0.75, 0.75, 0.75];   // brushed steel\ncolor_led    = [0.0, 1.0, 0.0];      // activity LED\ncolor_body   = [0.05, 0.05, 0.05];   // main body\n\n// ---------- Main assembly ----------\ndifference() {\n    usb_body();\n    translate([0, 0, 0.1])  // tiny offset for clean difference\n        keychain_hole();\n}\n\n// ---------- Main body ----------\nmodule usb_body() {\n    union() {\n        // Plastic shell\n        color(color_body)\n        hull() {\n            translate([-27, -10, 0])\n                cube([54, 20, 8.5]);\n            translate([-27, -10, 0.5])\n                cube([54, 20, 8.5]);\n        }\n\n        // Metal USB-A plug\n        color(color_metal)\n        translate([27, 0, 3.25])\n            rotate([0, 90, 0])\n                cylinder(h = 13, d = 7.5);\n\n        // Plug shroud (thin shell)\n        difference() {\n            color(color_case)\n            translate([27, 0, 3.25])\n                rotate([0, 90, 0])\n                    cylinder(h = 14, d = 12);\n            translate([27, 0, 3.25])\n                rotate([0, 90, 0])\n                    cylinder(h = 15, d = 7.7);\n        }\n\n        // Activity LED window\n        color(color_led)\n        translate([-25, 0, 8.7])\n            cylinder(h = 0.8, d = 2.5);\n\n        // Branding relief (repeating triangles)\n        for (i = [-8 : 2 : 8])\n            translate([i, -10.2, 4])\n                rotate([0, 0, 0])\n                    linear_extrude(height = 0.8)\n                        polygon(points = [[0, 0], [1, 1], [2, 0]]);\n\n        // Write-protect switch\n        color(color_case)\n        translate([10, 10.2, 2])\n            rounded_cube([8, 2.5, 3], 0.5);\n    }\n}\n\n// ---------- Keychain hole ----------\nmodule keychain_hole() {\n    translate([-24, 0, 4.25])\n        rotate([0, 90, 0])\n            cylinder(h = 20, d = 3.5);\n}\n\n// ---------- Helper for rounded cube ----------\nmodule rounded_cube(size, r) {\n    x = size[0]; y = size[1]; z = size[2];\n    hull() {\n        for(dx = [r, x - r], dy = [r, y - r], dz = [r, z - r])\n            translate([dx, dy, dz])\n                sphere(r = r);\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "bluray",
    "openscad_code": "// Blu-ray Player - Realistic Style, Medium Complexity\n// Dimensions: 90mm x 200mm x 35mm\n\n// Main body dimensions\nbody_w = 90;\nbody_l = 200;\nbody_h = 35;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule main_body() {\n    difference() {\n        // Outer shell\n        color(\"black\")\n        cube([body_w, body_l, body_h], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall/2])\n        cube([body_w-wall*2, body_l-wall*2, body_h-wall], center=true);\n    }\n}\n\nmodule front_panel() {\n    translate([0, body_l/2 - wall, 0])\n    difference() {\n        // Front bezel\n        color(\"black\")\n        cube([body_w, wall, body_h], center=true);\n        \n        // Disc tray slot\n        translate([0, 0, 5])\n        cube([60, wall+0.1, 8], center=true);\n    }\n}\n\nmodule disc_tray() {\n    translate([0, body_l/2 - wall*2, 5])\n    color(\"darkgray\")\n    cube([58, 50, 1], center=false);\n}\n\nmodule display() {\n    translate([0, body_l/2 - 15, 10])\n    color(\"dimgray\")\n    cube([40, 10, 3], center=true);\n    \n    // LED indicators\n    for(i = [-1, 0, 1]) {\n        translate([i*10, body_l/2 - 15, 12])\n        color(\"red\")\n        sphere(1);\n    }\n}\n\nmodule buttons() {\n    // Power button\n    translate([-body_w/2 + 15, body_l/2 - 10, 5])\n    color(\"red\")\n    cylinder(h=2, r=3, center=true);\n    \n    // Eject button\n    translate([-body_w/2 + 25, body_l/2 - 10, 5])\n    color(\"blue\")\n    cylinder(h=2, r=3, center=true);\n    \n    // Play/Pause buttons\n    for(i = [0, 1]) {\n        translate([body_w/2 - 20 - i*8, body_l/2 - 10, 5])\n        color(\"silver\")\n        cube([6, 6, 2], center=true);\n    }\n}\n\nmodule rear_ports() {\n    // HDMI port\n    translate([0, -body_l/2 + 10, 5])\n    color(\"silver\")\n    cube([15, 5, 7], center=true);\n    \n    // USB port\n    translate([20, -body_l/2 + 10, 5])\n    color(\"blue\")\n    cube([12, 5, 5], center=true);\n    \n    // Power connector\n    translate([-20, -body_l/2 + 10, 0])\n    color(\"black\")\n    cube([10, 5, 10], center=true);\n    \n    // Ventilation slots\n    for(i = [0:4]) {\n        translate([0, -body_l/2 + 5 + i*5, 12])\n        color(\"black\")\n        cube([body_w-10, 2, 2], center=true);\n    }\n}\n\nmodule feet() {\n    // Rubber feet at corners\n    foot_positions = [\n        [-body_w/2 + 10, -body_l/2 + 10],\n        [body_w/2 - 10, -body_l/2 + 10],\n        [-body_w/2 + 10, body_l/2 - 10],\n        [body_w/2 - 10, body_l/2 - 10]\n    ];\n    \n    for(pos = foot_positions) {\n        translate([pos[0], pos[1], -body_h/2 - 1])\n        color(\"gray\")\n        cylinder(h=2, r=3, center=true);\n    }\n}\n\n// Assemble the device\nmain_body();\nfront_panel();\ndisc_tray();\ndisplay();\nbuttons();\nrear_ports();\nfeet();",
    "renders": true
  },
  {
    "electronic_device": "dvd",
    "openscad_code": "// DVD Player - Realistic Medium Complexity\n// Approx 95 mm wide, 255 mm deep, 38 mm tall\n\n$fn = 64;\n\n// Main colors\ncolor_case = [0.15, 0.15, 0.15];      // dark matte plastic\ncolor_front = [0.05, 0.05, 0.05];     // glossy front panel\ncolor_display = [0, 0, 0];            // lcd black\ncolor_led = [1, 0, 0];                // standby red\ncolor_button = [0.2, 0.2, 0.2];       // rubber grey\ncolor_metal = [0.4, 0.4, 0.4];        // aluminum\n\n// Main body\nmodule dvd_player() {\n    difference() {\n        // Outer shell\n        color(color_case)\n        cube([95, 255, 38], center = false);\n        \n        // Hollow inside\n        translate([2, 2, 2])\n        cube([91, 251, 36], center = false);\n    }\n}\n\n// Front panel with all details\nmodule front_panel() {\n    // Glossy front face\n    color(color_front)\n    translate([0, 0, 0])\n    cube([95, 10, 38], center = false);\n    \n    // LCD display\n    color(color_display)\n    translate([10, 1, 25])\n    cube([50, 2, 10], center = false);\n    \n    // Tray slot\n    translate([10, 0.5, 15])\n    cube([75, 1, 8], center = false);\n    \n    // Buttons\n    module button(x, label) {\n        color(color_button)\n        translate([x, 1, 5])\n        cylinder(h = 1, r = 3, center = false);\n    }\n    \n    // Power button\n    button(85, \"power\");\n    \n    // Navigation buttons\n    button(25, \"play\");\n    button(35, \"stop\");\n    button(45, \"eject\");\n    button(55, \"skip\");\n    \n    // LED indicator\n    color(color_led)\n    translate([75, 0.5, 30])\n    cube([2, 0.5, 2], center = false);\n}\n\n// Rear panel\nmodule rear_panel() {\n    // Back face\n    color(color_case)\n    translate([0, 245, 0])\n    cube([95, 10, 38], center = false);\n    \n    // Ventilation slots\n    for (y = [250, 252, 254]) {\n        for (x = [10:15:80]) {\n            translate([x, y, 5])\n            cube([8, 2, 2], center = false);\n        }\n    }\n    \n    // Ports\n    // HDMI\n    color(color_metal)\n    translate([20, 248, 25])\n    cube([12, 4, 6], center = false);\n    \n    // USB\n    translate([40, 248, 25])\n    cube([8, 4, 3], center = false);\n    \n    // Power connector\n    translate([70, 248, 25])\n    cylinder(h = 4, r = 5, center = false);\n}\n\n// Side ventilation\nmodule side_ventilation() {\n    for (z = [8:8:30]) {\n        color(color_case)\n        translate([0, 15, z])\n        cube([2, 225, 4], center = false);\n    }\n}\n\n// Feet\nmodule feet() {\n    color(color_button)\n    for (x = [10, 85]) {\n        for (y = [10, 235]) {\n            translate([x, y, -2])\n            cylinder(h = 2, r = 3, center = false);\n        }\n    }\n}\n\n// Logo placeholder\nmodule logo() {\n    color([0.8, 0.8, 0.8])\n    translate([45, 1, 30])\n    cube([15, 0.5, 5], center = false);\n}\n\n// Assemble the player\ndvd_player();\nfront_panel();\nrear_panel();\ntranslate([0, 0, 0]) side_ventilation();\ntranslate([93, 0, 0]) mirror([1, 0, 0]) side_ventilation();\nfeet();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "vcr",
    "openscad_code": "// VCR (Video Cassette Recorder) - Realistic Style, Medium Complexity\n// Designed for 3D printing - no overhangs, 1mm wall thickness\n\n// Overall dimensions: 100mm x 300mm x 60mm (width x depth x height)\n\n// Main body of the VCR\nmodule main_body() {\n    color(\"black\")\n    difference() {\n        // Main shell\n        translate([0, 0, 30])\n            cube([100, 300, 60], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 30])\n            cube([96, 296, 58], center=true);\n        \n        // Front panel opening\n        translate([0, 149, 30])\n            cube([98, 2, 58], center=true);\n    }\n}\n\n// Front panel with all controls and displays\nmodule front_panel() {\n    color(\"very dark grey\")\n    translate([0, 150, 30])\n    cube([100, 2, 60], center=true);\n}\n\n// Cassette slot\nmodule cassette_slot() {\n    color(\"black\")\n    translate([0, 149.5, 45])\n    cube([70, 1, 10], center=true);\n}\n\n// Display panel\nmodule display_panel() {\n    color(\"dark blue\")\n    translate([0, 149.5, 55])\n    cube([60, 1, 8], center=true);\n}\n\n// LED indicators\nmodule led_indicators() {\n    for(i = [-2, 0, 2]) {\n        color(\"red\")\n        translate([i * 15 + 30, 149.5, 55])\n        cylinder(h=1, d=3);\n    }\n}\n\n// Control buttons\nmodule control_buttons() {\n    // Power button\n    color(\"red\")\n    translate([-35, 149.5, 40])\n    cylinder(h=2, d=8);\n    \n    // Eject button\n    color(\"silver\")\n    translate([-20, 149.5, 40])\n    cube([15, 2, 8], center=true);\n    \n    // Play button\n    color(\"green\")\n    translate([-5, 149.5, 40])\n    cube([8, 2, 8], center=true);\n    \n    // Stop button\n    color(\"black\")\n    translate([5, 149.5, 40])\n    cube([8, 2, 8], center=true);\n    \n    // Rewind button\n    color(\"blue\")\n    translate([20, 149.5, 40])\n    cube([8, 2, 8], center=true);\n    \n    // Fast forward button\n    color(\"blue\")\n    translate([30, 149.5, 40])\n    cube([8, 2, 8], center=true);\n}\n\n// Ventilation slots on top\nmodule ventilation_slots() {\n    for(i = [-4:4]) {\n        color(\"black\")\n        translate([0, i * 30, 59])\n        cube([80, 2, 1], center=true);\n    }\n}\n\n// Rear panel with connectors\nmodule rear_panel() {\n    color(\"dark grey\")\n    translate([0, -150, 30])\n    cube([100, 2, 60], center=true);\n}\n\n// RF connectors\nmodule rf_connectors() {\n    for(i = [-1, 1]) {\n        color(\"silver\")\n        translate([i * 20, -149.5, 45])\n        cylinder(h=4, d=6);\n    }\n}\n\n// RCA connectors\nmodule rca_connectors() {\n    // Yellow (video)\n    color(\"yellow\")\n    translate([-20, -149.5, 35])\n    cylinder(h=4, d=5);\n    \n    // Red (audio right)\n    color(\"red\")\n    translate([-10, -149.5, 35])\n    cylinder(h=4, d=5);\n    \n    // White (audio left)\n    color(\"white\")\n    translate([0, -149.5, 35])\n    cylinder(h=4, d=5);\n}\n\n// Power connector\nmodule power_connector() {\n    color(\"black\")\n    translate([30, -149.5, 35])\n    cube([15, 2, 10], center=true);\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    for(x = [-40, 40])\n    for(y = [-140, 140]) {\n        color(\"dark grey\")\n        translate([x, y, 0.5])\n        cylinder(h=1, d=8);\n    }\n}\n\n// Assemble the complete VCR\nunion() {\n    main_body();\n    front_panel();\n    cassette_slot();\n    display_panel();\n    led_indicators();\n    control_buttons();\n    ventilation_slots();\n    rear_panel();\n    rf_connectors();\n    rca_connectors();\n    power_connector();\n    rubber_feet();\n}",
    "renders": true
  },
  {
    "electronic_device": "camcorder",
    "openscad_code": "// Camcorder Model - Realistic Medium Complexity\n// Dimensions: 85mm x 60mm x 120mm (L x W x H)\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.1, 0.1, 0.1];       // Black plastic\ncolor_lens = [0.2, 0.2, 0.2];       // Dark grey lens\ncolor_screen = [0.05, 0.05, 0.1];   // Very dark blue-black\ncolor_details = [0.8, 0.8, 0.8];    // Light grey\ncolor_red = [0.8, 0.1, 0.1];        // Red record button\n\n// Main body\nmodule main_body() {\n    color(color_body)\n    difference() {\n        // Main chassis\n        translate([0, 0, 60])\n            cube([85, 60, 120], center=true);\n        \n        // Hand grip curve\n        translate([-30, -20, 30])\n            rotate([0, 15, 0])\n            cube([40, 25, 60], center=true);\n        \n        // Screen cavity\n        translate([20, 30, 85])\n            cube([50, 5, 40], center=true);\n    }\n}\n\n// Lens assembly\nmodule lens_assembly() {\n    // Lens mount\n    color(color_body)\n    translate([-45, 0, 60])\n        rotate([0, 90, 0])\n        cylinder(h=15, d1=30, d2=25);\n    \n    // Lens barrel\n    color(color_lens)\n    translate([-55, 0, 60])\n        rotate([0, 90, 0])\n        cylinder(h=25, d=20);\n    \n    // Front lens element\n    color([0, 0, 0])\n    translate([-65, 0, 60])\n        rotate([0, 90, 0])\n        cylinder(h=2, d=18);\n}\n\n// Flip-out screen\nmodule screen() {\n    // Screen frame\n    color(color_body)\n    translate([20, 32, 85])\n        cube([48, 3, 38], center=true);\n    \n    // LCD display\n    color(color_screen)\n    translate([20, 33.5, 85])\n        cube([44, 0.5, 34], center=true);\n}\n\n// Control buttons\nmodule controls() {\n    // Record button\n    color(color_red)\n    translate([-15, -29, 105])\n        cylinder(h=3, d=10);\n    \n    // Zoom rocker\n    color(color_details)\n    translate([25, -29, 105])\n        cube([20, 5, 8], center=true);\n    \n    // Power button\n    color(color_details)\n    translate([0, -29, 115])\n        cube([8, 5, 5], center=true);\n    \n    // Mode dial\n    color(color_details)\n    translate([-30, -25, 100])\n        cylinder(h=5, d=12);\n}\n\n// Ports and connections\nmodule ports() {\n    // USB port\n    color([0, 0, 0])\n    translate([40, 0, 40])\n        cube([8, 2, 4], center=true);\n    \n    // HDMI port\n    color([0, 0, 0])\n    translate([40, 0, 35])\n        cube([10, 3, 7], center=true);\n    \n    // Microphone jack\n    color([0, 0, 0])\n    translate([40, 0, 30])\n        cylinder(h=5, d=3.5);\n}\n\n// Viewfinder\nmodule viewfinder() {\n    color(color_body)\n    translate([-10, 25, 115])\n        cube([20, 15, 10], center=true);\n    \n    color(color_screen)\n    translate([-10, 25, 115])\n        cube([18, 13, 1], center=true);\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    color(color_details)\n    translate([0, 30, 40])\n        cube([50, 2, 30], center=true);\n    \n    // Battery cover lines\n    for(i = [-1:1]) {\n        color([0, 0, 0])\n        translate([i * 15, 31, 40])\n            cube([2, 0.5, 25], center=true);\n    }\n}\n\n// Hand strap loops\nmodule strap_loops() {\n    for(side = [-1, 1]) {\n        color(color_body)\n        translate([side * 35, 0, 80])\n            difference() {\n                cube([5, 8, 10], center=true);\n                translate([0, 0, 0])\n                    cube([3, 6, 12], center=true);\n            }\n    }\n}\n\n// Status LEDs\nmodule status_leds() {\n    // Recording LED\n    color(color_red)\n    translate([-35, 0, 90])\n        cylinder(h=1, d=3);\n    \n    // Power LED\n    color([0, 0.8, 0])\n    translate([-35, 5, 90])\n        cylinder(h=1, d=3);\n}\n\n// Speaker holes\nmodule speaker() {\n    for(row = [0:3]) {\n        for(col = [0:5]) {\n            color([0, 0, 0])\n            translate([-25 + row * 5, 29, 65 + col * 5])\n                cylinder(h=3, d=1.5);\n        }\n    }\n}\n\n// Microphone grille\nmodule microphone() {\n    color(color_details)\n    translate([-42, 0, 75])\n        cube([6, 30, 4], center=true);\n    \n    for(i = [0:9]) {\n        color([0, 0, 0])\n        translate([-42, -15 + i * 3.3, 75])\n            cube([2, 0.5, 3], center=true);\n    }\n}\n\n// Assemble the camcorder\nunion() {\n    main_body();\n    lens_assembly();\n    screen();\n    controls();\n    ports();\n    viewfinder();\n    battery_compartment();\n    strap_loops();\n    status_leds();\n    speaker();\n    microphone();\n}",
    "renders": true
  },
  {
    "electronic_device": "digitizer",
    "openscad_code": "// Digitizer Electronic Device - Realistic Style, Medium Complexity\n// Dimensions: 120mm x 80mm x 15mm (tablet-style digitizer)\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.2, 0.2, 0.2];    // Dark gray\ncolor_screen = [0.1, 0.1, 0.1];  // Black\ncolor_bezel = [0.3, 0.3, 0.3];   // Medium gray\ncolor_button = [0.1, 0.1, 0.1];  // Black\ncolor_port = [0.15, 0.15, 0.15]; // Dark gray\ncolor_logo = [0.5, 0.5, 0.5];    // Light gray\n\n// Main body\nmodule digitizer_body() {\n    color(color_body)\n    difference() {\n        // Main shell\n        cube([120, 80, 15], center = true);\n        \n        // Hollow interior for electronics\n        translate([0, 0, 1])\n        cube([116, 76, 13], center = true);\n    }\n}\n\n// Screen assembly\nmodule screen_assembly() {\n    // Screen bezel\n    color(color_bezel)\n    translate([0, 0, 7])\n    cube([110, 70, 2], center = true);\n    \n    // Actual screen\n    color(color_screen)\n    translate([0, 0, 8.1])\n    cube([106, 66, 0.5], center = true);\n}\n\n// Button module\nmodule button(x, y, size) {\n    translate([x, y, 7.5]) {\n        // Button housing\n        difference() {\n            cylinder(h = 2, r = size/2 + 1, center = true);\n            cylinder(h = 2.1, r = size/2, center = true);\n        }\n        \n        // Button top\n        color(color_button)\n        translate([0, 0, 0.5])\n        cylinder(h = 1, r = size/2, center = true);\n    }\n}\n\n// USB-C port\nmodule usbc_port() {\n    color(color_port)\n    translate([60, -41, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 8, r = 4, center = true);\n        cylinder(h = 8.1, r = 3.4, center = true);\n    }\n}\n\n// LED indicators\nmodule led_indicator(x) {\n    color([0.1, 0.1, 0.1])\n    translate([x, 40, 5])\n    cylinder(h = 1, r = 1.5);\n}\n\n// Pen holder clips\nmodule pen_clip() {\n    color(color_body)\n    translate([0, -41, 0])\n    difference() {\n        cube([40, 3, 10], center = true);\n        translate([0, 1.5, 0])\n        cube([38, 3, 8], center = true);\n    }\n}\n\n// Logo\nmodule logo() {\n    color(color_logo)\n    translate([0, 0, 7.6])\n    linear_extrude(height = 0.2)\n    text(\"DIGITIZER\", size = 8, halign = \"center\", valign = \"center\");\n}\n\n// Main assembly\nunion() {\n    digitizer_body();\n    screen_assembly();\n    \n    // Buttons on right side\n    button(55, 15, 6);\n    button(55, 0, 6);\n    button(55, -15, 6);\n    \n    // Ports\n    usbc_port();\n    \n    // LED indicators\n    led_indicator(-45);\n    led_indicator(-40);\n    led_indicator(-35);\n    \n    // Pen holder\n    pen_clip();\n    \n    // Logo\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "teleprompter",
    "openscad_code": "// Teleprompter Electronic Device - Realistic Medium Complexity\n// Features: Glass screen, camera mount, control buttons, ports, ventilation\n\n// Color definitions\ncolor_screen = [0.2, 0.2, 0.2];\ncolor_body = [0.8, 0.8, 0.8];\ncolor_dark = [0.1, 0.1, 0.1];\ncolor_red = [0.8, 0.2, 0.2];\ncolor_blue = [0.2, 0.2, 0.8];\n\n// Main dimensions\nbase_width = 60;\nbase_depth = 40;\nbase_height = 8;\nscreen_width = 50;\nscreen_thickness = 2;\nglass_thickness = 1;\nmirror_angle = 35;\n\n// Base module\nmodule base() {\n    color(color_body) {\n        difference() {\n            cube([base_width, base_depth, base_height], center=true);\n            // Ventilation slots\n            for (i = [-20:6:20]) {\n                translate([i, base_depth/2 - 1, 0])\n                    cube([4, 2, base_height], center=true);\n            }\n        }\n    }\n}\n\n// Screen assembly\nmodule screen_assembly() {\n    // LCD screen\n    color(color_screen) {\n        translate([0, -base_depth/4, base_height/2 + screen_thickness/2])\n            cube([screen_width, 30, screen_thickness], center=true);\n    }\n    \n    // Protective glass\n    color([0.9, 0.9, 1, 0.3]) {\n        translate([0, -base_depth/4, base_height/2 + screen_thickness + glass_thickness/2])\n            cube([screen_width + 2, 32, glass_thickness], center=true);\n    }\n}\n\n// Mirror holder\nmodule mirror_holder() {\n    color(color_body) {\n        // Left bracket\n        translate([-screen_width/2 - 3, base_depth/4, base_height/2 + 15])\n            rotate([0, 0, -mirror_angle])\n                cube([3, 25, 3], center=false);\n        \n        // Right bracket\n        translate([screen_width/2, base_depth/4, base_height/2 + 15])\n            rotate([0, 0, -mirror_angle])\n                cube([3, 25, 3], center=false);\n        \n        // Bottom support\n        translate([0, base_depth/4 + 8, base_height/2 + 2])\n            cube([screen_width + 6, 3, 3], center=true);\n    }\n}\n\n// Camera mount\nmodule camera_mount() {\n    color(color_dark) {\n        // Mount base\n        translate([0, base_depth/2 - 5, base_height/2 + 20])\n            cylinder(h=8, r1=8, r2=8, center=true);\n        \n        // Mount post\n        translate([0, base_depth/2 - 5, base_height/2 + 28])\n            cylinder(h=15, r1=5, r2=5, center=true);\n        \n        // Camera screw hole\n        translate([0, base_depth/2 - 5, base_height/2 + 35])\n            cylinder(h=5, r1=1.5, r2=1.5, center=true);\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    color(color_dark) {\n        // Panel base\n        translate([screen_width/2 + 8, 0, base_height/2 + 2])\n            cube([10, 20, 4], center=true);\n        \n        // Buttons\n        for (i = [-6:3:6]) {\n            color(color_red) {\n                translate([screen_width/2 + 8, i, base_height/2 + 4.5])\n                    cylinder(h=1, r1=1.5, r2=1.5, center=true);\n            }\n        }\n        \n        // LED indicator\n        color(color_blue) {\n            translate([screen_width/2 + 8, 8, base_height/2 + 4.5])\n                cylinder(h=1, r1=1, r2=1, center=true);\n        }\n    }\n}\n\n// Ports module\nmodule ports() {\n    color(color_dark) {\n        // USB-C port\n        translate([-screen_width/2 - 5, -base_depth/2 + 3, base_height/2])\n            cube([3, 1, 1.5], center=true);\n        \n        // Power port\n        translate([-screen_width/2 + 5, -base_depth/2 + 3, base_height/2])\n            cube([2, 1, 2], center=true);\n        \n        // HDMI port\n        translate([0, -base_depth/2 + 3, base_height/2])\n            cube([4, 1, 1.5], center=true);\n    }\n}\n\n// Mirror surface\nmodule mirror() {\n    color([0.9, 0.95, 1, 0.7]) {\n        translate([0, base_depth/4 + 5, base_height/2 + 15])\n            rotate([90 - mirror_angle, 0, 0])\n                cube([screen_width, 30, 0.5], center=true);\n    }\n}\n\n// Logo\nmodule logo() {\n    color(color_dark) {\n        translate([0, 0, base_height/2 + 0.5])\n            linear_extrude(height=0.5) {\n                text(\"TP-500\", size=5, halign=\"center\", valign=\"center\");\n            }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    screen_assembly();\n    mirror_holder();\n    camera_mount();\n    control_panel();\n    ports();\n    mirror();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "gimbal",
    "openscad_code": "// Gimbal Electronic Device - Realistic Style, Medium Complexity\n// Size: ~70mm diameter, designed for 3D printing\n\n// Main parameters\n$fn = 32;\nwall_thickness = 2;\nbody_radius = 35;\nbody_height = 15;\nmotor_diameter = 12;\nmotor_height = 8;\narm_length = 25;\narm_thickness = 4;\nscreen_width = 20;\nscreen_height = 12;\n\n// Color definitions\ncolor_body = [0.2, 0.2, 0.2];\ncolor_motor = [0.8, 0.8, 0.8];\ncolor_arm = [0.4, 0.4, 0.4];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_button = [0.9, 0.9, 0.9];\n\n// Main gimbal assembly\nmodule gimbal_device() {\n    // Central body with ports and indicators\n    color(color_body) {\n        difference() {\n            cylinder(h = body_height, r = body_radius);\n            \n            // Micro USB port\n            translate([body_radius - 3, 0, body_height/2])\n                rotate([0, 90, 0])\n                    cube([6, 8, 4], center = true);\n            \n            // LED indicator hole\n            translate([body_radius - 2, -8, body_height - 3])\n                cylinder(h = 3, r = 2);\n            \n            // Power button hole\n            translate([-body_radius + 5, 0, body_height/2])\n                cube([4, 6, 4], center = true);\n        }\n        \n        // Top grip surface\n        translate([0, 0, body_height])\n            cylinder(h = 2, r = body_radius - 2);\n    }\n    \n    // First motor (roll axis)\n    translate([0, 0, body_height + motor_height/2])\n        motor_assembly();\n    \n    // First arm\n    color(color_arm) {\n        translate([0, 0, body_height + motor_height])\n            rotate([90, 0, 0])\n                cube([arm_thickness, arm_length, arm_thickness], center = true);\n    }\n    \n    // Second motor (pitch axis)\n    translate([0, arm_length/2, body_height + motor_height])\n        rotate([90, 0, 0])\n            motor_assembly();\n    \n    // Second arm\n    color(color_arm) {\n        translate([0, arm_length, body_height + motor_height])\n            cube([arm_length, arm_thickness, arm_thickness], center = true);\n    }\n    \n    // Third motor (yaw axis)\n    translate([arm_length/2, arm_length, body_height + motor_height])\n        rotate([0, 90, 0])\n            motor_assembly();\n    \n    // Camera mount platform\n    color(color_body) {\n        translate([arm_length/2, arm_length + arm_thickness, body_height + motor_height])\n            cube([30, 20, 3], center = true);\n    }\n    \n    // OLED screen\n    color(color_screen) {\n        translate([0, 0, body_height - 1])\n            cube([screen_width, screen_height, 0.5], center = true);\n    }\n    \n    // Control buttons\n    for(i = [0:2]) {\n        color(color_button) {\n            translate([-body_radius/2 + 5 + i*6, body_radius - 3, body_height/2])\n                cylinder(h = 2, r = 2);\n        }\n    }\n    \n    // Battery compartment cover\n    translate([0, -body_radius + 5, 1])\n        cube([25, 8, 0.5], center = true);\n}\n\n// Motor assembly module\nmodule motor_assembly() {\n    color(color_motor) {\n        difference() {\n            cylinder(h = motor_height, r = motor_diameter);\n            \n            // Cooling vents\n            for(i = [0:3]) {\n                rotate([0, 0, i*90])\n                    translate([motor_diameter - 1, 0, motor_height/2])\n                        cube([2, 4, motor_height], center = true);\n            }\n        }\n        \n        // Motor shaft\n        cylinder(h = 3, r = 2);\n    }\n}\n\n// Render the gimbal\ngimbal_device();",
    "renders": true
  },
  {
    "electronic_device": "tripod",
    "openscad_code": "// Tripod Electronic Device - Medium Realistic Style\n// A compact camera tripod with electronic features\n\n// Global parameters\ntripod_height = 80;\nleg_length = 70;\nleg_width = 8;\nmount_diameter = 25;\nbase_height = 15;\n\n// Module for tripod leg\nmodule tripod_leg(length, width, angle) {\n    translate([0, 0, 0])\n    rotate([angle, 0, 0])\n    color([0.2, 0.2, 0.2])  // Dark gray aluminum\n    difference() {\n        // Main leg tube\n        cylinder(h=length, d1=width, d2=width*0.8, $fn=16);\n        \n        // Telescoping section\n        translate([0, 0, length-15])\n        cylinder(h=15, d1=width*0.7, d2=width*0.7, $fn=16);\n    }\n    \n    // Leg foot with rubber grip\n    translate([0, 0, length])\n    color([0.1, 0.1, 0.1])  // Black rubber\n    sphere(d=width*1.5, $fn=16);\n}\n\n// Module for camera mount plate\nmodule camera_mount() {\n    color([0.3, 0.3, 0.3])  // Aluminum color\n    difference() {\n        // Main mounting plate\n        cylinder(h=5, d=mount_diameter, $fn=32);\n        \n        // 1/4-20 threaded insert hole\n        translate([0, 0, -1])\n        cylinder(h=8, d=4, $fn=16);\n        \n        // Anti-slip grooves\n        for(i=[-2:1:2]) {\n            translate([i*5, 0, 2.5])\n            cube([1, 20, 1], center=true);\n        }\n    }\n    \n    // Electronic bubble level\n    translate([0, 8, 3])\n    color([0.1, 0.1, 0.1])  // Black plastic housing\n    cube([15, 6, 3], center=true);\n    \n    // Bubble level window\n    translate([0, 8, 4.6])\n    color([0.3, 0.6, 0.9, 0.8])  // Transparent blue\n    cube([13, 4, 0.5], center=true);\n}\n\n// Module for electronic control unit\nmodule control_unit() {\n    // Main control body\n    color([0.15, 0.15, 0.15])  // Dark plastic\n    difference() {\n        cube([35, 20, 12], center=true);\n        \n        // LCD screen recess\n        translate([0, 5, 6.1])\n        cube([25, 10, 1], center=true);\n    }\n    \n    // LCD screen\n    translate([0, 5, 7])\n    color([0.2, 0.2, 0.2])  // Dark screen\n    cube([23, 8, 0.5], center=true);\n    \n    // Navigation buttons\n    for(i=[-1:1:1]) {\n        translate([10*i, -7, 7])\n        color([0.4, 0.4, 0.4])  // Gray buttons\n        cylinder(h=1.5, d=6, $fn=16);\n    }\n    \n    // USB-C port\n    translate([18, 0, 0])\n    color([0.1, 0.1, 0.1])\n    cube([8, 2, 4], center=true);\n}\n\n// Module for central hub\nmodule central_hub() {\n    color([0.25, 0.25, 0.25])  // Aluminum\n    difference() {\n        // Main hub body\n        cylinder(h=base_height, d=30, $fn=32);\n        \n        // Cable management hole\n        translate([0, -12, 7])\n        rotate([90, 0, 0])\n        cylinder(h=25, d=6, $fn=16);\n    }\n    \n    // LED status ring\n    translate([0, 0, base_height-2])\n    color([0.1, 0.3, 0.8, 0.7])  // Blue LED glow\n    cylinder(h=1, d=28, $fn=32);\n}\n\n// Main assembly\nunion() {\n    // Central hub\n    central_hub();\n    \n    // Control unit mounted on hub\n    translate([0, 20, base_height-6])\n    rotate([0, 0, 0])\n    control_unit();\n    \n    // Camera mount on top\n    translate([0, 0, base_height])\n    camera_mount();\n    \n    // Three legs\n    for(i=[0:120:360]) {\n        rotate([0, 0, i])\n        translate([10, 0, 0])\n        tripod_leg(leg_length, leg_width, -30);\n    }\n    \n    // Battery compartment access panel\n    translate([0, -15, base_height-6])\n    color([0.3, 0.3, 0.3])\n    cube([12, 8, 2], center=true);\n}",
    "renders": true
  },
  {
    "electronic_device": "jib",
    "openscad_code": "// JIB Electronic Device (portable sound recorder / field recorder)\n// 60 mm x 32 mm x 15 mm – fits on most FDM beds\nmodule jib_recorder() {\n    /* ---------- Main Body ---------- */\n    // Main shell – printed on its back so no overhangs\n    difference() {\n        // Outer shell (rounded block)\n        minkowski() {\n            cube([60, 32, 10], center=true);\n            sphere(2);        // 2 mm fillets all around\n        }\n        // Hollow out for electronics\n        translate([0,0,-1])\n            cube([56, 28, 8], center=true);\n    }\n\n    /* ---------- Top Face ---------- */\n    translate([0,0,5]) {\n        color(\"silver\") {\n            // 1 mm aluminium top plate\n            cube([60, 32, 1], center=true);\n        }\n\n        // Screen\n        translate([-20, 8, 0.6])\n            color(\"black\")\n                cube([22, 12, 0.4]);\n\n        // 5 push-buttons (array)\n        for (x=[-30:15:-15])\n            translate([x, -8, 0.6])\n                button();\n\n        // Record button (large red)\n        translate([20, -8, 0.6])\n            color(\"red\")\n                cylinder(h=1.2, d=6, $fn=20);\n    }\n\n    /* ---------- Front Face (when lying on back) ---------- */\n    translate([0, -16, 0])\n        rotate([90,0,0]) {\n            color(\"dimgray\") {\n                // Protective grille for microphones\n                difference() {\n                    cube([50, 10, 2], center=true);\n                    for (x=[-20:4:20])\n                        translate([x, 0, -1])\n                            cube([1.5, 12, 4]);\n                }\n            }\n\n            // 3.5 mm jack port\n            translate([-24, 0, 0])\n                cylinder(h=8, d=6, $fn=20);\n\n            // USB-C port\n            translate([24, 0, 0])\n                cube([8, 2.6, 3.2], center=true);\n        }\n\n    /* ---------- Battery Cover ---------- */\n    translate([0, 0, -6.5])\n        color(\"darkgray\")\n            cube([30, 20, 1], center=true);\n\n    /* ---------- Logo ---------- */\n    translate([0, 12, 5.6])\n        rotate([0,0,180])\n            linear_extrude(height=0.2)\n                text(\"JIB\", size=4, halign=\"center\");\n}\n\n/* ---------- Re-usable button ---------- */\nmodule button() {\n    color(\"darkslategray\")\n        cylinder(h=1, d=4, $fn=20);\n    color(\"lightblue\")\n        translate([0,0,1])\n            cylinder(h=0.2, d=3.5, $fn=20);\n}\n\n/* ---------- Render ---------- */\njib_recorder();",
    "renders": true
  },
  {
    "electronic_device": "dolly",
    "openscad_code": "// OpenSCAD Dolly Camera Slider Electronics Module\n// Realistic style, medium complexity, 3D printable\n\n$fn = 32;\n\n// Main dimensions\nbody_len = 85;\nbody_wid = 35;\nbody_height = 15;\nwall_thick = 1.6;\n\n// Color definitions\ncolor_body = \"DarkSlateGray\";\ncolor_screen = \"Black\";\ncolor_btn = \"DimGray\";\ncolor_port = \"Silver\";\ncolor_led = \"Red\";\n\nmodule body_shell() {\n    difference() {\n        // Main enclosure\n        color(color_body)\n        translate([0, 0, body_height/2])\n            cube([body_len, body_wid, body_height], center=true);\n        \n        // Hollow cavity\n        translate([0, 0, body_height/2])\n            cube([body_len-wall_thick*2, body_wid-wall_thick*2, body_height-wall_thick], center=true);\n        \n        // Battery access slot (bottom)\n        translate([0, -body_wid/2+3, 0.5])\n            cube([30, 6, 1], center=true);\n    }\n}\n\nmodule oled_screen() {\n    // OLED display cutout\n    translate([-body_len/2+18, 0, body_height-0.5])\n        cube([22, 18, 0.5], center=true);\n    \n    // Actual screen surface\n    color(color_screen)\n    translate([-body_len/2+18, 0, body_height-0.4])\n        cube([20, 16, 0.1], center=true);\n}\n\nmodule control_buttons() {\n    // Navigation buttons\n    for (i=[0:3]) {\n        color(color_btn)\n        translate([body_len/2-12, -body_wid/2+6+6*i, body_height-1.2])\n            cylinder(h=1, d=4, center=true);\n    }\n    \n    // Power button\n    color(\"Red\")\n    translate([body_len/2-12, body_wid/2-6, body_height-1.2])\n        cylinder(h=1, d=5, center=true);\n}\n\nmodule usb_port() {\n    // USB-C receptacle\n    color(color_port)\n    translate([body_len/2, 0, body_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=7, d=8, center=true);\n    \n    // Port opening\n    translate([body_len/2+0.1, 0, body_height/2])\n        cube([4, 6, 3], center=true);\n}\n\nmodule status_leds() {\n    // Status indicators\n    color(color_led)\n    translate([-body_len/2+8, body_wid/2-3, body_height-0.5])\n        cylinder(h=0.5, d=2.5, center=true);\n    \n    color(\"Green\")\n    translate([-body_len/2+8, body_wid/2-6, body_height-0.5])\n        cylinder(h=0.5, d=2.5, center=true);\n}\n\nmodule mounting_holes() {\n    // 1/4\"-20 threaded insert holes\n    for (pos = [[-body_len/2+10, 0], [body_len/2-10, 0]]) {\n        translate([pos[0], pos[1], 0])\n            cylinder(h=body_height+2, d=6, center=true);\n    }\n    \n    // Counterbore for screws\n    for (pos = [[-body_len/2+10, 0], [body_len/2-10, 0]]) {\n        translate([pos[0], pos[1], -1])\n            cylinder(h=3, d=10, center=true);\n    }\n}\n\nmodule belt_attachment() {\n    // Belt clamp slots\n    color(color_body)\n    translate([0, body_wid/2+2, body_height/2-3])\n        cube([body_len-10, 4, 6], center=true);\n    \n    // Belt tensioner knob\n    color(color_btn)\n    translate([body_len/2-15, body_wid/2+4, body_height/2-3])\n        cylinder(h=6, d=8, center=true);\n}\n\n// Assembly\ndifference() {\n    union() {\n        body_shell();\n        oled_screen();\n        control_buttons();\n        usb_port();\n        status_leds();\n        belt_attachment();\n    }\n    \n    mounting_holes();\n}",
    "renders": true
  },
  {
    "electronic_device": "crane",
    "openscad_code": "// Crane Remote Control Electronic Device\n// Realistic style, medium complexity for 3D printing\n\n// Main dimensions\ndevice_length = 80;\ndevice_width = 40;\ndevice_thickness = 15;\n\n// Screen dimensions\nscreen_width = 30;\nscreen_height = 20;\nscreen_depth = 1;\n\n// Button parameters\nbutton_diameter = 5;\nbutton_height = 2;\nbutton_spacing = 8;\n\n// Joystick dimensions\njoystick_base_diameter = 12;\njoystick_height = 8;\njoystick_stick_diameter = 4;\njoystick_stick_height = 15;\n\n// Antenna dimensions\nantenna_diameter = 2;\nantenna_length = 25;\n\n// Colors\ncolor_case = \"DarkGrey\";\ncolor_screen = \"Black\";\ncolor_buttons = \"Red\";\ncolor_joystick = \"LightGrey\";\ncolor_antenna = \"Silver\";\n\n// Main device body\nmodule device_body() {\n    color(color_case)\n    difference() {\n        // Main case\n        union() {\n            translate([0, 0, device_thickness/2])\n                cube([device_length, device_width, device_thickness], center=true);\n            \n            // Rounded edges\n            translate([device_length/2 - 5, 0, device_thickness/2])\n                cylinder(h=device_thickness, r=5, center=true);\n            translate([-device_length/2 + 5, 0, device_thickness/2])\n                cylinder(h=device_thickness, r=5, center=true);\n        }\n        \n        // Screen cutout\n        translate([0, 0, device_thickness])\n            cube([screen_width + 4, screen_height + 4, screen_depth + 1], center=true);\n        \n        // Button holes\n        for(i = [0:3]) {\n            translate([device_length/2 - 15 - i*10, device_width/2 - 10, device_thickness])\n                cylinder(h=button_height + 1, r=button_diameter/2 + 0.5, $fn=16);\n        }\n        \n        // Charging port\n        translate([-device_length/2 + 5, 0, 0])\n            cube([8, 6, 5], center=true);\n    }\n}\n\n// LCD Screen\nmodule lcd_screen() {\n    color(color_screen)\n    translate([0, 0, device_thickness - screen_depth/2])\n        cube([screen_width, screen_height, screen_depth], center=true);\n    \n    // Screen bezel\n    color(\"DimGray\")\n    translate([0, 0, device_thickness - screen_depth])\n        cube([screen_width + 2, screen_height + 2, 0.5], center=true);\n}\n\n// Control buttons\nmodule control_buttons() {\n    for(i = [0:3]) {\n        translate([device_length/2 - 15 - i*10, device_width/2 - 10, device_thickness + button_height/2])\n            color(color_buttons)\n            cylinder(h=button_height, r=button_diameter/2, $fn=16);\n    }\n}\n\n// Crane control joystick\nmodule joystick() {\n    // Base\n    color(color_joystick)\n    translate([0, -device_width/2 + 15, device_thickness + joystick_height/2])\n        cylinder(h=joystick_height, r=joystick_base_diameter/2, $fn=32);\n    \n    // Stick\n    color(\"Black\")\n    translate([0, -device_width/2 + 15, device_thickness + joystick_height + joystick_stick_height/2])\n        cylinder(h=joystick_stick_height, r=joystick_stick_diameter/2, $fn=16);\n    \n    // Top knob\n    color(\"Red\")\n    translate([0, -device_width/2 + 15, device_thickness + joystick_height + joystick_stick_height + 2])\n        sphere(r=5);\n}\n\n// Emergency stop button\nmodule emergency_stop() {\n    color(\"Red\")\n    translate([device_length/2 - 10, 0, device_thickness + 3])\n        cylinder(h=3, r=7, $fn=32);\n    \n    color(\"DarkRed\")\n    translate([device_length/2 - 10, 0, device_thickness + 3.5])\n        cube([12, 12, 1], center=true);\n}\n\n// Antenna\nmodule antenna() {\n    color(color_antenna)\n    translate([-device_length/2, 0, device_thickness/2])\n        rotate([0, 90, 0])\n            cylinder(h=antenna_length, r=antenna_diameter/2, center=false);\n    \n    // Antenna base\n    color(\"Black\")\n    translate([-device_length/2, 0, device_thickness/2])\n        sphere(r=3);\n}\n\n// Status LEDs\nmodule status_leds() {\n    for(i = [0:2]) {\n        color([\"Green\", \"Yellow\", \"Red\"][i])\n        translate([device_length/2 - 25 + i*5, -device_width/2 + 5, device_thickness + 0.5])\n            cylinder(h=1, r=1.5, $fn=16);\n    }\n}\n\n// Assembly\ndevice_body();\nlcd_screen();\ncontrol_buttons();\njoystick();\nemergency_stop();\nantenna();\nstatus_leds();",
    "renders": true
  },
  {
    "electronic_device": "stabilizer",
    "openscad_code": "// Handheld Camera Stabilizer Gimbal - Realistic Style, Medium Complexity\n// Size: ~80mm tall, optimized for 3D printing\n\ncolor(\"gray20\")\ndifference() {\n    union() {\n        // Main handle grip\n        translate([0, 0, 5])\n            cylinder(d1=25, d2=22, h=40, $fn=32);\n\n        // Handle base with battery compartment\n        translate([0, 0, 0])\n            cylinder(d=28, h=5, $fn=32);\n\n        // Upper housing for motors\n        translate([0, 0, 45])\n            rotate([0, 0, 0])\n                cylinder(d=35, h=15, $fn=32);\n\n        // Motor arms (3-axis)\n        // Roll arm\n        translate([0, 0, 60])\n            rotate([0, 0, 0])\n                cylinder(d=6, h=25, $fn=16);\n\n        // Pitch arm\n        translate([0, 0, 85])\n            rotate([90, 0, 0])\n                cylinder(d=5, h=20, $fn=16);\n\n        // Yaw arm with camera mount\n        translate([20, 0, 85])\n            rotate([90, 90, 0])\n                cylinder(d=4, h=25, $fn=16);\n\n        // Camera mount plate\n        translate([35, 0, 85])\n            cube([20, 15, 2], center=true);\n\n        // Control panel with screen\n        color(\"black\")\n        translate([0, 12.5, 45])\n            cube([20, 5, 12], center=true);\n\n        color(\"darkblue\")\n        translate([0, 15.5, 48])\n            cube([18, 1, 8], center=true);\n\n        // Joystick control\n        color(\"darkgray\")\n        translate([8, 12.5, 42])\n            cylinder(d=6, h=4, $fn=16);\n\n        // Power button\n        color(\"red\")\n        translate([-8, 12.5, 42])\n            cylinder(d=4, h=3, $fn=16);\n\n        // Status LEDs\n        color(\"green\")\n        for(i=[0:2]) {\n            translate([12 - i*4, 12.5, 52])\n                sphere(d=2, $fn=8);\n        }\n\n        // USB-C port\n        color(\"black\")\n        translate([12, -12.5, 35])\n            cube([6, 3, 3], center=true);\n\n        // Cooling vents\n        color(\"gray30\")\n        for(i=[0:3]) {\n            translate([0, 0, 50 + i*2])\n                difference() {\n                    cylinder(d=32, h=1, $fn=32);\n                    for(j=[0:7]) {\n                        rotate([0, 0, j*45])\n                            translate([12, 0, -1])\n                                cube([20, 2, 3], center=true);\n                    }\n                }\n        }\n\n        // Motor housings\n        color(\"gray25\")\n        // Roll motor\n        translate([0, 0, 60])\n            sphere(d=10, $fn=16);\n\n        // Pitch motor\n        translate([0, 0, 85])\n            sphere(d=8, $fn=16);\n\n        // Yaw motor\n        translate([20, 0, 85])\n            sphere(d=7, $fn=16);\n    }\n\n    // Battery compartment cavity\n    translate([0, 0, 2])\n        cylinder(d=22, h=30, $fn=32);\n\n    // USB-C port opening\n    translate([12, -14, 35])\n        cube([7, 5, 4], center=true);\n\n    // Camera mount screw hole\n    translate([35, 0, 86])\n        cylinder(d=3, h=5, $fn=16);\n\n    // Button indentations\n    translate([-8, 12.5, 40])\n        cylinder(d=5, h=1, $fn=16);\n}",
    "renders": true
  },
  {
    "electronic_device": "multiviewer",
    "openscad_code": "// Multiviewer electronic device - medium complexity realistic style\n// Dimensions: 80x45x20mm (handheld multiviewer)\n\n// Main body dimensions\nbody_w = 80;\nbody_h = 45;\nbody_d = 20;\n\n// Screen dimensions\nscreen_w = 60;\nscreen_h = 35;\nscreen_d = 2;\n\n// Button dimensions\nbutton_w = 8;\nbutton_h = 5;\nbutton_d = 3;\n\n// Port dimensions\nport_w = 12;\nport_h = 7;\nport_d = 4;\n\n// Antenna dimensions\nantenna_d = 3;\nantenna_l = 15;\n\n// Main body with rounded edges\nmodule main_body() {\n    difference() {\n        // Main rectangular body\n        color(\"silver\") \n        minkowski() {\n            cube([body_w, body_h, body_d], center=true);\n            sphere(2);\n        }\n        \n        // Hollow out for electronics\n        color(\"silver\")\n        translate([0, 0, -1])\n        minkowski() {\n            cube([body_w-4, body_h-4, body_d-2], center=true);\n            sphere(1.5);\n        }\n        \n        // Screen cutout\n        color(\"silver\")\n        translate([0, 0, body_d/2 - screen_d/2])\n        cube([screen_w+2, screen_h+2, screen_d+1], center=true);\n    }\n}\n\n// LCD screen with bezel\nmodule screen() {\n    difference() {\n        // Screen bezel\n        color(\"darkgray\")\n        translate([0, 0, body_d/2 - screen_d/2])\n        cube([screen_w+4, screen_h+4, screen_d], center=true);\n        \n        // Screen display area\n        color(\"black\")\n        translate([0, 0, 1])\n        cube([screen_w, screen_h, screen_d], center=true);\n        \n        // Screen reflection\n        color([0.2, 0.2, 0.3, 0.3])\n        translate([-screen_w/4, screen_h/4, 1.1])\n        scale([1, 0.3, 0.1])\n        sphere(10);\n    }\n}\n\n// Control buttons\nmodule buttons() {\n    // Power button\n    translate([-body_w/2 + 15, -body_h/2 + 10, body_d/2 - button_d/2])\n    color(\"red\")\n    cylinder(h=button_d, r=button_w/2, $fn=20);\n    \n    // Channel up/down buttons\n    for(i=[0:1]) {\n        translate([body_w/2 - 15, -body_h/2 + 10 + i*8, body_d/2 - button_d/2])\n        color(\"darkgray\")\n        cube([button_w, button_h, button_d], center=true);\n    }\n    \n    // Menu buttons\n    for(i=[0:2]) {\n        translate([0, -body_h/2 + 8 + i*10, body_d/2 - button_d/2])\n        color(\"lightgray\")\n        cube([button_w-2, button_h-2, button_d], center=true);\n    }\n}\n\n// Connection ports\nmodule ports() {\n    // HDMI ports\n    for(i=[0:1]) {\n        translate([body_w/2 - port_w/2 - i*(port_w+5), 0, -body_d/2 + port_d/2])\n        color(\"black\")\n        cube([port_w, port_h, port_d], center=true);\n    }\n    \n    // USB port\n    translate([-body_w/2 + port_w/2 + 5, 0, -body_d/2 + port_d/2])\n    color(\"darkgray\")\n    cube([port_w-2, port_h-2, port_d], center=true);\n}\n\n// Retractable antenna\nmodule antenna() {\n    // Antenna base\n    translate([body_w/2 - 5, body_h/2 - 5, body_d/2 - 3])\n    color(\"darkgray\")\n    cylinder(h=3, r=4, $fn=20);\n    \n    // Antenna rod\n    translate([body_w/2 - 5, body_h/2 - 5, body_d/2 + antenna_l/2])\n    color(\"black\")\n    rotate([0, 90, 0])\n    cylinder(h=antenna_l, r=antenna_d/2, $fn=12);\n}\n\n// Status LEDs\nmodule status_leds() {\n    // Power LED\n    translate([-body_w/2 + 8, body_h/2 - 5, body_d/2 - 1])\n    color(\"green\")\n    sphere(1.5, $fn=12);\n    \n    // Signal LED\n    translate([-body_w/2 + 15, body_h/2 - 5, body_d/2 - 1])\n    color(\"blue\")\n    sphere(1.5, $fn=12);\n    \n    // Warning LED\n    translate([-body_w/2 + 22, body_h/2 - 5, body_d/2 - 1])\n    color(\"red\")\n    sphere(1.5, $fn=12);\n}\n\n// Speaker grills\nmodule speakers() {\n    for(y=[-body_h/4, body_h/4]) {\n        translate([0, y, -body_d/2 + 1])\n        color(\"darkgray\")\n        for(i=[-3:3]) {\n            translate([i*3, 0, 0])\n            cube([1, 15, 2]);\n        }\n    }\n}\n\n// Cooling vents\nmodule cooling_vents() {\n    color(\"silver\")\n    for(i=[-3:3]) {\n        translate([i*8, 0, 0])\n        cube([2, body_h - 10, 1]);\n    }\n}\n\n// Assemble the multiviewer\nunion() {\n    main_body();\n    screen();\n    buttons();\n    ports();\n    antenna();\n    status_leds();\n    speakers();\n    \n    // Cooling vents on sides\n    translate([0, body_h/2, 0])\n    rotate([0, 90, 0])\n    cooling_vents();\n    \n    translate([0, -body_h/2, 0])\n    rotate([0, 90, 0])\n    cooling_vents();\n}",
    "renders": true
  },
  {
    "electronic_device": "matrix",
    "openscad_code": "// Realistic Matrix Electronic Device - LED Matrix Display Module\n// Medium complexity with proper 3D printing considerations\n\n// Overall dimensions\nmodule_matrix_width = 80;\nmodule_matrix_height = 80;\nmodule_thickness = 12;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.2;\n\n// LED matrix parameters\nled_rows = 8;\nled_cols = 8;\nled_diameter = 6;\nled_depth = 2;\nled_spacing = module_matrix_width / (led_cols + 1);\n\n// Mounting holes\nmount_hole_diameter = 3.2;\nmount_hole_offset = 5;\n\n// PCB color\npcb_color = [0.1, 0.6, 0.1];\n\n// Main module body\nmodule body() {\n    difference() {\n        // Main PCB board\n        color(pcb_color)\n        cube([module_matrix_width, module_matrix_height, module_thickness], center=true);\n        \n        // LED matrix holes\n        for (i = [1:led_cols]) {\n            for (j = [1:led_rows]) {\n                translate([\n                    -module_matrix_width/2 + i * led_spacing,\n                    -module_matrix_height/2 + j * led_spacing,\n                    0\n                ])\n                cylinder(h=module_thickness + 2, d=led_diameter, center=true);\n            }\n        }\n        \n        // Mounting holes - corners\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([\n                    x * (module_matrix_width/2 - mount_hole_offset),\n                    y * (module_matrix_height/2 - mount_hole_offset),\n                    0\n                ])\n                cylinder(h=module_thickness + 2, d=mount_hole_diameter, center=true);\n            }\n        }\n    }\n}\n\n// LED pixels\nmodule led_pixels() {\n    for (i = [1:led_cols]) {\n        for (j = [1:led_rows]) {\n            translate([\n                -module_matrix_width/2 + i * led_spacing,\n                -module_matrix_height/2 + j * led_spacing,\n                module_thickness/2 - led_depth/2\n            ])\n            color([0.9, 0.1, 0.1])\n            cylinder(h=led_depth, d=led_diameter * 0.8);\n            \n            // LED lens dome\n            translate([\n                -module_matrix_width/2 + i * led_spacing,\n                -module_matrix_height/2 + j * led_spacing,\n                module_thickness/2 + led_depth/2\n            ])\n            color([0.7, 0.7, 1])\n            sphere(d=led_diameter * 0.6);\n        }\n    }\n}\n\n// Control chip\nmodule control_chip() {\n    translate([0, -module_matrix_height/2 + 15, module_thickness/2 - 1])\n    color([0.2, 0.2, 0.2])\n    cube([20, 8, 2], center=true);\n    \n    // Chip markings\n    translate([0, -module_matrix_height/2 + 15, module_thickness/2 + 0.2])\n    color([0.1, 0.1, 0.1])\n    cube([18, 6, 0.1], center=true);\n}\n\n// Power connector\nmodule power_connector() {\n    translate([-module_matrix_width/2 + 10, 0, module_thickness/2 - 1])\n    color([0.3, 0.3, 0.3])\n    cube([8, 12, 4], center=true);\n    \n    // Connector pins\n    for (i = [-1, 1]) {\n        translate([-module_matrix_width/2 + 10, i * 3, module_thickness/2 + 1])\n        color([0.8, 0.8, 0.8])\n        cylinder(h=3, d=1.2);\n    }\n}\n\n// Data connector\nmodule data_connector() {\n    translate([module_matrix_width/2 - 10, 0, module_thickness/2 - 1])\n    color([0.3, 0.3, 0.3])\n    cube([12, 8, 4], center=true);\n    \n    // Connector holes\n    for (i = [-1.5, 0, 1.5]) {\n        translate([module_matrix_width/2 - 10, i * 2, module_thickness/2 + 1])\n        color([0.1, 0.1, 0.1])\n        cylinder(h=3, d=1.5);\n    }\n}\n\n// Silkscreen labels\nmodule silkscreen_labels() {\n    // VCC label\n    translate([-module_matrix_width/2 + 10, 8, module_thickness/2 + 0.1])\n    color([0.9, 0.9, 0.9])\n    cube([6, 2, 0.1], center=true);\n    \n    // GND label\n    translate([-module_matrix_width/2 + 10, -8, module_thickness/2 + 0.1])\n    color([0.9, 0.9, 0.9])\n    cube([6, 2, 0.1], center=true);\n}\n\n// Assembly\nunion() {\n    body();\n    led_pixels();\n    control_chip();\n    power_connector();\n    data_connector();\n    silkscreen_labels();\n}",
    "renders": true
  },
  {
    "electronic_device": "scaler",
    "openscad_code": "// Handheld Digital Oscilloscope Scaler\n// Dimensions: 90mm x 55mm x 20mm\n\n// Overall scale factor for easy resizing\nscale_factor = 1;\n\n// Colors\ncolor_case = [0.15,0.15,0.15];\ncolor_screen = [0.1,0.1,0.1];\ncolor_button = [0.2,0.2,0.2];\ncolor_accent = [0.8,0,0];\ncolor_metal = [0.7,0.7,0.7];\n\n// Main body\nmodule main_body() {\n    color(color_case)\n    difference() {\n        // Outer shell\n        minkowski() {\n            cube([90,55,18], center=true);\n            sphere(2.5);\n        }\n        // Hollow interior\n        translate([0,0,-2])\n        cube([82,47,14], center=true);\n    }\n}\n\n// Screen assembly\nmodule screen() {\n    translate([0,10,10]) {\n        // Screen bezel\n        color(color_case)\n        difference() {\n            cube([50,35,2], center=true);\n            translate([0,0,1])\n            cube([45,30,2], center=true);\n        }\n        // Actual screen\n        translate([0,0,1.1])\n        color(color_screen)\n        cube([44,28,0.5], center=true);\n    }\n}\n\n// Button grid\nmodule buttons() {\n    // Navigation pad\n    translate([-25,-15,10]) {\n        for(x=[-12,0,12])\n        for(y=[-12,0,12]) {\n            if(x==0 || y==0) {\n                translate([x,y,0])\n                color(color_button)\n                cylinder(h=2.5, r=4.5, $fn=20);\n            }\n        }\n    }\n    \n    // Function buttons\n    translate([20,-15,10]) {\n        for(i=[0:3]) {\n            translate([0,i*8-12,0])\n            color(color_button)\n            cylinder(h=2.5, r=3.5, $fn=16);\n        }\n    }\n    \n    // Power button\n    translate([35,20,10]) {\n        color(color_accent)\n        cylinder(h=2.5, r=3, $fn=16);\n    }\n}\n\n// Probe connectors\nmodule bnc_connectors() {\n    // Left BNC\n    translate([-40,0,0]) {\n        color(color_metal)\n        rotate([0,90,0])\n        cylinder(h=8, r=7, $fn=32);\n        translate([0,0,4])\n        color(color_case)\n        cylinder(h=3, r=5, $fn=32);\n    }\n    \n    // Right BNC\n    translate([40,0,0]) {\n        color(color_metal)\n        rotate([0,90,0])\n        cylinder(h=8, r=7, $fn=32);\n        translate([0,0,4])\n        color(color_case)\n        cylinder(h=3, r=5, $fn=32);\n    }\n}\n\n// Ventilation slots\nmodule vents() {\n    translate([0,0,0]) {\n        for(i=[-35:5:35]) {\n            translate([i,-30,0])\n            rotate([90,0,0])\n            color(color_case)\n            cube([3,1,18], center=true);\n        }\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    for(pos=[[-35,-22],[-35,22],[35,-22],[35,22]]) {\n        translate([pos[0],pos[1],-10])\n        color([0.1,0.1,0.1])\n        cylinder(h=2, r=3, $fn=16);\n    }\n}\n\n// LED indicators\nmodule indicators() {\n    translate([-30,25,10]) {\n        color([0,1,0])\n        sphere(2, $fn=16);\n    }\n    translate([-20,25,10]) {\n        color([1,0,0])\n        sphere(2, $fn=16);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    translate([0,-30,0]) {\n        color([0.05,0.05,0.05])\n        cube([10,3,5], center=true);\n    }\n}\n\n// Assembly\nscale([scale_factor,scale_factor,scale_factor])\nunion() {\n    main_body();\n    screen();\n    buttons();\n    bnc_connectors();\n    vents();\n    feet();\n    indicators();\n    usb_port();\n}",
    "renders": true
  },
  {
    "electronic_device": "converter",
    "openscad_code": "// AC-DC Adapter (USB-C Power Converter) - Realistic Style\n// Overall dimensions: 60 x 40 x 30 mm (safe for 3D printing)\n\n// Color definitions\ncolor_plastic = [0.15, 0.15, 0.15];  // Dark matte plastic\ncolor_metal = [0.7, 0.7, 0.7];      // Brushed aluminum\ncolor_glass = [0.1, 0.3, 0.6, 0.6]; // LED indicator glass\ncolor_text = [0.05, 0.05, 0.05];    // Black text\n\n// Main body module\nmodule main_case() {\n    color(color_plastic) {\n        difference() {\n            // Main rectangular body\n            cube([60, 40, 30], center=true);\n            \n            // Ventilation slots on top\n            for (i = [-2:2]) {\n                translate([i*10, 0, 15-0.1]) \n                    cube([8, 35, 2], center=true);\n            }\n            \n            // LED indicator window\n            translate([25, 15, 15-0.1]) \n                cube([5, 3, 2], center=true);\n        }\n        \n        // Rounded edges\n        translate([0, 0, 0]) {\n            for (x = [-25, 25]) {\n                for (y = [-15, 15]) {\n                    translate([x, y, 15-10]) \n                        cylinder(h=20, r=3, center=true);\n                    translate([x, y, -15+10]) \n                        cylinder(h=20, r=3, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Prongs for US wall plug\nmodule wall_prongs() {\n    color(color_metal) {\n        union() {\n            for (x = [-6, 6]) {\n                translate([x, -20.5, 0]) \n                    cube([3.2, 6, 1.5], center=true);\n            }\n            translate([0, -20.5, 0]) \n                cube([3.2, 6, 1.5], center=true);\n        }\n    }\n}\n\n// USB-C port\nmodule usb_c_port() {\n    color(color_metal) {\n        difference() {\n            // Port housing\n            translate([0, 20.5, 0]) \n                cube([12, 5, 7], center=true);\n            \n            // Port opening\n            translate([0, 20.5+2, 0]) \n                cube([8, 3, 2.5], center=true);\n            \n            // Inner pins (simplified)\n            translate([0, 20.5+2, 0]) \n                cube([6, 0.5, 1], center=true);\n        }\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    color(color_glass) {\n        translate([25, 15, 15]) \n            cube([4.5, 2.5, 1], center=true);\n    }\n}\n\n// Model text\nmodule product_text() {\n    color(color_text) {\n        // Brand text (simplified as blocks)\n        translate([0, 0, 15+0.2]) \n            cube([20, 5, 0.5], center=true);\n        \n        // Spec text\n        translate([0, -8, 15+0.2]) \n            cube([15, 3, 0.5], center=true);\n    }\n}\n\n// Assembly\nmain_case();\nwall_prongs();\nusb_c_port();\nled_indicator();\nproduct_text();\n\n// Small feet for stability\ncolor(color_plastic) {\n    for (x = [-25, 25]) {\n        for (y = [-15, 15]) {\n            translate([x, y, -15-0.5]) \n                cylinder(h=1, r=2);\n        }\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "balancer",
    "openscad_code": "// Balancer Electronic Device - Realistic Style (Medium Complexity)\n// 3D printable handheld digital balancer with display, buttons and ports\n\n$fn = 64;\n\n// Main dimensions\ndevice_width = 75;\ndevice_height = 40;\ndevice_depth = 25;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5;\n\n// Main case\nmodule main_case() {\n    difference() {\n        // Outer shell\n        color(\"darkslategray\")\n        rounded_box(device_width, device_height, device_depth, 3);\n        \n        // Inner cavity\n        translate([0, 0, -wall_thickness])\n        rounded_box(device_width - 2*wall_thickness, \n                   device_height - 2*wall_thickness, \n                   device_depth, 2);\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(w, h, d, r) {\n    hull() {\n        translate([r, r, 0]) cylinder(h=d, r=r);\n        translate([w-r, r, 0]) cylinder(h=d, r=r);\n        translate([r, h-r, 0]) cylinder(h=d, r=r);\n        translate([w-r, h-r, 0]) cylinder(h=d, r=r);\n    }\n}\n\n// LCD display\nmodule display() {\n    translate([-device_width/2 + 8, -device_height/2 + 8, device_depth/2 + 0.1])\n    color(\"black\")\n    cube([36, 20, 0.5]);\n    \n    // Display glass\n    translate([-device_width/2 + 8.5, -device_height/2 + 8.5, device_depth/2 + 0.6])\n    color(\"royalblue\", 0.6)\n    cube([35, 19, 0.2]);\n}\n\n// Control buttons\nmodule buttons() {\n    // Power button\n    translate([device_width/2 - 12, 0, device_depth/2 + 0.1])\n    color(\"darkred\")\n    cylinder(h=1.5, r=3);\n    \n    // Mode buttons\n    for(i=[0:1]) {\n        translate([device_width/2 - 18, -10 + i*20, device_depth/2 + 0.1])\n        color(\"dimgray\")\n        cube([6, 4, 1.5], center=true);\n    }\n    \n    // Navigation pad\n    translate([0, -device_height/2 + 8, device_depth/2 + 0.1])\n    color(\"darkgray\")\n    union() {\n        cube([12, 12, 1.2], center=true);\n        rotate([0,0,45]) cube([8, 8, 1.4], center=true);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    translate([0, device_height/2 - 3, device_depth/2 - 3])\n    difference() {\n        color(\"black\")\n        cube([8, 6, 4]);\n        translate([1, 1, 1])\n        cube([6, 4, 2]);\n    }\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    translate([-device_width/2 + 5, device_height/2 - 15, 0])\n    difference() {\n        color(\"darkslategray\")\n        cube([30, 10, device_depth]);\n        \n        // Battery slot\n        translate([2, 2, wall_thickness + 1])\n        cube([26, 6, device_depth - 2*wall_thickness - 2]);\n        \n        // Cover\n        translate([15, 5, -0.1])\n        color(\"gray\")\n        cube([28, 8, 0.5]);\n    }\n}\n\n// LED indicators\nmodule leds() {\n    colors = [\"red\", \"green\", \"blue\"];\n    for(i=[0:2]) {\n        translate([-device_width/2 + 15 + i*8, device_height/2 - 5, device_depth/2 + 0.1])\n        color(colors[i])\n        cylinder(h=0.5, r=1.5);\n    }\n}\n\n// Text labels\nmodule labels() {\n    // Power symbol\n    translate([device_width/2 - 12, 5, device_depth/2 + 1.6])\n    color(\"white\")\n    rotate([90,0,0])\n    cylinder(h=0.2, r=1);\n    \n    // USB label\n    translate([0, device_height/2, device_depth/2])\n    color(\"white\")\n    rotate([90,0,0])\n    cube([6, 0.2, 2], center=true);\n}\n\n// Assembly\ntranslate([0, 0, device_depth/2])\nrotate([0, 180, 0])\nunion() {\n    main_case();\n    display();\n    buttons();\n    usb_port();\n    battery_compartment();\n    leds();\n    labels();\n}",
    "renders": true
  },
  {
    "electronic_device": "isolator",
    "openscad_code": "// Isolator Electronic Device - 3D Printable Realistic Model\n// Medium complexity OpenSCAD design for EMI isolator\n\n$fn = 30;\n\n// Colors\ncolor_metallic = [0.7, 0.7, 0.75];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_red = [0.8, 0.1, 0.1];\ncolor_yellow = [0.8, 0.8, 0.1];\ncolor_green = [0.1, 0.7, 0.1];\n\n// Main dimensions\nbase_length = 80;\nbase_width = 45;\nbase_height = 8;\ncase_height = 25;\ntotal_height = base_height + case_height;\n\n// PCB standoffs\nstandoff_height = 3;\nstandoff_diameter = 5;\n\n// Connector dimensions\nbnc_diameter = 12;\nbnc_length = 15;\nled_diameter = 3;\nled_depth = 2;\n\n// Create isolator base\nmodule isolator_base() {\n    color(color_metallic)\n    difference() {\n        // Main base block\n        cube([base_length, base_width, base_height], center=true);\n        \n        // Mounting holes\n        for(x = [base_length/2 - 10, -base_length/2 + 10])\n            for(y = [base_width/2 - 10, -base_width/2 + 10])\n                translate([x, y, -base_height/2])\n                    cylinder(h=base_height+1, d=3.5, center=true);\n    }\n}\n\n// Main case body\nmodule case_body() {\n    color(color_black)\n    translate([0, 0, base_height/2 + case_height/2])\n        cube([base_length-4, base_width-4, case_height], center=true);\n}\n\n// PCB standoffs inside\nmodule pcb_standoffs() {\n    color(color_black)\n    for(x = [base_length/2 - 15, -base_length/2 + 15])\n        for(y = [base_width/2 - 15, -base_width/2 + 15])\n            translate([x, y, base_height - standoff_height/2])\n                cylinder(h=standoff_height, d=standoff_diameter, center=true);\n}\n\n// BNC connectors\nmodule bnc_connector(x_pos, y_pos, z_pos, rotation=0) {\n    color(color_metallic)\n    rotate([0, rotation, 0])\n        translate([x_pos, y_pos, z_pos])\n        union() {\n            // Main barrel\n            cylinder(h=bnc_length, d=bnc_diameter, center=true);\n            \n            // Insulator\n            color(color_red)\n            translate([0, 0, -bnc_length/2 + 3])\n                cylinder(h=2, d=8, center=true);\n            \n            // Center pin\n            color(color_metallic)\n            translate([0, 0, -bnc_length/2 + 1])\n                cylinder(h=4, d=2, center=true);\n            \n            // Hex nut\n            rotate([0, 0, 0])\n                translate([0, 0, bnc_length/2 - 3])\n                    cylinder(h=3, d=14, $fn=6, center=true);\n        }\n}\n\n// LED indicators\nmodule led_indicator(x_pos, y_pos, z_pos, led_color) {\n    color(led_color)\n    translate([x_pos, y_pos, z_pos])\n        cylinder(h=led_depth, d=led_diameter, center=true);\n}\n\n// Ventilation slots\nmodule ventilation_slots() {\n    color(color_black)\n    difference() {\n        // Main case\n        translate([0, 0, base_height/2 + case_height/2])\n            cube([base_length-4, base_width-4, case_height], center=true);\n        \n        // Ventilation slots\n        for(i = [-3:3]) {\n            translate([i*10, 0, base_height + case_height/2])\n                cube([2, base_width, case_height-2], center=true);\n        }\n    }\n}\n\n// Label area\nmodule label_area() {\n    color([0.9, 0.9, 0.9])\n    translate([0, base_width/2 - 8, base_height + 2])\n        cube([base_length - 10, 6, 0.5], center=false);\n}\n\n// Assembly\nunion() {\n    // Base components\n    isolator_base();\n    case_body();\n    ventilation_slots();\n    pcb_standoffs();\n    \n    // Input BNC connectors\n    bnc_connector(base_length/2 - 5, 0, base_height + case_height/2, 90);\n    \n    // Output BNC connectors\n    bnc_connector(-base_length/2 + 5, 0, base_height + case_height/2, -90);\n    \n    // LED indicators\n    led_indicator(base_length/2 - 15, base_width/2 - 5, base_height + 2, color_red);\n    led_indicator(base_length/2 - 15, base_width/2 - 10, base_height + 2, color_green);\n    led_indicator(base_length/2 - 15, base_width/2 - 15, base_height + 2, color_yellow);\n    \n    // Label area\n    label_area();\n}",
    "renders": true
  },
  {
    "electronic_device": "transformer",
    "openscad_code": "// 3D-printable medium-complexity transformer toy (Generation-1 style)\n// Overall height ~70 mm, all parts printable without support\n\n// Color constants\ncolor_body = [0.15,0.35,0.6];\ncolor_windows = [0.2,0.6,0.8];\ncolor_red = [0.8,0.1,0.15];\ncolor_dark = [0.1,0.1,0.1];\ncolor_silver = [0.75,0.75,0.75];\n\n// Main assembly\nmodule transformer() {\n    union() {\n        // Torso / cab\n        color(color_body) torso();\n        \n        // Arms\n        translate([22,0,28]) rotate([0,0,180]) color(color_body) arm();\n        translate([-22,0,28]) mirror([1,0,0]) rotate([0,0,180]) color(color_body) arm();\n        \n        // Legs\n        translate([10,0,-20]) color(color_body) leg();\n        translate([-10,0,-20]) mirror([1,0,0]) color(color_body) leg();\n        \n        // Head\n        translate([0,0,50]) color(color_body) head();\n        \n        // Autobot logo on chest\n        translate([0,-25.1,40]) rotate([0,90,0]) color(color_red) autobot_logo();\n    }\n}\n\n// Torso block with windows\nmodule torso() {\n    difference() {\n        // Main cab block\n        cube([40,30,40], center=true);\n        \n        // Windshield and side windows\n        for(x=[-12,12])\n            translate([x,-15.1,10]) cube([8,2,15]);\n        \n        // Grille slot\n        translate([0,-15.1,-5]) cube([30,2,10]);\n        \n        // Head recess\n        translate([0,-10,25]) cylinder(h=20, r1=12, r2=12, center=true);\n    }\n}\n\n// Head with helmet, eyes, crest\nmodule head() {\n    union() {\n        // Helmet\n        difference() {\n            cube([18,18,22], center=true);\n            translate([0,0,5]) cube([14,14,20], center=true);\n        }\n        \n        // Face\n        color(color_dark) translate([0,8.1,0]) cube([12,1,16]);\n        \n        // Eyes\n        for(x=[-4,4])\n            color(color_windows) translate([x,8.2,3]) cube([3,0.5,5]);\n        \n        // Crest\n        color(color_red) translate([0,0,15]) cube([2,2,8]);\n    }\n}\n\n// Arm with shoulder, forearm, fist\nmodule arm() {\n    union() {\n        // Shoulder\n        translate([0,0,0]) rotate([90,0,0]) cylinder(h=12, r=7);\n        \n        // Upper arm\n        translate([0,0,-12]) rotate([90,0,0]) cylinder(h=20, r=5);\n        \n        // Elbow joint\n        translate([0,0,-24]) sphere(r=5.5);\n        \n        // Forearm / truck side\n        translate([0,0,-38]) cube([10,10,28], center=true);\n        \n        // Fist / wheel well\n        color(color_dark) translate([0,-5,-48]) rotate([0,90,0]) cylinder(h=10, r=4);\n    }\n}\n\n// Leg with thigh, knee, shin, foot\nmodule leg() {\n    union() {\n        // Thigh\n        translate([0,0,0]) rotate([90,0,0]) cylinder(h=20, r=6);\n        \n        // Knee cover\n        color(color_silver) translate([0,0,-20]) cube([12,12,6], center=true);\n        \n        // Shin / truck rear\n        translate([0,0,-33]) cube([10,10,26], center=true);\n        \n        // Foot\n        translate([0,-5,-46]) cube([16,12,8], center=true);\n        \n        // Wheel\n        color(color_dark) translate([0,5,-46]) rotate([90,0,0]) cylinder(h=12, r=6);\n    }\n}\n\n// Stylized Autobot logo (flat relief)\nmodule autobot_logo() {\n    difference() {\n        // Outer face\n        cube([12,1,12], center=true);\n        \n        // Cut-outs forming Autobot symbol\n        translate([0,0,4]) cube([2,1.2,4], center=true);\n        translate([3,0,0]) cube([2,1.2,8], center=true);\n        translate([-3,0,0]) cube([2,1.2,8], center=true);\n        translate([0,0,-4]) cube([8,1.2,2], center=true);\n    }\n}\n\n// Render the complete transformer\ntransformer();",
    "renders": true
  },
  {
    "electronic_device": "attenuator",
    "openscad_code": "// OpenSCAD Attenuator Device - Realistic Style, Medium Complexity\n\n// Overall dimensions\ndevice_length = 80;\ndevice_width = 50;\ndevice_height = 25;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main enclosure\nmodule enclosure() {\n    // Base body\n    difference() {\n        color([0.1, 0.1, 0.1])  // Dark gray plastic\n        rounded_cube([device_length, device_width, device_height], 3);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n        rounded_cube([device_length - 2*wall_thickness, \n                     device_width - 2*wall_thickness, \n                     device_height - wall_thickness], 2);\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(size, radius) {\n    minkowski() {\n        cube([size.x - 2*radius, size.y - 2*radius, size.z - 2*radius], center = true);\n        sphere(radius);\n    }\n}\n\n// Front panel with controls\nmodule front_panel() {\n    translate([0, 0, device_height/2 - 0.1])\n    color([0.15, 0.15, 0.15])\n    cube([device_length, device_width, 0.5], center = true);\n}\n\n// Display screen\nmodule display() {\n    translate([0, device_width/4, device_height/2 + 0.1])\n    color([0.05, 0.05, 0.05])\n    cube([30, 12, 0.2], center = true);\n    \n    // Screen content\n    translate([0, device_width/4, device_height/2 + 0.4])\n    color([0, 0.8, 0])  // Green LCD\n    cube([28, 10, 0.1], center = true);\n}\n\n// Rotary knobs\nmodule knobs() {\n    // Left knob (input)\n    translate([-device_length/3, -device_width/4, device_height/2 + 1])\n    knob();\n    \n    // Right knob (output)\n    translate([device_length/3, -device_width/4, device_height/2 + 1])\n    knob();\n}\n\nmodule knob() {\n    // Base\n    cylinder(h = 3, r = 5, $fn = 32);\n    \n    // Knurled grip\n    translate([0, 0, 3])\n    cylinder(h = 5, r1 = 5, r2 = 4, $fn = 24);\n    \n    // Indicator line\n    rotate([90, 0, 0])\n    translate([0, -5, 3])\n    color([1, 0, 0])\n    cube([0.5, 2, 0.5]);\n}\n\n// BNC connectors\nmodule bnc_connectors() {\n    // Input connector\n    translate([-device_length/2 + 8, 0, 0])\n    rotate([0, 90, 0])\n    bnc_connector();\n    \n    // Output connector\n    translate([device_length/2 - 8, 0, 0])\n    rotate([0, -90, 0])\n    bnc_connector();\n}\n\nmodule bnc_connector() {\n    // Body\n    color([0.5, 0.5, 0.5])  // Silver\n    cylinder(h = 8, r = 6, $fn = 32);\n    \n    // Sleeve\n    translate([0, 0, 8])\n    cylinder(h = 3, r = 7, $fn = 32);\n    \n    // Pin\n    translate([0, 0, -3])\n    color([0.8, 0.8, 0.8])\n    cylinder(h = 3, r = 1.5, $fn = 16);\n}\n\n// Power LED indicator\nmodule power_led() {\n    translate([device_length/2 - 12, device_width/2 - 5, device_height/2 + 0.5])\n    color([0.8, 0, 0])\n    cylinder(h = 1, r = 2, $fn = 16);\n}\n\n// Ventilation slots\nmodule ventilation() {\n    for(i = [-3:1:3]) {\n        translate([i*10, device_width/2 - 1, 0])\n        cube([1.5, 2, device_height - 4]);\n    }\n}\n\n// Labels\nmodule labels() {\n    // Input label\n    translate([-device_length/2 + 8, -8, device_height/2 + 0.5])\n    color([1, 1, 1])\n    linear_extrude(0.2)\n    text(\"IN\", size = 3, halign = \"center\");\n    \n    // Output label\n    translate([device_length/2 - 8, -8, device_height/2 + 0.5])\n    color([1, 1, 1])\n    linear_extrude(0.2)\n    text(\"OUT\", size = 3, halign = \"center\");\n}\n\n// Rubber feet\nmodule feet() {\n    foot_positions = [\n        [-device_length/2 + 5, -device_width/2 + 5],\n        [device_length/2 - 5, -device_width/2 + 5],\n        [-device_length/2 + 5, device_width/2 - 5],\n        [device_length/2 - 5, device_width/2 - 5]\n    ];\n    \n    for(pos = foot_positions) {\n        translate([pos[0], pos[1], -device_height/2 + 1])\n        color([0.1, 0.1, 0.1])\n        cylinder(h = 2, r = 3, $fn = 16);\n    }\n}\n\n// Main assembly\nunion() {\n    enclosure();\n    front_panel();\n    display();\n    knobs();\n    bnc_connectors();\n    power_led();\n    \n    // Ventilation (cut into top)\n    translate([0, 0, device_height/2 - wall_thickness])\n    ventilation();\n    \n    labels();\n    feet();\n}",
    "renders": true
  },
  {
    "electronic_device": "pad",
    "openscad_code": "// Realistic Pad Electronic Device (Medium Complexity)\n// A tablet-style device with screen, buttons, ports and camera\n\n// Main dimensions\ndevice_width = 120;\ndevice_height = 80;\ndevice_thickness = 6;\ncorner_radius = 5;\nwall_thickness = 1.5;\n\n// Colors\ndevice_color = [0.1, 0.1, 0.1];  // Dark gray\nscreen_color = [0.05, 0.05, 0.05];  // Black\nbutton_color = [0.3, 0.3, 0.3];  // Medium gray\ncamera_color = [0.05, 0.05, 0.05];  // Black\nport_color = [0.2, 0.2, 0.2];  // Dark gray\n\nmodule rounded_cube(size, radius, center = false) {\n    x = size.x; y = size.y; z = size.z;\n    translate(center ? [-x/2, -y/2, -z/2] : [0, 0, 0]) {\n        hull() {\n            translate([radius, radius, 0]) cylinder(h=z, r=radius);\n            translate([x-radius, radius, 0]) cylinder(h=z, r=radius);\n            translate([radius, y-radius, 0]) cylinder(h=z, r=radius);\n            translate([x-radius, y-radius, 0]) cylinder(h=z, r=radius);\n        }\n        hull() {\n            translate([0, radius, radius]) rotate([0, 90, 0]) cylinder(h=x, r=radius);\n            translate([0, y-radius, radius]) rotate([0, 90, 0]) cylinder(h=x, r=radius);\n            translate([0, radius, z-radius]) rotate([0, 90, 0]) cylinder(h=x, r=radius);\n            translate([0, y-radius, z-radius]) rotate([0, 90, 0]) cylinder(h=x, r=radius);\n        }\n        hull() {\n            translate([radius, 0, radius]) rotate([90, 0, 0]) cylinder(h=y, r=radius);\n            translate([x-radius, 0, radius]) rotate([90, 0, 0]) cylinder(h=y, r=radius);\n            translate([radius, 0, z-radius]) rotate([90, 0, 0]) cylinder(h=y, r=radius);\n            translate([x-radius, 0, z-radius]) rotate([90, 0, 0]) cylinder(h=y, r=radius);\n        }\n    }\n}\n\n// Main device body\ncolor(device_color) {\n    difference() {\n        rounded_cube([device_width, device_height, device_thickness], corner_radius, true);\n        \n        // Hollow out the inside\n        translate([0, 0, -device_thickness/2 + wall_thickness/2]) {\n            rounded_cube([\n                device_width - 2*wall_thickness, \n                device_height - 2*wall_thickness, \n                device_thickness - wall_thickness\n            ], corner_radius - wall_thickness, true);\n        }\n    }\n}\n\n// Screen area\ncolor(screen_color) {\n    translate([0, 0, -device_thickness/2 + 0.1]) {\n        rounded_cube([\n            device_width * 0.9, \n            device_height * 0.8, \n            0.2\n        ], 3, true);\n    }\n}\n\n// Home button\ncolor(button_color) {\n    translate([0, -device_height/2 + 8, -device_thickness/2 + 0.1]) {\n        cylinder(h=0.3, r=4, $fn=32);\n    }\n}\n\n// Power button on top\ncolor(button_color) {\n    translate([device_width/2 - 10, 0, -device_thickness/2 + 2]) {\n        rotate([90, 0, 0]) cylinder(h=6, r=1.5, $fn=16);\n    }\n}\n\n// Volume buttons on side\nfor (i = [0:1]) {\n    color(button_color) {\n        translate([device_width/2 - 10, -5 + i*8, -device_thickness/2 + 2]) {\n            rotate([90, 0, 0]) cylinder(h=6, r=1.5, $fn=16);\n        }\n    }\n}\n\n// Camera on front\ncolor(camera_color) {\n    translate([device_width/2 - 15, device_height/2 - 10, -device_thickness/2 + 0.1]) {\n        cylinder(h=0.5, r=2, $fn=16);\n    }\n}\n\n// Rear camera\ncolor(camera_color) {\n    translate([device_width/2 - 15, device_height/2 - 10, device_thickness/2 - 0.5]) {\n        difference() {\n            cylinder(h=0.5, r=3, $fn=16);\n            translate([0, 0, -0.1]) cylinder(h=1, r=1.5, $fn=16);\n        }\n    }\n}\n\n// Charging port on bottom\ncolor(port_color) {\n    translate([0, device_height/2 - 3, -device_thickness/2 + 0.5]) {\n        cube([8, 2, 1], center=true);\n    }\n}\n\n// Speaker holes on bottom\nfor (i = [-3:3]) {\n    color([0.15, 0.15, 0.15]) {\n        translate([i*5, device_height/2 - 2, -device_thickness/2 + 0.1]) {\n            cylinder(h=0.5, r=0.5, $fn=8);\n        }\n    }\n}\n\n// LED indicator near camera\ncolor([0.8, 0, 0]) {\n    translate([device_width/2 - 10, device_height/2 - 5, -device_thickness/2 + 0.1]) {\n        sphere(r=0.5, $fn=12);\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "diode",
    "openscad_code": "// Realistic 3D printable diode model, medium complexity (~85 mm long)\n// Main body: glass tube with axial leads and realistic band marking\n\n// Color constants -----------------------------------------------------------\ncolor_lead = \"Silver\";\ncolor_glass = \"LightSkyBlue\";\ncolor_band = \"White\";\n\n// Dimensions (in mm) ---------------------------------------------------------\nD_lead = 1.0;           // wire diameter\nL_lead = 20;            // exposed lead length\nD_body = 5.6;           // standard DO-41 glass body\nL_body = 9.0;           // glass length\nband_w = 1.2;           // cathode band width\nband_t = 0.15;          // band thickness (paint layer)\n\n// Build the complete diode ----------------------------------------------------\nmodule diode() {\n    // Left lead (cathode)\n    color(color_lead) translate([-L_lead, 0, 0]) cylinder(h = L_lead, d = D_lead, $fn = 16);\n\n    // Right lead (anode)\n    color(color_lead) translate([L_body, 0, 0]) cylinder(h = L_lead, d = D_lead, $fn = 16);\n\n    // Glass body -----------------------------------------------------------\n    color(color_glass) difference() {\n        // Main glass cylinder\n        cylinder(h = L_body, d = D_body, center = false, $fn = 60);\n\n        // Internal hollow space for realism (optional, saves material)\n        translate([0, 0, -0.1])\n            cylinder(h = L_body + 0.2, d = D_body - 1.2, center = false, $fn = 60);\n    }\n\n    // Cathode identification band ------------------------------------------\n    color(color_band)\n        translate([L_body - 2.5 - band_w/2, 0, D_body/2 + band_t/2])\n        cube([band_w, D_body + 0.1, band_t], center = true);\n\n    // Realistic rounded ends on glass (domes) -------------------------------\n    color(color_glass) {\n        translate([0, 0, 0])\n            sphere(d = D_body, $fn = 60);\n        translate([L_body, 0, 0])\n            sphere(d = D_body, $fn = 60);\n    }\n}\n\n// Optional stand for better print orientation -------------------------------\nmodule stand() {\n    color(\"Gray\")\n        difference() {\n            translate([-5, -3, -5]) cube([L_body + 10, 6, 5]);  // base\n            translate([-4, -2.5, -4.9]) cube([L_body + 8, 5, 5]);  // hollow\n        }\n}\n\n// Render the assembly --------------------------------------------------------\ndiode();           // Uncomment next line to add stand\n// translate([0, 0, -5]) rotate([0, 90, 0]) diode();",
    "renders": true
  },
  {
    "electronic_device": "capacitor",
    "openscad_code": "// Electrolytic Capacitor – 3D-printable, realistic style, medium complexity\n// Overall height ≈ 70 mm, diameter ≈ 22 mm (22 mm × 3.18 ≈ 70 mm)\n\n$fn = 64;\n\n// ---- Color constants ----\ncap_body_color   = [0.15, 0.15, 0.15];      // matte black\ncap_sleeve_color = [0.9, 0.05, 0.05];       // deep red sleeve\nlead_color       = [0.75, 0.75, 0.75];      // tinned copper\nvent_color       = [0.25, 0.25, 0.25];      // dark grey vent score\n\n// ---- Main module ----\nmodule electrolytic_capacitor() {\n    // Overall scale factor – final ≈ 70 mm tall\n    scale(3.18)\n    union() {\n        // Aluminium can body\n        color(cap_body_color)\n        cylinder(h = 20, d = 22, center = true);\n\n        // Insulating red PET sleeve over the body\n        color(cap_sleeve_color)\n        difference() {\n            cylinder(h = 18.5, d = 22.2, center = true);  // sleeve is slightly thicker\n            cylinder(h = 19.5, d = 21.8, center = true);  // hollow inside\n        }\n\n        // Negative stripe indicator printed on sleeve\n        translate([0, 11.3, 0])\n        rotate([0, 90, 0])\n        color([0, 0, 0])\n        for(i = [-7:2:7])\n            translate([i*1.5, 0, 0])\n            cube([1, 0.4, 18.5], center = true);\n\n        // Top pressure-relief vent (cross score)\n        color(vent_color)\n        translate([0, 0, 10.2])\n        linear_extrude(height = 0.5)\n        intersection() {\n            circle(d = 18);\n            union() {\n                square([18, 1.2], center = true);\n                square([1.2, 18], center = true);\n            }\n        }\n\n        // Bottom plastic base disk (isolates leads)\n        color([0.1, 0.1, 0.1])\n        translate([0, 0, -10.5])\n        cylinder(h = 2, d = 22, center = true);\n\n        // Radial leads\n        lead_r = 0.8;\n        lead_h = 12;\n        color(lead_color) {\n            translate([ 4.5, 0, -11.5 - lead_h/2])\n                cylinder(h = lead_h, r = lead_r, center = true);\n            translate([-4.5, 0, -11.5 - lead_h/2])\n                cylinder(h = lead_h, r = lead_r, center = true);\n        }\n    }\n}\n\nelectrolytic_capacitor();",
    "renders": true
  },
  {
    "electronic_device": "inductor",
    "openscad_code": "// Realistic 3D printable inductor model\n// Through-hole axial inductor with 10mm diameter, 20mm length\n// Includes wire leads, ferrite core, and copper windings\n\n// Color definitions\ncolor_core = [0.4, 0.4, 0.4];      // Dark gray ferrite\ncolor_wire = [0.8, 0.5, 0.2];      // Copper wire\ncolor_coating = [0.1, 0.1, 0.1];   // Black epoxy coating\ncolor_leads = [0.7, 0.7, 0.7];     // Silver leads\n\n// Main parameters\ninductor_diameter = 12;      // Overall diameter with coating\ncore_diameter = 8;           // Ferrite core diameter\ninductor_length = 20;        // Body length\nwire_diameter = 0.5;         // Copper wire thickness\nlead_diameter = 1.0;         // Lead wire thickness\nlead_length = 15;            // Exposed lead length\nwindings = 20;               // Number of wire loops\ncoating_thickness = 1;       // Epoxy coating thickness\n\nmodule ferrite_core() {\n    color(color_core)\n    cylinder(h=inductor_length, d=core_diameter, $fn=32);\n}\n\nmodule copper_windings() {\n    color(color_wire) {\n        for (i = [0:windings-1]) {\n            rotate([0, 90, i * (360/windings)])\n            translate([0, core_diameter/2 + wire_diameter/2, 0])\n            rotate([90, 0, 0])\n            torus(wire_diameter/2, inductor_length/2 - 2);\n        }\n    }\n}\n\nmodule torus(r, R) {\n    rotate_extrude($fn=16)\n    translate([R, 0, 0])\n    circle(r=r, $fn=16);\n}\n\nmodule epoxy_coating() {\n    difference() {\n        color(color_coating)\n        cylinder(h=inductor_length + 2, d=inductor_diameter, $fn=32);\n        \n        // Hollow out for core and windings\n        translate([0, 0, -1])\n        cylinder(h=inductor_length + 4, d=core_diameter + wire_diameter*2 + 0.5, $fn=32);\n    }\n}\n\nmodule lead_wire(side) {\n    color(color_leads) {\n        translate([0, 0, side * (inductor_length/2 + lead_length/2)])\n        cylinder(h=lead_length, d=lead_diameter, $fn=16);\n        \n        // Lead bend\n        translate([0, side * lead_length/2, side * (inductor_length/2 + lead_length)])\n        rotate([90, 0, 0])\n        cylinder(h=lead_length/2, d=lead_diameter, $fn=16);\n    }\n}\n\nmodule marking_band() {\n    color([1, 1, 1])\n    translate([0, inductor_diameter/2, inductor_length/2 - 2])\n    cube([0.5, 0.1, 4], center=true);\n}\n\n// Assembly\nunion() {\n    // Central core\n    ferrite_core();\n    \n    // Copper windings around core\n    copper_windings();\n    \n    // Protective epoxy coating\n    epoxy_coating();\n    \n    // Lead wires\n    lead_wire(-1);  // Bottom lead\n    lead_wire(1);   // Top lead\n    \n    // Identification band\n    marking_band();\n}",
    "renders": true
  },
  {
    "electronic_device": "resistor",
    "openscad_code": "// Realistic 3D printable resistor with color bands and leads\n// Overall length ~80 mm, diameter ~12 mm\n\n// Basic parameters\n$fn = 30;\nbody_length = 60;\nbody_diameter = 12;\nlead_diameter = 1.2;\nlead_length = 15;\nband_width = 2.2;\nband_gap = 1.0;\nwall = 1.5;\n\n// Resistor color code (4-band 1 kΩ: brown-black-red-gold)\ncolors = [\n    [0.6, 0.3, 0.0],  // brown (1)\n    [0.2, 0.2, 0.2],  // black (0)\n    [1.0, 0.0, 0.0],  // red (×100)\n    [0.9, 0.7, 0.2]   // gold (±5 %)\n];\n\n// Main body\nmodule resistor_body() {\n    difference() {\n        // Solid cylinder\n        color([0.7, 0.45, 0.25])  // beige body\n        cylinder(h = body_length, d = body_diameter, center = true);\n\n        // Hollow center for printability\n        color([0.7, 0.45, 0.25])\n        cylinder(h = body_length + 1, d = body_diameter - 2 * wall, center = true);\n    }\n}\n\n// Color band\nmodule color_band(pos, col) {\n    translate([pos, 0, 0])\n    rotate([0, 90, 0])\n    color(col)\n    cylinder(h = band_width, d = body_diameter + 0.1, center = true);\n}\n\n// All color bands\nmodule bands() {\n    band_start = -(body_length / 2) + 5;\n    for (i = [0 : len(colors) - 1]) {\n        color_band(band_start + i * (band_width + band_gap), colors[i]);\n    }\n}\n\n// Lead wire\nmodule lead(end) {\n    translate([end, 0, 0])\n    color([0.7, 0.7, 0.7])\n    cylinder(h = lead_length, d = lead_diameter);\n}\n\n// Lead termination cup\nmodule cup(end) {\n    translate([end, 0, 0])\n    difference() {\n        color([0.5, 0.5, 0.5])\n        cylinder(h = 2, d = body_diameter * 0.8);\n\n        color([0.5, 0.5, 0.5])\n        cylinder(h = 3, d = body_diameter * 0.5);\n    }\n}\n\n// Assembly\nunion() {\n    resistor_body();\n    bands();\n    cup(-body_length / 2 - 1);\n    cup(body_length / 2 + 1);\n    lead(-body_length / 2 - lead_length);\n    lead(body_length / 2 + lead_length);\n}",
    "renders": true
  },
  {
    "electronic_device": "transistor",
    "openscad_code": "// Realistic 3D-printable TO-220 NPN transistor model\n// ~65 mm tall, 10 mm thick, 25 mm wide – fits most FDM printers\n\n// Color definitions\ncolor_body = [0.15,0.15,0.15];      // Black epoxy package\ncolor_legs = [0.75,0.75,0.75];    // Tinned copper leads\ncolor_tab  = [0.6,0.6,0.6];       // Nickel-plated metal tab\ncolor_mark = [0.9,0.9,0.9];       // White silkscreen\n\n// Overall scale factor (all dims in mm)\nscale = 1;\n\n// Transistor body (epoxy package)\nmodule transistor_body() {\n    color(color_body)\n    union() {\n        // Main rectangular body\n        translate([0,0,10])\n        cube([15,10,20], center=true);\n\n        // Rounded top – two half-cylinders\n        translate([0,0,20])\n        rotate([90,0,0])\n        cylinder(h=15, d=10, center=true, $fn=40);\n    }\n}\n\n// Metal heatsink tab\nmodule heatsink_tab() {\n    color(color_tab)\n    difference() {\n        // Main tab\n        translate([7.5,0,10])\n        cube([3,12,20], center=true);\n\n        // Mounting hole Ø3.2 mm\n        translate([7.5,0,22])\n        rotate([90,0,0])\n        cylinder(h=4, d=3.2, center=true, $fn=20);\n    }\n}\n\n// Bent leads (emitter, base, collector)\nmodule leads() {\n    color(color_legs)\n    for (i=[-1:1]) {\n        translate([-5.5+2.75*i, 0, 0])\n        union() {\n            // Vertical pin\n            cylinder(h=10, d=0.9, center=false, $fn=12);\n\n            // 90° bend\n            translate([0,0,10])\n            rotate([90,0,0])\n            translate([0,0,0])\n            cylinder(h=12, d=0.9, center=false, $fn=12);\n        }\n    }\n}\n\n// Silkscreen markings\nmodule markings() {\n    color(color_mark)\n    translate([0,5.5,20.1]) // Slightly above surface\n    linear_extrude(height=0.1)\n    text(\"2N2222\", size=2, halign=\"center\", valign=\"center\");\n}\n\n// Assembly\nmodule transistor() {\n    scale([scale,scale,scale])\n    union() {\n        transistor_body();\n        heatsink_tab();\n        leads();\n        markings();\n    }\n}\n\ntransistor();",
    "renders": true
  },
  {
    "electronic_device": "opamp",
    "openscad_code": "// DIP-8 Operational Amplifier (LM358 style)\n// Overall size: ~20mm x 6mm x 5mm, 3D-printable with 0.4mm walls\n\n// Color constants\n$fa = 1;\n$fs = 0.4;\n\n// Main plastic package\nmodule opamp_body() {\n    color([0.1, 0.1, 0.1])  // Black epoxy\n    difference() {\n        // Main rectangular body\n        translate([0, 0, 2.5])\n            cube([9.5, 6.35, 5], center=true);\n        \n        // Notch on top for pin-1 identification\n        translate([0, -3.2, 5.1])\n            cube([2.5, 0.8, 0.3], center=true);\n        \n        // Mold mark recesses (typical DIP features)\n        translate([3.5, 0, 2.5])\n            cube([2, 0.3, 0.2], center=true);\n        translate([-3.5, 0, 2.5])\n            cube([2, 0.3, 0.2], center=true);\n    }\n}\n\n// Pin header\nmodule pins() {\n    color([0.7, 0.7, 0.7])  // Tin-plated leads\n    for(i=[-3.5:1:3.5]) {\n        translate([i*1.27, 0, 0])\n            pin();\n    }\n}\n\n// Single pin geometry\nmodule pin() {\n    union() {\n        // Vertical part inside package\n        translate([0, 0, 1.1])\n            cube([0.45, 0.25, 2.2], center=true);\n        \n        // Bend radius\n        translate([0, 1.2, 0])\n            rotate([90, 0, 0])\n                cylinder(h=0.25, r=0.45, center=true);\n        \n        // Horizontal lead\n        translate([0, 2.45, 0])\n            cube([0.45, 2.5, 0.25], center=true);\n        \n        // Lead tip taper\n        translate([0, 3.85, 0])\n            cylinder(h=0.8, r1=0.225, r2=0.1, center=true);\n    }\n}\n\n// Text marking on top\nmodule markings() {\n    color([0.9, 0.9, 0.9])\n    translate([0, 0, 5.15])\n    linear_extrude(height=0.1)\n    text(\"LM358N\", size=1.2, halign=\"center\", valign=\"center\", font=\"DejaVu Sans:style=Bold\");\n}\n\n// Pin-1 indicator dot\nmodule pin1_dot() {\n    color([0.9, 0.1, 0.1])\n    translate([-4.75, -2.2, 5.1])\n    sphere(d=0.6);\n}\n\n// Assembly\nopamp_body();\npins();\nmarkings();\npin1_dot();",
    "renders": true
  },
  {
    "electronic_device": "dac",
    "openscad_code": "// Realistic DAC 3D Printable Model (Medium Complexity)\n// Approximate size: 80mm x 60mm x 25mm\n\n// Main colors\nDAC_COLOR = \"DarkSlateGray\";\nSCREEN_COLOR = \"Black\";\nBUTTON_COLOR = \"Silver\";\nLED_COLOR = \"Red\";\nGOLD_COLOR = \"Gold\";\n\n// Wall thickness for 3D printing\nWALL = 1.5;\n\nmodule main_body() {\n    color(DAC_COLOR)\n    difference() {\n        // Main enclosure\n        cube([80, 60, 25], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n        cube([77, 57, 23], center=true);\n        \n        // Ventilation holes on top\n        for(x = [-30, -20, -10, 0, 10, 20, 30])\n            translate([x, 0, 12.5])\n            cylinder(h=3, d=3, center=true);\n    }\n}\n\nmodule front_panel() {\n    translate([0, -30, 0])\n    difference() {\n        color(DAC_COLOR)\n        cube([76, 2, 23], center=true);\n        \n        // Headphone jack\n        translate([-25, 0, -5])\n        rotate([0, 90, 0])\n        cylinder(h=3, d=6.5);\n        \n        // RCA outputs (left/right)\n        translate([-10, 0, -5])\n        rotate([0, 90, 0])\n        cylinder(h=3, d=8);\n        translate([10, 0, -5])\n        rotate([0, 90, 0])\n        cylinder(h=3, d=8);\n        \n        // USB-C port\n        translate([25, 0, -5])\n        rotate([0, 90, 0])\n        cube([8, 3, 3], center=true);\n    }\n}\n\nmodule back_panel() {\n    translate([0, 30, 0])\n    difference() {\n        color(DAC_COLOR)\n        cube([76, 2, 23], center=true);\n        \n        // Power input\n        translate([0, 0, 5])\n        rotate([0, 90, 0])\n        cylinder(h=3, d=5.5);\n    }\n}\n\nmodule top_controls() {\n    // OLED display\n    translate([0, -10, 13])\n    color(SCREEN_COLOR)\n    cube([30, 15, 0.5], center=true);\n    \n    // Volume knob\n    translate([25, 0, 13])\n    union() {\n        color(BUTTON_COLOR)\n        cylinder(h=3, d=12, center=true);\n        color(GOLD_COLOR)\n        translate([0, 0, 1.5])\n        cylinder(h=0.5, d=10, center=true);\n    }\n    \n    // Input selector buttons\n    for(i = [0:2]) {\n        translate([-25 + i*10, 10, 13])\n        color(BUTTON_COLOR)\n        cube([6, 6, 0.5], center=true);\n    }\n    \n    // Status LEDs\n    translate([-30, 20, 13])\n    color(LED_COLOR)\n    cylinder(h=0.5, d=3, center=true);\n    translate([-20, 20, 13])\n    color(\"Green\")\n    cylinder(h=0.5, d=3, center=true);\n}\n\nmodule feet() {\n    // Rubber feet at corners\n    for(x = [-35, 35])\n        for(y = [-25, 25])\n            translate([x, y, -13])\n            color(\"Black\")\n            cylinder(h=2, d=5);\n}\n\n// Logo placeholder\nmodule logo() {\n    translate([0, 0, 14])\n    rotate([0, 0, 0])\n    linear_extrude(height=0.3)\n    text(\"DAC\", size=5, halign=\"center\", valign=\"center\");\n}\n\n// Assembly\nmain_body();\nfront_panel();\nback_panel();\ntop_controls();\nfeet();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "adc",
    "openscad_code": "// Realistic 3D printable ADC (Analog-to-Digital Converter) module\n// Dimensions: 60mm x 35mm x 15mm\n\n// Main body dimensions\nbody_w = 60;\nbody_d = 35;\nbody_h = 15;\n\n// PCB color\npcb_color = \"#006400\";\n\n// Screwhole positions\nscrew_offset = 2.5;\nscrew_r = 1.2;\n\n// Main PCB base\nmodule pcb_base() {\n    color(pcb_color)\n    difference() {\n        // Main board\n        translate([0, 0, body_h/2])\n            cube([body_w, body_d, body_h], center=true);\n        \n        // Mounting holes\n        for (x = [-1, 1])\n            for (y = [-1, 1])\n                translate([x*(body_w/2 - screw_offset - screw_r), \n                          y*(body_d/2 - screw_offset - screw_r), \n                          0])\n                    cylinder(h=body_h+2, r=screw_r, center=true);\n    }\n}\n\n// ADC chip (central IC)\nmodule adc_chip() {\n    color(\"#333333\")\n    translate([0, 0, body_h])\n        cube([12, 12, 2], center=true);\n}\n\n// Pin headers\nmodule pin_header(x_pos, y_pos, pins) {\n    color(\"#C0C0C0\")\n    translate([x_pos, y_pos, body_h + 1.5])\n        cube([pins * 2.54 + 1.5, 2.5, 5.5], center=true);\n    \n    // Individual pins\n    for (i = [0:pins-1]) {\n        translate([x_pos + (i - (pins-1)/2) * 2.54, y_pos, body_h + 4.25])\n            cylinder(h=3, r=0.3, center=true);\n    }\n}\n\n// Voltage regulator\nmodule regulator() {\n    color(\"#666666\")\n    translate([-15, 10, body_h + 0.5])\n        cube([8, 6, 3], center=true);\n}\n\n// Decoupling capacitors\nmodule capacitor(x, y) {\n    color(\"#C0C0C0\")\n    translate([x, y, body_h + 1])\n        cylinder(h=5, r=1.5, center=true);\n    \n    color(\"#CD853F\")\n    translate([x, y, body_h + 3.5])\n        cylinder(h=2, r=2, center=true);\n}\n\n// Reference voltage source\nmodule vref_chip() {\n    color(\"#8B4513\")\n    translate([20, 0, body_h + 0.5])\n        cube([6, 5, 2], center=true);\n}\n\n// Silkscreen labels\nmodule silkscreen_label(text, x, y, angle=0) {\n    color(\"#FFFFFF\")\n    translate([x, y, body_h + 0.1])\n    rotate([0, 0, angle])\n        cube([8, 1, 0.2], center=true);\n}\n\n// Assembly\nunion() {\n    // Base PCB\n    pcb_base();\n    \n    // Main ADC chip\n    adc_chip();\n    \n    // Analog input header (right side)\n    pin_header(body_w/2 - 3, 0, 4);\n    \n    // Digital output header (left side)\n    pin_header(-body_w/2 + 3, 0, 8);\n    \n    // Voltage regulator\n    regulator();\n    \n    // Decoupling capacitors\n    capacitor(-8, 10);\n    capacitor(8, -10);\n    capacitor(15, 10);\n    \n    // Reference voltage\n    vref_chip();\n    \n    // Status LED\n    color(\"#FF0000\")\n    translate([0, -body_d/3, body_h + 1])\n        cylinder(h=1.5, r=1, center=true);\n    \n    // Silkscreen markings\n    silkscreen_label(\"VIN\", body_w/2 - 8, 5);\n    silkscreen_label(\"GND\", body_w/2 - 8, 2);\n    silkscreen_label(\"VREF\", body_w/2 - 8, -2);\n    silkscreen_label(\"AIN\", body_w/2 - 8, -5);\n    \n    silkscreen_label(\"D0\", -body_w/2 + 8, 5);\n    silkscreen_label(\"D1\", -body_w/2 + 8, 2);\n    silkscreen_label(\"D2\", -body_w/2 + 8, -2);\n    silkscreen_label(\"D3\", -body_w/2 + 8, -5);\n    silkscreen_label(\"D4\", -body_w/2 + 8, -8);\n    silkscreen_label(\"D5\", -body_w/2 + 8, -11);\n    silkscreen_label(\"D6\", -body_w/2 + 8, -14);\n    silkscreen_label(\"D7\", -body_w/2 + 8, -17);\n    \n    // ADC model number\n    color(\"#FFFFFF\")\n    translate([0, 0, body_h + 1.1])\n        cube([10, 3, 0.2], center=true);\n}",
    "renders": true
  },
  {
    "electronic_device": "codec",
    "openscad_code": "// Codec Electronic Device - Realistic Style, Medium Complexity\n// Dimensions: 80mm x 50mm x 25mm\n\n// Main body parameters\nbody_width = 80;\nbody_height = 50;\nbody_depth = 25;\nwall_thickness = 2;\n\n// Front panel features\nscreen_width = 35;\nscreen_height = 15;\nscreen_depth = 1;\n\nbutton_diameter = 5;\nbutton_height = 2;\nbutton_spacing = 8;\n\n// Rear panel features\njack_diameter = 6;\njack_depth = 8;\nusb_width = 12;\nusb_height = 4;\nusb_depth = 10;\n\n// LED indicators\nled_diameter = 3;\nled_depth = 1;\n\n// Cooling vents\nvent_width = 1;\nvent_height = 10;\nvent_spacing = 3;\nnum_vents = 8;\n\n// Main body module\nmodule main_body() {\n    difference() {\n        // Outer shell\n        color(\"darkslategray\")\n        cube([body_width, body_height, body_depth], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness/2])\n            cube([body_width-wall_thickness*2, body_height-wall_thickness*2, body_depth], center=true);\n    }\n}\n\n// Front panel with screen and buttons\nmodule front_panel() {\n    translate([0, body_height/2, 0])\n    difference() {\n        // Panel surface\n        color(\"black\")\n        cube([body_width-wall_thickness*2, wall_thickness, body_depth-wall_thickness*2], center=true);\n        \n        // Screen cutout\n        translate([0, 0, body_depth/2-screen_depth/2])\n            cube([screen_width, wall_thickness+0.1, screen_depth], center=true);\n    }\n    \n    // Screen display\n    translate([0, body_height/2, body_depth/2-screen_depth/2])\n        color(\"lime\")\n        cube([screen_width-2, 0.1, screen_height-2], center=true);\n    \n    // Control buttons\n    for(i = [-1, 0, 1]) {\n        translate([i * button_spacing, body_height/2 + button_height/2, body_depth/2 - 10])\n            color(\"dimgray\")\n            cylinder(h=button_height, d=button_diameter, $fn=20);\n    }\n}\n\n// Rear panel with connectors\nmodule rear_panel() {\n    translate([0, -body_height/2, 0])\n    difference() {\n        // Panel surface\n        color(\"black\")\n        cube([body_width-wall_thickness*2, wall_thickness, body_depth-wall_thickness*2], center=true);\n        \n        // Audio jacks\n        for(i = [-1, 1]) {\n            translate([i * 15, 0, body_depth/2-jack_depth/2])\n                rotate([90, 0, 0])\n                    cylinder(h=wall_thickness+0.1, d=jack_diameter, $fn=20);\n        }\n        \n        // USB port\n        translate([0, 0, body_depth/2-usb_depth/2])\n            cube([usb_width, wall_thickness+0.1, usb_depth], center=true);\n    }\n}\n\n// LED indicators on top\nmodule led_indicators() {\n    for(i = [-1, 0, 1]) {\n        translate([i * 10, 0, body_depth/2-led_depth/2])\n        difference() {\n            color(\"darkgray\")\n            cylinder(h=led_depth, d=led_diameter+2, $fn=20);\n            translate([0, 0, -0.1])\n                color(\"red\")\n                cylinder(h=led_depth+0.2, d=led_diameter, $fn=20);\n        }\n    }\n}\n\n// Side ventilation slots\nmodule side_vents() {\n    for(i = [0:num_vents-1]) {\n        translate([-body_width/2+5+i*(vent_width+vent_spacing), 0, 0])\n            rotate([0, 90, 0])\n                cube([vent_width, vent_height, wall_thickness*2], center=true);\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * 30, y * 20, -body_depth/2])\n                color(\"black\")\n                cylinder(h=1, d=5, $fn=20);\n        }\n    }\n}\n\n// Assembly\nmain_body();\nfront_panel();\nrear_panel();\nled_indicators();\n\n// Left side vents\ntranslate([0, body_height/2-vent_height/2, 0])\n    side_vents();\n\n// Right side vents\ntranslate([0, -body_height/2+vent_height/2, 0])\n    mirror([0, 1, 0])\n        side_vents();\n\nfeet();",
    "renders": true
  },
  {
    "electronic_device": "dsp",
    "openscad_code": "// DSP Audio Interface - Realistic Style\n// 19×12×5 cm desktop unit\n\n$fn = 36;\n\n// Main colors\ncolor_gray = [0.7, 0.7, 0.7];\ncolor_black = [0.05, 0.05, 0.05];\ncolor_dark = [0.15, 0.15, 0.15];\ncolor_blue = [0.1, 0.3, 0.8];\ncolor_green = [0, 0.8, 0.2];\ncolor_red = [0.8, 0, 0];\n\nmodule main_body() {\n    color(color_gray)\n    difference() {\n        rounded_box([95, 65, 25], 3);\n        \n        // Top vents\n        for(y = [-25:10:25])\n            translate([0, y, 11.5])\n            cube([85, 3, 3], center=true);\n    }\n}\n\nmodule rounded_box(size, r) {\n    translate([0, 0, size.z/2])\n    minkowski() {\n        cube([size.x-2*r, size.y-2*r, size.z-2*r], center=true);\n        sphere(r);\n    }\n}\n\nmodule front_panel() {\n    translate([0, 32.5, 12.5])\n    color(color_dark)\n    difference() {\n        cube([95, 1, 25], center=true);\n        \n        // LED meters\n        for(i = [0:7]) {\n            translate([-40+i*10, 0, 5])\n            cube([6, 2, 10], center=true);\n        }\n    }\n}\n\nmodule lcd_screen() {\n    translate([0, 20, 20])\n    color(color_black)\n    cube([60, 25, 2], center=true);\n    \n    translate([0, 20, 21])\n    color([0, 0.2, 0.4])\n    cube([58, 23, 0.5], center=true);\n}\n\nmodule encoders() {\n    for(pos = [[-30, 15], [0, 15], [30, 15]]) {\n        translate([pos[0], pos[1], 21])\n        color(color_black)\n        cylinder(h=8, d1=12, d2=10);\n        \n        translate([pos[0], pos[1], 29])\n        color(color_gray)\n        cylinder(h=2, d=8);\n    }\n}\n\nmodule buttons() {\n    positions = [[-40, 5], [-25, 5], [-10, 5], [10, 5], [25, 5], [40, 5]];\n    for(i=[0:len(positions)-1]) {\n        translate([positions[i][0], positions[i][1], 21])\n        color(i<3 ? color_blue : color_gray)\n        cylinder(h=2, d=8);\n    }\n}\n\nmodule jacks() {\n    // Combo inputs\n    for(x = [-40, -25]) {\n        translate([x, -32.5, 12.5])\n        rotate([90, 0, 0])\n        color(color_black)\n        cylinder(h=8, d=12);\n    }\n    \n    // TRS outputs\n    for(x = [0:10:30]) {\n        translate([x, -32.5, 12.5])\n        rotate([90, 0, 0])\n        color(color_black)\n        cylinder(h=8, d=8);\n    }\n    \n    // USB-C\n    translate([45, -32.5, 15])\n    rotate([90, 0, 0])\n    color(color_black)\n    cube([12, 6, 8], center=true);\n}\n\nmodule status_leds() {\n    colors = [color_red, color_green, color_blue];\n    for(i=[0:2]) {\n        translate([-45+i*10, 32.5, 20])\n        color(colors[i])\n        cylinder(h=1, d=3);\n    }\n}\n\nmodule feet() {\n    for(pos = [[-40, -25], [40, -25], [-40, 25], [40, 25]]) {\n        translate([pos[0], pos[1], -2.5])\n        color(color_black)\n    cylinder(h=5, d=8, center=true);\n    }\n}\n\nmodule logo() {\n    translate([35, 35, 25.5])\n    rotate([0, 180, 0])\n    color(color_dark)\n    linear_extrude(1)\n    text(\"DSP-X\", size=8, halign=\"center\", font=\"Arial:style=Bold\");\n}\n\nmain_body();\nfront_panel();\nlcd_screen();\nencoders();\nbuttons();\njacks();\nstatus_leds();\nfeet();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "cpu",
    "openscad_code": "// CPU Module - Realistic Style, Medium Complexity\n\n// Main CPU body with realistic proportions\nmodule cpu_base() {\n    color(\"darkslategray\") \n    difference() {\n        // Main rectangular body\n        cube([42, 42, 4], center=true);\n        \n        // Corner cutouts for aesthetics\n        translate([19, 19, 0]) cube([6, 6, 4.1], center=true);\n        translate([-19, 19, 0]) cube([6, 6, 4.1], center=true);\n        translate([19, -19, 0]) cube([6, 6, 4.1], center=true);\n        translate([-19, -19, 0]) cube([6, 6, 4.1], center=true);\n    }\n}\n\n// IHS (Integrated Heat Spreader) - metallic top\nmodule cpu_ihs() {\n    color(\"silver\") \n    translate([0, 0, 2.1]) \n    difference() {\n        cube([38, 38, 1.5], center=true);\n        \n        // Intel-style engraving\n        translate([0, 8, 0.8]) \n        scale([0.1, 0.1, 1]) \n        cube([100, 20, 0.5], center=true);\n    }\n}\n\n// Individual pin for PGA socket\nmodule pin() {\n    color(\"gold\") \n    union() {\n        cylinder(h=2, d=0.3, center=true);\n        translate([0, 0, 1.2]) \n        sphere(d=0.4);\n    }\n}\n\n// Pin grid array on bottom\nmodule pin_array() {\n    color(\"gold\") \n    for(x=[-18:2:18]) {\n        for(y=[-18:2:18]) {\n            if(abs(x) > 2 || abs(y) > 2) { // Central no-pin zone\n                translate([x, y, -2.5]) \n                pin();\n            }\n        }\n    }\n}\n\n// Capacitors and SMD components\nmodule smd_components() {\n    // Tall electrolytic capacitors\n    for(pos=[[-15, 15], [15, -15], [-15, -15], [15, 15]]) {\n        translate([pos[0], pos[1], 3.5]) {\n            color(\"darkblue\") \n            cylinder(h=3, d=2, center=true);\n            color(\"silver\") \n            translate([0, 0, 1.5]) \n            cylinder(h=0.3, d=2.2, center=true);\n        }\n    }\n    \n    // Small SMD resistors\n    for(x=[-12:4:12]) {\n        for(y=[-12:4:12]) {\n            if(abs(x) > 8 || abs(y) > 8) {\n                translate([x, y, 3.7]) \n                color(\"black\") \n                cube([1.5, 0.8, 0.3], center=true);\n            }\n        }\n    }\n}\n\n// PCB substrate with green solder mask\nmodule pcb_substrate() {\n    color(\"darkgreen\") \n    cube([44, 44, 1.5], center=true);\n}\n\n// Anti-static warning label\nmodule warning_label() {\n    translate([0, -10, 3.7]) \n    color(\"yellow\") \n    cube([8, 5, 0.1], center=true);\n    \n    translate([0, -10, 3.8]) \n    color(\"black\") \n    cube([7, 4, 0.1], center=true);\n}\n\n// Assembly\nmodule cpu_assembly() {\n    union() {\n        pcb_substrate();\n        cpu_base();\n        cpu_ihs();\n        pin_array();\n        smd_components();\n        warning_label();\n        \n        // Alignment mark\n        translate([0, 0, 3.7]) \n        color(\"white\") \n        cylinder(h=0.1, d=3, center=true);\n    }\n}\n\n// Render the complete CPU\ncpu_assembly();",
    "renders": true
  },
  {
    "electronic_device": "memory",
    "openscad_code": "// Realistic USB Flash Drive (Memory Device)\n// Overall dimensions: 60mm x 20mm x 9mm\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.15, 0.15, 0.15];  // Dark gray plastic\ncolor_metal = [0.7, 0.7, 0.7];   // Metal contacts\ncolor_label = [0.9, 0.9, 0.9];   // Light label area\ncolor_led = [0, 1, 0];           // Green LED\ncolor_plastic = [0.2, 0.2, 0.8]; // Blue plastic slider\n\n// Main body\nmodule flash_body() {\n    color(color_body) {\n        // Main casing\n        translate([5, 0, 0])\n            cube([45, 20, 9], center = true);\n        \n        // Rounded edges on casing\n        translate([5, 0, -4.5])\n            cylinder(h = 9, r = 10, center = true);\n        \n        // Keyring hole\n        translate([-22, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 5, r = 2.5, center = true);\n        \n        // LED indicator window\n        translate([12, -8, 4.5])\n            cube([3, 2, 1]);\n    }\n}\n\n// USB metal connector\nmodule usb_connector() {\n    color(color_metal) {\n        // Outer metal shell\n        translate([32.5, 0, 0])\n            cube([15, 12, 4.5], center = true);\n        \n        // Plastic insert\n        color(color_plastic)\n            translate([32.5, 0, -1.25])\n                cube([12, 10, 2.5], center = true);\n        \n        // Metal contacts\n        color(color_metal)\n            for(i = [0:4]) {\n                translate([34.5 + i*2, 0, -0.5])\n                    cube([1.2, 10, 0.5], center = true);\n            }\n    }\n}\n\n// Protective cap\nmodule cap() {\n    difference() {\n        // Main cap body\n        color(color_body)\n            translate([45, 0, 0])\n                cube([15, 14, 6], center = true);\n        \n        // Inner cavity for connector\n        translate([45, 0, 0])\n            cube([16, 12, 4.8], center = true);\n        \n        // Grip ridges\n        for(i = [-2:2]) {\n            translate([45, i*2.5, 3.2])\n                cube([15, 1, 0.8], center = true);\n        }\n    }\n}\n\n// Label area\nmodule label() {\n    color(color_label) {\n        translate([5, 0, 4.5])\n            cube([30, 18, 0.3], center = true);\n    }\n}\n\n// LED indicator\nmodule led() {\n    color(color_led) {\n        translate([12, -8, 5.1])\n            sphere(r = 0.8);\n    }\n}\n\n// Assembly\nflash_body();\nusb_connector();\ncap();\nlabel();\nled();\n\n// Small details - manufacturer logo area\ntranslate([5, 6, 4.7])\n    cube([8, 3, 0.2], center = true);\n\n// Capacity marking\ntranslate([5, -6, 4.7])\n    cube([12, 2, 0.2], center = true);",
    "renders": true
  },
  {
    "electronic_device": "storage",
    "openscad_code": "// USB Flash Drive with Detachable Cap – Realistic Style, Medium Complexity\n// All dimensions in mm, ready for FDM printing (0.4 mm nozzle, 0.2 mm layer)\n\n// --------------------------------------------------\n// PARAMETERS\n// --------------------------------------------------\nbody_w = 20;\nbody_h = 8;\nbody_l = 55;\n\ncap_l = 18;\ncap_wall = 1.2;\n\nusb_l = 12;\nusb_w = 12;\nusb_h = 4.5;\nusb_shell_t = 0.8;\n\nring_d = 3;\nring_h = 1.2;\n\n// --------------------------------------------------\n// COLORS\n// --------------------------------------------------\nc_body   = [0.15, 0.15, 0.15]; // dark grey plastic\nc_metal  = [0.5, 0.5, 0.5];    // nickel\nc_led    = [0, 1, 0];          // green indicator\nc_label  = [0.9, 0.9, 0.9];    // white silkscreen\n\n// --------------------------------------------------\n// MODULES\n// --------------------------------------------------\n\n// Main body shell\nmodule flashBody() {\n    color(c_body) union() {\n        // main shell\n        translate([0, 0, body_h/2])\n            cube([body_l, body_w, body_h], center=true);\n\n        // rounded edges\n        hull() {\n            for(x=[-body_l/2+2, body_l/2-2])\n                translate([x, 0, body_h/2])\n                    cylinder(h=body_h, r=body_w/2, center=true);\n        }\n\n        // activity LED window\n        translate([body_l/2-5, body_w/2-1.5, body_h/2+0.1])\n            cube([2, 3, 0.2]);\n\n        // key-ring loop\n        translate([-body_l/2-0.5, 0, body_h/2+ring_h/2])\n            cylinder(h=ring_h, d=ring_d, center=true);\n    }\n}\n\n// USB Type-A plug\nmodule usbPlug() {\n    color(c_metal)\n    difference() {\n        // metal shell\n        translate([body_l/2+usb_l/2, 0, body_h/2])\n            cube([usb_l, usb_w, usb_h], center=true);\n\n        // hollow cavity\n        translate([body_l/2+usb_l/2, 0, body_h/2])\n            cube([usb_l+0.2, usb_w-2*usb_shell_t, usb_h-2*usb_shell_t], center=true);\n\n        // plastic tongue\n        color(c_body)\n            translate([body_l/2+usb_l/2+1, 0, body_h/2])\n                cube([usb_l-2, usb_w-4, usb_h/2-0.5], center=true);\n    }\n}\n\n// Detachable cap\nmodule cap() {\n    color(c_body) difference() {\n        // outer shell\n        translate([body_l+cap_l/2, 0, body_h/2])\n            cube([cap_l, usb_w+2*cap_wall, usb_h+2*cap_wall], center=true);\n\n        // inner cavity\n        translate([body_l+cap_l/2, 0, body_h/2])\n            cube([cap_l+0.5, usb_w+0.4, usb_h+0.4], center=true);\n\n        // grip ridges\n        for(i=[-1:1])\n            translate([body_l+cap_l/2-2, i*4, body_h/2+cap_wall+usb_h/2+0.5])\n                cube([cap_l-4, 0.8, 0.8], center=true);\n    }\n}\n\n// Silk-screen label\nmodule label() {\n    color(c_label)\n    translate([0, 0, body_h+0.1])\n        linear_extrude(height=0.05)\n            text(\"32 GB\", size=4, halign=\"center\", valign=\"center\");\n}\n\n// --------------------------------------------------\n// ASSEMBLY\n// --------------------------------------------------\n$fn = 32;\n\nflashBody();\nusbPlug();\ncap();\nlabel();",
    "renders": true
  },
  {
    "electronic_device": "supply",
    "openscad_code": "// Wall-mount 5 V / 2 A USB power-supply (phone-charger style)\n// Overall size ≈ 55 × 45 × 28 mm – printable without supports\n\n// General parameters\nwall = 1.8;          // shell thickness (mm)\nr = 2;               // corner radius\neps = 0.01;          // epsilon for clean booleans\nw = 55; h = 45; d = 28;\n\n// Colors\ncolor_case   = [0.95,0.95,0.95]; // matte white plastic\ncolor_usb    = [0.2,0.2,0.2];    // black insert\ncolor_led    = [0,1,0];          // green indicator\ncolor_pins   = [0.7,0.7,0.7];   // metal prongs\n\nmodule rounded_box(x,y,z,radius) {\n    hull() {\n        for(dx=[-1,1], dy=[-1,1], dz=[-1,1])\n            translate([dx*(x/2-radius), dy*(y/2-radius), dz*(z/2-radius)])\n                sphere(r=radius);\n    }\n}\n\n// Main shell\ndifference() {\n    color(color_case) rounded_box(w,h,d,r);\n\n    // Hollow it out\n    translate([0,0,-eps])\n        rounded_box(w-2*wall, h-2*wall, d+2*eps, r-wall);\n}\n\n// USB-A port\ntranslate([w/2-8, 0, d/2-wall]) {\n    difference() {\n        color(color_usb) cube([12, 12, wall+eps], center=true);\n        translate([0,0,-wall-eps])\n            cube([9, 7, wall+2*eps], center=true);\n    }\n}\n\n// Green power LED\ntranslate([-w/2+8, h/2-6, d/2-wall/2])\n    color(color_led) sphere(r=1.5, $fn=12);\n\n// Fold-out mains pins (EU 2-pin)\nmodule pin() {\n    rotate([90,0,0])\n        cylinder(h=12, r1=1, r2=1, $fn=8);\n}\ntranslate([-w/2, 0, 0])\n    rotate([0,90,0]) {\n        color(color_pins) {\n            translate([0, 9, 0])  pin();\n            translate([0,-9, 0])  pin();\n        }\n    }\n\n// Ventilation slots (top face)\ndifference() {\n    translate([0,0,0]) children();\n    for(i=[-2:2])\n        translate([i*8, 0, d/2-eps])\n            cube([3, 20, wall+2*eps]);\n}\ntranslate([0,0,0]) rounded_box(w,h,d,r);\n\n// Side grip ribs\nmodule ribs() {\n    for(i=[-20:5:20])\n        translate([0, i, 0])\n            cube([wall, 3, d/2-2]);\n}\ntranslate([w/2-wall/2, 0, 0]) ribs();\ntranslate([-w/2+wall/2, 0, 0]) mirror([1,0,0]) ribs();",
    "renders": true
  },
  {
    "electronic_device": "regulator",
    "openscad_code": "// Adjustable DC-DC Buck Regulator (LM2596 style)\n\n// Overall case dimensions\ncase_w = 42; case_l = 70; case_h = 20;\n\n// Wall thickness for 3D print\nwall = 1.6;\n\n// Color constants\nblack = [0.1,0.1,0.1];\nblue  = [0,0.3,0.8];\nred   = [0.8,0,0];\ngray  = [0.5,0.5,0.5];\ngreen = [0,0.6,0];\n\n// Main enclosure\nmodule enclosure() {\n    difference() {\n        // Outer shell\n        color(black)\n        rounded_box(case_w, case_l, case_h, 3);\n\n        // Inner void\n        translate([wall, wall, wall])\n            rounded_box(case_w-2*wall, case_l-2*wall, case_h-wall, 2);\n    }\n}\n\n// Helper for rounded box\nmodule rounded_box(w,l,h,r) {\n    hull() {\n        for(x=[-1,1], y=[-1,1])\n            translate([x*(w/2-r), y*(l/2-r), 0])\n                cylinder(r=r, h=h, $fn=16);\n    }\n}\n\n// Heat-sink fins\nmodule heatsink() {\n    color(gray)\n    for(i=[-3:3])\n        translate([i*3, 0, case_h/2])\n            cube([1.2, case_l-6, 8], center=true);\n}\n\n// 7-segment display window\nmodule display() {\n    color(black)\n    translate([0, 10, case_h-0.2]) {\n        cube([18, 8, 0.5], center=true);\n        // Segments illusion\n        color(red)\n        for(i=[-3:3])\n            translate([i*2.2,0,0.3])\n                cube([1.4,0.8,0.2], center=true);\n    }\n}\n\n// Adjustment potentiometer\nmodule potentiometer() {\n    color(blue)\n    translate([0, -20, case_h-1]) {\n        // Knob\n        cylinder(h=4, r=6, $fn=32);\n        translate([0,0,4.5])\n            cylinder(h=2, r=4, $fn=6);\n        // Indicator line\n        color(white)\n        translate([0,4.5,5])\n            cube([0.5,2,0.5], center=true);\n    }\n}\n\n// Input / Output screw terminals\nmodule terminals() {\n    color(green)\n    // IN+\n    translate([-15, -case_l/2+8, case_h/2])\n        terminal_block();\n    // IN-\n    translate([-5, -case_l/2+8, case_h/2])\n        terminal_block();\n    // OUT+\n    translate([5, case_l/2-8, case_h/2])\n        terminal_block();\n    // OUT-\n    translate([15, case_l/2-8, case_h/2])\n        terminal_block();\n}\n\nmodule terminal_block() {\n    difference() {\n        cube([6,7,8], center=true);\n        translate([0,0,4.2])\n            cube([3,2,2], center=true);\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    for(x=[-1,1], y=[-1,1])\n        translate([x*(case_w/2-3), y*(case_l/2-3), -1])\n            cylinder(h=case_h+2, r=1.6, $fn=16);\n}\n\n// Indicator LED\nmodule status_led() {\n    color(red)\n    translate([12, 10, case_h-0.5])\n        sphere(r=1.5);\n}\n\n// Main assembly\ndifference() {\n    union() {\n        enclosure();\n        heatsink();\n        display();\n        potentiometer();\n        terminals();\n        status_led();\n    }\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "electronic_device": "inverter",
    "openscad_code": "// Realistic Inverter Model - Medium Complexity\n// Features: Main housing, cooling fins, display panel, ports, mounting brackets\n\n// Overall dimensions (mm)\n$fn = 30;\nhousing_width = 80;\nhousing_height = 50;\nhousing_depth = 120;\n\n// Colors\ncolor_housing = [0.2, 0.2, 0.2];  // Dark gray\ncolor_fins = [0.3, 0.3, 0.3];    // Medium gray\ncolor_display = [0.1, 0.1, 0.1]; // Black\ncolor_ports = [0.4, 0.4, 0.4];   // Light gray\ncolor_led = [0, 1, 0];           // Green LED\ncolor_screen = [0, 0.8, 1];      // LCD blue\n\n// Main assembly\nmodule inverter() {\n    union() {\n        // Main housing\n        color(color_housing) main_housing();\n        \n        // Cooling fins\n        color(color_fins) cooling_fins();\n        \n        // Front panel with display\n        color(color_display) display_panel();\n        \n        // Ports section\n        color(color_ports) ports_section();\n        \n        // Mounting brackets\n        color(color_housing) mounting_brackets();\n    }\n}\n\n// Main housing body\nmodule main_housing() {\n    difference() {\n        // Main box\n        cube([housing_width, housing_depth, housing_height], center=true);\n        \n        // Rounded edges\n        translate([0, 0, housing_height/2 - 2])\n            cylinder(h=4, r=2, center=true);\n        translate([0, 0, -housing_height/2 + 2])\n            cylinder(h=4, r=2, center=true);\n    }\n}\n\n// Cooling fins on sides\nmodule cooling_fins() {\n    fin_height = 30;\n    fin_thickness = 1.5;\n    fin_spacing = 4;\n    \n    for(i = [0:7]) {\n        translate([housing_width/2 + 1, \n                  -housing_depth/2 + 10 + i * fin_spacing, \n                  0]) {\n            cube([fin_thickness, 2, fin_height], center=true);\n        }\n        translate([-housing_width/2 - 1, \n                  -housing_depth/2 + 10 + i * fin_spacing, \n                  0]) {\n            cube([fin_thickness, 2, fin_height], center=true);\n        }\n    }\n}\n\n// Display panel with screen and indicators\nmodule display_panel() {\n    translate([0, housing_depth/2 - 2, 0]) {\n        // Panel face\n        difference() {\n            cube([housing_width - 10, 4, housing_height - 10], center=true);\n            \n            // LCD screen recess\n            translate([0, 0, housing_height/2 - 15])\n                cube([housing_width - 20, 2, 20], center=true);\n        }\n        \n        // LCD screen\n        color(color_screen)\n            translate([0, 2.5, housing_height/2 - 15])\n            cube([housing_width - 22, 0.5, 18], center=true);\n        \n        // LED indicators\n        for(i = [0:2]) {\n            color(color_led)\n                translate([-housing_width/2 + 15 + i * 15, 3, housing_height/2 - 30])\n                sphere(r=1.5);\n        }\n        \n        // Power button\n        translate([housing_width/2 - 15, 3, 0]) {\n            difference() {\n                cylinder(h=3, r=4, center=true);\n                cylinder(h=4, r=2, center=true);\n            }\n        }\n    }\n}\n\n// Ports section on back\nmodule ports_section() {\n    translate([0, -housing_depth/2 + 2, 0]) {\n        // Port panel\n        cube([housing_width - 20, 4, housing_height - 20], center=true);\n        \n        // AC outlet\n        translate([0, 3, 10]) {\n            difference() {\n                cube([20, 2, 15], center=true);\n                translate([-5, 0, 0]) cube([3, 3, 8], center=true);\n                translate([5, 0, 0]) cube([3, 3, 8], center=true);\n                translate([0, 0, -5]) cube([12, 3, 3], center=true);\n            }\n        }\n        \n        // DC input terminals\n        for(i = [0:1]) {\n            translate([-15 + i * 30, 3, -10]) {\n                cylinder(h=5, r=4, center=true);\n                cylinder(h=6, r=2, center=true);\n            }\n        }\n    }\n}\n\n// Mounting brackets\nmodule mounting_brackets() {\n    bracket_width = 5;\n    bracket_height = 8;\n    \n    // Top brackets\n    translate([housing_width/2 - 10, 0, housing_height/2 + bracket_height/2]) {\n        cube([bracket_width, 15, bracket_height], center=true);\n    }\n    translate([-housing_width/2 + 10, 0, housing_height/2 + bracket_height/2]) {\n        cube([bracket_width, 15, bracket_height], center=true);\n    }\n    \n    // Bottom brackets\n    translate([housing_width/2 - 10, 0, -housing_height/2 - bracket_height/2]) {\n        cube([bracket_width, 15, bracket_height], center=true);\n    }\n    translate([-housing_width/2 + 10, 0, -housing_height/2 - bracket_height/2]) {\n        cube([bracket_width, 15, bracket_height], center=true);\n    }\n}\n\n// Render the inverter\ninverter();",
    "renders": true
  },
  {
    "electronic_device": "rectifier",
    "openscad_code": "// Medium-complexity 3D-printable bridge rectifier in realistic style\n// Dimensions: 45 × 30 × 20 mm\n\n$fn = 50;\n\nmodule rectifier() {\n    // Main black epoxy package body\n    color(\"black\")\n    difference() {\n        cube([45, 30, 20], center = true);\n\n        // Chamfer edges for realistic look\n        translate([22, 14, 10])\n            cube([4, 4, 22], center = true);\n        translate([-22, 14, 10])\n            cube([4, 4, 22], center = true);\n        translate([22, -14, 10])\n            cube([4, 4, 22], center = true);\n        translate([-22, -14, 10])\n            cube([4, 4, 22], center = true);\n    }\n\n    // White silk-screen marking band\n    color(\"white\")\n    translate([0, 0, 10.1])\n    cube([40, 2, 0.2], center = true);\n\n    // Four metal leads\n    color(\"silver\")\n    for (x = [-20, 20]) {\n        translate([x, 0, -15])\n            cylinder(h = 30, r = 1.5);\n        translate([x, 0, -17])\n            sphere(r = 1.5);\n    }\n\n    // Mold ejection pin marks (small circles on top)\n    color(\"gray20\")\n    for (i = [-1:1]) {\n        translate([i * 10, 10, 10.1])\n            cylinder(h = 0.5, r = 1);\n    }\n\n    // Polarity marking \"+\" near positive terminal\n    color(\"red\")\n    translate([21, 7, 10.1])\n    union() {\n        cube([2, 0.5, 0.2]);\n        cube([0.5, 2, 0.2]);\n    }\n\n    // Part number text simplified as raised block\n    color(\"gray60\")\n    translate([0, 0, 10.1])\n    cube([18, 4, 0.3], center = true);\n\n    // Heat dissipation fins on sides (printed as part of body)\n    color(\"black\")\n    for (i = [-2:2]) {\n        translate([23, i * 5, 0])\n            cube([1, 2, 18], center = true);\n        translate([-23, i * 5, 0])\n            cube([1, 2, 18], center = true);\n    }\n}\n\nrectifier();",
    "renders": true
  },
  {
    "electronic_device": "filter",
    "openscad_code": "// Realistic Electronic Filter Module\n// Frequency selective filter with BNC connectors and control knobs\n\n$fn = 50;  // Smooth curves for 3D printing\nwall = 1.5;  // Wall thickness for 3D printing\n\n// Main dimensions\ncase_w = 80;\ncase_h = 40;\ncase_d = 60;\nknob_r = 6;\nknob_h = 4;\nbnc_r = 6.5;\nbnc_h = 15;\n\n// Color definitions\ncase_color = \"DarkSlateGray\";\npanel_color = \"Black\";\nmetal_color = \"Silver\";\nknob_color = \"DarkRed\";\nled_color = \"Green\";\n\n// Main assembly\ndifference() {\n    // Main case\n    color(case_color) {\n        rounded_box(case_w, case_h, case_d, 3);\n    }\n    \n    // Front panel cutout\n    translate([0, 0, case_d/2-1])\n        cube([case_w-6, case_h-6, 2], center=true);\n    \n    // Ventilation slots\n    for(i = [-30:10:30]) {\n        translate([i, case_h/2-0.5, 0])\n            cube([8, 1, case_d-10], center=true);\n    }\n}\n\n// Front panel\ntranslate([0, 0, case_d/2-0.5])\ncolor(panel_color)\ncube([case_w-6, case_h-6, 1], center=true);\n\n// BNC connectors\nmodule bnc_connector(x_pos, label) {\n    translate([x_pos, -case_h/2+8, case_d/2-1]) {\n        // BNC body\n        color(metal_color)\n        cylinder(h=bnc_h, r=bnc_r+2);\n        \n        // BNC center pin\n        color(metal_color)\n        translate([0, 0, bnc_h])\n        cylinder(h=3, r=1.5);\n        \n        // Label\n        translate([0, -bnc_r-3, bnc_h/2])\n        rotate([0, 90, 0])\n        color(\"White\")\n        text(label, size=3, h=0.5);\n    }\n}\n\n// Input and output connectors\nbnc_connector(-case_w/4, \"IN\");\nbnc_connector(case_w/4, \"OUT\");\n\n// Control knobs\nmodule control_knob(x_pos, label) {\n    translate([x_pos, 0, case_d/2+knob_h/2]) {\n        // Knob base\n        color(knob_color)\n        cylinder(h=knob_h, r=knob_r);\n        \n        // Indicator line\n        color(\"White\")\n        translate([knob_r-1, 0, knob_h/2])\n        cube([2, 0.5, knob_h], center=true);\n        \n        // Label\n        translate([0, -knob_r-5, knob_h/2])\n        rotate([0, 90, 0])\n        color(\"White\")\n        text(label, size=2.5, h=0.5);\n    }\n}\n\n// Frequency and gain controls\ncontrol_knob(-case_w/6, \"FREQ\");\ncontrol_knob(case_w/6, \"GAIN\");\n\n// LED indicators\nmodule led_indicator(x_pos, color_name) {\n    translate([x_pos, case_h/2-5, case_d/2-1]) {\n        color(color_name)\n        cylinder(h=1, r=2);\n        \n        // LED bezel\n        color(metal_color)\n        difference() {\n            cylinder(h=1, r=3);\n            cylinder(h=2, r=2.2);\n        }\n    }\n}\n\n// Power and status LEDs\nled_indicator(-case_w/3, \"Red\");\nled_indicator(0, led_color);\nled_indicator(case_w/3, \"Yellow\");\n\n// Power switch\ntranslate([case_w/2-10, -case_h/2+8, case_d/2-1]) {\n    // Switch body\n    color(\"Black\")\n    cube([8, 6, 6], center=true);\n    \n    // Toggle\n    color(metal_color)\n    translate([0, -3, 0])\n    rotate([90, 0, 0])\n    cylinder(h=8, r=1.5);\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    color(\"Black\")\n    for(x = [-case_w/2+5:case_w-10:case_w-10])\n        for(y = [-case_d/2+5:case_d-10:case_d-10])\n            translate([x, -case_h/2+1, y])\n            cylinder(h=2, r=3);\n}\n\nrubber_feet();\n\n// Module for rounded box\nmodule rounded_box(w, h, d, r) {\n    hull() {\n        for(x = [-w/2+r, w/2-r])\n            for(y = [-h/2+r, h/2-r])\n                for(z = [-d/2+r, d/2-r])\n                    translate([x, y, z])\n                    sphere(r=r);\n    }\n    \n    // Fill in the sides\n    translate([0, 0, 0])\n        cube([w-2*r, h-2*r, d], center=true);\n    translate([0, 0, 0])\n        cube([w, h-2*r, d-2*r], center=true);\n    translate([0, 0, 0])\n        cube([w-2*r, h, d-2*r], center=true);\n}",
    "renders": true
  },
  {
    "electronic_device": "sync",
    "openscad_code": "// Realistic USB-C Time-Sync Device (50 x 25 x 12 mm)\n\n$fn = 64;                      // smooth curves\nwall = 1.2;                    // 3D-printable wall thickness\ncorner_r = 2;                  // corner radius\n\n// ---------- main body ----------\nmodule body() {\n    color(\"DarkSlateGray\")\n    difference() {\n        minkowski() {\n            cube([46, 21, 8], center = true);\n            sphere(r = corner_r);\n        }\n        \n        // inner hollow\n        translate([0, 0, 1])\n        minkowski() {\n            cube([46 - 2*wall, 21 - 2*wall, 8 - wall], center = true);\n            sphere(r = corner_r - 0.5);\n        }\n        \n        // USB-C port\n        translate([23.5, 0, -4])\n            cube([6, 7, 3], center = true);\n    }\n}\n\n// ---------- top plate with display ----------\nmodule top_plate() {\n    color(\"Black\")\n    difference() {\n        minkowski() {\n            cube([48, 23, 1.5], center = true);\n            sphere(r = corner_r + 0.5);\n        }\n        \n        // display window\n        translate([0, 4, 0])\n            cube([28, 10, 2], center = true);\n        \n        // 3 status LEDs\n        for (x = [-15, 0, 15])\n            translate([x, -7, 0])\n                cylinder(h = 2, d = 2.5, center = true);\n    }\n}\n\n// ---------- OLED screen ----------\nmodule oled() {\n    color(\"DeepSkyBlue\")\n    translate([0, 4, 1])\n        cube([26, 8, 0.3], center = true);\n    \n    // symbolic text lines\n    color(\"White\")\n    for (y = [2, 0, -2])\n        translate([0, y + 4, 1.2])\n            cube([20, 0.6, 0.1], center = true);\n}\n\n// ---------- side buttons ----------\nmodule side_buttons() {\n    // left pair\n    for (y = [5, -5])\n        translate([-25, y, 0])\n            button();\n    \n    // right single\n    translate([25, 0, 0])\n        button();\n}\n\nmodule button() {\n    color(\"DimGray\")\n    translate([0, 0, 2])\n        cylinder(h = 1.5, d = 4);\n    color(\"Gainsboro\")\n    translate([0, 0, 3.6])\n        cylinder(h = 0.4, d = 3.2);\n}\n\n// ---------- USB-C tongue ----------\nmodule usbc_tongue() {\n    color(\"Silver\")\n    translate([24, 0, -2.5])\n        cube([5, 6.8, 0.8], center = true);\n    \n    // contacts\n    color(\"Gold\")\n    for (i = [-2:1:2])\n        translate([24 - 0.3, i*1.2, -2.1])\n            cube([4, 0.4, 0.15], center = true);\n}\n\n// ---------- assembly ----------\nbody();\ntranslate([0, 0, 5])\n    top_plate();\noled();\nside_buttons();\nusbc_tongue();\n\n// small logo on top\ncolor(\"White\")\ntranslate([15, 8, 5.8])\n    linear_extrude(height = 0.2)\n        text(\"SYNC\", size = 3, halign = \"center\");",
    "renders": true
  },
  {
    "electronic_device": "generator",
    "openscad_code": "// Portable Power Generator - Realistic Style, 3D Printable\n// Overall size: 90 x 55 x 65 mm (L x W x H)\n\n$fn = 36;\n\n// Main colors\ncolor_body   = [0.25, 0.25, 0.25];   // Dark gray casing\ncolor_detail = [0.4, 0.4, 0.4];      // Lighter panels\ncolor_accent = [0.9, 0.9, 0];        // Yellow accents\ncolor_screen = [0.1, 0.1, 0.1];      // Black screen\ncolor_text   = [0, 0.8, 0];          // Green text/LED\ncolor_plug   = [0.9, 0.9, 0.9];      // Silver plugs\n\n// Main body shell\nmodule main_body() {\n    difference() {\n        // Outer shell with rounded top edges\n        union() {\n            translate([0, 0, 30]) cube([90, 55, 30], center = true);\n            translate([0, 0, 15]) cylinder(h = 30, r1 = 45, r2 = 45, center = true);\n        }\n        \n        // Internal cavity\n        translate([0, 0, 30]) cube([85, 50, 28], center = true);\n        translate([0, 0, 15]) cylinder(h = 32, r1 = 42, r2 = 42, center = true);\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    color(color_detail) {\n        translate([0, 27.5, 45]) cube([86, 1, 12], center = true);\n    }\n    \n    // LCD display\n    color(color_screen) {\n        translate([-25, 27.5, 46]) cube([30, 0.5, 10], center = true);\n    }\n    \n    // Power button\n    color(color_accent) {\n        translate([25, 27.5, 46]) cylinder(h = 1, r = 4, center = true);\n    }\n    \n    // Status LEDs\n    for (i = [0:2]) {\n        color(color_text) {\n            translate([35 - i*5, 27.5, 50]) cylinder(h = 0.5, r = 1, center = true);\n        }\n    }\n}\n\n// Air vents\nmodule air_vents() {\n    for (i = [0:7]) {\n        color(color_detail) {\n            translate([-40 + i*10, 0, 20]) cube([2, 55, 8], center = true);\n        }\n    }\n}\n\n// Handle\nmodule handle() {\n    translate([0, 0, 60]) {\n        color(color_body) {\n            // Handle base\n            translate([-35, 0, 0]) cube([10, 55, 5], center = true);\n            translate([35, 0, 0]) cube([10, 55, 5], center = true);\n            \n            // Handle grip\n            translate([0, 0, 10]) cylinder(h = 5, r = 5, center = true);\n            translate([-35, 0, 5]) cube([70, 5, 10], center = true);\n        }\n    }\n}\n\n// Power outlets\nmodule outlets() {\n    // 110V outlet\n    color(color_plug) {\n        translate([30, 0, 30]) {\n            difference() {\n                cube([8, 20, 15], center = true);\n                // Socket holes\n                translate([-3, 0, 0]) cylinder(h = 10, r = 3, center = true);\n                translate([3, 0, 0]) cylinder(h = 10, r = 3, center = true);\n                translate([0, 0, -5]) cube([2, 6, 10], center = true);\n            }\n        }\n    }\n    \n    // USB ports\n    for (i = [0:1]) {\n        color(color_body) {\n            translate([30, -15 - i*10, 30]) {\n                cube([8, 8, 4], center = true);\n                color(color_screen) {\n                    translate([0, 0, 2.1]) cube([6, 6, 1], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    for (x = [-35, 35])\n    for (y = [-20, 20]) {\n        color([0.1, 0.1, 0.1]) {\n            translate([x, y, 0]) cylinder(h = 3, r = 4, center = true);\n        }\n    }\n}\n\n// Assembly\ncolor(color_body) main_body();\ncolor(color_detail) air_vents();\ncontrol_panel();\nhandle();\noutlets();\nfeet();",
    "renders": true
  },
  {
    "electronic_device": "tester",
    "openscad_code": "// Digital Multimeter Tester - Realistic Style, Medium Complexity\n\n// Overall dimensions\nbody_w = 80;\nbody_h = 150;\nbody_d = 35;\n\n// Screen dimensions\nscreen_w = 50;\nscreen_h = 30;\nscreen_d = 3;\n\n// Button parameters\nbutton_r = 4;\nbutton_h = 2;\nbutton_spacing = 10;\n\n// Dial parameters\ndial_r = 15;\ndial_h = 5;\ndial_pos_x = -body_w/2 + 20;\ndial_pos_y = body_h/2 - 30;\n\n// Probe socket parameters\nsocket_r = 5;\nsocket_h = 8;\nsocket_spacing = 15;\n\n// Color definitions\ncolor_body = [0.2, 0.2, 0.2];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_display = [0.1, 0.3, 0.1];\ncolor_buttons = [0.8, 0.8, 0.8];\ncolor_dial = [0.5, 0.5, 0.5];\ncolor_ports = [0.3, 0.3, 0.3];\n\n// Main body with rounded edges\nmodule main_body() {\n    color(color_body)\n    union() {\n        // Main box\n        difference() {\n            minkowski() {\n                cube([body_w, body_h, body_d], center=true);\n                sphere(r=3);\n            }\n            // Hollow interior for electronics\n            translate([0, 0, 0])\n            cube([body_w-4, body_h-4, body_d-4], center=true);\n        }\n        \n        // Back cover with vents\n        translate([0, 0, -body_d/2-1])\n        cube([body_w-2, body_h-2, 2], center=true);\n        \n        // Vent slots\n        for(i = [-30:10:30]) {\n            translate([0, i, -body_d/2])\n            cube([body_w-10, 2, 1], center=true);\n        }\n    }\n}\n\n// LCD Screen\nmodule lcd_screen() {\n    translate([0, body_h/4, body_d/2-1])\n    union() {\n        // Screen bezel\n        color(color_screen)\n        difference() {\n            cube([screen_w+6, screen_h+6, screen_d+2], center=true);\n            cube([screen_w+2, screen_h+2, screen_d+3], center=true);\n        }\n        \n        // Actual LCD\n        color(color_display)\n        translate([0, 0, 1])\n        cube([screen_w, screen_h, screen_d], center=true);\n        \n        // Screen segments for 7-segment display\n        color([0, 0.8, 0])\n        for(seg_y = [-5, 0, 5]) {\n            translate([-20, seg_y, screen_d/2+1])\n            cube([30, 2, 0.5]);\n        }\n    }\n}\n\n// Function buttons\nmodule function_buttons() {\n    translate([0, -body_h/4, body_d/2])\n    for(i = [-1:1]) {\n        translate([i * button_spacing, 0, 0])\n        color(color_buttons)\n        cylinder(r=button_r, h=button_h+1);\n    }\n    \n    // Additional buttons\n    translate([-body_w/4, -body_h/3, body_d/2])\n    for(j = [0:2]) {\n        translate([j * button_spacing, 0, 0])\n        color(color_buttons)\n        cylinder(r=button_r*0.8, h=button_h);\n    }\n}\n\n// Mode selection dial\nmodule selection_dial() {\n    translate([dial_pos_x, dial_pos_y, body_d/2])\n    rotate([90, 0, 0])\n    union() {\n        // Dial base\n        color(color_dial)\n        cylinder(r=dial_r, h=dial_h);\n        \n        // Dial grip\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n            translate([dial_r-2, 0, dial_h/2])\n            cube([4, 2, dial_h], center=true);\n        }\n        \n        // Dial pointer\n        color([1, 0, 0])\n        translate([dial_r-1, 0, dial_h+1])\n        rotate([0, 90, 0])\n        cylinder(r=1, h=5);\n    }\n    \n    // Dial markings\n    for(mark = [-90:30:90]) {\n        rotate([0, 0, mark])\n        translate([dial_pos_x, dial_pos_y+dial_r+5, body_d/2])\n        color([1, 1, 1])\n        cube([1, 5, 0.5]);\n    }\n}\n\n// Input jacks for probes\nmodule probe_jacks() {\n    translate([body_w/2-15, -body_h/2+20, 0])\n    rotate([90, 0, 0])\n    for(pos = [0:1]) {\n        translate([0, pos * socket_spacing, 0])\n        union() {\n            // Jack housing\n            color(color_ports)\n            cylinder(r=socket_r+2, h=socket_h);\n            \n            // Jack hole\n            translate([0, 0, -1])\n            cylinder(r=socket_r, h=socket_h+2);\n            \n            // Color coding\n            translate([0, 0, socket_h-1])\n            color(pos == 0 ? [1, 0, 0] : [0, 0, 1])\n            cylinder(r=socket_r+1, h=1);\n        }\n    }\n    \n    // Labels\n    translate([body_w/2-12, -body_h/2+15, 2])\n    rotate([0, 0, 90])\n    color([1, 1, 1])\n    union() {\n        translate([0, 0, 0]) cube([2, 3, 0.5]);\n        translate([0, 15, 0]) cube([2, 3, 0.5]);\n    }\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    translate([0, body_h/2-20, -body_d/2+5])\n    difference() {\n        // Cover\n        color(color_body)\n        cube([30, 15, 2], center=true);\n        \n        // Screws\n        for(screw_x = [-10, 10]) {\n            translate([screw_x, 0, -1])\n            cylinder(r=1, h=4);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    main_body();\n    lcd_screen();\n    function_buttons();\n    selection_dial();\n    probe_jacks();\n    battery_compartment();\n}",
    "renders": true
  },
  {
    "electronic_device": "meter",
    "openscad_code": "// Digital Multimeter - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm x 40mm x 125mm\n\n// Main color scheme\n$fa = 1;\n$fs = 0.5;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Main case\n        color([0.2, 0.2, 0.2]) \n        cube([80, 40, 125], center=true);\n        \n        // Battery compartment cutout\n        translate([0, 19.5, -40])\n            cube([70, 2, 40], center=true);\n        \n        // Display recess\n        translate([0, 10, 45])\n            cube([70, 20, 35], center=true);\n    }\n}\n\n// Display screen\nmodule display() {\n    translate([0, 10, 60]) {\n        // Screen background\n        color([0.05, 0.05, 0.05])\n        cube([65, 18, 0.5], center=true);\n        \n        // LCD segments\n        for(y = [5, 0, -5, -10]) {\n            color([0.1, 0.8, 0.1])\n            translate([25, y, 0.3])\n                cube([8, 2, 0.1], center=true);\n        }\n    }\n}\n\n// Function buttons\nmodule buttons() {\n    // Rotary selector knob\n    translate([0, -15, 50]) {\n        // Knob base\n        color([0.1, 0.1, 0.1])\n        cylinder(h=8, r=12, center=true);\n        \n        // Knob top\n        color([0.9, 0.9, 0.9])\n        translate([0, 0, 4.5])\n            cylinder(h=2, r=11, center=true);\n        \n        // Pointer\n        color([0.8, 0.1, 0.1])\n        translate([0, 8, 5.5])\n            cube([2, 4, 1], center=true);\n    }\n    \n    // Function buttons\n    for(pos = [[-30, -15, 30], [-15, -15, 30], [0, -15, 30], [15, -15, 30], [30, -15, 30]]) {\n        translate(pos) {\n            color([0.15, 0.15, 0.15])\n            cylinder(h=3, r=4, center=true);\n            color([0.9, 0.9, 0.9])\n            translate([0, 0, 2])\n                cylinder(h=1, r=3.5, center=true);\n        }\n    }\n}\n\n// Input jacks\nmodule jacks() {\n    colors = [[0.8, 0.8, 0.1], [0.8, 0.2, 0.2], [0.1, 0.8, 0.1], [0.1, 0.1, 0.8]];\n    for(i = [0:3]) {\n        translate([-25 + i*15, -15, 0]) {\n            // Jack housing\n            color([0.1, 0.1, 0.1])\n            cylinder(h=10, r=5, center=true);\n            \n            // Jack opening\n            color(colors[i])\n            translate([0, 0, 6])\n                cylinder(h=5, r=2, center=true);\n            \n            // Label ring\n            color(colors[i])\n            translate([0, 0, 4])\n                cylinder(h=1, r=4.5, center=true);\n        }\n    }\n}\n\n// Side grips\nmodule grips() {\n    for(side = [-1, 1]) {\n        translate([0, 20*side, 0]) {\n            difference() {\n                color([0.25, 0.25, 0.25])\n                cube([78, 5, 120], center=true);\n                \n                // Grip pattern\n                for(z = [-50:10:50]) {\n                    translate([0, 0, z])\n                        cube([76, 7, 2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Stand\nmodule stand() {\n    translate([0, 0, -65]) {\n        rotate([90, 0, 0]) {\n            color([0.3, 0.3, 0.3])\n            difference() {\n                cube([50, 3, 20], center=true);\n                translate([0, -2, 8])\n                    cube([48, 3, 16], center=true);\n            }\n        }\n    }\n}\n\n// Brand label\nmodule label() {\n    translate([0, 0, 80]) {\n        color([0.1, 0.1, 0.1])\n        cube([30, 8, 0.5], center=true);\n        color([0.9, 0.9, 0.9])\n        translate([0, 0, 0.3])\n            cube([28, 6, 0.1], center=true);\n    }\n}\n\n// Assemble the multimeter\nunion() {\n    body();\n    display();\n    buttons();\n    jacks();\n    grips();\n    stand();\n    label();\n}",
    "renders": true
  },
  {
    "electronic_device": "scope",
    "openscad_code": "// Realistic Oscilloscope Model\n// Author: OpenSCAD Generator\n// Scale: 100mm width x 70mm height x 120mm depth\n\n$fn = 32;\n\n// Main colors\ncolor_case = [0.2, 0.2, 0.2];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_screen_active = [0, 0.8, 0];\ncolor_buttons = [0.1, 0.1, 0.1];\ncolor_ports = [0.8, 0.8, 0.8];\n\n// Main body\nmodule main_body() {\n    color(color_case)\n    difference() {\n        // Outer shell\n        cube([100, 120, 70], center=true);\n        \n        // Front bevel\n        translate([0, 50, 0])\n        rotate([45, 0, 0])\n        cube([110, 50, 50], center=true);\n        \n        // Side vents\n        for(y = [-40:20:40]) {\n            translate([51, y, 0])\n            cube([5, 15, 10], center=true);\n        }\n    }\n}\n\n// Screen assembly\nmodule screen() {\n    // Screen bezel\n    color(color_case)\n    difference() {\n        translate([0, 30, 25])\n        cube([80, 50, 5], center=true);\n        \n        // Screen opening\n        translate([0, 30, 27])\n        cube([70, 40, 1], center=true);\n    }\n    \n    // Screen surface\n    color(color_screen)\n    translate([0, 30, 28])\n    cube([68, 38, 0.5], center=true);\n    \n    // Screen grid\n    color(color_screen_active)\n    for(i = [-30:10:30]) {\n        translate([i, 30, 29])\n        cube([0.5, 38, 0.1], center=true);\n    }\n    for(j = [-15:10:15]) {\n        translate([0, 30+j, 29])\n        cube([68, 0.5, 0.1], center=true);\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    // Panel base\n    color(color_case)\n    translate([0, -30, 10])\n    cube([90, 40, 5], center=true);\n    \n    // Buttons\n    for(i = [0:8]) {\n        angle = i * 45;\n        color(color_buttons)\n        translate([cos(angle) * 25, -30, sin(angle) * 25 + 10])\n        rotate([0, 0, angle])\n        cylinder(h=3, r=3, center=true);\n    }\n    \n    // Knobs\n    for(i = [-1:1]) {\n        color(color_buttons)\n        translate([i * 20, -30, 13])\n        cylinder(h=5, r=4, center=true);\n        \n        color([0.8, 0.8, 0.8])\n        translate([i * 20, -30, 15.5])\n        cube([1, 6, 1], center=true);\n    }\n}\n\n// BNC connectors\nmodule bnc_connectors() {\n    for(i = [-1:1]) {\n        color(color_ports)\n        translate([i * 20, -55, 0])\n        union() {\n            // Base\n            cylinder(h=10, r=8, center=true);\n            \n            // Center pin\n            color([0.9, 0.9, 0.9])\n            translate([0, 0, 5])\n            cylinder(h=2, r=2, center=true);\n            \n            // Insulator\n            color([0.5, 0.5, 0.5])\n            translate([0, 0, 0])\n            difference() {\n                cylinder(h=10, r=8, center=true);\n                cylinder(h=12, r=6, center=true);\n            }\n        }\n    }\n}\n\n// Power connector\nmodule power_connector() {\n    color(color_ports)\n    translate([40, -55, 0])\n    union() {\n        cube([15, 10, 8], center=true);\n        \n        // Pins\n        for(i = [-1:1]) {\n            color([0.9, 0.9, 0.9])\n            translate([i * 3, -55, 4])\n            cylinder(h=2, r=1, center=true);\n        }\n    }\n}\n\n// USB port\nmodule usb_port() {\n    color(color_ports)\n    translate([-40, -55, 0])\n    difference() {\n        cube([15, 10, 5], center=true);\n        \n        // Port opening\n        translate([-40, -55, 2.5])\n        cube([12, 8, 2.5], center=true);\n        \n        // Contacts\n        color([0.9, 0.9, 0.9])\n        for(i = [-3:1:3]) {\n            translate([-40, -55 + i * 1.2, 1.2])\n            cube([10, 0.5, 0.5], center=true);\n        }\n    }\n}\n\n// Feet\nmodule feet() {\n    color([0.1, 0.1, 0.1])\n    for(x = [-40:80:40])\n    for(y = [-50:100:50]) {\n        translate([x, y, -35])\n        cylinder(h=5, r=3, center=true);\n    }\n}\n\n// Logo\nmodule logo() {\n    color([0.8, 0.8, 0.8])\n    translate([0, 0, 35.5])\n    linear_extrude(height=0.5)\n    text(\"OSCILLOSCOPE\", size=8, halign=\"center\", valign=\"center\");\n}\n\n// Assembly\nunion() {\n    main_body();\n    screen();\n    control_panel();\n    bnc_connectors();\n    power_connector();\n    usb_port();\n    feet();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "analyzer",
    "openscad_code": "// Portable Spectrum Analyzer (realistic style, medium complexity)\n// Dimensions: ~60mm x 35mm x 12mm\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer shell\n        color(\"black\")\n        translate([-30, -17.5, 0])\n        cube([60, 35, 12], center=true);\n        \n        // Front face recess\n        color(\"black\")\n        translate([-29.9, -17.5, 6])\n        cube([58, 34, 3], center=true);\n        \n        // Side grip grooves\n        for(i = [-12, -8, -4, 4, 8, 12]) {\n            translate([30, i, 6])\n            rotate([0, 90, 0])\n            cylinder(h=0.5, r=1.5, $fn=16);\n            translate([-30, i, 6])\n            rotate([0, 90, 0])\n            cylinder(h=0.5, r=1.5, $fn=16);\n        }\n    }\n}\n\n// Display screen\nmodule display() {\n    // Screen bezel\n    color(\"darkgray\")\n    translate([0, 5, 7.1])\n    cube([40, 20, 1], center=true);\n    \n    // LCD screen\n    color(\"blue\")\n    translate([0, 5, 7.6])\n    cube([36, 16, 0.5], center=true);\n    \n    // Screen details\n    for(x = [-15:6:15]) {\n        for(y = [-6:3:6]) {\n            color(\"lightblue\")\n            translate([x, y+5, 8.1])\n            cube([4, 1.5, 0.1], center=true);\n        }\n    }\n}\n\n// Control buttons\nmodule buttons() {\n    // Navigation pad\n    color(\"gray\")\n    translate([-10, -5, 7.1])\n    cube([8, 8, 1], center=true);\n    \n    // Up/down buttons\n    for(pos = [[10, -5], [10, -1], [10, 3]]) {\n        translate(pos)\n        color(\"darkgray\")\n        translate([0, 0, 7.1])\n        cylinder(h=1, r=2, $fn=16);\n        \n        color(\"black\")\n        translate([0, 0, 8.2])\n        cube([2, 0.5, 0.1], center=true);\n    }\n    \n    // Power button\n    color(\"red\")\n    translate([0, -12, 7.1])\n    cylinder(h=1, r=2, $fn=16);\n}\n\n// Antenna connector\nmodule antenna_port() {\n    color(\"gold\")\n    translate([0, 15, 6])\n    cylinder(h=4, r=3, $fn=32);\n    \n    color(\"silver\")\n    translate([0, 15, 10])\n    cylinder(h=2, r=2, $fn=32);\n}\n\n// USB port\nmodule usb_port() {\n    color(\"black\")\n    translate([20, -15, 3])\n    cube([8, 6, 2], center=true);\n    \n    color(\"darkgray\")\n    translate([20, -15, 4])\n    cube([6, 4, 1], center=true);\n}\n\n// LED indicators\nmodule indicators() {\n    // Power LED\n    color(\"green\")\n    translate([-20, 12, 7.1])\n    cylinder(h=0.5, r=1.5, $fn=16);\n    \n    // Activity LED\n    color(\"yellow\")\n    translate([-15, 12, 7.1])\n    cylinder(h=0.5, r=1.5, $fn=16);\n}\n\n// Ventilation slots\nmodule vents() {\n    for(i = [-10:4:10]) {\n        color(\"black\")\n        translate([i, -17.4, 8])\n        cube([2, 0.5, 3], center=true);\n    }\n}\n\n// Battery compartment\nmodule battery_door() {\n    color(\"darkgray\")\n    translate([0, 0, -5.5])\n    cube([25, 20, 1], center=true);\n    \n    // Door latch\n    color(\"black\")\n    translate([12, 0, -5])\n    cube([4, 2, 0.5], center=true);\n}\n\n// Model labels\nmodule labels() {\n    color(\"white\")\n    translate([-5, -12, 7.6])\n    rotate([0, 0, 0])\n    cube([12, 1, 0.1], center=true);\n    \n    color(\"white\")\n    translate([0, -12, 7.6])\n    rotate([0, 0, 0])\n    cube([8, 1, 0.1], center=true);\n}\n\n// Assemble the complete analyzer\nunion() {\n    body();\n    display();\n    buttons();\n    antenna_port();\n    usb_port();\n    indicators();\n    vents();\n    battery_door();\n    labels();\n}",
    "renders": true
  },
  {
    "electronic_device": "probe",
    "openscad_code": "// Hand-held DMM Probe – realistic style, medium complexity\n// Total length ≈ 85 mm, ready for 3D-printing (no overhangs > 45°)\n\n// Basic proportions\nprobe_len = 85;\nbody_len = 35;\nbody_d = 14;\ntip_len = 20;\ntip_d = 2;\ncable_d = 3.5;\nwall = 1.5;                 // uniform wall thickness\n\n// Colors\nc_body = \"DarkSlateGray\";\nc_tip = \"Silver\";\nc_sleeve = \"Crimson\";\nc_cable = \"Black\";\nc_label = \"White\";\n\nmodule probe() {\n    // Main hollow body\n    difference() {\n        color(c_body) cylinder(h = body_len, d = body_d, $fn = 48);\n        translate([0, 0, -0.1]) cylinder(h = body_len + 0.2, d = body_d - 2*wall, $fn = 48);\n    }\n\n    // Front sleeve / grip ring\n    translate([0, 0, body_len/2])\n    color(c_sleeve) cylinder(h = 8, d1 = body_d + 1, d2 = body_d + 1, $fn = 48);\n\n    // Finger grooves (three shallow rings)\n    for(i = [1:3]) {\n        translate([0, 0, 6*i])\n        difference() {\n            cylinder(h = 1.5, d = body_d, $fn = 48);\n            cylinder(h = 1.7, d = body_d - 1.5, $fn = 48);\n        }\n    }\n\n    // Probe tip (replaceable)\n    translate([0, 0, body_len])\n    union() {\n        color(c_tip) cylinder(h = tip_len, d = tip_d, $fn = 24);\n        // Sharp point\n        translate([0, 0, tip_len])\n        color(c_tip) cylinder(h = 3, d1 = tip_d, d2 = 0, $fn = 12);\n    }\n\n    // Cable exit shroud (strain relief)\n    translate([0, 0, -body_len/2])\n    union() {\n        color(c_cable) cylinder(h = 10, d1 = cable_d + 1, d2 = cable_d + 2.5, $fn = 36);\n        translate([0, 0, 10])\n        color(c_cable) cylinder(h = 15, d = cable_d, $fn = 24);\n    }\n\n    // Display window\n    translate([0, body_d/2 - 0.1, body_len/2])\n    color(\"Cyan\") cube([20, 0.2, 8], center = true);\n\n    // Button array\n    for(pos = [[-5, 0, body_len/2 + 4], [0, 0, body_len/2 + 4], [5, 0, body_len/2 + 4]]) {\n        translate(pos)\n        color(\"DimGray\") cube([3, 0.5, 3], center = true);\n    }\n\n    // Silk-screen label (simple extruded text outline)\n    translate([0, body_d/2 - 0.2, body_len/2 - 5])\n    color(c_label) cube([12, 0.2, 4], center = true);\n}\n\nprobe();",
    "renders": true
  },
  {
    "electronic_device": "calibrator",
    "openscad_code": "// Electronic Calibrator Device - Medium Complexity\n// Realistic style with functional features\n\n$fn = 64;  // Smooth curves\n\n// Main colors\ncolor_case = [0.2, 0.2, 0.2];      // Dark gray\ncolor_screen = [0.1, 0.1, 0.1];    // Black\ncolor_buttons = [0.3, 0.3, 0.3];   // Medium gray\ncolor_port = [0.4, 0.4, 0.4];      // Light gray\ncolor_indicator = [0, 1, 0];       // Green LED\n\n// Main body\nmodule main_body() {\n    color(color_case)\n    union() {\n        // Main enclosure\n        difference() {\n            rounded_box([70, 45, 20], 3);\n            translate([5, 5, -1]) cube([60, 35, 22]);  // Hollow interior\n        }\n        \n        // Front bezel\n        translate([0, 0, 10])\n        difference() {\n            rounded_box([74, 49, 3], 4);\n            translate([2, 2, -1]) rounded_box([70, 45, 5], 3);\n        }\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(size, radius) {\n    hull() {\n        for(dx = [0, size[0]])\n        for(dy = [0, size[1]])\n        for(dz = [0, size[2]])\n        translate([dx, dy, dz])\n        sphere(radius);\n    }\n}\n\n// LCD screen\nmodule screen() {\n    translate([0, 0, 11.5])\n    color(color_screen)\n    difference() {\n        cube([40, 25, 1]);\n        translate([2, 2, -0.5]) cube([36, 21, 2]);  // Slight recess\n    }\n    \n    // Screen glass effect\n    translate([0, 0, 12.6])\n    color([0.8, 0.8, 0.9, 0.3])\n    cube([40, 25, 0.5]);\n}\n\n// Navigation buttons\nmodule buttons() {\n    translate([25, 10, 11.5])\n    for(x = [-15, 0, 15]) {\n        translate([x, 0, 0])\n        color(color_buttons)\n        cylinder(h=1.5, r=4);\n    }\n    \n    // Enter button\n    translate([25, -10, 11.5])\n    color(color_buttons)\n    cylinder(h=1.5, r=6);\n}\n\n// Side ports\nmodule ports() {\n    // USB-C port\n    translate([35, 23, 0])\n    color(color_port)\n    difference() {\n        cube([8, 3, 2]);\n        translate([1, 1, -0.5]) cube([6, 1, 3]);\n    }\n    \n    // Calibration port\n    translate([15, 23, 0])\n    color(color_port)\n    difference() {\n        cube([6, 3, 2]);\n        translate([1, 1, -0.5]) cylinder(h=3, r=2);\n    }\n}\n\n// LED indicators\nmodule indicators() {\n    // Power LED\n    translate([-30, -15, 11.5])\n    color(color_indicator)\n    cylinder(h=1, r=2);\n    \n    // Status LEDs\n    for(i = [0:2]) {\n        translate([-30, -5 + i*5, 11.5])\n        color([1, 0.5, 0])  // Orange\n        cylinder(h=1, r=1.5);\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    for(x = [-25, 25])\n    for(y = [-15, 15]) {\n        translate([x, y, -10])\n        color([0.1, 0.1, 0.1])\n        cylinder(h=2, r=3);\n    }\n}\n\n// Calibration probe connector\nmodule probe_connector() {\n    translate([-35, 0, 0])\n    rotate([0, 90, 0])\n    color(color_case)\n    union() {\n        cylinder(h=8, r=6);\n        translate([0, 0, 8])\n        cylinder(h=5, r=4);\n        \n        // Internal threads\n        difference() {\n            cylinder(h=8, r=3);\n            for(i = [0:3]) {\n                rotate([0, 0, i*90])\n                translate([2.5, 0, 0])\n                cube([0.5, 1, 8]);\n            }\n        }\n    }\n}\n\n// Assembly\nmain_body();\nscreen();\nbuttons();\nports();\nindicators();\nfeet();\nprobe_connector();\n\n// Text labels (embossed)\ntranslate([-25, 22, 11.5])\nrotate([0, 0, 0])\nlinear_extrude(height=0.5)\ntext(\"CAL\", size=3, halign=\"center\", font=\"Arial:style=Bold\");\n\ntranslate([25, -22, 11.5])\nrotate([0, 0, 0])\nlinear_extrude(height=0.5)\ntext(\"ENTER\", size=2, halign=\"center\", font=\"Arial\");",
    "renders": true
  },
  {
    "electronic_device": "logger",
    "openscad_code": "// Logger Electronic Device - Medium Complexity\n// Dimensions: 80mm x 50mm x 25mm\n\n// Main colors\n$fa = 1;\n$fs = 0.5;\n\n// Main body\nmodule main_body() {\n    color(\"white\") \n    difference() {\n        // Outer shell\n        translate([0, 0, 12.5])\n            cube([80, 50, 25], center=true);\n        \n        // Inner cavity\n        translate([0, 0, 12.5])\n            cube([74, 44, 23], center=true);\n        \n        // SD card slot\n        translate([-38, -15, 12.5])\n            cube([4, 10, 2], center=true);\n    }\n}\n\n// Display screen\nmodule display() {\n    color(\"black\") \n    translate([0, 10, 25.5])\n        cube([35, 15, 1], center=true);\n    \n    // Screen border\n    color(\"gray20\") \n    translate([0, 10, 25.6])\n        cube([37, 17, 0.5], center=true);\n}\n\n// Control buttons\nmodule buttons() {\n    // Power button\n    color(\"red\") \n    translate([30, -15, 26])\n        cylinder(h=2, r=3, $fn=20);\n    \n    // Record button\n    color(\"red\") \n    translate([30, -5, 26])\n        cylinder(h=2, r=3, $fn=20);\n    \n    // Navigation buttons\n    for(pos = [[-30, 0], [-30, -10], [-20, -5], [-40, -5]]) {\n        color(\"gray30\") \n        translate([pos[0], pos[1], 26])\n            cylinder(h=2, r=2.5, $fn=20);\n    }\n}\n\n// LED indicators\nmodule indicators() {\n    // Status LED\n    color(\"green\") \n    translate([-35, 20, 26])\n        cylinder(h=1.5, r=2, $fn=20);\n    \n    // Battery LED\n    color(\"yellow\") \n    translate([-30, 20, 26])\n        cylinder(h=1.5, r=2, $fn=20);\n}\n\n// USB port\nmodule usb_port() {\n    color(\"black\") \n    translate([-38, 0, 15])\n        cube([2, 12, 4], center=true);\n    \n    // Port surround\n    color(\"gray50\") \n    translate([-38.5, 0, 15])\n        cube([1, 14, 5], center=true);\n}\n\n// Mounting points\nmodule mounting_points() {\n    for(pos = [[-35, -20, 0], [35, -20, 0], [35, 20, 0], [-35, 20, 0]]) {\n        color(\"white\") \n        translate(pos)\n            cylinder(h=3, r=2.5, $fn=20);\n    }\n}\n\n// Battery compartment cover\nmodule battery_cover() {\n    color(\"gray70\") \n    translate([0, 0, 1.5])\n        cube([30, 25, 3], center=true);\n    \n    // Cover latch\n    color(\"gray50\") \n    translate([0, -13, 3.5])\n        cube([20, 2, 2], center=true);\n}\n\n// Ventilation slots\nmodule ventilation_slots() {\n    for(i = [-3:3]) {\n        color(\"white\") \n        translate([i*10, 25, 12.5])\n            cube([4, 1, 15], center=true);\n    }\n}\n\n// Assembly\nmain_body();\ndisplay();\nbuttons();\nindicators();\nusb_port();\nmounting_points();\nbattery_cover();\nventilation_slots();",
    "renders": true
  },
  {
    "electronic_device": "remote",
    "openscad_code": "// Remote control unit (TV-style) – OpenSCAD\n// Overall size ~165 mm × 45 mm × 20 mm\n\n$fn = 40;               // smooth curves\n\n// Basic palette\nc_body   = [0.10,0.10,0.10];\nc_keys   = [0.25,0.25,0.25];\nc_labels = [0.95,0.95,0.95];\nc_red    = [0.85,0.20,0.20];\nc_blue   = [0.10,0.30,0.85];\nc_green  = [0.10,0.75,0.20];\n\nmodule rounded_box(size, radius) {\n    hull() {\n        for(x = [-1,1], y = [-1,1], z = [-1,1])\n            translate([x*(size.x/2-radius), y*(size.y/2-radius), z*(size.z/2-radius)])\n                sphere(r=radius);\n    }\n}\n\n// Main shell\nmodule shell() {\n    difference() {\n        color(c_body)\n            rounded_box([165,45,20], 5);\n        // Battery cavity\n        translate([0,0,-5])\n            cube([50,25,10], center=true);\n    }\n}\n\n// Button grid\nmodule button_grid() {\n    for(row=[0:4], col=[0:2]) {\n        translate([-55+col*35, 15-row*15, 11])\n            color(c_keys)\n                cylinder(h=2.5, r=5, $fn=24);\n    }\n    // D-pad\n    color(c_keys)\n        translate([55,0,11])\n            cylinder(h=2.5, r=10, $fn=24);\n    color(c_keys)\n        for(a=[0:90:270])\n            rotate([0,0,a])\n                translate([55+7,0,11])\n                    cylinder(h=2.5, r=3, $fn=12);\n    // Red power button\n    color(c_red)\n        translate([75,15,11])\n            cylinder(h=2.5, r=4, $fn=24);\n    // Volume / channel rockers\n    color(c_blue)\n        translate([-75, 10,11])\n            cube([15,5,2.5], center=true);\n    color(c_green)\n        translate([-75,-10,11])\n            cube([15,5,2.5], center=true);\n}\n\n// IR window\nmodule ir_window() {\n    translate([0,22,10.5])\n        color([0.1,0.1,0.1,0.6])\n            cube([8,3,1.5], center=true);\n}\n\n// Label strip (simple recessed rectangle)\nmodule label_strip() {\n    translate([0,-15,11])\n        color(c_labels)\n            cube([120,8,0.5], center=true);\n}\n\n// Assembly\nshell();\nbutton_grid();\nir_window();\nlabel_strip();",
    "renders": true
  },
  {
    "electronic_device": "console",
    "openscad_code": "// Compact handheld gaming console – realistic, medium complexity\n// Designed to print without supports. All overhangs ≤ 45°.\n\n// General dimensions\nconsole_w = 90;\nconsole_h = 30;\nconsole_d = 40;\nwall_t = 2.0;\n\nmodule body_shell() {\n    // Main housing\n    difference() {\n        // Outer rounded shell\n        minkowski() {\n            cube([console_w, console_d, console_h], center = true);\n            sphere(r = 4);\n        }\n        // Hollow interior\n        minkowski() {\n            cube([console_w - 2*wall_t, console_d - 2*wall_t, console_h - 2*wall_t], center = true);\n            sphere(r = 2);\n        }\n    }\n}\n\nmodule screen() {\n    // Recessed screen area\n    color(\"black\")\n    translate([0, 5, console_h/2 - 1])\n        cube([60, 30, 0.5], center = true);\n\n    // Screen glass\n    color(\"royalblue\")\n    translate([0, 5, console_h/2 - 0.5])\n        cube([58, 28, 0.2], center = true);\n}\n\nmodule dpad() {\n    // Cross D-pad\n    color(\"darkslategray\")\n    translate([-30, 0, console_h/2])\n    union() {\n        // Vertical bar\n        cube([10, 3, 1.5], center = true);\n        // Horizontal bar\n        cube([3, 10, 1.5], center = true);\n    }\n}\n\nmodule action_buttons() {\n    // A B X Y face buttons\n    color(\"crimson\")\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n        translate([30, 8, console_h/2 + 0.75])\n        cylinder(h = 1.5, r = 4, $fn = 16);\n    }\n}\n\nmodule shoulder_buttons() {\n    // L & R shoulder triggers\n    color(\"dimgray\")\n    for (x = [-console_w/2 + 5, console_w/2 - 5]) {\n        translate([x, -console_d/2 + 4, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 10, r1 = 4, r2 = 3, $fn = 16);\n    }\n}\n\nmodule speaker_grilles() {\n    // Speaker holes\n    color(\"black\")\n    translate([0, -console_d/2 + 8, -5])\n    for (sx = [-20:10:20]) {\n        for (sy = [-5:3:5]) {\n            translate([sx, sy, 0])\n            cylinder(h = wall_t + 1, r = 0.8, $fn = 8);\n        }\n    }\n}\n\nmodule usbc_port() {\n    // USB-C charging port\n    color(\"silver\")\n    translate([0, -console_d/2 + 1, -8])\n    rotate([90, 0, 0])\n    cube([8, 4, 3], center = true);\n}\n\nmodule power_led() {\n    // Power indicator LED\n    color(\"lime\")\n    translate([-console_w/2 + 5, 0, console_h/2 - 1])\n    cylinder(h = 0.5, r = 1.5, $fn = 12);\n}\n\n// Assemble console\nbody_shell();\nscreen();\ndpad();\naction_buttons();\nshoulder_buttons();\nspeaker_grilles();\nusbc_port();\npower_led();",
    "renders": true
  },
  {
    "electronic_device": "desk",
    "openscad_code": "// Desk Alarm Clock - Realistic Style, Medium Complexity\n// Overall dimensions: 80x40x50mm (length x width x height)\n\n$fn = 50;\n\n// Main color scheme\ncolor_body = [0.2, 0.2, 0.25];      // Dark gray\ncolor_screen = [0.1, 0.1, 0.1];     // Black\ncolor_digits = [0.9, 0.1, 0.1];     // Red\ncolor_buttons = [0.3, 0.3, 0.3];    // Medium gray\ncolor_accent = [0.8, 0.8, 0.8];     // Light gray\n\n// Main body\nmodule clock_body() {\n    color(color_body)\n    difference() {\n        // Main rectangular body with rounded top\n        union() {\n            cube([80, 40, 30], center = true);\n            translate([0, 0, 15])\n            scale([1, 1, 0.5])\n            sphere(20);\n        }\n        \n        // Create screen recess\n        translate([0, 0, 16])\n        cube([60, 25, 3], center = true);\n    }\n}\n\n// LED display screen\nmodule display() {\n    color(color_screen)\n    translate([0, 0, 13.5])\n    cube([58, 23, 0.5], center = true);\n    \n    // LED segments for time display (HH:MM)\n    color(color_digits)\n    for(i = [-2, -1, 1, 2]) {\n        translate([i * 10, 0, 13.2])\n        cube([6, 12, 0.3], center = true);\n    }\n    \n    // Colon separator\n    translate([0, 5, 13.2])\n    sphere(1);\n    translate([0, -5, 13.2])\n    sphere(1);\n}\n\n// Buttons on top\nmodule buttons() {\n    // Snooze button\n    color(color_accent)\n    translate([0, 15, 25])\n    cylinder(h = 3, r = 8);\n    \n    // Time set buttons\n    color(color_buttons)\n    for(i = [-1, 1]) {\n        translate([i * 25, 15, 25])\n        cylinder(h = 2, r = 4);\n    }\n}\n\n// Side ports\nmodule ports() {\n    color([0, 0, 0])\n    // USB port\n    translate([35, -20, 0])\n    cube([8, 2, 3]);\n    \n    // Power port\n    translate([-35, -20, 0])\n    cylinder(h = 8, r = 3);\n}\n\n// Speaker grills\nmodule speakers() {\n    color(color_body)\n    difference() {\n        // Speaker area\n        translate([0, 0, -14])\n        cube([70, 35, 3], center = true);\n        \n        // Holes\n        for(x = [-30:5:30])\n            for(y = [-15:3:15])\n                translate([x, y, -12.5])\n                cylinder(h = 5, r = 0.8);\n    }\n}\n\n// Feet for stability\nmodule feet() {\n    color(color_body)\n    for(x = [-30, 30])\n        for(y = [-15, 15])\n            translate([x, y, -16])\n            cylinder(h = 3, r = 2);\n}\n\n// Assemble the clock\nunion() {\n    clock_body();\n    display();\n    buttons();\n    ports();\n    speakers();\n    feet();\n}",
    "renders": true
  },
  {
    "electronic_device": "rack",
    "openscad_code": "// 1U Rack-Mount Ethernet Switch (realistic style, medium complexity)\n// Overall size ~100 mm wide so it prints in one piece\n\n$fa=2; $fs=0.5;\n\n// Main shell --------------------------------------------------------\nmodule chassis() {\n    color(\"gray40\") difference() {\n        // 1U height = 44.45 mm; scale to 45 mm for printability\n        cube([100, 45, 120], center=true);\n\n        // Hollow inside to save material\n        translate([0,0,5])\n            cube([94, 39, 114], center=true);\n\n        // Front openings\n        translate([-48,0,0]) cube([6, 12, 100], center=true);\n        translate([48,0,0]) cube([6, 12, 100], center=true);\n\n        // Rear ventilation slots\n        for(x=[-40:10:40])\n            translate([x,-22.5,0])\n                cube([8, 5, 100], center=true);\n    }\n}\n\n// Front panel -------------------------------------------------------\nmodule frontPanel() {\n    color(\"black\") difference() {\n        translate([0,22.5,0])\n            cube([100, 2, 120], center=true);\n\n        // 8× RJ-45 ports\n        for(i=[-3:1:4])\n            translate([i*10, 22.5, -30])\n                rotate([90,0,0])\n                    cylinder(h=2, d=12, $fn=20);\n\n        // SFP cages\n        translate([-25, 22.5, 30])\n            cube([12, 2, 20], center=true);\n        translate([25, 22.5, 30])\n            cube([12, 2, 20], center=true);\n\n        // Activity LEDs\n        for(i=[-3:1:4])\n            translate([i*10, 22.5, -40])\n                cylinder(h=2.1, d=3, $fn=8);\n    }\n}\n\n// Ears for rack mounting -------------------------------------------\nmodule rackEar(side) {\n    color(\"gray60\") {\n        translate([side*53,0,0])\n            difference() {\n                cube([6, 45, 12], center=true);\n                for(z=[-40:20:40])\n                    translate([0,0,z])\n                        cylinder(h=8, d=3.5, center=true, $fn=12);\n            }\n    }\n}\n\n// Cooling fan housing at rear --------------------------------------\nmodule fanHousing() {\n    color(\"gray30\") union() {\n        translate([0,-22.5,-45])\n            cube([60, 8, 60], center=true);\n\n        // Fan guard pattern\n        for(y=[-20:5:20])\n            translate([0,-22.5,y-45])\n                cube([58, 0.8, 1], center=true);\n        for(x=[-25:5:25])\n            translate([x,-22.5,-45])\n                cube([1, 0.8, 58], center=true);\n    }\n}\n\n// Power connector ----------------------------------------------------\nmodule powerJack() {\n    color(\"black\")\n        translate([0,-22.5,45])\n            rotate([90,0,0])\n                cylinder(h=12, d1=10, d2=8, $fn=20);\n}\n\n// Assemble -----------------------------------------------------------\nchassis();\nfrontPanel();\nrackEar(-1);\nrackEar(1);\nfanHousing();\npowerJack();",
    "renders": true
  },
  {
    "electronic_device": "enclosure",
    "openscad_code": "// Raspberry Pi-style enclosure (medium complexity, realistic style)\n// Overall dimensions: 85 x 56 x 25 mm\n\n$fn = 50; // Smooth curves\n\n// Color definitions\ncolor_case = \"DarkGrey\";\ncolor_lid = \"Grey\";\ncolor_pcb = \"Green\";\ncolor_usb = \"Silver\";\ncolor_led = \"Red\";\n\n// Main enclosure body\nmodule enclosure_body() {\n    difference() {\n        // Main shell\n        color(color_case)\n        translate([0, 0, 12.5])\n        cube([85, 56, 25], center = true);\n        \n        // Hollow interior\n        translate([0, 0, 12.5])\n        cube([81, 52, 23], center = true);\n        \n        // USB cutouts (2x USB-A)\n        for(x = [-30, -15]) {\n            translate([x, 28, 12.5])\n            cube([10, 5, 8], center = true);\n        }\n        \n        // Ethernet port\n        translate([15, 28, 12.5])\n        cube([16, 5, 8], center = true);\n        \n        // Micro-SD slot\n        translate([42.5, -28, 12.5])\n        cube([15, 2, 3], center = true);\n        \n        // HDMI port\n        translate([-42.5, -28, 12.5])\n        cube([14, 2, 8], center = true);\n        \n        // GPIO access slot\n        translate([0, -25, 25])\n        cube([50, 10, 2], center = true);\n    }\n}\n\n// Ventilation holes pattern\nmodule ventilation_holes() {\n    for(y = [-20:10:20]) {\n        for(x = [-35:10:35]) {\n            translate([x, y, 25])\n            cylinder(h = 2, r = 1.5, center = true);\n        }\n    }\n}\n\n// PCB with components\nmodule pcb_assembly() {\n    translate([0, 0, 15])\n    union() {\n        // PCB\n        color(color_pcb)\n        cube([65, 45, 1.6], center = true);\n        \n        // USB connectors\n        color(color_usb)\n        for(x = [-22.5, -7.5]) {\n            translate([x, 22.5, 0.8])\n            cube([12, 10, 6]);\n        }\n        \n        // Ethernet jack\n        color(color_usb)\n        translate([7.5, 22.5, 0.8])\n        cube([16, 10, 6]);\n        \n        // HDMI connector\n        translate([-32.5, -22.5, 0.8])\n        cube([14, 10, 6]);\n        \n        // SOC heatsink\n        color(\"Black\")\n        translate([0, 0, 0.8])\n        cube([20, 20, 4]);\n        \n        // Status LEDs\n        color(color_led)\n        translate([-30, 20, 0.8])\n        sphere(r = 1);\n        \n        color(\"Green\")\n        translate([-30, 18, 0.8])\n        sphere(r = 1);\n    }\n}\n\n// Mounting posts\nmodule mounting_posts() {\n    for(pos = [[-30, 15], [30, 15], [30, -15], [-30, -15]]) {\n        translate([pos[0], pos[1], 1])\n        cylinder(h = 20, r = 2.5);\n        \n        translate([pos[0], pos[1], 1])\n        cylinder(h = 20, r = 1.5, center = true);\n    }\n}\n\n// Lid with features\nmodule enclosure_lid() {\n    difference() {\n        color(color_lid)\n        translate([0, 0, 25])\n        cube([85, 56, 2], center = true);\n        \n        // Ventilation holes\n        ventilation_holes();\n        \n        // Mounting post holes\n        for(pos = [[-30, 15], [30, 15], [30, -15], [-30, -15]]) {\n            translate([pos[0], pos[1], 25])\n            cylinder(h = 3, r = 2.5, center = true);\n        }\n        \n        // GPIO access hole\n        translate([0, -25, 26])\n        cube([50, 10, 2], center = true);\n    }\n}\n\n// Assembly\nenclosure_body();\nmounting_posts();\npcb_assembly();\nenclosure_lid();",
    "renders": true
  },
  {
    "electronic_device": "cabinet",
    "openscad_code": "// Realistic 1U Rack-Mount Network Switch Cabinet\n// Medium complexity, 3D printable with no overhangs\n\n$fn = 50;\n\n// Colors\ncolor_body = [0.15, 0.15, 0.2];\ncolor_face = [0.25, 0.25, 0.3];\ncolor_ports = [0.9, 0.9, 0.9];\ncolor_led = [0, 1, 0];\ncolor_screen = [0, 0.3, 0.6];\n\n// Main dimensions\ncabinet_w = 80;\ncabinet_d = 45;\ncabinet_h = 44;\n\n// Wall thickness\nwall = 1.5;\n\n// Rack ears\near_w = 5;\near_h = 10;\n\n// Front panel features\npanel_w = cabinet_w - 2*wall;\npanel_h = cabinet_h - 2*wall;\n\nmodule rack_ears() {\n    for(side = [-1, 1]) {\n        translate([side * (cabinet_w/2 + ear_w/2), 0, 0])\n            color(color_body)\n            cube([ear_w, cabinet_d, ear_h], center=true);\n    }\n}\n\nmodule ventilation_holes() {\n    holes = 6;\n    hole_w = 2;\n    hole_h = 1;\n    spacing = panel_h / (holes + 1);\n    \n    for(i = [1:holes]) {\n        translate([0, 0, -panel_h/2 + i*spacing])\n            cube([panel_w, wall*1.5, hole_h], center=true);\n    }\n}\n\nmodule ethernet_ports() {\n    ports = 8;\n    port_w = 5;\n    port_h = 3;\n    port_d = 3;\n    spacing = panel_w / (ports + 1);\n    \n    for(i = [1:ports]) {\n        translate([-panel_w/2 + i*spacing, -cabinet_d/2 + wall/2, 0])\n        color(color_ports)\n        cube([port_w, port_d, port_h], center=true);\n    }\n}\n\nmodule status_leds() {\n    leds = 3;\n    led_d = 2;\n    spacing = 4;\n    \n    for(i = [0:leds-1]) {\n        translate([panel_w/2 - 10 + i*spacing, -cabinet_d/2 + wall/2, panel_h/2 - 4])\n        color(color_led)\n        cylinder(h=wall*1.2, d=led_d, center=true);\n    }\n}\n\nmodule lcd_display() {\n    display_w = 20;\n    display_h = 8;\n    \n    translate([0, -cabinet_d/2 + wall/2, -panel_h/2 + 10])\n    color(color_screen)\n    cube([display_w, wall, display_h], center=true);\n}\n\nmodule cabinet_body() {\n    difference() {\n        // Main cabinet\n        color(color_body)\n        cube([cabinet_w, cabinet_d, cabinet_h], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 0])\n        cube([cabinet_w - 2*wall, cabinet_d - wall, cabinet_h - 2*wall], center=true);\n        \n        // Front cutout for panel\n        translate([0, -cabinet_d/2 + wall, 0])\n        cube([panel_w, wall*2, panel_h], center=true);\n        \n        // Ventilation holes\n        translate([0, cabinet_d/2 - wall/2, 0])\n        ventilation_holes();\n    }\n}\n\nmodule front_panel() {\n    difference() {\n        // Panel plate\n        color(color_face)\n        translate([0, -cabinet_d/2 + wall/2, 0])\n        cube([panel_w, wall, panel_h], center=true);\n        \n        // Port cutouts\n        translate([0, -cabinet_d/2 + wall, 0])\n        ethernet_ports();\n        \n        // LED holes\n        status_leds();\n        \n        // Display cutout\n        translate([0, -cabinet_d/2 + wall, 0])\n        lcd_display();\n    }\n}\n\n// Assembly\ncabinet_body();\nfront_panel();\nrack_ears();",
    "renders": true
  },
  {
    "electronic_device": "stand",
    "openscad_code": "// Smartphone Stand – realistic, medium complexity, 3D-printable\n// 90 mm wide × 60 mm deep × 45 mm high\n// Wall thickness 2 mm, no overhangs >45°, ready for FDM printing\n\n$fn = 36;\n\n// Main colors\ncolor_stand = [0.15,0.15,0.15];   // matte black\ncolor_pad   = [0.05,0.05,0.08];   // rubber pad\ncolor_logo  = [0.8,0.8,0.8];      // light grey logo\n\nmodule stand_base() {\n    // Base plate\n    difference() {\n        color(color_stand) cube([90, 60, 3], center=true);\n        // Screw recesses for rubber feet (4×)\n        for(x=[-38,38], y=[-23,23])\n            translate([x,y,-1.5])\n                cylinder(h=3.5, d=5.4, $fn=16);\n    }\n}\n\nmodule back_support() {\n    // Upright backrest\n    color(color_stand)\n    translate([0, 20, 21])\n        cube([86, 2, 42], center=true);\n}\n\nmodule phone_slot() {\n    // Slot for phone thickness 9-13 mm\n    difference() {\n        // Main block\n        translate([0, 0, 2])\n            color(color_stand) cube([86, 40, 8], center=true);\n        // Slot cavity\n        translate([0, 0, 6])\n            cube([82, 36, 12], center=true);\n        // Cable relief groove\n        translate([0, 20, 6])\n            cube([8, 6, 12], center=true);\n    }\n}\n\nmodule front_lip() {\n    // Front lip to retain phone\n    color(color_stand)\n    translate([0, -22, 6])\n        cube([86, 4, 5], center=true);\n}\n\nmodule rubber_pads() {\n    // Anti-slip pads (printed in TPU)\n    color(color_pad)\n    for(x=[-38,38], y=[-23,23])\n        translate([x,y,0.5])\n            cylinder(h=1.5, d=5, $fn=16);\n    // Front pad strip\n    translate([0, -22, 0.5])\n        cube([82, 2, 1.5], center=true);\n}\n\nmodule logo() {\n    // Simple debossed logo rectangle\n    translate([0, 0, 3.5])\n    difference() {\n        color(color_stand) cube([20, 8, 1.5], center=true);\n        color(color_logo) translate([0,0,-0.01])\n            cube([18, 6, 1.6], center=true);\n    }\n}\n\nmodule cable_slot() {\n    // Rear cable exit notch\n    difference() {\n        back_support();\n        translate([0, 21, 15])\n            cube([10, 4, 8], center=true);\n    }\n}\n\nstand_base();\nback_support();\nphone_slot();\nfront_lip();\nrubber_pads();\nlogo();\ncable_slot();",
    "renders": true
  },
  {
    "electronic_device": "mount",
    "openscad_code": "// Raspberry Pi Camera Module V3 Mount\n// Medium complexity realistic mount for 3D printing\n\n$fn = 50;\n\n// Main colors\ncolor_camera = [0.1, 0.1, 0.1];  // Black\ncolor_lens = [0.2, 0.2, 0.2];    // Dark gray\ncolor_mount = [0.8, 0.8, 0.8];   // Light gray\ncolor_screw = [0.5, 0.5, 0.5];   // Silver\ncolor_led = [0.9, 0.1, 0.1];     // Red\n\n// Camera dimensions\ncamera_w = 25;\ncamera_h = 24;\ncamera_d = 11.5;\nlens_d = 10;\nlens_h = 6;\n\n// Mount dimensions\nbase_w = 60;\nbase_h = 40;\nbase_d = 3;\nwall_th = 2;\nclip_h = 8;\nclip_gap = 2;\n\n// Module for camera body\nmodule camera_body() {\n    color(color_camera)\n    difference() {\n        // Main body\n        translate([-camera_w/2, -camera_h/2, 0])\n            cube([camera_w, camera_h, camera_d]);\n        \n        // Lens hole\n        translate([0, 0, camera_d])\n            cylinder(h=lens_h+1, d=lens_d+2);\n        \n        // Mounting holes (4 corners)\n        for(x = [-9, 9])\n            for(y = [-8, 8])\n                translate([x, y, -0.5])\n                    cylinder(h=camera_d+1, d=2);\n    }\n}\n\n// Module for lens assembly\nmodule lens_assembly() {\n    // Main lens barrel\n    color(color_lens)\n    translate([0, 0, camera_d])\n        cylinder(h=lens_h, d=lens_d);\n    \n    // Lens glass\n    color([0.1, 0.1, 0.3, 0.7])\n    translate([0, 0, camera_d+lens_h-0.5])\n        cylinder(h=0.5, d=lens_d-2);\n    \n    // Focus ring\n    color(color_camera)\n    translate([0, 0, camera_d+1])\n        cylinder(h=2, d=lens_d+2);\n}\n\n// Module for status LED\nmodule status_led() {\n    color(color_led)\n    translate([8, -camera_h/2-1, camera_d-1])\n        sphere(d=1.5);\n}\n\n// Module for mount base\nmodule mount_base() {\n    color(color_mount)\n    difference() {\n        // Main base\n        translate([-base_w/2, -base_h/2, 0])\n            cube([base_w, base_h, base_d]);\n        \n        // Cable channel\n        translate([-camera_w/2-5, -camera_h/2-5, 0])\n            cube([camera_w+10, 5, base_d]);\n        \n        // Mounting holes for tripod\n        for(x = [-20, 20])\n            for(y = [-15, 15])\n                translate([x, y, -0.5])\n                    cylinder(h=base_d+1, d=3);\n    }\n}\n\n// Module for camera clips\nmodule camera_clips() {\n    color(color_mount)\n    union() {\n        // Front clips\n        for(side = [-1, 1]) {\n            translate([side*(camera_w/2+wall_th/2), 0, base_d])\n                cube([wall_th, camera_h+wall_th*2, clip_h]);\n            \n            // Clip cutouts\n            translate([side*(camera_w/2+wall_th/2), 0, base_d+clip_h-clip_gap])\n                cube([wall_th+0.5, camera_h+wall_th*2, clip_gap]);\n        }\n        \n        // Side clips\n        for(side = [-1, 1]) {\n            translate([0, side*(camera_h/2+wall_th/2), base_d])\n                cube([camera_w+wall_th*2, wall_th, clip_h]);\n            \n            // Clip cutouts\n            translate([0, side*(camera_h/2+wall_th/2), base_d+clip_h-clip_gap])\n                cube([camera_w+wall_th*2, wall_th+0.5, clip_gap]);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 10]) {\n    // Mount assembly\n    mount_base();\n    camera_clips();\n    \n    // Camera assembly\n    translate([0, 0, base_d+clip_h+camera_d/2])\n        rotate([0, 180, 0])\n        union() {\n            camera_body();\n            lens_assembly();\n            status_led();\n        }\n    \n    // Mounting screws\n    color(color_screw)\n    for(x = [-20, 20])\n        for(y = [-15, 15])\n            translate([x, y, -2])\n                cylinder(h=5, d=2.8);\n}",
    "renders": true
  },
  {
    "electronic_device": "bracket",
    "openscad_code": "// Raspberry Pi 4 bracket with realistic features\n// Overall size: 85x56x20mm Pi board + 3mm bracket thickness\n\n$fn = 50;\n\n// Colors\ncolor_case = [0.2, 0.2, 0.2];\ncolor_board = [0.1, 0.6, 0.1];\ncolor_metal = [0.7, 0.7, 0.7];\ncolor_usb = [0.1, 0.1, 0.1];\ncolor_led = [1, 0, 0];\n\n// Main bracket base\nmodule bracket_base() {\n    difference() {\n        // Main bracket body\n        translate([-5, -5, 0])\n        cube([95, 66, 3]);\n        \n        // Mounting holes\n        for(x = [0, 85], y = [0, 56]) {\n            translate([x, y, -1])\n            cylinder(h=5, d=3.2);\n        }\n        \n        // Pi board cutout\n        translate([0, 0, 2.9])\n        cube([85, 56, 0.2]);\n    }\n}\n\n// Pi 4 board with components\nmodule pi_board() {\n    color(color_board)\n    translate([0, 0, 3])\n    cube([85, 56, 1.5]);\n    \n    // SoC heatsink\n    color(color_metal)\n    translate([40, 28, 4.5])\n    cube([15, 15, 5]);\n    \n    // USB ports\n    color(color_usb)\n    for(i = [0, 1, 2, 3]) {\n        translate([82, 5 + i*12, 3])\n        cube([3, 10, 7]);\n    }\n    \n    // Ethernet port\n    color(color_usb)\n    translate([82, 45, 3])\n    cube([3, 15, 7]);\n    \n    // USB-C power port\n    color(color_usb)\n    translate([5, 0, 3])\n    cube([15, 3, 7]);\n    \n    // HDMI ports\n    color(color_usb)\n    for(i = [0, 1]) {\n        translate([10 + i*20, 0, 3])\n        cube([12, 3, 7]);\n    }\n    \n    // GPIO header\n    color(color_metal)\n    translate([3, 20, 4.5])\n    cube([20, 5, 8]);\n    \n    // Status LEDs\n    color(color_led)\n    translate([40, 53, 4.5])\n    sphere(d=2);\n    \n    color([0, 1, 0])\n    translate([44, 53, 4.5])\n    sphere(d=2);\n    \n    // MicroSD slot\n    color(color_usb)\n    translate([75, 56, 3])\n    cube([10, 3, 1.5]);\n}\n\n// Standoffs for board mounting\nmodule standoffs() {\n    for(x = [5, 80], y = [5, 51]) {\n        color(color_case)\n        translate([x, y, 0])\n        cylinder(h=3, d=5);\n        \n        translate([x, y, -1])\n        cylinder(h=5, d=2.7);\n    }\n}\n\n// Bracket side supports\nmodule side_supports() {\n    // Left support\n    difference() {\n        color(color_case)\n        translate([-5, 15, 0])\n        cube([5, 26, 10]);\n        \n        // Cable clearance\n        translate([-5, 20, 0])\n        cube([5, 15, 8]);\n    }\n    \n    // Right support\n    difference() {\n        color(color_case)\n        translate([85, 15, 0])\n        cube([5, 26, 10]);\n        \n        // Cable clearance\n        translate([85, 20, 0])\n        cube([5, 15, 8]);\n    }\n}\n\n// Assembly\nunion() {\n    bracket_base();\n    standoffs();\n    side_supports();\n    pi_board();\n}",
    "renders": true
  },
  {
    "electronic_device": "plate",
    "openscad_code": "// Realistic Plate-Style Electronic Device (Medium Complexity)\n// A portable media player with screen, buttons, and ports in a flat plate form factor\n\n// Device dimensions (mm)\ndevice_length = 85;\ndevice_width = 50;\ndevice_thickness = 7;\n\n// Colors\nbody_color = \"DarkSlateGray\";\nscreen_color = \"black\";\nbutton_color = \"DimGray\";\nport_color = \"LightGray\";\naccent_color = \"Silver\";\n\n// Main body\nmodule device_body() {\n    difference() {\n        // Main plate\n        color(body_color)\n        cube([device_length, device_width, device_thickness], center = true);\n        \n        // Rounded edges - subtract cubes\n        for(i = [-1, 1])\n        for(j = [-1, 1])\n        translate([i * (device_length/2 - 2), j * (device_width/2 - 2), -device_thickness/2])\n            cylinder(h = device_thickness + 1, r = 2, $fn = 16);\n    }\n}\n\n// Screen recess\nmodule screen_recess() {\n    color(screen_color)\n    translate([0, 10, device_thickness/2 - 0.1])\n        cube([60, 35, 0.2], center = true);\n}\n\n// Screen\nmodule screen() {\n    color(screen_color)\n    translate([0, 10, device_thickness/2 - 0.2])\n        cube([58, 33, 0.1], center = true);\n}\n\n// Button module\nmodule button(x, y, type = \"round\") {\n    translate([x, y, device_thickness/2 - 0.3]) {\n        if(type == \"round\") {\n            // Round button\n            color(button_color)\n            cylinder(h = 0.6, r = 2.5, $fn = 16);\n            color(accent_color)\n            translate([0, 0, 0.61])\n                cylinder(h = 0.1, r = 2.2, $fn = 16);\n        } else {\n            // Square button\n            color(button_color)\n            cube([4, 2.5, 0.6], center = true);\n            color(accent_color)\n            translate([0, 0, 0.61])\n                cube([3.7, 2.2, 0.1], center = true);\n        }\n    }\n}\n\n// Button array\nmodule buttons() {\n    // D-pad style buttons\n    button(-15, -8);\n    button(-10, -8);\n    button(-5, -8);\n    button(0, -8);\n    \n    // Side buttons\n    button(25, 0);\n    button(25, -5);\n    button(25, 5);\n}\n\n// USB-C port\nmodule usb_port() {\n    color(port_color)\n    translate([device_length/2 - 0.1, -5, -device_thickness/4])\n        cube([0.2, 7, device_thickness/2]);\n    \n    // Port opening\n    difference() {\n        translate([device_length/2 - 0.5, -5, -device_thickness/4])\n            cube([1, 7, device_thickness/2]);\n    }\n}\n\n// Headphone jack\nmodule headphone_jack() {\n    color(port_color)\n    translate([device_length/2 - 0.1, 5, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 0.2, r = 3.5, $fn = 16);\n    \n    // Jack opening\n    difference() {\n        translate([device_length/2 - 0.5, 5, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 1, r = 3.5, $fn = 16);\n    }\n}\n\n// Speaker grills\nmodule speakers() {\n    for(side = [-1, 1]) {\n        color(body_color)\n        translate([side * 30, -device_width/2 + 3, 0])\n            for(i = [0:4]) {\n                translate([0, i * 2, device_thickness/2 - 0.1])\n                    cube([1, 1, 0.2]);\n            }\n    }\n}\n\n// Logo\nmodule logo() {\n    color(accent_color)\n    translate([0, -device_width/2 + 8, device_thickness/2 - 0.1])\n        cube([12, 2, 0.1], center = true);\n}\n\n// LED indicator\nmodule led_indicator() {\n    color(\"red\")\n    translate([device_length/2 - 5, device_width/2 - 5, device_thickness/2 - 0.1])\n        cylinder(h = 0.2, r = 1, $fn = 16);\n}\n\n// Assembly\ndevice_body();\nscreen_recess();\nscreen();\nbuttons();\nusb_port();\nheadphone_jack();\nspeakers();\nlogo();\nled_indicator();",
    "renders": true
  },
  {
    "electronic_device": "wire",
    "openscad_code": "// Realistic USB-C Cable (medium complexity, 3D printable)\n// Overall length ~80 mm, designed for 3D printing with minimal supports\n\n// Color definitions\ncolor_body = \"black\";\ncolor_shield = \"silver\";\ncolor_insert = \"white\";\ncolor_wire = \"darkgray\";\ncolor_logo = \"white\";\n\n// Wire parameters\nwire_length = 60;\nwire_diameter = 5;\nshell_thickness = 1.2;\n\n// USB-C connector parameters\nconnector_length = 12;\nconnector_width = 8.6;\nconnector_height = 2.4;\ninsert_depth = 6;\n\n// Strain relief parameters\nstrain_length = 10;\nstrain_diameter = 8;\n\n// Main cable assembly\nmodule usb_c_cable() {\n    // Left USB-C connector\n    translate([0, 0, 0])\n        usb_c_connector();\n    \n    // Left strain relief\n    translate([connector_length, 0, 0])\n        rotate([0, 90, 0])\n            strain_relief();\n    \n    // Wire between strain reliefs\n    translate([connector_length + strain_length, 0, 0])\n        rotate([0, 90, 0])\n            cable_wire(wire_length);\n    \n    // Right strain relief\n    translate([connector_length + strain_length + wire_length, 0, 0])\n        rotate([0, 90, 0])\n            strain_relief();\n    \n    // Right USB-C connector\n    translate([connector_length + strain_length + wire_length + strain_length, 0, 0])\n        usb_c_connector();\n}\n\n// USB-C connector module\nmodule usb_c_connector() {\n    difference() {\n        // Outer metal shell\n        color(color_shield)\n            cube([connector_length, connector_width, connector_height], center = true);\n        \n        // Inner cavity for insert\n        translate([0, 0, -0.8])\n            cube([connector_length + 1, connector_width - 1.2, connector_height - 1], center = true);\n        \n        // USB-C insert opening\n        translate([connector_length/2 - insert_depth/2, 0, 0])\n            cube([insert_depth + 0.1, 6.7, 2.2], center = true);\n    }\n    \n    // Internal insert\n    translate([connector_length/2 - insert_depth/2, 0, 0])\n        color(color_insert)\n            cube([insert_depth, 6.5, 2], center = true);\n    \n    // Connector pins (simplified)\n    for (i = [-3:3]) {\n        translate([connector_length/2 - insert_depth + 1, i * 0.65, 0])\n            color(\"gold\")\n                cube([0.3, 0.3, 1.8], center = true);\n    }\n    \n    // Logo on top\n    translate([0, 0, connector_height/2 + 0.1])\n        color(color_logo)\n            cube([3, 1.5, 0.1], center = true);\n}\n\n// Strain relief module\nmodule strain_relief() {\n    // Flexible boot\n    color(color_body)\n        cylinder(h = strain_length, d1 = strain_diameter, d2 = wire_diameter, center = false, $fn = 20);\n    \n    // Reinforcement rings\n    for (i = [0:2]) {\n        translate([0, 0, i * strain_length/3])\n            color(color_body)\n                cylinder(h = 1, d = strain_diameter + 0.5, center = false, $fn = 20);\n    }\n}\n\n// Wire module\nmodule cable_wire(length) {\n    // Outer insulation\n    color(color_wire)\n        cylinder(h = length, d = wire_diameter, center = false, $fn = 20);\n    \n    // Internal wires (visible in cross-section)\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([wire_diameter/4, 0, length/2])\n                color(\"red\")\n                    cylinder(h = length, d = 1, center = true, $fn = 8);\n    }\n}\n\n// Generate the complete cable\nusb_c_cable();",
    "renders": true
  },
  {
    "electronic_device": "cord",
    "openscad_code": "// USB-C Power Bank\n// Realistic style, medium complexity\n\n// Color definitions\n$fa = 1;\n$fs = 0.4;\n\nmodule power_bank() {\n    // Main body\n    color(\"lightgray\") {\n        difference() {\n            minkowski() {\n                cube([60, 25, 15], center=true);\n                sphere(2);\n            }\n            translate([0, 0, 8])\n                cube([58, 23, 15], center=true);\n        }\n    }\n    \n    // Top cover plate\n    color(\"black\") {\n        translate([0, 0, 7.5])\n            cube([60.5, 25.5, 1], center=true);\n    }\n    \n    // USB-C ports\n    for(x = [-20, -10, 0, 10, 20]) {\n        color(\"darkgray\") {\n            translate([x, -11.5, 2.5])\n                cube([5, 1.5, 4]);\n        }\n    }\n    \n    // LED indicators\n    for(i = [0:3]) {\n        translate([22.5 - i*5, 0, 8]) {\n            color(\"red\") {\n                sphere(0.8);\n            }\n            color(\"black\") translate([0,0,-0.2]) cylinder(h=0.5, r=1.2);\n        }\n    }\n    \n    // Power button\n    color(\"black\") {\n        translate([-25, 0, 8]) {\n            cylinder(h=1.2, r=3);\n            translate([0,0,0.6]) sphere(3);\n        }\n    }\n    \n    // Brand label\n    color(\"white\") {\n        translate([0, 8, 8.5])\n            cube([20, 4, 0.1]);\n    }\n    \n    // Rubber feet\n    for(x = [-20, 20])\n        for(y = [-8, 8]) {\n            color(\"black\") {\n                translate([x, y, -7.5])\n                    cylinder(h=1, r=1.5);\n            }\n        }\n}\n\n// USB-C cable\nmodule cable() {\n    // Cable body\n    color(\"black\") {\n        hull() {\n            translate([-50, 0, 0]) rotate([90,0,0]) cylinder(h=100, r=1.5);\n            translate([50, 0, 0]) rotate([90,0,0]) cylinder(h=100, r=1.5);\n        }\n    }\n    \n    // USB-C connector 1\n    translate([-50, 0, 0]) rotate([90,0,0]) {\n        color(\"silver\") {\n            cylinder(h=6, r=3.5);\n            translate([0,0,6]) cylinder(h=4, r=3);\n        }\n        color(\"black\") {\n            translate([0,0,10]) cube([7, 2.4, 1.5], center=true);\n        }\n    }\n    \n    // USB-C connector 2\n    translate([50, 0, 0]) rotate([90,0,0]) {\n        color(\"silver\") {\n            cylinder(h=6, r=3.5);\n            translate([0,0,6]) cylinder(h=4, r=3);\n        }\n        color(\"black\") {\n            translate([0,0,10]) cube([7, 2.4, 1.5], center=true);\n        }\n    }\n    \n    // Strain relief\n    for(pos = [-50, 50]) {\n        color(\"darkgray\") {\n            translate([pos,0,0]) rotate([90,0,0]) \n                cylinder(h=8, r1=2.5, r2=3.5);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) power_bank();\ntranslate([0, 30, 0]) cable();",
    "renders": true
  },
  {
    "electronic_device": "clip",
    "openscad_code": "// Clip-on fitness tracker with heart-rate sensor, OLED screen and USB-C port\n// Overall size: 65 mm x 35 mm x 12 mm\n// 3 mm wall thickness – printable without supports\n\n$fn = 24;\n\n// Main colors\ncolor_case   = [0.15, 0.15, 0.15];   // dark grey\ncolor_screen = [0, 0, 0];            // black\ncolor_accent = [0.86, 0.08, 0.24];   // red accent\ncolor_metal  = [0.7, 0.7, 0.75];     // aluminium\n\n// Main body\nmodule tracker_body() {\n    difference() {\n        // Outer rounded shell\n        minkowski() {\n            cube([65, 35, 9], center = true);\n            sphere(3);\n        }\n        // Hollow cavity\n        translate([0, 0, 1])\n            minkowski() {\n                cube([59, 29, 9], center = true);\n                sphere(2);\n            }\n    }\n}\n\n// OLED display window\nmodule screen() {\n    color(color_screen)\n    translate([0, 10, 5.5])\n        cube([30, 10, 0.5], center = true);\n}\n\n// Side buttons\nmodule buttons() {\n    for (y = [-8, 0, 8])\n        translate([34, y, 0])\n            color(color_accent)\n            rotate([90, 0, 0])\n                cylinder(h = 3, d = 4, center = true);\n}\n\n// USB-C port cutout\nmodule usbc_port() {\n    translate([-34, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 20, d = 8.5, center = true);\n}\n\n// Clip mechanism\nmodule clip() {\n    difference() {\n        // Springy clip arm\n        translate([0, -30, -4])\n            color(color_metal) {\n                rotate([0, -10, 0])\n                    minkowski() {\n                        cube([65, 25, 3], center = true);\n                        sphere(1.5);\n                    }\n            }\n        // Finger cutout\n        translate([0, -40, -2])\n            cube([45, 15, 15], center = true);\n    }\n}\n\n// Heart-rate sensor lens\nmodule hr_sensor() {\n    translate([0, -10, -5.5])\n        color([0.1, 0.1, 0.4])\n            cylinder(h = 1.5, d = 12, center = true);\n}\n\n// Logo emboss\nmodule logo() {\n    translate([22, 0, 5.5])\n        linear_extrude(0.5)\n            text(\"FIT\", size = 6, halign = \"center\", valign = \"center\");\n}\n\n// Assembly\ncolor(color_case) tracker_body();\nscreen();\nbuttons();\nclip();\nhr_sensor();\nlogo();\n\ndifference() {\n    // Apply USB-C hole after main body\n    color(color_case) tracker_body();\n    usbc_port();\n}",
    "renders": true
  },
  {
    "electronic_device": "clamp",
    "openscad_code": "// Electronic Clamp Multimeter – OpenSCAD\n// 3D-printable, medium-complexity, realistic style\n\n$fa = 2;\n$fs = 0.5;\n\nmodule body() {\n    difference() {\n        color(\"DarkSlateGray\")\n        union() {\n            // Main shell\n            translate([-12, -15, 0])\n                cube([24, 30, 60]);\n            \n            // Front bezel\n            translate([-18, -20, 55])\n                cube([36, 40, 5]);\n            \n            // Back grip bulge\n            translate([-14, -12, 0])\n                cube([28, 24, 20]);\n        }\n        \n        // Display window\n        translate([-15, -17, 59.9])\n            cube([30, 34, 0.2]);\n        \n        // Probe jacks\n        for(x=[-8,8]) {\n            translate([x, 0, 10])\n                rotate([90,0,0])\n                    cylinder(h=5, d=8, $fn=20);\n            translate([x, 0, 0])\n                cylinder(h=12, d=5, $fn=20);\n        }\n        \n        // Battery cover\n        translate([-10, 15.1, 5])\n            cube([20, 2, 25]);\n    }\n}\n\nmodule display() {\n    color(\"black\")\n    translate([-14, -16, 59.8])\n        cube([28, 32, 0.5]);\n    \n    // Segments for LCD\n    color(\"lime\")\n    for(y=[-8,-4,0,4,8])\n        translate([-12, y, 60])\n            cube([24, 1, 0.1]);\n}\n\nmodule buttons() {\n    // Rotary selector ring\n    color(\"DimGray\")\n    translate([0, 0, 52])\n        cylinder(h=3, d1=28, d2=28, $fn=60);\n    \n    // Pointer knob\n    color(\"Red\")\n    translate([14, 0, 53.5])\n        cube([3, 4, 1]);\n    \n    // Function buttons\n    for(i=[0:1]) {\n        color(\"Silver\")\n        translate([-6 + i*12, 0, 57])\n            cube([5, 5, 2]);\n    }\n}\n\nmodule clamp_jaw() {\n    color(\"FireBrick\")\n    union() {\n        // Fixed jaw root\n        translate([0, -15, 40])\n            rotate([0, 90, 0])\n                cylinder(h=20, d=14, $fn=40);\n        \n        // Movable jaw (closed position)\n        translate([0, 15, 40])\n            rotate([0, 90, 0])\n                cylinder(h=20, d=14, $fn=40);\n        \n        // Jaw tips\n        color(\"Silver\")\n        translate([0, 0, 35])\n            rotate([0, 90, 0])\n                cylinder(h=5, d1=10, d2=6, $fn=40);\n    }\n}\n\nmodule logo() {\n    color(\"White\")\n    translate([-7, -10, 25])\n        linear_extrude(height=0.5)\n            text(\"CLAMP-TECH\", size=2);\n}\n\nbody();\ndisplay();\nbuttons();\nclamp_jaw();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "tie",
    "openscad_code": "// Tie-shaped electronic device - smart wearable fashion\n// Dimensions: 50mm wide x 95mm long x 8mm thick\n\n$fn = 24;\n\n// Main colors\ndevice_color = [0.1, 0.1, 0.1];  // Dark grey/black\nscreen_color = [0, 0.8, 1];    // Cyan display\nbutton_color = [0.3, 0.3, 0.3]; // Medium grey\naccent_color = [0.8, 0.2, 0.2]; // Red accent\n\nmodule tie_body() {\n    // Main tie shape - tapered rectangle with rounded bottom\n    difference() {\n        union() {\n            // Upper rectangular section\n            translate([-25, 40, -4])\n                cube([50, 55, 8]);\n            \n            // Lower tapered section\n            for(i = [0:9]) {\n                translate([0, 40 - i*5.5, -4])\n                    scale([1 - i*0.07, 1, 1])\n                        cube([50, 5.5, 8]);\n            }\n        }\n        \n        // Rounded bottom cutout\n        translate([0, -15, -5])\n            cylinder(h=10, r=25);\n    }\n}\n\nmodule display() {\n    // Main display screen\n    color(screen_color)\n    translate([-20, 35, 4.1])\n        cube([40, 30, 0.5]);\n    \n    // Screen bezel\n    color(device_color)\n    difference() {\n        translate([-22, 33, 4])\n            cube([44, 34, 0.5]);\n        \n        translate([-20.5, 35.5, 4.1])\n            cube([41, 31, 0.7]);\n    }\n}\n\nmodule navigation_buttons() {\n    // D-pad style navigation\n    color(button_color)\n    union() {\n        // Center button\n        translate([0, 10, 4.5])\n            cylinder(h=1.5, r=5);\n        \n        // Directional buttons\n        translate([0, 10, 4.5])\n            rotate([90, 0, 0])\n                cylinder(h=1.5, r=2.5);\n        \n        translate([0, 10, 4.5])\n            rotate([0, 90, 0])\n                cylinder(h=1.5, r=2.5);\n    }\n}\n\nmodule power_button() {\n    // Side power button\n    color(accent_color)\n    translate([25.5, 25, 0])\n        rotate([0, 90, 0])\n            cylinder(h=8, r=3);\n}\n\nmodule usb_port() {\n    // USB-C port on bottom\n    color([0.2, 0.2, 0.2])\n    translate([0, -10, -4])\n        cube([8, 2, 3]);\n}\n\nmodule sensors() {\n    // Heart rate sensor array\n    color([0.15, 0.15, 0.15])\n    for(i = [0:2]) {\n        translate([-15 + i*15, -5, 4.1])\n            cylinder(h=0.5, r=3);\n    }\n}\n\nmodule logo() {\n    // Company logo (simple triangle)\n    color([0.8, 0.8, 0.8])\n    translate([0, 20, 4.6])\n        linear_extrude(0.3)\n            polygon(points=[[-5, -3], [5, -3], [0, 4]]);\n}\n\nmodule strap_connectors() {\n    // Top connectors for strap attachment\n    color(device_color)\n    difference() {\n        translate([-20, 50, 0])\n            cube([40, 5, 8]);\n        \n        // Connection holes\n        for(x = [-15, -5, 5, 15]) {\n            translate([x, 52.5, 0])\n                cylinder(h=10, r=2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    color(device_color) tie_body();\n    display();\n    navigation_buttons();\n    power_button();\n    usb_port();\n    sensors();\n    logo();\n    strap_connectors();\n}",
    "renders": true
  },
  {
    "electronic_device": "wrap",
    "openscad_code": "// Wrap-style fitness tracker\n// Dimensions approximately 55 mm x 38 mm x 12 mm\n\n// Color definitions\nbody_color = [0.2, 0.2, 0.2];    // Dark gray rubber\nscreen_color = [0.05, 0.05, 0.05]; // Black screen\naccent_color = [0.8, 0.8, 0.8];   // Light gray accent\nbutton_color = [0.4, 0.4, 0.4];   // Medium gray\n\n// Overall module\nmodule fitness_tracker() {\n    // Main body with wrap-around band\n    union() {\n        // Central tracker body\n        translate([0, 0, 6])\n            color(body_color)\n            difference() {\n                // Main rounded body\n                rounded_box([38, 22, 12], 3);\n                \n                // Screen recess\n                translate([0, 0, 5.9])\n                    color(screen_color)\n                    cube([32, 16, 0.2], center=true);\n            }\n        \n        // Top wrap band\n        translate([0, 14, 0])\n            color(body_color)\n            difference() {\n                // Curved top band\n                rotate_extrude(angle=180, convexity=10)\n                    translate([30, 0, 0])\n                        square([2, 12], center=true);\n                \n                // Holes for ventilation\n                for (i = [-20:5:20]) {\n                    translate([i, 0, 0])\n                        cylinder(h=3, d=1.5, center=true);\n                }\n            }\n        \n        // Bottom wrap band\n        translate([0, -14, 0])\n            color(body_color)\n            mirror([0, 1, 0])\n                difference() {\n                    rotate_extrude(angle=180, convexity=10)\n                        translate([30, 0, 0])\n                            square([2, 12], center=true);\n                    \n                    // Holes for ventilation\n                    for (i = [-20:5:20]) {\n                        translate([i, 0, 0])\n                            cylinder(h=3, d=1.5, center=true);\n                    }\n                    \n                    // Buckle hole\n                    translate([15, 0, 0])\n                        cylinder(h=4, d=4, center=true);\n                }\n        \n        // Side button\n        translate([19.5, 0, 6])\n            color(button_color)\n            cylinder(h=3, d=4, center=true);\n        \n        // Heart rate sensor window\n        translate([0, 0, 0.5])\n            color(accent_color)\n            difference() {\n                cylinder(h=1, d=8, center=false);\n                cylinder(h=2, d=6, center=false);\n            }\n        \n        // Charging contacts\n        translate([-15, 0, 0.5])\n            color(accent_color)\n            cube([2, 8, 0.5], center=true);\n        translate([15, 0, 0.5])\n            color(accent_color)\n            cube([2, 8, 0.5], center=true);\n    }\n}\n\n// Helper module for rounded box\nmodule rounded_box(size, radius) {\n    hull() {\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                for (z = [-1, 1]) {\n                    translate([x * (size[0]/2 - radius), \n                              y * (size[1]/2 - radius), \n                              z * (size[2]/2 - radius)])\n                        sphere(r=radius);\n                }\n            }\n        }\n    }\n}\n\n// Render the tracker\nfitness_tracker();",
    "renders": true
  },
  {
    "electronic_device": "sleeve",
    "openscad_code": "// Smartwatch Sleeve with USB-C port, side buttons, and LED indicators\n// Designed for 3D printing with 2mm wall thickness and no overhangs\n\n// Colors\ncolor_case = \"DimGray\";\ncolor_screen = \"Black\";\ncolor_buttons = \"RoyalBlue\";\ncolor_led = \"Red\";\ncolor_usb = \"Silver\";\n\n// Dimensions\nsleeve_length = 60;\nsleeve_width = 45;\nsleeve_height = 15;\nwall_thickness = 2;\nscreen_width = 35;\nscreen_height = 30;\nbutton_radius = 3;\nbutton_depth = 1.5;\nusb_width = 8;\nusb_height = 3;\n\n// Main sleeve module\nmodule smartwatch_sleeve() {\n    difference() {\n        // Outer shell\n        color(color_case)\n        translate([0, 0, sleeve_height/2])\n        cube([sleeve_width, sleeve_length, sleeve_height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, sleeve_height/2])\n        cube([sleeve_width - 2*wall_thickness, \n              sleeve_length - 2*wall_thickness, \n              sleeve_height], center=true);\n        \n        // Top opening for screen\n        translate([0, sleeve_length/2 - wall_thickness, sleeve_height - wall_thickness])\n        cube([screen_width, screen_width, wall_thickness*2], center=true);\n    }\n    \n    // Screen bezel\n    color(color_screen)\n    translate([0, sleeve_length/2 - 1, sleeve_height - wall_thickness])\n    cube([screen_width + 4, screen_height + 4, 0.5], center=true);\n    \n    // Screen\n    color(color_screen)\n    translate([0, sleeve_length/2 - 1, sleeve_height - wall_thickness + 0.5])\n    cube([screen_width, screen_height, 0.2], center=true);\n    \n    // Side buttons (2 buttons)\n    for(i = [0:1]) {\n        color(color_buttons)\n        translate([sleeve_width/2 - wall_thickness/2, \n                  10 + i*15, \n                  sleeve_height/2 + 3])\n        rotate([0, 90, 0])\n        cylinder(h=wall_thickness*2, r=button_radius, $fn=20);\n    }\n    \n    // USB-C port\n    color(color_usb)\n    difference() {\n        translate([0, -sleeve_length/2 + wall_thickness, sleeve_height/2])\n        cube([usb_width, wall_thickness*2, usb_height], center=true);\n        \n        // USB-C internal cavity\n        translate([0, -sleeve_length/2 + wall_thickness, sleeve_height/2])\n        cube([usb_width - 2, wall_thickness*2 + 1, usb_height - 1], center=true);\n    }\n    \n    // LED indicators (3 LEDs)\n    for(i = [0:2]) {\n        color(color_led)\n        translate([-sleeve_width/2 + 3 + i*5, sleeve_length/2 - 3, sleeve_height - 1])\n        cube([2, 2, 0.5], center=true);\n    }\n    \n    // Ventilation holes\n    for(i = [0:3]) {\n        for(j = [0:2]) {\n            translate([-sleeve_width/2 + 5 + i*10, \n                      -sleeve_length/2 + 5 + j*15, \n                      sleeve_height/2])\n            cylinder(h=sleeve_height, r=1, $fn=12);\n        }\n    }\n    \n    // Charging pins\n    color(color_usb)\n    translate([sleeve_width/2 - wall_thickness - 5, 0, wall_thickness])\n    cube([2, 4, 1], center=true);\n}\n\n// Render the sleeve\nsmartwatch_sleeve();",
    "renders": true
  },
  {
    "electronic_device": "tube",
    "openscad_code": "// Realistic Tube Electronic Device - Vacuum Tube Model\n// A detailed 6L6GC power pentode tube replica\n\n$fn = 32;\n\n// Main colors\ncolor_glass = [0.8, 0.9, 1.0, 0.6];\ncolor_metal = [0.4, 0.4, 0.4];\ncolor_dark_metal = [0.2, 0.2, 0.2];\ncolor_gold = [0.9, 0.7, 0.2];\ncolor_ceramic = [0.95, 0.95, 0.9];\n\n// Overall dimensions\ntube_height = 85;\ntube_diameter = 32;\n\nmodule tube_glass_envelope() {\n    color(color_glass)\n    difference() {\n        // Main glass envelope\n        cylinder(h = 55, d1 = tube_diameter, d2 = tube_diameter * 0.95);\n        \n        // Top dome\n        translate([0, 0, 55])\n        sphere(d = tube_diameter * 0.95);\n        \n        // Bottom opening\n        translate([0, 0, -1])\n        cylinder(h = 2, d = tube_diameter * 0.6);\n    }\n}\n\nmodule tube_base() {\n    color(color_ceramic)\n    difference() {\n        // Octal base\n        cylinder(h = 12, d = tube_diameter * 1.1);\n        \n        // Keyway\n        translate([tube_diameter * 0.45, 0, -1])\n        cube([4, 8, 14], center = true);\n        \n        // Pin holes\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([tube_diameter * 0.4, 0, -1])\n            cylinder(h = 14, d = 2.2);\n        }\n    }\n}\n\nmodule tube_pins() {\n    color(color_dark_metal)\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([tube_diameter * 0.4, 0, -15])\n        cylinder(h = 15, d = 1.8);\n    }\n}\n\nmodule getter_flash() {\n    // Silver getter flash on top\n    color(color_dark_metal)\n    translate([0, 0, 60])\n    rotate([0, 90, 0])\n    cylinder(h = 0.5, d = tube_diameter * 0.8);\n}\n\nmodule internal_plates() {\n    // Visible internal structure\n    color(color_dark_metal)\n    translate([0, 0, 25])\n    linear_extrude(height = 20, center = true)\n    offset(r = 1)\n    offset(r = -2)\n    offset(r = 1)\n    circle(d = tube_diameter * 0.7);\n}\n\nmodule tube_base_plate() {\n    color(color_metal)\n    difference() {\n        // Metal base plate\n        cylinder(h = 3, d = tube_diameter * 1.15);\n        \n        // Center hole\n        cylinder(h = 4, d = tube_diameter * 0.5);\n        \n        // Ventilation holes\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([tube_diameter * 0.35, 0, -1])\n            cylinder(h = 5, d = 4);\n        }\n    }\n}\n\nmodule tube_label() {\n    // Raised label text\n    color(color_gold)\n    translate([-8, tube_diameter * 0.5 + 1, 30])\n    rotate([90, 0, 0])\n    linear_extrude(height = 0.5)\n    text(\"6L6GC\", size = 4);\n}\n\n// Assembly\nunion() {\n    // Main glass envelope\n    tube_glass_envelope();\n    \n    // Internal visible structure\n    internal_plates();\n    \n    // Base assembly\n    translate([0, 0, -12])\n    union() {\n        tube_base();\n        tube_pins();\n    }\n    \n    // Metal base plate\n    translate([0, 0, -15])\n    tube_base_plate();\n    \n    // Getter flash on top\n    getter_flash();\n    \n    // Identification label\n    tube_label();\n}",
    "renders": true
  },
  {
    "electronic_device": "duct",
    "openscad_code": "// Air-quality sensor duct unit – medium-complexity realistic style\n// Overall footprint ≈ 70 mm × 60 mm × 60 mm, printable without support\n\nwall = 1.6;          // 3-D-print friendly wall thickness\ncorner = 3;          // corner radius for printability\n$fn = 32;            // smooth curves\n\n// ---------- main shell ----------\nmodule duct_shell(){\n    difference(){\n        // rounded main body\n        minkowski(){\n            cube([68, 58, 40], center=true);\n            cylinder(h=0.01, r=corner, center=true);\n        }\n\n        // left intake\n        translate([-34, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=60, r=23, center=true);\n\n        // right exhaust\n        translate([34, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=60, r=23, center=true);\n\n        // cavity for electronics\n        translate([0, 0, 5])\n            cube([64-wall*2, 54-wall*2, 40-wall], center=true);\n    }\n}\n\n// ---------- mounting flanges ----------\nmodule flanges(){\n    for(side=[-1, 1])\n        translate([side*42, 0, 0])\n            rotate([0, 90, 0])\n                difference(){\n                    cylinder(h=8, r=28);\n                    cylinder(h=10, r=23);\n                    translate([0, 0, -1])\n                        cylinder(h=10, r=2.2);  // screw hole\n                }\n}\n\n// ---------- PCB and components ----------\nmodule electronics(){\n    color(\"green\")\n    translate([0, 0, -12])\n        cube([60, 40, 1.6], center=true);\n\n    // sensor capsule\n    color(\"silver\")\n    translate([0, 0, -10])\n        cylinder(h=8, r=7);\n\n    // RGB status LED\n    color(\"red\")\n    translate([-20, 15, -10])\n        sphere(r=1.5);\n\n    color(\"green\")\n    translate([-20, 15, -7])\n        sphere(r=1.5);\n\n    color(\"blue\")\n    translate([-20, 15, -4])\n        sphere(r=1.5);\n}\n\n// ---------- user interface ----------\nmodule ui(){\n    // OLED display\n    color(\"black\")\n    translate([0, -30, 0])\n        cube([30, 12, 2]);\n\n    // membrane buttons\n    for(x=[-10, 0, 10])\n        color(\"gray\")\n        translate([x, -30, 1.5])\n            cylinder(h=1, r=3);\n\n    // micro-USB port\n    color(\"darkslategray\")\n    translate([25, 0, -15])\n        rotate([0, 90, 0])\n            cube([7, 10, 3]);\n}\n\n// ---------- assembly ----------\nunion(){\n    color(\"lightgray\") duct_shell();\n    color(\"lightgray\") flanges();\n    electronics();\n    ui();\n}",
    "renders": true
  },
  {
    "electronic_device": "vent",
    "openscad_code": "// Realistic electronic vent device with medium complexity\n// Features: front grille, display, buttons, ports, mounting tabs\n\n$fn = 32;\n\n// Main dimensions\nbody_width = 80;\nbody_height = 60;\nbody_depth = 25;\ngrille_depth = 3;\nwall_thickness = 2;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_grille = [0.3, 0.3, 0.3];\ncolor_display = [0.1, 0.1, 0.1];\ncolor_buttons = [0.4, 0.4, 0.4];\ncolor_led = [0, 1, 0];\n\nmodule main_body() {\n    color(color_body)\n    difference() {\n        // Main housing\n        cube([body_width, body_height, body_depth], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n        cube([body_width-wall_thickness*2, body_height-wall_thickness*2, body_depth], center=true);\n        \n        // Front grille opening\n        translate([0, 0, body_depth/2 - grille_depth])\n        cube([body_width-wall_thickness*4, body_height-wall_thickness*4, grille_depth*2], center=true);\n    }\n}\n\nmodule vent_grille() {\n    color(color_grille)\n    translate([0, 0, body_depth/2 - grille_depth/2])\n    difference() {\n        cube([body_width-wall_thickness*4, body_height-wall_thickness*4, grille_depth], center=true);\n        \n        // Vertical slots\n        for(x = [-30:6:30]) {\n            translate([x, 0, 0])\n            cube([2, body_height-wall_thickness*4 + 2, grille_depth + 1], center=true);\n        }\n        \n        // Horizontal slots\n        for(y = [-20:6:20]) {\n            translate([0, y, 0])\n            cube([body_width-wall_thickness*4 + 2, 2, grille_depth + 1], center=true);\n        }\n    }\n}\n\nmodule display() {\n    color(color_display)\n    translate([0, body_height/4, body_depth/2 - 1])\n    cube([30, 10, 0.5], center=true);\n    \n    // Display content (simple representation)\n    color([0, 0.8, 0])\n    translate([0, body_height/4, body_depth/2 - 0.7])\n    cube([26, 6, 0.1], center=true);\n}\n\nmodule control_buttons() {\n    // Power button\n    color(color_buttons)\n    translate([-body_width/4, -body_height/3, body_depth/2 - 2])\n    cylinder(h=2, r=3, center=true);\n    \n    // Mode button\n    translate([0, -body_height/3, body_depth/2 - 2])\n    cylinder(h=2, r=3, center=true);\n    \n    // Settings button\n    translate([body_width/4, -body_height/3, body_depth/2 - 2])\n    cylinder(h=2, r=3, center=true);\n}\n\nmodule status_led() {\n    color(color_led)\n    translate([body_width/3, body_height/3, body_depth/2 - 1])\n    cylinder(h=1, r=1.5, center=true);\n}\n\nmodule side_ports() {\n    // USB-C port\n    color(color_body)\n    translate([body_width/2 - 1, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h=6, r=2.5, center=true);\n    \n    // Power jack\n    translate([body_width/2 - 1, 15, 0])\n    rotate([90, 0, 0])\n    cylinder(h=8, r=3.5, center=true);\n}\n\nmodule mounting_tabs() {\n    // Top tabs\n    translate([body_width/2 - 10, body_height/2, 0])\n    cube([20, 5, 3], center=true);\n    \n    translate([-body_width/2 + 10, body_height/2, 0])\n    cube([20, 5, 3], center=true);\n    \n    // Bottom tabs\n    translate([body_width/2 - 10, -body_height/2, 0])\n    cube([20, 5, 3], center=true);\n    \n    translate([-body_width/2 + 10, -body_height/2, 0])\n    cube([20, 5, 3], center=true);\n    \n    // Mounting holes\n    for(x = [-body_width/2 + 10, body_width/2 - 10])\n    for(y = [-body_height/2, body_height/2]) {\n        translate([x, y, 0])\n        cylinder(h=5, r=1.5, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    vent_grille();\n    display();\n    control_buttons();\n    status_led();\n    side_ports();\n    mounting_tabs();\n}",
    "renders": true
  },
  {
    "electronic_device": "fan",
    "openscad_code": "// Desktop USB Fan - Realistic Style, Medium Complexity\n// Overall dimensions: ~80mm diameter x ~45mm depth\n\n// Parameters\nfan_diameter = 80;\nfan_depth = 20;\nguard_thickness = 1.5;\nblade_count = 5;\nbase_width = 40;\nbase_height = 15;\nusb_port_depth = 8;\nusb_port_width = 12;\nbutton_diameter = 6;\nled_diameter = 3;\n\n// Colors\nbody_color = [0.15, 0.15, 0.15];  // Dark gray\nblade_color = [0.8, 0.8, 0.8];    // Light gray\nguard_color = [0.5, 0.5, 0.5];    // Mid gray\naccent_color = [0.9, 0.1, 0.1];   // Red accent\n\n// Main fan assembly\nmodule fan_assembly() {\n    // Front guard\n    color(guard_color)\n    translate([0, 0, fan_depth/2 + guard_thickness/2])\n        fan_guard();\n\n    // Rear guard\n    color(guard_color)\n    translate([0, 0, -fan_depth/2 - guard_thickness/2])\n        fan_guard();\n\n    // Fan body/housing\n    color(body_color)\n    difference() {\n        cylinder(h = fan_depth, d = fan_diameter, $fn = 64);\n        \n        // Hollow center for motor\n        translate([0, 0, -1])\n            cylinder(h = fan_depth + 2, d = 25, $fn = 32);\n    }\n\n    // Fan blades\n    color(blade_color)\n    translate([0, 0, -2])\n        fan_blades();\n\n    // Motor hub\n    color(body_color)\n    translate([0, 0, -4])\n        cylinder(h = 8, d = 15, $fn = 32);\n\n    // Base/stand\n    color(body_color)\n    translate([0, 0, -fan_depth/2 - base_height])\n        base();\n}\n\n// Fan guard with concentric rings\nmodule fan_guard() {\n    difference() {\n        cylinder(h = guard_thickness, d = fan_diameter, $fn = 64);\n        \n        // Remove center hole\n        translate([0, 0, -1])\n            cylinder(h = guard_thickness + 2, d = 20, $fn = 32);\n    }\n    \n    // Radial spokes\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([fan_diameter/4, -guard_thickness/2, 0])\n                cube([fan_diameter/2, guard_thickness, guard_thickness]);\n    }\n}\n\n// Fan blades with realistic twist\nmodule fan_blades() {\n    for(i = [0:blade_count-1]) {\n        rotate([0, 0, i * (360/blade_count)])\n            translate([0, 12, 0])\n                rotate([0, 15, 0])\n                    scale([1, 0.8, 0.2])\n                        cylinder(h = 25, d1 = 15, d2 = 8, $fn = 3);\n    }\n}\n\n// Base with electronics\nmodule base() {\n    difference() {\n        // Main base\n        cube([base_width, base_width, base_height], center = true);\n        \n        // USB port\n        translate([0, -base_width/2 - 1, 3])\n            cube([usb_port_width, usb_port_depth, 7]);\n            \n        // Power button\n        translate([base_width/4, base_width/4, base_height/2 + 1])\n            cylinder(h = button_diameter + 2, d = button_diameter, $fn = 16);\n            \n        // LED indicator\n        translate([-base_width/4, base_width/4, base_height/2 + 1])\n            cylinder(h = led_diameter + 2, d = led_diameter, $fn = 16);\n    }\n    \n    // USB port interior\n    color([0.2, 0.2, 0.2])\n    translate([0, -base_width/2 - 0.5, 3])\n        cube([usb_port_width - 2, 1, 5]);\n    \n    // Power button\n    color(accent_color)\n    translate([base_width/4, base_width/4, base_height/2 + button_diameter/2 + 1])\n        cylinder(h = 1, d = button_diameter - 2, $fn = 16);\n    \n    // LED\n    color([0, 1, 0])\n    translate([-base_width/4, base_width/4, base_height/2 + led_diameter/2 + 1])\n        cylinder(h = 1, d = led_diameter - 1, $fn = 16);\n}\n\n// Assembly call\nfan_assembly();",
    "renders": true
  },
  {
    "electronic_device": "cooler",
    "openscad_code": "// Cooler-style mini-fridge for electronics cooling\n// Features: intake/exhaust vents, control panel, status LEDs, USB-C port, carrying handle\n// Size: 65x55x75 mm, wall thickness 2 mm for 3D printing\n\n$fn = 32;  // Smooth curves\n\n// Main color scheme\ncolor_body = \"mintcream\";\ncolor_accent = \"lightgrey\";\ncolor_dark = \"dimgray\";\ncolor_led = \"red\";\n\nmodule cooler_body() {\n    difference() {\n        // Main shell with rounded top\n        union() {\n            translate([0, 0, 37.5]) scale([32.5, 27.5, 37.5]) sphere(1);\n            translate([-32.5, -27.5, 0]) cube([65, 55, 75]);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 2]) scale([31.5, 26.5, 36.5]) sphere(1);\n        translate([-31.5, -26.5, 2]) cube([63, 53, 73]);\n    }\n}\n\nmodule intake_vent() {\n    // Front intake vent with slats\n    for (i = [0:6]) {\n        translate([-30, -20 + i*6, 10]) cube([2, 3, 20]);\n    }\n}\n\nmodule exhaust_vent() {\n    // Rear exhaust vent\n    for (i = [0:4]) {\n        translate([28, -15 + i*7.5, 45]) cube([2, 5, 15]);\n    }\n}\n\nmodule control_panel() {\n    // Control panel area\n    difference() {\n        translate([25, -22, 55]) cube([8, 10, 4]);\n        translate([26, -21, 56]) cube([6, 8, 2]);  // Recessed area\n    }\n    \n    // Power button\n    translate([28.5, -18, 58]) cylinder(h=1.5, r=2);\n    \n    // Temperature buttons\n    translate([28.5, -22, 58]) cylinder(h=1, r=1.2);\n    translate([28.5, -14, 58]) cylinder(h=1, r=1.2);\n}\n\nmodule status_leds() {\n    // Status LEDs\n    translate([-28, -20, 58]) cylinder(h=1, r=1.5);\n    translate([-28, -15, 58]) cylinder(h=1, r=1.5);\n    translate([-28, -10, 58]) cylinder(h=1, r=1.5);\n}\n\nmodule usb_port() {\n    // USB-C port\n    difference() {\n        translate([-25, 22, 25]) cube([8, 2, 4]);\n        translate([-24, 22.5, 26]) cube([6, 3, 2]);\n    }\n}\n\nmodule carrying_handle() {\n    // Retractable handle\n    translate([0, 0, 75]) {\n        difference() {\n            // Handle base\n            cube([50, 5, 3], center=true);\n            // Handle grip\n            translate([0, 0, 1.5]) cube([40, 3, 2], center=true);\n        }\n    }\n}\n\nmodule cooler_feet() {\n    // Rubber feet\n    for (x = [-25, 25]) {\n        for (y = [-20, 20]) {\n            translate([x, y, -1]) cylinder(h=2, r=3);\n        }\n    }\n}\n\n// Assembly\ncolor(color_body) cooler_body();\ncolor(color_accent) {\n    intake_vent();\n    exhaust_vent();\n    carrying_handle();\n    cooler_feet();\n}\ncolor(color_dark) {\n    control_panel();\n    usb_port();\n}\ncolor(color_led) status_leds();",
    "renders": true
  },
  {
    "electronic_device": "heatsink",
    "openscad_code": "// Realistic Medium-Complexity Heatsink for TO-220 Package\n// Size: 60mm x 40mm x 35mm overall\n\ncolor(\"silver\") \n    union() {\n        // Base plate with mounting holes\n        difference() {\n            translate([0, 0, 2])\n                cube([60, 40, 4], center=true);\n            \n            // Mounting holes (3mm diameter)\n            for(x=[-20, 20])\n                translate([x, -15, -1])\n                    cylinder(h=6, d=3.2, center=true, $fn=20);\n        }\n        \n        // TO-220 mounting pad (raised platform)\n        translate([0, 0, 4])\n            cube([20, 15, 2], center=true);\n        \n        // Central fin block\n        difference() {\n            translate([0, 0, 15])\n                cube([50, 35, 20], center=true);\n            \n            // Parallel fin cuts\n            for(y=[-15:5:15])\n                translate([0, y, 15])\n                    cube([48, 0.5, 20], center=true);\n        }\n        \n        // Side fins (angled for better airflow)\n        module angled_fin(offset_x, angle) {\n            translate([offset_x, 0, 15])\n                rotate([0, angle, 0])\n                    cube([2, 35, 15], center=true);\n        }\n        \n        // Left side fins\n        for(x=[-25:5:-15])\n            angled_fin(x, 5);\n            \n        // Right side fins\n        for(x=[15:5:25])\n            angled_fin(x, -5);\n        \n        // TO-220 transistor package\n        color(\"black\")\n            translate([0, 0, 7])\n                cube([10, 15, 5], center=true);\n        \n        // Transistor legs\n        color(\"gold\")\n            for(x=[-3, 0, 3])\n                translate([x, 15, 7])\n                    cylinder(h=8, d=0.8, $fn=8);\n        \n        // Thermal pad indicator\n        color(\"gray\")\n            translate([0, 0, 6])\n                cube([9, 13, 0.2], center=true);\n        \n        // Part number engraving\n        color(\"black\")\n            translate([-25, 0, 4.1])\n                rotate([0, 0, 90])\n                    linear_extrude(height=0.3)\n                        text(\"HS-220\", size=3, font=\"Arial:style=Bold\");\n        \n        // Airflow direction arrows\n        color(\"blue\")\n            translate([0, 20, 12])\n                for(i=[0:1:2])\n                    translate([i*5-5, 0, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h=2, d1=3, d2=0, $fn=3);\n    }\n\n// Print orientation helper (disable for final print)\n%translate([0, 0, -20])\n    cube([60, 40, 0.5], center=true);",
    "renders": true
  },
  {
    "electronic_device": "mat",
    "openscad_code": "// OpenSCAD code for a realistic smartphone-style mat electronic device\n// Dimensions: ~80 mm x 50 mm x 8 mm\n\n$fn = 32;\n\n// Main colors\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_body = [0.85, 0.85, 0.85];\ncolor_button = [0.3, 0.3, 0.3];\ncolor_port = [0.2, 0.2, 0.2];\n\n// Main body\ncolor(color_body)\ndifference() {\n    cube([75, 45, 7]);\n    \n    // Rounded corners\n    translate([2, 2, -1]) cube([4, 4, 9]);\n    translate([69, 2, -1]) cube([4, 4, 9]);\n    translate([2, 39, -1]) cube([4, 4, 9]);\n    translate([69, 39, -1]) cube([4, 4, 9]);\n    \n    // Camera cutout\n    translate([65, 8, 0]) cylinder(h=8, d=6);\n    \n    // Flash cutout\n    translate([65, 18, 0]) cylinder(h=8, d=4);\n}\n\n// Screen\ncolor(color_screen)\ntranslate([2.5, 2.5, 6.9])\ncube([70, 40, 0.2]);\n\n// Screen bezel detail\ndifference() {\n    translate([2.5, 2.5, 6.8])\n    cube([70, 40, 0.1]);\n    \n    // Screen visible area\n    translate([5, 5, 6.7])\n    cube([64, 34, 0.3]);\n}\n\n// Home button\ncolor(color_button)\ntranslate([37.5, 42.5, 6.9])\ncylinder(h=0.5, d=8);\n\n// Volume buttons\nmodule volume_buttons() {\n    color(color_button)\n    for(i = [0:1]) {\n        translate([-0.5, 15 + i*10, 3.5])\n        rotate([0, 90, 0])\n        cylinder(h=3, d=1.5);\n    }\n}\n\nvolume_buttons();\n\n// Power button\ncolor(color_button)\ntranslate([-0.5, 25, 3.5])\nrotate([0, 90, 0])\ncylinder(h=5, d=1.5);\n\n// USB-C port\ncolor(color_port)\ntranslate([37.5, 0, 2])\nrotate([90, 0, 0])\ncylinder(h=4, d=6);\n\n// Speaker grill\nmodule speaker_grill() {\n    color(color_port)\n    for(i = [0:5]) {\n        translate([15 + i*8, -0.1, 1])\n        cube([1.5, 0.2, 2]);\n    }\n}\n\nspeaker_grill();\n\n// Microphone hole\ncolor(color_port)\ntranslate([60, 0, 3.5])\nrotate([90, 0, 0])\ncylinder(h=2, d=1);\n\n// Camera lens\ncolor([0.1, 0.1, 0.1])\ntranslate([65, 8, 7])\ncylinder(h=1, d=5);\n\n// Camera ring\ncolor([0.9, 0.9, 0.9])\ntranslate([65, 8, 6.9])\ncylinder(h=0.2, d=7);\n\n// Flash\ncolor([0.9, 0.9, 0.8])\ntranslate([65, 18, 6.9])\ncylinder(h=0.5, d=3);\n\n// Logo placeholder\ncolor([0.7, 0.7, 0.7])\ntranslate([37.5, 25, 0.1])\nrotate([180, 0, 0])\nlinear_extrude(0.3)\ntext(\"MAT\", size=4, halign=\"center\");\n\n// Side antenna lines\ncolor([0.9, 0.9, 0.9])\ntranslate([0, 5, 3.5])\ncube([75, 0.5, 1]);\n\ncolor([0.9, 0.9, 0.9])\ntranslate([0, 39.5, 3.5])\ncube([75, 0.5, 1]);",
    "renders": true
  },
  {
    "electronic_device": "foam",
    "openscad_code": "// Foam Electronic Device - Realistic Style\n// A foam-covered wireless earbuds case with charging port and LED indicators\n\n$fn = 64;\n\n// Main dimensions\ncase_width = 45;\ncase_height = 55;\ncase_depth = 25;\nfoam_thickness = 3;\nwall_thickness = 2;\n\n// Colors\nfoam_color = [0.85, 0.85, 0.8];  // Light gray foam\nplastic_color = [0.2, 0.2, 0.2];  // Dark plastic\nled_color = [0, 1, 0];  // Green LED\nport_color = [0.3, 0.3, 0.3];  // Dark gray port\n\n// Main foam case body\nmodule foam_case() {\n    // Outer foam shell\n    color(foam_color)\n    difference() {\n        // Main rounded body\n        minkowski() {\n            cube([case_width, case_height, case_depth], center = true);\n            sphere(foam_thickness);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -2])\n        minkowski() {\n            cube([case_width - foam_thickness*2, case_height - foam_thickness*2, case_depth - foam_thickness], center = true);\n            sphere(foam_thickness/2);\n        }\n    }\n}\n\n// Plastic charging case inside\nmodule inner_case() {\n    color(plastic_color)\n    difference() {\n        // Main body\n        translate([0, 0, -foam_thickness/2])\n        cube([case_width - foam_thickness*2 - wall_thickness*2, \n              case_height - foam_thickness*2 - wall_thickness*2, \n              case_depth - foam_thickness - wall_thickness], center = true);\n        \n        // Earbud cavities\n        for (x = [-case_width/6, case_width/6]) {\n            translate([x, -case_height/8, 0])\n            rotate([90, 0, 0])\n            cylinder(h = case_depth/2, r1 = 8, r2 = 8);\n        }\n        \n        // Lid cavity\n        translate([0, case_height/4, case_depth/4])\n        cube([case_width/2, case_height/3, case_depth/2], center = true);\n    }\n}\n\n// Charging port\nmodule charging_port() {\n    color(port_color)\n    translate([0, -case_height/2 + foam_thickness, -case_depth/2 + foam_thickness + 2])\n    cube([8, 5, 4], center = true);\n}\n\n// LED indicators\nmodule led_indicators() {\n    // Charging LED\n    color(led_color)\n    translate([case_width/4, -case_height/2 + foam_thickness + 2, -case_depth/2 + foam_thickness + 2])\n    sphere(1.5);\n    \n    // Battery LED\n    color([1, 0.5, 0])  // Orange\n    translate([-case_width/4, -case_height/2 + foam_thickness + 2, -case_depth/2 + foam_thickness + 2])\n    sphere(1.5);\n}\n\n// Foam texture pattern\nmodule foam_texture() {\n    color(foam_color)\n    for (i = [-2:2]) {\n        for (j = [-3:3]) {\n            for (k = [-1:1]) {\n                translate([i * 10, j * 10, k * 10])\n                sphere(foam_thickness/3);\n            }\n        }\n    }\n}\n\n// Button area\nmodule button_area() {\n    color([0.7, 0.7, 0.7])\n    translate([0, case_height/2 - foam_thickness - 2, 0])\n    cube([20, foam_thickness, 10], center = true);\n}\n\n// Assembly\nfoam_case();\ninner_case();\ncharging_port();\nled_indicators();\nbutton_area();\n\n// Add subtle foam texture on top surface\ntranslate([0, 0, case_depth/2 + foam_thickness/2])\nfoam_texture();",
    "renders": true
  },
  {
    "electronic_device": "baffle",
    "openscad_code": "// Baffle Electronic Device - Audio Phase Alignment Tool\n// Medium complexity realistic style - 3D printable\n\n// Main dimensions (in mm)\ndevice_width = 80;\ndevice_height = 45;\ndevice_depth = 25;\nwall_thickness = 2;\n\n// Color definitions\ncase_color = [0.2, 0.2, 0.2];\nscreen_color = [0.1, 0.1, 0.1];\nbutton_color = [0.4, 0.4, 0.4];\nled_color = [0, 1, 0];\nport_color = [0.3, 0.3, 0.3];\n\n// Main case with rounded edges\nmodule main_case() {\n    difference() {\n        // Outer shell with rounded edges\n        minkowski() {\n            cube([device_width, device_depth, device_height], center=true);\n            sphere(2);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            translate([0, 0, 1])\n            cube([device_width-4, device_depth-4, device_height-4], center=true);\n            sphere(1);\n        }\n    }\n}\n\n// OLED display screen\nmodule display_screen() {\n    translate([0, 11.5, 22]) {\n        color(screen_color)\n        cube([50, 2, 15]);\n        \n        // Screen bezel\n        color(button_color)\n        difference() {\n            cube([52, 1.5, 17]);\n            translate([0, 0.5, 0])\n            cube([50, 2, 15]);\n        }\n    }\n}\n\n// Function buttons module\nmodule buttons() {\n    // Button positions array\n    positions = [\n        [-30, 12, 15],\n        [-20, 12, 15],\n        [-10, 12, 15],\n        [10, 12, 15],\n        [20, 12, 15],\n        [30, 12, 15]\n    ];\n    \n    for(pos = positions) {\n        translate(pos) {\n            color(button_color)\n            cylinder(h=2, d=6, $fn=20);\n            color([0.1, 0.1, 0.1])\n            translate([0, 0, 1.5])\n            cylinder(h=0.5, d=4, $fn=20);\n        }\n    }\n}\n\n// LED indicators\nmodule leds() {\n    led_positions = [\n        [-35, 12, 22],\n        [-25, 12, 22],\n        [-15, 12, 22],\n        [15, 12, 22],\n        [25, 12, 22],\n        [35, 12, 22]\n    ];\n    \n    for(pos = led_positions) {\n        translate(pos) {\n            color(led_color)\n            sphere(1.5, $fn=16);\n        }\n    }\n}\n\n// Audio jacks (XLR combo connectors)\nmodule audio_ports() {\n    // Input ports\n    for(i = [0:1]) {\n        translate([-20 + i*40, -11.5, 0]) {\n            color(port_color)\n            cylinder(h=5, d=12, $fn=32);\n            \n            // Inner hole\n            difference() {\n                cylinder(h=5, d=12, $fn=32);\n                translate([0, 0, -1])\n                cylinder(h=7, d=8, $fn=32);\n            }\n            \n            // Label ring\n            translate([0, 0, 5.5])\n            color([0.1, 0.1, 0.1])\n            cylinder(h=1, d=14, $fn=32);\n        }\n    }\n}\n\n// USB-C port for programming/power\nmodule usb_port() {\n    translate([0, -11.5, -15]) {\n        color(port_color)\n        cube([12, 3, 6]);\n        \n        // Inner cavity\n        translate([0, -0.5, 0])\n        cube([10, 4, 4]);\n    }\n}\n\n// Logo/text area\nmodule logo_area() {\n    translate([0, 11.5, 5]) {\n        color([0.3, 0.3, 0.3])\n        cube([30, 1, 8]);\n        \n        // Engraved text simulation\n        translate([0, 0.5, 0])\n        color([0, 0, 0])\n        cube([28, 0.5, 6]);\n    }\n}\n\n// Cooling vents\nmodule cooling_vents() {\n    translate([0, 0, -22]) {\n        for(i = [-35:10:35]) {\n            translate([i, 11.5, 0])\n            cube([8, 2, 1]);\n        }\n    }\n}\n\n// Assembly\ncolor(case_color) main_case();\ndisplay_screen();\nbuttons();\nleds();\naudio_ports();\nusb_port();\nlogo_area();\ncooling_vents();",
    "renders": true
  },
  {
    "electronic_device": "grille",
    "openscad_code": "// Realistic Medium-Complexity Electronic Grille Device\n// 3D-printable, 70 mm wide\n\n// Main housing\nmodule housing() {\n    difference() {\n        // Outer shell\n        color(\"#2B2B2B\") cube([70, 40, 25], center=true);\n        \n        // Hollow interior\n        translate([0,0,-2.5])\n            cube([66, 36, 20], center=true);\n    }\n}\n\n// Front grille plate\nmodule grille() {\n    difference() {\n        color(\"#1A1A1A\")\n        translate([0,0,12.4])\n            cube([68, 38, 0.8], center=true);\n        \n        // Hexagonal vent holes array\n        for (x = [-30:5:30])\n            for (y = [-16:4:16]) {\n                translate([x, y, 12.8])\n                    scale([1, 1.15, 1])\n                        cylinder(h=1.2, d=3, $fn=6);\n            }\n    }\n}\n\n// Status LEDs\nmodule leds() {\n    translate([25, 18, 12.4]) {\n        color(\"#00FF00\") sphere(d=2);\n        translate([0, -4, 0])\n            color(\"#FF0000\") sphere(d=2);\n    }\n}\n\n// Control buttons\nmodule buttons() {\n    translate([-25, 15, 12.4])\n        for (i=[0:1:3]) {\n            color(\"#333333\")\n            translate([0, -i*5, 1])\n                cube([4, 3, 2]);\n            color(\"#666666\")\n            translate([0, -i*5, 0.5])\n                cylinder(h=2, d=2);\n        }\n}\n\n// Side USB-C port\nmodule usb_port() {\n    difference() {\n        color(\"#444444\")\n        translate([35, 0, 0])\n            cube([4, 12, 6], center=true);\n        \n        color(\"#111111\")\n        translate([36.9, 0, 0])\n            cube([2, 8, 3], center=true);\n    }\n}\n\n// Rear mounting clips\nmodule clips() {\n    for (x = [-25:50:25])\n        translate([x, 0, -12.5]) {\n            difference() {\n                color(\"#333333\")\n                cube([8, 2, 5]);\n                translate([4, 1, 2.5])\n                    cylinder(h=3, d=2, center=true);\n            }\n        }\n}\n\n// Brand label\nmodule label() {\n    translate([0, -20, 12.4])\n        color(\"#888888\")\n        linear_extrude(height=0.2)\n            text(\"AUDIO+\", size=4, halign=\"center\");\n}\n\n// Assembly\nhousing();\ngrille();\nleds();\nbuttons();\nusb_port();\nclips();\nlabel();",
    "renders": true
  },
  {
    "electronic_device": "lens",
    "openscad_code": "// Realistic Electronic Camera Lens\n// 75mm diameter, 120mm length - medium complexity 3D printable model\n\n// Main parameters\n$fn = 50;\nlens_diameter = 75;\nlens_length = 120;\nbody_color = [0.1, 0.1, 0.1];\nmetal_color = [0.7, 0.7, 0.7];\nglass_color = [0.2, 0.2, 0.3, 0.6];\nbutton_color = [0.8, 0.1, 0.1];\nscreen_color = [0.05, 0.05, 0.05];\n\n// Main lens body\nmodule lens_body() {\n    color(body_color)\n    difference() {\n        // Main cylindrical body\n        cylinder(h = lens_length, d = lens_diameter, center = false);\n        \n        // Front opening for glass\n        translate([0, 0, -1])\n            cylinder(h = 2, d = lens_diameter - 20, center = false);\n        \n        // Rear opening for mount\n        translate([0, 0, lens_length - 1])\n            cylinder(h = 2, d = lens_diameter - 25, center = false);\n    }\n}\n\n// Front lens element\nmodule front_element() {\n    color(glass_color)\n    translate([0, 0, -1])\n        difference() {\n            cylinder(h = 5, d = lens_diameter - 20, center = false);\n            cylinder(h = 6, d = lens_diameter - 22, center = false);\n        }\n}\n\n// Rear mount\nmodule rear_mount() {\n    color(metal_color)\n    translate([0, 0, lens_length - 5])\n        difference() {\n            cylinder(h = 5, d = lens_diameter - 25, center = false);\n            // Bayonet slots\n            for(i = [0:2]) {\n                rotate([0, 0, i * 120])\n                    translate([20, 0, 0])\n                        cube([15, 3, 5], center = true);\n            }\n        }\n}\n\n// Focus ring with grip texture\nmodule focus_ring() {\n    color(metal_color)\n    difference() {\n        // Ring body\n        translate([0, 0, 40])\n            cylinder(h = 15, d = lens_diameter + 4, center = false);\n        \n        // Knurled grip pattern\n        for(i = [0:59]) {\n            rotate([0, 0, i * 6])\n                translate([(lens_diameter + 3)/2 - 1, 0, 40])\n                    cube([3, 2, 15], center = true);\n        }\n    }\n}\n\n// Zoom ring\nmodule zoom_ring() {\n    color(body_color)\n    translate([0, 0, 60])\n        cylinder(h = 20, d = lens_diameter + 6, center = false);\n    \n    // Zoom markings\n    color([1, 1, 1])\n    translate([0, (lens_diameter + 6)/2 + 1, 70])\n        for(i = [0:4]) {\n            translate([0, 0, i * 2])\n                cube([1, 0.5, 0.5], center = true);\n        }\n}\n\n// Control buttons\nmodule control_buttons() {\n    // AF/MF switch\n    color(button_color)\n    translate([lens_diameter/2 + 2, 0, 85])\n        cube([5, 3, 8], center = true);\n    \n    // IS switch\n    translate([lens_diameter/2 + 2, -10, 85])\n        cube([5, 3, 8], center = true);\n    \n    // Custom button\n    color([0.1, 0.8, 0.1])\n    translate([lens_diameter/2 + 2, 10, 85])\n        sphere(d = 3);\n}\n\n// OLED display screen\nmodule info_display() {\n    color(screen_color)\n    translate([0, -lens_diameter/2 - 1, 90])\n        cube([20, 1, 10], center = true);\n    \n    // Screen border\n    color(metal_color)\n    translate([0, -lens_diameter/2 - 0.5, 90])\n        cube([22, 1, 12], center = true);\n}\n\n// Mount contacts\nmodule mount_contacts() {\n    color([0.8, 0.6, 0.1])\n    for(i = [0:7]) {\n        translate([0, (lens_diameter - 25)/2 * cos(i * 45), \n                   lens_length - 3 + (lens_diameter - 25)/2 * sin(i * 45) * 0.1])\n            cube([0.5, 1, 2], center = true);\n    }\n}\n\n// Lens hood bayonet\nmodule hood_mount() {\n    color(metal_color)\n    difference() {\n        translate([0, 0, -5])\n            cylinder(h = 5, d = lens_diameter + 8, center = false);\n        \n        // Bayonet notches\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90 + 45])\n                translate([(lens_diameter + 8)/2 - 5, 0, -2.5])\n                    cube([10, 3, 5], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    lens_body();\n    front_element();\n    rear_mount();\n    focus_ring();\n    zoom_ring();\n    control_buttons();\n    info_display();\n    mount_contacts();\n    hood_mount();\n}",
    "renders": true
  },
  {
    "electronic_device": "prism",
    "openscad_code": "// Prism-style smartphone in realistic style\n// Overall dimensions: 75mm x 150mm x 8mm\n\n// Device body\ncolor(\"black\") \ntranslate([0, 0, 4]) \ncube([75, 150, 8], center=true);\n\n// Screen\ncolor(\"#1a1a1a\") \ntranslate([0, 0, 8.6]) \ncube([69, 142, 0.5], center=true);\n\n// Screen active area\ncolor(\"#001122\") \ntranslate([0, 0, 8.9]) \ncube([65, 130, 0.2], center=true);\n\n// Camera module\nmodule camera_module(x, y) {\n    translate([x, y, 9.2]) {\n        // Camera bump\n        color(\"#333333\") \n        cylinder(h=1.5, d=12, center=true);\n        \n        // Lens\n        color(\"black\") \n        cylinder(h=1.2, d=10, center=true);\n        \n        // Lens inner\n        color(\"#001122\") \n        cylinder(h=1.0, d=6, center=true);\n    }\n}\n\n// Flash LED\ncolor(\"white\") \ntranslate([25, 65, 9.2]) \ncylinder(h=1.0, d=4, center=true);\n\n// Camera assembly\ncamera_module(-25, 65);\ncamera_module(-10, 65);\n\n// Speaker grill\nmodule speaker_grill() {\n    for(i = [-20:5:20]) {\n        color(\"black\") \n        translate([i, -70, 9.1]) \n        cube([3, 2, 0.5], center=true);\n    }\n}\nspeaker_grill();\n\n// Home button\ncolor(\"#222222\") \ntranslate([0, -55, 8.9]) \ncylinder(h=1.0, d=12, center=true);\n\n// Volume buttons\ncolor(\"#111111\") \ntranslate([-38.5, 20, 4]) \ncube([3, 25, 8], center=true);\n\ncolor(\"#111111\") \ntranslate([-38.5, -10, 4]) \ncube([3, 25, 8], center=true);\n\n// Power button\ncolor(\"#111111\") \ntranslate([38.5, 20, 4]) \ncube([3, 25, 8], center=true);\n\n// USB-C port\ncolor(\"black\") \ntranslate([0, -75, 2]) \ncube([12, 2, 4], center=true);\n\n// SIM tray\ncolor(\"#222222\") \ntranslate([32, 0, 4]) \ncube([3, 20, 1], center=true);\n\n// Antenna bands\ncolor(\"#444444\") \ntranslate([0, 74, 4]) \ncube([75, 2, 8], center=true);\ntranslate([0, -74, 4]) \ncube([75, 2, 8], center=true);\n\n// Back glass\ncolor(\"#111111\", 0.8) \ntranslate([0, 0, 0]) \ncube([75, 150, 1], center=true);\n\n// Logo\ncolor(\"#666666\") \ntranslate([0, 0, -3.6]) \ncube([20, 6, 0.2], center=true);",
    "renders": true
  },
  {
    "electronic_device": "mirror",
    "openscad_code": "// Smart Mirror Hub - 3D printable realistic model\n// Overall dimensions: 80mm x 55mm x 15mm\n\n// Color definitions\nmirror_color = \"silver\";\nframe_color = \"black\";\nled_color = \"green\";\nbutton_color = \"white\";\nport_color = \"gold\";\n\n// Main module\nmodule smart_mirror_hub() {\n    difference() {\n        union() {\n            // Main frame\n            frame();\n            \n            // Mirror surface\n            mirror_surface();\n            \n            // LED indicators\n            led_indicators();\n            \n            // Control buttons\n            control_buttons();\n            \n            // Ports\n            ports();\n        }\n        \n        // Cutouts for ports\n        port_cutouts();\n    }\n}\n\n// Frame structure\nmodule frame() {\n    color(frame_color)\n    difference() {\n        // Outer shell\n        translate([-40, -27.5, 0])\n            cube([80, 55, 15], center = false);\n        \n        // Inner cavity for electronics\n        translate([-37.5, -25, 2])\n            cube([75, 50, 11], center = false);\n    }\n}\n\n// Mirror surface with reflective coating\nmodule mirror_surface() {\n    color(mirror_color)\n    translate([-35, -22.5, 13])\n        cube([70, 45, 1], center = false);\n    \n    // Mirror reflection edge detail\n    color(\"gray\")\n    translate([-35, -22.5, 13.2])\n        cube([70, 45, 0.2], center = false);\n}\n\n// LED indicator lights\nmodule led_indicators() {\n    // Power LED\n    color(led_color)\n    translate([30, -10, 14.5])\n        cylinder(h = 1, r = 2, $fn = 16);\n    \n    // Status LED\n    color(\"blue\")\n    translate([30, 0, 14.5])\n        cylinder(h = 1, r = 1.5, $fn = 16);\n    \n    // WiFi LED\n    color(\"yellow\")\n    translate([30, 10, 14.5])\n        cylinder(h = 1, r = 1.5, $fn = 16);\n}\n\n// Control buttons\nmodule control_buttons() {\n    // Power button\n    color(button_color)\n    translate([35, 0, 8])\n        cylinder(h = 2, r = 3, $fn = 32);\n    \n    // Volume buttons\n    for (i = [-1, 1]) {\n        color(button_color)\n        translate([35, i * 8, 8])\n            cube([4, 2, 2], center = true);\n    }\n}\n\n// Ports on the side\nmodule ports() {\n    // USB-C port housing\n    color(port_color)\n    translate([-40, -5, 5])\n        cube([3, 10, 4], center = false);\n    \n    // Micro HDMI port\n    color(port_color)\n    translate([-40, 8, 5])\n        cube([3, 7, 3], center = false);\n}\n\n// Port cutouts\nmodule port_cutouts() {\n    // USB-C opening\n    translate([-39, -4, 6])\n        cube([2, 8, 2], center = false);\n    \n    // HDMI opening\n    translate([-39, 8.5, 5.5])\n        cube([2, 6, 2], center = false);\n    \n    // Speaker grill holes\n    for (x = [-30:10:30]) {\n        for (y = [-20:5:-10]) {\n            translate([x, y, 0.5])\n                cylinder(h = 1, r = 0.8, $fn = 8);\n        }\n    }\n}\n\n// Generate the model\nsmart_mirror_hub();",
    "renders": true
  },
  {
    "electronic_device": "reflector",
    "openscad_code": "// Reflector electronic device - medium complexity realistic style\n// A handheld laser distance measurer with typical features\n\n// Overall dimensions\nwidth = 55;\nheight = 30;\ndepth = 110;\n\n// Colors\n$fn = 32;\n\nmodule body() {\n    // Main housing with rounded edges\n    difference() {\n        color([0.2, 0.2, 0.2])\n        minkowski() {\n            cube([width-6, height-6, depth-6], center=true);\n            sphere(3);\n        }\n        \n        // Hollow out interior\n        color([0.2, 0.2, 0.2])\n        minkowski() {\n            cube([width-10, height-10, depth-10], center=true);\n            sphere(2);\n        }\n    }\n}\n\nmodule display() {\n    // LCD screen\n    translate([0, 8, depth/2 - 2])\n    color([0.1, 0.1, 0.1])\n    cube([35, 15, 1], center=true);\n    \n    // Screen border\n    translate([0, 8, depth/2 - 1.5])\n    color([0.3, 0.3, 0.3])\n    cube([37, 17, 0.5], center=true);\n}\n\nmodule buttons() {\n    // Power button\n    translate([-15, 0, depth/2 - 2])\n    color([0.8, 0, 0])\n    cylinder(h=1.5, r=3, center=true);\n    \n    // Mode button\n    translate([-10, 0, depth/2 - 2])\n    color([0, 0.8, 0])\n    cylinder(h=1.5, r=3, center=true);\n    \n    // Memory buttons\n    for(i = [0:3]) {\n        translate([0 + i*5, -8, depth/2 - 2])\n        color([0.4, 0.4, 0.4])\n        cylinder(h=1.5, r=2, center=true);\n    }\n}\n\nmodule laser_window() {\n    // Front laser emitter window\n    translate([0, 0, -depth/2 + 5])\n    color([0.7, 0.7, 0.9, 0.7])\n    cube([8, 6, 2], center=true);\n    \n    // Protective rim\n    translate([0, 0, -depth/2 + 4])\n    color([0.4, 0.4, 0.4])\n    difference() {\n        cube([10, 8, 1], center=true);\n        cube([7, 5, 2], center=true);\n    }\n}\n\nmodule receiver_lens() {\n    // Large receiver lens below laser\n    translate([0, -8, -depth/2 + 6])\n    color([0.9, 0.9, 1, 0.6])\n    scale([1.2, 1, 1])\n    sphere(6);\n    \n    // Lens housing\n    translate([0, -8, -depth/2 + 5])\n    color([0.3, 0.3, 0.3])\n    cylinder(h=2, r=7, center=true);\n}\n\nmodule rubber_grip() {\n    // Side grips\n    for(side = [-1, 1]) {\n        translate([side * (width/2 - 2), 0, 0])\n        color([0.15, 0.15, 0.15])\n        cube([4, height-2, depth-20], center=true);\n        \n        // Grip texture\n        for(i = [0:8]) {\n            translate([side * (width/2 - 2), -height/2 + 2 + i*3, 0])\n            color([0.1, 0.1, 0.1])\n            cube([4.5, 0.5, depth-25], center=true);\n        }\n    }\n}\n\nmodule battery_cover() {\n    // Battery compartment cover on back\n    translate([0, 0, -depth/2 + 15])\n    color([0.25, 0.25, 0.25])\n    difference() {\n        cube([30, 15, 1], center=true);\n        // Slots for opening\n        for(i = [-1, 1]) {\n            translate([i*8, 0, 0])\n            cube([2, 13, 2], center=true);\n        }\n    }\n}\n\nmodule usb_port() {\n    // USB-C charging port on side\n    translate([width/2, 0, -depth/2 + 25])\n    color([0.1, 0.1, 0.1])\n    cube([2, 8, 6], center=true);\n}\n\nmodule wrist_strap_loop() {\n    // Strap loop at bottom\n    translate([0, -height/2 - 3, depth/2 - 15])\n    color([0.3, 0.3, 0.3])\n    difference() {\n        cube([20, 6, 8], center=true);\n        cube([15, 10, 6], center=true);\n    }\n}\n\n// Assemble the device\nunion() {\n    body();\n    display();\n    buttons();\n    laser_window();\n    receiver_lens();\n    rubber_grip();\n    battery_cover();\n    usb_port();\n    wrist_strap_loop();\n}",
    "renders": true
  },
  {
    "electronic_device": "diffuser",
    "openscad_code": "// Realistic Essential Oil Diffuser - Medium Complexity\n// Compact design with water reservoir, mist vent, control buttons, and LED indicator\n// Approximate dimensions: 70mm diameter, 90mm height\n\n// Main color scheme\n$fn = 50;\n\n// Main diffuser body - cylindrical base with rounded top\nmodule diffuser_body() {\n    difference() {\n        // Main cylindrical body\n        union() {\n            // Base cylinder\n            color(\"white\") \n            cylinder(h=50, d=70, center=false);\n            \n            // Rounded top section\n            color(\"white\")\n            translate([0, 0, 45])\n            scale([1, 1, 0.3])\n            sphere(d=70);\n        }\n        \n        // Hollow out interior for electronics\n        color(\"white\")\n        translate([0, 0, 5])\n        cylinder(h=40, d=60, center=false);\n    }\n}\n\n// Water reservoir tank - clear plastic insert\nmodule water_reservoir() {\n    color(\"LightBlue\", 0.3)  // Semi-transparent blue\n    translate([0, 0, 48])\n    difference() {\n        cylinder(h=30, d=65, center=false);\n        translate([0, 0, 3])\n        cylinder(h=24, d=60, center=false);\n    }\n}\n\n// Control panel with buttons\nmodule control_panel() {\n    // Panel base\n    color(\"LightGray\", 0.8)\n    translate([0, 32, 25])\n    cube([40, 8, 15], center=true);\n    \n    // Power button\n    color(\"DarkGray\")\n    translate([-10, 37, 30])\n    cylinder(h=3, d=6, center=false);\n    \n    // Mist intensity button\n    color(\"DarkGray\")\n    translate([0, 37, 30])\n    cylinder(h=3, d=6, center=false);\n    \n    // Timer button\n    color(\"DarkGray\")\n    translate([10, 37, 30])\n    cylinder(h=3, d=6, center=false);\n}\n\n// LED indicator ring\nmodule led_indicator() {\n    color(\"LimeGreen\", 0.7)\n    translate([0, 0, 48])\n    rotate_extrude(angle=360)\n    translate([28, 0, 0])\n    circle(d=3);\n}\n\n// Mist vent - perforated top\nmodule mist_vent() {\n    color(\"LightGray\")\n    translate([0, 0, 75])\n    difference() {\n        cylinder(h=5, d=40, center=false);\n        \n        // Central hole\n        cylinder(h=6, d=8, center=false);\n        \n        // Ventilation slots\n        for(i = [0:15:360]) {\n            rotate([0, 0, i])\n            translate([15, 0, 0])\n            cube([20, 2, 6], center=true);\n        }\n    }\n}\n\n// USB-C charging port\nmodule charging_port() {\n    color(\"DarkGray\")\n    translate([30, 0, 15])\n    rotate([0, 90, 0])\n    cylinder(h=10, d=8, center=false);\n    \n    // Port opening\n    color(\"black\")\n    translate([35, 0, 15])\n    rotate([0, 90, 0])\n    cylinder(h=12, d=6, center=false);\n}\n\n// Rubber feet for stability\nmodule rubber_feet() {\n    for(i = [0:90:270]) {\n        rotate([0, 0, i])\n        color(\"DarkGray\")\n        translate([25, 25, 0])\n        cylinder(h=3, d=5, center=false);\n    }\n}\n\n// Logo detail\nmodule logo() {\n    color(\"DarkGray\", 0.8)\n    translate([0, -30, 30])\n    linear_extrude(height=1)\n    text(\"AROMA\", size=6, halign=\"center\", valign=\"center\");\n}\n\n// Assemble the complete diffuser\nunion() {\n    diffuser_body();\n    water_reservoir();\n    control_panel();\n    led_indicator();\n    mist_vent();\n    charging_port();\n    rubber_feet();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "shaper",
    "openscad_code": "// Realistic Shaper (Digital Surfboard Shaper) - Medium Complexity\n// A handheld electronic device for scanning surfboard shapes\n\n$fn = 32;\n\n// Main dimensions\ndevice_width = 85;\ndevice_height = 55;\ndevice_depth = 20;\n\n// Colors\nbody_color = [0.15, 0.15, 0.15];\nscreen_color = [0.1, 0.1, 0.1];\nbutton_color = [0.3, 0.3, 0.3];\nlens_color = [0.05, 0.05, 0.05];\naccent_color = [0.8, 0.2, 0.2];\n\n// Main body\nmodule body() {\n    color(body_color) {\n        difference() {\n            // Main rounded body\n            minkowski() {\n                cube([device_width-6, device_height-6, device_depth-4], center=true);\n                sphere(3);\n            }\n            \n            // Front panel recess\n            translate([0, 0, device_depth/2-1])\n                cube([device_width-12, device_height-12, 3], center=true);\n                \n            // USB-C port\n            translate([device_width/2-2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=8, d1=6, d2=8);\n                    \n            // Wrist strap holes\n            translate([-device_width/2+3, device_height/2-8, 0])\n                cylinder(h=device_depth, d=3);\n            translate([-device_width/2+3, -device_height/2+8, 0])\n                cylinder(h=device_depth, d=3);\n        }\n    }\n}\n\n// Display screen\nmodule screen() {\n    color(screen_color) {\n        translate([0, 0, device_depth/2-0.5])\n            cube([device_width-16, device_height-20, 1], center=true);\n    }\n    \n    // Screen bezel\n    color([0.2, 0.2, 0.2]) {\n        translate([0, 0, device_depth/2-0.8])\n            difference() {\n                cube([device_width-14, device_height-18, 0.5], center=true);\n                translate([0, 0, -0.1])\n                    cube([device_width-16, device_height-20, 1], center=true);\n            }\n    }\n}\n\n// Control buttons\nmodule buttons() {\n    // D-pad\n    color(button_color) {\n        translate([-device_width/2+12, 5, device_depth/2-2])\n            cylinder(h=2, d=12);\n        translate([-device_width/2+12, 5, device_depth/2-2.5])\n            cube([4, 12, 1], center=true);\n        translate([-device_width/2+12, 5, device_depth/2-2.5])\n            cube([12, 4, 1], center=true);\n    }\n    \n    // Action buttons\n    for (i = [0:1]) {\n        translate([device_width/2-12-8*i, 5, device_depth/2-2])\n            color(button_color)\n                cylinder(h=2, d=6);\n    }\n    \n    // Power button\n    translate([0, -device_height/2+8, device_depth/2-2])\n        color(accent_color)\n            cylinder(h=2, d=8);\n}\n\n// LiDAR sensor array\nmodule lidar_sensors() {\n    // Main lens\n    color(lens_color) {\n        translate([0, device_height/2-10, device_depth/2-1])\n            difference() {\n                cylinder(h=3, d=12);\n                translate([0, 0, 2])\n                    cylinder(h=2, d=10);\n            }\n    }\n    \n    // Secondary sensors\n    for (angle = [0:60:359]) {\n        rotate([0, 0, angle])\n            translate([0, device_height/2-10, device_depth/2-1])\n                color([0.3, 0.3, 0.3])\n                    cylinder(h=1, d=3);\n    }\n    \n    // LED indicators\n    translate([-device_width/2+10, -device_height/2+10, device_depth/2-1])\n        color([0, 1, 0])\n            cylinder(h=0.5, d=4);\n    translate([-device_width/2+10, -device_height/2+6, device_depth/2-1])\n        color([1, 0, 0])\n            cylinder(h=0.5, d=4);\n}\n\n// Rubber grips\nmodule grips() {\n    color([0.1, 0.1, 0.1]) {\n        difference() {\n            // Left grip\n            translate([-device_width/2+5, 0, 0])\n                cube([8, device_height-10, device_depth-6], center=true);\n                \n            // Right grip\n            translate([device_width/2-5, 0, 0])\n                cube([8, device_height-10, device_depth-6], center=true);\n                \n            // Grip pattern cutouts\n            for (y = [-device_height/2+10:5:device_height/2-10]) {\n                translate([-device_width/2+5, y, device_depth/2-4])\n                    cube([7, 2, 2], center=true);\n                translate([device_width/2-5, y, device_depth/2-4])\n                    cube([7, 2, 2], center=true);\n            }\n        }\n    }\n}\n\n// Logo\nmodule logo() {\n    translate([0, 0, device_depth/2])\n        color([0.9, 0.9, 0.9])\n            linear_extrude(height=0.5)\n                text(\"SHPR\", size=6, halign=\"center\", valign=\"center\", font=\"Arial:style=Bold\");\n}\n\n// Assembly\nbody();\nscreen();\nbuttons();\nlidar_sensors();\ngrips();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "gobo",
    "openscad_code": "// Realistic Gobo Projector Electronic Device\n// Medium complexity OpenSCAD model\n\n// Main dimensions\nbody_length = 85;\nbody_width = 55;\nbody_height = 30;\nlens_diameter = 25;\nlens_length = 15;\nport_width = 8;\nport_height = 4;\n\nmodule main_body() {\n    color(\"darkslategray\")\n    difference() {\n        // Main case\n        cube([body_length, body_width, body_height], center=true);\n        \n        // Cooling vents on top\n        for (i = [-20:10:20]) {\n            translate([i, 0, body_height/2 - 1])\n            cube([8, body_width - 4, 2], center=true);\n        }\n        \n        // Front lens hole\n        translate([body_length/2 + 1, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=body_width + 2, d=lens_diameter + 2, center=true);\n    }\n}\n\nmodule lens_assembly() {\n    color(\"black\")\n    union() {\n        // Outer lens barrel\n        translate([body_length/2 + lens_length/2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=lens_length, d=lens_diameter + 6, center=true);\n        \n        // Main lens\n        color(\"lightgray\")\n        translate([body_length/2 + lens_length - 2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=lens_length/2, d=lens_diameter, center=true);\n        \n        // Focus ring\n        color(\"silver\")\n        translate([body_length/2 + lens_length/4, 0, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=8, d=lens_diameter + 10, center=true);\n            cylinder(h=10, d=lens_diameter + 4, center=true);\n        }\n    }\n}\n\nmodule control_panel() {\n    color(\"dimgray\")\n    translate([-body_length/2 + 5, 0, body_height/2 - 2])\n    difference() {\n        cube([10, body_width - 10, 4], center=true);\n        \n        // Buttons\n        for (i = [-10:10:10]) {\n            translate([0, i, -1])\n            cylinder(h=3, d=6, $fn=20);\n        }\n        \n        // Power LED\n        translate([0, 15, -1])\n        color(\"red\")\n        cylinder(h=2, d=3, $fn=20);\n    }\n}\n\nmodule ports_section() {\n    color(\"black\")\n    translate([0, -body_width/2 - 0.5, -body_height/4])\n    difference() {\n        cube([body_length - 20, 1, port_height + 4], center=true);\n        \n        // USB ports\n        for (i = [-15:15:15]) {\n            translate([i, 0, 0])\n            cube([port_width, 2, port_height], center=true);\n        }\n        \n        // Power port\n        translate([20, 0, 0])\n        cube([10, 2, 8], center=true);\n    }\n}\n\nmodule mounting_points() {\n    color(\"gray\")\n    for (pos = [[-30, 20, 0], [30, 20, 0], [-30, -20, 0], [30, -20, 0]]) {\n        translate(pos)\n        cylinder(h=body_height + 2, d=4, center=true);\n    }\n}\n\nmodule logo() {\n    color(\"white\")\n    translate([0, 0, body_height/2 + 0.1])\n    linear_extrude(0.5)\n    text(\"GOBO\", size=6, halign=\"center\", valign=\"center\");\n}\n\n// Assembly\nmain_body();\nlens_assembly();\ncontrol_panel();\nports_section();\nmounting_points();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "flag",
    "openscad_code": "// Electronic Flag Display Device - Realistic Medium Complexity\n// A portable LED flag display module with control buttons and ports\n\n$fn = 32;\n\n// Main dimensions (mm)\nflag_width = 60;\nflag_height = 40;\ndevice_thickness = 15;\nscreen_bezel = 3;\nbutton_diameter = 5;\nport_width = 8;\nport_height = 4;\n\n// Colors\ndevice_color = [0.15, 0.15, 0.15];\nscreen_color = [0.05, 0.05, 0.05];\nbutton_color = [0.8, 0.8, 0.8];\nport_color = [0.3, 0.3, 0.3];\nflag_red = [0.8, 0.1, 0.1];\nflag_white = [0.9, 0.9, 0.9];\nflag_blue = [0.1, 0.1, 0.8];\n\n// Main device body\nmodule device_body() {\n    color(device_color)\n    difference() {\n        // Main shell\n        translate([0, 0, device_thickness/2])\n            cube([flag_width + 10, flag_height + 10, device_thickness], center=true);\n        \n        // Screen cutout\n        translate([0, 0, device_thickness/2 + 0.5])\n            cube([flag_width + 2, flag_height + 2, device_thickness + 1], center=true);\n        \n        // Mounting holes\n        for(x = [-flag_width/2 - 3, flag_width/2 + 3])\n            for(y = [-flag_height/2 - 3, flag_height/2 + 3])\n                translate([x, y, -1])\n                    cylinder(h=device_thickness + 2, r=1.5, center=false);\n    }\n}\n\n// LED screen with bezel\nmodule led_screen() {\n    color(screen_color)\n    translate([0, 0, device_thickness - 0.5])\n        cube([flag_width, flag_height, 1], center=true);\n    \n    // Screen bezel\n    color(device_color)\n    for(x = [-flag_width/2 - 1, flag_width/2 + 1]) {\n        translate([x, 0, device_thickness - 0.5])\n            cube([2, flag_height + 4, 1], center=true);\n    }\n    for(y = [-flag_height/2 - 1, flag_height/2 + 1]) {\n        translate([0, y, device_thickness - 0.5])\n            cube([flag_width + 4, 2, 1], center=true);\n    }\n}\n\n// Control buttons\nmodule control_buttons() {\n    for(i = [0:2]) {\n        translate([flag_width/2 + 5, -flag_height/3 + i*flag_height/3, device_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=2, r=button_diameter/2, center=true);\n    }\n    \n    // Button symbols\n    color([0, 0, 0])\n    for(i = [0:2]) {\n        translate([flag_width/2 + 5, -flag_height/3 + i*flag_height/3, device_thickness/2 + 1.1])\n            rotate([0, 0, 0])\n                cube([3, 0.5, 0.1], center=true);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    color(port_color)\n    translate([-flag_width/2 - 5, 0, device_thickness/2])\n        cube([port_width, port_height, 4], center=true);\n    \n    // Port details\n    color([0, 0, 0])\n    translate([-flag_width/2 - 5.5, 0, device_thickness/2])\n        cube([port_width - 2, port_height - 1, 4.5], center=true);\n}\n\n// LED flag display\nmodule led_flag() {\n    // Red stripes\n    color(flag_red)\n    for(i = [0:2]) {\n        translate([-flag_width/2 + 25, flag_height/2 - 5 - i*8, device_thickness - 0.1])\n            cube([50, 6, 0.5], center=false);\n    }\n    \n    // White stripes\n    color(flag_white)\n    for(i = [0:1]) {\n        translate([-flag_width/2 + 25, flag_height/2 - 9 - i*8, device_thickness - 0.1])\n            cube([50, 6, 0.5], center=false);\n    }\n    \n    // Blue canton\n    color(flag_blue)\n    translate([-flag_width/2 + 2, flag_height/2 - 2, device_thickness - 0.1])\n        cube([22, 18, 0.5], center=false);\n    \n    // Stars (simplified as dots)\n    color(flag_white)\n    for(x = [-flag_width/2 + 5:6:-flag_width/2 + 20])\n        for(y = [flag_height/2 - 5:-4:-flag_height/2 + 15])\n            translate([x, y, device_thickness - 0.05])\n                sphere(r=0.5);\n}\n\n// Power indicator LED\nmodule power_indicator() {\n    color([0, 1, 0])\n    translate([flag_width/2 - 3, flag_height/2 + 3, device_thickness - 0.1])\n        sphere(r=1);\n    \n    // LED housing\n    color(device_color)\n    translate([flag_width/2 - 3, flag_height/2 + 3, device_thickness - 0.5])\n        cylinder(h=1, r=1.5, center=true);\n}\n\n// Assembly\ndevice_body();\nled_screen();\nled_flag();\ncontrol_buttons();\nusb_port();\npower_indicator();",
    "renders": true
  },
  {
    "electronic_device": "scrim",
    "openscad_code": "// Scrim Electronic Device - Realistic Style\n// Portable gaming handheld with screen, buttons, and ports\n\n// Device dimensions\ndevice_width = 85;\ndevice_height = 45;\ndevice_depth = 15;\nwall_thickness = 2;\n\n// Colors\ncase_color = [0.2, 0.2, 0.2];  // Dark gray\nscreen_color = [0.1, 0.1, 0.1];  // Black\nbutton_color = [0.3, 0.3, 0.3];  // Medium gray\nport_color = [0.15, 0.15, 0.15];  // Darker gray\n\n// Main case\nmodule main_case() {\n    difference() {\n        // Outer shell\n        color(case_color)\n        cube([device_width, device_height, device_depth], center=true);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness/2])\n        cube([device_width-wall_thickness*2, device_height-wall_thickness*2, device_depth], center=true);\n        \n        // Screen cutout\n        translate([0, 10, device_depth/2-0.1])\n        cube([40, 25, wall_thickness+0.2], center=true);\n        \n        // Button holes\n        for(x = [-30, -20, -10, 10, 20, 30])\n            translate([x, -15, device_depth/2-0.1])\n            cylinder(h=wall_thickness+0.2, r=3, center=true);\n    }\n}\n\n// Screen\nmodule screen() {\n    color(screen_color)\n    translate([0, 10, device_depth/2])\n    cube([38, 23, 0.5], center=true);\n}\n\n// Buttons\nmodule buttons() {\n    for(x = [-30, -20, -10, 10, 20, 30]) {\n        color(button_color)\n        translate([x, -15, device_depth/2+1])\n        cylinder(h=2, r=2.8, center=true);\n    }\n}\n\n// D-pad\nmodule dpad() {\n    color(button_color)\n    translate([-25, 5, device_depth/2+1])\n    cube([12, 12, 2], center=true);\n    \n    // D-pad cross\n    color(screen_color)\n    translate([-25, 5, device_depth/2+2.1])\n    cube([3, 8, 0.5], center=true);\n    \n    translate([-25, 5, device_depth/2+2.1])\n    cube([8, 3, 0.5], center=true);\n}\n\n// Action buttons\nmodule action_buttons() {\n    for(pos = [[25, 5], [30, 10], [25, 15], [20, 10]]) {\n        color(button_color)\n        translate([pos[0], pos[1], device_depth/2+1])\n        cylinder(h=2, r=3, center=true);\n        \n        // Button labels\n        color(screen_color)\n        translate([pos[0], pos[1], device_depth/2+2.1])\n        cube([2, 2, 0.3], center=true);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    color(port_color)\n    translate([0, -device_height/2+2, 0])\n    cube([8, 4, 3], center=true);\n    \n    // Port opening\n    difference() {\n        color(case_color)\n        translate([0, -device_height/2+wall_thickness, 0])\n        cube([6, wall_thickness+0.2, 2], center=true);\n    }\n}\n\n// Power button\nmodule power_button() {\n    color(button_color)\n    translate([-device_width/2+3, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=4, r=1.5, center=true);\n}\n\n// Speaker grills\nmodule speakers() {\n    for(y = [-10, 10]) {\n        color(port_color)\n        translate([device_width/2-5, y, 0])\n        cube([8, 15, 0.5], center=true);\n        \n        // Grill holes\n        for(i = [-6:2:6]) {\n            color(case_color)\n            translate([device_width/2-5, y+i, device_depth/2-0.1])\n            cube([1, 1, 0.7], center=true);\n        }\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    color([0.8, 0, 0])  // Red LED\n    translate([device_width/2-3, device_height/2-3, device_depth/2-1])\n    cylinder(h=1, r=1, center=true);\n}\n\n// Assembly\nmain_case();\nscreen();\nbuttons();\ndpad();\naction_buttons();\nusb_port();\npower_button();\nspeakers();\nled_indicator();",
    "renders": true
  },
  {
    "electronic_device": "gel",
    "openscad_code": "// Gel Electronic Device - Realistic Style, Medium Complexity\n// A handheld gel-based electronic device with display, buttons, and ports\n\n// Main dimensions\ndevice_width = 65;\ndevice_height = 110;\ndevice_thickness = 12;\ncorner_radius = 8;\n\n// Gel thickness\ngel_thickness = 2;\n\n// Colors\ngel_color = [0.7, 0.9, 1.0, 0.7];  // Translucent blue gel\ncase_color = [0.2, 0.2, 0.2];    // Dark gray plastic\nscreen_color = [0.1, 0.1, 0.1];  // Black screen\nbutton_color = [0.3, 0.3, 0.3];  // Gray buttons\n\n// Create rounded rectangle module\nmodule rounded_rect(width, height, depth, radius) {\n    hull() {\n        translate([radius, radius, 0]) cylinder(h=depth, r=radius, $fn=20);\n        translate([width-radius, radius, 0]) cylinder(h=depth, r=radius, $fn=20);\n        translate([width-radius, height-radius, 0]) cylinder(h=depth, r=radius, $fn=20);\n        translate([radius, height-radius, 0]) cylinder(h=depth, r=radius, $fn=20);\n    }\n}\n\n// Create gel layer module\nmodule gel_layer(width, height, thickness) {\n    color(gel_color) {\n        difference() {\n            rounded_rect(width, height, thickness, corner_radius);\n            translate([gel_thickness, gel_thickness, -0.1]) \n                rounded_rect(width-2*gel_thickness, height-2*gel_thickness, thickness+0.2, corner_radius-1);\n        }\n    }\n}\n\n// Create screen module\nmodule screen() {\n    screen_width = 45;\n    screen_height = 35;\n    screen_depth = 1;\n    \n    translate([device_width/2 - screen_width/2, device_height*0.7 - screen_height/2, device_thickness+gel_thickness-0.1]) {\n        color(screen_color) cube([screen_width, screen_height, screen_depth]);\n        \n        // Screen details\n        for (x = [2:8:screen_width-6]) {\n            for (y = [2:8:screen_height-6]) {\n                translate([x, y, 0.5]) color([0.2, 0.2, 0.3]) cube([6, 6, 0.1]);\n            }\n        }\n    }\n}\n\n// Create button module\nmodule button(x, y, symbol) {\n    button_size = 8;\n    button_height = 1.5;\n    \n    translate([x, y, device_thickness+gel_thickness]) {\n        color(button_color) {\n            difference() {\n                cylinder(h=button_height, r=button_size/2, $fn=16);\n                translate([0, 0, -0.1]) cylinder(h=button_height+0.2, r=button_size/2-1.5, $fn=16);\n            }\n        }\n        \n        // Symbol on button\n        if (symbol == \"power\") {\n            translate([0, 0, button_height+0.1]) {\n                color([0.8, 0.8, 0.8]) {\n                    difference() {\n                        cylinder(h=0.2, r=button_size/3, $fn=32);\n                        translate([0, 0, -0.1]) cylinder(h=0.4, r=button_size/3-1, $fn=32);\n                    }\n                }\n            }\n        }\n        if (symbol == \"plus\") {\n            translate([0, 0, button_height+0.1]) {\n                color([0.8, 0.8, 0.8]) {\n                    cube([6, 1.5, 0.2], center=true);\n                    cube([1.5, 6, 0.2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Create USB-C port\nmodule usb_port() {\n    port_width = 8;\n    port_height = 3;\n    port_depth = 4;\n    \n    translate([device_width/2 - port_width/2, -1, device_thickness/2 - port_height/2]) {\n        color([0.15, 0.15, 0.15]) cube([port_width, port_depth, port_height]);\n        \n        // Inner connector\n        translate([port_width/2 - 2.5, port_depth-0.5, port_height/2]) {\n            color([0.05, 0.05, 0.05]) cube([5, 0.5, 2]);\n        }\n    }\n}\n\n// Create LED indicator\nmodule led_indicator(x, y) {\n    translate([x, y, device_thickness+gel_thickness+0.1]) {\n        color([0.2, 0.8, 0.2]) sphere(r=1.5, $fn=16);\n    }\n}\n\n// Main device body\ncolor(case_color) {\n    difference() {\n        // Main body\n        rounded_rect(device_width, device_height, device_thickness, corner_radius);\n        \n        // Hollow out interior for electronics\n        translate([2, 2, 2]) \n            rounded_rect(device_width-4, device_height-4, device_thickness-1, corner_radius-2);\n    }\n}\n\n// Gel layer on top\ngel_layer(device_width, device_height, gel_thickness);\n\n// Screen\nscreen();\n\n// Buttons\nbutton(device_width*0.25, device_height*0.3, \"power\");\nbutton(device_width*0.5, device_height*0.2, \"plus\");\nbutton(device_width*0.75, device_height*0.3, \"plus\");\n\n// USB-C port on bottom\nusb_port();\n\n// LED indicators\nled_indicator(device_width*0.85, device_height*0.9);\nled_indicator(device_width*0.15, device_height*0.9);\n\n// Side grip texture\nfor (i = [1:4]) {\n    translate([device_width+0.1, i*device_height/5, device_thickness/2]) {\n        color([0.25, 0.25, 0.25]) cube([0.5, 3, 1]);\n    }\n    translate([-0.5, i*device_height/5, device_thickness/2]) {\n        color([0.25, 0.25, 0.25]) cube([0.5, 3, 1]);\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "shade",
    "openscad_code": "// Shade Electronic Device - Realistic Style, Medium Complexity\n// 3D Printable Smart Home Shade Controller\n\n$fn=64;\n\n// Main color scheme\nbody_color = \"slategray\";\naccent_color = \"silver\";\nscreen_color = \"black\";\nbutton_color = \"dimgray\";\n\n// Dimensions\nbody_width = 45;\nbody_height = 70;\nbody_depth = 12;\nscreen_width = 35;\nscreen_height = 50;\nwall_thickness = 1.5;\n\nmodule main_body() {\n    color(body_color)\n    difference() {\n        // Main rounded body\n        minkowski() {\n            cube([body_width, body_height, body_depth], center=true);\n            sphere(r=3);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n        cube([body_width-wall_thickness*2, body_height-wall_thickness*2, body_depth], center=true);\n        \n        // Mounting holes\n        for(pos = [[-15, -25, 0], [15, -25, 0], [-15, 25, 0], [15, 25, 0]]) {\n            translate(pos)\n            cylinder(h=20, r=1.5, center=true);\n        }\n    }\n}\n\nmodule screen() {\n    // Recessed screen area\n    color(screen_color)\n    translate([0, 0, body_depth/2 - 0.5])\n    cube([screen_width, screen_height, 1], center=true);\n    \n    // Screen bezel\n    color(accent_color)\n    translate([0, 0, body_depth/2])\n    cube([screen_width+4, screen_height+4, 0.5], center=true);\n}\n\nmodule buttons() {\n    // Power button\n    color(button_color)\n    translate([0, -30, body_depth/2 + 0.5])\n    cylinder(h=1, r=3);\n    \n    // Up/Down arrows\n    for(i = [-1, 1]) {\n        translate([i*10, -30, body_depth/2 + 0.5])\n        rotate([0, 0, i*90])\n        linear_extrude(1)\n        polygon(points=[[0,2], [-2,-2], [2,-2]]);\n    }\n    \n    // Menu button\n    color(button_color)\n    translate([0, 30, body_depth/2 + 0.5])\n    cube([6, 6, 1], center=true);\n}\n\nmodule status_leds() {\n    // WiFi indicator\n    color(\"blue\")\n    translate([-15, 0, body_depth/2 + 0.5])\n    cylinder(h=0.5, r=1.5);\n    \n    // Battery indicator  \n    color(\"green\")\n    translate([15, 0, body_depth/2 + 0.5])\n    cylinder(h=0.5, r=1.5);\n}\n\nmodule speaker_grill() {\n    // Speaker holes\n    color(body_color)\n    translate([0, 0, body_depth/2 - 1])\n    for(x = [-12:4:12]) {\n        for(y = [-15:4:15]) {\n            translate([x, y, 0])\n            cylinder(h=2, r=0.5);\n        }\n    }\n}\n\nmodule charging_port() {\n    // USB-C port\n    color(\"black\")\n    translate([0, body_height/2 - 2, 0])\n    rotate([90, 0, 0])\n    cube([8, 3, 4], center=true);\n    \n    // Port surround\n    color(accent_color)\n    translate([0, body_height/2 - 2, 0])\n    rotate([90, 0, 0])\n    cube([10, 4, 5], center=true);\n}\n\n// Assembly\nunion() {\n    main_body();\n    screen();\n    buttons();\n    status_leds();\n    speaker_grill();\n    charging_port();\n}",
    "renders": true
  },
  {
    "electronic_device": "hood",
    "openscad_code": "// Hood-mounted dashcam / ADAS module\n// Dimensions: 85 × 40 × 28 mm, ready for 3D printing\n\n$fn = 64;\n\n// Main colors\ncolor_body   = [0.12, 0.12, 0.12];   // matte black\ncolor_lens   = [0.05, 0.05, 0.05];   // dark glass\ncolor_led    = [0.0, 1.0, 0.1];      // green indicator\ncolor_mount  = [0.8, 0.8, 0.8];      // aluminum\n\nmodule main_body() {\n    difference() {\n        // Outer shell\n        translate([-42.5, -20, 0])\n            cube([85, 40, 28]);\n        \n        // Top chamfers\n        for (x = [-40, 40])\n            translate([x, 0, 28])\n                rotate([0, x>0?90:-90, 0])\n                    cube([10, 40, 10], center=true);\n    }\n}\n\nmodule lens_assembly() {\n    difference() {\n        // Lens barrel\n        color(color_lens)\n            translate([0, 0, 28])\n                cylinder(h=7, d1=24, d2=20);\n        \n        // Lens opening\n        translate([0, 0, 28.5])\n            cylinder(h=8, d=18);\n    }\n}\n\nmodule status_led(x) {\n    color(color_led)\n        translate([x, 0, 1])\n            cylinder(h=1, d=3);\n}\n\nmodule heat_vents() {\n    for (i = [-1:1]) {\n        translate([i*15, 0, 28])\n            cube([2, 40, 1]);\n    }\n}\n\nmodule micro_usb_port() {\n    translate([-42.5, 0, 14])\n        rotate([0, 90, 0])\n            cube([8, 12, 5]);\n}\n\nmodule mounting_clip() {\n    color(color_mount)\n    difference() {\n        translate([0, 0, -5])\n            cylinder(h=5, d=20);\n        \n        // Central hole for screw\n        translate([0, 0, -6])\n            cylinder(h=7, d=3.5);\n    }\n}\n\nmodule button_pad() {\n    for (b = [-1:1]) {\n        translate([b*8, -20, 14])\n            cube([5, 2, 5]);\n    }\n}\n\nmodule brand_logo() {\n    translate([30, 15, 28.1])\n        cube([8, 3, 0.2]);\n}\n\n// Assembly\nunion() {\n    // Body shell\n    color(color_body) main_body();\n    \n    // Lens on top center\n    lens_assembly();\n    \n    // LED indicators at front\n    status_led(-35);\n    status_led(35);\n    \n    // Ventilation slots\n    heat_vents();\n    \n    // Side port\n    color(color_body) micro_usb_port();\n    \n    // Buttons on front edge\n    color([0.2, 0.2, 0.2]) button_pad();\n    \n    // Mounting base\n    mounting_clip();\n    \n    // Subtle logo\n    color([0.8, 0.8, 0.8]) brand_logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "cap",
    "openscad_code": "// Raspberry Pi Zero W realistic cap case (medium complexity, 70mm length)\n// Top enclosure for the Pi Zero with cutouts for all connectors\n\n// Main colors\ncolor(\"red\") \ndifference() {\n    // Main body shell\n    union() {\n        // Main cap body\n        hull() {\n            translate([-34, -23, 0]) cube([68, 46, 2]);\n            translate([-34, -23, 18]) cube([68, 46, 2]);\n        }\n        \n        // Rounded top edge\n        for (x = [-30:5:30]) {\n            translate([x, 0, 18]) rotate([90,0,0]) cylinder(h=23, r=2, $fn=12);\n        }\n        \n        // Logo ridge\n        translate([0, -8, 16]) cube([28, 16, 3]);\n    }\n    \n    // Internal cavity for Pi\n    translate([-30, -19, 2]) cube([60, 38, 14]);\n    \n    // GPIO cutout (40-pin header)\n    translate([-25, 15, 2]) cube([50, 8, 12]);\n    \n    // Camera connector cutout\n    translate([25, -20, 2]) cube([10, 6, 12]);\n    \n    // HDMI port cutout\n    translate([-34, -8, 5]) cube([8, 16, 8]);\n    \n    // USB port cutout\n    translate([-34, -2, 5]) cube([8, 10, 8]);\n    \n    // Power micro-USB cutout\n    translate([26, -6, 5]) cube([8, 12, 8]);\n    \n    // SD card access slot\n    translate([26, 2, 8]) cube([8, 15, 2]);\n    \n    // Status LED windows\n    translate([15, -23, 10]) cylinder(h=2, r=1.5, $fn=8);\n    translate([15, 23, 10]) cylinder(h=2, r=1.5, $fn=8);\n}\n\n// Mounting posts\nmodule mount_post(x,y) {\n    color(\"white\")\n    translate([x, y, 0]) {\n        difference() {\n            cylinder(h=12, r=2.5, $fn=16);\n            cylinder(h=12, r=1.5, $fn=16);\n        }\n    }\n}\n\nmount_post(-20, -12);\nmount_post(-20, 12);\nmount_post(20, -12);\nmount_post(20, 12);\n\n// Ventilation slots\nfor (i = [-25:5:25]) {\n    color(\"red\")\n    difference() {\n        translate([i, -23, 8]) cube([3, 2, 6]);\n        translate([i, -23, 8]) cube([2.5, 2.1, 6]);\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "cover",
    "openscad_code": "// Raspberry Pi 4B-style case cover – medium-complexity, printable, realistic\n// External dimensions: 90 × 60 × 30 mm (slightly larger than actual Pi4)\n\n// Wall thickness\nwall = 2.0;\n\n// Base size of the Pi board\nboard_w = 85;\nboard_d = 56;\nboard_h = 6;\n\n// Outer shell\nmodule case_shell() {\n    difference() {\n        // Main body\n        color(\"silver\")\n        translate([0, 0, wall])\n            cube([board_w + 2*wall, board_d + 2*wall, board_h + wall], center = true);\n        \n        // Hollow cavity\n        color(\"silver\")\n        translate([0, 0, wall])\n            cube([board_w - 0.5, board_d - 0.5, board_h + 2*wall], center = true);\n        \n        // GPIO slot (40-pin)\n        color(\"silver\")\n        translate([0, (board_d + wall)/2, wall])\n            cube([50, wall, 10], center = true);\n        \n        // Micro-SD card slot\n        color(\"silver\")\n        translate([-(board_w + wall)/2, 10, wall])\n            cube([wall, 20, 5], center = true);\n        \n        // USB-C power port\n        color(\"silver\")\n        translate([-(board_w + wall)/2, -10, wall])\n            cube([wall, 10, 8], center = true);\n        \n        // Dual micro-HDMI ports\n        for (y = [-20, 0]) {\n            color(\"silver\")\n            translate([-(board_w + wall)/2, y, wall])\n                cube([wall, 8, 6], center = true);\n        }\n        \n        // USB-A 2.0 + 3.0 ports\n        for (y = [20:10:40]) {\n            color(\"silver\")\n            translate([-(board_w + wall)/2, y, wall])\n                cube([wall, 10, 12], center = true);\n        }\n        \n        // Top ventilation slots\n        for (x = [-30:5:30]) {\n            color(\"silver\")\n            translate([x, 0, board_h + wall])\n                cube([3, board_d - 2*wall, 2], center = true);\n        }\n        \n        // Ethernet slot\n        color(\"silver\")\n        translate([(board_w + wall)/2, -15, wall])\n            cube([wall, 16, 12], center = true);\n    }\n}\n\n// Mounting posts (M2.5 screw holes)\nmodule posts() {\n    for (p = [[-30, -23], [30, -23], [30, 23], [-30, 23]]) {\n        translate([p.x, p.y, 0])\n            difference() {\n                color(\"silver\")\n                cylinder(h = wall + 1, d = 5.5, center = true);\n                color(\"silver\")\n                cylinder(h = wall + 2, d = 2.9, center = true);\n            }\n    }\n}\n\n// RPi logo emboss\nmodule logo() {\n    translate([0, -10, board_h + wall + 1.5])\n        linear_extrude(0.5)\n            text(\"RPi\", size = 8, font = \"Arial:style=Bold\", halign = \"center\");\n}\n\n// Indicator LED windows (clear)\nmodule leds() {\n    for (x = [-15, 15]) {\n        color(\"red\")\n        translate([x, 25, board_h + wall + 0.1])\n            cylinder(h = 0.5, d = 3);\n    }\n}\n\n// Assemble the cover\nunion() {\n    case_shell();\n    posts();\n    logo();\n    leds();\n}",
    "renders": true
  },
  {
    "electronic_device": "case",
    "openscad_code": "// Raspberry Pi 4 Case – Realistic, medium-complexity printable model\n// External dimensions: 90 × 60 × 30 mm\n\n$fn = 36;\n\n// Main body\nmodule case_body() {\n    difference() {\n        // Outer shell\n        color(\"white\")\n        cube([90, 60, 30], center=true);\n\n        // Inner cavity\n        translate([0, 0, 1])  // leave 1 mm bottom thickness\n        cube([86, 56, 29], center=true);\n\n        // SD-card slot cutout\n        translate([-40, 28, 0])\n        cube([18, 2, 6], center=true);\n\n        // Micro-HDMI port cutouts\n        for (y = [14, -14])\n            translate([40, y, 0])\n            cube([2, 7, 4], center=true);\n\n        // USB-C power cutout\n        translate([40, 0, 0])\n        cube([2, 8, 4], center=true);\n\n        // USB-A port cutouts\n        for (y = [-10, -20])\n            translate([40, y, 0])\n        cube([2, 8, 4], center=true);\n\n        // Ethernet port cutout\n        translate([40, 24, 0])\n        cube([2, 14, 6], center=true);\n\n        // GPIO access slot\n        translate([-45, 0, 8])\n        cube([2, 50, 8], center=true);\n    }\n}\n\n// Ventilation holes on top\nmodule vents() {\n    for (x = [-30:10:30])\n        for (y = [-20:10:20])\n            translate([x, y, 14])\n            cylinder(h=2, d=3, center=true);\n}\n\n// Snap-fit lid\nmodule lid() {\n    difference() {\n        color(\"white\")\n        translate([0, 0, 16])\n        cube([90, 60, 1.5], center=true);\n\n        // Vent holes\n        vents();\n    }\n}\n\n// Mounting posts for PCB\nmodule posts() {\n    for (pos = [[-30, -20], [30, -20], [30, 20], [-30, 20]]) {\n        translate([pos[0], pos[1], -13.5])\n        cylinder(h=5, d=4, center=true);\n    }\n}\n\n// Activity LED light pipe\nmodule led_pipe() {\n    color(\"red\")\n    translate([-38, 22, 10])\n    rotate([0, 90, 0])\n    cylinder(h=6, d=3, center=true);\n}\n\n// Assembly\ncase_body();\nlid();\nposts();\nled_pipe();",
    "renders": true
  },
  {
    "electronic_device": "bag",
    "openscad_code": "// Electronic Handheld Game Bag - Medium Complexity Realistic Style\n// Portable gaming device resembling a classic handheld console\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\n// Main dimensions\nbag_width = 80;\nbag_height = 50;\nbag_depth = 15;\nwall_thickness = 2;\n\n// Main body shell\nmodule main_body() {\n    color(\"lightgrey\")\n    difference() {\n        // Outer shell\n        translate([0, 0, bag_depth/2])\n        cube([bag_width, bag_height, bag_depth], center=true);\n        \n        // Inner cavity\n        translate([0, 0, bag_depth/2 + wall_thickness])\n        cube([bag_width - 2*wall_thickness, bag_height - 2*wall_thickness, bag_depth], center=true);\n        \n        // Rounded edges\n        translate([0, 0, bag_depth/2 + wall_thickness])\n        cube([bag_width - 4*wall_thickness, bag_height - 4*wall_thickness, bag_depth], center=true);\n    }\n}\n\n// Screen bezel\nmodule screen() {\n    color(\"black\")\n    translate([0, 10, bag_depth - 1])\n    cube([50, 30, 1], center=true);\n    \n    color(\"darkblue\")\n    translate([0, 10, bag_depth - 0.5])\n    cube([46, 26, 0.5], center=true);\n}\n\n// D-pad\nmodule dpad() {\n    color(\"darkgrey\")\n    translate([-25, -5, bag_depth - 1])\n    cube([12, 12, 1], center=true);\n    \n    // Cross pattern\n    color(\"black\")\n    for(i = [-1, 1]) {\n        translate([-25 + i*3, -5, bag_depth - 0.5])\n        cube([3, 8, 0.5], center=true);\n        translate([-25, -5 + i*3, bag_depth - 0.5])\n        cube([8, 3, 0.5], center=true);\n    }\n}\n\n// Action buttons\nmodule action_buttons() {\n    for(pos = [[25, -5], [25, 5]]) {\n        color(\"firebrick\")\n        translate([pos[0], pos[1], bag_depth - 1])\n        cylinder(h=1, r=3, center=true);\n        \n        color(\"black\")\n        translate([pos[0], pos[1], bag_depth - 0.5])\n        cylinder(h=0.5, r=2.5, center=true);\n    }\n}\n\n// Start/Select buttons\nmodule control_buttons() {\n    for(pos = [[0, -15], [0, -20]]) {\n        color(\"darkgrey\")\n        translate([pos[0], pos[1], bag_depth - 1])\n        cube([8, 3, 1], center=true);\n        \n        color(\"white\")\n        translate([pos[0], pos[1], bag_depth - 0.5])\n        cube([6, 2, 0.5], center=true);\n    }\n}\n\n// Speaker grills\nmodule speakers() {\n    for(y = [-20, 20]) {\n        color(\"darkgrey\")\n        translate([0, y, bag_depth - 1])\n        cube([20, 6, 1], center=true);\n        \n        // Speaker holes\n        for(i = [-2:2]) {\n            color(\"black\")\n            translate([i*3, y, bag_depth - 0.5])\n            cylinder(h=1, r=0.5, center=true);\n        }\n    }\n}\n\n// Power LED\nmodule power_indicator() {\n    color(\"darkgrey\")\n    translate([-30, 20, bag_depth - 1])\n    cube([4, 4, 1], center=true);\n    \n    color(\"red\")\n    translate([-30, 20, bag_depth - 0.5])\n    cube([2, 2, 0.5], center=true);\n}\n\n// Charging port\nmodule charging_port() {\n    color(\"black\")\n    translate([30, -20, bag_depth - 1])\n    cube([6, 3, 1], center=true);\n}\n\n// Cartridge slot\nmodule cartridge_slot() {\n    color(\"darkgrey\")\n    translate([0, 0, 0])\n    cube([40, 2, 2], center=true);\n}\n\n// Brand label\nmodule brand_label() {\n    color(\"gold\")\n    translate([0, 0, bag_depth - 0.5])\n    cube([30, 6, 0.3], center=true);\n}\n\n// Assemble the device\nmain_body();\nscreen();\ndpad();\naction_buttons();\ncontrol_buttons();\nspeakers();\npower_indicator();\ncharging_port();\ncartridge_slot();\nbrand_label();",
    "renders": true
  },
  {
    "electronic_device": "box",
    "openscad_code": "// Realistic Electronic Box Device - Wi-Fi Router\n// Medium complexity with functional details\n\n// Color definitions\n$fn = 50;\n\n// Main dimensions\nrouter_width = 90;\nrouter_depth = 60;\nrouter_height = 25;\nwall_thickness = 2;\n\n// Base router body\nmodule router_body() {\n    color(\"darkslategray\") \n    difference() {\n        // Main box\n        cube([router_width, router_depth, router_height]);\n        \n        // Hollow out interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n        cube([router_width-wall_thickness*2, router_depth-wall_thickness*2, router_height-wall_thickness]);\n    }\n}\n\n// Ventilation slots\nmodule ventilation_slots() {\n    color(\"darkslategray\")\n    for(y = [-20:-5:5]) {\n        translate([router_width/2-15, y, 0])\n        cube([30, 2, 1]);\n    }\n}\n\n// LED indicators\nmodule leds() {\n    // Power LED (blue)\n    translate([router_width/2-30, -router_depth/2+5, router_height+0.1])\n    color(\"blue\") \n    cylinder(h=0.5, r=1);\n    \n    // Internet LED (green)\n    translate([router_width/2-20, -router_depth/2+5, router_height+0.1])\n    color(\"green\") \n    cylinder(h=0.5, r=1);\n    \n    // WiFi LED (amber)\n    translate([router_width/2-10, -router_depth/2+5, router_height+0.1])\n    color(\"orange\") \n    cylinder(h=0.5, r=1);\n}\n\n// Ethernet ports\nmodule ethernet_ports() {\n    for(i = [0:3]) {\n        translate([router_width/2-35+i*15, router_depth/2-8, 2])\n        color(\"black\") \n        cube([10, 5, 6]);\n    }\n}\n\n// WAN port (different color)\nmodule wan_port() {\n    translate([router_width/2+25, router_depth/2-8, 2])\n    color(\"darkblue\") \n    cube([10, 5, 6]);\n}\n\n// Reset button\nmodule reset_button() {\n    translate([router_width/2+10, -router_depth/2+8, 2])\n    color(\"red\") \n    cube([4, 3, 2]);\n}\n\n// Power connector\nmodule power_connector() {\n    translate([-router_width/2+8, 0, 2])\n    color(\"black\") \n    cube([8, 6, 4]);\n}\n\n// Antennas (folded down for 3D printing)\nmodule antennas() {\n    // Left antenna\n    translate([-router_width/2+5, router_depth/2-5, router_height])\n    rotate([90, 0, 0])\n    color(\"black\") \n    cylinder(h=20, r=1.5);\n    \n    // Right antenna\n    translate([router_width/2-5, router_depth/2-5, router_height])\n    rotate([90, 0, 0])\n    color(\"black\") \n    cylinder(h=20, r=1.5);\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    for(x = [-35:70:70]) {\n        for(y = [-20:40:40]) {\n            translate([x, y, -1])\n            color(\"black\") \n            cylinder(h=1, r=2);\n        }\n    }\n}\n\n// Brand label\nmodule brand_label() {\n    translate([0, 0, router_height+0.1])\n    color(\"white\") \n    cube([40, 10, 0.1]);\n}\n\n// Assembly\nrouter_body();\ntranslate([0, 0, router_height]) ventilation_slots();\nleds();\nethernet_ports();\nwan_port();\nreset_button();\npower_connector();\nantennas();\nrubber_feet();\nbrand_label();",
    "renders": true
  },
  {
    "electronic_device": "arcade",
    "openscad_code": "// Miniature 3D-printable arcade cabinet (≈80 mm tall)\n\n// Overall shell -------------------------------------------------\nunion() {\n    // Main cabinet body (printable shell, 2 mm walls)\n    difference() {\n        color(\"red\") cube([45, 38, 80], center = true);\n        translate([0, 0, 2]) cube([41, 34, 76], center = true);\n    }\n\n    // Marquee top sign\n    color(\"black\") translate([0, 0, 42])\n        cube([48, 6, 16], center = true);\n\n    // Control panel ------------------------------------------------\n    color(\"black\") translate([0, 20.5, 0])\n        cube([46, 3, 20], center = true);\n\n    // Joystick\n    color(\"darkslategray\") translate([0, 22, -5])\n        cylinder(h = 18, d = 6, $fn = 16);\n    color(\"red\") translate([0, 22, 13])\n        sphere(d = 10);\n\n    // Buttons (arcade-style, 3 across)\n    for (x = [-12, 0, 12])\n        color(\"yellow\") translate([x, 22, 5])\n            cylinder(h = 4, d1 = 8, d2 = 6, $fn = 20);\n\n    // Screen bezel -------------------------------------------------\n    difference() {\n        color(\"black\") translate([0, 0, 15])\n            cube([32, 2, 32], center = true);\n        translate([0, 1.5, 15])\n            cube([28, 2.1, 28], center = true);\n    }\n\n    // Screen surface\n    color(\"dodgerblue\") translate([0, 2.1, 15])\n        cube([28, 0.5, 28], center = true);\n\n    // Coin slot ----------------------------------------------------\n    color(\"gray\") translate([0, 20.5, -32])\n        cube([12, 1, 2], center = true);\n\n    // Base / feet --------------------------------------------------\n    color(\"dimgray\")\n        for (x = [-18, 18])\n            translate([x, 0, -41])\n                cube([6, 36, 4], center = true);\n\n    // Side art panels (simple blocks for realism)\n    color(\"white\") {\n        translate([23, 0, 0]) cube([0.5, 34, 74], center = true);\n        translate([-23, 0, 0]) cube([0.5, 34, 74], center = true);\n    }\n\n    // Rear access panel (ventilation slots)\n    difference() {\n        color(\"black\") translate([0, -20.5, -15])\n            cube([40, 2, 40], center = true);\n        for (y = [-15:10:15])\n            translate([0, -19.4, y])\n                cube([36, 2.1, 2], center = true);\n    }\n\n    // Power LED indicator\n    color(\"lime\") translate([20, 19, -25])\n        cylinder(h = 0.5, d = 3);\n\n    // Speaker grill dots (simple cones)\n    for (x = [-8:8:8])\n        for (z = [6:6:24])\n            color(\"darkgray\") translate([x, 20.5, z])\n                cylinder(h = 0.5, d1 = 1.5, d2 = 0.5);\n}",
    "renders": true
  },
  {
    "electronic_device": "pinball",
    "openscad_code": "// Pinball Electronic Device - Realistic Style, Medium Complexity\n// A handheld electronic pinball game with screen, buttons, and speaker\n\n// Device dimensions\ndevice_width = 80;\ndevice_height = 120;\ndevice_depth = 25;\nwall_thickness = 2;\n\n// Colors\n$fa = 2;\n$fs = 0.5;\n\n// Main body module\nmodule main_body() {\n    color([0.85, 0.85, 0.85]) {\n        difference() {\n            // Outer shell\n            cube([device_width, device_height, device_depth], center=true);\n            \n            // Hollow interior\n            translate([0, 0, -wall_thickness/2])\n                cube([device_width-wall_thickness*2, device_height-wall_thickness*2, device_depth], center=true);\n            \n            // Screen opening\n            translate([0, 20, device_depth/2-0.1])\n                cube([device_width-20, 50, 2], center=true);\n        }\n    }\n}\n\n// Screen module\nmodule screen() {\n    color([0.1, 0.1, 0.1]) {\n        translate([0, 20, device_depth/2-1])\n            cube([device_width-22, 48, 1], center=true);\n    }\n    \n    // Screen bezel\n    color([0.2, 0.2, 0.2]) {\n        difference() {\n            translate([0, 20, device_depth/2-1.5])\n                cube([device_width-18, 52, 1], center=true);\n            translate([0, 20, device_depth/2-1.6])\n                cube([device_width-20, 50, 1], center=true);\n        }\n    }\n}\n\n// Button module\nmodule button(x, y, size, color_val) {\n    color(color_val) {\n        // Button base\n        translate([x, y, device_depth/2-2])\n            cylinder(h=2, r=size/2+1, center=true);\n        \n        // Button top\n        translate([x, y, device_depth/2-0.5])\n            cylinder(h=1, r=size/2, center=true);\n    }\n}\n\n// Directional pad\nmodule dpad() {\n    color([0.1, 0.1, 0.1]) {\n        translate([-device_width/2+15, -device_height/2+30, device_depth/2-1.5]) {\n            // Center\n            cube([8, 8, 2], center=true);\n            \n            // Up\n            translate([0, 8, 0])\n                cube([8, 8, 2], center=true);\n            \n            // Down\n            translate([0, -8, 0])\n                cube([8, 8, 2], center=true);\n            \n            // Left\n            translate([-8, 0, 0])\n                cube([8, 8, 2], center=true);\n            \n            // Right\n            translate([8, 0, 0])\n                cube([8, 8, 2], center=true);\n        }\n    }\n}\n\n// Speaker grill\nmodule speaker() {\n    color([0.3, 0.3, 0.3]) {\n        translate([0, -device_height/2+15, device_depth/2-1]) {\n            // Grill holes\n            for(i = [-2:2]) {\n                for(j = [-1:1]) {\n                    translate([i*4, j*4, 0])\n                        cylinder(h=2, r=1, center=true);\n                }\n            }\n            \n            // Grill frame\n            difference() {\n                cube([20, 12, 1], center=true);\n                for(i = [-2:2]) {\n                    for(j = [-1:1]) {\n                        translate([i*4, j*4, -0.1])\n                            cylinder(h=2, r=1.5, center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Power LED\nmodule power_led() {\n    color([0, 0.8, 0]) {\n        translate([device_width/2-8, device_height/2-10, device_depth/2-1])\n            cylinder(h=1, r=2, center=true);\n    }\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    color([0.9, 0.9, 0.9]) {\n        translate([device_width/2-wall_thickness-10, 0, -device_depth/2+5]) {\n            difference() {\n                cube([20, 30, 8], center=true);\n                translate([0, 0, -1])\n                    cube([18, 28, 10], center=true);\n            }\n            \n            // Screws\n            color([0.5, 0.5, 0.5]) {\n                translate([5, 10, 4])\n                    cylinder(h=1, r=1, center=true);\n                translate([5, -10, 4])\n                    cylinder(h=1, r=1, center=true);\n            }\n        }\n    }\n}\n\n// Assemble the device\nmain_body();\nscreen();\ndpad();\n\n// Action buttons\nbutton(device_width/2-15, -device_height/2+40, 6, [0.8, 0.2, 0.2]);\nbutton(device_width/2-15, -device_height/2+25, 6, [0.2, 0.2, 0.8]);\nbutton(device_width/2-15, -device_height/2+55, 6, [0.2, 0.8, 0.2]);\n\n// Start/select buttons\nbutton(0, -device_height/2+15, 4, [0.1, 0.1, 0.1]);\nbutton(10, -device_height/2+15, 4, [0.1, 0.1, 0.1]);\n\nspeaker();\npower_led();\nbattery_compartment();",
    "renders": true
  },
  {
    "electronic_device": "paddle",
    "openscad_code": "// Paddle Electronic Device - Realistic Game Controller Style\n// Overall dimensions: 80mm x 35mm x 12mm\n\n// Color definitions\npaddle_color = \"DarkSlateGray\";\nbutton_color = \"FireBrick\";\nscreen_color = \"Black\";\naccent_color = \"Silver\";\n\n// Main body module\nmodule paddle_body() {\n    difference() {\n        // Main paddle body - rounded rectangle shape\n        color(paddle_color)\n        minkowski() {\n            cube([70, 30, 8], center=true);\n            sphere(3);\n        }\n        \n        // Hollow out the inside for electronics\n        translate([0, 0, -1])\n        scale([0.8, 0.75, 0.8])\n        minkowski() {\n            cube([70, 30, 8], center=true);\n            sphere(2);\n        }\n    }\n}\n\n// Button module for repetitive buttons\nmodule button(diameter, height, x_pos, y_pos) {\n    color(button_color)\n    translate([x_pos, y_pos, 5])\n    cylinder(h=height, d=diameter, $fn=32);\n    \n    // Button surround/bezel\n    color(accent_color)\n    translate([x_pos, y_pos, 4.9])\n    cylinder(h=0.5, d=diameter+2, $fn=32);\n}\n\n// Screen module\nmodule paddle_screen() {\n    // Screen bezel\n    color(accent_color)\n    translate([0, 0, 5.5])\n    cube([25, 12, 1], center=true);\n    \n    // Actual screen\n    color(screen_color)\n    translate([0, 0, 6])\n    cube([22, 9, 0.5], center=true);\n}\n\n// D-pad module\nmodule d_pad(x_pos, y_pos) {\n    color(button_color)\n    union() {\n        // Vertical bar\n        translate([x_pos, y_pos, 5])\n        cube([6, 18, 2], center=true);\n        \n        // Horizontal bar\n        translate([x_pos, y_pos, 5])\n        cube([18, 6, 2], center=true);\n        \n        // Center nub\n        translate([x_pos, y_pos, 6.5])\n        cylinder(h=2, d=8, $fn=32);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    color(\"Black\")\n    translate([36, 0, 0])\n    rotate([90, 0, 0])\n    cube([8, 4, 3], center=true);\n    \n    // Port surround\n    color(accent_color)\n    translate([36, 0, 0])\n    rotate([90, 0, 0])\n    cube([10, 6, 3.2], center=true);\n}\n\n// LED indicators\nmodule led_indicator(x_pos, color_name) {\n    color(color_name)\n    translate([x_pos, -12, 5.5])\n    cylinder(h=0.5, d=3, $fn=16);\n    \n    // LED bezel\n    color(accent_color)\n    translate([x_pos, -12, 5.4])\n    cylinder(h=0.3, d=4, $fn=16);\n}\n\n// Generate the complete paddle\nunion() {\n    // Main body\n    paddle_body();\n    \n    // Screen in center\n    paddle_screen();\n    \n    // D-pad on left\n    d_pad(-20, 0);\n    \n    // Action buttons on right\n    button(6, 2, 20, 5);\n    button(6, 2, 25, 0);\n    button(6, 2, 20, -5);\n    \n    // Menu buttons below screen\n    button(4, 1.5, -8, 8);\n    button(4, 1.5, 8, 8);\n    \n    // USB-C port on right side\n    usb_port();\n    \n    // LED indicators\n    led_indicator(-25, \"Red\");\n    led_indicator(-30, \"Green\");\n    led_indicator(-35, \"Blue\");\n    \n    // Small speaker grill holes\n    for (i = [-2:2]) {\n        color(\"Black\")\n        translate([0, 12, 5.5])\n        translate([i * 3, 0, 0])\n        cylinder(h=1, d=1, $fn=8);\n    }\n    \n    // Logo area\n    color(\"White\")\n    translate([0, 0, 6.5])\n    rotate([0, 0, 45])\n    cube([3, 3, 0.2], center=true);\n}",
    "renders": true
  },
  {
    "electronic_device": "wheel",
    "openscad_code": "// Electronic wheel device - a smart bicycle wheel with built-in sensors and LED indicators\n// Overall size: ~70mm diameter, 25mm thick\n\n$fa = 2;\n$fs = 0.5;\n\n// Main colors\ncolor_rim = [0.2, 0.2, 0.2];      // Dark gray rim\ncolor_tire = [0.1, 0.1, 0.1];     // Black tire\ncolor_hub = [0.7, 0.7, 0.7];      // Light gray hub\ncolor_body = [0.5, 0.5, 0.5];     // Mid gray body\ncolor_screen = [0.1, 0.1, 0.3];   // Dark blue screen\ncolor_led = [0, 1, 0];            // Green LED\ncolor_button = [0.8, 0.8, 0.8];   // Light button\ncolor_usb = [0.4, 0.4, 0.4];      // USB port color\n\n// Tire with integrated electronics\nmodule tire_assembly() {\n    // Main tire surface\n    color(color_tire)\n    difference() {\n        cylinder(h = 15, r = 35, center = true);\n        cylinder(h = 16, r = 30, center = true);\n    }\n    \n    // Tire tread pattern - simple blocks\n    for (i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n        translate([32.5, 0, 0])\n        rotate([0, 90, 0])\n        color(color_tire)\n        cube([5, 3, 1], center = true);\n    }\n    \n    // LED indicators in tire\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([30, 0, 0])\n        color(color_led)\n        sphere(r = 2);\n    }\n}\n\n// Rim with sensor housing\nmodule rim_assembly() {\n    // Main rim structure\n    color(color_rim)\n    difference() {\n        cylinder(h = 12, r = 30, center = true);\n        cylinder(h = 13, r = 25, center = true);\n    }\n    \n    // Sensor windows\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([27.5, 0, 0])\n        color([0.2, 0.2, 0.8])\n        cube([5, 2, 10], center = true);\n    }\n}\n\n// Spokes with embedded wires\nmodule spokes() {\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([0, 0, 0])\n        color(color_rim)\n        cube([2, 20, 1], center = true);\n    }\n}\n\n// Electronic hub assembly\nmodule hub_assembly() {\n    // Main hub body\n    color(color_hub)\n    difference() {\n        cylinder(h = 20, r = 10, center = true);\n        cylinder(h = 21, r = 5, center = true);\n    }\n    \n    // Electronic housing on side\n    translate([0, 0, 12])\n    color(color_body)\n    difference() {\n        cylinder(h = 8, r = 15);\n        cylinder(h = 9, r = 5);\n    }\n    \n    // OLED screen\n    translate([0, 0, 17])\n    color(color_screen)\n    cube([20, 8, 1], center = true);\n    \n    // Control button\n    translate([0, 12, 12])\n    color(color_button)\n    cylinder(h = 3, r = 3);\n    \n    // USB-C charging port\n    rotate([0, 90, 0])\n    translate([15, 0, 12])\n    color(color_usb)\n    cube([4, 7, 3], center = true);\n    \n    // Status LED\n    translate([8, 0, 17])\n    color(color_led)\n    sphere(r = 1.5);\n}\n\n// Battery compartment cover\nmodule battery_cover() {\n    translate([0, 0, -12])\n    color(color_body)\n    difference() {\n        cylinder(h = 4, r = 15);\n        cylinder(h = 5, r = 12);\n    }\n    \n    // Screws\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([10, 0, -10])\n        color(color_rim)\n        cylinder(h = 2, r = 1.5);\n    }\n}\n\n// Main assembly\ntire_assembly();\nrim_assembly();\nspokes();\nhub_assembly();\nbattery_cover();",
    "renders": true
  },
  {
    "electronic_device": "yoke",
    "openscad_code": "// Yoke Electronic Flight Controller - Realistic Style\n// Medium complexity with functional features\n\n$fn = 64;\n\n// Main dimensions\nyoke_width = 85;\nyoke_height = 65;\nhandle_diameter = 18;\nshaft_diameter = 12;\nbase_width = 40;\nbase_depth = 35;\nbase_height = 15;\n\n// Colors\ncolor_yoke = [0.2, 0.2, 0.2];      // Dark gray\ncolor_grip = [0.1, 0.1, 0.1];      // Black\ncolor_buttons = [0.8, 0.1, 0.1];   // Red\ncolor_screen = [0.1, 0.1, 0.3];    // Dark blue\ncolor_base = [0.3, 0.3, 0.3];      // Gray\n\n// Base module\nmodule base() {\n    color(color_base)\n    union() {\n        // Main base body\n        translate([0, 0, base_height/2])\n            cube([base_width, base_depth, base_height], center=true);\n        \n        // Tapered bottom\n        translate([0, 0, base_height/4])\n            cube([base_width*1.2, base_depth*1.2, base_height/2], center=true);\n        \n        // Mounting holes\n        for(x = [-15, 15])\n            for(y = [-10, 10])\n                translate([x, y, base_height])\n                    cylinder(h=base_height+1, d=3, center=false);\n    }\n}\n\n// Yoke shaft\nmodule yoke_shaft() {\n    color(color_yoke)\n    union() {\n        // Main shaft\n        translate([0, 0, base_height + yoke_height/2])\n            cylinder(h=yoke_height*1.5, d=shaft_diameter, center=true);\n        \n        // Shaft collar\n        translate([0, 0, base_height + 5])\n            cylinder(h=5, d=shaft_diameter*1.5, center=false);\n    }\n}\n\n// Yoke handles with grips\nmodule yoke_handle(x_pos) {\n    color(color_yoke)\n    union() {\n        // Handle bar\n        translate([x_pos, 0, base_height + yoke_height])\n            rotate([0, 90, 0])\n                cylinder(h=handle_diameter*2, d=handle_diameter, center=true);\n        \n        // Handle grip\n        color(color_grip)\n        translate([x_pos, handle_diameter, base_height + yoke_height])\n            rotate([0, 90, 0])\n                cylinder(h=handle_diameter*1.8, d=handle_diameter*1.1, center=true);\n    }\n}\n\n// Control buttons on handles\nmodule control_buttons(x_pos) {\n    color(color_buttons)\n    for(i = [0:2]) {\n        angle = 45 + i * 45;\n        radius = handle_diameter * 0.7;\n        translate([\n            x_pos + cos(angle) * radius,\n            handle_diameter + sin(angle) * radius,\n            base_height + yoke_height\n        ])\n            sphere(d=4);\n    }\n}\n\n// Electronic display screen\nmodule display_screen() {\n    color(color_screen)\n    union() {\n        // Screen bezel\n        translate([0, -handle_diameter - 5, base_height + yoke_height + 5])\n            cube([30, 20, 2], center=true);\n        \n        // Screen\n        color([0, 0, 0])\n        translate([0, -handle_diameter - 5, base_height + yoke_height + 6])\n            cube([26, 16, 0.5], center=true);\n        \n        // Indicator LEDs\n        color([1, 0, 0])\n        for(i = [-1, 0, 1])\n            translate([i*8, -handle_diameter - 15, base_height + yoke_height + 6])\n                sphere(d=2);\n    }\n}\n\n// USB port\nmodule usb_port() {\n    color([0.1, 0.1, 0.1])\n    translate([base_width/2 - 5, 0, base_height - 2])\n        cube([8, 12, 4], center=true);\n}\n\n// Mode selector knob\nmodule mode_knob() {\n    color([0.8, 0.8, 0.8])\n    translate([0, base_depth/2 - 3, base_height + 10])\n        rotate([90, 0, 0])\n            cylinder(h=5, d=8, center=false);\n}\n\n// Assembly\nunion() {\n    // Base components\n    base();\n    yoke_shaft();\n    \n    // Yoke handles\n    yoke_handle(yoke_width/2);\n    yoke_handle(-yoke_width/2);\n    \n    // Controls\n    control_buttons(yoke_width/2);\n    control_buttons(-yoke_width/2);\n    display_screen();\n    usb_port();\n    mode_knob();\n}",
    "renders": true
  },
  {
    "electronic_device": "throttle",
    "openscad_code": "// Throttle controller for flight simulators\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Main dimensions\nbase_width = 80;\nbase_depth = 60;\nbase_height = 12;\nlever_height = 70;\nlever_diameter = 12;\nscreen_width = 40;\nscreen_height = 20;\nscreen_depth = 3;\n\n// Colors\ncolor_base = [0.2, 0.2, 0.2];\ncolor_lever = [0.1, 0.1, 0.1];\ncolor_buttons = [0.8, 0.8, 0.8];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_screen_active = [0, 0.8, 0];\n\nmodule base_plate() {\n    color(color_base)\n    difference() {\n        // Main base\n        translate([0, 0, base_height/2])\n            cube([base_width, base_depth, base_height], center=true);\n        \n        // Cable channel\n        translate([-base_width/2 - 5, 0, base_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=10, r=5, center=true);\n        \n        // Mounting holes\n        for(x = [-30, 30])\n            for(y = [-20, 20])\n                translate([x, y, base_height/2])\n                    cylinder(h=base_height+1, r=2, center=true);\n    }\n}\n\nmodule lever_assembly() {\n    // Lever base\n    color(color_base)\n    translate([0, 0, base_height])\n        cylinder(h=8, r=15, center=false);\n    \n    // Lever shaft\n    color(color_lever)\n    translate([0, 0, base_height + 4])\n        rotate([0, 0, 15])\n            cylinder(h=lever_height, r=lever_diameter/2, center=false);\n    \n    // Lever grip\n    color(color_lever)\n    translate([0, 0, base_height + lever_height + 4])\n        rotate([0, 0, 15])\n            difference() {\n                cylinder(h=25, r=lever_diameter, center=false);\n                // Finger grooves\n                for(i = [0:3]) {\n                    translate([0, -lever_diameter + 2 + i*5, 15])\n                        rotate([90, 0, 0])\n                            cylinder(h=20, r=2, center=true);\n                }\n            }\n    \n    // Detents\n    color(color_base)\n    for(angle = [-30:15:30]) {\n        rotate([0, 0, angle])\n            translate([0, 12, base_height + 4])\n                cube([1, 3, 2], center=true);\n    }\n}\n\nmodule display_screen() {\n    // Screen housing\n    color(color_base)\n    translate([base_width/2 - 25, 0, base_height + 15])\n        cube([screen_width + 6, screen_depth + 6, screen_height + 6], center=true);\n    \n    // Screen\n    color(color_screen)\n    translate([base_width/2 - 25, screen_depth/2 + 1, base_height + 15])\n        cube([screen_width, 1, screen_height], center=true);\n    \n    // Screen content\n    color(color_screen_active)\n    translate([base_width/2 - 25, screen_depth/2 + 2, base_height + 15])\n        cube([screen_width - 4, 0.5, screen_height - 4], center=true);\n    \n    // Screen details\n    for(i = [0:2]) {\n        color(color_screen_active)\n        translate([base_width/2 - 35 + i*10, screen_depth/2 + 2.1, base_height + 10 + i*5])\n            cube([2, 0.5, 8], center=true);\n    }\n}\n\nmodule buttons() {\n    // Top buttons\n    for(i = [0:3]) {\n        color(color_buttons)\n        translate([-20 + i*15, base_depth/2 - 8, base_height + 20])\n            difference() {\n                cylinder(h=3, r=5, center=false);\n                translate([0, 0, -0.5])\n                    cylinder(h=4, r=3, center=false);\n            }\n    }\n    \n    // Side buttons\n    for(i = [0:1]) {\n        color(color_buttons)\n        translate([base_width/2 - 8, -15 + i*30, base_height + 8])\n            difference() {\n                cube([6, 10, 4], center=true);\n                translate([0, 0, -0.5])\n                    cube([4, 8, 5], center=true);\n            }\n    }\n}\n\nmodule usb_port() {\n    color(color_base)\n    translate([-base_width/2 + 2, 0, base_height/2])\n        cube([8, 12, 6], center=true);\n    \n    color([0.1, 0.1, 0.1])\n    translate([-base_width/2 + 1, 0, base_height/2])\n        cube([2, 8, 4], center=true);\n}\n\n// Assembly\nbase_plate();\nlever_assembly();\ndisplay_screen();\nbuttons();\nusb_port();\n\n// LED indicators\nfor(i = [0:2]) {\n    color([1, 0, 0])\n    translate([10 + i*8, -base_depth/2 + 5, base_height + 1])\n        cylinder(h=1, r=2, center=false);\n}",
    "renders": true
  },
  {
    "electronic_device": "gun",
    "openscad_code": "// Realistic Electronic Gun Device (Taser-style)\n// Medium complexity with electronic features\n\n// Color definitions\n$fn = 32;\n\n// Main body module\nmodule gun_body() {\n    color(\"DarkSlateGray\")\n    difference() {\n        // Main grip and frame\n        union() {\n            // Handle/grip\n            translate([-8, -5, 0])\n                cube([16, 35, 25]);\n            \n            // Upper frame\n            translate([-10, 25, 10])\n                cube([20, 40, 15]);\n            \n            // Barrel shroud\n            cylinder(h = 45, r1 = 6, r2 = 5);\n        }\n        \n        // Trigger guard hole\n        translate([0, 15, 8])\n            rotate([90, 0, 0])\n                cylinder(h = 20, r = 6);\n        \n        // Magazine well\n        translate([-4, 0, -2])\n            cube([8, 20, 4]);\n    }\n}\n\n// Electronic display module\nmodule display() {\n    color(\"Black\")\n    translate([-7, 35, 20])\n        cube([14, 12, 2]);\n    \n    color(\"Cyan\")\n    translate([-6, 36, 22])\n        cube([12, 10, 0.5]);\n}\n\n// Control buttons module\nmodule control_buttons() {\n    for(i = [0:2]) {\n        color(\"FireBrick\")\n        translate([5 + i*4, 32, 15])\n            cylinder(h = 2, r = 1.5);\n    }\n}\n\n// Safety switch\nmodule safety_switch() {\n    color(\"Red\")\n    translate([-12, 30, 15])\n        rotate([0, 90, 0])\n            cylinder(h = 8, r = 2);\n}\n\n// LED indicators\nmodule led_indicators() {\n    // Power LED\n    color(\"Lime\")\n    translate([0, 40, 26])\n        sphere(r = 1.5);\n    \n    // Status LEDs\n    for(i = [0:1]) {\n        color(i == 0 ? \"Yellow\" : \"Red\")\n        translate([-3 + i*6, 40, 26])\n            sphere(r = 1);\n    }\n}\n\n// Charging port\nmodule charging_port() {\n    color(\"Silver\")\n    translate([0, 5, -2])\n        cube([6, 3, 2]);\n    \n    color(\"Black\")\n    translate([1, 6, -1.5])\n        cube([4, 1, 1]);\n}\n\n// Electrode probes\nmodule electrodes() {\n    for(side = [-1, 1]) {\n        translate([side * 5, 65, 7])\n            cylinder(h = 8, r = 1.5);\n        \n        // Probe tips\n        color(\"Gold\")\n        translate([side * 5, 73, 7])\n            sphere(r = 1);\n    }\n}\n\n// Grip texture pattern\nmodule grip_texture() {\n    color(\"Black\")\n    for(i = [0:6]) {\n        translate([-7, 5 + i*4, 0])\n            cube([14, 2, 25]);\n    }\n}\n\n// Assembly\nunion() {\n    gun_body();\n    display();\n    control_buttons();\n    safety_switch();\n    led_indicators();\n    charging_port();\n    electrodes();\n    grip_texture();\n}",
    "renders": true
  },
  {
    "electronic_device": "rifle",
    "openscad_code": "// Realistic Rifle-Mounted Electronic Device (Medium Complexity)\n// A tactical laser rangefinder module that attaches to rifle rails\n\n// Global settings\n$fn = 32;\n\n// Main colors\ncolor_body = [0.2, 0.2, 0.2];      // Dark gray\ncolor_screen = [0.1, 0.1, 0.1];    // Black\ncolor_buttons = [0.8, 0.8, 0.8];   // Light gray\ncolor_laser = [0.9, 0.1, 0.1];     // Red\ncolor_mount = [0.3, 0.3, 0.3];     // Medium gray\n\n// Main dimensions\ndevice_length = 45;\ndevice_width = 25;\ndevice_height = 20;\n\n// Screen parameters\nscreen_width = 18;\nscreen_height = 12;\nscreen_depth = 1;\n\n// Button parameters\nbutton_size = 3;\nbutton_height = 1.5;\nnum_buttons = 3;\n\n// Rail mount parameters\nrail_width = 20;\nrail_height = 8;\nrail_length = 30;\n\n// Laser emitter parameters\nlaser_diameter = 6;\nlaser_length = 8;\n\n// Main device body\nmodule device_body() {\n    color(color_body)\n    difference() {\n        // Main box\n        translate([-device_length/2, -device_width/2, -device_height/2])\n            cube([device_length, device_width, device_height]);\n        \n        // Screen recess\n        translate([-device_length/2 + 5, -screen_width/2, device_height/2 - screen_depth])\n            cube([screen_depth + 1, screen_width, screen_height]);\n        \n        // Button holes\n        for(i = [0:num_buttons-1]) {\n            translate([device_length/2 - 8, -device_width/2 + 5 + i*7, -device_height/2])\n                cube([button_size, button_size, button_height + 1]);\n        }\n        \n        // USB port\n        translate([device_length/2 - 3, -device_width/2 - 0.5, -5])\n            cube([6, 2, 4]);\n    }\n}\n\n// OLED display screen\nmodule screen() {\n    color(color_screen)\n    translate([-device_length/2 + 4.5, -screen_width/2 + 1, device_height/2 - screen_depth/2])\n        cube([screen_depth, screen_width - 2, screen_height - 2]);\n}\n\n// Control buttons\nmodule buttons() {\n    for(i = [0:num_buttons-1]) {\n        color(color_buttons)\n        translate([device_length/2 - 8 + button_size/2, -device_width/2 + 5 + i*7 + button_size/2, -device_height/2 + button_height/2])\n            cube([button_size - 0.5, button_size - 0.5, button_height], center=true);\n    }\n}\n\n// Laser emitter module\nmodule laser_emitter() {\n    color(color_body)\n    union() {\n        // Emitter housing\n        translate([-device_length/2 - laser_length, -laser_diameter/2, -laser_diameter/2])\n            cylinder(h=laser_length, d=laser_diameter);\n        \n        // Laser aperture\n        color(color_laser)\n        translate([-device_length/2 - laser_length - 0.5, 0, 0])\n            cylinder(h=1, d=laser_diameter/2);\n    }\n}\n\n// Picatinny rail mount\nmodule rail_mount() {\n    color(color_mount)\n    difference() {\n        // Main mount block\n        translate([-rail_length/2, -rail_width/2, -device_height/2 - rail_height])\n            cube([rail_length, rail_width, rail_height]);\n        \n        // Rail slots\n        for(i = [-2:2]) {\n            translate([i*5, -rail_width/2 - 0.5, -device_height/2 - rail_height + 3])\n                cube([3, rail_width + 1, 2]);\n        }\n        \n        // Attachment screw holes\n        translate([-rail_length/2 + 5, 0, -device_height/2 - rail_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=rail_height, d=3);\n        \n        translate([rail_length/2 - 5, 0, -device_height/2 - rail_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=rail_height, d=3);\n    }\n}\n\n// Battery compartment cover\nmodule battery_cover() {\n    color(color_body)\n    difference() {\n        translate([0, device_width/2 - 2, -device_height/2 + 3])\n            cube([device_length - 10, 4, 6]);\n        \n        // Grip texture\n        for(i = [-2:2]) {\n            translate([i*4 - 8, device_width/2 - 1, -device_height/2 + 3.5])\n                cube([2, 0.5, 5]);\n        }\n        \n        // Thumb screw\n        translate([0, device_width/2 + 2, -device_height/2 + 6])\n            cylinder(h=3, d=4, $fn=6);\n    }\n}\n\n// LED indicator lights\nmodule indicators() {\n    // Power LED\n    color([0, 1, 0])\n    translate([device_length/2 - 12, -device_width/2 - 0.5, 3])\n        cylinder(h=1, d=2);\n    \n    // Low battery LED\n    color([1, 0.5, 0])\n    translate([device_length/2 - 12, -device_width/2 - 0.5, 0])\n        cylinder(h=1, d=2);\n}\n\n// Assemble complete device\nunion() {\n    device_body();\n    screen();\n    buttons();\n    laser_emitter();\n    rail_mount();\n    battery_cover();\n    indicators();\n    \n    // Device label/engraving\n    color([0.5, 0.5, 0.5])\n    translate([device_length/2 - 15, 0, device_height/2 - 0.5])\n        linear_extrude(height=0.5)\n            text(\"LRF-2024\", size=3, halign=\"center\");\n}",
    "renders": true
  },
  {
    "electronic_device": "lightgun",
    "openscad_code": "// Lightgun model for 3D printing\n// Electronic features: trigger, IR sensor dome, action buttons, grip texture, magazine-style battery compartment\n\n// Colors\ncolor_main = [0.15, 0.15, 0.15];   // matte black\ncolor_accent = [0.8, 0.8, 0.8];    // silver\ncolor_button = [0.9, 0, 0];        // red\ncolor_detail = [0, 0.2, 0.8];      // blue LED\n\n// Overall scale\nscale_factor = 1.0;\n\nmodule lightgun() {\n    // Main body\n    color(color_main)\n    difference() {\n        union() {\n            // Barrel\n            translate([0, 0, 70])\n                cylinder(h = 80, d1 = 22, d2 = 25, $fn = 32);\n            \n            // Grip\n            translate([-20, -15, -10])\n                cube([40, 30, 80]);\n            \n            // Front housing\n            translate([0, 0, 40])\n                cube([45, 30, 40], center = true);\n            \n            // Rear housing\n            translate([0, 0, 20])\n                cube([35, 25, 50], center = true);\n        }\n        \n        // Cylinder bore\n        translate([0, 0, 110])\n            cylinder(h = 90, d = 12, $fn = 32);\n        \n        // Trigger guard cutout\n        translate([0, -15, 35])\n            cube([25, 10, 25], center = true);\n        \n        // Magazine slot\n        translate([-10, 0, 5])\n            cube([20, 25, 40]);\n    }\n    \n    // Trigger\n    color(color_button)\n    translate([0, -16, 45])\n        rotate([0, 10, 0])\n        cube([6, 8, 20], center = true);\n    \n    // Front IR sensor dome\n    color(color_accent)\n    translate([0, 0, 125])\n        sphere(d = 15, $fn = 32);\n    \n    // Top action buttons\n    for (i = [0:1]) {\n        color(i == 0 ? color_button : color_detail)\n        translate([-12 + i*24, 0, 80])\n            cylinder(h = 3, d = 8, $fn = 16);\n    }\n    \n    // Rear grip serrations\n    color(color_main)\n    for (i = [0:5]) {\n        translate([-18, -12 + i*5, 30])\n            cube([2, 3, 2]);\n    }\n    \n    // Magazine plate (battery cover)\n    color(color_accent)\n    translate([-10, 0, 15])\n        cube([20, 24, 2]);\n    \n    // LED indicator\n    color(color_detail)\n    translate([0, 12, 70])\n        sphere(d = 3);\n    \n    // Side detail lines\n    color(color_accent)\n    for (pos = [[0, 15, 100], [0, -15, 100]]) {\n        translate(pos)\n            cube([40, 1, 1]);\n    }\n    \n    // Grip texture pattern\n    color(color_main)\n    for (x = [-15:5:15]) {\n        for (y = [0:5:35]) {\n            translate([x, 0, 25 + y])\n                cube([3, 1, 2]);\n        }\n    }\n}\n\n// Render the model\nscale([scale_factor, scale_factor, scale_factor])\n    lightgun();",
    "renders": true
  },
  {
    "electronic_device": "glove",
    "openscad_code": "// Smart Glove Wearable Controller\n// Realistic style, medium complexity\n\n// Overall dimensions\nglove_length = 80;\nglove_width = 40;\nglove_height = 15;\nwall_thickness = 2;\n\n// Main glove body\nmodule glove_body() {\n    difference() {\n        // Outer shell\n        color(\"dimgray\")\n        hull() {\n            translate([0, 0, 0])\n                cube([glove_length, glove_width, glove_height], center=true);\n            translate([glove_length/4, 0, 0])\n                cube([glove_length/2, glove_width*1.2, glove_height*1.1], center=true);\n        }\n        \n        // Inner cavity for hand\n        color(\"lightgray\")\n        translate([0, 0, -wall_thickness/2])\n            cube([glove_length-wall_thickness*2, glove_width-wall_thickness*2, glove_height-wall_thickness], center=true);\n    }\n}\n\n// Finger sections with sensors\nmodule finger_sensor(y_pos, length) {\n    color(\"darkgray\")\n    translate([glove_length/2 - length/2, y_pos, glove_height/2])\n        cube([length, 8, 3], center=true);\n    \n    // Flex sensor housing\n    color(\"black\")\n    translate([glove_length/2 - length/2, y_pos, glove_height/2 + 2])\n        cube([length*0.8, 6, 1], center=true);\n}\n\n// Main control unit\nmodule control_unit() {\n    color(\"darkblue\")\n    translate([-glove_length/2 + 15, 0, glove_height/2 + 5]) {\n        // Main housing\n        cube([30, 25, 8], center=true);\n        \n        // OLED display\n        color(\"black\")\n        translate([5, 0, 4.1])\n            cube([15, 18, 0.5], center=true);\n        \n        // Display screen\n        color(\"deepskyblue\")\n        translate([5, 0, 4.6])\n            cube([13, 16, 0.2], center=true);\n    }\n}\n\n// Navigation buttons\nmodule navigation_buttons() {\n    // Up button\n    color(\"lightgray\")\n    translate([-glove_length/2 + 10, 10, glove_height/2 + 10])\n        cylinder(h=2, r=3, $fn=16);\n    \n    // Down button\n    color(\"lightgray\")\n    translate([-glove_length/2 + 10, -10, glove_height/2 + 10])\n        cylinder(h=2, r=3, $fn=16);\n    \n    // Select button\n    color(\"red\")\n    translate([-glove_length/2 + 10, 0, glove_height/2 + 10])\n        cylinder(h=2, r=3.5, $fn=16);\n}\n\n// Haptic feedback motors\nmodule haptic_motor(x_pos, y_pos) {\n    color(\"darkgreen\")\n    translate([x_pos, y_pos, glove_height/2 + 1])\n        cylinder(h=2, r=4, $fn=12);\n}\n\n// Charging port\nmodule charging_port() {\n    color(\"silver\")\n    translate([0, glove_width/2 + 3, 0])\n        cube([12, 6, 4], center=true);\n    \n    // USB-C port\n    color(\"black\")\n    translate([0, glove_width/2 + 6, 0])\n        cube([8, 2, 2], center=true);\n}\n\n// Status LEDs\nmodule status_led(x_pos) {\n    color(\"yellow\")\n    translate([x_pos, glove_width/2 - 5, glove_height/2 + 2])\n        cylinder(h=1, r=1.5, $fn=8);\n}\n\n// Wrist strap mounts\nmodule strap_mount() {\n    color(\"dimgray\")\n    translate([-glove_length/2 - 2, 0, 0])\n        cube([4, 10, 6], center=true);\n    \n    translate([-glove_length/2 - 2, 0, 0])\n        cylinder(h=10, r=2, center=true, $fn=16);\n}\n\n// Assembly\nglove_body();\n\n// Finger sensors\nfor (i = [-1.5:1:1.5]) {\n    finger_sensor(i * 8, 20 - abs(i) * 3);\n}\n\n// Main electronics\ncontrol_unit();\nnavigation_buttons();\n\n// Haptic motors\nhaptic_motor(glove_length/4, 8);\nhaptic_motor(glove_length/4, -8);\n\n// Charging port\ncharging_port();\n\n// Status LEDs\nstatus_led(-glove_length/4);\nstatus_led(glove_length/4);\n\n// Strap mounts\nstrap_mount();\nmirror([1, 0, 0]) strap_mount();",
    "renders": true
  },
  {
    "electronic_device": "visor",
    "openscad_code": "// OpenSCAD code for a realistic visor-style electronic device\n// Dimensions in mm, suitable for 3D printing\n\n// Main parameters\nvisor_width = 140;\nvisor_height = 45;\nvisor_depth = 20;\nwall_thickness = 2.5;\n\n// Main visor body\nmodule visor_body() {\n    difference() {\n        // Outer shell\n        color(\"DarkSlateGray\") \n        rounded_cube([visor_width, visor_depth, visor_height], 5);\n        \n        // Inner cavity for head\n        translate([0, 5, -5])\n        scale([0.85, 0.7, 0.85])\n        rounded_cube([visor_width, visor_depth, visor_height], 5);\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(size, radius) {\n    hull() {\n        for (x = [0, size[0]])\n        for (y = [0, size[1]])\n        for (z = [0, size[2]]) {\n            translate([x, y, z])\n            sphere(r = radius);\n        }\n    }\n}\n\n// Display screen\nmodule display() {\n    translate([0, visor_depth/2 + 0.5, 5])\n    color(\"Black\") \n    cube([60, 1, 20], center = true);\n    \n    // Screen surface\n    translate([0, visor_depth/2 + 1, 5])\n    color(\"LightBlue\") \n    cube([58, 0.5, 18], center = true);\n}\n\n// Control buttons\nmodule control_buttons() {\n    // Power button\n    translate([50, visor_depth/2 + 1, 10])\n    color(\"Red\") \n    cylinder(h = 3, r = 4);\n    \n    // Mode button\n    translate([50, visor_depth/2 + 1, 0])\n    color(\"Green\") \n    cylinder(h = 2, r = 3);\n    \n    // Volume buttons\n    for (i = [-1, 1]) {\n        translate([-50, visor_depth/2 + 1, i * 8])\n        color(\"Gray\") \n        cylinder(h = 2, r = 2.5);\n    }\n}\n\n// USB-C charging port\nmodule charging_port() {\n    translate([0, -visor_depth/2 - 0.5, -10])\n    color(\"Black\") \n    cube([12, 5, 3]);\n    \n    // Port opening\n    translate([0, -visor_depth/2 - 1, -10])\n    color(\"DarkGray\") \n    cube([10, 3, 2]);\n}\n\n// Adjustable strap mounts\nmodule strap_mounts() {\n    // Left mount\n    translate([-visor_width/2 - 5, 0, 0])\n    union() {\n        color(\"Black\") \n        cube([10, 8, 8]);\n        \n        // Mounting hole\n        translate([-visor_width/2 - 2.5, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 8, r = 2);\n    }\n    \n    // Right mount (mirrored)\n    mirror([1, 0, 0])\n    translate([-visor_width/2 - 5, 0, 0])\n    union() {\n        color(\"Black\") \n        cube([10, 8, 8]);\n        \n        translate([-visor_width/2 - 2.5, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 8, r = 2);\n    }\n}\n\n// LED indicators\nmodule led_indicators() {\n    for (i = [-1, 0, 1]) {\n        translate([i * 15, visor_depth/2 + 1, -15])\n        color(\"Yellow\") \n        sphere(r = 1.5);\n    }\n}\n\n// Camera module\nmodule camera_module() {\n    translate([0, visor_depth/2 - 3, 15])\n    difference() {\n        color(\"Black\") \n        cylinder(h = 5, r = 8);\n        \n        // Lens opening\n        translate([0, 0, -1])\n        cylinder(h = 7, r = 6);\n        \n        translate([0, 0, 2])\n        color(\"DarkBlue\") \n        cylinder(h = 1, r = 5.5);\n    }\n}\n\n// Ventilation holes\nmodule ventilation() {\n    for (i = [-20:20:20]) {\n        translate([i, 0, -visor_height/2 - 1])\n        rotate([90, 0, 0])\n        cylinder(h = wall_thickness * 2, r = 2);\n    }\n}\n\n// Assembly\nunion() {\n    visor_body();\n    display();\n    control_buttons();\n    charging_port();\n    strap_mounts();\n    led_indicators();\n    camera_module();\n    ventilation();\n}",
    "renders": true
  },
  {
    "electronic_device": "goggles",
    "openscad_code": "// Electronic Goggles with Display Module\n// Realistic style, medium complexity\n\n// Overall dimensions\ngoggles_width = 80;\ngoggles_height = 40;\nstrap_width = 15;\nlens_diameter = 30;\nlens_depth = 12;\n\n// Colors\ndark_gray = [0.2, 0.2, 0.2];\nlight_gray = [0.7, 0.7, 0.7];\nblack = [0.1, 0.1, 0.1];\nblue = [0.2, 0.4, 0.8];\nred = [0.8, 0.2, 0.2];\n\n// Main frame\nmodule goggles_frame() {\n    color(dark_gray) {\n        difference() {\n            // Main frame body\n            cube([goggles_width, 25, goggles_height], center=true);\n            \n            // Eye cutouts\n            translate([-goggles_width/4, 0, 0])\n                cylinder(h=30, r=lens_diameter/2 + 3, center=true);\n            translate([goggles_width/4, 0, 0])\n                cylinder(h=30, r=lens_diameter/2 + 3, center=true);\n            \n            // Nose bridge clearance\n            translate([0, 8, -5])\n                cube([20, 15, 10], center=true);\n        }\n    }\n}\n\n// Individual lens assembly\nmodule lens_assembly(x_pos) {\n    translate([x_pos, 0, 0]) {\n        // Lens housing\n        color(black) {\n            difference() {\n                cylinder(h=lens_depth, r=lens_diameter/2 + 2);\n                translate([0, 0, -1])\n                    cylinder(h=lens_depth + 2, r=lens_diameter/2);\n            }\n        }\n        \n        // Actual lens\n        color(light_gray) {\n            translate([0, 0, 1])\n                cylinder(h=2, r=lens_diameter/2);\n        }\n        \n        // Display screen inside\n        color(blue) {\n            translate([0, 0, lens_depth - 3])\n                cube([20, 15, 0.5], center=true);\n        }\n    }\n}\n\n// Electronic components on top\nmodule electronics_module() {\n    translate([0, -15, goggles_height/2 + 5]) {\n        // Main electronics housing\n        color(black) {\n            cube([60, 12, 8], center=true);\n        }\n        \n        // Buttons\n        for(i = [-1:1]) {\n            translate([i * 15, 0, 4.5])\n                color(red) {\n                    cylinder(h=1, r=3);\n                }\n        }\n        \n        // LED indicators\n        for(i = [-2:2]) {\n            translate([i * 8, 6, 4.5])\n                color([0, 1, 0]) {\n                    sphere(r=1.5);\n                }\n        }\n        \n        // USB-C port\n        translate([25, 0, -2])\n            color(black) {\n                cube([8, 10, 3], center=true);\n            }\n    }\n}\n\n// Adjustable strap mounts\nmodule strap_mount(x_pos) {\n    translate([x_pos, goggles_width/4, 0]) {\n        color(dark_gray) {\n            difference() {\n                // Mount base\n                cube([10, 8, 15], center=true);\n                \n                // Strap hole\n                rotate([0, 90, 0])\n                    cylinder(h=12, r=strap_width/2, center=true);\n            }\n        }\n    }\n}\n\n// Ventilation slots\nmodule ventilation() {\n    color(dark_gray) {\n        for(i = [-3:3]) {\n            translate([i * 10, 15, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=20, r=2);\n        }\n    }\n}\n\n// Assemble the goggles\ngoggles_frame();\nlens_assembly(-goggles_width/4);\nlens_assembly(goggles_width/4);\nelectronics_module();\nstrap_mount(-goggles_width/2 - 5);\nstrap_mount(goggles_width/2 + 5);\nventilation();",
    "renders": true
  },
  {
    "electronic_device": "hmd",
    "openscad_code": "// HMD (Head-Mounted Display) - Realistic Medium Complexity\n// Dimensions approximately 150mm x 60mm x 80mm\n\n// Main colors\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_body = [0.2, 0.2, 0.2];\ncolor_strap = [0.1, 0.1, 0.1];\ncolor_lens = [0.3, 0.3, 0.4, 0.7];\n\n// Main body module\nmodule main_body() {\n    difference() {\n        // Front housing\n        color(color_body)\n        translate([0, 0, 0])\n        cube([120, 50, 40], center=true);\n        \n        // Front face chamfers\n        translate([0, 25, 0])\n        cube([130, 10, 50], center=true);\n        translate([0, -25, 0])\n        cube([130, 10, 50], center=true);\n    }\n    \n    // Side details\n    for(side = [-1, 1]) {\n        translate([side * 65, 0, 0])\n        color(color_body)\n        cube([10, 45, 35], center=true);\n    }\n}\n\n// Display modules\nmodule displays() {\n    for(side = [-1, 1]) {\n        // Outer lens frame\n        translate([side * 35, 0, 10])\n        color(color_body)\n        cylinder(h=5, r1=20, r2=20, center=true);\n        \n        // Lens\n        translate([side * 35, 0, 12])\n        color(color_lens)\n        cylinder(h=1, r1=18, r2=18, center=true);\n        \n        // Display screen\n        translate([side * 35, 0, 7])\n        color(color_screen)\n        cube([32, 22, 0.5], center=true);\n    }\n}\n\n// Ventilation slots\nmodule vents() {\n    for(i = [1:4]) {\n        translate([0, 0, 20 - i * 8])\n        difference() {\n            cube([110, 50, 2], center=true);\n            for(j = [-2:2]) {\n                translate([j * 20, 0, 0])\n                cube([8, 60, 3], center=true);\n            }\n        }\n    }\n}\n\n// Adjustment dial\nmodule adjustment_dial() {\n    translate([0, 30, 0])\n    rotate([90, 0, 0])\n    difference() {\n        color(color_body)\n        cylinder(h=8, r1=12, r2=12, center=true);\n        \n        // Grip ridges\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5])\n            translate([9, 0, 0])\n            cube([3, 2, 8], center=true);\n        }\n    }\n}\n\n// Head straps\nmodule head_straps() {\n    // Top strap\n    color(color_strap)\n    translate([0, 0, -40])\n    cube([20, 8, 80], center=true);\n    \n    // Back strap adjustment\n    translate([0, -35, -20])\n    rotate([90, 0, 0])\n    color(color_body)\n    cylinder(h=30, r1=15, r2=15, center=true);\n    \n    // Side straps\n    for(side = [-1, 1]) {\n        translate([side * 70, 0, -20])\n        color(color_strap)\n        rotate([0, 0, side * -30])\n        cube([8, 50, 6], center=true);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    translate([65, 0, -15])\n    color([0.1, 0.1, 0.1])\n    cube([8, 12, 4], center=true);\n    \n    // Port opening\n    translate([69, 0, -15])\n    color([0.05, 0.05, 0.05])\n    cube([2, 8, 2], center=true);\n}\n\n// Power button\nmodule power_button() {\n    translate([-65, 15, -10])\n    color([0.8, 0.1, 0.1])\n    cylinder(h=3, r1=5, r2=5, center=true);\n    \n    // Button surround\n    translate([-65, 15, -10])\n    color(color_body)\n    cylinder(h=2, r1=7, r2=7, center=true);\n}\n\n// LED indicator\nmodule led_indicator() {\n    translate([-65, -15, -10])\n    color([0, 1, 0])\n    sphere(r=2);\n}\n\n// Face padding\nmodule face_padding() {\n    color([0.2, 0.2, 0.2])\n    translate([0, 0, -20])\n    difference() {\n        cube([110, 45, 10], center=true);\n        for(side = [-1, 1]) {\n            translate([side * 35, 0, 0])\n            cylinder(h=15, r1=25, r2=25, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    displays();\n    vents();\n    adjustment_dial();\n    head_straps();\n    usb_port();\n    power_button();\n    led_indicator();\n    face_padding();\n}",
    "renders": true
  },
  {
    "electronic_device": "haptic",
    "openscad_code": "// Haptic Electronic Device - Medium Complexity Realistic Style\n// 3D Printable Haptic Feedback Controller\n\n$fn = 32;\n\n// Main dimensions\nbase_width = 65;\nbase_height = 25;\nbase_depth = 45;\ngrip_radius = 12;\nscreen_width = 35;\nscreen_height = 20;\nbutton_diameter = 8;\nmotor_housing_radius = 15;\n\n// Colors\ncolor_body = [0.15, 0.15, 0.15];  // Dark gray\ncolor_screen = [0.1, 0.1, 0.1];   // Black\ncolor_accent = [0.8, 0.2, 0.2];   // Red accent\ncolor_metal = [0.7, 0.7, 0.7];    // Silver metal\ncolor_buttons = [0.2, 0.2, 0.2];  // Dark buttons\n\n// Main body assembly\nmodule haptic_device() {\n    union() {\n        // Main body shell\n        color(color_body)\n        difference() {\n            // Outer shell\n            rounded_box(base_width, base_height, base_depth, 3);\n            \n            // Hollow interior\n            translate([0, -1, 0])\n            rounded_box(base_width - 4, base_height - 2, base_depth - 4, 2);\n        }\n        \n        // Left grip\n        translate([-base_width/2 + 5, 0, base_depth/2 - 10])\n        rotate([90, 0, 0])\n        grip();\n        \n        // Right grip\n        translate([base_width/2 - 5, 0, base_depth/2 - 10])\n        rotate([90, 0, 0])\n        grip();\n        \n        // Screen assembly\n        translate([0, base_height/2 - 2, 0])\n        screen_assembly();\n        \n        // Button cluster\n        translate([0, -base_height/2 + 5, base_depth/2 - 8])\n        button_cluster();\n        \n        // Haptic motor housings\n        translate([-base_width/2 + 10, 0, -base_depth/2 + 10])\n        motor_housing();\n        \n        translate([base_width/2 - 10, 0, -base_depth/2 + 10])\n        motor_housing();\n        \n        // USB-C port\n        translate([0, -base_height/2, -base_depth/2 + 3])\n        usb_port();\n        \n        // Status LEDs\n        translate([-15, -base_height/2 - 0.1, 10])\n        led_indicator();\n        \n        translate([15, -base_height/2 - 0.1, 10])\n        led_indicator();\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(w, h, d, r) {\n    hull() {\n        for(x = [-1, 1])\n        for(y = [-1, 1])\n        for(z = [-1, 1])\n        translate([x*(w/2-r), y*(h/2-r), z*(d/2-r)])\n        sphere(r=r);\n    }\n}\n\n// Grip module\nmodule grip() {\n    color(color_body)\n    difference() {\n        cylinder(h = 25, r1 = grip_radius, r2 = grip_radius * 0.9);\n        cylinder(h = 26, r1 = grip_radius - 3, r2 = grip_radius * 0.9 - 3);\n    }\n    \n    // Grip texture rings\n    for(i = [5:5:20]) {\n        translate([0, 0, i])\n        color([0.1, 0.1, 0.1])\n        cylinder(h = 1, r = grip_radius + 0.5);\n    }\n}\n\n// Screen assembly\nmodule screen_assembly() {\n    // Screen bezel\n    color(color_body)\n    translate([0, 0, -2])\n    cube([screen_width + 4, 3, screen_height + 4], center = true);\n    \n    // Screen\n    color(color_screen)\n    translate([0, 1, 0])\n    cube([screen_width, 0.5, screen_height], center = true);\n    \n    // Screen protector\n    color([0.9, 0.9, 0.9, 0.3])\n    translate([0, 2, 0])\n    cube([screen_width + 2, 0.2, screen_height + 2], center = true);\n}\n\n// Button cluster\nmodule button_cluster() {\n    // Button grid 2x2\n    for(i = [0, 1])\n    for(j = [0, 1]) {\n        x = (i - 0.5) * 12;\n        z = (j - 0.5) * 12;\n        \n        // Button base\n        color(color_body)\n        translate([x, -1, z])\n        cylinder(h = 2, r = button_diameter/2 + 1);\n        \n        // Actual button\n        color(color_buttons)\n        translate([x, 0, z])\n        cylinder(h = 1.5, r = button_diameter/2);\n        \n        // Button symbol\n        color([0.9, 0.9, 0.9])\n        translate([x, 1.6, z])\n        sphere(r = 0.5);\n    }\n}\n\n// Haptic motor housing\nmodule motor_housing() {\n    color(color_metal)\n    difference() {\n        cylinder(h = 8, r = motor_housing_radius);\n        translate([0, -1, 0])\n        cylinder(h = 10, r = motor_housing_radius - 2);\n    }\n    \n    // Motor symbol\n    color(color_accent)\n    translate([0, 4, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 0.5, r = 8);\n}\n\n// USB-C port\nmodule usb_port() {\n    color(color_metal)\n    difference() {\n        translate([0, -1, 0])\n        cube([8, 2, 4], center = true);\n        translate([0, -2, 0])\n        cube([6, 2, 2.5], center = true);\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    color([0.1, 0.1, 0.1])\n    cylinder(h = 0.5, r = 2);\n    translate([0, 0.6, 0])\n    color([0, 1, 0, 0.8])\n    sphere(r = 1.5);\n}\n\n// Render the complete device\nhaptic_device();",
    "renders": true
  },
  {
    "electronic_device": "vest",
    "openscad_code": "// Wearable Vest Electronic Health Monitor\n// Realistic medium-complexity OpenSCAD model\n// Approx 65 mm tall, 70 mm wide, 15 mm thick\n\n$fn = 32;\n\n// Main colors\ncolor_body = \"RoyalBlue\";\ncolor_screen = \"black\";\ncolor_bezel = \"silver\";\ncolor_button = \"dimgray\";\ncolor_port = \"darkgray\";\ncolor_strap = \"navy\";\ncolor_led = \"red\";\n\n// Overall scale factor for easy resizing\nscale_factor = 1;\n\nmodule vest_body() {\n    difference() {\n        // Main vest shape\n        scale([scale_factor, scale_factor, scale_factor])\n        color(color_body)\n        union() {\n            // Front panel\n            translate([0, 0, 2])\n            cube([60, 65, 4], center=true);\n            \n            // Curved shoulders\n            translate([0, 27.5, 5])\n            cylinder(h=6, r=15, center=true);\n            translate([0, -27.5, 5])\n            cylinder(h=6, r=15, center=true);\n            \n            // Side panels\n            translate([32.5, 0, 2])\n            cube([5, 40, 4], center=true);\n            translate([-32.5, 0, 2])\n            cube([5, 40, 4], center=true);\n        }\n        \n        // Arm holes\n        translate([20, 20, 2])\n        rotate([0, 0, 30])\n        cylinder(h=10, r=8, center=true);\n        translate([-20, 20, 2])\n        rotate([0, 0, -30])\n        cylinder(h=10, r=8, center=true);\n        \n        // Neck hole\n        translate([0, 25, 2])\n        cylinder(h=10, r=10, center=true);\n    }\n}\n\nmodule screen_assembly() {\n    // Screen bezel\n    color(color_bezel)\n    translate([0, 0, 6.5])\n    cube([28, 38, 2], center=true);\n    \n    // Actual screen\n    color(color_screen)\n    translate([0, 0, 7.5])\n    cube([24, 34, 0.5], center=true);\n    \n    // Screen details\n    color(\"white\")\n    translate([0, 5, 8])\n    cube([20, 1, 0.2], center=true);\n    translate([0, 0, 8])\n    cube([20, 1, 0.2], center=true);\n    translate([0, -5, 8])\n    cube([20, 1, 0.2], center=true);\n}\n\nmodule buttons() {\n    // Side buttons\n    for(i = [0:2]) {\n        translate([31, -15 + i*8, 2])\n        color(color_button)\n        cylinder(h=3, r=2.5, center=true);\n    }\n    \n    // Front buttons below screen\n    for(i = [0:1]) {\n        translate([-15 + i*10, -22, 6])\n        color(color_button)\n        cylinder(h=2, r=3, center=true);\n    }\n}\n\nmodule ports() {\n    // Micro USB port\n    color(color_port)\n    translate([30, 5, 2])\n    cube([3, 7, 1.5], center=true);\n    \n    // Heart rate sensor window\n    color(\"darkred\")\n    translate([0, 0, 0.5])\n    cube([20, 20, 1], center=true);\n}\n\nmodule straps() {\n    // Left strap\n    color(color_strap)\n    translate([-45, 0, 2])\n    cube([25, 8, 2], center=true);\n    \n    // Right strap\n    translate([45, 0, 2])\n    cube([25, 8, 2], center=true);\n    \n    // Buckle holes on straps\n    for(i = [0:3]) {\n        color(\"black\")\n        translate([-45, 0, 1.5])\n        translate([0, -2 + i*1.5, 0])\n        cube([2, 1, 2], center=true);\n    }\n}\n\nmodule status_leds() {\n    // Charging LED\n    color(color_led)\n    translate([25, 15, 7])\n    sphere(r=1.5);\n    \n    // Power LED\n    color(\"lime\")\n    translate([-25, 15, 7])\n    sphere(r=1.5);\n}\n\nmodule logo() {\n    // Company logo (simplified)\n    color(\"white\")\n    translate([0, 15, 7.6])\n    cube([10, 6, 0.2], center=true);\n    \n    color(\"red\")\n    translate([0, 15, 7.7])\n    cube([8, 1, 0.1], center=true);\n    translate([0, 15, 7.5])\n    cube([8, 1, 0.1], center=true);\n}\n\n// Main assembly\nunion() {\n    vest_body();\n    screen_assembly();\n    buttons();\n    ports();\n    straps();\n    status_leds();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "suit",
    "openscad_code": "// Suit Electronic Device - Smart Watch with Realistic Features\n// Medium complexity realistic style smart watch\n\n// Constants\nwatch_width = 38;\nwatch_height = 44;\nwatch_thickness = 12;\nstrap_width = 22;\nstrap_thickness = 3;\nscreen_border = 2;\nbutton_diameter = 4;\nbutton_length = 8;\nwall_thickness = 1.5;\n\n// Main body\nmodule watch_body() {\n    color([0.1, 0.1, 0.1]) difference() {\n        // Main case\n        translate([0, 0, watch_thickness/2]) {\n            cube([watch_width, watch_height, watch_thickness], center=true);\n        }\n        \n        // Top chamfer\n        translate([0, 0, watch_thickness - 0.5]) {\n            cube([watch_width + 2, watch_height + 2, 1], center=true);\n        }\n        \n        // Screen cutout\n        translate([0, 0, watch_thickness/2 + 0.1]) {\n            cube([watch_width - screen_border*2, watch_height - screen_border*2, watch_thickness], center=true);\n        }\n    }\n}\n\n// Screen\nmodule screen() {\n    color([0, 0, 0]) translate([0, 0, watch_thickness/2 + 0.2]) {\n        cube([watch_width - screen_border*2 - 2, watch_height - screen_border*2 - 6, 0.5], center=true);\n    }\n    \n    // Screen content - simple clock face\n    color([0.2, 0.8, 0.2]) translate([0, 0, watch_thickness/2 + 0.5]) {\n        cube([watch_width - screen_border*2 - 4, watch_height - screen_border*2 - 8, 0.1], center=true);\n    }\n}\n\n// Crown button\nmodule crown_button() {\n    color([0.3, 0.3, 0.3]) translate([watch_width/2 + button_length/2, 0, watch_thickness/2]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=button_length, d=button_diameter, center=true);\n            translate([0, 0, button_length/2]) {\n                sphere(d=button_diameter);\n            }\n        }\n    }\n}\n\n// Side button\nmodule side_button() {\n    color([0.3, 0.3, 0.3]) translate([watch_width/2 + button_length/2, watch_height/4, watch_thickness/2]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=button_length, d=button_diameter*0.8, center=true);\n        }\n    }\n}\n\n// Strap lug\nmodule strap_lug(y_pos) {\n    translate([0, y_pos, 0]) {\n        difference() {\n            color([0.15, 0.15, 0.15]) {\n                cube([watch_width, 4, watch_thickness - 2], center=true);\n            }\n            // Pin hole\n            translate([0, 0, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=watch_width + 2, d=2, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Strap segment\nmodule strap_segment(length, y_offset) {\n    color([0.2, 0.2, 0.2]) {\n        for(i = [0 : 5 : length - 5]) {\n            translate([0, y_offset + i*sign(y_offset), 0]) {\n                cube([strap_width, 5 * sign(y_offset), strap_thickness], center=true);\n            }\n        }\n        \n        // Strap holes\n        for(i = [10 : 10 : length - 10]) {\n            translate([0, y_offset + i*sign(y_offset), 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=strap_thickness + 1, d=2, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Heart rate sensor\nmodule heart_rate_sensor() {\n    color([0.05, 0.05, 0.05]) {\n        translate([0, 0, -watch_thickness/2 - 0.5]) {\n            cylinder(h=1, d=10, center=true);\n            // Sensor windows\n            for(i = [-1 : 1]) {\n                translate([i*3, 0, 0]) {\n                    cylinder(h=1.1, d=2, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Speaker grill\nmodule speaker_grill() {\n    color([0.1, 0.1, 0.1]) {\n        translate([0, -watch_height/2 - 1, watch_thickness/2 - 2]) {\n            cube([watch_width - 10, 2, 1], center=true);\n            // Grill holes\n            for(i = [-6 : 2 : 6]) {\n                translate([i, 0, 0]) {\n                    cylinder(h=2, d=0.5, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    watch_body();\n    screen();\n    crown_button();\n    side_button();\n    strap_lug(watch_height/2 + 2);\n    strap_lug(-watch_height/2 - 2);\n    strap_segment(40, watch_height/2 + 22);\n    strap_segment(30, -watch_height/2 - 17);\n    heart_rate_sensor();\n    speaker_grill();\n}",
    "renders": true
  },
  {
    "electronic_device": "treadmill",
    "openscad_code": "// Treadmill Electronic Console\n// Dimensions in mm, scaled for 3D printing\n\n// Overall scale factor for 3D printing\nscale_factor = 0.25;\n\n// Main console dimensions\nconsole_w = 220 * scale_factor;\nconsole_h = 120 * scale_factor;\nconsole_d = 80 * scale_factor;\n\n// Screen dimensions\nscreen_w = 160 * scale_factor;\nscreen_h = 80 * scale_factor;\nscreen_d = 5 * scale_factor;\n\n// Button parameters\nbutton_rows = 4;\nbutton_cols = 5;\nbutton_spacing = 18 * scale_factor;\nbutton_size = 12 * scale_factor;\nbutton_depth = 3 * scale_factor;\n\n// USB port\nusb_w = 12 * scale_factor;\nusb_h = 5 * scale_factor;\nusb_d = 8 * scale_factor;\n\n// Heart rate sensors\nsensor_d = 20 * scale_factor;\nsensor_h = 8 * scale_factor;\n\n// Main console body\nmodule console_body() {\n    difference() {\n        // Main housing\n        color([0.2, 0.2, 0.2])\n        cube([console_w, console_d, console_h], center=true);\n        \n        // Screen cutout\n        translate([0, console_d/2 - 1, console_h/4])\n        color([0, 0, 0])\n        cube([screen_w + 10, screen_d + 2, screen_h + 10], center=true);\n        \n        // USB port\n        translate([-console_w/2 + 10, console_d/2, 0])\n        rotate([0, 90, 0])\n        cube([usb_w, usb_d, usb_h], center=true);\n    }\n}\n\n// LCD screen\nmodule lcd_screen() {\n    translate([0, console_d/2 - screen_d/2 - 1, console_h/4])\n    color([0.1, 0.1, 0.1])\n    cube([screen_w, screen_d, screen_h], center=true);\n    \n    // Screen display area\n    translate([0, console_d/2 - screen_d/2, console_h/4])\n    color([0.2, 0.3, 0.5])\n    cube([screen_w - 10, 0.5, screen_h - 10], center=true);\n}\n\n// Button grid\nmodule buttons() {\n    for (i = [0:button_rows-1]) {\n        for (j = [0:button_cols-1]) {\n            translate([\n                -console_w/2 + 30 + j * button_spacing,\n                console_d/2 - 15,\n                -console_h/3 + i * button_spacing\n            ])\n            color([0.8, 0.8, 0.8])\n            cylinder(h=button_depth, r=button_size/2, center=false);\n        }\n    }\n}\n\n// Emergency stop button (larger red button)\nmodule emergency_stop() {\n    translate([0, console_d/2 - 10, -console_h/2 + 15])\n    color([0.8, 0.1, 0.1])\n    cylinder(h=8 * scale_factor, r=15 * scale_factor, center=false);\n    \n    translate([0, console_d/2 - 10, -console_h/2 + 15])\n    color([1, 1, 1])\n    text(\"STOP\", size=8 * scale_factor, h=1 * scale_factor, center=true);\n}\n\n// Heart rate sensors\nmodule heart_rate_sensors() {\n    // Left sensor\n    translate([-console_w/2 + 15, console_d/2 - 10, -console_h/4])\n    color([0.3, 0.3, 0.3])\n    cylinder(h=sensor_h, r=sensor_d/2, center=false);\n    \n    // Right sensor\n    translate([console_w/2 - 15, console_d/2 - 10, -console_h/4])\n    color([0.3, 0.3, 0.3])\n    cylinder(h=sensor_h, r=sensor_d/2, center=false);\n}\n\n// LED indicators\nmodule indicators() {\n    positions = [[-console_w/4, 0], [console_w/4, 0], [0, 0]];\n    colors = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];\n    \n    for (i = [0:2]) {\n        translate([positions[i][0], console_d/2 - 2, console_h/2 - 10])\n        color(colors[i])\n        cylinder(h=2, r=3, center=false);\n    }\n}\n\n// Speed/incline adjustment bars\nmodule adjustment_bars() {\n    // Left bar (speed)\n    translate([-console_w/2 - 5, 0, 0])\n    rotate([0, 90, 0])\n    color([0.15, 0.15, 0.15])\n    cube([console_h, 8 * scale_factor, 10 * scale_factor], center=true);\n    \n    // Right bar (incline)\n    translate([console_w/2 + 5, 0, 0])\n    rotate([0, 90, 0])\n    color([0.15, 0.15, 0.15])\n    cube([console_h, 8 * scale_factor, 10 * scale_factor], center=true);\n}\n\n// Assembly\nunion() {\n    console_body();\n    lcd_screen();\n    buttons();\n    emergency_stop();\n    heart_rate_sensors();\n    indicators();\n    adjustment_bars();\n}",
    "renders": true
  },
  {
    "electronic_device": "omni",
    "openscad_code": "// Omni Electronic Device - Medium Complexity Realistic Style\n// A handheld omnidirectional antenna scanner device with display and controls\n\n// Overall dimensions\ndevice_length = 85;\ndevice_width = 55;\ndevice_height = 18;\n\n// Main body module\nmodule omni_device() {\n    // Main body shell\n    difference() {\n        // Outer shell with rounded edges\n        color([0.2, 0.2, 0.2])\n        minkowski() {\n            cube([device_length, device_width, device_height], center=true);\n            sphere(r=3);\n        }\n        \n        // Hollow interior\n        color([0.15, 0.15, 0.15])\n        minkowski() {\n            cube([device_length-4, device_width-4, device_height-2], center=true);\n            sphere(r=2);\n        }\n    }\n    \n    // Top surface details\n    translate([0, 0, device_height/2 - 0.5]) {\n        // LCD screen\n        color([0.1, 0.1, 0.1])\n        cube([device_length-20, device_width-20, 1], center=true);\n        \n        // Screen glass\n        translate([0, 0, 0.5])\n        color([0.9, 0.9, 0.9, 0.7])\n        cube([device_length-22, device_width-22, 0.5], center=true);\n    }\n    \n    // Control buttons\n    translate([-device_length/4, device_width/3, device_height/2]) {\n        for(i=[0:2]) {\n            translate([i*15, 0, 0])\n            color([0.3, 0.3, 0.3])\n            cylinder(h=2, r=3, $fn=16);\n        }\n    }\n    \n    // Directional pad\n    translate([device_length/4, device_width/4, device_height/2])\n    color([0.4, 0.4, 0.4])\n    union() {\n        // Center button\n        cylinder(h=2, r=5, $fn=32);\n        \n        // Directional buttons\n        for(angle=[0,90,180,270]) {\n            rotate([0, 0, angle])\n            translate([0, 8, 0])\n            cylinder(h=2, r=3, $fn=16);\n        }\n    }\n    \n    // Antenna array (omni-directional)\n    translate([0, 0, device_height/2 + 2])\n    color([0.8, 0.8, 0.8])\n    for(i=[0:11]) {\n        rotate([0, 0, i*30])\n        translate([device_length/2 - 5, 0, 0])\n        cylinder(h=8, r=1, $fn=8);\n    }\n    \n    // Status LEDs\n    translate([-device_length/2 + 8, 0, device_height/2])\n    color([0, 1, 0])\n    sphere(r=1.5);\n    \n    translate([-device_length/2 + 11, 0, device_height/2])\n    color([1, 0, 0])\n    sphere(r=1.5);\n    \n    translate([-device_length/2 + 14, 0, device_height/2])\n    color([0, 0, 1])\n    sphere(r=1.5);\n    \n    // USB-C port\n    translate([0, -device_width/2 - 0.5, 0])\n    color([0.1, 0.1, 0.1])\n    cube([8, 2, 6], center=true);\n    \n    // Speaker grill\n    translate([device_length/2 - 10, 0, device_height/2 - 3])\n    color([0.1, 0.1, 0.1])\n    for(i=[0:3]) {\n        translate([0, i*4 - 6, 0])\n        cube([20, 1, 1], center=true);\n    }\n    \n    // Power button\n    translate([device_length/2, device_width/2 - 5, 0])\n    color([0.5, 0.5, 0.5])\n    rotate([0, 90, 0])\n    cylinder(h=8, r=2.5, $fn=16);\n    \n    // Device label\n    translate([0, -device_width/2 + 5, device_height/2 - 0.5])\n    color([0.7, 0.7, 0])\n    linear_extrude(height=0.5)\n    text(\"OMNI-SCAN\", size=4, halign=\"center\");\n}\n\n// Generate the device\nomni_device();",
    "renders": true
  },
  {
    "electronic_device": "board",
    "openscad_code": "// Raspberry Pi 4 - Realistic Style\n// Dimensions: 85mm x 56mm x 20mm\n\n$fn = 50;\n\n// Main board\nmodule board() {\n    color([0.1, 0.1, 0.1]) \n    difference() {\n        cube([85, 56, 1.6], center=true);\n        \n        // Mounting holes\n        for(pos = [[-32, 23, 0], [32, 23, 0], [32, -23, 0], [-32, -23, 0]]) {\n            translate(pos)\n            cylinder(h=2, r=1.5, center=true);\n        }\n    }\n}\n\n// USB-C power port\nmodule usbc_port() {\n    color([0.2, 0.2, 0.2])\n    translate([-33, -27.5, 0])\n    cube([8, 7, 5]);\n}\n\n// USB 3.0 ports\nmodule usb_ports() {\n    color([0.2, 0.2, 0.2])\n    for(i = [0:1]) {\n        translate([-33, -20 + i*8, 0])\n        cube([8, 6, 5]);\n    }\n}\n\n// Ethernet port\nmodule ethernet_port() {\n    color([0.2, 0.2, 0.2])\n    translate([-33, 0, 0])\n    cube([8, 13, 5]);\n}\n\n// GPIO header\nmodule gpio_header() {\n    color([0.3, 0.3, 0.3])\n    translate([42.5, 13, 0.8])\n    cube([5, 26, 8]);\n    \n    // Pins\n    color([0.8, 0.8, 0.8])\n    for(i = [0:1]) {\n        for(j = [0:19]) {\n            translate([44 + i*2, -9 + j, 9.5])\n            cylinder(h=3, r=0.3);\n        }\n    }\n}\n\n// CPU\nmodule cpu() {\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, 0.8])\n    cube([14, 14, 2]);\n    \n    // Metal lid\n    color([0.7, 0.7, 0.7])\n    translate([0, 0, 3])\n    cube([14, 14, 1]);\n}\n\n// RAM\nmodule ram() {\n    color([0.1, 0.1, 0.1])\n    translate([15, 0, 0.8])\n    cube([12, 12, 2]);\n    \n    // RAM chips\n    color([0.05, 0.05, 0.05])\n    for(i = [0:1]) {\n        translate([15, -2 + i*4, 3])\n        cube([11, 3, 0.5]);\n    }\n}\n\n// HDMI ports\nmodule hdmi_ports() {\n    color([0.2, 0.2, 0.2])\n    translate([-33, 27, 0])\n    cube([8, 6, 5]);\n}\n\n// Micro HDMI\ntranslate([-33, 20, 0])\ncube([8, 4, 5]);\n\n// WiFi/Bluetooth chip\nmodule wifi_chip() {\n    color([0.05, 0.05, 0.05])\n    translate([-15, -25, 0.8])\n    cube([10, 6, 1.5]);\n}\n\n// Status LEDs\nmodule leds() {\n    color([0.9, 0.9, 0.9])\n    translate([20, -27, 0.8])\n    cube([3, 1, 1]);\n    \n    translate([24, -27, 0.8])\n    cube([3, 1, 1]);\n}\n\n// Audio jack\nmodule audio_jack() {\n    color([0.2, 0.2, 0.2])\n    translate([-33, 10, 0])\n    rotate([90, 0, 0])\n    cylinder(h=8, r=3.5);\n}\n\n// Camera connector\nmodule camera_connector() {\n    color([0.3, 0.3, 0.3])\n    translate([42.5, -13, 0.8])\n    cube([5, 20, 3]);\n}\n\n// Display connector\nmodule display_connector() {\n    color([0.3, 0.3, 0.3])\n    translate([42.5, -25, 0.8])\n    cube([5, 10, 3]);\n}\n\n// Assemble the board\nunion() {\n    board();\n    usbc_port();\n    usb_ports();\n    ethernet_port();\n    gpio_header();\n    cpu();\n    ram();\n    hdmi_ports();\n    wifi_chip();\n    leds();\n    audio_jack();\n    camera_connector();\n    display_connector();\n}",
    "renders": true
  },
  {
    "electronic_device": "balance",
    "openscad_code": "// Electronic Balance Scale - Realistic Medium Complexity\n// 3D printable digital kitchen/bench scale\n\n// Color definitions\n$fn = 32;\n\n// Main body with electronics\nmodule body() {\n    // Base unit\n    difference() {\n        // Main housing\n        color(\"silver\")\n        rounded_box([80, 80, 25], 5);\n        \n        // Display window\n        translate([5, 60, 20])\n            cube([70, 15, 8]);\n        \n        // Button holes\n        translate([15, 35, 20])\n            cylinder(h=8, r=4);\n        translate([35, 35, 20])\n            cylinder(h=8, r=4);\n        translate([55, 35, 20])\n            cylinder(h=8, r=4);\n    }\n    \n    // Display screen\n    translate([10, 62, 21])\n        color(\"black\")\n        cube([60, 11, 0.5]);\n    \n    // Buttons\n    translate([15, 35, 15])\n        color(\"darkgray\")\n        cylinder(h=8, r=4);\n    translate([35, 35, 15])\n        color(\"darkgray\")\n        cylinder(h=8, r=4);\n    translate([55, 35, 15])\n        color(\"darkgray\")\n        cylinder(h=8, r=4);\n    \n    // USB-C port\n    translate([40, -2, 10])\n        color(\"black\")\n        cube([10, 4, 3]);\n}\n\n// Load cell platform support\nmodule platform() {\n    // Central column\n    translate([40, 40, 25])\n        color(\"lightgray\")\n        cylinder(h=15, r=8);\n    \n    // Strain gauge cavity (internal)\n    translate([40, 40, 28])\n        color(\"black\")\n        cube([12, 12, 2], center=true);\n}\n\n// Weighing platform\nmodule weighing_platform() {\n    // Main platform\n    translate([40, 40, 45])\n        color(\"silver\")\n        difference() {\n            cylinder(h=3, r=30);\n            // Non-slip pattern\n            for(i = [0:5:360]) {\n                rotate([0, 0, i])\n                    translate([0, 10, -0.5])\n                        cube([2, 20, 4]);\n            }\n        }\n    \n    // Support ribs\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([40, 40, 42])\n                color(\"silver\")\n                cube([25, 3, 6], center=true);\n    }\n}\n\n// Feet for stability\nmodule feet() {\n    for(pos = [[10, 10], [70, 10], [10, 70], [70, 70]]) {\n        translate([pos[0], pos[1], 0])\n            color(\"black\")\n            cylinder(h=3, r=3);\n    }\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    translate([65, 5, 5])\n        difference() {\n            color(\"darkgray\")\n            cube([12, 20, 15]);\n            translate([2, 2, -1])\n                cube([8, 16, 17]);\n        }\n}\n\n// Helper module for rounded box\nmodule rounded_box(size, radius) {\n    hull() {\n        for(dx = [0, size[0]])\n            for(dy = [0, size[1]])\n                for(dz = [0, size[2]])\n                    translate([dx, dy, dz])\n                        sphere(r=radius);\n    }\n}\n\n// Assembly\nbody();\nplatform();\nweighing_platform();\nfeet();\nbattery_compartment();\n\n// Logo placeholder\ntranslate([20, 15, 25.5])\n    color(\"blue\")\n    linear_extrude(height=0.5)\n        text(\"BALANCE\", size=4, halign=\"center\");",
    "renders": true
  },
  {
    "electronic_device": "dancepad",
    "openscad_code": "// Dancepad Electronic Device - Realistic Style, Medium Complexity\n// Dimensions: 80mm x 80mm x 15mm overall\n\n// Main colors\npad_base = [0.2, 0.2, 0.2];      // Dark gray base\npad_surface = [0.1, 0.1, 0.1];   // Black surface\narrow_color = [0.9, 0.9, 0.9];   // Light gray arrows\nled_color = [0, 1, 0];           // Green LEDs\nport_color = [0.3, 0.3, 0.3];    // Dark gray ports\n\n// Base platform\nmodule base_platform() {\n    color(pad_base)\n    difference() {\n        // Main base\n        cube([80, 80, 8], center=true);\n        \n        // USB port cutout\n        translate([38, 0, 3.5])\n            cube([8, 12, 3], center=true);\n        \n        // Power LED indicator cutout\n        translate([-30, 35, 3.5])\n            cube([8, 3, 3], center=true);\n    }\n}\n\n// Arrow pad module\nmodule arrow_pad(x_pos, y_pos, direction) {\n    translate([x_pos, y_pos, 3.5]) {\n        // Arrow base\n        color(pad_surface)\n        difference() {\n            cube([18, 18, 2], center=true);\n            // Pressure sensor gap\n            cube([14, 14, 3], center=true);\n        }\n        \n        // Arrow symbol\n        color(arrow_color)\n        rotate([0, 0, direction * 90])\n        translate([0, 0, 1.1])\n        linear_extrude(height=0.5)\n        polygon(points=[[0, -6], [-4, 2], [4, 2]]);\n        \n        // LED ring around arrow\n        color(led_color)\n        translate([0, 0, 0.1])\n        cylinder(h=0.5, r1=8.5, r2=8.5, center=true, $fn=32);\n    }\n}\n\n// Center button\nmodule center_button() {\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, 3.5]) {\n        difference() {\n            cylinder(h=2, r1=10, r2=10, center=true, $fn=32);\n            cylinder(h=3, r1=7, r2=7, center=true, $fn=32);\n        }\n        \n        // Select text\n        color(arrow_color)\n        translate([0, 0, 1.1])\n        linear_extrude(height=0.5)\n        text(\"SELECT\", size=3, halign=\"center\", valign=\"center\");\n    }\n}\n\n// USB port detail\nmodule usb_port() {\n    color(port_color)\n    translate([38, 0, 1.5])\n    cube([6, 10, 2], center=true);\n}\n\n// Power LED\nmodule power_led() {\n    color([0, 1, 0])\n    translate([-30, 35, 1.5])\n    cube([6, 1.5, 1.5], center=true);\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    color([0.1, 0.1, 0.1])\n    for(x = [-30, 30])\n        for(y = [-30, 30])\n            translate([x, y, -4.5])\n                cylinder(h=2, r1=3, r2=3, center=true, $fn=16);\n}\n\n// Cable strain relief\nmodule cable_strain() {\n    color(port_color)\n    translate([45, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h=15, r1=3, r2=3, center=true, $fn=16);\n}\n\n// Assembly\nunion() {\n    base_platform();\n    \n    // Four directional arrows\n    arrow_pad(0, 25, 0);      // Up\n    arrow_pad(0, -25, 2);     // Down\n    arrow_pad(-25, 0, 3);     // Left\n    arrow_pad(25, 0, 1);      // Right\n    \n    center_button();\n    usb_port();\n    power_led();\n    rubber_feet();\n    cable_strain();\n}",
    "renders": true
  },
  {
    "electronic_device": "fightstick",
    "openscad_code": "// Fightstick Controller with Realistic Features\n// Medium complexity design for 3D printing\n\n// Color definitions\n$fn = 50;\n\nmodule fightstick_main() {\n    // Main case - slightly sloped top for ergonomics\n    difference() {\n        union() {\n            // Base case\n            translate([0, 0, 5]) {\n                cube([220, 130, 25], center = true);\n            }\n            // Sloped top section\n            hull() {\n                translate([0, 0, 17.5]) cube([216, 126, 2], center = true);\n                translate([0, 0, 30]) cube([216, 126, 2], center = true);\n            }\n        }\n        \n        // Hollow out interior\n        translate([0, 0, 15]) {\n            cube([210, 120, 20], center = true);\n        }\n    }\n}\n\nmodule joystick_assembly() {\n    // Joystick mounting plate\n    color(\"silver\") {\n        difference() {\n            translate([0, 30, 0]) {\n                cube([40, 40, 8], center = true);\n            }\n            translate([0, 30, -1]) {\n                cylinder(h = 10, r = 12, center = true);\n            }\n            for(i = [-1, 1]) {\n                for(j = [-1, 1]) {\n                    translate([i * 15, 30 + j * 15, -1]) {\n                        cylinder(h = 10, r = 2, center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Joystick ball top\n    color(\"red\") {\n        translate([0, 30, 12]) {\n            sphere(r = 12);\n        }\n    }\n    \n    // Joystick shaft\n    color(\"black\") {\n        translate([0, 30, 4]) {\n            cylinder(h = 16, r = 4);\n        }\n    }\n}\n\nmodule button_array() {\n    // 8 main action buttons\n    for(i = [0:7]) {\n        color(\"blue\") {\n            translate([60 + i * 25, -20, 0]) {\n                difference() {\n                    cylinder(h = 8, r = 12);\n                    translate([0, 0, -1]) {\n                        cylinder(h = 10, r = 8);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Start/select buttons\n    for(i = [0:1]) {\n        color(\"gray\") {\n            translate([-70 + i * 15, 0, 0]) {\n                difference() {\n                    cylinder(h = 6, r = 6);\n                    translate([0, 0, -1]) {\n                        cylinder(h = 8, r = 3);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule usb_port() {\n    // USB-C port on back\n    color(\"black\") {\n        translate([-110, 0, 15]) {\n            cube([8, 12, 4], center = true);\n        }\n    }\n}\n\nmodule ventilation_grilles() {\n    // Side ventilation slots\n    for(i = [-4:4]) {\n        translate([0, 70, i * 5 + 15]) {\n            cube([220, 2, 1.5], center = true);\n        }\n        translate([0, -70, i * 5 + 15]) {\n            cube([220, 2, 1.5], center = true);\n        }\n    }\n}\n\nmodule rubber_feet() {\n    // Four rubber feet\n    for(i = [-1, 1]) {\n        for(j = [-1, 1]) {\n            color(\"gray\") {\n                translate([i * 90, j * 50, 0]) {\n                    cylinder(h = 2, r = 5);\n                }\n            }\n        }\n    }\n}\n\nmodule led_indicators() {\n    // LED indicators near top\n    color(\"green\") {\n        translate([0, -55, 28]) {\n            cube([4, 4, 2], center = true);\n        }\n    }\n    color(\"red\") {\n        translate([10, -55, 28]) {\n            cube([4, 4, 2], center = true);\n        }\n    }\n}\n\n// Assembly\ncolor(\"darkslategray\") fightstick_main();\njoystick_assembly();\nbutton_array();\nusb_port();\nventilation_grilles();\nrubber_feet();\nled_indicators();",
    "renders": true
  },
  {
    "electronic_device": "hitbox",
    "openscad_code": "// Hitbox-style arcade controller with realistic features\n// Dimensions: 120x80x25mm (largest dimension)\n\n// Main parameters\nbase_width = 120;\nbase_depth = 80;\nbase_height = 25;\nwall_thickness = 3;\n\n// Button parameters\nbutton_diameter = 12;\nbutton_height = 8;\nbutton_spacing = 18;\n\n// Colors\n$fn = 48;\n\n// Main body with rounded edges\nmodule main_body() {\n    color([0.1, 0.1, 0.1]) {\n        difference() {\n            // Main rectangular base\n            translate([-base_width/2, -base_depth/2, 0])\n                minkowski() {\n                    cube([base_width-6, base_depth-6, base_height-6]);\n                    sphere(3);\n                }\n            \n            // Hollow out interior\n            translate([-base_width/2+wall_thickness, -base_depth/2+wall_thickness, wall_thickness])\n                minkowski() {\n                    cube([base_width-6-2*wall_thickness, base_depth-6-2*wall_thickness, base_height-2*wall_thickness]);\n                    sphere(2);\n                }\n            \n            // Cable channel\n            translate([base_width/2-15, -5, base_height/2-5])\n                rotate([0, 90, 0])\n                    cylinder(h=10, r=5);\n        }\n    }\n}\n\n// Cherry MX style button\nmodule button(is_jump=false) {\n    difference() {\n        // Button housing\n        color([0.8, 0.8, 0.8])\n            cylinder(h=button_height, r=button_diameter/2);\n        \n        // Keycap mount\n        translate([0, 0, -1])\n            cylinder(h=button_height+2, r=3);\n    }\n    \n    // Keycap\n    color(is_jump ? [0.2, 0.2, 0.8] : [0.9, 0.9, 0.9])\n        translate([0, 0, button_height])\n            cylinder(h=5, r1=button_diameter/2, r2=button_diameter/2-1);\n}\n\n// Button layout for hitbox\nmodule button_layout() {\n    // Movement buttons (WASD layout)\n    translate([-button_spacing, button_spacing, base_height])\n        button();\n    translate([0, 0, base_height])\n        button();\n    translate([-button_spacing, 0, base_height])\n        button();\n    translate([0, button_spacing, base_height])\n        button();\n    \n    // Action buttons (right side)\n    translate([button_spacing*2, button_spacing/2, base_height])\n        button();\n    translate([button_spacing*3, 0, base_height])\n        button();\n    translate([button_spacing*2, -button_spacing/2, base_height])\n        button();\n    translate([button_spacing*3, button_spacing, base_height])\n        button();\n    \n    // Jump button (up)\n    translate([-button_spacing, button_spacing*2, base_height])\n        button(true);\n}\n\n// Start/select buttons\nmodule utility_buttons() {\n    color([0.3, 0.3, 0.3])\n    for(pos = [[-base_width/2+15, -base_depth/2+10], [-base_width/2+25, -base_depth/2+10]]) {\n        translate(pos + [0, 0, base_height-1])\n            cylinder(h=2, r=3);\n    }\n}\n\n// LED indicators\nmodule leds() {\n    color([1, 0, 0]) {\n        translate([base_width/2-15, base_depth/2-10, base_height-1])\n            sphere(2);\n        translate([base_width/2-25, base_depth/2-10, base_height-1])\n            sphere(2);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    color([0.2, 0.2, 0.2])\n    translate([base_width/2-10, -2.5, 8])\n        cube([8, 5, 3]);\n}\n\n// Rubber feet\nmodule feet() {\n    color([0.2, 0.2, 0.2])\n    for(x = [-base_width/2+15, base_width/2-15])\n        for(y = [-base_depth/2+10, base_depth/2-10])\n            translate([x, y, 0])\n                cylinder(h=2, r=5);\n}\n\n// Logo placeholder\nmodule logo() {\n    color([0.3, 0.3, 0.3])\n    translate([0, -base_depth/2+20, base_height])\n        linear_extrude(height=0.5)\n            text(\"HITBOX\", size=8, halign=\"center\");\n}\n\n// Assembly\nmain_body();\nbutton_layout();\nutility_buttons();\nleds();\nusb_port();\nfeet();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "mixbox",
    "openscad_code": "// Mixbox - Controller with WASD movement keys\n// Dimensions: 80mm x 60mm x 25mm\n\n$fn = 32;\n\n// Main colors\ncolor_case = [0.15, 0.15, 0.15];\ncolor_keys = [0.9, 0.9, 0.9];\ncolor_accent = [0.8, 0.1, 0.1];\ncolor_screen = [0.05, 0.05, 0.05];\n\n// Main body\nmodule mixbox_body() {\n    difference() {\n        // Outer shell\n        color(color_case)\n        cube([80, 60, 25], center = true);\n        \n        // Hollow interior\n        translate([0, 0, 2.5])\n        cube([74, 54, 20], center = true);\n        \n        // USB-C port\n        translate([40, -30, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 10, r = 3.5, center = true);\n    }\n}\n\n// WASD keys module\nmodule wasd_keys() {\n    positions = [\n        [0, 20, 0],      // W\n        [-20, 0, 0],     // A\n        [0, 0, 0],       // S\n        [20, 0, 0]       // D\n    ];\n    \n    for(pos = positions) {\n        translate([pos[0] - 30, pos[1] - 10, 13])\n        color(color_keys)\n        linear_extrude(height = 3)\n        circle(r = 8);\n    }\n}\n\n// Arrow keys module\nmodule arrow_keys() {\n    positions = [\n        [0, -20, 0],     // Up\n        [-20, -40, 0],   // Left\n        [0, -40, 0],     // Down\n        [20, -40, 0]    // Right\n    ];\n    \n    for(pos = positions) {\n        translate([pos[0] + 20, pos[1] + 10, 13])\n        color(color_keys)\n        linear_extrude(height = 3)\n        circle(r = 6);\n    }\n}\n\n// Function buttons\nmodule function_buttons() {\n    positions = [\n        [-25, 25, 0],    // Start\n        [25, 25, 0]      // Select\n    ];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], 13])\n        color(color_accent)\n        cube([12, 8, 2], center = true);\n    }\n}\n\n// OLED display\nmodule display() {\n    translate([0, 15, 13])\n    color(color_screen)\n    cube([30, 12, 1]);\n}\n\n// LED indicators\nmodule leds() {\n    positions = [\n        [-35, 25, 0],\n        [-35, 15, 0],\n        [-35, 5, 0]\n    ];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], 13])\n        color([1, 0, 0])\n        cylinder(h = 1, r = 2);\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    positions = [\n        [-35, -25, 0],\n        [35, -25, 0],\n        [-35, 25, 0],\n        [35, 25, 0]\n    ];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], -12.5])\n        color([0.1, 0.1, 0.1])\n        cylinder(h = 2, r = 3);\n    }\n}\n\n// Assembly\nmixbox_body();\nwasd_keys();\narrow_keys();\nfunction_buttons();\ndisplay();\nleds();\nfeet();",
    "renders": true
  },
  {
    "electronic_device": "fightpad",
    "openscad_code": "// Fightpad Controller - Realistic Style, Medium Complexity\n// Approximate dimensions: 90x60x15mm\n\nmodule main_body() {\n    color(\"black\")\n    difference() {\n        // Main shell with rounded edges\n        minkowski() {\n            cube([85, 55, 12], center=true);\n            sphere(2);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([78, 48, 8], center=true);\n            sphere(1.5);\n        }\n        \n        // USB port opening\n        translate([-44, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=12, d1=8, d2=8, center=true);\n    }\n}\n\nmodule dpad() {\n    color(\"darkslategray\")\n    translate([-25, 15, 6.5]) {\n        // D-pad base\n        cylinder(h=2, d=20);\n        \n        // Cross directional buttons\n        for(dir = [[-1,0], [1,0], [0,-1], [0,1]]) {\n            translate([dir[0]*8, dir[1]*8, 0])\n                color(\"dimgray\")\n                cube([8, 8, 3], center=true);\n        }\n        \n        // Center pivot\n        color(\"silver\")\n        translate([0, 0, 2])\n            cylinder(h=1.5, d=6);\n    }\n}\n\nmodule action_buttons() {\n    color(\"darkslategray\")\n    translate([25, 15, 6.5]) {\n        // Button cluster base\n        cylinder(h=2, d=22);\n        \n        // Four face buttons in diamond pattern\n        color(\"red\")\n        translate([8, 8, 2]) cylinder(h=2.5, d=8);\n        color(\"green\")\n        translate([-8, 8, 2]) cylinder(h=2.5, d=8);\n        color(\"blue\")\n        translate([8, -8, 2]) cylinder(h=2.5, d=8);\n        color(\"yellow\")\n        translate([-8, -8, 2]) cylinder(h=2.5, d=8);\n    }\n}\n\nmodule shoulder_buttons() {\n    color(\"dimgray\")\n    // Left shoulder\n    translate([-38, -28, 7])\n        cube([20, 8, 2]);\n    \n    // Right shoulder\n    translate([38, -28, 7])\n        cube([20, 8, 2]);\n}\n\nmodule start_select() {\n    color(\"darkslategray\")\n    // Start button\n    translate([0, 0, 6.5])\n        cube([12, 6, 2]);\n    \n    // Select button\n    translate([0, -8, 6.5])\n        cube([12, 6, 2]);\n}\n\nmodule led_indicators() {\n    // Power LED\n    color(\"red\")\n    translate([35, -20, 6.5])\n        cylinder(h=0.5, d=3);\n    \n    // Mode LED\n    color(\"blue\")\n    translate([35, -25, 6.5])\n        cylinder(h=0.5, d=3);\n}\n\nmodule thumb_stick() {\n    color(\"darkslategray\")\n    translate([-25, -15, 6.5]) {\n        // Stick base\n        cylinder(h=3, d=14);\n        \n        // Rubber grip\n        color(\"lightgray\")\n        translate([0, 0, 3])\n            sphere(6);\n    }\n}\n\nmodule grip_texture() {\n    color(\"black\")\n    // Left grip texture\n    translate([-40, -20, -6])\n    for(i=[0:3])\n        for(j=[0:3])\n            translate([i*5, j*5, 0])\n                cube([3, 3, 0.5]);\n    \n    // Right grip texture\n    translate([25, -20, -6])\n    for(i=[0:3])\n        for(j=[0:3])\n            translate([i*5, j*5, 0])\n                cube([3, 3, 0.5]);\n}\n\nmodule cable_strain_relief() {\n    color(\"black\")\n    translate([-45, 0, 0])\n        rotate([0, 0, 90])\n        cylinder(h=15, d1=10, d2=8);\n    \n    // Cable\n    color(\"black\")\n    translate([-55, 0, 0])\n        rotate([0, 0, 90])\n        cylinder(h=30, d=5);\n}\n\n// Assemble the fightpad\nmain_body();\ndpad();\naction_buttons();\nshoulder_buttons();\nstart_select();\nled_indicators();\nthumb_stick();\ngrip_texture();\ncable_strain_relief();",
    "renders": true
  },
  {
    "electronic_device": "racing",
    "openscad_code": "// Racing Dash Logger – medium-complexity 3D-printable device\n// Overall footprint ≈ 60 × 40 × 18 mm\n\n// -----------------------------\n// Utility modules\n// -----------------------------\nmodule roundedCube(size, r) {\n    // r = corner radius\n    hull() {\n        translate([r, r, r]) sphere(r = r);\n        translate([size.x - r, r, r]) sphere(r = r);\n        translate([r, size.y - r, r]) sphere(r = r);\n        translate([size.x - r, size.y - r, r]) sphere(r = r);\n        translate([r, r, size.z - r]) sphere(r = r);\n        translate([size.x - r, r, size.z - r]) sphere(r = r);\n        translate([r, size.y - r, size.z - r]) sphere(r = r);\n        translate([size.x - r, size.y - r, size.z - r]) sphere(r = r);\n    }\n}\n\n// -----------------------------\n// Main housing\n// -----------------------------\nmodule housing() {\n    color(\"darkslategray\")\n    difference() {\n        roundedCube([60, 40, 18], 4);            // main shell\n        translate([2, 2, 2]) roundedCube([56, 36, 16], 3);  // hollow inside\n    }\n}\n\n// -----------------------------\n// Mounting lugs (print without support)\n// -----------------------------\nmodule lugs() {\n    for (x = [-25, 25])\n        translate([x, -3, 9])\n            rotate([0, 90, 0])\n                cylinder(h = 6, r = 2.5, $fn = 16);\n}\n\n// -----------------------------\n// Display bezel & screen\n// -----------------------------\nmodule display() {\n    // bezel\n    color(\"black\")\n    translate([10, 6, 18])\n        roundedCube([40, 28, 2], 2);\n\n    // LCD\n    color(\"royalblue\")\n    translate([12, 8, 20.1])\n        cube([36, 24, 0.5]);\n}\n\n// -----------------------------\n// Buttons (menu / OK / + / –)\n// -----------------------------\nmodule buttons() {\n    for (i = [0:3]) {\n        translate([5 + i * 12, 36, 9])\n            color(\"red\")\n            cylinder(h = 3, r = 3, $fn = 20);\n    }\n}\n\n// -----------------------------\n// USB-C port\n// -----------------------------\nmodule usbPort() {\n    color(\"dimgray\")\n    translate([0, 20, 9])\n        rotate([0, 90, 0])\n            cube([8, 7, 3], center = true);\n}\n\n// -----------------------------\n// LED indicators\n// -----------------------------\nmodule leds() {\n    for (i = [0:2]) {\n        translate([52, 10 + i * 10, 18.5])\n            color(\"lime\")\n            sphere(r = 1.2);\n    }\n}\n\n// -----------------------------\n// Vent slots (diff-cuts on top)\n// -----------------------------\nmodule vents() {\n    for (i = [0:3]) {\n        translate([15 + i * 8, 1, 18])\n            cube([2, 38, 1]);\n    }\n}\n\n// -----------------------------\n// Assembly\n// -----------------------------\nunion() {\n    housing();\n    lugs();\n    display();\n    buttons();\n    usbPort();\n    leds();\n    vents();\n}",
    "renders": true
  },
  {
    "electronic_device": "flight",
    "openscad_code": "// Realistic Flight Electronic Device - GPS Navigator\n// Dimensions: 75mm x 50mm x 18mm\n\n$fn = 32;\n\n// Main colors\ncolor_case = [0.15, 0.15, 0.15];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_buttons = [0.3, 0.3, 0.3];\ncolor_antenna = [0.2, 0.2, 0.2];\ncolor_led = [0, 1, 0];\n\n// Main body\nmodule main_body() {\n    color(color_case) {\n        // Main enclosure\n        difference() {\n            rounded_cube([75, 50, 15], 3);\n            \n            // Screen cutout\n            translate([5, 10, 14])\n                cube([50, 30, 2]);\n            \n            // Button cutouts\n            for(i = [0:3]) {\n                translate([60, 10 + i*10, 14])\n                    cylinder(h=2, r=3);\n            }\n            \n            // USB port\n            translate([2, 20, 7])\n                cube([4, 8, 3]);\n        }\n        \n        // Side grips\n        for(side = [-1, 1]) {\n            translate([0, side*20, 0])\n                cube([75, 10, 15], center=true);\n        }\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(x = [0, 1], y = [0, 1], z = [0, 1]) {\n            translate([\n                x * size[0] - radius * (x == 0),\n                y * size[1] - radius * (y == 0),\n                z * size[2] - radius * (z == 0)\n            ]) {\n                sphere(r=radius);\n            }\n        }\n    }\n}\n\n// Screen assembly\nmodule screen() {\n    // LCD display\n    color(color_screen) {\n        translate([5, 10, 13])\n            cube([50, 30, 1]);\n    }\n    \n    // Screen bezel\n    difference() {\n        color([0.05, 0.05, 0.05]) {\n            translate([4, 9, 12.5])\n                cube([52, 32, 0.5]);\n        }\n        \n        translate([5.5, 10.5, 12])\n            cube([49, 29, 1]);\n    }\n}\n\n// Buttons\nmodule buttons() {\n    for(i = [0:3]) {\n        color(color_buttons) {\n            translate([60, 10 + i*10, 12])\n                cylinder(h=3, r=2.5);\n        }\n        \n        // Button labels\n        color([1, 1, 1]) {\n            translate([60, 10 + i*10, 15.1])\n                rotate([180, 0, 0])\n                linear_extrude(0.1)\n                text(str(chr(65+i)), size=3, halign=\"center\");\n        }\n    }\n}\n\n// GPS antenna\nmodule antenna() {\n    color(color_antenna) {\n        // Antenna base\n        translate([37.5, 5, 15])\n            cylinder(h=2, r=8);\n        \n        // Antenna dome\n        translate([37.5, 5, 17])\n            sphere(r=6);\n        \n        // Antenna pattern\n        color([0.3, 0.3, 0.3]) {\n            for(angle = [0:30:330]) {\n                rotate([0, 0, angle])\n                translate([37.5, 5, 17])\n                    cube([0.5, 5, 0.5], center=true);\n            }\n        }\n    }\n}\n\n// Status LED\nmodule status_led() {\n    color(color_led) {\n        translate([70, 45, 13])\n            cylinder(h=1, r=2);\n    }\n    \n    // LED housing\n    color([0.2, 0.2, 0.2]) {\n        translate([70, 45, 12.5])\n            cylinder(h=1.5, r=3);\n    }\n}\n\n// USB port detail\nmodule usb_port() {\n    color([0.1, 0.1, 0.1]) {\n        translate([0, 24, 7])\n            cube([3, 4, 2]);\n    }\n    \n    // USB contacts\n    color([0.8, 0.8, 0.8]) {\n        for(i = [0:3]) {\n            translate([0.5, 22.5 + i*1, 7.5])\n                cube([2, 0.5, 1]);\n        }\n    }\n}\n\n// Mounting points\nmodule mounting_points() {\n    color([0.25, 0.25, 0.25]) {\n        for(pos = [[10, 10], [65, 10], [10, 40], [65, 40]]) {\n            translate([pos[0], pos[1], 0])\n                cylinder(h=3, r=2);\n            translate([pos[0], pos[1], 0])\n                cylinder(h=15, r=1);\n        }\n    }\n}\n\n// Assemble the device\nmain_body();\nscreen();\nbuttons();\nantenna();\nstatus_led();\nusb_port();\nmounting_points();",
    "renders": true
  },
  {
    "electronic_device": "sim",
    "openscad_code": "// SIM card electronic device module\n// Realistic style, medium complexity\n\n// Main parameters\nsim_width = 15;\nsim_height = 12;\nsim_thickness = 0.76;\ncorner_radius = 1.5;\nedge_chamfer = 0.3;\n\n// Colors\ngold_color = [0.8, 0.6, 0.1];\nplastic_color = [0.9, 0.9, 0.9];\ncontact_color = [0.7, 0.7, 0.7];\n\n// SIM card body with rounded corners\nmodule sim_body() {\n    color(plastic_color) {\n        difference() {\n            // Main body\n            minkowski() {\n                cube([sim_width, sim_height, sim_thickness], center=true);\n                cylinder(r=corner_radius, h=0.1, $fn=8);\n            }\n            \n            // Chamfer edges\n            translate([0, 0, sim_thickness/2 - 0.1]) {\n                minkowski() {\n                    cube([sim_width + 0.2, sim_height + 0.2, sim_thickness + 0.2], center=true);\n                    cylinder(r=corner_radius + edge_chamfer, h=0.1, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Contact pad array\nmodule contact_pads() {\n    color(contact_color) {\n        for (i = [0:5]) {\n            translate([-sim_width/2 + 2 + i*2.2, -sim_height/2 + 2.5, sim_thickness/2 - 0.01]) {\n                cube([1.8, 7, 0.02], center=false);\n            }\n        }\n        \n        // Additional contact areas\n        translate([sim_width/2 - 3.5, sim_height/2 - 3, sim_thickness/2 - 0.01]) {\n            cube([2.5, 2, 0.02], center=false);\n        }\n    }\n}\n\n// Gold plating layer\nmodule gold_plating() {\n    color(gold_color) {\n        translate([0, 0, -sim_thickness/2 + 0.01]) {\n            cube([sim_width - 0.5, sim_height - 0.5, 0.02], center=true);\n        }\n    }\n}\n\n// Notch indicator\nmodule notch_indicator() {\n    color(plastic_color) {\n        translate([sim_width/2 - 2.5, -sim_height/2 + 1, 0]) {\n            difference() {\n                cylinder(h=sim_thickness, r=1, $fn=16);\n                translate([0.5, 0, -0.1]) {\n                    cube([2, 2, sim_thickness + 0.2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Beveled edge detail\nmodule beveled_edges() {\n    color([0.8, 0.8, 0.8]) {\n        difference() {\n            cube([sim_width + 0.1, sim_height + 0.1, sim_thickness + 0.1], center=true);\n            cube([sim_width - 0.2, sim_height - 0.2, sim_thickness + 0.2], center=true);\n        }\n    }\n}\n\n// SIM carrier tray (3D printable support)\nmodule sim_tray() {\n    tray_thickness = 1;\n    tray_margin = 2;\n    \n    color([0.7, 0.7, 0.7]) {\n        difference() {\n            // Main tray\n            translate([0, 0, -sim_thickness/2 - tray_thickness/2]) {\n                cube([sim_width + tray_margin*2, sim_height + tray_margin*2, tray_thickness], center=true);\n            }\n            \n            // SIM cutout\n            translate([0, 0, -sim_thickness/2 - 0.1]) {\n                minkowski() {\n                    cube([sim_width + 0.2, sim_height + 0.2, 0.1], center=true);\n                    cylinder(r=corner_radius, h=0.1, $fn=8);\n                }\n            }\n            \n            // Finger grip\n            translate([sim_width/2 + tray_margin/2, 0, -sim_thickness/2 - tray_thickness/2]) {\n                cylinder(h=tray_thickness, r=2, $fn=16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main SIM card\n    sim_body();\n    \n    // Contact features\n    contact_pads();\n    gold_plating();\n    \n    // Identification features\n    notch_indicator();\n    beveled_edges();\n    \n    // Optional 3D printable tray\n    // translate([0, 0, 2]) sim_tray();\n}",
    "renders": true
  },
  {
    "electronic_device": "capture",
    "openscad_code": "// Capture Device - Medium Complexity Realistic Style\n// OpenSCAD 3D Printable Model\n\n// Main parameters\ndevice_width = 48;\ndevice_height = 30;\ndevice_depth = 72;\nwall_thickness = 2;\n\n// Lens parameters\nlens_diameter = 18;\nlens_depth = 8;\nlens_protrusion = 4;\n\n// Screen parameters\nscreen_width = 25;\nscreen_height = 15;\nscreen_depth = 1;\n\n// Button parameters\nbutton_size = 4;\nbutton_height = 1.5;\n\n// Colors\ncolor_body = [0.15, 0.15, 0.15];\ncolor_lens = [0.1, 0.1, 0.1];\ncolor_screen = [0, 0, 0];\ncolor_button = [0.8, 0.8, 0.8];\ncolor_port = [0.3, 0.3, 0.3];\n\n// Main body\nmodule main_body() {\n    color(color_body)\n    difference() {\n        // Main box\n        cube([device_width, device_depth, device_height], center=true);\n        \n        // Lens hole front\n        translate([0, device_depth/2 - lens_depth/2, 0])\n        rotate([90, 0, 0])\n        cylinder(h=lens_depth*2, d=lens_diameter + wall_thickness, center=true, $fn=50);\n        \n        // Screen recess\n        translate([0, -device_depth/2 + screen_depth + 2, device_height/2 - screen_height/2 - 5])\n        cube([screen_width + 2, screen_depth + 1, screen_height + 2], center=true);\n        \n        // Microphone holes top\n        for(i = [-1:1]) {\n            translate([i * 8, 0, device_height/2 - 3])\n            cylinder(h=wall_thickness + 1, d=2, center=true, $fn=20);\n        }\n        \n        // Speaker holes\n        for(x = [-2:2]) {\n            for(y = [-1:1]) {\n                translate([x * 3.5, -device_depth/2 + 5, y * 3.5 - 5])\n                cylinder(h=wall_thickness + 1, d=1.2, center=true, $fn=8);\n            }\n        }\n        \n        // Status LED hole\n        translate([device_width/2 - 5, device_depth/2 - 4, device_height/2 - 5])\n        cylinder(h=wall_thickness + 1, d=3, center=true, $fn=20);\n    }\n    \n    // Grip texture sides\n    color([0.2, 0.2, 0.2])\n    for(i = [0:3]) {\n        translate([device_width/2 - wall_thickness/2, -device_depth/2 + i * 18 + 5, 0])\n        cube([wall_thickness, 2, device_height - 8], center=true);\n    }\n    \n    mirror([1, 0, 0])\n    for(i = [0:3]) {\n        translate([device_width/2 - wall_thickness/2, -device_depth/2 + i * 18 + 5, 0])\n        cube([wall_thickness, 2, device_height - 8], center=true);\n    }\n}\n\n// Lens assembly\nmodule lens_assembly() {\n    color(color_lens)\n    union() {\n        // Lens barrel\n        translate([0, device_depth/2 + lens_protrusion/2, 0])\n        rotate([90, 0, 0])\n        cylinder(h=lens_protrusion, d=lens_diameter + 4, center=true, $fn=50);\n        \n        // Front lens element\n        translate([0, device_depth/2 + lens_protrusion, 0])\n        rotate([90, 0, 0])\n        cylinder(h=1, d=lens_diameter, center=true, $fn=50);\n        \n        // Lens ring detail\n        translate([0, device_depth/2 + lens_protrusion/2 - 1, 0])\n        rotate([90, 0, 0])\n        cylinder(h=2, d=lens_diameter + 6, center=true, $fn=100);\n    }\n}\n\n// Screen assembly\nmodule screen_assembly() {\n    color(color_screen)\n    translate([0, -device_depth/2 + screen_depth/2 + 2, device_height/2 - screen_height/2 - 5])\n    cube([screen_width, screen_depth, screen_height], center=true);\n    \n    // Screen bezel\n    color([0.25, 0.25, 0.25])\n    translate([0, -device_depth/2 + screen_depth/2 + 1.8, device_height/2 - screen_height/2 - 5])\n    cube([screen_width + 2, screen_depth + 0.5, screen_height + 2], center=true);\n}\n\n// Buttons\nmodule buttons() {\n    color(color_button)\n    // Record button (red accent)\n    translate([0, -device_depth/2 + 8, -device_height/2 + 8])\n    cube([button_size, button_height, button_size], center=true);\n    \n    color([0.8, 0.1, 0.1])\n    translate([0, -device_depth/2 + 8.5, -device_height/2 + 8])\n    cube([button_size - 1, button_height + 0.5, button_size - 1], center=true);\n    \n    // Power button\n    color(color_button)\n    translate([-device_width/2 + 8, -device_depth/2 + 8, 0])\n    cube([button_size, button_height, button_size], center=true);\n    \n    // Mode button\n    translate([device_width/2 - 8, -device_depth/2 + 8, 0])\n    cube([button_size, button_height, button_size], center=true);\n}\n\n// Ports\nmodule ports() {\n    color(color_port)\n    // Micro USB port\n    translate([device_width/2 - 8, 0, -device_height/2 + 3])\n    cube([4, 7, 2], center=true);\n    \n    // HDMI port\n    translate([device_width/2 - 8, 0, -device_height/2 + 8])\n    cube([6, 9, 3], center=true);\n    \n    // SD card slot\n    translate([0, device_depth/2 - 5, -device_height/2 + 3])\n    cube([12, 1, 2], center=true);\n}\n\n// Mounting point\nmodule mounting_point() {\n    color([0.4, 0.4, 0.4])\n    translate([0, -device_depth/2 + 15, -device_height/2 + 1])\n    rotate([90, 0, 0])\n    cylinder(h=4, d=6, center=true, $fn=20);\n    \n    // Thread hole\n    translate([0, -device_depth/2 + 15, -device_height/2 - 1])\n    rotate([90, 0, 0])\n    cylinder(h=6, d=3, center=true, $fn=20);\n}\n\n// Status LED\nmodule status_led() {\n    color([0, 1, 0])\n    translate([device_width/2 - 5, device_depth/2 - 4, device_height/2 - 5])\n    cylinder(h=wall_thickness, d=2, center=true, $fn=20);\n}\n\n// Assemble the capture device\nunion() {\n    main_body();\n    lens_assembly();\n    screen_assembly();\n    buttons();\n    ports();\n    mounting_point();\n    status_led();\n}",
    "renders": true
  },
  {
    "electronic_device": "dock",
    "openscad_code": "// Realistic Smartphone Dock - Medium Complexity\n// Dimensions optimized for 3D printing (80mm x 45mm x 35mm)\n\n// Main dock body\nmodule dock_base() {\n    color(\"silver\")\n    difference() {\n        // Main body\n        cube([80, 45, 35], center=true);\n        \n        // Front chamfer\n        translate([0, 22.5, 17.5])\n        rotate([0, 45, 0])\n        cube([120, 60, 60], center=true);\n        \n        // Phone slot\n        translate([0, 10, 12.5])\n        cube([70, 25, 15], center=true);\n    }\n}\n\n// Phone connector\nmodule lightning_connector() {\n    color(\"gold\")\n    translate([0, 0, 20])\n    cube([8, 2, 6], center=true);\n}\n\n// Back support\nmodule back_support() {\n    color(\"silver\")\n    difference() {\n        translate([0, -12, 0])\n        cube([80, 15, 35], center=true);\n        \n        // Cable channel\n        translate([0, -12, -12.5])\n        cube([10, 15, 10], center=true);\n    }\n}\n\n// Front base plate\nmodule front_base() {\n    color(\"silver\")\n    translate([0, 22.5, -17.5])\n    cube([80, 5, 2], center=true);\n}\n\n// LED indicator\nmodule status_led() {\n    color(\"blue\")\n    translate([35, 15, -16.5])\n    sphere(1.5);\n}\n\n// Ventilation slots\nmodule ventilation_slots() {\n    color(\"silver\")\n    for(i = [-30:10:30]) {\n        translate([i, 0, 0])\n        cube([5, 45, 1], center=true);\n    }\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    color(\"black\")\n    for(x = [-30, 30]) {\n        for(y = [-15, 15]) {\n            translate([x, y, -17.5])\n            cylinder(h=1, r=2.5, center=true);\n        }\n    }\n}\n\n// Decorative groove\nmodule decorative_groove() {\n    color(\"black\")\n    translate([0, 22.5, 0])\n    cube([78, 1, 33], center=true);\n}\n\n// Charging cable hole\nmodule cable_hole() {\n    color(\"silver\")\n    translate([0, -19.5, -12.5])\n    rotate([90, 0, 0])\n    cylinder(h=20, r=4, center=true);\n}\n\n// Wireless charging coil indicator\nmodule wireless_coil() {\n    color(\"darkgray\")\n    translate([0, 0, 15])\n    cylinder(h=0.5, r=20, center=true);\n}\n\n// Assembly\nunion() {\n    dock_base();\n    back_support();\n    front_base();\n    lightning_connector();\n    status_led();\n    ventilation_slots();\n    rubber_feet();\n    decorative_groove();\n    cable_hole();\n    wireless_coil();\n}",
    "renders": true
  },
  {
    "electronic_device": "station",
    "openscad_code": "// Station Electronic Device - Realistic Style\n// A compact desktop radio/communication station with display and controls\n\nmodule body() {\n    difference() {\n        // Main body shell\n        color(\"darkslategray\")\n        cube([85, 55, 28], center=true);\n        \n        // Front recess for display\n        translate([0, 27.5, 8])\n        cube([75, 1, 20], center=true);\n        \n        // Rear ventilation slots\n        for(i = [-40:8:40]) {\n            translate([i, -27.5, 0])\n            cube([3, 2, 28], center=true);\n        }\n    }\n}\n\nmodule display() {\n    translate([0, 27.4, 8])\n    color(\"black\")\n    cube([65, 0.5, 15], center=true);\n    \n    // Display frame\n    translate([0, 27.3, 8])\n    color(\"gray30\")\n    cube([68, 0.5, 18], center=true);\n}\n\nmodule buttons() {\n    // Power button (red)\n    translate([-25, 27.3, 0])\n    color(\"red\")\n    cylinder(h=1, d=6, $fn=20);\n    \n    // Volume knob\n    translate([25, 27.3, 0])\n    color(\"dimgray\")\n    cylinder(h=8, d=12, $fn=32);\n    \n    // Channel buttons\n    for(i = [0:3]) {\n        translate([-15 + i*10, 27.3, -8])\n        color(\"black\")\n        cube([6, 1, 3], center=true);\n    }\n}\n\nmodule ports() {\n    // Antenna connector (rear)\n    translate([0, -27.5, 12])\n    rotate([90, 0, 0])\n    color(\"gold\")\n    cylinder(h=5, d=8, $fn=20);\n    \n    // Audio jacks\n    for(i = [-20, 20]) {\n        translate([i, -27.5, 5])\n        rotate([90, 0, 0])\n        color(\"silver\")\n        cylinder(h=3, d=6, $fn=20);\n    }\n    \n    // USB port\n    translate([0, -27.5, -5])\n    rotate([90, 0, 0])\n    color(\"black\")\n    cube([12, 3, 5], center=true);\n}\n\nmodule speaker_grill() {\n    // Front speaker area\n    translate([0, 27.3, -10])\n    color(\"gray20\")\n    cube([60, 0.5, 8], center=true);\n    \n    // Speaker holes\n    for(x = [-25:5:25]) {\n        for(y = [-3:3:3]) {\n            translate([x, 27.2, -10 + y])\n            color(\"black\")\n            cylinder(h=1, d=2, $fn=8);\n        }\n    }\n}\n\nmodule led_indicators() {\n    // Signal strength LEDs\n    for(i = [0:4]) {\n        translate([-30 + i*6, 27.3, 15])\n        color(\"lime\")\n        cylinder(h=1, d=3, $fn=8);\n    }\n    \n    // Status LED\n    translate([30, 27.3, 15])\n    color(\"blue\")\n    cylinder(h=1, d=3, $fn=8);\n}\n\nmodule feet() {\n    // Rubber feet at corners\n    for(x = [-40, 40]) {\n        for(y = [-20, 20]) {\n            translate([x, y, -15])\n            color(\"black\")\n            cylinder(h=3, d=8, $fn=16);\n        }\n    }\n}\n\n// Assemble the device\n$fn = 32;\n\nunion() {\n    body();\n    display();\n    buttons();\n    ports();\n    speaker_grill();\n    led_indicators();\n    feet();\n}",
    "renders": true
  },
  {
    "electronic_device": "arm",
    "openscad_code": "// Smart-Fitness Band (realistic medium-complexity arm electronic device)\n// Overall printable size ≈ 88 mm long × 34 mm wide × 18 mm high\n\n$fn = 36;\n\n// Main colours\nbandColor   = \"#1E1E1E\";    // matte black TPU\nbodyColor   = \"#2C2C2E\";    // dark aluminium\nglassColor  = \"#0B0B0B\";    // smoked glass\naccentColor = \"#FF3B30\";    // red accent ring\n\n// ---------- Main assembly ----------\nmodule smartBand() {\n    difference() {\n        union() {\n            bandTop();    // upper strap\n            bandBottom(); // lower strap\n            body();       // watch body\n            screen();     // display glass\n            sideButton(); // side button & crown\n            chargePins(); // underside charge contacts\n        }\n        // Remove strap holes for breathability\n        strapHoles();\n    }\n}\n\n// ---------- Soft TPU strap modules ----------\nmodule strapSegment(w, l, t) {\n    color(bandColor)\n    translate([-w/2, -l/2, 0])\n        cube([w, l, t], center = false);\n}\n\nmodule bandTop() {\n    for (i = [-1:1]) {\n        translate([0, 15 + i*10, -3])\n            strapSegment(22 - abs(i)*3, 8, 4);\n    }\n    // Tapered end\n    translate([0, 42, -3])\n        scale([0.6, 1, 1])\n            strapSegment(22, 10, 4);\n}\n\nmodule bandBottom() {\n    mirror([0, 1, 0]) {\n        bandTop();\n    }\n}\n\n// ---------- Watch body ----------\nmodule body() {\n    color(bodyColor)\n    translate([0, 0, 0]) {\n        hull() {\n            cylinder(h = 11, d = 34);\n            translate([0, 0, 1.5])\n                cylinder(h = 8, d = 32);\n        }\n    }\n}\n\n// ---------- Display ----------\nmodule screen() {\n    color(glassColor)\n    translate([0, 0, 11.2])\n        cylinder(h = 0.8, d = 28);\n\n    // Accent ring beneath glass\n    color(accentColor)\n    translate([0, 0, 10.5])\n        cylinder(h = 0.7, d1 = 28.2, d2 = 28);\n}\n\n// ---------- Side controls ----------\nmodule sideButton() {\n    // Main button\n    color(bodyColor)\n    translate([17, 0, 5])\n        rotate([0, 90, 0])\n            cylinder(h = 3, d = 5, center = true);\n    // Crown\n    color(accentColor)\n    translate([19.5, 0, 5])\n        rotate([0, 90, 0])\n            cylinder(h = 2, d = 4);\n}\n\n// ---------- Underside charging contacts ----------\nmodule chargePins() {\n    for (i = [-1, 1]) {\n        color([0.8, 0.8, 0.8]) // silver contact\n        translate([i*5, -5, -1.6])\n            cylinder(h = 0.4, d = 3);\n    }\n}\n\n// ---------- Ventilation holes in strap ----------\nmodule strapHoles() {\n    for (i = [0:3]) {\n        translate([0, 15 + i*8, -1])\n            rotate([90, 0, 0])\n                cylinder(h = 20, d = 2.5);\n    }\n    mirror([0, 1, 0]) {\n        for (i = [0:3]) {\n            translate([0, 15 + i*8, -1])\n                rotate([90, 0, 0])\n                    cylinder(h = 20, d = 2.5);\n        }\n    }\n}\n\n// Render the device\nsmartBand();",
    "renders": true
  },
  {
    "electronic_device": "shell",
    "openscad_code": "// Shell-style smartphone case with realistic details\n// Overall dimensions: 75x150x12mm\n\n// Main colors\ncase_color = \"Silver\";\nbutton_color = \"Gray\";\naccent_color = \"Black\";\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main case body\nmodule case_shell() {\n    difference() {\n        // Outer shell\n        color(case_color)\n        hull() {\n            translate([-37, -75, 0])\n                cube([74, 150, 12]);\n            translate([-35, -73, 0])\n                cube([70, 146, 12]);\n        }\n        \n        // Inner cavity for phone\n        color(\"White\")\n        translate([-35, -73, wall])\n            cube([70 - 2*wall, 146 - 2*wall, 12 - wall]);\n    }\n}\n\n// Camera bump\nmodule camera_bump() {\n    color(case_color)\n    translate([28, 55, 12])\n        cylinder(h=2, r=8, $fn=32);\n    \n    // Camera lens detail\n    color(\"Black\")\n    translate([28, 55, 14])\n        cylinder(h=0.5, r=6, $fn=32);\n    \n    // Flash\n    color(\"Yellow\")\n    translate([28, 48, 14])\n        cylinder(h=0.5, r=2, $fn=16);\n}\n\n// Volume buttons\nmodule volume_buttons() {\n    for(i = [0:1]) {\n        color(button_color)\n        translate([-37.5, 20 + i*15, 6])\n            cube([1.5, 8, 3]);\n    }\n}\n\n// Power button\nmodule power_button() {\n    color(button_color)\n    translate([37.5, 0, 6])\n        cube([1.5, 10, 2]);\n}\n\n// Charging port cutout\nmodule charging_port() {\n    color(\"Black\")\n    translate([0, -76, 2])\n        cube([12, 2, 4]);\n}\n\n// Speaker holes\nmodule speaker_holes() {\n    for(i = [-3:3]) {\n        color(\"Black\")\n        translate([i*5, -76, 2])\n            cylinder(h=2, r=1, $fn=16);\n    }\n}\n\n// Screen lip\nmodule screen_lip() {\n    color(case_color)\n    difference() {\n        translate([-35, -73, 12])\n            cube([70, 146, 1.5]);\n        translate([-33, -71, 12.5])\n            cube([66, 142, 1.5]);\n    }\n}\n\n// Logo detail\nmodule logo() {\n    color(accent_color)\n    translate([0, 0, 0.5])\n        linear_extrude(height=0.3)\n            text(\"SHELL\", size=8, halign=\"center\", valign=\"center\");\n}\n\n// Assembly\ncase_shell();\ncamera_bump();\nvolume_buttons();\npower_button();\ncharging_port();\nspeaker_holes();\nscreen_lip();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "skin",
    "openscad_code": "// Skin patch electronic device - realistic style, medium complexity\n// Wearable ECG/heart-rate monitor style patch\n\nskin_color = \"#FDBCB4\";\npcb_color = \"#006600\";\nmetal_color = \"#C0C0C0\";\ndisplay_color = \"#000033\";\nbutton_color = \"#333333\";\n\n// Main skin patch base\nmodule skin_patch_base() {\n    color(skin_color)\n    difference() {\n        // Main flexible patch body with rounded edges\n        minkowski() {\n            cube([35, 25, 1.5], center=true);\n            sphere(2.5);\n        }\n        \n        // Taper edges for realistic skin patch\n        translate([0, 0, 0.8])\n        scale([1.1, 1.1, 0.5])\n        cube([35, 25, 2], center=true);\n    }\n}\n\n// Medical adhesive mesh pattern\nmodule adhesive_mesh() {\n    color(skin_color)\n    for(x = [-15:5:15]) {\n        for(y = [-10:5:10]) {\n            translate([x, y, -0.7])\n            cylinder(h=0.3, d=3, $fn=12);\n        }\n    }\n}\n\n// Electronic module housing\nmodule electronics_housing() {\n    color(pcb_color)\n    translate([0, 0, 2])\n    difference() {\n        // Main housing - raised platform\n        cube([20, 15, 4], center=true);\n        \n        // Battery compartment\n        translate([-8, 0, 2])\n        cube([8, 8, 2.1], center=true);\n        \n        // Sensor window\n        translate([5, 0, 2])\n        cylinder(h=2.1, d=6, center=true);\n    }\n}\n\n// Display module\nmodule display() {\n    color(display_color)\n    translate([0, 5, 4.1])\n    cube([12, 6, 0.5], center=true);\n    \n    // Display border\n    color([0.2, 0.2, 0.2])\n    translate([0, 5, 4.3])\n    cube([13, 7, 0.3], center=true);\n}\n\n// Control button\nmodule control_button() {\n    color(button_color)\n    translate([8, -5, 4.2])\n    cylinder(h=1, d=4, $fn=16);\n    \n    color(metal_color)\n    translate([8, -5, 5.2])\n    cylinder(h=0.5, d=3.5, $fn=16);\n}\n\n// LED indicators\nmodule status_leds() {\n    // Power LED\n    color([0, 1, 0])\n    translate([-6, 7, 4.2])\n    sphere(0.8);\n    \n    // Connection LED\n    color([0, 0, 1])\n    translate([-6, 5, 4.2])\n    sphere(0.8);\n}\n\n// Wireless charging coil outline\nmodule charging_coil() {\n    color(metal_color)\n    for(i = [0:15:345]) {\n        rotate([0, 0, i])\n        translate([9, 0, 2])\n        cube([1, 0.5, 0.3], center=true);\n    }\n}\n\n// Flexible electrode contacts\nmodule electrodes() {\n    color(metal_color)\n    // Left electrode\n    translate([-12, 0, 0.8])\n    cylinder(h=0.5, d=6, $fn=24);\n    \n    // Right electrode\n    translate([12, 0, 0.8])\n    cylinder(h=0.5, d=6, $fn=24);\n    \n    // Bottom electrode\n    translate([0, -8, 0.8])\n    cylinder(h=0.5, d=6, $fn=24);\n}\n\n// Micro USB port\nmodule usb_port() {\n    color([0.1, 0.1, 0.1])\n    translate([-10, -7.5, 3])\n    cube([4, 2, 1.5], center=true);\n    \n    // Port opening\n    translate([-10, -7.5, 3])\n    cube([3.5, 1.5, 1], center=true);\n}\n\n// Assembly\nskin_patch_base();\nadhesive_mesh();\nelectronics_housing();\ndisplay();\ncontrol_button();\nstatus_leds();\ncharging_coil();\nelectrodes();\nusb_port();",
    "renders": true
  },
  {
    "electronic_device": "grip",
    "openscad_code": "// Game-controller-style hand-grip for a small USB-C gamepad\n// Overall size: 90 mm long, 55 mm wide, 32 mm thick (comfortable hand-fit)\n\n// color constants\n$fa = 2; $fs = 0.5;  // smooth curves\n\nmodule body() {\n    color([0.22,0.22,0.25])          // matte dark-grey plastic\n    difference() {\n        // main shell\n        hull() {\n            translate([-15,-22,0])  cube([30,15,28], center=true);\n            translate([ 15,-22,0])  cube([30,15,28], center=true);\n            translate([  0,  0,0])  cube([50,40,32], center=true);\n        }\n\n        // cavity for electronics\n        translate([0,0,2])\n            cube([40,36,26], center=true);\n    }\n}\n\nmodule grip_pads() {                // rubberized side grips\n    for(side=[-1,1])\n    translate([side*25,0,5])\n    color([0.05,0.05,0.05])         // soft black rubber\n    scale([0.4,1,1])\n    cylinder(h=25, r1=10, r2=10, center=true);\n}\n\nmodule dpad() {                     // 4-way directional pad\n    translate([-18,10,16])\n    color([0.15,0.15,0.15])\n    difference() {\n        cube([10,10,2.5], center=true);\n        for(x=[-1,1])\n            translate([x*2.5,0,0])\n            cube([2.5,8,3], center=true);\n        for(y=[-1,1])\n            translate([0,y*2.5,0])\n            cube([8,2.5,3], center=true);\n    }\n}\n\nmodule action_buttons() {           // A/B/X/Y cluster\n    for(p=[[18,10],[12,16],[24,16],[18,22]])\n    translate([p[0], p[1], 16])\n    color([0.95,0.2,0.2])           // red, green, blue, yellow\n    cylinder(h=2.5, r=3.5, center=true);\n}\n\nmodule analog_stick() {             // left thumb stick\n    translate([-18,-15,16])\n    union() {\n        color([0.25,0.25,0.25])\n        cylinder(h=3, r=6, center=true);\n        color([0.1,0.1,0.1])\n        translate([0,0,1.5])\n        cylinder(h=4, r=4.5, center=true);\n    }\n}\n\nmodule shoulder_buttons() {         // L/R bumpers\n    for(side=[-1,1])\n    translate([side*23, -28, 10])\n    rotate([90,0,0])\n    color([0.3,0.3,0.3])\n    cylinder(h=5, r1=5, r2=3, center=true);\n}\n\nmodule usbc_port() {                // USB-C charging port\n    translate([0, -28, 8])\n    color([0.1,0.1,0.1])\n    cube([8,2,4], center=true);\n}\n\nmodule led_indicator() {            // RGB status LED\n    translate([15, -28, 16])\n    color([0,0.8,1])\n    sphere(1.5);\n}\n\nmodule logo() {                     // simple embossed logo\n    translate([0,0,16])\n    linear_extrude(height=0.5)\n    text(\"GRIP\", size=5, halign=\"center\", valign=\"center\");\n}\n\n// assembly\nunion() {\n    body();\n    grip_pads();\n    dpad();\n    action_buttons();\n    analog_stick();\n    shoulder_buttons();\n    usbc_port();\n    led_indicator();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "wrist",
    "openscad_code": "// Wrist-mounted fitness tracker / smartwatch\n// Realistic medium-complexity OpenSCAD model\n// Dimensions: 46 mm wide × 38 mm tall × 12 mm thick\n// Fits standard 22 mm spring-bar watch strap\n\n// Overall color scheme\nstrapColor = [0.15,0.15,0.15];       // matte black TPU\ncaseColor  = [0.2,0.2,0.2];        // dark grey aluminum\nscreenColor= [0.05,0.05,0.05];     // deep black glass\nbuttonColor= [0.25,0.25,0.25];     // metallic grey\naccentColor= [0.9,0.2,0.2];        // red sport accent\n\n// General dimensions (mm)\nmodule wristTracker() {\n    // Watch case body\n    difference() {\n        // Main rounded case\n        color(caseColor) {\n            hull() {\n                translate([-23,-19,0]) cylinder(h=12, d=8, $fn=20);\n                translate([ 23,-19,0]) cylinder(h=12, d=8, $fn=20);\n                translate([-23, 19,0]) cylinder(h=12, d=8, $fn=20);\n                translate([ 23, 19,0]) cylinder(h=12, d=8, $fn=20);\n            }\n        }\n\n        // Screen cavity\n        translate([0,0,1]) {\n            color(screenColor) cube([40,34,2], center=true);\n        }\n\n        // Heart-rate sensor window\n        translate([0,0,-0.1]) cylinder(h=3, d=8, $fn=30);\n    }\n\n    // Raised bezel ring\n    translate([0,0,10.5]) {\n        color(caseColor) difference() {\n            cylinder(h=2, d=50, $fn=60);\n            cylinder(h=3, d=42, $fn=60);\n        }\n    }\n\n    // 2.5D curved cover glass\n    translate([0,0,11]) {\n        color(screenColor) scale([1,1,0.5]) sphere(d=42, $fn=60);\n    }\n\n    // Side buttons (3 physical pushers)\n    module button(posY, height) {\n        translate([24.5, posY, height]) {\n            color(buttonColor) {\n                difference() {\n                    cylinder(h=3, d=4, $fn=20);\n                    translate([0,-2,0]) cube([6,4,6], center=true);\n                }\n            }\n            translate([1.5,0,1.5]) color(accentColor) sphere(d=1.8, $fn=12);\n        }\n    }\n\n    button(12, 8.5);\n    button(0, 8.5);\n    button(-12, 8.5);\n\n    // Microphone pinhole\n    translate([24.8, 17, 8]) rotate([90,0,0]) cylinder(h=1.5, d=1.2, $fn=8);\n\n    // Charging contacts\n    translate([-24.5, -5, 1]) color([0.8,0.8,0.8]) cube([1.5,3,1]);\n    translate([-24.5,  5, 1]) color([0.8,0.8,0.8]) cube([1.5,3,1]);\n\n    // Vibration motor port (small grille)\n    for(i=[-1:1]) {\n        translate([-4+i*4, 19.5, 5]) rotate([90,0,0]) \n            color([0.1,0.1,0.1]) cylinder(h=1, d=0.8, $fn=6);\n    }\n}\n\n// Watch straps (quick-release spring-bar type)\nmodule strap(isTop=true) {\n    color(strapColor) {\n        // Spring-bar lug\n        translate([isTop?-27:27,0,6]) rotate([0,90,0]) {\n            difference() {\n                cylinder(h=22, d=3.2, $fn=20);\n                translate([0,0,-1]) cylinder(h=24, d=2.2, $fn=20);\n            }\n        }\n\n        // TPU strap body with buckle holes\n        translate([isTop?-35:35,0,6]) rotate([0,90,0]) {\n            hull() {\n                cylinder(h=5, d=3, $fn=8);\n                cylinder(h=70, d=3, $fn=8);\n            }\n        }\n\n        // Buckle holes pattern\n        for(i=[1:7]) {\n            translate([isTop?-45-i*8:45+i*8,0,6]) rotate([0,90,0]) \n                cylinder(h=6, d=2, $fn=10);\n        }\n\n        // Keeper loop\n        if(isTop) {\n            translate([-75,0,6]) rotate([0,90,0]) {\n                difference() {\n                    cylinder(h=10, d=6, $fn=20);\n                    cylinder(h=11, d=4, $fn=20);\n                }\n            }\n        }\n    }\n\n    // Metal buckle on bottom strap\n    if(!isTop) {\n        translate([75,0,6]) rotate([0,90,0]) color([0.5,0.5,0.5]) {\n            difference() {\n                cube([10,16,3], center=true);\n                cube([8,14,4], center=true);\n            }\n            translate([0,8,2]) rotate([90,0,0]) cylinder(h=3, d=3, $fn=12);\n        }\n    }\n}\n\n// Assemble the complete device\nwristTracker();\nstrap(true);\nstrap(false);",
    "renders": true
  },
  {
    "electronic_device": "rest",
    "openscad_code": "// Wireless Charging Rest for Smart-Watch\n// 3D-printable, no support, 5 V micro-USB powered\n\n// overall scale factor – makes the model ≈ 80 mm long\nscale_factor = 1.0;\n\n// wall thickness for printing\nwall = 2;\n\n// main body\nmodule body() {\n    color(\"silver\")\n    difference() {\n        // rounded base\n        minkowski() {\n            cube([70, 50, 12], center = true);\n            cylinder(r = 6, h = 0.1, $fn = 20);\n        }\n        // hollow inside\n        translate([0, 0, 1])\n        cube([70 - 2*wall, 50 - 2*wall, 14], center = true);\n    }\n}\n\n// watch support arm (angled)\nmodule arm() {\n    color(\"silver\")\n    translate([0, 0, 6])\n    rotate([0, 60, 0])\n    difference() {\n        cube([40, 8, 12], center = true);\n        translate([0, 0, wall])\n        cube([40 - 2*wall, 8 - 2*wall, 12 - wall], center = true);\n    }\n}\n\n// charging puck (Qi coil area)\nmodule puck() {\n    color(\"black\")\n    translate([0, 0, 6 + 40*sin(60) + 3])\n    rotate([0, 60, 0])\n    cylinder(h = 4, r = 22, $fn = 48);\n}\n\n// silicone watch band groove rings\nmodule band_grooves() {\n    for (i = [0, 1]) {\n        translate([0, 0, 6 + 40*sin(60) + 3 + (i ? 1.2 : -1.2)])\n        rotate([0, 60, 0])\n        color(\"dimgray\")\n        cylinder(h = 0.8, r1 = 24, r2 = 23.5, $fn = 48);\n    }\n}\n\n// micro-USB port on back\nmodule usb_port() {\n    color(\"black\")\n    translate([-35 + 1, 0, 0])\n    rotate([0, 90, 0])\n    cube([10, 7, 3], center = true);\n}\n\n// LED indicator\nmodule led() {\n    translate([30, 0, 10])\n    color(\"royalblue\")\n    sphere(r = 1.5, $fn = 16);\n}\n\n// tiny fake logo\nmodule logo() {\n    translate([0, 20, 12])\n    rotate([90, 0, 0])\n    linear_extrude(height = 0.4)\n    text(\"Qi\", size = 8, halign = \"center\");\n}\n\n// assembly\nscale(scale_factor)\nunion() {\n    body();\n    arm();\n    puck();\n    band_grooves();\n    usb_port();\n    led();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "bumper",
    "openscad_code": "// iPhone-style bumper case – realistic, medium complexity\n// Outer dimensions: ~70 mm x 145 mm x 9 mm\n// Inner cavity: ~65 mm x 140 mm x 8 mm\n// Wall thickness: 2.5 mm everywhere, 100 % printable without support\n\n$fn = 50;\n\nmodule bumper() {\n    // ---------- Main shell ----------\n    difference() {\n        // Outer rounded block\n        minkowski() {\n            cube([70, 145, 9], center = true);\n            sphere(d = 5);\n        }\n\n        // Hollow out interior\n        minkowski() {\n            cube([65, 140, 8], center = true);\n            sphere(d = 4);\n        }\n\n        // ---------- Port and button cut-outs ----------\n        // Lightning port\n        translate([0, -72.5, 0])\n            cube([12, 3, 4], center = true);\n\n        // Speaker grilles\n        for (x = [-11, -5.5, 0, 5.5, 11])\n            translate([x, -72.5, 0])\n                cube([1.5, 2, 3], center = true);\n\n        // Silent-switch slot\n        translate([-34, -72.5, 2])\n            cube([4, 2, 1.5], center = true);\n\n        // Volume buttons recess (left side)\n        for (y = [40, 52])\n            translate([-34, y, 0])\n                cube([2, 7, 3], center = true);\n\n        // Power button recess (right side)\n        translate([34, 60, 0])\n            cube([2, 7, 3], center = true);\n\n        // Camera island clearance (top)\n        translate([13, 67, 3])\n            cube([14, 8, 3], center = true);\n    }\n\n    // ---------- Camera island ring ----------\n    difference() {\n        color(\"black\")\n        translate([13, 67, 3.5])\n            cylinder(d1 = 14, d2 = 16, h = 1.5, center = true);\n        translate([13, 67, 3.5])\n            cylinder(d = 12, h = 2, center = true);\n    }\n\n    // ---------- Microscopic grip ridges on sides ----------\n    for (i = [-60:5:60])\n        translate([0, i, 0])\n            difference() {\n                cube([71, 0.5, 9.2], center = true);\n                translate([0, 0, 4.7])\n                    cube([65, 0.6, 8.2], center = true);\n            }\n\n    // ---------- Inside shock ribs ----------\n    rib_y = [-55, -27.5, 0, 27.5, 55];\n    for (y = rib_y)\n        color(\"gray\", 0.5)\n        translate([0, y, 0])\n            cube([65, 2, 8], center = true);\n\n    rib_x = [-30, -15, 0, 15, 30];\n    for (x = rib_x)\n        color(\"gray\", 0.5)\n        translate([x, 0, 0])\n            cube([2, 140, 8], center = true);\n}\n\nbumper();",
    "renders": true
  },
  {
    "electronic_device": "trigger",
    "openscad_code": "// Trigger electronic detonation device\n// Realistic styling, medium complexity\n\n$fa = 2;\n$fs = 0.5;\n\n// Main colors\ncolor_case = \"DimGray\";\ncolor_buttons = \"Black\";\ncolor_screen = \"DarkSlateGray\";\ncolor_led = \"Red\";\ncolor_antenna = \"Silver\";\n\n// Device dimensions\ndevice_length = 85;\ndevice_width = 45;\ndevice_height = 18;\nwall_thickness = 2;\n\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        translate([r, r, 0]) cylinder(h=h, r=r, $fn=20);\n        translate([l-r, r, 0]) cylinder(h=h, r=r, $fn=20);\n        translate([l-r, w-r, 0]) cylinder(h=h, r=r, $fn=20);\n        translate([r, w-r, 0]) cylinder(h=h, r=r, $fn=20);\n    }\n}\n\nmodule case() {\n    difference() {\n        // Outer shell\n        color(color_case) rounded_box(device_length, device_width, device_height, 5);\n        \n        // Inner cavity\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            rounded_box(device_length-2*wall_thickness, device_width-2*wall_thickness, device_height, 3);\n    }\n}\n\nmodule trigger_button() {\n    // Trigger button assembly\n    translate([device_length/2-10, device_width/2-10, device_height]) {\n        // Button housing\n        color(color_case) cylinder(h=4, r=8, $fn=20);\n        \n        // Actual button (red)\n        translate([0, 0, 2]) color(\"FireBrick\") \n            cylinder(h=3, r=6, $fn=20);\n    }\n}\n\nmodule lcd_screen() {\n    // Main display\n    translate([10, 5, device_height-0.1]) {\n        difference() {\n            color(color_screen) \n                cube([device_length-20, 15, 0.2]);\n            \n            // Screen pixels effect\n            for(i=[0:4]) {\n                for(j=[0:2]) {\n                    translate([i*3+2, j*3+2, 0.1])\n                        color(\"Black\") cube([2, 2, 0.1]);\n                }\n            }\n        }\n        \n        // Screen border\n        translate([-1, -1, -0.1])\n            color(color_case) cube([device_length-18, 17, 0.5]);\n    }\n}\n\nmodule status_leds() {\n    // Three status LEDs\n    positions = [[device_length-15, 25], [device_length-15, 20], [device_length-15, 15]];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], device_height-0.1]) {\n            color(\"DarkRed\") cylinder(h=0.3, r=2, $fn=16);\n            translate([0, 0, 0.2]) color(color_led) \n                sphere(r=1.5, $fn=16);\n        }\n    }\n}\n\nmodule keypad() {\n    // Numeric keypad\n    translate([5, 25, device_height-0.1]) {\n        // Keypad base\n        color(color_case) cube([25, 15, 1]);\n        \n        // Buttons (3x3 grid)\n        for(row=[0:2]) {\n            for(col=[0:2]) {\n                translate([col*8+2, row*4+2, 1]) {\n                    color(color_buttons) cylinder(h=0.8, r=3, $fn=20);\n                    translate([0, 0, 0.9]) color(\"White\") \n                        text(str(row*3+col+1), size=2, h=0.1);\n                }\n            }\n        }\n    }\n}\n\nmodule antenna() {\n    // Retractable antenna\n    translate([device_length, device_width/2, device_height/2]) {\n        rotate([90, 0, 0]) {\n            // Antenna base\n            color(color_case) cylinder(h=8, r=3, $fn=16);\n            \n            // Antenna segments\n            for(i=[0:3]) {\n                color(color_antenna) \n                    translate([0, 0, 8+i*5]) \n                        cylinder(h=4, r=2-i*0.3, $fn=16);\n            }\n        }\n    }\n}\n\nmodule power_port() {\n    // Power/charging port\n    translate([10, device_width, device_height/2]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                color(color_case) cylinder(h=5, r=3, $fn=16);\n                cylinder(h=6, r=1.5, $fn=16);\n            }\n            \n            // Port indicator\n            translate([2, 0, 0]) rotate([0, 0, 90])\n                text(\"PWR\", size=2, h=0.1);\n        }\n    }\n}\n\nmodule arming_switch() {\n    // Safety arming switch\n    translate([device_length-20, 5, device_height-0.1]) {\n        // Switch housing\n        color(color_case) cube([15, 8, 2]);\n        \n        // Switch lever\n        translate([3, 4, 2]) rotate([0, 0, 45])\n            color(\"Red\") cube([9, 2, 1]);\n    }\n}\n\n// Assemble the device\ncase();\ntrigger_button();\nlcd_screen();\nstatus_leds();\nkeypad();\nantenna();\npower_port();\narming_switch();",
    "renders": true
  },
  {
    "electronic_device": "keycap",
    "openscad_code": "// Keycap Electronic Device - Realistic Style, Medium Complexity\n// A Cherry-MX compatible keycap with embedded OLED display and touch sensor\n\n$fs = 0.2;\n$fa = 1;\n\n// Keycap dimensions (Cherry MX compatible)\nkey_width = 18;\nkey_height = 18;\nkey_top_width = 15.5;\nkey_top_height = 15.5;\nkey_depth = 11.5;\nstem_diameter = 5.5;\nstem_height = 4.5;\nstem_inner_diameter = 3.2;\nwall_thickness = 1.2;\n\n// Display dimensions\ndisplay_width = 12;\ndisplay_height = 8;\ndisplay_depth = 1.5;\ndisplay_offset = 2.5;\n\n// Touch sensor dimensions\nsensor_width = 3;\nsensor_height = 3;\nsensor_depth = 0.5;\n\n// LED indicator dimensions\nled_diameter = 1.5;\nled_height = 0.5;\n\n// USB-C port dimensions\nusb_width = 8.4;\nusb_height = 2.6;\nusb_depth = 3;\n\nmodule keycap_base() {\n    // Main keycap body with tapered sides\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, key_depth]) cube([key_top_width, key_top_height, 0.1], center=true);\n            translate([0, 0, 0]) cube([key_width, key_height, 0.1], center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness/2]) cube([key_width-wall_thickness*2, key_height-wall_thickness*2, key_depth+wall_thickness], center=true);\n        \n        // Stem socket\n        translate([0, 0, -stem_height/2]) cylinder(h=stem_height+1, d=stem_diameter+1, center=true);\n        translate([0, 0, -stem_height/2]) cylinder(h=stem_height+1, d=stem_inner_diameter, center=true);\n        \n        // Cross mount\n        for (i = [-1, 1]) {\n            translate([i * 2.5, 0, -stem_height/2]) cube([1, 4.5, stem_height+1], center=true);\n            translate([0, i * 2.5, -stem_height/2]) cube([4.5, 1, stem_height+1], center=true);\n        }\n    }\n}\n\nmodule display_cutout() {\n    // Cutout for OLED display\n    translate([0, display_offset, key_depth-display_depth])\n        cube([display_width, display_height, display_depth+1], center=true);\n}\n\nmodule display() {\n    // OLED display module\n    color([0.1, 0.1, 0.1]) \n        translate([0, display_offset, key_depth-display_depth/2])\n            cube([display_width*0.95, display_height*0.9, display_depth], center=true);\n    \n    // Display screen\n    color([0.05, 0.05, 0.05])\n        translate([0, display_offset, key_depth-display_depth/2+display_depth/2+0.1])\n            cube([display_width*0.85, display_height*0.8, 0.1], center=true);\n}\n\nmodule touch_sensor() {\n    // Capacitive touch sensor pad\n    color([0.3, 0.3, 0.3])\n        translate([key_top_width/2 - sensor_width/2 - 1, display_offset + display_height/2 + sensor_height/2 + 1, key_depth-sensor_depth/2])\n            cube([sensor_width, sensor_height, sensor_depth], center=true);\n}\n\nmodule led_indicator() {\n    // Status LED\n    color([0.2, 0.5, 1])\n        translate([0, -display_offset, key_depth-led_height/2])\n            cylinder(h=led_height, d=led_diameter, center=true);\n}\n\nmodule usb_c_port() {\n    // USB-C charging port on the side\n    color([0.15, 0.15, 0.15])\n        translate([key_width/2 + 0.1, 0, key_depth/2])\n            rotate([0, 90, 0])\n                difference() {\n                    cube([usb_depth+1, usb_width, usb_height], center=true);\n                    translate([usb_depth/2+0.5, 0, 0])\n                        cube([usb_depth+2, usb_width*0.8, usb_height*0.8], center=true);\n                }\n}\n\nmodule pcb_mounting_posts() {\n    // PCB mounting posts\n    for (x = [-display_width/3, display_width/3]) {\n        for (y = [-display_height/3, display_height/3]) {\n            color([0.8, 0.8, 0.8])\n                translate([x, y+display_offset, key_depth-display_depth-1])\n                    cylinder(h=2, d=1.5, center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Keycap body\n    color([0.2, 0.2, 0.2]) keycap_base();\n    \n    // Electronic components\n    display();\n    touch_sensor();\n    led_indicator();\n    pcb_mounting_posts();\n    \n    // USB-C port\n    usb_c_port();\n    \n    // Additional detailing\n    // Small ventilation holes\n    for (x = [-4, 0, 4]) {\n        for (y = [-2, 2]) {\n            if (abs(x) + abs(y) > 3) {\n                translate([x, y+display_offset-2, key_depth-1])\n                    rotate([0, 0, 45])\n                        cube([0.8, 0.8, 3], center=true);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "optical",
    "openscad_code": "// Optical Electronic Device - USB Spectrometer\n// A compact, 3D-printable USB spectrometer body with optical path\n// Overall dimensions: 80 x 60 x 25 mm\n\n// Color definitions\n$fn = 50;\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Outer shell\n        color([0.9, 0.9, 0.9])\n        translate([0, 0, 12.5])\n            cube([80, 60, 25], center=true);\n        \n        // USB port cutout\n        color([0.2, 0.2, 0.2])\n        translate([-40.1, 0, 12.5])\n            cube([10, 12, 8], center=true);\n        \n        // Optical input port\n        color([0.2, 0.2, 0.2])\n        translate([40.1, 0, 17.5])\n            rotate([0, 90, 0])\n                cylinder(h=5, r=5, center=true);\n    }\n}\n\n// Optical bench inside\nmodule optical_bench() {\n    color([0.3, 0.3, 0.3])\n    translate([0, 0, 5])\n        cube([70, 40, 2], center=true);\n}\n\n// Diffraction grating mount\nmodule grating_mount() {\n    difference() {\n        color([0.5, 0.5, 0.5])\n        translate([10, 0, 6])\n            cube([10, 20, 2], center=true);\n        \n        // Grating holder slot\n        color([0.1, 0.1, 0.1])\n        translate([10, 0, 7.1])\n            cube([8, 18, 0.5], center=true);\n    }\n}\n\n// CCD sensor housing\nmodule ccd_housing() {\n    difference() {\n        color([0.7, 0.7, 0.7])\n        translate([-20, 0, 6])\n            cube([15, 30, 3], center=true);\n        \n        // Sensor window\n        color([0, 0, 0.8])\n        translate([-20, 0, 7.6])\n            cube([10, 20, 0.2], center=true);\n    }\n}\n\n// Slit assembly\nmodule slit_assembly() {\n    difference() {\n        color([0.4, 0.4, 0.4])\n        translate([30, 0, 6])\n            cube([5, 15, 4], center=true);\n        \n        // Slit aperture\n        color([0, 0, 0])\n        translate([32.6, 0, 6])\n            cube([0.1, 0.2, 3], center=true);\n    }\n}\n\n// LED indicators\nmodule status_leds() {\n    // Power LED\n    color([0, 1, 0])\n    translate([-10, -25, 25.1])\n        cylinder(h=1, r=1.5);\n    \n    // Activity LED\n    color([0, 0, 1])\n    translate([10, -25, 25.1])\n        cylinder(h=1, r=1.5);\n}\n\n// Cooling fins\nmodule cooling_fins() {\n    for(i = [-2:2]) {\n        color([0.6, 0.6, 0.6])\n        translate([i*8, 0, 25])\n            cube([2, 40, 5], center=true);\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    for(pos = [[-30, -20], [30, -20], [-30, 20], [30, 20]]) {\n        color([0, 0, 0])\n        translate([pos[0], pos[1], 0])\n            cylinder(h=26, r=2, center=false);\n    }\n}\n\n// Assembly\nmain_body();\noptical_bench();\ngrating_mount();\nccd_housing();\nslit_assembly();\nstatus_leds();\ncooling_fins();\nmounting_holes();",
    "renders": true
  },
  {
    "electronic_device": "laser",
    "openscad_code": "// Laser pointer with realistic styling - 3D printable\n// Features: aluminum body, rubber grip, click button, laser aperture, keychain loop\n// Dimensions: 90mm length, 14mm diameter\n\nmodule laser_body() {\n    // Main aluminum tube body\n    color(\"silver\") \n    difference() {\n        cylinder(h=80, d=14, $fn=64);\n        translate([0, 0, -1]) cylinder(h=82, d=12, $fn=64); // Hollow center\n    }\n}\n\nmodule rubber_grip() {\n    // Textured rubber grip section\n    color(\"dimgray\")\n    translate([0, 0, 25])\n    difference() {\n        cylinder(h=30, d=16, $fn=64);\n        // Grip texture grooves\n        for(i = [0:5:25]) {\n            translate([0, 0, i]) \n            cylinder(h=1.5, d=14, $fn=64);\n        }\n    }\n}\n\nmodule click_button() {\n    // Power button on top\n    color(\"firebrick\")\n    translate([5.5, 0, 55])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=4, d=6, $fn=32);\n        translate([0, 0, -0.5]) cylinder(h=5, d=4, $fn=32);\n    }\n}\n\nmodule laser_aperture() {\n    // Front laser lens housing\n    color(\"gray20\") \n    translate([0, 0, 80])\n    difference() {\n        cylinder(h=8, d=10, $fn=64);\n        translate([0, 0, -1]) cylinder(h=10, d=8, $fn=64);\n        \n        // Small aperture hole\n        translate([0, 0, 4]) cylinder(h=5, d=1.5, $fn=32);\n    }\n    \n    // Lens reflection ring\n    color(\"skyblue\", 0.3)\n    translate([0, 0, 83])\n    cylinder(h=0.5, d=7.5, $fn=64);\n}\n\nmodule keychain_loop() {\n    // Attachment loop at rear\n    color(\"silver\")\n    translate([0, 7, -2])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=4, d=3, $fn=32);\n        translate([0, 0, -0.5]) cylinder(h=5, d=1.5, $fn=32);\n    }\n    \n    // Loop ring\n    rotate([0, 90, 0])\n    torus(2, 1, $fn=32);\n}\n\nmodule torus(outer, inner, fn) {\n    rotate_extrude($fn=fn)\n    translate([outer, 0, 0])\n    circle(r=inner, $fn=fn);\n}\n\nmodule warning_label() {\n    // Caution label stripe\n    color(\"red\")\n    translate([0, -7.5, 70])\n    rotate([90, 0, 0])\n    linear_extrude(height=0.2)\n    text(\"LASER\", size=3, halign=\"center\");\n}\n\n// Assembly\nunion() {\n    laser_body();\n    rubber_grip();\n    click_button();\n    laser_aperture();\n    keychain_loop();\n    warning_label();\n}",
    "renders": true
  },
  {
    "electronic_device": "mic",
    "openscad_code": "// Realistic Medium-Complexity USB Podcast Microphone\n// Approx. 90 mm tall, 3D-printable, recognizable mic design\n\n// Color definitions\n$fn = 64;\n\n// Main assembly\nmodule mic_assembly() {\n    // Microphone head\n    translate([0,0,65]) mic_head();\n\n    // Shock mount cage\n    translate([0,0,45]) shock_mount();\n\n    // Body tube\n    translate([0,0,25]) body_tube();\n\n    // Base/stand adapter\n    translate([0,0,0]) base_adapter();\n}\n\n// Microphone head (grille + capsule)\nmodule mic_head() {\n    // Outer metal grille\n    color([0.7,0.7,0.7]) \n    rotate([0,90,0])\n    linear_extrude(height=25, twist=180, $fn=64)\n    circle(d=50);\n\n    // Inner foam\n    color([0.2,0.2,0.2]) \n    translate([0,0,-2])\n    sphere(d=46);\n\n    // Top cap\n    color([0.3,0.3,0.3]) \n    translate([0,0,12.5])\n    cylinder(d=50, h=5);\n}\n\n// Shock mount cage\nmodule shock_mount() {\n    // Elastic bands pattern\n    for (i=[0:8]) {\n        rotate([0,0,i*45])\n        color([0.1,0.1,0.1])\n        translate([0,0,-5])\n        cylinder(d=2, h=20);\n    }\n\n    // Mount rings\n    color([0.4,0.4,0.4])\n    difference() {\n        cylinder(d=60, h=10, center=true);\n        cylinder(d=54, h=12, center=true);\n    }\n}\n\n// Main body with controls\nmodule body_tube() {\n    // Main tube\n    color([0.25,0.25,0.25])\n    cylinder(d=35, h=30);\n\n    // Front panel\n    color([0.1,0.1,0.1])\n    translate([17.5,0,0])\n    rotate([0,90,0])\n    cube([30,20,2], center=true);\n\n    // Gain knob\n    color([0.8,0.8,0.8])\n    translate([18.5,0,20])\n    cylinder(d=8, h=3);\n\n    // Mute button\n    color([0.9,0.2,0.2])\n    translate([18.5,-8,15])\n    cube([6,6,2]);\n\n    // LED indicator ring\n    color([0,1,0])\n    translate([0,0,28])\n    cylinder(d1=35, d2=30, h=2);\n\n    // USB-C port\n    color([0.1,0.1,0.1])\n    translate([0,-17.5,10])\n    rotate([90,0,0])\n    cube([8,3,6]);\n}\n\n// Base adapter with thread\nmodule base_adapter() {\n    // Main base\n    color([0.3,0.3,0.3])\n    difference() {\n        cylinder(d=45, h=15);\n        cylinder(d=25, h=16); // Hollow for cable\n    }\n\n    // Thread adapter (5/8\" standard)\n    color([0.5,0.5,0.5])\n    translate([0,0,-5])\n    cylinder(d1=16, d2=15, h=10, $fn=20);\n\n    // Cable exit slot\n    color([0.1,0.1,0.1])\n    translate([15,0,7.5])\n    rotate([0,90,0])\n    cube([30,8,8]);\n}\n\n// Render the model\nmic_assembly();",
    "renders": true
  },
  {
    "electronic_device": "amp",
    "openscad_code": "// Guitar Amplifier - Realistic style, medium complexity\n// Size: 80mm x 45mm x 75mm (3D printable)\n\n// Main amplifier body\nmodule amp_body() {\n    color([0.2, 0.2, 0.2]) difference() {\n        // Main housing\n        cube([80, 45, 75], center=true);\n        \n        // Front face indentation\n        translate([0, 22.5, 0])\n            cube([76, 2, 71], center=true);\n    }\n}\n\n// Front control panel\nmodule control_panel() {\n    color([0.8, 0.8, 0.8]) translate([0, 23, 0]) difference() {\n        cube([76, 1, 71], center=true);\n        \n        // Speaker grill holes\n        for(x = [-30:10:30])\n            for(y = [-30:10:30])\n                translate([x, 0, y])\n                    cylinder(h=2, r=2.5, center=true);\n    }\n}\n\n// Speaker cone\nmodule speaker() {\n    color([0.1, 0.1, 0.1]) translate([0, 24, 0]) difference() {\n        cylinder(h=5, r=25, center=true);\n        \n        // Speaker cone shape\n        translate([0, 0, 2.5])\n            cylinder(h=10, r1=20, r2=15, center=true);\n            \n        // Center dome\n        translate([0, 0, 2.5])\n            sphere(r=8);\n    }\n}\n\n// Control knobs\nmodule control_knobs() {\n    color([0.9, 0.9, 0.9]) {\n        // Volume knob\n        translate([-20, 24, 20])\n            rotate([90, 0, 0])\n                cylinder(h=5, r=4, center=true);\n                \n        // Gain knob\n        translate([-10, 24, 20])\n            rotate([90, 0, 0])\n                cylinder(h=5, r=4, center=true);\n                \n        // Tone knob\n        translate([0, 24, 20])\n            rotate([90, 0, 0])\n                cylinder(h=5, r=4, center=true);\n                \n        // Master volume\n        translate([20, 24, 20])\n            rotate([90, 0, 0])\n                cylinder(h=5, r=5, center=true);\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    color([1, 0, 0]) translate([25, 24, 20])\n        sphere(r=2);\n}\n\n// Input jack\nmodule input_jack() {\n    color([0.9, 0.9, 0.9]) {\n        translate([-30, 24, -20])\n            cylinder(h=10, r=5, center=true);\n        translate([-30, 24, -20])\n            cylinder(h=5, r=3, center=true);\n    }\n}\n\n// Power switch\nmodule power_switch() {\n    color([0.9, 0.9, 0.9]) translate([30, 24, -20])\n        cube([8, 2, 4], center=true);\n}\n\n// Corner protectors\nmodule corner_protectors() {\n    color([0.9, 0.9, 0.9]) {\n        // Front corners\n        translate([-38, 22.5, 35])\n            rotate([0, 90, 0])\n                cylinder(h=5, r=3, center=true);\n        translate([38, 22.5, 35])\n            rotate([0, 90, 0])\n                cylinder(h=5, r=3, center=true);\n        translate([-38, 22.5, -35])\n            rotate([0, 90, 0])\n                cylinder(h=5, r=3, center=true);\n        translate([38, 22.5, -35])\n            rotate([0, 90, 0])\n                cylinder(h=5, r=3, center=true);\n    }\n}\n\n// Handle\nmodule handle() {\n    color([0.3, 0.3, 0.3]) {\n        // Handle supports\n        translate([-25, 0, 40])\n            rotate([0, 90, 0])\n                cylinder(h=5, r=3, center=true);\n        translate([25, 0, 40])\n            rotate([0, 90, 0])\n                cylinder(h=5, r=3, center=true);\n        \n        // Handle bar\n        translate([0, 0, 50])\n            rotate([90, 0, 0])\n                cylinder(h=50, r=2, center=true);\n    }\n}\n\n// Feet\nmodule feet() {\n    color([0.8, 0.8, 0.8]) {\n        translate([-30, -22.5, -37])\n            rotate([0, 90, 0])\n                cylinder(h=5, r=2, center=true);\n        translate([30, -22.5, -37])\n            rotate([0, 90, 0])\n                cylinder(h=5, r=2, center=true);\n        translate([-30, -22.5, 37])\n            rotate([0, 90, 0])\n                cylinder(h=5, r=2, center=true);\n        translate([30, -22.5, 37])\n            rotate([0, 90, 0])\n                cylinder(h=5, r=2, center=true);\n    }\n}\n\n// Assemble the amplifier\nunion() {\n    amp_body();\n    control_panel();\n    speaker();\n    control_knobs();\n    led_indicator();\n    input_jack();\n    power_switch();\n    corner_protectors();\n    handle();\n    feet();\n}",
    "renders": true
  },
  {
    "electronic_device": "streamcam",
    "openscad_code": "// StreamCam - Realistic Medium Complexity\n// Features: rotating lens, status LED, USB-C port, mounting clip\n\n$fn=60;\n\n// Main dimensions\nbody_width = 45;\nbody_height = 35;\nbody_depth = 70;\nlens_diameter = 24;\nlens_protrusion = 8;\nmount_clip_height = 40;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_lens = [0.1, 0.1, 0.1];\ncolor_ring = [0.8, 0.8, 0.8];\ncolor_led = [0, 1, 0];\ncolor_usb = [0.4, 0.4, 0.4];\n\nmodule streamcam_body() {\n    color(color_body)\n    difference() {\n        // Main body\n        cube([body_width, body_depth, body_height], center=true);\n        \n        // Front face chamfer\n        translate([0, body_depth/2-5, 0])\n            rotate([90,0,0])\n                cylinder(h=body_width, d1=body_height, d2=body_height-4, center=true);\n        \n        // Back face chamfer\n        translate([0, -body_depth/2+5, 0])\n            rotate([-90,0,0])\n                cylinder(h=body_width, d1=body_height, d2=body_height-4, center=true);\n    }\n    \n    // Side grip lines\n    for(i = [-1, 1]) {\n        translate([i*body_width/2+0.1, 0, 0])\n            color([0.15, 0.15, 0.15])\n            for(y = [-20:10:20]) {\n                translate([0, y, 0])\n                    cube([0.5, 8, body_height-4], center=true);\n            }\n    }\n}\n\nmodule lens_assembly() {\n    // Lens housing\n    translate([0, body_depth/2-lens_protrusion/2, 0])\n    rotate([0, 90, 0])\n    difference() {\n        // Outer cylinder\n        color(color_body)\n        cylinder(h=lens_protrusion+2, d=lens_diameter+8, center=true);\n        \n        // Lens opening\n        color(color_lens)\n        cylinder(h=lens_protrusion+6, d=lens_diameter, center=true);\n    }\n    \n    // Focus ring\n    translate([0, body_depth/2+2, 0])\n    rotate([0, 90, 0])\n    color(color_ring)\n    cylinder(h=3, d=lens_diameter+12, center=true);\n    \n    // Lens glass\n    translate([0, body_depth/2+2, 0])\n    rotate([0, 90, 0])\n    color([0.05, 0.05, 0.05, 0.7])\n    cylinder(h=1, d=lens_diameter-2, center=true);\n}\n\nmodule status_indicators() {\n    // Status LED\n    translate([body_width/2-3, body_depth/2-5, 5])\n        color(color_led)\n        sphere(d=2);\n    \n    // Logo area\n    translate([0, -body_depth/2+8, body_height/2-1])\n        color([0.3, 0.3, 0.3])\n        cube([15, 6, 0.5], center=true);\n}\n\nmodule usb_c_port() {\n    // USB-C port on back\n    translate([0, -body_depth/2, 0])\n    color(color_usb)\n    difference() {\n        cube([10, 5, 4], center=true);\n        translate([0, 2.6, 0])\n            cube([8, 2, 2.5], center=true);\n    }\n}\n\nmodule mounting_clip() {\n    // Hinge base\n    translate([0, 0, -body_height/2-5])\n    color(color_body)\n    cube([body_width-10, 10, 10], center=true);\n    \n    // Clip arms\n    for(x = [-body_width/4, body_width/4]) {\n        translate([x, 5, -body_height/2-mount_clip_height/2-5])\n        color(color_body)\n        difference() {\n            cube([8, 10, mount_clip_height], center=true);\n            translate([0, 5, 0])\n                cube([6, 12, mount_clip_height-4], center=true);\n        }\n    }\n    \n    // Clip spring detail\n    translate([0, 5, -body_height/2-5-mount_clip_height/2])\n        color(color_ring)\n        cylinder(h=2, d=3, center=true);\n}\n\n// Main assembly\nstreamcam_body();\nlens_assembly();\nstatus_indicators();\nusb_c_port();\nmounting_clip();",
    "renders": true
  },
  {
    "electronic_device": "vr",
    "openscad_code": "// VR Headset - Realistic Style, Medium Complexity\n// Designed for 3D printing (100mm width)\n\n// Colors\n$fn = 50;\n\n// Main headset body module\nmodule headset_body() {\n    color(\"black\")\n    difference() {\n        // Main curved body\n        union() {\n            translate([0, 0, 10])\n                scale([1, 0.8, 0.6])\n                sphere(d=90);\n            \n            // Flat front face\n            translate([0, 0, -20])\n                cube([80, 60, 40], center=true);\n        }\n        \n        // Eye cutouts\n        translate([-25, 0, 5])\n            rotate([0, 30, 0])\n            cube([30, 40, 30]);\n        translate([25, 0, 5])\n            rotate([0, -30, 0])\n            cube([30, 40, 30]);\n            \n        // Nose gap\n        translate([0, -30, 0])\n            rotate([0, 0, 0])\n            cube([30, 30, 40], center=true);\n    }\n}\n\n// Front sensor array\nmodule sensors() {\n    // Main sensor block\n    color([0.2, 0.2, 0.2])\n    translate([0, 20, -15])\n        cube([60, 5, 20], center=true);\n    \n    // Individual sensors\n    for(x = [-20, -10, 0, 10, 20]) {\n        color(\"darkblue\")\n        translate([x, 17.5, -15])\n            cylinder(d=4, h=3);\n    }\n}\n\n// Side straps connection points\nmodule strap_mounts() {\n    // Left side\n    color(\"black\")\n    translate([-45, 0, 10])\n        rotate([90, 0, 0])\n        cylinder(d=15, h=5);\n    \n    // Right side\n    translate([45, 0, 10])\n        rotate([90, 0, 0])\n        cylinder(d=15, h=5);\n    \n    // Top mount\n    translate([0, 30, 30])\n        rotate([0, 90, 0])\n        cylinder(d=15, h=5);\n}\n\n// Face padding\nmodule face_padding() {\n    color(\"darkgray\")\n    difference() {\n        translate([0, 0, 15])\n            scale([1, 0.8, 0.3])\n            sphere(d=85);\n        \n        // Inner cutout\n        translate([0, 0, 10])\n            scale([0.8, 0.6, 0.5])\n            sphere(d=85);\n    }\n}\n\n// Control buttons\nmodule controls() {\n    // Power button\n    color(\"red\")\n    translate([40, 25, 0])\n        cylinder(d=8, h=3);\n    \n    // Volume buttons\n    color(\"white\")\n    translate([40, 15, 5])\n        cube([10, 5, 3]);\n    translate([40, 10, 5])\n        cube([10, 5, 3]);\n    \n    // IPD adjustment\n    color(\"gray\")\n    translate([0, -35, 0])\n        cube([20, 5, 5], center=true);\n}\n\n// Lenses\nmodule lenses() {\n    color([0.1, 0.1, 0.3, 0.8])\n    // Left lens\n    translate([-25, 0, 5])\n        rotate([0, 30, 0])\n        cylinder(d=25, h=5);\n    \n    // Right lens\n    translate([25, 0, 5])\n        rotate([0, -30, 0])\n        cylinder(d=25, h=5);\n}\n\n// USB-C port\nmodule usb_port() {\n    color(\"silver\")\n    translate([0, -35, -10])\n        cube([12, 8, 4], center=true);\n}\n\n// Cooling vents\nmodule cooling_vents() {\n    color(\"black\")\n    for(i = [-2:2]) {\n        translate([i * 15, 20, 10])\n            cube([8, 2, 30]);\n    }\n}\n\n// Logo\nmodule logo() {\n    color(\"white\")\n    translate([0, 30, -18])\n        rotate([90, 0, 0])\n        linear_extrude(height=1)\n            text(\"VR\", size=8, halign=\"center\");\n}\n\n// Assembly\nunion() {\n    headset_body();\n    sensors();\n    strap_mounts();\n    face_padding();\n    controls();\n    lenses();\n    usb_port();\n    cooling_vents();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "ar",
    "openscad_code": "// AR Headset - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Main colors\n$fa = 2;\n$fs = 0.5;\n\nmodule headset_body() {\n    color(\"white\")\n    difference() {\n        // Main body shell\n        hull() {\n            translate([-25, -15, 0])\n                cube([50, 30, 20]);\n            translate([-30, -20, 20])\n                cube([60, 40, 15]);\n        }\n        \n        // Eye cutouts\n        for(x = [-12, 12])\n            translate([x, 0, 10])\n                rotate([0, 90, 0])\n                    cylinder(h=30, r=8, $fn=32);\n        \n        // Nose relief\n        translate([0, -20, 8])\n            cube([20, 10, 12], center=true);\n    }\n}\n\nmodule lenses() {\n    // AR lenses\n    for(x = [-12, 12]) {\n        color([0.2, 0.3, 0.5, 0.8])\n        translate([x, 0, 10])\n            rotate([0, 90, 0])\n                cylinder(h=2, r=7.5, $fn=32);\n    }\n}\n\nmodule forehead_pad() {\n    // Cushioned forehead support\n    color(\"black\")\n    translate([0, 12, 25])\n        cube([40, 8, 5], center=true);\n}\n\nmodule head_strap() {\n    // Adjustable head strap\n    color(\"black\")\n    translate([0, 0, 35])\n        rotate([90, 0, 0])\n            cylinder(h=50, r=3, center=true);\n    \n    color(\"black\")\n    translate([0, 0, 35])\n        rotate([90, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=50, r=3, center=true);\n}\n\nmodule side_modules() {\n    // Left module - power button\n    color(\"darkgray\")\n    translate([-35, 0, 15])\n        cube([10, 15, 8]);\n    \n    color(\"red\")\n    translate([-32, 5, 19])\n        sphere(r=1.5);\n    \n    // Right module - adjustment dial\n    color(\"darkgray\")\n    translate([35, 0, 15])\n        cube([10, 15, 8]);\n    \n    color(\"silver\")\n    for(i = [0:11])\n        rotate([0, 0, i*30])\n            translate([40, 0, 19])\n                cube([3, 0.5, 1], center=true);\n}\n\nmodule front_camera() {\n    // Depth sensor array\n    color(\"black\")\n    translate([0, -25, 20])\n        cube([25, 3, 3], center=true);\n    \n    for(x = [-8, 0, 8])\n        color(\"black\")\n        translate([x, -25, 21.5])\n            sphere(r=1);\n}\n\nmodule cooling_vents() {\n    // Ventilation slots\n    for(i = [0:4]) {\n        color(\"white\")\n        translate([-20 + i*10, 0, 30])\n            cube([8, 30, 2]);\n    }\n}\n\n// Assembly\nheadset_body();\nlenses();\nforehead_pad();\nhead_strap();\nside_modules();\nfront_camera();\ncooling_vents();",
    "renders": true
  },
  {
    "electronic_device": "xr",
    "openscad_code": "// XR Headset - Realistic Style - Medium Complexity\n\n// Main colors\ncolor_headset = [0.1, 0.1, 0.1];\ncolor_lenses = [0.2, 0.2, 0.3];\ncolor_strap = [0.3, 0.3, 0.3];\ncolor_light = [0.8, 0.8, 0.8];\n\n// Overall dimensions\nheadset_width = 160;\nheadset_height = 90;\nheadset_depth = 100;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule front_shell() {\n    difference() {\n        // Main front housing\n        color(color_headset)\n        translate([0, 0, 0])\n        cube([headset_width, headset_height, headset_depth], center=true);\n        \n        // Face relief cutout\n        translate([0, 0, headset_depth/2 - 5])\n        cube([headset_width - 20, headset_height - 30, 30], center=true);\n        \n        // Lens openings\n        for(x = [-30, 30]) {\n            translate([x, 0, headset_depth/2 - 10])\n            cylinder(h=20, d=50);\n        }\n    }\n}\n\nmodule lenses() {\n    // Left lens\n    color(color_lenses)\n    translate([-30, 0, headset_depth/2 - 5])\n    cylinder(h=5, d=48);\n    \n    // Right lens\n    color(color_lenses)\n    translate([30, 0, headset_depth/2 - 5])\n    cylinder(h=5, d=48);\n}\n\nmodule top_strap_mounts() {\n    for(x = [-headset_width/2 + 10, headset_width/2 - 10]) {\n        color(color_headset)\n        translate([x, 0, headset_height/2])\n        cube([10, 5, 8], center=true);\n    }\n}\n\nmodule side_strap_mounts() {\n    for(y = [-headset_height/2 + 20, headset_height/2 - 20]) {\n        color(color_headset)\n        translate([headset_width/2, y, 0])\n        cube([5, 10, 8], center=true);\n    }\n}\n\nmodule sensors() {\n    // Front sensors array\n    for(x = [-60:30:60]) {\n        for(z = [-20:20:20]) {\n            color([0.05, 0.05, 0.05])\n            translate([x, headset_height/2 - 5, z])\n            sphere(d=4);\n        }\n    }\n}\n\nmodule adjustment_dial() {\n    color(color_headset)\n    translate([headset_width/2 + 5, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h=10, d=20);\n    \n    color([0.4, 0.4, 0.4])\n    translate([headset_width/2 + 10, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h=2, d=15);\n}\n\nmodule cooling_vents() {\n    // Top vents\n    for(x = [-40:10:40]) {\n        color([0.05, 0.05, 0.05])\n        translate([x, headset_height/2 - 1, 0])\n        cube([8, 2, 4]);\n    }\n}\n\nmodule usb_port() {\n    color([0.2, 0.2, 0.2])\n    translate([headset_width/2 - 5, -headset_height/2 + 15, 0])\n    cube([8, 10, 6]);\n    \n    color([0, 0, 0])\n    translate([headset_width/2 - 5, -headset_height/2 + 15, 0])\n    cube([6, 8, 4]);\n}\n\nmodule power_button() {\n    color([0.8, 0.8, 0.8])\n    translate([headset_width/2 - 5, headset_height/2 - 15, 0])\n    cube([8, 8, 4]);\n    \n    color([0.2, 0.2, 0.2])\n    translate([headset_width/2 - 5, headset_height/2 - 15, 0])\n    cube([6, 6, 2]);\n}\n\nmodule status_led() {\n    color([0, 1, 0])\n    translate([headset_width/2 - 5, 0, headset_depth/2 - 1])\n    sphere(d=3);\n}\n\nmodule strap() {\n    color(color_strap)\n    // Top strap\n    translate([0, 0, headset_height/2 + 4])\n    cube([headset_width - 20, 5, 80]);\n    \n    // Side straps\n    for(x = [-headset_width/2 - 2, headset_width/2 + 2]) {\n        translate([x, 0, 0])\n        rotate([0, 90, 0])\n        cube([headset_height - 20, 5, 80]);\n    }\n}\n\n// Assembly\nunion() {\n    front_shell();\n    lenses();\n    top_strap_mounts();\n    side_strap_mounts();\n    sensors();\n    adjustment_dial();\n    cooling_vents();\n    usb_port();\n    power_button();\n    status_led();\n    strap();\n}",
    "renders": true
  },
  {
    "electronic_device": "mr",
    "openscad_code": "// Mixed-Reality headset – realistic, medium-complexity OpenSCAD model\n// 3D-printable, ~60 mm front-to-back, 50 mm tall\n// All overhangs ≤45°, wall thickness 1.5 mm\n\n$fa = 1; $fs = 0.5;\n\n// --------------------\n// Main assembly\n// --------------------\ncolor(\"DimGray\") headset();\n\nmodule headset() {\n    // Central visor shell\n    visor();\n    \n    // Left & right temples with hinges\n    temple(\"left\");\n    temple(\"right\");\n    \n    // Top strap bridge\n    strap_bridge();\n    \n    // Front sensor bar\n    sensor_bar();\n    \n    // Soft face-gasket ring\n    gasket();\n}\n\n// --------------------\n// Visor body\n// --------------------\nmodule visor() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, 15]) cube([60, 25, 25], center = true);\n            translate([0, 0, 15]) scale([0.9, 0.9, 1]) sphere(d = 30);\n        }\n        \n        // Internal cavity\n        translate([0, 0, 15]) cube([55, 20, 23], center = true);\n        \n        // Eye openings\n        for (x = [-14, 14])\n            translate([x, 0, 12]) rotate([0, 30, 0]) cylinder(h = 30, d = 18, $fn = 20);\n    }\n    \n    // Front screen glass\n    translate([0, 0, 27]) color(\"SkyBlue\", 0.4)\n        cube([58, 23, 1.5], center = true);\n    \n    // Ring of status LEDs\n    for (a = [0:30:330])\n        translate([0, 0, 28])\n            rotate([0, 0, a])\n            translate([22, 0, 0]) color(\"Red\") cylinder(h = 0.8, d = 2, $fn = 8);\n}\n\n// --------------------\n// Temple arms\n// --------------------\nmodule temple(side) {\n    angle = (side == \"left\") ? 90 : -90;\n    mirror([side == \"left\" ? 0 : 1, 0, 0]) {\n        // Hinge block\n        translate([30, 0, 15]) rotate([0, 0, angle])\n            cube([8, 6, 6], center = true);\n        \n        // Arm\n        translate([30, 0, 15]) rotate([0, 10, angle]) {\n            difference() {\n                hull() {\n                    translate([0, 0, 0]) cube([8, 6, 6], center = true);\n                    translate([25, 0, 0]) cube([6, 4, 4], center = true);\n                }\n                // Wire channel\n                translate([12.5, 0, 0]) cube([25, 3, 3], center = true);\n            }\n            \n            // Speaker grill holes\n            for (i = [5:5:20])\n                translate([i, 0, 2.5]) rotate([90, 0, 0])\n                    cylinder(h = 4, d = 1.2, $fn = 8);\n        }\n    }\n}\n\n// --------------------\n// Top strap bridge\n// --------------------\nmodule strap_bridge() {\n    color(\"Black\") {\n        hull() {\n            translate([-25, 0, 40]) sphere(d = 6);\n            translate([25, 0, 40]) sphere(d = 6);\n        }\n    }\n}\n\n// --------------------\n// Sensor bar\n// --------------------\nmodule sensor_bar() {\n    translate([0, 0, 40]) rotate([20, 0, 0])\n        difference() {\n            cube([40, 8, 4], center = true);\n            // Camera windows\n            for (x = [-12, 0, 12])\n                translate([x, 0, 2])\n                    cube([6, 6, 2], center = true);\n        }\n}\n\n// --------------------\n// Facial gasket\n// --------------------\nmodule gasket() {\n    color(\"DarkGray\", 0.6)\n        difference() {\n            translate([0, 0, 8]) rotate_extrude() {\n                translate([20, 0, 0]) circle(d = 5);\n                translate([25, 0, 0]) circle(d = 5);\n            }\n            // Eye cut-outs\n            for (x = [-14, 14])\n                translate([x, 0, 8]) rotate([0, 30, 0]) cylinder(h = 30, d = 20, $fn = 20);\n        }\n}",
    "renders": true
  },
  {
    "electronic_device": "ui",
    "openscad_code": "// Modern Smartphone UI Device - Realistic Style, Medium Complexity\n\n// Device dimensions (in mm)\nphone_width = 70;\nphone_height = 145;\nphone_thickness = 8;\nscreen_margin = 3;\nwall_thickness = 2;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_bevel = [0.3, 0.3, 0.3];\ncolor_button = [0.25, 0.25, 0.25];\ncolor_camera = [0.05, 0.05, 0.05];\ncolor_flash = [0.9, 0.9, 0.7];\n\n// Main phone body\nmodule phone_body() {\n    difference() {\n        // Main rounded body\n        color(color_body)\n        minkowski() {\n            cube([phone_width, phone_height, phone_thickness], center = true);\n            sphere(r = 5);\n        }\n        \n        // Screen cutout\n        color(color_screen)\n        translate([0, 0, phone_thickness/2 - 0.1])\n        cube([phone_width - screen_margin*2, phone_height - screen_margin*2, phone_thickness], center = true);\n    }\n}\n\n// Screen with display area\nmodule screen() {\n    color(color_screen)\n    translate([0, 0, phone_thickness/2 + 0.1])\n    cube([phone_width - screen_margin*2 - 2, phone_height - screen_margin*2 - 2, 0.2], center = true);\n}\n\n// Beveled edges\nmodule beveled_edges() {\n    color(color_bevel)\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([phone_width/2 - 5, phone_height/2 - 5, 0])\n        cylinder(h = phone_thickness + 2, r = 5, center = true);\n    }\n}\n\n// Side buttons\nmodule side_buttons() {\n    // Power button\n    color(color_button)\n    translate([phone_width/2 + 0.1, phone_height/4, 0])\n    cube([1, 10, 3], center = true);\n    \n    // Volume buttons\n    translate([phone_width/2 + 0.1, -phone_height/4, 2])\n    cube([1, 8, 2], center = true);\n    \n    translate([phone_width/2 + 0.1, -phone_height/4 - 10, 2])\n    cube([1, 8, 2], center = true);\n}\n\n// Camera module\nmodule camera_module() {\n    translate([0, phone_height/2 - 15, phone_thickness/2 + 0.1])\n    difference() {\n        // Camera bump\n        color(color_body)\n        cylinder(h = 2, r = 12, center = false);\n        \n        // Camera lens 1\n        color(color_camera)\n        translate([-5, 0, 1])\n        cylinder(h = 0.5, r = 4, center = false);\n        \n        // Camera lens 2\n        color(color_camera)\n        translate([5, 0, 1])\n        cylinder(h = 0.5, r = 4, center = false);\n        \n        // Flash\n        color(color_flash)\n        translate([0, -5, 1])\n        cylinder(h = 0.5, r = 2, center = false);\n    }\n}\n\n// Speaker grill\nmodule speaker_grill() {\n    color(color_body)\n    translate([0, -phone_height/2 + 5, phone_thickness/2 - 0.5])\n    for(i = [-3:3]) {\n        translate([i*4, 0, 0])\n        cube([1.5, 8, 1], center = true);\n    }\n}\n\n// Charging port\nmodule charging_port() {\n    color(color_body)\n    translate([0, -phone_height/2 - 0.1, -phone_thickness/4])\n    cube([10, 1, 3], center = true);\n}\n\n// Home button (if applicable)\nmodule home_button() {\n    color(color_button)\n    translate([0, phone_height/2 - 30, phone_thickness/2 + 0.2])\n    cylinder(h = 0.5, r = 4, center = false);\n}\n\n// Assemble the phone\nmodule smartphone() {\n    phone_body();\n    screen();\n    beveled_edges();\n    side_buttons();\n    camera_module();\n    speaker_grill();\n    charging_port();\n    home_button();\n    \n    // Front camera\n    color(color_camera)\n    translate([0, phone_height/2 - 10, phone_thickness/2 + 0.2])\n    cylinder(h = 0.5, r = 2, center = false);\n    \n    // Proximity sensor\n    color(color_button)\n    translate([-8, phone_height/2 - 10, phone_thickness/2 + 0.2])\n    cube([1, 1, 0.5], center = false);\n}\n\n// Render the model\nsmartphone();",
    "renders": true
  },
  {
    "electronic_device": "overlay",
    "openscad_code": "// Realistic Overlay Electronic Device – Medium Complexity\n// A wearable overlay unit with display, buttons, USB-C port, and strap mounts\n// Overall size ~65 mm × 45 mm × 12 mm – printable without supports\n\n$fn = 36;\n\n// Color constants\ncolor_case      = [0.15,0.15,0.15];\ncolor_screen    = [0.05,0.05,0.05];\ncolor_button    = [0.0,0.6,1.0];\ncolor_port      = [0.2,0.2,0.2];\ncolor_led       = [0.0,1.0,0.3];\n\n// Main body\nmodule main_case() {\n    difference() {\n        color(color_case)\n            rounded_box([65,45,12], 3);\n        \n        // Recess for screen\n        translate([0,0,6.1])\n            color(color_case)\n                cube([48,28,1], center=true);\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(size, r) {\n    hull() {\n        for(x=[-1,1], y=[-1,1], z=[-1,1])\n            translate([x*(size[0]/2-r), y*(size[1]/2-r), z*(size[2]/2-r)])\n                sphere(r);\n    }\n}\n\n// OLED screen lens\nmodule screen_lens() {\n    translate([0,0,6.3])\n        color(color_screen)\n            cube([46,26,0.6], center=true);\n}\n\n// Side buttons\nmodule buttons() {\n    for(side=[-1,1])\n        translate([side*32, 0, 2.5])\n            rotate([0,90,0])\n                color(color_button)\n                    cylinder(h=6, d=8, $fn=20);\n}\n\n// USB-C port\nmodule usb_c_port() {\n    translate([32.5, -10, 0])\n        rotate([0,90,0])\n            color(color_port)\n                cube([8,12,4], center=true);\n}\n\n// Status LED\nmodule status_led() {\n    translate([28, 0, 6.3])\n        color(color_led)\n            cylinder(h=0.8, d=3, $fn=20);\n}\n\n// Strap mounts (loop pegs)\nmodule strap_mounts() {\n    for(y=[-18,18])\n        translate([0, y, 0])\n            color(color_case)\n                cylinder(h=12, d=4, center=true);\n}\n\n// Combine all parts\nunion() {\n    main_case();\n    screen_lens();\n    buttons();\n    usb_c_port();\n    status_led();\n    strap_mounts();\n}",
    "renders": true
  },
  {
    "electronic_device": "dashboard",
    "openscad_code": "// Dashboard Electronic Device\n// A realistic automotive gauge cluster with display, buttons, and indicators\n\n// Overall dimensions (mm)\nwidth = 80;\nheight = 50;\ndepth = 25;\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Outer shell\n        translate([-width/2, -height/2, -depth/2])\n            cube([width, height, depth], center=true);\n        \n        // Internal cavity\n        translate([-width/2+3, -height/2+3, -depth/2+2])\n            cube([width-6, height-6, depth-4], center=true);\n    }\n}\n\n// Bezel around display\nmodule bezel() {\n    difference() {\n        // Outer bezel\n        color([0.2, 0.2, 0.2])\n        translate([-30, -18, 8])\n            cube([60, 36, 2], center=true);\n        \n        // Display cutout\n        translate([-28, -16, 9])\n            cube([56, 32, 2], center=true);\n    }\n}\n\n// LCD Display\nmodule display() {\n    color([0, 0.1, 0.3])\n    translate([-27, -15, 9.5])\n        cube([54, 30, 0.5], center=true);\n    \n    // Screen texture\n    for(x = [-25:5:25]) {\n        for(y = [-13:5:13]) {\n            color([0, 0.05, 0.2])\n            translate([x, y, 10.1])\n                cube([3, 3, 0.1], center=true);\n        }\n    }\n}\n\n// Buttons\nmodule buttons() {\n    // Left button\n    color([0.1, 0.1, 0.1])\n    translate([-35, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=3, r=3, center=true);\n    \n    color([0.8, 0.1, 0.1])\n    translate([-35, 0, -1.5])\n        rotate([90, 0, 0])\n        cylinder(h=2, r=2.5, center=true);\n    \n    // Right button\n    color([0.1, 0.1, 0.1])\n    translate([35, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=3, r=3, center=true);\n    \n    color([0.1, 0.8, 0.1])\n    translate([35, 0, -1.5])\n        rotate([90, 0, 0])\n        cylinder(h=2, r=2.5, center=true);\n}\n\n// Indicator LEDs\nmodule indicators() {\n    // Warning light\n    color([0.8, 0.2, 0])\n    translate([-20, 20, 9])\n        sphere(r=2);\n    \n    // Status light\n    color([0, 0.8, 0])\n    translate([20, 20, 9])\n        sphere(r=2);\n}\n\n// Connector port\nmodule connector() {\n    color([0.2, 0.2, 0.2])\n    translate([0, -height/2-1, -5])\n        cube([15, 2, 10], center=true);\n    \n    // Pin holes\n    for(i = [-2:1:2]) {\n        translate([i*2.5, -height/2-1.5, -3])\n            rotate([90, 0, 0])\n            cylinder(h=2, r=0.5, center=true);\n    }\n}\n\n// Ventilation slots\nmodule vents() {\n    for(i = [-30:6:30]) {\n        color([0.1, 0.1, 0.1])\n        translate([i, 0, -depth/2])\n            cube([3, height-10, 2], center=true);\n    }\n}\n\n// Mounting tabs\nmodule mounting_tabs() {\n    for(side = [-1, 1]) {\n        color([0.2, 0.2, 0.2])\n        translate([side*(width/2+5), 0, 0])\n            cube([10, 15, 2], center=true);\n        \n        // Mounting hole\n        translate([side*(width/2+5), 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=5, r=2, center=true);\n    }\n}\n\n// Logo\nmodule logo() {\n    color([0.7, 0.7, 0.7])\n    translate([0, 0, depth/2+0.1])\n        rotate([0, 0, 45])\n        cube([8, 8, 0.5], center=true);\n    \n    // Logo detail\n    color([0.3, 0.3, 0.3])\n    translate([0, 0, depth/2+0.6])\n        rotate([0, 0, 45])\n        cube([4, 4, 0.2], center=true);\n}\n\n// Assemble the device\nmain_body();\nbezel();\ndisplay();\nbuttons();\nindicators();\nconnector();\nvents();\nmounting_tabs();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "launcher",
    "openscad_code": "// Realistic Electronic Launch Controller (Medium Complexity)\n// 3D printable, 80mm length, includes screen, buttons, safety key, and LED indicators\n\n// Color definitions\n$fn = 50;\n\nmodule launcher_body() {\n    difference() {\n        // Main body shell\n        color(\"darkslategray\") \n        union() {\n            rounded_box([80, 45, 20], 3); // Main housing\n            \n            // Grip texture strips\n            for(i = [-30, -15, 0, 15, 30]) {\n                translate([i, 0, 20.5])\n                    color(\"dimgray\")\n                    cube([10, 45, 1], center=true);\n            }\n        }\n        \n        // Screen cutout\n        translate([0, 12, 10.5])\n            cube([50, 20, 2], center=true);\n            \n        // Button holes\n        translate([-20, -12, 10.5])\n            cylinder(h=3, d=8);\n        translate([0, -12, 10.5])\n            cylinder(h=3, d=8);\n        translate([20, -12, 10.5])\n            cylinder(h=3, d=8);\n            \n        // Safety key slot\n        translate([35, 0, 10.5])\n            cube([8, 4, 2], center=true);\n            \n        // USB-C port\n        translate([-38, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=10, d=8);\n    }\n}\n\nmodule rounded_box(size, radius) {\n    hull() {\n        for(x = [-1, 1])\n        for(y = [-1, 1])\n        for(z = [-1, 1])\n            translate([x*(size[0]/2-radius), y*(size[1]/2-radius), z*(size[2]/2-radius)])\n                sphere(r=radius);\n    }\n}\n\nmodule screen() {\n    // LCD display\n    translate([0, 12, 11])\n    color(\"black\")\n    cube([48, 18, 0.5], center=true);\n    \n    // Screen bezel\n    translate([0, 12, 10.8])\n    color(\"gray20\")\n    cube([52, 22, 0.2], center=true);\n    \n    // Display content\n    translate([0, 14, 11.5])\n    color(\"limegreen\")\n    cube([40, 2, 0.1], center=true);\n    translate([0, 10, 11.5])\n    color(\"limegreen\")\n    cube([30, 2, 0.1], center=true);\n}\n\nmodule buttons() {\n    // Launch button (red)\n    translate([-20, -12, 12.5])\n    color(\"red\")\n    cylinder(h=2, d=6);\n    \n    // Arm button (yellow)\n    translate([0, -12, 12.5])\n    color(\"gold\")\n    cylinder(h=2, d=6);\n    \n    // Test button (green)\n    translate([20, -12, 12.5])\n    color(\"green\")\n    cylinder(h=2, d=6);\n    \n    // Button labels\n    translate([-20, -12, 14])\n    color(\"white\")\n    rotate([90, 0, 0])\n        linear_extrude(0.2)\n            text(\"LAUNCH\", size=2, halign=\"center\");\n}\n\nmodule safety_key() {\n    // Key housing\n    translate([35, 0, 8])\n    union() {\n        color(\"red\")\n        cube([6, 3, 4], center=true);\n        \n        // Key ring\n        translate([0, 0, 4])\n            rotate([90, 0, 0])\n                color(\"silver\")\n                torus(2, 0.5);\n    }\n}\n\nmodule led_indicators() {\n    // Status LEDs\n    translate([-30, 22, 10])\n    color(\"green\")\n    sphere(d=3);\n    \n    translate([-20, 22, 10])\n    color(\"yellow\")\n    sphere(d=3);\n    \n    translate([-10, 22, 10])\n    color(\"red\")\n    sphere(d=3);\n}\n\nmodule antenna() {\n    // Retractable antenna\n    translate([40, 0, 10])\n    rotate([0, 90, 0])\n    union() {\n        color(\"black\")\n        cylinder(h=15, d=3);\n        \n        color(\"silver\")\n        translate([15, 0, 0])\n            cylinder(h=20, d=1.5);\n    }\n}\n\nmodule grip_texture() {\n    // Side grip pattern\n    for(i = [-2, 0, 2]) {\n        translate([0, i*8 + 22.5, 10])\n        color(\"dimgray\")\n        cube([82, 2, 18], center=true);\n    }\n}\n\n// Assembly\nlauncher_body();\nscreen();\nbuttons();\nsafety_key();\nled_indicators();\nantenna();\ngrip_texture();\n\n// Battery compartment cover\ntranslate([0, -22.5, 0])\ndifference() {\n    color(\"darkgray\")\n    cube([70, 5, 18], center=true);\n    \n    // Screw holes\n    for(x = [-25, 25])\n        translate([x, 0, 0])\n            cylinder(h=6, d=3);\n}",
    "renders": true
  },
  {
    "electronic_device": "store",
    "openscad_code": "// Nintendo Switch-inspired handheld game console (store display unit)\n// Scale: ~80 mm long, 3D-printable, no overhangs >45°\n\n$fn = 36;               // Smooth curves\nwall = 1.2;             // 3D-print friendly wall thickness\nunit = 10;              // Grid unit for easy scaling\n\nmodule shell() {\n    // Main body\n    color(\"LightGray\") difference() {\n        hull() {\n            translate([-unit*2, -unit*1.5, 0])\n                cube([unit*4, unit*3, unit*0.8]);\n            translate([-unit*1.8, -unit*1.3, unit*0.4])\n                cube([unit*3.6, unit*2.6, unit*0.4]);\n        }\n        // Cartridge slot\n        translate([unit*1.5, -unit*0.4, -0.1])\n            cube([unit*0.4, unit*0.8, unit*1]);\n    }\n}\n\nmodule screen() {\n    // Display bezel\n    color(\"Black\") difference() {\n        translate([-unit*1.6, -unit*1.2, unit*0.81])\n            cube([unit*3.2, unit*2.4, wall]);\n        // Actual screen\n        translate([-unit*1.5, -unit*1.1, unit*0.82])\n            cube([unit*3, unit*2.2, wall+0.01]);\n    }\n    // Screen surface\n    color([0.05,0.05,0.05]) translate([-unit*1.5, -unit*1.1, unit*0.83])\n        cube([unit*3, unit*2.2, 0.2]);\n}\n\nmodule joystick(x, y, side) {\n    color(\"DimGray\") {\n        // Base\n        translate([x, y, unit*0.82]) cylinder(h=unit*0.25, r=unit*0.35);\n        // Stick\n        color(\"Black\") translate([x, y, unit*1.07]) cylinder(h=unit*0.3, r=unit*0.25);\n        // Cap\n        color(side) translate([x, y, unit*1.37]) cylinder(h=unit*0.1, r=unit*0.28);\n    }\n}\n\nmodule buttons() {\n    // D-pad cluster (left)\n    color(\"DimGray\") for (dx=[-1,1], dy=[-1,1])\n        translate([-unit*1.25 + dx*unit*0.25, dy*unit*0.25, unit*0.82])\n            cube([unit*0.2, unit*0.2, unit*0.15]);\n    \n    // Action buttons (right)\n    color(\"Crimson\") for (dx=[-1,1], dy=[-1,1])\n        translate([unit*1.0 + dx*unit*0.25, dy*unit*0.25, unit*0.82])\n            cylinder(h=unit*0.15, r=unit*0.12);\n}\n\nmodule vents() {\n    // Rear cooling vents\n    color(\"Gray\") for (i=[-4:4])\n        translate([i*unit*0.2, -unit*1.45, unit*0.2])\n            cube([unit*0.08, unit*0.1, unit*0.1]);\n}\n\nmodule usbc_port() {\n    // USB-C charging port\n    color(\"Black\") translate([unit*1.95, 0, unit*0.2])\n        cube([unit*0.3, unit*0.6, unit*0.2]);\n}\n\nmodule logo() {\n    // Stylized Nintendo logo (simplified)\n    color(\"Red\") translate([unit*0.9, unit*1.25, unit*0.82])\n        cube([unit*0.4, unit*0.15, wall]);\n}\n\n// Assembly\nunion() {\n    shell();\n    screen();\n    joystick(-unit*0.8, 0, \"DeepSkyBlue\");\n    joystick(unit*0.5, 0, \"Crimson\");\n    buttons();\n    vents();\n    usbc_port();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "market",
    "openscad_code": "// OpenSCAD code: Realistic market electronic device – a handheld barcode scanner\n// Overall size ~90 mm long, 60 mm tall, 40 mm deep\n\n// ---- Parameters ----------------------------------------------------------\nwall = 1.6;                 // 3D-print friendly wall thickness\ncorner_r = 3;               // outer corner radius\nbtn_r = 3;                  // button radius\nbtn_h = 1.2;                // button protrusion\nscr_th = 0.8;               // screen lens thickness\nusb_w = 7;  usb_h = 3;      // micro-USB port\nled_d = 2;                  // LED indicator diameter\n\n// ---- Main assembly -------------------------------------------------------\ncolor(\"silver\")\nhandheld_scanner();\n\nmodule handheld_scanner() {\n    // Main body shell\n    difference() {\n        // rounded body\n        minkowski() {\n            cube([80, 40, 25], center = true);\n            sphere(corner_r);\n        }\n        translate([0, 0, 12.5 + corner_r])\n            cube([76, 36, 30], center = true);   // hollow\n    }\n\n    // grip area pattern (knurling simulation)\n    translate([0, 0, -12])\n        grip_texture();\n\n    // top handle extension\n    translate([0, -20, 10])\n        rotate([90, 0, 0])\n            cylinder(h = 30, d1 = 22, d2 = 18, $fn = 36);\n\n    // scan window\n    translate([-35, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 40, d = 16, $fn = 60);\n\n    // LCD screen\n    color(\"black\")\n    translate([10, 0, 12.5])\n        cube([28, 18, scr_th], center = true);\n\n    // Buttons\n    color(\"dimgray\")\n    for (y = [-8, 0, 8])\n        translate([25, y, 12.5 + btn_h/2])\n            cylinder(h = btn_h, r = btn_r, $fn = 20);\n\n    // Side trigger button\n    color(\"firebrick\")\n    translate([0, -20, -5])\n        rotate([0, 90, 0])\n            cylinder(h = 15, r1 = 8, r2 = 5, $fn = 32);\n\n    // micro-USB port\n    color(\"black\")\n    translate([0, 20, 0])\n        cube([usb_w, wall, usb_h], center = true);\n\n    // Charging LED indicator\n    color(\"lime\")\n    translate([0, 20, 3])\n        sphere(d = led_d);\n}\n\n// ---- Grip texture using small cubes --------------------------------------\nmodule grip_texture() {\n    step = 3;\n    for (x = [-30:step:30])\n        for (y = [-15:step:15])\n            if ((x + y) % (2*step) == 0)\n                translate([x, y, -12.5])\n                    cube([step-0.5, step-0.5, 1], center = true);\n}",
    "renders": true
  },
  {
    "electronic_device": "cloud",
    "openscad_code": "// Cloud streaming device – realistic, medium complexity\n// Overall size ≈ 90 mm wide x 55 mm deep x 28 mm high\n\nCloudColor = \"#e8e8e8\";\nLogoColor  = \"#4285f4\";\nLEDColor   = \"#00bfff\";\n\n$fn = 36;\n\n// Main cloud body\nmodule cloud_body() {\n    color(CloudColor)\n    difference() {\n        union() {\n            // Central rounded block\n            translate([0, 0, 0])\n                rounded_box([90, 55, 20], 8);\n\n            // Four rounded puffs to give cloud silhouette\n            translate([-35,  20, 8]) sphere(d=25);\n            translate([ 35,  20, 8]) sphere(d=25);\n            translate([-35, -20, 8]) sphere(d=25);\n            translate([ 35, -20, 8]) sphere(d=25);\n            translate([  0,   0, 8]) sphere(d=30);\n        }\n\n        // Top vent grid – printable slots\n        for (x = [-36:12:36])\n            for (y = [-20:10:20])\n                translate([x, y, 18])\n                    cube([8, 6, 4], center = true);\n\n        // Micro-USB port cavity\n        translate([-46, 0, 10])\n            rotate([0, 90, 0])\n                cylinder(h=12, d1=8, d2=8);\n\n        // HDMI port cavity\n        translate([46, 0, 10])\n            rotate([0, 90, 0])\n                cylinder(h=12, d1=12, d2=12);\n    }\n}\n\n// Helper for rounded box\nmodule rounded_box(size, r) {\n    hull() {\n        for (dx = [-(size.x/2-r), (size.x/2-r)])\n            for (dy = [-(size.y/2-r), (size.y/2-r)])\n                translate([dx, dy, 0])\n                    cylinder(h=size.z, r=r);\n    }\n}\n\n// Status LED ring\nmodule status_led() {\n    translate([0, 0, 19])\n    color(LEDColor, 0.5)\n    difference() {\n        cylinder(h=2, d=20);\n        cylinder(h=2.2, d=16);\n    }\n}\n\n// Front panel: matte plastic screen area\nmodule front_panel() {\n    color(\"#f8f8f8\", 0.9)\n    translate([0, 28, 0])\n        cube([70, 2, 15], center = true);\n}\n\n// Soft-touch reset button\nmodule reset_button() {\n    color(\"#b0b0b0\")\n    translate([0, 27, 5])\n        cylinder(h=1.5, r=3);\n}\n\n// Printed logo\nmodule cloud_logo() {\n    color(LogoColor)\n    translate([0, 28.5, 8])\n    linear_extrude(height = 0.6)\n        text(\"cloud\", size=8, halign=\"center\", font=\"Arial:style=Bold\");\n}\n\n// Rubber feet – printable without support\nmodule feet() {\n    for (x = [-35, 35])\n        for (y = [-20, 20]) {\n            translate([x, y, -1.5])\n                cylinder(h=3, r1=3, r2=4);\n        }\n}\n\n// Assembly\ncloud_body();\nstatus_led();\nfront_panel();\nreset_button();\ncloud_logo();\nfeet();",
    "renders": true
  },
  {
    "electronic_device": "edge",
    "openscad_code": "// Raspberry Pi 4 Model B (realistic style, medium complexity)\n\n// Color constants\n$fn=50;  // Smooth curves\n\n// Main board dimensions\nboard_x = 85;\nboard_y = 56;\nboard_z = 2;\n\nmodule main_board() {\n    color(\"darkgreen\")\n    cube([board_x, board_y, board_z], center=true);\n}\n\n// USB and Ethernet ports\nmodule ports() {\n    // USB 3.0 ports (blue)\n    translate([board_x/2 - 8, 10, 0])\n    color(\"blue\")\n    for(i=[0:1]) {\n        translate([0, -i*12, -board_z/2])\n        cube([8, 8, 7]);\n    }\n    \n    // USB 2.0 ports (black)\n    translate([board_x/2 - 8, -15, 0])\n    color(\"black\")\n    for(i=[0:1]) {\n        translate([0, -i*12, -board_z/2])\n        cube([8, 8, 7]);\n    }\n    \n    // Ethernet port\n    translate([board_x/2 - 16, 25, 0])\n    color(\"gray\")\n    cube([16, 14, 7]);\n}\n\n// GPIO header\nmodule gpio_header() {\n    translate([-board_x/2 + 5, 0, 0])\n    color(\"black\")\n    for(i=[0:19]) {\n        translate([0, -board_y/2 + 3 + i*2.5, board_z/2])\n        cylinder(h=8, d=1);\n    }\n    for(i=[0:19]) {\n        translate([2.54, -board_y/2 + 3 + i*2.5, board_z/2])\n        cylinder(h=8, d=1);\n    }\n}\n\n// CPU with heatsink\nmodule cpu() {\n    translate([-15, 10, board_z/2])\n    color(\"silver\")\n    cube([20, 20, 4]);\n    \n    translate([-15, 10, board_z/2 + 4])\n    color(\"silver\")\n    for(i=[0:3]) {\n        for(j=[0:3]) {\n            translate([-7.5 + i*5, 7.5 + j*5, 0])\n            cube([1.5, 1.5, 5]);\n        }\n    }\n}\n\n// USB-C power port\nmodule power_port() {\n    translate([board_x/2 - 8, -25, -board_z/2])\n    color(\"black\")\n    cube([8, 6, 5]);\n}\n\n// HDMI ports\nmodule hdmi_ports() {\n    // Micro HDMI ports\n    translate([board_x/2 - 8, 0, -board_z/2])\n    color(\"gold\")\n    cube([8, 7, 5]);\n    \n    translate([board_x/2 - 8, -7, -board_z/2])\n    color(\"gold\")\n    cube([8, 7, 5]);\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    color(\"white\")\n    for(pos=[[-board_x/2 + 3.5, -board_y/2 + 3.5, 0],\n             [board_x/2 - 3.5, -board_y/2 + 3.5, 0],\n             [-board_x/2 + 3.5, board_y/2 - 3.5, 0],\n             [board_x/2 - 3.5, board_y/2 - 3.5, 0]]) {\n        translate(pos)\n        cylinder(h=board_z, d=2.5);\n    }\n}\n\n// WiFi/Bluetooth module\nmodule wireless_module() {\n    translate([10, -20, board_z/2])\n    color(\"black\")\n    cube([15, 10, 2]);\n    \n    // Antenna\n    translate([10, -20, board_z/2 + 2])\n    color(\"gray\")\n    cube([5, 2, 0.5]);\n}\n\n// Status LEDs\nmodule status_leds() {\n    translate([board_x/2 - 5, -board_y/2 + 5, board_z/2 + 0.5])\n    color(\"red\")\n    cube([2, 2, 1]);\n    \n    translate([board_x/2 - 5, -board_y/2 + 8, board_z/2 + 0.5])\n    color(\"green\")\n    cube([2, 2, 1]);\n}\n\n// Assemble the Raspberry Pi 4\nunion() {\n    main_board();\n    ports();\n    gpio_header();\n    cpu();\n    power_port();\n    hdmi_ports();\n    mounting_holes();\n    wireless_module();\n    status_leds();\n}",
    "renders": true
  },
  {
    "electronic_device": "farm",
    "openscad_code": "// Farm Weather Station - Electronic Device\n// Realistic style with medium complexity\n\n// Constants\ndeviceWidth = 80;\ndeviceHeight = 50;\ndeviceDepth = 35;\nwallThickness = 2.5;\n\n// Main housing\nmodule weatherStation() {\n    color(\"darkslategray\") {\n        // Main body\n        difference() {\n            cube([deviceWidth, deviceDepth, deviceHeight], center=true);\n            \n            // Hollow interior\n            translate([0, 0, -wallThickness/2])\n                cube([deviceWidth - 2*wallThickness, \n                      deviceDepth - 2*wallThickness, \n                      deviceHeight - wallThickness], center=true);\n        }\n        \n        // Front face with display area\n        translate([0, deviceDepth/2 - 0.5, 8])\n            cube([deviceWidth - 10, 1, deviceHeight - 20], center=true);\n    }\n}\n\n// Solar panel on top\nmodule solarPanel() {\n    color(\"black\") {\n        translate([0, 0, deviceHeight/2 + 2])\n            cube([deviceWidth - 15, deviceDepth - 10, 2], center=true);\n    }\n    \n    color(\"darkblue\") {\n        // Panel grid\n        for(x = [-30:15:30]) {\n            for(y = [-10:5:10]) {\n                translate([x, y, deviceHeight/2 + 3.1])\n                    cube([10, 3, 0.2], center=true);\n            }\n        }\n    }\n}\n\n// Display screen\nmodule displayScreen() {\n    color(\"black\") {\n        translate([0, deviceDepth/2, 10])\n            cube([45, 0.5, 20], center=true);\n    }\n    \n    // Screen content (simulated)\n    color(\"lime\") {\n        translate([0, deviceDepth/2 + 0.1, 15])\n            cube([40, 0.1, 2], center=true);\n        translate([-10, deviceDepth/2 + 0.1, 12])\n            cube([5, 0.1, 1], center=true);\n        translate([10, deviceDepth/2 + 0.1, 12])\n            cube([5, 0.1, 1], center=true);\n    }\n}\n\n// Buttons\nmodule buttons() {\n    color(\"dimgray\") {\n        // Menu buttons\n        for(i = [0:2]) {\n            translate([-25 + i*15, deviceDepth/2, -15])\n                cylinder(h=2, r=3, center=true);\n        }\n        \n        // Power button\n        translate([25, deviceDepth/2 - 10, 0])\n            rotate([90, 0, 0])\n                cylinder(h=3, r=4, center=true);\n    }\n}\n\n// Antenna\nmodule antenna() {\n    color(\"silver\") {\n        translate([deviceWidth/2 - 5, 0, deviceHeight/2 + 5])\n            cylinder(h=25, r=1.5, center=false);\n        \n        translate([deviceWidth/2 - 5, 0, deviceHeight/2 + 30])\n            sphere(r=3);\n    }\n}\n\n// Sensor probes on bottom\nmodule sensors() {\n    color(\"silver\") {\n        // Temperature/humidity sensor\n        translate([-20, 0, -deviceHeight/2 - 12])\n            cylinder(h=15, r=3, center=false);\n        \n        // Soil moisture probe\n        translate([20, 0, -deviceHeight/2 - 15])\n            cylinder(h=18, r=2, center=false);\n        \n        // Rain gauge connector\n        translate([0, -deviceDepth/2 - 5, -deviceHeight/2 + 10])\n            rotate([90, 0, 0])\n                cylinder(h=10, r=4, center=false);\n    }\n}\n\n// Mounting bracket\nmodule mountingBracket() {\n    color(\"gray\") {\n        translate([0, -deviceDepth/2 - 5, -deviceHeight/2 + 5])\n            cube([deviceWidth + 10, 5, 10], center=true);\n        \n        // Mounting holes\n        for(x = [-30:30:60]) {\n            translate([x, -deviceDepth/2 - 7.5, -deviceHeight/2 + 5])\n                cylinder(h=10, r=2, center=true);\n        }\n    }\n}\n\n// LED indicators\nmodule indicators() {\n    // Power LED\n    translate([-deviceWidth/2 + 8, deviceDepth/2 - 3, 0])\n        color(\"green\")\n            sphere(r=2);\n    \n    // Status LED\n    translate([-deviceWidth/2 + 8, deviceDepth/2 - 8, 0])\n        color(\"red\")\n            sphere(r=2);\n}\n\n// USB port\nmodule usbPort() {\n    color(\"black\") {\n        translate([deviceWidth/2 - 1, 10, -5])\n            cube([2, 8, 4], center=true);\n    }\n}\n\n// Assemble the device\nweatherStation();\nsolarPanel();\ndisplayScreen();\nbuttons();\nantenna();\nsensors();\nmountingBracket();\nindicators();\nusbPort();",
    "renders": true
  },
  {
    "electronic_device": "arena",
    "openscad_code": "// Arena Electronic Scoreboard\n// Compact 50mm wide arena-style electronic scoreboard with LED digits and control buttons\n\narena_size = 50;\nwall_thickness = 2;\nscreen_depth = 3;\n\nmodule arena_base() {\n    difference() {\n        // Main arena base\n        cube([arena_size, arena_size*0.7, wall_thickness*2], center=true);\n        \n        // Inner recessed area\n        translate([0, 0, wall_thickness])\n            cube([arena_size-wall_thickness*2, arena_size*0.7-wall_thickness*2, wall_thickness], center=true);\n    }\n}\n\nmodule led_screen() {\n    color([0.1, 0.1, 0.1])  // Dark screen surface\n    difference() {\n        // Main screen\n        translate([0, 0, wall_thickness+screen_depth/2])\n            cube([arena_size*0.8, arena_size*0.4, screen_depth], center=true);\n        \n        // LED segments for digit display\n        for(i=[-1, 1]) {\n            translate([i*8, 0, wall_thickness+screen_depth+0.1])\n                color([0.8, 0, 0])  // Red LED color\n                cube([3, 12, 0.2], center=true);\n            \n            translate([i*8, -5, wall_thickness+screen_depth+0.1])\n                color([0.8, 0, 0])\n                cube([8, 3, 0.2], center=true);\n                \n            translate([i*8, 5, wall_thickness+screen_depth+0.1])\n                color([0.8, 0, 0])\n                cube([8, 3, 0.2], center=true);\n        }\n    }\n}\n\nmodule control_buttons() {\n    // Power button\n    translate([arena_size/2-8, arena_size*0.3/2+3, wall_thickness+1])\n        color([0.2, 0.2, 0.2])\n        cylinder(h=2, r=3, center=true);\n    \n    // Mode button\n    translate([arena_size/2-8, 0, wall_thickness+1])\n        color([0.2, 0.2, 0.2])\n        cylinder(h=2, r=2.5, center=true);\n        \n    // Reset button\n    translate([arena_size/2-8, -arena_size*0.3/2-3, wall_thickness+1])\n        color([0.2, 0.2, 0.2])\n        cylinder(h=2, r=2.5, center=true);\n}\n\nmodule usb_port() {\n    color([0.3, 0.3, 0.3])\n    translate([-arena_size/2+1, 0, wall_thickness])\n        cube([2, 8, 4], center=true);\n}\n\nmodule status_leds() {\n    // Power indicator\n    translate([0, arena_size*0.4/2+2, wall_thickness+screen_depth+0.1])\n        color([0, 0.8, 0])\n        sphere(r=1, center=true);\n        \n    // Status indicator\n    translate([5, arena_size*0.4/2+2, wall_thickness+screen_depth+0.1])\n        color([0, 0, 0.8])\n        sphere(r=1, center=true);\n}\n\n// Assembly\nunion() {\n    color([0.9, 0.9, 0.9]) arena_base();\n    led_screen();\n    control_buttons();\n    usb_port();\n    status_leds();\n    \n    // Arena walls\n    color([0.85, 0.85, 0.85])\n    for(side=[-1, 1]) {\n        translate([0, side*arena_size*0.35, wall_thickness*1.5])\n            cube([arena_size+2, wall_thickness, wall_thickness*3], center=true);\n    }\n    \n    for(side=[-1, 1]) {\n        translate([side*arena_size/2+1, 0, wall_thickness*1.5])\n            rotate([0, 0, 90])\n            cube([arena_size*0.7+2, wall_thickness, wall_thickness*3], center=true);\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "stage",
    "openscad_code": "// Stage Electronic Device - Wireless In-Ear Monitor System Receiver\n// Realistic style, medium complexity, 3D printable\n\n$fn = 64;\n\n// Main body dimensions\nbody_w = 45;\nbody_h = 65;\nbody_d = 18;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_buttons = [0.4, 0.4, 0.4];\ncolor_antenna = [0.3, 0.3, 0.3];\ncolor_led = [0, 1, 0];\ncolor_text = [1, 1, 1];\n\n// Main body\nmodule main_body() {\n    difference() {\n        color(color_body)\n        rounded_cube([body_w, body_h, body_d], 3);\n        \n        // Screen recess\n        translate([body_w/2 - 18, body_h - 12, -0.1])\n            cube([36, 20, body_d + 0.2]);\n        \n        // Button holes\n        for(y = [body_h - 30, body_h - 40, body_h - 50]) {\n            translate([body_w/2 + 15, y, -0.1])\n                cylinder(h = body_d + 0.2, r = 3);\n        }\n        \n        // Clip groove\n        translate([body_w - 3, body_h/2, body_d/2])\n            rotate([0, 90, 0])\n                cylinder(h = 30, r = 1.5);\n    }\n}\n\n// Helper for rounded cube\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(dx = [radius, size.x - radius])\n            for(dy = [radius, size.y - radius])\n                for(dz = [radius, size.z - radius])\n                    translate([dx, dy, dz])\n                        sphere(r = radius);\n    }\n}\n\n// OLED screen\nmodule screen() {\n    translate([body_w/2, body_h - 12, body_d/2 + 0.1])\n        color(color_screen)\n        cube([32, 16, 0.5], center = true);\n}\n\n// Channel display\nmodule channel_display() {\n    translate([body_w/2, body_h - 25, body_d/2 + 0.1])\n        color(color_text)\n        cube([6, 8, 0.3], center = true);\n}\n\n// Buttons\nmodule buttons() {\n    for(y = [body_h - 30, body_h - 40, body_h - 50]) {\n        translate([body_w/2 + 15, y, body_d/2])\n            color(color_buttons)\n            cylinder(h = 2, r = 2.5, center = true);\n    }\n}\n\n// LED indicators\nmodule leds() {\n    translate([body_w/2 - 15, body_h - 5, body_d/2 + 0.1])\n        color(color_led)\n        sphere(r = 1.5);\n    \n    translate([body_w/2 + 15, body_h - 5, body_d/2 + 0.1])\n        color([1, 0, 0])\n        sphere(r = 1.5);\n}\n\n// Volume knob\nmodule volume_knob() {\n    translate([5, body_h/2, body_d/2])\n        rotate([90, 0, 0])\n            color(color_body)\n            difference() {\n                cylinder(h = 4, r = 6);\n                cylinder(h = 5, r = 3);\n            }\n}\n\n// Antenna\nmodule antenna() {\n    translate([0, body_h, body_d/2])\n        rotate([0, -30, 0])\n            union() {\n                color(color_antenna)\n                cylinder(h = 25, r = 1.5);\n                translate([0, 0, 25])\n                    sphere(r = 2);\n            }\n}\n\n// Belt clip\nmodule belt_clip() {\n    translate([body_w - 2, body_h/2, body_d/2])\n        rotate([0, 90, 0])\n            difference() {\n                color(color_body)\n                union() {\n                    cube([30, 6, 2], center = true);\n                    translate([15, 0, 0])\n                        cube([2, 6, 8], center = true);\n                }\n                translate([5, 0, 0])\n                    cube([20, 8, 5], center = true);\n            }\n}\n\n// Audio jack\nmodule audio_jack() {\n    translate([body_w/2, 8, body_d/2])\n        rotate([90, 0, 0])\n            difference() {\n                color(color_body)\n                cylinder(h = 8, r = 3.5);\n                cylinder(h = 9, r = 2.5);\n            }\n}\n\n// USB-C port\nmodule usb_port() {\n    translate([body_w - 8, 8, body_d/2])\n        rotate([90, 0, 0])\n            color(color_body)\n            cube([8, 4, 3], center = true);\n}\n\n// Assembly\nmain_body();\nscreen();\nchannel_display();\nbuttons();\nleds();\nvolume_knob();\nantenna();\nbelt_clip();\naudio_jack();\nusb_port();",
    "renders": true
  },
  {
    "electronic_device": "theater",
    "openscad_code": "// OpenSCAD Theater Electronic Device - Realistic Style, Medium Complexity\n// A 3D printable theater lighting control panel with realistic proportions\n\n$fn = 50;\n\n// Main dimensions\nbase_width = 80;\nbase_depth = 60;\nbase_height = 15;\n\n// Control panel dimensions\npanel_width = 75;\npanel_depth = 55;\npanel_height = 8;\n\n// Screen dimensions\nscreen_width = 40;\nscreen_height = 25;\nscreen_depth = 3;\n\n// Button dimensions\nbutton_diameter = 6;\nbutton_height = 2;\nbutton_spacing = 12;\n\n// Port dimensions\nusb_width = 8;\nusb_height = 4;\nusb_depth = 5;\n\n// Main base\ncolor(\"darkslategray\") difference() {\n    cube([base_width, base_depth, base_height], center=true);\n    \n    // Ventilation slots on bottom\n    for (i = [-20:10:20]) {\n        translate([i, 0, base_height/2 - 1])\n            cube([8, base_depth - 10, 2], center=true);\n    }\n}\n\n// Control panel top\ncolor(\"gray20\") translate([0, 0, base_height/2 + panel_height/2])\n    cube([panel_width, panel_depth, panel_height], center=true);\n\n// LCD screen\ncolor(\"black\") translate([0, 10, base_height/2 + panel_height + screen_depth/2])\n    cube([screen_width, screen_height, screen_depth], center=true);\n\n// Screen bezel\ncolor(\"gray10\") difference() {\n    translate([0, 10, base_height/2 + panel_height + screen_depth/2 - 0.5])\n        cube([screen_width + 4, screen_height + 4, screen_depth + 1], center=true);\n    translate([0, 10, base_height/2 + panel_height + screen_depth/2])\n        cube([screen_width, screen_height, screen_depth + 1], center=true);\n}\n\n// Channel faders\nmodule fader(x_pos, y_pos) {\n    color(\"black\") {\n        // Fader track\n        translate([x_pos, y_pos, base_height/2 + panel_height + 1])\n            cube([3, 20, 4], center=true);\n        \n        // Fader knob\n        color(\"red\") translate([x_pos, y_pos + 5, base_height/2 + panel_height + 4])\n            cube([6, 8, 3], center=true);\n    }\n}\n\n// Create 4 channel faders\nfor (i = [-30:20:30]) {\n    fader(i, -10);\n}\n\n// Function buttons below screen\nmodule button(x_pos, y_pos, btn_color) {\n    color(btn_color) translate([x_pos, y_pos, base_height/2 + panel_height + button_height/2])\n        cylinder(h = button_height, d = button_diameter, center=true);\n}\n\n// Grid of function buttons\nfor (x = [-25:12.5:25]) {\n    for (y = [-5:12.5:5]) {\n        button(x, y + 15, x < 0 ? \"green\" : \"red\");\n    }\n}\n\n// Power button\ncolor(\"red\") translate([30, -20, base_height/2 + panel_height + button_height/2])\n    cylinder(h = button_height + 1, d = button_diameter + 2, center=true);\n\n// USB ports on back\ncolor(\"black\") for (port = [-1:1:1]) {\n    translate([port * 15, -base_depth/2, base_height/2 - 2])\n        cube([usb_width, usb_depth, usb_height], center=true);\n}\n\n// Ethernet port\ncolor(\"gray30\") translate([0, -base_depth/2, base_height/2 - 8])\n    cube([12, usb_depth + 2, 8], center=true);\n\n// Status LEDs\nmodule led(x_pos, color_name) {\n    color(color_name) translate([x_pos, base_depth/2 - 3, base_height/2 + 1])\n        sphere(d = 3);\n}\n\nled(-20, \"red\");\nled(-10, \"green\");\nled(0, \"yellow\");\nled(10, \"blue\");\n\n// Antenna\ncolor(\"black\") translate([base_width/2 - 5, base_depth/2 - 5, base_height/2 + 15])\n    rotate([0, 90, 0])\n        cylinder(h = 20, d = 2, center=true);\n\n// Brand label area\ncolor(\"dimgray\") translate([0, base_depth/2 - 8, base_height/2 + panel_height/2])\n    cube([30, 10, 0.5], center=true);",
    "renders": true
  },
  {
    "electronic_device": "lounge",
    "openscad_code": "// Lounge Smart Speaker (Amazon Echo-style) - Realistic Medium Complexity\n// Reasonable 3D-printable size, no overhangs >45°, 1.2 mm walls\n\n// Overall size: 60 mm × 60 mm × 100 mm\nwall = 1.2;\n\nmodule body_shell() {\n    // Main cylindrical body\n    difference() {\n        union() {\n            cylinder(h = 85, d1 = 60, d2 = 55, $fn = 120);   // Tapered body\n            translate([0, 0, 85])\n                cylinder(h = 15, d = 55, $fn = 120);        // Flat top cap\n        }\n        // Hollow it out\n        translate([0, 0, -1])\n            cylinder(h = 87, d = 60 - 2*wall, $fn = 120);\n    }\n}\n\nmodule grille() {\n    // Fabric-style grille holes\n    color(\"dimgray\")\n    difference() {\n        body_shell();\n        // Horizontal slots\n        for (z = [5:10:75]) {\n            rotate([0, 0, 0])\n                translate([0, 0, z])\n                    cube([70, 1.2, 2], center = true);\n        }\n    }\n}\n\nmodule top_ring() {\n    // Plastic ring with indicator LEDs\n    color(\"white\")\n    difference() {\n        cylinder(h = 3, d = 58, $fn = 120);\n        translate([0, 0, -1])\n            cylinder(h = 5, d = 50, $fn = 120);\n    }\n}\n\nmodule button_cluster() {\n    // Top buttons: action + volume\n    color(\"lightgray\")\n    union() {\n        // Action button\n        translate([0, 0, 101])\n            cylinder(h = 2, d = 12, $fn = 40);\n\n        // Volume ring\n        for (a = [0:90:270]) {\n            rotate([0, 0, a])\n                translate([19, 0, 101])\n                    cylinder(h = 2, d = 8, $fn = 30);\n        }\n    }\n}\n\nmodule base() {\n    // Rubber foot ring\n    color(\"black\")\n    difference() {\n        cylinder(h = 5, d = 65, $fn = 120);\n        translate([0, 0, -1])\n            cylinder(h = 7, d = 60, $fn = 120);\n    }\n}\n\nmodule power_port() {\n    // DC barrel jack on rear\n    color(\"gray\")\n    translate([0, -30, 12])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d = 7, $fn = 20);\n    translate([0, -30, 12])\n        rotate([90, 0, 0])\n            cylinder(h = 2, d = 11, $fn = 20);\n}\n\nmodule cooling_gaps() {\n    // Vertical slots for airflow\n    for (a = [0:30:330]) {\n        rotate([0, 0, a])\n            translate([0, 27.5, 30])\n                cube([1.2, 5, 50], center = true);\n    }\n}\n\n// Assembly\ngrille();\ntranslate([0, 0, 85]) top_ring();\ntranslate([0, 0, 100]) button_cluster();\nbase();\npower_port();\n\n// Add subtle logo placeholder\ncolor(\"silver\")\ntranslate([0, 28, 40])\n    rotate([90, 0, 0])\n        linear_extrude(0.5)\n            text(\"SMART\", size = 6, halign = \"center\", valign = \"center\");",
    "renders": true
  },
  {
    "electronic_device": "zone",
    "openscad_code": "// Zone electronic device - realistic style with medium complexity\n// A modern zone controller with display and tactile controls\n\nmodule screen() {\n    // Main display module with bezel\n    color([0.1, 0.1, 0.1])\n    translate([0, 10, 1]) cube([35, 25, 0.5]);\n    \n    // Screen glass\n    color([0.2, 0.3, 0.5])\n    translate([0, 10, 1.6]) cube([34, 24, 0.2]);\n    \n    // Screen content lines\n    for(i = [0:3]) {\n        color([0, 0.8, 1])\n        translate([-15 + i*10, 20, 1.9]) cube([8, 0.5, 0.01]);\n    }\n}\n\nmodule button(x, y, label) {\n    // Individual button with tactile feel\n    color([0.85, 0.85, 0.85])\n    translate([x, y, 2]) cylinder(h=2, d=8, $fn=16);\n    color([0.7, 0.7, 0.7])\n    translate([x, y, 3.5]) cylinder(h=0.5, d=6, $fn=16);\n    \n    // Button label\n    color([0.1, 0.1, 0.1])\n    translate([x-2, y-1, 4.1]) cube([4, 2, 0.1]);\n}\n\nmodule port(type, x, y) {\n    // USB-C port\n    if(type == \"usb\") {\n        color([0.2, 0.2, 0.2])\n        translate([x, y, -1]) cube([8, 6, 5]);\n        color([0.1, 0.1, 0.1])\n        translate([x+1, y+1, -0.5]) cube([6, 4, 4]);\n    }\n    // 3.5mm audio jack\n    if(type == \"audio\") {\n        color([0.3, 0.3, 0.3])\n        translate([x, y, -1]) cylinder(h=5, d=6, $fn=20);\n        color([0.1, 0.1, 0.1])\n        translate([x, y, -0.5]) cylinder(h=4, d=3.5, $fn=20);\n    }\n}\n\nmodule speaker_grill(x, y) {\n    // Speaker grill pattern\n    difference() {\n        color([0.3, 0.3, 0.3])\n        translate([x, y, 2]) cube([20, 10, 1]);\n        for(i = [0:9]) {\n            for(j = [0:4]) {\n                translate([x+2+i*1.8, y+2+j*1.8, 2.5]) \n                cylinder(h=2, d=0.8, $fn=8);\n            }\n        }\n    }\n}\n\nmodule led_indicator(x, y, color_on) {\n    // Status LED\n    color([0.2, 0.2, 0.2])\n    translate([x, y, 2]) cylinder(h=0.5, d=4, $fn=16);\n    color(color_on)\n    translate([x, y, 2.6]) cylinder(h=0.3, d=2.5, $fn=16);\n}\n\n// Main body\ndifference() {\n    // Base enclosure\n    color([0.15, 0.15, 0.15])\n    cube([60, 40, 10], center=true);\n    \n    // Battery compartment\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, 4.5]) cube([50, 30, 2], center=true);\n    \n    // Cooling vents\n    for(i = [0:4]) {\n        translate([-25 + i*10, -20, 4])\n        cube([2, 5, 2]);\n    }\n}\n\n// Front face assembly\nscreen();\n\n// Control buttons\nbutton(-20, -10, \"Z1\");\nbutton(-20, -20, \"Z2\");\nbutton(-10, -10, \"Z3\");\nbutton(-10, -20, \"Z4\");\nbutton(10, -15, \"ALL\");\n\n// Speaker\nspeaker_grill(15, 5);\n\n// Status indicators\nled_indicator(25, -5, [0, 1, 0]);\nled_indicator(25, -10, [1, 0.5, 0]);\nled_indicator(25, -15, [1, 0, 0]);\n\n// Side ports\nport(\"usb\", 30, 15);\nport(\"audio\", 30, 8);\n\n// Branding\ncolor([0.8, 0.8, 0.8])\ntranslate([-25, 18, 5.1]) cube([12, 3, 0.5]);\n\n// Rubber feet\nfor(x = [-25, 25])\nfor(y = [-15, 15]) {\n    color([0.2, 0.2, 0.2])\n    translate([x, y, -5.2]) cylinder(h=1, d=4, $fn=16);\n}",
    "renders": true
  },
  {
    "electronic_device": "realm",
    "openscad_code": "// Realistic Realm Electronic Device - Android Phone\n// Medium complexity 3D printable model with functional details\n// Overall size: 80mm x 160mm x 10mm\n\n// Device parameters\nphone_width = 80;\nphone_height = 160;\nphone_depth = 10;\nscreen_bezel = 3;\ncorner_radius = 8;\n\n// Colors\ncolor_phone = [0.1, 0.1, 0.1];\ncolor_screen = [0.05, 0.05, 0.05];\ncolor_camera = [0.2, 0.2, 0.2];\ncolor_button = [0.15, 0.15, 0.15];\ncolor_ports = [0.3, 0.3, 0.3];\n\n// Main phone body\nmodule phone_body() {\n    color(color_phone)\n    difference() {\n        // Rounded body\n        minkowski() {\n            cube([phone_width - 2*corner_radius, phone_height - 2*corner_radius, phone_depth], center = true);\n            cylinder(r = corner_radius, h = phone_depth, center = true);\n        }\n        \n        // Screen cutout\n        translate([0, 0, phone_depth/2 - 0.1])\n            cube([phone_width - 2*screen_bezel, phone_height - 2*screen_bezel - 20, phone_depth + 0.2], center = true);\n    }\n}\n\n// Screen module\nmodule phone_screen() {\n    color(color_screen)\n    translate([0, 10, phone_depth/2 - 0.2])\n        cube([phone_width - 2*screen_bezel - 2, phone_height - 2*screen_bezel - 22, 0.5], center = true);\n}\n\n// Camera bump\nmodule camera_bump() {\n    color(color_phone)\n    translate([phone_width/2 - 15, phone_height/2 - 15, phone_depth/2 + 1])\n        cylinder(r = 12, h = 2, $fn = 32);\n    \n    // Camera lenses\n    color(color_camera)\n    for(i = [0:1]) {\n        translate([phone_width/2 - 19 + i*8, phone_height/2 - 15, phone_depth/2 + 3.1])\n            cylinder(r = 3, h = 0.5, $fn = 16);\n    }\n    \n    // Flash\n    translate([phone_width/2 - 11, phone_height/2 - 15, phone_depth/2 + 3.1])\n        cylinder(r = 2, h = 0.5, $fn = 16);\n}\n\n// Side buttons\nmodule side_buttons() {\n    color(color_button)\n    // Power button\n    translate([phone_width/2 + 0.1, 30, 0])\n        cube([1, 15, 3], center = true);\n    \n    // Volume buttons\n    translate([-phone_width/2 - 0.1, 20, 0])\n        cube([1, 20, 3], center = true);\n    translate([-phone_width/2 - 0.1, -10, 0])\n        cube([1, 20, 3], center = true);\n}\n\n// Speaker grill\nmodule speaker_grill() {\n    color(color_phone)\n    translate([0, -phone_height/2 + 10, phone_depth/2 - 0.5])\n        cube([60, 6, 1], center = true);\n    \n    // Holes\n    color([0, 0, 0])\n    for(i = [-5:5]) {\n        translate([i*5, -phone_height/2 + 10, phone_depth/2])\n            cylinder(r = 1, h = 2, $fn = 8);\n    }\n}\n\n// Charging port\nmodule charging_port() {\n    color(color_ports)\n    translate([0, -phone_height/2 - 0.1, -2])\n        cube([12, 1, 4], center = true);\n}\n\n// Microphone hole\nmodule microphone() {\n    color([0, 0, 0])\n    translate([15, -phone_height/2 - 0.1, 0])\n        cylinder(r = 1, h = 2, $fn = 8);\n}\n\n// Front camera\nmodule front_camera() {\n    color(color_camera)\n    translate([0, phone_height/2 - 30, phone_depth/2 - 0.2])\n        cylinder(r = 3, h = 0.5, $fn = 16);\n    \n    // Speaker slot\n    translate([0, phone_height/2 - 10, phone_depth/2 - 0.2])\n        cube([30, 3, 0.5], center = true);\n}\n\n// Assemble the phone\nunion() {\n    phone_body();\n    phone_screen();\n    camera_bump();\n    side_buttons();\n    speaker_grill();\n    charging_port();\n    microphone();\n    front_camera();\n}",
    "renders": true
  },
  {
    "electronic_device": "world",
    "openscad_code": "// World Electronic Device - GPS Navigator\n// Realistic style, medium complexity\n\n// Main dimensions\nbase_width = 60;\nbase_height = 100;\nbase_depth = 12;\nscreen_border = 3;\nbutton_height = 2;\nport_depth = 4;\n\n// Colors\n$fn = 32;\n\n// Main device body\nmodule device_body() {\n    difference() {\n        // Main rounded rectangle body\n        minkowski() {\n            cube([base_width, base_height, base_depth], center = true);\n            sphere(3);\n        }\n        \n        // Screen cutout\n        translate([0, 0, base_depth/2 + 0.1])\n        cube([base_width - 20, base_height - 30, base_depth + 1], center = true);\n    }\n}\n\n// Screen assembly\nmodule screen() {\n    // Screen glass\n    color([0.1, 0.1, 0.1, 0.8])\n    translate([0, 0, base_depth/2 + 1])\n    cube([base_width - 22, base_height - 32, 0.5], center = true);\n    \n    // Screen display\n    color([0.2, 0.2, 0.3])\n    translate([0, 0, base_depth/2 + 1.5])\n    cube([base_width - 24, base_height - 34, 0.3], center = true);\n    \n    // World map display\n    color([0.3, 0.5, 0.8])\n    translate([0, 0, base_depth/2 + 1.8])\n    cube([base_width - 26, base_height - 36, 0.1], center = true);\n}\n\n// Navigation buttons\nmodule buttons() {\n    // D-pad\n    color([0.2, 0.2, 0.2])\n    translate([0, -base_height/2 + 15, base_depth/2])\n    cylinder(h = button_height, r = 10);\n    \n    // Center button\n    color([0.5, 0.5, 0.5])\n    translate([0, -base_height/2 + 15, base_depth/2 + button_height])\n    cylinder(h = 0.5, r = 4);\n    \n    // Direction arrows\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, 6, base_depth/2 + button_height + 0.1])\n        color([0.1, 0.1, 0.1])\n        cube([2, 4, 0.3]);\n    }\n    \n    // Menu buttons\n    for(pos = [[-15, -base_height/2 + 8], [15, -base_height/2 + 8]]) {\n        color([0.3, 0.3, 0.3])\n        translate([pos[0], pos[1], base_depth/2])\n        cube([8, 4, button_height]);\n    }\n}\n\n// USB port\nmodule usb_port() {\n    color([0.1, 0.1, 0.1])\n    translate([0, base_height/2, 0])\n    difference() {\n        cube([12, port_depth, 6], center = true);\n        translate([0, port_depth/2, 0])\n        cube([10, port_depth, 4], center = true);\n    }\n}\n\n// Power button\nmodule power_button() {\n    color([0.8, 0, 0])\n    translate([base_width/2, base_height/2 - 10, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 4, r = 3);\n}\n\n// Speaker grill\nmodule speaker_grill() {\n    color([0.2, 0.2, 0.2])\n    translate([0, base_height/2 - 25, base_depth/2 - 1])\n    for(x = [-20:5:20]) {\n        translate([x, 0, 0])\n        cube([1, 8, 1]);\n    }\n}\n\n// Antenna\nmodule antenna() {\n    color([0.7, 0.7, 0.7])\n    translate([-base_width/2, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 15, r = 1);\n    \n    color([0.9, 0.9, 0.9])\n    translate([-base_width/2 - 15, 0, 0])\n    sphere(1.5);\n}\n\n// LED indicator\nmodule led_indicator() {\n    color([0, 1, 0])\n    translate([base_width/2 - 5, base_height/2 - 5, base_depth/2 + 0.5])\n    cylinder(h = 0.5, r = 1.5);\n    \n    // LED lens\n    color([0.2, 1, 0.2, 0.5])\n    translate([base_width/2 - 5, base_height/2 - 5, base_depth/2 + 1])\n    cylinder(h = 1, r = 2);\n}\n\n// GPS logo\nmodule gps_logo() {\n    color([0.1, 0.1, 0.1])\n    translate([0, base_height/2 - 40, base_depth/2 + 0.5])\n    cube([25, 8, 0.2]);\n}\n\n// Assemble the device\nunion() {\n    device_body();\n    screen();\n    buttons();\n    usb_port();\n    power_button();\n    speaker_grill();\n    antenna();\n    led_indicator();\n    gps_logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "galaxy",
    "openscad_code": "// Galaxy S24 Ultra-inspired smartphone model\n// Dimensions: 79mm x 163mm x 8.6mm\n\n$fn = 36;\n\n// Main colors\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_body = [0.2, 0.2, 0.2];\ncolor_camera = [0.05, 0.05, 0.05];\ncolor_buttons = [0.3, 0.3, 0.3];\ncolor_ports = [0.15, 0.15, 0.15];\ncolor_flash = [0.9, 0.9, 0.7];\ncolor_indicator = [0.2, 0.8, 1.0];\n\n// Main body\nmodule phone_body() {\n    color(color_body)\n    difference() {\n        // Rounded rectangle body\n        hull() {\n            translate([0, 0, 0])\n                cube([75, 159, 8.6], center = true);\n            translate([0, 0, -3])\n                sphere(d = 75);\n            translate([0, 159, -3])\n                sphere(d = 75);\n            translate([75, 0, -3])\n                sphere(d = 75);\n            translate([75, 159, -3])\n                sphere(d = 75);\n        }\n        \n        // Screen cutout\n        translate([0, 0, 4.3])\n            cube([73, 157, 2], center = true);\n    }\n}\n\n// Screen with curved edges\nmodule screen() {\n    color(color_screen)\n    translate([0, 0, 4.4])\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                cube([72.5, 156.5, 0.2], center = true);\n            for(x = [-36.25, 36.25], y = [-78.25, 78.25]) {\n                translate([x, y, 0])\n                    sphere(d = 2);\n            }\n        }\n        // Camera hole punch\n        translate([25, 65, 0])\n            cylinder(h = 0.3, d = 5);\n    }\n}\n\n// Camera module\nmodule camera_module() {\n    color(color_body)\n    translate([-30, -70, -3.5])\n    cube([40, 40, 3], center = true);\n    \n    // Individual cameras\n    for(pos = [[-20, -20], [-20, 0], [0, -20], [0, 0]]) {\n        color(color_camera)\n        translate([-30 + pos[0], -70 + pos[1], -2.5])\n            cylinder(h = 2, d = 8);\n    }\n    \n    // Flash\n    color(color_flash)\n    translate([-30 + 20, -70 + 20, -2.5])\n        cube([6, 6, 2], center = true);\n    \n    // Laser AF\n    color(color_indicator)\n    translate([-30 + 20, -70 - 5, -2.5])\n        cube([2, 2, 2], center = true);\n}\n\n// Buttons\nmodule buttons() {\n    // Power button\n    color(color_buttons)\n    translate([38, -40, 0])\n        cube([2, 15, 1.5], center = true);\n    \n    // Volume buttons\n    for(i = [0, 1]) {\n        translate([38, 10 - i * 20, 0])\n            cube([2, 10, 1.5], center = true);\n    }\n}\n\n// Ports\nmodule ports() {\n    // USB-C port\n    color(color_ports)\n    translate([0, -79.5, -3])\n        cube([12, 2, 3], center = true);\n    \n    // Speaker holes\n    for(i = [-3:1:3]) {\n        translate([i * 4, -79.5, -3])\n            cylinder(h = 3, d = 1);\n    }\n    \n    // Microphone hole\n    translate([20, -79.5, -2])\n        cylinder(h = 2, d = 1);\n}\n\n// SIM tray\nmodule sim_tray() {\n    color(color_ports)\n    translate([38, 40, 0])\n    cube([2, 20, 0.5], center = true);\n}\n\n// Front sensors\nmodule front_sensors() {\n    // Earpiece speaker\n    color(color_ports)\n    translate([0, 72, 4.3])\n        cube([30, 2, 1], center = true);\n    \n    // Proximity sensor\n    color(color_indicator)\n    translate([-10, 72, 4.3])\n        cylinder(h = 1, d = 2);\n}\n\n// Assemble the phone\ntranslate([0, 0, 4.3])\nphone_body();\nscreen();\ncamera_module();\nbuttons();\nports();\nsim_tray();\nfront_sensors();",
    "renders": true
  },
  {
    "electronic_device": "universe",
    "openscad_code": "// Universe Electronic Device - Handheld Cosmic Map\n// A portable star-map and cosmic event detector\n\n// Main parameters\nbody_w = 45;\nbody_h = 85;\nbody_d = 12;\nscreen_w = 35;\nscreen_h = 55;\nwall_thickness = 1.5;\n\n// Color definitions\n$fn = 64;\n\nmodule device_body() {\n    // Main body shell\n    color([0.15, 0.15, 0.15])\n    difference() {\n        // Outer rounded shell\n        minkowski() {\n            cube([body_w, body_h, body_d], center = true);\n            sphere(2);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness])\n        minkowski() {\n            cube([body_w - 2*wall_thickness, body_h - 2*wall_thickness, body_d], center = true);\n            sphere(1.5);\n        }\n    }\n}\n\nmodule screen_assembly() {\n    // Recessed screen area\n    translate([0, 0, body_d/2 - 1])\n    difference() {\n        color([0.05, 0.05, 0.05])\n        cube([screen_w + 4, screen_h + 4, 2], center = true);\n        \n        // Screen display area\n        color([0, 0.1, 0.2])\n        translate([0, 0, 0.5])\n        cube([screen_w, screen_h, 1], center = true);\n    }\n    \n    // Star map dots on screen\n    for(y = [-24:6:24]) {\n        for(x = [-16:6:16]) {\n            if((x + y) % 12 == 0) {\n                translate([x, y, body_d/2 + 0.6])\n                color([1, 1, 0.8])\n                sphere(0.4);\n            }\n        }\n    }\n}\n\nmodule control_buttons() {\n    // D-pad style navigation\n    translate([-body_w/2 - 2, body_h/4, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 2, r = 8, $fn = 32);\n    \n    // Direction arrows on D-pad\n    for(angle = [0:90:270]) {\n        translate([-body_w/2 - 2, body_h/4 + 3, 0])\n        rotate([0, 0, angle])\n        translate([0, 5, 0])\n        color([0.3, 0.3, 0.3])\n        cube([2, 4, 0.5], center = true);\n    }\n    \n    // Action buttons\n    translate([body_w/2 + 2, body_h/4, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 2, r = 6, $fn = 32);\n    \n    // Button labels\n    translate([body_w/2 + 2, body_h/4 + 5, 0])\n    color([0.9, 0.9, 0.9])\n    cube([0.5, 0.5, 0.5], center = true);\n}\n\nmodule ports_and_sensors() {\n    // USB-C port\n    translate([0, -body_h/2 - 1, -body_d/4])\n    color([0.2, 0.2, 0.2])\n    cube([8, 2, 3], center = true);\n    \n    // Power indicator LED\n    translate([body_w/2 - 5, body_h/2 - 5, body_d/2 - 1])\n    color([0, 1, 0])\n    sphere(1);\n    \n    // Ambient light sensor\n    translate([-body_w/2 + 5, body_h/2 - 5, body_d/2 - 1])\n    color([0.8, 0.8, 0.8])\n    cylinder(h = 1, r = 2);\n}\n\nmodule antenna() {\n    // Retractable antenna on top\n    translate([0, body_h/2 + 3, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 15, r = 1.5, $fn = 16);\n    \n    // Antenna tip\n    translate([0, body_h/2 + 18, 0])\n    sphere(2);\n}\n\nmodule back_details() {\n    // Battery cover\n    translate([0, -body_h/4, -body_d/2 + 1])\n    color([0.25, 0.25, 0.25])\n    cube([body_w - 6, 30, 0.5], center = true);\n    \n    // Screw holes\n    for(pos = [[-body_w/2 + 8, -body_h/4], [body_w/2 - 8, -body_h/4]]) {\n        translate([pos[0], pos[1], -body_d/2 + 1])\n        cylinder(h = 2, r = 1, $fn = 16);\n    }\n    \n    // Ventilation slots\n    for(y = [-10:5:10]) {\n        translate([0, y, -body_d/2 + 0.5])\n        cube([body_w - 4, 1.5, 1], center = true);\n    }\n}\n\n// Assemble the complete device\nunion() {\n    device_body();\n    screen_assembly();\n    control_buttons();\n    ports_and_sensors();\n    antenna();\n    back_details();\n}",
    "renders": true
  },
  {
    "electronic_device": "metaverse",
    "openscad_code": "// Metaverse VR Headset - Realistic Medium Complexity\n// Overall dimensions: 100mm wide x 60mm deep x 50mm tall\n\n$fn = 50;\n\nmodule front_shell() {\n    difference() {\n        // Main curved shell\n        translate([0, 0, 0])\n        scale([1, 0.8, 0.6])\n        sphere(d=100);\n        \n        // Cut front face flat\n        translate([0, 0, -30])\n        cube([120, 120, 60], center=true);\n        \n        // Face opening\n        translate([0, 0, -10])\n        scale([1, 0.7, 0.5])\n        sphere(d=80);\n    }\n}\n\nmodule screen() {\n    // Display screen\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, 25])\n    cube([80, 40, 2], center=true);\n    \n    // Screen surface\n    color([0.2, 0.3, 0.5])\n    translate([0, 0, 26])\n    cube([78, 38, 0.5], center=true);\n}\n\nmodule sensors() {\n    // Position tracking sensors\n    for(i = [-1, 1]) {\n        color([0.1, 0.1, 0.1])\n        translate([i * 35, 0, 40])\n        cylinder(h=3, d=8);\n        \n        color([0.8, 0.8, 0.8])\n        translate([i * 35, 0, 42])\n        sphere(d=6);\n    }\n}\n\nmodule buttons() {\n    // Power button\n    color([0.2, 0.2, 0.2])\n    translate([-45, 20, 0])\n    rotate([0, 90, 0])\n    cylinder(h=5, d=8);\n    \n    // Volume buttons\n    for(i = [0, 1]) {\n        color([0.2, 0.2, 0.2])\n        translate([-45, 10 - i * 10, 0])\n        rotate([0, 90, 0])\n        cylinder(h=3, d=6);\n    }\n}\n\nmodule straps() {\n    // Left strap mount\n    color([0.1, 0.1, 0.1])\n    translate([-50, 0, 0])\n    rotate([0, 0, -30])\n    cube([20, 15, 5], center=true);\n    \n    // Right strap mount\n    translate([50, 0, 0])\n    rotate([0, 0, 30])\n    cube([20, 15, 5], center=true);\n    \n    // Top strap mount\n    translate([0, 30, 20])\n    rotate([30, 0, 0])\n    cube([15, 20, 5], center=true);\n}\n\nmodule face_padding() {\n    // Soft padding ring\n    color([0.3, 0.3, 0.3])\n    difference() {\n        translate([0, 0, -20])\n        cylinder(h=10, d1=90, d2=85);\n        \n        translate([0, 0, -25])\n        cylinder(h=20, d=60);\n    }\n}\n\nmodule usb_port() {\n    // USB-C port\n    color([0.1, 0.1, 0.1])\n    translate([0, -30, -5])\n    cube([12, 5, 6], center=true);\n    \n    // Port opening\n    color([0.05, 0.05, 0.05])\n    translate([0, -32.6, -5])\n    cube([10, 0.1, 4], center=true);\n}\n\nmodule logo() {\n    // Meta logo\n    color([0.8, 0.8, 0.8])\n    translate([0, 0, 28])\n    rotate([0, 180, 0])\n    linear_extrude(height=0.5) {\n        text(\"META\", size=8, halign=\"center\", valign=\"center\");\n    }\n}\n\nmodule cooling_vents() {\n    // Ventilation slots\n    for(i = [-2:2]) {\n        color([0.15, 0.15, 0.15])\n        translate([i * 15, 0, 15])\n        cube([3, 40, 2], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main body\n    color([0.2, 0.2, 0.2])\n    front_shell();\n    \n    // Internal components\n    screen();\n    sensors();\n    \n    // External features\n    buttons();\n    straps();\n    face_padding();\n    usb_port();\n    logo();\n    cooling_vents();\n}",
    "renders": true
  },
  {
    "electronic_device": "cyber",
    "openscad_code": "// Cyber handheld device – 80 mm long, 3D-printable, medium detail\n// All parts have >=1 mm walls and avoid extreme overhangs\n\n// Overall colors\ncolorScreen   = [0.1,0.1,0.1];\ncolorBody     = [0.15,0.15,0.15];\ncolorAccent   = [0.8,0.1,0.1];\ncolorPort     = [0.4,0.4,0.4];\n\n// Main body shell\nmodule bodyShell() {\n    difference() {\n        // Basic rounded rectangle block\n        hull() {\n            translate([-38,-22,0])  cylinder(d=10,h=8,$fn=20);\n            translate([ 38,-22,0])  cylinder(d=10,h=8,$fn=20);\n            translate([-38, 22,0])  cylinder(d=10,h=8,$fn=20);\n            translate([ 38, 22,0])  cylinder(d=10,h=8,$fn=20);\n        }\n        // Hollow it out\n        hull() {\n            translate([-36,-20,1])  cylinder(d=6,h=6,$fn=20);\n            translate([ 36,-20,1])  cylinder(d=6,h=6,$fn=20);\n            translate([-36, 20,1])  cylinder(d=6,h=6,$fn=20);\n            translate([ 36, 20,1])  cylinder(d=6,h=6,$fn=20);\n        }\n    }\n}\n\n// OLED display\nmodule screen() {\n    color(colorScreen)\n    translate([0,0,8.1])\n        cube([60,30,0.5],center=true);\n}\n\n// Hex-grid vent pattern\nmodule ventGrid() {\n    for(y=[-15:6:15])\n        for(x=[-30:7:30]) {\n            translate([x,y,8.1]) rotate([0,0,30])\n                color(colorBody)\n                cylinder(d=4,h=0.8,$fn=6);\n        }\n}\n\n// Soft-touch buttons\nmodule buttonRow() {\n    color(colorAccent)\n    for(i=[-2:2]) {\n        translate([i*10,-22,8.1])\n            cylinder(d=6,h=1,$fn=32);\n    }\n}\n\n// USB-C port\nmodule usbPort() {\n    color(colorPort)\n    translate([0,-22.5,4])\n        cube([8,2,4],center=true);\n}\n\n// Side grip ridges\nmodule gripRidges() {\n    color(colorBody)\n    for(z=[2:2:6])\n        translate([0,0,z]) {\n            hull() {\n                cube([80,1,0.5],center=true);\n                translate([0,-22,0]) cube([80,1,0.5],center=true);\n                translate([0, 22,0]) cube([80,1,0.5],center=true);\n            }\n        }\n}\n\n// Status LED\nmodule statusLed() {\n    color(colorAccent)\n    translate([35,0,8.1])\n        cylinder(d=3,h=1,$fn=20);\n}\n\n// Assembly\nunion() {\n    color(colorBody) bodyShell();\n    screen();\n    ventGrid();\n    buttonRow();\n    usbPort();\n    gripRidges();\n    statusLed();\n}",
    "renders": true
  },
  {
    "electronic_device": "neural",
    "openscad_code": "// Neuralink-style neural electronic device (realistic, medium complexity)\n// Dimensions: 80mm x 50mm x 15mm main body\n\n// Main body with rounded edges\nmodule main_body() {\n    color(\"silver\") {\n        // Main rectangular body with rounded top\n        hull() {\n            translate([0, 0, 0]) cube([80, 50, 10], center=true);\n            translate([0, 0, 2.5]) cube([76, 46, 5], center=true);\n            translate([0, 0, 5]) cube([72, 42, 5], center=true);\n        }\n        \n        // Rounded corners using cylinders\n        difference() {\n            cube([80, 50, 15], center=true);\n            translate([0, 0, 7.5]) cube([70, 40, 20], center=true);\n        }\n    }\n}\n\n// PCB connector array\nmodule neural_connectors() {\n    color(\"gold\") {\n        // Grid of 8x5 neural connectors\n        for (x = [-30:15:30]) {\n            for (y = [-20:10:20]) {\n                translate([x, y, -7.5]) {\n                    cylinder(h=5, r=1.5, $fn=16);\n                    translate([0, 0, 2.5]) sphere(r=1.5);\n                }\n            }\n        }\n    }\n}\n\n// Charging coil housing\nmodule charging_coil() {\n    color(\"darkslategray\") {\n        difference() {\n            translate([0, 0, 7.5]) cylinder(h=3, r=30, $fn=64);\n            translate([0, 0, 7.5]) cylinder(h=3.5, r=25, $fn=64);\n        }\n    }\n}\n\n// Status LED ring\nmodule status_led() {\n    color(\"blue\") {\n        rotate([90, 0, 0]) {\n            difference() {\n                torus(10, 1, 32, 16);\n                translate([0, 0, 1]) torus(10, 0.8, 32, 16);\n            }\n        }\n    }\n    \n    // LED diffuser\n    color(\"lightblue\", 0.6) {\n        rotate([90, 0, 0]) torus(10, 0.8, 32, 16);\n    }\n}\n\n// Wireless antenna window\nmodule antenna_window() {\n    color(\"black\", 0.8) {\n        translate([0, 17.5, 7.5]) cube([30, 5, 3], center=true);\n    }\n}\n\n// Micro-USB port\nmodule usb_port() {\n    color(\"black\") {\n        translate([-40, 10, 0]) cube([4, 8, 6], center=true);\n    }\n    \n    color(\"gold\") {\n        translate([-40, 10, 0]) cube([2, 6, 4], center=true);\n    }\n}\n\n// Registration marks for surgical placement\nmodule registration_marks() {\n    color(\"red\") {\n        for (pos = [[-35, -20], [35, -20], [-35, 20], [35, 20]]) {\n            translate([pos[0], pos[1], -7.5]) {\n                cylinder(h=1, r=2, $fn=8);\n                translate([0, 0, 0.5]) sphere(r=2);\n            }\n        }\n    }\n}\n\n// Neural logo engraving\nmodule neural_logo() {\n    color(\"white\") {\n        translate([0, 0, 7.6]) \n            linear_extrude(height=0.5) \n                text(\"N\", size=8, halign=\"center\", valign=\"center\", font=\"Arial:style=Bold\");\n    }\n}\n\n// Helper module for torus\nmodule torus(outer_r, inner_r, outer_fn, inner_fn) {\n    rotate_extrude($fn=outer_fn) {\n        translate([outer_r, 0, 0]) {\n            circle(r=inner_r, $fn=inner_fn);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    neural_connectors();\n    charging_coil();\n    status_led();\n    antenna_window();\n    usb_port();\n    registration_marks();\n    neural_logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "ai",
    "openscad_code": "// AI Edge Device\n// Small TPU-equipped accelerator for on-device inference\n\n$fn = 64;\n\n// Overall dimensions\ndevice_w = 40;\ndevice_d = 50;\ndevice_h = 20;\n\n// Shell thickness\nwall = 1.5;\n\n// Module for hexagonal ventilation holes\nmodule hex_hole(r=2.5, h=20) {\n    linear_extrude(h)\n        polygon(points=[\n            for(i=[0:5]) [r*cos(i*60), r*sin(i*60)]\n        ]);\n}\n\n// Main enclosure\nmodule enclosure() {\n    difference() {\n        // Outer shell\n        minkowski() {\n            cube([device_w, device_d, device_h], center=true);\n            sphere(r=1.5);\n        }\n        \n        // Inner cavity\n        minkowski() {\n            cube([device_w-wall*2, device_d-wall*2, device_h-wall], center=true);\n            sphere(r=0.5);\n        }\n        \n        // Ventilation holes on top\n        for(x=[-12:6:12])\n            for(y=[-18:6:18])\n                translate([x, y, device_h/2-0.1])\n                    hex_hole(r=1.5, h=wall+0.2);\n    }\n}\n\n// USB-C port\nmodule usbc_port() {\n    translate([device_w/2+0.1, -10, 0])\n        rotate([0,90,0])\n        color(\"black\")\n        difference() {\n            cube([8, 6, 2.5], center=true);\n            translate([0,0,1.25])\n                cube([7, 5, 2.5], center=true);\n        }\n}\n\n// Status LEDs\nmodule leds() {\n    for(i=[0:2]) {\n        translate([device_w/2-5, 15-i*5, device_h/2-1])\n            color(\"darkblue\")\n            cylinder(h=1.5, r=1, center=true);\n    }\n}\n\n// Heat sink fins\nmodule heatsink() {\n    color(\"silver\")\n    for(i=[-1:1])\n        translate([i*10, 0, -device_h/2+wall+0.5])\n            cube([2, device_d-wall*2, 5], center=true);\n}\n\n// Antenna module\nmodule antenna() {\n    translate([0, device_d/2+3, 0])\n    union() {\n        color(\"black\")\n        cube([6, 6, 2], center=true);\n        translate([0, 3, 0])\n            color(\"silver\")\n            cube([0.5, 6, 8], center=true);\n    }\n}\n\n// Reset button\nmodule reset_button() {\n    translate([-device_w/2+2, 0, 0])\n        color(\"red\")\n        translate([0, 0, -device_h/2+wall+1])\n            cylinder(h=3, r=2);\n}\n\n// Main assembly\nenclosure();\nusbc_port();\nleds();\nheatsink();\nantenna();\nreset_button();",
    "renders": true
  },
  {
    "electronic_device": "bot",
    "openscad_code": "// OpenSCAD code for a realistic medium-complexity bot electronic device\n// A small wheeled inspection bot with screen, antenna, and sensors\n\n$fn=50;\n\n// Main dimensions (mm)\nbot_length = 70;\nbot_width = 55;\nbot_height = 35;\nwall_thickness = 2;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.25];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_light = [0.9, 0.9, 0.2];\ncolor_wheel = [0.1, 0.1, 0.1];\ncolor_antenna = [0.8, 0.8, 0.8];\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Main body block\n        color(color_body)\n        rounded_box(bot_length, bot_width, bot_height, 5);\n        \n        // Hollow out for electronics\n        translate([0, 0, wall_thickness])\n        rounded_box(bot_length-2*wall_thickness, bot_width-2*wall_thickness, bot_height-wall_thickness, 3);\n        \n        // Screen cutout\n        translate([bot_length/2-15, -bot_width/4, bot_height-1])\n        cube([20, 15, wall_thickness+1], center=false);\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        for(x=[-l/2+r, l/2-r])\n        for(y=[-w/2+r, w/2-r])\n        for(z=[-h/2+r, h/2-r])\n        translate([x,y,z])\n        sphere(r=r);\n    }\n}\n\n// Screen display\nmodule screen() {\n    translate([bot_length/2-15, -bot_width/4, bot_height-wall_thickness])\n    color(color_screen)\n    cube([20, 15, 0.5], center=false);\n    \n    // Screen bezel\n    translate([bot_length/2-15, -bot_width/4, bot_height-0.5])\n    color([0.5,0.5,0.5])\n    cube([20, 15, 0.5], center=false);\n}\n\n// Control buttons\nmodule buttons() {\n    for(i=[0:2]) {\n        translate([bot_length/2-30, -bot_width/2+10+i*8, bot_height-1])\n        color([0.1,0.1,0.1])\n        cylinder(h=2, r=3);\n    }\n}\n\n// LED status lights\nmodule status_lights() {\n    // Front LED\n    translate([bot_length/2-2, 0, bot_height/2])\n    color(color_light)\n    sphere(r=2);\n    \n    // Rear LED\n    translate([-bot_length/2+2, 0, bot_height/2])\n    color(color_light)\n    sphere(r=2);\n}\n\n// Antenna assembly\nmodule antenna() {\n    translate([0, -bot_width/4, bot_height+2])\n    rotate([0,10,0])\n    union() {\n        // Base\n        color(color_body)\n        cylinder(h=3, r=4);\n        \n        // Mast\n        translate([0,0,3])\n        color(color_antenna)\n        cylinder(h=15, r=1);\n        \n        // Top\n        translate([0,0,18])\n        color(color_antenna)\n        sphere(r=2);\n    }\n}\n\n// Sensor array\nmodule sensors() {\n    // Ultrasonic sensor\n    translate([bot_length/2-5, 0, bot_height/2])\n    union() {\n        color([0.3,0.3,0.3])\n        cube([8, 12, 6], center=true);\n        \n        // Sensor eyes\n        translate([3, -3, 3.5])\n        color([0.1,0.1,0.1])\n        cylinder(h=1, r=1.5);\n        \n        translate([3, 3, 3.5])\n        color([0.1,0.1,0.1])\n        cylinder(h=1, r=1.5);\n    }\n    \n    // IR sensor\n    translate([bot_length/2-5, 0, bot_height/2-8])\n    color([0.1,0.1,0.1])\n    cube([4, 4, 2], center=true);\n}\n\n// Wheels with tread pattern\nmodule wheels() {\n    module wheel() {\n        rotate([90,0,0])\n        difference() {\n            // Main wheel\n            color(color_wheel)\n            cylinder(h=8, r=12);\n            \n            // Hollow center\n            cylinder(h=9, r=4);\n            \n            // Tread pattern\n            for(i=[0:7]) {\n                rotate([0,0,i*45])\n                translate([0,12.5,4])\n                cube([2, 1, 8], center=true);\n            }\n        }\n    }\n    \n    // Left wheels\n    translate([-bot_length/4, -bot_width/2-6, 6])\n    wheel();\n    translate([bot_length/4, -bot_width/2-6, 6])\n    wheel();\n    \n    // Right wheels\n    translate([-bot_length/4, bot_width/2+6, 6])\n    wheel();\n    translate([bot_length/4, bot_width/2+6, 6])\n    wheel();\n}\n\n// Charging port\nmodule charging_port() {\n    translate([-bot_length/2+2, bot_width/4, bot_height/2-5])\n    difference() {\n        color([0.2,0.2,0.2])\n        cube([4, 6, 3], center=true);\n        \n        // Port hole\n        translate([0,0,-1])\n        cylinder(h=5, r=1.5);\n    }\n}\n\n// Assembly\nbody_shell();\nscreen();\nbuttons();\nstatus_lights();\nantenna();\nsensors();\nwheels();\ncharging_port();",
    "renders": true
  },
  {
    "electronic_device": "npc",
    "openscad_code": "// NPC Portable Gaming Console - Realistic Style\n// Dimensions: 120 x 60 x 25 mm\n\n// Main body color\ncolor([0.1, 0.1, 0.1]) \n\nmodule console_body() {\n    // Main shell with rounded edges\n    difference() {\n        // Outer shell\n        minkowski() {\n            cube([110, 55, 20], center=true);\n            sphere(3);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([104, 49, 16], center=true);\n            sphere(2);\n        }\n    }\n}\n\nmodule screen() {\n    // Screen bezel\n    translate([0, 10, 10])\n    color([0.15, 0.15, 0.15])\n    cube([80, 45, 1.5], center=true);\n    \n    // LCD screen\n    translate([0, 10, 11.5])\n    color([0.05, 0.05, 0.05])\n    cube([74, 39, 0.5], center=true);\n    \n    // Screen protector\n    translate([0, 10, 12])\n    color([0.3, 0.3, 0.4, 0.3])\n    cube([74, 39, 0.2], center=true);\n}\n\nmodule dpad() {\n    // D-pad base\n    translate([-35, -15, 10])\n    color([0.2, 0.2, 0.2])\n    cube([15, 15, 2], center=true);\n    \n    // D-pad cross\n    for(pos = [[-35, -15, 11.5], [-35, -15, 11.5]]) {\n        translate(pos)\n        rotate([0, 0, 0])\n        color([0.15, 0.15, 0.15])\n        cube([3, 13, 1.5], center=true);\n        \n        translate(pos)\n        rotate([0, 0, 90])\n        color([0.15, 0.15, 0.15])\n        cube([3, 13, 1.5], center=true);\n    }\n}\n\nmodule action_buttons() {\n    // Button cluster base\n    translate([35, -15, 10])\n    color([0.2, 0.2, 0.2])\n    cube([15, 15, 2], center=true);\n    \n    // Individual buttons\n    button_positions = [\n        [31, -11, 11.5],  // A\n        [39, -11, 11.5],  // B\n        [31, -19, 11.5],  // X\n        [39, -19, 11.5]   // Y\n    ];\n    \n    for(pos = button_positions) {\n        translate(pos)\n        color([0.9, 0.1, 0.1])  // Red buttons\n        cylinder(h=1.5, r=3, $fn=16);\n    }\n}\n\nmodule shoulder_buttons() {\n    // L button\n    translate([-50, 0, 8])\n    rotate([0, 90, 0])\n    color([0.3, 0.3, 0.3])\n    cylinder(h=15, r1=3, r2=3, $fn=16);\n    \n    // R button\n    translate([50, 0, 8])\n    rotate([0, 90, 0])\n    color([0.3, 0.3, 0.3])\n    cylinder(h=15, r1=3, r2=3, $fn=16);\n}\n\nmodule speaker_grills() {\n    // Speaker holes on bottom\n    for(i = [0:5]) {\n        translate([-25 + i*8, -22, 10])\n        color([0.05, 0.05, 0.05])\n        cube([2, 8, 1], center=true);\n    }\n    \n    for(i = [0:5]) {\n        translate([25 - i*8, -22, 10])\n        color([0.05, 0.05, 0.05])\n        cube([2, 8, 1], center=true);\n    }\n}\n\nmodule ports() {\n    // Headphone jack\n    translate([-45, -25, 0])\n    rotate([90, 0, 0])\n    color([0.1, 0.1, 0.1])\n    cylinder(h=5, r=3.5, $fn=20);\n    \n    // USB-C port\n    translate([0, -25, 0])\n    rotate([90, 0, 0])\n    color([0.1, 0.1, 0.1])\n    cube([8, 2.5, 5], center=true);\n    \n    // Power LED\n    translate([40, -25, 10])\n    color([0, 1, 0])\n    cylinder(h=1, r=2, $fn=16);\n}\n\nmodule volume_rocker() {\n    // Volume buttons on side\n    translate([55, 5, 5])\n    rotate([0, 90, 0])\n    color([0.3, 0.3, 0.3])\n    cube([8, 3, 6], center=true);\n    \n    translate([55, 0, 5])\n    rotate([0, 90, 0])\n    color([0.3, 0.3, 0.3])\n    cube([8, 3, 6], center=true);\n}\n\n// Assembly\nunion() {\n    console_body();\n    screen();\n    dpad();\n    action_buttons();\n    shoulder_buttons();\n    speaker_grills();\n    ports();\n    volume_rocker();\n}",
    "renders": true
  },
  {
    "electronic_device": "avatar",
    "openscad_code": "// Avatar Electronic Device - Realistic Style\n// Medium complexity 3D printable model\n\n// Device dimensions (mm)\ndevice_width = 80;\ndevice_height = 120;\ndevice_depth = 12;\n\n// Screen dimensions\nscreen_width = 65;\nscreen_height = 85;\nscreen_depth = 1;\n\n// Button parameters\nbutton_radius = 4;\nbutton_height = 2;\nbutton_spacing = 10;\n\n// Port dimensions\nport_width = 8;\nport_height = 3;\nport_depth = 5;\n\n// Colors\ndevice_color = \"DodgerBlue\";\nscreen_color = \"Black\";\nbutton_color = \"WhiteSmoke\";\nport_color = \"Gray\";\n\nmodule device_body() {\n    color(device_color)\n    difference() {\n        // Main body with rounded edges\n        minkowski() {\n            cube([device_width, device_height, device_depth], center=true);\n            sphere(2);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1])\n        cube([device_width-4, device_height-4, device_depth+2], center=true);\n    }\n}\n\nmodule screen() {\n    color(screen_color)\n    translate([0, 0, device_depth/2 + screen_depth/2 - 0.5])\n    cube([screen_width, screen_height, screen_depth], center=true);\n    \n    // Screen bezel\n    color(device_color)\n    translate([0, 0, device_depth/2 + screen_depth/2 - 1])\n    cube([screen_width + 4, screen_height + 4, 1], center=true);\n}\n\nmodule home_button() {\n    color(button_color)\n    translate([0, -device_height/2 + 15, device_depth/2 + button_height/2])\n    cylinder(h=button_height, r=button_radius, center=true);\n}\n\nmodule volume_buttons() {\n    color(button_color)\n    // Volume up button\n    translate([device_width/2 + 1, 20, 0])\n    rotate([0, 90, 0])\n    cylinder(h=3, r=2, center=true);\n    \n    // Volume down button\n    translate([device_width/2 + 1, 10, 0])\n    rotate([0, 90, 0])\n    cylinder(h=3, r=2, center=true);\n}\n\nmodule power_button() {\n    color(button_color)\n    translate([device_width/2 + 1, device_height/2 - 20, 0])\n    rotate([0, 90, 0])\n    cylinder(h=4, r=2.5, center=true);\n}\n\nmodule charging_port() {\n    color(port_color)\n    translate([0, -device_height/2 - 0.5, -device_depth/2 + port_depth/2])\n    cube([port_width, port_depth, port_height], center=true);\n}\n\nmodule speaker_grill() {\n    color(\"Black\")\n    translate([0, device_height/2 - 5, device_depth/2 - 1])\n    for(i = [-2:2]) {\n        translate([i * 5, 0, 0])\n        cube([1, 8, 0.5], center=true);\n    }\n}\n\nmodule camera() {\n    color(\"Black\")\n    translate([device_width/2 - 10, device_height/2 - 10, device_depth/2])\n    cylinder(h=1, r=3, center=true);\n    \n    // Camera ring\n    color(\"Silver\")\n    translate([device_width/2 - 10, device_height/2 - 10, device_depth/2])\n    cylinder(h=1.5, r=4, center=true);\n}\n\nmodule logo() {\n    color(\"White\")\n    translate([0, 0, device_depth/2 + 0.1])\n    linear_extrude(height=0.5)\n    text(\"AVATAR\", size=6, halign=\"center\", valign=\"center\");\n}\n\n// Assemble the device\nunion() {\n    device_body();\n    screen();\n    home_button();\n    volume_buttons();\n    power_button();\n    charging_port();\n    speaker_grill();\n    camera();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "emote",
    "openscad_code": "// Realistic Emote Electronic Device - Medium Complexity\n// A handheld streaming/emote reaction device with screen and buttons\n\n// Overall dimensions\ndevice_width = 45;\ndevice_height = 85;\ndevice_thickness = 12;\n\n// Screen dimensions\nscreen_width = 35;\nscreen_height = 45;\nscreen_depth = 1;\n\n// Colors\n$fn = 32;\n\nmodule rounded_cube(size, radius) {\n    // Create a rounded cube for comfortable holding\n    hull() {\n        for(i = [[0,0,0], [0,0,1], [0,1,0], [0,1,1], [1,0,0], [1,0,1], [1,1,0], [1,1,1]]) {\n            translate([i[0]*size[0], i[1]*size[1], i[2]*size[2]])\n                sphere(radius);\n        }\n    }\n}\n\nmodule main_body() {\n    // Main device body with rounded edges\n    color([0.2, 0.2, 0.2]) {\n        difference() {\n            rounded_cube([device_width, device_height, device_thickness], 4);\n            \n            // Hollow out the inside\n            translate([2, 2, 2]) \n                rounded_cube([device_width-4, device_height-4, device_thickness-2], 2);\n        }\n    }\n}\n\nmodule screen() {\n    // LCD display with glass surface\n    translate([0, 10, device_thickness/2 - 0.5]) {\n        // Screen bezel\n        color([0.1, 0.1, 0.1]) \n            cube([screen_width + 4, screen_height + 4, screen_depth], center=true);\n        \n        // Actual screen\n        color([0.05, 0.05, 0.05]) \n            translate([0, 0, 0.6]) \n                cube([screen_width, screen_height, 0.5], center=true);\n        \n        // Glass layer\n        color([0.3, 0.5, 0.8, 0.4]) \n            translate([0, 0, 1]) \n                cube([screen_width + 1, screen_height + 1, 0.2], center=true);\n    }\n}\n\nmodule buttons() {\n    // Directional pad and action buttons\n    \n    // D-pad (cross shape)\n    translate([-device_width/2 + 8, -device_height/2 + 25, device_thickness/2]) {\n        color([0.3, 0.3, 0.3]) {\n            // Vertical bar\n            cube([6, 20, 2], center=true);\n            // Horizontal bar\n            cube([20, 6, 2], center=true);\n        }\n    }\n    \n    // Action buttons (A, B)\n    for(pos = [[device_width/2 - 8, -device_height/2 + 30], \n               [device_width/2 - 8, -device_height/2 + 15]]) {\n        translate([pos[0], pos[1], device_thickness/2]) {\n            color([0.9, 0.1, 0.1]) \n                cylinder(h=2, r=4, center=true);\n        }\n    }\n}\n\nmodule speakers() {\n    // Speaker grills at bottom\n    translate([0, -device_height/2 + 8, device_thickness/2 - 1]) {\n        for(i = [-10:5:10]) {\n            color([0.15, 0.15, 0.15]) \n                translate([i, 0, 0]) \n                    cube([3, 8, 1], center=true);\n        }\n    }\n}\n\nmodule power_button() {\n    // Side power button\n    translate([device_width/2, 0, 0]) {\n        rotate([0, 90, 0]) {\n            color([0.8, 0.8, 0.8]) \n                cylinder(h=8, r=2, center=true);\n        }\n    }\n}\n\nmodule volume_rocker() {\n    // Volume up/down buttons\n    translate([-device_width/2, 10, 0]) {\n        rotate([0, 90, 0]) {\n            color([0.7, 0.7, 0.7]) {\n                // Volume up\n                translate([0, -3, 0]) \n                    cylinder(h=5, r=2, center=true);\n                // Volume down\n                translate([0, 3, 0]) \n                    cylinder(h=5, r=2, center=true);\n            }\n        }\n    }\n}\n\nmodule charging_port() {\n    // USB-C port at bottom\n    translate([0, -device_height/2 + 3, 0]) {\n        color([0.1, 0.1, 0.1]) \n            cube([8, 4, 3], center=true);\n    }\n}\n\nmodule status_led() {\n    // LED indicator near screen\n    translate([0, -device_height/2 + 35, device_thickness/2]) {\n        color([0, 1, 0, 0.8]) \n            sphere(r=1.5);\n    }\n}\n\nmodule antenna_lines() {\n    // Realistic antenna bands\n    for(y = [-device_height/4, device_height/4]) {\n        color([0.25, 0.25, 0.25]) {\n            translate([0, y, device_thickness/2]) \n                cube([device_width, 1, 2], center=true);\n        }\n    }\n}\n\n// Assemble the device\nmain_body();\nscreen();\nbuttons();\nspeakers();\npower_button();\nvolume_rocker();\ncharging_port();\nstatus_led();\nantenna_lines();",
    "renders": true
  },
  {
    "electronic_device": "taunt",
    "openscad_code": "// Taunt Electronic Device - Handheld Gaming Console Style\n// Realistic style with medium complexity\n\n// Color definitions\n$fn = 50;\n\n// Main body dimensions\nbody_width = 85;\nbody_height = 45;\nbody_depth = 15;\nwall_thickness = 2;\n\n// Screen dimensions\nscreen_width = 60;\nscreen_height = 35;\nscreen_depth = 1;\nscreen_offset = 3;\n\n// Button dimensions\nbutton_diameter = 8;\nbutton_height = 2;\nd_pad_size = 20;\nd_pad_height = 2;\n\n// Port dimensions\nport_width = 12;\nport_height = 4;\nport_depth = 3;\n\n// LED indicator\nled_diameter = 3;\nled_height = 1;\n\n// Main body module\nmodule main_body() {\n    difference() {\n        // Outer shell\n        color([0.2, 0.2, 0.2])\n        cube([body_width, body_height, body_depth], center=true);\n        \n        // Hollow interior\n        color([0.1, 0.1, 0.1])\n        cube([body_width-wall_thickness*2, body_height-wall_thickness*2, body_depth-wall_thickness], center=true);\n        \n        // Screen cutout\n        translate([0, screen_offset, body_depth/2])\n        cube([screen_width, screen_height, screen_depth+1], center=true);\n        \n        // Charging port\n        translate([body_width/2-1, -5, -body_depth/4])\n        cube([port_depth+1, port_width, port_height], center=true);\n        \n        // Headphone jack\n        translate([-body_width/2+1, -5, -body_depth/4])\n        rotate([90, 0, 0])\n        cylinder(h=port_depth+1, r=3.5, center=true);\n    }\n}\n\n// Screen assembly\nmodule screen() {\n    // Screen bezel\n    color([0.1, 0.1, 0.1])\n    translate([0, screen_offset, body_depth/2-0.5])\n    cube([screen_width+4, screen_height+4, 1], center=true);\n    \n    // LCD display\n    color([0.05, 0.05, 0.05])\n    translate([0, screen_offset, body_depth/2])\n    cube([screen_width, screen_height, 0.5], center=true);\n    \n    // Screen glare effect\n    color([0.3, 0.3, 0.4, 0.5])\n    translate([screen_width/4, screen_offset+screen_height/4, body_depth/2+0.1])\n    cube([screen_width/2, screen_height/4, 0.1], center=true);\n}\n\n// D-pad module\nmodule d_pad() {\n    // Base\n    color([0.15, 0.15, 0.15])\n    translate([-25, -10, body_depth/2])\n    cube([d_pad_size, d_pad_size, d_pad_height], center=true);\n    \n    // Cross shape\n    color([0.3, 0.3, 0.3])\n    for(i = [-1, 1]) {\n        translate([-25+i*d_pad_size/4, -10, body_depth/2+d_pad_height/2])\n        cube([d_pad_size/2, d_pad_size/4, d_pad_height/2], center=true);\n        \n        translate([-25, -10+i*d_pad_size/4, body_depth/2+d_pad_height/2])\n        cube([d_pad_size/4, d_pad_size/2, d_pad_height/2], center=true);\n    }\n}\n\n// Action buttons\nmodule action_buttons() {\n    for(i = [0:3]) {\n        angle = i*90;\n        x = 25 + 8*cos(angle);\n        y = 10 + 8*sin(angle);\n        \n        // Button base\n        color([0.15, 0.15, 0.15])\n        translate([x, y, body_depth/2])\n        cylinder(h=button_height+1, r=button_diameter/2+1, center=true);\n        \n        // Button top\n        color([0.8, 0.1, 0.1])\n        translate([x, y, body_depth/2+button_height/2+0.5])\n        cylinder(h=button_height, r=button_diameter/2, center=true);\n    }\n}\n\n// Power button\nmodule power_button() {\n    color([0.2, 0.2, 0.2])\n    translate([0, -body_height/2+5, body_depth/4])\n    cube([15, 3, 3], center=true);\n}\n\n// LED indicators\nmodule led_indicators() {\n    // Power LED\n    color([0, 1, 0])\n    translate([body_width/2-8, body_height/2-5, body_depth/2])\n    cylinder(h=led_height, r=led_diameter/2, center=true);\n    \n    // Battery LED\n    color([1, 1, 0])\n    translate([body_width/2-15, body_height/2-5, body_depth/2])\n    cylinder(h=led_height, r=led_diameter/2, center=true);\n}\n\n// Speaker grills\nmodule speaker_grills() {\n    for(side = [-1, 1]) {\n        color([0.1, 0.1, 0.1])\n        translate([side*30, -body_height/2+8, body_depth/4])\n        cube([20, 8, 2], center=true);\n        \n        // Grill holes\n        for(i = [-3:3]) {\n            color([0.05, 0.05, 0.05])\n            translate([side*30+i*2.5, -body_height/2+8, body_depth/4+1])\n            cylinder(h=3, r=0.5, center=true);\n        }\n    }\n}\n\n// Brand logo\nmodule logo() {\n    color([0.7, 0.7, 0.7])\n    translate([0, body_height/2-3, body_depth/2])\n    cube([20, 4, 0.5], center=true);\n}\n\n// Assemble the device\nunion() {\n    main_body();\n    screen();\n    d_pad();\n    action_buttons();\n    power_button();\n    led_indicators();\n    speaker_grills();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "spray",
    "openscad_code": "// Realistic Electronic Spray Bottle Module\n// Medium complexity, 3D-printable, ~80mm tall\n\n// Main colors\n$fn = 50; // Smooth curves\n\n// Bottle dimensions\nbottle_height = 80;\nbottle_diameter = 35;\nwall_thickness = 2;\nwindow_height = 15;\nwindow_width = 25;\n\n// Cap dimensions\ncap_height = 12;\ncap_diameter = 38;\nnozzle_length = 8;\nnozzle_diameter = 6;\n\n// Electronics\nscreen_width = 18;\nscreen_height = 8;\nbutton_diameter = 4;\nled_diameter = 2;\n\n// Bottle body with screen window\nmodule bottle_body() {\n    difference() {\n        // Main bottle\n        color([0.2, 0.2, 0.2])\n        cylinder(h = bottle_height, d = bottle_diameter);\n        \n        // Screen window\n        translate([bottle_diameter/2 - 1, 0, bottle_height/2])\n        rotate([0, 90, 0])\n        cube([window_height, window_width, wall_thickness + 1], center = true);\n        \n        // Internal cavity\n        translate([0, 0, wall_thickness])\n        cylinder(h = bottle_height - wall_thickness, d = bottle_diameter - 2*wall_thickness);\n        \n        // Fill opening\n        translate([0, 0, bottle_height])\n        cylinder(h = 10, d = 15);\n    }\n}\n\n// OLED screen\nmodule display() {\n    translate([bottle_diameter/2 - wall_thickness/2, 0, bottle_height/2])\n    rotate([0, 90, 0])\n    color([0, 0, 0])\n    cube([window_height - 2, window_width - 2, 0.5], center = true);\n    \n    // Screen border\n    translate([bottle_diameter/2 - wall_thickness/2, 0, bottle_height/2])\n    rotate([0, 90, 0])\n    color([0.3, 0.3, 0.3])\n    cube([window_height, window_width, 0.6], center = true);\n}\n\n// Control buttons\nmodule buttons() {\n    for(i = [0:1]) {\n        translate([bottle_diameter/2 - 5, -6 + i*12, bottle_height/2 - 10])\n        color([0.1, 0.1, 0.1])\n        cylinder(h = 1, d = button_diameter);\n    }\n}\n\n// Status LED\nmodule status_led() {\n    translate([bottle_diameter/2 - 3, 0, bottle_height/2 + 10])\n    color([0, 1, 0])\n    cylinder(h = 0.5, d = led_diameter);\n}\n\n// Spray cap with nozzle\nmodule spray_cap() {\n    union() {\n        // Main cap\n        color([0.8, 0.8, 0.8])\n        cylinder(h = cap_height, d = cap_diameter);\n        \n        // Nozzle\n        translate([cap_diameter/2 + nozzle_length/2 - 2, 0, cap_height/2])\n        rotate([0, 90, 0])\n        color([0.7, 0.7, 0.7])\n        cylinder(h = nozzle_length, d = nozzle_diameter);\n        \n        // Nozzle tip hole\n        translate([cap_diameter/2 + nozzle_length, 0, cap_height/2])\n        rotate([0, 90, 0])\n        color([0.1, 0.1, 0.1])\n        cylinder(h = 1, d = 1);\n    }\n}\n\n// USB-C port\nmodule usbc_port() {\n    translate([0, -bottle_diameter/2 + 1, 10])\n    color([0.1, 0.1, 0.1])\n    cube([8, 2, 3], center = true);\n}\n\n// Grip texture pattern\nmodule grip_pattern() {\n    for(i = [0:5:350]) {\n        rotate([0, 0, i])\n        translate([bottle_diameter/2 - wall_thickness, 0, 5])\n        cube([0.5, 1, 50], center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\nbottle_body();\n\ntranslate([0, 0, 0])\ndisplay();\n\ntranslate([0, 0, 0])\nbuttons();\n\ntranslate([0, 0, 0])\nstatus_led();\n\ntranslate([0, 0, bottle_height - wall_thickness])\nspray_cap();\n\ntranslate([0, 0, 0])\nusbc_port();\n\n// Apply grip texture\ntranslate([0, 0, 0])\ngrip_pattern();",
    "renders": true
  },
  {
    "electronic_device": "sticker",
    "openscad_code": "// Sticker-style Smartphone - 3D Printable Model\n// Model dimensions: 80mm x 45mm x 5mm\n\n// Main color scheme\nphone_color = \"silver\";\nscreen_color = \"black\";\naccent_color = \"blue\";\n\n// Wall thickness for 3D printing\nwall_thickness = 1.2;\n\nmodule phone_body() {\n    // Main phone chassis\n    color(phone_color) {\n        // Base phone body with rounded edges\n        translate([0, 0, 0]) {\n            minkowski() {\n                cube([75, 40, 3], center = true);\n                cylinder(h = 0.1, r = 2, $fn = 20);\n            }\n        }\n        \n        // Side frame\n        translate([0, 0, 1.5]) {\n            difference() {\n                cube([80, 45, 3], center = true);\n                cube([76, 41, 3.1], center = true);\n            }\n        }\n    }\n}\n\nmodule screen() {\n    // Screen surface\n    color(screen_color) {\n        translate([0, 0, 3]) {\n            cube([70, 38, 0.5], center = true);\n        }\n    }\n    \n    // Screen display area (slightly recessed)\n    color([0.1, 0.1, 0.1]) {\n        translate([0, 0, 3.3]) {\n            cube([68, 36, 0.2], center = true);\n        }\n    }\n}\n\nmodule home_button() {\n    // Physical home button\n    color(phone_color) {\n        translate([0, -17, 3.5]) {\n            cylinder(h = 0.8, r = 3, $fn = 32);\n        }\n    }\n    \n    // Home button indicator\n    color(\"white\") {\n        translate([0, -17, 4.2]) {\n            cube([2, 1, 0.1], center = true);\n        }\n    }\n}\n\nmodule camera_module() {\n    // Camera bump\n    color(phone_color) {\n        translate([-25, 15, 3.5]) {\n            cylinder(h = 1, r = 4, $fn = 32);\n        }\n    }\n    \n    // Camera lens\n    color(\"black\") {\n        translate([-25, 15, 4.6]) {\n            cylinder(h = 0.3, r = 2.5, $fn = 32);\n        }\n    }\n    \n    // Camera lens ring\n    color(\"gray\") {\n        translate([-25, 15, 4.5]) {\n            cylinder(h = 0.1, r = 3, $fn = 32);\n        }\n    }\n}\n\nmodule speaker_grill() {\n    // Speaker holes at top\n    color(\"black\") {\n        for(i = [-3:1:3]) {\n            translate([i * 2, 17, 3.5]) {\n                cylinder(h = 0.5, r = 0.4, $fn = 8);\n            }\n        }\n    }\n}\n\nmodule volume_buttons() {\n    // Volume up button\n    color(accent_color) {\n        translate([40.5, 8, 2]) {\n            cube([1.5, 6, 2], center = true);\n        }\n    }\n    \n    // Volume down button\n    color(accent_color) {\n        translate([40.5, -8, 2]) {\n            cube([1.5, 6, 2], center = true);\n        }\n    }\n}\n\nmodule power_button() {\n    // Power button\n    color(accent_color) {\n        translate([-40.5, 0, 2]) {\n            cube([1.5, 8, 2], center = true);\n        }\n    }\n}\n\nmodule charging_port() {\n    // USB-C port at bottom\n    color(\"black\") {\n        translate([0, -20, -1.5]) {\n            cube([8, 2, 2], center = true);\n        }\n    }\n}\n\nmodule brand_logo() {\n    // Simple brand representation\n    color(\"white\") {\n        translate([0, 0, 3.5]) {\n            rotate([0, 0, 45]) {\n                cube([8, 8, 0.1], center = true);\n            }\n        }\n    }\n}\n\n// Assemble the phone\nunion() {\n    phone_body();\n    screen();\n    home_button();\n    camera_module();\n    speaker_grill();\n    volume_buttons();\n    power_button();\n    charging_port();\n    brand_logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "badge",
    "openscad_code": "// Smart Conference Badge - Realistic Style\n// 3D printable smart badge with display and electronics\n\nbadge_width = 85;\nbadge_height = 55;\nbadge_thickness = 8;\ncorner_radius = 3;\nwall_thickness = 1.5;\n\n// Main badge body module\nmodule badge_body() {\n    difference() {\n        // Outer rounded shell\n        color(\"silver\")\n        minkowski() {\n            cube([badge_width, badge_height, badge_thickness], center=true);\n            sphere(corner_radius);\n        }\n        \n        // Hollow out inside\n        translate([0, 0, -wall_thickness/2])\n        minkowski() {\n            cube([badge_width-wall_thickness*2, badge_height-wall_thickness*2, badge_thickness+2], center=true);\n            sphere(corner_radius-wall_thickness);\n        }\n    }\n}\n\n// Display module\nmodule display() {\n    // Screen border\n    translate([0, 10, badge_thickness/2-wall_thickness])\n    color(\"gray20\")\n    cube([60, 25, 1], center=true);\n    \n    // Actual screen\n    translate([0, 10, badge_thickness/2-wall_thickness+0.5])\n    color(\"deepskyblue\")\n    cube([58, 23, 0.2], center=true);\n    \n    // Screen content - wifi symbol\n    translate([-20, 5, badge_thickness/2-wall_thickness+0.7])\n    color(\"white\")\n    for(i=[0:2]) {\n        translate([i*8, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=0.1, r=1.5, center=true);\n    }\n}\n\n// Button module\nmodule button(x_pos, y_pos) {\n    translate([x_pos, y_pos, badge_thickness/2-wall_thickness])\n    union() {\n        // Button base\n        color(\"gray40\")\n        cylinder(h=1.5, r=3, center=true);\n        \n        // Button top\n        translate([0, 0, 1])\n        color(\"red\")\n        cylinder(h=0.5, r=2.5, center=true);\n    }\n}\n\n// LED indicator module\nmodule led_indicator(x_pos, y_pos) {\n    translate([x_pos, y_pos, badge_thickness/2-wall_thickness])\n    union() {\n        // LED housing\n        color(\"black\")\n        cylinder(h=1, r=2, center=true);\n        \n        // LED\n        translate([0, 0, 0.6])\n        color(\"green\")\n        sphere(r=1.2);\n    }\n}\n\n// USB-C port module\nmodule usb_c_port() {\n    translate([badge_width/2-5, -badge_height/2+8, 0])\n    rotate([0, 90, 0])\n    difference() {\n        // Port housing\n        color(\"gray30\")\n        cube([7, 3.5, 4], center=true);\n        \n        // Port opening\n        color(\"black\")\n        cube([5, 2.5, 3.5], center=true);\n    }\n}\n\n// Clip attachment module\nmodule clip_mount() {\n    translate([0, -badge_height/2+5, 0])\n    difference() {\n        // Mount base\n        color(\"gray50\")\n        cube([20, 8, 4], center=true);\n        \n        // Mounting holes\n        for(x=[-7, 7]) {\n            translate([x, 0, 0])\n            cylinder(h=5, r=1.5, center=true);\n        }\n    }\n}\n\n// NFC antenna trace pattern\nmodule nfc_antenna() {\n    color(\"copper\")\n    translate([0, -badge_height/2+20, badge_thickness/2-wall_thickness-0.2])\n    for(i=[0:5]) {\n        offset = i * 3;\n        difference() {\n            square([badge_width-10-offset*2, 5+i*2], center=true);\n            square([badge_width-12-offset*2, 3+i*2], center=true);\n        }\n    }\n}\n\n// Speaker grill module\nmodule speaker_grill() {\n    translate([-badge_width/2+15, -badge_height/2+15, 0])\n    rotate([0, 90, 0])\n    difference() {\n        // Grill housing\n        color(\"gray35\")\n        cylinder(h=3, r=5, center=true);\n        \n        // Holes\n        for(angle=[0:30:330]) {\n            rotate([0, 0, angle])\n            translate([0, 3.5, 0])\n            cylinder(h=4, r=0.5, center=true);\n        }\n    }\n}\n\n// Assembly\nbadge_body();\ndisplay();\n\n// Control buttons\nbutton(-25, -15);\nbutton(-15, -15);\nbutton(-5, -15);\n\n// LED indicators\nled_indicator(25, 15);\nled_indicator(25, 8);\n\n// Ports and connectors\nusb_c_port();\nclip_mount();\nspeaker_grill();\n\n// NFC antenna\nlinear_extrude(height=0.1)\nnfc_antenna();",
    "renders": true
  },
  {
    "electronic_device": "emblem",
    "openscad_code": "// Electronic Emblem - Realistic Smartphone Style\n// Dimensions: 70mm x 140mm x 8mm\n\n$fn=50;\n\n// Main body color\nphone_color = \"#2C3E50\";\nscreen_color = \"#000000\";\nbutton_color = \"#34495E\";\ncamera_color = \"#1A1A1A\";\nspeaker_color = \"#2C2C2C\";\n\n// Main smartphone body\nmodule smartphone_body() {\n    color(phone_color)\n    difference() {\n        // Main rounded rectangle\n        union() {\n            cube([70, 140, 8], center=true);\n            translate([0, 0, -3.5])\n            minkowski() {\n                cube([66, 136, 1], center=true);\n                sphere(3);\n            }\n        }\n        \n        // Screen cutout\n        translate([0, 0, 4.1])\n        cube([64, 120, 2], center=true);\n        \n        // Volume button cutouts\n        translate([-35.5, 30, 0])\n        cube([2, 25, 4], center=true);\n        translate([-35.5, 0, 0])\n        cube([2, 25, 4], center=true);\n        \n        // Power button cutout\n        translate([35.5, 30, 0])\n        cube([2, 15, 4], center=true);\n    }\n}\n\n// Screen with bezel\nmodule screen() {\n    color(screen_color)\n    translate([0, 0, 4])\n    cube([64, 120, 0.5], center=true);\n    \n    // Screen reflection\n    color([0.1, 0.1, 0.1, 0.3])\n    translate([0, 0, 4.3])\n    cube([60, 100, 0.1], center=true);\n}\n\n// Front camera\nmodule front_camera() {\n    color(camera_color)\n    translate([0, 55, 4.5])\n    cylinder(h=1, r=3);\n    \n    // Camera lens\n    color([0.1, 0.1, 0.1])\n    translate([0, 55, 5])\n    cylinder(h=0.5, r=2);\n}\n\n// Speaker grille\nmodule speaker_grille() {\n    color(speaker_color)\n    translate([0, 63, 4.5])\n    cube([30, 2, 1], center=true);\n    \n    // Speaker holes\n    for(i = [-14:2:14]) {\n        translate([i, 63, 5])\n        cylinder(h=1, r=0.5);\n    }\n}\n\n// Home button\nmodule home_button() {\n    color(button_color)\n    translate([0, -55, 4.5])\n    cylinder(h=1, r=5);\n    \n    // Fingerprint sensor indicator\n    color([0.2, 0.2, 0.2])\n    translate([0, -55, 5.5])\n    square([6, 6], center=true);\n}\n\n// Rear camera module\nmodule rear_camera() {\n    translate([15, 40, -4.5])\n    color([0.1, 0.1, 0.1])\n    cube([20, 20, 3], center=true);\n    \n    // Main camera\n    color(camera_color)\n    translate([10, 45, -5.5])\n    cylinder(h=2, r=4);\n    \n    // Secondary camera\n    color(camera_color)\n    translate([20, 45, -5.5])\n    cylinder(h=2, r=3);\n    \n    // LED flash\n    color([1, 1, 0.8])\n    translate([15, 35, -5.5])\n    cylinder(h=1, r=2);\n}\n\n// Rear logo\nmodule logo() {\n    color([0.9, 0.9, 0.9])\n    translate([0, -30, -4.5])\n    linear_extrude(height=0.5)\n    text(\"EMBLEM\", size=8, halign=\"center\", valign=\"center\");\n}\n\n// Charging port\nmodule charging_port() {\n    color([0.2, 0.2, 0.2])\n    translate([0, -70, 0])\n    cube([10, 2, 3], center=true);\n}\n\n// Assemble the smartphone emblem\nunion() {\n    smartphone_body();\n    screen();\n    front_camera();\n    speaker_grille();\n    home_button();\n    \n    // Mirror for back view\n    translate([0, 0, -8])\n    rotate([180, 0, 0])\n    union() {\n        smartphone_body();\n        rear_camera();\n        logo();\n        charging_port();\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "banner",
    "openscad_code": "// Banner-style electronic device (digital banner display)\n// A realistic medium-complexity 3D printable model\n\n// Overall dimensions\nbanner_length = 80;\nbanner_height = 35;\nbanner_depth = 12;\nwall_thickness = 2;\n\n// Screen parameters\nscreen_margin = 5;\nscreen_thickness = 1;\n\n// Button parameters\nbutton_diameter = 6;\nbutton_height = 2;\nbutton_spacing = 10;\n\n// Port parameters\nusb_width = 8;\nusb_height = 3;\nusb_depth = 4;\n\n// LED indicators\nled_diameter = 3;\nled_depth = 2;\n\n// Main body module\nmodule banner_body() {\n    difference() {\n        // Outer shell\n        color([0.2, 0.2, 0.2])\n        cube([banner_length, banner_height, banner_depth], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n        cube([banner_length-wall_thickness*2, banner_height-wall_thickness*2, banner_depth-wall_thickness], center=true);\n    }\n}\n\n// Screen module\nmodule banner_screen() {\n    // Screen bezel\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, banner_depth/2 - screen_thickness/2])\n    cube([banner_length - screen_margin*2, banner_height - screen_margin*2, screen_thickness], center=true);\n    \n    // Actual display\n    color([0.1, 0.1, 0.3])\n    translate([0, 0, banner_depth/2])\n    cube([banner_length - screen_margin*2 - 2, banner_height - screen_margin*2 - 2, 0.5], center=true);\n}\n\n// Buttons module\nmodule control_buttons() {\n    for(i = [-1:1]) {\n        translate([i * button_spacing, -banner_height/2 - button_height/2, 0])\n        color([0.8, 0.8, 0.8])\n        cylinder(h=button_height, d=button_diameter, center=true);\n    }\n}\n\n// USB port module\nmodule usb_port() {\n    color([0.3, 0.3, 0.3])\n    translate([banner_length/2 + usb_depth/2, 0, -banner_depth/4])\n    cube([usb_depth, usb_width, usb_height], center=true);\n}\n\n// LED indicators module\nmodule status_leds() {\n    // Power LED\n    translate([banner_length/2 - 5, banner_height/2 - 5, banner_depth/2 - led_depth/2])\n    color([0, 1, 0])\n    sphere(d=led_diameter);\n    \n    // Activity LED\n    translate([banner_length/2 - 10, banner_height/2 - 5, banner_depth/2 - led_depth/2])\n    color([0, 0, 1])\n    sphere(d=led_diameter);\n}\n\n// Mounting holes for wall bracket\nmodule mounting_holes() {\n    hole_diameter = 4;\n    hole_offset = 15;\n    \n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * hole_offset, y * (banner_height/2 - 10), banner_depth/2])\n            cylinder(h=wall_thickness+1, d=hole_diameter, center=true);\n        }\n    }\n}\n\n// Cooling vents\nmodule cooling_vents() {\n    vent_width = 1;\n    vent_height = 20;\n    vent_depth = 2;\n    vent_spacing = 3;\n    num_vents = 8;\n    \n    for(i = [0:num_vents-1]) {\n        translate([-banner_length/2 + 5 + i * vent_spacing, 0, banner_depth/2 - vent_depth/2])\n        color([0.15, 0.15, 0.15])\n        cube([vent_width, vent_height, vent_depth], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    difference() {\n        union() {\n            banner_body();\n            banner_screen();\n        }\n        mounting_holes();\n    }\n    \n    control_buttons();\n    usb_port();\n    status_leds();\n    cooling_vents();\n}",
    "renders": true
  },
  {
    "electronic_device": "title",
    "openscad_code": "// Nintendo Switch Joy-Con Controller (Medium Complexity Realistic Style)\n\n// Device dimensions (mm)\njoycon_width = 35;\njoycon_height = 102;\njoycon_depth = 28;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main body module\nmodule joycon_body() {\n    // Main shell with rounded edges\n    difference() {\n        // Outer rounded shell\n        minkowski() {\n            cube([joycon_width-wall_thickness*2, joycon_height-wall_thickness*2, joycon_depth-wall_thickness*2], center=true);\n            sphere(3);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([joycon_width-wall_thickness*4, joycon_height-wall_thickness*6, joycon_depth-wall_thickness*4], center=true);\n            sphere(2);\n        }\n    }\n}\n\n// Button module with proper spacing\nmodule button(diameter=6, height=1.5) {\n    color(\"lightgray\") {\n        cylinder(h=height, d=diameter, $fn=32);\n    }\n    color(\"dimgray\") {\n        translate([0,0,height]) {\n            cylinder(h=0.5, d=diameter*0.9, $fn=32);\n        }\n    }\n}\n\n// D-pad module\nmodule dpad() {\n    color(\"dimgray\") {\n        for (x = [-6, 6]) {\n            translate([x, 0, 0]) button(4, 1);\n        }\n        for (y = [-6, 6]) {\n            translate([0, y, 0]) button(4, 1);\n        }\n    }\n}\n\n// Analog stick module\nmodule analog_stick() {\n    color(\"dimgray\") {\n        cylinder(h=8, d=12, $fn=32);\n        translate([0,0,8]) {\n            cylinder(h=3, d=8, $fn=32);\n        }\n    }\n    color(\"black\") {\n        translate([0,0,11]) {\n            sphere(d=10);\n        }\n    }\n}\n\n// Shoulder buttons\nmodule shoulder_button() {\n    color(\"lightgray\") {\n        translate([0,0,joycon_depth/2]) {\n            cube([20, 8, 3], center=true);\n        }\n    }\n}\n\n// Face buttons (A, B, X, Y)\nmodule face_buttons() {\n    colors = [\"red\", \"yellow\", \"blue\", \"green\"];\n    positions = [[-6, 6], [6, 6], [-6, -6], [6, -6]];\n    \n    for (i = [0:3]) {\n        translate(positions[i]) {\n            color(colors[i]) button(5, 1.2);\n        }\n    }\n}\n\n// Screen capture button\nmodule capture_button() {\n    color(\"black\") {\n        translate([0, 35, joycon_depth/2-1]) {\n            cube([8, 4, 1], center=true);\n        }\n    }\n}\n\n// Plus button\nmodule plus_button() {\n    color(\"black\") {\n        translate([0, -35, joycon_depth/2-1]) {\n            cube([8, 8, 1], center=true);\n            translate([-2, 0, 0]) cube([4, 1, 1], center=true);\n            translate([0, -2, 0]) cube([1, 4, 1], center=true);\n        }\n    }\n}\n\n// SL/SR buttons\nmodule sl_sr_buttons() {\n    color(\"dimgray\") {\n        translate([joycon_width/2-2, 25, 0]) {\n            rotate([90,0,0]) cylinder(h=15, d=4, $fn=16);\n        }\n        translate([joycon_width/2-2, -25, 0]) {\n            rotate([90,0,0]) cylinder(h=15, d=4, $fn=16);\n        }\n    }\n}\n\n// Screw holes for realism\nmodule screw_holes() {\n    color(\"black\") {\n        for (pos = [[-12, 40], [12, 40], [-12, -40], [12, -40]]) {\n            translate([pos[0], pos[1], joycon_depth/2-0.5]) {\n                cylinder(h=1, d=3, $fn=16);\n            }\n        }\n    }\n}\n\n// Main assembly\ncolor(\"#1E88E5\") {\n    joycon_body();\n}\n\n// Attach all components\ntranslate([0, 0, joycon_depth/2-1]) {\n    // Left side components\n    translate([-12, 15, 0]) analog_stick();\n    translate([12, 15, 0]) dpad();\n    translate([0, 0, 0]) capture_button();\n    \n    // Right side components\n    translate([12, 15, 0]) analog_stick();\n    translate([-12, 15, 0]) face_buttons();\n    translate([0, 0, 0]) plus_button();\n}\n\n// Shoulder buttons\ntranslate([0, joycon_height/2-5, 0]) shoulder_button();\ntranslate([0, -joycon_height/2+5, 0]) shoulder_button();\n\n// SL/SR buttons on side\nsl_sr_buttons();\n\n// Screw holes for detail\nscrew_holes();\n\n// Nintendo logo\ncolor(\"white\") {\n    translate([0, 0, joycon_depth/2+0.1]) {\n        linear_extrude(0.5) {\n            text(\"Nintendo\", size=4, halign=\"center\", valign=\"center\");\n        }\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "rank",
    "openscad_code": "// Realistic electronic rank device - Military-style handheld unit\n// Overall dimensions: 80mm x 50mm x 25mm\n\n$fa = 1;\n$fs = 0.4;\n\n// Main colors\ncolor_case = [0.2, 0.2, 0.2];  // Dark gray\ncolor_screen = [0.1, 0.1, 0.1]; // Black\ncolor_button = [0.8, 0.8, 0.8]; // Light gray\ncolor_led = [0, 1, 0];          // Green\ncolor_antenna = [0.3, 0.3, 0.3]; // Gray\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Main enclosure\n        color(color_case)\n        translate([0, 0, 12.5])\n            cube([80, 50, 25], center=true);\n        \n        // Screen cutout\n        color(color_screen)\n        translate([0, 8, 13])\n            cube([50, 30, 1], center=true);\n        \n        // Speaker grill holes\n        for(y = [-15:-5]:2.5) {\n            translate([-35, y, 13])\n                cylinder(h=2, r=1, $fn=8);\n        }\n        \n        // Charging port\n        translate([35, -20, 12])\n            cube([8, 4, 3], center=true);\n        \n        // Lanyard hole\n        translate([39, 20, 12.5])\n            cylinder(h=25, r=2, $fn=16);\n    }\n}\n\n// Screen display\nmodule screen() {\n    color(color_screen)\n    translate([0, 8, 25.5])\n        cube([48, 28, 1], center=true);\n    \n    // LCD segments simulation\n    color([0, 0.5, 0])\n    for(i = [-10:10]:5) {\n        translate([i, 8, 26])\n            cube([2, 0.5, 0.2], center=true);\n    }\n}\n\n// Navigation buttons\nmodule buttons() {\n    // D-pad style button cluster\n    for(x = [-10, 0, 10]) {\n        for(y = [-5, 5]) {\n            color(color_button)\n            translate([x, y - 15, 26.5])\n                cylinder(h=2, r=4, $fn=16);\n        }\n    }\n    \n    // Center button\n    color(color_button)\n    translate([0, -15, 27])\n        cylinder(h=3, r=3, $fn=16);\n    \n    // Side buttons\n    color(color_button)\n    translate([41, 5, 20])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=2, $fn=16);\n    \n    translate([41, -5, 20])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=2, $fn=16);\n}\n\n// Status LEDs\nmodule status_leds() {\n    color(color_led)\n    translate([-30, 20, 26])\n        cylinder(h=1, r=1.5, $fn=8);\n    \n    color([1, 0, 0])\n    translate([-25, 20, 26])\n        cylinder(h=1, r=1.5, $fn=8);\n    \n    color([0, 0, 1])\n    translate([-20, 20, 26])\n        cylinder(h=1, r=1.5, $fn=8);\n}\n\n// Antenna\nmodule antenna() {\n    color(color_antenna)\n    translate([-40, 0, 25])\n        rotate([0, 90, 0])\n            cylinder(h=15, r=2, $fn=12);\n    \n    // Antenna base\n    color(color_case)\n    translate([-40, 0, 25])\n        rotate([0, 90, 0])\n            cylinder(h=5, r=3, $fn=12);\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    difference() {\n        // Compartment cover\n        color([0.25, 0.25, 0.25])\n        translate([0, 0, 0])\n            cube([35, 45, 2], center=true);\n        \n        // Screw holes\n        for(x = [-12, 12])\n            for(y = [-18, 18]) {\n                translate([x, y, 1])\n                    cylinder(h=3, r=1.5, $fn=8);\n            }\n    }\n    \n    // Hinge detail\n    color(color_case)\n    translate([0, 22, 1])\n        rotate([90, 0, 0])\n            cylinder(h=35, r=1, $fn=12);\n}\n\n// Text label area\nmodule text_area() {\n    color([0.15, 0.15, 0.15])\n    translate([0, 20, 25.5])\n        cube([25, 8, 0.5], center=true);\n}\n\n// Assemble the device\nmain_body();\nscreen();\nbuttons();\nstatus_leds();\nantenna();\nbattery_compartment();\ntext_area();",
    "renders": true
  },
  {
    "electronic_device": "tier",
    "openscad_code": "// Tier electronic device - realistic medium complexity style\n// A realistic portable game console with tiered design\n\n$fa = 1;\n$fs = 0.4;\n\n// Main colors\ncase_color = [0.15, 0.15, 0.15];\nscreen_color = [0.05, 0.05, 0.05];\nbutton_color = [0.3, 0.3, 0.3];\nhighlight_color = [0.8, 0.2, 0.2];\n\n// Console dimensions\nwidth = 82;\nheight = 155;\ndepth = 24;\n\nmodule rounded_cube(size, radius) {\n    translate([radius, radius, 0])\n    minkowski() {\n        cube([size.x - 2*radius, size.y - 2*radius, size.z]);\n        cylinder(r = radius, h = 0.01, $fn = 20);\n    }\n}\n\n// Main body tier 1 - bottom\nmodule bottom_tier() {\n    color(case_color)\n    rounded_cube([width, height, depth * 0.4], 6);\n}\n\n// Middle tier - button area\nmodule middle_tier() {\n    translate([0, 0, depth * 0.4])\n    color(case_color)\n    difference() {\n        rounded_cube([width * 0.9, height * 0.7, depth * 0.3], 5);\n        \n        // Button holes\n        for(x = [-20, 20]) {\n            for(y = [-20, 20]) {\n                translate([x, y - 10, -1])\n                cylinder(r = 8, h = 20);\n            }\n        }\n        \n        // D-pad hole\n        translate([-25, 35, -1])\n        cylinder(r = 12, h = 20);\n        \n        // Joystick hole\n        translate([25, 35, -1])\n        cylinder(r = 10, h = 20);\n    }\n}\n\n// Top tier - screen area\nmodule top_tier() {\n    translate([0, 0, depth * 0.7])\n    color(case_color)\n    difference() {\n        rounded_cube([width * 0.95, height * 0.6, depth * 0.3], 4);\n        \n        // Screen cutout\n        translate([0, 20, -1])\n        cube([width * 0.75, height * 0.4, 20]);\n    }\n}\n\n// Screen display\nmodule screen() {\n    translate([0, 20, depth * 0.7 + 2])\n    color(screen_color)\n    cube([width * 0.73, height * 0.38, 1]);\n    \n    // Screen bezel detail\n    translate([0, 20, depth * 0.7 + 1])\n    color([0.1, 0.1, 0.1])\n    cube([width * 0.76, height * 0.42, 0.5]);\n}\n\n// Buttons\nmodule buttons() {\n    // ABXY buttons\n    for(x = [-20, 20]) {\n        for(y = [-20, 20]) {\n            translate([x, y - 10, depth * 0.4 + 5])\n            color(button_color)\n            cylinder(r = 7.5, h = 3, $fn = 20);\n            \n            // Button labels\n            translate([x, y - 10, depth * 0.4 + 8.5])\n            color([0.9, 0.9, 0.9])\n            sphere(1);\n        }\n    }\n    \n    // D-pad\n    translate([-25, 35, depth * 0.4 + 5])\n    color(button_color)\n    difference() {\n        cube([22, 22, 3], center = true);\n        cube([6, 22, 4], center = true);\n        cube([22, 6, 4], center = true);\n    }\n    \n    // Joystick\n    translate([25, 35, depth * 0.4 + 5])\n    color(button_color)\n    cylinder(r = 9, h = 3, $fn = 20);\n    translate([25, 35, depth * 0.4 + 8])\n    color(highlight_color)\n    sphere(4);\n}\n\n// Side details - ports and vents\nmodule side_details() {\n    // USB-C port\n    translate([width/2 + 0.5, -30, depth * 0.5])\n    rotate([0, 90, 0])\n    color([0.05, 0.05, 0.05])\n    cube([8, 6, 3]);\n    \n    // Headphone jack\n    translate([width/2 + 0.5, -10, depth * 0.5])\n    rotate([0, 90, 0])\n    color([0.05, 0.05, 0.05])\n    cylinder(r = 3.5, h = 6);\n    \n    // Ventilation slots\n    for(i = [0:5]) {\n        translate([-width/2 - 0.5, -50 + i*10, depth * 0.5])\n        rotate([0, 90, 0])\n        color([0.05, 0.05, 0.05])\n        cube([0.5, 8, 2]);\n    }\n}\n\n// Logo detail\nmodule logo() {\n    translate([0, -height/2 + 10, depth * 0.7 + 3])\n    color(highlight_color)\n    linear_extrude(0.5)\n    text(\"TIER\", size = 8, halign = \"center\");\n}\n\n// Assembly\nbottom_tier();\nmiddle_tier();\ntop_tier();\nscreen();\nbuttons();\nside_details();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "level",
    "openscad_code": "// Digital Level - Realistic Style, Medium Complexity\n// 3D-printable digital level with display, buttons, and battery compartment\n\n$fn = 50;  // Smooth curves\nwall_thickness = 2;\ndevice_length = 80;\ndevice_width = 25;\ndevice_height = 12;\nscreen_width = 30;\nscreen_height = 15;\n\n// Main body module\nmodule main_body() {\n    color(\"lightgray\")\n    difference() {\n        // Outer shell with rounded edges\n        minkowski() {\n            cube([device_length, device_width, device_height], center=true);\n            sphere(r=2);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([device_length-2*wall_thickness, device_width-2*wall_thickness, device_height-wall_thickness], center=true);\n            sphere(r=1);\n        }\n        \n        // Display opening\n        translate([0, 0, device_height/2])\n        cube([screen_width+4, screen_height+4, wall_thickness*2], center=true);\n        \n        // Button openings\n        for(i=[-1:1]) {\n            translate([device_length/3 * i, device_width/2 - 1, 0])\n            rotate([90, 0, 0])\n            cylinder(h=wall_thickness+1, r=2.5, center=true);\n        }\n        \n        // Battery compartment\n        translate([-device_length/2 + 15, 0, -device_height/2 + 3])\n        cube([20, device_width-4, 6], center=true);\n    }\n}\n\n// Display module\nmodule display() {\n    // LCD screen\n    color(\"darkblue\")\n    translate([0, 0, device_height/2 - 0.1])\n    cube([screen_width, screen_height, 0.5], center=true);\n    \n    // Screen border\n    color(\"black\")\n    translate([0, 0, device_height/2 - 0.2])\n    cube([screen_width+2, screen_height+2, 0.2], center=true);\n    \n    // LCD segments for level indication\n    color(\"cyan\")\n    for(i=[-1:0.5:1]) {\n        translate([i*10, 0, device_height/2])\n        cube([1, screen_height-6, 0.1], center=true);\n    }\n}\n\n// Buttons module\nmodule buttons() {\n    for(i=[-1:1]) {\n        color(\"darkgray\")\n        translate([device_length/3 * i, device_width/2 - 1, 0])\n        rotate([90, 0, 0])\n        cylinder(h=3, r=2.2, center=true);\n        \n        color(\"red\")\n        translate([device_length/3 * i, device_width/2, 0])\n        rotate([90, 0, 0])\n        cylinder(h=1, r=1.8, center=true);\n    }\n}\n\n// Battery compartment cover\nmodule battery_cover() {\n    color(\"black\")\n    translate([-device_length/2 + 15, 0, -device_height/2 + 1])\n    cube([21, device_width-2, 2], center=true);\n    \n    // Screws\n    color(\"silver\")\n    for(x=[-7, 7]) {\n        for(y=[-7, 7]) {\n            translate([-device_length/2 + 15 + x, y, -device_height/2 + 2.5])\n            rotate([90, 0, 0])\n            cylinder(h=1, r=1, $fn=6);\n        }\n    }\n}\n\n// Vial covers (bubble level indicators)\nmodule vial_covers() {\n    // Horizontal vial\n    color(\"transparent\", 0.3)\n    translate([0, 0, device_height/2 - 1])\n    rotate([90, 0, 0])\n    cylinder(h=device_width-4, r=3, center=true);\n    \n    // End caps\n    color(\"gray\")\n    translate([0, device_width/2 - 2, device_height/2 - 1])\n    sphere(r=3);\n    translate([0, -device_width/2 + 2, device_height/2 - 1])\n    sphere(r=3);\n    \n    // Vertical vial (for wall mounting)\n    rotate([0, 0, 90])\n    translate([0, 0, device_height/2 - 1])\n    rotate([90, 0, 0])\n    cylinder(h=device_width-4, r=3, center=true);\n}\n\n// USB-C port\nmodule usb_port() {\n    color(\"black\")\n    translate([device_length/2 - 2, 0, -device_height/2 + 4])\n    cube([4, 8, 4], center=true);\n    \n    // Port opening\n    color(\"darkgray\")\n    translate([device_length/2 - 0.1, 0, -device_height/2 + 4])\n    cube([0.5, 6, 2.5], center=true);\n}\n\n// Assembly\nmain_body();\ndisplay();\nbuttons();\nbattery_cover();\nvial_covers();\nusb_port();\n\n// Mounting holes\ncolor(\"black\")\nfor(x=[-device_length/3, device_length/3]) {\n    translate([x, 0, -device_height/2 - 0.1])\n    cylinder(h=1, r=1.5, center=false);\n}",
    "renders": true
  },
  {
    "electronic_device": "token",
    "openscad_code": "// Token gaming handheld device\n// Overall dimensions: 90 x 50 x 15 mm\n\n// Main body shell\ncolor(\"#2B2B2B\")\ndifference() {\n    // Main body block\n    translate([-45, -25, 0])\n        cube([90, 50, 15], center=false);\n    \n    // Screen cutout\n    translate([-35, -20, 14.5])\n        cube([70, 30, 2], center=false);\n    \n    // Button cutouts\n    for (x = [-20, 0, 20]) {\n        translate([x, 5, 14.5])\n            cylinder(h=2, d=6, $fn=16);\n    }\n}\n\n// Screen glass\ncolor(\"#001122\")\ntranslate([-34.5, -19.5, 14])\n    cube([69, 29, 0.5], center=false);\n\n// D-pad cluster\ncolor(\"#333333\")\ntranslate([-30, 0, 15])\n    cylinder(h=2, d=12, $fn=32);\n\n// D-pad buttons\nmodule dpad() {\n    color(\"#111111\")\n    for (dir = [[-4,0], [4,0], [0,-4], [0,4]]) {\n        translate([dir[0], dir[1], 17])\n            cube([3, 3, 1], center=true);\n    }\n}\ntranslate([-30, 0, 0]) dpad();\n\n// Action buttons\nmodule action_buttons() {\n    for (pos = [[30, 5], [35, 10], [35, 0], [30, -5]]) {\n        color(\"#CC0000\")\n        translate([pos[0], pos[1], 15])\n            cylinder(h=2, d=7, $fn=16);\n        color(\"#990000\")\n        translate([pos[0], pos[1], 17])\n            sphere(d=6, $fn=16);\n    }\n}\naction_buttons();\n\n// Speaker grills\ncolor(\"#111111\")\nfor (y = [-15, -10, -5]) {\n    translate([-42, y, 14.5])\n        cube([4, 2, 1], center=false);\n    translate([38, y, 14.5])\n        cube([4, 2, 1], center=false);\n}\n\n// Volume buttons\ncolor(\"#666666\")\ntranslate([47, 15, 10])\n    cube([3, 8, 2], center=false);\ntranslate([47, 25, 10])\n    cube([3, 8, 2], center=false);\n\n// Charge port\ncolor(\"#111111\")\ntranslate([0, -27, 7])\n    cube([10, 2, 6], center=false);\n\n// Headphone jack\ncolor(\"#111111\")\ntranslate([-40, -27, 7])\n    cylinder(h=2, d=6, $fn=32);\n\n// Power LED\ncolor(\"#00FF00\")\ntranslate([45, 0, 14])\n    sphere(d=3, $fn=16);\n\n// Cartridge slot\ncolor(\"#222222\")\ntranslate([-10, 25, 7])\n    cube([20, 2, 6], center=false);\n\n// Logo area\ncolor(\"#FFFFFF\")\ntranslate([0, -10, 14.8])\n    cube([12, 4, 0.2], center=true);",
    "renders": true
  },
  {
    "electronic_device": "coin",
    "openscad_code": "// Coin Electronic Device - OpenSCAD\n// A realistic 3D printable coin-shaped electronic device with display and buttons\n\n// Device parameters\ncoin_diameter = 80;\ncoin_thickness = 12;\nwall_thickness = 2.5;\n\n// Colors\n$fa = 2;\n$fs = 0.5;\n\n// Main coin body\nmodule coin_body() {\n    difference() {\n        // Outer shell\n        color(\"silver\")\n        cylinder(h=coin_thickness, d=coin_diameter, center=true);\n        \n        // Hollow center\n        translate([0, 0, -wall_thickness/2])\n        cylinder(h=coin_thickness + 1, d=coin_diameter - 2*wall_thickness, center=true);\n    }\n}\n\n// LCD display\nmodule display() {\n    translate([0, 0, coin_thickness/2 - 0.1])\n    color(\"black\")\n    cube([35, 20, 0.5], center=true);\n    \n    // Display border\n    translate([0, 0, coin_thickness/2])\n    color(\"darkgray\")\n    cube([37, 22, 0.2], center=true);\n}\n\n// Navigation buttons\nmodule buttons() {\n    // Up button\n    translate([0, 15, coin_thickness/2 + 0.5])\n    color(\"dimgray\")\n    cylinder(h=1.5, d=6, center=true);\n    \n    // Down button\n    translate([0, -15, coin_thickness/2 + 0.5])\n    color(\"dimgray\")\n    cylinder(h=1.5, d=6, center=true);\n    \n    // Left button\n    translate([-15, 0, coin_thickness/2 + 0.5])\n    color(\"dimgray\")\n    cylinder(h=1.5, d=6, center=true);\n    \n    // Right button\n    translate([15, 0, coin_thickness/2 + 0.5])\n    color(\"dimgray\")\n    cylinder(h=1.5, d=6, center=true);\n    \n    // Center button\n    translate([0, 0, coin_thickness/2 + 0.5])\n    color(\"red\")\n    cylinder(h=1.5, d=8, center=true);\n}\n\n// USB-C port\nmodule usb_port() {\n    rotate([90, 0, 0])\n    translate([0, 0, coin_diameter/2])\n    difference() {\n        // Port opening\n        color(\"black\")\n        cube([8, 3, 6], center=true);\n        \n        // Inner connector\n        translate([0, 0, 1.5])\n        color(\"darkgray\")\n        cube([6, 1.5, 3], center=true);\n    }\n}\n\n// Ventilation holes\nmodule vents() {\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([0, coin_diameter/2 - 5, 0])\n        rotate([90, 0, 0])\n        color(\"black\")\n        cylinder(h=0.5, d=2, center=true);\n    }\n}\n\n// LED indicators\nmodule leds() {\n    // Power LED\n    translate([coin_diameter/2 - 8, 8, coin_thickness/2 - 1])\n    color(\"green\")\n    cylinder(h=1, d=3, center=true);\n    \n    // Status LED\n    translate([coin_diameter/2 - 8, -8, coin_thickness/2 - 1])\n    color(\"blue\")\n    cylinder(h=1, d=3, center=true);\n}\n\n// Branding text area\nmodule branding() {\n    // Company logo placeholder\n    translate([0, coin_diameter/2 - 20, -coin_thickness/2 + 0.1])\n    rotate([0, 0, 180])\n    color(\"gray\")\n    linear_extrude(height=0.5)\n    text(\"COIN\", size=6, halign=\"center\", valign=\"center\");\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    translate([0, 0, -coin_thickness/2 + 1])\n    difference() {\n        // Compartment opening\n        color(\"black\")\n        cylinder(h=2, d=25, center=false);\n        \n        // Battery contacts\n        translate([0, 0, -0.1])\n        color(\"gold\")\n        cylinder(h=0.5, d=5, center=false);\n        \n        translate([0, 0, 2])\n        color(\"gold\")\n        cylinder(h=0.5, d=5, center=false);\n    }\n}\n\n// Assembly\ncoin_body();\ndisplay();\nbuttons();\nusb_port();\nvents();\nleds();\nbranding();\nbattery_compartment();",
    "renders": true
  },
  {
    "electronic_device": "gem",
    "openscad_code": "// Gem Electronic Device - Medium Complexity Realistic Style\n// A handheld gem-shaped device with electronic features\n\n// Device dimensions\ndevice_height = 70;\ndevice_width = 50;\ndevice_depth = 35;\nwall_thickness = 2;\n\n// Module for gem body\nmodule gem_body() {\n    // Main gem shape using octahedron approximation\n    union() {\n        // Upper pyramid\n        translate([0, 0, device_height/2]) {\n            scale([device_width/2, device_depth/2, device_height/2]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=1, r1=1, r2=0, $fn=4);\n                }\n            }\n        }\n        \n        // Lower pyramid\n        translate([0, 0, -device_height/2]) {\n            scale([device_width/2, device_depth/2, device_height/2]) {\n                cylinder(h=1, r1=0, r2=1, $fn=4);\n            }\n        }\n        \n        // Center cube for stability\n        cube([device_width, device_depth, device_height/4], center=true);\n    }\n}\n\n// Module for screen\nmodule screen() {\n    color([0.1, 0.1, 0.1]) {\n        translate([0, device_depth/2 - wall_thickness, 0]) {\n            cube([device_width * 0.8, wall_thickness, device_height * 0.5], center=true);\n        }\n    }\n    \n    // Screen display\n    color([0.2, 0.8, 1]) {\n        translate([0, device_depth/2 - wall_thickness + 0.1, 0]) {\n            cube([(device_width * 0.8) - 4, 0.2, (device_height * 0.5) - 4], center=true);\n        }\n    }\n}\n\n// Module for control buttons\nmodule control_buttons() {\n    // Power button\n    color([0.9, 0.9, 0.9]) {\n        translate([device_width/2 - 8, 0, device_height/2 - 10]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=3, r=2, center=true);\n            }\n        }\n    }\n    \n    // Volume buttons\n    for (i = [0:1]) {\n        color([0.8, 0.8, 0.8]) {\n            translate([-device_width/2 + 5, 0, device_height/2 - 15 - i*8]) {\n                rotate([0, 90, 0]) {\n                    cube([3, 2, 8], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Module for charging port\nmodule charging_port() {\n    color([0.3, 0.3, 0.3]) {\n        translate([0, -device_depth/2 + wall_thickness, -device_height/2 + 10]) {\n            cube([8, wall_thickness, 6], center=true);\n        }\n    }\n}\n\n// Module for status LEDs\nmodule status_leds() {\n    // LED indicators\n    for (i = [0:2]) {\n        color([0, 1, 0]) {\n            translate([(i-1) * 8, device_depth/2 - wall_thickness, device_height/2 - 5]) {\n                sphere(r=1);\n            }\n        }\n    }\n}\n\n// Module for speaker grill\nmodule speaker_grill() {\n    color([0.2, 0.2, 0.2]) {\n        translate([0, -device_depth/2 + wall_thickness, device_height/2 - 20]) {\n            difference() {\n                cube([20, wall_thickness, 8], center=true);\n                for (x = [-8:2:8]) {\n                    translate([x, 0, 0]) {\n                        cube([1, wall_thickness + 0.2, 6], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Module for gem facets\nmodule gem_facets() {\n    color([0.5, 0.7, 1, 0.6]) {\n        // Top facets\n        for (angle = [0:90:359]) {\n            rotate([0, 0, angle]) {\n                translate([0, 0, device_height/2 - 5]) {\n                    rotate([45, 0, 0]) {\n                        scale([device_width/3, device_depth/3, 5]) {\n                            cube([1, 1, 1], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\ndifference() {\n    // Outer gem body\n    color([0.3, 0.6, 1, 0.8]) {\n        gem_body();\n    }\n    \n    // Hollow out center for electronics\n    scale([0.85, 0.85, 0.85]) {\n        gem_body();\n    }\n}\n\n// Add electronic components\nscreen();\ncontrol_buttons();\ncharging_port();\nstatus_leds();\nspeaker_grill();\ngem_facets();",
    "renders": true
  },
  {
    "electronic_device": "credit",
    "openscad_code": "// Credit Card Electronic Device - Realistic Style, Medium Complexity\n// Dimensions: 85.6mm × 54mm × 1.2mm (standard credit card size)\n\n$fn = 64;\n\n// Main card body\nmodule card_body() {\n    color([0.1, 0.1, 0.1])  // Dark gray plastic\n    difference() {\n        cube([85.6, 54, 1.2], center = true);\n        \n        // Rounded corners\n        translate([0, 0, 0])\n        for(x = [-40.3, 40.3])\n            for(y = [-25.3, 25.3])\n                translate([x, y, 0])\n                cylinder(h = 3, r = 2.5, center = true);\n    }\n}\n\n// EMV chip\nmodule emv_chip() {\n    color([0.8, 0.8, 0.8])  // Metallic silver\n    translate([-25, -15, 0.7])\n    difference() {\n        cube([10, 12, 0.8]);\n        \n        // Chip contacts\n        for(i = [0:5])\n            translate([1.5 + i * 1.4, 1.5, -0.1])\n            cube([1, 9, 1]);\n    }\n}\n\n// NFC antenna\nmodule nfc_antenna() {\n    color([0.2, 0.2, 0.8, 0.3])  // Blue translucent\n    translate([0, 0, 0.61])\n    difference() {\n        cube([80, 48, 0.01]);\n        \n        // Antenna coil pattern\n        for(r = [5:5:20])\n            offset(r = -r)\n            square([80 - r*2, 48 - r*2], center = true);\n    }\n}\n\n// Magnetic stripe\nmodule magnetic_stripe() {\n    color([0.05, 0.05, 0.05])  // Black\n    translate([0, 19, 0.61])\n    cube([84, 9, 0.01]);\n}\n\n// Display area\nmodule display_area() {\n    color([0.9, 0.9, 0.9])  // Light gray\n    translate([15, 0, 0.61])\n    cube([35, 15, 0.01]);\n    \n    // LCD segments\n    color([0, 0, 0, 0.8])\n    for(i = [0:3])\n        translate([17 + i * 8, 3, 0.62])\n        cube([6, 9, 0.01]);\n}\n\n// LED indicator\nmodule led_indicator() {\n    color([0.9, 0.9, 0])  // Yellow LED\n    translate([30, -18, 0.7])\n    cylinder(h = 0.5, r = 2);\n}\n\n// Button\nmodule button() {\n    color([0.7, 0.7, 0.7])  // Gray button\n    translate([30, 18, 0.7])\n    difference() {\n        cylinder(h = 1, r = 3);\n        translate([0, 0, -0.1])\n        cylinder(h = 1.2, r = 2.5);\n    }\n}\n\n// Text labels\nmodule text_labels() {\n    color([0.95, 0.95, 0.95])  // White text\n    \n    // Card number\n    translate([-35, -8, 0.7])\n    cube([40, 3, 0.01]);\n    \n    // Expiry date\n    translate([25, -8, 0.7])\n    cube([15, 3, 0.01]);\n    \n    // Name\n    translate([-35, -12, 0.7])\n    cube([30, 2.5, 0.01]);\n}\n\n// Card network logo\nmodule network_logo() {\n    color([1, 0.5, 0])  // Orange logo\n    translate([30, 8, 0.7])\n    cube([10, 6, 0.01]);\n}\n\n// Assembly\ncard_body();\nemv_chip();\nnfc_antenna();\nmagnetic_stripe();\ndisplay_area();\nled_indicator();\nbutton();\ntext_labels();\nnetwork_logo();",
    "renders": true
  },
  {
    "electronic_device": "point",
    "openscad_code": "// OpenSCAD Point-and-Shoot Digital Camera – realistic, medium complexity\n// Overall footprint ≈ 90 × 60 × 35 mm (3D-print friendly, no steep overhangs)\n\n$fn = 64;                 // Smooth curves\nwall = 1.2;               // Minimum printable wall thickness\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer rounded block\n        minkowski() {\n            cube([85, 55, 30], center = true);\n            sphere(3);\n        }\n        // Hollow interior\n        minkowski() {\n            cube([85 - 2*wall, 55 - 2*wall, 30 - 2*wall], center = true);\n            sphere(2.5);\n        }\n    }\n}\n\n// Front lens assembly\nmodule lens() {\n    translate([0, -25, 0])\n    rotate([90, 0, 0])\n    difference() {\n        // Lens barrel\n        cylinder(h = 12, d1 = 22, d2 = 20);\n        // Inner cavity\n        cylinder(h = 13, d = 15);\n        // External threads\n        for (i = [0:5:355])\n            rotate([0, 0, i])\n            translate([11, 0, -1])\n            cube([1.5, 1, 14], center = true);\n    }\n}\n\n// Shutter button on top\nmodule shutter() {\n    translate([0, -5, 18])\n    color(\"silver\")\n    cylinder(h = 4, d = 8, $fn = 32);\n}\n\n// Mode dial\nmodule modeDial() {\n    translate([-25, 0, 18])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 3, d = 15, $fn = 24);\n        for (i = [0:30:330])\n            rotate([0, 0, i])\n            translate([7, 0, 0])\n            cube([2, 1.5, 4], center = true);\n    }\n}\n\n// Rear screen\nmodule screen() {\n    color(\"black\")\n    translate([0, 22, 5])\n    cube([60, 0.5, 40], center = true);\n    // Bezel\n    color(\"darkslategray\")\n    translate([0, 22.5, 5])\n    cube([64, 0.5, 44], center = true);\n}\n\n// Navigation pad\nmodule dpad() {\n    color(\"black\")\n    translate([22, 22, 5])\n    cylinder(h = 1, d = 18, $fn = 32);\n    // 4-way buttons\n    for (a = [0, 90, 180, 270])\n        rotate([90, 0, a])\n        translate([0, 22, 5])\n        translate([22 + 6, 0, 0])\n        cube([5, 1, 5], center = true);\n}\n\n// Microphone holes\nmodule micHoles() {\n    translate([-25, -30, 8])\n    for (ix = [0:3])\n        for (iy = [0:1])\n            translate([ix*3, iy*3, 0])\n            cylinder(h = 3, d = 1.2);\n}\n\n// USB-C port\nmodule usbPort() {\n    color(\"black\")\n    translate([0, 30, -5])\n    cube([9, 1.5, 3]);\n}\n\n// SD card slot\nmodule sdSlot() {\n    color(\"black\")\n    translate([30, 30, -8])\n    cube([20, 1.5, 2]);\n}\n\n// Flash\nmodule flash() {\n    color(\"ghostwhite\")\n    translate([0, -30, 12])\n    cube([15, 6, 4], center = true);\n}\n\n// Brand logo (simple embossed)\nmodule logo() {\n    translate([0, 0, 16])\n    linear_extrude(0.5)\n    text(\"POINT\", size = 6, halign = \"center\", valign = \"center\");\n}\n\n// Assembly\ncolor(\"lightgray\") body();\ncolor(\"silver\") lens();\nshutter();\nmodeDial();\nscreen();\ndpad();\nmicHoles();\nusbPort();\nsdSlot();\nflash();\ncolor(\"red\") logo();",
    "renders": true
  },
  {
    "electronic_device": "score",
    "openscad_code": "// Score Electronic Device - Realistic Style, Medium Complexity\n// A handheld electronic scorekeeping device with display and buttons\n\n// Main body dimensions\nbody_width = 80;\nbody_height = 120;\nbody_depth = 15;\nwall_thickness = 2;\n\n// Screen dimensions\nscreen_width = 50;\nscreen_height = 30;\nscreen_depth = 1;\n\n// Button specifications\nbutton_diameter = 8;\nbutton_height = 2;\nbutton_spacing = 15;\n\n// Port dimensions\nport_width = 12;\nport_height = 6;\nport_depth = 4;\n\n// Battery compartment\nbattery_width = 40;\nbattery_height = 25;\nbattery_depth = 8;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_buttons = [0.3, 0.3, 0.3];\ncolor_text = [0.8, 0.8, 0.8];\ncolor_accent = [0.9, 0.9, 0.9];\n\n// Main body with rounded edges\nmodule main_body() {\n    color(color_body)\n    difference() {\n        // Outer shell with rounded edges\n        minkowski() {\n            cube([body_width, body_height, body_depth], center=true);\n            sphere(r=2);\n        }\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness/2])\n        cube([body_width-wall_thickness*2, body_height-wall_thickness*2, body_depth], center=true);\n    }\n}\n\n// LCD screen\nmodule lcd_screen() {\n    color(color_screen)\n    translate([0, body_height/4, body_depth/2-screen_depth/2])\n        cube([screen_width, screen_height, screen_depth], center=true);\n    \n    // Screen bezel\n    color(color_accent)\n    translate([0, body_height/4, body_depth/2-screen_depth/2-0.5])\n        cube([screen_width+4, screen_height+4, 0.5], center=true);\n}\n\n// Button array\nmodule buttons() {\n    // Navigation buttons (D-pad style)\n    color(color_buttons)\n    for(i = [-1, 0, 1]) {\n        for(j = [-1, 0, 1]) {\n            if(!(i == 0 && j == 0)) {\n                translate([i*button_spacing, -body_height/4 + j*button_spacing, body_depth/2-button_height/2])\n                    cylinder(h=button_height, d=button_diameter, center=true);\n            }\n        }\n    }\n    \n    // Center action button\n    translate([0, -body_height/4, body_depth/2-button_height/2])\n        cylinder(h=button_height, d=button_diameter*1.2, center=true);\n    \n    // Side buttons\n    color(color_buttons)\n    translate([body_width/2+button_height/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=button_height, d=button_diameter, center=true);\n    \n    translate([-body_width/2-button_height/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=button_height, d=button_diameter, center=true);\n}\n\n// USB-C port\nmodule usb_port() {\n    color(color_body)\n    translate([0, -body_height/2+port_height/2, 0])\n        cube([port_width, port_height, port_depth], center=true);\n    \n    // Port opening\n    color([0, 0, 0])\n    translate([0, -body_height/2+port_height/2, port_depth/2])\n        cube([port_width-2, port_height-2, port_depth+1], center=true);\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    color(color_body)\n    difference() {\n        // Cover\n        translate([0, body_height/6, -body_depth/2+battery_depth/2+wall_thickness])\n            cube([battery_width, battery_height, battery_depth], center=true);\n        \n        // Screw holes\n        for(pos = [[-battery_width/2+5, -battery_height/2+5], \n                   [battery_width/2-5, -battery_height/2+5],\n                   [battery_width/2-5, battery_height/2-5],\n                   [-battery_width/2+5, battery_height/2-5]]) {\n            translate([pos[0], body_height/6+pos[1], -body_depth/2+battery_depth])\n                cylinder(h=battery_depth+1, d=2, center=true);\n        }\n    }\n    \n    // Hinge\n    color(color_body)\n    translate([battery_width/2-2, body_height/6, -body_depth/2+wall_thickness])\n        rotate([90, 0, 0])\n            cylinder(h=battery_height-4, d=2, center=true);\n}\n\n// Logo and text details\nmodule device_details() {\n    // Model text\n    color(color_text)\n    translate([0, body_height/2-10, body_depth/2+0.1])\n        rotate([0, 0, 0])\n            linear_extrude(height=0.5)\n                text(\"SCORE-PRO\", size=4, halign=\"center\");\n    \n    // LED indicator\n    color([1, 0, 0])\n    translate([body_width/2-8, body_height/2-8, body_depth/2-1])\n        sphere(d=3);\n    \n    // Speaker grill\n    color(color_body)\n    for(i = [0:3]) {\n        translate([-body_width/2+10+i*5, body_height/2-20, body_depth/2-0.5])\n            cube([1, 10, 0.5]);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    lcd_screen();\n    buttons();\n    usb_port();\n    battery_compartment();\n    device_details();\n}",
    "renders": true
  },
  {
    "electronic_device": "stat",
    "openscad_code": "// Digital Thermostat Unit\n// Realistic style, medium complexity\n// Dimensions: 85 x 85 x 25 mm\n\n// Main colors\n$fa = 2;\n$fs = 0.5;\n\nmodule thermostat() {\n    // Main housing\n    color([0.9, 0.9, 0.9]) {\n        difference() {\n            translate([-42.5, -42.5, 0])\n                cube([85, 85, 25]);\n            \n            // Top surface fillet\n            translate([-42.5, -42.5, 23])\n                cube([85, 85, 3]);\n            \n            // Inner cavity\n            translate([-38, -38, 5])\n                cube([76, 76, 18]);\n        }\n    }\n    \n    // Front face\n    color([0.95, 0.95, 0.95]) {\n        translate([-40, -40, 2])\n            cube([80, 80, 3]);\n    }\n    \n    // LCD screen\n    color([0.1, 0.1, 0.1]) {\n        translate([-30, -15, 5.1])\n            cube([60, 30, 0.5]);\n    }\n    \n    // Screen bezel\n    color([0.3, 0.3, 0.3]) {\n        difference() {\n            translate([-32, -17, 5])\n                cube([64, 34, 0.3]);\n            translate([-30.5, -15.5, 4.9])\n                cube([61, 31, 0.5]);\n        }\n    }\n    \n    // Temperature display segments (simulated)\n    for(i = [0:2]) {\n        color([0, 1, 0]) {\n            translate([-25 + i*10, -5, 5.7])\n                cube([6, 12, 0.1]);\n        }\n    }\n    \n    // Control buttons\n    module button(x, y, label) {\n        color([0.2, 0.2, 0.2]) {\n            translate([x, y, 5.1])\n                cylinder(h=0.8, r=5, $fn=16);\n        }\n        color([0.8, 0.8, 0.8]) {\n            translate([x, y, 5.9])\n                cylinder(h=0.2, r=4.5, $fn=16);\n        }\n    }\n    \n    // Up/Down buttons\n    button(-25, -30, \"up\");\n    button(-25, -40, \"down\");\n    \n    // Mode button\n    button(25, -35, \"mode\");\n    \n    // Power button\n    color([0.8, 0, 0]) {\n        translate([35, 30, 5.1])\n            cylinder(h=0.8, r=3, $fn=16);\n    }\n    \n    // Ventilation slots\n    for(i = [0:4]) {\n        translate([38, -40 + i*20, 15])\n            rotate([90, 0, 0])\n                cylinder(h=2, r=1, $fn=16);\n    }\n    \n    // Mounting holes\n    for(x = [-30, 30]) {\n        for(y = [-30, 30]) {\n            translate([x, y, 0])\n                cylinder(h=25, r=2, $fn=16);\n        }\n    }\n    \n    // Sensor opening\n    color([0.4, 0.4, 0.4]) {\n        translate([0, 42, 12])\n            rotate([90, 0, 0])\n                cylinder(h=5, r=3, $fn=16);\n    }\n    \n    // Back connectors\n    color([0.3, 0.3, 0.3]) {\n        for(i = [0:1]) {\n            translate([-20 + i*40, -42.5, 10])\n                cube([15, 5, 8]);\n        }\n    }\n    \n    // LED indicators\n    color([0, 1, 0]) {\n        translate([-35, 0, 5.7])\n            cylinder(h=0.3, r=1.5, $fn=16);\n    }\n    \n    color([1, 1, 0]) {\n        translate([-35, -8, 5.7])\n            cylinder(h=0.3, r=1.5, $fn=16);\n    }\n}\n\nthermostat();",
    "renders": true
  },
  {
    "electronic_device": "metric",
    "openscad_code": "// Digital Multimeter – realistic, medium-complexity, metric scale\n// Overall footprint ≈ 85 × 160 × 45 mm\n\n// --- Parameters ---------------------------------------------------------\nwall = 1.8;                     // 3D-print friendly wall thickness (mm)\ncorner = 4;                     // outer corner radius\nbtn_d = 5.5; btn_h = 2;         // push-button\nknob_r = 7; knob_h = 5;         // rotary selector knob\nscreen_w = 45; screen_h = 28;   // LCD\nport_w = 10; port_h = 6;        // 4-mm banana jacks\nprobe_d = 4; probe_l = 12;\n\n// --- Colors -------------------------------------------------------------\nc_case  = [0.15,0.15,0.15];     // dark grey plastic\nc_accent= [0.95,0.25,0.05];     // red rubber boot\nc_screen= [0.1,0.1,0.1];\nc_lcd   = [0,0.7,0];            // green back-lit LCD\nc_metal = [0.5,0.5,0.5];\n\n// --- Main assembly ------------------------------------------------------\nmultimeter();\n\nmodule multimeter() {\n    // Protective rubber bumper (thin shell)\n    color(c_accent) rounded_box([87,162,47], corner+1);\n\n    // Main housing\n    difference() {\n        color(c_case) rounded_box([85,160,45], corner);\n\n        // Display window\n        translate([0,45,45-wall])\n            cube([screen_w+4,screen_h+4,wall+1], center=true);\n\n        // Bottom battery cover\n        translate([0,-55,-22.5+wall])\n            cube([40,60,wall+0.1], center=true);\n\n        // Vent slots (rear)\n        for(i=[-20:10:20])\n            translate([0,i,-22.5+wall])\n                cube([60,2,wall+0.1], center=true);\n    }\n\n    // LCD screen\n    translate([0,45,45-wall-0.1])\n        color(c_screen)\n            cube([screen_w,screen_h,wall], center=true);\n\n    // LCD pixels (simplified)\n    translate([0,45,45-2*wall-0.2])\n        color(c_lcd)\n            cube([screen_w-4,screen_h-4,0.3], center=true);\n\n    // Selector knob\n    translate([-28,0,45])\n        rotate([90,0,0])\n            cylinder(h=knob_h, r=knob_r, $fn=36);\n\n    // Mode labels (embossed)\n    for(a=[0:30:330])\n        rotate([0,0,a])\n            translate([-28-6,0,45])\n                rotate([90,0,0])\n                    linear_extrude(height=0.4)\n                        text(str(a/30), size=3, halign=\"center\");\n\n    // Push buttons (3 below screen)\n    for(i=[-1:1])\n        translate([i*15,25,45])\n            button();\n\n    // Input jacks\n    jack( 20,-60);     // VΩ\n    jack(-20,-60);     // COM\n    jack( 30,-60);     // mA\n    jack(-30,-60);     // 10A\n}\n\n// --- Helper modules -----------------------------------------------------\nmodule rounded_box(size, r) {\n    hull() {\n        for(dx=[-1,1], dy=[-1,1], dz=[-1,1])\n            translate([dx*(size.x/2-r), dy*(size.y/2-r), dz*(size.z/2-r)])\n                sphere(r=r, $fn=16);\n    }\n}\n\nmodule button() {\n    difference() {\n        cylinder(h=btn_h, r=btn_d/2, $fn=16);\n        translate([0,0,-0.1])\n            cube([btn_d+1,btn_d+1,btn_h+0.2], center=true);\n    }\n}\n\nmodule jack(x,y) {\n    color(c_metal)\n    translate([x,y,45-wall])\n        difference() {\n            cylinder(h=wall+1, r=port_w/2, $fn=16);\n            cylinder(h=wall+2, r=probe_d/2, $fn=16);\n        }\n}",
    "renders": true
  },
  {
    "electronic_device": "replay",
    "openscad_code": "// Replay TV streaming device in realistic style\n// Dimensions: 80mm x 80mm x 22mm\n\n// Overall dimensions\ndevice_width = 80;\ndevice_depth = 80;\ndevice_height = 22;\n\n// Main body\nmodule main_body() {\n    color(\"black\") \n    difference() {\n        // Main rounded cube\n        minkowski() {\n            cube([device_width-4, device_depth-4, device_height-2], center=true);\n            sphere(r=2);\n        }\n        \n        // Top ventilation grill\n        for(x=[-30:10:30]) {\n            translate([x, 0, 10])\n                cube([4, 70, 2]);\n        }\n        \n        // Bottom ventilation grill\n        rotate([0, 0, 90])\n        for(y=[-30:10:30]) {\n            translate([y, 0, -10])\n                cube([4, 70, 2]);\n        }\n    }\n}\n\n// Front panel with LED ring and IR sensor\nmodule front_panel() {\n    color(\"darkgray\") \n    translate([0, device_depth/2-1, 0]) {\n        difference() {\n            cube([device_width-8, 2, device_height-8], center=true);\n            \n            // IR sensor window\n            translate([0, 0, 5])\n                cube([6, 3, 4]);\n        }\n        \n        // LED ring\n        color(\"blue\") {\n            translate([0, 1.5, 5])\n                cylinder(h=2, r1=6, r2=6, $fn=32);\n            translate([0, 1.5, 6])\n                cylinder(h=1, r1=5, r2=5, $fn=32);\n        }\n    }\n}\n\n// Rear ports panel\nmodule rear_ports() {\n    color(\"darkgray\") \n    translate([0, -device_depth/2+1, 0]) {\n        cube([device_width-8, 2, device_height-8], center=true);\n        \n        // Ports cutouts\n        translate([-25, 1, 5])\n            cube([8, 3, 4]); // HDMI\n        translate([-10, 1, 5])\n            cube([8, 3, 4]); // USB\n        translate([10, 1, 5])\n            cube([6, 3, 4]); // Power\n        translate([25, 1, 5])\n            cube([8, 3, 4]); // Ethernet\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    color(\"gray\") \n    for(x=[-30, 30])\n    for(y=[-30, 30]) {\n        translate([x, y, -device_height/2+1])\n            cylinder(h=2, r=3, $fn=16);\n    }\n}\n\n// Logo on top\nmodule logo() {\n    color(\"white\") \n    translate([0, 0, device_height/2])\n    linear_extrude(height=0.5) {\n        // Simple \"REPLAY\" text\n        text(\"REPLAY\", size=8, halign=\"center\", valign=\"center\");\n    }\n}\n\n// Assembly\nmain_body();\nfront_panel();\nrear_ports();\nfeet();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "highlight",
    "openscad_code": "// Highlight Electronic Device - Medium Complexity\n// Realistic style with 3D printable features\n// Overall dimensions: 50mm x 25mm x 12mm\n\n// Base body with rounded edges\nmodule body() {\n    difference() {\n        // Main body with rounded corners\n        union() {\n            // Central block\n            translate([0, 0, 6])\n                cube([50, 25, 12], center=true);\n            \n            // Rounded edges\n            translate([0, 0, 6])\n                minkowski() {\n                    cube([46, 21, 8], center=true);\n                    sphere(r=2);\n                }\n        }\n        \n        // USB-C port\n        translate([25, 12.5, 3])\n            rotate([0, 90, 0])\n                cylinder(h=8, d=7.5, center=true);\n        \n        // LED indicator cutout\n        translate([20, 12.5, 12])\n            cylinder(h=2, d=3);\n    }\n}\n\n// Screen module\nmodule screen() {\n    // Screen recess\n    difference() {\n        translate([0, 0, 12.5])\n            cube([30, 15, 1], center=true);\n        \n        // Actual screen\n        translate([0, 0, 13.1])\n            cube([28, 13, 0.5], center=true);\n    }\n}\n\n// Button layout\nmodule buttons() {\n    // Power button\n    translate([-18, 8, 12])\n        cylinder(h=1.5, d=4);\n    \n    // Mode button\n    translate([-18, -8, 12])\n        cylinder(h=1.5, d=4);\n    \n    // Volume buttons\n    for(i = [0:1]) {\n        translate([18, -5 + i*10, 12])\n            cube([8, 3, 1.5]);\n    }\n}\n\n// Speaker grill pattern\nmodule speaker_grill() {\n    for(x = [-10:4:10]) {\n        for(y = [-8:3:8]) {\n            translate([x, y, 6])\n                cube([2, 1, 12]);\n        }\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    translate([20, 12.5, 12.5])\n        sphere(d=2.5);\n}\n\n// Main assembly\ncolor(\"darkslategray\") body();\ncolor(\"black\") screen();\ncolor(\"dimgray\") buttons();\ncolor(\"black\") speaker_grill();\ncolor(\"limegreen\") led_indicator();",
    "renders": true
  },
  {
    "electronic_device": "vod",
    "openscad_code": "// VOD (Video On Demand) Box – mid-fidelity printable model\n// Overall size: 90 × 60 × 25 mm\n\n// Wall thickness chosen for reliable FDM printing\nwall = 1.6;\n\n// Main shell\ndifference() {\n    color(\"black\")\n    cube([90, 60, 25], center = true);\n\n    // Hollow cavity\n    translate([0, 0, -wall/2])\n        cube([90 - 2*wall, 60 - 2*wall, 25 - wall], center = true);\n}\n\n// Front face with screen recess\ntranslate([0, -29.9, 0]) {\n    // Screen opening\n    color(\"black\")\n    cube([70, 0.2, 40], center = true);\n\n    // Recess for glass screen\n    translate([0, 0.1, 0])\n        color(\"darkblue\")\n        cube([68, 0.4, 38], center = true);\n}\n\n// IR receiver dome\ntranslate([-35, -29, 0])\n    color(\"darkred\")\n    sphere(d = 4);\n\n// LED indicator\ntranslate([35, -29, 8])\n    color(\"lime\")\n    cylinder(h = 0.5, d = 3);\n\n// Top buttons module\nmodule button(x, label) {\n    translate([x, 0, 12.5 + 0.5])\n        color(\"dimgray\")\n        cylinder(h = 2, d = 7);\n    translate([x, 0, 14])\n        color(\"white\")\n        text(label, size = 3, h = 0.4, center = true);\n}\n\nfor (i = [-1, 0, 1]) {\n    button(i * 15, i == -1 ? \"▶\" : i == 0 ? \"⏸\" : \"⏹\");\n}\n\n// Rear ports strip\nmodule port(type, y) {\n    translate([-40, 29.9, y])\n    if (type == \"hdmi\") {\n        color(\"silver\")\n        cube([12, 0.2, 8]);\n    } else if (type == \"usb\") {\n        color(\"silver\")\n        cube([7, 0.2, 12]);\n    } else {\n        color(\"silver\")\n        cylinder(h = 0.2, d = 5.5);\n    }\n}\n\nport(\"hdmi\", 8);\nport(\"usb\", 0);\nport(\"power\", -8);\n\n// Ventilation slots on sides\nmodule vents(side) {\n    for (i = [-4:4]) {\n        translate([side * 44.9, i * 6, 0])\n            rotate([0, side * 90, 0])\n                color(\"black\")\n                cube([25, 2, 1]);\n    }\n}\n\nvents(1);\nvents(-1);\n\n// Bottom label area\ntranslate([0, 0, -12.5])\n    color(\"white\")\n    text(\"VOD-3000\\nSN: 12345678\", size = 3, h = 0.2, center = true);\n\n// Rubber feet\nmodule foot(x, y) {\n    translate([x, y, -12.5])\n        color(\"gray20\")\n        cylinder(h = 1, d = 5);\n}\n\nfor (p = [-1, 1]) {\n    foot(p * 35,  p * 25);\n    foot(p * 35, -p * 25);\n}",
    "renders": true
  },
  {
    "electronic_device": "demo",
    "openscad_code": "// Demo Electronic Device - Smartphone-like Gadget\n// Medium complexity, realistic style\n\n// Device dimensions\nphone_w = 35;\nphone_h = 70;\nphone_d = 8;\ncorner_r = 5;\nwall_t = 2;\n\n// Screen dimensions\nscreen_w = 28;\nscreen_h = 58;\nscreen_d = 0.5;\n\n// Button dimensions\nbtn_w = 3;\nbtn_h = 1;\nbtn_d = 0.5;\n\n// Camera module\ncam_d = 2;\ncam_r = 3;\n\n// Speaker grill\nspkr_w = 15;\nspkr_h = 1;\nspkr_holes = 12;\nspkr_hole_d = 0.8;\n\n// Main body module\nmodule phone_body() {\n    // Rounded rectangular body\n    difference() {\n        // Outer shell\n        minkowski() {\n            cube([phone_w, phone_h, phone_d], center=true);\n            cylinder(r=corner_r, h=0.01, center=true);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([phone_w-wall_t*2, phone_h-wall_t*2, phone_d-wall_t], center=true);\n            cylinder(r=corner_r-1, h=0.01, center=true);\n        }\n    }\n}\n\n// Screen module\nmodule screen() {\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, phone_d/2 - screen_d/2])\n        cube([screen_w, screen_h, screen_d], center=true);\n    \n    // Screen surface\n    color([0, 0, 0])\n    translate([0, 0, phone_d/2 - screen_d/2 + 0.1])\n        cube([screen_w-1, screen_h-1, 0.1], center=true);\n}\n\n// Side buttons\nmodule side_buttons() {\n    // Power button\n    color([0.3, 0.3, 0.3])\n    translate([phone_w/2 + 0.01, 10, 0])\n        rotate([0, 90, 0])\n            cube([btn_h, btn_w, btn_d], center=true);\n    \n    // Volume buttons\n    for(i = [0:1]) {\n        color([0.3, 0.3, 0.3])\n        translate([phone_w/2 + 0.01, -10 - i*5, 0])\n            rotate([0, 90, 0])\n                cube([btn_h, btn_w, btn_d], center=true);\n    }\n}\n\n// Camera bump\nmodule camera() {\n    color([0.1, 0.1, 0.1])\n    translate([phone_w/2 - 8, phone_h/2 - 8, phone_d/2 + cam_d/2 - 0.5])\n        cylinder(h=cam_d, r=cam_r, center=true);\n    \n    // Lens\n    color([0.05, 0.05, 0.05])\n    translate([phone_w/2 - 8, phone_h/2 - 8, phone_d/2 + cam_d - 0.3])\n        cylinder(h=0.2, r=cam_r-1, center=true);\n    \n    // LED flash\n    color([1, 1, 0.8])\n    translate([phone_w/2 - 12, phone_h/2 - 8, phone_d/2 + cam_d - 0.3])\n        cylinder(h=0.2, r=1, center=true);\n}\n\n// Speaker grill\nmodule speaker() {\n    color([0.2, 0.2, 0.2])\n    translate([0, -phone_h/2 - 0.01, -phone_d/4])\n        cube([spkr_w, 0.01, spkr_h], center=true);\n    \n    // Speaker holes\n    for(i = [0:spkr_holes-1]) {\n        translate([-spkr_w/2 + i*(spkr_w/spkr_holes) + 0.5, -phone_h/2 - 0.1, -phone_d/4])\n            cylinder(h=1, r=spkr_hole_d/2, center=true);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    color([0.1, 0.1, 0.1])\n    translate([0, -phone_h/2 - 0.01, 0])\n        cube([8, 0.01, 3], center=true);\n}\n\n// Assembly\ncolor([0.9, 0.9, 0.9])\nphone_body();\n\ncolor([0.1, 0.1, 0.1])\nscreen();\n\nside_buttons();\n\ncolor([0.2, 0.2, 0.2])\ncamera();\n\nspeaker();\nusb_port();\n\n// Front camera\ncolor([0.05, 0.05, 0.05])\ntranslate([0, phone_h/2 - 10, phone_d/2 - 0.2])\n    cylinder(h=0.3, r=1, center=true);\n\n// Logo placeholder\ncolor([0.3, 0.3, 0.3])\ntranslate([0, 0, -phone_d/2 + 0.1])\n    cube([10, 5, 0.1], center=true);",
    "renders": true
  },
  {
    "electronic_device": "mod",
    "openscad_code": "// OpenSCAD mod electronic device - Realistic style, medium complexity\n// A compact handheld mod with OLED screen, fire button, adjustment buttons, and USB-C port\n\n// Overall dimensions\nlength = 75;\nwidth = 40;\nheight = 25;\nwall = 2;\n\n// Colors\nbody_color = [0.2, 0.2, 0.2];\naccent_color = [0.3, 0.3, 0.3];\nscreen_color = [0.1, 0.1, 0.1];\nbutton_color = [0.15, 0.15, 0.15];\n\n// Main body\ndifference() {\n    color(body_color) cube([length, width, height], center=true);\n    \n    // Battery compartment cavity\n    translate([0, 0, -height/2 + wall])\n        cube([length - 8, width - 8, height - wall], center=true);\n}\n\n// Top plate with 510 connector\ntranslate([0, 0, height/2 - 0.5])\n    color(accent_color) cylinder(h=3, r=12, center=true);\n\n// 510 connector pin\ntranslate([0, 0, height/2 + 1.5])\n    color([0.8, 0.8, 0.8]) cylinder(h=2, r=5, center=true);\n\n// Front face details\ndifference() {\n    // Front plate\n    translate([0, width/2 - 0.5, 0])\n        color(accent_color) cube([length, 1, height], center=true);\n    \n    // OLED screen opening\n    translate([-length/2 + 15, width/2, -height/2 + 8])\n        cube([30, 1.1, 12], center=false);\n    \n    // USB-C port\n    translate([length/2 - 12, width/2, -height/2 + 5])\n        cube([8, 1.1, 4], center=false);\n}\n\n// OLED screen\ntranslate([-length/2 + 15, width/2 + 0.1, -height/2 + 8])\n    color(screen_color) cube([30, 0.1, 12], center=false);\n\n// Fire button\ntranslate([0, -width/2 + 5, height/2 - 5])\n    color(button_color) cylinder(h=3, r=8, center=true);\n\n// Plus/minus adjustment buttons\nfor (i = [0,1]) {\n    translate([length/2 - 20 + i*10, -width/2 + 2, height/2 - 3])\n        color(button_color) cube([5, 2, 3], center=true);\n}\n\n// LED indicator holes\nfor (i = [0:2]) {\n    translate([-length/2 + 5 + i*5, width/2 - 1, height/2 - 2])\n        cylinder(h=1, r=1, center=true);\n}\n\n// Side grip textures\nmodule grip_texture() {\n    for (i = [0:3]) {\n        translate([length/2 - 10 - i*5, 0, -height/2 + 2])\n            cube([2, width, 1], center=true);\n    }\n}\n\n// Apply grip texture to both sides\ngrip_texture();\nmirror([1,0,0]) grip_texture();\n\n// Bottom battery door\ntranslate([0, 0, -height/2 + 1])\n    color(accent_color) cube([length - 4, width - 4, 2], center=true);\n\n// Battery door magnet holes\nfor (i = [-1,1]) {\n    translate([i*15, 0, -height/2 + 0.5])\n        cylinder(h=1, r=2, center=true);\n}\n\n// Ventilation slots\nfor (i = [0:2]) {\n    translate([length/2 - 25 - i*5, 0, -height/2 + 6])\n        cube([3, width, 1], center=true);\n}",
    "renders": true
  },
  {
    "electronic_device": "map",
    "openscad_code": "// Map Electronic Device - GPS Unit\n// Realistic style, medium complexity\n\n// Color definitions\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_case = [0.3, 0.3, 0.3];\ncolor_buttons = [0.2, 0.2, 0.2];\ncolor_accents = [0.8, 0.8, 0.8];\ncolor_port = [0.1, 0.1, 0.1];\n\n// Main dimensions\ndevice_width = 80;\ndevice_height = 120;\ndevice_thickness = 15;\nscreen_margin = 5;\nwall_thickness = 2;\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Outer shell\n        color(color_case)\n        rounded_cube([device_width, device_height, device_thickness], 5);\n        \n        // Screen cutout\n        translate([0, 0, -0.1])\n        color(color_screen)\n        rounded_cube([device_width - screen_margin*2, \n                     device_height - screen_margin*2, \n                     device_thickness + 0.2], 3);\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(size, radius) {\n    hull() {\n        translate([radius, radius, 0]) \n            cube([size[0] - radius*2, size[1] - radius*2, size[2]]);\n        translate([radius, radius, radius]) \n            sphere(r = radius);\n        translate([size[0] - radius, radius, radius]) \n            sphere(r = radius);\n        translate([radius, size[1] - radius, radius]) \n            sphere(r = radius);\n        translate([size[0] - radius, size[1] - radius, radius]) \n            sphere(r = radius);\n    }\n}\n\n// Screen\nmodule screen() {\n    translate([0, 0, device_thickness - 0.5])\n    color(color_screen)\n    difference() {\n        cube([device_width - screen_margin*2 - 2, \n              device_height - screen_margin*2 - 2, \n              1], center = true);\n        // Map display area\n        translate([0, 0, -0.2])\n        cube([device_width - screen_margin*2 - 6, \n              device_height - screen_margin*2 - 6, \n              1.5], center = true);\n    }\n}\n\n// Map details on screen\nmodule map_display() {\n    translate([0, 0, device_thickness - 0.2])\n    color([0.1, 0.8, 0.2])\n    for(i = [-2:2]) {\n        for(j = [-3:3]) {\n            if((i+j) % 2 == 0) {\n                translate([i*8, j*8, 0])\n                cube([6, 6, 0.1], center = true);\n            }\n        }\n    }\n    \n    // Roads\n    color([0.9, 0.9, 0.9])\n    translate([0, 0, 0.1])\n    cube([device_width - 20, 2, 0.1], center = true);\n    translate([0, 0, 0.1])\n    rotate([0, 0, 90])\n    cube([device_height - 30, 2, 0.1], center = true);\n    \n    // Current location marker\n    color([1, 0, 0])\n    translate([0, -10, 0.2])\n    cylinder(h = 0.5, r = 3, $fn = 16);\n}\n\n// Buttons\nmodule buttons() {\n    // Power button\n    translate([device_width/2 - 5, device_height/2 + 5, device_thickness/2])\n    rotate([90, 0, 0])\n    color(color_buttons)\n    cylinder(h = 3, r = 2, $fn = 16);\n    \n    // Menu buttons\n    for(i = [0:2]) {\n        translate([-device_width/2 + 5 + i*8, device_height/2 - 10, device_thickness/2])\n        rotate([90, 0, 0])\n        color(color_buttons)\n        rounded_cube([6, 6, 2], 1);\n    }\n}\n\n// USB port\nmodule usb_port() {\n    translate([0, -device_height/2, 0])\n    color(color_port)\n    difference() {\n        cube([8, 4, 3], center = true);\n        translate([0, 0, 1])\n        cube([6, 3, 3], center = true);\n    }\n}\n\n// Speaker grill\nmodule speaker() {\n    translate([device_width/2 - 10, 0, device_thickness/2])\n    rotate([90, 0, 0])\n    color(color_port)\n    for(i = [0:4]) {\n        translate([0, i*2 - 4, 0])\n        cube([0.5, 1, 8], center = true);\n    }\n}\n\n// Antenna bump\nmodule antenna() {\n    translate([0, device_height/2 - 10, device_thickness/2 + 2])\n    color(color_case)\n    difference() {\n        cylinder(h = 4, r = 8, $fn = 32);\n        translate([0, 0, -0.1])\n        cylinder(h = 4.2, r = 6, $fn = 32);\n    }\n}\n\n// Mounting clip\nmodule mounting_clip() {\n    translate([0, -device_height/2 - 5, -device_thickness/2])\n    color(color_case)\n    difference() {\n        union() {\n            cube([device_width - 40, 10, 5], center = true);\n            translate([0, -5, 0])\n            cube([device_width - 50, 10, 5], center = true);\n        }\n        translate([0, -2.5, -2.5])\n        cube([device_width - 45, 5, 10], center = true);\n    }\n}\n\n// Assembly\nmain_body();\nscreen();\nmap_display();\nbuttons();\nusb_port();\nspeaker();\nantenna();\nmounting_clip();",
    "renders": true
  },
  {
    "electronic_device": "court",
    "openscad_code": "// Court Electronic Recorder - Medium Complexity\n// A realistic courtroom audio recording device with screen, buttons, and ports\n\n$fn = 50;  // Smooth curves\n\n// Main case dimensions\ncase_w = 80;\ncase_h = 50;\ncase_d = 25;\nwall_t = 2;\n\nmodule main_case() {\n    difference() {\n        // Outer shell\n        color(\"darkslategray\")\n        cube([case_w, case_d, case_h], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_t/2])\n        cube([case_w-wall_t*2, case_d-wall_t, case_h-wall_t*2], center=true);\n    }\n}\n\nmodule front_panel() {\n    // Front face with recessed screen area\n    difference() {\n        color(\"black\")\n        translate([0, case_d/2 - 0.5, 0])\n        cube([case_w, 1, case_h], center=true);\n        \n        // Screen cutout\n        color(\"black\")\n        translate([0, case_d/2, 5])\n        cube([case_w*0.7, 1, case_h*0.5], center=true);\n    }\n}\n\nmodule screen() {\n    // LCD display\n    color(\"royalblue\")\n    translate([0, case_d/2, 5])\n    cube([case_w*0.65, 0.5, case_h*0.45], center=true);\n    \n    // Screen border\n    color(\"dimgray\")\n    translate([0, case_d/2 - 0.1, 5])\n    cube([case_w*0.68, 0.2, case_h*0.48], center=true);\n}\n\nmodule buttons() {\n    // Control buttons below screen\n    for(i = [0:4]) {\n        translate([-30 + i*15, case_d/2, -10])\n        cylinder(h=2, r=4, center=true);\n    }\n    \n    // Record button (red)\n    color(\"red\")\n    translate([0, case_d/2, -18])\n    cylinder(h=2, r=6, center=true);\n}\n\nmodule ports() {\n    // USB port on left side\n    color(\"black\")\n    translate([-case_w/2 - 0.5, 0, 0])\n    cube([4, 8, 3], center=true);\n    \n    // Power jack on right side\n    color(\"black\")\n    translate([case_w/2 + 0.5, 0, 0])\n    cylinder(h=4, r=3, center=true);\n}\n\nmodule speaker_grill() {\n    // Speaker holes on top\n    color(\"black\")\n    for(x = [-20:5:20]) {\n        for(y = [-10:5:10]) {\n            translate([x, y, case_h/2 + 0.5])\n            cylinder(h=1, r=1, center=true);\n        }\n    }\n}\n\nmodule led_indicators() {\n    // Status LEDs above screen\n    color(\"green\")\n    translate([-20, case_d/2, 15])\n    cylinder(h=1, r=2, center=true);\n    \n    color(\"red\")\n    translate([-10, case_d/2, 15])\n    cylinder(h=1, r=2, center=true);\n    \n    color(\"yellow\")\n    translate([0, case_d/2, 15])\n    cylinder(h=1, r=2, center=true);\n}\n\nmodule mounting_feet() {\n    // Rubber feet on bottom\n    color(\"black\")\n    for(x = [-30, 30]) {\n        for(y = [-8, 8]) {\n            translate([x, y, -case_h/2 - 1])\n            cylinder(h=2, r=3, center=true);\n        }\n    }\n}\n\nmodule label() {\n    // Court recorder label\n    color(\"white\")\n    translate([0, case_d/2 + 0.6, 0])\n    cube([case_w*0.8, 0.1, 8], center=true);\n}\n\n// Assembly\nunion() {\n    main_case();\n    front_panel();\n    screen();\n    buttons();\n    ports();\n    speaker_grill();\n    led_indicators();\n    mounting_feet();\n    label();\n}",
    "renders": true
  },
  {
    "electronic_device": "field",
    "openscad_code": "// Field Multimeter - Realistic Style, Medium Complexity\n// Total footprint ~80x110x35 mm (benchtop DMM form factor)\n\n// Colors\ncolor_case = \"darkslategray\";\ncolor_bezel = \"black\";\ncolor_screen = \"green\";\ncolor_button = \"dimgray\";\ncolor_probe = \"red\";\ncolor_label = \"white\";\n\n// Main body shell\nunion() {\n    // Base chassis\n    color(color_case)\n    translate([0,0,5])\n    cube([80,110,30], center=true);\n\n    // Front bezel\n    color(color_bezel)\n    translate([0,0,39])\n    cube([84,114,2], center=true);\n\n    // LCD window\n    color(color_screen)\n    translate([-30,25,40])\n    cube([50,25,1], center=true);\n\n    // Rotary selector knob\n    for(a=[0:30:330])\n        rotate([0,0,a])\n        translate([0,-25,40])\n        color(color_button)\n        cylinder(h=3, r1=6, r2=8, center=true);\n\n    // Function buttons grid\n    for(y=[-20,0,20])\n        for(x=[-35,-15,5,25])\n            translate([x,y,40])\n            color(color_button)\n            cube([10,6,1.5], center=true);\n\n    // Input jacks (4 mm banana)\n    translate([-25,-45,40])\n    color(\"gold\")\n    cylinder(h=5, r=2.2, center=true);\n\n    translate([25,-45,40])\n    color(\"gold\")\n    cylinder(h=5, r=2.2, center=true);\n\n    // COM jack\n    translate([0,-45,40])\n    color(\"black\")\n    cylinder(h=5, r=2.2, center=true);\n\n    // Battery door\n    translate([0,35,5])\n    difference() {\n        color(color_case)\n        cube([30,20,2], center=true);\n        translate([0,0,-1])\n        cube([26,16,3], center=true);\n    }\n\n    // Tilt stand\n    rotate([0,0,0])\n    translate([0,45,20])\n    color(color_case)\n    cube([70,5,20], center=true);\n\n    // Probe holders\n    module probeHolder(x) {\n        translate([x,55,5])\n        difference() {\n            color(color_case)\n            cube([10,8,35], center=true);\n            translate([0,0,15])\n            cylinder(h=40, r=3.5, center=true);\n        }\n    }\n    probeHolder(-30);\n    probeHolder(30);\n\n    // Red probe\n    translate([-30,55,40])\n    color(color_probe)\n    cylinder(h=70, r=3, center=true);\n\n    // Black probe\n    translate([30,55,40])\n    color(\"black\")\n    cylinder(h=70, r=3, center=true);\n\n    // Brand label\n    translate([0,15,40])\n    color(color_label)\n    cube([25,4,0.5], center=true);\n}",
    "renders": true
  },
  {
    "electronic_device": "track",
    "openscad_code": "// GPS Fitness Tracker Watch - Medium Complexity Realistic Style\n// Dimensions: 45mm x 45mm x 12mm\n\n// Color definitions\ntrack_color = [0.15, 0.15, 0.15]; // Dark gray\nscreen_color = [0, 0, 0]; // Black\nbutton_color = [0.2, 0.2, 0.2]; // Medium gray\naccent_color = [0.8, 0.2, 0.2]; // Red accent\n\n// Main case\nmodule main_case() {\n    difference() {\n        // Outer rounded square case\n        color(track_color)\n        minkowski() {\n            cube([42, 42, 8], center=true);\n            sphere(2);\n        }\n        \n        // Inner cavity for electronics\n        color([0.1, 0.1, 0.1])\n        translate([0, 0, 2])\n        cube([38, 38, 6], center=true);\n        \n        // Side button holes\n        translate([21, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=5, r=2.5, center=true);\n        \n        translate([-21, 15, 0])\n        rotate([0, 90, 0])\n        cylinder(h=5, r=2.5, center=true);\n        \n        translate([-21, -15, 0])\n        rotate([0, 90, 0])\n        cylinder(h=5, r=2.5, center=true);\n    }\n}\n\n// Display screen\nmodule display_screen() {\n    color(screen_color)\n    translate([0, 0, 5.5])\n    cube([35, 35, 1], center=true);\n    \n    // Screen bezel\n    color(track_color)\n    translate([0, 0, 5])\n    cube([37, 37, 0.5], center=true);\n}\n\n// Side buttons\nmodule side_buttons() {\n    // Main button\n    color(button_color)\n    translate([21.5, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=3, r=2.2, center=true);\n    \n    // Two smaller buttons\n    color(button_color)\n    translate([-21.5, 15, 0])\n    rotate([0, 90, 0])\n    cylinder(h=3, r=2.2, center=true);\n    \n    color(button_color)\n    translate([-21.5, -15, 0])\n    rotate([0, 90, 0])\n    cylinder(h=3, r=2.2, center=true);\n}\n\n// Heart rate sensor\nmodule heart_rate_sensor() {\n    color([0.3, 0.3, 0.3])\n    translate([0, 0, -5.5])\n    cylinder(h=1, r=8, center=true);\n    \n    // LED windows\n    for(i=[-1:1]) {\n        color([0.1, 0.1, 0.1])\n        translate([i*4, 0, -5.5])\n        cylinder(h=0.5, r=1.5, center=true);\n    }\n}\n\n// Watch straps\nmodule watch_straps() {\n    // Top strap\n    color(track_color)\n    translate([0, 32, 0])\n    cube([20, 20, 3], center=true);\n    \n    // Strap holes\n    for(i=[0:3]) {\n        translate([0, 30 + i*4, 1.5])\n        cylinder(h=3.5, r=1.5, center=true);\n    }\n    \n    // Bottom strap\n    color(track_color)\n    translate([0, -32, 0])\n    cube([20, 20, 3], center=true);\n    \n    // Buckle\n    color([0.3, 0.3, 0.3])\n    translate([0, -42, 0])\n    cube([20, 8, 3], center=true);\n}\n\n// Charging port\nmodule charging_port() {\n    color([0.2, 0.2, 0.2])\n    translate([0, -21, -3])\n    cube([8, 2, 1], center=true);\n}\n\n// Brand logo\nmodule brand_logo() {\n    color(accent_color)\n    translate([0, 0, 6.5])\n    cube([8, 2, 0.2], center=true);\n    translate([0, 2.5, 6.5])\n    cube([6, 2, 0.2], center=true);\n}\n\n// Assembly\nmain_case();\ndisplay_screen();\nside_buttons();\nheart_rate_sensor();\nwatch_straps();\ncharging_port();\nbrand_logo();",
    "renders": true
  },
  {
    "electronic_device": "circuit",
    "openscad_code": "// Raspberry Pi 4 Model B - Realistic Style\n// Board dimensions: 85mm x 56mm x 15mm\n\n// Color definitions\npcb_color = \"#006F00\";\ncopper_color = \"#B87333\";\nblack_color = \"#111111\";\nsilver_color = \"#C0C0C0\";\ngreen_color = \"#00AA00\";\nred_color = \"#AA0000\";\nyellow_color = \"#AAAA00\";\n\n// Main PCB\nmodule pcb() {\n    color(pcb_color) {\n        difference() {\n            cube([85, 56, 1.6], center=true);\n            // Mounting holes\n            for(x=[-30, 30])\n                for(y=[-23, 23])\n                    translate([x, y, 0])\n                        cylinder(h=2, r=2.7, center=true);\n        }\n    }\n}\n\n// Copper traces on top\nmodule traces() {\n    color(copper_color) {\n        // CPU area traces\n        translate([0, 5, 0.9])\n            cube([25, 25, 0.1]);\n        \n        // Memory traces\n        translate([0, -15, 0.9])\n            cube([30, 10, 0.1]);\n        \n        // GPIO traces\n        translate([-35, 0, 0.9])\n            cube([15, 51, 0.1]);\n    }\n}\n\n// BCM2711 CPU\nmodule cpu() {\n    color(black_color) {\n        translate([0, 5, 1.7])\n            cube([14, 14, 1]);\n    }\n}\n\n// Memory chip\nmodule memory() {\n    color(black_color) {\n        for(i=[-1, 1])\n            translate([i*7, -15, 1.7])\n                cube([7, 10, 1]);\n    }\n}\n\n// USB 3.0 ports\nmodule usb3_ports() {\n    color(black_color) {\n        for(i=[0, 1])\n            translate([37, -15 + i*12, 0])\n                cube([10, 8, 5]);\n    }\n}\n\n// USB-C power port\nmodule usbc_port() {\n    color(black_color) {\n        translate([37, 15, 0])\n            cube([8, 6, 3]);\n    }\n}\n\n// Ethernet port\nmodule ethernet_port() {\n    color(black_color) {\n        translate([37, 0, 0])\n            cube([10, 14, 6]);\n    }\n}\n\n// HDMI ports\nmodule hdmi_ports() {\n    color(black_color) {\n        for(i=[0, 1])\n            translate([37, 25 + i*10, 0])\n                cube([8, 6, 4]);\n    }\n}\n\n// GPIO header\nmodule gpio_header() {\n    color(black_color) {\n        translate([-42, 0, 1.7])\n            cube([6, 51, 6]);\n        \n        // GPIO pins\n        color(silver_color) {\n            for(pin=[0:39]) {\n                translate([-42, -24.5 + pin*1.27, 7.7])\n                    cylinder(h=6, r=0.5);\n            }\n        }\n    }\n}\n\n// Micro SD card slot\nmodule sd_slot() {\n    color(black_color) {\n        translate([-42, 20, 0])\n            cube([10, 15, 3]);\n    }\n}\n\n// Status LEDs\nmodule leds() {\n    // Power LED\n    color(red_color) {\n        translate([-32, -22, 1.7])\n            cylinder(h=0.5, r=1);\n    }\n    \n    // Activity LED\n    color(green_color) {\n        translate([-32, -20, 1.7])\n            cylinder(h=0.5, r=1);\n    }\n}\n\n// WiFi/Bluetooth chip antenna\nmodule antenna() {\n    color(silver_color) {\n        translate([30, 25, 1.7])\n            cube([10, 5, 0.1]);\n    }\n}\n\n// USB 2.0 ports\nmodule usb2_ports() {\n    color(black_color) {\n        for(i=[0, 1])\n            translate([37, -25 - i*12, 0])\n                cube([10, 8, 5]);\n    }\n}\n\n// Audio jack\nmodule audio_jack() {\n    color(silver_color) {\n        translate([-42, -20, 0])\n            rotate([90, 0, 0])\n                cylinder(h=10, r=3.5);\n    }\n}\n\n// Display connector\nmodule display_connector() {\n    color(black_color) {\n        translate([0, -25, 0])\n            cube([20, 5, 4]);\n        \n        // FFC connector\n        color(black_color) {\n            translate([0, -25, 4.5])\n                cube([20, 5, 1.5]);\n        }\n    }\n}\n\n// Camera connector\nmodule camera_connector() {\n    color(black_color) {\n        translate([15, 25, 0])\n            cube([20, 5, 4]);\n        \n        // FFC connector\n        color(black_color) {\n            translate([15, 25, 4.5])\n                cube([20, 5, 1.5]);\n        }\n    }\n}\n\n// Main assembly\npcb();\ntraces();\ncpu();\nmemory();\nusb3_ports();\nusb2_ports();\nusbc_port();\nethernet_port();\nhdmi_ports();\ngpio_header();\nsd_slot();\nleds();\nantenna();\naudio_jack();\ndisplay_connector();\ncamera_connector();",
    "renders": true
  },
  {
    "electronic_device": "dungeon",
    "openscad_code": "// Dungeon electronic device - a ruggedized tablet for adventurers\n// Overall dimensions: 80mm x 120mm x 15mm\n\n$fn = 32;\n\n// Main colors\ncolor_case = [0.2, 0.2, 0.2]; // Dark metallic gray\ncolor_screen = [0.1, 0.1, 0.1]; // Black screen\ncolor_trim = [0.4, 0.3, 0.2]; // Bronze trim\ncolor_buttons = [0.1, 0.1, 0.1]; // Dark buttons\ncolor_led = [0, 1, 0]; // Green LED\n\n// Main body - slightly rounded edges for grip\nmodule body() {\n    color(color_case)\n    difference() {\n        // Main body with rounded edges\n        minkowski() {\n            cube([78, 118, 13], center = true);\n            sphere(2);\n        }\n        \n        // Hollow out the inside\n        translate([0, 0, 1])\n        cube([74, 114, 15], center = true);\n    }\n}\n\n// Screen recess and glass\nmodule screen() {\n    // Screen recess\n    color(color_case)\n    translate([0, 0, 7])\n    difference() {\n        cube([62, 92, 1], center = true);\n        translate([0, 0, -0.5])\n        cube([60, 90, 2], center = true);\n    }\n    \n    // Screen glass\n    color(color_screen)\n    translate([0, 0, 7.5])\n    cube([60, 90, 0.5], center = true);\n}\n\n// Protective corner guards\nmodule corner_guards() {\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x * 38, y * 58, 0])\n        color(color_trim)\n        rotate([0, 0, x * y * 45])\n        cylinder(h = 15, r1 = 6, r2 = 4, center = true);\n    }\n}\n\n// Button cluster on right side\nmodule buttons() {\n    for(i = [0:2]) {\n        translate([38, 30 - i * 15, 0])\n        color(color_buttons)\n        rotate([90, 0, 0])\n        cylinder(h = 3, r = 3, center = true);\n    }\n}\n\n// Power button on top\nmodule power_button() {\n    translate([0, 59, 0])\n    color(color_buttons)\n    rotate([90, 0, 0])\n    cylinder(h = 2, r = 4, center = true);\n}\n\n// LED indicators on front\nmodule status_leds() {\n    for(i = [0:1]) {\n        translate([-30 + i * 20, 45, 7.5])\n        color(color_led)\n        sphere(1.5);\n    }\n}\n\n// Ventilation slots on back\nmodule vents() {\n    for(i = [-2:2]) {\n        translate([i * 15, 0, -7])\n        color(color_case)\n        cube([2, 30, 1], center = true);\n    }\n}\n\n// USB port on bottom\nmodule usb_port() {\n    translate([0, -59, -5])\n    color([0.3, 0.3, 0.3])\n    cube([8, 2, 4], center = true);\n}\n\n// Rugged texture pattern on sides\nmodule side_texture() {\n    for(i = [-5:5]) {\n        translate([39, i * 10, 0])\n        color(color_case)\n        cube([2, 4, 12], center = true);\n    }\n    for(i = [-5:5]) {\n        translate([-39, i * 10, 0])\n        color(color_case)\n        cube([2, 4, 12], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    screen();\n    corner_guards();\n    buttons();\n    power_button();\n    status_leds();\n    vents();\n    usb_port();\n    side_texture();\n}",
    "renders": true
  },
  {
    "electronic_device": "raid",
    "openscad_code": "// RAID Storage Device - Realistic Style, Medium Complexity\n// Dimensions: 120mm x 80mm x 35mm\n\n// Main dimensions\ndevice_length = 120;\ndevice_width = 80;\ndevice_height = 35;\nwall_thickness = 2;\ndrive_bay_width = 12;\ndrive_bay_gap = 3;\nnum_drives = 4;\n\n// Colors\ncolor_case = [0.2, 0.2, 0.2];\ncolor_drives = [0.1, 0.1, 0.1];\ncolor_leds = [0, 1, 0];\ncolor_screen = [0.05, 0.05, 0.05];\ncolor_buttons = [0.3, 0.3, 0.3];\n\n// Main case shell\nmodule case_shell() {\n    difference() {\n        // Outer shell\n        color(color_case)\n        cube([device_length, device_width, device_height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness/2])\n        cube([device_length - wall_thickness*2, device_width - wall_thickness*2, device_height - wall_thickness], center = true);\n        \n        // Front drive bays opening\n        translate([0, 0, -device_height/2 + wall_thickness/2])\n        cube([device_length - wall_thickness*2, device_width - wall_thickness*2, wall_thickness], center = true);\n    }\n}\n\n// Individual drive bay module\nmodule drive_bay() {\n    difference() {\n        // Drive tray\n        color(color_drives)\n        cube([drive_bay_width, device_width - wall_thickness*2 - 4, drive_bay_width - 2], center = true);\n        \n        // Drive handle opening\n        translate([0, -device_width/2 + wall_thickness + 2, 0])\n        cube([drive_bay_width - 4, 4, drive_bay_width - 2], center = true);\n        \n        // Ventilation holes\n        for(i = [-1:1]) {\n            translate([0, i*3, 0])\n            rotate([90, 0, 0])\n            cylinder(h = drive_bay_width - 2, d = 1.5, center = true);\n        }\n    }\n    \n    // Drive activity LED\n    translate([drive_bay_width/2 - 1, device_width/2 - wall_thickness - 1, 0])\n    color(color_leds)\n    sphere(d = 1.5);\n    \n    // Drive handle\n    translate([0, -device_width/2 + wall_thickness + 2, 0])\n    color(color_case)\n    cube([drive_bay_width - 6, 2, drive_bay_width - 4], center = true);\n}\n\n// LCD status screen\nmodule status_screen() {\n    translate([device_length/2 - 15, 0, device_height/2 - 5])\n    difference() {\n        // Screen bezel\n        color(color_case)\n        cube([12, 25, 3], center = true);\n        \n        // Screen display area\n        translate([0, 0, 1])\n        color(color_screen)\n        cube([10, 22, 0.5], center = true);\n    }\n}\n\n// Control buttons\nmodule control_buttons() {\n    for(i = [0:2]) {\n        translate([device_length/2 - 25, -10 + i*10, device_height/2 - 3])\n        color(color_buttons)\n        cylinder(h = 2, d = 6, center = true);\n    }\n}\n\n// USB ports\nmodule usb_ports() {\n    for(i = [0:1]) {\n        translate([device_length/2 - 5, -15 + i*30, -device_height/2 + 1])\n        difference() {\n            color([0.15, 0.15, 0.15])\n            cube([8, 12, 2], center = true);\n            \n            // Port openings\n            translate([0, -2, 0])\n            cube([6, 2, 1], center = true);\n            translate([0, 2, 0])\n            cube([6, 2, 1], center = true);\n        }\n    }\n}\n\n// Cooling fan vents\nmodule fan_vents() {\n    translate([-device_length/2 + 5, 0, 0])\n    difference() {\n        color(color_case)\n        cube([10, device_width - 20, device_height - 10], center = true);\n        \n        // Ventilation grid\n        for(x = [-3:3]) {\n            for(y = [-2:2]) {\n                translate([x*1.2, y*1.2, 0])\n                cube([0.8, 0.8, 10], center = true);\n            }\n        }\n    }\n}\n\n// Power connector\nmodule power_connector() {\n    translate([-device_length/2 + 3, 0, -device_height/2 + 3])\n    difference() {\n        color([0.25, 0.25, 0.25])\n        cube([6, 15, 6], center = true);\n        \n        // Connector hole\n        translate([0, 0, 3])\n        cylinder(h = 6, d = 8, center = true);\n    }\n}\n\n// Assembly\ncase_shell();\n\n// Drive bays\nfor(i = [0:num_drives-1]) {\n    translate([-device_length/2 + wall_thickness + drive_bay_width/2 + i*(drive_bay_width + drive_bay_gap), 0, -device_height/2 + wall_thickness + drive_bay_width/2])\n    drive_bay();\n}\n\nstatus_screen();\ncontrol_buttons();\nusb_ports();\nfan_vents();\npower_connector();",
    "renders": true
  },
  {
    "electronic_device": "quest",
    "openscad_code": "// Quest VR Headset - Realistic Style\n// Overall dimensions: 90mm x 180mm x 100mm (width x length x height)\n\n// Main colors\n$fa = 2;\n$fs = 0.5;\n\nmodule main_body() {\n    // Front curved face with display housing\n    difference() {\n        // Main rounded body\n        scale([1, 1.2, 1])\n        minkowski() {\n            cube([80, 40, 60], center=true);\n            sphere(5);\n        }\n        \n        // Display recess\n        translate([0, 20, 0])\n        scale([0.9, 0.1, 0.9])\n        cube([75, 40, 55], center=true);\n        \n        // Sensor holes (4 corners)\n        for(x = [-30, 30])\n            for(z = [-20, 20])\n                translate([x, 25, z])\n                cylinder(h=5, d=8);\n    }\n}\n\nmodule face_interface() {\n    // Soft foam padding interface\n    color(\"lightgray\")\n    difference() {\n        // Main foam shape\n        translate([0, -15, 0])\n        scale([1.1, 0.5, 1.1])\n        cube([85, 30, 75], center=true);\n        \n        // Nose cutout\n        translate([0, -15, -15])\n        rotate([0, 90, 0])\n        cylinder(h=30, d1=25, d2=15);\n    }\n}\n\nmodule head_straps() {\n    // Top strap\n    color(\"black\")\n    translate([0, 0, 40])\n    rotate([90, 0, 0])\n    cylinder(h=100, d1=20, d2=15);\n    \n    // Side straps\n    for(side = [-1, 1]) {\n        translate([side * 50, 0, 20])\n        rotate([0, side * 10, 0])\n        cylinder(h=80, d=15);\n    }\n}\n\nmodule controllers() {\n    // Left controller\n    translate([-60, 20, -30])\n    rotate([0, 0, -15])\n    controller();\n    \n    // Right controller (mirrored)\n    translate([60, 20, -30])\n    scale([-1, 1, 1])\n    rotate([0, 0, 15])\n    controller();\n}\n\nmodule controller() {\n    // Main controller body\n    color(\"darkgray\")\n    difference() {\n        // Handle\n        translate([0, 0, 0])\n        cylinder(h=100, d=35);\n        \n        // Ring around handle\n        translate([0, 0, 70])\n        rotate([90, 0, 0])\n        torus(30, 5);\n        \n        // Button cutouts\n        translate([0, 0, 85])\n        cube([15, 15, 5], center=true);\n        \n        translate([10, 0, 75])\n        cylinder(h=8, d=10);\n        \n        translate([-10, 0, 75])\n        cylinder(h=8, d=10);\n    }\n    \n    // Thumbstick\n    color(\"black\")\n    translate([0, 0, 85])\n    cylinder(h=8, d=12);\n}\n\nmodule torus(outer, inner) {\n    rotate_extrude()\n    translate([outer, 0, 0])\n    circle(r=inner);\n}\n\nmodule ports() {\n    // USB-C port\n    color(\"black\")\n    translate([0, -30, -20])\n    cube([8, 3, 3], center=true);\n    \n    // Headphone jack\n    translate([0, -30, -10])\n    cylinder(h=3, d=6);\n}\n\n// Main assembly\nunion() {\n    // Main headset body\n    color(\"lightgray\")\n    main_body();\n    \n    // Face interface\n    face_interface();\n    \n    // Head straps\n    head_straps();\n    \n    // Ports\n    ports();\n    \n    // LED indicator\n    color(\"blue\")\n    translate([0, 25, 0])\n    sphere(3);\n}\n\n// Controllers positioned separately\ncontrollers();",
    "renders": true
  },
  {
    "electronic_device": "mission",
    "openscad_code": "// Mission Electronic Device - Portable GPS Tracker / Beacon\n// Realistic style with medium complexity\n// Overall dimensions: 75mm x 45mm x 20mm\n\n// Main colors\n$fa = 1;\n$fs = 0.5;\n\n// Main body shell\nmodule main_body() {\n    difference() {\n        // Outer shell with rounded edges\n        minkowski() {\n            cube([65, 40, 15], center=true);\n            sphere(2);\n        }\n        \n        // Inner cavity\n        minkowski() {\n            cube([61, 36, 12], center=true);\n            sphere(1);\n        }\n        \n        // USB-C port\n        translate([32.5, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=10, r=3.5, center=true);\n            \n        // Lanyard hole\n        translate([-32.5, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=10, r=2, center=true);\n    }\n}\n\n// LCD screen assembly\nmodule screen() {\n    // Screen bezel\n    color(\"darkslategray\")\n    translate([0, 8, 8])\n        cube([30, 15, 1], center=true);\n    \n    // LCD display\n    color(\"black\")\n    translate([0, 8, 9])\n        cube([28, 13, 0.5], center=true);\n    \n    // Screen protector edge\n    color(\"gray\")\n    translate([0, 8, 9.5])\n        cube([29, 14, 0.2], center=true);\n}\n\n// Control buttons\nmodule buttons() {\n    // Power button (red)\n    color(\"red\")\n    translate([-20, -15, 9])\n        cylinder(h=2, r=3, center=true);\n    \n    // SOS button (orange)\n    color(\"orange\")\n    translate([0, -15, 9])\n        cylinder(h=2, r=4, center=true);\n    \n    // Mode button (gray)\n    color(\"gray\")\n    translate([20, -15, 9])\n        cylinder(h=2, r=3, center=true);\n}\n\n// Status LEDs\nmodule status_leds() {\n    // GPS indicator (blue)\n    color(\"blue\")\n    translate([-25, 15, 9])\n        sphere(1.5);\n    \n    // Battery indicator (green)\n    color(\"green\")\n    translate([-15, 15, 9])\n        sphere(1.5);\n    \n    // Signal indicator (yellow)\n    color(\"yellow\")\n    translate([-5, 15, 9])\n        sphere(1.5);\n}\n\n// Antenna housing\nmodule antenna() {\n    // Main antenna bump\n    color(\"darkgray\")\n    translate([25, 10, 5])\n        scale([1.5, 1, 0.5])\n        sphere(5);\n    \n    // Antenna lines detail\n    for(i=[-1:1]) {\n        color(\"black\")\n        translate([25 + i*2, 10, 7.5])\n            cube([0.5, 8, 0.2], center=true);\n    }\n}\n\n// Rubber grip strips\nmodule grip_strips() {\n    color(\"gray20\")\n    for(side=[-1, 1]) {\n        translate([0, side*18, 0])\n            cube([60, 2, 15], center=true);\n    }\n}\n\n// Product label area\nmodule product_label() {\n    color(\"white\")\n    translate([0, 0, 9])\n        cube([25, 8, 0.1], center=true);\n    \n    // Mission text\n    color(\"black\")\n    translate([0, 0, 9.2])\n        linear_extrude(0.1)\n        text(\"MISSION\", size=3, halign=\"center\");\n}\n\n// Battery cover screws (decorative)\nmodule screws() {\n    color(\"silver\")\n    for(pos=[[-25, -10], [25, -10], [25, 10], [-25, 10]]) {\n        translate([pos[0], pos[1], -7.5])\n            cylinder(h=1, r=1.5, center=true);\n        translate([pos[0], pos[1], -7])\n            cylinder(h=0.5, r=1, center=true);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 10]) {\n    color(\"darkolivegreen\") main_body();\n    screen();\n    buttons();\n    status_leds();\n    antenna();\n    grip_strips();\n    product_label();\n    screws();\n}",
    "renders": true
  },
  {
    "electronic_device": "campaign",
    "openscad_code": "// Campaign Electronic Device - Handheld Campaign Tracker\n// Realistic style with medium complexity\n\n// Base dimensions\ndevice_width = 45;\ndevice_height = 85;\ndevice_depth = 12;\n\n// Screen dimensions\nscreen_width = 35;\nscreen_height = 50;\nscreen_depth = 1;\n\n// Colors\n$fn = 32;\n\n// Device body\nunion() {\n    // Main body with rounded edges\n    translate([0, 0, device_depth/2])\n        minkowski() {\n            cube([device_width, device_height, device_depth], center=true);\n            sphere(2);\n        }\n    \n    // Screen bezel\n    color([0.1, 0.1, 0.1])\n    translate([0, 5, (device_depth/2) + 0.5])\n        cube([screen_width + 6, screen_height + 8, 1.5], center=true);\n    \n    // LCD screen\n    color([0.2, 0.2, 0.3])\n    translate([0, 5, (device_depth/2) + 1.8])\n        cube([screen_width, screen_height, screen_depth], center=true);\n    \n    // Active screen area\n    color([0.1, 0.8, 0.9])\n    translate([0, 5, (device_depth/2) + 2.9])\n        cube([screen_width - 4, screen_height - 8, 0.5], center=true);\n    \n    // Navigation buttons\n    module button(x, y, label) {\n        translate([x, y, (device_depth/2) + 2])\n        union() {\n            // Button base\n            color([0.3, 0.3, 0.3])\n            cylinder(h=1.5, r=3, center=true);\n            // Button top\n            color([0.7, 0.7, 0.7])\n            translate([0, 0, 1])\n            cylinder(h=1, r=2.5, center=true);\n        }\n    }\n    \n    // D-pad style buttons\n    button(-15, -20, \"up\");\n    button(-15, -30, \"down\");\n    button(-20, -25, \"left\");\n    button(-10, -25, \"right\");\n    \n    // Action buttons\n    button(15, -20, \"A\");\n    button(15, -30, \"B\");\n    \n    // Power button\n    color([0.8, 0.2, 0.2])\n    translate([0, -35, (device_depth/2) + 1])\n        cube([8, 3, 1.5], center=true);\n    \n    // USB-C port\n    color([0.2, 0.2, 0.2])\n    translate([0, -device_height/2 - 2, 0])\n        cube([10, 4, 3], center=true);\n    \n    // Speaker grills\n    module speaker_grill(x) {\n        color([0.1, 0.1, 0.1])\n        translate([x, -device_height/2 + 10, device_depth/2 - 1])\n            for(i = [-10:5:10]) {\n                translate([0, i, 0])\n                    cube([1, 2, 2], center=true);\n            }\n    }\n    \n    speaker_grill(-20);\n    speaker_grill(20);\n    \n    // Antenna bump\n    color([0.4, 0.4, 0.4])\n    translate([0, device_height/2 - 5, device_depth/2 + 2])\n        cylinder(h=3, r=8, center=true);\n    \n    // Campaign logo\n    color([0.8, 0.1, 0.1])\n    translate([0, 20, device_depth/2 + 2])\n        cylinder(h=0.5, r=5, center=true);\n    \n    // LED indicators\n    module led(x, color_value) {\n        color(color_value)\n        translate([x, -device_height/2 + 5, device_depth/2 + 1])\n            cylinder(h=1, r=1.5, center=true);\n    }\n    \n    led(-15, [0, 1, 0]);  // Status LED\n    led(-10, [1, 0, 0]);  // Charging LED\n    led(-5, [0, 0, 1]);   // Bluetooth LED\n    \n    // Volume buttons\n    color([0.3, 0.3, 0.3])\n    translate([device_width/2 + 1, 10, 0])\n        cube([2, 8, 4], center=true);\n    translate([device_width/2 + 1, 0, 0])\n        cube([2, 8, 4], center=true);\n    \n    // Wrist strap loops\n    color([0.2, 0.2, 0.2])\n    translate([device_width/2 + 2, device_height/2 - 10, 0])\n        rotate([90, 0, 0])\n            cylinder(h=4, r=1.5, center=true);\n    translate([-device_width/2 - 2, device_height/2 - 10, 0])\n        rotate([90, 0, 0])\n            cylinder(h=4, r=1.5, center=true);\n}",
    "renders": true
  },
  {
    "electronic_device": "story",
    "openscad_code": "// Story E-Reader Device - Realistic Style, Medium Complexity\n// Overall dimensions: 96mm x 128mm x 9mm\n\n// Main body color - dark gray\ncolor([0.2, 0.2, 0.2]) \ntranslate([0, 0, 0])\nunion() {\n    // Main body shell\n    difference() {\n        // Outer shell with rounded edges\n        minkowski() {\n            cube([96, 128, 9], center = true);\n            cylinder(r = 4, h = 0.1, center = true);\n        }\n        \n        // Inner cavity for electronics\n        translate([0, 0, -1])\n        cube([88, 120, 11], center = true);\n    }\n    \n    // Bezel around screen\n    translate([0, 0, 4.5])\n    color([0.1, 0.1, 0.1])\n    cube([82, 110, 1], center = true);\n    \n    // E-ink screen\n    translate([0, 0, 5.1])\n    color([0.95, 0.95, 0.9])\n    cube([78, 106, 0.5], center = true);\n    \n    // Screen inner border\n    translate([0, 0, 5.4])\n    color([0.15, 0.15, 0.15])\n    cube([76, 104, 0.2], center = true);\n    \n    // Power button on top\n    translate([30, 62, 5])\n    color([0.3, 0.3, 0.3])\n    cylinder(h = 3, r = 4, center = true);\n    \n    // USB-C port on bottom\n    translate([0, -64, 0])\n    color([0.1, 0.1, 0.1])\n    cube([12, 3, 2], center = true);\n    \n    // Page turn buttons on right side\n    for(pos = [20, -20]) {\n        translate([48, pos, 0])\n        color([0.25, 0.25, 0.25])\n        cube([5, 15, 2], center = true);\n    }\n    \n    // LED indicator\n    translate([-35, 60, 5])\n    color([0.1, 0.1, 0.8])\n    cylinder(h = 1, r = 2, center = true);\n    \n    // Speaker grills at bottom\n    for(x = [-30, -15, 0, 15, 30]) {\n        translate([x, -55, 5])\n        color([0.15, 0.15, 0.15])\n        for(i = [-2:2]) {\n            translate([i * 2, 0, 0])\n            cube([1, 8, 0.5], center = true);\n        }\n    }\n    \n    // Volume buttons on left side\n    translate([-48, 15, 0])\n    color([0.25, 0.25, 0.25])\n    cube([3, 10, 2], center = true);\n    \n    translate([-48, 0, 0])\n    color([0.25, 0.25, 0.25])\n    cube([3, 10, 2], center = true);\n    \n    // Brand logo on back\n    translate([0, 0, -5])\n    color([0.4, 0.4, 0.4])\n    linear_extrude(height = 0.5) {\n        text(\"STORY\", size = 12, halign = \"center\", valign = \"center\");\n    }\n    \n    // Antenna line detail\n    translate([0, 50, 4.6])\n    color([0.3, 0.3, 0.3])\n    cube([90, 0.5, 1], center = true);\n    \n    // Microphone hole\n    translate([20, -60, 5])\n    color([0.1, 0.1, 0.1])\n    cylinder(h = 2, r = 1, center = true);\n}",
    "renders": true
  },
  {
    "electronic_device": "retro",
    "openscad_code": "// Retro Walkman-style portable cassette player\n// Outer dimensions: 85mm x 110mm x 30mm\n\n// Main body\ncolor(\"silver\")\ndifference() {\n    // Base shell\n    translate([-42.5, -55, -15])\n        cube([85, 110, 30], center=true);\n    \n    // Hollow out inside\n    translate([-40, -52.5, -12])\n        cube([78, 105, 26], center=true);\n}\n\n// Front face panel\ncolor(\"gray20\")\ntranslate([0, 0, 15.1])\n    cube([82, 108, 0.5], center=true);\n\n// Cassette door window\ncolor(\"gray50\")\ntranslate([0, 10, 15.5])\n    cube([60, 40, 0.2], center=true);\n\n// Door frame\ncolor(\"gray30\")\ndifference() {\n    translate([0, 10, 15.4])\n        cube([65, 45, 0.5], center=true);\n    translate([0, 10, 15.5])\n        cube([61, 41, 0.6], center=true);\n}\n\n// Play button\nmodule button(x, y, label) {\n    color(\"gray10\")\n    translate([x, y, 15.6])\n        cylinder(h=1.5, r=5, $fn=20);\n    color(\"red\")\n    translate([x, y, 17.2])\n        cylinder(h=0.5, r=4.5, $fn=20);\n}\n\n// Buttons row\nbutton(-25, -35, \"play\");\nbutton(-12, -35, \"rew\");\nbutton(1, -35, \"ff\");\nbutton(14, -35, \"stop\");\nbutton(27, -35, \"rec\");\n\n// Volume wheel\ncolor(\"gray10\")\ntranslate([-35, -20, 15.6])\n    cylinder(h=3, r=4, $fn=20);\ncolor(\"gray40\")\ntranslate([-35, -20, 16.6])\n    cylinder(h=1, r=3.5, $fn=6);\n\n// Headphone jack\ncolor(\"gray10\")\ntranslate([40, -45, 15.6])\n    cylinder(h=3, r=3, $fn=20);\ntranslate([40, -45, 18.6])\n    cylinder(h=2, r=1.5, $fn=20);\n\n// Battery compartment cover\ncolor(\"gray40\")\ntranslate([0, -48, -14.5])\n    cube([40, 25, 1], center=true);\n\n// Battery screws (simulated)\nfor (x = [-15, 15]) {\n    color(\"gray10\")\n    translate([x, -48, -14.2])\n        cylinder(h=0.5, r=1.5, $fn=10);\n}\n\n// Belt clip on back\ncolor(\"gray30\")\ntranslate([0, 30, -15.5])\n    cube([50, 20, 2], center=true);\n\n// Clip spring detail\ncolor(\"gray20\")\ntranslate([0, 30, -14.6])\n    cube([48, 18, 0.5], center=true);\n\n// Speaker grille pattern\nmodule grille_hole(x, y) {\n    color(\"gray20\")\n    translate([x, y, 15.6])\n        cylinder(h=0.5, r=1, $fn=8);\n}\n\nfor (i = [-3:1:3]) {\n    for (j = [-3:1:3]) {\n        grille_hole(i*6, j*6 + 25);\n    }\n}\n\n// Power LED indicator\ncolor(\"red\")\ntranslate([35, 35, 15.7])\n    cylinder(h=0.5, r=2, $fn=10);\ncolor(\"lightgray\")\ntranslate([35, 35, 16.2])\n    cylinder(h=0.2, r=2.5, $fn=10);\n\n// Brand label plate\ncolor(\"gray60\")\ntranslate([0, -5, 15.6])\n    cube([30, 8, 0.3], center=true);\n\n// Side ridges for grip\nmodule grip_ridge(y) {\n    color(\"silver\")\n    translate([-42.5, y, 0])\n        cube([2, 5, 26], center=true);\n}\n\nfor (y = [-45:10:45]) {\n    grip_ridge(y);\n    mirror([1,0,0])\n        grip_ridge(y);\n}",
    "renders": true
  },
  {
    "electronic_device": "classic",
    "openscad_code": "// Classic Walkman Cassette Player - Medium Complexity Realistic Style\n// Dimensions: 100mm x 70mm x 30mm\n\n$fn = 32;\n\n// Main body color\ncolor([0.15, 0.15, 0.15]) {\n    // Main body shell\n    difference() {\n        // Outer shell\n        translate([-50, -35, 0])\n            cube([100, 70, 30], center=true);\n        \n        // Inner cavity\n        translate([-48, -33, -1])\n            cube([96, 66, 32], center=true);\n    }\n}\n\n// Cassette door window\ncolor([0.2, 0.25, 0.4, 0.7]) {\n    translate([0, 0, 29.5])\n        cube([60, 40, 1], center=true);\n}\n\n// Control buttons panel\ntranslate([-45, -25, 30]) {\n    color([0.8, 0.8, 0.8]) {\n        cube([25, 50, 2]);\n    }\n    \n    // Play button (triangle)\n    color([0.2, 0.2, 0.2]) {\n        translate([5, 15, 2.5]) {\n            rotate([0, 0, 90])\n                cylinder(h=0.5, r1=3, r2=0);\n        }\n    }\n    \n    // Stop button (square)\n    color([0.2, 0.2, 0.2]) {\n        translate([5, 5, 2.5])\n            cube([4, 4, 0.5], center=true);\n    }\n    \n    // Rewind button (double triangle)\n    color([0.2, 0.2, 0.2]) {\n        translate([5, 0, 2.5]) {\n            for(i=[-1, 1]) {\n                translate([i*1.5, 0, 0]) {\n                    rotate([0, 0, -90])\n                        cylinder(h=0.5, r1=2, r2=0);\n                }\n            }\n        }\n    }\n    \n    // Fast forward button\n    color([0.2, 0.2, 0.2]) {\n        translate([5, -10, 2.5]) {\n            for(i=[-1, 1]) {\n                translate([i*1.5, 0, 0]) {\n                    rotate([0, 0, 90])\n                        cylinder(h=0.5, r1=2, r2=0);\n                }\n            }\n        }\n    }\n}\n\n// Headphone jack\ncolor([0.1, 0.1, 0.1]) {\n    translate([45, -20, 15]) {\n        rotate([90, 0, 0])\n            cylinder(h=10, r=3.5);\n        translate([0, 0, -1])\n            cylinder(h=2, r=4);\n    }\n}\n\n// Volume wheel\ncolor([0.7, 0.7, 0.7]) {\n    translate([45, 20, 15]) {\n        rotate([0, 90, 0])\n            cylinder(h=5, r=4);\n        difference() {\n            cylinder(h=6, r=4);\n            translate([0, 0, -1])\n                cylinder(h=8, r=2.5);\n        }\n    }\n}\n\n// Battery compartment\ntranslate([-48, 0, 5]) {\n    color([0.5, 0.5, 0.5, 0.6]) {\n        cube([2, 30, 20]);\n    }\n    \n    // Battery contacts\n    color([0.8, 0.8, 0]) {\n        for(i=[-10, 10]) {\n            translate([0, i, 5])\n                sphere(r=1.5);\n        }\n    }\n}\n\n// Cassette spool holes visible through window\nmodule spool() {\n    color([0.1, 0.1, 0.1]) {\n        difference() {\n            cylinder(h=3, r=4);\n            cylinder(h=3.5, r=2);\n        }\n    }\n}\n\n// Left spool\ntranslate([-20, 0, 15]) {\n    spool();\n}\n\n// Right spool\ntranslate([20, 0, 15]) {\n    spool();\n}\n\n// Brand label area\ncolor([0.9, 0.9, 0.9]) {\n    translate([0, 30, 30.5]) {\n        cube([30, 8, 0.5], center=true);\n    }\n}\n\n// Belt clip on back\ncolor([0.2, 0.2, 0.2]) {\n    translate([0, 0, -15.5]) {\n        difference() {\n            cube([80, 60, 1], center=true);\n            translate([0, 0, -1])\n                cube([70, 50, 3], center=true);\n        }\n    }\n}\n\n// Small LED indicator\ncolor([0.1, 0.8, 0.1]) {\n    translate([40, 25, 30.5])\n        sphere(r=1.5);\n}",
    "renders": true
  },
  {
    "electronic_device": "legacy",
    "openscad_code": "// Legacy Game Boy DMG-01\n// Overall dimensions: 90 x 148 x 32 mm\n\n// Colors\nscreen_color = [0.1, 0.1, 0.1];\ncase_color = [0.9, 0.9, 0.8];\nbutton_a_color = [0.9, 0.1, 0.2];\nbutton_b_color = [0.9, 0.1, 0.2];\ndpad_color = [0.1, 0.1, 0.1];\nscreen_bezel_color = [0.7, 0.7, 0.7];\n\n// Main shell\nmodule main_shell() {\n    difference() {\n        // Outer case\n        color(case_color)\n        minkowski() {\n            cube([90, 148, 25], center = true);\n            sphere(2);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -2])\n        scale([0.9, 0.9, 0.8])\n        cube([90, 148, 30], center = true);\n        \n        // Screen cutout\n        translate([0, 50, 12])\n        cube([65, 45, 5], center = true);\n        \n        // Button holes\n        translate([25, -20, 12])\n        cylinder(h = 5, r = 8, center = true);\n        \n        translate([25, -45, 12])\n        cylinder(h = 5, r = 8, center = true);\n        \n        // D-pad hole\n        translate([-25, -32, 12])\n        cube([30, 30, 5], center = true);\n        \n        // Speaker grill holes\n        for (i = [-3:3]) {\n            for (j = [-1:1]) {\n                translate([0 + j * 5, -90 + i * 5, 12])\n                cylinder(h = 5, r = 1, center = true);\n            }\n        }\n    }\n}\n\n// Screen bezel\nmodule screen_bezel() {\n    color(screen_bezel_color)\n    translate([0, 50, 12])\n    cube([70, 50, 2], center = true);\n    \n    // Actual screen\n    color(screen_color)\n    translate([0, 50, 13])\n    cube([60, 40, 1], center = true);\n}\n\n// D-pad\nmodule dpad() {\n    color(dpad_color)\n    translate([-25, -32, 6])\n    cube([28, 28, 3], center = true);\n    \n    // Up\n    translate([-25, -42, 6])\n    cube([8, 10, 3], center = true);\n    \n    // Down\n    translate([-25, -22, 6])\n    cube([8, 10, 3], center = true);\n    \n    // Left\n    translate([-35, -32, 6])\n    cube([10, 8, 3], center = true);\n    \n    // Right\n    translate([-15, -32, 6])\n    cube([10, 8, 3], center = true);\n}\n\n// Buttons\nmodule buttons() {\n    // A button\n    color(button_a_color)\n    translate([25, -20, 6])\n    cylinder(h = 5, r = 7, center = true);\n    \n    // B button\n    color(button_b_color)\n    translate([25, -45, 6])\n    cylinder(h = 5, r = 7, center = true);\n}\n\n// Select/Start buttons\nmodule select_start() {\n    color(dpad_color)\n    for (i = [-1:1]) {\n        translate([0 + i * 12, -65, 6])\n        cube([8, 3, 2], center = true);\n    }\n}\n\n// Power switch\nmodule power_switch() {\n    color(case_color)\n    translate([-35, 70, 6])\n    cube([10, 5, 2], center = true);\n    \n    color(dpad_color)\n    translate([-30, 70, 6])\n    cube([5, 2, 1], center = true);\n}\n\n// Cartridge slot\nmodule cartridge_slot() {\n    color([0.2, 0.2, 0.2])\n    translate([0, 90, 10])\n    cube([60, 15, 10], center = true);\n}\n\n// Link port\nmodule link_port() {\n    color([0.2, 0.2, 0.2])\n    translate([40, 70, 0])\n    cube([10, 15, 8], center = true);\n}\n\n// Assemble the Game Boy\nmain_shell();\nscreen_bezel();\ndpad();\nbuttons();\nselect_start();\npower_switch();\ncartridge_slot();\nlink_port();",
    "renders": true
  },
  {
    "electronic_device": "vintage",
    "openscad_code": "// Vintage Electronic Pocket Calculator (Casio style, ~1975)\n$fn = 32;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer rounded shell\n        minkowski() {\n            cube([75, 120, 15], center=true);\n            sphere(3);\n        }\n        // Hollow interior\n        translate([0,0,-1])\n            cube([71, 116, 20], center=true);\n    }\n}\n\n// Display window with realistic green LCD\nmodule display() {\n    translate([0, 35, 8]) {\n        // Display bezel\n        color([0.2,0.2,0.2])\n            cube([55, 25, 3], center=true);\n        \n        // LCD screen\n        translate([0,0,2])\n            color([0.1,0.3,0.1])\n            cube([50, 20, 1], center=true);\n        \n        // Reflection effect\n        translate([-20,-8,3])\n            scale([1,0.3,1])\n            color([0.8,0.9,0.8,0.5])\n            sphere(3);\n    }\n}\n\n// Individual calculator button\nmodule calc_button(label, x, y) {\n    translate([x, y, 8]) {\n        // Button base\n        color([0.1,0.1,0.1])\n            cylinder(h=3, r=5);\n        \n        // Button top\n        translate([0,0,3])\n            color([0.7,0.7,0.7])\n            cylinder(h=2, r=4.5);\n        \n        // Button label (raised)\n        translate([0,0,5.2])\n            scale([0.1,0.1,1])\n            color([0,0,0])\n            text(label, size=12, h=0.5, center=true);\n    }\n}\n\n// Button grid layout\nmodule keypad() {\n    // Number buttons 0-9\n    for (i = [0:9]) {\n        x = ((i-1) % 3 - 1) * 12;\n        y = (floor((i-1)/3) - 2) * 12 - 10;\n        if (i > 0) calc_button(str(i), x, y);\n    }\n    \n    // Zero button\n    calc_button(\"0\", -12, -46);\n    \n    // Operation buttons\n    calc_button(\"+\", 12, -10);\n    calc_button(\"-\", 12, -22);\n    calc_button(\"*\", 12, -34);\n    calc_button(\"/\", 12, -46);\n    calc_button(\"=\", 24, -46);\n    calc_button(\".\", 0, -46);\n    calc_button(\"C\", 24, -10);\n}\n\n// Battery compartment cover\nmodule battery_cover() {\n    translate([0, -45, -6.5]) {\n        color([0.3,0.3,0.3])\n            cube([30, 20, 1], center=true);\n        \n        // Screw\n        translate([10,-5,-1])\n            rotate([180,0,0])\n            cylinder(h=3, r=2);\n        \n        // Grooves for grip\n        for (i = [-2:2]) {\n            translate([i*4, 0, 0.6])\n                color([0.1,0.1,0.1])\n                cube([1, 18, 0.5], center=true);\n        }\n    }\n}\n\n// Model logo\nmodule logo() {\n    translate([0, 55, 8.5])\n        rotate([0,0,0])\n        scale([0.1,0.1,1])\n        color([0.1,0.1,0.1])\n        text(\"CASIO\", size=20, h=0.5, center=true);\n}\n\n// Assembly\nunion() {\n    // Main body in beige plastic\n    color([0.85,0.8,0.7])\n        body();\n    \n    // Display assembly\n    display();\n    \n    // Keypad\n    keypad();\n    \n    // Battery cover\n    battery_cover();\n    \n    // Brand logo\n    logo();\n    \n    // Side port (mini USB style)\n    translate([38, 0, 0])\n        rotate([0,90,0])\n        color([0.2,0.2,0.2])\n        cylinder(h=8, r=3);\n}",
    "renders": true
  },
  {
    "electronic_device": "pixel",
    "openscad_code": "// Pixel Electronic Device - Realistic Medium Complexity\n// A retro-inspired handheld gaming console with pixel art styling\n\n// Device parameters\n$fn = 64;\ndevice_length = 85;\ndevice_width = 50;\ndevice_height = 15;\n\n// Colors\nbody_color = \"#2E3440\";\nscreen_color = \"#3B4252\";\nbezel_color = \"#4C566A\";\nbutton_color = \"#D8DEE9\";\ndpad_color = \"#ECEFF4\";\nport_color = \"#2E3440\";\n\n// Main body module\nmodule device_body() {\n    difference() {\n        // Main shell\n        color(body_color)\n        rounded_cube([device_length, device_width, device_height], 3);\n        \n        // Top face chamfer\n        translate([0, 0, device_height - 1.5])\n        scale([1, 1, 0.5])\n        rounded_cube([device_length + 0.5, device_width + 0.5, 3], 3);\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(x = [-1, 1])\n        for(y = [-1, 1])\n        for(z = [-1, 1])\n        translate([x * (size[0]/2 - radius), y * (size[1]/2 - radius), z * (size[2]/2 - radius)])\n        sphere(r = radius);\n    }\n}\n\n// Screen assembly\nmodule screen() {\n    // Screen bezel\n    color(bezel_color)\n    translate([0, 12, device_height - 0.5])\n    cube([device_length - 10, 30, 1.5], center = true);\n    \n    // Actual screen\n    color(screen_color)\n    translate([0, 12, device_height])\n    cube([device_length - 14, 26, 0.5], center = true);\n    \n    // Pixel grid pattern\n    color(\"#88C0D0\")\n    for(i = [-6:6])\n    for(j = [-3:3])\n    translate([i * 3, 12 + j * 3, device_height + 0.3])\n    cube([1.5, 1.5, 0.1], center = true);\n}\n\n// D-pad module\nmodule dpad() {\n    color(dpad_color)\n    translate([-device_length/2 + 15, -15, 4])\n    union() {\n        // Center\n        cube([8, 8, 2], center = true);\n        \n        // Four directions\n        translate([0, -7, 0]) cube([8, 6, 2], center = true);\n        translate([0, 7, 0]) cube([8, 6, 2], center = true);\n        translate([-7, 0, 0]) cube([6, 8, 2], center = true);\n        translate([7, 0, 0]) cube([6, 8, 2], center = true);\n    }\n}\n\n// Action buttons\nmodule action_buttons() {\n    // Button positions\n    positions = [[device_length/2 - 18, -10], [device_length/2 - 12, -16]];\n    \n    for(pos = positions) {\n        color(button_color)\n        translate([pos[0], pos[1], 4])\n        cylinder(h = 2.5, r = 3.5, $fn = 32);\n        \n        // Button symbols\n        color(port_color)\n        translate([pos[0], pos[1], 6.6])\n        rotate([0, 180, 0])\n        linear_extrude(0.5)\n        text(\"A\", size = 2.5, halign = \"center\", valign = \"center\");\n    }\n}\n\n// Start/Select buttons\nmodule utility_buttons() {\n    for(i = [0, 1]) {\n        color(button_color)\n        translate([5 + i * 12, 0, 4])\n        rounded_cube([10, 4, 1.5], 1);\n    }\n}\n\n// Speaker grille\nmodule speaker() {\n    color(bezel_color)\n    difference() {\n        translate([0, -device_width/2 + 5, 2])\n        rounded_cube([device_length - 20, 6, 1], 1);\n        \n        // Speaker holes\n        for(i = [-5:5])\n        translate([-i * 6, 0, 0.5])\n        cylinder(h = 2, r = 0.8, $fn = 16);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    color(port_color)\n    translate([device_length/2 - 5, 0, 3])\n    cube([8, 4, 2], center = true);\n    \n    // Port opening\n    color(\"#000000\")\n    translate([device_length/2 + 0.1, 0, 3])\n    cube([1, 3, 1.5], center = true);\n}\n\n// Power LED indicator\nmodule power_led() {\n    color(\"#BF616A\")\n    translate([-device_length/2 + 5, device_width/2 - 3, 4])\n    cylinder(h = 0.5, r = 1.5, $fn = 16);\n}\n\n// Main assembly\ndevice_body();\nscreen();\ndpad();\naction_buttons();\nutility_buttons();\nspeaker();\nusb_port();\npower_led();",
    "renders": true
  },
  {
    "electronic_device": "sprite",
    "openscad_code": "// 8-bit handheld game console (Game Boy inspired)\n// Overall dimensions: 90 x 150 x 28 mm\n\n// Basic dimensions\ncase_w = 90;\ncase_h = 150;\ncase_t = 28;\nscreen_w = 65;\nscreen_h = 44;\nscreen_t = 2;\ndpad_r = 12;\nbtn_r = 6;\nbtn_spacing = 25;\n\n// Main case shell\ncolor([0.2,0.2,0.2]) \ndifference() {\n    translate([0,0,case_t/2])\n        cube([case_w,case_h,case_t], center=true);\n    \n    // Hollow out the inside\n    translate([0,0,1])\n        cube([case_w-4,case_h-4,case_t-2], center=true);\n    \n    // Screen window\n    translate([0,35,case_t/2+0.1])\n        cube([screen_w+4,screen_h+4,3], center=true);\n}\n\n// Screen glass\ncolor([0.1,0.1,0.1])\ntranslate([0,35,case_t-1])\n    cube([screen_w,screen_h,screen_t], center=true);\n\n// Screen LCD area\ncolor([0.05,0.2,0.05])\ntranslate([0,35,case_t-0.5])\n    cube([screen_w-4,screen_h-4,0.5], center=true);\n\n// D-pad base\ncolor([0.1,0.1,0.1])\ntranslate([-25,-20,case_t-2])\n    cylinder(h=4, r=dpad_r+2, $fn=32);\n\n// D-pad cross\nmodule dpad() {\n    color([0.3,0.3,0.3]) {\n        translate([-dpad_r/2,0,2])\n            cube([dpad_r*2,dpad_r,3]);\n        translate([0,-dpad_r/2,2])\n            cube([dpad_r,dpad_r*2,3]);\n    }\n}\ntranslate([-25,-20,case_t-4]) dpad();\n\n// A/B buttons\nfor(x=[1,-1]) {\n    color([0.8,0.1,0.1])\n    translate([x*btn_spacing,5,case_t-2])\n        cylinder(h=3, r=btn_r, $fn=16);\n}\n\n// Select/Start buttons\nfor(x=[-1,1]) {\n    color([0.5,0.5,0.5])\n    translate([x*8,-35,case_t-1.5])\n        cube([15,4,2]);\n}\n\n// Speaker grill\ncolor([0.1,0.1,0.1])\ntranslate([0,-60,case_t-1])\n    for(y=[-5:5:5])\n        for(x=[-15:5:15])\n            if(abs(x)+abs(y)>8)\n                translate([x,y,0])\n                    cylinder(h=1, r=1, $fn=8);\n\n// Power LED\ncolor([1,0,0])\ntranslate([30,-60,case_t-1])\n    cylinder(h=1.5, r=2, $fn=16);\n\n// Cartridge slot\ncolor([0.15,0.15,0.15])\ntranslate([0,60,case_t/2])\n    cube([50,2,8], center=true);\n\n// Link port\ncolor([0.4,0.4,0.4])\ntranslate([-case_w/2+1,0,case_t/2])\n    rotate([0,90,0])\n        cylinder(h=8, r=3, $fn=16);\n\n// Headphone jack\ncolor([0.3,0.3,0.3])\ntranslate([-case_w/2+1,25,case_t/2])\n    rotate([0,90,0])\n        cylinder(h=6, r=3.5, $fn=16);\n\n// Volume wheel\ncolor([0.2,0.2,0.2])\ntranslate([case_w/2-2,25,case_t/2])\n    rotate([90,0,0])\n        cylinder(h=8, r=4, $fn=16);\n    color([0.4,0.4,0.4])\n    translate([case_w/2-2,25,case_t/2+2])\n        rotate([90,0,0])\n            cylinder(h=2, r=3, $fn=20);\n\n// Battery compartment\ncolor([0.15,0.15,0.15])\ntranslate([0,-80,case_t/2-5])\n    cube([60,15,5], center=true);\n\n// Battery cover screws\nfor(x=[-20,20])\n    color([0.5,0.5,0.5])\n    translate([x,-80,case_t-1.5])\n        cylinder(h=1.5, r=1.5, $fn=12);\n\n// Brand text placeholder\ncolor([0.7,0.7,0.7])\ntranslate([0,10,case_t-0.5])\n    cube([30,6,0.5], center=true);",
    "renders": true
  },
  {
    "electronic_device": "poly",
    "openscad_code": "// Poly - Portable Bluetooth Speaker\n// Realistic medium-complexity model\n\n$fn = 64;\n\nmodule body() {\n    difference() {\n        // Main rounded body\n        color(\"dimgray\")\n        minkowski() {\n            cube([60, 70, 30], center=true);\n            sphere(5);\n        }\n        \n        // Top grille area\n        translate([0, 0, 16])\n        cube([50, 60, 10], center=true);\n    }\n}\n\nmodule grille() {\n    // Perforated grille pattern\n    color(\"black\")\n    translate([0, 0, 16])\n    difference() {\n        cube([50, 60, 2], center=true);\n        \n        // Hexagonal pattern of holes\n        for (x = [-20:5:20])\n            for (y = [-25:5:25]) {\n                translate([x, y, 1])\n                cylinder(h=3, r=2, $fn=6);\n            }\n    }\n}\n\nmodule control_ring() {\n    // Volume control ring\n    color(\"darkslategray\")\n    rotate([90, 0, 0])\n    translate([0, 0, -40])\n    difference() {\n        cylinder(h=8, r=30);\n        cylinder(h=10, r=27);\n    }\n}\n\nmodule buttons() {\n    // Power button\n    color(\"red\")\n    translate([25, 0, 10])\n    cylinder(h=3, r=4);\n    \n    // Pairing button\n    color(\"blue\")\n    translate([25, -10, 10])\n    cylinder(h=3, r=4);\n    \n    // Play/Pause button\n    color(\"forestgreen\")\n    translate([25, 10, 10])\n    cube([8, 8, 3], center=true);\n}\n\nmodule ports() {\n    // USB-C charging port\n    color(\"silver\")\n    translate([-30, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cube([8, 12, 4], center=true);\n        translate([0, 0, 2])\n        cube([6, 10, 2], center=true);\n    }\n    \n    // 3.5mm aux port\n    color(\"silver\")\n    translate([-30, -15, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=8, r=4);\n        cylinder(h=10, r=2);\n    }\n}\n\nmodule rubber_feet() {\n    // Four rubber feet\n    color(\"darkgray\")\n    for (x = [-20, 20])\n        for (y = [-25, 25]) {\n            translate([x, y, -18])\n            cylinder(h=3, r=4);\n        }\n}\n\nmodule status_led() {\n    // Status LED indicator\n    color(\"lime\")\n    translate([0, 35, 10])\n    cylinder(h=1, r=3);\n}\n\n// Main assembly\nbody();\ngrille();\ncontrol_ring();\nbuttons();\nports();\nrubber_feet();\nstatus_led();",
    "renders": true
  },
  {
    "electronic_device": "voxel",
    "openscad_code": "// Voxel Smartphone - realistic medium-complexity\n// Designed for 3D printing, 80 mm tall\n\n$fn = 32;\n\n// Main colors\ncolor_screen = [0.05, 0.05, 0.05];\ncolor_body = [0.15, 0.15, 0.15];\ncolor_frame = [0.25, 0.25, 0.25];\ncolor_button = [0.5, 0.5, 0.5];\ncolor_cam = [0.1, 0.1, 0.1];\n\n// Dimensions\nphone_w = 40;\nphone_h = 80;\nphone_d = 8;\nvoxel = 2;\n\nmodule voxel_cube(x,y,z, col) {\n    color(col)\n    translate([x*voxel, y*voxel, z*voxel])\n    cube([voxel, voxel, voxel], center=true);\n}\n\n// Main body frame\nmodule phone_body() {\n    color(color_frame)\n    difference() {\n        // Outer shell\n        cube([phone_w, phone_h, phone_d], center=true);\n        // Hollow inside\n        translate([0,0,-1])\n        cube([phone_w-4, phone_h-4, phone_d-2], center=true);\n    }\n}\n\n// Screen array\nmodule screen() {\n    for (y = [-19:2:19]) {\n        for (x = [-18:2:18]) {\n            voxel_cube(x, y, 4, color_screen);\n        }\n    }\n}\n\n// Side buttons\nmodule buttons() {\n    color(color_button)\n    // Power button\n    translate([phone_w/2+0.1, 15, 0])\n    cube([2, 6, 2], center=true);\n    \n    // Volume buttons\n    translate([phone_w/2+0.1, -5, 0])\n    cube([2, 8, 2], center=true);\n    \n    translate([phone_w/2+0.1, -15, 0])\n    cube([2, 8, 2], center=true);\n}\n\n// Camera bump\nmodule camera_bump() {\n    translate([0, 35, phone_d/2+1])\n    color(color_body)\n    cube([16, 16, 2], center=true);\n    \n    // Camera lens\n    translate([-5, 38, phone_d/2+2.5])\n    color(color_cam)\n    cylinder(h=3, r=3, center=true);\n    \n    // Flash\n    translate([5, 38, phone_d/2+2.5])\n    color([1,1,0.8])\n    cylinder(h=2, r=2, center=true);\n    \n    // Second camera\n    translate([-5, 32, phone_d/2+2.5])\n    color(color_cam)\n    cylinder(h=3, r=2.5, center=true);\n}\n\n// Speaker grill at bottom\nmodule speaker_grill() {\n    for (i = [-8:2:8]) {\n        voxel_cube(i, -39, 3, color_body);\n    }\n}\n\n// Top speaker\nmodule ear_speaker() {\n    for (i = [-4:2:4]) {\n        voxel_cube(i, 39, 3, color_body);\n    }\n}\n\n// Charging port\nmodule charging_port() {\n    color(color_body)\n    translate([0, -39, -1])\n    cube([8, 2, 2], center=true);\n}\n\n// Assemble phone\ntranslate([0,0,0])\nunion() {\n    phone_body();\n    translate([0,0,0])\n    screen();\n    buttons();\n    camera_bump();\n    speaker_grill();\n    ear_speaker();\n    charging_port();\n}",
    "renders": true
  },
  {
    "electronic_device": "texel",
    "openscad_code": "// Texel Electronic Device - Realistic Style, Medium Complexity\n// A modern handheld texel device with screen, buttons, and ports\n\n// Device dimensions (mm)\ndevice_width = 75;\ndevice_height = 130;\ndevice_thickness = 12;\n\n// Screen dimensions\nscreen_width = 60;\nscreen_height = 100;\nscreen_thickness = 2;\nscreen_bezel = 3;\n\n// Button dimensions\nbutton_width = 12;\nbutton_height = 5;\nbutton_depth = 2;\n\n// Port dimensions\nusb_width = 8;\nusb_height = 3;\nusb_depth = 5;\n\n// Camera dimensions\ncamera_diameter = 8;\ncamera_depth = 3;\n\n// Speaker grill holes\nhole_diameter = 1.5;\nhole_spacing = 3;\n\n// Main body module\nmodule texel_body() {\n    difference() {\n        // Main body shell\n        color(\"silver\")\n        translate([0, 0, device_thickness/2])\n        rounded_cube([device_width, device_height, device_thickness], 4);\n        \n        // Screen cutout\n        translate([0, 0, device_thickness - 0.5])\n        rounded_cube([screen_width + screen_bezel*2, screen_height + screen_bezel*2, device_thickness], 2);\n        \n        // USB-C port\n        translate([0, -device_height/2 + 5, device_thickness/2])\n        cube([usb_width, usb_depth, usb_height], center=true);\n        \n        // Headphone jack\n        translate([-device_width/2 + 10, -device_height/2 + 5, device_thickness/2])\n        cylinder(h=usb_depth*1.5, d=6, center=true);\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                for(z = [-1, 1]) {\n                    translate([x*(size[0]/2 - radius), y*(size[1]/2 - radius), z*(size[2]/2 - radius)])\n                    sphere(r=radius);\n                }\n            }\n        }\n    }\n}\n\n// Screen module\nmodule texel_screen() {\n    // Screen bezel\n    color(\"darkslategray\")\n    translate([0, 0, device_thickness - 1])\n    rounded_cube([screen_width + screen_bezel*2, screen_height + screen_bezel*2, screen_thickness], 2);\n    \n    // Actual screen\n    color(\"black\")\n    translate([0, 0, device_thickness + 0.5])\n    cube([screen_width, screen_height, 0.5], center=true);\n    \n    // Screen protector glass\n    color(\"skyblue\", 0.3)\n    translate([0, 0, device_thickness + 1])\n    cube([screen_width, screen_height, 0.2], center=true);\n}\n\n// Button modules\nmodule texel_buttons() {\n    // Power button\n    color(\"gray20\")\n    translate([device_width/2 + 0.5, device_height/4, device_thickness/2])\n    rotate([0, 90, 0])\n    cylinder(h=button_width, d=button_height, center=true);\n    \n    // Volume buttons\n    for(i = [0, 1]) {\n        translate([device_width/2 + 0.5, -device_height/4 + i*10, device_thickness/2])\n        rotate([0, 90, 0])\n        cylinder(h=button_width*0.8, d=button_height*0.8, center=true);\n    }\n}\n\n// Camera module\nmodule texel_camera() {\n    // Camera bump\n    difference() {\n        color(\"silver\")\n        translate([0, device_height/2 - 15, device_thickness + 2])\n        cylinder(h=3, d=camera_diameter + 4);\n        \n        // Camera lens\n        color(\"black\")\n        translate([0, 0, 2.5])\n        cylinder(h=1, d=camera_diameter + 2);\n    }\n    \n    // Camera lens\n    color(\"black\")\n    translate([0, device_height/2 - 15, device_thickness + 4])\n    cylinder(h=0.5, d=camera_diameter);\n    \n    // Flash\n    color(\"yellow\")\n    translate([8, device_height/2 - 15, device_thickness + 4])\n    cylinder(h=0.5, d=4);\n}\n\n// Speaker grill\nmodule speaker_grill() {\n    // Speaker cutout\n    color(\"black\")\n    translate([0, -device_height/2 + 20, device_thickness - 0.5])\n    cube([device_width*0.8, 6, 1], center=true);\n    \n    // Speaker holes\n    for(x = [-device_width/3 : hole_spacing : device_width/3]) {\n        translate([x, -device_height/2 + 20, device_thickness - 0.5])\n        cylinder(h=2, d=hole_diameter);\n    }\n}\n\n// Texel logo\nmodule texel_logo() {\n    color(\"white\")\n    translate([-screen_width/2 + 10, screen_height/2 - 10, device_thickness + 1.1])\n    linear_extrude(height=0.1) {\n        text(\"TEXEL\", size=4, font=\"Arial:style=Bold\");\n    }\n}\n\n// Status LED\nmodule status_led() {\n    color(\"green\")\n    translate([device_width/2 - 10, device_height/2 - 10, device_thickness + 0.5])\n    cylinder(h=0.5, d=3);\n}\n\n// Main assembly\nunion() {\n    texel_body();\n    texel_screen();\n    texel_buttons();\n    texel_camera();\n    speaker_grill();\n    texel_logo();\n    status_led();\n}",
    "renders": true
  },
  {
    "electronic_device": "shader",
    "openscad_code": "// Realistic Shader Electronic Device\n// Medium complexity OpenSCAD model with 3D printable features\n\n$fn = 50;\n\n// Main colors\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_body = [0.2, 0.2, 0.2];\ncolor_buttons = [0.8, 0.8, 0.8];\ncolor_ports = [0.3, 0.3, 0.3];\ncolor_led = [0, 1, 0];\n\n// Device dimensions\ndevice_width = 80;\ndevice_height = 45;\ndevice_depth = 25;\nwall_thickness = 2;\n\n// Screen parameters\nscreen_width = 60;\nscreen_height = 30;\nscreen_depth = 1;\n\n// Main body\nmodule device_body() {\n    color(color_body)\n    difference() {\n        // Outer shell\n        cube([device_width, device_depth, device_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n        cube([device_width-wall_thickness*2, device_depth-wall_thickness, device_height-wall_thickness*2], center=true);\n        \n        // Top screen cutout\n        translate([0, device_depth/2 - 0.5, device_height/2 - screen_height/2 - 5])\n        cube([screen_width, wall_thickness+1, screen_height+10], center=true);\n    }\n}\n\n// Display screen\nmodule display() {\n    color(color_screen)\n    translate([0, device_depth/2 - screen_depth/2 - 0.5, 0])\n    cube([screen_width, screen_depth, screen_height], center=true);\n    \n    // Screen bezel\n    color([0.15, 0.15, 0.15])\n    translate([0, device_depth/2 - screen_depth/2 - 0.7, 0])\n    cube([screen_width+4, 0.5, screen_height+4], center=true);\n}\n\n// Control buttons\nmodule control_buttons() {\n    for (i = [0:3]) {\n        color(color_buttons)\n        translate([device_width/2 - 12 - i*8, 0, device_height/2 - 8])\n        rotate([90, 0, 0])\n        cylinder(h=2, r=3, center=true);\n    }\n}\n\n// Rotary encoder\nmodule rotary_encoder() {\n    color(color_body)\n    translate([device_width/2 - 20, 0, -device_height/2 + 8])\n    rotate([90, 0, 0])\n    cylinder(h=4, r=6, center=true);\n    \n    color(color_buttons)\n    translate([device_width/2 - 20, 0, -device_height/2 + 10])\n    rotate([90, 0, 0])\n    cylinder(h=2, r=4, center=true);\n    \n    // Knurling detail\n    for (i = [0:11]) {\n        rotate([0, 0, i*30])\n        translate([device_width/2 - 20, 0, -device_height/2 + 10])\n        cube([1, 4.5, 2], center=true);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    color(color_ports)\n    translate([0, -device_depth/2 + 1, 0])\n    cube([12, 2, 6], center=true);\n}\n\n// Power LED indicator\nmodule power_led() {\n    color(color_led)\n    translate([device_width/2 - 8, device_depth/2 - 1, device_height/2 - 5])\n    sphere(r=1.5);\n}\n\n// Ventilation slots\nmodule ventilation_slots() {\n    for (i = [0:7]) {\n        color(color_body)\n        translate([-device_width/2 + 10 + i*8, 0, -device_height/2 + 2])\n        cube([4, device_depth, 1.5], center=true);\n    }\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            color([0.1, 0.1, 0.1])\n            translate([x*device_width/3, y*device_depth/3, -device_height/2 - 1])\n            cylinder(h=2, r=3, center=true);\n        }\n    }\n}\n\n// Shader label\nmodule device_label() {\n    color([0.9, 0.9, 0.9])\n    translate([0, device_depth/2 + 0.1, -device_height/2 + 15])\n    rotate([90, 0, 0])\n    linear_extrude(height=0.5)\n    text(\"SHADER\", size=6, halign=\"center\", font=\"Arial:style=Bold\");\n}\n\n// Assemble the complete shader device\nunion() {\n    device_body();\n    display();\n    control_buttons();\n    rotary_encoder();\n    usb_port();\n    power_led();\n    ventilation_slots();\n    rubber_feet();\n    device_label();\n}",
    "renders": true
  },
  {
    "electronic_device": "render",
    "openscad_code": "// OpenSCAD code for a realistic-styled wireless earbud charging case (medium complexity)\n// Total footprint ~55 mm × 45 mm × 25 mm – well within typical FDM printer beds\n\n// --- CONFIGURATION -----------------------------------------------------------\ncase_color       = [0.95,0.95,0.95];    // matte white plastic\nlid_color        = [0.92,0.92,0.92];    // slightly off-white\nbutton_color     = [0.15,0.15,0.15];    // dark grey silicone\nled_color        = [0.0,1.0,0.0];       // green power indicator\nmetal_color      = [0.65,0.65,0.65];    // aluminium USB-C bezel\n\nwall_thickness   = 1.2;                 // safe for FDM printing\nhinge_pin_r      = 1.0;\nbutton_depth     = 0.8;                 // shallow push-button\nled_diam         = 2.0;\nusb_c_depth      = 3.5;\n\n// --- MAIN ASSEMBLY ----------------------------------------------------------\nmodule charging_case() {\n    difference() {\n        union() {\n            // bottom shell\n            color(case_color)\n                rounded_box([55,45,12], wall_thickness);\n\n            // top shell (lid)\n            translate([0,0,12])\n                rotate([180,0,0])  // flip so the lid opens upward\n                color(lid_color)\n                    rounded_box([55,45,12], wall_thickness);\n\n            // hinge pins\n            for(x=[-20,20])\n                translate([x,0,12])\n                    color(metal_color)\n                        cylinder(h=wall_thickness*2, r=hinge_pin_r, $fn=16);\n        }\n\n        // cavity for earbuds\n        mirror([0,0,1]) translate([0,0,-12+wall_thickness])\n            rounded_box([45,35,9.5], wall_thickness);\n\n        // button cutout\n        translate([27,-22-wall_thickness/2,6])\n            cube([8,wall_thickness+0.2,6], center=true);\n\n        // LED indicator hole\n        translate([-24,-22-wall_thickness/2,8])\n            rotate([90,0,0])\n                cylinder(h=wall_thickness+0.2, d=led_diam, $fn=16);\n\n        // USB-C port hole\n        translate([-27.5-wall_thickness/2,0,3.5])\n            rotate([0,90,0])\n                cylinder(h=usb_c_depth+0.2, d=8.4, $fn=32);\n    }\n\n    // physical detail modules\n    pairing_button();\n    status_led();\n    usb_c_port();\n}\n\n// --- HELPER MODULES ----------------------------------------------------------\nmodule rounded_box(size, wt) {\n    // creates a hollow rounded box with wall thickness wt\n    offset = wt/2;\n    hull() {\n        for(x=[offset,size.x-offset])\n            for(y=[offset,size.y-offset])\n                translate([x,y,offset])\n                    sphere(r=wt, $fn=16);\n        for(x=[offset,size.x-offset])\n            for(y=[offset,size.y-offset])\n                translate([x,y,size.z-offset])\n                    sphere(r=wt, $fn=16);\n    }\n    difference() {\n        cube(size);\n        translate([wt,wt,wt])\n            cube([size.x-2*wt,size.y-2*wt,size.z-2*wt]);\n    }\n}\n\nmodule pairing_button() {\n    translate([27,-22-wall_thickness/2+0.1,6])\n        color(button_color)\n            cube([7,button_depth,5], center=true);\n}\n\nmodule status_led() {\n    translate([-24,-22-wall_thickness/2,8])\n        color(led_color)\n            sphere(d=led_diam-0.2, $fn=16);\n}\n\nmodule usb_c_port() {\n    difference() {\n        translate([-27.5-wall_thickness/2,0,3.5])\n            rotate([0,90,0])\n                color(metal_color)\n                    cylinder(h=usb_c_depth, d=9, $fn=32);\n        // inner cavity\n        translate([-27.5-wall_thickness/2-0.1,0,3.5])\n            rotate([0,90,0])\n                cylinder(h=usb_c_depth+0.2, d=6.7, $fn=32);\n    }\n}\n\n// --- RENDER -----------------------------------------------------------------\ncharging_case();",
    "renders": true
  },
  {
    "electronic_device": "engine",
    "openscad_code": "// Engine Electronic Control Unit (ECU) - Realistic Style\n// A typical automotive ECU with connectors, heat sink, and mounting features\n\n// Color definitions\n$fa = 1;\n$fs = 0.4;\n\n// Main parameters\nbase_width = 80;\nbase_depth = 60;\nbase_height = 25;\nheat_sink_height = 15;\nconnector_length = 12;\n\n// Main ECU housing\nmodule ecu_housing() {\n    color(\"darkgreen\") {\n        difference() {\n            // Main box\n            cube([base_width, base_depth, base_height], center=true);\n            \n            // Top vent slots\n            for (i = [-30:10:30]) {\n                translate([i, 0, base_height/2 - 1])\n                    cube([8, base_depth - 10, 2], center=true);\n            }\n            \n            // Side mounting holes\n            translate([base_width/2 + 1, -20, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=5, r=2.5, center=true);\n            translate([base_width/2 + 1, 20, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=5, r=2.5, center=true);\n            translate([-base_width/2 - 1, -20, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=5, r=2.5, center=true);\n            translate([-base_width/2 - 1, 20, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=5, r=2.5, center=true);\n        }\n    }\n}\n\n// Heat sink on top\nmodule heat_sink() {\n    color(\"silver\") {\n        difference() {\n            // Base plate\n            translate([0, 0, base_height/2 + heat_sink_height/2])\n                cube([base_width - 10, base_depth - 10, heat_sink_height], center=true);\n            \n            // Fins\n            for (i = [-30:4:30]) {\n                translate([i, 0, base_height/2 + heat_sink_height + 1])\n                    cube([2, base_depth - 12, 2], center=true);\n            }\n        }\n    }\n}\n\n// Connector blocks\nmodule connectors() {\n    // Main power connector\n    color(\"black\") {\n        translate([0, -base_depth/2 - connector_length/2, 0])\n            cube([30, connector_length, 15], center=true);\n    }\n    \n    // Signal connectors (3 smaller ones)\n    for (i = [-25:15:25]) {\n        color(\"black\") {\n            translate([i, base_depth/2 + connector_length/2, 0])\n                cube([12, connector_length, 8], center=true);\n        }\n    }\n}\n\n// LED indicators\nmodule status_leds() {\n    translate([base_width/2 - 10, base_depth/2 - 8, base_height/2 + 2]) {\n        color(\"red\") sphere(r=1.5);\n    }\n    translate([base_width/2 - 10, base_depth/2 - 12, base_height/2 + 2]) {\n        color(\"green\") sphere(r=1.5);\n    }\n    translate([base_width/2 - 10, base_depth/2 - 16, base_height/2 + 2]) {\n        color(\"yellow\") sphere(r=1.5);\n    }\n}\n\n// Mounting brackets\nmodule mounting_brackets() {\n    color(\"silver\") {\n        // Left bracket\n        translate([-base_width/2 - 8, 0, 0]) {\n            cube([16, 30, 4], center=true);\n            translate([0, -15, -2])\n                cylinder(h=4, r=3);\n            translate([0, 15, -2])\n                cylinder(h=4, r=3);\n        }\n        \n        // Right bracket\n        translate([base_width/2 + 8, 0, 0]) {\n            cube([16, 30, 4], center=true);\n            translate([0, -15, -2])\n                cylinder(h=4, r=3);\n            translate([0, 15, -2])\n                cylinder(h=4, r=3);\n        }\n    }\n}\n\n// Label area\nmodule label_area() {\n    color(\"white\") {\n        translate([0, 0, base_height/2 + 0.1])\n            cube([40, 15, 0.2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    ecu_housing();\n    heat_sink();\n    connectors();\n    status_leds();\n    mounting_brackets();\n    label_area();\n}",
    "renders": true
  },
  {
    "electronic_device": "toolkit",
    "openscad_code": "// Toolkit Electronic Device - Multimeter\n// Realistic style, medium complexity\n\n// Main dimensions\nbase_width = 80;\nbase_length = 120;\nbase_height = 30;\nscreen_width = 50;\nscreen_height = 30;\nbutton_diameter = 8;\nport_width = 12;\nport_height = 8;\n\n// Colors\ncolor_case = [0.2, 0.2, 0.2];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_button = [0.8, 0.8, 0.8];\ncolor_red = [0.9, 0.1, 0.1];\ncolor_yellow = [0.9, 0.9, 0.1];\n\n// Main case\nmodule main_case() {\n    color(color_case)\n    difference() {\n        // Main body\n        cube([base_width, base_length, base_height], center=true);\n        \n        // Screen cutout\n        translate([0, 20, base_height/2 - 1])\n        cube([screen_width + 4, screen_height + 4, 3], center=true);\n        \n        // Button holes\n        for(i = [0:2]) {\n            translate([-25 + i*25, -30, base_height/2 - 1])\n            cylinder(h=3, r=button_diameter/2 + 1, center=true);\n        }\n        \n        // Port holes\n        translate([base_width/2 - 5, 0, 0])\n        cube([port_width + 2, port_height + 2, base_height + 2], center=true);\n        translate([base_width/2 - 5, 20, 0])\n        cube([port_width + 2, port_height + 2, base_height + 2], center=true);\n    }\n}\n\n// Screen\nmodule screen() {\n    color(color_screen)\n    translate([0, 20, base_height/2])\n    cube([screen_width, screen_height, 1], center=true);\n    \n    // Screen details\n    color([0, 0.8, 0])\n    translate([-15, 10, base_height/2 + 0.6])\n    cube([30, 15, 0.5]);\n    \n    color([0, 0.8, 0])\n    translate([10, 10, base_height/2 + 0.6])\n    cube([10, 15, 0.5]);\n}\n\n// Buttons\nmodule buttons() {\n    for(i = [0:2]) {\n        color(color_button)\n        translate([-25 + i*25, -30, base_height/2 + 1])\n        cylinder(h=2, r=button_diameter/2, center=true);\n        \n        // Button labels\n        color([0, 0, 0])\n        translate([-25 + i*25, -30, base_height/2 + 2.1])\n        rotate([0, 0, 45])\n        cube([1, 4, 0.5], center=true);\n    }\n}\n\n// Ports\nmodule ports() {\n    // Red port\n    color(color_red)\n    translate([base_width/2 - 5, 0, 0])\n    cube([port_width, port_height, 6], center=true);\n    \n    // Yellow port\n    color(color_yellow)\n    translate([base_width/2 - 5, 20, 0])\n    cube([port_width, port_height, 6], center=true);\n    \n    // Port labels\n    color([1, 1, 1])\n    translate([base_width/2 - 5, 0, 3.5])\n    rotate([90, 0, 0])\n    linear_extrude(0.5)\n    text(\"VΩ\", size=4, halign=\"center\", valign=\"center\");\n    \n    translate([base_width/2 - 5, 20, 3.5])\n    rotate([90, 0, 0])\n    linear_extrude(0.5)\n    text(\"COM\", size=4, halign=\"center\", valign=\"center\");\n}\n\n// Dial knob\nmodule dial_knob() {\n    color(color_case)\n    translate([0, -45, 0])\n    difference() {\n        cylinder(h=8, r=15, center=true);\n        for(i = [0:11]) {\n            rotate([0, 0, i*30])\n            translate([0, 12, 0])\n            cube([2, 4, 10], center=true);\n        }\n    }\n    \n    // Dial indicator\n    color(color_red)\n    translate([0, -45, 4.5])\n    rotate([0, 0, 45])\n    cube([2, 5, 1], center=true);\n}\n\n// Rubber bumpers\nmodule bumpers() {\n    color([0.1, 0.1, 0.1])\n    for(x = [-base_width/2 + 5, base_width/2 - 5])\n    for(y = [-base_length/2 + 5, base_length/2 - 5]) {\n        translate([x, y, -base_height/2 - 2])\n        cylinder(h=4, r=3, center=true);\n    }\n}\n\n// Assembly\nmain_case();\nscreen();\nbuttons();\nports();\ndial_knob();\nbumpers();",
    "renders": true
  },
  {
    "electronic_device": "sdk",
    "openscad_code": "// SDK development board (ESP32-C3 style) - realistic medium complexity\n// Overall size: 59 x 28 x 10 mm (printable)\n\n// Color definitions\n$fn = 32;\n\nmodule pcb_base() {\n    color(\"forestgreen\") \n    cube([59, 28, 1.6], center = true);\n}\n\nmodule usb_connector() {\n    translate([-27.5, 0, 0.8])\n    union() {\n        color(\"silver\") \n        cube([7, 12, 4]);\n        \n        // USB-C tongue\n        color(\"black\") \n        translate([3.5, 0, 1.5])\n        cube([2, 6.8, 0.7]);\n    }\n}\n\nmodule esp32_chip() {\n    translate([-5, 0, 0.8])\n    color(\"black\")\n    cube([13, 13, 1.2]);\n    \n    // Metallic pad rows\n    for(i = [0:7]) {\n        translate([-5 + i*1.5 + 1, -6.5, 2])\n        color(\"silver\")\n        cube([0.8, 0.6, 0.1]);\n        \n        translate([-5 + i*1.5 + 1, 6.5, 2])\n        color(\"silver\")\n        cube([0.8, 0.6, 0.1]);\n    }\n}\n\nmodule antenna() {\n    translate([20, -8, 0.8])\n    color(\"silver\")\n    difference() {\n        cube([18, 4, 0.1]);\n        for(x = [0:3]) {\n            translate([x*4 + 2, 1, -0.05])\n            cube([2, 2, 0.2]);\n        }\n    }\n}\n\nmodule gpio_header(x, y, mirrored=false) {\n    translate([x, y, 0.8]) {\n        if(mirrored) mirror([1,0,0]) children();\n        \n        // Header block\n        color(\"black\")\n        cube([25, 2.54, 8]);\n        \n        // Pins\n        for(i = [0:14]) {\n            translate([-12 + i*1.27, 1.27, 8])\n            color(\"gold\")\n            cylinder(h=6, d=0.64);\n        }\n    }\n}\n\nmodule button(x, y, label) {\n    translate([x, y, 0.8])\n    union() {\n        // Button base\n        color(\"black\")\n        cube([6, 6, 2]);\n        \n        // Button top\n        translate([3, 3, 2])\n        color(\"red\")\n        cylinder(h=1, d=3.5);\n        \n        // Label\n        translate([3, 3, 3.5])\n        color(\"white\")\n        rotate([90, 0, 0])\n        text(label, size=2, h=0.2, align=\"center\");\n    }\n}\n\nmodule status_led(x, y) {\n    translate([x, y, 0.8])\n    union() {\n        // LED housing\n        color(\"black\")\n        cube([3, 3, 1.5]);\n        \n        // LED lens\n        translate([1.5, 1.5, 1.5])\n        color(\"green\")\n        sphere(d=2);\n    }\n}\n\nmodule power_led(x, y) {\n    translate([x, y, 0.8])\n    union() {\n        color(\"black\")\n        cube([3, 3, 1.5]);\n        \n        translate([1.5, 1.5, 1.5])\n        color(\"red\")\n        sphere(d=2);\n    }\n}\n\nmodule mounting_hole(x, y) {\n    translate([x, y, 0])\n    cylinder(h=2, d=3.2, $fn=20);\n}\n\n// Main assembly\ndifference() {\n    union() {\n        pcb_base();\n        usb_connector();\n        esp32_chip();\n        antenna();\n        \n        // GPIO headers\n        gpio_header(-12, -11.5);\n        gpio_header(12, 11.5, mirrored=true);\n        \n        // Buttons\n        button(-10, 0, \"RST\");\n        button(-3, 0, \"BOOT\");\n        \n        // LEDs\n        status_led(10, -5);\n        power_led(15, -5);\n        \n        // Silkscreen markings\n        translate([20, 8, 0.9])\n        color(\"white\")\n        rotate([90, 0, 0])\n        text(\"ESP32-C3\", size=2, h=0.1);\n    }\n    \n    // Mounting holes\n    mounting_hole(-24, -10);\n    mounting_hole(24, -10);\n    mounting_hole(-24, 10);\n    mounting_hole(24, 10);\n}",
    "renders": true
  },
  {
    "electronic_device": "api",
    "openscad_code": "// API (Application Programming Interface) electronic device - realistic style\n// Represents a small IoT API gateway device with status LEDs, ethernet ports, and antenna\n\n// Overall dimensions (mm)\ndevice_length = 80;\ndevice_width = 50;\ndevice_height = 25;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main enclosure\ncolor(\"lightgrey\") difference() {\n    // Outer shell\n    cube([device_length, device_width, device_height], center=true);\n    \n    // Hollow out inside\n    translate([0, 0, -wall_thickness/2])\n        cube([device_length - 2*wall_thickness, \n              device_width - 2*wall_thickness, \n              device_height], center=true);\n    \n    // Ventilation slots on top\n    for(i = [-35:5:35]) {\n        translate([i, 0, device_height/2 - 1])\n            cube([3, device_width - 10, 2]);\n    }\n}\n\n// Front face with ports and indicators\ntranslate([device_length/2 - 0.5, 0, 0]) {\n    // Ethernet ports (RJ45)\n    for(port = [-15, 0, 15]) {\n        color(\"black\") \n            translate([0, port, 5])\n                cube([2, 8, 6]);\n    }\n    \n    // USB-C port\n    color(\"black\") \n        translate([0, -25, 5])\n            cube([2, 6, 3]);\n    \n    // Power LED\n    color(\"green\") \n        translate([0, 20, 5])\n            cylinder(h=1, r=2);\n    \n    // Status LEDs\n    for(led = [25:5:35]) {\n        color(\"red\") \n            translate([0, led, 5])\n                cylinder(h=1, r=1.5);\n    }\n}\n\n// Rear face with power and antenna\ntranslate([-device_length/2 + 0.5, 0, 0]) {\n    // Power connector\n    color(\"black\") \n        translate([0, 0, 5])\n            cylinder(h=3, r=4);\n    \n    // Reset button\n    color(\"darkgrey\") \n        translate([0, -20, 5])\n            cylinder(h=1.5, r=2.5);\n}\n\n// WiFi antenna\ncolor(\"black\") \n    translate([0, device_width/2 + 5, 5])\n        rotate([90, 0, 0])\n            cylinder(h=15, r=2.5);\n\n// Rubber feet\nfor(x = [-30, 30]) {\n    for(y = [-20, 20]) {\n        color(\"darkgrey\") \n            translate([x, y, -device_height/2 - 1])\n                cylinder(h=2, r=3);\n    }\n}\n\n// Top label area\ncolor(\"white\") \n    translate([0, 0, device_height/2 - 0.5])\n        cube([40, 20, 1]);\n\n// Product name text (simulated as raised rectangle)\ncolor(\"black\") \n    translate([0, 0, device_height/2 + 0.1])\n        cube([35, 6, 0.5], center=true);\n\n// Cooling fins on sides\nfor(side = [-1, 1]) {\n    color(\"lightgrey\") \n        translate([0, side * (device_width/2 + 1), 0]) {\n            for(i = [-10:3:10]) {\n                translate([i, 0, 0])\n                    cube([2, 1, device_height - 4]);\n            }\n        }\n}",
    "renders": true
  },
  {
    "electronic_device": "plugin",
    "openscad_code": "// USB-C Wi-Fi Dongle\n// Dimensions: 60 mm x 20 mm x 10 mm (body) + 9 mm plug\n\n$fn = 64;\n\n// Main colors\ncolor_body = \"#2B2B2B\";\ncolor_port = \"#C0C0C0\";\ncolor_led = \"#00FF00\";\ncolor_logo = \"#FFFFFF\";\n\nmodule dongle_body() {\n  difference() {\n    // Main shell\n    color(color_body) {\n      union() {\n        // Top shell\n        translate([0, 0, 5])\n          cube([60, 20, 5], center = true);\n        \n        // Bottom shell\n        translate([0, 0, -5])\n          cube([60, 20, 5], center = true);\n        \n        // Rounded corners\n        for (x = [-30, 30])\n          for (y = [-10, 10])\n            translate([x, y, 0])\n              cylinder(h = 10, r = 2, center = true);\n      }\n    }\n    \n    // Ventilation slots\n    for (i = [-20:10:20])\n      translate([i, 0, 5])\n        cube([8, 18, 2], center = true);\n    \n    // Status LED hole\n    translate([25, 0, 5.5])\n      cylinder(h = 2, r = 1.5);\n  }\n}\n\nmodule usb_c_plug() {\n  // Metal plug housing\n  color(color_port) {\n    difference() {\n      translate([-34.5, 0, 0])\n        cube([9, 7, 2.5], center = true);\n      \n      // Inner cavity\n      translate([-34.5, 0, 0])\n        cube([7, 5, 2], center = true);\n    }\n  }\n  \n  // Plastic tongue\n  color(color_body) {\n    translate([-34.5, 0, 0])\n      cube([6.5, 0.7, 1], center = true);\n  }\n  \n  // Contact pads\n  for (i = [-2.5:0.65:2.5])\n    translate([-34.5, i, 0])\n      cube([6, 0.3, 0.1], center = true);\n}\n\nmodule button() {\n  // WPS button\n  translate([20, 0, 5.5])\n    color(\"#666666\")\n      cylinder(h = 1, r = 2.5);\n  \n  // Button icon\n  translate([20, 0, 6.6])\n    color(\"#FFFFFF\")\n      sphere(r = 0.5);\n}\n\nmodule logo() {\n  // Wi-Fi symbol\n  translate([0, 0, 5.6])\n    color(color_logo) {\n      // Arcs\n      for (r = [2:2:8]) {\n        translate([0, 0, 0])\n          rotate_extrude(angle = 60)\n            translate([r, 0, 0])\n              circle(r = 0.3);\n        \n        translate([0, 0, 0])\n          rotate_extrude(angle = 60)\n            translate([r, 0, 0])\n              rotate([0, 0, 120])\n                circle(r = 0.3);\n        \n        translate([0, 0, 0])\n          rotate_extrude(angle = 60)\n            translate([r, 0, 0])\n              rotate([0, 0, 240])\n                circle(r = 0.3);\n      }\n    }\n}\n\nmodule status_led() {\n  // LED indicator\n  translate([25, 0, 6])\n    color(color_led)\n      sphere(r = 1);\n}\n\n// Assembly\nunion() {\n  dongle_body();\n  usb_c_plug();\n  button();\n  logo();\n  status_led();\n}",
    "renders": true
  },
  {
    "electronic_device": "addon",
    "openscad_code": "// Raspberry Pi Camera Module v3 add-on (≈ 65 mm long)\n// Realistic styling, medium complexity, 3D-print friendly\n\n$fn = 36;\n\n/* Main body */\nmodule body() {\n    difference() {\n        // Main PCB – 1.6 mm thick\n        color(\"green\")\n        translate([0, 0, 0.8])\n            cube([25, 24, 1.6], center = true);\n\n        // Four 2.7 mm mounting holes\n        for (p = [[-8.5, 9.5], [8.5, 9.5], [-8.5, -9.5], [8.5, -9.5]])\n            translate(concat(p, [0]))\n                cylinder(h = 2, d = 2.8, center = true);\n    }\n}\n\n/* Sony IMX708 sensor package */\nmodule sensor() {\n    color(\"black\")\n    translate([0, 0, 1.6 + 0.5])\n        cube([9, 9, 1], center = true);\n}\n\n/* Lens mount cylinder */\nmodule lens_mount() {\n    difference() {\n        color(\"silver\")\n        translate([0, 0, 1.6 + 1.5])\n            cylinder(h = 4, d = 12, center = true);\n\n        // Through hole\n        translate([0, 0, 1.6 + 1.5])\n            cylinder(h = 5, d = 7, center = true);\n    }\n}\n\n/* Lens */\nmodule lens() {\n    color(\"darkgray\")\n    translate([0, 0, 1.6 + 4])\n        cylinder(h = 3, d1 = 7, d2 = 6.5);\n}\n\n/* 15-pin FFC connector on bottom */\nmodule ffc_connector() {\n    color(\"black\")\n    translate([0, 11.5, 0.8])\n        cube([17, 3, 2], center = true);\n}\n\n/* Status LED indicator */\nmodule led() {\n    color(\"red\")\n    translate([-8, -11, 1.6 + 0.5])\n        cube([2, 1, 0.8]);\n}\n\n/* Silkscreen arrow */\nmodule arrow() {\n    color(\"white\")\n    translate([0, 7, 1.6 + 0.1])\n        for (i = [0:1:4])\n            translate([0, -i * 0.4, 0])\n                cube([0.2, 0.8, 0.05], center = true);\n    translate([0, 7 - 2, 1.6 + 0.1])\n        cube([1, 0.2, 0.05], center = true);\n}\n\n/* Standoff helper */\nmodule standoff(h = 7) {\n    difference() {\n        cylinder(h = h, d = 5);\n        translate([0, 0, -0.1])\n            cylinder(h = h + 0.2, d = 2.9);\n    }\n}\n\n/* Assembly */\nbody();\nsensor();\nlens_mount();\nlens();\nffc_connector();\nled();\narrow();\n\n// Four printed standoffs – 7 mm high, no support needed\ncolor(\"gray\")\nfor (p = [[-8.5, 9.5], [8.5, 9.5], [-8.5, -9.5], [8.5, -9.5]])\n    translate(concat(p, [0]))\n        standoff();",
    "renders": true
  },
  {
    "electronic_device": "patch",
    "openscad_code": "// OpenSCAD code for a realistic electronic nicotine patch\n// Dimensions in mm, designed for 3D printing\n\n$fn = 50;\n\n// Main body color - medical beige\ncolor([0.93, 0.88, 0.78]) {\n    // Main patch body - rounded rectangle base\n    translate([0, 0, 1]) {\n        difference() {\n            minkowski() {\n                cube([35, 25, 2], center = true);\n                cylinder(h = 0.1, r = 3, center = true);\n            }\n            \n            // Central medication reservoir cavity\n            translate([0, 0, 0.5]) {\n                cylinder(h = 3, r = 8, center = true);\n            }\n        }\n    }\n    \n    // Adhesive layer base\n    translate([0, 0, -0.5]) {\n        color([0.85, 0.85, 0.85]) {\n            cube([37, 27, 1], center = true);\n        }\n    }\n}\n\n// Battery compartment (coin cell CR2032)\nmodule battery_compartment() {\n    translate([-12, 0, 2.5]) {\n        difference() {\n            // Battery holder\n            cube([8, 20, 3], center = true);\n            \n            // Battery cavity\n            translate([0, 0, -0.5]) {\n                cylinder(h = 4, r = 10/2, center = true);\n            }\n            \n            // Contact access slot\n            translate([0, -8, 0]) {\n                cube([7, 2, 2], center = true);\n            }\n        }\n    }\n}\n\n// Control circuit board\nmodule control_circuit() {\n    color([0.1, 0.1, 0.1]) {\n        translate([12, 0, 2.5]) {\n            cube([8, 20, 1.6], center = true);\n        }\n    }\n    \n    // LED indicator\n    color([0.9, 0.1, 0.1]) {\n        translate([12, 0, 3.5]) {\n            sphere(r = 1.5);\n        }\n    }\n    \n    // Test contacts\n    for (i = [-1:1]) {\n        translate([12, i * 6, 3.3]) {\n            color([0.8, 0.8, 0.2]) {\n                cylinder(h = 0.5, r = 1);\n            }\n        }\n    }\n}\n\n// Micro-dosing pump array\nmodule pump_array() {\n    color([0.5, 0.5, 0.5]) {\n        for (angle = [0:60:300]) {\n            rotate([0, 0, angle]) {\n                translate([4, 0, 2.5]) {\n                    cylinder(h = 2, r = 1.5);\n                }\n            }\n        }\n    }\n}\n\n// Medication reservoir cap\nmodule reservoir_cap() {\n    color([0.95, 0.95, 0.95]) {\n        translate([0, 0, 3]) {\n            difference() {\n                cylinder(h = 1, r = 9);\n                \n                // Fill port\n                translate([5, 0, -0.1]) {\n                    cylinder(h = 1.2, r = 1.5);\n                }\n            }\n        }\n    }\n}\n\n// Adhesive backing tabs\nmodule adhesive_tabs() {\n    color([0.9, 0.9, 0.9]) {\n        for (pos = [[-16, 0, -1], [16, 0, -1], [0, -11, -1], [0, 11, -1]]) {\n            translate(pos) {\n                cube([6, 6, 0.5], center = true);\n            }\n        }\n    }\n}\n\n// Breathable mesh layer\nmodule breathable_mesh() {\n    color([0.7, 0.7, 0.7]) {\n        translate([0, 0, -1.5]) {\n            difference() {\n                cube([39, 29, 0.5], center = true);\n                \n                // Ventilation holes\n                for (x = [-15:5:15]) {\n                    for (y = [-10:5:10]) {\n                        translate([x, y, 0]) {\n                            cylinder(h = 1, r = 1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nbattery_compartment();\ncontrol_circuit();\npump_array();\nreservoir_cap();\nadhesive_tabs();\nbreathable_mesh();\n\n// Medical device markings\ncolor([0.2, 0.2, 0.2]) {\n    translate([0, -13, 2.5]) {\n        linear_extrude(height = 0.3) {\n            text(\"24H\", size = 3, halign = \"center\");\n        }\n    }\n    \n    translate([0, 13, 2.5]) {\n        linear_extrude(height = 0.3) {\n            text(\"21mg\", size = 2.5, halign = \"center\");\n        }\n    }\n}\n\n// NFC antenna trace (decorative)\ncolor([0.7, 0.7, 0.7]) {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([0, 10 + i * 2, 2.5]) {\n                cube([1, 3, 0.2], center = true);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "update",
    "openscad_code": "// Modern Smartphone with realistic details\n// Overall dimensions: 75mm x 150mm x 8mm\n\n// Device main color\ncolor([0.1, 0.1, 0.1]) \n\n// Main body module\nmodule smartphone_body() {\n    difference() {\n        // Main chassis - rounded rectangle shape\n        hull() {\n            translate([-35, -70, 0]) cylinder(h=8, r=5, $fn=20);\n            translate([35, -70, 0]) cylinder(h=8, r=5, $fn=20);\n            translate([35, 70, 0]) cylinder(h=8, r=5, $fn=20);\n            translate([-35, 70, 0]) cylinder(h=8, r=5, $fn=20);\n        }\n        \n        // Screen cutout\n        translate([-32, -67, -1]) cube([64, 134, 10]);\n    }\n}\n\n// Screen with glass effect\nmodule screen() {\n    color([0.05, 0.05, 0.05])\n    translate([-31, -66, 0.2]) cube([62, 132, 0.5]);\n    \n    // Active display area\n    color([0, 0, 0])\n    translate([-29, -64, 0.8]) cube([58, 128, 0.1]);\n}\n\n// Camera bump module\nmodule camera_bump() {\n    color([0.15, 0.15, 0.15])\n    translate([20, 55, 8]) {\n        cylinder(h=2, r=8, $fn=20);\n        \n        // Camera lens\n        color([0.05, 0.05, 0.05])\n        translate([0, 0, 2]) cylinder(h=1, r=6, $fn=20);\n        \n        color([0.2, 0.2, 0.2])\n        translate([0, 0, 3]) cylinder(h=0.5, r=3, $fn=20);\n    }\n    \n    // Flash LED\n    color([1, 1, 0.8])\n    translate([-20, 55, 9.5]) sphere(r=1.5, $fn=10);\n}\n\n// Side buttons\nmodule buttons() {\n    // Power button\n    color([0.25, 0.25, 0.25])\n    translate([36, 20, 4]) cube([1.5, 15, 2]);\n    \n    // Volume buttons\n    translate([36, -30, 4]) {\n        color([0.25, 0.25, 0.25])\n        cube([1.5, 10, 2]);\n        translate([0, -12, 0]) cube([1.5, 10, 2]);\n    }\n}\n\n// Speaker grill\nmodule speaker_grill() {\n    color([0.1, 0.1, 0.1])\n    translate([-25, -75, 3.5]) {\n        for (i = [0:9]) {\n            translate([i * 5, 0, 0]) cube([1, 6, 1]);\n        }\n    }\n}\n\n// USB-C port\nmodule usbc_port() {\n    color([0.1, 0.1, 0.1])\n    translate([-5, -76.5, 3.5]) {\n        cube([10, 3, 2]);\n        color([0.05, 0.05, 0.05])\n        translate([1, -0.5, 0.5]) cube([8, 2, 1]);\n    }\n}\n\n// SIM tray\nmodule sim_tray() {\n    color([0.2, 0.2, 0.2])\n    translate([-15, 76, 4]) cube([30, 1, 3]);\n    translate([13, 76.5, 4.5]) cylinder(h=1, r=1, $fn=10);\n}\n\n// Front camera\nmodule front_camera() {\n    color([0.05, 0.05, 0.05])\n    translate([15, 65, 0.8]) cylinder(h=0.5, r=2, $fn=10);\n}\n\n// Ear speaker\nmodule ear_speaker() {\n    color([0.1, 0.1, 0.1])\n    translate([-15, 67, 0.8]) cube([30, 2, 0.5]);\n}\n\n// Assemble the phone\nunion() {\n    smartphone_body();\n    screen();\n    camera_bump();\n    buttons();\n    speaker_grill();\n    usbc_port();\n    sim_tray();\n    front_camera();\n    ear_speaker();\n}",
    "renders": true
  },
  {
    "electronic_device": "dlc",
    "openscad_code": "// DLC (Downloadable Content) Electronic Device - Realistic Style\n// A small handheld gaming device for DLC content delivery\n\n// Main body dimensions\nbody_length = 80;\nbody_width = 45;\nbody_thickness = 12;\nwall_thickness = 2;\n\n// Screen dimensions\nscreen_width = 35;\nscreen_height = 25;\nscreen_depth = 1;\n\n// Button layout\nbutton_diameter = 5;\nbutton_height = 1.5;\nd_pad_size = 15;\nd_pad_height = 2;\n\n// Ports\nusb_width = 8;\nusb_height = 3;\nusb_depth = 5;\n\n// Colors\nbody_color = \"DarkSlateGray\";\nscreen_color = \"black\";\nbutton_color = \"DimGray\";\naccent_color = \"RoyalBlue\";\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Main body\n        color(body_color)\n        rounded_cube([body_length, body_width, body_thickness], 3);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            rounded_cube([body_length-2*wall_thickness, body_width-2*wall_thickness, body_thickness-wall_thickness], 2);\n        \n        // Screen cutout\n        translate([(body_length-screen_width)/2, (body_width-screen_height)/2, body_thickness-screen_depth])\n            cube([screen_width, screen_height, screen_depth+1], center=false);\n        \n        // USB-C port\n        translate([body_length-usb_depth-1, (body_width-usb_width)/2, body_thickness/2-usb_height/2])\n            cube([usb_depth+1, usb_width, usb_height]);\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(size, radius) {\n    hull() {\n        for (x = [0, 1])\n            for (y = [0, 1])\n                for (z = [0, 1])\n                    translate([x*(size[0]-2*radius), y*(size[1]-2*radius), z*(size[2]-2*radius)])\n                        sphere(r=radius);\n    }\n}\n\n// LCD screen\nmodule screen() {\n    color(screen_color)\n    translate([(body_length-screen_width)/2, (body_width-screen_height)/2, body_thickness-screen_depth])\n        cube([screen_width, screen_height, screen_depth]);\n    \n    // Screen bezel\n    color(\"LightGray\")\n    translate([(body_length-screen_width-2)/2, (body_width-screen_height-2)/2, body_thickness-screen_depth-0.5])\n        cube([screen_width+2, screen_height+2, 0.5]);\n}\n\n// D-pad controller\nmodule d_pad() {\n    color(button_color)\n    translate([15, body_width-20, body_thickness-d_pad_height])\n    union() {\n        // Center\n        cube([d_pad_size, d_pad_size, d_pad_height], center=true);\n        \n        // Directional buttons\n        cube([d_pad_size*0.4, d_pad_size*0.8, d_pad_height+0.5], center=true);\n        cube([d_pad_size*0.8, d_pad_size*0.4, d_pad_height+0.5], center=true);\n    }\n}\n\n// Action buttons\nmodule action_buttons() {\n    color(accent_color)\n    for (i = [0:3]) {\n        angle = i * 90 + 45;\n        x = cos(angle) * 8 + 60;\n        y = sin(angle) * 8 + 20;\n        translate([x, y, body_thickness-button_height])\n            cylinder(h=button_height, d=button_diameter, $fn=20);\n    }\n}\n\n// Start/Select buttons\nmodule utility_buttons() {\n    color(button_color)\n    translate([body_length/2-8, 8, body_thickness-button_height])\n        rounded_cube([10, 3, button_height], 1);\n    translate([body_length/2+8, 8, body_thickness-button_height])\n        rounded_cube([10, 3, button_height], 1);\n}\n\n// Speaker grills\nmodule speakers() {\n    color(\"DarkGray\")\n    for (i = [-1, 1]) {\n        translate([body_length/2 + i*15, 5, body_thickness-1])\n            for (x = [-2:2]) {\n                translate([x*2, 0, 0])\n                    cube([1, 8, 1]);\n            }\n    }\n}\n\n// LED indicators\nmodule leds() {\n    color(\"red\")\n    translate([body_length-8, body_width-5, body_thickness-2])\n        sphere(d=3);\n    \n    color(\"green\")\n    translate([body_length-15, body_width-5, body_thickness-2])\n        sphere(d=3);\n}\n\n// Logo\nmodule logo() {\n    color(\"LightGray\")\n    translate([body_length/2, body_width-30, body_thickness-0.5])\n        linear_extrude(height=0.5)\n            text(\"DLC\", size=4, halign=\"center\", valign=\"center\");\n}\n\n// Assembly\nbody_shell();\nscreen();\nd_pad();\naction_buttons();\nutility_buttons();\nspeakers();\nleds();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "bundle",
    "openscad_code": "// Bundle of 2 smartphones + 1 power bank + 1 cable\n// Overall footprint ~90 mm × 50 mm × 30 mm\n\n$fa = 2; $fs = 0.5;\n\nmodule phone() {\n    // Main body\n    color(\"silver\")\n        cube([70, 10, 140], center = true);\n\n    // Screen\n    color(\"#111\")\n        translate([0, 5.1, 0])\n            cube([65, 0.2, 125], center = true);\n\n    // Home button\n    color(\"#444\")\n        translate([0, 5.1, -55])\n            cylinder(h = 0.5, d = 10, center = true);\n\n    // Camera bump\n    color(\"#222\")\n        translate([25, -5.1, 60])\n            cube([12, 1.5, 12], center = true);\n}\n\nmodule powerBank() {\n    // Main body\n    color(\"#0a0a0a\")\n        cube([90, 22, 22], center = true);\n\n    // Indicator LEDs\n    for (i = [0:3])\n        color(\"#00ff00\")\n            translate([35 - i * 8, 11.1, 0])\n                cube([3, 0.2, 3], center = true);\n\n    // USB-A port\n    color(\"#333\")\n        translate([40, -11.1, 0])\n            cube([12, 2, 8], center = true);\n\n    // USB-C port\n    color(\"#333\")\n        translate([-40, -11.1, 0])\n            cube([8, 2, 4], center = true);\n}\n\nmodule usbCable() {\n    // Cable body\n    color(\"#ffffff\")\n        linear_extrude(height = 2, center = true)\n            polygon(points = [\n                [0, 0], [5, 0], [5, 5], [10, 5],\n                [10, 0], [15, 0], [15, 2], [0, 2]\n            ]);\n\n    // USB-A plug\n    color(\"#999\")\n        translate([0, 1, 0])\n            cube([15, 8, 4], center = true);\n\n    // USB-C plug\n    color(\"#777\")\n        translate([15, 1, 0])\n            cube([10, 6, 2.5], center = true);\n}\n\n// Assemble the bundle\ntranslate([0, 0, 0])\n    phone();\n\ntranslate([0, 12, 0])\n    rotate([0, 0, 10])\n        phone();\n\ntranslate([0, -24, 0])\n    powerBank();\n\ntranslate([30, 0, 75])\n    rotate([90, 0, 90])\n        usbCable();",
    "renders": true
  },
  {
    "electronic_device": "pack",
    "openscad_code": "// Portable power bank / battery pack - medium complexity realistic style\n// Overall dimensions: 90 x 62 x 25 mm\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Outer rounded rectangle shell\n        minkowski() {\n            cube([90, 62, 25], center=true);\n            sphere(4);\n        }\n        \n        // Hollow interior\n        translate([0,0,-2])\n        minkowski() {\n            cube([82, 54, 21], center=true);\n            sphere(2);\n        }\n        \n        // USB-A port cutouts right side\n        for (i = [-1, 1]) {\n            translate([46, i*15, 0])\n            rotate([0,90,0])\n            cylinder(h=12, r=5.25, center=true);\n        }\n        \n        // USB-C port cutout right side\n        translate([46, 0, 0])\n        rotate([0,90,0])\n        cylinder(h=12, r=3.5, center=true);\n        \n        // LED indicator cutouts front\n        for (i = [-2:2]) {\n            translate([i*8, -33, 5])\n            cylinder(h=3, r=1.5);\n        }\n        \n        // Power button cutout top\n        translate([25, 33, 0])\n        cube([12, 6, 12], center=true);\n    }\n}\n\n// Top button\nmodule power_button() {\n    color([0.2,0.2,0.2])\n    translate([25, 33, 6])\n    difference() {\n        cube([10, 4, 8], center=true);\n        translate([0,0,4])\n        sphere(3.5);\n    }\n}\n\n// LED indicators\nmodule led_indicators() {\n    for (i = [-2:2]) {\n        color([0,1,0])\n        translate([i*8, -33, 6.5])\n        sphere(1.5);\n    }\n}\n\n// USB ports\nmodule usb_ports() {\n    // USB-A ports\n    color([0.1,0.1,0.1])\n    for (i = [-1, 1]) {\n        translate([46, i*15, 0])\n        rotate([0,90,0])\n        cylinder(h=3, r=5.25, center=true);\n    }\n    \n    // USB-C port\n    translate([46, 0, 0])\n    rotate([0,90,0])\n    cylinder(h=3, r=3.5, center=true);\n}\n\n// Battery level display screen\nmodule status_screen() {\n    color([0.05,0.05,0.05])\n    translate([-20, -30, 6.5])\n    cube([35, 12, 0.5], center=true);\n    \n    // 88% battery level\n    color([0,0.8,0])\n    translate([-30, -30, 7.1])\n    cube([10, 8, 0.2], center=true);\n    translate([-18, -30, 7.1])\n    cube([10, 8, 0.2], center=true);\n    translate([-6, -30, 7.1])\n    cube([6, 8, 0.2], center=true);\n}\n\n// Ventilation slots\nmodule vents() {\n    color([0.15,0.15,0.15])\n    for (i = [-3:3]) {\n        translate([0, 0, i*6-6])\n        cube([90, 0.5, 2], center=true);\n    }\n}\n\n// Brand logo\nmodule logo() {\n    color([0.8,0.8,0.8])\n    translate([-30, 0, 13])\n    linear_extrude(height=0.5)\n    text(\"PWR\", size=8, halign=\"center\");\n}\n\n// Assembly\nunion() {\n    color([0.2,0.2,0.2])\n    body_shell();\n    \n    color([0.3,0.3,0.3])\n    translate([0,0,12.5])\n    vents();\n    \n    power_button();\n    led_indicators();\n    usb_ports();\n    status_screen();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "crate",
    "openscad_code": "// Crate for small electronic device (Raspberry Pi Zero style)\n// Overall dimensions: 60 x 40 x 25 mm\n\n// Device parameters\ndevice_x = 30;\ndevice_y = 15;\ndevice_thickness = 5;\n\n// Crate parameters\ncrate_x = 60;\ncrate_y = 40;\ncrate_z = 25;\nwall_thickness = 2;\nfloor_thickness = 3;\n\n// Color definitions\ncrate_color = \"BurlyWood\";\ndevice_color = \"DarkGreen\";\nscreen_color = \"Black\";\nport_color = \"Silver\";\n\n// Main crate assembly\nunion() {\n    // Main crate body\n    color(crate_color) {\n        difference() {\n            // Outer shell\n            cube([crate_x, crate_y, crate_z], center=true);\n            \n            // Hollow interior\n            translate([0, 0, -floor_thickness/2])\n                cube([crate_x-2*wall_thickness, crate_y-2*wall_thickness, crate_z], center=true);\n        }\n    }\n    \n    // Crate lid\n    color(crate_color) {\n        translate([0, 0, crate_z/2 + 1])\n            cube([crate_x, crate_y, 2], center=true);\n    }\n    \n    // Crate handle cutouts\n    for(i = [-1, 1]) {\n        color(crate_color) {\n            translate([i*crate_x/4, crate_y/2, crate_z/2])\n                rotate([0, 90, 0])\n                    cylinder(h=10, r=3, center=true);\n        }\n    }\n    \n    // Electronic device inside\n    color(device_color) {\n        translate([0, 0, -crate_z/2 + floor_thickness + device_thickness/2])\n            cube([device_x, device_y, device_thickness], center=true);\n    }\n    \n    // Device screen\n    color(screen_color) {\n        translate([0, 0, -crate_z/2 + floor_thickness + device_thickness + 0.1])\n            cube([device_x*0.8, device_y*0.6, 0.2], center=true);\n    }\n    \n    // HDMI port on device\n    color(port_color) {\n        translate([device_x/2, 0, -crate_z/2 + floor_thickness + device_thickness/2])\n            cube([2, 6, 4], center=true);\n    }\n    \n    // USB port on device\n    color(port_color) {\n        translate([-device_x/2, 0, -crate_z/2 + floor_thickness + device_thickness/2])\n            cube([2, 6, 4], center=true);\n    }\n    \n    // Ventilation holes in crate sides\n    module vent_holes() {\n        for(y = [-crate_y/3, 0, crate_y/3]) {\n            for(z = [-crate_z/4, 0, crate_z/4]) {\n                translate([crate_x/2, y, z])\n                    rotate([90, 0, 0])\n                        cylinder(h=wall_thickness+0.1, r=1.5, center=true);\n            }\n        }\n    }\n    \n    color(crate_color) {\n        difference() {\n            cube([crate_x, crate_y, crate_z], center=true);\n            vent_holes();\n            mirror([1, 0, 0]) vent_holes();\n        }\n    }\n    \n    // Power LED indicator\n    color(\"Red\") {\n        translate([crate_x/2 - 3, crate_y/2 - 3, crate_z/2 - 3])\n            sphere(r=1.5);\n    }\n    \n    // Mounting posts for device\n    color(crate_color) {\n        for(x = [-device_x/2 + 5, device_x/2 - 5]) {\n            for(y = [-device_y/2 + 3, device_y/2 - 3]) {\n                translate([x, y, -crate_z/2 + floor_thickness/2])\n                    cylinder(h=floor_thickness, r=1.5, center=true);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "loot",
    "openscad_code": "// Loot Electronic Device - Realistic Gaming Console Style\n// Dimensions: 80mm x 120mm x 25mm (handheld gaming device)\n\n// Main color scheme\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_body = [0.2, 0.2, 0.2];\ncolor_buttons = [0.8, 0.8, 0.8];\ncolor_accent = [0.9, 0.2, 0.2];\ncolor_ports = [0.3, 0.3, 0.3];\n\n// Main body shell\nmodule main_body() {\n    difference() {\n        // Outer shell\n        color(color_body)\n        rounded_cube([80, 120, 25], 5);\n        \n        // Screen cutout\n        translate([10, 20, 24.5])\n            cube([60, 40, 2]);\n        \n        // Button cutouts\n        for(y = [70:20:110]) {\n            for(x = [20:20:60]) {\n                translate([x, y, 24.5])\n                    cylinder(h=2, r=4, $fn=16);\n            }\n        }\n        \n        // D-pad cutout\n        translate([25, 55, 24.5])\n            rounded_cube([20, 20, 2], 2);\n        \n        // Shoulder button cutouts\n        translate([5, -1, 20])\n            cube([15, 5, 5]);\n        translate([60, -1, 20])\n            cube([15, 5, 5]);\n        translate([5, 116, 20])\n            cube([15, 5, 5]);\n        translate([60, 116, 20])\n            cube([15, 5, 5]);\n    }\n}\n\n// Screen display\nmodule screen() {\n    color(color_screen)\n    translate([12, 22, 24])\n        cube([56, 36, 0.5]);\n    \n    // Screen glare effect\n    color([1, 1, 1, 0.2])\n    translate([15, 25, 24.6])\n        cube([20, 10, 0.1]);\n}\n\n// Action buttons\nmodule action_buttons() {\n    for(y = [70, 90, 110]) {\n        for(x = [20, 40, 60]) {\n            color(color_buttons)\n            translate([x, y, 25])\n                cylinder(h=1.5, r=3.5, $fn=16);\n            \n            // Button symbols\n            color([0, 0, 0])\n            translate([x-1, y-1, 26.6])\n                cube([2, 2, 0.1]);\n        }\n    }\n}\n\n// D-pad\nmodule dpad() {\n    color(color_buttons)\n    translate([35, 65, 25])\n        cube([10, 30, 1.5]);\n    \n    color(color_buttons)\n    translate([25, 75, 25])\n        cube([30, 10, 1.5]);\n}\n\n// Shoulder buttons\nmodule shoulder_buttons() {\n    color(color_accent)\n    translate([12.5, -0.5, 22.5])\n        rounded_cube([10, 4, 4], 2);\n    \n    translate([57.5, -0.5, 22.5])\n        rounded_cube([10, 4, 4], 2);\n    \n    translate([12.5, 116.5, 22.5])\n        rounded_cube([10, 4, 4], 2);\n    \n    translate([57.5, 116.5, 22.5])\n        rounded_cube([10, 4, 4], 2);\n}\n\n// Ports and connectors\nmodule ports() {\n    // USB-C port\n    color(color_ports)\n    translate([35, 2, 10])\n        cube([10, 2, 3]);\n    \n    // Headphone jack\n    color(color_ports)\n    translate([20, 2, 12.5])\n        cylinder(h=2, r=3.5, $fn=16);\n    \n    // Power LED\n    color([0, 1, 0])\n    translate([70, 5, 24.5])\n        cylinder(h=0.5, r=1.5, $fn=8);\n}\n\n// Ventilation grilles\nmodule vents() {\n    for(i = [0:3]) {\n        color([0.15, 0.15, 0.15])\n        translate([5 + i*20, 45, 24.5])\n            cube([15, 1, 0.5]);\n    }\n}\n\n// Utility module for rounded cubes\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(x = [radius, size[0]-radius]) {\n            for(y = [radius, size[1]-radius]) {\n                for(z = [radius, size[2]-radius]) {\n                    translate([x, y, z])\n                        sphere(r=radius, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Logo\nmodule logo() {\n    color([1, 1, 1])\n    translate([40, 100, 24.6])\n        cube([15, 8, 0.1]);\n    \n    color([0, 0, 0])\n    translate([42, 102, 24.7])\n        cube([11, 4, 0.1]);\n}\n\n// Assembly\nmain_body();\nscreen();\naction_buttons();\ndpad();\nshoulder_buttons();\nports();\nvents();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "drop",
    "openscad_code": "// Drop-style electronic device - realistic medium complexity\n// Features: teardrop body, OLED screen, touch button, USB-C port, LED indicator\n\n// Overall dimensions\ndrop_length = 80;\ndrop_width = 45;\ndrop_thickness = 12;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5;\n\n// Main teardrop body\nmodule teardrop_body() {\n    difference() {\n        // Outer shell\n        color(\"#E8E8E8\") \n        hull() {\n            // Top bulb\n            translate([0, -drop_length/4, 0])\n            sphere(d=drop_width, $fn=50);\n            \n            // Bottom tapered point\n            translate([0, drop_length/2, 0])\n            scale([0.3, 1, 0.3])\n            sphere(d=drop_width*0.8, $fn=30);\n            \n            // Connect with elongated spheres\n            for(i=[-drop_length/4:5:drop_length/2]) {\n                translate([0, i, 0])\n                scale([1-0.7*(i+drop_length/4)/drop_length, 1, 1-0.7*(i+drop_length/4)/drop_length])\n                sphere(d=drop_width*0.9, $fn=30);\n            }\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n        scale([(drop_width-wall_thickness*2)/drop_width, \n               (drop_length-wall_thickness*2)/drop_length,\n               (drop_thickness-wall_thickness*2)/drop_thickness])\n        teardrop_body_solid();\n    }\n}\n\n// Solid version for hollowing\nmodule teardrop_body_solid() {\n    hull() {\n        translate([0, -drop_length/4, 0])\n        sphere(d=drop_width, $fn=50);\n        \n        translate([0, drop_length/2, 0])\n        scale([0.3, 1, 0.3])\n        sphere(d=drop_width*0.8, $fn=30);\n        \n        for(i=[-drop_length/4:5:drop_length/2]) {\n            translate([0, i, 0])\n            scale([1-0.7*(i+drop_length/4)/drop_length, 1, 1-0.7*(i+drop_length/4)/drop_length])\n            sphere(d=drop_width*0.9, $fn=30);\n        }\n    }\n}\n\n// OLED display\nmodule oled_display() {\n    color(\"#000000\")\n    translate([0, -drop_length/4, drop_thickness/2+0.1])\n    cube([drop_width*0.7, drop_length*0.3, 0.5], center=true);\n    \n    // Screen surface\n    color(\"#001122\")\n    translate([0, -drop_length/4, drop_thickness/2+0.6])\n    cube([drop_width*0.65, drop_length*0.28, 0.1], center=true);\n}\n\n// Capacitive touch button\nmodule touch_button() {\n    color(\"#404040\")\n    translate([drop_width/3, drop_length/4, drop_thickness/2+0.1])\n    cylinder(h=0.5, d=8, $fn=32);\n    \n    // Button icon\n    color(\"#FFFFFF\")\n    translate([drop_width/3, drop_length/4, drop_thickness/2+0.6])\n    cube([4, 4, 0.1], center=true);\n}\n\n// USB-C port\nmodule usbc_port() {\n    color(\"#202020\")\n    translate([0, drop_length/2-3, 0])\n    rotate([90, 0, 0])\n    cylinder(h=6, d=8.3, $fn=32);\n    \n    // Port opening\n    translate([0, drop_length/2-3, 0])\n    rotate([90, 0, 0])\n    cylinder(h=7, d=6, $fn=32);\n}\n\n// LED indicator\nmodule status_led() {\n    color(\"#800000\")\n    translate([-drop_width/3, drop_length/4, drop_thickness/2+0.1])\n    cylinder(h=0.5, d=3, $fn=16);\n    \n    // LED lens\n    color(\"#FF0000\")\n    translate([-drop_width/3, drop_length/4, drop_thickness/2+0.6])\n    cylinder(h=0.3, d=2.5, $fn=16);\n}\n\n// Ventilation holes\nmodule ventilation_holes() {\n    for(i=[-1:1]) {\n        for(j=[-2:2]) {\n            translate([i*8, j*5, 0])\n            rotate([0, 90, 0])\n            cylinder(h=drop_thickness, d=1, $fn=8);\n        }\n    }\n}\n\n// Assembly\nteardrop_body();\noled_display();\ntouch_button();\nusbc_port();\nstatus_led();\n\n// Apply ventilation holes as difference\ndifference() {\n    children();\n    ventilation_holes();\n}",
    "renders": true
  },
  {
    "electronic_device": "reward",
    "openscad_code": "// Reward Electronic Device - Gaming Handheld\n// A medium-complexity 3D printable handheld gaming device modelled as a reward\n\n// Overall dimensions: 110mm x 65mm x 25mm\n\n$fn = 32;\n\n// Main colors\ncolor_main = \"black\";\ncolor_accent = \"red\";\ncolor_screen = \"#001122\";\ncolor_button = \"darkgrey\";\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Main rounded rectangular body\n        color(color_main)\n        minkowski() {\n            cube([100, 55, 18], center = true);\n            sphere(3);\n        }\n        \n        // Screen cutout\n        translate([0, 0, 10])\n        color(color_screen)\n        cube([80, 45, 2], center = true);\n    }\n}\n\n// Display screen\nmodule screen() {\n    translate([0, 0, 10.5])\n    color(color_screen)\n    cube([75, 40, 0.5], center = true);\n}\n\n// D-pad\nmodule dpad() {\n    translate([-35, -15, 10.5])\n    color(color_button)\n    union() {\n        // Center piece\n        cube([10, 10, 1.5], center = true);\n        \n        // Up\n        translate([0, 8, 0])\n        cube([8, 6, 1.5], center = true);\n        \n        // Down\n        translate([0, -8, 0])\n        cube([8, 6, 1.5], center = true);\n        \n        // Left\n        translate([-8, 0, 0])\n        cube([6, 8, 1.5], center = true);\n        \n        // Right\n        translate([8, 0, 0])\n        cube([6, 8, 1.5], center = true);\n    }\n}\n\n// ABXY buttons\nmodule action_buttons() {\n    translate([35, 0, 10.5])\n    color(color_button)\n    union() {\n        // A button\n        translate([8, 8, 0])\n        cylinder(h = 1.5, r = 4);\n        \n        // B button\n        translate([-8, 8, 0])\n        cylinder(h = 1.5, r = 4);\n        \n        // X button\n        translate([8, -8, 0])\n        cylinder(h = 1.5, r = 4);\n        \n        // Y button\n        translate([-8, -8, 0])\n        cylinder(h = 1.5, r = 4);\n    }\n}\n\n// Start/Select buttons\nmodule menu_buttons() {\n    translate([0, 20, 10.5])\n    color(color_button)\n    union() {\n        // Start button\n        translate([-8, 0, 0])\n        cube([10, 4, 1.5], center = true);\n        \n        // Select button\n        translate([8, 0, 0])\n        cube([10, 4, 1.5], center = true);\n    }\n}\n\n// Speaker grills\nmodule speakers() {\n    for (side = [-1, 1]) {\n        translate([0, side * 25, 0])\n        difference() {\n            // Speaker housing\n            color(color_main)\n            translate([0, 0, -8])\n            cube([20, 8, 2], center = true);\n            \n            // Speaker holes\n            color(\"black\")\n            for (i = [-3:3]) {\n                translate([i * 2.5, side * 25, -7])\n                cylinder(h = 2, r = 0.8);\n            }\n        }\n    }\n}\n\n// Charging port\nmodule charging_port() {\n    translate([0, -30, -8])\n    color(\"silver\")\n    cube([10, 2, 4], center = true);\n}\n\n// Volume buttons\nmodule volume_buttons() {\n    translate([-50, 0, 0])\n    color(color_accent)\n    union() {\n        // Volume up\n        translate([0, 8, 0])\n        cube([6, 3, 2], center = true);\n        \n        // Volume down\n        translate([0, -8, 0])\n        cube([6, 3, 2], center = true);\n    }\n}\n\n// Power button\nmodule power_button() {\n    translate([50, 0, 0])\n    color(color_accent)\n    cylinder(h = 2, r = 3);\n}\n\n// Reward stars decoration\nmodule reward_stars() {\n    color(\"gold\")\n    translate([0, 0, 12])\n    for (angle = [0:120:240]) {\n        rotate([0, 0, angle])\n        translate([40, 0, 0])\n        linear_extrude(height = 2)\n        polygon(points = [\n            [0, 5], [1.5, 1.5], [5, 1.5], \n            [2.5, -1], [3.5, -4.5], [0, -2.5],\n            [-3.5, -4.5], [-2.5, -1], [-5, 1.5],\n            [-1.5, 1.5]\n        ]);\n    }\n}\n\n// Assemble the complete reward device\nunion() {\n    body_shell();\n    screen();\n    dpad();\n    action_buttons();\n    menu_buttons();\n    speakers();\n    charging_port();\n    volume_buttons();\n    power_button();\n    reward_stars();\n}",
    "renders": true
  },
  {
    "electronic_device": "chest",
    "openscad_code": "// Chest-mounted electronic device (portable defibrillator)\n// External dimensions: 60 x 45 x 18 mm\n// Suitable for 3D printing with 1mm wall thickness\n\n// Main device body\nmodule device_body() {\n    color(\"lightgrey\") difference() {\n        // Main shell\n        translate([-30, -22.5, 0]) cube([60, 45, 18]);\n        \n        // Inner cavity for electronics\n        translate([-28, -20.5, 2]) cube([56, 41, 15]);\n        \n        // Rounded edges\n        for(x = [-28, 28])\n            for(y = [-20.5, 20.5])\n                translate([x, y, 0]) cylinder(h=18, r=1.5, $fn=16);\n        \n        // Button holes\n        translate([22, 15, 0]) cylinder(h=18, r=3, $fn=16);\n        translate([22, 0, 0]) cylinder(h=18, r=3, $fn=16);\n        translate([22, -15, 0]) cylinder(h=18, r=3, $fn=16);\n        \n        // USB port\n        translate([-25, 0, 9]) rotate([0, 90, 0]) cylinder(h=8, r=2.5, $fn=16);\n    }\n}\n\n// Display screen\nmodule display() {\n    color(\"black\") translate([-15, -12, 17.5]) cube([30, 24, 0.5]);\n    \n    // Screen bezel\n    color(\"darkgrey\") difference() {\n        translate([-16, -13, 17]) cube([32, 26, 1]);\n        translate([-15.5, -12.5, 17.5]) cube([31, 25, 1]);\n    }\n}\n\n// Control buttons\nmodule buttons() {\n    // Power button\n    color(\"red\") translate([22, 15, 1]) cylinder(h=16, r=2.8, $fn=16);\n    color(\"darkred\") translate([22, 15, 17]) cylinder(h=1, r=3, $fn=16);\n    \n    // Shock button (with safety cover)\n    color(\"orange\") translate([22, 0, 1]) cylinder(h=16, r=2.8, $fn=16);\n    color(\"yellow\") translate([22, 0, 17]) cylinder(h=1, r=3, $fn=16);\n    \n    // Menu button\n    color(\"blue\") translate([22, -15, 1]) cylinder(h=16, r=2.8, $fn=16);\n    color(\"darkblue\") translate([22, -15, 17]) cylinder(h=1, r=3, $fn=16);\n}\n\n// LED indicators\nmodule indicators() {\n    // Heart rate LED\n    color(\"green\") translate([-22, 18, 17.5]) cylinder(h=1, r=1.5, $fn=16);\n    \n    // Battery LED\n    color(\"red\") translate([-22, 14, 17.5]) cylinder(h=1, r=1.5, $fn=16);\n    \n    // WiFi LED\n    color(\"blue\") translate([-22, 10, 17.5]) cylinder(h=1, r=1.5, $fn=16);\n}\n\n// Speaker grill\nmodule speaker() {\n    color(\"darkgrey\") difference() {\n        translate([5, -20, 17]) cube([22, 6, 1]);\n        for(i = [0:4])\n            translate([7 + i*4, -19, 17.5]) cube([2, 4, 1.1]);\n    }\n}\n\n// Chest strap mounting points\nmodule strap_mounts() {\n    // Top mounts\n    for(x = [-20, 20]) {\n        color(\"black\") translate([x, 22.5, 9]) rotate([0, 90, 0]) \n            cylinder(h=5, r=2, $fn=16);\n    }\n    \n    // Bottom mounts\n    for(x = [-20, 20]) {\n        color(\"black\") translate([x, -22.5, 9]) rotate([0, 90, 0]) \n            cylinder(h=5, r=2, $fn=16);\n    }\n}\n\n// Medical cross logo\nmodule medical_logo() {\n    color(\"red\") translate([0, 0, 17.7]) {\n        cube([8, 2, 0.5]);\n        cube([2, 8, 0.5]);\n    }\n}\n\n// Assembly\nunion() {\n    device_body();\n    display();\n    buttons();\n    indicators();\n    speaker();\n    strap_mounts();\n    medical_logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "vault",
    "openscad_code": "// Vault Electronic Device - Realistic Style, Medium Complexity\n// Size: 70mm x 50mm x 35mm\n\n// Main color scheme\n$fa = 1;\n$fs = 0.5;\n\n// Main body of the vault\nmodule vault_body() {\n    difference() {\n        // Main housing\n        color([0.2, 0.2, 0.2]) {\n            cube([70, 50, 35], center = true);\n        }\n        \n        // Front panel recess\n        translate([0, 0, 17.9]) {\n            cube([66, 46, 1], center = true);\n        }\n    }\n}\n\n// Control panel assembly\nmodule control_panel() {\n    // Front panel\n    color([0.1, 0.1, 0.1]) {\n        translate([0, 0, 18]) {\n            cube([66, 46, 0.5], center = true);\n        }\n    }\n    \n    // LCD display\n    color([0.05, 0.05, 0.05]) {\n        translate([-25, 10, 18.6]) {\n            cube([40, 20, 1], center = true);\n        }\n    }\n    \n    // LCD screen\n    color([0, 0.2, 0.1]) {\n        translate([-25, 10, 19.1]) {\n            cube([36, 16, 0.2], center = true);\n        }\n    }\n    \n    // Keypad grid\n    for (row = [0:2]) {\n        for (col = [0:2]) {\n            translate([5 + col * 12, -10 - row * 10, 19]) {\n                color([0.15, 0.15, 0.15]) {\n                    cylinder(h = 1, d = 8, $fn = 32);\n                }\n                color([0.3, 0.3, 0.3]) {\n                    translate([0, 0, 1.1]) {\n                        cylinder(h = 0.3, d = 7, $fn = 32);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Emergency key slot\n    translate([-30, -20, 19]) {\n        color([0.1, 0.1, 0.1]) {\n            cube([4, 2, 1], center = true);\n        }\n    }\n}\n\n// LED indicators\nmodule indicators() {\n    // Status LED\n    translate([30, 20, 19]) {\n        color([0.1, 0, 0]) {\n            cylinder(h = 1, d = 4, $fn = 16);\n        }\n    }\n    \n    // Armed LED\n    translate([30, 10, 19]) {\n        color([0.1, 0.1, 0]) {\n            cylinder(h = 1, d = 4, $fn = 16);\n        }\n    }\n    \n    // Power LED\n    translate([30, 0, 19]) {\n        color([0, 0.3, 0]) {\n            cylinder(h = 1, d = 4, $fn = 16);\n        }\n    }\n}\n\n// Mounting brackets\nmodule brackets() {\n    // Left bracket\n    translate([-36, 0, 0]) {\n        color([0.3, 0.3, 0.3]) {\n            cube([2, 40, 30], center = true);\n        }\n        translate([-38, -15, 10]) {\n            cylinder(h = 2, d = 5, $fn = 16);\n        }\n        translate([-38, 15, 10]) {\n            cylinder(h = 2, d = 5, $fn = 16);\n        }\n    }\n    \n    // Right bracket\n    translate([36, 0, 0]) {\n        color([0.3, 0.3, 0.3]) {\n            cube([2, 40, 30], center = true);\n        }\n        translate([38, -15, 10]) {\n            cylinder(h = 2, d = 5, $fn = 16);\n        }\n        translate([38, 15, 10]) {\n            cylinder(h = 2, d = 5, $fn = 16);\n        }\n    }\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    // Door\n    translate([0, -26, -12]) {\n        color([0.25, 0.25, 0.25]) {\n            cube([50, 2, 20], center = true);\n        }\n    }\n    \n    // Hinges\n    translate([-20, -27, -12]) {\n        color([0.4, 0.4, 0.4]) {\n            cylinder(h = 2, d = 4, $fn = 16);\n        }\n    }\n    translate([20, -27, -12]) {\n        color([0.4, 0.4, 0.4]) {\n            cylinder(h = 2, d = 4, $fn = 16);\n        }\n    }\n}\n\n// Speaker grill\nmodule speaker_grill() {\n    translate([-25, -20, 19]) {\n        color([0.15, 0.15, 0.15]) {\n            cube([20, 8, 1], center = true);\n        }\n    }\n    \n    // Grill holes\n    for (i = [0:3]) {\n        translate([-35 + i * 5, -20, 19.6]) {\n            color([0.05, 0.05, 0.05]) {\n                cylinder(h = 1, d = 1, $fn = 8);\n            }\n        }\n    }\n}\n\n// Main assembly\nvault_body();\ncontrol_panel();\nindicators();\nbrackets();\nbattery_compartment();\nspeaker_grill();",
    "renders": true
  },
  {
    "electronic_device": "locker",
    "openscad_code": "// Locker Electronic Device - Realistic style, medium complexity\n// Dimensions: 60mm x 40mm x 20mm\n\n// Main body module\nmodule locker_device() {\n    color(\"silver\") {\n        // Main enclosure - slightly rounded edges\n        difference() {\n            minkowski() {\n                cube([60, 40, 20], center = true);\n                sphere(2);\n            }\n            translate([0, 0, 10])\n                cube([56, 36, 20], center = true);\n        }\n    }\n    \n    // Front face with display\n    color(\"darkslategray\") {\n        translate([0, 18, 0])\n            cube([54, 2, 16], center = true);\n    }\n    \n    // LCD display\n    color(\"black\") {\n        translate([0, 19, 5])\n            cube([30, 0.5, 12], center = true);\n    }\n    \n    // Keypad area\n    color(\"dimgray\") {\n        translate([0, 19, -3])\n            cube([40, 0.5, 8], center = true);\n    }\n    \n    // Keypad buttons - 3x4 layout\n    for (x = [-15, -5, 5, 15]) {\n        for (y = [-1, -4, -7]) {\n            translate([x, 19.8, y])\n                cylinder(h = 0.8, r = 2.5, $fn = 16);\n        }\n    }\n    \n    // RFID antenna area\n    color(\"darkblue\") {\n        translate([20, 19, 5])\n            cube([10, 0.5, 10], center = true);\n    }\n    \n    // LED indicators\n    color(\"red\") {\n        translate([-25, 19, 7])\n            cylinder(h = 1, r = 1.5, $fn = 8);\n    }\n    \n    color(\"green\") {\n        translate([-25, 19, 3])\n            cylinder(h = 1, r = 1.5, $fn = 8);\n    }\n    \n    // Speaker grill\n    color(\"black\") {\n        translate([25, 19, -6])\n            cube([8, 0.5, 4], center = true);\n        for (i = [-1.5, -0.5, 0.5, 1.5]) {\n            translate([25 + i, 19.7, -6])\n                cube([0.3, 0.2, 3.5], center = true);\n        }\n    }\n    \n    // Micro-USB port\n    color(\"black\") {\n        translate([0, -20, 0])\n            cube([10, 2, 3], center = true);\n    }\n    \n    // Mounting holes - 4 corners\n    color(\"black\") {\n        for (x = [-25, 25]) {\n            for (y = [-15, 15]) {\n                translate([x, y, -10])\n                    cylinder(h = 3, r = 2, $fn = 16);\n            }\n        }\n    }\n    \n    // Battery compartment cover\n    color(\"gray\") {\n        translate([0, 0, -9])\n            cube([40, 30, 1], center = true);\n    }\n    \n    // Brand text area (simplified as rectangle)\n    color(\"white\") {\n        translate([-15, 19, 9])\n            cube([8, 0.5, 3], center = true);\n    }\n    \n    // Ventilation slots\n    color(\"black\") {\n        for (i = [-8, -4, 0, 4, 8]) {\n            translate([0, i, -10])\n                cube([50, 0.5, 0.5], center = true);\n        }\n    }\n}\n\n// Generate the device\nlocker_device();",
    "renders": true
  },
  {
    "electronic_device": "stash",
    "openscad_code": "// Realistic Power-Bank Stash (Medium Complexity)\n// External dimensions: 90 x 55 x 25 mm\n// Wall thickness: 2 mm for 3D printing\n// Hidden compartment: 60 x 30 x 15 mm\n\n// Colors\nUSB_COLOR = \"silver\";\nBODY_COLOR = \"black\";\nBUTTON_COLOR = \"red\";\nLED_COLOR = \"lime\";\n\n// Main body\ndifference() {\n    // Outer shell\n    color(BODY_COLOR)\n    minkowski() {\n        cube([90, 55, 25], center=true);\n        sphere(r=2.5);\n    }\n    \n    // Hidden cavity\n    translate([0, 0, -3])\n        cube([60, 30, 15], center=true);\n    \n    // Top opening for lid\n    translate([0, 0, 10])\n        cube([64, 34, 10], center=true);\n}\n\n// Top lid\ntranslate([0, 0, 14.5])\n    color(BODY_COLOR)\n    difference() {\n        minkowski() {\n            cube([64, 34, 3], center=true);\n            sphere(r=1.5);\n        }\n        translate([0, 0, -1.5])\n            cube([60, 30, 4], center=true);\n    }\n\n// USB-A port (left side)\nmodule usb_port(x, y, z) {\n    color(USB_COLOR)\n    translate([x, y, z])\n        difference() {\n            cube([12, 15, 8], center=true);\n            translate([0, 0, 1])\n                cube([10, 12, 6], center=true);\n        }\n}\n\nusb_port(-48, 0, 0);\n\n// USB-C port (right side)\ntranslate([48, 0, 0])\n    color(USB_COLOR)\n    difference() {\n        cylinder(h=8, r=4, center=true, $fn=20);\n        cylinder(h=9, r=3.5, center=true, $fn=20);\n    }\n\n// Power button\ntranslate([-35, 23, 0])\n    color(BUTTON_COLOR)\n    cylinder(h=5, r=3.5, center=true, $fn=20);\n\n// LED indicators\nfor (i = [0:3]) {\n    translate([30 - i*10, 23, 0])\n        color(LED_COLOR)\n        sphere(r=2, $fn=10);\n}\n\n// Small screws (decorative)\nmodule screw(x, y) {\n    translate([x, y, 12.5])\n        color(\"gray\")\n        cylinder(h=2, r=1.5, $fn=6);\n}\n\nscrew(-40, 20);\nscrew(40, 20);\nscrew(-40, -20);\nscrew(40, -20);\n\n// Micro-texture grip lines on sides\nfor (i = [-20:5:20]) {\n    translate([0, 27.5, i])\n        color(\"gray\")\n        cube([86, 1, 0.5], center=true);\n}\n\n// Brand label area\ntranslate([0, 0, 12.5])\n    color(\"white\")\n    cube([20, 8, 0.3], center=true);",
    "renders": true
  },
  {
    "electronic_device": "inventory",
    "openscad_code": "// RFID Inventory Scanner - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm x 55mm x 25mm\n\n// Main body shell\nmodule scanner_body() {\n    difference() {\n        // Main rounded rectangle body\n        minkowski() {\n            cube([75, 50, 20], center=true);\n            sphere(3);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([71, 46, 16], center=true);\n            sphere(2);\n        }\n    }\n}\n\n// Front grip texture pattern\nmodule grip_pattern() {\n    for (x = [-30:8:30]) {\n        for (y = [-18:8:18]) {\n            translate([x, y, 11.5]) {\n                color(\"darkslategray\")\n                cylinder(h=1.5, d=6, $fn=20);\n            }\n        }\n    }\n}\n\n// LCD screen with bezel\nmodule lcd_screen() {\n    difference() {\n        // Bezel\n        color(\"black\")\n        translate([0, -8, 11])\n        cube([40, 20, 2], center=true);\n        \n        // Screen area\n        color(\"lightblue\")\n        translate([0, -8, 12])\n        cube([36, 16, 0.5], center=true);\n    }\n    \n    // Screen content (schematic lines)\n    color(\"white\")\n    for (i = [-2:1:2]) {\n        translate([i*6, -8, 12.5])\n        cube([3, 12, 0.1], center=true);\n    }\n}\n\n// Navigation buttons\nmodule buttons() {\n    // 4-way D-pad\n    color(\"darkgray\")\n    translate([0, 8, 11])\n    cube([30, 20, 2], center=true);\n    \n    color(\"black\")\n    // Up button\n    translate([0, 14, 12.5])\n    cylinder(h=1.5, d=6, $fn=20);\n    \n    // Down button\n    translate([0, 2, 12.5])\n    cylinder(h=1.5, d=6, $fn=20);\n    \n    // Left button\n    translate([-10, 8, 12.5])\n    cylinder(h=1.5, d=6, $fn=20);\n    \n    // Right button\n    translate([10, 8, 12.5])\n    cylinder(h=1.5, d=6, $fn=20);\n    \n    // Center OK button\n    translate([0, 8, 12.5])\n    cylinder(h=1.5, d=8, $fn=20);\n}\n\n// Trigger button on side\nmodule trigger_button() {\n    color(\"red\")\n    translate([-39, 0, 5])\n    rotate([0, 0, -20])\n    cube([8, 15, 6], center=true);\n}\n\n// RFID antenna window\nmodule antenna_window() {\n    color(\"darkslategray\")\n    translate([39, 0, 0])\n    cube([6, 30, 15], center=true);\n    \n    // Antenna coil indication\n    color(\"silver\")\n    for (r = [5:3:14]) {\n        translate([39, 0, 0])\n        rotate_extrude(angle=360, $fn=50)\n        translate([r, 0, 0])\n        square([0.5, 0.5]);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    difference() {\n        color(\"black\")\n        translate([0, -27, -5])\n        cube([12, 4, 6], center=true);\n        \n        // Port opening\n        translate([0, -28, -5])\n        cube([10, 2, 4], center=true);\n    }\n    \n    // Port contacts indication\n    color(\"gold\")\n    translate([0, -28, -6])\n    cube([8, 0.2, 0.5], center=true);\n}\n\n// LED indicators\nmodule status_leds() {\n    // Power LED\n    color(\"green\")\n    translate([-20, 18, 11])\n    cylinder(h=1, d=3, $fn=20);\n    \n    // Scan LED\n    color(\"blue\")\n    translate([20, 18, 11])\n    cylinder(h=1, d=3, $fn=20);\n}\n\n// Wrist strap loop\nmodule strap_loop() {\n    color(\"black\")\n    translate([0, 27, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=5, d=8, $fn=20);\n        cylinder(h=6, d=4, $fn=20);\n    }\n}\n\n// Battery compartment cover\nmodule battery_cover() {\n    difference() {\n        color(\"darkgray\")\n        translate([0, 0, -12])\n        cube([60, 40, 2], center=true);\n        \n        // Screw holes\n        for (x = [-25, 25]) {\n            for (y = [-15, 15]) {\n                translate([x, y, -11])\n                cylinder(h=3, d=3, $fn=20);\n            }\n        }\n    }\n}\n\n// Model label\nmodule device_label() {\n    color(\"black\")\n    translate([0, 0, 11.5])\n    linear_extrude(height=0.2)\n    text(\"RFID-2000\", size=4, halign=\"center\", valign=\"center\");\n}\n\n// Assemble the complete scanner\nunion() {\n    color(\"lightgray\")\n    scanner_body();\n    \n    grip_pattern();\n    lcd_screen();\n    buttons();\n    trigger_button();\n    antenna_window();\n    usb_port();\n    status_leds();\n    strap_loop();\n    battery_cover();\n    device_label();\n}",
    "renders": true
  },
  {
    "electronic_device": "backpack",
    "openscad_code": "// Backpack Electronic Device - GPS Tracker Unit\n// Realistic style, medium complexity\n// Total size ~70mm x 50mm x 25mm\n\n// Main device body\nmodule mainBody() {\n    // Outer shell - rounded rectangle shape\n    difference() {\n        // Main rounded body\n        translate([-35, -25, 0])\n            minkowski() {\n                cube([70, 50, 20]);\n                sphere(3);\n            }\n        \n        // Screen cutout\n        translate([-30, -20, 19])\n            cube([60, 25, 2]);\n            \n        // Button cutouts\n        translate([-25, 5, 19])\n            cube([10, 8, 2]);\n        translate([-10, 5, 19])\n            cube([10, 8, 2]);\n        translate([5, 5, 19])\n            cube([10, 8, 2]);\n    }\n}\n\n// Screen display\nmodule screen() {\n    color([0.1, 0.1, 0.1])\n    translate([-29, -19, 20])\n        cube([58, 23, 0.5]);\n    \n    // Screen content - GPS indicator\n    color([0, 1, 0])\n    translate([-20, -10, 20.6])\n        cube([16, 5, 0.1]);\n    color([0, 1, 0])\n    translate([5, -10, 20.6])\n        cube([16, 5, 0.1]);\n    \n    // Battery indicator bars\n    color([0, 1, 0])\n    for(i = [0:3]) {\n        translate([-20 + i*4, 0, 20.6])\n            cube([3, 6, 0.1]);\n    }\n}\n\n// Buttons\nmodule buttons() {\n    color([0.2, 0.2, 0.2])\n    translate([-24, 6, 20])\n        cube([8, 6, 1]);\n    translate([-9, 6, 20])\n        cube([8, 6, 1]);\n    translate([6, 6, 20])\n        cube([8, 6, 1]);\n}\n\n// USB-C port\nmodule usbPort() {\n    color([0.1, 0.1, 0.1])\n    translate([30, -5, 8])\n        cube([8, 10, 3]);\n}\n\n// Attachment loops for backpack\nmodule backpackLoops() {\n    // Left loop\n    color([0.8, 0.8, 0.8])\n    translate([-42, -15, 12])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=3, $fn=20);\n    \n    // Right loop\n    translate([34, -15, 12])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=3, $fn=20);\n}\n\n// Antenna bump\nmodule antenna() {\n    color([0.7, 0.7, 0.7])\n    translate([0, 25, 15])\n        sphere(6);\n    \n    // Antenna indicator LED\n    color([1, 0, 0])\n    translate([0, 25, 21.5])\n        sphere(1.5);\n}\n\n// Ventilation holes pattern\nmodule ventilationHoles() {\n    color([0.15, 0.15, 0.15])\n    for(y = [-15:5:15]) {\n        for(x = [-25:5:25]) {\n            translate([x, y, 1])\n                cylinder(h=1, r=1.5, $fn=8);\n        }\n    }\n}\n\n// Device label\nmodule deviceLabel() {\n    color([0.9, 0.9, 0.9])\n    translate([-15, -35, 10])\n        cube([30, 5, 0.5]);\n    \n    // Text representation with cubes\n    color([0, 0, 0])\n    translate([-12, -33, 10.6])\n        cube([2, 1, 0.1]);\n    translate([-9, -33, 10.6])\n        cube([1, 3, 0.1]);\n    translate([-7, -33, 10.6])\n        cube([2, 1, 0.1]);\n}\n\n// Assembly\nunion() {\n    color([0.2, 0.2, 0.3])\n    mainBody();\n    \n    screen();\n    buttons();\n    usbPort();\n    backpackLoops();\n    antenna();\n    \n    // Add ventilation on bottom\n    translate([0, 0, 0])\n        ventilationHoles();\n    \n    deviceLabel();\n}",
    "renders": true
  },
  {
    "electronic_device": "satchel",
    "openscad_code": "// Portable Satchel Electronic Device - Realistic Style\n// Dimensions: 80mm x 60mm x 25mm\n\n$fn = 32;\n\n// Main device body\nmodule device_body() {\n    color(\"silver\")\n    difference() {\n        // Main rectangular body\n        cube([80, 60, 25], center = true);\n        \n        // Screen recess\n        translate([0, 10, 12])\n        cube([55, 35, 2], center = true);\n        \n        // Button recesses\n        translate([-25, -20, 12])\n        cube([8, 8, 2], center = true);\n        \n        translate([-10, -20, 12])\n        cube([8, 8, 2], center = true);\n        \n        translate([5, -20, 12])\n        cube([8, 8, 2], center = true);\n        \n        translate([20, -20, 12])\n        cube([8, 8, 2], center = true);\n        \n        // USB-C port\n        translate([35, 0, -12.5])\n        rotate([90, 0, 0])\n        cylinder(h = 10, r1 = 3.5, r2 = 3.5, center = true);\n    }\n}\n\n// Screen assembly\nmodule screen() {\n    color(\"black\")\n    translate([0, 10, 13.5])\n    cube([52, 32, 0.5], center = true);\n    \n    color(\"darkblue\")\n    translate([0, 10, 14])\n    cube([50, 30, 0.2], center = true);\n}\n\n// Buttons\nmodule buttons() {\n    for(x = [-25, -10, 5, 20]) {\n        color(\"darkgray\")\n        translate([x, -20, 13.5])\n        cylinder(h = 1.5, r = 3.5, center = true);\n    }\n}\n\n// USB-C port detail\nmodule usb_port() {\n    color(\"black\")\n    translate([35, 0, -12.5])\n    rotate([90, 0, 0])\n    cylinder(h = 8, r1 = 3, r2 = 3, center = true);\n    \n    color(\"gold\")\n    translate([35, 0, -12.5])\n    rotate([90, 0, 0])\n    cylinder(h = 5, r1 = 1.5, r2 = 1.5, center = true);\n}\n\n// Speaker grilles\nmodule speakers() {\n    color(\"darkgray\")\n    translate([0, 25, 0])\n    difference() {\n        cube([50, 8, 2], center = true);\n        for(i = [-20:5:20]) {\n            translate([i, 25, 1])\n            cylinder(h = 3, r = 1.2, center = true);\n        }\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    color(\"red\")\n    translate([30, -30, 12.5])\n    cylinder(h = 1, r = 2, center = true);\n    \n    color(\"clear\")\n    translate([30, -30, 13])\n    sphere(r = 1.5);\n}\n\n// Antenna line detail\nmodule antenna_lines() {\n    color(\"black\")\n    translate([0, 0, 12.6])\n    for(i = [-30:10:30]) {\n        translate([i, 0, 0])\n        cube([0.5, 58, 0.2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    device_body();\n    screen();\n    buttons();\n    usb_port();\n    speakers();\n    led_indicator();\n    antenna_lines();\n}",
    "renders": true
  },
  {
    "electronic_device": "pouch",
    "openscad_code": "// Realistic medium-complexity pouch-style handheld game console\n// Overall dimensions: 90 x 50 x 18 mm\n\n// Main shell thickness\nwall = 1.8;\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer rounded shell\n        minkowski() {\n            color(\"#333344\") cube([90,50,18], center=true);\n            sphere(r=5, $fn=20);\n        }\n        \n        // Hollow interior\n        translate([0,0,-1]) {\n            minkowski() {\n                color(\"#333344\") cube([90-wall*2,50-wall*2,18-wall], center=true);\n                sphere(r=4, $fn=20);\n            }\n        }\n    }\n}\n\n// Front face plate\nmodule faceplate() {\n    translate([0,0,9-wall/2]) {\n        difference() {\n            color(\"#222233\") cube([88,48,wall], center=true);\n            \n            // Screen cutout\n            translate([0,12,0]) color(\"#111111\") cube([55,35,wall+1], center=true);\n            \n            // Speaker holes left\n            for(x=[-35:-5:5]) {\n                translate([x,-20,0]) cylinder(h=wall+1, r=1.5, $fn=12);\n            }\n            \n            // Speaker holes right\n            for(x=[5:5:35]) {\n                translate([x,-20,0]) cylinder(h=wall+1, r=1.5, $fn=12);\n            }\n            \n            // D-pad cutout\n            translate([-30,15,0]) cylinder(h=wall+1, r=6, $fn=20);\n            \n            // Buttons cutouts\n            translate([30,15,0]) cylinder(h=wall+1, r=4, $fn=20);\n            translate([30,5,0]) cylinder(h=wall+1, r=4, $fn=20);\n            translate([30,-5,0]) cylinder(h=wall+1, r=4, $fn=20);\n            translate([30,-15,0]) cylinder(h=wall+1, r=4, $fn=20);\n            \n            // Select/start buttons\n            translate([-10,-12,0]) cube([15,6,wall+1], center=true);\n            translate([10,-12,0]) cube([15,6,wall+1], center=true);\n        }\n    }\n}\n\n// LCD screen\nmodule screen() {\n    translate([0,12,9-wall/2+0.1]) {\n        color(\"#000022\") cube([52,32,0.5], center=true);\n        translate([0,0,0.3]) color(\"#224488\") cube([50,30,0.1], center=true);\n    }\n}\n\n// D-pad\nmodule dpad() {\n    translate([-30,15,9-wall/2-0.5]) {\n        difference() {\n            color(\"#444455\") cylinder(h=1.5, r=5.5, $fn=20);\n            // Cross shape\n            translate([0,2,0]) cube([2.5,4,2], center=true);\n            translate([0,-2,0]) cube([2.5,4,2], center=true);\n            translate([2,0,0]) cube([4,2.5,2], center=true);\n            translate([-2,0,0]) cube([4,2.5,2], center=true);\n        }\n    }\n}\n\n// Buttons (ABXY)\nmodule buttons() {\n    positions = [[30,15], [30,5], [30,-5], [30,-15]];\n    labels = [\"Y\",\"X\",\"B\",\"A\"];\n    for(i=[0:3]) {\n        translate([positions[i][0], positions[i][1], 9-wall/2-0.5]) {\n            color(\"#cc4455\") cylinder(h=1.5, r=3.5, $fn=20);\n            translate([0,0,1.6]) color(\"#ffdddd\") \n                rotate([0,0,45]) \n                text(labels[i], size=2, h=0.1, font=\"Arial:style=Bold\", center=true);\n        }\n    }\n}\n\n// Start/select buttons\nmodule utility_buttons() {\n    translate([-10,-12,9-wall/2-0.5]) {\n        color(\"#666677\") cube([13,4,1], center=true);\n        translate([0,0,1.1]) color(\"#aaaaaa\") \n            text(\"SELECT\", size=1.5, h=0.1, font=\"Arial\", center=true);\n    }\n    translate([10,-12,9-wall/2-0.5]) {\n        color(\"#666677\") cube([13,4,1], center=true);\n        translate([0,0,1.1]) color(\"#aaaaaa\") \n            text(\"START\", size=1.5, h=0.1, font=\"Arial\", center=true);\n    }\n}\n\n// Charging port\nmodule charging_port() {\n    translate([0,-24,0]) {\n        difference() {\n            color(\"#333344\") cube([12,6,4], center=true);\n            translate([0,0,-1]) color(\"#111111\") cube([10,4,6], center=true);\n        }\n    }\n}\n\n// Headphone jack\nmodule headphone_jack() {\n    translate([-35,-24,0]) {\n        difference() {\n            color(\"#333344\") cylinder(h=6, r=3.5, $fn=20);\n            translate([0,0,-1]) color(\"#111111\") cylinder(h=8, r=2.5, $fn=20);\n        }\n    }\n}\n\n// L/R shoulder buttons\nmodule shoulder_buttons() {\n    // Left shoulder\n    translate([-42,0,9]) {\n        color(\"#444455\") rotate([90,0,0]) cylinder(h=8, r=3, $fn=20);\n    }\n    // Right shoulder\n    translate([42,0,9]) {\n        color(\"#444455\") rotate([90,0,0]) cylinder(h=8, r=3, $fn=20);\n    }\n}\n\n// Assembly\nbody();\nfaceplate();\nscreen();\ndpad();\nbuttons();\nutility_buttons();\ncharging_port();\nheadphone_jack();\nshoulder_buttons();",
    "renders": true
  },
  {
    "electronic_device": "belt",
    "openscad_code": "// Medium-complexity realistic fitness tracker belt clip\n// Overall belt clip 70 mm wide × 30 mm deep × 12 mm high\n// Uses only basic OpenSCAD primitives, transformations, and booleans\n\n// Color palette\n$fa = 1; $fs = 1;\n\nmodule main_body() {\n    color(\"dimgray\")\n    difference() {\n        // Main shell\n        translate([-35, -15, 0])\n            minkowski() {\n                cube([70, 30, 8]);\n                sphere(d = 2);\n            }\n\n        // USB-C port opening\n        translate([28, -13, 4])\n            rotate([0, 90, 0])\n                cylinder(h = 26, d = 8.4, $fn = 24);\n\n        // Reset button hole\n        translate([-28, -13, 4])\n            rotate([0, 90, 0])\n                cylinder(h = 26, d = 2.2, $fn = 12);\n    }\n}\n\nmodule display_area() {\n    color(\"black\")\n    difference() {\n        // Raised bezel\n        translate([-20, -8, 8])\n            cube([40, 16, 2]);\n\n        // Recessed screen\n        translate([-19, -7, 9.8])\n            cube([38, 14, 0.5]);\n    }\n}\n\nmodule screen_glare() {\n    color([0.1, 0.1, 0.1, 0.7])\n    translate([-19, -7, 10.3])\n        cube([38, 14, 0.1]);\n}\n\nmodule side_buttons() {\n    for (y = [-5, 0, 5]) {\n        color(\"silver\")\n        translate([-35.5, y, 8])\n            rotate([90, 0, 0])\n                cylinder(h = 3, d = 3, $fn = 12);\n    }\n}\n\nmodule belt_clip() {\n    color(\"darkgray\")\n    difference() {\n        // Clip body\n        translate([-35, -15, -6])\n            minkowski() {\n                cube([70, 30, 2]);\n                sphere(d = 1);\n            }\n\n        // Spring gap\n        translate([-20, -15, -5])\n            cube([40, 30, 1]);\n\n        // Grip teeth\n        for (i = [-2:2])\n            translate([i * 10, -15, -5])\n                cube([2, 2, 1]);\n    }\n\n    // Spring\n    color(\"lightgray\")\n    translate([0, 0, -5])\n        rotate([0, 90, 0])\n            cylinder(h = 15, d = 2, $fn = 12);\n}\n\nmodule heart_rate_window() {\n    color(\"darkgreen\")\n    translate([0, 10, 0])\n    difference() {\n        // Raised window\n        cylinder(h = 1, d = 10, $fn = 32);\n\n        // LED holes\n        for (a = [0:120:240])\n            rotate([0, 0, a])\n                translate([3, 0, -0.1])\n                    cylinder(h = 1.2, d = 2, $fn = 12);\n    }\n}\n\nmodule logo() {\n    color(\"white\")\n    translate([20, 0, 9])\n    linear_extrude(height = 0.5) {\n        text(\"FIT\", size = 4, halign = \"center\", valign = \"center\");\n    }\n}\n\nmodule charging_contacts() {\n    color(\"gold\")\n    for (x = [-10, 10])\n        translate([x, 13, 0.5])\n            cylinder(h = 0.5, d = 3, $fn = 16);\n}\n\n// Assemble the complete belt fitness tracker\nmain_body();\ndisplay_area();\nscreen_glare();\nside_buttons();\nbelt_clip();\nheart_rate_window();\nlogo();\ncharging_contacts();",
    "renders": true
  },
  {
    "electronic_device": "holster",
    "openscad_code": "// Realistic Radio Holster (Medium Complexity)\n// Fits a typical handheld two-way radio (e.g., Baofeng UV-5R style)\n\n// Parameters\nwall_th = 2.5;      // wall thickness\nclear = 0.5;        // clearance for device\nbelt_w = 45;        // belt slot width\nbelt_h = 6;         // belt slot height\n\n// Radio dimensions (UV-5R)\nradio_w = 58 + clear;\nradio_h = 110 + clear;\nradio_d = 32 + clear;\n\n// Holster body\nmodule holster_body() {\n    difference() {\n        // Outer shell\n        rounded_box([radio_w + 2*wall_th, radio_h + 2*wall_th, radio_d + wall_th + 8], 3);\n        \n        // Inner cavity\n        translate([0, 0, 4])\n            rounded_box([radio_w, radio_h, radio_d + 10], 2);\n        \n        // Top opening\n        translate([0, radio_h/2 + wall_th, 0])\n            cube([radio_w + 2*wall_th + 1, wall_th + 1, radio_d + wall_th + 8 + 1], center=true);\n        \n        // Antenna hole\n        translate([0, -radio_h/2 - 5, radio_d/2 - 5])\n            rotate([90, 0, 0])\n                cylinder(h=20, d=12, $fn=32);\n        \n        // Speaker/mic holes\n        for(i = [0:2])\n            translate([-radio_w/2 - 1, -radio_h/2 + 20 + i*15, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=wall_th + 2, d=8, $fn=16);\n        \n        // Side button access\n        translate([radio_w/2 + 1, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=wall_th + 2, d=20, $fn=32);\n    }\n}\n\n// Belt clip\nmodule belt_clip() {\n    difference() {\n        // Main clip body\n        translate([0, -radio_h/2 - 15, radio_d/2 + 10])\n            rounded_box([belt_w, 30, belt_h + 2*wall_th], 2);\n        \n        // Belt slot\n        translate([0, -radio_h/2 - 15, radio_d/2 + 10 + wall_th])\n            cube([belt_w - 2*wall_th, 25, belt_h], center=true);\n    }\n    \n    // Retention nubs\n    for(i = [-1:1])\n        translate([i * 15, -radio_h/2 - 15, radio_d/2 + 10 + belt_h + wall_th])\n            sphere(d=3, $fn=16);\n}\n\n// Radio representation (for visualization)\nmodule radio_device() {\n    color(\"darkslategray\") {\n        // Main body\n        translate([0, 0, radio_d/2 + 4])\n            rounded_box([radio_w - clear, radio_h - clear, radio_d - clear], 2);\n        \n        // Display\n        color(\"black\")\n            translate([0, radio_h/4, radio_d/2 + 4.5])\n                cube([40, 20, 0.5], center=true);\n        \n        // Keypad\n        color(\"black\")\n            for(y = [0:2])\n                for(x = [0:2])\n                    translate([-15 + x*15, -30 - y*15, radio_d/2 + 4.5])\n                        cube([8, 8, 0.5], center=true);\n        \n        // Antenna\n        color(\"black\")\n            translate([0, -radio_h/2 + 5, radio_d/2 + 4])\n                cylinder(h=60, d=8, $fn=32);\n        \n        // Volume knob\n        color(\"black\")\n            translate([radio_w/2 - 5, 20, radio_d/2 + 4])\n                cylinder(h=8, d=16, $fn=32);\n        \n        // PTT button\n        color(\"red\")\n            translate([radio_w/2 - 5, -20, radio_d/2 + 4])\n                rounded_box([15, 30, 5], 2);\n    }\n}\n\n// Helper module for rounded box\nmodule rounded_box(size, r) {\n    hull() {\n        for(x = [-1, 1])\n            for(y = [-1, 1])\n                for(z = [-1, 1])\n                    translate([x*(size[0]/2 - r), y*(size[1]/2 - r), z*(size[2]/2 - r)])\n                        sphere(r=r, $fn=16);\n    }\n}\n\n// Assembly\ncolor(\"olive\") holster_body();\ncolor(\"olive\") belt_clip();\n%radio_device();",
    "renders": true
  },
  {
    "electronic_device": "quiver",
    "openscad_code": "// OpenSCAD Quiver Electronic Device\n// Medium complexity realistic model\n\n// Color definitions\n$fn = 50;\n\n// Main body module\nmodule quiver_body() {\n    color(\"darkslategray\") {\n        // Main cylindrical body\n        cylinder(h = 80, r1 = 25, r2 = 22, center = false);\n        \n        // Bottom cap\n        translate([0, 0, -1]) {\n            cylinder(h = 3, r = 25.5, center = false);\n        }\n        \n        // Top rim\n        translate([0, 0, 79]) {\n            cylinder(h = 5, r = 23, center = false);\n        }\n    }\n}\n\n// Electronic display panel\nmodule display_panel() {\n    // Panel housing\n    color(\"black\") {\n        translate([28, 0, 40]) {\n            rotate([0, 90, 0]) {\n                cube([30, 35, 3], center = true);\n            }\n        }\n    }\n    \n    // LED display\n    color(\"lime\") {\n        translate([26.5, 0, 40]) {\n            rotate([0, 90, 0]) {\n                cube([28, 30, 2], center = true);\n            }\n        }\n    }\n}\n\n// Control buttons\nmodule control_buttons() {\n    // Power button\n    color(\"red\") {\n        translate([26.5, -12, 35]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 2, r = 4, center = true);\n            }\n        }\n    }\n    \n    // Mode button\n    color(\"blue\") {\n        translate([26.5, -12, 45]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 2, r = 4, center = true);\n            }\n        }\n    }\n    \n    // Up/Down buttons\n    for (i = [-1, 1]) {\n        color(\"silver\") {\n            translate([26.5, 12, 40 + i * 5]) {\n                rotate([0, 90, 0]) {\n                    cube([2, 6, 4], center = true);\n                }\n            }\n        }\n    }\n}\n\n// USB-C charging port\nmodule charging_port() {\n    color(\"black\") {\n        translate([0, -25.5, 10]) {\n            cube([10, 3, 6], center = true);\n        }\n    }\n    \n    // Port indicator LED\n    color(\"orange\") {\n        translate([0, -24, 10]) {\n            sphere(r = 1);\n        }\n    }\n}\n\n// Strap attachments\nmodule strap_attachments() {\n    // Top attachment loops\n    for (angle = [0, 120, 240]) {\n        rotate([0, 0, angle]) {\n            translate([0, 28, 75]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h = 5, r = 3);\n                        translate([0, 0, -1]) {\n                            cylinder(h = 7, r = 1.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Speaker grille pattern\nmodule speaker_grille() {\n    color(\"dimgray\") {\n        translate([0, 25, 30]) {\n            rotate([0, 0, 0]) {\n                cube([40, 2, 20], center = true);\n                \n                // Grille holes\n                for (x = [-15:5:15]) {\n                    for (z = [20:5:40]) {\n                        translate([x, 1, z]) {\n                            cylinder(h = 3, r = 1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Device logo\nmodule device_logo() {\n    color(\"white\") {\n        translate([26.5, 0, 55]) {\n            rotate([0, 90, 0]) {\n                linear_extrude(height = 1) {\n                    text(\"QUIVER\", size = 6, halign = \"center\");\n                }\n            }\n        }\n    }\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    // Access door\n    color(\"darkgray\") {\n        translate([0, 25, 60]) {\n            rotate([0, 0, 0]) {\n                cube([25, 2, 15], center = true);\n            }\n        }\n    }\n    \n    // Hinge detail\n    color(\"black\") {\n        translate([0, 26, 67.5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 25, r = 1);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    quiver_body();\n    display_panel();\n    control_buttons();\n    charging_port();\n    strap_attachments();\n    speaker_grille();\n    device_logo();\n    battery_compartment();\n}",
    "renders": true
  },
  {
    "electronic_device": "proxy",
    "openscad_code": "// Proxy Electronic Device - Wi-Fi Range Extender\n// Medium complexity realistic style\n\n$fn = 50;\n\n// Main colors\ncolor_body = [0.15, 0.15, 0.15];\ncolor_antenna = [0.8, 0.8, 0.8];\ncolor_ports = [0.2, 0.2, 0.2];\ncolor_led = [0, 1, 0];\ncolor_label = [0.9, 0.9, 0.9];\n\nmodule main_body() {\n    color(color_body)\n    union() {\n        // Main housing\n        translate([0, 0, 10])\n        difference() {\n            cube([60, 40, 25], center=true);\n            // Ventilation slots\n            for(i = [-20:10:20])\n                translate([i, 0, 12.5])\n                cube([8, 38, 2], center=true);\n        }\n        \n        // Front face\n        translate([0, 0, 22.5])\n        cube([58, 38, 1], center=true);\n    }\n}\n\nmodule antennas() {\n    color(color_antenna)\n    union() {\n        // Left antenna\n        translate([-35, -15, 25])\n        rotate([0, 0, -30])\n        cylinder(h=25, d=4, center=false);\n        \n        // Right antenna\n        translate([-35, 15, 25])\n        rotate([0, 0, 30])\n        cylinder(h=25, d=4, center=false);\n        \n        // Antenna bases\n        translate([-35, -15, 25])\n        sphere(d=6);\n        translate([-35, 15, 25])\n        sphere(d=6);\n    }\n}\n\nmodule ports() {\n    color(color_ports)\n    translate([30, 0, 15])\n    union() {\n        // Ethernet ports\n        for(y = [-10, 0, 10])\n            translate([0, y, 0])\n            difference() {\n                cube([8, 8, 6], center=true);\n                translate([4, 0, 0])\n                cube([1, 6, 4], center=true);\n            }\n        \n        // Power port\n        translate([0, 15, 0])\n        difference() {\n            cylinder(h=6, d=10, center=true);\n            cylinder(h=7, d=6, center=true);\n        }\n    }\n}\n\nmodule status_indicators() {\n    // LED indicators\n    color(color_led)\n    translate([25, 0, 22.5])\n    union() {\n        // Power LED\n        translate([0, -15, 0])\n        cylinder(h=1, d=3, center=true);\n        \n        // Signal strength LEDs\n        for(i = [0:2])\n            translate([0, -10 + i*5, 0])\n            cylinder(h=1, d=2, center=true);\n    }\n    \n    // WPS button\n    color([0.1, 0.1, 0.1])\n    translate([25, 15, 22.5])\n    cube([5, 5, 1], center=true);\n}\n\nmodule branding() {\n    color(color_label)\n    translate([0, 0, 23])\n    linear_extrude(height=0.5)\n    text(\"WiFi EXTENDER\", size=4, halign=\"center\", valign=\"center\");\n}\n\n// Assembly\nunion() {\n    main_body();\n    antennas();\n    ports();\n    status_indicators();\n    branding();\n}\n\n// Wall mounting bracket\ncolor([0.3, 0.3, 0.3])\ndifference() {\n    translate([0, 0, -2.5])\n    cube([30, 8, 5], center=true);\n    translate([0, 0, -2.5])\n    cylinder(h=5, d=4, center=true);\n}",
    "renders": true
  },
  {
    "electronic_device": "accelerator",
    "openscad_code": "// OpenSCAD model of a realistic USB-C accelerator dongle (e.g. Google Coral)\n// External dimensions: 63 x 23 x 11 mm\n\n// Main body shell\nmodule body() {\n    difference() {\n        color(\"black\")\n        rounded_box([63, 23, 11], 2);  // rounded shell\n        \n        // internal cavity for PCB\n        color(\"black\") \n        translate([1, 1, 1])\n        rounded_box([61, 21, 9], 1.5);\n    }\n}\n\n// Helper: rounded box primitive\nmodule rounded_box(size, r) {\n    hull() {\n        for(dx=[0,size.x], dy=[0,size.y], dz=[0,size.z])\n        translate([dx, dy, dz]) sphere(r);\n    }\n}\n\n// USB-C plug\nmodule usb_c_plug() {\n    translate([-6, 0, 0])\n    difference() {\n        union() {\n            color(\"silver\") {\n                // metal shell\n                cube([12, 15.5, 5], center=true);\n            }\n            color(\"white\") {\n                // plastic tongue\n                translate([0, 0, -1.5])\n                cube([6.5, 7, 2.6], center=true);\n            }\n        }\n        // cavity inside plug\n        translate([0, 0, -1.5])\n        cube([7, 8, 3], center=true);\n    }\n}\n\n// Status LED indicator\nmodule status_led() {\n    translate([55, 5, 1])\n    color(\"green\")\n    cylinder(h = 1, d = 3, $fn = 20);\n}\n\n// Ventilation slots on sides\nmodule vents() {\n    for(y=[-1,1]) {\n        translate([30, y*11, 5.5])\n        rotate([90, 0, 0])\n        for(i=[-8:8]) {\n            translate([i*3, 0, 0])\n            color(\"black\")\n            cube([1.5, 0.6, 1]);\n        }\n    }\n}\n\n// Engraved logo area\nmodule logo() {\n    translate([52, 0, 11.01])\n    color(\"white\")\n    linear_extrude(0.3)\n    text(\"AI\", size=6, font=\"Arial:style=Bold\", halign=\"center\", valign=\"center\");\n}\n\n// Mounting posts for PCB\nmodule pcb_posts() {\n    for(x=[10, 53], y=[5, 18]) {\n        translate([x, y, 1])\n        color(\"black\")\n        cylinder(h = 9, d = 2.2, $fn = 12);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    usb_c_plug();\n    status_led();\n    vents();\n    logo();\n    pcb_posts();\n}",
    "renders": true
  },
  {
    "electronic_device": "injector",
    "openscad_code": "// Electronic Fuel Injector Model\n// Realistic style with medium complexity\n// Approx 75mm length, suitable for 3D printing\n\n$fn = 50;  // Smooth curves\nmodule injector() {\n    // Main body - cylindrical shape\n    color(\"silver\") \n    cylinder(h=50, r1=10, r2=8, center=true);\n    \n    // Top connector - electrical plug\n    translate([0,0,25]) \n    color(\"black\")\n    difference() {\n        cylinder(h=15, r=6, center=true);\n        translate([0,0,-8]) \n        cylinder(h=10, r=4, center=true);\n    }\n    \n    // O-ring grooves (3x)\n    for(z=[-15,0,15]) {\n        translate([0,0,z]) \n        color(\"gray\")\n        difference() {\n            cylinder(h=2, r=10.5, center=true);\n            cylinder(h=3, r=9.5, center=true);\n        }\n    }\n    \n    // Fuel inlet ports (4x)\n    for(angle=[0:90:270]) {\n        rotate([0,0,angle]) \n        translate([0,10,10]) \n        rotate([90,0,0]) \n        color(\"darkgray\")\n        cylinder(h=8, r=3, center=true);\n    }\n    \n    // Nozzle tip\n    translate([0,0,-30]) {\n        color(\"silver\")\n        cylinder(h=15, r1=8, r2=3, center=true);\n        \n        // Spray holes (micro holes)\n        for(angle=[0:60:300]) {\n            rotate([0,0,angle]) \n            translate([2,0,-35]) \n            color(\"black\")\n            cylinder(h=2, r=0.5, center=true);\n        }\n    }\n    \n    // Solenoid housing\n    translate([0,0,15]) \n    color(\"darkblue\") \n    difference() {\n        cylinder(h=10, r=12, center=true);\n        translate([0,0,-6]) \n        cylinder(h=12, r=8, center=true);\n    }\n    \n    // Electrical pins (2x)\n    for(x=[-2,2]) {\n        translate([x,0,32]) \n        color(\"gold\")\n        cylinder(h=5, r=1, center=true);\n    }\n    \n    // Mounting bracket\n    translate([12,0,0]) \n    rotate([0,90,0]) \n    color(\"lightgray\")\n    difference() {\n        cube([20,8,5], center=true);\n        translate([0,0,0]) \n        cylinder(h=6, r=2.5, center=true);\n    }\n    \n    // Part number label\n    translate([0,11,5]) \n    rotate([90,0,0]) \n    color(\"white\")\n    linear_extrude(height=0.5) \n    text(\"EV1-0280\", size=2, halign=\"center\");\n    \n    // Flow direction arrow\n    translate([0,-11,5]) \n    rotate([90,0,180]) \n    color(\"red\")\n    linear_extrude(height=0.5) \n    text(\"→\", size=4, halign=\"center\");\n}\n\n// Render the injector\ninjector();",
    "renders": true
  },
  {
    "electronic_device": "tap",
    "openscad_code": "// Tap electronic payment device - Realistic style, medium complexity\n// Dimensions: 80mm x 50mm x 20mm\n\n// Main colors\n$fn = 50;\n\n// Device body\nmodule device_body() {\n    difference() {\n        // Main rounded body\n        color([0.95, 0.95, 0.95])\n        minkowski() {\n            cube([70, 40, 15], center = true);\n            sphere(2);\n        }\n        \n        // Top screen recess\n        translate([0, 0, 7.5])\n            color([0.1, 0.1, 0.1])\n            cube([45, 25, 3], center = true);\n            \n        // Bottom speaker holes\n        for(y = [-15:5:15]) {\n            translate([-30, y, -7.5])\n                cylinder(h = 4, d = 1.5, $fn = 8);\n        }\n    }\n}\n\n// LCD screen\nmodule screen() {\n    translate([0, 0, 9])\n    color([0, 0, 0])\n    cube([42, 22, 0.5], center = true);\n    \n    // Screen shine effect\n    translate([-15, 8, 9.5])\n    color([1, 1, 1, 0.3])\n    cube([20, 5, 0.1]);\n}\n\n// Capacitive touch button\nmodule touch_button(x, y) {\n    translate([x, y, 8.5])\n    color([0.8, 0.8, 0.8])\n    cylinder(h = 0.5, d = 8, $fn = 32);\n}\n\n// NFC antenna area indicator\nmodule nfc_indicator() {\n    translate([0, 0, 8.5])\n    color([0.2, 0.4, 0.8, 0.5])\n    cube([25, 15, 0.1], center = true);\n    \n    // NFC symbol\n    translate([0, 0, 8.6])\n    color([1, 1, 1])\n    cylinder(h = 0.2, d1 = 12, d2 = 10, center = true, $fn = 3);\n}\n\n// USB-C port\nmodule usb_port() {\n    translate([35, 0, -5])\n    difference() {\n        color([0.1, 0.1, 0.1])\n        cube([8, 8, 3], center = true);\n        \n        translate([0, 0, -1])\n            color([0.15, 0.15, 0.15])\n            cube([6, 2.5, 5], center = true);\n    }\n}\n\n// LED indicators\nmodule led_indicator(x, color_rgb) {\n    translate([x, -18, 7])\n    color(color_rgb)\n    cylinder(h = 1, d = 4, $fn = 16);\n    \n    translate([x, -18, 7.5])\n    color([1, 1, 1, 0.5])\n    sphere(2);\n}\n\n// Rubber feet\nmodule rubber_foot(x, y) {\n    translate([x, y, -9])\n    color([0.2, 0.2, 0.2])\n    cylinder(h = 1, d = 6, $fn = 16);\n}\n\n// Assembly\ndevice_body();\nscreen();\nnfc_indicator();\n\n// Touch buttons\nfor(i = [-1:1]) {\n    touch_button(i * 15, 12);\n}\n\n// LED indicators\nled_indicator(-25, [0, 1, 0]);  // Success LED\nled_indicator(25, [1, 0.5, 0]);  // Processing LED\n\n// USB-C charging port\nusb_port();\n\n// Rubber feet\nrubber_foot(-25, 15);\nrubber_foot(25, 15);\nrubber_foot(-25, -15);\nrubber_foot(25, -15);",
    "renders": true
  },
  {
    "electronic_device": "aggregator",
    "openscad_code": "// Aggregator device - Data collection hub\n// Dimensions: 80x60x25mm\n\n$fn = 50;\n\n// Main body color\ncolor([0.15, 0.15, 0.15]) {\n    difference() {\n        // Main enclosure\n        translate([0, 0, 12.5])\n            cube([80, 60, 25], center=true);\n        \n        // Internal cavity\n        translate([0, 0, 14])\n            cube([74, 54, 22], center=true);\n    }\n}\n\n// Top vent pattern\nmodule vent_holes() {\n    for (x = [-30:10:30]) {\n        for (y = [-20:10:20]) {\n            translate([x, y, 25.1])\n                cylinder(h=1, d=3);\n        }\n    }\n}\n\ndifference() {\n    color([0.15, 0.15, 0.15])\n        translate([0, 0, 0])\n            cube([80, 60, 25], center=true);\n    vent_holes();\n}\n\n// Status LED strip\ncolor([0, 0.8, 0]) {\n    translate([0, 30.1, 15])\n        cube([40, 0.2, 3], center=true);\n}\n\n// LCD display\ncolor([0.1, 0.1, 0.1]) {\n    translate([0, 10, 25.1])\n        cube([50, 20, 0.5], center=true);\n}\n\n// Display bezel\ncolor([0.2, 0.2, 0.2]) {\n    difference() {\n        translate([0, 10, 25.2])\n            cube([52, 22, 0.3], center=true);\n        translate([0, 10, 25.3])\n            cube([48, 18, 0.5], center=true);\n    }\n}\n\n// Ethernet ports\nmodule ethernet_port() {\n    color([0.1, 0.1, 0.1]) {\n        translate([0, 0, 5])\n            cube([15, 12, 10], center=true);\n        color([0.3, 0.3, 0.3])\n            translate([0, -2, 5])\n                cube([13, 8, 8], center=true);\n    }\n}\n\ntranslate([-30, -35, 0])\n    ethernet_port();\n\ntranslate([-10, -35, 0])\n    ethernet_port();\n\n// USB ports\nmodule usb_port() {\n    color([0.15, 0.15, 0.15]) {\n        translate([0, 0, 5])\n            cube([12, 5, 6], center=true);\n        color([0.5, 0.5, 0.5])\n            translate([0, -0.5, 5])\n                cube([10, 2, 4], center=true);\n    }\n}\n\ntranslate([10, -35, 0])\n    usb_port();\n\ntranslate([25, -35, 0])\n    usb_port();\n\n// Power connector\ncolor([0.1, 0.1, 0.1]) {\n    translate([35, -35, 5])\n        cube([12, 12, 8], center=true);\n    color([0.4, 0.4, 0.4])\n        translate([35, -35, 5])\n            cylinder(h=8, d=8, center=true);\n}\n\n// Antenna connectors\nmodule antenna_connector() {\n    color([0.8, 0.8, 0.8]) {\n        translate([0, 0, 0])\n            cylinder(h=8, d=8);\n        translate([0, 0, 8])\n            cylinder(h=3, d=6);\n    }\n}\n\ntranslate([35, 35, 0])\n    antenna_connector();\n\ntranslate([35, 20, 0])\n    antenna_connector();\n\n// Reset button\ncolor([0.2, 0.2, 0.2]) {\n    translate([0, -30, 25.1])\n        cylinder(h=0.5, d=4);\n    color([0.9, 0.1, 0.1])\n        translate([0, -30, 25.2])\n            cylinder(h=0.3, d=2);\n}\n\n// Mounting feet\nmodule foot() {\n    color([0.3, 0.3, 0.3])\n        cylinder(h=2, d=6);\n}\n\ntranslate([-35, -25, 0])\n    foot();\n\ntranslate([35, -25, 0])\n    foot();\n\ntranslate([-35, 25, 0])\n    foot();\n\ntranslate([35, 25, 0])\n    foot();\n\n// Brand label\ncolor([0.7, 0.7, 0.7]) {\n    translate([0, 0, 25.1])\n        cube([25, 8, 0.2], center=true);\n}",
    "renders": true
  },
  {
    "electronic_device": "collector",
    "openscad_code": "// Collector electronic device - Realistic style, medium complexity\n// A vintage game handheld with cartridge slot, screen, buttons and speaker\n\n$fn = 36;\n\n// Main body dimensions\nbody_w = 85;\nbody_h = 55;\nbody_d = 25;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_button = [0.8, 0.8, 0.8];\ncolor_accent = [0.9, 0.2, 0.2];\n\nmodule main_body() {\n    color(color_body)\n    union() {\n        // Main shell\n        difference() {\n            rounded_cube([body_w, body_h, body_d], 5);\n            \n            // Hollow interior\n            translate([0, 0, -2])\n                rounded_cube([body_w-4, body_h-4, body_d], 4);\n            \n            // Cartridge slot\n            translate([0, body_h/2 - 3, body_d/2])\n                cube([30, 6, 5], center=true);\n        }\n        \n        // Front face with details\n        translate([0, 0, body_d/2 - 0.5])\n            cube([body_w-0.5, body_h-0.5, 1], center=true);\n    }\n}\n\nmodule rounded_cube(size, r) {\n    translate([-size[0]/2, -size[1]/2, -size[2]/2])\n    minkowski() {\n        cube([size[0]-2*r, size[1]-2*r, size[2]-2*r]);\n        sphere(r);\n    }\n}\n\nmodule screen() {\n    color(color_screen)\n    difference() {\n        // Screen bezel\n        translate([0, 10, body_d/2])\n            cube([45, 35, 1.5], center=true);\n        \n        // Screen display area\n        translate([0, 10, body_d/2 + 0.8])\n            cube([40, 30, 0.5], center=true);\n    }\n    \n    // Screen glass reflection\n    color([0.3, 0.3, 0.5, 0.4])\n    translate([5, 15, body_d/2 + 1.5])\n    cube([15, 10, 0.1]);\n}\n\nmodule d_pad() {\n    color(color_button)\n    translate([-25, -5, body_d/2 + 1])\n    union() {\n        // Center piece\n        cube([10, 10, 2], center=true);\n        \n        // Four directional buttons\n        translate([-7, 0, 0]) cube([4, 10, 1.5], center=true);\n        translate([7, 0, 0]) cube([4, 10, 1.5], center=true);\n        translate([0, -7, 0]) cube([10, 4, 1.5], center=true);\n        translate([0, 7, 0]) cube([10, 4, 1.5], center=true);\n    }\n}\n\nmodule action_buttons() {\n    color(color_accent)\n    for(i = [0:1]) {\n        translate([25, 5 + i*10, body_d/2 + 1])\n            cylinder(h=2, r1=4, r2=3.5);\n    }\n}\n\nmodule start_select() {\n    color(color_button)\n    for(i = [0:1]) {\n        translate([-5 + i*10, -15, body_d/2 + 1])\n            rounded_cube([8, 3, 1.5], 1.5);\n    }\n}\n\nmodule speaker_grill() {\n    color([0.1, 0.1, 0.1])\n    translate([0, -25, body_d/2])\n    difference() {\n        cube([30, 8, 1], center=true);\n        for(i = [-4:4]) {\n            translate([i*3, 0, 0.5])\n                cube([1, 6, 1], center=true);\n        }\n    }\n}\n\nmodule power_led() {\n    color([0, 1, 0])\n    translate([35, -15, body_d/2 + 1])\n    cylinder(h=1, r=2);\n}\n\nmodule cartridge() {\n    color([0.8, 0.7, 0.2])\n    translate([0, body_h/2 - 10, body_d/2 + 5])\n    cube([28, 20, 3], center=true);\n}\n\n// Assembly\nmain_body();\nscreen();\nd_pad();\naction_buttons();\nstart_select();\nspeaker_grill();\npower_led();\ntranslate([0, 0, 5]) cartridge();",
    "renders": true
  },
  {
    "electronic_device": "distributor",
    "openscad_code": "// Electronic Distributor Module - RFID Tag Distributor\n// Realistic style, medium complexity\n// Features: 8 output channels, status LEDs, OLED display, Ethernet port, power connector\n\n$fn = 50;  // Smooth curves\n\n// Main colors\ncolor_case = [0.2, 0.2, 0.2];      // Dark gray\ncolor_led = [0, 1, 0];             // Green\ncolor_display = [0.1, 0.1, 0.1];   // Black\ncolor_metal = [0.7, 0.7, 0.7];     // Silver\ncolor_port = [0.8, 0.8, 0.8];      // Light gray\n\n// Device dimensions\ncase_length = 80;\ncase_width = 50;\ncase_height = 25;\nwall_thickness = 2;\n\nmodule distributor_case() {\n    color(color_case)\n    difference() {\n        // Main body\n        cube([case_length, case_width, case_height], center=true);\n        \n        // Top recess for display\n        translate([0, 0, case_height/2 - 1])\n            cube([case_length - 20, case_width - 10, 2], center=true);\n        \n        // Bottom ventilation slots\n        for(i = [-3:1:3]) {\n            translate([i * 10, 0, -case_height/2 - 0.5])\n                cube([2, case_width - 10, 3], center=true);\n        }\n    }\n}\n\nmodule status_leds() {\n    // 8 status LEDs along front edge\n    for(i = [0:7]) {\n        translate([case_length/2 - 10 - i * 8, case_width/2 - 3, case_height/2 - 2])\n            color(color_led)\n            cylinder(h=1, r=2);\n    }\n}\n\nmodule oled_display() {\n    translate([0, 0, case_height/2])\n    color(color_display)\n    cube([case_length - 30, 15, 1], center=true);\n    \n    // Display bezel\n    translate([0, 0, case_height/2 + 0.5])\n    color(color_case)\n    difference() {\n        cube([case_length - 28, 17, 1], center=true);\n        translate([0, 0, -0.5])\n            cube([case_length - 30, 15, 2], center=true);\n    }\n}\n\nmodule ethernet_port() {\n    // RJ45 connector\n    translate([-case_length/2 + 5, 0, 0])\n    rotate([0, 90, 0])\n    color(color_port)\n    difference() {\n        cube([8, 12, 8], center=true);\n        translate([0, -4.5, 0])\n            cube([6, 9, 6], center=true);\n    }\n}\n\nmodule power_connector() {\n    // Barrel jack power connector\n    translate([-case_length/2 + 5, -15, 0])\n    rotate([0, 90, 0])\n    color(color_metal)\n    difference() {\n        cylinder(h=8, r=6);\n        cylinder(h=10, r=2);\n    }\n}\n\nmodule mounting_holes() {\n    // 4 mounting holes for screws\n    for(pos = [[-1,-1], [1,-1], [-1,1], [1,1]]) {\n        translate([pos[0] * (case_length/2 - 5), pos[1] * (case_width/2 - 5), 0])\n            cylinder(h=case_height, r=2, center=true);\n    }\n}\n\nmodule channel_outputs() {\n    // 8 output channels on back\n    for(i = [0:7]) {\n        translate([case_length/2 - 10 - i * 8, -case_width/2, 0])\n        color(color_port)\n        difference() {\n            cube([4, 5, 8], center=true);\n            translate([0, -3, 0])\n                cylinder(h=10, r=1.5, center=true);\n        }\n    }\n}\n\nmodule antenna_indicator() {\n    // WiFi antenna symbol on top\n    translate([case_length/2 - 10, case_width/2 - 10, case_height/2 + 0.5])\n    color(color_led)\n    union() {\n        cube([8, 2, 0.5]);\n        translate([4, 0, 0]) sphere(r=2);\n    }\n}\n\n// Assemble the complete distributor\ndifference() {\n    union() {\n        distributor_case();\n        status_leds();\n        oled_display();\n        ethernet_port();\n        power_connector();\n        channel_outputs();\n        antenna_indicator();\n    }\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "electronic_device": "routerblade",
    "openscad_code": "// Router Blade - 1U Rack-mount Network Router\n// Realistic style, medium complexity\n\n// Main dimensions (mm)\nblade_width = 90;\nblade_height = 44.5;  // 1U height\nblade_depth = 95;\n\n// Material thickness\nwall_thick = 2;\n\n// Colors\nmetal_color = [0.7, 0.7, 0.75];\nblack_color = [0.1, 0.1, 0.1];\nled_color = [0, 1, 0];\nblue_color = [0, 0.3, 0.8];\n\n// Main blade body\nmodule blade_body() {\n    color(metal_color)\n    difference() {\n        // Main chassis\n        cube([blade_width, blade_depth, blade_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thick/2])\n        cube([blade_width-wall_thick*2, blade_depth-wall_thick*2, blade_height-wall_thick], center=true);\n        \n        // Front vents\n        for(i = [-2:2]) {\n            translate([i*15, -blade_depth/2+1, 0])\n            cube([8, 2, 30], center=true);\n        }\n    }\n}\n\n// Front panel with ports and indicators\nmodule front_panel() {\n    color(black_color)\n    translate([0, -blade_depth/2+wall_thick/2, 0])\n    cube([blade_width, wall_thick, blade_height], center=true);\n    \n    // Ethernet ports (8x)\n    for(i = [0:7]) {\n        color(blue_color)\n        translate([-35 + i*10, -blade_depth/2+wall_thick/2, 5])\n        cylinder(h=wall_thick+0.2, r=3.5, $fn=20);\n        \n        // LED indicators\n        if(i < 4) {\n            color(led_color)\n            translate([-35 + i*10, -blade_depth/2+wall_thick/2, 15])\n            sphere(r=1, $fn=8);\n        }\n    }\n    \n    // Console port\n    color(black_color)\n    translate([38, -blade_depth/2+wall_thick/2, 0])\n    cylinder(h=wall_thick+0.2, r=4, $fn=20);\n    \n    // Status LEDs\n    color([1, 0, 0])\n    translate([35, -blade_depth/2+wall_thick/2, 15])\n    sphere(r=1.5, $fn=8);\n    \n    color(led_color)\n    translate([35, -blade_depth/2+wall_thick/2, 10])\n    sphere(r=1.5, $fn=8);\n}\n\n// Rear panel with power and management\nmodule rear_panel() {\n    color(black_color)\n    translate([0, blade_depth/2-wall_thick/2, 0])\n    cube([blade_width, wall_thick, blade_height], center=true);\n    \n    // Power connector\n    color(black_color)\n    translate([0, blade_depth/2-wall_thick/2, 0])\n    cube([15, wall_thick+0.2, 10], center=true);\n    \n    // Ventilation holes\n    for(i = [-1:1]) {\n        translate([i*20, blade_depth/2-wall_thick/2, 0])\n        cube([10, wall_thick+0.2, 30], center=true);\n    }\n}\n\n// Mounting ears\nmodule mounting_ears() {\n    for(side = [-1, 1]) {\n        color(metal_color)\n        translate([side*(blade_width/2+5), 0, 0])\n        cube([10, 20, blade_height], center=true);\n        \n        // Mounting holes\n        translate([side*(blade_width/2+5), 0, 15])\n        cylinder(h=11, r=2.5, $fn=20);\n        translate([side*(blade_width/2+5), 0, -15])\n        cylinder(h=11, r=2.5, $fn=20);\n    }\n}\n\n// Top heatsink fins\nmodule heatsink() {\n    color(metal_color)\n    for(i = [-2:2]) {\n        translate([i*15, 0, blade_height/2+2])\n        cube([8, blade_depth-10, 4]);\n    }\n}\n\n// Model assembly\nunion() {\n    blade_body();\n    front_panel();\n    rear_panel();\n    mounting_ears();\n    heatsink();\n}",
    "renders": true
  },
  {
    "electronic_device": "switchblade",
    "openscad_code": "// Switchblade Electronic Vape Device - Realistic Style\n// 3D Printable with medium complexity (approx 90mm x 20mm x 12mm)\n\n// Main dimensions\nbody_length = 85;\nbody_width = 18;\nbody_height = 10;\nblade_length = 40;\nblade_thickness = 0.8;\nblade_width = 8;\n\n// Colors\nbody_color = \"Silver\";\nblade_color = \"Gray\";\nscreen_color = \"Black\";\nbutton_color = \"Red\";\naccent_color = \"DarkGray\";\n\n// Main body module\nmodule body() {\n    color(body_color) {\n        // Main body shell\n        difference() {\n            hull() {\n                // Rounded top\n                translate([0, 0, body_height/2])\n                    scale([body_length/2, body_width/2, body_height/2])\n                    sphere($fn=30);\n                // Flat bottom\n                translate([0, 0, -body_height/4])\n                    cube([body_length, body_width, body_height/2], center=true);\n            }\n            \n            // Hollow interior\n            translate([0, 0, -2])\n                scale([body_length-4, body_width-4, body_height-2])\n                cube(center=true);\n        }\n        \n        // Button panel\n        translate([body_length/2 - 8, 0, body_height/2 + 0.5])\n            color(button_color)\n            cube([6, 12, 2], center=true);\n        \n        // USB-C port\n        translate([-body_length/2, 0, -body_height/4])\n            color(\"Black\")\n            cube([2, 6, 3], center=true);\n    }\n}\n\n// Display screen\nmodule screen() {\n    color(screen_color) {\n        translate([body_length/4, 0, body_height/2 + 0.1])\n            cube([20, 8, 0.5], center=true);\n    }\n    \n    // Screen details\n    color(\"White\") {\n        for(i = [-2:2]) {\n            translate([body_length/4 + i*3, 2, body_height/2 + 0.6])\n                cube([0.5, 0.5, 0.1]);\n            translate([body_length/4 + i*3, 0, body_height/2 + 0.6])\n                cube([0.5, 0.5, 0.1]);\n            translate([body_length/4 + i*3, -2, body_height/2 + 0.6])\n                cube([0.5, 0.5, 0.1]);\n        }\n    }\n}\n\n// Retractable blade (simulating cartridge)\nmodule blade() {\n    color(blade_color) {\n        // Blade/cartridge body\n        translate([body_length/2 - blade_length/2, 0, 0])\n            difference() {\n                cube([blade_length, blade_width, blade_thickness*2], center=true);\n                // Hollow cartridge\n                translate([0, 0, 0])\n                    cube([blade_length-2, blade_width-2, blade_thickness*2 - 1], center=true);\n            }\n        \n        // Tip detail\n        color(\"Black\") {\n            translate([body_length/2 + blade_length/2 - 2, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h=blade_width, r=2, $fn=20);\n        }\n    }\n}\n\n// Airflow holes\nmodule airflow_holes() {\n    color(accent_color) {\n        for(i = [0:4]) {\n            translate([body_length/2 - 10 - i*5, body_width/2 + 1, 0])\n                rotate([0, 90, 0])\n                cylinder(h=2, r=1, $fn=8);\n        }\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    color(\"Green\") {\n        translate([-body_length/2 + 5, body_width/2 + 0.5, 0])\n            sphere(r=1.5, $fn=12);\n    }\n}\n\n// Grip texture\nmodule grip_texture() {\n    color(accent_color) {\n        for(i = [-3:3]) {\n            for(j = [-1:1]) {\n                translate([i*8, j*5, -body_height/2 - 0.5])\n                    cube([6, 2, 0.5], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nbody();\nscreen();\nblade();\nairflow_holes();\nled_indicator();\ngrip_texture();",
    "renders": true
  },
  {
    "electronic_device": "coreswitch",
    "openscad_code": "// CoreSwitch Electronic Device - Realistic Style\n// Dimensions: 90mm x 65mm x 25mm\n\n// Main body\nmodule body() {\n    color(\"darkslategray\")\n    difference() {\n        // Main chassis\n        cube([90, 65, 25], center=true);\n        \n        // Ventilation slots on top\n        for(x = [-35:12:35]) {\n            translate([x, 0, 12.5])\n            cube([8, 60, 2], center=true);\n        }\n        \n        // Side vents\n        for(y = [-25:10:25]) {\n            translate([45, y, 0])\n            rotate([0, 90, 0])\n            cube([8, 3, 20], center=true);\n        }\n    }\n}\n\n// Front panel with ports\nmodule front_panel() {\n    color(\"black\")\n    difference() {\n        // Panel frame\n        translate([0, -32.5, 0])\n        cube([86, 3, 20], center=true);\n        \n        // RJ45 ports (8 ports)\n        for(x = [-30:8:26]) {\n            translate([x, -31, 5])\n            cube([6, 2, 8], center=true);\n        }\n        \n        // SFP ports (2 ports)\n        for(x = [-15:30:15]) {\n            translate([x, -31, -5])\n            cube([8, 2, 6], center=true);\n        }\n    }\n}\n\n// LED indicators\nmodule leds() {\n    // Status LEDs above ports\n    for(x = [-30:8:26]) {\n        color(\"green\")\n        translate([x, -30, 12])\n        cylinder(h=1, r=1.5);\n    }\n    \n    // Power LED\n    color(\"blue\")\n    translate([-40, -30, 12])\n    cylinder(h=1, r=2);\n    \n    // Activity LEDs\n    for(x = [-30:8:26]) {\n        color(\"yellow\")\n        translate([x, -30, 10])\n        cylinder(h=1, r=1);\n    }\n}\n\n// Management port\nmodule management_port() {\n    color(\"black\")\n    translate([-40, -31, 0])\n    cube([4, 2, 6], center=true);\n    \n    // Console port label area\n    color(\"lightgray\")\n    translate([-40, -30, -8])\n    cube([6, 0.5, 3], center=true);\n}\n\n// Mounting brackets\nmodule brackets() {\n    color(\"silver\")\n    // Left bracket\n    translate([-47, 0, 0])\n    difference() {\n        cube([4, 60, 20], center=true);\n        for(y = [-20:15:20]) {\n            translate([0, y, 0])\n            cylinder(h=6, r=2.5, center=true);\n        }\n    }\n    \n    // Right bracket (mirrored)\n    translate([47, 0, 0])\n    mirror([1, 0, 0])\n    difference() {\n        cube([4, 60, 20], center=true);\n        for(y = [-20:15:20]) {\n            translate([0, y, 0])\n            cylinder(h=6, r=2.5, center=true);\n        }\n    }\n}\n\n// Brand label\nmodule label() {\n    color(\"white\")\n    translate([0, 25, 13])\n    cube([30, 10, 0.5], center=true);\n    \n    color(\"red\")\n    translate([0, 25, 13.5])\n    cube([25, 2, 0.2], center=true);\n}\n\n// Cooling fan vents (rear)\nmodule rear_vents() {\n    color(\"black\")\n    translate([0, 32.5, 0])\n    difference() {\n        cube([60, 3, 15], center=true);\n        for(x = [-25:5:25]) {\n            translate([x, 33, 0])\n            cube([2, 2, 13], center=true);\n        }\n    }\n}\n\n// Power connector\nmodule power_connector() {\n    color(\"black\")\n    translate([35, 32.5, 5])\n    cube([10, 3, 8], center=true);\n    \n    // Power LED indicator\n    color(\"red\")\n    translate([35, 32.5, 10])\n    cylinder(h=1, r=1.5);\n}\n\n// Assemble the complete switch\nunion() {\n    body();\n    front_panel();\n    leds();\n    management_port();\n    brackets();\n    label();\n    rear_vents();\n    power_connector();\n}",
    "renders": true
  },
  {
    "electronic_device": "edgeswitch",
    "openscad_code": "// EdgeSwitch 24-Port PoE Network Switch - Realistic Medium Complexity\n// Overall dimensions: 95mm x 44.5mm x 221mm (1U rack mount)\n\n// Colors\ncolor_case = [0.1, 0.1, 0.1];  // Dark gray metal\ncolor_faceplate = [0.15, 0.15, 0.15];  // Slightly lighter\ncolor_ports = [0.05, 0.05, 0.05];  // Black\ncolor_leds = [0.2, 1, 0.2];  // Green\ncolor_logo = [0.1, 0.1, 0.1];  // Dark\ncolor_screen = [0.05, 0.05, 0.05];  // LCD black\ncolor_screenbg = [0.2, 0.2, 0.2];  // Screen surround\n\n// Main case\nmodule main_case() {\n    difference() {\n        // Main body\n        color(color_case)\n        cube([95, 221, 44.5], center=false);\n        \n        // Front face recess\n        translate([1, 1, 0])\n        cube([93, 219, 5], center=false);\n        \n        // Ventilation slots on top\n        for(x = [10:10:85]) {\n            for(y = [10:10:210]) {\n                translate([x, y, 42.5])\n                cube([2, 8, 2], center=false);\n            }\n        }\n    }\n}\n\n// Front panel/faceplate\nmodule front_panel() {\n    difference() {\n        color(color_faceplate)\n        translate([0, 0, 0])\n        cube([95, 221, 5], center=false);\n        \n        // Port holes\n        for(row = [0:1]) {\n            for(i = [0:11]) {\n                translate([5 + i*7.5, 10 + row*100, 2])\n                cube([6, 4, 3], center=false);\n            }\n        }\n        \n        // LED holes\n        for(row = [0:1]) {\n            for(i = [0:11]) {\n                translate([8.75 + i*7.5, 16 + row*100, 2])\n                cylinder(h=3, d=1.5, $fn=8);\n            }\n        }\n        \n        // LCD screen window\n        translate([20, 105, 2])\n        cube([55, 15, 3], center=false);\n        \n        // Console port\n        translate([85, 105, 2])\n        cube([8, 8, 3], center=false);\n    }\n}\n\n// Ethernet ports\nmodule ethernet_ports() {\n    for(row = [0:1]) {\n        for(i = [0:11]) {\n            color(color_ports)\n            translate([5.5 + i*7.5, 11 + row*100, 2.5]) {\n                difference() {\n                    cube([5, 2.5, 2], center=false);\n                    translate([1.25, 0.5, -0.1])\n                    cube([2.5, 1.5, 2.2], center=false);\n                }\n            }\n        }\n    }\n}\n\n// LED indicators\nmodule leds() {\n    for(row = [0:1]) {\n        for(i = [0:11]) {\n            color(color_leds)\n            translate([8.75 + i*7.5, 16 + row*100, 2.1])\n            sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\n// LCD screen\nmodule lcd_screen() {\n    color(color_screenbg)\n    translate([20, 105, 2.1])\n    cube([55, 15, 2.9], center=false);\n    \n    color(color_screen)\n    translate([22, 107, 5])\n    cube([51, 11, 0.1], center=false);\n}\n\n// Console port\nmodule console_port() {\n    color(color_ports)\n    translate([86.5, 106.5, 2.5])\n    cube([5, 5, 2], center=false);\n    \n    // RJ45 pins\n    for(i = [0:7]) {\n        color([0.8, 0.8, 0.8])\n        translate([87 + i*0.5, 107, 4.6])\n        cube([0.3, 0.5, 0.2], center=false);\n    }\n}\n\n// Mounting ears\nmodule mounting_ears() {\n    for(side = [-1:2:1]) {\n        color(color_case)\n        translate([side == -1 ? -5 : 95, 0, 0]) {\n            cube([5, 221, 44.5], center=false);\n            \n            // Mounting holes\n            translate([side == -1 ? 2.5 : 2.5, 15, 22.25])\n            rotate([90, 0, 0])\n            cylinder(h=5, d=5.5, $fn=16);\n            \n            translate([side == -1 ? 2.5 : 2.5, 206, 22.25])\n            rotate([90, 0, 0])\n            cylinder(h=5, d=5.5, $fn=16);\n        }\n    }\n}\n\n// Ubiquiti logo\nmodule logo() {\n    color(color_logo)\n    translate([2, 100, 5.1])\n    cube([15, 20, 0.5], center=false);\n}\n\n// Assembly\nmain_case();\nfront_panel();\nethernet_ports();\nleds();\nlcd_screen();\nconsole_port();\nmounting_ears();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "tor",
    "openscad_code": "// TOR Router - Medium complexity, realistic style\n// Dimensions in mm, optimized for 3D printing\n\n$fn = 32;\n\n// Main device color\ndevice_color = [0.15, 0.15, 0.15];\n\n// LED colors\nstatus_led_color = [0, 1, 0];\nactivity_led_color = [0, 0.5, 1];\n\n// Main device body\nmodule tor_router() {\n    difference() {\n        // Main enclosure - rounded rectangle\n        color(device_color) \n        minkowski() {\n            cube([80, 60, 25], center = true);\n            sphere(2);\n        }\n        \n        // Top ventilation slots\n        for (i = [-30:10:30]) {\n            translate([i, 0, 12.5]) \n            rotate([0, 0, 0])\n            cube([8, 55, 2], center = true);\n        }\n        \n        // Side ventilation holes\n        for (i = [-30:15:30]) {\n            translate([40, i, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 5, r = 2, center = true);\n        }\n        \n        // Bottom label recess\n        translate([0, 0, -13])\n        cube([40, 30, 1], center = true);\n    }\n}\n\n// Front face with ports and indicators\nmodule front_face() {\n    difference() {\n        // Front panel\n        translate([0, 30, 0])\n        cube([80, 2, 25], center = true);\n        \n        // Ethernet ports (4x)\n        for (i = [-30, -10, 10, 30]) {\n            translate([i, 30.5, 5])\n            cube([8, 1, 8], center = true);\n        }\n        \n        // USB port\n        translate([30, 30.5, -5])\n        cube([8, 1, 4], center = true);\n        \n        // Power jack\n        translate([-35, 30.5, -5])\n        cylinder(h = 1, r = 4, center = true);\n        \n        // Reset button hole\n        translate([0, 30.5, -8])\n        cylinder(h = 1, r = 1.5, center = true);\n    }\n}\n\n// LED indicators\nmodule leds() {\n    // Power LED\n    translate([-15, 29, 8])\n    color(status_led_color)\n    sphere(1.5);\n    \n    // Activity LED\n    translate([15, 29, 8])\n    color(activity_led_color)\n    sphere(1.5);\n}\n\n// Antenna connectors\nmodule antenna_connectors() {\n    // RP-SMA connectors\n    for (pos = [[-35, 30, 12], [35, 30, 12]]) {\n        translate(pos)\n        rotate([90, 0, 0])\n        cylinder(h = 5, r1 = 4, r2 = 3, center = false);\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    for (x = [-30, 30])\n    for (y = [-20, 20]) {\n        translate([x, y, -14])\n        cylinder(h = 2, r = 3, center = false);\n    }\n}\n\n// Label text (simulated with raised elements)\nmodule label() {\n    translate([0, 0, -12.5])\n    color([0.8, 0.8, 0.8])\n    for (i = [-10:5:10]) {\n        translate([i, 0, 0])\n        cube([2, 1, 0.5], center = true);\n    }\n}\n\n// Assemble the device\ntor_router();\nfront_face();\nleds();\nantenna_connectors();\nfeet();\nlabel();",
    "renders": true
  },
  {
    "electronic_device": "spine",
    "openscad_code": "$fn = 64;\n\n// Spine Electronic Device - Realistic Style, Medium Complexity\n// Total height ~80mm, suitable for 3D printing\n\n// Main colors\ncolor_screen = [0.1, 0.1, 0.2];\ncolor_body = [0.3, 0.3, 0.3];\ncolor_button = [0.15, 0.15, 0.15];\ncolor_led = [0, 1, 0];\ncolor_usbc = [0.8, 0.8, 0.8];\n\n// Main body segments\nmodule spine_body() {\n    // Central core tube\n    color(color_body) difference() {\n        cylinder(h = 80, d = 12);\n        \n        // Hollow center for wiring\n        translate([0, 0, -1]) cylinder(h = 82, d = 8);\n    }\n    \n    // Segmented vertebrae discs\n    for(i = [0:3:18]) {\n        translate([0, 0, i * 4.2]) {\n            // Main disc\n            color(color_body) cylinder(h = 3.5, d = 18);\n            \n            // Attachment points\n            for(j = [0:60:300]) {\n                rotate([0, 0, j]) {\n                    translate([8.5, 0, 1.75]) {\n                        color(color_body) cylinder(h = 3, d = 2.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Electronics housing\nmodule electronics_housing() {\n    translate([0, 0, 75]) {\n        // Main housing\n        color(color_body) difference() {\n            cube([20, 8, 12], center = true);\n            translate([0, 0, -1]) cube([18, 6, 14], center = true);\n        }\n        \n        // OLED display window\n        color(color_screen) translate([0, 4.1, 4]) cube([16, 0.2, 8], center = true);\n        \n        // Control buttons\n        for(b = [0:1]) {\n            color(color_button) translate([-5 + b * 10, 4.1, 0]) {\n                cube([3, 0.5, 2], center = true);\n            }\n        }\n        \n        // Status LEDs\n        for(led = [0:2]) {\n            color(color_led) translate([-6 + led * 6, 0, 6]) {\n                sphere(d = 1.5);\n            }\n        }\n        \n        // USB-C port\n        color(color_usbc) translate([0, -4.5, -2]) {\n            cube([8, 1, 2.5], center = true);\n        }\n    }\n}\n\n// Flexible circuit traces\nmodule circuit_traces() {\n    for(i = [0:3:18]) {\n        color([0.1, 0.1, 0.1]) translate([0, 0, i * 4.2 + 1.5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 0.5, d = 1);\n            }\n        }\n    }\n    \n    // Main trace to electronics\n    color([0.1, 0.1, 0.1]) translate([0, 0, 75]) {\n        cylinder(h = 5, d = 1);\n    }\n}\n\n// Mounting clips\nmodule mounting_clips() {\n    for(i = [0:3:18]) {\n        translate([0, 0, i * 4.2 + 1.75]) {\n            for(angle = [0:120:240]) {\n                rotate([0, 0, angle]) {\n                    translate([9.5, 0, 0]) {\n                        color(color_body) difference() {\n                            cube([4, 2, 1.5], center = true);\n                            translate([0, 0, -1]) cube([3.5, 1.5, 3], center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    spine_body();\n    electronics_housing();\n    circuit_traces();\n    mounting_clips();\n}",
    "renders": true
  },
  {
    "electronic_device": "fabric",
    "openscad_code": "// Fabric electronic device - a flexible fitness tracker band\n// Dimensions: 70mm x 25mm x 12mm\n\n// Main color scheme\nband_color = [0.2, 0.2, 0.2];  // Dark gray fabric\nscreen_color = [0, 0, 0];      // Black display\naccent_color = [0.8, 0.2, 0.2]; // Red accent\n\n// Overall scale factor for 3D printing\nscale_factor = 1;\n\n// Main module\nmodule fabric_tracker() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Flexible band base\n        color(band_color) {\n            difference() {\n                // Main band body\n                rounded_cube([70, 25, 3], 3);\n                \n                // Wrist strap holes\n                for(i = [0:4]) {\n                    translate([10 + i*12, -2.5, 0])\n                        cylinder(h=4, r=2, $fn=20);\n                }\n                \n                // Charging port recess\n                translate([3, 10, 0])\n                    cube([6, 5, 1.5]);\n            }\n        }\n        \n        // Fabric texture pattern\n        fabric_texture();\n        \n        // Electronic module housing\n        color([0.3, 0.3, 0.3]) {\n            translate([25, 7.5, 3])\n                cube([20, 10, 4]);\n        }\n        \n        // Display screen\n        color(screen_color) {\n            translate([27, 9.5, 7.1])\n                cube([16, 6, 0.1]);\n        }\n        \n        // Screen bezel\n        color([0.5, 0.5, 0.5]) {\n            translate([26.5, 9, 7])\n                cube([17, 7, 0.5]);\n        }\n        \n        // Side buttons\n        color(accent_color) {\n            translate([45, 7.5, 4.5])\n                cylinder(h=3, r=2, $fn=16);\n            translate([45, 15.5, 4.5])\n                cylinder(h=3, r=1.5, $fn=16);\n        }\n        \n        // Heart rate sensor window\n        color([0.1, 0.1, 0.1]) {\n            translate([35, 12.5, 0])\n                cylinder(h=1, r=4, $fn=32);\n        }\n        \n        // LED indicators\n        color([0, 1, 0]) {\n            translate([30, 12.5, 7.2])\n                sphere(r=0.5, $fn=16);\n        }\n        color([1, 1, 0]) {\n            translate([40, 12.5, 7.2])\n                sphere(r=0.5, $fn=16);\n        }\n    }\n}\n\n// Helper module for rounded cubes\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(dx = [0, size[0]])\n            for(dy = [0, size[1]])\n                for(dz = [0, size[2]]) {\n                    translate([dx, dy, dz])\n                        sphere(r=radius, $fn=16);\n                }\n    }\n}\n\n// Fabric weave texture\nmodule fabric_texture() {\n    for(x = [5:5:65]) {\n        for(y = [2:2:23]) {\n            color([0.25, 0.25, 0.25]) {\n                translate([x, y, 3.1])\n                    cube([0.5, 1, 0.2]);\n            }\n        }\n    }\n    \n    for(y = [5:5:20]) {\n        for(x = [2:2:68]) {\n            color([0.15, 0.15, 0.15]) {\n                translate([x, y, 3.3])\n                    cube([1, 0.5, 0.2]);\n            }\n        }\n    }\n}\n\n// Render the device\nfabric_tracker();",
    "renders": true
  },
  {
    "electronic_device": "backplane",
    "openscad_code": "// Realistic Backplane for electronic device\n// Features: PCB base, mounting holes, card slots, power connector, status LEDs, silkscreen labels\n// Sized for 3D printing: 80x60x8mm\n\n// Constants\nbackplane_width = 80;\nbackplane_height = 60;\nbackplane_thickness = 1.6;\n\n// PCB color\n$fn = 32;\n\nmodule backplane_pcb() {\n    color(\"darkgreen\")\n    cube([backplane_width, backplane_height, backplane_thickness], center=true);\n}\n\nmodule mounting_holes() {\n    hole_d = 3.2;\n    hole_positions = [\n        [5, 5],\n        [backplane_width-5, 5],\n        [5, backplane_height-5],\n        [backplane_width-5, backplane_height-5]\n    ];\n    \n    difference() {\n        children();\n        for(pos = hole_positions) {\n            translate([pos[0]-backplane_width/2, pos[1]-backplane_height/2, 0])\n            cylinder(d=hole_d, h=backplane_thickness+2, center=true);\n        }\n    }\n}\n\nmodule card_slots() {\n    slot_width = 5;\n    slot_length = 10;\n    slot_depth = 1;\n    pitch = 8;\n    num_slots = 8;\n    \n    color(\"gold\")\n    for(i = [0:num_slots-1]) {\n        translate([0, (i-num_slots/2+0.5)*pitch, backplane_thickness/2])\n        cube([slot_length, slot_width, slot_depth], center=true);\n    }\n}\n\nmodule power_connector() {\n    conn_width = 15;\n    conn_height = 8;\n    conn_thickness = 5;\n    \n    translate([backplane_width/2-conn_width/2-5, 0, backplane_thickness/2+conn_thickness/2])\n    color(\"black\")\n    cube([conn_width, conn_height, conn_thickness], center=true);\n    \n    // Connector pins\n    pin_width = 1.5;\n    pin_height = 2;\n    pin_thickness = 0.5;\n    \n    color(\"silver\")\n    for(i = [-1, 0, 1]) {\n        translate([backplane_width/2-conn_width/2-5, i*2, backplane_thickness/2+conn_thickness+pin_thickness/2])\n        cube([pin_width, pin_height, pin_thickness], center=true);\n    }\n}\n\nmodule status_leds() {\n    led_d = 2;\n    led_pitch = 6;\n    num_leds = 3;\n    \n    for(i = [0:num_leds-1]) {\n        translate([-backplane_width/2+10, (i-num_leds/2+0.5)*led_pitch, backplane_thickness/2+led_d/2])\n        color(\"red\")\n        sphere(d=led_d);\n    }\n}\n\nmodule silkscreen_labels() {\n    label_height = 0.1;\n    \n    // PCB label\n    translate([-backplane_width/2+10, backplane_height/2-10, backplane_thickness/2+label_height/2])\n    color(\"white\")\n    cube([20, 4, label_height], center=true);\n    \n    // Power label\n    translate([backplane_width/2-12, 10, backplane_thickness/2+label_height/2])\n    color(\"white\")\n    cube([8, 4, label_height], center=true);\n}\n\nmodule ground_plane() {\n    // Copper pour on back\n    translate([0, 0, -backplane_thickness/2-0.05])\n    color(\"copper\")\n    cube([backplane_width-2, backplane_height-2, 0.1], center=true);\n}\n\n// Main assembly\nunion() {\n    mounting_holes() backplane_pcb();\n    \n    card_slots();\n    \n    power_connector();\n    \n    status_leds();\n    \n    silkscreen_labels();\n    \n    ground_plane();\n}",
    "renders": true
  },
  {
    "electronic_device": "midplane",
    "openscad_code": "// Midplane Electronic Device - Realistic Style\n\n// Overall dimensions\nlength = 80;\nwidth = 40;\nheight = 10;\nwall_thickness = 2;\nslot_width = 4;\nslot_height = 6;\n\n// Color definitions\n$fn = 32;\n\nmodule midplane_base() {\n    // Main PCB substrate\n    color([0.1, 0.6, 0.1]) // Green PCB color\n    difference() {\n        cube([length, width, height], center=true);\n        \n        // Central cutout for airflow\n        translate([0, 0, height/2 - wall_thickness])\n            cube([length * 0.7, width * 0.6, wall_thickness * 2], center=true);\n    }\n}\n\nmodule connector_slots() {\n    // Generate edge connector slots\n    for(i = [-3:3]) {\n        translate([i * 10, width/2, 0])\n            cube([slot_width, slot_height, height + 0.1], center=true);\n    }\n    for(i = [-3:3]) {\n        translate([i * 10, -width/2, 0])\n            cube([slot_width, slot_height, height + 0.1], center=true);\n    }\n}\n\nmodule copper_traces() {\n    // Top layer traces\n    for(i = [-3:3]) {\n        color([0.8, 0.5, 0.1]) // Copper color\n        translate([i * 10, 0, height/2 - 0.1])\n            cube([1, width * 0.8, 0.2], center=true);\n    }\n    \n    // Ground plane\n    color([0.8, 0.5, 0.1])\n    translate([0, 0, -height/2 + 0.1])\n        cube([length * 0.9, width * 0.9, 0.2], center=true);\n}\n\nmodule mounting_holes() {\n    // Mounting holes at corners\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (length/2 - 5), y * (width/2 - 5), 0])\n                cylinder(h=height + 0.1, r=1.5, center=true);\n        }\n    }\n}\n\nmodule silkscreen_labels() {\n    // Component designators\n    color([0.9, 0.9, 0.9])\n    translate([0, 0, height/2 + 0.05])\n        cube([length * 0.8, 1, 0.1], center=true);\n}\n\nmodule power_connector() {\n    // 4-pin power connector\n    translate([length/2 - 8, 0, height/2])\n    union() {\n        color([0.2, 0.2, 0.2])\n        cube([6, 8, 4], center=false);\n        \n        // Connector pins\n        for(i = [-1.5:1.5]) {\n            color([0.8, 0.8, 0.8])\n            translate([3, i * 2, 2])\n                cylinder(h=3, r=0.5, center=false);\n        }\n    }\n}\n\nmodule status_leds() {\n    // Status indicator LEDs\n    for(i = [-2:2]) {\n        translate([i * 8, -width/2 + 4, height/2 + 0.5])\n        color([1, 0, 0])\n        sphere(r=0.8);\n    }\n}\n\n// Assemble the midplane\nunion() {\n    difference() {\n        midplane_base();\n        connector_slots();\n        mounting_holes();\n    }\n    \n    copper_traces();\n    silkscreen_labels();\n    power_connector();\n    status_leds();\n}",
    "renders": true
  },
  {
    "electronic_device": "interconnect",
    "openscad_code": "// Raspberry Pi Compute Module 4 IO Board interconnect (realistic style)\n// Overall dimensions: 85mm x 56mm x 19mm\n\n$fn = 64;\n\n// Main board color\ncolor(\"darkgreen\") \ndifference() {\n    // Main PCB\n    translate([0,0,1.6]) cube([85,56,1.6], center=true);\n    \n    // Mounting holes\n    for (x = [-34, 34]) {\n        for (y = [-23, 23]) {\n            translate([x,y,1.6]) cylinder(h=3.2, d=2.7, center=true);\n        }\n    }\n}\n\n// PCB silkscreen layer\ncolor(\"white\", 0.8) {\n    // Function labels\n    translate([0,22,3.2]) cube([20,1,0.1], center=true);\n    translate([0,-22,3.2]) cube([15,1,0.1], center=true);\n}\n\n// CM4 socket (board-to-board connector)\nmodule cm4_socket() {\n    // Socket body\n    color(\"black\") \n    translate([0,0,1.6]) cube([60,45,4], center=true);\n    \n    // Connector pins\n    color(\"gold\") \n    for (i = [-27:27]) {\n        translate([i, -20, 3.6]) cylinder(h=2, d=0.6);\n        translate([i, 20, 3.6]) cylinder(h=2, d=0.6);\n    }\n}\ncm4_socket();\n\n// USB 2.0 connectors (dual stacked)\nmodule usb_connector() {\n    color(\"black\") {\n        // Lower port\n        translate([-30, -28, 0]) cube([12,8,7], center=false);\n        // Upper port\n        translate([-30, -28, 7]) cube([12,8,7], center=false);\n    }\n    // Internal metal shield\n    color(\"silver\") {\n        translate([-29, -27, 1]) cube([10,6,4.5], center=false);\n        translate([-29, -27, 8]) cube([10,6,4.5], center=false);\n    }\n}\nusb_connector();\n\n// Gigabit Ethernet jack\nmodule ethernet_jack() {\n    color(\"black\") \n    translate([30, -28, 0]) cube([15,13,13], center=false);\n    \n    // LED indicators\n    color(\"yellow\") translate([31, -27, 11]) cube([2,1,1]);\n    color(\"green\") translate([34, -27, 11]) cube([2,1,1]);\n    \n    // Internal opening\n    color(\"silver\") \n    translate([32, -27, 2]) cube([8,8,8], center=false);\n}\nethernet_jack();\n\n// HDMI connectors (full size)\nmodule hdmi_connector() {\n    color(\"black\") {\n        translate([30, 28, 0]) cube([15,12,10], center=false);\n    }\n    // Metal shell\n    color(\"silver\") \n    translate([31, 29, 1]) cube([12,10,8], center=false);\n}\nhdmi_connector();\n\n// Micro USB power connector\nmodule power_connector() {\n    color(\"black\") \n    translate([-30, 28, 0]) cube([8,7,5], center=false);\n    \n    // Center contact\n    color(\"silver\") \n    translate([-26, 29, 2.5]) cube([1,5,0.5], center=false);\n}\npower_connector();\n\n// GPIO header (40-pin)\nmodule gpio_header() {\n    color(\"black\") \n    translate([0, 0, 5.6]) cube([51,5,8.5], center=true);\n    \n    // Individual pins\n    color(\"gold\") \n    for (i = [-20:2:20]) {\n        translate([i, 2.5, 9.85]) cylinder(h=2.5, d=0.64);\n        translate([i, -2.5, 9.85]) cylinder(h=2.5, d=0.64);\n    }\n}\ngpio_header();\n\n// Status LEDs\nmodule status_leds() {\n    color(\"green\") translate([38, 15, 5.6]) sphere(d=2);\n    color(\"red\") translate([38, 12, 5.6]) sphere(d=2);\n    color(\"blue\") translate([38, 9, 5.6]) sphere(d=2);\n}\nstatus_leds();\n\n// Micro SD card slot\nmodule sd_slot() {\n    color(\"black\") \n    translate([0, 28, 0]) cube([15,12,2], center=false);\n    \n    // Beveled edge\n    color(\"black\") \n    translate([0, 28, 2]) cube([15,12,0.5], center=false);\n}\nsd_slot();\n\n// PCB standoffs for mounting\nmodule standoffs() {\n    color(\"silver\") \n    for (x = [-34, 34]) {\n        for (y = [-23, 23]) {\n            translate([x,y,0]) cylinder(h=3.2, d=5.5, center=false);\n        }\n    }\n}\nstandoffs();",
    "renders": true
  },
  {
    "electronic_device": "crossbar",
    "openscad_code": "// Realistic Crossbar Electronic Device - Medium Complexity\n// 3D printable with no overhangs, includes electronic features\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\n// Main dimensions\nbody_width = 85;\nbody_height = 45;\nbody_depth = 15;\nscreen_width = 60;\nscreen_height = 35;\nborder_radius = 3;\nwall_thickness = 2;\n\n// LED indicators\nindicator_diameter = 3;\nindicator_spacing = 8;\n\n// Buttons\nbutton_width = 6;\nbutton_height = 3;\nbutton_depth = 2;\nbutton_spacing = 12;\n\n// Ports\nusb_width = 12;\nusb_height = 5;\nethernet_width = 15;\nethernet_height = 8;\n\n// Mounting holes\nhole_diameter = 3.5;\nhole_offset = 5;\n\nmodule rounded_cube(size, radius) {\n    hull() {\n        for (x = [radius, size.x - radius])\n            for (y = [radius, size.y - radius])\n                for (z = [radius, size.z - radius])\n                    translate([x, y, z])\n                        sphere(r = radius);\n    }\n}\n\nmodule body() {\n    difference() {\n        color([0.15, 0.15, 0.15]) // Dark gray\n        rounded_cube([body_width, body_depth, body_height], border_radius);\n        \n        // Screen cutout\n        translate([(body_width - screen_width)/2, wall_thickness, (body_height - screen_height)/2])\n            cube([screen_width, wall_thickness + 0.1, screen_height]);\n    }\n}\n\nmodule screen() {\n    translate([(body_width - screen_width)/2, wall_thickness + 0.1, (body_height - screen_height)/2])\n        color([0.05, 0.05, 0.05]) // Black\n        cube([screen_width, 0.5, screen_height]);\n}\n\nmodule indicators() {\n    for (i = [0:2]) {\n        translate([body_width/2 + (i - 1)*indicator_spacing, wall_thickness + 0.5, body_height - 8])\n            color([0.9, 0.1, 0.1]) // Red\n            cylinder(h = 0.3, d = indicator_diameter);\n    }\n}\n\nmodule buttons() {\n    for (i = [0:1]) {\n        translate([body_width/2 + (i - 0.5)*button_spacing, wall_thickness + 0.1, 8])\n            union() {\n                color([0.8, 0.8, 0.8]) // Light gray\n                cube([button_width, button_depth, button_height], center = true);\n                color([0.2, 0.2, 0.2]) // Dark button top\n                translate([0, 0, button_height/2 + 0.1])\n                    cube([button_width - 2, button_depth - 1, 0.5], center = true);\n            }\n    }\n}\n\nmodule ports() {\n    // USB ports\n    for (i = [0:1]) {\n        translate([10 + i*20, body_depth - wall_thickness, body_height/2 + 5])\n            color([0.1, 0.1, 0.1]) // Black\n            cube([usb_width, wall_thickness + 0.1, usb_height]);\n    }\n    \n    // Ethernet port\n    translate([body_width - 25, body_depth - wall_thickness, body_height/2 - 4])\n        color([0.1, 0.1, 0.1]) // Black\n        cube([ethernet_width, wall_thickness + 0.1, ethernet_height]);\n}\n\nmodule mounting_holes() {\n    for (x = [hole_offset, body_width - hole_offset])\n        for (z = [hole_offset, body_height - hole_offset]) {\n            translate([x, body_depth/2, z])\n                rotate([0, 90, 0])\n                    cylinder(h = body_depth, d = hole_diameter, $fn = 16);\n        }\n}\n\nmodule logo() {\n    translate([body_width/2, body_depth - 0.1, body_height - 12])\n        rotate([90, 0, 0])\n            linear_extrude(height = 0.3)\n                text(\"XB\", size = 6, halign = \"center\", valign = \"center\");\n}\n\nmodule ventilation_slots() {\n    for (i = [0:4]) {\n        translate([15 + i*12, body_depth - wall_thickness, 5])\n            color([0.1, 0.1, 0.1]) // Black slots\n            cube([2, wall_thickness + 0.1, 8]);\n    }\n}\n\n// Main assembly\nunion() {\n    difference() {\n        body();\n        mounting_holes();\n    }\n    \n    screen();\n    indicators();\n    buttons();\n    ports();\n    ventilation_slots();\n    \n    // Logo\n    color([0.7, 0.7, 0.7]) // Silver\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "fabricextender",
    "openscad_code": "// Fabric Extender 3D Model - Realistic Style, Medium Complexity\n// Based on typical fabric extender dimensions and features\n\n// Main dimensions (in mm)\nlength = 75;\nwidth = 45;\nheight = 18;\nwall_thickness = 2;\n\n// Colors\ncolor_enclosure = [0.2, 0.2, 0.2];  // Dark gray\ncolor_ports = [0.1, 0.1, 0.1];    // Black\ncolor_led = [1, 0, 0];            // Red\ncolor_buttons = [0.3, 0.3, 0.3];  // Medium gray\ncolor_screen = [0, 0, 0];         // Black\ncolor_label = [0.8, 0.8, 0.8];    // Light gray\n\n// Create the main enclosure\nmodule enclosure() {\n    color(color_enclosure)\n    difference() {\n        // Main body\n        cube([length, width, height], center = true);\n        \n        // Hollow out the inside\n        translate([0, 0, 1])\n        cube([length - 2*wall_thickness, width - 2*wall_thickness, height - 1], center = true);\n        \n        // Port cutouts on front\n        translate([length/2 + 1, -15, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 10, d1 = 8, d2 = 6);\n        \n        translate([length/2 + 1, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 10, d1 = 8, d2 = 6);\n        \n        translate([length/2 + 1, 15, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 10, d1 = 8, d2 = 6);\n        \n        // Port cutouts on back\n        translate([-length/2 - 1, -15, 0])\n        rotate([0, -90, 0])\n        cylinder(h = 10, d1 = 8, d2 = 6);\n        \n        translate([-length/2 - 1, 0, 0])\n        rotate([0, -90, 0])\n        cylinder(h = 10, d1 = 8, d2 = 6);\n        \n        translate([-length/2 - 1, 15, 0])\n        rotate([0, -90, 0])\n        cylinder(h = 10, d1 = 8, d2 = 6);\n    }\n}\n\n// LED indicators\nmodule leds() {\n    for(x = [-25, -15, -5, 5, 15, 25]) {\n        color(color_led)\n        translate([x, width/2 - 2, height/2 - 1])\n        cylinder(h = 1, d = 3);\n    }\n}\n\n// Ventilation holes\nmodule vents() {\n    for(i = [-3:3]) {\n        for(j = [-1:1]) {\n            translate([i * 10, j * 10, 0])\n            cube([2, 2, height/2], center = true);\n        }\n    }\n}\n\n// Control buttons\nmodule buttons() {\n    color(color_buttons)\n    // Reset button\n    translate([length/2 - 8, width/2 - 5, height/2 - 1])\n    cylinder(h = 2, d = 4);\n    \n    // Mode button\n    translate([length/2 - 8, -width/2 + 5, height/2 - 1])\n    cylinder(h = 2, d = 4);\n}\n\n// LCD screen\nmodule screen() {\n    color(color_screen)\n    translate([0, 0, height/2 - 0.5])\n    cube([30, 12, 1]);\n    \n    // Screen bezel\n    color(color_enclosure)\n    translate([0, 0, height/2])\n    difference() {\n        cube([32, 14, 0.5], center = true);\n        translate([0, 0, -0.1])\n        cube([30, 12, 0.7], center = true);\n    }\n}\n\n// Mounting brackets\nmodule brackets() {\n    color(color_enclosure)\n    // Left bracket\n    translate([-length/2 - 5, 0, -height/2 + 2])\n    cube([10, 30, 4]);\n    \n    // Right bracket\n    translate([length/2 + 5, 0, -height/2 + 2])\n    cube([10, 30, 4]);\n    \n    // Mounting holes\n    color([1, 1, 1])\n    translate([-length/2 - 5, 10, -height/2 + 2])\n    cylinder(h = 5, d = 3);\n    \n    translate([-length/2 - 5, -10, -height/2 + 2])\n    cylinder(h = 5, d = 3);\n    \n    translate([length/2 + 5, 10, -height/2 + 2])\n    cylinder(h = 5, d = 3);\n    \n    translate([length/2 + 5, -10, -height/2 + 2])\n    cylinder(h = 5, d = 3);\n}\n\n// Label area\nmodule label() {\n    color(color_label)\n    translate([0, width/2 + 1, 0])\n    cube([40, 2, 8], center = true);\n}\n\n// Main assembly\nenclosure();\nleds();\nbuttons();\nscreen();\nbrackets();\nlabel();\n\n// Ventilation pattern on top\ndifference() {\n    translate([0, 0, height/2 - 0.1])\n    cube([length - 10, width - 10, 0.2], center = true);\n    \n    vents();\n}",
    "renders": true
  },
  {
    "electronic_device": "uplink",
    "openscad_code": "// Uplink Electronic Device - Realistic Style, Medium Complexity\n// Dimensions: 80mm x 40mm x 15mm\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Outer shell\n        color(\"darkslategray\")\n        rounded_box([80, 40, 15], 3);\n        \n        // Ventilation slots on top\n        for (x = [-30, -15, 0, 15, 30]) {\n            translate([x, 0, 7.5])\n                cube([10, 38, 1], center=true);\n        }\n        \n        // Antenna cutout\n        translate([40, 20, 7.5])\n            rotate([0, 45, 0])\n                cube([8, 8, 20], center=true);\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(size, radius) {\n    hull() {\n        for (x = [-1, 1])\n        for (y = [-1, 1])\n        for (z = [-1, 1])\n            translate([x*(size[0]/2-radius), y*(size[1]/2-radius), z*(size[2]/2-radius)])\n                sphere(r=radius);\n    }\n}\n\n// Status LEDs\nmodule status_leds() {\n    for (i = [-2, 0, 2]) {\n        translate([i*15, -15, 7.6])\n            color(\"red\")\n            cylinder(h=1, r=2, $fn=16);\n    }\n}\n\n// LCD display\nmodule lcd_display() {\n    color(\"black\")\n    translate([0, 5, 7.6])\n        cube([40, 15, 0.5], center=true);\n    \n    // Screen bezel\n    color(\"gray20\")\n    translate([0, 5, 7.5])\n        cube([42, 17, 1], center=true);\n}\n\n// Navigation buttons\nmodule control_buttons() {\n    // D-pad\n    for (x = [-1, 0, 1])\n    for (y = [-1, 0, 1])\n        if (x == 0 || y == 0) {\n            translate([x*6, y*6, 7.6])\n                color(\"dimgray\")\n                cylinder(h=1, r=2, $fn=16);\n        }\n    \n    // Action buttons\n    for (i = [0, 1]) {\n        translate([15 + i*8, -10, 7.6])\n            color(\"red\")\n            cylinder(h=1, r=3, $fn=16);\n    }\n}\n\n// Antenna assembly\nmodule antenna() {\n    translate([40, 20, 7.5])\n        rotate([0, 45, 0])\n            color(\"silver\")\n            cylinder(h=20, r=2, $fn=12);\n    \n    // Antenna base\n    translate([40, 20, 7.5])\n        color(\"black\")\n        cylinder(h=5, r=4, $fn=12);\n}\n\n// USB-C port\nmodule usb_port() {\n    translate([35, -20.5, 0])\n        color(\"black\")\n        cube([10, 1, 4], center=true);\n}\n\n// Ethernet port\nmodule ethernet_port() {\n    translate([-35, -20.5, 0])\n        color(\"black\")\n        difference() {\n            cube([14, 1, 8], center=true);\n            translate([0, 0, 2])\n                cube([12, 1, 4], center=true);\n        }\n}\n\n// Bottom case with feet\nmodule bottom_case() {\n    difference() {\n        color(\"darkslategray\")\n        rounded_box([80, 40, 2], 3);\n        \n        // Label area\n        translate([0, 10, -1])\n            cube([30, 15, 1], center=true);\n    }\n    \n    // Rubber feet\n    for (x = [-30, 30])\n    for (y = [-15, 15]) {\n        translate([x, y, -1.5])\n            color(\"black\")\n            cylinder(h=1.5, r=2, $fn=16);\n    }\n}\n\n// Assembly\nmain_body();\ntranslate([0, 0, -8.5]) bottom_case();\nstatus_leds();\nlcd_display();\ncontrol_buttons();\nantenna();\nusb_port();\nethernet_port();",
    "renders": true
  },
  {
    "electronic_device": "downlink",
    "openscad_code": "// Downlink Electronic Device (Realistic Style, Medium Complexity)\n// 3D printable model with no overhangs, wall thickness 1.2mm\n\n// Main dimensions\nlength = 85;\nwidth = 55;\nheight = 12;\n\n// Colors\ncase_color = \"DarkSlateGray\";\nscreen_color = \"black\";\nbutton_color = \"dimgray\";\nled_color = \"red\";\nport_color = \"silver\";\nantenna_color = \"black\";\n\n// Main body\nmodule main_body() {\n    color(case_color)\n    difference() {\n        // Base chassis\n        cube([length, width, height], center=true);\n        \n        // Top recess for screen\n        translate([0, 0, height/2 - 0.5])\n            cube([length - 8, width - 8, 1], center=true);\n        \n        // Side ventilation slots\n        for (i = [-30:10:30]) {\n            translate([length/2 - 1, i, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=2, r=1.5, center=true);\n        }\n        \n        // USB-C port opening\n        translate([length/2 - 3, 0, -height/2 + 3])\n            cube([6, 8, 6], center=true);\n    }\n}\n\n// Display screen\nmodule display() {\n    color(screen_color)\n    translate([0, 0, height/2 - 0.3])\n        cube([length - 12, width - 12, 0.5], center=true);\n    \n    // Screen bezel\n    color(case_color)\n    translate([0, 0, height/2 - 0.6])\n        cube([length - 10, width - 10, 0.3], center=true);\n}\n\n// Control buttons\nmodule buttons() {\n    for (pos = [[-length/4, width/4], [0, width/4], [length/4, width/4]]) {\n        color(button_color)\n        translate([pos[0], pos[1], height/2 + 0.5])\n            cylinder(h=1.5, r=3, center=true);\n    }\n    \n    // Power button\n    color(\"darkred\")\n    translate([-length/3, -width/3, height/2 + 0.5])\n        cylinder(h=1.5, r=2.5, center=true);\n}\n\n// Status LEDs\nmodule status_leds() {\n    for (i = [-1, 0, 1]) {\n        color(led_color)\n        translate([i * 10, 0, height/2 + 0.2])\n            cylinder(h=0.5, r=1, center=true);\n        \n        // LED cover\n        color(\"darkred\")\n        translate([i * 10, 0, height/2 + 0.7])\n            sphere(r=1.2);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    color(port_color)\n    translate([length/2 - 1, 0, -height/2 + 3])\n        cube([4, 6, 4], center=true);\n    \n    // Port surround\n    color(case_color)\n    translate([length/2 - 1.5, 0, -height/2 + 3])\n        cube([5, 7, 5], center=true);\n}\n\n// Antenna connectors\nmodule antenna_connectors() {\n    for (i = [-1, 1]) {\n        color(antenna_color)\n        translate([i * (length/2 - 5), width/2 - 2, 0])\n            rotate([90, 0, 0])\n                cylinder(h=4, r=2.5, center=true);\n        \n        // Connector base\n        color(case_color)\n        translate([i * (length/2 - 5), width/2 - 2, 0])\n            rotate([90, 0, 0])\n                cylinder(h=2, r=3.5, center=true);\n    }\n}\n\n// Mounting points\nmodule mounting_points() {\n    for (pos = [[length/2 - 8, width/2 - 8], [-length/2 + 8, width/2 - 8],\n                 [length/2 - 8, -width/2 + 8], [-length/2 + 8, -width/2 + 8]]) {\n        translate([pos[0], pos[1], 0])\n            cylinder(h=height + 2, r=2.5, center=true);\n    }\n}\n\n// Device label\nmodule device_label() {\n    color(\"white\")\n    translate([0, -width/3, height/2 - 0.1])\n        cube([20, 4, 0.1], center=true);\n}\n\n// Assembly\nmain_body();\ndisplay();\nbuttons();\nstatus_leds();\nusb_port();\nantenna_connectors();\nmounting_points();\ndevice_label();",
    "renders": true
  },
  {
    "electronic_device": "stack",
    "openscad_code": "// Raspberry Pi 4 Stack - Realistic Style, Medium Complexity\n// Overall dimensions: 85mm x 56mm x 50mm\n\n// Main board\nmodule main_board() {\n    color(\"green\")\n    difference() {\n        cube([85, 56, 1.6]);\n        \n        // Mounting holes\n        for(x = [3.5, 81.5], y = [3.5, 52.5]) {\n            translate([x, y, -0.1])\n            cylinder(h=2, d=2.7);\n        }\n    }\n}\n\n// USB ports\nmodule usb_ports() {\n    color(\"black\")\n    for(i = [0:1]) {\n        translate([0, 20 + i*12, 1.6])\n        cube([13, 12, 10]);\n    }\n}\n\n// Ethernet port\nmodule ethernet_port() {\n    color(\"black\")\n    translate([0, 32, 1.6])\n    cube([15, 16, 13]);\n}\n\n// USB-C power port\nmodule usbc_port() {\n    color(\"black\")\n    translate([0, 42, 1.6])\n    cube([8, 8, 7]);\n}\n\n// HDMI ports\nmodule hdmi_ports() {\n    color(\"black\")\n    for(i = [0:1]) {\n        translate([0, 6 + i*8, 1.6])\n        cube([14, 7, 6]);\n    }\n}\n\n// GPIO header\nmodule gpio_header() {\n    color(\"black\")\n    translate([49, 0, 1.6])\n    cube([5, 21, 8.5]);\n    \n    // Pins\n    color(\"gold\")\n    for(row = [0:1]) {\n        for(col = [0:19]) {\n            translate([50 + row*2.54, 2.54 + col*2.54, 10.1])\n            cylinder(h=6, d=0.6);\n        }\n    }\n}\n\n// CPU heatsink\nmodule heatsink() {\n    color(\"silver\")\n    translate([30, 30, 2.5])\n    difference() {\n        cube([14, 14, 6]);\n        \n        // Fins\n        for(i = [1:6]) {\n            translate([2*i, 1, 2])\n            cube([1, 12, 4]);\n        }\n    }\n}\n\n// MicroSD slot\nmodule sd_slot() {\n    color(\"black\")\n    translate([81, 0, 1.6])\n    cube([4, 15, 1.5]);\n}\n\n// Status LEDs\nmodule leds() {\n    color(\"green\")\n    translate([40, 0, 2.1])\n    sphere(d=2);\n    \n    color(\"red\")\n    translate([43, 0, 2.1])\n    sphere(d=2);\n}\n\n// Case bottom\nmodule case_bottom() {\n    color(\"gray\", 0.8)\n    difference() {\n        translate([-2, -2, -2])\n        cube([89, 60, 4]);\n        \n        // Ventilation slots\n        for(i = [5:5:75]) {\n            translate([i, -1, -2.1])\n            cube([3, 62, 2]);\n        }\n    }\n}\n\n// Case top\nmodule case_top() {\n    color(\"gray\", 0.8)\n    difference() {\n        translate([-2, -2, 46])\n        cube([89, 60, 4]);\n        \n        // GPIO cutout\n        translate([48, -1, 46])\n        cube([8, 23, 5]);\n        \n        // Ventilation\n        for(i = [5:5:75]) {\n            translate([i, -1, 50.1])\n            cube([3, 62, 2]);\n        }\n        \n        // Status LED holes\n        translate([40, 56, 47])\n        cylinder(h=3, d=2);\n        \n        translate([43, 56, 47])\n        cylinder(h=3, d=2);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) main_board();\ntranslate([0, 0, 0]) usb_ports();\ntranslate([0, 0, 0]) ethernet_port();\ntranslate([0, 0, 0]) usbc_port();\ntranslate([0, 0, 0]) hdmi_ports();\ntranslate([0, 0, 0]) gpio_header();\ntranslate([0, 0, 0]) heatsink();\ntranslate([0, 0, 0]) sd_slot();\ntranslate([0, 0, 0]) leds();\ntranslate([0, 0, 0]) case_bottom();\ntranslate([0, 0, 0]) case_top();",
    "renders": true
  },
  {
    "electronic_device": "array",
    "openscad_code": "// 3D-printable 8×8 LED Array Module – realistic & medium complexity\n// Overall size: 80 mm × 80 mm × 25 mm (fits most FDM printers)\n\n// ---- PARAMETERS ----\npitch   = 9.5;     // center-to-center LED spacing\nmodule_w = 8 * pitch;\nmodule_h = 8 * pitch;\nwall_t  = 2.0;     // printable wall thickness\nled_d   = 5.0;     // LED diameter\nled_h   = 1.5;     // LED protrusion\npcb_t   = 1.6;     // PCB thickness\ncase_h  = 12;      // enclosure depth\nrib_w   = 1.0;     // grid rib width\nscrew_d = 3.0;     // mounting screw diameter\nscrew_h = 5.0;     // screw insert depth\n\n// ---- MAIN MODULE ----\nmodule led_array() {\n    difference() {\n        union() {\n            case_shell();\n            led_grid();\n            pcb_base();\n            mounting_bosses();\n        }\n\n        // LED cavities (grid holes)\n        translate([0, 0, case_h - pcb_t - led_h])\n            led_cavities();\n\n        // Screw holes\n        for (x = [-1, 1], y = [-1, 1])\n            translate([x * (module_w/2 - 6), y * (module_h/2 - 6), -1])\n                cylinder(h = case_h + 2, d = screw_d);\n    }\n}\n\n// ---- ENCLOSURE ----\nmodule case_shell() {\n    color(\"black\")\n    linear_extrude(height = case_h, convexity = 10)\n    difference() {\n        offset(r = wall_t)\n            square([module_w, module_h], center = true);\n        square([module_w, module_h], center = true);\n    }\n}\n\n// ---- LED GRID ----\nmodule led_grid() {\n    color(\"darkgray\")\n    for (ix = [0:7], iy = [0:7])\n        translate([(ix - 3.5) * pitch, (iy - 3.5) * pitch, case_h - pcb_t])\n            cylinder(h = led_h + pcb_t, d = led_d + 2 * wall_t, $fn = 32);\n}\n\n// ---- LED CAVITIES ----\nmodule led_cavities() {\n    for (ix = [0:7], iy = [0:7])\n        translate([(ix - 3.5) * pitch, (iy - 3.5) * pitch, 0])\n            cylinder(h = led_h + 1, d = led_d, $fn = 32);\n}\n\n// ---- PCB BASE ----\nmodule pcb_base() {\n    color(\"darkgreen\")\n    translate([0, 0, 0])\n        cube([module_w - 2 * wall_t, module_h - 2 * wall_t, pcb_t], center = true);\n}\n\n// ---- MOUNTING BOSSES ----\nmodule mounting_bosses() {\n    color(\"black\")\n    for (x = [-1, 1], y = [-1, 1])\n        translate([x * (module_w/2 - 6), y * (module_h/2 - 6), case_h - screw_h])\n            cylinder(h = screw_h, d = 6, $fn = 20);\n}\n\n// ---- RENDER ----\nled_array();",
    "renders": true
  },
  {
    "electronic_device": "ring",
    "openscad_code": "// Smart Ring - OpenSCAD Model\n// Realistic style with medium complexity\n\n// Color definitions\n$fn = 50;\n\n// Main ring body\nmodule ring_body() {\n    color(\"silver\") {\n        difference() {\n            // Outer shell\n            rotate_extrude(angle = 360, $fn = 100)\n                translate([20, 0, 0])\n                    circle(r = 4);\n            \n            // Inner hole for finger\n            rotate_extrude(angle = 360, $fn = 100)\n                translate([20, 0, 0])\n                    circle(r = 2.5);\n        }\n    }\n}\n\n// Display screen on top\nmodule display_screen() {\n    translate([0, 0, 24]) {\n        color(\"black\") {\n            difference() {\n                // Screen bezel\n                cylinder(h = 1.5, r = 10);\n                // Screen glass\n                cylinder(h = 1.6, r = 9);\n            }\n        }\n        \n        // Actual screen\n        color(\"darkblue\") {\n            translate([0, 0, 1.6])\n                cylinder(h = 0.1, r = 8.5);\n        }\n    }\n}\n\n// Side buttons\nmodule side_buttons() {\n    // Power button\n    color(\"black\") {\n        translate([24, 0, 20]) {\n            rotate([90, 0, 0])\n                cylinder(h = 3, r = 1.5);\n        }\n    }\n    \n    // Function button\n    color(\"black\") {\n        translate([0, 24, 20]) {\n            rotate([0, 90, 0])\n                cylinder(h = 3, r = 1.5);\n        }\n    }\n}\n\n// Charging contacts\nmodule charging_contacts() {\n    for(i = [0:1]) {\n        color(\"gold\") {\n            translate([0, -20 + i * 40, 18]) {\n                rotate([0, 90, 0])\n                    cylinder(h = 0.5, r = 2);\n            }\n        }\n        \n        color(\"gold\") {\n            translate([20 - i * 40, 0, 18]) {\n                rotate([90, 0, 0])\n                    cylinder(h = 0.5, r = 2);\n            }\n        }\n    }\n}\n\n// Heart rate sensor on inner surface\nmodule heart_rate_sensor() {\n    color(\"darkred\") {\n        translate([0, 0, 16]) {\n            difference() {\n                cylinder(h = 0.5, r = 3);\n                cylinder(h = 0.6, r = 2.5);\n            }\n        }\n    }\n    \n    // Sensor LEDs\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([4, 0, 16]) {\n                color(\"red\") {\n                    sphere(r = 0.5);\n                }\n            }\n    }\n}\n\n// Vibration motor housing\nmodule vibration_motor() {\n    color(\"gray\") {\n        translate([0, 15, 22]) {\n            difference() {\n                cube([6, 3, 2], center = true);\n                cube([5.5, 2.5, 1.8], center = true);\n            }\n        }\n    }\n}\n\n// Antenna window (plastic section)\nmodule antenna_window() {\n    color(\"white\", 0.8) {\n        difference() {\n            rotate_extrude(angle = 80, $fn = 50)\n                translate([20, 0, 0])\n                    circle(r = 4);\n            rotate_extrude(angle = 80, $fn = 50)\n                translate([20, 0, 0])\n                    circle(r = 2.5);\n        }\n    }\n}\n\n// Logo detail\nmodule logo() {\n    translate([0, 0, 25]) {\n        color(\"lightgray\") {\n            linear_extrude(height = 0.2) {\n                text(\"SMART\", size = 4, halign = \"center\", valign = \"center\");\n            }\n        }\n    }\n}\n\n// Assembly\nring_body();\ndisplay_screen();\nside_buttons();\ncharging_contacts();\nheart_rate_sensor();\nvibration_motor();\nrotate([0, 0, 140]) antenna_window();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "bus",
    "openscad_code": "// Bus Electronic Device - Realistic Style with Medium Complexity\n// Model represents a handheld ticket validation device used on buses\n\n// Color definitions\ncolor_body = [0.2, 0.2, 0.2];       // Dark gray main body\ncolor_screen = [0.1, 0.1, 0.1];     // Black screen\ncolor_keys = [0.4, 0.4, 0.4];       // Medium gray keys\ncolor_port = [0.3, 0.3, 0.3];       // USB port color\ncolor_indicator = [0, 1, 0];        // Green LED\ncolor_label = [1, 1, 1];            // White label\n\n// Main dimensions\ndevice_length = 70;\ndevice_width = 35;\ndevice_height = 12;\nwall_thickness = 1.5;\n\n// Screen dimensions\nscreen_width = 25;\nscreen_height = 15;\nscreen_depth = 0.5;\n\n// Key dimensions\nkey_width = 5;\nkey_height = 5;\nkey_depth = 0.8;\n\n// USB port dimensions\nport_width = 8;\nport_height = 3;\nport_depth = 4;\n\nmodule main_body() {\n    color(color_body)\n    difference() {\n        // Main body shell\n        cube([device_length, device_width, device_height], center=true);\n        \n        // Hollow out the inside\n        translate([0, 0, -wall_thickness/2])\n            cube([device_length - 2*wall_thickness, \n                  device_width - 2*wall_thickness, \n                  device_height], center=true);\n        \n        // Top rounding\n        translate([0, 0, device_height/2 - 2])\n            cube([device_length - 4, device_width - 4, 4], center=true);\n    }\n    \n    // Rounded corners using spheres\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*(device_length/2 - 2), y*(device_width/2 - 2), 0])\n                sphere(r=2, $fn=16);\n        }\n    }\n}\n\nmodule screen() {\n    color(color_screen)\n    translate([0, 0, device_height/2 - screen_depth/2])\n        cube([screen_width, screen_height, screen_depth], center=true);\n    \n    // Screen bezel\n    color(color_body)\n    translate([0, 0, device_height/2 - screen_depth/2 - 0.1])\n        cube([screen_width + 2, screen_height + 2, 0.2], center=true);\n}\n\nmodule keypad() {\n    // Key layout - 3x4 grid\n    for(row = [0:2]) {\n        for(col = [0:3]) {\n            translate([\n                -device_length/3 + col * key_width * 1.2,\n                device_width/4 - row * key_height * 1.2,\n                device_height/2 + key_depth/2\n            ]) {\n                color(color_keys)\n                cube([key_width, key_height, key_depth], center=true);\n                \n                // Key spacing\n                translate([0, 0, -0.1])\n                    color(color_body)\n                    cube([key_width + 0.5, key_height + 0.5, 0.2], center=true);\n            }\n        }\n    }\n}\n\nmodule usb_port() {\n    color(color_port)\n    translate([device_length/2 - port_depth/2, 0, 0])\n        cube([port_depth, port_width, port_height], center=true);\n    \n    // Port opening\n    difference() {\n        translate([device_length/2 - port_depth/2, 0, 0])\n            cube([port_depth + 0.5, port_width, port_height], center=true);\n        \n        translate([device_length/2 + port_depth/2, 0, 0])\n            cube([port_depth, port_width - 1, port_height - 1], center=true);\n    }\n}\n\nmodule indicator_leds() {\n    // Green ready LED\n    translate([device_length/4, device_width/4, device_height/2 + 0.5])\n        color(color_indicator)\n        sphere(r=1, $fn=16);\n    \n    // Red error LED\n    translate([device_length/4, -device_width/4, device_height/2 + 0.5])\n        color([1, 0, 0])\n        sphere(r=1, $fn=16);\n}\n\nmodule bus_logo() {\n    // Simplified bus icon as embossed label\n    color(color_label)\n    translate([device_length/4, 0, device_height/2 + 0.1])\n        square([20, 10], center=true);\n    \n    // Wheels\n    translate([device_length/4 - 5, -2, device_height/2 + 0.2])\n        circle(r=1.5);\n    \n    translate([device_length/4 + 5, -2, device_height/2 + 0.2])\n        circle(r=1.5);\n}\n\nmodule antenna() {\n    // Small antenna stub\n    color(color_body)\n    translate([-device_length/2 + 2, 0, device_height/2])\n        cylinder(h=3, r=1, $fn=12);\n}\n\n// Assemble the device\nmain_body();\nscreen();\nkeypad();\nusb_port();\nindicator_leds();\nbus_logo();\nantenna();",
    "renders": true
  },
  {
    "electronic_device": "star",
    "openscad_code": "// Star-shaped electronic device - medium complexity realistic style\n// A star-shaped handheld gaming console with screen, buttons and ports\n\n// Overall dimensions: 80mm wide star, 15mm thick\n\n// Main star body module\nmodule star_body() {\n    // Create a 5-point star shape using cylinders for points\n    difference() {\n        // Base star shape\n        linear_extrude(height = 12, center = true)\n        polygon([\n            [0, 35], [-9, 15], [-30, 12], [-15, -5], [-18, -25],\n            [0, -15], [18, -25], [15, -5], [30, 12], [9, 15]\n        ]);\n        \n        // Center hole for screw access\n        cylinder(h = 14, r = 3, center = true);\n    }\n}\n\n// Screen module\nmodule screen() {\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, 6.1])\n    cube([30, 25, 0.5], center = true);\n    \n    color([0.2, 0.2, 0.2])\n    translate([0, 0, 6.6])\n    cube([28, 23, 0.2], center = true);\n}\n\n// D-pad button module\nmodule dpad() {\n    color([0.3, 0.3, 0.3])\n    translate([-15, 5, 6.1])\n    cube([8, 8, 1], center = true);\n    \n    // Directional arrows\n    for (i = [-1, 1]) {\n        translate([-15, 5 + i * 3, 7.2])\n        cube([2, 1, 0.2], center = true);\n        translate([-15 + i * 3, 5, 7.2])\n        cube([1, 2, 0.2], center = true);\n    }\n}\n\n// Action buttons module\nmodule action_buttons() {\n    color([1, 0.2, 0.2])\n    translate([15, 5, 6.5])\n    cylinder(h = 2, r = 3);\n    \n    color([0.2, 0.2, 1])\n    translate([15, -5, 6.5])\n    cylinder(h = 2, r = 3);\n}\n\n// Speaker grills\nmodule speakers() {\n    color([0.15, 0.15, 0.15])\n    for (x = [-20, 20]) {\n        translate([x, -10, 6.1])\n        cube([8, 3, 0.5], center = true);\n        \n        // Speaker holes\n        for (i = [-2, 0, 2]) {\n            translate([x + i, -10, 6.7])\n            cylinder(h = 0.5, r = 0.5);\n        }\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    color([0.2, 0.2, 0.2])\n    translate([0, -30, 0])\n    rotate([90, 0, 0])\n    cube([8, 2.5, 6], center = true);\n}\n\n// LED indicators\nmodule leds() {\n    color([0, 1, 0])\n    translate([10, -20, 6.5])\n    cylinder(h = 0.5, r = 1.5);\n    \n    color([1, 1, 0])\n    translate([-10, -20, 6.5])\n    cylinder(h = 0.5, r = 1.5);\n}\n\n// Volume buttons on side\nmodule volume_buttons() {\n    color([0.4, 0.4, 0.4])\n    translate([30, -5, 0])\n    rotate([0, 90, 0])\n    union() {\n        translate([0, 2, 0])\n        cube([8, 3, 2], center = true);\n        translate([0, -2, 0])\n        cube([8, 3, 2], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main body - star shape\n    color([0.8, 0.8, 0.8])\n    star_body();\n    \n    // Add rounded edges\n    color([0.7, 0.7, 0.7])\n    minkowski() {\n        star_body();\n        sphere(r = 1);\n    }\n    \n    // Electronic components\n    screen();\n    dpad();\n    action_buttons();\n    speakers();\n    usb_port();\n    leds();\n    volume_buttons();\n    \n    // Logo on back\n    color([0.9, 0.9, 0.9])\n    translate([0, 0, -6.5])\n    rotate([180, 0, 0])\n    linear_extrude(height = 0.5)\n    text(\"STAR-CON\", size = 5, halign = \"center\", valign = \"center\");\n}\n\n// Add small feet for stability\ncolor([0.6, 0.6, 0.6])\nfor (angle = [0:72:360]) {\n    rotate([0, 0, angle])\n    translate([0, 28, -7.5])\n    cylinder(h = 1.5, r = 2);\n}",
    "renders": true
  },
  {
    "electronic_device": "tree",
    "openscad_code": "// Tree-shaped electronic device - realistic style\n// A bonsai-style tree that functions as a USB hub and decorative LED lamp\n\nmodule tree_trunk() {\n    // Main trunk body\n    color([0.4, 0.2, 0.1]) {\n        // Base cylinder\n        cylinder(h=12, d1=15, d2=12, $fn=20);\n        \n        // Second segment\n        translate([0, 0, 12])\n            cylinder(h=10, d1=12, d2=10, $fn=20);\n            \n        // Third segment with slight bend\n        translate([2, 1, 22])\n            rotate([15, 0, 10])\n            cylinder(h=8, d1=10, d2=8, $fn=20);\n    }\n}\n\nmodule branches() {\n    // Generate 5 main branches\n    for(i = [0:4]) {\n        angle = i * 72 + 30;\n        rotate([0, 0, angle]) {\n            translate([6, 0, 28])\n                rotate([30 - i*3, 0, 0])\n                branch_segment(8, 2.5);\n        }\n    }\n}\n\nmodule branch_segment(length, thickness) {\n    // Recursive branch generation\n    color([0.3, 0.15, 0.08]) {\n        cylinder(h=length, d=thickness, $fn=8);\n        \n        // Add sub-branches if large enough\n        if(length > 4) {\n            translate([0, 0, length/2])\n                rotate([0, 90, 45])\n                branch_segment(length*0.7, thickness*0.7);\n                \n            translate([0, 0, length/2])\n                rotate([0, -90, -45])\n                branch_segment(length*0.7, thickness*0.7);\n        }\n    }\n}\n\nmodule leaves() {\n    // LED leaves at branch tips\n    for(i = [0:14]) {\n        branch_num = floor(i/3);\n        leaf_pos = i % 3;\n        \n        rotate([0, 0, branch_num * 72 + 30]) {\n            translate([8 + leaf_pos*2, 0, 32 + leaf_pos*1.5])\n                rotate([35 - branch_num*3, 0, 0])\n                led_leaf();\n        }\n    }\n}\n\nmodule led_leaf() {\n    // Individual LED leaf with wiring\n    color([0.1, 0.8, 0.2]) {\n        // Leaf body\n        scale([1, 0.3, 0.1])\n            sphere(d=4, $fn=12);\n            \n        // LED indicator\n        color([0.2, 1, 0.2])\n            translate([1.5, 0, 0.2])\n                sphere(d=0.8, $fn=8);\n                \n        // Copper trace\n        color([0.8, 0.5, 0.2])\n            translate([0, 0, -0.1])\n                cube([3, 0.1, 0.05]);\n    }\n}\n\nmodule base() {\n    // Electronic base with ports\n    color([0.2, 0.2, 0.2]) {\n        difference() {\n            // Main base\n            cylinder(h=8, d=35, $fn=32);\n            \n            // USB ports - 4 around the base\n            for(i = [0:3]) {\n                rotate([0, 0, i*90])\n                    translate([15, 0, 4])\n                        cube([6, 2, 4], center=true);\n            }\n            \n            // Power LED indicator\n            translate([10, 0, 7.5])\n                cylinder(h=1, d=3, $fn=16);\n                \n            // Micro USB power port\n            translate([0, 15, 4])\n                cube([7, 2, 4], center=true);\n        }\n        \n        // Power button\n        color([0.1, 0.1, 0.1])\n            translate([0, -15, 8])\n                cylinder(h=2, d=6, $fn=20);\n                \n        // Base label\n        color([0.9, 0.9, 0.9])\n            translate([0, 0, 8.1])\n                linear_extrude(0.1)\n                    text(\"USB Tree Hub\", size=3, halign=\"center\");\n    }\n}\n\nmodule roots() {\n    // Decorative cable management roots\n    color([0.3, 0.15, 0.08]) {\n        for(i = [0:5]) {\n            angle = i * 60;\n            rotate([0, 0, angle])\n                translate([8, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=5 + i, d=2, $fn=6);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Electronic base\n    base();\n    \n    // Cable roots\n    translate([0, 0, 0])\n        roots();\n    \n    // Tree trunk\n    translate([0, 0, 8])\n        tree_trunk();\n        \n    // Branches\n    branches();\n    \n    // LED leaves\n    leaves();\n}",
    "renders": true
  },
  {
    "electronic_device": "leaf",
    "openscad_code": "// Leaf-Style E-Reader / Tablet\n// 70 mm x 100 mm x 8 mm overall\n// 3D-printable – no steep overhangs, 1.2 mm walls\n\n$fa = 2;\n$fs = 0.5;\n\n// Colors\ncolor_leaf = \"forestgreen\";\ncolor_screen = \"black\";\ncolor_port = \"silver\";\ncolor_button = \"darkgray\";\ncolor_led = \"lime\";\n\n// Overall body shape – leaf outline\nmodule leaf_body() {\n    difference() {\n        // Main leaf body\n        linear_extrude(height = 8, center = true, convexity = 10)\n            offset(r = 1.5)\n                polygon(points = [\n                    [0, 0], [10, 40], [25, 70], [50, 100],\n                    [75, 95], [90, 80], [100, 60], [95, 30],\n                    [85, 10], [70, 0], [50, -5], [30, -3],\n                    [10, 2], [0, 0]\n                ]);\n\n        // Center vein channel (decorative, no overhangs)\n        translate([0, 0, 0])\n            linear_extrude(height = 9, center = true)\n                offset(r = -0.5)\n                    polygon(points = [\n                        [50, -2], [48, 10], [46, 30], [47, 60],\n                        [50, 90], [52, 60], [53, 30], [52, 10],\n                        [50, -2]\n                    ]);\n    }\n}\n\n// 5-inch matte screen recess\nmodule screen() {\n    color(color_screen)\n    translate([0, 0, 4.2])\n        cube([60, 35, 0.4], center = true);\n}\n\n// Capacitive home button\nmodule home_button() {\n    color(color_button)\n    translate([0, -45, 4.2])\n        cylinder(h = 1.2, r = 5, center = true);\n}\n\n// USB-C port (bottom edge)\nmodule usb_port() {\n    color(color_port)\n    translate([0, -48, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 8.4, r = 3.5, center = true);\n}\n\n// 3.5 mm headphone jack\nmodule jack() {\n    color(color_port)\n    translate([25, -48, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 8.4, r = 3.5, center = true);\n}\n\n// Volume rocker left edge\nmodule volume_buttons() {\n    color(color_button)\n    translate([-50, 20, 0])\n        cube([3, 15, 2], center = true);\n    translate([-50, 0, 0])\n        cube([3, 15, 2], center = true);\n}\n\n// Charging LED\nmodule charging_led() {\n    color(color_led)\n    translate([40, -47, 4.2])\n        sphere(r = 1.5);\n}\n\n// Stylus holder (leaf-vein style)\nmodule stylus_holder() {\n    difference() {\n        translate([0, 30, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 60, r = 3.5, center = true);\n        translate([0, 30, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 61, r = 2.8, center = true);\n    }\n}\n\n// Assembly\ncolor(color_leaf) leaf_body();\nscreen();\nhome_button();\nusb_port();\njack();\nvolume_buttons();\ncharging_led();\nstylus_holder();",
    "renders": true
  },
  {
    "electronic_device": "spur",
    "openscad_code": "// Electronic Spur (GPS Equestrian Tracker)\n// Realistic medium-complexity model for 3D printing\n\n$fn = 32;  // Smooth curves\n\nmodule spur_base() {\n    // Main U-shaped body\n    difference() {\n        union() {\n            // Outer rounded rectangle 55 mm x 45 mm x 8 mm\n            hull() {\n                translate([-27.5, -22.5, 0]) cylinder(h = 8, r = 6);\n                translate([27.5, -22.5, 0]) cylinder(h = 8, r = 6);\n                translate([27.5, 22.5, 0]) cylinder(h = 8, r = 6);\n                translate([-27.5, 22.5, 0]) cylinder(h = 8, r = 6);\n            }\n            // Center bridge\n            translate([0, 0, 0]) cube([55, 15, 8], center = true);\n        }\n        // Inner cut-out for boot strap\n        hull() {\n            translate([-20, -17.5, -1]) cylinder(h = 10, r = 4);\n            translate([20, -17.5, -1]) cylinder(h = 10, r = 4);\n            translate([20, 17.5, -1]) cylinder(h = 10, r = 4);\n            translate([-20, 17.5, -1]) cylinder(h = 10, r = 4);\n        }\n    }\n}\n\nmodule rowel() {\n    // Rowel wheel 25 mm diameter\n    color(\"silver\") {\n        rotate([90, 0, 0]) {\n            difference() {\n                // Wheel disc\n                cylinder(h = 3, r = 12.5, center = true);\n                // Center hole\n                cylinder(h = 4, r = 2, center = true);\n                // Spoke cutouts\n                for (i = [0:15]) {\n                    rotate([0, 0, i * 22.5]) {\n                        translate([8, 0, 0]) cube([8, 2, 4], center = true);\n                    }\n                }\n            }\n            // Spokes\n            for (i = [0:7]) {\n                rotate([0, 0, i * 45]) {\n                    translate([6, 0, 0]) cube([12, 1.5, 3], center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule electronics_housing() {\n    // GPS module housing on spur arm\n    color(\"lightgray\") {\n        translate([0, 30, 6]) {\n            difference() {\n                // Main housing 15 x 20 x 8 mm\n                cube([15, 20, 8], center = true);\n                // Battery compartment\n                translate([0, 5, 2]) cube([11, 8, 4], center = true);\n                // USB-C port\n                translate([8, 0, 0]) rotate([0, 90, 0]) \n                    cylinder(h = 10, r = 2.5);\n            }\n        }\n    }\n}\n\nmodule indicator_leds() {\n    // Status LEDs on housing\n    for (i = [-1, 1]) {\n        color(\"green\") translate([5 * i, 30, 10.5]) \n            sphere(r = 1.2);\n    }\n}\n\nmodule power_button() {\n    color(\"black\") {\n        translate([7, 30, 10.5]) cylinder(h = 2, r = 2.5);\n        translate([7, 30, 11.5]) sphere(r = 2.5);\n    }\n}\n\nmodule charging_contacts() {\n    // Metal charging pads\n    color(\"gold\") {\n        translate([-5, 30, 10]) cube([8, 4, 0.5], center = true);\n        translate([5, 30, 10]) cube([8, 4, 0.5], center = true);\n    }\n}\n\nmodule logo() {\n    // Stylized horse logo\n    color(\"white\") {\n        translate([0, 0, 8.5]) linear_extrude(height = 0.5) {\n            text(\"E-TRACK\", size = 6, halign = \"center\", valign = \"center\");\n        }\n    }\n}\n\nmodule rowel_support() {\n    // Rowel support arm\n    color(\"silver\") {\n        translate([0, -30, 0]) {\n            hull() {\n                translate([0, 0, 0]) sphere(r = 4);\n                translate([0, -10, 0]) sphere(r = 3);\n            }\n            // Rowel pin\n            translate([0, -10, 0]) rotate([90, 0, 0]) \n                cylinder(h = 6, r = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    color(\"darkgray\") spur_base();\n    rowel_support();\n    rowel();\n    electronics_housing();\n    indicator_leds();\n    power_button();\n    charging_contacts();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "trunk",
    "openscad_code": "// Trunk-style portable electronic device (think rugged server/router case)\n// Dimensions: 90 x 60 x 35 mm – fits most FDM printers\n\n// Overall shell thickness\nwall = 2;\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        color(\"darkslategray\")\n        cube([90, 60, 35], center = true);\n\n        // Hollow inside\n        translate([0, 0, wall/2])\n            cube([90 - 2*wall, 60 - 2*wall, 35 - wall], center = true);\n    }\n}\n\n// Reinforcing ribs on long sides\nmodule ribs() {\n    for (y = [-20, 0, 20])\n        translate([0, y, 0])\n            color(\"darkslategray\")\n            cube([92, 3, 37], center = true);\n}\n\n// Front panel with ports and indicators\nmodule front() {\n    difference() {\n        // Panel plate\n        translate([0, 30.5, 0])\n            color(\"dimgray\")\n            cube([86, wall, 31], center = true);\n\n        // Ethernet ports (8P8C)\n        for (x = [-35, -25, -15, -5, 5, 15, 25, 35])\n            translate([x, 30.5, 10])\n                rotate([0, 90, 0])\n                    cylinder(h = wall + 0.1, d = 6, $fn = 20);\n\n        // Status LEDs\n        for (x = [-30, -20, -10, 0, 10, 20, 30])\n            translate([x, 30.5, -10])\n                cylinder(h = wall + 0.1, d = 3, $fn = 12);\n\n        // USB-C power port\n        translate([40, 30.5, 0])\n            rotate([0, 90, 0])\n                cylinder(h = wall + 0.1, d = 8.5, $fn = 20);\n    }\n}\n\n// Rear panel with fan grill\nmodule rear() {\n    difference() {\n        // Panel plate\n        translate([0, -30.5, 0])\n            color(\"dimgray\")\n            cube([86, wall, 31], center = true);\n\n        // Fan exhaust grill (hex pattern)\n        for (x = [-35 : 5 : 35])\n            for (z = [-12 : 4 : 12])\n                translate([x + (z % 8 == 0 ? 2.5 : 0), -30.5, z])\n                    cylinder(h = wall + 0.1, d = 3, $fn = 6);\n    }\n}\n\n// Top lid with carry handle\nmodule lid() {\n    difference() {\n        // Lid plate\n        translate([0, 0, 17.5])\n            color(\"darkslategray\")\n            cube([88, 58, wall], center = true);\n\n        // Handle cutout\n        translate([0, 0, 17.5 + wall])\n            cube([60, 20, wall + 0.1], center = true);\n    }\n\n    // Handle bar\n    translate([0, 0, 17.5 + wall + 8])\n        rotate([90, 0, 0])\n            cylinder(h = 20, d = 6, center = true, $fn = 20);\n}\n\n// Side cooling vents\nmodule vents() {\n    for (side = [-1, 1]) {\n        for (z = [-12 : 6 : 12])\n            translate([45 * side, 0, z])\n                rotate([0, 90, 0])\n                    cube([20, wall + 0.1, 4], center = true);\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    for (x = [-35, 35])\n        for (y = [-25, 25])\n            translate([x, y, -17.5 - wall])\n                color(\"black\")\n                cylinder(h = wall, d = 8, $fn = 20);\n}\n\n// Assembly\nunion() {\n    body();\n    ribs();\n    front();\n    rear();\n    lid();\n    vents();\n    feet();\n}",
    "renders": true
  },
  {
    "electronic_device": "linecard",
    "openscad_code": "// Realistic Linecard Electronic Device - Medium Complexity\n// 3D printable with proper wall thickness and no overhangs\n\nmodule linecard_body() {\n    // Main chassis - extruded aluminum frame\n    color(\"silver\") \n    difference() {\n        cube([80, 120, 12], center=true);\n        translate([0, 0, -1])\n            cube([78, 118, 14], center=true);\n    }\n    \n    // Front panel - matte black\n    color([0.1, 0.1, 0.1])\n    translate([0, 60, 0])\n        cube([82, 2, 14], center=true);\n}\n\nmodule vent_holes() {\n    // Ventilation slots on sides\n    for(i = [-55:10:55]) {\n        translate([40, i, 0])\n            rotate([90, 0, 0])\n                cylinder(h=2, d=8, $fn=16);\n    }\n}\n\nmodule ports() {\n    // RJ45 ports - 8 ports\n    color(\"black\")\n    for(i = [-35:10:35]) {\n        translate([40, i, 0])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=11.6, $fn=32);\n        \n        // LED indicators above each port\n        color(\"green\")\n        translate([38, i, 4])\n            sphere(d=2, $fn=12);\n    }\n}\n\nmodule management_port() {\n    // Management console port\n    color(\"black\")\n    translate([40, -45, 0])\n        rotate([90, 0, 0])\n            cylinder(h=3, d=9, $fn=32);\n    \n    // Port label\n    color(\"white\")\n    translate([39, -45, 6])\n        cube([2, 6, 0.5], center=true);\n}\n\nmodule power_connector() {\n    // Power input connector\n    color(\"black\")\n    translate([40, 45, 0])\n        rotate([90, 0, 0])\n            cylinder(h=5, d=12, $fn=32);\n    \n    // Power LED\n    color(\"lime\")\n    translate([38, 45, 4])\n        sphere(d=3, $fn=12);\n}\n\nmodule mounting_ears() {\n    // Left mounting ear\n    color(\"silver\")\n    translate([-42, 0, 0])\n        cube([4, 100, 14], center=true);\n    \n    // Right mounting ear\n    translate([42, 0, 0])\n        cube([4, 100, 14], center=true);\n    \n    // Mounting holes\n    color(\"black\")\n    for(y = [-40:20:40]) {\n        translate([-42, y, 0])\n            cylinder(h=5, d=5.5, $fn=32);\n        translate([42, y, 0])\n            cylinder(h=5, d=5.5, $fn=32);\n    }\n}\n\nmodule device_label() {\n    // Manufacturer label plate\n    color(\"brass\")\n    translate([0, 50, 7])\n        cube([25, 8, 0.5], center=true);\n    \n    // Model number\n    color(\"black\")\n    translate([0, 50, 7.3])\n        cube([20, 6, 0.2], center=true);\n}\n\nmodule status_leds() {\n    // System status LEDs\n    color(\"blue\")\n    translate([-20, 50, 7])\n        sphere(d=3, $fn=12);\n    \n    color(\"red\")\n    translate([0, 50, 7])\n        sphere(d=3, $fn=12);\n    \n    color(\"yellow\")\n    translate([20, 50, 7])\n        sphere(d=3, $fn=12);\n}\n\n// Main assembly\nunion() {\n    linecard_body();\n    vent_holes();\n    ports();\n    management_port();\n    power_connector();\n    mounting_ears();\n    device_label();\n    status_leds();\n}",
    "renders": true
  },
  {
    "electronic_device": "supervisor",
    "openscad_code": "// OpenSCAD code for a realistic supervisor electronic device\n// Dimensions in mm, suitable for 3D printing\n\nwall_thickness = 2;\ncorner_radius = 3;\n\n// Main body dimensions\nbody_w = 60;\nbody_h = 40;\nbody_d = 25;\n\n// Screen dimensions\nscreen_w = 48;\nscreen_h = 24;\nscreen_d = 1;\n\n// Button dimensions\nbutton_r = 3;\nbutton_h = 1.5;\n\n// LED indicator dimensions\nled_r = 1.5;\nled_h = 1;\n\n// USB port dimensions\nusb_w = 12;\nusb_h = 5;\nusb_d = 4;\n\n// Antenna dimensions\nantenna_r = 2;\nantenna_h = 15;\n\n// Color definitions\n$fn = 32;\n\nmodule rounded_cube(size, r) {\n    translate([r, r, 0])\n    minkowski() {\n        cube([size.x-2*r, size.y-2*r, size.z]);\n        cylinder(r=r, h=0.01);\n    }\n}\n\nmodule main_body() {\n    color([0.2, 0.2, 0.2]) // Dark gray plastic\n    difference() {\n        rounded_cube([body_w, body_h, body_d], corner_radius);\n        \n        // Screen cutout\n        translate([(body_w-screen_w)/2, (body_h-screen_h)/2, body_d-screen_d])\n        cube([screen_w, screen_h, screen_d+0.1]);\n        \n        // USB port cutout\n        translate([0, (body_h-usb_h)/2, (body_d-usb_d)/2])\n        cube([usb_d+0.1, usb_h, usb_d]);\n        \n        // Ventilation slots\n        for(i = [0:4]) {\n            translate([body_w - 5, 5 + i*6, 2])\n            cube([wall_thickness, 3, body_d-4]);\n        }\n    }\n}\n\nmodule screen() {\n    color([0.1, 0.1, 0.1]) // Black screen\n    translate([(body_w-screen_w)/2, (body_h-screen_h)/2, body_d-screen_d+0.01])\n    cube([screen_w, screen_h, screen_d]);\n}\n\nmodule buttons() {\n    // Power button\n    color([0.8, 0.1, 0.1]) // Red button\n    translate([10, 5, body_d+0.1])\n    cylinder(r=button_r, h=button_h);\n    \n    // Mode button\n    color([0.1, 0.8, 0.1]) // Green button\n    translate([20, 5, body_d+0.1])\n    cylinder(r=button_r, h=button_h);\n    \n    // Reset button (recessed)\n    color([0.8, 0.8, 0.1]) // Yellow button\n    translate([body_w-10, 5, body_d-button_h-0.5])\n    cylinder(r=button_r-0.5, h=button_h);\n}\n\nmodule led_indicators() {\n    // Status LED\n    color([0, 1, 0]) // Green LED\n    translate([body_w-15, body_h-8, body_d-0.5])\n    cylinder(r=led_r, h=led_h);\n    \n    // Error LED\n    color([1, 0, 0]) // Red LED\n    translate([body_w-8, body_h-8, body_d-0.5])\n    cylinder(r=led_r, h=led_h);\n}\n\nmodule usb_port() {\n    color([0.4, 0.4, 0.4]) // Metal USB port\n    translate([usb_d/2, body_h/2, body_d/2])\n    rotate([0, 90, 0])\n    difference() {\n        cube([usb_w, usb_h, usb_d]);\n        translate([2, 2, -0.1])\n        cube([usb_w-4, usb_h-4, usb_d+0.2]);\n    }\n}\n\nmodule antenna() {\n    color([0.7, 0.7, 0.7]) // Metal antenna\n    translate([body_w/2, body_h, body_d/2])\n    rotate([0, 90, 0])\n    cylinder(r=antenna_r, h=antenna_h);\n    \n    // Antenna base\n    color([0.3, 0.3, 0.3])\n    translate([body_w/2, body_h, body_d/2])\n    sphere(r=antenna_r+1);\n}\n\nmodule mounting_holes() {\n    // Mounting holes on back\n    for(x = [10, body_w-10])\n    for(y = [10, body_h-10]) {\n        translate([x, y, 0])\n        cylinder(r=1.5, h=wall_thickness+0.1, $fn=6);\n    }\n}\n\n// Assembly\nunion() {\n    difference() {\n        union() {\n            main_body();\n            screen();\n        }\n        mounting_holes();\n    }\n    \n    buttons();\n    led_indicators();\n    usb_port();\n    antenna();\n}",
    "renders": true
  },
  {
    "electronic_device": "fabricmodule",
    "openscad_code": "// FabricModule Electronic Device - Realistic Style\n// A modular synthesizer module with fabric-inspired texture\n\n// Color definitions\nmodule_color = [0.25, 0.25, 0.25];  // Dark gray aluminum\npanel_color = [0.15, 0.15, 0.15];   // Matte black\nscreen_color = [0.1, 0.9, 0.1];     // Green LCD\nled_color = [1, 0, 0];              // Red LED\nknob_color = [0.8, 0.8, 0.8];       // Silver\n\n// Overall dimensions\nmodule_width = 40;  // Eurorack width (HP * 5.08mm)\nmodule_height = 128.5;  // Eurorack height\nmodule_depth = 25;\n\n// Wall thickness\nwall = 2;\n\nmodule fabric_texture(h, w, d) {\n    difference() {\n        cube([w, d, h]);\n        \n        // Create fabric-like indentations\n        for (x = [0 : 2 : w-2]) {\n            for (y = [0 : 2 : d-2]) {\n                translate([x+1, y+1, h-0.5])\n                    cube([1.5, 1.5, 1.5], center=true);\n            }\n        }\n    }\n}\n\nmodule eurorack_module() {\n    // Main module body\n    difference() {\n        color(module_color)\n            cube([module_width, module_depth, module_height]);\n        \n        // Hollow out the inside\n        translate([wall, wall, wall])\n            cube([module_width-wall*2, module_depth-wall*2, module_height-wall*2]);\n    }\n    \n    // Front panel\n    color(panel_color)\n        translate([0, 0, module_height-4])\n            cube([module_width, module_depth, 4]);\n}\n\nmodule display() {\n    // LCD screen\n    color(screen_color)\n        translate([module_width/2-12, module_depth-6, module_height-2])\n            cube([24, 4, 2]);\n    \n    // Screen bezel\n    color([0.1, 0.1, 0.1])\n        translate([module_width/2-13, module_depth-7, module_height-3])\n            cube([26, 6, 0.5]);\n}\n\nmodule knob(x_pos, y_pos, label) {\n    // Knob base\n    color([0.2, 0.2, 0.2])\n        translate([x_pos, y_pos, module_height-1])\n            cylinder(h=3, r=4, $fn=20);\n    \n    // Knob cap\n    color(knob_color)\n        translate([x_pos, y_pos, module_height+1.5])\n            cylinder(h=4, r=3.5, $fn=20);\n    \n    // Knob indicator line\n    color([0, 0, 0])\n        translate([x_pos, y_pos+3.4, module_height+3])\n            cube([0.5, 1, 0.2]);\n}\n\nmodule button(x_pos, y_pos, state) {\n    // Button housing\n    color([0.1, 0.1, 0.1])\n        translate([x_pos, y_pos, module_height-1])\n            cube([6, 6, 2]);\n    \n    // Button\n    color(state ? led_color : [0.3, 0.3, 0.3])\n        translate([x_pos+1, y_pos+1, module_height+0.5])\n            cube([4, 4, 1.5]);\n}\n\nmodule jack(x_pos, y_pos, type) {\n    // Jack socket\n    color([0.1, 0.1, 0.1])\n        translate([x_pos, y_pos, module_height-1])\n            cylinder(h=3, r=3.5, $fn=20);\n    \n    // Jack hole\n    color([0, 0, 0])\n        translate([x_pos, y_pos, module_height-2])\n            cylinder(h=5, r=2.5, $fn=20);\n    \n    // Jack ring\n    color([0.8, 0.8, 0.8])\n        translate([x_pos, y_pos, module_height+1])\n            cylinder(h=0.5, r=4, $fn=20);\n}\n\nmodule led_indicator(x_pos, y_pos, color_val) {\n    // LED bezel\n    color([0.1, 0.1, 0.1])\n        translate([x_pos, y_pos, module_height-0.5])\n            cylinder(h=1, r=2, $fn=20);\n    \n    // LED\n    color(color_val)\n        translate([x_pos, y_pos, module_height])\n            sphere(r=1.5, $fn=20);\n}\n\nmodule power_header() {\n    // 10-pin power header\n    translate([wall+3, wall+3, module_height/2])\n        rotate([0, 90, 0])\n            for (i = [0:9]) {\n                translate([i*2.54-11.43, 0, 0])\n                    cylinder(h=5, r=0.635, $fn=8);\n            }\n}\n\n// Main assembly\neurorack_module();\n\n// Add fabric texture to sides\ntranslate([0, 0, wall])\n    fabric_texture(module_height-wall*2, module_width, wall);\n\ntranslate([0, module_depth-wall, wall])\n    fabric_texture(module_height-wall*2, module_width, wall);\n\n// Front panel components\ndisplay();\n\n// Knobs (3 across)\nknob(module_width/2-12, module_depth-12, \"FREQ\");\nknob(module_width/2, module_depth-12, \"RES\");\nknob(module_width/2+12, module_depth-12, \"AMP\");\n\n// Buttons\nbutton(module_width/2-8, module_depth-28, false);\nbutton(module_width/2+8, module_depth-28, true);\n\n// Jacks\njack(module_width/2-15, module_depth-20, \"IN\");\njack(module_width/2, module_depth-20, \"CV\");\njack(module_width/2+15, module_depth-20, \"OUT\");\n\n// LED indicators\nled_indicator(module_width/2-5, module_depth-35, led_color);\nled_indicator(module_width/2+5, module_depth-35, [0, 1, 0]);\n\n// Module name text area\ncolor([0.05, 0.05, 0.05])\n    translate([module_width/2-15, module_depth-2, module_height-1])\n        cube([30, 2, 1]);\n\n// Power header on back\npower_header();",
    "renders": true
  },
  {
    "electronic_device": "switchmodule",
    "openscad_code": "// OpenSCAD Switch Module - Realistic Style, Medium Complexity\n// A 3D printable DIN-rail mountable industrial switch module with 4 channels\n\nmodule main_body() {\n    color(\"gray40\")\n    union() {\n        // Main enclosure base\n        difference() {\n            cube([72, 90, 35], center=true);\n            translate([0, 0, 17.5])\n            cube([68, 86, 35], center=true);\n        }\n        \n        // DIN rail clip (bottom)\n        translate([0, 0, -17])\n        difference() {\n            cube([60, 80, 4], center=true);\n            translate([0, 0, 2])\n            cube([58, 78, 4], center=true);\n        }\n    }\n}\n\nmodule switch_rocker(pos, color_name) {\n    translate(pos)\n    rotate([10, 0, 0])\n    color(color_name)\n    union() {\n        difference() {\n            cube([20, 12, 6], center=true);\n            translate([0, 0, 3])\n            cube([18, 10, 6], center=true);\n        }\n        // Rocker pivot\n        translate([0, 0, -3.5])\n        rotate([90, 0, 0])\n        cylinder(h=12, d=1.5, center=true);\n    }\n}\n\nmodule led_indicator(pos, color_name) {\n    translate(pos)\n    union() {\n        color(\"black\")\n        cylinder(h=2, d=6);\n        translate([0, 0, 2.1])\n        color(color_name)\n        sphere(d=5);\n    }\n}\n\nmodule terminal_block(pos) {\n    translate(pos)\n    color(\"gray20\")\n    union() {\n        cube([8, 20, 12], center=true);\n        // Screw terminals\n        for(y = [-7.5, -2.5, 2.5, 7.5]) {\n            translate([0, y, 6.5])\n            rotate([0, 0, 0])\n            cylinder(h=3, d=3, $fn=12);\n        }\n    }\n}\n\nmodule side_label() {\n    translate([36, 0, 0])\n    rotate([0, 90, 0])\n    color(\"white\")\n    linear_extrude(height=0.1)\n    text(\"SWITCH-MOD-4CH\", size=4, halign=\"center\", valign=\"center\");\n}\n\nmodule cable_gland(pos, angle) {\n    translate(pos)\n    rotate([0, 0, angle])\n    union() {\n        color(\"black\")\n        cylinder(h=8, d=12);\n        translate([0, 0, 4])\n        cylinder(h=4, d=14);\n        // Internal threading approximation\n        for(i = [0:5:359]) {\n            rotate([0, 0, i])\n            translate([5.5, 0, 0])\n            cube([1, 0.5, 8]);\n        }\n    }\n}\n\n// Main assembly\n$fn = 24;\n\nmain_body();\n\n// 4 channel switches with LEDs\nswitch_rocker([0, -30, 8], \"red\");\nled_indicator([0, -30, 18], \"red\");\n\nswitch_rocker([0, -10, 8], \"green\");\nled_indicator([0, -10, 18], \"green\");\n\nswitch_rocker([0, 10, 8], \"blue\");\nled_indicator([0, 10, 18], \"blue\");\n\nswitch_rocker([0, 30, 8], \"yellow\");\nled_indicator([0, 30, 18], \"yellow\");\n\n// Terminal blocks on sides\nterminal_block([37.5, -30, 0]);\nterminal_block([37.5, -15, 0]);\nterminal_block([37.5, 0, 0]);\nterminal_block([37.5, 15, 0]);\nterminal_block([37.5, 30, 0]);\n\nterminal_block([-37.5, -30, 0]);\nterminal_block([-37.5, -15, 0]);\nterminal_block([-37.5, 0, 0]);\nterminal_block([-37.5, 15, 0]);\nterminal_block([-37.5, 30, 0]);\n\n// Cable glands for wire entry\ncable_gland([0, -45, 0], 0);\ncable_gland([0, 45, 0], 180);\n\n// Side labels\nside_label();\nmirror([1, 0, 0])\nside_label();\n\n// Mounting holes\nfor(x = [-25, 25])\nfor(y = [-35, 35]) {\n    translate([x, y, 17.5])\n    rotate([0, 0, 0])\n    cylinder(h=35, d=4, center=true);\n}",
    "renders": true
  },
  {
    "electronic_device": "routermodule",
    "openscad_code": "// Realistic Router Module\n// Dimensions: 80mm x 50mm x 18mm\n\n// Main body color\ncolor(\"darkgrey\") \ndifference() {\n    // Main chassis\n    translate([0,0,1]) cube([80,50,16], center=true);\n    \n    // Top ventilation slots\n    for(x = [-30, -20, -10, 0, 10, 20, 30])\n        translate([x, 0, 9.5]) cube([5, 48, 1.5], center=true);\n    \n    // Front ports cutouts\n    translate([-40.5, 10, 0]) cube([2, 4, 8]);\n    translate([-40.5, 0, 0]) cube([2, 4, 8]);\n    translate([-40.5, -10, 0]) cube([2, 4, 8]);\n}\n\n// Side antennas\nmodule antenna() {\n    color(\"black\") {\n        translate([0, 0, 0]) rotate([90,0,0]) cylinder(h=20, d=5, center=true);\n        translate([0, 0, 10]) sphere(d=5);\n    }\n}\n\n// Left antenna\ntranslate([-40, -25, 8]) rotate([0,0,-30]) antenna();\n\n// Right antenna\ntranslate([40, -25, 8]) rotate([0,0,30]) antenna();\n\n// LED indicators\nmodule led(color_name) {\n    color(color_name) translate([0,0,0]) cylinder(h=0.5, d=3);\n}\n\nfor(i = [0:4]) {\n    translate([30 - i*10, 22, 8.5]) led(i == 2 ? \"red\" : \"green\");\n}\n\n// Ethernet ports\nmodule ethernet_port() {\n    difference() {\n        color(\"black\") translate([0,0,0]) cube([12, 12, 8], center=true);\n        translate([0, 0, 4.1]) cube([10, 10, 0.5], center=true);\n    }\n}\n\n// Four ethernet ports\nfor(i = [0:3]) {\n    translate([-35 + i*12, 0, -6]) ethernet_port();\n}\n\n// Power connector\ncolor(\"black\") {\n    translate([35, -20, -6]) {\n        cube([10, 8, 8], center=true);\n        translate([4, 0, 0]) cylinder(h=8, d=4, center=true);\n    }\n}\n\n// Reset button\ncolor(\"red\") {\n    translate([35, 20, 6]) cylinder(h=1.5, d=4);\n}\n\n// Brand label area\ncolor(\"white\") {\n    translate([0, -20, 8.6]) cube([20, 8, 0.2], center=true);\n}\n\n// Rubber feet\nmodule foot() {\n    color(\"black\") translate([0,0,0]) cylinder(h=1, d=4);\n}\n\nfor(x = [-30, 30]) {\n    for(y = [-18, 18]) {\n        translate([x, y, -9]) foot();\n    }\n}\n\n// Ventilation holes on bottom\nfor(x = [-25:10:25]) {\n    for(y = [-15:10:15]) {\n        translate([x, y, -8.5]) cylinder(h=1, d=2);\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "lineinterface",
    "openscad_code": "// Realistic Line Interface Device - OpenSCAD\n// Medium complexity 3D printable model\n\n// Color definitions\n$fn = 50;\n\n// Main dimensions\ndevice_w = 80;\ndevice_h = 20;\ndevice_d = 50;\n\n// Wall thickness\nwall_t = 2;\n\n// Create the main enclosure\nmodule enclosure() {\n    difference() {\n        // Main body\n        color(\"darkslategray\")\n        rounded_box(device_w, device_h, device_d, 3);\n        \n        // Hollow out\n        translate([0, 0, wall_t/2])\n            rounded_box(device_w-wall_t*2, device_h-wall_t*2, device_d-wall_t, 2);\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(w, h, d, r) {\n    hull() {\n        for(x = [-1, 1])\n        for(y = [-1, 1])\n        for(z = [-1, 1])\n            translate([x*(w/2-r), y*(h/2-r), z*(d/2-r)])\n                sphere(r=r);\n    }\n}\n\n// Display screen\nmodule display() {\n    translate([0, device_h/2 - 1, 0])\n        color(\"black\")\n        cube([45, 0.5, 20], center=true);\n    \n    // Screen bezel\n    translate([0, device_h/2 - 0.8, 0])\n        color(\"gray20\")\n        cube([47, 0.3, 22], center=true);\n    \n    // Screen content (simplified lines)\n    for(i = [-9:2:9]) {\n        translate([i*2, device_h/2 - 0.5, 0])\n            color(\"limegreen\")\n            cube([0.5, 0.1, 18], center=true);\n    }\n}\n\n// Control buttons\nmodule control_buttons() {\n    // Power button\n    translate([device_w/2 - 10, device_h/2 - 0.5, device_d/2 - 8])\n        rotate([90, 0, 0])\n        cylinder(h=1.5, d=4);\n    \n    // Menu buttons\n    for(i = [0:2]) {\n        translate([device_w/2 - 10, device_h/2 - 0.5, device_d/2 - 15 - i*5])\n            rotate([90, 0, 0])\n            color(\"darkred\")\n            cylinder(h=1.5, d=3);\n    }\n}\n\n// LED indicators\nmodule indicators() {\n    // Status LEDs\n    for(i = [0:1]) {\n        translate([-device_w/2 + 5 + i*8, device_h/2 - 0.5, device_d/2 - 5])\n            rotate([90, 0, 0])\n            color(i == 0 ? \"green\" : \"red\")\n            cylinder(h=1, d=2);\n    }\n}\n\n// Connection ports\nmodule ports() {\n    // Ethernet port\n    translate([-device_w/2 + 15, 0, device_d/2])\n        difference() {\n            color(\"gray30\")\n            cube([12, 8, 4]);\n            translate([6, 0, 2])\n                cube([8, 6, 2], center=true);\n        }\n    \n    // USB ports\n    for(i = [0:1]) {\n        translate([-device_w/2 + 35 + i*12, 0, device_d/2])\n            difference() {\n                color(\"gray30\")\n                cube([8, 6, 4]);\n                translate([4, 0, 2])\n                    cube([6, 4, 2], center=true);\n            }\n    }\n    \n    // Power jack\n    translate([-device_w/2 + 5, 0, device_d/2])\n        difference() {\n            color(\"gray30\")\n            cylinder(h=4, d=8);\n            cylinder(h=5, d=4);\n        }\n}\n\n// Ventilation slots\nmodule vents() {\n    for(i = [0:3]) {\n        translate([device_w/2 - 5 - i*3, -device_h/4, 0])\n            rotate([0, 90, 0])\n            color(\"gray20\")\n            cube([device_d - 10, 1, 0.5]);\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    for(x = [-1, 1])\n    for(z = [-1, 1])\n        translate([x*device_w/3, -device_h/2, z*device_d/3])\n            rotate([90, 0, 0])\n            cylinder(h=5, d=4);\n}\n\n// Assembly\nunion() {\n    enclosure();\n    \n    translate([0, 0, 0]) {\n        display();\n        control_buttons();\n        indicators();\n        vents();\n    }\n    \n    // Ports on side\n    translate([0, 0, 0])\n        ports();\n    \n    // Mounting holes (subtractive)\n    difference() {\n        children();\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "portinterface",
    "openscad_code": "// USB-C hub / port interface – 3D-printable, medium realism\n// Approx. 70 mm × 24 mm × 14 mm\n// No overhangs >45°, 1 mm wall thickness\n\n$fn = 48;               // smoother curves\nwall = 1.2;             // printable wall thickness\ncorner = 1.5;           // edge-rounding radius\n\nmodule rounded_box(size, r) {\n    // simple rounded box for body\n    hull() {\n        for(dx=[0,size.x], dy=[0,size.y], dz=[0,size.z])\n            translate([dx,dy,dz])\n                sphere(r);\n    }\n}\n\nmodule body() {\n    difference() {\n        // outer shell\n        translate([corner,corner,corner])\n            rounded_box([70-2*corner,24-2*corner,14-2*corner], corner);\n        // hollow interior\n        translate([corner+wall,corner+wall,corner+wall])\n            rounded_box([70-2*(corner+wall),24-2*(corner+wall),14-2*(corner+wall)], corner-wall);\n    }\n}\n\nmodule usb_c_port(pos) {\n    // female USB-C receptacle\n    translate(pos)\n    difference() {\n        cube([8.3,2.5,3.5], center=true);\n        translate([0,0,-1])\n            cube([7.5,1.8,4.5], center=true);\n    }\n}\n\nmodule usb_a_port(pos, side=\"top\") {\n    // female USB-A port\n    translate(pos)\n    rotate([0,side==\"bottom\"?180:0,0])\n    difference() {\n        cube([15.8,7.5,6.0], center=true);\n        translate([0,0,-1])\n            cube([14.5,6.8,7.0], center=true);\n    }\n}\n\nmodule led_indicator(pos) {\n    // small power/status LED\n    translate(pos)\n        cylinder(h=0.5, d=2, center=true);\n}\n\nmodule button(pos) {\n    // tactile push button\n    translate(pos)\n    difference() {\n        cube([4,3,1.5], center=true);\n        translate([0,0,-1])\n            cube([3,2,2.5], center=true);\n    }\n}\n\nmodule logo(pos) {\n    // simple engraved logo (three bars)\n    translate(pos)\n    for(i=[0,4,8])\n        translate([i,0,0])\n            cube([2,10,0.5]);\n}\n\ncolor(\"black\") body();\n\n// ports along front edge\ncolor(\"gray20\") {\n    usb_c_port([7,12,0]);\n    usb_a_port([25,12,0], side=\"top\");\n    usb_a_port([45,12,0], side=\"top\");\n    usb_c_port([63,12,0]);\n}\n\n// LED and button on top\ncolor(\"green\") led_indicator([10,6,14.3]);\ncolor(\"red\")   led_indicator([10,18,14.3]);\ncolor(\"white\") button([55,12,14.5]);\n\n// subtle branding\ncolor(\"gray30\")\n    translate([30,12,14.3])\n        linear_extrude(height=0.5)\n            text(\"PORT+\", size=4, halign=\"center\", valign=\"center\");\n\n// bottom shell cutouts for vents\ndifference() {\n    color(\"black\")\n        translate([0,0,0])\n            cube([70,24,1.2]);\n    for(x=[15:10:55])\n        translate([x,12,0])\n            cube([6,20,1.3], center=true);\n}",
    "renders": true
  },
  {
    "electronic_device": "phy",
    "openscad_code": "// PHY-Ethernet Switch (8-port desktop model)\n// Overall dimensions: 90 x 60 x 25 mm (realistic 8-port switch scaled for printing)\n\n// Color constants\ncolor_case = [0.2, 0.2, 0.2];  // Dark grey plastic\ncolor_ports = [0.4, 0.4, 0.4]; // Medium grey\ncolor_leds = [0.1, 0.9, 0.1];  // Green\ncolor_label = [0.9, 0.9, 0.9]; // Light grey\ncolor_metal = [0.5, 0.5, 0.5]; // Aluminum\n\n// Main case body\nmodule switch_case() {\n    difference() {\n        // Outer shell with rounded edges\n        minkowski() {\n            cube([90, 60, 20], center=true);\n            sphere(3);\n        }\n        \n        // Hollow out inside\n        translate([0, 0, 2])\n            cube([86, 56, 20], center=true);\n        \n        // Ventilation slots on top\n        for (y = [-20:10:20]) {\n            translate([0, y, 10])\n                cube([80, 2, 3], center=true);\n        }\n    }\n}\n\n// Front panel with ports\nmodule front_panel() {\n    color(color_case) {\n        translate([0, -30, 0])\n            cube([90, 2, 15], center=true);\n    }\n    \n    // 8 Ethernet ports\n    for (i = [0:7]) {\n        translate([-35 + i*10, -30, -2]) {\n            // Port opening\n            color(color_ports)\n                difference() {\n                    cube([8, 2, 8], center=true);\n                    translate([0, 0, 2])\n                        cube([6, 3, 6], center=true);\n                }\n            \n            // LED indicator for each port\n            translate([0, -1, 4])\n                color(color_leds)\n                    sphere(1);\n        }\n    }\n    \n    // Activity LEDs\n    for (i = [0:3]) {\n        translate([-40 + i*20, -30, 5])\n            color(color_leds)\n                cylinder(h=1, r=1.5);\n    }\n}\n\n// Rear panel\nmodule rear_panel() {\n    color(color_case) {\n        translate([0, 30, 0])\n            cube([90, 2, 15], center=true);\n    }\n    \n    // Power jack\n    translate([30, 30, -2])\n        difference() {\n            cylinder(h=3, r=4);\n            cylinder(h=4, r=2);\n        }\n    \n    // Uplink port\n    translate([-30, 30, -2]) {\n        color(color_ports)\n            difference() {\n                cube([8, 2, 8], center=true);\n                translate([0, 0, 2])\n                    cube([6, 3, 6], center=true);\n            }\n    }\n}\n\n// Bottom panel with label\nmodule bottom_panel() {\n    color(color_case) {\n        translate([0, 0, -12.5])\n            cube([90, 60, 3], center=true);\n    }\n    \n    // Product label area\n    translate([0, 10, -11])\n        color(color_label)\n            cube([40, 20, 0.5], center=true);\n    \n    // Rubber feet\n    for (x = [-35, 35])\n        for (y = [-20, 20])\n            translate([x, y, -14])\n                cylinder(h=2, r=3);\n}\n\n// Assemble the switch\nunion() {\n    color(color_case) switch_case();\n    front_panel();\n    rear_panel();\n    bottom_panel();\n}",
    "renders": true
  },
  {
    "electronic_device": "mac",
    "openscad_code": "// MacBook Air M2 - Realistic Style 3D Printable Model (1:5 scale)\n\n// Color definitions\nmac_silver = [210/255, 210/255, 210/255];\nmac_dark = [50/255, 50/255, 50/255];\nscreen_black = [20/255, 20/255, 20/255];\nkeyboard_gray = [180/255, 180/255, 180/255];\napple_gray = [130/255, 130/255, 130/255];\n\n// Overall dimensions (scaled for 3D printing)\nlaptop_width = 80;\nlaptop_depth = 52;\nlaptop_thickness = 3.2;\nscreen_thickness = 2;\nbase_thickness = 5;\n\n// Base module\nmodule mac_base() {\n    // Main base body\n    color(mac_silver) {\n        difference() {\n            cube([laptop_width, laptop_depth, base_thickness], center = true);\n            \n            // Tapered edges\n            translate([0, 0, -base_thickness/2 - 0.1])\n                cube([laptop_width - 2, laptop_depth - 2, base_thickness + 0.2], center = true);\n        }\n    }\n    \n    // Keyboard area\n    color(keyboard_gray) {\n        translate([0, -5, base_thickness/2 - 0.1])\n            cube([laptop_width - 20, 25, 0.2], center = true);\n    }\n    \n    // Individual keys\n    for (x = [-30:7:30]) {\n        for (y = [-15:5:5]) {\n            color(keyboard_gray) {\n                translate([x, y, base_thickness/2])\n                    cube([5.5, 4, 0.3], center = true);\n            }\n        }\n    }\n    \n    // Trackpad\n    color(mac_dark) {\n        translate([0, 15, base_thickness/2])\n            cube([28, 18, 0.2], center = true);\n    }\n    \n    // Side ports\n    for (port = [-2, 0, 2]) {\n        translate([laptop_width/2 + 0.1, port * 6, -0.5])\n            rotate([0, 90, 0])\n                cylinder(h = 4, r = 1, $fn = 16);\n    }\n    \n    // Front indicator LED\n    color([0, 1, 0]) {\n        translate([0, -laptop_depth/2 - 0.1, -1])\n            cylinder(h = 0.5, r = 0.5, $fn = 16);\n    }\n}\n\n// Screen module\nmodule mac_screen() {\n    // Screen assembly\n    union() {\n        // Screen bezel\n        color(mac_silver) {\n            difference() {\n                cube([laptop_width, laptop_depth, screen_thickness], center = true);\n                translate([0, 0, -0.1])\n                    cube([laptop_width - 4, laptop_depth - 6, screen_thickness + 0.2], center = true);\n            }\n        }\n        \n        // Display panel\n        color(screen_black) {\n            translate([0, 0, screen_thickness/2 - 0.1])\n                cube([laptop_width - 6, laptop_depth - 8, 0.2], center = true);\n        }\n        \n        // Apple logo\n        color(apple_gray) {\n            translate([0, 10, -screen_thickness/2 - 0.1])\n                scale([1, 1.2, 1])\n                    sphere(r = 3, $fn = 32);\n            translate([0, 10, -screen_thickness/2 - 0.1])\n                scale([0.8, 1, 0.8])\n                    sphere(r = 2.4, $fn = 32);\n        }\n        \n        // Camera module\n        color(mac_dark) {\n            translate([0, -20, screen_thickness/2 - 0.1])\n                cylinder(h = 0.5, r = 1.5, $fn = 16);\n        }\n    }\n}\n\n// Hinge module\nmodule mac_hinge() {\n    // Left hinge\n    color(mac_silver) {\n        translate([-laptop_width/2 + 5, -laptop_depth/2, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 4, r = 1.5, $fn = 16);\n    }\n    \n    // Right hinge\n    color(mac_silver) {\n        translate([laptop_width/2 - 5, -laptop_depth/2, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 4, r = 1.5, $fn = 16);\n    }\n}\n\n// Assembly\ntranslate([0, 0, base_thickness/2])\n    mac_base();\n\ntranslate([0, 0, base_thickness + 2 + screen_thickness/2])\n    rotate([0, 110, 0])\n        mac_screen();\n\nmac_hinge();",
    "renders": true
  },
  {
    "electronic_device": "nic",
    "openscad_code": "// OpenSCAD 3D-printable NIC (Network Interface Card) – medium-realistic style\n// Overall size approx 110 mm × 68 mm × 18 mm – fits common printer beds\n// All walls ≥ 1.2 mm, no steep overhangs\n\n$fa = 1; $fs = 0.5;\n\n// ---------- color constants ----------\npcb_col   = [0.18,0.28,0.12];\nbracket_col = [0.75,0.75,0.75];\nchip_col  = [0.15,0.15,0.15];\nscreen_col = [0.1,0.1,0.1];\nled_col   = [0,1,0];\ngold_col  = [0.8,0.65,0.2];\n\n// ---------- main assembly ----------\nmodule nic_card() {\n    union() {\n        color(pcb_col) pcb();\n        color(bracket_col) bracket();\n        color(chip_col) main_chip();\n        color(chip_col) small_chips();\n        color(gold_col) gold_fingers();\n        color(led_col) leds();\n        color(screen_col) activity_display();\n        screw_holes();  // negative\n    }\n}\n\n// ---------- PCB ----------\nmodule pcb() {\n    difference() {\n        union() {\n            // main board body\n            translate([0,0,0]) cube([110,68,1.6], center=true);\n            // raised RJ45 area\n            translate([42,0,1.6/2+7.5/2]) cube([26,16,7.5], center=true);\n        }\n        // keep-out zone for bracket cut-out\n        translate([-110/2-1,0,-2]) cube([20,20,4], center=true);\n    }\n}\n\n// ---------- bracket ----------\nmodule bracket() {\n    difference() {\n        // bracket plate\n        translate([-110/2,0,9]) cube([2,68,18], center=true);\n        // screw slots\n        for (y = [-28,28])\n            translate([-110/2-1,y,9]) rotate([0,90,0]) cylinder(h=4,d=3.2,center=true,$fn=20);\n    }\n}\n\n// ---------- main Ethernet controller chip ----------\nmodule main_chip() {\n    translate([-15,0,1.6/2+2.5/2]) cube([25,25,2.5], center=true);\n}\n\n// ---------- auxiliary chips and caps ----------\nmodule small_chips() {\n    // flash\n    translate([35,25,1.6/2+1.5/2]) cube([12,8,1.5], center=true);\n    // voltage regulator\n    translate([35,-25,1.6/2+1.5/2]) cube([10,6,1.5], center=true);\n    // SMD capacitors (row)\n    for (x = [-40:10:-10])\n        translate([x,-10,1.6/2+1.2/2]) cube([3,2,1.2], center=true);\n}\n\n// ---------- gold fingers (edge fingers) ----------\nmodule gold_fingers() {\n    for (i = [0:7]) {\n        translate([110/2-3, -34+4.5+i*7.8, -1.6/2-0.2/2])\n            cube([6,1.2,0.2]);\n    }\n}\n\n// ---------- activity LEDs ----------\nmodule leds() {\n    translate([42,5,1.6/2+7.5+1.5]) cylinder(h=1.5,d=3,center=true,$fn=16);\n    translate([42,-5,1.6/2+7.5+1.5]) cylinder(h=1.5,d=3,center=true,$fn=16);\n}\n\n// ---------- RJ45 port ----------\nmodule activity_display() {\n    difference() {\n        // RJ45 opening\n        translate([42,0,1.6/2+7.5-2]) cube([14,16,4], center=true);\n        // 8-pin slot\n        translate([42,0,1.6/2+7.5-2-0.5]) cube([12,2,1], center=true);\n    }\n}\n\n// ---------- screw holes for fixing the PCB ----------\nmodule screw_holes() {\n    for (p = [[-45,-25],[45,-25],[45,25],[-45,25]])\n        translate([p[0],p[1],0]) cylinder(h=1.6+0.2,d=3.2,center=true,$fn=20);\n}\n\n// ---------- render ----------\nnic_card();",
    "renders": true
  },
  {
    "electronic_device": "hba",
    "openscad_code": "// HBA (Host Bus Adapter) Card - Realistic Style\n// 3D printable model with medium complexity\n\n// Color definitions\n$fn = 50;\n\n// Main dimensions\npcb_length = 80;\npcb_width = 64;\npcb_thick = 1.6;\n\n// Components\nmodule pcb() {\n    difference() {\n        // Main PCB\n        color([0.1, 0.7, 0.1]) \n        cube([pcb_length, pcb_width, pcb_thick], center=true);\n        \n        // Mounting holes\n        for(x = [-pcb_length/2 + 7, pcb_length/2 - 7]) {\n            for(y = [-pcb_width/2 + 4, pcb_width/2 - 4]) {\n                translate([x, y, 0])\n                cylinder(h=pcb_thick+1, r=1.5, center=true);\n            }\n        }\n    }\n}\n\nmodule pcie_connector() {\n    // PCIe x4 connector\n    color([0.2, 0.2, 0.2])\n    translate([-pcb_length/2 - 8, 0, -pcb_thick/2])\n    cube([8, 20, pcb_thick]);\n    \n    // Contact fingers\n    for(i = [0:3]) {\n        translate([-pcb_length/2 - 8 + i*2, -8, -pcb_thick/2])\n        color([0.9, 0.9, 0.9])\n        cube([2, 16, pcb_thick]);\n    }\n}\n\nmodule heatsink() {\n    // Main heatsink body\n    color([0.5, 0.5, 0.5])\n    translate([0, 0, pcb_thick/2])\n    cube([25, 25, 12]);\n    \n    // Fins\n    for(i = [-10:5:10]) {\n        translate([i, -12, pcb_thick/2])\n        cube([3, 24, 12]);\n    }\n}\n\nmodule sfp_cage() {\n    // SFP+ cage\n    color([0.3, 0.3, 0.3])\n    translate([pcb_length/2 - 20, -pcb_width/2 + 15, -pcb_thick/2])\n    cube([20, 30, 8]);\n    \n    // SFP+ port opening\n    translate([pcb_length/2 - 15, -pcb_width/2 + 15, 0])\n    cube([10, 8, 6]);\n}\n\nmodule status_leds() {\n    // Activity LEDs\n    translate([pcb_length/2 - 30, pcb_width/2 - 5, pcb_thick/2 + 1])\n    color([0, 1, 0]) sphere(r=1);\n    \n    translate([pcb_length/2 - 30, pcb_width/2 - 10, pcb_thick/2 + 1])\n    color([1, 1, 0]) sphere(r=1);\n}\n\nmodule bracket() {\n    // Metal bracket\n    color([0.8, 0.8, 0.8])\n    translate([-pcb_length/2 - 8, 0, -pcb_thick/2 - 10])\n    cube([8, 120, 1.5]);\n    \n    // Screw hole\n    translate([-pcb_length/2 - 4, 0, -pcb_thick/2 - 10])\n    cylinder(h=2, r=2.5);\n}\n\nmodule capacitors() {\n    // Tall electrolytic capacitors\n    for(i = [-15:15:15]) {\n        translate([i, 0, pcb_thick/2])\n        color([0.1, 0.1, 0.1])\n        cylinder(h=10, r=2.5);\n    }\n}\n\nmodule ic_chips() {\n    // Main controller chip\n    translate([0, 10, pcb_thick/2])\n    color([0.1, 0.1, 0.1])\n    cube([12, 12, 2]);\n    \n    // Flash chip\n    translate([20, -10, pcb_thick/2])\n    color([0.1, 0.1, 0.1])\n    cube([8, 8, 1.5]);\n}\n\nmodule hba_assembly() {\n    union() {\n        pcb();\n        pcie_connector();\n        heatsink();\n        sfp_cage();\n        status_leds();\n        bracket();\n        capacitors();\n        ic_chips();\n    }\n}\n\n// Render the complete HBA\nhba_assembly();",
    "renders": true
  },
  {
    "electronic_device": "sfp",
    "openscad_code": "// Realistic SFP (Small Form-factor Pluggable) transceiver module\n// Medium complexity model with proper proportions for 3D printing\n\n// Main body\nmodule sfp_body() {\n    color(\"silver\") {\n        difference() {\n            // Main rectangular housing\n            cube([13.4, 56.5, 8.5], center=true);\n            \n            // Top label recess\n            translate([0, -20, 4.2])\n                cube([12.5, 15, 0.3], center=true);\n            \n            // Bottom ventilation slots\n            for(i = [-20:5:20]) {\n                translate([0, i, -4.3])\n                    cube([11, 2, 0.3], center=true);\n            }\n        }\n        \n        // Side latching mechanism\n        translate([6.8, 12, 0])\n            rotate([0, 90, 0])\n                cylinder(h=2, r=1.5, center=true);\n        \n        translate([-6.8, 12, 0])\n            rotate([0, 90, 0])\n                cylinder(h=2, r=1.5, center=true);\n    }\n}\n\n// Metal cage\nmodule sfp_cage() {\n    color(\"dimgray\") {\n        difference() {\n            // Main cage\n            cube([13.7, 57, 8.8], center=true);\n            \n            // Hollow center\n            cube([12.8, 56, 8], center=true);\n        }\n        \n        // Spring contacts\n        for(i = [-24:2:24]) {\n            translate([6.85, i, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=2, r=0.3, center=true);\n        }\n    }\n}\n\n// Optical port\nmodule optical_port() {\n    color(\"black\") {\n        // LC duplex port\n        translate([0, -28.25, 0])\n            difference() {\n                cube([9, 6, 6], center=true);\n                \n                // Left LC port\n                translate([-2.25, 0, 0])\n                    cylinder(h=7, r=1.25, center=true);\n                \n                // Right LC port\n                translate([2.25, 0, 0])\n                    cylinder(h=7, r=1.25, center=true);\n            }\n    }\n}\n\n// Electrical contacts\nmodule electrical_contacts() {\n    color(\"gold\") {\n        // Contact fingers\n        for(i = [0:0.8:11.2]) {\n            translate([i - 5.6, 28.25, -2.5])\n                cube([0.65, 0.3, 2], center=true);\n        }\n        \n        // Key notch\n        translate([2.5, 28.25, -3.5])\n            cube([2, 0.5, 1], center=true);\n    }\n}\n\n// Status LED window\nmodule status_led() {\n    color(\"darkgreen\") {\n        translate([0, 10, 4.3])\n            cube([2, 1.5, 0.5], center=true);\n    }\n}\n\n// Label details\nmodule label_details() {\n    color(\"white\") {\n        // Model number text (simplified)\n        translate([0, -20, 4.4])\n            cube([10, 0.5, 0.1], center=true);\n        \n        translate([0, -18, 4.4])\n            cube([8, 0.5, 0.1], center=true);\n    }\n}\n\n// Assembly\nsfp_cage();\ntranslate([0, 0, 0])\n    sfp_body();\ntranslate([0, 0, 0])\n    optical_port();\ntranslate([0, 0, 0])\n    electrical_contacts();\ntranslate([0, 0, 0])\n    status_led();\ntranslate([0, 0, 0])\n    label_details();",
    "renders": true
  },
  {
    "electronic_device": "qsfp",
    "openscad_code": "// QSFP+ transceiver module – realistic, medium complexity\n// Body dimensions roughly 18 mm x 72 mm x 8.5 mm\n\n$fn = 36;               // smooth curves\n\n// Color scheme\nc_body = \"SlateGray\";\nc_metal = \"Silver\";\nc_plastic = \"Black\";\nc_led = \"Red\";\n\n// Overall scale so largest dimension ≈ 70 mm\nscale_factor = 1.0;\n\n// -------------------- Main assembly --------------------\nmodule qsfp() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        main_shell();\n        cage();\n        latch();\n        label();\n        // 4 LEDs on the front face\n        for(led = [-3, -1, 1, 3])\n            translate([0, 37, led * 2.2])\n                color(c_led) led_indicator();\n    }\n}\n\n// -------------------- Plastic housing --------------------\nmodule main_shell() {\n    difference() {\n        // Main body block\n        color(c_body) translate([0, 0, 0])\n            cube([18, 72, 8.5], center = true);\n\n        // Internal cavity (wall 1.2 mm)\n        translate([0, 0, 0])\n            cube([18 - 2.4, 72 - 2.4, 8.5 - 1.2], center = true);\n\n        // PCB slot (front)\n        translate([0, 34, 0])\n            cube([1.5, 10, 1.6], center = true);\n\n        // Pull-tab slot (rear)\n        translate([0, -33, 0])\n            cube([16, 5, 4], center = true);\n    }\n\n    // Beveled front edge\n    difference() {\n        translate([0, 36, 0])\n            cube([18, 2, 8.5], center = true);\n        translate([0, 37, 0])\n            rotate([0, 22.5, 0])\n                cube([20, 5, 10], center = true);\n    }\n}\n\n// -------------------- Metal cage --------------------\nmodule cage() {\n    difference() {\n        // Cage shell\n        color(c_metal)\n        minkowski() {\n            cube([19.2, 70, 9.7], center = true);\n            sphere(0.5);\n        }\n\n        // Cut out the inside\n        cube([17.4, 68, 8.5], center = true);\n\n        // Spring fingers (top & bottom)\n        for(y = [-25:10:25])\n            translate([0, y, 6])\n                cube([20, 3, 3], center = true);\n        for(y = [-25:10:25])\n            translate([0, y, -6])\n                cube([20, 3, 3], center = true);\n    }\n}\n\n// -------------------- Pull-tab latch --------------------\nmodule latch() {\n    color(c_plastic)\n    translate([0, -33, -2.5])\n    union() {\n        // Tab\n        translate([0, -5, 0])\n            cube([14, 10, 0.8], center = true);\n\n        // Grips\n        for(i = [-6:2:6])\n            translate([i, -10, 0])\n                cube([1.5, 2, 0.8], center = true);\n    }\n}\n\n// -------------------- Label / silkscreen --------------------\nmodule label() {\n    color(\"White\")\n    translate([0, 25, 4.4])\n        rotate([90, 0, 0])\n            linear_extrude(0.1)\n                text(\"QSFP-40G-SR4\", size = 2.5, halign = \"center\");\n}\n\n// -------------------- LED indicator --------------------\nmodule led_indicator() {\n    cylinder(h = 0.5, d = 1.2, center = true);\n}\n\n// -------------------- Render --------------------\nqsfp();",
    "renders": true
  },
  {
    "electronic_device": "gbic",
    "openscad_code": "// GBIC Transceiver Module - Realistic Style with Medium Complexity\n// Dimensions based on standard GBIC size (72mm x 28mm x 12mm)\n\n// Main housing\nmodule gbic_body() {\n    // Outer shell - aluminum extrusion style\n    difference() {\n        // Main rectangular body\n        color(\"silver\") \n        translate([-36, -14, -6])\n            cube([72, 28, 12]);\n        \n        // Top ventilation slots\n        for(i = [-30:10:30]) {\n            translate([i, -14, 5])\n                cube([8, 28, 2]);\n        }\n        \n        // Side ventilation holes\n        for(i = [-25:8:25]) {\n            translate([i, -14, 3])\n                rotate([90, 0, 0])\n                    cylinder(h=28, r=1.5, $fn=8);\n        }\n    }\n    \n    // Front plastic bezel\n    color(\"black\")\n    translate([-36, -14, -6])\n        cube([5, 28, 12]);\n    \n    // Rear plastic bezel\n    color(\"black\")\n    translate([31, -14, -6])\n        cube([5, 28, 12]);\n}\n\n// Optical connector ports\nmodule optical_ports() {\n    // LC duplex connector openings\n    color(\"black\")\n    translate([-36, -3, -2])\n        rotate([90, 0, 0])\n            cylinder(h=6, r=3.5, $fn=20);\n    \n    color(\"black\")\n    translate([-36, -3, 2])\n        rotate([90, 0, 0])\n            cylinder(h=6, r=3.5, $fn=20);\n    \n    // Connector alignment pins\n    color(\"silver\")\n    translate([-36, -3, -2])\n        rotate([90, 0, 0])\n            cylinder(h=2, r=1.25, $fn=16);\n    \n    translate([-36, -3, 2])\n        rotate([90, 0, 0])\n            cylinder(h=2, r=1.25, $fn=16);\n}\n\n// Electrical interface (bottom contacts)\nmodule electrical_interface() {\n    // Contact pad strip\n    color(\"gold\")\n    translate([24, -12, -6])\n        cube([12, 24, 0.5]);\n    \n    // Individual contact pads\n    for(i = [0:11]) {\n        color(\"gold\")\n        translate([35 - i*1.02, -11, -5.9])\n            cube([0.8, 22, 0.3]);\n    }\n    \n    // Keying notch\n    difference() {\n        color(\"black\")\n        translate([28, -12, -6])\n            cube([3, 24, 0.5]);\n        \n        color(\"silver\")\n        translate([29.5, -10, -6])\n            cube([0.5, 20, 0.5]);\n    }\n}\n\n// Status LEDs\nmodule status_leds() {\n    // TX LED\n    color(\"lime\")\n    translate([-32, 12, 1])\n        sphere(r=1.5, $fn=12);\n    \n    // RX LED\n    color(\"lime\")\n    translate([-32, 12, -1])\n        sphere(r=1.5, $fn=12);\n    \n    // LED bezels\n    color(\"black\")\n    translate([-32, 12, 0])\n        rotate([90, 0, 0])\n            cylinder(h=1, r1=2, r2=2.5, $fn=12);\n}\n\n// Identification label\nmodule label_area() {\n    // Label recess\n    color(\"black\")\n    translate([0, -13, 6.1])\n        cube([20, 26, 0.2]);\n    \n    // Model text (simplified as grooves)\n    for(i = [-8:2:8]) {\n        color(\"black\")\n        translate([i, -12, 6.2])\n            cube([0.5, 24, 0.1]);\n    }\n}\n\n// Assembly\nunion() {\n    gbic_body();\n    optical_ports();\n    electrical_interface();\n    status_leds();\n    label_area();\n}",
    "renders": true
  },
  {
    "electronic_device": "xfp",
    "openscad_code": "// XFP Transceiver Module (Medium Complexity Realistic Model)\n\n// Color definitions\n$fn = 50;\n\n// Main dimensions (scaled for 3D printing)\nmodule_length = 78.0;\nmodule_width = 18.5;\nmodule_height = 8.5;\n\n// Main body\nmodule main_body() {\n    color(\"silver\") \n    difference() {\n        // Main rectangular body\n        translate([0, 0, module_height/2])\n            cube([module_length, module_width, module_height], center=true);\n        \n        // Top cutout for latch mechanism\n        translate([module_length/2 - 15, 0, module_height - 2])\n            cube([30, 16, 4], center=true);\n        \n        // Side indentations for grip\n        for (i = [-1, 1]) {\n            translate([module_length/2 - 25, i * (module_width/2 + 0.1), module_height/2])\n                rotate([0, 90, 0])\n                    cylinder(h=5, r1=2, r2=2, center=true);\n        }\n    }\n}\n\n// Metal cage\nmodule metal_cage() {\n    color(\"gray20\") {\n        // Front bezel\n        translate([module_length/2 - 0.5, 0, module_height/2 - 0.5])\n            cube([1, module_width + 0.2, module_height - 1], center=true);\n        \n        // Bottom plate\n        translate([0, 0, 0.25])\n            cube([module_length, module_width, 0.5], center=true);\n    }\n}\n\n// Optical ports\nmodule optical_ports() {\n    color(\"black\") {\n        // LC duplex connector holes\n        for (i = [-1, 1]) {\n            translate([module_length/2 - 1, i * 4.5, module_height/2 - 1])\n                cylinder(h=3, r=2.5, center=true);\n        }\n        \n        // Dust plug stoppers\n        for (i = [-1, 1]) {\n            translate([module_length/2 - 1, i * 4.5, module_height/2 - 3])\n                cylinder(h=2, r=3, center=true);\n        }\n    }\n}\n\n// Latch mechanism\nmodule latch() {\n    color(\"black\") {\n        // Latch base\n        translate([module_length/2 - 10, 0, module_height])\n            cube([20, 12, 2], center=true);\n        \n        // Latch tab\n        translate([module_length/2 - 5, 0, module_height + 1.5])\n            cube([10, 8, 3], center=true);\n    }\n}\n\n// PCB visible through bottom\nmodule pcb() {\n    color(\"green\") {\n        translate([0, 0, 0.75])\n            cube([module_length - 4, module_width - 2, 0.5], center=true);\n        \n        // Gold fingers\n        color(\"gold\") {\n            for (i = [0:29]) {\n                translate([-module_length/2 + 2 + i*2.5, 0, 1.25])\n                    cube([1, module_width - 4, 0.2], center=true);\n            }\n        }\n    }\n}\n\n// Heat sink fins\nmodule heat_sink() {\n    color(\"silver\") {\n        for (i = [0:7]) {\n            translate([-module_length/2 + 10 + i*7, 0, module_height + 2])\n                cube([5, module_width - 2, 3], center=true);\n        }\n    }\n}\n\n// Label area\nmodule label() {\n    color(\"white\") {\n        translate([-module_length/2 + 15, 0, module_height - 0.5])\n            cube([25, 12, 0.1], center=true);\n    }\n}\n\n// LED indicators\nmodule led_indicators() {\n    // TX LED\n    color(\"red\") {\n        translate([module_length/2 - 3, 6, module_height/2 + 1])\n            cylinder(h=1, r=1, center=true);\n    }\n    \n    // RX LED\n    color(\"green\") {\n        translate([module_length/2 - 3, -6, module_height/2 + 1])\n            cylinder(h=1, r=1, center=true);\n    }\n}\n\n// Assembly\nmain_body();\nmetal_cage();\noptical_ports();\nlatch();\npcb();\nheat_sink();\nlabel();\nled_indicators();",
    "renders": true
  },
  {
    "electronic_device": "cxfp",
    "openscad_code": "// CXFP Handheld Gaming Console - Realistic Style, Medium Complexity\n// Overall dimensions: 95mm x 55mm x 18mm\n\n$fn = 64;\n\n// Main console body\nmodule console_body() {\n    color([0.15, 0.15, 0.15])\n    difference() {\n        // Main shell\n        hull() {\n            translate([-45, -25, 0]) cylinder(h=15, r=5);\n            translate([45, -25, 0]) cylinder(h=15, r=5);\n            translate([45, 25, 0]) cylinder(h=15, r=5);\n            translate([-45, 25, 0]) cylinder(h=15, r=5);\n        }\n        \n        // Screen cavity\n        translate([-42, -22, 15]) cube([84, 44, 3]);\n        \n        // Button holes\n        translate([-30, 0, 15]) cylinder(h=3, r=3);\n        translate([-15, 0, 15]) cylinder(h=3, r=3);\n        translate([15, 0, 15]) cylinder(h=3, r=3);\n        translate([30, 0, 15]) cylinder(h=3, r=3);\n        \n        // Speaker grilles\n        for(x = [-25, 25]) {\n            for(y = [-15, -10, -5]) {\n                translate([x, y, 15]) cylinder(h=3, r=1);\n            }\n        }\n    }\n}\n\n// LCD screen\nmodule lcd_screen() {\n    color([0.05, 0.05, 0.05])\n    translate([-40, -20, 15])\n    cube([80, 40, 0.5]);\n    \n    color([0.1, 0.2, 0.3])\n    translate([-38, -18, 15.6])\n    cube([76, 36, 0.1]);\n}\n\n// D-pad\nmodule dpad() {\n    color([0.8, 0.8, 0.8])\n    union() {\n        // Center\n        translate([-30, 0, 18]) cylinder(h=2, r=4);\n        \n        // Up\n        translate([-30, 5, 18]) cube([6, 4, 2], center=true);\n        \n        // Down\n        translate([-30, -5, 18]) cube([6, 4, 2], center=true);\n        \n        // Left\n        translate([-35, 0, 18]) cube([4, 6, 2], center=true);\n        \n        // Right\n        translate([-25, 0, 18]) cube([4, 6, 2], center=true);\n    }\n}\n\n// Action buttons\nmodule action_buttons() {\n    color([0.9, 0.1, 0.1])\n    translate([30, 5, 18]) cylinder(h=2, r=3);\n    \n    color([0.1, 0.9, 0.1])\n    translate([30, -5, 18]) cylinder(h=2, r=3);\n    \n    color([0.1, 0.1, 0.9])\n    translate([25, 0, 18]) cylinder(h=2, r=3);\n    \n    color([0.9, 0.9, 0.1])\n    translate([35, 0, 18]) cylinder(h=2, r=3);\n}\n\n// Menu buttons\nmodule menu_buttons() {\n    color([0.5, 0.5, 0.5])\n    union() {\n        translate([-15, 0, 18]) cylinder(h=2, r=2.5);\n        translate([15, 0, 18]) cylinder(h=2, r=2.5);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    color([0.2, 0.2, 0.2])\n    translate([0, -27.5, 7])\n    cube([8, 2, 4]);\n}\n\n// Headphone jack\nmodule headphone_jack() {\n    color([0.2, 0.2, 0.2])\n    translate([-20, -27.5, 10])\n    cylinder(h=2, r=3);\n}\n\n// Volume buttons\nmodule volume_buttons() {\n    color([0.3, 0.3, 0.3])\n    union() {\n        translate([47, 10, 12]) cube([2, 4, 2]);\n        translate([47, 15, 12]) cube([2, 4, 2]);\n    }\n}\n\n// Power button\nmodule power_button() {\n    color([0.9, 0.9, 0.9])\n    translate([47, -15, 12]) cube([2, 6, 2]);\n}\n\n// Logo\nmodule logo() {\n    color([1, 0.5, 0])\n    translate([0, 0, 15.7])\n    linear_extrude(height=0.2) {\n        text(\"CXFP\", size=6, halign=\"center\", valign=\"center\");\n    }\n}\n\n// Main assembly\nconsole_body();\nlcd_screen();\ndpad();\naction_buttons();\nmenu_buttons();\nusb_port();\nheadphone_jack();\nvolume_buttons();\npower_button();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "osfp",
    "openscad_code": "// OSFP (Octal Small Form-factor Pluggable) transceiver module\n// Realistic style, medium complexity\n\n$fn = 50;  // Smooth curves for realism\n\n// Main module\nmodule osfp_module() {\n    // Colors\n    color(\"silver\") {  // Main body - aluminum\n        // Main housing with heatsink fins\n        difference() {\n            // Main rectangular body\n            translate([0, 0, 5]) cube([22.6, 107.8, 8.5], center=true);\n            \n            // Internal cavity for electronics\n            translate([0, 20, 5]) cube([20, 60, 6], center=true);\n            \n            // Cutout for PCB edge connector\n            translate([0, -52, 0]) cube([18, 12, 4], center=true);\n        }\n        \n        // Heatsink fins on top\n        for(i = [-40:12:40]) {\n            translate([0, i, 9.5]) cube([20, 8, 2], center=true);\n        }\n        \n        // Front face with connector opening\n        difference() {\n            translate([0, -52.9, 5]) cube([22.6, 2, 8.5], center=true);\n            // MPO/MTP connector opening (8 fibers)\n            translate([0, -52.9, 5]) cube([16, 2, 6], center=true);\n        }\n    }\n    \n    // PCB edge connector gold fingers\n    color(\"gold\") {\n        for(i = [-45:5:45]) {\n            translate([0, -52, i-2]) cube([18, 1, 0.5], center=true);\n        }\n    }\n    \n    // Side latching mechanism\n    color(\"black\") {\n        // Left latch\n        translate([-11.8, -45, 5]) {\n            difference() {\n                cube([2, 15, 3], center=true);\n                translate([0, -6, 0]) cube([2.5, 3, 4], center=true);\n            }\n        }\n        \n        // Right latch\n        translate([11.8, -45, 5]) {\n            difference() {\n                cube([2, 15, 3], center=true);\n                translate([0, -6, 0]) cube([2.5, 3, 4], center=true);\n            }\n        }\n    }\n    \n    // Top label area\n    color(\"white\") {\n        translate([0, 0, 10.5]) cube([18, 40, 0.1], center=true);\n    }\n    \n    // Status LEDs on top\n    color(\"green\") {\n        translate([-7, 25, 10.5]) cylinder(h=0.5, r=1.5);\n    }\n    color(\"red\") {\n        translate([7, 25, 10.5]) cylinder(h=0.5, r=1.5);\n    }\n    \n    // Pull tab on front\n    color(\"blue\") {\n        translate([0, -58, 3]) {\n            difference() {\n                cube([12, 10, 0.5], center=true);\n                // Rounded edges\n                translate([0, 5, 0]) cylinder(h=0.5, r=6);\n                translate([0, -5, 0]) cylinder(h=0.5, r=6);\n            }\n        }\n    }\n    \n    // Ventilation holes\n    color(\"silver\") {\n        for(i = [-30:10:30]) {\n            for(j = [-11:5:11]) {\n                translate([j, i, 8]) cylinder(h=2, r=0.5);\n            }\n        }\n    }\n}\n\n// Assembly\nosfp_module();",
    "renders": true
  },
  {
    "electronic_device": "cage",
    "openscad_code": "// Cage electronic device - WiFi router in protective cage\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Overall dimensions\ncage_width = 80;\ncage_height = 60;\ncage_depth = 90;\n\n// Router dimensions\nrouter_width = 60;\nrouter_height = 35;\nrouter_depth = 80;\n\n// Material thickness\nwall_thickness = 2;\nbar_thickness = 3;\n\n// Colors\ncolor_cage = [0.7, 0.7, 0.7]; // Gray metal\ncolor_router = [0.2, 0.2, 0.2]; // Dark plastic\ncolor_led = [0, 1, 0]; // Green LED\ncolor_antenna = [0.3, 0.3, 0.3]; // Dark gray\n\n// Main assembly\ndifference() {\n    // Main cage frame\n    union() {\n        // Bottom plate\n        color(color_cage)\n        translate([0, 0, 0])\n            cube([cage_width, cage_depth, wall_thickness], center = true);\n        \n        // Top plate\n        color(color_cage)\n        translate([0, 0, cage_height])\n            cube([cage_width, cage_depth, wall_thickness], center = true);\n        \n        // Corner posts\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                color(color_cage)\n                translate([x * (cage_width/2 - bar_thickness/2), y * (cage_depth/2 - bar_thickness/2), cage_height/2])\n                    rotate([0, 90, 0])\n                    cylinder(h = cage_height, r = bar_thickness/2, center = true);\n            }\n        }\n        \n        // Side bars\n        for(i = [-3:3]) {\n            // Left side bars\n            color(color_cage)\n            translate([-cage_width/2 + bar_thickness/2, i * 10, cage_height/2])\n                cube([bar_thickness, bar_thickness, cage_height - wall_thickness*2]);\n            \n            // Right side bars\n            color(color_cage)\n            translate([cage_width/2 - bar_thickness/2, i * 10, cage_height/2])\n                cube([bar_thickness, bar_thickness, cage_height - wall_thickness*2]);\n        }\n        \n        // Front/back bars\n        for(i = [-3:3]) {\n            color(color_cage)\n            translate([i * 10, -cage_depth/2 + bar_thickness/2, cage_height/2])\n                cube([bar_thickness, bar_thickness, cage_height - wall_thickness*2]);\n            \n            color(color_cage)\n            translate([i * 10, cage_depth/2 - bar_thickness/2, cage_height/2])\n                cube([bar_thickness, bar_thickness, cage_height - wall_thickness*2]);\n        }\n    }\n    \n    // Interior cutout for router\n    translate([0, 0, cage_height/2])\n        cube([router_width + 10, router_depth + 10, cage_height + 2], center = true);\n}\n\n// Router body\ntranslate([0, 0, wall_thickness + router_height/2])\n    difference() {\n        // Main router case\n        color(color_router)\n        cube([router_width, router_depth, router_height], center = true);\n        \n        // Front face details\n        // LED indicators\n        for(i = [0:3]) {\n            color(color_led)\n            translate([router_width/2 + 0.1, -15 + i * 10, 5 - i * 3])\n                cube([1, 3, 3]);\n        }\n        \n        // Ethernet ports (4 ports)\n        for(i = [0:3]) {\n            translate([router_width/2 - 5, -25 + i * 15, -5])\n                rotate([0, 90, 0])\n                cylinder(h = 10, r = 3, center = true);\n        }\n        \n        // Power port\n        translate([router_width/2 - 5, 25, -5])\n            rotate([0, 90, 0])\n            cylinder(h = 10, r = 5, center = true);\n        \n        // Ventilation slots on top\n        for(i = [-2:2]) {\n            translate([i * 10, 0, router_height/2 - 1])\n                cube([3, router_depth - 10, 2]);\n        }\n    }\n\n// Antennas (2 external antennas)\nmodule antenna() {\n    color(color_antenna)\n    union() {\n        // Base\n        cylinder(h = 5, r = 4);\n        \n        // Antenna rod\n        translate([0, 0, 5])\n            rotate([0, 90, 0])\n            cylinder(h = 25, r = 1.5);\n    }\n}\n\n// Left antenna\ntranslate([-router_width/2 - 5, -router_depth/2 + 10, wall_thickness + router_height - 5])\n    antenna();\n\n// Right antenna\ntranslate([router_width/2 + 5, -router_depth/2 + 10, wall_thickness + router_height - 5])\n    rotate([0, 0, 180])\n    antenna();\n\n// Cooling fan grill on bottom\ntranslate([0, 0, wall_thickness - 1])\n    difference() {\n        color(color_router)\n        cube([20, 20, 2], center = true);\n        \n        for(x = [-2:2]) {\n            for(y = [-2:2]) {\n                translate([x * 3, y * 3, 0])\n                    cylinder(h = 3, r = 1);\n            }\n        }\n    }",
    "renders": true
  },
  {
    "electronic_device": "receptacle",
    "openscad_code": "// USB-A wall receptacle with two outlets and a single-gang wall plate\n// Overall footprint ~70mm x 115mm x 25mm – printable on most FDM printers\n\n// wall thickness for 3D printing\nwall = 1.6;\n\nmodule rounded_box(s, r) {\n    // simple rounded box primitive for main body\n    translate([r, r, 0])\n        minkowski() {\n            cube([s.x-2*r, s.y-2*r, s.z]);\n            cylinder(h=s.z, r=r, $fn=16);\n        }\n}\n\nmodule face_plate() {\n    // main wall plate\n    color(\"white\")\n    difference() {\n        rounded_box([70, 115, 4], 4);\n        // screw holes top & bottom\n        for(y=[20, 95])\n            translate([35, y, -1])\n                cylinder(h=6, r=1.6, $fn=16);\n    }\n}\n\nmodule outlet_cutouts() {\n    // remove rectangular openings for outlets\n    for(y=[30, 70])\n        translate([35, y, -1])\n            cube([25, 22, 6], center=true);\n}\n\nmodule outlet_interior() {\n    // internal yokes for screws and contacts\n    color(\"darkslategray\")\n    union() {\n        for(y=[30, 70])\n            translate([35, y, 2])\n                cube([27, 24, wall], center=true);\n    }\n}\n\nmodule usb_module() {\n    // small USB-A charging module centered between outlets\n    color(\"black\")\n    translate([35, 50, 2])\n        cube([20, 12, 8]);\n    // USB-A port slot\n    color(\"dimgray\")\n    translate([35, 50, 2+wall])\n        cube([12, 2, 6], center=true);\n}\n\nmodule grounding_screw() {\n    // green grounding screw visible in center\n    color(\"green\")\n    translate([35, 50, 0])\n        cylinder(h=3, r=1.5, $fn=12);\n}\n\n// main assembly\ndifference() {\n    face_plate();\n    outlet_cutouts();\n}\noutlet_interior();\nusb_module();\ngrounding_screw();",
    "renders": true
  },
  {
    "electronic_device": "coupler",
    "openscad_code": "// Coupler Electronic Device - Realistic Style, Medium Complexity\n// RF/Audio Coupler with Display and Controls\n\n// Color definitions\ncolor_case = [0.2, 0.2, 0.2];      // Dark gray\ncolor_screen = [0.1, 0.1, 0.1];   // Black\ncolor_ports = [0.8, 0.8, 0.8];    // Light gray\ncolor_leds = [1, 0, 0];           // Red\ncolor_buttons = [0.4, 0.4, 0.4];  // Medium gray\n\n// Main dimensions\ncase_width = 60;\ncase_height = 30;\ncase_depth = 80;\nwall_thickness = 2;\n\n// Module for rounded edges\nmodule rounded_cube(size, radius, center=false) {\n    translate(center ? [-size[0]/2, -size[1]/2, -size[2]/2] : [0,0,0]) {\n        hull() {\n            for(x = [0, size[0]])\n                for(y = [0, size[1]])\n                    for(z = [0, size[2]])\n                        translate([x, y, z]) \n                            sphere(r=radius, $fn=12);\n        }\n    }\n}\n\n// Main case\nmodule main_case() {\n    color(color_case) {\n        difference() {\n            rounded_cube([case_width, case_height, case_depth], 3);\n            // Hollow out the inside\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                rounded_cube([\n                    case_width-2*wall_thickness, \n                    case_height-2*wall_thickness, \n                    case_depth-2*wall_thickness\n                ], 2);\n        }\n    }\n}\n\n// OLED display module\nmodule display() {\n    color(color_screen) {\n        translate([case_width/2-25, case_height-8, case_depth/2-15]) {\n            cube([30, 2, 20]);\n            // Screen surface\n            translate([2, 0.5, 2])\n                color([0.9, 0.9, 0.9])\n                cube([26, 0.5, 16]);\n        }\n    }\n}\n\n// Input ports (BNC connectors)\nmodule bnc_connector(x_pos, label) {\n    color(color_ports) {\n        translate([x_pos, case_height/2, 0]) {\n            // Main connector body\n            cylinder(h=8, r1=6, r2=6, $fn=20);\n            // Threaded section\n            translate([0, 0, 8])\n                cylinder(h=4, r1=5, r2=5, $fn=16);\n            // Center pin\n            translate([0, 0, 12])\n                cylinder(h=2, r1=1, r2=1, $fn=8);\n        }\n    }\n}\n\n// Control buttons\nmodule control_buttons() {\n    color(color_buttons) {\n        for(i = [0:2]) {\n            translate([case_width-12, case_height/2-5+i*5, case_depth-10]) {\n                rounded_cube([8, 3, 4], 1);\n            }\n        }\n    }\n}\n\n// Status LEDs\nmodule status_leds() {\n    for(i = [0:1]) {\n        color(color_leds) {\n            translate([5+i*8, case_height-1, case_depth-15]) {\n                sphere(r=1.5, $fn=12);\n            }\n        }\n    }\n}\n\n// USB-C port\nmodule usb_c_port() {\n    color(color_ports) {\n        translate([case_width/2-4, case_height/2-2, case_depth]) {\n            cube([8, 4, 5]);\n        }\n    }\n}\n\n// Ventilation slots\nmodule ventilation_slots() {\n    for(i = [0:3]) {\n        translate([5+i*12, case_height-1, 15]) {\n            cube([8, 1, 2]);\n        }\n    }\n}\n\n// Assembly\nmain_case();\ndisplay();\nbnc_connector(case_width/2-15, \"INPUT\");\nbnc_connector(case_width/2+15, \"OUTPUT\");\ncontrol_buttons();\nstatus_leds();\nusb_c_port();\nventilation_slots();",
    "renders": true
  },
  {
    "electronic_device": "terminator",
    "openscad_code": "// Terminator T-800 Endoskull Electronic Device\n// Realistic style, medium complexity, 3D printable\n\n// Main dimensions (mm)\nskull_width = 70;\nskull_height = 85;\nskull_depth = 75;\nwall_thickness = 2.5;\n\n// Colors\ncolor_metal = [0.4, 0.4, 0.45];\ncolor_red = [0.8, 0.1, 0.1];\ncolor_dark = [0.2, 0.2, 0.2];\ncolor_lens = [0.1, 0.1, 0.2, 0.7];\n\nmodule skull_base() {\n    difference() {\n        // Main skull shape\n        color(color_metal)\n        hull() {\n            sphere(d=skull_width);\n            translate([0, 0, -skull_height/3])\n            cylinder(h=skull_height/2, d1=skull_width*0.8, d2=skull_width*0.9);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -5])\n        scale([0.85, 0.85, 0.9])\n        skull_base();\n    }\n}\n\nmodule eye_socket(x_pos) {\n    translate([x_pos, skull_width/4, skull_height/4])\n    rotate([0, 10, 0])\n    difference() {\n        // Eye cavity\n        color(color_dark)\n        cylinder(h=15, d=18);\n        \n        // Eye lens\n        translate([0, 0, 14])\n        color(color_lens)\n        sphere(d=16);\n    }\n}\n\nmodule teeth_row() {\n    for(i=[-3:1:3]) {\n        translate([i*6, skull_depth/2 - 5, -skull_height/2 + 5])\n        rotate([90, 0, 0])\n        color(color_metal)\n        cylinder(h=8, d=4);\n    }\n}\n\nmodule antenna() {\n    translate([0, -skull_depth/2 + 5, skull_height/2 - 10])\n    rotate([30, 0, 0])\n    union() {\n        // Antenna base\n        color(color_metal)\n        cylinder(h=5, d=8);\n        \n        // Antenna rod\n        translate([0, 0, 5])\n        color(color_dark)\n        cylinder(h=20, d=2);\n        \n        // Antenna tip\n        translate([0, 0, 25])\n        color(color_red)\n        sphere(d=3);\n    }\n}\n\nmodule cooling_vent(x_pos, z_pos) {\n    translate([x_pos, 0, z_pos])\n    for(i=[-2:1:2]) {\n        translate([0, i*5, 0])\n        rotate([0, 90, 0])\n        color(color_dark)\n        cylinder(h=3, d=2);\n    }\n}\n\nmodule port_cluster() {\n    translate([-skull_width/2 + 5, 0, -skull_height/4])\n    union() {\n        // USB port\n        translate([0, 10, 0])\n        color(color_dark)\n        cube([8, 12, 3]);\n        \n        // Power port\n        translate([0, 0, 0])\n        color(color_dark)\n        cylinder(h=8, d=8);\n        \n        // Status LEDs\n        translate([0, -10, 2])\n        color([0, 1, 0])\n        sphere(d=3);\n    }\n}\n\nmodule neck_joint() {\n    translate([0, 0, -skull_height/2 - 5])\n    color(color_metal)\n    union() {\n        cylinder(h=15, d=20);\n        \n        // Mounting holes\n        for(angle=[0:120:240]) {\n            rotate([0, 0, angle])\n            translate([7, 0, 7])\n            cylinder(h=15, d=4);\n        }\n    }\n}\n\n// Assemble the device\nunion() {\n    skull_base();\n    eye_socket(-skull_width/4);\n    eye_socket(skull_width/4);\n    teeth_row();\n    antenna();\n    \n    // Side cooling vents\n    cooling_vent(skull_width/2 - 3, skull_height/4);\n    cooling_vent(-skull_width/2 + 3, skull_height/4);\n    \n    // Rear ports\n    port_cluster();\n    \n    // Neck mounting\n    neck_joint();\n}\n\n// Add serial number engraving\ntranslate([0, skull_depth/2 - 1, 0])\nrotate([0, 90, 0])\ncolor(color_dark)\nlinear_extrude(height=0.5)\ntext(\"T-800\", size=6, halign=\"center\", valign=\"center\");",
    "renders": true
  },
  {
    "electronic_device": "ground",
    "openscad_code": "// Ground Electronic Device - Wi-Fi Router\n// Realistic style, medium complexity\n// Size: 90mm x 130mm x 25mm\n\n$fn = 32;\n\n// Main colors\ncolor_case = [0.15, 0.15, 0.15];  // Dark gray\ncolor_lights = [0, 1, 0];         // Green LEDs\ncolor_ports = [0.2, 0.2, 0.2];    // Darker gray\ncolor_antenna = [0.3, 0.3, 0.3];  // Medium gray\ncolor_screen = [0.05, 0.05, 0.05]; // Black screen\n\n// Main router body\nmodule router_body() {\n    color(color_case)\n    difference() {\n        // Main case with rounded corners\n        minkowski() {\n            cube([130, 90, 20], center = true);\n            cylinder(h = 0.5, r = 3);\n        }\n        \n        // Ventilation slots on top\n        for(i = [-60:10:60]) {\n            translate([i, 0, 10])\n                cube([8, 85, 2]);\n        }\n        \n        // LED indicators window\n        translate([50, 0, 10.5])\n            cube([30, 5, 2]);\n        \n        // Bottom ventilation\n        translate([0, 0, -10.5])\n            cube([120, 80, 2]);\n    }\n}\n\n// LED indicators\nmodule leds() {\n    for(i = [-10:5:10]) {\n        color(color_lights)\n        translate([i, 0, 11])\n            cylinder(h = 1, r = 1.5);\n    }\n}\n\n// Ethernet ports\nmodule ethernet_ports() {\n    color(color_ports)\n    for(i = [-2:1:2]) {\n        translate([-55, i * 10, 0])\n            difference() {\n                cube([8, 12, 4]);\n                translate([4, 0, 1])\n                    cube([5, 8, 2]);\n            }\n    }\n}\n\n// Power connector\nmodule power_port() {\n    color(color_ports)\n    translate([-55, -35, 0])\n    difference() {\n        cube([8, 12, 8]);\n        translate([4, 0, 2])\n            cylinder(h = 8, r = 4);\n    }\n}\n\n// Antenna mount\nmodule antenna_mount() {\n    translate([65, 0, 0])\n    rotate([0, 90, 0])\n    color(color_antenna)\n    union() {\n        // Base\n        cylinder(h = 5, r = 6);\n        \n        // Hinge\n        translate([0, 0, 5])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 8, r = 4);\n                translate([0, 0, -1])\n                    cylinder(h = 10, r = 2);\n            }\n    }\n}\n\n// Antenna\nmodule antenna() {\n    translate([65, 0, 8])\n    rotate([0, 45, 0])\n    color(color_antenna)\n    linear_extrude(height = 60, twist = 15)\n        circle(r = 2);\n}\n\n// Front display\nmodule display() {\n    color(color_screen)\n    translate([0, -45, 5])\n    difference() {\n        cube([60, 2, 10]);\n        translate([0, 0, 0])\n            cube([58, 1, 8]);\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    color([0.1, 0.1, 0.1])\n    for(x = [-50:50:100])\n        for(y = [-30:30:60])\n            translate([x, y, -11])\n                cylinder(h = 2, r = 3);\n}\n\n// Brand label\nmodule brand_label() {\n    translate([0, 45, 5])\n    color([0.8, 0.8, 0.8])\n    cube([40, 1, 8]);\n}\n\n// Assembly\nrouter_body();\nleds();\nethernet_ports();\npower_port();\nantenna_mount();\nantenna();\ndisplay();\nfeet();\nbrand_label();",
    "renders": true
  },
  {
    "electronic_device": "optocoupler",
    "openscad_code": "// 4N25-style 6-DIP optocoupler – realistic printable model\n// Overall length 68 mm, width 10 mm, height 7 mm\n\n// ---------- color scheme ----------\n$fa = 1; $fs = 0.5;\n\n// ---------- main body ----------\ncolor(\"Black\")\ndifference() {\n    cube([68, 10, 7], center = true);        // epoxy block\n    translate([0, 0, 3.6])\n        cube([66, 8, 0.5], center = true);   // top recess\n}\n\n// ---------- pin headers ----------\nmodule pinRow(side) {\n    for(i = [0:5])\n        translate([side * (32 - i * 2.54), 0, -4])\n            color(\"Silver\")\n            cylinder(h = 8, d = 0.8, center = true);\n}\n\npinRow(1);\npinRow(-1);\n\n// ---------- white silkscreen dot ----------\ntranslate([30, 0, 3.6])\n    color(\"White\")\n    sphere(d = 1.2);\n\n// ---------- visible LED (infrared) ----------\ntranslate([20, 0, 2])\n    color(\"Red\")\n    difference() {\n        sphere(d = 2);\n        translate([0, 0, -1])\n            cube([3, 3, 2], center = true);\n    }\n\n// ---------- phototransistor ----------\ntranslate([-20, 0, 2])\n    color(\"DarkGray\")\n    difference() {\n        sphere(d = 2.2);\n        translate([0, 0, -1])\n            cube([3, 3, 2], center = true);\n    }\n\n// ---------- molding ridge ----------\ntranslate([0, 0, 3.5])\n    color(\"Black\")\n    cube([68, 0.4, 0.5], center = true);\n\n// ---------- chamfer on corners ----------\nmodule chamfer() {\n    for(x = [-34, 34])\n        for(y = [-5, 5])\n            translate([x, y, 3.5])\n                color(\"Black\")\n                cube([2, 2, 2], center = true);\n}\nchamfer();",
    "renders": true
  },
  {
    "electronic_device": "transoptor",
    "openscad_code": "// OpenSCAD parametric transoptor (optocoupler) model\n// Realistic style, medium complexity\n\n$fn = 50;  // Smooth curves\n\n// Main dimensions\nbase_width = 12;\nbase_length = 8;\nbase_height = 3.5;\npin_diameter = 0.8;\npin_length = 10;\nled_diameter = 5;\nled_height = 1.5;\nphototransistor_diameter = 5;\nphototransistor_height = 1.5;\nwall_thickness = 1;\nslot_width = 1.2;\nslot_depth = 1;\n\nmodule base() {\n    // Main black epoxy body\n    color([0.12, 0.12, 0.12]) \n    difference() {\n        // Main body\n        cube([base_width, base_length, base_height], center = true);\n        \n        // Side chamfers for realistic look\n        translate([base_width/2 - 1, 0, 0]) rotate([0, 0, 45]) \n            cube([2, base_length + 2, base_height + 2], center = true);\n        translate([-base_width/2 + 1, 0, 0]) rotate([0, 0, -45]) \n            cube([2, base_length + 2, base_height + 2], center = true);\n    }\n    \n    // Top surface detail - slight recess\n    translate([0, 0, base_height/2 - 0.2])\n    color([0.08, 0.08, 0.08])\n    cube([base_width - 1, base_length - 1, 0.4], center = true);\n}\n\nmodule pins() {\n    // 4 pins - standard DIP spacing\n    color([0.8, 0.8, 0.8])\n    for(i = [0:1:3]) {\n        translate([-base_width/2 + 2.54 + i*2.54, -base_length/2 - pin_length/2, 0])\n            cylinder(h = pin_length, d = pin_diameter, center = true);\n    }\n    \n    // Pin widening at base for strength\n    color([0.7, 0.7, 0.7])\n    for(i = [0:1:3]) {\n        translate([-base_width/2 + 2.54 + i*2.54, -base_length/2, 0])\n            cube([pin_diameter + 0.4, 1, pin_diameter + 0.4], center = true);\n    }\n}\n\nmodule light_barrier() {\n    // Slot between LED and phototransistor\n    color([0.05, 0.05, 0.05])\n    translate([0, 0, 0])\n    cube([slot_width, base_length - 1, slot_depth + 0.5], center = true);\n}\n\nmodule led() {\n    // IR LED dome\n    translate([-base_width/4, 0, base_height/2 + led_height/2])\n    color([0.9, 0.1, 0.1])  // Red IR LED\n    sphere(d = led_diameter);\n    \n    // LED substrate\n    translate([-base_width/4, 0, base_height/2])\n    color([0.3, 0.3, 0.3])\n    cylinder(h = 0.3, d = led_diameter + 0.5, center = true);\n}\n\nmodule phototransistor() {\n    // Phototransistor dome\n    translate([base_width/4, 0, base_height/2 + phototransistor_height/2])\n    color([0.1, 0.1, 0.9])  // Blue detector\n    sphere(d = phototransistor_diameter);\n    \n    // Phototransistor substrate\n    translate([base_width/4, 0, base_height/2])\n    color([0.3, 0.3, 0.3])\n    cylinder(h = 0.3, d = phototransistor_diameter + 0.5, center = true);\n}\n\nmodule dot_indicator() {\n    // Pin 1 indicator dot\n    translate([-base_width/2 + 0.8, base_length/2 - 0.8, base_height/2 + 0.1])\n    color([1, 1, 1]) \n    sphere(d = 0.5);\n}\n\nmodule transoptor() {\n    union() {\n        base();\n        pins();\n        light_barrier();\n        led();\n        phototransistor();\n        dot_indicator();\n    }\n}\n\n// Render the complete transoptor\ntransoptor();",
    "renders": true
  },
  {
    "electronic_device": "brouter",
    "openscad_code": "// Realistic brouter (Wi-Fi mesh router) model\n// Dimensions: 120mm x 120mm x 35mm (medium size for 3D printing)\n\n$fn = 50;\n\n// Main device body\nmodule router_body() {\n    color(\"white\")\n    difference() {\n        // Main enclosure\n        rounded_box(100, 100, 30, 3);\n        \n        // Ventilation slots on top\n        for(y = [-40:-20:40]) {\n            translate([0, y, 15])\n                cube([80, 3, 3], center=true);\n        }\n        \n        // LED indicator window\n        translate([0, 45, 15])\n            cube([25, 2, 3], center=true);\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(w, d, h, r) {\n    hull() {\n        translate([r-w/2, r-d/2, r])\n            cylinder(h=h-2*r, r=r);\n        translate([w/2-r, r-d/2, r])\n            cylinder(h=h-2*r, r=r);\n        translate([r-w/2, d/2-r, r])\n            cylinder(h=h-2*r, r=r);\n        translate([w/2-r, d/2-r, r])\n            cylinder(h=h-2*r, r=r);\n    }\n    translate([0, 0, h/2])\n        cube([w, d, h-2*r], center=true);\n}\n\n// Front face with ports and buttons\nmodule front_face() {\n    translate([0, -50, 0])\n    difference() {\n        color(\"white\")\n        cube([100, 2, 30], center=true);\n        \n        // Ethernet ports (4x)\n        for(i = [0:3]) {\n            translate([-35 + i*20, -51, 5])\n                cube([12, 3, 12], center=true);\n        }\n        \n        // USB port\n        translate([45, -51, 5])\n            cube([10, 3, 7], center=true);\n        \n        // Power button\n        translate([-45, -51, -5])\n            cylinder(h=3, r=4);\n    }\n}\n\n// Antenna modules (4 external antennas)\nmodule antenna(pos, angle) {\n    translate(pos)\n    rotate([0, 0, angle])\n    color(\"black\") {\n        // Antenna base\n        cylinder(h=8, r=6);\n        translate([0, 0, 8])\n            cylinder(h=3, r=8);\n        \n        // Antenna rod\n        translate([0, 0, 11])\n            rotate([90, 0, 0])\n            cylinder(h=40, r=2.5);\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    translate([0, 45, 16])\n    color(\"blue\")\n    cube([20, 1, 2], center=true);\n}\n\n// Brand label\nmodule brand_label() {\n    translate([0, 0, 16])\n    color(\"gray\")\n    cube([30, 10, 0.5], center=true);\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    color(\"black\")\n    for(x = [-35, 35])\n    for(y = [-35, 35]) {\n        translate([x, y, -16])\n            cylinder(h=2, r=4);\n    }\n}\n\n// Main assembly\nrouter_body();\nfront_face();\nantenna([-35, 35, 15], 45);\nantenna([35, 35, 15], -45);\nantenna([-35, -35, 15], 135);\nantenna([35, -35, 15], -135);\nled_indicator();\nbrand_label();\nrubber_feet();",
    "renders": true
  },
  {
    "electronic_device": "ras",
    "openscad_code": "// Raspberry Pi 4 Model B - Realistic Style\n// Overall dimensions: 85mm x 56mm x 17mm\n\n// Main board color\nboard_color = \"#006633\";\n// USB/ethernet plastic color\nplastic_color = \"#2f2f2f\";\n// Metal port color\nmetal_color = \"#888888\";\n// Silkscreen color\nwhite_color = \"#ffffff\";\n// GPIO color\nblack_color = \"#000000\";\n// Component colors\ncomponent_colors = [\"#333333\", \"#2255aa\", \"#aa2222\", \"#aaaaaa\"];\n\nmodule main_board() {\n    color(board_color)\n    difference() {\n        // Main PCB\n        cube([85, 56, 1.6], center=true);\n        \n        // Mounting holes\n        for(x=[-31.5, 31.5])\n            for(y=[-19.5, 19.5])\n                translate([x, y, 0])\n                    cylinder(h=2, r=2.75, center=true);\n    }\n}\n\nmodule usb_ports() {\n    // USB 2.0 ports\n    for(x=[-29.5, -15.5]) {\n        color(plastic_color)\n        translate([x, -27.8, -8.5])\n            cube([12, 9, 15]);\n        color(metal_color)\n        translate([x, -27.8, -8.5])\n            cube([12, 7, 13]);\n    }\n    \n    // USB 3.0 ports\n    for(x=[2, 16]) {\n        color(plastic_color)\n        translate([x, -27.8, -8.5])\n            cube([12, 9, 15]);\n        color(metal_color)\n        translate([x, -27.8, -8.5])\n            cube([12, 7, 13]);\n    }\n}\n\nmodule ethernet_port() {\n    color(plastic_color)\n    translate([35.5, -27.8, -8.5])\n        cube([15, 13, 15]);\n    \n    color(metal_color)\n    translate([35.5, -27.8, -8.5])\n        cube([15, 11, 13]);\n}\n\nmodule gpio_header() {\n    color(black_color)\n    for(row=[-22.86, -20.32, -17.78, -15.24, -12.7, -10.16, -7.62, -5.08, -2.54, 0, 2.54, 5.08, 7.62, 10.16, 12.7, 15.24, 17.78, 20.32, 22.86, 25.4]) {\n        for(col=[-2.54, 2.54]) {\n            translate([row, col, 8.5])\n                cylinder(h=8, r=0.64);\n        }\n    }\n}\n\nmodule usbc_power() {\n    color(metal_color)\n    translate([-35.5, -27.8, -8.5])\n        cube([8.94, 6.5, 3.5]);\n}\n\nmodule hdmi_ports() {\n    // Micro HDMI ports\n    for(y=[-3.5, 3.5]) {\n        color(metal_color)\n        translate([-35.5, y, -5.5])\n            cube([7.5, 5.5, 6.5]);\n    }\n}\n\nmodule audio_jack() {\n    color(metal_color)\n    translate([-35.5, 15, -8.5])\n        cylinder(h=12, r=3.5);\n}\n\nmodule camera_connector() {\n    color(black_color)\n    translate([22.5, 21, 1])\n        cube([12, 5, 5);\n}\n\nmodule display_connector() {\n    color(black_color)\n    translate([-22.5, 21, 1])\n        cube([12, 5, 5);\n}\n\nmodule soc_chip() {\n    color(component_colors[0])\n    translate([5, 5, 1])\n        cube([14, 14, 1);\n}\n\nmodule wifi_chip() {\n    color(component_colors[1])\n    translate([-15, 5, 1])\n        cube([8, 8, 1);\n}\n\nmodule usb_controller() {\n    color(component_colors[2])\n    translate([5, -15, 1])\n        cube([10, 6, 1);\n}\n\nmodule power_management() {\n    color(component_colors[3])\n    translate([-15, -15, 1])\n        cube([12, 5, 1);\n}\n\nmodule status_leds() {\n    color(\"red\")\n    translate([35.5, -20, 1])\n        cylinder(h=1, r=1);\n    \n    color(\"green\")\n    translate([35.5, -18, 1])\n        cylinder(h=1, r=1);\n}\n\n// Assembly\ntranslate([0, 0, 8.5])\n    main_board();\n\nusb_ports();\nethernet_port();\ngpio_header();\nusbc_power();\nhdmi_ports();\naudio_jack();\ncamera_connector();\ndisplay_connector();\nsoc_chip();\nwifi_chip();\nusb_controller();\npower_management();\nstatus_leds();",
    "renders": true
  },
  {
    "electronic_device": "das",
    "openscad_code": "// DAS (Direct Attached Storage) Electronic Device\n// Realistic 3D printable model for a portable SSD enclosure\n\n$fn = 64;\n\n// Main dimensions\nenclosure_length = 70;\nenclosure_width = 40;\nenclosure_height = 10;\nwall_thickness = 1.5;\ncorner_radius = 3;\n\n// Color definitions\ncolor_enclosure = [0.15, 0.15, 0.15];\ncolor_ports = [0.8, 0.8, 0.8];\ncolor_led = [0, 1, 0];\ncolor_label = [0.9, 0.9, 0.9];\n\nmodule rounded_cube(size, radius) {\n    hull() {\n        translate([radius, radius, radius])\n            sphere(r=radius);\n        translate([size.x - radius, radius, radius])\n            sphere(r=radius);\n        translate([size.x - radius, size.y - radius, radius])\n            sphere(r=radius);\n        translate([radius, size.y - radius, radius])\n            sphere(r=radius);\n        translate([radius, radius, size.z - radius])\n            sphere(r=radius);\n        translate([size.x - radius, radius, size.z - radius])\n            sphere(r=radius);\n        translate([size.x - radius, size.y - radius, size.z - radius])\n            sphere(r=radius);\n        translate([radius, size.y - radius, size.z - radius])\n            sphere(r=radius);\n    }\n}\n\n// Main enclosure body\nmodule enclosure_body() {\n    color(color_enclosure) {\n        difference() {\n            rounded_cube([enclosure_length, enclosure_width, enclosure_height], corner_radius);\n            \n            // Hollow out interior\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                rounded_cube([\n                    enclosure_length - 2 * wall_thickness,\n                    enclosure_width - 2 * wall_thickness,\n                    enclosure_height - wall_thickness\n                ], corner_radius - wall_thickness);\n        }\n    }\n}\n\n// USB-C port\nmodule usb_c_port() {\n    color(color_ports) {\n        // Port opening\n        translate([enclosure_length - wall_thickness, enclosure_width/2 - 4, wall_thickness])\n            cube([wall_thickness, 8, 3]);\n        \n        // Port connector detail\n        translate([enclosure_length - wall_thickness + 0.2, enclosure_width/2 - 3, wall_thickness + 0.5])\n            cube([0.5, 6, 2]);\n    }\n}\n\n// Activity LED\nmodule activity_led() {\n    color(color_led) {\n        translate([enclosure_length - 10, wall_thickness + 0.1, enclosure_height/2])\n            cylinder(h=0.2, r=1.5);\n    }\n}\n\n// Brand label area\nmodule brand_label() {\n    color(color_label) {\n        translate([enclosure_length/2 - 15, enclosure_width/2 - 5, enclosure_height - 0.2])\n            cube([30, 10, 0.2]);\n    }\n}\n\n// Ventilation slots\nmodule ventilation_slots() {\n    color(color_enclosure) {\n        for(i = [0:4]) {\n            translate([10 + i * 12, wall_thickness - 0.1, enclosure_height - 3])\n                cube([8, 0.2, 2]);\n        }\n    }\n}\n\n// Assembly screw holes\nmodule screw_holes() {\n    color(color_enclosure) {\n        // Bottom screw holes\n        translate([corner_radius + 5, corner_radius + 5, 0])\n            cylinder(h=wall_thickness, r=1, $fn=16);\n        translate([enclosure_length - corner_radius - 5, corner_radius + 5, 0])\n            cylinder(h=wall_thickness, r=1, $fn=16);\n        translate([corner_radius + 5, enclosure_width - corner_radius - 5, 0])\n            cylinder(h=wall_thickness, r=1, $fn=16);\n        translate([enclosure_length - corner_radius - 5, enclosure_width - corner_radius - 5, 0])\n            cylinder(h=wall_thickness, r=1, $fn=16);\n    }\n}\n\n// Assembly\nenclosure_body();\nusb_c_port();\nactivity_led();\nbrand_label();\nventilation_slots();\nscrew_holes();",
    "renders": true
  },
  {
    "electronic_device": "dasarray",
    "openscad_code": "// Dasarray Electronic Device - Realistic Style\n// A compact data acquisition array with 4 sensor ports\n\n$fn = 48;\n\n// Main dimensions (mm)\nbody_w = 52;\nbody_h = 28;\nbody_d = 78;\n\n// Wall thickness\nwall_t = 2.0;\n\n// Color definitions\ncolor_case = [0.15, 0.15, 0.15];  // Dark gray\ncolor_ports = [0.1, 0.1, 0.5];    // Blue\ncolor_screen = [0, 0, 0];         // Black\ncolor_led = [0, 1, 0];            // Green\ncolor_buttons = [0.3, 0.3, 0.3];  // Medium gray\n\n// Main assembly\ndifference() {\n    union() {\n        // Main body shell\n        color(color_case)\n        rounded_box(body_w, body_h, body_d, 3);\n        \n        // Front bezel\n        color(color_case)\n        translate([0, 0, body_d/2 + 0.5])\n        cube([body_w - 4, body_h - 4, 1], center=true);\n        \n        // Sensor port housings (4 ports)\n        for(x = [-18, -6, 6, 18]) {\n            color(color_ports)\n            translate([x, body_h/2 - 2, body_d/2 - 8])\n            rotate([90, 0, 0])\n            cylinder(h=8, d1=8, d2=6);\n        }\n        \n        // Side mounting flanges\n        color(color_case)\n        translate([body_w/2 + 4, 0, 0])\n        cube([8, body_h, body_d], center=true);\n        translate([-body_w/2 - 4, 0, 0])\n        cube([8, body_h, body_d], center=true);\n        \n        // Mounting holes on flanges\n        for(z = [-25, 25]) {\n            translate([body_w/2 + 4, 0, z])\n            cylinder(h=10, d=4, center=true);\n            translate([-body_w/2 - 4, 0, z])\n            cylinder(h=10, d=4, center=true);\n        }\n    }\n    \n    // Screen cutout\n    color(color_screen)\n    translate([0, 2, body_d/2 + 0.1])\n    cube([30, 12, 2], center=true);\n    \n    // Button holes (3 buttons)\n    for(x = [-11, 0, 11]) {\n        translate([x, -body_h/2 + 4, body_d/2 + 0.1])\n        cylinder(h=2, d=4);\n    }\n    \n    // USB-C port\n    translate([0, -body_h/2, -body_d/2 + 8])\n    cube([12, 2, 6], center=true);\n    \n    // Power LED indicator\n    translate([body_w/2 - 6, 0, body_d/2 - 10])\n    cylinder(h=2, d=3);\n    \n    // Internal hollow space for electronics\n    translate([0, 0, 0])\n    rounded_box(body_w - wall_t*2, body_h - wall_t*2, body_d - wall_t*2, 2.5);\n}\n\n// Screen display (LCD)\ntranslate([0, 2.1, body_d/2 + 1.1])\ncolor([0.1, 0.1, 0.1])\ncube([28, 10, 0.5], center=true);\n\n// Button caps (3 buttons)\nfor(x = [-11, 0, 11]) {\n    translate([x, -body_h/2 + 2, body_d/2 + 1])\n    color(color_buttons)\n    cylinder(h=1.5, d=5);\n}\n\n// Sensor port inner details\nfor(x = [-18, -6, 6, 18]) {\n    translate([x, body_h/2 - 2, body_d/2 - 4])\n    color([0.2, 0.2, 0.2])\n    cylinder(h=0.5, d=3);\n}\n\n// Power LED\ntranslate([body_w/2 - 6, 0, body_d/2 - 9])\ncolor(color_led)\ncylinder(h=1, d=2);\n\n// USB-C port detail\ntranslate([0, -body_h/2 + 1, -body_d/2 + 8])\ncolor([0.1, 0.1, 0.1])\ncube([10, 0.5, 4], center=true);\n\n// Ventilation slots on top\nfor(z = [-20, -10, 0, 10, 20]) {\n    translate([0, body_h/2 - 1, z])\n    cube([body_w - 8, 1, 6], center=true);\n}\n\n// Module for rounded box\nmodule rounded_box(w, h, d, r) {\n    hull() {\n        for(x = [-w/2 + r, w/2 - r])\n        for(y = [-h/2 + r, h/2 - r])\n        for(z = [-d/2 + r, d/2 - r])\n            translate([x, y, z])\n            sphere(r=r);\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "filer",
    "openscad_code": "// Filer Electronic Device – OpenSCAD\n// A realistic desktop network filer / NAS enclosure 80 mm long\n// 3D-printable, no severe overhangs, 1.2 mm wall thickness\n\n// overall size\nlength = 80;\nwidth  = 40;\nheight = 25;\n\n// wall thickness\nwall = 1.2;\n\n// LED indicator diameter\nled_d = 2;\n\n// USB-A port opening\nusb_w = 12;\nusb_h = 4;\n\n// RJ-45 port opening\nrj_w = 14;\nrj_h = 11;\n\n// ventilation slots\nslot_w = 1.5;\nslot_h = 3;\nslot_spacing = 5;\nslots = 8;\n\n// main shell\nmodule shell() {\n    difference() {\n        // outer block\n        cube([length, width, height], center=true);\n        \n        // hollow inside\n        translate([0,0,wall/2])\n            cube([length-2*wall, width-2*wall, height-wall], center=true);\n        \n        // front face cut-outs\n        color(\"black\") {\n            // activity LED\n            translate([length/2+0.1, 8, height/2-4])\n                rotate([0,90,0])\n                    cylinder(h=led_d, d=led_d, $fn=16);\n            \n            // USB-A port\n            translate([length/2+0.1, 0, 0])\n                cube([usb_h, usb_w, usb_h], center=true);\n            \n            // RJ-45 port\n            translate([length/2+0.1, -10, -1])\n                cube([rj_h, rj_w, rj_h], center=true);\n            \n            // microSD slot\n            translate([length/2+0.1, 10, -5])\n                cube([1.2, 15, 2], center=true);\n        }\n    }\n}\n\n// top grille for cooling\nmodule grille() {\n    color(\"gray\")\n    for (i=[0:slots-1]) {\n        translate([-length/2+5+i*slot_spacing, 0, height/2-wall])\n            cube([slot_w, width-4, slot_h]);\n    }\n}\n\n// side feet to prevent sliding\nmodule feet() {\n    color(\"black\")\n    translate([0, 0, -height/2-1])\n        for (x=[-1,1])\n            translate([x*length/3, 0, 0])\n                cylinder(h=2, d=6, $fn=20);\n}\n\n// subtle logo plate\nmodule logo() {\n    color(\"silver\")\n    translate([0, 0, height/2+0.1])\n        cube([20, 6, 0.8], center=true);\n}\n\n// assemble the device\ndifference() {\n    union() {\n        shell();\n        grille();\n        feet();\n        logo();\n    }\n    \n    // remove underside logo cutout\n    translate([0, 0, height/2+0.1])\n        cube([18, 4, 1], center=true);\n}",
    "renders": true
  },
  {
    "electronic_device": "filerhead",
    "openscad_code": "// Filereader electronic device - medium complexity realistic style\n// 3D printable design with proper wall thickness and no overhangs\n\n$fn = 32;\n\n// Main color definitions\ncolor_case = [0.2, 0.2, 0.2];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_buttons = [0.8, 0.8, 0.8];\ncolor_ports = [0.4, 0.4, 0.4];\ncolor_led = [0, 1, 0];\n\n// Device dimensions (mm)\ndevice_length = 80;\ndevice_width = 50;\ndevice_height = 12;\nwall_thickness = 1.5;\n\nmodule main_body() {\n    color(color_case)\n    difference() {\n        // Main case\n        cube([device_length, device_width, device_height], center = true);\n        \n        // Internal cavity\n        translate([0, 0, -wall_thickness/2])\n        cube([device_length - 2*wall_thickness, device_width - 2*wall_thickness, device_height], center = true);\n    }\n}\n\nmodule screen() {\n    // Screen bezel\n    color(color_case)\n    translate([0, 0, device_height/2 + 0.5])\n    cube([device_length - 10, device_width/2, 1], center = true);\n    \n    // Screen surface\n    color(color_screen)\n    translate([0, 0, device_height/2 + 1.5])\n    cube([device_length - 12, device_width/2 - 2, 0.1], center = true);\n}\n\nmodule button_row(y_pos) {\n    for(i = [-1, 0, 1]) {\n        translate([i * 12, y_pos, device_height/2 + 0.5])\n        color(color_buttons)\n        cylinder(h = 1, r = 3, center = true);\n    }\n}\n\nmodule navigation_pad() {\n    // D-pad base\n    color(color_case)\n    translate([0, -device_width/4, device_height/2 + 0.5])\n    cube([20, 20, 1], center = true);\n    \n    // Direction buttons\n    for(pos = [[0, 6, 0], [0, -6, 0], [6, 0, 0], [-6, 0, 0]]) {\n        translate(pos + [0, -device_width/4, device_height/2 + 1.5])\n        color(color_buttons)\n        cylinder(h = 0.5, r = 2.5, center = true);\n    }\n    \n    // Center button\n    translate([0, -device_width/4, device_height/2 + 1.5])\n    color(color_buttons)\n    cylinder(h = 0.5, r = 3.5, center = true);\n}\n\nmodule usb_port() {\n    color(color_ports)\n    translate([device_length/2, device_width/4, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 6, r = 3.5, center = true);\n        cylinder(h = 7, r = 2.5, center = true);\n    }\n}\n\nmodule sd_slot() {\n    color(color_ports)\n    translate([device_length/2 - 15, device_width/2, 0])\n    cube([15, 1.5, 2], center = true);\n}\n\nmodule status_leds() {\n    translate([device_length/2 - 5, device_width/2 - 3, device_height/2 + 0.5])\n    color(color_led)\n    cylinder(h = 0.5, r = 1, center = true);\n    \n    translate([device_length/2 - 10, device_width/2 - 3, device_height/2 + 0.5])\n    color([1, 0.5, 0])\n    cylinder(h = 0.5, r = 1, center = true);\n}\n\nmodule speaker_grill(pos_x, pos_y) {\n    color(color_case)\n    translate([pos_x, pos_y, device_height/2 + 0.5])\n    cube([8, 8, 0.5], center = true);\n    \n    for(x = [-3, -1, 1, 3])\n    for(y = [-3, -1, 1, 3])\n    translate([pos_x + x, pos_y + y, device_height/2 + 1])\n    cylinder(h = 0.5, r = 0.5, center = true);\n}\n\n// Assembly\nmain_body();\nscreen();\nbutton_row(device_width/4);\nnavigation_pad();\nusb_port();\nsd_slot();\nstatus_leds();\nspeaker_grill(-device_length/3, -device_width/4);\nspeaker_grill(-device_length/3, device_width/4);",
    "renders": true
  },
  {
    "electronic_device": "filerblade",
    "openscad_code": "// FilerBlade Electronic File Manager Device (Medium Complexity)\n// Realistic style with 3D-printable design, ~80mm length\n\n// Device parameters\ndevice_length = 80;\ndevice_width = 40;\ndevice_height = 12;\nwall_thickness = 1.5;\nbutton_height = 0.5;\nscreen_thickness = 0.3;\n\n// Main body with rounded edges\nmodule main_body() {\n    color(\"silver\")\n    union() {\n        // Central body\n        translate([0, 0, device_height/2])\n            minkowski() {\n                cube([device_length-4, device_width-4, device_height-2], center=true);\n                sphere(2);\n            }\n        \n        // Top surface detail\n        translate([0, 0, device_height-1])\n            cube([device_length-6, device_width-6, 2], center=true);\n    }\n}\n\n// LCD screen\nmodule lcd_screen() {\n    color(\"black\")\n    translate([0, 0, device_height + button_height + 0.1])\n        cube([device_length-20, device_width-10, screen_thickness], center=true);\n    \n    // Screen bezel\n    color(\"darkgray\")\n    translate([0, 0, device_height + button_height - 0.2])\n        cube([device_length-18, device_width-8, 0.5], center=true);\n}\n\n// Navigation buttons\nmodule navigation_buttons() {\n    // Directional pad\n    color(\"dimgray\")\n    for(x = [-8, 0, 8])\n        for(y = [-8, 0, 8])\n            if(!(x == 0 && y == 0))\n                translate([x, y, device_height + button_height/2])\n                    cylinder(h=button_height, r=3, center=true);\n    \n    // Center button\n    color(\"red\")\n    translate([0, 0, device_height + button_height/2])\n        cylinder(h=button_height, r=2.5, center=true);\n}\n\n// USB-C port\nmodule usb_port() {\n    color(\"black\")\n    translate([device_length/2 - 2, 0, device_height/2])\n        rotate([0, 90, 0])\n            cube([8, 6, 3], center=true);\n    \n    // Port housing\n    color(\"gray\")\n    translate([device_length/2 - 2, 0, device_height/2])\n        rotate([0, 90, 0])\n            cube([10, 8, 4], center=true);\n}\n\n// LED indicators\nmodule status_leds() {\n    for(i = [0:1]) {\n        color(\"darkgreen\")\n        translate([device_length/2 - 25 - i*6, device_width/2 - 3, device_height + 0.1])\n            cylinder(h=0.5, r=1.5);\n    }\n}\n\n// MicroSD slot\nmodule sd_slot() {\n    color(\"black\")\n    translate([-device_length/2 + 5, device_width/2 - 2, device_height/2])\n        rotate([0, 90, 0])\n            cube([12, 8, 1.5], center=true);\n}\n\n// Brand text area (raised)\nmodule branding() {\n    color(\"gray\")\n    translate([0, -device_width/2 + 5, device_height - 0.5])\n        cube([30, 4, 0.3], center=true);\n}\n\n// Cooling vents\nmodule cooling_vents() {\n    color(\"silver\")\n    for(i = [0:3]) {\n        translate([-device_length/2 + 15 + i*5, 0, device_height/2 - 2])\n            cube([1, device_width-10, 4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    lcd_screen();\n    navigation_buttons();\n    usb_port();\n    status_leds();\n    sd_slot();\n    branding();\n    cooling_vents();\n}",
    "renders": true
  },
  {
    "electronic_device": "filercluster",
    "openscad_code": "// FilerCluster Network Attached Storage - Realistic Style, Medium Complexity\n// Overall dimensions: 80 x 60 x 45 mm\n\n// Main enclosure shell\nmodule enclosure() {\n    difference() {\n        // Main body\n        color(\"silver\") cube([80, 60, 45], center=true);\n        \n        // Hollow interior\n        color(\"silver\") cube([76, 56, 42], center=true);\n        \n        // Front ventilation slots\n        for (i = [-30:8:30]) {\n            translate([38, i, 0])\n                rotate([0, 0, 90])\n                    color(\"silver\") cube([15, 2, 40]);\n        }\n        \n        // Rear ventilation slots\n        for (i = [-30:8:30]) {\n            translate([-38, i, 0])\n                rotate([0, 0, 90])\n                    color(\"silver\") cube([15, 2, 40]);\n        }\n    }\n}\n\n// Front panel assembly\nmodule front_panel() {\n    // Main panel\n    translate([39, 0, 0])\n        color(\"black\") cube([2, 58, 40]);\n    \n    // Power button\n    translate([40, -20, 15])\n        color(\"darkgreen\") cylinder(h=3, r=4, $fn=20);\n    \n    // Status LEDs\n    for (j = [0:1:3]) {\n        translate([40, -10 + j*6, 5])\n            color(\"red\") cylinder(h=2, r=2, $fn=10);\n    }\n    \n    // USB 3.0 ports\n    for (k = [0:1:1]) {\n        translate([40, 20 + k*10, -5])\n            color(\"darkblue\") cube([1, 8, 4]);\n    }\n}\n\n// Rear panel assembly\nmodule rear_panel() {\n    // Main panel\n    translate([-39, 0, 0])\n        color(\"black\") cube([2, 58, 40]);\n    \n    // Ethernet port\n    translate([-40, -15, 0])\n        color(\"yellow\") cube([1, 14, 8]);\n    \n    // Power connector\n    translate([-40, 15, 0])\n        color(\"black\") cylinder(h=2, r=4, $fn=20);\n    \n    // Reset button\n    translate([-40, 0, -15])\n        color(\"red\") cylinder(h=3, r=2, $fn=10);\n}\n\n// Drive bay covers\nmodule drive_bays() {\n    // Top cover\n    translate([0, 0, 23.5])\n        color(\"silver\") cube([70, 50, 1]);\n    \n    // Drive activity LEDs\n    for (m = [0:1:3]) {\n        translate([-25 + m*15, -20, 24])\n            color(\"green\") cylinder(h=1, r=1.5, $fn=8);\n    }\n}\n\n// Cooling fan grill\nmodule cooling_fan() {\n    difference() {\n        translate([0, 0, -22.5])\n            color(\"silver\") cube([70, 50, 3]);\n        \n        // Fan blades\n        for (n = [0:30:330]) {\n            rotate([0, 0, n])\n                translate([15, 0, -22.5])\n                    color(\"silver\") cube([30, 2, 3]);\n        }\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    for (x = [-30, 30]) {\n        for (y = [-20, 20]) {\n            translate([x, y, -24])\n                color(\"black\") cylinder(h=3, r=3, $fn=12);\n        }\n    }\n}\n\n// Assembly\nenclosure();\nfront_panel();\nrear_panel();\ndrive_bays();\ncooling_fan();\nfeet();",
    "renders": true
  },
  {
    "electronic_device": "filerfabric",
    "openscad_code": "// Filament Fabric Electronic Device - Realistic Style, Medium Complexity\n// A handheld filament analyzer with display, buttons, and ports\n\n$fn = 50;\n\n// Main dimensions\ndevice_length = 85;\ndevice_width = 45;\ndevice_height = 20;\nwall_thickness = 2;\n\n// Colors\ncolor_body = [0.15, 0.15, 0.15];  // Dark gray\ncolor_screen = [0.05, 0.05, 0.05];  // Black\ncolor_buttons = [0.8, 0.8, 0.8];  // Light gray\ncolor_port = [0.2, 0.2, 0.2];  // Gray\ncolor_detail = [0.9, 0.2, 0.2];  // Red accent\n\n// Main body shell\nmodule main_body() {\n    difference() {\n        // Outer shell\n        color(color_body) {\n            rounded_box(device_length, device_width, device_height, 3);\n        }\n        \n        // Inner cavity\n        translate([wall_thickness, wall_thickness, -1])\n            rounded_box(device_length - 2*wall_thickness, \n                       device_width - 2*wall_thickness, \n                       device_height + 2, 2);\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        for(i = [[r, r, 0], [l-r, r, 0], [l-r, w-r, 0], [r, w-r, 0]])\n            translate(i) cylinder(r=r, h=h);\n    }\n}\n\n// Display screen\nmodule display() {\n    translate([device_length/2 - 25, device_width/2, device_height - 1])\n        color(color_screen) {\n            cube([30, 25, 0.5]);\n            \n            // Screen details\n            translate([2, 2, 0.6])\n                color([0, 1, 0.2])\n                    cube([26, 21, 0.1]);\n        }\n    \n    // Screen bezel\n    translate([device_length/2 - 26, device_width/2 - 1, device_height - 0.5])\n        color([0.3, 0.3, 0.3])\n            cube([32, 27, 0.5]);\n}\n\n// Control buttons\nmodule buttons() {\n    for(i = [0:3]) {\n        translate([device_length/2 - 10 + i*7, 8, device_height - 0.5])\n            color(color_buttons)\n                cylinder(r=2.5, h=1);\n        \n        // Button tops\n        translate([device_length/2 - 10 + i*7, 8, device_height + 0.6])\n            color([0.2, 0.2, 0.2])\n                cylinder(r=2, h=0.3);\n    }\n    \n    // Power button\n    translate([device_length - 8, device_width/2, device_height - 0.5])\n        color(color_detail)\n            cylinder(r=2, h=1);\n}\n\n// USB-C port\nmodule usb_port() {\n    translate([device_length - 8, device_width - 10, device_height/2 - 5])\n        rotate([0, 90, 0])\n            union() {\n                color(color_port)\n                    cube([10, 8, 3]);\n                \n                // Inner port\n                translate([1, 1, 1])\n                    color([0.05, 0.05, 0.05])\n                        cube([8, 6, 1]);\n            }\n}\n\n// Sensor window\nmodule sensor_window() {\n    translate([8, device_width/2, device_height - 2])\n        color([0.1, 0.1, 0.1])\n            difference() {\n                cube([6, 12, 1]);\n                translate([0.5, 0.5, -0.1])\n                    cube([5, 11, 1.2]);\n            }\n    \n    // LED indicators\n    for(i = [0:2]) {\n        translate([10, device_width/2 - 5 + i*5, device_height])\n            color([0.8, 0, 0])\n                sphere(r=0.5);\n    }\n}\n\n// Grip texture\nmodule grip_texture() {\n    for(i = [0:8]) {\n        for(j = [0:4]) {\n            translate([10 + i*8, 5 + j*7, 0.5])\n                color([0.1, 0.1, 0.1])\n                    cube([2, 2, 0.3]);\n        }\n    }\n}\n\n// Logo\nmodule logo() {\n    translate([5, device_width/2, device_height - 0.5])\n        rotate([0, 0, 45])\n            color(color_detail) {\n                cube([3, 3, 0.5]);\n                translate([3, 3, 0]) cube([3, 3, 0.5]);\n            }\n}\n\n// Assembly\nmain_body();\ndisplay();\nbuttons();\nusb_port();\nsensor_window();\ntranslate([0, 0, 0]) grip_texture();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "filerstack",
    "openscad_code": "// FilerStack NAS Device - Realistic style, medium complexity\n// A compact 2-bay network attached storage device\n\n// Color definitions\n$fn=100;\n\n// Main dimensions\ndevice_w = 85;\ndevice_d = 120;\ndevice_h = 55;\n\n// Wall thickness\nwall = 2;\n\nmodule case_base() {\n    // Main body - aluminum enclosure\n    color([0.7, 0.7, 0.75]) difference() {\n        cube([device_w, device_d, device_h], center=true);\n        translate([0, 0, wall/2])\n            cube([device_w-wall*2, device_d-wall*2, device_h-wall], center=true);\n    }\n}\n\nmodule drive_bays() {\n    // Two 3.5\" drive bays\n    bay_w = 35;\n    bay_h = 30;\n    bay_gap = 5;\n    \n    for (i = [0,1]) {\n        translate([0, -device_d/4 + i*(bay_h+bay_gap), 0])\n        difference() {\n            color([0.3, 0.3, 0.3])\n            cube([device_w-wall*2, bay_h, device_h-wall], center=true);\n            \n            // Drive tray slots\n            translate([0, 0, device_h/4])\n            cube([bay_w, bay_h-2, 5], center=true);\n            \n            // Activity LED holes\n            translate([device_w/2-6, 0, device_h/2-3])\n            cylinder(h=2, r=1.5);\n        }\n    }\n}\n\nmodule front_panel() {\n    translate([0, device_d/2, 0]) {\n        // Power button\n        translate([-device_w/4, 0, device_h/4])\n        color([0.1, 0.1, 0.1])\n        cylinder(h=3, r=5);\n        \n        // Status LEDs\n        for (i=[0:2]) {\n            translate([device_w/4-i*8, 0, device_h/4])\n            color([0, 0.8, 0])\n            cylinder(h=1.5, r=1.5);\n        }\n        \n        // USB ports\n        translate([0, 2, -device_h/4])\n        color([0.2, 0.2, 0.2])\n        cube([12, 4, 5], center=true);\n        \n        // Network LEDs\n        translate([device_w/2-5, 0, device_h/4-5])\n        color([0, 0.3, 1])\n        cylinder(h=1, r=1);\n    }\n}\n\nmodule rear_panel() {\n    translate([0, -device_d/2, 0]) {\n        // Power connector\n        translate([-device_w/3, 0, 0])\n        color([0.1, 0.1, 0.1])\n        cylinder(h=5, r=4);\n        \n        // Ethernet port\n        translate([0, 0, 0])\n        difference() {\n            color([0.2, 0.2, 0.2])\n            cube([12, 8, 8], center=true);\n            translate([0, 2, 0])\n            cube([8, 2, 6], center=true);\n        }\n        \n        // Fan grill\n        translate([device_w/3, 0, 0])\n        difference() {\n            color([0.6, 0.6, 0.6])\n            cube([20, 2, 20], center=true);\n            for (x=[-7:7:14])\n                for (y=[-7:7:14])\n                    translate([x, 0, y])\n                    cube([2, 3, 2], center=true);\n        }\n        \n        // Reset button\n        translate([device_w/2-8, 0, -device_h/4])\n        color([0.1, 0.1, 0.1])\n        cylinder(h=2, r=1.5);\n    }\n}\n\nmodule ventilation() {\n    // Side vents\n    for (side=[-1,1]) {\n        translate([side*device_w/2, 0, 0]) {\n            rotate([0, 90, 0])\n            for (i=[-2:2]) {\n                translate([0, i*10, 0])\n                cube([20, 1, 2]);\n            }\n        }\n    }\n    \n    // Top vents\n    translate([0, 0, device_h/2])\n    rotate([90, 0, 0])\n    for (i=[-3:3])\n        translate([i*10, 0, 0])\n        cube([5, 1, 20]);\n}\n\nmodule rubber_feet() {\n    // Four rubber feet\n    for (x=[-1,1])\n        for (y=[-1,1])\n            translate([x*device_w/3, y*device_d/3, -device_h/2-2])\n            color([0.1, 0.1, 0.1])\n            cylinder(h=2, r=3);\n}\n\n// Assembly\nunion() {\n    case_base();\n    drive_bays();\n    front_panel();\n    rear_panel();\n    ventilation();\n    rubber_feet();\n}",
    "renders": true
  },
  {
    "electronic_device": "filerarray",
    "openscad_code": "// Realistic medium-complexity filerarray electronic device\n// 3D-printable NAS-style enclosure with 4 hot-swap bays\n\n$fn = 32;\n\n// Main dimensions\nenclosure_w = 80;\nenclosure_h = 45;\nenclosure_d = 110;\nwall_thick  = 2;\n\n// Bay dimensions\nbay_w = 18;\nbay_h = 8;\nbay_d = 100;\nbay_gap = 2;\n\n// Front panel details\nfront_thick = 3;\nled_size = 1.5;\nusb_w = 6;\nusb_h = 3;\nusb_d = 5;\n\nmodule enclosure_shell() {\n    difference() {\n        // Outer shell\n        color(\"darkslategray\") cube([enclosure_w, enclosure_h, enclosure_d], center=true);\n        \n        // Hollow out\n        translate([0,0,wall_thick/2])\n            cube([enclosure_w-2*wall_thick, enclosure_h-2*wall_thick, enclosure_d], center=true);\n        \n        // Front face cutout for bays\n        translate([0,0,-enclosure_d/2 + front_thick/2])\n            cube([enclosure_w-2*wall_thick, enclosure_h-2*wall_thick, front_thick+0.1], center=true);\n    }\n}\n\nmodule drive_bay() {\n    difference() {\n        // Bay frame\n        color(\"black\") cube([bay_w, bay_h, bay_d], center=true);\n        \n        // Inner hollow\n        translate([0,0,0])\n            cube([bay_w-wall_thick, bay_h-wall_thick, bay_d+1], center=true);\n        \n        // Front bevel\n        translate([0,0,-bay_d/2])\n            cylinder(h=wall_thick, r1=bay_w/2-wall_thick/2, r2=bay_w/2, center=true);\n        \n        // Handle slot\n        translate([0, bay_h/2-1, -bay_d/2 + 5])\n            cube([bay_w-6, 2, 3], center=true);\n    }\n    \n    // Drive LED\n    translate([bay_w/2-3, 0, -bay_d/2 + 1])\n        color(\"limegreen\") sphere(led_size);\n    \n    // Handle\n    translate([0, bay_h/2-1, -bay_d/2 + 3.5])\n        color(\"silver\") cube([bay_w-8, 1, 2], center=true);\n}\n\nmodule front_panel() {\n    // Panel plate\n    color(\"gray20\") translate([0,0,-enclosure_d/2 + front_thick/2])\n        cube([enclosure_w-0.2, enclosure_h-0.2, front_thick], center=true);\n    \n    // Power button\n    translate([enclosure_w/2-8, enclosure_h/2-5, -enclosure_d/2 + 1])\n        color(\"silver\") cylinder(h=2, r=3, center=false);\n    \n    // USB ports\n    for(i=[0:1]) {\n        translate([-enclosure_w/2+8+i*8, enclosure_h/2-4, -enclosure_d/2+usb_d/2])\n            color(\"black\") cube([usb_w, usb_h, usb_d], center=true);\n    }\n    \n    // Status LEDs\n    translate([-enclosure_w/2+5, -enclosure_h/2+3, -enclosure_d/2+1])\n        color(\"blue\") sphere(led_size);\n    translate([-enclosure_w/2+5, -enclosure_h/2+6, -enclosure_d/2+1])\n        color(\"red\") sphere(led_size);\n}\n\nmodule rear_panel() {\n    // Rear plate\n    color(\"gray20\") translate([0,0,enclosure_d/2 - wall_thick/2])\n        cube([enclosure_w, enclosure_h, wall_thick], center=true);\n    \n    // Ethernet ports\n    for(i=[0:1]) {\n        translate([i*10-5, 0, enclosure_d/2 - wall_thick/2])\n            color(\"black\") cube([8, 10, wall_thick+0.1], center=true);\n    }\n    \n    // Power connector\n    translate([enclosure_w/2-10, 0, enclosure_d/2 - wall_thick/2])\n        color(\"black\") cylinder(h=wall_thick+0.1, r=4, center=true);\n    \n    // Ventilation slots\n    for(i=[-3:3]) {\n        translate([i*10, enclosure_h/2-5, enclosure_d/2 - wall_thick/2])\n            color(\"black\") cube([3, 8, wall_thick+0.1], center=true);\n    }\n}\n\nmodule feet() {\n    // Rubber feet\n    for(x=[-1,1]) {\n        for(y=[-1,1]) {\n            translate([x*enclosure_w/3, y*enclosure_d/3, -enclosure_h/2 - 1])\n                color(\"black\") cylinder(h=2, r=3, center=false);\n        }\n    }\n}\n\n// Main assembly\nenclosure_shell();\n\n// Drive bays in 2x2 grid\nfor(row=[0:1]) {\n    for(col=[0:1]) {\n        translate([(col-0.5)*(bay_w+2*bay_gap), (row-0.5)*(bay_h+2*bay_gap), 0])\n            drive_bay();\n    }\n}\n\nfront_panel();\nrear_panel();\nfeet();",
    "renders": true
  },
  {
    "electronic_device": "filergrid",
    "openscad_code": "// FilerGrid - Electronic File Management Device\n// Realistic style, medium complexity\n\n// Color definitions\ncolor_case = \"DarkSlateGray\";\ncolor_screen = \"black\";\ncolor_button = \"DimGray\";\ncolor_port = \"Silver\";\ncolor_led = \"red\";\n\n// Main dimensions\ndevice_w = 80;\ndevice_h = 50;\ndevice_d = 18;\nwall_thickness = 2;\n\n// Screen dimensions\nscreen_w = 55;\nscreen_h = 30;\nscreen_depth = 1;\n\n// Button dimensions\nbutton_w = 8;\nbutton_h = 4;\nbutton_d = 2;\n\n// Port dimensions\nusb_w = 12;\nusb_h = 5;\nusb_d = 3;\n\n// LED dimensions\nled_r = 1.5;\nled_depth = 1;\n\n// Main case\nmodule case() {\n    color(color_case)\n    difference() {\n        // Outer shell\n        cube([device_w, device_d, device_h], center=true);\n        \n        // Inner cavity\n        translate([0, 0, -wall_thickness/2])\n        cube([device_w-wall_thickness*2, device_d-wall_thickness, device_h-wall_thickness*2], center=true);\n        \n        // Top rounding\n        translate([0, 0, device_h/2-wall_thickness])\n        cube([device_w-wall_thickness*2, device_d-wall_thickness, wall_thickness], center=true);\n    }\n}\n\n// Screen assembly\nmodule screen() {\n    translate([0, device_d/2-screen_depth/2-0.1, 5])\n    color(color_screen)\n    cube([screen_w, screen_depth, screen_h], center=true);\n    \n    // Screen bezel\n    translate([0, device_d/2-screen_depth/2-0.05, 5])\n    color(\"gray\")\n    cube([screen_w+4, screen_depth+0.1, screen_h+4], center=true);\n}\n\n// Navigation buttons\nmodule buttons() {\n    // D-pad up/down/left/right\n    for(pos = [[-10, 0], [10, 0], [0, -10], [0, 10]]) {\n        translate([pos[0], device_d/2-button_d/2-0.1, pos[1]-5])\n        color(color_button)\n        cube([button_w, button_d, button_h], center=true);\n    }\n    \n    // Center select button\n    translate([0, device_d/2-button_d/2-0.1, -5])\n    color(color_button)\n    cylinder(h=button_d, r=button_w/2, center=true, $fn=20);\n}\n\n// USB ports\nmodule ports() {\n    // USB-C port\n    translate([device_w/2-usb_w/2-5, device_d/2, 0])\n    color(color_port)\n    cube([usb_w, usb_d, usb_h], center=true);\n    \n    // MicroSD slot\n    translate([device_w/2-usb_w/2-5, device_d/2, -10])\n    color(color_port)\n    cube([usb_w, usb_d, 3], center=true);\n}\n\n// Status LEDs\nmodule leds() {\n    // Power LED\n    translate([device_w/2-led_r-3, device_d/2-led_depth/2-0.1, device_h/2-led_r-3])\n    color(color_led)\n    sphere(r=led_r, center=true, $fn=20);\n    \n    // Activity LED\n    translate([device_w/2-led_r-10, device_d/2-led_depth/2-0.1, device_h/2-led_r-3])\n    color(\"green\")\n    sphere(r=led_r, center=true, $fn=20);\n}\n\n// Branding/logo\nmodule branding() {\n    translate([0, device_d/2-0.1, device_h/2-8])\n    color(\"white\")\n    linear_extrude(height=0.5)\n    text(\"FilerGrid\", size=4, halign=\"center\", valign=\"center\");\n}\n\n// Assembly\ncase();\nscreen();\nbuttons();\nports();\nleds();\nbranding();",
    "renders": true
  },
  {
    "electronic_device": "filercloud",
    "openscad_code": "// FilerCloud Electronic Device - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 32;\n\n// Main dimensions\ndevice_width = 80;\ndevice_depth = 60;\ndevice_height = 25;\nwall_thickness = 2;\n\n// Colors\ncolor_case = [0.2, 0.2, 0.2];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_led = [0, 1, 0];\ncolor_ports = [0.3, 0.3, 0.3];\ncolor_logo = [0.8, 0.8, 0.8];\n\n// Main case\nmodule main_case() {\n    color(color_case)\n    difference() {\n        // Outer shell\n        cube([device_width, device_depth, device_height], center = true);\n        \n        // Inner cavity\n        translate([0, 0, -wall_thickness/2])\n            cube([device_width - 2*wall_thickness, device_depth - 2*wall_thickness, device_height + 1], center = true);\n        \n        // Ventilation slots on top\n        for (x = [-30:10:30]) {\n            translate([x, device_depth/2 - 5, device_height/2 - 2])\n                cube([3, 3, 4]);\n        }\n    }\n}\n\n// Front panel with screen and indicators\nmodule front_panel() {\n    // Screen area\n    color(color_screen)\n    translate([0, device_depth/2 - 0.5, 5])\n        cube([50, 1, 15], center = true);\n    \n    // Status LEDs\n    for (i = [0:2]) {\n        color(color_led)\n        translate([-20 + i*15, device_depth/2 - 0.5, -5])\n            cylinder(h = 1, r = 2);\n    }\n    \n    // Power LED\n    color([1, 0, 0])\n    translate([30, device_depth/2 - 0.5, 5])\n        cylinder(h = 1, r = 1.5);\n}\n\n// Side ports\nmodule side_ports() {\n    // USB ports\n    for (i = [0:1]) {\n        color(color_ports)\n        translate([-device_width/2 + 0.5, -15 + i*10, -5])\n            cube([2, 8, 5]);\n    }\n    \n    // Ethernet port\n    color(color_ports)\n    translate([-device_width/2 + 0.5, 10, 5])\n        cube([2, 12, 8]);\n    \n    // Power connector\n    color(color_ports)\n    translate([device_width/2 - 0.5, 0, 5])\n        cube([2, 10, 10]);\n}\n\n// Cooling vents on bottom\nmodule cooling_vents() {\n    difference() {\n        translate([0, 0, -device_height/2 + 1])\n            cube([device_width - 10, device_depth - 10, 2], center = true);\n        \n        for (x = [-30:5:30]) {\n            for (y = [-20:5:20]) {\n                translate([x, y, -device_height/2 + 0.5])\n                    cube([2, 2, 3]);\n            }\n        }\n    }\n}\n\n// Logo on top\nmodule logo() {\n    color(color_logo)\n    translate([0, 0, device_height/2 - 0.5])\n    linear_extrude(height = 0.5) {\n        text(\"FILER\", size = 8, halign = \"center\", valign = \"center\");\n    }\n    \n    translate([0, -12, device_height/2 - 0.5])\n    linear_extrude(height = 0.5) {\n        text(\"CLOUD\", size = 6, halign = \"center\", valign = \"center\");\n    }\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    color([0.1, 0.1, 0.1])\n    for (x = [-30, 30]) {\n        for (y = [-20, 20]) {\n            translate([x, y, -device_height/2])\n                cylinder(h = 2, r = 3);\n        }\n    }\n}\n\n// Antenna\nmodule antenna() {\n    color([0.4, 0.4, 0.4])\n    translate([device_width/2 - 5, device_depth/2 - 5, device_height/2 - 5])\n    rotate([0, 90, 0])\n    cylinder(h = 15, r = 1.5);\n}\n\n// Assembly\nmain_case();\nfront_panel();\nside_ports();\ncooling_vents();\nlogo();\nrubber_feet();\nantenna();",
    "renders": true
  },
  {
    "electronic_device": "filerzone",
    "openscad_code": "// FilerZone Portable Media Player\n// Realistic style, medium complexity\n\n// Overall dimensions\nplayer_w = 42;\nplayer_h = 80;\nplayer_d = 12;\n\n// Screen parameters\nscreen_w = 32;\nscreen_h = 40;\nscreen_depth = 1;\n\n// Button parameters\nbtn_d = 3;\nbtn_h = 2;\nbtn_spacing = 8;\n\n// Ports\nport_w = 8;\nport_h = 3;\nport_d = 4;\n\n// Colors\n$fn = 64;\n\nmodule main_body() {\n    color([0.2, 0.2, 0.2])\n    difference() {\n        // Main body shell\n        cube([player_w, player_h, player_d], center=true);\n        \n        // Hollow out the inside\n        translate([0, 0, -1])\n        cube([player_w-4, player_h-4, player_d-2], center=true);\n        \n        // Screen cutout\n        translate([0, 10, player_d/2])\n        cube([screen_w, screen_h, screen_depth+1], center=true);\n        \n        // USB-C port\n        translate([0, -player_h/2+1, 0])\n        cube([port_w, port_d, port_h], center=true);\n        \n        // 3.5mm jack\n        translate([-player_w/2+1, -player_h/2+5, 0])\n        rotate([90, 0, 0])\n        cylinder(h=port_d, d=5, center=true);\n    }\n}\n\nmodule screen() {\n    // Screen glass\n    color([0.1, 0.1, 0.1, 0.8])\n    translate([0, 10, player_d/2-0.1])\n    cube([screen_w-1, screen_h-1, 0.5], center=true);\n    \n    // Screen bezel\n    color([0.15, 0.15, 0.15])\n    translate([0, 10, player_d/2-0.5])\n    cube([screen_w+1, screen_h+1, 0.5], center=true);\n}\n\nmodule navigation_pad() {\n    // D-pad base\n    color([0.3, 0.3, 0.3])\n    translate([0, -20, player_d/2-1])\n    cube([12, 12, 2], center=true);\n    \n    // Up button\n    color([0.6, 0.6, 0.6])\n    translate([0, -15, player_d/2])\n    cylinder(h=btn_h, d=btn_d, center=true);\n    \n    // Down button\n    translate([0, -25, player_d/2])\n    cylinder(h=btn_h, d=btn_d, center=true);\n    \n    // Left button\n    translate([-5, -20, player_d/2])\n    cylinder(h=btn_h, d=btn_d, center=true);\n    \n    // Right button\n    translate([5, -20, player_d/2])\n    cylinder(h=btn_h, d=btn_d, center=true);\n    \n    // Center button\n    color([0.8, 0.8, 0.8])\n    translate([0, -20, player_d/2])\n    cylinder(h=btn_h+0.5, d=btn_d-0.5, center=true);\n}\n\nmodule side_buttons() {\n    // Power button\n    color([0.4, 0.4, 0.4])\n    translate([player_w/2+0.5, 0, 2])\n    rotate([0, 90, 0])\n    cylinder(h=5, d=3, center=true);\n    \n    // Volume buttons\n    for (i = [0:1]) {\n        translate([player_w/2+0.5, 15+i*5, 2])\n        rotate([0, 90, 0])\n        cylinder(h=4, d=2, center=true);\n    }\n}\n\nmodule branding() {\n    // FilerZone logo\n    color([0.9, 0.9, 0.9])\n    translate([0, 35, player_d/2])\n    linear_extrude(height=0.3)\n    text(\"FILERZONE\", size=3, halign=\"center\", font=\"Arial:style=Bold\");\n}\n\nmodule led_indicator() {\n    // LED indicator\n    color([0.1, 0.8, 0.1])\n    translate([player_w/2-3, -player_h/2+5, player_d/2-0.5])\n    cylinder(h=0.5, d=2, center=true);\n}\n\nmodule usb_port() {\n    // USB-C port detail\n    color([0.1, 0.1, 0.1])\n    translate([0, -player_h/2+1, 0])\n    cube([port_w-2, port_d+1, port_h-1], center=true);\n}\n\nmodule headphone_jack() {\n    // 3.5mm jack detail\n    color([0.1, 0.1, 0.1])\n    translate([-player_w/2+1, -player_h/2+5, 0])\n    rotate([90, 0, 0])\n    cylinder(h=port_d+1, d=3, center=true);\n}\n\n// Assemble the device\nmain_body();\nscreen();\nnavigation_pad();\nside_buttons();\nbranding();\nled_indicator();\nusb_port();\nheadphone_jack();",
    "renders": true
  },
  {
    "electronic_device": "filerdomain",
    "openscad_code": "// Filerdomain - Network Attached Storage Device\n// Dimensions: 120 x 85 x 40 mm\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_drive = [0.1, 0.1, 0.1];\ncolor_led = [0, 1, 0];\ncolor_port = [0.8, 0.8, 0.8];\n\n// Main enclosure\nmodule enclosure() {\n    color(color_body)\n    difference() {\n        // Main body\n        cube([120, 85, 40], center = true);\n        \n        // Front bevel\n        translate([0, 38, 0])\n        cube([120, 10, 40], center = true);\n        \n        // Top ventilation slots\n        for (x = [-50:10:50]) {\n            translate([x, 0, 15])\n            cube([2, 80, 5], center = true);\n        }\n    }\n}\n\n// Drive bays (4x 2.5\" drives)\nmodule drive_bays() {\n    for (i = [0:3]) {\n        color(color_drive)\n        translate([-45 + i * 30, 30, -15])\n        difference() {\n            cube([25, 12, 25]);\n            // Drive activity LED\n            translate([20, 6, 20])\n            color(color_led)\n            sphere(1.5);\n            // Drive handle\n            translate([2, -1, 12])\n            cube([21, 2, 1]);\n        }\n    }\n}\n\n// Front panel\nmodule front_panel() {\n    color(color_body)\n    translate([0, 42, 0])\n    difference() {\n        cube([110, 2, 35], center = true);\n        \n        // Power button\n        translate([0, 0, 10])\n        cylinder(h = 3, r = 5);\n        \n        // USB ports\n        for (i = [0:1]) {\n            translate([-20 + i * 40, 0, 0])\n            cube([8, 5, 5], center = true);\n        }\n        \n        // Status LEDs\n        translate([45, 0, 10])\n        cylinder(h = 2, r = 2);\n        translate([45, 0, 5])\n        cylinder(h = 2, r = 2);\n    }\n}\n\n// Rear panel\nmodule rear_panel() {\n    color(color_body)\n    translate([0, -42, 0])\n    difference() {\n        cube([110, 2, 35], center = true);\n        \n        // Ethernet port\n        translate([-30, 0, 0])\n        cube([15, 5, 15], center = true);\n        \n        // Power connector\n        translate([30, 0, 0])\n        cylinder(h = 5, r = 8);\n        \n        // Ventilation holes\n        for (y = [-10:5:10]) {\n            translate([0, 0, y])\n            cylinder(h = 3, r = 2);\n        }\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    for (x = [-50:100:50])\n    for (y = [-35:70:70]) {\n        color([0.1, 0.1, 0.1])\n        translate([x, y, -21])\n        cylinder(h = 3, r1 = 5, r2 = 3);\n    }\n}\n\n// Assemble the device\nunion() {\n    enclosure();\n    drive_bays();\n    front_panel();\n    rear_panel();\n    feet();\n}",
    "renders": true
  },
  {
    "electronic_device": "filerrealm",
    "openscad_code": "// FilerRealm Smart Data Logger - Realistic Style\n// Medium complexity 3D printable electronic device\n// Dimensions: 80mm x 55mm x 22mm\n\n// Main colors\ncolor(\"dimgray\") main_body();\ncolor(\"black\") front_panel();\ncolor(\"darkslategray\") antenna();\ncolor(\"red\") status_led();\ncolor(\"silver\") ports();\n\n// Main body shell\nmodule main_body() {\n    difference() {\n        // Outer shell with rounded edges\n        minkowski() {\n            cube([80, 55, 20], center=true);\n            sphere(2);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([74, 49, 18], center=true);\n            sphere(1);\n        }\n        \n        // MicroSD slot\n        translate([30, -28, 0])\n            cube([15, 3, 2]);\n        \n        // USB-C port\n        translate([-40, -2, -7])\n            rotate([90, 0, 0])\n            cylinder(h=8, d=8);\n    }\n}\n\n// Front panel with display and buttons\nmodule front_panel() {\n    difference() {\n        // Panel base\n        translate([0, 0, 11])\n            cube([76, 51, 2], center=true);\n        \n        // OLED display window\n        translate([0, 15, 12])\n            cube([50, 20, 1]);\n        \n        // Button holes\n        for(x = [-25, 0, 25]) {\n            translate([x, -15, 12])\n                cylinder(h=3, d=6);\n        }\n    }\n    \n    // Actual display screen\n    color(\"darkgreen\") {\n        translate([0, 15, 12.5])\n            cube([48, 18, 0.5], center=true);\n    }\n    \n    // Buttons\n    color(\"darkgray\") {\n        for(x = [-25, 0, 25]) {\n            translate([x, -15, 9.5])\n                cylinder(h=4, d=5);\n        }\n    }\n}\n\n// RF antenna module\nmodule antenna() {\n    // Antenna base\n    color(\"dimgray\") {\n        translate([35, 0, 12])\n            cube([15, 8, 3], center=true);\n    }\n    \n    // Antenna wire\n    color(\"silver\") {\n        translate([40, 0, 14]) {\n            rotate([90, 0, 0])\n                cylinder(h=20, d=1.5);\n            translate([0, 0, 10])\n                sphere(2);\n        }\n    }\n}\n\n// Status LED\nmodule status_led() {\n    translate([0, 27, 12]) {\n        // LED housing\n        color(\"black\") {\n            cylinder(h=2, d=6);\n            translate([0, 0, 0.5])\n                cylinder(h=2, d=4);\n        }\n        \n        // LED lens\n        color(\"red\") {\n            translate([0, 0, 2.5])\n                cylinder(h=1, d=3);\n        }\n    }\n}\n\n// I/O ports\nmodule ports() {\n    // Ethernet port\n    color(\"silver\") {\n        translate([-30, 20, 0])\n            cube([12, 8, 6], center=true);\n        translate([-30, 20, 2])\n            cube([10, 6, 4], center=true);\n    }\n    \n    // Power jack\n    color(\"silver\") {\n        translate([-30, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=10, d=5.5);\n        translate([-30, 0, -5])\n            cylinder(h=3, d=8);\n    }\n    \n    // Ventilation slots\n    color(\"dimgray\") {\n        for(y = [-10, -5, 0, 5, 10]) {\n            translate([40, y, 0])\n                cube([2, 3, 16], center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "electronic_device": "filernet",
    "openscad_code": "// OpenSCAD Filernet Electronic Device - Realistic Style, Medium Complexity\n// Overall dimensions: 85mm x 55mm x 25mm\n\n$fn = 50;\n\n// Main body shell\nmodule main_body() {\n    color(\"silver\")\n    difference() {\n        // Outer shell\n        minkowski() {\n            cube([80, 50, 20], center=true);\n            sphere(2);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -5])\n        cube([76, 46, 25], center=true);\n        \n        // Antenna cutout\n        translate([0, 0, -12])\n        cylinder(h=10, r=3, center=true);\n    }\n}\n\n// Front panel with screen\nmodule front_panel() {\n    color(\"black\")\n    difference() {\n        translate([0, 0, 9])\n        cube([75, 45, 3], center=true);\n        \n        // Screen window\n        translate([0, 5, 10.1])\n        cube([50, 25, 1], center=true);\n        \n        // LED indicators\n        for(i = [-1, 0, 1]) {\n            translate([i * 12, -15, 10.1])\n            cylinder(h=1, r=2);\n        }\n    }\n}\n\n// LCD screen\nmodule lcd_screen() {\n    color([0.1, 0.1, 0.1])\n    translate([0, 5, 10.5])\n    cube([48, 23, 0.5], center=true);\n}\n\n// Button panel\nmodule buttons() {\n    color(\"dimgray\")\n    translate([0, -15, 10.5])\n    cube([60, 10, 0.5], center=true);\n    \n    // Individual buttons\n    for(i = [-2, -1, 0, 1, 2]) {\n        color(\"black\")\n        translate([i * 10, -15, 11])\n        cylinder(h=1.5, r=4);\n    }\n}\n\n// Antenna\nmodule antenna() {\n    color(\"silver\")\n    translate([0, 0, -15])\n    cylinder(h=25, r=2);\n    \n    color(\"black\")\n    translate([0, 0, -15])\n    cylinder(h=2, r=3);\n}\n\n// Ethernet ports\nmodule ethernet_ports() {\n    color(\"black\")\n    for(i = [0, 1]) {\n        translate([-25 + i * 50, 25.5, 0])\n        cube([12, 3, 8], center=true);\n    }\n    \n    // Port details\n    color(\"gold\")\n    for(i = [0, 1]) {\n        translate([-25 + i * 50, 27, 0])\n        cube([10, 0.5, 6], center=true);\n    }\n}\n\n// Power connector\nmodule power_port() {\n    color(\"black\")\n    translate([30, -25.5, 0])\n    cube([8, 3, 6], center=true);\n    \n    color(\"silver\")\n    translate([30, -27, 0])\n    cube([6, 1, 4], center=true);\n}\n\n// Ventilation slots\nmodule vents() {\n    color(\"silver\")\n    translate([0, 0, 0])\n    for(i = [-3, -1, 1, 3]) {\n        translate([i * 10, 25.5, 0])\n        cube([8, 2, 15], center=true);\n    }\n}\n\n// Logo text (simplified as rectangle)\nmodule logo() {\n    color(\"red\")\n    translate([0, 0, 11])\n    cube([20, 5, 0.2], center=true);\n}\n\n// Assembly\nunion() {\n    main_body();\n    front_panel();\n    lcd_screen();\n    buttons();\n    antenna();\n    ethernet_ports();\n    power_port();\n    vents();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "filerweb",
    "openscad_code": "// FilerWeb - Realistic Electronic Network Storage Device\n// Overall dimensions: 120x80x35mm - fits on most 3D printers\n\n$fn = 36; // Smooth curves for realistic appearance\n\n// Main body dimensions\nbody_width = 120;\nbody_depth = 80;\nbody_height = 35;\nwall_thickness = 2.5;\n\nmodule main_body() {\n    difference() {\n        // Outer shell\n        color(\"gray20\")\n        cube([body_width, body_depth, body_height], center=true);\n        \n        // Hollow interior\n        color(\"gray20\")\n        translate([0, 0, -wall_thickness/2])\n        cube([body_width-wall_thickness*2, body_depth-wall_thickness*2, body_height-wall_thickness], center=true);\n        \n        // Ventilation slots on top\n        for (x = [-50:10:50]) {\n            translate([x, 0, body_height/2 - 1])\n            cube([8, body_depth - 20, 2]);\n        }\n        \n        // LED indicator hole on front\n        translate([body_width/2 - 2, 15, 10])\n        cylinder(h=3, r=3, center=true);\n    }\n}\n\nmodule front_panel() {\n    translate([body_width/2, 0, 0]) {\n        color(\"gray10\")\n        difference() {\n            // Front bezel\n            cube([5, body_depth - 10, body_height - 10], center=true);\n            \n            // Various ports\n            // USB 3.0 ports\n            for (y = [-25:10:-5]) {\n                translate([-2, y, 5])\n                cube([6, 8, 3]);\n            }\n            \n            // Ethernet port\n            translate([-2, 15, 5])\n            cube([6, 16, 8]);\n            \n            // Power connector\n            translate([-2, 30, 0])\n            cylinder(h=6, r=5.5, center=true);\n            \n            // Status LEDs\n            translate([-2, 0, 10])\n            cylinder(h=3, r=2, center=true);\n        }\n    }\n}\n\nmodule rear_panel() {\n    translate([-body_width/2, 0, 0]) {\n        color(\"gray10\")\n        difference() {\n            // Rear bezel\n            cube([5, body_depth - 10, body_height - 10], center=true);\n            \n            // Cooling fan vents\n            for (x = [-25:5:25]) {\n                for (y = [-30:5:30]) {\n                    translate([2, x, y])\n                    cube([2, 3, 1]);\n                }\n            }\n        }\n    }\n}\n\nmodule drive_bays() {\n    // Two 2.5\" drive bays visible from top\n    for (i = [0:1]) {\n        translate([0, -20 + i*40, body_height/2 - 2]) {\n            color(\"gray30\")\n            difference() {\n                // Bay cover\n                cube([100, 30, 2], center=true);\n                \n                // Drive activity LED\n                translate([40, 0, -1])\n                cube([3, 3, 2]);\n                \n                // Lock indicator\n                translate([-40, 0, -1])\n                cube([3, 3, 2]);\n            }\n            \n            // Drive bay label\n            color(\"gray5\")\n            translate([0, 12, 0])\n            cube([80, 2, 1], center=true);\n        }\n    }\n}\n\nmodule rubber_feet() {\n    // Four rubber feet at corners\n    for (x = [-body_width/2 + 10, body_width/2 - 10]) {\n        for (y = [-body_depth/2 + 10, body_depth/2 - 10]) {\n            translate([x, y, -body_height/2 - 2])\n            color(\"black\")\n            cylinder(h=4, r=5);\n        }\n    }\n}\n\nmodule power_button() {\n    translate([body_width/2 - 3, 0, body_height/2 - 5]) {\n        color(\"blue\")\n        cylinder(h=3, r=4);\n        \n        // Button symbol\n        translate([0, 0, 2])\n        color(\"white\")\n        cylinder(h=0.5, r=2);\n    }\n}\n\nmodule status_leds() {\n    // Front LEDs\n    translate([body_width/2 - 2, 15, 10]) {\n        color(\"green\")\n        sphere(r=2.5);\n    }\n    \n    translate([body_width/2 - 2, 0, 10]) {\n        color(\"red\")\n        sphere(r=1.5);\n    }\n}\n\n// Assembly\nmain_body();\nfront_panel();\nrear_panel();\ndrive_bays();\nrubber_feet();\npower_button();\nstatus_leds();",
    "renders": true
  },
  {
    "electronic_device": "filerlink",
    "openscad_code": "// FilerLink – a miniature Network-Attached-Storage (NAS) box\n// 60 × 60 × 40 mm, 3D-printable, no support required\n// Medium-complexity, realistic style\n// Colors: dark grey enclosure, blue status LED, black feet\n\n$fa = 1;\n$fs = 0.4;\n\n// Main dimensions ----------------------------------------------------------\ncase_w  = 60;\ncase_d  = 60;\ncase_h  = 30;\nwall_t  = 2.0;\ncorner_r = 4;\n\n// Ports --------------------------------------------------------------------\nusb_w   = 12;\nusb_h   = 4.5;\neth_w   = 14;\neth_h   = 10;\n\n// Feet ---------------------------------------------------------------------\nfoot_d  = 5;\nfoot_h  = 3;\n\n// LED ----------------------------------------------------------------------\nled_r   = 2;\n\nmodule rounded_box(w, d, h, r) {\n    // solid rounded box with vertical edges filleted\n    hull() {\n        for(x = [r, w-r], y = [r, d-r])\n            translate([x, y, r]) sphere(r=r);\n        translate([0,0,h-r]) cube([w,d,0], center=false);\n    }\n}\n\nmodule case_shell() {\n    // hollow enclosure with open bottom\n    difference() {\n        rounded_box(case_w, case_d, case_h, corner_r);\n        translate([wall_t, wall_t, wall_t])\n            rounded_box(case_w-2*wall_t, case_d-2*wall_t,\n                        case_h-wall_t, corner_r-wall_t);\n    }\n}\n\nmodule port_row() {\n    // horizontal row: USB-A, RJ45, USB-C\n    translate([0, 0, case_h/2]) {\n        // USB-A\n        translate([-(usb_w/2 + 2), 0, 0])\n            cube([usb_w, wall_t+0.1, usb_h], center=true);\n        // Ethernet\n        translate([0, 0, 0])\n            cube([eth_w, wall_t+0.1, eth_h], center=true);\n        // USB-C\n        translate([(eth_w/2 + 2 + usb_w/2), 0, 0])\n            cube([usb_w, wall_t+0.1, usb_h], center=true);\n    }\n}\n\nmodule vent_holes() {\n    // top cooling vents (horizontal slits)\n    for(y = [-20:5:20])\n        translate([0, y, case_h-1])\n            cube([case_w-10, 2, 2], center=true);\n}\n\nmodule status_led() {\n    color(\"blue\")\n    translate([case_w/2-8, case_d/2-4, case_h-wall_t-0.1])\n        cylinder(h=0.5, r=led_r, center=false);\n}\n\nmodule rubber_feet() {\n    // four small cylindrical feet\n    color(\"black\")\n    for(x = [foot_d, case_w-foot_d], y = [foot_d, case_d-foot_d])\n        translate([x, y, -foot_h/2])\n            cylinder(h=foot_h, r=foot_d/2, center=true, $fn=16);\n}\n\nmodule filerlink_logo() {\n    // simple raised text block\n    translate([case_w/2-15, case_d/2-10, case_h-0.2])\n        cube([20, 5, 0.4]);\n}\n\n// Assembly -----------------------------------------------------------------\ndifference() {\n    case_shell();\n    translate([0, case_d-wall_t/2, 0])\n        rotate([0, 90, 0])\n            port_row();\n    translate([0, 0, case_h])\n        vent_holes();\n}\n\ncolor(\"darkslategray\") children();\n\nstatus_led();\nrubber_feet();\ncolor(\"white\") filerlink_logo();",
    "renders": true
  },
  {
    "electronic_device": "filerpath",
    "openscad_code": "// FilePath NAS device model\n// A small network-attached storage box with 2.5\" drive bays, status LEDs and ventilation\n\nmodule case() {\n    // Main enclosure shell (50x80x110mm)\n    difference() {\n        color(\"darkslategray\")\n        cube([50, 80, 110], center=true);\n        \n        // Hollow out interior (46x76x106mm)\n        translate([0, 0, -1])\n        cube([46, 76, 106], center=true);\n        \n        // Front panel opening\n        translate([25, 0, 0])\n        cube([2, 74, 90], center=true);\n    }\n}\n\nmodule front_panel() {\n    // Removable front cover\n    color(\"black\")\n    translate([26, 0, 0])\n    cube([1.5, 74, 90], center=true);\n}\n\nmodule drive_bays() {\n    // Two 2.5\" drive bays with trays\n    for(y = [-25, 25]) {\n        // Drive tray\n        color(\"silver\")\n        translate([22, y, 30])\n        cube([3, 12, 70], center=true);\n        \n        // Drive inside\n        color(\"gray20\")\n        translate([22, y, 30])\n        cube([2.5, 10, 65], center=true);\n    }\n}\n\nmodule status_leds() {\n    // Power LED\n    color(\"lime\")\n    translate([26, -35, 40])\n    sphere(1.5);\n    \n    // Activity LED\n    color(\"blue\")\n    translate([26, -35, 35])\n    sphere(1.5);\n    \n    // Drive status LEDs\n    for(y = [-25, 25]) {\n        color(\"red\")\n        translate([26, y, 20])\n        sphere(1.2);\n    }\n}\n\nmodule ethernet_port() {\n    // RJ45 port on back\n    color(\"black\")\n    translate([-25, 30, 40])\n    rotate([0, 90, 0])\n    cylinder(h=8, d1=8, d2=6, center=true);\n    \n    // Port holes\n    color(\"gray10\")\n    translate([-25, 30, 40])\n    rotate([0, 90, 0])\n    cylinder(h=9, d1=6, d2=4, center=true);\n}\n\nmodule power_connector() {\n    // DC barrel jack\n    color(\"black\")\n    translate([-25, -30, 40])\n    rotate([0, 90, 0])\n    cylinder(h=5, d1=7, d2=5, center=true);\n    \n    // Center pin\n    color(\"silver\")\n    translate([-25, -30, 40])\n    rotate([0, 90, 0])\n    cylinder(h=6, d=1.5, center=true);\n}\n\nmodule ventilation() {\n    // Top ventilation slots\n    for(i = [-4:4]) {\n        color(\"gray20\")\n        translate([0, i*8, 55])\n        cube([40, 3, 1], center=true);\n    }\n    \n    // Side ventilation holes\n    for(j = [-3:3]) {\n        for(k = [-2:2]) {\n            color(\"gray20\")\n            translate([j*6, -40, k*20])\n            rotate([0, 90, 0])\n            cylinder(h=1, d=2, center=true);\n        }\n    }\n}\n\nmodule reset_button() {\n    // Small recessed reset button\n    color(\"red\")\n    translate([26, 0, 0])\n    cylinder(h=1, d=3, center=true);\n    \n    // Button depression\n    color(\"black\")\n    translate([26, 0, -0.6])\n    cylinder(h=2, d=2, center=true);\n}\n\nmodule branding() {\n    // FilePath logo on top\n    color(\"white\")\n    translate([0, 0, 56])\n    linear_extrude(0.5)\n    text(\"FilePath\", size=6, halign=\"center\");\n}\n\n// Assembly\ncase();\nfront_panel();\ndrive_bays();\nstatus_leds();\nethernet_port();\npower_connector();\nventilation();\nreset_button();\nbranding();",
    "renders": true
  },
  {
    "electronic_device": "filerchannel",
    "openscad_code": "// FilerChannel Electronic Device - Realistic Style, Medium Complexity\n// 3D printable model with appropriate wall thickness and no overhangs\n\n// Main dimensions\ndevice_length = 80;\ndevice_width = 45;\ndevice_height = 15;\n\n// Wall thickness\nwall_thickness = 2;\n\n// Colors\ncolor_case = [0.2, 0.2, 0.2];      // Dark gray\ncolor_screen = [0.1, 0.1, 0.1];   // Black\ncolor_button = [0.8, 0.8, 0.8];   // Light gray\ncolor_port = [0.3, 0.3, 0.3];     // Medium gray\ncolor_led = [0, 1, 0];            // Green\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Outer shell\n        color(color_case)\n        cube([device_length, device_width, device_height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, -wall_thickness/2])\n        cube([device_length-wall_thickness*2, device_width-wall_thickness*2, device_height], center=true);\n    }\n}\n\n// Screen display\nmodule screen() {\n    translate([0, 5, device_height/2 + 0.1])\n    color(color_screen)\n    cube([device_length*0.6, device_width*0.5, 0.5], center=true);\n}\n\n// Navigation buttons\nmodule navigation_buttons() {\n    // D-pad style buttons\n    for (x = [-8, 0, 8]) {\n        for (y = [-8, 0, 8]) {\n            if (!(abs(x) == 8 && abs(y) == 8)) {\n                translate([x, -device_width/2 + 15, device_height/2 + 0.5])\n                color(color_button)\n                cylinder(h=1, r=3, $fn=20);\n            }\n        }\n    }\n    \n    // Center select button\n    translate([0, -device_width/2 + 15, device_height/2 + 1])\n    color(color_button)\n    cylinder(h=1.5, r=4, $fn=20);\n}\n\n// Function buttons\nmodule function_buttons() {\n    for (i = [1:4]) {\n        translate([device_length/2 - 15, -10 + i*5, device_height/2 + 0.5])\n        color(color_button)\n        cube([6, 3, 1], center=true);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    translate([device_length/2 - 1, 0, -device_height/4])\n    color(color_port)\n    cube([2, 8, 5], center=true);\n}\n\n// LED indicators\nmodule leds() {\n    for (i = [0:1]) {\n        translate([-device_length/2 + 5 + i*10, device_width/2 - 3, device_height/2 - 1])\n        color(color_led)\n        sphere(r=1, $fn=20);\n    }\n}\n\n// Speaker grilles\nmodule speakers() {\n    for (i = [-1:1]) {\n        translate([device_length/2 - 20, i*15, device_height/2 - 1])\n        difference() {\n            color(color_case)\n            cube([10, 3, 1], center=true);\n            \n            // Grille holes\n            for (j = [-3:3]) {\n                translate([j, 0, 0])\n                cylinder(h=2, r=0.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Brand logo placeholder\nmodule logo() {\n    translate([0, device_width/2 - 8, device_height/2 + 0.3])\n    color([0.9, 0.9, 0.9])\n    cube([15, 5, 0.5], center=true);\n}\n\n// Assembly\nmain_body();\nscreen();\nnavigation_buttons();\nfunction_buttons();\nusb_port();\nleds();\nspeakers();\nlogo();",
    "renders": true
  },
  {
    "electronic_device": "filerpipe",
    "openscad_code": "// OpenSCAD FilErPipe - Electronic Filing Pipe Device\n// Medium complexity, realistic style, 3D printable\n\n// Device dimensions (mm)\npipe_len = 85;\npipe_dia = 22;\nwall_thick = 2;\n\n// Screen\nscreen_w = 18;\nscreen_h = 8;\nscreen_depth = 1;\n\n// USB-C port\nport_w = 8;\nport_h = 2.6;\nport_depth = 4;\n\n// LED indicator\nled_dia = 3;\nled_depth = 1;\n\n// Buttons\nbtn_dia = 4;\nbtn_height = 1.5;\nbtn_spacing = 8;\n\n// Main module\nmodule filerpipe() {\n    // Main pipe body\n    difference() {\n        // Outer shell\n        color(\"dimgray\")\n        cylinder(h = pipe_len, d = pipe_dia, $fn = 64);\n        \n        // Inner hollow\n        translate([0, 0, -0.1])\n        cylinder(h = pipe_len + 0.2, d = pipe_dia - 2*wall_thick, $fn = 64);\n        \n        // End cap relief\n        translate([0, 0, pipe_len - 2])\n        cylinder(h = 3, d = pipe_dia - 0.5, $fn = 64);\n    }\n    \n    // Screen housing\n    translate([0, -pipe_dia/2, pipe_len/2 - 5])\n    difference() {\n        color(\"black\")\n        cube([screen_w + 4, screen_depth + 2, screen_h + 4], center = true);\n        \n        // Screen opening\n        translate([0, 0.5, 0])\n        color(\"darkblue\")\n        cube([screen_w, screen_depth, screen_h], center = true);\n    }\n    \n    // USB-C port\n    translate([0, -pipe_dia/2 - 0.1, 10])\n    difference() {\n        color(\"black\")\n        cube([port_w + 2, port_depth + 1, port_h + 2], center = true);\n        \n        translate([0, 0.5, 0])\n        color(\"silver\")\n        cube([port_w, port_depth, port_h], center = true);\n    }\n    \n    // LED indicator\n    translate([pipe_dia/2 - led_depth - 0.5, 0, pipe_len - 15])\n    color(\"red\")\n    sphere(d = led_dia, $fn = 16);\n    \n    // Control buttons\n    for(i = [0:1]) {\n        translate([0, pipe_dia/2 + btn_height/2, pipe_len/2 + i*btn_spacing - btn_spacing/2])\n        difference() {\n            color(\"darkgray\")\n            cylinder(h = btn_height, d = btn_dia, $fn = 32);\n            \n            color(\"lightgray\")\n            translate([0, 0, btn_height - 0.5])\n            cylinder(h = 0.5, d = btn_dia - 1, $fn = 32);\n        }\n    }\n    \n    // Ventilation slots\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([pipe_dia/2 - 1, 0, pipe_len/2 - 15])\n        cube([2, 1, 8], center = true);\n    }\n    \n    // Brand text area\n    translate([0, pipe_dia/2 - 0.1, pipe_len - 25])\n    color(\"white\")\n    cube([20, 0.2, 6], center = true);\n    \n    // End cap\n    translate([0, 0, pipe_len - 1])\n    difference() {\n        color(\"dimgray\")\n        cylinder(h = 2, d = pipe_dia, $fn = 64);\n        \n        // Keyring hole\n        translate([0, 0, 0.5])\n        rotate([90, 0, 0])\n        cylinder(h = pipe_dia, d = 4, $fn = 16);\n    }\n}\n\n// Generate the model\nfilerpipe();",
    "renders": true
  },
  {
    "electronic_device": "filerlane",
    "openscad_code": "// Filerlane Electronic Device - Realistic Style\n// Medium complexity 3D printable model\n\n// Device dimensions\ndevice_length = 85;\ndevice_width = 45;\ndevice_height = 12;\n\n// Screen dimensions\nscreen_width = 35;\nscreen_height = 25;\nscreen_depth = 1;\n\n// Button dimensions\nbutton_width = 6;\nbutton_height = 4;\nbutton_depth = 1;\n\n// Port dimensions\nusb_width = 8;\nusb_height = 3;\nusb_depth = 5;\n\nmodule main_body() {\n    // Main device body with rounded edges\n    difference() {\n        // Main shell\n        minkowski() {\n            cube([device_length - 2, device_width - 2, device_height - 2], center = true);\n            sphere(1);\n        }\n        \n        // Hollow out interior\n        minkowski() {\n            cube([device_length - 6, device_width - 6, device_height - 6], center = true);\n            sphere(0.5);\n        }\n    }\n}\n\nmodule display() {\n    // Recessed screen area\n    translate([0, 0, device_height/2 - 0.5]) {\n        color(\"black\") {\n            cube([screen_width, screen_height, screen_depth], center = true);\n        }\n        \n        // Screen glass\n        translate([0, 0, 0.1]) {\n            color([0.2, 0.2, 0.3, 0.8]) {\n                cube([screen_width - 2, screen_height - 2, 0.3], center = true);\n            }\n        }\n    }\n}\n\nmodule navigation_buttons() {\n    // D-pad style navigation\n    translate([-device_length/4, 0, device_height/2 - 0.5]) {\n        // Up button\n        translate([0, 10, 0]) {\n            color(\"darkgray\") {\n                cube([button_width, button_height, button_depth], center = true);\n            }\n        }\n        \n        // Down button\n        translate([0, -10, 0]) {\n            color(\"darkgray\") {\n                cube([button_width, button_height, button_depth], center = true);\n            }\n        }\n        \n        // Left button\n        translate([-10, 0, 0]) {\n            color(\"darkgray\") {\n                cube([button_height, button_width, button_depth], center = true);\n            }\n        }\n        \n        // Right button\n        translate([10, 0, 0]) {\n            color(\"darkgray\") {\n                cube([button_height, button_width, button_depth], center = true);\n            }\n        }\n        \n        // Center button\n        color(\"red\") {\n            cube([button_width - 1, button_width - 1, button_depth + 0.2], center = true);\n        }\n    }\n}\n\nmodule action_buttons() {\n    // Action buttons on right side\n    for(i = [0:1]) {\n        translate([device_length/4, 10 - i*20, device_height/2 - 0.5]) {\n            color(i == 0 ? \"blue\" : \"green\") {\n                cylinder(h = button_depth, r = button_width/2, center = true);\n            }\n        }\n    }\n}\n\nmodule ports() {\n    // USB-C port on bottom\n    translate([device_length/2 - usb_depth/2 - 1, 0, -device_height/2 + usb_height/2 + 2]) {\n        color(\"black\") {\n            cube([usb_depth, usb_width, usb_height], center = true);\n        }\n    }\n    \n    // MicroSD slot\n    translate([device_length/2 - usb_depth/2 - 1, 0, -device_height/2 + usb_height + 5]) {\n        color(\"black\") {\n            cube([usb_depth - 2, 10, 1.5], center = true);\n        }\n    }\n}\n\nmodule speaker_grills() {\n    // Speaker holes on bottom\n    for(x = [-20:10:20]) {\n        for(y = [-device_width/2 + 3 : 3 : -device_width/2 + 12]) {\n            translate([x, y, -device_height/2 + 1]) {\n                color(\"black\") {\n                    cylinder(h = 1, r = 0.5, center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule status_leds() {\n    // Status LEDs next to screen\n    for(i = [0:2]) {\n        translate([device_length/2 - 8 - i*5, device_width/2 - 5, device_height/2 - 0.5]) {\n            color(i == 0 ? \"green\" : i == 1 ? \"yellow\" : \"red\") {\n                cylinder(h = 0.5, r = 1, center = true);\n            }\n        }\n    }\n}\n\nmodule logo() {\n    // Filerlane logo on back\n    translate([0, 0, -device_height/2 + 0.5]) {\n        color(\"white\") {\n            // Simple \"FL\" text representation\n            cube([8, 2, 0.2], center = true);\n            translate([-4, -3, 0]) cube([2, 6, 0.2], center = true);\n            translate([4, -3, 0]) cube([2, 6, 0.2], center = true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    color(\"lightgray\") main_body();\n    display();\n    navigation_buttons();\n    action_buttons();\n    ports();\n    speaker_grills();\n    status_leds();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "filertrunk",
    "openscad_code": "// FilerTrunk Electronic Device - Realistic Style\n// A compact file storage device with rugged design\n\n// Main dimensions\ntrunk_length = 80;\ntrunk_width = 45;\ntrunk_height = 25;\nwall_thickness = 2;\n\n// Module for rounded corners\nmodule rounded_cube(size, radius, center=false) {\n    translate(center ? [-size[0]/2, -size[1]/2, -size[2]/2] : [0, 0, 0])\n    hull() {\n        for(x = [0, size[0]-radius*2])\n            for(y = [0, size[1]-radius*2])\n                for(z = [0, size[2]-radius*2])\n                    translate([x+radius, y+radius, z+radius])\n                        sphere(r=radius);\n    }\n}\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Outer shell\n        color([0.2, 0.2, 0.25])\n        rounded_cube([trunk_length, trunk_width, trunk_height], 5, true);\n        \n        // Inner cavity\n        color([0.1, 0.1, 0.15])\n        translate([0, 0, wall_thickness])\n        rounded_cube([trunk_length-wall_thickness*2, trunk_width-wall_thickness*2, trunk_height-wall_thickness], 4, true);\n    }\n}\n\n// Rubber bumpers\nmodule bumpers() {\n    color([0.1, 0.1, 0.1])\n    for(pos = [[trunk_length/2-5, trunk_width/2-5, -trunk_height/2], \n               [-trunk_length/2+5, trunk_width/2-5, -trunk_height/2],\n               [trunk_length/2-5, -trunk_width/2+5, -trunk_height/2],\n               [-trunk_length/2+5, -trunk_width/2+5, -trunk_height/2]]) {\n        translate(pos)\n            cylinder(h=3, r1=3, r2=2);\n    }\n}\n\n// Status LED strip\nmodule status_leds() {\n    color([0, 0.8, 0.2])\n    for(i = [-30:5:30]) {\n        translate([i, trunk_width/2-1, trunk_height/2-1])\n            cube([3, 0.5, 0.5]);\n    }\n}\n\n// USB-C ports\nmodule usb_ports() {\n    color([0.15, 0.15, 0.15])\n    for(offset = [-15, 15]) {\n        translate([offset, -trunk_width/2, 0])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=8, r=3.5);\n                    translate([0, 0, -1])\n                        cube([7, 2, 10], center=true);\n                }\n    }\n}\n\n// Activity button\nmodule power_button() {\n    color([0.8, 0, 0])\n    translate([trunk_length/2-10, 0, trunk_height/2-2])\n        difference() {\n            cylinder(h=2, r=4);\n            translate([0, 0, -0.5])\n                cube([6, 1, 4], center=true);\n        }\n}\n\n// Ventilation slots\nmodule vents() {\n    color([0.2, 0.2, 0.25])\n    for(i = [-20:4:20]) {\n        translate([i, 0, trunk_height/2-1])\n            cube([2, trunk_width-6, 1]);\n    }\n}\n\n// Logo plate\nmodule logo() {\n    color([0.7, 0.7, 0.8])\n    translate([0, 0, trunk_height/2-0.5])\n        cube([12, 6, 0.5], center=true);\n    color([0.2, 0.2, 0.25])\n    translate([0, 0, trunk_height/2])\n        cube([10, 4, 0.1], center=true);\n}\n\n// Assembly\nunion() {\n    main_body();\n    bumpers();\n    status_leds();\n    usb_ports();\n    power_button();\n    vents();\n    logo();\n}",
    "renders": true
  },
  {
    "electronic_device": "filerbundle",
    "openscad_code": "// Filerbundle Electronic Device - Realistic Style, Medium Complexity\n// A compact wireless file storage and sharing device with LED indicators\n\n// Main dimensions\ndevice_length = 85;\ndevice_width = 45;\ndevice_height = 12;\nwall_thickness = 2;\ncorner_radius = 3;\n\n// Colors\ncase_color = [0.15, 0.15, 0.15];\naccent_color = [0.9, 0.9, 0.9];\nled_color = [0, 0.8, 0.2];\nport_color = [0.1, 0.1, 0.1];\n\n// Create rounded corners module\nmodule rounded_cube(size, radius, center=false) {\n    translate([0, 0, center ? -size.z/2 : 0])\n    hull() {\n        for(x = [radius, size.x - radius])\n            for(y = [radius, size.y - radius])\n                translate([x, y, radius])\n                    sphere(r=radius);\n        \n        for(x = [radius, size.x - radius])\n            translate([x, radius, radius])\n                cylinder(h=size.z - 2*radius, r=radius);\n        \n        for(y = [radius, size.y - radius])\n            translate([radius, y, radius])\n                cylinder(h=size.z - 2*radius, r=radius);\n        \n        translate([radius, radius, radius])\n            cube([size.x - 2*radius, size.y - 2*radius, size.z - 2*radius]);\n    }\n}\n\n// Main device body\nmodule device_body() {\n    color(case_color)\n    difference() {\n        rounded_cube([device_length, device_width, device_height], corner_radius);\n        \n        // Top face cutout for accent panel\n        translate([5, 5, device_height - 0.5])\n            cube([device_length - 10, device_width - 10, 1]);\n    }\n}\n\n// Accent panel\nmodule accent_panel() {\n    color(accent_color)\n    translate([5, 5, device_height - 0.5])\n        cube([device_length - 10, device_width - 10, 0.5], true);\n}\n\n// LED indicators\nmodule led_indicators() {\n    for(i = [0:3]) {\n        translate([device_length - 15 - i*15, device_width - 8, device_height - 1]) {\n            color(led_color)\n            cylinder(h=0.3, r=2);\n            color([0, 0, 0])\n            translate([0, 0, -0.1])\n                cylinder(h=1.5, r=3.5);\n        }\n    }\n}\n\n// USB-C port\nmodule usbc_port() {\n    color(port_color)\n    translate([device_length - 8, device_width/2, device_height/2])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=8, r=4);\n                translate([0, 0, -1])\n                    cylinder(h=10, r=3.2);\n            }\n}\n\n// MicroSD slot\nmodule microsd_slot() {\n    color(port_color)\n    translate([8, device_width - 3, device_height/2])\n        rotate([0, 90, 0])\n            cube([12, 1.5, 11], true);\n}\n\n// Logo text (simplified as grooves)\nmodule logo() {\n    translate([device_length/2 - 10, device_width/2 - 5, device_height - 0.3])\n        for(i = [0:4]) {\n            translate([i*4, 0, 0])\n                cube([2, 10, 0.2]);\n        }\n}\n\n// Ventilation holes\nmodule ventilation_holes() {\n    for(i = [0:7]) {\n        translate([10 + i*8, 3, device_height - 6])\n            rotate([90, 0, 0])\n                cylinder(h=1, r=0.8);\n    }\n}\n\n// Assembly\nunion() {\n    device_body();\n    accent_panel();\n    led_indicators();\n    usbc_port();\n    microsd_slot();\n    logo();\n    ventilation_holes();\n}",
    "renders": true
  },
  {
    "electronic_device": "filerbond",
    "openscad_code": "// FilerBond Electronic Device - Realistic Style\n// A portable file management device with screen and controls\n\n// Main dimensions\ndevice_length = 85;\ndevice_width = 45;\ndevice_height = 12;\n\n// Corner radius for rounded edges\ncorner_radius = 3;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.2;\n\n// Main body module\nmodule main_body() {\n    color(\"lightgray\") {\n        // Create rounded rectangular base\n        hull() {\n            translate([corner_radius, corner_radius, 0])\n                cylinder(r=corner_radius, h=device_height);\n            translate([device_length-corner_radius, corner_radius, 0])\n                cylinder(r=corner_radius, h=device_height);\n            translate([device_length-corner_radius, device_width-corner_radius, 0])\n                cylinder(r=corner_radius, h=device_height);\n            translate([corner_radius, device_width-corner_radius, 0])\n                cylinder(r=corner_radius, h=device_height);\n        }\n    }\n}\n\n// Screen module\nmodule screen() {\n    color(\"black\") {\n        translate([5, 5, device_height-wall_thickness]) {\n            cube([device_length-10, device_width-10, wall_thickness]);\n        }\n    }\n    \n    // Screen display area\n    color(\"darkblue\") {\n        translate([7, 7, device_height-wall_thickness+0.1]) {\n            cube([device_length-14, device_width-14, wall_thickness/2]);\n        }\n    }\n}\n\n// Navigation button cluster\nmodule navigation_buttons() {\n    // D-pad style buttons\n    color(\"darkgray\") {\n        // Up button\n        translate([device_length/2-5, device_width-8, device_height-wall_thickness]) {\n            cube([10, 6, wall_thickness]);\n        }\n        \n        // Down button\n        translate([device_length/2-5, device_width-20, device_height-wall_thickness]) {\n            cube([10, 6, wall_thickness]);\n        }\n        \n        // Left button\n        translate([device_length/2-15, device_width-14, device_height-wall_thickness]) {\n            cube([6, 10, wall_thickness]);\n        }\n        \n        // Right button\n        translate([device_length/2+9, device_width-14, device_height-wall_thickness]) {\n            cube([6, 10, wall_thickness]);\n        }\n        \n        // Center button\n        translate([device_length/2-4, device_width-14, device_height-wall_thickness]) {\n            cube([8, 8, wall_thickness]);\n        }\n    }\n}\n\n// Function buttons\nmodule function_buttons() {\n    color(\"darkgray\") {\n        // Power button\n        translate([device_length-15, 5, device_height-wall_thickness]) {\n            cylinder(r=3, h=wall_thickness);\n        }\n        \n        // Menu button\n        translate([device_length-25, 5, device_height-wall_thickness]) {\n            cube([6, 6, wall_thickness]);\n        }\n        \n        // Select button\n        translate([device_length-35, 5, device_height-wall_thickness]) {\n            cube([6, 6, wall_thickness]);\n        }\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    color(\"black\") {\n        // Port opening\n        translate([device_length/2-4, -0.5, device_height/2-2]) {\n            cube([8, 1, 4]);\n        }\n        \n        // Port interior\n        translate([device_length/2-3.5, -0.6, device_height/2-1.5]) {\n            cube([7, 0.5, 3]);\n        }\n    }\n}\n\n// LED indicators\nmodule led_indicators() {\n    // Charging LED\n    color(\"green\") {\n        translate([10, 2, device_height-wall_thickness]) {\n            cylinder(r=1.5, h=wall_thickness);\n        }\n    }\n    \n    // Activity LED\n    color(\"blue\") {\n        translate([20, 2, device_height-wall_thickness]) {\n            cylinder(r=1.5, h=wall_thickness);\n        }\n    }\n}\n\n// Branding text area\nmodule branding() {\n    color(\"darkgray\") {\n        translate([device_length/2-10, device_width-30, device_height-wall_thickness]) {\n            cube([20, 4, wall_thickness]);\n        }\n    }\n}\n\n// SD card slot\nmodule sd_slot() {\n    color(\"black\") {\n        translate([device_length-5, device_width/2-6, device_height/2-1]) {\n            cube([1, 12, 2]);\n        }\n    }\n}\n\n// Assemble the device\nunion() {\n    main_body();\n    screen();\n    navigation_buttons();\n    function_buttons();\n    usb_port();\n    led_indicators();\n    branding();\n    sd_slot();\n}",
    "renders": true
  },
  {
    "electronic_device": "filerpair",
    "openscad_code": "// FilerPair electronic device - realistic style with medium complexity\n// Overall dimensions: 85mm x 45mm x 12mm\n\n$fn = 32;\n\n// Main body module\nmodule filerpair_body() {\n    // Main chassis - rounded rectangle base\n    difference() {\n        // Main body shell\n        minkowski() {\n            cube([80, 40, 8], center = true);\n            sphere(2);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, -1])\n            minkowski() {\n                cube([76, 36, 6], center = true);\n                sphere(1.5);\n            }\n    }\n}\n\n// Display module\nmodule display() {\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, 5])\n        cube([35, 25, 0.5], center = true);\n    \n    // Screen glass\n    color([0.2, 0.2, 0.3, 0.7])\n    translate([0, 0, 5.3])\n        cube([34, 24, 0.2], center = true);\n    \n    // Bezel around display\n    color([0.3, 0.3, 0.3])\n    translate([0, 0, 4.8])\n        cube([38, 28, 0.5], center = true);\n}\n\n// Button module\nmodule buttons() {\n    // Navigation pad (5-way button)\n    color([0.2, 0.2, 0.2])\n    translate([25, 0, 5])\n        cylinder(h = 1, r = 8);\n    \n    // Center button\n    color([0.1, 0.1, 0.1])\n    translate([25, 0, 6.2])\n        cylinder(h = 0.5, r = 3);\n    \n    // Directional buttons\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([25, 6, 5.5])\n            cube([4, 3, 1], center = true);\n    }\n    \n    // Function buttons\n    color([0.15, 0.15, 0.15])\n    for (i = [0:1]) {\n        translate([25, -15 + i * 30, 5])\n            cube([8, 6, 1], center = true);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    color([0.1, 0.1, 0.1])\n    translate([40, 0, 0])\n        rotate([90, 0, 0])\n        difference() {\n            cube([8, 4, 6], center = true);\n            translate([0, 0, 1])\n                cube([6, 2.5, 7], center = true);\n        }\n    \n    // Port surround\n    color([0.4, 0.4, 0.4])\n    translate([40, 0, -1])\n        rotate([90, 0, 0])\n        cube([10, 6, 2], center = true);\n}\n\n// LED indicators\nmodule indicators() {\n    // Power LED\n    color([0, 1, 0])\n    translate([-35, 15, 5.5])\n        cylinder(h = 0.5, r = 1.5);\n    \n    // Status LED\n    color([0, 0, 1])\n    translate([-35, 10, 5.5])\n        cylinder(h = 0.5, r = 1.5);\n    \n    // LED diffusers\n    color([0.9, 0.9, 0.9, 0.6])\n    for (i = [0:1]) {\n        translate([-35, 15 - i * 5, 6.2])\n            cylinder(h = 0.3, r = 2);\n    }\n}\n\n// Speaker grille\nmodule speaker_grille() {\n    color([0.2, 0.2, 0.2])\n    translate([-35, -15, 5])\n        cube([10, 8, 1], center = true);\n    \n    // Grille holes\n    for (i = [0:3]) {\n        for (j = [0:1]) {\n            translate([-39 + i * 2.5, -17 + j * 4, 6.2])\n                cylinder(h = 1, r = 0.5);\n        }\n    }\n}\n\n// Branding text area\nmodule branding() {\n    color([0.7, 0.7, 0.7])\n    translate([0, 18, 5.2])\n        cube([20, 4, 0.3], center = true);\n}\n\n// Assembly\ncolor([0.8, 0.8, 0.8]) filerpair_body();\ncolor([0.1, 0.1, 0.1]) display();\ncolor([0.15, 0.15, 0.15]) buttons();\ncolor([0.2, 0.2, 0.2]) usb_port();\ncolor([0.9, 0.9, 0.9]) indicators();\ncolor([0.3, 0.3, 0.3]) speaker_grille();\ncolor([0.6, 0.6, 0.6]) branding();",
    "renders": true
  },
  {
    "electronic_device": "disk",
    "openscad_code": "// OpenSCAD model of a realistic 2.5\" SSD disk\n// Dimensions based on a typical 7 mm thick 2.5\" drive\n\n// Overall dimensions\ndrive_w = 69.85;  // Standard 2.5\" width\ndrive_l = 100.0;  // Standard 2.5\" length\ndrive_h = 7.0;    // Slim 7 mm height\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Color constants\ncolor_case = \"gray60\";\ncolor_label = \"white\";\ncolor_screw = \"gray30\";\ncolor_port = \"gold\";\ncolor_led = \"lime\";\n\n// Main body shell\nmodule drive_case() {\n    difference() {\n        // Outer shell\n        color(color_case)\n        cube([drive_l, drive_w, drive_h], center=true);\n\n        // Hollow out the inside\n        translate([0, 0, -wall/2])\n            cube([drive_l-wall*2, drive_w-wall*2, drive_h-wall], center=true);\n\n        // Rounded corners on bottom\n        for(x=[-drive_l/2+wall, drive_l/2-wall]) {\n            for(y=[-drive_w/2+wall, drive_w/2-wall]) {\n                translate([x, y, -drive_h/2+wall/2])\n                    cylinder(r=wall, h=drive_h, center=true);\n            }\n        }\n    }\n}\n\n// Label sticker on top\nmodule top_label() {\n    color(color_label)\n    translate([0, 0, drive_h/2-0.1])\n        cube([drive_l-6, drive_w-6, 0.2], center=true);\n}\n\n// SATA data + power connector\nmodule sata_connector() {\n    color(color_port)\n    translate([drive_l/2-1.5, 0, -drive_h/2+2.5])\n        cube([3, 28, 5]);\n    \n    // SATA data pins\n    translate([drive_l/2-1, -12, -drive_h/2+2.5+2.5])\n        for(i=[0:6])\n            translate([0, i*3.8, 0])\n                cube([0.6, 1.4, 0.6]);\n    \n    // SATA power pins\n    translate([drive_l/2-1, 12, -drive_h/2+2.5+2.5])\n        for(i=[0:14])\n            translate([0, -i*1.27, 0])\n                cube([0.6, 0.8, 0.6]);\n}\n\n// Mounting screw holes (4 corners)\nmodule screw_holes() {\n    color(color_screw)\n    for(x=[-drive_l/2+8, drive_l/2-8]) {\n        for(y=[-drive_w/2+3, drive_w/2-3]) {\n            translate([x, y, 0])\n                cylinder(r=1.5, h=drive_h, center=true);\n        }\n    }\n}\n\n// Activity LED indicator\nmodule activity_led() {\n    color(color_led)\n    translate([drive_l/2-5, drive_w/2-5, drive_h/2-0.5])\n        sphere(r=0.6);\n}\n\n// Bottom case features\nmodule bottom_features() {\n    // Ventilation slots\n    color(color_case)\n    for(x=[-drive_l/2+20:5:drive_l/2-20]) {\n        translate([x, 0, -drive_h/2+wall/2])\n            cube([2, drive_w-wall*2, wall]);\n    }\n    \n    // Regulatory markings\n    translate([0, -drive_w/2+5, -drive_h/2+0.1])\n        cube([12, 8, 0.2], center=true);\n}\n\n// Assembly\ndrive_case();\ntop_label();\nsata_connector();\ndifference() {\n    union();  // Placeholder for positive geometry\n    screw_holes();\n}\nactivity_led();\nbottom_features();",
    "renders": true
  },
  {
    "electronic_device": "backup",
    "openscad_code": "// Portable SSD backup drive - realistic style, medium complexity\n// 65mm x 35mm x 8mm overall dimensions\n\nmodule body() {\n    difference() {\n        // Main aluminum housing\n        color(\"silver\")\n        cube([65, 35, 8], center=true);\n        \n        // Chamfer edges\n        for(x = [-32, 32])\n        for(y = [-17, 17])\n        for(z = [-4, 4])\n        translate([x, y, z])\n        scale([0.8, 0.8, 0.8])\n        sphere(2, $fn=16);\n    }\n}\n\nmodule usb_c_port() {\n    // USB-C port recess\n    translate([32, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        color(\"black\")\n        cylinder(h=8, d1=10, d2=10, center=true, $fn=32);\n        \n        // Port opening\n        translate([0, 0, -1])\n        cylinder(h=12, d1=8.4, d2=8.4, center=true, $fn=32);\n    }\n}\n\nmodule status_led() {\n    // Activity LED indicator\n    translate([25, 10, 0])\n    difference() {\n        // LED housing\n        color(\"black\")\n        cylinder(h=2, d=4, center=true, $fn=16);\n        \n        // LED lens\n        translate([0, 0, -1])\n        color(\"deepskyblue\")\n        sphere(1.5, $fn=16);\n    }\n}\n\nmodule brand_label() {\n    // Brand name engraved\n    translate([0, 0, 5])\n    linear_extrude(0.5)\n    text(\"BACKUP\", size=4, halign=\"center\", valign=\"center\", font=\"Arial:style=Bold\");\n}\n\nmodule heat_vent() {\n    // Cooling vents pattern\n    translate([-32, 0, 0])\n    rotate([0, 90, 0])\n    for(i = [-15:5:15]) {\n        translate([0, i, 0])\n        color(\"gray20\")\n        cube([8, 2, 1], center=true);\n    }\n}\n\nmodule button() {\n    // Reset button\n    translate([-25, 10, 0])\n    difference() {\n        // Button housing\n        color(\"black\")\n        cylinder(h=1.5, d=6, center=true, $fn=16);\n        \n        // Button surface\n        translate([0, 0, -1])\n        color(\"silver\")\n        sphere(2.5, $fn=16);\n    }\n}\n\nmodule grip_pattern() {\n    // Rubber grip texture\n    translate([0, -15, 4])\n    rotate([90, 0, 0])\n    for(i = [-30:2:30]) {\n        translate([i, 0, 0])\n        color(\"gray10\")\n        cube([1, 8, 0.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    usb_c_port();\n    status_led();\n    brand_label();\n    heat_vent();\n    button();\n    grip_pattern();\n}",
    "renders": true
  },
  {
    "electronic_device": "archive",
    "openscad_code": "// Archive electronic device - Portable external HDD enclosure\n// Dimensions: 80 x 120 x 20 mm\n\n// Main parameters\n$fn = 50;\nwall_thickness = 1.5;\ncorner_radius = 2;\ndevice_color = \"silver\";\naccent_color = \"black\";\nled_color = \"green\";\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        color(device_color)\n        minkowski() {\n            cube([80, 120, 20], center = true);\n            sphere(corner_radius);\n        }\n        \n        // Inner cavity\n        color(\"white\")\n        translate([0, 0, -wall_thickness/2])\n        minkowski() {\n            cube([80 - 2*wall_thickness, 120 - 2*wall_thickness, 20 - wall_thickness], center = true);\n            sphere(corner_radius - 1);\n        }\n    }\n}\n\n// Top label area\nmodule label_area() {\n    color(\"white\")\n    translate([0, 30, 10.1])\n    cube([60, 40, 0.2], center = true);\n}\n\n// USB 3.0 port\nmodule usb_port() {\n    color(accent_color)\n    translate([0, -60, 0])\n    difference() {\n        cube([12, 8, 5], center = true);\n        translate([0, 0, 2.5])\n        cube([9, 6, 3], center = true);\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    color(led_color)\n    translate([30, -60, 5])\n    sphere(1.5);\n}\n\n// Ventilation holes pattern\nmodule ventilation_holes() {\n    for (y = [40:-10:-40]) {\n        for (x = [-30:10:30]) {\n            translate([x, y, 10.1])\n            cylinder(h = 0.5, r = 1.5, center = true);\n        }\n    }\n}\n\n// Side grip texture\nmodule grip_texture() {\n    for (i = [0:9]) {\n        translate([0, -55 + i*12, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 80, r = 0.5, center = true);\n    }\n}\n\n// Power button\nmodule power_button() {\n    color(\"red\")\n    translate([-35, 0, 10.1])\n    cylinder(h = 1, r = 4);\n}\n\n// Screw holes for assembly\nmodule screw_holes() {\n    for (pos = [[-35, 55], [35, 55], [-35, -55], [35, -55]]) {\n        translate([pos[0], pos[1], 0])\n        cylinder(h = 20, r = 1.5, center = true);\n    }\n}\n\n// Assembly\nbody();\nlabel_area();\nusb_port();\nled_indicator();\ndifference() {\n    cube([80, 120, 20], center = true);\n    ventilation_holes();\n}\ntranslate([40, 0, 0])\ngrip_texture();\ntranslate([-40, 0, 0])\nmirror([1, 0, 0])\ngrip_texture();\npower_button();\nscrew_holes();",
    "renders": true
  }
]