[
  {
    "building": "house",
    "openscad_code": "// Medium-complexity realistic house – 3D-printable\n// Scale factor keeps the model around 75 mm in length\nscale_factor = 0.25;\n\nmodule house() {\n    // Wall thickness for 3D printing\n    wall = 2;\n\n    // Main box – outer shell\n    difference() {\n        cube([60, 40, 35], center = true);\n        translate([0, 0, 1])\n            cube([60 - wall*2, 40 - wall*2, 35 - wall], center = true);\n    }\n\n    // Roof – two sloped halves\n    translate([0, 0, 35/2 + 15/2])\n    rotate([0, 0, 0])\n    union() {\n        // Left half\n        translate([-30/2, 0, 0])\n            rotate([0, 45, 0])\n            cube([30*sqrt(2), 42, wall], center = true);\n        // Right half\n        translate([30/2, 0, 0])\n            rotate([0, -45, 0])\n            cube([30*sqrt(2), 42, wall], center = true);\n    }\n\n    // Chimney on roof\n    translate([15, 10, 35/2 + 15])\n    difference() {\n        cube([8, 8, 12], center = true);\n        translate([0, 0, 2])\n            cube([8 - wall, 8 - wall, 12 - wall], center = true);\n    }\n\n    // Door\n    translate([-15, 0, -35/2 + 0.5])\n    difference() {\n        translate([0, -20/2 + 5, 15/2])\n            cube([wall, 10, 15], center = true);\n        // Door opening\n        translate([0, -20/2 + 5, 15/2])\n            cube([wall + 0.1, 10 + 0.1, 15 + 0.1], center = true);\n    }\n\n    // Windows (four symmetric)\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * 15, y * 10, 0])\n            difference() {\n                translate([0, -20/2 - 0.5, 5])\n                    cube([wall, 8, 8], center = true);\n                // Window opening\n                translate([0, -20/2 - 0.6, 5])\n                    cube([wall + 0.1, 8 + 0.1, 8 + 0.1], center = true);\n            }\n        }\n    }\n\n    // Window frames (thin boxes)\n    frame_thk = 1;\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * 15, y * 10, 5])\n            union() {\n                // Top\n                translate([0, 0, 4])\n                    cube([wall + 0.1, 8 + frame_thk*2, frame_thk], center = true);\n                // Bottom\n                translate([0, 0, -4])\n                    cube([wall + 0.1, 8 + frame_thk*2, frame_thk], center = true);\n                // Left\n                translate([0, -4, 0])\n                    cube([wall + 0.1, frame_thk, 8 + frame_thk*2], center = true);\n                // Right\n                translate([0, 4, 0])\n                    cube([wall + 0.1, frame_thk, 8 + frame_thk*2], center = true);\n            }\n        }\n    }\n\n    // Simple foundation plinth\n    translate([0, 0, -35/2 - 2])\n    difference() {\n        cube([64, 44, 4], center = true);\n        translate([0, 0, 1])\n            cube([64 - wall, 44 - wall, 4], center = true);\n    }\n}\n\n// Apply global scale\nscale([scale_factor, scale_factor, scale_factor])\nhouse();",
    "renders": true
  },
  {
    "building": "mansion",
    "openscad_code": "// Mansion - Medium complexity realistic style\n// Designed for 3D printing (no overhangs, 2mm wall thickness)\n\nwall_thickness = 2;\nscale_factor = 0.5;\n\nmodule window(width, height, depth) {\n    difference() {\n        cube([width, height, depth]);\n        translate([wall_thickness/2, wall_thickness/2, -0.1])\n            cube([width-wall_thickness, height-wall_thickness, depth+0.2]);\n    }\n}\n\nmodule door(width, height, depth) {\n    difference() {\n        cube([width, height, depth]);\n        translate([wall_thickness/2, wall_thickness/2, -0.1])\n            cube([width-wall_thickness, height-wall_thickness, depth+0.2]);\n    }\n}\n\nmodule roof(width, depth, height) {\n    hull() {\n        translate([-wall_thickness, -wall_thickness, 0])\n            cylinder(h=wall_thickness, r=wall_thickness);\n        translate([width+wall_thickness, -wall_thickness, 0])\n            cylinder(h=wall_thickness, r=wall_thickness);\n        translate([-wall_thickness, depth+wall_thickness, 0])\n            cylinder(h=wall_thickness, r=wall_thickness);\n        translate([width+wall_thickness, depth+wall_thickness, 0])\n            cylinder(h=wall_thickness, r=wall_thickness);\n        translate([width/2, depth/2, height])\n            cylinder(h=wall_thickness, r=wall_thickness);\n    }\n}\n\nmodule chimney(x, y) {\n    translate([x, y, 0]) {\n        cube([8, 8, 20]);\n    }\n}\n\nmodule main_building() {\n    // Base foundation\n    translate([-40, -30, 0])\n        cube([80, 60, 5]);\n    \n    // Main walls\n    translate([-35, -25, 5])\n        cube([70, 50, 35]);\n    \n    // Windows front\n    for(x = [-20, -10, 0, 10, 20]) {\n        translate([x, -25+wall_thickness/2, 15])\n            rotate([0, 90, 0])\n                window(15, 10, wall_thickness);\n    }\n    \n    // Windows back\n    for(x = [-20, -10, 0, 10, 20]) {\n        translate([x, 25-wall_thickness/2, 15])\n            rotate([0, 90, 0])\n                window(15, 10, wall_thickness);\n    }\n    \n    // Windows sides\n    for(y = [-15, -5, 5, 15]) {\n        translate([-35+wall_thickness/2, y, 15])\n            window(15, 10, wall_thickness);\n        translate([35-wall_thickness/2, y, 15])\n            window(15, 10, wall_thickness);\n    }\n    \n    // Front door\n    translate([0, -25+wall_thickness/2, 5])\n        rotate([0, 90, 0])\n            door(12, 20, wall_thickness);\n    \n    // Main roof\n    translate([-40, -30, 40])\n        roof(80, 60, 15);\n    \n    // Chimneys\n    chimney(20, 10);\n    chimney(-15, -5);\n}\n\nmodule left_wing() {\n    translate([-70, -20, 5]) {\n        // Wing walls\n        cube([30, 40, 25]);\n        \n        // Windows\n        for(y = [-10, 0, 10]) {\n            translate([-70+wall_thickness/2, y, 15])\n                window(12, 8, wall_thickness);\n            translate([-45-wall_thickness/2, y, 15])\n                window(12, 8, wall_thickness);\n        }\n        \n        // Wing roof\n        translate([-72, -22, 30])\n            roof(34, 44, 12);\n    }\n}\n\nmodule right_wing() {\n    translate([40, -20, 5]) {\n        // Wing walls\n        cube([30, 40, 25]);\n        \n        // Windows\n        for(y = [-10, 0, 10]) {\n            translate([40+wall_thickness/2, y, 15])\n                window(12, 8, wall_thickness);\n            translate([70-wall_thickness/2, y, 15])\n                window(12, 8, wall_thickness);\n        }\n        \n        // Wing roof\n        translate([38, -22, 30])\n            roof(34, 44, 12);\n    }\n}\n\nmodule columns() {\n    // Front columns\n    for(x = [-30, -15, 15, 30]) {\n        translate([x, -25, 5]) {\n            cylinder(h=30, r=2);\n            translate([0, 0, 30])\n                sphere(r=3);\n        }\n    }\n}\n\n// Assemble mansion\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        main_building();\n        left_wing();\n        right_wing();\n        columns();\n    }\n}",
    "renders": true
  },
  {
    "building": "cottage",
    "openscad_code": "// Realistic 3D-printable cottage – medium complexity\n// ~80 mm wide, printable without support\n\n$fn = 32;              // Smooth curves\nwall = 2;              // 3D-print-friendly shell thickness\n\nmodule sloped_roof(w, d, h) {          // h = peak height\n    linear_extrude(height = h, scale = [0, 0], center = false)\n        square([w, d]);\n}\n\nmodule chimney() {\n    translate([15, 0, 30]) {\n        difference() {\n            cube([8, 8, 16], center = true);          // main stack\n            translate([0, 0, 7]) cylinder(h = 10, d = 5);  // hollow\n        }\n    }\n}\n\nmodule window() {\n    difference() {\n        cube([10, wall, 8]);                // frame\n        translate([wall/2, 0, wall/2])\n            cube([10 - 2*wall, wall + 0.1, 8 - 2*wall]);\n    }\n}\n\nmodule door() {\n    difference() {\n        cube([12, wall, 20]);               // solid door\n        translate([wall/2, 0, wall])\n            cube([12 - 2*wall, wall + 0.1, 20 - 2*wall]);\n    }\n}\n\nmodule wall_with_openings() {\n    difference() {\n        cube([60, 40, 30], center = true);  // main walls\n        // front windows\n        translate([-20, 21, 5]) window();\n        translate([ 20, 21, 5]) window();\n        // front door\n        translate([0, 21, -5]) door();\n        // back window\n        translate([0, -21, 5]) rotate([0, 180, 0]) window();\n    }\n}\n\nmodule roof() {\n    difference() {\n        union() {\n            // main gabled roof\n            translate([0, 0, 30]) rotate([0, 90, 0])\n                sloped_roof(40, 65, 25);\n            translate([0, 0, 30]) mirror([0, 1, 0]) rotate([0, 90, 0])\n                sloped_roof(40, 65, 25);\n            // overhangs\n            translate([0, 0, 30]) rotate([0, 90, 0])\n                sloped_roof(45, 70, 27);\n            translate([0, 0, 30]) mirror([0, 1, 0]) rotate([0, 90, 0])\n                sloped_roof(45, 70, 27);\n        }\n        // cavity matching walls\n        translate([0, 0, 15]) cube([62, 42, 35], center = true);\n    }\n}\n\nmodule base() {\n    cube([70, 50, 2], center = true);\n}\n\n// Assembly\ndifference() {\n    union() {\n        base();\n        wall_with_openings();\n        roof();\n        chimney();\n    }\n    // hollow interior for printability & material saving\n    translate([0, 0, 1]) cube([56, 36, 28], center = true);\n}",
    "renders": true
  },
  {
    "building": "apartment",
    "openscad_code": "// Realistic Medium-Complexity Apartment Building\n// Overall size: 80 x 60 x 50 mm\n\n$fn = 32;\n\n// Main dimensions\nwall_thickness = 2;\nfloor_height = 10;\napartment_width = 40;\napartment_depth = 30;\napartment_height = 50;\n\nmodule apartment_building() {\n    // Base foundation\n    color(\"Gray\")\n    translate([0, 0, -2])\n    cube([apartment_width + 4, apartment_depth + 4, 2], center = true);\n\n    // Ground floor walls\n    difference() {\n        color(\"Beige\")\n        cube([apartment_width, apartment_depth, apartment_height], center = true);\n        \n        // Interior cavity\n        translate([0, 0, wall_thickness])\n        cube([apartment_width - 2*wall_thickness, apartment_depth - 2*wall_thickness, apartment_height - wall_thickness], center = true);\n    }\n    \n    // First floor slab\n    translate([0, 0, floor_height - wall_thickness/2])\n    color(\"Gray\")\n    cube([apartment_width, apartment_depth, wall_thickness], center = true);\n    \n    // Second floor slab\n    translate([0, 0, 2*floor_height - wall_thickness/2])\n    color(\"Gray\")\n    cube([apartment_width, apartment_depth, wall_thickness], center = true);\n    \n    // Roof\n    translate([0, 0, apartment_height/2 + 1])\n    color(\"Brown\")\n    cube([apartment_width + 2, apartment_depth + 2, 2], center = true);\n}\n\nmodule windows() {\n    // Window parameters\n    window_width = 8;\n    window_height = 10;\n    window_depth = 1;\n    \n    // Front windows - ground floor\n    for(x = [-15, 0, 15]) {\n        translate([x, apartment_depth/2 - wall_thickness/2, -10])\n        rotate([0, 90, 0])\n        color(\"LightBlue\")\n        cube([window_width, window_height, window_depth], center = true);\n    }\n    \n    // Front windows - first floor\n    for(x = [-15, 0, 15]) {\n        translate([x, apartment_depth/2 - wall_thickness/2, 0])\n        rotate([0, 90, 0])\n        color(\"LightBlue\")\n        cube([window_width, window_height, window_depth], center = true);\n    }\n    \n    // Side windows\n    for(z = [-10, 0]) {\n        translate([apartment_width/2 - wall_thickness/2, 0, z])\n        rotate([0, 0, 90])\n        color(\"LightBlue\")\n        cube([window_width, window_height, window_depth], center = true);\n    }\n}\n\nmodule door() {\n    // Front door\n    translate([0, apartment_depth/2 - wall_thickness/2, -20])\n    rotate([0, 90, 0])\n    color(\"Brown\")\n    cube([10, 18, wall_thickness], center = true);\n    \n    // Door knob\n    translate([2, apartment_depth/2 - wall_thickness, -20])\n    color(\"Gold\")\n    sphere(1);\n}\n\nmodule balcony() {\n    // First floor balcony\n    color(\"Gray\")\n    translate([0, apartment_depth/2 + 4, 0])\n    cube([20, 8, 1], center = true);\n    \n    // Balcony railing\n    color(\"White\")\n    for(x = [-8, -4, 0, 4, 8]) {\n        translate([x, apartment_depth/2 + 8, 0])\n        cube([1, 1, 8], center = true);\n    }\n    \n    // Balcony posts\n    for(x = [-8, 8]) {\n        translate([x, apartment_depth/2 + 8, 4])\n        cube([1, 1, 8], center = true);\n    }\n}\n\nmodule chimney() {\n    // Chimney on roof\n    color(\"Red\")\n    translate([15, 0, apartment_height/2 + 4])\n    cube([6, 6, 10], center = true);\n}\n\n// Assemble the apartment\nunion() {\n    apartment_building();\n    windows();\n    door();\n    balcony();\n    chimney();\n}",
    "renders": true
  },
  {
    "building": "condo",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Condo\n// Overall footprint ~60 mm × 40 mm, height ~55 mm\n\nwall_thick = 2;\nfloor_gap  = 3;\n\nmodule slab(x, y, z)      cube([x, y, z], center = true);\nmodule column(r, h)       cylinder(r = r, h = h, $fn = 16);\n\n// Main building body\nmodule main_body() {\n    difference() {\n        // full block\n        translate([0, 0, 27.5])\n            slab(50, 35, 55);\n        \n        // carve out interior\n        translate([0, 0, 27.5])\n            slab(50 - 2*wall_thick, 35 - 2*wall_thick, 55 - wall_thick);\n    }\n}\n\n// Balcony on front\nmodule balcony() {\n    translate([0, 18.5, 15]) {\n        // floor\n        cube([20, 7, wall_thick], center = true);\n        // railing\n        for (x = [-8:4:8])\n            translate([x, 3.5, 5])\n                cube([1.5, 1, 10], center = true);\n    }\n}\n\n// Windows (recessed)\nmodule windows() {\n    for (y = [-8, 8])\n        translate([0, y, 25]) {\n            translate([23, 0, 0]) cube([wall_thick, 8, 6]);\n            translate([-23, 0, 0]) cube([wall_thick, 8, 6]);\n        }\n}\n\n// Entry door\nmodule door() {\n    translate([0, -17.5, 15])\n        cube([8, wall_thick, 15], center = true);\n}\n\n// Simple roof\nmodule roof() {\n    translate([0, 0, 55])\n        cube([54, 39, wall_thick], center = true);\n}\n\n// 4 corner columns for style\nmodule columns() {\n    for (x = [-22, 22])\n        for (y = [-15, 15])\n            translate([x, y, 27.5])\n                column(2, 55);\n}\n\n// HVAC box on roof\nmodule hvac() {\n    translate([15, 10, 57.5])\n        cube([8, 6, 5], center = true);\n}\n\n// Assembly\nunion() {\n    main_body();\n    balcony();\n    windows();\n    door();\n    roof();\n    columns();\n    hvac();\n}",
    "renders": true
  },
  {
    "building": "townhouse",
    "openscad_code": "// Realistic Townhouse - Medium Complexity\n// Designed for 3D printing - approximately 70mm width\n\nwall_thickness = 2;\nwindow_depth = 1;\ndoor_depth = 1;\nroof_overhang = 3;\n\n// Main colors\ncolor_body = [0.85, 0.8, 0.75];\ncolor_roof = [0.5, 0.3, 0.2];\ncolor_windows = [0.2, 0.3, 0.5];\ncolor_door = [0.4, 0.2, 0.1];\n\nmodule townhouse() {\n    // Main building body\n    translate([0, 0, 0])\n    color(color_body)\n    cube([40, 30, 35], center=true);\n    \n    // Roof\n    translate([0, 0, 35/2 + 12])\n    color(color_roof)\n    rotate([0, 0, 0])\n    scale([1.15, 1.1, 1])\n    cube([40 + 6, 30 + 6, 24], center=true);\n    \n    // Chimney\n    translate([15, -10, 35/2 + 20])\n    color(color_roof)\n    cube([6, 6, 15], center=true);\n    \n    // Door\n    translate([0, -15 + door_depth/2, -35/2 + 12])\n    color(color_door)\n    cube([8, door_depth, 16], center=true);\n    \n    // Door handle\n    translate([3, -15 + door_depth + 0.5, -35/2 + 8])\n    color([0.5, 0.5, 0.5])\n    sphere(1);\n    \n    // Windows\n    for(pos = [[-12, 10], [12, 10], [-12, -5], [12, -5]]) {\n        translate([pos[0], pos[1] + window_depth/2, 5])\n        color(color_windows)\n        cube([6, window_depth, 8], center=true);\n    }\n    \n    // Window frames\n    for(pos = [[-12, 10], [12, 10], [-12, -5], [12, -5]]) {\n        translate([pos[0], pos[1] + window_depth/2, 5])\n        color([0.7, 0.7, 0.7])\n        difference() {\n            cube([8, window_depth + 0.5, 10], center=true);\n            cube([7, window_depth + 1, 9], center=true);\n        }\n    }\n    \n    // Base/foundation\n    translate([0, 0, -35/2 - 2])\n    color([0.6, 0.6, 0.6])\n    cube([42, 32, 4], center=true);\n    \n    // Steps\n    translate([0, -15 - 2, -35/2 - 1])\n    color([0.7, 0.7, 0.7])\n    union() {\n        cube([12, 2, 1], center=true);\n        translate([0, -1, -1])\n        cube([10, 2, 1], center=true);\n        translate([0, -2, -2])\n        cube([8, 2, 1], center=true);\n    }\n    \n    // Gutter details\n    translate([0, -15 - roof_overhang, 35/2 + 10])\n    color([0.4, 0.4, 0.4])\n    cube([40 + 6, 2, 1], center=true);\n    \n    translate([0, 15 + roof_overhang, 35/2 + 10])\n    color([0.4, 0.4, 0.4])\n    cube([40 + 6, 2, 1], center=true);\n}\n\n// Render the townhouse\ntownhouse();",
    "renders": true
  },
  {
    "building": "villa",
    "openscad_code": "// Villa 3D printable model - medium complexity, realistic style\n// Overall dimensions: 80mm x 60mm x 40mm\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main building\nmodule main_building() {\n    // Ground floor\n    difference() {\n        cube([60, 40, 20]);\n        translate([wall, wall, -1]) cube([60-wall*2, 40-wall*2, 22]);\n    }\n    \n    // First floor\n    translate([0, 0, 20]) {\n        difference() {\n            cube([50, 35, 15]);\n            translate([wall, wall, -1]) cube([50-wall*2, 35-wall*2, 17]);\n        }\n    }\n}\n\n// Roof tiles\nmodule roof() {\n    color(\"saddlebrown\") {\n        // Main roof\n        translate([-5, -5, 35]) rotate([0, 0, 0]) {\n            linear_extrude(height = 0.5) {\n                polygon(points=[[0,0], [65,0], [32.5, -20]]);\n            }\n        }\n        \n        // First floor roof\n        translate([5, 0, 20]) rotate([0, 0, 0]) {\n            linear_extrude(height = 0.5) {\n                polygon(points=[[0,0], [40,0], [20, -15]]);\n            }\n        }\n    }\n}\n\n// Windows\nmodule window(x, y, z, w, h) {\n    translate([x, y, z]) {\n        // Window frame\n        color(\"white\") cube([w+2, 0.5, h+2]);\n        \n        // Window pane\n        translate([1, -0.1, 1]) color(\"lightblue\") cube([w, 0.3, h]);\n    }\n}\n\n// Door\nmodule door() {\n    color(\"brown\") {\n        translate([25, -0.1, 0]) cube([10, 1, 18]);\n    }\n}\n\n// Chimney\nmodule chimney() {\n    color(\"darkred\") {\n        translate([45, 15, 35]) {\n            difference() {\n                cube([8, 8, 10]);\n                translate([1, 1, -1]) cube([6, 6, 12]);\n            }\n        }\n    }\n}\n\n// Columns for entrance\nmodule column(x) {\n    color(\"white\") {\n        translate([x, -1, 0]) {\n            difference() {\n                cylinder(h = 20, r = 2);\n                cylinder(h = 21, r = 1.5);\n            }\n        }\n    }\n}\n\n// Terrace\nmodule terrace() {\n    color(\"lightgray\") {\n        translate([5, 35, 10]) {\n            difference() {\n                cube([50, 5, 1]);\n                translate([wall, 0, -1]) cube([50-wall*2, 5, 3]);\n            }\n        }\n    }\n}\n\n// Generate villa\nmain_building();\n\n// Windows on ground floor\nfor(x = [5, 20, 35, 50]) {\n    window(x, -0.1, 8, 8, 10);\n}\n\n// Windows on first floor\nfor(x = [10, 30, 45]) {\n    window(x, -0.1, 28, 6, 8);\n}\n\n// Side windows\nwindow(-0.1, 20, 8, 10, 8);\nwindow(-0.1, 20, 28, 8, 6);\nwindow(60.1, 20, 8, 10, 8);\nwindow(60.1, 20, 28, 8, 6);\n\n// Door\ndoor();\n\n// Columns\ncolumn(22);\ncolumn(38);\n\n// Terrace\nterrace();\n\n// Chimney\nchimney();\n\n// Roof\nroof();",
    "renders": true
  },
  {
    "building": "cabin",
    "openscad_code": "// Realistic medium-complexity 3D-printable cabin\n// Designed for ~75 mm total length\n\n$fn=32;\n\n// Parameters\nwall=2;         // 3D-printable wall thickness\nfoundation=2;\nroof_angle=30;\nbase_w=50;\nbase_d=40;\nbase_h=35;\nroof_over=5;\nlog_d=3;\nwindow_s=8;\ndoor_w=8;\ndoor_h=15;\nchimney_w=6;\nchimney_d=6;\nchimney_h=22;\n\n// Main module\nmodule cabin() {\n    foundation_block();\n    translate([0,0,foundation]) {\n        walls();\n        roof();\n        chimney();\n    }\n}\n\n// Foundation block\nmodule foundation_block() {\n    color(\"SaddleBrown\")\n    cube([base_w+roof_over*2, base_d+roof_over*2, foundation], center=true);\n}\n\n// Log-style walls\nmodule walls() {\n    difference() {\n        // Front & back log layers\n        for(i=[0:1]) mirror([0,i*180,0]) {\n            for(y=[-base_d/2+log_d/2:log_d:base_d/2-log_d/2])\n                translate([0,y,base_h/2])\n                    rotate([90,0,0])\n                        cylinder(h=base_w, d=log_d, center=true);\n        }\n        \n        // Left & right log layers\n        for(i=[0:1]) mirror([i*180,0,0]) {\n            for(x=[-base_w/2+log_d/2:log_d:base_w/2-log_d/2])\n                translate([x,0,base_h/2])\n                    rotate([0,90,0])\n                        cylinder(h=base_d, d=log_d, center=true);\n        }\n        \n        // Door opening\n        translate([0,-base_d/2-wall/2,door_h/2])\n            cube([door_w+wall*2, wall*3, door_h+wall*2], center=true);\n        \n        // Window openings (two)\n        for(x=[-base_w/4,base_w/4])\n            translate([x,base_d/2-wall/2,base_h*2/3])\n                rotate([0,0,0])\n                    cube([window_s, wall*3, window_s], center=true);\n    }\n}\n\n// Pitched roof with shingles\nmodule roof() {\n    roof_w = base_w + roof_over*2;\n    roof_d = base_d + roof_over*2;\n    peak_h = roof_d/2 * tan(roof_angle);\n    \n    // Roof panels\n    for(side=[0,1]) mirror([0,side*180,0]) {\n        translate([0, -roof_d/2, base_h]) {\n            rotate([roof_angle,0,0])\n                translate([0,0,peak_h/2])\n                    cube([roof_w, roof_d, wall], center=true);\n        }\n    }\n    \n    // Ridge cap\n    translate([0,0,base_h+peak_h])\n        rotate([0,90,0])\n            cylinder(h=roof_d, d=wall*1.5, center=true);\n}\n\n// Brick chimney\nmodule chimney() {\n    translate([base_w/3, -base_d/4, base_h+3*wall]) {\n        // Main chimney\n        color(\"DarkRed\")\n        cube([chimney_w, chimney_d, chimney_h], center=true);\n        \n        // Chimney cap\n        translate([0,0,chimney_h/2+wall/2])\n            cube([chimney_w+2, chimney_d+2, wall], center=true);\n    }\n}\n\n// Render the cabin\ncabin();",
    "renders": true
  },
  {
    "building": "bungalow",
    "openscad_code": "// Realistic bungalow, medium complexity\n// Outside dimensions ~70 mm long × 45 mm wide × 35 mm high\n// Wall thickness 2 mm for 3D-print strength\n\nwall_t = 2;\nscale_factor = 0.7; // so 100 mm max dim → 70 mm footprint\n\nmodule bungalow() {\n    // ——— foundation slab ———\n    translate([0, 0, -1])\n        cube([70, 45, 2], center = true);\n\n    // ——— walls ———\n    difference() {\n        // outer shell\n        translate([0, 0, 10.5])\n            cube([70, 45, 21], center = true);\n\n        // hollow inside\n        translate([0, 0, 10.5])\n            cube([70 - 2*wall_t, 45 - 2*wall_t, 21], center = true);\n    }\n\n    // ——— pitched roof ———\n    difference() {\n        // main roof block\n        translate([0, 0, 32])\n            cube([74, 49, 6], center = true);\n\n        // slope front\n        translate([0, 22.5, 32])\n            rotate([0, 45, 0])\n                cube([74, 50, 6], center = true);\n\n        // slope back\n        translate([0, -22.5, 32])\n            rotate([0, -45, 0])\n                cube([74, 50, 6], center = true);\n    }\n\n    // ——— front door ———\n    translate([-35 + wall_t + 1, 0, 2])\n        cube([wall_t + 0.2, 12, 18]);\n\n    // ——— windows ———\n    for (x = [-20, 20]) {\n        translate([x, 22.5 - wall_t, 12])\n            cube([10, wall_t + 0.2, 10]);\n    }\n\n    // ——— chimney ———\n    translate([25, 0, 35])\n        cube([6, 6, 8], center = true);\n\n    // ——— porch roof pillars ———\n    pillar_pos = [[-20, 20], [20, 20], [-20, 10], [20, 10]];\n    for (p = pillar_pos) {\n        translate([p[0], 22.5 + 8, 10])\n            cylinder(h = 10, d = 3, $fn = 8);\n    }\n\n    // ——— porch roof ———\n    translate([0, 22.5 + 8, 15])\n        cube([50, 16, 1], center = true);\n}\n\n// scale to desired print size\nscale([scale_factor, scale_factor, scale_factor])\n    bungalow();",
    "renders": true
  },
  {
    "building": "duplex",
    "openscad_code": "// Duplex House - Realistic Style, Medium Complexity\n// Designed for 3D printing - 80mm wide\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main house module\nmodule duplex_unit(offset_x = 0) {\n    // Main structure\n    translate([offset_x, 0, 0]) {\n        // First floor\n        difference() {\n            cube([38, 35, 20]);\n            translate([wall, wall, wall]) \n                cube([38-2*wall, 35-2*wall, 20-wall]);\n        }\n        \n        // Second floor\n        translate([0, 0, 20]) {\n            difference() {\n                cube([38, 35, 18]);\n                translate([wall, wall, wall]) \n                    cube([38-2*wall, 35-2*wall, 18-wall]);\n            }\n        }\n        \n        // Roof\n        translate([-1, -1, 38]) {\n            difference() {\n                cube([40, 37, 3]);\n                translate([0, 0, 0]) \n                    cube([40, 37, 2]);\n            }\n        }\n        \n        // Front door\n        translate([offset_x == 0 ? 18 : 2, 0, 0]) {\n            difference() {\n                cube([wall, wall+0.5, 10]);\n                translate([0, -0.1, 2]) \n                    cube([wall+0.2, 0.7, 6]);\n            }\n            // Door knob\n            translate([wall/2, 0.5, 6]) \n                sphere(d=1);\n        }\n        \n        // Windows\n        for(x = [8, 28]) {\n            translate([x, 0, 12]) {\n                difference() {\n                    cube([6, wall+0.5, 6]);\n                    translate([0.5, -0.1, 0.5]) \n                        cube([5, 0.7, 5]);\n                }\n                // Window panes\n                translate([3, 0.3, 3]) \n                    cube([0.5, 0.2, 4]);\n                translate([1.5, 0.3, 3]) \n                    cube([0.5, 0.2, 4]);\n            }\n            \n            translate([x, 0, 30]) {\n                difference() {\n                    cube([6, wall+0.5, 6]);\n                    translate([0.5, -0.1, 0.5]) \n                        cube([5, 0.7, 5]);\n                }\n                translate([3, 0.3, 3]) \n                    cube([0.5, 0.2, 4]);\n                translate([1.5, 0.3, 3]) \n                    cube([0.5, 0.2, 4]);\n            }\n        }\n        \n        // Side windows\n        translate([0, 15, 12]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cube([6, wall+0.5, 6]);\n                    translate([0.5, -0.1, 0.5]) \n                        cube([5, 0.7, 5]);\n                }\n            }\n        }\n        \n        // Chimney\n        translate([32, 30, 38]) {\n            difference() {\n                cube([4, 4, 8]);\n                translate([wall, wall, 0]) \n                    cube([4-2*wall, 4-2*wall, 8]);\n            }\n        }\n    }\n}\n\n// Shared front porch\nmodule porch() {\n    // Porch floor\n    translate([-1, -5, 0]) {\n        difference() {\n            cube([80, 5, 1]);\n            translate([wall, wall, 0]) \n                cube([80-2*wall, 5-2*wall, 1]);\n        }\n    }\n    \n    // Porch roof\n    translate([-1, -6, 10]) {\n        difference() {\n            cube([80, 6, 1]);\n            translate([wall, wall, 0]) \n                cube([80-2*wall, 6-2*wall, 1]);\n        }\n    }\n    \n    // Porch posts\n    for(x = [5, 39, 73]) {\n        translate([x, -5.5, 1]) {\n            difference() {\n                cylinder(h=9, d=2);\n                translate([0, 0, 0]) \n                    cylinder(h=9, d=2-wall);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    duplex_unit(0);\n    duplex_unit(42);\n    porch();\n}",
    "renders": true
  },
  {
    "building": "loft",
    "openscad_code": "// Loft Apartment - Realistic Medium Complexity\n// Designed for 3D printing at ~80mm wide\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main building dimensions\nbuilding_w = 80;\nbuilding_d = 60;\nbuilding_h = 40;\n\n// Window parameters\nwindow_w = 12;\nwindow_h = 18;\nwindow_frame = 1.5;\n\n// Module for a single window with frame\nmodule window_frame(x, y, z) {\n    // Outer frame\n    translate([x, y, z])\n    difference() {\n        // Frame body\n        cube([window_w + 2*window_frame, window_frame, window_h + 2*window_frame], center=true);\n        // Cutout\n        cube([window_w, window_frame + 0.1, window_h], center=true);\n    }\n    \n    // Side frames\n    translate([x - window_w/2 - window_frame/2, y, z])\n    cube([window_frame, window_frame + 1, window_h + 2*window_frame], center=true);\n    \n    translate([x + window_w/2 + window_frame/2, y, z])\n    cube([window_frame, window_frame + 1, window_h + 2*window_frame], center=true);\n    \n    // Bottom frame\n    translate([x, y, z - window_h/2 - window_frame/2])\n    cube([window_w + 2*window_frame, window_frame + 1, window_frame], center=true);\n    \n    // Top frame\n    translate([x, y, z + window_h/2 + window_frame/2])\n    cube([window_w + 2*window_frame, window_frame + 1, window_frame], center=true);\n}\n\n// Module for industrial windows grid\nmodule windows() {\n    // Front wall windows (3x2 grid)\n    for (i = [-1, 0, 1]) {\n        for (j = [-1, 0]) {\n            translate([i * (window_w + 10), 0, j * (window_h + 8) + 10])\n            window_frame(0, building_d/2, 0);\n        }\n    }\n    \n    // Side wall windows\n    for (i = [-1, 0, 1]) {\n        translate([building_w/2, i * 15, 10])\n        rotate([0, 90, 0])\n        window_frame(0, 0, 0);\n    }\n}\n\n// Main building structure\ndifference() {\n    // Outer shell\n    cube([building_w, building_d, building_h], center=true);\n    \n    // Hollow interior\n    translate([0, 0, -wall/2])\n    cube([building_w - 2*wall, building_d - 2*wall, building_h], center=true);\n    \n    // Door opening\n    translate([0, building_d/2 - wall/2, -building_h/2 + 15])\n    cube([12, wall + 0.1, 25], center=true);\n}\n\n// Floor slab (loft style)\ntranslate([0, 0, 0])\ncube([building_w - 2*wall, building_d - 2*wall, wall], center=true);\n\n// Support beams\nmodule beam(x, y, z, len) {\n    translate([x, y, z])\n    rotate([90, 0, 0])\n    cylinder(h=len, r=1.5, $fn=8);\n}\n\n// Vertical beams\nfor (i = [-building_w/2 + 5, -building_w/2 + 25, building_w/2 - 25, building_w/2 - 5]) {\n    for (j = [-building_d/2 + 5, building_d/2 - 5]) {\n        beam(i, j, -building_h/2 + 1.5, building_h - 3);\n    }\n}\n\n// Horizontal beams\nfor (z = [-building_h/2 + 10, building_h/2 - 10]) {\n    for (i = [-building_w/2 + 5, building_w/2 - 5]) {\n        translate([i, 0, z])\n        rotate([0, 0, 90])\n        cylinder(h=building_d - 10, r=1.5, $fn=8);\n    }\n}\n\n// Rooftop AC unit\ntranslate([building_w/4, 0, building_h/2 + 3])\ncube([15, 10, 6], center=true);\n\n// Small chimney\ntranslate([-building_w/3, building_d/4, building_h/2])\ncylinder(h=8, r=3, $fn=16);\n\n// Add windows\nwindows();\n\n// Door\ntranslate([0, building_d/2 - wall/2, -building_h/2 + 15])\nrotate([90, 0, 0])\ncylinder(h=12, r=6, $fn=20);\ndifference() {\n    translate([0, building_d/2 - wall/2, -building_h/2 + 15])\n    cube([12, wall, 25], center=true);\n    translate([0, building_d/2 - wall/2, -building_h/2 + 15])\n    rotate([90, 0, 0])\n    cylinder(h=12.1, r=5.5, $fn=20);\n}",
    "renders": true
  },
  {
    "building": "flat",
    "openscad_code": "// Realistic medium-complexity flat\n// Overall size: ~80 mm wide (X), ~55 mm deep (Y), ~35 mm tall (Z)\n\n// Wall thickness for 3-D printing\nwall = 2.0;\n\n// Whole building\nunion() {\n\n    // Main block\n    difference() {\n        translate([0,0,0]) cube([60,40,30], center=true);\n        translate([0,0,-1]) cube([56,36,30], center=true);\n    }\n\n    // Parapet\n    translate([0,0,15+1.5]) cube([62,42,3], center=true);\n\n    // Front façade\n    translate([30+wall/2,0,0]) cube([wall,40,30], center=true);\n\n    // Door\n    difference() {\n        translate([30+wall/2,0,0]) cube([wall,40,30], center=true);\n        translate([30+wall/2,-5,-10]) cube([wall+0.1,10,20], center=true);\n    }\n\n    // Windows – three across, two rows\n    module window() {\n        difference() {\n            translate([30+wall/2,0,0]) cube([wall+0.1,8,10], center=true);\n            translate([30+wall/2,0,0]) cube([wall+0.2,6,8], center=true);\n        }\n    }\n\n    for (j=[0:1]) {\n        for (i=[-1:1]) {\n            translate([0, i*15, j*10+5]) window();\n        }\n    }\n\n    // Chimney\n    translate([-20,15,15+1.5+1.5]) cube([8,6,10], center=true);\n\n    // Balcony\n    difference() {\n        translate([30+wall/2,0,-12]) cube([wall+0.1,20,3], center=true);\n        translate([30+wall/2+1,0,-12]) cube([wall,16,2], center=true);\n    }\n\n    // Balcony railing\n    for (k=[-1:1]) {\n        translate([30+wall/2, k*9, -12+1.5+1]) cube([wall+0.1,0.5,3], center=true);\n    }\n\n    // Roof slope\n    translate([0,0,15+1.5+1.5+3]) rotate([0,90,0]) cylinder(h=62, r1=10, r2=0, $fn=2);\n\n}",
    "renders": true
  },
  {
    "building": "penthouse",
    "openscad_code": "// Penthouse Model - Realistic Style, Medium Complexity\n// Dimensions: 80mm x 60mm x 45mm\n\n$fn = 32;\nwall_thickness = 2;\nfloor_height = 3;\n\nmodule main_building() {\n    // Main penthouse structure\n    difference() {\n        cube([60, 50, 25]);\n        \n        // Cut out interior\n        translate([wall_thickness, wall_thickness, 0])\n            cube([60 - 2*wall_thickness, 50 - 2*wall_thickness, 25]);\n        \n        // Front door\n        translate([27, 0, 0])\n            cube([6, wall_thickness, 8]);\n    }\n}\n\nmodule penthouse_level() {\n    // Upper penthouse level\n    translate([5, 5, 25]) {\n        difference() {\n            cube([50, 40, 15]);\n            \n            // Interior cutout\n            translate([wall_thickness, wall_thickness, 0])\n                cube([50 - 2*wall_thickness, 40 - 2*wall_thickness, 15]);\n            \n            // Large windows front\n            for(x = [10, 25, 40]) {\n                translate([x, 0, 5])\n                    cube([8, wall_thickness, 8]);\n            }\n            \n            // Windows back\n            for(x = [10, 25, 40]) {\n                translate([x, 40 - wall_thickness, 5])\n                    cube([8, wall_thickness, 8]);\n            }\n        }\n    }\n}\n\nmodule roof_structure() {\n    // Sloped roof\n    translate([5, 5, 40]) {\n        difference() {\n            // Main roof\n            rotate([0, 45, 0])\n                cube([50*sqrt(2), 40, 15]);\n            \n            // Cut to make triangular prism\n            translate([0, -1, 0])\n                cube([100, 42, 15]);\n        }\n    }\n    \n    // Roof deck floor\n    translate([5, 5, 40])\n        cube([50, 40, floor_height]);\n}\n\nmodule windows() {\n    // Ground floor windows\n    color(\"lightblue\") {\n        // Front windows\n        for(x = [15, 40]) {\n            translate([x, 0, 10])\n                cube([8, wall_thickness, 8]);\n        }\n        \n        // Side windows\n        for(y = [15, 35]) {\n            translate([0, y, 10])\n                cube([wall_thickness, 8, 8]);\n        }\n    }\n    \n    // Penthouse windows\n    color(\"lightblue\") {\n        // Front penthouse windows\n        for(x = [15, 35]) {\n            translate([x, 5 + wall_thickness, 30])\n                cube([8, 1, 8]);\n        }\n    }\n}\n\nmodule balcony() {\n    // Front balcony\n    translate([10, -10, 25]) {\n        difference() {\n            // Balcony floor\n            cube([40, 10, floor_height]);\n            \n            // Railing holes\n            for(x = [2:4:38]) {\n                translate([x, 7, 0])\n                    cylinder(h=8, r=1.5);\n            }\n        }\n        \n        // Railing\n        color(\"white\")\n        for(x = [2:4:38]) {\n            translate([x, -10 + 7, 8])\n                cylinder(h=8, r=1);\n        }\n        \n        // Railing top\n        color(\"white\")\n        translate([2, -10 + 7, 15.5])\n            cube([36, 1, 1]);\n    }\n}\n\nmodule chimney() {\n    // Chimney on roof\n    translate([45, 35, 50]) {\n        difference() {\n            cube([6, 6, 8]);\n            translate([1, 1, -1])\n                cube([4, 4, 10]);\n        }\n    }\n}\n\nmodule rooftop_details() {\n    // Solar panels\n    color(\"darkblue\")\n    for(pos = [[10, 10], [30, 10], [10, 25], [30, 25]]) {\n        translate([pos[0], pos[1], 43])\n            cube([8, 8, 0.5]);\n    }\n    \n    // Satellite dish\n    color(\"gray\")\n    translate([40, 15, 43.5]) {\n        rotate([0, 45, 0])\n            cylinder(h=2, r1=3, r2=0);\n        cylinder(h=3, r=0.5);\n    }\n}\n\n// Main assembly\nunion() {\n    main_building();\n    penthouse_level();\n    roof_structure();\n    windows();\n    balcony();\n    chimney();\n    rooftop_details();\n}",
    "renders": true
  },
  {
    "building": "studio",
    "openscad_code": "// Studio apartment model - 3D printable\n// Overall dimensions: 60mm x 60mm x 50mm\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main room module\nmodule main_room() {\n    // Floor\n    translate([0, 0, 0])\n        cube([60, 60, 2], center = false);\n    \n    // Back wall\n    translate([0, 58, 0])\n        cube([60, wall_thickness, 50], center = false);\n    \n    // Left wall\n    translate([0, 0, 0])\n        cube([wall_thickness, 60, 50], center = false);\n    \n    // Right wall\n    translate([58, 0, 0])\n        cube([wall_thickness, 60, 50], center = false);\n}\n\n// Bed module\nmodule bed() {\n    // Bed frame\n    translate([5, 45, 2])\n        cube([25, 12, 5]);\n    \n    // Mattress\n    translate([6, 46, 7])\n        cube([23, 10, 3]);\n    \n    // Headboard\n    translate([5, 57, 2])\n        cube([25, 1, 10]);\n}\n\n// Desk module\nmodule desk() {\n    // Desktop\n    translate([35, 10, 25])\n        cube([20, 15, 1]);\n    \n    // Left leg\n    translate([36, 11, 2])\n        cube([1, 13, 23]);\n    \n    // Right leg\n    translate([53, 11, 2])\n        cube([1, 13, 23]);\n    \n    // Chair seat\n    translate([42, 26, 15])\n        cube([6, 6, 1]);\n    \n    // Chair back\n    translate([42, 31, 16])\n        cube([6, 1, 5]);\n    \n    // Chair legs\n    for (x = [42.5, 47.5])\n        for (y = [26.5, 30.5])\n            translate([x, y, 2])\n                cube([1, 1, 13]);\n}\n\n// Bookshelf module\nmodule bookshelf() {\n    // Main shelf\n    translate([5, 5, 2])\n        cube([10, 8, 30]);\n    \n    // Shelf dividers\n    for (z = [8, 15, 22])\n        translate([5, 5, z])\n            cube([10, 8, 0.5]);\n    \n    // Books\n    for (i = [0:3]) {\n        translate([6 + i*2, 5.5, 2.5])\n            cube([1.5, 7, 5]);\n    }\n}\n\n// Kitchenette module\nmodule kitchenette() {\n    // Counter\n    translate([45, 45, 25])\n        cube([12, 12, 1]);\n    \n    // Cabinet\n    translate([45, 45, 2])\n        cube([12, 12, 23]);\n    \n    // Sink\n    translate([48, 48, 26])\n        cube([6, 6, 1]);\n    \n    // Mini fridge\n    translate([47, 46, 2])\n        cube([8, 10, 20]);\n}\n\n// Window module\nmodule window() {\n    // Window frame\n    translate([35, 58, 20])\n        cube([20, 1, 15]);\n    \n    // Window panes\n    for (x = [38, 44, 50])\n        for (z = [23, 29, 35])\n            translate([x, 58.5, z])\n                cube([2, 0.5, 2]);\n}\n\n// Door module\nmodule door() {\n    // Door frame\n    translate([2, 0, 2])\n        cube([8, 1, 20]);\n    \n    // Door\n    translate([3, 0.5, 2])\n        cube([6, 0.5, 18]);\n}\n\n// Ceiling light\nmodule ceiling_light() {\n    translate([30, 30, 48])\n        sphere(r = 2);\n}\n\n// Assemble the studio\nunion() {\n    main_room();\n    bed();\n    desk();\n    bookshelf();\n    kitchenette();\n    window();\n    door();\n    ceiling_light();\n}",
    "renders": true
  },
  {
    "building": "hacienda",
    "openscad_code": "// Hacienda 3D Printable Model - Medium Complexity\n\n// Overall dimensions (mm)\nhacienda_width = 80;\nhacienda_depth = 60;\nhacienda_height = 35;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Base module for the hacienda\nmodule hacienda_base() {\n    difference() {\n        // Main rectangular base\n        cube([hacienda_width, hacienda_depth, 5]);\n        \n        // Interior hollow space\n        translate([wall_thickness, wall_thickness, 0])\n        cube([hacienda_width-2*wall_thickness, hacienda_depth-2*wall_thickness, 5]);\n    }\n}\n\n// Wall module - creates walls with window openings\nmodule wall(length, height, has_windows) {\n    difference() {\n        // Wall body\n        cube([length, wall_thickness, height]);\n        \n        // Windows if specified\n        if (has_windows) {\n            for (i = [1:2]) {\n                translate([i*length/3, -1, height*0.4])\n                rotate([0, 90, 0])\n                cylinder(h=wall_thickness+2, r=3, $fn=8);\n            }\n        }\n    }\n}\n\n// Roof tile module - curved terracotta tiles\nmodule roof_tile(width, length) {\n    color(\"saddlebrown\")\n    for (i = [0:2:length-10]) {\n        translate([i, 0, 0])\n        rotate([0, 0, 0])\n        difference() {\n            // Curved tile shape\n            translate([0, 0, 0])\n            scale([1, 0.3, 0.5])\n            sphere(r=5, $fn=20);\n            \n            // Hollow underside\n            translate([0, 0, -2])\n            scale([0.8, 0.25, 0.4])\n            sphere(r=5, $fn=20);\n        }\n    }\n}\n\n// Main building structure\nmodule main_building() {\n    difference() {\n        // Outer walls\n        union() {\n            // Front wall\n            translate([0, hacienda_depth-wall_thickness, 5])\n            wall(hacienda_width, hacienda_height-5, true);\n            \n            // Back wall\n            translate([0, 0, 5])\n            wall(hacienda_width, hacienda_height-5, false);\n            \n            // Left wall\n            translate([0, wall_thickness, 5])\n            rotate([0, 0, 90])\n            wall(hacienda_depth-2*wall_thickness, hacienda_height-5, true);\n            \n            // Right wall\n            translate([hacienda_width-wall_thickness, wall_thickness, 5])\n            rotate([0, 0, 90])\n            wall(hacienda_depth-2*wall_thickness, hacienda_height-5, true);\n        }\n        \n        // Door opening\n        translate([hacienda_width/2-4, hacienda_depth-wall_thickness-1, 5])\n        cube([8, wall_thickness+2, 12]);\n    }\n}\n\n// Arched porch\nmodule porch() {\n    color(\"tan\")\n    translate([hacienda_width/2-15, hacienda_depth-wall_thickness, 5])\n    difference() {\n        // Arch base\n        cube([30, wall_thickness, 15]);\n        \n        // Arch opening\n        translate([5, -1, 0])\n        rotate([0, 90, 0])\n        cylinder(h=wall_thickness+2, r=10, $fn=20);\n        translate([5, -1, 0])\n        cube([20, wall_thickness+2, 5]);\n    }\n}\n\n// Red clay tile roof\nmodule roof() {\n    color(\"darkred\")\n    // Main roof\n    translate([-5, -5, hacienda_height])\n    difference() {\n        // Roof body\n        cube([hacienda_width+10, hacienda_depth+10, 3]);\n        \n        // Sloped underside\n        translate([5, 5, -hacienda_height/2])\n        rotate([45, 0, 0])\n        cube([hacienda_width, hacienda_depth*2, hacienda_height]);\n    }\n    \n    // Overhang support\n    for (i = [5:10:hacienda_width-5]) {\n        translate([i, -5, hacienda_height-2])\n        cylinder(h=5, r=1, $fn=8);\n        translate([i, hacienda_depth+5, hacienda_height-2])\n        cylinder(h=5, r=1, $fn=8);\n    }\n}\n\n// Central courtyard\nmodule courtyard() {\n    color(\"sandybrown\")\n    translate([hacienda_width/2-10, hacienda_depth/2-10, 5])\n    difference() {\n        cube([20, 20, 0.5]);\n        translate([1, 1, -0.1])\n        cube([18, 18, 0.7]);\n    }\n}\n\n// Small chimney\nmodule chimney() {\n    color(\"saddlebrown\")\n    translate([hacienda_width*0.7, hacienda_depth*0.3, hacienda_height+3])\n    difference() {\n        cube([6, 6, 8]);\n        translate([1, 1, 0])\n        cube([4, 4, 8]);\n    }\n}\n\n// Assemble the complete hacienda\nunion() {\n    // Base foundation\n    hacienda_base();\n    \n    // Main building\n    main_building();\n    \n    // Porch\n    porch();\n    \n    // Roof\n    roof();\n    \n    // Courtyard\n    courtyard();\n    \n    // Chimney\n    chimney();\n}",
    "renders": true
  },
  {
    "building": "ranch",
    "openscad_code": "// Ranch house with garage, barn and silo\n// Overall footprint ~90 mm x 60 mm\n\n$fn=30;  // smooth circles\n\nmodule wall_block(w=10,h=5,d=10) {\n    // printable wall thickness 2 mm\n    difference() {\n        cube([w,h,d]);\n        translate([2,2,2]) cube([w-4,h-2,d-4]);\n    }\n}\n\nmodule roof_block(w=12,d=12,peak=4) {\n    // simple peaked roof, printable without support\n    union() {\n        for(x=[0:1:w-2])\n            translate([x+1,0,0]) cube([1,d,peak*(1-abs(x-(w/2-1)))/(w/2-1))]);\n    }\n}\n\nmodule door(w=4,h=7) {\n    // door with frame\n    translate([-w/2,0,0])\n    union() {\n        color(\"brown\") cube([w,1,h]);\n        translate([0.2,-0.1,0.2]) cube([w-0.4,1.2,h-0.4]);\n    }\n}\n\nmodule window_frame(w=3,h=3) {\n    // simple window\n    translate([-w/2,0,-h/2])\n    union() {\n        color(\"white\") cube([w,1,h]);\n        translate([0.2,-0.1,-h/2+0.2]) cube([w-0.4,1.2,h-0.4]);\n    }\n}\n\nmodule ranch_house() {\n    // main house 40x25x15 mm\n    translate([0,0,0]) {\n        // foundation\n        color(\"gray\") wall_block(40,2,25);\n        \n        // walls\n        translate([0,2,0]) color(\"beige\") union() {\n            wall_block(40,15,25);\n            \n            // front porch\n            translate([30,0,12]) wall_block(10,15,13);\n        }\n        \n        // roof\n        translate([-1,2,17]) color(\"brown\") union() {\n            roof_block(42,27,10);\n            translate([30,6.5,0]) roof_block(12,13,8);\n        }\n        \n        // doors\n        translate([20,26.5,2]) rotate([0,90,0]) door(6,8);\n        translate([35,12.5,2]) rotate([0,0,90]) door(4,7);\n        \n        // windows\n        for(x=[-15,-5,5,15])\n            translate([x,26.5,8]) rotate([0,90,0]) window_frame(4,4);\n    }\n}\n\nmodule garage() {\n    // garage 25x25x12 mm\n    translate([45,0,0]) {\n        // foundation\n        color(\"gray\") wall_block(25,2,25);\n        \n        // walls\n        translate([0,2,0]) color(\"beige\") wall_block(25,12,25);\n        \n        // roof\n        translate([-1,2,14]) color(\"brown\") roof_block(27,27,8);\n        \n        // garage door\n        translate([12.5,26.5,2]) rotate([0,90,0]) union() {\n            color(\"white\") cube([12,1,8]);\n            for(i=[0:3])\n                translate([1+i*2.5,-0.1,1]) color(\"gray\") cube([2,1.2,6]);\n        }\n    }\n}\n\nmodule barn() {\n    // barn 30x20x18 mm\n    translate([5,-35,0]) {\n        // foundation\n        color(\"gray\") wall_block(30,2,20);\n        \n        // walls\n        translate([0,2,0]) color(\"red\") union() {\n            wall_block(30,18,20);\n            \n            // hay loft door\n            translate([15,0,12]) rotate([0,90,0]) wall_block(8,8,2);\n        }\n        \n        // gambrel roof\n        translate([-2,2,20]) color(\"brown\") union() {\n            // lower slope\n            for(x=[0:1:33])\n                translate([x,0,0]) cube([1,20,min(4,4*(1-abs(x-16.5)/16.5))]);\n            // upper slope\n            for(x=[5:1:28])\n                translate([x,0,4]) cube([1,20,8*(1-abs(x-16.5)/11.5)]);\n        }\n        \n        // barn doors\n        translate([15,21,2]) rotate([0,0,90]) union() {\n            color(\"brown\") cube([10,1,12]);\n            translate([0.5,-0.1,0.5]) cube([4.5,1.2,11]);\n            translate([5.5,-0.1,0.5]) cube([4.5,1.2,11]);\n        }\n    }\n}\n\nmodule silo() {\n    // silo 10mm diameter, 25mm tall\n    translate([-15,-35,0]) {\n        // base\n        color(\"gray\") cylinder(h=2,r=6);\n        \n        // silo body\n        translate([0,0,2]) color(\"silver\") union() {\n            cylinder(h=23,r=5);\n            \n            // roof cap\n            translate([0,0,23]) cylinder(h=3,r=5.5);\n            translate([0,0,26]) sphere(r=5.5);\n        }\n        \n        // ladder\n        color(\"black\") for(z=[3:2:23])\n            translate([4.8,0,z]) cube([0.5,1,0.5]);\n    }\n}\n\n// Ground plane\ncolor(\"green\") translate([-10,-45,-0.1]) cube([110,75,0.2]);\n\n// Assemble ranch\nunion() {\n    ranch_house();\n    garage();\n    barn();\n    silo();\n}",
    "renders": true
  },
  {
    "building": "chalet",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Chalet\n// Footprint ~50 x 60 mm, height ~45 mm\n// Wall thickness 1.6 mm for FDM printing\n\n$fn = 32;\n\nmodule wall(width, depth, height) {\n    difference() {\n        cube([width, depth, height], center = true);\n        translate([0, 0, 1.6])\n            cube([width - 3.2, depth - 3.2, height - 1.6], center = true);\n    }\n}\n\nmodule roof_tile(x, y, z, angle) {\n    translate([x, y, z])\n        rotate([0, angle, 0])\n            cube([20, 2, 1], center = true);\n}\n\nmodule main_house() {\n    // ground floor walls\n    translate([0, 0, 15])\n        wall(40, 30, 30);\n\n    // first floor walls inset\n    translate([0, 0, 45])\n        wall(36, 26, 20);\n}\n\nmodule roof() {\n    // main roof body\n    translate([0, 0, 55])\n        rotate([0, 45, 0])\n            cube([60, 1.6, 60], center = true);\n\n    translate([0, 0, 55])\n        rotate([0, -45, 0])\n            cube([60, 1.6, 60], center = true);\n\n    // overhang\n    for (x = [-25:5:25])\n        for (y = [-10:2.5:10])\n            roof_tile(x, y, 70, 45);\n}\n\nmodule windows() {\n    for (pos = [[-15, 13.4, 30], [15, 13.4, 30], [-15, 13.4, 50], [15, 13.4, 50]]) {\n        translate(pos)\n            rotate([0, 0, 0])\n                difference() {\n                    cube([6, 1.6, 8]);\n                    translate([0, 0, 1.6])\n                        cube([4.8, 1.7, 6.8]);\n                }\n    }\n}\n\nmodule door() {\n    translate([0, 13.4, 15])\n        difference() {\n            cube([8, 1.6, 16]);\n            translate([0, 0, 1.6])\n                cube([6.8, 1.7, 14.8]);\n        }\n}\n\nmodule balcony() {\n    // balcony floor\n    translate([0, -15, 45])\n        cube([30, 4, 1.6]);\n\n    // rail posts\n    for (x = [-12:6:12])\n        translate([x, -17, 47])\n            cylinder(h = 6, r = 1);\n}\n\nmodule chimney() {\n    translate([10, 0, 65])\n        difference() {\n            cube([6, 6, 10]);\n            translate([1.6, 1.6, 0])\n                cube([2.8, 2.8, 10]);\n        }\n}\n\n// assemble\nunion() {\n    main_house();\n    roof();\n    windows();\n    door();\n    balcony();\n    chimney();\n}",
    "renders": true
  },
  {
    "building": "manor",
    "openscad_code": "// Manor House in realistic style, medium complexity\n// Dimensions are in mm and sized for 3D printing\n\nmanor_size = 80;\nwall_thickness = 2;\n\nmodule chimney() {\n    // Main chimney stack\n    translate([25, 15, 30])\n    union() {\n        cube([6, 6, 15]);\n        \n        // Chimney cap\n        translate([-1, -1, 15])\n        cube([8, 8, 2]);\n    }\n}\n\nmodule window() {\n    // Window frame\n    difference() {\n        cube([8, 1, 10]);\n        translate([1, -0.1, 2])\n        cube([6, 1.2, 6]);\n    }\n}\n\nmodule door() {\n    // Main door\n    difference() {\n        cube([10, 1, 16]);\n        translate([1, -0.1, 1])\n        cube([8, 1.2, 14]);\n    }\n}\n\nmodule roof() {\n    // Main roof\n    translate([-5, -5, 25])\n    rotate([0, 0, 0])\n    linear_extrude(height = 1)\n    polygon(points=[[0,0], [45,0], [22.5, -20]]);\n    \n    // Roof body\n    translate([-5, -5, 25])\n    rotate([90, 0, 0])\n    cylinder(h = 45, r1 = 25, r2 = 25);\n}\n\nmodule main_building() {\n    // Base floor\n    difference() {\n        cube([40, 30, 25]);\n        \n        // Interior hollow\n        translate([wall_thickness, wall_thickness, 0])\n        cube([40 - 2*wall_thickness, 30 - 2*wall_thickness, 25 - wall_thickness]);\n    }\n    \n    // Windows on front\n    for(x = [-10, 10]) {\n        translate([x + 20, 30, 10])\n        window();\n    }\n    \n    // Windows on sides\n    for(y = [-5, 5]) {\n        translate([0, y + 15, 10])\n        rotate([0, 90, 0])\n        window();\n        \n        translate([40, y + 15, 10])\n        rotate([0, 90, 0])\n        window();\n    }\n    \n    // Front door\n    translate([15, 30, 0])\n    door();\n    \n    // Roof\n    translate([20, 15, 25])\n    rotate([0, 0, 0])\n    scale([1.2, 1.2, 1])\n    roof();\n}\n\nmodule tower() {\n    // Tower base\n    difference() {\n        translate([-10, 10, 0])\n        cylinder(h = 35, r = 10);\n        \n        // Hollow interior\n        translate([-10, 10, 0])\n        cylinder(h = 35, r = 8);\n    }\n    \n    // Tower roof\n    translate([-10, 10, 35])\n    cylinder(h = 15, r1 = 12, r2 = 8);\n    \n    // Tower windows\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n        translate([-10, 20, 15])\n        rotate([0, 90, 0])\n        window();\n    }\n}\n\nmodule grounds() {\n    // Base platform\n    cube([60, 50, 2]);\n    \n    // Steps\n    translate([15, 30, 2])\n    cube([10, 5, 2]);\n}\n\n// Main assembly\nunion() {\n    // Grounds\n    translate([-5, -10, 0])\n    grounds();\n    \n    // Main building\n    translate([10, 5, 2])\n    main_building();\n    \n    // Tower\n    tower();\n    \n    // Chimney\n    chimney();\n}",
    "renders": true
  },
  {
    "building": "estate",
    "openscad_code": "// Estate House - Realistic Medium Complexity\n// Overall dimensions: 80x60x50mm\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule roof_tile(w, h, d) {\n    difference() {\n        cube([w, d, h]);\n        translate([0, -0.1, h-1]) cube([w+0.2, d+0.2, 2]);\n    }\n}\n\nmodule gable_roof(w, d, h) {\n    for(i = [0:3:d-3]) {\n        translate([0, i, 0]) roof_tile(w, h, 3);\n    }\n}\n\nmodule window_frame(w, h) {\n    difference() {\n        cube([w+4, wall_thickness, h+4]);\n        translate([2, -0.1, 2]) cube([w+0.2, wall_thickness+0.2, h+0.2]);\n    }\n}\n\nmodule window(w, h) {\n    union() {\n        color(\"white\") translate([-w/2, -wall_thickness/2, -h/2]) cube([w, wall_thickness, h]);\n        color(\"brown\") translate([-w/2-2, -wall_thickness/2-0.5, -h/2-2]) window_frame(w, h);\n    }\n}\n\nmodule door() {\n    union() {\n        color(\"brown\") translate([-6, -wall_thickness/2, 0]) cube([12, wall_thickness, 20]);\n        color(\"gold\") translate([3, -wall_thickness/2-0.5, 15]) sphere(d=1);\n    }\n}\n\nmodule chimney() {\n    union() {\n        color(\"darkgray\") translate([-8, 25, 30]) cube([10, 10, 15]);\n        color(\"red\") translate([-7, 26, 44]) cube([8, 8, 2]);\n    }\n}\n\nmodule house_body() {\n    color(\"beige\") {\n        difference() {\n            translate([0, 0, 15]) cube([50, 40, 30]);\n            // Front door\n            translate([0, 20.5, 0]) cube([14, wall_thickness+1, 20]);\n            // Front windows\n            translate([-15, 20.5, 10]) cube([10, wall_thickness+1, 12]);\n            translate([15, 20.5, 10]) cube([10, wall_thickness+1, 12]);\n            // Side windows\n            translate([25.5, 0, 10]) rotate([0, 0, 90]) cube([10, wall_thickness+1, 12]);\n            translate([25.5, 15, 10]) rotate([0, 0, 90]) cube([10, wall_thickness+1, 12]);\n            translate([-25.5, -10, 10]) rotate([0, 0, 90]) cube([10, wall_thickness+1, 12]);\n            translate([-25.5, 5, 10]) rotate([0, 0, 90]) cube([10, wall_thickness+1, 12]);\n        }\n    }\n}\n\nmodule garage() {\n    color(\"lightgray\") {\n        translate([35, -15, 0]) {\n            difference() {\n                cube([30, 25, 20]);\n                translate([2, 2, 2]) cube([26, 21, 16]);\n            }\n            // Garage door\n            translate([15, 25.5, 5]) cube([20, wall_thickness+1, 16]);\n        }\n    }\n}\n\nmodule roof() {\n    color(\"red\") {\n        // Main house roof\n        translate([0, 0, 45]) rotate([0, 0, 0]) gable_roof(54, 44, 10);\n        translate([0, 0, 45]) rotate([0, 0, 90]) scale([1, 0.7, 1]) gable_roof(54, 44, 10);\n        // Garage roof\n        translate([35, -15, 20]) rotate([0, 0, 0]) gable_roof(34, 29, 8);\n        translate([35, -15, 20]) rotate([0, 0, 90]) scale([1, 0.7, 1]) gable_roof(34, 29, 8);\n    }\n}\n\nmodule foundation() {\n    color(\"gray\") translate([0, 0, -2]) cube([80, 60, 2]);\n}\n\nmodule details() {\n    // Windows and doors\n    translate([0, 20, 10]) door();\n    translate([-15, 20, 16]) window(8, 10);\n    translate([15, 20, 16]) window(8, 10);\n    translate([25, 0, 16]) rotate([0, 0, 90]) window(8, 10);\n    translate([25, 15, 16]) rotate([0, 0, 90]) window(8, 10);\n    translate([-25, -10, 16]) rotate([0, 0, 90]) window(8, 10);\n    translate([-25, 5, 16]) rotate([0, 0, 90]) window(8, 10);\n    translate([35, 25, 12]) cube([20, wall_thickness, 12]);\n    \n    // Chimney\n    chimney();\n}\n\nmodule estate() {\n    foundation();\n    house_body();\n    garage();\n    roof();\n    details();\n}\n\n// Main assembly\nestate();",
    "renders": true
  },
  {
    "building": "palace",
    "openscad_code": "// Palace Model - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\n\n// Main dimensions\nbase_width = 60;\nbase_length = 80;\nbase_height = 4;\n\n// Wall parameters\nwall_thickness = 2;\nwall_height = 15;\ntower_height = 25;\n\n// Module for a tower with conical roof\nmodule tower(x_pos, z_pos) {\n    translate([x_pos, 0, z_pos]) {\n        // Cylindrical tower body\n        cylinder(h = tower_height, r = 8, $fn = 16);\n        \n        // Conical roof\n        translate([0, 0, tower_height])\n            cylinder(h = 12, r1 = 9, r2 = 0, $fn = 16);\n            \n        // Window details\n        for (w = [0:90:359]) {\n            rotate([0, 0, w])\n                translate([6.5, 0, tower_height/2])\n                    cube([1, 0.5, 2], center = true);\n        }\n    }\n}\n\n// Module for main building\nmodule main_building() {\n    // Base platform\n    cube([base_width, base_length, base_height], center = true);\n    \n    // Main walls\n    translate([0, 0, base_height/2 + wall_height/2])\n        cube([base_width - 6, base_length - 6, wall_height], center = true);\n    \n    // Entrance arch\n    translate([0, base_length/2 - wall_thickness, base_height + wall_height/2])\n        difference() {\n            cube([16, wall_thickness, wall_height], center = true);\n            translate([0, 0, -wall_height/4])\n                cube([8, wall_thickness + 1, wall_height/2], center = true);\n        }\n    \n    // Roof\n    translate([0, 0, base_height + wall_height])\n        cube([base_width - 4, base_length - 4, 2], center = true);\n}\n\n// Module for columns along front\nmodule front_columns() {\n    column_positions = [-20, -10, 0, 10, 20];\n    for (pos = column_positions) {\n        translate([pos, base_length/2 - 4, base_height])\n            cylinder(h = wall_height, r = 2, $fn = 16);\n    }\n}\n\n// Module for central dome\nmodule central_dome() {\n    translate([0, 0, base_height + wall_height + 2]) {\n        cylinder(h = 6, r = 12, $fn = 32);\n        translate([0, 0, 6])\n            sphere(r = 12);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main palace structure\n    main_building();\n    \n    // Four corner towers\n    tower(-base_width/2 + 8, -base_length/2 + 8);\n    tower(base_width/2 - 8, -base_length/2 + 8);\n    tower(-base_width/2 + 8, base_length/2 - 8);\n    tower(base_width/2 - 8, base_length/2 - 8);\n    \n    // Front columns\n    front_columns();\n    \n    // Central dome\n    central_dome();\n    \n    // Small decorative elements on roof\n    translate([0, 0, base_height + wall_height + 8])\n        cube([4, 4, 4], center = true);\n}",
    "renders": true
  },
  {
    "building": "homestead",
    "openscad_code": "// Homestead in realistic style - medium complexity\n// Designed for 3D printing with 1.2mm wall thickness\n\n// Main dimensions\nhouse_w = 25;\nhouse_d = 20;\nhouse_h = 15;\n\nroof_h = 10;\nroof_overhang = 2;\n\nbarn_w = 18;\nbarn_d = 12;\nbarn_h = 10;\n\nwall_thickness = 1.2;\nwindow_size = 3;\ndoor_w = 4;\ndoor_h = 7;\n\n// House module\nmodule house() {\n    // Main walls\n    difference() {\n        // Outer shell\n        cube([house_w, house_d, house_h], center=true);\n        \n        // Interior cavity\n        translate([0, 0, wall_thickness/2])\n        cube([house_w-wall_thickness*2, house_d-wall_thickness*2, house_h], center=true);\n    }\n    \n    // Roof\n    translate([0, 0, house_h/2+roof_h/2])\n    difference() {\n        // Main roof\n        cube([house_w+roof_overhang*2, house_d+roof_overhang*2, roof_h], center=true);\n        \n        // Bottom cut for slope\n        translate([0, 0, -roof_h/2])\n        rotate([0, 45, 0])\n        cube([house_d*2, house_d*2, roof_h*2], center=true);\n    }\n    \n    // Windows\n    for(x=[-house_w/4, house_w/4])\n    translate([x, house_d/2+0.1, 0])\n    rotate([0, 0, 0])\n    cube([window_size, wall_thickness+0.2, window_size], center=true);\n    \n    // Door\n    translate([0, house_d/2+0.1, -house_h/2+door_h/2])\n    cube([door_w, wall_thickness+0.2, door_h], center=true);\n}\n\n// Barn module\nmodule barn() {\n    translate([house_w/2+barn_w/2+5, 0, 0]) {\n        // Main barn structure\n        difference() {\n            cube([barn_w, barn_d, barn_h], center=true);\n            translate([0, 0, wall_thickness/2])\n            cube([barn_w-wall_thickness*2, barn_d-wall_thickness*2, barn_h], center=true);\n        }\n        \n        // Gambrel roof\n        for(side=[-1, 1])\n        translate([0, side*barn_d/2, barn_h/2+roof_h/2])\n        rotate([side*-30, 0, 0])\n        cube([barn_w+roof_overhang*2, roof_h*2, roof_h], center=true);\n        \n        // Barn doors\n        translate([-barn_w/4, barn_d/2+0.1, -barn_h/2+barn_h/2])\n        cube([barn_w/2-2, wall_thickness+0.2, barn_h-2], center=true);\n    }\n}\n\n// Chimney\nmodule chimney() {\n    translate([house_w/4, 0, house_h/2+roof_h-1])\n    difference() {\n        cube([3, 3, 6], center=true);\n        translate([0, 0, wall_thickness/2])\n        cube([3-wall_thickness, 3-wall_thickness, 6], center=true);\n    }\n}\n\n// Water well\nmodule well() {\n    translate([-house_w/2-8, house_d/3, -house_h/2+1])\n    difference() {\n        cylinder(h=3, r=4, center=true);\n        cylinder(h=3.2, r=2.5, center=true);\n    }\n    \n    // Roof over well\n    translate([-house_w/2-8, house_d/3, 3])\n    rotate([90, 0, 0])\n    cylinder(h=6, r1=5, r2=0, center=true);\n}\n\n// Fence posts\nmodule fence() {\n    for(x=[-house_w/2-5:3:house_w/2+barn_w+8])\n    translate([x, house_d/2+5, -house_h/2+1])\n    cylinder(h=3, r=0.5, center=true);\n    \n    for(x=[-house_w/2-5:3:house_w/2+barn_w+8])\n    translate([x, -house_d/2-5, -house_h/2+1])\n    cylinder(h=3, r=0.5, center=true);\n}\n\n// Assembly\nunion() {\n    house();\n    barn();\n    chimney();\n    well();\n    fence();\n}",
    "renders": true
  },
  {
    "building": "farmhouse",
    "openscad_code": "// Farmhouse - Realistic Style, Medium Complexity\n// Overall dimensions: 60mm x 45mm x 35mm\n\nwall_thickness = 1.5;\nroof_overhang = 5;\n\nmodule chimney() {\n    translate([15, 35, 25]) {\n        difference() {\n            cube([8, 8, 15]);\n            translate([1, 1, 0]) cube([6, 6, 15]);\n        }\n    }\n}\n\nmodule door() {\n    translate([25, 0, 0]) {\n        difference() {\n            cube([10, wall_thickness, 15]);\n            translate([1, -1, 1]) cube([8, wall_thickness+2, 13]);\n        }\n    }\n}\n\nmodule window(x, y, z) {\n    translate([x, y, z]) {\n        difference() {\n            cube([8, wall_thickness, 8]);\n            translate([1, -1, 1]) cube([6, wall_thickness+2, 6]);\n        }\n    }\n}\n\nmodule roof() {\n    translate([-roof_overhang, -roof_overhang, 20]) {\n        difference() {\n            union() {\n                // Main roof\n                rotate([0, 0, 45]) translate([0, 0, 0]) cube([60*sqrt(2), 45*sqrt(2), 2]);\n                \n                // Roof overhang sides\n                translate([30, 22.5, -2]) cube([60+2*roof_overhang, 2, 4]);\n                translate([30, -22.5, -2]) cube([60+2*roof_overhang, 2, 4]);\n            }\n            \n            // Cut out for chimney\n            translate([15, 35, -5]) cube([8, 8, 10]);\n        }\n    }\n}\n\nmodule porch() {\n    translate([25, -wall_thickness, 0]) {\n        cube([10, 8, 4]);\n    }\n}\n\nmodule farmhouse() {\n    // Main house body\n    difference() {\n        cube([50, 40, 20]);\n        \n        // Hollow out interior\n        translate([wall_thickness, wall_thickness, 0]) \n            cube([50-2*wall_thickness, 40-2*wall_thickness, 20]);\n    }\n    \n    // Add door\n    door();\n    \n    // Add windows on front\n    window(10, 0, 10);\n    window(40, 0, 10);\n    \n    // Add windows on sides\n    window(50, 15, 10);\n    window(50, 25, 10);\n    window(0, 15, 10);\n    window(0, 25, 10);\n    \n    // Add windows on back\n    window(10, 40, 10);\n    window(40, 40, 10);\n    \n    // Add porch\n    porch();\n    \n    // Add roof\n    roof();\n    \n    // Add chimney\n    chimney();\n}\n\nfarmhouse();",
    "renders": true
  },
  {
    "building": "grange",
    "openscad_code": "// Grange (farmhouse) - Realistic style, medium complexity\n// 3D printable, roughly 70mm wide\n\n// Basic dimensions\nwall_thickness = 2;\nroof_thickness = 2;\nmain_width = 60;\nmain_depth = 40;\nmain_height = 25;\nroof_height = 20;\n\n// Roof parameters\nroof_overhang = 5;\n\n// Helper module for walls\nmodule wall(w, d, h) {\n    cube([w, d, h]);\n}\n\n// Helper module for pitched roof\nmodule pitched_roof(w, d, h, over) {\n    difference() {\n        // Main roof block\n        translate([-over, -over, 0])\n            cube([w + 2*over, d + 2*over, h]);\n        \n        // Cut the top at angle\n        translate([-over - 1, -over - 1, h])\n            rotate([0, 45, 0])\n                cube([(w + 2*over + 2)*sqrt(2), d + 2*over + 2, h*sqrt(2)]);\n    }\n}\n\n// Main building\nmodule main_building() {\n    // Base\n    color(\"tan\")\n    wall(main_width, main_depth, main_height);\n    \n    // Roof\n    color(\"saddlebrown\")\n    translate([0, 0, main_height])\n        pitched_roof(main_width, main_depth, roof_height, roof_overhang);\n}\n\n// Door\nmodule door() {\n    color(\"chocolate\")\n    translate([main_width/2 - 8, -wall_thickness/2, 0])\n        cube([16, wall_thickness, 20]);\n    \n    // Door handle\n    color(\"gold\")\n    translate([main_width/2 + 6, 0, 10])\n        sphere(1.5, $fn=8);\n}\n\n// Windows\nmodule window(x, y, z) {\n    color(\"skyblue\")\n    translate([x, y, z])\n        difference() {\n            cube([12, wall_thickness, 12]);\n            translate([1, -1, 1])\n                cube([10, wall_thickness + 2, 10]);\n        }\n    \n    // Window frame\n    color(\"white\")\n    translate([x - 1, y - 1, z - 1])\n        cube([14, wall_thickness + 2, 14]);\n}\n\n// Chimney\nmodule chimney() {\n    color(\"dimgray\")\n    translate([main_width/2 - 15, main_depth/2 - 5, main_height + roof_height - 8])\n        cube([8, 8, 12]);\n}\n\n// Porch\nmodule porch() {\n    color(\"peru\")\n    translate([main_width/2 - 15, -main_depth/2 - 8, 0])\n        cube([30, 8, 5]);\n    \n    // Porch roof supports\n    color(\"saddlebrown\")\n    for(x = [-10, 10]) {\n        translate([main_width/2 + x, -main_depth/2 - 8, 5])\n            cylinder(h=8, r=1, $fn=8);\n    }\n    \n    // Porch roof\n    color(\"saddlebrown\")\n    translate([main_width/2 - 15, -main_depth/2 - 8, 13])\n        cube([30, 10, 2]);\n}\n\n// Render the complete grange\nunion() {\n    main_building();\n    door();\n    \n    // Front windows\n    window(10, -wall_thickness/2, 10);\n    window(main_width - 22, -wall_thickness/2, 10);\n    \n    // Side windows\n    window(-wall_thickness/2, main_depth/2 - 10, 12);\n    window(main_width + wall_thickness/2, main_depth/2 - 10, 12);\n    \n    chimney();\n    porch();\n}",
    "renders": true
  },
  {
    "building": "hall",
    "openscad_code": "// Realistic medium-complexity hall\n// 3D-printable, 70 mm long, 40 mm wide, 30 mm high\n\n// General dimensions\nhall_length = 70;\nhall_width = 40;\nwall_thickness = 2;\nfloor_height = 1;\nroof_height = 10;\ntotal_height = 30;\n\n// Pillars\npillar_radius = 2.5;\npillar_spacing = 15;\npillar_height = 24;\n\nmodule pillar() {\n    difference() {\n        cylinder(h = pillar_height, r = pillar_radius, $fn = 16);\n        // hollow core for filament saving\n        translate([0, 0, wall_thickness])\n            cylinder(h = pillar_height - 2 * wall_thickness, r = pillar_radius - wall_thickness, $fn = 16);\n    }\n}\n\nmodule pillars_line(count) {\n    for (i = [0 : count - 1]) {\n        translate([i * pillar_spacing, 0, 0])\n            pillar();\n    }\n}\n\n// Floor slab\nmodule floor() {\n    cube([hall_length + 2 * wall_thickness, hall_width + 2 * wall_thickness, floor_height], center = true);\n}\n\n// Walls with openings\nmodule walls() {\n    // long front wall with entrance\n    difference() {\n        translate([-hall_length/2, -hall_width/2 - wall_thickness/2, floor_height/2])\n            cube([hall_length, wall_thickness, total_height - floor_height]);\n        // central doorway\n        translate([0, -hall_width/2 - wall_thickness, 0])\n            cube([12, wall_thickness + 0.1, 18]);\n    }\n    // long back wall\n    translate([-hall_length/2, hall_width/2 - wall_thickness/2, floor_height/2])\n        cube([hall_length, wall_thickness, total_height - floor_height]);\n    // left side wall\n    translate([-hall_length/2 - wall_thickness/2, 0, floor_height/2])\n        cube([wall_thickness, hall_width, total_height - floor_height]);\n    // right side wall\n    translate([hall_length/2 - wall_thickness/2, 0, floor_height/2])\n        cube([wall_thickness, hall_width, total_height - floor_height]);\n}\n\n// Roof beams\nmodule beams() {\n    for (x = [-hall_length/2 + 5 : 10 : hall_length/2 - 5]) {\n        translate([x, 0, total_height - roof_height/2])\n            cube([1, hall_width + 2 * wall_thickness, roof_height], center = true);\n    }\n}\n\n// Roof tiles\nmodule roof() {\n    difference() {\n        translate([0, 0, total_height + roof_height/2])\n            cube([hall_length + 4 * wall_thickness, hall_width + 4 * wall_thickness, roof_height], center = true);\n        // slope top\n        translate([0, 0, total_height + roof_height + 1])\n            cube([hall_length + 4 * wall_thickness + 2, hall_width + 4 * wall_thickness + 2, roof_height + 2], center = true);\n    }\n}\n\n// Steps\nmodule steps() {\n    for (i = [0 : 2]) {\n        translate([0, -hall_width/2 - 2 - i * 3, i * 2])\n            cube([16 + i * 4, 3, 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    floor();\n    walls();\n    translate([0, 0, floor_height])\n        pillars_line(5);\n    beams();\n    roof();\n    steps();\n}",
    "renders": true
  },
  {
    "building": "keep",
    "openscad_code": "// Realistic style keep with medium complexity\n// Designed for 3D printing - no overhangs, 2mm wall thickness\n\n$fn = 32;\n\n// Main parameters\nkeep_width = 40;\nkeep_depth = 40;\nkeep_height = 60;\nwall_thickness = 2;\nmerlon_width = 3;\nmerlon_gap = 2;\n\n// Base foundation\nmodule base_foundation() {\n    cube([keep_width + 10, keep_depth + 10, 5], center = true);\n}\n\n// Main keep body\nmodule keep_body() {\n    difference() {\n        // Outer walls\n        cube([keep_width, keep_depth, keep_height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, 2.5])\n            cube([keep_width - wall_thickness*2, keep_depth - wall_thickness*2, keep_height - 5], center = true);\n    }\n}\n\n// Battlements\nmodule battlements() {\n    // Calculate number of merlons\n    num_merlons_x = floor(keep_width / (merlon_width + merlon_gap));\n    num_merlons_y = floor(keep_depth / (merlon_width + merlon_gap));\n    \n    // Top edge battlements\n    for(i = [0:num_merlons_x-1]) {\n        x_pos = -keep_width/2 + i*(merlon_width + merlon_gap) + merlon_width/2;\n        translate([x_pos, -keep_depth/2 - wall_thickness/2, keep_height/2 + 2.5]) {\n            cube([merlon_width, wall_thickness, 5], center = true);\n        }\n        translate([x_pos, keep_depth/2 + wall_thickness/2, keep_height/2 + 2.5]) {\n            cube([merlon_width, wall_thickness, 5], center = true);\n        }\n    }\n    \n    for(i = [0:num_merlons_y-1]) {\n        y_pos = -keep_depth/2 + i*(merlon_width + merlon_gap) + merlon_width/2;\n        translate([-keep_width/2 - wall_thickness/2, y_pos, keep_height/2 + 2.5]) {\n            cube([wall_thickness, merlon_width, 5], center = true);\n        }\n        translate([keep_width/2 + wall_thickness/2, y_pos, keep_height/2 + 2.5]) {\n            cube([wall_thickness, merlon_width, 5], center = true);\n        }\n    }\n}\n\n// Corner towers\nmodule corner_towers() {\n    tower_radius = 6;\n    tower_height = 70;\n    \n    positions = [\n        [-keep_width/2, -keep_depth/2],\n        [keep_width/2, -keep_depth/2],\n        [-keep_width/2, keep_depth/2],\n        [keep_width/2, keep_depth/2]\n    ];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], 0]) {\n            difference() {\n                cylinder(h = tower_height, r = tower_radius, center = true);\n                translate([0, 0, -2.5])\n                    cylinder(h = tower_height + 5, r = tower_radius - wall_thickness, center = true);\n            }\n            \n            // Tower roof\n            translate([0, 0, tower_height/2 + 2.5])\n                cylinder(h = 5, r1 = tower_radius, r2 = tower_radius - 2, center = true);\n        }\n    }\n}\n\n// Main gate\nmodule main_gate() {\n    gate_width = 8;\n    gate_height = 12;\n    \n    translate([0, -keep_depth/2 + wall_thickness/2, -keep_height/2 + gate_height/2]) {\n        difference() {\n            cube([gate_width + wall_thickness*2, wall_thickness + 1, gate_height + wall_thickness*2], center = true);\n            cube([gate_width, wall_thickness + 2, gate_height], center = true);\n        }\n    }\n    \n    // Gate arch\n    translate([0, -keep_depth/2 + wall_thickness/2, -keep_height/2 + gate_height])\n        rotate([90, 0, 0])\n            cylinder(h = gate_width, r = gate_height/2, center = true);\n}\n\n// Arrow slits\nmodule arrow_slits() {\n    slit_width = 1;\n    slit_height = 8;\n    num_slits = 4;\n    \n    for(i = [0:num_slits-1]) {\n        y_pos = -keep_depth/2 + (i + 1) * keep_depth/(num_slits + 1);\n        \n        // Front wall slits\n        translate([0, y_pos, 0]) {\n            translate([keep_width/2 - wall_thickness/2, 0, -keep_height/2 + slit_height/2 + 10])\n                cube([wall_thickness + 1, slit_width, slit_height], center = true);\n            translate([-keep_width/2 + wall_thickness/2, 0, -keep_height/2 + slit_height/2 + 10])\n                cube([wall_thickness + 1, slit_width, slit_height], center = true);\n        }\n        \n        // Side wall slits\n        translate([0, keep_depth/2 - wall_thickness/2, -keep_height/2 + slit_height/2 + 10])\n            cube([slit_width, wall_thickness + 1, slit_height], center = true);\n        translate([0, -keep_depth/2 + wall_thickness/2, -keep_height/2 + slit_height/2 + 10])\n            cube([slit_width, wall_thickness + 1, slit_height], center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 2.5])\n    base_foundation();\n\ntranslate([0, 0, 5 + keep_height/2])\n    keep_body();\n\ntranslate([0, 0, 0])\n    battlements();\n\ncorner_towers();\n\nmain_gate();\n\narrow_slits();",
    "renders": true
  },
  {
    "building": "tower",
    "openscad_code": "// Realistic-style medieval tower, medium complexity, 3D-printable\n\n// Overall dimensions\ntower_d = 32;\ntower_h = 85;\nwall_t = 2.5;\n\n// Main cylindrical body\nmodule tower_body() {\n    difference() {\n        cylinder(h=tower_h, d=tower_d, $fn=64);\n        // Hollow inside\n        translate([0, 0, wall_t])\n            cylinder(h=tower_h-wall_t, d=tower_d-2*wall_t, $fn=64);\n    }\n}\n\n// Stone texture rings (simple grooves for printability)\nmodule stone_bands() {\n    for (i=[0:4]) {\n        translate([0, 0, 5+i*15])\n            difference() {\n                cylinder(h=1.5, d=tower_d+0.2, $fn=64);\n                cylinder(h=2, d=tower_d-2*wall_t-0.2, $fn=64);\n            }\n    }\n}\n\n// Crenellations on top\nmodule crenellations() {\n    n = 12;\n    for (i=[0:n-1]) {\n        rotate([0, 0, i*360/n])\n            translate([tower_d/2-wall_t/2, 0, tower_h-wall_t])\n                cube([wall_t, tower_d/4, wall_t*2], center=true);\n    }\n}\n\n// Wooden door at base\nmodule door() {\n    difference() {\n        // Door frame\n        translate([0, -tower_d/2, wall_t])\n            cube([10, wall_t+0.2, 16], center=true);\n\n        // Door recess\n        translate([0, -tower_d/2+wall_t/2, wall_t+2])\n            cube([7, wall_t, 12], center=true);\n    }\n}\n\n// Arrow slit windows\nmodule arrow_slits() {\n    for (h=[25, 45, 65]) {\n        rotate([0, 0, 0])\n            translate([0, -tower_d/2+wall_t/2, h])\n                cube([2, wall_t+0.2, 12], center=true);\n        rotate([0, 0, 120])\n            translate([0, -tower_d/2+wall_t/2, h])\n                cube([2, wall_t+0.2, 12], center=true);\n        rotate([0, 0, 240])\n            translate([0, -tower_d/2+wall_t/2, h])\n                cube([2, wall_t+0.2, 12], center=true);\n    }\n}\n\n// Conical roof\nmodule roof() {\n    difference() {\n        cylinder(h=18, d1=tower_d, d2=tower_d*0.6, $fn=64);\n        translate([0, 0, -1])\n            cylinder(h=20, d1=tower_d-2*wall_t, d2=tower_d*0.6-2*wall_t, $fn=64);\n    }\n}\n\n// Small flag on top\nmodule flag() {\n    translate([0, 0, tower_h+18])\n        rotate([0, 90, 0])\n            linear_extrude(height=0.8, center=true)\n                polygon([[0,0], [0,10], [8,8], [8,2]]);\n}\n\n// Assemble tower\nunion() {\n    tower_body();\n    stone_bands();\n    crenellations();\n    door();\n    arrow_slits();\n    roof();\n    flag();\n}",
    "renders": true
  },
  {
    "building": "keephouse",
    "openscad_code": "// Realistic Keephouse\n// Wall thickness = 2mm for 3D printing\n\n$fs = 1;\n$fa = 2;\n\nmodule wall(x,y,h) {\n    // Basic wall block with thickness\n    difference() {\n        cube([x,y,h], center=true);\n        translate([0,0,1])\n            cube([x-4,y-4,h-2], center=true);\n    }\n}\n\nmodule crenellation(x,y,h) {\n    // Battlements along top\n    for(i=[-x/2+5:10:x/2-5]) {\n        translate([i, 0, h/2])\n            cube([8, y, h], center=true);\n    }\n}\n\nmodule tower(r,h) {\n    // Cylindrical tower with conical roof\n    difference() {\n        cylinder(h=h, r=r, center=false);\n        translate([0,0,2])\n            cylinder(h=h, r=r-2, center=false);\n    }\n    \n    // Conical roof\n    translate([0,0,h])\n        cylinder(h=r*1.2, r1=r+1, r2=0, center=false);\n}\n\nmodule doorway(w,h,d) {\n    // Arched doorway\n    difference() {\n        cube([w,d,h], center=true);\n        translate([0,d/2+1,0])\n            rotate([90,0,0])\n                cylinder(h=w+2, r=w/2, center=true);\n    }\n}\n\nmodule window() {\n    // Narrow slit window\n    cube([3,15,25], center=true);\n}\n\n// Base platform\ntranslate([0,0,5])\n    cube([70,70,10], center=true);\n\n// Main keep body\ntranslate([0,0,20])\n    wall(60,60,40);\n\n// Crenellations on main keep\ntranslate([0,0,42])\n    union() {\n        crenellation(60,4,8);\n        rotate([0,0,90])\n            crenellation(60,4,8);\n    }\n\n// Corner towers\ntower(12,50);\ntranslate([25,25,0]) tower(12,50);\ntranslate([-25,25,0]) tower(12,50);\ntranslate([25,-25,0]) tower(12,50);\ntranslate([-25,-25,0]) tower(12,50);\n\n// Doorway on front\ntranslate([0,-30,20])\n    doorway(12,25,4);\n\n// Windows on each side\nfor(side=[0,90,180,270]) {\n    rotate([0,0,side])\n        for(pos=[-20:20:20]) {\n            translate([pos, -30, 35])\n                window();\n        }\n}\n\n// Interior floor\ntranslate([0,0,35])\n    cube([56,56,2], center=true);\n\n// Flag on top\ntranslate([0,0,52])\n    union() {\n        cylinder(h=15, r=1, center=false);\n        translate([0,0,15])\n            rotate([0,90,0])\n                cube([20,12,1], center=true);\n    }",
    "renders": true
  },
  {
    "building": "cottagecore",
    "openscad_code": "// Cottagecore cottage – medium detail, printable, 50 mm wide\n$fa = 2; $fs = 1;\n\n// overall scale\nscale_factor = 0.5;\n\n// base\nmodule base() {\n    difference() {\n        cube([100, 70, 5], center = true);\n        translate([0, 0, -1]) cube([102, 72, 7], center = true);\n    }\n}\n\n// walls\nmodule walls() {\n    difference() {\n        cube([90, 60, 60], center = true);\n        // door\n        translate([-20, 30, 0]) cube([20, 2, 40], center = true);\n        // windows\n        for (x = [-25, 25])\n            translate([x, 30, 15]) cube([12, 2, 12], center = true);\n    }\n}\n\n// roof\nmodule roof() {\n    color(\"brown\")\n    translate([0, 0, 62])\n    rotate([0, 0, 0])\n    linear_extrude(height = 2)\n    polygon(points = [[-55, -35], [55, -35], [0, 35]]);\n    // ridge beam\n    translate([0, 0, 85])\n    rotate([90, 0, 0])\n    cylinder(h = 110, d = 3, center = true);\n}\n\n// chimney\nmodule chimney() {\n    translate([30, -20, 75])\n    cube([10, 10, 25], center = true);\n}\n\n// flowers under windows\nmodule flowers() {\n    for (x = [-25, 25]) {\n        translate([x, 38, 2])\n        for (i = [0:2])\n            translate([i*3 - 3, 0, 0])\n            cylinder(h = 3, d = 2, center = true);\n    }\n}\n\n// assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        base();\n        walls();\n        roof();\n        chimney();\n        flowers();\n    }\n}",
    "renders": true
  },
  {
    "building": "casita",
    "openscad_code": "// Casita - 3D printable miniature house\n// Overall dimensions: 65 x 60 x 55 mm\n\nmodule casita() {\n    // Main building box\n    difference() {\n        translate([0, 0, 15])\n            cube([50, 45, 30], center=true);\n        \n        // Door opening\n        translate([0, 22, 10])\n            cube([12, 2, 20], center=true);\n        \n        // Two windows\n        translate([-15, 22, 15])\n            cube([8, 2, 8], center=true);\n            \n        translate([15, 22, 15])\n            cube([8, 2, 8], center=true);\n    }\n    \n    // Roof with slight overhang\n    difference() {\n        translate([0, 0, 32.5])\n            rotate([90, 0, 0])\n                cylinder(h=40, r1=35, r2=35, center=true);\n        \n        translate([0, 0, 32.5])\n            rotate([90, 0, 0])\n                cylinder(h=40, r1=25, r2=25, center=true);\n    }\n    \n    // Chimney\n    translate([-15, -15, 40])\n        cube([8, 8, 15], center=true);\n    \n    // Door frame\n    translate([0, 21, 10])\n        cube([14, 1, 22], center=true);\n    \n    // Window frames\n    for(x = [-15, 15]) {\n        translate([x, 21, 15])\n            cube([10, 1, 10], center=true);\n    }\n    \n    // Window panes (cross detail)\n    for(x = [-15, 15]) {\n        translate([x, 21.5, 15])\n            cube([0.5, 0.5, 8], center=true);\n        translate([x, 21.5, 15])\n            cube([8, 0.5, 0.5], center=true);\n    }\n    \n    // Small porch roof\n    translate([0, 28, 25])\n        rotate([0, 0, 0])\n            cube([30, 2, 10], center=true);\n    \n    // Two porch posts\n    for(x = [-10, 10]) {\n        translate([x, 30, 20])\n            cylinder(h=10, r=1.5, center=true);\n    }\n    \n    // Foundation base\n    translate([0, 0, 7.5])\n        cube([54, 49, 5], center=true);\n}\n\n// Render the model\ncasita();",
    "renders": true
  },
  {
    "building": "barrack",
    "openscad_code": "// Realistic medium-complexity 3D-printable barrack\n// Scale: 1:100, max length ~80 mm\n// Wall thickness 1.2 mm for FDM printing\n\n$fs = 0.5;\n$fa = 2;\n\nmodule barrack() {\n    // Main building footprint 60 x 28 mm\n    module main_walls() {\n        difference() {\n            // Outer shell (1.2 mm walls)\n            cube([60, 28, 22], center = true);\n            // Hollow interior\n            translate([0, 0, 1.2])\n                cube([60 - 2.4, 28 - 2.4, 22 - 1.2], center = true);\n        }\n    }\n\n    // Roof: simple gabled, 30° pitch\n    module roof() {\n        // Ridge along length\n        translate([0, 0, 22/2 + 6])\n            rotate([90, 0, 0])\n                linear_extrude(height = 60, center = true, convexity = 2)\n                    polygon([\n                        [-14, -6], [14, -6], [0, 6]\n                    ]);\n    }\n\n    // Door centered on front\n    module door() {\n        translate([0, 28/2 + 0.1, -22/2 + 10/2])\n            cube([8, 1.2, 10], center = true);\n    }\n\n    // Windows: 4 per side, 2 per short side\n    module windows() {\n        for (x = [-20, -7, 7, 20])\n            translate([x, 28/2 - 0.1, 0])\n                cube([4, 1.2, 6], center = true);\n        for (y = [-8, 8])\n            translate([60/2 - 0.1, y, 0])\n                cube([1.2, 4, 6], center = true);\n    }\n\n    // Chimney at back-right corner\n    module chimney() {\n        translate([20, -10, 22/2 + 2])\n            cube([5, 5, 15], center = true);\n    }\n\n    // Simple foundation lip\n    module foundation() {\n        translate([0, 0, -22/2 - 1])\n            cube([62, 30, 2], center = true);\n    }\n\n    // Assembly\n    union() {\n        foundation();\n        main_walls();\n        roof();\n        chimney();\n        difference() {\n            children();\n            door();\n            windows();\n        }\n    }\n}\n\n// Render\nbarrack();",
    "renders": true
  },
  {
    "building": "lofthouse",
    "openscad_code": "// Loft House - Realistic Style, Medium Complexity\n// Dimensions are in mm, sized for 3D printing\n\nwall_thickness = 2;\nwindow_depth = 3;\ndoor_depth = 3;\n\n// Main building block\nmodule main_building() {\n    // Base structure\n    difference() {\n        cube([60, 40, 35]);\n        \n        // Doorway\n        translate([25, 0, 0])\n            cube([10, wall_thickness + 1, 20]);\n            \n        // Windows\n        for (x = [15, 45])\n            translate([x, 0, 25])\n                cube([10, window_depth + 1, 10]);\n                \n        for (x = [15, 45])\n            translate([x, 40 - window_depth, 25])\n                cube([10, window_depth + 1, 10]);\n    }\n}\n\n// Gabled roof\nmodule roof() {\n    // Main roof\n    translate([-5, -5, 35])\n    rotate([0, 0, 0])\n    union() {\n        // Left slope\n        translate([0, 0, 0])\n            rotate([0, -30, 0])\n            cube([70, 50, 2]);\n            \n        // Right slope\n        translate([70, 0, 0])\n            rotate([0, 30, 0])\n            cube([70, 50, 2]);\n    }\n}\n\n// Windows with frames\nmodule window(x, y, z) {\n    translate([x, y, z])\n    difference() {\n        // Window frame\n        cube([10, window_depth, 10]);\n        \n        // Window opening\n        translate([wall_thickness, wall_thickness/2, wall_thickness])\n            cube([10 - 2*wall_thickness, window_depth + 1, 10 - 2*wall_thickness]);\n    }\n}\n\n// Door with frame\nmodule door() {\n    translate([25, 0, 0])\n    difference() {\n        // Door frame\n        cube([10, door_depth, 20]);\n        \n        // Door opening\n        translate([wall_thickness, 0, 0])\n            cube([10 - 2*wall_thickness, door_depth + 1, 20 - wall_thickness]);\n            \n        // Door step\n        translate([wall_thickness, door_depth/2, 0])\n            cube([10 - 2*wall_thickness, door_depth/2, wall_thickness]);\n    }\n}\n\n// Chimney\nmodule chimney() {\n    translate([45, 30, 35])\n    difference() {\n        // Main chimney\n        cube([8, 8, 15]);\n        \n        // Chimney hole\n        translate([wall_thickness, wall_thickness, 0])\n            cube([8 - 2*wall_thickness, 8 - 2*wall_thickness, 15]);\n    }\n}\n\n// Loft window\nmodule loft_window() {\n    translate([30, 20, 50])\n    rotate([0, 0, 0])\n    difference() {\n        // Window frame\n        cube([15, 2, 10]);\n        \n        // Window opening\n        translate([wall_thickness, 0, wall_thickness])\n            cube([15 - 2*wall_thickness, 2 + 1, 10 - 2*wall_thickness]);\n    }\n}\n\n// Assemble the house\nunion() {\n    main_building();\n    \n    // Add windows\n    window(15, 0, 25);\n    window(45, 0, 25);\n    window(15, 40 - window_depth, 25);\n    window(45, 40 - window_depth, 25);\n    \n    door();\n    \n    roof();\n    \n    chimney();\n    \n    loft_window();\n}\n\n// Base platform\ntranslate([-5, -5, 0])\n    cube([70, 50, 2]);",
    "renders": true
  },
  {
    "building": "rowhouse",
    "openscad_code": "// Rowhouse in realistic style with medium complexity\n// Width 80mm x Depth 40mm x Height 50mm\n\n// Overall dimensions\nhouse_w = 80;\nhouse_d = 40;\nhouse_h = 50;\nwall_t = 2;\n\n// Foundation\nmodule foundation() {\n    translate([-1, -1, -1])\n    cube([house_w + 2, house_d + 2, 3]);\n}\n\n// Main building structure\nmodule main_structure() {\n    difference() {\n        // Main block\n        cube([house_w, house_d, house_h]);\n        \n        // Hollow interior\n        translate([wall_t, wall_t, wall_t])\n        cube([house_w - 2*wall_t, house_d - 2*wall_t, house_h]);\n    }\n}\n\n// Roof\nmodule roof() {\n    // Main roof\n    translate([0, -2, house_h])\n    rotate([0, 0, 0])\n    linear_extrude(height=2)\n    polygon([\n        [0, 0],\n        [house_w/2, 15],\n        [house_w, 0],\n        [house_w, house_d + 4],\n        [house_w/2, 15 + house_d + 4],\n        [0, house_d + 4]\n    ]);\n    \n    // Chimney\n    translate([house_w - 15, house_d/2, house_h + 14])\n    difference() {\n        cube([6, 6, 8]);\n        translate([1, 1, 0])\n        cube([4, 4, 8]);\n    }\n}\n\n// Door\nmodule door() {\n    translate([house_w/2 - 4, -0.1, 0])\n    cube([8, wall_t + 0.2, 12]);\n    \n    // Door knob\n    translate([house_w/2 + 2, 0.5, 6])\n    sphere(r=0.5);\n}\n\n// Windows\nmodule window(x, y, z, w, h) {\n    translate([x, y, z])\n    difference() {\n        // Window frame\n        cube([w, wall_t, h]);\n        \n        // Window pane\n        translate([1, 0.1, 1])\n        cube([w - 2, wall_t, h - 2]);\n    }\n    \n    // Window sill\n    translate([x + 1, y + wall_t + 0.1, z - 1])\n    cube([w - 2, 2, 1]);\n}\n\n// Steps\nmodule steps() {\n    for (i = [0:2]) {\n        translate([house_w/2 - 5 - i, -1 - i, i])\n        cube([10 + 2*i, 1, 1]);\n    }\n}\n\n// Detailed facade\nmodule facade_details() {\n    // Cornice\n    translate([0, 0, house_h - 2])\n    cube([house_w, wall_t, 2]);\n    \n    // Horizontal band\n    translate([0, 0, house_h/2])\n    cube([house_w, wall_t, 1]);\n    \n    // Vertical pilasters\n    for (pos = [5, house_w - 5]) {\n        translate([pos - 1, 0, 0])\n        cube([2, wall_t, house_h]);\n    }\n}\n\n// Assemble the rowhouse\nunion() {\n    foundation();\n    main_structure();\n    roof();\n    door();\n    \n    // Front windows\n    window(10, -0.1, 15, 8, 10);\n    window(house_w - 18, -0.1, 15, 8, 10);\n    \n    // Side windows\n    window(-0.1, 10, 20, 8, 10);\n    window(house_w - 0.9, 10, 20, 8, 10);\n    \n    steps();\n    facade_details();\n}",
    "renders": true
  },
  {
    "building": "stackhouse",
    "openscad_code": "// Stackhouse - realistic medium complexity\n// Dimensions in mm\n\nwall_thickness = 2;\nbase_width = 40;\nbase_length = 50;\nbase_height = 3;\n\nbottom_box_width = 36;\nbottom_box_length = 46;\nbottom_box_height = 20;\n\ntop_box_width = 30;\ntop_box_length = 40;\ntop_box_height = 16;\n\nroof_overhang = 3;\nroof_height = 12;\n\ndoor_width = 10;\ndoor_height = 15;\n\nwindow_size = 6;\nwindow_offset = 8;\n\nmodule base() {\n    difference() {\n        cube([base_width, base_length, base_height], center=true);\n        translate([0, 0, -base_height/2])\n            cube([base_width-wall_thickness*2, base_length-wall_thickness*2, base_height+0.1], center=true);\n    }\n}\n\nmodule box(width, length, height) {\n    difference() {\n        cube([width, length, height], center=true);\n        translate([0, 0, -height/2])\n            cube([width-wall_thickness*2, length-wall_thickness*2, height+0.1], center=true);\n    }\n}\n\nmodule door() {\n    translate([0, -bottom_box_length/2-wall_thickness/2, -bottom_box_height/2])\n    rotate([90, 0, 0])\n    linear_extrude(height=wall_thickness)\n    square([door_width, door_height], center=true);\n}\n\nmodule windows() {\n    for (x = [-window_offset, window_offset])\n        for (y = [-1, 1]) {\n            translate([x, y*bottom_box_length/4, bottom_box_height/4])\n                rotate([0, 90, 0])\n                cylinder(h=wall_thickness+0.1, d=window_size, center=true, $fn=32);\n            translate([x, y*top_box_length/4, top_box_height/4])\n                rotate([0, 90, 0])\n                cylinder(h=wall_thickness+0.1, d=window_size, center=true, $fn=32);\n        }\n}\n\nmodule roof() {\n    translate([0, 0, top_box_height/2+roof_height/2])\n    difference() {\n        union() {\n            translate([0, 0, -roof_height/2])\n                cube([top_box_width+roof_overhang*2, top_box_length+roof_overhang*2, wall_thickness], center=true);\n            \n            // Roof ridge\n            translate([0, 0, 0])\n                cube([2, top_box_length+roof_overhang*2, roof_height], center=true);\n        }\n        // Hollow inside\n        translate([0, 0, -roof_height/2-0.1])\n            cube([top_box_width+roof_overhang*2-wall_thickness*2, top_box_length+roof_overhang*2-wall_thickness*2, roof_height+wall_thickness+0.2], center=true);\n    }\n}\n\nmodule ladder() {\n    // Simple ladder on side\n    translate([bottom_box_width/2+wall_thickness, 0, 0])\n    union() {\n        // Side rails\n        cube([2, 4, bottom_box_height], center=true);\n        translate([6, 0, 0])\n            cube([2, 4, bottom_box_height], center=true);\n        \n        // Rungs\n        for (i = [-bottom_box_height/4, 0, bottom_box_height/4])\n            translate([3, 0, i])\n                cube([6, 2, 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base platform\n    base();\n    \n    // Bottom box\n    translate([0, 0, base_height/2+bottom_box_height/2])\n        box(bottom_box_width, bottom_box_length, bottom_box_height);\n    \n    // Top box\n    translate([0, 0, base_height/2+bottom_box_height+top_box_height/2])\n        box(top_box_width, top_box_length, top_box_height);\n    \n    // Roof\n    translate([0, 0, base_height/2+bottom_box_height+top_box_height])\n        roof();\n    \n    // Door and windows\n    door();\n    windows();\n    \n    // Ladder\n    ladder();\n}",
    "renders": true
  },
  {
    "building": "court",
    "openscad_code": "// Tennis Court - Realistic Medium Complexity\n// Dimensions in mm, scaled for 3D printing (~80mm length)\n\n// Overall scale factor\nscale_factor = 0.4;\n\n// Court dimensions (scaled down)\ncourt_length = 200 * scale_factor;\ncourt_width = 100 * scale_factor;\ncourt_thickness = 2;\n\n// Net dimensions\nnet_height = 15 * scale_factor;\nnet_thickness = 1;\npost_height = 25 * scale_factor;\npost_diameter = 2;\n\n// Base module\nmodule court_base() {\n    color(\"darkolivegreen\")\n    cube([court_length, court_width, court_thickness], center=true);\n}\n\n// Court lines\nmodule court_lines() {\n    // Main playing area\n    color(\"white\")\n    difference() {\n        // Outer rectangle\n        translate([0, 0, court_thickness/2 + 0.1])\n        cube([court_length - 4, court_width - 4, 0.5], center=true);\n        \n        // Inner area (creates outline)\n        translate([0, 0, court_thickness/2 - 0.1])\n        cube([court_length - 8, court_width - 8, 0.5], center=true);\n    }\n    \n    // Center service line\n    translate([0, 0, court_thickness/2 + 0.2])\n    cube([2, court_width - 8, 0.5], center=true);\n    \n    // Service boxes\n    for(x = [-court_length/6, court_length/6]) {\n        translate([x, 0, court_thickness/2 + 0.2])\n        cube([court_length/3 - 4, 2, 0.5], center=true);\n    }\n}\n\n// Net posts\nmodule net_post() {\n    color(\"darkgreen\")\n    union() {\n        // Post\n        translate([0, 0, post_height/2])\n        cylinder(h=post_height, d=post_diameter, center=true);\n        \n        // Base\n        translate([0, 0, -court_thickness/2])\n        cylinder(h=court_thickness + 1, d=post_diameter * 2, center=false);\n    }\n}\n\n// Net\nmodule tennis_net() {\n    color(\"white\")\n    translate([0, 0, net_height/2 + court_thickness/2])\n    cube([court_length - 20, net_thickness, net_height], center=true);\n    \n    // Net top band\n    color(\"white\")\n    translate([0, 0, net_height + court_thickness/2])\n    cube([court_length - 20, net_thickness * 2, 1], center=true);\n}\n\n// Bench module\nmodule bench(x_pos, y_pos) {\n    color(\"brown\")\n    translate([x_pos, y_pos, court_thickness/2 + 5])\n    union() {\n        // Seat\n        cube([20 * scale_factor, 8 * scale_factor, 2], center=true);\n        \n        // Legs\n        for(x = [-8, 8]) {\n            translate([x * scale_factor, 0, -3])\n            cube([2, 6 * scale_factor, 6], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    court_base();\n    \n    translate([0, 0, 0]) {\n        court_lines();\n    }\n    \n    // Net posts and net\n    translate([court_length/2 - 10, 0, 0]) net_post();\n    translate([-court_length/2 + 10, 0, 0]) mirror([1,0,0]) net_post();\n    \n    translate([0, 0, 0]) tennis_net();\n    \n    // Benches\n    translate([0, court_width/2 + 15, 0]) bench(0, 0);\n    translate([0, -court_width/2 - 15, 0]) bench(0, 0);\n}",
    "renders": true
  },
  {
    "building": "quadplex",
    "openscad_code": "// Quadplex (4-unit residential building) – realistic style, medium complexity\n// All dimensions in mm; overall footprint ≈ 60 mm x 60 mm, height ≈ 50 mm\n// Designed for 3D printing: 1 mm wall/floor thickness, no unsupported overhangs\n\n$fn = 24;          // Smooth curves\nwall_t = 1;        // Wall thickness\nunit_w = 29;       // Width of one unit interior\nunit_d = 28;       // Depth of one unit interior\nh_floor = 12;      // Height of one story\nroof_ang = 30;     // Roof pitch angle\n\n// Overall base plate\nmodule base() {\n    cube([61, 61, wall_t], center = true);\n}\n\n// Single apartment unit (left-right mirrored to make two)\nmodule unit_half(mirrored = false) {\n    xsign = mirrored ? -1 : 1;\n    difference() {\n        // Main box\n        translate([xsign * unit_w/2, 0, h_floor/2 + wall_t])\n            cube([unit_w, unit_d, h_floor], center = true);\n\n        // Door opening\n        translate([xsign * (unit_w/2 - 2.5), 0, wall_t + 1])\n            cube([4, 1, 7], center = true);\n\n        // Window opening\n        translate([xsign * (unit_w/2 - 2.5), 0, wall_t + h_floor/2 + 2])\n            cube([4, 1, 4], center = true);\n    }\n\n    // Door\n    translate([xsign * (unit_w/2 - 2.5), unit_d/2 + wall_t/2, wall_t + 3.5])\n        cube([4, wall_t, 7], center = true);\n\n    // Window frame\n    translate([xsign * (unit_w/2 - 2.5), unit_d/2 + wall_t/2, wall_t + h_floor/2 + 2])\n        cube([4, wall_t, 4], center = true);\n}\n\n// Front roof gable\nmodule roof_half(mirrored = false) {\n    xsign = mirrored ? -1 : 1;\n    translate([xsign * unit_w/2, 0, h_floor + wall_t])\n        rotate([0, mirrored ? -roof_ang : roof_ang, 0])\n            cube([unit_w/cos(roof_ang), unit_d + 2*wall_t, wall_t], center = true);\n}\n\n// Chimney\nmodule chimney() {\n    translate([0, 0, h_floor + wall_t + 1.5*unit_w*tan(roof_ang)/2 + 4])\n        cube([6, 6, 8], center = true);\n    translate([0, 0, h_floor + wall_t + 1.5*unit_w*tan(roof_ang)/2 + 8])\n        cube([8, 8, 1], center = true);\n}\n\n// Entire building\nunion() {\n    base();\n\n    // Lower left/right units\n    unit_half();\n    unit_half(mirrored = true);\n\n    // Upper left/right units\n    translate([0, 0, h_floor + wall_t])\n        unit_half();\n    translate([0, 0, h_floor + wall_t])\n        unit_half(mirrored = true);\n\n    // Roof\n    roof_half();\n    roof_half(mirrored = true);\n\n    chimney();\n}",
    "renders": true
  },
  {
    "building": "triplex",
    "openscad_code": "// Triplex house model - realistic style, medium complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Overall dimensions\nhouse_width = 40;\nhouse_depth = 35;\nhouse_height = 45;\nwall_thickness = 2;\n\n// Main building module\nmodule triplex() {\n    // Base foundation\n    difference() {\n        translate([0, 0, -1])\n            cube([house_width + 6, house_depth + 6, 2], center = true);\n        translate([0, 0, -1.1])\n            cube([house_width + 2, house_depth + 2, 2.2], center = true);\n    }\n    \n    // Three side-by-side units\n    for (i = [-1, 0, 1]) {\n        translate([i * (house_width/3 + 1), 0, house_height/2])\n            residential_unit(i);\n    }\n    \n    // Shared roof across all units\n    roof();\n}\n\n// Single residential unit\nmodule residential_unit(offset) {\n    // Main walls\n    difference() {\n        cube([house_width/3 - 2, house_depth - 4, house_height], center = true);\n        \n        // Front door\n        translate([0, -house_depth/2 + 1, -house_height/2 + 5])\n            cube([4, wall_thickness + 0.2, 8]);\n        \n        // Ground floor windows\n        translate([-6, -house_depth/2 + 1, -house_height/2 + 12])\n            cube([4, wall_thickness + 0.2, 6]);\n        translate([6, -house_depth/2 + 1, -house_height/2 + 12])\n            cube([4, wall_thickness + 0.2, 6]);\n            \n        // Second floor windows\n        translate([-6, -house_depth/2 + 1, house_height/2 - 10])\n            cube([4, wall_thickness + 0.2, 6]);\n        translate([6, -house_depth/2 + 1, house_height/2 - 10])\n            cube([4, wall_thickness + 0.2, 6]);\n    }\n    \n    // Door and window frames\n    // Front door frame\n    translate([0, -house_depth/2 + 1.5, -house_height/2 + 5])\n        cube([5, wall_thickness, 9]);\n    \n    // Window frames\n    for (x = [-6, 6]) {\n        for (z = [12, house_height - 10]) {\n            translate([x, -house_depth/2 + 1.5, -house_height/2 + z])\n                cube([5, wall_thickness, 7]);\n        }\n    }\n    \n    // Small chimney for each unit\n    if (offset != 0) {\n        translate([offset * 5, house_depth/4, house_height/2 + 2])\n            chimney();\n    }\n}\n\n// Roof structure\nmodule roof() {\n    // Main roof body\n    translate([0, 0, house_height + 2])\n        rotate([0, 0, 0])\n            difference() {\n                // Roof prism\n                polyhedron(\n                    points = [\n                        [-house_width/2 - 2, -house_depth/2 - 2, 0],  // front left\n                        [house_width/2 + 2, -house_depth/2 - 2, 0],   // front right\n                        [house_width/2 + 2, house_depth/2 + 2, 0],    // back right\n                        [-house_width/2 - 2, house_depth/2 + 2, 0],   // back left\n                        [0, -house_depth/2 - 2, 8],                   // front peak\n                        [0, house_depth/2 + 2, 8]                     // back peak\n                    ],\n                    faces = [\n                        [0, 1, 4], [1, 2, 5, 4], [2, 3, 5], [3, 0, 4, 5],\n                        [0, 3, 2, 1]\n                    ]\n                );\n                \n                // Roof overhang cut\n                translate([0, 0, -1])\n                    cube([house_width + 8, house_depth + 8, 10], center = true);\n            }\n}\n\n// Chimney module\nmodule chimney() {\n    difference() {\n        // Main chimney body\n        cube([3, 3, 8], center = true);\n        \n        // Hollow top\n        translate([0, 0, 4.5])\n            cube([2, 2, 4], center = true);\n    }\n    \n    // Chimney cap\n    translate([0, 0, 5])\n        cube([4, 4, 1], center = true);\n}\n\n// Render the complete triplex\ntriplex();",
    "renders": true
  },
  {
    "building": "fourplex",
    "openscad_code": "// Fourplex Apartment Building - Realistic Style, Medium Complexity\n// Approx 75mm wide x 55mm deep x 60mm tall\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5;\n\n// Overall dimensions\nbuilding_width = 75;\nbuilding_depth = 55;\nbuilding_height = 60;\n\n// Floor heights\nfirst_floor_height = 20;\nsecond_floor_height = 20;\nroof_height = 20;\n\n// Colors\nwall_color = [0.9, 0.85, 0.75];\nroof_color = [0.4, 0.2, 0.1];\nwindow_color = [0.7, 0.8, 0.9];\ndoor_color = [0.3, 0.2, 0.1];\n\n// Create the entire fourplex\nmodule fourplex() {\n    color(wall_color) {\n        // First floor\n        translate([0, 0, 0])\n            first_floor();\n        \n        // Second floor\n        translate([0, 0, first_floor_height])\n            second_floor();\n    }\n    \n    // Roof\n    color(roof_color)\n        translate([0, 0, first_floor_height + second_floor_height])\n            roof();\n}\n\n// First floor module\nmodule first_floor() {\n    // Main building structure\n    cube([building_width, building_depth, first_floor_height], center=true);\n    \n    // Doorways for each unit (2 front, 2 back)\n    for (x = [-building_width/4, building_width/4]) {\n        // Front doors\n        translate([x, building_depth/2 - wall_thickness/2, -first_floor_height/2 + 3])\n            door();\n        \n        // Back doors\n        translate([x, -building_depth/2 + wall_thickness/2, -first_floor_height/2 + 3])\n            door();\n    }\n    \n    // Windows for each unit\n    for (x = [-building_width/4 - 15, -building_width/4 + 15, building_width/4 - 15, building_width/4 + 15]) {\n        // Front windows\n        translate([x, building_depth/2 - wall_thickness/2, 0])\n            window();\n        \n        // Back windows\n        translate([x, -building_depth/2 + wall_thickness/2, 0])\n            window();\n    }\n}\n\n// Second floor module\nmodule second_floor() {\n    // Main structure\n    cube([building_width, building_depth, second_floor_height], center=true);\n    \n    // Windows for each unit (4 per floor)\n    for (x = [-building_width/4 - 15, -building_width/4 + 15, building_width/4 - 15, building_width/4 + 15]) {\n        // Front windows\n        translate([x, building_depth/2 - wall_thickness/2, 0])\n            window();\n        \n        // Back windows\n        translate([x, -building_depth/2 + wall_thickness/2, 0])\n            window();\n        \n        // Side windows\n        translate([building_width/2 - wall_thickness/2, building_depth/4, 0])\n            rotate([0, 90, 0])\n            window();\n        \n        translate([-building_width/2 + wall_thickness/2, -building_depth/4, 0])\n            rotate([0, 90, 0])\n            window();\n    }\n}\n\n// Roof module\nmodule roof() {\n    // Main roof structure\n    translate([0, 0, roof_height/2])\n        cube([building_width + 4, building_depth + 4, roof_height], center=true);\n    \n    // Ridge beam\n    translate([0, 0, roof_height - 2])\n        cube([building_width, 2, 4], center=true);\n    \n    // Chimneys (2 units)\n    for (x = [-building_width/4, building_width/4]) {\n        translate([x, building_depth/4, roof_height - 4])\n            chimney();\n    }\n}\n\n// Door module\nmodule door() {\n    color(door_color) {\n        // Door frame\n        difference() {\n            cube([10, wall_thickness, 14]);\n            translate([wall_thickness, -1, wall_thickness])\n                cube([10 - 2*wall_thickness, wall_thickness + 2, 14 - 2*wall_thickness]);\n        }\n        \n        // Door\n        translate([wall_thickness, 0, wall_thickness])\n            cube([10 - 2*wall_thickness, wall_thickness, 12]);\n    }\n}\n\n// Window module\nmodule window() {\n    color(window_color) {\n        // Window frame\n        difference() {\n            cube([12, wall_thickness, 12]);\n            translate([wall_thickness, -1, wall_thickness])\n                cube([12 - 2*wall_thickness, wall_thickness + 2, 12 - 2*wall_thickness]);\n        }\n        \n        // Window panes (4 panes)\n        for (i = [0, 1]) {\n            for (j = [0, 1]) {\n                translate([wall_thickness + 2 + i*5, 0, wall_thickness + 2 + j*5])\n                    cube([4.5, wall_thickness, 4.5]);\n            }\n        }\n    }\n}\n\n// Chimney module\nmodule chimney() {\n    color([0.5, 0.5, 0.5]) {\n        // Main chimney\n        cube([6, 6, 12], center=true);\n        \n        // Chimney cap\n        translate([0, 0, 7])\n            cube([8, 8, 2], center=true);\n    }\n}\n\n// Render the fourplex\nfourplex();",
    "renders": true
  },
  {
    "building": "walkup",
    "openscad_code": "// Realistic walk-up apartment building (medium complexity)\n// Dimensions in mm, designed for 3D printing\n\n$fn = 32;  // Smooth curves for printability\n\n// Main building dimensions\nbuilding_width = 60;\nbuilding_depth = 40;\nbuilding_height = 80;\nwall_thickness = 2;\n\n// Entrance stoop\nstoop_width = 20;\nstoop_depth = 15;\nstoop_height = 8;\nstoop_steps = 4;\n\n// Windows\nwindow_width = 8;\nwindow_height = 12;\nwindow_depth = 1;\n\n// Door\ndoor_width = 10;\ndoor_height = 18;\ndoor_depth = 1;\n\nmodule building_base() {\n    difference() {\n        // Main structure\n        cube([building_width, building_depth, building_height], center=false);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, 0])\n            cube([building_width-2*wall_thickness, building_depth-2*wall_thickness, building_height+1], center=false);\n    }\n}\n\nmodule stoop() {\n    translate([(building_width-stoop_width)/2, -stoop_depth, 0]) {\n        // Base platform\n        cube([stoop_width, stoop_depth, stoop_height]);\n        \n        // Steps\n        for(i = [1:stoop_steps]) {\n            translate([0, -stoop_depth/stoop_steps*i, stoop_height/stoop_steps*i]) {\n                cube([stoop_width, stoop_depth/stoop_steps, stoop_height/stoop_steps]);\n            }\n        }\n        \n        // Railings\n        translate([-2, -stoop_depth/2, stoop_height]) {\n            cube([2, stoop_depth, 8]);\n        }\n        translate([stoop_width, -stoop_depth/2, stoop_height]) {\n            cube([2, stoop_depth, 8]);\n        }\n    }\n}\n\nmodule windows() {\n    // Ground floor windows\n    for(i = [0:1]) {\n        translate([10 + i*20, wall_thickness/2, 10]) {\n            window_frame();\n        }\n    }\n    \n    // Upper floor windows (2 floors above ground)\n    for(floor = [1:2]) {\n        for(i = [0:1]) {\n            translate([10 + i*20, wall_thickness/2, 30*floor]) {\n                window_frame();\n            }\n        }\n    }\n}\n\nmodule window_frame() {\n    difference() {\n        // Frame\n        translate([-1, 0, -1])\n            cube([window_width+2, window_depth+1, window_height+2]);\n        \n        // Window opening\n        cube([window_width, window_depth+2, window_height]);\n    }\n}\n\nmodule door() {\n    translate([(building_width-door_width)/2, wall_thickness/2, 0]) {\n        difference() {\n            // Door frame\n            translate([-1, 0, -1])\n                cube([door_width+2, door_depth+1, door_height+2]);\n            \n            // Door opening\n            cube([door_width, door_depth+2, door_height]);\n            \n            // Mail slot\n            translate([door_width/2-1, door_depth/2, door_height/2])\n                cube([2, door_depth+3, 1]);\n        }\n    }\n}\n\nmodule fire_escape() {\n    // Fire escape on side\n    translate([building_width-wall_thickness/2, 10, 15]) {\n        for(level = [0:2]) {\n            translate([0, 0, 20*level]) {\n                // Platform\n                cube([5, building_depth-20, 1]);\n                \n                // Ladder rungs\n                for(rung = [0:3]) {\n                    translate([2.5, 5 + rung*5, -5])\n                        rotate([90,0,0])\n                            cylinder(h=5, r=0.5);\n                }\n            }\n        }\n    }\n}\n\nmodule roof_detail() {\n    translate([0, 0, building_height]) {\n        // Parapet wall\n        difference() {\n            cube([building_width, building_depth, 4]);\n            translate([wall_thickness, wall_thickness, 0])\n                cube([building_width-2*wall_thickness, building_depth-2*wall_thickness, 5]);\n        }\n        \n        // Water tower base\n        translate([building_width/2, building_depth/2, 4]) {\n            cylinder(h=6, r=8);\n            translate([0,0,6])\n                cylinder(h=12, r=6);\n        }\n    }\n}\n\n// Assemble the building\nunion() {\n    building_base();\n    stoop();\n    windows();\n    door();\n    fire_escape();\n    roof_detail();\n}",
    "renders": true
  },
  {
    "building": "highrise",
    "openscad_code": "// Realistic medium-complexity highrise for 3D printing\n// All dimensions in mm, designed for ~80 mm height\n\n$fn = 32;\n\n// Overall footprint and height\nfootprint_x = 30;\nfootprint_y = 35;\ntotal_height = 80;\nwall_thickness = 1.2;\n\n// Main module\nmodule highrise() {\n    // Base podium\n    translate([0, 0, 0])\n        podium();\n\n    // Main tower\n    translate([0, 0, 8])\n        tower();\n\n    // Rooftop mechanical\n    translate([0, 0, 75])\n        rooftop_mechanical();\n}\n\n// Podium (commercial base)\nmodule podium() {\n    height = 8;\n    // Main podium block\n    difference() {\n        cube([footprint_x + 10, footprint_y + 10, height], center = true);\n        \n        // Entrance recess\n        translate([0, -22, 0])\n            cube([12, 8, height + 1], center = true);\n        \n        // Windows cutouts\n        for (y = [-15, -5, 5, 15]) {\n            translate([20, y, height/2])\n                cube([2, 4, 4], center = true);\n            translate([-20, y, height/2])\n                cube([2, 4, 4], center = true);\n        }\n    }\n    \n    // Entrance canopy\n    translate([0, -22, 4])\n        cube([14, 2, 1], center = true);\n}\n\n// Main tower\nmodule tower() {\n    height = 67;\n    \n    // Core structure\n    difference() {\n        cube([footprint_x, footprint_y, height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, 0])\n            cube([footprint_x - wall_thickness*2, footprint_y - wall_thickness*2, height + 1], center = true);\n        \n        // Window openings - front/back\n        for (floor = [1:6]) {\n            for (x = [-10, -5, 0, 5, 10]) {\n                translate([x, 16.5, floor * 10 - 5])\n                    cube([3, 1, 4], center = true);\n                translate([x, -16.5, floor * 10 - 5])\n                    cube([3, 1, 4], center = true);\n            }\n        }\n        \n        // Window openings - sides\n        for (floor = [1:6]) {\n            for (y = [-12, -6, 0, 6, 12]) {\n                translate([14.5, y, floor * 10 - 5])\n                    cube([1, 3, 4], center = true);\n                translate([-14.5, y, floor * 10 - 5])\n                    cube([1, 3, 4], center = true);\n            }\n        }\n    }\n    \n    // Vertical columns\n    column_positions = [[12, 12], [12, -12], [-12, 12], [-12, -12]];\n    for (pos = column_positions) {\n        translate([pos[0], pos[1], height/2])\n            cube([2, 2, height], center = true);\n    }\n    \n    // Floor dividers\n    for (floor = [1:6]) {\n        translate([0, 0, floor * 10])\n            cube([footprint_x + 0.5, footprint_y + 0.5, 0.8], center = true);\n    }\n}\n\n// Rooftop mechanical systems\nmodule rooftop_mechanical() {\n    // Main mechanical box\n    translate([0, 0, 2.5])\n        cube([20, 15, 5], center = true);\n    \n    // Water tank\n    translate([0, 0, 6])\n        cylinder(r = 6, h = 3, center = true);\n    \n    // Ventilation stacks\n    for (x = [-8, 0, 8]) {\n        translate([x, 0, 8])\n            cube([2, 2, 6], center = true);\n    }\n    \n    // Communications mast\n    translate([0, 8, 9])\n        cylinder(r = 0.5, h = 8);\n}\n\n// Generate the building\nhighrise();",
    "renders": true
  },
  {
    "building": "lowrise",
    "openscad_code": "// Realistic Low-Rise Office Block – printable, medium detail\n// Overall footprint ~60 mm × 45 mm, height ~35 mm\n\n// Basic wall thickness for 3D printing\nwall = 1.6;\n\n// Main block\nmodule main_block() {\n    // Footprint 60×45 mm\n    difference() {\n        cube([60, 45, 32], center = true);\n        translate([0, 0, wall/2])\n            cube([60 - 2*wall, 45 - 2*wall, 32 - wall], center = true);\n    }\n}\n\n// Parapet on roof\nmodule parapet() {\n    translate([0, 0, 32/2 + 1.5])\n        difference() {\n            cube([62, 47, 3], center = true);\n            translate([0, 0, wall])\n                cube([62 - 2*wall, 47 - 2*wall, 3], center = true);\n        }\n}\n\n// Window module – centered on XY plane, extends in +Z\nmodule window(w = 10, h = 12) {\n    // Frame thickness 1.2 mm\n    frame = 1.2;\n    // Outer frame\n    color(\"gray\")\n    difference() {\n        cube([w, frame, h], center = true);\n        translate([0, 0, 0])  // inner cavity\n            cube([w - 2*frame, frame + 0.1, h - 2*frame], center = true);\n    }\n    translate([0, frame/2, 0])\n        cube([w - 2*frame, 0.6, h - 2*frame], center = true);\n}\n\n// Row of windows along a wall\nmodule window_row(count = 5, spacing = 11, h = 12) {\n    for (i = [0 : count-1]) {\n        translate([i*spacing - (count-1)*spacing/2, 0, 0])\n            rotate([0, 90, 0])\n            window(10, h);\n    }\n}\n\n// Front façade: windows + entrance\nmodule front_façade() {\n    // Windows\n    translate([0, 45/2 - wall/2, 32/2 - 6 - 12/2])\n        window_row(5);\n\n    // Entrance canopy\n    translate([0, 45/2 - wall/2, -32/2 + 2.5])\n        cube([12, 2, 5], center = true);\n\n    // Entrance door\n    translate([0, 45/2 - wall/2 - 1, -32/2 + 2.5])\n        cube([6, 0.6, 8], center = true);\n}\n\n// Rear façade: simpler window row\nmodule rear_façade() {\n    translate([0, -45/2 + wall/2, 32/2 - 6 - 12/2])\n        rotate([0, 180, 0])\n        window_row(5);\n}\n\n// Left & right façades\nmodule side_façade() {\n    translate([60/2 - wall/2, 0, 32/2 - 6 - 12/2])\n        rotate([0, 90, 0])\n        window_row(4, spacing = 10.5, h = 12);\n}\n\n// HVAC box on roof\nmodule hvac() {\n    translate([15, 10, 32/2 + 3 + 1.5])\n        cube([10, 8, 3], center = true);\n    translate([-15, -10, 32/2 + 3 + 1.5])\n        cube([10, 8, 3], center = true);\n}\n\n// Assembly\nunion() {\n    main_block();\n    parapet();\n    front_façade();\n    rear_façade();\n    side_façade();\n    mirror([1, 0, 0]) side_façade();\n    hvac();\n}",
    "renders": true
  },
  {
    "building": "midrise",
    "openscad_code": "// Midrise Building - Medium Complexity\n// Realistic style with printable features\n\nmodule windows(x, y, h, count) {\n    for(i=[0:count-1]) {\n        translate([x + i*6, y, h]) \n            difference() {\n                cube([5, 2, 8]);\n                translate([0.5, -0.1, 0.5]) cube([4, 2.2, 7]);\n            }\n    }\n}\n\nmodule floor(floor_num) {\n    base_height = floor_num * 12;\n    \n    // Main floor slab\n    translate([0, 0, base_height])\n        cube([60, 40, 1]);\n    \n    // Exterior walls\n    difference() {\n        // North wall\n        translate([0, 39, base_height+1])\n            cube([60, 2, 10]);\n        \n        // Windows on north wall\n        windows(5, 39.1, base_height+2, 8);\n        \n        // South wall\n        translate([0, -1, base_height+1])\n            cube([60, 2, 10]);\n        \n        // Windows on south wall\n        windows(5, -1.1, base_height+2, 8);\n    }\n    \n    difference() {\n        // East wall\n        translate([59, 0, base_height+1])\n            cube([2, 40, 10]);\n        \n        // Windows on east wall\n        for(i=[0:3]) {\n            translate([59.1, 5 + i*10, base_height+2])\n                difference() {\n                    cube([2, 5, 8]);\n                    translate([-0.1, 0.5, 0.5]) cube([2.2, 4, 7]);\n                }\n        }\n    }\n    \n    difference() {\n        // West wall\n        translate([-1, 0, base_height+1])\n            cube([2, 40, 10]);\n        \n        // Windows on west wall\n        for(i=[0:3]) {\n            translate([-1.1, 5 + i*10, base_height+2])\n                difference() {\n                    cube([2, 5, 8]);\n                    translate([-0.1, 0.5, 0.5]) cube([2.2, 4, 7]);\n                }\n        }\n    }\n}\n\n// Foundation\ntranslate([-5, -5, 0])\n    cube([70, 50, 2]);\n\n// Main structure - 5 floors\nfor(i=[0:4]) {\n    floor(i);\n}\n\n// Roof\ntranslate([0, 0, 61])\n    cube([60, 40, 1]);\n\n// Roof parapet\ntranslate([-1, -1, 61])\n    cube([62, 2, 3]);\ntranslate([-1, 39, 61])\n    cube([62, 2, 3]);\ntranslate([-1, -1, 61])\n    cube([2, 42, 3]);\ntranslate([59, -1, 61])\n    cube([2, 42, 3]);\n\n// Main entrance\ntranslate([25, -3, 2])\n    difference() {\n        cube([10, 3, 8]);\n        translate([1, -0.1, 1]) cube([8, 3.2, 7]);\n    }\n\n// Entrance canopy\ntranslate([24, -3, 10])\n    cube([12, 5, 0.5]);\n\n// HVAC unit on roof\ntranslate([20, 15, 62])\n    cube([20, 10, 5]);\n\n// Water tower\ntranslate([45, 5, 65])\n    cylinder(h=10, r=3, $fn=16);\n\n// Stairwell enclosure\ntranslate([25, 15, 0])\n    for(i=[0:5]) {\n        translate([0, 0, i*12])\n            cube([10, 10, 11]);\n    }\n\n// Small balcony on 3rd floor\ntranslate([30, 39, 37])\n    cube([20, 2, 0.5]);\n\n// Balcony railing\ntranslate([30, 39, 37.5])\n    for(i=[0:3]) {\n        translate([i*5, 0, 0])\n            cube([1, 2, 2]);\n    }\ntranslate([30, 39, 37.5])\n    cube([20, 0.5, 2]);\ntranslate([30, 41, 37.5])\n    cube([20, 0.5, 2]);",
    "renders": true
  },
  {
    "building": "gardenhome",
    "openscad_code": "// Garden Home - Realistic Medium Complexity\n// Wall thickness = 2mm for 3D printing\n// Overall size: 80x60x55mm\n\n$fn = 32;\n\n// House dimensions\nhouse_w = 60;\nhouse_d = 40;\nhouse_h = 35;\nwall_t = 2;\n\n// Roof dimensions\nroof_overhang = 5;\nroof_h = 15;\n\n// Windows and doors\nwindow_w = 10;\nwindow_h = 12;\ndoor_w = 12;\ndoor_h = 20;\n\n// Garden features\ngarden_w = 80;\ngarden_d = 60;\nfence_h = 6;\nfence_t = 1.5;\n\nmodule house_structure() {\n    // Main house box\n    difference() {\n        // Outer shell\n        cube([house_w, house_d, house_h], center=false);\n        \n        // Hollow interior\n        translate([wall_t, wall_t, wall_t])\n        cube([house_w-2*wall_t, house_d-2*wall_t, house_h-wall_t], center=false);\n    }\n}\n\nmodule roof() {\n    // Roof base\n    difference() {\n        translate([-roof_overhang, -roof_overhang, house_h])\n        cube([house_w+2*roof_overhang, house_d+2*roof_overhang, wall_t], center=false);\n        \n        // Roof slope\n        translate([0, 0, house_h+wall_t])\n        cube([house_w, house_d, roof_h], center=false);\n    }\n    \n    // Roof slope sides\n    translate([-roof_overhang, -roof_overhang, house_h+wall_t])\n    rotate([0, 90, 0])\n    linear_extrude(height=house_d+2*roof_overhang)\n    polygon(points=[\n        [0, 0],\n        [house_w+2*roof_overhang, 0],\n        [(house_w+2*roof_overhang)/2, roof_h]\n    ]);\n    \n    translate([-roof_overhang, house_d+roof_overhang, house_h+wall_t])\n    rotate([0, 90, 0])\n    linear_extrude(height=house_d+2*roof_overhang)\n    polygon(points=[\n        [0, 0],\n        [house_w+2*roof_overhang, 0],\n        [(house_w+2*roof_overhang)/2, roof_h]\n    ]);\n}\n\nmodule windows() {\n    // Front windows\n    for(x=[15, house_w-15-window_w]) {\n        translate([x, 0, 10])\n        window_frame();\n    }\n    \n    // Back windows\n    for(x=[15, house_w-15-window_w]) {\n        translate([x, house_d-wall_t, 10])\n        window_frame();\n    }\n}\n\nmodule window_frame() {\n    // Window frame\n    difference() {\n        cube([window_w+4, wall_t, window_h+4], center=false);\n        translate([2, -1, 2])\n        cube([window_w, wall_t+2, window_h], center=false);\n    }\n    \n    // Window panes (grid)\n    translate([2+window_w/4, -0.5, 2+window_h/4])\n    cube([window_w/2-1, 1, window_h/2-1], center=false);\n    \n    translate([2+window_w/4, -0.5, 2+3*window_h/4])\n    cube([window_w/2-1, 1, window_h/2-1], center=false);\n}\n\nmodule door() {\n    // Door frame\n    difference() {\n        translate([house_w/2-door_w/2-2, 0, 0])\n        cube([door_w+4, wall_t, door_h+2], center=false);\n        translate([house_w/2-door_w/2, -1, 2])\n        cube([door_w, wall_t+2, door_h], center=false);\n    }\n    \n    // Door details\n    translate([house_w/2-door_w/2+1, 0, door_h/2])\n    sphere(d=2);\n}\n\nmodule chimney() {\n    translate([house_w-10, house_d-10, house_h+roof_h-5])\n    difference() {\n        cube([8, 8, 10], center=false);\n        translate([1, 1, 0])\n        cube([6, 6, 10], center=false);\n    }\n}\n\nmodule garden_base() {\n    // Garden ground\n    translate([0, 0, -wall_t])\n    cube([garden_w, garden_d, wall_t], center=false);\n}\n\nmodule fence() {\n    // Front fence\n    for(x=[10:garden_w/5:garden_w-10]) {\n        translate([x, 5, 0])\n        fence_post();\n    }\n    \n    // Back fence\n    for(x=[10:garden_w/5:garden_w-10]) {\n        translate([x, garden_d-5-fence_t, 0])\n        fence_post();\n    }\n    \n    // Side fences\n    for(y=[10:garden_d/5:garden_d-10]) {\n        translate([5, y, 0])\n        rotate([0, 0, 90])\n        fence_post();\n        \n        translate([garden_w-5-fence_t, y, 0])\n        rotate([0, 0, 90])\n        fence_post();\n    }\n}\n\nmodule fence_post() {\n    difference() {\n        cube([fence_t, 2, fence_h], center=false);\n        translate([0, 0.5, 1])\n        cube([fence_t, 1, fence_h-2], center=false);\n    }\n}\n\nmodule garden_path() {\n    // Path from door to fence gate\n    translate([house_w/2-3, wall_t, -wall_t+0.5])\n    cube([6, garden_d/2-house_d/2-5, wall_t], center=false);\n}\n\n// Assembly\nunion() {\n    // House components\n    house_structure();\n    roof();\n    chimney();\n    windows();\n    door();\n    \n    // Garden components\n    garden_base();\n    garden_path();\n    fence();\n}",
    "renders": true
  },
  {
    "building": "patiohome",
    "openscad_code": "// Patio Home - Realistic Style, Medium Complexity\n// Designed for 3D printing (no overhangs, 1mm wall thickness)\n\n// Main dimensions (in mm)\nhome_width = 40;\nhome_depth = 30;\nhome_height = 25;\nwall_thickness = 1;\n\nmodule base_foundation() {\n    // Concrete foundation slab\n    color(\"gray\")\n    translate([0, 0, -0.5])\n    cube([home_width + 4, home_depth + 4, 1], center = true);\n}\n\nmodule main_structure() {\n    // Main living area\n    color(\"beige\")\n    translate([0, 0, home_height/2])\n    cube([home_width, home_depth, home_height], center = true);\n    \n    // Remove interior for hollow walls\n    color(\"beige\")\n    translate([0, 0, home_height/2])\n    cube([home_width - wall_thickness*2, home_depth - wall_thickness*2, home_height - wall_thickness], center = true);\n}\n\nmodule roof() {\n    // Main roof - gabled style\n    color(\"darkred\")\n    translate([0, 0, home_height + 3])\n    rotate([0, 0, 0])\n    cube([home_width + 2, home_depth + 2, 1], center = true);\n    \n    // Roof ridge\n    color(\"darkred\")\n    translate([0, 0, home_height + 4.5])\n    cube([home_width + 2, 1, 3], center = true);\n    \n    // Roof overhang sides\n    for(side = [-1, 1]) {\n        color(\"darkred\")\n        translate([0, side * (home_depth/2 + 1), home_height + 2.5])\n        cube([home_width + 4, 2, 2], center = true);\n    }\n}\n\nmodule windows() {\n    // Front windows\n    for(pos = [-home_width/4, home_width/4]) {\n        // Window frame\n        color(\"white\")\n        translate([pos, home_depth/2 + 0.1, home_height/2])\n        cube([6, 0.5, 6], center = true);\n        \n        // Window glass\n        color(\"lightblue\")\n        translate([pos, home_depth/2 + 0.3, home_height/2])\n        cube([5, 0.2, 5], center = true);\n    }\n    \n    // Side windows\n    color(\"white\")\n    translate([home_width/2 + 0.1, 0, home_height/2])\n    cube([0.5, 6, 6], center = true);\n    \n    color(\"lightblue\")\n    translate([home_width/2 + 0.3, 0, home_height/2])\n    cube([0.2, 5, 5], center = true);\n}\n\nmodule door() {\n    // Front door\n    color(\"brown\")\n    translate([0, home_depth/2 + 0.1, home_height/3])\n    cube([4, 0.5, 8], center = true);\n    \n    // Door knob\n    color(\"gold\")\n    translate([1.5, home_depth/2 + 0.5, home_height/3])\n    sphere(0.5);\n}\n\nmodule patio() {\n    // Patio slab\n    color(\"gray\")\n    translate([0, home_depth/2 + 6, 0.5])\n    cube([home_width - 8, 12, 1], center = true);\n    \n    // Patio roof posts\n    for(x = [-home_width/3, home_width/3]) {\n        color(\"white\")\n        translate([x, home_depth/2 + 6, home_height/2])\n        cylinder(h = home_height/2, r = 0.8);\n    }\n    \n    // Patio roof\n    color(\"tan\")\n    translate([0, home_depth/2 + 6, home_height])\n    cube([home_width - 6, 12, 0.5], center = true);\n}\n\nmodule chimney() {\n    // Chimney stack\n    color(\"brick\")\n    translate([home_width/3, home_depth/3, home_height + 4])\n    cube([4, 4, 5], center = true);\n}\n\n// Assembly\nunion() {\n    base_foundation();\n    main_structure();\n    roof();\n    windows();\n    door();\n    patio();\n    chimney();\n}",
    "renders": true
  },
  {
    "building": "courtyard",
    "openscad_code": "$fn=30;\n\nmodule courtyard() {\n    // Base platform\n    difference() {\n        cube([80, 80, 4], center=true);\n        translate([0,0,-1])\n            cube([78, 78, 6], center=true);\n    }\n    \n    // Floor tiles pattern\n    for (x=[-35:10:35]) {\n        for (y=[-35:10:35]) {\n            translate([x,y,2])\n                cube([9,9,1], center=true);\n        }\n    }\n    \n    // North wall\n    module wall() {\n        difference() {\n            cube([60, 4, 15]);\n            translate([5,2,2])\n                cube([8,2,11]);\n            translate([20,2,2])\n                cube([8,2,11]);\n            translate([35,2,2])\n                cube([8,2,11]);\n            translate([47,2,2])\n                cube([8,2,11]);\n        }\n    }\n    \n    translate([0,38,7])\n        wall();\n    \n    // East wall\n    translate([38,0,7])\n        rotate([0,0,90])\n            wall();\n    \n    // West wall\n    translate([-38,0,7])\n        rotate([0,0,90])\n            wall();\n    \n    // South wall with gate\n    difference() {\n        cube([60, 4, 15]);\n        translate([5,0,2])\n            cube([8,2,11]);\n        translate([20,0,2])\n            cube([8,2,11]);\n        translate([35,0,2])\n            cube([8,2,11]);\n        translate([47,0,2])\n            cube([8,2,11]);\n        translate([25,0,0)\n            cube([12,4,12]);\n    }\n    translate([0,-38,7])\n        rotate([0,0,0])\n            wall();\n    \n    // Corner towers\n    module tower() {\n        difference() {\n            cylinder(h=18, r=6);\n            translate([0,0,-1])\n                cylinder(h=20, r=4);\n        }\n        translate([0,0,18])\n            cylinder(h=2, r=7);\n    }\n    \n    translate([35,35,9]) tower();\n    translate([-35,35,9]) tower();\n    translate([35,-35,9]) tower();\n    translate([-35,-35,9]) tower();\n    \n    // Central fountain\n    difference() {\n        cylinder(h=6, r=12);\n        translate([0,0,2])\n            cylinder(h=6, r=10);\n    }\n    translate([0,0,6])\n        cylinder(h=2, r=13);\n    \n    // Fountain water\n    translate([0,0,8])\n        sphere(r=8);\n    \n    // Fountain spout\n    cylinder(h=8, r=1);\n    sphere(r=2);\n    \n    // Small trees\n    module tree() {\n        cylinder(h=8, r=1.5);\n        translate([0,0,8])\n            sphere(r=4);\n    }\n    \n    translate([20,20,2]) tree();\n    translate([-20,20,2]) tree();\n    translate([20,-20,2]) tree();\n    translate([-20,-20,2]) tree();\n    \n    // Bench\n    module bench() {\n        cube([16, 4, 2]);\n        translate([-7,-1,0]) cube([2,2,3]);\n        translate([7,-1,0]) cube([2,2,3]);\n        translate([-7,3,0]) cube([2,2,3]);\n        translate([7,3,0]) cube([2,2,3]);\n    }\n    \n    translate([0,25,1]) bench();\n    translate([0,-25,1]) rotate([0,0,180]) bench();\n}\n\ncourtyard();",
    "renders": true
  },
  {
    "building": "clusterhome",
    "openscad_code": "// Clusterhome - Realistic Style, Medium Complexity\n// Designed for 3D printing at approximately 70mm width\n\n// Overall dimensions\nhome_width = 70;\nhome_depth = 60;\nhome_height = 35;\n\n// Wall and roof thickness\nwall_thickness = 2;\nroof_thickness = 2;\n\n// Base foundation\nmodule foundation() {\n    translate([0, 0, -1]) \n        cube([home_width + 4, home_depth + 4, 2], center=true);\n}\n\n// Main building structure\nmodule main_building() {\n    // Ground floor\n    translate([0, 0, home_height/4]) \n        cube([home_width, home_depth, home_height/2], center=true);\n    \n    // First floor\n    translate([0, 0, home_height*3/4]) \n        cube([home_width-6, home_depth-6, home_height/2], center=true);\n}\n\n// Roof for main building\nmodule main_roof() {\n    translate([0, 0, home_height + roof_thickness/2]) {\n        // Main roof body\n        cube([home_width + 4, home_depth + 4, roof_thickness], center=true);\n        \n        // Roof peak\n        translate([0, 0, roof_thickness]) \n            cube([home_width, 2, 8], center=true);\n    }\n}\n\n// Windows\nmodule window(x, y, z, width, height) {\n    translate([x, y, z]) {\n        // Window frame\n        difference() {\n            cube([width + 2, wall_thickness + 1, height + 2], center=true);\n            cube([width, wall_thickness + 2, height], center=true);\n        }\n        \n        // Window pane\n        translate([0, wall_thickness/2 + 0.5, 0]) \n            cube([width - 1, 0.5, height - 1], center=true);\n    }\n}\n\n// Door\nmodule door(x, y, z) {\n    translate([x, y, z]) {\n        // Door frame\n        difference() {\n            cube([12, wall_thickness + 1, 18], center=true);\n            cube([10, wall_thickness + 2, 16], center=true);\n        }\n        \n        // Door panel\n        translate([0, wall_thickness/2 + 0.5, -2]) \n            cube([9, 1, 14], center=true);\n        \n        // Door knob\n        translate([3, wall_thickness/2 + 1, 2]) \n            sphere(d=1.5, $fn=12);\n    }\n}\n\n// Chimney\nmodule chimney() {\n    translate([home_width/2 - 8, home_depth/2 - 5, home_height + 6]) {\n        cube([6, 6, 12], center=true);\n        translate([0, 0, 7]) \n            cube([8, 8, 2], center=true);\n    }\n}\n\n// Garage attachment\nmodule garage() {\n    translate([home_width/2 + 15, 0, home_height/4 - 5]) {\n        // Garage structure\n        cube([25, home_depth*0.8, home_height/2 - 2], center=true);\n        \n        // Garage roof (lower than house)\n        translate([0, 0, home_height/2 + 2]) \n            cube([27, home_depth*0.8 + 2, 2], center=true);\n        \n        // Garage door\n        translate([12, home_depth*0.4 - 1, 0]) {\n            for(i = [0:3]) {\n                translate([0, 0, -5 + i*2.5]) \n                    cube([11, 1, 2], center=true);\n            }\n        }\n    }\n}\n\n// Small porch roof\nmodule porch() {\n    translate([-home_width/2 - 2, 0, home_height/4 + 5]) {\n        cube([8, 20, 1], center=true);\n        \n        // Support pillars\n        translate([-3, -8, -5]) \n            cylinder(h=10, d=2, $fn=8);\n        translate([-3, 8, -5]) \n            cylinder(h=10, d=2, $fn=8);\n    }\n}\n\n// Generate the complete clusterhome\nunion() {\n    // Base elements\n    foundation();\n    \n    // Main structure\n    main_building();\n    main_roof();\n    \n    // Add-ons\n    garage();\n    porch();\n    chimney();\n    \n    // Windows on ground floor\n    for(i = [-1, 1]) {\n        window(i*home_width/4, home_depth/2 + wall_thickness/2, home_height/4, 8, 10);\n        window(i*home_width/4, -home_depth/2 - wall_thickness/2, home_height/4, 8, 10);\n    }\n    \n    // Windows on first floor\n    for(i = [-1, 0, 1]) {\n        if(i != 0) {\n            window(i*(home_width-6)/4, (home_depth-6)/2 + wall_thickness/2, home_height*3/4, 6, 8);\n            window(i*(home_width-6)/4, -(home_depth-6)/2 - wall_thickness/2, home_height*3/4, 6, 8);\n        }\n    }\n    \n    // Door at front\n    door(-home_width/2 - wall_thickness/2, 0, home_height/4 - 3);\n}",
    "renders": true
  },
  {
    "building": "zero",
    "openscad_code": "// Realistic 3D printable zero digit\n// Size: ~60 mm tall, 5 mm thick\n\n// Overall parameters\ndigit_height = 60;\ndigit_thickness = 5;\nwall_thickness = 2.2;  // 2-3 perimeters for 0.4 mm nozzle\nouter_radius = digit_height/2;\ninner_radius = outer_radius - 6;  // 6 mm wide stroke\n\n// Base plate for stability\nmodule base_plate() {\n    difference() {\n        cylinder(h = 1.2, r = outer_radius + 5, $fn = 64);\n        translate([0, 0, -0.1])\n            cylinder(h = 1.5, r = outer_radius + 4.8, $fn = 64);\n    }\n}\n\n// Main outer ring\nmodule outer_ring() {\n    difference() {\n        cylinder(h = digit_thickness, r = outer_radius, $fn = 128);\n        translate([0, 0, -0.1])\n            cylinder(h = digit_thickness + 0.2, r = outer_radius - wall_thickness, $fn = 128);\n    }\n}\n\n// Inner hole with chamfer\nmodule inner_hole() {\n    difference() {\n        translate([0, 0, -0.1])\n            cylinder(h = digit_thickness + 0.2, r = inner_radius, $fn = 128);\n        \n        // Top chamfer\n        translate([0, 0, digit_thickness - 1])\n            cylinder(h1 = 1, h2 = 0, r1 = inner_radius, r2 = inner_radius - 1, $fn = 128);\n        \n        // Bottom chamfer\n        translate([0, 0, 0])\n            cylinder(h1 = 0, h2 = 1, r1 = inner_radius - 1, r2 = inner_radius, $fn = 128);\n    }\n}\n\n// Reinforcement ribs to prevent warping\nmodule ribs() {\n    rib_width = 1.5;\n    rib_height = digit_thickness - 0.2;\n    \n    for (i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([(outer_radius + inner_radius)/2, -rib_width/2, 0.1])\n            cube([rib_width, rib_width, rib_height]);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    translate([0, 0, 0])\n        base_plate();\n    \n    // Main digit body\n    translate([0, 0, 1.2])\n    difference() {\n        union() {\n            outer_ring();\n            ribs();\n        }\n        inner_hole();\n    }\n}",
    "renders": true
  },
  {
    "building": "laneway",
    "openscad_code": "// Laneway model - realistic style, medium complexity\n// Dimensions designed for 3D printing (100mm x 50mm x 25mm)\n\n$fn = 32;\n\n// Main module\nmodule laneway() {\n    // Base road surface\n    difference() {\n        translate([0, -25, 0])\n            cube([100, 50, 1]);\n        \n        // Drainage grooves\n        for(i = [10:20:90]) {\n            translate([i, -20, 0.5])\n                cube([2, 40, 0.5]);\n        }\n    }\n    \n    // Sidewalk on left\n    translate([-5, -25, 1])\n        cube([5, 50, 2]);\n    \n    // Building wall 1\n    building_wall(0, -25, 0);\n    \n    // Building wall 2 (opposite side)\n    building_wall(0, 25, 180);\n    \n    // Fire escape\n    fire_escape(70, -20);\n    \n    // Street lamps\n    street_lamp(15, -20);\n    street_lamp(65, 20);\n    \n    // Bins\n    bin(25, 0);\n    bin(75, 0);\n    \n    // Fire hydrant\n    fire_hydrant(10, 15);\n}\n\n// Building wall with windows\nmodule building_wall(x, y, rot) {\n    rotate([0, 0, rot])\n    translate([x, y, 1])\n    union() {\n        // Main wall\n        difference() {\n            cube([100, 3, 22]);\n            \n            // Windows\n            for(wx = [15:20:85]) {\n                for(wy = [5:5:15]) {\n                    translate([wx, -1, wy + 5])\n                        cube([8, 5, 6]);\n                }\n            }\n            \n            // Door\n            translate([5, -1, 0])\n                cube([8, 5, 16]);\n        }\n        \n        // Window frames\n        for(wx = [15:20:85]) {\n            for(wy = [5:5:15]) {\n                translate([wx - 0.5, 1.5, wy + 4.5])\n                    cube([9, 1, 7]);\n                translate([wx - 0.5, 1.5, wy + 5])\n                    cube([1, 1, 6]);\n                translate([wx + 7.5, 1.5, wy + 5])\n                    cube([1, 1, 6]);\n                translate([wx - 0.5, 1.5, wy + 5])\n                    cube([9, 1, 1]);\n                translate([wx - 0.5, 1.5, wy + 11])\n                    cube([9, 1, 1]);\n            }\n        }\n        \n        // Door frame\n        translate([4.5, 1.5, -0.5])\n            cube([9, 1, 17]);\n        translate([4.5, 1.5, -0.5])\n            cube([1, 1, 17]);\n        translate([12.5, 1.5, -0.5])\n            cube([1, 1, 17]);\n    }\n}\n\n// Fire escape stairs\nmodule fire_escape(x, y) {\n    translate([x, y, 3])\n    union() {\n        // Vertical supports\n        for(h = [0:8:20]) {\n            translate([0, 0, h])\n                cylinder(r=1, h=8);\n            translate([5, 0, h])\n                cylinder(r=1, h=8);\n        }\n        \n        // Stairs\n        for(s = [0:8:20]) {\n            translate([2.5, -2, s])\n                cube([9, 4, 1]);\n        }\n        \n        // Railings\n        for(s = [0:8:20]) {\n            translate([2.5, -2, s + 2])\n                cube([9, 1, 2]);\n            translate([2.5, 2, s + 2])\n                cube([9, 1, 2]);\n        }\n    }\n}\n\n// Street lamp\nmodule street_lamp(x, y) {\n    translate([x, y, 1])\n    union() {\n        // Base\n        cylinder(r=2, h=1);\n        \n        // Pole\n        translate([0, 0, 1])\n            cylinder(r=0.5, h=20);\n        \n        // Arm\n        translate([0, 0, 21])\n            rotate([0, -30, 0])\n            cylinder(r=0.5, h=8);\n        \n        // Light fixture\n        translate([6.9, 0, 21 - 4])\n            rotate([0, -30, 0])\n            difference() {\n                cylinder(r1=2, r2=1.5, h=3);\n                translate([0, 0, -0.1])\n                    cylinder(r1=1.8, r2=1.3, h=3.2);\n            }\n    }\n}\n\n// Trash bin\nmodule bin(x, y) {\n    translate([x, y, 1])\n    difference() {\n        // Main body\n        cylinder(r=2.5, h=5);\n        \n        // Hollow inside\n        translate([0, 0, 1])\n            cylinder(r=2, h=5);\n        \n        // Opening\n        translate([0, 2, 3])\n            cube([4, 1, 2]);\n    }\n}\n\n// Fire hydrant\nmodule fire_hydrant(x, y) {\n    translate([x, y, 1])\n    union() {\n        // Base\n        cylinder(r=3, h=1);\n        \n        // Main body\n        translate([0, 0, 1])\n            cylinder(r=2, h=6);\n        \n        // Top\n        translate([0, 0, 7])\n            cylinder(r=1.5, h=2);\n        \n        // Side outlets\n        translate([2, 0, 4])\n            rotate([0, 90, 0])\n            cylinder(r=0.5, h=1.5);\n        translate([0, 2, 4])\n            rotate([90, 0, 0])\n            cylinder(r=0.5, h=1.5);\n    }\n}\n\n// Generate the model\nlaneway();",
    "renders": true
  },
  {
    "building": "coachhouse",
    "openscad_code": "// Coachhouse.scad\n// Medium complexity realistic coachhouse suitable for 3D printing\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\nmain_width = 60;\nmain_depth = 40;\nmain_height = 30;\nroof_pitch = 20;\nwall_thickness = 2;\n\n// Base foundation\nmodule foundation() {\n    difference() {\n        translate([0, 0, -2])\n            cube([main_width + 6, main_depth + 6, 2], center = true);\n        translate([0, 0, -1.9])\n            cube([main_width + 2, main_depth + 2, 2], center = true);\n    }\n}\n\n// Main building walls\nmodule walls() {\n    difference() {\n        // Outer shell\n        translate([0, 0, main_height/2])\n            cube([main_width, main_depth, main_height], center = true);\n        // Hollow interior\n        translate([0, 0, main_height/2])\n            cube([main_width - wall_thickness*2, main_depth - wall_thickness*2, main_height], center = true);\n    }\n}\n\n// Roof with overhang\nmodule roof() {\n    // Main pitched roof\n    translate([0, 0, main_height + roof_pitch/2])\n        rotate([0, 90, 0])\n        linear_extrude(height = main_width + 10, center = true)\n        polygon(points = [[-main_depth/2, 0], [0, roof_pitch], [main_depth/2, 0]]);\n    \n    // Roof ridge cap\n    translate([0, 0, main_height + roof_pitch])\n        rotate([0, 90, 0])\n        cylinder(h = main_width + 10, r = 1, center = true);\n}\n\n// Large barn doors\nmodule doors() {\n    // Left door\n    translate([-main_width/4, main_depth/2 - wall_thickness/2, 0])\n        rotate([0, 90, 0])\n        linear_extrude(height = 20)\n        polygon(points = [[0, 0], [15, 0], [15, 25], [0, 25]]);\n    \n    // Right door\n    translate([main_width/4, main_depth/2 - wall_thickness/2, 0])\n        rotate([0, 90, 0])\n        linear_extrude(height = 20)\n        polygon(points = [[0, 0], [-15, 0], [-15, 25], [0, 25]]);\n}\n\n// Windows\nmodule windows() {\n    // Front windows\n    for(x = [-20, 20]) {\n        translate([x, main_depth/2 - wall_thickness, 15])\n            rotate([0, 90, 0])\n            difference() {\n                cube([8, 8, 1]);\n                translate([1, 1, -0.5])\n                    cube([6, 6, 2]);\n            }\n    }\n    \n    // Side windows\n    for(y = [-15, 15]) {\n        translate([main_width/2 - wall_thickness, y, 15])\n            difference() {\n                cube([8, 8, 1]);\n                translate([1, 1, -0.5])\n                    cube([6, 6, 2]);\n            }\n    }\n}\n\n// Ventilation louvers\nmodule louvers() {\n    for(i = [-1, 0, 1]) {\n        translate([i * 15, -main_depth/2 + wall_thickness, 25])\n            rotate([90, 0, 0])\n            cube([12, 1, 8]);\n    }\n}\n\n// Small chimney\nmodule chimney() {\n    translate([main_width/4, 0, main_height + roof_pitch + 3])\n        difference() {\n            cube([6, 6, 8], center = true);\n            translate([0, 0, 1])\n                cube([4, 4, 8], center = true);\n        }\n}\n\n// Assembly\nfoundation();\nwalls();\nroof();\ndoors();\nwindows();\nlouvers();\nchimney();",
    "renders": true
  },
  {
    "building": "carriagehouse",
    "openscad_code": "// SCALE FACTOR – entire model will be ~80 mm deep\nsf = 1;\n\nmodule main() {\n    // overall footprint 60 x 80 mm\n    w = 60 * sf;\n    d = 80 * sf;\n    h = 45 * sf;\n\n    // wall thickness for 3D printing\n    wall = 2 * sf;\n\n    // base slab\n    translate([0, 0, -wall])\n        cube([w + 4*wall, d + 4*wall, wall], center = true);\n\n    // side walls\n    difference() {\n        // outer shell\n        cube([w, d, h], center = true);\n        // hollow inside\n        translate([0, 0, wall/2])\n            cube([w - 2*wall, d - 2*wall, h], center = true);\n    }\n\n    // front gable wall\n    difference() {\n        union() {\n            // rectangular part\n            translate([0, d/2 - wall/2, 0])\n                cube([w, wall, h], center = true);\n            // triangular gable\n            translate([0, d/2 - wall/2, h/2 + h/4])\n                rotate([90, 0, 0])\n                    linear_extrude(height = wall, center = true)\n                        polygon([[0, 0], [w/2, h/2], [-w/2, h/2]]);\n        }\n        // doorway\n        translate([0, d/2 + wall/2, -h/3])\n            cube([w/3, wall*2, h*0.85], center = true);\n    }\n\n    // rear wall\n    translate([0, -d/2 + wall/2, 0])\n        cube([w, wall, h], center = true);\n\n    // roof\n    difference() {\n        union() {\n            // main pitched roof\n            translate([0, 0, h + wall])\n                rotate([45, 0, 0])\n                    cube([w + 2*wall, d + 2*wall, wall*sqrt(2)], center = true);\n            // overhang caps\n            translate([0, d/2 + wall, h + wall/2])\n                rotate([45, 0, 0])\n                    cube([w + 6*wall, wall*3, wall*sqrt(2)], center = true);\n            translate([0, -d/2 - wall, h + wall/2])\n                rotate([45, 0, 0])\n                    cube([w + 6*wall, wall*3, wall*sqrt(2)], center = true);\n        }\n        // remove inside\n        translate([0, 0, h + wall*1.5])\n            rotate([45, 0, 0])\n                cube([w, d, wall*3], center = true);\n    }\n\n    // horizontal beam across door\n    translate([0, d/2, 0])\n        cube([w*1.05, wall*1.5, wall], center = true);\n\n    // simple hinges\n    for (sign = [-1, 1])\n        translate([sign * w/6, d/2 + wall/2, -h/3])\n            rotate([90, 0, 0])\n                cylinder(h = wall*2, r = wall/2, $fn = 8, center = true);\n\n    // windows\n    module window(x, y, z) {\n        difference() {\n            translate([x, y, z])\n                cube([w/5, wall*1.5, h/4], center = true);\n            translate([x, y + wall*sign(y), z])\n                cube([w/5 - wall, wall*2, h/4 - wall], center = true);\n        }\n    }\n    window(w/3,  d/2 - wall/2, 0);\n    window(-w/3, d/2 - wall/2, 0);\n    window(0,    -d/2 + wall/2, h/4);\n}\n\nmain();",
    "renders": true
  },
  {
    "building": "gatehouse",
    "openscad_code": "// Gatehouse - Realistic style, medium complexity\n// Dimensions optimized for 3D printing (50mm wide, 40mm deep, 45mm tall)\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\nwall_thickness = 2;\ngate_width = 16;\ngate_height = 20;\nbuilding_width = 50;\nbuilding_depth = 40;\nbuilding_height = 35;\n\nmodule gatehouse() {\n    // Base foundation\n    translate([-building_width/2 - 5, -building_depth/2 - 5, 0])\n        cube([building_width + 10, building_depth + 10, 4]);\n    \n    // Main building walls\n    difference() {\n        // Outer walls\n        translate([-building_width/2, -building_depth/2, 4])\n            cube([building_width, building_depth, building_height]);\n        \n        // Interior cavity\n        translate([-building_width/2 + wall_thickness, \n                  -building_depth/2 + wall_thickness, \n                  4])\n            cube([building_width - 2*wall_thickness, \n                  building_depth - 2*wall_thickness, \n                  building_height]);\n        \n        // Main gate opening\n        translate([-gate_width/2 - wall_thickness, \n                  -building_depth/2 - 1, \n                  4])\n            cube([gate_width + 2*wall_thickness, \n                  building_depth + 2, \n                  gate_height]);\n    }\n    \n    // Gate arch\n    difference() {\n        translate([-gate_width/2 - 1, -building_depth/2 - 1, 4])\n            cube([gate_width + 2, 4, gate_height + 2]);\n        \n        // Arch shape\n        translate([0, -building_depth/2 - 0.5, 4])\n            rotate([0, 90, 0])\n            cylinder(h=gate_width + 2, r=gate_height/2 + 1);\n    }\n    \n    // Battlements on top\n    for(x = [-building_width/2 + 5 : 8 : building_width/2 - 5]) {\n        translate([x, -building_depth/2 + 2, building_height + 4])\n            cube([6, building_depth - 4, 4]);\n    }\n    \n    // Crenellations\n    for(x = [-building_width/2 + 5 : 8 : building_width/2 - 5]) {\n        translate([x + 2, -building_depth/2 + 2, building_height + 4])\n            cube([2, building_depth - 4, 4]);\n    }\n    \n    // Corner towers\n    module tower(x_pos, y_pos) {\n        // Tower base\n        translate([x_pos, y_pos, 4])\n            cylinder(h=building_height + 4, r=6);\n        \n        // Tower top\n        translate([x_pos, y_pos, building_height + 8])\n            cylinder(h=8, r=7);\n        \n        // Arrow slits\n        for(h = [8 : 8 : building_height]) {\n            translate([x_pos + 5.5, y_pos, h + 4])\n                rotate([0, 90, 0])\n                cube([0.5, 8, 2]);\n        }\n    }\n    \n    tower(-building_width/2 + 6, -building_depth/2 + 6);\n    tower(building_width/2 - 6, -building_depth/2 + 6);\n    tower(-building_width/2 + 6, building_depth/2 - 6);\n    tower(building_width/2 - 6, building_depth/2 - 6);\n    \n    // Gate doors\n    translate([-gate_width/2, -building_depth/2 - 0.5, 4])\n        cube([gate_width/2 - 1, 1, gate_height]);\n    translate([1, -building_depth/2 - 0.5, 4])\n        cube([gate_width/2 - 1, 1, gate_height]);\n    \n    // Door details\n    translate([-gate_width/2 + 1, -building_depth/2 - 0.5, gate_height/2 + 4])\n        cube([gate_width - 2, 1, gate_height/4]);\n    \n    // Flag on top\n    translate([0, 0, building_height + 16])\n        union() {\n            cylinder(h=10, r=0.5);\n            translate([0, 0, 10])\n                cube([8, 0.5, 6]);\n        }\n}\n\ngatehouse();",
    "renders": true
  },
  {
    "building": "guesthouse",
    "openscad_code": "// Realistic Guesthouse - OpenSCAD\n// Medium complexity, 3D-printable, ~70mm wide\n\n// Overall scale factor\nscale_factor = 1;\n\n// Main building dimensions\nbuilding_w = 60 * scale_factor;\nbuilding_d = 40 * scale_factor;\nbuilding_h = 25 * scale_factor;\nwall_t = 2 * scale_factor;\n\n// Roof dimensions\nroof_overhang = 5 * scale_factor;\nroof_h = 15 * scale_factor;\nroof_w = building_w + 2*roof_overhang;\nroof_d = building_d + 2*roof_overhang;\n\n// Door and windows\ndoor_w = 8 * scale_factor;\ndoor_h = 12 * scale_factor;\nwindow_w = 6 * scale_factor;\nwindow_h = 8 * scale_factor;\nwindow_offset = 3 * scale_factor;\n\n// Chimney\nchimney_w = 6 * scale_factor;\nchimney_d = 6 * scale_factor;\nchimney_h = 10 * scale_factor;\n\n// Porch\nporch_w = 20 * scale_factor;\nporch_d = 15 * scale_factor;\nporch_h = 3 * scale_factor;\n\n// Main module\nmodule guesthouse() {\n    union() {\n        // Main building structure\n        difference() {\n            // Solid building\n            cube([building_w, building_d, building_h], center=false);\n            \n            // Door on front side\n            translate([building_w/2 - door_w/2, -0.1, 0])\n                cube([door_w, wall_t, door_h], center=false);\n            \n            // Left windows\n            translate([window_offset, -0.1, building_h/2 - window_h/2])\n                cube([window_w, wall_t, window_h], center=false);\n            \n            // Right windows\n            translate([building_w - window_offset - window_w, -0.1, building_h/2 - window_h/2])\n                cube([window_w, wall_t, window_h], center=false);\n                \n            // Back windows\n            translate([window_offset, building_d - wall_t + 0.1, building_h/2 - window_h/2])\n                cube([window_w, wall_t, window_h], center=false);\n            translate([building_w - window_offset - window_w, building_d - wall_t + 0.1, building_h/2 - window_h/2])\n                cube([window_w, wall_t, window_h], center=false);\n        }\n        \n        // Roof\n        translate([-roof_overhang, -roof_overhang, building_h])\n            difference() {\n                // Main roof block\n                cube([roof_w, roof_d, roof_h]);\n                \n                // Cut to make gabled roof\n                translate([roof_w/2, -1, roof_h])\n                    rotate([0, 30, 0])\n                        cube([roof_w*2, roof_d+2, roof_h*2]);\n                translate([roof_w/2, -1, roof_h])\n                    rotate([0, -30, 0])\n                        cube([roof_w*2, roof_d+2, roof_h*2]);\n            }\n        \n        // Chimney\n        translate([building_w*0.7, building_d*0.7, building_h + roof_h*0.6])\n            cube([chimney_w, chimney_d, chimney_h]);\n        \n        // Front porch\n        translate([building_w/2 - porch_w/2, -porch_d, 0])\n            cube([porch_w, porch_d, porch_h]);\n        \n        // Porch pillars\n        pillar_d = 2 * scale_factor;\n        pillar_h = building_h - porch_h;\n        \n        translate([building_w/2 - porch_w/3, -porch_d + 1, porch_h])\n            cylinder(h=pillar_h, d=pillar_d);\n        translate([building_w/2 + porch_w/3, -porch_d + 1, porch_h])\n            cylinder(h=pillar_h, d=pillar_d);\n            \n        // Porch roof\n        translate([building_w/2 - porch_w/2 - 2, -porch_d - 2, building_h])\n            cube([porch_w + 4, 4, 3]);\n    }\n}\n\n// Render the guesthouse\nguesthouse();",
    "renders": true
  },
  {
    "building": "poolhouse",
    "openscad_code": "// Poolhouse - realistic style, medium complexity\n// Dimensions in mm, printable size ~60mm wide\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main building dimensions\nlength = 40;\nwidth = 25;\nheight = 15;\n\n// Roof overhang\noverhang = 3;\n\n// Pool dimensions\npool_l = 30;\npool_w = 15;\npool_h = 3;\n\nmodule poolhouse() {\n    // Foundation slab\n    translate([-2, -2, -1])\n        cube([length+4, width+4, 1]);\n    \n    // Main structure\n    difference() {\n        // Outer walls\n        cube([length, width, height]);\n        \n        // Remove inside for walls\n        translate([wall, wall, wall])\n            cube([length-wall*2, width-wall*2, height]);\n        \n        // Door opening\n        translate([wall, width-wall-10, 0])\n            cube([8, wall, 12]);\n    }\n    \n    // Roof\n    translate([-overhang, -overhang, height])\n        cube([length+overhang*2, width+overhang*2, 1.5]);\n    \n    // Door\n    translate([wall+0.5, width-wall-10, 0])\n        cube([7, 0.5, 12]);\n    \n    // Windows (3 along front)\n    for(i=[0:2]) {\n        translate([5+i*10, wall, 8])\n            cube([6, wall, 4]);\n        translate([5.5+i*10, wall+0.5, 8.5])\n            cube([5, 0.5, 3]);\n    }\n    \n    // Chimney\n    translate([length-8, width-8, height+1.5])\n        cube([5, 5, 8]);\n}\n\nmodule pool() {\n    // Pool basin\n    translate([length/2-pool_l/2, -pool_w-5, -pool_h-0.5])\n        cube([pool_l, pool_w, pool_h]);\n    \n    // Pool walls\n    difference() {\n        translate([length/2-pool_l/2-1, -pool_w-6, -pool_h-1])\n            cube([pool_l+2, pool_w+2, pool_h+1]);\n        translate([length/2-pool_l/2, -pool_w-5, -pool_h-0.5])\n            cube([pool_l, pool_w, pool_h+1]);\n    }\n    \n    // Pool ladder\n    for(step=[0:3]) {\n        translate([length/2+pool_l/2-2, -pool_w-3.5+step*1.5, -pool_h+step*0.7])\n            cube([2, 0.5, 0.5]);\n    }\n}\n\n// Combine all parts\nunion() {\n    poolhouse();\n    pool();\n    \n    // Small fence posts around pool\n    for(x=[-2:2]) {\n        translate([length/2+x*5, -pool_w-8, 0])\n            cylinder(h=4, r=0.5);\n    }\n}",
    "renders": true
  },
  {
    "building": "boathouse",
    "openscad_code": "// Realistic boathouse – OpenSCAD – medium complexity\n// Designed for 3D-printing (no overhangs, 1 mm wall thickness)\n\n// Overall scale – entire model ≈ 70 mm long\nSCALE = 0.7;\n\n// Wall thickness for printable walls\nWALL = 1;\n\n// Main house body\nmodule house_body() {\n    // Floor plate\n    translate([0, 0, 0])\n        cube([60, 40, 2], center = true);\n\n    // Back & side walls (single closed shell)\n    difference() {\n        // Outer shell\n        translate([0, 0, 12])\n            cube([60, 40, 24], center = true);\n\n        // Hollow inside\n        translate([0, 0, 12])\n            cube([60 - 2*WALL, 40 - 2*WALL, 24 - WALL], center = true);\n    }\n\n    // Front façade with door opening\n    difference() {\n        translate([0, -20 + WALL/2, 12])\n            cube([60, WALL, 24], center = true);\n\n        // Door – 12 mm wide, 18 mm high\n        translate([0, -20, 9])\n            cube([12, WALL + 0.1, 18], center = true);\n    }\n\n    // Side windows (two square windows each side)\n    for (y = [-10, 10]) {\n        translate([30 - WALL/2, y, 18])\n            rotate([0, 90, 0])\n            cylinder(h = WALL + 0.1, r = 5, $fn = 16);\n        translate([-30 + WALL/2, y, 18])\n            rotate([0, 90, 0])\n            cylinder(h = WALL + 0.1, r = 5, $fn = 16);\n    }\n}\n\n// Gabled roof\nmodule roof() {\n    // Ridge beam\n    translate([0, 0, 24 + 10])\n        rotate([90, 0, 0])\n        cylinder(h = 40 + 2, r = 1, center = true, $fn = 8);\n\n    // Two sloped roof halves (45°)\n    translate([0, 0, 24 + 5])\n        rotate([0, 0, 0])\n        polyhedron(\n            points = [\n                [-30, -20, 0], [30, -20, 0], [30, 20, 0], [-30, 20, 0], // base\n                [0, -20, 10], [0, 20, 10]                               // ridge\n            ],\n            faces = [\n                [0, 1, 4], [1, 2, 5, 4], [2, 3, 5], [3, 0, 4, 5], // slopes\n                [0, 3, 2, 1]                                        // bottom\n            ]\n        );\n}\n\n// Simple dock platform in front\nmodule dock() {\n    translate([0, -35, 0])\n        cube([70, 10, 1.5], center = true);\n}\n\n// Vertical pilings at dock corners\nmodule pilings() {\n    for (x = [-30, 30])\n        translate([x, -35, 7])\n            cylinder(h = 14, r = 2, $fn = 12);\n}\n\n// Door (simple plank door)\nmodule door() {\n    translate([0, -20 - WALL/2, 9])\n        cube([11, 2, 17], center = true);\n}\n\n// Main assembly\nscale([SCALE, SCALE, SCALE])\nunion() {\n    house_body();\n    roof();\n    dock();\n    pilings();\n    door();\n}",
    "renders": true
  },
  {
    "building": "treehouse",
    "openscad_code": "// Realistic Medium Complexity Treehouse\n// Designed for 3D printing - wall thickness 2mm\n// Overall size approximately 80mm tall\n\n$fn = 32;  // Smooth curves\n\n// Main assembly\nmodule treehouse() {\n    union() {\n        // Tree trunk\n        trunk();\n        \n        // Platform\n        platform();\n        \n        // House structure\n        house();\n        \n        // Ladder\n        ladder();\n        \n        // Support beams\n        supports();\n        \n        // Railing\n        railing();\n    }\n}\n\n// Tree trunk - slightly tapered cylinder\nmodule trunk() {\n    color(\"saddlebrown\") {\n        // Main trunk\n        cylinder(h = 60, d1 = 15, d2 = 12);\n        \n        // Branch stubs for realism\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120]) \n                translate([7, 0, 15 + i * 15])\n                    rotate([0, 90, 0])\n                        cylinder(h = 12, d = 6);\n        }\n    }\n}\n\n// Platform with planks\nmodule platform() {\n    color(\"peru\") {\n        // Main platform\n        difference() {\n            cylinder(h = 3, d = 35);\n            cylinder(h = 4, d = 13);  // Hole for trunk\n        }\n        \n        // Plank texture\n        for(i = [-15:3:15]) {\n            translate([i, 0, 1.5])\n                cube([2, 35, 0.5], center = true);\n        }\n    }\n    \n    // Position platform\n    translate([0, 0, 30])\n        children();\n}\n\n// House structure\nmodule house() {\n    color(\"darkgoldenrod\") {\n        // Floor\n        translate([0, 0, 33])\n            cube([25, 25, 2], center = true);\n        \n        // Walls\n        // Front wall with door\n        translate([0, 12.5, 42.5])\n            difference() {\n                cube([25, 2, 20], center = true);\n                // Door\n                translate([0, 0, -5])\n                    cube([8, 2.5, 12], center = true);\n            }\n        \n        // Back wall\n        translate([0, -12.5, 42.5])\n            cube([25, 2, 20], center = true);\n        \n        // Side walls\n        translate([12.5, 0, 42.5])\n            cube([2, 25, 20], center = true);\n        translate([-12.5, 0, 42.5])\n            cube([2, 25, 20], center = true);\n        \n        // Roof - gabled\n        translate([0, 0, 54])\n            rotate([90, 0, 0])\n                linear_extrude(height = 2)\n                    polygon(points = [[-15, 0], [15, 0], [0, 15]]);\n        translate([0, 0, 54])\n            rotate([90, 0, 0])\n                linear_extrude(height = 2)\n                    polygon(points = [[-15, 0], [15, 0], [0, -15]]);\n        \n        // Roof ridge\n        translate([0, 0, 54])\n            cube([2, 30, 2], center = true);\n    }\n}\n\n// Ladder\nmodule ladder() {\n    color(\"sienna\") {\n        // Side rails\n        translate([12, 0, 15])\n            cube([2, 2, 30], center = true);\n        translate([18, 0, 15])\n            cube([2, 2, 30], center = true);\n        \n        // Rungs\n        for(i = [0:4]) {\n            translate([15, 0, 5 + i * 5])\n                cube([8, 2, 1], center = true);\n        }\n    }\n}\n\n// Support beams\nmodule supports() {\n    color(\"saddlebrown\") {\n        // Diagonal supports\n        translate([0, 15, 31.5])\n            rotate([0, 90, 45])\n                cylinder(h = 15, d = 2);\n        translate([0, -15, 31.5])\n            rotate([0, 90, -45])\n                cylinder(h = 15, d = 2);\n        translate([15, 0, 31.5])\n            rotate([45, 90, 0])\n                cylinder(h = 15, d = 2);\n        translate([-15, 0, 31.5])\n            rotate([-45, 90, 0])\n                cylinder(h = 15, d = 2);\n    }\n}\n\n// Railing around platform\nmodule railing() {\n    color(\"peru\") {\n        // Posts\n    for(angle = [0:45:315]) {\n            translate([cos(angle) * 15, sin(angle) * 15, 34.5])\n                cylinder(h = 8, d = 2);\n        }\n        \n        // Top rail\n        difference() {\n            cylinder(h = 2, d = 33);\n            cylinder(h = 3, d = 29);\n        }\n        translate([0, 0, 38.5])\n            children();\n    }\n}\n\n// Generate the treehouse\ntreehouse();",
    "renders": true
  },
  {
    "building": "earthhouse",
    "openscad_code": "// Earth-house (bermed dwelling) – printable, medium complexity\n// Total footprint ≈ 72 mm × 48 mm, height ≈ 30 mm\n\n// Wall / berm thickness (mm) – adjust for your printer\nwall = 2.0;\n\n// Main module\nmodule earthhouse() {\n\n    // --- Foundation slab ----------------------------------------------------\n    translate([0, 0, -1])\n        cube([76, 52, wall], center = true);\n\n    // --- Lower rectangular living block ------------------------------------\n    // Outer shell\n    difference() {\n        translate([0, 0, 7])\n            cube([72, 48, 16], center = true);\n\n        // Hollow inside\n        translate([0, 0, 7])\n            cube([72 - 2*wall, 48 - 2*wall, 16 - wall], center = true);\n    }\n\n    // --- Earth berms on three sides -----------------------------------------\n    color(\"DarkOliveGreen\")\n    for (side = [-1, 1]) {\n        // Long sides\n        translate([side * (72/2 + 8), 0, 7])\n            cube([16, 48 + 16, 16], center = true);\n\n        // Short back\n        translate([0, (48/2 + 8) * side, 7])\n            cube([72 + 16, 16, 16], center = true);\n    }\n\n    // --- Green roof ---------------------------------------------------------\n    color(\"ForestGreen\")\n    difference() {\n        translate([0, 0, 15 + 4])\n            cube([78, 54, 8], center = true);\n\n        // Remove bottom to leave only shell\n        translate([0, 0, 15])\n            cube([76, 52, 8], center = true);\n    }\n\n    // --- Front door ---------------------------------------------------------\n    translate([-72/2 - 1, -6, 7])\n        cube([wall + 2, 12, 12]);\n\n    // Door hole\n    translate([-72/2 - 0.5, -5, 5])\n        cube([wall + 1, 10, 10]);\n\n    // --- Windows ------------------------------------------------------------\n    for (wx = [-20, 20]) {\n        translate([wx, -48/2 - 1, 12])\n            cube([10, wall + 2, 8]);\n\n        // Window hole\n        translate([wx, -48/2 - 0.5, 12])\n            cube([8, wall + 1, 6]);\n    }\n\n    // --- Tiny stove pipe ----------------------------------------------------\n    translate([25, 15, 15 + 8])\n        cylinder(h = 8, r = 3, $fn = 16);\n}\n\nearthhouse();",
    "renders": true
  },
  {
    "building": "stilt",
    "openscad_code": "// Realistic Stilt - Medium Complexity\n// Approx 50mm tall for 3D printing\n\n$fn = 40;  // Smooth curves\nwall = 2;  // Wall thickness for 3D printing\n\n// Main foot platform\nmodule foot_platform() {\n    // Main platform base\n    difference() {\n        // Base shape with rounded edges\n        hull() {\n            translate([-10, -5, 0]) cylinder(h=4, r=2);\n            translate([10, -5, 0]) cylinder(h=4, r=2);\n            translate([10, 5, 0]) cylinder(h=4, r=2);\n            translate([-10, 5, 0]) cylinder(h=4, r=2);\n        }\n        \n        // Grip pattern cutouts\n        for(i = [-8:4:8]) {\n            translate([i, 0, 1]) cube([2, 8, 3], center=true);\n        }\n    }\n    \n    // Side supports for strength\n    translate([-10, 0, 2]) cube([wall, 10, 6]);\n    translate([10, 0, 2]) cube([wall, 10, 6]);\n}\n\n// Pole with realistic details\nmodule pole() {\n    // Main shaft\n    cylinder(h=45, r=4);\n    \n    // Reinforcement rings\n    for(i = [0:8:40]) {\n        translate([0, 0, i]) {\n            cylinder(h=1.5, r=5);\n        }\n    }\n    \n    // Tapered bottom with rubber tip\n    translate([0, 0, 45]) {\n        cylinder(h=5, r1=4, r2=3);\n        translate([0, 0, 5]) sphere(r=3);\n    }\n}\n\n// Adjustable clamp mechanism\nmodule clamp() {\n    // Main clamp body\n    difference() {\n        translate([0, 0, 8]) {\n            hull() {\n                translate([-6, -3, 0]) cylinder(h=8, r=2);\n                translate([6, -3, 0]) cylinder(h=8, r=2);\n                translate([6, 3, 0]) cylinder(h=8, r=2);\n                translate([-6, 3, 0]) cylinder(h=8, r=2);\n            }\n        }\n        \n        // Hole for pole\n        translate([0, 0, 12]) cylinder(h=10, r=4.5);\n        \n        // Screw holes\n        translate([-4, 0, 12]) rotate([0, 90, 0]) cylinder(h=10, r=1.5);\n        translate([4, 0, 12]) rotate([0, 90, 0]) cylinder(h=10, r=1.5);\n    }\n    \n    // Clamp tightening mechanism\n    translate([0, -3, 12]) {\n        difference() {\n            cube([12, 2, 4]);\n            translate([-3, 1, 2]) rotate([0, 90, 0]) cylinder(h=6, r=1.5);\n            translate([3, 1, 2]) rotate([0, 90, 0]) cylinder(h=6, r=1.5);\n        }\n    }\n}\n\n// Straps for foot attachment\nmodule straps() {\n    // Heel strap\n    translate([0, 6, 4]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=16, r=2);\n                translate([0, 0, -1]) cylinder(h=18, r=1.5);\n            }\n        }\n    }\n    \n    // Toe strap\n    translate([0, -4, 4]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=20, r=2);\n                translate([0, 0, -1]) cylinder(h=22, r=1.5);\n            }\n        }\n    }\n}\n\n// Assemble the complete stilt\nunion() {\n    // Position foot platform\n    translate([0, 0, 0]) foot_platform();\n    \n    // Position pole through clamp\n    translate([0, 0, 12]) pole();\n    \n    // Clamp mechanism\n    clamp();\n    \n    // Foot straps\n    straps();\n}",
    "renders": true
  },
  {
    "building": "dome",
    "openscad_code": "// Realistic medium-complexity dome (≈80 mm Ø)\n// Designed for 3D-printing: 1 mm wall, no overhangs >45°\n\n// Parameters\nwall = 1.2;            // wall thickness (mm)\nbase_r = 40;           // base radius (mm)\nbase_h = 5;            // base ring height (mm)\ndome_h = 35;           // dome height (mm)\nrib_w = 3;             // exterior rib width (mm)\nn_ribs = 12;           // number of ribs\nwindow_h = 8;          // window height (mm)\nwindow_top = 28;       // window top height from base\ndoor_w = 12;           // door width (mm)\ndoor_h = 20;           // door height (mm)\npin_d = 4;             // alignment pin diameter (mm)\npin_h = 3;             // pin height (mm)\n\n// Main assembly\ndifference() {\n    union() {\n        // Solid outer shell\n        difference() {\n            translate([0,0,base_h])\n                minkowski() {\n                    sphere(d=base_r*2);\n                    sphere(d=0.1); // keep smooth\n                }\n            // Cut to dome height\n            translate([0,0,base_h+dome_h])\n                cube([base_r*4,base_r*4,base_r*2],center=true);\n        }\n        \n        // Base ring\n        cylinder(h=base_h, r1=base_r, r2=base_r-wall, center=false);\n        \n        // Exterior ribs\n        for(i=[0:n_ribs-1])\n            rotate([0,0,i*360/n_ribs])\n                rotate_extrude(angle=20,$fn=20)\n                    translate([base_r-wall,0,0])\n                        square([wall,base_h+dome_h]);\n    }\n    \n    // Hollow interior\n    translate([0,0,base_h])\n        sphere(d=(base_r-wall)*2);\n    \n    // Windows (4 symmetric)\n    for(a=[45,135,225,315])\n        rotate([0,0,a])\n            translate([base_r-wall/2,0,window_top-window_h/2])\n                rotate([90,0,0])\n                    cylinder(h=wall+0.1, r=window_h/2, $fn=16);\n    \n    // Door\n    translate([base_r-wall/2,0,base_h+door_h/2])\n        rotate([0,90,0])\n            cube([door_h,door_w,wall+0.1],center=true);\n}\n\n// Alignment pins for multi-part print\nmodule pin() {\n    cylinder(h=pin_h, d=pin_d, $fn=12);\n}\n\ntranslate([base_r*0.7,0,0])\n    pin();\nmirror([1,0,0])\n    translate([base_r*0.7,0,0])\n        pin();",
    "renders": true
  },
  {
    "building": "igloo",
    "openscad_code": "// Realistic medium-complexity 3D-printable igloo\n// Overall outer diameter ≈ 80 mm, printable without supports\n\n// Parameters\n$fn = 24;                // Segmentation for smooth curves\nwall = 2;                // Wall thickness (mm)\nblock_h = 4;             // Height of one snow block layer\nblock_arc = 360/16;      // Arc angle per block in plan view\nlevels = 12;             // Number of block courses to top\ndoor_w = 18;             // Door clear width\ndoor_h = 22;             // Door clear height\nfloor_t = 2;             // Floor thickness\nbase_r = 40;             // Outer base radius\n\n// Utility module for one snow block\nmodule snow_block(w, h, r_inner, r_outer, ang) {\n    difference() {\n        // Full block\n        rotate([0, 0, ang])\n            translate([r_inner + (r_outer - r_inner)/2, 0, h/2])\n                cube([r_outer - r_inner, w, h], center=true);\n        // Taper top for realistic joints\n        translate([0, 0, h - 0.6])\n            sphere(r = r_outer + 2, $fn=32);\n    }\n}\n\n// Main igloo shell\nmodule igloo_shell() {\n    union() {\n        // Base floor\n        cylinder(h = floor_t, r = base_r, center=false);\n\n        // Block layers\n        for (i = [0 : levels-1]) {\n            angle_span = 180 * i / (levels-1);\n            h_current = i * block_h;\n            current_r = base_r * sin(angle_span);\n            z_current = base_r * cos(angle_span) - base_r + floor_t;\n\n            // Skip blocks for door opening\n            for (j = [0 : 15]) {\n                if (i < 3 || j < 1 || j > 7) {\n                    snow_block(\n                        block_arc * 0.9 * current_r * PI / 180,\n                        block_h,\n                        current_r - wall,\n                        current_r,\n                        j * block_arc\n                    );\n                }\n            }\n        }\n    }\n}\n\n// Entrance tunnel\nmodule entrance_tunnel() {\n    rotate([0, 90, 0])\n        translate([0, 0, base_r - wall])\n            difference() {\n                // Tunnel body\n                hull() {\n                    cylinder(h = door_h + wall, r = door_w/2 + wall, center=true);\n                    translate([door_h + wall*2, 0, 0])\n                        sphere(r = door_w/2 + wall, center=true);\n                }\n                // Hollow out\n                hull() {\n                    cylinder(h = door_h, r = door_w/2, center=true);\n                    translate([door_h + wall, 0, 0])\n                        sphere(r = door_w/2, center=true);\n                }\n            }\n}\n\n// Assemble the igloo\nunion() {\n    igloo_shell();\n    entrance_tunnel();\n}\n\n// Optional: tiny vent hole on top\ntranslate([0, 0, base_r + floor_t - wall])\n    cylinder(h = wall*2, r = 1.5, $fn=8);",
    "renders": true
  },
  {
    "building": "yurt",
    "openscad_code": "// Realistic medium-complexity yurt for 3D printing\n// Approx 70 mm diameter, 40 mm height\n\n$fn = 36;\n\n// Overall scale factor\nscale_factor = 0.7;\n\n// Wall thickness for 3D printing\nwall_th = 1.2;\n\nmodule yurt_base() {\n    // Circular base platform\n    cylinder(h = 2, r = 50 * scale_factor, center = true);\n}\n\nmodule lattice_wall() {\n    // Khana lattice segments\n    for (i = [0 : 15]) {\n        rotate([0, 0, i * 22.5]) \n        translate([0, 45 * scale_factor, 10 * scale_factor])\n        difference() {\n            cube([wall_th, 3, 20 * scale_factor], center = true);\n            // Lattice holes\n            for (j = [-2 : 2]) {\n                translate([0, 0, j * 5 * scale_factor])\n                cube([wall_th + 0.1, 3.5, 2], center = true);\n            }\n        }\n    }\n}\n\nmodule door_frame() {\n    // Wooden door frame\n    translate([0, 48 * scale_factor, 12 * scale_factor])\n    rotate([0, 0, 0])\n    union() {\n        // Left post\n        translate([-6 * scale_factor, 0, 0])\n        cube([wall_th * 2, 3, 25 * scale_factor], center = true);\n        // Right post\n        translate([6 * scale_factor, 0, 0])\n        cube([wall_th * 2, 3, 25 * scale_factor], center = true);\n        // Top beam\n        translate([0, 0, 12.5 * scale_factor])\n        cube([12 * scale_factor, 3, wall_th * 2], center = true);\n    }\n}\n\nmodule roof_ring() {\n    // Tono roof ring\n    translate([0, 0, 38 * scale_factor])\n    cylinder(h = 4, r1 = 12 * scale_factor, r2 = 11 * scale_factor, center = true);\n}\n\nmodule roof_poles() {\n    // Uni roof poles\n    for (i = [0 : 35]) {\n        angle = i * 10;\n        radius = 45 * scale_factor;\n        rotate([0, 0, angle]) \n        translate([radius * 0.9, 0, 25 * scale_factor])\n        rotate([60, 0, 0])\n        cylinder(h = 30 * scale_factor, r = 0.8, center = true);\n    }\n}\n\nmodule roof_cover() {\n    // Felt roof cover\n    translate([0, 0, 25 * scale_factor])\n    cylinder(h1 = 0, h2 = 15 * scale_factor, r1 = 47 * scale_factor, r2 = 10 * scale_factor, center = true);\n}\n\nmodule decorative_band() {\n    // Orange band around roof edge\n    color(\"orange\")\n    translate([0, 0, 32 * scale_factor])\n    cylinder(h = 2, r1 = 47 * scale_factor, r2 = 45 * scale_factor, center = true);\n}\n\n// Assemble yurt\nunion() {\n    yurt_base();\n    lattice_wall();\n    door_frame();\n    roof_cover();\n    roof_ring();\n    roof_poles();\n    decorative_band();\n}",
    "renders": true
  },
  {
    "building": "tent",
    "openscad_code": "// Realistic 3D-printable camping tent\n// Overall footprint ~70 mm base, 50 mm height\n\n// Parameters -------------------------------------------------\nwall = 1.2;          // 3D-print friendly wall thickness\nbase_w = 60;         // ground footprint\nbase_d = 45;\nridge_h = 45;        // top of ridge pole\ndoor_h = 25;         // door arch height\ndoor_w = 20;\n\n// Colors (for preview)\ncolor_tent = \"Olive\";\ncolor_pole = \"Silver\";\ncolor_peg = \"DimGray\";\n\n// Modules ----------------------------------------------------\nmodule tent_fabric() {\n    color(color_tent)\n    difference() {\n        // Main shell\n        union() {\n            // Front roof panel\n            translate([0, 0, wall]) \n            polyhedron(\n                points = [\n                    [-base_w/2, -base_d/2, 0], [base_w/2, -base_d/2, 0],   // rear base\n                    [base_w/2,  base_d/2, 0], [-base_w/2,  base_d/2, 0],   // front base\n                    [0,  base_d/2, ridge_h], [0, -base_d/2, ridge_h]      // ridge\n                ],\n                faces = [\n                    [0,1,4,5], [1,2,4], [2,3,5,4], [3,0,5],\n                    [0,1,2,3], [5,4,2,3]  // bottom and top triangles\n                ]\n            );\n            // Side panels thickness\n            mirror([1,0,0])\n            translate([0, 0, wall])\n            polyhedron(\n                points = [\n                    [0, -base_d/2, 0], [0, base_d/2, 0],\n                    [0, base_d/2, ridge_h], [0, -base_d/2, ridge_h],\n                    [base_w/2, -base_d/2, 0], [base_w/2, base_d/2, 0],\n                    [base_w/2, base_d/2, ridge_h], [base_w/2, -base_d/2, ridge_h]\n                ],\n                faces = [\n                    [0,1,2,3], [4,5,6,7], [0,4,5,1], [1,5,6,2], [2,6,7,3], [3,7,4,0]\n                ]\n            );\n            // Ground sheet\n            translate([0,0,-wall])\n                cube([base_w, base_d, wall], center=true);\n        }\n\n        // Door arch\n        translate([0, base_d/2, 0])\n        rotate([90,0,0])\n        linear_extrude(height = door_w+wall, center=true, convexity=4)\n        difference() {\n            offset(r=wall/2)\n            square([door_w, door_h], center=true);\n            offset(r=-wall/2)\n            square([door_w, door_h], center=true);\n        }\n    }\n}\n\nmodule poles() {\n    color(color_pole)\n    union() {\n        // Ridge pole\n        translate([0, 0, ridge_h-wall])\n            rotate([90,0,0])\n            cylinder(h=base_d+2*wall, r=1, center=true);\n\n        // Front arch pole\n        translate([0, base_d/2, door_h/2])\n            rotate([0,90,0])\n            rotate_extrude(angle=180)\n            translate([door_h/2,0,0])\n            difference() {\n                circle(r=1);\n                translate([0,1.2,0]) circle(r=1);\n            }\n\n        // Rear arch pole\n        translate([0, -base_d/2, ridge_h/2])\n            rotate([0,90,0])\n            rotate_extrude(angle=180)\n            translate([ridge_h/2,0,0])\n            difference() {\n                circle(r=1);\n                translate([0,1.2,0]) circle(r=1);\n            }\n    }\n}\n\nmodule guy_ropes() {\n    color(\"Beige\")\n    for(y=[-1,1]) {\n        hull() {\n            translate([base_w/2*0.8, y*base_d/2, 0])\n                cylinder(h=wall, r=0.5);\n            translate([base_w/2*0.8, y*base_d*0.8, ridge_h*0.7])\n                sphere(r=0.5);\n        }\n        hull() {\n            translate([-base_w/2*0.8, y*base_d/2, 0])\n                cylinder(h=wall, r=0.5);\n            translate([-base_w/2*0.8, y*base_d*0.8, ridge_h*0.7])\n                sphere(r=0.5);\n        }\n    }\n}\n\nmodule tent_pegs() {\n    color(color_peg)\n    for(x=[-1,1])\n        for(y=[-1,1])\n            translate([x*base_w/2*0.9, y*base_d/2*0.9, wall/2])\n                rotate([90,0,45])\n                cylinder(h=5, r1=1.5, r2=0.5);\n}\n\n// Assembly ---------------------------------------------------\nunion() {\n    tent_fabric();\n    poles();\n    guy_ropes();\n    tent_pegs();\n}",
    "renders": true
  },
  {
    "building": "hut",
    "openscad_code": "// Realistic hut for 3D printing\n// Dimensions: ~70x60x55 mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main module\nmodule hut() {\n    difference() {\n        // Base structure\n        base();\n        \n        // Door opening\n        translate([0, 0, 0])\n            cube([12, wall+1, 20], center=true);\n        \n        // Window openings\n        translate([-15, 0, 25])\n            rotate([0, 90, 0])\n                cylinder(h=wall+1, d=8, center=true);\n        \n        translate([15, 0, 25])\n            rotate([0, 90, 0])\n                cylinder(h=wall+1, d=8, center=true);\n    }\n    \n    // Roof\n    roof();\n    \n    // Chimney\n    chimney();\n    \n    // Door\n    door();\n    \n    // Windows\n    windows();\n}\n\n// Base walls and floor\nmodule base() {\n    // Floor\n    translate([0, 0, 1])\n        cube([50, 40, wall], center=true);\n    \n    // Front wall\n    translate([0, 20, 12])\n        cube([50, wall, 24], center=true);\n    \n    // Back wall\n    translate([0, -20, 12])\n        cube([50, wall, 24], center=true);\n    \n    // Left wall\n    translate([-25, 0, 12])\n        cube([wall, 40, 24], center=true);\n    \n    // Right wall\n    translate([25, 0, 12])\n        cube([wall, 40, 24], center=true);\n}\n\n// Roof structure\nmodule roof() {\n    // Main roof\n    translate([0, 0, 24 + wall/2])\n        rotate([0, 0, 0])\n            difference() {\n                union() {\n                    // Front slope\n                    translate([0, 20, 15])\n                        rotate([90, 0, 0])\n                            cylinder(h=50, d1=0, d2=30, center=true);\n                    \n                    // Back slope\n                    translate([0, -20, 15])\n                        rotate([90, 0, 0])\n                            cylinder(h=50, d1=30, d2=0, center=true);\n                    \n                    // Ridge beam\n                    translate([0, 0, 39])\n                        cube([52, 40, wall], center=true);\n                }\n                \n                // Remove overhang\n                translate([0, 0, 39])\n                    cube([54, 44, wall+2], center=true);\n            }\n    \n    // Roof overhang supports\n    for(x = [-20, 0, 20]) {\n        translate([x, 22, 24])\n            cube([wall, 6, wall], center=true);\n        translate([x, -22, 24])\n            cube([wall, 6, wall], center=true);\n    }\n}\n\n// Chimney\nmodule chimney() {\n    translate([18, 15, 39])\n        cube([8, 8, 15], center=true);\n    \n    // Chimney top\n    translate([18, 15, 47])\n        cube([10, 10, wall], center=true);\n}\n\n// Door\nmodule door() {\n    translate([0, 20 + wall/2, 10])\n        cube([10, wall, 20], center=true);\n    \n    // Door handle\n    translate([3, 20 + wall, 10])\n        cylinder(h=wall+1, d=2, center=true);\n}\n\n// Windows\nmodule windows() {\n    // Left window\n    translate([-25, 0, 25])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=wall+1, d=12, center=true);\n                cylinder(h=wall+2, d=8, center=true);\n            }\n    \n    // Right window\n    translate([25, 0, 25])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=wall+1, d=12, center=true);\n                cylinder(h=wall+2, d=8, center=true);\n            }\n    \n    // Window panes (cross pattern)\n    for(side = [-1, 1]) {\n        translate([side * 25, 0, 25])\n            rotate([0, 90, 0])\n                for(angle = [0, 90]) {\n                    rotate([angle, 0, 0])\n                        cube([wall+1, 1, 12], center=true);\n                }\n    }\n}\n\n// Generate the hut\nhut();",
    "renders": true
  },
  {
    "building": "shack",
    "openscad_code": "// Realistic 3D-printable shack – medium complexity\n// External dimensions ~80 mm long × 60 mm deep × 70 mm tall\n// Scale uniformly in slicer if a different size is desired\n\n$fn = 24;          // Global circle quality\n\n// Parameters\nwall_t   = 2.0;    // 3D-printable wall thickness\nroof_o   = 1.5;    // Roof plank overlap\ndoor_w   = 14;     // Door width\ndoor_h   = 24;     // Door height\nwin_w    = 10;     // Window width\nwin_h    = 10;     // Window height\npost_d   = 3;      // Porch-post diameter\nplank_w  = 4;      // Roof plank width\nplank_t  = 1.2;    // Roof plank thickness\n\n// Main assembly\nmodule shack() {\n    union() {\n        // Base floor\n        translate([0, 0, wall_t/2])\n            cube([60, 40, wall_t], center = true);\n\n        // Walls (hollow shell)\n        difference() {\n            // Outer shell\n            translate([0, 0, 25])\n                cube([60, 40, 50], center = true);\n\n            // Inner void\n            translate([0, 0, 25])\n                cube([60 - 2*wall_t, 40 - 2*wall_t, 50 - wall_t], center = true);\n        }\n\n        // Gabled roof shell\n        difference() {\n            union() {\n                // Two sloped roof halves\n                translate([0, -20, 50])\n                    rotate([0, 45, 0])\n                        cube([60, 60*sqrt(2), wall_t], center = true);\n                translate([0,  20, 50])\n                    rotate([0, -45, 0])\n                        cube([60, 60*sqrt(2), wall_t], center = true);\n            }\n            // Remove inner roof volume\n            offset = 2;\n            translate([0, 0, 50])\n                cube([60 + offset, 40 + offset, 40], center = true);\n        }\n\n        // Roof planks\n        for (x = [-27:plank_w:27]) {\n            translate([x, 0, 50 + roof_o]) {\n                cube([plank_w, 45, plank_t], center = true);\n            }\n        }\n\n        // Door opening and door\n        translate([0, 20 - wall_t/2, 12])\n            cube([door_w + wall_t, wall_t, door_h], center = true);\n\n        // Window openings (front and right)\n        translate([20, 20 - wall_t/2, 30])\n            cube([win_w + wall_t, wall_t, win_h], center = true);\n        translate([30 - wall_t/2, 0, 30])\n            cube([wall_t, win_w + wall_t, win_h], center = true);\n\n        // Simple porch\n        // Porch floor\n        translate([0, 30 + wall_t/2, wall_t/2])\n            cube([70, 20, wall_t], center = true);\n\n        // Porch posts\n        module post(x) {\n            translate([x, 40, 15])\n                cylinder(d = post_d, h = 30, center = true);\n        }\n        post(-25);\n        post(25);\n\n        // Porch roof beam\n        translate([0, 40, 30])\n            cube([70 + wall_t, wall_t, wall_t], center = true);\n\n        // Chimney\n        difference() {\n            translate([20, -10, 60])\n                cube([8, 8, 20], center = true);\n            translate([20, -10, 60])\n                cube([5, 5, 20], center = true);\n        }\n    }\n}\n\n// Render\nshack();",
    "renders": true
  },
  {
    "building": "shed",
    "openscad_code": "// Medium-complexity realistic 3D-printable shed model\n// Overall footprint: 60 mm x 40 mm, height: 45 mm\n\n$fn = 36;                // Smooth curves\nwall = 1.2;              // 3D-print-friendly wall thickness\n\nmodule shed() {\n    // Base frame\n    color(\"tan\") base();\n    color(\"brown\") floor();\n    \n    // Walls\n    color(\"beige\") walls();\n    \n    // Roof with dual slopes\n    color(\"darkolivegreen\") roof();\n    \n    // Door & windows\n    color(\"saddlebrown\") door();\n    color(\"skyblue\") windows();\n    \n    // Tiny chimney\n    color(\"firebrick\") chimney();\n}\n\nmodule base() {\n    // Concrete slab\n    translate([-1, -1, -1]) cube([62, 42, 2]);\n}\n\nmodule floor() {\n    // Wooden floor planks (simulated by thin ribs)\n    for (i = [0 : 5 : 55]) {\n        translate([i + 2.4, 2.4, 1])\n            cube([2, 35.2, 0.4]);\n    }\n}\n\nmodule walls() {\n    // Back wall\n    translate([wall, wall, 1.4])\n        cube([60 - 2*wall, wall, 26]);\n    \n    // Left wall\n    translate([wall, wall, 1.4])\n        cube([wall, 40 - 2*wall, 26]);\n    \n    // Right wall (with window hole)\n    translate([60 - 2*wall, wall, 1.4])\n        cube([wall, 40 - 2*wall, 26]);\n    \n    // Front wall (with door and window holes)\n    difference() {\n        translate([wall, 40 - 2*wall, 1.4])\n            cube([60 - 2*wall, wall, 26]);\n        \n        // Door opening\n        translate([24, 40 - 2*wall - 0.1, 1.4])\n            cube([12, wall + 0.2, 20]);\n        \n        // Window above door\n        translate([26, 40 - 2*wall - 0.1, 22.4])\n            cube([8, wall + 0.2, 4]);\n    }\n}\n\nmodule roof() {\n    // Ridge beam\n    translate([30, 20, 27.4])\n        rotate([0, 90, 0])\n            cylinder(h = 40, r = 1.2);\n    \n    // Left slope\n    translate([30, 20, 27.4])\n        rotate([0, 0, -30])\n            translate([-32, -22, 0])\n                cube([64, 44, wall]);\n    \n    // Right slope\n    translate([30, 20, 27.4])\n        rotate([0, 0, 30])\n            translate([-32, -22, 0])\n                cube([64, 44, wall]);\n}\n\nmodule door() {\n    translate([24 + wall, 40 - 2*wall - 0.1, 1.4])\n        cube([12 - 2*wall, wall + 0.2, 20 - wall]);\n    \n    // Door panels\n    difference() {\n        translate([25.2, 40 - 2*wall - 0.05, 2.6])\n            cube([9.6, wall, 17.8]);\n        \n        // Recessed panel lines\n        translate([29.4, 40 - 2*wall - 0.04, 11.5])\n            cube([1.2, wall + 0.1, 8]);\n        \n        translate([29.4, 40 - 2*wall - 0.04, 19])\n            cube([1.2, wall + 0.1, 0.8]);\n        \n        translate([29.4, 40 - 2*wall - 0.04, 4)]\n            cube([1.2, wall + 0.1, 0.8]);\n    }\n    \n    // Door knob\n    translate([33, 40 - 2*wall - 0.5, 11.5])\n        sphere(r = 0.8);\n}\n\nmodule windows() {\n    // Front window\n    translate([26 + wall, 40 - 2*wall - 0.05, 22.4])\n        cube([8 - 2*wall, wall + 0.1, 4 - wall]);\n    \n    // Side window\n    difference() {\n        translate([60 - 2*wall - 0.1, 20, 14])\n            cube([wall + 0.2, 12, 8]);\n        \n        // Mullion\n        translate([60 - 2*wall - 0.05, 20 + 6 - 0.6, 14 + 4 - 0.6])\n            cube([wall + 0.1, 1.2, 8 - 1.2]);\n    }\n}\n\nmodule chimney() {\n    translate([48, 10, 27.4])\n        cylinder(h = 12, r = 3);\n    \n    // Chimney cap\n    translate([48, 10, 39.4])\n        cylinder(h = 1.2, r1 = 3.8, r2 = 3.8);\n    \n    // Flue\n    translate([48, 10, 40.6])\n        cylinder(h = 2, r = 1.2);\n}\n\nshed();",
    "renders": true
  },
  {
    "building": "barn",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Barn\n// All dimensions in mm, optimized for FDM printing\n\nwall_th = 1.5;\nroof_th = 1.2;\npost_d = 2;\n\nmodule barn_base() {\n    difference() {\n        // Main barn block\n        cube([50, 30, 28], center = true);\n        // Hollow interior\n        translate([0, 0, -0.75])\n            cube([50 - 2*wall_th, 30 - 2*wall_th, 28 - wall_th], center = true);\n    }\n}\n\nmodule roof() {\n    // Main roof block\n    difference() {\n        // Roof prism\n        translate([0, 0, 28/2 + 15])\n            rotate([0, 45, 0])\n            cube([50 + 2*roof_th, 30 + 2*roof_th, 20], center = true);\n        // Remove overlap with barn\n        translate([0, 0, -2])\n            cube([60, 40, 30], center = true);\n    }\n    // Second roof prism for opposite side\n    difference() {\n        translate([0, 0, 28/2 + 15])\n            rotate([0, -45, 0])\n            cube([50 + 2*roof_th, 30 + 2*roof_th, 20], center = true);\n        translate([0, 0, -2])\n            cube([60, 40, 30], center = true);\n    }\n}\n\nmodule doors() {\n    // Large sliding door\n    difference() {\n        translate([0, 30/2 - wall_th/2, -28/2 + 10])\n            cube([20, wall_th, 20], center = true);\n        translate([0, 30/2 + 0.5, -28/2 + 10])\n            cube([16, wall_th + 1, 16], center = true);\n    }\n    // Small human door\n    difference() {\n        translate([-20, 30/2 - wall_th/2, -28/2 + 7])\n            cube([8, wall_th, 14], center = true);\n        translate([-20, 30/2 + 0.5, -28/2 + 7])\n            cube([6, wall_th + 1, 12], center = true);\n    }\n}\n\nmodule windows() {\n    // Two small windows on sides\n    for (x = [-15, 15]) {\n        difference() {\n            translate([x, 0, 0])\n                cube([wall_th, 30, 10], center = true);\n            translate([x, 0, 0])\n                cube([wall_th + 1, 10, 6], center = true);\n        }\n    }\n}\n\nmodule loft_door() {\n    // Small loft door under peak\n    difference() {\n        translate([0, 30/2 - wall_th/2, 5])\n            cube([8, wall_th, 6], center = true);\n        translate([0, 30/2 + 0.5, 5])\n            cube([6, wall_th + 1, 4], center = true);\n    }\n}\n\nmodule foundation() {\n    // Simple concrete base\n    translate([0, 0, -28/2 - 1])\n        cube([52, 32, 2], center = true);\n}\n\nmodule posts() {\n    // Corner posts for realism\n    for (x = [-25 + post_d/2, 25 - post_d/2])\n        for (y = [-15 + post_d/2, 15 - post_d/2])\n            translate([x, y, 0])\n                cylinder(h = 28, d = post_d, center = true);\n}\n\nmodule vents() {\n    // Ridge vents along roof\n    for (i = [-20:10:20]) {\n        translate([i, 0, 28/2 + 15 + 5])\n            cube([6, 2, 3], center = true);\n    }\n}\n\nmodule silo() {\n    // Simple silo on side\n    translate([35, 0, 0])\n        difference() {\n            cylinder(h = 40, d = 12, center = true);\n            translate([0, 0, 20 - wall_th])\n                cylinder(h = 40, d = 12 - 2*wall_th, center = true);\n        }\n    // Silo roof\n    translate([35, 0, 20 + 6])\n        sphere(d = 12 + wall_th);\n}\n\nunion() {\n    foundation();\n    posts();\n    barn_base();\n    roof();\n    doors();\n    windows();\n    loft_door();\n    vents();\n    silo();\n}",
    "renders": true
  },
  {
    "building": "silo",
    "openscad_code": "// Realistic grain silo for 3D printing\n// Overall height ~90 mm, diameter ~45 mm\n\nwall_thickness = 2.0;\n$fn = 32;\n\nmodule silo_body() {\n    // Main cylindrical body\n    difference() {\n        cylinder(h = 70, d = 45, center = false);\n        translate([0, 0, wall_thickness])\n            cylinder(h = 70 - wall_thickness, d = 45 - 2*wall_thickness, center = false);\n    }\n}\n\nmodule conical_roof() {\n    // Conical roof with slight overhang\n    difference() {\n        cylinder(h1 = 15, h2 = 0, r1 = 23, r2 = 2.5, center = false);\n        translate([0, 0, wall_thickness])\n            cylinder(h1 = 15 - wall_thickness, h2 = 0, r1 = 23 - wall_thickness, r2 = 2.5, center = false);\n    }\n}\n\nmodule roof_cap() {\n    // Small sphere cap on top\n    sphere(d = 5);\n}\n\nmodule ladder() {\n    // Vertical ladder on one side\n    // Rails\n    translate([23, -2, 35]) rotate([0, 90, 0]) cylinder(h = 70, d = 2);\n    translate([23, 2, 35]) rotate([0, 90, 0]) cylinder(h = 70, d = 2);\n\n    // Rungs every 8 mm\n    for (z = [0:8:70-8]) {\n        translate([23, -2, z]) rotate([90, 0, 90]) cylinder(h = 4, d = 1.5);\n    }\n}\n\nmodule access_hatch() {\n    // Small rectangular access hatch\n    difference() {\n        translate([-5, -23, 15]) cube([10, 2, 8]);\n        translate([-4.5, -23.5, 16]) cube([9, 2.5, 6]);\n    }\n}\n\nmodule support_legs() {\n    // Four support legs for stability\n    for (a = [0, 90, 180, 270]) {\n        rotate([0, 0, a]) {\n            translate([15, 0, -10]) rotate([90, 0, 0]) cylinder(h = 10, d = 6);\n        }\n    }\n}\n\nmodule hopper_bottom() {\n    // Conical hopper bottom for grain flow\n    difference() {\n        cylinder(h1 = 0, h2 = 15, r1 = 22.5, r2 = 5, center = false);\n        translate([0, 0, wall_thickness])\n            cylinder(h1 = 0, h2 = 15 - wall_thickness, r1 = 22.5 - wall_thickness, r2 = 5 + wall_thickness, center = false);\n    }\n}\n\nmodule outlet_pipe() {\n    // Small outlet pipe at bottom\n    difference() {\n        translate([0, 0, -10]) rotate([90, 0, 0]) cylinder(h = 8, d = 8);\n        translate([0, 0, -10]) rotate([90, 0, 0]) cylinder(h = 8, d = 4);\n    }\n}\n\nmodule exterior_rings() {\n    // Reinforcement rings every 20 mm\n    for (z = [20, 40, 60]) {\n        translate([0, 0, z]) difference() {\n            cylinder(h = 2, d = 47);\n            cylinder(h = 2, d = 45);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main silo\n    union() {\n        silo_body();\n        translate([0, 0, 70]) conical_roof();\n        translate([0, 0, 85]) roof_cap();\n    }\n    \n    // Accessories\n    ladder();\n    access_hatch();\n    exterior_rings();\n    \n    // Base\n    translate([0, 0, -15]) hopper_bottom();\n    outlet_pipe();\n    translate([0, 0, -15]) support_legs();\n}",
    "renders": true
  },
  {
    "building": "bunker",
    "openscad_code": "// Realistic Medium-Complexity Bunker\n// Overall dimensions ~80 x 60 x 35 mm, printable without supports\n\n$fn = 36;\n\n// Main body shell\nmodule bunker_body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, 5]) cube([70, 50, 20], center=true);\n            translate([0, 0, 15]) cube([60, 40, 10], center=true);\n        }\n        \n        // Hollow interior\n        hull() {\n            translate([0, 0, 6]) cube([66, 46, 18], center=true);\n            translate([0, 0, 15]) cube([56, 36, 8], center=true);\n        }\n    }\n}\n\n// Entry hatch\nmodule hatch() {\n    difference() {\n        // Hatch base\n        translate([0, 25, 15]) cube([25, 8, 3], center=true);\n        \n        // Hatch opening\n        translate([0, 25, 16]) cube([20, 4, 2], center=true);\n        \n        // Lifting handle hole\n        translate([10, 25, 17]) cylinder(h=3, d=3, center=true);\n    }\n    \n    // Handle\n    translate([10, 25, 19]) rotate([90, 0, 0]) cylinder(h=8, d=2, center=true);\n}\n\n// Periscope tower\nmodule periscope() {\n    translate([-25, 0, 20]) {\n        difference() {\n            cylinder(h=12, d1=10, d2=6);\n            cylinder(h=12, d1=7, d2=4);\n        }\n        \n        // Periscope lenses\n        translate([0, 0, 12]) cylinder(h=2, d=8);\n        translate([0, 0, 14]) cylinder(h=1, d=6);\n    }\n}\n\n// Ventilation pipes\nmodule vents() {\n    for(x = [-20, 20]) {\n        translate([x, -20, 18]) {\n            rotate([90, 0, 0]) cylinder(h=15, d=4);\n            translate([0, 0, 15]) rotate([90, 0, 0]) cylinder(h=3, d=5);\n        }\n    }\n}\n\n// Reinforcement beams\nmodule reinforcements() {\n    for(i = [-30, -10, 10, 30]) {\n        translate([i, 0, 5]) cube([4, 50, 2], center=true);\n    }\n    \n    for(i = [-20, 0, 20]) {\n        translate([0, i, 5]) cube([70, 4, 2], center=true);\n    }\n}\n\n// Entry stairs\nmodule stairs() {\n    for(i = [0:2:6]) {\n        translate([0, 25 + i, 15 - i]) cube([25, 2, 2], center=true);\n    }\n}\n\n// Gun slit\nmodule gun_slit() {\n    translate([35, 0, 10]) {\n        difference() {\n            cube([5, 20, 3], center=true);\n            cube([3, 18, 2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    bunker_body();\n    hatch();\n    periscope();\n    vents();\n    reinforcements();\n    stairs();\n    gun_slit();\n}\n\n// Print base\ntranslate([0, 0, -1]) cube([80, 60, 1], center=true);",
    "renders": true
  },
  {
    "building": "bunkhouse",
    "openscad_code": "// Realistic medium-detail bunkhouse for 3D printing\n// Approx. 60 x 40 x 35 mm\n\n// Overall dimensions\nwall_th = 1.2;\nfoundation_h = 2;\nwall_h = 18;\nroof_h = 10;\nlength = 60;\nwidth = 40;\n\nmodule foundation() {\n    // Concrete slab\n    difference() {\n        translate([0, 0, foundation_h/2])\n            cube([length + 2, width + 2, foundation_h], center = true);\n        // Drain channel\n        translate([length/2 - 3, 0, -0.5])\n            cube([6, width - 4, foundation_h + 1]);\n    }\n}\n\nmodule walls() {\n    // Front & back\n    for (x = [-1, 1])\n        translate([x * (length/2 - wall_th/2), 0, wall_h/2 + foundation_h])\n            cube([wall_th, width - wall_th*2, wall_h], center = true);\n    \n    // Left & right\n    for (y = [-1, 1])\n        translate([0, y * (width/2 - wall_th/2), wall_h/2 + foundation_h])\n            cube([length, wall_th, wall_h], center = true);\n}\n\nmodule door() {\n    // Door frame\n    frame_w = 10;\n    frame_h = 14;\n    door_w = 8;\n    door_h = 12;\n    \n    difference() {\n        // Cutout\n        translate([length/2 - wall_th - 0.1, 0, foundation_h + frame_h/2])\n            cube([wall_th + 0.2, frame_w, frame_h], center = true);\n        \n        // Door panel\n        translate([length/2 - wall_th/2, 0, foundation_h + door_h/2 + 1])\n            cube([wall_th, door_w, door_h], center = true);\n    }\n    \n    // Handle\n    translate([length/2 - wall_th/2, door_w/2 - 1, foundation_h + door_h/2 + 1])\n        sphere(d = 1.2, $fn = 8);\n}\n\nmodule windows() {\n    // Two windows on each side\n    win_w = 8;\n    win_h = 6;\n    \n    for (i = [0, 1]) {\n        // Front windows\n        translate([length/2 - wall_th - 0.1, \n                   -width/4 + i*width/2, \n                   foundation_h + wall_h*0.6])\n            cube([wall_th + 0.2, win_w, win_h], center = true);\n            \n        // Side windows\n        translate([length/4 - i*length/2, \n                   width/2 - wall_th - 0.1, \n                   foundation_h + wall_h*0.6])\n            cube([win_w, wall_th + 0.2, win_h], center = true);\n    }\n}\n\nmodule roof() {\n    // Gabled roof\n    angle = 30;\n    overhang = 3;\n    \n    // Main roof sections\n    rotate([0, angle, 0])\n        translate([0, 0, wall_h + foundation_h + roof_h/2])\n            cube([length + overhang*2, width + overhang*2, wall_th], center = true);\n    \n    rotate([0, -angle, 0])\n        translate([0, 0, wall_h + foundation_h + roof_h/2])\n            cube([length + overhang*2, width + overhang*2, wall_th], center = true);\n    \n    // Ridge cap\n    translate([0, 0, foundation_h + wall_h + roof_h - wall_th])\n        cube([length + overhang*2, 2, wall_th], center = true);\n}\n\nmodule chimney() {\n    // Brick chimney\n    chimney_w = 4;\n    chimney_h = 8;\n    \n    translate([length/4, 0, foundation_h + wall_h + roof_h/2 + chimney_h/2])\n        cube([chimney_w, chimney_w, chimney_h], center = true);\n    \n    // Chimney cap\n    translate([length/4, 0, foundation_h + wall_h + roof_h/2 + chimney_h + 0.5])\n        cube([chimney_w + 1, chimney_w + 1, 1], center = true);\n}\n\nmodule vents() {\n    // Roof vents\n    vent_w = 6;\n    vent_h = 2;\n    \n    for (i = [-1, 1]) {\n        translate([i * length/4, 0, foundation_h + wall_h - vent_h/2])\n            cube([vent_w, width - 4, vent_h], center = true);\n    }\n}\n\n// Assemble the bunkhouse\nunion() {\n    foundation();\n    walls();\n    door();\n    windows();\n    roof();\n    chimney();\n    vents();\n}",
    "renders": true
  },
  {
    "building": "hostel",
    "openscad_code": "// Hostel building - realistic medium complexity\n// Dimensions: 80mm x 60mm x 50mm\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main building structure\nmodule hostel_body() {\n    difference() {\n        // Main block\n        cube([80, 60, 50], center = true);\n        \n        // Hollow interior\n        translate([0, 0, 2.5])\n            cube([76, 56, 45], center = true);\n    }\n}\n\n// Roof with slight overhang\nmodule roof() {\n    translate([0, 0, 26])\n        cube([84, 64, 4], center = true);\n}\n\n// Windows array\nmodule windows() {\n    for (floor = [0:1]) {\n        for (x = [-30, -10, 10, 30]) {\n            translate([x, 31, -15 + floor * 25]) {\n                difference() {\n                    // Window frame\n                    cube([6, 2, 8]);\n                    // Window opening\n                    translate([0, 1, 0])\n                        cube([4, 2, 6]);\n                }\n            }\n            \n            translate([x, -31, -15 + floor * 25]) {\n                rotate([0, 180, 0])\n                    difference() {\n                        cube([6, 2, 8]);\n                        translate([0, 1, 0])\n                            cube([4, 2, 6]);\n                    }\n            }\n        }\n    }\n}\n\n// Door\nmodule entrance_door() {\n    translate([0, 30, -10]) {\n        difference() {\n            // Door frame\n            cube([10, 2, 20]);\n            // Door opening\n            translate([1, 1, 2])\n                cube([8, 2, 16]);\n        }\n        // Door handle\n        translate([3, 2, 0])\n            cylinder(h = 2, r = 0.5);\n    }\n}\n\n// Sign board\nmodule hostel_sign() {\n    translate([0, 0, 28]) {\n        cube([20, 2, 4], center = true);\n    }\n}\n\n// Chimney\nmodule chimney() {\n    translate([25, 20, 30]) {\n        difference() {\n            cube([8, 8, 15]);\n            translate([1, 1, 0])\n                cube([6, 6, 15]);\n        }\n    }\n}\n\n// Ventilation grilles\nmodule vents() {\n    for (i = [-2:2]) {\n        translate([i * 15, 0, -24]) {\n            cube([2, 60, 1]);\n        }\n    }\n}\n\n// Assemble the hostel\nunion() {\n    hostel_body();\n    roof();\n    windows();\n    entrance_door();\n    hostel_sign();\n    chimney();\n    vents();\n}",
    "renders": true
  },
  {
    "building": "lodging",
    "openscad_code": "// Small realistic cottage - medium complexity\n$fn = 32;  // Smooth curves for 3D printing\n\nmodule walls() {\n    difference() {\n        // Main walls - 2mm thick\n        cube([40, 30, 25], center=true);\n        translate([0, 0, 2.5])\n            cube([36, 26, 22], center=true);\n    }\n}\n\nmodule door() {\n    // Door frame\n    translate([0, -14, -12.5])\n        cube([8, 2, 18], center=true);\n    // Door hole\n    translate([0, -13.9, -8])\n        cube([6, 2.1, 14], center=true);\n    // Door knob\n    translate([2, -12.5, -8])\n        sphere(1);\n}\n\nmodule windows() {\n    for(x = [-15, 15])\n    translate([x, 0, 0])\n    difference() {\n        // Window frame\n        translate([0, -14, -5])\n            cube([8, 1.5, 8], center=true);\n        // Window glass hole\n        translate([0, -13.4, -5])\n            cube([6, 1.6, 6], center=true);\n        // Window panes\n        translate([0, -13.3, -5])\n            cube([0.5, 1.4, 6], center=true);\n        translate([0, -13.3, -5])\n            cube([6, 1.4, 0.5], center=true);\n    }\n}\n\nmodule roof() {\n    // Main roof\n    translate([0, 0, 12.5])\n    rotate([0, 0, 0])\n    linear_extrude(height=0.1)\n    polygon(points=[[-25, -20], [25, -20], [0, 20]]);\n    \n    // Roof structure\n    for(y = [-18, 18])\n    translate([0, y, 12.5])\n    rotate([90, 0, 0])\n    cylinder(h=25, r1=2, r2=0);\n}\n\nmodule chimney() {\n    translate([10, 10, 20])\n    difference() {\n        cube([5, 5, 10], center=true);\n        translate([0, 0, 2])\n            cube([3, 3, 10], center=true);\n    }\n}\n\nmodule foundation() {\n    translate([0, 0, -13])\n    cube([42, 32, 3], center=true);\n}\n\nmodule steps() {\n    translate([0, -18, -11.5])\n    for(i = [0:2])\n    translate([0, 0, i*1.5])\n    cube([10-i*2, 2, 1.5], center=true);\n}\n\n// Build the cottage\nunion() {\n    foundation();\n    walls();\n    door();\n    windows();\n    roof();\n    chimney();\n    steps();\n}",
    "renders": true
  },
  {
    "building": "shelter",
    "openscad_code": "// Realistic Medium-Complexity Shelter\n// Total footprint ≈ 70 mm × 60 mm × 55 mm (printable on most FDM printers)\n\n$fn = 36;               // Smooth curves\nwall_t = 2;             // Uniform wall thickness for 3D printing\nscale = 1;\n\nmodule shelter() {\n    // Base concrete slab\n    difference() {\n        translate([0, 0, 1])\n            cube([70, 60, 2], center = true);\n        translate([0, 0, 1.5])\n            cube([66, 56, 3], center = true);\n    }\n\n    // Main cabin walls\n    difference() {\n        // Outer shell\n        translate([0, 0, 16])\n            cube([60, 50, 30], center = true);\n        // Hollow inside\n        translate([0, 0, 16])\n            cube([60 - 2*wall_t, 50 - 2*wall_t, 30], center = true);\n    }\n\n    // Front gable wall with door opening\n    difference() {\n        // Full front wall\n        translate([0, -25, 30])\n            rotate([90, 0, 0])\n                linear_extrude(height = 25)\n                    polygon(points = [[-30, 0], [30, 0], [30, 25], [0, 40], [-30, 25]]);\n        // Door opening\n        translate([0, -25.5, 15])\n            cube([15, wall_t + 1, 22], center = true);\n    }\n\n    // Rear gable wall\n    translate([0, 25, 30])\n        rotate([90, 0, 180])\n            linear_extrude(height = 25)\n                polygon(points = [[-30, 0], [30, 0], [30, 25], [0, 40], [-30, 25]]);\n\n    // Side walls fill under roof\n    difference() {\n        translate([-30, 0, 38])\n            cube([wall_t, 50, 18], center = true);\n        translate([30, 0, 38])\n            cube([wall_t, 50, 18], center = true);\n    }\n\n    // Roof panels\n    // Left slope\n    difference() {\n        translate([-15, 0, 47])\n            rotate([0, -30, 0])\n                cube([35, 55, wall_t], center = true);\n        // Remove overlap inside\n        translate([0, 0, 30])\n            cube([60, 50, 30], center = true);\n    }\n    // Right slope\n    difference() {\n        translate([15, 0, 47])\n            rotate([0, 30, 0])\n                cube([35, 55, wall_t], center = true);\n        translate([0, 0, 30])\n            cube([60, 50, 30], center = true);\n    }\n\n    // Ridge beam cap\n    translate([0, 0, 53])\n        rotate([90, 0, 0])\n            cylinder(h = 55, r = wall_t, center = true);\n\n    // Door\n    translate([0, -25.5, 7])\n        rotate([0, 0, 0])\n            cube([13, wall_t, 20], center = true);\n\n    // Window frames (front)\n    for (x = [-18, 18]) {\n        translate([x, -25.5, 28])\n            cube([12, wall_t + 0.5, 12], center = true);\n    }\n\n    // Simple support posts (porch)\n    for (x = [-20, 20]) {\n        translate([x, -22, 8])\n            cylinder(h = 16, r = 2);\n    }\n    // Porch beam\n    translate([0, -22, 16])\n        cube([44, 2, 2], center = true);\n\n    // Roof overhang supports\n    for (x = [-25, 25]) {\n        translate([x, 0, 49])\n            cube([2, 2, 8], center = true);\n    }\n}\n\n// Render the shelter\nshelter();",
    "renders": true
  },
  {
    "building": "retreat",
    "openscad_code": "// Retreat cabin with surrounding deck and small observatory tower\n// All dimensions in mm, scaled for 3D printing\n\n$fa = 2;\n$fs = 0.5;\n\nmodule cabin() {\n    // Main cabin body\n    difference() {\n        cube([40, 30, 25]);\n        // Door\n        translate([2, 0, 0])\n            cube([10, 2, 18]);\n        // Windows\n        translate([30, 0, 15])\n            cube([8, 2, 8]);\n        translate([10, 30, 15])\n            cube([8, -2, 8]);\n    }\n    \n    // Roof\n    translate([-2, -2, 25])\n        rotate([0, 0, 0])\n        cube([44, 34, 3]);\n    \n    translate([-2, -2, 25])\n        rotate([10, 0, 0])\n        cube([44, 34, 2]);\n    \n    // Chimney\n    translate([35, 5, 27])\n        cube([5, 5, 10]);\n}\n\nmodule deck() {\n    // Main deck platform\n    translate([-5, -5, 0])\n        cube([50, 40, 2]);\n    \n    // Support posts\n    for(x = [-5, 45]) {\n        for(y = [-5, 35]) {\n            translate([x, y, -8])\n                cylinder(h = 8, d = 3);\n        }\n    }\n    \n    // Railing posts\n    for(i = [0:5]) {\n        translate([i * 8 - 5, -5, 2])\n            cylinder(h = 6, d = 2);\n        translate([i * 8 - 5, 35, 2])\n            cylinder(h = 6, d = 2);\n    }\n    for(j = [0:4]) {\n        translate([-5, j * 8 - 5, 2])\n            cylinder(h = 6, d = 2);\n        translate([45, j * 8 - 5, 2])\n            cylinder(h = 6, d = 2);\n    }\n}\n\nmodule observatory() {\n    // Base cylinder\n    translate([20, -12, 2])\n        cylinder(h = 15, d = 10);\n    \n    // Dome\n    translate([20, -12, 17])\n        sphere(d = 11);\n    \n    // Telescope mount\n    translate([20, -12, 19])\n        cylinder(h = 5, d = 4);\n    \n    // Small dome slit\n    translate([20, -17, 20])\n        rotate([0, 90, 0])\n        cylinder(h = 8, d = 3);\n}\n\nmodule trees() {\n    // Pine trees around retreat\n    for(i = [0:2]) {\n        translate([i * 15 - 10, 45, 0]) {\n            cylinder(h = 12, d = 4);\n            translate([0, 0, 8])\n                rotate([0, 0, 0])\n                scale([1, 1, 1.5])\n                sphere(d = 8);\n        }\n    }\n}\n\n// Assemble the retreat\nunion() {\n    cabin();\n    deck();\n    observatory();\n    trees();\n}",
    "renders": true
  },
  {
    "building": "refuge",
    "openscad_code": "// Realistic Refuge – a small mountain shelter / bothy\n// All dimensions in mm, 3D-print ready (~80 mm long)\n\n$fa = 1; $fs = 1;\n\n// Wall thickness for printability\nwall = 2.4;\n\nmodule refuge() {\n\n    // -------- Main concrete block base ------------\n    difference() {\n        translate([0, 0, 10]) cube([60, 45, 20], center = true);\n        translate([0, 0, 12]) cube([60 - 2*wall, 45 - wall, 20], center = true);\n    }\n\n    // -------- Wooden walls on top ------------\n    // Back wall\n    cube([60, wall, 35]);\n\n    // Side walls\n    translate([30 - wall/2, 0, 0]) cube([wall, 45, 35]);\n    translate([-30 + wall/2, 0, 0]) cube([wall, 45, 35]);\n\n    // Front posts (simple vertical beams)\n    for(pos = [[-24, 22.5 - wall/2], [24, 22.5 - wall/2]]) {\n        translate([pos[0], pos[1], 0]) cube([wall, wall, 35]);\n    }\n\n    // -------- Roof ------------\n    difference() {\n        translate([0, 0, 35]) cube([65, 50, 4], center = true);\n        translate([0, 0, 35 + 4 - 0.1]) cube([65 - 2*wall, 50 - 2*wall, 4], center = true);\n    }\n\n    // -------- Door ------------\n    translate([-30 + wall + 1, 22.5 - 4, 0]) {\n        difference() {\n            cube([wall, 8, 20]);\n            translate([wall/2, 4, 10]) cylinder(h = wall + 0.2, r = 1.5, center = true);\n        }\n    }\n\n    // -------- Tiny window ------------\n    translate([30 - wall - 0.1, 22.5 - 4, 15]) {\n        rotate([0, 90, 0])\n        cylinder(h = wall + 0.2, r = 3);\n    }\n\n    // -------- Vent / chimney stub ------------\n    translate([0, 0, 40]) cylinder(h = 8, r = 2.5, $fn = 16);\n\n    // -------- Simple foundation blocks ------------\n    for(x = [-25, 25]) {\n        translate([x, 0, 0]) {\n            difference() {\n                cube([8, 45 + 6, 10], center = true);\n                translate([0, 0, 5]) cube([8 - wall, 45 + 6 - wall, 10], center = true);\n            }\n        }\n    }\n}\n\n// Render the model\nrefuge();",
    "renders": true
  },
  {
    "building": "nest",
    "openscad_code": "// Realistic 3D-printable bird nest (~80 mm diameter)\n// All overhangs ≤45°, 1.2 mm wall thickness\n\n$fn=36;\n\nmodule twig(dia, len, taper=0.9) {\n    // Single curved twig for nest walls\n    hull() {\n        translate([0,0,0]) sphere(d=dia);\n        translate([len/3, len/3, len/2]) sphere(d=dia*taper);\n        translate([len,0,len/4]) sphere(d=dia*taper*0.8);\n    }\n}\n\nmodule twig_bundle(count=8) {\n    // Bundle of twigs forming a ring\n    for(i=[0:count-1]) {\n        rotate([0,0,i*360/count]) \n            translate([20,0,0]) \n                rotate([85+sin(i*25)*10,0,0]) \n                    twig(2.2, 18+rand(i)*6, 0.85);\n    }\n}\n\nfunction rand(s)=((s*73)%100)/100;\n\nmodule nest_bowl() {\n    // Main bowl structure with 1.2 mm walls\n    difference() {\n        union() {\n            // Outer shell\n            cylinder(h=22, d1=80, d2=65, center=false);\n            // Rim thickening\n            translate([0,0,20]) cylinder(h=4, d1=66, d2=72, center=false);\n        }\n        // Hollow interior\n        translate([0,0,-1]) cylinder(h=25, d1=77.6, d2=62.6, center=false);\n    }\n}\n\nmodule inner_lining() {\n    // Soft grass-like lining inside\n    for(i=[0:5]) {\n        rotate([0,0,i*60]) {\n            translate([rand(i)*10, rand(i+1)*8, 1]) \n                rotate([90+rand(i+2)*20, 0, 0]) \n                    scale([1,1,0.3]) \n                        cylinder(h=12+rand(i+3)*8, d=1.2);\n        }\n    }\n}\n\nmodule support_base() {\n    // Flat bottom with shallow grooves for print adhesion\n    difference() {\n        cylinder(h=2, d=82, center=false);\n        translate([0,0,-0.1]) \n            for(a=[0:45:315]) \n                rotate([0,0,a]) \n                    translate([30,0,0]) \n                        cube([40,2,2.2], center=true);\n    }\n}\n\n// =====================\n// Main assembly\n// =====================\nunion() {\n    support_base();\n    \n    translate([0,0,2]) nest_bowl();\n    \n    translate([0,0,1]) \n        for(layer=[0:3]) \n            translate([0,0,layer*5]) \n                scale([1-layer*0.08, 1-layer*0.08, 1]) \n                    rotate([0,0,layer*15]) \n                        twig_bundle(10-layer);\n    \n    translate([0,0,21]) \n        scale([0.7,0.7,1]) \n            inner_lining();\n}",
    "renders": true
  },
  {
    "building": "den",
    "openscad_code": "// Den in realistic style, medium complexity\n// Overall dimensions ~70mm x 60mm x 55mm\n\n$fn = 32;\n\n// Main module\nmodule den() {\n\n    // Base ground slab\n    translate([0, 0, -2]) cube([70, 60, 2], center = true);\n\n    // Main chamber body\n    difference() {\n        translate([0, 0, 15]) cube([60, 50, 30], center = true);\n        translate([0, 0, 15]) cube([56, 46, 31], center = true);\n    }\n\n    // Front entrance arch\n    difference() {\n        translate([0, 25, 15]) cube([25, 5, 25], center = true);\n        translate([0, 27.5, 15]) rotate([0, 0, 0]) cylinder(h = 6, r = 11, center = true);\n        translate([0, 29, 15]) cube([20, 5, 20], center = true);\n    }\n\n    // Entrance floor\n    translate([0, 25, 2.5]) cube([24, 10, 3], center = true);\n\n    // Side windows (left)\n    for (y = [-15, -5, 5, 15]) {\n        difference() {\n            translate([-30, y, 22]) cube([2, 6, 8], center = true);\n            translate([-31, y, 22]) cube([3, 4, 6], center = true);\n        }\n    }\n\n    // Side windows (right)\n    for (y = [-15, -5, 5, 15]) {\n        difference() {\n            translate([30, y, 22]) cube([2, 6, 8], center = true);\n            translate([31, y, 22]) cube([3, 4, 6], center = true);\n        }\n    }\n\n    // Roof\n    difference() {\n        translate([0, 0, 32]) cube([66, 56, 4], center = true);\n        translate([0, 0, 30]) cube([68, 58, 4], center = true);\n    }\n\n    // Roof shingles - rows along length\n    for (i = [-30:5:30]) {\n        for (j = [-20:4:20]) {\n            translate([i, j, 35]) cube([5.5, 3.5, 0.8], center = true);\n        }\n    }\n\n    // Chimney\n    difference() {\n        translate([20, -20, 42]) cube([8, 8, 15], center = true);\n        translate([20, -20, 50]) cube([6, 6, 8], center = true);\n    }\n\n    // Chimney top lip\n    translate([20, -20, 50]) cube([10, 10, 2], center = true);\n\n    // Rear ventilation holes\n    for (x = [-20:10:20]) {\n        translate([x, -25, 22]) rotate([90, 0, 0]) cylinder(h = 2, r = 2, center = true);\n    }\n\n    // Door step stones\n    for (dx = [-8:4:8]) {\n        translate([dx, 32, 1]) cube([3, 2, 1], center = true);\n    }\n}\n\nden();",
    "renders": true
  },
  {
    "building": "lair",
    "openscad_code": "// Dragon's Lair - Realistic Style Medium Complexity\n// Dimensions: 80x60x50mm (LxWxH)\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule base() {\n    difference() {\n        // Main rock base\n        cube([80, 60, 10], center=true);\n        \n        // Hollow bottom\n        translate([0, 0, -5])\n            cube([76, 56, 10], center=true);\n    }\n}\n\nmodule entrance_arch() {\n    // Main arch structure\n    difference() {\n        // Outer arch\n        translate([-25, 0, 5])\n            cube([20, 30, 25]);\n        \n        // Inner archway\n        translate([-23, 0, 2])\n            cube([16, 30.1, 22]);\n        \n        // Arch top curve\n        translate([-23, 0, 24])\n            rotate([90, 0, 0])\n                cylinder(h=16.1, r1=8, r2=8, center=true);\n    }\n    \n    // Arch columns\n    for(side = [-1, 1]) {\n        translate([-15, side*12, 17])\n            cylinder(h=15, r=3, center=true);\n    }\n}\n\nmodule rock_wall(x_pos, y_pos, angle) {\n    // Random rock formation\n    translate([x_pos, y_pos, 15])\n    rotate([0, 0, angle])\n    difference() {\n        // Main rock\n        scale([1.2, 0.8, 1])\n            sphere(r=12);\n        \n        // Hollow inside\n        scale([1, 0.6, 0.8])\n            sphere(r=10);\n    }\n}\n\nmodule window() {\n    // Small window for light\n    difference() {\n        // Window frame\n        translate([20, 20, 25])\n            cube([8, 8, 8]);\n        \n        // Window opening\n        translate([21, 21, 26])\n            cube([6, 6, 6]);\n    }\n    \n    // Window bars\n    for(i = [-1, 1]) {\n        translate([24, 20 + i*2.5, 29])\n            cube([1, 1, 2]);\n    }\n}\n\nmodule treasure_hoard() {\n    // Gold pile\n    translate([15, -15, 5])\n    for(i = [0:5]) {\n        translate([cos(i*60)*5, sin(i*60)*5, i*2])\n            sphere(r=3);\n    }\n}\n\nmodule stalactite(x, y) {\n    // Ceiling formations\n    translate([x, y, 35])\n        cylinder(h1=10, h2=0, r1=3, r2=0.5);\n}\n\nmodule roof() {\n    // Lair roof\n    difference() {\n        // Main roof\n        translate([0, 0, 35])\n            cube([70, 50, 10], center=true);\n        \n        // Hollow bottom\n        translate([0, 0, 30])\n            cube([66, 46, 10], center=true);\n        \n        // Roof slope\n        translate([0, 0, 30])\n            rotate([0, 45, 0])\n                cube([100, 50, 10], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base foundation\n    base();\n    \n    // Entrance arch\n    entrance_arch();\n    \n    // Side rock walls\n    rock_wall(-35, 20, 15);\n    rock_wall(30, 25, -20);\n    rock_wall(-20, -25, -30);\n    \n    // Windows for detail\n    window();\n    mirror([1, 0, 0])\n        window();\n    \n    // Treasure inside\n    treasure_hoard();\n    \n    // Stalactites on roof\n    for(x = [-20:10:20]) {\n        for(y = [-15:10:15]) {\n            if(x != 0 || y != 0)\n                stalactite(x, y);\n        }\n    }\n    \n    // Roof structure\n    roof();\n}",
    "renders": true
  },
  {
    "building": "roost",
    "openscad_code": "// Realistic Roost Model - OpenSCAD\n// 3D printable chicken roost with proper supports and realistic details\n\n// Main parameters\nroost_length = 80;\nroost_width = 30;\nroost_height = 45;\nwall_thickness = 2;\n\n// Perch dimensions\nperch_diameter = 8;\nperch_length = 70;\n\n// Support dimensions\nsupport_width = 6;\nsupport_height = 35;\n\n// Leg dimensions\nleg_size = 4;\nleg_height = 8;\n\n// Roof angle\nroof_angle = 30;\n\n// Main roost structure\nmodule roost_structure() {\n    difference() {\n        // Main body\n        union() {\n            // Base platform\n            cube([roost_length, roost_width, wall_thickness]);\n            \n            // Back wall\n            translate([0, 0, wall_thickness])\n            cube([roost_length, wall_thickness, support_height]);\n            \n            // Side walls\n            translate([0, 0, wall_thickness])\n            cube([wall_thickness, roost_width, support_height]);\n            \n            translate([roost_length-wall_thickness, 0, wall_thickness])\n            cube([wall_thickness, roost_width, support_height]);\n            \n            // Roof - angled top\n            translate([0, 0, support_height+wall_thickness])\n            rotate([0, roof_angle, 0])\n            cube([roost_length, roost_width, wall_thickness]);\n        }\n        \n        // Cut entrance opening\n        translate([wall_thickness, wall_thickness*2, wall_thickness])\n        cube([roost_length-wall_thickness*2, wall_thickness*3, support_height-wall_thickness]);\n        \n        // Ventilation holes\n        for(i=[1:3]) {\n            translate([roost_length/4*i, wall_thickness/2, support_height/2])\n            cylinder(h=wall_thickness+1, d=3, center=true);\n        }\n    }\n}\n\n// Perch bars\nmodule perch_bar() {\n    // Main perch\n    translate([5, roost_width/2, wall_thickness+2])\n    rotate([0, 90, 0])\n    cylinder(h=perch_length, d=perch_diameter, center=false);\n    \n    // Support perch\n    translate([wall_thickness*2, wall_thickness*2, wall_thickness+2])\n    rotate([0, 90, 0])\n    cylinder(h=perch_length-wall_thickness*4, d=perch_diameter*0.8, center=false);\n}\n\n// Support braces\nmodule support_braces() {\n    // Front support posts\n    for(x=[wall_thickness, roost_length-wall_thickness]) {\n        translate([x-support_width/2, 0, wall_thickness])\n        cube([support_width, support_width, support_height]);\n    }\n    \n    // Cross braces\n    translate([wall_thickness, 0, support_height/2])\n    cube([roost_length-wall_thickness*2, wall_thickness, wall_thickness]);\n}\n\n// Legs for stability\nmodule legs() {\n    for(x=[leg_size, roost_length-leg_size*2]) {\n        for(y=[leg_size, roost_width-leg_size*2]) {\n            translate([x, y, -leg_height])\n            cube([leg_size, leg_size, leg_height]);\n        }\n    }\n}\n\n// Ladder access\nmodule ladder() {\n    // Side rails\n    for(side=[0, 1]) {\n        translate([roost_length/2 - 10 + side*20, roost_width, 0])\n        cube([wall_thickness, wall_thickness, support_height/2]);\n    }\n    \n    // Rungs\n    for(step=[1:4]) {\n        translate([roost_length/2 - 10, roost_width-wall_thickness, step*support_height/8])\n        cube([20, wall_thickness, wall_thickness]);\n    }\n}\n\n// Assemble the complete roost\nunion() {\n    roost_structure();\n    perch_bar();\n    support_braces();\n    legs();\n    ladder();\n}",
    "renders": true
  },
  {
    "building": "coop",
    "openscad_code": "// Chicken Coop - Realistic Style, Medium Complexity\n// Dimensions: 80mm x 60mm x 70mm\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main coop base\nmodule coop_base() {\n    difference() {\n        // Main body\n        cube([60, 40, 35]);\n        \n        // Door opening\n        translate([5, 0, 5])\n            cube([20, wall_thickness + 1, 25]);\n        \n        // Ventilation holes\n        for(x = [10:15:50]) {\n            for(y = [30:8:38]) {\n                translate([x, y, 32])\n                    cylinder(h=wall_thickness+1, d=3);\n            }\n        }\n    }\n}\n\n// Roof structure\nmodule roof() {\n    union() {\n        // Left side\n        translate([0, 0, 35])\n            rotate([0, 45, 0])\n            cube([60, 2, 45]);\n        \n        // Right side\n        translate([60, 0, 35])\n            rotate([0, -45, 0])\n            cube([60, 2, 45]);\n        \n        // Ridge cap\n        translate([30, 1, 60])\n            cube([wall_thickness, 38, 5]);\n    }\n}\n\n// Nesting boxes on side\nmodule nesting_boxes() {\n    difference() {\n        // Main box structure\n        translate([60, 10, 0])\n            cube([15, 20, 25]);\n        \n        // Three nesting compartments\n        for(i = [0:2]) {\n            translate([60, 10 + i*6.5, 0])\n                cube([wall_thickness + 1, 5, 15]);\n        }\n        \n        // Egg access door\n        translate([73, 12, 10])\n            cube([wall_thickness + 1, 16, 12]);\n    }\n}\n\n// Perch bars\nmodule perches() {\n    for(i = [1:2]) {\n        translate([10 + i*20, -1, 15])\n            rotate([90, 0, 0])\n            cylinder(h=42, d=3);\n    }\n}\n\n// Ramp to door\nmodule ramp() {\n    union() {\n        translate([15, -15, 0])\n            rotate([0, -30, 0])\n            cube([15, 2, 20]);\n        \n        // Ramp steps\n        for(i = [0:4]) {\n            translate([15 + i*3, -15, 1 + i*3.5])\n                cube([3, 2.5, 1]);\n        }\n    }\n}\n\n// Window with frame\nmodule window() {\n    difference() {\n        // Frame\n        translate([40, -1, 20])\n            cube([15, wall_thickness + 1, 15]);\n        \n        // Glass area\n        translate([42, -1.5, 22])\n            cube([11, wall_thickness + 2, 11]);\n    }\n}\n\n// Door\nmodule door() {\n    translate([5, -0.5, 5])\n    union() {\n        // Door panel\n        cube([20, wall_thickness, 25]);\n        \n        // Door handle\n        translate([15, -1, 15])\n            rotate([90, 0, 0])\n            cylinder(h=5, d=2);\n    }\n}\n\n// Assembly\nunion() {\n    coop_base();\n    roof();\n    nesting_boxes();\n    perches();\n    ramp();\n    window();\n    \n    // Hinged door (slightly open)\n    translate([0, 0, 0])\n        rotate([0, 0, -20])\n        door();\n}",
    "renders": true
  },
  {
    "building": "hive",
    "openscad_code": "// Realistic beehive with medium complexity\n// Dimensions: 80mm tall, 60mm diameter\n\n$fn = 32;\n\n// Main hive body\nmodule hive_body() {\n    // Bottom board with landing platform\n    difference() {\n        union() {\n            // Main cylinder body\n            cylinder(h = 60, d = 60, center = false);\n            \n            // Landing platform\n            translate([-35, -5, 0])\n                cube([70, 15, 3]);\n        }\n        \n        // Hollow out the inside\n        translate([0, 0, 3])\n            cylinder(h = 57, d = 54, center = false);\n    }\n}\n\n// Roof sections\nmodule roof() {\n    // Bottom roof ring\n    translate([0, 0, 60])\n        cylinder(h = 5, d1 = 62, d2 = 65);\n    \n    // Main roof\n    translate([0, 0, 65])\n        cylinder(h = 15, d1 = 65, d2 = 75);\n    \n    // Top cap\n    translate([0, 0, 80])\n        sphere(d = 20);\n}\n\n// Entrance reducer\nmodule entrance() {\n    translate([0, -30, 2])\n        difference() {\n            // Main entrance block\n            cube([20, 3, 8]);\n            \n            // Actual entrance hole\n            translate([10, -1, 4])\n                rotate([90, 0, 0])\n                    cylinder(h = 5, d = 8);\n        }\n}\n\n// Handle for lifting\nmodule handle() {\n    translate([0, 0, 70])\n        rotate([90, 0, 0])\n            difference() {\n                // Handle bar\n                cylinder(h = 50, d = 6, center = true);\n                \n                // Cutouts for grip\n                for(i = [-20:10:20]) {\n                    translate([i, 0, 0])\n                        rotate([0, 90, 0])\n                            cylinder(h = 8, d = 4);\n                }\n            }\n}\n\n// Ventilation holes\nmodule ventilation_holes() {\n    for(i = [0:60:359]) {\n        rotate([0, 0, i])\n            translate([27, 0, 30])\n                rotate([90, 0, 0])\n                    cylinder(h = 5, d = 3);\n    }\n}\n\n// Box joints detail\nmodule box_joints() {\n    for(i = [15:15:60]) {\n        // Front joints\n        translate([0, 30, i])\n            cube([4, 2, 2]);\n        \n        // Back joints\n        translate([0, -30, i])\n            cube([4, 2, 2]);\n        \n        // Left joints\n        translate([30, 0, i])\n            cube([2, 4, 2]);\n        \n        // Right joints\n        translate([-30, 0, i])\n            cube([2, 4, 2]);\n    }\n}\n\n// Assemble the complete hive\nunion() {\n    hive_body();\n    roof();\n    entrance();\n    handle();\n    \n    // Add details only to outer shell\n    translate([0, 0, 0]) {\n        box_joints();\n        ventilation_holes();\n    }\n}",
    "renders": true
  },
  {
    "building": "chamber",
    "openscad_code": "// Medieval Chamber - Realistic Style\n// A 3D printable dungeon chamber with stone walls, pillars, and an arched entrance\n// Overall dimensions: 80mm x 80mm x 60mm\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main chamber body\nmodule chamber_body() {\n    difference() {\n        // Outer shell\n        cube([80, 80, 60], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n        cube([80 - 2*wall_thickness, 80 - 2*wall_thickness, 60 - wall_thickness], center=true);\n    }\n}\n\n// Stone texture pattern using small cubes\nmodule stone_texture() {\n    for (x = [-35:10:35]) {\n        for (y = [-35:10:35]) {\n            for (z = [-25:10:25]) {\n                translate([x + sin(x*y)*2, y + cos(x*y)*2, z])\n                cube([8 + rand()*2, 8 + rand()*2, 8 + rand()*2], center=true);\n            }\n        }\n    }\n}\n\n// Pillar module\nmodule pillar(x, y) {\n    translate([x, y, 0]) {\n        // Base\n        cylinder(h=5, r=8, center=true);\n        translate([0, 0, 2.5])\n        cylinder(h=45, r=6, center=true);\n        // Capital\n        translate([0, 0, 26])\n        cylinder(h=5, r=8, center=true);\n    }\n}\n\n// Arched doorway\nmodule arched_doorway() {\n    difference() {\n        // Door frame\n        translate([0, -40, 0])\n        cube([20, wall_thickness, 40], center=true);\n        \n        // Arch opening\n        translate([0, -39, 10])\n        union() {\n            // Rectangular part\n            cube([14, wall_thickness + 2, 25], center=true);\n            // Arch top\n            translate([0, 0, 22.5])\n            rotate([90, 0, 0])\n            cylinder(h=14, r=7, center=true);\n        }\n    }\n}\n\n// Floor flagstones\nmodule floor() {\n    for (x = [-35:7:35]) {\n        for (y = [-35:7:35]) {\n            translate([x, y, -29])\n            cube([6 + rand()*2, 6 + rand()*2, wall_thickness], center=true);\n        }\n    }\n}\n\n// Ceiling beams\nmodule ceiling_beams() {\n    for (x = [-30:15:30]) {\n        translate([x, 0, 28])\n        cube([8, 76, 4], center=true);\n    }\n    for (y = [-30:15:30]) {\n        translate([0, y, 32])\n        cube([76, 8, 4], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Basic chamber structure\n    chamber_body();\n    \n    // Add stone texture to visible faces\n    translate([0, 0, 0])\n    stone_texture();\n    \n    // Floor\n    floor();\n    \n    // Four corner pillars\n    pillar(-30, -30);\n    pillar(30, -30);\n    pillar(-30, 30);\n    pillar(30, 30);\n    \n    // Center pillar\n    pillar(0, 0);\n    \n    // Doorway\n    arched_doorway();\n    \n    // Ceiling beams\n    ceiling_beams();\n}",
    "renders": true
  },
  {
    "building": "suite",
    "openscad_code": "// Realistic Suite - Medium Complexity\n// A 3D printable model of a living-room suite: sofa, coffee table, side table and floor lamp\n\n// Overall scale (mm)\nscale_factor = 1.5;\n\n// Sofa\nmodule sofa() {\n    // Main seating block\n    translate([-25,0,0])\n    difference() {\n        cube([50,20,12]);\n        // Seat grooves\n        for(x=[-20:10:20])\n            translate([x,1,12])\n            cube([1,18,1]);\n    }\n    \n    // Backrest\n    translate([-25,0,12])\n    cube([50,4,15]);\n    \n    // Left armrest\n    translate([-25,0,0])\n    cube([4,20,20]);\n    \n    // Right armrest\n    translate([21,0,0])\n    cube([4,20,20]);\n    \n    // Legs\n    leg_positions = [[-22,2,0], [18,2,0], [-22,17,0], [18,17,0]];\n    for(pos=leg_positions)\n        translate(pos)\n        cylinder(h=8, d=2);\n}\n\n// Coffee table\nmodule coffee_table() {\n    // Top\n    translate([0,-30,10])\n    cube([30,15,2]);\n    \n    // Legs\n    leg_positions = [[-13,-27,0], [13,-27,0], [-13,-15,0], [13,-15,0]];\n    for(pos=leg_positions)\n        translate(pos)\n        cylinder(h=10, d=2);\n}\n\n// Side table\nmodule side_table() {\n    // Top\n    translate([35,5,15])\n    cube([12,12,1.5]);\n    \n    // Single central leg\n    translate([41,11,0])\n    cylinder(h=15, d=3);\n    \n    // Base foot\n    translate([41,11,0])\n    cylinder(h=1, d=8);\n}\n\n// Floor lamp\nmodule floor_lamp() {\n    // Base\n    translate([35,-20,0])\n    cylinder(h=2, d=15);\n    \n    // Pole\n    translate([35,-20,2])\n    cylinder(h=45, d=3);\n    \n    // Lamp shade\n    translate([35,-20,47])\n    rotate([90,0,0])\n    cylinder(h1=10, h2=10, r1=8, r2=5);\n}\n\n// Room floor plate (for context and print bed adhesion)\nmodule floor() {\n    translate([-30,-35,0])\n    cube([80,70,1]);\n}\n\n// Assembly\nscale(scale_factor)\nunion() {\n    floor();\n    sofa();\n    coffee_table();\n    side_table();\n    floor_lamp();\n}",
    "renders": true
  },
  {
    "building": "digs",
    "openscad_code": "// Realistic Medium-Complexity Digs (Archaeological Site)\n// 3D-printable model, ~70 mm wide\n// All walls 1.2 mm thick for FDM printing\n\n// Overall dimensions\nsite_w = 70;\nsite_d = 50;\nsite_h = 15;\n\n// Wall thickness\nwall = 1.2;\n\n// Main excavation pit\nmodule main_pit() {\n    difference() {\n        // Outer block\n        cube([site_w, site_d, site_h], center = true);\n        \n        // Remove interior\n        translate([0, 0, -wall])\n            cube([site_w - 2*wall, site_d - 2*wall, site_h + wall], center = true);\n    }\n}\n\n// Grid of smaller test squares\nmodule test_squares() {\n    for (x = [-30:15:30])\n        for (y = [-20:15:20])\n            translate([x, y, site_h/2 - 1.5]) {\n                difference() {\n                    cube([10, 10, 3], center = true);\n                    translate([0, 0, -0.5])\n                        cube([10 - 2*wall, 10 - 2*wall, 3.5], center = true);\n                }\n            }\n}\n\n// Wooden post markers (cylinders)\nmodule posts() {\n    for (x = [-33, 33])\n        for (y = [-23, 23])\n            translate([x, y, 0])\n                cylinder(h = 12, d = 2, $fn = 8);\n}\n\n// Trench access ramp\nmodule ramp() {\n    translate([0, -site_d/2 - 5, -site_h/2]) {\n        union() {\n            // Ramp base\n            cube([20, 10, 1], center = true);\n            \n            // Sloped top\n            translate([0, 0, 0.5])\n                rotate([0, 90, 0])\n                    linear_extrude(height = 20, center = true)\n                        polygon(points = [[-5, 0], [5, 0], [5, 6], [-5, 6]]);\n        }\n    }\n}\n\n// Stratified layers inside pit\nmodule layers() {\n    for (z = [-site_h/2 + 2 : 2 : site_h/2 - 2]) {\n        color([0.7 + z/20, 0.5, 0.3])\n            translate([0, 0, z])\n                cube([site_w - 2*wall - 2, site_d - 2*wall - 2, 0.8], center = true);\n    }\n}\n\n// Tools and finds\nmodule tools() {\n    // Brushes\n    translate([25, 15, site_h/2 + 0.5]) {\n        rotate([90, 0, 0])\n            cylinder(h = 8, d1 = 2, d2 = 1, $fn = 6);\n    }\n    \n    // Trowel\n    translate([-25, 15, site_h/2 + 0.5]) {\n        rotate([90, 0, 0])\n            linear_extrude(height = 1)\n                polygon(points = [[-3, 0], [3, 0], [2, 8], [-2, 8]]);\n    }\n    \n    // Sherds\n    for (i = [0:5]) {\n        translate([sin(i*60)*10, cos(i*60)*10, site_h/2 - 5 + i])\n            sphere(d = 2 + i/2, $fn = 6);\n    }\n}\n\n// Render complete scene\nunion() {\n    main_pit();\n    test_squares();\n    posts();\n    ramp();\n    layers();\n    tools();\n}",
    "renders": true
  },
  {
    "building": "pad",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Pad\n// Overall footprint ~90 mm x 65 mm x 10 mm\n\n// Parameters\npad_w = 90;\npad_h = 65;\npad_t = 2.4;\ncorner_r = 6;\nedge_chamfer = 1.2;\n\n// Paper thickness allowance\npaper_gap = 0.6;\n\n// Coil spring diameters\ncoil_od = 8;\ncoil_id = 5;\ncoil_h = 5;\ncoil_wall = (coil_od - coil_id)/2;\n\n// Ring metal for coil\nring_w = 2.5;\nring_depth = 1.8;\n\n// Hole for coil\ncoil_hole_r = coil_od/2 + 0.4;\ncoil_hole_depth = pad_t + ring_depth + 0.2;\n\n// Perforation teeth\ntooth_w = 1.2;\ntooth_h = 0.6;\ntooth_pitch = 4;\ntooth_count = floor(pad_w/tooth_pitch);\n\n// Module: rounded top with chamfered edges\nmodule pad_top() {\n    difference() {\n        // Main rounded rectangle\n        minkowski() {\n            cube([pad_w - 2*corner_r, pad_h - 2*corner_r, pad_t], center=true);\n            cylinder(r=corner_r, h=pad_t, center=true);\n        }\n        // Top chamfer\n        translate([0,0,pad_t/2 - edge_chamfer/2])\n        scale([1,1,0.1])\n        minkowski() {\n            cube([pad_w - 2*corner_r - 0.2, pad_h - 2*corner_r - 0.2, edge_chamfer], center=true);\n            cylinder(r=corner_r, h=edge_chamfer, center=true);\n        }\n    }\n}\n\n// Module: paper gap cavity\nmodule paper_gap_cut() {\n    color(\"white\", 0.3)\n    translate([0,0,-(paper_gap + 0.4)/2])\n    cube([pad_w - 4, pad_h - 4, paper_gap + 0.4], center=true);\n}\n\n// Module: coil ring mount\nmodule coil_mount() {\n    difference() {\n        // Ring base\n        translate([-pad_w/2 + coil_od/2 + 2, 0, 0])\n        rotate([90,0,0])\n        cylinder(h=ring_w, r1=coil_od/2 + ring_w, r2=coil_od/2 + ring_w, $fn=60);\n        // Inner cut\n        translate([-pad_w/2 + coil_od/2 + 2, 0, 0])\n        rotate([90,0,0])\n        cylinder(h=ring_w + 0.2, r1=coil_od/2, r2=coil_od/2, $fn=60);\n    }\n}\n\n// Module: coil hole (for printing)\nmodule coil_hole() {\n    translate([-pad_w/2 + coil_od/2 + 2, 0, -coil_hole_depth/2 + pad_t/2])\n    cylinder(r=coil_hole_r, h=coil_hole_depth, $fn=60);\n}\n\n// Module: perforation teeth\nmodule perforation_teeth() {\n    for(i=[-tooth_count/2:tooth_count/2-1]) {\n        translate([i*tooth_pitch, pad_h/2 - tooth_h/2, pad_t/2])\n        cube([tooth_w, tooth_h, pad_t], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base pad\n    difference() {\n        pad_top();\n        paper_gap_cut();\n        coil_hole();\n    }\n\n    // Coil mount\n    coil_mount();\n\n    // Perforation ridge\n    difference() {\n        translate([0, pad_h/2 - tooth_h/2 - 0.3, pad_t/2 - 0.3])\n        cube([pad_w, tooth_h + 0.6, 0.6], center=false);\n        perforation_teeth();\n    }\n}",
    "renders": true
  },
  {
    "building": "quarters",
    "openscad_code": "// Quarters Building - Realistic Style, Medium Complexity\n// A recognizable military barracks-style quarters building\n\n$fn = 32;\n\n// Main dimensions\nbuilding_width = 80;\nbuilding_depth = 60;\nbuilding_height = 35;\nwall_thickness = 2;\n\n// Roof parameters\nroof_overhang = 5;\nroof_height = 15;\n\n// Window parameters\nwindow_width = 12;\nwindow_height = 15;\nwindow_sill = 2;\n\n// Door parameters\ndoor_width = 20;\ndoor_height = 25;\n\n// Foundation height\nfoundation_height = 5;\n\nmodule foundation() {\n    // Concrete foundation base\n    color(\"gray\")\n    translate([0, 0, foundation_height/2])\n    cube([building_width + 4, building_depth + 4, foundation_height], center = true);\n}\n\nmodule walls() {\n    // Main building walls - hollow box\n    difference() {\n        // Outer shell\n        color(\"beige\")\n        cube([building_width, building_depth, building_height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n        cube([building_width - wall_thickness*2, building_depth - wall_thickness*2, building_height], center = true);\n    }\n}\n\nmodule roof() {\n    // Main roof structure\n    translate([0, 0, building_height + roof_height/2])\n    rotate([0, 0, 0])\n    difference() {\n        // Main roof body\n        color(\"darkgreen\")\n        cube([building_width + roof_overhang*2, building_depth + roof_overhang*2, roof_height], center = true);\n        \n        // Cut top to create pitched roof shape\n        translate([0, 0, roof_height/2])\n        rotate([45, 0, 0])\n        cube([building_width + roof_overhang*2 + 10, building_depth + roof_overhang*2 + 10, roof_height*2], center = true);\n    }\n    \n    // Roof ridge\n    translate([0, 0, building_height + roof_height*1.2])\n    color(\"darkgreen\")\n    cube([building_width - 10, 3, roof_height/2], center = true);\n}\n\nmodule windows() {\n    // Front windows\n    for(x = [-building_width/3, 0, building_width/3]) {\n        translate([x, building_depth/2 - wall_thickness/2, building_height/2 - window_height/2])\n        window_assembly();\n    }\n    \n    // Back windows\n    for(x = [-building_width/3, 0, building_width/3]) {\n        translate([x, -building_depth/2 + wall_thickness/2, building_height/2 - window_height/2])\n        rotate([0, 180, 0])\n        window_assembly();\n    }\n}\n\nmodule window_assembly() {\n    // Window frame\n    difference() {\n        // Frame\n        color(\"white\")\n        cube([window_width + 2, wall_thickness + 1, window_height + 2], center = true);\n        \n        // Window opening\n        cube([window_width, wall_thickness + 2, window_height], center = true);\n    }\n    \n    // Window sill\n    translate([0, wall_thickness/2 + 1, -window_height/2 - window_sill/2])\n    color(\"white\")\n    cube([window_width + 4, 2, window_sill], center = true);\n}\n\nmodule door() {\n    // Main entrance door\n    translate([0, building_depth/2 - wall_thickness/2, foundation_height + door_height/2])\n    difference() {\n        // Door frame\n        color(\"brown\")\n        cube([door_width + 4, wall_thickness + 1, door_height + 4], center = true);\n        \n        // Door opening\n        cube([door_width, wall_thickness + 2, door_height], center = true);\n    }\n    \n    // Door panel\n    translate([0, building_depth/2 - wall_thickness/2 - 0.5, foundation_height + door_height/2])\n    color(\"brown\")\n    cube([door_width - 2, wall_thickness/2, door_height - 2], center = true);\n    \n    // Door handle\n    translate([door_width/2 - 2, building_depth/2 - wall_thickness/2 - 1, foundation_height + door_height/2])\n    color(\"gold\")\n    sphere(1);\n}\n\nmodule chimney() {\n    // Chimney stack\n    translate([building_width/3, 0, building_height + roof_height/2])\n    color(\"brick\")\n    cube([8, 8, roof_height*1.5], center = true);\n}\n\nmodule steps() {\n    // Front steps\n    translate([0, building_depth/2 + 5, foundation_height/2])\n    for(i = [1:3]) {\n        color(\"gray\")\n        translate([0, 0, i*1.5])\n        cube([door_width + 10, 5, 1.5], center = true);\n    }\n}\n\n// Assemble the quarters building\nunion() {\n    foundation();\n    translate([0, 0, foundation_height])\n    union() {\n        walls();\n        windows();\n        door();\n    }\n    roof();\n    chimney();\n    steps();\n}",
    "renders": true
  },
  {
    "building": "residence",
    "openscad_code": "// Realistic Residence - Medium Complexity\n// Approx 70 mm wide x 70 mm deep x 50 mm high\n\n$fa = 2;\n$fs = 0.5;\n\nmodule house_body() {\n    difference() {\n        // Main block\n        cube([60, 40, 30], center = true);\n        // Front door recess\n        translate([0, -20.1, -10])\n            cube([10, 2, 20], center = true);\n    }\n}\n\nmodule roof() {\n    // Roof base\n    translate([0, 0, 15])\n        rotate([90, 0, 0])\n            cylinder(h = 60, r1 = 45, r2 = 45, center = true);\n    // Chimney\n    translate([20, 0, 25])\n        cube([8, 8, 15], center = true);\n    // Chimney top\n    translate([20, 0, 32.5])\n        cube([10, 10, 2], center = true);\n}\n\nmodule windows() {\n    // Front windows\n    for (x = [-20, 20]) {\n        translate([x, -20.1, 5])\n            cube([10, 1, 12], center = true);\n    }\n    // Side windows\n    for (y = [-15, 15]) {\n        translate([30.1, y, 5])\n            cube([1, 10, 12], center = true);\n    }\n}\n\nmodule door() {\n    translate([0, -19.9, -10])\n        rotate([0, 90, 0])\n            cylinder(h = 8, r = 5, center = true);\n    // Door knob\n    translate([3, -19.8, -8])\n        sphere(r = 1);\n}\n\nmodule garage() {\n    // Garage block\n    translate([-40, 0, 0])\n        cube([20, 35, 20], center = true);\n    // Garage roof\n    translate([-40, 0, 10])\n        rotate([90, 0, 0])\n            cylinder(h = 20, r1 = 25, r2 = 25, center = true);\n    // Garage door\n    translate([-40, -17.6, -5])\n        cube([16, 0.8, 15], center = true);\n}\n\nmodule foundation() {\n    translate([0, 0, -16])\n        cube([64, 44, 2], center = true);\n}\n\nmodule details() {\n    // Steps\n    for (i = [0:2]) {\n        translate([0, -21.5 - i, -13 - i])\n            cube([12 + 2*i, 1, 1], center = true);\n    }\n    // Window frames\n    for (x = [-20, 20]) {\n        translate([x, -20.2, 5])\n            cube([12, 0.5, 14], center = true);\n    }\n}\n\nunion() {\n    foundation();\n    house_body();\n    roof();\n    windows();\n    door();\n    garage();\n    details();\n}",
    "renders": true
  },
  {
    "building": "abode",
    "openscad_code": "// Realistic Adobe Abode (medium complexity)\n// 3D printable with 1.2 mm wall thickness\n\nwall_thk = 1.2;          // 3 shells on 0.4 mm nozzle\nscale = 1.5;             // final model ≈ 75 mm long\n\nmodule adobe_block(w, d, h) {\n    // slightly irregular adobe brick look\n    difference() {\n        cube([w, d, h]);\n        translate([w/2, d/2, h])\n            sphere(r = 0.3, $fn = 8);\n    }\n}\n\nmodule wall(x, y, w, d, h) {\n    // stack of adobe blocks\n    for (i = [0:h/3 - 1])\n        translate([x, y, i * 3])\n            adobe_block(w, d, 3);\n}\n\nmodule door() {\n    // wooden plank door with frame\n    difference() {\n        cube([10, 1.2, 18]);\n        translate([1, -0.1, 1])\n            cube([8, 1.4, 16]);\n    }\n    // simple handle\n    translate([2, 1.3, 9])\n        rotate([90, 0, 0])\n            cylinder(h = 2, r = 0.5, $fn = 8);\n}\n\nmodule window() {\n    // recessed window with lintel\n    difference() {\n        cube([8, 1.2, 8]);\n        translate([1, -0.1, 1])\n            cube([6, 1.4, 6]);\n    }\n    // small sill\n    translate([0, -0.5, -0.5])\n        cube([8, 1, 0.5]);\n}\n\nmodule vigas(count) {\n    // protruding wooden beams (vigas)\n    for (i = [0:count - 1])\n        translate([i * 8 + 4, -2, 30])\n            rotate([0, 0, 90])\n                cylinder(h = 8, r = 1, $fn = 12);\n}\n\nmodule roof() {\n    // flat adobe roof with slight slope\n    difference() {\n        translate([-2, -2, 30])\n            cube([54, 34, 2]);\n        // drainage channel\n        translate([15, 15, 31])\n            cube([20, 2, 1]);\n    }\n}\n\nmodule abode() {\n    // main structure\n    wall(0, 0, 50, 30, 30);\n\n    // front wall with door opening\n    difference() {\n        wall(0, 30, 50, wall_thk, 30);\n        translate([20, 30.1, 0])\n            cube([10, wall_thk + 0.2, 18]);\n    }\n\n    // back wall\n    wall(0, 0, 50, wall_thk, 30);\n\n    // left wall\n    difference() {\n        wall(0, 0, wall_thk, 30, 30);\n        translate([0, 10, 20])\n            cube([wall_thk + 0.2, 8, 8]);\n    }\n\n    // right wall\n    difference() {\n        wall(50, 0, wall_thk, 30, 30);\n        translate([50 - wall_thk - 0.2, 5, 15])\n            cube([wall_thk + 0.2, 8, 8]);\n    }\n\n    // interior floor\n    translate([wall_thk, wall_thk, 0])\n        cube([50 - 2 * wall_thk, 30 - 2 * wall_thk, 1]);\n\n    // door\n    translate([20, 30.1, 0])\n        door();\n\n    // windows\n    translate([5, -0.1, 20])\n        window();\n    translate([40, 30.1, 15])\n        rotate([0, 0, 180])\n            window();\n    translate([50.1, 10, 20])\n        rotate([0, 0, -90])\n            window();\n\n    // vigas\n    vigas(7);\n\n    // roof\n    roof();\n}\n\nscale(scale)\n    abode();",
    "renders": true
  },
  {
    "building": "dwelling",
    "openscad_code": "// Realistic dwelling with moderate complexity\n// Approx 80mm x 70mm x 55mm\n\n$fn = 32;\n\nmodule walls() {\n    difference() {\n        // Main house block\n        translate([0,0,25]) cube([60,50,50], center=true);\n        \n        // Doorway cutout\n        translate([-20, -20, 10]) cube([20, 5, 30]);\n        \n        // Window cutouts\n        translate([15, -22, 35]) cube([15, 5, 15]);\n        translate([-15, -22, 35]) cube([15, 5, 15]);\n        translate([0, -22, 20]) cube([15, 5, 15]);\n    }\n}\n\nmodule roof() {\n    // Main roof\n    translate([0,0,55]) rotate([90,0,0]) linear_extrude(height=45, center=true, scale=0.1) \n        polygon(points=[[-35,-30], [35,-30], [0,30]]);\n    \n    // Chimney\n    translate([20,0,65]) cube([8,8,15], center=true);\n}\n\nmodule windows() {\n    // Window panes\n    translate([15, -20, 35]) cube([14, 1, 14]);\n    translate([-15, -20, 35]) cube([14, 1, 14]);\n    translate([0, -20, 20]) cube([14, 1, 14]);\n    \n    // Window frames\n    for(x=[-15, 0, 15]) {\n        translate([x, -20, 35]) cube([15, 1.5, 0.5]);\n        translate([x, -20, 20]) cube([15, 1.5, 0.5]);\n    }\n}\n\nmodule door() {\n    // Door panel\n    translate([-10, -19, 15]) cube([10, 2, 25]);\n    \n    // Door knob\n    translate([-5, -18.5, 20]) sphere(d=2);\n}\n\nmodule foundation() {\n    // Concrete base\n    translate([0,0,2]) cube([62,52,4], center=true);\n}\n\nmodule porch() {\n    // Porch floor\n    translate([-30, 0, 10]) cube([20, 40, 2], center=true);\n    \n    // Porch posts\n    for(x=[-40, -20]) {\n        translate([x, -15, 15]) cylinder(d=3, h=15);\n        translate([x, 15, 15]) cylinder(d=3, h=15);\n    }\n    \n    // Porch roof\n    translate([-30, 0, 25]) cube([25, 45, 1.5], center=true);\n}\n\nunion() {\n    foundation();\n    walls();\n    roof();\n    windows();\n    door();\n    porch();\n}",
    "renders": true
  },
  {
    "building": "habitat",
    "openscad_code": "// Realistic medium-complexity 3D-printable habitat\n// Approx. 60 mm wide, 45 mm deep, 35 mm high\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main habitat module\nmodule habitat() {\n    // Base platform\n    difference() {\n        cube([60, 45, 2], center = true);\n        translate([0, 0, -1])\n            cube([56, 41, 2], center = true);\n    }\n\n    // Main cylindrical hull\n    translate([0, 0, 1])\n    difference() {\n        cylinder(h = 25, d = 35, center = false, $fn = 64);\n        translate([0, 0, wall])\n            cylinder(h = 25, d = 35 - 2*wall, center = false, $fn = 64);\n    }\n\n    // Airlock entry\n    translate([-17.5, 0, 1])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 14, d = 10, center = false, $fn = 32);\n        translate([wall, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 14 - 2*wall, d = 10 - 2*wall, center = false, $fn = 32);\n    }\n\n    // Solar panel frames\n    for (side = [-1, 1]) {\n        translate([side * 25, 0, 20])\n        rotate([0, 0, side * 30])\n        difference() {\n            cube([20, 0.8, 12], center = true);\n            translate([0, 0, wall])\n                cube([20 - 2*wall, 0.8, 12 - 2*wall], center = true);\n        }\n    }\n\n    // Viewports\n    for (angle = [0:120:240]) {\n        rotate([0, 0, angle])\n        translate([15, 0, 15])\n        difference() {\n            sphere(d = 5, $fn = 32);\n            translate([0, 0, -2.5])\n                cube([7, 7, 5], center = true);\n        }\n    }\n\n    // Communication dish\n    translate([0, 0, 28])\n    difference() {\n        cylinder(h = 2, d = 8, center = true, $fn = 48);\n        translate([0, 0, -1])\n            cylinder(h = 4, d = 2, center = true, $fn = 16);\n    }\n\n    // Habitat legs\n    leg_positions = [[-20, -15], [20, -15], [20, 15], [-20, 15]];\n    for (pos = leg_positions) {\n        translate([pos[0], pos[1], 1])\n        difference() {\n            cylinder(h = 8, d = 4, center = false, $fn = 16);\n            translate([0, 0, wall])\n                cylinder(h = 8, d = 4 - 2*wall, center = false, $fn = 16);\n        }\n    }\n}\n\n// Render the habitat\nhabitat();",
    "renders": true
  },
  {
    "building": "haven",
    "openscad_code": "// Realistic Haven - Medium Complexity\n// A small coastal watchtower haven with surrounding wall and dock\n\n$fn = 32; // Smoother curves\n\n// Overall dimensions\nhaven_width = 80;\nhaven_depth = 60;\nhaven_height = 45;\n\n// Main module\nmodule haven() {\n    // Base island/rock foundation\n    translate([0, 0, -5]) {\n        scale([1.2, 1, 0.8]) {\n            sphere(d = haven_width);\n        }\n    }\n    \n    // Stone wall around perimeter\n    wall_thickness = 3;\n    wall_height = 15;\n    translate([0, 0, 0]) {\n        difference() {\n            // Outer wall\n            cube([haven_width, haven_depth, wall_height], center = true);\n            // Hollow center\n            translate([0, 0, -wall_thickness]) {\n                cube([haven_width - wall_thickness*2, haven_depth - wall_thickness*2, wall_height + 2], center = true);\n            }\n        }\n    }\n    \n    // Watchtower\n    tower_base = 20;\n    tower_height = 35;\n    translate([0, -haven_depth/4, 0]) {\n        union() {\n            // Tower base\n            cylinder(h = tower_height, d1 = tower_base + 4, d2 = tower_base, center = false);\n            \n            // Tower roof\n            translate([0, 0, tower_height]) {\n                rotate([0, 0, 22.5]) {\n                    cylinder(h = 12, d1 = tower_base + 2, d2 = 0, center = false);\n                }\n            }\n            \n            // Windows\n            for (i = [1:2]) {\n                rotate([0, 0, 45 + i*90]) {\n                    translate([tower_base/2 - 1, 0, tower_height/2]) {\n                        rotate([0, 90, 0]) {\n                            cylinder(h = 3, d = 5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Gatehouse\n    gate_width = 15;\n    gate_height = 12;\n    translate([0, haven_depth/2 - 2, 0]) {\n        // Gate arch\n        difference() {\n            cube([gate_width + 4, 4, gate_height], center = true);\n            translate([0, 0, -1]) {\n                cube([gate_width, 6, gate_height + 2], center = true);\n            }\n        }\n    }\n    \n    // Small wooden dock\n    dock_length = 25;\n    dock_width = 12;\n    dock_height = 2;\n    translate([haven_width/2 + 5, 0, -3]) {\n        rotate([0, 0, 90]) {\n            cube([dock_width, dock_length, dock_height], center = true);\n            \n            // Dock supports\n            for (x = [-dock_width/3, 0, dock_width/3]) {\n                translate([x, dock_length/2 - 3, -2]) {\n                    cylinder(h = 4, d = 2);\n                }\n            }\n        }\n    }\n    \n    // Flag on tower\n    translate([0, -haven_depth/4, tower_height + 12]) {\n        // Flagpole\n        cylinder(h = 8, d = 1);\n        \n        // Flag\n        translate([0, 0, 6]) {\n            rotate([90, 0, 0]) {\n                cube([8, 5, 0.5]);\n            }\n        }\n    }\n    \n    // Battlements on wall\n    battlement_width = 6;\n    battlement_height = 4;\n    for (x = [-haven_width/2 + 10:15:haven_width/2 - 10]) {\n        for (y = [-haven_depth/2 + 5:15:haven_depth/2 - 5]) {\n            if (abs(x) > haven_width/2 - 15 || abs(y) > haven_depth/2 - 10) {\n                translate([x, y, wall_height]) {\n                    cube([battlement_width, battlement_width, battlement_height], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Render the haven\nhaven();",
    "renders": true
  },
  {
    "building": "sanctuary",
    "openscad_code": "// Sanctuary with chapel, bell tower, garden walls and gate\n// Base dimensions for 3D printing (about 80mm wide)\n$fn=32;\n\nmodule main_building() {\n    // Chapel body\n    translate([0,0,10]) cube([40,30,25], center=true);\n    \n    // Chapel roof - simple gabled\n    translate([0,0,25+5]) rotate([90,0,0]) \n        linear_extrude(height=40, center=true, convexity=10)\n            polygon(points=[[-20,-15], [0,-15], [20,-15], [20,15], [-20,15]]);\n    \n    // Entrance arch\n    translate([0,-15.5,10]) \n        difference() {\n            cube([8,4,10], center=true);\n            translate([0,2,5]) cylinder(h=5, r=3, center=true);\n        }\n    \n    // Small windows left and right\n    for(side=[-1,1]) {\n        translate([side*15,0,15]) \n            cube([4,2,6], center=true);\n    }\n}\n\nmodule bell_tower() {\n    // Tower base\n    translate([25,0,0]) union() {\n        translate([0,0,15]) cube([10,10,30], center=true);\n        \n        // Tower roof - pyramid\n        translate([0,0,30+5]) rotate([90,0,0]) \n            linear_extrude(height=10, center=true, convexity=10)\n                polygon(points=[[-5,-5], [0,-5], [5,-5], [5,5], [-5,5]]);\n        \n        // Bell opening\n        translate([0,0,25]) cube([6,1,8], center=true);\n    }\n}\n\nmodule garden_wall() {\n    // Front wall sections\n    for(side=[-1,1]) {\n        translate([side*35,20,5]) cube([10,4,10], center=true);\n    }\n    \n    // Side walls\n    translate([-35,0,5]) cube([4,40,10], center=true);\n    translate([35,0,5]) cube([4,40,10], center=true);\n    \n    // Back wall\n    translate([0,-20,5]) cube([70,4,10], center=true);\n}\n\nmodule gate() {\n    // Gate pillars\n    for(side=[-1,1]) {\n        translate([side*20,20,7.5]) \n            cube([4,4,15], center=true);\n    }\n    \n    // Gate arch\n    translate([0,20.5,12]) \n        difference() {\n            cube([18,2,8], center=true);\n            translate([0,1.1,4]) rotate([90,0,0]) \n                cylinder(h=2, r=8, center=true);\n        }\n}\n\nmodule sanctuary() {\n    // Ground base\n    translate([0,0,-1]) cube([90,60,2], center=true);\n    \n    // Main structures\n    main_building();\n    bell_tower();\n    garden_wall();\n    gate();\n    \n    // Small decorative crosses on roofs\n    translate([0,0,25+10]) \n        rotate([0,0,45]) cube([2,2,4], center=true);\n    translate([25,0,30+7]) \n        rotate([0,0,45]) cube([1,1,2], center=true);\n}\n\nsanctuary();",
    "renders": true
  },
  {
    "building": "asylum",
    "openscad_code": "$fn = 24;\n\n// Main module\nmodule asylum() {\n    // Base foundation\n    difference() {\n        cube([60, 50, 2], center = true);\n        translate([0, 0, -1]) cube([58, 48, 4], center = true);\n    }\n    \n    // Main building\n    translate([0, 0, 11]) {\n        difference() {\n            cube([56, 46, 20], center = true);\n            // Interior cavity\n            translate([0, 0, -1]) cube([52, 42, 22], center = true);\n        }\n    }\n    \n    // Entrance section\n    translate([0, 30, 11]) {\n        difference() {\n            cube([20, 8, 20], center = true);\n            translate([0, 0, -1]) cube([18, 6, 22], center = true);\n        }\n    }\n    \n    // Entrance door\n    translate([0, 34, 5]) {\n        rotate([90, 0, 0]) cylinder(h = 3, d = 6);\n    }\n    \n    // Roof\n    translate([0, 0, 22]) {\n        difference() {\n            // Main roof\n            translate([0, 0, 2]) cube([60, 50, 4], center = true);\n            // Sloped roof\n            for (i = [0:1]) {\n                mirror([1, 0, 0]) {\n                    translate([-30 + i * 60, 0, 0]) {\n                        rotate([0, 45 - i * 90, 0]) {\n                            cube([30, 50, 4]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Entrance roof\n    translate([0, 30, 22]) {\n        difference() {\n            cube([24, 12, 4], center = true);\n            for (i = [0:1]) {\n                mirror([1, 0, 0]) {\n                    translate([-12 + i * 24, 0, 0]) {\n                        rotate([0, 45 - i * 90, 0]) {\n                            cube([12, 12, 4]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Windows\n    module window(x, y, z) {\n        translate([x, y, z]) {\n            // Window frame\n            difference() {\n                cube([8, 2, 10], center = true);\n                translate([0, 0, -1]) cube([6, 1.5, 12], center = true);\n            }\n            // Window bars\n            for (i = [-2:2]) {\n                translate([i * 1.5, 0, 0]) {\n                    cube([0.5, 2, 10], center = true);\n                }\n            }\n        }\n    }\n    \n    // Front windows\n    window(-15, 25, 11);\n    window(15, 25, 11);\n    \n    // Side windows\n    window(-28, 10, 11);\n    window(-28, -10, 11);\n    mirror([1, 0, 0]) {\n        translate([-28, 0, 0]) {\n            window(0, 10, 11);\n            window(0, -10, 11);\n        }\n    }\n    \n    // Back windows\n    window(-15, -25, 11);\n    window(15, -25, 11);\n    \n    // Chimney\n    translate([20, 0, 25]) {\n        difference() {\n            cube([6, 6, 10], center = true);\n            translate([0, 0, -1]) cube([4, 4, 12], center = true);\n        }\n    }\n    \n    // Small roof vents\n    for (i = [-1:1]) {\n        translate([i * 15, 20, 27]) {\n            rotate([0, 0, 45]) {\n                difference() {\n                    cube([3, 3, 3], center = true);\n                    translate([0, 0, -1]) cube([2, 2, 5], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Render the asylum\nasylum();",
    "renders": true
  },
  {
    "building": "hermitage",
    "openscad_code": "// OpenSCAD Hermitage – realistic, medium complexity, 3D-printable\n\n// Overall scale factor\nscale_factor = 0.25;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main building module\nmodule hermitage() {\n    // Stone base platform\n    translate([0, 0, -2])\n        cube([40, 40, 4], center = true);\n\n    // Main walls – simple rectangular box with inner void\n    difference() {\n        cube([36, 30, 25], center = true);\n        translate([0, 0, wall/2])\n            cube([36 - 2*wall, 30 - 2*wall, 25], center = true);\n    }\n\n    // Gable roof (two angled blocks)\n    union() {\n        // Left slope\n        translate([-18, 0, 12.5])\n            rotate([0, 0, -30])\n            cube([30, 30, wall], center = true);\n\n        // Right slope\n        translate([18, 0, 12.5])\n            rotate([0, 0, 30])\n            cube([30, 30, wall], center = true);\n    }\n\n    // Ridge beam\n    translate([0, 0, 25])\n        rotate([90, 0, 0])\n        cylinder(h = 36, d = 3, center = true);\n\n    // Door opening\n    difference() {\n        translate([0, -15, 0])\n            cube([36, wall, 25], center = true);\n        translate([0, -15 - wall/2, -8])\n            cube([8, wall + 0.1, 16], center = true);\n    }\n\n    // Door planks (simple vertical boards)\n    for (i = [-1.5:1:1.5]) {\n        translate([i*2.5, -15 - wall/2, -8])\n            cube([2, wall, 16], center = true);\n    }\n\n    // Small square window on front\n    difference() {\n        translate([0, -15, 5])\n            cube([36, wall, 12], center = true);\n        translate([7, -15 - wall/2, 5])\n            cube([6, wall + 0.1, 6], center = true);\n    }\n\n    // Chimney stack\n    translate([12, 10, 12.5])\n    union() {\n        cube([6, 6, 15], center = true);\n        translate([0, 0, 7.5])\n            cube([4, 4, 15], center = true);\n    }\n\n    // Simple cross on ridge\n    translate([0, 0, 29])\n    union() {\n        cube([1, 1, 6], center = true);\n        cube([1, 6, 1], center = true);\n    }\n\n    // Tiny firewood pile against wall\n    for (a = [0:15:45]) {\n        rotate([0, 0, a])\n            translate([17, 5, -1])\n                cylinder(h = 10, d = 1.5, center = true);\n    }\n}\n\n// Apply scale and render\nscale(scale_factor)\n    hermitage();",
    "renders": true
  },
  {
    "building": "cloister",
    "openscad_code": "// Cloister with arcade around a small courtyard\n// Outer dimensions 60x60x25 mm\n\nmodule column(h=18, r=2.2) {\n    // fluted column\n    for(i=[0:30:359])\n        rotate([0,0,i])\n            translate([r*0.9,0,0])\n                cylinder(h=h, r1=r*0.15, r2=r*0.15, $fn=6);\n    // base\n    translate([0,0,-0.5])\n        cylinder(h=1, r=r*1.2, $fn=20);\n    // capital\n    translate([0,0,h])\n        cylinder(h=1.5, r=r*1.1, $fn=20);\n}\n\nmodule arch(w=6, h=8, t=1.2) {\n    // arch with keystone\n    difference() {\n        translate([-w/2,0,0])\n            cube([w, t, h]);\n        translate([0, t/2, h-2])\n            cylinder(h=t+0.2, r=w/2, $fn=30);\n    }\n    // keystone\n    translate([0,0,h-1.8])\n        rotate([90,0,0])\n            cylinder(h=w*0.6, r1=t*0.7, r2=t*1.2, $fn=4);\n}\n\nmodule cloister_side(len=48, bays=4) {\n    bay_w = len/bays;\n    for(i=[0:bays-1]) {\n        translate([i*bay_w, 0, 0]) {\n            column();\n            translate([0, 2.2, 18])\n                arch(bay_w-2.5, 8, 1.2);\n            translate([bay_w-2.5, 0, 0])\n                column();\n        }\n    }\n}\n\nmodule cloister_walkway(len=48, wid=8) {\n    // raised walkway floor\n    translate([-1, -1, 0])\n        cube([len+2, wid+2, 1.5]);\n    // low parapet wall\n    translate([-1, wid, 0])\n        cube([len+2, 1, 2.5]);\n}\n\nmodule cloister() {\n    side = 48;\n    walkway_w = 8;\n    wall_h = 5;\n    \n    // floor of courtyard\n    cube([side, side, 1], center=true);\n    \n    // four cloister sides\n    translate([-side/2, -side/2-walkway_w, 1.5])\n        union() {\n            cloister_walkway(side, walkway_w);\n            cloister_side(side, 4);\n        }\n    \n    rotate([0,0,90])\n        translate([-side/2, -side/2-walkway_w, 1.5])\n        union() {\n            cloister_walkway(side, walkway_w);\n            cloister_side(side, 4);\n        }\n    \n    rotate([0,0,180])\n        translate([-side/2, -side/2-walkway_w, 1.5])\n        union() {\n            cloister_walkway(side, walkway_w);\n            cloister_side(side, 4);\n        }\n    \n    rotate([0,0,270])\n        translate([-side/2, -side/2-walkway_w, 1.5])\n        union() {\n            cloister_walkway(side, walkway_w);\n            cloister_side(side, 4);\n        }\n}\n\ncloister();",
    "renders": true
  },
  {
    "building": "monastery",
    "openscad_code": "// Monastery in realistic style, medium complexity\n// Size: 80mm x 60mm x 45mm\n\nmodule wall_block(w, h, d) {\n    cube([w, h, d]);\n}\n\nmodule window(w, h, d) {\n    translate([0, -0.5, 0])\n        cube([w, d+1, h]);\n}\n\nmodule door(w, h, d) {\n    difference() {\n        cube([w, d, h]);\n        translate([w/2, d, h])\n            rotate([0, 90, 0])\n                cylinder(h=w/2, d=d*2, $fn=20);\n    }\n}\n\nmodule tower_base() {\n    difference() {\n        wall_block(25, 25, 35);\n        // Windows\n        for (h = [10, 20]) {\n            translate([5, 0, h])\n                window(4, 6, 2);\n            translate([20, 0, h])\n                window(4, 6, 2);\n            translate([0, 5, h])\n                rotate([0, 0, 90])\n                    window(4, 6, 2);\n            translate([0, 20, h])\n                rotate([0, 0, 90])\n                    window(4, 6, 2);\n        }\n        // Door\n        translate([10, -1, 0])\n            door(5, 8, 2);\n    }\n}\n\nmodule tower_roof() {\n    translate([12.5, 12.5, 35])\n        rotate([0, 0, 45])\n            cylinder(h=15, d1=35, d2=25, $fn=4);\n}\n\nmodule church_body() {\n    difference() {\n        wall_block(50, 35, 25);\n        // Windows\n        for (x = [10, 25, 40]) {\n            translate([x, -1, 12])\n                window(6, 10, 2);\n            translate([x, 34, 12])\n                window(6, 10, 2);\n        }\n        // Main entrance\n        translate([20, -1, 0])\n            door(10, 12, 2);\n    }\n}\n\nmodule church_roof() {\n    translate([0, 0, 25])\n        rotate([90, 0, 0])\n            cylinder(h=50, d1=0, d2=45, $fn=2);\n}\n\nmodule cloister_wall() {\n    difference() {\n        wall_block(15, 5, 20);\n        for (z = [5, 10, 15]) {\n            translate([7.5, -1, z])\n                window(3, 4, 2);\n        }\n    }\n}\n\nmodule courtyard() {\n    difference() {\n        cube([35, 35, 1]);\n        translate([17.5, 17.5, -1])\n            cylinder(h=3, d=30, $fn=32);\n    }\n}\n\nmodule bell() {\n    translate([12.5, 12.5, 52])\n        cylinder(h=3, d=6, $fn=12);\n}\n\n// Main assembly\nunion() {\n    // Main church building\n    translate([15, 0, 0]) {\n        church_body();\n        church_roof();\n    }\n    \n    // Bell tower\n    translate([0, 0, 0]) {\n        tower_base();\n        tower_roof();\n        bell();\n    }\n    \n    // Cloister walls\n    translate([15, 25, 0]) {\n        for (angle = [0, 90, 180, 270]) {\n            rotate([0, 0, angle])\n                translate([0, 35, 0])\n                    cloister_wall();\n        }\n    }\n    \n    // Courtyard\n    translate([32.5, 42.5, 0])\n        courtyard();\n    \n    // Small chapel extension\n    translate([65, 10, 0]) {\n        wall_block(15, 15, 15);\n        translate([7.5, 7.5, 15])\n            cylinder(h=10, d1=20, d2=15, $fn=4);\n    }\n}",
    "renders": true
  },
  {
    "building": "convent",
    "openscad_code": "// Convent model - medium complexity, realistic style\n// Overall dimensions: 80mm wide x 60mm deep x 45mm high\n\n$fn = 32;\n\nmodule main_building() {\n    // Base structure\n    difference() {\n        cube([75, 55, 30], center=true);\n        translate([0, 0, 1])\n            cube([65, 45, 30], center=true);\n    }\n    \n    // Roof\n    translate([0, 0, 16])\n    difference() {\n        cube([78, 58, 12], center=true);\n        translate([0, 0, -6])\n            cube([76, 56, 12], center=true);\n    }\n    \n    // Bell tower\n    translate([30, 20, 0])\n    union() {\n        // Tower base\n        difference() {\n            cube([10, 10, 45], center=true);\n            translate([0, 0, 1])\n                cube([8, 8, 45], center=true);\n        }\n        \n        // Bell tower roof\n        translate([0, 0, 23])\n        cylinder(h=8, r1=7, r2=5, center=true);\n        \n        // Cross\n        translate([0, 0, 28])\n        union() {\n            cube([1, 4, 0.5], center=true);\n            cube([4, 1, 0.5], center=true);\n        }\n    }\n}\n\nmodule chapel_extension() {\n    // Chapel wing\n    translate([-30, 0, 0])\n    difference() {\n        cube([25, 35, 25], center=true);\n        translate([0, 0, 1])\n            cube([23, 33, 25], center=true);\n    }\n    \n    // Chapel roof\n    translate([-30, 0, 13])\n    difference() {\n        cube([27, 37, 10], center=true);\n        translate([0, 0, -5])\n            cube([25, 35, 10], center=true);\n    }\n}\n\nmodule windows() {\n    // Main building windows\n    for(i = [-1, 1]) {\n        // Front windows\n        translate([i * 20, 27, 5])\n        difference() {\n            cube([8, 0.5, 12], center=true);\n            translate([0, -0.5, 0])\n                cube([7, 2, 10], center=true);\n        }\n        \n        // Back windows\n        translate([i * 20, -27, 5])\n        difference() {\n            cube([8, 0.5, 12], center=true);\n            translate([0, 0.5, 0])\n                cube([7, 2, 10], center=true);\n        }\n    }\n    \n    // Side windows\n    for(j = [-1, 1]) {\n        translate([37, j * 15, 5])\n        difference() {\n            cube([0.5, 8, 12], center=true);\n            translate([0.5, 0, 0])\n                cube([2, 7, 10], center=true);\n        }\n        \n        translate([-37, j * 15, 5])\n        difference() {\n            cube([0.5, 8, 12], center=true);\n            translate([-0.5, 0, 0])\n                cube([2, 7, 10], center=true);\n        }\n    }\n    \n    // Chapel windows\n    for(k = [-1, 1]) {\n        translate([-30, k * 15, 5])\n        difference() {\n            cube([0.5, 8, 12], center=true);\n            translate([-0.5, 0, 0])\n                cube([2, 7, 10], center=true);\n        }\n    }\n}\n\nmodule door() {\n    // Main entrance\n    translate([0, 27, -5])\n    difference() {\n        cube([12, 0.5, 20], center=true);\n        translate([0, -0.5, 2])\n            cube([10, 2, 16], center=true);\n    }\n    \n    // Door arch\n    translate([0, 27, 5])\n    difference() {\n        cube([14, 1, 12], center=true);\n        translate([0, -0.5, 2])\n            cube([12, 2, 10], center=true);\n    }\n}\n\nmodule garden_wall() {\n    // Front garden wall\n    translate([0, 35, -10])\n    difference() {\n        cube([85, 2, 8], center=true);\n        translate([0, 0, 1])\n            cube([83, 1.6, 8], center=true);\n    }\n    \n    // Gate pillars\n    for(x = [-15, 15]) {\n        translate([x, 35, -6])\n        difference() {\n            cube([4, 2, 12], center=true);\n            translate([0, 0, 1])\n                cube([3.2, 1.2, 12], center=true);\n        }\n    }\n}\n\n// Assemble the convent\nunion() {\n    main_building();\n    chapel_extension();\n    windows();\n    door();\n    garden_wall();\n}",
    "renders": true
  },
  {
    "building": "priory",
    "openscad_code": "// Realistic Priory - OpenSCAD model\n// Medium complexity architectural model\n\nwall_thickness = 2;\nscale_factor = 0.5;\n\nmodule wall_block(w, h, d) {\n    difference() {\n        cube([w, h, d]);\n        translate([wall_thickness, wall_thickness, -1])\n            cube([w-2*wall_thickness, h-2*wall_thickness, d+2]);\n    }\n}\n\nmodule arched_window(w, h, wall_thickness) {\n    translate([w/2, h/2, 0])\n    difference() {\n        cube([w, h, wall_thickness]);\n        translate([0, h*0.7, -1])\n            cylinder(h=wall_thickness+2, r=w/2, $fn=20);\n        translate([-1, 0, -1])\n            cube([w+2, h*0.3, wall_thickness+2]);\n    }\n}\n\nmodule tower(x, y, z, height) {\n    translate([x, y, z]) {\n        // Main tower body\n        wall_block(20, 20, height);\n        \n        // Crenellations\n        for(i = [0:4]) {\n            translate([i*4, 0, height]) cube([3, 2, 4]);\n            translate([i*4, 18, height]) cube([3, 2, 4]);\n            translate([0, i*4, height]) cube([2, 3, 4]);\n            translate([18, i*4, height]) cube([2, 3, 4]);\n        }\n        \n        // Tower roof\n        translate([10, 10, height+4])\n            cylinder(h=15, r1=12, r2=0, $fn=6);\n    }\n}\n\nmodule main_building() {\n    // Base foundation\n    translate([-30, -20, 0]) cube([60, 40, 5]);\n    \n    // Main chapel\n    translate([-25, -15, 5]) wall_block(50, 30, 25);\n    \n    // Chapel roof\n    translate([0, 0, 30]) {\n        rotate([90, 0, 0]) {\n            linear_extrude(height=50) {\n                polygon(points=[\n                    [-25, -15], [25, -15], [0, 10]\n                ]);\n            }\n        }\n    }\n    \n    // Windows on chapel\n    for(side = [0:1]) {\n        for(pos = [-15, -5, 5, 15]) {\n            translate([side ? 25 : -25, pos, 15]) \n                rotate([0, side ? 0 : 180, 0])\n                arched_window(6, 10, wall_thickness);\n        }\n    }\n    \n    // Entrance door\n    translate([0, -15, 5]) \n        arched_window(8, 15, wall_thickness);\n    \n    // Cloister walls\n    translate([-25, 15, 5]) wall_block(50, 15, 15);\n    translate([-25, 15, 5]) wall_block(15, 20, 15);\n    translate([10, 15, 5]) wall_block(15, 20, 15);\n    \n    // Cloister columns\n    for(x = [-20:10:10]) {\n        for(y = [20:10:30]) {\n            translate([x, y, 5]) \n                cylinder(h=15, r=2, $fn=8);\n        }\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    main_building();\n    \n    // Corner towers\n    tower(-25, -15, 5, 35);\n    tower(5, -15, 5, 30);\n    tower(5, 15, 5, 25);\n    \n    // Central spire\n    translate([0, 0, 30]) {\n        cylinder(h=20, r1=8, r2=6, $fn=6);\n        translate([0, 0, 20]) \n            cylinder(h=15, r1=6, r2=0, $fn=6);\n    }\n}",
    "renders": true
  },
  {
    "building": "abbey",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// overall scale\nabbey_scale = 1;\n\n// main church block\nmodule church_body() {\n    // nave walls\n    difference() {\n        cube([60, 25, 30], center = true);\n        translate([0, 0, 2])\n            cube([55, 20, 30], center = true);\n    }\n}\n\n// gothic arched window\nmodule window() {\n    difference() {\n        cube([6, 2, 10]);\n        translate([3, 1, 8])\n            rotate([0, 90, 0])\n                cylinder(h = 3, r1 = 4, r2 = 0, center = true);\n    }\n}\n\n// place windows along nave\nmodule nave_windows() {\n    for (i = [-25:10:25])\n        translate([i, 13.5, 10])\n            window();\n}\n\n// transept cross arms\nmodule transept() {\n    difference() {\n        cube([25, 50, 30], center = true);\n        translate([0, 0, 2])\n            cube([20, 45, 30], center = true);\n    }\n}\n\n// square tower with pyramid roof\nmodule tower() {\n    union() {\n        // tower body\n        difference() {\n            cube([18, 18, 45], center = true);\n            translate([0, 0, 5])\n                cube([14, 14, 45], center = true);\n        }\n        // pyramid roof\n        translate([0, 0, 35])\n            rotate([0, 0, 45])\n                cylinder(h = 15, r1 = 15, r2 = 0, center = true);\n    }\n}\n\n// small chapel apse (half cylinder)\nmodule apse() {\n    translate([35, 0, 0])\n        rotate([0, -90, 0])\n            difference() {\n                cylinder(h = 25, r = 12.5, center = true);\n                translate([0, 0, -2])\n                    cube([25, 25, 30], center = true);\n            }\n}\n\n// main entrance portal\nmodule portal() {\n    translate([-35, 0, -10])\n        difference() {\n            cube([5, 10, 20]);\n            translate([2.5, 5, 15])\n                rotate([0, 90, 0])\n                    cylinder(h = 6, r1 = 7, r2 = 0, center = true);\n        }\n}\n\n// flying buttress supports\nmodule buttress() {\n    for (i = [-15:15:15])\n        translate([i, 20, 0])\n            cube([3, 5, 25], center = true);\n}\n\n// assemble abbey\nunion() {\n    // scale the whole model\n    scale(abbey_scale) {\n        // main church\n        union() {\n            church_body();\n            transept();\n            apse();\n            nave_windows();\n            mirror([1, 0, 0])\n                nave_windows();\n        }\n        \n        // central tower over crossing\n        translate([0, 0, 15])\n            tower();\n        \n        // entrance portal at west end\n        portal();\n        \n        // buttresses for support\n        buttress();\n        mirror([0, 1, 0])\n            buttress();\n    }\n}",
    "renders": true
  },
  {
    "building": "parsonage",
    "openscad_code": "// Realistic Parsonage - Medium Complexity\n// Designed for 3D printing with proper wall thickness\n\n$fn = 32;\n\n// Overall dimensions\nhouse_width = 40;\nhouse_depth = 35;\nhouse_height = 25;\n\nmodule walls() {\n    // Main house walls\n    difference() {\n        // Outer shell\n        cube([house_width, house_depth, house_height], center=true);\n        \n        // Interior space\n        translate([0, 0, 2.5])\n        cube([house_width-4, house_depth-4, house_height-2.5], center=true);\n    }\n    \n    // Chimney\n    translate([house_width/2-5, house_depth/2-5, house_height/2-2.5])\n    cube([6, 6, 15]);\n}\n\nmodule roof() {\n    // Main roof\n    translate([0, 0, house_height/2+2.5])\n    rotate([0, 45, 0])\n    scale([house_width+5, 1, house_depth+5])\n    cube([1, 1, 1], center=true);\n    \n    // Opposite side roof\n    translate([0, 0, house_height/2+2.5])\n    rotate([0, -45, 0])\n    scale([house_width+5, 1, house_depth+5])\n    cube([1, 1, 1], center=true);\n    \n    // Ridge cap\n    translate([0, 0, house_height/2+7.5])\n    cube([house_width+5, 2, 2], center=true);\n}\n\nmodule doors() {\n    // Front door\n    translate([0, house_depth/2-1, -house_height/2+8])\n    cube([6, 2, 12], center=true);\n    \n    // Door knob\n    translate([2, house_depth/2-2, -house_height/2+5])\n    sphere(1);\n}\n\nmodule windows() {\n    // Front windows\n    for(x = [-12, 12]) {\n        translate([x, house_depth/2-1, -house_height/2+8])\n        difference() {\n            cube([8, 2, 8], center=true);\n            translate([0, 0, 0])\n            cube([6, 2.1, 6], center=true);\n        }\n    }\n    \n    // Side windows\n    for(z = [-5, 5]) {\n        translate([house_width/2-1, 0, -house_height/2+8+z*3])\n        difference() {\n            cube([2, 8, 8], center=true);\n            translate([0, 0, 0])\n            cube([2.1, 6, 6], center=true);\n        }\n    }\n}\n\nmodule porch() {\n    // Porch base\n    translate([0, house_depth/2+5, -house_height/2+2.5])\n    cube([24, 12, 5], center=true);\n    \n    // Porch roof\n    translate([0, house_depth/2+5, -house_height/2+10])\n    cube([26, 14, 1], center=true);\n    \n    // Porch posts\n    for(x = [-8, 8]) {\n        translate([x, house_depth/2+5, -house_height/2+7.5])\n        cylinder(h=5, r=1);\n    }\n}\n\nmodule steps() {\n    // Front steps\n    for(i = [0, 1, 2]) {\n        translate([0, house_depth/2+11+i*2, -house_height/2+2.5-i*1.5])\n        cube([10+i*2, 2, 1.5], center=true);\n    }\n}\n\n// Assemble the parsonage\nunion() {\n    walls();\n    roof();\n    doors();\n    windows();\n    porch();\n    steps();\n}",
    "renders": true
  },
  {
    "building": "rectory",
    "openscad_code": "// Rectory - Medium complexity realistic style\n// Overall dimensions: 60mm x 40mm x 50mm\n\nroof_height = 15;\nwall_thickness = 1.2;\nwindow_depth = 1;\ndoor_depth = 1;\n\nmodule main_building() {\n    // Ground floor\n    cube([40, 30, 20]);\n    \n    // First floor\n    translate([0, 0, 20])\n        cube([40, 30, 15]);\n}\n\nmodule roof() {\n    // Main roof\n    translate([-5, -5, 35])\n        rotate([0, 0, 0])\n            linear_extrude(height = roof_height, scale = [0.8, 0.8])\n                square([50, 40]);\n    \n    // Chimney\n    translate([30, 15, 45])\n        cube([6, 6, 12]);\n}\n\nmodule windows() {\n    // Ground floor windows (4)\n    for(x = [8, 32]) {\n        for(y = [5, 23]) {\n            translate([x, y, 12])\n                cube([4, 2, window_depth]);\n        }\n    }\n    \n    // First floor windows (4)\n    for(x = [8, 32]) {\n        for(y = [5, 23]) {\n            translate([x, y, 29])\n                cube([4, 2, window_depth]);\n        }\n    }\n}\n\nmodule door() {\n    translate([16, 0, 0])\n        cube([8, 2, 15]);\n}\n\nmodule porch() {\n    // Porch base\n    translate([10, -5, 0])\n        cube([20, 5, 10]);\n    \n    // Porch roof\n    translate([8, -7, 10])\n        cube([24, 9, 1]);\n    \n    // Pillar left\n    translate([12, -5, 0])\n        cylinder(h = 10, r = 1);\n    \n    // Pillar right\n    translate([28, -5, 0])\n        cylinder(h = 10, r = 1);\n}\n\nmodule cross() {\n    // Base\n    translate([20, 15, 57])\n        cube([2, 2, 2]);\n    \n    // Horizontal bar\n    translate([19, 14, 58])\n        cube([4, 0.5, 1]);\n    \n    // Vertical bar\n    translate([19.75, 13, 58])\n        cube([0.5, 4, 1]);\n}\n\ndifference() {\n    union() {\n        // Main structure\n        main_building();\n        \n        // Roof\n        roof();\n        \n        // Porch\n        porch();\n        \n        // Cross on roof\n        cross();\n    }\n    \n    // Windows\n    windows();\n    \n    // Door\n    door();\n    \n    // Remove interior\n    translate([wall_thickness, wall_thickness, 0])\n        cube([40 - 2*wall_thickness, 30 - 2*wall_thickness, 35]);\n    \n    // Remove door space\n    translate([16 + wall_thickness, -1, wall_thickness])\n        cube([8 - 2*wall_thickness, 3, 15 - wall_thickness]);\n}",
    "renders": true
  },
  {
    "building": "vicarage",
    "openscad_code": "// Vicarage - Medium Complexity Realistic Style\n// Designed for 3D printing, 80mm length\n\nwall_thickness = 1.6;\nwindow_depth = 1.2;\ndoor_depth = 2;\n\n// Main dimensions\nhouse_length = 80;\nhouse_width = 55;\nhouse_height = 40;\n\n// Roof dimensions\nroof_overhang = 8;\nroof_height = 25;\n\n// Colors for preview\ncolor(\"white\") \nunion() {\n    // Main building\n    difference() {\n        // Main walls\n        translate([0, 0, house_height/2])\n            cube([house_length, house_width, house_height], center=true);\n        \n        // Ground floor windows\n        for (x = [-30, 30]) {\n            translate([x, -house_width/2 - 0.1, 12])\n                cube([12, window_depth, 16]);\n        }\n        \n        // Front door\n        translate([0, -house_width/2 - 0.1, 8])\n            cube([14, door_depth, 22]);\n        \n        // Upper floor windows\n        for (x = [-30, 30]) {\n            translate([x, -house_width/2 - 0.1, 32])\n                cube([12, window_depth, 14]);\n        }\n        \n        // Side windows\n        for (y = [-20, 20]) {\n            translate([-house_length/2 - 0.1, y, 32])\n                cube([window_depth, 12, 14]);\n        }\n    }\n    \n    // Window frames\n    module window_frame(x, y, z, w, h, d) {\n        translate([x, y, z])\n        difference() {\n            cube([w + 4, d + 0.2, h + 4], center=true);\n            cube([w, d + 0.4, h], center=true);\n        }\n    }\n    \n    // Add window frames\n    window_frame(-30, house_width/2 - 0.1, 12, 12, 16, window_depth);\n    window_frame(30, house_width/2 - 0.1, 12, 12, 16, window_depth);\n    window_frame(-30, house_width/2 - 0.1, 32, 12, 14, window_depth);\n    window_frame(30, house_width/2 - 0.1, 32, 12, 14, window_depth);\n    window_frame(-house_length/2 + 0.1, -20, 32, 12, 14, window_depth);\n    window_frame(-house_length/2 + 0.1, 20, 32, 12, 14, window_depth);\n    \n    // Door frame\n    translate([0, house_width/2 - 0.1, 8])\n    difference() {\n        cube([18, door_depth + 0.2, 26], center=true);\n        cube([14, door_depth + 0.4, 22], center=true);\n    }\n    \n    // Door steps\n    translate([0, house_width/2 + door_depth/2 + 1, 1])\n        cube([20, 4, 2]);\n    \n    // Chimney\n    translate([house_length/2 - 15, house_width/2 - 10, house_height + roof_height/2])\n    cube([12, 12, 15]);\n    \n    // Roof\n    translate([0, 0, house_height + roof_height/2])\n    difference() {\n        // Main roof\n        rotate([0, 45, 0])\n            cube([house_length + roof_overhang*2, \n                  sqrt(2)*roof_height, \n                  house_width + roof_overhang*2], center=true);\n        \n        // Roof cutout for chimney\n        translate([house_length/2 - 15, 0, house_width/2 - 10])\n            cube([12, roof_height*2, 12]);\n    }\n    \n    // Small porch roof\n    translate([0, house_width/2 + 5, 20])\n    rotate([0, 30, 0])\n        cube([30, 12, 12], center=true);\n    \n    // Porch pillars\n    for (x = [-10, 10]) {\n        translate([x, house_width/2 + 5, 8])\n            cylinder(h=16, r=1.5, center=true);\n    }\n}\n\n// Ground base\ntranslate([0, 0, -1])\ncolor(\"gray\")\n    cube([house_length + 20, house_width + 20, 2], center=true);",
    "renders": true
  },
  {
    "building": "manse",
    "openscad_code": "// Realistic medium-complexity 3D-printable manse\n// Overall footprint 80 x 60 mm, height 50 mm\n$fn = 24;\n\nmodule walls() {\n    // Main block walls 2 mm thick\n    difference() {\n        translate([-40, -30, 0]) cube([80, 60, 30], center = false);\n        translate([-38, -28, 2]) cube([76, 56, 28], center = false);\n    }\n}\n\nmodule pitched_roof() {\n    // Roof over main block\n    translate([0, 0, 30]) rotate([0, 90, 0])\n        linear_extrude(height = 0.1)\n            polygon(points = [[-40, 0], [40, 0], [0, 20]]);\n    // Convert to solid\n    hull() {\n        translate([-40, -30, 30]) cube([0.1, 60, 0.1]);\n        translate([40, -30, 30]) cube([0.1, 60, 0.1]);\n        translate([0, -30, 50]) cube([0.1, 60, 0.1]);\n    }\n}\n\nmodule door() {\n    // Front door centered\n    translate([0, -30, 0]) cube([8, 2, 12], center = true);\n    // Doorknob\n    translate([2.5, -29, 6]) sphere(d = 1);\n}\n\nmodule windows() {\n    // Four symmetric windows\n    for (x = [-25, 25])\n    for (y = [-15, 15]) {\n        translate([x, y, 15]) cube([10, 2, 10], center = true);\n    }\n}\n\nmodule chimney() {\n    // Chimney on right side\n    translate([30, 20, 30]) cube([8, 8, 15]);\n}\n\nmodule porch() {\n    // Small front porch with posts\n    translate([0, -35, 0]) cube([20, 10, 2]);\n    // Posts\n    for (x = [-8, 8])\n        translate([x, -35, 2]) cylinder(d = 2, h = 10);\n    // Porch roof\n    translate([0, -35, 12]) cube([22, 12, 1], center = true);\n}\n\nmodule steps() {\n    // Three front steps\n    for (i = [0:2])\n        translate([0, -36 - i*2, 2 + i*2]) cube([8, 2, 2], center = true);\n}\n\nmodule gable_decorations() {\n    // Ridge beam\n    translate([0, 0, 50]) cube([80, 1, 1], center = true);\n    // Two gable vents\n    for (y = [-25, 25])\n        translate([0, y, 40]) cube([4, 1, 6], center = true);\n}\n\nunion() {\n    walls();\n    pitched_roof();\n    door();\n    windows();\n    chimney();\n    porch();\n    steps();\n    gable_decorations();\n}",
    "renders": true
  },
  {
    "building": "presbytery",
    "openscad_code": "// Presbytery - medium complexity realistic style\n// Overall dimensions: 70mm x 50mm x 45mm (LxWxH)\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main presbytery building\nmodule main_building() {\n    // Base foundation\n    translate([0, 0, 0])\n        cube([70, 50, 3], center=true);\n    \n    // Ground floor walls\n    difference() {\n        translate([0, 0, 12])\n            cube([70, 50, 24], center=true);\n        // Interior cavity\n        translate([0, 0, 12])\n            cube([66, 46, 24], center=true);\n    }\n    \n    // First floor walls\n    difference() {\n        translate([0, 0, 31])\n            cube([65, 45, 18], center=true);\n        // Interior cavity\n        translate([0, 0, 31])\n            cube([61, 41, 18], center=true);\n    }\n    \n    // Roof\n    translate([0, 0, 45])\n        rotate([0, 0, 0])\n            linear_extrude(height=2)\n                polygon([\n                    [-35, -25], [35, -25], [40, 0], [35, 25],\n                    [-35, 25], [-40, 0]\n                ]);\n}\n\n// Windows module\nmodule window(x, y, z, w, h) {\n    // Window frame\n    translate([x, y, z])\n        difference() {\n            cube([w+4, 1, h+4], center=true);\n            cube([w, 1, h], center=true);\n        }\n    // Window panes\n    for(i = [-1, 1]) {\n        translate([x+i*(w/4), y, z])\n            cube([1, 1, h-2], center=true);\n    }\n}\n\n// Door module\nmodule door(x, y, z) {\n    // Door frame\n    translate([x, y, z])\n        difference() {\n            cube([18, 2, 30], center=true);\n            cube([16, 3, 28], center=true);\n        }\n    // Door\n    translate([x-2, y+1, z])\n        cube([14, 1, 26], center=true);\n    // Door knob\n    translate([x+4, y+2, z+5])\n        sphere(2);\n}\n\n// Chimney\nmodule chimney() {\n    translate([20, -20, 35]) {\n        difference() {\n            cube([8, 8, 15], center=true);\n            cube([4, 4, 15], center=true);\n        }\n        // Chimney top\n        translate([0, 0, 8])\n            cube([10, 10, 2], center=true);\n    }\n}\n\n// Cross on top\nmodule cross() {\n    translate([0, 0, 50]) {\n        // Vertical beam\n        cube([2, 2, 10], center=true);\n        // Horizontal beam\n        translate([0, 0, 3])\n            cube([8, 2, 2], center=true);\n    }\n}\n\n// Bell tower\nmodule bell_tower() {\n    translate([-25, 0, 35]) {\n        // Tower base\n        difference() {\n            cube([10, 10, 20], center=true);\n            cube([6, 6, 20], center=true);\n        }\n        // Tower roof\n        translate([0, 0, 11])\n            cylinder(h=5, r1=7, r2=2, center=true);\n    }\n}\n\n// Generate the complete presbytery\nunion() {\n    main_building();\n    \n    // Ground floor windows\n    for(i = [-1, 1]) {\n        window(i*25, 25.5, 12, 12, 16);\n        window(i*25, -25.5, 12, 12, 16);\n    }\n    \n    // First floor windows\n    for(i = [-1, 0, 1]) {\n        window(i*20, 25.5, 31, 10, 12);\n        window(i*20, -25.5, 31, 10, 12);\n    }\n    \n    // Front door\n    door(0, 25.5, 12);\n    \n    // Chimney\n    chimney();\n    \n    // Bell tower\n    bell_tower();\n    \n    // Cross on bell tower\n    translate([-25, 0, 58])\n        cross();\n    \n    // Steps to entrance\n    translate([0, 32, 3])\n        for(i = [1:3]) {\n            translate([0, i*2, -i*2])\n                cube([30, 4, 2], center=true);\n        }\n}",
    "renders": true
  },
  {
    "building": "deanery",
    "openscad_code": "// Deanery Model - Medium Complexity Realistic Style\n// A traditional English deanery house with gothic elements\n\n$fn = 32;\n\n// Overall dimensions\nhouse_width = 60;\nhouse_depth = 45;\nhouse_height = 35;\n\nmodule deanery() {\n    // Main building body\n    difference() {\n        union() {\n            // Ground floor\n            translate([0, 0, house_height/4])\n                cube([house_width, house_depth, house_height/2], center=true);\n            \n            // Upper floor (slightly smaller)\n            translate([0, 0, house_height*3/4])\n                cube([house_width*0.9, house_depth*0.9, house_height/2], center=true);\n        }\n        \n        // Front doorway\n        translate([0, -house_depth/2-1, house_height/4])\n            cube([12, 5, 20], center=true);\n    }\n    \n    // Roof with gothic gables\n    module gable_roof(width, depth, height, offset = 0) {\n        translate([0, offset, house_height + height/2]) {\n            rotate([0, 0, 45])\n                cube([width*1.4, depth*0.707, height], center=true);\n            rotate([0, 0, -45])\n                cube([width*1.4, depth*0.707, height], center=true);\n        }\n    }\n    \n    // Main roof\n    gable_roof(house_width*0.9, house_depth*0.9, 15);\n    \n    // Front gabled porch\n    translate([0, -house_depth/2, 0])\n        gable_roof(house_width*0.5, 15, 12, -house_depth/2);\n    \n    // Chimneys\n    module chimney(x, z) {\n        translate([x, house_depth/4, z])\n            cube([6, 6, 15], center=true);\n        \n        // Chimney top detail\n        translate([x, house_depth/4, z+8])\n            cube([8, 8, 3], center=true);\n    }\n    \n    chimney(-house_width/3, house_height+5);\n    chimney(house_width/3, house_height+5);\n    \n    // Windows\n    module window(x, y, z, width, height) {\n        difference() {\n            // Window frame\n            translate([x, y, z])\n                cube([width+4, 2, height+4], center=true);\n            \n            // Window opening\n            translate([x, y-1, z])\n                cube([width, 4, height], center=true);\n            \n            // Gothic arch top\n            translate([x, y-1, z+height/2+2])\n                scale([width/6, 1, 1])\n                sphere(3);\n        }\n        \n        // Window mullions\n        for(i = [-1, 1]) {\n            translate([x+i*width/4, y-1, z])\n                cube([1, 4, height], center=true);\n        }\n    }\n    \n    // Ground floor windows (3 across front)\n    for(i = [-1, 0, 1]) {\n        window(i*house_width/4, -house_depth/2, house_height/4, 8, 12);\n    }\n    \n    // Upper floor windows (2 across front)\n    for(i = [-0.5, 0.5]) {\n        window(i*house_width/3, -house_depth/2, house_height*3/4, 8, 10);\n    }\n    \n    // Side windows\n    for(side = [-1, 1]) {\n        for(i = [-1, 0, 1]) {\n            window(side*house_width/2, i*house_depth/4, house_height/4, 8, 12);\n            if(i != 0) {\n                window(side*house_width*0.45, i*house_depth/4, house_height*3/4, 8, 10);\n            }\n        }\n    }\n    \n    // Door details\n    translate([0, -house_depth/2-0.5, house_height/4-5])\n        cube([8, 1, 16], center=true);\n    \n    // Door handle\n    translate([3, -house_depth/2-1, house_height/4-2])\n        sphere(1);\n    \n    // Foundation/base\n    translate([0, 0, -2])\n        cube([house_width+4, house_depth+4, 4], center=true);\n    \n    // Small bay window on right side\n    translate([house_width/2+2, 0, house_height/3])\n        cube([4, 15, 20], center=true);\n    \n    // Bay window roof\n    translate([house_width/2+2, 0, house_height/3+12])\n        rotate([0, 90, 0])\n            cylinder(h=15, r1=8, r2=0);\n}\n\ndeanery();",
    "renders": true
  },
  {
    "building": "chapterhouse",
    "openscad_code": "// Chapterhouse - Realistic Medium Complexity\n// Overall size ~80mm length\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule base() {\n    // Stone base platform\n    difference() {\n        cube([60, 40, 3], center=true);\n        translate([0, 0, -1]) cube([56, 36, 5], center=true);\n    }\n}\n\nmodule main_walls() {\n    // Main rectangular chapterhouse body\n    difference() {\n        // Outer walls\n        cube([50, 30, 25], center=true);\n        // Hollow interior\n        translate([0, 0, 2]) cube([46, 26, 25], center=true);\n    }\n}\n\nmodule gothic_arch(x, y, z, width=8, height=12) {\n    // Gothic arch window\n    translate([x, y, z]) {\n        difference() {\n            union() {\n                // Main arch body\n                cube([width, wall_thickness, height], center=true);\n                // Arch top\n                translate([0, 0, height/2]) \n                    rotate([90, 0, 0]) cylinder(h=width, r=height/2, center=true);\n            }\n            // Inner cutout\n            translate([0, 1, 0]) cube([width-2, wall_thickness+2, height-2], center=true);\n            translate([0, 1, height/2-1]) \n                rotate([90, 0, 0]) cylinder(h=width-2, r=height/2-1, center=true);\n        }\n    }\n}\n\nmodule windows() {\n    // Front windows\n    gothic_arch(-15, 16, 0);\n    gothic_arch(0, 16, 0);\n    gothic_arch(15, 16, 0);\n    \n    // Back windows\n    gothic_arch(-15, -16, 0);\n    gothic_arch(0, -16, 0);\n    gothic_arch(15, -16, 0);\n}\n\nmodule door() {\n    // Main entrance door\n    translate([0, 16, -8]) {\n        difference() {\n            // Door frame\n            cube([10, wall_thickness, 16], center=true);\n            // Door opening\n            translate([0, 1, 2]) cube([8, wall_thickness+2, 12], center=true);\n            // Arch top\n            translate([0, 1, 8]) rotate([90, 0, 0]) \n                cylinder(h=8, r=4, center=true);\n        }\n    }\n}\n\nmodule buttress(x, y) {\n    // Flying buttress support\n    translate([x, y, 0]) {\n        cube([4, 4, 25], center=true);\n        // Taper top\n        translate([0, 0, 13]) cube([4, 4, 1], center=true);\n    }\n}\n\nmodule buttresses() {\n    // Corner supports\n    buttress(-25, 15);\n    buttress(25, 15);\n    buttress(-25, -15);\n    buttress(25, -15);\n}\n\nmodule roof_tiles() {\n    // Tiled roof effect\n    for(i = [-24:4:24]) {\n        translate([i, 0, 13]) cube([4, 32, 0.5], center=true);\n    }\n}\n\nmodule roof() {\n    // Main pitched roof\n    translate([0, 0, 13]) {\n        rotate([0, 10, 0]) {\n            // Roof structure\n            difference() {\n                // Main roof body\n                rotate([90, 0, 0]) \n                    cylinder(h=60, r1=20, r2=15, center=true);\n                // Hollow inside\n                translate([0, 0, -2]) \n                    rotate([90, 0, 0]) \n                    cylinder(h=64, r1=17, r2=12, center=true);\n            }\n            roof_tiles();\n        }\n    }\n}\n\nmodule cross() {\n    // Simple cross on roof peak\n    translate([0, 0, 25]) {\n        cube([2, 8, 1], center=true);\n        cube([8, 2, 1], center=true);\n    }\n}\n\nmodule chimney() {\n    // Small chimney on side\n    translate([15, 0, 15]) {\n        cube([4, 4, 8], center=true);\n        translate([0, 0, 4]) cube([5, 5, 2], center=true);\n    }\n}\n\nmodule steps() {\n    // Front steps\n    for(i = [1:3]) {\n        translate([0, 16 + i*2, -8-i]) \n            cube([12 + i*2, 2, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    main_walls();\n    windows();\n    door();\n    buttresses();\n    roof();\n    cross();\n    chimney();\n    steps();\n}",
    "renders": true
  },
  {
    "building": "almshouse",
    "openscad_code": "// Almshouse model - realistic style, medium complexity\n// Dimensions in mm for 3D printing\n\nwall_thickness = 2;\nscale_factor = 0.3;  // Scale down for 3D printing\n\n// Main building dimensions\nbuilding_width = 80 * scale_factor;\nbuilding_depth = 60 * scale_factor;\nbuilding_height = 45 * scale_factor;\n\n// Roof dimensions\nroof_overhang = 5 * scale_factor;\nroof_height = 20 * scale_factor;\n\n// Window and door dimensions\nwindow_width = 10 * scale_factor;\nwindow_height = 12 * scale_factor;\ndoor_width = 12 * scale_factor;\ndoor_height = 20 * scale_factor;\n\nmodule window_frame() {\n    difference() {\n        // Outer frame\n        cube([window_width + 4, wall_thickness + 1, window_height + 4], center = true);\n        // Inner opening\n        translate([0, 0.5, 0])\n            cube([window_width, wall_thickness + 2, window_height], center = true);\n    }\n}\n\nmodule door_frame() {\n    difference() {\n        // Outer frame\n        cube([door_width + 4, wall_thickness + 1, door_height + 4], center = true);\n        // Inner opening\n        translate([0, 0.5, -1])\n            cube([door_width, wall_thickness + 2, door_height], center = true);\n    }\n}\n\nmodule chimney() {\n    translate([building_width/2 - 10, building_depth/2 - 5, building_height + roof_height - 5]) {\n        // Chimney base\n        cube([8, 8, 15]);\n        // Chimney top\n        translate([-1, -1, 15])\n            cube([10, 10, 3]);\n    }\n}\n\nmodule roof_tiles() {\n    // Simple tiled roof effect using small cubes\n    for (x = [-building_width/2 - roof_overhang : 3 : building_width/2 + roof_overhang]) {\n        for (z = [0 : 2 : roof_height]) {\n            translate([x, building_depth/2 + roof_overhang - z*0.5, building_height + z]) {\n                cube([3, 1, 1]);\n            }\n        }\n    }\n}\n\n// Main building body\nunion() {\n    // Base building\n    difference() {\n        cube([building_width, building_depth, building_height], center = true);\n        \n        // Hollow out interior\n        translate([0, 0, -wall_thickness/2])\n            cube([building_width - 2*wall_thickness, building_depth - 2*wall_thickness, building_height], center = true);\n    }\n    \n    // Roof\n    translate([0, 0, building_height/2 + roof_height/2]) {\n        rotate([0, 0, 0])\n            cube([building_width + 2*roof_overhang, building_depth + 2*roof_overhang, roof_height], center = true);\n    }\n    \n    // Roof tiles\n    roof_tiles();\n    \n    // Chimney\n    chimney();\n    \n    // Front windows (3 windows)\n    for (i = [-1:1]) {\n        translate([i * building_width/3, building_depth/2 + wall_thickness/2, building_height/3])\n            rotate([0, 90, 0])\n                window_frame();\n    }\n    \n    // Back windows (2 windows)\n    for (i = [-0.5:0.5]) {\n        translate([i * building_width/2, -building_depth/2 - wall_thickness/2, building_height/3])\n            rotate([0, -90, 0])\n                window_frame();\n    }\n    \n    // Front door\n    translate([0, building_depth/2 + wall_thickness/2, -building_height/2 + door_height/2])\n        rotate([0, 90, 0])\n            door_frame();\n    \n    // Stone foundation\n    translate([0, 0, -wall_thickness])\n        cube([building_width + 2, building_depth + 2, wall_thickness], center = true);\n}",
    "renders": true
  },
  {
    "building": "poorhouse",
    "openscad_code": "// Poorhouse - realistic style, medium complexity\n// Dimensions: ~70mm x ~50mm x ~40mm\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main building\nmodule main_building() {\n    // Foundation\n    translate([0, 0, 1]) cube([60, 40, 2], center=true);\n    \n    // Ground floor walls\n    difference() {\n        translate([0, 0, 12]) cube([58, 38, 22], center=true);\n        translate([0, 0, 12]) cube([54, 34, 22], center=true);\n    }\n    \n    // First floor\n    difference() {\n        translate([0, 0, 34]) cube([58, 38, 10], center=true);\n        translate([0, 0, 34]) cube([54, 34, 10], center=true);\n    }\n    \n    // Roof\n    difference() {\n        union() {\n            translate([0, 0, 42]) cube([60, 42, 2], center=true);\n            translate([0, 0, 44]) cube([62, 44, 2], center=true);\n            translate([0, 0, 46]) cube([64, 46, 2], center=true);\n        }\n        translate([0, 0, 42]) cube([56, 38, 6], center=true);\n    }\n}\n\n// Door\nmodule door() {\n    translate([0, -16, 8]) {\n        difference() {\n            cube([8, 2, 12]);\n            translate([1, -1, 1]) cube([6, 4, 10]);\n        }\n        // Door handle\n        translate([6, 1, 6]) cylinder(h=2, r=1);\n    }\n}\n\n// Windows\nmodule window() {\n    difference() {\n        cube([8, 2, 8]);\n        translate([1, -1, 1]) cube([6, 4, 6]);\n    }\n}\n\n// Windows on ground floor\nmodule ground_floor_windows() {\n    for(x = [-20, 20]) {\n        translate([x, -16, 12]) rotate([0, 0, 0]) window();\n    }\n    for(y = [-10, 10]) {\n        translate([28, y, 12]) rotate([0, 0, 90]) window();\n        translate([-28, y, 12]) rotate([0, 0, 90]) window();\n    }\n}\n\n// Windows on first floor\nmodule first_floor_windows() {\n    for(x = [-15, 15]) {\n        translate([x, -16, 34]) rotate([0, 0, 0]) window();\n    }\n    for(x = [-20, 0, 20]) {\n        translate([28, x, 34]) rotate([0, 0, 90]) window();\n        translate([-28, x, 34]) rotate([0, 0, 90]) window();\n    }\n}\n\n// Small chimney\nmodule chimney() {\n    translate([20, 15, 44]) {\n        cube([6, 6, 8]);\n        translate([-1, -1, 7]) cube([8, 8, 2]);\n    }\n}\n\n// Simple porch roof\nmodule porch() {\n    translate([0, -20, 8]) {\n        // Posts\n        translate([-10, 0, 0]) cylinder(h=16, r=1);\n        translate([10, 0, 0]) cylinder(h=16, r=1);\n        // Roof\n        translate([0, -3, 16]) cube([24, 2, 1], center=true);\n        translate([0, -3, 16]) cube([26, 2, 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    main_building();\n    door();\n    ground_floor_windows();\n    first_floor_windows();\n    chimney();\n    porch();\n}",
    "renders": true
  },
  {
    "building": "workhouse",
    "openscad_code": "// Realistic Workhouse Model - Medium Complexity\n// Designed for 3D printing, no overhangs, 50-100mm size\n\nwall_thickness = 2;\nwindow_depth = 1.5;\ndoor_depth = 2;\n\n// Main building dimensions\nmain_width = 60;\nmain_depth = 40;\nmain_height = 25;\n\n// Roof dimensions\nroof_overhang = 3;\nroof_height = 12;\n\n// Chimney\nchimney_width = 8;\nchimney_height = 15;\n\n// Windows\nwindow_width = 8;\nwindow_height = 10;\nwindow_spacing = 15;\n\n// Door\ndoor_width = 12;\ndoor_height = 18;\n\nmodule foundation() {\n    translate([-1, -1, -3]) {\n        cube([main_width + 2, main_depth + 2, 3]);\n    }\n}\n\nmodule walls() {\n    difference() {\n        // Main walls\n        cube([main_width, main_depth, main_height]);\n        \n        // Interior hollow\n        translate([wall_thickness, wall_thickness, wall_thickness]) {\n            cube([main_width - 2*wall_thickness, main_depth - 2*wall_thickness, main_height]);\n        }\n        \n        // Front windows\n        translate([main_width/2 - window_width/2, -window_depth, main_height/2]) {\n            cube([window_width, window_depth, window_height]);\n        }\n        \n        // Side windows\n        for(i = [1, -1]) {\n            translate([i < 0 ? 0 : main_width - window_depth, main_depth/2 - window_width/2, main_height/2]) {\n                cube([window_depth, window_width, window_height]);\n            }\n        }\n        \n        // Back windows\n        translate([main_width/4 - window_width/2, main_depth - window_depth, main_height/2]) {\n            cube([window_width, window_depth, window_height]);\n        }\n        translate([3*main_width/4 - window_width/2, main_depth - window_depth, main_height/2]) {\n            cube([window_width, window_depth, window_height]);\n        }\n        \n        // Front door\n        translate([main_width/2 - door_width/2, -door_depth, 0]) {\n            cube([door_width, door_depth, door_height]);\n        }\n    }\n}\n\nmodule roof() {\n    translate([-roof_overhang, -roof_overhang, main_height]) {\n        difference() {\n            // Main roof\n            rotate([90, 0, 0]) {\n                linear_extrude(height = main_width + 2*roof_overhang) {\n                    polygon(points=[\n                        [0, 0],\n                        [(main_depth + 2*roof_overhang)/2, roof_height],\n                        [main_depth + 2*roof_overhang, 0]\n                    ]);\n                }\n            }\n            \n            // Gable ends\n            translate([0, -1, -1]) {\n                cube([main_width + 2*roof_overhang, 2, roof_height + 2]);\n            }\n        }\n    }\n}\n\nmodule chimney() {\n    translate([main_width - chimney_width - 5, main_depth/2 - chimney_width/2, main_height]) {\n        difference() {\n            cube([chimney_width, chimney_width, chimney_height]);\n            translate([wall_thickness, wall_thickness, 0]) {\n                cube([chimney_width - 2*wall_thickness, chimney_width - 2*wall_thickness, chimney_height]);\n            }\n        }\n    }\n}\n\nmodule window_frames() {\n    for(i = [0, 1]) {\n        // Front windows\n        translate([main_width/2 - window_width/2, -0.5, main_height/2 + i*(window_height - 2)]) {\n            cube([window_width, 1, 2]);\n        }\n        \n        // Back windows\n        translate([main_width/4 - window_width/2, main_depth - 0.5, main_height/2 + i*(window_height - 2)]) {\n            cube([window_width, 1, 2]);\n        }\n        translate([3*main_width/4 - window_width/2, main_depth - 0.5, main_height/2 + i*(window_height - 2)]) {\n            cube([window_width, 1, 2]);\n        }\n        \n        // Side windows\n        for(side = [0, 1]) {\n            translate([side < 0.5 ? 0.5 : main_width - 0.5, main_depth/2 - window_width/2, main_height/2 + i*(window_height - 2)]) {\n                cube([1, window_width, 2]);\n            }\n        }\n    }\n}\n\nmodule door_frame() {\n    // Door frame\n    translate([main_width/2 - door_width/2 - 1, -0.5, 0]) {\n        cube([door_width + 2, 1, door_height]);\n    }\n    translate([main_width/2 - door_width/2 - 1, -0.5, door_height - 1]) {\n        cube([door_width + 2, 1, 1]);\n    }\n    translate([main_width/2 - door_width/2 - 1, -0.5, 0]) {\n        cube([1, 1, door_height]);\n    }\n    translate([main_width/2 + door_width/2 + 1, -0.5, 0]) {\n        cube([1, 1, door_height]);\n    }\n}\n\n// Assemble the workhouse\nfoundation();\nwalls();\nroof();\nchimney();\nwindow_frames();\ndoor_frame();",
    "renders": true
  },
  {
    "building": "infirmary",
    "openscad_code": "// Medium-complexity realistic infirmary (≈90×70×40 mm)\n// Designed for 3D-printing: 1.2 mm walls, no steep overhangs\n\n$fa=2; $fs=0.5;\n\nmodule wall(w=1,h=1,d=1){ cube([w,h,d]); }\n\nmodule window(l,h,d,frames=1){          // louvered window\n    frame=1.2;\n    difference(){\n        cube([l,h,d]);\n        translate([frame,frame,frame]) cube([l-2*frame,h-2*frame,d]);\n    }\n    for(i=[1:frames-1])\n        translate([0,h*i/frames,0]) cube([l,frame,d]);\n}\n\nmodule door(h,w,t){                    // swing door with handle\n    difference(){\n        cube([w,h,t]);\n        translate([w/2,h-3,0]) rotate([0,90,0]) cylinder(h=2,d=1.8,$fn=16);\n    }\n    translate([w*0.8,h*0.5,t/2]) sphere(d=1.2,$fn=12);\n}\n\nmodule roof(){                          // hip roof\n    translate([0,0,35]) union(){\n        // main ridge\n        cube([80,4,10]);\n        // slopes\n        rotate([0,-20,0]) translate([40,0,-5]) cube([85,70,4]);\n        rotate([0,20,0])  translate([-40,0,-5]) cube([85,70,4]);\n    }\n}\n\nmodule sign(){                          // red-cross sign\n    translate([45,35,30]) rotate([90,0,0]) linear_extrude(1.5){\n        square([4,12],center=true);\n        square([12,4],center=true);\n    }\n}\n\nmodule chimney(){\n    translate([15,65,42]) cube([6,6,12]);\n}\n\nmodule infirmary(){\n    // base slab\n    translate([-5,-5,0]) cube([90,70,2]);\n\n    // walls\n    // front wall\n    translate([0,0,2]) wall(80,2,30);\n    difference(){\n        wall(80,2,30); // cutouts\n        translate([10,0,10]) window(20,20,2,4);\n        translate([50,0,10]) door(25,15,2);\n    }\n\n    // back wall\n    translate([0,68,2]) wall(80,2,30);\n    translate([30,68,12]) window(20,20,2,4);\n\n    // side walls\n    translate([0,0,2]) wall(2,70,30);\n    translate([78,0,2]) wall(2,70,30);\n\n    // internal dividing wall\n    translate([40,0,2]) wall(2,70,30);\n\n    // floor\n    translate([0,0,2]) cube([78,68,1.2]);\n\n    // roof\n    roof();\n    chimney();\n    sign();\n}\n\ninfirmary();",
    "renders": true
  },
  {
    "building": "hospice",
    "openscad_code": "// Hospice Building - Realistic Medium Complexity\n// Designed for 3D printing - no overhangs, 1mm walls\n\n// Overall dimensions: 80mm x 60mm x 35mm\n\n// Main building module\nmodule hospice_building() {\n    // Base foundation\n    translate([0, 0, 0])\n        cube([80, 60, 2], center=true);\n    \n    // Main structure\n    translate([0, 0, 18])\n        cube([76, 56, 32], center=true);\n    \n    // Roof with gentle slope\n    translate([0, 0, 35])\n        cube([80, 60, 2], center=true);\n    \n    // Roof ridge\n    translate([0, 0, 36.5])\n        cube([80, 4, 1], center=true);\n}\n\n// Window module for repetitive windows\nmodule window(width, height, x, y, z) {\n    // Window frame\n    translate([x, y, z])\n        cube([width+2, 2, height+2], center=true);\n    \n    // Window pane\n    translate([x, y-1.1, z])\n        cube([width, 0.5, height], center=true);\n}\n\n// Door module\nmodule main_door() {\n    // Door frame\n    translate([0, -28, 10])\n        cube([16, 2, 20], center=true);\n    \n    // Door\n    translate([0, -29, 10])\n        cube([14, 1, 18], center=true);\n    \n    // Door handle\n    translate([5, -29.5, 10])\n        cylinder(h=1, r=1, center=true);\n}\n\n// Chimney\nmodule chimney() {\n    translate([25, 20, 38])\n        cube([10, 10, 12], center=true);\n    \n    // Chimney top\n    translate([25, 20, 44])\n        cube([12, 12, 2], center=true);\n}\n\n// Small garden beds around the building\nmodule garden_beds() {\n    // Front garden bed\n    translate([0, -35, 0.5])\n        cube([60, 8, 1], center=true);\n    \n    // Side garden beds\n    for(side = [-1, 1]) {\n        translate([side*45, 0, 0.5])\n            cube([8, 40, 1], center=true);\n    }\n}\n\n// Generate the complete hospice\nunion() {\n    hospice_building();\n    \n    // Add windows - front\n    for(x = [-30, -15, 0, 15, 30]) {\n        window(10, 12, x, -27, 18);\n    }\n    \n    // Add windows - back\n    for(x = [-30, -15, 0, 15, 30]) {\n        window(10, 12, x, 27, 18);\n    }\n    \n    // Add windows - sides\n    for(y = [-20, -5, 10, 25]) {\n        window(8, 12, -37, y, 18);\n        window(8, 12, 37, y, 18);\n    }\n    \n    main_door();\n    chimney();\n    garden_beds();\n}",
    "renders": true
  },
  {
    "building": "sanitarium",
    "openscad_code": "// Sanitarium Building - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm x 50mm x 40mm\n\nwall_thickness = 2;\nscale_factor = 0.8;\n\nmodule main_building() {\n    // Main rectangular structure\n    difference() {\n        cube([80, 50, 35]);\n        translate([wall_thickness, wall_thickness, 0])\n        cube([80-2*wall_thickness, 50-2*wall_thickness, 35+1]);\n    }\n}\n\nmodule roof() {\n    // Hip roof with overhang\n    translate([-5, -5, 35])\n    difference() {\n        // Main roof structure\n        cube([90, 60, 8]);\n        \n        // Remove bottom to create slope\n        translate([0, 0, -1])\n        cube([90, 60, 8]);\n        \n        // Create hip roof angles\n        for(i = [0:45]) {\n            rotate([0, 0, i*90])\n            translate([0, 0, 8])\n            rotate([45, 0, 0])\n            cube([90, 12, 12]);\n        }\n    }\n}\n\nmodule windows() {\n    // First floor windows\n    for(x = [15:30:65]) {\n        translate([x, 1, 15])\n        difference() {\n            cube([10, wall_thickness, 12]);\n            translate([1, -1, 1])\n            cube([8, wall_thickness+2, 10]);\n        }\n        \n        translate([x, 50-wall_thickness-1, 15])\n        difference() {\n            cube([10, wall_thickness, 12]);\n            translate([1, -1, 1])\n            cube([8, wall_thickness+2, 10]);\n        }\n    }\n    \n    // Second floor windows\n    for(x = [15:30:65]) {\n        translate([x, 1, 28])\n        difference() {\n            cube([10, wall_thickness, 12]);\n            translate([1, -1, 1])\n            cube([8, wall_thickness+2, 10]);\n        }\n        \n        translate([x, 50-wall_thickness-1, 28])\n        difference() {\n            cube([10, wall_thickness, 12]);\n            translate([1, -1, 1])\n            cube([8, wall_thickness+2, 10]);\n        }\n    }\n}\n\nmodule entrance() {\n    // Main entrance with columns\n    translate([35, 1, 0])\n    difference() {\n        cube([10, 8, 20]);\n        translate([1, -1, 1])\n        cube([8, 10, 18]);\n    }\n    \n    // Left column\n    translate([32, 8, 0])\n    cylinder(h=20, r=1.5, $fn=8);\n    \n    // Right column\n    translate([48, 8, 0])\n    cylinder(h=20, r=1.5, $fn=8);\n    \n    // Entrance pediment\n    translate([30, 9, 20])\n    difference() {\n        cube([20, 4, 5]);\n        translate([0, 0, 2])\n        cube([20, 6, 5]);\n    }\n}\n\nmodule chimney() {\n    // Central chimney\n    translate([60, 30, 35])\n    difference() {\n        cube([8, 8, 15]);\n        translate([1, 1, -1])\n        cube([6, 6, 16]);\n    }\n}\n\nmodule medical_wing() {\n    // Side medical wing\n    translate([-20, 15, 0])\n    difference() {\n        cube([25, 20, 25]);\n        translate([wall_thickness, wall_thickness, 0])\n        cube([25-2*wall_thickness, 20-2*wall_thickness, 26]);\n    }\n    \n    // Medical wing roof\n    translate([-22, 13, 25])\n    difference() {\n        cube([29, 24, 5]);\n        translate([0, 0, 5])\n        rotate([45, 0, 0])\n        cube([29, 12, 12]);\n    }\n}\n\nmodule details() {\n    // Door handles on windows (horizontal bars)\n    for(x = [20:30:65]) {\n        translate([x+5, 2, 21])\n        rotate([90, 0, 0])\n        cylinder(h=8, r=0.5, $fn=6);\n        \n        translate([x+5, 50-3, 21])\n        rotate([90, 0, 0])\n        cylinder(h=8, r=0.5, $fn=6);\n    }\n    \n    // Drain pipes\n    translate([5, 48, 5])\n    cylinder(h=30, r=1, $fn=8);\n    \n    translate([75, 48, 5])\n    cylinder(h=30, r=1, $fn=8);\n}\n\n// Assemble the complete sanitarium\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    main_building();\n    roof();\n    windows();\n    entrance();\n    chimney();\n    medical_wing();\n    details();\n}",
    "renders": true
  },
  {
    "building": "lodge",
    "openscad_code": "$fs = 1;\n$fa = 2;\n\n// Overall scale\nscale_factor = 0.6;\n\n// Main lodge body\nmodule lodge_body() {\n    difference() {\n        // Main walls\n        translate([0, 0, 20]) \n            cube([60, 40, 40], center=true);\n        \n        // Door opening\n        translate([0, -19.9, 10]) \n            cube([20, 5, 30], center=true);\n        \n        // Windows - front\n        translate([-20, -19.9, 25]) \n            cube([12, 5, 15], center=true);\n        translate([20, -19.9, 25]) \n            cube([12, 5, 15], center=true);\n        \n        // Windows - back\n        translate([-20, 19.9, 25]) \n            cube([12, 5, 15], center=true);\n        translate([20, 19.9, 25]) \n            cube([12, 5, 15], center=true);\n    }\n}\n\n// Roof structure\nmodule roof() {\n    // Ridge beam\n    translate([0, 0, 42]) \n        cube([70, 5, 5], center=true);\n    \n    // Roof panels\n    translate([0, -12.5, 50]) \n        rotate([0, 0, 0]) \n        cube([70, 25, 5], center=true);\n    translate([0, 12.5, 50]) \n        rotate([0, 0, 0]) \n        cube([70, 25, 5], center=true);\n    \n    // Gable ends\n    translate([0, -25, 45]) \n        rotate([0, 30, 0]) \n        cube([70, 2, 10], center=true);\n    translate([0, 25, 45]) \n        rotate([0, -30, 0]) \n        cube([70, 2, 10], center=true);\n}\n\n// Chimney\nmodule chimney() {\n    translate([15, 10, 60]) \n        cube([8, 8, 15], center=true);\n    translate([15, 10, 68]) \n        cube([10, 10, 3], center=true);\n}\n\n// Door\nmodule door() {\n    translate([0, -18, 10]) \n        cube([18, 2, 28], center=true);\n}\n\n// Window frames\nmodule windows() {\n    // Front windows\n    translate([-20, -18, 25]) \n        cube([14, 2, 17], center=true);\n    translate([20, -18, 25]) \n        cube([14, 2, 17], center=true);\n    \n    // Back windows\n    translate([-20, 18, 25]) \n        cube([14, 2, 17], center=true);\n    translate([20, 18, 25]) \n        cube([14, 2, 17], center=true);\n}\n\n// Foundation\nmodule foundation() {\n    translate([0, 0, 0]) \n        cube([65, 45, 4], center=true);\n}\n\n// Front porch\nmodule porch() {\n    translate([0, -35, 8]) \n        cube([50, 15, 2], center=true);\n    \n    // Support posts\n    for(x = [-20, 0, 20]) {\n        translate([x, -35, 14]) \n            cylinder(h=16, r=1.5, center=true);\n    }\n    \n    // Porch roof\n    translate([0, -35, 22]) \n        cube([55, 20, 3], center=true);\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    foundation();\n    lodge_body();\n    roof();\n    chimney();\n    door();\n    windows();\n    porch();\n}",
    "renders": true
  },
  {
    "building": "inn",
    "openscad_code": "// Medieval Inn - Realistic Medium Complexity\n// 3D printable, no overhangs, walls 2mm thick\n\n$fn=32;\n\n// Main dimensions\ninn_width = 40;\ninn_depth = 30;\ninn_height = 25;\n\nmodule inn() {\n    // Foundation\n    translate([-1,-1,-2]) cube([42,32,2]);\n    \n    // Main building\n    difference() {\n        translate([0,0,0]) cube([inn_width,inn_depth,inn_height]);\n        translate([2,2,-1]) cube([inn_width-4,inn_depth-4,inn_height+2]);\n    }\n    \n    // Roof\n    translate([inn_width/2,inn_depth/2,inn_height]) rotate([0,0,45]) \n        scale([1.2,1.2,0.8]) cylinder(h=15, r1=inn_width/2-2, r2=0);\n    \n    // Door with frame\n    translate([inn_width/2-5, -0.5, 0]) {\n        difference() {\n            cube([10,2,12]);\n            translate([1,1,1]) cube([8,1,10]);\n        }\n    }\n    \n    // Windows\n    for(x=[10,inn_width-15]) {\n        translate([x, -0.5, 10]) {\n            difference() {\n                cube([6,2,6]);\n                translate([1,1,1]) cube([4,1,4]);\n            }\n        }\n    }\n    \n    // Side windows\n    for(y=[10,inn_depth-10]) {\n        translate([-0.5, y, 10]) {\n            rotate([0,0,90]) difference() {\n                cube([6,2,6]);\n                translate([1,1,1]) cube([4,1,4]);\n            }\n        }\n    }\n    \n    // Chimney\n    translate([inn_width-6, inn_depth-6, inn_height]) {\n        difference() {\n            cube([5,5,8]);\n            translate([1,1,0]) cube([3,3,8]);\n        }\n    }\n    \n    // Chimney cap\n    translate([inn_width-6.5, inn_depth-6.5, inn_height+8]) \n        cube([6,6,1]);\n    \n    // Sign post\n    translate([inn_width/2-2, -3, 12]) {\n        cylinder(h=6, r=1);\n        translate([0,-3,3]) rotate([0,90,0]) \n            scale([0.1,1,0.1]) cylinder(h=3, r=8);\n    }\n    \n    // Support beams\n    for(x=[5, inn_width-5]) {\n        translate([x, -0.5, 0]) cube([2,2,inn_height]);\n    }\n    \n    // Small barrel by door\n    translate([inn_width/2-8, -2, 0]) {\n        cylinder(h=3, r=2);\n        translate([0,0,3]) cylinder(h=1, r=2.5, r2=2);\n    }\n}\n\ninn();",
    "renders": true
  },
  {
    "building": "tavern",
    "openscad_code": "// Tavern in realistic style - medium complexity\n// Designed for 3D printing, no overhangs, 60mm x 50mm x 45mm\n\nmodule tavern() {\n    // Main building structure\n    difference() {\n        // Base building block\n        cube([45, 40, 30], center=true);\n        \n        // Door opening\n        translate([0, -20, -10])\n            cube([10, 5, 20], center=true);\n        \n        // Windows\n        for(x=[-15, 15])\n            translate([x, -20, 5])\n                cube([8, 3, 12], center=true);\n    }\n    \n    // Roof\n    translate([0, 0, 15])\n        difference() {\n            // Main roof\n            rotate([0, 90, 0])\n                cylinder(h=50, r1=25, r2=0, center=true);\n            \n            // Cut to building size\n            translate([0, 0, -10])\n                cube([47, 42, 30], center=true);\n        }\n    \n    // Chimney\n    translate([15, 10, 25])\n        cube([6, 6, 15], center=true);\n    \n    // Door\n    translate([0, -20, -5])\n        cube([9, 1, 18], center=true);\n    \n    // Window frames\n    for(x=[-15, 15]) {\n        translate([x, -19, 5])\n            difference() {\n                cube([9, 2, 13], center=true);\n                translate([0, 1, 0])\n                    cube([7, 2, 11], center=true);\n            }\n    }\n    \n    // Base foundation\n    translate([0, 0, -16])\n        cube([47, 42, 3], center=true);\n    \n    // Roof tiles using loop\n    for(i=[-20:4:20]) {\n        for(j=[-15:4:15]) {\n            translate([i, j, 15 + abs(i)/2 + 2])\n                cube([4, 4, 1], center=true);\n        }\n    }\n    \n    // Support beams\n    translate([20, 15, -13])\n        cube([3, 3, 28], center=true);\n    translate([-20, 15, -13])\n        cube([3, 3, 28], center=true);\n    translate([20, -15, -13])\n        cube([3, 3, 28], center=true);\n    translate([-20, -15, -13])\n        cube([3, 3, 28], center=true);\n    \n    // Sign post\n    translate([0, -25, 0])\n        cylinder(h=35, r=2, center=true);\n    \n    // Tavern sign\n    translate([0, -25, 15])\n        rotate([90, 0, 0])\n            cylinder(h=15, r=8, center=true);\n}\n\n// Render the tavern\ntavern();",
    "renders": true
  },
  {
    "building": "hostelry",
    "openscad_code": "// Hostelry building - realistic style, medium complexity\n// Designed for 3D printing - 60mm wide x 80mm deep x 50mm tall\n\n// Main dimensions\nwall_thickness = 2;\nmain_width = 60;\nmain_depth = 80;\nmain_height = 30;\nroof_height = 20;\n\n// Create the complete hostelry\nmodule hostelry() {\n    // Main building structure\n    difference() {\n        // Main walls\n        translate([0, 0, main_height/2])\n            cube([main_width, main_depth, main_height], center=true);\n        \n        // Door opening\n        translate([0, -main_depth/2 + wall_thickness/2, -main_height/2 + 15])\n            cube([12, wall_thickness + 1, 20], center=true);\n        \n        // Windows - front\n        for(x = [-20, -10, 10, 20])\n            translate([x, -main_depth/2 + wall_thickness/2, 5])\n                cube([6, wall_thickness + 1, 8], center=true);\n        \n        // Windows - back\n        for(x = [-20, -10, 10, 20])\n            translate([x, main_depth/2 - wall_thickness/2, 5])\n                cube([6, wall_thickness + 1, 8], center=true);\n        \n        // Windows - sides\n        for(y = [-25, -15, -5, 5, 15, 25])\n            translate([main_width/2 - wall_thickness/2, y, 5])\n                cube([wall_thickness + 1, 6, 8], center=true);\n        \n        for(y = [-25, -15, -5, 5, 15, 25])\n            translate([-main_width/2 + wall_thickness/2, y, 5])\n                cube([wall_thickness + 1, 6, 8], center=true);\n    }\n    \n    // Roof structure\n    translate([0, 0, main_height + roof_height/2])\n        cube([main_width + 10, main_depth + 10, roof_height], center=true);\n    \n    // Chimney\n    translate([main_width/2 - 10, main_depth/2 - 10, main_height + roof_height])\n        cube([8, 8, 15], center=true);\n    \n    // Door\n    translate([0, -main_depth/2 + wall_thickness, 10])\n        cube([10, 1, 18], center=true);\n    \n    // Window frames\n    // Front windows\n    for(x = [-20, -10, 10, 20]) {\n        translate([x, -main_depth/2, 5])\n            cube([8, 2, 10], center=true);\n    }\n    \n    // Back windows\n    for(x = [-20, -10, 10, 20]) {\n        translate([x, main_depth/2, 5])\n            cube([8, 2, 10], center=true);\n    }\n    \n    // Side windows\n    for(y = [-25, -15, -5, 5, 15, 25]) {\n        translate([main_width/2, y, 5])\n            cube([2, 8, 10], center=true);\n        translate([-main_width/2, y, 5])\n            cube([2, 8, 10], center=true);\n    }\n    \n    // Chimney top\n    translate([main_width/2 - 10, main_depth/2 - 10, main_height + roof_height + 7.5])\n        cube([10, 10, 2], center=true);\n    \n    // Sign above door\n    translate([0, -main_depth/2 + 5, 25])\n        rotate([0, 0, 0])\n        cube([20, 2, 5], center=true);\n}\n\n// Generate the hostelry\nhostelry();",
    "renders": true
  },
  {
    "building": "auberge",
    "openscad_code": "// Auberge (small country inn) – medium complexity – 3D-printable\n// Overall footprint: 80 mm × 70 mm × 60 mm (length × width × height)\n\n// Parameters\nwall_t     = 2;      // wall thickness for printability\nroof_h     = 20;     // main roof height\nfloor_h    = 4;      // ground-floor slab thickness\ndoor_w     = 12;\ndoor_h     = 18;\nwindow_w   = 8;\nwindow_h   = 10;\n\n// Main body\nmodule main_building() {\n    difference() {\n        // Ground floor block\n        translate([0,0,floor_h/2])\n            cube([60,50,floor_h], center=true);\n\n        // Door on front\n        translate([0,-25+wall_t/2,door_h/2+floor_h])\n            cube([door_w,wall_t+0.1,door_h], center=true);\n\n        // Side windows\n        for(y = [-15,15])\n            translate([-30+wall_t/2,y,floor_h+window_h/2+2])\n                rotate([0,90,0])\n                    cylinder(h=wall_t+0.1, d=window_w, $fn=16);\n    }\n\n    // Upper walls\n    translate([0,0,floor_h+20/2])\n        cube([60,50,20], center=true);\n\n    // Roof\n    translate([0,0,floor_h+20])\n        rotate([90,0,0])\n            cylinder(h1=roof_h, h2=0, r1=35, r2=35, $fn=4); // hip roof\n}\n\n// Chimney\nmodule chimney() {\n    translate([20,10,floor_h+20+roof_h-5])\n        cube([8,8,15], center=true);\n}\n\n// Small side extension (stable / kitchen)\nmodule side_wing() {\n    translate([40,0,2])\n        cube([35,30,16], center=true);\n\n    translate([40,0,16])\n        rotate([90,0,0])\n            cylinder(h1=10, h2=0, r1=18, r2=18, $fn=3);\n}\n\n// Window frames for realism\nmodule window_frame(x,y,z) {\n    difference() {\n        translate([x,y,z])\n            cube([window_w+2,window_h+2,2]);\n        translate([x,y,z+0.1])\n            cube([window_w,window_h,2]);\n    }\n}\n\n// Assemble\nunion() {\n    main_building();\n    chimney();\n    side_wing();\n\n    // Front window frames\n    window_frame(-15,-25, floor_h+10);\n    window_frame( 15,-25, floor_h+10);\n\n    // Side extension windows\n    window_frame(40, -12, 8);\n    window_frame(40,  12, 8);\n}",
    "renders": true
  },
  {
    "building": "posada",
    "openscad_code": "// Posada - Mexican inn style building\n// Medium complexity realistic model\n\n$fn = 32;\n\n// Main dimensions\nposada_width = 80;\nposada_depth = 60;\nposada_height = 45;\n\nmodule posada() {\n    // Base foundation\n    translate([0, 0, 1])\n    difference() {\n        cube([posada_width + 4, posada_depth + 4, 2], center = true);\n        cube([posada_width + 2, posada_depth + 2, 3], center = true);\n    }\n    \n    // Main building walls\n    union() {\n        // Front wall\n        translate([0, posada_depth/2 - 1, posada_height/2 + 1])\n        cube([posada_width, 2, posada_height], center = true);\n        \n        // Back wall\n        translate([0, -posada_depth/2 + 1, posada_height/2 + 1])\n        cube([posada_width, 2, posada_height], center = true);\n        \n        // Left wall\n        translate([-posada_width/2 + 1, 0, posada_height/2 + 1])\n        cube([2, posada_depth, posada_height], center = true);\n        \n        // Right wall\n        translate([posada_width/2 - 1, 0, posada_height/2 + 1])\n        cube([2, posada_depth, posada_height], center = true);\n    }\n    \n    // Roof structure\n    translate([0, 0, posada_height + 1])\n    difference() {\n        // Main roof\n        cube([posada_width + 6, posada_depth + 6, 2], center = true);\n        \n        // Roof overhang cavity\n        translate([0, 0, -1])\n        cube([posada_width + 2, posada_depth + 2, 4], center = true);\n    }\n    \n    // Roof tiles pattern\n    for (x = [-posada_width/2 + 3:4:posada_width/2 - 3]) {\n        for (y = [-posada_depth/2 + 3:4:posada_depth/2 - 3]) {\n            translate([x, y, posada_height + 2.5])\n            cube([3.8, 3.8, 0.5], center = true);\n        }\n    }\n    \n    // Front door\n    translate([0, posada_depth/2 - 0.5, 8])\n    difference() {\n        cube([12, 1, 16], center = true);\n        // Door handle\n        translate([4, 1, -4])\n        sphere(1);\n    }\n    \n    // Windows\n    for (wx = [-25, 25]) {\n        translate([wx, posada_depth/2 - 0.5, posada_height/2 + 5])\n        difference() {\n            cube([10, 1, 10], center = true);\n            // Window bars\n            for (i = [-3:3:3]) {\n                translate([i, 0, 0])\n                cube([0.5, 1.2, 9.5], center = true);\n            }\n        }\n    }\n    \n    // Side windows\n    translate([posada_width/2 - 0.5, 0, posada_height/2 + 5])\n    rotate([0, 0, 90])\n    difference() {\n        cube([10, 1, 10], center = true);\n        for (i = [-3:3:3]) {\n            translate([i, 0, 0])\n            cube([0.5, 1.2, 9.5], center = true);\n        }\n    }\n    \n    // Chimney\n    translate([posada_width/4, -posada_depth/4, posada_height + 3])\n    union() {\n        cube([8, 8, 12], center = true);\n        translate([0, 0, 7])\n        cube([10, 10, 2], center = true);\n    }\n    \n    // Interior floor\n    translate([0, 0, 1])\n    cube([posada_width - 2, posada_depth - 2, 1], center = true);\n    \n    // Support pillars at corners\n    pillar_diameter = 3;\n    pillar_positions = [\n        [-posada_width/2 + 2, posada_depth/2 - 2],\n        [posada_width/2 - 2, posada_depth/2 - 2],\n        [-posada_width/2 + 2, -posada_depth/2 + 2],\n        [posada_width/2 - 2, -posada_depth/2 + 2]\n    ];\n    \n    for (pos = pillar_positions) {\n        translate([pos[0], pos[1], posada_height/2 + 1])\n        cylinder(h = posada_height, d = pillar_diameter);\n    }\n    \n    // Small decorative arch above door\n    translate([0, posada_depth/2 - 1, 16])\n    difference() {\n        cube([16, 2, 4], center = true);\n        translate([0, 1, 2])\n        sphere(8);\n    }\n}\n\nposada();",
    "renders": true
  },
  {
    "building": "riad",
    "openscad_code": "// OpenSCAD Riad (Medium Realistic)\n// Overall scale factor for 3D printing\nscale_factor = 0.3;\n\nmodule riad() {\n    // Courtyard\n    courtyard_w = 80;\n    courtyard_d = 80;\n    wall_h = 25;\n    wall_t = 4;\n    \n    // Outer walls\n    difference() {\n        // Base\n        translate([0, 0, wall_h/2])\n            cube([courtyard_w + 2*wall_t, courtyard_d + 2*wall_t, wall_h], center=true);\n        \n        // Carve out courtyard\n        translate([0, 0, -1])\n            cube([courtyard_w, courtyard_d, wall_h + 2], center=true);\n    }\n    \n    // Corner towers\n    tower_r = 6;\n    tower_h = 35;\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x*(courtyard_w/2 + wall_t - tower_r), \n                      y*(courtyard_d/2 + wall_t - tower_r), tower_h/2])\n                cylinder(h=tower_h, r=tower_r, $fn=16);\n    \n    // Arched entrance on east wall\n    entrance_w = 12;\n    entrance_h = 18;\n    translate([(courtyard_w + wall_t)/2 + wall_t/2, 0, entrance_h/2])\n    difference() {\n        cube([wall_t + 1, entrance_w, entrance_h], center=true);\n        translate([wall_t/2, 0, entrance_h - 4])\n            cylinder(h=entrance_w + 2, r=4, center=true, $fn=32);\n    }\n    \n    // Fountains in courtyard\n    fountain_r = 5;\n    fountain_h = 3;\n    translate([0, 0, fountain_h/2])\n        cylinder(h=fountain_h, r=fountain_r, $fn=32);\n    \n    // Water basin\n    basin_r = 8;\n    basin_h = 2;\n    translate([0, 0, fountain_h + basin_h/2])\n    difference() {\n        cylinder(h=basin_h, r=basin_r, $fn=32);\n        cylinder(h=basin_h + 1, r=basin_r - 1, $fn=32);\n    }\n    \n    // Gallery columns\n    col_r = 2;\n    col_h = 15;\n    gallery_offset = courtyard_w/2 - 8;\n    for (i = [-1, 1])\n        for (j = [-3:3]) {\n            if (abs(j) != 3) {\n                translate([i*gallery_offset, j*10, col_h/2])\n                    cylinder(h=col_h, r=col_r, $fn=16);\n            }\n        }\n    \n    // Gallery arches\n    arch_t = 1.5;\n    for (i = [-1, 1])\n        for (j = [-2.5:2.5]) {\n            if (abs(j) < 2.6) {\n                translate([i*gallery_offset, j*10, col_h - 3])\n                    difference() {\n                        cube([arch_t, 8, 6], center=true);\n                        translate([0, 0, 2])\n                            cube([arch_t + 1, 6, 4], center=true);\n                    }\n            }\n        }\n    \n    // Roof terraces\n    roof_t = 2;\n    for (x = [-1, 1])\n        for (y = [-1, 1]) {\n            translate([x*(courtyard_w/4), y*(courtyard_d/4), wall_h + roof_t/2])\n                cube([courtyard_w/2 - wall_t, courtyard_d/2 - wall_t, roof_t], center=true);\n        }\n    \n    // Ornamental detail on towers\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x*(courtyard_w/2 + wall_t - tower_r), \n                      y*(courtyard_d/2 + wall_t - tower_r), tower_h])\n                cylinder(h=3, r=tower_r + 1, $fn=32);\n}\n\n// Apply scale and render\nscale([scale_factor, scale_factor, scale_factor])\n    riad();",
    "renders": true
  },
  {
    "building": "office",
    "openscad_code": "// OpenSCAD Realistic Office - Medium Complexity\n// 3D printable office building with furniture\n\n// Overall dimensions\noffice_w = 70;\noffice_d = 50;\noffice_h = 40;\nwall_t = 2;\n\n// Floor module\nmodule floor() {\n    color(\"tan\")\n    translate([0, 0, 0])\n    cube([office_w, office_d, wall_t], center=true);\n}\n\n// Back wall with window\nmodule back_wall() {\n    // Main wall\n    color(\"beige\")\n    translate([0, office_d/2 - wall_t/2, office_h/2])\n    cube([office_w, wall_t, office_h], center=true);\n    \n    // Window opening\n    color(\"white\")\n    translate([0, office_d/2 - wall_t, office_h/2])\n    cube([office_w/3, wall_t+0.1, office_h/2], center=true);\n    \n    // Window frame\n    color(\"brown\")\n    translate([0, office_d/2 - wall_t/2, office_h/2])\n    difference() {\n        cube([office_w/3 + 4, wall_t + 1, office_h/2 + 4], center=true);\n        translate([0, 0, 0])\n        cube([office_w/3, wall_t + 2, office_h/2], center=true);\n    }\n}\n\n// Side walls\nmodule side_wall(x_pos) {\n    color(\"beige\")\n    translate([x_pos, 0, office_h/2])\n    cube([wall_t, office_d, office_h], center=true);\n}\n\n// Door module\nmodule door() {\n    color(\"brown\")\n    translate([office_w/2 - wall_t/2, 0, office_h/4])\n    rotate([0, 90, 0])\n    cube([office_d/4, wall_t, office_h/2], center=true);\n    \n    // Door handle\n    color(\"gold\")\n    translate([office_w/2 - wall_t/2, office_d/8, office_h/3])\n    sphere(1);\n}\n\n// Desk module\nmodule desk() {\n    color(\"brown\")\n    // Desk top\n    translate([0, -office_d/4, office_h/2])\n    cube([office_w/3, office_d/4, wall_t], center=true);\n    \n    // Desk legs\n    for(x=[-office_w/6, office_w/6])\n    for(y=[-office_d/3, -office_d/6]) {\n        translate([x, y, office_h/4])\n        cube([wall_t, wall_t, office_h/2], center=true);\n    }\n}\n\n// Office chair\nmodule chair() {\n    color(\"black\")\n    // Seat\n    translate([0, -office_d/8, office_h/3])\n    cube([office_w/8, office_d/8, wall_t], center=true);\n    \n    // Backrest\n    translate([0, -office_d/12, office_h/2 + 2])\n    cube([office_w/8, wall_t, office_h/4], center=true);\n    \n    // Legs\n    for(x=[-office_w/16, office_w/16])\n    for(y=[-office_d/16, office_d/16]) {\n        translate([x, y, office_h/6])\n        cylinder(h=office_h/6, r=wall_t/2, center=true);\n    }\n}\n\n// Bookshelf\nmodule bookshelf() {\n    color(\"brown\")\n    translate([-office_w/2 + wall_t*2, office_d/4, office_h/2])\n    cube([office_w/6, office_d/6, office_h], center=true);\n    \n    // Shelves\n    for(z=[0, office_h/4, office_h/2]) {\n        translate([-office_w/2 + wall_t*2, office_d/4, z])\n        cube([office_w/6, office_d/6, wall_t/2], center=true);\n    }\n}\n\n// Computer monitor\nmodule monitor() {\n    color(\"black\")\n    // Screen\n    translate([0, -office_d/4, office_h/2 + wall_t + 3])\n    cube([office_w/6, wall_t/2, office_h/6], center=true);\n    \n    // Stand\n    translate([0, -office_d/4, office_h/2 + wall_t])\n    cylinder(h=3, r=wall_t, center=true);\n}\n\n// Assembly\nunion() {\n    floor();\n    back_wall();\n    side_wall(office_w/2 - wall_t/2);\n    side_wall(-office_w/2 + wall_t/2);\n    door();\n    desk();\n    chair();\n    bookshelf();\n    monitor();\n}",
    "renders": true
  },
  {
    "building": "store",
    "openscad_code": "// Realistic medium-complexity convenience store\n// Dimensions chosen to fit 80 mm build volume\n\n$fa = 2;\n$fs = 0.5;\n\nmodule wall(th=2) {\n    cube([40, 30, 20], center=true);\n    translate([0, 0, 1])\n        cube([40-th*2, 30-th*2, 20], center=true);\n}\n\nmodule roof() {\n    translate([0, 0, 11])\n    rotate([0, 0, 0])\n        linear_extrude(height=1, scale=1.15, slices=1)\n            square([40, 30], center=true);\n    translate([0, 0, 11])\n        cube([42, 32, 1], center=true);\n}\n\nmodule door() {\n    translate([0, -15, 0])\n    cube([8, 2, 16], center=true);\n    translate([-1, -16, -2])\n    cylinder(h=4, r=1, center=true);\n}\n\nmodule windows() {\n    for (x=[-12, 12])\n        translate([x, -15, 0])\n        cube([6, 1.5, 8], center=true);\n}\n\nmodule sign() {\n    translate([0, 0, 23])\n    cube([30, 8, 3], center=true);\n    translate([0, 0, 25])\n    rotate([0, 90, 0])\n        text(\"STORE\", size=4, h=1, center=true);\n}\n\nmodule awning() {\n    color(\"red\")\n    for (i=[-15:5:15])\n        translate([i, -15, 9])\n        rotate([90, 0, 0])\n        cylinder(h=10, r=0.5, center=false);\n    translate([0, -19, 9])\n    cube([32, 8, 0.5], center=true);\n}\n\nmodule chimney() {\n    translate([15, 10, 12])\n    cube([4, 4, 6], center=true);\n}\n\nmodule baseplate() {\n    cube([50, 40, 2], center=true);\n}\n\nunion() {\n    baseplate();\n    translate([0, 0, 1])\n    wall();\n    roof();\n    chimney();\n    color(\"white\")\n    door();\n    color(\"lightblue\")\n    windows();\n    sign();\n    awning();\n}",
    "renders": true
  },
  {
    "building": "mall",
    "openscad_code": "// Medium complexity realistic mall model\n// Overall dimensions: 80mm x 60mm x 30mm\n\n// Main building shell\nmodule main_building() {\n    // Ground floor - thicker walls\n    difference() {\n        cube([80, 60, 20], center=true);\n        translate([0, 0, 2]) cube([76, 56, 18], center=true);\n    }\n    \n    // Second floor\n    translate([0, 0, 20]) difference() {\n        cube([78, 58, 10], center=true);\n        translate([0, 0, 1]) cube([74, 54, 10], center=true);\n    }\n}\n\n// Entrance section\nmodule entrance() {\n    // Recessed entrance area\n    translate([0, -30, 0]) difference() {\n        cube([30, 5, 15], center=true);\n        translate([0, 2, 0]) cube([26, 5, 13], center=true);\n    }\n    \n    // Entrance awning supports\n    for(x = [-10, 0, 10]) {\n        translate([x, -30, 7]) cylinder(h=10, r=1, $fn=16);\n    }\n    \n    // Awning roof\n    translate([0, -30, 17]) cube([34, 6, 1], center=true);\n}\n\n// Window rows\nmodule windows() {\n    // Ground floor windows\n    for(x = [-30, -20, -10, 0, 10, 20, 30]) {\n        for(y = [25, -25]) {\n            translate([x, y, 8]) cube([6, 1, 8]);\n            // Window frames\n            translate([x, y + (y > 0 ? -1 : 1), 8]) cube([8, 1, 10]);\n        }\n    }\n    \n    // Second floor windows\n    for(x = [-25, -15, -5, 5, 15, 25]) {\n        for(y = [25, -25]) {\n            translate([x, y, 23]) cube([8, 1, 6]);\n            // Window frames\n            translate([x, y + (y > 0 ? -1 : 1), 23]) cube([10, 1, 8]);\n        }\n    }\n}\n\n// Roof details\nmodule roof() {\n    // Main roof\n    translate([0, 0, 30]) cube([82, 62, 2], center=true);\n    \n    // HVAC units\n    for(pos = [[-20, 15], [20, 15], [-20, -15], [20, -15]]) {\n        translate([pos[0], pos[1], 32]) cube([8, 8, 4], center=true);\n    }\n    \n    // Communication tower\n    translate([30, 20, 32]) {\n        cylinder(h=15, r=1, $fn=8);\n        translate([0, 0, 15]) sphere(r=2, $fn=16);\n    }\n}\n\n// Parking lot markers\nmodule parking() {\n    // Parking space lines\n    for(y = [-40, -45, -50]) {\n        for(x = [-35, -25, -15, -5, 5, 15, 25, 35]) {\n            translate([x, y, 0.1]) cube([8, 1, 0.2]);\n        }\n    }\n}\n\n// Main mall sign\nmodule sign() {\n    translate([0, 0, 25]) {\n        // Sign back\n        cube([40, 4, 8], center=true);\n        \n        // Sign text area (recessed)\n        translate([0, 1, 0]) cube([36, 1, 6], center=true);\n    }\n}\n\n// Assemble the mall\nunion() {\n    main_building();\n    entrance();\n    windows();\n    roof();\n    sign();\n    translate([0, -50, 0]) parking();\n}",
    "renders": true
  },
  {
    "building": "restaurant",
    "openscad_code": "// Simple Restaurant Building - Realistic Medium Complexity\n// Overall dimensions: 80mm x 60mm x 40mm\n\n$fn=32;\n\n// Main building shell\nmodule building_shell() {\n    difference() {\n        // Main rectangular structure\n        cube([80, 60, 40], center=true);\n        \n        // Carve out interior\n        translate([0, 0, 0])\n            cube([74, 54, 38], center=true);\n    }\n}\n\n// Roof with pitched design\nmodule pitched_roof() {\n    difference() {\n        // Main roof block\n        translate([0, 0, 30])\n            cube([90, 70, 20], center=true);\n        \n        // Remove bottom half to create slope\n        translate([0, 0, 20])\n            cube([100, 80, 40], center=true);\n    }\n    \n    // Roof ridge\n    translate([0, 0, 45])\n        cube([94, 4, 6], center=true);\n}\n\n// Windows - 4 on front/back, 2 on sides\nmodule windows() {\n    // Front windows\n    for(x=[-30, -10, 10, 30]) {\n        translate([x, -29, 10])\n            window_frame();\n    }\n    \n    // Back windows\n    for(x=[-30, -10, 10, 30]) {\n        translate([x, 29, 10])\n            window_frame();\n    }\n    \n    // Side windows\n    for(y=[-20, 20]) {\n        translate([39, y, 10])\n            rotate([0, 0, 90])\n                window_frame();\n        translate([-39, y, 10])\n            rotate([0, 0, 90])\n                window_frame();\n    }\n}\n\nmodule window_frame() {\n    difference() {\n        // Frame\n        cube([14, 2, 16]);\n        // Glass opening\n        translate([0, 0, 0])\n            cube([12, 3, 14]);\n    }\n}\n\n// Front door\nmodule entrance_door() {\n    difference() {\n        // Door frame\n        translate([0, -29, 5])\n            cube([20, 2, 20]);\n        // Door opening\n        translate([0, 0, 0])\n            cube([18, 3, 18]);\n    }\n    \n    // Door handle\n    translate([5, -30, 10])\n        cylinder(h=4, r=1);\n}\n\n// Restaurant sign above door\nmodule restaurant_sign() {\n    translate([0, -35, 25])\n        cube([30, 2, 8]);\n    \n    // Sign supports\n    translate([-15, -34, 21])\n        cube([2, 2, 4]);\n    translate([13, -34, 21])\n        cube([2, 2, 4]);\n}\n\n// Simple chimney\nmodule chimney() {\n    translate([25, 20, 40])\n        cube([10, 10, 15]);\n}\n\n// Sidewalk around building\nmodule sidewalk() {\n    difference() {\n        // Sidewalk base\n        translate([0, 0, -6])\n            cube([100, 80, 2], center=true);\n        // Cut out building footprint\n        translate([0, 0, -5])\n            cube([82, 62, 4], center=true);\n    }\n}\n\n// Combine all parts\nunion() {\n    sidewalk();\n    building_shell();\n    pitched_roof();\n    windows();\n    entrance_door();\n    restaurant_sign();\n    chimney();\n}",
    "renders": true
  },
  {
    "building": "hotel",
    "openscad_code": "// Hotel with realistic style - medium complexity\n// All dimensions in mm, scaled for 3D printing\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall scale factor\nscale_factor = 0.6;\n\n// Main building dimensions\nbuilding_width = 80 * scale_factor;\nbuilding_depth = 60 * scale_factor;\nbuilding_height = 45 * scale_factor;\nwall_thickness = 2 * scale_factor;\n\n// Entrance section\nentrance_width = 30 * scale_factor;\nentrance_height = 25 * scale_factor;\n\n// Roof parameters\nroof_overhang = 5 * scale_factor;\nroof_height = 15 * scale_factor;\n\n// Window parameters\nwindow_width = 8 * scale_factor;\nwindow_height = 10 * scale_factor;\nwindow_depth = 1 * scale_factor;\n\n// Columns for entrance\ncolumn_radius = 2 * scale_factor;\ncolumn_height = entrance_height;\n\nmodule hotel_building() {\n    // Main rectangular building\n    union() {\n        // Ground floor\n        translate([0, 0, building_height/2]) {\n            cube([building_width, building_depth, building_height], center=true);\n        }\n        \n        // Entrance projection\n        translate([0, building_depth/2 + entrance_depth/2, entrance_height/2]) {\n            cube([entrance_width, entrance_depth, entrance_height], center=true);\n        }\n        \n        // Roof structure\n        translate([0, 0, building_height + roof_height/2]) {\n            cube([building_width + roof_overhang*2, building_depth + roof_overhang*2, roof_height], center=true);\n        }\n        \n        // Entrance roof\n        translate([0, building_depth/2 + entrance_depth, entrance_height + roof_height/2]) {\n            cube([entrance_width + roof_overhang*2, entrance_depth + roof_overhang, roof_height], center=true);\n        }\n    }\n}\n\nmodule windows() {\n    // Ground floor windows\n    for (x = [-building_width/2 + 10:15:building_width/2 - 10]) {\n        // Front windows\n        translate([x, building_depth/2 + window_depth/2, building_height/2]) {\n            cube([window_width, window_depth, window_height], center=true);\n        }\n        // Back windows\n        translate([x, -building_depth/2 - window_depth/2, building_height/2]) {\n            cube([window_width, window_depth, window_height], center=true);\n        }\n    }\n    \n    // Side windows\n    for (y = [-building_depth/2 + 10:15:building_depth/2 - 10]) {\n        // Left side\n        translate([-building_width/2 - window_depth/2, y, building_height/2]) {\n            cube([window_depth, window_width, window_height], center=true);\n        }\n        // Right side\n        translate([building_width/2 + window_depth/2, y, building_height/2]) {\n            cube([window_depth, window_width, window_height], center=true);\n        }\n    }\n    \n    // Entrance section windows\n    for (y = [-entrance_depth/2 + 5:10:entrance_depth/2 - 5]) {\n        translate([entrance_width/2 + window_depth/2, building_depth/2 + y, entrance_height/2]) {\n            cube([window_depth, window_width, window_height*0.7], center=true);\n        }\n        translate([-entrance_width/2 - window_depth/2, building_depth/2 + y, entrance_height/2]) {\n            cube([window_depth, window_width, window_height*0.7], center=true);\n        }\n    }\n}\n\nmodule entrance_details() {\n    // Entrance doorway\n    translate([0, building_depth/2 + entrance_depth, entrance_height/3]) {\n        cube([entrance_width*0.6, entrance_depth + 1, entrance_height*0.6], center=true);\n    }\n    \n    // Columns at entrance\n    column_positions = [-entrance_width/2 + 5, entrance_width/2 - 5];\n    for (x = column_positions) {\n        translate([x, building_depth/2 + entrance_depth/2, column_height/2]) {\n            cylinder(h=column_height, r=column_radius, center=true);\n        }\n    }\n    \n    // Hotel sign\n    translate([0, building_depth/2 + entrance_depth + 1, entrance_height + 2]) {\n        cube([entrance_width*0.8, entrance_depth*0.3, 4], center=true);\n    }\n}\n\nmodule chimney() {\n    // Chimney on roof\n    translate([building_width/3, -building_depth/4, building_height + roof_height + 5]) {\n        cube([8, 8, 10], center=true);\n    }\n}\n\n// Main assembly\ndifference() {\n    hotel_building();\n    \n    // Cut out windows\n    windows();\n    \n    // Cut out doorway\n    translate([0, building_depth/2 + entrance_depth, entrance_height/3]) {\n        cube([entrance_width*0.6, entrance_depth + 2, entrance_height*0.6], center=true);\n    }\n}\n\n// Add entrance details\nentrance_details();\n\n// Add chimney\nchimney();",
    "renders": true
  },
  {
    "building": "bank",
    "openscad_code": "// Realistic Medium-Complexity Bank Building – OpenSCAD\n// Final footprint ≈ 60 mm × 40 mm, height ≈ 45 mm\n\n// Wall thickness for 3D-printing\nwall = 2;\n\n// Main building block\nmodule building_base() {\n    difference() {\n        cube([60, 40, 30], center = true);          // outer shell\n        translate([0, 0, 1])\n            cube([60 - wall*2, 40 - wall*2, 30], center = true); // hollow inside\n    }\n}\n\n// Pediment roof on top of columns\nmodule pediment() {\n    linear_extrude(height = 8, scale = [1, 0])\n        translate([-30, -20, 0])\n            square([60, 40]);\n}\n\n// Classical columns (Doric style)\nmodule column() {\n    cylinder(h = 12, d = 4, $fn = 16);\n}\n\n// Row of columns across the front\nmodule columns() {\n    for (x = [-24, -16, -8, 0, 8, 16, 24])\n        translate([x, -20, 15])\n            column();\n}\n\n// Entrance door\nmodule door() {\n    translate([0, -20.1, 10])\n        cube([12, wall, 20], center = true);\n}\n\n// Window module (reusable)\nmodule window() {\n    difference() {\n        cube([10, wall, 12], center = true);\n        translate([0, 0, -1])\n            cube([8, wall+1, 10], center = true);\n    }\n}\n\n// Windows on side walls\nmodule side_windows() {\n    for (z = [8, 18])\n        translate([30.1, 0, z])\n            rotate([0, 0, 90])\n                window();\n    for (z = [8, 18])\n        translate([-30.1, 0, z])\n            rotate([0, 0, 90])\n                window();\n}\n\n// Bank sign on frieze\nmodule sign() {\n    translate([0, -20, 22])\n        cube([30, wall, 6], center = true);\n}\n\n// Coin slot on roof for piggy-bank use\nmodule coin_slot() {\n    translate([0, 10, 16])\n        rotate([90, 0, 0])\n            cylinder(h = 30, d = 2, center = true);\n}\n\n// Assembly\nunion() {\n    building_base();\n    translate([0, 0, 15]) columns();\n    translate([0, 0, 22]) pediment();\n    door();\n    side_windows();\n    sign();\n    coin_slot();\n}",
    "renders": true
  },
  {
    "building": "warehouse",
    "openscad_code": "// Warehouse.scad - Realistic style, medium complexity\n// Overall dimensions ~80 x 50 x 35 mm\n\n$fn = 24;  // Smooth curves for cylinders\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main building footprint\nlength = 80;\nwidth  = 50;\nheight = 25;\n\n// Roof height\nroof_h = 10;\n\n// Door dimensions\ndoor_w = 12;\ndoor_h = 18;\n\n// Window dimensions\nwin_w = 10;\nwin_h = 8;\n\n// Main building structure\nmodule mainBuilding() {\n    difference() {\n        // Solid block\n        cube([length, width, height]);\n\n        // Hollow out inside\n        translate([wall, wall, 0])\n            cube([length-2*wall, width-2*wall, height+1]);\n    }\n}\n\n// Sloped roof with slight overhang\nmodule roof() {\n    over = 2;\n    translate([0, -over, height]) {\n        linear_extrude(height = roof_h, scale = [1, 0.8])\n            square([length+2*over, width+2*over], center = false);\n    }\n}\n\n// Large loading door on front\nmodule loadingDoor() {\n    translate([(length-door_w)/2, 0, 0]) {\n        difference() {\n            // Door frame\n            cube([door_w+2*wall, wall, door_h+wall]);\n            // Door opening\n            translate([wall, 0, wall])\n                cube([door_w, wall+1, door_h]);\n        }\n        // Actual door - slightly inset\n        translate([wall, -0.5, wall])\n            cube([door_w, wall, door_h]);\n    }\n}\n\n// Small windows along sides\nmodule windows(count = 3) {\n    spacing = (length - door_w - 20) / (count - 1);\n    for(i = [0:count-1]) {\n        translate([10 + i*spacing + door_w/2, -wall/2, height/2 - win_h/2]) {\n            difference() {\n                // Window frame\n                cube([win_w+2*wall, wall, win_h+2*wall]);\n                // Window opening\n                translate([wall, -1, wall])\n                    cube([win_w, wall+2, win_h]);\n            }\n        }\n    }\n}\n\n// Roof skylights\nmodule skylights() {\n    skylight_w = 15;\n    skylight_h = 3;\n    translate([length/2, width/2, height + roof_h - 2]) {\n        difference() {\n            cube([skylight_w, skylight_w, skylight_h], center = true);\n            translate([0, 0, -1])\n                cube([skylight_w-wall, skylight_w-wall, skylight_h+2], center = true);\n        }\n    }\n}\n\n// Simple HVAC unit on roof\nmodule hvacUnit() {\n    translate([length*0.25, width*0.25, height + roof_h]) {\n        cube([12, 8, 6]);\n    }\n}\n\n// Foundation slab\nmodule foundation() {\n    translate([-5, -5, -wall]) {\n        cube([length+10, width+10, wall]);\n    }\n}\n\n// Assembly\nunion() {\n    foundation();\n    mainBuilding();\n    roof();\n    loadingDoor();\n    windows(3);\n    \n    // Mirror windows to back\n    mirror([0, 1, 0]) {\n        translate([0, -width, 0])\n            windows(3);\n    }\n    \n    skylights();\n    hvacUnit();\n}",
    "renders": true
  },
  {
    "building": "factory",
    "openscad_code": "// Factory model - medium complexity realistic style\n// Approximate size: 80mm x 60mm x 45mm\n\n// Main building dimensions\nbuilding_w = 60;\nbuilding_d = 40;\nbuilding_h = 25;\nwall_t = 2;\n\n// Chimney dimensions\nchimney_w = 8;\nchimney_d = 8;\nchimney_h = 20;\n\n// Smokestack dimensions\nstack_w = 6;\nstack_d = 6;\nstack_h = 15;\n\n// Window dimensions\nwindow_w = 8;\nwindow_h = 10;\nwindow_t = 1;\n\n// Door dimensions\ndoor_w = 12;\ndoor_h = 18;\ndoor_t = 1;\n\n// Roof dimensions\nroof_overhang = 5;\nroof_angle = 30;\n\n// Module for windows\nmodule window(x, y, z) {\n    translate([x, y, z]) {\n        difference() {\n            cube([window_w, window_t, window_h]);\n            translate([1, -0.5, 1])\n                cube([window_w-2, window_t+1, window_h-2]);\n        }\n    }\n}\n\n// Module for roof supports\nmodule roof_support(x, y, z) {\n    translate([x, y, z]) {\n        rotate([0, 0, 45])\n            cube([3, 3, 5]);\n    }\n}\n\n// Main factory building\nmodule main_building() {\n    difference() {\n        // Main structure\n        cube([building_w, building_d, building_h]);\n        \n        // Hollow interior\n        translate([wall_t, wall_t, 0])\n            cube([building_w-2*wall_t, building_d-2*wall_t, building_h]);\n    }\n    \n    // Front windows (3 windows)\n    for(i = [-1, 0, 1]) {\n        window(i * 15, building_d, building_h/2);\n    }\n    \n    // Side windows (2 windows)\n    for(i = [-0.5, 0.5]) {\n        window(building_w, building_d/2 + i * 15, building_h/2);\n    }\n    \n    // Main door\n    translate([(building_w-door_w)/2, building_d, 0]) {\n        difference() {\n            cube([door_w, door_t, door_h]);\n            translate([1, -0.5, 1])\n                cube([door_w-2, door_t+1, door_h-2]);\n        }\n    }\n}\n\n// Chimney with smokestack\nmodule chimney() {\n    // Base chimney\n    translate([building_w-10, 5, building_h]) {\n        difference() {\n            cube([chimney_w, chimney_d, chimney_h]);\n            translate([1, 1, 0])\n                cube([chimney_w-2, chimney_d-2, chimney_h]);\n        }\n    }\n    \n    // Smokestack\n    translate([building_w-9, 6, building_h+chimney_h]) {\n        difference() {\n            cylinder(h=stack_h, r=stack_w/2);\n            cylinder(h=stack_h+1, r=stack_w/2-1);\n        }\n    }\n}\n\n// Roof structure\nmodule roof() {\n    // Roof base\n    translate([-roof_overhang/2, -roof_overhang/2, building_h]) {\n        difference() {\n            cube([building_w+roof_overhang, building_d+roof_overhang, wall_t]);\n            translate([1, 1, -1])\n                cube([building_w+roof_overhang-2, building_d+roof_overhang-2, wall_t+2]);\n        }\n    }\n    \n    // Roof supports\n    for(x = [0, building_w]) {\n        for(y = [0, building_d]) {\n            roof_support(x, y, building_h);\n        }\n    }\n    \n    // Gabled roof\n    translate([building_w/2, building_d/2, building_h+wall_t]) {\n        rotate([0, 0, 0]) {\n            linear_extrude(height=building_d+roof_overhang, center=true) {\n                polygon(points=[[-building_w/2-roof_overhang/2, 0],\n                               [building_w/2+roof_overhang/2, 0],\n                               [0, 15]]);\n            }\n        }\n    }\n}\n\n// Ventilation pipes\nmodule vents() {\n    for(i = [0, 1]) {\n        translate([10 + i*20, building_d-5, building_h+5]) {\n            difference() {\n                cylinder(h=8, r=2);\n                cylinder(h=9, r=1);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_building();\n    chimney();\n    roof();\n    vents();\n}",
    "renders": true
  },
  {
    "building": "market",
    "openscad_code": "// Simple medieval-style market stall\n// Dimensions in mm, scaled for 3D printing\n\n$fn = 32;\n\n// Main parameters\nstall_width = 80;\nstall_depth = 50;\nstall_height = 45;\nwall_thickness = 2;\nroof_overhang = 8;\n\n// Wooden posts\npost_size = 4;\npost_height = stall_height - 5;\n\n// Awning support\nawning_height = 12;\n\nmodule wooden_post(x, y) {\n    // Vertical post\n    translate([x, y, 0])\n        cube([post_size, post_size, post_height], center = false);\n}\n\nmodule market_stall() {\n    // Base platform\n    translate([-stall_width/2, -stall_depth/2, 0])\n        cube([stall_width, stall_depth, wall_thickness]);\n    \n    // Back wall\n    translate([-stall_width/2, -stall_depth/2, wall_thickness])\n        cube([stall_width, wall_thickness, stall_height - wall_thickness]);\n    \n    // Left wall\n    translate([-stall_width/2, -stall_depth/2 + wall_thickness, wall_thickness])\n        cube([wall_thickness, stall_depth - 2*wall_thickness, stall_height - wall_thickness]);\n    \n    // Right wall\n    translate([stall_width/2 - wall_thickness, -stall_depth/2 + wall_thickness, wall_thickness])\n        cube([wall_thickness, stall_depth - 2*wall_thickness, stall_height - wall_thickness]);\n    \n    // Front counter\n    translate([-stall_width/2 + 5, stall_depth/2 - wall_thickness - 8, wall_thickness])\n        cube([stall_width - 10, 8, stall_height/2]);\n    \n    // Posts at corners\n    wooden_post(-stall_width/2 + post_size/2, -stall_depth/2 + post_size/2);\n    wooden_post(stall_width/2 - 1.5*post_size, -stall_depth/2 + post_size/2);\n    wooden_post(-stall_width/2 + post_size/2, stall_depth/2 - 1.5*post_size);\n    wooden_post(stall_width/2 - 1.5*post_size, stall_depth/2 - 1.5*post_size);\n    \n    // Roof structure\n    translate([0, 0, stall_height]) {\n        // Main roof beam\n        translate([0, -roof_overhang/2, 0])\n            cube([stall_width + 2*roof_overhang, stall_depth + roof_overhang, wall_thickness]);\n        \n        // Awning supports\n        for(x = [-stall_width/2 + 10:20:stall_width/2 - 10]) {\n            translate([x, -roof_overhang/2, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = awning_height, r = 1.5, center = true);\n        }\n        \n        // Awning\n        translate([0, -roof_overhang/2 - awning_height/2, 0])\n            cube([stall_width + 2*roof_overhang, stall_depth + roof_overhang, wall_thickness/2]);\n    }\n    \n    // Simple display items\n    // Apples\n    for(i = [0:4]) {\n        translate([-stall_width/2 + 10 + i*12, 0, stall_height/2 + 5])\n            sphere(r = 3);\n    }\n    \n    // Bread loaf\n    translate([0, 5, stall_height/2 + 3])\n        scale([1, 0.7, 0.5])\n            sphere(r = 5);\n    \n    // Simple sign\n    translate([0, -stall_depth/2 - 2, stall_height - 5])\n        rotate([0, 90, 0])\n            cube([20, 2, 8]);\n}\n\n// Render the complete market stall\nmarket_stall();",
    "renders": true
  },
  {
    "building": "plaza",
    "openscad_code": "// Plaza with fountain, benches, trees and lampposts\n// Designed for 3D printing (100mm x 100mm base, ~20mm height)\n\n// Base plaza\nmodule plaza_base() {\n    difference() {\n        // Main base\n        cube([100, 100, 5], center=true);\n        \n        // Drainage channels\n        for (i = [-40, -20, 0, 20, 40]) {\n            translate([i, 0, 2.5])\n                cube([3, 100, 3], center=true);\n            translate([0, i, 2.5])\n                cube([100, 3, 3], center=true);\n        }\n    }\n}\n\n// Central fountain\nmodule fountain() {\n    union() {\n        // Base pool\n        cylinder(h=4, r=20, $fn=32);\n        \n        // Water level\n        translate([0, 0, 4])\n            cylinder(h=1, r=19.5, $fn=32);\n        \n        // Central pillar\n        translate([0, 0, 5])\n            cylinder(h=8, r=3, $fn=16);\n        \n        // Top bowl\n        translate([0, 0, 13])\n            cylinder(h=2, r=6, $fn=16);\n        \n        // Water spray\n        for (i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([3, 0, 15])\n                    cylinder(h=2, r=0.5, $fn=8);\n        }\n    }\n}\n\n// Bench module\nmodule bench() {\n    union() {\n        // Seat\n        cube([20, 6, 1.5], center=true);\n        \n        // Legs\n        translate([-8, 0, -2])\n            cube([2, 5, 4], center=true);\n        translate([8, 0, -2])\n            cube([2, 5, 4], center=true);\n        \n        // Backrest\n        translate([0, 2.5, 2.5])\n            cube([18, 1, 4], center=true);\n    }\n}\n\n// Tree module\nmodule tree() {\n    union() {\n        // Trunk\n        cylinder(h=12, r=2, $fn=8);\n        \n        // Foliage (3 layers)\n        translate([0, 0, 10])\n            sphere(r=6, $fn=12);\n        translate([0, 0, 14])\n            sphere(r=5, $fn=12);\n        translate([0, 0, 17])\n            sphere(r=4, $fn=12);\n    }\n}\n\n// Lamppost module\nmodule lamppost() {\n    union() {\n        // Base\n        cylinder(h=1, r=3, $fn=16);\n        \n        // Post\n        translate([0, 0, 10])\n            cylinder(h=18, r=1, $fn=8);\n        \n        // Light fixture\n        translate([0, 0, 19])\n            union() {\n                cylinder(h=2, r=2.5, $fn=16);\n                translate([0, 0, 2])\n                    sphere(r=2.5, $fn=16);\n            }\n    }\n}\n\n// Assemble the plaza\nunion() {\n    // Base\n    plaza_base();\n    \n    // Central fountain\n    translate([0, 0, 2.5])\n        fountain();\n    \n    // Benches around fountain\n    for (angle = [0:60:300]) {\n        rotate([0, 0, angle])\n            translate([0, 35, 2.5])\n                bench();\n    }\n    \n    // Trees at corners\n    translate([-40, -40, 2.5])\n        tree();\n    translate([40, -40, 2.5])\n        tree();\n    translate([-40, 40, 2.5])\n        tree();\n    translate([40, 40, 2.5])\n        tree();\n    \n    // Lampposts\n    translate([-30, 0, 2.5])\n        lamppost();\n    translate([30, 0, 2.5])\n        lamppost();\n    translate([0, -30, 2.5])\n        lamppost();\n    translate([0, 30, 2.5])\n        lamppost();\n}",
    "renders": true
  },
  {
    "building": "depot",
    "openscad_code": "// Realistic Medium-Complexity Railroad Depot\n// Size ~70 mm long, 3D-printable, no steep overhangs\n\n$fn = 24;          // Good balance of smoothness vs. printability\nwall = 1.2;        // Wall thickness for FDM printing\nscale = 0.7;       // Global scale so depot ≈ 70 mm long\n\nmodule depot() {\n    // Base slab\n    translate([0, 0, 0])\n        cube([70, 40, 2], center = true);\n\n    // Main building body\n    difference() {\n        translate([0, 0, 11])\n            cube([66, 36, 22], center = true);\n        // Door opening on front\n        translate([-31, 0, 11])\n            cube([4, 12, 18], center = true);\n    }\n\n    // Roof (hip style, printable in two halves)\n    translate([0, 0, 24])\n        rotate([0, 90, 0])\n            cylinder(h = 70, r1 = 20, r2 = 20, center = true);\n\n    // Four columns across front\n    for (x = [-24, -12, 0, 12, 24]) {\n        translate([x, 18, 10])\n            cylinder(h = 20, r = 1.8);\n    }\n\n    // Porch roof supported by columns\n    translate([0, 18, 20])\n        cube([60, 8, 1], center = true);\n\n    // Platform along the long side\n    translate([35, 0, 0])\n        cube([8, 44, 1.5], center = true);\n\n    // Vent on roof ridge\n    translate([0, 0, 34])\n        cube([10, 5, 3], center = true);\n\n    // Small chimney\n    translate([15, 15, 27])\n        cube([3, 3, 8]);\n\n    // Windows (recessed)\n    for (side = [-1, 1]) {\n        for (wx = [-20, 0, 20]) {\n            translate([wx, side * 17, 11])\n                cube([8, 0.5, 6], center = true);\n        }\n    }\n}\n\n// Apply global scale\nscale([scale, scale, scale]) depot();",
    "renders": true
  },
  {
    "building": "terminal",
    "openscad_code": "// Realistic Medium-Complexity Terminal\n// Approx. 95 mm wide × 50 mm deep × 30 mm tall\n// 3D-printable, no overhangs >45°, 1.5 mm wall thickness\n\n$fn = 32; // Smooth curves, printable detail\n\n// Main body shell\nmodule terminal_body() {\n    difference() {\n        // Outer block with rounded edges\n        minkowski() {\n            cube([90, 45, 25], center = true);\n            sphere(2.5);\n        }\n        // Hollow inside\n        minkowski() {\n            cube([87, 42, 22], center = true);\n            sphere(1.5);\n        }\n    }\n}\n\n// Display bezel\nmodule display_bezel() {\n    difference() {\n        // Bezel frame\n        translate([0, 12, 12])\n            cube([60, 15, 1.5], center = true);\n        // Display cut-out\n        translate([0, 12, 12.8])\n            cube([55, 10, 2], center = true);\n    }\n}\n\n// Keycap module for matrix keyboard\nmodule keycap() {\n    difference() {\n        translate([0, 0, 0.8])\n            cube([7, 7, 3.5], center = true);\n        translate([0, 0, 4.3])\n            cylinder(h = 1, r = 3, center = true);\n    }\n}\n\n// Keyboard grid\nmodule keyboard() {\n    for (x = [-30:10:30])\n        for (y = [-15:10:5])\n            translate([x, y, -10.5])\n                keycap();\n}\n\n// Ventilation grille pattern\nmodule vent_grille() {\n    for (i = [-40:5:40])\n        translate([i, -20.5, 0])\n            cube([2, 1, 20], center = true);\n}\n\n// Rear port array\nmodule rear_ports() {\n    // Power jack\n    translate([-35, 22, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 5, r = 3);\n    // Serial port\n    translate([-15, 22, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 5, r = 4);\n    // Ethernet\n    translate([5, 22, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 5, r = 5);\n    // USB\n    translate([25, 22, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 5, r = 4.5);\n}\n\n// Rubber feet\nmodule feet() {\n    for (x = [-35, 35])\n        for (y = [-15, 15])\n            translate([x, y, -15.5])\n                cylinder(h = 2, r = 3);\n}\n\n// Assembly\nunion() {\n    terminal_body();\n    display_bezel();\n    keyboard();\n    vent_grille();\n    rear_ports();\n    feet();\n}",
    "renders": true
  },
  {
    "building": "garage",
    "openscad_code": "// Medium-complexity realistic garage model\n// Approx. 80 mm long, 40 mm deep, 30 mm high\n// Designed for 3D printing: 1 mm walls, no overhangs >45°\n\n$fn = 32;  // Smooth curves\n\n/* ---------- Main assembly ---------- */\ndifference() {\n    union() {\n        garage_body();\n        roof();\n        door_assembly();\n        windows();\n        gutters();\n        base_trim();\n    }\n\n    // Remove interior for hollow shell\n    translate([2, 2, 1])\n        cube([76, 36, 28]);\n}\n\n/* ---------- Modules ---------- */\n\nmodule garage_body() {\n    // Main walls\n    difference() {\n        cube([80, 40, 30]);               // Outer shell\n        \n        // Door opening\n        translate([5, 38, 0])\n            cube([40, 5, 25]);\n        \n        // Window openings\n        translate([55, 38, 15])\n            cube([20, 5, 10]);\n    }\n}\n\nmodule roof() {\n    // Sloped roof\n    translate([-1, 39, 30])\n        rotate([0, -30, 0])\n            cube([82, 2, 20]);\n    \n    // Roof ridge cap\n    translate([39, 40, 40])\n        rotate([0, 60, 0])\n            cube([4, 2, 30]);\n}\n\nmodule door_assembly() {\n    // Garage door panels\n    for(i = [0:4]) {\n        translate([7 + i*8, 38, 1])\n            cube([6, 1, 24]);\n    }\n    \n    // Door trim\n    translate([3, 37, 0])\n        cube([44, 2, 26]);\n}\n\nmodule windows() {\n    // Window frame\n    translate([56, 37, 15.5])\n        cube([18, 2, 9]);\n    \n    // Window panes (3x2 grid)\n    for(x = [0:2]) {\n        for(y = [0:1]) {\n            translate([57 + x*6, 37.5, 16 + y*4])\n                cube([4, 1, 3]);\n        }\n    }\n}\n\nmodule gutters() {\n    // Front gutter\n    translate([0, 40, 30])\n        rotate([0, 90, 0])\n            cylinder(h=80, r=1);\n    \n    // Downspout\n    translate([5, 40, 15])\n        rotate([90, 0, 0])\n            cylinder(h=15, r=1);\n}\n\nmodule base_trim() {\n    // Foundation trim\n    translate([-1, -1, -1])\n        cube([82, 42, 1]);\n    \n    // Driveway\n    translate([10, -0.5, -1])\n        cube([60, 2, 0.5]);\n}",
    "renders": true
  },
  {
    "building": "complex",
    "openscad_code": "// Realistic medium-complexity medieval gatehouse\n// 70 mm tall, 50 mm deep, 95 mm wide\n// Wall thickness 1.6 mm throughout for 3D-printing\n// No overhangs >45°, all bridges <10 mm\n\nmodule brick_wall(w, h, d) {\n    // Simple brick texture using repeated cubes\n    for (i = [0:2:w-2])\n        for (j = [0:2:h-2])\n            translate([i, 0, j])\n                cube([2, d, 2]);\n}\n\nmodule crenellation(w, h, d) {\n    // Battlements on top of towers and wall\n    for (i = [0:4:w-4]) {\n        translate([i+2, 0, 0])\n            cube([2, d, h]);\n    }\n}\n\nmodule tower() {\n    // Main round tower, 25 mm diameter, 70 mm tall\n    difference() {\n        cylinder(h=70, d=25, $fn=64);\n        translate([0, 0, 2])\n            cylinder(h=66, d=21.8, $fn=64);  // 1.6 mm shell\n    }\n    \n    // Tower top crenellations\n    translate([-12.5, -12.5, 70])\n        crenellation(25, 5, 12.5);\n    \n    // Arrow slit\n    translate([-1.5, 12.4, 30])\n        cube([3, 1, 10]);\n}\n\nmodule gatehouse_body() {\n    // Central rectangular block between towers\n    difference() {\n        cube([45, 50, 50]);\n        translate([1.6, 1.6, 1.6])\n            cube([45-3.2, 50-3.2, 50-3.2]);\n    }\n    \n    // Gate arch\n    translate([22.5, 50, 25])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=30, d=25, $fn=32);\n                translate([0, 0, -1])\n                    cylinder(h=32, d=22, $fn=32);\n            }\n    \n    // Wooden gate planks\n    for (i = [0:2:28]) {\n        translate([8+i, 50-1.6, 12.5+2])\n            cube([2, 1.6, 25-4]);\n    }\n    \n    // Crenellations on top\n    translate([0, 0, 50])\n        crenellation(45, 5, 12.5);\n}\n\nmodule machicolation() {\n    // Overhanging parapet with murder holes\n    translate([0, -10, 60])\n        difference() {\n            cube([65, 10, 5]);\n            for (i = [5:7:65-7])\n                translate([i, -1, 1])\n                    cube([4, 12, 3]);\n        }\n}\n\n// Main assembly\nunion() {\n    // Left tower\n    translate([0, 0, 0])\n        tower();\n    \n    // Right tower\n    translate([70, 0, 0])\n        mirror([1,0,0])\n            tower();\n    \n    // Central gatehouse\n    translate([12.5, 0, 0])\n        gatehouse_body();\n    \n    // Machicolations above gate\n    translate([2.5, 12.5, 0])\n        machicolation();\n    \n    // Buttresses for support\n    for (side = [0, 1]) {\n        translate([side*70-5, 0, 0])\n            cube([5, 50, 40]);\n    }\n}",
    "renders": true
  },
  {
    "building": "gallery",
    "openscad_code": "// Medium-complexity realistic gallery\n// Dimensions: 80 mm (L) × 50 mm (W) × 40 mm (H)\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Base floor\nmodule floor() {\n    translate([0, 0, 0])\n        cube([80, 50, wall], center = true);\n}\n\n// Main rectangular gallery shell\nmodule gallery_shell() {\n    difference() {\n        // Outer box\n        translate([0, 0, 20])\n            cube([80, 50, 40], center = true);\n        // Hollow interior\n        translate([0, 0, 20])\n            cube([80 - 2*wall, 50 - 2*wall, 40], center = true);\n    }\n}\n\n// Front entrance arch\nmodule entrance() {\n    difference() {\n        // Arch block\n        translate([0, -25, 15])\n            cube([30, wall, 30], center = true);\n        // Arch opening\n        translate([0, -25, 10])\n            rotate([90, 0, 0])\n                cylinder(h = 30, d = 20, center = true);\n    }\n}\n\n// Columns along front\nmodule columns() {\n    for (x = [-30, -10, 10, 30]) {\n        translate([x, -25, 10])\n            cylinder(h = 40, d = 4, center = true);\n    }\n}\n\n// Side windows\nmodule windows() {\n    for (y = [-15, 0, 15]) {\n        translate([-40, y, 25])\n            cube([wall, 8, 8], center = true);\n    }\n    mirror([1, 0, 0]) {\n        for (y = [-15, 0, 15]) {\n            translate([-40, y, 25])\n                cube([wall, 8, 8], center = true);\n        }\n    }\n}\n\n// Roof\nmodule roof() {\n    // Flat roof\n    translate([0, 0, 40])\n        cube([80, 50, wall], center = true);\n    \n    // Simple parapet\n    difference() {\n        translate([0, 0, 41.5])\n            cube([82, 52, 3], center = true);\n        translate([0, 0, 41.5])\n            cube([78, 48, 3], center = true);\n    }\n}\n\n// Interior display pedestals\nmodule pedestals() {\n    for (x = [-20, 0, 20]) {\n        for (y = [-15, 0, 15]) {\n            translate([x, y, 1.5])\n                cube([6, 6, 3], center = true);\n        }\n    }\n}\n\n// Assemble the gallery\nunion() {\n    floor();\n    gallery_shell();\n    entrance();\n    columns();\n    windows();\n    roof();\n    pedestals();\n}",
    "renders": true
  },
  {
    "building": "lounge",
    "openscad_code": "// Realistic Lounge Chair - OpenSCAD\n// Medium complexity 3D printable model\n// Size: ~60mm wide x 70mm deep x 80mm tall\n\n$fn = 32;\n\nmodule chair_frame() {\n    // Base frame\n    difference() {\n        union() {\n            // Front legs\n            for(x = [-22, 22]) {\n                translate([x, 30, 0])\n                    cylinder(h = 40, d = 4);\n            }\n            // Back legs\n            for(x = [-22, 22]) {\n                translate([x, -30, 10])\n                    cylinder(h = 50, d = 4);\n            }\n            // Side rails\n            for(y = [-30, 30]) {\n                translate([0, y, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 44, d = 3);\n            }\n            // Back rail\n            translate([0, -30, 35])\n                rotate([0, 90, 0])\n                    cylinder(h = 44, d = 3);\n        }\n        // Remove bottom for printability\n        translate([-30, -35, -2])\n            cube([60, 70, 2]);\n    }\n}\n\nmodule seat_cushion() {\n    // Main seat\n    translate([0, 0, 40])\n        difference() {\n            cube([46, 60, 8], center = true);\n            // Rounded edges\n            translate([0, 0, 4])\n                cube([42, 56, 8], center = true);\n        }\n    \n    // Back cushion\n    translate([0, -25, 50])\n        rotate([10, 0, 0])\n            difference() {\n                cube([46, 50, 12], center = true);\n                translate([0, 0, 6])\n                    cube([42, 46, 12], center = true);\n            }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-30, 0, 50])\n        union() {\n            cube([6, 30, 15], center = true);\n            translate([0, 15, 7.5])\n                cube([6, 2, 15], center = true);\n        }\n    \n    // Right armrest\n    translate([30, 0, 50])\n        union() {\n            cube([6, 30, 15], center = true);\n            translate([0, 15, 7.5])\n                cube([6, 2, 15], center = true);\n        }\n}\n\nmodule back_support() {\n    // Vertical slats\n    for(x = [-15, -5, 5, 15]) {\n        translate([x, -30, 60])\n            cube([3, 2, 25]);\n    }\n}\n\n// Main assembly\nunion() {\n    chair_frame();\n    seat_cushion();\n    armrests();\n    back_support();\n}\n\n// Add small feet for printability\nfor(x = [-22, 22]) {\n    for(y = [-30, 30]) {\n        translate([x, y, -0.5])\n            cylinder(h = 1, d = 5);\n    }\n}",
    "renders": true
  },
  {
    "building": "parlor",
    "openscad_code": "// Realistic Parlor Room - Medium Complexity\n// Dimensions scaled for 3D printing (80mm width x 60mm depth x 50mm height)\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main room shell\nmodule room_shell() {\n    difference() {\n        // Outer walls\n        cube([80, 60, 50], center=true);\n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n            cube([80-wall_thickness*2, 60-wall_thickness*2, 50-wall_thickness], center=true);\n    }\n}\n\n// Floor with wood plank texture\nmodule floor() {\n    // Base floor\n    translate([0, 0, -25])\n        cube([80, 60, wall_thickness], center=true);\n    \n    // Wood planks\n    for(i = [-29:5:29]) {\n        translate([i, 0, -25+wall_thickness/2])\n            cube([4, 56, 0.5], center=true);\n    }\n}\n\n// Crown molding\nmodule crown_molding() {\n    for(side = [0, 1]) {\n        rotate([0, 0, side*90])\n            translate([0, 28, 22])\n                cube([76, wall_thickness, 4], center=true);\n    }\n}\n\n// Window with frame and panes\nmodule window() {\n    // Window frame\n    translate([38, 0, 10])\n        cube([wall_thickness, 20, 15], center=true);\n    \n    // Window panes\n    for(y = [-6:6:6]) {\n        for(z = [-5:5:5]) {\n            translate([38-wall_thickness/2, y, 10+z])\n                cube([wall_thickness/2, 4, 4], center=true);\n        }\n    }\n    \n    // Window sill\n    translate([38-wall_thickness, 0, 2])\n        cube([5, 22, 2], center=true);\n}\n\n// Fireplace with mantle\nmodule fireplace() {\n    // Fireplace base\n    translate([0, -28, -15])\n        cube([25, wall_thickness, 30], center=true);\n    \n    // Firebox\n    translate([0, -28+wall_thickness/2, 0])\n        cube([15, wall_thickness, 20], center=true);\n    \n    // Mantle shelf\n    translate([0, -28-wall_thickness, 10])\n        cube([30, 3, 5], center=true);\n    \n    // Chimney above\n    translate([0, -28, 20])\n        cube([10, wall_thickness, 15], center=true);\n}\n\n// Armchair\nmodule armchair() {\n    // Chair base\n    translate([15, 15, -20])\n        cube([12, 12, 8], center=true);\n    \n    // Chair back\n    translate([15, 15, -12])\n        cube([12, 3, 12], center=true);\n    \n    // Armrests\n    translate([15, 9, -15])\n        cube([12, 3, 6], center=true);\n    translate([9, 15, -15])\n        cube([3, 12, 6], center=true);\n}\n\n// Coffee table\nmodule coffee_table() {\n    // Table top\n    translate([0, 0, -15])\n        cube([15, 10, 1], center=true);\n    \n    // Table legs\n    for(x = [-6:12:12]) {\n        for(y = [-3:6:6]) {\n            translate([x, y, -22])\n                cube([1, 1, 7], center=true);\n        }\n    }\n}\n\n// Bookshelf against wall\nmodule bookshelf() {\n    // Main shelf\n    translate([-30, 0, -5])\n        cube([wall_thickness, 20, 30], center=true);\n    \n    // Shelves\n    for(z = [-10:8:16]) {\n        translate([-30, 0, z])\n            cube([wall_thickness, 18, 1], center=true);\n    }\n}\n\n// Ceiling light fixture\nmodule ceiling_light() {\n    // Ceiling mount\n    translate([0, 0, 25])\n        cube([5, 5, 2], center=true);\n    \n    // Light shade\n    cylinder(h=5, r1=4, r2=6, center=true);\n}\n\n// Assemble the parlor\nunion() {\n    room_shell();\n    floor();\n    crown_molding();\n    window();\n    mirror([1, 0, 0]) window();  // Second window on opposite wall\n    \n    fireplace();\n    armchair();\n    translate([-15, -15, 0]) armchair();  // Second chair\n    \n    coffee_table();\n    bookshelf();\n    ceiling_light();\n}",
    "renders": true
  },
  {
    "building": "center",
    "openscad_code": "// Community Center - Realistic Style, Medium Complexity\n// Dimensions: 90mm x 60mm x 35mm\n\nmodule foundation() {\n    difference() {\n        // Main concrete foundation\n        cube([90, 60, 5], center=true);\n        \n        // Drainage channels\n        for(x = [-30, 0, 30]) {\n            translate([x, -30, 2.5])\n                cube([5, 5, 3], center=true);\n        }\n    }\n}\n\nmodule walls() {\n    // Main walls with realistic thickness\n    difference() {\n        // Outer walls\n        cube([88, 58, 30], center=true);\n        \n        // Hollow interior\n        cube([80, 50, 30], center=true);\n    }\n}\n\nmodule roof() {\n    // Hip roof structure\n    difference() {\n        // Main roof body\n        translate([0, 0, 20])\n            cube([92, 62, 8], center=true);\n        \n        // Roof angle cuts\n        translate([0, 0, 20])\n            rotate([45, 0, 0])\n                cube([100, 100, 10], center=true);\n    }\n    \n    // Roof ridge\n    translate([0, 0, 26])\n        cube([4, 64, 4], center=true);\n}\n\nmodule entrance() {\n    // Main entrance with canopy\n    difference() {\n        // Entrance recess\n        translate([0, 29, 0])\n            cube([20, 2, 15], center=true);\n    }\n    \n    // Entrance canopy\n    translate([0, 31, 5])\n        cube([24, 2, 8], center=true);\n    \n    // Door frame\n    translate([0, 28.5, -5])\n        cube([16, 1, 12], center=true);\n}\n\nmodule windows() {\n    // Front windows\n    for(x = [-25, 25]) {\n        translate([x, 29, 5]) {\n            difference() {\n                cube([12, 1, 10], center=true);\n                translate([0, 0.5, 0])\n                    cube([10, 1, 8], center=true);\n            }\n        }\n    }\n    \n    // Side windows\n    for(y = [-15, 15]) {\n        translate([44.5, y, 5]) {\n            rotate([0, 0, 90])\n                difference() {\n                    cube([12, 1, 10], center=true);\n                    translate([0, 0.5, 0])\n                        cube([10, 1, 8], center=true);\n                }\n        }\n    }\n}\n\nmodule hvac_units() {\n    // Rooftop HVAC units\n    translate([-20, 0, 30]) {\n        cube([15, 20, 8], center=true);\n        translate([0, 0, 4])\n            cube([13, 18, 4], center=true);\n    }\n    \n    translate([20, 0, 30]) {\n        cube([15, 20, 8], center=true);\n        translate([0, 0, 4])\n            cube([13, 18, 4], center=true);\n    }\n}\n\nmodule flag_pole() {\n    // Flag pole at entrance\n    translate([0, 35, 10])\n        cylinder(h=25, r=1, $fn=16);\n    \n    // Flag\n    translate([2, 35, 25])\n        cube([8, 1, 5], center=true);\n}\n\n// Assemble the community center\nunion() {\n    foundation();\n    walls();\n    roof();\n    entrance();\n    windows();\n    hvac_units();\n    flag_pole();\n}",
    "renders": true
  },
  {
    "building": "exchange",
    "openscad_code": "$fn = 32;\n\n// Overall base dimensions\nbase_x = 80;\nbase_y = 60;\nbase_z = 5;\n\n// Column parameters\ncol_r = 4;\ncol_h = 35;\ncol_spacing = 18;\n\n// Roof parameters\nroof_overhang = 5;\nroof_thick = 3;\n\n// Entrance dimensions\ndoor_w = 20;\ndoor_h = 25;\n\n// Window parameters\nwin_w = 12;\nwin_h = 10;\n\n// Create the exchange building\nunion() {\n    // Foundation slab\n    translate([0, 0, base_z/2])\n        cube([base_x, base_y, base_z], center=true);\n\n    // Base walls\n    translate([0, 0, base_z + col_h/2])\n        cube([base_x - 2*col_r, base_y - 2*col_r, col_h], center=true);\n\n    // Columns along front\n    for (x = [-base_x/2 + col_spacing, 0, base_x/2 - col_spacing])\n        translate([x, base_y/2 - col_r - 1, base_z + col_h/2])\n            cylinder(r = col_r, h = col_h, center=true);\n\n    // Columns along back\n    for (x = [-base_x/2 + col_spacing, 0, base_x/2 - col_spacing])\n        translate([x, -base_y/2 + col_r + 1, base_z + col_h/2])\n            cylinder(r = col_r, h = col_h, center=true);\n\n    // Roof slab\n    translate([0, 0, base_z + col_h + roof_thick/2])\n        cube([base_x + 2*roof_overhang, base_y + 2*roof_overhang, roof_thick], center=true);\n\n    // Entrance architrave\n    translate([0, base_y/2 - col_r - 1, base_z + door_h/2])\n        cube([door_w + 10, col_r*2, door_h], center=true);\n\n    // Entrance door opening\n    translate([0, base_y/2 - col_r, base_z + door_h/2])\n        cube([door_w, col_r*2 + 1, door_h], center=true);\n\n    // Windows on sides\n    for (y = [-base_y/2 + col_r + 8, base_y/2 - col_r - 8])\n        translate([base_x/2 - col_r - 1, y, base_z + col_h/2])\n            cube([col_r*2, win_w, win_h], center=true);\n\n    // Steps\n    translate([0, base_y/2 + 4, base_z - 2])\n        cube([door_w + 8, 8, 4], center=true);\n}",
    "renders": true
  },
  {
    "building": "bazaar",
    "openscad_code": "// Bazaar market stall cluster\n// Designed for FDM printing, 0.4 mm nozzle / 0.2 mm layer height\n// Largest dimension ≈ 80 mm\n\n// Overall scale factor\nscale_factor = 1.0;\n\n// Base dimensions\nbase_w = 60 * scale_factor;\nbase_d = 40 * scale_factor;\nbase_h = 2  * scale_factor;\n\n// Stall dimensions\nstall_w = 25 * scale_factor;\nstall_d = 20 * scale_factor;\nstall_h = 20 * scale_factor;\n\n// Cloth awning\nawning_h = 10 * scale_factor;\nawning_over = 5 * scale_factor;\n\n// Table height\ntable_h = 12 * scale_factor;\n\n// Wall thickness for printability\nwall_t = 1.2 * scale_factor;\n\n// ------------------\n// Helper module: simple pitched roof\nmodule pitched_roof(w, d, h) {\n    // Two slanted panels, no overhangs\n    translate([-w/2, -d/2, 0])\n        cube([w, d, wall_t]);\n    translate([-w/2 - wall_t/2, -d/2, h])\n        rotate([0, 45, 0])\n            cube([w + wall_t, d + wall_t, wall_t]);\n    translate([-w/2 - wall_t/2, -d/2, h])\n        rotate([0, -45, 0])\n            cube([w + wall_t, d + wall_t, wall_t]);\n}\n\n// Helper module: canvas awning\nmodule awning(w, d, h, over) {\n    // Central bar\n    translate([0, 0, h])\n        cylinder(h = wall_t, r = 1 * scale_factor, $fn = 16);\n\n    // Canvas sheet\n    translate([0, d/2 + over/2, h - over/2])\n        rotate([90, 0, 0])\n            cylinder(h = d + over, r1 = w/2, r2 = w/2, $fn = 2);\n}\n\n// Helper module: stall unit\nmodule stall_unit(pos_x, pos_z) {\n    translate([pos_x, 0, pos_z]) {\n        // Floor slab\n        color(\"burlywood\")\n            translate([-stall_w/2, -stall_d/2, 0])\n                cube([stall_w, stall_d, wall_t]);\n\n        // Back wall\n        color(\"tan\")\n            translate([-stall_w/2, -stall_d/2, wall_t])\n                cube([stall_w, wall_t, stall_h]);\n\n        // Left wall\n        color(\"tan\")\n            translate([-stall_w/2, -stall_d/2, wall_t])\n                cube([wall_t, stall_d, stall_h]);\n\n        // Right wall\n        color(\"tan\")\n            translate([stall_w/2 - wall_t, -stall_d/2, wall_t])\n                cube([wall_t, stall_d, stall_h]);\n\n        // Front counter table\n        color(\"saddlebrown\")\n            translate([-stall_w/2 + wall_t, -wall_t, table_h])\n                cube([stall_w - 2*wall_t, wall_t, stall_h - table_h]);\n\n        // Awning\n        color(\"firebrick\")\n            awning(stall_w + 2*awning_over, stall_d, stall_h, awning_over);\n    }\n}\n\n// ------------------\n// Main model\n\n// Base platform\ncolor(\"darkgoldenrod\")\n    cube([base_w, base_d, base_h], center = true);\n\n// Three stalls in a row\nfor (i = [-1, 0, 1]) {\n    stall_unit(i * (stall_w + 5 * scale_factor), base_h);\n}\n\n// Central canopy (hub)\ncolor(\"goldenrod\")\n    translate([0, 0, base_h + stall_h])\n        cylinder(h = awning_h, r1 = 8 * scale_factor, r2 = 12 * scale_factor, $fn = 48);\n\n// Support poles for canopy\nfor (a = [0: 120: 359]) {\n    rotate([0, 0, a])\n        translate([6 * scale_factor, 0, base_h])\n            cylinder(h = stall_h + awning_h, r = 1 * scale_factor, $fn = 12);\n}\n\n// Tiny crates as decoration\nmodule crate(x, y) {\n    translate([x, y, base_h + wall_t])\n        color(\"sienna\")\n            cube([4 * scale_factor, 4 * scale_factor, 2 * scale_factor], center = true);\n}\n\ncrate(-10 * scale_factor, 10 * scale_factor);\ncrate(12 * scale_factor, -8 * scale_factor);\ncrate(8 * scale_factor, 12 * scale_factor);",
    "renders": true
  },
  {
    "building": "outlet",
    "openscad_code": "// Realistic 3D-printable wall outlet (US style duplex receptacle)\n// Overall plate 70 mm x 115 mm, designed to print without supports\n\nmodule rounded_cube(size, radius) {\n    // Create a cube with rounded edges\n    hull() {\n        for(x = [-1,1], y = [-1,1], z = [-1,1])\n            translate([x*(size.x/2-radius), y*(size.y/2-radius), z*(size.z/2-radius)])\n                sphere(r=radius, $fn=16);\n    }\n}\n\nmodule outlet_plate() {\n    // Main plate body\n    difference() {\n        rounded_cube([70, 115, 4], 3);\n        \n        // Screw holes (top and bottom, 3.5 mm diameter)\n        translate([0, 42, -1])\n            cylinder(h=6, d=3.5, $fn=20);\n        translate([0, -42, -1])\n            cylinder(h=6, d=3.5, $fn=20);\n        \n        // Center hole for receptacle body\n        translate([0, 0, -1])\n            cube([34, 26, 6], center=true);\n    }\n    \n    // Raised center section\n    translate([0, 0, 0.5])\n        rounded_cube([38, 30, 2], 3);\n}\n\nmodule receptacle_holes() {\n    // Two sets of rectangular slots for plug prongs\n    for(y = [-12.5, 12.5]) {\n        // Hot slot (narrow)\n        translate([-7, y, 1])\n            cube([3, 6.5, 3], center=true);\n        // Neutral slot (wider)\n        translate([7, y, 1])\n            cube([7, 6.5, 3], center=true);\n    }\n    \n    // Ground hole (round, bottom center)\n    translate([0, 0, 1])\n        cylinder(h=3, d=7, $fn=20);\n}\n\nmodule screw_head() {\n    // Flat head screw for decoration\n    cylinder(h=2, d=8, $fn=20);\n    translate([0, 0, 1])\n        cylinder(h=2, d=4.5, $fn=6);\n}\n\n// Assembly\nunion() {\n    outlet_plate();\n    \n    // Receptacle face with holes\n    translate([0, 0, 2.5]) {\n        difference() {\n            rounded_cube([34, 26, 2], 2);\n            receptacle_holes();\n        }\n    }\n    \n    // Decorative screws\n    translate([0, 42, 3.5])\n        screw_head();\n    translate([0, -42, 3.5])\n        screw_head();\n    \n    // Back box mounting tabs\n    for(x = [-28, 28])\n        translate([x, 0, 0])\n            cube([4, 110, 2]);\n}",
    "renders": true
  },
  {
    "building": "showroom",
    "openscad_code": "// Realistic Medium-Complexity Showroom (approx. 70 mm long)\n// All walls 2 mm thick, no severe overhangs, 3D-print friendly\n\n$fn = 24;               // global curve resolution\n\nmodule showroom() {\n    // Overall base slab (ground)\n    translate([0,0,-2])\n        cube([70,40,2], center=true);\n\n    // Main hall shell\n    difference() {\n        // Outer box\n        cube([65,35,25], center=true);\n\n        // Hollow interior\n        translate([0,0,1])\n            cube([61,31,24], center=true);\n    }\n\n    // Front glass façade\n    difference() {\n        translate([0,-17.5,12.5])\n            cube([59,2,24], center=true);\n\n        // Window frames\n        for(i=[-24:12:24])\n            translate([i,-17.4,12.5])\n                cube([10,0.2,20], center=true);\n    }\n\n    // Entrance doorway\n    translate([0,-17.5,10])\n        cube([10,2,18], center=true);\n\n    // Roof canopy over entrance\n    translate([0,-17.5,26])\n        cube([15,5,1], center=true);\n\n    // Side display podiums\n    module podium(x,y) {\n        translate([x,y,0]) {\n            // Base\n            cube([8,8,3], center=true);\n            // Top plate\n            translate([0,0,2.5])\n                cube([7,7,1], center=true);\n        }\n    }\n    for(px=[-20,0,20])\n        podium(px, -5);\n\n    // Support pillars along back wall\n    module pillar(x) {\n        translate([x,17.5,12.5])\n            cylinder(h=25, r=2);\n    }\n    for(px=[-25,-12,0,12,25])\n        pillar(px);\n\n    // Interior floor plate\n    translate([0,0,0])\n        cube([59,31,1], center=true);\n\n    // Ceiling spotlights\n    module spotlight(x,y) {\n        translate([x,y,24])\n            union() {\n                cylinder(h=2, r=1.5);\n                // Shade\n                translate([0,0,-1])\n                    cylinder(h=1, r1=1.5, r2=2.5);\n            }\n    }\n    for(px=[-20:10:20])\n        for(py=[-10:10:10])\n            spotlight(px, py);\n\n    // Rear service door\n    translate([0,17.5,10])\n        cube([8,2,16], center=true);\n\n    // Simple signage on front\n    translate([0,-17.5,28])\n        cube([25,2,4], center=true);\n}\n\nshowroom();",
    "renders": true
  },
  {
    "building": "atrium",
    "openscad_code": "// Atrium with surrounding portico – medium-complexity, realistic style\n// All dimensions are in millimetres; intended for FDM printing at ~1:200 scale.\n\nwall_t = 2;          // printable wall thickness\ncol_r  = 2.5;        // column radius\ncol_h  = 25;         // column height\nbase_h = 3;          // base slab thickness\nfloor_h = 1.5;       // interior floor thickness\nroof_oh = 1.5;       // roof overhang beyond colonnade\n\n// overall footprint\natrium_w = 60;\natrium_d = 60;\nportico_w = atrium_w + 2*10;\nportico_d = atrium_d + 2*10;\n\n// number of columns per side – keep odd so one lands in the centre\ncols = 5;              \nstep = portico_w/(cols-1);\n\n//---------------- main assembly ----------------\ndifference(){\n    union(){\n        // 1. solid base slab under entire portico\n        translate([0,0,-base_h])\n            cube([portico_w,portico_d,base_h], center=true);\n\n        // 2. exterior walls (hollow shell)\n        walls();\n\n        // 3. interior floor flush with inside of walls\n        translate([0,0,floor_h/2])\n            cube([atrium_w-wall_t, atrium_d-wall_t, floor_h], center=true);\n\n        // 4. peristyle colonnade\n        colonnade();\n    }\n\n    // 5. hollow interior volume\n    translate([0,0,-base_h/2-0.1])\n        cube([atrium_w-wall_t*2, atrium_d-wall_t*2, col_h+base_h+0.2], center=true);\n\n    // 6. central impluvium basin (simple depression)\n    translate([0,0,floor_h/2-0.1])\n        cube([12,12,2], center=true);\n}\n\n//---------------- modules ----------------\nmodule walls(){\n    // four wall segments forming a hollow rectangle\n    difference(){\n        cube([atrium_w, atrium_d, col_h], center=true);\n        translate([0,0,wall_t/2])\n            cube([atrium_w-wall_t*2, atrium_d-wall_t*2, col_h-wall_t], center=true);\n    }\n\n    // add simple peaked roof with printable 45° overhang\n    union(){\n        // ridge beam along long axis\n        translate([0,0,col_h])\n            cube([atrium_w+roof_oh*2, wall_t*2, wall_t*2], center=true);\n\n        // two sloped roof panels\n        for(side=[-1,1])\n            translate([0, side*(atrium_d/2+roof_oh/2), col_h+atrium_d/2])\n                rotate([side*45,0,0])\n                    cube([atrium_w+roof_oh*2, atrium_d+roof_oh*2, wall_t], center=true);\n    }\n}\n\nmodule column(x,y){\n    translate([x,y,0]){\n        // base\n        cylinder(h=base_h, r=col_r+1, $fn=16);\n        // shaft\n        cylinder(h=col_h, r=col_r, $fn=16);\n        // capital\n        translate([0,0,col_h])\n            cylinder(h=2, r=col_r+1, $fn=16);\n    }\n}\n\nmodule colonnade(){\n    // front and back rows\n    for(i=[0:cols-1]){\n        x = -portico_w/2 + i*step;\n        column(x,  portico_d/2);\n        column(x, -portico_d/2);\n    }\n\n    // left and right rows – skip corners already placed\n    for(j=[1:cols-2]){\n        y = -portico_d/2 + j*step;\n        column( portico_w/2, y);\n        column(-portico_w/2, y);\n    }\n}",
    "renders": true
  },
  {
    "building": "arcade",
    "openscad_code": "// Realistic arcade cabinet - medium complexity\n// Overall dimensions: 70mm height, 40mm width, 50mm depth\n\n// Main cabinet body module\nmodule cabinet_body() {\n    // Base cabinet structure\n    difference() {\n        // Main cabinet box\n        cube([40, 50, 60], center=true);\n        \n        // Front screen inset\n        translate([0, 25.5, 10])\n            cube([36, 2, 44], center=true);\n        \n        // Control panel cutout\n        translate([0, 25.5, -10])\n            cube([32, 2, 12], center=true);\n    }\n}\n\n// Screen/bezel assembly\nmodule screen() {\n    // Screen bezel\n    translate([0, 25, 10])\n        cube([34, 1, 40], center=true);\n    \n    // Screen glass\n    color([0.1, 0.1, 0.3, 0.8])\n    translate([0, 25.5, 10])\n        cube([32, 0.5, 38], center=true);\n    \n    // Screen details - scanlines\n    for(i = [-15:1:15]) {\n        translate([0, 25.6, i])\n            cube([30, 0.1, 0.8], center=true);\n    }\n}\n\n// Control panel with joystick and buttons\nmodule control_panel() {\n    // Control panel surface\n    translate([0, 25, -10])\n        cube([30, 2, 10], center=true);\n    \n    // Joystick base\n    cylinder(h=3, r=4, $fn=20);\n    translate([0, 0, 3])\n        cylinder(h=6, r=2, $fn=16);\n    \n    // Buttons\n    for(pos = [[-8, 0], [8, 0], [0, 6]]) {\n        translate([pos[0], pos[1], 3])\n            cylinder(h=2, r=3, $fn=16);\n        translate([pos[0], pos[1], 5])\n            cylinder(h=1, r=2.5, $fn=16);\n    }\n}\n\n// Marquee/sign at top\nmodule marquee() {\n    // Marquee box\n    translate([0, 15, 35])\n        cube([38, 8, 12], center=true);\n    \n    // Marquee front - translucent\n    color([0.9, 0.9, 0.1, 0.6])\n    translate([0, 19, 35])\n        cube([36, 0.5, 10], center=true);\n    \n    // Text blocks (simulated)\n    for(i = [-12:6:12]) {\n        translate([i, 19.5, 35])\n            cube([4, 0.2, 2], center=true);\n    }\n}\n\n// Speaker grills\nmodule speakers() {\n    // Left speaker\n    translate([-15, 25, 20])\n        cube([6, 1, 8], center=true);\n    \n    // Right speaker\n    translate([15, 25, 20])\n        cube([6, 1, 8], center=true);\n    \n    // Speaker grill details\n    for(i = [-3:1:3]) {\n        translate([-15, 25.5, 20 + i])\n            cube([5, 0.2, 0.5], center=true);\n        translate([15, 25.5, 20 + i])\n            cube([5, 0.2, 0.5], center=true);\n    }\n}\n\n// Side art/details\nmodule side_details() {\n    // Left side stripe\n    translate([-20.5, 0, 0])\n        cube([1, 50, 60], center=true);\n    \n    // Right side stripe\n    translate([20.5, 0, 0])\n        cube([1, 50, 60], center=true);\n    \n    // Base trim\n    translate([0, 0, -30.5])\n        cube([42, 52, 1], center=true);\n}\n\n// Coin door\nmodule coin_door() {\n    translate([0, 25, -20])\n        cube([8, 1, 6], center=true);\n    \n    // Coin slot\n    translate([0, 25.5, -20])\n        cube([0.5, 0.2, 2], center=true);\n    \n    // Door handle\n    translate([3, 25.5, -20])\n        cylinder(h=1, r=0.5, $fn=8);\n}\n\n// T-molding edges\nmodule tmolding() {\n    h = 60;\n    \n    // Front edges\n    for(x = [-20:40:20]) {\n        translate([x, 25, 0])\n            cube([1, 1, h], center=true);\n    }\n    \n    // Top edges\n    for(y = [-25:50:25]) {\n        translate([0, y, 30])\n            cube([42, 1, 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    cabinet_body();\n    screen();\n    \n    translate([0, 25, -10])\n        control_panel();\n    \n    marquee();\n    speakers();\n    side_details();\n    coin_door();\n    tmolding();\n}",
    "renders": true
  },
  {
    "building": "pavilion",
    "openscad_code": "// Realistic Pavilion - Medium Complexity\n// Dimensions: 60mm x 60mm x 40mm (fits 3D printer bed)\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Overall dimensions\npavilion_width = 60;\npavilion_depth = 60;\npavilion_height = 40;\nwall_thickness = 2;\npost_size = 3;\n\n// Base platform\nmodule base_platform() {\n    difference() {\n        // Main platform\n        translate([0, 0, 1.5])\n            cube([pavilion_width, pavilion_depth, 3], center=true);\n        \n        // Chamfered edges\n        translate([0, 0, 3])\n            cube([pavilion_width-4, pavilion_depth-4, 3], center=true);\n    }\n}\n\n// Corner posts\nmodule corner_posts() {\n    offset = (pavilion_width - post_size) / 2 - 2;\n    \n    for(x = [-offset, offset])\n        for(y = [-offset, offset])\n            translate([x, y, 0])\n                cylinder(h=30, d=post_size, center=false);\n}\n\n// Roof structure\nmodule roof() {\n    // Main roof\n    translate([0, 0, 30])\n        difference() {\n            // Pyramid roof\n            scale([1, 1, 0.7])\n                cylinder(h=10, d1=pavilion_width+5, d2=0, center=true);\n            \n            // Hollow interior\n            translate([0, 0, -1])\n                scale([1, 1, 0.7])\n                    cylinder(h=12, d1=pavilion_width-5, d2=0, center=true);\n        }\n    \n    // Roof overhang details\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n            translate([pavilion_width/2, 0, 29.5])\n                cube([6, 2, 1], center=true);\n    }\n}\n\n// Decorative railing\nmodule railing() {\n    bar_spacing = 5;\n    bar_count = floor((pavilion_width - 10) / bar_spacing);\n    offset = (pavilion_width - (bar_count * bar_spacing)) / 2;\n    \n    // Side railings\n    for(side = [-1, 1]) {\n        for(i = [0:bar_count]) {\n            translate([-pavilion_width/2 + offset + i * bar_spacing, \n                      side * (pavilion_depth/2 - 3), 15])\n                cube([1, 1, 15], center=true);\n        }\n    }\n    \n    // Front/back railings\n    for(side = [-1, 1]) {\n        for(i = [0:bar_count]) {\n            translate([side * (pavilion_width/2 - 3),\n                      -pavilion_depth/2 + offset + i * bar_spacing, 15])\n                cube([1, 1, 15], center=true);\n        }\n    }\n}\n\n// Floor tiles pattern\nmodule floor_tiles() {\n    tile_size = 4;\n    gap = 1;\n    total_size = tile_size + gap;\n    tiles_per_side = floor((pavilion_width - 10) / total_size);\n    offset = (pavilion_width - (tiles_per_side * total_size)) / 2;\n    \n    for(x = [0:tiles_per_side-1])\n        for(y = [0:tiles_per_side-1])\n            translate([-pavilion_width/2 + offset + x * total_size + tile_size/2,\n                      -pavilion_depth/2 + offset + y * total_size + tile_size/2,\n                      3.1])\n                cube([tile_size, tile_size, 0.5], center=true);\n}\n\n// Central support beam\nmodule support_beam() {\n    // Horizontal beams\n    for(axis = [0, 90]) {\n        rotate([0, 0, axis])\n            translate([0, 0, 28])\n                cube([pavilion_width - 4, post_size, post_size], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    base_platform();\n    corner_posts();\n    roof();\n    support_beam();\n    railing();\n    floor_tiles();\n}",
    "renders": true
  },
  {
    "building": "forum",
    "openscad_code": "// OpenSCAD Roman Forum Model\n// Medium complexity realistic style\n// 3D printable with walls 2mm thick\n\n// Forum dimensions\nforum_l = 70;\nforum_w = 50;\nforum_h = 6;\n\n// Column parameters\ncol_d = 3;\ncol_h = 25;\ncol_spacing = 10;\n\n// Base platform\nmodule base_platform() {\n    difference() {\n        // Main base\n        cube([forum_l, forum_w, forum_h], center=true);\n        \n        // Carved edge detail\n        translate([0, 0, -1])\n            cube([forum_l-2, forum_w-2, forum_h+2], center=true);\n    }\n}\n\n// Single column with base and capital\nmodule column() {\n    union() {\n        // Base\n        cylinder(h=2, d1=4, d2=3.5, $fn=16);\n        translate([0, 0, 2])\n            cylinder(h=col_h, d=col_d, $fn=16);\n        // Capital\n        translate([0, 0, col_h+2])\n            cylinder(h=2, d1=3.5, d2=4.5, $fn=16);\n    }\n}\n\n// Portico with columns\nmodule portico() {\n    for(i = [-2:2]) {\n        translate([i * col_spacing, forum_w/2 - 5, forum_h/2]) {\n            column();\n        }\n        translate([i * col_spacing, -(forum_w/2 - 5), forum_h/2]) {\n            column();\n        }\n    }\n}\n\n// Temple at one end\nmodule temple() {\n    translate([forum_l/2 - 15, 0, forum_h/2]) {\n        // Temple base\n        cube([20, 25, 5], center=true);\n        \n        // Temple columns\n        for(x = [-8, 8]) {\n            for(y = [-10, 10]) {\n                translate([x, y, 2.5])\n                    column();\n            }\n        }\n        \n        // Temple roof\n        translate([0, 0, col_h + 4])\n            cube([22, 27, 3], center=true);\n    }\n}\n\n// Central basilica\nmodule basilica() {\n    translate([-forum_l/2 + 20, 0, forum_h/2]) {\n        // Main building\n        cube([25, 20, 15], center=true);\n        \n        // Entrance columns\n        for(x = [-8, 0, 8]) {\n            translate([x, -10, 0])\n                column();\n        }\n        \n        // Roof\n        translate([0, 0, 15])\n            cube([27, 22, 2], center=true);\n    }\n}\n\n// Steps\nmodule steps() {\n    for(i = [0:4]) {\n        translate([forum_l/2 + 1 + i, 0, forum_h/2 - 1 + i])\n            cube([2, forum_w, 2], center=true);\n    }\n}\n\n// Central altar\nmodule altar() {\n    translate([0, 0, forum_h/2]) {\n        // Base\n        cube([8, 8, 2], center=true);\n        // Top\n        translate([0, 0, 3])\n            cube([6, 6, 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    base_platform();\n    portico();\n    temple();\n    basilica();\n    steps();\n    altar();\n}",
    "renders": true
  },
  {
    "building": "galleria",
    "openscad_code": "// Realistic medium-complexity Galleria\n// 3D-printable, no overhangs, 50 mm tall\n\n// Parameters\n$fs = 0.5;\n$fa = 1;\n\n// Global dimensions\nbase_w = 80;\nbase_d = 50;\nbase_h = 4;\n\nwall_th = 3;\narch_w = 10;\narch_h = 18;\n\n// Base slab\ntranslate([0, 0, base_h/2])\n    cube([base_w, base_d, base_h], center=true);\n\n// Main hall shell\nmodule hall_shell() {\n    difference() {\n        // Outer block\n        translate([0, 0, base_h + (arch_h+2)/2])\n            cube([base_w-4, base_d-4, arch_h+2], center=true);\n        // Hollow inside\n        translate([0, 0, base_h + wall_th/2])\n            cube([base_w-4-wall_th*2, base_d-4-wall_th*2, arch_h+2], center=true);\n    }\n}\n\n// Arched window\nmodule arch() {\n    hull() {\n        translate([0, -base_d/2, base_h])\n            cube([arch_w, wall_th, arch_h]);\n        translate([0, -base_d/2, base_h + arch_h])\n            cylinder(h=wall_th, r=arch_w/2, center=true);\n    }\n}\n\n// Generate arches along sides\nfor (x = [-36, -18, 0, 18, 36]) {\n    translate([x, 0, 0]) arch();\n}\n\n// Roof\ntranslate([0, 0, base_h + arch_h + 2 + 3])\n    cube([base_w-4, base_d-4, 6], center=true);\n\n// Two small interior benches\nmodule bench() {\n    translate([0, 0, 0])\n        cube([20, 6, 2], center=true);\n}\n\ntranslate([20, 0, base_h + 2]) bench();\ntranslate([-20, 0, base_h + 2]) bench();\n\n// Roof skylights (simple blocks for light shafts)\ntranslate([20, 0, base_h + arch_h + 8])\n    cylinder(h=4, r=4, $fn=16);\ntranslate([-20, 0, base_h + arch_h + 8])\n    cylinder(h=4, r=4, $fn=16);\n\n// Render the hall\nhall_shell();",
    "renders": true
  },
  {
    "building": "promenade",
    "openscad_code": "// Promenade.scad\n// Realistic medium-complexity promenade model\n// 3D printable with no overhangs, 90 mm long\n\n$fn = 36;\n\n// Overall footprint\npromenade_length = 90;\npromenade_width  = 30;\npromenade_thick  = 2;\n\n// Materials thickness for printability\nwall_thick = 1.2;\npost_diam  = 1.5;\nrail_thick = 1;\n\nmodule base_slab() {\n    // Main concrete walkway\n    difference() {\n        translate([0, 0, promenade_thick/2])\n            cube([promenade_length, promenade_width, promenade_thick], center=true);\n        \n        // Grooves for texture\n        for (i=[-promenade_length/2+5 : 5 : promenade_length/2-5]) {\n            translate([i, 0, promenade_thick-0.3])\n                cube([0.4, promenade_width-2, 0.3], center=true);\n        }\n    }\n}\n\nmodule balustrade_post(x) {\n    // Individual post with cap\n    translate([x, 0, 0])\n        union() {\n            translate([0, promenade_width/2 - post_diam/2, promenade_thick+6])\n                cylinder(h=12, d=post_diam, center=false);\n            translate([0, promenade_width/2 - post_diam/2, promenade_thick+18])\n                sphere(d=post_diam*1.4);\n        }\n}\n\nmodule balustrade() {\n    // Full railing on both sides\n    for (x=[-promenade_length/2+3 : 6 : promenade_length/2-3]) {\n        balustrade_post(x);\n        mirror([0,1,0])\n            balustrade_post(x);\n    }\n    \n    // Top rails\n    difference() {\n        translate([0, 0, promenade_thick+15])\n            cube([promenade_length, promenade_width, rail_thick], center=true);\n        // Hollow inside rails for material saving\n        translate([0, 0, promenade_thick+15])\n            cube([promenade_length-4, promenade_width-4, rail_thick+0.2], center=true);\n    }\n}\n\nmodule bench() {\n    // Simple bench with backrest\n    translate([0, -promenade_width/4, promenade_thick]) {\n        // Seat\n        cube([12, 5, 1.5], center=true);\n        // Legs\n        translate([-4.5, 0, -2.5])\n            cube([1.5, 5, 5], center=true);\n        translate([4.5, 0, -2.5])\n            cube([1.5, 5, 5], center=true);\n        // Backrest\n        translate([0, 2.5, 3.5])\n            cube([12, 1.5, 7], center=true);\n    }\n}\n\nmodule lamppost() {\n    // Decorative lamppost\n    translate([0, 0, 0]) {\n        // Pole\n        cylinder(h=22, d=post_diam*0.8, center=false);\n        // Light fixture\n        translate([0, 0, 22])\n            sphere(d=post_diam*1.8);\n        // Arm\n        rotate([0,135,0])\n            translate([0, 0, 0])\n                cylinder(h=6, d=post_diam*0.4, center=true);\n    }\n}\n\nmodule street_lamps() {\n    // Place lamps along the promenade\n    for (x=[-promenade_length/2+10 : 20 : promenade_length/2-10]) {\n        translate([x, promenade_width/2 - 4, promenade_thick])\n            lamppost();\n    }\n}\n\n// Build the promenade\nunion() {\n    base_slab();\n    balustrade();\n    // Benches every 20 mm\n    for (x=[-promenade_length/2+15 : 20 : promenade_length/2-15]) {\n        translate([x, 0, 0])\n            bench();\n    }\n    street_lamps();\n}",
    "renders": true
  },
  {
    "building": "concourse",
    "openscad_code": "// Realistic airport concourse model\n// Designed for 3D printing - no overhangs, 2mm wall thickness\n\n$fn = 32;  // Smooth curves\n\n// Main dimensions\nconc_length = 80;\nconc_width = 30;\nconc_height = 15;\nwall_thick = 2;\n\nmodule main_terminal() {\n    // Floor slab\n    translate([0, 0, 0])\n        cube([conc_length, conc_width, wall_thick], center=true);\n    \n    // Main walls\n    translate([0, conc_width/2 - wall_thick/2, conc_height/2])\n        cube([conc_length, wall_thick, conc_height], center=true);\n    translate([0, -conc_width/2 + wall_thick/2, conc_height/2])\n        cube([conc_length, wall_thick, conc_height], center=true);\n    \n    // End walls\n    translate([conc_length/2 - wall_thick/2, 0, conc_height/2])\n        cube([wall_thick, conc_width - wall_thick*2, conc_height], center=true);\n    translate([-conc_length/2 + wall_thick/2, 0, conc_height/2])\n        cube([wall_thick, conc_width - wall_thick*2, conc_height], center=true);\n}\n\nmodule gate_areas() {\n    // Gate pods along sides\n    for(i = [-1, 1]) {\n        for(pos = [-25, -10, 10, 25]) {\n            translate([pos, i * (conc_width/2 + 8), 5])\n                rotate([0, 0, i * 90])\n                gate_pod();\n        }\n    }\n}\n\nmodule gate_pod() {\n    // Pod structure\n    difference() {\n        // Main pod body\n        translate([0, 0, 0])\n            cube([16, 10, 10], center=true);\n        \n        // Jetbridge opening\n        translate([-8, 0, 3])\n            cube([wall_thick*2, 6, 4], center=true);\n    }\n    \n    // Pod roof\n    translate([0, 0, 5])\n        cube([16, 10, wall_thick], center=true);\n}\n\nmodule windows() {\n    // Side windows\n    for(side = [-1, 1]) {\n        for(pos = [-30, -20, -10, 0, 10, 20, 30]) {\n            translate([pos, side * (conc_width/2 - wall_thick), 7])\n                cube([6, 0.1, 4], center=true);\n        }\n    }\n}\n\nmodule columns() {\n    // Support columns inside concourse\n    for(pos = [-30, -15, 0, 15, 30]) {\n        translate([pos, 0, 0])\n            column();\n    }\n}\n\nmodule column() {\n    translate([0, 0, conc_height/2])\n        cylinder(h=conc_height - wall_thick, r=1.5, center=true);\n}\n\nmodule roof_structure() {\n    // Main roof\n    translate([0, 0, conc_height])\n        cube([conc_length + 4, conc_width + 4, wall_thick], center=true);\n    \n    // Roof supports\n    for(pos = [-30, -15, 0, 15, 30]) {\n        translate([pos, 0, conc_height/2 + wall_thick])\n            cube([2, conc_width - 8, conc_height/2], center=true);\n    }\n}\n\nmodule entrance() {\n    // Main entrance area\n    translate([-conc_length/2 - 5, 0, 0])\n        cube([10, 20, 12], center=true);\n    \n    // Entrance doors\n    translate([-conc_length/2 - 5, 0, 5])\n        cube([0.1, 12, 8], center=true);\n}\n\n// Assemble the concourse\nunion() {\n    main_terminal();\n    gate_areas();\n    windows();\n    columns();\n    roof_structure();\n    entrance();\n}",
    "renders": true
  },
  {
    "building": "rotunda",
    "openscad_code": "// Rotunda - Realistic Medium Complexity\n// Overall height ~70mm, diameter ~60mm\n\n// Parameters\n$fn = 32;\nwall = 2;\nbase_r = 30;\nbase_h = 5;\ndrum_r = 25;\ndrum_h = 25;\ndome_r = 25;\ncol_r = 2.5;\ncol_h = 20;\ncol_num = 8;\nstep_w = 3;\nstep_h = 1;\ndoor_w = 8;\ndoor_h = 15;\n\n// Main assembly\nunion() {\n    // Base platform with steps\n    difference() {\n        cylinder(h=base_h, r=base_r);\n        translate([0,0,base_h-step_h]) cylinder(h=step_h, r=base_r-step_w);\n    }\n    \n    // Cylindrical drum wall\n    translate([0,0,base_h]) {\n        difference() {\n            cylinder(h=drum_h, r=drum_r);\n            cylinder(h=drum_h, r=drum_r-wall);\n        }\n    }\n    \n    // Columns around drum\n    for(i=[0:col_num-1]) {\n        rotate([0,0,i*360/col_num]) translate([drum_r+col_r/2, 0, base_h+drum_h-col_h]) {\n            cylinder(h=col_h, r=col_r);\n            // Capital on column\n            translate([0,0,col_h]) cylinder(h=2, r1=col_r, r2=col_r*1.5);\n        }\n    }\n    \n    // Entablature\n    translate([0,0,base_h+drum_h]) {\n        difference() {\n            cylinder(h=3, r=drum_r+col_r+1);\n            cylinder(h=3, r=drum_r);\n        }\n    }\n    \n    // Dome\n    translate([0,0,base_h+drum_h+3]) {\n        difference() {\n            sphere(r=dome_r);\n            translate([0,0,-dome_r]) cylinder(h=dome_r, r=dome_r-wall);\n        }\n    }\n    \n    // Oculus\n    translate([0,0,base_h+drum_h+3+dome_r-8]) {\n        rotate([0,0,180]) cylinder(h=8, r1=5, r2=3);\n    }\n    \n    // Doorway\n    translate([drum_r-wall/2, 0, base_h]) rotate([0,90,0]) {\n        difference() {\n            cube([door_h, door_w, wall]);\n            translate([wall, wall/2, -1]) cube([door_h-wall*2, door_w-wall, wall+2]);\n        }\n    }\n    \n    // Lintel above door\n    translate([drum_r-wall/2, 0, base_h+door_h]) rotate([0,90,0]) {\n        cube([wall, door_w+4, 2]);\n    }\n}",
    "renders": true
  },
  {
    "building": "hub",
    "openscad_code": "// Realistic 3D-printable hub (medium complexity)\n// Overall size: 80 mm diameter wheel hub for 6-bolt pattern\n\n$fn = 64; // Smooth curves\n\n// Main hub body\nmodule hub_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h = 30, r = 40, center = true);\n        \n        // Center bore for 12mm axle\n        cylinder(h = 35, r = 6.5, center = true);\n    }\n}\n\n// Flange for spoke attachment\nmodule spoke_flange(height) {\n    difference() {\n        // Flange disk\n        cylinder(h = 4, r = 35, center = true);\n        \n        // Spoke holes (36 holes, 3-cross pattern)\n        for (i = [0:35]) {\n            rotate([0, 0, i * 10]) \n                translate([28, 0, 0])\n                    cylinder(h = 5, r = 1.2, center = true);\n        }\n        \n        // Center relief\n        cylinder(h = 5, r = 15, center = true);\n    }\n}\n\n// Disc brake mount flange\nmodule brake_flange() {\n    difference() {\n        // Mounting flange\n        cylinder(h = 6, r = 38, center = true);\n        \n        // 6-bolt pattern (44mm BCD)\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) \n                translate([22, 0, 0])\n                    cylinder(h = 8, r = 3.2, center = true);\n        }\n        \n        // Center recess for rotor\n        cylinder(h = 4, r = 17, center = true);\n    }\n}\n\n// Bearing seats\nmodule bearing_seat(side) {\n    translate([0, 0, side * 12]) {\n        difference() {\n            // Bearing seat protrusion\n            cylinder(h = 5, r = 20, center = true);\n            \n            // Bearing bore (6902 bearing: 15x28x7)\n            cylinder(h = 6, r = 7.5, center = true);\n        }\n    }\n}\n\n// Seal grooves\nmodule seal_groove(side) {\n    translate([0, 0, side * 15]) {\n        difference() {\n            cylinder(h = 2, r = 25, center = true);\n            cylinder(h = 3, r = 22, center = true);\n        }\n    }\n}\n\n// Axle end caps\nmodule end_cap(side) {\n    translate([0, 0, side * 18]) {\n        difference() {\n            // Cap body\n            cylinder(h = 5, r = 25, center = true);\n            \n            // Center hole for axle\n            cylinder(h = 6, r = 6, center = true);\n            \n            // Tool notches (4 notches)\n            for (i = [0:3]) {\n                rotate([0, 0, i * 90]) \n                    translate([20, 0, 0])\n                        cube([8, 3, 6], center = true);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Hub body\n    hub_body();\n    \n    // Spoke flanges (both sides)\n    translate([0, 0, 12]) spoke_flange(0);\n    translate([0, 0, -12]) mirror([0, 0, 1]) spoke_flange(0);\n    \n    // Brake rotor mount (drive side)\n    translate([0, 0, 18]) brake_flange();\n    \n    // Bearing seats\n    bearing_seat(1);\n    bearing_seat(-1);\n    \n    // Seal grooves\n    seal_groove(1);\n    seal_groove(-1);\n    \n    // End caps\n    end_cap(1);\n    end_cap(-1);\n}",
    "renders": true
  },
  {
    "building": "quadrangle",
    "openscad_code": "// Realistic Quadrangle Courtyard Building\n// A medium-complexity quadrangle structure with realistic architectural details\n// All printable with no severe overhangs\n\n// Parameters\nwall_thickness = 2;           // 2mm walls for printing\nmain_length = 90;             // Overall length\nmain_width = 70;              // Overall width\nbuilding_height = 15;         // Single story height\ncourtyard_offset = 20;        // Courtyard opening size\nroof_thickness = 3;           // Flat roof thickness\nwindow_size = 8;              // Window opening size\ndoor_size = 12;               // Door opening size\ncolumn_radius = 2;            // Column radius\ncolumn_height = 14;           // Column height\n\n// Main building module\nmodule quadrangle_building() {\n    // Outer walls\n    difference() {\n        // Full outer wall structure\n        union() {\n            // Long walls\n            translate([-main_length/2, -main_width/2, 0])\n                cube([main_length, wall_thickness, building_height]);\n            translate([-main_length/2, main_width/2-wall_thickness, 0])\n                cube([main_length, wall_thickness, building_height]);\n            \n            // Short walls\n            translate([-main_length/2, -main_width/2, 0])\n                cube([wall_thickness, main_width, building_height]);\n            translate([main_length/2-wall_thickness, -main_width/2, 0])\n                cube([wall_thickness, main_width, building_height]);\n        }\n        \n        // Courtyard opening\n        translate([-courtyard_offset/2, -courtyard_offset/2, 0])\n            cube([courtyard_offset, courtyard_offset, building_height+1]);\n    }\n    \n    // Inner courtyard walls\n    translate([-courtyard_offset/2-wall_thickness, -courtyard_offset/2-wall_thickness, 0]) {\n        // Left inner wall\n        cube([wall_thickness, courtyard_offset+wall_thickness*2, building_height]);\n        \n        // Right inner wall\n        translate([courtyard_offset+wall_thickness, 0, 0])\n            cube([wall_thickness, courtyard_offset+wall_thickness*2, building_height]);\n        \n        // Front inner wall\n        translate([wall_thickness, -courtyard_offset/2-wall_thickness, 0])\n            cube([courtyard_offset, wall_thickness, building_height]);\n        \n        // Back inner wall\n        translate([wall_thickness, courtyard_offset/2, 0])\n            cube([courtyard_offset, wall_thickness, building_height]);\n    }\n}\n\n// Roof structure\nmodule roof() {\n    color(\"gray\", 0.8)\n    translate([-main_length/2, -main_width/2, building_height])\n        cube([main_length, main_width, roof_thickness]);\n    \n    // Courtyard opening in roof\n    translate([-courtyard_offset/2, -courtyard_offset/2, building_height])\n        cube([courtyard_offset, courtyard_offset, roof_thickness+1]);\n}\n\n// Window module\nmodule window(x, y, z, rotation=0) {\n    translate([x, y, z])\n    rotate([0, 0, rotation])\n    difference() {\n        // Window frame\n        cube([window_size+2, wall_thickness+2, window_size+2]);\n        \n        // Window opening\n        translate([1, 0, 1])\n            cube([window_size, wall_thickness+4, window_size]);\n    }\n}\n\n// Door module\nmodule door(x, y, z) {\n    translate([x, y, z])\n    difference() {\n        // Door frame\n        cube([door_size+4, wall_thickness+2, door_size+6]);\n        \n        // Door opening\n        translate([2, 0, 2])\n            cube([door_size, wall_thickness+4, door_size+4]);\n    }\n}\n\n// Columns for courtyard\nmodule columns() {\n    color(\"white\")\n    for(i = [-1:1]) {\n        for(j = [-1:1]) {\n            if(i != 0 || j != 0) {\n                translate([i*courtyard_offset/2, j*courtyard_offset/2, 0])\n                    cylinder(h=column_height, r=column_radius, $fn=16);\n            }\n        }\n    }\n}\n\n// Ground base\nmodule ground_base() {\n    color(\"green\", 0.3)\n    translate([-main_length/2-5, -main_width/2-5, -1])\n        cube([main_length+10, main_width+10, 1]);\n}\n\n// Generate complete model\nground_base();\nquadrangle_building();\n\n// Add windows\nwindow(-main_length/2+15, -main_width/2, 5);\nwindow(-main_length/2+30, -main_width/2, 5);\nwindow(-main_length/2+15, main_width/2-wall_thickness, 5);\nwindow(-main_length/2+30, main_width/2-wall_thickness, 5);\nwindow(-main_length/2, -main_width/2+15, 5, 90);\nwindow(-main_length/2, -main_width/2+30, 5, 90);\nwindow(main_length/2-wall_thickness, -main_width/2+15, 5, 90);\nwindow(main_length/2-wall_thickness, -main_width/2+30, 5, 90);\n\n// Add doors\ndoor(-courtyard_offset/2-wall_thickness/2, -courtyard_offset/2-wall_thickness, 0);\ndoor(courtyard_offset/2+wall_thickness/2, courtyard_offset/2+wall_thickness, 0, 180);\n\n// Add columns\ncolumns();\n\n// Add roof\nroof();",
    "renders": true
  },
  {
    "building": "esplanade",
    "openscad_code": "// Realistic-style Esplanade (Medium Complexity)\n// 3D printable, no overhangs, wall thickness >=1mm\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\nesplanade_len = 90;\nesplanade_wid = 60;\nbase_thick = 3;\nwall_height = 6;\n\n// Module: brick pattern for pavement\nmodule brick_tile(size_x, size_y, h) {\n    for(i=[0:3:size_x-3]) {\n        for(j=[0:6:size_y-6]) {\n            translate([i, j, 0])\n                cube([3, 6, h]);\n            translate([i+1.5, j+3, 0])\n                cube([3, 6, h]);\n        }\n    }\n}\n\n// Module: bench with backrest\nmodule bench(x, y, angle) {\n    translate([x, y, base_thick])\n    rotate([0,0,angle])\n    union() {\n        // seat\n        color(\"brown\")\n        translate([0,0,3])\n            cube([20, 4, 1], center=true);\n        // legs\n        color(\"brown\")\n        for(side=[-8,8])\n            translate([side,0,1.5])\n                cube([1.5, 3.5, 3], center=true);\n        // backrest\n        color(\"brown\")\n        translate([0,-2.5,5])\n            cube([20, 1, 3], center=true);\n        // support bars\n        color(\"brown\")\n        translate([0,-1.5,3.5])\n            cube([19, 0.5, 0.5], center=true);\n    }\n}\n\n// Module: lamp post\nmodule lamp_post(x, y) {\n    translate([x, y, base_thick])\n    union() {\n        // pole\n        color(\"gray\")\n        cylinder(h=18, d=2, $fn=12);\n        // lamp head\n        color(\"yellow\")\n        translate([0,0,18])\n            sphere(d=5);\n    }\n}\n\n// Module: tree\nmodule tree(x, y) {\n    translate([x, y, base_thick])\n    union() {\n        // trunk\n        color(\"brown\")\n        cylinder(h=10, d=3, $fn=8);\n        // foliage (3 intersecting spheres)\n        color(\"green\")\n        translate([0,0,10])\n            sphere(d=8);\n        translate([-2,0,12])\n            sphere(d=7);\n        translate([2,0,12])\n            sphere(d=7);\n    }\n}\n\n// Base esplanade platform\ndifference() {\n    // main platform\n    color(\"lightgray\")\n    cube([esplanade_len, esplanade_wid, base_thick], center=false);\n\n    // drainage groove around edge\n    color(\"gray\")\n    translate([2,2,-0.1])\n        cube([esplanade_len-4, esplanade_wid-4, 0.5]);\n}\n\n// Brick pavement\ntranslate([5,5,base_thick])\n    brick_tile(esplanade_len-10, esplanade_wid-10, 1);\n\n// Perimeter low walls\nmodule wall_seg(len, wid, h) {\n    difference() {\n        cube([len, wid, h]);\n        translate([1,1,-0.1])\n            cube([len-2, wid-2, h+0.2]);\n    }\n}\n\n// front wall\ntranslate([0, esplanade_wid-2, base_thick])\n    wall_seg(esplanade_len, 2, wall_height);\n\n// back wall\ntranslate([0, 0, base_thick])\n    wall_seg(esplanade_len, 2, wall_height);\n\n// left wall\ntranslate([0, 2, base_thick])\n    wall_seg(2, esplanade_wid-4, wall_height);\n\n// right wall\ntranslate([esplanade_len-2, 2, base_thick])\n    wall_seg(2, esplanade_wid-4, wall_height);\n\n// Central fountain\ntranslate([esplanade_len/2, esplanade_wid/2, base_thick+1])\ndifference() {\n    // outer bowl\n    color(\"lightblue\")\n    cylinder(h=4, d1=18, d2=16, $fn=32);\n    // inner hollow\n    translate([0,0,1])\n        cylinder(h=4, d1=14, d2=12, $fn=32);\n    // water surface\n    color(\"blue\")\n    translate([0,0,0.5])\n        cylinder(h=0.5, d=14, $fn=32);\n}\n\n// Fountain spout\ntranslate([esplanade_len/2, esplanade_wid/2, base_thick+5])\n    color(\"gray\")\n    cylinder(h=3, d=2, $fn=12);\n\n// Benches\nbench(esplanade_len*0.3, esplanade_wid*0.25, 0);\nbench(esplanade_len*0.7, esplanade_wid*0.25, 0);\nbench(esplanade_len*0.3, esplanade_wid*0.75, 180);\nbench(esplanade_len*0.7, esplanade_wid*0.75, 180);\n\n// Lamp posts\nlamp_post(esplanade_len*0.2, esplanade_wid*0.15);\nlamp_post(esplanade_wid*0.8, esplanade_wid*0.15);\nlamp_post(esplanade_len*0.2, esplanade_wid*0.85);\nlamp_post(esplanade_wid*0.8, esplanade_wid*0.85);\n\n// Trees\ntree(10, 10);\ntree(esplanade_len-10, 10);\ntree(10, esplanade_wid-10);\ntree(esplanade_len-10, esplanade_wid-10);\n\n// Decorative corner pillars\nmodule pillar(x,y) {\n    translate([x,y,base_thick])\n    union() {\n        color(\"white\")\n        cylinder(h=wall_height, d=4, $fn=16);\n        color(\"white\")\n        translate([0,0,wall_height])\n            sphere(d=4);\n    }\n}\n\npillar(2,2);\npillar(esplanade_len-2,2);\npillar(2,esplanade_wid-2);\npillar(esplanade_len-2,esplanade_wid-2);",
    "renders": true
  },
  {
    "building": "walkway",
    "openscad_code": "// Realistic 3D-printable walkway (medium complexity)\n// Dimensions fit ~80 mm print volume\n\n// Global parameters\nwalkway_length = 70;\nwalkway_width = 20;\nslab_thickness = 2;\ngap = 1.2;\nnum_slabs = 12;\n\n// Handrail posts\npost_width = 1.6;\npost_height = 8;\npost_spacing = walkway_length/6;\n\n// Slab module with rounded top edges to avoid overhangs\nmodule slab(len, wid, thick, gap) {\n    difference() {\n        // Main slab\n        translate([0, 0, thick/2])\n            cube([len - gap, wid, thick], center=true);\n        \n        // Rounded top edges\n        for(x = [-len/2+gap/2+1, len/2-gap/2-1])\n            translate([x, 0, thick-0.5])\n                scale([1, wid/2, 1])\n                    sphere(r=0.5, $fn=8);\n    }\n}\n\n// Handrail post with beveled top\nmodule post(w, h) {\n    difference() {\n        union() {\n            // Post body\n            translate([0, 0, h/2])\n                cube([w, w, h], center=true);\n            \n            // Beveled cap\n            translate([0, 0, h])\n                cylinder(h=1, r1=w/2, r2=w/2-0.2, $fn=16);\n        }\n        \n        // Screw hole (optional)\n        translate([0, 0, h/2])\n            rotate([90, 0, 0])\n                cylinder(h=w+1, r=0.5, $fn=12);\n    }\n}\n\n// Handrail\nmodule handrail(len) {\n    hull() {\n        translate([0, 0, 0])\n            sphere(r=1, $fn=12);\n        translate([len, 0, 0])\n            sphere(r=1, $fn=12);\n    }\n}\n\n// Walkway assembly\nunion() {\n    // Concrete slabs\n    for(i = [0:num_slabs-1]) {\n        translate([i*(walkway_length/num_slabs) - walkway_length/2 + walkway_length/(num_slabs*2), 0, 0])\n            slab(walkway_length/num_slabs, walkway_width, slab_thickness, gap);\n    }\n    \n    // Left handrail\n    translate([0, -walkway_width/2 - post_width/2 - 2, 0]) {\n        // Posts\n        for(i = [0:5]) {\n            translate([i*post_spacing - post_spacing*2.5, 0, 0])\n                post(post_width, post_height);\n        }\n        \n        // Top rail\n        translate([0, 0, post_height])\n            handrail(walkway_length);\n    }\n    \n    // Right handrail\n    translate([0, walkway_width/2 + post_width/2 + 2, 0]) {\n        // Posts\n        for(i = [0:5]) {\n            translate([i*post_spacing - post_spacing*2.5, 0, 0])\n                post(post_width, post_height);\n        }\n        \n        // Top rail\n        translate([0, 0, post_height])\n            handrail(walkway_length);\n    }\n    \n    // Support base (thin plate for print bed adhesion)\n    translate([0, 0, -0.3])\n        cube([walkway_length+4, walkway_width+8, 0.6], center=true);\n}",
    "renders": true
  },
  {
    "building": "passage",
    "openscad_code": "// Realistic Passage - Medium Complexity\n// A stone corridor with archways and floor details\n\n$fn = 32;  // Smooth curves for printing\n\nmodule stone_block(w, h, d) {\n    // Slightly irregular stone block for realistic look\n    translate([rand(-0.2,0.2), rand(-0.2,0.2), rand(-0.2,0.2)])\n    cube([w + rand(-0.1,0.1), h + rand(-0.1,0.1), d + rand(-0.1,0.1)]);\n}\n\nmodule archway(width, height, depth) {\n    // Stone arch with keystone\n    pillar_width = width * 0.15;\n    \n    // Left pillar\n    for(i = [0:7]) {\n        translate([-width/2 - pillar_width/2, 0, i*height/8])\n        stone_block(pillar_width, height/8, depth);\n    }\n    \n    // Right pillar\n    for(i = [0:7]) {\n        translate([width/2 + pillar_width/2, 0, i*height/8])\n        stone_block(pillar_width, height/8, depth);\n    }\n    \n    // Arch stones\n    arch_radius = width/2 + pillar_width/2;\n    for(a = [0:15]) {\n        angle = a * 180/15;\n        x = cos(angle) * arch_radius;\n        z = sin(angle) * arch_radius + height;\n        translate([x, 0, z])\n        rotate([0, -angle, 0])\n        stone_block(2, 1, depth);\n    }\n    \n    // Keystone\n    translate([0, 0, height + arch_radius])\n    stone_block(pillar_width*1.5, 2, depth);\n}\n\nmodule floor_tile(x, y) {\n    // Individual floor stone with slight texture\n    translate([x, y, 0])\n    cube([4.8, 4.8, 1.2]);\n    \n    // Mortar gap\n    translate([x+2.4, y+2.4, 1.1])\n    cube([0.2, 0.2, 0.1]);\n}\n\nmodule wall_section(length, height, thickness) {\n    // Main wall with stone texture\n    for(z = [0:height/2-1]) {\n        for(x = [-length/2:length/2-1]) {\n            if((x+z)%2 == 0) {\n                translate([x*2, -thickness/2, z*2+1])\n                stone_block(2, 2, thickness);\n            }\n        }\n    }\n}\n\n// Main passage\ntranslate([0, 0, 0]) {\n    // Floor\n    for(x = [-25:25]) {\n        for(y = [-10:10]) {\n            floor_tile(x*5 - 2.5, y*5 - 2.5);\n        }\n    }\n    \n    // Left wall\n    translate([-30, -15, 0]) {\n        wall_section(60, 20, 3);\n        \n        // First archway\n        translate([0, 0, 20])\n        archway(15, 15, 3);\n        \n        // Second archway\n        translate([20, 0, 20])\n        archway(15, 15, 3);\n        \n        // Third archway\n        translate([-20, 0, 20])\n        archway(15, 15, 3);\n    }\n    \n    // Right wall\n    translate([30, -15, 0]) {\n        wall_section(60, 20, 3);\n        \n        // Matching archways\n        translate([0, 0, 20])\n        archway(15, 15, 3);\n        \n        translate([20, 0, 20])\n        archway(15, 15, 3);\n        \n        translate([-20, 0, 20])\n        archway(15, 15, 3);\n    }\n    \n    // Ceiling beams\n    for(x = [-25:5:25]) {\n        translate([x, 0, 40])\n        cube([3, 30, 2]);\n    }\n}",
    "renders": true
  },
  {
    "building": "workshop",
    "openscad_code": "// Workshop Building - Realistic Style\n// Overall dimensions: 80mm x 60mm x 45mm\n\n$fn = 32;\n\n// Main parameters\nbuilding_w = 80;\nbuilding_d = 60;\nbuilding_h = 30;\nroof_h = 15;\nwall_t = 2;\ndoor_w = 16;\ndoor_h = 18;\nwindow_w = 12;\nwindow_h = 10;\n\nmodule workshop_building() {\n    // Foundation slab\n    translate([-2, -2, -1])\n        cube([building_w + 4, building_d + 4, 1]);\n    \n    // Main building walls\n    difference() {\n        // Outer shell\n        cube([building_w, building_d, building_h]);\n        \n        // Hollow interior\n        translate([wall_t, wall_t, wall_t])\n            cube([building_w - 2*wall_t, building_d - 2*wall_t, building_h]);\n    }\n    \n    // Roof structure\n    translate([0, 0, building_h]) {\n        // Roof base\n        cube([building_w, building_d, wall_t]);\n        \n        // Roof peak\n        translate([-5, -5, wall_t])\n            roof([building_w + 10, building_d + 10, roof_h]);\n    }\n    \n    // Front door\n    translate([(building_w - door_w)/2, -wall_t, 0])\n        door(door_w, door_h, wall_t);\n    \n    // Windows\n    translate([15, -wall_t, 10])\n        window(window_w, window_h, wall_t);\n    translate([building_w - 15 - window_w, -wall_t, 10])\n        window(window_w, window_h, wall_t);\n    \n    // Side windows\n    translate([-wall_t, 15, 10])\n        rotate([0, 0, 90])\n            window(window_w, window_h, wall_t);\n    translate([-wall_t, building_d - 15 - window_w, 10])\n        rotate([0, 0, 90])\n            window(window_w, window_h, wall_t);\n    \n    // Chimney\n    translate([building_w - 15, building_d - 10, building_h + roof_h - 5])\n        chimney();\n    \n    // Workbench inside\n    translate([20, 10, 0])\n        workbench();\n    \n    // Tool rack on side\n    translate([building_w + 2, 20, 15])\n        tool_rack();\n}\n\nmodule roof(size) {\n    linear_extrude(height = size[2], twist = 0, scale = [0.1, 1])\n        square([size[0], size[1]], center = true);\n}\n\nmodule door(w, h, t) {\n    // Door frame\n    translate([-1, -1, -1])\n        cube([w + 2, t + 2, h + 1]);\n    \n    // Door panel\n    color(\"brown\")\n        cube([w, t, h]);\n    \n    // Door knob\n    translate([w - 3, t/2, h/2])\n        sphere(r = 1);\n}\n\nmodule window(w, h, t) {\n    // Window frame\n    translate([-1, -1, -1])\n        cube([w + 2, t + 2, h + 2]);\n    \n    // Window panes\n    difference() {\n        translate([0, 0, 0])\n            cube([w, t, h]);\n        \n        // Glass area\n        translate([1, -0.5, 1])\n            cube([w - 2, t + 1, h - 2]);\n        \n        // Mullions\n        translate([w/2 - 0.5, -1, 0])\n            cube([1, t + 2, h]);\n        translate([0, -1, h/2 - 0.5])\n            cube([w, t + 2, 1]);\n    }\n}\n\nmodule chimney() {\n    // Chimney base\n    translate([-2, -2, 0])\n        cube([6, 6, 12]);\n    \n    // Chimney top\n    translate([-4, -4, 12])\n        cube([10, 10, 2]);\n    \n    // Smoke hole\n    translate([1, 1, 12])\n        cylinder(h = 2, r = 1);\n}\n\nmodule workbench() {\n    // Table top\n    cube([25, 15, 1]);\n    \n    // Legs\n    for(x = [0, 20]) {\n        for(y = [0, 10]) {\n            translate([x, y, -10])\n                cube([3, 3, 10]);\n        }\n    }\n    \n    // Vise on bench\n    translate([22, 5, 1])\n        cube([5, 5, 4]);\n}\n\nmodule tool_rack() {\n    // Back panel\n    cube([2, 15, 20]);\n    \n    // Shelves\n    for(i = [0:5:15]) {\n        translate([0, 0, i])\n            cube([2, 15, 1]);\n    }\n    \n    // Tools\n    translate([1, 3, 2])\n        cylinder(h = 10, r = 0.5);\n    translate([1, 8, 2])\n        cylinder(h = 8, r = 0.7);\n    translate([1, 12, 2])\n        cube([1, 0.5, 12]);\n}\n\n// Render the complete workshop\nworkshop_building();",
    "renders": true
  },
  {
    "building": "laboratory",
    "openscad_code": "// Laboratory Module - Realistic Style, Medium Complexity\n// Approx 75mm x 55mm x 35mm - 3D printable scale\n\n// Wall thickness for 3D printing\nwall = 2;\n// Basic module dimensions\nlab_w = 75;\nlab_d = 55;\nlab_h = 35;\n\n// Main lab building shell\nmodule lab_building() {\n    // Floor slab\n    translate([0,0,0])\n        cube([lab_w, lab_d, wall], center=true);\n    \n    // Back wall\n    translate([0,lab_d/2-wall/2,lab_h/2])\n        cube([lab_w-wall*2, wall, lab_h], center=true);\n    \n    // Left wall\n    translate([-lab_w/2+wall/2,0,lab_h/2])\n        cube([wall, lab_d-wall*2, lab_h], center=true);\n    \n    // Right wall\n    translate([lab_w/2-wall/2,0,lab_h/2])\n        cube([wall, lab_d-wall*2, lab_h], center=true);\n    \n    // Roof\n    translate([0,0,lab_h])\n        cube([lab_w, lab_d, wall], center=true);\n}\n\n// Lab bench with cabinets\nmodule lab_bench() {\n    // Bench top\n    translate([0, -lab_d/4, 16])\n        cube([lab_w-10, lab_d/3, wall*1.5], center=true);\n    \n    // Left cabinet\n    translate([-lab_w/3, -lab_d/4, 8])\n        cube([lab_w/4, lab_d/3-4, 15], center=true);\n    \n    // Right cabinet\n    translate([lab_w/3, -lab_d/4, 8])\n        cube([lab_w/4, lab_d/3-4, 15], center=true);\n}\n\n// Fume hood\nmodule fume_hood() {\n    // Hood body\n    translate([lab_w/2-12, 0, lab_h/2+5])\n        cube([20, lab_d-8, 25], center=true);\n    \n    // Hood opening\n    difference() {\n        translate([lab_w/2-12, 0, lab_h/2+5])\n            cube([20, lab_d-8, 25], center=true);\n        translate([lab_w/2-18, 0, lab_h/2+5])\n            cube([18, lab_d-10, 23], center=true);\n    }\n    \n    // Exhaust stack\n    translate([lab_w/2-12, 0, lab_h+12])\n        cylinder(h=15, r=4, center=true);\n}\n\n// Shelving unit\nmodule shelving() {\n    for(i=[0:2]) {\n        // Shelf\n        translate([-lab_w/2+8, lab_d/4, 8+i*10])\n            cube([lab_w/3, lab_d/4, wall], center=true);\n    }\n}\n\n// Lab equipment\nmodule beaker() {\n    difference() {\n        cylinder(h=8, r1=4, r2=3.5, center=true);\n        translate([0,0,3])\n            cylinder(h=6, r1=3.5, r2=3, center=true);\n    }\n}\n\nmodule erlenmeyer() {\n    difference() {\n        cylinder(h=10, r1=3, r2=5, center=true);\n        translate([0,0,4])\n            cylinder(h=4, r1=2.5, r2=4.5, center=true);\n    }\n}\n\nmodule microscope() {\n    // Base\n    cylinder(h=2, r=4, center=true);\n    \n    // Arm\n    translate([0,0,3])\n        rotate([90,0,0])\n            cylinder(h=8, r=1.5, center=true);\n    \n    // Head\n    translate([0,4,3])\n        cube([6,2,4], center=true);\n}\n\n// Place equipment on bench\nmodule lab_equipment() {\n    // Beaker left\n    translate([-lab_w/4, -lab_d/4, 19])\n        beaker();\n    \n    // Erlenmeyer right\n    translate([lab_w/4, -lab_d/4, 20])\n        erlenmeyer();\n    \n    // Microscope center\n    translate([0, -lab_d/4-5, 18])\n        microscope();\n}\n\n// Window detail\nmodule windows() {\n    // Back wall window\n    difference() {\n        translate([0,lab_d/2-wall/2,lab_h/2])\n            cube([lab_w-wall*2, wall, lab_h], center=true);\n        translate([0,lab_d/2-1,lab_h/2])\n            cube([lab_w-wall*6, wall+0.1, lab_h-wall*4], center=true);\n    }\n}\n\n// Assemble the complete laboratory\nlab_building();\nwindows();\nlab_bench();\nfume_hood();\nshelving();\nlab_equipment();",
    "renders": true
  },
  {
    "building": "foundry",
    "openscad_code": "// Foundry - Medium complexity realistic style\n\n// Overall dimensions\n$fn = 16;\n\n// Main building module\nmodule foundry() {\n    // Base foundation\n    difference() {\n        cube([70, 50, 5], center=true);\n        translate([0, 0, -2.5]) cube([74, 54, 5], center=true);\n    }\n    \n    // Main building structure\n    translate([0, 0, 15]) {\n        // Main walls\n        difference() {\n            cube([60, 40, 30], center=true);\n            // Interior cavity\n            translate([0, 0, -5]) cube([56, 36, 35], center=true);\n        }\n        \n        // Roof\n        translate([0, 0, 20]) {\n            difference() {\n                cube([65, 45, 5], center=true);\n                translate([0, 0, -2]) cube([61, 41, 5], center=true);\n            }\n        }\n    }\n    \n    // Furnace stack\n    translate([-20, 0, 35]) {\n        cylinder(h=25, r1=8, r2=6);\n        // Stack cap\n        translate([0, 0, 25]) cylinder(h=3, r1=9, r2=9);\n    }\n    \n    // Side chimney\n    translate([25, 15, 25]) {\n        rotate([90, 0, 90]) cylinder(h=20, r=4);\n        rotate([90, 0, 90]) translate([20, 0, 0]) cylinder(h=10, r=5);\n    }\n    \n    // Loading bay door\n    translate([-30, 0, 15]) {\n        difference() {\n            cube([10, 20, 25], center=true);\n            translate([0, 0, -2]) cube([11, 22, 27], center=true);\n        }\n    }\n    \n    // Windows\n    for(x = [-15, 15]) {\n        translate([x, 20, 15]) {\n            difference() {\n                cube([10, 2, 8], center=true);\n                translate([0, 0, -1]) cube([12, 3, 10], center=true);\n            }\n        }\n    }\n    \n    // Ventilation grilles\n    for(y = [-15, 0, 15]) {\n        translate([30, y, 10]) {\n            difference() {\n                cube([2, 8, 2], center=true);\n                for(i = [-3, 0, 3]) {\n                    translate([0, i, 0]) cube([3, 1, 1], center=true);\n                }\n            }\n        }\n    }\n    \n    // Support pillars\n    for(x = [-25, 25]) {\n        for(y = [-15, 15]) {\n            translate([x, y, 7.5]) {\n                cylinder(h=15, r=2);\n            }\n        }\n    }\n    \n    // Roof details\n    translate([0, 0, 37]) {\n        // Ventilation pipes\n        for(x = [-20, 20]) {\n            for(y = [-15, 15]) {\n                translate([x, y, 0]) cylinder(h=5, r=1.5);\n            }\n        }\n    }\n    \n    // Access platform\n    translate([-30, 0, 25]) {\n        difference() {\n            cube([15, 30, 2], center=true);\n            translate([0, 0, -1]) cube([19, 34, 2], center=true);\n        }\n    }\n    \n    // Stairs to platform\n    translate([-37, 0, 20]) {\n        for(i = [0:4]) {\n            translate([0, 0, i*1.5]) cube([2, 10, 1.5*i + 1], center=true);\n        }\n    }\n}\n\n// Generate the foundry\nfoundry();",
    "renders": true
  },
  {
    "building": "mill",
    "openscad_code": "// Windmill - Realistic Medium Complexity\n// All dimensions in mm, printable without supports\n\n$fn = 32;\n\nmodule base() {\n    // Main circular stone base\n    difference() {\n        cylinder(h = 15, d = 60);\n        translate([0, 0, -1])\n            cylinder(h = 17, d = 50);\n    }\n    \n    // Doorway\n    translate([25, 0, 0])\n    rotate([0, 0, 0])\n    difference() {\n        cube([12, 8, 10], center = true);\n        translate([0, 0, 2])\n            cube([10, 7, 8], center = true);\n    }\n    \n    // Small windows\n    for (a = [30, 90, 150, 210, 270, 330]) {\n        rotate([0, 0, a])\n        translate([27, 0, 8])\n            cube([6, 2, 4], center = true);\n    }\n}\n\nmodule tower() {\n    // Tapered stone tower\n    linear_extrude(height = 45, scale = 0.8)\n    circle(d = 50);\n    \n    // Top rim\n    translate([0, 0, 45])\n        cylinder(h = 3, d = 42);\n    \n    // Small balcony\n    translate([0, 0, 42])\n    difference() {\n        cylinder(h = 3, d = 46);\n        translate([0, 0, -1])\n            cylinder(h = 5, d = 42);\n    }\n}\n\nmodule cap() {\n    // Rotating cap base\n    translate([0, 0, 48])\n        cylinder(h = 8, d = 40);\n    \n    // Roof\n    translate([0, 0, 52])\n    rotate_extrude()\n    translate([20, 0, 0])\n    polygon([[0,0], [0,15], [-5,15], [-2,0]]);\n    \n    // Roof cap\n    translate([0, 0, 67])\n        sphere(d = 6);\n}\n\nmodule blades() {\n    // Hub\n    translate([0, 0, 56])\n        cylinder(h = 5, d = 8);\n    \n    // Four windmill blades\n    for (a = [0, 90, 180, 270]) {\n        rotate([0, 0, a])\n        translate([0, 0, 56])\n        rotate([0, 90, 0])\n        difference() {\n            // Main blade\n            translate([0, 0, 2.5])\n                cube([22, 2, 5], center = true);\n            \n            // Blade supports\n            translate([11, 0, 0])\n                cube([2, 2, 5], center = true);\n            \n            // Taper blade end\n            translate([22, 0, 0])\n            rotate([0, 0, 0])\n            intersection() {\n                cube([4, 2, 5], center = true);\n                translate([2, 0, 0])\n                    sphere(d = 4);\n            }\n        }\n    }\n}\n\n// Assemble the mill\nunion() {\n    base();\n    tower();\n    cap();\n    blades();\n}",
    "renders": true
  },
  {
    "building": "plant",
    "openscad_code": "// Realistic medium-complexity 3D-printable plant: a succulent in a pot\n// Overall height ≈ 75 mm, footprint ≈ 50 mm\n\n// Parameters ----------------------------------------------------------\n$fa = 2; $fs = 0.5; // smoother curves\npot_r = 22; pot_h = 25; wall = 1.6;\nsoil_h = 4;\nstem_r = 2.5;\nleaf_scale = 1.0;\n\n// Utility module for rounded top leaves ------------------------------\nmodule leaf(l=15, w=7, t=2, twist=12) {\n    // Basic oblong leaf shape\n    hull() {\n        translate([0, 0, t/2]) sphere(d = t, $fn=12);\n        translate([0, 0, l-t/2]) sphere(d = t, $fn=12);\n    }\n    // Flatten and taper\n    scale([w/t, 1, 1])\n    // Twist tip slightly\n    translate([0, 0, l-t/2]) rotate([0, 0, twist]) \n        scale([0.3, 0.3, 0.3]) sphere(d = t*2, $fn=8);\n}\n\n// Central stem -------------------------------------------------------\nmodule stem(h=15, r=stem_r) {\n    cylinder(h=h, r1=r, r2=r*0.7, $fn=24);\n}\n\n// Rosette of leaves ---------------------------------------------------\nmodule rosette(leaves=14) {\n    for(i=[0:leaves-1]) {\n        angle = i*360/leaves;\n        // Vary length and height for natural feel\n        l = 12 + rands(-2, 2, 1)[0];\n        h = rands(0, 5, 1)[0];\n        rotate([0, 0, angle])\n            translate([0, stem_r*1.3, h])\n                rotate([90 - rands(20, 45, 1)[0], 0, 0])\n                    scale(leaf_scale) leaf(l=l, w=6+l/4, t=2.2);\n    }\n}\n\n// Pot with drainage hole ---------------------------------------------\nmodule pot() {\n    difference() {\n        union() {\n            // Outer shell\n            cylinder(h=pot_h, r=pot_r, $fn=64);\n            // Rim flare\n            translate([0, 0, pot_h])\n                cylinder(h=4, r1=pot_r, r2=pot_r+2, $fn=64);\n        }\n        // Hollow inside\n        translate([0, 0, -0.1])\n            cylinder(h=pot_h+2, r=pot_r-wall, $fn=64);\n        // Drain hole\n        translate([0, 0, pot_h/3])\n            rotate([90, 0, 0])\n                cylinder(h=pot_r, d=3, $fn=16);\n    }\n}\n\n// Soil surface --------------------------------------------------------\nmodule soil() {\n    translate([0, 0, pot_h-soil_h])\n        cylinder(h=soil_h+0.2, r=pot_r-wall-0.2, $fn=64);\n}\n\n// Full plant ----------------------------------------------------------\nmodule succulent() {\n    union() {\n        pot();\n        translate([0, 0, wall]) soil();\n        translate([0, 0, pot_h-soil_h/2]) {\n            stem(h=18);\n            translate([0, 0, 15]) rosette();\n            // Secondary smaller rosette offset for realism\n            translate([stem_r*2.5, 0, 12]) \n                rotate([0, 0, 30]) \n                    scale(0.7) rosette(12);\n        }\n    }\n}\n\n// Render\nsucculent();",
    "renders": true
  },
  {
    "building": "forge",
    "openscad_code": "// Realistic Forge (Medium Complexity)\n// Approx 80mm x 60mm x 70mm\n\n// Overall dimensions\nforge_length = 80;\nforge_width = 60;\nforge_height = 70;\nwall_thickness = 3;\n\n// Fire chamber dimensions\nchamber_length = 50;\nchamber_width = 40;\nchamber_height = 30;\n\n// Base platform\nmodule base_platform() {\n    difference() {\n        // Main base\n        cube([forge_length, forge_width, 10], center=true);\n        \n        // Rounded edges\n        translate([0, 0, 5])\n        cube([forge_length+2, forge_width+2, 10], center=true);\n        \n        // Leg cutouts\n        for(x = [-forge_length/2 + 10, forge_length/2 - 10])\n        for(y = [-forge_width/2 + 10, forge_width/2 - 10]) {\n            translate([x, y, -5])\n            cylinder(h=20, r=4, $fn=16);\n        }\n    }\n}\n\n// Forge body\nmodule forge_body() {\n    difference() {\n        // Main body\n        translate([0, 0, 15])\n        cube([forge_length, forge_width, 50], center=true);\n        \n        // Fire chamber\n        translate([0, 0, 25])\n        cube([chamber_length, chamber_width, chamber_height], center=true);\n        \n        // Front opening\n        translate([0, forge_width/2 + 1, 25])\n        cube([chamber_length - 10, 2, chamber_height - 10], center=true);\n        \n        // Air vent holes\n        for(i = [-1, 0, 1]) {\n            translate([i * 15, -forge_width/2 - 1, 15])\n            rotate([0, 90, 0])\n            cylinder(h=5, r=3, $fn=12);\n        }\n    }\n}\n\n// Chimney\nmodule chimney() {\n    // Base transition\n    translate([0, -forge_width/4, 40])\n    cube([30, 15, 5], center=true);\n    \n    // Chimney stack\n    translate([0, -forge_width/4, 62.5])\n    cube([20, 10, 45], center=true);\n    \n    // Top cap\n    translate([0, -forge_width/4, 85])\n    cube([25, 15, 3], center=true);\n}\n\n// Bellows\nmodule bellows() {\n    // Bellows body\n    translate([-forge_length/2 - 15, 0, 25])\n    rotate([0, 0, 15])\n    difference() {\n        cube([25, 20, 8], center=true);\n        \n        // Handle hole\n        translate([12, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=10, r=2, $fn=8);\n    }\n    \n    // Handle\n    translate([-forge_length/2 - 2, 0, 25])\n    rotate([0, 0, 15])\n    cylinder(h=20, r=1.5, $fn=8);\n}\n\n// Coal grate\nmodule coal_grate() {\n    translate([0, 0, 12])\n    difference() {\n        // Grate base\n        cube([chamber_length - 6, chamber_width - 6, 2], center=true);\n        \n        // Ventilation slots\n        for(i = [-20:5:20]) {\n            translate([i, 0, 1])\n            cube([2, chamber_width - 6, 2], center=true);\n        }\n    }\n}\n\n// Decorative handles\nmodule handles() {\n    // Side handles\n    for(side = [-1, 1]) {\n        translate([side * (forge_length/2 + 3), 0, 35])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=8, r=4, $fn=16);\n            cylinder(h=10, r=2, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_platform();\n    forge_body();\n    chimney();\n    bellows();\n    coal_grate();\n    handles();\n}",
    "renders": true
  },
  {
    "building": "manufactory",
    "openscad_code": "// Small realistic manufactory with main hall, smokestack, loading bay, and small offices\n// Overall footprint ≈ 80 mm × 60 mm × 50 mm (fits most FDM beds)\n\n$fa = 2; $fs = 1;  // smooth curves\n\nmodule main_hall() {\n    // Ground floor – solid block with wall thickness\n    difference() {\n        cube([60, 40, 25], center = true);\n        translate([0, 0, 1])\n            cube([56, 36, 23], center = true);\n    }\n\n    // Roof with slight slope\n    translate([0, 0, 13])\n        rotate([0, 5, 0])\n            cube([62, 42, 2], center = true);\n}\n\nmodule smokestack() {\n    // Base foundation\n    translate([-30, 0, 0])\n        cylinder(h = 5, d = 14, center = true);\n\n    // Stack body\n    for (i = [1:12]) {\n        translate([-30, 0, 2.5 + i * 2.5])\n            cylinder(h = 2.5, d1 = 12 - i * 0.2, d2 = 12 - (i + 1) * 0.2, center = true);\n    }\n\n    // Top rim\n    translate([-30, 0, 35])\n        cylinder(h = 2, d = 13, center = true);\n}\n\nmodule loading_bay() {\n    // Bay structure attached to side\n    translate([25, 0, -10])\n        cube([20, 30, 20], center = true);\n\n    // Door opening\n    translate([35, 0, -5])\n        cube([10, 20, 15], center = true);\n\n    // Awning roof\n    translate([35, 0, 1])\n        rotate([0, -10, 0])\n            cube([22, 32, 1.5], center = true);\n}\n\nmodule office_block() {\n    // Small office extension\n    translate([0, 22, -5])\n        cube([30, 15, 30], center = true);\n\n    // Windows (four small cutouts)\n    for (x = [-10, 10])\n        for (z = [0, 10])\n            translate([x, 30.5, z])\n                cube([4, 1, 4], center = true);\n\n    // Flat roof with parapet\n    translate([0, 22, 16])\n        cube([32, 17, 2], center = true);\n}\n\nmodule vent_pipes() {\n    // Two small round vents on main roof\n    for (x = [-15, 15])\n        translate([x, 0, 15])\n            cylinder(h = 6, d = 4, center = true);\n}\n\n// Assemble full manufactory\nunion() {\n    main_hall();\n    smokestack();\n    loading_bay();\n    office_block();\n    vent_pipes();\n}",
    "renders": true
  },
  {
    "building": "distillery",
    "openscad_code": "// Miniature Distillery\n// Realistic style, medium complexity\n// Overall footprint: 80 mm x 60 mm x 70 mm\n\n$fn = 30;  // Smooth curves for printing\n\n// Building base\nmodule main_building() {\n    difference() {\n        // Main block\n        translate([0, 0, 20])\n            cube([60, 40, 40], center = true);\n        // Doorway\n        translate([0, -20.1, 10])\n            cube([12, 5, 20], center = true);\n        // Two windows\n        translate([-20, -20.1, 25])\n            cube([10, 5, 15], center = true);\n        translate([20, -20.1, 25])\n            cube([10, 5, 15], center = true);\n    }\n}\n\n// Sloped roof\nmodule roof() {\n    difference() {\n        // Roof prism\n        polyhedron(\n            points = [\n                [-30, -20, 40],\n                [30, -20, 40],\n                [30, 20, 40],\n                [-30, 20, 40],\n                [0, 0, 55]\n            ],\n            faces = [\n                [0, 1, 4],\n                [1, 2, 4],\n                [2, 3, 4],\n                [3, 0, 4],\n                [0, 3, 2, 1]\n            ]\n        );\n        // Chimney hole\n        translate([15, 0, 47])\n            rotate([0, 45, 0])\n            cube([6, 6, 10], center = true);\n    }\n}\n\n// Chimney stack\nmodule chimney() {\n    translate([15, 0, 55])\n        cylinder(h = 15, d = 8);\n}\n\n// Small cylindrical boiler house\nmodule boiler_house() {\n    difference() {\n        // Cylindrical tank\n        translate([-35, 0, 30])\n            rotate([90, 0, 0])\n            cylinder(h = 50, d = 30);\n        // Entry hatch\n        translate([-35, 0, 30])\n            rotate([90, 0, 0])\n            cylinder(h = 5, d = 10);\n    }\n}\n\n// Support legs for boiler\nmodule boiler_legs() {\n    for (angle = [0:120:359]) {\n        rotate([0, 0, angle])\n            translate([-35, 15, 10])\n                cylinder(h = 20, d = 4);\n    }\n}\n\n// Cooling tower\nmodule cooling_tower() {\n    difference() {\n        // Main cone\n        cylinder(h1 = 30, h2 = 0, r1 = 15, r2 = 5);\n        // Hollow core\n        translate([0, 0, 0.1])\n            cylinder(h = 30, h1 = 0, r1 = 12, r2 = 3);\n    }\n}\n\n// Pipe connecting boiler to tower\nmodule connecting_pipe() {\n    translate([-20, 20, 40])\n        rotate([0, -30, 0])\n        cylinder(h = 30, d = 4);\n}\n\n// Ground base plate\nmodule base_plate() {\n    translate([0, 0, 0])\n        cube([80, 60, 2], center = true);\n}\n\n// Assemble the distillery\nunion() {\n    base_plate();\n    main_building();\n    roof();\n    chimney();\n    boiler_house();\n    boiler_legs();\n    translate([35, 25, 2])\n        cooling_tower();\n    connecting_pipe();\n}",
    "renders": true
  },
  {
    "building": "brewery",
    "openscad_code": "// OpenSCAD Brewery – realistic style, medium complexity\n// Overall footprint ≈ 90 mm × 70 mm × 65 mm, printable without supports\n\n// ----- Parameters -----\nwall = 2;          // wall thickness (mm)\n$fn = 32;          // cylinder resolution\nscaleFactor = 1;   // adjust overall size\n\n// ----- Helpers -----\nmodule scaled(v=[1,1,1]) scale(v*scaleFactor) children();\n\n// ----- Main Building -----\nmodule mainBuilding() {\n    difference() {\n        union() {\n            // ground floor\n            scaled([80,60,30]) cube([1,1,1], center=true);\n            \n            // pitched roof\n            translate([0,0,30+10])\n                rotate([90,0,0])\n                linear_extrude(height=60, center=true, scale=0.01)\n                polygon(points=[[-40,-30],[40,-30],[0,10]]);\n        }\n        \n        // doorway\n        translate([0,-30.5,0])\n            cube([20,wall,25], center=true);\n        \n        // windows (front)\n        for(x=[-25,0,25])\n            translate([x,-30.5,7.5])\n                cube([10,wall,15], center=true);\n        \n        // windows (back)\n        for(x=[-25,0,25])\n            translate([x,30.5,7.5])\n                cube([10,wall,15], center=true);\n    }\n}\n\n// ----- Silo Tank -----\nmodule silo() {\n    translate([-40,0,0])\n        difference() {\n            union() {\n                // cylinder tank\n                cylinder(h=50, d=30, center=true);\n                // cone top\n                translate([0,0,25])\n                    cylinder(h=15, d1=30, d2=5, center=true);\n            }\n            // hollow inside\n            translate([0,0,-2])\n                cylinder(h=56, d=30-2*wall, center=true);\n        }\n}\n\n// ----- Chimney -----\nmodule chimney() {\n    translate([30,20,30+10+5])\n        difference() {\n            cylinder(h=25, d=10, center=true);\n            translate([0,0,-1])\n                cylinder(h=27, d=10-2*wall, center=true);\n        }\n}\n\n// ----- Fermentation Vessels -----\nmodule fermenters() {\n    for(i=[0:1]) {\n        translate([25+i*15,-20,0])\n            difference() {\n                cylinder(h=40, d=20, center=true);\n                translate([0,0,-1])\n                    cylinder(h=42, d=20-2*wall, center=true);\n            }\n    }\n}\n\n// ----- Pipe Lines -----\nmodule pipes() {\n    color(\"silver\")\n    translate([-25,0,25])\n        rotate([90,0,0])\n            cylinder(h=45, d=3, center=true);\n    \n    color(\"silver\")\n    translate([-25,0,25])\n        rotate([0,90,0])\n            cylinder(h=65, d=3, center=true);\n}\n\n// ----- Assembly -----\nmainBuilding();\nsilo();\nchimney();\nfermenters();\npipes();",
    "renders": true
  },
  {
    "building": "refinery",
    "openscad_code": "// Refinery Model - Medium Complexity\n// Designed for 3D printing, no overhangs\n\n// Parameters\n$fa = 2;\n$fs = 0.5;\nwall_thickness = 2;\n\n// Main assembly\nmodule refinery() {\n    union() {\n        // Base platform\n        platform();\n        \n        // Distillation columns (main towers)\n        translate([0, 0, 20]) distillation_column(15, 40);\n        translate([-25, 0, 20]) distillation_column(12, 35);\n        translate([25, 0, 20]) distillation_column(12, 35);\n        \n        // Storage tanks\n        translate([-40, 20, 5]) storage_tank(10, 15);\n        translate([40, 20, 5]) storage_tank(10, 15);\n        \n        // Piping network\n        piping();\n        \n        // Control building\n        translate([0, -25, 5]) control_building();\n        \n        // Flare stack\n        translate([35, -35, 5]) flare_stack();\n    }\n}\n\n// Base platform\nmodule platform() {\n    difference() {\n        // Main platform\n        cube([100, 80, 5], center = true);\n        \n        // Drainage channels\n        for (i = [-40:20:40]) {\n            translate([i, 0, 2.5]) cube([2, 80, 1], center = true);\n        }\n    }\n}\n\n// Distillation column\nmodule distillation_column(diameter, height) {\n    union() {\n        // Main tower\n        cylinder(h = height, d = diameter);\n        \n        // Top platform\n        translate([0, 0, height]) \n            cylinder(h = 2, d = diameter + 5);\n        \n        // Support rings\n        for (i = [height/4:height/4:height-height/4]) {\n            translate([0, 0, i]) \n                cylinder(h = 1.5, d = diameter + 3);\n        }\n        \n        // Ladder cage\n        translate([diameter/2 + 3, 0, height/2]) \n            ladder_cage(height);\n    }\n}\n\n// Ladder cage for towers\nmodule ladder_cage(height) {\n    difference() {\n        union() {\n            // Cage structure\n            translate([0, 0, 0]) \n                cube([1, 2, height], center = true);\n            \n            // Rungs\n            for (i = [2:2:height-2]) {\n                translate([0, 0, i]) \n                    cube([1, 3, 0.5], center = true);\n            }\n        }\n    }\n}\n\n// Storage tank\nmodule storage_tank(diameter, height) {\n    union() {\n        // Tank body\n        cylinder(h = height, d = diameter);\n        \n        // Top dome\n        translate([0, 0, height]) \n            sphere(d = diameter);\n        \n        // Support legs\n        for (angle = [0:90:270]) {\n            rotate([0, 0, angle]) \n                translate([diameter/2 - 2, 0, -5]) \n                    cube([1.5, 1.5, 5], center = true);\n        }\n    }\n}\n\n// Piping network\nmodule piping() {\n    // Main pipe runs\n    pipe_run(0, 0, 20, 40, 0);\n    pipe_run(-25, 0, 20, 35, 90);\n    pipe_run(25, 0, 20, 35, 90);\n    \n    // Cross connections\n    pipe_segment(-25, 0, 40, 50, 0, 0);\n    pipe_segment(0, 0, 40, 50, 0, 0);\n    pipe_segment(25, 0, 40, 50, 0, 0);\n}\n\n// Pipe run\nmodule pipe_run(x, y, z, length, rotation) {\n    translate([x, y, z]) {\n        rotate([0, 0, rotation]) {\n            cylinder(h = length, d = 3);\n        }\n    }\n}\n\n// Pipe segment\nmodule pipe_segment(x1, y1, z1, x2, y2, z2) {\n    hull() {\n        translate([x1, y1, z1]) sphere(d = 3);\n        translate([x2, y2, z2]) sphere(d = 3);\n    }\n}\n\n// Control building\nmodule control_building() {\n    union() {\n        // Main building\n        cube([30, 20, 15], center = true);\n        \n        // Roof\n        translate([0, 0, 7.5]) \n            cube([32, 22, 2], center = true);\n        \n        // Small chimney\n        translate([10, 0, 8]) \n            cylinder(h = 8, d = 3);\n    }\n}\n\n// Flare stack\nmodule flare_stack() {\n    union() {\n        // Base\n        cylinder(h = 5, d = 8);\n        \n        // Stack\n        translate([0, 0, 5]) \n            cylinder(h = 30, d1 = 4, d2 = 2);\n        \n        // Flare tip\n        translate([0, 0, 35]) \n            sphere(d = 3);\n    }\n}\n\n// Generate the refinery\nrefinery();",
    "renders": true
  },
  {
    "building": "silos",
    "openscad_code": "// Realistic Silos - Medium Complexity\n// Designed for 3D printing - 100mm height\n\n// Main parameters\n$fn = 36;\nwall_thickness = 2;\nbase_diameter = 30;\nsilo_height = 80;\ncone_height = 20;\ncap_height = 5;\n\n// Main silo body with realistic features\nmodule silo_body(diameter, height) {\n    difference() {\n        // Main cylindrical body\n        cylinder(h=height, d=diameter);\n        \n        // Hollow inside\n        translate([0, 0, wall_thickness])\n            cylinder(h=height-wall_thickness*2, d=diameter-wall_thickness*2);\n    }\n    \n    // Reinforcement rings every 20mm\n    for(i = [1:height/20-1]) {\n        translate([0, 0, i*20])\n            cylinder(h=1.5, d=diameter+2);\n    }\n}\n\n// Conical bottom with outlet\nmodule cone_bottom(diameter, height) {\n    difference() {\n        // Main cone\n        cylinder(h=height, d1=diameter, d2=diameter/3);\n        \n        // Hollow cone\n        translate([0, 0, wall_thickness])\n            cylinder(h=height-wall_thickness, d1=diameter-wall_thickness*2, d2=diameter/3-wall_thickness);\n    }\n    \n    // Outlet pipe\n    translate([0, 0, -height/2])\n        cylinder(h=10, d=diameter/4);\n}\n\n// Roof cap with vent\nmodule roof_cap(diameter, height) {\n    difference() {\n        // Dome cap\n        translate([0, 0, -height/2])\n            scale([1, 1, 0.7])\n                sphere(d=diameter+2);\n        \n        // Hollow dome\n        translate([0, 0, -height/2])\n            scale([1, 1, 0.7])\n                sphere(d=diameter-wall_thickness*2);\n    }\n    \n    // Vent pipe on top\n    translate([diameter/4, 0, height/3])\n        cylinder(h=8, d=3);\n}\n\n// Ladder and railing\nmodule ladder(height) {\n    // Left and right rails\n    translate([-base_diameter/2-3, -2, 0])\n        cube([2, 4, height]);\n    translate([-base_diameter/2-3, -2, 0])\n        for(i = [0:height/8-1])\n            translate([0, 0, i*8+4])\n                cube([2, 4, 1]);\n    \n    translate([-base_diameter/2-1, -2, 0])\n        cube([2, 4, height]);\n    translate([-base_diameter/2-1, -2, 0])\n        for(i = [0:height/8-1])\n            translate([0, 0, i*8+4])\n                cube([2, 4, 1]);\n            \n    // Rungs\n    for(i = [0:height/8-1]) {\n        translate([-base_diameter/2-3, 0, i*8+4])\n            cube([4, 2, 1]);\n    }\n    \n    // Safety cage top\n    translate([-base_diameter/2-2, 0, height+2])\n        cylinder(h=4, d=10);\n}\n\n// Support legs\nmodule support_legs() {\n    for(angle = [0:120:240]) {\n        rotate([0, 0, angle])\n            translate([base_diameter/2+2, 0, -15])\n                cylinder(h=15, d=3);\n    }\n}\n\n// Complete silo assembly\nunion() {\n    // Main structure\n    union() {\n        // Body\n        translate([0, 0, silo_height/2+cone_height])\n            silo_body(base_diameter, silo_height);\n        \n        // Cone bottom\n        translate([0, 0, cone_height/2])\n            cone_bottom(base_diameter, cone_height);\n        \n        // Roof cap\n        translate([0, 0, silo_height+cone_height+cap_height/2])\n            roof_cap(base_diameter, cap_height);\n    }\n    \n    // Ladder on side\n    translate([0, 0, cone_height])\n        ladder(silo_height);\n    \n    // Support legs\n    translate([0, 0, 0])\n        support_legs();\n}",
    "renders": true
  },
  {
    "building": "depository",
    "openscad_code": "// Realistic Depository Box - Medium Complexity\n// Features: hinged lid, coin slot, lock, sturdy walls, mounting holes\n\n// Overall dimensions\nbox_w = 60;\nbox_d = 40;\nbox_h = 40;\nwall_th = 1.5;\n\n// Lid parameters\nlid_h = 4;\nhinge_d = 4;\nhinge_r = 2;\n\n// Slot parameters\nslot_w = 30;\nslot_h = 2;\nslot_d = 1;\n\n// Lock parameters\nlock_w = 6;\nlock_h = 3;\nlock_d = 3;\n\nmodule body() {\n    // Main box shell\n    difference() {\n        // Outer shell\n        cube([box_w, box_d, box_h], center=true);\n        \n        // Inner cavity\n        translate([0, 0, wall_th/2])\n            cube([box_w-2*wall_th, box_d-2*wall_th, box_h-wall_th], center=true);\n    }\n    \n    // Floor reinforcements\n    for (x = [-box_w/2+5, box_w/2-5]) {\n        translate([x, 0, -box_h/2+wall_th/2])\n            cube([2, box_d-4, wall_th], center=true);\n    }\n}\n\nmodule lid() {\n    // Main lid plate\n    translate([0, 0, box_h/2-lid_h/2])\n        cube([box_w, box_d, lid_h], center=true);\n    \n    // Hinge pins\n    for (x = [-box_w/2+5, box_w/2-5]) {\n        translate([x, box_d/2-hinge_d/2, box_h/2-hinge_r])\n            rotate([90, 0, 0])\n                cylinder(h=hinge_d, r=hinge_r, $fn=12);\n    }\n    \n    // Coin slot\n    translate([0, 0, box_h/2-lid_h/2])\n        cube([slot_w, slot_d, slot_h], center=true);\n    \n    // Lock cylinder\n    translate([0, -box_d/2+lock_d/2+2, box_h/2-lid_h/2])\n        cube([lock_w, lock_d, lock_h], center=true);\n}\n\nmodule mounting() {\n    // Base mounting holes\n    for (x = [-box_w/2+8, box_w/2-8])\n    for (y = [-box_d/2+8, box_d/2-8]) {\n        translate([x, y, -box_h/2-1])\n            cylinder(h=2, r=1.5, $fn=16);\n    }\n}\n\nmodule depository() {\n    union() {\n        body();\n        lid();\n        mounting();\n    }\n}\n\ndepository();",
    "renders": true
  },
  {
    "building": "storehouse",
    "openscad_code": "// Realistic Storehouse – 3D-printable, medium complexity\n// External dimensions: 80 x 50 x 45 mm (L x W x H)\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Basic footprint\nlen = 80;\nwid = 50;\nheight = 45;\n\n// Foundation slab\nmodule foundation() {\n    translate([-2, -2, -4])\n        cube([len + 4, wid + 4, 4]);\n}\n\n// Main brick walls with simple relief texture\nmodule walls() {\n    difference() {\n        // Outer shell\n        translate([0, 0, 0])\n            cube([len, wid, height]);\n        // Hollow inside\n        translate([wall, wall, wall])\n            cube([len - 2*wall, wid - 2*wall, height - wall + 1]);\n    }\n\n    // Simple brick texture on long sides\n    for (i = [0:4]) {\n        translate([i*16 + 8, 0, 5])\n            cube([4, 1, height - 10]);\n        translate([i*16 + 8, wid - 1, 5])\n            cube([4, 1, height - 10]);\n    }\n}\n\n// Pitched roof made from two wedges\nmodule roof() {\n    roof_h = 20;\n    over = 5;\n\n    union() {\n        // Left half\n        translate([-over, -over, height])\n            rotate([0, 0, 0])\n                linear_extrude(height = roof_h, scale = [0, 0])\n                    polygon(points = [[0, 0], [len + 2*over, 0], [0, wid + 2*over]]);\n        // Right half\n        translate([len + over, -over, height])\n            rotate([0, 0, 90])\n                linear_extrude(height = roof_h, scale = [0, 0])\n                    polygon(points = [[0, 0], [wid + 2*over, 0], [0, len + 2*over]]);\n    }\n}\n\n// Simple wooden door\nmodule door() {\n    door_w = 20;\n    door_h = 30;\n\n    translate([(len - door_w)/2, -1, 0])\n        cube([door_w, wall, door_h]);\n    \n    // Door handle\n    translate([(len - door_w)/2 + 15, -1.5, door_h/2])\n        sphere(r = 1.5, $fn = 16);\n}\n\n// Small square windows\nmodule windows() {\n    for (i = [0:1]) {\n        translate([15 + i*50, wid - wall, 25])\n            difference() {\n                cube([10, wall, 10]);\n                translate([2, -1, 2])\n                    cube([6, wall + 2, 6]);\n            }\n    }\n}\n\n// Tiny vent pipe on roof ridge\nmodule vent_pipe() {\n    translate([len/2, wid/2, height + 10])\n        cylinder(h = 15, r = 3, $fn = 16);\n}\n\n// Assembly\nunion() {\n    foundation();\n    walls();\n    roof();\n    door();\n    windows();\n    vent_pipe();\n}",
    "renders": true
  },
  {
    "building": "stockroom",
    "openscad_code": "// Stockroom with loading bay, shelving units, and roof details\n// Designed for 3D printing at 1:100 scale (~70mm wide)\n\nwall_thickness = 2;\nscale_factor = 0.35;\n\n// Main building block\nmodule main_building() {\n    difference() {\n        // Outer shell\n        cube([60, 40, 35]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, 0])\n        cube([60 - 2*wall_thickness, 40 - 2*wall_thickness, 35]);\n    }\n}\n\n// Loading bay extension\nmodule loading_bay() {\n    difference() {\n        // Bay structure\n        translate([-15, 15, 0])\n        cube([15, 25, 20]);\n        \n        // Door opening\n        translate([-14, 17, 0])\n        cube([13, 21, 18]);\n    }\n}\n\n// Roof with slight overhang\nmodule roof() {\n    // Main roof\n    translate([-5, -5, 35])\n    cube([70, 50, 3]);\n    \n    // Roof edge detail\n    for(x = [-5, 60], y = [-5, 40]) {\n        translate([x, y, 35])\n        cube([5, 5, 3]);\n    }\n}\n\n// Shelving units inside\nmodule shelving() {\n    for(i = [10, 30, 50]) {\n        // Vertical supports\n        for(j = [5, 15, 25, 35]) {\n            translate([i, j, 0])\n            cube([2, 2, 30]);\n        }\n        \n        // Horizontal shelves\n        for(h = [5, 15, 25]) {\n            translate([i-1, 4, h])\n            cube([4, 32, 1]);\n        }\n    }\n}\n\n// Small windows\nmodule windows() {\n    for(pos = [[5, 40, 15], [55, 40, 15], [60, 25, 15]]) {\n        translate(pos)\n        cube([8, wall_thickness, 8]);\n    }\n}\n\n// Door\nmodule door() {\n    translate([25, 40, 0])\n    cube([10, wall_thickness, 20]);\n}\n\n// Ventilation details on roof\nmodule roof_vents() {\n    for(x = [10, 30, 50]) {\n        for(y = [10, 30]) {\n            translate([x, y, 38])\n            cylinder(h=2, d=3);\n        }\n    }\n}\n\n// Base platform for stability\nmodule base() {\n    translate([-5, -5, -1])\n    cube([70, 50, 1]);\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    base();\n    main_building();\n    loading_bay();\n    roof();\n    windows();\n    door();\n    translate([wall_thickness, wall_thickness, 0])\n    shelving();\n    roof_vents();\n}",
    "renders": true
  },
  {
    "building": "vault",
    "openscad_code": "// Realistic style bank vault - medium complexity\n// Approximate size: 80mm wide x 60mm deep x 50mm high\n\n// Main vault body\nmodule vault_body() {\n    difference() {\n        // Main box with rounded edges\n        minkowski() {\n            cube([60, 40, 40], center = true);\n            sphere(r = 3);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([54, 34, 38], center = true);\n            sphere(r = 2);\n        }\n    }\n}\n\n// Vault door\nmodule vault_door() {\n    difference() {\n        // Door plate\n        translate([0, 20.5, 0])\n            cube([50, 3, 35], center = true);\n        \n        // Door window\n        translate([0, 22, 10])\n            cube([20, 1, 15], center = true);\n            \n        // Door handle cutout\n        translate([20, 22, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 5, r = 2, center = true);\n    }\n    \n    // Door hinges\n    for(z = [-15, 15]) {\n        translate([-30, 20, z])\n            rotate([0, 90, 0])\n            cylinder(h = 5, r = 2);\n    }\n}\n\n// Combination wheel\nmodule combination_wheel() {\n    translate([20, 25, 0])\n    rotate([90, 0, 0])\n    difference() {\n        // Main wheel\n        cylinder(h = 4, r = 8);\n        \n        // Center hole\n        cylinder(h = 5, r = 2);\n        \n        // Number ticks\n        for(i = [0:30:360]) {\n            rotate([0, 0, i])\n            translate([6, 0, -1])\n                cube([2, 0.5, 6]);\n        }\n    }\n}\n\n// Locking bolts mechanism\nmodule locking_bolts() {\n    // Top bolts\n    translate([0, 0, 22])\n    for(x = [-20, 0, 20]) {\n        translate([x, 20.5, 0])\n            cube([4, 8, 3], center = true);\n    }\n    \n    // Side bolts\n    for(z = [-10, 0, 10]) {\n        translate([32, 0, z])\n            cube([8, 4, 3], center = true);\n    }\n}\n\n// Reinforcement ribs\nmodule reinforcement_ribs() {\n    // Horizontal ribs\n    for(y = [-15, 0, 15]) {\n        translate([0, y, 25])\n            cube([64, 2, 2], center = true);\n    }\n    \n    // Vertical ribs\n    for(x = [-25, -8, 8, 25]) {\n        translate([x, 0, 25])\n            cube([2, 42, 2], center = true);\n    }\n}\n\n// Base platform\nmodule base_platform() {\n    translate([0, 0, -25])\n    difference() {\n        // Base\n        cube([70, 50, 5], center = true);\n        \n        // Cable management holes\n        for(pos = [[-25, -15], [25, -15], [-25, 15], [25, 15]]) {\n            translate([pos[0], pos[1], -25])\n                cylinder(h = 10, r = 3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    vault_body();\n    \n    // Door and mechanisms\n    vault_door();\n    combination_wheel();\n    locking_bolts();\n    \n    // External features\n    reinforcement_ribs();\n    base_platform();\n}",
    "renders": true
  },
  {
    "building": "strongroom",
    "openscad_code": "// Realistic Medium-Complexity Strongroom\n// External dimensions: 80 x 60 x 50 mm\n// Wall thickness: 3 mm\n\nmodule safe_body() {\n    difference() {\n        // Main solid block\n        cube([80, 60, 50], center=true);\n        \n        // Hollow interior\n        cube([74, 54, 44], center=true);\n    }\n}\n\nmodule door() {\n    translate([-40, -30, 25]) {\n        difference() {\n            // Door plate\n            cube([3, 54, 44]);\n            \n            // Inner cavity\n            translate([1, 2, 2]) cube([2, 50, 40]);\n            \n            // Handle hole\n            translate([2, 27, 22]) cylinder(h=2, r=2, center=true);\n        }\n        \n        // Hinges\n        for(z = [10, 25, 40])\n            translate([0, 0, z]) cylinder(h=3, r=1.5, center=true);\n            \n        // Lock mechanism\n        translate([2, 15, 22]) cube([2, 8, 8]);\n    }\n}\n\nmodule handle() {\n    translate([-35, -8, 25]) {\n        rotate([0, 0, 45]) {\n            difference() {\n                // Handle shaft\n                cylinder(h=30, r=2, center=true);\n                \n                // Hole for pin\n                cylinder(h=31, r=1, center=true);\n            }\n            \n            // Grip knob\n            translate([0, -15, 0]) sphere(r=3);\n        }\n    }\n}\n\nmodule bolts() {\n    // Vertical bolts\n    for(y = [-25, 25])\n        translate([38, y, 25]) cylinder(h=4, r=1.5);\n        \n    // Horizontal bolts\n    for(z = [10, 40])\n        translate([38, 0, z]) rotate([0, 90, 0]) cylinder(h=4, r=1.5);\n}\n\nmodule hinges() {\n    // Door hinge pins\n    for(z = [10, 25, 40])\n        translate([-37, -30, z]) rotate([90, 0, 0]) cylinder(h=5, r=1.5);\n}\n\nmodule reinforcements() {\n    // Front frame\n    translate([0, 0, 25]) difference() {\n        cube([86, 66, 3], center=true);\n        cube([80, 60, 4], center=true);\n    }\n    \n    // Corner guards\n    for(x = [-38, 38])\n        for(y = [-28, 28])\n            translate([x, y, 0]) cylinder(h=50, r=2);\n}\n\n// Main assembly\nunion() {\n    safe_body();\n    door();\n    handle();\n    bolts();\n    hinges();\n    reinforcements();\n}",
    "renders": true
  },
  {
    "building": "repository",
    "openscad_code": "// Repository (Data Center Building) - Realistic Style, Medium Complexity\n// Dimensions: 80mm x 60mm x 40mm\n\n$fn = 32;\n\n// Main building structure\nmodule building_base() {\n    difference() {\n        // Main block\n        cube([80, 60, 35]);\n        \n        // Doorway entrance\n        translate([40, 58, 0])\n            cube([15, 5, 20]);\n    }\n}\n\n// Roof with HVAC units\nmodule roof() {\n    translate([0, 0, 35]) {\n        // Main roof\n        cube([82, 62, 2]);\n        \n        // HVAC units\n        for(x = [15:25:65]) {\n            for(y = [15:20:45]) {\n                translate([x, y, 2])\n                    hvac_unit();\n            }\n        }\n    }\n}\n\n// HVAC unit module\nmodule hvac_unit() {\n    union() {\n        // Base\n        cube([8, 6, 3]);\n        \n        // Fan housing\n        translate([4, 3, 3])\n            cylinder(h=2, r1=3, r2=3);\n    }\n}\n\n// Windows with frames\nmodule windows() {\n    // Front windows\n    for(x = [15:20:65]) {\n        translate([x, 59.5, 10])\n            window_frame();\n    }\n    \n    // Side windows\n    for(y = [15:15:45]) {\n        translate([79.5, y, 10])\n            rotate([0, 90, 0])\n                window_frame();\n    }\n}\n\n// Window frame module\nmodule window_frame() {\n    difference() {\n        // Frame\n        cube([12, 1, 12]);\n        \n        // Glass\n        translate([1, -0.1, 1])\n            cube([10, 1.2, 10]);\n    }\n}\n\n// Entrance door\nmodule entrance() {\n    translate([32.5, 55, 0]) {\n        // Door\n        cube([15, 0.5, 20]);\n        \n        // Door handle\n        translate([13, 0.6, 10])\n            cylinder(h=1, r=0.5);\n    }\n}\n\n// Server racks visible through windows\nmodule server_racks() {\n    color(\"lightgray\") {\n        // Front row\n        translate([20, 30, 0]) {\n            for(i = [0:3:15]) {\n                translate([i, 0, 5])\n                    server_rack();\n            }\n        }\n        \n        // Back row\n        translate([25, 15, 0]) {\n            for(i = [0:3:15]) {\n                translate([i, 0, 5])\n                    server_rack();\n            }\n        }\n    }\n}\n\n// Server rack module\nmodule server_rack() {\n    difference() {\n        // Rack body\n        cube([2, 8, 20]);\n        \n        // Server slots\n        for(h = [2:3:18]) {\n            translate([0.2, 0.5, h])\n                cube([1.6, 7, 2]);\n        }\n    }\n}\n\n// Cooling pipes on side\nmodule cooling_pipes() {\n    for(i = [0:5:25]) {\n        translate([0, 30 + i, 15])\n            rotate([90, 0, 0])\n                cylinder(h=5, r=1);\n    }\n}\n\n// Security fence\nmodule security_fence() {\n    // Front fence\n    translate([-5, 55, 0]) {\n        for(x = [0:2:90]) {\n            translate([x, 0, 5])\n                fence_post();\n        }\n    }\n}\n\n// Fence post module\nmodule fence_post() {\n    cylinder(h=10, r=0.5);\n}\n\n// Main assembly\nunion() {\n    building_base();\n    roof();\n    windows();\n    entrance();\n    server_racks();\n    cooling_pipes();\n    security_fence();\n}",
    "renders": true
  },
  {
    "building": "armory",
    "openscad_code": "// OpenSCAD Armory Model\n// Realistic style, medium complexity\n// 70 mm wide x 50 mm deep x 60 mm tall\n\n$fn = 32;\n\n// Main module\nmodule armory() {\n    // Base foundation\n    difference() {\n        translate([0, 0, 2.5])\n            cube([70, 50, 5], center = true);\n        \n        // Doorway cutout\n        translate([0, 25, 2.5])\n            cube([20, 2, 8], center = true);\n    }\n    \n    // Main building structure\n    difference() {\n        translate([0, 0, 32.5])\n            cube([60, 40, 55], center = true);\n        \n        // Doorway\n        translate([0, 20, 15])\n            cube([12, 2, 20], center = true);\n        \n        // Windows\n        for (x = [-20, 20, 0]) {\n            translate([x, 20, 35])\n                cube([8, 2, 12], center = true);\n        }\n    }\n    \n    // Roof structure\n    difference() {\n        translate([0, 0, 62.5])\n            cube([65, 45, 5], center = true);\n        \n        // Roof overhang\n        for (x = [-32.5, 32.5]) {\n            translate([x, 0, 60])\n                cube([5, 45, 10], center = true);\n        }\n    }\n    \n    // Battlements\n    for (x = [-27.5:5:27.5]) {\n        translate([x, 0, 67.5])\n            cube([4, 45, 5], center = true);\n        \n        translate([x, 22.5, 70])\n            cube([4, 2, 3], center = true);\n        \n        translate([x, -22.5, 70])\n            cube([4, 2, 3], center = true);\n    }\n    \n    // Corner towers\n    module tower(x_pos, y_pos) {\n        // Tower base\n        translate([x_pos, y_pos, 25])\n            cylinder(h = 50, r = 8, center = true);\n        \n        // Tower top\n        translate([x_pos, y_pos, 52.5])\n            cylinder(h = 5, r = 10, center = true);\n        \n        // Tower roof\n        translate([x_pos, y_pos, 60])\n            cylinder(h = 10, r1 = 10, r2 = 8, center = true);\n        \n        // Arrow slits\n        for (h = [15:10:45]) {\n            rotate([0, 0, 45])\n                translate([x_pos, y_pos, h])\n                    cube([1, 10, 6], center = true);\n            rotate([0, 0, -45])\n                translate([x_pos, y_pos, h])\n                    cube([1, 10, 6], center = true);\n        }\n    }\n    \n    // Place towers at corners\n    tower(-30, -20);\n    tower(-30, 20);\n    tower(30, -20);\n    tower(30, 20);\n    \n    // Door details\n    translate([0, 21, 10])\n        cube([10, 1, 10], center = true);\n    \n    translate([0, 21, 15])\n        cube([2, 1, 2], center = true);\n    \n    // Window frames\n    for (x = [-20, 20, 0]) {\n        translate([x, 21, 35])\n            cube([9, 1, 13], center = true);\n    }\n    \n    // Ground texture\n    for (x = [-30:5:30]) {\n        for (y = [-20:5:20]) {\n            translate([x, y, 0])\n                cube([4.5, 4.5, 0.5], center = true);\n        }\n    }\n}\n\n// Render the armory\narmory();",
    "renders": true
  },
  {
    "building": "archive",
    "openscad_code": "// Realistic Archive Building - Medium Complexity\n// Dimensions: 60mm x 50mm x 45mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main building module\nmodule archive_building() {\n    // Base foundation\n    difference() {\n        cube([60, 50, 5], center=true);\n        translate([0, 0, -1]) cube([56, 46, 6], center=true);\n    }\n    \n    // Main structure\n    difference() {\n        translate([0, 0, 22.5]) cube([50, 40, 40], center=true);\n        translate([0, 0, 22.5]) cube([46, 36, 40], center=true);\n    }\n    \n    // Front steps\n    for(i=[0:1:2]) {\n        translate([0, 22.5 + i*2.5, 2.5 + i*2.5]) \n            cube([30, 5 - i*1.5, 5], center=true);\n    }\n    \n    // Columns\n    for(x=[-15, -7.5, 0, 7.5, 15]) {\n        translate([x, -20, 25]) cylinder(r=2, h=35);\n        // Column base\n        translate([x, -20, 22.5]) cylinder(r=2.5, h=5);\n        // Column capital\n        translate([x, -20, 42.5]) cylinder(r=2.5, h=2.5);\n    }\n    \n    // Entablature\n    translate([0, -20, 44]) cube([35, 2.5, 5], center=true);\n    \n    // Pediment\n    translate([0, -20, 48]) \n        scale([1, 0.5, 1]) \n            rotate([90, 0, 0]) \n                cylinder(r=17.5, h=5, center=true);\n    \n    // Front door\n    difference() {\n        translate([0, -19, 15]) cube([10, 2, 20], center=true);\n        translate([0, -18, 15]) cube([8, 3, 18], center=true);\n    }\n    \n    // Windows\n    for(x=[-12.5, 12.5]) {\n        for(y=[0, 15]) {\n            translate([x, y-5, 25]) cube([8, 2, 12], center=true);\n            translate([x, y-5, 25]) cube([6, 3, 10], center=true);\n        }\n    }\n    \n    // Archive sign\n    translate([0, -19, 35]) cube([15, 1, 5], center=true);\n    \n    // Roof\n    translate([0, 0, 47.5]) \n        scale([1, 1.2, 1]) \n            cube([55, 45, 5], center=true);\n    \n    // Chimney\n    difference() {\n        translate([15, 10, 52.5]) cube([8, 8, 10], center=true);\n        translate([15, 10, 50]) cube([5, 5, 15], center=true);\n    }\n}\n\n// Generate the model\narchive_building();",
    "renders": true
  },
  {
    "building": "hangar",
    "openscad_code": "// Realistic medium-complexity 3D-printable aircraft hangar\n// Overall footprint ~90 mm long × 45 mm wide × 35 mm high\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main building shell\nmodule hangar_body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, 17]) cube([90, 45, 34], center=true);\n            translate([0, 0, 34]) cube([88, 43, 1], center=true);\n        }\n        // Inner cavity\n        hull() {\n            translate([0, 0, 17]) cube([90-2*wall, 45-2*wall, 34], center=true);\n            translate([0, 0, 34]) cube([88-2*wall, 43-2*wall, 1], center=true);\n        }\n    }\n}\n\n// Barrel-vault roof\nmodule roof() {\n    hull() {\n        translate([0, 0, 34.5]) cube([92, 47, 2], center=true);\n        translate([0, 0, 42]) cube([90, 45, 2], center=true);\n    }\n}\n\n// Large sliding doors on front\nmodule doors() {\n    // Door frame\n    difference() {\n        translate([0, -22.5, 17]) cube([40, 2, 34], center=true);\n        translate([0, -22.5, 17]) cube([36, 2.2, 30], center=true);\n    }\n    // Left door panel\n    translate([-9.5, -22.5, 17]) cube([18, 1.8, 30], center=true);\n    // Right door panel\n    translate([9.5, -22.5, 17]) cube([18, 1.8, 30], center=true);\n    // Door rails\n    for (x = [-15, 15]) {\n        translate([x, -22.5, 2]) cube([1, 2, 2], center=true);\n    }\n}\n\n// Windows along sides\nmodule windows() {\n    for (i = [-30, -10, 10, 30]) {\n        translate([i, 22.5-wall/2, 22]) cube([12, wall, 12], center=true);\n        translate([i, 22.5-wall/2, 22]) cube([10, wall+0.2, 10], center=true);\n    }\n}\n\n// Ventilation louvers on rear\nmodule vents() {\n    for (z = [20:5:32]) {\n        translate([-40, 0, z]) rotate([90, 0, 0]) \n            cylinder(h=0.8, d1=8, d2=8.5, $fn=4);\n    }\n}\n\n// Foundation slab\nmodule foundation() {\n    translate([0, 0, -1]) cube([94, 49, 2], center=true);\n}\n\n// Assembly\nunion() {\n    foundation();\n    hangar_body();\n    roof();\n    doors();\n    windows();\n    vents();\n}",
    "renders": true
  },
  {
    "building": "dock",
    "openscad_code": "// Realistic Dock - Medium Complexity\n// A 3D printable lakeside wooden dock with pylons, decking, rails and a ladder\n\nmodule dock() {\n    // Main deck platform\n    difference() {\n        // Solid deck base\n        translate([0, 0, 5]) cube([80, 30, 2], center=true);\n        \n        // Drainage gaps between planks\n        for (x = [-35:5:35]) {\n            translate([x, 0, 5.5]) cube([1, 30, 1], center=true);\n        }\n    }\n    \n    // Plank texture on top\n    for (x = [-37.5:2.5:37.5]) {\n        translate([x, 0, 6]) cube([1.5, 30, 0.5], center=true);\n    }\n    \n    // Support pylons (4 corners)\n    module pylon(x, y) {\n        translate([x, y, -10]) cylinder(h=15, d=3, $fn=8);\n        translate([x, y, -11]) sphere(d=3.5, $fn=8);\n    }\n    \n    pylon(-35, -12);\n    pylon(-35, 12);\n    pylon(35, -12);\n    pylon(35, 12);\n    \n    // Cross bracing between pylons (long sides)\n    translate([0, -12, -3]) rotate([90, 0, 0]) cylinder(h=70, d=1.5, $fn=8);\n    translate([0, 12, -3]) rotate([90, 0, 0]) cylinder(h=70, d=1.5, $fn=8);\n    \n    // Cross bracing (short sides)\n    translate([-35, 0, -3]) rotate([90, 90, 0]) cylinder(h=24, d=1.5, $fn=8);\n    translate([35, 0, -3]) rotate([90, 90, 0]) cylinder(h=24, d=1.5, $fn=8);\n    \n    // Railing posts\n    module post(x, y) {\n        translate([x, y, 9]) cylinder(h=8, d=1.5, $fn=6);\n    }\n    \n    // Left side posts\n    for (x = [-30:10:30]) {\n        post(x, -13.5);\n    }\n    \n    // Right side posts\n    for (x = [-30:10:30]) {\n        post(x, 13.5);\n    }\n    \n    // Railing top bar\n    translate([0, -13.5, 13]) cube([80, 1, 1], center=true);\n    translate([0, 13.5, 13]) cube([80, 1, 1], center=true);\n    \n    // Ladder on right side\n    translate([25, 14, 5]) union() {\n        // Left rail\n        translate([-1.5, 0, -7]) cube([1, 1, 14]);\n        // Right rail\n        translate([1.5, 0, -7]) cube([1, 1, 14]);\n        \n        // Rungs\n        for (z = [-5:2:5]) {\n            translate([0, 0, z]) cube([3, 1, 0.5]);\n        }\n    }\n    \n    // Dock cleats (mooring posts)\n    module cleat(x, y) {\n        translate([x, y, 6]) union() {\n            cube([4, 2, 1], center=true);\n            translate([0, 0, 1]) cube([2, 4, 1], center=true);\n        }\n    }\n    \n    cleat(-30, 0);\n    cleat(30, 0);\n}\n\n// Render the complete dock\ndock();",
    "renders": true
  },
  {
    "building": "yard",
    "openscad_code": "// Realistic Medium-Complexity Yard Scene\n// 3D-printable, ~80 x 65 x 20 mm footprint, minimal overhangs\n\n$fa = 2;\n$fs = 0.5;\n\n// overall bounding box 80 x 65 x 20 mm\nmodule yard() {\n    union() {\n        // ground base plate\n        translate([0,0,-1])\n            cube([80,65,2], center=true);\n\n        // lawn\n        color(\"forestgreen\")\n        translate([0,0,0.5])\n            cube([76,61,1], center=true);\n\n        // concrete path from gate to door\n        color(\"gainsboro\")\n        translate([-15,0,0.5])\n            cube([30,8,1], center=true);\n\n        // house wall (simplified)\n        color(\"beige\")\n        translate([25,0,7.5])\n            cube([20,30,15], center=true);\n\n        // roof\n        color(\"dimgray\")\n        translate([25,0,15.5])\n            rotate([0,45,0])\n            cube([30,35,2], center=true);\n\n        // door\n        color(\"saddlebrown\")\n        translate([35,-14.9,5])\n            cube([5,2,10], center=true);\n\n        // two windows\n        for(x=[20,30])\n            color(\"skyblue\")\n            translate([x,14.9,8])\n                cube([6,1,6], center=true);\n\n        // wooden fence along back and sides\n        fence();\n\n        // garden beds\n        flowerbed(-20, -20);\n        flowerbed( 0, -20);\n        flowerbed( 20,-20);\n\n        // small tree\n        tree(-30, 15);\n    }\n}\n\n// fence module\nmodule fence() {\n    // back fence\n    translate([0,32,5])\n        fencepanel(80);\n    // left fence\n    translate([-40,0,5])\n        rotate([0,0,90])\n            fencepanel(64);\n    // right fence\n    translate([40,0,5])\n        rotate([0,0,90])\n            fencepanel(64);\n}\n\n// single fence panel\nmodule fencepanel(length) {\n    posts = floor(length/10);\n    for(i=[0:posts]) {\n        color(\"peru\")\n        translate([i*10-length/2,0,0])\n            cube([2,2,10], center=true);\n    }\n    // horizontal rails\n    color(\"peru\")\n    translate([0,0,2])\n        cube([length+2,2,1], center=true);\n    translate([0,0,7])\n        cube([length+2,2,1], center=true);\n}\n\n// garden bed with flowers\nmodule flowerbed(x,y) {\n    color(\"sandybrown\")\n    translate([x,y,0.5])\n        cube([14,8,1], center=true);\n\n    // flowers\n    for(rx=[-4:4:4])\n        for(ry=[-2:2:2])\n            color(\"red\")\n            translate([x+rx,y+ry,2])\n                sphere(d=1.5, $fn=8);\n}\n\n// simple tree trunk + sphere crown\nmodule tree(x,y) {\n    color(\"saddlebrown\")\n    translate([x,y,0.5])\n        cylinder(h=10, d=3, center=false);\n\n    color(\"darkgreen\")\n    translate([x,y,12])\n        sphere(d=12, $fn=20);\n}\n\nyard();",
    "renders": true
  },
  {
    "building": "wharf",
    "openscad_code": "// Realistic-style wharf model for 3D printing (≈ 70 mm long)\n// Medium complexity with architectural details\n\n// Dimensions\nwharf_length = 70;\nwharf_width = 25;\ndeck_thickness = 2;\npost_diameter = 2;\npost_height = 10;\nrailing_height = 5;\npier_width = 8;\npier_height = 6;\n\nmodule main_deck() {\n    // Main wooden deck\n    difference() {\n        cube([wharf_length, wharf_width, deck_thickness], center=true);\n        \n        // Gaps between planks (realistic detail)\n        for (i = [-wharf_length/2+3 : 4 : wharf_length/2-3]) {\n            translate([i, 0, deck_thickness/2-0.1])\n                cube([0.5, wharf_width+1, 0.3], center=true);\n        }\n    }\n}\n\nmodule support_posts() {\n    // Vertical posts along both sides\n    for (side = [-1, 1]) {\n        for (x = [-wharf_length/2+5 : 10 : wharf_length/2-5]) {\n            translate([x, side * (wharf_width/2 - post_diameter), 0])\n                cylinder(h=post_height, d=post_diameter, $fn=8);\n        }\n    }\n}\n\nmodule railing() {\n    // Top railing connecting posts\n    for (side = [-1, 1]) {\n        translate([0, side * (wharf_width/2 - post_diameter), post_height - railing_height/2])\n            cube([wharf_length, post_diameter, railing_height], center=true);\n    }\n}\n\nmodule cross_bracing() {\n    // Diagonal bracing between posts\n    for (side = [-1, 1]) {\n        for (x = [-wharf_length/2+5 : 10 : wharf_length/2-15]) {\n            translate([x+5, side * (wharf_width/2 - post_diameter - 1), post_height/3])\n                rotate([0, 0, side * 30])\n                cube([10, 0.5, 0.5], center=true);\n        }\n    }\n}\n\nmodule pier_base() {\n    // Stone/concrete pier foundation\n    translate([0, 0, -pier_height/2 - deck_thickness/2])\n        cube([wharf_length*0.8, pier_width, pier_height], center=true);\n    \n    // Water level indication\n    translate([0, 0, -deck_thickness/2 - pier_height - 1])\n        color(\"blue\", 0.3)\n        cube([wharf_length*1.2, wharf_width*1.5, 0.5], center=true);\n}\n\nmodule bollards() {\n    // Mooring bollards along edge\n    for (x = [-wharf_length/2+10 : 15 : wharf_length/2-10]) {\n        translate([x, wharf_width/2 - 3, deck_thickness/2])\n            cylinder(h=3, d1=2, d2=1.5, $fn=12);\n    }\n}\n\n// Assemble the wharf\nunion() {\n    pier_base();\n    translate([0, 0, deck_thickness/2]) {\n        main_deck();\n        support_posts();\n        railing();\n        cross_bracing();\n        bollards();\n    }\n}",
    "renders": true
  },
  {
    "building": "quay",
    "openscad_code": "// Quay with mooring bollards, planks, and pilings\n// Overall footprint about 80 mm x 60 mm x 12 mm\n\n// Parameters\ndeck_length = 80;          // mm\ndeck_width  = 60;          // mm\nplank_thick = 2;           // mm\nplank_width = 8;           // mm\ngap         = 1;           // mm between planks\npiling_diam = 4;           // mm\npiling_top  = 8;           // mm above deck\npiling_base = 3;           // mm below deck\nbollard_diam = 5;          // mm\nbollard_h    = 6;          // mm\nwall_thick    = 2;         // mm printable thickness\n\n// Main deck made of individual planks\nmodule deck_planks() {\n    n = floor(deck_width / (plank_width + gap));\n    for (i = [0 : n-1])\n        translate([0, i*(plank_width + gap) + gap/2, 0])\n            cube([deck_length, plank_width, plank_thick], center=false);\n}\n\n// Vertical pilings along two edges\nmodule pilings() {\n    spacing = deck_length / 4;\n    for (x = [0 : spacing : deck_length]) {\n        translate([x, -wall_thick, -piling_base])\n            cylinder(h = plank_thick + piling_top + piling_base,\n                     d  = piling_diam, $fn=16);\n        translate([x, deck_width + wall_thick, -piling_base])\n            cylinder(h = plank_thick + piling_top + piling_base,\n                     d  = piling_diam, $fn=16);\n    }\n}\n\n// Mooring bollards\nmodule bollards() {\n    positions = [ [deck_length/4, deck_width/2],\n                  [3*deck_length/4, deck_width/2] ];\n    for (pos = positions) {\n        translate([pos.x, pos.y, plank_thick])\n            cylinder(h = bollard_h, d = bollard_diam, $fn=20);\n        // T-shaped top for rope\n        translate([pos.x, pos.y, plank_thick + bollard_h])\n            rotate([90,0,0])\n                cube([bollard_diam*1.5, bollard_diam, bollard_diam*0.6], center=true);\n    }\n}\n\n// Side retaining walls\nmodule side_walls() {\n    // Left wall\n    translate([-wall_thick, -wall_thick, 0])\n        cube([wall_thick, deck_width + 2*wall_thick, plank_thick]);\n    // Right wall\n    translate([deck_length, -wall_thick, 0])\n        cube([wall_thick, deck_width + 2*wall_thick, plank_thick]);\n}\n\n// Top surface to hide gaps between planks\nmodule deck_surface() {\n    translate([0, 0, plank_thick - 0.1])\n        cube([deck_length, deck_width, 0.2]);\n}\n\n// Combine everything\nunion() {\n    deck_planks();\n    deck_surface();   // printable solid layer\n    pilings();\n    side_walls();\n    bollards();\n}",
    "renders": true
  },
  {
    "building": "harbor",
    "openscad_code": "// Harbor Scene - Realistic Medium Complexity\n// Approx 80 x 60 x 15 mm\n\n$fn = 32;\n\n// Overall dimensions\nharbor_length = 80;\nharbor_width = 60;\nwater_level = 0;\n\n// Water base\nmodule water_base() {\n    difference() {\n        cube([harbor_length, harbor_width, 2], center = false);\n        translate([0, 0, -0.1]) cube([harbor_length, harbor_width, 0.1], center = false);\n    }\n}\n\n// Harbor wall\nmodule harbor_wall() {\n    difference() {\n        // Main wall\n        translate([75, 0, 1]) cube([5, 60, 4], center = false);\n        \n        // Entrance cutout\n        translate([74, 25, 1]) cube([3, 10, 4], center = false);\n    }\n}\n\n// Dock platform\nmodule dock() {\n    difference() {\n        // Main dock\n        translate([5, 10, 2]) cube([60, 40, 1], center = false);\n        \n        // Mooring holes\n        for(x = [15:15:55]) {\n            translate([x, 15, 2.2]) cylinder(h = 1.5, d = 3, center = false);\n            translate([x, 45, 2.2]) cylinder(h = 1.5, d = 3, center = false);\n        }\n    }\n}\n\n// Warehouse building\nmodule warehouse() {\n    // Base\n    translate([10, 45, 3]) cube([20, 12, 8], center = false);\n    \n    // Roof\n    translate([9, 44, 11]) cube([22, 14, 1], center = false);\n    \n    // Door\n    translate([18, 57, 3]) cube([4, 0.5, 6], center = false);\n    \n    // Windows\n    translate([12, 57, 6]) cube([3, 0.5, 2], center = false);\n    translate([17, 57, 6]) cube([3, 0.5, 2], center = false);\n    translate([22, 57, 6]) cube([3, 0.5, 2], center = false);\n}\n\n// Small lighthouse\nmodule lighthouse() {\n    // Base\n    translate([70, 50, 2]) cylinder(h = 3, d = 8, center = false);\n    \n    // Tower\n    translate([70, 50, 5]) cylinder(h = 10, d = 5, center = false);\n    \n    // Top\n    translate([70, 50, 15]) sphere(d = 5);\n}\n\n// Mooring bollards\nmodule bollards() {\n    for(pos = [[15, 25], [35, 25], [55, 25]]) {\n        translate([pos[0], pos[1], 3]) {\n            cylinder(h = 3, d = 2, center = false);\n            translate([0, 0, 3]) sphere(d = 3);\n        }\n    }\n}\n\n// Cargo containers\nmodule containers() {\n    // Container 1\n    translate([25, 15, 3]) {\n        cube([8, 4, 4], center = false);\n        translate([0.5, 0.5, 4]) cube([7, 3, 0.5], center = false);\n    }\n    \n    // Container 2\n    translate([40, 18, 3]) {\n        cube([6, 3, 3], center = false);\n        translate([0.5, 0.5, 3]) cube([5, 2, 0.5], center = false);\n    }\n}\n\n// Crane\nmodule crane() {\n    // Base\n    translate([50, 35, 3]) cylinder(h = 1, d = 6, center = false);\n    \n    // Tower\n    translate([50, 35, 4]) cylinder(h = 8, d = 2, center = false);\n    \n    // Arm\n    translate([50, 35, 12]) rotate([0, 0, -30]) {\n        cube([15, 1, 1], center = false);\n        translate([14, 0, 0]) cube([1, 3, 1], center = false);\n    }\n}\n\n// Assembly\nunion() {\n    water_base();\n    harbor_wall();\n    dock();\n    warehouse();\n    lighthouse();\n    bollards();\n    containers();\n    crane();\n}",
    "renders": true
  },
  {
    "building": "port",
    "openscad_code": "// Realistic Port Scene - Medium Complexity\n// Harbor with pier, warehouses, containers, and lighthouse\n\n// Overall dimensions: 80x60x30 mm\n\n$fn = 32;\n\nmodule port_scene() {\n    // Base water area\n    color(\"steelblue\")\n    translate([0, 0, -1])\n    cube([80, 60, 1], center=false);\n    \n    // Harbor wall\n    color(\"darkgray\")\n    translate([5, 5, 0])\n    cube([70, 50, 3], center=false);\n    \n    // Main pier\n    pier();\n    \n    // Warehouses along the back\n    warehouses();\n    \n    // Container stacks\n    containers();\n    \n    // Lighthouse\n    lighthouse();\n}\n\nmodule pier() {\n    // Pier deck\n    color(\"burlywood\")\n    translate([10, 20, 3])\n    cube([60, 20, 2], center=false);\n    \n    // Pier pilings\n    for(x = [15:10:65]) {\n        color(\"saddlebrown\")\n        translate([x, 25, 0])\n        cylinder(h=3, d=2);\n    }\n    \n    // Pier railing\n    color(\"darkgray\")\n    for(x = [12:4:68]) {\n        translate([x, 20, 5])\n        cube([2, 1, 3], center=false);\n        translate([x, 40, 5])\n        cube([2, 1, 3], center=false);\n    }\n}\n\nmodule warehouses() {\n    // Warehouse 1\n    color(\"firebrick\")\n    translate([10, 5, 3])\n    cube([20, 15, 12], center=false);\n    \n    // Warehouse 2\n    color(\"darkred\")\n    translate([35, 5, 3])\n    cube([25, 15, 10], center=false);\n    \n    // Warehouse roofs\n    color(\"dimgray\")\n    translate([10, 5, 15])\n    rotate([0, 0, 45])\n    scale([1, 0.7, 1])\n    cube([20, 15, 2], center=false);\n    \n    translate([35, 5, 13])\n    rotate([0, 0, 45])\n    scale([1, 0.7, 1])\n    cube([25, 15, 2], center=false);\n}\n\nmodule containers() {\n    // Stack 1\n    for(i = [0:1]) {\n        color(\"orange\")\n        translate([55, 25 + i*6, 5])\n        cube([8, 5, 5], center=false);\n        \n        color(\"darkgreen\")\n        translate([65, 25 + i*6, 5])\n        cube([8, 5, 5], center=false);\n    }\n    \n    // Stack 2\n    for(i = [0:2]) {\n        color(\"navy\")\n        translate([55, 35 + i*6, 8])\n        cube([8, 5, 5], center=false);\n    }\n}\n\nmodule lighthouse() {\n    // Base\n    color(\"gainsboro\")\n    translate([70, 45, 3])\n    cylinder(h=2, d=8);\n    \n    // Tower\n    color(\"ivory\")\n    translate([70, 45, 5])\n    cylinder(h=20, d1=6, d2=4);\n    \n    // Gallery\n    color(\"lightgray\")\n    translate([70, 45, 25])\n    cylinder(h=1, d=7);\n    \n    // Lantern house\n    color(\"gold\")\n    translate([70, 45, 26])\n    cylinder(h=3, d=5);\n    \n    // Light top\n    color(\"yellow\")\n    translate([70, 45, 29])\n    sphere(d=2);\n}\n\n// Render the scene\nport_scene();",
    "renders": true
  },
  {
    "building": "pier",
    "openscad_code": "// Realistic Pier - Medium Complexity\n// Dimensions optimized for 3D printing (80mm length)\n\n$fn = 32;\n\n// Main dimensions\npier_length = 80;\npier_width = 20;\ndeck_thickness = 2;\npile_diameter = 2;\npile_spacing = 10;\npile_height = 15;\n\nmodule pier_deck() {\n    // Main deck planks\n    for (i = [0:4]) {\n        translate([i * 4 - 8, 0, pile_height])\n            cube([3.8, pier_width, deck_thickness], center = true);\n    }\n    \n    // Side beams\n    translate([0, pier_width/2 - 1, pile_height - 1])\n        cube([pier_length, 2, 4], center = true);\n    translate([0, -pier_width/2 + 1, pile_height - 1])\n        cube([pier_length, 2, 4], center = true);\n}\n\nmodule piles() {\n    // Support piles\n    for (x = [-pier_length/2 + 5: pile_spacing: pier_length/2 - 5]) {\n        for (y = [-pier_width/2 + 3, pier_width/2 - 3]) {\n            translate([x, y, 0])\n                cylinder(h = pile_height, d = pile_diameter);\n        }\n    }\n}\n\nmodule cross_braces() {\n    // Diagonal bracing between piles\n    for (x = [-pier_length/2 + 5: pile_spacing: pier_length/2 - 10]) {\n        translate([x + 5, 0, pile_height/2])\n            rotate([0, 0, 45])\n                cube([pile_spacing * 1.4, 1, 1], center = true);\n        translate([x + 5, 0, pile_height/2])\n            rotate([0, 0, -45])\n                cube([pile_spacing * 1.4, 1, 1], center = true);\n    }\n}\n\nmodule safety_railing() {\n    // Posts\n    for (x = [-pier_length/2 + 2: 8: pier_length/2 - 2]) {\n        translate([x, pier_width/2 - 1, pile_height + 1])\n            cylinder(h = 8, d = 1.5);\n        translate([x, -pier_width/2 + 1, pile_height + 1])\n            cylinder(h = 8, d = 1.5);\n    }\n    \n    // Top rail\n    translate([0, pier_width/2 - 1, pile_height + 8])\n        cube([pier_length, 1, 1], center = true);\n    translate([0, -pier_width/2 + 1, pile_height + 8])\n        cube([pier_length, 1, 1], center = true);\n    \n    // Mid rail\n    translate([0, pier_width/2 - 1, pile_height + 5])\n        cube([pier_length, 0.8, 0.8], center = true);\n    translate([0, -pier_width/2 + 1, pile_height + 5])\n        cube([pier_length, 0.8, 0.8], center = true);\n}\n\nmodule ladder() {\n    // Access ladder at end\n    translate([pier_length/2 - 3, 0, 0]) {\n        // Rails\n        translate([0, 3, pile_height/2])\n            cube([1.5, 1, pile_height], center = true);\n        translate([0, -3, pile_height/2])\n            cube([1.5, 1, pile_height], center = true);\n        \n        // Rungs\n        for (z = [2:2:pile_height - 2]) {\n            translate([0, 0, z])\n                cube([1.5, 6, 0.5], center = true);\n        }\n    }\n}\n\nmodule lamp_post() {\n    // Decorative lamp post\n    translate([-pier_length/2 + 5, 0, pile_height + deck_thickness]) {\n        // Post\n        cylinder(h = 10, d = 2);\n        \n        // Light fixture\n        translate([0, 0, 10])\n            sphere(d = 3);\n        \n        // Support arm\n        translate([5, 0, 8])\n            rotate([0, -90, 0])\n                cylinder(h = 5, d = 1);\n    }\n}\n\n// Assembly\nunion() {\n    pier_deck();\n    piles();\n    cross_braces();\n    safety_railing();\n    ladder();\n    lamp_post();\n}",
    "renders": true
  },
  {
    "building": "jetty",
    "openscad_code": "// Jetty model - realistic style, medium complexity\n// Size: 80mm long x 30mm wide x 12mm high\n\n// Main parameters\njetty_length = 80;\njetty_width = 30;\ndeck_thickness = 2;\npost_height = 8;\npost_diameter = 3;\n\n// Deck planks module\nmodule deck_planks(length, width, thickness, gap = 1) {\n    plank_width = 4;\n    num_planks = floor(width / (plank_width + gap));\n    \n    for (i = [0:num_planks-1]) {\n        translate([0, -width/2 + i*(plank_width+gap) + plank_width/2, 0])\n            cube([length, plank_width, thickness], center=true);\n    }\n}\n\n// Support post module\nmodule support_post(height, diameter) {\n    // Main post\n    cylinder(h=height, d=diameter, $fn=12);\n    \n    // Base plate\n    translate([0, 0, -0.5])\n        cylinder(h=1, d=diameter+2, $fn=12);\n}\n\n// Railing post module\nmodule railing_post(height, diameter) {\n    // Post\n    cylinder(h=height, d=diameter, $fn=8);\n    \n    // Top cap\n    translate([0, 0, height])\n        cylinder(h=1, d=diameter+1, $fn=8);\n}\n\n// Railing section module\nmodule railing_section(length, height) {\n    // Top rail\n    translate([0, 0, height])\n        cube([length, 2, 2], center=true);\n    \n    // Middle rail\n    translate([0, 0, height/2])\n        cube([length, 1.5, 1.5], center=true);\n}\n\n// Piling module\nmodule piling(diameter, height) {\n    // Main piling\n    cylinder(h=height, d=diameter, $fn=16);\n    \n    // Tapered top\n    translate([0, 0, height])\n        cylinder(h=3, d1=diameter, d2=diameter-1, $fn=16);\n    \n    // Water line marking\n    translate([0, 0, 4])\n        cylinder(h=0.5, d=diameter+0.5, $fn=16);\n}\n\n// Main jetty assembly\nmodule jetty() {\n    // Main deck\n    translate([0, 0, 5])\n        deck_planks(jetty_length, jetty_width, deck_thickness);\n    \n    // Support frame underneath\n    translate([0, 0, 3.5])\n        cube([jetty_length, jetty_width, 1], center=true);\n    \n    // Support posts (3 along length)\n    for (i = [-1, 0, 1]) {\n        translate([i * jetty_length/3, -jetty_width/2 + 3, 0])\n            support_post(5, post_diameter);\n        translate([i * jetty_length/3, jetty_width/2 - 3, 0])\n            support_post(5, post_diameter);\n    }\n    \n    // Railing posts\n    for (i = [-1, 0, 1]) {\n        translate([i * jetty_length/3, -jetty_width/2 + 1, 5])\n            railing_post(post_height, 2);\n        translate([i * jetty_length/3, jetty_width/2 - 1, 5])\n            railing_post(post_height, 2);\n    }\n    \n    // Railing sections\n    translate([-jetty_length/2 + 5, -jetty_width/2 + 1, 5])\n        railing_section(jetty_length - 10, post_height);\n    translate([-jetty_length/2 + 5, jetty_width/2 - 1, 5])\n        railing_section(jetty_length - 10, post_height);\n    \n    // End posts\n    translate([jetty_length/2 - 2, 0, 5])\n        rotate([0, 0, 90])\n            cube([jetty_width - 4, 2, 10], center=true);\n    translate([-jetty_length/2 + 2, 0, 5])\n        rotate([0, 0, 90])\n            cube([jetty_width - 4, 2, 10], center=true);\n    \n    // Pilings in water\n    translate([-jetty_length/2 - 5, -jetty_width/3, 0])\n        piling(4, 8);\n    translate([-jetty_length/2 - 5, jetty_width/3, 0])\n        piling(4, 8);\n    translate([jetty_length/2 + 5, -jetty_width/3, 0])\n        piling(4, 8);\n    translate([jetty_length/2 + 5, jetty_width/3, 0])\n        piling(4, 8);\n    \n    // Ladder on side\n    translate([jetty_length/2 - 10, -jetty_width/2 - 1, 0]) {\n        // Side rails\n        cube([1, 1, 5], center=true);\n        translate([0, 3, 0])\n            cube([1, 1, 5], center=true);\n        \n        // Rungs\n        for (i = [0:3]) {\n            translate([0, 1.5, i*1.2])\n                cube([1, 2, 0.5], center=true);\n        }\n    }\n}\n\n// Render the jetty\njetty();",
    "renders": true
  },
  {
    "building": "station",
    "openscad_code": "// Realistic medium-complexity train station\n// Approx. 100 mm long, 60 mm wide, 50 mm high\n// Designed for 3D printing with 2 mm walls and no severe overhangs\n\n$fn = 32;  // Smooth curves\n\nmodule main_building() {\n    // Base platform\n    translate([0, 0, 0])\n        cube([80, 50, 3], center = true);\n\n    // Ground floor walls\n    difference() {\n        translate([0, 0, 6.5])\n            cube([76, 46, 13], center = true);\n        // Doorway\n        translate([-30, 0, 6.5])\n            cube([10, 20, 12], center = true);\n        // Windows\n        for (x = [-20:20:20])\n            translate([x, 22, 9])\n                cube([12, 2, 6], center = true);\n        for (x = [-20:20:20])\n            translate([x, -22, 9])\n                cube([12, 2, 6], center = true);\n    }\n\n    // Roof\n    translate([0, 0, 16])\n        cube([82, 52, 2], center = true);\n}\n\nmodule tower() {\n    // Main tower body\n    translate([35, 0, 20])\n        cube([12, 12, 25], center = true);\n\n    // Tower roof (pyramid made from rotated cubes)\n    for (angle = [0:90:270]) {\n        rotate([0, 0, angle])\n            translate([35, 0, 45])\n                rotate([45, 0, 0])\n                    cube([12, 12, 12], center = true);\n    }\n}\n\nmodule canopy_support() {\n    // Support pillars\n    for (x = [-30:30:30])\n        translate([x, 25, 15])\n            cylinder(h = 30, r = 2, center = true);\n    \n    // Canopy roof\n    translate([0, 32, 30])\n        cube([80, 14, 2], center = true);\n    \n    // Canopy braces\n    for (x = [-30:30:30])\n        translate([x, 25, 29])\n            rotate([30, 0, 0])\n                cube([2, 12, 2], center = true);\n}\n\nmodule platform() {\n    // Main platform\n    translate([0, -35, 5])\n        cube([90, 20, 10], center = true);\n    \n    // Platform edge\n    translate([0, -25, 10])\n        cube([90, 2, 10], center = true);\n    \n    // Stairs\n    for (step = [0:2:8])\n        translate([40, -45 + step, step])\n            cube([10, 2, 2], center = true);\n}\n\nmodule details() {\n    // Clock on tower\n    translate([35, 0, 28])\n        rotate([90, 0, 0])\n            cylinder(h = 2, r = 3, center = true);\n    \n    // Station sign\n    translate([0, 0, 18])\n        cube([40, 3, 2], center = true);\n    \n    // Benches\n    for (x = [-20:40:20])\n        translate([x, -30, 11])\n            cube([15, 3, 2], center = true);\n}\n\n// Assemble the station\nunion() {\n    main_building();\n    tower();\n    canopy_support();\n    platform();\n    details();\n}",
    "renders": true
  },
  {
    "building": "dealership",
    "openscad_code": "// Car Dealership - Realistic Style, Medium Complexity\n// 80 mm x 60 mm x 35 mm\n\n$fn = 32;\n\n// Overall dimensions\ndealership_length = 80;\ndealership_width  = 60;\ndealership_height = 35;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule dealership() {\n    // Main showroom building\n    translate([0, 0, 0])\n        showroom();\n\n    // Service garage attached at rear\n    translate([dealership_length/2 - 10, 0, 0])\n        garage();\n\n    // Entrance canopy\n    translate([-dealership_length/2 + 5, 0, dealership_height - 5])\n        canopy();\n\n    // Display cars (simplified)\n    for (x = [-20, 0])\n        translate([x, -dealership_width/4, 3])\n            scale([0.6, 0.25, 0.3])\n                car();\n}\n\nmodule showroom() {\n    // Base slab\n    cube([dealership_length, dealership_width, wall], center = true);\n\n    // Main walls (hollow)\n    difference() {\n        cube([dealership_length, dealership_width, dealership_height], center = true);\n        translate([0, 0, wall])\n            cube([dealership_length - wall*2, dealership_width - wall*2, dealership_height], center = true);\n    }\n\n    // Large front windows\n    difference() {\n        translate([-dealership_length/2 + wall, 0, dealership_height/2])\n            cube([wall, dealership_width - 20, dealership_height - 10], center = true);\n\n        for (y = [-15, 0, 15])\n            translate([-dealership_length/2 + wall, y, dealership_height/2])\n                cube([wall + 1, 8, dealership_height - 14], center = true);\n    }\n\n    // Roof\n    translate([0, 0, dealership_height])\n        cube([dealership_length + 2, dealership_width + 2, wall], center = true);\n}\n\nmodule garage() {\n    garage_len = 30;\n    garage_wid = 40;\n    garage_hgt = 20;\n\n    // Garage structure\n    difference() {\n        cube([garage_len, garage_wid, garage_hgt], center = true);\n        translate([0, 0, wall])\n            cube([garage_len - wall*2, garage_wid - wall*2, garage_hgt], center = true);\n    }\n\n    // Garage doors\n    for (i = [-1, 1])\n        translate([garage_len/2 - wall/2, i * 12, 0])\n            cube([wall + 1, 10, 8], center = true);\n}\n\nmodule canopy() {\n    // Support pillars\n    for (y = [-dealership_width/3, dealership_width/3]) {\n        translate([0, y, -dealership_height/2 + 2.5])\n            cylinder(h = dealership_height/2 + 5, r = 2, center = true);\n    }\n\n    // Canopy roof\n    translate([0, 0, 0])\n        cube([30, dealership_width/1.5, wall], center = true);\n}\n\nmodule car() {\n    union() {\n        // Body\n        cube([10, 4, 2], center = true);\n\n        // Cabin\n        translate([0, 0, 1.5])\n            cube([6, 3.5, 1.5], center = true);\n\n        // Wheels\n        for (x = [-3.5, 3.5])\n            for (y = [-2.2, 2.2])\n                translate([x, y, -1.2])\n                    cylinder(h = 1, r = 1, center = true);\n    }\n}\n\ndealership();",
    "renders": true
  },
  {
    "building": "boutique",
    "openscad_code": "// Boutique model - realistic style, medium complexity\n// Overall size: 80mm wide, 60mm deep, 50mm tall\n\n// Main building structure\nmodule building() {\n    // Base foundation\n    difference() {\n        cube([85, 65, 5], center=true);\n        translate([0, 0, -2.5]) cube([83, 63, 6], center=true);\n    }\n    \n    // Main walls\n    difference() {\n        cube([80, 60, 40], center=true);\n        translate([0, 0, -20]) cube([76, 56, 42], center=true);\n    }\n    \n    // Roof\n    translate([0, 0, 22.5]) {\n        cube([85, 65, 5], center=true);\n        translate([0, 0, 2.5]) cube([83, 63, 5], center=true);\n    }\n}\n\n// Large display window\nmodule display_window() {\n    // Window frame\n    difference() {\n        cube([35, 3, 20], center=true);\n        translate([0, -1.5, 0]) cube([33, 1, 18], center=true);\n    }\n    \n    // Window panes (4x3 grid)\n    for(x = [-15, -5, 5, 15]) {\n        for(y = [-7.5, -2.5, 2.5, 7.5]) {\n            translate([x, -2, y]) cube([8, 1, 4], center=true);\n        }\n    }\n    \n    // Window sill\n    translate([0, 2, -11]) cube([37, 2, 2], center=true);\n}\n\n// Door with handle\nmodule entrance_door() {\n    // Door\n    difference() {\n        cube([16, 3, 25], center=true);\n        translate([0, -1.5, 0]) cube([14, 1, 23], center=true);\n    }\n    \n    // Door handle\n    translate([5, -2, 5]) rotate([90, 0, 0]) cylinder(h=3, d=2, $fn=16);\n    \n    // Welcome mat\n    translate([0, 4, -12.5]) cube([18, 1, 8], center=true);\n}\n\n// Sign board above door\nmodule sign_board() {\n    translate([0, -31, 12]) {\n        // Sign backing\n        cube([30, 2, 8], center=true);\n        \n        // Sign text area (engraved)\n        translate([0, -1.1, 0]) cube([28, 0.5, 6], center=true);\n    }\n}\n\n// Awning over display window\nmodule awning() {\n    translate([-10, -30.5, 15]) {\n        // Awning frame\n        for(x = [-20:10:20]) {\n            translate([x, 0, 0]) rotate([90, 0, 0]) cylinder(h=30, d=2, $fn=12);\n        }\n        \n        // Awning fabric\n        translate([0, -1, 2.5]) cube([45, 1, 5], center=true);\n        translate([0, -1, -2.5]) cube([45, 1, 5], center=true);\n    }\n}\n\n// Decorative planters\nmodule planters() {\n    // Left planter\n    translate([-35, -28, -17.5]) {\n        difference() {\n            cube([8, 8, 5], center=true);\n            translate([0, 0, -2.5]) cube([6, 6, 6], center=true);\n        }\n        \n        // Plant\n        translate([0, 0, 3]) cylinder(h=8, d1=6, d2=4, $fn=16);\n    }\n    \n    // Right planter (mirror)\n    translate([35, -28, -17.5]) {\n        difference() {\n            cube([8, 8, 5], center=true);\n            translate([0, 0, -2.5]) cube([6, 6, 6], center=true);\n        }\n        \n        translate([0, 0, 3]) cylinder(h=8, d1=6, d2=4, $fn=16);\n    }\n}\n\n// Assemble the boutique\nbuilding();\n\n// Front facade elements\ntranslate([0, 30, 0]) {\n    display_window();\n    translate([25, 0, 0]) entrance_door();\n    sign_board();\n    awning();\n}\n\n// Side windows\ntranslate([40, 0, 5]) rotate([0, 90, 0]) {\n    for(y = [20, -20]) {\n        translate([0, y, 0]) {\n            difference() {\n                cube([15, 3, 15], center=true);\n                translate([0, -1.5, 0]) cube([13, 1, 13], center=true);\n            }\n        }\n    }\n}\n\n// Back windows\ntranslate([0, -30, 5]) rotate([0, 180, 0]) {\n    for(x = [-25, 25]) {\n        translate([x, 0, 0]) {\n            difference() {\n                cube([15, 3, 15], center=true);\n                translate([0, -1.5, 0]) cube([13, 1, 13], center=true);\n            }\n        }\n    }\n}\n\n// Add planters\nplanters();",
    "renders": true
  },
  {
    "building": "emporium",
    "openscad_code": "// Emporium Storefront - Realistic Style, Medium Complexity\n// Overall dimensions: 60mm wide x 50mm deep x 45mm tall\n\n// Main building block\nmodule building_body() {\n    difference() {\n        // Main structure\n        cube([60, 50, 35], center=false);\n        \n        // Doorway cutout\n        translate([25, 45, 0])\n            cube([10, 5, 20]);\n        \n        // Window cutouts\n        for (x = [10, 40]) {\n            translate([x, 45, 15])\n                cube([10, 5, 10]);\n        }\n    }\n}\n\n// Roof with overhang\nmodule roof() {\n    translate([-5, -5, 35]) {\n        difference() {\n            // Main roof\n            cube([70, 60, 10]);\n            \n            // Roof angle\n            translate([0, 0, -1])\n                cube([70, 60, 12]);\n        }\n    }\n}\n\n// Door with frame\nmodule door() {\n    translate([25, 45, 0]) {\n        // Door frame\n        cube([10, 2, 20]);\n        \n        // Door panels\n        translate([1, -1, 2]) {\n            for (i = [0, 1]) {\n                translate([0, 0, i * 8])\n                    cube([8, 1, 6]);\n            }\n        }\n        \n        // Door handle\n        translate([8, -1.5, 10])\n            cylinder(h=2, r=1);\n    }\n}\n\n// Windows with frames\nmodule window(x_pos) {\n    translate([x_pos, 45, 15]) {\n        // Window frame\n        cube([10, 2, 10]);\n        \n        // Window panes (4 panes)\n        for (px = [2, 6]) {\n            for (py = [2, 6]) {\n                translate([px, -1, py])\n                    cube([2, 1, 2]);\n            }\n        }\n    }\n}\n\n// Store sign\nmodule sign() {\n    translate([15, 30, 25]) {\n        rotate([90, 0, 0]) {\n            // Sign backing\n            cube([30, 2, 15]);\n            \n            // Text placeholder (raised rectangles)\n            for (i = [0:3]) {\n                translate([2 + i * 7, 0, 1])\n                    cube([5, 1, 1]);\n            }\n        }\n    }\n}\n\n// Awning supports\nmodule awning_support(x) {\n    translate([x, 50, 20])\n        cylinder(h=15, r=1);\n}\n\n// Awning\nmodule awning() {\n    // Fabric awning\n    translate([0, 50, 35]) {\n        cube([60, 10, 0.5]);\n        \n        // Awning stripes\n        for (i = [0:5]) {\n            translate([i * 10, 0, 0.5])\n                cube([5, 10, 0.5]);\n        }\n    }\n    \n    // Support posts\n    awning_support(10);\n    awning_support(50);\n}\n\n// Chimney\nmodule chimney() {\n    translate([45, 10, 35]) {\n        cube([8, 8, 15]);\n        \n        // Chimney top\n        translate([-1, -1, 15])\n            cube([10, 10, 2]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    building_body();\n    \n    // Roof elements\n    roof();\n    \n    // Architectural details\n    door();\n    window(10);\n    window(40);\n    \n    // Store features\n    sign();\n    awning();\n    chimney();\n}",
    "renders": true
  },
  {
    "building": "supermarket",
    "openscad_code": "// Supermarket Model - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n// Overall dimensions: 80x60x30mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main building module\nmodule supermarket() {\n    // Base foundation\n    translate([0, 0, -1])\n        cube([80, 60, 2], center = true);\n    \n    // Main building structure\n    difference() {\n        translate([0, 0, 15])\n            cube([80, 60, 30], center = true);\n        \n        // Hollow interior\n        translate([0, 0, 15])\n            cube([76, 56, 30], center = true);\n    }\n    \n    // Front entrance area\n    difference() {\n        translate([0, -25, 20])\n            cube([30, 10, 20], center = true);\n        \n        // Entrance doorway\n        translate([0, -25, 15])\n            cube([20, 10, 16], center = true);\n    }\n    \n    // Automatic doors (represented as glass panels)\n    for(x = [-6, 6]) {\n        translate([x, -30, 15])\n            cube([8, 0.5, 16], center = true);\n    }\n    \n    // Flat roof with slight overhang\n    translate([0, 0, 31])\n        cube([84, 64, 1], center = true);\n}\n\n// Windows module\nmodule windows() {\n    // Front windows (large display windows)\n    for(pos = [-25, -15, -5, 5, 15, 25]) {\n        translate([pos, -29, 20])\n            cube([8, 1, 12], center = true);\n    }\n    \n    // Side windows\n    for(pos = [-20, -10, 0, 10, 20]) {\n        translate([39, pos, 20])\n            cube([1, 8, 12], center = true);\n    }\n    \n    // Back windows\n    for(pos = [-25, -15, -5, 5, 15, 25]) {\n        translate([pos, 29, 20])\n            cube([8, 1, 12], center = true);\n    }\n}\n\n// Parking lot module\nmodule parking_lot() {\n    // Asphalt base\n    translate([0, -50, -0.5])\n        cube([100, 30, 1], center = true);\n    \n    // Parking space lines\n    color(\"white\") {\n        for(x = [-30, -10, 10, 30]) {\n            translate([x, -50, 0.1])\n                cube([12, 0.5, 0.2], center = true);\n        }\n    }\n}\n\n// Signage module\nmodule signage() {\n    // Main store sign\n    translate([0, -35, 35])\n        cube([40, 2, 6], center = true);\n    \n    // Sign poles\n    for(x = [-20, 20]) {\n        translate([x, -35, 25])\n            cylinder(h = 20, r = 1);\n    }\n    \n    // Shopping cart corral\n    translate([35, -45, 5])\n    difference() {\n        cube([8, 12, 10], center = true);\n        translate([0, 0, 5])\n            cube([6, 10, 10], center = true);\n    }\n}\n\n// HVAC units on roof\nmodule hvac() {\n    for(pos = [[-20, 15], [20, 15], [-20, -15], [20, -15]]) {\n        translate([pos[0], pos[1], 32])\n            cube([8, 8, 3], center = true);\n    }\n}\n\n// Main assembly\nsupermarket();\nwindows();\nparking_lot();\nsignage();\nhvac();",
    "renders": true
  },
  {
    "building": "hypermarket",
    "openscad_code": "// Hypermarket model - Realistic style, medium complexity\n// Designed for 3D printing (50mm x 30mm x 20mm)\n\n// Scale factor for easier modeling\nscale_factor = 1;\n\n// Main building dimensions\nbuilding_width = 50 * scale_factor;\nbuilding_depth = 30 * scale_factor;\nbuilding_height = 15 * scale_factor;\nwall_thickness = 1 * scale_factor;\n\n// Entrance dimensions\nentrance_width = 8 * scale_factor;\nentrance_height = 10 * scale_factor;\n\n// Window dimensions\nwindow_width = 6 * scale_factor;\nwindow_height = 4 * scale_factor;\nwindow_spacing = 10 * scale_factor;\n\n// Roof dimensions\nroof_overhang = 2 * scale_factor;\nroof_height = 3 * scale_factor;\n\n// Parking lot\nparking_width = 60 * scale_factor;\nparking_depth = 15 * scale_factor;\n\nmodule main_building() {\n    // Base structure\n    difference() {\n        // Main box\n        cube([building_width, building_depth, building_height]);\n        \n        // Front entrance\n        translate([building_width/2 - entrance_width/2, -0.1, 0])\n            cube([entrance_width, wall_thickness + 0.2, entrance_height]);\n        \n        // Side windows\n        for(i = [0:2]) {\n            translate([5 + i * window_spacing, -0.1, building_height/2 - window_height/2])\n                cube([window_width, wall_thickness + 0.2, window_height]);\n        }\n        \n        // Back windows\n        for(i = [0:2]) {\n            translate([5 + i * window_spacing, building_depth - wall_thickness, building_height/2 - window_height/2])\n                cube([window_width, wall_thickness + 0.2, window_height]);\n        }\n    }\n    \n    // Side windows detail\n    for(i = [0:2]) {\n        translate([5 + i * window_spacing, -0.05, building_height/2 - window_height/2 + 0.5])\n            cube([window_width, wall_thickness, window_height - 1]);\n    }\n}\n\nmodule roof() {\n    // Main roof\n    translate([-roof_overhang, -roof_overhang, building_height])\n        cube([building_width + 2*roof_overhang, building_depth + 2*roof_overhang, roof_height]);\n    \n    // Roof ridge\n    translate([-roof_overhang, -roof_overhang, building_height + roof_height])\n        cube([building_width + 2*roof_overhang, 1, 1]);\n}\n\nmodule entrance_canopy() {\n    // Canopy structure\n    translate([building_width/2 - entrance_width/2 - 2, -3, entrance_height - 2])\n        cube([entrance_width + 4, 3, 2]);\n    \n    // Support pillars\n    translate([building_width/2 - entrance_width/2 - 1, -3, 0])\n        cylinder(h = entrance_height - 2, r = 0.5);\n    translate([building_width/2 + entrance_width/2 + 1, -3, 0])\n        cylinder(h = entrance_height - 2, r = 0.5);\n}\n\nmodule parking_lot() {\n    // Base parking area\n    translate([-5, building_depth + 2, -0.1])\n        cube([parking_width, parking_depth, 0.1]);\n    \n    // Parking lines\n    for(i = [0:4]) {\n        translate([5 + i * 10, building_depth + 5, 0])\n            cube([0.5, 10, 0.2]);\n    }\n}\n\nmodule ventilation_units() {\n    // HVAC units on roof\n    translate([10, 5, building_height + roof_height + 1])\n        cube([5, 3, 2]);\n    translate([building_width - 15, 5, building_height + roof_height + 1])\n        cube([5, 3, 2]);\n}\n\n// Assembly\nunion() {\n    main_building();\n    roof();\n    entrance_canopy();\n    parking_lot();\n    ventilation_units();\n}",
    "renders": true
  },
  {
    "building": "megastore",
    "openscad_code": "// MegaStore – 3D-printable realistic style, medium complexity\n// Overall footprint ~55 mm × 50 mm × 35 mm\n\n$fa = 2;\n$fs = 0.5;\n\n// Main building shell\nmodule main_building() {\n    difference() {\n        // Main block\n        translate([-25, -25, 0])\n            cube([50, 50, 25]);\n\n        // Entrance recess\n        translate([-28, -15, 0])\n            cube([8, 30, 20]);\n\n        // Doorway\n        translate([-27, -6, 0])\n            cube([6, 12, 15]);\n    }\n}\n\n// Roof with gentle slope\nmodule roof() {\n    translate([0, 0, 25])\n        linear_extrude(height = 8, scale = 1.05)\n            offset(r = 1)\n                square([50, 50], center = true);\n}\n\n// Front entrance canopy\nmodule canopy() {\n    translate([-27, 0, 15])\n        rotate([0, 15, 0])\n            cube([4, 30, 1.5]);\n}\n\n// Windows in rows\nmodule windows() {\n    for (y = [-20, -10, 0, 10, 20])\n        translate([0, y, 10])\n            cube([0.8, 8, 8]);\n}\n\n// Parking lot base\nmodule parking() {\n    translate([0, -35, -1])\n        color(\"gray\")\n            cube([60, 20, 1]);\n}\n\n// Simple cars\nmodule car(x_pos) {\n    translate([x_pos, -30, 0])\n        union() {\n            cube([6, 3, 2]);\n            translate([1, 0, 2])\n                cube([4, 3, 1.2]);\n        }\n}\n\n// Billboard sign\nmodule billboard() {\n    translate([0, 27, 30])\n        union() {\n            cube([30, 2, 10]);\n            translate([0, -0.5, 10])\n                cube([30, 3, 2]);\n        }\n}\n\n// Assemble the megastore\nunion() {\n    main_building();\n    roof();\n    canopy();\n    windows();\n    parking();\n    car(-10);\n    car(8);\n    car(18);\n    billboard();\n}",
    "renders": true
  },
  {
    "building": "warehouseclub",
    "openscad_code": "// Warehouse Club Model - Realistic Style, Medium Complexity\n// 3D printable warehouse club building with loading bays and signage\n\n// Overall dimensions\nbuilding_width = 60;\nbuilding_depth = 40;\nbuilding_height = 25;\nwall_thickness = 2;\n\n// Main building structure\nmodule building_body() {\n    difference() {\n        // Main rectangular structure\n        cube([building_width, building_depth, building_height], center = true);\n        \n        // Hollow out interior\n        translate([0, 0, wall_thickness/2])\n        cube([building_width - wall_thickness*2, \n              building_depth - wall_thickness*2, \n              building_height - wall_thickness], center = true);\n    }\n}\n\n// Roof with slight pitch\nmodule roof() {\n    color(\"gray\")\n    translate([0, 0, building_height/2 + 2])\n    scale([1.05, 1.05, 0.3])\n    cube([building_width, building_depth, 5], center = true);\n}\n\n// Loading dock bays\nmodule loading_bays() {\n    for(i = [-2, 0, 2]) {\n        translate([i * 15, building_depth/2 - 1, -building_height/2 + 5])\n        color(\"darkgray\")\n        cube([10, 2, 10]);\n        \n        // Bay doors\n        translate([i * 15, building_depth/2 - 0.5, -building_height/2 + 7])\n        color(\"brown\")\n        cube([8, 0.5, 6]);\n    }\n}\n\n// Main entrance\nmodule entrance() {\n    // Entrance canopy\n    translate([0, -building_depth/2 - 3, -building_height/2 + 10])\n    color(\"blue\")\n    cube([20, 6, 1]);\n    \n    // Support pillars\n    for(x = [-8, 8]) {\n        translate([x, -building_depth/2 - 3, -building_height/2 + 5])\n        color(\"blue\")\n        cube([2, 2, 10]);\n    }\n    \n    // Entrance doors\n    translate([0, -building_depth/2 - 0.5, -building_height/2 + 5])\n    color(\"gray\")\n    cube([12, 1, 8]);\n}\n\n// Windows along sides\nmodule windows() {\n    for(pos = [-20, -10, 0, 10, 20]) {\n        // Left side windows\n        translate([-building_width/2 - 0.5, pos, -building_height/2 + 10])\n        color(\"lightblue\")\n        cube([1, 6, 4]);\n        \n        // Right side windows\n        translate([building_width/2 + 0.5, pos, -building_height/2 + 10])\n        color(\"lightblue\")\n        cube([1, 6, 4]);\n    }\n}\n\n// Large warehouse sign\nmodule signage() {\n    translate([0, 0, building_height/2 + 4])\n    color(\"red\")\n    cube([building_width * 0.8, 6, 2], center = true);\n    \n    // Support brackets\n    for(x = [-building_width/3, building_width/3]) {\n        translate([x, 0, building_height/2 + 2.5])\n        color(\"gray\")\n        cube([2, 6, 5]);\n    }\n}\n\n// HVAC units on roof\nmodule hvac_units() {\n    for(pos = [[-15, 10], [15, 10], [-15, -10], [15, -10]]) {\n        translate([pos[0], pos[1], building_height/2 + 3])\n        color(\"lightgray\")\n        cube([5, 5, 3]);\n    }\n}\n\n// Parking lot lights\nmodule parking_lights() {\n    for(pos = [[-building_width/2 - 10, -building_depth/2 - 10], \n               [building_width/2 + 10, -building_depth/2 - 10],\n               [-building_width/2 - 10, building_depth/2 + 10],\n               [building_width/2 + 10, building_depth/2 + 10]]) {\n        translate([pos[0], pos[1], -building_height/2])\n        color(\"gray\")\n        cylinder(h = 15, d = 1, center = false);\n        \n        translate([pos[0], pos[1], -building_height/2 + 15])\n        color(\"yellow\")\n        sphere(d = 2);\n    }\n}\n\n// Assemble all parts\nunion() {\n    building_body();\n    roof();\n    loading_bays();\n    entrance();\n    windows();\n    signage();\n    hvac_units();\n    parking_lights();\n}",
    "renders": true
  },
  {
    "building": "storefront",
    "openscad_code": "// Realistic storefront - roughly 70 mm wide\n// Wall thickness kept at 2 mm for 3D-printability\n\n$fa = 2; $fs = 1;\n\nmodule storefront() {\n    // Base slab\n    translate([0, -5, 0])\n        cube([70, 40, 2], center = true);\n\n    // Back wall\n    translate([0, 15, 18])\n        cube([66, 2, 36], center = true);\n\n    // Side walls\n    translate([-34, 0, 18])\n        cube([2, 40, 36], center = true);\n    translate([34, 0, 18])\n        cube([2, 40, 36], center = true);\n\n    // Front columns (load-bearing look)\n    for (x = [-25, 25]) {\n        translate([x, -19, 18])\n            cube([4, 4, 36], center = true);\n    }\n\n    // Doorway\n    difference() {\n        translate([0, -20, 15])\n            cube([30, 2, 30], center = true);\n        translate([0, -19, 10])\n            cube([14, 4, 20], center = true);\n    }\n\n    // Door panel\n    translate([0, -18.5, 10])\n        cube([13.5, 1, 19], center = true);\n\n    // Door handle\n    translate([5, -18, 10])\n        cylinder(h = 2, r = 1, center = true);\n    translate([5, -19.5, 10])\n        sphere(r = 1);\n\n    // Display windows\n    for (x = [-17.5, 17.5]) {\n        difference() {\n            translate([x, -19, 22])\n                cube([15, 2, 20], center = true);\n            translate([x, -18, 22])\n                cube([11, 2.1, 16], center = true);\n        }\n    }\n\n    // Window frames\n    for (x = [-17.5, 17.5]) {\n        frame(x);\n    }\n\n    // Awning\n    difference() {\n        translate([0, -10, 36])\n            cube([70, 20, 1.5], center = true);\n        translate([0, -5, 37])\n            cube([66, 10, 1.5], center = true);\n    }\n    // Awning supports\n    for (x = [-30, -15, 0, 15, 30]) {\n        translate([x, -20, 36])\n            cylinder(h = 3, r = 1, center = true);\n    }\n\n    // Store sign\n    translate([0, 0, 38])\n        cube([40, 8, 3], center = true);\n    translate([0, 0, 39.6])\n        cube([36, 6, .5], center = true);\n\n    // Roof cap\n    translate([0, 15, 54])\n        cube([70, 40, 2], center = true);\n}\n\nmodule frame(x) {\n    // Top\n    translate([x, -18, 30])\n        cube([12, 2.2, 2], center = true);\n    // Bottom\n    translate([x, -18, 14])\n        cube([12, 2.2, 2], center = true);\n    // Left\n    translate([x - 6, -18, 22])\n        cube([2, 2.2, 16], center = true);\n    // Right\n    translate([x + 6, -18, 22])\n        cube([2, 2.2, 16], center = true);\n}\n\nstorefront();",
    "renders": true
  },
  {
    "building": "shoppe",
    "openscad_code": "// Medieval Apothecary Shoppe - Realistic Medium Complexity\n// 3D printable: walls 2 mm, roof 1.5 mm, no overhangs >45°\n// Overall footprint 55 mm × 45 mm, height 50 mm\n\n$fn = 30;\n\nmodule shoppe() {\n    difference() {\n        union() {\n            // Ground slab\n            translate([0, 0, -1])\n                cube([60, 50, 2], center = true);\n\n            // Main building volume\n            translate([0, 0, 12])\n                cube([50, 40, 24], center = true);\n\n            // Half-timber second floor extension\n            translate([0, 0, 30])\n                cube([46, 36, 16], center = true);\n\n            // Roof ridge\n            translate([0, 0, 44])\n                cube([52, 2, 6], center = true);\n\n            // Roof slopes\n            for (x = [-25, 25])\n                translate([x, 0, 38])\n                    rotate([0, 90 - atan(10 / 26), 0])\n                        cube([27, 42, 2], center = true);\n\n            // Door frame\n            translate([0, -19, 9])\n                cube([10, 2, 18], center = true);\n\n            // Window frames\n            for (yz = [[-15, 9, 24], [15, 9, 24], [0, 9, 34]])\n                translate(yz)\n                    cube([6, 2, 8], center = true);\n\n            // Sign brackets\n            translate([0, -21, 25])\n                rotate([90, 0, 0])\n                    cylinder(h = 6, d = 2, center = true);\n\n            // Chimney\n            translate([-20, 15, 36])\n                cube([8, 8, 14], center = true);\n        }\n\n        // Doorway\n        translate([0, -20, 9])\n            cube([8, 4, 16], center = true);\n\n        // Windows\n        for (yz = [[-15, 10, 24], [15, 10, 24], [0, 10, 34]])\n            translate(yz)\n                cube([4, 4, 6], center = true);\n\n        // Door hardware hole\n        translate([3, -20, 9])\n            rotate([90, 0, 0])\n                cylinder(h = 6, d = 1.5, center = true);\n    }\n\n    // Timber beams (subtractive for half-timber)\n    for (y = [-16, -8, 0, 8, 16])\n        translate([0, y, 30])\n            cube([48, 2, 14], center = true);\n\n    for (z = [24, 32, 38])\n        translate([0, 0, z])\n            cube([48, 38, 2], center = true);\n\n    // Timber posts\n    for (xy = [[-23, -18], [23, -18], [-23, 18], [23, 18]])\n        translate([xy[0], xy[1], 22])\n            cube([2, 2, 20], center = true);\n\n    // Sign board\n    color(\"SaddleBrown\")\n        translate([0, -27, 25])\n            rotate([90, 0, 0])\n                cube([16, 2, 10], center = true);\n\n    // Chimney cap\n    translate([-20, 15, 44])\n        cube([10, 10, 2], center = true);\n}\n\nshoppe();",
    "renders": true
  },
  {
    "building": "kiosk",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Kiosk\n// Overall footprint ≈ 70 mm × 50 mm × 60 mm (L×W×H)\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\nkiosk_w = 50;\nkiosk_d = 35;\nkiosk_h = 55;\n\n// Wall & roof thickness\nwall_t = 2;\nroof_t = 2;\n\nmodule kiosk_body() {\n    // Main shell\n    difference() {\n        // Outer block\n        translate([0, 0, kiosk_h/2])\n            cube([kiosk_w, kiosk_d, kiosk_h], center=true);\n        // Hollow inside\n        translate([0, 0, kiosk_h/2])\n            cube([kiosk_w - 2*wall_t, kiosk_d - 2*wall_t, kiosk_h + 1], center=true);\n    }\n\n    // Front counter window – arch-like opening\n    translate([0, kiosk_d/2 - wall_t/2, kiosk_h*0.6])\n        rotate([0, 90, 0])\n            cylinder(h=kiosk_w*0.5, r=kiosk_h*0.25, center=true);\n    translate([0, kiosk_d/2 - wall_t/2 - 0.1, kiosk_h*0.35])\n        cube([kiosk_w*0.5, wall_t + 0.2, kiosk_h*0.5], center=true);\n}\n\nmodule roof() {\n    // Sloped roof with slight overhang\n    overhang = 3;\n    difference() {\n        translate([0, 0, kiosk_h + roof_t/2])\n            cube([kiosk_w + 2*overhang, kiosk_d + 2*overhang, roof_t], center=true);\n        translate([0, 0, kiosk_h - 0.1])\n            cube([kiosk_w, kiosk_d, roof_t + 0.2], center=true);\n    }\n}\n\nmodule awning() {\n    // Small striped awning above front window\n    awning_w = kiosk_w*0.6;\n    awning_d = 8;\n    awning_h = 1.5;\n    stripes = 6;\n    for (i = [0:stripes-1]) {\n        translate([-awning_w/2 + i*(awning_w/stripes), kiosk_d/2 + awning_d/2 + 1, kiosk_h*0.75])\n            cube([awning_w/stripes + 0.1, awning_d, awning_h]);\n    }\n}\n\nmodule service_shelf() {\n    // Counter shelf under window – printable without support\n    shelf_w = kiosk_w*0.7;\n    shelf_d = 8;\n    shelf_h = 1.5;\n    translate([0, kiosk_d/2 - shelf_d/2, kiosk_h*0.35])\n        cube([shelf_w, shelf_d, shelf_h], center=true);\n    // Triangular brackets\n    for (x = [-shelf_w/3, shelf_w/3]) {\n        translate([x, kiosk_d/2 - shelf_d, kiosk_h*0.35 - shelf_h/2])\n            rotate([90, 0, 90])\n                cylinder(h=shelf_d, r1=wall_t, r2=0.1);\n    }\n}\n\nmodule signage() {\n    // Top sign board\n    sign_w = kiosk_w*0.8;\n    sign_h = 10;\n    sign_t = 1.5;\n    translate([0, 0, kiosk_h + roof_t + sign_h/2])\n        cube([sign_w, wall_t, sign_h], center=true);\n    // Pole supports\n    for (x = [-sign_w/2 + wall_t, sign_w/2 - wall_t]) {\n        translate([x, 0, kiosk_h + roof_t + sign_h/2])\n            rotate([90, 0, 0])\n                cylinder(h=kiosk_d/4, r=wall_t/2);\n    }\n}\n\nmodule vents() {\n    // Simple side ventilation slits\n    vent_h = 3;\n    vent_t = 1;\n    vent_gap = 4;\n    for (z = [kiosk_h*0.3 : vent_gap : kiosk_h*0.8]) {\n        translate([-kiosk_w/2, 0, z])\n            cube([vent_t, kiosk_d, vent_h], center=true);\n        translate([kiosk_w/2, 0, z])\n            cube([vent_t, kiosk_d, vent_h], center=true);\n    }\n}\n\nmodule door() {\n    // Rear door with handle\n    door_w = kiosk_w*0.3;\n    door_h = kiosk_h*0.6;\n    translate([0, -kiosk_d/2 + wall_t/2, door_h/2 + kiosk_h*0.1])\n        cube([door_w, wall_t, door_h], center=true);\n    // Handle\n    handle_r = 1;\n    translate([door_w/2 - handle_r*2, -kiosk_d/2 + wall_t*1.5, door_h/2 + kiosk_h*0.1])\n        rotate([0, 90, 0])\n            cylinder(h=handle_r*3, r=handle_r);\n}\n\nunion() {\n    kiosk_body();\n    roof();\n    awning();\n    service_shelf();\n    signage();\n    vents();\n    door();\n}",
    "renders": true
  },
  {
    "building": "stand",
    "openscad_code": "/* Realistic-style medium-complexity stand\n   Overall footprint ~70 mm x 80 mm\n   Height ~55 mm\n   Designed for 3D printing (no overhangs, 2 mm walls)\n*/\n\n// Parameters --------------------------------------------------------\nwall = 2;               // Wall thickness for 3D print\ntop_r = 20;             // Upper platform radius\nbase_r = 30;            // Footprint radius\nmid_r = 25;             // Mid-shelf radius\nh_total = 55;           // Total height\nh_mid = 25;             // Mid-shelf height\npillar_r = 3.5;         // Pillar radius\npillar_count = 4;       // Number of support pillars\nfillet_r = 1.5;         // Edge fillet radius\n\nmodule half_cylinder(h, r) {\n    intersection() {\n        cylinder(h, r, r, $fn = 50);\n        translate([0, -r, 0]) cube([r*2, r, h]);\n    }\n}\n\nmodule fillet_edge(r, h) {\n    difference() {\n        cylinder(h, r, r, $fn = 50);\n        translate([0, 0, -0.01])\n            cylinder(h + 0.02, r - wall, r - wall, $fn = 50);\n    }\n}\n\n// Base platter ------------------------------------------------------\nmodule base() {\n    difference() {\n        cylinder(h = wall*2, r1 = base_r, r2 = base_r - 2, $fn = 100);\n        // Lightening cavity underneath\n        translate([0, 0, wall])\n            cylinder(h = wall, r = base_r - wall, $fn = 100);\n    }\n    // Edge fillet\n    translate([0, 0, wall*2])\n        scale([1, 1, 0.5])\n        fillet_edge(fillet_r, wall);\n}\n\n// Mid shelf ---------------------------------------------------------\nmodule mid_shelf() {\n    difference() {\n        cylinder(h = wall, r = mid_r, $fn = 90);\n        translate([0, 0, -0.01])\n            cylinder(h = wall + 0.02, r = mid_r - wall, $fn = 90);\n    }\n}\n\n// Top platform ------------------------------------------------------\nmodule top_platform() {\n    difference() {\n        cylinder(h = wall*2, r = top_r, $fn = 70);\n        translate([0, 0, -0.01])\n            cylinder(h = wall*2 + 0.02, r = top_r - wall, $fn = 70);\n    }\n    // Edge fillet on top\n    translate([0, 0, wall*2])\n        scale([1, 1, 0.5])\n        fillet_edge(fillet_r, wall);\n}\n\n// Pillars -----------------------------------------------------------\nmodule pillars() {\n    for (i = [0 : pillar_count - 1]) {\n        angle = i * 360 / pillar_count;\n        translate([cos(angle) * (base_r - pillar_r - 3),\n                   sin(angle) * (base_r - pillar_r - 3),\n                   0])\n            cylinder(h = h_total, r = pillar_r, $fn = 20);\n    }\n}\n\n// Assembly ----------------------------------------------------------\nunion() {\n    base();\n    pillars();\n    translate([0, 0, h_mid - wall]) mid_shelf();\n    translate([0, 0, h_total - wall*2]) top_platform();\n}",
    "renders": true
  },
  {
    "building": "stall",
    "openscad_code": "// Realistic 3D Printable Market Stall\n// Medium complexity, 80 mm wide, 60 mm deep, 70 mm tall\n\n// Parameters\nstall_w = 80;\nstall_d = 60;\nstall_h = 70;\npost_size = 4;\nwall_t = 2;\nroof_over = 6;\ncounter_h = 25;\n\nmodule post(x,y,h=stall_h){\n    translate([x,y,0])\n        cylinder(h=h,d=post_size,$fn=16);\n}\n\nmodule wall(start,end,h,thick=wall_t){\n    dx = end[0]-start[0];\n    dy = end[1]-start[1];\n    len = sqrt(dx*dx+dy*dy);\n    angle = atan2(dy,dx);\n    translate([start[0],start[1],0])\n        rotate([0,0,angle])\n            cube([len,thick,h]);\n}\n\nmodule roof(){\n    // Main roof\n    translate([-roof_over,-roof_over,stall_h])\n        cube([stall_w+2*roof_over,stall_d+2*roof_over,2]);\n    \n    // Roof supports\n    for(x=[-roof_over/2,stall_w+roof_over/2])\n        for(y=[-roof_over/2,stall_d+roof_over/2])\n            translate([x,y,stall_h])\n                cylinder(h=4,d=post_size*0.8,$fn=12);\n}\n\nmodule counter(){\n    // Main counter\n    translate([0,0,0])\n        cube([stall_w,counter_h,wall_t]);\n    \n    // Counter top with slight overhang\n    translate([-2,0,counter_h])\n        cube([stall_w+4,counter_h+2,3]);\n    \n    // Shelf supports\n    for(x=[10,stall_w-10])\n        translate([x,counter_h/2,counter_h+3])\n            cube([wall_t,counter_h/2,15]);\n}\n\nmodule signage(){\n    // Sign board\n    translate([stall_w/2-15,stall_d+1,stall_h-15])\n        cube([30,2,10]);\n    \n    // Sign support\n    translate([stall_w/2-1,stall_d,stall_h-20])\n        cube([2,2,5]);\n}\n\nmodule awning(){\n    // Front awning\n    translate([-roof_over,stall_d+1,stall_h-10])\n        cube([stall_w+2*roof_over,4,10]);\n    \n    // Awning supports\n    for(x=[0,stall_w/2,stall_w])\n        translate([x,stall_d+1,stall_h-15])\n            rotate([90,0,0])\n                cylinder(h=15,d=post_size,$fn=8);\n}\n\n// Main Assembly\nunion(){\n    // Floor\n    translate([-roof_over,-roof_over,0])\n        cube([stall_w+2*roof_over,stall_d+2*roof_over,wall_t]);\n    \n    // Corner posts\n    post(0,0);\n    post(stall_w,0);\n    post(0,stall_d);\n    post(stall_w,stall_d);\n    \n    // Back wall\n    wall([0,stall_d],[stall_w,stall_d],stall_h);\n    \n    // Side walls\n    wall([0,0],[0,stall_d],stall_h);\n    wall([stall_w,0],[stall_w,stall_d],stall_h);\n    \n    // Roof\n    roof();\n    \n    // Counter\n    counter();\n    \n    // Signage\n    signage();\n    \n    // Awning\n    awning();\n    \n    // Small decorative items\n    // Bread loaves on counter\n    for(i=[1:3])\n        translate([i*20,10,counter_h+3.5])\n            scale([1,0.5,0.5])\n                sphere(d=8,$fn=16);\n    \n    // Basket\n    translate([stall_w-20,15,counter_h+3.5])\n        cylinder(h=4,d=12,$fn=32);\n}",
    "renders": true
  },
  {
    "building": "booth",
    "openscad_code": "// Realistic medium-complexity booth\n// Overall footprint ~60 mm wide x 40 mm deep x 58 mm high\n\n$fn = 24;  // Smooth curves for printability\n\n// Main assembly\nbooth();\n\nmodule booth() {\n    // Base platform\n    color(\"lightgray\")\n    translate([0, 0, 1])\n    cube([60, 40, 2], center = true);\n\n    // Back wall\n    color(\"beige\")\n    translate([0, -18, 15])\n    cube([56, 4, 28], center = true);\n\n    // Side walls\n    color(\"beige\")\n    translate([28, 0, 15])\n    cube([4, 40, 28], center = true);\n    \n    color(\"beige\")\n    translate([-28, 0, 15])\n    cube([4, 40, 28], center = true);\n\n    // Roof\n    color(\"white\")\n    translate([0, 0, 30])\n    cube([64, 44, 2], center = true);\n\n    // Roof overhang supports\n    for (x = [-25, 25])\n    translate([x, -20, 27])\n    color(\"white\")\n    cube([4, 4, 6], center = true);\n\n    for (x = [-25, 25])\n    translate([x, 20, 27])\n    color(\"white\")\n    cube([4, 4, 6], center = true);\n\n    // Counter in front\n    color(\"saddlebrown\")\n    translate([0, 16, 7])\n    cube([30, 4, 12], center = true);\n\n    // Counter front panel\n    color(\"darkgoldenrod\")\n    translate([0, 18, 2])\n    cube([30, 2, 8], center = true);\n\n    // Counter support\n    color(\"saddlebrown\")\n    translate([0, 16, 1])\n    cube([26, 2, 2], center = true);\n\n    // Logo block on counter\n    color(\"royalblue\")\n    translate([0, 14, 14])\n    cube([10, 2, 6], center = true);\n\n    // Back-wall posters (thin slabs)\n    for (i = [-1, 1])\n    translate([i * 15, -15.5, 20])\n    color(\"ivory\")\n    cube([8, 1, 10], center = true);\n\n    // Ceiling light recess\n    difference() {\n        color(\"gainsboro\")\n        translate([0, 0, 28])\n        cube([20, 20, 2], center = true);\n        \n        color(\"gainsboro\")\n        translate([0, 0, 29])\n        cube([16, 16, 2], center = true);\n    }\n\n    // Light bulb representation\n    color(\"yellow\")\n    translate([0, 0, 27.5])\n    sphere(d = 4, $fn = 16);\n\n    // Floor texture tiles\n    for (x = [-25, -15, -5, 5, 15, 25])\n    for (y = [-15, -5, 5, 15])\n    translate([x, y, 0.5])\n    color(\"darkgray\")\n    cube([9.5, 9.5, 1], center = true);\n}",
    "renders": true
  },
  {
    "building": "counter",
    "openscad_code": "// Realistic Counter - Medium Complexity\n// Dimensions: 80mm x 50mm x 35mm\n\n// Parameters\ncounter_width = 80;\ncounter_depth = 50;\ncounter_height = 35;\nwall_thickness = 2;\nleg_height = 10;\ndrawer_height = 15;\nhandle_width = 8;\nhandle_height = 3;\nhandle_depth = 2;\n\n// Main counter body\nmodule counter_body() {\n    difference() {\n        // Main frame\n        union() {\n            // Top surface\n            translate([0, 0, counter_height - wall_thickness])\n                cube([counter_width, counter_depth, wall_thickness], center = true);\n            \n            // Left side\n            translate([-counter_width/2 + wall_thickness/2, 0, counter_height/2 - wall_thickness/2])\n                cube([wall_thickness, counter_depth, counter_height - wall_thickness], center = true);\n            \n            // Right side\n            translate([counter_width/2 - wall_thickness/2, 0, counter_height/2 - wall_thickness/2])\n                cube([wall_thickness, counter_depth, counter_height - wall_thickness], center = true);\n            \n            // Back panel\n            translate([0, counter_depth/2 - wall_thickness/2, counter_height/2 - wall_thickness/2])\n                cube([counter_width, wall_thickness, counter_height - wall_thickness], center = true);\n            \n            // Bottom shelf\n            translate([0, 0, leg_height + wall_thickness])\n                cube([counter_width - wall_thickness*2, counter_depth - wall_thickness, wall_thickness], center = true);\n        }\n        \n        // Cut out inner space\n        translate([0, 0, counter_height/2])\n            cube([counter_width - wall_thickness*2, counter_depth - wall_thickness*2, counter_height], center = true);\n    }\n}\n\n// Legs\nmodule legs() {\n    leg_width = 4;\n    leg_positions = [\n        [-counter_width/2 + leg_width, -counter_depth/2 + leg_width, 0],\n        [counter_width/2 - leg_width, -counter_depth/2 + leg_width, 0],\n        [-counter_width/2 + leg_width, counter_depth/2 - leg_width, 0],\n        [counter_width/2 - leg_width, counter_depth/2 - leg_width, 0]\n    ];\n    \n    for(pos = leg_positions) {\n        translate(pos)\n            cube([leg_width, leg_width, leg_height], center = true);\n    }\n}\n\n// Drawer\nmodule drawer() {\n    drawer_width = counter_width - wall_thickness*4;\n    drawer_depth = counter_depth - wall_thickness*3;\n    \n    difference() {\n        // Drawer box\n        translate([0, 0, leg_height + wall_thickness + drawer_height/2])\n            cube([drawer_width, drawer_depth, drawer_height], center = true);\n        \n        // Hollow inside\n        translate([0, 0, leg_height + wall_thickness + drawer_height/2 + wall_thickness/2])\n            cube([drawer_width - wall_thickness*2, drawer_depth - wall_thickness, drawer_height - wall_thickness], center = true);\n    }\n    \n    // Drawer front\n    difference() {\n        translate([0, counter_depth/2 - wall_thickness/2, leg_height + wall_thickness + drawer_height/2])\n            cube([drawer_width, wall_thickness*1.5, drawer_height], center = true);\n        \n        // Handle recess\n        translate([0, counter_depth/2 - wall_thickness*0.75, leg_height + wall_thickness + drawer_height/2])\n            cube([handle_width, wall_thickness*2, handle_height], center = true);\n    }\n    \n    // Handle\n    translate([0, counter_depth/2 + handle_depth/2, leg_height + wall_thickness + drawer_height/2])\n        cube([handle_width, handle_depth, handle_height], center = true);\n}\n\n// Back splash\nmodule back_splash() {\n    splash_height = 8;\n    translate([0, counter_depth/2 - wall_thickness/2, counter_height - wall_thickness + splash_height/2])\n        cube([counter_width, wall_thickness*1.5, splash_height], center = true);\n}\n\n// Assemble the counter\nunion() {\n    legs();\n    counter_body();\n    drawer();\n    back_splash();\n}",
    "renders": true
  },
  {
    "building": "bar",
    "openscad_code": "// Realistic style bar with medium complexity\n// Dimensions: 80mm (width) x 50mm (depth) x 60mm (height)\n\n$fn = 32;\n\n// Main bar counter\nmodule bar_counter() {\n    // Bar top\n    translate([0, 0, 55])\n        cube([80, 50, 5], center=true);\n    \n    // Bar body\n    translate([0, 0, 27.5])\n        cube([75, 45, 45], center=true);\n    \n    // Bar footrest\n    translate([0, 15, 2.5])\n        cube([70, 5, 5], center=true);\n}\n\n// Bar shelves for bottles\nmodule shelves() {\n    // Back panel\n    translate([0, -22.5, 35])\n        cube([70, 5, 40], center=true);\n    \n    // Shelves\n    for(z = [45, 55, 65]) {\n        translate([0, -22.5, z])\n            cube([65, 5, 2], center=true);\n    }\n}\n\n// Bottles on shelves\nmodule bottles() {\n    for(i = [-30:15:30]) {\n        for(z = [45, 55, 65]) {\n            translate([i, -22.5, z+3])\n                cylinder(h=8, d=4, center=true);\n        }\n    }\n}\n\n// Bar stools\nmodule stool(x_pos) {\n    translate([x_pos, 15, 0]) {\n        // Seat\n        translate([0, 0, 25])\n            cylinder(h=3, d=10);\n        \n        // Legs\n        for(angle = [0:90:270]) {\n            rotate([0, 0, angle])\n                translate([3.5, 0, 12.5])\n                    cylinder(h=25, d=2);\n        }\n        \n        // Foot ring\n        translate([0, 0, 12])\n            rotate_extrude()\n                translate([7, 0, 0])\n                    circle(d=2);\n    }\n}\n\n// Cash register\nmodule cash_register() {\n    translate([25, 0, 57.5]) {\n        // Base\n        cube([12, 8, 6], center=true);\n        \n        // Display\n        translate([0, 0, 4])\n            cube([10, 6, 2], center=true);\n        \n        // Buttons\n        for(x = [-3:2:3]) {\n            for(y = [-2:2:2]) {\n                translate([x, y, 5.5])\n                    cylinder(h=0.5, d=1);\n            }\n        }\n    }\n}\n\n// Beer taps\nmodule beer_taps() {\n    translate([-25, 0, 57.5]) {\n        // Tap base\n        cube([8, 15, 6], center=true);\n        \n        // Taps\n        for(x = [-3, 0, 3]) {\n            translate([x, 0, 3]) {\n                cylinder(h=8, d=2);\n                translate([0, 0, 8])\n                    sphere(d=3);\n            }\n        }\n    }\n}\n\n// Glasses\nmodule glasses() {\n    for(x = [-40:20:40]) {\n        translate([x, 10, 57.5]) {\n            difference() {\n                cylinder(h=5, d=5);\n                translate([0, 0, 1])\n                    cylinder(h=4, d=4);\n            }\n        }\n    }\n}\n\n// Assemble the bar\nunion() {\n    bar_counter();\n    shelves();\n    bottles();\n    \n    // Three stools\n    stool(-30);\n    stool(0);\n    stool(30);\n    \n    cash_register();\n    beer_taps();\n    glasses();\n}",
    "renders": true
  },
  {
    "building": "diner",
    "openscad_code": "// Realistic 3D-printable Diner (medium complexity, ~60 mm long)\n// Designed for FDM printing – no extreme overhangs, 1 mm wall thickness assumed\n\n// Parameters\nbase_w = 60;\nbase_d = 35;\nbase_h = 2;\n\nwall_t = 1;       // wall thickness\nroof_h = 12;\ndoor_w = 10;\ndoor_h = 18;\nwindow_w = 8;\nwindow_h = 10;\n\n// Main diner module\nmodule diner() {\n    difference() {\n        union() {\n            // Base slab\n            translate([0, 0, base_h/2])\n                cube([base_w, base_d, base_h], center=true);\n\n            // Floor & walls\n            translate([0, 0, base_h + (20)/2])\n                cube([base_w, base_d, 20], center=true);\n\n            // Roof shell\n            translate([0, 0, base_h + 20 + roof_h/2])\n                roof();\n\n            // Simple entrance canopy\n            translate([-base_w/2 + 2, 0, base_h + 20 - 1])\n                cube([4, base_d*0.8, 2], center=true);\n        }\n\n        // Remove interior\n        translate([0, 0, base_h + wall_t + (20 - 2*wall_t)/2])\n            cube([base_w - 2*wall_t, base_d - 2*wall_t, 20 - 2*wall_t], center=true);\n\n        // Door opening\n        translate([-base_w/2 + wall_t, 0, base_h + door_h/2])\n            cube([wall_t + 1, door_w, door_h], center=true);\n\n        // Windows front\n        for (x = [-20:15:20])\n            translate([x, -base_d/2 + wall_t/2, base_h + 12])\n                cube([window_w, wall_t + 1, window_h], center=true);\n    }\n\n    // Add door frame\n    door_frame();\n\n    // Add segmented windows\n    windows();\n}\n\n// Gabled roof\nmodule roof() {\n    difference() {\n        union() {\n            // Main roof block\n            translate([0, 0, 0])\n                cube([base_w + 2, base_d + 2, roof_h], center=true);\n\n            // Ridge caps\n            translate([0, 0, roof_h/2])\n                rotate([90, 0, 0])\n                    cylinder(h = base_w + 2, r = 1, center=true);\n        }\n\n        // Carve gables\n        for (side = [-1, 1])\n            translate([side * (base_w/2 + 1), 0, 0])\n                rotate([0, 0, side * 90])\n                    rotate([0, 90, 0])\n                        wedge();\n    }\n}\n\n// Simple wedge for gable cut\nmodule wedge() {\n    polyhedron(\n        points = [[0, -roof_h, -base_d/2 - 1],\n                  [0, 0, -base_d/2 - 1],\n                  [0, -roof_h,  base_d/2 + 1],\n                  [0, 0,  base_d/2 + 1]],\n        faces = [[0, 1, 2],\n                 [2, 1, 3]]\n    );\n}\n\n// Window panes + muntins\nmodule windows() {\n    for (x = [-20:15:20]) {\n        translate([x, -base_d/2 + 0.5 + wall_t, base_h + 12]) {\n            // Pane\n            color(\"lightblue\")\n                cube([window_w - 1, 0.5, window_h - 1], center=true);\n            // Horizontal muntin\n            translate([0, 0.3, 0])\n                cube([window_w - 1, 0.5, 1], center=true);\n            // Vertical muntin\n            translate([0, 0.3, 0])\n                rotate([90, 0, 0])\n                    cube([window_h - 1, 0.5, 1], center=true);\n        }\n    }\n}\n\n// Door frame and window\nmodule door_frame() {\n    translate([-base_w/2 + wall_t/2, 0, base_h + door_h/2]) {\n        // Frame\n        difference() {\n            cube([wall_t, door_w + 2, door_h + 2], center=true);\n            cube([wall_t + 1, door_w, door_h], center=true);\n        }\n        // Small door window\n        translate([0, 0, door_h/2 - 3])\n            cube([wall_t, door_w/2, 4], center=true);\n    }\n}\n\n// Render\ndiner();",
    "renders": true
  },
  {
    "building": "café",
    "openscad_code": "// Café Module - Realistic Medium Complexity\n// Overall size: 80 x 60 x 45 mm (L x W x H)\n\n// Main building\nmodule building() {\n    // Base floor slab\n    translate([0,0,-1]) cube([80,60,2], center=true);\n    \n    // Main walls\n    difference() {\n        translate([0,0,22]) cube([78,58,44], center=true);\n        // Interior cavity\n        translate([0,0,22]) cube([74,54,44], center=true);\n    }\n}\n\n// Roof\nmodule roof() {\n    // Main roof\n    translate([0,0,45]) rotate([0,0,0]) \n        cube([82,62,2], center=true);\n    \n    // Roof overhang\n    translate([0,0,46]) cube([86,66,1], center=true);\n}\n\n// Windows\nmodule windows() {\n    // Front windows (3 bays)\n    for(x = [-30, 0, 30]) {\n        translate([x, 29, 22]) \n            cube([12,2,20], center=true);\n    }\n    \n    // Side windows (2 per side)\n    for(y = [-20, 20]) {\n        translate([39, y, 22]) \n            cube([2,12,20], center=true);\n    }\n}\n\n// Door\nmodule door() {\n    translate([0, 29, 12])\n        cube([16,2,24], center=true);\n}\n\n// Awning\nmodule awning() {\n    // Awning frame\n    translate([0, 28, 35]) \n        cube([70,1,3], center=true);\n    \n    // Awning supports\n    for(x = [-25, -10, 10, 25]) {\n        translate([x, 28, 32]) \n            cube([2,1,6], center=true);\n    }\n}\n\n// Outdoor seating area\nmodule patio() {\n    // Patio floor\n    translate([0, -15, -0.5]) \n        cube([60,20,1], center=true);\n    \n    // Patio railing posts\n    for(x = [-25, 0, 25]) {\n        translate([x, -25, 4]) \n            cylinder(h=8, r=1, $fn=8);\n    }\n    \n    // Patio railing\n    translate([0, -25, 8]) \n        cube([60,1,1], center=true);\n}\n\n// Tables and chairs\nmodule furniture() {\n    // Outdoor tables (2)\n    for(pos = [[-20,-15], [20,-15]]) {\n        translate(pos) {\n            // Table top\n            translate([0,0,8]) \n                cube([12,12,1], center=true);\n            // Table legs\n            for(x = [-4,4]) \n                for(y = [-4,4]) \n                    translate([x,y,4]) \n                        cylinder(h=4, r=1, $fn=6);\n        }\n    }\n    \n    // Chairs (4)\n    for(pos = [[-30,-15], [-10,-15], [10,-15], [30,-15]]) {\n        translate(pos) {\n            // Chair seat\n            translate([0,0,4]) \n                cube([8,8,1], center=true);\n            // Chair back\n            translate([0,-3,6]) \n                cube([8,2,4], center=true);\n            // Chair legs\n            for(x = [-3,3]) \n                for(y = [-3,3]) \n                    translate([x,y,2]) \n                        cylinder(h=2, r=0.5, $fn=6);\n        }\n    }\n}\n\n// Sign\nmodule sign() {\n    translate([0, 30, 38]) \n        cube([20,1,6], center=true);\n    \n    // Sign supports\n    translate([-8, 30, 35]) \n        cylinder(h=6, r=0.5, $fn=6);\n    translate([8, 30, 35]) \n        cylinder(h=6, r=0.5, $fn=6);\n}\n\n// Assembly\nunion() {\n    building();\n    roof();\n    windows();\n    door();\n    awning();\n    patio();\n    furniture();\n    sign();\n}",
    "renders": true
  },
  {
    "building": "bistro",
    "openscad_code": "// Bistro Model - Realistic Style, Medium Complexity\n// Approximate size: 80mm x 60mm x 50mm\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Base dimensions\nbase_width = 80;\nbase_depth = 60;\nbase_height = 3;\n\n// Building dimensions\nbuilding_width = 76;\nbuilding_depth = 56;\nbuilding_height = 45;\n\n// Roof dimensions\nroof_overhang = 5;\nroof_height = 8;\n\n// Door dimensions\ndoor_width = 14;\ndoor_height = 22;\n\n// Window dimensions\nwindow_width = 18;\nwindow_height = 20;\nwindow_sill_height = 12;\n\n// Chimney dimensions\nchimney_width = 10;\nchimney_depth = 10;\nchimney_height = 15;\n\n// Awning dimensions\nawning_width = 30;\nawning_depth = 8;\nawning_height = 3;\n\n// Table dimensions\ntable_diameter = 8;\ntable_height = 12;\n\n// Chair dimensions\nchair_width = 6;\nchair_depth = 6;\nchair_height = 10;\n\nmodule bistro() {\n    // Base/Foundation\n    translate([0, 0, 0])\n        cube([base_width, base_depth, base_height], center=true);\n    \n    // Main building structure\n    translate([0, 0, base_height + building_height/2])\n        cube([building_width, building_depth, building_height], center=true);\n    \n    // Roof\n    translate([0, 0, base_height + building_height + roof_height/2])\n        cube([building_width + roof_overhang*2, building_depth + roof_overhang*2, roof_height], center=true);\n    \n    // Door\n    translate([0, -building_depth/2 - 0.5, base_height + door_height/2])\n        cube([door_width, wall_thickness, door_height], center=true);\n    \n    // Door handle\n    translate([door_width/2 - 2, -building_depth/2 - 1, base_height + door_height/2])\n        sphere(r=1);\n    \n    // Windows (3 windows on front)\n    for(i = [-1, 0, 1]) {\n        translate([i * 25, -building_depth/2 - 0.5, base_height + window_sill_height + window_height/2])\n            cube([window_width, wall_thickness, window_height], center=true);\n    }\n    \n    // Windows (2 windows on sides)\n    for(side = [-1, 1]) {\n        for(j = [-1, 0, 1]) {\n            if(j != 0) {\n                rotate([0, 0, 90])\n                    translate([side * (building_depth/2 + 0.5), j * 25, base_height + window_sill_height + window_height/2])\n                        cube([window_width, wall_thickness, window_height], center=true);\n            }\n        }\n    }\n    \n    // Chimney\n    translate([building_width/2 - 15, building_depth/2 - 15, base_height + building_height + roof_height - 2])\n        cube([chimney_width, chimney_depth, chimney_height], center=true);\n    \n    // Awning over door\n    translate([0, -building_depth/2 - awning_depth/2, base_height + door_height + 5])\n        cube([awning_width, awning_depth, awning_height], center=true);\n    \n    // Awning support poles\n    for(x = [-awning_width/2 + 2, awning_width/2 - 2]) {\n        translate([x, -building_depth/2 - awning_depth/2, base_height + door_height + 5 - awning_height/2])\n            cylinder(r=1, h=awning_height);\n    }\n    \n    // Outdoor seating area\n    // Tables\n    for(x = [-20, 0, 20]) {\n        for(y = [15, 30]) {\n            translate([x, y, 0])\n                cylinder(r=table_diameter/2, h=table_height);\n        }\n    }\n    \n    // Chairs around tables\n    for(x = [-20, 0, 20]) {\n        for(y = [15, 30]) {\n            for(angle = [0, 90, 180, 270]) {\n                translate([x + cos(angle) * (table_diameter + 3), \n                          y + sin(angle) * (table_diameter + 3), \n                          0])\n                    rotate([0, 0, angle])\n                        cube([chair_width, chair_depth, chair_height], center=true);\n            }\n        }\n    }\n    \n    // Sign above door\n    translate([0, -building_depth/2 - 3, base_height + door_height + 10])\n        cube([20, 1, 5], center=true);\n    \n    // Sign text holders (simple rectangles)\n    translate([0, -building_depth/2 - 3.5, base_height + door_height + 12.5])\n        cube([18, 0.5, 2], center=true);\n}\n\nbistro();",
    "renders": true
  },
  {
    "building": "grill",
    "openscad_code": "// Realistic Medium-Complexity 3D Printable Grill\n// Overall size ~80 mm (L) x 50 mm (D) x 45 mm (H)\n\n// Base / Stand\nmodule base() {\n    difference() {\n        union() {\n            // Main base box\n            translate([-40, -25, 0])\n                cube([80, 50, 3]);\n            // Front legs\n            translate([-35, -25, 0])\n                cube([5, 3, 10]);\n            translate([30, -25, 0])\n                cube([5, 3, 10]);\n            // Rear legs\n            translate([-35, 22, 0])\n                cube([5, 3, 10]);\n            translate([30, 22, 0])\n                cube([5, 3, 10]);\n        }\n        // Lighten legs (hollow)\n        translate([-33.5, -24, 1])\n            cube([2, 1, 8]);\n        translate([31.5, -24, 1])\n            cube([2, 1, 8]);\n        translate([-33.5, 23, 1])\n            cube([2, 1, 8]);\n        translate([31.5, 23, 1])\n            cube([2, 1, 8]);\n    }\n}\n\n// Firebox / Lower chamber\nmodule firebox() {\n    difference() {\n        translate([-35, -20, 10])\n            cube([70, 40, 18]);\n        // Inner cavity\n        translate([-33, -18, 12])\n            cube([66, 36, 14]);\n        // Air vent slots front\n        for (i = [0:2])\n            translate([-32 + i*10, -21, 13])\n                cube([8, 1, 6]);\n        // Air vent slots back\n        for (i = [0:2])\n            translate([-32 + i*10, 40, 13])\n                cube([8, 1, 6]);\n    }\n}\n\n// Grill grate\nmodule grate() {\n    difference() {\n        translate([-33, -18, 28])\n            cube([66, 36, 2]);\n        // Grid holes\n        for (x = [-30:6:30])\n            for (y = [-15:6:15])\n                translate([x, y, 29.5])\n                    cube([3, 3, 1]);\n    }\n}\n\n// Lid\nmodule lid() {\n    difference() {\n        union() {\n            // Main lid shell\n            translate([-36, -21, 30])\n                cube([72, 42, 14]);\n            // Handle\n            translate([0, 0, 44])\n                cylinder(h=6, r=4, $fn=20);\n        }\n        // Inner clearance\n        translate([-34, -19, 31])\n            cube([68, 38, 12]);\n        // Hinge clearance\n        translate([-36, -21, 30])\n            rotate([0, 90, 0])\n                cylinder(h=10, r=2, $fn=10);\n        translate([26, -21, 30])\n            rotate([0, 90, 0])\n                cylinder(h=10, r=2, $fn=10);\n    }\n}\n\n// Chimney\nmodule chimney() {\n    difference() {\n        translate([-5, 18, 44])\n            cylinder(h=10, r=4, $fn=20);\n        translate([-3, 20, 45])\n            cylinder(h=8, r=2, $fn=16);\n    }\n}\n\n// Side shelf (left)\nmodule shelf() {\n    difference() {\n        translate([-45, -15, 28])\n            cube([10, 30, 2]);\n        // Cutouts for fingers\n        for (i = [0:1])\n            translate([-44, -10 + i*20, 29.5])\n                cube([8, 4, 1]);\n    }\n}\n\n// Wheels (simple discs)\nmodule wheel() {\n    difference() {\n        cylinder(h=3, r=5, $fn=20);\n        translate([0, 0, -0.1])\n            cylinder(h=3.2, r=2, $fn=20);\n    }\n}\n\n// Assembly\nbase();\nfirebox();\ngrate();\ntranslate([0, 0, -1])\n    lid();\nchimney();\nshelf();\n// Left wheel\ntranslate([-38, -30, 3])\n    rotate([0, 0, 90])\n        wheel();\n// Right wheel\ntranslate([38, -30, 3])\n    rotate([0, 0, 90])\n        wheel();",
    "renders": true
  },
  {
    "building": "steakhouse",
    "openscad_code": "// Steakhouse Restaurant Model\n// Medium complexity, realistic style\n\n// Overall dimensions\n$fn = 32;  // Smooth curves\n\nmodule building() {\n    // Main restaurant building\n    difference() {\n        // Main structure\n        cube([60, 40, 25]);\n        \n        // Doorway\n        translate([29, -1, 0]) cube([12, 2, 18]);\n        \n        // Windows on front\n        for(i = [0:1]) {\n            translate([10 + i*25, -1, 10]) cube([8, 2, 8]);\n        }\n    }\n    \n    // Roof\n    translate([-2, -2, 25]) cube([64, 44, 4]);\n    \n    // Chimney\n    translate([45, 5, 29]) cube([8, 8, 15]);\n}\n\nmodule porch() {\n    // Front porch/deck\n    translate([5, -10, 0]) cube([50, 10, 2]);\n    \n    // Porch posts\n    for(pos = [10, 30, 50]) {\n        translate([pos, -10, 2]) cylinder(h=12, r=1.5);\n    }\n    \n    // Porch roof\n    translate([3, -12, 14]) cube([54, 12, 1]);\n}\n\nmodule sign() {\n    // Sign post\n    translate([30, -12, 14]) cylinder(h=8, r=1);\n    \n    // Sign board\n    translate([22, -12, 21.5]) cube([16, 2, 6]);\n}\n\nmodule tables() {\n    // Outdoor seating area\n    translate([15, 45, 0]) {\n        // Table\n        cylinder(h=10, r=6);\n        translate([0, 0, 10]) cylinder(h=1, r=8);\n        \n        // Chairs around table\n        for(angle = [0:90:270]) {\n            rotate([0, 0, angle]) {\n                translate([12, 0, 0]) {\n                    // Chair base\n                    cylinder(h=6, r=3);\n                    translate([0, 0, 6]) cube([6, 4, 4], center=true);\n                    // Chair back\n                    translate([0, -2, 8]) cube([6, 1, 4], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule grill() {\n    // BBQ grill in back\n    translate([45, 45, 0]) {\n        // Grill base\n        cube([12, 12, 8]);\n        \n        // Grill top\n        translate([-1, -1, 8]) cube([14, 14, 2]);\n        \n        // Chimney pipe\n        translate([5, 5, 10]) cylinder(h=6, r=2);\n    }\n}\n\nmodule parking_lot() {\n    // Simple parking area\n    translate([-5, 60, -0.5]) cube([70, 20, 1]);\n    \n    // Parking lines\n    for(x = [5:15:65]) {\n        translate([x, 60, 0.2]) cube([10, 1, 0.2]);\n    }\n}\n\n// Combine all elements\nunion() {\n    building();\n    porch();\n    sign();\n    tables();\n    grill();\n    parking_lot();\n}",
    "renders": true
  },
  {
    "building": "pub",
    "openscad_code": "// Pub building for 3D printing, medium realism\n// Overall size: 80 mm wide × 60 mm deep × 60 mm tall\n\n$fn = 32;  // Smoothed curves\n\n// Main building block\nmodule building() {\n    // Ground floor walls – hollow box\n    difference() {\n        translate([0, 0, 10])\n            cube([80, 60, 20], center = true);\n        translate([0, 0, 12])\n            cube([72, 52, 18], center = true);\n    }\n\n    // First floor walls – hollow box\n    difference() {\n        translate([0, 0, 30])\n            cube([80, 60, 20], center = true);\n        translate([0, 0, 32])\n            cube([72, 52, 18], center = true);\n    }\n\n    // Roof\n    translate([0, 0, 45])\n        rotate([0, 90, 0])\n            cylinder(h = 85, d1 = 70, d2 = 65);\n}\n\n// Door with small canopy\nmodule pub_door() {\n    // Door frame\n    translate([-10, 30, 0])\n        cube([20, 2, 20]);\n\n    // Door recess\n    difference() {\n        translate([-8, 31, 0])\n            cube([16, 2, 18]);\n        translate([-6, 31.5, 2])\n            cube([12, 2, 14]);\n    }\n\n    // Simple canopy above door\n    translate([0, 30, 22])\n        cube([26, 4, 2], center = true);\n}\n\n// Windows (reusable module)\nmodule window() {\n    // Window frame\n    difference() {\n        cube([12, 2, 12]);\n        translate([1, 0.5, 1])\n            cube([10, 2, 10]);\n    }\n}\n\n// Place windows on ground and first floor\nmodule windows() {\n    // Ground floor windows\n    translate([-30, 30, 10])\n        window();\n    translate([30, 30, 10])\n        window();\n    translate([-30, -30, 10])\n        window();\n    translate([30, -30, 10])\n        window();\n\n    // First floor windows\n    translate([-30, 30, 30])\n        window();\n    translate([30, 30, 30])\n        window();\n    translate([-30, -30, 30])\n        window();\n    translate([30, -30, 30])\n        window();\n}\n\n// Sign board above door\nmodule pub_sign() {\n    translate([0, 30, 26])\n        cube([30, 2, 6], center = true);\n}\n\n// Chimney on roof\nmodule chimney() {\n    translate([25, 0, 50])\n        cube([10, 10, 15]);\n}\n\n// Assemble the pub\nunion() {\n    building();\n    pub_door();\n    windows();\n    pub_sign();\n    chimney();\n}",
    "renders": true
  },
  {
    "building": "motel",
    "openscad_code": "// Motel Model - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n$fn = 32;\nwall_thickness = 1.2;\n\nmodule room(width, depth, height) {\n    // Main room block\n    difference() {\n        cube([width, depth, height]);\n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([width - 2*wall_thickness, depth - 2*wall_thickness, height - wall_thickness]);\n    }\n    \n    // Door\n    translate([width - wall_thickness, depth/2 - 4, 0])\n        cube([wall_thickness, 8, 12]);\n    \n    // Window\n    translate([wall_thickness, depth - wall_thickness, 8])\n        cube([width - 2*wall_thickness, wall_thickness, 6]);\n}\n\nmodule roof(width, depth, height) {\n    // Gabled roof\n    translate([-2, -2, height])\n        cube([width + 4, depth + 4, 2]);\n    \n    for(i = [0:1]) {\n        rotate([0, i*180 - 90, 0])\n            translate([width/2, 0, height + 2])\n                linear_extrude(height = depth/2 + 2, center = true)\n                    polygon(points = [[0, 0], [width/2 + 2, 0], [0, 8]]);\n    }\n}\n\nmodule sign(text_string) {\n    // Motel sign post\n    translate([15, -2, 0])\n        cylinder(h = 20, r = 0.5);\n    \n    // Sign board\n    translate([15, -2, 22])\n        cube([16, 1, 6]);\n    \n    // Motel text (simplified as raised blocks)\n    translate([7, -1.5, 23])\n        cube([12, 0.5, 1]);\n    translate([7, -1.5, 24.5])\n        cube([12, 0.5, 1]);\n}\n\nmodule air_conditioner() {\n    // AC unit under window\n    translate([0, 0, 0]) {\n        cube([5, 2, 3]);\n        translate([1, 1.1, 1])\n            cube([3, 0.2, 1]);\n    }\n}\n\nmodule parking_space() {\n    // Simple parking spot\n    color(\"gray\")\n    translate([-5, 15, 0.1])\n        cube([10, 20, 0.2]);\n}\n\n// Main motel building\nunion() {\n    // Left room\n    translate([0, 0, 0])\n        room(15, 12, 12);\n    \n    // Right room\n    translate([17, 0, 0])\n        room(15, 12, 12);\n    \n    // Center office\n    translate([8, 14, 0])\n        room(16, 10, 14);\n    \n    // Roofs\n    translate([0, 0, 0])\n        roof(15, 12, 12);\n    \n    translate([17, 0, 0])\n        roof(15, 12, 12);\n    \n    translate([8, 14, 0])\n        roof(16, 10, 14);\n    \n    // Connecting walkway roof\n    translate([0, 12, 12])\n        cube([32, 2, 1]);\n    \n    // Staircase\n    for(i = [0:3]) {\n        translate([7.5, 12 + i*0.5, i*0.5])\n            cube([5, 2, 0.5]);\n    }\n    \n    // Sign\n    sign(\"MOTEL\");\n    \n    // AC units\n    translate([5, 0, 3])\n        air_conditioner();\n    translate([22, 0, 3])\n        air_conditioner();\n    \n    // Parking\n    parking_space();\n    translate([20, 0, 0])\n        parking_space();\n}",
    "renders": true
  },
  {
    "building": "resort",
    "openscad_code": "// Resort complex with hotel, pool, cabanas and palm trees\n// Designed for 3D printing - no overhangs, 2mm wall thickness\n\n// Overall scale factor for 3D printing\nscale_factor = 0.2;\n\n// Main module\nmodule resort() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Base platform\n        difference() {\n            cube([250, 200, 10], center=true);\n            translate([0, 0, -1]) cube([230, 180, 12], center=true);\n        }\n        \n        // Hotel building\n        hotel();\n        \n        // Swimming pool\n        pool();\n        \n        // Cabanas\n        for(i = [-1:1]) {\n            translate([80 + i*25, -70, 0]) cabana();\n        }\n        \n        // Palm trees\n        for(pos = [[-90, 60], [90, 60], [-90, -60], [90, -60]]) {\n            translate([pos[0], pos[1], 0]) palm_tree();\n        }\n    }\n}\n\n// Hotel building module\nmodule hotel() {\n    // Main structure\n    difference() {\n        cube([80, 60, 60], center=true);\n        translate([0, 0, -1]) cube([76, 56, 62], center=true);\n    }\n    \n    // Roof\n    translate([0, 0, 31]) cube([84, 64, 4], center=true);\n    \n    // Windows front\n    for(y = [-20, 0, 20]) {\n        for(z = [10, 25, 40]) {\n            translate([41, y, z]) window();\n        }\n    }\n    \n    // Windows side\n    for(x = [-30, -10, 10, 30]) {\n        for(z = [10, 25, 40]) {\n            translate([x, 31, z]) rotate([0, 0, 90]) window();\n        }\n    }\n    \n    // Entrance\n    translate([0, 32, 5]) rotate([90, 0, 0]) cylinder(h=15, r1=10, r2=10, center=true);\n}\n\n// Window module\nmodule window() {\n    difference() {\n        cube([2, 8, 12], center=true);\n        translate([0, 0, 1]) cube([2.5, 7, 10], center=true);\n    }\n}\n\n// Pool module\nmodule pool() {\n    // Pool base\n    difference() {\n        translate([0, 30, 5]) cube([100, 50, 6], center=true);\n        translate([0, 30, 5]) cube([90, 40, 8], center=true);\n    }\n    \n    // Water surface\n    translate([0, 30, 12]) cube([88, 38, 1], center=true);\n    \n    // Pool deck\n    difference() {\n        translate([0, 30, 6]) cube([110, 60, 2], center=true);\n        translate([0, 30, 6]) cube([100, 50, 3], center=true);\n    }\n}\n\n// Cabana module\nmodule cabana() {\n    // Base\n    cube([20, 20, 15], center=true);\n    \n    // Roof\n    translate([0, 0, 16]) cube([24, 24, 2], center=true);\n    \n    // Support posts\n    for(pos = [[-8, -8], [8, -8], [-8, 8], [8, 8]]) {\n        translate([pos[0], pos[2], 8]) cylinder(h=16, r=1.5, center=true);\n    }\n}\n\n// Palm tree module\nmodule palm_tree() {\n    // Trunk\n    cylinder(h=40, r1=4, r2=2, center=false);\n    \n    // Palm fronds\n    for(i = [0:45:315]) {\n        rotate([0, 0, i]) translate([0, 0, 40]) rotate([30, 0, 0]) \n            scale([1, 0.3, 0.1]) sphere(r=15, center=true);\n    }\n    \n    // Coconuts\n    translate([0, 0, 35]) {\n        for(pos = [[3, 0], [-3, 0], [0, 3], [0, -3]]) {\n            translate([pos[0], pos[1], 0]) sphere(r=2, center=true);\n        }\n    }\n}\n\n// Render the resort\nresort();",
    "renders": true
  },
  {
    "building": "spa",
    "openscad_code": "// Spa module - realistic style, medium complexity\n// Overall dimensions: 90mm x 70mm x 35mm\n\n// Main spa tub\nmodule spa_tub() {\n    difference() {\n        // Outer shell\n        translate([0, 0, 10]) {\n            cube([90, 70, 25], center = true);\n        }\n        \n        // Inner cavity\n        translate([0, 0, 12]) {\n            cube([84, 64, 25], center = true);\n        }\n    }\n}\n\n// Spa rim with rounded edges\nmodule spa_rim() {\n    difference() {\n        // Top rim\n        translate([0, 0, 22]) {\n            cube([94, 74, 4], center = true);\n        }\n        \n        // Cavity for rim\n        translate([0, 0, 22]) {\n            cube([90, 70, 4], center = true);\n        }\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    translate([35, 30, 26]) {\n        color([0.8, 0.8, 0.8]) {\n            cube([15, 8, 2]);\n        }\n    }\n    \n    // Control buttons\n    for(i = [0:2]) {\n        translate([36 + i * 4, 33, 28.5]) {\n            color([0.2, 0.2, 0.2]) {\n                cylinder(h = 1, r = 1.5, $fn = 16);\n            }\n        }\n    }\n}\n\n// Water jets\nmodule water_jets() {\n    // Left side jets\n    for(pos = [[-35, -20], [-35, 0], [-35, 20]]) {\n        translate([pos[0], pos[1], 15]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 5, r = 2, $fn = 12);\n            }\n        }\n    }\n    \n    // Right side jets\n    for(pos = [[35, -20], [35, 0], [35, 20]]) {\n        translate([pos[0], pos[1], 15]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 5, r = 2, $fn = 12);\n            }\n        }\n    }\n    \n    // Front jets\n    for(pos = [[-20, -30], [0, -30], [20, -30]]) {\n        translate([pos[0], pos[1], 15]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 5, r = 2, $fn = 12);\n            }\n        }\n    }\n}\n\n// Steps for entry\nmodule steps() {\n    translate([0, 40, 0]) {\n        // First step\n        translate([0, 0, 0]) {\n            cube([40, 10, 5], center = true);\n        }\n        \n        // Second step\n        translate([0, 7, 5]) {\n            cube([30, 8, 5], center = true);\n        }\n        \n        // Third step\n        translate([0, 12, 10]) {\n            cube([20, 6, 5], center = true);\n        }\n    }\n}\n\n// Headrests\nmodule headrests() {\n    // Left headrest\n    translate([-25, 25, 22]) {\n        cube([15, 8, 8]);\n    }\n    \n    // Right headrest\n    translate([25, 25, 22]) {\n        cube([15, 8, 8]);\n    }\n}\n\n// Drain\nmodule drain() {\n    translate([0, 0, 10]) {\n        cylinder(h = 2, r = 3, $fn = 20);\n    }\n}\n\n// Main assembly\nspa_tub();\nspa_rim();\ncontrol_panel();\nwater_jets();\nsteps();\nheadrests();\ndrain();",
    "renders": true
  },
  {
    "building": "suites",
    "openscad_code": "// Realistic medium-complexity 3D-printable suite (hotel room with furniture)\n// Overall footprint: 80 mm x 60 mm x 30 mm\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main module\nmodule suite() {\n    difference() {\n        // Outer shell\n        translate([-40, -30, 0])\n            cube([80, 60, 30]);\n\n        // Hollow interior\n        translate([-38.5, -28.5, wall])\n            cube([77 - 2*wall, 57 - 2*wall, 28 - wall]);\n    }\n\n    // Floor inside\n    translate([-38.5, -28.5, wall])\n        cube([77 - 2*wall, 57 - 2*wall, 0.6]);\n\n    // Bed frame\n    translate([15, -20, wall + 0.6])\n        cube([30, 40, 5]);\n\n    // Mattress\n    translate([16, -19, wall + 0.6 + 5])\n        cube([28, 38, 4]);\n\n    // Pillows\n    for (i = [0:1]) {\n        translate([20 + i*11, -5, wall + 0.6 + 5 + 4])\n            cube([6, 10, 2]);\n    }\n\n    // Headboard\n    translate([15, -20, wall + 0.6 + 5])\n        cube([30, 2, 12]);\n\n    // Nightstand left\n    translate([5, -15, wall + 0.6])\n        cube([8, 10, 10]);\n\n    // Nightstand right\n    translate([47, -15, wall + 0.6])\n        cube([8, 10, 10]);\n\n    // Desk\n    translate([-35, 5, wall + 0.6])\n        cube([20, 15, 10]);\n\n    // Chair\n    translate([-15, 12, wall + 0.6])\n        cube([6, 6, 8]);\n    translate([-15, 12, wall + 0.6 + 8])\n        cube([6, 1, 6]);\n\n    // Door\n    translate([0, -30, wall])\n        cube([15, wall, 25]);\n\n    // Window\n    translate([40, -20, 15])\n        cube([wall, 20, 10]);\n\n    // Window sill\n    translate([40 + wall, -20, 15])\n        cube([2, 20, 1]);\n\n    // Bathroom wall\n    translate([-40, 15, 0])\n        cube([40, wall, 30]);\n\n    // Bathroom door\n    translate([-25, 15, wall])\n        cube([wall, 10, 20]);\n\n    // Shower\n    translate([-40, 15 + wall, 0])\n        cube([15, 14.5, 30]);\n\n    // Toilet\n    translate([-20, 22, wall + 0.6])\n        cylinder(h=6, r=3, $fn=20);\n    translate([-20, 22, wall + 0.6 + 6])\n        cube([3, 1, 2]);\n\n    // Sink\n    translate([-10, 20, wall + 10])\n        cylinder(h=5, r=4, $fn=20);\n    translate([-10, 20, wall + 10 + 5])\n        cube([8, 1, 6]);\n\n    // Lamps on nightstands\n    for (x = [9, 51]) {\n        translate([x, -10, wall + 0.6 + 10])\n            cylinder(h=5, r=1.5, $fn=16);\n        translate([x, -10, wall + 0.6 + 10 + 5])\n            sphere(d=4, $fn=16);\n    }\n}\n\n// Render\nsuite();",
    "renders": true
  },
  {
    "building": "chambers",
    "openscad_code": "// Realistic Chambers with Medium Complexity\n// 3D printable, wall thickness 2mm, no overhangs\n\n$fn = 32;\n\n// Overall dimensions\nwall_thickness = 2;\nbase_size = 70;\nheight = 40;\n\n// Main chamber structure\nmodule chambers() {\n    // Base foundation\n    difference() {\n        cube([base_size, base_size, height], center = true);\n        translate([0, 0, wall_thickness])\n            cube([base_size - 2*wall_thickness, base_size - 2*wall_thickness, height], center = true);\n    }\n    \n    // Corner towers\n    tower_radius = 8;\n    tower_height = height + 10;\n    for(i = [-1, 1]) {\n        for(j = [-1, 1]) {\n            translate([i * (base_size/2 - tower_radius), j * (base_size/2 - tower_radius), 0])\n                tower(tower_radius, tower_height);\n        }\n    }\n    \n    // Central dome\n    translate([0, 0, height/2])\n        dome();\n    \n    // Entrance arch\n    translate([0, -base_size/2 + wall_thickness, -height/2 + 5])\n        entrance();\n    \n    // Windows\n    window_size = 6;\n    for(i = [-1, 1]) {\n        translate([i * (base_size/3), base_size/2 - wall_thickness, 0])\n            window(window_size, 1);\n    }\n    for(i = [-1, 1]) {\n        translate([base_size/2 - wall_thickness, i * (base_size/3), 0])\n            rotate([0, 0, 90])\n                window(window_size, 1);\n    }\n}\n\n// Tower module\nmodule tower(radius, height) {\n    difference() {\n        cylinder(r = radius, h = height, center = true);\n        translate([0, 0, wall_thickness])\n            cylinder(r = radius - wall_thickness, h = height, center = true);\n    }\n    \n    // Battlements\n    battlement_width = 4;\n    battlement_height = 3;\n    for(deg = [0:45:315]) {\n        rotate([0, 0, deg])\n            translate([radius - battlement_width/2, 0, height/2 - battlement_height/2])\n                cube([battlement_width, wall_thickness*2, battlement_height], center = true);\n    }\n}\n\n// Dome module\nmodule dome() {\n    radius = 20;\n    difference() {\n        sphere(r = radius);\n        translate([0, 0, -radius])\n            cube([radius*2, radius*2, radius], center = true);\n        cylinder(r = radius - wall_thickness, h = radius, center = true);\n    }\n    \n    // Dome top\n    translate([0, 0, radius - 2])\n        sphere(r = 4);\n}\n\n// Entrance arch\nmodule entrance() {\n    arch_width = 12;\n    arch_height = 15;\n    \n    difference() {\n        cube([arch_width, wall_thickness*2, arch_height], center = true);\n        translate([0, -1, arch_height/2 - arch_width/2])\n            cylinder(r = arch_width/2, h = wall_thickness*4, center = true);\n    }\n}\n\n// Window module\nmodule window(size, depth) {\n    difference() {\n        cube([size, depth, size], center = true);\n        translate([0, 0, size/4])\n            cube([size - wall_thickness, depth + 1, size - wall_thickness], center = true);\n    }\n}\n\n// Ground platform\nmodule ground() {\n    translate([0, 0, -height/2 - 1])\n        cube([base_size + 10, base_size + 10, 2], center = true);\n}\n\n// Render the complete chambers\nunion() {\n    ground();\n    chambers();\n}",
    "renders": true
  },
  {
    "building": "dormitory",
    "openscad_code": "// Realistic medium-complexity dormitory model for 3D printing\n// Total footprint ~60mm x 40mm x 35mm high\n\n$fn = 32;\n\n// Main building dimensions\nwall_thickness = 1.5;\nfloor_height = 12;\nwindow_recess = 0.8;\n\n// Main dormitory block\nmodule main_block() {\n    difference() {\n        // Main walls\n        cube([50, 35, 30]);\n        \n        // Interior hollow\n        translate([wall_thickness, wall_thickness, 0])\n            cube([50-2*wall_thickness, 35-2*wall_thickness, 30]);\n        \n        // Door on front\n        translate([22, -0.1, 0])\n            cube([6, wall_thickness+0.2, 10]);\n        \n        // Ground floor windows\n        for(x=[8, 42]) {\n            translate([x, -0.1, 17])\n                cube([6, wall_thickness+0.2, 6]);\n        }\n        \n        // Upper floor windows\n        for(x=[8, 42]) {\n            translate([x, -0.1, 29])\n                cube([6, wall_thickness+0.2, 6]);\n        }\n        \n        // Side windows\n        for(y=[8, 27]) {\n            translate([-0.1, y, 17])\n                cube([wall_thickness+0.2, 6, 6]);\n        }\n    }\n}\n\n// Roof with slight overhang\nmodule roof() {\n    translate([-2, -2, 30])\n        cube([54, 39, 3]);\n}\n\n// Staircase block\nmodule stairs() {\n    translate([0, 35, 0]) {\n        difference() {\n            cube([10, 6, 5]);\n            for(i=[1:4]) {\n                translate([2*i, 0, i])\n                    cube([2, 6, 5-i]);\n            }\n        }\n    }\n}\n\n// Window frames\nmodule window_frames() {\n    for(pos=[[11, -0.2, 20], [45, -0.2, 20], [11, -0.2, 32], [45, -0.2, 32]]) {\n        translate(pos)\n            cube([5.8, 0.4, 5.8]);\n    }\n    \n    for(pos=[[-0.2, 11, 20], [-0.2, 30, 20]]) {\n        translate(pos)\n            cube([0.4, 5.8, 5.8]);\n    }\n}\n\n// Chimney\nmodule chimney() {\n    translate([40, 5, 33]) {\n        cube([5, 5, 7]);\n    }\n}\n\n// Air conditioning units\nmodule ac_units() {\n    // First floor units\n    for(i=[0:1]) {\n        translate([10 + i*30, 35.1, 18])\n            cube([4, 1, 2]);\n    }\n    \n    // Second floor units\n    for(i=[0:1]) {\n        translate([10 + i*30, 35.1, 30])\n            cube([4, 1, 2]);\n    }\n}\n\n// Assemble the dormitory\nunion() {\n    main_block();\n    roof();\n    stairs();\n    window_frames();\n    chimney();\n    ac_units();\n}",
    "renders": true
  },
  {
    "building": "lodgings",
    "openscad_code": "// Medium-complexity realistic lodgings (small guest house / inn)\n// Overall footprint ~60x40 mm, height ~35 mm, walls 1.2 mm thick\n\n$fa = 2; $fs = 0.5;\n\n// Wall thickness\nwall = 1.2;\n\n// Main building shell\nmodule building() {\n    difference() {\n        // Outer block\n        translate([-30, -20, 0])\n            cube([60, 40, 25]);\n\n        // Carve out interior\n        translate([-28.8, -18.8, wall])\n            cube([57.6, 37.6, 23.8]);\n    }\n}\n\n// Gabled roof\nmodule roof() {\n    difference() {\n        union() {\n            // Left slope\n            translate([-32, -22, 25])\n                rotate([0, -30, 0])\n                cube([36, 44, 2]);\n\n            // Right slope\n            translate([32, -22, 25])\n                rotate([0, 30, 0])\n                cube([36, 44, 2]);\n        }\n        // Remove slight overhang inside\n        translate([-32, -22, 24])\n            cube([64, 44, 5]);\n    }\n}\n\n// Simple door with frame\nmodule door() {\n    // Frame\n    color(\"brown\")\n    union() {\n        translate([-5, -20.1, 0])\n            cube([10, 1.2, 14]);\n        translate([-5.6, -20.1, 0])\n            cube([0.6, 1.2, 14]);\n        translate([5, -20.1, 0])\n            cube([0.6, 1.2, 14]);\n    }\n    // Door slab\n    translate([-4.4, -20, 0.6])\n        cube([8.8, 0.6, 13.4]);\n}\n\n// Window with 4 panes\nmodule window(x, z) {\n    // Frame\n    color(\"gray\") {\n        translate([x, -20.1, z])\n            cube([10, 1.2, 10]);\n        translate([x - 0.6, -20.1, z - 0.6])\n            cube([11.2, 1.2, 0.6]);\n        translate([x - 0.6, -20.1, z + 10])\n            cube([11.2, 1.2, 0.6]);\n        translate([x - 0.6, -20.1, z - 0.6])\n            cube([0.6, 1.2, 11.2]);\n        translate([x + 10, -20.1, z - 0.6])\n            cube([0.6, 1.2, 11.2]);\n    }\n    // Mullions\n    color(\"white\") {\n        translate([x + 4.7, -20.05, z])\n            cube([0.6, 0.6, 10]);\n        translate([x, -20.05, z + 4.7])\n            cube([10, 0.6, 0.6]);\n    }\n}\n\n// Chimney\nmodule chimney() {\n    translate([20, 0, 25])\n    difference() {\n        cube([6, 6, 10]);\n        translate([wall, wall, 5])\n            cube([6 - 2*wall, 6 - 2*wall, 5]);\n    }\n}\n\n// Small sign above door\nmodule sign() {\n    color(\"darkgreen\")\n    translate([-7, -20.2, 16])\n        cube([14, 0.6, 5]);\n    translate([0, -20.1, 18.5])\n        rotate([90, 0, 0])\n        linear_extrude(height = 0.4)\n            text(\"INN\", size = 3, halign = \"center\");\n}\n\n// Four small flower boxes under front windows\nmodule flower_boxes() {\n    for (x = [-20, -5, 10, 25]) {\n        translate([x + 5, -20.1, 1])\n            cube([6, 1.2, 2]);\n    }\n}\n\n// Assembly\nbuilding();\nroof();\ndoor();\nwindow(-20, 8);\nwindow(-5, 8);\nwindow(10, 8);\nwindow(25, 8);\nchimney();\nsign();\nflower_boxes();",
    "renders": true
  },
  {
    "building": "branch",
    "openscad_code": "// Realistic 3D-printable branch (medium complexity)\n// Main trunk with two levels of sub-branches and bark texture\n\n// Constants\nbranch_dia = 6;          // mm – trunk diameter\nwall = 1.2;              // mm – shell thickness for printing\nscale_factor = 0.75;     // tapering per level\nlength = 45;             // mm – main trunk length\nsegments = 16;           // cylinder resolution\n\n// --- Helper: hollow cylinder for 3D printing\nmodule hollow_cylinder(h, r1, r2, wall_thk, segs = 16) {\n    difference() {\n        cylinder(h = h, r1 = r1, r2 = r2, $fn = segs);\n        translate([0, 0, -0.01])\n            cylinder(h = h + 0.02, r1 = r1 - wall_thk, r2 = r2 - wall_thk, $fn = segs);\n    }\n}\n\n// --- Bark texture: staggered bumps\nmodule bark_texture(r_base, h) {\n    n_rings = floor(h / 2.5);\n    for (i = [0 : n_rings - 1]) {\n        for (j = [0 : 7]) {\n            rotate([0, 0, j * 45 + (i % 2) * 22.5])\n                translate([r_base, 0, i * 2.5])\n                    rotate([90, 0, 0])\n                        cylinder(h = 1.5, r1 = 0.8, r2 = 0.5, $fn = 8);\n        }\n    }\n}\n\n// --- Branch segment: hollow tapered with bark\nmodule branch_segment(len, r_start, r_end) {\n    union() {\n        // Structural tube\n        hollow_cylinder(h = len, r1 = r_start, r2 = r_end, wall_thk = wall, segs = segments);\n        // Bark\n        bark_texture(r_base = r_start, h = len);\n    }\n}\n\n// --- Recursive branch generator\nmodule make_branch(depth, len, r_start, angle, rot) {\n    if (depth <= 0) {\n        // End cap\n        translate([0, 0, len])\n            difference() {\n                sphere(r = r_start * 0.9, $fn = segments);\n                sphere(r = r_start * 0.9 - wall, $fn = segments);\n            }\n    } else {\n        // Main segment\n        rotate([0, angle, rot])\n            branch_segment(len, r_start, r_start * scale_factor);\n        \n        // Next segment\n        translate([0, 0, len])\n            rotate([0, angle, rot])\n                make_branch(depth - 1, len * 0.8, r_start * scale_factor, angle * 0.9, rot + 25);\n        \n        // Side branch\n        if (depth > 1) {\n            translate([0, 0, len * 0.6])\n                rotate([0, angle * 0.7, rot + 120])\n                    make_branch(depth - 1, len * 0.7, r_start * scale_factor * 0.9, angle + 25, rot - 30);\n        }\n    }\n}\n\n// --- Build the model\nunion() {\n    // Attach to print bed along Z\n    translate([0, 0, 0])\n        rotate([0, 0, 0])\n            make_branch(depth = 3, len = length, r_start = branch_dia / 2, angle = 12, rot = 0);\n}",
    "renders": true
  },
  {
    "building": "bureau",
    "openscad_code": "// Medium-complexity realistic bureau for 3D printing\n// Overall footprint ~60 mm wide × 40 mm deep × 70 mm tall\n// Wall thickness 2 mm – safe for FDM printing\n\n$fn = 32;               // Smooth curved surfaces\n\n// Main module\nmodule bureau() {\n    // Body shell\n    union() {\n        // Carcase\n        difference() {\n            translate([-30, -20, 0])\n                cube([60, 40, 60]);\n            translate([-28, -18, 2])\n                cube([56, 36, 56]);\n        }\n\n        // Top\n        translate([-31, -21, 60])\n            cube([62, 42, 3]);\n\n        // Base plinth\n        translate([-31, -21, -3])\n            cube([62, 42, 3]);\n\n        // Drawer stack\n        for (i = [0:2])\n            translate([0, 0, 10 + i*15])\n                drawer(56, 36, 13);\n\n        // Dividing rails between drawers\n        for (i = [1:2])\n            translate([-30, -20, 10 + i*15 - 1])\n                cube([60, 40, 2]);\n\n        // Handles\n        for (i = [0:2])\n            translate([0, -20 + 1, 16.5 + i*15])\n                rotate([90,0,0])\n                    handle();\n    }\n}\n\n// Single drawer module\nmodule drawer(w, d, h) {\n    difference() {\n        // Front plate\n        translate([-w/2, -d/2, 0])\n            cube([w, d, h]);\n\n        // Recessed panel\n        translate([-w/2+4, -d/2+2, -0.1])\n            cube([w-8, d-4, h+0.2]);\n\n        // Handle hole\n        translate([0, -d/2+2, h/2])\n            rotate([90,0,0])\n                cylinder(h=5, d=3, $fn=16);\n    }\n}\n\n// Handle pull\nmodule handle() {\n    difference() {\n        // Grip bar\n        hull() {\n            translate([-8, 0, 0])\n                sphere(d=4);\n            translate([8, 0, 0])\n                sphere(d=4);\n        }\n        // Clearance hole\n        translate([0,0,-2])\n            cylinder(h=6, d=2, $fn=16);\n    }\n}\n\n// Render the model\nbureau();",
    "renders": true
  },
  {
    "building": "safehouse",
    "openscad_code": "// Safehouse – realistic style, medium complexity\n// Dimensions: 80 mm L × 50 mm W × 30 mm H\n// All walls 2 mm thick, printable without supports\n\n$fn = 32;\n\n// Overall scale\nscale = 1;\n\n// Main body module\nmodule safehouse() {\n    // Foundation slab\n    translate([0, 0, -2])\n        cube([80, 50, 2], center = true);\n\n    // Lower concrete block\n    difference() {\n        translate([0, 0, 11])\n            cube([80, 50, 24], center = true);\n        // Hollow interior\n        translate([0, 0, 11])\n            cube([76, 46, 24], center = true);\n    }\n\n    // Reinforced door\n    translate([-39, 0, 11])\n    difference() {\n        cube([2, 16, 20], center = true);\n        // Door handle hole\n        translate([0, 7, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 3, d = 4, center = true);\n    }\n\n    // Vertical slit windows (front & back)\n    for (x = [-30, -10, 10, 30]) {\n        translate([x, -24, 18])\n            cube([6, 2, 8], center = true);\n        translate([x, 24, 18])\n            cube([6, 2, 8], center = true);\n    }\n\n    // Side slit windows\n    for (y = [-15, 0, 15]) {\n        translate([-39, y, 18])\n            cube([2, 6, 8], center = true);\n        translate([39, y, 18])\n            cube([2, 6, 8], center = true);\n    }\n\n    // Roof parapet walls\n    difference() {\n        translate([0, 0, 25])\n            cube([82, 52, 4], center = true);\n        translate([0, 0, 25])\n            cube([78, 48, 4], center = true);\n    }\n\n    // Roof surface\n    translate([0, 0, 27])\n        cube([78, 48, 2], center = true);\n\n    // Ventilation pipes (2)\n    for (p = [[-20, 15], [20, -15]]) {\n        translate([p[0], p[1], 29])\n            cylinder(h = 8, d = 4, center = true);\n    }\n\n    // Tiny security camera under eave\n    translate([30, 20, 23])\n    rotate([0, 45, 0])\n    union() {\n        cube([3, 3, 4], center = true);\n        translate([0, 0, 2.5])\n            sphere(d = 3);\n    }\n}\n\n// Generate the model\nsafehouse();",
    "renders": true
  },
  {
    "building": "mint",
    "openscad_code": "// Realistic 3D-printable mint coin\n// Overall dimensions: 80 mm diameter, 6 mm thick\n// Built with no overhangs, 1.2 mm wall thickness (3 perimeters on 0.4 mm nozzle)\n\nmodule rim() {\n    // Outer raised rim\n    difference() {\n        cylinder(h = 2, d = 80, $fn = 128);\n        cylinder(h = 2.1, d = 76, $fn = 128);  // slight overlap\n    }\n}\n\nmodule face() {\n    // Main coin face\n    cylinder(h = 4, d = 76, $fn = 128);\n}\n\nmodule radial_lines() {\n    // 60 subtle radial ribs (0.5 mm wide, 0.4 mm tall) for anti-slip grip\n    for (a = [0:6:359]) {\n        rotate([0, 0, a])\n            translate([38.2, -0.25, 0])\n                cube([1.5, 0.5, 0.4]);\n    }\n}\n\nmodule center_emblem() {\n    // Raised emblem: stylized mint leaf\n    // Central circle base\n    translate([0, 0, 4])\n        cylinder(h = 1.2, d = 28, $fn = 64);\n\n    // Leaf body (union of two spheres)\n    translate([0, 0, 4.6]) {\n        scale([1, 1.5, 0.6])\n            sphere(d = 20, $fn = 64);\n        translate([0, 2, 0])\n            scale([0.8, 1.2, 0.6])\n                sphere(d = 14, $fn = 64);\n    }\n\n    // Veins (negative)\n    for (ang = [30:30:150]) {\n        rotate([0, 0, ang])\n            translate([0, 0, 4.9])\n                cube([0.8, 12, 0.3], center = true);\n    }\n}\n\nmodule text_ring() {\n    // Raised text \"FRESH MINT 2024\" on outer band\n    // Simplified as small blocks to avoid font issues\n    for (i = [0:11]) {\n        angle = i * 30;\n        translate([33 * cos(angle), 33 * sin(angle), 4.2])\n            rotate([0, 0, angle + 90])\n                cube([2, 0.8, 0.4], center = true);\n    }\n}\n\nmodule coin() {\n    // Top side\n    union() {\n        face();\n        rim();\n        radial_lines();\n        center_emblem();\n        text_ring();\n    }\n\n    // Bottom side (mirror of top, minus emblem & text)\n    translate([0, 0, 6])\n        mirror([0, 0, 1])\n            union() {\n                face();\n                rim();\n                radial_lines();\n            }\n}\n\n// Final assembly\ncoin();",
    "renders": true
  },
  {
    "building": "treasury",
    "openscad_code": "// Realistic Medium-Complexity Treasury\n// Overall size ~70 mm wide x 60 mm deep x 55 mm tall\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Base foundation\nmodule base_foundation() {\n    difference() {\n        cube([70, 60, 5], center = true);\n        translate([0, 0, -0.1]) cube([66, 56, 5.2], center = true);\n    }\n}\n\n// Main stone pedestal\nmodule main_pedestal() {\n    translate([0, 0, 2.5])\n    difference() {\n        cube([50, 40, 20], center = true);\n        translate([0, 0, -0.1]) cube([46, 36, 20.2], center = true);\n    }\n}\n\n// Column module\nmodule column(x, y) {\n    translate([x, y, 22.5]) {\n        // Column shaft\n        cylinder(h = 25, r = 4, $fn = 16);\n        // Capital\n        translate([0, 0, 25]) cylinder(h = 3, r1 = 4.5, r2 = 5, $fn = 16);\n        // Base\n        translate([0, 0, 0]) cylinder(h = 2, r1 = 5, r2 = 4, $fn = 16);\n    }\n}\n\n// Columns array\nmodule columns() {\n    for (x = [-20, 20])\n        for (y = [-15, 15])\n            column(x, y);\n}\n\n// Roof slab\nmodule roof_slab() {\n    translate([0, 0, 52.5])\n    cube([60, 50, 5], center = true);\n}\n\n// Roof top\nmodule roof_top() {\n    translate([0, 0, 57.5])\n    difference() {\n        cube([54, 44, 5], center = true);\n        translate([0, 0, -0.1]) cube([50, 40, 5.2], center = true);\n    }\n}\n\n// Doorway arch\nmodule doorway() {\n    translate([0, 20, 32.5])\n    difference() {\n        cube([18, wall + 0.2, 18], center = true);\n        translate([0, 0, 2]) cube([14, wall + 0.4, 14], center = true);\n    }\n}\n\n// Treasure chest inside\nmodule treasure_chest() {\n    translate([0, 0, 25])\n    difference() {\n        cube([10, 8, 6], center = true);\n        translate([0, 0, -0.1]) cube([8, 6, 6.2], center = true);\n    }\n}\n\n// Small decorative studs\nmodule studs() {\n    for (x = [-22, -11, 0, 11, 22])\n        for (y = [-17, -8.5, 0, 8.5, 17]) {\n            if ((abs(x) == 22 || abs(y) == 17) && (abs(x) != 22 || abs(y) != 17))\n                translate([x, y, 55]) sphere(r = 1.2, $fn = 8);\n        }\n}\n\n// Assemble the treasury\nunion() {\n    base_foundation();\n    main_pedestal();\n    columns();\n    roof_slab();\n    roof_top();\n    doorway();\n    treasure_chest();\n    studs();\n}",
    "renders": true
  },
  {
    "building": "bourse",
    "openscad_code": "// Realistic Medium-Complexity Bourse (Stock Exchange Building)\n// Dimensions: 80mm x 60mm x 45mm (L x W x H)\n\n// Overall scale factor\nscale_factor = 1;\n\n// Main building dimensions\nbuilding_length = 80 * scale_factor;\nbuilding_width = 60 * scale_factor;\nbuilding_height = 30 * scale_factor;\n\n// Columns parameters\ncolumn_diameter = 4 * scale_factor;\ncolumn_height = 20 * scale_factor;\ncolumn_spacing = 12 * scale_factor;\nnum_columns = 6;\n\n// Steps\nstep_height = 2 * scale_factor;\nstep_width = 70 * scale_factor;\nstep_depth = 15 * scale_factor;\n\n// Dome\ndome_radius = 20 * scale_factor;\ndome_height = 15 * scale_factor;\n\n// Main building body\nmodule main_building() {\n    difference() {\n        // Main rectangular structure\n        cube([building_length, building_width, building_height], center=true);\n        \n        // Front entrance opening\n        translate([0, building_width/2 + 0.1, -5])\n            cube([20, 5, 15], center=true);\n    }\n}\n\n// Classical columns with bases and capitals\nmodule column(x_pos, z_rot) {\n    translate([x_pos, 0, 0]) {\n        rotate([0, 0, z_rot]) {\n            // Column base\n            translate([0, building_width/2 - 2, building_height/2 - column_height])\n                cylinder(h=2, d1=6, d2=column_diameter, $fn=16);\n            \n            // Column shaft\n            translate([0, building_width/2 - 2, building_height/2 - column_height/2])\n                cylinder(h=column_height - 4, d=column_diameter, $fn=16);\n            \n            // Column capital\n            translate([0, building_width/2 - 2, building_height/2 + 2])\n                cylinder(h=2, d1=column_diameter, d2=6, $fn=16);\n        }\n    }\n}\n\n// Steps leading to entrance\nmodule entrance_steps() {\n    for (i = [0:2]) {\n        translate([0, building_width/2 + step_depth/2 - i*step_depth/3, \n                  -building_height/2 - step_height*(i+1) + 1])\n            cube([step_width - i*10, step_depth/3, step_height], center=true);\n    }\n}\n\n// Classical entablature\nmodule entablature() {\n    translate([0, 0, building_height/2 + 2])\n        cube([building_length + 10, building_width + 10, 4], center=true);\n}\n\n// Central dome\nmodule central_dome() {\n    translate([0, 0, building_height/2 + 4 + dome_height/2])\n        scale([1, 1, dome_height/dome_radius])\n            sphere(d=dome_radius, $fn=64);\n    \n    // Dome base ring\n    translate([0, 0, building_height/2 + 4])\n        cylinder(h=2, d=dome_radius + 4, $fn=64);\n}\n\n// Side wings\nmodule side_wing(offset) {\n    translate([offset, 0, 0])\n        cube([building_length/3, building_width - 10, building_height - 5], center=true);\n}\n\n// Window details\nmodule windows() {\n    // Front windows\n    for (i = [-1, 1]) {\n        translate([i * 25, building_width/2 - 1, 0])\n            cube([8, 2, 10], center=true);\n    }\n    \n    // Side windows\n    for (i = [-1, 1]) {\n        for (j = [-30, -15, 0, 15, 30]) {\n            translate([building_length/2 - 1, j, 0])\n                rotate([0, 90, 0])\n                    cube([6, 2, 8], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Main structure\n    main_building();\n    \n    // Side wings\n    side_wing(-building_length/2 - building_length/6);\n    side_wing(building_length/2 + building_length/6);\n    \n    // Columns across front\n    for (i = [0:num_columns-1]) {\n        column(-building_length/2 + 10 + i*column_spacing, 0);\n    }\n    \n    // Entrance steps\n    entrance_steps();\n    \n    // Classical details\n    entablature();\n    central_dome();\n    \n    // Window openings\n    windows();\n}",
    "renders": true
  },
  {
    "building": "clearinghouse",
    "openscad_code": "// Clearinghouse - Medium complexity realistic style\n// Dimensions in mm, suitable for 3D printing\n\n$fn = 32;  // Smooth curves\n\n// Main building dimensions\nbuilding_width = 80;\nbuilding_depth = 60;\nbuilding_height = 35;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Base foundation\nmodule foundation() {\n    difference() {\n        translate([0, 0, -1])\n            cube([building_width + 8, building_depth + 8, 2], center=true);\n        \n        // Hollow center\n        translate([0, 0, 0.5])\n            cube([building_width + 4, building_depth + 4, 2], center=true);\n    }\n}\n\n// Main building body\nmodule building_body() {\n    difference() {\n        // Outer shell\n        translate([0, 0, building_height/2])\n            cube([building_width, building_depth, building_height], center=true);\n        \n        // Inner hollow\n        translate([0, 0, building_height/2 + wall_thickness])\n            cube([building_width - wall_thickness*2, building_depth - wall_thickness*2, building_height - wall_thickness], center=true);\n    }\n}\n\n// Roof with slight overhang\nmodule roof() {\n    translate([0, 0, building_height + 2.5])\n        difference() {\n            // Main roof\n            cube([building_width + 6, building_depth + 6, 5], center=true);\n            \n            // Roof slope\n            translate([0, 0, -2.5])\n                cube([building_width + 2, building_depth + 2, 5], center=true);\n        }\n}\n\n// Windows on front and back\nmodule windows() {\n    window_width = 12;\n    window_height = 10;\n    window_depth = 2;\n    \n    // Front windows (3 across)\n    for(i = [-1, 0, 1]) {\n        translate([i * (building_width/4), 0, building_height/2])\n            difference() {\n                // Window frame\n                translate([0, building_depth/2 + 0.5, 0])\n                    cube([window_width + 2, window_depth + 1, window_height + 2], center=true);\n                \n                // Window opening\n                translate([0, building_depth/2 + 1, 0])\n                    cube([window_width, window_depth + 2, window_height], center=true);\n            }\n    }\n    \n    // Back windows (2 across)\n    for(i = [-0.5, 0.5]) {\n        translate([i * (building_width/3), 0, building_height/2])\n            difference() {\n                // Window frame\n                translate([0, -building_depth/2 - 0.5, 0])\n                    cube([window_width + 2, window_depth + 1, window_height + 2], center=true);\n                \n                // Window opening\n                translate([0, -building_depth/2 - 1, 0])\n                    cube([window_width, window_depth + 2, window_height], center=true);\n            }\n    }\n}\n\n// Main entrance door\nmodule entrance() {\n    door_width = 16;\n    door_height = 20;\n    \n    translate([0, building_depth/2 - 1, building_height/2 - 7.5])\n        difference() {\n            // Door frame\n            cube([door_width + 4, wall_thickness + 2, door_height + 4], center=true);\n            \n            // Door opening\n            cube([door_width, wall_thickness + 4, door_height], center=true);\n            \n            // Door panels\n            translate([door_width/4, wall_thickness/2 + 1, 0])\n                cube([door_width/2 - 2, wall_thickness, door_height - 4], center=true);\n            translate([-door_width/4, wall_thickness/2 + 1, 0])\n                cube([door_width/2 - 2, wall_thickness, door_height - 4], center=true);\n        }\n}\n\n// Side vents for HVAC\nmodule vents() {\n    vent_width = 20;\n    vent_height = 6;\n    \n    // Left side vents\n    translate([building_width/2 + 1, -building_depth/4, building_height/2 - 5])\n        for(i = [0, 1]) {\n            translate([0, i * 10, 0])\n                difference() {\n                    cube([wall_thickness + 2, vent_width + 2, vent_height + 2], center=true);\n                    cube([wall_thickness + 4, vent_width, vent_height], center=true);\n                }\n        }\n    \n    // Right side vents\n    mirror([1, 0, 0])\n        translate([building_width/2 + 1, -building_depth/4, building_height/2 - 5])\n            for(i = [0, 1]) {\n                translate([0, i * 10, 0])\n                    difference() {\n                        cube([wall_thickness + 2, vent_width + 2, vent_height + 2], center=true);\n                        cube([wall_thickness + 4, vent_width, vent_height], center=true);\n                    }\n            }\n}\n\n// Chimney on roof\nmodule chimney() {\n    translate([building_width/3, building_depth/4, building_height + 5]) {\n        // Main chimney\n        cube([8, 8, 12], center=true);\n        \n        // Chimney top\n        translate([0, 0, 6])\n            cube([10, 10, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    foundation();\n    building_body();\n    roof();\n    windows();\n    entrance();\n    vents();\n    chimney();\n}",
    "renders": true
  },
  {
    "building": "school",
    "openscad_code": "// Realistic medium-complexity 3D printable school model\n// School dimensions: 80mm x 60mm x 40mm\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main building block\nmodule school_building() {\n    // Base foundation\n    difference() {\n        translate([0, 0, -2]) \n            cube([82, 62, 2], center=true);\n        translate([0, 0, -2.2]) \n            cube([78, 58, 2.2], center=true);\n    }\n    \n    // Main school body\n    difference() {\n        // Outer walls\n        translate([0, 0, 12]) \n            cube([80, 60, 24], center=true);\n        \n        // Inner cavity for walls\n        translate([0, 0, 12]) \n            cube([80-wall*2, 60-wall*2, 24], center=true);\n    }\n    \n    // Front entrance\n    difference() {\n        translate([0, 30, 12]) \n            cube([20, 1.2, 15], center=true);\n        translate([0, 30.6, 12]) \n            cube([16, 1.2, 13], center=true);\n    }\n}\n\n// Windows module\nmodule window() {\n    // Window frame\n    difference() {\n        cube([8, 1.2, 6], center=true);\n        translate([0, 0.7, 0]) \n            cube([7, 1.2, 5], center=true);\n    }\n    \n    // Window panes\n    for(x=[-2, 2])\n        for(y=[-1.5, 1.5])\n            translate([x, 0.7, y]) \n                cube([0.6, 0.6, 0.6], center=true);\n}\n\n// Add windows to building\nmodule add_windows() {\n    // Front windows\n    for(pos=[-25, -15, -5, 5, 15, 25])\n        translate([pos, 29.4, 15]) \n            window();\n    \n    // Back windows\n    for(pos=[-25, -15, -5, 5, 15, 25])\n        translate([pos, -29.4, 15]) \n            rotate([0, 180, 0]) \n                window();\n    \n    // Side windows\n    for(pos=[-20, -10, 0, 10, 20])\n        for(side=[-1, 1])\n            translate([39.4 * side, pos, 15]) \n                rotate([0, 0, 90 * side]) \n                    window();\n}\n\n// Roof with slight overhang\nmodule roof() {\n    // Main roof\n    translate([0, 0, 24])\n        difference() {\n            cube([84, 64, 8], center=true);\n            translate([0, 0, -4])\n                cube([78, 58, 8], center=true);\n        }\n    \n    // Chimney\n    translate([20, 20, 32])\n        cube([6, 6, 8], center=true);\n}\n\n// School bell tower\nmodule bell_tower() {\n    // Tower base\n    translate([0, 0, 40])\n        cylinder(h=15, r=8, center=true);\n    \n    // Tower roof\n    translate([0, 0, 55])\n        cylinder(h=10, r1=10, r2=6, center=true);\n    \n    // Bell\n    translate([0, 0, 47])\n        cylinder(h=3, r=3, center=true);\n}\n\n// Flag pole\nmodule flag_pole() {\n    translate([0, 0, 65])\n        cylinder(h=15, r=0.5, center=true);\n    \n    // Flag\n    translate([3, 0, 72])\n        cube([6, 0.5, 4], center=true);\n}\n\n// Main assembly\nunion() {\n    school_building();\n    add_windows();\n    roof();\n    bell_tower();\n    flag_pole();\n}",
    "renders": true
  },
  {
    "building": "hospital",
    "openscad_code": "// Hospital Building - Realistic Style, Medium Complexity\n// Designed for 3D printing - 80mm x 60mm x 40mm\n\n// Main dimensions\nbuilding_width = 60;\nbuilding_depth = 40;\nbuilding_height = 35;\nwall_thickness = 2;\n\n// Main building block\nmodule main_building() {\n    difference() {\n        // Main structure\n        cube([building_width, building_depth, building_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n        cube([building_width - wall_thickness*2, building_depth - wall_thickness*2, building_height - wall_thickness], center=true);\n    }\n}\n\n// Roof with slight slope\nmodule roof() {\n    translate([0, 0, building_height/2 + 2])\n    difference() {\n        // Main roof\n        cube([building_width + 2, building_depth + 2, 4], center=true);\n        \n        // Slight slope for realism\n        translate([0, 0, -2])\n        cube([building_width + 3, building_depth + 3, 4], center=true);\n    }\n}\n\n// Windows module\nmodule window(width, height, depth) {\n    difference() {\n        cube([width, depth, height]);\n        translate([1, -0.1, 1])\n        cube([width - 2, depth + 0.2, height - 2]);\n    }\n}\n\n// Add windows to building\nmodule add_windows() {\n    // Front windows\n    for (x = [-20, -10, 0, 10, 20]) {\n        for (y = [1]) {\n            for (z = [-10, 0, 10]) {\n                translate([x, building_depth/2 - 1, z])\n                rotate([0, 180, 0])\n                window(6, 8, 1);\n            }\n        }\n    }\n    \n    // Side windows\n    for (y = [-15, -5, 5, 15]) {\n        for (z = [-10, 0, 10]) {\n            translate([building_width/2 - 1, y, z])\n            rotate([0, 90, 0])\n            window(6, 8, 1);\n        }\n    }\n}\n\n// Entrance canopy\nmodule entrance() {\n    translate([0, building_depth/2 + 2, -building_height/2 + 10])\n    union() {\n        // Canopy posts\n        translate([-8, 0, 0])\n        cube([2, 4, 20]);\n        translate([8, 0, 0])\n        cube([2, 4, 20]);\n        \n        // Canopy roof\n        translate([0, 2, 10])\n        cube([20, 6, 1]);\n    }\n}\n\n// Hospital sign\nmodule hospital_sign() {\n    translate([0, 0, building_height/2 + 4.5])\n    union() {\n        // Sign background\n        cube([25, 5, 3], center=true);\n        \n        // Red cross\n        translate([0, 0, 1.6])\n        color(\"red\")\n        union() {\n            cube([15, 3, 1], center=true);\n            cube([3, 15, 1], center=true);\n        }\n    }\n}\n\n// Air conditioning units on roof\nmodule ac_units() {\n    for (x = [-20, 0, 20]) {\n        translate([x, 0, building_height/2 + 6])\n        cube([8, 15, 4], center=true);\n    }\n}\n\n// Chimney\nmodule chimney() {\n    translate([building_width/2 - 5, 0, building_height/2 + 6])\n    cube([4, 4, 8]);\n}\n\n// Main assembly\nunion() {\n    // Main building components\n    main_building();\n    roof();\n    \n    // Add details\n    add_windows();\n    entrance();\n    hospital_sign();\n    ac_units();\n    chimney();\n}\n\n// Base platform for stability\ntranslate([0, 0, -building_height/2 - 1])\ncube([building_width + 10, building_depth + 10, 2], center=true);",
    "renders": true
  },
  {
    "building": "library",
    "openscad_code": "// Library building - realistic style, medium complexity\n// Overall dimensions: 80x60x50mm\n\n$fn = 32;\nwall_thickness = 2;\nwindow_depth = 1;\n\nmodule building_base() {\n    // Main building structure\n    difference() {\n        // Main body\n        cube([80, 60, 40]);\n        \n        // Interior hollow\n        translate([wall_thickness, wall_thickness, 0])\n        cube([80 - 2*wall_thickness, 60 - 2*wall_thickness, 40]);\n    }\n}\n\nmodule roof() {\n    // Gabled roof\n    translate([0, 0, 40]) {\n        difference() {\n            // Main roof structure\n            union() {\n                // Left slope\n                rotate([0, 30, 0])\n                translate([-40, 0, 0])\n                cube([80, 60, 10]);\n                \n                // Right slope\n                rotate([0, -30, 0])\n                translate([0, 0, 0])\n                cube([80, 60, 10]);\n            }\n            \n            // Trim excess\n            translate([-1, -1, -1])\n            cube([82, 62, 12]);\n        }\n    }\n}\n\nmodule windows() {\n    // Front windows (3 on front face)\n    for(i = [0, 1, 2]) {\n        translate([15 + i*25, 1, 25]) {\n            difference() {\n                // Window frame\n                cube([12, wall_thickness, 8]);\n                \n                // Window opening\n                translate([2, -0.1, 2])\n                cube([8, window_depth + 0.1, 4]);\n            }\n        }\n    }\n    \n    // Side windows (2 per side)\n    for(j = [0, 1]) {\n        translate([1, 15 + j*30, 25]) {\n            rotate([0, 90, 0])\n            difference() {\n                cube([12, wall_thickness, 8]);\n                translate([2, -0.1, 2])\n                cube([8, window_depth + 0.1, 4]);\n            }\n        }\n    }\n}\n\nmodule door() {\n    // Main entrance door\n    translate([35, 1, 0]) {\n        difference() {\n            // Door frame\n            cube([10, wall_thickness, 20]);\n            \n            // Door opening\n            translate([1, -0.1, 1])\n            cube([8, window_depth + 0.1, 18]);\n        }\n        \n        // Door steps\n        translate([2, -2, -1])\n        cube([6, 2, 1]);\n    }\n}\n\nmodule columns() {\n    // Front columns (Doric style)\n    for(k = [0, 1]) {\n        translate([5 + k*70, -1, 0]) {\n            cylinder(h = 30, r = 3);\n            // Column base\n            translate([0, 0, -1])\n            cylinder(h = 2, r = 4);\n            // Column capital\n            translate([0, 0, 30])\n            cylinder(h = 2, r = 3.5);\n        }\n    }\n}\n\nmodule chimney() {\n    // Chimney on roof\n    translate([60, 45, 45]) {\n        rotate([0, 30, 0])\n        translate([0, 0, 0])\n        cube([8, 8, 15]);\n    }\n}\n\nmodule foundation() {\n    // Raised foundation\n    translate([-2, -2, -2])\n    cube([84, 64, 2]);\n}\n\n// Assembly\nunion() {\n    foundation();\n    building_base();\n    roof();\n    windows();\n    door();\n    columns();\n    chimney();\n}",
    "renders": true
  },
  {
    "building": "museum",
    "openscad_code": "// OpenSCAD Museum\n// Medium complexity realistic museum\n// Scale: 1 unit = 1mm, fits within 80x60x40mm build volume\n\n// Parameters\nwall_thickness = 2;\nwindow_frame = 1.5;\nstep_height = 3;\nstep_depth = 10;\n\n// Main museum building\nmodule main_building() {\n    // Base foundation\n    difference() {\n        cube([70, 50, 5], center=true);\n        translate([0, 0, -2]) cube([66, 46, 5], center=true);\n    }\n    \n    // Main rectangular structure\n    translate([0, 0, 15]) difference() {\n        cube([60, 40, 30], center=true);\n        // Interior hollow space\n        translate([0, 0, wall_thickness]) cube([60-2*wall_thickness, 40-2*wall_thickness, 30-wall_thickness], center=true);\n    }\n    \n    // Front entrance steps\n    for(i=[1:3]) {\n        translate([0, 25, i*step_height/2]) \n            cube([20 + i*step_depth, i*step_depth, i*step_height], center=true);\n    }\n    \n    // Columns at entrance\n    for(x=[-15, -5, 5, 15]) {\n        translate([x, 20, 15]) cylinder(h=30, d=4, center=true);\n    }\n    \n    // Roof with slight overhang\n    translate([0, 0, 32]) difference() {\n        cube([66, 46, 4], center=true);\n        translate([0, 0, -2]) cube([62, 42, 4], center=true);\n    }\n}\n\n// Side wing addition\nmodule side_wing() {\n    translate([-40, 0, 10]) difference() {\n        cube([20, 30, 20], center=true);\n        translate([0, 0, wall_thickness]) \n            cube([20-2*wall_thickness, 30-2*wall_thickness, 20-wall_thickness], center=true);\n    }\n    \n    // Wing roof\n    translate([-40, 0, 21]) cube([24, 34, 3], center=true);\n}\n\n// Windows module\nmodule windows() {\n    // Front windows\n    for(x=[-20, -10, 10, 20]) {\n        translate([x, 10, 15]) {\n            difference() {\n                cube([8, 1, 10], center=true);\n                translate([0, 0, 0]) cube([6, 1.1, 8], center=true);\n            }\n        }\n    }\n    \n    // Side windows\n    for(y=[-15, -5, 5, 15]) {\n        translate([35, y, 15]) {\n            rotate([0, 90, 0]) difference() {\n                cube([8, 1, 10], center=true);\n                translate([0, 0, 0]) cube([6, 1.1, 8], center=true);\n            }\n        }\n    }\n    \n    // Wing windows\n    for(y=[-10, 0, 10]) {\n        translate([-40, y, 10]) {\n            rotate([0, 90, 0]) difference() {\n                cube([6, 1, 8], center=true);\n                translate([0, 0, 0]) cube([4, 1.1, 6], center=true);\n            }\n        }\n    }\n}\n\n// Front entrance\nmodule entrance() {\n    // Doorway\n    translate([0, 25, 10]) difference() {\n        cube([10, 4, 20], center=true);\n        translate([0, 0, 2]) cube([8, 4.1, 16], center=true);\n    }\n    \n    // Door frame\n    translate([0, 23, 10]) difference() {\n        cube([12, 1, 22], center=true);\n        translate([0, 0, 0]) cube([10, 1.1, 20], center=true);\n    }\n    \n    // Triangular pediment\n    translate([0, 35, 35]) {\n        polyhedron(\n            points=[[-20,0,0], [20,0,0], [0,0,10], [-20,0,0]],\n            faces=[[0,1,2]]\n        );\n        translate([0, -0.5, 0]) cube([40, 1, 10], center=true);\n    }\n}\n\n// Museum assembly\nunion() {\n    main_building();\n    side_wing();\n    windows();\n    entrance();\n}",
    "renders": true
  },
  {
    "building": "church",
    "openscad_code": "// OpenSCAD Realistic Church - Medium Complexity\n// 3D printable church model ~70mm long\n\nwall_thickness = 2;\nwindow_h = 12;\nwindow_w = 6;\n\nmodule arch(w, h, t) {\n    difference() {\n        cube([w, t, h]);\n        translate([w/2, -1, h-w/2]) cylinder(h=t+2, r=w/2, $fn=20);\n    }\n}\n\nmodule window() {\n    difference() {\n        cube([window_w, wall_thickness, window_h]);\n        translate([window_w/2, -1, window_h/2]) cube([window_w-2, wall_thickness+2, window_h-2], center=true);\n    }\n}\n\nmodule door() {\n    difference() {\n        translate([-8, -wall_thickness, 0]) cube([16, wall_thickness, 20]);\n        translate([0, -wall_thickness-1, 0]) cylinder(h=wall_thickness+2, r=8, $fn=20);\n    }\n}\n\nmodule wall(l, w, h) {\n    difference() {\n        cube([l, w, h]);\n        for(i = [1:3]) {\n            translate([l/4*i - window_w/2, -1, h*0.6]) window();\n        }\n    }\n}\n\nmodule tower() {\n    union() {\n        // Tower base\n        translate([0, 0, 0]) cube([20, 20, 35]);\n        \n        // Tower roof\n        translate([10, 10, 35]) rotate([0, 0, 45]) cylinder(h=20, r1=15, r2=0, $fn=4);\n        \n        // Belfry openings\n        for(i = [0:3]) {\n            rotate([0, 0, 90*i]) translate([10, 20, 25]) arch(8, 8, wall_thickness);\n        }\n        \n        // Spire\n        translate([10, 10, 55]) cylinder(h=15, r1=3, r2=0, $fn=20);\n    }\n}\n\nmodule church_body() {\n    union() {\n        // Main nave\n        wall(50, wall_thickness, 30);\n        \n        // Transept\n        translate([25, 0, 0]) wall(30, wall_thickness, 25);\n        \n        // Apse\n        translate([50, 15, 0]) rotate([0, 0, 90]) cylinder(h=wall_thickness, r=15, $fn=20);\n        \n        // Roof\n        translate([25, 5, 30]) rotate([0, 0, 0]) cube([54, 30, 5]);\n        translate([25, -30, 15]) rotate([0, 30, 0]) cube([60, 5, 30]);\n        \n        // Door\n        translate([25, -wall_thickness, 0]) door();\n    }\n}\n\n// Main assembly\nunion() {\n    church_body();\n    translate([-10, 30, 0]) tower();\n}",
    "renders": true
  },
  {
    "building": "temple",
    "openscad_code": "// Greek-style temple with columns and pediment\n// Scaled for 3D printing (80mm x 60mm x 40mm)\n\n$fn = 32;\n\n// Main parameters\nbase_width = 80;\nbase_depth = 60;\nbase_height = 5;\nwall_thickness = 3;\ncolumn_radius = 3;\ncolumn_height = 25;\nroof_overhang = 8;\n\n// Base platform\nmodule base() {\n    difference() {\n        cube([base_width, base_depth, base_height], center=true);\n        translate([0, 0, base_height/2 - 1])\n            cube([base_width-2*wall_thickness, base_depth-2*wall_thickness, base_height], center=true);\n    }\n}\n\n// Column with base and capital\nmodule column() {\n    union() {\n        // Base\n        translate([0, 0, 1])\n            cylinder(r1=column_radius+1, r2=column_radius+0.5, h=2);\n        // Shaft\n        cylinder(r=column_radius, h=column_height);\n        // Capital\n        translate([0, 0, column_height])\n            cylinder(r1=column_radius+0.5, r2=column_radius+2, h=2);\n    }\n}\n\n// Row of columns along front/back\nmodule column_row(y_pos, count) {\n    spacing = base_width/(count+1);\n    for(i = [1:count]) {\n        translate([i*spacing - base_width/2, y_pos, base_height])\n            column();\n    }\n}\n\n// Side walls with openings\nmodule walls() {\n    // Front wall with doorway\n    translate([-base_width/2, -base_depth/2 + wall_thickness/2, base_height + wall_thickness/2])\n        cube([base_width, wall_thickness, column_height - wall_thickness]);\n    \n    // Back wall\n    translate([-base_width/2, base_depth/2 - wall_thickness/2, base_height + wall_thickness/2])\n        cube([base_width, wall_thickness, column_height - wall_thickness]);\n    \n    // Side walls\n    translate([-base_width/2 + wall_thickness/2, 0, base_height + wall_thickness/2])\n        cube([wall_thickness, base_depth - 2*wall_thickness, column_height - wall_thickness]);\n    translate([base_width/2 - wall_thickness/2, 0, base_height + wall_thickness/2])\n        cube([wall_thickness, base_depth - 2*wall_thickness, column_height - wall_thickness]);\n    \n    // Doorway\n    translate([0, -base_depth/2 + wall_thickness/2 + 0.5, base_height + 10])\n        cube([15, wall_thickness + 1, 20], center=true);\n}\n\n// Roof structure with pediment\nmodule roof() {\n    union() {\n        // Main roof\n        translate([0, 0, base_height + column_height + 2])\n            cube([base_width + 2*roof_overhang, base_depth + 2*roof_overhang, 4], center=true);\n        \n        // Pediment front\n        translate([0, -base_depth/2 - roof_overhang, base_height + column_height + 6])\n            rotate([0, 90, 0])\n                linear_extrude(height=base_width + 2*roof_overhang + 1)\n                    polygon([\n                        [-base_width/2 - roof_overhang, 0],\n                        [base_width/2 + roof_overhang, 0],\n                        [0, 12]\n                    ]);\n        \n        // Pediment back\n        translate([0, base_depth/2 + roof_overhang, base_height + column_height + 6])\n            rotate([0, -90, 0])\n                linear_extrude(height=base_width + 2*roof_overhang + 1)\n                    polygon([\n                        [-base_width/2 - roof_overhang, 0],\n                        [base_width/2 + roof_overhang, 0],\n                        [0, 12]\n                    ]);\n    }\n}\n\n// Steps in front\nmodule steps() {\n    for(i = [1:3]) {\n        translate([0, -base_depth/2 - 4 - 2*i, base_height/2 - 1.5*i])\n            cube([base_width/3, 4 + i, 3*i], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    column_row(-base_depth/2 + wall_thickness + column_radius + 2, 4);\n    column_row(base_depth/2 - wall_thickness - column_radius - 2, 4);\n    walls();\n    roof();\n    steps();\n}",
    "renders": true
  },
  {
    "building": "mosque",
    "openscad_code": "// Mosque in realistic style with medium complexity\n// Designed for 3D printing, no overhangs, 0.8mm wall thickness\n\n$fn = 32;\n\n// Main dimensions (mm)\nbase_width = 80;\nbase_depth = 60;\nbase_height = 5;\n\nminaret_radius = 4;\nminaret_height = 50;\nminaret_top_radius = 7;\n\ndome_radius = 20;\ndome_height = 25;\n\nwall_thickness = 2;\n\n// Main base\nmodule mosque_base() {\n    difference() {\n        cube([base_width, base_depth, base_height], center=true);\n        translate([0, 0, -0.5])\n            cube([base_width-2*wall_thickness, base_depth-2*wall_thickness, base_height+1], center=true);\n    }\n}\n\n// Main prayer hall\nmodule prayer_hall() {\n    translate([0, -10, base_height/2])\n    difference() {\n        cube([50, 40, 30], center=true);\n        translate([0, 0, -1])\n            cube([50-2*wall_thickness, 40-2*wall_thickness, 32], center=true);\n    }\n}\n\n// Main dome\nmodule main_dome() {\n    translate([0, -10, base_height + 30])\n    union() {\n        // Drum under dome\n        cylinder(h=8, r1=22, r2=22, center=true);\n        // Dome itself\n        rotate_extrude(angle=180)\n            translate([0, 22, 0])\n            circle(r=22);\n        translate([0, 0, 22])\n            sphere(r=22);\n    }\n}\n\n// Minaret tower\nmodule minaret(x_pos) {\n    translate([x_pos, base_depth/2 - 10, 0])\n    union() {\n        // Tower body\n        for(i=[0:10:minaret_height-10]) {\n            translate([0, 0, i])\n            cylinder(h=10, r1=minaret_radius, r2=minaret_radius-0.5);\n        }\n        // Balcony\n        translate([0, 0, minaret_height-5])\n        cylinder(h=3, r1=minaret_top_radius, r2=minaret_top_radius);\n        // Spire\n        translate([0, 0, minaret_height+3])\n        cylinder(h=10, r1=1, r2=0.5);\n    }\n}\n\n// Windows for prayer hall\nmodule windows() {\n    for(side=[-1, 1]) {\n        // Side windows\n        for(i=[-15, 0, 15]) {\n            translate([i, side*20, base_height+15])\n            rotate([0, 90, 0])\n            cylinder(h=wall_thickness+1, r=3, center=true);\n        }\n        // Front/back windows\n        for(j=[-15, -5, 5, 15]) {\n            translate([side*25, j-10, base_height+15])\n            rotate([90, 0, 0])\n            cylinder(h=wall_thickness+1, r=3, center=true);\n        }\n    }\n}\n\n// Entrance door\nmodule entrance() {\n    translate([0, -30, base_height])\n    difference() {\n        cube([10, wall_thickness+1, 15], center=true);\n        translate([0, 0, -7])\n            cube([8, wall_thickness+2, 13], center=true);\n    }\n}\n\n// Crescent moon for dome top\nmodule crescent() {\n    translate([0, -10, base_height + 30 + 22])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=2, r=3, center=true);\n        translate([1.5, 0, 0])\n            cylinder(h=3, r=2.5, center=true);\n    }\n}\n\n// Combine all parts\nunion() {\n    mosque_base();\n    prayer_hall();\n    main_dome();\n    minaret(base_width/2 - 15);\n    minaret(-base_width/2 + 15);\n    windows();\n    entrance();\n    crescent();\n}",
    "renders": true
  },
  {
    "building": "courthouse",
    "openscad_code": "// Courthouse – realistic, medium-complexity model\n// Overall footprint ~60×45 mm, height ~55 mm\n// Wall thickness 1.2 mm for 3D-printing\n\n$fa = 2; $fs = 0.8;\n\nmodule slab(x,y,z) cube([x,y,z], center=true);\n\nmodule column(x,y,h) {\n    translate([x,y,0])\n        cylinder(h=h, d=2.4, center=false);\n}\n\nmodule columns_line(n, spacing, h) {\n    for(i=[0:n-1])\n        column(i*spacing - (n-1)*spacing/2, 0, h);\n}\n\nmodule pediment(w, h, roof_h) {\n    union() {\n        // base entablature\n        slab(w+2, 2, 2);\n        translate([0,0,2]) slab(w+2, 1.5, 1.5);\n        // triangular gable\n        translate([0,0,3.5])\n            linear_extrude(height=roof_h, center=true, convexity=10)\n                polygon(points=[[-w/2,0],[w/2,0],[0,h]]);\n    }\n}\n\nmodule window() {\n    difference() {\n        slab(6,1,7);\n        translate([0,0.6,0]) slab(4.8,1.2,5.6);\n    }\n}\n\nmodule door() {\n    difference() {\n        slab(8,2,12);\n        translate([0,1.2,2]) slab(6.8,1.2,8);\n    }\n}\n\n// Main body\ntranslate([0,0,10]) difference() {\n    slab(50,35,20);                // solid block\n    // front windows\n    translate([ -15, 18, 5]) window();\n    translate([  0, 18, 5]) window();\n    translate([  15,18, 5]) window();\n    // rear windows\n    translate([ -15,-18, 5]) mirror([0,1,0]) window();\n    translate([  0,-18, 5]) mirror([0,1,0]) window();\n    translate([  15,-18,5]) mirror([0,1,0]) window();\n    // door\n    translate([0,18,2]) door();\n}\n\n// Columns across portico\ncolumns_line(6, 10, 22);\n\n// Roof\ntranslate([0,0,30]) difference() {\n    slab(52,37,2);                        // flat platform\n    translate([0,0,2]) slab(50,35,0.5);   // slight overhang\n}\n\n// Central clock tower\ntranslate([0,0,32.5]) {\n    slab(16,16,18);                       // tower body\n    translate([0,0,18]) slab(20,20,2);    // cornice\n    translate([0,0,20]) pediment(20, 8, 6); // pediment on tower\n    translate([0,0,26]) slab(10,10,8);    // belfry\n    translate([0,0,34]) cylinder(h=4,d=8); // spire base\n    translate([0,0,38]) cylinder(h=15,d1=6,d2=0); // needle spire\n}",
    "renders": true
  },
  {
    "building": "capitol",
    "openscad_code": "// Realistic Ionic Capitol - 3D Printable\n// Overall height: 80mm, width: 60mm\n\n// Global parameters\n$fn = 64;\ncapitol_width = 60;\ncapitol_depth = 60;\nabacus_height = 6;\nabacus_width = capitol_width + 8;\nabacus_depth = capitol_depth + 8;\nechinus_height = 12;\nechinus_width = capitol_width + 2;\nvolutes_height = 18;\nneck_height = 10;\nneck_width = capitol_width - 12;\nbase_height = 8;\n\nmodule abacus() {\n    difference() {\n        translate([0, 0, abacus_height/2])\n            cube([abacus_width, abacus_depth, abacus_height], center=true);\n        \n        // Light chamfer\n        translate([0, 0, abacus_height/2 + 0.1])\n            cube([abacus_width-4, abacus_depth-4, abacus_height], center=true);\n    }\n}\n\nmodule echinus() {\n    // Main echinus body\n    hull() {\n        translate([0, 0, echinus_height/2])\n            cylinder(h=echinus_height, d1=echinus_width, d2=echinus_width-8, center=true);\n        \n        translate([0, 0, -echinus_height/2])\n            sphere(d=echinus_width);\n    }\n}\n\nmodule volute() {\n    // Spiral volute\n    rotate_extrude(angle=360, $fn=32) {\n        translate([10, 0, 0])\n            polygon(points=[[0,0], [6,0], [5,2], [1,2]]);\n    }\n}\n\nmodule volutes() {\n    // Four corner volutes\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x*abacus_width/2 - x*10, y*abacus_depth/2 - y*10, volutes_height/2 + 8]) {\n                scale([x, y, 1])\n                    volute();\n            }\n        }\n    }\n    \n    // Connecting scrolls\n    for (i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([abacus_width/2 - 15, 0, 18])\n                rotate([90, 0, 0])\n                    cylinder(h=30, d=4, center=true);\n    }\n}\n\nmodule egg_and_dart() {\n    // Egg and dart molding below volutes\n    for (i = [0:11]) {\n        rotate([0, 0, i*30])\n            translate([neck_width/2 + 2, 0, 12])\n                sphere(d=5);\n    }\n}\n\nmodule neck() {\n    // Neck of the column\n    difference() {\n        translate([0, 0, neck_height/2 + 4])\n            cylinder(h=neck_height, d=neck_width, center=true);\n        \n        // Light fluting\n        for (i = [0:19]) {\n            rotate([0, 0, i*18])\n                translate([neck_width/2 - 1, 0, 4])\n                    cube([2, 1, neck_height], center=true);\n        }\n    }\n}\n\nmodule base() {\n    // Base transition to column\n    cylinder(h=base_height, d=neck_width + 4, center=true);\n}\n\n// Assembly\nunion() {\n    // Top components\n    abacus();\n    \n    translate([0, 0, abacus_height/2 + echinus_height/2])\n        echinus();\n    \n    translate([0, 0, abacus_height + 4])\n        volutes();\n    \n    translate([0, 0, abacus_height + 2])\n        egg_and_dart();\n    \n    // Lower components\n    translate([0, 0, -volutes_height/2 - 2])\n        neck();\n    \n    translate([0, 0, -volutes_height - neck_height/2 - 2])\n        base();\n}",
    "renders": true
  },
  {
    "building": "stadium",
    "openscad_code": "// Stadium.scad\n// 3D printable medium-complexity soccer stadium\n// Overall footprint ~80x65x25 mm\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Base field dimensions\nfield_w = 50;\nfield_l = 70;\n\n// Total outer bowl dimensions\nouter_w = 60;\nouter_l = 80;\nbowl_h = 15;\n\n// Roof height\nroof_h = 8;\n\n// Main module\ndifference() {\n    // Entire stadium bowl\n    union() {\n        // Field\n        color(\"green\")\n        translate([0, 0, 0])\n            cube([field_l, field_w, 1], center = true);\n\n        // Pitch lines\n        color(\"white\")\n        union() {\n            translate([0, 0, 1])\n                cube([field_l, 0.5, 0.2], center = true);      // center line\n            translate([0, 0, 1])\n                rotate([0, 0, 90])\n                    cube([field_w, 0.5, 0.2], center = true);  // center circle part\n            translate([0, 0, 1])\n                sphere(d = 25, $fn = 32);                       // center circle\n        }\n\n        // Stadium bowl structure\n        difference() {\n            // Outer ellipse\n            scale([1, outer_w/outer_l, 1])\n                cylinder(h = bowl_h, d = outer_l, center = true, $fn = 64);\n\n            // Inner cavity\n            scale([1, field_w/field_l, 1])\n                cylinder(h = bowl_h + 2, d = field_l + wall*2, center = true, $fn = 64);\n        }\n\n        // Tiered seating rings\n        for (tier = [1 : 3]) {\n            difference() {\n                translate([0, 0, tier*2])\n                    scale([1, outer_w/outer_l, 1])\n                        cylinder(h = 2, d = outer_l - tier*6, center = true, $fn = 64);\n                translate([0, 0, tier*2 - 1])\n                    scale([1, (field_w + wall)/field_l, 1])\n                        cylinder(h = 4, d = field_l + wall*2 + tier*6, center = true, $fn = 64);\n            }\n        }\n\n        // Roof ring\n        difference() {\n            translate([0, 0, bowl_h + roof_h/2])\n                scale([1, outer_w/outer_l, 1])\n                    cylinder(h = roof_h, d = outer_l, center = true, $fn = 64);\n            translate([0, 0, bowl_h + roof_h/2])\n                scale([1, (outer_w - 8)/outer_l, 1])\n                    cylinder(h = roof_h + 2, d = outer_l - 8, center = true, $fn = 64);\n        }\n\n        // Roof supports\n        module roof_support(angle) {\n            rotate([0, 0, angle])\n                translate([outer_l/2 - 5, 0, bowl_h])\n                    cube([10, wall*2, roof_h], center = true);\n        }\n        for (a = [0 : 15 : 345])\n            roof_support(a);\n    }\n\n    // Cutout for field view\n    translate([0, 0, -1])\n        cube([field_l + wall*2, field_w + wall*2, 2], center = true);\n}",
    "renders": true
  },
  {
    "building": "prison",
    "openscad_code": "// Realistic Medium-Complexity Prison Model\n// ~80 mm x 70 mm x 50 mm\n\n$fn = 32;\n\n// Wall thickness and cell dimensions\nwall_t = 2;\ncell_w = 20;\ncell_d = 20;\ncell_h = 15;\n\n// Main prison block dimensions\nblock_w = 80;\nblock_d = 70;\nblock_h = 30;\n\n// Guard tower\ntower_r = 10;\ntower_h = 40;\n\n// Perimeter wall\nwall_h = 20;\n\n// Main building module\nmodule prison_block() {\n    difference() {\n        // Main block body\n        cube([block_w, block_d, block_h], center = true);\n        \n        // Hollow interior\n        translate([0, 0, wall_t / 2])\n            cube([block_w - 2 * wall_t, block_d - 2 * wall_t, block_h - wall_t], center = true);\n        \n        // Front entrance doorway\n        translate([0, block_d / 2 - wall_t, -block_h / 2 + 8])\n            cube([12, wall_t, 16], center = true);\n    }\n}\n\n// Individual cell bars\nmodule cell_bars(x, y) {\n    translate([x, y, -cell_h / 2 + 6])\n        for (i = [-8 : 4 : 8]) {\n            translate([i, 0, 0])\n                cube([0.5, 0.5, cell_h - 8]);\n        }\n}\n\n// Cell windows\nmodule cell_windows() {\n    // Front row\n    for (x = [-30 : 20 : 30]) {\n        translate([x, block_d / 2 - wall_t - 0.1, 0])\n            cell_bars(0, 0);\n    }\n    // Back row\n    for (x = [-30 : 20 : 30]) {\n        translate([x, -block_d / 2 + wall_t + 0.1, 0])\n            cell_bars(0, 0);\n    }\n}\n\n// Guard tower\nmodule guard_tower(x, y) {\n    translate([x, y, 0])\n    union() {\n        // Tower base\n        cylinder(h = tower_h, r = tower_r, center = true);\n        \n        // Tower top parapet\n        translate([0, 0, tower_h / 2 + 2])\n            cylinder(h = 4, r1 = tower_r, r2 = tower_r + 2, center = true);\n        \n        // Tower windows\n        for (ang = [0 : 45 : 359]) {\n            rotate([0, 0, ang])\n                translate([tower_r - 1, 0, tower_h / 2 - 5])\n                    cube([2, 1, 8], center = true);\n        }\n    }\n}\n\n// Perimeter wall\nmodule perimeter_wall() {\n    difference() {\n        // Outer wall\n        translate([0, 0, wall_h / 2])\n            cube([block_w + 30, block_d + 20, wall_h], center = true);\n        \n        // Inner hollow\n        translate([0, 0, wall_h / 2])\n            cube([block_w + 30 - 2 * wall_t, block_d + 20 - 2 * wall_t, wall_h], center = true);\n        \n        // Gate opening\n        translate([0, block_d / 2 + 10 - wall_t / 2, 0])\n            cube([20, wall_t, 10], center = true);\n    }\n}\n\n// Cell block roof detail\nmodule roof_detail() {\n    translate([0, 0, block_h / 2 + 1])\n        cube([block_w + 2, block_d + 2, 2], center = true);\n}\n\n// Assembly\nunion() {\n    // Main prison block\n    prison_block();\n    \n    // Cell windows\n    cell_windows();\n    \n    // Guard towers at corners\n    guard_tower(block_w / 2 + 10, block_d / 2 + 5);\n    guard_tower(-block_w / 2 - 10, block_d / 2 + 5);\n    guard_tower(block_w / 2 + 10, -block_d / 2 - 5);\n    guard_tower(-block_w / 2 - 10, -block_d / 2 - 5);\n    \n    // Perimeter wall\n    perimeter_wall();\n    \n    // Roof detail\n    roof_detail();\n}",
    "renders": true
  },
  {
    "building": "auditorium",
    "openscad_code": "// Auditorium - Medium Complexity Realistic Style\n// Overall dimensions ~75mm wide, ~60mm deep, ~35mm tall\n\nmodule main_building() {\n    // Main auditorium hall with sloped roof\n    difference() {\n        union() {\n            // Main hall block\n            translate([0, 0, 10]) cube([70, 55, 15], center=true);\n            \n            // Sloped roof\n            translate([0, 0, 25]) {\n                scale([1, 1, 0.3]) rotate([90, 0, 0]) \n                cylinder(h=35, d1=75, d2=70, center=true);\n            }\n        }\n        \n        // Entrance opening\n        translate([0, 28, 10]) cube([20, 5, 12], center=true);\n        \n        // Side windows\n        for(x = [-25, -15, -5, 5, 15, 25]) {\n            translate([x, 27.5, 15]) cube([4, 1, 6], center=true);\n        }\n    }\n}\n\nmodule stage_area() {\n    // Protruding stage section\n    translate([0, -20, 8]) cube([40, 10, 4], center=true);\n    \n    // Stage front wall\n    translate([0, -25, 12]) cube([44, 1, 8], center=true);\n}\n\nmodule columns() {\n    // Front columns with classical styling\n    for(x = [-25, -15, -5, 5, 15, 25]) {\n        translate([x, 25, 0]) {\n            // Column base\n            cylinder(h=2, d=6, center=true);\n            translate([0, 0, 1]) cylinder(h=18, d=5, center=true);\n            // Column capital\n            translate([0, 0, 10]) cylinder(h=2, d=6, center=true);\n        }\n    }\n}\n\nmodule seating_tiers() {\n    // Interior seating tiers visible from entrance\n    for(i = [1:5]) {\n        translate([0, 20 - i*6, 10 + i*1.5]) {\n            scale([0.9 - i*0.08, 0.8 - i*0.08, 1]) \n            cube([60, 6, 1.5], center=true);\n        }\n    }\n}\n\nmodule roof_details() {\n    // Chimney/stacks for ventilation\n    translate([-20, 0, 32]) cylinder(h=8, d=4, center=true);\n    translate([20, 0, 32]) cylinder(h=8, d=4, center=true);\n    \n    // Ridge line detail\n    translate([0, 0, 32]) cube([65, 2, 1], center=true);\n}\n\nmodule entrance_steps() {\n    // Front entrance steps\n    for(i = [1:3]) {\n        translate([0, 30 + i*2, 7.5 - i*1.5]) {\n            scale([1 + i*0.1, 1, 1]) \n            cube([25, 3, 1.5], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_building();\n    stage_area();\n    columns();\n    seating_tiers();\n    roof_details();\n    entrance_steps();\n}",
    "renders": true
  },
  {
    "building": "conservatory",
    "openscad_code": "$fn = 20;  // Smoother curves for realistic style\nwall_thickness = 2;  // Safe wall thickness for 3D printing\nscale_factor = 0.3;  // Scale down for 3D printing\n\n// Main conservatory module\nmodule conservatory() {\n    // Base foundation\n    translate([0, 0, 0]) \n        cube([60, 40, 2]);\n    \n    // Floor\n    translate([wall_thickness, wall_thickness, 2]) \n        cube([60 - 2*wall_thickness, 40 - 2*wall_thickness, 1]);\n    \n    // Back wall\n    translate([0, 0, 3]) \n        cube([wall_thickness, 40, 30]);\n    \n    // Left wall\n    translate([0, 0, 3]) \n        cube([60, wall_thickness, 30]);\n    \n    // Right wall\n    translate([0, 40 - wall_thickness, 3]) \n        cube([60, wall_thickness, 30]);\n    \n    // Front pillars\n    for(x = [5, 55]) {\n        translate([x, 0, 3]) \n            cylinder(r=2, h=30);\n    }\n    \n    // Roof frame\n    translate([0, 0, 33]) \n        cube([60, 40, wall_thickness]);\n    \n    // Roof glazing bars\n    for(x = [10:10:50]) {\n        translate([x, 0, 34]) \n            cube([wall_thickness, 40, 1]);\n    }\n    \n    for(y = [5:10:35]) {\n        translate([0, y, 34]) \n            cube([60, wall_thickness, 1]);\n    }\n    \n    // Door\n    translate([30, 0, 3]) {\n        // Door frame\n        difference() {\n            cube([8, wall_thickness, 25]);\n            translate([wall_thickness, 0, wall_thickness]) \n                cube([8 - 2*wall_thickness, wall_thickness, 25 - wall_thickness]);\n        }\n        \n        // Door handle\n        translate([6, -wall_thickness/2, 15]) \n            cube([1, wall_thickness, 1]);\n    }\n    \n    // Window frames\n    // Back wall windows\n    for(y = [10:20:30]) {\n        translate([wall_thickness, y, 15]) {\n            difference() {\n                cube([wall_thickness, 15, 20]);\n                translate([0, wall_thickness, wall_thickness]) \n                    cube([wall_thickness, 15 - 2*wall_thickness, 20 - 2*wall_thickness]);\n            }\n        }\n    }\n    \n    // Roof ridge\n    translate([30, 20, 35]) \n        rotate([90, 0, 0]) \n            cylinder(r1=2, r2=0, h=30);\n    \n    // Decorative finials on pillars\n    for(x = [5, 55]) {\n        translate([x, 0, 33]) \n            sphere(r=1.5);\n    }\n}\n\n// Scale for 3D printing\nscale(scale_factor) conservatory();",
    "renders": true
  },
  {
    "building": "cathedral",
    "openscad_code": "// Cathedral - Medium complexity realistic style\n// Designed for 3D printing (50mm width)\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body\nmodule cathedral() {\n    // Base foundation\n    translate([0, 0, 1]) cube([40, 60, 2], center=true);\n    \n    // Main church body\n    translate([0, 0, 8]) cube([36, 56, 14], center=true);\n    \n    // Roof\n    translate([0, 0, 22]) \n        rotate([90, 0, 0]) \n            cylinder(h=30, r1=20, r2=0, center=true);\n    \n    // Front facade\n    translate([0, 30, 15]) cube([36, 2, 28], center=true);\n    \n    // Entrance arch\n    difference() {\n        translate([0, 31, 8]) cube([12, 2, 12], center=true);\n        translate([0, 32, 4]) \n            rotate([90, 0, 0]) \n                cylinder(h=3, r=5, center=true);\n    }\n    \n    // Side aisles\n    for(x = [-15, 15]) {\n        translate([x, 0, 6]) cube([10, 60, 10], center=true);\n        translate([x, 0, 16]) \n            rotate([90, 0, 0]) \n                cylinder(h=10, r1=5, r2=0, center=true);\n    }\n    \n    // Central tower\n    translate([0, 0, 30]) cube([8, 8, 20], center=true);\n    translate([0, 0, 45]) \n        rotate([90, 0, 0]) \n            cylinder(h=10, r1=4, r2=0, center=true);\n    \n    // Side towers flanking entrance\n    for(x = [-12, 12]) {\n        translate([x, 25, 15]) cube([6, 6, 30], center=true);\n        translate([x, 25, 35]) \n            rotate([90, 0, 0]) \n                cylinder(h=8, r1=3, r2=0, center=true);\n    }\n    \n    // Windows (arched)\n    for(y = [20, 10, -10, -20]) {\n        // Main body windows\n        for(side = [-1, 1]) {\n            translate([side * 17, y, 12]) \n                rotate([0, side * 90, 0]) \n                    window();\n        }\n        \n        // Side aisle windows\n        for(x = [-15, 15]) {\n            translate([x + side * 5, y, 10]) \n                rotate([0, side * 90, 0]) \n                    window();\n        }\n    }\n    \n    // Rose window above entrance\n    translate([0, 31, 22]) \n        rotate([0, 90, 0]) \n            rose_window();\n    \n    // Flying buttresses\n    for(x = [-15, 15]) {\n        translate([x, 20, 12]) cube([2, 10, 2], center=true);\n        translate([x, -20, 12]) cube([2, 10, 2], center=true);\n    }\n    \n    // Cross on central tower\n    translate([0, 0, 51]) {\n        cube([1, 8, 1], center=true);\n        cube([8, 1, 1], center=true);\n    }\n}\n\n// Arched window module\nmodule window() {\n    difference() {\n        cube([1, 4, 6], center=true);\n        translate([0.5, 0, 1]) \n            rotate([90, 0, 0]) \n                cylinder(h=1.1, r=2, center=true);\n    }\n}\n\n// Rose window module\nmodule rose_window() {\n    difference() {\n        cylinder(h=1, r=6, center=true);\n        for(i = [0:30:330]) {\n            rotate([0, 0, i]) \n                translate([2, 0, 0]) \n                    cylinder(h=1.1, r=0.5, center=true);\n        }\n    }\n}\n\n// Generate the cathedral\ncathedral();",
    "renders": true
  },
  {
    "building": "synagogue",
    "openscad_code": "// Synagogue in realistic style - medium complexity\n// 3D printable model with proper wall thickness\n\nwall_thickness = 2;\nmodule wall(w, h, d) {\n    difference() {\n        cube([w, d, h]);\n        translate([wall_thickness, wall_thickness, 0])\n            cube([w-2*wall_thickness, d-2*wall_thickness, h]);\n    }\n}\n\nmodule window(x, y, z, w, h) {\n    translate([x, y, z]) {\n        difference() {\n            cube([w, wall_thickness, h]);\n            translate([wall_thickness, -1, wall_thickness])\n                cube([w-2*wall_thickness, wall_thickness+2, h-2*wall_thickness]);\n        }\n    }\n}\n\nmodule doorway(x, y, z, w, h) {\n    translate([x, y, z]) {\n        difference() {\n            cube([w, wall_thickness, h]);\n            translate([wall_thickness, -1, 0])\n                cube([w-2*wall_thickness, wall_thickness+2, h-10]);\n            translate([w/2-2, -1, h-10])\n                cube([4, wall_thickness+2, 10]);\n        }\n    }\n}\n\nmodule roof_tile(x, y, z, w, d) {\n    translate([x, y, z]) {\n        difference() {\n            cube([w, d, 2]);\n            translate([0, 0, 2]) {\n                rotate([45, 0, 0])\n                    cube([w, d*sqrt(2), 2]);\n            }\n        }\n    }\n}\n\nmodule main_building() {\n    // Base\n    translate([-25, -20, 0]) {\n        wall(50, 30, 40);\n        \n        // Windows on front\n        for(i = [0:1]) {\n            window(8 + i*25, -20, 15, 8, 10);\n        }\n        \n        // Windows on sides\n        for(i = [0:1]) {\n            window(-25, -10 + i*20, 15, wall_thickness, 10);\n            translate([50, 0, 0]) {\n                window(0, -10 + i*20, 15, wall_thickness, 10);\n            }\n        }\n        \n        // Back windows\n        for(i = [0:1]) {\n            window(8 + i*25, 20, 15, 8, 10);\n        }\n        \n        // Main entrance\n        doorway(21, -20, 0, 8, 20);\n    }\n    \n    // Roof\n    translate([-30, -25, 30]) {\n        difference() {\n            cube([60, 50, 15]);\n            translate([5, 5, 5])\n                cube([50, 40, 15]);\n        }\n    }\n}\n\nmodule steps() {\n    translate([21, -22, 0]) {\n        for(i = [0:2]) {\n            translate([-i, -i, -i*2])\n                cube([8 + 2*i, 2, 2]);\n        }\n    }\n}\n\nmodule star_of_david(x, y, z, size) {\n    translate([x, y, z]) {\n        rotate([90, 0, 0]) {\n            linear_extrude(height=1) {\n                difference() {\n                    union() {\n                        // Upward triangle\n                        polygon(points=[[0,size], [-size*0.866,-size*0.5], [size*0.866,-size*0.5]]);\n                        // Downward triangle\n                        polygon(points=[[0,-size], [-size*0.866,size*0.5], [size*0.866,size*0.5]]);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule ark() {\n    // Holy Ark on front wall\n    translate([20, -19.5, 5]) {\n        difference() {\n            cube([10, 1, 15]);\n            translate([2, -0.5, 2])\n                cube([6, 2, 11]);\n        }\n        star_of_david(5, 0.5, 10, 2);\n    }\n}\n\nmodule columns() {\n    // Front columns\n    for(side = [-1, 1]) {\n        translate([side*15, -19.5, 0]) {\n            cylinder(h=25, r=2);\n            translate([0, 0, 25])\n                sphere(d=4);\n        }\n    }\n}\n\nunion() {\n    main_building();\n    steps();\n    ark();\n    columns();\n    \n    // Small dome on roof\n    translate([0, 0, 45]) {\n        sphere(d=20);\n        translate([0, 0, 10])\n            star_of_david(0, 0, 0, 5);\n    }\n}",
    "renders": true
  },
  {
    "building": "university",
    "openscad_code": "// University Campus Building - Medium Complexity Realistic Style\n\n$fn = 32;\n\n// Main building dimensions\nbuilding_width = 60;\nbuilding_depth = 40;\nbuilding_height = 25;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\nwindow_recess = 1.5;\n\n// Main administration building\nmodule main_building() {\n    // Base structure\n    cube([building_width, building_depth, building_height], center=true);\n    \n    // Add entrance portico\n    translate([0, building_depth/2 + 5, -building_height/2 + 5]) {\n        // Columns\n        for(x = [-20, -10, 10, 20]) {\n            translate([x, 0, 2.5]) \n                cylinder(h=15, r=2);\n        }\n        // Pediment\n        translate([0, 0, 10]) \n            cube([50, wall_thickness, 5], center=true);\n    }\n}\n\n// Clock tower\nmodule clock_tower() {\n    translate([building_width/2 + 8, 0, 0]) {\n        // Tower base\n        cylinder(h=35, r=8);\n        \n        // Clock faces (simplified)\n        for(angle = [0, 90, 180, 270]) {\n            rotate([0, 0, angle])\n                translate([0, 8, 28])\n                    cube([6, wall_thickness, 6], center=true);\n        }\n        \n        // Tower roof\n        translate([0, 0, 35])\n            cylinder(h1=8, h2=0, r1=10, r2=0);\n    }\n}\n\n// Library wing\nmodule library_wing() {\n    translate([0, -building_depth/2 - 15, -5]) {\n        // Main library block\n        cube([building_width - 10, 20, 20], center=true);\n        \n        // Library entrance columns\n        for(x = [-15, 15]) {\n            translate([x, 8, 5])\n                cylinder(h=15, r=1.5);\n        }\n        \n        // Library roof dome\n        translate([0, 0, 15])\n            sphere(d=15);\n    }\n}\n\n// Windows for main building\nmodule windows() {\n    for(y = [-building_depth/2 + 5:10:building_depth/2 - 5]) {\n        for(x = [-building_width/2 + 5:10:building_width/2 - 5]) {\n            // Skip window at entrance\n            if(!(abs(y) > building_depth/2 - 10 && abs(x) < 25)) {\n                translate([x, y, 0])\n                    difference() {\n                        cube([6, 1, 8], center=true);\n                        translate([0, window_recess, 0])\n                            cube([5, wall_thickness, 7], center=true);\n                    }\n            }\n        }\n    }\n}\n\n// Campus green/patio\nmodule campus_green() {\n    translate([0, 0, -building_height/2 - 2])\n        cube([building_width + 30, building_depth + 30, 2], center=true);\n}\n\n// Entrance steps\nmodule entrance_steps() {\n    translate([0, building_depth/2 + 8, -building_height/2 - 1])\n        for(i = [0:2]) {\n            translate([0, i*3, i*1])\n                cube([building_width/2 + 10, 3, 1], center=true);\n        }\n}\n\n// Combine all elements\nunion() {\n    campus_green();\n    \n    difference() {\n        union() {\n            main_building();\n            library_wing();\n            entrance_steps();\n        }\n        windows();\n    }\n    \n    clock_tower();\n}",
    "renders": true
  },
  {
    "building": "college",
    "openscad_code": "// College Building - Realistic Style, Medium Complexity\n// 3D printable model with no overhangs\n\n// Overall dimensions: 80mm x 60mm x 40mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main building block\nmodule main_building() {\n    // Base foundation\n    translate([-40, -30, 0]) {\n        cube([80, 60, 2]);\n    }\n    \n    // Main structure\n    difference() {\n        // Outer walls\n        translate([-38, -28, 2]) {\n            cube([76, 56, 35]);\n        }\n        \n        // Door opening\n        translate([-8, -28.1, 2]) {\n            cube([16, 4, 20]);\n        }\n        \n        // Windows (6 windows total)\n        for (x = [-30, -15, 0, 15, 30]) {\n            for (y = [5, 20]) {\n                translate([x, 27.9, 20]) {\n                    cube([8, 1, 10]);\n                }\n            }\n        }\n    }\n    \n    // Roof\n    translate([-39, -29, 37]) {\n        cube([78, 58, 3]);\n    }\n}\n\n// Front entrance\nmodule entrance() {\n    // Steps\n    for (i = [0:1:2]) {\n        translate([-12 - i*2, -30, 0]) {\n            cube([24 + i*4, 3 + i*2, 1]);\n        }\n    }\n    \n    // Columns\n    for (x = [-15, 15]) {\n        translate([x, -25, 2]) {\n            cylinder(h=25, r=2, $fn=20);\n        }\n    }\n    \n    // Pediment\n    translate([-20, -28, 27]) {\n        difference() {\n            // Triangle base\n            union() {\n                cube([40, 2, 10]);\n                translate([0, -28, 37]) {\n                    rotate([90, 0, 0]) {\n                        linear_extrude(height=2) {\n                            polygon([[0,0], [40,0], [20,10]]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Clock tower\nmodule clock_tower() {\n    // Base\n    translate([-8, 15, 37]) {\n        cube([16, 16, 10]);\n    }\n    \n    // Tower body\n    translate([-6, 17, 47]) {\n        cube([12, 12, 25]);\n    }\n    \n    // Clock faces (4 sides)\n    for (angle = [0, 90, 180, 270]) {\n        rotate([0, 0, angle]) {\n            translate([0, 6, 59]) {\n                difference() {\n                    cylinder(h=1, r=5, $fn=32);\n                    translate([0, 0, -0.1]) {\n                        cylinder(h=1.2, r=4, $fn=32);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Roof spire\n    translate([0, 23, 72]) {\n        cylinder(h=15, r1=6, r2=1, $fn=20);\n    }\n}\n\n// Chimneys\nmodule chimney() {\n    // Left chimney\n    translate([-25, -10, 37]) {\n        cube([5, 5, 10]);\n    }\n    \n    // Right chimney\n    translate([20, -10, 37]) {\n        cube([5, 5, 10]);\n    }\n}\n\n// Main assembly\nunion() {\n    main_building();\n    entrance();\n    clock_tower();\n    chimney();\n}",
    "renders": true
  },
  {
    "building": "cemetery",
    "openscad_code": "// Realistic 3D printable cemetery scene (medium complexity)\n// Approx. 80 mm x 60 mm x 25 mm\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Base ground slab\nmodule base() {\n    difference() {\n        cube([80, 60, 4], center = true);\n        translate([0, 0, -0.1])\n            cube([78, 58, 4.2], center = true);\n    }\n}\n\n// Simple grave module\nmodule grave(length, width, height) {\n    difference() {\n        cube([length, width, height], center = true);\n        // Carve top bevel\n        translate([0, 0, height/2 - 0.5])\n            cube([length - 2, width - 2, 2], center = true);\n    }\n}\n\n// Headstone with rounded top\nmodule headstone(h, w, d) {\n    union() {\n        // Main body\n        cube([w, d, h], center = true);\n        // Rounded top\n        translate([0, 0, h/2 + d/2])\n            rotate([90, 0, 0])\n                cylinder(h = w, d = d, center = true);\n        // Base platform\n        translate([0, 0, -h/2 - 0.5])\n            cube([w + 2, d + 2, 1], center = true);\n    }\n}\n\n// Iron fence section\nmodule fence_section(len) {\n    posts = floor(len / 6);\n    for (i = [0 : posts - 1]) {\n        translate([-len/2 + i*6 + 3, 0, 0]) {\n            // Post\n            cube([1, 1, 12], center = true);\n            // Two horizontal rails\n            translate([0, 0, 4])\n                cube([6, 0.5, 0.5], center = true);\n            translate([0, 0, -4])\n                cube([6, 0.5, 0.5], center = true);\n        }\n    }\n}\n\n// Tree trunk\nmodule tree_trunk() {\n    cylinder(h = 25, d = 4, center = false);\n}\n\n// Tree canopy (simplified sphere)\nmodule tree_canopy() {\n    translate([0, 0, 25])\n        sphere(d = 16);\n}\n\n// Complete tree\nmodule tree(x, y) {\n    translate([x, y, 2]) {\n        tree_trunk();\n        tree_canopy();\n    }\n}\n\n// Main assembly\nunion() {\n    // Ground\n    base();\n    \n    // Graves\n    translate([-25, -20, 2])\n        grave(12, 6, 2);\n    translate([0, -20, 2])\n        grave(14, 7, 2.5);\n    translate([25, -20, 2])\n        grave(11, 5, 2);\n    \n    // Headstones\n    translate([-25, -16.5, 4])\n        headstone(10, 1.5, 0.8);\n    translate([0, -16.5, 4.5])\n        headstone(12, 1.8, 1);\n    translate([25, -16.5, 4])\n        headstone(9, 1.5, 0.7);\n    \n    // Fence around back\n    translate([0, 28, 2])\n        rotate([0, 0, 0])\n            fence_section(75);\n    translate([-38, 0, 2])\n        rotate([0, 0, 90])\n            fence_section(55);\n    translate([38, 0, 2])\n        rotate([0, 0, 90])\n            fence_section(55);\n    \n    // Trees\n    tree(-30, 15);\n    tree(30, 10);\n    tree(10, 20);\n    \n    // Small chapel\n    translate([0, 10, 2]) {\n        // Base\n        cube([20, 15, 2], center = true);\n        // Walls\n        translate([0, 0, 7])\n            difference() {\n                cube([18, 13, 12], center = true);\n                translate([0, 0, -1])\n                    cube([16, 11, 14], center = true);\n            }\n        // Roof\n        translate([0, 0, 13])\n            rotate([90, 0, 0])\n                cylinder(h = 20, d1 = 22, d2 = 18, center = true);\n        // Cross\n        translate([0, 0, 16])\n            union() {\n                cube([1, 0.5, 6], center = true);\n                translate([0, 0, 2.5])\n                    cube([4, 0.5, 1], center = true);\n            }\n    }\n}",
    "renders": true
  },
  {
    "building": "mausoleum",
    "openscad_code": "// Mausoleum - Realistic style, medium complexity\n// Overall dimensions: 80mm x 60mm x 70mm\n\n// Base foundation\nmodule base_foundation() {\n    translate([0, 0, 5])\n        cube([80, 60, 10], center=true);\n}\n\n// Main chamber structure\nmodule main_chamber() {\n    // Base platform\n    translate([0, 0, 15])\n        cube([70, 50, 40], center=true);\n    \n    // Roof base\n    translate([0, 0, 55])\n        cube([74, 54, 4], center=true);\n}\n\n// Stepped roof\nmodule stepped_roof() {\n    // Bottom tier\n    translate([0, 0, 59])\n        cube([70, 50, 3], center=true);\n    \n    // Middle tier\n    translate([0, 0, 62])\n        cube([60, 40, 3], center=true);\n    \n    // Top tier\n    translate([0, 0, 65])\n        cube([50, 30, 3], center=true);\n}\n\n// Pediment with columns\nmodule entrance_portico() {\n    // Pediment base\n    translate([0, 30, 55])\n        cube([40, 2, 15], center=true);\n    \n    // Pediment roof\n    translate([0, 31, 70])\n        rotate([0, 10, 0])\n        cube([42, 2, 12], center=true);\n    \n    // Columns\n    for(x = [-15, -5, 5, 15]) {\n        translate([x, 25, 47.5])\n            cylinder(h=15, d=4, center=true);\n    }\n}\n\n// Entrance arch\nmodule entrance_arch() {\n    difference() {\n        // Arch base\n        translate([0, 30, 45])\n            cube([20, 2, 20], center=true);\n        \n        // Arch opening\n        translate([0, 29, 50])\n            cylinder(h=4, d=12, center=true);\n    }\n}\n\n// Decorative frieze\nmodule frieze() {\n    for(x = [-30, -20, -10, 0, 10, 20, 30]) {\n        translate([x, 0, 55])\n            cube([4, 54, 2], center=true);\n    }\n}\n\n// Side windows\nmodule side_windows() {\n    for(side = [-1, 1]) {\n        // Window frame\n        translate([side * 35, 0, 35])\n            cube([2, 20, 20], center=true);\n        \n        // Window opening\n        translate([side * 36, 0, 35])\n            cube([2, 16, 16], center=true);\n    }\n}\n\n// Back decorative elements\nmodule back_decorations() {\n    // Central plaque\n    translate([0, -30, 35])\n        cube([20, 2, 15], center=true);\n    \n    // Rosettes\n    for(x = [-10, 0, 10]) {\n        translate([x, -29, 50])\n            cylinder(h=2, d=4, center=true);\n    }\n}\n\n// Combine all elements\nunion() {\n    base_foundation();\n    main_chamber();\n    stepped_roof();\n    entrance_portico();\n    entrance_arch();\n    frieze();\n    side_windows();\n    back_decorations();\n}",
    "renders": true
  },
  {
    "building": "aquarium",
    "openscad_code": "// Realistic Aquarium - Medium Complexity\n// 3D printable aquarium model with tank, stand, lid and simple decorations\n\n// Global parameters\n$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions (mm)\ntank_w = 60;\ntank_d = 30;\ntank_h = 35;\nwall_t = 2;\nstand_h = 15;\n\n// Tank module - main aquarium body\nmodule tank_body() {\n    // Outer box\n    difference() {\n        cube([tank_w, tank_d, tank_h]);\n        \n        // Inner cavity\n        translate([wall_t, wall_t, wall_t])\n        cube([tank_w - 2*wall_t, tank_d - 2*wall_t, tank_h - wall_t]);\n    }\n    \n    // Bottom glass support rim\n    translate([wall_t, wall_t, 0])\n    cube([tank_w - 2*wall_t, tank_d - 2*wall_t, wall_t]);\n}\n\n// Aquarium stand with doors and shelf\nmodule stand() {\n    // Main stand frame\n    difference() {\n        cube([tank_w + 10, tank_d + 10, stand_h]);\n        \n        // Front door opening\n        translate([5, 2, 2])\n        cube([tank_w, tank_d + 6, stand_h - 4]);\n        \n        // Shelf cavity\n        translate([7, 7, stand_h/2])\n        cube([tank_w + 6, tank_d - 4, stand_h/2 - 2]);\n    }\n    \n    // Shelf\n    translate([7, 7, stand_h/2 - 1])\n    cube([tank_w + 6, tank_d - 4, 2]);\n    \n    // Door panels (3 doors)\n    for(i = [0:2]) {\n        translate([5 + i*(tank_w/3 + 1), 2.5, 4])\n        cube([tank_w/3 - 1, 5, stand_h - 8]);\n    }\n    \n    // Door handles\n    for(i = [0:2]) {\n        translate([5 + i*(tank_w/3 + 1) + tank_w/6 - 1, 2, stand_h/2])\n        cylinder(h=15, r=1, $fn=8);\n    }\n}\n\n// Aquarium lid with feeding holes\nmodule lid() {\n    // Main lid frame\n    difference() {\n        translate([-2.5, -2.5, tank_h])\n        cube([tank_w + 5, tank_d + 5, 3]);\n        \n        // Inner cutout\n        translate([0, 0, tank_h + 1])\n        cube([tank_w, tank_d, 3]);\n    }\n    \n    // Feeding holes\n    for(x = [10:20:tank_w-10]) {\n        for(y = [10:10:tank_d-10]) {\n            translate([x, y, tank_h + 2])\n            cylinder(h=2, r=2, $fn=12);\n        }\n    }\n    \n    // Handle\n    translate([tank_w/2, tank_d/2 - 5, tank_h + 3])\n    cube([20, 10, 2]);\n}\n\n// Simple plant decoration\nmodule plant(stem_h, leaf_size) {\n    // Stem\n    translate([0, 0, 0])\n    cylinder(h=stem_h, r=1, $fn=8);\n    \n    // Leaves in spiral\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([leaf_size/2, 0, stem_h*i/5])\n        rotate([90, 0, 0])\n        scale([1, 1.5, 0.3])\n        sphere(r=leaf_size);\n    }\n}\n\n// Simple rock formation\nmodule rock(x, y, z) {\n    scale([x, y, z])\n    sphere(r=5, $fn=8);\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Stand\n    stand();\n    \n    // Tank\n    translate([5, 5, stand_h])\n    tank_body();\n    \n    // Lid\n    lid();\n    \n    // Decorations inside tank\n    translate([15, 10, stand_h + wall_t + 2])\n    plant(15, 4);\n    \n    translate([45, 20, stand_h + wall_t + 2])\n    plant(12, 3);\n    \n    translate([30, 15, stand_h + wall_t + 2])\n    rock(1, 0.8, 0.6);\n    \n    translate([35, 15, stand_h + wall_t + 2])\n    rock(0.7, 1.1, 0.5);\n}",
    "renders": true
  },
  {
    "building": "observatory",
    "openscad_code": "// Realistic Observatory Model (Medium Complexity)\n// Designed for 3D printing, ~70mm diameter dome\n\n$fn = 32; // Smoother curves for printing\n\n// Main parameters\nbase_radius = 30;\nbase_height = 15;\nwall_thickness = 2;\ndome_radius = 35;\ndome_thickness = 2;\n\nmodule observatory_base() {\n    // Cylindrical base with hollow center\n    difference() {\n        cylinder(h=base_height, r1=base_radius, r2=base_radius*1.1);\n        translate([0, 0, -0.1])\n            cylinder(h=base_height+0.2, r1=base_radius-wall_thickness, r2=base_radius*1.1-wall_thickness);\n    }\n    \n    // Foundation ring\n    translate([0, 0, -1])\n        cylinder(h=2, r=base_radius*1.15);\n}\n\nmodule dome() {\n    // Main dome structure\n    difference() {\n        sphere(d=dome_radius*2);\n        translate([0, 0, dome_radius-dome_thickness])\n            sphere(d=(dome_radius-dome_thickness)*2);\n    }\n    \n    // Dome slit\n    rotate([0, -15, 0])\n        translate([0, 0, dome_radius-10])\n            cube([dome_radius*0.8, dome_thickness+1, 20], center=true);\n}\n\nmodule telescope_mount() {\n    // Central pier\n    cylinder(h=25, r=5);\n    \n    // Mount base\n    translate([0, 0, 25])\n        cylinder(h=3, r=8);\n}\n\nmodule support_beams() {\n    // Radial support beams\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([base_radius*0.7, 0, base_height])\n                cube([base_radius*0.3, wall_thickness, 10]);\n    }\n}\n\nmodule door() {\n    // Entry door with frame\n    translate([base_radius-1, 0, 0])\n        rotate([0, 90, 0])\n        union() {\n            // Door frame\n            cube([base_height, 12, 1]);\n            // Door panel\n            translate([2, 1, 0])\n                cube([base_height-4, 10, 0.5]);\n        }\n}\n\nmodule ventilation() {\n    // Small vents around base\n    for(i = [30:60:330]) {\n        rotate([0, 0, i])\n            translate([base_radius*0.9, 0, base_height-3])\n                cube([4, 1, 2]);\n    }\n}\n\n// Assemble the observatory\nunion() {\n    // Base structure\n    observatory_base();\n    \n    // Support elements\n    support_beams();\n    \n    // Dome assembly\n    translate([0, 0, base_height+10])\n        dome();\n    \n    // Internal telescope\n    translate([0, 0, 0])\n        telescope_mount();\n    \n    // Entry features\n    door();\n    \n    // Ventilation\n    ventilation();\n}",
    "renders": true
  },
  {
    "building": "planetarium",
    "openscad_code": "// Planetarium in realistic style with medium complexity\n\n// Main building parameters\ndome_radius = 25;\nwall_height = 15;\nbase_thickness = 3;\nwall_thickness = 2.5;\ndoor_width = 8;\ndoor_height = 12;\nwindow_radius = 2.5;\n\n// Foundation and base\nmodule base() {\n    difference() {\n        // Main cylindrical base\n        cylinder(h=base_thickness, r=dome_radius+wall_thickness, $fn=64);\n        \n        // Hollow center\n        translate([0, 0, -0.1])\n            cylinder(h=base_thickness+0.2, r=dome_radius, $fn=64);\n    }\n}\n\n// Cylindrical walls with entrance\nmodule walls() {\n    difference() {\n        // Main wall structure\n        cylinder(h=wall_height, r=dome_radius+wall_thickness, $fn=64);\n        \n        // Hollow interior\n        translate([0, 0, -0.1])\n            cylinder(h=wall_height+0.2, r=dome_radius, $fn=64);\n        \n        // Entrance doorway\n        translate([dome_radius, 0, 0])\n            rotate([0, 90, 0])\n            cube([door_height, door_width, wall_thickness+1], center=true);\n    }\n}\n\n// Main dome with seam details\nmodule dome() {\n    difference() {\n        // Main dome sphere\n        translate([0, 0, wall_height])\n        sphere(r=dome_radius+wall_thickness, $fn=128);\n        \n        // Hollow interior\n        translate([0, 0, wall_height])\n        sphere(r=dome_radius, $fn=128);\n        \n        // Remove bottom half\n        translate([0, 0, wall_height-dome_radius])\n        cube([dome_radius*3, dome_radius*3, dome_radius*2], center=true);\n    }\n    \n    // Dome seam details\n    for (i = [0:15:359]) {\n        rotate([0, 0, i])\n        translate([0, 0, wall_height])\n        linear_extrude(height=0.5)\n        polygon(points=[[dome_radius-0.5, -0.5], [dome_radius+0.5, -0.5], \n                       [dome_radius+0.5, 0.5], [dome_radius-0.5, 0.5]]);\n    }\n}\n\n// Small windows around the dome\nmodule windows() {\n    for (angle = [45:45:315]) {\n        rotate([0, 0, angle])\n        translate([dome_radius-2, 0, wall_height-5])\n        rotate([90, 0, 0])\n        cylinder(h=wall_thickness+1, r=window_radius, $fn=32);\n    }\n}\n\n// Entrance canopy\nmodule entrance_canopy() {\n    translate([dome-radius+wall_thickness/2, 0, wall_height/2])\n    rotate([0, 90, 0])\n    difference() {\n        // Canopy roof\n        cylinder(h=door_width+6, r=2, center=true, $fn=32);\n        \n        // Cut bottom flat\n        translate([0, 0, -2])\n        cube([door_width+6, 4, 4], center=true);\n    }\n    \n    // Support posts\n    translate([dome_radius+wall_thickness/2, -door_width/2-2, wall_height/2-6])\n    cylinder(h=6, r=0.8, $fn=16);\n    \n    translate([dome_radius+wall_thickness/2, door_width/2+2, wall_height/2-6])\n    cylinder(h=6, r=0.8, $fn=16);\n}\n\n// Roof detail - small observatory dome\nmodule observatory_dome() {\n    translate([0, 0, wall_height+dome_radius-5])\n    difference() {\n        // Small dome\n        sphere(r=6, $fn=64);\n        \n        // Cut bottom half\n        translate([0, 0, -6])\n        cube([20, 20, 12], center=true);\n        \n        // Observatory slit\n        rotate([0, 90, 0])\n        translate([0, 0, 4])\n        cube([1.5, 10, 3], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    walls();\n    dome();\n    windows();\n    entrance_canopy();\n    observatory_dome();\n}",
    "renders": true
  },
  {
    "building": "barracks",
    "openscad_code": "// Realistic medium-complexity barracks for 3D printing\n// Overall footprint ≈ 80 mm × 60 mm × 35 mm\n\nmodule wall_block(w, d, h) {\n    difference() {\n        cube([w, d, h]);\n        translate([2, 2, 2]) cube([w-4, d-4, h-2]);  // 2 mm walls\n    }\n}\n\nmodule door() {\n    difference() {\n        cube([12, 2, 18]);\n        translate([2, -1, 2]) cube([8, 4, 16]);\n    }\n}\n\nmodule window() {\n    difference() {\n        cube([10, 2, 8]);\n        translate([2, -1, 2]) cube([6, 4, 4]);\n    }\n}\n\nmodule roof_tile(x, y) {\n    translate([x, y, 0])\n    rotate([0, 90, 0])\n    cylinder(h=2, r1=1, r2=3);\n}\n\nmodule roof() {\n    difference() {\n        translate([-2, -2, 30])\n        cube([84, 64, 5]);  // main roof slab\n        for (i = [0:4])\n            translate([10 + i*15, 5, 30])\n            cube([8, 54, 6]);  // drainage grooves\n    }\n    // ridge cap\n    translate([40, 30, 35])\n    cube([4, 60, 4]);\n}\n\nmodule chimney() {\n    translate([65, 50, 25])\n    difference() {\n        cube([8, 8, 12]);\n        translate([2, 2, 8]) cube([4, 4, 6]);\n    }\n}\n\nmodule steps() {\n    for (i = [0:2])\n        translate([34 - i*2, -2 - i*2, 2 + i*4])\n        cube([12 + i*4, 4, 4]);\n}\n\n// Main building body\nunion() {\n    // foundation\n    translate([-5, -5, 0])\n    cube([90, 70, 2]);\n    \n    // walls\n    wall_block(80, 60, 30);\n    \n    // front door bay\n    translate([34, -2, 0])\n    wall_block(12, 4, 20);\n    \n    // rear wall with door\n    translate([34, 58, 0])\n    door();\n    \n    // left side windows\n    translate([-2, 15, 10])\n    window();\n    translate([-2, 35, 10])\n    window();\n    \n    // right side windows\n    translate(78, 15, 10)\n    mirror([1, 0, 0])\n    window();\n    translate(78, 35, 10)\n    mirror([1, 0, 0])\n    window();\n    \n    // front door\n    translate([34, -2, 0])\n    door();\n    \n    // front steps\n    steps();\n    \n    // roof\n    roof();\n    \n    // chimney\n    chimney();\n}\n\n// small ventilation pipes on roof\nfor (x = [20, 60])\n    translate([x, 55, 35])\n    cylinder(h=5, r=2, $fn=12);",
    "renders": true
  },
  {
    "building": "firehouse",
    "openscad_code": "// Firehouse - Realistic style, medium complexity\n// Designed for 3D printing - no overhangs, 2mm wall thickness\n\n$fn=64;\n\nmodule main_building() {\n    // Main structure - 60x40x35mm\n    difference() {\n        cube([60, 40, 35], center=true);\n        translate([0, 0, 2])\n        cube([56, 36, 35], center=true);\n    }\n    \n    // Roof\n    translate([0, 0, 19])\n    difference() {\n        cube([62, 42, 4], center=true);\n        translate([0, 0, -1])\n        cube([58, 38, 6], center=true);\n    }\n}\n\nmodule garage_doors() {\n    // Two garage doors - 12mm high each\n    for(i=[-1, 1]) {\n        translate([i*15, 21, -8])\n        difference() {\n            cube([14, 2, 12]);\n            translate([1, -1, 1])\n            cube([12, 4, 10]);\n            for(h=[3, 6, 9]) {\n                translate([2, 1, h])\n                cylinder(h=3, d=1.5);\n            }\n        }\n    }\n}\n\nmodule fire_pole() {\n    // Fire pole on right side\n    translate([28, 15, 0])\n    cylinder(h=35, d=2);\n}\n\nmodule windows() {\n    // Windows - 3 rows\n    for(y=[-10, 0, 10]) {\n        for(x=[-20, 0, 20]) {\n            translate([x, y, 5])\n            difference() {\n                cube([8, 6, 8]);\n                translate([1, 1, 1])\n                cube([6, 4, 6]);\n            }\n        }\n    }\n}\n\nmodule door() {\n    // Front entrance door\n    translate([0, 21, -5])\n    difference() {\n        cube([10, 2, 20]);\n        translate([1, -1, 1])\n        cube([8, 4, 18]);\n    }\n}\n\nmodule signage() {\n    // \"FIRE STATION\" sign above door\n    translate([0, 21, 12])\n    cube([30, 2, 4]);\n}\n\nmodule flag_pole() {\n    // Flag pole on roof\n    translate([25, 0, 23])\n    cylinder(h=15, d=1.5);\n    \n    // Flag\n    translate([26, 0, 36])\n    cube([8, 0.5, 5]);\n}\n\nmodule chimney() {\n    // Brick chimney\n    translate([-20, 0, 25])\n    difference() {\n        cube([8, 8, 12]);\n        translate([1, 1, -1])\n        cube([6, 6, 14]);\n    }\n}\n\nmodule roof_details() {\n    // Ridge cap along roof\n    translate([0, 0, 21])\n    cube([60, 2, 2], center=true);\n}\n\n// Assembly\nunion() {\n    main_building();\n    garage_doors();\n    fire_pole();\n    windows();\n    door();\n    signage();\n    flag_pole();\n    chimney();\n    roof_details();\n}",
    "renders": true
  },
  {
    "building": "policestation",
    "openscad_code": "// Realistic Medium-Complexity Police Station\n// Designed for 3D printing, ~70 mm wide\n\n$fa = 2;\n$fs = 1;\n\nmodule sign_text(text, h) {\n    // Simple extruded text placeholder\n    linear_extrude(h) {\n        text(text, size = 6, font = \"Arial:style=Bold\");\n    }\n}\n\nmodule window_frame(w, h, t) {\n    // Outer frame\n    difference() {\n        cube([w, t, h]);\n        translate([t, -0.1, t]) cube([w - 2*t, t + 0.2, h - 2*t]);\n    }\n}\n\nmodule window_assembly(w, h, frame_t) {\n    union() {\n        // Glass pane flush with outside\n        color([0.7, 0.85, 1, 0.6]) translate([0, 0.5, 0]) cube([w, 1, h]);\n        // Frame on outside\n        translate([0, 0, 0]) window_frame(w, h, frame_t);\n        translate([0, 0, h - frame_t]) window_frame(w, frame_t, frame_t);\n        translate([0, 0, 0]) rotate([0, 90, 0]) window_frame(h, frame_t, frame_t);\n        translate([w - frame_t, 0, 0]) rotate([0, 90, 0]) window_frame(h, frame_t, frame_t);\n    }\n}\n\nmodule door(width, height, thickness) {\n    // Door slab\n    difference() {\n        cube([width, thickness, height]);\n        // Door handle recess\n        translate([width - 15, thickness - 3, height/2 - 5]) cube([10, 5, 10]);\n    }\n    // Handle bar\n    translate([width - 10, thickness + 1, height/2]) rotate([0, 90, 0]) cylinder(h = 15, d = 2);\n}\n\nmodule antenna() {\n    // Roof antenna\n    translate([75, 15, 65]) {\n        cylinder(h = 20, d = 2);\n        translate([0, 0, 20]) sphere(d = 3);\n    }\n}\n\nmodule police_station() {\n    // Base foundation\n    translate([-5, -5, 0]) cube([80, 50, 2]);\n\n    // Main building body\n    translate([0, 0, 2]) cube([70, 40, 40]);\n\n    // Roof with slight overhang\n    translate([-2, -2, 42]) cube([74, 44, 3]);\n\n    // Entrance portico\n    translate([30, -3, 2]) cube([20, 6, 30]);\n\n    // Front columns\n    for (x = [35, 45]) {\n        translate([x, -3, 2]) cylinder(h = 30, d = 3);\n    }\n\n    // Roof of portico\n    translate([29, -5, 32]) cube([22, 8, 2]);\n\n    // Front windows (3)\n    for (x = [10, 30, 50]) {\n        translate([x, 39, 10]) window_assembly(15, 20, 2);\n    }\n\n    // Side windows (2 each side)\n    for (y = [10, 25]) {\n        translate([69, y, 10]) rotate([0, 90, 0]) window_assembly(15, 20, 2);\n        translate([1, y, 10]) rotate([0, 90, 0]) window_assembly(15, 20, 2);\n    }\n\n    // Front door centered in portico\n    translate([35, 3, 2]) door(10, 25, 3);\n\n    // POLICE sign above door\n    translate([30, 38, 35]) sign_text(\"POLICE\", 2);\n\n    // Flag pole\n    translate([60, 10, 45]) cylinder(h = 15, d = 2);\n    translate([60, 10, 60]) rotate([90, 0, 0]) cube([12, 0.5, 8]);\n\n    // Small side entrance\n    translate([0, 30, 2]) door(8, 20, 3);\n\n    // Roof antenna\n    antenna();\n}\n\npolice_station();",
    "renders": true
  },
  {
    "building": "townhall",
    "openscad_code": "// Town Hall in realistic style with medium complexity\n// Dimensions in mm, sized for 3D printing\n\n$fn = 32;\n\n// Main dimensions\nbase_width = 60;\nbase_depth = 40;\nbase_height = 5;\n\nwall_height = 25;\nwall_thickness = 2;\n\nroof_overhang = 3;\nroof_height = 15;\n\ntower_width = 20;\ntower_height = 45;\ntower_pos_x = 0;\ntower_pos_z = -5;\n\ndoor_width = 10;\ndoor_height = 15;\n\nwindow_width = 6;\nwindow_height = 8;\nwindow_y_offset = 12;\n\n// Module for window frame\nmodule window_frame(x, y, z, width, height) {\n    translate([x, y, z]) {\n        difference() {\n            // Outer frame\n            cube([width + 2, wall_thickness + 1, height + 2], center = true);\n            // Inner cutout\n            cube([width, wall_thickness + 2, height], center = true);\n        }\n    }\n}\n\n// Module for door\nmodule door() {\n    translate([0, -base_depth/2 - 0.1, door_height/2]) {\n        difference() {\n            // Door frame\n            cube([door_width + 2, 2, door_height + 1]);\n            // Door opening\n            cube([door_width, 3, door_height]);\n        }\n        // Door panel\n        translate([0, 1, 0]) {\n            cube([door_width - 1, 1, door_height - 1]);\n        }\n    }\n}\n\n// Base foundation\nmodule base() {\n    translate([0, 0, base_height/2]) {\n        cube([base_width, base_depth, base_height], center = true);\n    }\n}\n\n// Main walls\nmodule walls() {\n    translate([0, 0, base_height + wall_height/2]) {\n        difference() {\n            // Outer walls\n            cube([base_width, base_depth, wall_height], center = true);\n            // Hollow center\n            cube([base_width - wall_thickness*2, base_depth - wall_thickness*2, wall_height + 1], center = true);\n        }\n    }\n}\n\n// Windows on front and back\nmodule windows() {\n    // Front windows\n    window_frame(-15, base_depth/2 - wall_thickness/2, base_height + wall_height/2, window_width, window_height);\n    window_frame(15, base_depth/2 - wall_thickness/2, base_height + wall_height/2, window_width, window_height);\n    \n    // Back windows\n    window_frame(-15, -base_depth/2 + wall_thickness/2, base_height + wall_height/2, window_width, window_height);\n    window_frame(15, -base_depth/2 + wall_thickness/2, base_height + wall_height/2, window_width, window_height);\n    \n    // Side windows\n    window_frame(base_width/2 - wall_thickness/2, 0, base_height + wall_height/2, window_width, window_height);\n    window_frame(-base_width/2 + wall_thickness/2, 0, base_height + wall_height/2, window_width, window_height);\n}\n\n// Roof with overhang\nmodule roof() {\n    translate([0, 0, base_height + wall_height + roof_height/2]) {\n        cube([base_width + roof_overhang*2, base_depth + roof_overhang*2, roof_height], center = true);\n    }\n}\n\n// Clock tower\nmodule clock_tower() {\n    translate([tower_pos_x, tower_pos_z, 0]) {\n        // Tower base\n        translate([0, 0, tower_height/2]) {\n            difference() {\n                cube([tower_width, tower_width, tower_height], center = true);\n                // Hollow tower\n                cube([tower_width - wall_thickness*2, tower_width - wall_thickness*2, tower_height + 1], center = true);\n            }\n        }\n        \n        // Tower roof (pyramid style)\n        translate([0, 0, tower_height + 5]) {\n            cylinder(h = 10, r1 = tower_width/1.5, r2 = 0);\n        }\n        \n        // Clock faces\n        translate([0, tower_width/2 + 1, tower_height/2]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 1, r = 4);\n                translate([0, 0, 0.6]) {\n                    cylinder(h = 0.5, r = 3);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    walls();\n    windows();\n    door();\n    roof();\n    clock_tower();\n}",
    "renders": true
  },
  {
    "building": "parliament",
    "openscad_code": "// Parliament Building in realistic medium complexity style\n// 3D printable, ~70mm wide\n\n$fn = 32; // Smooth curves\n\nmodule base() {\n    // Main foundation block\n    difference() {\n        cube([70, 50, 5], center=true);\n        // Hollow base for material saving\n        cube([66, 46, 6], center=true);\n    }\n}\n\nmodule central_tower() {\n    // Central clock tower\n    translate([0, 0, 27.5]) {\n        union() {\n            // Tower body\n            cylinder(h=25, r=8);\n            // Tower roof\n            translate([0, 0, 12.5]) rotate([0, 0, 45]) \n                cylinder(h=12, r1=8, r2=0);\n            // Clock faces (simplified)\n            for(a = [0:90:270]) {\n                rotate([0, 0, a]) \n                translate([0, 7.9, 10]) \n                rotate([90, 0, 0]) \n                cylinder(h=0.5, r=3);\n            }\n        }\n    }\n}\n\nmodule wings() {\n    // Left and right wings\n    for(x = [-35, 35]) {\n        translate([x, 0, 10]) {\n            union() {\n                // Wing building\n                cube([30, 45, 20], center=true);\n                // Roof\n                translate([0, 0, 10]) rotate([0, 0, 45]) \n                    cube([30, 30, 2], center=true);\n                // Columns\n                for(col = [-10, 0, 10]) {\n                    translate([col, -20, 0]) \n                    cylinder(h=20, r=2);\n                    translate([col, 20, 0]) \n                    cylinder(h=20, r=2);\n                }\n            }\n        }\n    }\n}\n\nmodule central_building() {\n    // Main central structure\n    translate([0, 0, 12.5]) {\n        union() {\n            // Main body\n            cube([36, 45, 25], center=true);\n            // Roof\n            translate([0, 0, 12.5]) rotate([0, 0, 45]) \n                cube([36, 36, 3], center=true);\n            // Entrance columns\n            for(col = [-12, -6, 0, 6, 12]) {\n                translate([col, -20, 0]) \n                cylinder(h=25, r=1.5);\n                translate([col, 20, 0]) \n                cylinder(h=25, r=1.5);\n            }\n            // Steps\n            for(i = [1:3]) {\n                translate([0, -25-i, 12.5-i]) \n                cube([30+i*2, 2, i*2], center=true);\n            }\n        }\n    }\n}\n\nmodule flag() {\n    // Flag on top of tower\n    translate([0, 0, 40]) {\n        rotate([90, 0, 90]) \n        cube([10, 6, 0.5]);\n        // Flag pole\n        translate([0, -5, 0]) \n        cylinder(h=10, r=0.5);\n    }\n}\n\n// Main assembly\nunion() {\n    base();\n    central_tower();\n    wings();\n    central_building();\n    flag();\n}",
    "renders": true
  },
  {
    "building": "embassy",
    "openscad_code": "// Embassy Building - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Overall dimensions\nembassy_width = 80;\nembassy_depth = 60;\nembassy_height = 35;\n\n// Base foundation\nmodule foundation() {\n    difference() {\n        // Main foundation block\n        translate([0, 0, -2])\n            cube([embassy_width + 10, embassy_depth + 10, 4], center=true);\n        \n        // Recessed center\n        translate([0, 0, -1.5])\n            cube([embassy_width + 5, embassy_depth + 5, 4], center=true);\n    }\n}\n\n// Main building structure\nmodule main_building() {\n    // Central block\n    translate([0, 0, embassy_height/2])\n        cube([embassy_width, embassy_depth, embassy_height], center=true);\n    \n    // Roof parapet\n    translate([0, 0, embassy_height + 1.5])\n        cube([embassy_width + 2, embassy_depth + 2, 3], center=true);\n}\n\n// Front entrance portico with columns\nmodule entrance_portico() {\n    // Steps\n    for (i = [0:2]) {\n        translate([0, embassy_depth/2 + 2 + i*2, i*1.5])\n            cube([embassy_width/2 + i*5, 4, 3], center=true);\n    }\n    \n    // Portico roof\n    translate([0, embassy_depth/2 + 8, embassy_height/2 + 5])\n        cube([embassy_width/2 + 15, 12, 1], center=true);\n    \n    // Columns\n    column_positions = [-20, -10, 0, 10, 20];\n    for (x = column_positions) {\n        translate([x, embassy_depth/2 + 8, embassy_height/2 - 5])\n            cylinder(h=20, r=2, center=true);\n    }\n}\n\n// Windows module\nmodule windows() {\n    window_width = 8;\n    window_height = 10;\n    \n    // Front windows\n    for (x = [-30, -15, 0, 15, 30]) {\n        translate([x, embassy_depth/2 - 1, embassy_height/2])\n            cube([window_width, 2, window_height], center=true);\n    }\n    \n    // Side windows\n    for (y = [-25, -10, 5, 20]) {\n        translate([embassy_width/2 - 1, y, embassy_height/2])\n            cube([2, window_width, window_height], center=true);\n    }\n}\n\n// Flag poles\nmodule flag_poles() {\n    // Main flag pole\n    translate([embassy_width/2 - 5, 0, embassy_height + 5])\n        cylinder(h=15, r=1, center=true);\n    \n    // Secondary flag poles\n    translate([-embassy_width/2 + 5, embassy_depth/2 - 5, embassy_height + 3])\n        cylinder(h=10, r=0.5, center=true);\n    translate([-embassy_width/2 + 5, -embassy_depth/2 + 5, embassy_height + 3])\n        cylinder(h=10, r=0.5, center=true);\n}\n\n// Roof details\nmodule roof_details() {\n    // HVAC unit\n    translate([0, 0, embassy_height + 3.5])\n        cube([15, 10, 3], center=true);\n    \n    // Small skylights\n    for (x = [-20, 0, 20]) {\n        translate([x, 0, embassy_height + 2])\n            cylinder(h=1, r=3, center=true);\n    }\n}\n\n// Assemble the complete embassy\nunion() {\n    foundation();\n    \n    difference() {\n        union() {\n            main_building();\n            entrance_portico();\n        }\n        windows();\n    }\n    \n    flag_poles();\n    roof_details();\n}",
    "renders": true
  },
  {
    "building": "consulate",
    "openscad_code": "// Consulate Building - Realistic Medium Complexity\n// Designed for 3D printing with 1mm wall thickness\n\n$fn = 32; // Quality setting for curves\n\n// Main dimensions\nlength = 90;\nwidth = 60;\nheight = 30;\nwall_thickness = 2;\n\n// Base module\nmodule base() {\n    difference() {\n        cube([length, width, height]);\n        translate([wall_thickness, wall_thickness, 0])\n            cube([length-wall_thickness*2, width-wall_thickness*2, height+1]);\n    }\n}\n\n// Columns module\nmodule columns() {\n    column_diam = 5;\n    column_height = 18;\n    spacing = 12;\n    \n    for (i = [0:3]) {\n        translate([15 + i*spacing, 5, height])\n            cylinder(h=column_height, d=column_diam);\n        translate([15 + i*spacing, width-5, height])\n            cylinder(h=column_height, d=column_diam);\n    }\n}\n\n// Roof module\nmodule roof() {\n    translate([-5, -5, height+18])\n        cube([length+10, width+10, 2]);\n}\n\n// Flag pole\nmodule flag_pole() {\n    translate([length-10, width/2, height+18])\n        cylinder(h=15, d=1.5);\n}\n\n// Flag\nmodule flag() {\n    translate([length-10, width/2+1, height+18+12])\n        cube([8, 5, 0.8]);\n}\n\n// Entrance\nmodule entrance() {\n    translate([length/2-8, 0, 0])\n        cube([16, 3, 12]);\n}\n\n// Windows\nmodule windows() {\n    window_width = 8;\n    window_height = 6;\n    \n    // Front windows\n    for (i = [0:2]) {\n        translate([20 + i*25, 0, height/2])\n            cube([window_width, 2, window_height]);\n    }\n    \n    // Side windows\n    for (i = [0:1]) {\n        translate([0, 15 + i*30, height/2])\n            cube([2, window_width, window_height]);\n    }\n}\n\n// Steps\nmodule steps() {\n    step_height = 2;\n    step_width = 20;\n    \n    translate([length/2-step_width/2, -6, 0])\n        cube([step_width, 6, step_height]);\n    translate([length/2-step_width/2+2, -9, 0])\n        cube([step_width-4, 3, step_height]);\n}\n\n// Emblem\nmodule emblem() {\n    translate([length/2, width/2, height+18+1])\n        cylinder(h=1, d=8);\n    translate([length/2, width/2, height+18+2])\n        sphere(d=4);\n}\n\n// Assembly\nunion() {\n    base();\n    columns();\n    roof();\n    entrance();\n    windows();\n    steps();\n    flag_pole();\n    flag();\n    emblem();\n}",
    "renders": true
  },
  {
    "building": "clinic",
    "openscad_code": "// Simple Clinic Building - 3D Printable\n// All dimensions in mm, designed for 50-100mm print size\n\n// Main building dimensions\nbuilding_width = 60;\nbuilding_depth = 40;\nbuilding_height = 35;\nwall_thickness = 2;\n\n// Windows\nwindow_width = 8;\nwindow_height = 10;\nwindow_depth = 1;\n\n// Door\ndoor_width = 12;\ndoor_height = 20;\ndoor_depth = 1;\n\n// Roof\nroof_overhang = 5;\nroof_height = 10;\n\n// Sign\nsign_width = 20;\nsign_height = 5;\nsign_thickness = 1;\n\n// Medical cross thickness\ncross_thickness = 2;\n\n// Main building structure\nmodule main_building() {\n    // Base structure\n    difference() {\n        cube([building_width, building_depth, building_height]);\n        \n        // Hollow out the inside\n        translate([wall_thickness, wall_thickness, 0])\n            cube([building_width - 2*wall_thickness, \n                  building_depth - 2*wall_thickness, \n                  building_height]);\n    }\n}\n\n// Windows module for repetitive windows\nmodule window(x_pos, z_pos) {\n    translate([x_pos, wall_thickness/2, z_pos])\n        cube([window_width, window_depth, window_height]);\n}\n\n// Generate windows on front wall\nmodule front_windows() {\n    for(x = [-20, -5, 10, 25]) {\n        window(x, 15);\n    }\n}\n\n// Door module\nmodule front_door() {\n    translate([0, wall_thickness/2, 0])\n        cube([door_width, door_depth, door_height]);\n}\n\n// Sloped roof\nmodule roof() {\n    translate([-roof_overhang/2, -roof_overhang/2, building_height])\n        rotate([0, 0, 0])\n            linear_extrude(height = roof_height, scale = 1.2)\n                square([building_width + roof_overhang, building_depth + roof_overhang]);\n}\n\n// Clinic sign with cross\nmodule clinic_sign() {\n    translate([0, building_depth/2 + 2, building_height/2 + 5])\n        cube([sign_width, sign_thickness, sign_height]);\n    \n    // Medical cross\n    translate([0, building_depth/2 + 3, building_height/2 + 7.5])\n        cube([sign_width/2, cross_thickness/2, cross_thickness]);\n    \n    translate([0, building_depth/2 + 3, building_height/2 + 7.5])\n        rotate([0, 90, 0])\n            cube([sign_width/2, cross_thickness/2, cross_thickness]);\n}\n\n// Small chimney\nmodule chimney() {\n    translate([building_width/4, building_depth/4, building_height + roof_height - 5])\n        cube([6, 6, 8]);\n}\n\n// Combine all parts\nunion() {\n    // Main structure\n    difference() {\n        main_building();\n        \n        // Cut out windows and door\n        front_windows();\n        front_door();\n    }\n    \n    // Roof\n    roof();\n    \n    // Sign\n    clinic_sign();\n    \n    // Chimney\n    chimney();\n}",
    "renders": true
  },
  {
    "building": "orphanage",
    "openscad_code": "// Orphanage model - realistic style, medium complexity\n// Overall dimensions: 80mm wide x 60mm deep x 45mm tall\n\nwall_thickness = 2;\nwindow_depth = 1.5;\ndoor_width = 12;\ndoor_height = 18;\n\nmodule window_frame(width, height) {\n    difference() {\n        cube([width, wall_thickness + 0.2, height], center = true);\n        translate([0, 0, 0])\n            cube([width - 2, wall_thickness + 0.4, height - 2], center = true);\n    }\n}\n\nmodule window_assembly(width, height) {\n    translate([0, wall_thickness/2, 0])\n        union() {\n            // Window pane\n            color([0.8, 0.9, 1])\n                translate([0, -window_depth/2, 0])\n                    cube([width - 2, window_depth, height - 2], center = true);\n            // Window frame\n            window_frame(width, height);\n        }\n}\n\nmodule door() {\n    union() {\n        // Door panel\n        color([0.6, 0.4, 0.2])\n            translate([0, -wall_thickness/2, door_height/2])\n                cube([door_width, wall_thickness, door_height], center = true);\n        // Door knob\n        color([0.8, 0.8, 0])\n            translate([door_width/2 - 2, -wall_thickness/2 - 1, door_height/2])\n                sphere(r = 1.5);\n        // Small window in door\n        color([0.8, 0.9, 1])\n            translate([0, -wall_thickness/2 - 0.5, door_height - 6])\n                cube([6, 1, 6], center = true);\n    }\n}\n\nmodule roof() {\n    // Main roof structure\n    difference() {\n        union() {\n            // Front slope\n            translate([-40, -30, 25])\n                rotate([0, 0, 0])\n                    polyhedron(\n                        points = [[0,0,0], [80,0,0], [80,60,0], [0,60,0], [40,30,20]],\n                        faces = [[0,1,4], [1,2,4], [2,3,4], [3,0,4], [0,3,2,1]]\n                    );\n            // Back extension\n            translate([20, -30, 25])\n                cube([20, 60, 15]);\n            // Chimney\n            color([0.7, 0.7, 0.7])\n                translate([50, 0, 40])\n                    cube([8, 8, 10]);\n        }\n        // Chimney hole\n        translate([52, 2, 45])\n            cube([4, 4, 5]);\n    }\n}\n\nmodule main_building() {\n    difference() {\n        // Main structure\n        union() {\n            // Ground floor\n            color([0.9, 0.9, 0.85])\n                cube([80, 60, 25]);\n            // Second floor\n            color([0.9, 0.9, 0.85])\n                translate([0, 0, 25])\n                    cube([60, 60, 15]);\n            // Front porch\n            color([0.85, 0.85, 0.8])\n                translate([-40, -35, 0])\n                    cube([20, 10, 5]);\n            // Porch roof supports\n            color([0.8, 0.8, 0.8])\n                union() {\n                    translate([-35, -35, 5])\n                        cylinder(h = 10, r = 1.5);\n                    translate([-25, -35, 5])\n                        cylinder(h = 10, r = 1.5);\n                }\n            // Porch roof\n            color([0.7, 0.7, 0.7])\n                translate([-30, -40, 15])\n                    cube([20, 15, 2]);\n        }\n        \n        // Ground floor windows\n        for(x = [-25, -5, 15]) {\n            translate([x, 30, 15])\n                window_assembly(12, 12);\n            translate([x, -30, 15])\n                window_assembly(12, 12);\n        }\n        \n        // Second floor windows\n        for(x = [-20, 0, 20]) {\n            translate([x, 30, 32.5])\n                window_assembly(10, 10);\n            translate([x, -30, 32.5])\n                window_assembly(10, 10);\n        }\n        \n        // Front door\n        translate([-30, 30, 9])\n            rotate([0, 0, 0])\n                door();\n        \n        // Side door\n        translate([40, 0, 9])\n            rotate([0, 0, -90])\n                door();\n        \n        // Foundation details\n        translate([-41, -31, -1])\n            cube([82, 62, 1]);\n    }\n}\n\n// Assembly\nunion() {\n    main_building();\n    roof();\n}",
    "renders": true
  },
  {
    "building": "seminary",
    "openscad_code": "// Seminary Building - Realistic Style, Medium Complexity\n// Dimensions approximately 80x60x40mm\n\n// Main building module\nmodule seminary() {\n    // Base foundation\n    difference() {\n        cube([80, 60, 5], center=true);\n        translate([0, 0, -2.5]) cube([78, 58, 5], center=true);\n    }\n    \n    // Main structure - two story building\n    difference() {\n        cube([75, 55, 35], center=true);\n        translate([0, 0, -2.5]) cube([73, 53, 35], center=true);\n    }\n    \n    // Ground floor windows\n    for(x = [-30, -15, 0, 15, 30]) {\n        translate([x, 27.5, 5]) cube([8, 1, 10]);\n        translate([x, -27.5, 5]) cube([8, 1, 10]);\n    }\n    \n    // Second floor windows\n    for(x = [-30, -15, 0, 15, 30]) {\n        translate([x, 27.5, 20]) cube([8, 1, 10]);\n        translate([x, -27.5, 20]) cube([8, 1, 10]);\n    }\n    \n    // Front entrance\n    translate([0, 28, 5]) {\n        difference() {\n            cube([12, 2, 15], center=true);\n            translate([0, -1, 2.5]) cube([10, 2, 10], center=true);\n        }\n    }\n    \n    // Entrance arch\n    translate([0, 29, 15]) {\n        difference() {\n            cube([12, 1, 5], center=true);\n            translate([0, 0, 2.5]) cylinder(h=5, r=6, center=true);\n        }\n    }\n    \n    // Bell tower\n    translate([25, 20, 17.5]) {\n        // Tower base\n        difference() {\n            cube([15, 15, 20], center=true);\n            translate([0, 0, -2.5]) cube([13, 13, 20], center=true);\n        }\n        \n        // Tower roof\n        translate([0, 0, 27.5]) {\n            cylinder(h=10, r1=10, r2=8);\n        }\n        \n        // Bell openings\n        for(angle = [0, 90, 180, 270]) {\n            rotate([0, 0, angle]) {\n                translate([5, 0, 22.5]) cube([4, 1, 5], center=true);\n            }\n        }\n    }\n    \n    // Chapel wing\n    translate([-35, 0, 17.5]) {\n        // Chapel structure\n        difference() {\n            cube([20, 40, 25], center=true);\n            translate([0, 0, -2.5]) cube([18, 38, 25], center=true);\n        }\n        \n        // Chapel windows\n        for(y = [-15, -5, 5, 15]) {\n            translate([-10, y, 17.5]) cube([1, 6, 10]);\n        }\n        \n        // Chapel roof\n        translate([0, 0, 30]) {\n            rotate([90, 0, 0]) {\n                linear_extrude(height=20, center=true) {\n                    polygon(points=[[-10, -20], [10, -20], [0, 20]]);\n                }\n            }\n        }\n    }\n    \n    // Chimneys\n    module chimney(x, y) {\n        translate([x, y, 35]) {\n            difference() {\n                cube([4, 4, 8], center=true);\n                translate([0, 0, -2]) cube([3, 3, 8], center=true);\n            }\n        }\n    }\n    \n    chimney(20, -15);\n    chimney(-20, 15);\n    \n    // Roof\n    translate([0, 0, 35]) {\n        rotate([90, 0, 0]) {\n            linear_extrude(height=75, center=true) {\n                polygon(points=[[-37.5, -27.5], [37.5, -27.5], [0, 27.5]]);\n            }\n        }\n    }\n    \n    // Cross on bell tower\n    translate([25, 20, 37.5]) {\n        union() {\n            cube([1, 1, 8], center=true);\n            cube([6, 1, 1], center=true);\n        }\n    }\n}\n\n// Assembly\nseminary();",
    "renders": true
  },
  {
    "building": "chapel",
    "openscad_code": "// Small Chapel – realistic, 3D-printable, medium complexity\n// Overall footprint ≈ 60 mm × 40 mm, height ≈ 55 mm\n// All walls 1.2 mm thick for reliable FDM printing\n\n$fn = 32;\n\n// Main body\nmodule chapel() {\n    // Base platform\n    translate([0, 0, -1])\n        cube([62, 42, 2], center = true);\n\n    // Floor slab\n    translate([0, 0, 0.8])\n        cube([60, 40, 1.5], center = true);\n\n    // Outer walls – hollow shell\n    difference() {\n        cube([60, 40, 30], center = true);\n        translate([0, 0, 1.5])\n            cube([57.6, 37.6, 30], center = true);\n    }\n\n    // Gabled roof shell\n    difference() {\n        union() {\n            // Left slope\n            rotate([0, 0, -30])\n                translate([-15, 0, 15])\n                    cube([60, 40, 2], center = true);\n            // Right slope\n            rotate([0, 0, 30])\n                translate([15, 0, 15])\n                    cube([60, 40, 2], center = true);\n        }\n        translate([0, 0, 31])\n            cube([80, 50, 5], center = true); // hollow inside\n    }\n\n    // Ridge beam\n    translate([0, 0, 42])\n        cube([60, 1.2, 1.2], center = true);\n\n    // Entrance porch\n    translate([0, 21.5, 8])\n        cube([18, 4, 16], center = true);\n\n    // Porch roof\n    translate([0, 21.5 + 2 + 4, 16])\n        rotate([30, 0, 0])\n            cube([20, 10, 1.2], center = true);\n\n    // Doorway opening\n    translate([0, 21.5, 6])\n        cube([8, 4.5, 12], center = true);\n\n    // Rose window above door\n    translate([0, 21.2, 20])\n        cylinder(h = 1.2, r = 6, center = true);\n    translate([0, 21.2 - 1.5, 20])\n        cylinder(h = 1.5, r = 4, center = true);\n\n    // Side windows (four)\n    for (sign = [-1, 1])\n        for (dz = [8, 20])\n            translate([sign * 30.7, 0, dz])\n                cube([1.2, 6, 8], center = true);\n\n    // Buttresses (six total)\n    for (x = [-25, 0, 25])\n        for (side = [-1, 1])\n            translate([x, side * 21, 15])\n                cube([4, 2, 30], center = true);\n\n    // Cross on ridge\n    translate([0, 0, 45])\n        union() {\n            cube([1.2, 1.2, 8], center = true);\n            translate([0, 0, 4])\n                cube([5, 1.2, 1.2], center = true);\n        }\n}\n\nchapel();",
    "renders": true
  },
  {
    "building": "shrine",
    "openscad_code": "// Realistic shrine - torii-style gate and small altar\n// Size: ~70 mm wide x 60 mm deep x 60 mm tall\n\n// Main module\nmodule shrine() {\n    // Base platform\n    color(\"burlywood\") \n    translate([0,0,-2]) \n    cube([70,60,4], center=true);\n\n    // Torii gate\n    torii_gate();\n\n    // Offering altar in front\n    offering_altar();\n}\n\n// Torii gate module\nmodule torii_gate() {\n    // Left pillar\n    color(\"firebrick\")\n    translate([-28,0,0])\n    pillar();\n\n    // Right pillar\n    color(\"firebrick\")\n    translate([28,0,0])\n    pillar();\n\n    // Top lintel (kasagi)\n    color(\"firebrick\")\n    translate([0,0,55])\n    rotate([0,0,0])\n    cube([78,8,6], center=true);\n\n    // Second lintel (nuki)\n    color(\"firebrick\")\n    translate([0,-2,45])\n    cube([74,6,4], center=true);\n\n    // Support braces\n    color(\"firebrick\")\n    for(side=[-1,1]) {\n        translate([side*20,0,30])\n        rotate([0,side*30,0])\n        cube([20,4,3], center=true);\n    }\n}\n\n// Pillar module with slight taper\nmodule pillar() {\n    difference() {\n        // Main pillar body\n        union() {\n            // Bottom section\n            cylinder(h=50, r1=3.5, r2=3.2, center=false, $fn=16);\n            // Base cap\n            translate([0,0,-1])\n            cylinder(h=2, r1=4.5, r2=4.5, center=false, $fn=16);\n            // Top cap\n            translate([0,0,50])\n            cylinder(h=2, r1=3.2, r2=3.2, center=false, $fn=16);\n        }\n        \n        // Hollow center for 3D printing\n        translate([0,0,-2])\n        cylinder(h=54, r1=2.5, r2=2.2, center=false, $fn=16);\n    }\n}\n\n// Offering altar module\nmodule offering_altar() {\n    // Altar base\n    color(\"saddlebrown\")\n    translate([0,-20,2])\n    cube([25,20,6], center=true);\n    \n    // Altar top\n    color(\"saddlebrown\")\n    translate([0,-20,8.5])\n    cube([22,18,3], center=true);\n    \n    // Shimenawa rope (simplified)\n    color(\"ivory\")\n    for(x=[-8,0,8]) {\n        translate([x,-20,11])\n        rotate([90,0,0])\n        cylinder(h=20, r=0.8, center=true, $fn=8);\n    }\n    \n    // Paper shide zig-zag streamers\n    color(\"ivory\")\n    translate([0,-20,12])\n    union() {\n        for(i=[-1,1]) {\n            translate([i*5,0,0])\n            rotate([0,0,i*15])\n            cube([8,0.5,4], center=true);\n        }\n    }\n}\n\n// Generate the shrine\nshrine();",
    "renders": true
  },
  {
    "building": "pilgrimage",
    "openscad_code": "// Pilgrimage scene: small chapel with pilgrims, walking staff, water well, and terrain\n// Overall footprint ~80 mm × 60 mm × 45 mm high\n\n$fn = 32;\n\nmodule chapel() {\n    // Base slab\n    translate([0, 0, 1]) cube([30, 30, 2], center = true);\n\n    // Floor\n    translate([0, 0, 3]) cube([30, 30, 1], center = true);\n\n    // Walls (thin shells)\n    difference() {\n        translate([0, 0, 8]) cube([28, 28, 10], center = true);\n        translate([0, 0, 8]) cube([26, 26, 11], center = true);\n    }\n    // Doorway\n    difference() {\n        translate([0, -14, 8]) cube([6, 2, 8], center = true);\n        translate([0, -13.9, 8]) cube([4, 2.2, 7.8], center = true);\n    }\n\n    // Roof\n    translate([0, 0, 19]) rotate([90, 0, 0])\n        cylinder(h1 = 22, h2 = 0, r1 = 22, r2 = 0, center = true);\n    // Small cross on top\n    translate([0, 0, 30]) {\n        cube([1, 1, 6], center = true);\n        translate([0, 0, 3]) rotate([0, 90, 0])\n            cube([1, 1, 4], center = true);\n    }\n}\n\nmodule pilgrim() {\n    // Body\n    translate([0, 0, 7]) sphere(d = 6);\n    translate([0, 0, 3.5]) cylinder(h = 7, d1 = 4, d2 = 6);\n    // Hood\n    translate([0, 0, 9.5]) rotate([90, 0, 0])\n        cylinder(h1 = 4, h2 = 0, r1 = 3, r2 = 2, center = true);\n}\n\nmodule staff() {\n    // Wooden walking staff\n    cylinder(h = 30, d = 1.2);\n    // Ferrule\n    translate([0, 0, -1]) cylinder(h = 2, d = 1.8);\n}\n\nmodule well() {\n    // Well base\n    difference() {\n        cylinder(h = 8, d = 20);\n        translate([0, 0, 1]) cylinder(h = 10, d = 16);\n    }\n    // Rim\n    translate([0, 0, 8]) cylinder(h = 2, d = 22);\n    // Crank post\n    translate([9, 0, 10]) cube([2, 2, 6], center = true);\n    // Handle\n    translate([9, 0, 13]) rotate([90, 0, 0])\n        cylinder(h = 8, d = 0.8);\n}\n\nmodule terrain() {\n    // Uneven ground plate\n    difference() {\n        cube([80, 60, 5], center = true);\n        for (x = [-40:10:40], y = [-30:10:30])\n            translate([x + rand(), y + rand(), 2])\n                sphere(d = rand() * 4 + 2);\n    }\n}\n\nfunction rand() = rands(-1, 1, 1)[0];\n\nunion() {\n    // Ground\n    terrain();\n\n    // Chapel\n    translate([-20, 0, 2.5]) chapel();\n\n    // Well\n    translate([25, 0, 2.5]) well();\n\n    // Group of pilgrims\n    translate([-10, 15, 2.5]) pilgrim();\n    translate([-7, 18, 2.5]) pilgrim();\n    translate([-12, 18, 2.5]) pilgrim();\n\n    // Staff leaning against chapel\n    translate([-15, -10, 2.5]) rotate([80, 0, 15]) staff();\n    translate([-10, -12, 2.5]) rotate([85, 0, -10]) staff();\n}",
    "renders": true
  },
  {
    "building": "mission",
    "openscad_code": "// Mission San Juan Capistrano - Realistic Style, Medium Complexity\n// Dimensions: 85mm x 65mm x 25mm (3D printable without supports)\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main mission building module\nmodule mission_building() {\n    // Base platform\n    difference() {\n        cube([85, 65, 3], center=true);\n        translate([0, 0, -1])\n            cube([83, 63, 5], center=true);\n    }\n    \n    // Main chapel\n    translate([0, 0, 1.5])\n    difference() {\n        // Outer walls\n        cube([40, 50, 20]);\n        \n        // Interior hollow\n        translate([wall_thickness, wall_thickness, 0])\n            cube([40-wall_thickness*2, 50-wall_thickness*2, 20]);\n    }\n    \n    // Bell tower\n    translate([-25, 0, 1.5])\n    difference() {\n        // Tower base\n        cube([15, 15, 25]);\n        \n        // Tower hollow\n        translate([wall_thickness, wall_thickness, 0])\n            cube([15-wall_thickness*2, 15-wall_thickness*2, 25]);\n    }\n    \n    // Bell tower roof\n    translate([-17.5, 7.5, 26.5])\n    rotate([90, 0, 0])\n    cylinder(h=10, r1=12, r2=8, $fn=6);\n    \n    // Chapel roof\n    translate([20, 25, 21.5])\n    rotate([90, 0, 0])\n    cylinder(h=40, r1=25, r2=20, $fn=4);\n    \n    // Arches for chapel facade\n    for(i=[0:3]) {\n        translate([5 + i*10, 0, 1.5])\n        difference() {\n            cube([8, 2, 15]);\n            translate([4, -1, 2])\n                cylinder(h=4, r=3, $fn=20);\n        }\n    }\n    \n    // Windows on sides\n    for(i=[0:1]) {\n        translate([0, 10 + i*25, 10])\n        difference() {\n            cube([2, 6, 8]);\n            translate([1, 3, 4])\n                cylinder(h=3, r=2.5, $fn=20);\n        }\n        \n        translate([38, 10 + i*25, 10])\n        difference() {\n            cube([2, 6, 8]);\n            translate([1, 3, 4])\n                cylinder(h=3, r=2.5, $fn=20);\n        }\n    }\n    \n    // Mission bells in tower\n    translate([-25, 0, 15])\n    sphere(r=3);\n    \n    translate([-25, 0, 20])\n    sphere(r=2.5);\n}\n\n// Courtyard walls\nmodule courtyard() {\n    // Front wall\n    translate([0, 30, 1.5])\n    difference() {\n        cube([85, 3, 15]);\n        // Entry arch\n        translate([42.5, -1, 5])\n            cube([15, 5, 10]);\n    }\n    \n    // Side walls\n    translate([-40, 0, 1.5])\n    cube([3, 60, 15]);\n    \n    translate([40, 0, 1.5])\n    cube([3, 60, 15]);\n    \n    // Garden area\n    translate([0, -15, 1.5])\n    cube([70, 20, 1]);\n}\n\n// Cross on chapel\nmodule chapel_cross() {\n    translate([20, 25, 45])\n    union() {\n        cube([1, 1, 8]);\n        translate([0, -3.5, 3.5])\n            cube([1, 8, 1]);\n    }\n}\n\n// Render the complete mission\nunion() {\n    mission_building();\n    courtyard();\n    chapel_cross();\n}",
    "renders": true
  },
  {
    "building": "castle",
    "openscad_code": "// Castle - Realistic Style, Medium Complexity\n\n// Basic parameters\nbase_size = 60;\nwall_thickness = 2;\ntower_diameter = 12;\ntower_height = 35;\nmain_height = 20;\ncrenel_height = 3;\ncrenel_width = 4;\n\n// Main castle body\nmodule castle_body() {\n    difference() {\n        // Outer walls\n        cube([base_size, base_size, main_height], center=true);\n        \n        // Inner hollow space\n        translate([0, 0, wall_thickness])\n        cube([base_size - 2*wall_thickness, base_size - 2*wall_thickness, main_height - wall_thickness], center=true);\n        \n        // Gateway arch\n        translate([0, -base_size/2 + wall_thickness, 0])\n        rotate([90, 0, 0])\n        cylinder(h=base_size/2, d1=10, d2=10, center=true);\n    }\n    \n    // Battlements on top\n    for (i = [-1:1]) {\n        for (j = [-1:1]) {\n            if (abs(i) + abs(j) > 0) {\n                translate([i * (base_size/2 - wall_thickness), j * (base_size/2 - wall_thickness), main_height/2])\n                battlements();\n            }\n        }\n    }\n}\n\n// Battlements along wall tops\nmodule battlements() {\n    for (x = [-base_size/4:crenel_width:base_size/4]) {\n        translate([x, 0, 0])\n        cube([crenel_width/2, wall_thickness, crenel_height], center=true);\n    }\n}\n\n// Tower with conical roof\nmodule tower() {\n    // Main tower body\n    cylinder(h=tower_height, d=tower_diameter, center=false);\n    \n    // Tower top with battlements\n    translate([0, 0, tower_height])\n    difference() {\n        cylinder(h=crenel_height*2, d=tower_diameter + wall_thickness, center=false);\n        // Crenels\n        for (a = [0:45:359]) {\n            rotate([0, 0, a])\n            translate([tower_diameter/2 + wall_thickness, 0, 0])\n            cube([crenel_width, wall_thickness, crenel_height*2], center=true);\n        }\n    }\n    \n    // Conical roof\n    translate([0, 0, tower_height + crenel_height*2])\n    cylinder(h=tower_diameter/2, d1=0, d2=tower_diameter, center=false);\n    \n    // Small flag on top\n    translate([0, 0, tower_height + crenel_height*2 + tower_diameter/2])\n    cube([1, 0.5, 5], center=true);\n}\n\n// Drawbridge\nmodule drawbridge() {\n    translate([0, -base_size/2 - wall_thickness/2, -main_height/2 + wall_thickness])\n    rotate([90, 0, 0])\n    cube([15, wall_thickness, 10], center=true);\n}\n\n// Main castle assembly\nunion() {\n    // Castle body\n    translate([0, 0, main_height/2])\n    castle_body();\n    \n    // Corner towers\n    for (x = [-1:1:1]) {\n        for (y = [-1:1:1]) {\n            if (abs(x) + abs(y) == 2) {\n                translate([x * (base_size/2 - tower_diameter/2), y * (base_size/2 - tower_diameter/2), 0])\n                tower();\n            }\n        }\n    }\n    \n    // Central keep tower\n    translate([0, 0, 0])\n    scale([1.2, 1.2, 1])\n    tower();\n    \n    // Drawbridge\n    drawbridge();\n}",
    "renders": true
  },
  {
    "building": "fortress",
    "openscad_code": "// Realistic Fortress - Medium Complexity\n// 3D printable, no overhangs > 45 degrees\n\n$fn = 32; // Smooth curves\n\n// Main parameters\nwall_thickness = 2;\ntower_radius = 8;\nbase_size = 60;\nwall_height = 12;\ngate_width = 12;\ngate_height = 10;\n\n// Main fortress base\nmodule fortress_base() {\n    difference() {\n        // Main rectangular base\n        cube([base_size, base_size, wall_height], center=true);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cube([base_size - wall_thickness*2, base_size - wall_thickness*2, wall_height + 2], center=true);\n    }\n}\n\n// Crenellations for battlements\nmodule crenellations(width, depth) {\n    crenel_width = 3;\n    crenel_gap = 2;\n    crenel_height = 3;\n    \n    for(x = [-width/2 + crenel_width : crenel_width + crenel_gap : width/2 - crenel_width]) {\n        translate([x, depth/2, wall_height/2 + crenel_height/2])\n            cube([crenel_width, wall_thickness, crenel_height], center=true);\n    }\n}\n\n// Round tower with conical roof\nmodule tower() {\n    // Tower base\n    cylinder(h=wall_height*1.5, r=tower_radius, center=true);\n    \n    // Conical roof\n    translate([0, 0, wall_height*1.5/2 + wall_height/2])\n        cylinder(h=wall_height/1.5, r1=tower_radius, r2=0, center=true);\n    \n    // Arrow slit windows\n    for(angle = [0 : 90 : 270]) {\n        rotate([0, 0, angle])\n            translate([tower_radius - wall_thickness/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=wall_thickness*2, r=1, center=true);\n    }\n}\n\n// Gatehouse with portcullis\nmodule gatehouse() {\n    // Main gate structure\n    difference() {\n        cube([gate_width + wall_thickness*4, wall_thickness*3, gate_height + wall_thickness*2], center=true);\n        // Gate opening\n        translate([0, 0, -wall_thickness/2])\n            cube([gate_width, wall_thickness + 1, gate_height], center=true);\n    }\n    \n    // Battlements on top\n    translate([0, 0, gate_height/2 + wall_thickness + 1.5])\n        crenellations(gate_width + wall_thickness*4, wall_thickness*3);\n}\n\n// Main assembly\nunion() {\n    // Base platform with slight elevation\n    translate([0, 0, -wall_height/2 - 2])\n        cube([base_size + 10, base_size + 10, 4], center=true);\n    \n    // Main fortress walls\n    fortress_base();\n    \n    // Add crenellations to all four walls\n    translate([0, 0, 0]) {\n        crenellations(base_size, base_size);\n        rotate([0, 0, 90]) translate([base_size/2, base_size/2, 0]) crenellations(base_size, base_size);\n        rotate([0, 0, 180]) translate([0, 0, 0]) crenellations(base_size, base_size);\n        rotate([0, 0, 270]) translate([base_size/2, base_size/2, 0]) crenellations(base_size, base_size);\n    }\n    \n    // Four corner towers\n    for(x = [-base_size/2 + tower_radius : base_size - tower_radius*2 : base_size - tower_radius*2])\n        for(y = [-base_size/2 + tower_radius : base_size - tower_radius*2 : base_size - tower_radius*2])\n            translate([x, y, 0])\n                tower();\n    \n    // Gatehouse on front wall\n    translate([0, base_size/2 - wall_thickness/2, wall_height/2 - gate_height/2])\n        gatehouse();\n}",
    "renders": true
  },
  {
    "building": "arsenal",
    "openscad_code": "// Arsenal / Armory building with storage bays and defensive features\n// Designed for 3D printing - no overhangs, 1.2mm walls (3 perimeters at 0.4mm)\n\n// Overall dimensions: 80mm x 60mm x 45mm\n\nmodule main_building() {\n    // Base foundation\n    difference() {\n        cube([70, 50, 5], center=true);\n        translate([0, 0, -0.1])\n            cube([66, 46, 5.2], center=true);\n    }\n    \n    // Main structure\n    difference() {\n        translate([0, 0, 15])\n            cube([60, 40, 30], center=true);\n        \n        // Doorway\n        translate([0, -19.9, 10])\n            cube([12, 5, 20], center=true);\n        \n        // Windows - front\n        for(x = [-20, -10, 10, 20])\n            translate([x, -19.9, 20])\n                cube([6, 2, 8], center=true);\n        \n        // Windows - back\n        for(x = [-20, -10, 10, 20])\n            translate([x, 19.9, 20])\n                cube([6, 2, 8], center=true);\n    }\n    \n    // Roof with slight overhang\n    translate([0, 0, 32.5])\n        cube([64, 44, 5], center=true);\n}\n\nmodule storage_bays() {\n    // Left storage bay\n    translate([-35, 0, 2.5])\n        cube([10, 30, 5], center=true);\n    \n    // Right storage bay\n    translate([35, 0, 2.5])\n        cube([10, 30, 5], center=true);\n    \n    // Bay doors\n    for(y = [-10, 0, 10]) {\n        translate([-35, y, 5.1])\n            cube([8, 8, 0.8], center=true);\n        translate([35, y, 5.1])\n            cube([8, 8, 0.8], center=true);\n    }\n}\n\nmodule defensive_tower() {\n    // Base\n    cylinder(h=6, r=8, center=true, $fn=16);\n    \n    // Tower body\n    translate([0, 0, 10])\n        difference() {\n            cylinder(h=20, r=7, center=true, $fn=16);\n            \n            // Crenellations\n            for(i = [0:7]) {\n                rotate([0, 0, i*45+22.5])\n                    translate([7, 0, 10])\n                        cube([2, 2, 8], center=true);\n            }\n        }\n    \n    // Conical roof\n    translate([0, 0, 25])\n        cylinder(h1=10, h2=0, r1=10, r2=0, center=true, $fn=16);\n}\n\nmodule flag_pole() {\n    translate([0, 0, 35])\n        cylinder(h=15, r=0.5, center=true);\n    \n    translate([3, 0, 42.5])\n        cube([6, 0.5, 3], center=true);\n}\n\n// Assemble the arsenal\nunion() {\n    main_building();\n    storage_bays();\n    \n    // Front defensive towers\n    translate([-25, -25, 3])\n        defensive_tower();\n    translate([25, -25, 3])\n        defensive_tower();\n    \n    // Flag on roof\n    flag_pole();\n}",
    "renders": true
  },
  {
    "building": "dockyard",
    "openscad_code": "// Realistic Dockyard\n// Medium complexity (~120 lines), 3D-printable, 80 mm long\n\n// Global parameters\nbase_len = 80; base_wid = 40; base_thk = 3;\nwater_level = 4;\n\n// Main dockyard model\nmodule dockyard() {\n    difference() {\n        union() {\n            dock_base();\n            quay_wall();\n            cargo_crane();\n            containers();\n            bollards();\n            warehouse();\n        }\n        // Remove underside to save material\n        translate([0,0,-5]) cube([base_len+2, base_wid+2, 5], center=true);\n    }\n}\n\n// Concrete dock platform with textured top\nmodule dock_base() {\n    difference() {\n        // Main slab\n        translate([0,0,base_thk/2])\n            cube([base_len, base_wid, base_thk], center=true);\n        // Drainage grooves\n        for(x=[-30:10:30])\n            translate([x,0,base_thk-0.5])\n                cube([1, base_wid-4, 1], center=true);\n    }\n}\n\n// Quay wall facing water\nmodule quay_wall() {\n    translate([base_len/2-3, 0, (water_level+base_thk)/2])\n        cube([6, base_wid, water_level+base_thk], center=true);\n}\n\n// Gantry-style cargo crane\nmodule cargo_crane() {\n    translate([-base_len/4, 0, water_level+base_thk]) {\n        // Legs\n        for(y=[-15,15])\n            translate([0,y,0])\n                cylinder(h=25, d=3, $fn=8);\n        // Bridge beam\n        translate([0,0,25])\n            rotate([0,90,0])\n                cylinder(h=30, d=2, $fn=8);\n        // Hoist block\n        translate([0,0,20])\n            cube([4,4,6], center=true);\n    }\n}\n\n// Shipping containers\nmodule containers() {\n    color(\"darkgreen\")\n    for(i=[-1,0,1])\n        translate([base_len/4, i*10+5, water_level+base_thk+2])\n            container();\n}\n\nmodule container() {\n    difference() {\n        cube([12,6,5]);\n        // Door corrugations\n        for(y=[-2:1:2])\n            translate([5.9, y, 2.5])\n                cube([0.2,0.5,4]);\n    }\n}\n\n// Mooring bollards\nmodule bollards() {\n    for(pos=[[-25,-15], [-25,15], [25,-15], [25,15]]) {\n        translate([pos[0], pos[1], base_thk])\n            cylinder(h=5, d=4, $fn=20);\n        translate([pos[0], pos[1], base_thk+4.5])\n            sphere(d=5, $fn=20);\n    }\n}\n\n// Small warehouse building\nmodule warehouse() {\n    translate([-base_len/2+10, 0, base_thk]) {\n        // Main structure\n        cube([15, 20, 12]);\n        // Roof\n        translate([0,0,12])\n            rotate([0,90,0])\n                cylinder(h=20, d=15, $fn=4);\n        // Door\n        translate([7.6,0,2])\n            cube([0.5, 4, 6], center=true);\n    }\n}\n\n// Assembly\ndockyard();",
    "renders": true
  },
  {
    "building": "shipyard",
    "openscad_code": "// Shipyard with drydock, gantry crane, storage tanks, and warehouse\n// Scale: 1:2000, base footprint ~50x80mm, printable without supports\n\n$fn = 32;  // Smooth curves for cylinders\n\n// Overall dimensions\nbase_w = 80;\nbase_d = 50;\nbase_h = 2;\n\n// Drydock\ndock_w = 60;\ndock_d = 20;\ndock_h = 12;\n\n// Gantry crane\ncrane_w = 70;\ncrane_d = 10;\ncrane_h = 25;\ncrane_leg = 3;\n\n// Storage tanks\ntank_r = 4;\ntank_h = 12;\ntank_spacing = 12;\n\n// Warehouse\nwh_w = 20;\nwh_d = 15;\nwh_h = 10;\n\n// Helper module for rounded edges\nmodule rounded_box(x, y, z, r) {\n    translate([r, r, 0]) {\n        difference() {\n            cube([x-2*r, y-2*r, z]);\n            translate([-r, -r, -1]) cube([x, y, z+2]);\n            translate([x-r, -r, -1]) cube([x, y, z+2]);\n            translate([-r, y-r, -1]) cube([x, y, z+2]);\n            translate([x-r, y-r, -1]) cube([x, y, z+2]);\n        }\n    }\n    translate([r, r, 0]) cylinder(r=r, h=z);\n    translate([x-r, r, 0]) cylinder(r=r, h=z);\n    translate([r, y-r, 0]) cylinder(r=r, h=z);\n    translate([x-r, y-r, 0]) cylinder(r=r, h=z);\n}\n\n// Base platform\nmodule base() {\n    color(\"lightgray\") rounded_box(base_w, base_d, base_h, 2);\n}\n\n// Drydock basin\nmodule drydock() {\n    translate([10, (base_d-dock_d)/2, base_h]) {\n        difference() {\n            // Outer walls\n            color(\"darkgray\") rounded_box(dock_w, dock_d, dock_h, 1);\n            // Inner cavity\n            translate([2, 2, 0]) cube([dock_w-4, dock_d-4, dock_h+1]);\n            // Ramp at entrance\n            translate([dock_w-8, 0, -0.5]) \n                cube([8, dock_d, dock_h/2]);\n        }\n    }\n}\n\n// Gantry crane\nmodule crane() {\n    translate([(base_w-crane_w)/2, (base_d-crane_d)/2, base_h+dock_h]) {\n        // Left leg\n        color(\"darkblue\") translate([0, 0, 0]) \n            cube([crane_leg, crane_d, crane_h]);\n        // Right leg\n        color(\"darkblue\") translate([crane_w-crane_leg, 0, 0]) \n            cube([crane_leg, crane_d, crane_h]);\n        // Top beam\n        color(\"darkblue\") translate([0, 0, crane_h-2]) \n            cube([crane_w, crane_d, 2]);\n        // Trolley\n        color(\"gray\") translate([crane_w/2-1.5, 1, crane_h-3]) \n            cube([3, crane_d-2, 1]);\n        // Hook\n        color(\"black\") translate([crane_w/2-0.5, crane_d/2-0.5, crane_h-5]) \n            cube([1, 1, 3]);\n    }\n}\n\n// Storage tanks\nmodule tanks() {\n    for(i = [0:2]) {\n        color(\"silver\") translate([\n            65 + (i * tank_spacing), \n            10, \n            base_h\n        ]) cylinder(r=tank_r, h=tank_h);\n        \n        // Tank supports\n        color(\"darkgray\") translate([\n            65 + (i * tank_spacing) - tank_r, \n            10 - 1, \n            base_h\n        ]) cube([tank_r*2, 2, 1]);\n        \n        color(\"darkgray\") translate([\n            65 + (i * tank_spacing) - tank_r, \n            10 + tank_r*2 - 1, \n            base_h\n        ]) cube([tank_r*2, 2, 1]);\n    }\n}\n\n// Warehouse\nmodule warehouse() {\n    translate([5, base_d-wh_d-5, base_h]) {\n        // Main building\n        color(\"tan\") rounded_box(wh_w, wh_d, wh_h, 1);\n        \n        // Roof\n        color(\"brown\") translate([-1, -1, wh_h]) \n            cube([wh_w+2, wh_d+2, 1]);\n        \n        // Roll-up door\n        color(\"darkgray\") translate([wh_w/2-3, 0, base_h+1]) \n            cube([6, 0.5, 6]);\n    }\n}\n\n// Assemble shipyard\nunion() {\n    base();\n    drydock();\n    crane();\n    tanks();\n    warehouse();\n}",
    "renders": true
  },
  {
    "building": "terminus",
    "openscad_code": "// Realistic Train Terminus (Medium Complexity)\n// Dimensions: 80mm x 40mm x 35mm\n\n$fn = 32;\n\nmodule building_base() {\n    // Main rectangular building structure\n    difference() {\n        // Base block\n        translate([0, 0, 15]) cube([75, 35, 20], center=true);\n        \n        // Doorway arch\n        translate([-25, 0, 5]) cube([10, 25, 25], center=true);\n        \n        // Windows on front\n        for(x = [-15, -5, 5, 15]) {\n            translate([x, 15, 15]) cube([6, 2, 8], center=true);\n        }\n        \n        // Windows on back\n        for(x = [-15, -5, 5, 15]) {\n            translate([x, -15, 15]) cube([6, 2, 8], center=true);\n        }\n    }\n}\n\nmodule clock_tower() {\n    // Central clock tower\n    translate([0, 0, 35]) {\n        // Tower base\n        cylinder(h=15, r=10);\n        \n        // Clock face\n        translate([0, 0, 12.5]) {\n            rotate([90, 0, 0]) cylinder(h=0.5, r=8);\n            // Clock hands\n            translate([0, 0, 0.3]) rotate([0, 0, 45]) cube([1, 5, 0.5], center=true);\n            translate([0, 0, 0.6]) rotate([0, 0, -30]) cube([1, 4, 0.5], center=true);\n        }\n        \n        // Tower roof\n        translate([0, 0, 15]) cylinder(h=10, r1=12, r2=6);\n    }\n}\n\nmodule platform_canopy() {\n    // Platform covering\n    translate([0, 0, 22]) {\n        // Roof structure\n        cube([85, 45, 1], center=true);\n        \n        // Support pillars\n        for(x = [-30, -10, 10, 30]) {\n            for(y = [-20, 20]) {\n                translate([x, y, -10.5]) cylinder(h=10, r=1.5);\n            }\n        }\n    }\n}\n\nmodule sign_board() {\n    // Station sign\n    translate([0, 20, 30]) {\n        cube([30, 2, 8], center=true);\n        \n        // Sign supports\n        translate([-12, 0, -11]) cylinder(h=11, r=1);\n        translate([12, 0, -11]) cylinder(h=11, r=1);\n    }\n}\n\nmodule benches() {\n    // Platform benches\n    for(x = [-25, -10, 5, 20]) {\n        translate([x, 0, 1]) {\n            // Bench seat\n            cube([8, 3, 0.5], center=true);\n            \n            // Bench legs\n            translate([-3, 0, -1.5]) cube([0.5, 3, 2]);\n            translate([3, 0, -1.5]) cube([0.5, 3, 2]);\n        }\n    }\n}\n\nmodule track_base() {\n    // Platform and track area\n    translate([0, -30, 0]) {\n        // Platform\n        cube([85, 10, 2], center=true);\n        \n        // Track area\n        translate([0, -5, 0]) cube([85, 10, 0.5], center=true);\n        \n        // Track rails\n        for(x = [-40, -20, 0, 20, 40]) {\n            translate([x, -5, 0.5]) cube([1, 10, 0.5], center=true);\n        }\n    }\n}\n\n// Assemble the terminus\nunion() {\n    // Base platform and tracks\n    track_base();\n    \n    // Main building\n    building_base();\n    \n    // Clock tower\n    clock_tower();\n    \n    // Platform canopy\n    platform_canopy();\n    \n    // Station sign\n    sign_board();\n    \n    // Platform benches\n    benches();\n}",
    "renders": true
  },
  {
    "building": "junction",
    "openscad_code": "// Realistic 4-way pipe junction (medium complexity)\n// 4× 1\" pipe connections, 76 mm across flats\n\n$fn = 36;                // global circle resolution\nwall = 2.2;              // printable wall thickness\ndia = 25.4;              // 1\" inner diameter\nhex = 1.5*dia;           // across flats\nheight = 25;             // main body height\nflare = 3;               // nut flare height\nnut = 7;                 // nut width\nbolt_r = 3.5/2;          // M3.5 bolt\nbolt_h = 8;              // bolt head height\ncham = 1.5;              // edge chamfer\n\nmodule hex_prism(h, a){\n    linear_extrude(height=h, center=true)\n        circle(r=a/sqrt(3), $fn=6);\n}\n\nmodule pipe_stub(len, flare_len=0){\n    union(){\n        // main tube\n        difference(){\n            cylinder(h=len, r=dia/2+wall);\n            cylinder(h=len+0.1, r=dia/2);\n        }\n        // flare nut\n        if(flare_len>0){\n            translate([0,0,len/2+flare_len/2])\n                difference(){\n                    hex_prism(flare_len, hex);\n                    cylinder(h=flare_len+0.1, r=dia/2);\n                }\n        }\n    }\n}\n\nmodule bolt_holes(){\n    for(i=[0:60:359]){\n        rotate([0,0,i])\n            translate([hex/2,0,0])\n                rotate([90,0,0])\n                    cylinder(h=hex, r=bolt_r);\n    }\n}\n\nmodule chamfer_edges(){\n    // top chamfer\n    difference(){\n        children();\n        translate([0,0,height/2])\n            cylinder(h=cham*2, r1=hex/2+wall, r2=hex/2+wall-cham, center=true);\n    }\n    // bottom chamfer\n    difference(){\n        children();\n        translate([0,0,-height/2])\n            cylinder(h=cham*2, r1=hex/2+wall-cham, r2=hex/2+wall, center=true);\n    }\n}\n\n// main body\ndifference(){\n    chamfer_edges()\n        hex_prism(height, hex+2*wall);\n    // central bore\n    sphere(d=dia);\n    // 4 pipe openings\n    for(a=[0,90,180,270])\n        rotate([0,0,a])\n            translate([hex/2+wall,0,0])\n                rotate([0,90,0])\n                    cylinder(h=hex+2*wall, r=dia/2);\n    // bolt holes\n    bolt_holes();\n}\n\n// 4 pipe stubs\nfor(a=[0,90,180,270])\n    rotate([0,0,a])\n        translate([hex/2+wall,0,0])\n            rotate([0,90,0])\n                pipe_stub(15, flare);\n\n// bolt heads\nfor(i=[0:60:359]){\n    rotate([0,0,i])\n        translate([hex/2,0,bolt_h/2])\n            rotate([90,0,0])\n                cylinder(h=bolt_h, r=bolt_r*1.8, $fn=6);\n}",
    "renders": true
  },
  {
    "building": "lighthouse",
    "openscad_code": "// Lighthouse - Realistic Medium Complexity\n// Designed for 3D printing (no overhangs >45°)\n\n// Parameters\ntower_base = 30;\ntower_top = 20;\ntower_height = 70;\nwall_thickness = 2;\nlamp_diameter = 22;\nlamp_height = 12;\ngallery_width = 3;\nrailing_height = 3;\nrailing_spacing = 4;\nbase_height = 8;\nbase_radius = 18;\ndoor_height = 25;\ndoor_width = 8;\nwindow_size = 5;\nwindow_rows = 3;\nwindow_cols = 4;\n\n// Main module\nmodule lighthouse() {\n    union() {\n        // Base foundation\n        translate([0, 0, base_height/2])\n            cylinder(h=base_height, r1=base_radius, r2=base_radius, $fn=64);\n        \n        // Tower body with taper\n        translate([0, 0, base_height + tower_height/2])\n            cylinder(h=tower_height, r1=tower_base/2, r2=tower_top/2, $fn=64);\n        \n        // Gallery deck\n        translate([0, 0, base_height + tower_height])\n            cylinder(h=2, r1=tower_top/2 + gallery_width, r2=tower_top/2 + gallery_width, $fn=64);\n        \n        // Railing posts\n        for(i=[0:3:360]) {\n            rotate([0, 0, i])\n                translate([tower_top/2 + gallery_width - 1, 0, base_height + tower_height + railing_height/2])\n                    cube([2, 2, railing_height], center=true);\n        }\n        \n        // Lamp housing\n        translate([0, 0, base_height + tower_height + railing_height + 2])\n            cylinder(h=lamp_height, r=lamp_diameter/2, $fn=32);\n        \n        // Lamp roof (conical)\n        translate([0, 0, base_height + tower_height + railing_height + 2 + lamp_height])\n            cylinder(h=8, r1=lamp_diameter/2, r2=0, $fn=32);\n        \n        // Door\n        translate([tower_base/2 - wall_thickness, 0, base_height + door_height/2])\n            cube([wall_thickness, door_width, door_height], center=true);\n        \n        // Windows\n        for(row=[1:window_rows]) {\n            for(col=[0:window_cols-1]) {\n                rotate([0, 0, col * 360/window_cols])\n                    translate([tower_base/2 - wall_thickness, 0, \n                              base_height + tower_height * row/(window_rows + 1)])\n                        cube([wall_thickness, window_size, window_size], center=true);\n            }\n        }\n        \n        // Interior hollow\n        difference() {\n            translate([0, 0, base_height + tower_height/2])\n                cylinder(h=tower_height, r1=(tower_base-wall_thickness*2)/2, \n                        r2=(tower_top-wall_thickness*2)/2, $fn=64);\n        }\n        \n        // Spiral stairs (as ridges)\n        for(i=[0:30:360]) {\n            rotate([0, 0, i])\n                translate([0, (tower_base-wall_thickness)/2 - 2, \n                          base_height + tower_height * (i/360)])\n                    cube([4, 4, 3], center=true);\n        }\n    }\n}\n\n// Render the lighthouse\nlighthouse();",
    "renders": true
  },
  {
    "building": "beacon",
    "openscad_code": "// Coastal Beacon Tower - Realistic Medium Complexity\n// Overall height ~85 mm, base diameter ~40 mm. 3D-printable.\n\n$fn = 48;            // Smooth curves\nwall = 1.6;          // Standard nozzle-friendly wall thickness\n\n// Main assembly ----------------------------------------------------\nunion() {\n    beacon_base();\n    translate([0,0,4]) beacon_tower();\n    translate([0,0,58]) beacon_lantern();\n    translate([0,0,75]) beacon_roof();\n}\n\n// Octagonal concrete base -----------------------------------------\nmodule beacon_base() {\n    cylinder(h = 4, d = 40, center = true);         // Footing slab\n    translate([0,0,2])                              // Raised octagon\n        cylinder(h = 2, d1 = 38, d2 = 36, center = true);\n}\n\n// Cylindrical stone/brick tower -----------------------------------\nmodule beacon_tower() {\n    difference() {\n        union() {\n            // Main shaft\n            cylinder(h = 54, d = 30, center = true);\n\n            // Horizontal reinforcing rings every 12 mm\n            for(z = [6:12:48])\n                translate([0,0,z])\n                    cylinder(h = 2, d = 32, center = true);\n        }\n\n        // Hollow interior\n        translate([0,0,27])\n            cylinder(h = 60, d = 30 - 2*wall, center = true);\n\n        // Door opening at front\n        translate([0, 15, 6])\n            rotate([90,0,0])\n            cube([8, 12, wall + 0.1], center = true);\n    }\n\n    // Small window apertures (four sides)\n    for(a = [0:90:270])\n        rotate([0,0,a])\n        translate([0, 15, 40])\n        rotate([90,0,0])\n        difference() {\n            cube([6, 8, wall + 0.1], center = true);\n            translate([0,0,wall/2])\n                sphere(d = 6.5, center = true); // Rounded top\n        }\n}\n\n// Lantern house with Fresnel lens look -----------------------------\nmodule beacon_lantern() {\n    difference() {\n        cylinder(h = 12, d = 28, center = true);        // Housing\n\n        // Inner cavity\n        translate([0,0,0])\n            cylinder(h = 12 + 0.2, d = 28 - 2*wall, center = true);\n\n        // Top/bottom openings for light\n        translate([0,0, 6])\n            cylinder(h = 2, d = 28 - 2*wall, center = true);\n        translate([0,0,-6])\n            cylinder(h = 2, d = 28 - 2*wall, center = true);\n    }\n\n    // Diagonal mullions\n    for(a = [45:90:315])\n        rotate([0,0,a])\n        translate([0, 0, 0])\n        cube([1.5, 28/2 - wall, 12], center = true);\n\n    // Central light source placeholder (solid cylinder)\n    color(\"yellow\")\n    translate([0,0,0])\n    cylinder(h = 10, d = 8, center = true);\n}\n\n// Conical roof with vent cap ---------------------------------------\nmodule beacon_roof() {\n    difference() {\n        // Roof cone\n        cylinder(h = 8, d1 = 30, d2 = 22, center = true);\n\n        // Drainage gutter under edge\n        translate([0,0,-4])\n            cylinder(h = 2, d = 31, center = true);\n        translate([0,0,-4])\n            cylinder(h = 2.2, d = 28, center = true);\n    }\n\n    // Ventilation ball on top\n    translate([0,0,6])\n        sphere(d = 6);\n\n    // Lightning rod\n    translate([0,0,9])\n        cylinder(h = 8, d = 1.5);\n}",
    "renders": true
  },
  {
    "building": "granary",
    "openscad_code": "// Realistic medium-complexity granary\n// Overall print volume ~70 mm tall, 60 mm wide\n\nwall_t = 2;            // wall thickness for 3D printing\nbase_h = 6;            // foundation height\nbody_h = 40;           // cylindrical storage height\nroof_h = 15;           // conical roof height\ndia_outer = 50;        // outer diameter\ndia_inner = dia_outer - 2*wall_t;\n\nmodule foundation() {\n    difference() {\n        cylinder(h = base_h, d = dia_outer + 8, $fn = 60);\n        translate([0,0,-0.1])\n            cylinder(h = base_h + 0.2, d = dia_outer + 8 - 2*wall_t, $fn = 60);\n    }\n}\n\nmodule cylindrical_wall() {\n    difference() {\n        cylinder(h = body_h, d = dia_outer, $fn = 60);\n        translate([0,0,wall_t])\n            cylinder(h = body_h + 0.2, d = dia_inner, $fn = 60);\n    }\n}\n\nmodule doorway() {\n    door_w = 12;\n    door_h = 18;\n    translate([dia_outer/2 - wall_t, -door_w/2, 0])\n        cube([wall_t + 0.2, door_w, door_h]);\n}\n\nmodule conical_roof() {\n    difference() {\n        cylinder(h1 = roof_h, h2 = 0, r1 = dia_outer/2 + 6, r2 = 0, $fn = 60);\n        translate([0,0,wall_t])\n            cylinder(h1 = roof_h - wall_t, h2 = 0, \n                     r1 = dia_outer/2 + 6 - wall_t, r2 = 0, $fn = 60);\n    }\n}\n\nmodule roof_ring() {\n    // decorative ring at roof base\n    translate([0,0,body_h])\n        difference() {\n            cylinder(h = 3, d = dia_outer + 6, $fn = 60);\n            cylinder(h = 3.2, d = dia_outer + 6 - 2*wall_t, $fn = 60);\n        }\n}\n\nmodule tiny_window() {\n    win_w = 8;\n    win_h = 6;\n    translate([dia_outer/2 - wall_t, -win_w/2, body_h/2])\n        cube([wall_t + 0.2, win_w, win_h]);\n}\n\nmodule vent_holes() {\n    // small circles around upper wall for ventilation\n    for(i = [0:11]) {\n        rotate([0,0,i*30])\n            translate([dia_outer/2 - wall_t, 0, body_h - 5])\n                rotate([0,90,0])\n                    cylinder(h = wall_t + 0.2, d = 3, $fn = 20);\n    }\n}\n\nmodule ladder() {\n    // simple ladder leaning on wall\n    ladder_w = 6;\n    ladder_h = 30;\n    thickness = 1.5;\n    translate([dia_outer/2 + 3, -ladder_w/2, base_h]) {\n        // left rail\n        cube([thickness, ladder_w/4, ladder_h]);\n        // right rail\n        translate([ladder_w - thickness, 0, 0])\n            cube([thickness, ladder_w/4, ladder_h]);\n        // rungs\n        for(i = [1:4:ladder_h/2]) {\n            translate([0, 0, i])\n                cube([ladder_w, ladder_w/4, thickness]);\n        }\n    }\n}\n\n// assembly\ntranslate([0,0,0]) {\n    foundation();\n    translate([0,0,base_h]) {\n        cylindrical_wall();\n        doorway();\n        tiny_window();\n        vent_holes();\n    }\n    translate([0,0,base_h + body_h]) {\n        roof_ring();\n        conical_roof();\n    }\n    ladder();\n}",
    "renders": true
  },
  {
    "building": "stable",
    "openscad_code": "// Realistic 3D printable stable – medium complexity\n// All dimensions in millimetres, ready for FDM printing\n\n// overall scaling factor; final length ≈ 80 mm\nscale_factor = 0.35;\n\nmodule stable() {\n    // ---------- main building ----------\n    difference() {\n        // outer shell\n        cube([60, 40, 35], center = false);\n        // doorway\n        translate([1, 15, 0])\n            cube([8, 10, 20], center = false);\n    }\n\n    // ---------- roof ----------\n    translate([30, 20, 35])\n        rotate([0, 0, 45])\n        scale([1.2, 1, 1])\n        cube([70, 60, 2], center = true);\n\n    // ridge beam\n    translate([30, 20, 42])\n        rotate([0, 0, 45])\n        scale([1.2, 1, 1])\n        cube([70, 6, 6], center = true);\n\n    // ---------- side walls ----------\n    // left wall\n    translate([0, 0, 0])\n        cube([2, 40, 35], center = false);\n\n    // right wall\n    translate([58, 0, 0])\n        cube([2, 40, 35], center = false);\n\n    // back wall\n    translate([0, 0, 0])\n        cube([60, 2, 35], center = false);\n\n    // ---------- window on right wall ----------\n    translate([59, 30, 20])\n        difference() {\n            cube([1, 10, 10], center = false);\n            translate([0, 2, 2])\n                cube([1, 6, 6], center = false);\n        }\n\n    // ---------- hay loft door ----------\n    translate([30, 39, 25])\n        cube([15, 1, 10], center = false);\n\n    // ---------- posts & beams ----------\n    // front posts\n    for(x = [5, 55])\n        translate([x, 38, 0])\n            cylinder(h = 35, d = 3, $fn = 12);\n\n    // lintel beam\n    translate([30, 39, 32])\n        rotate([90, 0, 0])\n        cylinder(h = 50, d = 3, $fn = 12);\n\n    // ---------- stall dividers inside ----------\n    for(i = [1:2])\n        translate([i * 20, 2, 0])\n            cube([2, 36, 25], center = false);\n\n    // ---------- feeding trough ----------\n    translate([10, 3, 5])\n        difference() {\n            cube([40, 8, 4], center = false);\n            translate([2, 2, 2])\n                cube([36, 4, 2], center = false);\n        }\n\n    // ---------- miniature water bucket ----------\n    translate([50, 5, 1])\n        cylinder(h = 4, d = 6, $fn = 20);\n}\n\n// apply global scale\nscale([scale_factor, scale_factor, scale_factor])\n    stable();",
    "renders": true
  },
  {
    "building": "kennel",
    "openscad_code": "// Dog kennel - medium complexity realistic style\n// External dimensions: 75 x 60 x 55 mm, wall thickness 3 mm\n\nmodule wall_block(w, d, h) {\n    difference() {\n        cube([w, d, h]);\n        translate([3, 3, 3]) cube([w-6, d-6, h-3]);\n    }\n}\n\nmodule timber_plank(w, d, h) {\n    difference() {\n        cube([w, d, h]);\n        for(i = [1: w/10 - 1])\n            translate([i*10, 0, h/2]) \n                rotate([0, 90, 0])\n                    cylinder(h=d, d=2, $fn=8);\n    }\n}\n\nmodule roof_tile(w, d) {\n    translate([0, d/2, 0])\n    rotate([0, 90, 0])\n    scale([1, 1, 0.2])\n    cylinder(h=w, d=d, $fn=3);\n}\n\nmodule kennel_base() {\n    difference() {\n        wall_block(75, 60, 10);\n        translate([20, 3, 0]) cube([35, 54, 10]);\n    }\n}\n\nmodule kennel_walls() {\n    // back wall\n    translate([0, 0, 10]) wall_block(75, 60, 45);\n    \n    // left wall\n    translate([0, 0, 10]) wall_block(3, 60, 45);\n    \n    // right wall  \n    translate([72, 0, 10]) wall_block(3, 60, 45);\n    \n    // front pillars\n    translate([10, 0, 10]) wall_block(7, 60, 35);\n    translate([58, 0, 10]) wall_block(7, 60, 35);\n    \n    // door arch\n    difference() {\n        translate([20, 0, 10]) wall_block(35, 60, 35);\n        translate([25, -1, 10]) cylinder(h=62, d=25, $fn=32);\n    }\n}\n\nmodule kennel_roof() {\n    // support beams\n    translate([3, 3, 55]) timber_plank(69, 5, 3);\n    translate([3, 52, 55]) timber_plank(69, 5, 3);\n    \n    // roof panels\n    for(y = [0:10:50]) {\n        translate([0, y, 58]) timber_plank(75, 10, 2);\n    }\n    \n    // ridge cap\n    translate([37.5, 30, 70]) rotate([90, 0, 0]) \n        cylinder(h=60, d=5, $fn=8);\n    \n    // shingles\n    for(i = [0:5]) {\n        for(j = [0:3]) {\n            translate([i*12+6, j*15+7.5, 60 + i*2]) \n                roof_tile(12, 15);\n        }\n    }\n}\n\nmodule kennel_details() {\n    // name plate\n    translate([50, 30, 25]) cube([20, 2, 8]);\n    \n    // ventilation holes\n    for(z = [20:10:40]) {\n        translate([77, 15, z]) rotate([0, 90, 0]) \n            cylinder(h=3, d=5, $fn=16);\n        translate([77, 45, z]) rotate([0, 90, 0]) \n            cylinder(h=3, d=5, $fn=16);\n    }\n}\n\nunion() {\n    kennel_base();\n    kennel_walls();\n    kennel_roof();\n    kennel_details();\n}",
    "renders": true
  },
  {
    "building": "zoo",
    "openscad_code": "// Zoo layout\n// 100x80mm base with multiple enclosures and buildings\n\nwall_thickness = 2;\nground_height = 2;\n\nmodule zoo_base() {\n    // Main base platform\n    difference() {\n        cube([100, 80, ground_height], center=false);\n        \n        // Carve out moat for elephant enclosure\n        translate([70, 20, -1]) {\n            cube([25, 40, ground_height + 2], center=false);\n        }\n    }\n}\n\nmodule fence(x, y, width, height, rails=3) {\n    // Vertical posts\n    for(px = [0:10:width-5]) {\n        translate([x + px, y, ground_height]) {\n            cube([2, 2, height]);\n        }\n    }\n    \n    // Horizontal rails\n    for(r = [1:rails]) {\n        translate([x, y, ground_height + r*(height/(rails+1))]) {\n            cube([width, 2, 2]);\n        }\n    }\n}\n\nmodule elephant_enclosure() {\n    // Main concrete pad\n    translate([65, 15, ground_height]) {\n        cube([35, 50, wall_thickness]);\n    }\n    \n    // Water feature\n    translate([72, 22, ground_height + wall_thickness]) {\n        cube([21, 36, 1]);\n    }\n    \n    // Rock formation\n    translate([75, 40, ground_height + wall_thickness]) {\n        cube([8, 6, 4]);\n    }\n    translate([73, 38, ground_height + wall_thickness + 4]) {\n        cube([4, 4, 3]);\n    }\n}\n\nmodule small_house(x, y, width, depth, height) {\n    // Base\n    translate([x, y, ground_height]) {\n        cube([width, depth, height/2]);\n    }\n    \n    // Roof\n    translate([x-2, y-2, ground_height + height/2]) {\n        cube([width+4, depth+4, 2]);\n    }\n    \n    // Door\n    translate([x + width/2 - 3, y, ground_height]) {\n        cube([6, 1, 8]);\n    }\n    \n    // Window\n    translate([x + 3, y + depth - 1, ground_height + 4]) {\n        cube([4, 1, 4]);\n    }\n}\n\nmodule tree(x, y, height) {\n    // Trunk\n    translate([x, y, ground_height]) {\n        cylinder(h=height/2, r=2, $fn=8);\n    }\n    \n    // Foliage - multiple spheres for realistic look\n    translate([x, y, ground_height + height/2]) {\n        sphere(r=height/3, $fn=12);\n    }\n    translate([x-2, y+2, ground_height + height/2 + 2]) {\n        sphere(r=height/4, $fn=12);\n    }\n    translate([x+2, y-1, ground_height + height/2 + 1]) {\n        sphere(r=height/4, $fn=12);\n    }\n}\n\nmodule visitor_path() {\n    // Main path\n    translate([10, 35, ground_height]) {\n        cube([80, 10, wall_thickness]);\n    }\n    \n    // Branch to elephant enclosure\n    translate([60, 35, ground_height]) {\n        cube([10, 30, wall_thickness]);\n    }\n    \n    // Decorative border\n    for(i = [0:2:80]) {\n        translate([10 + i, 34.5, ground_height + wall_thickness]) {\n            cube([1, 0.5, 0.5]);\n        }\n        translate([10 + i, 44.5, ground_height + wall_thickness]) {\n            cube([1, 0.5, 0.5]);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    zoo_base();\n    \n    // Enclosures\n    elephant_enclosure();\n    \n    // Fencing around elephant area\n    fence(60, 15, 40, 12);\n    fence(60, 15, 1, 12);\n    fence(99, 15, 1, 12);\n    fence(60, 65, 40, 12);\n    \n    // Small buildings\n    small_house(10, 10, 15, 12, 12);\n    small_house(25, 10, 12, 10, 10);\n    \n    // Visitor amenities\n    small_house(45, 55, 10, 8, 8);\n    \n    // Paths\n    visitor_path();\n    \n    // Landscaping\n    tree(20, 50, 12);\n    tree(30, 48, 15);\n    tree(40, 52, 11);\n    tree(15, 60, 13);\n    tree(85, 55, 14);\n    \n    // Entrance gate\n    translate([5, 35, ground_height]) {\n        cube([5, 10, 10]);\n        translate([0, 2, 7]) {\n            cube([5, 6, 3]);\n        }\n    }\n}",
    "renders": true
  },
  {
    "building": "aviary",
    "openscad_code": "// Medium-complexity realistic aviary (bird house)\n// Dimensions: 80 x 60 x 70 mm (L x W x H)\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main aviary module\nmodule aviary() {\n    difference() {\n        union() {\n            // Base platform\n            platform();\n            \n            // Back wall with ventilation slots\n            back_wall();\n            \n            // Side walls\n            side_walls();\n            \n            // Roof\n            roof();\n            \n            // Front posts\n            front_posts();\n            \n            // Perch bars\n            perches();\n            \n            // Feeder\n            feeder();\n        }\n        \n        // Door opening\n        door_opening();\n        \n        // Ventilation holes\n        ventilation_holes();\n        \n        // Entrance hole\n        entrance_hole();\n    }\n}\n\n// Base platform\nmodule platform() {\n    translate([0, 0, 0])\n        cube([80, 60, 4], center=true);\n}\n\n// Back wall with frame detail\nmodule back_wall() {\n    translate([0, 28, 35])\n        cube([76, 4, 66], center=true);\n    \n    // Frame detail\n    translate([0, 30, 35])\n        cube([72, 1, 62], center=true);\n}\n\n// Side walls with window frames\nmodule side_walls() {\n    // Left wall\n    translate([-38, 0, 35])\n        cube([4, 56, 66], center=true);\n    \n    // Right wall\n    translate([38, 0, 35])\n        cube([4, 56, 66], center=true);\n    \n    // Window frames\n    for (i = [-1, 1]) {\n        translate([i * 39, 0, 50])\n            cube([2, 20, 20], center=true);\n    }\n}\n\n// Gabled roof\nmodule roof() {\n    // Roof base\n    translate([0, 0, 70])\n        cube([84, 64, 2], center=true);\n    \n    // Roof gables\n    for (i = [-1, 1]) {\n        translate([0, i * 30, 78])\n            rotate([0, i * 30, 0])\n                cube([84, 4, 16], center=true);\n    }\n}\n\n// Front vertical posts\nmodule front_posts() {\n    for (x = [-30, 30]) {\n        translate([x, -28, 35])\n            cylinder(h=66, r=2, $fn=12);\n    }\n}\n\n// Perch bars inside\nmodule perches() {\n    for (z = [20, 40, 60]) {\n        translate([0, 0, z])\n            rotate([90, 0, 0])\n                cylinder(h=50, r=1.5, $fn=8);\n    }\n}\n\n// Feeder box attached to side\nmodule feeder() {\n    translate([30, 0, 25])\n        cube([20, 20, 10], center=true);\n    \n    translate([40, 0, 20])\n        cube([4, 16, 6], center=true);\n}\n\n// Door opening in front\nmodule door_opening() {\n    translate([0, -30, 35])\n        cube([50, 2, 50], center=true);\n}\n\n// Ventilation holes pattern\nmodule ventilation_holes() {\n    for (x = [-30:15:30]) {\n        for (z = [15:15:55]) {\n            translate([x, 30, z])\n                cylinder(h=5, r=1.5, $fn=8);\n        }\n    }\n}\n\n// Entrance hole for birds\nmodule entrance_hole() {\n    translate([0, -28, 45])\n        rotate([90, 0, 0])\n            cylinder(h=5, r=8, $fn=20);\n}\n\n// Generate the aviary\naviary();",
    "renders": true
  },
  {
    "building": "apiary",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Apiary\n// Overall footprint ≈ 80 mm × 60 mm × 65 mm\n// All parts printable without support\n\n$fn = 32;\n\n// ---------- Main assembly ----------\nmodule apiary() {\n    union() {\n        // Concrete base slab\n        base();\n\n        // Two stackable Langstroth-style boxes\n        translate([0, 0, 8]) box();\n        translate([0, 0, 8 + 25]) box();\n\n        // Telescoping roof\n        translate([0, 0, 8 + 25 + 25 + 2]) roof();\n    }\n}\n\n// ---------- Base ----------\nmodule base() {\n    difference() {\n        // 4 mm thick slab with chamfered edges\n        union() {\n            translate([0, 0, -2]) cube([80, 60, 4], center = true);\n            for (a = [-1, 1], b = [-1, 1])\n                translate([a * 39, b * 29, -2])\n                    cylinder(h = 4, r1 = 2, r2 = 0);\n        }\n\n        // Drain grooves\n        for (i = [-2, 0, 2])\n            translate([i * 20, 0, -1.9])\n                cube([6, 62, 0.5], center = true);\n    }\n}\n\n// ---------- Langstroth box ----------\nmodule box() {\n    difference() {\n        // External shell 3 mm walls\n        union() {\n            // Four walls\n            for (side = [0, 1])\n                translate([side ? 0 : 37, side ? 27.5 : 0, 12.5])\n                    cube([side ? 74 : 3, side ? 55 : 3, 25], center = true);\n            // Same mirrored\n            mirror([1, 0, 0]) children();\n            mirror([0, 1, 0]) children();\n        }\n\n        // Hand-holds (simple cut-outs)\n        for (side = [0, 1]) {\n            translate([side ? 37 : 0, side ? 0 : 30, 12.5])\n                rotate([0, side ? 90 : 0, 0])\n                    cylinder(h = 3, r = 7, center = true);\n            mirror([1, 0, 0]) children();\n            mirror([0, 1, 0]) children();\n        }\n\n        // Entrance\n        translate([37, 0, 4])\n            cube([12, 3, 8], center = true);\n    }\n\n    // Frame rests\n    translate([0, 0, 23])\n        for (x = [-30, -15, 0, 15, 30])\n            translate([x, 0, 0])\n                cube([1, 54, 1]);\n}\n\n// ---------- Roof ----------\nmodule roof() {\n    difference() {\n        // Telescoping shell\n        translate([0, 0, 2])\n            cube([86, 66, 4], center = true);\n\n        // Inner cavity to fit boxes\n        translate([0, 0, 2])\n            cube([78, 58, 5], center = true);\n\n        // Top slope\n        translate([0, 0, 4])\n            scale([1, 1, 0.5])\n                cylinder(h = 20, r1 = 44, r2 = 44);\n    }\n}\n\n// Render\napiary();",
    "renders": true
  },
  {
    "building": "greenhouse",
    "openscad_code": "// Greenhouse - Realistic Medium Detail\n// Designed for 3D printing, 1:200 scale (70mm long)\n\n// Parameters\nbase_w = 50;\nbase_l = 70;\nbase_h = 3;\nwall_thick = 1.5;\n\n// Base foundation\nmodule base() {\n    difference() {\n        // Main concrete base\n        translate([0, 0, base_h/2])\n            cube([base_w, base_l, base_h], center=true);\n        \n        // Drainage channels\n        for(i = [-1, 1]) {\n            translate([i * (base_w/2 - wall_thick), 0, base_h - 0.5])\n                cube([wall_thick, base_l - 10, 1], center=true);\n        }\n    }\n}\n\n// Frame module\nmodule frame() {\n    // Corner posts\n    for(x = [-base_w/2 + 1, base_w/2 - 1])\n        for(y = [-base_l/2 + 1, base_l/2 - 1])\n            translate([x, y, base_h + 15]) \n                cylinder(h = 30, r = 1.2, $fn = 8);\n    \n    // Roof ridge beam\n    translate([0, 0, base_h + 45])\n        rotate([90, 0, 0])\n            cylinder(h = base_l - 2, r = 1, $fn = 8);\n    \n    // Roof rafters\n    for(i = [-1, 1]) {\n        for(y = [-base_l/2 + 5 : 10 : base_l/2 - 5]) {\n            translate([i * (base_w/2 - 1), y, base_h + 30])\n                rotate([0, 22.5 * i, 0])\n                    cylinder(h = 20, r = 0.8, $fn = 6);\n        }\n    }\n}\n\n// Glass panels\nmodule glass_panels() {\n    // Side panels\n    for(side = [-1, 1]) {\n        for(y = [-base_l/2 + 6 : 12 : base_l/2 - 6]) {\n            translate([side * (base_w/2 - wall_thick), y, base_h + 15])\n                cube([wall_thick/2, 10, 28]);\n        }\n    }\n    \n    // Roof panels\n    for(side = [-1, 1]) {\n        for(y = [-base_l/2 + 5 : 10 : base_l/2 - 5]) {\n            translate([0, y, base_h + 30 + 10 * side])\n                rotate([0, 22.5 * side, 0])\n                    cube([base_w - 4, wall_thick/2, 11]);\n        }\n    }\n}\n\n// Door assembly\nmodule door() {\n    translate([0, base_l/2 - 2, base_h + 15]) {\n        // Door frame\n        difference() {\n            cube([10, wall_thick, 30], center=true);\n            translate([0, 0, 2])\n                cube([8, wall_thick + 0.1, 26], center=true);\n        }\n        \n        // Door handle\n        translate([3, wall_thick/2 + 0.5, 10])\n            rotate([90, 0, 0])\n                cylinder(h = 2, r = 0.5, $fn = 8);\n    }\n}\n\n// Ventilation windows\nmodule vents() {\n    for(side = [-1, 1]) {\n        translate([side * (base_w/2 - 3), 0, base_h + 40]) {\n            rotate([0, 15 * side, 0]) {\n                cube([base_w - 10, wall_thick/2, 8]);\n            }\n        }\n    }\n}\n\n// Interior benches\nmodule benches() {\n    for(y = [-base_l/2 + 15 : 20 : base_l/2 - 15]) {\n        translate([0, y, base_h + 3]) {\n            // Bench top\n            cube([base_w - 8, 6, 1], center=true);\n            \n            // Legs\n            for(x = [-base_w/2 + 8, base_w/2 - 8]) {\n                translate([x, 0, 1.5])\n                    cube([1, 6, 3], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    \n    translate([0, 0, 0]) {\n        frame();\n        glass_panels();\n        door();\n        vents();\n        benches();\n    }\n}",
    "renders": true
  },
  {
    "building": "nursery",
    "openscad_code": "// Realistic-style 3D-printable nursery (baby room) \n// External size ≈ 90 mm long × 60 mm deep × 55 mm high\n// All walls 2 mm thick, 45° roof overhangs only, no bridging issues\n\n$fa = 4; $fs = 1;\n\n// Main building shell\nmodule shell() {\n    // Floor slab (also acts as print base)\n    translate([0,0,-1]) cube([90,60,2], center=true);\n    \n    // Walls – built as one block with window/door cut-outs\n    difference() {\n        // Full outer block\n        translate([0,0,26]) cube([90,60,52], center=true);\n        \n        // Interior void\n        translate([0,0,27]) cube([86,56,50], center=true);\n        \n        // Door (front wall)\n        translate([0,-30,12]) cube([30,2,24], center=true);\n        \n        // Window (left wall)\n        translate([-45,10,30]) cube([2,25,20], center=true);\n    }\n    \n    // Pitched roof\n    roof();\n}\n\n// Roof module – printable without support\nmodule roof() {\n    angle = 30;                       // 30° slope, safe for printing\n    h = 25;                           // peak height\n    len = 90/cos(angle);\n    translate([0,0,52+(h/2)])\n        rotate([0,angle,0])\n            cube([len,64,h], center=true);\n    \n    // Opposite side\n    translate([0,0,52+(h/2)])\n        rotate([0,-angle,0])\n            cube([len,64,h], center=true);\n}\n\n// Crib with vertical bars\nmodule crib() {\n    // Crib base\n    translate([25,0,2])\n        cube([30,40,2], center=true);\n    \n    // Headboard\n    translate([25,20,12])\n        cube([30,2,20], center=true);\n    \n    // Footboard\n    translate([25,-20,12])\n        cube([30,2,20], center=true);\n    \n    // Side rail 1\n    translate([10,0,12])\n        cube([2,40,20], center=true);\n    \n    // Side rail 2\n    translate([40,0,12])\n        cube([2,40,20], center=true);\n    \n    // Vertical bars (repeating)\n    for(x=[15:5:35])\n        translate([x,0,12])\n            cube([1,40,20], center=true);\n}\n\n// Changing table\nmodule changing_table() {\n    // Top surface\n    translate([-25,-15,15])\n        cube([25,30,2], center=true);\n    \n    // Legs\n    for(x=[-35,-15])\n        for(y=[-25,-5])\n            translate([x,y,7])\n                cylinder(h=14, d=2, $fn=8);\n}\n\n// Rocking chair\nmodule rocking_chair() {\n    // Seat\n    translate([-25,15,7])\n        cube([20,15,2], center=true);\n    \n    // Back\n    translate([-25,22,12])\n        cube([20,2,10], center=true);\n    \n    // Rockers\n    difference() {\n        translate([-25,15,4])\n            rotate([90,0,0])\n                cylinder(h=20, d=3, $fn=16);\n        translate([-25,15,4])\n            rotate([90,0,0])\n                cylinder(h=18, d=2.2, $fn=16);\n    }\n    mirror([0,1,0])\n        difference() {\n            translate([-25,15,4])\n                rotate([90,0,0])\n                    cylinder(h=20, d=3, $fn=16);\n            translate([-25,15,4])\n                rotate([90,0,0])\n                    cylinder(h=18, d=2.2, $fn=16);\n        }\n}\n\n// Assembly\nshell();\ncrib();\nchanging_table();\nrocking_chair();",
    "renders": true
  },
  {
    "building": "garden",
    "openscad_code": "// Garden Scene - Realistic Style, Medium Complexity\n// Dimensions: 80x60x20 mm (printable size)\n\n// Base ground\ndifference() {\n    // Main ground block\n    cube([80, 60, 2], center=true);\n    \n    // Drainage hole\n    translate([0, 0, 0.9])\n        cylinder(h=2, r=2, center=true);\n}\n\n// Soil layer\ntranslate([0, 0, 1.5])\n    cube([78, 58, 1], center=true);\n\n// Fence posts\nmodule fence_post(x, y) {\n    color(\"brown\")\n    translate([x, y, 1.5])\n        cylinder(h=12, r=1.2, $fn=8);\n}\n\n// Fence rails\nmodule fence_rail(x, y, rot) {\n    color(\"brown\")\n    translate([x, y, 8])\n    rotate([0, 0, rot])\n        cube([40, 0.8, 0.8], center=true);\n}\n\n// Create fence around garden\nfor (x = [-35, -25, -15, -5, 5, 15, 25, 35]) {\n    fence_post(x, 28);\n    fence_post(x, -28);\n}\nfor (y = [-25, -15, -5, 5, 15, 25]) {\n    fence_post(38, y);\n    fence_post(-38, y);\n}\n\n// Horizontal rails\nfence_rail(0, 28, 0);\nfence_rail(0, -28, 0);\nfence_rail(38, 0, 90);\nfence_rail(-38, 0, 90);\n\n// Plant module\nmodule plant(x, y, height, leaves) {\n    color(\"darkgreen\")\n    translate([x, y, 2.5]) {\n        // Stem\n        translate([0, 0, 0])\n            cylinder(h=height, r=0.5, $fn=6);\n        \n        // Leaves\n        for (i = [0:leaves-1]) {\n            rotate([0, 0, i * 120])\n            translate([1.2, 0, height * 0.6])\n                scale([1, 0.3, 0.1])\n                    sphere(r=2.5, $fn=12);\n        }\n    }\n}\n\n// Place plants\nplant(-20, -15, 8, 3);\nplant(-10, 10, 6, 4);\nplant(15, -10, 10, 3);\nplant(25, 15, 7, 5);\nplant(-25, 5, 9, 3);\nplant(5, -20, 5, 4);\n\n// Tomato cage\nmodule tomato_cage(x, y) {\n    color(\"darkgray\")\n    translate([x, y, 2.5]) {\n        // Main supports\n        for (angle = [0:120:359]) {\n            rotate([0, 0, angle])\n            translate([3, 0, 0])\n                cylinder(h=12, r=0.3, $fn=6);\n        }\n        \n        // Rings\n        for (h = [3:3:12]) {\n            translate([0, 0, h])\n                rotate_extrude($fn=32)\n                    translate([3, 0, 0])\n                        circle(r=0.3);\n        }\n    }\n}\n\ntomato_cage(20, 0);\n\n// Garden path\ncolor(\"lightgray\")\ntranslate([0, -5, 2.5])\n    cube([15, 3, 0.2], center=true);\n\n// Small rocks\nmodule rock(x, y, size) {\n    color(\"gray\")\n    translate([x, y, 2.5])\n        scale([size, size * 0.8, size * 0.6])\n            sphere(r=1, $fn=8);\n}\n\nrock(-15, 20, 1.2);\nrock(-12, 18, 0.8);\nrock(-18, 22, 1.0);\nrock(10, -5, 1.1);\n\n// Watering can\nmodule watering_can() {\n    color(\"lightblue\")\n    translate([-30, 0, 2.5]) {\n        // Body\n        difference() {\n            cube([4, 3, 3], center=true);\n            translate([0, 0, 1.5])\n                cube([3.6, 2.6, 2.6], center=true);\n        }\n        \n        // Handle\n        translate([0, 1.8, 1.5])\n            rotate([90, 0, 0])\n                cylinder(h=2, r=0.3, center=true);\n        \n        // Spout\n        translate([2.2, 0, 0.5])\n            rotate([0, -30, 0])\n                cylinder(h=3, r=0.3);\n    }\n}\n\nwatering_can();",
    "renders": true
  },
  {
    "building": "park",
    "openscad_code": "// Park scene with playground, trees, benches, and fountain\n// Scaled for 3D printing - base is 80x60mm\n\n// Base dimensions\nbase_w = 80;\nbase_l = 60;\nbase_h = 2;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Create the park base\nmodule park_base() {\n    difference() {\n        // Main base\n        cube([base_w, base_l, base_h], center=false);\n        \n        // Drainage holes\n        for(x = [10:20:70]) {\n            for(y = [10:20:50]) {\n                translate([x, y, -0.1])\n                    cylinder(h=base_h+0.2, r=1, $fn=8);\n            }\n        }\n    }\n}\n\n// Simple tree module\nmodule tree(trunk_h=12, crown_r=6) {\n    union() {\n        // Trunk\n        translate([0, 0, trunk_h/2])\n            cylinder(h=trunk_h, r=1.5, $fn=8);\n        \n        // Crown - multiple spheres for fuller look\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([crown_r/3, 0, trunk_h + crown_r/2])\n                    sphere(r=crown_r, $fn=16);\n        }\n    }\n}\n\n// Park bench module\nmodule bench() {\n    union() {\n        // Seat\n        translate([0, 0, 3])\n            cube([12, 4, 0.5], center=true);\n        \n        // Backrest\n        translate([0, -1.5, 4.5])\n            cube([12, 0.5, 3], center=true);\n        \n        // Legs\n        for(x = [-4.5, 4.5]) {\n            translate([x, 0, 1.5])\n                cube([1, 3, 3], center=true);\n        }\n    }\n}\n\n// Playground slide\nmodule slide() {\n    union() {\n        // Platform\n        translate([0, 0, 6])\n            cube([8, 6, 0.5], center=true);\n        \n        // Slide surface\n        translate([4, 0, 3])\n            rotate([0, -30, 0])\n                cube([10, 4, 0.5], center=true);\n        \n        // Support pole\n        translate([0, 0, 3])\n            cylinder(h=6, r=0.5, $fn=8);\n        \n        // Ladder\n        translate([-4, 0, 1.5])\n            cube([0.5, 3, 3], center=true);\n        for(i = [0.5:1:2.5]) {\n            translate([-4, 0, i])\n                cube([2, 3, 0.3], center=true);\n        }\n    }\n}\n\n// Fountain module\nmodule fountain() {\n    union() {\n        // Base\n        cylinder(h=2, r=8, $fn=32);\n        \n        // Bowl\n        translate([0, 0, 2])\n            cylinder(h=3, r1=7, r2=6, $fn=32);\n        \n        // Central pillar\n        translate([0, 0, 5])\n            cylinder(h=4, r=2, $fn=16);\n        \n        // Top sphere\n        translate([0, 0, 9])\n            sphere(r=2, $fn=16);\n    }\n}\n\n// Main park assembly\nunion() {\n    // Base\n    park_base();\n    \n    // Trees\n    translate([15, 15, base_h])\n        tree();\n    translate([65, 45, base_h])\n        tree(10, 5);\n    translate([25, 45, base_h])\n        tree(14, 7);\n    \n    // Benches\n    translate([50, 10, base_h])\n        rotate([0, 0, 45])\n            bench();\n    translate([60, 25, base_h])\n        rotate([0, 0, -30])\n            bench();\n    \n    // Playground\n    translate([40, 40, base_h])\n        slide();\n    \n    // Fountain\n    translate([40, 20, base_h])\n        fountain();\n    \n    // Pathways\n    // Main path\n    translate([base_w/2, base_l/2, base_h-0.1])\n        cube([60, 8, 0.2], center=true);\n    \n    // Cross path\n    translate([base_w/2, base_l/2, base_h-0.1])\n        rotate([0, 0, 90])\n            cube([40, 8, 0.2], center=true);\n}",
    "renders": true
  },
  {
    "building": "arboretum",
    "openscad_code": "// Arboretum Greenhouse - Realistic Style, Medium Complexity\n// Dimensions: 80mm x 60mm x 45mm (L x W x H)\n\n$fn = 24;\nwall_thickness = 2;\nglass_thickness = 1;\n\n// Main greenhouse frame\nmodule greenhouse_frame() {\n    // Base foundation\n    translate([0, 0, 1.5])\n    cube([80, 60, 3], center = true);\n    \n    // Corner posts\n    for(x = [-38, 38])\n    for(y = [-28, 28]) {\n        translate([x, y, 0])\n        cylinder(h = 45, r = 2);\n    }\n}\n\n// Glass panels\nmodule glass_panels() {\n    color(\"lightblue\", 0.6) {\n        // Front and back glass\n        for(side = [-1, 1]) {\n            translate([side * 39.5, 0, 22.5])\n            cube([glass_thickness, 56, 45], center = true);\n        }\n        \n        // Side glass panels\n        for(side = [-1, 1]) {\n            translate([0, side * 29.5, 22.5])\n            cube([76, glass_thickness, 45], center = true);\n        }\n        \n        // Roof panels\n        for(x = [-20, 20]) {\n            translate([x, 0, 46])\n            rotate([45, 0, 0])\n            cube([38, 60, glass_thickness], center = true);\n        }\n    }\n}\n\n// Roof structure\nmodule roof_frame() {\n    // Ridge beam\n    translate([0, 0, 46])\n    cube([80, 2, 2], center = true);\n    \n    // Roof supports\n    for(x = [-30, -10, 10, 30]) {\n        translate([x, 0, 34])\n        rotate([45, 0, 0])\n        cube([2, 60, 24], center = true);\n    }\n}\n\n// Entrance door\nmodule entrance_door() {\n    translate([39, 0, 0])\n    union() {\n        // Door frame\n        translate([0, 0, 20])\n        cube([wall_thickness, 15, 40], center = true);\n        \n        // Door\n        color(\"brown\") {\n            translate([0.5, 0, 20])\n            cube([wall_thickness - 1, 13, 38], center = true);\n        }\n        \n        // Door handle\n        translate([1, 5, 20])\n        sphere(r = 1);\n    }\n}\n\n// Interior planters\nmodule planters() {\n    for(x = [-25, -5, 15, 35]) {\n        for(y = [-20, 0, 20]) {\n            translate([x, y, 4])\n            union() {\n                // Planter box\n                color(\"sienna\")\n                cube([12, 12, 6], center = true);\n                \n                // Soil\n                translate([0, 0, 3.5])\n                color(\"darkgreen\")\n                cube([11, 11, 1], center = true);\n                \n                // Plant\n                translate([0, 0, 4.5])\n                color(\"forestgreen\")\n                cylinder(h = 8, r1 = 3, r2 = 5);\n            }\n        }\n    }\n}\n\n// Ventilation windows\nmodule ventilation_windows() {\n    for(x = [-25, 25]) {\n        translate([x, 29, 35])\n        difference() {\n            cube([20, wall_thickness, 10], center = true);\n            translate([0, 0, 0])\n            cube([18, wall_thickness + 1, 8], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    greenhouse_frame();\n    glass_panels();\n    roof_frame();\n    entrance_door();\n    planters();\n    ventilation_windows();\n}",
    "renders": true
  },
  {
    "building": "preserve",
    "openscad_code": "// Preserves Jar with lid and label - Realistic style, medium complexity\n// Dimensions: 60mm diameter, 80mm total height (65mm jar + 15mm lid)\n\n$fn = 32;  // Smooth curves\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    jar_body();\n    translate([0, 0, 65]) lid_assembly();\n}\n\n// Jar body module\nmodule jar_body() {\n    // Main jar body - hollow cylinder with bottom\n    difference() {\n        // Outer cylinder\n        cylinder(h=60, d=60, center=false);\n        \n        // Inner cavity\n        translate([0, 0, 3])  // 3mm thick bottom\n            cylinder(h=57, d=54, center=false);\n        \n        // Thread relief for lid\n        translate([0, 0, 57])\n            cylinder(h=3, d=54.5, center=false);\n    }\n    \n    // Jar neck with threads\n    translate([0, 0, 60]) {\n        difference() {\n            // Neck cylinder\n            cylinder(h=5, d=54, center=false);\n            \n            // Thread grooves (4 turns)\n            for(i = [0:3]) {\n                rotate([0, 0, i*90])\n                    translate([26.5, 0, 0])\n                        cube([3, 1, 5], center=true);\n            }\n        }\n    }\n    \n    // Decorative rings\n    translate([0, 0, 10])\n        cylinder(h=2, d=62, center=false);\n    translate([0, 0, 50])\n        cylinder(h=2, d=62, center=false);\n}\n\n// Lid assembly module\nmodule lid_assembly() {\n    // Main lid top\n    difference() {\n        cylinder(h=8, d=62, center=false);\n        \n        // Inner lip\n        translate([0, 0, 3])\n            cylinder(h=5, d=56, center=false);\n            \n        // Thread grooves\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([26.5, 0, 0])\n                    cube([3, 1, 8], center=true);\n        }\n    }\n    \n    // Lid handle - decorative dome\n    translate([0, 0, 8])\n        sphere(d=20);\n    \n    // Lid rim\n    translate([0, 0, 0])\n        cylinder(h=2, d=64, center=false);\n}\n\n// Label panel (raised embossed area)\ntranslate([0, -30, 25]) {\n    rotate([0, 0, 0])\n        scale([1, 0.8, 1])\n            cube([40, 2, 20], center=true);\n}",
    "renders": true
  },
  {
    "building": "reserve",
    "openscad_code": "// OpenSCAD reserve model\n// Medium complexity, realistic style\n// Printable scale ~80 mm length\n\n$fn = 32;\n\n// Main dimensions\nreserve_len = 80;\nreserve_wid = 60;\nreserve_hgt = 12;\n\n// Wall thickness\nwall = 2;\n\nmodule reserve_base() {\n    difference() {\n        // Outer base\n        cube([reserve_len, reserve_wid, reserve_hgt], center = true);\n        \n        // Inner cavity\n        translate([0, 0, wall/2])\n        cube([reserve_len-wall*2, reserve_wid-wall*2, reserve_hgt], center = true);\n    }\n}\n\nmodule embankment() {\n    // Left embankment\n    translate([-reserve_len/2 + 5, 0, reserve_hgt/2])\n    scale([1,1,0.3])\n    cylinder(h = 10, r1 = 15, r2 = 5);\n    \n    // Right embankment\n    translate([reserve_len/2 - 5, 0, reserve_hgt/2])\n    scale([1,1,0.3])\n    cylinder(h = 10, r1 = 15, r2 = 5);\n}\n\nmodule water_surface() {\n    color(\"blue\", 0.6)\n    translate([0, 0, -reserve_hgt/2 + wall + 1])\n    cube([reserve_len-wall*2-2, reserve_wid-wall*2-2, 0.5], center = true);\n}\n\nmodule spillway() {\n    // Central spillway\n    translate([0, reserve_wid/2 - wall/2, 0])\n    difference() {\n        cube([20, wall, reserve_hgt/2], center = true);\n        translate([0, 0, -reserve_hgt/4])\n        cube([18, wall+1, reserve_hgt/2], center = true);\n    }\n}\n\nmodule dam_wall() {\n    // Front dam wall\n    translate([0, reserve_wid/2 - wall/2, 0])\n    cube([reserve_len, wall, reserve_hgt], center = true);\n}\n\nmodule intake_tower() {\n    // Intake tower\n    translate([-15, 0, 0])\n    difference() {\n        cylinder(h = reserve_hgt, r = 4, center = true);\n        translate([0, 0, 2])\n        cylinder(h = reserve_hgt, r = 2, center = true);\n    }\n    \n    // Tower platform\n    translate([-15, 0, reserve_hgt/2 + 2])\n    cube([8, 8, 1], center = true);\n}\n\nmodule trees() {\n    for (i = [-1, 1]) {\n        for (j = [-1, 1]) {\n            translate([i*25, j*20, reserve_hgt/2 + 3])\n            union() {\n                // Trunk\n                cylinder(h = 6, r = 1, center = true);\n                // Crown\n                translate([0, 0, 4])\n                sphere(r = 3);\n            }\n        }\n    }\n}\n\nmodule walkway() {\n    // Top walkway\n    translate([0, reserve_wid/2 - wall - 3, reserve_hgt/2 + wall/2])\n    cube([reserve_len - 10, 4, wall], center = true);\n    \n    // Bridge over spillway\n    translate([0, 0, reserve_hgt/2 + wall/2])\n    cube([30, 4, wall], center = true);\n}\n\nunion() {\n    reserve_base();\n    embankment();\n    dam_wall();\n    spillway();\n    intake_tower();\n    trees();\n    walkway();\n    water_surface();\n}",
    "renders": true
  },
  {
    "building": "range",
    "openscad_code": "// Realistic medium-complexity kitchen range\n// Overall footprint 60 x 60 mm, height 40 mm\n\n$fn = 36;\n\n// Main body\nmodule range_body() {\n    difference() {\n        // Main box\n        translate([0, 0, 20])\n            cube([60, 60, 40], center=true);\n        \n        // Front bezel recess\n        translate([0, 29, 20])\n            cube([56, 2, 36], center=true);\n    }\n}\n\n// Cooktop surface\nmodule cooktop() {\n    difference() {\n        // Top plate\n        translate([0, 0, 39])\n            cube([60, 60, 2], center=true);\n        \n        // Burner holes\n        for (x = [-20, 20])\n            for (y = [-20, 20]) {\n                translate([x, y, 39.5])\n                    cylinder(h=3, r=10, center=true);\n            }\n    }\n}\n\n// Individual burner\nmodule burner() {\n    difference() {\n        // Outer ring\n        cylinder(h=2, r=9);\n        \n        // Inner ring\n        cylinder(h=4, r=7);\n        \n        // Center hole\n        cylinder(h=5, r=2);\n    }\n}\n\n// Burner cap\nmodule burner_cap() {\n    difference() {\n        translate([0, 0, 1])\n            cylinder(h=2, r=8);\n        \n        translate([0, 0, 1])\n            cylinder(h=3, r=6);\n    }\n}\n\n// Control knob\nmodule knob() {\n    difference() {\n        // Main knob\n        rotate([90, 0, 0])\n            cylinder(h=8, r=5);\n        \n        // Indicator notch\n        translate([4, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=10, r=1);\n    }\n}\n\n// Oven door\nmodule oven_door() {\n    difference() {\n        // Door panel\n        translate([0, -20, 10])\n            cube([50, 2, 30], center=true);\n        \n        // Window\n        translate([0, -19, 10])\n            cube([40, 1, 20], center=true);\n    }\n}\n\n// Door handle\nmodule door_handle() {\n    translate([0, -21, 20])\n        rotate([90, 0, 0])\n            cylinder(h=50, r=2);\n}\n\n// Control panel\nmodule control_panel() {\n    translate([0, 30, 30])\n        cube([56, 2, 8], center=true);\n}\n\n// Assemble the range\nunion() {\n    range_body();\n    \n    cooktop();\n    \n    // Burners\n    for (x = [-20, 20])\n        for (y = [-20, 20]) {\n            translate([x, y, 39])\n                color(\"darkgray\")\n                burner();\n                \n            translate([x, y, 41])\n                color(\"gray\")\n                burner_cap();\n        }\n    \n    // Knobs\n    for (i = [-1:1]) {\n        translate([i * 12, 33, 34])\n            color(\"black\")\n            knob();\n    }\n    \n    // Oven\n    oven_door();\n    door_handle();\n    \n    control_panel();\n}",
    "renders": true
  },
  {
    "building": "commons",
    "openscad_code": "// Realistic Commons Building - Medium Complexity\n// 3D printable model of a traditional commons building with bell tower\n\n$fn = 32;  // Smooth curves for printing\n\n// Overall dimensions (mm)\nbuilding_width = 60;\nbuilding_depth = 45;\nbuilding_height = 25;\nroof_height = 15;\ntower_width = 12;\ntower_height = 35;\n\n// Wall thickness for printing\nwall_thickness = 2;\n\nmodule main_building() {\n    // Base foundation\n    translate([0, 0, 1])\n    cube([building_width + 4, building_depth + 4, 2], center = true);\n    \n    // Main walls\n    difference() {\n        // Outer shell\n        cube([building_width, building_depth, building_height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n        cube([building_width - wall_thickness*2, building_depth - wall_thickness*2, building_height], center = true);\n    }\n    \n    // Front door\n    translate([0, -building_depth/2 + wall_thickness, -building_height/2 + 5])\n    rotate([0, 90, 0])\n    cylinder(h = 8, r1 = 4, r2 = 4);\n    \n    // Door frame\n    translate([0, -building_depth/2 + wall_thickness/2, -building_height/2 + 5])\n    cube([9, wall_thickness, 10], center = true);\n    \n    // Windows (front)\n    for(x = [-20, 20]) {\n        translate([x, -building_depth/2 + wall_thickness/2, 0])\n        cube([8, wall_thickness, 6], center = true);\n    }\n    \n    // Windows (sides)\n    for(y = [-15, 15]) {\n        translate([building_width/2 - wall_thickness/2, y, 0])\n        cube([wall_thickness, 8, 6], center = true);\n    }\n}\n\nmodule roof() {\n    // Main roof\n    translate([0, 0, building_height/2 + roof_height/2])\n    scale([1, 1.2, 1])\n    cube([building_width + 10, building_depth + 8, roof_height], center = true);\n    \n    // Ridge beam\n    translate([0, 0, building_height/2 + roof_height])\n    cube([building_width + 5, 2, 2], center = true);\n}\n\nmodule bell_tower() {\n    // Tower base\n    translate([0, 0, building_height/2 + roof_height + tower_height/2 - 5])\n    cube([tower_width, tower_width, tower_height], center = true);\n    \n    // Tower roof\n    translate([0, 0, building_height/2 + roof_height + tower_height])\n    cylinder(h = 10, r1 = tower_width/2, r2 = 0);\n    \n    // Bell chamber windows\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n        translate([tower_width/2 - wall_thickness, 0, building_height/2 + roof_height + tower_height/2])\n        cube([wall_thickness, 3, 5], center = true);\n    }\n    \n    // Flag pole\n    translate([0, 0, building_height/2 + roof_height + tower_height + 15])\n    cylinder(h = 15, r1 = 1, r2 = 1);\n    \n    // Flag\n    translate([0.5, 0, building_height/2 + roof_height + tower_height + 20])\n    cube([5, 3, 0.5]);\n}\n\nmodule chimney() {\n    // Chimney stack\n    translate([building_width/2 - 10, 0, building_height/2 + roof_height/2])\n    cube([4, 4, 10], center = true);\n    \n    // Chimney cap\n    translate([building_width/2 - 10, 0, building_height/2 + roof_height/2 + 7])\n    cube([6, 6, 1], center = true);\n}\n\nmodule steps() {\n    // Front steps\n    for(i = [1:3]) {\n        translate([0, -building_depth/2 - i*2, -building_height/2 - i*1.5])\n        cube([building_width/3, 3, i*1.5], center = true);\n    }\n}\n\n// Assemble the complete commons\nunion() {\n    main_building();\n    roof();\n    bell_tower();\n    chimney();\n    steps();\n}",
    "renders": true
  },
  {
    "building": "green",
    "openscad_code": "// Green (golf putting green) – medium complexity, realistic style\n// Dimensions: 80 mm (length) × 60 mm (width) × 8 mm (thickness)\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall green base\nmodule base() {\n    // Main turf plateau\n    difference() {\n        translate([0, 0, 3])\n            scale([1, 0.75, 0.1])\n                sphere(d = 80);\n        // Trim underside flat\n        translate([0, 0, -1])\n            cube(100, center = true);\n    }\n}\n\n// Cup with flagstick\nmodule cup() {\n    // Hole\n    translate([20, 5, 0])\n        cylinder(h = 4, d = 4.2, $fn = 32);\n    // Cup liner\n    translate([20, 5, -0.2])\n        cylinder(h = 3.5, d = 4.5, $fn = 32);\n    // Flagstick\n    translate([20, 5, 4])\n        cylinder(h = 25, d = 2, $fn = 8);\n    // Flag\n    translate([20 + 6, 5, 4 + 20])\n        rotate([90, 0, 0])\n            cube([12, 8, 0.8]);\n}\n\n// Fringe collar around green\nmodule fringe() {\n    for (a = [0:30:330]) {\n        rotate([0, 0, a])\n            translate([38, 0, 3.2])\n                rotate([90, 0, 0])\n                    cylinder(h = 4, d1 = 6, d2 = 4, $fn = 6);\n    }\n}\n\n// Mounding for realistic contour\nmodule mounds() {\n    translate([-15, -10, 2])\n        scale([1, 0.7, 0.5])\n            sphere(d = 25);\n    translate([25, 15, 2])\n        scale([0.8, 0.6, 0.4])\n            sphere(d = 20);\n}\n\n// Putting surface markings\nmodule markings() {\n    // Center alignment stripe\n    color(\"white\")\n    translate([0, 0, 3.9])\n        cube([50, 1, 0.2], center = true);\n    \n    // Yardage dots\n    for (x = [-25:12.5:25])\n        translate([x, 0, 3.9])\n            sphere(d = 1.2);\n}\n\n// Assembly\nunion() {\n    color(\"darkgreen\") base();\n    color(\"darkgreen\") mounds();\n    color(\"forestgreen\") fringe();\n    color(\"black\") cup();\n    markings();\n}",
    "renders": true
  },
  {
    "building": "square",
    "openscad_code": "// Realistic Square Tile with Beveled Edges and Inset Details\n// 3D printable architectural tile ~80 mm wide, 5 mm thick\n\n// Overall dimensions\ntile_width = 80;\ntile_thickness = 5;\nbevel_depth = 0.8;\ninset_depth = 0.5;\n\n// Wall thickness for 3D printing\nwall_th = 1.2;\n\n// Chamfer angle for bevel\nbevel_angle = 45;\n\n// Create main square tile\nmodule square_tile() {\n    difference() {\n        // Main body with beveled edges\n        union() {\n            // Center block\n            translate([0, 0, tile_thickness/2 - bevel_depth]) {\n                cube([tile_width - 2*bevel_depth, tile_width - 2*bevel_depth, tile_thickness - bevel_depth], center=true);\n            }\n            \n            // Four beveled edges\n            for (i = [0:3]) {\n                rotate([0, 0, i*90]) {\n                    translate([(tile_width - bevel_depth)/2, 0, tile_thickness/2 - bevel_depth/2]) {\n                        rotate([0, bevel_angle, 0]) {\n                            cube([bevel_depth*sqrt(2), tile_width - 2*bevel_depth, bevel_depth], center=true);\n                        }\n                    }\n                }\n            }\n            \n            // Corner bevels\n            for (i = [0:3]) {\n                rotate([0, 0, i*90]) {\n                    translate([(tile_width - bevel_depth)/2, (tile_width - bevel_depth)/2, tile_thickness/2 - bevel_depth/2]) {\n                        rotate([bevel_angle, 0, bevel_angle]) {\n                            cube([bevel_depth*sqrt(2), bevel_depth*sqrt(2), bevel_depth], center=true);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Central inset square\n        translate([0, 0, -0.1]) {\n            cube([tile_width/2, tile_width/2, inset_depth + 0.2], center=true);\n        }\n        \n        // Decorative corner cutouts\n        corner_size = 8;\n        for (i = [0:3]) {\n            rotate([0, 0, i*90]) {\n                translate([(tile_width - corner_size)/2, (tile_width - corner_size)/2, -0.1]) {\n                    cube([corner_size, corner_size, inset_depth + 0.2], center=true);\n                }\n            }\n        }\n        \n        // Drainage holes for 3D printing\n        hole_size = 2;\n        translate([0, 0, tile_thickness - 0.5]) {\n            for (i = [-1:1]) {\n                for (j = [-1:1]) {\n                    if (i != 0 || j != 0) {\n                        translate([i*20, j*20, 0]) {\n                            cylinder(h=2, r=hole_size/2, $fn=8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create subtle surface texture\nmodule surface_texture() {\n    texture_height = 0.1;\n    spacing = 4;\n    \n    difference() {\n        // Base texture layer\n        translate([0, 0, tile_thickness - texture_height]) {\n            cube([tile_width, tile_width, texture_height], center=true);\n        }\n        \n        // Micro dimples for realistic surface\n        for (i = [-9:9]) {\n            for (j = [-9:9]) {\n                if (abs(i) % 3 == 0 && abs(j) % 3 == 0) {\n                    translate([i*spacing, j*spacing, tile_thickness - texture_height - 0.1]) {\n                        sphere(r=0.3, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    square_tile();\n    surface_texture();\n}",
    "renders": true
  },
  {
    "building": "boulevard",
    "openscad_code": "// OpenSCAD Boulevard – realistic, medium complexity, 3D-printable\n// Overall footprint ≈ 90 mm long × 40 mm wide × 10 mm high\n\n$fa = 2; $fs = 0.5;\n\n// Wall thickness for printability\nwall = 1.2;\n\n// Main boulevard module\nmodule boulevard() {\n    // Road surface\n    translate([0,0,0]) cube([90,40,1], center=true);\n\n    // Sidewalks left & right\n    translate([0,21,0.5]) cube([90,8,1], center=true);\n    translate([0,-21,0.5]) cube([90,8,1], center=true);\n\n    // Median\n    translate([0,0,1]) cube([90,2,1], center=true);\n\n    // Street-lamps\n    for (x = [-35,-15,5,25])\n        translate([x,12,1]) streetlamp();\n    for (x = [-35,-15,5,25])\n        translate([x,-12,1]) mirror([0,1,0]) streetlamp();\n\n    // Trees on median\n    for (x = [-35,-15,5,25])\n        translate([x,0,1]) tree();\n\n    // Benches on sidewalks\n    for (x = [-25,0,25])\n        translate([x,16,1]) bench();\n    for (x = [-25,0,25])\n        translate([x,-16,1]) mirror([0,1,0]) bench();\n}\n\n// Street-lamp module\nmodule streetlamp() {\n    // Pole\n    cylinder(h=12, r=1.2, center=false, $fn=12);\n\n    // Arm\n    translate([0,0,12])\n        rotate([0,90,0])\n            cylinder(h=7, r=0.8, center=false, $fn=8);\n\n    // Lamp head (hollow for printability)\n    difference() {\n        translate([0,7,12]) sphere(d=3.5);\n        translate([0,7,11]) sphere(d=2.3);\n    }\n}\n\n// Tree module\nmodule tree() {\n    // Trunk\n    cylinder(h=7, r=1.5, center=false, $fn=8);\n\n    // Canopy (2 intersecting spheres for realistic foliage)\n    translate([0,0,7]) {\n        sphere(d=7);\n        translate([0,2,1]) sphere(d=6);\n    }\n}\n\n// Bench module\nmodule bench() {\n    // Seat\n    translate([0,0,0]) cube([10,3,0.8], center=true);\n\n    // Legs\n    translate([-3.5,0,-0.9]) cube([1.5,3,2], center=true);\n    translate([3.5,0,-0.9]) cube([1.5,3,2], center=true);\n\n    // Backrest\n    translate([0,1.2,1.2]) cube([10,0.8,2], center=true);\n}\n\nboulevard();",
    "renders": true
  },
  {
    "building": "avenue",
    "openscad_code": "// Avenue with trees, streetlights and benches\n// Designed for 3D printing, no overhangs, 50mm width\n\n$fn = 32;\n\n// Avenue dimensions\navenue_length = 50;\navenue_width = 50;\nstreet_width = 20;\nsidewalk_width = 15;\ntree_spacing = 12.5;\nbench_spacing = 15;\n\n// Module for tree\nmodule tree() {\n    // Trunk - cylinder with flat top\n    translate([0, 0, 1])\n        cylinder(h = 8, d = 2);\n    \n    // Foliage - simple sphere\n    translate([0, 0, 9])\n        sphere(d = 6);\n}\n\n// Module for streetlight\nmodule streetlight() {\n    // Base\n    translate([0, 0, 1])\n        cylinder(h = 1, d = 4);\n    \n    // Pole\n    translate([0, 0, 2])\n        cylinder(h = 12, d = 1);\n    \n    // Arm\n    translate([0, 2.5, 14])\n        rotate([90, 0, 0])\n            cylinder(h = 5, d = 1);\n    \n    // Light fixture\n    translate([0, 5, 14])\n        sphere(d = 2);\n}\n\n// Module for bench\nmodule bench() {\n    // Seat\n    translate([0, 0, 3])\n        cube([8, 2, 0.5], center = true);\n    \n    // Legs\n    translate([-3, 0, 1.5])\n        cube([1, 2, 3], center = true);\n    translate([3, 0, 1.5])\n        cube([1, 2, 3], center = true);\n    \n    // Backrest\n    translate([0, -1, 4.5])\n        cube([8, 0.5, 2], center = true);\n}\n\n// Street surface\ntranslate([0, 0, 0])\n    cube([avenue_length, street_width, 1], center = true);\n\n// Sidewalks\ntranslate([0, (street_width + sidewalk_width)/2, 0.5])\n    cube([avenue_length, sidewalk_width, 1], center = true);\ntranslate([0, -(street_width + sidewalk_width)/2, 0.5])\n    cube([avenue_length, sidewalk_width, 1], center = true);\n\n// Trees on left sidewalk\nfor(x = [-avenue_length/2 + tree_spacing : tree_spacing : avenue_length/2 - tree_spacing]) {\n    translate([x, (street_width + sidewalk_width)/2, 0])\n        tree();\n}\n\n// Streetlights on right sidewalk\nfor(x = [-avenue_length/2 + tree_spacing/2 : tree_spacing : avenue_length/2 - tree_spacing/2]) {\n    translate([x, -(street_width + sidewalk_width)/2, 0])\n        streetlight();\n}\n\n// Benches on left sidewalk\ntranslate([-bench_spacing, (street_width + sidewalk_width)/2, 0])\n    bench();\ntranslate([bench_spacing, (street_width + sidewalk_width)/2, 0])\n    bench();\n\n// Center line markings\nfor(x = [-avenue_length/2 + 2.5 : 5 : avenue_length/2 - 2.5]) {\n    translate([x, 0, 1.1])\n        cube([2.5, 0.5, 0.2], center = true);\n}",
    "renders": true
  },
  {
    "building": "drive",
    "openscad_code": "// Realistic 3.5\" Hard Disk Drive – printable, medium complexity\n// Outer dimensions ~101×147×26 mm (true 3.5\" form-factor)\n\n$fn = 32;   // nice curves without huge file\n\n// Overall shell -----------------------------------------------------------\nmodule drive_chassis() {\n    difference() {\n        // main cast aluminium box\n        translate([-50.5, -73.5, 0])\n            cube([101, 147, 26]);\n\n        // hollow interior (2 mm walls)\n        translate([-48.5, -71.5, 2])\n            cube([97, 143, 22]);\n\n        // top lip for lid seating\n        translate([-50.5, -73.5, 24])\n            cube([101, 147, 2]);\n    }\n}\n\n// PCB on the bottom -------------------------------------------------------\nmodule pcb() {\n    color(\"green\")\n    translate([-45, -68, 0])\n        cube([90, 136, 1.6]);\n}\n\n// SATA power + data connectors ---------------------------------------------\nmodule sata_connector() {\n    // combined power + data block\n    translate([0, -73.5, 1.6])\n    difference() {\n        cube([26, 12, 9.5]);\n        // 15-pin power\n        for (i = [0:14])\n            translate([1+i*1.27, -73.5+1, 2.6])\n                cube([0.6, 10, 1]);\n        // 7-pin data\n        for (i = [0:6])\n            translate([7+i*1, -73.5+1, 2.6+2.5])\n                cube([0.6, 10, 1]);\n    }\n}\n\n// Top lid with six screws ---------------------------------------------------\nmodule lid() {\n    difference() {\n        translate([-50.5, -73.5, 24])\n            cube([101, 147, 2]);\n\n        // six countersunk screw holes\n        screw_positions = [\n            [-40, -60], [-40, 60],\n            [ 40, -60], [ 40, 60],\n            [  0, -60], [  0, 60]\n        ];\n        for (p = screw_positions)\n            translate([p.x, p.y, 24])\n                cylinder(h = 3, d1 = 4.5, d2 = 2.5);\n    }\n}\n\n// Spindle hub and platter ----------------------------------------------------\nmodule platter_stack() {\n    color(\"silver\")\n    translate([0, 0, 12])\n    union() {\n        // spindle motor hub\n        cylinder(h = 6, d = 25);\n        // top platter (realistic 95 mm)\n        translate([0, 0, 6])\n            cylinder(h = 1.2, d = 95);\n    }\n}\n\n// Actuator arm pivot --------------------------------------------------------\nmodule actuator() {\n    color(\"silver\")\n    translate([-40, 0, 12+7])\n    union() {\n        // pivot bearing\n        cylinder(h = 6, d = 12);\n        // arm body (simplified)\n        translate([6, 0, 3])\n            rotate([0, 90, 0])\n                cylinder(h = 40, d = 4);\n    }\n}\n\n// Assembly ------------------------------------------------------------------\ndrive_chassis();\npcb();\nsata_connector();\nlid();\nplatter_stack();\nactuator();",
    "renders": true
  },
  {
    "building": "road",
    "openscad_code": "// Medium-complexity realistic road segment for 3D printing\n// Dimensions: 80 mm long, 30 mm wide, 3.5 mm thick\n\n// Road surface module\nmodule road_surface() {\n    difference() {\n        // Main asphalt body\n        color(\"dimgray\")\n        cube([80, 30, 1.5], center=true);\n        \n        // Drainage grooves along edges\n        for(side = [-1, 1]) {\n            translate([0, side * 13.5, 0])\n            cube([80, 0.5, 1.5], center=true);\n        }\n    }\n}\n\n// Lane markings\nmodule lane_markings() {\n    // Center dashed line segments\n    for(i = [-35:10:35]) {\n        translate([i, 0, 0.76])\n        color(\"white\")\n        cube([5, 0.5, 0.1], center=true);\n    }\n    \n    // Edge solid lines\n    for(side = [-1, 1]) {\n        translate([0, side * 12, 0.76])\n        color(\"white\")\n        cube([80, 0.5, 0.1], center=true);\n    }\n}\n\n// Manhole cover\nmodule manhole_cover() {\n    translate([20, 5, 0.75])\n    difference() {\n        // Cover disk\n        cylinder(h=0.8, r=4, $fn=32);\n        \n        // Grip holes\n        for(angle = [0:60:300]) {\n            rotate([0, 0, angle])\n            translate([2.5, 0, -0.1])\n            cube([2, 0.5, 1], center=true);\n        }\n    }\n}\n\n// Road texture bumps\nmodule road_texture() {\n    for(x = [-35:5:35]) {\n        for(y = [-13:2:13]) {\n            if(x % 10 != 0 || y % 4 != 0) {\n                translate([x, y, 0.76])\n                cube([0.5, 0.5, 0.1], center=true);\n            }\n        }\n    }\n}\n\n// Sidewalk curb\nmodule sidewalk_curb() {\n    for(side = [-1, 1]) {\n        translate([0, side * 16.5, 0.75])\n        color(\"lightgray\")\n        cube([80, 3, 3], center=true);\n    }\n}\n\n// Storm drain grates\nmodule storm_drains() {\n    for(side = [-1, 1]) {\n        for(pos = [-30, 30]) {\n            translate([pos, side * 15, 0.75])\n            difference() {\n                color(\"gray\")\n                cube([8, 1.5, 1], center=true);\n                \n                // Grate slots\n                for(i = [-3:1:3]) {\n                    translate([i, 0, -0.1])\n                    cube([0.5, 1.5, 1.2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    road_surface();\n    lane_markings();\n    manhole_cover();\n    road_texture();\n    sidewalk_curb();\n    storm_drains();\n}",
    "renders": true
  },
  {
    "building": "bridge",
    "openscad_code": "// Medium-complexity realistic pedestrian bridge\n// Dimensions chosen for 1:100 scale (50 mm long)\n\n// Overall scale factor – everything is built at 2× then scaled down\n// so wall thicknesses stay ≥0.8 mm for FDM printing\nscale_factor = 0.5;\n\nmodule bridge() {\n    // Main deck\n    difference() {\n        translate([0,0,4])\n            cube([100,12,2], center=true);          // 100×12 mm deck\n        // Sidewalk grooves for realism (top surface)\n        for (i = [-45:10:45])\n            translate([i,0,5.1])\n                cube([2,12,0.2], center=true);\n    }\n\n    // Parapets\n    module parapet(x) {\n        translate([x,0,0]) {\n            for (i = [-40:10:40]) {\n                translate([i,6,2])\n                    cube([2,1,5], center=true);     // Outer posts\n                translate([i,-6,2])\n                    cube([2,1,5], center=true);     // Inner posts\n            }\n            // Rails\n            translate([0,6.5,4.5])\n                cube([100,0.5,1], center=true);\n            translate([0,-6.5,4.5])\n                cube([100,0.5,1], center=true);\n        }\n    }\n    parapet(0);\n\n    // Arch supports\n    module arch() {\n        difference() {\n            // Main arch body\n            rotate([0,90,0])\n                cylinder(h=100, d1=40, d2=40, $fn=60);\n            // Hollow for weight saving\n            rotate([0,90,0])\n                cylinder(h=102, d1=36, d2=36, $fn=60);\n        }\n    }\n    translate([0,0,-8]) arch();\n\n    // Arch feet\n    module foot(x) {\n        translate([x,0,-12])\n            cube([8,12,8], center=true);\n    }\n    foot(-40);\n    foot(40);\n\n    // Cross bracing between arches\n    for (z = [-30:15:30]) {\n        translate([z,0,-3])\n            rotate([0,0,atan2(8,30)])\n                cube([2,12,2], center=true);\n    }\n}\n\n// Final assembly\nscale([scale_factor,scale_factor,scale_factor])\n    bridge();",
    "renders": true
  },
  {
    "building": "viaduct",
    "openscad_code": "// Realistic 3D-printable viaduct (medium complexity)\n// Dimensions: ~90 mm long, 30 mm wide, 40 mm high\n// All overhangs ≤45°, walls ≥1.5 mm\n\nmodule pier(height, width, depth) {\n    // Central concrete pier with slight taper\n    difference() {\n        union() {\n            // Main body, tapered top\n            hull() {\n                translate([0, 0, 0])\n                    cube([width, depth, 2], center=true);\n                translate([0, 0, height-1])\n                    cube([width*0.9, depth*0.9, 2], center=true);\n            }\n            // Base footing\n            translate([0, 0, -2])\n                cube([width*1.4, depth*1.4, 2], center=true);\n        }\n        // Weight-saving cavity\n        translate([0, 0, 3])\n            cube([width-3, depth-3, height-6], center=true);\n    }\n}\n\nmodule arch(span, rise, thickness) {\n    // Semi-circular arch with keystone\n    difference() {\n        union() {\n            // Left half\n            translate([-span/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=thickness, r=span/2, $fn=32);\n            // Right half\n            translate([span/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=thickness, r=span/2, $fn=32);\n            // Keystone\n            translate([0, 0, -thickness/2])\n                cube([span*0.12, thickness, rise*2], center=true);\n        }\n        // Center opening\n        translate([0, 0, -thickness-1])\n            cube([span*0.9, thickness+2, rise*2], center=true);\n    }\n}\n\nmodule deck_segment(length, width) {\n    // Roadway segment with parapets\n    difference() {\n        // Main deck\n        cube([length, width, 3], center=false);\n        \n        // Drainage grooves\n        for(x=[2:length-2:5]) {\n            translate([x, 1, 2.5])\n                cube([0.5, width-2, 0.5]);\n        }\n    }\n    \n    // Parapet walls\n    translate([-0.5, 1.5, 3])\n        cube([length+1, 1, 4]);\n    translate([-0.5, width-2.5, 3])\n        cube([length+1, 1, 4]);\n}\n\nmodule viaduct() {\n    scale = 0.7; // Scale to ~90mm\n    \n    // Central piers\n    for(i=[0:1:2]) {\n        translate([i*25*scale, 0, 0])\n            scale(scale)\n                pier(height=35, width=8, depth=6);\n    }\n    \n    // Arches between piers\n    for(i=[0:1:1]) {\n        translate([i*25*scale + 12.5*scale, 0, 17])\n            scale(scale)\n                arch(span=24, rise=12, thickness=7);\n    }\n    \n    // Approach arches at ends\n    translate([-12.5*scale, 0, 17])\n        scale(scale)\n            arch(span=24, rise=12, thickness=7);\n    \n    translate([62.5*scale, 0, 17])\n        scale(scale)\n            arch(span=24, rise=12, thickness=7);\n    \n    // Roadway deck\n    for(i=[0:1:2]) {\n        translate([i*25*scale, 0, 34*scale])\n            scale(scale)\n                deck_segment(length=25, width=22);\n    }\n    \n    // End caps\n    translate([-12.5*scale, 0, 34*scale])\n        scale(scale)\n            deck_segment(length=12.5, width=22);\n    \n    translate([62.5*scale, 0, 34*scale])\n        scale(scale)\n            deck_segment(length=12.5, width=22);\n}\n\n// Render the complete viaduct\nviaduct();",
    "renders": true
  },
  {
    "building": "aqueduct",
    "openscad_code": "// Realistic Roman Aqueduct - Medium Complexity\n// 3D printable, ~80mm long\n\nwall_thickness = 2;\narch_width = 8;\narch_height = 12;\npier_width = 6;\npier_height = 25;\nspan_count = 5;\ntotal_length = span_count * (arch_width + pier_width) - pier_width;\n\nmodule arch() {\n    difference() {\n        // Full arch block\n        cube([arch_width, arch_width, arch_height], center=true);\n        // Inner arch opening\n        rotate([90,0,0])\n            cylinder(h=arch_width+1, r=arch_width/2-1, center=true);\n        // Flat base\n        translate([0,0,-arch_height/2+1])\n            cube([arch_width, arch_width, 2], center=true);\n    }\n}\n\nmodule pier() {\n    union() {\n        // Main pier\n        cube([pier_width, arch_width+4, pier_height], center=true);\n        \n        // Base molding\n        translate([0,0,-pier_height/2-1])\n            cube([pier_width+2, arch_width+6, 2], center=true);\n        \n        // Top cap\n        translate([0,0,pier_height/2+1])\n            cube([pier_width+2, arch_width+6, 2], center=true);\n    }\n}\n\nmodule water_channel() {\n    channel_width = arch_width + 8;\n    channel_height = 6;\n    \n    difference() {\n        // Channel base\n        cube([total_length+8, channel_width, channel_height], center=true);\n        \n        // Water trough\n        translate([0,0,-channel_height/2+wall_thickness])\n            cube([total_length+6, channel_width-4, channel_height-2], center=true);\n        \n        // Drainage holes\n        for(i = [-total_length/2+5 : 10 : total_length/2-5]) {\n            translate([i, channel_width/2-1, 0])\n                rotate([0,90,0])\n                    cylinder(h=wall_thickness+1, r=1, center=true);\n        }\n    }\n    \n    // Side walls\n    translate([0, channel_width/2-2, channel_height/2-1])\n        cube([total_length+8, 4, channel_height], center=true);\n    translate([0, -channel_width/2+2, channel_height/2-1])\n        cube([total_length+8, 4, channel_height], center=true);\n}\n\nmodule arch_span() {\n    union() {\n        // Arch\n        translate([0,0,pier_height/2+arch_height/2])\n            arch();\n        \n        // Keystone detail\n        translate([0,0,pier_height/2+arch_height-2])\n            cube([arch_width, arch_width/4, 4], center=true);\n    }\n}\n\n// Base foundation\nfoundation_height = 3;\ntranslate([0,0,-foundation_height/2-pier_height/2])\n    cube([total_length+10, arch_width+10, foundation_height], center=true);\n\n// Piers and arches\nfor(i = [0 : span_count-1]) {\n    x_pos = -total_length/2 + i*(arch_width + pier_width) + pier_width/2;\n    translate([x_pos,0,0])\n        pier();\n    \n    translate([x_pos + pier_width/2 + arch_width/2, 0, 0])\n        arch_span();\n}\n\n// Final pier\ntranslate([total_length/2,0,0])\n    pier();\n\n// Water channel on top\ntranslate([0,0,pier_height/2+arch_height+3])\n    water_channel();\n\n// Decorative caps\ncap_height = 2;\nfor(i = [-total_length/2-4 : total_length : total_length/2+4]) {\n    translate([i, (arch_width+8)/2+2, pier_height/2+arch_height+3+cap_height/2])\n        cube([4, 4, cap_height], center=true);\n    translate([i, -(arch_width+8)/2-2, pier_height/2+arch_height+3+cap_height/2])\n        cube([4, 4, cap_height], center=true);\n}",
    "renders": true
  },
  {
    "building": "reservoir",
    "openscad_code": "// Realistic Reservoir with Dam and Spillway\n// Medium complexity, 3D printable\n\n$fn = 50;  // Smooth curves\n\n// Overall dimensions\nlength = 80;\nwidth = 60;\nheight = 25;\nwall_thickness = 2;\n\n// Water level (80% full)\nwater_level = height * 0.8;\n\n// Main reservoir body\nmodule reservoir_body() {\n    difference() {\n        // Outer shell\n        cube([length, width, height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness/2])\n            cube([length - 2*wall_thickness, width - 2*wall_thickness, height], center = true);\n    }\n}\n\n// Water inside reservoir\nmodule water() {\n    color([0.2, 0.5, 0.8, 0.7])\n        translate([0, 0, -height/2 + water_level/2])\n            cube([length - 2*wall_thickness - 1, width - 2*wall_thickness - 1, water_level], center = true);\n}\n\n// Concrete dam wall\nmodule dam_wall() {\n    translate([length/2 - wall_thickness, 0, 0])\n        cube([wall_thickness * 3, width, height * 1.2], center = true);\n}\n\n// Spillway with steps\nmodule spillway() {\n    steps = 5;\n    step_height = height * 0.6 / steps;\n    \n    for(i = [0:steps-1]) {\n        translate([\n            length/2 + wall_thickness * 2, \n            -width/4 + i * width/(steps*2), \n            -height/2 + i * step_height\n        ]) {\n            cube([wall_thickness * 2, width/2, step_height * 0.8]);\n        }\n    }\n}\n\n// Support buttresses\nmodule buttresses() {\n    buttress_width = 4;\n    spacing = 15;\n    \n    for(x = [-length/2 + 10 : spacing : length/2 - 15]) {\n        translate([x, width/2 - buttress_width/2, 0])\n            cube([buttress_width, buttress_width, height * 1.1], center = true);\n    }\n}\n\n// Inlet pipe\nmodule inlet_pipe() {\n    translate([-length/2 - 5, 0, -height/2 + 5])\n        rotate([0, 90, 0])\n            cylinder(h = 10, r1 = 3, r2 = 3);\n}\n\n// Outlet valve\nmodule outlet_valve() {\n    translate([length/2 + wall_thickness * 2.5, 0, -height/2 + 3])\n        cylinder(h = 6, r1 = 2, r2 = 2);\n    \n    translate([length/2 + wall_thickness * 2.5, 0, -height/2 + 6])\n        cube([2, 4, 2], center = true);\n}\n\n// Walkway on top of dam\nmodule walkway() {\n    translate([length/2 - wall_thickness/2, 0, height/2 + 1])\n        cube([wall_thickness * 4, width * 0.8, 2], center = true);\n}\n\n// Railings for walkway\nmodule railings() {\n    post_spacing = 10;\n    \n    for(x = [-width/2 + 5 : post_spacing : width/2 - 5]) {\n        translate([length/2 - wall_thickness/2, x, height/2 + 3])\n            cylinder(h = 4, r1 = 0.5, r2 = 0.5);\n    }\n    \n    translate([length/2 - wall_thickness/2, 0, height/2 + 5])\n        cube([wall_thickness * 2.5, width * 0.7, 0.5], center = true);\n}\n\n// Assembly\nunion() {\n    // Main structure\n    reservoir_body();\n    dam_wall();\n    \n    // Functional elements\n    water();\n    spillway();\n    buttresses();\n    \n    // Infrastructure\n    inlet_pipe();\n    outlet_valve();\n    walkway();\n    railings();\n}",
    "renders": true
  },
  {
    "building": "dam",
    "openscad_code": "// Medium complexity realistic dam model\n// Overall dimensions: 80mm wide x 30mm deep x 40mm high\n\n$fn = 32;  // Smooth curves\n\n// Main dam body\nmodule dam_body() {\n    difference() {\n        // Main concrete structure\n        union() {\n            // Central wall\n            translate([0, 15, 20]) cube([80, 30, 40], center=true);\n            \n            // Curved upstream face\n            translate([0, 0, 0]) {\n                scale([1, 0.8, 1]) {\n                    cylinder(h=40, r=60, center=true);\n                }\n            }\n            \n            // Downstream support buttresses\n            for(i = [-30, -15, 0, 15, 30]) {\n                translate([i, 30, 15]) cube([8, 10, 30], center=true);\n            }\n        }\n        \n        // Water channel\n        difference() {\n            translate([0, 15, 0]) cube([70, 30, 35], center=true);\n            translate([0, 15, -5]) cube([65, 25, 30], center=true);\n        }\n    }\n}\n\n// Spillway structure\nmodule spillway() {\n    translate([0, -10, 40]) {\n        union() {\n            // Spillway deck\n            cube([70, 10, 2], center=true);\n            \n            // Gate supports\n            for(i = [-25, -10, 10, 25]) {\n                translate([i, 0, 2]) cube([3, 10, 5], center=true);\n            }\n        }\n    }\n}\n\n// Water outlet pipes\nmodule outlet_pipes() {\n    for(i = [-20, 0, 20]) {\n        translate([i, 30, 15]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=25, r=3, center=true);\n            }\n        }\n    }\n}\n\n// Road on top\nmodule access_road() {\n    translate([0, 0, 42]) {\n        cube([75, 10, 1], center=true);\n    }\n}\n\n// Power house at base\nmodule power_house() {\n    translate([0, 40, 5]) {\n        union() {\n            // Main building\n            cube([30, 15, 10], center=true);\n            \n            // Roof\n            translate([0, 0, 6]) cube([32, 17, 1], center=true);\n            \n            // Small ventilation structures\n            for(i = [-10, 10]) {\n                translate([i, 0, 7]) cube([3, 3, 2], center=true);\n            }\n        }\n    }\n}\n\n// Water surface upstream\nmodule water_surface() {\n    translate([0, -20, 18]) {\n        color([0.2, 0.5, 0.8, 0.7]) {\n            cube([70, 20, 1], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    dam_body();\n    spillway();\n    outlet_pipes();\n    access_road();\n    power_house();\n    water_surface();\n}",
    "renders": true
  },
  {
    "building": "weir",
    "openscad_code": "// Realistic medium-complexity 3D-printable weir\n// Overall footprint ≈ 90 mm × 45 mm × 30 mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main channel\nmodule channel() {\n    difference() {\n        // Outer block\n        cube([90, 45, 25]);\n        \n        // Inner cavity (no overhang)\n        translate([wall, wall, 0])\n        cube([90 - 2*wall, 45 - 2*wall, 25]);\n    }\n}\n\n// Upstream wing walls\nmodule wing_walls() {\n    for (side = [-1, 1]) {\n        translate([0, side * (45/2), 0])\n        rotate([0, 0, side * 15])\n        cube([20, wall, 25], center = true);\n    }\n}\n\n// Crest plate (thin sharp edge)\nmodule crest() {\n    translate([35, 0, 22])\n    cube([5, 45, 3]);\n}\n\n// Downstream apron with energy-dissipation blocks\nmodule apron() {\n    difference() {\n        translate([40, 0, 0])\n        cube([50, 45, 5]);\n        \n        // Drainage slot\n        translate([40 + 2, wall, 0])\n        cube([46, 45 - 2*wall, 3]);\n    }\n    \n    // Dissipation blocks\n    for (x = [0:9:36])\n    for (y = [-15:9:15])\n    translate([40 + 5 + x, y, 5])\n    cube([3, 3, 2]);\n}\n\n// Side rails\nmodule rails() {\n    for (side = [-1, 1]) {\n        translate([0, side * (45/2 - wall/2), 20])\n        cube([90, wall, 5], center = false);\n    }\n}\n\n// Assembly\nunion() {\n    channel();\n    wing_walls();\n    crest();\n    apron();\n    rails();\n}",
    "renders": true
  },
  {
    "building": "lock",
    "openscad_code": "// Realistic Medium-Complexity Lock (Padlock style)\n// Overall footprint ≈ 60 x 30 x 20 mm, printable without supports\n\n$fn = 50;                // Smooth curves\n\n// Main parameters\nbody_w = 30;             // Width of lock body\nbody_h = 20;             // Height of body\nbody_d = 15;             // Depth of body\nshackle_r = 4;           // Radius of shackle bar\nshackle_gap = 15;        // Clearance for shackle opening\nkeyhole_w = 4;           // Width of key slot\nkeyhole_h = 6;           // Height of key slot\n\nmodule lock_body() {\n    difference() {\n        // Main rounded body\n        hull() {\n            translate([-body_w/2, 0, 0])\n                cylinder(r = body_h/2, h = body_d, center = true);\n            translate([ body_w/2, 0, 0])\n                cylinder(r = body_h/2, h = body_d, center = true);\n        }\n\n        // Keyhole slot\n        translate([0, 0, body_d/2 + 0.1])\n            cube([keyhole_w, keyhole_h, body_d + 0.2], center = true);\n\n        // Decorative chamfers (4 corners)\n        for(x = [-1, 1])\n            for(y = [-1, 1])\n                translate([x*(body_w/2 - 2), y*(body_h/2 - 2), 0])\n                    rotate([0, 0, (x*y==1)?45:-45])\n                        cube([3, 3, body_d + 1], center = true);\n    }\n}\n\nmodule shackle() {\n    // U-shaped shackle\n    shackle_base_z = body_h/2;\n    shackle_top_z = shackle_base_z + shackle_gap;\n\n    // Left leg\n    translate([-body_w/4, 0, shackle_base_z])\n        cylinder(r = shackle_r, h = shackle_gap);\n\n    // Right leg (shorter to allow opening)\n    translate([body_w/4, 0, shackle_base_z])\n        cylinder(r = shackle_r, h = shackle_gap - 2);\n\n    // Top arch\n    translate([0, 0, shackle_top_z])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(r = body_w/2 - shackle_r, h = 2*shackle_r, center = true);\n                translate([0, 0, -shackle_r - 1])\n                    cube([body_w + 2, 2*shackle_r + 2, 2*shackle_r + 2], center = true);\n            }\n}\n\nmodule keyway_detail() {\n    // Keyway wards (simple vertical ribs)\n    for(i = [-1:1]) {\n        translate([i*1.2, 0, 0])\n            cube([0.4, keyhole_h - 1, body_d + 0.2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    lock_body();\n    shackle();\n    // Keyway detail inside the slot\n    translate([0, 0, body_d/2])\n        keyway_detail();\n}",
    "renders": true
  },
  {
    "building": "canal",
    "openscad_code": "// Realistic canal with medium complexity\n// Dimensions in mm, printable size ~80mm\n\n// Parameters\ncanal_length = 80;\ncanal_width = 30;\ncanal_depth = 8;\nwall_thickness = 2;\nwalkway_width = 12;\nbridge_width = 20;\nbridge_height = 12;\n\n// Water color\ncolor([0.2,0.4,0.8]) \n\n// Main canal structure\ndifference() {\n    // Canal basin\n    union() {\n        // Bottom floor\n        translate([0,0,-canal_depth-wall_thickness])\n            cube([canal_length+10, canal_width+10, wall_thickness], center=true);\n        \n        // Canal walls\n        for(side = [-1, 1]) {\n            // Long walls\n            translate([0, side * canal_width/2, -canal_depth/2])\n                cube([canal_length+10, wall_thickness, canal_depth], center=true);\n            \n            // Short walls\n            translate([side * canal_length/2, 0, -canal_depth/2])\n                cube([wall_thickness, canal_width, canal_depth], center=true);\n        }\n        \n        // Walkways\n        for(side = [-1, 1]) {\n            translate([0, side * (canal_width/2 + walkway_width/2), -wall_thickness/2])\n                cube([canal_length, walkway_width, wall_thickness], center=true);\n        }\n    }\n    \n    // Hollow out canal\n    translate([0,0,-canal_depth/2])\n        cube([canal_length-wall_thickness, canal_width-wall_thickness, canal_depth+1], center=true);\n    \n    // Water surface opening\n    translate([0,0,0.1])\n        cube([canal_length-wall_thickness*2, canal_width-wall_thickness*2, 1], center=true);\n}\n\n// Bridge\ntranslate([0,0,bridge_height/2]) {\n    difference() {\n        // Bridge deck\n        cube([bridge_width, canal_width+walkway_width*2, 2], center=true);\n        \n        // Arch opening\n        translate([0,0,-1])\n            cylinder(h=4, r1=bridge_width/2-4, r2=bridge_width/2-4, center=true);\n    }\n    \n    // Bridge supports\n    for(side = [-1, 1]) {\n        translate([side * (bridge_width/2 - 3), 0, -bridge_height/2])\n            cube([6, canal_width+walkway_width*2, bridge_height], center=true);\n    }\n    \n    // Railings\n    for(side = [-1, 1]) {\n        translate([0, side * (canal_width/2 + walkway_width/2 - 2), bridge_height/2 - 1])\n            cube([bridge_width-4, 2, 3], center=true);\n    }\n}\n\n// Steps on walkways\nfor(side = [-1, 1]) {\n    for(i = [-3:1:3]) {\n        translate([i * 10, side * (canal_width/2 + walkway_width/2 - 2), -wall_thickness/2 - 1])\n            scale([0.8, 0.8, 1])\n                cube([8, 8, 2], center=true);\n    }\n}\n\n// Mooring posts\nfor(pos = [-30, 30]) {\n    for(side = [-1, 1]) {\n        translate([pos, side * (canal_width/2 - 3), 0])\n            cylinder(h=10, r=1.5, center=false);\n        translate([pos, side * (canal_width/2 - 3), 10])\n            sphere(r=2);\n    }\n}\n\n// Decorative building facades along canal\nmodule building_facade() {\n    difference() {\n        translate([0,0,0])\n            cube([8, 4, 6], center=true);\n        for(window = [-2, 0, 2]) {\n            translate([0, 2.1, window])\n                cube([7.5, 0.5, 1.5], center=true);\n        }\n        translate([0,0,4])\n            cube([7, 3.5, 2], center=true);\n    }\n}\n\n// Place facades\nfor(i = [-2:1:2]) {\n    for(side = [-1, 1]) {\n        translate([i * 15, side * (canal_width/2 + walkway_width + 2), 3])\n            rotate([0,0,side * 90])\n                building_facade();\n    }\n}",
    "renders": true
  },
  {
    "building": "channel",
    "openscad_code": "// Realistic medium-complexity drainage channel\n// Overall dimensions ~80 mm long, 30 mm wide, 25 mm high\n$fn = 36;\n\n// Main channel body\nmodule channel_body() {\n    difference() {\n        // Outer shell with tapered sides\n        hull() {\n            translate([-2, 3, 0]) cube([84, 24, 25]);\n            translate([-2, 3, 25]) cube([84, 20, 2]);\n        }\n        \n        // Inner cavity\n        translate([0, 5, 2]) cube([80, 20, 21]);\n        \n        // Sloped bottom\n        translate([-1, 5, 1]) rotate([0, 15, 0]) cube([82, 20, 5]);\n    }\n}\n\n// Grating slots\nmodule grating() {\n    difference() {\n        // Grating plate\n        translate([0, 5, 22]) cube([80, 20, 3]);\n        \n        // Drain slots\n        for (x = [5:10:75]) {\n            translate([x, 6, 22.5]) cube([8, 18, 2.5]);\n        }\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    for (x = [15:20:65]) {\n        translate([x, 0, 0]) cube([2, 3, 25]);\n        translate([x, 25, 0]) cube([2, 3, 25]);\n    }\n}\n\n// Mounting flanges\nmodule flanges() {\n    difference() {\n        // Flange body\n        translate([-5, 0, 0]) cube([10, 30, 3]);\n        translate([75, 0, 0]) cube([10, 30, 3]);\n        \n        // Mounting holes\n        for (y = [7:16:23]) {\n            translate([-2.5, y, -1]) cylinder(h=5, r=2.5);\n            translate([82.5, y, -1]) cylinder(h=5, r=2.5);\n        }\n    }\n}\n\n// Drain outlet\nmodule drain_outlet() {\n    difference() {\n        // Outlet tube\n        translate([40-7.5, 25, 5]) cube([15, 8, 15]);\n        \n        // Inner hole\n        translate([40-5, 25, 5]) cube([10, 8, 15]);\n        \n        // 45° chamfer\n        translate([40-5, 25, 19]) rotate([0, 45, 0]) cube([10, 8, 5]);\n    }\n}\n\n// Assembly\nunion() {\n    channel_body();\n    grating();\n    ribs();\n    flanges();\n    drain_outlet();\n}",
    "renders": true
  },
  {
    "building": "ditch",
    "openscad_code": "// Realistic 3D Printable Ditch Model\n// Medium complexity, ~120 lines, no overhangs\n\n$fn = 32;  // Smooth curves\n\n// Overall dimensions (mm)\nditch_length = 70;\nditch_width = 25;\nditch_depth = 8;\nwall_thickness = 2;\n\nmodule ditch_base() {\n    // Main excavation\n    difference() {\n        // Ground block\n        cube([ditch_length + 10, ditch_width + 10, ditch_depth + 2], center = true);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n            cube([ditch_length, ditch_width, ditch_depth + 2], center = true);\n    }\n}\n\nmodule ditch_walls() {\n    // Left & right retaining walls\n    for (side = [-1, 1]) {\n        translate([0, side * (ditch_width/2 + wall_thickness/2), 0])\n            cube([ditch_length + 4, wall_thickness, ditch_depth + 2], center = true);\n    }\n    \n    // End walls\n    for (end = [-1, 1]) {\n        translate([end * (ditch_length/2 + wall_thickness/2), 0, 0])\n            cube([wall_thickness, ditch_width + 4, ditch_depth + 2], center = true);\n    }\n}\n\nmodule bank_slopes() {\n    // Sloped earth banks\n    for (side = [-1, 1]) {\n        translate([0, side * (ditch_width/2 + wall_thickness + 5), -ditch_depth/2])\n            rotate([0, side * 20, 0])\n                cube([ditch_length + 20, 12, 6], center = true);\n    }\n    \n    for (end = [-1, 1]) {\n        translate([end * (ditch_length/2 + wall_thickness + 5), 0, -ditch_depth/2])\n            rotate([0, end * 20, 0])\n                cube([12, ditch_width + 20, 6], center = true);\n    }\n}\n\nmodule drainage_pipe() {\n    // Simple drainage pipe at bottom\n    translate([0, 0, -ditch_depth/2 + 1])\n        rotate([90, 0, 0])\n        cylinder(h = ditch_length - 2, r = 1.5, center = true);\n}\n\nmodule vegetation_clumps() {\n    // Grass tufts along banks\n    for (i = [0:3]) {\n        for (side = [-1, 1]) {\n            translate([\n                -ditch_length/2 + 10 + i*20, \n                side * (ditch_width/2 + wall_thickness + 3), \n                -ditch_depth/2 + 1.5\n            ]) {\n                scale([1, 1, 1.5])\n                    sphere(r = 1.8);\n            }\n        }\n    }\n}\n\nmodule water_surface() {\n    // Slightly below top edge\n    translate([0, 0, -ditch_depth/2 + 1])\n        cube([ditch_length - 2, ditch_width - 2, 0.5], center = true);\n}\n\nmodule erosion_details() {\n    // Small erosion notches\n    for (i = [0:4]) {\n        translate([-ditch_length/2 + 7 + i*14, 0, -ditch_depth/2 + 1])\n            scale([2, 0.8, 1])\n                sphere(r = 1.2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    ditch_base();\n    ditch_walls();\n    bank_slopes();\n    \n    // Details\n    drainage_pipe();\n    vegetation_clumps();\n    water_surface();\n    erosion_details();\n}",
    "renders": true
  },
  {
    "building": "culvert",
    "openscad_code": "// Realistic Culvert for 3D printing\n// Overall length: 80 mm, outer diameter: 30 mm, wall thickness: 2 mm\n\n$fn = 48;\n\n// Main parameters\nculvert_length = 80;\nculvert_outer_diameter = 30;\nwall_thickness = 2;\npipe_inner = culvert_outer_diameter - 2 * wall_thickness;\nflange_width = 6;\nflange_thickness = 3;\nheadwall_height = 20;\nheadwall_width = 50;\nheadwall_thickness = 8;\nwingwall_length = 35;\nwingwall_height = 18;\nwingwall_thickness = 5;\nearth_cover = 15;\n\n// Main pipe body\nmodule culvert_pipe() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = culvert_length, d = culvert_outer_diameter, center = true);\n        // Inner hollow\n        cylinder(h = culvert_length + 1, d = pipe_inner, center = true);\n    }\n}\n\n// Flanges at each end for joint simulation\nmodule flanges() {\n    for (z = [-culvert_length/2 + flange_thickness/2, culvert_length/2 - flange_thickness/2]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = flange_thickness, d = culvert_outer_diameter + flange_width);\n                cylinder(h = flange_thickness + 1, d = culvert_outer_diameter);\n            }\n    }\n}\n\n// Headwall at inlet\nmodule headwall_inlet() {\n    translate([0, 0, -culvert_length/2 - headwall_thickness/2]) {\n        difference() {\n            // Main headwall block\n            cube([headwall_width, headwall_thickness, headwall_height], center = true);\n            // Pipe opening\n            cylinder(h = headwall_thickness + 1, d = pipe_inner, center = true);\n        }\n    }\n}\n\n// Headwall at outlet\nmodule headwall_outlet() {\n    mirror([0, 0, 1]) headwall_inlet();\n}\n\n// Wing walls (angled retainers)\nmodule wing_walls() {\n    for (side = [-1, 1]) {\n        // Left wing\n        translate([side * headwall_width/2, 0, -culvert_length/2 - headwall_thickness/2]) {\n            rotate([0, 0, side * 30]) {\n                difference() {\n                    translate([side * wingwall_length/2, 0, 0])\n                        cube([wingwall_length, wingwall_thickness, wingwall_height], center = true);\n                    // Cut top angle\n                    translate([side * wingwall_length, 0, wingwall_height/2])\n                        rotate([0, side * 30, 0])\n                            cube([wingwall_length*2, wingwall_thickness+1, wingwall_height*2], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Earth cover on top\nmodule earth_cover_top() {\n    translate([0, 0, culvert_outer_diameter/2 + earth_cover/2]) {\n        difference() {\n            cube([headwall_width + 10, culvert_length + 10, earth_cover], center = true);\n            // Cut arch shape\n            for (x = [-headwall_width/2 - 5 : 5 : headwall_width/2 + 5])\n                translate([x, 0, 0])\n                    cylinder(h = earth_cover + 1, d = culvert_outer_diameter + 4, center = true);\n        }\n    }\n}\n\n// Assemble the culvert\nunion() {\n    culvert_pipe();\n    flanges();\n    headwall_inlet();\n    headwall_outlet();\n    wing_walls();\n    earth_cover_top();\n}",
    "renders": true
  },
  {
    "building": "tunnel",
    "openscad_code": "// Realistic railway tunnel for 3D printing\n// Medium complexity, printable without supports\n\ntunnel_length = 80;\ntunnel_height = 45;\ntunnel_width  = 40;\nwall_thickness = 2.5;\nbase_thickness = 4;\n\nmodule arch_profile(h, w, t) {\n    // Create a half-circle arch profile with thickness\n    difference() {\n        // Outer arch\n        union() {\n            translate([0, -t/2, 0])\n                cube([w, t, h], center=true);\n            translate([0, -t/2, h])\n                cylinder(h=t, r=w/2, center=true);\n        }\n        // Inner arch (hollow)\n        union() {\n            translate([0, -t/2-0.1, 0])\n                cube([w-2*t, t+0.2, h], center=true);\n            translate([0, -t/2-0.1, h])\n                cylinder(h=t+0.2, r=(w-2*t)/2, center=true);\n        }\n    }\n}\n\nmodule tunnel_section(l, h, w, t) {\n    // Single section of tunnel\n    difference() {\n        union() {\n            // Base slab\n            translate([0, 0, 0])\n                cube([l+2*t, w+2*t, t], center=true);\n            \n            // Left wall\n            translate([-l/2-t/2, 0, t/2+h/2])\n                cube([t, w+2*t, h+t], center=true);\n            \n            // Right wall\n            translate([l/2+t/2, 0, t/2+h/2])\n                cube([t, w+2*t, h+t], center=true);\n            \n            // Arch top\n            translate([0, 0, t+h])\n                rotate([90, 0, 0])\n                    arch_profile(h, w+2*t, l+2*t);\n        }\n        \n        // Interior hollow\n        translate([0, 0, t])\n            rotate([90, 0, 0])\n                arch_profile(h-1, w-2*t, l+2*t);\n    }\n}\n\nmodule rock_face(l, h, w, steps) {\n    // Create rough rock texture on tunnel face\n    for(i=[0:steps]) {\n        a = i * 360/steps;\n        r = w/2 + (sin(i*3)*2);\n        translate([0, 0, h])\n            rotate([0, 0, a])\n                translate([r, 0, 0])\n                    cube([4, 4, 8], center=true);\n    }\n}\n\nmodule tunnel_portal() {\n    // Detailed entrance portal\n    difference() {\n        union() {\n            // Main archway\n            translate([0, 0, base_thickness])\n                rotate([90, 0, 0])\n                    arch_profile(tunnel_height, tunnel_width, wall_thickness*2);\n            \n            // Portal frame\n            for(side=[-1, 1]) {\n                translate([side*(tunnel_width/2+wall_thickness), 0, base_thickness+tunnel_height/2])\n                    cube([wall_thickness*2, wall_thickness*2, tunnel_height], center=true);\n            }\n            \n            // Keystone detail\n            translate([0, wall_thickness, base_thickness+tunnel_height])\n                cube([tunnel_width/5, wall_thickness*2, wall_thickness*2], center=true);\n        }\n        \n        // Opening\n        translate([0, wall_thickness+1, base_thickness])\n            rotate([90, 0, 0])\n                arch_profile(tunnel_height-2*wall_thickness, tunnel_width-2*wall_thickness, wall_thickness*4);\n    }\n    \n    // Rock texture around portal\n    rock_face(tunnel_width*1.2, base_thickness+tunnel_height, tunnel_width*1.2, 16);\n}\n\n// Main tunnel body\ntranslate([0, 0, 0])\n    tunnel_section(tunnel_length, tunnel_height, tunnel_width, wall_thickness);\n\n// Entrance portal\ntranslate([-tunnel_length/2-wall_thickness, 0, 0])\n    tunnel_portal();\n\n// Exit portal (mirrored)\ntranslate([tunnel_length/2+wall_thickness, 0, 0])\n    mirror([1, 0, 0])\n        portal_portal();\n\n// Track bed\ntranslate([0, 0, base_thickness/2])\n    cube([tunnel_length+4*wall_thickness, tunnel_width-10, base_thickness], center=true);\n\n// Drainage channel\ntranslate([0, tunnel_width/2-3, base_thickness/2])\n    cube([tunnel_length+4*wall_thickness, 4, base_thickness/2], center=true);\ntranslate([0, -tunnel_width/2+3, base_thickness/2])\n    cube([tunnel_length+4*wall_thickness, 4, base_thickness/2], center=true);",
    "renders": true
  },
  {
    "building": "subway",
    "openscad_code": "// Realistic subway car in medium complexity\n// Overall dimensions: 90mm x 20mm x 25mm\n\n// Main body module\nmodule subway_body() {\n    // Base chassis with rounded edges\n    difference() {\n        // Main body block\n        translate([0, 0, 5]) cube([80, 18, 15], center=true);\n        \n        // Rounded top edge\n        translate([0, 0, 12.5])\n        scale([1, 1, 0.4])\n        sphere(9, $fn=20);\n    }\n    \n    // Roof\n    translate([0, 0, 15])\n    scale([1, 0.9, 0.3])\n    sphere(9.5, $fn=30);\n    \n    // Underbody details\n    translate([0, 0, -2])\n    cube([78, 16, 3], center=true);\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        cylinder(h=3, r=4, $fn=20);\n        translate([0, 0, -0.1])\n        cylinder(h=3.2, r=2, $fn=16);\n    }\n}\n\n// Window module\nmodule window() {\n    difference() {\n        cube([8, 0.5, 5]);\n        translate([0, 0.3, 0])\n        cube([7, 0.5, 4]);\n    }\n}\n\n// Door module\nmodule door() {\n    difference() {\n        cube([12, 0.5, 12]);\n        // Window in door\n        translate([0, 0.3, 2])\n        cube([10, 0.5, 6]);\n    }\n}\n\n// Coupler module\nmodule coupler() {\n    union() {\n        translate([0, 0, -1])\n        cylinder(h=2, r=2.5, $fn=12);\n        translate([0, 0, 1])\n        sphere(2.5, $fn=12);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    subway_body();\n    \n    // Wheels - 3 axles per side\n    for(i=[-25, 0, 25]) {\n        translate([i, -11, -2])\n        rotate([0, 0, 90])\n        wheel();\n        translate([i, 11, -2])\n        rotate([0, 0, 90])\n        wheel();\n    }\n    \n    // Windows - 4 per side\n    for(i=[-30, -15, 15, 30]) {\n        translate([i, 9.5, 7])\n        window();\n        translate([i, -9.5, 7])\n        window();\n    }\n    \n    // Doors - 2 per side\n    for(i=[-7.5, 7.5]) {\n        translate([i, 9.5, 6])\n        door();\n        translate([i, -9.5, 6])\n        door();\n    }\n    \n    // Front windshield\n    translate([-39.5, 0, 8])\n    scale([0.5, 1, 1])\n    cube([1, 10, 6]);\n    \n    // Rear windshield\n    translate([39.5, 0, 8])\n    scale([0.5, 1, 1])\n    cube([1, 10, 6]);\n    \n    // Front coupler\n    translate([-40, 0, -1])\n    coupler();\n    \n    // Rear coupler\n    translate([40, 0, -1])\n    coupler();\n    \n    // Roof details - HVAC unit\n    translate([0, 0, 18])\n    cube([40, 10, 3], center=true);\n    \n    // Pantograph base (simplified)\n    translate([-20, 0, 18.5])\n    cube([5, 6, 2], center=true);\n}",
    "renders": true
  },
  {
    "building": "metro",
    "openscad_code": "// Metro train - realistic style, medium complexity\n// Overall length: 80mm, width: 18mm, height: 24mm\n\n// Wall thickness for 3D printing\nwall = 1;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, 8]) cube([70, 16, 16], center=true);\n            translate([-30, 0, 12]) cube([10, 14, 8], center=true);\n            translate([30, 0, 12]) cube([10, 14, 8], center=true);\n        }\n        \n        // Remove interior\n        translate([0, 0, 8]) cube([68, 14, 14], center=true);\n        \n        // Remove bottom\n        translate([0, 0, -1]) cube([72, 18, 2], center=true);\n    }\n}\n\n// Cab front\nmodule cab_front() {\n    translate([-35, 0, 10]) {\n        difference() {\n            // Front nose\n            hull() {\n                cube([10, 16, 16], center=true);\n                translate([-5, 0, 0]) cube([2, 14, 14], center=true);\n            }\n            \n            // Driver window\n            translate([-2, 0, 6]) cube([6, 8, 8], center=true);\n            \n            // Remove interior\n            translate([0, 0, 0]) cube([8, 14, 14], center=true);\n        }\n    }\n}\n\n// Roof details\nmodule roof_details() {\n    // Main air conditioning unit\n    translate([0, 0, 17]) {\n        difference() {\n            cube([60, 14, 3], center=true);\n            translate([0, 0, -0.5]) cube([58, 12, 2], center=true);\n        }\n    }\n    \n    // Ventilation grilles\n    for (x = [-25, -15, -5, 5, 15, 25]) {\n        translate([x, 0, 17.2]) {\n            cube([6, 12, 0.5], center=true);\n        }\n    }\n}\n\n// Side doors\nmodule doors() {\n    for (x = [-20, -10, 0, 10, 20]) {\n        translate([x, 8.5, 6]) {\n            difference() {\n                cube([8, 1, 10]);\n                translate([1, -0.2, 1]) cube([6, 0.5, 8]);\n                translate([1, -0.2, 1]) cube([0.5, 0.5, 8]);\n                translate([6.5, -0.2, 1]) cube([0.5, 0.5, 8]);\n            }\n        }\n    }\n}\n\n// Windows between doors\nmodule windows() {\n    for (x = [-25, -15, -5, 5, 15, 25]) {\n        translate([x, 8.5, 9]) {\n            difference() {\n                cube([3, 1, 6]);\n                translate([0.5, -0.2, 0.5]) cube([2, 0.5, 5]);\n            }\n        }\n    }\n}\n\n// Bogies (wheel assemblies)\nmodule bogie() {\n    difference() {\n        hull() {\n            translate([0, 0, 1]) cube([12, 14, 4], center=true);\n            translate([0, 0, 0]) cube([16, 18, 2], center=true);\n        }\n        // Wheel cutouts\n        for (x = [-4, 4]) {\n            translate([x, 0, 0]) rotate([90, 0, 0]) \n                cylinder(h=20, r=3.5, center=true);\n        }\n    }\n}\n\n// Couplers\nmodule coupler() {\n    hull() {\n        cube([4, 8, 4], center=true);\n        translate([2, 0, 0]) cube([2, 6, 3], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    cab_front();\n    mirror([1, 0, 0]) {\n        cab_front();\n    }\n    \n    roof_details();\n    \n    // Side details\n    doors();\n    windows();\n    mirror([0, 1, 0]) {\n        doors();\n        windows();\n    }\n    \n    // Bogies and couplers\n    translate([-18, 0, 1]) bogie();\n    translate([18, 0, 1]) bogie();\n    translate([-38, 0, 2]) coupler();\n    translate([38, 0, 2]) coupler();\n}",
    "renders": true
  },
  {
    "building": "railway",
    "openscad_code": "// Railway track segment for 3D printing\n// Realistic medium-complexity model\n// Size: 80mm long, 20mm wide, 8mm high\n\n$fn = 50;  // Smooth curves for printing\n\n// Track parameters\ntrack_length = 80;\ntrack_width = 20;\nrail_height = 3;\ntie_width = 22;\ntie_height = 1.5;\ntie_spacing = 5;\nrail_gauge = 16.5;\nrail_top_width = 1.5;\nrail_base_width = 3;\n\n// Ballast parameters\nballast_width = 26;\nballast_height = 2;\n\n// Switch stand\nswitch_height = 8;\nswitch_base_size = 6;\n\n// Module for a single railroad tie\nmodule railroad_tie() {\n    difference() {\n        // Main tie\n        translate([-tie_width/2, -tie_height/2, 0])\n            cube([tie_width, tie_height, track_width]);\n        \n        // Tie plates for rails (indents)\n        for(x = [-rail_gauge/2 - rail_base_width/2, rail_gauge/2 - rail_base_width/2]) {\n            translate([x, -tie_height/2 - 0.1, track_width/2 - rail_base_width/2])\n                cube([rail_base_width, tie_height + 0.2, rail_base_width]);\n        }\n    }\n}\n\n// Module for rail profile\nmodule rail_profile() {\n    difference() {\n        // Rail base\n        translate([-rail_base_width/2, 0, 0])\n            cube([rail_base_width, rail_height, rail_base_width]);\n        \n        // Rail web\n        translate([-rail_top_width/2, rail_height/2, 0])\n            cube([rail_top_width, rail_height/2, rail_base_width]);\n        \n        // Rail head\n        translate([-rail_top_width/2, rail_height - 0.5, 0])\n            cube([rail_top_width, 0.5, rail_base_width]);\n    }\n}\n\n// Module for ballast bed\nmodule ballast_bed() {\n    // Main ballast layer\n    translate([-ballast_width/2, -ballast_height, 0])\n        cube([ballast_width, ballast_height, track_length]);\n    \n    // Tapered edges\n    for(side = [-1, 1]) {\n        translate([side * ballast_width/2, -ballast_height/2, 0])\n            rotate([0, 90, 0])\n                cylinder(h = ballast_width/2, r1 = ballast_height, r2 = 0);\n    }\n}\n\n// Module for switch stand\nmodule switch_stand() {\n    // Base\n    translate([-switch_base_size/2, 0, track_length/2])\n        cube([switch_base_size, switch_base_size/2, switch_base_size]);\n    \n    // Post\n    translate([0, switch_base_size/2, track_length/2 + switch_base_size/2])\n        cylinder(h = switch_height, r = switch_base_size/4);\n    \n    // Lever\n    translate([0, switch_base_size/2 + switch_height, track_length/2 + switch_base_size/2])\n        rotate([0, 90, 0])\n            cylinder(h = switch_base_size * 1.5, r = switch_base_size/8);\n}\n\n// Main assembly\nunion() {\n    // Ballast bed\n    ballast_bed();\n    \n    // Railroad ties\n    for(z = [0 : tie_spacing : track_length]) {\n        translate([0, 0, z])\n            railroad_tie();\n    }\n    \n    // Left rail\n    translate([-rail_gauge/2, 0, 0])\n        for(z = [0 : 2 : track_length]) {\n            translate([0, 0, z])\n                rail_profile();\n        }\n    \n    // Right rail\n    translate([rail_gauge/2, 0, 0])\n        for(z = [0 : 2 : track_length]) {\n            translate([0, 0, z])\n                rail_profile();\n        }\n    \n    // Switch stand\n    switch_stand();\n}",
    "renders": true
  },
  {
    "building": "tramway",
    "openscad_code": "// Realistic medium-complexity tramway model\n// Designed for 3D printing, roughly 1:100 scale\n\n$fn=32;\n\n// Overall dimensions\ntram_length = 80;\ntram_width = 18;\ntram_height = 22;\nwheel_diameter = 4.2;\n\nmodule tram_body() {\n    // Lower chassis box\n    difference() {\n        translate([-tram_length/2, -tram_width/2, 0])\n            cube([tram_length, tram_width, 6]);\n        \n        // Wheel cutouts left\n        for(x=[-25, -15, -5, 5, 15, 25])\n            translate([x, -tram_width/2-1, 0])\n                rotate([90,0,0])\n                    cylinder(h=tram_width+2, d=wheel_diameter+1.2, $fn=20);\n        \n        // Wheel cutouts right\n        for(x=[-25, -15, -5, 5, 15, 25])\n            translate([x, tram_width/2+1, 0])\n                rotate([90,0,0])\n                    cylinder(h=tram_width+2, d=wheel_diameter+1.2, $fn=20);\n    }\n    \n    // Upper body\n    difference() {\n        translate([-tram_length/2+2, -tram_width/2+1, 6])\n            cube([tram_length-4, tram_width-2, 12]);\n        \n        // Door recesses\n        translate([-20, -tram_width/2+1.5, 6])\n            cube([5, tram_width-3, 10]);\n        translate([-10, -tram_width/2+1.5, 6])\n            cube([5, tram_width-3, 10]);\n        translate([15, -tram_width/2+1.5, 6])\n            cube([5, tram_width-3, 10]);\n    }\n    \n    // Roof\n    translate([-tram_length/2+2, -tram_width/2+1, 18])\n        cube([tram_length-4, tram_width-2, 3]);\n    \n    // Cab front\n    difference() {\n        translate([tram_length/2-6, -tram_width/2+1, 6])\n            cube([4, tram_width-2, 12]);\n        \n        // Windshield\n        translate([tram_length/2-5.5, -tram_width/2+3, 12])\n            cube([3, tram_width-6, 5]);\n    }\n    \n    // Cab rear\n    difference() {\n        translate([-tram_length/2+2, -tram_width/2+1, 6])\n            cube([4, tram_width-2, 12]);\n        \n        // Rear window\n        translate([-tram_length/2+2.5, -tram_width/2+3, 12])\n            cube([3, tram_width-6, 5]);\n    }\n}\n\nmodule windows() {\n    // Side windows - left\n    for(x=[-35,-25,-15,-5,5,15,25,30])\n        translate([x, -tram_width/2+1.1, 12])\n            cube([4, 0.5, 3]);\n    \n    // Side windows - right\n    for(x=[-35,-25,-15,-5,5,15,25,30])\n        translate([x, tram_width/2-1.6, 12])\n            cube([4, 0.5, 3]);\n}\n\nmodule roof_details() {\n    // Pantograph base\n    translate([0, 0, 21])\n        cube([8, 3, 1]);\n    \n    // Roof ventilators\n    for(x=[-25, 0, 25])\n        translate([x, 0, 21])\n            cylinder(h=1.5, d=3);\n}\n\nmodule bogies() {\n    // Front bogie\n    translate([20, 0, wheel_diameter/2])\n        difference() {\n            cube([12, 16, 3]);\n            translate([6, 0, -1])\n                cube([2, 14, 5]);\n        }\n    \n    // Rear bogie\n    translate([-20, 0, wheel_diameter/2])\n        difference() {\n            cube([12, 16, 3]);\n            translate([6, 0, -1])\n                cube([2, 14, 5]);\n        }\n}\n\nmodule wheels() {\n    // Left wheels\n    for(x=[-25, -15, -5, 5, 15, 25])\n        translate([x, -tram_width/2, wheel_diameter/2])\n            rotate([90,0,0])\n                cylinder(h=2, d=wheel_diameter, $fn=20);\n    \n    // Right wheels\n    for(x=[-25, -15, -5, 5, 15, 25])\n        translate([x, tram_width/2, wheel_diameter/2])\n            rotate([90,0,0])\n                cylinder(h=2, d=wheel_diameter, $fn=20);\n}\n\nmodule underframe() {\n    // Fuel tank\n    translate([0, 0, 2])\n        cube([30, 8, 3]);\n    \n    // Equipment boxes\n    translate([-10, -tram_width/2+1, 2])\n        cube([8, 3, 2]);\n    translate([-10, tram_width/2-4, 2])\n        cube([8, 3, 2]);\n    translate([10, -tram_width/2+1, 2])\n        cube([8, 3, 2]);\n    translate([10, tram_width/2-4, 2])\n        cube([8, 3, 2]);\n}\n\n// Main assembly\nunion() {\n    tram_body();\n    windows();\n    roof_details();\n    bogies();\n    wheels();\n    underframe();\n}",
    "renders": true
  },
  {
    "building": "parkway",
    "openscad_code": "// Realistic Parkway Model – Medium Complexity\n// All dimensions in mm, printable without supports\n\n$fn = 32;  // Smooth curves\n\n// Overall footprint\nlength = 90;\nwidth  = 35;\nscale_factor = 1;  // Keep it printable\n\n// Main road surface\nmodule roadway() {\n    color(\"darkgray\")\n    linear_extrude(height = 2)\n    offset(r = 1)\n    square([length, width], center = true);\n}\n\n// Sidewalk slabs on both sides\nmodule sidewalk() {\n    color(\"lightgray\")\n    for (side = [-1, 1])\n        translate([0, side * (width/2 + 5), 1])\n        cube([length, 10, 2], center = true);\n}\n\n// Curb stones along edges\nmodule curb() {\n    color(\"gray\")\n    for (side = [-1, 1]) {\n        translate([0, side * (width/2 + 1), 1])\n        cube([length, 2, 2], center = true);\n    }\n}\n\n// Lane-divider dashed line\nmodule lane_markings() {\n    color(\"white\")\n    for (i = [-length/2 + 5 : 10 : length/2 - 5]) {\n        translate([i, 0, 2.1])\n        cube([5, 1, 0.2], center = true);\n    }\n}\n\n// Street lamp post\nmodule lamp_post(pos_x = 0, side = 1) {\n    translate([pos_x, side * (width/2 + 9), 0]) {\n        // Pole\n        color(\"silver\")\n        cylinder(h = 25, d = 2);\n        // Arm\n        translate([0, -side * 5, 22])\n        rotate([90, 0, 0])\n        cylinder(h = 10, d = 1.5);\n        // Light fixture\n        translate([0, -side * 10, 22])\n        color(\"darkgray\")\n        sphere(d = 3);\n    }\n}\n\n// Tree trunk + foliage\nmodule tree(pos_x = 0, side = 1) {\n    translate([pos_x, side * (width/2 + 15), 0]) {\n        // Trunk\n        color(\"brown\")\n        cylinder(h = 12, d = 3);\n        // Foliage\n        color(\"forestgreen\")\n        translate([0, 0, 15])\n        sphere(d = 10);\n    }\n}\n\n// Combine all components\nunion() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        roadway();\n        sidewalk();\n        curb();\n        lane_markings();\n\n        // Place lamps along both sides\n        for (x = [-length/2 + 10 : 20 : length/2 - 10]) {\n            lamp_post(x, 1);\n            lamp_post(x, -1);\n        }\n\n        // Place trees between lamps\n        for (x = [-length/2 + 20 : 20 : length/2 - 10]) {\n            tree(x, 1);\n            tree(x, -1);\n        }\n    }\n}",
    "renders": true
  },
  {
    "building": "turnpike",
    "openscad_code": "// Turnpike Toll Booth in Realistic Style\n// Medium complexity with proper 3D printing considerations\n\n$fn = 32;\n\n// Main parameters\nbase_width = 80;\nbase_length = 60;\nbase_height = 4;\nbooth_width = 30;\nbooth_length = 25;\nbooth_height = 45;\nroof_overhang = 5;\nbar_length = 50;\nbar_thickness = 3;\n\n// Base platform with drainage slope\nmodule base_platform() {\n    difference() {\n        // Main base\n        translate([0, 0, base_height/2])\n            cube([base_width, base_length, base_height], center=true);\n        \n        // Drainage channel\n        translate([0, -base_length/4, base_height])\n            cube([base_width-10, 5, 2], center=true);\n        \n        // Cable trench\n        translate([base_width/4, 0, base_height])\n            cube([6, base_length-10, 3], center=true);\n    }\n}\n\n// Toll booth structure\nmodule toll_booth() {\n    // Main booth walls\n    difference() {\n        // Outer shell\n        translate([0, 0, booth_height/2 + base_height])\n            cube([booth_width, booth_length, booth_height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, booth_height/2 + base_height + 2])\n            cube([booth_width-4, booth_length-4, booth_height-2], center=true);\n        \n        // Door opening\n        translate([0, booth_length/2 - 1, base_height + 15])\n            cube([10, 2, 25], center=true);\n        \n        // Service window\n        translate([0, -booth_length/2 + 1, base_height + 25])\n            cube([20, 2, 15], center=true);\n    }\n}\n\n// Roof with shingles\nmodule roof() {\n    // Main roof\n    difference() {\n        translate([0, 0, booth_height + base_height + 2])\n            cube([booth_width + roof_overhang*2, \n                  booth_length + roof_overhang*2, \n                  4], center=true);\n        \n        // Roof slope\n        translate([0, 0, booth_height + base_height + 6])\n            cube([booth_width + roof_overhang*2 - 4, \n                  booth_length + roof_overhang*2 - 4, \n                  4], center=true);\n    }\n    \n    // Roof shingles\n    for (i = [-1:1]) {\n        translate([i * 10, 0, booth_height + base_height + 4.5])\n            cube([8, booth_length + roof_overhang*2 + 2, 1], center=true);\n    }\n}\n\n// Barrier arm\nmodule barrier_arm() {\n    rotate([0, 0, -45])\n    translate([0, 0, base_height + 25])\n        cube([bar_length, bar_thickness, bar_thickness], center=false);\n}\n\n// Barrier post\nmodule barrier_post() {\n    cylinder(h=30, r1=3, r2=2, center=false);\n}\n\n// Lane markers\nmodule lane_markers() {\n    for (i = [-1, 1]) {\n        translate([i * 20, 0, base_height + 0.5])\n            cube([2, base_length - 10, 1], center=true);\n    }\n    \n    // Dashed center line\n    for (j = [-20:10:20]) {\n        translate([j, 0, base_height + 0.5])\n            cube([5, 2, 1], center=true);\n    }\n}\n\n// Security camera\nmodule security_camera() {\n    translate([booth_width/2 - 5, 0, booth_height + base_height + 6])\n        rotate([45, 0, 0])\n            cylinder(h=8, r1=4, r2=3, center=false);\n    \n    // Camera lens\n    translate([booth_width/2 - 5, 0, booth_height + base_height + 13])\n        sphere(d=4);\n}\n\n// Payment terminal\nmodule payment_terminal() {\n    translate([0, booth_length/2 + 5, base_height + 15])\n        cube([8, 6, 12], center=true);\n    \n    // Screen\n    translate([0, booth_length/2 + 8.5, base_height + 20])\n        cube([6, 0.5, 4], center=true);\n}\n\n// Assembly\nunion() {\n    // Base structures\n    base_platform();\n    toll_booth();\n    roof();\n    \n    // Barrier system\n    translate([-base_width/4, base_length/2 - 5, base_height])\n        barrier_post();\n    translate([-base_width/4, base_length/2 - 5, base_height])\n        barrier_arm();\n    \n    // Lane infrastructure\n    lane_markers();\n    security_camera();\n    payment_terminal();\n    \n    // Support pillars\n    for (x = [-booth_width/2 + 5, booth_width/2 - 5]) {\n        for (y = [-booth_length/2 + 5, booth_length/2 - 5]) {\n            translate([x, y, base_height + booth_height/2])\n                cylinder(h=booth_height, r=2, center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "building": "causeway",
    "openscad_code": "// Realistic Causeway - Medium Complexity\n// Modular stone pier and arch construction\n\n$fn = 32;  // Smooth curves for arches\n\n// Main dimensions (mm)\ncauseway_length = 80;\ncauseway_width = 25;\npier_height = 15;\narch_height = 8;\nstone_size = 2;\n\n// Stone texture module\nmodule stone_block(w, h, d, offset) {\n    translate([0, offset, 0])\n    difference() {\n        cube([w, h, d]);\n        // Add slight irregularity to stone faces\n        for (i = [0:1]) {\n            translate([w/4 + i*w/2, h/2, d/4 + i*d/2])\n            sphere(0.3);\n        }\n    }\n}\n\n// Single arch module\nmodule arch(span, height, thickness) {\n    // Left pier\n    difference() {\n        cube([thickness*2, thickness, height + arch_height]);\n        // Mortar joints\n        for (z = [0:2:height]) {\n            translate([0, -0.1, z])\n            cube([thickness*2+0.2, thickness+0.2, 0.5]);\n        }\n    }\n    \n    // Right pier (mirrored)\n    translate([span, 0, 0])\n    mirror([1, 0, 0])\n    difference() {\n        cube([thickness*2, thickness, height + arch_height]);\n        for (z = [0:2:height]) {\n            translate([0, -0.1, z])\n            cube([thickness*2+0.2, thickness+0.2, 0.5]);\n        }\n    }\n    \n    // Arch structure\n    translate([thickness*2, thickness/2, height])\n    rotate([90, 0, 0])\n    difference() {\n        // Outer arch\n        cylinder(h=thickness, r1=span/2, r2=span/2);\n        // Inner arch (cutout)\n        translate([0, -0.1, 0])\n        cylinder(h=thickness+0.2, r1=span/2-thickness, r2=span/2-thickness);\n    }\n}\n\n// Causeway deck with stone surface\nmodule causeway_deck(length, width) {\n    // Main deck\n    cube([length, width, 2]);\n    \n    // Stone surface pattern\n    for (x = [-length/2+1:2:length/2-1]) {\n        for (y = [-width/2+1:2:width/2-1]) {\n            translate([x, y, 2])\n            stone_block(2, 0.5, 2, 0);\n        }\n    }\n}\n\n// Complete causeway assembly\nmodule causeway() {\n    // Road surface\n    translate([0, 0, pier_height + arch_height])\n    causeway_deck(causeway_length, causeway_width);\n    \n    // Parapet walls\n    translate([-causeway_length/2 - 1, -causeway_width/2 - 1, pier_height + arch_height + 2])\n    cube([causeway_length + 2, 1.5, 2]);\n    \n    translate([-causeway_length/2 - 1, causeway_width/2 - 0.5, pier_height + arch_height + 2])\n    cube([causeway_length + 2, 1.5, 2]);\n    \n    // Support arches\n    for (i = [-30:25:30]) {\n        translate([i, 0, 0])\n        arch(20, pier_height, 2);\n    }\n    \n    // Foundation blocks\n    translate([0, 0, -1])\n    cube([causeway_length + 10, causeway_width + 10, 1]);\n}\n\n// Render the causeway\ncauseway();",
    "renders": true
  },
  {
    "building": "breakwater",
    "openscad_code": "// Realistic 3D-printable breakwater model\n// Size: 90 mm long x 40 mm wide x 25 mm high\n// Medium complexity with realistic details\n\n$fn = 24;\n\n// Main parameters\nbreakwater_length = 90;\nbreakwater_width = 40;\nbreakwater_height = 25;\nwall_thickness = 2.5;\nbase_height = 5;\narmor_block_size = 6;\n\n// Main breakwater structure\nmodule main_breakwater() {\n    difference() {\n        // Solid concrete body\n        cube([breakwater_length, breakwater_width, breakwater_height]);\n        \n        // Hollow out interior for 3D printing\n        translate([wall_thickness, wall_thickness, base_height]) \n            cube([\n                breakwater_length - 2*wall_thickness, \n                breakwater_width - 2*wall_thickness, \n                breakwater_height - base_height - wall_thickness\n            ]);\n    }\n}\n\n// Curved top for wave deflection\nmodule curved_top() {\n    difference() {\n        // Main curve\n        translate([0, 0, breakwater_height])\n            cylinder(h = 8, r1 = breakwater_width/2, r2 = breakwater_width/2, center = true);\n        \n        // Trim to length\n        translate([-5, 0, breakwater_height])\n            cube([breakwater_length + 10, breakwater_width, 10]);\n    }\n}\n\n// Tetrapod armor blocks\nmodule tetrapod_armor() {\n    // Left side armor\n    for(i = [0:3]) {\n        translate([10 + i*20, breakwater_width/2 - 3, base_height]) {\n            rotate([0, 0, 45*i]) {\n                union() {\n                    // Central sphere\n                    sphere(d = armor_block_size);\n                    \n                    // Four legs\n                    for(angle = [0:90:270]) {\n                        rotate([0, 0, angle])\n                            translate([armor_block_size/2, 0, 0])\n                                rotate([90, 0, 0])\n                                    cylinder(h = armor_block_size/2, r = armor_block_size/3);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Right side armor\n    for(i = [0:3]) {\n        translate([20 + i*20, -breakwater_width/2 + 3, base_height]) {\n            rotate([0, 0, -30*i]) {\n                mirror([0, 1, 0]) {\n                    union() {\n                        sphere(d = armor_block_size);\n                        for(angle = [0:90:270]) {\n                            rotate([0, 0, angle])\n                                translate([armor_block_size/2, 0, 0])\n                                    rotate([90, 0, 0])\n                                        cylinder(h = armor_block_size/2, r = armor_block_size/3);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wave deflector ribs\nmodule deflector_ribs() {\n    for(pos = [15:20:breakwater_length-15]) {\n        translate([pos, 0, breakwater_height - 5]) {\n            difference() {\n                cube([2, breakwater_width, 10]);\n                translate([0, 0, 5])\n                    cylinder(h = 5, r1 = breakwater_width/2, r2 = breakwater_width/2 - 2);\n            }\n        }\n    }\n}\n\n// Base foundation blocks\nmodule foundation_blocks() {\n    for(x = [5:10:breakwater_length-5]) {\n        for(y = [-15, 15]) {\n            translate([x, y, 0]) {\n                cube([8, 8, base_height]);\n                translate([4, 4, 0])\n                    cylinder(h = base_height, r = 4);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    main_breakwater();\n    \n    // Top features\n    curved_top();\n    deflector_ribs();\n    \n    // Armor protection\n    tetrapod_armor();\n    \n    // Foundation\n    foundation_blocks();\n}",
    "renders": true
  },
  {
    "building": "levee",
    "openscad_code": "// Realistic Levee Model - Medium Complexity\n// Overall dimensions: 90mm x 30mm x 25mm (printable without supports)\n\n// Levee body with realistic slope\nmodule levee_body() {\n    // Main sloped core\n    linear_extrude(height=20, scale=[0.7, 1], slices=20) {\n        square([90, 30], center=true);\n    }\n    \n    // Crown reinforcement\n    translate([0, 0, 20])\n        cube([20, 32, 2], center=true);\n    \n    // Toe protection on water side\n    difference() {\n        translate([35, 0, 0])\n            cube([20, 32, 5]);\n        translate([35, 0, 5])\n            rotate([0, 10, 0])\n                cube([25, 40, 5]);\n    }\n    \n    // Land side berm\n    translate([-40, 0, 0])\n        cube([15, 35, 8]);\n}\n\n// Riprap protection layer\nmodule riprap() {\n    for(x = [-40:5:40]) {\n        for(y = [-12:4:12]) {\n            if(x > 20 || x < -30) {\n                translate([x, y, 0])\n                    scale([1, 1, 0.8]) sphere(r=1.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Concrete floodwall on crown\nmodule floodwall() {\n    translate([0, 0, 22])\n        cube([25, 2, 8], center=true);\n    \n    // I-beam posts every 10mm\n    for(x = [-10:10:10]) {\n        translate([x, 0, 22])\n            cube([2, 3, 8], center=true);\n    }\n}\n\n// Drainage culvert\nmodule culvert() {\n    difference() {\n        translate([0, 0, 8])\n            cube([50, 5, 4], center=true);\n        translate([0, 0, 10])\n            rotate([0, 90, 0])\n                cylinder(h=50, r=1.5, $fn=20, center=true);\n    }\n}\n\n// Access road on crest\nmodule access_road() {\n    translate([0, 0, 20.5])\n        cube([85, 8, 0.5], center=true);\n    \n    // Road markings\n    for(x = [-30:10:30]) {\n        translate([x, 0, 21.1])\n            cube([5, 0.5, 0.1], center=true);\n    }\n}\n\n// Vegetation cover\nmodule vegetation() {\n    for(i = [-20:5:20]) {\n        for(j = [-10:5:10]) {\n            if(j > -8 && j < 8 && i < 15) {\n                translate([i, j, 22.1])\n                    cylinder(h=2, r=0.5, $fn=6);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    levee_body();\n    riprap();\n    culvert();\n    floodwall();\n    access_road();\n    vegetation();\n}",
    "renders": true
  },
  {
    "building": "embankment",
    "openscad_code": "// Realistic embankment model for 3D printing\n// Approx. 80 mm long, 50 mm wide, 20 mm high\n\n$fn = 36;\n\n// Main parameters\nembankment_length = 80;\nembankment_width = 50;\nembankment_height = 20;\nwall_thickness = 2;\n\nmodule embankment_base() {\n    // Main earth embankment body with gentle slope\n    difference() {\n        // Main sloped block\n        hull() {\n            translate([-5, 0, 0])\n                cube([10, embankment_width, 2]);\n            translate([embankment_length + 5, 0, 0])\n                cube([10, embankment_width, embankment_height]);\n        }\n        \n        // Carve out the top surface for road\n        translate([0, -embankment_width/2 - 1, embankment_height - 2])\n            cube([embankment_length + 10, embankment_width + 2, 5]);\n    }\n}\n\nmodule retaining_wall() {\n    // Stone retaining wall at the base\n    module stone_block(x, y, z, w, d, h) {\n        translate([x, y, z])\n            cube([w, d, h]);\n    }\n    \n    // Create staggered stone blocks\n    for(i = [0:5]) {\n        for(j = [0:3]) {\n            stone_block(\n                i * 15 + (j % 2) * 7,\n                j * 12 - 24,\n                0,\n                10 + (j % 3) * 2,\n                6,\n                4 + (i + j) % 3\n            );\n        }\n    }\n}\n\nmodule drainage_ditch() {\n    // Small drainage channel along one side\n    translate([0, embankment_width/2 + 2, 0])\n        cube([embankment_length, 4, 1]);\n}\n\nmodule vegetation() {\n    // Simple grass tufts using small cylinders\n    module grass_tuft(x, z) {\n        translate([x, -embankment_width/2 + 5, z])\n            cylinder(h = 1.5, r1 = 0.5, r2 = 0.2);\n    }\n    \n    // Create rows of grass tufts\n    for(i = [5:10:embankment_length - 5]) {\n        for(j = [0:3]) {\n            grass_tuft(\n                i + (j * 3),\n                (j % 2) + 2\n            );\n        }\n    }\n}\n\nmodule road_surface() {\n    // Top road surface with slight crown\n    translate([5, -embankment_width/2 + 5, embankment_height - 1.5])\n        cube([embankment_length - 10, embankment_width - 10, 1.5]);\n    \n    // Road markings\n    for(i = [10:10:embankment_length - 10]) {\n        translate([i, -1, embankment_height - 1.4])\n            cube([3, 2, 0.2]);\n    }\n}\n\nmodule support_ribs() {\n    // Hidden support ribs for 3D printing\n    for(i = [10:20:embankment_length - 10]) {\n        translate([i, 0, embankment_height/2])\n            cube([2, embankment_width - 10, embankment_height/2]);\n    }\n}\n\n// Assemble the complete embankment\nunion() {\n    embankment_base();\n    retaining_wall();\n    drainage_ditch();\n    vegetation();\n    road_surface();\n    %support_ribs();  // Make support ribs semi-transparent in preview\n}",
    "renders": true
  },
  {
    "building": "rampart",
    "openscad_code": "// Realistic medium-complexity rampart for 3D printing\n// Wall length ≈ 70 mm, height ≈ 35 mm, depth ≈ 30 mm\n\n$fn = 32;                 // Smoother curves\nwall_th = 2.5;            // Printable wall thickness\ncrenel_w = 6;             // Merlon width\ncrenel_gap = 4;           // Crenel gap\nmerlon_h = 5;             // Height of merlons above wall walk\nwalk_w = 5;               // Wall-walk depth\nbase_slope = 0.8;         // Talus slope\n\n// Main rampart module\nmodule rampart(len = 70, wid = 30, h = 30) {\n    // Solid stone base with slight talus\n    difference() {\n        union() {\n            // Lower sloped base\n            translate([0,0,h*0.2])\n                scale([1, 1, 0.8])\n                cube([len+8, wid, h*0.4], center=true);\n            // Upper vertical core\n            translate([0,0,h*0.6])\n                cube([len, wid*0.8, h*0.8], center=true);\n        }\n        // Hollow out interior\n        translate([0,0,h*0.6])\n            cube([len-wall_th*2, wid*0.8-wall_th*2, h*0.8+0.1], center=true);\n    }\n\n    // Wall-walk platform on top\n    translate([0, wid/4, h-merlon_h/2])\n        cube([len, walk_w, merlon_h], center=true);\n\n    // Crenellations along top\n    for (x = [-len/2+crenel_w/2 : crenel_w+crenel_gap : len/2-crenel_w/2]) {\n        translate([x, wid/4, h+merlon_h/2])\n            cube([crenel_w, walk_w, merlon_h], center=true);\n    }\n\n    // Arrow loops (machicolations)\n    for (x = [-len/2+10 : 10 : len/2-10]) {\n        translate([x, 0, h*0.6])\n            rotate([0, 90, 0])\n            cylinder(h=wid*0.8, d=3, center=true);\n    }\n\n    // Buttresses every 15 mm\n    for (x = [-len/2+7.5 : 15 : len/2-7.5]) {\n        translate([x, -wid/2-wall_th, h*0.4])\n            cube([wall_th*2, wall_th*3, h*0.8], center=false);\n    }\n\n    // Wooden fighting platform supports\n    translate([0, wid/4, h-merlon_h-wall_th])\n        cube([len, walk_w, wall_th], center=true);\n}\n\n// Gate tower module (simple barbican-style)\nmodule gate_tower() {\n    h = 40;\n    w = 20;\n    d = 20;\n    \n    difference() {\n        union() {\n            // Tower body\n            cube([w, d, h], center=true);\n            // Conical roof\n            translate([0, 0, h/2+5])\n                cylinder(h=10, r1=w/2+2, r2=0, center=true);\n        }\n        // Gate passage\n        translate([0, 0, h*0.3])\n            cube([w+1, d-4, h*0.4], center=true);\n        // Arrow slits\n        for (z = [h*0.3 : 5 : h*0.8]) {\n            translate([w/2+0.1, 0, z])\n                rotate([0, 90, 0])\n                cylinder(h=0.5, d=2, center=true);\n        }\n    }\n}\n\n// Assembly\nrampart();\n\n// Optional gate tower (uncomment to add)\n// translate([-40, 0, 0])\n//     gate_tower();",
    "renders": true
  },
  {
    "building": "wall",
    "openscad_code": "// Realistic-style castle wall segment\n// Size: 80 mm long × 20 mm deep × 50 mm high\n// 3D-printable – no overhangs, 2 mm wall thickness\n\n// Overall dimensions\nwall_len   = 80;\nwall_depth = 20;\nwall_h     = 50;\nwall_thk   = 2;\n\n// Stone brick module\nmodule brick(w,l,h)\n    cube([w,l,h], center=true);\n\n// Random stone texture by slight size variation\nmodule stone(x,y,z) {\n    translate([x,y,z]) {\n        brick(5+rands(-0.3,0.3,1)[0],\n              5+rands(-0.3,0.3,1)[0],\n              2.5+rands(-0.2,0.2,1)[0]);\n    }\n}\n\n// Crenellation module\nmodule crenel(base_w, base_h) {\n    difference() {\n        translate([0,0,base_h/2])\n            cube([base_w, wall_depth, base_h], center=true);\n        translate([0,0,base_h-1])\n            cube([base_w-4, wall_depth+1, 2], center=true);\n    }\n}\n\n// Main wall body\nmodule wall_body() {\n    difference() {\n        // Outer shell\n        cube([wall_len, wall_depth, wall_h]);\n        // Hollow inside\n        translate([wall_thk, wall_thk, wall_thk])\n            cube([wall_len-2*wall_thk,\n                  wall_depth-2*wall_thk,\n                  wall_h-wall_thk]);\n    }\n}\n\n// Stone facade layer on front face\nmodule stone_layer() {\n    for (i=[0:7]) {\n        for (j=[0:7]) {\n            stone(-wall_len/2 + 5*i, 0, 2.5 + 5*j);\n        }\n    }\n}\n\n// Crenellated top\nmodule crenellations() {\n    for (i=[0:3]) {\n        translate([10 + 20*i, 0, wall_h])\n            crenel(15, 10);\n    }\n}\n\n// Arrow slit\nmodule arrow_slit() {\n    translate([wall_len/2 - 15, 0, wall_h/2])\n        rotate([0,90,0])\n            cylinder(h=wall_depth, d=3, $fn=20);\n}\n\n// Assemble the wall\nunion() {\n    wall_body();\n    translate([0,0,wall_h]) crenellations();\n    difference() {\n        translate([0, wall_depth/2, wall_h/2])\n            stone_layer();\n        arrow_slit();\n    }\n}",
    "renders": true
  },
  {
    "building": "gate",
    "openscad_code": "// Realistic Garden Gate - Medium Complexity\n// Dimensions optimized for 3D printing: 80mm wide x 60mm tall x 10mm deep\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main gate assembly\nmodule gate() {\n    difference() {\n        union() {\n            // Left post\n            post(0, 0);\n            \n            // Right post\n            post(65, 0);\n            \n            // Top beam\n            translate([5, 50, 7.5])\n                cube([60, 5, 5]);\n            \n            // Vertical bars\n            for(x = [15:10:55]) {\n                vertical_bar(x);\n            }\n            \n            // Decorative arch\n            decorative_arch();\n            \n            // Hinges\n            hinge(5, 15);\n            hinge(5, 35);\n            \n            // Latch mechanism\n            latch(70, 25);\n        }\n        \n        // Cut out inner area for gate opening\n        translate([10, 5, 2.5])\n            cube([50, 45, 10]);\n    }\n}\n\n// Post module with decorative top\nmodule post(x_pos, y_pos) {\n    translate([x_pos, y_pos, 0]) {\n        // Main post body\n        cube([5, 5, 60]);\n        \n        // Post cap\n        translate([-1, -1, 60])\n            cylinder(h=3, r1=3.5, r2=2.5);\n        \n        // Decorative rings\n        for(h = [50, 53]) {\n            translate([-0.5, -0.5, h])\n                cube([6, 6, 1]);\n        }\n    }\n}\n\n// Vertical bar with pointed top\nmodule vertical_bar(x_pos) {\n    translate([x_pos, 5, 2.5]) {\n        // Main bar\n        cube([2, 45, 2.5]);\n        \n        // Pointed top\n        translate([1, 45, 1.25])\n            rotate([0, 90, 0])\n                cylinder(h=2, r1=0, r2=1.25);\n    }\n}\n\n// Decorative arch across top\nmodule decorative_arch() {\n    translate([40, 50, 10]) {\n        rotate([90, 0, 0])\n            difference() {\n                // Main arch\n                cylinder(h=2, r1=30, r2=30);\n                \n                // Inner cutout\n                translate([0, 0, -1])\n                    cylinder(h=4, r1=27, r2=27);\n            }\n        \n        // Center ornament\n        translate([0, 0, 7])\n            sphere(d=4);\n    }\n}\n\n// Hinge module\nmodule hinge(x_pos, y_pos) {\n    translate([x_pos, y_pos, 2.5]) {\n        // Mounting plate\n        cube([3, 10, 2]);\n        \n        // Hinge barrels\n        for(y = [2, 5, 8]) {\n            translate([-1, y, 2])\n                cylinder(h=3, r=1.5);\n        }\n    }\n}\n\n// Latch mechanism\nmodule latch(x_pos, y_pos) {\n    translate([x_pos, y_pos, 2.5]) {\n        // Latch plate\n        cube([2, 10, 2]);\n        \n        // Latch handle\n        translate([0, 5, 2])\n            rotate([90, 0, 0])\n                cylinder(h=3, r1=1, r2=0.5);\n        \n        // Keeper\n        translate([3, 3, 0])\n            cube([2, 4, 4]);\n    }\n}\n\n// Generate the complete gate\ngate();",
    "renders": true
  },
  {
    "building": "spire",
    "openscad_code": "// Realistic spire with medium complexity\n// Overall height: 80 mm, base width: 20 mm\n\n$fn = 64; // Smooth curves\n\n// Main module to generate the complete spire\nmodule spire() {\n    union() {\n        // Octagonal base foundation\n        translate([0, 0, 2])\n            cylinder(h = 4, d = 24, $fn = 8);\n        \n        // Main tower body\n        tower_body();\n        \n        // Decorative ring near top\n        translate([0, 0, 55])\n            cylinder(h = 2, d = 10);\n        \n        // Spire cone\n        spire_cone();\n        \n        // Gargoyles or water spouts\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([9, 0, 30])\n                    gargoyle();\n        }\n        \n        // Small windows\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([8, 0, 20])\n                    window();\n        }\n        \n        // Flag at top\n        translate([0, 0, 78])\n            flag();\n    }\n}\n\n// Main tower body with octagonal cross-section\nmodule tower_body() {\n    difference() {\n        // Octagonal tower\n        translate([0, 0, 30])\n            cylinder(h = 50, d1 = 20, d2 = 12, $fn = 8);\n        \n        // Doorway at base\n        translate([0, -10, 0])\n            cube([8, 20, 15], center = true);\n    }\n}\n\n// Gothic spire cone with ridges\nmodule spire_cone() {\n    union() {\n        // Main conical spire\n        cylinder(h = 20, d1 = 10, d2 = 2);\n        \n        // Decorative ridges\n        for (h = [0:5:15]) {\n            translate([0, 0, 55 + h])\n                cylinder(h = 1, d = 10 - h * 0.5);\n        }\n    }\n}\n\n// Simple gargoyle design\nmodule gargoyle() {\n    rotate([90, 0, 0])\n        cylinder(h = 5, d = 2);\n}\n\n// Gothic window design\nmodule window() {\n    difference() {\n        // Window frame\n        cube([4, 1, 6], center = true);\n        \n        // Window opening\n        translate([0, 0.6, 0])\n            cube([3, 1, 4], center = true);\n    }\n}\n\n// Small flag at the top\nmodule flag() {\n    union() {\n        // Flag pole\n        cylinder(h = 3, d = 1);\n        \n        // Flag\n        translate([1, 0, 1.5])\n            rotate([90, 0, 0])\n                cube([3, 2, 0.5]);\n    }\n}\n\n// Generate the complete spire\ntranslate([0, 0, 0])\n    spire();",
    "renders": true
  },
  {
    "building": "steeple",
    "openscad_code": "// Steeple - Realistic Medium Complexity\n// Designed for 3D printing with no overhangs and 1mm wall thickness\n\n$fn = 64;\n\n// Main parameters\nbase_width = 30;\nbase_length = 30;\nbase_height = 10;\ntower_width = 20;\ntower_height = 50;\nspire_height = 40;\nwall_thickness = 1;\n\nmodule base() {\n    // Stone base with beveled edges\n    difference() {\n        cube([base_width, base_length, base_height], center=true);\n        translate([0, 0, wall_thickness])\n            cube([base_width-wall_thickness*2, base_length-wall_thickness*2, base_height], center=true);\n    }\n    \n    // Base corner reinforcements\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x*(base_width/2-2), y*(base_length/2-2), 0])\n            cylinder(h=base_height, r=2, center=true);\n    }\n}\n\nmodule tower() {\n    // Main tower body\n    difference() {\n        cube([tower_width, tower_width, tower_height], center=true);\n        translate([0, 0, wall_thickness])\n            cube([tower_width-wall_thickness*2, tower_width-wall_thickness*2, tower_height], center=true);\n    }\n    \n    // Window openings\n    for(side = [0:3]) {\n        rotate([0, 0, side*90])\n        translate([tower_width/2-wall_thickness/2, 0, tower_height*0.6])\n            rotate([0, 90, 0])\n            cylinder(h=wall_thickness+0.1, r=3, center=true);\n    }\n    \n    // Window frames\n    for(side = [0:3]) {\n        rotate([0, 0, side*90])\n        translate([tower_width/2-wall_thickness/2, 0, tower_height*0.6])\n            rotate([0, 90, 0])\n            difference() {\n                cylinder(h=wall_thickness+0.2, r=4, center=true);\n                cylinder(h=wall_thickness+0.3, r=3, center=true);\n            }\n    }\n    \n    // Crenellations at top\n    for(pos = [-1, 0, 1]) {\n        translate([pos*tower_width/3, 0, tower_height/2])\n            cube([tower_width/6, wall_thickness, wall_thickness*4], center=true);\n        translate([0, pos*tower_width/3, tower_height/2])\n            cube([wall_thickness, tower_width/6, wall_thickness*4], center=true);\n    }\n}\n\nmodule spire() {\n    // Transition block\n    translate([0, 0, tower_height/2 + 3])\n        cube([tower_width*0.8, tower_width*0.8, 6], center=true);\n    \n    // Main spire\n    translate([0, 0, tower_height/2 + 3 + spire_height/2])\n        cylinder(h=spire_height, r1=tower_width*0.3, r2=0.5, center=true);\n    \n    // Spire ribs\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([tower_width*0.25, 0, tower_height/2 + 3 + spire_height/2])\n            cube([tower_width*0.5, wall_thickness, spire_height], center=true);\n    }\n    \n    // Cross at top\n    translate([0, 0, tower_height/2 + 3 + spire_height + 2])\n        union() {\n            cube([8, wall_thickness, wall_thickness*4], center=true);\n            cube([wall_thickness, 8, wall_thickness*4], center=true);\n            translate([0, 0, 2])\n                sphere(r=1.5);\n        }\n}\n\nmodule steeple() {\n    union() {\n        base();\n        translate([0, 0, base_height/2])\n            tower();\n        spire();\n    }\n}\n\n// Generate the steeple\nsteeple();",
    "renders": true
  },
  {
    "building": "colonnade",
    "openscad_code": "// OpenSCAD Colonnade – Realistic / Medium complexity\n// Size: 90 mm long x 35 mm deep x 30 mm high\n\n// General parameters\ncol_len = 90;\ncol_dep = 35;\ncol_h   = 30;\nwall_th = 2.5;\n\n// Column parameters\ncol_dia = 7;\ncol_h_real = 22;\nbase_h = 2;\ncapital_h = 2;\nentasis = 0.90;          // taper ratio for realistic entasis\nflutes = 20;\nflute_depth = 0.4;\n\n// Spacing\ncols = 5;\nspan = (col_len - col_dia)/(cols - 1);\n\nmodule column() {\n    // Base\n    translate([0,0,0])\n        cylinder(h = base_h, d1 = col_dia*1.2, d2 = col_dia*1.2, $fn = 60);\n\n    // Fluted shaft with entasis\n    difference() {\n        // Main tapered shaft\n        translate([0,0,base_h])\n            cylinder(h = col_h_real - base_h - capital_h,\n                     d1 = col_dia*entasis,\n                     d2 = col_dia,\n                     $fn = 60);\n\n        // Fluting\n        for(i = [0 : flutes-1])\n            rotate([0,0,i*360/flutes])\n                translate([col_dia/2 - flute_depth/2, 0, base_h + 0.5])\n                    cube([flute_depth, col_dia*0.6, col_h_real - base_h - capital_h - 1], center = true);\n    }\n\n    // Capital (simple echinus + abacus)\n    translate([0,0,col_h_real - capital_h])\n        cylinder(h = capital_h, d1 = col_dia, d2 = col_dia*1.4, $fn = 60);\n\n    translate([0,0,col_h_real])\n        cube([col_dia*1.4, col_dia*1.4, 1.5], center = true);\n}\n\nmodule architrave() {\n    // Main beam\n    translate([col_len/2, col_dep/2, col_h_real + 1.5])\n        cube([col_len + wall_th*2, col_dep + wall_th*2, 2.5], center = true);\n\n    // Simple fascia molding\n    translate([col_len/2, col_dep/2, col_h_real + 1.5 + 2.5])\n        cube([col_len + wall_th*2, col_dep + wall_th*2, 1], center = true);\n}\n\nmodule back_wall() {\n    // Solid wall closing the rear\n    translate([col_len/2, col_dep - wall_th/2, col_h/2])\n        cube([col_len, wall_th, col_h], center = true);\n}\n\nmodule floor() {\n    translate([col_len/2, col_dep/2, 0])\n        cube([col_len, col_dep, 1], center = false);\n}\n\n// Assembly\nunion() {\n    floor();\n    back_wall();\n    architrave();\n\n    for(i = [0 : cols-1])\n        translate([i*span + col_dia/2, col_dep/2, 0])\n            column();\n}",
    "renders": true
  },
  {
    "building": "portico",
    "openscad_code": "// Realistic Portico - Medium Complexity\n// Dimensions suitable for 3D printing (~80mm wide)\n\n$fn = 32;  // Smooth curves\n\nmodule column(height, diameter) {\n    // Base\n    translate([0, 0, 0])\n        cylinder(h=2, d=diameter+4, $fn=6);\n    \n    // Shaft with taper\n    translate([0, 0, 2])\n        cylinder(h=height-4, d1=diameter, d2=diameter*0.9);\n    \n    // Capital\n    translate([0, 0, height-2])\n        cylinder(h=4, d=diameter+6, $fn=8);\n}\n\nmodule entablature(width, depth, height) {\n    // Architrave\n    translate([0, 0, height])\n        cube([width, depth, 4], center=true);\n    \n    // Frieze with triglyphs\n    for(i=[-width/2+6:12:width/2-6]) {\n        translate([i, 0, height+4])\n            cube([8, depth+2, 6], center=true);\n    }\n    \n    // Cornice\n    translate([0, 0, height+10])\n        cube([width+4, depth+2, 4], center=true);\n}\n\nmodule pediment(width, height, depth) {\n    // Triangular gable\n    difference() {\n        translate([0, 0, height+14])\n            cube([width+4, depth+2, 20], center=true);\n        \n        // Remove center for triangle\n        translate([0, 0, height+14])\n            rotate([90, 0, 0])\n                cylinder(h=width+4, d=40, $fn=3);\n    }\n    \n    // Roof edge\n    translate([0, 0, height+34])\n        cube([width+4, depth+4, 2], center=true);\n}\n\n// Foundation\ntranslate([0, 0, -2])\n    cube([60, 30, 2], center=true);\n\n// Steps\nfor(i=[0:1:2]) {\n    translate([0, 8-i*2, i*1])\n        cube([60-i*4, 4, 1], center=true);\n}\n\n// Columns\ncolumn_height = 35;\ncolumn_diameter = 8;\n\ntranslate([-20, 0, 0])\n    column(column_height, column_diameter);\ntranslate([-10, 0, 0])\n    column(column_height, column_diameter);\ntranslate([0, 0, 0])\n    column(column_height, column_diameter);\ntranslate([10, 0, 0])\n    column(column_height, column_diameter);\ntranslate([20, 0, 0])\n    column(column_height, column_diameter);\n\n// Entablature\nentablature(60, 32, column_height);\n\n// Pediment\npediment(60, column_height, 32);\n\n// Back wall\ntranslate([0, -15, column_height/2])\n    cube([60, 2, column_height], center=true);\n\n// Door\ndifference() {\n    translate([0, -14, column_height/2])\n        cube([20, 2.5, 25], center=true);\n    \n    translate([0, -13, column_height/2-2])\n        cube([16, 3, 21], center=true);\n}\n\n// Window details\nfor(i=[-1:1]) {\n    translate([i*15, -14, column_height-8])\n        difference() {\n            cube([6, 2, 8], center=true);\n            cube([4, 3, 6], center=true);\n        }\n}",
    "renders": true
  },
  {
    "building": "lobby",
    "openscad_code": "// Realistic Lobby Model - Medium Complexity\n// Size: 80mm x 60mm x 40mm (printable)\n\n// Main lobby module\nmodule lobby() {\n    // Floor base - 3mm thick\n    translate([0, 0, 0])\n        cube([80, 60, 3], center=true);\n    \n    // Main walls\n    difference() {\n        // Outer shell\n        translate([0, 0, 20])\n            cube([80, 60, 40], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 20])\n            cube([76, 56, 38], center=true);\n    }\n    \n    // Front entrance opening\n    translate([0, 30, 15])\n        cube([20, 5, 20], center=true);\n    \n    // Reception desk\n    translate([0, 15, 5])\n        cube([30, 8, 10], center=true);\n    \n    // Desk surface\n    translate([0, 11, 11])\n        cube([32, 2, 1], center=true);\n    \n    // Reception counter front\n    translate([0, 19, 7])\n        cube([28, 1, 6], center=true);\n    \n    // Seating area - 2 benches\n    for(i = [-25, 25]) {\n        translate([i, -10, 5])\n            cube([15, 6, 2], center=true);\n    }\n    \n    // Back wall details - elevator doors\n    translate([0, -28, 20])\n        cube([20, 2, 25], center=true);\n    \n    // Elevator doors split\n    translate([-5, -28, 20])\n        cube([8, 2, 25], center=true);\n    translate([5, -28, 20])\n        cube([8, 2, 25], center=true);\n    \n    // Support columns\n    for(x = [-25, 25]) {\n        for(y = [-20, 20]) {\n            translate([x, y, 20])\n                cylinder(h=40, r=2, center=true);\n        }\n    }\n    \n    // Ceiling lights\n    for(x = [-20, 0, 20]) {\n        for(y = [-15, 0, 15]) {\n            translate([x, y, 39])\n                cylinder(h=1, r=3, center=true);\n        }\n    }\n    \n    // Floor tiles pattern\n    for(x = [-35:10:35]) {\n        for(y = [-25:10:25]) {\n            translate([x, y, 1.5])\n                cube([9.5, 9.5, 0.5], center=true);\n        }\n    }\n    \n    // Side windows\n    for(z = [10, 20, 30]) {\n        translate([40, 0, z])\n            cube([2, 15, 8], center=true);\n        translate([-40, 0, z])\n            cube([2, 15, 8], center=true);\n    }\n    \n    // Entrance canopy\n    translate([0, 33, 25])\n        cube([25, 2, 10], center=true);\n    \n    // Canopy supports\n    translate([-12, 33, 20])\n        cube([2, 2, 10], center=true);\n    translate([12, 33, 20])\n        cube([2, 2, 10], center=true);\n}\n\n// Generate the lobby\nlobby();",
    "renders": true
  },
  {
    "building": "foyer",
    "openscad_code": "// Realistic medium-complexity foyer model\n// Overall footprint ~70 mm x 50 mm, height ~40 mm\n// Designed for 3D printing: 1.2 mm walls, no steep overhangs\n\n// Parameters\nwall_t = 1.2;          // wall thickness in mm\nfloor_h = 1.2;         // floor thickness\ndoor_h = 20;           // door height\ndoor_w = 12;           // door width\nwindow_h = 10;         // window height\nsteps = 3;             // front steps\nstep_h = 2;            // height per step\nstep_d = 8;            // depth per step\nscale_factor = 0.9;    // shrink inner volumes for walls\n\n// Main foyer assembly\nmodule foyer() {\n    difference() {\n        union() {\n            // Outer shell\n            outer_shell();\n            // Roof\n            translate([0, 0, 35]) roof();\n            // Front steps\n            front_steps();\n            // Interior floor\n            translate([0, 0, floor_h]) floor();\n        }\n        \n        // Hollow out interior\n        scale([scale_factor, scale_factor, 1])\n            translate([0, 0, floor_h])\n            cube([70, 50, 35 - floor_h], center = true);\n        \n        // Door opening\n        translate([0, -25 + wall_t, floor_h])\n            cube([door_w, wall_t + 0.2, door_h], center = true);\n        \n        // Window openings\n        for(x = [-20, 20])\n            translate([x, -25 + wall_t, floor_h + 12])\n                cube([8, wall_t + 0.2, window_h], center = true);\n    }\n}\n\n// Outer walls\nmodule outer_shell() {\n    difference() {\n        cube([70, 50, 35], center = true);\n        translate([0, 0, 17.5 + 0.6])\n            cube([70 - 2*wall_t, 50 - 2*wall_t, 35 - wall_t], center = true);\n    }\n}\n\n// Gabled roof\nmodule roof() {\n    hull() {\n        translate([-35, 0, 0])\n            cube([0.1, 50, 10]);\n        translate([35, 0, 0])\n            cube([0.1, 50, 10]);\n    }\n    // Roof ridge cap\n    translate([0, 0, 10])\n        cube([70 + wall_t, 2, 2], center = true);\n}\n\n// Front steps\nmodule front_steps() {\n    for(i = [1:steps]) {\n        translate([0, 25 + i*step_d/2, i*step_h/2])\n            cube([30, i*step_d, i*step_h], center = true);\n    }\n}\n\n// Interior floor tile pattern\nmodule floor() {\n    difference() {\n        cube([70 - 2*wall_t, 50 - 2*wall_t, floor_h], center = true);\n        // Tile grooves\n        for(x = [-30:5:30])\n            for(y = [-20:5:20])\n                translate([x, y, -0.1])\n                    cube([4.8, 4.8, 0.2], center = true);\n    }\n}\n\n// Door frame detail\nmodule door_frame() {\n    translate([0, -25 + wall_t/2, floor_h + door_h/2])\n        difference() {\n            cube([door_w + 2*wall_t, wall_t, door_h + wall_t], center = true);\n            cube([door_w, wall_t + 0.2, door_h], center = true);\n        }\n}\n\n// Window frames\nmodule window_frames() {\n    for(x = [-20, 20])\n        translate([x, -25 + wall_t/2, floor_h + 12])\n            difference() {\n                cube([8 + 2*wall_t, wall_t, window_h + 2*wall_t], center = true);\n                cube([8, wall_t + 0.2, window_h], center = true);\n            }\n}\n\n// Final assembly\nunion() {\n    foyer();\n    door_frame();\n    window_frames();\n}",
    "renders": true
  },
  {
    "building": "vestibule",
    "openscad_code": "// Realistic Vestibule Model\n// Medium complexity with architectural details\n// Size: 70mm x 50mm x 60mm\n\n$fn = 32;\n\n// Main dimensions\nvestibule_width = 70;\nvestibule_depth = 50;\nvestibule_height = 60;\nwall_thickness = 3;\n\nmodule vestibule() {\n    // Base foundation\n    translate([0, 0, 0])\n    cube([vestibule_width, vestibule_depth, 5], center = true);\n    \n    // Main walls\n    difference() {\n        // Outer shell\n        union() {\n            // Back wall\n            translate([0, vestibule_depth/2 - wall_thickness/2, vestibule_height/2])\n            cube([vestibule_width, wall_thickness, vestibule_height], center = true);\n            \n            // Left wall\n            translate([-vestibule_width/2 + wall_thickness/2, 0, vestibule_height/2])\n            cube([wall_thickness, vestibule_depth, vestibule_height], center = true);\n            \n            // Right wall\n            translate([vestibule_width/2 - wall_thickness/2, 0, vestibule_height/2])\n            cube([wall_thickness, vestibule_depth, vestibule_height], center = true);\n            \n            // Front pillars\n            translate([-vestibule_width/3, -vestibule_depth/2 + wall_thickness/2, vestibule_height/2])\n            cube([wall_thickness*2, wall_thickness, vestibule_height], center = true);\n            \n            translate([vestibule_width/3, -vestibule_depth/2 + wall_thickness/2, vestibule_height/2])\n            cube([wall_thickness*2, wall_thickness, vestibule_height], center = true);\n        }\n        \n        // Door opening\n        translate([0, -vestibule_depth/2 + wall_thickness, vestibule_height/3])\n        cube([vestibule_width/2.5, wall_thickness*2, vestibule_height/1.5], center = true);\n    }\n    \n    // Roof\n    translate([0, 0, vestibule_height])\n    difference() {\n        // Main roof body\n        cube([vestibule_width + 10, vestibule_depth + 10, 5], center = true);\n        \n        // Roof slope cuts\n        translate([0, 0, 2.5])\n        rotate([90, 0, 0])\n        cylinder(h = vestibule_width/2 + 5, r = vestibule_width/2, center = true);\n    }\n    \n    // Floor tiles pattern\n    module floor_tile(x, y) {\n        translate([x - vestibule_width/2 + 5, y - vestibule_depth/2 + 5, 5.1])\n        cube([8, 8, 0.5]);\n    }\n    \n    for (x = [0:10:vestibule_width-10]) {\n        for (y = [0:10:vestibule_depth-10]) {\n            floor_tile(x, y);\n        }\n    }\n    \n    // Side windows\n    module window(x_pos) {\n        translate([x_pos, vestibule_depth/4, vestibule_height/2])\n        difference() {\n            // Window frame\n            cube([wall_thickness*1.5, 15, 20], center = true);\n            // Window opening\n            cube([wall_thickness+1, 12, 17], center = true);\n        }\n    }\n    \n    window(-vestibule_width/2 + wall_thickness/2);\n    window(vestibule_width/2 - wall_thickness/2);\n    \n    // Decorative cornice\n    translate([0, 0, vestibule_height - 2])\n    cube([vestibule_width + 2, vestibule_depth + 2, 2], center = true);\n    \n    // Door details\n    translate([0, -vestibule_depth/2 + wall_thickness*1.5, vestibule_height/3])\n    difference() {\n        // Door frame\n        cube([vestibule_width/2.5 + 2, wall_thickness, vestibule_height/1.5 + 2], center = true);\n        // Door opening\n        cube([vestibule_width/2.5 - 2, wall_thickness + 1, vestibule_height/1.5 - 2], center = true);\n    }\n    \n    // Door handle\n    translate([vestibule_width/6, -vestibule_depth/2 + wall_thickness*1.5, vestibule_height/3])\n    rotate([90, 0, 0])\n    cylinder(h = 3, r = 1);\n}\n\n// Render the vestibule\nvestibule();",
    "renders": true
  },
  {
    "building": "corridor",
    "openscad_code": "// OpenSCAD Corridor – medium-realistic\n// Printable corridor section: 80 mm long, 40 mm wide, 30 mm high\n// No overhangs >45°, 1 mm wall thickness assumed\n\n$fn = 32;       // smooth curves\n\nmodule floor_plank(w = 40, l = 6, t = 1) {\n    cube([l, w, t], center = true);\n}\n\nmodule wall_with_base(w, h, d) {\n    difference() {\n        union() {\n            // baseboard\n            translate([0, -w/2, -0.5])\n                cube([d, 1, 2]);\n            // wall panel\n            translate([0, 0, h/2 - 1])\n                cube([d, w, h]);\n        }\n        // window openings every 15 mm\n        for(i = [1:15:d-10])\n            translate([i, -w/2+1, 5])\n                cube([4, w-2, 10], center = false);\n    }\n}\n\nmodule ceiling_beam(len) {\n    translate([-len/2, -1, 0])\n        cube([len, 2, 2], center = true);\n}\n\nmodule ceiling_light(x) {\n    translate([x, 0, -0.5])\n        cylinder(h = 1, r = 2);\n}\n\n// main assembly\ndifference() {\n    // outer shell\n    union() {\n        // floor\n        translate([0, 0, 0])\n            cube([80, 40, 1], center = true);\n\n        // parallel planks\n        for(y = [-15:4:15])\n            translate([0, y, 0.5])\n                floor_plank();\n\n        // left wall\n        translate([-20, 0, 15])\n            rotate([0, 90, 0])\n                wall_with_base(30, 30, 40);\n\n        // right wall\n        translate([20, 0, 15])\n            rotate([0, 90, 180])\n                wall_with_base(30, 30, 40);\n\n        // ceiling\n        translate([0, 0, 30])\n            cube([80, 40, 1], center = true);\n\n        // ceiling beams\n        for(x = [-30:20:30])\n            translate([x, 0, 29])\n                ceiling_beam(40);\n\n        // ceiling lights\n        for(x = [-25:25:25])\n            ceiling_light(x);\n    }\n\n    // corridor cavity\n    translate([0, 0, 15])\n        cube([76, 36, 29], center = true);\n}",
    "renders": true
  },
  {
    "building": "quad",
    "openscad_code": "// Realistic Quad - Medium complexity\n// 3D printable with no overhangs\n\n// Overall dimensions\nquad_length = 80;\nquad_width = 70;\nquad_height = 25;\n\n// Propeller dimensions\nprop_radius = 15;\nprop_thickness = 3;\n\n// Arm dimensions\narm_length = 35;\narm_width = 8;\narm_thickness = 4;\n\n// Body dimensions\nbody_length = 30;\nbody_width = 25;\nbody_height = 8;\n\n// Landing gear\ngear_height = 8;\ngear_thickness = 2;\n\n// Camera gimbal\ncam_radius = 6;\ncam_height = 5;\n\n// Motor mount\nmotor_radius = 6;\nmotor_height = 4;\n\n// Create one arm with motor and propeller\nmodule arm_with_motor() {\n    // Main arm\n    difference() {\n        cube([arm_length, arm_width, arm_thickness], center=true);\n        \n        // Lightening holes\n        for (i = [0.3, 0.7]) {\n            translate([arm_length * (i - 0.5), 0, 0])\n                cylinder(h=arm_thickness + 1, r=1.5, center=true, $fn=20);\n        }\n    }\n    \n    // Motor mount at end of arm\n    translate([arm_length/2 + motor_height/2, 0, 0])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=motor_height, r=motor_radius, $fn=30);\n                cylinder(h=motor_height + 1, r=2.5, $fn=20);\n            }\n    \n    // Propeller\n    translate([arm_length/2 + motor_height + prop_thickness/2 + 2, 0, 0])\n        rotate([0, 90, 0])\n            for (i = [0:45:135]) {\n                rotate([0, 0, i])\n                    cube([prop_radius, 2, prop_thickness], center=true);\n            }\n}\n\n// Landing gear leg\nmodule landing_gear() {\n    translate([0, 0, -gear_height/2])\n        difference() {\n            cube([4, 4, gear_height], center=true);\n            cylinder(h=gear_height + 1, r=1.5, center=true, $fn=20);\n        }\n}\n\n// Main body with electronics\nmodule body() {\n    difference() {\n        // Main body\n        translate([0, 0, body_height/2])\n            cube([body_length, body_width, body_height], center=true);\n        \n        // Top battery compartment\n        translate([0, 0, body_height - 1])\n            cube([body_length - 4, body_width - 4, 2], center=true);\n        \n        // LED holes\n        for (pos = [[-body_length/2 - 1, 0, 0], [body_length/2 + 1, 0, 0]]) {\n            translate(pos)\n                rotate([0, 90, 0])\n                    cylinder(h=3, r=2, $fn=20);\n        }\n    }\n    \n    // Camera gimbal underneath\n    translate([0, 0, -cam_height/2 - 2])\n        difference() {\n            cylinder(h=cam_height, r=cam_radius, $fn=30);\n            cylinder(h=cam_height + 1, r=3, $fn=20);\n        }\n}\n\n// Assemble the quad\nunion() {\n    // Central body\n    body();\n    \n    // Four arms with motors/props\n    for (angle = [0, 90, 180, 270]) {\n        rotate([0, 0, angle])\n            translate([body_length/4, 0, arm_thickness/2])\n                arm_with_motor();\n    }\n    \n    // Landing gear at each corner\n    for (angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n            translate([body_length/3, body_width/3, -gear_height/2 - 2])\n                landing_gear();\n    }\n    \n    // GPS module on top\n    translate([0, 0, body_height + 3])\n        difference() {\n            cube([10, 10, 4], center=true);\n            cylinder(h=5, r=2, center=true, $fn=20);\n        }\n}",
    "renders": true
  },
  {
    "building": "campus",
    "openscad_code": "// OpenSCAD Realistic Campus Model (Medium Complexity)\n\n// Global parameters\ncampus_width = 60;\ncampus_depth = 80;\nground_thickness = 2;\n\n// Main building parameters\nmain_building_width = 30;\nmain_building_depth = 20;\nmain_building_height = 15;\nwall_thickness = 1.5;\n\n// Library parameters\nlibrary_width = 20;\nlibrary_depth = 15;\nlibrary_height = 10;\n\n// Science building parameters\nscience_width = 25;\nscience_depth = 15;\nscience_height = 12;\n\n// Quad parameters\nquad_width = 35;\nquad_depth = 25;\n\n// Tree parameters\ntree_height = 8;\ntrunk_radius = 1;\nfoliage_radius = 3;\n\n// Create the ground base\nmodule ground() {\n    difference() {\n        cube([campus_width, campus_depth, ground_thickness], center=true);\n        translate([0, 0, -ground_thickness/2])\n            cube([campus_width+2, campus_depth+2, ground_thickness], center=true);\n    }\n}\n\n// Create a simple window\nmodule window(width, height, depth) {\n    difference() {\n        cube([width, depth, height]);\n        translate([wall_thickness/2, -0.1, wall_thickness/2])\n            cube([width-wall_thickness, depth+0.2, height-wall_thickness]);\n    }\n}\n\n// Create main academic building with windows\nmodule main_building() {\n    union() {\n        // Main structure\n        translate([0, 15, main_building_height/2])\n            cube([main_building_width, main_building_depth, main_building_height], center=true);\n        \n        // Roof\n        translate([0, 15, main_building_height+1])\n            cube([main_building_width+2, main_building_depth+2, 2], center=true);\n        \n        // Front entrance\n        translate([0, 25, 2])\n            cube([8, 1, 4]);\n        \n        // Windows - front\n        for(x = [-10:5:10]) {\n            translate([x, 24.5, 7])\n                window(3, 4, 1);\n        }\n        \n        // Windows - sides\n        for(y = [5:5:25]) {\n            translate([15.5, y, 7])\n                rotate([0, 90, 0])\n                    window(3, 4, 1);\n            translate([-15.5, y, 7])\n                rotate([0, 90, 0])\n                    window(3, 4, 1);\n        }\n    }\n}\n\n// Create library building\nmodule library() {\n    union() {\n        // Main structure\n        translate([-20, -10, library_height/2])\n            cube([library_width, library_depth, library_height], center=true);\n        \n        // Stepped roof\n        translate([-20, -10, library_height+1])\n            cube([library_width-4, library_depth-4, 1.5], center=true);\n        translate([-20, -10, library_height+2.5])\n            cube([library_width-8, library_depth-8, 1.5], center=true);\n        \n        // Columns\n        for(x = [-12:8:12]) {\n            translate([x-20, -17.5, library_height/2])\n                cylinder(h=library_height, r=1, $fn=8);\n        }\n    }\n}\n\n// Create science building\nmodule science_building() {\n    union() {\n        // Main structure\n        translate([20, -5, science_height/2])\n            cube([science_width, science_depth, science_height], center=true);\n        \n        // Observatory dome\n        translate([25, -5, science_height+3])\n            sphere(r=5, $fn=32);\n        \n        // Communication tower\n        translate([15, -5, science_height+8])\n            cylinder(h=10, r=0.5, $fn=8);\n    }\n}\n\n// Create trees\nmodule tree(x, y) {\n    union() {\n        // Trunk\n        translate([x, y, tree_height/2])\n            cylinder(h=tree_height, r=trunk_radius, $fn=8);\n        \n        // Foliage\n        translate([x, y, tree_height+foliage_radius/2])\n            sphere(r=foliage_radius, $fn=16);\n    }\n}\n\n// Create walkways\nmodule walkways() {\n    union() {\n        // Main walkway\n        translate([0, 0, ground_thickness/2+0.1])\n            cube([quad_width, 3, 0.2]);\n        \n        // Cross walkway\n        translate([0, 0, ground_thickness/2+0.1])\n            rotate([0, 0, 90])\n                cube([quad_depth, 3, 0.2]);\n        \n        // Paths to buildings\n        translate([0, 27.5, ground_thickness/2+0.1])\n            cube([5, 5, 0.2]);\n        translate([-20, -2.5, ground_thickness/2+0.1])\n            cube([5, 5, 0.2]);\n        translate([20, 2.5, ground_thickness/2+0.1])\n            cube([5, 5, 0.2]);\n    }\n}\n\n// Create quad area\nmodule quad() {\n    difference() {\n        translate([0, -5, ground_thickness/2])\n            cube([quad_width, quad_depth, 0.5], center=true);\n        translate([0, -5, ground_thickness/2])\n            cube([quad_width-4, quad_depth-4, 0.6], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Ground and landscape\n    ground();\n    \n    // Buildings\n    main_building();\n    library();\n    science_building();\n    \n    // Central quad\n    quad();\n    \n    // Walkways\n    walkways();\n    \n    // Trees around campus\n    tree(-25, 20);\n    tree(25, 20);\n    tree(-25, -20);\n    tree(25, -20);\n    tree(-10, -25);\n    tree(10, -25);\n    tree(-15, 25);\n    tree(15, 25);\n}",
    "renders": true
  },
  {
    "building": "precinct",
    "openscad_code": "// Precinct Building - Medium Complexity Realistic Style\n// 3D printable police precinct with architectural details\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Overall dimensions\nbuilding_width = 40;\nbuilding_depth = 30;\nbuilding_height = 25;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.2;\n\nmodule main_building() {\n    // Base structure\n    difference() {\n        // Main block\n        cube([building_width, building_depth, building_height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n        cube([building_width - wall_thickness*2, building_depth - wall_thickness*2, building_height - wall_thickness], center = true);\n    }\n}\n\nmodule entrance() {\n    // Front entrance with columns\n    translate([0, building_depth/2 - wall_thickness/2, -building_height/2 + 3])\n    union() {\n        // Entrance platform\n        translate([0, 0, -1])\n        cube([12, 4, 1.5], center = true);\n        \n        // Entrance columns\n        for(x = [-4, 4]) {\n            translate([x, 0, 1.5])\n            cylinder(h = 4, r = 0.8, center = true);\n        }\n        \n        // Entrance roof\n        translate([0, -1, 3.5])\n        cube([14, 6, 0.8], center = true);\n    }\n}\n\nmodule windows() {\n    // Front windows\n    for(i = [-1, 1]) {\n        translate([i * 10, building_depth/2 - wall_thickness/2, 0])\n        rotate([0, 0, 0])\n        cube([3, wall_thickness + 0.1, 4], center = true);\n    }\n    \n    // Side windows\n    for(i = [-1, 0, 1]) {\n        translate([building_width/2 - wall_thickness/2, i * 8, 0])\n        rotate([0, 90, 0])\n        cube([3, wall_thickness + 0.1, 4], center = true);\n    }\n}\n\nmodule roof() {\n    translate([0, 0, building_height/2])\n    union() {\n        // Main roof\n        cube([building_width + 2, building_depth + 2, 1], center = true);\n        \n        // Parapet detail\n        translate([0, 0, 0.5])\n        difference() {\n            cube([building_width + 2, building_depth + 2, 1.5], center = true);\n            cube([building_width - 2, building_depth - 2, 2], center = true);\n        }\n    }\n}\n\nmodule police_sign() {\n    // Police badge/sign above entrance\n    translate([0, building_depth/2 - 1, building_height/2 + 1.5])\n    union() {\n        // Sign board\n        cube([8, 0.8, 3], center = true);\n        \n        // Star shape (simplified)\n        for(angle = [0:72:359]) {\n            rotate([0, 0, angle])\n            translate([2.5, 0, 0])\n            cube([1, 0.5, 0.5], center = true);\n        }\n    }\n}\n\nmodule parking_spot() {\n    // Simple parking area in front\n    translate([0, building_depth/2 + 5, -building_height/2])\n    cube([20, 10, 0.5], center = true);\n}\n\nmodule flag_pole() {\n    // Flag pole on roof\n    translate([building_width/4, -building_depth/4, building_height/2 + 2])\n    union() {\n        // Pole\n        cylinder(h = 8, r = 0.5);\n        \n        // Flag\n        translate([0.5, 0, 6])\n        cube([3, 2, 0.2], center = false);\n    }\n}\n\n// Assembly\nunion() {\n    main_building();\n    \n    difference() {\n        union() {\n            entrance();\n            windows();\n        }\n        // Cut out actual openings\n        translate([0, building_depth/2, -1])\n        cube([6, wall_thickness + 0.2, 6], center = true);\n        \n        // Window cutouts\n        for(i = [-1, 1]) {\n            translate([i * 10, building_depth/2, 0])\n            cube([2.5, wall_thickness + 0.2, 3.5], center = true);\n        }\n        \n        for(i = [-1, 0, 1]) {\n            translate([building_width/2, i * 8, 0])\n            rotate([0, 90, 0])\n            cube([2.5, wall_thickness + 0.1, 3.5], center = true);\n        }\n    }\n    \n    roof();\n    police_sign();\n    parking_spot();\n    flag_pole();\n}",
    "renders": true
  },
  {
    "building": "enclave",
    "openscad_code": "// Realistic-style enclave with medium complexity\n// Main dimensions (mm)\nbase_w = 80;\nbase_d = 70;\nbase_h = 4;\nwall_t = 2.0;\n\n// Wall height and roof\nwall_h = 25;\nroof_over = 4;\nroof_h = 12;\n\n// Door\ndoor_w = 16;\ndoor_h = 18;\n\n// Windows\nwin_w = 12;\nwin_h = 10;\nwin_t = 1.5;\n\n// Chimney\nchim_w = 8;\nchim_d = 8;\nchim_h = 20;\n\nmodule main_base() {\n    difference() {\n        // Solid base\n        cube([base_w, base_d, base_h], center = true);\n        // Recess bottom slightly for cleaner print\n        translate([0,0,-base_h/2]) cube([base_w-2*wall_t, base_d-2*wall_t, base_h], center = true);\n    }\n}\n\nmodule walls() {\n    difference() {\n        // Outer shell\n        cube([base_w, base_d, wall_h], center = true);\n        // Hollow interior\n        translate([0,0,-(wall_h-base_h)/2])\n            cube([base_w-2*wall_t, base_d-2*wall_t, wall_h], center = true);\n    }\n}\n\nmodule roof() {\n    difference() {\n        union() {\n            // Main roof block\n            translate([0,0,wall_h/2+roof_h/2]) \n                cube([base_w+2*roof_over, base_d+2*roof_over, roof_h], center = true);\n            // Ridge\n            translate([0,0,wall_h/2+roof_h]) \n                cube([base_w+2*roof_over-4, 4, 6], center = true);\n        }\n        // Remove inner part\n        translate([0,0,wall_h/2+roof_h/2-2]) \n            cube([base_w-2*wall_t+roof_over, base_d-2*wall_t+roof_over, roof_h+4], center = true);\n    }\n}\n\nmodule door() {\n    difference() {\n        // Door frame\n        translate([0,-base_d/2+wall_t/2, -base_h/2+door_h/2]) \n            cube([door_w+2*wall_t, wall_t+0.1, door_h+wall_t], center = true);\n        // Actual opening\n        translate([0,-base_d/2+wall_t/2+0.2, -base_h/2+door_h/2]) \n            cube([door_w, wall_t, door_h], center = true);\n    }\n    // Door step\n    translate([0,-base_d/2+wall_t/2+wall_t, -base_h/2-0.1]) \n        cube([door_w+4, wall_t+0.2, 2], center = true);\n}\n\nmodule windows() {\n    for(side = [-1, 1]) {\n        // Side windows\n        translate([side*(base_w/2-wall_t/2), -base_d/4, -base_h/2+wall_h/2]) \n        rotate([0, 90, 0]) {\n            difference() {\n                // Window frame\n                cube([win_h+2*wall_t, win_w+2*wall_t, wall_t], center = true);\n                // Window opening\n                cube([win_h, win_w, wall_t+0.2], center = true);\n            }\n        }\n        // Back windows\n        translate([side*base_w/4, base_d/2-wall_t/2, -base_h/2+wall_h/2]) \n        rotate([90, 0, 0]) {\n            difference() {\n                cube([win_w+2*wall_t, win_h+2*wall_t, wall_t], center = true);\n                cube([win_w, win_h, wall_t+0.2], center = true);\n            }\n        }\n    }\n}\n\nmodule chimney() {\n    translate([base_w/4, base_d/4, wall_h/2+roof_h/2]) {\n        difference() {\n            // Chimney body\n            cube([chim_w, chim_d, chim_h], center = true);\n            // Hollow inside\n            translate([0,0,-(chim_h-wall_t)/2])\n                cube([chim_w-wall_t, chim_d-wall_t, chim_h], center = true);\n        }\n        // Top lip\n        translate([0,0,chim_h/2]) \n            cube([chim_w+2, chim_d+2, 2], center = true);\n    }\n}\n\nmodule vents() {\n    for(i = [-1, 0, 1]) {\n        translate([i*20, 0, wall_h/2-2]) \n            rotate([0,90,0]) cylinder(h=base_w, d=2, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    main_base();\n    translate([0,0,base_h/2]) walls();\n    translate([0,0,base_h/2]) roof();\n    door();\n    windows();\n    chimney();\n    vents();\n}",
    "renders": true
  },
  {
    "building": "compound",
    "openscad_code": "// Realistic compound house with garage and chimney\n// Dimensions in mm, ~80 mm wide, 60 mm deep, 55 mm tall\n\n// Main building dimensions\nwall_thick = 2;\nbody_w = 60;\nbody_d = 50;\nbody_h = 30;\n\n// Roof\nroof_over = 4;\nroof_h = 20;\n\n// Garage\ngar_w = 28;\ngar_d = 35;\ngar_h = 20;\n\n// Windows and doors\nwin_size = 8;\ndoor_h = 15;\ndoor_w = 9;\n\n// Chimney\nchim_w = 8;\nchim_d = 6;\nchim_h = 15;\n\n// Color constants\ncolor_main = [0.8,0.6,0.4];\ncolor_roof = [0.5,0.3,0.2];\ncolor_trim = [0.7,0.7,0.7];\n\n// Utility to make a window frame\nmodule window_frame(x,y,z,w,h,d){\n    difference(){\n        translate([x,y,z]) cube([w+wall_thick,h+wall_thick,d], center=true);\n        translate([x,y,z+1]) cube([w,h,d+2], center=true);\n    }\n}\n\n// Main body\nmodule main_house(){\n    color(color_main)\n    difference(){\n        // Walls\n        translate([0,0,body_h/2])\n            cube([body_w,body_d,body_h], center=true);\n        \n        // Front door\n        translate([0, body_d/2+0.1, door_h/2])\n            cube([door_w, wall_thick+0.2, door_h], center=true);\n        \n        // Front windows (2)\n        for(i=[-1,1])\n            window_frame(i*body_w/4, body_d/2+0.1, body_h*0.65, win_size, win_size, wall_thick+0.2);\n        \n        // Back windows\n        for(i=[-1,1])\n            window_frame(i*body_w/4, -body_d/2-0.1, body_h*0.65, win_size, win_size, wall_thick+0.2);\n        \n        // Side windows\n        window_frame(body_w/2+0.1, 0, body_h*0.65, win_size, win_size, wall_thick+0.2);\n    }\n}\n\n// Roof\nmodule roof(){\n    color(color_roof)\n    union(){\n        // Main gable roof\n        translate([0,0,body_h+roof_h/2])\n            rotate([0,90,0])\n                linear_extrude(height=body_w+roof_over*2, center=true, convexity=10)\n                    polygon(points=[[-body_d/2-roof_over,0],\n                                   [0,roof_h],\n                                   [body_d/2+roof_over,0]]);\n        \n        // Overhang side caps\n        translate([0,body_d/2+roof_over,body_h+roof_h/2])\n            rotate([90,0,0])\n                cube([body_w+roof_over*2, roof_h*1.5, wall_thick], center=true);\n        translate([0,-body_d/2-roof_over,body_h+roof_h/2])\n            rotate([90,0,0])\n                cube([body_w+roof_over*2, roof_h*1.5, wall_thick], center=true);\n    }\n}\n\n// Garage\nmodule garage(){\n    color(color_main)\n    difference(){\n        translate([body_w/2+gar_w/2-wall_thick, 0, gar_h/2])\n            cube([gar_w, gar_d, gar_h], center=true);\n        \n        // Garage door\n        translate([body_w/2+gar_w-wall_thick, gar_d/2+0.1, gar_h/2])\n            cube([gar_w*0.8, wall_thick+0.2, gar_h*0.8], center=true);\n        \n        // Side window\n        window_frame(body_w/2+gar_w-wall_thick, -gar_d/2+10, gar_h*0.7, win_size, win_size, wall_thick+0.2);\n    }\n    \n    // Garage roof (flat)\n    color(color_roof)\n    translate([body_w/2+gar_w/2-wall_thick, 0, gar_h+wall_thick/2])\n        cube([gar_w+roof_over, gar_d+roof_over, wall_thick], center=true);\n}\n\n// Chimney\nmodule chimney(){\n    color(color_trim)\n    translate([body_w/4, body_d/4, body_h+roof_h-chim_h/2])\n        cube([chim_w, chim_d, chim_h], center=true);\n    \n    // Chimney top lip\n    translate([body_w/4, body_d/4, body_h+roof_h+chim_h/2])\n        cube([chim_w+2, chim_d+2, wall_thick], center=true);\n}\n\n// Base slab\nmodule base(){\n    color([0.5,0.5,0.5])\n    translate([0,0,-wall_thick/2])\n        cube([body_w+gar_w, body_d+gar_d, wall_thick], center=true);\n}\n\n// Assembly\nbase();\nmain_house();\ngarage();\nroof();\nchimney();",
    "renders": true
  },
  {
    "building": "institute",
    "openscad_code": "// Institute Building - Realistic Style, Medium Complexity\n// 3D printable small-scale architectural model (~70mm wide)\n\n$fn = 30;  // Good quality for curves\n\n// Overall dimensions\nbuilding_width = 70;\nbuilding_depth = 40;\nbuilding_height = 35;\n\nmodule institute_building() {\n    // Main structure\n    difference() {\n        union() {\n            // Ground floor\n            translate([0, 0, 2.5])\n                cube([building_width, building_depth, 5], center=true);\n            \n            // Upper floors\n            translate([0, 0, 7.5])\n                cube([building_width-6, building_depth-6, 20], center=true);\n                \n            // Roof parapet\n            translate([0, 0, building_height-2.5])\n                cube([building_width-4, building_depth-4, 3], center=true);\n        }\n        \n        // Entrance recess\n        translate([0, building_depth/2-1, 5])\n            cube([20, 5, 10], center=true);\n    }\n    \n    // Columns at entrance\n    for(x = [-7, 7]) {\n        translate([x, building_depth/2-2.5, 5])\n            cylinder(h=10, r=2);\n    }\n    \n    // Windows - front facade\n    for(x = [-25, -15, -5, 5, 15, 25]) {\n        for(y = [0, 10]) {\n            translate([x, building_depth/2-1.5, 10+y])\n                cube([6, 2, 5]);\n            translate([x, -building_depth/2+1.5, 10+y])\n                cube([6, 2, 5]);\n        }\n    }\n    \n    // Windows - side facades  \n    for(z = [10, 15, 20, 25]) {\n        for(y = [-15, -5, 5, 15]) {\n            translate([building_width/2-1.5, y, z])\n                cube([2, 6, 5]);\n            translate([-building_width/2+1.5, y, z])\n                cube([2, 6, 5]);\n        }\n    }\n    \n    // Entrance door\n    translate([0, building_depth/2-1, 2.5])\n        cube([8, 1, 8], center=true);\n    \n    // Steps\n    for(i = [1:3]) {\n        translate([0, building_depth/2+2*i, 1.5*i-2])\n            cube([25+4*i, 2, 1.5], center=true);\n    }\n    \n    // Sign above entrance\n    translate([0, building_depth/2-3, 15])\n        cube([30, 1, 5], center=true);\n    \n    // Flagpole\n    translate([building_width/2-5, 0, building_height])\n        union() {\n            cylinder(h=15, r=1);\n            translate([0, 5, 15])\n                rotate([0, 90, 0])\n                    cube([10, 6, 1]);\n        }\n}\n\ninstitute_building();",
    "renders": true
  },
  {
    "building": "academy",
    "openscad_code": "// Academy Building - Realistic Style, Medium Complexity\n// 3D printable, ~70mm wide, no steep overhangs\n\n$fa = 2;\n$fs = 0.5;\n\nmodule foundation() {\n    // Concrete base\n    difference() {\n        translate([0,0,-2]) cube([70,50,4], center=true);\n        translate([0,0,-1.5]) cube([66,46,4], center=true);\n    }\n}\n\nmodule main_body() {\n    // Central block with pitched roof\n    difference() {\n        cube([50,30,25], center=true);\n        // Doorway entrance\n        translate([0,-15.1, -5]) cube([8,2,12], center=true);\n        // Windows front\n        for(x=[-20,-10,10,20])\n            translate([x,-15.1,5]) cube([6,1,8], center=true);\n    }\n}\n\nmodule pitched_roof() {\n    // Traditional peaked roof\n    rotate([0,0,0]) {\n        translate([0,0,25]) {\n            difference() {\n                polyhedron(\n                    points=[[-27,-17,0],[27,-17,0],[27,17,0],[-27,17,0],[0,0,15]],\n                    faces=[[0,1,4],[1,2,4],[2,3,4],[3,0,4],[0,3,2,1]]\n                );\n                // Chimney hole\n                translate([15,0,7]) rotate([0,90,0]) \n                    cylinder(h=10, r=3, center=true);\n            }\n        }\n    }\n}\n\nmodule side_wings() {\n    // Left and right classroom wings\n    for(side=[-1,1]) {\n        translate([side*35,0,7.5]) {\n            difference() {\n                cube([18,26,15], center=true);\n                // Windows on sides\n                for(z=[0,8])\n                    translate([side*9.1,0,z]) rotate([0,90,0]) \n                        cylinder(h=1, r=3);\n            }\n        }\n    }\n}\n\nmodule tower() {\n    // Clock tower entrance\n    translate([0,-20,0]) {\n        difference() {\n            cube([14,10,35], center=true);\n            // Tower windows\n            for(z=[10,20])\n                translate([0,-5.1,z]) cube([4,1,6], center=true);\n        }\n        // Tower roof\n        translate([0,-20,35]) cylinder(h=10, r1=7, r2=5);\n    }\n}\n\nmodule steps() {\n    // Entrance steps\n    for(i=[0,1,2]) {\n        translate([0,-20-i, -4-i*2]) \n            cube([12+i*4, 2, 2], center=true);\n    }\n}\n\nmodule windows_detail() {\n    // Window frames on wings\n    for(side=[-1,1]) {\n        for(z=[0,8]) {\n            translate([side*35,0,z]) {\n                color(\"white\") {\n                    // Window frames\n                    rotate([0,90,0]) {\n                        difference() {\n                            cylinder(h=1.2, r=3.5);\n                            cylinder(h=1.3, r=2.8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    foundation();\n    main_body();\n    pitched_roof();\n    side_wings();\n    tower();\n    steps();\n    windows_detail();\n}",
    "renders": true
  },
  {
    "building": "lyceum",
    "openscad_code": "// Lyceum Building - Medium Complexity Realistic Style\n// Dimensions optimized for 3D printing (70mm x 50mm x 35mm)\n\n// Main building body\nmodule main_building() {\n    // Ground floor\n    difference() {\n        cube([60, 40, 20], center=true);\n        // Doorway\n        translate([0, -19.9, -5])\n            cube([12, 2, 10], center=true);\n        // Windows\n        translate([-20, -19.9, 5])\n            cube([8, 2, 6], center=true);\n        translate([20, -19.9, 5])\n            cube([8, 2, 6], center=true);\n    }\n    \n    // First floor\n    translate([0, 0, 20])\n        cube([60, 40, 15], center=true);\n}\n\n// Roof with classical pediment\nmodule roof() {\n    // Main roof\n    translate([0, 0, 35])\n        cube([70, 50, 5], center=true);\n    \n    // Classical pediment front\n    translate([0, -25, 35])\n        rotate([90, 0, 0])\n            linear_extrude(height=5)\n                polygon(points=[[-35, 0], [35, 0], [0, 15]]);\n}\n\n// Columns for classical entrance\nmodule columns() {\n    for (i = [-20, -10, 0, 10, 20]) {\n        translate([i, -20, 0])\n            cylinder(h=20, r=2, center=true);\n    }\n}\n\n// Entrance steps\nmodule steps() {\n    for (i = [0:1:3]) {\n        translate([0, -25 - i*2, -10 - i*2])\n            cube([30 + i*4, 4, 2], center=true);\n    }\n}\n\n// Side wings\nmodule side_wings() {\n    // Left wing\n    translate([-40, 0, 0])\n        cube([20, 30, 32], center=true);\n    \n    // Right wing\n    translate([40, 0, 0])\n        cube([20, 30, 32], center=true);\n}\n\n// Chimneys\nmodule chimneys() {\n    // Left chimney\n    translate([-25, 15, 37.5])\n        cube([6, 6, 8], center=true);\n    \n    // Right chimney\n    translate([25, 15, 37.5])\n        cube([6, 6, 8], center=true);\n}\n\n// Window details\nmodule windows() {\n    // Ground floor windows\n    for (x = [-20, 20]) {\n        translate([x, 19.9, 5])\n            cube([8, 0.5, 6], center=true);\n    }\n    \n    // First floor windows\n    for (x = [-20, 0, 20]) {\n        translate([x, 19.9, 27.5])\n            cube([6, 0.5, 5], center=true);\n    }\n}\n\n// Assemble the lyceum\nunion() {\n    // Main structure\n    main_building();\n    \n    // Side wings\n    side_wings();\n    \n    // Classical elements\n    columns();\n    roof();\n    \n    // Details\n    chimneys();\n    steps();\n    windows();\n}",
    "renders": true
  },
  {
    "building": "gymnasium",
    "openscad_code": "// Gymnasium - Realistic Medium Complexity\n// Scale: 1:1000 (80mm long)\n\n$fn = 24;  // Smooth curves for 3D printing\nwall_thickness = 1.2;\n\n// Main building module\nmodule gymnasium() {\n    // Foundation slab\n    translate([0, 0, -1]) \n        cube([60, 40, 2], center = true);\n    \n    // Main hall body\n    union() {\n        // Lower walls\n        difference() {\n            cube([56, 36, 20], center = true);\n            translate([0, 0, wall_thickness])\n                cube([56 - wall_thickness*2, 36 - wall_thickness*2, 20], center = true);\n        }\n        \n        // Roof structure\n        translate([0, 0, 20]) {\n            // Roof base\n            difference() {\n                cube([58, 38, 3], center = true);\n                translate([0, 0, wall_thickness])\n                    cube([58 - wall_thickness*2, 38 - wall_thickness*2, 3], center = true);\n            }\n            \n            // Roof peak\n            translate([0, 0, 3])\n                rotate([90, 0, 0])\n                    linear_extrude(height = 58, center = true)\n                        polygon(points = [[-29, 0], [29, 0], [0, 12]]);\n        }\n    }\n    \n    // Entrance section\n    translate([0, -20, 0]) {\n        difference() {\n            cube([20, 8, 12], center = true);\n            translate([0, 0, wall_thickness])\n                cube([20 - wall_thickness*2, 8 - wall_thickness*2, 12], center = true);\n        }\n        \n        // Entrance roof\n        translate([0, 0, 12])\n            cube([22, 10, 1.5], center = true);\n    }\n    \n    // Windows on long sides\n    for(side = [-1, 1]) {\n        translate([side * 28.5, 0, 10]) {\n            for(pos = [-20, -10, 0, 10, 20]) {\n                translate([0, pos, 0])\n                    window(4, 6);\n            }\n        }\n    }\n    \n    // Windows on short sides\n    for(side = [-1, 1]) {\n        translate([0, side * 18.5, 10]) {\n            for(pos = [-15, -5, 5, 15]) {\n                translate([pos, 0, 0])\n                    window(4, 6);\n            }\n        }\n    }\n    \n    // Main entrance doors\n    translate([0, -24.5, 5])\n        door(8, 10);\n    \n    // Side emergency exits\n    for(side = [-1, 1]) {\n        translate([side * 28.5, 0, 5])\n            door(4, 8);\n    }\n    \n    // HVAC units on roof\n    for(pos = [[-20, 12, 23], [20, 12, 23], [0, -12, 23]]) {\n        translate(pos)\n            cube([6, 4, 3], center = true);\n    }\n    \n    // Flag pole\n    translate([0, -22, 24])\n        cylinder(h = 15, r = 0.5);\n}\n\n// Window module\nmodule window(width, height) {\n    difference() {\n        cube([wall_thickness, width, height], center = true);\n        translate([wall_thickness/2 + 0.1, 0, 0])\n            cube([0.2, width - 1, height - 1], center = true);\n    }\n}\n\n// Door module\nmodule door(width, height) {\n    difference() {\n        cube([width, wall_thickness, height], center = true);\n        translate([0, wall_thickness/2 + 0.1, -height/4])\n            cube([width - 2, 0.2, height/2], center = true);\n    }\n}\n\n// Generate the gymnasium\ngymnasium();",
    "renders": true
  },
  {
    "building": "arena",
    "openscad_code": "// Colosseum-style arena\n// Outer diameter ≈ 80 mm, printable without supports\n\n// Parameters\narena_d = 80;          // overall diameter\nwall_t = 2;            // wall thickness\nseat_h = 4;            // seat row height\nseat_step = 3;         // seat row depth\nrows = 12;             // number of seat rows\narch_w = 6;            // arch width\narch_h = 10;           // arch height\npillar_w = 2;          // pillar thickness\n\n// Ground base\ndifference() {\n    cylinder(d = arena_d + 4, h = 2, $fn = 120);\n    translate([0, 0, -0.1])\n        cylinder(d = arena_d - wall_t * 2, h = 2.2, $fn = 120);\n}\n\n// Outer wall with arches\nmodule outer_wall() {\n    difference() {\n        cylinder(d = arena_d, h = arch_h * 2, $fn = 120);\n        // Hollow inside\n        translate([0, 0, -0.1])\n            cylinder(d = arena_d - wall_t * 2, h = arch_h * 2 + 0.2, $fn = 120);\n\n        // Arches\n        for (i = [0 : 360/36 : 359]) {\n            rotate([0, 0, i])\n                translate([arena_d/2 - wall_t/2, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(d = arch_w, h = wall_t + 0.2, $fn = 20);\n            rotate([0, 0, i])\n                translate([arena_d/2 - wall_t, 0, arch_h/2])\n                    cube([wall_t + 0.2, arch_w, arch_h + 0.2], center = true);\n        }\n    }\n}\n\n// Seating bowl\nmodule seating() {\n    for (r = [0 : 1 : rows - 1]) {\n        current_d = arena_d - wall_t * 4 - r * seat_step * 2;\n        if (current_d > 0) {\n            translate([0, 0, r * seat_h + 2])\n                difference() {\n                    cylinder(d = current_d, h = seat_h, $fn = 120);\n                    translate([0, 0, -0.1])\n                        cylinder(d = current_d - seat_step, h = seat_h + 0.2, $fn = 120);\n                }\n        }\n    }\n}\n\n// Arena floor\ntranslate([0, 0, rows * seat_h + 2])\n    cylinder(d = arena_d - wall_t * 4 - rows * seat_step * 2, h = 1, $fn = 120);\n\n// Pillars between arches\nmodule pillars() {\n    for (i = [0 : 360/36 : 359]) {\n        rotate([0, 0, i])\n            translate([arena_d/2 - wall_t/2, 0, arch_h])\n                cube([wall_t, pillar_w, arch_h], center = true);\n    }\n}\n\n// Build\nunion() {\n    outer_wall();\n    seating();\n    pillars();\n}",
    "renders": true
  },
  {
    "building": "coliseum",
    "openscad_code": "// Coliseum - medium complexity realistic style\n// Outer dimensions ~70mm diameter, 30mm height\n\n$fa = 2;\n$fs = 0.5;\n\nmodule arch(width=6, height=8, depth=4) {\n    difference() {\n        // Main arch block\n        translate([0, 0, height/2])\n            cube([width, depth, height], center=true);\n        \n        // Arch opening\n        translate([0, 0, height/2 - 2])\n            cube([width - 2, depth + 1, height - 1], center=true);\n        \n        // Rounded top\n        translate([0, 0, height - 1])\n            cube([width - 2, depth + 1, 2], center=true);\n            \n        // Arch curve\n        translate([0, 0, height - 4])\n            cylinder(h=depth+1, r=(width-2)/2, center=true);\n    }\n}\n\nmodule outer_wall(radius=30, height=25) {\n    // Main outer wall\n    difference() {\n        cylinder(h=height, r=radius, center=false);\n        \n        // Hollow center\n        cylinder(h=height, r=radius - 4, center=false);\n    }\n    \n    // Arches around outer wall\n    for (i = [0 : 15]) {\n        rotate([0, 0, i * 22.5])\n            translate([radius - 3, 0, 4])\n                arch(5, 10, 3.5);\n    }\n}\n\nmodule inner_wall(radius=20, height=20) {\n    // Main inner wall\n    difference() {\n        cylinder(h=height, r=radius, center=false);\n        cylinder(h=height, r=radius - 3, center=false);\n    }\n    \n    // Arches around inner wall\n    for (i = [0 : 11]) {\n        rotate([0, 0, i * 30])\n            translate([radius - 2.5, 0, 4])\n                arch(4, 8, 3);\n    }\n}\n\nmodule seating_tier(radius=15, height=3) {\n    // Tiered seating\n    for (tier = [0 : 2]) {\n        translate([0, 0, tier * 3])\n            difference() {\n                cylinder(h=height, r=radius - tier * 4, center=false);\n                cylinder(h=height, r=radius - tier * 4 - 2.5, center=false);\n            }\n    }\n}\n\nmodule arena_floor(radius=10, height=2) {\n    // Central arena\n    cylinder(h=height, r=radius, center=false);\n}\n\nmodule coliseum() {\n    // Base platform\n    cylinder(h=3, r=35, center=false);\n    \n    // Outer structure\n    outer_wall(30, 25);\n    \n    // Inner structure\n    translate([0, 0, 3])\n        inner_wall(20, 20);\n    \n    // Seating area\n    translate([0, 0, 6])\n        seating_tier(15, 3);\n    \n    // Arena floor\n    translate([0, 0, 15])\n        arena_floor(10, 2);\n    \n    // Decorative top ring\n    translate([0, 0, 25])\n        difference() {\n            cylinder(h=2, r=31, center=false);\n            cylinder(h=2, r=29, center=false);\n        }\n}\n\n// Render the complete coliseum\ncoliseum();",
    "renders": true
  },
  {
    "building": "amphitheater",
    "openscad_code": "// Amphitheater Model - Realistic Style, Medium Complexity\n// 3D printable with proper wall thickness and no overhangs\n\n// Overall dimensions\narena_diameter = 60;\narena_height = 8;\nseating_height = 20;\nwall_thickness = 2;\nnum_seats = 8;\n\n// Main amphitheater module\nmodule amphitheater() {\n    // Foundation base\n    translate([0, 0, -wall_thickness]) {\n        cylinder(h=wall_thickness, d=arena_diameter + 40, $fn=64);\n    }\n    \n    // Arena floor\n    translate([0, 0, 0]) {\n        cylinder(h=arena_height, d=arena_diameter, $fn=64);\n    }\n    \n    // Seating tiers\n    for (i = [0:num_seats-1]) {\n        tier_radius = arena_diameter/2 + 10 + i*4;\n        tier_height = seating_height - i*2;\n        translate([0, 0, arena_height]) {\n            difference() {\n                // Outer ring\n                cylinder(h=tier_height, d=tier_radius*2 + wall_thickness*2, $fn=64);\n                // Inner cutout\n                translate([0, 0, -0.1]) {\n                    cylinder(h=tier_height+0.2, d=tier_radius*2, $fn=64);\n                }\n            }\n        }\n    }\n    \n    // Entrance tunnel\n    translate([0, -arena_diameter/2 - 10, 0]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=20, d=10, $fn=32);\n        }\n    }\n    \n    // Entrance arch\n    translate([0, -arena_diameter/2 - 10, arena_height/2]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cube([20, 10, 8]);\n                translate([2, -1, 2]) {\n                    cube([16, 12, 6]);\n                }\n            }\n        }\n    }\n    \n    // Stage area\n    translate([0, 0, arena_height]) {\n        cylinder(h=1, d=arena_diameter/3, $fn=32);\n    }\n    \n    // Support columns\n    column_positions = [\n        [arena_diameter/2 + 5, 0],\n        [-arena_diameter/2 - 5, 0],\n        [0, arena_diameter/2 + 5],\n        [0, -arena_diameter/2 - 5]\n    ];\n    \n    for (pos = column_positions) {\n        translate([pos[0], pos[1], arena_height]) {\n            cylinder(h=seating_height + 5, d=3, $fn=16);\n        }\n    }\n    \n    // Stairs between seating sections\n    for (angle = [0:45:359]) {\n        rotate([0, 0, angle]) {\n            translate([arena_diameter/2 + 5, 0, arena_height]) {\n                cube([30, 4, seating_height/num_seats]);\n            }\n        }\n    }\n}\n\n// Generate the amphitheater\namphitheater();",
    "renders": true
  },
  {
    "building": "theater",
    "openscad_code": "// Realistic-style medium-complexity 3D-printable theater\n// Overall footprint ~70 mm wide, ~45 mm deep, ~40 mm tall\n\n$fa = 2; $fs = 0.5;\n\nmodule walls() {\n    // Main auditorium shell\n    difference() {\n        union() {\n            // Back wall\n            translate([-35, 0, 0]) cube([70, 45, 30], center=false);\n            // Roof cap\n            translate([-35, 0, 30]) cube([70, 45, 2], center=false);\n        }\n        // Doorway\n        translate([25, 20, 0]) cube([10, 5, 20], center=false);\n        // Side windows (left and right)\n        for (y = [10, 30])\n            translate([-33, y-2.5, 15]) cube([2, 5, 8], center=false);\n        // Roof overhang cut\n        translate([-37, -3, 25]) cube([74, 51, 10], center=false);\n    }\n}\n\nmodule marquee() {\n    // Marquee awning\n    difference() {\n        translate([-30, 45, 20]) cube([60, 8, 10], center=false);\n        translate([-28, 46, 25]) cube([56, 6, 6], center=false);\n    }\n    // Marquee supports\n    for (x = [-20, 0, 20])\n        translate([x, 45, 15]) cylinder(h=5, d=2);\n    // Bulbs along front edge of marquee\n    for (x = [-25 : 5 : 25])\n        translate([x, 52.5, 25]) sphere(d=1.5);\n}\n\nmodule columns() {\n    // Classical columns at entrance\n    for (x = [-20, 20]) {\n        translate([x, 45, 0]) {\n            cylinder(h=25, d=3);\n            translate([0, 0, 25]) sphere(d=4);\n        }\n    }\n}\n\nmodule steps() {\n    // Entry steps\n    for (i = [0:2]) {\n        translate([-25-i*2, 45+i*5, 0]) cube([50+i*4, 5, 2]);\n    }\n}\n\nmodule roof_details() {\n    // Roof ridge piece\n    translate([-35, 22.5, 32]) cube([70, 1, 3]);\n    // Chimney\n    difference() {\n        translate([20, 10, 32]) cube([6, 6, 8]);\n        translate([22, 12, 35]) cube([2, 2, 5]);\n    }\n}\n\nmodule signage() {\n    // Theater name plaque on marquee\n    translate([-15, 48, 25]) cube([30, 2, 5]);\n    // Small raised lettering bars (simplified)\n    for (i = [-12 : 4 : 12])\n        translate([i, 49, 26.5]) cube([3, 0.5, 1.5]);\n}\n\n// Assemble the complete theater\nunion() {\n    walls();\n    marquee();\n    columns();\n    steps();\n    roof_details();\n    signage();\n}",
    "renders": true
  },
  {
    "building": "cinema",
    "openscad_code": "// Cinema building - Realistic medium complexity\n// Wall thickness 1.5mm, max dimension 80mm\n\nmodule wall(width, height, depth) {\n    difference() {\n        cube([width, height, depth]);\n        translate([1.5, 1.5, 1.5])\n        cube([width-3, height-3, depth-3]);\n    }\n}\n\nmodule window_frame(width, height) {\n    difference() {\n        cube([width, height, 2]);\n        translate([2, 2, -0.1])\n        cube([width-4, height-4, 2.2]);\n    }\n}\n\nmodule marquee() {\n    // Main marquee structure\n    difference() {\n        translate([-20, 0, 20])\n        cube([40, 5, 8]);\n        \n        // Marquee opening\n        translate([-18, -0.1, 21.5])\n        cube([36, 5.2, 5]);\n    }\n    \n    // Marquee supports\n    for(x = [-15, -5, 5, 15]) {\n        translate([x, 5, 20])\n        cube([2, 10, 2]);\n    }\n    \n    // Ticket booth\n    translate([0, -12, 0])\n    cube([10, 6, 12]);\n}\n\nmodule entrance_doors() {\n    // Double doors\n    for(x = [-7, 1]) {\n        translate([x, -0.1, 0])\n        cube([6, 1, 12]);\n    }\n    \n    // Door handles\n    for(x = [-4, 4]) {\n        translate([x, -0.2, 7])\n        cylinder(h=1, r=0.5);\n    }\n}\n\nmodule roof_structure() {\n    // Main roof\n    translate([-25, 0, 28])\n    cube([50, 30, 2]);\n    \n    // Roof edge detail\n    translate([-25, -1, 28])\n    cube([50, 2, 3]);\n    translate([-25, 29, 28])\n    cube([50, 2, 3]);\n}\n\nmodule poster_boxes() {\n    // Movie poster displays\n    for(x = [-20, -10, 0, 10, 20]) {\n        translate([x, 0.1, 8])\n        cube([8, 1, 12]);\n        translate([x+2, 1.1, 10])\n        cube([4, 0.5, 8]);\n    }\n}\n\nmodule windows() {\n    // Side windows\n    for(x = [-22, -15, -8, 8, 15, 22]) {\n        translate([x, 0.1, 15])\n        window_frame(5, 8);\n    }\n}\n\n// Main building assembly\nunion() {\n    // Base building\n    wall(50, 28, 30);\n    \n    // Front facade\n    translate([0, -1.5, 0])\n    wall(46, 20, 3);\n    \n    // Marquee\n    marquee();\n    \n    // Entrance\n    translate([0, -1.5, 0])\n    entrance_doors();\n    \n    // Roof\n    roof_structure();\n    \n    // Poster boxes\n    poster_boxes();\n    \n    // Windows\n    windows();\n    \n    // Sign\n    translate([0, -3, 25])\n    cube([20, 1.5, 3]);\n}\n\n// Ground base\ntranslate([-30, -20, -1])\ncube([60, 50, 1]);",
    "renders": true
  },
  {
    "building": "opera",
    "openscad_code": "// Realistic Opera House - Medium Complexity\n// Main dimensions (in mm)\nbase_width = 60;\nbase_depth = 80;\nbase_height = 5;\n\n// Grand staircase\nstair_width = 35;\nstair_depth = 15;\nstair_height = 8;\nstair_steps = 6;\n\n// Main structure\nmain_width = 50;\nmain_depth = 60;\nmain_height = 30;\n\n// Columns\ncol_radius = 2;\ncol_height = 25;\ncol_spacing = 10;\ncol_count = 4;\n\n// Roof\nroof_width = 55;\nroof_depth = 65;\nroof_height = 15;\nroof_angle = 30;\n\n// Dome\ndome_radius = 20;\ndome_height = 15;\n\n// Windows\nwin_width = 6;\nwin_height = 8;\nwin_depth = 2;\n\n// Base platform\ndifference() {\n    cube([base_width, base_depth, base_height], center=true);\n    translate([0, 0, base_height-0.5])\n        cube([base_width-2, base_depth-2, base_height], center=true);\n}\n\n// Grand staircase\nmodule staircase() {\n    for(i=[1:stair_steps]) {\n        translate([0, base_depth/2 - stair_depth/2 - (i-1)*stair_depth/stair_steps, \n                  base_height + i*stair_height/stair_steps])\n            cube([stair_width - (stair_width/stair_steps)*i, \n                  stair_depth/stair_steps, \n                  stair_height/stair_steps], center=true);\n    }\n}\nstaircase();\n\n// Main building structure\ntranslate([0, -5, base_height])\n    cube([main_width, main_depth, main_height], center=true);\n\n// Columns\nmodule column(x_pos) {\n    translate([x_pos, -main_depth/2 + 5, base_height + col_height/2])\n        cylinder(r=col_radius, h=col_height, $fn=16);\n}\nfor(i=[-col_count/2+0.5:col_count/2-0.5])\n    column(i*col_spacing);\n\n// Roof with angle\ntranslate([0, -5, base_height + main_height])\n    difference() {\n        rotate([0, roof_angle, 0])\n            scale([1, 1/cos(roof_angle), 1])\n                cube([roof_width, roof_depth, roof_height], center=true);\n        translate([0, 0, -roof_height/2])\n            cube([roof_width-4, roof_depth-4, roof_height+2], center=true);\n    }\n\n// Central dome\ntranslate([0, -5, base_height + main_height + roof_height/2])\n    difference() {\n        sphere(r=dome_radius, $fn=32);\n        scale([1, 1, dome_height/dome_radius])\n            sphere(r=dome_radius-2, $fn=32);\n    }\n\n// Windows on front\nmodule window(x_pos, y_pos) {\n    translate([x_pos, y_pos, base_height + main_height/2])\n        difference() {\n            cube([win_width, win_depth, win_height], center=true);\n            translate([0, win_depth/2+0.1, 0])\n                cube([win_width-1, 0.2, win_height-1], center=true);\n        }\n}\nfor(i=[-1.5:1.5])\n    window(i*10, -main_depth/2 + 1);\n\n// Side windows\nfor(i=[-2:2])\n    translate([main_width/2 - 1, -15 + i*10, base_height + main_height/2])\n        rotate([0, 90, 0])\n            difference() {\n                cube([win_width, win_depth, win_height], center=true);\n                translate([0, win_depth/2+0.1, 0])\n                    cube([win_width-1, 0.2, win_height-1], center=true);\n            }\n\n// Entrance arch\ntranslate([0, -main_depth/2 + 2, base_height + 8])\n    difference() {\n        cube([12, 4, 16], center=true);\n        translate([0, 2, 4])\n            cube([8, 4, 8], center=true);\n    }\n\n// Small decorative elements on roof\nmodule finial(x_pos) {\n    translate([x_pos, -5, base_height + main_height + roof_height/2 + dome_radius])\n        cylinder(r=1, h=3, $fn=8);\n}\nfinial(-15);\nfinial(15);",
    "renders": true
  },
  {
    "building": "pagoda",
    "openscad_code": "// Realistic medium-complexity pagoda\n// All dimensions in mm; overall height ~80 mm, base ~50 mm\n\nmodule roof_tier(h, r_base, r_top, n_sides=12) {\n    // Multi-tier curved roof using tapered cylinder + flare\n    linear_extrude(height = h, scale = r_top / r_base)\n        circle(r = r_base, $fn = n_sides);\n}\n\nmodule upturn_eave(r_inner, r_outer, thickness, n_sides=48) {\n    // Curved eave that flares upward\n    difference() {\n        cylinder(h = thickness, r1 = r_outer, r2 = r_outer + 3, $fn = n_sides);\n        translate([0,0,-0.1])\n            cylinder(h = thickness + 0.2, r = r_inner, $fn = n_sides);\n    }\n}\n\nmodule finial(height, ball_r) {\n    // Traditional spire and orbs\n    union() {\n        cylinder(h = height*0.6, r1 = 2, r2 = 0.5, $fn = 16);\n        translate([0,0,height*0.6]) sphere(r = ball_r);\n        translate([0,0,height*0.6+ball_r*2]) sphere(r = ball_r*0.7);\n    }\n}\n\nmodule pagoda_level(floor_h, roof_h, wall_w, roof_r_base) {\n    // One complete floor + roof tier\n    color(\"saddlebrown\")  // wooden structure\n    difference() {\n        cube([wall_w, wall_w, floor_h], center = true);\n        translate([0,0,-0.1])\n            cube([wall_w-4, wall_w-4, floor_h+0.2], center = true);\n    }\n\n    color(\"firebrick\")\n    translate([0,0,floor_h/2+roof_h/2])\n        roof_tier(roof_h, roof_r_base, roof_r_base*0.85);\n\n    color(\"darkred\")\n    translate([0,0,floor_h/2+roof_h])\n        upturn_eave(roof_r_base*0.85, roof_r_base+4, 2);\n}\n\nmodule base_platform() {\n    // Tiered stone base\n    color(\"gray\")\n    union() {\n        cube([60,60,8], center = true);\n        translate([0,0,8])\n            cube([54,54,6], center = true);\n        translate([0,0,14])\n            cube([48,48,4], center = true);\n    }\n}\n\nmodule pagoda() {\n    // Assemble all levels\n    base_platform();\n\n    // Level 1 (ground floor)\n    translate([0,0,18])\n        pagoda_level(12, 10, 42, 28);\n\n    // Level 2\n    translate([0,0,18+12+10])\n        pagoda_level(10, 9, 36, 24);\n\n    // Level 3\n    translate([0,0,18+12+10+10+9])\n        pagoda_level(9, 8, 30, 20);\n\n    // Level 4 (top floor)\n    translate([0,0,18+12+10+10+9+9+8])\n        pagoda_level(8, 7, 24, 16);\n\n    // Finial on top\n    color(\"gold\")\n    translate([0,0,18+12+10+10+9+9+8+8+7])\n        finial(10, 3);\n}\n\n// Build the pagoda centered on the build plate\npagoda();",
    "renders": true
  },
  {
    "building": "pyramid",
    "openscad_code": "// Realistic Pyramid Model - Medium Complexity\n// Based on the Great Pyramid of Giza proportions\n// Overall size: ~60x60x36mm (scaled for 3D printing)\n\n$fn = 64; // Smooth curves for 3D printing\n\nmodule pyramid_core() {\n    // Main pyramid body with accurate 51.9° slope\n    difference() {\n        // Outer pyramid shell\n        cube([60, 60, 36], center = true);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cube([56, 56, 34], center = true);\n        \n        // Top opening for entrance\n        translate([0, 0, 18])\n            cube([8, 8, 20], center = true);\n    }\n}\n\nmodule entrance_passage() {\n    // Descending passage entrance\n    rotate([26.5, 0, 0])\n        translate([0, 0, -18])\n            difference() {\n                cube([4, 4, 40], center = true);\n                translate([0, 0, 2])\n                    cube([3.4, 3.4, 40], center = true);\n            }\n}\n\nmodule stone_courses() {\n    // Horizontal stone layers (courses)\n    for (z = [-16:2:16]) {\n        difference() {\n            translate([0, 0, z])\n                cube([62 - abs(z)*1.5, 62 - abs(z)*1.5, 1.5], center = true);\n            translate([0, 0, z + 0.2])\n                cube([61 - abs(z)*1.5, 61 - abs(z)*1.5, 1.5], center = true);\n        }\n    }\n}\n\nmodule corner_stones() {\n    // Reinforced corner stones\n    for (i = [-1, 1]) {\n        for (j = [-1, 1]) {\n            translate([i*29.5, j*29.5, 0])\n                cube([3, 3, 36], center = true);\n        }\n    }\n}\n\nmodule ventilation_shaft() {\n    // Upper ventilation shaft\n    rotate([-40, 0, 45])\n        translate([0, 0, 10])\n            cylinder(h = 30, r1 = 1, r2 = 0.5, center = true);\n}\n\nmodule base_platform() {\n    // Foundation platform\n    difference() {\n        cube([66, 66, 4], center = true);\n        translate([0, 0, 0.5])\n            cube([64, 64, 4], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Foundation\n    translate([0, 0, -20])\n        base_platform();\n    \n    // Pyramid structure\n    difference() {\n        union() {\n            // Core pyramid\n            pyramid_core();\n            \n            // Surface details\n            stone_courses();\n            corner_stones();\n        }\n        \n        // Entrance passage (cut through)\n        translate([0, -25, -2])\n            entrance_passage();\n            \n        // Ventilation shaft\n        ventilation_shaft();\n    }\n    \n    // Internal chamber (King's chamber)\n    difference() {\n        translate([0, 0, -8])\n            cube([10, 10, 6], center = true);\n        translate([0, 0, -7])\n            cube([9, 9, 6], center = true);\n    }\n    \n    // Support columns inside\n    for (x = [-3, 3]) {\n        translate([x, 0, -8])\n            cylinder(h = 6, r = 1, center = true);\n    }\n}\n\n// Ensure manifold geometry for 3D printing\n%translate([0, 0, -30])\n    cube([0.1, 0.1, 0.1], center = true);",
    "renders": true
  },
  {
    "building": "colosseum",
    "openscad_code": "// Colosseum - Medium Complexity Realistic Style\n// Designed for 3D printing with no overhangs\n\n// Overall dimensions\ncolosseum_diameter = 80;\ncolosseum_height = 30;\nwall_thickness = 2;\n\n// Outer wall parameters\nouter_wall_height = 25;\nouter_wall_radius = colosseum_diameter / 2;\nouter_arch_height = 18;\nouter_arch_width = 6;\nouter_arch_depth = 2.5;\nnum_outer_arches = 40;\n\n// Inner wall parameters\ninner_wall_radius = outer_wall_radius - 12;\ninner_wall_height = 20;\ninner_arch_height = 15;\ninner_arch_width = 5;\nnum_inner_arches = 30;\n\n// Arena floor\narena_radius = inner_wall_radius - 8;\n\n// Foundation/base\nbase_height = 5;\n\nmodule outer_wall() {\n    difference() {\n        // Main outer wall structure\n        cylinder(h=outer_wall_height, r=outer_wall_radius, $fn=100);\n        \n        // Hollow out center\n        cylinder(h=outer_wall_height+1, r=outer_wall_radius-wall_thickness, $fn=100);\n        \n        // Create arches\n        for(i=[0:num_outer_arches-1]) {\n            rotate([0, 0, i * 360/num_outer_arches])\n            translate([outer_wall_radius-wall_thickness/2-0.1, 0, outer_wall_height-outer_arch_height])\n            cube([wall_thickness+0.2, outer_arch_width, outer_arch_height]);\n        }\n    }\n    \n    // Add arch tops\n    for(i=[0:num_outer_arches-1]) {\n        rotate([0, 0, i * 360/num_outer_arches])\n        translate([outer_wall_radius-wall_thickness/2, 0, outer_wall_height-outer_arch_height])\n        rotate([90, 0, 0])\n        cylinder(h=outer_arch_width, r1=outer_arch_depth, r2=0, $fn=20);\n    }\n}\n\nmodule inner_wall() {\n    difference() {\n        // Main inner wall structure\n        cylinder(h=inner_wall_height, r=inner_wall_radius, $fn=80);\n        \n        // Hollow out center\n        cylinder(h=inner_wall_height+1, r=inner_wall_radius-wall_thickness, $fn=80);\n        \n        // Create arches\n        for(i=[0:num_inner_arches-1]) {\n            rotate([0, 0, i * 360/num_inner_arches])\n            translate([inner_wall_radius-wall_thickness/2-0.1, 0, inner_wall_height-inner_arch_height])\n            cube([wall_thickness+0.2, inner_arch_width, inner_arch_height]);\n        }\n    }\n}\n\nmodule seating_tiers() {\n    // First tier\n    for(i=[1:3]) {\n        translate([0, 0, base_height + i*2])\n        difference() {\n            cylinder(h=2, r1=arena_radius+12-i*2, r2=arena_radius+12-i*2.5, $fn=60);\n            cylinder(h=3, r=arena_radius+2, $fn=60);\n        }\n    }\n}\n\nmodule arena_floor() {\n    // Main arena floor\n    translate([0, 0, base_height])\n    cylinder(h=1, r=arena_radius, $fn=60);\n    \n    // Underground passages\n    for(i=[1:4]) {\n        rotate([0, 0, i*90])\n        translate([arena_radius/2, 0, base_height-1])\n        cube([arena_radius, 4, 2], center=true);\n    }\n}\n\nmodule foundation() {\n    cylinder(h=base_height, r=outer_wall_radius+2, $fn=100);\n}\n\n// Main assembly\nunion() {\n    // Base foundation\n    foundation();\n    \n    // Outer wall\n    translate([0, 0, base_height])\n    outer_wall();\n    \n    // Inner wall\n    translate([0, 0, base_height])\n    inner_wall();\n    \n    // Seating tiers\n    seating_tiers();\n    \n    // Arena floor\n    arena_floor();\n}",
    "renders": true
  },
  {
    "building": "basilica",
    "openscad_code": "// Basilica model - realistic style, medium complexity\n// 3D printable, ~80mm long\n\n$fn = 32;  // Smooth curves\n\n// Main dimensions\nbasilica_length = 80;\nbasilica_width = 40;\nwall_thickness = 2;\n\n// Module for arches\nmodule arch(width, height, depth) {\n    difference() {\n        cube([width, depth, height]);\n        translate([wall_thickness, -1, wall_thickness])\n            cube([width - 2*wall_thickness, depth + 2, height - wall_thickness]);\n        translate([0, -1, height - wall_thickness])\n            cylinder(h = depth + 2, r = width/2 - wall_thickness);\n    }\n}\n\n// Module for columns\nmodule column(height, radius) {\n    cylinder(h = height, r = radius);\n    translate([0, 0, height])\n        sphere(r = radius * 1.2);\n}\n\n// Main basilica body\nmodule basilica_body() {\n    // Central nave\n    translate([0, 0, wall_thickness])\n        cube([basilica_length - 20, basilica_width - 10, 25]);\n    \n    // Side aisles\n    translate([-5, -basilica_width/2 + 5, wall_thickness])\n        cube([basilica_length - 10, 12, 20]);\n    translate([-5, basilica_width/2 - 17, wall_thickness])\n        cube([basilica_length - 10, 12, 20]);\n}\n\n// Apse (semicircular end)\nmodule apse() {\n    translate([basilica_length/2 - 10, 0, wall_thickness]) {\n        difference() {\n            cylinder(h = 25, r = basilica_width/2);\n            translate([0, 0, 25])\n                sphere(r = basilica_width/2);\n            translate([-basilica_length/2 + 10, 0, 0])\n                cube([basilica_length, basilica_width, 50]);\n        }\n    }\n}\n\n// Main entrance\nmodule entrance() {\n    translate([-basilica_length/2 + 10, 0, 0]) {\n        // Entrance arch\n        arch(15, 20, wall_thickness);\n        \n        // Steps\n        for(i = [0:2]) {\n            translate([i * 2 - 3, -basilica_width/4, -i * 2])\n                cube([basilica_width/2, basilica_width/2, 2]);\n        }\n    }\n}\n\n// Windows\nmodule windows() {\n    // Side windows\n    for(i = [0:3]) {\n        translate([-basilica_length/2 + 15 + i * 15, basilica_width/2 - wall_thickness, 15])\n            arch(8, 12, wall_thickness);\n        translate([-basilica_length/2 + 15 + i * 15, -basilica_width/2, 15])\n            mirror([0, 1, 0])\n                arch(8, 12, wall_thickness);\n    }\n    \n    // Apse windows\n    for(angle = [30:60:150]) {\n        rotate([0, 0, angle])\n            translate([basilica_length/2 - 10, 0, 15])\n                arch(6, 10, wall_thickness);\n    }\n}\n\n// Columns along facade\nmodule facade_columns() {\n    for(i = [-1:1]) {\n        translate([-basilica_length/2 + 5, i * 12, 0])\n            column(25, 2);\n    }\n}\n\n// Central dome\nmodule dome() {\n    translate([0, 0, 25]) {\n        cylinder(h = 5, r = 15);\n        translate([0, 0, 5])\n            sphere(r = 15);\n        // Drum windows\n        for(angle = [0:45:315]) {\n            rotate([0, 0, angle])\n                translate([12, 0, 2.5])\n                    arch(4, 6, wall_thickness);\n        }\n    }\n}\n\n// Roof details\nmodule roof() {\n    // Nave roof\n    translate([0, 0, 25])\n        cube([basilica_length - 20, basilica_width - 10, 2]);\n    \n    // Side aisle roofs\n    translate([-5, -basilica_width/2 + 11, 20])\n        cube([basilica_length - 10, 12, 2]);\n    translate([-5, basilica_width/2 - 11, 20])\n        cube([basilica_length - 10, 12, 2]);\n}\n\n// Assembly\nunion() {\n    basilica_body();\n    apse();\n    entrance();\n    windows();\n    facade_columns();\n    dome();\n    roof();\n}",
    "renders": true
  },
  {
    "building": "fort",
    "openscad_code": "// Realistic Medium-Complexity Fort\n// Dimensions: 80 x 80 x 40 mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main module\nmodule fort() {\n    // Base platform\n    translate([0, 0, 0])\n        cube([80, 80, 5], center = true);\n    \n    // Outer walls\n    outer_walls();\n    \n    // Corner towers\n    corner_tower([-35, -35, 5]);\n    corner_tower([35, -35, 5]);\n    corner_tower([-35, 35, 5]);\n    corner_tower([35, 35, 5]);\n    \n    // Gate tower\n    gate_tower();\n    \n    // Battlements along walls\n    battlements();\n    \n    // Inner courtyard\n    translate([0, 0, 5.1])\n        cube([60, 60, 1], center = true);\n}\n\n// Outer walls module\nmodule outer_walls() {\n    // Front wall with gate opening\n    translate([0, -37.5, 17.5])\n        difference() {\n            cube([76, wall, 30]);\n            translate([0, 0, 12.5])\n                cube([12, wall + 0.1, 25]);\n        }\n    \n    // Back wall\n    translate([0, 37.5, 17.5])\n        cube([76, wall, 30]);\n    \n    // Left wall\n    translate([-37.5, 0, 17.5])\n        cube([wall, 76, 30]);\n    \n    // Right wall\n    translate([37.5, 0, 17.5])\n        cube([wall, 76, 30]);\n}\n\n// Corner tower module\nmodule corner_tower(pos) {\n    translate(pos) {\n        // Main tower body\n        cylinder(h = 35, d = 15, $fn = 16);\n        \n        // Tower top\n        translate([0, 0, 35])\n            cylinder(h = 5, d1 = 15, d2 = 18, $fn = 16);\n        \n        // Arrow slits\n        for (i = [0:90:270]) {\n            rotate([0, 0, i])\n                translate([7.5, 0, 15])\n                    rotate([0, 90, 0])\n                        cylinder(h = wall + 0.2, d = 2, $fn = 8);\n        }\n    }\n}\n\n// Gate tower module\nmodule gate_tower() {\n    translate([0, -25, 5]) {\n        // Main gate structure\n        cube([20, 15, 30], center = true);\n        \n        // Gate arch\n        translate([0, -7.6, 12.5])\n            difference() {\n                cube([12, wall + 0.2, 25]);\n                translate([0, 0, 20])\n                    cylinder(h = 15, d = 10, $fn = 16, center = true);\n            }\n        \n        // Gate tower top\n        translate([0, 0, 30])\n            cube([24, 19, 5], center = true);\n        \n        // Crenellations on gate tower\n        for (x = [-9:6:9]) {\n            translate([x, -7.5, 35])\n                cube([4, 2, 3]);\n        }\n    }\n}\n\n// Battlements module\nmodule battlements() {\n    // Front wall battlements\n    for (x = [-30:10:30]) {\n        if (abs(x) > 8) {\n            translate([x, -37.5, 32.5])\n                cube([6, wall + 0.2, 5]);\n        }\n    }\n    \n    // Back wall battlements\n    for (x = [-30:10:30]) {\n        translate([x, 37.5, 32.5])\n            cube([6, wall + 0.2, 5]);\n    }\n    \n    // Left wall battlements\n    for (y = [-30:10:30]) {\n        translate([-37.5, y, 32.5])\n            cube([wall + 0.2, 6, 5]);\n    }\n    \n    // Right wall battlements\n    for (y = [-30:10:30]) {\n        translate([37.5, y, 32.5])\n            cube([wall + 0.2, 6, 5]);\n    }\n}\n\n// Generate the fort\nfort();",
    "renders": true
  },
  {
    "building": "citadel",
    "openscad_code": "// Realistic Citadel - Medium Complexity\n// Dimensions: 80mm x 70mm x 65mm\n\nmodule main_keep(){\n    // Central keep tower\n    difference(){\n        union(){\n            // Main tower body\n            cube([25,25,40], center=true);\n            // Battlement top\n            for(i=[-10:10:10])\n                translate([i,0,22])\n                    cube([2,26,4], center=true);\n            for(j=[-10:10:10])\n                translate([0,j,22])\n                    cube([26,2,4], center=true);\n        }\n        // Doorway\n        translate([0,-13, -15])\n            cube([6,2,12], center=true);\n    }\n}\n\nmodule corner_tower(x,y){\n    translate([x,y,0]){\n        difference(){\n            union(){\n                // Cylindrical tower\n                cylinder(h=30, r=8, $fn=16);\n                // Conical roof\n                translate([0,0,30])\n                    cylinder(h=12, r1=8.5, r2=1, $fn=16);\n                // Battlements\n                for(angle=[0:45:315])\n                    rotate([0,0,angle])\n                        translate([0,8.5,35])\n                            cube([2,3,3], center=true);\n            }\n            // Arrow slit\n            rotate([0,0,22.5])\n                translate([0,8,10])\n                    cube([1,3,8], center=true);\n        }\n    }\n}\n\nmodule wall_segment(length, height){\n    translate([0,-length/2,0]){\n        difference(){\n            union(){\n                // Wall body\n                cube([4,length,height], center=true);\n                // Battlements along top\n                for(i=[-length/2+3:6:length/2-3])\n                    translate([0,i,height/2+2])\n                        cube([4,3,4], center=true);\n            }\n            // Crenelations\n            for(i=[-length/2+6:6:length/2-3])\n                translate([0,i,height/2+2])\n                    cube([4,3,4], center=true);\n        }\n    }\n}\n\nmodule gatehouse(){\n    translate([-40,0,0]){\n        difference(){\n            union(){\n                // Main gate structure\n                cube([12,20,25], center=true);\n                // Gate towers\n                translate([0,-12,5])\n                    cylinder(h=20, r=4, $fn=12);\n                translate([0,12,5])\n                    cylinder(h=20, r=4, $fn=12);\n                // Gate arch\n                translate([0,0,10])\n                    cube([13,8,12], center=true);\n            }\n            // Actual gateway opening\n            translate([7,0,0])\n                cube([2,8,10], center=true);\n            // Arrow slits on towers\n            rotate([0,90,0])\n                translate([0,-12,10])\n                    cylinder(h=1, r=1, $fn=8);\n            rotate([0,90,0])\n                translate([0,12,10])\n                    cylinder(h=1, r=1, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion(){\n    // Central keep\n    main_keep();\n    \n    // Corner towers\n    corner_tower(20,20);\n    corner_tower(-20,20);\n    corner_tower(20,-20);\n    corner_tower(-20,-20);\n    \n    // Walls connecting towers\n    translate([20,0,15])\n        rotate([0,0,90])\n            wall_segment(40,30);\n    translate([-20,0,15])\n        rotate([0,0,90])\n            wall_segment(40,30);\n    translate([0,20,15])\n        wall_segment(40,30);\n    translate([0,-20,15])\n        wall_segment(40,30);\n    \n    // Gatehouse\n    gatehouse();\n}",
    "renders": true
  },
  {
    "building": "bastion",
    "openscad_code": "// Bastion Fort - Realistic Medium Complexity\n// A classic star fort bastion with cannon embrasures and merlons\n\n// Overall dimensions\nbastion_side = 60;\nwall_height = 25;\nwall_thickness = 4;\nmerlon_height = 8;\nmerlon_width = 6;\nembrasure_width = 4;\nembrasure_height = 6;\n\n// Main bastion structure\nmodule bastion_base() {\n    difference() {\n        // Outer pentagonal shape\n        linear_extrude(height=wall_height) {\n            polygon(points=[\n                [0, 0],\n                [bastion_side, 0],\n                [bastion_side*1.3, bastion_side*0.4],\n                [bastion_side*0.5, bastion_side*0.8],\n                [0, bastion_side*0.4]\n            ]);\n        }\n        \n        // Inner courtyard\n        translate([wall_thickness, wall_thickness, wall_thickness]) {\n            linear_extrude(height=wall_height+1) {\n                polygon(points=[\n                    [0, 0],\n                    [bastion_side-wall_thickness*2, 0],\n                    [bastion_side*1.3-wall_thickness*2.5, bastion_side*0.4-wall_thickness],\n                    [bastion_side*0.5-wall_thickness, bastion_side*0.8-wall_thickness*2],\n                    [0, bastion_side*0.4-wall_thickness]\n                ]);\n            }\n        }\n    }\n}\n\n// Merlon module for crenellations\nmodule merlon() {\n    cube([merlon_width, wall_thickness+2, merlon_height], center=true);\n}\n\n// Cannon embrasure\nmodule embrasure() {\n    difference() {\n        cube([embrasure_width, wall_thickness+2, embrasure_height], center=true);\n        translate([0, wall_thickness/2+1, 0])\n            rotate([0, 45, 0])\n            cube([embrasure_width*1.2, wall_thickness*2, embrasure_height*1.2], center=true);\n    }\n}\n\n// Wall section with merlons and embrasures\nmodule crenellated_wall(length, angle) {\n    rotate([0, 0, angle])\n    translate([length/2, 0, wall_height])\n    union() {\n        // Base wall extension\n        cube([length, wall_thickness, merlon_height], center=true);\n        \n        // Merlons and embrasures\n        for(i = [0:8]) {\n            translate([-length/2 + i*length/9 + length/18, 0, merlon_height/2]) {\n                if(i % 3 == 1) {\n                    embrasure();\n                } else {\n                    merlon();\n                }\n            }\n        }\n    }\n}\n\n// Corner tower\nmodule bastion_tower() {\n    difference() {\n        // Main tower\n        translate([bastion_side*1.3, bastion_side*0.4, 0])\n            cylinder(h=wall_height+merlon_height, r=wall_thickness*3, $fn=8);\n        \n        // Tower interior\n        translate([bastion_side*1.3, bastion_side*0.4, -1])\n            cylinder(h=wall_height+merlon_height+2, r=wall_thickness*2, $fn=8);\n    }\n}\n\n// Ground base\nmodule ground_base() {\n    translate([-5, -5, -2])\n        cube([bastion_side*1.5+10, bastion_side+10, 2]);\n}\n\n// Assembly\nunion() {\n    ground_base();\n    \n    bastion_base();\n    \n    // Add crenellations to each wall\n    crenellated_wall(bastion_side, 0);\n    crenellated_wall(sqrt(pow(bastion_side*0.3, 2) + pow(bastion_side*0.4, 2)), atan(bastion_side*0.4/bastion_side*0.3));\n    crenellated_wall(sqrt(pow(bastion_side*0.8, 2) + pow(bastion_side*0.4, 2)), 180-atan(bastion_side*0.4/bastion_side*0.8));\n    crenellated_wall(bastion_side*0.5, 180+atan(bastion_side*0.4/bastion_side*0.5));\n    crenellated_wall(bastion_side*0.4, 270);\n    \n    bastion_tower();\n}",
    "renders": true
  },
  {
    "building": "stronghold",
    "openscad_code": "// Realistic medium-complexity stronghold\n// Designed for 3D printing ~70 mm footprint\n\n// Overall parameters\nbase_w = 70;\nbase_d = 70;\nwall_th = 2.5;\nscale = 1;\n\n// Main keep\nmodule keep() {\n    difference() {\n        // Outer stone cube\n        cube([30, 30, 40], center=true);\n        // Hollow interior\n        translate([0, 0, wall_th])\n            cube([30 - 2*wall_th, 30 - 2*wall_th, 40 - wall_th], center=true);\n    }\n    \n    // Crenellations on top\n    for (x = [-12:6:12])\n    for (y = [-12:6:12]) {\n        translate([x, y, 20.1])\n            cube([4, 4, 3], center=true);\n    }\n    \n    // Doorway\n    translate([0, -15.1, -10])\n        cube([6, 0.1, 10]);\n}\n\n// Corner tower module\nmodule tower() {\n    difference() {\n        cylinder(h = 45, r = 6, center=true, $fn=16);\n        translate([0, 0, 2.5])\n            cylinder(h = 45, r = 6 - wall_th, center=true, $fn=16);\n    }\n    \n    // Tower top crenellations\n    for (a = [0:45:315]) {\n        rotate([0, 0, a])\n            translate([0, 5.9, 22.6])\n                cube([2, 1.5, 3], center=true);\n    }\n}\n\n// Wall segment module\nmodule wall_segment(len, h) {\n    difference() {\n        cube([len, wall_th*2, h], center=true);\n        translate([0, 0, wall_th])\n            cube([len - 2*wall_th, 0.1, h - wall_th], center=true);\n    }\n    \n    // Battlements\n    for (x = [-len/2+2:4:len/2-2]) {\n        translate([x, 0, h/2+1.5])\n            cube([2, wall_th*2, 3], center=true);\n    }\n}\n\n// Gatehouse\nmodule gatehouse() {\n    difference() {\n        cube([14, 8, 20], center=true);\n        translate([0, 0, 5])\n            cube([10, 8.1, 10], center=true);\n    }\n    \n    // Gate arch\n    translate([0, -4.1, 5])\n        cube([6, 0.1, 5]);\n    \n    // Gatehouse towers\n    translate([-7, 0, 0])\n        cylinder(h = 25, r = 3, center=true, $fn=12);\n    translate([7, 0, 0])\n        cylinder(h = 25, r = 3, center=true, $fn=12);\n}\n\n// Base platform\ndifference() {\n    cube([base_w, base_d, 4], center=true);\n    translate([0, 0, 2])\n        cube([base_w - 10, base_d - 10, 4], center=true);\n}\n\n// Position the keep\ntranslate([0, 0, 24])\n    keep();\n\n// Corner towers\ntranslate([30, 30, 26.5])\n    tower();\ntranslate([-30, 30, 26.5])\n    mirror([1, 0, 0])\n        tower();\ntranslate([30, -30, 26.5])\n    mirror([0, 1, 0])\n        tower();\ntranslate([-30, -30, 26.5])\n    mirror([1, 1, 0])\n        tower();\n\n// Connecting walls\ntranslate([0, 30, 22])\n    wall_segment(60, 8);\ntranslate([0, -30, 22])\n    wall_segment(60, 8);\ntranslate([30, 0, 22])\n    rotate([0, 0, 90])\n        wall_segment(60, 8);\ntranslate([-30, 0, 22])\n    rotate([0, 0, 90])\n        wall_segment(60, 8);\n\n// Gatehouse on south wall\ntranslate([0, -30, 14])\n    gatehouse();",
    "renders": true
  },
  {
    "building": "donjon",
    "openscad_code": "// Realistic Medium-Complexity Donjon\n// Overall size ~80 mm tall\n\nmodule wall_block(w=20, h=10, d=20) {\n    cube([w, h, d]);\n}\n\nmodule crenellation(w=20, h=5, d=5) {\n    difference() {\n        cube([w, h, d]);\n        translate([w/2, -1, d/2])\n            cube([w/2+1, h+2, d/2+1]);\n    }\n}\n\nmodule arrow_slit(h=30, w=2, d=15) {\n    difference() {\n        cube([w, h, d]);\n        translate([w/2, h/2, -1])\n            rotate([0, 45, 0])\n            cube([w+2, h, d+2]);\n    }\n}\n\nmodule tower_base(r=25, h=60) {\n    difference() {\n        cylinder(h=h, r=r, $fn=64);\n        // doorway\n        translate([0, -r, 0])\n            cube([12, 20, 16], center=true);\n    }\n}\n\nmodule machicolation(r=25) {\n    for (i=[0:11]) {\n        rotate([0, 0, i*30])\n        translate([r-2, -2, 0])\n            cube([4, 4, 8]);\n    }\n}\n\nmodule wooden_door(w=10, h=14) {\n    color(\"saddlebrown\")\n    translate([-w/2, -2, 0])\n        cube([w, 2, h]);\n}\n\nmodule conical_roof(r=25, h=20) {\n    cylinder(h1=h, h2=0, r1=r+2, r2=0, $fn=64);\n}\n\nmodule corbel(r=25) {\n    for (i=[0:15]) {\n        rotate([0, 0, i*22.5])\n        translate([r, -3, -2])\n            cube([6, 6, 4]);\n    }\n}\n\n// Main model\nunion() {\n    // Base tower\n    tower_base(r=25, h=60);\n\n    // Corbel table\n    translate([0, 0, 60])\n        corbel(r=25);\n\n    // Crenellated parapet\n    for (i=[0:11]) {\n        rotate([0, 0, i*30])\n        translate([25*cos(i*30), 25*sin(i*30), 64])\n            crenellation(w=8, h=5, d=3);\n    }\n\n    // Machicolations\n    translate([0, 0, 64])\n        machicolation(r=25);\n\n    // Conical roof\n    translate([0, 0, 64+5])\n        conical_roof(r=25, h=20);\n\n    // Arrow slits\n    for (level=[20:20:40])\n    for (angle=[45:90:315]) {\n        rotate([0, 0, angle])\n        translate([25*sin(0), -25*cos(0), level])\n            arrow_slit(h=15, w=2, d=15);\n    }\n\n    // Door\n    translate([0, -25, 0])\n        wooden_door(w=10, h=14);\n}",
    "renders": true
  },
  {
    "building": "alcazar",
    "openscad_code": "// Alcazar - Medium Complexity Realistic Style\n// 3D printable, ~80mm wide\n\n$fn = 36;\n\nmodule tower(x, y, h, r) {\n    // Main tower body\n    translate([x, y, 0])\n    difference() {\n        cylinder(h = h, r1 = r, r2 = r*0.9);\n        // Arrow slit windows\n        for(i = [1:3]) {\n            rotate([0, 0, 30 + i*15])\n            translate([r*0.7, 0, h*i/4])\n            cube([r*0.1, 2, 10], center = true);\n        }\n    }\n    \n    // Crenellated top\n    translate([x, y, h])\n    for(i = [0:11]) {\n        rotate([0, 0, i*30])\n        translate([r*0.8, 0, 0])\n        cube([r*0.15, 3, 4], center = true);\n    }\n}\n\nmodule wall(x, y, w, h, d) {\n    // Main wall section\n    translate([x, y, 0])\n    cube([w, d, h]);\n    \n    // Battlements on top\n    translate([x, y, h])\n    for(i = [0:w/6-1]) {\n        translate([3 + i*6, 0, 0])\n        cube([4, d+1, 3]);\n    }\n    \n    // Gate arch\n    if(w > 20) {\n        translate([x + w/2, y + d/2, 0])\n        difference() {\n            cube([12, d+1, h*0.7]);\n            translate([6, d/2+1, h*0.7-8])\n            cylinder(h = d+2, r = 6, center = true);\n        }\n    }\n}\n\n// Base foundation\ndifference() {\n    cube([80, 60, 5]);\n    translate([5, 5, -1])\n    cube([70, 50, 2]);\n}\n\n// Main building\ntranslate([10, 10, 5])\ncube([60, 40, 25]);\n\n// Corner towers\ntower(15, 15, 35, 8);\ntower(65, 15, 35, 8);\ntower(15, 45, 35, 8);\ntower(65, 45, 35, 8);\n\n// Walls\nwall(23, 10, 34, 25, 4);\nwall(10, 23, 4, 25, 18);\nwall(10, 45, 50, 25, 4);\nwall(65, 23, 4, 25, 18);\n\n// Central keep\ntranslate([30, 20, 30])\ncube([20, 20, 20]);\n\n// Keep roof\ntranslate([30, 20, 50])\ndifference() {\n    cube([20, 20, 2]);\n    translate([10, 10, -1])\n    cylinder(h = 4, r = 10);\n}\n\n// Windows on main building\nfor(i = [1:4]) {\n    translate([15 + i*12, 10, 15])\n    cube([3, 1, 5]);\n    translate([15 + i*12, 49, 15])\n    cube([3, 1, 5]);\n}\n\n// Entrance details\ntranslate([40, 9, 5])\ndifference() {\n    cube([8, 3, 10]);\n    translate([4, 2, 10])\n    cylinder(h = 4, r = 4);\n}\n\n// Flag on keep\ntranslate([40, 30, 52])\nunion() {\n    cylinder(h = 8, r = 0.5);\n    translate([0, 0, 8])\n    rotate([90, 0, 0])\n    cube([8, 5, 0.5]);\n}",
    "renders": true
  },
  {
    "building": "kremlin",
    "openscad_code": "// Kremlin fortress - Realistic medium complexity\n// 3D printable model with proper wall thickness\n\n$fn = 32;  // Circle resolution for cylinders\n\n// Main dimensions\nwall_thickness = 2;\nbase_width = 40;\nbase_depth = 50;\nwall_height = 15;\n\n// Tower parameters\ntower_diameter = 8;\ntower_height = 25;\nturret_height = 8;\n\n// Cathedral parameters\ncathedral_width = 20;\ncathedral_depth = 15;\ncathedral_height = 18;\nonion_diameter = 12;\n\nmodule main_wall() {\n    // Base wall structure\n    difference() {\n        // Outer wall\n        translate([0, 0, wall_height/2])\n            cube([base_width, base_depth, wall_height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, wall_height/2])\n            cube([base_width-wall_thickness*2, base_depth-wall_thickness*2, wall_height+1], center=true);\n    }\n}\n\nmodule tower(x, y, angle=0) {\n    // Main tower body\n    translate([x, y, 0])\n    rotate([0, 0, angle])\n    union() {\n        // Cylindrical tower\n        cylinder(h=tower_height, d=tower_diameter, center=false);\n        \n        // Turret top\n        translate([0, 0, tower_height])\n            cylinder(h=turret_height, d=tower_diameter*1.2, center=false);\n        \n        // Conical roof\n        translate([0, 0, tower_height+turret_height])\n            cylinder(h=turret_height, d1=tower_diameter*1.2, d2=0, center=false);\n    }\n}\n\nmodule cathedral() {\n    // Central cathedral\n    translate([0, -10, 0])\n    union() {\n        // Main cathedral body\n        translate([0, 0, cathedral_height/2])\n            cube([cathedral_width, cathedral_depth, cathedral_height], center=true);\n        \n        // Onion dome\n        translate([0, 0, cathedral_height+onion_diameter/2])\n            sphere(d=onion_diameter);\n        \n        // Small cross on top\n        translate([0, 0, cathedral_height+onion_diameter+2])\n            cube([1, 4, 6], center=true);\n    }\n}\n\nmodule gate() {\n    // Main gate structure\n    translate([0, base_depth/2-2, 0])\n    difference() {\n        // Gate tower\n        translate([0, 0, 10])\n            cube([10, 6, 20], center=true);\n        \n        // Gate opening\n        translate([0, 0, 5])\n            cube([6, 7, 10], center=true);\n    }\n}\n\nmodule battlements() {\n    // Crenellations along walls\n    for(x = [-base_width/2+5:5:base_width/2-5]) {\n        translate([x, base_depth/2, wall_height])\n            cube([3, 2, 3], center=true);\n        translate([x, -base_depth/2, wall_height])\n            cube([3, 2, 3], center=true);\n    }\n    \n    for(y = [-base_depth/2+5:5:base_depth/2-5]) {\n        translate([base_width/2, y, wall_height])\n            cube([2, 3, 3], center=true);\n        translate([-base_width/2, y, wall_height])\n            cube([2, 3, 3], center=true);\n    }\n}\n\n// Assemble the kremlin\nmain_wall();\n\n// Corner towers\ntower(-base_width/2+4, -base_depth/2+4);\ntower(base_width/2-4, -base_depth/2+4);\ntower(-base_width/2+4, base_depth/2-4);\ntower(base_width/2-4, base_depth/2-4);\n\n// Side towers\ntower(-base_width/2+4, 0);\ntower(base_width/2-4, 0);\n\n// Cathedral\ncathedral();\n\n// Gate\ngate();\n\n// Battlements\nbattlements();",
    "renders": true
  },
  {
    "building": "alcove",
    "openscad_code": "// Realistic Alcove - Medium Complexity\n// Overall dimensions: 80mm wide x 30mm deep x 100mm tall\n// Wall thickness: 2mm throughout for 3D printing\n\nmodule brick_pattern(width, height, depth, brick_w=4, brick_h=2, mortar=0.4) {\n    // Generate realistic brick texture\n    for (y=[0:brick_h+mortar:height-brick_h]) {\n        for (x=[0:brick_w+mortar:width-brick_w]) {\n            // Offset every other row\n            offset = (y/(brick_h+mortar) % 2 == 0) ? 0 : -(brick_w+mortar)/2;\n            translate([x+offset, 0, y]) \n                cube([brick_w, depth, brick_h]);\n        }\n    }\n}\n\nmodule arch(width, height, thickness) {\n    // Gothic-style pointed arch\n    radius = width/2;\n    height = height - radius;\n    \n    union() {\n        // Left arch segment\n        translate([0, 0, 0])\n            cylinder(h=thickness, r=radius, $fn=50);\n        \n        // Right arch segment\n        translate([width, 0, 0])\n            cylinder(h=thickness, r=radius, $fn=50);\n            \n        // Keystone piece at top\n        translate([width/2, 0, height+radius])\n            cube([width*0.3, thickness, width*0.3], center=true);\n            \n        // Fill in the arch\n        translate([width/2, 0, (height+radius)/2])\n            cube([width, thickness, height+radius], center=true);\n    }\n}\n\n// Main alcove structure\ndifference() {\n    // Outer shell\n    union() {\n        // Back wall\n        translate([-5, 15, 0])\n            cube([90, 2, 100]);\n            \n        // Left wall\n        translate([-5, 0, 0])\n            cube([2, 30, 100]);\n            \n        // Right wall\n        translate([83, 0, 0])\n            cube([2, 30, 100]);\n            \n        // Base/floor\n        translate([-5, 0, -2])\n            cube([90, 30, 2]);\n            \n        // Top arch support\n        translate([-5, 0, 100])\n            cube([90, 30, 2]);\n    }\n    \n    // Carve out the alcove interior\n    translate([0, 2, 0])\n        cube([80, 30, 100]);\n        \n    // Carve arch opening\n    translate([0, 2, 70])\n        rotate([90, 0, 0])\n            arch(80, 30, 100);\n}\n\n// Add brick texture to visible surfaces\n// Back wall bricks\ntranslate([0, 17, 0])\n    brick_pattern(80, 100, 2);\n\n// Left wall bricks\ntranslate([-3, 2, 0])\n    rotate([0, 90, 0])\n        brick_pattern(100, 28, 2);\n\n// Right wall bricks\ntranslate([83, 2, 0])\n    rotate([0, 90, 0])\n        brick_pattern(100, 28, 2);\n\n// Floor tile pattern\ntranslate([0, 2, 0])\nfor (x=[0:10:80]) {\n    for (y=[0:10:30]) {\n        color(\"lightgray\")\n            translate([x+5, y+5, 0])\n                cube([8, 8, 0.5]);\n    }\n}\n\n// Small shelf inside alcove\ntranslate([10, 3, 40])\n    cube([60, 2, 3]);\n\n// Decorative corbels supporting the arch\nmodule corbel(x_pos) {\n    translate([x_pos, 15, 70])\n        difference() {\n            cube([10, 15, 5]);\n            translate([2, 2, 0])\n                cube([6, 11, 5]);\n        }\n}\n\ncorbel(5);\ncorbel(75);\n\n// Add small decorative niche on back wall\ntranslate([40, 16, 50])\n    difference() {\n        cube([10, 2, 15]);\n        translate([1, 0, 1])\n            cube([8, 2.1, 13]);\n    }\n\n// Top molding detail\ntranslate([0, 15, 100])\n    difference() {\n        cube([80, 2, 5]);\n        for (i=[0:4:80]) {\n            translate([i+2, 0, 2])\n                cube([3, 2, 3]);\n        }\n    }",
    "renders": true
  },
  {
    "building": "archway",
    "openscad_code": "// Realistic archway - medium complexity\n// 3D printable with 2mm wall thickness, no overhangs\n// Dimensions: 60mm wide x 50mm deep x 80mm tall\n\n// Parameters\nwall = 2;           // Wall thickness for 3D printing\nbase_w = 60;        // Base width\nbase_d = 50;        // Base depth\nbase_h = 10;        // Base height\narch_w = 30;        // Arch opening width\narch_h = 40;        // Arch height\npillar_w = 12;      // Pillar width\npillar_d = 45;      // Pillar depth\nkeystone_w = 6;     // Keystone width\nkeystone_h = 4;     // Keystone height\n\n// Main module\nmodule archway() {\n    // Base platform\n    translate([0, 0, base_h/2])\n        cube([base_w, base_d, base_h], center=true);\n    \n    // Left pillar with decorative top\n    left_pillar();\n    \n    // Right pillar with decorative top\n    mirror([1, 0, 0])\n        left_pillar();\n    \n    // Arch structure\n    arch_structure();\n    \n    // Keystone\n    translate([0, 0, base_h + arch_h - keystone_h/2])\n        cube([keystone_w, pillar_d - wall*2, keystone_h], center=true);\n}\n\n// Left pillar module\nmodule left_pillar() {\n    // Main pillar body\n    translate([-base_w/2 + pillar_w/2, 0, base_h + arch_h/2])\n        cube([pillar_w, pillar_d, arch_h], center=true);\n    \n    // Pillar base\n    translate([-base_w/2 + pillar_w/2, 0, base_h + 2])\n        difference() {\n            cube([pillar_w + 2, pillar_d + 2, 4], center=true);\n            translate([0, 0, -2.1])\n                cube([pillar_w + 2.2, pillar_d + 2.2, 4.2], center=true);\n        }\n    \n    // Pillar capital\n    translate([-base_w/2 + pillar_w/2, 0, base_h + arch_h - 2])\n        difference() {\n            cube([pillar_w + 2, pillar_d + 2, 4], center=true);\n            translate([0, 0, -2.1])\n                cube([pillar_w + 2.2, pillar_d + 2.2, 4.2], center=true);\n        }\n}\n\n// Arch structure module\nmodule arch_structure() {\n    // Main arch block\n    difference() {\n        // Outer arch\n        translate([0, 0, base_h + arch_h/2 + 5])\n            cube([base_w - wall*2, pillar_d - wall*2, arch_h + 10], center=true);\n        \n        // Arch opening\n        translate([0, 0, base_h])\n            rotate([0, 90, 0])\n                cylinder(h=base_w, r=arch_w/2, center=true);\n        \n        // Remove top half of cylinder\n        translate([0, 0, base_h + arch_h/2])\n            cube([base_w, pillar_d, arch_h], center=true);\n    }\n    \n    // Voussoirs (arch stones)\n    for(i = [-4:4]) {\n        angle = i * 15;\n        if(abs(i) < 4) {\n            rotate([0, 0, angle])\n                translate([0, 0, base_h + arch_h/2 - 5])\n                    cube([wall, pillar_d - wall*2, 10], center=true);\n        }\n    }\n}\n\n// Render the archway\narchway();",
    "renders": true
  },
  {
    "building": "belfry",
    "openscad_code": "// Realistic medium-complexity belfry (church tower bell chamber)\n// Designed for 3D printing: 60 mm tall, 40 mm footprint, 1.2 mm walls\n\n$fn = 36;\n\nmodule belfry() {\n    // Base platform\n    translate([0, 0, 2])\n        cube([42, 42, 4], center = true);\n\n    // Main square tower body\n    translate([0, 0, 21])\n        difference() {\n            cube([34, 34, 34], center = true);\n            translate([0, 0, 8])\n                cube([31.6, 31.6, 34], center = true); // hollow inside\n        }\n\n    // Stone course detail every 6 mm\n    for (h = [0:6:30])\n        translate([0, 0, 2 + h])\n            cube([35, 35, 0.6], center = true);\n\n    // Louvered bell openings on each side\n    module louvered_arch() {\n        difference() {\n            translate([0, 0, 4])\n                cube([14, 2, 8], center = true);\n            // Louvers\n            for (i = [-2:1:2])\n                translate([0, 1.2, 4 + 1.5 * i])\n                    cube([12, 0.8, 0.6], center = true);\n        }\n    }\n\n    // Four arches (front, back, left, right)\n    translate([0, 17.5, 22])\n        louvered_arch();\n    translate([0, -17.5, 22])\n        louvered_arch();\n    translate([17.5, 0, 22])\n        rotate([0, 0, 90])\n            louvered_arch();\n    translate([-17.5, 0, 22])\n        rotate([0, 0, 90])\n            louvered_arch();\n\n    // Pyramidal roof\n    translate([0, 0, 39])\n        cylinder(h1 = 20, h2 = 0, r1 = 25, r2 = 0, center = true);\n\n    // Ridge beam\n    translate([0, 0, 48])\n        cube([32, 1.2, 1.2], center = true);\n\n    // Small cross on top\n    translate([0, 0, 59])\n        union() {\n            cube([1.2, 1.2, 8], center = true);\n            cube([6, 1.2, 1.2], center = true);\n        }\n\n    // Buttresses at corners\n    module buttress() {\n        difference() {\n            translate([0, 0, 10])\n                cube([4, 4, 20], center = true);\n            translate([2, 2, 10])\n                cube([2, 2, 20], center = true);\n        }\n    }\n\n    for (x = [-17:34:17])\n        for (y = [-17:34:17])\n            translate([x, y, 0])\n                buttress();\n}\n\nbelfry();",
    "renders": true
  },
  {
    "building": "buttress",
    "openscad_code": "// Gothic flying buttress – medium complexity, 3-D printable\n// Overall height ≈ 90 mm, base 50 mm deep, printable on its back\n\n$fn = 36;          // smooth curves\n\n// ---------- parameters ----------\nwall      = 3;     // printable thickness\nh_total   = 90;\nbase_h    = 30;\narch_h    = h_total - base_h;\nspan      = 40;\nfoot_w    = 30;    // width of pier at ground\nfoot_d    = 20;\nbutt_w    = 12;    // width of flying member\nbutt_d    = 12;\n\n// ---------- pier (vertical support) ----------\nmodule pier() {\n    // main shaft\n    linear_extrude(height = base_h, scale = [0.7, 0.7])\n        offset(delta = wall)\n            square([foot_w, foot_d], center = true);\n\n    // footing ring\n    translate([0, 0, base_h - 3])\n        cylinder(h = 3, r1 = foot_w/2 + 4, r2 = foot_w/2 + 2, center = true);\n}\n\n// ---------- arch rib (flying part) ----------\nmodule arch_rib() {\n    // centerline arc\n    for(side = [-1, 1])\n        mirror([side, 0, 0])\n            rotate([90, 0, 0])\n                translate([0, 0, base_h])\n                    rotate_extrude(angle = 90)\n                        translate([span, 0, 0])\n                            offset(delta = wall)\n                                circle(d = butt_d);\n}\n\n// ---------- decorative crenellations ----------\nmodule crenellations() {\n    cren_w = 5;\n    cren_h = 4;\n    gap    = 3;\n    num    = floor(foot_w / (cren_w + gap));\n    for(i = [0 : num - 1])\n        translate([(-foot_w/2 + cren_w/2) + i*(cren_w + gap),\n                   0,\n                   h_total])\n            cube([cren_w, butt_d + wall, cren_h], center = true);\n}\n\n// ---------- assembly ----------\nunion() {\n    pier();\n    arch_rib();\n    crenellations();\n}\n\n// ---------- optional base plate for adhesion ----------\ntranslate([0, 0, -0.2])\n    cube([foot_w + 10, foot_d + 10, 0.4], center = true);",
    "renders": true
  },
  {
    "building": "corbel",
    "openscad_code": "// Realistic corbel - medium complexity\n// Dimensions in mm, designed for 3D printing\n\n$fn = 32;\n\n// Main dimensions\ncorbel_width = 60;\ncorbel_height = 70;\ncorbel_depth = 45;\nwall_thickness = 3;\n\nmodule corbel_base() {\n    // Main load-bearing block\n    translate([0, 0, 0])\n        cube([corbel_width, corbel_depth, 20], center=true);\n}\n\nmodule decorative_frieze() {\n    // Ornamental band under main block\n    translate([0, 0, 10])\n    difference() {\n        cube([corbel_width*1.1, corbel_depth*1.1, 5], center=true);\n        translate([0, 0, -1])\n            cube([corbel_width*0.9, corbel_depth*0.9, 7], center=true);\n    }\n}\n\nmodule scroll_element() {\n    // Decorative scroll on each side\n    translate([-corbel_width/2 + 5, 0, 25])\n    union() {\n        // Scroll body\n        rotate([0, 90, 0])\n            cylinder(h=15, r1=8, r2=12, center=true);\n        \n        // Scroll curl\n        translate([0, 0, 8])\n            rotate([0, 90, 0])\n                cylinder(h=10, r1=6, r2=10, center=true);\n    }\n}\n\nmodule acanthus_leaves() {\n    // Stylized acanthus leaves on front\n    for(i = [-1, 1]) {\n        translate([i * 15, corbel_depth/2 - 2, 30])\n        rotate([0, -20 * i, 0])\n        scale([1, 0.5, 1])\n            sphere(r=8);\n        \n        translate([i * 12, corbel_depth/2 - 2, 35])\n        rotate([0, -30 * i, 0])\n        scale([0.8, 0.5, 1])\n            sphere(r=6);\n    }\n}\n\nmodule support_bracket() {\n    // Triangular support bracket\n    translate([0, 0, 0])\n    union() {\n        // Main triangular support\n        translate([0, corbel_depth/2 - 15, 10])\n        rotate([90, 0, 0])\n            cylinder(h=corbel_width*0.8, r1=15, r2=0, center=true);\n        \n        // Reinforcement ribs\n        for(x = [-20, 0, 20]) {\n            translate([x, corbel_depth/2 - 15, 10])\n            rotate([90, 0, 0])\n                cylinder(h=15, r1=3, r2=0, center=true);\n        }\n    }\n}\n\nmodule mounting_plate() {\n    // Back plate for wall mounting\n    translate([0, -corbel_depth/2 + wall_thickness/2, 35])\n    difference() {\n        cube([corbel_width*0.8, wall_thickness, 30], center=true);\n        \n        // Mounting holes\n        for(y = [-10, 10]) {\n            translate([0, 0, y])\n                cylinder(h=wall_thickness+1, r=3, center=true);\n        }\n    }\n}\n\nmodule corbel() {\n    union() {\n        // Base structure\n        corbel_base();\n        \n        // Decorative elements\n        decorative_frieze();\n        \n        // Scrolls on both sides\n        scroll_element();\n        mirror([1, 0, 0])\n            scroll_element();\n        \n        // Acanthus leaves\n        acanthus_leaves();\n        \n        // Support structure\n        support_bracket();\n        \n        // Mounting system\n        mounting_plate();\n    }\n}\n\n// Generate the corbel\ncorbel();",
    "renders": true
  },
  {
    "building": "cornice",
    "openscad_code": "// Classic architectural cornice (realistic style, medium complexity)\n// Dimensions: 80 mm wide, 20 mm deep, 25 mm tall\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule cornice() {\n    // Main body block with gentle taper\n    difference() {\n        translate([0, 0, 12.5]) scale([1, 1, 0.9]) cube([80, 20, 25], center=true);\n        translate([0, 0, 14]) cube([80-wall*2, 20-wall, 25], center=true);\n    }\n    \n    // Decorative top molding - cyma recta profile\n    for (x = [-35:5:35]) {\n        translate([x, 0, 25]) {\n            hull() {\n                cube([4, 20, 0.5], center=true);\n                translate([0, 0, 0.5]) scale([1.1, 1, 1]) sphere(d=4, $fn=16);\n                translate([0, 0, 1.5]) sphere(d=2.5, $fn=16);\n            }\n        }\n    }\n    \n    // Dentil molding - repeating rectangular blocks\n    for (x = [-37:3:37]) {\n        translate([x, 0, 22]) cube([1.5, 20, 3]);\n    }\n    \n    // Bed molding - ovolo profile\n    difference() {\n        translate([0, 0, 18.5]) cube([80, 20, 3], center=true);\n        translate([0, 0, 19.5]) cube([80-wall*2, 20-wall, 3], center=true);\n    }\n    \n    for (x = [-35:2:35]) {\n        translate([x, 0, 20]) {\n            rotate([90, 0, 0]) cylinder(h=20, d=2.5, center=true, $fn=16);\n        }\n    }\n    \n    // Lower fascia with subtle reveal\n    difference() {\n        translate([0, 0, 14]) cube([80, 20, 5], center=true);\n        translate([0, 0, 15]) cube([76, 16, 5], center=true);\n    }\n    \n    // Supporting corbel blocks\n    for (x = [-30:20:30]) {\n        translate([x, 0, 7.5]) {\n            difference() {\n                cube([10, 18, 15], center=true);\n                translate([0, 0, 7.5]) cube([8, 16, 15], center=true);\n                translate([0, 0, 7.5]) rotate([0, 45, 0]) cube([11.3, 11.3, 11.3], center=true);\n            }\n        }\n    }\n    \n    // Fillet at bottom\n    translate([0, 0, 1]) cube([80, 20, 2], center=true);\n}\n\n// Generate the cornice\ncornice();",
    "renders": true
  },
  {
    "building": "crenel",
    "openscad_code": "// Realistic Crenel for 3D Printing (Medium Complexity)\n// Dimensions: 60mm x 60mm x 70mm (L x W x H)\n\n// Overall dimensions\nwall_width = 60;\nwall_depth = 60;\nwall_height = 70;\ncrenel_width = 30;\nmerlon_width = 30;\ncrenel_height = 35;\nwall_thickness = 6;\nfillet_radius = 2;\n\nmodule stone_block(x, y, z, w, d, h) {\n    // Basic block with rounded edges for stone appearance\n    translate([x, y, z]) {\n        difference() {\n            // Main block\n            minkowski() {\n                cube([w, d, h], center = true);\n                sphere(fillet_radius);\n            }\n            // Hollow out for printability\n            translate([0, 0, 0]) {\n                minkowski() {\n                    cube([w-wall_thickness*2, d-wall_thickness*2, h-wall_thickness*2], center = true);\n                    sphere(fillet_radius/2);\n                }\n            }\n        }\n    }\n}\n\nmodule merlon() {\n    // Main merlon with slight taper for realism\n    translate([0, 0, wall_height - crenel_height]) {\n        difference() {\n            hull() {\n                // Bottom\n                cube([merlon_width, wall_depth, wall_thickness], center = true);\n                // Top (slightly smaller)\n                translate([0, 0, crenel_height - wall_thickness]) \n                    cube([merlon_width-2, wall_depth-4, wall_thickness], center = true);\n            }\n            // Arrow slit\n            translate([0, 0, (crenel_height/2) - wall_thickness]) \n                cube([2, wall_depth*0.6, crenel_height - wall_thickness*2], center = true);\n        }\n    }\n}\n\nmodule crenel_gap() {\n    // The gap between merlons\n    translate([merlon_width, 0, wall_height - crenel_height]) {\n        difference() {\n            cube([crenel_width, wall_depth, crenel_height], center = true);\n            // Rounded bottom for realism\n            translate([0, 0, wall_thickness/2]) {\n                difference() {\n                    cube([crenel_width-4, wall_depth-4, crenel_height-4], center = true);\n                    for(i = [0:1]) {\n                        rotate([0, 90, 0]) \n                            translate([wall_depth/2 - 2, 0, 0]) \n                                cylinder(h = crenel_width-4, r = 2, center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule base_wall() {\n    // Main wall structure\n    difference() {\n        hull() {\n            // Bottom base\n            cube([wall_width, wall_depth, wall_thickness*2], center = true);\n            // Top (slightly smaller)\n            translate([0, 0, wall_height - wall_thickness]) \n                cube([wall_width-4, wall_depth-4, wall_thickness*2], center = true);\n        }\n        // Interior cavity for printability\n        translate([0, 0, wall_thickness]) {\n            cube([wall_width-wall_thickness*2, wall_depth-wall_thickness*2, wall_height-wall_thickness*2], center = true);\n        }\n    }\n    \n    // Add stone texture\n    for(x = [-wall_width/2+5:10:wall_width/2-5]) {\n        for(z = [wall_thickness*2:5:wall_height-wall_thickness*2]) {\n            stone_block(x, 0, z, 8, wall_depth-2, 4);\n        }\n    }\n}\n\n// Assembly\nbase_wall();\nmerlon();\ntranslate([-merlon_width, 0, 0]) merlon();\ncrenel_gap();",
    "renders": true
  },
  {
    "building": "crypt",
    "openscad_code": "// Realistic crypt model - medium complexity\n// External dimensions: 80 x 50 x 45 mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main base platform\nmodule base() {\n    difference() {\n        // Solid base\n        cube([80, 50, 5], center=true);\n        \n        // Hollow bottom to save material\n        translate([0, 0, -2.5])\n            cube([76, 46, 4], center=true);\n    }\n}\n\n// Stone block walls\nmodule stone_wall(x, y, z, w, h, d) {\n    translate([x, y, z])\n        cube([w, h, d], center=true);\n}\n\n// Main crypt structure\nmodule crypt_body() {\n    difference() {\n        // Outer shell\n        union() {\n            // Main chamber\n            translate([0, 0, 15])\n                cube([60, 40, 30], center=true);\n            \n            // Roof slope\n            for(i = [0:1:15]) {\n                translate([0, 0, 30 + i])\n                    cube([60 - i*2, 40 - i*1.5, 1], center=true);\n            }\n        }\n        \n        // Inner chamber\n        translate([0, 0, 16.5])\n            cube([60 - wall*2, 40 - wall*2, 28], center=true);\n            \n        // Entrance arch\n        translate([0, 20, 15])\n            rotate([0, 0, 0])\n            difference() {\n                cube([20, wall, 20], center=true);\n                translate([0, wall/2, 5])\n                    cylinder(h=wall+1, r=10, center=true);\n            }\n    }\n}\n\n// Stone steps leading to entrance\nmodule steps() {\n    for(i = [0:1:3]) {\n        translate([0, 25 + i*3, 2.5 + i*2])\n            cube([30 + i*5, 4, 2], center=true);\n    }\n}\n\n// Decorative columns\nmodule column(x_pos) {\n    translate([x_pos, 0, 15]) {\n        // Column base\n        cylinder(h=2, r=4, center=true);\n        translate([0, 0, 1])\n            cylinder(h=28, r=3, center=true);\n        // Column capital\n        translate([0, 0, 16])\n            cylinder(h=2, r=4.5, center=true);\n    }\n}\n\n// Iron gate bars\nmodule gate() {\n    translate([0, 20.5, 15]) {\n        for(i = [-8:4:8]) {\n            rotate([90, 0, 0])\n                translate([i, 0, 0])\n                    cylinder(h=18, r=0.5, center=true);\n        }\n    }\n}\n\n// Cross on top\nmodule roof_cross() {\n    translate([0, 0, 47]) {\n        // Base\n        cylinder(h=2, r=3, center=true);\n        // Vertical bar\n        translate([0, 0, 3])\n            cube([2, 2, 10], center=true);\n        // Horizontal bar\n        translate([0, 0, 7])\n            cube([8, 2, 2], center=true);\n    }\n}\n\n// Assemble the crypt\nunion() {\n    base();\n    crypt_body();\n    steps();\n    \n    // Front columns\n    column(-20);\n    column(20);\n    \n    gate();\n    roof_cross();\n    \n    // Stone texture blocks on sides\n    for(i = [-25:10:25]) {\n        stone_wall(i, -22, 22, 8, 4, 16);\n        stone_wall(i, 22, 22, 8, 4, 16);\n    }\n}",
    "renders": true
  },
  {
    "building": "cupola",
    "openscad_code": "// Realistic medium-complexity cupola for 3D printing\n// Approx. 70 mm wide, 60 mm tall, wall thickness 1.5 mm\n\n$fa = 2;\n$fs = 1;\n\nmodule cupola() {\n    // Base ring (widest part)\n    difference() {\n        cylinder(h = 3, r = 35, center = true);\n        cylinder(h = 4, r = 33.5, center = true);\n    }\n\n    // Main dome shell\n    difference() {\n        sphere(d = 65);\n        translate([0, 0, 0])\n            sphere(d = 62);\n        translate([0, 0, -15])\n            cube([90, 90, 30], center = true);\n    }\n\n    // Windows\n    for (i = [0: 45: 359]) {\n        rotate([0, 0, i])\n            translate([30, 0, 5])\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h = 1.5, r = 6);\n                        cylinder(h = 2, r = 4.5);\n                    }\n    }\n\n    // Window frames\n    for (i = [0: 45: 359]) {\n        rotate([0, 0, i])\n            translate([30, 0, 5])\n                rotate([90, 0, 0])\n                    cylinder(h = 1.6, r1 = 6.5, r2 = 5.5);\n    }\n\n    // Top collar (transition to spire)\n    translate([0, 0, 26])\n        difference() {\n            cylinder(h = 6, r = 8, center = true);\n            cylinder(h = 7, r = 6.5, center = true);\n        }\n\n    // Spire\n    translate([0, 0, 32])\n        cylinder(h = 25, r1 = 6, r2 = 2);\n\n    // Ball finial\n    translate([0, 0, 58])\n        sphere(d = 4);\n}\n\ncupola();",
    "renders": true
  },
  {
    "building": "dais",
    "openscad_code": "// Realistic medium-complexity dais for 3D printing\n// Overall size ~60 mm diameter x 18 mm height\n\n$fn = 72;  // Smooth curves without overhangs\n\n/* ---------- Base tier ---------- */\nmodule base_tier() {\n    difference() {\n        cylinder(h = 4, d = 60);           // Lower disk\n        cylinder(h = 4.2, d = 54);         // Light chamfer\n    }\n}\n\n/* ---------- Middle tier with decorative rings ---------- */\nmodule mid_tier() {\n    difference() {\n        union() {\n            cylinder(h = 4, d = 50);       // Main ring\n            // Upper lip\n            translate([0, 0, 4])\n                cylinder(h = 1, d = 52);\n        }\n        // Central hollow\n        cylinder(h = 5.2, d = 42);\n    }\n}\n\n/* ---------- Stone slabs ---------- */\nmodule stone_slab() {\n    // Rectangular slab with rounded edges achieved by hull of spheres\n    hull() {\n        translate([-2.5, -8, 0]) sphere(d = 2);\n        translate([ 2.5, -8, 0]) sphere(d = 2);\n        translate([-2.5,  8, 0]) sphere(d = 2);\n        translate([ 2.5,  8, 0]) sphere(d = 2);\n        translate([-2.5, -8, 3]) sphere(d = 2);\n        translate([ 2.5, -8, 3]) sphere(d = 2);\n        translate([-2.5,  8, 3]) sphere(d = 2);\n        translate([ 2.5,  8, 3]) sphere(d = 2);\n    }\n}\n\n/* ---------- Top platform ---------- */\nmodule top_platform() {\n    difference() {\n        cylinder(h = 3, d = 44);       // Upper disk\n        cylinder(h = 3.2, d = 40);     // Chamfer\n    }\n}\n\n/* ---------- Column ---------- */\nmodule column() {\n    cylinder(h = 6, d = 3);\n}\n\n/* ---------- Main assembly ---------- */\nunion() {\n    base_tier();\n    \n    translate([0, 0, 4])\n        mid_tier();\n    \n    // Stone slabs around mid tier\n    for (i = [0 : 30 : 330]) {\n        rotate([0, 0, i])\n            translate([22, 0, 4])\n                stone_slab();\n    }\n    \n    translate([0, 0, 9])\n        top_platform();\n    \n    // Columns\n    for (a = [45 : 90 : 315]) {\n        rotate([0, 0, a])\n            translate([17, 0, 9])\n                column();\n    }\n}",
    "renders": true
  },
  {
    "building": "drum",
    "openscad_code": "// Realistic 3D-printable drum model (medium complexity)\n// Overall height ~70 mm, diameter ~60 mm\n\n// Parameters\nshell_r = 30;          // Shell radius\nshell_h = 40;          // Shell height\nhoop_r = 32;           // Hoop outer radius\nhoop_h = 4;            // Hoop height\nhead_th = 0.8;         // Drum head thickness\nleg_len = 20;          // Stand leg length\nleg_w = 3;             // Stand leg width\ntuning_lug_w = 4;      // Tuning lug width\ntuning_lug_h = 12;     // Tuning lug height\ntuning_bolt_r = 1.4;   // Tuning bolt radius\nwall_th = 1.5;         // Wall thickness for 3D printing\n\n// Main drum module\nmodule drum() {\n    union() {\n        // Drum shell (hollow cylinder)\n        difference() {\n            cylinder(h = shell_h, r = shell_r, center = true, $fn = 128);\n            translate([0, 0, 0])\n                cylinder(h = shell_h + 0.2, r = shell_r - wall_th, center = true, $fn = 128);\n        }\n\n        // Bottom drum head\n        translate([0, 0, -shell_h/2 - head_th/2])\n            cylinder(h = head_th, r = shell_r - 0.5, center = true, $fn = 128);\n\n        // Top drum head\n        translate([0, 0, shell_h/2 + head_th/2])\n            cylinder(h = head_th, r = shell_r - 0.5, center = true, $fn = 128);\n\n        // Top hoop (rim)\n        translate([0, 0, shell_h/2 + head_th + hoop_h/2])\n            cylinder(h = hoop_h, r = hoop_r, center = true, $fn = 128);\n\n        // Bottom hoop (rim)\n        translate([0, 0, -shell_h/2 - head_th - hoop_h/2])\n            cylinder(h = hoop_h, r = hoop_r, center = true, $fn = 128);\n\n        // Tuning lugs (8 around shell)\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([shell_r + 1, 0, shell_h/2 - 5])\n                    tuning_lug();\n        }\n\n        // Stand mount base (simple ring)\n        difference() {\n            translate([0, 0, -shell_h/2 - hoop_h - 3])\n                cylinder(h = 6, r1 = 12, r2 = 10, center = false, $fn = 64);\n            translate([0, 0, -shell_h/2 - hoop_h - 3.5])\n                cylinder(h = 7, r = 8, center = false, $fn = 64);\n        }\n\n        // Three stand legs\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([0, 0, -shell_h/2 - hoop_h - 6])\n                    leg();\n        }\n    }\n}\n\n// Tuning lug module\nmodule tuning_lug() {\n    union() {\n        // Lug body\n        translate([0, 0, tuning_lug_h/2])\n            cube([tuning_lug_w, tuning_lug_w, tuning_lug_h], center = true);\n\n        // Tuning bolt\n        translate([0, 0, tuning_lug_h + 2])\n            cylinder(h = 8, r = tuning_bolt_r, $fn = 16);\n    }\n}\n\n// Stand leg module\nmodule leg() {\n    translate([8, -leg_w/2, 0])\n        cube([leg_len, leg_w, leg_w]);\n}\n\n// Render the drum\ndrum();",
    "renders": true
  },
  {
    "building": "facade",
    "openscad_code": "// Realistic Medium-Complexity Building Facade\n// Dimensions: 80 mm (W) x 100 mm (H) x 20 mm (D)\n\n$fn = 32;\n\n// Overall facade depth\nfacade_depth = 20;\n\n// Main wall\nmodule main_wall() {\n    difference() {\n        // Solid wall block\n        cube([80, facade_depth, 100], center=true);\n        \n        // Recessed center\n        translate([0, facade_depth/2 - 1, 5])\n            cube([60, facade_depth, 80], center=true);\n    }\n}\n\n// Ground-floor entrance\nmodule entrance() {\n    // Door opening\n    translate([0, facade_depth/2, -25])\n        cube([16, facade_depth + 2, 30], center=true);\n    \n    // Door frame\n    difference() {\n        translate([0, facade_depth/2 - 0.5, -25])\n            cube([18, 2, 32], center=true);\n        translate([0, facade_depth/2, -25])\n            cube([16, 3, 30], center=true);\n    }\n}\n\n// Window module (single window with frame)\nmodule window(w, h, d) {\n    // Window opening\n    translate([0, d/2, 0])\n        cube([w, d + 1, h], center=true);\n    \n    // Window frame\n    difference() {\n        translate([0, d/2 - 0.5, 0])\n            cube([w + 4, 2, h + 4], center=true);\n        translate([0, d/2, 0])\n            cube([w, 3, h], center=true);\n    }\n    \n    // Window mullions\n    translate([0, d/2 - 0.5, 0])\n        cube([w + 4, 1, 2], center=true);\n    translate([0, d/2 - 0.5, -h/4])\n        cube([w + 4, 1, 2], center=true);\n    translate([0, d/2 - 0.5, h/4])\n        cube([w + 4, 1, 2], center=true);\n}\n\n// Second-floor windows\nmodule second_floor_windows() {\n    for (x = [-30, -10, 10, 30]) {\n        translate([x, 0, 15])\n            window(12, 16, facade_depth);\n    }\n}\n\n// Third-floor windows\nmodule third_floor_windows() {\n    for (x = [-30, -10, 10, 30]) {\n        translate([x, 0, 45])\n            window(12, 14, facade_depth);\n    }\n}\n\n// Top-floor windows\nmodule top_floor_windows() {\n    for (x = [-20, 0, 20]) {\n        translate([x, 0, 75])\n            window(16, 12, facade_depth);\n    }\n}\n\n// Decorative cornice\nmodule cornice() {\n    translate([0, facade_depth/2 - 1, 48])\n        cube([82, 2, 4], center=true);\n    translate([0, facade_depth/2 - 1, 73])\n        cube([82, 2, 4], center=true);\n}\n\n// Roof parapet\nmodule parapet() {\n    difference() {\n        translate([0, facade_depth/2 - 1, 90])\n            cube([84, 2, 8], center=true);\n        translate([0, facade_depth/2, 90])\n            cube([80, 3, 8], center=true);\n    }\n}\n\n// Assemble the facade\nunion() {\n    main_wall();\n    \n    // Cut openings and add frames\n    difference() {\n        union();\n        \n        entrance();\n        second_floor_windows();\n        third_floor_windows();\n        top_floor_windows();\n    }\n    \n    // Add decorative elements\n    cornice();\n    parapet();\n}\n\n// Base platform for stability\ntranslate([0, facade_depth/2 + 10, -50])\n    cube([90, 2, 2], center=true);",
    "renders": true
  },
  {
    "building": "fresco",
    "openscad_code": "// Fresco: Classical Roman wall painting with architectural scene\n// 3D printable low-relief panel, 60 x 80 x 6 mm\n\nmodule frame() {\n    // Outer frame\n    difference() {\n        cube([80, 60, 6], center=true);\n        translate([0,0,1])\n            cube([74, 54, 6], center=true);\n    }\n}\n\nmodule pilasters() {\n    // Left pilaster\n    for (x=[-27, 27]) {\n        translate([x, 0, 0])\n            cube([6, 54, 2]);\n    }\n}\n\nmodule arch() {\n    // Central archway\n    translate([0, 0, 1])\n    difference() {\n        union() {\n            cube([36, 6, 4]);\n            translate([0, 25, 1])\n                cube([36, 6, 4]);\n        }\n        \n        // Arch opening\n        translate([0, 15.5, 2])\n        difference() {\n            cylinder(h=4, r=12, $fn=32);\n            translate([0, 0, -1])\n                cylinder(h=6, r=10, $fn=32);\n        }\n    }\n}\n\nmodule columns() {\n    // Fluted columns\n    for (x=[-18, 18]) {\n        translate([x, 0, 0])\n        difference() {\n            cylinder(h=30, r=3, $fn=16);\n            for (i=[-12:2:12])\n                translate([0, i, 0])\n                    cube([6.1, 0.5, 30.1], center=true);\n        }\n    }\n}\n\nmodule steps() {\n    // Stone steps\n    for (i=[0:2]) {\n        translate([0, -20 + i*2, 1.5 - i*0.5])\n            cube([32 - i*4, 2, 1.5], center=true);\n    }\n}\n\nmodule landscape() {\n    // Background landscape elements\n    // Hills\n    translate([0, 12, 0.5])\n    scale([1, 0.4, 1])\n        sphere(r=15, $fn=32);\n    \n    // Trees\n    for (x=[-10, 10]) {\n        translate([x, 18, 2]) {\n            cylinder(h=3, r=1, $fn=8);\n            translate([0, 0, 3.5])\n                sphere(r=3, $fn=16);\n        }\n    }\n}\n\nmodule decorative_band() {\n    // Ornamental band at top\n    translate([0, 23, 3])\n    difference() {\n        cube([70, 8, 1]);\n        \n        // Dentil pattern\n        for (i=[-30:4:30])\n            translate([i, 0, -0.1])\n                cube([2, 8.2, 1.2]);\n    }\n}\n\n// Assembly\nunion() {\n    frame();\n    \n    translate([0, 0, 4])\n    union() {\n        pilasters();\n        arch();\n        columns();\n        steps();\n        landscape();\n        decorative_band();\n    }\n}",
    "renders": true
  },
  {
    "building": "gable",
    "openscad_code": "// Realistic gable with medium complexity\n// Approx. 80 mm wide x 60 mm deep x 50 mm tall\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Overall dimensions\ngable_width = 80;\ngable_depth = 60;\ngable_height = 50;\n\n// Ridge height above walls\nridge_height = 25;\n\n// Roof overhang\noverhang = 5;\n\n// Clapboard siding\nclapboard_height = 4;\nclapboard_overlap = 1;\n\n// Window\nwindow_width = 20;\nwindow_height = 15;\nwindow_sill = 3;\n\n// Door\ndoor_width = 18;\ndoor_height = 30;\n\nmodule clapboard_siding(width, height, depth) {\n    for (i = [0:clapboard_height-clapboard_overlap:height-clapboard_height]) {\n        translate([0, i, 0])\n            cube([width, clapboard_height, depth], center=false);\n    }\n}\n\nmodule gable_wall() {\n    difference() {\n        // Main wall\n        translate([-gable_width/2, 0, 0])\n            cube([gable_width, gable_height, wall]);\n        \n        // Window opening\n        translate([0, gable_height - ridge_height - window_height - 5, wall/2])\n            rotate([0, 0, 0])\n            cube([window_width, window_height, wall+1], center=true);\n        \n        // Door opening\n        translate([-door_width/2, 0, wall/2])\n            cube([door_width, door_height, wall+1], center=true);\n    }\n}\n\nmodule roof_plane(length, width) {\n    angle = atan(ridge_height / (gable_width/2));\n    \n    // Roof structure\n    rotate([0, -angle, 0])\n        translate([0, 0, -width/2])\n            cube([length, width, wall]);\n    \n    // Roof tiles (simplified)\n    for (i = [0:3:length-wall]) {\n        for (j = [0:3:width-wall]) {\n            translate([i, j, wall])\n                cube([2.5, 2.5, 1]);\n        }\n    }\n}\n\nmodule ridge_cap() {\n    translate([0, -wall/2, gable_height + ridge_height])\n        rotate([90, 0, 0])\n            cylinder(h=gable_depth + overhang*2, r=wall/2, $fn=8);\n}\n\nmodule window_detail() {\n    // Window frame\n    translate([0, gable_height - ridge_height - window_height - 5, wall])\n        difference() {\n            cube([window_width+4, window_height+4, 2], center=true);\n            cube([window_width, window_height, 3], center=true);\n        }\n    \n    // Window sill\n    translate([0, gable_height - ridge_height - 5, wall/2])\n        cube([window_width+6, window_sill, wall+2], center=true);\n}\n\nmodule door_detail() {\n    // Door frame\n    translate([-door_width/2-1, 0, door_height/2])\n        cube([door_width+2, door_height+2, wall+2]);\n    \n    // Door panel\n    translate([-door_width/2+1, -1, 1])\n        cube([door_width-2, door_height-2, wall]);\n    \n    // Door knob\n    translate([door_width/2-3, -1.5, door_height/2])\n        sphere(r=1.5, $fn=8);\n}\n\n// Main assembly\nunion() {\n    // Front gable wall with clapboard siding\n    translate([0, 0, 0]) {\n        intersection() {\n            gable_wall();\n            clapboard_siding(gable_width, gable_height, wall);\n        }\n    }\n    \n    // Back wall\n    translate([0, gable_depth, 0])\n        mirror([0, 1, 0])\n            gable_wall();\n    \n    // Side walls\n    translate([gable_width/2, gable_depth/2, 0])\n        rotate([0, 0, 90])\n            cube([wall, gable_depth, gable_height]);\n    \n    translate([-gable_width/2, gable_depth/2, 0])\n        rotate([0, 0, 90])\n            cube([wall, gable_depth, gable_height]);\n    \n    // Roof planes\n    translate([0, -overhang, gable_height])\n        roof_plane(gable_width + overhang*2, gable_depth + overhang*2);\n    \n    translate([0, gable_depth + overhang, gable_height])\n        rotate([0, 0, 180])\n            roof_plane(gable_width + overhang*2, gable_depth + overhang*2);\n    \n    // Ridge cap\n    ridge_cap();\n    \n    // Window details\n    translate([0, wall/2, 0])\n        window_detail();\n    \n    // Door details\n    translate([0, wall/2, 0])\n        door_detail();\n}",
    "renders": true
  },
  {
    "building": "gazebo",
    "openscad_code": "// Realistic style gazebo - medium complexity\n// Approx 80mm diameter, 3D-printable with no overhangs\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall scale\nmodule gazebo() {\n    base();\n    columns();\n    roof();\n    railing();\n}\n\n// Base platform\nmodule base() {\n    difference() {\n        cylinder(h=3, d=70, center=true);\n        translate([0, 0, 1.5])\n            cylinder(h=3.1, d=65, center=true);\n    }\n}\n\n// Columns and arches\nmodule columns() {\n    for (a = [0:45:315]) {\n        rotate([0, 0, a])\n        translate([0, 25, 9])\n        column();\n        \n        rotate([0, 0, a + 22.5])\n        translate([0, 22, 16.5])\n        arch();\n    }\n}\n\n// Single column\nmodule column() {\n    cylinder(h=18, d=3, center=true);\n}\n\n// Decorative arch between columns\nmodule arch() {\n    difference() {\n        union() {\n            translate([-3, 0, 0])\n                cube([6, 2, 4], center=true);\n            translate([0, 0, 2])\n                cylinder(h=2, d=6, center=true);\n        }\n        translate([0, 0, 2])\n            cylinder(h=2.2, d=4, center=true);\n    }\n}\n\n// Roof structure\nmodule roof() {\n    // Roof base ring\n    translate([0, 0, 18])\n    difference() {\n        cylinder(h=3, d=58);\n        translate([0, 0, -0.1])\n            cylinder(h=3.2, d=54);\n    }\n    \n    // Roof cone\n    translate([0, 0, 19.5])\n    difference() {\n        cylinder(h1=0, h2=15, r1=31, r2=5, center=false);\n        // Roof hole for finial\n        translate([0, 0, 14.5])\n            cylinder(h=2, d=4, center=true);\n    }\n    \n    // Roof finial\n    translate([0, 0, 32])\n    union() {\n        cylinder(h=2, d=4, center=true);\n        translate([0, 0, 1.5])\n            sphere(d=3);\n    }\n}\n\n// Railing around base\nmodule railing() {\n    for (a = [0:15:345]) {\n        rotate([0, 0, a])\n        translate([0, 22, 3.5])\n        union() {\n            // Baluster\n            cube([1.5, 1.5, 7], center=true);\n            // Top rail segment\n            translate([0, 0, 4])\n                cube([2, 2, 1.5], center=true);\n        }\n    }\n}\n\n// Assemble the gazebo\ngazebo();",
    "renders": true
  },
  {
    "building": "groin",
    "openscad_code": "// Groin vault - medium complexity realistic\n// Dimensions in mm, printable without supports\n\n// Wall thickness for 3D printing\nwall = 2.0;\n\n// Main bay dimensions\nbay_width = 60;\nbay_depth = 60;\nspring_height = 20;\napex_height = 45;\n\n// Rib parameters\nrib_width = 4;\nrib_depth = 3;\n\n// Support arch thickness\narch_thickness = 3;\n\n// Create the groin vault\nmodule groin_vault() {\n    difference() {\n        // Main vault mass\n        union() {\n            // First barrel vault\n            translate([-bay_width/2, -rib_depth, 0])\n                rotate([0, 90, 0])\n                    barrel_half(bay_width, bay_depth/2, spring_height, apex_height);\n            \n            // Second barrel vault (perpendicular)\n            translate([-rib_depth, -bay_width/2, 0])\n                rotate([90, 0, 0])\n                    barrel_half(bay_width, bay_depth/2, spring_height, apex_height);\n            \n            // Corner ribs\n            for(x=[-1, 1])\n                for(y=[-1, 1])\n                    translate([x*(bay_width/2 - rib_width/2), y*(bay_width/2 - rib_width/2), 0])\n                        corner_rib(rib_width, rib_depth, spring_height, apex_height);\n        }\n        \n        // Hollow out the interior\n        translate([0, 0, wall])\n            scale([(bay_width-wall*2)/bay_width, (bay_width-wall*2)/bay_width, (apex_height-wall)/apex_height])\n                groin_vault();\n    }\n}\n\n// Half barrel vault module\nmodule barrel_half(width, depth, spring, apex) {\n    difference() {\n        // Create curved vault\n        hull() {\n            for(i=[0:10:180]) {\n                x = sin(i) * width/2;\n                z = spring + (1 - cos(i)) * (apex - spring);\n                translate([x, 0, z])\n                    cube([0.1, depth*2, 0.1], center=true);\n            }\n            translate([0, 0, spring])\n                cube([width, depth*2, wall], center=true);\n        }\n        \n        // Remove bottom half\n        translate([0, 0, -spring/2])\n            cube([width*2, depth*2, spring], center=true);\n    }\n}\n\n// Corner rib module\nmodule corner_rib(width, depth, spring, apex) {\n    linear_extrude(height=apex, center=false, convexity=10)\n        polygon(points=[\n            [0, 0],\n            [width, 0],\n            [width, width/2],\n            [width/2, width],\n            [0, width]\n        ]);\n}\n\n// Base support structure\nmodule base_support() {\n    difference() {\n        // Solid base\n        translate([0, 0, -5])\n            cube([bay_width + 10, bay_width + 10, 5], center=true);\n        \n        // Central void\n        translate([0, 0, -5])\n            cube([bay_width - wall*2, bay_width - wall*2, 6], center=true);\n    }\n}\n\n// Assembly\nbase_support();\ntranslate([0, 0, 5])\n    groin_vault();",
    "renders": true
  },
  {
    "building": "loggia",
    "openscad_code": "// Loggia – OpenSCAD – medium complexity\n// Realistic style, sized for 3D print (≈70 mm long)\n\n// General parameters\nwall = 2;              // wall thickness (mm)\npillar_r = 3;          // pillar radius\npillar_h = 25;         // pillar height\narch_top = 2;          // top thickness of arches\narch_gap = 6;          // arch opening width\nbalustrade_h = 4;      // balustrade height above floor\n\n// Main module\nmodule loggia() {\n    // Base floor\n    translate([0, 0, 0])\n        cube([70, 30, wall], center = true);\n\n    // Back wall\n    translate([0, 15 - wall/2, pillar_h/2 + wall])\n        cube([70, wall, pillar_h], center = false);\n\n    // Left wall\n    translate([-35 + wall/2, 0, pillar_h/2 + wall])\n        cube([wall, 30, pillar_h], center = false);\n\n    // Right wall\n    translate([35 - wall/2, 0, pillar_h/2 + wall])\n        cube([wall, 30, pillar_h], center = false);\n\n    // Pillars along front\n    for (x = [-25, -10, 5, 20]) {\n        translate([x, -15 + pillar_r, wall])\n            cylinder(h = pillar_h, r = pillar_r, $fn = 16);\n    }\n\n    // Arch segments between pillars\n    for (x = [-17.5, -2.5, 12.5]) {\n        // Lower arch body\n        translate([x, -15 + pillar_r, wall + pillar_h - arch_top])\n            cube([arch_gap + 2*pillar_r, wall, arch_top], center = true);\n\n        // Arch opening (subtract)\n        translate([x, -15 + pillar_r, wall + pillar_h - arch_top])\n            cube([arch_gap, wall + 0.1, arch_top + 0.1], center = true);\n    }\n\n    // Ceiling slab\n    translate([0, 0, wall + pillar_h])\n        cube([70, 30, wall], center = true);\n\n    // Balustrade along front edge\n    translate([0, -15 + wall/2, wall + balustrade_h/2])\n        cube([70 - 2*pillar_r, wall, balustrade_h], center = true);\n}\n\nloggia();",
    "renders": true
  },
  {
    "building": "lancet",
    "openscad_code": "// OpenSCAD Realistic Lancet (medium complexity, 3D-printable)\n// Overall length ≈ 80 mm, wall thickness 1.2 mm\n\n// Parameters\ntip_length = 20;   // sharp needle part\nbody_length = 45;  // metal shaft\ngrip_length = 15;  // plastic hub\ngrip_d = 8;        // hub diameter\nwall = 1.2;        // printable wall thickness\n\n// ------------- MODULES -------------\n// Stainless-steel needle shaft\nmodule needle_shaft() {\n    difference() {\n        // solid cylinder\n        cylinder(h = body_length, r1 = 1.5, r2 = 1.5, $fn = 32);\n        // hollow bore\n        translate([0, 0, -1])\n            cylinder(h = body_length + 2, r = wall/2, $fn = 32);\n    }\n}\n\n// Sharp beveled tip\nmodule lancet_tip() {\n    // main cone\n    cylinder(h = tip_length, r1 = 1.5, r2 = 0, $fn = 32);\n    \n    // cut bevel\n    rotate([0, 110, 0])\n        translate([-5, 0, -1])\n            cube([10, 10, tip_length + 2]);\n    \n    // hollow inside cone\n    translate([0, 0, -1])\n        cylinder(h = tip_length + 2, r1 = wall/2, r2 = 0, $fn = 32);\n}\n\n// Plastic grip with knurled surface for fingers\nmodule grip() {\n    // main hub\n    difference() {\n        cylinder(h = grip_length, r = grip_d/2, $fn = 32);\n        // central hole for needle\n        cylinder(h = grip_length + 2, r = 1.5, $fn = 32);\n    }\n    \n    // knurls\n    for (i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n            translate([0, grip_d/2 - wall, -1])\n                cube([wall, 1.5, grip_length + 2]);\n    }\n    \n    // safety lip at front\n    translate([0, 0, grip_length - 1.5])\n        cylinder(h = 1.5, r1 = grip_d/2 + 0.5, r2 = grip_d/2, $fn = 32);\n}\n\n// ------------- MAIN ASSEMBLY -------------\nunion() {\n    // needle tip\n    translate([0, 0, body_length])\n        lancet_tip();\n    \n    // needle shaft\n    needle_shaft();\n    \n    // plastic grip\n    translate([0, 0, -grip_length])\n        grip();\n}",
    "renders": true
  },
  {
    "building": "lintel",
    "openscad_code": "// Realistic architectural lintel with moderate detail\n// Size: 80mm x 20mm x 40mm (W x D x H)\n\n// Main lintel body module\nmodule lintel_body(width, depth, height) {\n    difference() {\n        // Main block\n        cube([width, depth, height], center=true);\n        \n        // Recessed center panel\n        translate([0, 0, height/6])\n            cube([width*0.7, depth+1, height*0.3], center=true);\n    }\n}\n\n// Decorative corbel module\nmodule corbel(width, depth, height) {\n    difference() {\n        // Main corbel shape\n        translate([0, -depth/2, -height/2])\n            cube([width, depth, height]);\n        \n        // Inner cutout\n        translate([0, -depth/2 + 2, -height/2 + 2])\n            cube([width - 4, depth, height - 4]);\n        \n        // Beveled edge\n        for (i = [0:2:height-2]) {\n            translate([-width/2 + i/2, -depth/2, -height/2 + i])\n                cube([width - i, 2, 2]);\n        }\n    }\n}\n\n// Keystone module\nmodule keystone(width, depth, height) {\n    difference() {\n        // Main keystone\n        translate([0, -depth/2, 0])\n            cube([width, depth, height]);\n        \n        // Center groove\n        translate([0, -depth/2 + 1, height/2])\n            cube([width*0.3, depth, height*0.5]);\n    }\n}\n\n// Decorative molding\nmodule molding(width, depth, height) {\n    for (i = [0:width/10:width]) {\n        translate([-width/2 + i + 2, -depth/2 - 0.5, 0])\n            cube([1, height, depth/5]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main lintel body\n    lintel_body(80, 20, 40);\n    \n    // Left corbel\n    translate([-35, 0, -15])\n        corbel(10, 20, 30);\n    \n    // Right corbel\n    translate([35, 0, -15])\n        corbel(10, 20, 30);\n    \n    // Central keystone\n    translate([0, 0, 15])\n        keystone(15, 20, 10);\n    \n    // Top molding\n    translate([0, 0, 20])\n        molding(80, 20, 5);\n    \n    // Bottom molding\n    translate([0, 0, -20])\n        molding(80, 20, 5);\n    \n    // Side decorative elements\n    for (side = [-1, 1]) {\n        translate([side * 30, 0, 0])\n            cylinder(h=5, r=3, $fn=20);\n        translate([side * 30, 0, -15])\n            cylinder(h=5, r=3, $fn=20);\n    }\n}",
    "renders": true
  },
  {
    "building": "loge",
    "openscad_code": "// OpenSCAD Code for a Realistic-Style Lodge (Medium Complexity)\n// Overall dimensions: 80 mm (L) × 60 mm (D) × 60 mm (H)\n\n$fn = 64; // Smooth curves\n\nmodule lodge() {\n    // Main building body\n    difference() {\n        union() {\n            // Base foundation\n            translate([0, 0, -2])\n                cube([84, 64, 4], center = true);\n\n            // Main floor\n            translate([0, 0, 12])\n                cube([80, 60, 24], center = true);\n\n            // Roof\n            translate([0, 0, 36]) {\n                rotate([0, 90, 0])\n                    cylinder(h = 80, d1 = 65, d2 = 60);\n                cube([82, 62, 1], center = true);\n            }\n\n            // Chimney\n            translate([25, 20, 50])\n                cube([10, 10, 15], center = true);\n        }\n\n        // Door\n        translate([0, -31.5, 10])\n            cube([15, 5, 20], center = true);\n\n        // Windows left\n        for (x = [-30, -15])\n            translate([x, -31.5, 18])\n                cube([8, 5, 10], center = true);\n\n        // Windows right\n        for (x = [15, 30])\n            translate([x, -31.5, 18])\n                cube([8, 5, 10], center = true);\n\n        // Roof overhang cutouts\n        for (y = [-30, 30])\n            translate([42, y, 36])\n                cube([2, 4, 4], center = true);\n        for (y = [-30, 30])\n            translate([-42, y, 36])\n                cube([2, 4, 4], center = true);\n    }\n\n    // Ridge beam\n    translate([0, 0, 60])\n        cube([82, 2, 6], center = true);\n\n    // Columns at corners\n    module column(x, y) {\n        translate([x, y, 12])\n            cylinder(h = 24, d = 5, center = false);\n    }\n    column(38, 28);\n    column(-38, 28);\n    column(38, -28);\n    column(-38, -28);\n\n    // Front porch\n    translate([0, -35, 6])\n        cube([88, 10, 12], center = true);\n\n    // Steps\n    translate([0, -45, 2])\n        cube([20, 10, 4], center = true);\n\n    // Door knob\n    translate([0, -31.5, 10])\n        sphere(d = 2);\n}\n\nlodge();",
    "renders": true
  },
  {
    "building": "machicolation",
    "openscad_code": "// Machicolation - Medium Complexity Realistic Style\n// 3D printable medieval defensive structure feature\n\n$fn = 36; // Smooth curves for 3D printing\n\n// Overall dimensions\nwall_thickness = 3;\nmerlon_width = 8;\nmerlon_height = 12;\ncrown_width = 60;\ncrown_depth = 40;\nbase_height = 8;\nfloor_thickness = 2;\n\n// Machicolation opening details\nopening_width = 20;\nopening_depth = 25;\nopening_height = 10;\ncorbel_count = 3;\n\nmodule merlon() {\n    difference() {\n        // Main merlon block\n        translate([0, 0, merlon_height/2])\n            cube([merlon_width, crown_depth, merlon_height], center=true);\n        \n        // Crenel decoration - slight taper\n        translate([0, 0, merlon_height - 2])\n            cube([merlon_width - 2, crown_depth - 4, 4], center=true);\n    }\n}\n\nmodule corbel() {\n    // Stone corbel support with realistic taper\n    difference() {\n        // Main corbel body\n        translate([0, -opening_depth/2 - 3, 0])\n            cube([6, 6, base_height + opening_height], center=true);\n        \n        // Tapered side cuts\n        translate([-3.5, -opening_depth/2 - 6, base_height + opening_height/2])\n            rotate([0, 30, 0])\n            cube([6, 12, base_height + opening_height + 2]);\n        \n        translate([3.5, -opening_depth/2 - 6, base_height + opening_height/2])\n            rotate([0, -30, 0])\n            cube([6, 12, base_height + opening_height + 2]);\n    }\n}\n\nmodule floor_slats() {\n    // Wooden floor slats with gaps\n    slat_width = 1.5;\n    slat_count = 8;\n    \n    for (i = [0:slat_count-1]) {\n        translate([\n            -opening_width/2 + i*(opening_width/slat_count) + slat_width/2,\n            0,\n            0\n        ])\n        cube([slat_width, opening_depth, floor_thickness], center=true);\n    }\n}\n\n// Main crown wall\nmodule crown_wall() {\n    difference() {\n        // Main wall block\n        translate([0, 0, base_height + opening_height/2])\n            cube([crown_width, crown_depth, opening_height], center=true);\n        \n        // Center machicolation opening\n        translate([0, 0, base_height + opening_height/2])\n            cube([opening_width, opening_depth, opening_height + 1], center=true);\n        \n        // Side arrow slits\n        translate([-crown_width/2 + 5, 0, base_height + opening_height/2])\n            cube([2, crown_depth - 4, 15], center=true);\n        \n        translate([crown_width/2 - 5, 0, base_height + opening_height/2])\n            cube([2, crown_depth - 4, 15], center=true);\n    }\n}\n\n// Base foundation\nmodule base() {\n    difference() {\n        // Main base\n        translate([0, 0, base_height/2])\n            cube([crown_width + 4, crown_depth + 4, base_height], center=true);\n        \n        // Drainage holes\n        for (x = [-crown_width/2 + 8, 0, crown_width/2 - 8]) {\n            translate([x, crown_depth/2 + 2, base_height/2])\n                rotate([90, 0, 0])\n                cylinder(h=4, r=1.5, center=true);\n        }\n    }\n}\n\n// Assemble the complete machicolation\nunion() {\n    // Base foundation\n    base();\n    \n    // Crown wall with opening\n    crown_wall();\n    \n    // Merlons on top\n    merlon_count = floor(crown_width / merlon_width);\n    for (i = [0:merlon_count-1]) {\n        translate([\n            -crown_width/2 + merlon_width/2 + i*merlon_width,\n            0,\n            base_height + opening_height\n        ])\n        merlon();\n    }\n    \n    // Corbel supports underneath\n    corbel_spacing = opening_width / (corbel_count - 1);\n    for (i = [0:corbel_count-1]) {\n        translate([\n            -opening_width/2 + i*corbel_spacing,\n            0,\n            0\n        ])\n        corbel();\n    }\n    \n    // Floor inside opening\n    translate([0, 0, base_height + floor_thickness/2])\n        floor_slats();\n}\n\n// Small decorative elements\ntranslate([0, crown_depth/2 - 2, base_height + opening_height + merlon_height/2])\n    cube([crown_width - 4, 2, 1], center=false);",
    "renders": true
  }
]