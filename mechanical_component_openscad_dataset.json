[
  {
    "mechanical_component": "gear",
    "openscad_code": "// Realistic 3D-printable spur gear\n// Overall Ø100 mm × 12 mm thick, 20 teeth, 5 mm bore\n// All features have ≥2 mm walls for reliable printing\n\n// Parameters\n$fn = 90;               // smooth curves\nmodule_height = 12;     // total thickness\nmodule = 3;             // metric module (m)\nteeth_count = 20;\npressure_angle = 20;    // degrees\npitch = teeth_count * module; // Ø100 mm\nbore = 5;               // shaft hole Ø5 mm\nkey_width = 2;          // 2 mm keyway\nhub_d = 20;             // central hub Ø20 mm\nhub_h = 7;              // hub height (protrudes 2 mm each side)\nweb_thk = 2.5;          // web thickness between hub and rim\nrim_web_h = module_height - hub_h; // 5 mm\n\n// Derived diameters\npitch_d = pitch;\naddendum = module;          // 3 mm\ndedendum = 1.25 * module;   // 3.75 mm\nouter_d = pitch_d + 2*addendum;\nroot_d = pitch_d - 2*dedendum;\n\n// Single tooth profile (simplified 20° involute)\nmodule tooth_profile() {\n    // Approximate trapezoidal tooth for medium realism\n    linear_extrude(height = module_height, center = true, convexity=4)\n    polygon(points=[\n        [ root_d/2 * cos(-180/teeth_count), root_d/2 * sin(-180/teeth_count) ],\n        [ outer_d/2 * cos(-90/teeth_count),  outer_d/2 * sin(-90/teeth_count)  ],\n        [ outer_d/2 * cos( 90/teeth_count),  outer_d/2 * sin( 90/teeth_count)  ],\n        [ root_d/2 * cos( 180/teeth_count), root_d/2 * sin( 180/teeth_count) ]\n    ]);\n}\n\n// Gear body with teeth\nmodule gear_body() {\n    difference() {\n        union() {\n            // Rim cylinder\n            cylinder(h = module_height, d = root_d, center = true);\n            // All teeth placed around rim\n            for (i = [0 : teeth_count-1])\n                rotate([0,0,i*360/teeth_count])\n                    tooth_profile();\n        }\n        // Central bore and keyway\n        translate([0,0,-module_height/2-1])\n            cylinder(h = module_height+2, d = bore, center = false);\n        translate([bore/2,0,-module_height/2-1])\n            cube([bore/2+1, key_width, module_height+2], center = true);\n    }\n}\n\n// Central hub (protrudes 1 mm each side)\nmodule hub() {\n    difference() {\n        cylinder(h = hub_h+2, d = hub_d, center = true);\n        translate([0,0,-hub_h/2-1])\n            cylinder(h = hub_h+2, d = bore, center = false);\n        translate([bore/2,0,-hub_h/2-1])\n            cube([bore/2+1, key_width, hub_h+2], center = true);\n    }\n}\n\n// Web spokes connecting hub to rim (2.5 mm thick)\nmodule web_spokes() {\n    difference() {\n        cylinder(h = rim_web_h, d = root_d - 1, center = true);\n        cylinder(h = rim_web_h+1, d = hub_d + 2, center = true);\n    }\n    // Four lightening holes for weight reduction & printability\n    for (a=[0:90:270])\n        rotate([0,0,a])\n            translate([(root_d/2 + hub_d/2)/2, 0, 0])\n                cylinder(h = rim_web_h+1, d = 10, center = true);\n}\n\n// Assembly\nunion() {\n    gear_body();\n    hub();\n    translate([0,0, hub_h/2 - rim_web_h/2])\n        web_spokes();\n}",
    "renders": true
  },
  {
    "mechanical_component": "sprocket",
    "openscad_code": "// Realistic 3D-printable chain sprocket\n// Overall diameter ≈ 84 mm, thickness ≈ 8 mm, 12 teeth\n\n// Basic parameters\n$fn = 50;              // smooth curves\ntooth_cnt = 12;        // number of teeth\npcd = 76;              // pitch-circle diameter\nth = 8;                // thickness\nhole_d = 20;           // central bore\nboss_h = 4;            // raised boss height\nboss_d = 30;           // boss diameter\nweb_th = 2;            // web thickness between spokes\nspoke_cnt = 4;         // number of spokes\n\n// Derived\nr_pitch = pcd / 2;\ntooth_h = 6;           // tooth height above pitch circle\ntooth_w = 5;           // tooth width at pitch circle\nroot_r = r_pitch - 1.5;\n\nmodule tooth_profile() {\n    // Single tooth cross-section\n    linear_extrude(height = th)\n    polygon(points=[\n        [-tooth_w/2, -r_pitch],            // inner root\n        [-tooth_w/2, -r_pitch + 1],        // small relief\n        [-tooth_w*0.4, -r_pitch + 2],\n        [-tooth_w*0.2, -r_pitch + tooth_h - 1],\n        [0, -r_pitch - tooth_h],           // tip\n        [tooth_w*0.2, -r_pitch + tooth_h - 1],\n        [tooth_w*0.4, -r_pitch + 2],\n        [tooth_w/2, -r_pitch + 1],\n        [tooth_w/2, -r_pitch]\n    ]);\n}\n\nmodule sprocket_teeth() {\n    for (i = [0 : tooth_cnt-1])\n        rotate([0, 0, i * 360/tooth_cnt])\n        translate([0, r_pitch, 0])\n        tooth_profile();\n}\n\nmodule central_hub() {\n    difference() {\n        // Main hub disc\n        cylinder(h = th + boss_h, d = boss_d, center = true);\n        // Central bore\n        cylinder(h = th + boss_h + 1, d = hole_d, center = true);\n        // Keyway\n        translate([0, -hole_d/2 - 1, 0])\n        cube([hole_d/4, hole_d/2 + 2, th + boss_h + 1], center = true);\n    }\n}\n\nmodule spokes_and_web() {\n    difference() {\n        // Outer disc with root diameter\n        cylinder(h = th, d = root_r * 2, center = true);\n        // Cut spokes\n        for (i = [0 : spoke_cnt-1])\n            rotate([0, 0, i * 360/spoke_cnt])\n            translate([r_pitch/2, 0, 0])\n            cube([r_pitch - 5, web_th + 1, th + 1], center = true);\n        // Lightening holes between spokes\n        for (i = [0 : spoke_cnt-1])\n            rotate([0, 0, i * 360/spoke_cnt + 360/spoke_cnt/2])\n            translate([r_pitch/2, 0, 0])\n            cylinder(h = th + 1, d = 12, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Teeth\n    sprocket_teeth();\n    \n    // Spokes and web\n    spokes_and_web();\n    \n    // Central hub with boss\n    central_hub();\n}",
    "renders": true
  },
  {
    "mechanical_component": "pulley",
    "openscad_code": "// Realistic Medium-Complexity Pulley (Ø60 mm) – 3D-printable\n// All dimensions in mm; printer-friendly wall thickness ≈2 mm\n\n// --------------------------------------------\n// Parameters\n// --------------------------------------------\n$fa = 2; $fs = 0.5;\n\n// Overall dimensions\npulley_od       = 60;     // Outer Ø of rim\npulley_width    = 26;     // Total width along axle\nbore_d          = 8;      // Shaft hole\nrim_thick       = 5;      // Radial thickness of rim\nweb_thick       = 2;      // Thickness of web spokes\ngroove_depth    = 3;      // Belt groove depth\ngroove_angle    = 40;     // V-groove half-angle\nspoke_count     = 5;      // Number of spokes\nboss_length     = 10;     // Length of central boss\nboss_clearance  = 1;      // Gap between boss and web\n// --------------------------------------------\n\nmodule pulley_assembly() {\n    difference() {\n        union() {\n            // 1. Outer rim including V-groove\n            rim();\n\n            // 2. Central boss (hub)\n            translate([0, 0, -boss_length/2])\n                boss();\n\n            // 3. Web spokes connecting rim to hub\n            web_spokes();\n        }\n\n        // 4. Bore hole for shaft\n        translate([0, 0, -pulley_width/2 - 1])\n            cylinder(h = pulley_width + 2, d = bore_d, center = false);\n\n        // 5. Optional keyway (simple rectangular slot)\n        translate([0, -bore_d/2 - 0.5, -pulley_width/2 - 1])\n            cube([2, bore_d + 1, pulley_width + 2], center = true);\n    }\n}\n\n// Sub-module: Rim with V-groove\nmodule rim() {\n    difference() {\n        // Solid rim cylinder\n        cylinder(h = pulley_width, d = pulley_od, center = true);\n\n        // Remove inner part to leave wall thickness\n        cylinder(h = pulley_width + 2, d = pulley_od - rim_thick*2, center = true);\n\n        // Cut V-groove\n        translate([0, 0, -pulley_width/2 - 1])\n            rotate([0, 90, 0])\n                linear_extrude(height = pulley_width + 2, center = true, convexity = 10)\n                    polygon(points=[\n                        [pulley_od/2 - groove_depth, 0],\n                        [pulley_od/2,  groove_depth * tan(groove_angle)],\n                        [pulley_od/2, -groove_depth * tan(groove_angle)]\n                    ]);\n    }\n}\n\n// Sub-module: Central cylindrical boss\nmodule boss() {\n    cylinder(h = boss_length, d = bore_d + 2*web_thick + 2*boss_clearance, center = true);\n}\n\n// Sub-module: Web spokes\nmodule web_spokes() {\n    for(i = [0 : 360/spoke_count : 359])\n        rotate([0, 0, i])\n            translate([0, (pulley_od - rim_thick)/2, 0])\n                cube([\n                    web_thick,               // thickness in radial direction\n                    (pulley_od - rim_thick)/2 - (bore_d/2 + web_thick + boss_clearance),\n                    pulley_width - 2         // leave small chamfer gap top/bottom\n                ], center = true);\n}\n\n// Render\npulley_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "cam",
    "openscad_code": "// Eccentric cam for 3-D printing – 70 mm Ø, 25 mm thick, 12 mm bore\n// All features printable without supports; 2 mm minimum wall thickness\n\n// Global parameters\ncam_dia = 70;          // outside diameter\ncam_thk = 25;          // overall thickness\nbore_dia = 12;         // shaft bore\neccentricity = 12;     // offset of bore from centre\nkey_w = 4;             // width of keyway\nkey_h = 2;             // depth of keyway\nspoke_num = 6;         // spokes on the web\nspoke_w = 8;           // spoke width\nhub_dia = 22;          // central hub Ø\nhub_thk = cam_thk;     // hub is full thickness\nweb_thk = 4;           // web thickness (≥2 mm)\n\n// Convenience variables\nR = cam_dia/2;\nr_hub = hub_dia/2;\n\nmodule cam_profile() {\n    /* 2-D profile of the cam (eccentric circle) */\n    translate([eccentricity, 0])  // offset centre\n        circle(r = R, $fn = 90);\n}\n\nmodule keyway_2d() {\n    /* 2-D keyway profile for difference() */\n    translate([0, bore_dia/2])\n        square([key_w, key_h + bore_dia/2], center = true);\n}\n\nmodule cam_body() {\n    /* Main cam disk with bore and keyway */\n    difference() {\n        linear_extrude(height = cam_thk)\n            cam_profile();\n        \n        // Shaft bore\n        cylinder(d = bore_dia, h = cam_thk + 0.2, center = true, $fn = 40);\n        \n        // Keyway\n        rotate([0, 0, 0])  // aligned along +X\n            linear_extrude(height = cam_thk + 0.2, center = true)\n                keyway_2d();\n    }\n}\n\nmodule spokes() {\n    /* Radial spokes connecting hub to rim */\n    for (i = [0 : spoke_num-1])\n        rotate([0, 0, i * 360/spoke_num])\n            translate([0, 0, (cam_thk - web_thk)/2])\n                difference() {\n                    cube([spoke_w, R - r_hub - 1, web_thk], center = true);\n                    // Trim spoke ends to cam curvature\n                    translate([0, R, 0])\n                        cylinder(r = R, h = web_thk + 0.2, center = true, $fn = 90);\n                }\n}\n\nmodule hub() {\n    /* Central thickened hub */\n    difference() {\n        cylinder(d = hub_dia, h = hub_thk, center = true, $fn = 40);\n        cylinder(d = bore_dia, h = hub_thk + 0.2, center = true, $fn = 40);\n        rotate([0, 0, 0])\n            linear_extrude(height = hub_thk + 0.2, center = true)\n                keyway_2d();\n    }\n}\n\nmodule web_plate() {\n    /* Thin web between spokes */\n    linear_extrude(height = web_thk)\n        difference() {\n            scale([0.96, 0.96, 1])  // keep web inside rim\n                cam_profile();\n            circle(r = r_hub + 1);   // hole at centre\n        }\n}\n\n// Assemble the cam\nunion() {\n    cam_body();\n    hub();\n    translate([0, 0, (cam_thk - web_thk)/2]) {\n        web_plate();\n        spokes();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "crankshaft",
    "openscad_code": "// Crankshaft - Realistic Medium Complexity\n// 3D-printable inline-4 crankshaft with 2 mm walls, ~100 mm long\n\n// Main parameters\njournal_d = 12;     // main bearing journal diameter\njournal_l = 18;     // main bearing journal length\ncrank_d = 10;       // crankpin diameter\ncrank_l = 14;       // crankpin length\nweb_t = 8;          // web thickness\nweb_w = 22;         // web width\nstroke = 18;        // crank throw (stroke) = offset\nspacing = 20;       // cylinder spacing\nshaft_end_l = 12;   // nose / tail length\nfillet_r = 2;       // fillet radius\n\n// Helper module: rounded cylinder\nmodule rounded_cyl(h, r1, r2) {\n    hull() {\n        translate([0,0,0]) sphere(r1);\n        translate([0,0,h]) sphere(r2);\n    }\n}\n\n// Main journal\nmodule main_journal(l) {\n    difference() {\n        cylinder(h=l, d=journal_d, $fn=32);\n        translate([0,0,-1]) cylinder(h=l+2, d=journal_d-4, $fn=32);\n    }\n}\n\n// Crankpin (rod journal)\nmodule crankpin() {\n    difference() {\n        cylinder(h=crank_l, d=crank_d, $fn=32);\n        translate([0,0,-1]) cylinder(h=crank_l+2, d=crank_d-4, $fn=32);\n    }\n}\n\n// Web (crank throw arm)\nmodule crank_web(offset) {\n    difference() {\n        // solid web\n        hull() {\n            translate([-web_t/2, 0, -web_w/2]) cube([web_t, journal_d, web_w]);\n            translate([-web_t/2, offset, -web_w/2]) cube([web_t, crank_d, web_w]);\n        }\n        // lightening hole\n        translate([-web_t/2-0.1, offset/2, 0]) rotate([90,0,0]) cylinder(h=web_t+0.2, d=6, $fn=20);\n    }\n}\n\n// Counterweight\nmodule counterweight(offset) {\n    translate([-web_t/2-0.1, -offset-6, 0]) rotate([90,0,0]) difference() {\n        cylinder(h=web_t+0.2, d1=18, d2=18, $fn=40);\n        translate([0,0,-0.1]) cylinder(h=web_t+0.4, d=8, $fn=30);\n    }\n}\n\n// Crank throw assembly (pin + webs + counterweights)\nmodule crank_throw(offset) {\n    union() {\n        // mirror webs for 180-degree opposite\n        for (mir=[0:1]) {\n            mirror([0,mir,0]) {\n                crank_web(offset);\n                counterweight(offset);\n            }\n        }\n        // crankpin between webs\n        translate([0, offset, 0]) rotate([90,0,0]) crankpin();\n    }\n}\n\n// Assemble crankshaft\nmodule crankshaft() {\n    union() {\n        // Front nose\n        translate([-spacing/2-shaft_end_l, 0, 0]) main_journal(shaft_end_l);\n\n        // Main journals and throws\n        for (i=[0:3]) {\n            // main journal\n            translate([i*spacing, 0, 0]) main_journal(journal_l);\n            // crank throw between journals\n            if (i<3)\n                translate([(i+0.5)*spacing, 0, 0])\n                    rotate([0,0,180*(i%2)])  // 180-degree offset for inline-4\n                    crank_throw(stroke);\n        }\n\n        // Rear flange / tail\n        translate([3.5*spacing, 0, 0]) main_journal(shaft_end_l);\n    }\n}\n\n// Render\ncrankshaft();",
    "renders": true
  },
  {
    "mechanical_component": "bearing",
    "openscad_code": "// Realistic Ball Bearing - 6204 (20x47x14 mm) - Medium Complexity\n\n// Overall dimensions\nbearing_od = 47;  // Outer diameter\nbearing_id = 20;  // Inner diameter\nbearing_w = 14;   // Width\nball_d = 6.35;    // Ball diameter\nrace_th = 2;      // Race thickness\nshield_th = 0.8;  // Shield thickness\ncage_th = 1.5;    // Ball cage thickness\n\n// Main outer ring\nmodule outer_ring() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=bearing_w, d=bearing_od, $fn=100);\n        \n        // Inner bore\n        translate([0, 0, -0.1])\n            cylinder(h=bearing_w + 0.2, d=bearing_od - 2*race_th, $fn=100);\n        \n        // Outer race groove\n        translate([0, 0, bearing_w/2 - race_th])\n            rotate_extrude($fn=100)\n                translate([(bearing_od - 2*race_th - ball_d)/2 + ball_d/2, 0])\n                    circle(r=ball_d/2 * 1.05);\n    }\n}\n\n// Main inner ring\nmodule inner_ring() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=bearing_w, d=bearing_id + 2*race_th, $fn=100);\n        \n        // Inner bore\n        translate([0, 0, -0.1])\n            cylinder(h=bearing_w + 0.2, d=bearing_id, $fn=100);\n        \n        // Inner race groove\n        translate([0, 0, bearing_w/2 - race_th])\n            rotate_extrude($fn=100)\n                translate([(bearing_id + 2*race_th + ball_d)/2 - ball_d/2, 0])\n                    circle(r=ball_d/2 * 1.05);\n    }\n}\n\n// Ball cage (retainer)\nmodule ball_cage() {\n    difference() {\n        // Main cage ring\n        cylinder(h=cage_th, d=(bearing_od + bearing_id)/2, $fn=100);\n        \n        // Center hole\n        translate([0, 0, -0.1])\n            cylinder(h=cage_th + 0.2, d=(bearing_od + bearing_id)/2 - 4, $fn=100);\n        \n        // Ball pockets\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([(bearing_od + bearing_id)/2 - 2, 0, -0.1])\n                    cylinder(h=cage_th + 0.2, d=ball_d * 1.1, $fn=100);\n        }\n    }\n}\n\n// Individual balls\nmodule balls() {\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([(bearing_od + bearing_id)/2 - 2, 0, bearing_w/2 - race_th])\n                sphere(d=ball_d, $fn=50);\n    }\n}\n\n// Dust shields\nmodule shield() {\n    difference() {\n        // Shield disc\n        cylinder(h=shield_th, d=bearing_od, $fn=100);\n        \n        // Center hole\n        translate([0, 0, -0.1])\n            cylinder(h=shield_th + 0.2, d=bearing_id + 2, $fn=100);\n        \n        // Ventilation holes\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([(bearing_od + bearing_id)/4, 0, -0.1])\n                    cylinder(h=shield_th + 0.2, d=2, $fn=20);\n        }\n    }\n}\n\n// Assembly\n// Bottom shield\ntranslate([0, 0, 0])\n    shield();\n\n// Outer ring\ntranslate([0, 0, shield_th])\n    outer_ring();\n\n// Inner ring\ntranslate([0, 0, shield_th])\n    inner_ring();\n\n// Ball cage\ntranslate([0, 0, shield_th + race_th])\n    ball_cage();\n\n// Balls\ntranslate([0, 0, shield_th + race_th])\n    balls();\n\n// Top shield\ntranslate([0, 0, bearing_w - shield_th])\n    mirror([0, 0, 1])\n        shield();",
    "renders": true
  },
  {
    "mechanical_component": "pinion",
    "openscad_code": "// Pinion gear - medium complexity realistic style\n// Overall height ~100mm, gear diameter ~60mm\n\n// Parameters\n$fn = 50;\nmodule_height = 100;\ngear_height = 25;\nshaft_diameter = 12;\nbore_diameter = 8;\nkeyway_width = 3;\nkeyway_depth = 2;\nteeth_count = 20;\ntooth_height = 4;\ntooth_width = 3;\nfillet_radius = 1;\n\n// Main shaft\nmodule shaft() {\n    difference() {\n        // Main cylindrical shaft\n        cylinder(h=module_height, d=shaft_diameter, center=true);\n        \n        // Central bore\n        translate([0, 0, 0])\n            cylinder(h=module_height+2, d=bore_diameter, center=true);\n        \n        // Keyway slot\n        translate([0, -bore_diameter/2-keyway_depth/2, 0])\n            cube([keyway_width, keyway_depth, module_height+2], center=true);\n    }\n}\n\n// Gear teeth module\nmodule gear_teeth() {\n    union() {\n        for (i = [0:teeth_count-1]) {\n            rotate([0, 0, i*360/teeth_count])\n                translate([30-tooth_height/2, 0, 0])\n                    cube([tooth_height, tooth_width, gear_height], center=true);\n        }\n    }\n}\n\n// Gear body\nmodule gear_body() {\n    difference() {\n        union() {\n            // Main gear disk\n            cylinder(h=gear_height, d=60, center=true);\n            \n            // Add teeth\n            gear_teeth();\n            \n            // Top fillet\n            translate([0, 0, gear_height/2-fillet_radius])\n                cylinder(h=fillet_radius*2, d=58, center=true);\n            \n            // Bottom fillet\n            translate([0, 0, -gear_height/2+fillet_radius])\n                cylinder(h=fillet_radius*2, d=58, center=true);\n        }\n        \n        // Central hole for shaft\n        cylinder(h=gear_height+2, d=shaft_diameter, center=true);\n    }\n}\n\n// Hub transition\nmodule hub() {\n    translate([0, 0, gear_height/2+5])\n        cylinder(h=10, d1=20, d2=shaft_diameter, center=true);\n}\n\n// Retaining collar\nmodule collar() {\n    translate([0, 0, gear_height/2+15])\n        difference() {\n            cylinder(h=5, d=18, center=true);\n            cylinder(h=7, d=bore_diameter, center=true);\n        }\n}\n\n// Assembly\nunion() {\n    // Main shaft\n    shaft();\n    \n    // Gear assembly\n    translate([0, 0, 0])\n        gear_body();\n    \n    // Hub\n    hub();\n    \n    // Collar\n    collar();\n    \n    // Set screw hole\n    translate([0, shaft_diameter/2, gear_height/2+17.5])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=3, center=true);\n}\n\n// Add chamfers to shaft ends\ntranslate([0, 0, module_height/2-1])\n    cylinder(h=2, d1=shaft_diameter, d2=shaft_diameter-2, center=true);\ntranslate([0, 0, -module_height/2+1])\n    cylinder(h=2, d1=shaft_diameter, d2=shaft_diameter-2, center=true);",
    "renders": true
  },
  {
    "mechanical_component": "rack",
    "openscad_code": "// Medium-complexity realistic 3D-printable rack\n// Overall size: ~110 mm tall, 90 mm wide, 45 mm deep\n\n// Wall thickness = 2 mm everywhere\n$fn = 32;\n\n// Main rack module\nmodule rack() {\n    // Frame thickness\n    wall = 2;\n\n    // Outer dimensions\n    height = 110;\n    width  = 90;\n    depth  = 45;\n\n    // Shelves\n    shelf_count = 4;\n    shelf_thick = wall;\n    shelf_clear = (height - shelf_thick * shelf_count) / (shelf_count + 0.5);\n\n    // Leg cross-section\n    leg_size = 10;\n\n    // Back slat dimensions\n    slat_w = 8;\n    slat_gap = 6;\n\n    // --- Frame ---\n    // Left leg\n    translate([0, 0, 0])\n        cube([leg_size, wall, height]);\n\n    // Right leg\n    translate([width - leg_size, 0, 0])\n        cube([leg_size, wall, height]);\n\n    // Bottom front stretcher\n    translate([leg_size, 0, 0])\n        cube([width - 2 * leg_size, wall, wall]);\n\n    // Top front stretcher\n    translate([leg_size, 0, height - wall])\n        cube([width - 2 * leg_size, wall, wall]);\n\n    // Bottom side stretchers\n    translate([0, 0, 0])\n        cube([wall, depth, wall]);\n\n    translate([width - wall, 0, 0])\n        cube([wall, depth, wall]);\n\n    // Top side stretchers\n    translate([0, 0, height - wall])\n        cube([wall, depth, wall]);\n\n    translate([width - wall, 0, height - wall])\n        cube([wall, depth, wall]);\n\n    // --- Shelves ---\n    for (i = [1 : shelf_count]) {\n        z = i * shelf_clear + (i - 1) * shelf_thick;\n        translate([leg_size, wall, z])\n            cube([width - 2 * leg_size, depth - wall, shelf_thick]);\n    }\n\n    // --- Back slats ---\n    slat_count = floor((height - wall) / (slat_w + slat_gap));\n    for (j = [0 : slat_count - 1]) {\n        z = wall + j * (slat_w + slat_gap);\n        translate([wall, depth - wall, z])\n            cube([width - 2 * wall, wall, slat_w]);\n    }\n\n    // --- Optional rail ---\n    rail_h = 6;\n    translate([leg_size, wall, height - wall - rail_h])\n        cube([width - 2 * leg_size, wall, rail_h]);\n}\n\n// Render\nrack();",
    "renders": true
  },
  {
    "mechanical_component": "worm",
    "openscad_code": "// Worm Mechanical Gear Component\n// Realistic style, medium complexity worm drive unit\n\n$fn = 50;\n\n// Overall dimensions\nmodule worm_drive() {\n    union() {\n        // Main worm shaft\n        worm_shaft();\n        \n        // Worm gear wheel\n        translate([35, 0, 0])\n            rotate([90, 0, 0])\n            worm_wheel();\n        \n        // Support bearings\n        translate([-20, 0, 0])\n            bearing();\n        translate([20, 0, 0])\n            bearing();\n        \n        // Mounting flanges\n        translate([0, 0, -15])\n            mounting_flange();\n    }\n}\n\n// Worm shaft with spiral thread\nmodule worm_shaft() {\n    difference() {\n        // Main shaft body\n        union() {\n            // Shaft cylinder\n            cylinder(h=40, r=8, center=true);\n            \n            // Keyway slot\n            translate([0, 0, -20])\n                cube([16, 4, 40], center=true);\n        }\n        \n        // Center bore\n        cylinder(h=42, r=3, center=true);\n        \n        // Spiral thread (subtractive for printing)\n        for(i=[0:5:360]) {\n            rotate([0, 0, i])\n                translate([11, 0, -20 + i/9])\n                    rotate([90, 0, 0])\n                        cylinder(h=25, r1=3.5, r2=3.5);\n        }\n    }\n}\n\n// Worm wheel with helical teeth\nmodule worm_wheel() {\n    difference() {\n        union() {\n            // Main wheel disk\n            cylinder(h=12, r=20);\n            \n            // Hub\n            translate([0, 0, 6])\n                cylinder(h=8, r=10);\n            \n            // Spokes\n            for(i=[0:45:360]) {\n                rotate([0, 0, i])\n                    translate([15, 0, 6])\n                        cube([8, 3, 8], center=true);\n            }\n        }\n        \n        // Center shaft hole\n        cylinder(h=20, r=5);\n        \n        // Keyway\n        translate([0, 6, 0])\n            cube([3, 4, 20], center=true);\n        \n        // Teeth (subtractive for printing)\n        for(i=[0:15:360]) {\n            rotate([0, 0, i])\n                translate([20, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=12, r1=3, r2=3);\n        }\n    }\n}\n\n// Bearing housing\nmodule bearing() {\n    difference() {\n        union() {\n            // Outer race\n            cylinder(h=10, r=12);\n            \n            // Mounting ears\n            for(i=[0:90:270]) {\n                rotate([0, 0, i])\n                    translate([12, 0, 5])\n                        cube([8, 6, 4], center=true);\n            }\n        }\n        \n        // Inner bore\n        cylinder(h=12, r=8.5);\n        \n        // Mounting holes\n        for(i=[0:90:270]) {\n            rotate([0, 0, i])\n                translate([16, 0, 5])\n                    cylinder(h=5, r=2);\n        }\n    }\n}\n\n// Mounting flange base\nmodule mounting_flange() {\n    difference() {\n        // Base plate\n        cube([60, 50, 4], center=true);\n        \n        // Center cutout for clearance\n        translate([17.5, 0, -1])\n            cylinder(h=6, r=22);\n        \n        // Mounting holes\n        for(x=[-20, 20]) {\n            for(y=[-15, 15]) {\n                translate([x, y, -1])\n                    cylinder(h=5, r=3);\n            }\n        }\n    }\n}\n\n// Render the complete worm drive\nworm_drive();",
    "renders": true
  },
  {
    "mechanical_component": "bevelgear",
    "openscad_code": "// Bevel Gear - Medium Complexity Realistic Style\n// 45° bevel gear with 20 teeth, 80mm pitch diameter, 20mm face width\n// 3D printable with 2mm wall thickness\n\n// Parameters\n$fn = 50;  // Smooth curves\nmodule_bevel = 45;  // Bevel angle\nteeth = 20;\npitch_diameter = 80;\nface_width = 20;\nbore_diameter = 12;\nhub_diameter = 30;\nhub_length = 25;\nkeyway_width = 4;\nkeyway_depth = 2;\n\n// Calculate gear dimensions\npitch_angle = module_bevel;\npitch_radius = pitch_diameter / 2;\ntooth_height = 6;\naddendum = 2.5;\ndedendum = 3.5;\ntooth_angle = 360 / teeth;\ncone_height = pitch_radius * tan(pitch_angle);\n\nmodule bevel_gear() {\n    difference() {\n        union() {\n            // Main gear body (conical)\n            difference() {\n                // Outer cone\n                cylinder(h = cone_height, r1 = pitch_radius, r2 = 0, center = false);\n                \n                // Inner cone for face width\n                translate([0, 0, cone_height - face_width])\n                    cylinder(h = face_width + 0.1, r1 = pitch_radius - face_width * sin(pitch_angle), r2 = 0, center = false);\n            }\n            \n            // Hub\n            translate([0, 0, -hub_length/2])\n                cylinder(h = hub_length, r = hub_diameter/2, center = true);\n            \n            // Teeth\n            for(i = [0:teeth-1]) {\n                rotate([0, 0, i * tooth_angle])\n                    tooth();\n            }\n        }\n        \n        // Bore hole\n        cylinder(h = cone_height + hub_length + 2, r = bore_diameter/2, center = true);\n        \n        // Keyway\n        translate([-bore_diameter/2 - keyway_depth/2, 0, -hub_length/2 - 1])\n            cube([keyway_depth + 1, keyway_width, hub_length + 2], center = true);\n        \n        // Lightening holes (structural elements)\n        for(j = [1:3]) {\n            rotate([0, 0, j * 120])\n                translate([hub_diameter/2 + 8, 0, cone_height/2])\n                    rotate([90, 0, 0])\n                        cylinder(h = 10, r = 4, center = true);\n        }\n    }\n}\n\nmodule tooth() {\n    // Single tooth profile\n    tooth_width = PI * pitch_diameter / teeth / 2;\n    \n    // Tooth base at larger diameter\n    translate([pitch_radius - addendum, 0, cone_height - face_width])\n        rotate([90 - pitch_angle, 0, 0])\n            linear_extrude(height = tooth_width, center = true, scale = [0.8, 0.8])\n                polygon(points=[\n                    [0, 0],\n                    [addendum + dedendum, -tooth_height/2],\n                    [addendum + dedendum, tooth_height/2],\n                    [0, 0]\n                ]);\n}\n\n// Assembly view\nbevel_gear();\n\n// Reference shaft\n%translate([0, 0, -30])\n    cylinder(h = 60, r = bore_diameter/2, center = false);",
    "renders": true
  },
  {
    "mechanical_component": "spurgear",
    "openscad_code": "// Realistic Spur Gear - Medium Complexity\n// 60mm diameter gear with 20 teeth and 10mm bore\n\n// Parameters\n$fn = 50;  // Circle resolution\nmodule_thickness = 8;  // Total gear thickness\ntooth_height = 3;      // Addendum + dedendum\nroot_radius = 25;      // Pitch circle radius\nbore_diameter = 10;    // Central hole diameter\nhub_height = 12;       // Height of central hub\nhub_diameter = 20;     // Diameter of central hub\nweb_thickness = 4;     // Thickness of web between hub and rim\nrim_thickness = 5;     // Thickness of outer rim\nrelief_depth = 2;      // Weight reduction pockets depth\nkeyway_width = 4;      // Width of shaft keyway\nkeyway_depth = 2;      // Depth of shaft keyway\n\n// Tooth profile parameters\nnum_teeth = 20;\npressure_angle = 20;   // Standard 20° pressure angle\n\n// Calculate derived dimensions\npitch_diameter = root_radius * 2;\naddendum = tooth_height * 0.6;\ndedendum = tooth_height * 0.4;\nouter_radius = root_radius + addendum;\nroot_circle_radius = root_radius - dedendum;\nbase_circle_radius = root_radius * cos(pressure_angle);\n\n// Create involute tooth profile\nmodule tooth_profile() {\n    // Simplified involute curve approximation\n    difference() {\n        union() {\n            // Main tooth body\n            linear_extrude(height = module_thickness)\n                polygon(points=[\n                    [0, root_circle_radius],\n                    [addendum * 0.3, outer_radius],\n                    [addendum * 0.7, outer_radius],\n                    [addendum, root_circle_radius]\n                ]);\n            \n            // Rounded tooth tip\n            translate([addendum * 0.5, outer_radius, module_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(h=addendum, r=addendum * 0.5, center=true);\n        }\n        \n        // Root fillet\n        translate([0, 0, -1])\n            cylinder(h=module_thickness + 2, r=root_circle_radius, center=true);\n    }\n}\n\n// Generate all teeth\nmodule gear_teeth() {\n    for (i = [0:num_teeth-1]) {\n        rotate([0, 0, i * 360/num_teeth])\n            tooth_profile();\n    }\n}\n\n// Central hub with keyway\nmodule central_hub() {\n    difference() {\n        // Main hub cylinder\n        cylinder(h=hub_height, r=hub_diameter/2, center=true);\n        \n        // Bore hole\n        cylinder(h=hub_height + 2, r=bore_diameter/2, center=true);\n        \n        // Keyway\n        translate([0, -bore_diameter/2 - keyway_depth/2, 0])\n            cube([keyway_width, keyway_depth, hub_height + 2], center=true);\n    }\n}\n\n// Web with lightening holes\nmodule gear_web() {\n    difference() {\n        // Main web disc\n        cylinder(h=web_thickness, r=root_radius - rim_thickness, center=true);\n        \n        // Lightening holes\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60 + 30])\n                translate([root_radius/2, 0, 0])\n                    cylinder(h=web_thickness + 2, r=6, center=true);\n        }\n    }\n}\n\n// Outer rim\nmodule outer_rim() {\n    difference() {\n        // Main rim cylinder\n        cylinder(h=module_thickness, r=root_radius, center=true);\n        \n        // Cutout for web\n        cylinder(h=module_thickness + 2, r=root_radius - rim_thickness, center=true);\n    }\n}\n\n// Chamfers and fillets\nmodule edge_chamfers() {\n    difference() {\n        // Main gear body\n        union() {\n            cylinder(h=module_thickness, r=outer_radius, center=true);\n            central_hub();\n            gear_web();\n            outer_rim();\n        }\n        \n        // Top chamfer\n        translate([0, 0, module_thickness/2 - 0.1])\n            cylinder(h=module_thickness/2, r1=outer_radius, r2=outer_radius - 1, center=false);\n        \n        // Bottom chamfer\n        translate([0, 0, -module_thickness/2 + 0.1])\n            cylinder(h=module_thickness/2, r1=outer_radius - 1, r2=outer_radius, center=false);\n    }\n}\n\n// Assemble the complete gear\nunion() {\n    // Main gear body with chamfers\n    edge_chamfers();\n    \n    // Add teeth\n    gear_teeth();\n    \n    // Hub extension\n    translate([0, 0, hub_height/2 - module_thickness/2])\n        cylinder(h=hub_height - module_thickness, r=hub_diameter/2, center=false);\n}",
    "renders": true
  },
  {
    "mechanical_component": "helicalgear",
    "openscad_code": "// Helical Gear – medium-complexity, 3-D-printable\n// External diameter ≈ 80 mm, face width 20 mm, 20 teeth, 20° pressure angle, 30° helix angle\n// Wall thickness everywhere ≥ 2 mm; no severe overhangs because the gear is printed vertically (Z-up)\n\n$fa = 2; $fs = 1;\n\nmodule involute_point(r, t) = [r*(cos(t)+t*sin(t)), r*(sin(t)-t*cos(t))];   // 2-D involute\n\nmodule involute_profile(m, z, a, steps=40) {\n    // m = module, z = teeth, a = pressure angle (rad)\n    r = m*z/2;                       // pitch radius\n    rb = r*cos(a);                   // base radius\n    pitch_angle = 360/z;\n    tmax = tan(a);                   // involute parameter at pitch circle\n    da = 0.95*tmax/steps;\n    profile = [ for (i=[0:steps]) involute_point(rb, i*da) ];\n    // Mirror for the other side\n    mirror([0,1,0]) polygon(profile);\n    polygon(profile);\n}\n\nmodule tooth_2d(m, z, a) {\n    difference() {\n        union() {\n            involute_profile(m, z, a);\n            translate([0, m*z/2 + 1.25*m]) square([m*PI, 2.5*m], center=true);\n        }\n        // Root relief (2 mm radius)\n        translate([0, m*z/2 - 1.25*m]) circle(r=2);\n    }\n}\n\nmodule gear_2d(m, z, a) {\n    pitch_angle = 360/z;\n    for (i=[0:z-1])\n        rotate([0,0,i*pitch_angle])\n            tooth_2d(m, z, a);\n    // Hub disc between root and bore\n    circle(r=m*z/2 + 1.25*m + 2);\n}\n\nmodule helical_gear_3d(m, z, a, helix, thickness, bore) {\n    slices = 40;\n    slice_th = thickness/slices;\n    h_step = helix/slices;           // twist per slice\n    for (i=[0:slices-1]) {\n        translate([0,0,i*slice_th])\n            linear_extrude(height=slice_th, twist=h_step, convexity=4)\n                gear_2d(m, z, a);\n    }\n    // Central hub cylinder\n    cylinder(h=thickness+0.1, r=m*z/2 - 3*m, center=false); // wall ≥ 2 mm\n    // Bore\n    cylinder(h=thickness+2, r=bore/2, center=false);\n}\n\n// Parameters\nmodule = 2;\nteeth = 20;\npressure_angle = 20;\nhelix_angle = 30;\nface_width = 20;\nshaft_diameter = 8;\n\ndifference() {\n    helical_gear_3d(module, teeth, pressure_angle, helix_angle, face_width, shaft_diameter);\n    // Keyway (simple rectangular slot for shaft)\n    translate([0, -shaft_diameter/2-2, -1])\n        cube([2, shaft_diameter+4, face_width+2], center=false);\n}",
    "renders": true
  },
  {
    "mechanical_component": "crownwheel",
    "openscad_code": "// OpenSCAD Crownwheel Gear\n// Crownwheel gear with 36 teeth, 2 mm wall thickness, 3D-printable\n// Outer Ø 100 mm, bore Ø 12 mm, face width 20 mm\n\n// ---------- Parameters ----------\n$fn = 50;            // Resolution\nteeth = 36;          // Number of teeth\nD_o = 100;           // Outer diameter (mm)\nD_p = 92;            // Pitch diameter (mm)\nD_b = 12;            // Bore diameter (mm)\nface = 20;           // Face width / thickness (mm)\nwall = 2;            // Wall thickness for 3D printing (mm)\n\n// ---------- Tooth profile ----------\nmodule tooth() {\n    // Single tooth – involute-like shape built from primitives\n    // Height 4 mm above pitch circle\n    linear_extrude(height = face, center = true)\n    difference() {\n        polygon(points = [\n            [0, -D_p/2 + 1],\n            [1.5, -D_p/2 - 3],\n            [3,  -D_p/2 - 2.5],\n            [4,  -D_p/2 + 1],\n            [2,  -D_p/2 + 3.5],\n            [0,  -D_p/2 + 3]\n        ]);\n        translate([2, -D_p/2 + 1, 0])\n            circle(r = 0.5);\n    }\n}\n\n// ---------- Crownwheel body ----------\nmodule crownwheel() {\n    difference() {\n        union() {\n            // Main disk\n            cylinder(h = face, d = D_o, center = true);\n            \n            // Teeth array\n            for (i = [0 : teeth-1]) {\n                rotate([0, 0, i * 360/teeth])\n                    translate([0, 0, 0])\n                        tooth();\n            }\n            \n            // Structural spokes (6 spokes)\n            for (i = [0 : 5]) {\n                rotate([0, 0, i * 60]) {\n                    translate([D_b/2 + wall, 0, 0])\n                        cube([D_p/2 - D_b/2 - wall, wall*2, face], center = true);\n                }\n            }\n            \n            // Reinforcing rim on back\n            translate([0, 0, face/2 + wall/2])\n                cylinder(h = wall, d1 = D_p, d2 = D_p - 4, center = false);\n        }\n        \n        // Central bore\n        cylinder(h = face + 2, d = D_b, center = true);\n    }\n}\n\n// ---------- Mounting hub ----------\nmodule hub() {\n    difference() {\n        cylinder(h = face + 6, d = D_b + 10, center = true);\n        cylinder(h = face + 8, d = D_b, center = true);\n        \n        // Keyway\n        translate([0, -D_b/2 - 1, 0])\n            cube([D_b/2 + 2, 2, face + 8], center = true);\n    }\n}\n\n// ---------- Assembly ----------\nunion() {\n    crownwheel();\n    hub();\n}",
    "renders": true
  },
  {
    "mechanical_component": "sungear",
    "openscad_code": "// Realistic Sun-Gear Mechanical Component (Medium Complexity)\n// A central hub with 12 involute spur teeth, 2 mm wall thickness, 3D-printable (no overhangs >45°)\n// Outer Ø 100 mm, hub Ø 40 mm, overall thickness 25 mm, keyway included\n\n$fn = 50;               // global circle resolution\n\n// --- PARAMETERS ----------------------------------------------------------\nmodule params() {\n    gear_od         = 100;  // outer diameter\n    hub_d           = 40;   // central hub diameter\n    bore_d          = 20;   // shaft bore diameter\n    key_w           = 6;    // keyway width\n    key_h           = 3;    // keyway depth\n    thickness       = 25;   // gear thickness\n    teeth_n         = 12;   // number of teeth\n    tooth_h         = 8;    // addendum height\n    rim_clear       = 2;    // minimum wall thickness\n    chamfer         = 1.5;  // top/bottom edge chamfer\n}\n\n// --- INVOLUTE TOOTH PROFILE ---------------------------------------------\nmodule involute_tooth(m, z, a=20) {\n    // simplified circular approximation (printable & medium complexity)\n    r_pitch = m*z/2;\n    r_base  = r_pitch*cos(a);\n    r_add   = r_pitch + m;\n    r_ded   = r_pitch - 1.25*m;\n\n    // straight-flank tooth with fillet (45° safe overhang)\n    linear_extrude(height=params().thickness, center=true, convexity=4)\n    difference() {\n        circle(r=r_add);                    // addendum circle\n        circle(r=r_ded);                    // dedendum circle\n        // cut away half to create single tooth\n        translate([0,-r_add*2,0])\n            square([r_add*2, r_add*2], center=false);\n    }\n}\n\n// --- MAIN SUNGEAR MODULE -------------------------------------------------\nmodule sungear() {\n    m = (params().gear_od - 2*params().tooth_h) / params().teeth_n; // module\n\n    // central hub body\n    difference() {\n        // solid disk\n        cylinder(d=params().hub_d, h=params().thickness, center=true);\n        // shaft bore\n        cylinder(d=params().bore_d, h=params().thickness+1, center=true);\n        // keyway\n        translate([0, -params().bore_d/2, -params().thickness/2 - 1])\n            cube([params().key_w, params().key_h + params().bore_d/2, params().thickness+2], center=false);\n    }\n\n    // outer rim ring\n    difference() {\n        cylinder(d=params().gear_od, h=params().thickness, center=true);\n        cylinder(d=params().gear_od - 2*params().rim_clear, h=params().thickness+1, center=true);\n    }\n\n    // teeth around rim\n    for (i = [0 : params().teeth_n-1])\n        rotate([0,0,i*360/params().teeth_n])\n            translate([0,0,0])\n                involute_tooth(m, 1, 20);\n\n    // top chamfer\n    translate([0,0,params().thickness/2 - params().chamfer/2])\n        cylinder(d1=params().hub_d - 2*params().chamfer,\n                 d2=params().hub_d,\n                 h=params().chamfer, center=true);\n\n    // bottom chamfer\n    translate([0,0,-params().thickness/2 + params().chamfer/2])\n        cylinder(d1=params().hub_d,\n                 d2=params().hub_d - 2*params().chamfer,\n                 h=params().chamfer, center=true);\n}\n\n// --- RENDER -------------------------------------------------------------\nsungear();",
    "renders": true
  },
  {
    "mechanical_component": "planetgear",
    "openscad_code": "// Planetgear - realistic style, medium complexity\n// A 3D printable planetary gear system with sun, 3 planets, ring and carrier\n\n$fn = 64;  // Smooth curves for 3D printing\n\n// Overall scale factor - results in ~100mm diameter ring gear\nscale_factor = 1;\n\n// Gear parameters\nmodule tooth_profile(base_radius, tooth_height, tooth_width, count) {\n    for (i = [0:count-1]) {\n        rotate([0, 0, i * 360/count]) {\n            translate([base_radius, 0, 0]) {\n                cube([tooth_height, tooth_width, 8], center = true);\n            }\n        }\n    }\n}\n\n// Sun gear - central driver\nmodule sun_gear() {\n    color(\"gold\") difference() {\n        union() {\n            // Gear body\n            cylinder(h = 8, r = 15, $fn = 64);\n            // Teeth\n            tooth_profile(15, 3.5, 3, 20);\n        }\n        // Central shaft hole\n        cylinder(h = 10, r = 5, $fn = 32);\n        // Keyway\n        translate([4.5, -1, -1]) cube([2, 2, 10]);\n    }\n}\n\n// Planet gear\nmodule planet_gear() {\n    color(\"silver\") difference() {\n        union() {\n            // Gear body\n            cylinder(h = 8, r = 12, $fn = 64);\n            // Teeth\n            tooth_profile(12, 3, 2.5, 16);\n            // Central boss for bearing\n            cylinder(h = 4, r = 6, center = true);\n        }\n        // Bearing hole\n        cylinder(h = 10, r = 4, $fn = 32);\n    }\n}\n\n// Ring gear - internal teeth\nmodule ring_gear() {\n    color(\"bronze\") difference() {\n        union() {\n            // Outer ring body\n            cylinder(h = 10, r = 50, $fn = 128);\n            // Mounting flanges\n            for (i = [0:3]) {\n                rotate([0, 0, i * 90]) {\n                    translate([40, 0, 0]) {\n                        cube([20, 8, 10], center = true);\n                    }\n                }\n            }\n        }\n        // Central bore\n        cylinder(h = 12, r = 40, $fn = 128);\n        // Internal teeth\n        tooth_profile(40 - 3.5, -3.5, 3, 60);\n        // Mounting holes\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90 + 45]) {\n                translate([40, 0, 0]) {\n                    cylinder(h = 12, r = 3, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\n// Planet carrier - connects planet gears\nmodule planet_carrier() {\n    color(\"steel\") difference() {\n        union() {\n            // Main disk\n            cylinder(h = 5, r = 35, $fn = 64);\n            // Central hub\n            cylinder(h = 8, r = 8);\n            // Planet gear posts\n            for (i = [0:2]) {\n                rotate([0, 0, i * 120]) {\n                    translate([25, 0, 0]) {\n                        cylinder(h = 8, r = 6, $fn = 32);\n                    }\n                }\n            }\n            // Reinforcement ribs\n            for (i = [0:2]) {\n                rotate([0, 0, i * 120 + 60]) {\n                    translate([12.5, 0, 2.5]) {\n                        cube([25, 4, 5], center = true);\n                    }\n                }\n            }\n        }\n        // Central output shaft hole\n        cylinder(h = 10, r = 5, $fn = 32);\n        // Planet gear bearing holes\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120]) {\n                translate([25, 0, 0]) {\n                    cylinder(h = 10, r = 4.2, $fn = 32);\n                }\n            }\n        }\n    }\n}\n\n// Assembly - exploded view for printing\ntranslate([0, 0, 0]) ring_gear();\ntranslate([0, 0, 15]) planet_carrier();\ntranslate([0, 0, 30]) {\n    sun_gear();\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120 + 30]) {\n            translate([25, 0, 0]) planet_gear();\n        }\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "ringgear",
    "openscad_code": "// Ring Gear - Medium complexity realistic style\n// 3D printable ring gear with structural elements\n// Overall diameter: 100mm, thickness: 12mm\n\n// Parameters\n$fn = 100;\nmodule_height = 12;\nouter_diameter = 100;\ninner_diameter = 60;\ntooth_count = 24;\ntooth_height = 4;\ntooth_width = 6;\nmounting_holes = 6;\nmounting_hole_diameter = 4.5;\nmounting_hole_circle_diameter = 70;\nweb_thickness = 3;\nlightening_holes = 4;\n\n// Main ring gear body\nmodule ring_gear_body() {\n    difference() {\n        // Outer ring with gear teeth\n        union() {\n            // Base ring\n            cylinder(h=module_height, d=outer_diameter, center=true);\n            \n            // Gear teeth\n            for(i = [0 : tooth_count-1]) {\n                rotate([0, 0, i * 360/tooth_count])\n                    translate([outer_diameter/2 - tooth_height/2, 0, 0])\n                        cube([tooth_height, tooth_width, module_height], center=true);\n            }\n        }\n        \n        // Center hole\n        cylinder(h=module_height+2, d=inner_diameter, center=true);\n        \n        // Mounting holes\n        for(i = [0 : mounting_holes-1]) {\n            rotate([0, 0, i * 360/mounting_holes])\n                translate([mounting_hole_circle_diameter/2, 0, 0])\n                    cylinder(h=module_height+2, d=mounting_hole_diameter, center=true);\n        }\n        \n        // Lightening holes for weight reduction\n        for(i = [0 : lightening_holes-1]) {\n            rotate([0, 0, i * 360/lightening_holes + 45])\n                translate([(inner_diameter + mounting_hole_circle_diameter)/4, 0, 0])\n                    cylinder(h=module_height+2, d=12, center=true);\n        }\n    }\n}\n\n// Structural web between inner and outer ring\nmodule structural_web() {\n    difference() {\n        // Main web structure\n        cylinder(h=web_thickness, d=(outer_diameter + inner_diameter)/2, center=true);\n        \n        // Center hole\n        cylinder(h=web_thickness+2, d=inner_diameter + 5, center=true);\n    }\n}\n\n// Chamfer edges\nmodule chamfer_edges() {\n    difference() {\n        ring_gear_body();\n        \n        // Top chamfer\n        translate([0, 0, module_height/2 - 1])\n            cylinder(h=2, d1=outer_diameter - 2, d2=outer_diameter, center=true);\n        \n        // Bottom chamfer\n        translate([0, 0, -module_height/2 + 1])\n            cylinder(h=2, d1=outer_diameter, d2=outer_diameter - 2, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main gear body with chamfers\n    chamfer_edges();\n    \n    // Structural web\n    translate([0, 0, 0])\n        structural_web();\n}",
    "renders": true
  },
  {
    "mechanical_component": "differential",
    "openscad_code": "// Differential Gear Assembly - Medium Complexity\n// Overall size: ~100mm wide x ~80mm deep x ~80mm tall\n\n$fn=32;\n\n// Main module\nmodule differential_assembly() {\n    // Main housing - cylindrical shell\n    difference() {\n        cylinder(h=40, d=60);\n        translate([0,0,-1])\n            cylinder(h=42, d=56);\n    }\n    \n    // Side bearing housings\n    rotate([90,0,0])\n        translate([0,0,30])\n        side_bearings();\n    \n    // Input pinion and flange\n    translate([0,0,40])\n    rotate([90,0,0])\n        input_flange();\n    \n    // Output axles\n    translate([0,0,20])\n    rotate([90,0,0])\n        output_axles();\n    \n    // Internal spider gears\n    translate([0,0,20])\n        spider_gears();\n    \n    // Mounting flanges\n    mounting_flanges();\n}\n\nmodule side_bearings() {\n    for(i=[-1,1]) {\n        translate([i*35,0,0]) {\n            cylinder(h=20, d=25);\n            translate([0,0,-5])\n                cylinder(h=5, d=30);\n        }\n    }\n}\n\nmodule input_flange() {\n    difference() {\n        cylinder(h=15, d=30);\n        translate([0,0,-1])\n            cylinder(h=17, d=20);\n    }\n    \n    // Flange bolt holes\n    for(i=[0:5]) {\n        rotate([0,0,i*60])\n            translate([12,0,7.5])\n                rotate([0,90,0])\n                    cylinder(h=20, d=3);\n    }\n    \n    // Splined input shaft\n    translate([0,0,15])\n        cylinder(h=20, d=15);\n}\n\nmodule output_axles() {\n    for(i=[-1,1]) {\n        translate([i*25,0,0]) {\n            // Axle shaft\n            cylinder(h=30, d=12);\n            \n            // Axle flange\n            translate([i*15,0,0])\n                rotate([0,90,0])\n                    cylinder(h=20, d=20);\n        }\n    }\n}\n\nmodule spider_gears() {\n    // Central spider\n    difference() {\n        cube([40,40,15], center=true);\n        cube([36,36,17], center=true);\n    }\n    \n    // Side gears\n    rotate([0,90,0])\n        for(i=[-1,1]) {\n            translate([i*20,0,0]) {\n                difference() {\n                    cylinder(h=15, d=20);\n                    cylinder(h=15, d=16);\n                }\n                \n                // Gear teeth (simplified)\n                for(j=[0:7]) {\n                    rotate([0,0,j*45])\n                        translate([10,0,7.5])\n                            cube([4,2,15], center=true);\n                }\n            }\n        }\n    \n    // Pinion gears\n    for(i=[0:3]) {\n        rotate([0,0,i*90])\n            translate([0,20,7.5]) {\n                difference() {\n                    cylinder(h=15, d=12);\n                    cylinder(h=15, d=8);\n                }\n                \n                // Pinion teeth\n                for(j=[0:5]) {\n                    rotate([0,0,j*60])\n                        translate([6,0,7.5])\n                            cube([3,1.5,15], center=true);\n                }\n            }\n    }\n}\n\nmodule mounting_flanges() {\n    // Bottom mounting\n    translate([0,0,-5])\n        difference() {\n            cube([80,60,10], center=true);\n            cube([76,56,12], center=true);\n        }\n    \n    // Mounting holes\n    for(x=[-30,30]) {\n        for(y=[-20,20]) {\n            translate([x,y,-1])\n                cylinder(h=12, d=6);\n        }\n    }\n}\n\n// Render the assembly\ndifferential_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "transmission",
    "openscad_code": "// Transmission model - 5-speed manual gearbox\n// Overall dimensions: ~100mm x 80mm x 80mm\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main parameters\ntrans_length = 100;\ntrans_width = 80;\ntrans_height = 80;\nwall_thickness = 2;\n\n// Bell housing\nmodule bell_housing() {\n    difference() {\n        // Main bell shape\n        cylinder(h = 30, r1 = 40, r2 = 35);\n        \n        // Input shaft hole\n        translate([0, 0, -1])\n            cylinder(h = 32, r = 8);\n    }\n}\n\n// Main transmission case\nmodule transmission_case() {\n    difference() {\n        // Main body\n        hull() {\n            // Front section\n            translate([0, 0, 15])\n                cube([trans_length, trans_width, trans_height - 30], center = true);\n                \n            // Rear section\n            translate([-trans_length/2 + 20, 0, 0])\n                cube([40, trans_width - 20, trans_height - 10], center = true);\n        }\n        \n        // Internal cavity\n        translate([0, 0, 5])\n            cube([trans_length - wall_thickness*2, trans_width - wall_thickness*2, trans_height - wall_thickness*2 - 10], center = true);\n            \n        // Shift linkage holes (top)\n        for (i = [0:4]) {\n            translate([-35 + i * 15, 0, trans_height/2 - 2])\n                cylinder(h = 5, r = 4);\n        }\n    }\n}\n\n// Mounting flanges\nmodule mounting_flanges() {\n    // Front mounts\n    for (pos = [[-trans_length/2 + 10, trans_width/2 - 10, 0], \n               [-trans_length/2 + 10, -trans_width/2 + 10, 0]]) {\n        translate(pos)\n            rotate([90, 0, 0])\n                cylinder(h = 15, r = 5);\n    }\n    \n    // Rear mounts\n    for (pos = [[trans_length/2 - 30, trans_width/2 - 10, 0], \n               [trans_length/2 - 30, -trans_width/2 + 10, 0]]) {\n        translate(pos)\n            rotate([90, 0, 0])\n                cylinder(h = 15, r = 5);\n    }\n}\n\n// Output shaft\nmodule output_shaft() {\n    translate([trans_length/2 - 10, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 30, r = 8);\n}\n\n// Shift tower\nmodule shift_tower() {\n    translate([0, 0, trans_height/2])\n    union() {\n        // Base\n        cube([50, 20, 15], center = true);\n        \n        // Shift lever\n        translate([0, 10, 7.5])\n            rotate([0, 45, 0])\n                cylinder(h = 25, r = 3);\n    }\n}\n\n// Cooling fins\nmodule cooling_fins() {\n    for (i = [-1:1]) {\n        translate([i * 20, 0, -trans_height/2 + 10])\n            cube([15, trans_width + 10, 2]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main transmission\n    translate([0, 0, 0])\n        transmission_case();\n    \n    // Bell housing\n    translate([-trans_length/2, 0, 0])\n        bell_housing();\n    \n    // Mounting flanges\n    mounting_flanges();\n    \n    // Output shaft\n    output_shaft();\n    \n    // Shift tower\n    shift_tower();\n    \n    // Cooling fins on bottom\n    cooling_fins();\n}",
    "renders": true
  },
  {
    "mechanical_component": "clutch",
    "openscad_code": "// OpenSCAD Clutch – medium-complexity realistic style\n// Overall diameter ≈ 100 mm, thickness ≈ 30 mm\n$fa = 2; $fs = 0.5; // nice curved surfaces\n\n// wall thickness\nwall = 2;\n\n// outer clutch drum\nmodule drum() {\n    difference() {\n        cylinder(h = 30, d = 100, center = true);      // main drum body\n        cylinder(h = 31, d = 96 - 2*wall, center = true); // hollow\n    }\n}\n\n// mounting hub (center splined part)\nmodule hub() {\n    difference() {\n        cylinder(h = 32, d = 30, center = true);       // hub core\n        cylinder(h = 33, d = 18, center = true);       // shaft bore\n    }\n    for(i = [0:5:355])                               // 72 splines\n        rotate([0, 0, i])\n            translate([0, 12, 0])\n                cube([1.5, 3, 34], center = true);\n}\n\n// friction plate with 8 spring windows\nmodule friction_plate() {\n    difference() {\n        cylinder(h = 3, d = 90, center = true);\n        cylinder(h = 4, d = 50, center = true);       // inner hole\n        for(a = [0:45:315])                          // 8 windows\n            rotate([0, 0, a])\n                translate([35, 0, 0])\n                    cube([10, 6, 5], center = true);\n    }\n}\n\n// pressure plate with 8 spring posts\nmodule pressure_plate() {\n    difference() {\n        cylinder(h = 5, d = 90, center = true);\n        cylinder(h = 6, d = 50, center = true);       // inner hole\n    }\n    for(a = [0:45:315]) {\n        rotate([0, 0, a])\n            translate([35, 0, 0])\n                cylinder(h = 7, d = 6, center = true); // posts\n    }\n}\n\n// 3 coil springs\nmodule springs() {\n    for(a = [0:120:240]) {\n        rotate([0, 0, a])\n            translate([35, 0, 0])\n                difference() {\n                    cylinder(h = 18, d = 8, center = true);    // spring body\n                    cylinder(h = 19, d = 6, center = true);    // hollow\n                }\n    }\n}\n\n// assembly\nunion() {\n    drum();\n    hub();\n    translate([0, 0, 10]) friction_plate();\n    translate([0, 0, 14]) friction_plate();\n    translate([0, 0, 18]) pressure_plate();\n    translate([0, 0, 8]) springs();\n}",
    "renders": true
  },
  {
    "mechanical_component": "torqueconverter",
    "openscad_code": "// Torque Converter - Realistic Style, Medium Complexity\n// Overall size: 120mm diameter, 70mm thickness\n\n$fn = 36;\nwall_thickness = 2;\nmain_diameter = 120;\nmain_height = 70;\nhub_diameter = 25;\n\nmodule impeller_blade(index, count) {\n    angle = index * 360 / count;\n    rotate([0, 0, angle])\n        translate([main_diameter/2 - 20, 0, main_height/2 - 5])\n            rotate([0, 90, 0])\n                difference() {\n                    cube([18, 4, 25], center=true);\n                    translate([0, 0, -12.5])\n                        cube([16, 3.5, 24], center=true);\n                }\n}\n\nmodule turbine_blade(index, count) {\n    angle = index * 360 / count;\n    rotate([0, 0, angle])\n        translate([main_diameter/2 - 20, 0, main_height/2 - 35])\n            rotate([0, 90, 0])\n                difference() {\n                    cube([18, 4, 25], center=true);\n                    translate([0, 0, -12.5])\n                        cube([16, 3.5, 24], center=true);\n                }\n}\n\nmodule stator_blade(index, count) {\n    angle = index * 360 / count;\n    rotate([0, 0, angle])\n        translate([hub_diameter + 8, 0, main_height/2 - 15])\n            rotate([0, 90, 0])\n                difference() {\n                    cube([15, 3, 20], center=true);\n                    translate([0, 0, -10])\n                        cube([13, 2.5, 19], center=true);\n                }\n}\n\nmodule torque_converter() {\n    // Main housing shell\n    difference() {\n        cylinder(h=main_height, d=main_diameter, center=true);\n        cylinder(h=main_height + 2, d=main_diameter - 2*wall_thickness, center=true);\n    }\n    \n    // Front cover plate\n    translate([0, 0, main_height/2 - wall_thickness/2])\n        difference() {\n            cylinder(h=wall_thickness, d=main_diameter, center=true);\n            cylinder(h=wall_thickness + 1, d=hub_diameter + 10, center=true);\n        }\n    \n    // Rear cover plate\n    translate([0, 0, -main_height/2 + wall_thickness/2])\n        difference() {\n            cylinder(h=wall_thickness, d=main_diameter, center=true);\n            cylinder(h=wall_thickness + 1, d=hub_diameter + 10, center=true);\n        }\n    \n    // Central hub\n    difference() {\n        cylinder(h=main_height - 2*wall_thickness, d=hub_diameter, center=true);\n        cylinder(h=main_height - 2*wall_thickness + 2, d=hub_diameter - 2*wall_thickness, center=true);\n    }\n    \n    // Input shaft connection\n    translate([0, 0, main_height/2 + 5])\n        cylinder(h=15, d=hub_diameter - 5, center=true);\n    \n    // Output shaft connection\n    translate([0, 0, -main_height/2 - 5])\n        cylinder(h=15, d=hub_diameter - 5, center=true);\n    \n    // Impeller blades (16 total)\n    for(i=[0:15]) {\n        impeller_blade(i, 16);\n    }\n    \n    // Turbine blades (16 total)\n    for(i=[0:15]) {\n        turbine_blade(i, 16);\n    }\n    \n    // Stator assembly with blades\n    difference() {\n        cylinder(h=10, d=hub_diameter + 25, center=true);\n        cylinder(h=11, d=hub_diameter + 8, center=true);\n    }\n    \n    // Stator blades (8 total)\n    for(i=[0:7]) {\n        stator_blade(i, 8);\n    }\n    \n    // Mounting flange\n    translate([0, 0, -main_height/2 - 15])\n        difference() {\n            cylinder(h=10, d=main_diameter/1.5, center=true);\n            cylinder(h=11, d=hub_diameter + 15, center=true);\n            for(i=[0:5]) {\n                rotate([0, 0, i*60])\n                    translate([main_diameter/3, 0, 0])\n                        cylinder(h=11, d=5, center=true);\n            }\n        }\n    \n    // Structural ribs\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([main_diameter/2 - 10, 0, 0])\n                cube([20, 3, main_height - 4], center=true);\n    }\n}\n\n// Render the complete torque converter\ntorque_converter();",
    "renders": true
  },
  {
    "mechanical_component": "flywheel",
    "openscad_code": "// Realistic 3D printable flywheel – medium complexity\n$fn = 64; // smooth curves for 3D printing\n\n// Main dimensions -------------------------------------------------\ndiameter = 100;           // overall diameter 100 mm\nthickness = 18;           // overall thickness 18 mm\nshaft_d = 12;             // central shaft hole 12 mm\nspoke_count = 6;          // 6 spokes for balance\nrim_width = 10;           // rim width 10 mm\nkey_width = 4;            // keyway width 4 mm (standard for 12 mm shaft)\n\n// Derived values --------------------------------------------------\nrim_outer_r = diameter/2;\nrim_inner_r = rim_outer_r - rim_width;\nspoke_r = 4;              // spoke radius 4 mm → wall thickness 8 mm\nhub_r = shaft_d + 6;      // hub outer radius\nhub_h = thickness - 4;    // hub height fits inside rim\nkey_depth = 2;            // keyway depth\n\n// Build the flywheel ----------------------------------------------\nmodule flywheel() {\n    difference() {\n        union() {\n            // outer rim\n            cylinder(h = thickness, r = rim_outer_r, center = true);\n\n            // inner rim cut (create hollow rim)\n            difference() {\n                cylinder(h = thickness + 0.2, r = rim_inner_r, center = true);\n            }\n\n            // hub\n            translate([0, 0, 0])\n                cylinder(h = hub_h, r = hub_r, center = true);\n\n            // spokes\n            for(i = [0 : spoke_count-1]) {\n                rotate([0, 0, i * 360/spoke_count])\n                    translate([rim_inner_r - spoke_r, 0, 0])\n                        rotate([0, 90, 0])\n                            cylinder(h = rim_inner_r - hub_r - 2*spoke_r,\n                                     r = spoke_r,\n                                     center = true);\n            }\n\n            // balancing cut-outs between spokes (weight reduction)\n            for(i = [0 : spoke_count-1]) {\n                rotate([0, 0, i * 360/spoke_count + 360/spoke_count/2])\n                    translate([rim_inner_r + rim_width/2, 0, 0])\n                        cube([rim_width*0.7, rim_width*0.7, thickness*0.8], center = true);\n            }\n        }\n\n        // center shaft hole\n        cylinder(h = thickness + 1, r = shaft_d/2, center = true);\n\n        // keyway slot\n        translate([shaft_d/2 - key_depth/2, 0, 0])\n            cube([key_depth, key_width, thickness + 1], center = true);\n    }\n}\n\n// Optional simple stand for printing stability\nmodule stand() {\n    difference() {\n        cylinder(h = 4, r = rim_outer_r + 2, center = true);\n        cylinder(h = 5, r = rim_outer_r - 2, center = true);\n    }\n}\n\n// Render ----------------------------------------------------------\ntranslate([0, 0, 0]) flywheel();\n// Uncomment to add printing stand\n// translate([0, 0, -thickness/2 - 2]) stand();",
    "renders": true
  },
  {
    "mechanical_component": "driveshaft",
    "openscad_code": "// Realistic medium-complexity driveshaft mechanical component\n// Overall length ~120 mm, printable without supports\n\n$fn = 32;          // Smooth curves\nwall = 2;          // 3D-printable wall thickness\n\nmodule tube_segment(len, od, id) {\n    difference() {\n        cylinder(h = len, d = od, center = true);\n        cylinder(h = len + 0.2, d = id, center = true);\n    }\n}\n\nmodule universal_joint() {\n    // Fork yoke\n    difference() {\n        cube([18, 18, 10], center = true);\n        cube([20, 2.5, 12], center = true);\n    }\n    \n    // Bearing cap\n    translate([0, 0, 6])\n        difference() {\n            cylinder(h = 4, d = 14);\n            cylinder(h = 5, d = 8);\n        }\n    \n    // Cross-pin\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 20, d = 4, center = true);\n}\n\nmodule spline_stub(len) {\n    // Splined shaft\n    for(i = [0 : 15]) {\n        rotate([0, 0, i * 22.5])\n            translate([6.5, 0, 0])\n                cube([1.5, 3, len], center = true);\n    }\n    // Core shaft\n    cylinder(h = len, d = 8, center = true);\n    \n    // Retaining ring groove\n    translate([0, 0, len/2 - 3])\n        cylinder(h = 2, d = 9, $fn = 6);\n}\n\nmodule driveshaft() {\n    // Main tube\n    tube_segment(80, 18, 18 - 2*wall);\n    \n    // Front universal joint\n    translate([0, 0, 45])\n        rotate([0, 90, 0])\n            universal_joint();\n    \n    // Rear universal joint\n    translate([0, 0, -45])\n        rotate([0, -90, 0])\n            universal_joint();\n    \n    // Front spline stub (slides into transmission)\n    translate([0, 0, 55])\n        spline_stub(15);\n    \n    // Rear flange yoke\n    translate([0, 0, -55])\n        difference() {\n            cylinder(h = 8, d = 28);\n            for(a = [0 : 60 : 359])\n                rotate([0, 0, a])\n                    translate([11, 0, -1])\n                        cylinder(h = 10, d = 5.5);\n        }\n    \n    // Balance weights\n    translate([0, 12, 0])\n        cube([10, 4, 4], center = true);\n    translate([0, -12, 0])\n        cube([10, 4, 4], center = true);\n}\n\n// Render the driveshaft\ndriveshaft();",
    "renders": true
  },
  {
    "mechanical_component": "axle",
    "openscad_code": "// Realistic Medium-Complexity Drive Axle for 3D Printing\n// Overall length ≈ 110 mm, diameter ≈ 14 mm at splines\n\n$fn = 50;           // Smooth curves for printing\nwall = 2;           // 2 mm wall thickness everywhere\n\n// Main module\nmodule axle() {\n    // Central shaft (solid for strength)\n    color(\"silver\")\n    cylinder(h = 85, d = 10, center = true);\n\n    // Left spline end\n    translate([-42.5, 0, 0])\n    splined_end();\n\n    // Right threaded end\n    translate([42.5, 0, 0])\n    threaded_end();\n\n    // Bearing seats\n    translate([-25, 0, 0])\n    bearing_seat();\n    translate([25, 0, 0])\n    bearing_seat();\n\n    // Keyway along shaft\n    keyway();\n}\n\nmodule splined_end() {\n    // Main splined shaft\n    cylinder(h = 12, d = 14);\n    \n    // Splines (24 teeth, 2 mm high)\n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n        translate([7, 0, 0])\n        cube([2, 2.1, 12], center = true);\n    }\n\n    // Chamfer on outer edge for ease of assembly\n    difference() {\n        cylinder(h = 2, d1 = 14, d2 = 10);\n        translate([0, 0, -0.1])\n        cylinder(h = 2.2, d1 = 10, d2 = 6);\n    }\n}\n\nmodule threaded_end() {\n    // Threaded section\n    cylinder(h = 10, d = 8);\n\n    // Simplified threads (M8x1.25) – printed as 45° ridges\n    for(z = [0:1.25:10]) {\n        translate([0, 0, z])\n        rotate([0, 0, z * 30])\n        difference() {\n            cylinder(h = 0.8, d = 9.5);\n            cylinder(h = 0.8, d = 7);\n        }\n    }\n\n    // Lock-nut stop collar\n    translate([0, 0, 10.5])\n    cylinder(h = 3, d = 12);\n}\n\nmodule bearing_seat() {\n    // Raised ring for 608 bearing (22 mm OD, 7 mm thick)\n    cylinder(h = 7, d = 22);\n    // Center hole matches shaft diameter\n    translate([0, 0, -0.1])\n    cylinder(h = 7.2, d = 10.2);\n}\n\nmodule keyway() {\n    // Rectangular keyway 3 mm wide × 2 mm deep\n    rotate([0, 90, 0])\n    translate([-1.5, 0, -42.5])\n    cube([3, 2, 85]);\n}\n\n// Render the axle centered\naxle();",
    "renders": true
  },
  {
    "mechanical_component": "diffcase",
    "openscad_code": "// OpenSCAD diffcase (differential gearbox housing) – realistic style, medium complexity\n// Overall footprint ~80 × 80 × 65 mm, wall-thickness 2 mm, printable without supports\n\n// ---- parameters ----------------------------------------------------------\n$fn = 64;               // smoother curves\nwall = 2;               // wall thickness\nbody_d = 78;            // main diameter\nbody_h = 40;            // main height\nflange_h = 8;           // mounting-flange height\nflange_d = 92;          // flange diameter\nboss_d = 22; boss_h = 10;  // output-shaft bosses\nbolt_d = 6;             // M5 clearance holes\nbolt_pcd = 76;          // bolt circle diameter\nbolt_n = 6;             // number of bolts\nvent_d = 6; vent_h = 8; // breather vent\nrib_w = 3; rib_h = 4;   // structural ribs\n// --------------------------------------------------------------------------\n\n// ---- utilities ----------------------------------------------------------\nmodule bolt_hole(d = bolt_d, h = flange_h + 2) {\n    cylinder(d = d, h = h, center = true);\n}\n\nmodule hex_boss(d = 12, h = 6) {\n    // simple hexagon via cylinder\n    cylinder(d = d, h = h, $fn = 6, center = true);\n}\n\n// ---- main body ----------------------------------------------------------\nmodule main_shell() {\n    difference() {\n        // outer shell\n        cylinder(d = body_d, h = body_h);\n        // inner cavity\n        translate([0, 0, -0.5])\n            cylinder(d = body_d - 2*wall, h = body_h + 1);\n    }\n}\n\n// ---- mounting flange ----------------------------------------------------\nmodule flange() {\n    difference() {\n        // outer flange\n        union() {\n            cylinder(d = flange_d, h = flange_h);\n            // ribs for stiffness\n            for (a = [0 : 60 : 300]) {\n                rotate([0, 0, a])\n                    translate([body_d/2 - rib_w/2, 0, 0])\n                        cube([rib_w, body_d/2, rib_h]);\n            }\n        }\n        // bolt holes\n        for (a = [0 : 360/bolt_n : 360-360/bolt_n]) {\n            rotate([0, 0, a])\n                translate([bolt_pcd/2, 0, 0])\n                    bolt_hole();\n        }\n        // central recess\n        cylinder(d = body_d - 2*wall, h = flange_h + 1);\n    }\n}\n\n// ---- output shaft bosses -------------------------------------------------\nmodule shaft_bosses() {\n    // front boss\n    translate([0, 0, body_h])\n        difference() {\n            cylinder(d = boss_d, h = boss_h);\n            cylinder(d = boss_d - 2*wall, h = boss_h + 1);\n        }\n    // rear boss (mirror)\n    mirror([0, 0, 1])\n        translate([0, 0, body_h])\n            difference() {\n                cylinder(d = boss_d, h = boss_h);\n                cylinder(d = boss_d - 2*wall, h = boss_h + 1);\n            }\n}\n\n// ---- breather vent -------------------------------------------------------\nmodule breather_vent() {\n    translate([body_d/2 - vent_d, 0, body_h/2 + vent_h/2])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(d = vent_d, h = vent_h);\n                cylinder(d = vent_d - 2*wall, h = vent_h + 1);\n            }\n}\n\n// ---- assembly ------------------------------------------------------------\nunion() {\n    // stack flange + shell\n    translate([0, 0, 0]) flange();\n    translate([0, 0, flange_h]) main_shell();\n    shaft_bosses();\n    breather_vent();\n}",
    "renders": true
  },
  {
    "mechanical_component": "idler",
    "openscad_code": "// Realistic Idler Pulley Assembly\n// Optimized for 3D printing - 80mm diameter\n\n$fn = 48;  // Smooth curves\nwall = 2;  // 2mm wall thickness for printing\n\nmodule idler_pulley() {\n    // Main pulley rim - 80mm OD, 74mm ID\n    difference() {\n        cylinder(h=16, r=40);\n        translate([0,0,-1]) cylinder(h=18, r=37);\n    }\n    \n    // Center web with lightening holes\n    translate([0,0,8]) difference() {\n        cylinder(h=8, r=37);\n        // 6 lightening holes 20mm diameter\n        for(i=[0:5]) {\n            rotate([0,0,i*60]) translate([25,0,4]) cylinder(h=10, r=4);\n        }\n    }\n    \n    // Hub - 22mm OD, 8mm ID bearing bore\n    translate([0,0,0]) difference() {\n        // Main hub body\n        cylinder(h=16, r=11);\n        // Bearing bore\n        cylinder(h=18, r=4);\n    }\n    \n    // Bearing seats\n    translate([0,0,4]) difference() {\n        cylinder(h=2, r=7.5);\n        cylinder(h=3, r=4);\n    }\n    translate([0,0,10]) difference() {\n        cylinder(h=2, r=7.5);\n        cylinder(h=3, r=4);\n    }\n    \n    // Web reinforcement ribs\n    for(i=[0:5]) {\n        rotate([0,0,i*60]) translate([0,0,8]) cube([40,4,8], center=true);\n    }\n}\n\nmodule mounting_bracket() {\n    // Main bracket plate\n    translate([-50,0,0]) cube([100,20,6]);\n    \n    // Gussets\n    translate([-45,10,3]) rotate([0,45,0]) cube([15,2,15]);\n    translate([-45,-10,3]) rotate([0,-45,0]) cube([15,2,15]);\n    translate([30,10,3]) rotate([0,45,0]) cube([15,2,15]);\n    translate([30,-10,3]) rotate([0,-45,0]) cube([15,2,15]);\n    \n    // Mounting holes - M5 size\n    translate([-40,0,-1]) cylinder(h=8, r=2.75);\n    translate([40,0,-1]) cylinder(h=8, r=2.75);\n    \n    // Slot for belt clearance\n    translate([0,0,6]) cube([80,20,4]);\n}\n\n// Assembly\nidler_pulley();\ntranslate([0,0,25]) mounting_bracket();",
    "renders": true
  },
  {
    "mechanical_component": "layshaft",
    "openscad_code": "// Layshaft for a manual transmission – medium complexity, 3-D-printable, 100 mm long\n// ------------------------------------------------------------------------------\n// All dimensions in mm, wall thickness ≥2 mm, no large overhangs.\n\n$fn = 32;            // good looking curves without huge poly-count\nshaft_d  = 12;       // main shaft diameter\nshaft_l  = 100;      // overall shaft length\nbearing_d= 22;       // bearing shoulder diameter\nbearing_w= 10;       // bearing seat width\ngear_d   = 30;       // layshaft gear outer diameter\ngear_w   = 12;       // gear width\nkey_w    = 4;        // keyway width\nkey_d    = 2;        // keyway depth\nsnap_r   = 1.5;      // snap-ring groove radius\nsnap_d   = 14;       // snap-ring groove diameter\nsnap_w   = 1.5;      // snap-ring groove width\nspoke_n  = 6;        // spokes inside gear web\nweb_thk  = 4;        // web thickness\n\n// Half shaft (symmetry to avoid overhangs)\nmodule half_shaft() {\n    // main rod\n    cylinder(h = shaft_l/2, d = shaft_d);\n\n    // bearing seats (left & right)\n    translate([0,0, shaft_l/2 - bearing_w])\n        cylinder(h = bearing_w, d = bearing_d);\n\n    // snap-ring grooves\n    for(z=[shaft_l/2 - bearing_w - snap_w - 1, 1])\n        translate([0,0,z])\n            rotate_extrude()\n                polygon([[bearing_d/2 - snap_r,0],\n                         [bearing_d/2,0],\n                         [bearing_d/2, snap_w],\n                         [bearing_d/2 - snap_r, snap_w]]);\n}\n\n// Keyway along the shaft (remove material)\nmodule keyway(len) {\n    translate([0,0,-0.1])\n        cube([key_w, key_d+0.2, len+0.2], center=true);\n}\n\n// Gear blank\nmodule gear() {\n    difference() {\n        // outer rim\n        cylinder(h = gear_w, d = gear_d);\n        // bore\n        translate([0,0,-1])\n            cylinder(h = gear_w+2, d = shaft_d);\n    }\n}\n\n// Spoked web inside gear for realism & printability\nmodule web() {\n    difference() {\n        cylinder(h = web_thk, d = gear_d - 8);\n        cylinder(h = web_thk+2, d = shaft_d);\n    }\n    for(i=[0:spoke_n-1])\n        rotate([0,0,i*360/spoke_n])\n            translate([(gear_d - 8)/4,0,0])\n                cube([gear_d/2 - 4, 4, web_thk], center=true);\n}\n\n// Assemble one gear assembly\nmodule gear_assembly() {\n    translate([0,0, shaft_l/2 - gear_w/2 - bearing_w - 5])\n        union() {\n            gear();\n            web();\n        }\n}\n\n// Final layshaft\nunion() {\n    // shaft left half\n    difference() {\n        half_shaft();\n        keyway(shaft_l/2);\n    }\n    // shaft right half (mirrored)\n    mirror([0,0,1])\n        difference() {\n            half_shaft();\n            keyway(shaft_l/2);\n        }\n    // gear\n    gear_assembly();\n}",
    "renders": true
  },
  {
    "mechanical_component": "countershaft",
    "openscad_code": "// Countershaft mechanical component - OpenSCAD code\n// Medium complexity realistic style\n\n// Main parameters\nshaft_length = 80;\nshaft_diameter = 12;\nbearing_diameter = 20;\nbearing_length = 12;\npulley_diameter = 40;\npulley_width = 25;\nkey_width = 4;\nkey_height = 2;\nwall_thickness = 2;\n\n// Main shaft module\nmodule main_shaft() {\n    // Main cylindrical shaft\n    cylinder(h=shaft_length, d=shaft_diameter, center=true);\n    \n    // Keyway along shaft\n    translate([0, -shaft_diameter/2 - key_height/2, 0])\n        cube([shaft_length, key_height, key_width], center=true);\n}\n\n// Bearing module\nmodule bearing(position) {\n    translate([0, 0, position]) {\n        // Outer race\n        difference() {\n            cylinder(h=bearing_length, d=bearing_diameter, center=true);\n            cylinder(h=bearing_length + 0.1, d=bearing_diameter - wall_thickness*2, center=true);\n        }\n        \n        // Inner race\n        difference() {\n            cylinder(h=bearing_length + 0.1, d=shaft_diameter + wall_thickness, center=true);\n            cylinder(h=bearing_length + 0.2, d=shaft_diameter, center=true);\n        }\n        \n        // Bearing balls (simplified)\n        for(i=[0:7]) {\n            rotate([0, 0, i*45])\n                translate([bearing_diameter/2 - wall_thickness/2, 0, 0])\n                    sphere(d=wall_thickness, center=true);\n        }\n    }\n}\n\n// Pulley module\nmodule pulley(position) {\n    translate([0, 0, position]) {\n        difference() {\n            // Main pulley body\n            cylinder(h=pulley_width, d=pulley_diameter, center=true);\n            \n            // Center bore\n            cylinder(h=pulley_width + 0.2, d=shaft_diameter, center=true);\n        }\n        \n        // Pulley keyway\n        translate([0, -pulley_diameter/2 - key_height/2, 0])\n            cube([pulley_width + 0.2, key_height, key_width], center=true);\n        \n        // Belt groove (V-belt style)\n        difference() {\n            cylinder(h=pulley_width - 4, d=pulley_diameter - 4, center=true);\n            cylinder(h=pulley_width - 4 + 0.2, d=pulley_diameter - 14, center=true);\n        }\n    }\n}\n\n// Support bracket module\nmodule support_bracket(position) {\n    translate([0, 0, position]) {\n        // Base plate\n        cube([50, 8, 30], center=true);\n        \n        // Upright supports\n        for(side=[-1, 1]) {\n            translate([side*15, 0, 0])\n                cube([8, 8, 20], center=true);\n        }\n        \n        // Bearing housing\n        translate([0, 0, 12])\n            difference() {\n                cylinder(h=16, d=bearing_diameter + 8, center=true);\n                cylinder(h=16 + 0.2, d=bearing_diameter, center=true);\n            }\n        \n        // Mounting holes\n        for(side=[-1, 1]) {\n            translate([side*20, 0, -8])\n                rotate([90, 0, 0])\n                    cylinder(h=10, d=4, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main shaft\n    main_shaft();\n    \n    // Bearings\n    bearing(-shaft_length/2 + bearing_length/2 + 5);\n    bearing(shaft_length/2 - bearing_length/2 - 5);\n    \n    // Pulley\n    pulley(0);\n    \n    // Support brackets\n    support_bracket(-shaft_length/2 - 15);\n    support_bracket(shaft_length/2 + 15);\n}\n\n// Small chamfers for printability\nmodule chamfer() {\n    translate([0, 0, -shaft_length/2 - 2])\n        cylinder(h=2, d1=shaft_diameter, d2=shaft_diameter - 1, center=false);\n    translate([0, 0, shaft_length/2 + 2])\n        rotate([180, 0, 0])\n            cylinder(h=2, d1=shaft_diameter, d2=shaft_diameter - 1, center=false);\n}\n\nchamfer();",
    "renders": true
  },
  {
    "mechanical_component": "mainshaft",
    "openscad_code": "// Mainshaft mechanical component\n// Realistic medium-complexity model\n\n$fn = 50;\n\n// Main parameters\nshaft_length = 100;\nshaft_diameter = 12;\nbearing_seat_length = 8;\nbearing_seat_diameter = 15;\nkeyway_width = 4;\nkeyway_depth = 2;\nthread_diameter = 10;\nthread_length = 15;\ngear_seat_length = 12;\ngear_seat_diameter = 18;\nflange_diameter = 25;\nflange_thickness = 4;\nchamfer = 1;\n\n// Main shaft body\nmodule main_shaft() {\n    // Central shaft\n    cylinder(h=shaft_length, d=shaft_diameter, center=true);\n    \n    // Left bearing seat\n    translate([-shaft_length/2 + bearing_seat_length/2, 0, 0])\n        cylinder(h=bearing_seat_length, d=bearing_seat_diameter, center=true);\n    \n    // Right bearing seat\n    translate([shaft_length/2 - bearing_seat_length/2, 0, 0])\n        cylinder(h=bearing_seat_length, d=bearing_seat_diameter, center=true);\n    \n    // Gear seat in center\n    translate([0, 0, 0])\n        cylinder(h=gear_seat_length, d=gear_seat_diameter, center=true);\n}\n\n// Keyway cutting tool\nmodule keyway_cut(length) {\n    translate([0, -shaft_diameter/2, -length/2])\n        cube([keyway_width, keyway_depth, length], center=true);\n}\n\n// Threaded end\nmodule threaded_end() {\n    // Threaded section\n    translate([shaft_length/2 + thread_length/2, 0, 0])\n        cylinder(h=thread_length, d=thread_diameter, center=true);\n    \n    // End chamfer\n    translate([shaft_length/2 + thread_length, 0, 0])\n        cylinder(h=chamfer*2, d1=thread_diameter, d2=thread_diameter-chamfer, center=true);\n}\n\n// Flange end\nmodule flanged_end() {\n    // Flange\n    translate([-shaft_length/2 - flange_thickness/2, 0, 0])\n        cylinder(h=flange_thickness, d=flange_diameter, center=true);\n    \n    // Bolt holes\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([-shaft_length/2 - flange_thickness/2, flange_diameter/2 - 6, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=flange_thickness+1, d=3, center=true);\n    }\n    \n    // Center hole\n    translate([-shaft_length/2 - flange_thickness - 1, 0, 0])\n        cylinder(h=flange_thickness+2, d=shaft_diameter/2, center=true);\n}\n\n// Create keyways\nmodule keyways() {\n    // Left keyway (bearing seat)\n    translate([-shaft_length/2 + bearing_seat_length/2, 0, 0])\n        rotate([0, 90, 0])\n            keyway_cut(bearing_seat_length);\n    \n    // Center keyway (gear seat)\n    translate([0, 0, 0])\n        rotate([0, 90, 0])\n            keyway_cut(gear_seat_length);\n    \n    // Threaded end keyway\n    translate([shaft_length/2 + thread_length/2, 0, 0])\n        rotate([0, 90, 0])\n            keyway_cut(thread_length);\n}\n\n// Chamfers\nmodule chamfers() {\n    // Left shaft end chamfer\n    translate([-shaft_length/2, 0, 0])\n        cylinder(h=chamfer*2, d1=shaft_diameter-chamfer, d2=shaft_diameter, center=true);\n    \n    // Right shaft end chamfer\n    translate([shaft_length/2, 0, 0])\n        cylinder(h=chamfer*2, d1=shaft_diameter-chamfer, d2=shaft_diameter, center=true);\n    \n    // Bearing seat chamfers\n    translate([-shaft_length/2 + bearing_seat_length/2, 0, 0])\n        cylinder(h=chamfer, d1=bearing_seat_diameter, d2=bearing_seat_diameter-chamfer, center=true);\n    \n    translate([shaft_length/2 - bearing_seat_length/2, 0, 0])\n        cylinder(h=chamfer, d1=bearing_seat_diameter, d2=bearing_seat_diameter-chamfer, center=true);\n}\n\n// Main assembly\nunion() {\n    // Main shaft with features\n    difference() {\n        union() {\n            main_shaft();\n            threaded_end();\n            flanged_end();\n            chamfers();\n        }\n        keyways();\n    }\n    \n    // Small grease grooves on bearing seats\n    for(i = [0:2]) {\n        translate([-shaft_length/2 + bearing_seat_length/2, 0, 0])\n            rotate([0, 0, i*120])\n                translate([0, bearing_seat_diameter/2 - 1, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=bearing_seat_length, d=1, center=true);\n    }\n    \n    for(i = [0:2]) {\n        translate([shaft_length/2 - bearing_seat_length/2, 0, 0])\n            rotate([0, 0, i*120 + 60])\n                translate([0, bearing_seat_diameter/2 - 1, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=bearing_seat_length, d=1, center=true);\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "outputshaft",
    "openscad_code": "// Realistic Output Shaft - Medium Complexity (3D Printable)\n// Overall length: 120mm, max diameter: 30mm\n\n// Main shaft parameters\nshaft_length = 120;\nshaft_diameter = 20;\nwall_thickness = 2;\n\n// Keyway parameters\nkeyway_width = 6;\nkeyway_depth = 3;\nkeyway_length = 25;\n\n// Splined section parameters\nspline_count = 6;\nspline_height = 1.5;\nspline_length = 30;\n\n// Flange parameters\nflange_diameter = 30;\nflange_thickness = 5;\nflange_position = 85;\n\n// Threaded section parameters\nthread_diameter = 18;\nthread_length = 25;\nthread_pitch = 2;\n\n// Bearing seat parameters\nbearing_diameter = 22;\nbearing_length = 10;\nbearing_position = 100;\n\n// End chamfer parameters\nchamfer_length = 3;\n\nmodule shaft_body() {\n    difference() {\n        // Main cylindrical shaft\n        cylinder(h=shaft_length, d=shaft_diameter, $fn=64);\n        \n        // Keyway slot\n        translate([-keyway_width/2, -shaft_diameter/2, 0])\n            cube([keyway_width, keyway_depth, keyway_length]);\n        \n        // End chamfer\n        translate([0, 0, shaft_length-chamfer_length])\n            cylinder(h=chamfer_length+1, d1=shaft_diameter, d2=shaft_diameter-4, $fn=64);\n    }\n}\n\nmodule splined_section() {\n    difference() {\n        // Base cylinder for splines\n        translate([0, 0, 0])\n            cylinder(h=spline_length, d=shaft_diameter + 2*spline_height, $fn=64);\n        \n        // Cut spline valleys\n        for(i=[0:spline_count-1]) {\n            rotate([0, 0, i*(360/spline_count)])\n                translate([0, -shaft_diameter/2 - spline_height - 1, -1])\n                    cube([shaft_diameter + 2*spline_height + 2, spline_height + 1, spline_length + 2]);\n        }\n    }\n}\n\nmodule flange() {\n    difference() {\n        // Main flange body\n        translate([0, 0, flange_position])\n            cylinder(h=flange_thickness, d=flange_diameter, $fn=64);\n        \n        // Bolt holes (4x M4)\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([flange_diameter/2 - 6, 0, flange_position-1])\n                    cylinder(h=flange_thickness+2, d=4.2, $fn=16);\n        }\n        \n        // Center bore relief\n        translate([0, 0, flange_position])\n            cylinder(h=flange_thickness, d=shaft_diameter+2, $fn=64);\n    }\n}\n\nmodule threaded_section() {\n    // Simplified thread representation\n    difference() {\n        translate([0, 0, shaft_length-thread_length])\n            cylinder(h=thread_length, d=thread_diameter, $fn=64);\n        \n        // Thread valleys (simplified)\n        for(i=[0:thread_length/thread_pitch-1]) {\n            translate([0, 0, shaft_length-thread_length+i*thread_pitch])\n                cylinder(h=thread_pitch/2, d=thread_diameter-2, $fn=64);\n        }\n    }\n}\n\nmodule bearing_seat() {\n    // Bearing seating surface\n    translate([0, 0, bearing_position])\n        cylinder(h=bearing_length, d=bearing_diameter, $fn=64);\n}\n\n// Assembly\nunion() {\n    shaft_body();\n    translate([0, 0, 0]) splined_section();\n    flange();\n    threaded_section();\n    bearing_seat();\n}",
    "renders": true
  },
  {
    "mechanical_component": "inputshaft",
    "openscad_code": "// Input Shaft – realistic, medium complexity\n// Overall length ≈ 120 mm, Ø 12 mm shaft, Ø 20 mm gear, 6 mm keyway\n// Printable without supports; 2 mm min walls\n\n$fa = 1;\n$fs = 0.4;\n\nmodule shaft_body() {\n    // Main cylindrical shaft\n    cylinder(h = 110, d = 12, center = true);\n}\n\nmodule keyway() {\n    // Rectangular keyway along shaft\n    translate([0, -6, 0])\n        cube([12, 3, 6], center = true);\n}\n\nmodule chamfer_end() {\n    // Small 45° chamfer on each end of shaft\n    difference() {\n        cylinder(h = 2, d = 12, center = true);\n        cylinder(h = 2.2, d = 10.4, center = true);\n    }\n}\n\nmodule gear_teeth(n = 20) {\n    // Simple spur gear at one end\n    union() {\n        // Gear blank\n        cylinder(h = 8, d = 20, center = true);\n        // Cut teeth via boolean difference\n        for (i = [0 : n-1])\n            rotate([0, 0, i * 360/n])\n                translate([9, 0, 0])\n                    cube([3, 1.5, 8], center = true);\n    }\n}\n\nmodule bearing_seat() {\n    // Small stepped bearing seat Ø 10 mm x 5 mm long\n    translate([0, 0, 30])\n        cylinder(h = 5, d = 10, center = true);\n}\n\nmodule snap_ring_groove() {\n    // 1 mm wide snap-ring groove\n    translate([0, 0, -25])\n        difference() {\n            cylinder(h = 1, d = 12, center = true);\n            cylinder(h = 1.2, d = 9.5, center = true);\n        }\n}\n\nmodule inputshaft() {\n    union() {\n        // Shaft core\n        shaft_body();\n\n        // Keyway\n        difference() {\n            children();\n            keyway();\n        }\n\n        // Chamfers on ends\n        translate([0, 0, 55])\n            chamfer_end();\n        translate([0, 0, -55])\n            chamfer_end();\n\n        // Gear blank at +z end\n        translate([0, 0, 50])\n            gear_teeth();\n\n        // Bearing seat\n        bearing_seat();\n\n        // Snap-ring groove\n        snap_ring_groove();\n    }\n}\n\ninputshaft();",
    "renders": true
  },
  {
    "mechanical_component": "coupling",
    "openscad_code": "// Shaft coupling – two-piece clamp style with keyway, set-screws and flange bolts\n// Overall size ≈ 80 mm OD, 60 mm long\n\n$fn = 60;            // smooth curves for printability\nwall = 2;            // printable wall thickness (mm)\n\nmodule set_screw(l=6, d=3) {\n    // simple hex socket head set-screw\n    cylinder(h=l, d=d, $fn=6);\n}\n\nmodule bolt_head(h=4, d=6) {\n    // hex bolt head\n    cylinder(h=h, d=d, $fn=6);\n}\n\nmodule keyway(length, width, depth) {\n    // rectangular slot for shaft key\n    cube([length, width, depth], center=true);\n}\n\nmodule half_coupling() {\n    // main body: 40 mm radius, 30 mm long hollow cylinder\n    difference() {\n        cylinder(h=30, r=40);\n        translate([0,0,-1])         // small extra length for clean cut\n            cylinder(h=32, r=32);   // bore for shaft\n    }\n    \n    // clamp gap cut\n    translate([0,40,15]) rotate([90,0,0])\n        cube([20, 30, 80], center=true);\n    \n    // clamp bolt bosses\n    translate([30, 35, 15]) rotate([90,0,0])\n        cylinder(h=20, r=5);\n    translate([-30, 35, 15]) rotate([90,0,0])\n        cylinder(h=20, r=5);\n    \n    // flange disk\n    translate([0,0,30])\n        cylinder(h=8, r=40);\n    \n    // bolt holes on flange\n    for(a=[0:60:359])\n        rotate([0,0,a])\n            translate([30,0,30+4])\n                cylinder(h=10, r=3.5);\n    \n    // keyway along bore\n    rotate([90,0,0])\n        translate([0,0,15])\n            keyway(length=30, width=6, depth=3);\n    \n    // set-screw bosses on bore\n    translate([0,0,15]) rotate([0,90,0])\n        difference() {\n            cylinder(h=10, r=4, center=true);\n            cylinder(h=12, r=2, center=true);\n        }\n    translate([0,0,20]) rotate([0,90,0])\n        difference() {\n            cylinder(h=10, r=4, center=true);\n            cylinder(h=12, r=2, center=true);\n        }\n    \n    // add visible set-screws\n    translate([0,36,15]) set_screw();\n    translate([0,36,20]) set_screw();\n}\n\n// assemble two mirrored halves\nunion() {\n    half_coupling();\n    translate([0,0,30]) mirror([0,0,1]) half_coupling();\n}",
    "renders": true
  },
  {
    "mechanical_component": "universaljoint",
    "openscad_code": "$fn=50;\n\n// Universal joint parameters\nshaft_d = 12;           // Drive shaft diameter\nshaft_l = 40;           // Drive shaft length\nyoke_thick = 4;         // Fork thickness\nyoke_width = 20;        // Fork width\nyoke_depth = 18;        // Fork depth\npin_d = 6;              // Cross pin diameter\ncross_len = 22;         // Cross length (pin to pin)\nclearance = 0.4;        // Printing clearance between moving parts\n\n// Helper: rounded shaft\nmodule rounded_shaft(d, l, r=2) {\n    translate([0,0,-l/2])\n    union() {\n        cylinder(d=d, h=l-r);\n        translate([0,0,l-r])\n        sphere(d=d);\n        translate([0,0,0])\n        sphere(d=d);\n    }\n}\n\n// Helper: yoke fork\nmodule yoke(width, depth, thick, shaft_d) {\n    difference() {\n        // Main fork body\n        union() {\n            translate([0,0,0])\n                cube([width, thick, depth], center=true);\n            // Arms\n            translate([0, (width+thick)/4, 0])\n                cube([thick, width/2, depth], center=true);\n            translate([0, -(width+thick)/4, 0])\n                cube([thick, width/2, depth], center=true);\n        }\n        // Center hole for shaft\n        rotate([90,0,0])\n            cylinder(d=shaft_d+clearance*2, h=thick+1, center=true);\n        // Pin holes\n        rotate([90,0,0])\n            translate([(width+thick)/4, 0, 0])\n                cylinder(d=pin_d+clearance*2, h=thick+1, center=true);\n        rotate([90,0,0])\n            translate([-(width+thick)/4, 0, 0])\n                cylinder(d=pin_d+clearance*2, h=thick+1, center=true);\n    }\n}\n\n// Helper: cross pin block\nmodule cross_block(len, pin_d) {\n    difference() {\n        // Main block\n        cube([len, pin_d*1.6, pin_d*1.6], center=true);\n        // Pin holes\n        rotate([90,0,0])\n            cylinder(d=pin_d+clearance*2, h=len+1, center=true);\n        rotate([0,90,0])\n            cylinder(d=pin_d+clearance*2, h=len+1, center=true);\n    }\n}\n\n// Helper: pin\nmodule pin(d, l, head_d=0, head_l=0) {\n    union() {\n        cylinder(d=d, h=l);\n        if (head_d > 0 && head_l > 0)\n            translate([0,0,l])\n                cylinder(d1=head_d, d2=d, h=head_l);\n    }\n}\n\n// Assembly\nmodule universal_joint() {\n    // First yoke and shaft\n    translate([0,0,shaft_l/2+yoke_depth/2])\n    union() {\n        yoke(yoke_width, yoke_depth, yoke_thick, shaft_d);\n        translate([0,0,yoke_depth/2+shaft_l/2])\n            rotate([0,90,0])\n                rounded_shaft(shaft_d, shaft_l);\n    }\n\n    // Cross block\n    cross_block(cross_len, pin_d);\n\n    // Second yoke and shaft (rotated 90°)\n    translate([0,0,-shaft_l/2-yoke_depth/2])\n    rotate([90,0,0])\n    union() {\n        yoke(yoke_width, yoke_depth, yoke_thick, shaft_d);\n        translate([0,0,-yoke_depth/2-shaft_l/2])\n            rotate([0,90,0])\n                rounded_shaft(shaft_d, shaft_l);\n    }\n\n    // Pins (for display only – printed separately)\n    color(\"silver\")\n    for (sign = [-1, 1]) {\n        translate([0, sign*(yoke_width+thick)/4, 0])\n            rotate([90,0,0])\n                pin(pin_d, yoke_thick+cross_len/2+2, head_d=pin_d*1.5, head_l=2);\n        translate([sign*(yoke_width+thick)/4, 0, 0])\n            rotate([0,90,0])\n                pin(pin_d, yoke_thick+cross_len/2+2, head_d=pin_d*1.5, head_l=2);\n    }\n}\n\n// Render\nuniversal_joint();",
    "renders": true
  },
  {
    "mechanical_component": "constantvelocityjoint",
    "openscad_code": "// Constant Velocity Joint (CVJ) - Rzeppa Style\n// Medium complexity, 3D-printable, 80 mm Ø\n\n// -------------- PARAMETERS --------------\nball_d = 80;               // outer race diameter\nball_r = ball_d/2;\ninner_d = 28;              // shaft hole diameter\nshaft_d = 12;              // shaft diameter for splines\nwall_t = 2.2;              // printable wall thickness\nball_cnt = 6;              // number of balls\nball_Ø = 12;               // diameter of each ball\ncage_thick = 6;            // thickness of ball cage\nrace_clear = 0.3;          // clearance for smooth motion\nshaft_len = 35;\n\n// -------------- MODULES --------------\nmodule ball() {\n    sphere(d = ball_Ø, $fn=20);\n}\n\n// Outer race with six ball grooves\nmodule outer_race() {\n    difference() {\n        // Main hollow sphere\n        sphere(d = ball_d + wall_t*2, $fn=60);\n        // Center hole\n        translate([0,0,-ball_r-1])\n            cylinder(h = ball_d+2, d = inner_d, $fn=60);\n        // Cut groove for each ball\n        for(i=[0:ball_cnt-1]) {\n            rotate([0,0,i*360/ball_cnt])\n                translate([0, ball_r*0.75, 0])\n                    rotate([90,0,0])\n                        cylinder(h = ball_d, d = ball_Ø+race_clear*2, $fn=20);\n        }\n    }\n}\n\n// Inner race with matching grooves\nmodule inner_race() {\n    difference() {\n        // Main ball\n        sphere(d = ball_d*0.6, $fn=50);\n        // Shaft hole with splines\n        translate([0,0,-ball_r-1])\n            cylinder(h = ball_d+2, d = shaft_d+2, $fn=30);\n        // Splines\n        for(i=[0:11]) {\n            rotate([0,0,i*30])\n                translate([shaft_d/2+1,0,-ball_r-1])\n                    cube([2,2,ball_d+2], center=true);\n        }\n        // Cut grooves\n        for(i=[0:ball_cnt-1]) {\n            rotate([0,0,i*360/ball_cnt+360/ball_cnt/2])\n                translate([0, ball_r*0.35, 0])\n                    rotate([90,0,0])\n                        cylinder(h = ball_d, d = ball_Ø+race_clear*2, $fn=20);\n        }\n    }\n}\n\n// Ball cage / separator\nmodule cage() {\n    difference() {\n        // Main cage ring\n        rotate_extrude($fn=60)\n            translate([ball_r*0.55-wall_t/2, 0, 0])\n                square([wall_t, cage_thick]);\n        // Ball windows\n        for(i=[0:ball_cnt-1]) {\n            rotate([0,0,i*360/ball_cnt])\n                translate([ball_r*0.55, 0, 0])\n                    sphere(d = ball_Ø+1, $fn=20);\n        }\n    }\n}\n\n// Output shaft stub\nmodule shaft() {\n    cylinder(h = shaft_len, d = shaft_d, $fn=30);\n}\n\n// -------------- ASSEMBLY --------------\n// Outer race\nouter_race();\n\n// Inner race shifted for clearance\ntranslate([0,0,ball_r*0.6])\n    inner_race();\n\n// Cage between races\ncage();\n\n// Shaft protruding\ntranslate([0,0,-ball_r-shaft_len/2])\n    shaft();",
    "renders": true
  },
  {
    "mechanical_component": "synchro",
    "openscad_code": "// Synchro (rotary transformer) – realistic, medium complexity\n// Main body Ø42 mm × 50 mm, 2 mm wall thickness, 3D-printable\n\n// Overall scale factor (1 = 100 %)\nscale_factor = 1;\n\nmodule body_shell() {\n    difference() {\n        // Outer cylinder\n        cylinder(d = 42, h = 50, $fn = 64);\n        // Hollow core\n        translate([0, 0, 2])\n            cylinder(d = 38, h = 46, $fn = 64);\n    }\n}\n\nmodule mounting_flange() {\n    difference() {\n        // Flange disc\n        cylinder(d = 54, h = 4, $fn = 64);\n        // Four mounting holes Ø3.2 mm on 46 mm PCD\n        for (a = [0:90:270])\n            rotate([0, 0, a])\n                translate([23, 0, -1])\n                    cylinder(d = 3.2, h = 6, $fn = 16);\n    }\n}\n\nmodule stator_pins() {\n    // Six stator terminals on rear face\n    for (i = [0:5])\n        translate([0, 20, 48 - i * 7])\n            rotate([90, 0, 0])\n                cylinder(d1 = 2.2, d2 = 1.6, h = 8, $fn = 12);\n}\n\nmodule rotor_shaft() {\n    // Main shaft Ø6 mm\n    translate([0, 0, -14])\n        cylinder(d = 6, h = 20, $fn = 32);\n    // Flat section\n    translate([0, 3, -14])\n        cube([12, 1.5, 6], center = true);\n}\n\nmodule key_slot() {\n    // Keyway 2 mm × 2 mm\n    translate([3, 0, 0])\n        cube([2, 2.5, 50], center = true);\n}\n\nmodule rear_cover() {\n    difference() {\n        // Cover plate\n        translate([0, 0, 50])\n            cylinder(d = 42, h = 3, $fn = 64);\n        // Central hole for shaft\n        translate([0, 0, 49.9])\n            cylinder(d = 6.5, h = 3.2, $fn = 32);\n    }\n}\n\n// Assembly\nscale(scale_factor) {\n    union() {\n        body_shell();\n        translate([0, 0, -4])\n            mounting_flange();\n        stator_pins();\n        rotor_shaft();\n        difference() {\n            body_shell();\n            key_slot();\n        }\n        rear_cover();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "sleeve",
    "openscad_code": "// Sleeve Mechanical Component - Flanged Bearing Sleeve Assembly\n// Realistic style, medium complexity\n\n$fn = 50;  // Smooth curves\n\n// Main parameters\nsleeve_length = 60;\nsleeve_outer_diameter = 30;\nsleeve_inner_diameter = 20;\nflange_diameter = 45;\nflange_thickness = 5;\nwall_thickness = 2.5;\n\n// Bolt hole parameters\nbolt_hole_diameter = 5;\nbolt_circle_diameter = 36;\nnum_bolt_holes = 4;\n\n// Keyway parameters\nkeyway_width = 6;\nkeyway_depth = 3;\n\n// Grease grooves\ngroove_width = 2;\ngroove_depth = 1;\nnum_grooves = 3;\n\nmodule main_sleeve() {\n    difference() {\n        // Outer sleeve body\n        cylinder(h = sleeve_length, d = sleeve_outer_diameter, center = true);\n        \n        // Inner bore\n        cylinder(h = sleeve_length + 1, d = sleeve_inner_diameter, center = true);\n        \n        // Keyway\n        translate([0, sleeve_inner_diameter/2 - keyway_depth/2, 0])\n            cube([keyway_width, keyway_depth, sleeve_length + 2], center = true);\n    }\n}\n\nmodule flange() {\n    difference() {\n        // Flange body\n        cylinder(h = flange_thickness, d = flange_diameter);\n        \n        // Counterbore\n        translate([0, 0, -0.1])\n            cylinder(h = flange_thickness + 0.2, d = sleeve_outer_diameter);\n        \n        // Bolt holes\n        for(i = [0:num_bolt_holes-1]) {\n            rotate([0, 0, i * 360/num_bolt_holes])\n                translate([bolt_circle_diameter/2, 0, -0.1])\n                    cylinder(h = flange_thickness + 0.2, d = bolt_hole_diameter);\n        }\n    }\n}\n\nmodule grease_grooves() {\n    difference() {\n        // Main sleeve (already hollow)\n        cylinder(h = sleeve_length, d = sleeve_inner_diameter + groove_depth*2, center = true);\n        \n        // Inner bore\n        cylinder(h = sleeve_length + 1, d = sleeve_inner_diameter, center = true);\n        \n        // Grooves\n        for(i = [1:num_grooves]) {\n            translate([0, 0, -sleeve_length/2 + i*(sleeve_length/(num_grooves+1))])\n                rotate([0, 0, 45])\n                    cube([groove_width*2, groove_depth, groove_width], center = true);\n        }\n    }\n}\n\nmodule chamfers() {\n    // Top chamfer\n    translate([0, 0, sleeve_length/2 - 2])\n        cylinder(h = 2, d1 = sleeve_outer_diameter, d2 = sleeve_outer_diameter - 3);\n    \n    // Bottom chamfer\n    translate([0, 0, -sleeve_length/2 + 2])\n        cylinder(h = 2, d1 = sleeve_outer_diameter - 3, d2 = sleeve_outer_diameter);\n}\n\n// Assembly\ntranslate([0, 0, sleeve_length/2 + flange_thickness/2])\n    union() {\n        // Main sleeve body with chamfers\n        union() {\n            main_sleeve();\n            grease_grooves();\n            chamfers();\n        }\n        \n        // Flange\n        translate([0, 0, -sleeve_length/2 - flange_thickness/2])\n            flange();\n    }",
    "renders": true
  },
  {
    "mechanical_component": "hub",
    "openscad_code": "// Realistic Hub Mechanical Component\n// Medium complexity OpenSCAD model\n\n// Main parameters\n$fn = 50;\nhub_diameter = 80;\nhub_height = 25;\nshaft_diameter = 12;\nmounting_bolt_count = 6;\nmounting_bolt_diameter = 8;\nmounting_bolt_circle = 65;\n\n// Spoke parameters\nspoke_count = 5;\nspoke_width = 8;\nspoke_thickness = 4;\nspoke_length = 60;\n\n// Bearing recess\nbearing_recess_diameter = 20;\nbearing_recess_depth = 5;\n\nmodule hub_body() {\n    // Main hub cylinder\n    difference() {\n        cylinder(d=hub_diameter, h=hub_height, center=true);\n        \n        // Central shaft hole\n        cylinder(d=shaft_diameter, h=hub_height+2, center=true);\n        \n        // Mounting bolt holes\n        for(i = [0:mounting_bolt_count-1]) {\n            rotate([0, 0, i * 360/mounting_bolt_count])\n            translate([mounting_bolt_circle/2, 0, 0])\n            cylinder(d=mounting_bolt_diameter, h=hub_height+2, center=true);\n        }\n        \n        // Bearing recess on top\n        translate([0, 0, hub_height/2 - bearing_recess_depth/2])\n        cylinder(d=bearing_recess_diameter, h=bearing_recess_depth+1, center=true);\n        \n        // Bearing recess on bottom\n        translate([0, 0, -hub_height/2 + bearing_recess_depth/2])\n        cylinder(d=bearing_recess_diameter, h=bearing_recess_depth+1, center=true);\n    }\n}\n\nmodule spoke_connection() {\n    // Spoke mounting flanges\n    difference() {\n        cylinder(d=hub_diameter + 20, h=spoke_thickness+2, center=true);\n        cylinder(d=hub_diameter + 16, h=spoke_thickness+4, center=true);\n    }\n}\n\nmodule spokes() {\n    for(i = [0:spoke_count-1]) {\n        rotate([0, 0, i * 360/spoke_count])\n        translate([hub_diameter/2 + spoke_length/2 - 10, 0, 0])\n        cube([spoke_length, spoke_width, spoke_thickness], center=true);\n    }\n}\n\nmodule hub_flange() {\n    // Reinforcement ring\n    difference() {\n        cylinder(d=hub_diameter + 10, h=6, center=true);\n        cylinder(d=hub_diameter - 5, h=8, center=true);\n    }\n}\n\nmodule keyway() {\n    // Shaft keyway\n    translate([shaft_diameter/2 - 1, 0, 0])\n    cube([2, 4, hub_height], center=true);\n}\n\n// Assembly\nunion() {\n    hub_body();\n    \n    translate([0, 0, spoke_thickness/2 + 2])\n    spoke_connection();\n    \n    translate([0, 0, -spoke_thickness/2 - 2])\n    spoke_connection();\n    \n    translate([0, 0, spoke_thickness/2 + 2])\n    spokes();\n    \n    translate([0, 0, -spoke_thickness/2 - 2])\n    spokes();\n    \n    translate([0, 0, hub_height/2 + 3])\n    hub_flange();\n    \n    translate([0, 0, -hub_height/2 - 3])\n    hub_flange();\n    \n    // Keyway cutout\n    difference() {\n        hub_body();\n        keyway();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "collar",
    "openscad_code": "// Collar mechanical component - OpenSCAD\n// A split-shaft collar with clamping mechanism\n// Size: 60mm OD, 20mm ID, 25mm width\n\n// Parameters\n$fn = 36;\nshaft_diameter = 20;\ncollar_od = 60;\ncollar_width = 25;\nwall_thickness = 2.5;\nbolt_diameter = 6;\nbolt_head_diameter = 10;\nbolt_head_height = 4;\nslot_width = 2;\nslot_depth = 20;\n\nmodule main_collar() {\n    difference() {\n        // Main collar body\n        cylinder(h=collar_width, d=collar_od);\n        \n        // Central shaft hole\n        translate([0, 0, -1])\n            cylinder(h=collar_width+2, d=shaft_diameter);\n        \n        // Split slot\n        translate([collar_od/2, 0, -1])\n            cube([slot_depth, slot_width, collar_width+2], center=true);\n    }\n}\n\nmodule bolt_holes() {\n    // Two bolt holes for clamping\n    for(i = [0, 1]) {\n        rotate([0, 0, i*180])\n            translate([(collar_od/2 - 10), 0, collar_width/2])\n                rotate([90, 0, 0])\n                    cylinder(h=collar_width, d=bolt_diameter+1);\n    }\n}\n\nmodule bolt_heads() {\n    // Two hex bolt heads\n    for(i = [0, 1]) {\n        rotate([0, 0, i*180])\n            translate([(collar_od/2 - 10), 0, collar_width/2])\n                rotate([90, 0, 0])\n                    cylinder(h=bolt_head_height, d=bolt_head_diameter, $fn=6);\n    }\n}\n\nmodule alignment_pins() {\n    // Small alignment pins on the split faces\n    for(i = [0, 1]) {\n        rotate([0, 0, i*180])\n            translate([(collar_od/2 - 15), 0, collar_width/2])\n                rotate([90, 0, 0])\n                    cylinder(h=3, d=4);\n    }\n}\n\nmodule pin_holes() {\n    // Corresponding pin holes\n    for(i = [0, 1]) {\n        rotate([0, 0, i*180])\n            translate([(collar_od/2 - 15), 0, collar_width/2])\n                rotate([90, 0, 0])\n                    cylinder(h=3.5, d=4.2);\n    }\n}\n\n// Assembly\nunion() {\n    difference() {\n        main_collar();\n        bolt_holes();\n        pin_holes();\n    }\n    \n    // Add bolt heads on one side\n    translate([0, 0, collar_width/2 - bolt_head_height/2])\n        bolt_heads();\n    \n    // Add alignment pins on the other side\n    translate([0, 0, -collar_width/2 + 1.5])\n        alignment_pins();\n}\n\n// Keyway slot (optional feature)\ntranslate([-1, shaft_diameter/2, collar_width/2])\n    cube([2, 5, collar_width]);",
    "renders": true
  },
  {
    "mechanical_component": "dogclutch",
    "openscad_code": "// Dog-clutch coupling – medium-complexity, 3D-printable\n// Overall Ø ≈ 70 mm, length ≈ 40 mm, no steep overhangs\n\n$fa = 2; $fs = 0.5;\n\n// ---------- parameters ----------\nhub_d          = 40;          // central hub diameter\nhub_l          = 20;          // hub thickness\nshaft_d        = 12;          // shaft hole diameter\nwall           = 2;           // printable wall thickness\ntooth_h        = 8;           // dog tooth height\ntooth_depth    = 5;           // tooth engagement depth\nn_teeth        = 6;           // number of dog teeth\nouter_d        = hub_d+2*tooth_h;  // max diameter\nboss_l         = 8;           // shaft boss length\nkey_w          = 4;           // keyway width\nkey_h          = 2;           // keyway depth\n\n// ---------- module: one dog tooth ----------\nmodule dog_tooth() {\n    // simple trapezoid tooth, 45° draft for printability\n    linear_extrude(height = tooth_depth, convexity=4)\n        polygon(points=[\n            [hub_d/2,               -wall/2],\n            [hub_d/2+tooth_h-wall,  -wall/2],\n            [hub_d/2+tooth_h-wall,   wall/2],\n            [hub_d/2,                wall/2]\n        ]);\n}\n\n// ---------- module: shaft boss ----------\nmodule shaft_boss() {\n    difference() {\n        cylinder(d=hub_d, h=boss_l, center=false);\n        // shaft bore\n        translate([0,0,-1])\n            cylinder(d=shaft_d, h=boss_l+2, center=false);\n        // keyway\n        translate([0, -shaft_d/2-key_h/2, -1])\n            cube([key_w, key_h+0.2, boss_l+2], center=false);\n    }\n}\n\n// ---------- module: dog half-coupling ----------\nmodule dog_half(inv=false) {\n    rotate([0,0, inv?180:0]) {\n        union() {\n            // hub cylinder\n            cylinder(d=hub_d, h=hub_l, center=false);\n\n            // dog teeth around perimeter\n            for(i=[0:n_teeth-1])\n                rotate([0,0,i*360/n_teeth])\n                    translate([0,0,hub_l-tooth_depth])\n                        dog_tooth();\n\n            // shaft boss on one side\n            translate([0,0, hub_l])\n                shaft_boss();\n        }\n    }\n}\n\n// ---------- assembly ----------\n// first half\ndog_half(false);\n\n// second half flipped for printability demo\ntranslate([0, 0, hub_l+boss_l+5])\n    dog_half(true);",
    "renders": true
  },
  {
    "mechanical_component": "shiftfork",
    "openscad_code": "// Realistic Shift Fork - 3D Printable\n// Medium complexity mechanical component for gear shifting systems\n\n// Main parameters\nfork_length = 120;\nfork_width = 40;\nfork_height = 15;\nhub_diameter = 25;\nslot_width = 6;\nwall_thickness = 2;\n\n// Fork arms\nmodule fork_arms() {\n    // Left arm\n    translate([-fork_width/2 + wall_thickness, 0, 0])\n        difference() {\n            cube([fork_width/2 - wall_thickness, fork_length*0.7, fork_height]);\n            translate([wall_thickness, fork_length*0.1, -1])\n                cube([fork_width/4, fork_length*0.5, fork_height+2]);\n        }\n    \n    // Right arm\n    translate([0, 0, 0])\n        difference() {\n            cube([fork_width/2 - wall_thickness, fork_length*0.7, fork_height]);\n            translate([-fork_width/4 - wall_thickness, fork_length*0.1, -1])\n                cube([fork_width/4, fork_length*0.5, fork_height+2]);\n        }\n}\n\n// Hub boss with bearing surface\nmodule hub_boss() {\n    // Main boss\n    cylinder(h=fork_height*1.5, d1=hub_diameter+6, d2=hub_diameter+4);\n    \n    // Bearing bore\n    translate([0, 0, -1])\n        cylinder(h=fork_height*1.5+2, d=hub_diameter, $fn=32);\n    \n    // Mounting holes\n    for(i=[0:120:359])\n        rotate([0, 0, i])\n            translate([hub_diameter/2 + 3, 0, fork_height*0.75])\n                rotate([90, 0, 0])\n                    cylinder(h=fork_height*1.5+2, d=3.5, $fn=16);\n}\n\n// Fork shaft\nmodule fork_shaft() {\n    // Shaft body\n    translate([0, fork_length*0.7, fork_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=fork_length*0.3, d1=fork_width*0.8, d2=fork_width*0.6);\n    \n    // Reinforcement ribs\n    for(i=[-1, 1])\n        translate([i*fork_width/4, fork_length*0.7 - fork_length*0.05, 0])\n            rotate([0, 30*i, 0])\n                cube([wall_thickness*2, fork_length*0.1, fork_height*1.2]);\n}\n\n// Shift fork fingers\nmodule fingers() {\n    // Finger base\n    translate([0, fork_length*0.85, fork_height/2])\n        cube([fork_width*0.9, fork_length*0.15, fork_height*1.1], center=true);\n    \n    // Finger grooves\n    for(i=[-1, 0, 1])\n        translate([i*fork_width/6, fork_length*0.85, fork_height/2])\n            cube([slot_width, fork_length*0.15+1, fork_height*0.8], center=true);\n}\n\n// Assembly\nunion() {\n    // Fork body\n    fork_arms();\n    \n    // Hub connection\n    translate([0, fork_length*0.2, fork_height/2])\n        hub_boss();\n    \n    // Shaft extension\n    fork_shaft();\n    \n    // Shifting fingers\n    fingers();\n    \n    // Structural gussets\n    difference() {\n        // Left gusset\n        translate([-fork_width/2 - 3, fork_length*0.35, 0])\n            rotate([0, 0, 30])\n                cube([fork_width/3, fork_length*0.3, fork_height]);\n        \n        // Lightening hole\n        translate([-fork_width/2 - 1, fork_length*0.35, -1])\n            rotate([0, 0, 30])\n                cube([fork_width/4, fork_length*0.2, fork_height+2]);\n    }\n    \n    difference() {\n        // Right gusset\n        translate([fork_width/2 + 3, fork_length*0.35, 0])\n            rotate([0, 0, -30])\n                cube([fork_width/3, fork_length*0.3, fork_height]);\n        \n        // Lightening hole\n        translate([fork_width/2 + 1, fork_length*0.35, -1])\n            rotate([0, 0, -30])\n                cube([fork_width/4, fork_length*0.2, fork_height+2]);\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "selector",
    "openscad_code": "// Selector Switch - Industrial style 3-position rotary selector\n// Overall dimensions: ~60mm diameter x 45mm height\n\n// Parameters\n$fn = 30;\nwall_thickness = 2;\nbase_diameter = 50;\nbase_height = 15;\nknob_diameter = 25;\nknob_height = 20;\nshaft_diameter = 8;\nshaft_height = 10;\nmount_hole_diameter = 4;\nmount_hole_spacing = 40;\nposition_marker_depth = 1;\n\n// Main base\nmodule base() {\n    difference() {\n        // Main cylindrical base\n        cylinder(h = base_height, d = base_diameter, center = false);\n        \n        // Center shaft hole\n        translate([0, 0, -1])\n            cylinder(h = base_height + 2, d = shaft_diameter + wall_thickness, center = false);\n        \n        // Mounting holes\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([mount_hole_spacing/2, 0, -1])\n                    cylinder(h = base_height + 2, d = mount_hole_diameter, center = false);\n        }\n        \n        // Position indicators (3 positions at 0, 120, 240 degrees)\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([base_diameter/2 - 3, 0, base_height - position_marker_depth])\n                    cube([6, 2, position_marker_depth], center = true);\n        }\n    }\n}\n\n// Selector shaft\nmodule shaft() {\n    // Main shaft cylinder\n    cylinder(h = shaft_height, d = shaft_diameter, center = false);\n    \n    // Shaft key\n    translate([shaft_diameter/2, 0, shaft_height/2])\n        cube([2, 4, shaft_height], center = true);\n}\n\n// Selector knob\nmodule knob() {\n    difference() {\n        union() {\n            // Main knob body\n            cylinder(h = knob_height, d = knob_diameter, center = false);\n            \n            // Grip ridges\n            for (i = [0:11]) {\n                rotate([0, 0, i * 30])\n                    translate([knob_diameter/2 - 1, 0, 2])\n                        cube([2, 1, knob_height - 4], center = true);\n            }\n            \n            // Pointer indicator\n            translate([0, knob_diameter/2 - 2, knob_height - 1])\n                cube([4, 4, 2], center = true);\n        }\n        \n        // Center hole for shaft\n        translate([0, 0, -1])\n            cylinder(h = knob_height + 2, d = shaft_diameter + 0.5, center = false);\n            \n        // Keyway slot\n        translate([shaft_diameter/2 + 1, 0, -1])\n            cube([2.5, 5, knob_height + 2], center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    base();\n\ntranslate([0, 0, base_height])\n    shaft();\n\ntranslate([0, 0, base_height + shaft_height])\n    knob();",
    "renders": true
  },
  {
    "mechanical_component": "detent",
    "openscad_code": "// Detent mechanism - rotary indexing plate with spring-loaded ball\n// Overall footprint ~80 mm diameter, 20 mm thick\n\n// Configuration\nball_d = 8;               // ball bearing diameter\nspring_d = 5;             // spring outer diameter\nspring_l = 12;            // spring free length\nbody_d = 80;              // main disc diameter\nbody_h = 8;               // main disc thickness\ndetent_n = 12;            // number of detent positions\ndetent_r = 30;            // radius of detent circle\ndetent_depth = 2;         // depth of each detent\nwall_th = 2;              // printable wall thickness\nshaft_d = 10;             // central shaft hole\nbase_d = 20;              // spring housing diameter\nbase_h = body_h + 8;      // spring housing height\n\n// Derived\ndetent_w = 6;             // width of detent groove (must fit ball)\npillar_h = 4;             // height of centering pillar\n\n// Main indexing disc\nmodule indexing_disc() {\n    difference() {\n        // Main disc body\n        cylinder(d = body_d, h = body_h, $fn = 90);\n\n        // Central shaft hole\n        translate([0, 0, -1])\n            cylinder(d = shaft_d, h = body_h + 2, $fn = 32);\n\n        // Detent grooves\n        for (i = [0 : detent_n - 1]) {\n            rotate([0, 0, i * 360 / detent_n])\n                translate([detent_r, 0, body_h - detent_depth])\n                    cube([detent_w, detent_w, detent_depth + 1], center = true);\n        }\n    }\n\n    // Lightening pockets on underside\n    difference() {\n        translate([0, 0, 0])\n            cylinder(d = body_d - wall_th * 2, h = body_h - wall_th, $fn = 90);\n        for (i = [0 : detent_n - 1]) {\n            rotate([0, 0, i * 360 / detent_n + 15])\n                translate([detent_r, 0, -1])\n                    cube([detent_w + 2, detent_w + 2, wall_th + 2], center = true);\n        }\n    }\n}\n\n// Spring housing block\nmodule spring_housing() {\n    difference() {\n        // Main housing body\n        translate([0, -detent_r, 0])\n            cylinder(d = base_d, h = base_h, $fn = 32);\n\n        // Spring cavity\n        translate([0, -detent_r, wall_th])\n            cylinder(d = spring_d + wall_th, h = base_h - wall_th * 2, $fn = 32);\n\n        // Ball seat\n        translate([0, -detent_r, base_h - spring_l - ball_d / 2])\n            sphere(d = ball_d + 1, $fn = 22);\n\n        // Mounting holes\n        for (mir = [-1, 1]) {\n            translate([mir * 6, -detent_r - 6, -1])\n                cylinder(d = 3.2, h = base_h + 2, $fn = 16);\n        }\n    }\n}\n\n// Centering boss for alignment\nmodule center_pillar() {\n    translate([0, 0, body_h])\n        cylinder(d = shaft_d + wall_th * 2, h = pillar_h, $fn = 32);\n}\n\n// Assembly\nunion() {\n    indexing_disc();\n    spring_housing();\n    center_pillar();\n}\n\n// Optional: spring and ball visualization (comment out for print)\n%translate([0, -detent_r, base_h - spring_l / 2])\n    cylinder(d = spring_d, h = spring_l, $fn = 16);\n%translate([0, -detent_r, base_h - spring_l - ball_d / 2])\n    sphere(d = ball_d, $fn = 22);",
    "renders": true
  },
  {
    "mechanical_component": "spring",
    "openscad_code": "// Realistic Compression Spring - 3D Printable\n// Parameters\ncoil_diameter = 30;      // Outer diameter of the spring\nwire_diameter = 3;       // Thickness of the spring wire\ncoils = 10;              // Number of active coils\npitch = 8;               // Distance between coils\nspring_height = coils * pitch;\nwall_thickness = 2;      // Minimum printable wall thickness\n\n// Ground plate for stability\nbase_thickness = 4;\nbase_diameter = coil_diameter + 20;\n\n// Top plate for load distribution\ntop_thickness = 4;\ntop_diameter = coil_diameter + 10;\n\n// End coils - flattened and ground for mounting\nend_coil_height = wire_diameter * 1.5;\nend_coil_segments = 3;\n\n// Render the complete spring assembly\nmodule spring_assembly() {\n    // Base mounting plate\n    translate([0, 0, 0])\n        cylinder(h = base_thickness, d = base_diameter, $fn = 64);\n    \n    // Bottom ground end coil\n    translate([0, 0, base_thickness])\n        ground_end_coil(false);\n    \n    // Main spring coils\n    translate([0, 0, base_thickness + end_coil_height])\n        main_coils();\n    \n    // Top ground end coil\n    translate([0, 0, base_thickness + end_coil_height + spring_height])\n        ground_end_coil(true);\n    \n    // Top mounting plate\n    translate([0, 0, base_thickness + end_coil_height * 2 + spring_height])\n        cylinder(h = top_thickness, d = top_diameter, $fn = 64);\n    \n    // Center support rod (optional, for stability)\n    translate([0, 0, base_thickness])\n        cylinder(h = end_coil_height * 2 + spring_height, d = wire_diameter, $fn = 32);\n}\n\n// Create the main helical coils\nmodule main_coils() {\n    for(i = [0:coils-1]) {\n        translate([0, 0, i * pitch])\n            single_coil();\n    }\n}\n\n// Generate a single coil turn\nmodule single_coil() {\n    // Create coil as series of connected cylinders\n    segments = 32;\n    radius = (coil_diameter - wire_diameter) / 2;\n    \n    for(a = [0:segments-1]) {\n        angle1 = a * 360 / segments;\n        angle2 = (a + 1) * 360 / segments;\n        \n        // Calculate positions\n        x1 = cos(angle1) * radius;\n        y1 = sin(angle1) * radius;\n        x2 = cos(angle2) * radius;\n        y2 = sin(angle2) * radius;\n        \n        // Create cylinder segment\n        translate([x1, y1, 0])\n            rotate([0, 0, angle1])\n                rotate([90, 0, 0])\n                    cylinder(h = 2 * radius * sin(180/segments), d = wire_diameter, $fn = 16);\n        \n        // Connect segments with spheres for smooth joints\n        translate([x1, y1, 0])\n            sphere(d = wire_diameter, $fn = 16);\n    }\n}\n\n// Create ground end coils (flattened)\nmodule ground_end_coil(is_top) {\n    // Flattened spiral for mounting surface\n    segments = 24;\n    radius = (coil_diameter - wire_diameter) / 2;\n    \n    for(a = [0:segments-1]) {\n        angle1 = a * 360 / segments;\n        angle2 = (a + 1) * 360 / segments;\n        \n        // Taper the radius for the end coil\n        taper_factor = 0.8;\n        r1 = radius * (1 - (a/segments) * (1 - taper_factor));\n        r2 = radius * (1 - ((a+1)/segments) * (1 - taper_factor));\n        \n        x1 = cos(angle1) * r1;\n        y1 = sin(angle1) * r1;\n        x2 = cos(angle2) * r2;\n        y2 = sin(angle2) * r2;\n        \n        // Create flattened coil segment\n        translate([x1, y1, 0])\n            cylinder(h = end_coil_height, d = wire_diameter, $fn = 16);\n        \n        // Add support structure for 3D printing\n        if(a % 3 == 0) {\n            translate([x1, y1, end_coil_height/2])\n                sphere(d = wire_diameter * 1.2, $fn = 16);\n        }\n    }\n}\n\n// Generate the spring\nspring_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "seal",
    "openscad_code": "// Seal mechanical component - realistic style with medium complexity\n// Overall dimensions: 100mm diameter, 80mm height\n\n// Parameters\n$fn = 50;\nouter_diameter = 100;\ninner_diameter = 60;\nheight = 80;\nwall_thickness = 2;\nrib_count = 8;\nbolt_hole_diameter = 8;\nspring_count = 12;\n\n// Main seal body - outer cylindrical shell\nmodule seal_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=height, d=outer_diameter, center=true);\n        \n        // Inner hollow\n        translate([0, 0, 0])\n            cylinder(h=height+2, d=inner_diameter, center=true);\n        \n        // Top lip groove\n        translate([0, 0, height/2 - 5])\n            cylinder(h=10, d=outer_diameter - 10);\n        \n        // Bottom lip groove  \n        translate([0, 0, -height/2 + 5])\n            cylinder(h=10, d=outer_diameter - 10);\n    }\n}\n\n// Structural ribs for reinforcement\nmodule structural_ribs() {\n    for(i = [0:rib_count-1]) {\n        rotate([0, 0, i * 360/rib_count])\n            translate([inner_diameter/2 + wall_thickness, 0, 0])\n                cube([outer_diameter/2 - inner_diameter/2 - wall_thickness, wall_thickness*2, height-10], center=true);\n    }\n}\n\n// Bolt holes for mounting\nmodule mounting_holes() {\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([(outer_diameter + inner_diameter)/4, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=wall_thickness*3, d=bolt_hole_diameter, center=true);\n    }\n}\n\n// Sealing lip on top\nmodule sealing_lip() {\n    translate([0, 0, height/2 - 2])\n        cylinder(h=4, d1=outer_diameter - 4, d2=outer_diameter - 8);\n}\n\n// Spring grooves for tension rings\nmodule spring_grooves() {\n    // Top groove\n    translate([0, 0, height/2 - 10])\n        cylinder(h=3, d=inner_diameter + 6);\n    \n    // Bottom groove\n    translate([0, 0, -height/2 + 10])\n        cylinder(h=3, d=inner_diameter + 6);\n}\n\n// Gasket seating surface\nmodule gasket_seat() {\n    translate([0, 0, height/2 - 15])\n        cylinder(h=2, d=outer_diameter - 20);\n}\n\n// Drainage channels\nmodule drainage_channels() {\n    for(i = [0:spring_count-1]) {\n        rotate([0, 0, i * 360/spring_count])\n            translate([(outer_diameter + inner_diameter)/2, 0, -height/2 + 5])\n                cube([wall_thickness, 2, 10], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    seal_body();\n    \n    // Structural elements\n    structural_ribs();\n    \n    // Mounting features\n    mounting_holes();\n    \n    // Sealing features\n    union() {\n        sealing_lip();\n        spring_grooves();\n        gasket_seat();\n    }\n    \n    // Drainage system\n    drainage_channels();\n}\n\n// Centering boss on bottom\ntranslate([0, 0, -height/2])\n    cylinder(h=5, d=inner_diameter - 4);",
    "renders": true
  },
  {
    "mechanical_component": "gasket",
    "openscad_code": "// Realistic 3D-printable gasket with bolt holes and raised sealing lips\n// Overall OD ≈ 100 mm, ID ≈ 60 mm, thickness ≈ 3 mm\n\n$fn = 50;          // Good visual quality without huge STL\n\nmodule gasket() {\n    // Basic ring body\n    difference() {\n        cylinder(h = 3, d = 100, center = true);     // Outer disk\n        cylinder(h = 4, d = 60,  center = true);     // Inner hole (slightly longer to guarantee difference)\n    }\n\n    // Raised inner sealing lip (1 mm high, 2 mm wide)\n    translate([0, 0, 1.5])\n    difference() {\n        cylinder(h = 1, d = 64, center = false);\n        cylinder(h = 2, d = 60, center = false);\n    }\n\n    // Raised outer sealing lip (1 mm high, 2 mm wide)\n    translate([0, 0, 1.5])\n    difference() {\n        cylinder(h = 1, d = 100, center = false);\n        cylinder(h = 2, d = 96,  center = false);\n    }\n\n    // Six bolt holes on PCD 80 mm, Ø 8 mm\n    for (a = [0 : 60 : 359])\n        rotate([0, 0, a])\n        translate([80 / 2, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 10, d = 8, center = true);\n\n    // Optional stiffening ribs between holes (thin 1 mm radial ribs)\n    for (a = [30 : 60 : 389])\n        rotate([0, 0, a])\n        translate([0, 0, -1])\n        cube([40, 1, 5], center = true);\n}\n\ngasket();",
    "renders": true
  },
  {
    "mechanical_component": "thrustwasher",
    "openscad_code": "// Thrust washer - medium complexity realistic style\n// Overall OD 100 mm, ID 50 mm, thickness 8 mm with lubrication grooves\n\n$fn = 64; // smoother curves\n\nmodule washer_profile() {\n    difference() {\n        // outer ring\n        cylinder(h = 8, d = 100, center = true);\n        // central hole\n        cylinder(h = 10, d = 50, center = true);\n    }\n}\n\nmodule chamfers() {\n    // top outer chamfer 45°\n    translate([0, 0, 4])\n    rotate_extrude(angle = 360)\n    translate([48, 0, 0])\n    polygon(points = [[0, 0], [2, 0], [0, 2]]);\n    \n    // bottom outer chamfer 45°\n    translate([0, 0, -4])\n    rotate_extrude(angle = 360)\n    translate([48, 0, 0])\n    mirror([0, 1])\n    polygon(points = [[0, 0], [2, 0], [0, 2]]);\n    \n    // top inner chamfer 45°\n    translate([0, 0, 4])\n    rotate_extrude(angle = 360)\n    translate([23, 0, 0])\n    mirror([1, 0])\n    polygon(points = [[0, 0], [2, 0], [0, 2]]);\n    \n    // bottom inner chamfer 45°\n    translate([0, 0, -4])\n    rotate_extrude(angle = 360)\n    translate([23, 0, 0])\n    mirror([0, 1])\n    mirror([1, 0])\n    polygon(points = [[0, 0], [2, 0], [0, 2]]);\n}\n\nmodule radial_grooves() {\n    // 8 radial lubrication grooves 2 mm wide, 1 mm deep\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([37.5, 0, 0])\n        cube([25, 2, 1], center = true);\n    }\n}\n\nmodule tangential_notches() {\n    // 4 shallow tangential notches for anti-rotation keys\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 15])\n        translate([48, 0, 0])\n        rotate([0, 0, 75])\n        cube([8, 3, 8], center = true);\n    }\n}\n\nmodule surface_texture() {\n    // fine concentric ridges for oil retention\n    for (r = [27:2:47]) {\n        rotate_extrude(angle = 360)\n        translate([r, 0, 0])\n        square([0.5, 8], center = true);\n    }\n}\n\nunion() {\n    difference() {\n        union() {\n            washer_profile();\n            chamfers();\n        }\n        radial_grooves();\n        tangential_notches();\n    }\n    surface_texture();\n}",
    "renders": true
  },
  {
    "mechanical_component": "spacer",
    "openscad_code": "// Spacer Mechanical Component\n// Realistic style, medium complexity\n// For 3D printing - proper wall thickness and no overhangs\n\n// Main parameters\n$fn = 50;\nspacer_height = 25;\nspacer_outer_diameter = 50;\nspacer_inner_diameter = 25;\nmount_hole_diameter = 5.5;\nmount_hole_offset = 20;\n\n// Material thickness\nwall_thickness = 2;\n\n// Flanges\ntop_flange_thickness = 3;\ntop_flange_diameter = 60;\nbottom_flange_thickness = 3;\nbottom_flange_diameter = 60;\n\n// Strengthening ribs\nnum_ribs = 6;\nrib_thickness = 2;\nrib_height = 10;\n\n// Lightening holes\nlightening_holes = 4;\nhole_diameter = 8;\n\n// Main module\nmodule spacer() {\n    // Main spacer body - hollow cylinder\n    difference() {\n        // Outer cylinder\n        cylinder(h = spacer_height, d = spacer_outer_diameter, center = true);\n        \n        // Inner hole\n        cylinder(h = spacer_height + 1, d = spacer_inner_diameter, center = true);\n    }\n    \n    // Top mounting flange\n    translate([0, 0, spacer_height/2 + top_flange_thickness/2]) {\n        difference() {\n            // Flange base\n            cylinder(h = top_flange_thickness, d = top_flange_diameter);\n            \n            // Counterbore for screw head\n            cylinder(h = top_flange_thickness + 1, d = spacer_inner_diameter);\n            \n            // Mounting holes\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90]) {\n                    translate([mount_hole_offset, 0, 0]) {\n                        cylinder(h = top_flange_thickness + 1, d = mount_hole_diameter);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Bottom mounting flange\n    translate([0, 0, -spacer_height/2 - bottom_flange_thickness/2]) {\n        mirror([0, 0, 1]) {\n            difference() {\n                // Flange base\n                cylinder(h = bottom_flange_thickness, d = bottom_flange_diameter);\n                \n                // Counterbore\n                cylinder(h = bottom_flange_thickness + 1, d = spacer_inner_diameter);\n                \n                // Mounting holes\n                for(i = [0:3]) {\n                    rotate([0, 0, i * 90 + 45]) {\n                        translate([mount_hole_offset, 0, 0]) {\n                            cylinder(h = bottom_flange_thickness + 1, d = mount_hole_diameter);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Strengthening ribs between flanges\n    for(i = [0:num_ribs-1]) {\n        rotate([0, 0, i * 360/num_ribs]) {\n            translate([-rib_thickness/2, -spacer_outer_diameter/2 + wall_thickness, 0]) {\n                cube([rib_thickness, spacer_outer_diameter/2 - wall_thickness, rib_height], center = true);\n            }\n        }\n    }\n    \n    // Lightening holes in top flange\n    translate([0, 0, spacer_height/2 + top_flange_thickness/2]) {\n        for(i = [0:lightening_holes-1]) {\n            rotate([0, 0, i * 360/lightening_holes + 22.5]) {\n                translate([top_flange_diameter/2 - 8, 0, 0]) {\n                    cylinder(h = top_flange_thickness + 1, d = hole_diameter);\n                }\n            }\n        }\n    }\n    \n    // Lightening holes in bottom flange\n    translate([0, 0, -spacer_height/2 - bottom_flange_thickness/2]) {\n        mirror([0, 0, 1]) {\n            for(i = [0:lightening_holes-1]) {\n                rotate([0, 0, i * 360/lightening_holes + 22.5]) {\n                    translate([bottom_flange_diameter/2 - 8, 0, 0]) {\n                        cylinder(h = bottom_flange_thickness + 1, d = hole_diameter);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Chamfers on outer edges\n    difference() {\n        // Main body with chamfer\n        union() {\n            cylinder(h = spacer_height - 2, d = spacer_outer_diameter - 2, center = true);\n            translate([0, 0, spacer_height/2 - 1]) {\n                cylinder(h = 2, d1 = spacer_outer_diameter - 2, d2 = spacer_outer_diameter);\n            }\n            translate([0, 0, -spacer_height/2 + 1]) {\n                cylinder(h = 2, d1 = spacer_outer_diameter, d2 = spacer_outer_diameter - 2);\n            }\n        }\n        \n        // Inner hole remains cylindrical\n        cylinder(h = spacer_height + 2, d = spacer_inner_diameter, center = true);\n    }\n}\n\n// Create the spacer\nspacer();",
    "renders": true
  },
  {
    "mechanical_component": "snapring",
    "openscad_code": "// External retaining snap ring (DIN 471 style)\n// 60 mm bore, 2 mm wire thickness, 12 mm width\n\nmodule snap_ring() {\n    thickness = 2;       // 2 mm wire thickness\n    ring_dia  = 60;      // 60 mm bore diameter\n    width     = 12;      // 12 mm axial width\n    gap       = 3;       // 3 mm opening gap\n    ears      = 8;       // 8 mm lug height\n    ear_w     = 8;       // 8 mm lug width\n    fillet_r  = 1;       // 1 mm edge fillet radius\n    \n    // Main ring body\n    difference() {\n        // Solid torus sector\n        rotate_extrude(angle = 360 - degrees(gap/(ring_dia/2)))\n            translate([ring_dia/2, 0, 0])\n                square([thickness, width], center = true);\n        \n        // Central bore\n        rotate_extrude(angle = 360)\n            translate([(ring_dia - 2*thickness)/2, 0, 0])\n                square([thickness + 0.1, width + 0.2], center = true);\n        \n        // Gap cut\n        rotate([0, 90, 0])\n            translate([0, 0, -width/2 - 0.1])\n                cube([ring_dia + 2, gap + 0.2, width + 0.2], center = true);\n    }\n    \n    // Mounting lugs (two symmetrical)\n    for (side = [0, 1]) {\n        mirror([0, side ? 1 : 0, 0])\n            translate([0, ring_dia/2, 0])\n                difference() {\n                    // Main lug body\n                    translate([0, ears/2, 0])\n                        cube([ear_w, ears, width], center = true);\n                    \n                    // Hole in lug\n                    translate([0, ears - 2, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h = ear_w + 0.2, r = 2, center = true);\n                    \n                    // Chamfers\n                    translate([0, ears, -width/2])\n                        rotate([0, -45, 0])\n                            cube([ear_w + 0.2, ears, 2], center = false);\n                    translate([0, ears,  width/2])\n                        rotate([0, 45, 0])\n                            cube([ear_w + 0.2, ears, 2], center = false);\n                }\n    }\n    \n    // Small locating dimple every 30°\n    for (a = [0 : 30 : 330]) {\n        rotate([0, 0, a])\n            translate([ring_dia/2 - thickness/2, 0, 0])\n                sphere(r = 0.5, $fn = 8);\n    }\n}\n\nsnap_ring();",
    "renders": true
  },
  {
    "mechanical_component": "retainer",
    "openscad_code": "// Retainer Mechanical Component - Realistic Style\n// Medium complexity structural retainer bracket for 3D printing\n\n$fn = 32;\nwall_thickness = 2;\nbase_width = 80;\nbase_height = 60;\nbase_depth = 50;\nmounting_hole_diameter = 4.2;\nmounting_hole_spacing = 25;\nslot_width = 20;\nslot_depth = 30;\nslot_height = 3;\n\n// Main base plate with rounded edges\nmodule base_plate() {\n    difference() {\n        // Main body with rounded corners\n        union() {\n            translate([0, 0, wall_thickness/2])\n            minkowski() {\n                cube([base_width, base_height, wall_thickness], center=true);\n                cylinder(r=wall_thickness, h=0.01, center=true);\n            }\n            \n            // Reinforcement ribs\n            for(i = [-mounting_hole_spacing, 0, mounting_hole_spacing]) {\n                translate([i, base_height/2 - wall_thickness, wall_thickness])\n                cube([wall_thickness*2, wall_thickness*2, base_depth/2]);\n                \n                translate([i, -base_height/2 + wall_thickness, wall_thickness])\n                cube([wall_thickness*2, wall_thickness*2, base_depth/2]);\n            }\n        }\n        \n        // Mounting holes\n        for(i = [-mounting_hole_spacing, 0, mounting_hole_spacing]) {\n            translate([i, mounting_hole_spacing, 0])\n            cylinder(h=wall_thickness*2, r=mounting_hole_diameter/2, center=true);\n            \n            translate([i, -mounting_hole_spacing, 0])\n            cylinder(h=wall_thickness*2, r=mounting_hole_diameter/2, center=true);\n        }\n    }\n}\n\n// Retention slot for holding components\nmodule retention_slot() {\n    difference() {\n        // Slot body\n        translate([0, 0, wall_thickness + slot_depth/2])\n        cube([slot_width, wall_thickness*3, slot_depth], center=true);\n        \n        // Actual slot opening\n        translate([0, 0, wall_thickness + slot_depth/2])\n        cube([slot_width - wall_thickness*2, slot_width - wall_thickness*2, slot_depth + 1], center=true);\n        \n        // Fillets at slot entrance\n        translate([0, 0, wall_thickness])\n        rotate([90, 0, 0])\n        cylinder(h=slot_width - wall_thickness*2, r=wall_thickness, center=true);\n        \n        translate([0, 0, wall_thickness + slot_depth])\n        rotate([90, 0, 0])\n        cylinder(h=slot_width - wall_thickness*2, r=wall_thickness, center=true);\n    }\n}\n\n// Support arms for structural integrity\nmodule support_arms() {\n    union() {\n        // Left support arm\n        translate([-base_width/2 + wall_thickness, 0, base_depth/2])\n        rotate([0, -45, 0])\n        cube([wall_thickness*2, base_height/2, wall_thickness*2]);\n        \n        // Right support arm\n        translate([base_width/2 - wall_thickness, 0, base_depth/2])\n        rotate([0, 45, 0])\n        cube([wall_thickness*2, base_height/2, wall_thickness*2]);\n        \n        // Cross brace\n        translate([0, base_height/2 - wall_thickness*2, base_depth/2])\n        rotate([90, 0, 0])\n        cylinder(h=base_width - wall_thickness*4, r=wall_thickness, center=true);\n    }\n}\n\n// Anti-slip pads\nmodule anti_slip_pads() {\n    for(x = [-base_width/2 + 10, base_width/2 - 10]) {\n        for(y = [-base_height/2 + 10, base_height/2 - 10]) {\n            translate([x, y, -wall_thickness])\n            cylinder(h=wall_thickness/2, r=wall_thickness*1.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_plate();\n    retention_slot();\n    support_arms();\n    anti_slip_pads();\n}",
    "renders": true
  },
  {
    "mechanical_component": "bushing",
    "openscad_code": "// Flanged bronze-style bushing with grease grooves and set-screw\n// Overall size: 40 mm OD × 35 mm long, flange Ø60 mm × 6 mm thick\nmodule bushing() {\n    /* 1. Main sleeve body */\n    difference() {\n        cylinder(h = 35, d = 40, $fn = 90);          // outer sleeve\n        cylinder(h = 37, d = 25, $fn = 90);          // inner bore (overshoot for clean ends)\n    }\n\n    /* 2. Flange at the top */\n    translate([0, 0, 35])\n    difference() {\n        cylinder(h = 6, d = 60, $fn = 90);           // flange\n        cylinder(h = 7, d = 25, $fn = 90);           // continue bore\n    }\n\n    /* 3. Grease distribution grooves (3 semi-circular channels) */\n    for (a = [0:120:240])\n        rotate([0, 0, a])\n            translate([0, 20.5, 5])\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h = 25, d = 3, $fn = 20); // half-cyl groove\n                        translate([0, -3, 0])\n                            cube([20, 6, 25], center = true); // remove lower half\n                    }\n\n    /* 4. Grease hole from flange into sleeve */\n    translate([20, 0, 35 + 3])\n        rotate([0, 90, 0])\n            cylinder(h = 10, d = 4, $fn = 20);\n\n    /* 5. Set-screw boss on flange */\n    translate([-30, 0, 35 + 3])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 10, d = 6, $fn = 20);       // boss\n            cylinder(h = 11, d = 3.5, $fn = 20);     // M4 set-screw hole\n        }\n\n    /* 6. Fillet under flange */\n    translate([0, 0, 29])\n        cylinder(h1 = 6, h2 = 0, d1 = 40, d2 = 44, $fn = 90);\n}\n\nbushing();",
    "renders": true
  },
  {
    "mechanical_component": "needlebearing",
    "openscad_code": "// OpenSCAD Needle Bearing (Roller Bearing with Needle Rollers)\n// Outer diameter: 70mm, Inner diameter: 40mm, Width: 25mm\n// Wall thickness: 2mm, printable without supports\n\n$fn = 36;  // Facet count for smoother curved surfaces\n\n// Overall dimensions\nouter_d = 70;\ninner_d = 40;\nwidth = 25;\nwall = 2;\n\n// Roller parameters\nroller_d = 4;\nroller_L = width - 2*wall;\nroller_count = 18;\nroller_clear = 0.5;\n\n// Bearing cage (outer ring)\nmodule outer_ring() {\n    difference() {\n        cylinder(h = width, d = outer_d, center = true);\n        translate([0, 0, 0])\n            cylinder(h = width + 2, d = outer_d - 2*wall, center = true);\n    }\n}\n\n// Bearing cage (inner ring)\nmodule inner_ring() {\n    difference() {\n        cylinder(h = width, d = inner_d + 2*wall, center = true);\n        translate([0, 0, 0])\n            cylinder(h = width + 2, d = inner_d, center = true);\n    }\n}\n\n// Single needle roller\nmodule needle_roller() {\n    rotate([90, 0, 0])  // Align roller along Z before positioning\n        cylinder(h = roller_L, d = roller_d, center = true);\n}\n\n// Cage disc - thin disc with holes to keep rollers spaced\nmodule cage_disc() {\n    difference() {\n        cylinder(h = wall, d = (outer_d + inner_d)/2 + wall, center = true);\n        // Center hole for shaft\n        cylinder(h = wall + 2, d = inner_d + 2*roller_d, center = true);\n        // Roller holes\n        for(i = [0 : roller_count-1]) {\n            angle = i * 360 / roller_count;\n            translate([(outer_d + inner_d)/4, 0, 0])\n                rotate([0, 0, angle])\n                cylinder(h = wall + 2, d = roller_d + roller_clear, center = true);\n        }\n    }\n}\n\n// Full bearing assembly\nmodule needle_bearing() {\n    union() {\n        // Outer ring\n        outer_ring();\n        \n        // Inner ring\n        inner_ring();\n        \n        // Rollers\n        for(i = [0 : roller_count-1]) {\n            angle = i * 360 / roller_count;\n            radius = (outer_d + inner_d)/4;\n            translate([radius * cos(angle), radius * sin(angle), 0])\n                rotate([0, 0, angle])\n                needle_roller();\n        }\n        \n        // Two cage discs to hold rollers in place\n        translate([0, 0, (width - wall)/2])\n            cage_disc();\n        translate([0, 0, -(width - wall)/2])\n            cage_disc();\n    }\n}\n\n// Render the complete bearing\nneedle_bearing();",
    "renders": true
  },
  {
    "mechanical_component": "ballbearing",
    "openscad_code": "// Ball Bearing - Realistic Style, Medium Complexity\n// Outer dimensions: 100mm OD, 60mm ID, 20mm width\n// All dimensions in mm\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main module\nmodule ball_bearing() {\n    // Outer ring\n    outer_ring();\n    \n    // Inner ring\n    inner_ring();\n    \n    // Ball cage with balls\n    ball_cage();\n    \n    // Seals (optional covers)\n    seals();\n}\n\n// Outer ring with races\nmodule outer_ring() {\n    difference() {\n        // Main outer cylinder\n        cylinder(h = 20, r = 50, center = true);\n        \n        // Inner bore\n        cylinder(h = 22, r = 43, center = true);\n        \n        // Ball race (groove)\n        translate([0, 0, 0])\n            rotate_extrude(angle = 360)\n                translate([46.5, 0, 0])\n                    circle(r = 3.5);\n    }\n    \n    // Chamfers on edges\n    difference() {\n        cylinder(h = 20, r = 50, center = true);\n        // Top chamfer\n        translate([0, 0, 10])\n            cylinder(h = 2, r1 = 50, r2 = 48, center = false);\n        // Bottom chamfer\n        translate([0, 0, -10])\n            cylinder(h = 2, r1 = 48, r2 = 50, center = false);\n    }\n}\n\n// Inner ring with races\nmodule inner_ring() {\n    difference() {\n        // Main inner cylinder\n        cylinder(h = 20, r = 30, center = true);\n        \n        // Central bore\n        cylinder(h = 22, r = 25, center = true);\n        \n        // Ball race (groove)\n        translate([0, 0, 0])\n            rotate_extrude(angle = 360)\n                translate([33.5, 0, 0])\n                    circle(r = 3.5);\n    }\n    \n    // Chamfers on edges\n    difference() {\n        cylinder(h = 20, r = 30, center = true);\n        // Top chamfer\n        translate([0, 0, 10])\n            cylinder(h = 2, r1 = 30, r2 = 28, center = false);\n        // Bottom chamfer\n        translate([0, 0, -10])\n            cylinder(h = 2, r1 = 28, r2 = 30, center = false);\n    }\n}\n\n// Ball cage with balls\nmodule ball_cage() {\n    // Cage\n    difference() {\n        // Main cage ring\n        cylinder(h = 10, r1 = 42, r2 = 38, center = true);\n        \n        // Ball pockets (8 balls)\n        for (i = [0 : 7]) {\n            rotate([0, 0, i * 45])\n                translate([40, 0, 0])\n                    sphere(r = 4.2);\n        }\n    }\n    \n    // Balls\n    for (i = [0 : 7]) {\n        rotate([0, 0, i * 45])\n            translate([40, 0, 0])\n                sphere(r = 4);\n    }\n}\n\n// Seals on both sides\nmodule seals() {\n    // Top seal\n    translate([0, 0, 8])\n        difference() {\n            cylinder(h = 2, r = 49, r1 = 49, r2 = 47, center = true);\n            cylinder(h = 3, r = 26, center = true);\n        }\n    \n    // Bottom seal\n    translate([0, 0, -8])\n        difference() {\n            cylinder(h = 2, r = 49, r1 = 49, r2 = 47, center = true);\n            cylinder(h = 3, r = 26, center = true);\n        }\n}\n\n// Generate the bearing\nball_bearing();",
    "renders": true
  },
  {
    "mechanical_component": "rollerbearing",
    "openscad_code": "// Realistic Roller Bearing - 608 type (22mm OD, 8mm ID, 7mm width)\n// Medium complexity with proper proportions for 3D printing\n\n$fn = 50;  // Smooth curves\n\n// Overall dimensions\nouter_diameter = 22;\ninner_diameter = 8;\nbearing_width = 7;\nball_diameter = 3;\nball_count = 7;\nwall_thickness = 2;\n\n// Main module\nmodule roller_bearing() {\n    difference() {\n        // Outer ring\n        union() {\n            // Outer race\n            difference() {\n                cylinder(h=bearing_width, d=outer_diameter, center=true);\n                cylinder(h=bearing_width+1, d=outer_diameter-wall_thickness*2, center=true);\n            }\n            \n            // Outer race groove\n            translate([0, 0, 0])\n            difference() {\n                cylinder(h=bearing_width*0.6, d=outer_diameter-wall_thickness*2+ball_diameter*0.8, center=true);\n                cylinder(h=bearing_width*0.61, d=outer_diameter-wall_thickness*2, center=true);\n            }\n            \n            // Outer chamfers\n            translate([0, 0, bearing_width/2])\n            cylinder(h=1, d1=outer_diameter, d2=outer_diameter-wall_thickness/2, center=false);\n            translate([0, 0, -bearing_width/2])\n            cylinder(h=1, d1=outer_diameter, d2=outer_diameter-wall_thickness/2, center=false);\n        }\n        \n        // Inner ring and balls\n        union() {\n            // Inner race\n            difference() {\n                cylinder(h=bearing_width, d=inner_diameter+wall_thickness*2, center=true);\n                cylinder(h=bearing_width+1, d=inner_diameter, center=true);\n            }\n            \n            // Inner race groove\n            translate([0, 0, 0])\n            difference() {\n                cylinder(h=bearing_width*0.6, d=inner_diameter+wall_thickness*2-ball_diameter*0.8, center=true);\n                cylinder(h=bearing_width*0.61, d=inner_diameter+wall_thickness*2, center=true);\n            }\n            \n            // Inner chamfers\n            translate([0, 0, bearing_width/2])\n            cylinder(h=1, d1=inner_diameter, d2=inner_diameter+wall_thickness/2, center=false);\n            translate([0, 0, -bearing_width/2])\n            cylinder(h=1, d1=inner_diameter, d2=inner_diameter+wall_thickness/2, center=false);\n            \n            // Balls\n            for(i = [0:ball_count-1]) {\n                rotate([0, 0, i*360/ball_count])\n                translate([(outer_diameter+inner_diameter)/4, 0, 0])\n                sphere(d=ball_diameter);\n            }\n            \n            // Ball cage\n            translate([0, 0, 0])\n            difference() {\n                cylinder(h=bearing_width*0.4, d=(outer_diameter+inner_diameter)/2+ball_diameter*0.3, center=true);\n                cylinder(h=bearing_width*0.41, d=(outer_diameter+inner_diameter)/2-ball_diameter*0.3, center=true);\n                \n                // Ball holes\n                for(i = [0:ball_count-1]) {\n                    rotate([0, 0, i*360/ball_count])\n                    translate([(outer_diameter+inner_diameter)/4, 0, 0])\n                    sphere(d=ball_diameter+0.2);\n                }\n            }\n        }\n    }\n    \n    // Seals\n    translate([0, 0, bearing_width/2-0.5])\n    difference() {\n        cylinder(h=0.5, d=outer_diameter-1, center=true);\n        cylinder(h=0.51, d=inner_diameter+1, center=true);\n    }\n    \n    translate([0, 0, -bearing_width/2+0.5])\n    difference() {\n        cylinder(h=0.5, d=outer_diameter-1, center=true);\n        cylinder(h=0.51, d=inner_diameter+1, center=true);\n    }\n}\n\n// Render the bearing\nroller_bearing();",
    "renders": true
  },
  {
    "mechanical_component": "taperedbearing",
    "openscad_code": "// Tapered roller bearing – medium complexity, realistic style\n// Overall Ø90 mm × 36 mm, 2 mm minimum walls, printable without supports\n\n$fn = 64;           // smooth curves\n\n// ===== PARAMETERS ===========================================================\nOR        = 45;     // outer race outer radius\nIR        = 25;     // inner race inner radius\nW         = 36;     // total width\nTAPER     = 0.35;   // roller cone angle (tan)\nROLLERS   = 15;     // number of tapered rollers\nR_W       = 8;      // roller length (along cone axis)\nCAGE_T    = 1.5;    // cage web thickness\nWALL      = 2.0;    // printable wall thickness everywhere\n\n// ===== MODULES ==============================================================\nmodule outer_race() {\n    // main outer cylinder\n    difference() {\n        cylinder(h = W, r = OR);\n        // central bore with taper for rollers\n        translate([0,0,-0.1])\n            cylinder(h = W+0.2,\n                     r1 = OR-5,\n                     r2 = OR-5-TAPER*(W-2*WALL));\n    }\n    // small chamfers for printability\n    translate([0,0,-0.1])\n        cylinder(h = 2, r1 = OR, r2 = OR-2);\n    translate([0,0,W-2])\n        cylinder(h = 2, r1 = OR-2, r2 = OR);\n}\n\nmodule inner_race() {\n    // main inner cone\n    difference() {\n        // cone matching roller taper\n        cylinder(h = W-2*WALL, r1 = IR+WALL, r2 = IR+WALL+TAPER*(W-2*WALL));\n        // central shaft bore\n        cylinder(h = W, r = IR);\n    }\n    // shoulders\n    translate([0,0,-0.1])\n        cylinder(h = WALL+0.1, r = IR+WALL+TAPER*(W-2*WALL));\n    translate([0,0,W-WALL])\n        cylinder(h = WALL+0.1, r = IR+WALL+TAPER*(W-2*WALL));\n}\n\nmodule single_roller(id=0) {\n    // tapered roller body\n    rotate([0,0,id*360/ROLLERS])\n    translate([0, (OR+IR)/2, W/2])\n    rotate([90,0,0])\n    cylinder(h = R_W, r1 = 4, r2 = 4-TAPER*R_W, center=true);\n}\n\nmodule cage() {\n    // two ring webs with bridges\n    difference() {\n        union() {\n            // upper web\n            translate([0,0,W/2+R_W/2+CAGE_T/2])\n                cylinder(h = CAGE_T, r = OR-3*CAGE_T);\n            // lower web\n            translate([0,0,W/2-R_W/2-CAGE_T/2])\n                cylinder(h = CAGE_T, r = OR-3*CAGE_T);\n            // bridges between webs\n            for(i=[0:ROLLERS-1])\n                rotate([0,0,i*360/ROLLERS])\n                translate([(OR+IR)/2,0,W/2])\n                cube([CAGE_T, 6, R_W+CAGE_T], center=true);\n        }\n        // clearances\n        cylinder(h = W+1, r = IR+WALL+2);\n        cylinder(h = W+1, r = OR-2*CAGE_T);\n    }\n}\n\n// ===== ASSEMBLY =============================================================\nunion() {\n    outer_race();\n    inner_race();\n    cage();\n    // rollers inside cage\n    for(i=[0:ROLLERS-1])\n        single_roller(i);\n}",
    "renders": true
  },
  {
    "mechanical_component": "sphericalbearing",
    "openscad_code": "// Spherical bearing (self-aligning pillow-block style)\n// Overall footprint ≈ 80×60×70 mm\n\n// --- Parameters ---------------------------------------------------------------\n$fa = 2; $fs = 0.5;  // smooth spheres\nwall = 2;            // printable wall thickness\nbolt_d = 4;          // mounting bolt diameter\nball_d = 30;         // spherical ball OD\nhousing_d = 42;      // outer race OD\ninner_lip = 3;       // inner race lip for shaft retention\nshaft_d = 10;        // shaft bore\nbase_l = 80; base_w = 60; base_h = 15;\n\n// --- Modules ------------------------------------------------------------------\nmodule mounting_holes() {\n    // Two M4 mounting holes\n    for(x=[-base_l/2+10, base_l/2-10], y=[-base_w/2+10, base_w/2-10])\n        translate([x,y,-1])\n            cylinder(d=bolt_d+1, h=base_h+2, $fn=12);\n}\n\nmodule base() {\n    difference() {\n        // Main block\n        cube([base_l, base_w, base_h], center=true);\n        // Lightening recesses\n        translate([0,0,2])\n            cube([base_l-wall*2, base_w-wall*2, base_h-4], center=true);\n        mounting_holes();\n    }\n}\n\nmodule outer_race() {\n    difference() {\n        // Housing shell\n        sphere(d=housing_d);\n        // Spherical cavity for ball\n        sphere(d=ball_d+1.5);\n        // Split line gap for assembly\n        rotate([90,0,0])\n            cube([housing_d+2, 2, housing_d+2], center=true);\n    }\n}\n\nmodule inner_race() {\n    difference() {\n        union() {\n            // Main inner race\n            sphere(d=ball_d-1);\n            // Cylindrical shaft sleeve\n            rotate([0,90,0])\n                cylinder(d=shaft_d+wall*2, h=ball_d, center=true);\n        }\n        // Shaft bore\n        rotate([0,90,0])\n            cylinder(d=shaft_d, h=ball_d+2, center=true);\n        // Split line gap\n        rotate([90,0,0])\n            cube([ball_d+2, 2, ball_d+2], center=true);\n    }\n}\n\nmodule grease_nipple() {\n    // Zerk grease fitting stub\n    translate([0, housing_d/2, 0])\n        rotate([90,0,0])\n            cylinder(d1=5, d2=3, h=6);\n}\n\n// --- Assembly -----------------------------------------------------------------\nunion() {\n    // Base plate\n    base();\n\n    // Bearing housing on top\n    translate([0, 0, base_h/2+housing_d/2])\n        outer_race();\n\n    // Grease nipple detail\n    translate([0, 0, base_h/2+housing_d/2])\n        grease_nipple();\n\n    // Inner race with ball\n    translate([0, 0, base_h/2+housing_d/2])\n        inner_race();\n}",
    "renders": true
  },
  {
    "mechanical_component": "journalbearing",
    "openscad_code": "// Journal Bearing - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness (2mm)\n\n$fn = 36;\n\n// Main parameters\nbearing_diameter = 60;\nbearing_length = 40;\nshaft_diameter = 30;\nbase_width = 80;\nbase_length = 100;\nbase_height = 20;\nbolt_hole_diameter = 8;\n\n// Bearing housing\nmodule bearing_housing() {\n    difference() {\n        // Main cylindrical housing\n        cylinder(h=bearing_length, d=bearing_diameter + 8, center=true);\n        \n        // Inner bore for shaft\n        cylinder(h=bearing_length + 1, d=shaft_diameter, center=true);\n        \n        // Lubrication groove\n        rotate([90,0,0])\n            translate([0, 0, bearing_length/4])\n                cube([2, bearing_diameter + 10, bearing_length/2], center=true);\n    }\n}\n\n// Mounting base with ribs\nmodule mounting_base() {\n    difference() {\n        union() {\n            // Main base plate\n            translate([0, 0, -base_height/2])\n                cube([base_length, base_width, base_height], center=true);\n            \n            // Center support block\n            translate([0, 0, base_height/2])\n                cube([bearing_diameter + 8, bearing_diameter + 8, bearing_length/2], center=true);\n            \n            // Reinforcement ribs\n            for(i=[-1, 1]) {\n                translate([i * (base_length/4), 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=base_width/2 - bearing_diameter/2 - 4, d=10, center=true);\n            }\n        }\n        \n        // Mounting bolt holes\n        for(x=[-1, 1])\n            for(y=[-1, 1])\n                translate([x * base_length/3, y * base_width/3, -base_height/2])\n                    cylinder(h=base_height + 1, d=bolt_hole_diameter);\n    }\n}\n\n// Bearing cap with bolts\nmodule bearing_cap() {\n    difference() {\n        union() {\n            // Main cap body\n            translate([0, 0, bearing_length/2 + 5])\n                cylinder(h=10, d=bearing_diameter + 8, center=true);\n            \n            // Bolt flanges\n            for(i=[0:3]) {\n                rotate([0, 0, i * 90])\n                    translate([bearing_diameter/2 + 10, 0, bearing_length/2 + 5])\n                        cube([20, 10, 10], center=true);\n            }\n        }\n        \n        // Cap bore\n        translate([0, 0, bearing_length/2 + 5])\n            cylinder(h=11, d=shaft_diameter + 4, center=true);\n        \n        // Cap bolt holes\n        for(i=[0:3]) {\n            rotate([0, 0, i * 90])\n                translate([bearing_diameter/2 + 10, 0, bearing_length/2 + 5])\n                    cylinder(h=11, d=5, center=true);\n        }\n    }\n}\n\n// Lubrication fittings\nmodule lube_fittings() {\n    // Top grease nipple\n    translate([0, -bearing_diameter/2 - 10, bearing_length/4])\n        rotate([90, 0, 0])\n            union() {\n                cylinder(h=8, d=6);\n                translate([0, 0, 4])\n                    sphere(d=8);\n            }\n    \n    // Side oil level indicator\n    translate([bearing_diameter/2 + 5, 0, -bearing_length/4])\n        union() {\n            cylinder(h=5, d=10);\n            translate([2.5, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=5, d=8);\n        }\n}\n\n// Assembly\nunion() {\n    // Main bearing assembly\n    bearing_housing();\n    mounting_base();\n    bearing_cap();\n    lube_fittings();\n    \n    // Alignment dowel pins (for assembly)\n    for(i=[0:1]) {\n        rotate([0, 0, i * 180])\n            translate([bearing_diameter/2 + 2, 0, bearing_length/4])\n                cylinder(h=5, d=4);\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "bushingbearing",
    "openscad_code": "// Flanged bronze bushing with internal grease grooves and external ribs\n// Wall thickness = 2 mm throughout\n// Overall OD = 40 mm, length = 35 mm, ID = 20 mm\n\n$fn = 60;\n\n// Main parameters\nd_ext = 40;             // outer diameter\nd_int = 20;             // inner diameter\nlength = 35;            // total length\nflange_thick = 5;       // flange thickness\nflange_d = 55;          // flange diameter\ngreove_width = 2.5;     // grease groove width\ngreove_depth = 1.0;     // grease groove depth\nrib_width = 3;          // external rib width\nrib_height = 1.5;       // rib height\nrib_count = 8;          // number of external ribs\nwall = 2;               // wall thickness for 3D printing\n\n// Convenience shorthand\nr_ext = d_ext/2;\nr_int = d_int/2;\n\n// Main sleeve body\nmodule sleeve() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = length, r = r_ext, center = false);\n        \n        // Inner hole\n        translate([0, 0, -0.1])\n            cylinder(h = length + 0.2, r = r_int, center = false);\n    }\n}\n\n// Flange at bottom\nmodule flange() {\n    difference() {\n        cylinder(h = flange_thick, r = flange_d/2, center = false);\n        \n        // Central hole through flange\n        translate([0, 0, -0.1])\n            cylinder(h = flange_thick + 0.2, r = r_int, center = false);\n    }\n}\n\n// Grease distribution grooves inside bore\nmodule grease_grooves() {\n    // Axial grooves\n    for (a = [0:120:359]) {\n        rotate([0, 0, a])\n            translate([r_int - greove_depth/2, 0, 0])\n                rotate([0, 90, 0])\n                    cube([greove_depth, greove_width, length], center = true);\n    }\n    \n    // Circumferential groove at mid-height\n    translate([0, 0, length/2])\n        rotate_extrude(angle = 360, $fn = 60)\n            translate([r_int + greove_depth/2, 0, 0])\n                square([greove_depth, greove_width], center = true);\n}\n\n// External cooling / anti-rotation ribs\nmodule external_ribs() {\n    for (a = [0:360/rib_count:359]) {\n        rotate([0, 0, a])\n            translate([r_ext + rib_height/2, 0, length/2])\n                cube([rib_height, rib_width, length - 2*flange_thick], center = true);\n    }\n}\n\n// Combine all parts\nunion() {\n    // Sleeve and flange\n    union() {\n        sleeve();\n        flange();\n    }\n    \n    // Remove grease grooves from inner wall\n    difference() {\n        translate([0, 0, flange_thick])\n            cylinder(h = length - flange_thick, r = r_int + wall, center = false);\n        grease_grooves();\n    }\n    \n    // Add external ribs\n    external_ribs();\n}",
    "renders": true
  },
  {
    "mechanical_component": "thrustbearing",
    "openscad_code": "// Thrust bearing – medium-complexity, realistic style\n// Overall Ø120 mm, height 24 mm, 2 mm wall everywhere\n// Two races, one cage, twelve balls Ø10 mm, grease grooves\n// All printable without overhangs (no internal bridges)\n\n$fn = 48;\n\n// Main dimensions -----------------------------------------------------------\noverall_d  = 120;     // outside Ø\nshaft_d    = 60;      // shaft bore Ø\nheight     = 24;      // total stack height\nrace_thick = 8;       // single race thickness\nball_d     = 10;      // rolling element Ø\nballs      = 12;      // number of balls\ngroove_d   = 8;       // grease groove Ø × 2 mm\nwall       = 2;       // printable wall thickness\n\n// Helper modules ------------------------------------------------------------\nmodule race(upper=true){\n    // One annular race with grease groove on outer top surface\n    difference(){\n        cylinder(h = race_thick, r = overall_d/2, center=false);\n        translate([0,0,-0.1])\n            cylinder(h = race_thick+0.2, r = shaft_d/2, center=false);\n    }\n    // Grease groove\n    rotate([0,0,upper?0:180])\n    translate([0, 0, upper?race_thick-2:0])\n    for(i=[0:3])\n        rotate([0,0,i*120])\n        translate([(overall_d - groove_d)/4, 0, 0])\n        cylinder(h = 2.2, r = groove_d/2, center=false);\n}\n\nmodule cage(){\n    // 12 ball pockets, 2 mm thick cage walls\n    ring_r = (overall_d + shaft_d)/4;\n    pocket_r = ball_d/2 + wall;\n    difference(){\n        cylinder(h = height - 2*race_thick, r = ring_r + wall, center=true);\n        cylinder(h = height - 2*race_thick + 0.2, r = ring_r - wall, center=true);\n    }\n    // Pockets\n    for(i=[0:balls-1])\n        rotate([0,0,i*360/balls])\n        translate([ring_r, 0, 0])\n        rotate([90,0,0])\n        cylinder(h = 2*wall+0.2, r = pocket_r, center=true);\n}\n\nmodule balls_assembly(){\n    ring_r = (overall_d + shaft_d)/4;\n    for(i=[0:balls-1])\n        rotate([0,0,i*360/balls])\n        translate([ring_r, 0, 0])\n        sphere(r = ball_d/2);\n}\n\n// Build the bearing ---------------------------------------------------------\nunion(){\n    // Lower race\n    race(upper=false);\n    \n    // Cage\n    translate([0,0,race_thick])\n    cage();\n    \n    // Balls\n    translate([0,0,race_thick + (height-2*race_thick)/2])\n    balls_assembly();\n    \n    // Upper race\n    translate([0,0,height-race_thick])\n    race(upper=true);\n}",
    "renders": true
  },
  {
    "mechanical_component": "gearbox",
    "openscad_code": "// Realistic medium-complexity gearbox (approx. 90 mm long)\n\n$fn = 50;\n\nmodule housing() {\n    difference() {\n        // Main rectangular shell\n        translate([-20, -25, 0])\n            cube([40, 50, 35]);\n        \n        // Central bore Ø20 mm\n        translate([0, 0, -1])\n            cylinder(h = 37, d = 20);\n        \n        // Front bearing bore Ø15 mm\n        translate([0, 0, 34])\n            cylinder(h = 3, d = 15);\n        \n        // Rear bearing bore Ø15 mm\n        translate([0, 0, -2])\n            cylinder(h = 3, d = 15);\n    }\n}\n\nmodule side_flange() {\n    difference() {\n        // Flange plate\n        translate([-30, -30, 12])\n            cube([60, 60, 6]);\n        \n        // Bolt holes Ø4 mm\n        for (i = [-1, 1]) {\n            for (j = [-1, 1]) {\n                translate([i * 20, j * 20, 11])\n                    cylinder(h = 8, d = 4);\n            }\n        }\n        \n        // Central clearance Ø22 mm\n        translate([0, 0, 11])\n            cylinder(h = 8, d = 22);\n    }\n}\n\nmodule gear(teeth = 20, height = 8) {\n    union() {\n        // Gear blank\n        cylinder(h = height, d = teeth * 2.5);\n        \n        // Teeth (simplified)\n        for (i = [0 : teeth - 1]) {\n            rotate([0, 0, i * 360 / teeth])\n                translate([teeth * 1.25 - 1, -1.5, 0])\n                    cube([2, 3, height]);\n        }\n        \n        // Hub\n        cylinder(h = height + 2, d = 8);\n    }\n}\n\nmodule input_shaft() {\n    union() {\n        // Shaft Ø8 mm\n        cylinder(h = 70, d = 8);\n        \n        // Keyway slot\n        translate([4, -1.5, -1])\n            cube([2, 3, 72]);\n        \n        // Retaining ring groove\n        translate([0, 0, 30])\n            cylinder(h = 2, d = 7);\n    }\n}\n\nmodule output_shaft() {\n    union() {\n        // Shaft Ø10 mm\n        cylinder(h = 60, d = 10);\n        \n        // Keyway slot\n        translate([5, -1.5, -1])\n            cube([2, 3, 62]);\n        \n        // Retaining ring groove\n        translate([0, 0, 28])\n            cylinder(h = 2, d = 9);\n    }\n}\n\nmodule mounting_feet() {\n    for (x = [-15, 15]) {\n        translate([x, -35, -8])\n            cube([12, 8, 8]);\n        \n        // Mounting slot\n        translate([x, -39, -5])\n            cube([4, 8, 2]);\n    }\n}\n\n// Assembly\nunion() {\n    housing();\n    side_flange();\n    mounting_feet();\n    \n    // Input gear\n    translate([0, 0, 15])\n        rotate([0, 0, 15])\n        gear(20, 10);\n    \n    // Output gear\n    translate([0, 0, 25])\n        rotate([0, 0, -15 * 20 / 30])\n        gear(30, 10);\n    \n    // Input shaft\n    translate([0, 0, -30])\n        rotate([90, 0, 0])\n        input_shaft();\n    \n    // Output shaft\n    translate([0, 0, 35])\n        rotate([90, 0, 0])\n        output_shaft();\n}",
    "renders": true
  },
  {
    "mechanical_component": "housing",
    "openscad_code": "// Medium-complexity realistic 3D-printable housing for a 60 mm micro-controller module\n// Overall outer footprint: 80 × 60 × 35 mm\n\n// ---------- Parameters ----------\nwall = 2;               // uniform 2 mm wall thickness for 3D-printability\nouter_w = 80;\nouter_d = 60;\nouter_h = 35;\n\ninner_w = outer_w - 2*wall;\ninner_d = outer_d - 2*wall;\ninner_h = outer_h - wall;  // open top\n\npcb_w = 60;\npcb_d = 40;\npcb_h = 1.6;\n\nboss_r = 2.2;           // M2 screw boss radius\nboss_h = 6;\nboss_clear = 2.5;       // clearance hole radius\n\n// ---------- Main geometry ----------\ndifference() {\n    // ----- Outer shell -----\n    union() {\n        // Base box\n        cube([outer_w, outer_d, outer_h], center=false);\n\n        // Flange lip for lid seal\n        translate([0, 0, outer_h])\n            cube([outer_w, outer_d, wall], center=false);\n\n        // Rounded corners for realism (outer shell only)\n        for (x = [0, outer_w-wall]) {\n            for (y = [0, outer_d-wall]) {\n                translate([x+wall/2, y+wall/2, wall/2])\n                    sphere(r=wall/2, $fn=16);\n            }\n        }\n\n        // Mounting ears with holes\n        ear_len = 10;\n        ear_thick = wall;\n        for (side = [0, 1]) {\n            translate([side ? outer_w : -ear_len, outer_d/2-ear_len/2, 0])\n                cube([ear_len, ear_len, outer_h]);\n            translate([side ? outer_w+ear_len/2 : -ear_len/2, outer_d/2, outer_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h=ear_len+2*wall, r=2, center=true, $fn=20);\n        }\n    }\n\n    // ----- Inner cavity -----\n    translate([wall, wall, wall])\n        cube([inner_w, inner_d, inner_h], center=false);\n\n    // ----- PCB standoffs -----\n    standoff_x = (outer_w - pcb_w)/2;\n    standoff_y = (outer_d - pcb_d)/2;\n    for (x = [standoff_x, outer_w-standoff_x-boss_r*2]) {\n        for (y = [standoff_y, outer_d-standoff_y-boss_r*2]) {\n            translate([x+boss_r, y+boss_r, wall]) {\n                // Remove clearance hole\n                cylinder(h=boss_h+1, r=boss_clear, $fn=20);\n            }\n        }\n    }\n\n    // ----- Cable slot on back side -----\n    slot_w = 16;\n    slot_h = 10;\n    translate([outer_w/2-slot_w/2, -wall, wall])\n        cube([slot_w, wall+1, slot_h]);\n\n    // ----- Ventilation slits on bottom -----\n    slit_w = 2;\n    slit_gap = 4;\n    for (i = [0:floor(inner_w/slit_gap)-1]) {\n        translate([wall + slit_gap/2 + i*slit_gap, wall, 0])\n            cube([slit_w, inner_d, wall]);\n    }\n}\n\n// ---------- PCB standoff positive geometry ----------\nmodule standoff(x, y) {\n    translate([x, y, wall])\n        cylinder(h=boss_h, r=boss_r, $fn=16);\n}\n\nfor (x = [standoff_x, outer_w-standoff_x-boss_r*2]) {\n    for (y = [standoff_y, outer_d-standoff_y-boss_r*2]) {\n        standoff(x+boss_r, y+boss_r);\n    }\n}\n\n// ---------- Optional lid (comment out to print separately) ----------\n// Lid lip for press-fit\ntranslate([0, 0, outer_h+wall+2])\n    difference() {\n        cube([outer_w, outer_d, wall], center=false);\n        translate([wall/2, wall/2, -1])\n            cube([inner_w+wall, inner_d+wall, wall+2], center=false);\n    }",
    "renders": true
  },
  {
    "mechanical_component": "case",
    "openscad_code": "// Modular case for a small 35×65mm PCB / sensor module\n// Outer footprint: 80×60×35 mm, wall thickness 2 mm\n// Two M3 screw posts inside, snap-fit lid with living hinges\n// Ventilation slots on sides, cable notch in rear wall\n\n$fn = 36;          // smooth curves\nwall = 2;          // uniform wall thickness\ncase_w = 80;       // outside width\ncase_d = 60;       // outside depth\ncase_h = 35;       // outside height\nlip_h  = 3;        // top lip that lid snaps under\npcb_w  = 35;       // PCB width\npcb_d  = 65;       // PCB depth\n\n// Main shell (hollow box)\nmodule shell() {\n    difference() {\n        // outside block\n        cube([case_w, case_d, case_h], center=false);\n        \n        // cavity\n        translate([wall, wall, wall])\n            cube([case_w-2*wall, case_d-2*wall, case_h-wall], center=false);\n        \n        // rear cable notch (8×12 mm)\n        translate([case_w/2-4, case_d, case_h/2-6])\n            cube([8, wall+1, 12]);\n    }\n}\n\n// Internal M3 screw posts (4 mm OD, 3 mm hole)\nmodule posts() {\n    for (x = [case_w/2 - pcb_w/2 - 5, case_w/2 + pcb_w/2 + 5],\n         y = [case_d/2 - pcb_d/2 - 5, case_d/2 + pcb_d/2 + 5])\n    translate([x, y, wall])\n        difference() {\n            cylinder(h = case_h - 2*wall, d = 4);\n            translate([0,0,-0.1])\n                cylinder(h = case_h - 2*wall + 0.2, d = 3.2);\n        }\n}\n\n// Side ventilation slots (3×10 mm)\nmodule vents() {\n    slot_w = 3;\n    slot_h = 10;\n    step   = 6;\n    for (i = [0:3])\n        translate([wall-0.1, wall + 5 + i*step, wall + 5])\n            cube([0.2, slot_w, slot_h]);\n    mirror([1,0,0])\n        for (i = [0:3])\n            translate([wall-0.1, wall + 5 + i*step, wall + 5])\n                cube([0.2, slot_w, slot_h]);\n}\n\n// Snap-fit lid with living hinges\nmodule lid() {\n    lid_t = 1.2;               // lid thickness\n    over  = 0.4;               // overhang for snap\n    translate([0,0,case_h]) difference() {\n        // lid plate\n        cube([case_w, case_d, lid_t], center=false);\n        \n        // clearance recess\n        translate([wall, wall, -0.1])\n            cube([case_w-2*wall, case_d-2*wall, lid_t+0.2]);\n        \n        // snap bumps\n        translate([wall - over, wall, lid_t/2])\n            cube([over, case_d - 2*wall, 1]);\n        translate([case_w - wall, wall, lid_t/2])\n            cube([over, case_d - 2*wall, 1]);\n    }\n    \n    // living hinge tabs at rear\n    tab_l = 6;\n    tab_w = 8;\n    translate([case_w/2 - tab_w/2, case_d - tab_l, case_h - lid_t])\n        cube([tab_w, tab_l, lid_t]);\n}\n\n// Assemble parts\nshell();\nposts();\nvents();\ntranslate([0,0,0.5]) lid();",
    "renders": true
  },
  {
    "mechanical_component": "cover",
    "openscad_code": "// Motor Housing Cover\n// Realistic style, medium complexity\n// Approximate size: 120mm diameter, 80mm height\n\nwall_thickness = 2;\n\n// Main cover shell - domed shape with flat base\nmodule main_shell() {\n    difference() {\n        // Outer dome\n        translate([0, 0, 80/2])\n            scale([1, 1, 0.6])\n            sphere(d = 120, $fn = 64);\n        \n        // Flatten bottom\n        translate([0, 0, -1])\n            cube([200, 200, 80], center = true);\n        \n        // Inner cavity\n        translate([0, 0, 80/2])\n            scale([1, 1, 0.6])\n            sphere(d = 120 - wall_thickness*2, $fn = 64);\n    }\n}\n\n// Mounting flange with bolt holes\nmodule mounting_flange() {\n    difference() {\n        union() {\n            // Flange ring\n            cylinder(h = 8, d1 = 130, d2 = 130, center = true);\n            // Transition to dome\n            translate([0, 0, 4])\n                cylinder(h = 8, d1 = 130, d2 = 120, center = false);\n        }\n        \n        // Bolt holes - 4x M6\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([50, 0, 0])\n                    cylinder(h = 20, d = 7, center = true);\n        }\n    }\n}\n\n// Cooling fins array\nmodule cooling_fins() {\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([0, 0, 75])\n                rotate([0, 90, 0])\n                    translate([0, -2, -60])\n                        cube([60, 4, 1.5]);\n    }\n}\n\n// Cable gland boss\nmodule cable_entry() {\n    union() {\n        // Main boss\n        translate([0, -55, 40])\n            rotate([90, 0, 0])\n                cylinder(h = 20, d = 20, $fn = 20);\n        \n        // Tapered entry\n        translate([0, -55, 40])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d1 = 20, d2 = 16, $fn = 20);\n    }\n}\n\n// Ventilation slots\nmodule vent_slots() {\n    difference() {\n        // Ring for slots\n        rotate([0, 0, 15])\n            rotate_extrude(angle = 360, $fn = 64)\n                translate([55, 0, 0])\n                    square([10, wall_thickness]);\n        \n        // Slots\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                rotate_extrude(angle = 30, $fn = 32)\n                    translate([55, 0, 0])\n                        square([10, wall_thickness + 1]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    main_shell();\n    mounting_flange();\n    \n    // Details\n    translate([0, 0, -4])\n        mounting_flange();\n    \n    cooling_fins();\n    \n    // Position cable entry\n    cable_entry();\n    \n    // Ventilation around mid-section\n    translate([0, 0, 50])\n        vent_slots();\n}",
    "renders": true
  },
  {
    "mechanical_component": "sump",
    "openscad_code": "// Medium-complexity realistic sump\n// Overall footprint ≈ 80 x 60 x 100 mm, wall thickness 2 mm\n\n// Main sump body – open-top rectangular tank\nmodule sump_body() {\n    difference() {\n        // Outer shell\n        cube([80, 60, 100], center = true);\n        // Hollow cavity\n        translate([0, 0, 2])\n            cube([76, 56, 98], center = true);\n    }\n}\n\n// Bottom outlet spigot\nmodule outlet_spigot() {\n    translate([0, -31, -50])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d1 = 12, d2 = 8, $fn = 32);\n}\n\n// Top rim lip for rigidity\nmodule top_rim() {\n    translate([0, 0, 50])\n        difference() {\n            cube([84, 64, 4], center = true);\n            cube([78, 58, 6], center = true);\n        }\n}\n\n// Side brackets for mounting or handles\nmodule side_brackets() {\n    for (x = [-35, 35]) {\n        translate([x, 0, 20])\n            difference() {\n                cube([6, 8, 60], center = true);\n                translate([0, 0, 30])\n                    cube([2, 4, 58], center = true);\n            }\n    }\n}\n\n// Internal baffle plate\nmodule baffle() {\n    translate([0, -20, 0])\n        difference() {\n            cube([76, 2, 96], center = true);\n            translate([0, 0, 46])\n                cube([60, 4, 4], center = true);\n        }\n}\n\n// Fillet strips for print-ability\nmodule fillets() {\n    for (edge = [\n        [ 40,  30, 0],\n        [-40,  30, 0],\n        [ 40, -30, 0],\n        [-40, -30, 0]\n    ]) {\n        translate(edge)\n            cylinder(h = 100, r = 2, center = true, $fn = 16);\n    }\n}\n\n// Assembly\nunion() {\n    sump_body();\n    outlet_spigot();\n    top_rim();\n    side_brackets();\n    baffle();\n    fillets();\n}",
    "renders": true
  },
  {
    "mechanical_component": "pan",
    "openscad_code": "// Medium-complexity realistic frying pan\n// All dimensions in mm, wall thickness 2 mm for printability\n\n$fn = 36;  // smooth curves\n\n// Overall scale factor\nscale_factor = 1;\n\nmodule handle() {\n    // Handle tube\n    difference() {\n        // Outer tube\n        rotate([0, 90, 0])\n            cylinder(h = 100 * scale_factor, d1 = 25 * scale_factor, d2 = 28 * scale_factor, center = false);\n        \n        // Inner hole\n        rotate([0, 90, 0])\n            translate([0, 0, 2 * scale_factor])\n            cylinder(h = 96 * scale_factor, d1 = 21 * scale_factor, d2 = 24 * scale_factor, center = false);\n    }\n\n    // Handle grip rings\n    for (i = [1:3]) {\n        translate([(i * 25 - 10) * scale_factor, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 6 * scale_factor, d = 30 * scale_factor, center = true);\n    }\n}\n\nmodule pan_body() {\n    // Main pan body - shallow bowl\n    difference() {\n        // Outer bowl\n        rotate_extrude(angle = 360)\n            translate([0, 0, 0])\n            polygon([\n                [0, 0],\n                [90 * scale_factor, 0],\n                [90 * scale_factor, 2 * scale_factor],\n                [88 * scale_factor, 10 * scale_factor],\n                [75 * scale_factor, 20 * scale_factor],\n                [55 * scale_factor, 25 * scale_factor],\n                [35 * scale_factor, 27 * scale_factor],\n                [0, 27 * scale_factor]\n            ]);\n        \n        // Inner cavity\n        rotate_extrude(angle = 360)\n            translate([0, 0, 2 * scale_factor])\n            polygon([\n                [2 * scale_factor, 0],\n                [88 * scale_factor, 0],\n                [86 * scale_factor, 8 * scale_factor],\n                [73 * scale_factor, 18 * scale_factor],\n                [53 * scale_factor, 23 * scale_factor],\n                [33 * scale_factor, 25 * scale_factor],\n                [2 * scale_factor, 25 * scale_factor]\n            ]);\n    }\n\n    // Bottom base reinforcement\n    difference() {\n        cylinder(h = 4 * scale_factor, d = 90 * scale_factor, center = false);\n        cylinder(h = 6 * scale_factor, d = 86 * scale_factor, center = false);\n    }\n\n    // Handle joint reinforcement\n    translate([0, 0, 0])\n    difference() {\n        union() {\n            cylinder(h = 30 * scale_factor, d = 32 * scale_factor, center = false);\n            translate([-16 * scale_factor, 0, 15 * scale_factor])\n                cube([32 * scale_factor, 32 * scale_factor, 30 * scale_factor], center = true);\n        }\n        // Hole for handle\n        rotate([0, 90, 0])\n            cylinder(h = 34 * scale_factor, d = 25 * scale_factor, center = true);\n    }\n}\n\nmodule rivets() {\n    // Three rivets attaching handle\n    for (angle = [0:120:240]) {\n        rotate([0, 0, angle])\n        translate([45 * scale_factor, 0, 27 * scale_factor])\n            cylinder(h = 4 * scale_factor, d = 6 * scale_factor, center = false);\n    }\n}\n\nmodule pour_spouts() {\n    // Two pour spouts on sides\n    for (angle = [0:180:180]) {\n        rotate([0, 0, angle])\n        translate([90 * scale_factor, 0, 13.5 * scale_factor])\n            rotate([0, -30, 0])\n            cube([15 * scale_factor, 15 * scale_factor, 2 * scale_factor], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    pan_body();\n    translate([0, 0, 27 * scale_factor])\n        rotate([0, 180, 0])\n        handle();\n    rivets();\n    pour_spouts();\n}",
    "renders": true
  },
  {
    "mechanical_component": "filter",
    "openscad_code": "// Cartridge-style water filter housing – 3D-printable (no support)\n// Overall ~95 mm long, 75 mm diameter\n$fn = 36;\n\nmodule main_housing() {\n    // thick-walled cylinder (2 mm walls)\n    difference() {\n        cylinder(h = 80, d = 75);          // outer shell\n        translate([0, 0, -1])\n            cylinder(h = 82, d = 71);      // hollow core\n    }\n}\n\nmodule inlet_nut() {\n    // hex nut on inlet side\n    translate([0, 0, 80])\n    rotate([0, 0, 30])\n    difference() {\n        cylinder(h = 10, d = 55, $fn = 6);   // hex body\n        translate([0, 0, -1])\n            cylinder(h = 12, d = 15);        // 1/2\" BSP thread hole\n    }\n}\n\nmodule outlet_nut() {\n    // mirror of inlet on opposite side\n    mirror([0, 0, 1])\n    inlet_nut();\n}\n\nmodule reinforcement_ribs() {\n    // six radial ribs for strength\n    for (a = [0:60:359])\n        rotate([0, 0, a])\n        translate([35, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 30, d = 4, $fn = 12);\n}\n\nmodule sealing_grooves() {\n    // two small O-ring grooves\n    for (z = [78, 2])\n        translate([0, 0, z])\n        difference() {\n            cylinder(h = 2, d = 73);\n            cylinder(h = 3, d = 69);\n        }\n}\n\nmodule threads() {\n    // simple coarse external thread on both ends\n    for (i = [0:1])\n        translate([0, 0, 80 * i])\n        rotate([0, 0, 180 * i])\n        for (z = [0:2:9])\n            translate([0, 0, z])\n            difference() {\n                cylinder(h = 2.5, d = 77);\n                cylinder(h = 3, d = 75);\n            }\n}\n\n// assembly\nunion() {\n    main_housing();\n    inlet_nut();\n    outlet_nut();\n    threads();\n    sealing_grooves();\n    reinforcement_ribs();\n}",
    "renders": true
  },
  {
    "mechanical_component": "screen",
    "openscad_code": "// Realistic-style computer monitor screen (3D-printable)\n// Medium complexity, ~100 lines, no overhangs, 2 mm walls\n// Overall footprint ~130 x 95 x 130 mm\n\n// ----------------------------------------------------------\n// Parameters\n// ----------------------------------------------------------\nbase_w       = 130;   // base width\nbase_d       = 95;    // base depth\nbase_h       = 12;    // base thickness\n\nneck_h       = 80;    // neck height\nneck_w       = 18;\nneck_d       = 20;\n\nscreen_w     = 120;   // visible screen\nscreen_h     = 70;\nscreen_d     = 8;\n\nbezel_t      = 4;     // bezel thickness\nshell_t      = 2;     // outer shell wall\n\nstand_r      = 2;     // fillet radii\nscr_r        = 2;\n\n$fn          = 32;    // smooth curves\n// ----------------------------------------------------------\n\n// ----------------------------------------------------------\n// Base with anti-skid grooves\n// ----------------------------------------------------------\nmodule base() {\n    difference() {\n        // solid base plate\n        translate([0,0,base_h/2])\n            rounded_cube([base_w, base_d, base_h], stand_r);\n\n        // underside grooves\n        for (y = [-30:20:30]) {\n            translate([0,y,base_h-1.5])\n                cube([base_w-20, 3, 3], center=true);\n        }\n    }\n}\n\n// ----------------------------------------------------------\n// Neck / stand\n// ----------------------------------------------------------\nmodule neck() {\n    union() {\n        // central post\n        translate([0,0,base_h+neck_h/2])\n            rounded_cube([neck_w, neck_d, neck_h], stand_r);\n    }\n}\n\n// ----------------------------------------------------------\n// Screen body (bezel + shell)\n// ----------------------------------------------------------\nmodule screen_body() {\n    // outer shell\n    difference() {\n        translate([0,0,base_h+neck_h+screen_d/2])\n            rounded_cube([screen_w+2*bezel_t, screen_h+2*bezel_t, screen_d], scr_r);\n\n        // cavity for electronics\n        translate([0,0,base_h+neck_h+screen_d/2])\n            rounded_cube([screen_w+2*bezel_t-2*shell_t, screen_h+2*bezel_t-2*shell_t, screen_d], scr_r);\n    }\n\n    // bezel frame\n    difference() {\n        translate([0,0,base_h+neck_h+screen_d-shell_t/2])\n            cube([screen_w+2*bezel_t, screen_h+2*bezel_t, shell_t], center=true);\n\n        // actual screen opening\n        translate([0,0,base_h+neck_h+screen_d-shell_t/2-0.1])\n            cube([screen_w, screen_h, shell_t+0.2], center=true);\n    }\n\n    // back vents\n    for (i = [-2:1:2]) {\n        translate([screen_w/2+bezel_t-1.5, i*12, base_h+neck_h+screen_d/2])\n            rotate([0,90,0])\n                cylinder(h=30, d=2, center=true);\n    }\n\n    // logo plate\n    translate([0,screen_h/2+bezel_t-2, base_h+neck_h+screen_d-1])\n        cube([20, 4, 2], center=true);\n}\n\n// ----------------------------------------------------------\n// Helper: rounded cube\n// ----------------------------------------------------------\nmodule rounded_cube(size, r) {\n    x = size.x != undef ? size.x : size[0];\n    y = size.y != undef ? size.y : size[1];\n    z = size.z != undef ? size.z : size[2];\n    hull() {\n        for (dx = [-1,1], dy = [-1,1], dz = [-1,1])\n            translate([dx*(x/2-r), dy*(y/2-r), dz*(z/2-r)])\n                sphere(r=r);\n    }\n}\n\n// ----------------------------------------------------------\n// Assembly\n// ----------------------------------------------------------\nbase();\nneck();\nscreen_body();",
    "renders": true
  },
  {
    "mechanical_component": "magnet",
    "openscad_code": "// Realistic Neodymium Disc Magnet with Housing\n// Size: 80mm diameter × 20mm height, overall 100mm diameter × 30mm height\n\n// Main housing parameters\nhousing_d = 100;\nhousing_h = 30;\nwall_thickness = 2;\n\n// Magnet parameters\nmagnet_d = 80;\nmagnet_h = 20;\n\n// Screw mount parameters\nscrew_holes = 4;\nscrew_d = 4;\nscrew_spacing = 85;\nscrew_depth = 15;\n\n// Cooling fins\nfins = 12;\nfin_thickness = 2;\nfin_height = 8;\n\n// Main magnet housing\nmodule magnet_housing() {\n    difference() {\n        // Outer cylinder (housing body)\n        cylinder(d=housing_d, h=housing_h, $fn=128);\n        \n        // Inner cavity for magnet\n        translate([0, 0, wall_thickness])\n            cylinder(d=magnet_d + 0.5, h=magnet_h + 1, $fn=128);\n        \n        // Chamfer top edge\n        translate([0, 0, housing_h - 2])\n            cylinder(d1=housing_d - 4, d2=housing_d, h=2, $fn=128);\n        \n        // Screw holes\n        for(i = [0 : screw_holes - 1]) {\n            rotate([0, 0, i * 90])\n                translate([screw_spacing/2, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(d=screw_d, h=screw_depth + 1, $fn=32);\n        }\n    }\n}\n\n// Cooling fins\nmodule cooling_fins() {\n    for(i = [0 : fins - 1]) {\n        rotate([0, 0, i * (360/fins)])\n            translate([0, housing_d/2 - fin_height/2 - wall_thickness, housing_h/2])\n                cube([fin_thickness, fin_height, housing_h - 4], center=true);\n    }\n}\n\n// Magnet core\nmodule magnet_core() {\n    color(\"red\")\n    translate([0, 0, wall_thickness])\n        cylinder(d=magnet_d, h=magnet_h, $fn=128);\n}\n\n// Pole markings (N and S)\nmodule pole_markings() {\n    // North pole marking\n    translate([0, 0, wall_thickness + magnet_h + 1])\n        cylinder(d=magnet_d/4, h=0.5, $fn=32);\n    \n    // South pole marking\n    translate([0, 0, wall_thickness - 1])\n        cylinder(d=magnet_d/4, h=0.5, $fn=32);\n    \n    // N and S labels\n    translate([0, 0, wall_thickness + magnet_h + 2])\n        rotate([0, 0, 0])\n            linear_extrude(height=0.5)\n                text(\"N\", size=8, halign=\"center\", valign=\"center\");\n    \n    translate([0, 0, wall_thickness - 1.5])\n        rotate([0, 0, 180])\n            linear_extrude(height=0.5)\n                text(\"S\", size=8, halign=\"center\", valign=\"center\");\n}\n\n// Assembly\nunion() {\n    // Main housing\n    magnet_housing();\n    \n    // Cooling fins\n    cooling_fins();\n    \n    // Magnet (visual representation)\n    magnet_core();\n    \n    // Pole markings\n    pole_markings();\n    \n    // Center alignment post\n    translate([0, 0, wall_thickness + magnet_h/2])\n        cylinder(d=10, h=magnet_h, $fn=32);\n}",
    "renders": true
  },
  {
    "mechanical_component": "sensor",
    "openscad_code": "// Ultrasonic distance sensor HC-SR04 style mechanical housing\n// Overall size: 45 mm x 20 mm x 15 mm – printable without supports\n\n$fn = 32;               // Smooth curves\nwall = 2;               // 3D-printable wall thickness\npcb_w = 41;             // PCB width\npcb_l = 18;             // PCB length\npcb_t = 1.6;            // PCB thickness\ncase_clear = 0.5;       // Clearance around PCB\npillar_d = 2.5;         // Mounting pillar diameter\npillar_h = 3;           // Pillar height above PCB\nscrew_d = 1.8;          // Screw hole diameter\n\n// --------------------------------------------------\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, wall]) cube([pcb_w + 2*wall, pcb_l + 2*wall, pcb_t + 2*wall], center = true);\n            translate([0, 0, wall + 3]) cube([pcb_w + 1.5*wall, pcb_l + 1.5*wall, pcb_t + 2*wall], center = true);\n        }\n\n        // Inner cavity\n        translate([0, 0, wall]) cube([pcb_w + case_clear, pcb_l + case_clear, pcb_t + 3*wall], center = true);\n\n        // Transducer openings – front face\n        translate([-(pcb_w/2 - 8), 0, wall + pcb_t/2]) cylinder(h = wall + 1, d = 16);\n        translate([(pcb_w/2 - 8), 0, wall + pcb_t/2]) cylinder(h = wall + 1, d = 16);\n    }\n}\n\n// --------------------------------------------------\n// Mounting pillars\nmodule pillars() {\n    for (x = [-pcb_w/2 + 5, pcb_w/2 - 5], y = [-pcb_l/2 + 5, pcb_l/2 - 5]) {\n        translate([x, y, wall/2])\n        difference() {\n            cylinder(h = wall + pillar_h, d = pillar_d);\n            translate([0, 0, -1]) cylinder(h = wall + pillar_h + 2, d = screw_d);\n        }\n    }\n}\n\n// --------------------------------------------------\n// Rear cover snap clips\nmodule clips() {\n    for (x = [-pcb_w/2 + 3, pcb_w/2 - 3]) {\n        translate([x, 0, wall + pcb_t/2]) {\n            difference() {\n                cube([2, pcb_l + 2*wall, 4], center = true);\n                translate([1, 0, 1]) cube([2.5, pcb_l + 2*wall + 2, 6], center = true);\n            }\n        }\n    }\n}\n\n// --------------------------------------------------\n// Small indicator LED window\nmodule led_window() {\n    translate([0, -pcb_l/2 - wall/2, wall + pcb_t/2])\n    difference() {\n        cube([6, wall, 4], center = true);\n        translate([0, -wall/2 - 0.1, 0]) cube([4, wall + 0.2, 2], center = true);\n    }\n}\n\n// --------------------------------------------------\n// Assembly\nunion() {\n    body_shell();\n    pillars();\n    clips();\n    led_window();\n}",
    "renders": true
  },
  {
    "mechanical_component": "actuator",
    "openscad_code": "// Linear Actuator Assembly (medium complexity, 3D-printable)\n\n// Overall dimensions: 120 mm stroke, 36 mm body Ø, 150 mm total length\n\n$fn = 50;                 // smooth curves\nwall = 2;                 // 3D-printable wall thickness\n\n// Main module\nmodule actuator_assembly() {\n    // Rear clevis mount\n    translate([0,0,0])\n        clevis_mount(12, 8);\n\n    // Motor housing (rear section)\n    translate([20,0,0])\n        rotate([0,90,0])\n        motor_section(36, 40);\n\n    // Lead-screw tube (middle section)\n    translate([60,0,0])\n        rotate([0,90,0])\n        tube_section(36, 80);\n\n    // Extending rod\n    translate([140,0,0])\n        rotate([0,90,0])\n        rod_section(20, 120);\n\n    // Front clevis mount\n    translate([150,0,0])\n        clevis_mount(12, 8);\n}\n\n// Clevis mount with pin hole\nmodule clevis_mount(h, d) {\n    difference() {\n        union() {\n            // Base block\n            cube([h*2, d+wall*2, d+wall*2], center=true);\n            // Fork arms\n            translate([h*0.5, (d+wall)/2, 0])\n                cube([h, wall, d+wall*2], center=true);\n            translate([h*0.5, -(d+wall)/2, 0])\n                cube([h, wall, d+wall*2], center=true);\n        }\n        // Pin hole\n        rotate([90,0,0])\n            cylinder(h=d+wall*2+1, d=4, center=true);\n    }\n}\n\n// Motor housing with cooling fins\nmodule motor_section(od, len) {\n    difference() {\n        union() {\n            // Main cylinder\n            cylinder(h=len, d=od, center=true);\n            // Cooling fins (repetitive)\n            for(i=[1:4:len-5])\n                translate([0,0,i-len/2+2])\n                    cylinder(h=2, d=od+6, center=true);\n            // Cable gland boss\n            translate([0, od/2, -len/2+10])\n                rotate([90,0,0])\n                    cylinder(h=8, d=10, center=true);\n        }\n        // Hollow bore\n        cylinder(h=len+1, d=od-wall*2, center=true);\n        // Cable hole\n        translate([0, od/2, -len/2+10])\n            rotate([90,0,0])\n                cylinder(h=9, d=4, center=true);\n    }\n}\n\n// Lead-screw tube with keyway slot\nmodule tube_section(od, len) {\n    difference() {\n        union() {\n            // Outer tube\n            cylinder(h=len, d=od, center=true);\n            // End cap lip\n            translate([0,0,len/2-4])\n                cylinder(h=4, d=od+4, center=true);\n        }\n        // Inner bore\n        cylinder(h=len+1, d=od-wall*2, center=true);\n        // Keyway slot (anti-rotation)\n        translate([od/2-wall/2,0,0])\n            cube([wall, 6, len+1], center=true);\n    }\n}\n\n// Extending rod with threaded end\nmodule rod_section(od, len) {\n    difference() {\n        union() {\n            // Main rod\n            cylinder(h=len, d=od, center=true);\n            // Threaded end detail\n            translate([0,0,len/2-10])\n                cylinder(h=10, d=od+2, center=true);\n            // Chamfer\n            translate([0,0,-len/2])\n                cylinder(h=2, d1=od, d2=od-2, center=true);\n        }\n        // Hollow core (weight reduction)\n        cylinder(h=len+1, d=od-wall*2, center=true);\n    }\n}\n\n// Render the complete actuator\nactuator_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "solenoid",
    "openscad_code": "// Solenoid - realistic style, medium complexity\n// Overall dimensions: 100mm length × 40mm diameter\n\n$fn = 50;\n\n// Main parameters\ncoil_length = 80;\ncoil_diameter = 40;\ncore_diameter = 20;\nmounting_hole_diameter = 4;\nmounting_bracket_length = 20;\nmounting_bracket_width = 10;\nwall_thickness = 2;\nwire_diameter = 3;\nlead_wire_diameter = 2;\n\n// Color definitions\ncoil_color = \"DarkSlateGray\";\ncore_color = \"Silver\";\nmounting_color = \"DimGray\";\nwire_color = \"Gold\";\n\nmodule solenoid_body() {\n    color(coil_color)\n    difference() {\n        // Main coil housing\n        cylinder(h = coil_length, d = coil_diameter, center = true);\n        \n        // Hollow center for core\n        cylinder(h = coil_length + 2, d = core_diameter, center = true);\n        \n        // Wire entry/exit slots\n        translate([0, coil_diameter/2, coil_length/2 - 5])\n            cube([wire_diameter + 2, wall_thickness + 2, 10], center = true);\n        translate([0, -coil_diameter/2, -coil_length/2 + 5])\n            cube([wire_diameter + 2, wall_thickness + 2, 10], center = true);\n    }\n}\n\nmodule coil_windings() {\n    color(wire_color)\n    for (i = [-coil_length/2 + 5 : 5 : coil_length/2 - 5]) {\n        rotate_extrude(angle = 360, $fn = 20)\n            translate([coil_diameter/2 - wall_thickness - wire_diameter/2, 0, 0])\n                circle(d = wire_diameter);\n        \n        // Windings along length\n        for (j = [0 : 30 : 330]) {\n            rotate([0, j, 0])\n                translate([coil_diameter/2 - wall_thickness - wire_diameter/2, 0, i])\n                    sphere(d = wire_diameter);\n        }\n    }\n}\n\nmodule core_plunger() {\n    color(core_color)\n    union() {\n        // Main plunger rod\n        cylinder(h = coil_length + 20, d = core_diameter - 2, center = true);\n        \n        // Stopper at one end\n        translate([0, 0, coil_length/2 + 10])\n            cylinder(h = 5, d = core_diameter + 4);\n        \n        // Tapered tip at other end\n        translate([0, 0, -coil_length/2 - 5])\n            cylinder(h1 = 10, h2 = 0, d1 = core_diameter - 2, d2 = core_diameter - 6);\n    }\n}\n\nmodule mounting_brackets() {\n    color(mounting_color)\n    union() {\n        // Mounting bracket 1\n        translate([0, coil_diameter/2 + mounting_bracket_width/2, 0])\n            difference() {\n                cube([mounting_bracket_length, mounting_bracket_width, coil_length - 10], center = true);\n                translate([0, 0, 0])\n                    cylinder(h = mounting_bracket_width + 2, d = mounting_hole_diameter, center = true);\n            }\n        \n        // Mounting bracket 2\n        translate([0, -coil_diameter/2 - mounting_bracket_width/2, 0])\n            difference() {\n                cube([mounting_bracket_length, mounting_bracket_width, coil_length - 10], center = true);\n                translate([0, 0, 0])\n                    cylinder(h = mounting_bracket_width + 2, d = mounting_hole_diameter, center = true);\n            }\n    }\n}\n\nmodule lead_wires() {\n    color(wire_color)\n    union() {\n        // Input wire\n        translate([0, coil_diameter/2, coil_length/2 - 5])\n            rotate([90, 0, 0])\n                cylinder(h = 30, d = lead_wire_diameter);\n        \n        // Output wire\n        translate([0, -coil_diameter/2, -coil_length/2 + 5])\n            rotate([90, 0, 0])\n                cylinder(h = 30, d = lead_wire_diameter);\n    }\n}\n\nmodule structural_reinforcements() {\n    color(mounting_color)\n    difference() {\n        // End caps\n        translate([0, 0, coil_length/2 + wall_thickness/2])\n            cylinder(h = wall_thickness, d = coil_diameter + 4);\n        translate([0, 0, coil_length/2 + wall_thickness])\n            cylinder(h = wall_thickness + 2, d = core_diameter - 1);\n        \n        translate([0, 0, -coil_length/2 - wall_thickness/2])\n            cylinder(h = wall_thickness, d = coil_diameter + 4);\n        translate([0, 0, -coil_length/2 - wall_thickness])\n            cylinder(h = wall_thickness + 2, d = core_diameter - 1);\n    }\n}\n\n// Assembly\nsolenoid_body();\ncoil_windings();\ncore_plunger();\nmounting_brackets();\nlead_wires();\nstructural_reinforcements();",
    "renders": true
  },
  {
    "mechanical_component": "valve",
    "openscad_code": "// Ball valve – 3D-printable, medium-complexity, realistic proportions\n// Overall size ≈ 100 mm long, 60 mm high, 60 mm deep\n// Wall thickness ≈ 2 mm, no unsupported overhangs > 45°\n\n// Parameters\nwall = 2;          // 2 mm walls\ndia = 30;          // nominal pipe Ø30 mm\nhandle_len = 60;   // lever handle length\nhandle_dia = 6;    // handle rod Ø6 mm\nflange = 40;       // flange outer Ø40 mm\nflange_h = 4;      // flange thickness 4 mm\nbolt_d = 4;        // M4 bolt head Ø\nbolt_h = 3;        // bolt head height\nbolt_c = 28;       // bolt-circle Ø28 mm, 4 bolts\n\n// Main module\nmodule valve() {\n    // Central body (hollow ball)\n    difference() {\n        sphere(d = dia + 2*wall);\n        sphere(d = dia);\n    }\n\n    // Pipe stub 1\n    translate([0, 0, (dia+2*wall)/2])\n        pipe_stub();\n\n    // Pipe stub 2 (mirrored)\n    mirror([0,0,1]) pipe_stub();\n\n    // Flanges\n    translate([0, 0, (dia+2*wall)/2 + 25/2 - wall])\n        flange();\n    mirror([0,0,1]) translate([0,0, (dia+2*wall)/2 + 25/2 - wall])\n        flange();\n\n    // Handle lever\n    translate([0, 0, 0])\n        rotate([90,0,0])\n            handle();\n}\n\n// Pipe stub 25 mm long\nmodule pipe_stub() {\n    difference() {\n        cylinder(h = 25, d1 = dia + 2*wall, d2 = dia + 2*wall, $fn = 32);\n        cylinder(h = 25 + 0.1, d1 = dia, d2 = dia, $fn = 32);\n    }\n}\n\n// Flange with 4 bolt holes\nmodule flange() {\n    difference() {\n        cylinder(h = flange_h, d = flange, $fn = 32);\n        cylinder(h = flange_h + 0.1, d = dia, $fn = 32);\n        for(a=[0:90:270])\n            rotate([0,0,a])\n                translate([bolt_c/2, 0, -0.1])\n                    cylinder(h = flange_h + 0.2, d = bolt_d + 1, $fn = 16);\n    }\n}\n\n// Handle lever (one piece printable)\nmodule handle() {\n    union() {\n        // Main lever rod\n        translate([0, 0, handle_len/2])\n            cylinder(h = handle_len, d = handle_d, $fn = 16);\n\n        // Hand grip perpendicular rod\n        translate([0, handle_len - handle_d, 0])\n            rotate([90,0,0])\n                cylinder(h = handle_d*4, d = handle_d*1.2, $fn = 16);\n\n        // Indicator flag\n        translate([0, handle_len - handle_d, 0])\n            rotate([90,0,0])\n                cube([handle_d*1.5, wall*5, wall*1.5], center = true);\n    }\n}\n\nvalve();",
    "renders": true
  }
]