[
  {
    "mechanical_component": "gear",
    "openscad_code": "// Realistic 3D-printable spur gear\n// Overall Ø100 mm × 12 mm thick, 20 teeth, 5 mm bore\n// All features have ≥2 mm walls for reliable printing\n\n// Parameters\n$fn = 90;               // smooth curves\nmodule_height = 12;     // total thickness\nmodule = 3;             // metric module (m)\nteeth_count = 20;\npressure_angle = 20;    // degrees\npitch = teeth_count * module; // Ø100 mm\nbore = 5;               // shaft hole Ø5 mm\nkey_width = 2;          // 2 mm keyway\nhub_d = 20;             // central hub Ø20 mm\nhub_h = 7;              // hub height (protrudes 2 mm each side)\nweb_thk = 2.5;          // web thickness between hub and rim\nrim_web_h = module_height - hub_h; // 5 mm\n\n// Derived diameters\npitch_d = pitch;\naddendum = module;          // 3 mm\ndedendum = 1.25 * module;   // 3.75 mm\nouter_d = pitch_d + 2*addendum;\nroot_d = pitch_d - 2*dedendum;\n\n// Single tooth profile (simplified 20° involute)\nmodule tooth_profile() {\n    // Approximate trapezoidal tooth for medium realism\n    linear_extrude(height = module_height, center = true, convexity=4)\n    polygon(points=[\n        [ root_d/2 * cos(-180/teeth_count), root_d/2 * sin(-180/teeth_count) ],\n        [ outer_d/2 * cos(-90/teeth_count),  outer_d/2 * sin(-90/teeth_count)  ],\n        [ outer_d/2 * cos( 90/teeth_count),  outer_d/2 * sin( 90/teeth_count)  ],\n        [ root_d/2 * cos( 180/teeth_count), root_d/2 * sin( 180/teeth_count) ]\n    ]);\n}\n\n// Gear body with teeth\nmodule gear_body() {\n    difference() {\n        union() {\n            // Rim cylinder\n            cylinder(h = module_height, d = root_d, center = true);\n            // All teeth placed around rim\n            for (i = [0 : teeth_count-1])\n                rotate([0,0,i*360/teeth_count])\n                    tooth_profile();\n        }\n        // Central bore and keyway\n        translate([0,0,-module_height/2-1])\n            cylinder(h = module_height+2, d = bore, center = false);\n        translate([bore/2,0,-module_height/2-1])\n            cube([bore/2+1, key_width, module_height+2], center = true);\n    }\n}\n\n// Central hub (protrudes 1 mm each side)\nmodule hub() {\n    difference() {\n        cylinder(h = hub_h+2, d = hub_d, center = true);\n        translate([0,0,-hub_h/2-1])\n            cylinder(h = hub_h+2, d = bore, center = false);\n        translate([bore/2,0,-hub_h/2-1])\n            cube([bore/2+1, key_width, hub_h+2], center = true);\n    }\n}\n\n// Web spokes connecting hub to rim (2.5 mm thick)\nmodule web_spokes() {\n    difference() {\n        cylinder(h = rim_web_h, d = root_d - 1, center = true);\n        cylinder(h = rim_web_h+1, d = hub_d + 2, center = true);\n    }\n    // Four lightening holes for weight reduction & printability\n    for (a=[0:90:270])\n        rotate([0,0,a])\n            translate([(root_d/2 + hub_d/2)/2, 0, 0])\n                cylinder(h = rim_web_h+1, d = 10, center = true);\n}\n\n// Assembly\nunion() {\n    gear_body();\n    hub();\n    translate([0,0, hub_h/2 - rim_web_h/2])\n        web_spokes();\n}",
    "renders": true
  },
  {
    "mechanical_component": "sprocket",
    "openscad_code": "// Realistic 3D-printable chain sprocket\n// Overall diameter ≈ 84 mm, thickness ≈ 8 mm, 12 teeth\n\n// Basic parameters\n$fn = 50;              // smooth curves\ntooth_cnt = 12;        // number of teeth\npcd = 76;              // pitch-circle diameter\nth = 8;                // thickness\nhole_d = 20;           // central bore\nboss_h = 4;            // raised boss height\nboss_d = 30;           // boss diameter\nweb_th = 2;            // web thickness between spokes\nspoke_cnt = 4;         // number of spokes\n\n// Derived\nr_pitch = pcd / 2;\ntooth_h = 6;           // tooth height above pitch circle\ntooth_w = 5;           // tooth width at pitch circle\nroot_r = r_pitch - 1.5;\n\nmodule tooth_profile() {\n    // Single tooth cross-section\n    linear_extrude(height = th)\n    polygon(points=[\n        [-tooth_w/2, -r_pitch],            // inner root\n        [-tooth_w/2, -r_pitch + 1],        // small relief\n        [-tooth_w*0.4, -r_pitch + 2],\n        [-tooth_w*0.2, -r_pitch + tooth_h - 1],\n        [0, -r_pitch - tooth_h],           // tip\n        [tooth_w*0.2, -r_pitch + tooth_h - 1],\n        [tooth_w*0.4, -r_pitch + 2],\n        [tooth_w/2, -r_pitch + 1],\n        [tooth_w/2, -r_pitch]\n    ]);\n}\n\nmodule sprocket_teeth() {\n    for (i = [0 : tooth_cnt-1])\n        rotate([0, 0, i * 360/tooth_cnt])\n        translate([0, r_pitch, 0])\n        tooth_profile();\n}\n\nmodule central_hub() {\n    difference() {\n        // Main hub disc\n        cylinder(h = th + boss_h, d = boss_d, center = true);\n        // Central bore\n        cylinder(h = th + boss_h + 1, d = hole_d, center = true);\n        // Keyway\n        translate([0, -hole_d/2 - 1, 0])\n        cube([hole_d/4, hole_d/2 + 2, th + boss_h + 1], center = true);\n    }\n}\n\nmodule spokes_and_web() {\n    difference() {\n        // Outer disc with root diameter\n        cylinder(h = th, d = root_r * 2, center = true);\n        // Cut spokes\n        for (i = [0 : spoke_cnt-1])\n            rotate([0, 0, i * 360/spoke_cnt])\n            translate([r_pitch/2, 0, 0])\n            cube([r_pitch - 5, web_th + 1, th + 1], center = true);\n        // Lightening holes between spokes\n        for (i = [0 : spoke_cnt-1])\n            rotate([0, 0, i * 360/spoke_cnt + 360/spoke_cnt/2])\n            translate([r_pitch/2, 0, 0])\n            cylinder(h = th + 1, d = 12, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Teeth\n    sprocket_teeth();\n    \n    // Spokes and web\n    spokes_and_web();\n    \n    // Central hub with boss\n    central_hub();\n}",
    "renders": true
  },
  {
    "mechanical_component": "pulley",
    "openscad_code": "// Realistic Medium-Complexity Pulley (Ø60 mm) – 3D-printable\n// All dimensions in mm; printer-friendly wall thickness ≈2 mm\n\n// --------------------------------------------\n// Parameters\n// --------------------------------------------\n$fa = 2; $fs = 0.5;\n\n// Overall dimensions\npulley_od       = 60;     // Outer Ø of rim\npulley_width    = 26;     // Total width along axle\nbore_d          = 8;      // Shaft hole\nrim_thick       = 5;      // Radial thickness of rim\nweb_thick       = 2;      // Thickness of web spokes\ngroove_depth    = 3;      // Belt groove depth\ngroove_angle    = 40;     // V-groove half-angle\nspoke_count     = 5;      // Number of spokes\nboss_length     = 10;     // Length of central boss\nboss_clearance  = 1;      // Gap between boss and web\n// --------------------------------------------\n\nmodule pulley_assembly() {\n    difference() {\n        union() {\n            // 1. Outer rim including V-groove\n            rim();\n\n            // 2. Central boss (hub)\n            translate([0, 0, -boss_length/2])\n                boss();\n\n            // 3. Web spokes connecting rim to hub\n            web_spokes();\n        }\n\n        // 4. Bore hole for shaft\n        translate([0, 0, -pulley_width/2 - 1])\n            cylinder(h = pulley_width + 2, d = bore_d, center = false);\n\n        // 5. Optional keyway (simple rectangular slot)\n        translate([0, -bore_d/2 - 0.5, -pulley_width/2 - 1])\n            cube([2, bore_d + 1, pulley_width + 2], center = true);\n    }\n}\n\n// Sub-module: Rim with V-groove\nmodule rim() {\n    difference() {\n        // Solid rim cylinder\n        cylinder(h = pulley_width, d = pulley_od, center = true);\n\n        // Remove inner part to leave wall thickness\n        cylinder(h = pulley_width + 2, d = pulley_od - rim_thick*2, center = true);\n\n        // Cut V-groove\n        translate([0, 0, -pulley_width/2 - 1])\n            rotate([0, 90, 0])\n                linear_extrude(height = pulley_width + 2, center = true, convexity = 10)\n                    polygon(points=[\n                        [pulley_od/2 - groove_depth, 0],\n                        [pulley_od/2,  groove_depth * tan(groove_angle)],\n                        [pulley_od/2, -groove_depth * tan(groove_angle)]\n                    ]);\n    }\n}\n\n// Sub-module: Central cylindrical boss\nmodule boss() {\n    cylinder(h = boss_length, d = bore_d + 2*web_thick + 2*boss_clearance, center = true);\n}\n\n// Sub-module: Web spokes\nmodule web_spokes() {\n    for(i = [0 : 360/spoke_count : 359])\n        rotate([0, 0, i])\n            translate([0, (pulley_od - rim_thick)/2, 0])\n                cube([\n                    web_thick,               // thickness in radial direction\n                    (pulley_od - rim_thick)/2 - (bore_d/2 + web_thick + boss_clearance),\n                    pulley_width - 2         // leave small chamfer gap top/bottom\n                ], center = true);\n}\n\n// Render\npulley_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "cam",
    "openscad_code": "// Eccentric cam for 3-D printing – 70 mm Ø, 25 mm thick, 12 mm bore\n// All features printable without supports; 2 mm minimum wall thickness\n\n// Global parameters\ncam_dia = 70;          // outside diameter\ncam_thk = 25;          // overall thickness\nbore_dia = 12;         // shaft bore\neccentricity = 12;     // offset of bore from centre\nkey_w = 4;             // width of keyway\nkey_h = 2;             // depth of keyway\nspoke_num = 6;         // spokes on the web\nspoke_w = 8;           // spoke width\nhub_dia = 22;          // central hub Ø\nhub_thk = cam_thk;     // hub is full thickness\nweb_thk = 4;           // web thickness (≥2 mm)\n\n// Convenience variables\nR = cam_dia/2;\nr_hub = hub_dia/2;\n\nmodule cam_profile() {\n    /* 2-D profile of the cam (eccentric circle) */\n    translate([eccentricity, 0])  // offset centre\n        circle(r = R, $fn = 90);\n}\n\nmodule keyway_2d() {\n    /* 2-D keyway profile for difference() */\n    translate([0, bore_dia/2])\n        square([key_w, key_h + bore_dia/2], center = true);\n}\n\nmodule cam_body() {\n    /* Main cam disk with bore and keyway */\n    difference() {\n        linear_extrude(height = cam_thk)\n            cam_profile();\n        \n        // Shaft bore\n        cylinder(d = bore_dia, h = cam_thk + 0.2, center = true, $fn = 40);\n        \n        // Keyway\n        rotate([0, 0, 0])  // aligned along +X\n            linear_extrude(height = cam_thk + 0.2, center = true)\n                keyway_2d();\n    }\n}\n\nmodule spokes() {\n    /* Radial spokes connecting hub to rim */\n    for (i = [0 : spoke_num-1])\n        rotate([0, 0, i * 360/spoke_num])\n            translate([0, 0, (cam_thk - web_thk)/2])\n                difference() {\n                    cube([spoke_w, R - r_hub - 1, web_thk], center = true);\n                    // Trim spoke ends to cam curvature\n                    translate([0, R, 0])\n                        cylinder(r = R, h = web_thk + 0.2, center = true, $fn = 90);\n                }\n}\n\nmodule hub() {\n    /* Central thickened hub */\n    difference() {\n        cylinder(d = hub_dia, h = hub_thk, center = true, $fn = 40);\n        cylinder(d = bore_dia, h = hub_thk + 0.2, center = true, $fn = 40);\n        rotate([0, 0, 0])\n            linear_extrude(height = hub_thk + 0.2, center = true)\n                keyway_2d();\n    }\n}\n\nmodule web_plate() {\n    /* Thin web between spokes */\n    linear_extrude(height = web_thk)\n        difference() {\n            scale([0.96, 0.96, 1])  // keep web inside rim\n                cam_profile();\n            circle(r = r_hub + 1);   // hole at centre\n        }\n}\n\n// Assemble the cam\nunion() {\n    cam_body();\n    hub();\n    translate([0, 0, (cam_thk - web_thk)/2]) {\n        web_plate();\n        spokes();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "crankshaft",
    "openscad_code": "// Crankshaft - Realistic Medium Complexity\n// 3D-printable inline-4 crankshaft with 2 mm walls, ~100 mm long\n\n// Main parameters\njournal_d = 12;     // main bearing journal diameter\njournal_l = 18;     // main bearing journal length\ncrank_d = 10;       // crankpin diameter\ncrank_l = 14;       // crankpin length\nweb_t = 8;          // web thickness\nweb_w = 22;         // web width\nstroke = 18;        // crank throw (stroke) = offset\nspacing = 20;       // cylinder spacing\nshaft_end_l = 12;   // nose / tail length\nfillet_r = 2;       // fillet radius\n\n// Helper module: rounded cylinder\nmodule rounded_cyl(h, r1, r2) {\n    hull() {\n        translate([0,0,0]) sphere(r1);\n        translate([0,0,h]) sphere(r2);\n    }\n}\n\n// Main journal\nmodule main_journal(l) {\n    difference() {\n        cylinder(h=l, d=journal_d, $fn=32);\n        translate([0,0,-1]) cylinder(h=l+2, d=journal_d-4, $fn=32);\n    }\n}\n\n// Crankpin (rod journal)\nmodule crankpin() {\n    difference() {\n        cylinder(h=crank_l, d=crank_d, $fn=32);\n        translate([0,0,-1]) cylinder(h=crank_l+2, d=crank_d-4, $fn=32);\n    }\n}\n\n// Web (crank throw arm)\nmodule crank_web(offset) {\n    difference() {\n        // solid web\n        hull() {\n            translate([-web_t/2, 0, -web_w/2]) cube([web_t, journal_d, web_w]);\n            translate([-web_t/2, offset, -web_w/2]) cube([web_t, crank_d, web_w]);\n        }\n        // lightening hole\n        translate([-web_t/2-0.1, offset/2, 0]) rotate([90,0,0]) cylinder(h=web_t+0.2, d=6, $fn=20);\n    }\n}\n\n// Counterweight\nmodule counterweight(offset) {\n    translate([-web_t/2-0.1, -offset-6, 0]) rotate([90,0,0]) difference() {\n        cylinder(h=web_t+0.2, d1=18, d2=18, $fn=40);\n        translate([0,0,-0.1]) cylinder(h=web_t+0.4, d=8, $fn=30);\n    }\n}\n\n// Crank throw assembly (pin + webs + counterweights)\nmodule crank_throw(offset) {\n    union() {\n        // mirror webs for 180-degree opposite\n        for (mir=[0:1]) {\n            mirror([0,mir,0]) {\n                crank_web(offset);\n                counterweight(offset);\n            }\n        }\n        // crankpin between webs\n        translate([0, offset, 0]) rotate([90,0,0]) crankpin();\n    }\n}\n\n// Assemble crankshaft\nmodule crankshaft() {\n    union() {\n        // Front nose\n        translate([-spacing/2-shaft_end_l, 0, 0]) main_journal(shaft_end_l);\n\n        // Main journals and throws\n        for (i=[0:3]) {\n            // main journal\n            translate([i*spacing, 0, 0]) main_journal(journal_l);\n            // crank throw between journals\n            if (i<3)\n                translate([(i+0.5)*spacing, 0, 0])\n                    rotate([0,0,180*(i%2)])  // 180-degree offset for inline-4\n                    crank_throw(stroke);\n        }\n\n        // Rear flange / tail\n        translate([3.5*spacing, 0, 0]) main_journal(shaft_end_l);\n    }\n}\n\n// Render\ncrankshaft();",
    "renders": true
  },
  {
    "mechanical_component": "bearing",
    "openscad_code": "// Realistic Ball Bearing - 6204 (20x47x14 mm) - Medium Complexity\n\n// Overall dimensions\nbearing_od = 47;  // Outer diameter\nbearing_id = 20;  // Inner diameter\nbearing_w = 14;   // Width\nball_d = 6.35;    // Ball diameter\nrace_th = 2;      // Race thickness\nshield_th = 0.8;  // Shield thickness\ncage_th = 1.5;    // Ball cage thickness\n\n// Main outer ring\nmodule outer_ring() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=bearing_w, d=bearing_od, $fn=100);\n        \n        // Inner bore\n        translate([0, 0, -0.1])\n            cylinder(h=bearing_w + 0.2, d=bearing_od - 2*race_th, $fn=100);\n        \n        // Outer race groove\n        translate([0, 0, bearing_w/2 - race_th])\n            rotate_extrude($fn=100)\n                translate([(bearing_od - 2*race_th - ball_d)/2 + ball_d/2, 0])\n                    circle(r=ball_d/2 * 1.05);\n    }\n}\n\n// Main inner ring\nmodule inner_ring() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=bearing_w, d=bearing_id + 2*race_th, $fn=100);\n        \n        // Inner bore\n        translate([0, 0, -0.1])\n            cylinder(h=bearing_w + 0.2, d=bearing_id, $fn=100);\n        \n        // Inner race groove\n        translate([0, 0, bearing_w/2 - race_th])\n            rotate_extrude($fn=100)\n                translate([(bearing_id + 2*race_th + ball_d)/2 - ball_d/2, 0])\n                    circle(r=ball_d/2 * 1.05);\n    }\n}\n\n// Ball cage (retainer)\nmodule ball_cage() {\n    difference() {\n        // Main cage ring\n        cylinder(h=cage_th, d=(bearing_od + bearing_id)/2, $fn=100);\n        \n        // Center hole\n        translate([0, 0, -0.1])\n            cylinder(h=cage_th + 0.2, d=(bearing_od + bearing_id)/2 - 4, $fn=100);\n        \n        // Ball pockets\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([(bearing_od + bearing_id)/2 - 2, 0, -0.1])\n                    cylinder(h=cage_th + 0.2, d=ball_d * 1.1, $fn=100);\n        }\n    }\n}\n\n// Individual balls\nmodule balls() {\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([(bearing_od + bearing_id)/2 - 2, 0, bearing_w/2 - race_th])\n                sphere(d=ball_d, $fn=50);\n    }\n}\n\n// Dust shields\nmodule shield() {\n    difference() {\n        // Shield disc\n        cylinder(h=shield_th, d=bearing_od, $fn=100);\n        \n        // Center hole\n        translate([0, 0, -0.1])\n            cylinder(h=shield_th + 0.2, d=bearing_id + 2, $fn=100);\n        \n        // Ventilation holes\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([(bearing_od + bearing_id)/4, 0, -0.1])\n                    cylinder(h=shield_th + 0.2, d=2, $fn=20);\n        }\n    }\n}\n\n// Assembly\n// Bottom shield\ntranslate([0, 0, 0])\n    shield();\n\n// Outer ring\ntranslate([0, 0, shield_th])\n    outer_ring();\n\n// Inner ring\ntranslate([0, 0, shield_th])\n    inner_ring();\n\n// Ball cage\ntranslate([0, 0, shield_th + race_th])\n    ball_cage();\n\n// Balls\ntranslate([0, 0, shield_th + race_th])\n    balls();\n\n// Top shield\ntranslate([0, 0, bearing_w - shield_th])\n    mirror([0, 0, 1])\n        shield();",
    "renders": true
  },
  {
    "mechanical_component": "pinion",
    "openscad_code": "// Pinion gear - medium complexity realistic style\n// Overall height ~100mm, gear diameter ~60mm\n\n// Parameters\n$fn = 50;\nmodule_height = 100;\ngear_height = 25;\nshaft_diameter = 12;\nbore_diameter = 8;\nkeyway_width = 3;\nkeyway_depth = 2;\nteeth_count = 20;\ntooth_height = 4;\ntooth_width = 3;\nfillet_radius = 1;\n\n// Main shaft\nmodule shaft() {\n    difference() {\n        // Main cylindrical shaft\n        cylinder(h=module_height, d=shaft_diameter, center=true);\n        \n        // Central bore\n        translate([0, 0, 0])\n            cylinder(h=module_height+2, d=bore_diameter, center=true);\n        \n        // Keyway slot\n        translate([0, -bore_diameter/2-keyway_depth/2, 0])\n            cube([keyway_width, keyway_depth, module_height+2], center=true);\n    }\n}\n\n// Gear teeth module\nmodule gear_teeth() {\n    union() {\n        for (i = [0:teeth_count-1]) {\n            rotate([0, 0, i*360/teeth_count])\n                translate([30-tooth_height/2, 0, 0])\n                    cube([tooth_height, tooth_width, gear_height], center=true);\n        }\n    }\n}\n\n// Gear body\nmodule gear_body() {\n    difference() {\n        union() {\n            // Main gear disk\n            cylinder(h=gear_height, d=60, center=true);\n            \n            // Add teeth\n            gear_teeth();\n            \n            // Top fillet\n            translate([0, 0, gear_height/2-fillet_radius])\n                cylinder(h=fillet_radius*2, d=58, center=true);\n            \n            // Bottom fillet\n            translate([0, 0, -gear_height/2+fillet_radius])\n                cylinder(h=fillet_radius*2, d=58, center=true);\n        }\n        \n        // Central hole for shaft\n        cylinder(h=gear_height+2, d=shaft_diameter, center=true);\n    }\n}\n\n// Hub transition\nmodule hub() {\n    translate([0, 0, gear_height/2+5])\n        cylinder(h=10, d1=20, d2=shaft_diameter, center=true);\n}\n\n// Retaining collar\nmodule collar() {\n    translate([0, 0, gear_height/2+15])\n        difference() {\n            cylinder(h=5, d=18, center=true);\n            cylinder(h=7, d=bore_diameter, center=true);\n        }\n}\n\n// Assembly\nunion() {\n    // Main shaft\n    shaft();\n    \n    // Gear assembly\n    translate([0, 0, 0])\n        gear_body();\n    \n    // Hub\n    hub();\n    \n    // Collar\n    collar();\n    \n    // Set screw hole\n    translate([0, shaft_diameter/2, gear_height/2+17.5])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=3, center=true);\n}\n\n// Add chamfers to shaft ends\ntranslate([0, 0, module_height/2-1])\n    cylinder(h=2, d1=shaft_diameter, d2=shaft_diameter-2, center=true);\ntranslate([0, 0, -module_height/2+1])\n    cylinder(h=2, d1=shaft_diameter, d2=shaft_diameter-2, center=true);",
    "renders": true
  },
  {
    "mechanical_component": "rack",
    "openscad_code": "// Medium-complexity realistic 3D-printable rack\n// Overall size: ~110 mm tall, 90 mm wide, 45 mm deep\n\n// Wall thickness = 2 mm everywhere\n$fn = 32;\n\n// Main rack module\nmodule rack() {\n    // Frame thickness\n    wall = 2;\n\n    // Outer dimensions\n    height = 110;\n    width  = 90;\n    depth  = 45;\n\n    // Shelves\n    shelf_count = 4;\n    shelf_thick = wall;\n    shelf_clear = (height - shelf_thick * shelf_count) / (shelf_count + 0.5);\n\n    // Leg cross-section\n    leg_size = 10;\n\n    // Back slat dimensions\n    slat_w = 8;\n    slat_gap = 6;\n\n    // --- Frame ---\n    // Left leg\n    translate([0, 0, 0])\n        cube([leg_size, wall, height]);\n\n    // Right leg\n    translate([width - leg_size, 0, 0])\n        cube([leg_size, wall, height]);\n\n    // Bottom front stretcher\n    translate([leg_size, 0, 0])\n        cube([width - 2 * leg_size, wall, wall]);\n\n    // Top front stretcher\n    translate([leg_size, 0, height - wall])\n        cube([width - 2 * leg_size, wall, wall]);\n\n    // Bottom side stretchers\n    translate([0, 0, 0])\n        cube([wall, depth, wall]);\n\n    translate([width - wall, 0, 0])\n        cube([wall, depth, wall]);\n\n    // Top side stretchers\n    translate([0, 0, height - wall])\n        cube([wall, depth, wall]);\n\n    translate([width - wall, 0, height - wall])\n        cube([wall, depth, wall]);\n\n    // --- Shelves ---\n    for (i = [1 : shelf_count]) {\n        z = i * shelf_clear + (i - 1) * shelf_thick;\n        translate([leg_size, wall, z])\n            cube([width - 2 * leg_size, depth - wall, shelf_thick]);\n    }\n\n    // --- Back slats ---\n    slat_count = floor((height - wall) / (slat_w + slat_gap));\n    for (j = [0 : slat_count - 1]) {\n        z = wall + j * (slat_w + slat_gap);\n        translate([wall, depth - wall, z])\n            cube([width - 2 * wall, wall, slat_w]);\n    }\n\n    // --- Optional rail ---\n    rail_h = 6;\n    translate([leg_size, wall, height - wall - rail_h])\n        cube([width - 2 * leg_size, wall, rail_h]);\n}\n\n// Render\nrack();",
    "renders": true
  },
  {
    "mechanical_component": "worm",
    "openscad_code": "// Worm Mechanical Gear Component\n// Realistic style, medium complexity worm drive unit\n\n$fn = 50;\n\n// Overall dimensions\nmodule worm_drive() {\n    union() {\n        // Main worm shaft\n        worm_shaft();\n        \n        // Worm gear wheel\n        translate([35, 0, 0])\n            rotate([90, 0, 0])\n            worm_wheel();\n        \n        // Support bearings\n        translate([-20, 0, 0])\n            bearing();\n        translate([20, 0, 0])\n            bearing();\n        \n        // Mounting flanges\n        translate([0, 0, -15])\n            mounting_flange();\n    }\n}\n\n// Worm shaft with spiral thread\nmodule worm_shaft() {\n    difference() {\n        // Main shaft body\n        union() {\n            // Shaft cylinder\n            cylinder(h=40, r=8, center=true);\n            \n            // Keyway slot\n            translate([0, 0, -20])\n                cube([16, 4, 40], center=true);\n        }\n        \n        // Center bore\n        cylinder(h=42, r=3, center=true);\n        \n        // Spiral thread (subtractive for printing)\n        for(i=[0:5:360]) {\n            rotate([0, 0, i])\n                translate([11, 0, -20 + i/9])\n                    rotate([90, 0, 0])\n                        cylinder(h=25, r1=3.5, r2=3.5);\n        }\n    }\n}\n\n// Worm wheel with helical teeth\nmodule worm_wheel() {\n    difference() {\n        union() {\n            // Main wheel disk\n            cylinder(h=12, r=20);\n            \n            // Hub\n            translate([0, 0, 6])\n                cylinder(h=8, r=10);\n            \n            // Spokes\n            for(i=[0:45:360]) {\n                rotate([0, 0, i])\n                    translate([15, 0, 6])\n                        cube([8, 3, 8], center=true);\n            }\n        }\n        \n        // Center shaft hole\n        cylinder(h=20, r=5);\n        \n        // Keyway\n        translate([0, 6, 0])\n            cube([3, 4, 20], center=true);\n        \n        // Teeth (subtractive for printing)\n        for(i=[0:15:360]) {\n            rotate([0, 0, i])\n                translate([20, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=12, r1=3, r2=3);\n        }\n    }\n}\n\n// Bearing housing\nmodule bearing() {\n    difference() {\n        union() {\n            // Outer race\n            cylinder(h=10, r=12);\n            \n            // Mounting ears\n            for(i=[0:90:270]) {\n                rotate([0, 0, i])\n                    translate([12, 0, 5])\n                        cube([8, 6, 4], center=true);\n            }\n        }\n        \n        // Inner bore\n        cylinder(h=12, r=8.5);\n        \n        // Mounting holes\n        for(i=[0:90:270]) {\n            rotate([0, 0, i])\n                translate([16, 0, 5])\n                    cylinder(h=5, r=2);\n        }\n    }\n}\n\n// Mounting flange base\nmodule mounting_flange() {\n    difference() {\n        // Base plate\n        cube([60, 50, 4], center=true);\n        \n        // Center cutout for clearance\n        translate([17.5, 0, -1])\n            cylinder(h=6, r=22);\n        \n        // Mounting holes\n        for(x=[-20, 20]) {\n            for(y=[-15, 15]) {\n                translate([x, y, -1])\n                    cylinder(h=5, r=3);\n            }\n        }\n    }\n}\n\n// Render the complete worm drive\nworm_drive();",
    "renders": true
  },
  {
    "mechanical_component": "bevelgear",
    "openscad_code": "// Bevel Gear - Medium Complexity Realistic Style\n// 45° bevel gear with 20 teeth, 80mm pitch diameter, 20mm face width\n// 3D printable with 2mm wall thickness\n\n// Parameters\n$fn = 50;  // Smooth curves\nmodule_bevel = 45;  // Bevel angle\nteeth = 20;\npitch_diameter = 80;\nface_width = 20;\nbore_diameter = 12;\nhub_diameter = 30;\nhub_length = 25;\nkeyway_width = 4;\nkeyway_depth = 2;\n\n// Calculate gear dimensions\npitch_angle = module_bevel;\npitch_radius = pitch_diameter / 2;\ntooth_height = 6;\naddendum = 2.5;\ndedendum = 3.5;\ntooth_angle = 360 / teeth;\ncone_height = pitch_radius * tan(pitch_angle);\n\nmodule bevel_gear() {\n    difference() {\n        union() {\n            // Main gear body (conical)\n            difference() {\n                // Outer cone\n                cylinder(h = cone_height, r1 = pitch_radius, r2 = 0, center = false);\n                \n                // Inner cone for face width\n                translate([0, 0, cone_height - face_width])\n                    cylinder(h = face_width + 0.1, r1 = pitch_radius - face_width * sin(pitch_angle), r2 = 0, center = false);\n            }\n            \n            // Hub\n            translate([0, 0, -hub_length/2])\n                cylinder(h = hub_length, r = hub_diameter/2, center = true);\n            \n            // Teeth\n            for(i = [0:teeth-1]) {\n                rotate([0, 0, i * tooth_angle])\n                    tooth();\n            }\n        }\n        \n        // Bore hole\n        cylinder(h = cone_height + hub_length + 2, r = bore_diameter/2, center = true);\n        \n        // Keyway\n        translate([-bore_diameter/2 - keyway_depth/2, 0, -hub_length/2 - 1])\n            cube([keyway_depth + 1, keyway_width, hub_length + 2], center = true);\n        \n        // Lightening holes (structural elements)\n        for(j = [1:3]) {\n            rotate([0, 0, j * 120])\n                translate([hub_diameter/2 + 8, 0, cone_height/2])\n                    rotate([90, 0, 0])\n                        cylinder(h = 10, r = 4, center = true);\n        }\n    }\n}\n\nmodule tooth() {\n    // Single tooth profile\n    tooth_width = PI * pitch_diameter / teeth / 2;\n    \n    // Tooth base at larger diameter\n    translate([pitch_radius - addendum, 0, cone_height - face_width])\n        rotate([90 - pitch_angle, 0, 0])\n            linear_extrude(height = tooth_width, center = true, scale = [0.8, 0.8])\n                polygon(points=[\n                    [0, 0],\n                    [addendum + dedendum, -tooth_height/2],\n                    [addendum + dedendum, tooth_height/2],\n                    [0, 0]\n                ]);\n}\n\n// Assembly view\nbevel_gear();\n\n// Reference shaft\n%translate([0, 0, -30])\n    cylinder(h = 60, r = bore_diameter/2, center = false);",
    "renders": true
  },
  {
    "mechanical_component": "spurgear",
    "openscad_code": "// Realistic Spur Gear - Medium Complexity\n// 60mm diameter gear with 20 teeth and 10mm bore\n\n// Parameters\n$fn = 50;  // Circle resolution\nmodule_thickness = 8;  // Total gear thickness\ntooth_height = 3;      // Addendum + dedendum\nroot_radius = 25;      // Pitch circle radius\nbore_diameter = 10;    // Central hole diameter\nhub_height = 12;       // Height of central hub\nhub_diameter = 20;     // Diameter of central hub\nweb_thickness = 4;     // Thickness of web between hub and rim\nrim_thickness = 5;     // Thickness of outer rim\nrelief_depth = 2;      // Weight reduction pockets depth\nkeyway_width = 4;      // Width of shaft keyway\nkeyway_depth = 2;      // Depth of shaft keyway\n\n// Tooth profile parameters\nnum_teeth = 20;\npressure_angle = 20;   // Standard 20° pressure angle\n\n// Calculate derived dimensions\npitch_diameter = root_radius * 2;\naddendum = tooth_height * 0.6;\ndedendum = tooth_height * 0.4;\nouter_radius = root_radius + addendum;\nroot_circle_radius = root_radius - dedendum;\nbase_circle_radius = root_radius * cos(pressure_angle);\n\n// Create involute tooth profile\nmodule tooth_profile() {\n    // Simplified involute curve approximation\n    difference() {\n        union() {\n            // Main tooth body\n            linear_extrude(height = module_thickness)\n                polygon(points=[\n                    [0, root_circle_radius],\n                    [addendum * 0.3, outer_radius],\n                    [addendum * 0.7, outer_radius],\n                    [addendum, root_circle_radius]\n                ]);\n            \n            // Rounded tooth tip\n            translate([addendum * 0.5, outer_radius, module_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(h=addendum, r=addendum * 0.5, center=true);\n        }\n        \n        // Root fillet\n        translate([0, 0, -1])\n            cylinder(h=module_thickness + 2, r=root_circle_radius, center=true);\n    }\n}\n\n// Generate all teeth\nmodule gear_teeth() {\n    for (i = [0:num_teeth-1]) {\n        rotate([0, 0, i * 360/num_teeth])\n            tooth_profile();\n    }\n}\n\n// Central hub with keyway\nmodule central_hub() {\n    difference() {\n        // Main hub cylinder\n        cylinder(h=hub_height, r=hub_diameter/2, center=true);\n        \n        // Bore hole\n        cylinder(h=hub_height + 2, r=bore_diameter/2, center=true);\n        \n        // Keyway\n        translate([0, -bore_diameter/2 - keyway_depth/2, 0])\n            cube([keyway_width, keyway_depth, hub_height + 2], center=true);\n    }\n}\n\n// Web with lightening holes\nmodule gear_web() {\n    difference() {\n        // Main web disc\n        cylinder(h=web_thickness, r=root_radius - rim_thickness, center=true);\n        \n        // Lightening holes\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60 + 30])\n                translate([root_radius/2, 0, 0])\n                    cylinder(h=web_thickness + 2, r=6, center=true);\n        }\n    }\n}\n\n// Outer rim\nmodule outer_rim() {\n    difference() {\n        // Main rim cylinder\n        cylinder(h=module_thickness, r=root_radius, center=true);\n        \n        // Cutout for web\n        cylinder(h=module_thickness + 2, r=root_radius - rim_thickness, center=true);\n    }\n}\n\n// Chamfers and fillets\nmodule edge_chamfers() {\n    difference() {\n        // Main gear body\n        union() {\n            cylinder(h=module_thickness, r=outer_radius, center=true);\n            central_hub();\n            gear_web();\n            outer_rim();\n        }\n        \n        // Top chamfer\n        translate([0, 0, module_thickness/2 - 0.1])\n            cylinder(h=module_thickness/2, r1=outer_radius, r2=outer_radius - 1, center=false);\n        \n        // Bottom chamfer\n        translate([0, 0, -module_thickness/2 + 0.1])\n            cylinder(h=module_thickness/2, r1=outer_radius - 1, r2=outer_radius, center=false);\n    }\n}\n\n// Assemble the complete gear\nunion() {\n    // Main gear body with chamfers\n    edge_chamfers();\n    \n    // Add teeth\n    gear_teeth();\n    \n    // Hub extension\n    translate([0, 0, hub_height/2 - module_thickness/2])\n        cylinder(h=hub_height - module_thickness, r=hub_diameter/2, center=false);\n}",
    "renders": true
  },
  {
    "mechanical_component": "helicalgear",
    "openscad_code": "// Helical Gear – medium-complexity, 3-D-printable\n// External diameter ≈ 80 mm, face width 20 mm, 20 teeth, 20° pressure angle, 30° helix angle\n// Wall thickness everywhere ≥ 2 mm; no severe overhangs because the gear is printed vertically (Z-up)\n\n$fa = 2; $fs = 1;\n\nmodule involute_point(r, t) = [r*(cos(t)+t*sin(t)), r*(sin(t)-t*cos(t))];   // 2-D involute\n\nmodule involute_profile(m, z, a, steps=40) {\n    // m = module, z = teeth, a = pressure angle (rad)\n    r = m*z/2;                       // pitch radius\n    rb = r*cos(a);                   // base radius\n    pitch_angle = 360/z;\n    tmax = tan(a);                   // involute parameter at pitch circle\n    da = 0.95*tmax/steps;\n    profile = [ for (i=[0:steps]) involute_point(rb, i*da) ];\n    // Mirror for the other side\n    mirror([0,1,0]) polygon(profile);\n    polygon(profile);\n}\n\nmodule tooth_2d(m, z, a) {\n    difference() {\n        union() {\n            involute_profile(m, z, a);\n            translate([0, m*z/2 + 1.25*m]) square([m*PI, 2.5*m], center=true);\n        }\n        // Root relief (2 mm radius)\n        translate([0, m*z/2 - 1.25*m]) circle(r=2);\n    }\n}\n\nmodule gear_2d(m, z, a) {\n    pitch_angle = 360/z;\n    for (i=[0:z-1])\n        rotate([0,0,i*pitch_angle])\n            tooth_2d(m, z, a);\n    // Hub disc between root and bore\n    circle(r=m*z/2 + 1.25*m + 2);\n}\n\nmodule helical_gear_3d(m, z, a, helix, thickness, bore) {\n    slices = 40;\n    slice_th = thickness/slices;\n    h_step = helix/slices;           // twist per slice\n    for (i=[0:slices-1]) {\n        translate([0,0,i*slice_th])\n            linear_extrude(height=slice_th, twist=h_step, convexity=4)\n                gear_2d(m, z, a);\n    }\n    // Central hub cylinder\n    cylinder(h=thickness+0.1, r=m*z/2 - 3*m, center=false); // wall ≥ 2 mm\n    // Bore\n    cylinder(h=thickness+2, r=bore/2, center=false);\n}\n\n// Parameters\nmodule = 2;\nteeth = 20;\npressure_angle = 20;\nhelix_angle = 30;\nface_width = 20;\nshaft_diameter = 8;\n\ndifference() {\n    helical_gear_3d(module, teeth, pressure_angle, helix_angle, face_width, shaft_diameter);\n    // Keyway (simple rectangular slot for shaft)\n    translate([0, -shaft_diameter/2-2, -1])\n        cube([2, shaft_diameter+4, face_width+2], center=false);\n}",
    "renders": true
  },
  {
    "mechanical_component": "crownwheel",
    "openscad_code": "// OpenSCAD Crownwheel Gear\n// Crownwheel gear with 36 teeth, 2 mm wall thickness, 3D-printable\n// Outer Ø 100 mm, bore Ø 12 mm, face width 20 mm\n\n// ---------- Parameters ----------\n$fn = 50;            // Resolution\nteeth = 36;          // Number of teeth\nD_o = 100;           // Outer diameter (mm)\nD_p = 92;            // Pitch diameter (mm)\nD_b = 12;            // Bore diameter (mm)\nface = 20;           // Face width / thickness (mm)\nwall = 2;            // Wall thickness for 3D printing (mm)\n\n// ---------- Tooth profile ----------\nmodule tooth() {\n    // Single tooth – involute-like shape built from primitives\n    // Height 4 mm above pitch circle\n    linear_extrude(height = face, center = true)\n    difference() {\n        polygon(points = [\n            [0, -D_p/2 + 1],\n            [1.5, -D_p/2 - 3],\n            [3,  -D_p/2 - 2.5],\n            [4,  -D_p/2 + 1],\n            [2,  -D_p/2 + 3.5],\n            [0,  -D_p/2 + 3]\n        ]);\n        translate([2, -D_p/2 + 1, 0])\n            circle(r = 0.5);\n    }\n}\n\n// ---------- Crownwheel body ----------\nmodule crownwheel() {\n    difference() {\n        union() {\n            // Main disk\n            cylinder(h = face, d = D_o, center = true);\n            \n            // Teeth array\n            for (i = [0 : teeth-1]) {\n                rotate([0, 0, i * 360/teeth])\n                    translate([0, 0, 0])\n                        tooth();\n            }\n            \n            // Structural spokes (6 spokes)\n            for (i = [0 : 5]) {\n                rotate([0, 0, i * 60]) {\n                    translate([D_b/2 + wall, 0, 0])\n                        cube([D_p/2 - D_b/2 - wall, wall*2, face], center = true);\n                }\n            }\n            \n            // Reinforcing rim on back\n            translate([0, 0, face/2 + wall/2])\n                cylinder(h = wall, d1 = D_p, d2 = D_p - 4, center = false);\n        }\n        \n        // Central bore\n        cylinder(h = face + 2, d = D_b, center = true);\n    }\n}\n\n// ---------- Mounting hub ----------\nmodule hub() {\n    difference() {\n        cylinder(h = face + 6, d = D_b + 10, center = true);\n        cylinder(h = face + 8, d = D_b, center = true);\n        \n        // Keyway\n        translate([0, -D_b/2 - 1, 0])\n            cube([D_b/2 + 2, 2, face + 8], center = true);\n    }\n}\n\n// ---------- Assembly ----------\nunion() {\n    crownwheel();\n    hub();\n}",
    "renders": true
  },
  {
    "mechanical_component": "sungear",
    "openscad_code": "// Realistic Sun-Gear Mechanical Component (Medium Complexity)\n// A central hub with 12 involute spur teeth, 2 mm wall thickness, 3D-printable (no overhangs >45°)\n// Outer Ø 100 mm, hub Ø 40 mm, overall thickness 25 mm, keyway included\n\n$fn = 50;               // global circle resolution\n\n// --- PARAMETERS ----------------------------------------------------------\nmodule params() {\n    gear_od         = 100;  // outer diameter\n    hub_d           = 40;   // central hub diameter\n    bore_d          = 20;   // shaft bore diameter\n    key_w           = 6;    // keyway width\n    key_h           = 3;    // keyway depth\n    thickness       = 25;   // gear thickness\n    teeth_n         = 12;   // number of teeth\n    tooth_h         = 8;    // addendum height\n    rim_clear       = 2;    // minimum wall thickness\n    chamfer         = 1.5;  // top/bottom edge chamfer\n}\n\n// --- INVOLUTE TOOTH PROFILE ---------------------------------------------\nmodule involute_tooth(m, z, a=20) {\n    // simplified circular approximation (printable & medium complexity)\n    r_pitch = m*z/2;\n    r_base  = r_pitch*cos(a);\n    r_add   = r_pitch + m;\n    r_ded   = r_pitch - 1.25*m;\n\n    // straight-flank tooth with fillet (45° safe overhang)\n    linear_extrude(height=params().thickness, center=true, convexity=4)\n    difference() {\n        circle(r=r_add);                    // addendum circle\n        circle(r=r_ded);                    // dedendum circle\n        // cut away half to create single tooth\n        translate([0,-r_add*2,0])\n            square([r_add*2, r_add*2], center=false);\n    }\n}\n\n// --- MAIN SUNGEAR MODULE -------------------------------------------------\nmodule sungear() {\n    m = (params().gear_od - 2*params().tooth_h) / params().teeth_n; // module\n\n    // central hub body\n    difference() {\n        // solid disk\n        cylinder(d=params().hub_d, h=params().thickness, center=true);\n        // shaft bore\n        cylinder(d=params().bore_d, h=params().thickness+1, center=true);\n        // keyway\n        translate([0, -params().bore_d/2, -params().thickness/2 - 1])\n            cube([params().key_w, params().key_h + params().bore_d/2, params().thickness+2], center=false);\n    }\n\n    // outer rim ring\n    difference() {\n        cylinder(d=params().gear_od, h=params().thickness, center=true);\n        cylinder(d=params().gear_od - 2*params().rim_clear, h=params().thickness+1, center=true);\n    }\n\n    // teeth around rim\n    for (i = [0 : params().teeth_n-1])\n        rotate([0,0,i*360/params().teeth_n])\n            translate([0,0,0])\n                involute_tooth(m, 1, 20);\n\n    // top chamfer\n    translate([0,0,params().thickness/2 - params().chamfer/2])\n        cylinder(d1=params().hub_d - 2*params().chamfer,\n                 d2=params().hub_d,\n                 h=params().chamfer, center=true);\n\n    // bottom chamfer\n    translate([0,0,-params().thickness/2 + params().chamfer/2])\n        cylinder(d1=params().hub_d,\n                 d2=params().hub_d - 2*params().chamfer,\n                 h=params().chamfer, center=true);\n}\n\n// --- RENDER -------------------------------------------------------------\nsungear();",
    "renders": true
  },
  {
    "mechanical_component": "planetgear",
    "openscad_code": "// Planetgear - realistic style, medium complexity\n// A 3D printable planetary gear system with sun, 3 planets, ring and carrier\n\n$fn = 64;  // Smooth curves for 3D printing\n\n// Overall scale factor - results in ~100mm diameter ring gear\nscale_factor = 1;\n\n// Gear parameters\nmodule tooth_profile(base_radius, tooth_height, tooth_width, count) {\n    for (i = [0:count-1]) {\n        rotate([0, 0, i * 360/count]) {\n            translate([base_radius, 0, 0]) {\n                cube([tooth_height, tooth_width, 8], center = true);\n            }\n        }\n    }\n}\n\n// Sun gear - central driver\nmodule sun_gear() {\n    color(\"gold\") difference() {\n        union() {\n            // Gear body\n            cylinder(h = 8, r = 15, $fn = 64);\n            // Teeth\n            tooth_profile(15, 3.5, 3, 20);\n        }\n        // Central shaft hole\n        cylinder(h = 10, r = 5, $fn = 32);\n        // Keyway\n        translate([4.5, -1, -1]) cube([2, 2, 10]);\n    }\n}\n\n// Planet gear\nmodule planet_gear() {\n    color(\"silver\") difference() {\n        union() {\n            // Gear body\n            cylinder(h = 8, r = 12, $fn = 64);\n            // Teeth\n            tooth_profile(12, 3, 2.5, 16);\n            // Central boss for bearing\n            cylinder(h = 4, r = 6, center = true);\n        }\n        // Bearing hole\n        cylinder(h = 10, r = 4, $fn = 32);\n    }\n}\n\n// Ring gear - internal teeth\nmodule ring_gear() {\n    color(\"bronze\") difference() {\n        union() {\n            // Outer ring body\n            cylinder(h = 10, r = 50, $fn = 128);\n            // Mounting flanges\n            for (i = [0:3]) {\n                rotate([0, 0, i * 90]) {\n                    translate([40, 0, 0]) {\n                        cube([20, 8, 10], center = true);\n                    }\n                }\n            }\n        }\n        // Central bore\n        cylinder(h = 12, r = 40, $fn = 128);\n        // Internal teeth\n        tooth_profile(40 - 3.5, -3.5, 3, 60);\n        // Mounting holes\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90 + 45]) {\n                translate([40, 0, 0]) {\n                    cylinder(h = 12, r = 3, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\n// Planet carrier - connects planet gears\nmodule planet_carrier() {\n    color(\"steel\") difference() {\n        union() {\n            // Main disk\n            cylinder(h = 5, r = 35, $fn = 64);\n            // Central hub\n            cylinder(h = 8, r = 8);\n            // Planet gear posts\n            for (i = [0:2]) {\n                rotate([0, 0, i * 120]) {\n                    translate([25, 0, 0]) {\n                        cylinder(h = 8, r = 6, $fn = 32);\n                    }\n                }\n            }\n            // Reinforcement ribs\n            for (i = [0:2]) {\n                rotate([0, 0, i * 120 + 60]) {\n                    translate([12.5, 0, 2.5]) {\n                        cube([25, 4, 5], center = true);\n                    }\n                }\n            }\n        }\n        // Central output shaft hole\n        cylinder(h = 10, r = 5, $fn = 32);\n        // Planet gear bearing holes\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120]) {\n                translate([25, 0, 0]) {\n                    cylinder(h = 10, r = 4.2, $fn = 32);\n                }\n            }\n        }\n    }\n}\n\n// Assembly - exploded view for printing\ntranslate([0, 0, 0]) ring_gear();\ntranslate([0, 0, 15]) planet_carrier();\ntranslate([0, 0, 30]) {\n    sun_gear();\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120 + 30]) {\n            translate([25, 0, 0]) planet_gear();\n        }\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "ringgear",
    "openscad_code": "// Ring Gear - Medium complexity realistic style\n// 3D printable ring gear with structural elements\n// Overall diameter: 100mm, thickness: 12mm\n\n// Parameters\n$fn = 100;\nmodule_height = 12;\nouter_diameter = 100;\ninner_diameter = 60;\ntooth_count = 24;\ntooth_height = 4;\ntooth_width = 6;\nmounting_holes = 6;\nmounting_hole_diameter = 4.5;\nmounting_hole_circle_diameter = 70;\nweb_thickness = 3;\nlightening_holes = 4;\n\n// Main ring gear body\nmodule ring_gear_body() {\n    difference() {\n        // Outer ring with gear teeth\n        union() {\n            // Base ring\n            cylinder(h=module_height, d=outer_diameter, center=true);\n            \n            // Gear teeth\n            for(i = [0 : tooth_count-1]) {\n                rotate([0, 0, i * 360/tooth_count])\n                    translate([outer_diameter/2 - tooth_height/2, 0, 0])\n                        cube([tooth_height, tooth_width, module_height], center=true);\n            }\n        }\n        \n        // Center hole\n        cylinder(h=module_height+2, d=inner_diameter, center=true);\n        \n        // Mounting holes\n        for(i = [0 : mounting_holes-1]) {\n            rotate([0, 0, i * 360/mounting_holes])\n                translate([mounting_hole_circle_diameter/2, 0, 0])\n                    cylinder(h=module_height+2, d=mounting_hole_diameter, center=true);\n        }\n        \n        // Lightening holes for weight reduction\n        for(i = [0 : lightening_holes-1]) {\n            rotate([0, 0, i * 360/lightening_holes + 45])\n                translate([(inner_diameter + mounting_hole_circle_diameter)/4, 0, 0])\n                    cylinder(h=module_height+2, d=12, center=true);\n        }\n    }\n}\n\n// Structural web between inner and outer ring\nmodule structural_web() {\n    difference() {\n        // Main web structure\n        cylinder(h=web_thickness, d=(outer_diameter + inner_diameter)/2, center=true);\n        \n        // Center hole\n        cylinder(h=web_thickness+2, d=inner_diameter + 5, center=true);\n    }\n}\n\n// Chamfer edges\nmodule chamfer_edges() {\n    difference() {\n        ring_gear_body();\n        \n        // Top chamfer\n        translate([0, 0, module_height/2 - 1])\n            cylinder(h=2, d1=outer_diameter - 2, d2=outer_diameter, center=true);\n        \n        // Bottom chamfer\n        translate([0, 0, -module_height/2 + 1])\n            cylinder(h=2, d1=outer_diameter, d2=outer_diameter - 2, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main gear body with chamfers\n    chamfer_edges();\n    \n    // Structural web\n    translate([0, 0, 0])\n        structural_web();\n}",
    "renders": true
  },
  {
    "mechanical_component": "differential",
    "openscad_code": "// Differential Gear Assembly - Medium Complexity\n// Overall size: ~100mm wide x ~80mm deep x ~80mm tall\n\n$fn=32;\n\n// Main module\nmodule differential_assembly() {\n    // Main housing - cylindrical shell\n    difference() {\n        cylinder(h=40, d=60);\n        translate([0,0,-1])\n            cylinder(h=42, d=56);\n    }\n    \n    // Side bearing housings\n    rotate([90,0,0])\n        translate([0,0,30])\n        side_bearings();\n    \n    // Input pinion and flange\n    translate([0,0,40])\n    rotate([90,0,0])\n        input_flange();\n    \n    // Output axles\n    translate([0,0,20])\n    rotate([90,0,0])\n        output_axles();\n    \n    // Internal spider gears\n    translate([0,0,20])\n        spider_gears();\n    \n    // Mounting flanges\n    mounting_flanges();\n}\n\nmodule side_bearings() {\n    for(i=[-1,1]) {\n        translate([i*35,0,0]) {\n            cylinder(h=20, d=25);\n            translate([0,0,-5])\n                cylinder(h=5, d=30);\n        }\n    }\n}\n\nmodule input_flange() {\n    difference() {\n        cylinder(h=15, d=30);\n        translate([0,0,-1])\n            cylinder(h=17, d=20);\n    }\n    \n    // Flange bolt holes\n    for(i=[0:5]) {\n        rotate([0,0,i*60])\n            translate([12,0,7.5])\n                rotate([0,90,0])\n                    cylinder(h=20, d=3);\n    }\n    \n    // Splined input shaft\n    translate([0,0,15])\n        cylinder(h=20, d=15);\n}\n\nmodule output_axles() {\n    for(i=[-1,1]) {\n        translate([i*25,0,0]) {\n            // Axle shaft\n            cylinder(h=30, d=12);\n            \n            // Axle flange\n            translate([i*15,0,0])\n                rotate([0,90,0])\n                    cylinder(h=20, d=20);\n        }\n    }\n}\n\nmodule spider_gears() {\n    // Central spider\n    difference() {\n        cube([40,40,15], center=true);\n        cube([36,36,17], center=true);\n    }\n    \n    // Side gears\n    rotate([0,90,0])\n        for(i=[-1,1]) {\n            translate([i*20,0,0]) {\n                difference() {\n                    cylinder(h=15, d=20);\n                    cylinder(h=15, d=16);\n                }\n                \n                // Gear teeth (simplified)\n                for(j=[0:7]) {\n                    rotate([0,0,j*45])\n                        translate([10,0,7.5])\n                            cube([4,2,15], center=true);\n                }\n            }\n        }\n    \n    // Pinion gears\n    for(i=[0:3]) {\n        rotate([0,0,i*90])\n            translate([0,20,7.5]) {\n                difference() {\n                    cylinder(h=15, d=12);\n                    cylinder(h=15, d=8);\n                }\n                \n                // Pinion teeth\n                for(j=[0:5]) {\n                    rotate([0,0,j*60])\n                        translate([6,0,7.5])\n                            cube([3,1.5,15], center=true);\n                }\n            }\n    }\n}\n\nmodule mounting_flanges() {\n    // Bottom mounting\n    translate([0,0,-5])\n        difference() {\n            cube([80,60,10], center=true);\n            cube([76,56,12], center=true);\n        }\n    \n    // Mounting holes\n    for(x=[-30,30]) {\n        for(y=[-20,20]) {\n            translate([x,y,-1])\n                cylinder(h=12, d=6);\n        }\n    }\n}\n\n// Render the assembly\ndifferential_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "transmission",
    "openscad_code": "// Transmission model - 5-speed manual gearbox\n// Overall dimensions: ~100mm x 80mm x 80mm\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main parameters\ntrans_length = 100;\ntrans_width = 80;\ntrans_height = 80;\nwall_thickness = 2;\n\n// Bell housing\nmodule bell_housing() {\n    difference() {\n        // Main bell shape\n        cylinder(h = 30, r1 = 40, r2 = 35);\n        \n        // Input shaft hole\n        translate([0, 0, -1])\n            cylinder(h = 32, r = 8);\n    }\n}\n\n// Main transmission case\nmodule transmission_case() {\n    difference() {\n        // Main body\n        hull() {\n            // Front section\n            translate([0, 0, 15])\n                cube([trans_length, trans_width, trans_height - 30], center = true);\n                \n            // Rear section\n            translate([-trans_length/2 + 20, 0, 0])\n                cube([40, trans_width - 20, trans_height - 10], center = true);\n        }\n        \n        // Internal cavity\n        translate([0, 0, 5])\n            cube([trans_length - wall_thickness*2, trans_width - wall_thickness*2, trans_height - wall_thickness*2 - 10], center = true);\n            \n        // Shift linkage holes (top)\n        for (i = [0:4]) {\n            translate([-35 + i * 15, 0, trans_height/2 - 2])\n                cylinder(h = 5, r = 4);\n        }\n    }\n}\n\n// Mounting flanges\nmodule mounting_flanges() {\n    // Front mounts\n    for (pos = [[-trans_length/2 + 10, trans_width/2 - 10, 0], \n               [-trans_length/2 + 10, -trans_width/2 + 10, 0]]) {\n        translate(pos)\n            rotate([90, 0, 0])\n                cylinder(h = 15, r = 5);\n    }\n    \n    // Rear mounts\n    for (pos = [[trans_length/2 - 30, trans_width/2 - 10, 0], \n               [trans_length/2 - 30, -trans_width/2 + 10, 0]]) {\n        translate(pos)\n            rotate([90, 0, 0])\n                cylinder(h = 15, r = 5);\n    }\n}\n\n// Output shaft\nmodule output_shaft() {\n    translate([trans_length/2 - 10, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 30, r = 8);\n}\n\n// Shift tower\nmodule shift_tower() {\n    translate([0, 0, trans_height/2])\n    union() {\n        // Base\n        cube([50, 20, 15], center = true);\n        \n        // Shift lever\n        translate([0, 10, 7.5])\n            rotate([0, 45, 0])\n                cylinder(h = 25, r = 3);\n    }\n}\n\n// Cooling fins\nmodule cooling_fins() {\n    for (i = [-1:1]) {\n        translate([i * 20, 0, -trans_height/2 + 10])\n            cube([15, trans_width + 10, 2]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main transmission\n    translate([0, 0, 0])\n        transmission_case();\n    \n    // Bell housing\n    translate([-trans_length/2, 0, 0])\n        bell_housing();\n    \n    // Mounting flanges\n    mounting_flanges();\n    \n    // Output shaft\n    output_shaft();\n    \n    // Shift tower\n    shift_tower();\n    \n    // Cooling fins on bottom\n    cooling_fins();\n}",
    "renders": true
  },
  {
    "mechanical_component": "clutch",
    "openscad_code": "// OpenSCAD Clutch – medium-complexity realistic style\n// Overall diameter ≈ 100 mm, thickness ≈ 30 mm\n$fa = 2; $fs = 0.5; // nice curved surfaces\n\n// wall thickness\nwall = 2;\n\n// outer clutch drum\nmodule drum() {\n    difference() {\n        cylinder(h = 30, d = 100, center = true);      // main drum body\n        cylinder(h = 31, d = 96 - 2*wall, center = true); // hollow\n    }\n}\n\n// mounting hub (center splined part)\nmodule hub() {\n    difference() {\n        cylinder(h = 32, d = 30, center = true);       // hub core\n        cylinder(h = 33, d = 18, center = true);       // shaft bore\n    }\n    for(i = [0:5:355])                               // 72 splines\n        rotate([0, 0, i])\n            translate([0, 12, 0])\n                cube([1.5, 3, 34], center = true);\n}\n\n// friction plate with 8 spring windows\nmodule friction_plate() {\n    difference() {\n        cylinder(h = 3, d = 90, center = true);\n        cylinder(h = 4, d = 50, center = true);       // inner hole\n        for(a = [0:45:315])                          // 8 windows\n            rotate([0, 0, a])\n                translate([35, 0, 0])\n                    cube([10, 6, 5], center = true);\n    }\n}\n\n// pressure plate with 8 spring posts\nmodule pressure_plate() {\n    difference() {\n        cylinder(h = 5, d = 90, center = true);\n        cylinder(h = 6, d = 50, center = true);       // inner hole\n    }\n    for(a = [0:45:315]) {\n        rotate([0, 0, a])\n            translate([35, 0, 0])\n                cylinder(h = 7, d = 6, center = true); // posts\n    }\n}\n\n// 3 coil springs\nmodule springs() {\n    for(a = [0:120:240]) {\n        rotate([0, 0, a])\n            translate([35, 0, 0])\n                difference() {\n                    cylinder(h = 18, d = 8, center = true);    // spring body\n                    cylinder(h = 19, d = 6, center = true);    // hollow\n                }\n    }\n}\n\n// assembly\nunion() {\n    drum();\n    hub();\n    translate([0, 0, 10]) friction_plate();\n    translate([0, 0, 14]) friction_plate();\n    translate([0, 0, 18]) pressure_plate();\n    translate([0, 0, 8]) springs();\n}",
    "renders": true
  },
  {
    "mechanical_component": "torqueconverter",
    "openscad_code": "// Torque Converter - Realistic Style, Medium Complexity\n// Overall size: 120mm diameter, 70mm thickness\n\n$fn = 36;\nwall_thickness = 2;\nmain_diameter = 120;\nmain_height = 70;\nhub_diameter = 25;\n\nmodule impeller_blade(index, count) {\n    angle = index * 360 / count;\n    rotate([0, 0, angle])\n        translate([main_diameter/2 - 20, 0, main_height/2 - 5])\n            rotate([0, 90, 0])\n                difference() {\n                    cube([18, 4, 25], center=true);\n                    translate([0, 0, -12.5])\n                        cube([16, 3.5, 24], center=true);\n                }\n}\n\nmodule turbine_blade(index, count) {\n    angle = index * 360 / count;\n    rotate([0, 0, angle])\n        translate([main_diameter/2 - 20, 0, main_height/2 - 35])\n            rotate([0, 90, 0])\n                difference() {\n                    cube([18, 4, 25], center=true);\n                    translate([0, 0, -12.5])\n                        cube([16, 3.5, 24], center=true);\n                }\n}\n\nmodule stator_blade(index, count) {\n    angle = index * 360 / count;\n    rotate([0, 0, angle])\n        translate([hub_diameter + 8, 0, main_height/2 - 15])\n            rotate([0, 90, 0])\n                difference() {\n                    cube([15, 3, 20], center=true);\n                    translate([0, 0, -10])\n                        cube([13, 2.5, 19], center=true);\n                }\n}\n\nmodule torque_converter() {\n    // Main housing shell\n    difference() {\n        cylinder(h=main_height, d=main_diameter, center=true);\n        cylinder(h=main_height + 2, d=main_diameter - 2*wall_thickness, center=true);\n    }\n    \n    // Front cover plate\n    translate([0, 0, main_height/2 - wall_thickness/2])\n        difference() {\n            cylinder(h=wall_thickness, d=main_diameter, center=true);\n            cylinder(h=wall_thickness + 1, d=hub_diameter + 10, center=true);\n        }\n    \n    // Rear cover plate\n    translate([0, 0, -main_height/2 + wall_thickness/2])\n        difference() {\n            cylinder(h=wall_thickness, d=main_diameter, center=true);\n            cylinder(h=wall_thickness + 1, d=hub_diameter + 10, center=true);\n        }\n    \n    // Central hub\n    difference() {\n        cylinder(h=main_height - 2*wall_thickness, d=hub_diameter, center=true);\n        cylinder(h=main_height - 2*wall_thickness + 2, d=hub_diameter - 2*wall_thickness, center=true);\n    }\n    \n    // Input shaft connection\n    translate([0, 0, main_height/2 + 5])\n        cylinder(h=15, d=hub_diameter - 5, center=true);\n    \n    // Output shaft connection\n    translate([0, 0, -main_height/2 - 5])\n        cylinder(h=15, d=hub_diameter - 5, center=true);\n    \n    // Impeller blades (16 total)\n    for(i=[0:15]) {\n        impeller_blade(i, 16);\n    }\n    \n    // Turbine blades (16 total)\n    for(i=[0:15]) {\n        turbine_blade(i, 16);\n    }\n    \n    // Stator assembly with blades\n    difference() {\n        cylinder(h=10, d=hub_diameter + 25, center=true);\n        cylinder(h=11, d=hub_diameter + 8, center=true);\n    }\n    \n    // Stator blades (8 total)\n    for(i=[0:7]) {\n        stator_blade(i, 8);\n    }\n    \n    // Mounting flange\n    translate([0, 0, -main_height/2 - 15])\n        difference() {\n            cylinder(h=10, d=main_diameter/1.5, center=true);\n            cylinder(h=11, d=hub_diameter + 15, center=true);\n            for(i=[0:5]) {\n                rotate([0, 0, i*60])\n                    translate([main_diameter/3, 0, 0])\n                        cylinder(h=11, d=5, center=true);\n            }\n        }\n    \n    // Structural ribs\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([main_diameter/2 - 10, 0, 0])\n                cube([20, 3, main_height - 4], center=true);\n    }\n}\n\n// Render the complete torque converter\ntorque_converter();",
    "renders": true
  },
  {
    "mechanical_component": "flywheel",
    "openscad_code": "// Realistic 3D printable flywheel – medium complexity\n$fn = 64; // smooth curves for 3D printing\n\n// Main dimensions -------------------------------------------------\ndiameter = 100;           // overall diameter 100 mm\nthickness = 18;           // overall thickness 18 mm\nshaft_d = 12;             // central shaft hole 12 mm\nspoke_count = 6;          // 6 spokes for balance\nrim_width = 10;           // rim width 10 mm\nkey_width = 4;            // keyway width 4 mm (standard for 12 mm shaft)\n\n// Derived values --------------------------------------------------\nrim_outer_r = diameter/2;\nrim_inner_r = rim_outer_r - rim_width;\nspoke_r = 4;              // spoke radius 4 mm → wall thickness 8 mm\nhub_r = shaft_d + 6;      // hub outer radius\nhub_h = thickness - 4;    // hub height fits inside rim\nkey_depth = 2;            // keyway depth\n\n// Build the flywheel ----------------------------------------------\nmodule flywheel() {\n    difference() {\n        union() {\n            // outer rim\n            cylinder(h = thickness, r = rim_outer_r, center = true);\n\n            // inner rim cut (create hollow rim)\n            difference() {\n                cylinder(h = thickness + 0.2, r = rim_inner_r, center = true);\n            }\n\n            // hub\n            translate([0, 0, 0])\n                cylinder(h = hub_h, r = hub_r, center = true);\n\n            // spokes\n            for(i = [0 : spoke_count-1]) {\n                rotate([0, 0, i * 360/spoke_count])\n                    translate([rim_inner_r - spoke_r, 0, 0])\n                        rotate([0, 90, 0])\n                            cylinder(h = rim_inner_r - hub_r - 2*spoke_r,\n                                     r = spoke_r,\n                                     center = true);\n            }\n\n            // balancing cut-outs between spokes (weight reduction)\n            for(i = [0 : spoke_count-1]) {\n                rotate([0, 0, i * 360/spoke_count + 360/spoke_count/2])\n                    translate([rim_inner_r + rim_width/2, 0, 0])\n                        cube([rim_width*0.7, rim_width*0.7, thickness*0.8], center = true);\n            }\n        }\n\n        // center shaft hole\n        cylinder(h = thickness + 1, r = shaft_d/2, center = true);\n\n        // keyway slot\n        translate([shaft_d/2 - key_depth/2, 0, 0])\n            cube([key_depth, key_width, thickness + 1], center = true);\n    }\n}\n\n// Optional simple stand for printing stability\nmodule stand() {\n    difference() {\n        cylinder(h = 4, r = rim_outer_r + 2, center = true);\n        cylinder(h = 5, r = rim_outer_r - 2, center = true);\n    }\n}\n\n// Render ----------------------------------------------------------\ntranslate([0, 0, 0]) flywheel();\n// Uncomment to add printing stand\n// translate([0, 0, -thickness/2 - 2]) stand();",
    "renders": true
  },
  {
    "mechanical_component": "driveshaft",
    "openscad_code": "// Realistic medium-complexity driveshaft mechanical component\n// Overall length ~120 mm, printable without supports\n\n$fn = 32;          // Smooth curves\nwall = 2;          // 3D-printable wall thickness\n\nmodule tube_segment(len, od, id) {\n    difference() {\n        cylinder(h = len, d = od, center = true);\n        cylinder(h = len + 0.2, d = id, center = true);\n    }\n}\n\nmodule universal_joint() {\n    // Fork yoke\n    difference() {\n        cube([18, 18, 10], center = true);\n        cube([20, 2.5, 12], center = true);\n    }\n    \n    // Bearing cap\n    translate([0, 0, 6])\n        difference() {\n            cylinder(h = 4, d = 14);\n            cylinder(h = 5, d = 8);\n        }\n    \n    // Cross-pin\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 20, d = 4, center = true);\n}\n\nmodule spline_stub(len) {\n    // Splined shaft\n    for(i = [0 : 15]) {\n        rotate([0, 0, i * 22.5])\n            translate([6.5, 0, 0])\n                cube([1.5, 3, len], center = true);\n    }\n    // Core shaft\n    cylinder(h = len, d = 8, center = true);\n    \n    // Retaining ring groove\n    translate([0, 0, len/2 - 3])\n        cylinder(h = 2, d = 9, $fn = 6);\n}\n\nmodule driveshaft() {\n    // Main tube\n    tube_segment(80, 18, 18 - 2*wall);\n    \n    // Front universal joint\n    translate([0, 0, 45])\n        rotate([0, 90, 0])\n            universal_joint();\n    \n    // Rear universal joint\n    translate([0, 0, -45])\n        rotate([0, -90, 0])\n            universal_joint();\n    \n    // Front spline stub (slides into transmission)\n    translate([0, 0, 55])\n        spline_stub(15);\n    \n    // Rear flange yoke\n    translate([0, 0, -55])\n        difference() {\n            cylinder(h = 8, d = 28);\n            for(a = [0 : 60 : 359])\n                rotate([0, 0, a])\n                    translate([11, 0, -1])\n                        cylinder(h = 10, d = 5.5);\n        }\n    \n    // Balance weights\n    translate([0, 12, 0])\n        cube([10, 4, 4], center = true);\n    translate([0, -12, 0])\n        cube([10, 4, 4], center = true);\n}\n\n// Render the driveshaft\ndriveshaft();",
    "renders": true
  },
  {
    "mechanical_component": "axle",
    "openscad_code": "// Realistic Medium-Complexity Drive Axle for 3D Printing\n// Overall length ≈ 110 mm, diameter ≈ 14 mm at splines\n\n$fn = 50;           // Smooth curves for printing\nwall = 2;           // 2 mm wall thickness everywhere\n\n// Main module\nmodule axle() {\n    // Central shaft (solid for strength)\n    color(\"silver\")\n    cylinder(h = 85, d = 10, center = true);\n\n    // Left spline end\n    translate([-42.5, 0, 0])\n    splined_end();\n\n    // Right threaded end\n    translate([42.5, 0, 0])\n    threaded_end();\n\n    // Bearing seats\n    translate([-25, 0, 0])\n    bearing_seat();\n    translate([25, 0, 0])\n    bearing_seat();\n\n    // Keyway along shaft\n    keyway();\n}\n\nmodule splined_end() {\n    // Main splined shaft\n    cylinder(h = 12, d = 14);\n    \n    // Splines (24 teeth, 2 mm high)\n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n        translate([7, 0, 0])\n        cube([2, 2.1, 12], center = true);\n    }\n\n    // Chamfer on outer edge for ease of assembly\n    difference() {\n        cylinder(h = 2, d1 = 14, d2 = 10);\n        translate([0, 0, -0.1])\n        cylinder(h = 2.2, d1 = 10, d2 = 6);\n    }\n}\n\nmodule threaded_end() {\n    // Threaded section\n    cylinder(h = 10, d = 8);\n\n    // Simplified threads (M8x1.25) – printed as 45° ridges\n    for(z = [0:1.25:10]) {\n        translate([0, 0, z])\n        rotate([0, 0, z * 30])\n        difference() {\n            cylinder(h = 0.8, d = 9.5);\n            cylinder(h = 0.8, d = 7);\n        }\n    }\n\n    // Lock-nut stop collar\n    translate([0, 0, 10.5])\n    cylinder(h = 3, d = 12);\n}\n\nmodule bearing_seat() {\n    // Raised ring for 608 bearing (22 mm OD, 7 mm thick)\n    cylinder(h = 7, d = 22);\n    // Center hole matches shaft diameter\n    translate([0, 0, -0.1])\n    cylinder(h = 7.2, d = 10.2);\n}\n\nmodule keyway() {\n    // Rectangular keyway 3 mm wide × 2 mm deep\n    rotate([0, 90, 0])\n    translate([-1.5, 0, -42.5])\n    cube([3, 2, 85]);\n}\n\n// Render the axle centered\naxle();",
    "renders": true
  },
  {
    "mechanical_component": "diffcase",
    "openscad_code": "// OpenSCAD diffcase (differential gearbox housing) – realistic style, medium complexity\n// Overall footprint ~80 × 80 × 65 mm, wall-thickness 2 mm, printable without supports\n\n// ---- parameters ----------------------------------------------------------\n$fn = 64;               // smoother curves\nwall = 2;               // wall thickness\nbody_d = 78;            // main diameter\nbody_h = 40;            // main height\nflange_h = 8;           // mounting-flange height\nflange_d = 92;          // flange diameter\nboss_d = 22; boss_h = 10;  // output-shaft bosses\nbolt_d = 6;             // M5 clearance holes\nbolt_pcd = 76;          // bolt circle diameter\nbolt_n = 6;             // number of bolts\nvent_d = 6; vent_h = 8; // breather vent\nrib_w = 3; rib_h = 4;   // structural ribs\n// --------------------------------------------------------------------------\n\n// ---- utilities ----------------------------------------------------------\nmodule bolt_hole(d = bolt_d, h = flange_h + 2) {\n    cylinder(d = d, h = h, center = true);\n}\n\nmodule hex_boss(d = 12, h = 6) {\n    // simple hexagon via cylinder\n    cylinder(d = d, h = h, $fn = 6, center = true);\n}\n\n// ---- main body ----------------------------------------------------------\nmodule main_shell() {\n    difference() {\n        // outer shell\n        cylinder(d = body_d, h = body_h);\n        // inner cavity\n        translate([0, 0, -0.5])\n            cylinder(d = body_d - 2*wall, h = body_h + 1);\n    }\n}\n\n// ---- mounting flange ----------------------------------------------------\nmodule flange() {\n    difference() {\n        // outer flange\n        union() {\n            cylinder(d = flange_d, h = flange_h);\n            // ribs for stiffness\n            for (a = [0 : 60 : 300]) {\n                rotate([0, 0, a])\n                    translate([body_d/2 - rib_w/2, 0, 0])\n                        cube([rib_w, body_d/2, rib_h]);\n            }\n        }\n        // bolt holes\n        for (a = [0 : 360/bolt_n : 360-360/bolt_n]) {\n            rotate([0, 0, a])\n                translate([bolt_pcd/2, 0, 0])\n                    bolt_hole();\n        }\n        // central recess\n        cylinder(d = body_d - 2*wall, h = flange_h + 1);\n    }\n}\n\n// ---- output shaft bosses -------------------------------------------------\nmodule shaft_bosses() {\n    // front boss\n    translate([0, 0, body_h])\n        difference() {\n            cylinder(d = boss_d, h = boss_h);\n            cylinder(d = boss_d - 2*wall, h = boss_h + 1);\n        }\n    // rear boss (mirror)\n    mirror([0, 0, 1])\n        translate([0, 0, body_h])\n            difference() {\n                cylinder(d = boss_d, h = boss_h);\n                cylinder(d = boss_d - 2*wall, h = boss_h + 1);\n            }\n}\n\n// ---- breather vent -------------------------------------------------------\nmodule breather_vent() {\n    translate([body_d/2 - vent_d, 0, body_h/2 + vent_h/2])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(d = vent_d, h = vent_h);\n                cylinder(d = vent_d - 2*wall, h = vent_h + 1);\n            }\n}\n\n// ---- assembly ------------------------------------------------------------\nunion() {\n    // stack flange + shell\n    translate([0, 0, 0]) flange();\n    translate([0, 0, flange_h]) main_shell();\n    shaft_bosses();\n    breather_vent();\n}",
    "renders": true
  },
  {
    "mechanical_component": "idler",
    "openscad_code": "// Realistic Idler Pulley Assembly\n// Optimized for 3D printing - 80mm diameter\n\n$fn = 48;  // Smooth curves\nwall = 2;  // 2mm wall thickness for printing\n\nmodule idler_pulley() {\n    // Main pulley rim - 80mm OD, 74mm ID\n    difference() {\n        cylinder(h=16, r=40);\n        translate([0,0,-1]) cylinder(h=18, r=37);\n    }\n    \n    // Center web with lightening holes\n    translate([0,0,8]) difference() {\n        cylinder(h=8, r=37);\n        // 6 lightening holes 20mm diameter\n        for(i=[0:5]) {\n            rotate([0,0,i*60]) translate([25,0,4]) cylinder(h=10, r=4);\n        }\n    }\n    \n    // Hub - 22mm OD, 8mm ID bearing bore\n    translate([0,0,0]) difference() {\n        // Main hub body\n        cylinder(h=16, r=11);\n        // Bearing bore\n        cylinder(h=18, r=4);\n    }\n    \n    // Bearing seats\n    translate([0,0,4]) difference() {\n        cylinder(h=2, r=7.5);\n        cylinder(h=3, r=4);\n    }\n    translate([0,0,10]) difference() {\n        cylinder(h=2, r=7.5);\n        cylinder(h=3, r=4);\n    }\n    \n    // Web reinforcement ribs\n    for(i=[0:5]) {\n        rotate([0,0,i*60]) translate([0,0,8]) cube([40,4,8], center=true);\n    }\n}\n\nmodule mounting_bracket() {\n    // Main bracket plate\n    translate([-50,0,0]) cube([100,20,6]);\n    \n    // Gussets\n    translate([-45,10,3]) rotate([0,45,0]) cube([15,2,15]);\n    translate([-45,-10,3]) rotate([0,-45,0]) cube([15,2,15]);\n    translate([30,10,3]) rotate([0,45,0]) cube([15,2,15]);\n    translate([30,-10,3]) rotate([0,-45,0]) cube([15,2,15]);\n    \n    // Mounting holes - M5 size\n    translate([-40,0,-1]) cylinder(h=8, r=2.75);\n    translate([40,0,-1]) cylinder(h=8, r=2.75);\n    \n    // Slot for belt clearance\n    translate([0,0,6]) cube([80,20,4]);\n}\n\n// Assembly\nidler_pulley();\ntranslate([0,0,25]) mounting_bracket();",
    "renders": true
  },
  {
    "mechanical_component": "layshaft",
    "openscad_code": "// Layshaft for a manual transmission – medium complexity, 3-D-printable, 100 mm long\n// ------------------------------------------------------------------------------\n// All dimensions in mm, wall thickness ≥2 mm, no large overhangs.\n\n$fn = 32;            // good looking curves without huge poly-count\nshaft_d  = 12;       // main shaft diameter\nshaft_l  = 100;      // overall shaft length\nbearing_d= 22;       // bearing shoulder diameter\nbearing_w= 10;       // bearing seat width\ngear_d   = 30;       // layshaft gear outer diameter\ngear_w   = 12;       // gear width\nkey_w    = 4;        // keyway width\nkey_d    = 2;        // keyway depth\nsnap_r   = 1.5;      // snap-ring groove radius\nsnap_d   = 14;       // snap-ring groove diameter\nsnap_w   = 1.5;      // snap-ring groove width\nspoke_n  = 6;        // spokes inside gear web\nweb_thk  = 4;        // web thickness\n\n// Half shaft (symmetry to avoid overhangs)\nmodule half_shaft() {\n    // main rod\n    cylinder(h = shaft_l/2, d = shaft_d);\n\n    // bearing seats (left & right)\n    translate([0,0, shaft_l/2 - bearing_w])\n        cylinder(h = bearing_w, d = bearing_d);\n\n    // snap-ring grooves\n    for(z=[shaft_l/2 - bearing_w - snap_w - 1, 1])\n        translate([0,0,z])\n            rotate_extrude()\n                polygon([[bearing_d/2 - snap_r,0],\n                         [bearing_d/2,0],\n                         [bearing_d/2, snap_w],\n                         [bearing_d/2 - snap_r, snap_w]]);\n}\n\n// Keyway along the shaft (remove material)\nmodule keyway(len) {\n    translate([0,0,-0.1])\n        cube([key_w, key_d+0.2, len+0.2], center=true);\n}\n\n// Gear blank\nmodule gear() {\n    difference() {\n        // outer rim\n        cylinder(h = gear_w, d = gear_d);\n        // bore\n        translate([0,0,-1])\n            cylinder(h = gear_w+2, d = shaft_d);\n    }\n}\n\n// Spoked web inside gear for realism & printability\nmodule web() {\n    difference() {\n        cylinder(h = web_thk, d = gear_d - 8);\n        cylinder(h = web_thk+2, d = shaft_d);\n    }\n    for(i=[0:spoke_n-1])\n        rotate([0,0,i*360/spoke_n])\n            translate([(gear_d - 8)/4,0,0])\n                cube([gear_d/2 - 4, 4, web_thk], center=true);\n}\n\n// Assemble one gear assembly\nmodule gear_assembly() {\n    translate([0,0, shaft_l/2 - gear_w/2 - bearing_w - 5])\n        union() {\n            gear();\n            web();\n        }\n}\n\n// Final layshaft\nunion() {\n    // shaft left half\n    difference() {\n        half_shaft();\n        keyway(shaft_l/2);\n    }\n    // shaft right half (mirrored)\n    mirror([0,0,1])\n        difference() {\n            half_shaft();\n            keyway(shaft_l/2);\n        }\n    // gear\n    gear_assembly();\n}",
    "renders": true
  },
  {
    "mechanical_component": "countershaft",
    "openscad_code": "// Countershaft mechanical component - OpenSCAD code\n// Medium complexity realistic style\n\n// Main parameters\nshaft_length = 80;\nshaft_diameter = 12;\nbearing_diameter = 20;\nbearing_length = 12;\npulley_diameter = 40;\npulley_width = 25;\nkey_width = 4;\nkey_height = 2;\nwall_thickness = 2;\n\n// Main shaft module\nmodule main_shaft() {\n    // Main cylindrical shaft\n    cylinder(h=shaft_length, d=shaft_diameter, center=true);\n    \n    // Keyway along shaft\n    translate([0, -shaft_diameter/2 - key_height/2, 0])\n        cube([shaft_length, key_height, key_width], center=true);\n}\n\n// Bearing module\nmodule bearing(position) {\n    translate([0, 0, position]) {\n        // Outer race\n        difference() {\n            cylinder(h=bearing_length, d=bearing_diameter, center=true);\n            cylinder(h=bearing_length + 0.1, d=bearing_diameter - wall_thickness*2, center=true);\n        }\n        \n        // Inner race\n        difference() {\n            cylinder(h=bearing_length + 0.1, d=shaft_diameter + wall_thickness, center=true);\n            cylinder(h=bearing_length + 0.2, d=shaft_diameter, center=true);\n        }\n        \n        // Bearing balls (simplified)\n        for(i=[0:7]) {\n            rotate([0, 0, i*45])\n                translate([bearing_diameter/2 - wall_thickness/2, 0, 0])\n                    sphere(d=wall_thickness, center=true);\n        }\n    }\n}\n\n// Pulley module\nmodule pulley(position) {\n    translate([0, 0, position]) {\n        difference() {\n            // Main pulley body\n            cylinder(h=pulley_width, d=pulley_diameter, center=true);\n            \n            // Center bore\n            cylinder(h=pulley_width + 0.2, d=shaft_diameter, center=true);\n        }\n        \n        // Pulley keyway\n        translate([0, -pulley_diameter/2 - key_height/2, 0])\n            cube([pulley_width + 0.2, key_height, key_width], center=true);\n        \n        // Belt groove (V-belt style)\n        difference() {\n            cylinder(h=pulley_width - 4, d=pulley_diameter - 4, center=true);\n            cylinder(h=pulley_width - 4 + 0.2, d=pulley_diameter - 14, center=true);\n        }\n    }\n}\n\n// Support bracket module\nmodule support_bracket(position) {\n    translate([0, 0, position]) {\n        // Base plate\n        cube([50, 8, 30], center=true);\n        \n        // Upright supports\n        for(side=[-1, 1]) {\n            translate([side*15, 0, 0])\n                cube([8, 8, 20], center=true);\n        }\n        \n        // Bearing housing\n        translate([0, 0, 12])\n            difference() {\n                cylinder(h=16, d=bearing_diameter + 8, center=true);\n                cylinder(h=16 + 0.2, d=bearing_diameter, center=true);\n            }\n        \n        // Mounting holes\n        for(side=[-1, 1]) {\n            translate([side*20, 0, -8])\n                rotate([90, 0, 0])\n                    cylinder(h=10, d=4, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main shaft\n    main_shaft();\n    \n    // Bearings\n    bearing(-shaft_length/2 + bearing_length/2 + 5);\n    bearing(shaft_length/2 - bearing_length/2 - 5);\n    \n    // Pulley\n    pulley(0);\n    \n    // Support brackets\n    support_bracket(-shaft_length/2 - 15);\n    support_bracket(shaft_length/2 + 15);\n}\n\n// Small chamfers for printability\nmodule chamfer() {\n    translate([0, 0, -shaft_length/2 - 2])\n        cylinder(h=2, d1=shaft_diameter, d2=shaft_diameter - 1, center=false);\n    translate([0, 0, shaft_length/2 + 2])\n        rotate([180, 0, 0])\n            cylinder(h=2, d1=shaft_diameter, d2=shaft_diameter - 1, center=false);\n}\n\nchamfer();",
    "renders": true
  },
  {
    "mechanical_component": "mainshaft",
    "openscad_code": "// Mainshaft mechanical component\n// Realistic medium-complexity model\n\n$fn = 50;\n\n// Main parameters\nshaft_length = 100;\nshaft_diameter = 12;\nbearing_seat_length = 8;\nbearing_seat_diameter = 15;\nkeyway_width = 4;\nkeyway_depth = 2;\nthread_diameter = 10;\nthread_length = 15;\ngear_seat_length = 12;\ngear_seat_diameter = 18;\nflange_diameter = 25;\nflange_thickness = 4;\nchamfer = 1;\n\n// Main shaft body\nmodule main_shaft() {\n    // Central shaft\n    cylinder(h=shaft_length, d=shaft_diameter, center=true);\n    \n    // Left bearing seat\n    translate([-shaft_length/2 + bearing_seat_length/2, 0, 0])\n        cylinder(h=bearing_seat_length, d=bearing_seat_diameter, center=true);\n    \n    // Right bearing seat\n    translate([shaft_length/2 - bearing_seat_length/2, 0, 0])\n        cylinder(h=bearing_seat_length, d=bearing_seat_diameter, center=true);\n    \n    // Gear seat in center\n    translate([0, 0, 0])\n        cylinder(h=gear_seat_length, d=gear_seat_diameter, center=true);\n}\n\n// Keyway cutting tool\nmodule keyway_cut(length) {\n    translate([0, -shaft_diameter/2, -length/2])\n        cube([keyway_width, keyway_depth, length], center=true);\n}\n\n// Threaded end\nmodule threaded_end() {\n    // Threaded section\n    translate([shaft_length/2 + thread_length/2, 0, 0])\n        cylinder(h=thread_length, d=thread_diameter, center=true);\n    \n    // End chamfer\n    translate([shaft_length/2 + thread_length, 0, 0])\n        cylinder(h=chamfer*2, d1=thread_diameter, d2=thread_diameter-chamfer, center=true);\n}\n\n// Flange end\nmodule flanged_end() {\n    // Flange\n    translate([-shaft_length/2 - flange_thickness/2, 0, 0])\n        cylinder(h=flange_thickness, d=flange_diameter, center=true);\n    \n    // Bolt holes\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([-shaft_length/2 - flange_thickness/2, flange_diameter/2 - 6, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=flange_thickness+1, d=3, center=true);\n    }\n    \n    // Center hole\n    translate([-shaft_length/2 - flange_thickness - 1, 0, 0])\n        cylinder(h=flange_thickness+2, d=shaft_diameter/2, center=true);\n}\n\n// Create keyways\nmodule keyways() {\n    // Left keyway (bearing seat)\n    translate([-shaft_length/2 + bearing_seat_length/2, 0, 0])\n        rotate([0, 90, 0])\n            keyway_cut(bearing_seat_length);\n    \n    // Center keyway (gear seat)\n    translate([0, 0, 0])\n        rotate([0, 90, 0])\n            keyway_cut(gear_seat_length);\n    \n    // Threaded end keyway\n    translate([shaft_length/2 + thread_length/2, 0, 0])\n        rotate([0, 90, 0])\n            keyway_cut(thread_length);\n}\n\n// Chamfers\nmodule chamfers() {\n    // Left shaft end chamfer\n    translate([-shaft_length/2, 0, 0])\n        cylinder(h=chamfer*2, d1=shaft_diameter-chamfer, d2=shaft_diameter, center=true);\n    \n    // Right shaft end chamfer\n    translate([shaft_length/2, 0, 0])\n        cylinder(h=chamfer*2, d1=shaft_diameter-chamfer, d2=shaft_diameter, center=true);\n    \n    // Bearing seat chamfers\n    translate([-shaft_length/2 + bearing_seat_length/2, 0, 0])\n        cylinder(h=chamfer, d1=bearing_seat_diameter, d2=bearing_seat_diameter-chamfer, center=true);\n    \n    translate([shaft_length/2 - bearing_seat_length/2, 0, 0])\n        cylinder(h=chamfer, d1=bearing_seat_diameter, d2=bearing_seat_diameter-chamfer, center=true);\n}\n\n// Main assembly\nunion() {\n    // Main shaft with features\n    difference() {\n        union() {\n            main_shaft();\n            threaded_end();\n            flanged_end();\n            chamfers();\n        }\n        keyways();\n    }\n    \n    // Small grease grooves on bearing seats\n    for(i = [0:2]) {\n        translate([-shaft_length/2 + bearing_seat_length/2, 0, 0])\n            rotate([0, 0, i*120])\n                translate([0, bearing_seat_diameter/2 - 1, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=bearing_seat_length, d=1, center=true);\n    }\n    \n    for(i = [0:2]) {\n        translate([shaft_length/2 - bearing_seat_length/2, 0, 0])\n            rotate([0, 0, i*120 + 60])\n                translate([0, bearing_seat_diameter/2 - 1, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=bearing_seat_length, d=1, center=true);\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "outputshaft",
    "openscad_code": "// Realistic Output Shaft - Medium Complexity (3D Printable)\n// Overall length: 120mm, max diameter: 30mm\n\n// Main shaft parameters\nshaft_length = 120;\nshaft_diameter = 20;\nwall_thickness = 2;\n\n// Keyway parameters\nkeyway_width = 6;\nkeyway_depth = 3;\nkeyway_length = 25;\n\n// Splined section parameters\nspline_count = 6;\nspline_height = 1.5;\nspline_length = 30;\n\n// Flange parameters\nflange_diameter = 30;\nflange_thickness = 5;\nflange_position = 85;\n\n// Threaded section parameters\nthread_diameter = 18;\nthread_length = 25;\nthread_pitch = 2;\n\n// Bearing seat parameters\nbearing_diameter = 22;\nbearing_length = 10;\nbearing_position = 100;\n\n// End chamfer parameters\nchamfer_length = 3;\n\nmodule shaft_body() {\n    difference() {\n        // Main cylindrical shaft\n        cylinder(h=shaft_length, d=shaft_diameter, $fn=64);\n        \n        // Keyway slot\n        translate([-keyway_width/2, -shaft_diameter/2, 0])\n            cube([keyway_width, keyway_depth, keyway_length]);\n        \n        // End chamfer\n        translate([0, 0, shaft_length-chamfer_length])\n            cylinder(h=chamfer_length+1, d1=shaft_diameter, d2=shaft_diameter-4, $fn=64);\n    }\n}\n\nmodule splined_section() {\n    difference() {\n        // Base cylinder for splines\n        translate([0, 0, 0])\n            cylinder(h=spline_length, d=shaft_diameter + 2*spline_height, $fn=64);\n        \n        // Cut spline valleys\n        for(i=[0:spline_count-1]) {\n            rotate([0, 0, i*(360/spline_count)])\n                translate([0, -shaft_diameter/2 - spline_height - 1, -1])\n                    cube([shaft_diameter + 2*spline_height + 2, spline_height + 1, spline_length + 2]);\n        }\n    }\n}\n\nmodule flange() {\n    difference() {\n        // Main flange body\n        translate([0, 0, flange_position])\n            cylinder(h=flange_thickness, d=flange_diameter, $fn=64);\n        \n        // Bolt holes (4x M4)\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([flange_diameter/2 - 6, 0, flange_position-1])\n                    cylinder(h=flange_thickness+2, d=4.2, $fn=16);\n        }\n        \n        // Center bore relief\n        translate([0, 0, flange_position])\n            cylinder(h=flange_thickness, d=shaft_diameter+2, $fn=64);\n    }\n}\n\nmodule threaded_section() {\n    // Simplified thread representation\n    difference() {\n        translate([0, 0, shaft_length-thread_length])\n            cylinder(h=thread_length, d=thread_diameter, $fn=64);\n        \n        // Thread valleys (simplified)\n        for(i=[0:thread_length/thread_pitch-1]) {\n            translate([0, 0, shaft_length-thread_length+i*thread_pitch])\n                cylinder(h=thread_pitch/2, d=thread_diameter-2, $fn=64);\n        }\n    }\n}\n\nmodule bearing_seat() {\n    // Bearing seating surface\n    translate([0, 0, bearing_position])\n        cylinder(h=bearing_length, d=bearing_diameter, $fn=64);\n}\n\n// Assembly\nunion() {\n    shaft_body();\n    translate([0, 0, 0]) splined_section();\n    flange();\n    threaded_section();\n    bearing_seat();\n}",
    "renders": true
  },
  {
    "mechanical_component": "inputshaft",
    "openscad_code": "// Input Shaft – realistic, medium complexity\n// Overall length ≈ 120 mm, Ø 12 mm shaft, Ø 20 mm gear, 6 mm keyway\n// Printable without supports; 2 mm min walls\n\n$fa = 1;\n$fs = 0.4;\n\nmodule shaft_body() {\n    // Main cylindrical shaft\n    cylinder(h = 110, d = 12, center = true);\n}\n\nmodule keyway() {\n    // Rectangular keyway along shaft\n    translate([0, -6, 0])\n        cube([12, 3, 6], center = true);\n}\n\nmodule chamfer_end() {\n    // Small 45° chamfer on each end of shaft\n    difference() {\n        cylinder(h = 2, d = 12, center = true);\n        cylinder(h = 2.2, d = 10.4, center = true);\n    }\n}\n\nmodule gear_teeth(n = 20) {\n    // Simple spur gear at one end\n    union() {\n        // Gear blank\n        cylinder(h = 8, d = 20, center = true);\n        // Cut teeth via boolean difference\n        for (i = [0 : n-1])\n            rotate([0, 0, i * 360/n])\n                translate([9, 0, 0])\n                    cube([3, 1.5, 8], center = true);\n    }\n}\n\nmodule bearing_seat() {\n    // Small stepped bearing seat Ø 10 mm x 5 mm long\n    translate([0, 0, 30])\n        cylinder(h = 5, d = 10, center = true);\n}\n\nmodule snap_ring_groove() {\n    // 1 mm wide snap-ring groove\n    translate([0, 0, -25])\n        difference() {\n            cylinder(h = 1, d = 12, center = true);\n            cylinder(h = 1.2, d = 9.5, center = true);\n        }\n}\n\nmodule inputshaft() {\n    union() {\n        // Shaft core\n        shaft_body();\n\n        // Keyway\n        difference() {\n            children();\n            keyway();\n        }\n\n        // Chamfers on ends\n        translate([0, 0, 55])\n            chamfer_end();\n        translate([0, 0, -55])\n            chamfer_end();\n\n        // Gear blank at +z end\n        translate([0, 0, 50])\n            gear_teeth();\n\n        // Bearing seat\n        bearing_seat();\n\n        // Snap-ring groove\n        snap_ring_groove();\n    }\n}\n\ninputshaft();",
    "renders": true
  },
  {
    "mechanical_component": "coupling",
    "openscad_code": "// Shaft coupling – two-piece clamp style with keyway, set-screws and flange bolts\n// Overall size ≈ 80 mm OD, 60 mm long\n\n$fn = 60;            // smooth curves for printability\nwall = 2;            // printable wall thickness (mm)\n\nmodule set_screw(l=6, d=3) {\n    // simple hex socket head set-screw\n    cylinder(h=l, d=d, $fn=6);\n}\n\nmodule bolt_head(h=4, d=6) {\n    // hex bolt head\n    cylinder(h=h, d=d, $fn=6);\n}\n\nmodule keyway(length, width, depth) {\n    // rectangular slot for shaft key\n    cube([length, width, depth], center=true);\n}\n\nmodule half_coupling() {\n    // main body: 40 mm radius, 30 mm long hollow cylinder\n    difference() {\n        cylinder(h=30, r=40);\n        translate([0,0,-1])         // small extra length for clean cut\n            cylinder(h=32, r=32);   // bore for shaft\n    }\n    \n    // clamp gap cut\n    translate([0,40,15]) rotate([90,0,0])\n        cube([20, 30, 80], center=true);\n    \n    // clamp bolt bosses\n    translate([30, 35, 15]) rotate([90,0,0])\n        cylinder(h=20, r=5);\n    translate([-30, 35, 15]) rotate([90,0,0])\n        cylinder(h=20, r=5);\n    \n    // flange disk\n    translate([0,0,30])\n        cylinder(h=8, r=40);\n    \n    // bolt holes on flange\n    for(a=[0:60:359])\n        rotate([0,0,a])\n            translate([30,0,30+4])\n                cylinder(h=10, r=3.5);\n    \n    // keyway along bore\n    rotate([90,0,0])\n        translate([0,0,15])\n            keyway(length=30, width=6, depth=3);\n    \n    // set-screw bosses on bore\n    translate([0,0,15]) rotate([0,90,0])\n        difference() {\n            cylinder(h=10, r=4, center=true);\n            cylinder(h=12, r=2, center=true);\n        }\n    translate([0,0,20]) rotate([0,90,0])\n        difference() {\n            cylinder(h=10, r=4, center=true);\n            cylinder(h=12, r=2, center=true);\n        }\n    \n    // add visible set-screws\n    translate([0,36,15]) set_screw();\n    translate([0,36,20]) set_screw();\n}\n\n// assemble two mirrored halves\nunion() {\n    half_coupling();\n    translate([0,0,30]) mirror([0,0,1]) half_coupling();\n}",
    "renders": true
  },
  {
    "mechanical_component": "universaljoint",
    "openscad_code": "$fn=50;\n\n// Universal joint parameters\nshaft_d = 12;           // Drive shaft diameter\nshaft_l = 40;           // Drive shaft length\nyoke_thick = 4;         // Fork thickness\nyoke_width = 20;        // Fork width\nyoke_depth = 18;        // Fork depth\npin_d = 6;              // Cross pin diameter\ncross_len = 22;         // Cross length (pin to pin)\nclearance = 0.4;        // Printing clearance between moving parts\n\n// Helper: rounded shaft\nmodule rounded_shaft(d, l, r=2) {\n    translate([0,0,-l/2])\n    union() {\n        cylinder(d=d, h=l-r);\n        translate([0,0,l-r])\n        sphere(d=d);\n        translate([0,0,0])\n        sphere(d=d);\n    }\n}\n\n// Helper: yoke fork\nmodule yoke(width, depth, thick, shaft_d) {\n    difference() {\n        // Main fork body\n        union() {\n            translate([0,0,0])\n                cube([width, thick, depth], center=true);\n            // Arms\n            translate([0, (width+thick)/4, 0])\n                cube([thick, width/2, depth], center=true);\n            translate([0, -(width+thick)/4, 0])\n                cube([thick, width/2, depth], center=true);\n        }\n        // Center hole for shaft\n        rotate([90,0,0])\n            cylinder(d=shaft_d+clearance*2, h=thick+1, center=true);\n        // Pin holes\n        rotate([90,0,0])\n            translate([(width+thick)/4, 0, 0])\n                cylinder(d=pin_d+clearance*2, h=thick+1, center=true);\n        rotate([90,0,0])\n            translate([-(width+thick)/4, 0, 0])\n                cylinder(d=pin_d+clearance*2, h=thick+1, center=true);\n    }\n}\n\n// Helper: cross pin block\nmodule cross_block(len, pin_d) {\n    difference() {\n        // Main block\n        cube([len, pin_d*1.6, pin_d*1.6], center=true);\n        // Pin holes\n        rotate([90,0,0])\n            cylinder(d=pin_d+clearance*2, h=len+1, center=true);\n        rotate([0,90,0])\n            cylinder(d=pin_d+clearance*2, h=len+1, center=true);\n    }\n}\n\n// Helper: pin\nmodule pin(d, l, head_d=0, head_l=0) {\n    union() {\n        cylinder(d=d, h=l);\n        if (head_d > 0 && head_l > 0)\n            translate([0,0,l])\n                cylinder(d1=head_d, d2=d, h=head_l);\n    }\n}\n\n// Assembly\nmodule universal_joint() {\n    // First yoke and shaft\n    translate([0,0,shaft_l/2+yoke_depth/2])\n    union() {\n        yoke(yoke_width, yoke_depth, yoke_thick, shaft_d);\n        translate([0,0,yoke_depth/2+shaft_l/2])\n            rotate([0,90,0])\n                rounded_shaft(shaft_d, shaft_l);\n    }\n\n    // Cross block\n    cross_block(cross_len, pin_d);\n\n    // Second yoke and shaft (rotated 90°)\n    translate([0,0,-shaft_l/2-yoke_depth/2])\n    rotate([90,0,0])\n    union() {\n        yoke(yoke_width, yoke_depth, yoke_thick, shaft_d);\n        translate([0,0,-yoke_depth/2-shaft_l/2])\n            rotate([0,90,0])\n                rounded_shaft(shaft_d, shaft_l);\n    }\n\n    // Pins (for display only – printed separately)\n    color(\"silver\")\n    for (sign = [-1, 1]) {\n        translate([0, sign*(yoke_width+thick)/4, 0])\n            rotate([90,0,0])\n                pin(pin_d, yoke_thick+cross_len/2+2, head_d=pin_d*1.5, head_l=2);\n        translate([sign*(yoke_width+thick)/4, 0, 0])\n            rotate([0,90,0])\n                pin(pin_d, yoke_thick+cross_len/2+2, head_d=pin_d*1.5, head_l=2);\n    }\n}\n\n// Render\nuniversal_joint();",
    "renders": true
  },
  {
    "mechanical_component": "constantvelocityjoint",
    "openscad_code": "// Constant Velocity Joint (CVJ) - Rzeppa Style\n// Medium complexity, 3D-printable, 80 mm Ø\n\n// -------------- PARAMETERS --------------\nball_d = 80;               // outer race diameter\nball_r = ball_d/2;\ninner_d = 28;              // shaft hole diameter\nshaft_d = 12;              // shaft diameter for splines\nwall_t = 2.2;              // printable wall thickness\nball_cnt = 6;              // number of balls\nball_Ø = 12;               // diameter of each ball\ncage_thick = 6;            // thickness of ball cage\nrace_clear = 0.3;          // clearance for smooth motion\nshaft_len = 35;\n\n// -------------- MODULES --------------\nmodule ball() {\n    sphere(d = ball_Ø, $fn=20);\n}\n\n// Outer race with six ball grooves\nmodule outer_race() {\n    difference() {\n        // Main hollow sphere\n        sphere(d = ball_d + wall_t*2, $fn=60);\n        // Center hole\n        translate([0,0,-ball_r-1])\n            cylinder(h = ball_d+2, d = inner_d, $fn=60);\n        // Cut groove for each ball\n        for(i=[0:ball_cnt-1]) {\n            rotate([0,0,i*360/ball_cnt])\n                translate([0, ball_r*0.75, 0])\n                    rotate([90,0,0])\n                        cylinder(h = ball_d, d = ball_Ø+race_clear*2, $fn=20);\n        }\n    }\n}\n\n// Inner race with matching grooves\nmodule inner_race() {\n    difference() {\n        // Main ball\n        sphere(d = ball_d*0.6, $fn=50);\n        // Shaft hole with splines\n        translate([0,0,-ball_r-1])\n            cylinder(h = ball_d+2, d = shaft_d+2, $fn=30);\n        // Splines\n        for(i=[0:11]) {\n            rotate([0,0,i*30])\n                translate([shaft_d/2+1,0,-ball_r-1])\n                    cube([2,2,ball_d+2], center=true);\n        }\n        // Cut grooves\n        for(i=[0:ball_cnt-1]) {\n            rotate([0,0,i*360/ball_cnt+360/ball_cnt/2])\n                translate([0, ball_r*0.35, 0])\n                    rotate([90,0,0])\n                        cylinder(h = ball_d, d = ball_Ø+race_clear*2, $fn=20);\n        }\n    }\n}\n\n// Ball cage / separator\nmodule cage() {\n    difference() {\n        // Main cage ring\n        rotate_extrude($fn=60)\n            translate([ball_r*0.55-wall_t/2, 0, 0])\n                square([wall_t, cage_thick]);\n        // Ball windows\n        for(i=[0:ball_cnt-1]) {\n            rotate([0,0,i*360/ball_cnt])\n                translate([ball_r*0.55, 0, 0])\n                    sphere(d = ball_Ø+1, $fn=20);\n        }\n    }\n}\n\n// Output shaft stub\nmodule shaft() {\n    cylinder(h = shaft_len, d = shaft_d, $fn=30);\n}\n\n// -------------- ASSEMBLY --------------\n// Outer race\nouter_race();\n\n// Inner race shifted for clearance\ntranslate([0,0,ball_r*0.6])\n    inner_race();\n\n// Cage between races\ncage();\n\n// Shaft protruding\ntranslate([0,0,-ball_r-shaft_len/2])\n    shaft();",
    "renders": true
  },
  {
    "mechanical_component": "synchro",
    "openscad_code": "// Synchro (rotary transformer) – realistic, medium complexity\n// Main body Ø42 mm × 50 mm, 2 mm wall thickness, 3D-printable\n\n// Overall scale factor (1 = 100 %)\nscale_factor = 1;\n\nmodule body_shell() {\n    difference() {\n        // Outer cylinder\n        cylinder(d = 42, h = 50, $fn = 64);\n        // Hollow core\n        translate([0, 0, 2])\n            cylinder(d = 38, h = 46, $fn = 64);\n    }\n}\n\nmodule mounting_flange() {\n    difference() {\n        // Flange disc\n        cylinder(d = 54, h = 4, $fn = 64);\n        // Four mounting holes Ø3.2 mm on 46 mm PCD\n        for (a = [0:90:270])\n            rotate([0, 0, a])\n                translate([23, 0, -1])\n                    cylinder(d = 3.2, h = 6, $fn = 16);\n    }\n}\n\nmodule stator_pins() {\n    // Six stator terminals on rear face\n    for (i = [0:5])\n        translate([0, 20, 48 - i * 7])\n            rotate([90, 0, 0])\n                cylinder(d1 = 2.2, d2 = 1.6, h = 8, $fn = 12);\n}\n\nmodule rotor_shaft() {\n    // Main shaft Ø6 mm\n    translate([0, 0, -14])\n        cylinder(d = 6, h = 20, $fn = 32);\n    // Flat section\n    translate([0, 3, -14])\n        cube([12, 1.5, 6], center = true);\n}\n\nmodule key_slot() {\n    // Keyway 2 mm × 2 mm\n    translate([3, 0, 0])\n        cube([2, 2.5, 50], center = true);\n}\n\nmodule rear_cover() {\n    difference() {\n        // Cover plate\n        translate([0, 0, 50])\n            cylinder(d = 42, h = 3, $fn = 64);\n        // Central hole for shaft\n        translate([0, 0, 49.9])\n            cylinder(d = 6.5, h = 3.2, $fn = 32);\n    }\n}\n\n// Assembly\nscale(scale_factor) {\n    union() {\n        body_shell();\n        translate([0, 0, -4])\n            mounting_flange();\n        stator_pins();\n        rotor_shaft();\n        difference() {\n            body_shell();\n            key_slot();\n        }\n        rear_cover();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "sleeve",
    "openscad_code": "// Sleeve Mechanical Component - Flanged Bearing Sleeve Assembly\n// Realistic style, medium complexity\n\n$fn = 50;  // Smooth curves\n\n// Main parameters\nsleeve_length = 60;\nsleeve_outer_diameter = 30;\nsleeve_inner_diameter = 20;\nflange_diameter = 45;\nflange_thickness = 5;\nwall_thickness = 2.5;\n\n// Bolt hole parameters\nbolt_hole_diameter = 5;\nbolt_circle_diameter = 36;\nnum_bolt_holes = 4;\n\n// Keyway parameters\nkeyway_width = 6;\nkeyway_depth = 3;\n\n// Grease grooves\ngroove_width = 2;\ngroove_depth = 1;\nnum_grooves = 3;\n\nmodule main_sleeve() {\n    difference() {\n        // Outer sleeve body\n        cylinder(h = sleeve_length, d = sleeve_outer_diameter, center = true);\n        \n        // Inner bore\n        cylinder(h = sleeve_length + 1, d = sleeve_inner_diameter, center = true);\n        \n        // Keyway\n        translate([0, sleeve_inner_diameter/2 - keyway_depth/2, 0])\n            cube([keyway_width, keyway_depth, sleeve_length + 2], center = true);\n    }\n}\n\nmodule flange() {\n    difference() {\n        // Flange body\n        cylinder(h = flange_thickness, d = flange_diameter);\n        \n        // Counterbore\n        translate([0, 0, -0.1])\n            cylinder(h = flange_thickness + 0.2, d = sleeve_outer_diameter);\n        \n        // Bolt holes\n        for(i = [0:num_bolt_holes-1]) {\n            rotate([0, 0, i * 360/num_bolt_holes])\n                translate([bolt_circle_diameter/2, 0, -0.1])\n                    cylinder(h = flange_thickness + 0.2, d = bolt_hole_diameter);\n        }\n    }\n}\n\nmodule grease_grooves() {\n    difference() {\n        // Main sleeve (already hollow)\n        cylinder(h = sleeve_length, d = sleeve_inner_diameter + groove_depth*2, center = true);\n        \n        // Inner bore\n        cylinder(h = sleeve_length + 1, d = sleeve_inner_diameter, center = true);\n        \n        // Grooves\n        for(i = [1:num_grooves]) {\n            translate([0, 0, -sleeve_length/2 + i*(sleeve_length/(num_grooves+1))])\n                rotate([0, 0, 45])\n                    cube([groove_width*2, groove_depth, groove_width], center = true);\n        }\n    }\n}\n\nmodule chamfers() {\n    // Top chamfer\n    translate([0, 0, sleeve_length/2 - 2])\n        cylinder(h = 2, d1 = sleeve_outer_diameter, d2 = sleeve_outer_diameter - 3);\n    \n    // Bottom chamfer\n    translate([0, 0, -sleeve_length/2 + 2])\n        cylinder(h = 2, d1 = sleeve_outer_diameter - 3, d2 = sleeve_outer_diameter);\n}\n\n// Assembly\ntranslate([0, 0, sleeve_length/2 + flange_thickness/2])\n    union() {\n        // Main sleeve body with chamfers\n        union() {\n            main_sleeve();\n            grease_grooves();\n            chamfers();\n        }\n        \n        // Flange\n        translate([0, 0, -sleeve_length/2 - flange_thickness/2])\n            flange();\n    }",
    "renders": true
  },
  {
    "mechanical_component": "hub",
    "openscad_code": "// Realistic Hub Mechanical Component\n// Medium complexity OpenSCAD model\n\n// Main parameters\n$fn = 50;\nhub_diameter = 80;\nhub_height = 25;\nshaft_diameter = 12;\nmounting_bolt_count = 6;\nmounting_bolt_diameter = 8;\nmounting_bolt_circle = 65;\n\n// Spoke parameters\nspoke_count = 5;\nspoke_width = 8;\nspoke_thickness = 4;\nspoke_length = 60;\n\n// Bearing recess\nbearing_recess_diameter = 20;\nbearing_recess_depth = 5;\n\nmodule hub_body() {\n    // Main hub cylinder\n    difference() {\n        cylinder(d=hub_diameter, h=hub_height, center=true);\n        \n        // Central shaft hole\n        cylinder(d=shaft_diameter, h=hub_height+2, center=true);\n        \n        // Mounting bolt holes\n        for(i = [0:mounting_bolt_count-1]) {\n            rotate([0, 0, i * 360/mounting_bolt_count])\n            translate([mounting_bolt_circle/2, 0, 0])\n            cylinder(d=mounting_bolt_diameter, h=hub_height+2, center=true);\n        }\n        \n        // Bearing recess on top\n        translate([0, 0, hub_height/2 - bearing_recess_depth/2])\n        cylinder(d=bearing_recess_diameter, h=bearing_recess_depth+1, center=true);\n        \n        // Bearing recess on bottom\n        translate([0, 0, -hub_height/2 + bearing_recess_depth/2])\n        cylinder(d=bearing_recess_diameter, h=bearing_recess_depth+1, center=true);\n    }\n}\n\nmodule spoke_connection() {\n    // Spoke mounting flanges\n    difference() {\n        cylinder(d=hub_diameter + 20, h=spoke_thickness+2, center=true);\n        cylinder(d=hub_diameter + 16, h=spoke_thickness+4, center=true);\n    }\n}\n\nmodule spokes() {\n    for(i = [0:spoke_count-1]) {\n        rotate([0, 0, i * 360/spoke_count])\n        translate([hub_diameter/2 + spoke_length/2 - 10, 0, 0])\n        cube([spoke_length, spoke_width, spoke_thickness], center=true);\n    }\n}\n\nmodule hub_flange() {\n    // Reinforcement ring\n    difference() {\n        cylinder(d=hub_diameter + 10, h=6, center=true);\n        cylinder(d=hub_diameter - 5, h=8, center=true);\n    }\n}\n\nmodule keyway() {\n    // Shaft keyway\n    translate([shaft_diameter/2 - 1, 0, 0])\n    cube([2, 4, hub_height], center=true);\n}\n\n// Assembly\nunion() {\n    hub_body();\n    \n    translate([0, 0, spoke_thickness/2 + 2])\n    spoke_connection();\n    \n    translate([0, 0, -spoke_thickness/2 - 2])\n    spoke_connection();\n    \n    translate([0, 0, spoke_thickness/2 + 2])\n    spokes();\n    \n    translate([0, 0, -spoke_thickness/2 - 2])\n    spokes();\n    \n    translate([0, 0, hub_height/2 + 3])\n    hub_flange();\n    \n    translate([0, 0, -hub_height/2 - 3])\n    hub_flange();\n    \n    // Keyway cutout\n    difference() {\n        hub_body();\n        keyway();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "collar",
    "openscad_code": "// Collar mechanical component - OpenSCAD\n// A split-shaft collar with clamping mechanism\n// Size: 60mm OD, 20mm ID, 25mm width\n\n// Parameters\n$fn = 36;\nshaft_diameter = 20;\ncollar_od = 60;\ncollar_width = 25;\nwall_thickness = 2.5;\nbolt_diameter = 6;\nbolt_head_diameter = 10;\nbolt_head_height = 4;\nslot_width = 2;\nslot_depth = 20;\n\nmodule main_collar() {\n    difference() {\n        // Main collar body\n        cylinder(h=collar_width, d=collar_od);\n        \n        // Central shaft hole\n        translate([0, 0, -1])\n            cylinder(h=collar_width+2, d=shaft_diameter);\n        \n        // Split slot\n        translate([collar_od/2, 0, -1])\n            cube([slot_depth, slot_width, collar_width+2], center=true);\n    }\n}\n\nmodule bolt_holes() {\n    // Two bolt holes for clamping\n    for(i = [0, 1]) {\n        rotate([0, 0, i*180])\n            translate([(collar_od/2 - 10), 0, collar_width/2])\n                rotate([90, 0, 0])\n                    cylinder(h=collar_width, d=bolt_diameter+1);\n    }\n}\n\nmodule bolt_heads() {\n    // Two hex bolt heads\n    for(i = [0, 1]) {\n        rotate([0, 0, i*180])\n            translate([(collar_od/2 - 10), 0, collar_width/2])\n                rotate([90, 0, 0])\n                    cylinder(h=bolt_head_height, d=bolt_head_diameter, $fn=6);\n    }\n}\n\nmodule alignment_pins() {\n    // Small alignment pins on the split faces\n    for(i = [0, 1]) {\n        rotate([0, 0, i*180])\n            translate([(collar_od/2 - 15), 0, collar_width/2])\n                rotate([90, 0, 0])\n                    cylinder(h=3, d=4);\n    }\n}\n\nmodule pin_holes() {\n    // Corresponding pin holes\n    for(i = [0, 1]) {\n        rotate([0, 0, i*180])\n            translate([(collar_od/2 - 15), 0, collar_width/2])\n                rotate([90, 0, 0])\n                    cylinder(h=3.5, d=4.2);\n    }\n}\n\n// Assembly\nunion() {\n    difference() {\n        main_collar();\n        bolt_holes();\n        pin_holes();\n    }\n    \n    // Add bolt heads on one side\n    translate([0, 0, collar_width/2 - bolt_head_height/2])\n        bolt_heads();\n    \n    // Add alignment pins on the other side\n    translate([0, 0, -collar_width/2 + 1.5])\n        alignment_pins();\n}\n\n// Keyway slot (optional feature)\ntranslate([-1, shaft_diameter/2, collar_width/2])\n    cube([2, 5, collar_width]);",
    "renders": true
  },
  {
    "mechanical_component": "dogclutch",
    "openscad_code": "// Dog-clutch coupling – medium-complexity, 3D-printable\n// Overall Ø ≈ 70 mm, length ≈ 40 mm, no steep overhangs\n\n$fa = 2; $fs = 0.5;\n\n// ---------- parameters ----------\nhub_d          = 40;          // central hub diameter\nhub_l          = 20;          // hub thickness\nshaft_d        = 12;          // shaft hole diameter\nwall           = 2;           // printable wall thickness\ntooth_h        = 8;           // dog tooth height\ntooth_depth    = 5;           // tooth engagement depth\nn_teeth        = 6;           // number of dog teeth\nouter_d        = hub_d+2*tooth_h;  // max diameter\nboss_l         = 8;           // shaft boss length\nkey_w          = 4;           // keyway width\nkey_h          = 2;           // keyway depth\n\n// ---------- module: one dog tooth ----------\nmodule dog_tooth() {\n    // simple trapezoid tooth, 45° draft for printability\n    linear_extrude(height = tooth_depth, convexity=4)\n        polygon(points=[\n            [hub_d/2,               -wall/2],\n            [hub_d/2+tooth_h-wall,  -wall/2],\n            [hub_d/2+tooth_h-wall,   wall/2],\n            [hub_d/2,                wall/2]\n        ]);\n}\n\n// ---------- module: shaft boss ----------\nmodule shaft_boss() {\n    difference() {\n        cylinder(d=hub_d, h=boss_l, center=false);\n        // shaft bore\n        translate([0,0,-1])\n            cylinder(d=shaft_d, h=boss_l+2, center=false);\n        // keyway\n        translate([0, -shaft_d/2-key_h/2, -1])\n            cube([key_w, key_h+0.2, boss_l+2], center=false);\n    }\n}\n\n// ---------- module: dog half-coupling ----------\nmodule dog_half(inv=false) {\n    rotate([0,0, inv?180:0]) {\n        union() {\n            // hub cylinder\n            cylinder(d=hub_d, h=hub_l, center=false);\n\n            // dog teeth around perimeter\n            for(i=[0:n_teeth-1])\n                rotate([0,0,i*360/n_teeth])\n                    translate([0,0,hub_l-tooth_depth])\n                        dog_tooth();\n\n            // shaft boss on one side\n            translate([0,0, hub_l])\n                shaft_boss();\n        }\n    }\n}\n\n// ---------- assembly ----------\n// first half\ndog_half(false);\n\n// second half flipped for printability demo\ntranslate([0, 0, hub_l+boss_l+5])\n    dog_half(true);",
    "renders": true
  },
  {
    "mechanical_component": "shiftfork",
    "openscad_code": "// Realistic Shift Fork - 3D Printable\n// Medium complexity mechanical component for gear shifting systems\n\n// Main parameters\nfork_length = 120;\nfork_width = 40;\nfork_height = 15;\nhub_diameter = 25;\nslot_width = 6;\nwall_thickness = 2;\n\n// Fork arms\nmodule fork_arms() {\n    // Left arm\n    translate([-fork_width/2 + wall_thickness, 0, 0])\n        difference() {\n            cube([fork_width/2 - wall_thickness, fork_length*0.7, fork_height]);\n            translate([wall_thickness, fork_length*0.1, -1])\n                cube([fork_width/4, fork_length*0.5, fork_height+2]);\n        }\n    \n    // Right arm\n    translate([0, 0, 0])\n        difference() {\n            cube([fork_width/2 - wall_thickness, fork_length*0.7, fork_height]);\n            translate([-fork_width/4 - wall_thickness, fork_length*0.1, -1])\n                cube([fork_width/4, fork_length*0.5, fork_height+2]);\n        }\n}\n\n// Hub boss with bearing surface\nmodule hub_boss() {\n    // Main boss\n    cylinder(h=fork_height*1.5, d1=hub_diameter+6, d2=hub_diameter+4);\n    \n    // Bearing bore\n    translate([0, 0, -1])\n        cylinder(h=fork_height*1.5+2, d=hub_diameter, $fn=32);\n    \n    // Mounting holes\n    for(i=[0:120:359])\n        rotate([0, 0, i])\n            translate([hub_diameter/2 + 3, 0, fork_height*0.75])\n                rotate([90, 0, 0])\n                    cylinder(h=fork_height*1.5+2, d=3.5, $fn=16);\n}\n\n// Fork shaft\nmodule fork_shaft() {\n    // Shaft body\n    translate([0, fork_length*0.7, fork_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=fork_length*0.3, d1=fork_width*0.8, d2=fork_width*0.6);\n    \n    // Reinforcement ribs\n    for(i=[-1, 1])\n        translate([i*fork_width/4, fork_length*0.7 - fork_length*0.05, 0])\n            rotate([0, 30*i, 0])\n                cube([wall_thickness*2, fork_length*0.1, fork_height*1.2]);\n}\n\n// Shift fork fingers\nmodule fingers() {\n    // Finger base\n    translate([0, fork_length*0.85, fork_height/2])\n        cube([fork_width*0.9, fork_length*0.15, fork_height*1.1], center=true);\n    \n    // Finger grooves\n    for(i=[-1, 0, 1])\n        translate([i*fork_width/6, fork_length*0.85, fork_height/2])\n            cube([slot_width, fork_length*0.15+1, fork_height*0.8], center=true);\n}\n\n// Assembly\nunion() {\n    // Fork body\n    fork_arms();\n    \n    // Hub connection\n    translate([0, fork_length*0.2, fork_height/2])\n        hub_boss();\n    \n    // Shaft extension\n    fork_shaft();\n    \n    // Shifting fingers\n    fingers();\n    \n    // Structural gussets\n    difference() {\n        // Left gusset\n        translate([-fork_width/2 - 3, fork_length*0.35, 0])\n            rotate([0, 0, 30])\n                cube([fork_width/3, fork_length*0.3, fork_height]);\n        \n        // Lightening hole\n        translate([-fork_width/2 - 1, fork_length*0.35, -1])\n            rotate([0, 0, 30])\n                cube([fork_width/4, fork_length*0.2, fork_height+2]);\n    }\n    \n    difference() {\n        // Right gusset\n        translate([fork_width/2 + 3, fork_length*0.35, 0])\n            rotate([0, 0, -30])\n                cube([fork_width/3, fork_length*0.3, fork_height]);\n        \n        // Lightening hole\n        translate([fork_width/2 + 1, fork_length*0.35, -1])\n            rotate([0, 0, -30])\n                cube([fork_width/4, fork_length*0.2, fork_height+2]);\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "selector",
    "openscad_code": "// Selector Switch - Industrial style 3-position rotary selector\n// Overall dimensions: ~60mm diameter x 45mm height\n\n// Parameters\n$fn = 30;\nwall_thickness = 2;\nbase_diameter = 50;\nbase_height = 15;\nknob_diameter = 25;\nknob_height = 20;\nshaft_diameter = 8;\nshaft_height = 10;\nmount_hole_diameter = 4;\nmount_hole_spacing = 40;\nposition_marker_depth = 1;\n\n// Main base\nmodule base() {\n    difference() {\n        // Main cylindrical base\n        cylinder(h = base_height, d = base_diameter, center = false);\n        \n        // Center shaft hole\n        translate([0, 0, -1])\n            cylinder(h = base_height + 2, d = shaft_diameter + wall_thickness, center = false);\n        \n        // Mounting holes\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([mount_hole_spacing/2, 0, -1])\n                    cylinder(h = base_height + 2, d = mount_hole_diameter, center = false);\n        }\n        \n        // Position indicators (3 positions at 0, 120, 240 degrees)\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([base_diameter/2 - 3, 0, base_height - position_marker_depth])\n                    cube([6, 2, position_marker_depth], center = true);\n        }\n    }\n}\n\n// Selector shaft\nmodule shaft() {\n    // Main shaft cylinder\n    cylinder(h = shaft_height, d = shaft_diameter, center = false);\n    \n    // Shaft key\n    translate([shaft_diameter/2, 0, shaft_height/2])\n        cube([2, 4, shaft_height], center = true);\n}\n\n// Selector knob\nmodule knob() {\n    difference() {\n        union() {\n            // Main knob body\n            cylinder(h = knob_height, d = knob_diameter, center = false);\n            \n            // Grip ridges\n            for (i = [0:11]) {\n                rotate([0, 0, i * 30])\n                    translate([knob_diameter/2 - 1, 0, 2])\n                        cube([2, 1, knob_height - 4], center = true);\n            }\n            \n            // Pointer indicator\n            translate([0, knob_diameter/2 - 2, knob_height - 1])\n                cube([4, 4, 2], center = true);\n        }\n        \n        // Center hole for shaft\n        translate([0, 0, -1])\n            cylinder(h = knob_height + 2, d = shaft_diameter + 0.5, center = false);\n            \n        // Keyway slot\n        translate([shaft_diameter/2 + 1, 0, -1])\n            cube([2.5, 5, knob_height + 2], center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    base();\n\ntranslate([0, 0, base_height])\n    shaft();\n\ntranslate([0, 0, base_height + shaft_height])\n    knob();",
    "renders": true
  },
  {
    "mechanical_component": "detent",
    "openscad_code": "// Detent mechanism - rotary indexing plate with spring-loaded ball\n// Overall footprint ~80 mm diameter, 20 mm thick\n\n// Configuration\nball_d = 8;               // ball bearing diameter\nspring_d = 5;             // spring outer diameter\nspring_l = 12;            // spring free length\nbody_d = 80;              // main disc diameter\nbody_h = 8;               // main disc thickness\ndetent_n = 12;            // number of detent positions\ndetent_r = 30;            // radius of detent circle\ndetent_depth = 2;         // depth of each detent\nwall_th = 2;              // printable wall thickness\nshaft_d = 10;             // central shaft hole\nbase_d = 20;              // spring housing diameter\nbase_h = body_h + 8;      // spring housing height\n\n// Derived\ndetent_w = 6;             // width of detent groove (must fit ball)\npillar_h = 4;             // height of centering pillar\n\n// Main indexing disc\nmodule indexing_disc() {\n    difference() {\n        // Main disc body\n        cylinder(d = body_d, h = body_h, $fn = 90);\n\n        // Central shaft hole\n        translate([0, 0, -1])\n            cylinder(d = shaft_d, h = body_h + 2, $fn = 32);\n\n        // Detent grooves\n        for (i = [0 : detent_n - 1]) {\n            rotate([0, 0, i * 360 / detent_n])\n                translate([detent_r, 0, body_h - detent_depth])\n                    cube([detent_w, detent_w, detent_depth + 1], center = true);\n        }\n    }\n\n    // Lightening pockets on underside\n    difference() {\n        translate([0, 0, 0])\n            cylinder(d = body_d - wall_th * 2, h = body_h - wall_th, $fn = 90);\n        for (i = [0 : detent_n - 1]) {\n            rotate([0, 0, i * 360 / detent_n + 15])\n                translate([detent_r, 0, -1])\n                    cube([detent_w + 2, detent_w + 2, wall_th + 2], center = true);\n        }\n    }\n}\n\n// Spring housing block\nmodule spring_housing() {\n    difference() {\n        // Main housing body\n        translate([0, -detent_r, 0])\n            cylinder(d = base_d, h = base_h, $fn = 32);\n\n        // Spring cavity\n        translate([0, -detent_r, wall_th])\n            cylinder(d = spring_d + wall_th, h = base_h - wall_th * 2, $fn = 32);\n\n        // Ball seat\n        translate([0, -detent_r, base_h - spring_l - ball_d / 2])\n            sphere(d = ball_d + 1, $fn = 22);\n\n        // Mounting holes\n        for (mir = [-1, 1]) {\n            translate([mir * 6, -detent_r - 6, -1])\n                cylinder(d = 3.2, h = base_h + 2, $fn = 16);\n        }\n    }\n}\n\n// Centering boss for alignment\nmodule center_pillar() {\n    translate([0, 0, body_h])\n        cylinder(d = shaft_d + wall_th * 2, h = pillar_h, $fn = 32);\n}\n\n// Assembly\nunion() {\n    indexing_disc();\n    spring_housing();\n    center_pillar();\n}\n\n// Optional: spring and ball visualization (comment out for print)\n%translate([0, -detent_r, base_h - spring_l / 2])\n    cylinder(d = spring_d, h = spring_l, $fn = 16);\n%translate([0, -detent_r, base_h - spring_l - ball_d / 2])\n    sphere(d = ball_d, $fn = 22);",
    "renders": true
  },
  {
    "mechanical_component": "spring",
    "openscad_code": "// Realistic Compression Spring - 3D Printable\n// Parameters\ncoil_diameter = 30;      // Outer diameter of the spring\nwire_diameter = 3;       // Thickness of the spring wire\ncoils = 10;              // Number of active coils\npitch = 8;               // Distance between coils\nspring_height = coils * pitch;\nwall_thickness = 2;      // Minimum printable wall thickness\n\n// Ground plate for stability\nbase_thickness = 4;\nbase_diameter = coil_diameter + 20;\n\n// Top plate for load distribution\ntop_thickness = 4;\ntop_diameter = coil_diameter + 10;\n\n// End coils - flattened and ground for mounting\nend_coil_height = wire_diameter * 1.5;\nend_coil_segments = 3;\n\n// Render the complete spring assembly\nmodule spring_assembly() {\n    // Base mounting plate\n    translate([0, 0, 0])\n        cylinder(h = base_thickness, d = base_diameter, $fn = 64);\n    \n    // Bottom ground end coil\n    translate([0, 0, base_thickness])\n        ground_end_coil(false);\n    \n    // Main spring coils\n    translate([0, 0, base_thickness + end_coil_height])\n        main_coils();\n    \n    // Top ground end coil\n    translate([0, 0, base_thickness + end_coil_height + spring_height])\n        ground_end_coil(true);\n    \n    // Top mounting plate\n    translate([0, 0, base_thickness + end_coil_height * 2 + spring_height])\n        cylinder(h = top_thickness, d = top_diameter, $fn = 64);\n    \n    // Center support rod (optional, for stability)\n    translate([0, 0, base_thickness])\n        cylinder(h = end_coil_height * 2 + spring_height, d = wire_diameter, $fn = 32);\n}\n\n// Create the main helical coils\nmodule main_coils() {\n    for(i = [0:coils-1]) {\n        translate([0, 0, i * pitch])\n            single_coil();\n    }\n}\n\n// Generate a single coil turn\nmodule single_coil() {\n    // Create coil as series of connected cylinders\n    segments = 32;\n    radius = (coil_diameter - wire_diameter) / 2;\n    \n    for(a = [0:segments-1]) {\n        angle1 = a * 360 / segments;\n        angle2 = (a + 1) * 360 / segments;\n        \n        // Calculate positions\n        x1 = cos(angle1) * radius;\n        y1 = sin(angle1) * radius;\n        x2 = cos(angle2) * radius;\n        y2 = sin(angle2) * radius;\n        \n        // Create cylinder segment\n        translate([x1, y1, 0])\n            rotate([0, 0, angle1])\n                rotate([90, 0, 0])\n                    cylinder(h = 2 * radius * sin(180/segments), d = wire_diameter, $fn = 16);\n        \n        // Connect segments with spheres for smooth joints\n        translate([x1, y1, 0])\n            sphere(d = wire_diameter, $fn = 16);\n    }\n}\n\n// Create ground end coils (flattened)\nmodule ground_end_coil(is_top) {\n    // Flattened spiral for mounting surface\n    segments = 24;\n    radius = (coil_diameter - wire_diameter) / 2;\n    \n    for(a = [0:segments-1]) {\n        angle1 = a * 360 / segments;\n        angle2 = (a + 1) * 360 / segments;\n        \n        // Taper the radius for the end coil\n        taper_factor = 0.8;\n        r1 = radius * (1 - (a/segments) * (1 - taper_factor));\n        r2 = radius * (1 - ((a+1)/segments) * (1 - taper_factor));\n        \n        x1 = cos(angle1) * r1;\n        y1 = sin(angle1) * r1;\n        x2 = cos(angle2) * r2;\n        y2 = sin(angle2) * r2;\n        \n        // Create flattened coil segment\n        translate([x1, y1, 0])\n            cylinder(h = end_coil_height, d = wire_diameter, $fn = 16);\n        \n        // Add support structure for 3D printing\n        if(a % 3 == 0) {\n            translate([x1, y1, end_coil_height/2])\n                sphere(d = wire_diameter * 1.2, $fn = 16);\n        }\n    }\n}\n\n// Generate the spring\nspring_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "seal",
    "openscad_code": "// Seal mechanical component - realistic style with medium complexity\n// Overall dimensions: 100mm diameter, 80mm height\n\n// Parameters\n$fn = 50;\nouter_diameter = 100;\ninner_diameter = 60;\nheight = 80;\nwall_thickness = 2;\nrib_count = 8;\nbolt_hole_diameter = 8;\nspring_count = 12;\n\n// Main seal body - outer cylindrical shell\nmodule seal_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=height, d=outer_diameter, center=true);\n        \n        // Inner hollow\n        translate([0, 0, 0])\n            cylinder(h=height+2, d=inner_diameter, center=true);\n        \n        // Top lip groove\n        translate([0, 0, height/2 - 5])\n            cylinder(h=10, d=outer_diameter - 10);\n        \n        // Bottom lip groove  \n        translate([0, 0, -height/2 + 5])\n            cylinder(h=10, d=outer_diameter - 10);\n    }\n}\n\n// Structural ribs for reinforcement\nmodule structural_ribs() {\n    for(i = [0:rib_count-1]) {\n        rotate([0, 0, i * 360/rib_count])\n            translate([inner_diameter/2 + wall_thickness, 0, 0])\n                cube([outer_diameter/2 - inner_diameter/2 - wall_thickness, wall_thickness*2, height-10], center=true);\n    }\n}\n\n// Bolt holes for mounting\nmodule mounting_holes() {\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([(outer_diameter + inner_diameter)/4, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=wall_thickness*3, d=bolt_hole_diameter, center=true);\n    }\n}\n\n// Sealing lip on top\nmodule sealing_lip() {\n    translate([0, 0, height/2 - 2])\n        cylinder(h=4, d1=outer_diameter - 4, d2=outer_diameter - 8);\n}\n\n// Spring grooves for tension rings\nmodule spring_grooves() {\n    // Top groove\n    translate([0, 0, height/2 - 10])\n        cylinder(h=3, d=inner_diameter + 6);\n    \n    // Bottom groove\n    translate([0, 0, -height/2 + 10])\n        cylinder(h=3, d=inner_diameter + 6);\n}\n\n// Gasket seating surface\nmodule gasket_seat() {\n    translate([0, 0, height/2 - 15])\n        cylinder(h=2, d=outer_diameter - 20);\n}\n\n// Drainage channels\nmodule drainage_channels() {\n    for(i = [0:spring_count-1]) {\n        rotate([0, 0, i * 360/spring_count])\n            translate([(outer_diameter + inner_diameter)/2, 0, -height/2 + 5])\n                cube([wall_thickness, 2, 10], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    seal_body();\n    \n    // Structural elements\n    structural_ribs();\n    \n    // Mounting features\n    mounting_holes();\n    \n    // Sealing features\n    union() {\n        sealing_lip();\n        spring_grooves();\n        gasket_seat();\n    }\n    \n    // Drainage system\n    drainage_channels();\n}\n\n// Centering boss on bottom\ntranslate([0, 0, -height/2])\n    cylinder(h=5, d=inner_diameter - 4);",
    "renders": true
  },
  {
    "mechanical_component": "gasket",
    "openscad_code": "// Realistic 3D-printable gasket with bolt holes and raised sealing lips\n// Overall OD ≈ 100 mm, ID ≈ 60 mm, thickness ≈ 3 mm\n\n$fn = 50;          // Good visual quality without huge STL\n\nmodule gasket() {\n    // Basic ring body\n    difference() {\n        cylinder(h = 3, d = 100, center = true);     // Outer disk\n        cylinder(h = 4, d = 60,  center = true);     // Inner hole (slightly longer to guarantee difference)\n    }\n\n    // Raised inner sealing lip (1 mm high, 2 mm wide)\n    translate([0, 0, 1.5])\n    difference() {\n        cylinder(h = 1, d = 64, center = false);\n        cylinder(h = 2, d = 60, center = false);\n    }\n\n    // Raised outer sealing lip (1 mm high, 2 mm wide)\n    translate([0, 0, 1.5])\n    difference() {\n        cylinder(h = 1, d = 100, center = false);\n        cylinder(h = 2, d = 96,  center = false);\n    }\n\n    // Six bolt holes on PCD 80 mm, Ø 8 mm\n    for (a = [0 : 60 : 359])\n        rotate([0, 0, a])\n        translate([80 / 2, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 10, d = 8, center = true);\n\n    // Optional stiffening ribs between holes (thin 1 mm radial ribs)\n    for (a = [30 : 60 : 389])\n        rotate([0, 0, a])\n        translate([0, 0, -1])\n        cube([40, 1, 5], center = true);\n}\n\ngasket();",
    "renders": true
  },
  {
    "mechanical_component": "thrustwasher",
    "openscad_code": "// Thrust washer - medium complexity realistic style\n// Overall OD 100 mm, ID 50 mm, thickness 8 mm with lubrication grooves\n\n$fn = 64; // smoother curves\n\nmodule washer_profile() {\n    difference() {\n        // outer ring\n        cylinder(h = 8, d = 100, center = true);\n        // central hole\n        cylinder(h = 10, d = 50, center = true);\n    }\n}\n\nmodule chamfers() {\n    // top outer chamfer 45°\n    translate([0, 0, 4])\n    rotate_extrude(angle = 360)\n    translate([48, 0, 0])\n    polygon(points = [[0, 0], [2, 0], [0, 2]]);\n    \n    // bottom outer chamfer 45°\n    translate([0, 0, -4])\n    rotate_extrude(angle = 360)\n    translate([48, 0, 0])\n    mirror([0, 1])\n    polygon(points = [[0, 0], [2, 0], [0, 2]]);\n    \n    // top inner chamfer 45°\n    translate([0, 0, 4])\n    rotate_extrude(angle = 360)\n    translate([23, 0, 0])\n    mirror([1, 0])\n    polygon(points = [[0, 0], [2, 0], [0, 2]]);\n    \n    // bottom inner chamfer 45°\n    translate([0, 0, -4])\n    rotate_extrude(angle = 360)\n    translate([23, 0, 0])\n    mirror([0, 1])\n    mirror([1, 0])\n    polygon(points = [[0, 0], [2, 0], [0, 2]]);\n}\n\nmodule radial_grooves() {\n    // 8 radial lubrication grooves 2 mm wide, 1 mm deep\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([37.5, 0, 0])\n        cube([25, 2, 1], center = true);\n    }\n}\n\nmodule tangential_notches() {\n    // 4 shallow tangential notches for anti-rotation keys\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 15])\n        translate([48, 0, 0])\n        rotate([0, 0, 75])\n        cube([8, 3, 8], center = true);\n    }\n}\n\nmodule surface_texture() {\n    // fine concentric ridges for oil retention\n    for (r = [27:2:47]) {\n        rotate_extrude(angle = 360)\n        translate([r, 0, 0])\n        square([0.5, 8], center = true);\n    }\n}\n\nunion() {\n    difference() {\n        union() {\n            washer_profile();\n            chamfers();\n        }\n        radial_grooves();\n        tangential_notches();\n    }\n    surface_texture();\n}",
    "renders": true
  },
  {
    "mechanical_component": "spacer",
    "openscad_code": "// Spacer Mechanical Component\n// Realistic style, medium complexity\n// For 3D printing - proper wall thickness and no overhangs\n\n// Main parameters\n$fn = 50;\nspacer_height = 25;\nspacer_outer_diameter = 50;\nspacer_inner_diameter = 25;\nmount_hole_diameter = 5.5;\nmount_hole_offset = 20;\n\n// Material thickness\nwall_thickness = 2;\n\n// Flanges\ntop_flange_thickness = 3;\ntop_flange_diameter = 60;\nbottom_flange_thickness = 3;\nbottom_flange_diameter = 60;\n\n// Strengthening ribs\nnum_ribs = 6;\nrib_thickness = 2;\nrib_height = 10;\n\n// Lightening holes\nlightening_holes = 4;\nhole_diameter = 8;\n\n// Main module\nmodule spacer() {\n    // Main spacer body - hollow cylinder\n    difference() {\n        // Outer cylinder\n        cylinder(h = spacer_height, d = spacer_outer_diameter, center = true);\n        \n        // Inner hole\n        cylinder(h = spacer_height + 1, d = spacer_inner_diameter, center = true);\n    }\n    \n    // Top mounting flange\n    translate([0, 0, spacer_height/2 + top_flange_thickness/2]) {\n        difference() {\n            // Flange base\n            cylinder(h = top_flange_thickness, d = top_flange_diameter);\n            \n            // Counterbore for screw head\n            cylinder(h = top_flange_thickness + 1, d = spacer_inner_diameter);\n            \n            // Mounting holes\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90]) {\n                    translate([mount_hole_offset, 0, 0]) {\n                        cylinder(h = top_flange_thickness + 1, d = mount_hole_diameter);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Bottom mounting flange\n    translate([0, 0, -spacer_height/2 - bottom_flange_thickness/2]) {\n        mirror([0, 0, 1]) {\n            difference() {\n                // Flange base\n                cylinder(h = bottom_flange_thickness, d = bottom_flange_diameter);\n                \n                // Counterbore\n                cylinder(h = bottom_flange_thickness + 1, d = spacer_inner_diameter);\n                \n                // Mounting holes\n                for(i = [0:3]) {\n                    rotate([0, 0, i * 90 + 45]) {\n                        translate([mount_hole_offset, 0, 0]) {\n                            cylinder(h = bottom_flange_thickness + 1, d = mount_hole_diameter);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Strengthening ribs between flanges\n    for(i = [0:num_ribs-1]) {\n        rotate([0, 0, i * 360/num_ribs]) {\n            translate([-rib_thickness/2, -spacer_outer_diameter/2 + wall_thickness, 0]) {\n                cube([rib_thickness, spacer_outer_diameter/2 - wall_thickness, rib_height], center = true);\n            }\n        }\n    }\n    \n    // Lightening holes in top flange\n    translate([0, 0, spacer_height/2 + top_flange_thickness/2]) {\n        for(i = [0:lightening_holes-1]) {\n            rotate([0, 0, i * 360/lightening_holes + 22.5]) {\n                translate([top_flange_diameter/2 - 8, 0, 0]) {\n                    cylinder(h = top_flange_thickness + 1, d = hole_diameter);\n                }\n            }\n        }\n    }\n    \n    // Lightening holes in bottom flange\n    translate([0, 0, -spacer_height/2 - bottom_flange_thickness/2]) {\n        mirror([0, 0, 1]) {\n            for(i = [0:lightening_holes-1]) {\n                rotate([0, 0, i * 360/lightening_holes + 22.5]) {\n                    translate([bottom_flange_diameter/2 - 8, 0, 0]) {\n                        cylinder(h = bottom_flange_thickness + 1, d = hole_diameter);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Chamfers on outer edges\n    difference() {\n        // Main body with chamfer\n        union() {\n            cylinder(h = spacer_height - 2, d = spacer_outer_diameter - 2, center = true);\n            translate([0, 0, spacer_height/2 - 1]) {\n                cylinder(h = 2, d1 = spacer_outer_diameter - 2, d2 = spacer_outer_diameter);\n            }\n            translate([0, 0, -spacer_height/2 + 1]) {\n                cylinder(h = 2, d1 = spacer_outer_diameter, d2 = spacer_outer_diameter - 2);\n            }\n        }\n        \n        // Inner hole remains cylindrical\n        cylinder(h = spacer_height + 2, d = spacer_inner_diameter, center = true);\n    }\n}\n\n// Create the spacer\nspacer();",
    "renders": true
  },
  {
    "mechanical_component": "snapring",
    "openscad_code": "// External retaining snap ring (DIN 471 style)\n// 60 mm bore, 2 mm wire thickness, 12 mm width\n\nmodule snap_ring() {\n    thickness = 2;       // 2 mm wire thickness\n    ring_dia  = 60;      // 60 mm bore diameter\n    width     = 12;      // 12 mm axial width\n    gap       = 3;       // 3 mm opening gap\n    ears      = 8;       // 8 mm lug height\n    ear_w     = 8;       // 8 mm lug width\n    fillet_r  = 1;       // 1 mm edge fillet radius\n    \n    // Main ring body\n    difference() {\n        // Solid torus sector\n        rotate_extrude(angle = 360 - degrees(gap/(ring_dia/2)))\n            translate([ring_dia/2, 0, 0])\n                square([thickness, width], center = true);\n        \n        // Central bore\n        rotate_extrude(angle = 360)\n            translate([(ring_dia - 2*thickness)/2, 0, 0])\n                square([thickness + 0.1, width + 0.2], center = true);\n        \n        // Gap cut\n        rotate([0, 90, 0])\n            translate([0, 0, -width/2 - 0.1])\n                cube([ring_dia + 2, gap + 0.2, width + 0.2], center = true);\n    }\n    \n    // Mounting lugs (two symmetrical)\n    for (side = [0, 1]) {\n        mirror([0, side ? 1 : 0, 0])\n            translate([0, ring_dia/2, 0])\n                difference() {\n                    // Main lug body\n                    translate([0, ears/2, 0])\n                        cube([ear_w, ears, width], center = true);\n                    \n                    // Hole in lug\n                    translate([0, ears - 2, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h = ear_w + 0.2, r = 2, center = true);\n                    \n                    // Chamfers\n                    translate([0, ears, -width/2])\n                        rotate([0, -45, 0])\n                            cube([ear_w + 0.2, ears, 2], center = false);\n                    translate([0, ears,  width/2])\n                        rotate([0, 45, 0])\n                            cube([ear_w + 0.2, ears, 2], center = false);\n                }\n    }\n    \n    // Small locating dimple every 30°\n    for (a = [0 : 30 : 330]) {\n        rotate([0, 0, a])\n            translate([ring_dia/2 - thickness/2, 0, 0])\n                sphere(r = 0.5, $fn = 8);\n    }\n}\n\nsnap_ring();",
    "renders": true
  },
  {
    "mechanical_component": "retainer",
    "openscad_code": "// Retainer Mechanical Component - Realistic Style\n// Medium complexity structural retainer bracket for 3D printing\n\n$fn = 32;\nwall_thickness = 2;\nbase_width = 80;\nbase_height = 60;\nbase_depth = 50;\nmounting_hole_diameter = 4.2;\nmounting_hole_spacing = 25;\nslot_width = 20;\nslot_depth = 30;\nslot_height = 3;\n\n// Main base plate with rounded edges\nmodule base_plate() {\n    difference() {\n        // Main body with rounded corners\n        union() {\n            translate([0, 0, wall_thickness/2])\n            minkowski() {\n                cube([base_width, base_height, wall_thickness], center=true);\n                cylinder(r=wall_thickness, h=0.01, center=true);\n            }\n            \n            // Reinforcement ribs\n            for(i = [-mounting_hole_spacing, 0, mounting_hole_spacing]) {\n                translate([i, base_height/2 - wall_thickness, wall_thickness])\n                cube([wall_thickness*2, wall_thickness*2, base_depth/2]);\n                \n                translate([i, -base_height/2 + wall_thickness, wall_thickness])\n                cube([wall_thickness*2, wall_thickness*2, base_depth/2]);\n            }\n        }\n        \n        // Mounting holes\n        for(i = [-mounting_hole_spacing, 0, mounting_hole_spacing]) {\n            translate([i, mounting_hole_spacing, 0])\n            cylinder(h=wall_thickness*2, r=mounting_hole_diameter/2, center=true);\n            \n            translate([i, -mounting_hole_spacing, 0])\n            cylinder(h=wall_thickness*2, r=mounting_hole_diameter/2, center=true);\n        }\n    }\n}\n\n// Retention slot for holding components\nmodule retention_slot() {\n    difference() {\n        // Slot body\n        translate([0, 0, wall_thickness + slot_depth/2])\n        cube([slot_width, wall_thickness*3, slot_depth], center=true);\n        \n        // Actual slot opening\n        translate([0, 0, wall_thickness + slot_depth/2])\n        cube([slot_width - wall_thickness*2, slot_width - wall_thickness*2, slot_depth + 1], center=true);\n        \n        // Fillets at slot entrance\n        translate([0, 0, wall_thickness])\n        rotate([90, 0, 0])\n        cylinder(h=slot_width - wall_thickness*2, r=wall_thickness, center=true);\n        \n        translate([0, 0, wall_thickness + slot_depth])\n        rotate([90, 0, 0])\n        cylinder(h=slot_width - wall_thickness*2, r=wall_thickness, center=true);\n    }\n}\n\n// Support arms for structural integrity\nmodule support_arms() {\n    union() {\n        // Left support arm\n        translate([-base_width/2 + wall_thickness, 0, base_depth/2])\n        rotate([0, -45, 0])\n        cube([wall_thickness*2, base_height/2, wall_thickness*2]);\n        \n        // Right support arm\n        translate([base_width/2 - wall_thickness, 0, base_depth/2])\n        rotate([0, 45, 0])\n        cube([wall_thickness*2, base_height/2, wall_thickness*2]);\n        \n        // Cross brace\n        translate([0, base_height/2 - wall_thickness*2, base_depth/2])\n        rotate([90, 0, 0])\n        cylinder(h=base_width - wall_thickness*4, r=wall_thickness, center=true);\n    }\n}\n\n// Anti-slip pads\nmodule anti_slip_pads() {\n    for(x = [-base_width/2 + 10, base_width/2 - 10]) {\n        for(y = [-base_height/2 + 10, base_height/2 - 10]) {\n            translate([x, y, -wall_thickness])\n            cylinder(h=wall_thickness/2, r=wall_thickness*1.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_plate();\n    retention_slot();\n    support_arms();\n    anti_slip_pads();\n}",
    "renders": true
  },
  {
    "mechanical_component": "bushing",
    "openscad_code": "// Flanged bronze-style bushing with grease grooves and set-screw\n// Overall size: 40 mm OD × 35 mm long, flange Ø60 mm × 6 mm thick\nmodule bushing() {\n    /* 1. Main sleeve body */\n    difference() {\n        cylinder(h = 35, d = 40, $fn = 90);          // outer sleeve\n        cylinder(h = 37, d = 25, $fn = 90);          // inner bore (overshoot for clean ends)\n    }\n\n    /* 2. Flange at the top */\n    translate([0, 0, 35])\n    difference() {\n        cylinder(h = 6, d = 60, $fn = 90);           // flange\n        cylinder(h = 7, d = 25, $fn = 90);           // continue bore\n    }\n\n    /* 3. Grease distribution grooves (3 semi-circular channels) */\n    for (a = [0:120:240])\n        rotate([0, 0, a])\n            translate([0, 20.5, 5])\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h = 25, d = 3, $fn = 20); // half-cyl groove\n                        translate([0, -3, 0])\n                            cube([20, 6, 25], center = true); // remove lower half\n                    }\n\n    /* 4. Grease hole from flange into sleeve */\n    translate([20, 0, 35 + 3])\n        rotate([0, 90, 0])\n            cylinder(h = 10, d = 4, $fn = 20);\n\n    /* 5. Set-screw boss on flange */\n    translate([-30, 0, 35 + 3])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 10, d = 6, $fn = 20);       // boss\n            cylinder(h = 11, d = 3.5, $fn = 20);     // M4 set-screw hole\n        }\n\n    /* 6. Fillet under flange */\n    translate([0, 0, 29])\n        cylinder(h1 = 6, h2 = 0, d1 = 40, d2 = 44, $fn = 90);\n}\n\nbushing();",
    "renders": true
  },
  {
    "mechanical_component": "needlebearing",
    "openscad_code": "// OpenSCAD Needle Bearing (Roller Bearing with Needle Rollers)\n// Outer diameter: 70mm, Inner diameter: 40mm, Width: 25mm\n// Wall thickness: 2mm, printable without supports\n\n$fn = 36;  // Facet count for smoother curved surfaces\n\n// Overall dimensions\nouter_d = 70;\ninner_d = 40;\nwidth = 25;\nwall = 2;\n\n// Roller parameters\nroller_d = 4;\nroller_L = width - 2*wall;\nroller_count = 18;\nroller_clear = 0.5;\n\n// Bearing cage (outer ring)\nmodule outer_ring() {\n    difference() {\n        cylinder(h = width, d = outer_d, center = true);\n        translate([0, 0, 0])\n            cylinder(h = width + 2, d = outer_d - 2*wall, center = true);\n    }\n}\n\n// Bearing cage (inner ring)\nmodule inner_ring() {\n    difference() {\n        cylinder(h = width, d = inner_d + 2*wall, center = true);\n        translate([0, 0, 0])\n            cylinder(h = width + 2, d = inner_d, center = true);\n    }\n}\n\n// Single needle roller\nmodule needle_roller() {\n    rotate([90, 0, 0])  // Align roller along Z before positioning\n        cylinder(h = roller_L, d = roller_d, center = true);\n}\n\n// Cage disc - thin disc with holes to keep rollers spaced\nmodule cage_disc() {\n    difference() {\n        cylinder(h = wall, d = (outer_d + inner_d)/2 + wall, center = true);\n        // Center hole for shaft\n        cylinder(h = wall + 2, d = inner_d + 2*roller_d, center = true);\n        // Roller holes\n        for(i = [0 : roller_count-1]) {\n            angle = i * 360 / roller_count;\n            translate([(outer_d + inner_d)/4, 0, 0])\n                rotate([0, 0, angle])\n                cylinder(h = wall + 2, d = roller_d + roller_clear, center = true);\n        }\n    }\n}\n\n// Full bearing assembly\nmodule needle_bearing() {\n    union() {\n        // Outer ring\n        outer_ring();\n        \n        // Inner ring\n        inner_ring();\n        \n        // Rollers\n        for(i = [0 : roller_count-1]) {\n            angle = i * 360 / roller_count;\n            radius = (outer_d + inner_d)/4;\n            translate([radius * cos(angle), radius * sin(angle), 0])\n                rotate([0, 0, angle])\n                needle_roller();\n        }\n        \n        // Two cage discs to hold rollers in place\n        translate([0, 0, (width - wall)/2])\n            cage_disc();\n        translate([0, 0, -(width - wall)/2])\n            cage_disc();\n    }\n}\n\n// Render the complete bearing\nneedle_bearing();",
    "renders": true
  },
  {
    "mechanical_component": "ballbearing",
    "openscad_code": "// Ball Bearing - Realistic Style, Medium Complexity\n// Outer dimensions: 100mm OD, 60mm ID, 20mm width\n// All dimensions in mm\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main module\nmodule ball_bearing() {\n    // Outer ring\n    outer_ring();\n    \n    // Inner ring\n    inner_ring();\n    \n    // Ball cage with balls\n    ball_cage();\n    \n    // Seals (optional covers)\n    seals();\n}\n\n// Outer ring with races\nmodule outer_ring() {\n    difference() {\n        // Main outer cylinder\n        cylinder(h = 20, r = 50, center = true);\n        \n        // Inner bore\n        cylinder(h = 22, r = 43, center = true);\n        \n        // Ball race (groove)\n        translate([0, 0, 0])\n            rotate_extrude(angle = 360)\n                translate([46.5, 0, 0])\n                    circle(r = 3.5);\n    }\n    \n    // Chamfers on edges\n    difference() {\n        cylinder(h = 20, r = 50, center = true);\n        // Top chamfer\n        translate([0, 0, 10])\n            cylinder(h = 2, r1 = 50, r2 = 48, center = false);\n        // Bottom chamfer\n        translate([0, 0, -10])\n            cylinder(h = 2, r1 = 48, r2 = 50, center = false);\n    }\n}\n\n// Inner ring with races\nmodule inner_ring() {\n    difference() {\n        // Main inner cylinder\n        cylinder(h = 20, r = 30, center = true);\n        \n        // Central bore\n        cylinder(h = 22, r = 25, center = true);\n        \n        // Ball race (groove)\n        translate([0, 0, 0])\n            rotate_extrude(angle = 360)\n                translate([33.5, 0, 0])\n                    circle(r = 3.5);\n    }\n    \n    // Chamfers on edges\n    difference() {\n        cylinder(h = 20, r = 30, center = true);\n        // Top chamfer\n        translate([0, 0, 10])\n            cylinder(h = 2, r1 = 30, r2 = 28, center = false);\n        // Bottom chamfer\n        translate([0, 0, -10])\n            cylinder(h = 2, r1 = 28, r2 = 30, center = false);\n    }\n}\n\n// Ball cage with balls\nmodule ball_cage() {\n    // Cage\n    difference() {\n        // Main cage ring\n        cylinder(h = 10, r1 = 42, r2 = 38, center = true);\n        \n        // Ball pockets (8 balls)\n        for (i = [0 : 7]) {\n            rotate([0, 0, i * 45])\n                translate([40, 0, 0])\n                    sphere(r = 4.2);\n        }\n    }\n    \n    // Balls\n    for (i = [0 : 7]) {\n        rotate([0, 0, i * 45])\n            translate([40, 0, 0])\n                sphere(r = 4);\n    }\n}\n\n// Seals on both sides\nmodule seals() {\n    // Top seal\n    translate([0, 0, 8])\n        difference() {\n            cylinder(h = 2, r = 49, r1 = 49, r2 = 47, center = true);\n            cylinder(h = 3, r = 26, center = true);\n        }\n    \n    // Bottom seal\n    translate([0, 0, -8])\n        difference() {\n            cylinder(h = 2, r = 49, r1 = 49, r2 = 47, center = true);\n            cylinder(h = 3, r = 26, center = true);\n        }\n}\n\n// Generate the bearing\nball_bearing();",
    "renders": true
  },
  {
    "mechanical_component": "rollerbearing",
    "openscad_code": "// Realistic Roller Bearing - 608 type (22mm OD, 8mm ID, 7mm width)\n// Medium complexity with proper proportions for 3D printing\n\n$fn = 50;  // Smooth curves\n\n// Overall dimensions\nouter_diameter = 22;\ninner_diameter = 8;\nbearing_width = 7;\nball_diameter = 3;\nball_count = 7;\nwall_thickness = 2;\n\n// Main module\nmodule roller_bearing() {\n    difference() {\n        // Outer ring\n        union() {\n            // Outer race\n            difference() {\n                cylinder(h=bearing_width, d=outer_diameter, center=true);\n                cylinder(h=bearing_width+1, d=outer_diameter-wall_thickness*2, center=true);\n            }\n            \n            // Outer race groove\n            translate([0, 0, 0])\n            difference() {\n                cylinder(h=bearing_width*0.6, d=outer_diameter-wall_thickness*2+ball_diameter*0.8, center=true);\n                cylinder(h=bearing_width*0.61, d=outer_diameter-wall_thickness*2, center=true);\n            }\n            \n            // Outer chamfers\n            translate([0, 0, bearing_width/2])\n            cylinder(h=1, d1=outer_diameter, d2=outer_diameter-wall_thickness/2, center=false);\n            translate([0, 0, -bearing_width/2])\n            cylinder(h=1, d1=outer_diameter, d2=outer_diameter-wall_thickness/2, center=false);\n        }\n        \n        // Inner ring and balls\n        union() {\n            // Inner race\n            difference() {\n                cylinder(h=bearing_width, d=inner_diameter+wall_thickness*2, center=true);\n                cylinder(h=bearing_width+1, d=inner_diameter, center=true);\n            }\n            \n            // Inner race groove\n            translate([0, 0, 0])\n            difference() {\n                cylinder(h=bearing_width*0.6, d=inner_diameter+wall_thickness*2-ball_diameter*0.8, center=true);\n                cylinder(h=bearing_width*0.61, d=inner_diameter+wall_thickness*2, center=true);\n            }\n            \n            // Inner chamfers\n            translate([0, 0, bearing_width/2])\n            cylinder(h=1, d1=inner_diameter, d2=inner_diameter+wall_thickness/2, center=false);\n            translate([0, 0, -bearing_width/2])\n            cylinder(h=1, d1=inner_diameter, d2=inner_diameter+wall_thickness/2, center=false);\n            \n            // Balls\n            for(i = [0:ball_count-1]) {\n                rotate([0, 0, i*360/ball_count])\n                translate([(outer_diameter+inner_diameter)/4, 0, 0])\n                sphere(d=ball_diameter);\n            }\n            \n            // Ball cage\n            translate([0, 0, 0])\n            difference() {\n                cylinder(h=bearing_width*0.4, d=(outer_diameter+inner_diameter)/2+ball_diameter*0.3, center=true);\n                cylinder(h=bearing_width*0.41, d=(outer_diameter+inner_diameter)/2-ball_diameter*0.3, center=true);\n                \n                // Ball holes\n                for(i = [0:ball_count-1]) {\n                    rotate([0, 0, i*360/ball_count])\n                    translate([(outer_diameter+inner_diameter)/4, 0, 0])\n                    sphere(d=ball_diameter+0.2);\n                }\n            }\n        }\n    }\n    \n    // Seals\n    translate([0, 0, bearing_width/2-0.5])\n    difference() {\n        cylinder(h=0.5, d=outer_diameter-1, center=true);\n        cylinder(h=0.51, d=inner_diameter+1, center=true);\n    }\n    \n    translate([0, 0, -bearing_width/2+0.5])\n    difference() {\n        cylinder(h=0.5, d=outer_diameter-1, center=true);\n        cylinder(h=0.51, d=inner_diameter+1, center=true);\n    }\n}\n\n// Render the bearing\nroller_bearing();",
    "renders": true
  },
  {
    "mechanical_component": "taperedbearing",
    "openscad_code": "// Tapered roller bearing – medium complexity, realistic style\n// Overall Ø90 mm × 36 mm, 2 mm minimum walls, printable without supports\n\n$fn = 64;           // smooth curves\n\n// ===== PARAMETERS ===========================================================\nOR        = 45;     // outer race outer radius\nIR        = 25;     // inner race inner radius\nW         = 36;     // total width\nTAPER     = 0.35;   // roller cone angle (tan)\nROLLERS   = 15;     // number of tapered rollers\nR_W       = 8;      // roller length (along cone axis)\nCAGE_T    = 1.5;    // cage web thickness\nWALL      = 2.0;    // printable wall thickness everywhere\n\n// ===== MODULES ==============================================================\nmodule outer_race() {\n    // main outer cylinder\n    difference() {\n        cylinder(h = W, r = OR);\n        // central bore with taper for rollers\n        translate([0,0,-0.1])\n            cylinder(h = W+0.2,\n                     r1 = OR-5,\n                     r2 = OR-5-TAPER*(W-2*WALL));\n    }\n    // small chamfers for printability\n    translate([0,0,-0.1])\n        cylinder(h = 2, r1 = OR, r2 = OR-2);\n    translate([0,0,W-2])\n        cylinder(h = 2, r1 = OR-2, r2 = OR);\n}\n\nmodule inner_race() {\n    // main inner cone\n    difference() {\n        // cone matching roller taper\n        cylinder(h = W-2*WALL, r1 = IR+WALL, r2 = IR+WALL+TAPER*(W-2*WALL));\n        // central shaft bore\n        cylinder(h = W, r = IR);\n    }\n    // shoulders\n    translate([0,0,-0.1])\n        cylinder(h = WALL+0.1, r = IR+WALL+TAPER*(W-2*WALL));\n    translate([0,0,W-WALL])\n        cylinder(h = WALL+0.1, r = IR+WALL+TAPER*(W-2*WALL));\n}\n\nmodule single_roller(id=0) {\n    // tapered roller body\n    rotate([0,0,id*360/ROLLERS])\n    translate([0, (OR+IR)/2, W/2])\n    rotate([90,0,0])\n    cylinder(h = R_W, r1 = 4, r2 = 4-TAPER*R_W, center=true);\n}\n\nmodule cage() {\n    // two ring webs with bridges\n    difference() {\n        union() {\n            // upper web\n            translate([0,0,W/2+R_W/2+CAGE_T/2])\n                cylinder(h = CAGE_T, r = OR-3*CAGE_T);\n            // lower web\n            translate([0,0,W/2-R_W/2-CAGE_T/2])\n                cylinder(h = CAGE_T, r = OR-3*CAGE_T);\n            // bridges between webs\n            for(i=[0:ROLLERS-1])\n                rotate([0,0,i*360/ROLLERS])\n                translate([(OR+IR)/2,0,W/2])\n                cube([CAGE_T, 6, R_W+CAGE_T], center=true);\n        }\n        // clearances\n        cylinder(h = W+1, r = IR+WALL+2);\n        cylinder(h = W+1, r = OR-2*CAGE_T);\n    }\n}\n\n// ===== ASSEMBLY =============================================================\nunion() {\n    outer_race();\n    inner_race();\n    cage();\n    // rollers inside cage\n    for(i=[0:ROLLERS-1])\n        single_roller(i);\n}",
    "renders": true
  },
  {
    "mechanical_component": "sphericalbearing",
    "openscad_code": "// Spherical bearing (self-aligning pillow-block style)\n// Overall footprint ≈ 80×60×70 mm\n\n// --- Parameters ---------------------------------------------------------------\n$fa = 2; $fs = 0.5;  // smooth spheres\nwall = 2;            // printable wall thickness\nbolt_d = 4;          // mounting bolt diameter\nball_d = 30;         // spherical ball OD\nhousing_d = 42;      // outer race OD\ninner_lip = 3;       // inner race lip for shaft retention\nshaft_d = 10;        // shaft bore\nbase_l = 80; base_w = 60; base_h = 15;\n\n// --- Modules ------------------------------------------------------------------\nmodule mounting_holes() {\n    // Two M4 mounting holes\n    for(x=[-base_l/2+10, base_l/2-10], y=[-base_w/2+10, base_w/2-10])\n        translate([x,y,-1])\n            cylinder(d=bolt_d+1, h=base_h+2, $fn=12);\n}\n\nmodule base() {\n    difference() {\n        // Main block\n        cube([base_l, base_w, base_h], center=true);\n        // Lightening recesses\n        translate([0,0,2])\n            cube([base_l-wall*2, base_w-wall*2, base_h-4], center=true);\n        mounting_holes();\n    }\n}\n\nmodule outer_race() {\n    difference() {\n        // Housing shell\n        sphere(d=housing_d);\n        // Spherical cavity for ball\n        sphere(d=ball_d+1.5);\n        // Split line gap for assembly\n        rotate([90,0,0])\n            cube([housing_d+2, 2, housing_d+2], center=true);\n    }\n}\n\nmodule inner_race() {\n    difference() {\n        union() {\n            // Main inner race\n            sphere(d=ball_d-1);\n            // Cylindrical shaft sleeve\n            rotate([0,90,0])\n                cylinder(d=shaft_d+wall*2, h=ball_d, center=true);\n        }\n        // Shaft bore\n        rotate([0,90,0])\n            cylinder(d=shaft_d, h=ball_d+2, center=true);\n        // Split line gap\n        rotate([90,0,0])\n            cube([ball_d+2, 2, ball_d+2], center=true);\n    }\n}\n\nmodule grease_nipple() {\n    // Zerk grease fitting stub\n    translate([0, housing_d/2, 0])\n        rotate([90,0,0])\n            cylinder(d1=5, d2=3, h=6);\n}\n\n// --- Assembly -----------------------------------------------------------------\nunion() {\n    // Base plate\n    base();\n\n    // Bearing housing on top\n    translate([0, 0, base_h/2+housing_d/2])\n        outer_race();\n\n    // Grease nipple detail\n    translate([0, 0, base_h/2+housing_d/2])\n        grease_nipple();\n\n    // Inner race with ball\n    translate([0, 0, base_h/2+housing_d/2])\n        inner_race();\n}",
    "renders": true
  },
  {
    "mechanical_component": "journalbearing",
    "openscad_code": "// Journal Bearing - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness (2mm)\n\n$fn = 36;\n\n// Main parameters\nbearing_diameter = 60;\nbearing_length = 40;\nshaft_diameter = 30;\nbase_width = 80;\nbase_length = 100;\nbase_height = 20;\nbolt_hole_diameter = 8;\n\n// Bearing housing\nmodule bearing_housing() {\n    difference() {\n        // Main cylindrical housing\n        cylinder(h=bearing_length, d=bearing_diameter + 8, center=true);\n        \n        // Inner bore for shaft\n        cylinder(h=bearing_length + 1, d=shaft_diameter, center=true);\n        \n        // Lubrication groove\n        rotate([90,0,0])\n            translate([0, 0, bearing_length/4])\n                cube([2, bearing_diameter + 10, bearing_length/2], center=true);\n    }\n}\n\n// Mounting base with ribs\nmodule mounting_base() {\n    difference() {\n        union() {\n            // Main base plate\n            translate([0, 0, -base_height/2])\n                cube([base_length, base_width, base_height], center=true);\n            \n            // Center support block\n            translate([0, 0, base_height/2])\n                cube([bearing_diameter + 8, bearing_diameter + 8, bearing_length/2], center=true);\n            \n            // Reinforcement ribs\n            for(i=[-1, 1]) {\n                translate([i * (base_length/4), 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=base_width/2 - bearing_diameter/2 - 4, d=10, center=true);\n            }\n        }\n        \n        // Mounting bolt holes\n        for(x=[-1, 1])\n            for(y=[-1, 1])\n                translate([x * base_length/3, y * base_width/3, -base_height/2])\n                    cylinder(h=base_height + 1, d=bolt_hole_diameter);\n    }\n}\n\n// Bearing cap with bolts\nmodule bearing_cap() {\n    difference() {\n        union() {\n            // Main cap body\n            translate([0, 0, bearing_length/2 + 5])\n                cylinder(h=10, d=bearing_diameter + 8, center=true);\n            \n            // Bolt flanges\n            for(i=[0:3]) {\n                rotate([0, 0, i * 90])\n                    translate([bearing_diameter/2 + 10, 0, bearing_length/2 + 5])\n                        cube([20, 10, 10], center=true);\n            }\n        }\n        \n        // Cap bore\n        translate([0, 0, bearing_length/2 + 5])\n            cylinder(h=11, d=shaft_diameter + 4, center=true);\n        \n        // Cap bolt holes\n        for(i=[0:3]) {\n            rotate([0, 0, i * 90])\n                translate([bearing_diameter/2 + 10, 0, bearing_length/2 + 5])\n                    cylinder(h=11, d=5, center=true);\n        }\n    }\n}\n\n// Lubrication fittings\nmodule lube_fittings() {\n    // Top grease nipple\n    translate([0, -bearing_diameter/2 - 10, bearing_length/4])\n        rotate([90, 0, 0])\n            union() {\n                cylinder(h=8, d=6);\n                translate([0, 0, 4])\n                    sphere(d=8);\n            }\n    \n    // Side oil level indicator\n    translate([bearing_diameter/2 + 5, 0, -bearing_length/4])\n        union() {\n            cylinder(h=5, d=10);\n            translate([2.5, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=5, d=8);\n        }\n}\n\n// Assembly\nunion() {\n    // Main bearing assembly\n    bearing_housing();\n    mounting_base();\n    bearing_cap();\n    lube_fittings();\n    \n    // Alignment dowel pins (for assembly)\n    for(i=[0:1]) {\n        rotate([0, 0, i * 180])\n            translate([bearing_diameter/2 + 2, 0, bearing_length/4])\n                cylinder(h=5, d=4);\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "bushingbearing",
    "openscad_code": "// Flanged bronze bushing with internal grease grooves and external ribs\n// Wall thickness = 2 mm throughout\n// Overall OD = 40 mm, length = 35 mm, ID = 20 mm\n\n$fn = 60;\n\n// Main parameters\nd_ext = 40;             // outer diameter\nd_int = 20;             // inner diameter\nlength = 35;            // total length\nflange_thick = 5;       // flange thickness\nflange_d = 55;          // flange diameter\ngreove_width = 2.5;     // grease groove width\ngreove_depth = 1.0;     // grease groove depth\nrib_width = 3;          // external rib width\nrib_height = 1.5;       // rib height\nrib_count = 8;          // number of external ribs\nwall = 2;               // wall thickness for 3D printing\n\n// Convenience shorthand\nr_ext = d_ext/2;\nr_int = d_int/2;\n\n// Main sleeve body\nmodule sleeve() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = length, r = r_ext, center = false);\n        \n        // Inner hole\n        translate([0, 0, -0.1])\n            cylinder(h = length + 0.2, r = r_int, center = false);\n    }\n}\n\n// Flange at bottom\nmodule flange() {\n    difference() {\n        cylinder(h = flange_thick, r = flange_d/2, center = false);\n        \n        // Central hole through flange\n        translate([0, 0, -0.1])\n            cylinder(h = flange_thick + 0.2, r = r_int, center = false);\n    }\n}\n\n// Grease distribution grooves inside bore\nmodule grease_grooves() {\n    // Axial grooves\n    for (a = [0:120:359]) {\n        rotate([0, 0, a])\n            translate([r_int - greove_depth/2, 0, 0])\n                rotate([0, 90, 0])\n                    cube([greove_depth, greove_width, length], center = true);\n    }\n    \n    // Circumferential groove at mid-height\n    translate([0, 0, length/2])\n        rotate_extrude(angle = 360, $fn = 60)\n            translate([r_int + greove_depth/2, 0, 0])\n                square([greove_depth, greove_width], center = true);\n}\n\n// External cooling / anti-rotation ribs\nmodule external_ribs() {\n    for (a = [0:360/rib_count:359]) {\n        rotate([0, 0, a])\n            translate([r_ext + rib_height/2, 0, length/2])\n                cube([rib_height, rib_width, length - 2*flange_thick], center = true);\n    }\n}\n\n// Combine all parts\nunion() {\n    // Sleeve and flange\n    union() {\n        sleeve();\n        flange();\n    }\n    \n    // Remove grease grooves from inner wall\n    difference() {\n        translate([0, 0, flange_thick])\n            cylinder(h = length - flange_thick, r = r_int + wall, center = false);\n        grease_grooves();\n    }\n    \n    // Add external ribs\n    external_ribs();\n}",
    "renders": true
  },
  {
    "mechanical_component": "thrustbearing",
    "openscad_code": "// Thrust bearing – medium-complexity, realistic style\n// Overall Ø120 mm, height 24 mm, 2 mm wall everywhere\n// Two races, one cage, twelve balls Ø10 mm, grease grooves\n// All printable without overhangs (no internal bridges)\n\n$fn = 48;\n\n// Main dimensions -----------------------------------------------------------\noverall_d  = 120;     // outside Ø\nshaft_d    = 60;      // shaft bore Ø\nheight     = 24;      // total stack height\nrace_thick = 8;       // single race thickness\nball_d     = 10;      // rolling element Ø\nballs      = 12;      // number of balls\ngroove_d   = 8;       // grease groove Ø × 2 mm\nwall       = 2;       // printable wall thickness\n\n// Helper modules ------------------------------------------------------------\nmodule race(upper=true){\n    // One annular race with grease groove on outer top surface\n    difference(){\n        cylinder(h = race_thick, r = overall_d/2, center=false);\n        translate([0,0,-0.1])\n            cylinder(h = race_thick+0.2, r = shaft_d/2, center=false);\n    }\n    // Grease groove\n    rotate([0,0,upper?0:180])\n    translate([0, 0, upper?race_thick-2:0])\n    for(i=[0:3])\n        rotate([0,0,i*120])\n        translate([(overall_d - groove_d)/4, 0, 0])\n        cylinder(h = 2.2, r = groove_d/2, center=false);\n}\n\nmodule cage(){\n    // 12 ball pockets, 2 mm thick cage walls\n    ring_r = (overall_d + shaft_d)/4;\n    pocket_r = ball_d/2 + wall;\n    difference(){\n        cylinder(h = height - 2*race_thick, r = ring_r + wall, center=true);\n        cylinder(h = height - 2*race_thick + 0.2, r = ring_r - wall, center=true);\n    }\n    // Pockets\n    for(i=[0:balls-1])\n        rotate([0,0,i*360/balls])\n        translate([ring_r, 0, 0])\n        rotate([90,0,0])\n        cylinder(h = 2*wall+0.2, r = pocket_r, center=true);\n}\n\nmodule balls_assembly(){\n    ring_r = (overall_d + shaft_d)/4;\n    for(i=[0:balls-1])\n        rotate([0,0,i*360/balls])\n        translate([ring_r, 0, 0])\n        sphere(r = ball_d/2);\n}\n\n// Build the bearing ---------------------------------------------------------\nunion(){\n    // Lower race\n    race(upper=false);\n    \n    // Cage\n    translate([0,0,race_thick])\n    cage();\n    \n    // Balls\n    translate([0,0,race_thick + (height-2*race_thick)/2])\n    balls_assembly();\n    \n    // Upper race\n    translate([0,0,height-race_thick])\n    race(upper=true);\n}",
    "renders": true
  },
  {
    "mechanical_component": "gearbox",
    "openscad_code": "// Realistic medium-complexity gearbox (approx. 90 mm long)\n\n$fn = 50;\n\nmodule housing() {\n    difference() {\n        // Main rectangular shell\n        translate([-20, -25, 0])\n            cube([40, 50, 35]);\n        \n        // Central bore Ø20 mm\n        translate([0, 0, -1])\n            cylinder(h = 37, d = 20);\n        \n        // Front bearing bore Ø15 mm\n        translate([0, 0, 34])\n            cylinder(h = 3, d = 15);\n        \n        // Rear bearing bore Ø15 mm\n        translate([0, 0, -2])\n            cylinder(h = 3, d = 15);\n    }\n}\n\nmodule side_flange() {\n    difference() {\n        // Flange plate\n        translate([-30, -30, 12])\n            cube([60, 60, 6]);\n        \n        // Bolt holes Ø4 mm\n        for (i = [-1, 1]) {\n            for (j = [-1, 1]) {\n                translate([i * 20, j * 20, 11])\n                    cylinder(h = 8, d = 4);\n            }\n        }\n        \n        // Central clearance Ø22 mm\n        translate([0, 0, 11])\n            cylinder(h = 8, d = 22);\n    }\n}\n\nmodule gear(teeth = 20, height = 8) {\n    union() {\n        // Gear blank\n        cylinder(h = height, d = teeth * 2.5);\n        \n        // Teeth (simplified)\n        for (i = [0 : teeth - 1]) {\n            rotate([0, 0, i * 360 / teeth])\n                translate([teeth * 1.25 - 1, -1.5, 0])\n                    cube([2, 3, height]);\n        }\n        \n        // Hub\n        cylinder(h = height + 2, d = 8);\n    }\n}\n\nmodule input_shaft() {\n    union() {\n        // Shaft Ø8 mm\n        cylinder(h = 70, d = 8);\n        \n        // Keyway slot\n        translate([4, -1.5, -1])\n            cube([2, 3, 72]);\n        \n        // Retaining ring groove\n        translate([0, 0, 30])\n            cylinder(h = 2, d = 7);\n    }\n}\n\nmodule output_shaft() {\n    union() {\n        // Shaft Ø10 mm\n        cylinder(h = 60, d = 10);\n        \n        // Keyway slot\n        translate([5, -1.5, -1])\n            cube([2, 3, 62]);\n        \n        // Retaining ring groove\n        translate([0, 0, 28])\n            cylinder(h = 2, d = 9);\n    }\n}\n\nmodule mounting_feet() {\n    for (x = [-15, 15]) {\n        translate([x, -35, -8])\n            cube([12, 8, 8]);\n        \n        // Mounting slot\n        translate([x, -39, -5])\n            cube([4, 8, 2]);\n    }\n}\n\n// Assembly\nunion() {\n    housing();\n    side_flange();\n    mounting_feet();\n    \n    // Input gear\n    translate([0, 0, 15])\n        rotate([0, 0, 15])\n        gear(20, 10);\n    \n    // Output gear\n    translate([0, 0, 25])\n        rotate([0, 0, -15 * 20 / 30])\n        gear(30, 10);\n    \n    // Input shaft\n    translate([0, 0, -30])\n        rotate([90, 0, 0])\n        input_shaft();\n    \n    // Output shaft\n    translate([0, 0, 35])\n        rotate([90, 0, 0])\n        output_shaft();\n}",
    "renders": true
  },
  {
    "mechanical_component": "housing",
    "openscad_code": "// Medium-complexity realistic 3D-printable housing for a 60 mm micro-controller module\n// Overall outer footprint: 80 × 60 × 35 mm\n\n// ---------- Parameters ----------\nwall = 2;               // uniform 2 mm wall thickness for 3D-printability\nouter_w = 80;\nouter_d = 60;\nouter_h = 35;\n\ninner_w = outer_w - 2*wall;\ninner_d = outer_d - 2*wall;\ninner_h = outer_h - wall;  // open top\n\npcb_w = 60;\npcb_d = 40;\npcb_h = 1.6;\n\nboss_r = 2.2;           // M2 screw boss radius\nboss_h = 6;\nboss_clear = 2.5;       // clearance hole radius\n\n// ---------- Main geometry ----------\ndifference() {\n    // ----- Outer shell -----\n    union() {\n        // Base box\n        cube([outer_w, outer_d, outer_h], center=false);\n\n        // Flange lip for lid seal\n        translate([0, 0, outer_h])\n            cube([outer_w, outer_d, wall], center=false);\n\n        // Rounded corners for realism (outer shell only)\n        for (x = [0, outer_w-wall]) {\n            for (y = [0, outer_d-wall]) {\n                translate([x+wall/2, y+wall/2, wall/2])\n                    sphere(r=wall/2, $fn=16);\n            }\n        }\n\n        // Mounting ears with holes\n        ear_len = 10;\n        ear_thick = wall;\n        for (side = [0, 1]) {\n            translate([side ? outer_w : -ear_len, outer_d/2-ear_len/2, 0])\n                cube([ear_len, ear_len, outer_h]);\n            translate([side ? outer_w+ear_len/2 : -ear_len/2, outer_d/2, outer_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h=ear_len+2*wall, r=2, center=true, $fn=20);\n        }\n    }\n\n    // ----- Inner cavity -----\n    translate([wall, wall, wall])\n        cube([inner_w, inner_d, inner_h], center=false);\n\n    // ----- PCB standoffs -----\n    standoff_x = (outer_w - pcb_w)/2;\n    standoff_y = (outer_d - pcb_d)/2;\n    for (x = [standoff_x, outer_w-standoff_x-boss_r*2]) {\n        for (y = [standoff_y, outer_d-standoff_y-boss_r*2]) {\n            translate([x+boss_r, y+boss_r, wall]) {\n                // Remove clearance hole\n                cylinder(h=boss_h+1, r=boss_clear, $fn=20);\n            }\n        }\n    }\n\n    // ----- Cable slot on back side -----\n    slot_w = 16;\n    slot_h = 10;\n    translate([outer_w/2-slot_w/2, -wall, wall])\n        cube([slot_w, wall+1, slot_h]);\n\n    // ----- Ventilation slits on bottom -----\n    slit_w = 2;\n    slit_gap = 4;\n    for (i = [0:floor(inner_w/slit_gap)-1]) {\n        translate([wall + slit_gap/2 + i*slit_gap, wall, 0])\n            cube([slit_w, inner_d, wall]);\n    }\n}\n\n// ---------- PCB standoff positive geometry ----------\nmodule standoff(x, y) {\n    translate([x, y, wall])\n        cylinder(h=boss_h, r=boss_r, $fn=16);\n}\n\nfor (x = [standoff_x, outer_w-standoff_x-boss_r*2]) {\n    for (y = [standoff_y, outer_d-standoff_y-boss_r*2]) {\n        standoff(x+boss_r, y+boss_r);\n    }\n}\n\n// ---------- Optional lid (comment out to print separately) ----------\n// Lid lip for press-fit\ntranslate([0, 0, outer_h+wall+2])\n    difference() {\n        cube([outer_w, outer_d, wall], center=false);\n        translate([wall/2, wall/2, -1])\n            cube([inner_w+wall, inner_d+wall, wall+2], center=false);\n    }",
    "renders": true
  },
  {
    "mechanical_component": "case",
    "openscad_code": "// Modular case for a small 35×65mm PCB / sensor module\n// Outer footprint: 80×60×35 mm, wall thickness 2 mm\n// Two M3 screw posts inside, snap-fit lid with living hinges\n// Ventilation slots on sides, cable notch in rear wall\n\n$fn = 36;          // smooth curves\nwall = 2;          // uniform wall thickness\ncase_w = 80;       // outside width\ncase_d = 60;       // outside depth\ncase_h = 35;       // outside height\nlip_h  = 3;        // top lip that lid snaps under\npcb_w  = 35;       // PCB width\npcb_d  = 65;       // PCB depth\n\n// Main shell (hollow box)\nmodule shell() {\n    difference() {\n        // outside block\n        cube([case_w, case_d, case_h], center=false);\n        \n        // cavity\n        translate([wall, wall, wall])\n            cube([case_w-2*wall, case_d-2*wall, case_h-wall], center=false);\n        \n        // rear cable notch (8×12 mm)\n        translate([case_w/2-4, case_d, case_h/2-6])\n            cube([8, wall+1, 12]);\n    }\n}\n\n// Internal M3 screw posts (4 mm OD, 3 mm hole)\nmodule posts() {\n    for (x = [case_w/2 - pcb_w/2 - 5, case_w/2 + pcb_w/2 + 5],\n         y = [case_d/2 - pcb_d/2 - 5, case_d/2 + pcb_d/2 + 5])\n    translate([x, y, wall])\n        difference() {\n            cylinder(h = case_h - 2*wall, d = 4);\n            translate([0,0,-0.1])\n                cylinder(h = case_h - 2*wall + 0.2, d = 3.2);\n        }\n}\n\n// Side ventilation slots (3×10 mm)\nmodule vents() {\n    slot_w = 3;\n    slot_h = 10;\n    step   = 6;\n    for (i = [0:3])\n        translate([wall-0.1, wall + 5 + i*step, wall + 5])\n            cube([0.2, slot_w, slot_h]);\n    mirror([1,0,0])\n        for (i = [0:3])\n            translate([wall-0.1, wall + 5 + i*step, wall + 5])\n                cube([0.2, slot_w, slot_h]);\n}\n\n// Snap-fit lid with living hinges\nmodule lid() {\n    lid_t = 1.2;               // lid thickness\n    over  = 0.4;               // overhang for snap\n    translate([0,0,case_h]) difference() {\n        // lid plate\n        cube([case_w, case_d, lid_t], center=false);\n        \n        // clearance recess\n        translate([wall, wall, -0.1])\n            cube([case_w-2*wall, case_d-2*wall, lid_t+0.2]);\n        \n        // snap bumps\n        translate([wall - over, wall, lid_t/2])\n            cube([over, case_d - 2*wall, 1]);\n        translate([case_w - wall, wall, lid_t/2])\n            cube([over, case_d - 2*wall, 1]);\n    }\n    \n    // living hinge tabs at rear\n    tab_l = 6;\n    tab_w = 8;\n    translate([case_w/2 - tab_w/2, case_d - tab_l, case_h - lid_t])\n        cube([tab_w, tab_l, lid_t]);\n}\n\n// Assemble parts\nshell();\nposts();\nvents();\ntranslate([0,0,0.5]) lid();",
    "renders": true
  },
  {
    "mechanical_component": "cover",
    "openscad_code": "// Motor Housing Cover\n// Realistic style, medium complexity\n// Approximate size: 120mm diameter, 80mm height\n\nwall_thickness = 2;\n\n// Main cover shell - domed shape with flat base\nmodule main_shell() {\n    difference() {\n        // Outer dome\n        translate([0, 0, 80/2])\n            scale([1, 1, 0.6])\n            sphere(d = 120, $fn = 64);\n        \n        // Flatten bottom\n        translate([0, 0, -1])\n            cube([200, 200, 80], center = true);\n        \n        // Inner cavity\n        translate([0, 0, 80/2])\n            scale([1, 1, 0.6])\n            sphere(d = 120 - wall_thickness*2, $fn = 64);\n    }\n}\n\n// Mounting flange with bolt holes\nmodule mounting_flange() {\n    difference() {\n        union() {\n            // Flange ring\n            cylinder(h = 8, d1 = 130, d2 = 130, center = true);\n            // Transition to dome\n            translate([0, 0, 4])\n                cylinder(h = 8, d1 = 130, d2 = 120, center = false);\n        }\n        \n        // Bolt holes - 4x M6\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([50, 0, 0])\n                    cylinder(h = 20, d = 7, center = true);\n        }\n    }\n}\n\n// Cooling fins array\nmodule cooling_fins() {\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([0, 0, 75])\n                rotate([0, 90, 0])\n                    translate([0, -2, -60])\n                        cube([60, 4, 1.5]);\n    }\n}\n\n// Cable gland boss\nmodule cable_entry() {\n    union() {\n        // Main boss\n        translate([0, -55, 40])\n            rotate([90, 0, 0])\n                cylinder(h = 20, d = 20, $fn = 20);\n        \n        // Tapered entry\n        translate([0, -55, 40])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d1 = 20, d2 = 16, $fn = 20);\n    }\n}\n\n// Ventilation slots\nmodule vent_slots() {\n    difference() {\n        // Ring for slots\n        rotate([0, 0, 15])\n            rotate_extrude(angle = 360, $fn = 64)\n                translate([55, 0, 0])\n                    square([10, wall_thickness]);\n        \n        // Slots\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                rotate_extrude(angle = 30, $fn = 32)\n                    translate([55, 0, 0])\n                        square([10, wall_thickness + 1]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    main_shell();\n    mounting_flange();\n    \n    // Details\n    translate([0, 0, -4])\n        mounting_flange();\n    \n    cooling_fins();\n    \n    // Position cable entry\n    cable_entry();\n    \n    // Ventilation around mid-section\n    translate([0, 0, 50])\n        vent_slots();\n}",
    "renders": true
  },
  {
    "mechanical_component": "sump",
    "openscad_code": "// Medium-complexity realistic sump\n// Overall footprint ≈ 80 x 60 x 100 mm, wall thickness 2 mm\n\n// Main sump body – open-top rectangular tank\nmodule sump_body() {\n    difference() {\n        // Outer shell\n        cube([80, 60, 100], center = true);\n        // Hollow cavity\n        translate([0, 0, 2])\n            cube([76, 56, 98], center = true);\n    }\n}\n\n// Bottom outlet spigot\nmodule outlet_spigot() {\n    translate([0, -31, -50])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d1 = 12, d2 = 8, $fn = 32);\n}\n\n// Top rim lip for rigidity\nmodule top_rim() {\n    translate([0, 0, 50])\n        difference() {\n            cube([84, 64, 4], center = true);\n            cube([78, 58, 6], center = true);\n        }\n}\n\n// Side brackets for mounting or handles\nmodule side_brackets() {\n    for (x = [-35, 35]) {\n        translate([x, 0, 20])\n            difference() {\n                cube([6, 8, 60], center = true);\n                translate([0, 0, 30])\n                    cube([2, 4, 58], center = true);\n            }\n    }\n}\n\n// Internal baffle plate\nmodule baffle() {\n    translate([0, -20, 0])\n        difference() {\n            cube([76, 2, 96], center = true);\n            translate([0, 0, 46])\n                cube([60, 4, 4], center = true);\n        }\n}\n\n// Fillet strips for print-ability\nmodule fillets() {\n    for (edge = [\n        [ 40,  30, 0],\n        [-40,  30, 0],\n        [ 40, -30, 0],\n        [-40, -30, 0]\n    ]) {\n        translate(edge)\n            cylinder(h = 100, r = 2, center = true, $fn = 16);\n    }\n}\n\n// Assembly\nunion() {\n    sump_body();\n    outlet_spigot();\n    top_rim();\n    side_brackets();\n    baffle();\n    fillets();\n}",
    "renders": true
  },
  {
    "mechanical_component": "pan",
    "openscad_code": "// Medium-complexity realistic frying pan\n// All dimensions in mm, wall thickness 2 mm for printability\n\n$fn = 36;  // smooth curves\n\n// Overall scale factor\nscale_factor = 1;\n\nmodule handle() {\n    // Handle tube\n    difference() {\n        // Outer tube\n        rotate([0, 90, 0])\n            cylinder(h = 100 * scale_factor, d1 = 25 * scale_factor, d2 = 28 * scale_factor, center = false);\n        \n        // Inner hole\n        rotate([0, 90, 0])\n            translate([0, 0, 2 * scale_factor])\n            cylinder(h = 96 * scale_factor, d1 = 21 * scale_factor, d2 = 24 * scale_factor, center = false);\n    }\n\n    // Handle grip rings\n    for (i = [1:3]) {\n        translate([(i * 25 - 10) * scale_factor, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 6 * scale_factor, d = 30 * scale_factor, center = true);\n    }\n}\n\nmodule pan_body() {\n    // Main pan body - shallow bowl\n    difference() {\n        // Outer bowl\n        rotate_extrude(angle = 360)\n            translate([0, 0, 0])\n            polygon([\n                [0, 0],\n                [90 * scale_factor, 0],\n                [90 * scale_factor, 2 * scale_factor],\n                [88 * scale_factor, 10 * scale_factor],\n                [75 * scale_factor, 20 * scale_factor],\n                [55 * scale_factor, 25 * scale_factor],\n                [35 * scale_factor, 27 * scale_factor],\n                [0, 27 * scale_factor]\n            ]);\n        \n        // Inner cavity\n        rotate_extrude(angle = 360)\n            translate([0, 0, 2 * scale_factor])\n            polygon([\n                [2 * scale_factor, 0],\n                [88 * scale_factor, 0],\n                [86 * scale_factor, 8 * scale_factor],\n                [73 * scale_factor, 18 * scale_factor],\n                [53 * scale_factor, 23 * scale_factor],\n                [33 * scale_factor, 25 * scale_factor],\n                [2 * scale_factor, 25 * scale_factor]\n            ]);\n    }\n\n    // Bottom base reinforcement\n    difference() {\n        cylinder(h = 4 * scale_factor, d = 90 * scale_factor, center = false);\n        cylinder(h = 6 * scale_factor, d = 86 * scale_factor, center = false);\n    }\n\n    // Handle joint reinforcement\n    translate([0, 0, 0])\n    difference() {\n        union() {\n            cylinder(h = 30 * scale_factor, d = 32 * scale_factor, center = false);\n            translate([-16 * scale_factor, 0, 15 * scale_factor])\n                cube([32 * scale_factor, 32 * scale_factor, 30 * scale_factor], center = true);\n        }\n        // Hole for handle\n        rotate([0, 90, 0])\n            cylinder(h = 34 * scale_factor, d = 25 * scale_factor, center = true);\n    }\n}\n\nmodule rivets() {\n    // Three rivets attaching handle\n    for (angle = [0:120:240]) {\n        rotate([0, 0, angle])\n        translate([45 * scale_factor, 0, 27 * scale_factor])\n            cylinder(h = 4 * scale_factor, d = 6 * scale_factor, center = false);\n    }\n}\n\nmodule pour_spouts() {\n    // Two pour spouts on sides\n    for (angle = [0:180:180]) {\n        rotate([0, 0, angle])\n        translate([90 * scale_factor, 0, 13.5 * scale_factor])\n            rotate([0, -30, 0])\n            cube([15 * scale_factor, 15 * scale_factor, 2 * scale_factor], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    pan_body();\n    translate([0, 0, 27 * scale_factor])\n        rotate([0, 180, 0])\n        handle();\n    rivets();\n    pour_spouts();\n}",
    "renders": true
  },
  {
    "mechanical_component": "filter",
    "openscad_code": "// Cartridge-style water filter housing – 3D-printable (no support)\n// Overall ~95 mm long, 75 mm diameter\n$fn = 36;\n\nmodule main_housing() {\n    // thick-walled cylinder (2 mm walls)\n    difference() {\n        cylinder(h = 80, d = 75);          // outer shell\n        translate([0, 0, -1])\n            cylinder(h = 82, d = 71);      // hollow core\n    }\n}\n\nmodule inlet_nut() {\n    // hex nut on inlet side\n    translate([0, 0, 80])\n    rotate([0, 0, 30])\n    difference() {\n        cylinder(h = 10, d = 55, $fn = 6);   // hex body\n        translate([0, 0, -1])\n            cylinder(h = 12, d = 15);        // 1/2\" BSP thread hole\n    }\n}\n\nmodule outlet_nut() {\n    // mirror of inlet on opposite side\n    mirror([0, 0, 1])\n    inlet_nut();\n}\n\nmodule reinforcement_ribs() {\n    // six radial ribs for strength\n    for (a = [0:60:359])\n        rotate([0, 0, a])\n        translate([35, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 30, d = 4, $fn = 12);\n}\n\nmodule sealing_grooves() {\n    // two small O-ring grooves\n    for (z = [78, 2])\n        translate([0, 0, z])\n        difference() {\n            cylinder(h = 2, d = 73);\n            cylinder(h = 3, d = 69);\n        }\n}\n\nmodule threads() {\n    // simple coarse external thread on both ends\n    for (i = [0:1])\n        translate([0, 0, 80 * i])\n        rotate([0, 0, 180 * i])\n        for (z = [0:2:9])\n            translate([0, 0, z])\n            difference() {\n                cylinder(h = 2.5, d = 77);\n                cylinder(h = 3, d = 75);\n            }\n}\n\n// assembly\nunion() {\n    main_housing();\n    inlet_nut();\n    outlet_nut();\n    threads();\n    sealing_grooves();\n    reinforcement_ribs();\n}",
    "renders": true
  },
  {
    "mechanical_component": "screen",
    "openscad_code": "// Realistic-style computer monitor screen (3D-printable)\n// Medium complexity, ~100 lines, no overhangs, 2 mm walls\n// Overall footprint ~130 x 95 x 130 mm\n\n// ----------------------------------------------------------\n// Parameters\n// ----------------------------------------------------------\nbase_w       = 130;   // base width\nbase_d       = 95;    // base depth\nbase_h       = 12;    // base thickness\n\nneck_h       = 80;    // neck height\nneck_w       = 18;\nneck_d       = 20;\n\nscreen_w     = 120;   // visible screen\nscreen_h     = 70;\nscreen_d     = 8;\n\nbezel_t      = 4;     // bezel thickness\nshell_t      = 2;     // outer shell wall\n\nstand_r      = 2;     // fillet radii\nscr_r        = 2;\n\n$fn          = 32;    // smooth curves\n// ----------------------------------------------------------\n\n// ----------------------------------------------------------\n// Base with anti-skid grooves\n// ----------------------------------------------------------\nmodule base() {\n    difference() {\n        // solid base plate\n        translate([0,0,base_h/2])\n            rounded_cube([base_w, base_d, base_h], stand_r);\n\n        // underside grooves\n        for (y = [-30:20:30]) {\n            translate([0,y,base_h-1.5])\n                cube([base_w-20, 3, 3], center=true);\n        }\n    }\n}\n\n// ----------------------------------------------------------\n// Neck / stand\n// ----------------------------------------------------------\nmodule neck() {\n    union() {\n        // central post\n        translate([0,0,base_h+neck_h/2])\n            rounded_cube([neck_w, neck_d, neck_h], stand_r);\n    }\n}\n\n// ----------------------------------------------------------\n// Screen body (bezel + shell)\n// ----------------------------------------------------------\nmodule screen_body() {\n    // outer shell\n    difference() {\n        translate([0,0,base_h+neck_h+screen_d/2])\n            rounded_cube([screen_w+2*bezel_t, screen_h+2*bezel_t, screen_d], scr_r);\n\n        // cavity for electronics\n        translate([0,0,base_h+neck_h+screen_d/2])\n            rounded_cube([screen_w+2*bezel_t-2*shell_t, screen_h+2*bezel_t-2*shell_t, screen_d], scr_r);\n    }\n\n    // bezel frame\n    difference() {\n        translate([0,0,base_h+neck_h+screen_d-shell_t/2])\n            cube([screen_w+2*bezel_t, screen_h+2*bezel_t, shell_t], center=true);\n\n        // actual screen opening\n        translate([0,0,base_h+neck_h+screen_d-shell_t/2-0.1])\n            cube([screen_w, screen_h, shell_t+0.2], center=true);\n    }\n\n    // back vents\n    for (i = [-2:1:2]) {\n        translate([screen_w/2+bezel_t-1.5, i*12, base_h+neck_h+screen_d/2])\n            rotate([0,90,0])\n                cylinder(h=30, d=2, center=true);\n    }\n\n    // logo plate\n    translate([0,screen_h/2+bezel_t-2, base_h+neck_h+screen_d-1])\n        cube([20, 4, 2], center=true);\n}\n\n// ----------------------------------------------------------\n// Helper: rounded cube\n// ----------------------------------------------------------\nmodule rounded_cube(size, r) {\n    x = size.x != undef ? size.x : size[0];\n    y = size.y != undef ? size.y : size[1];\n    z = size.z != undef ? size.z : size[2];\n    hull() {\n        for (dx = [-1,1], dy = [-1,1], dz = [-1,1])\n            translate([dx*(x/2-r), dy*(y/2-r), dz*(z/2-r)])\n                sphere(r=r);\n    }\n}\n\n// ----------------------------------------------------------\n// Assembly\n// ----------------------------------------------------------\nbase();\nneck();\nscreen_body();",
    "renders": true
  },
  {
    "mechanical_component": "magnet",
    "openscad_code": "// Realistic Neodymium Disc Magnet with Housing\n// Size: 80mm diameter × 20mm height, overall 100mm diameter × 30mm height\n\n// Main housing parameters\nhousing_d = 100;\nhousing_h = 30;\nwall_thickness = 2;\n\n// Magnet parameters\nmagnet_d = 80;\nmagnet_h = 20;\n\n// Screw mount parameters\nscrew_holes = 4;\nscrew_d = 4;\nscrew_spacing = 85;\nscrew_depth = 15;\n\n// Cooling fins\nfins = 12;\nfin_thickness = 2;\nfin_height = 8;\n\n// Main magnet housing\nmodule magnet_housing() {\n    difference() {\n        // Outer cylinder (housing body)\n        cylinder(d=housing_d, h=housing_h, $fn=128);\n        \n        // Inner cavity for magnet\n        translate([0, 0, wall_thickness])\n            cylinder(d=magnet_d + 0.5, h=magnet_h + 1, $fn=128);\n        \n        // Chamfer top edge\n        translate([0, 0, housing_h - 2])\n            cylinder(d1=housing_d - 4, d2=housing_d, h=2, $fn=128);\n        \n        // Screw holes\n        for(i = [0 : screw_holes - 1]) {\n            rotate([0, 0, i * 90])\n                translate([screw_spacing/2, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(d=screw_d, h=screw_depth + 1, $fn=32);\n        }\n    }\n}\n\n// Cooling fins\nmodule cooling_fins() {\n    for(i = [0 : fins - 1]) {\n        rotate([0, 0, i * (360/fins)])\n            translate([0, housing_d/2 - fin_height/2 - wall_thickness, housing_h/2])\n                cube([fin_thickness, fin_height, housing_h - 4], center=true);\n    }\n}\n\n// Magnet core\nmodule magnet_core() {\n    color(\"red\")\n    translate([0, 0, wall_thickness])\n        cylinder(d=magnet_d, h=magnet_h, $fn=128);\n}\n\n// Pole markings (N and S)\nmodule pole_markings() {\n    // North pole marking\n    translate([0, 0, wall_thickness + magnet_h + 1])\n        cylinder(d=magnet_d/4, h=0.5, $fn=32);\n    \n    // South pole marking\n    translate([0, 0, wall_thickness - 1])\n        cylinder(d=magnet_d/4, h=0.5, $fn=32);\n    \n    // N and S labels\n    translate([0, 0, wall_thickness + magnet_h + 2])\n        rotate([0, 0, 0])\n            linear_extrude(height=0.5)\n                text(\"N\", size=8, halign=\"center\", valign=\"center\");\n    \n    translate([0, 0, wall_thickness - 1.5])\n        rotate([0, 0, 180])\n            linear_extrude(height=0.5)\n                text(\"S\", size=8, halign=\"center\", valign=\"center\");\n}\n\n// Assembly\nunion() {\n    // Main housing\n    magnet_housing();\n    \n    // Cooling fins\n    cooling_fins();\n    \n    // Magnet (visual representation)\n    magnet_core();\n    \n    // Pole markings\n    pole_markings();\n    \n    // Center alignment post\n    translate([0, 0, wall_thickness + magnet_h/2])\n        cylinder(d=10, h=magnet_h, $fn=32);\n}",
    "renders": true
  },
  {
    "mechanical_component": "sensor",
    "openscad_code": "// Ultrasonic distance sensor HC-SR04 style mechanical housing\n// Overall size: 45 mm x 20 mm x 15 mm – printable without supports\n\n$fn = 32;               // Smooth curves\nwall = 2;               // 3D-printable wall thickness\npcb_w = 41;             // PCB width\npcb_l = 18;             // PCB length\npcb_t = 1.6;            // PCB thickness\ncase_clear = 0.5;       // Clearance around PCB\npillar_d = 2.5;         // Mounting pillar diameter\npillar_h = 3;           // Pillar height above PCB\nscrew_d = 1.8;          // Screw hole diameter\n\n// --------------------------------------------------\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, wall]) cube([pcb_w + 2*wall, pcb_l + 2*wall, pcb_t + 2*wall], center = true);\n            translate([0, 0, wall + 3]) cube([pcb_w + 1.5*wall, pcb_l + 1.5*wall, pcb_t + 2*wall], center = true);\n        }\n\n        // Inner cavity\n        translate([0, 0, wall]) cube([pcb_w + case_clear, pcb_l + case_clear, pcb_t + 3*wall], center = true);\n\n        // Transducer openings – front face\n        translate([-(pcb_w/2 - 8), 0, wall + pcb_t/2]) cylinder(h = wall + 1, d = 16);\n        translate([(pcb_w/2 - 8), 0, wall + pcb_t/2]) cylinder(h = wall + 1, d = 16);\n    }\n}\n\n// --------------------------------------------------\n// Mounting pillars\nmodule pillars() {\n    for (x = [-pcb_w/2 + 5, pcb_w/2 - 5], y = [-pcb_l/2 + 5, pcb_l/2 - 5]) {\n        translate([x, y, wall/2])\n        difference() {\n            cylinder(h = wall + pillar_h, d = pillar_d);\n            translate([0, 0, -1]) cylinder(h = wall + pillar_h + 2, d = screw_d);\n        }\n    }\n}\n\n// --------------------------------------------------\n// Rear cover snap clips\nmodule clips() {\n    for (x = [-pcb_w/2 + 3, pcb_w/2 - 3]) {\n        translate([x, 0, wall + pcb_t/2]) {\n            difference() {\n                cube([2, pcb_l + 2*wall, 4], center = true);\n                translate([1, 0, 1]) cube([2.5, pcb_l + 2*wall + 2, 6], center = true);\n            }\n        }\n    }\n}\n\n// --------------------------------------------------\n// Small indicator LED window\nmodule led_window() {\n    translate([0, -pcb_l/2 - wall/2, wall + pcb_t/2])\n    difference() {\n        cube([6, wall, 4], center = true);\n        translate([0, -wall/2 - 0.1, 0]) cube([4, wall + 0.2, 2], center = true);\n    }\n}\n\n// --------------------------------------------------\n// Assembly\nunion() {\n    body_shell();\n    pillars();\n    clips();\n    led_window();\n}",
    "renders": true
  },
  {
    "mechanical_component": "actuator",
    "openscad_code": "// Linear Actuator Assembly (medium complexity, 3D-printable)\n\n// Overall dimensions: 120 mm stroke, 36 mm body Ø, 150 mm total length\n\n$fn = 50;                 // smooth curves\nwall = 2;                 // 3D-printable wall thickness\n\n// Main module\nmodule actuator_assembly() {\n    // Rear clevis mount\n    translate([0,0,0])\n        clevis_mount(12, 8);\n\n    // Motor housing (rear section)\n    translate([20,0,0])\n        rotate([0,90,0])\n        motor_section(36, 40);\n\n    // Lead-screw tube (middle section)\n    translate([60,0,0])\n        rotate([0,90,0])\n        tube_section(36, 80);\n\n    // Extending rod\n    translate([140,0,0])\n        rotate([0,90,0])\n        rod_section(20, 120);\n\n    // Front clevis mount\n    translate([150,0,0])\n        clevis_mount(12, 8);\n}\n\n// Clevis mount with pin hole\nmodule clevis_mount(h, d) {\n    difference() {\n        union() {\n            // Base block\n            cube([h*2, d+wall*2, d+wall*2], center=true);\n            // Fork arms\n            translate([h*0.5, (d+wall)/2, 0])\n                cube([h, wall, d+wall*2], center=true);\n            translate([h*0.5, -(d+wall)/2, 0])\n                cube([h, wall, d+wall*2], center=true);\n        }\n        // Pin hole\n        rotate([90,0,0])\n            cylinder(h=d+wall*2+1, d=4, center=true);\n    }\n}\n\n// Motor housing with cooling fins\nmodule motor_section(od, len) {\n    difference() {\n        union() {\n            // Main cylinder\n            cylinder(h=len, d=od, center=true);\n            // Cooling fins (repetitive)\n            for(i=[1:4:len-5])\n                translate([0,0,i-len/2+2])\n                    cylinder(h=2, d=od+6, center=true);\n            // Cable gland boss\n            translate([0, od/2, -len/2+10])\n                rotate([90,0,0])\n                    cylinder(h=8, d=10, center=true);\n        }\n        // Hollow bore\n        cylinder(h=len+1, d=od-wall*2, center=true);\n        // Cable hole\n        translate([0, od/2, -len/2+10])\n            rotate([90,0,0])\n                cylinder(h=9, d=4, center=true);\n    }\n}\n\n// Lead-screw tube with keyway slot\nmodule tube_section(od, len) {\n    difference() {\n        union() {\n            // Outer tube\n            cylinder(h=len, d=od, center=true);\n            // End cap lip\n            translate([0,0,len/2-4])\n                cylinder(h=4, d=od+4, center=true);\n        }\n        // Inner bore\n        cylinder(h=len+1, d=od-wall*2, center=true);\n        // Keyway slot (anti-rotation)\n        translate([od/2-wall/2,0,0])\n            cube([wall, 6, len+1], center=true);\n    }\n}\n\n// Extending rod with threaded end\nmodule rod_section(od, len) {\n    difference() {\n        union() {\n            // Main rod\n            cylinder(h=len, d=od, center=true);\n            // Threaded end detail\n            translate([0,0,len/2-10])\n                cylinder(h=10, d=od+2, center=true);\n            // Chamfer\n            translate([0,0,-len/2])\n                cylinder(h=2, d1=od, d2=od-2, center=true);\n        }\n        // Hollow core (weight reduction)\n        cylinder(h=len+1, d=od-wall*2, center=true);\n    }\n}\n\n// Render the complete actuator\nactuator_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "solenoid",
    "openscad_code": "// Solenoid - realistic style, medium complexity\n// Overall dimensions: 100mm length × 40mm diameter\n\n$fn = 50;\n\n// Main parameters\ncoil_length = 80;\ncoil_diameter = 40;\ncore_diameter = 20;\nmounting_hole_diameter = 4;\nmounting_bracket_length = 20;\nmounting_bracket_width = 10;\nwall_thickness = 2;\nwire_diameter = 3;\nlead_wire_diameter = 2;\n\n// Color definitions\ncoil_color = \"DarkSlateGray\";\ncore_color = \"Silver\";\nmounting_color = \"DimGray\";\nwire_color = \"Gold\";\n\nmodule solenoid_body() {\n    color(coil_color)\n    difference() {\n        // Main coil housing\n        cylinder(h = coil_length, d = coil_diameter, center = true);\n        \n        // Hollow center for core\n        cylinder(h = coil_length + 2, d = core_diameter, center = true);\n        \n        // Wire entry/exit slots\n        translate([0, coil_diameter/2, coil_length/2 - 5])\n            cube([wire_diameter + 2, wall_thickness + 2, 10], center = true);\n        translate([0, -coil_diameter/2, -coil_length/2 + 5])\n            cube([wire_diameter + 2, wall_thickness + 2, 10], center = true);\n    }\n}\n\nmodule coil_windings() {\n    color(wire_color)\n    for (i = [-coil_length/2 + 5 : 5 : coil_length/2 - 5]) {\n        rotate_extrude(angle = 360, $fn = 20)\n            translate([coil_diameter/2 - wall_thickness - wire_diameter/2, 0, 0])\n                circle(d = wire_diameter);\n        \n        // Windings along length\n        for (j = [0 : 30 : 330]) {\n            rotate([0, j, 0])\n                translate([coil_diameter/2 - wall_thickness - wire_diameter/2, 0, i])\n                    sphere(d = wire_diameter);\n        }\n    }\n}\n\nmodule core_plunger() {\n    color(core_color)\n    union() {\n        // Main plunger rod\n        cylinder(h = coil_length + 20, d = core_diameter - 2, center = true);\n        \n        // Stopper at one end\n        translate([0, 0, coil_length/2 + 10])\n            cylinder(h = 5, d = core_diameter + 4);\n        \n        // Tapered tip at other end\n        translate([0, 0, -coil_length/2 - 5])\n            cylinder(h1 = 10, h2 = 0, d1 = core_diameter - 2, d2 = core_diameter - 6);\n    }\n}\n\nmodule mounting_brackets() {\n    color(mounting_color)\n    union() {\n        // Mounting bracket 1\n        translate([0, coil_diameter/2 + mounting_bracket_width/2, 0])\n            difference() {\n                cube([mounting_bracket_length, mounting_bracket_width, coil_length - 10], center = true);\n                translate([0, 0, 0])\n                    cylinder(h = mounting_bracket_width + 2, d = mounting_hole_diameter, center = true);\n            }\n        \n        // Mounting bracket 2\n        translate([0, -coil_diameter/2 - mounting_bracket_width/2, 0])\n            difference() {\n                cube([mounting_bracket_length, mounting_bracket_width, coil_length - 10], center = true);\n                translate([0, 0, 0])\n                    cylinder(h = mounting_bracket_width + 2, d = mounting_hole_diameter, center = true);\n            }\n    }\n}\n\nmodule lead_wires() {\n    color(wire_color)\n    union() {\n        // Input wire\n        translate([0, coil_diameter/2, coil_length/2 - 5])\n            rotate([90, 0, 0])\n                cylinder(h = 30, d = lead_wire_diameter);\n        \n        // Output wire\n        translate([0, -coil_diameter/2, -coil_length/2 + 5])\n            rotate([90, 0, 0])\n                cylinder(h = 30, d = lead_wire_diameter);\n    }\n}\n\nmodule structural_reinforcements() {\n    color(mounting_color)\n    difference() {\n        // End caps\n        translate([0, 0, coil_length/2 + wall_thickness/2])\n            cylinder(h = wall_thickness, d = coil_diameter + 4);\n        translate([0, 0, coil_length/2 + wall_thickness])\n            cylinder(h = wall_thickness + 2, d = core_diameter - 1);\n        \n        translate([0, 0, -coil_length/2 - wall_thickness/2])\n            cylinder(h = wall_thickness, d = coil_diameter + 4);\n        translate([0, 0, -coil_length/2 - wall_thickness])\n            cylinder(h = wall_thickness + 2, d = core_diameter - 1);\n    }\n}\n\n// Assembly\nsolenoid_body();\ncoil_windings();\ncore_plunger();\nmounting_brackets();\nlead_wires();\nstructural_reinforcements();",
    "renders": true
  },
  {
    "mechanical_component": "valve",
    "openscad_code": "// Ball valve – 3D-printable, medium-complexity, realistic proportions\n// Overall size ≈ 100 mm long, 60 mm high, 60 mm deep\n// Wall thickness ≈ 2 mm, no unsupported overhangs > 45°\n\n// Parameters\nwall = 2;          // 2 mm walls\ndia = 30;          // nominal pipe Ø30 mm\nhandle_len = 60;   // lever handle length\nhandle_dia = 6;    // handle rod Ø6 mm\nflange = 40;       // flange outer Ø40 mm\nflange_h = 4;      // flange thickness 4 mm\nbolt_d = 4;        // M4 bolt head Ø\nbolt_h = 3;        // bolt head height\nbolt_c = 28;       // bolt-circle Ø28 mm, 4 bolts\n\n// Main module\nmodule valve() {\n    // Central body (hollow ball)\n    difference() {\n        sphere(d = dia + 2*wall);\n        sphere(d = dia);\n    }\n\n    // Pipe stub 1\n    translate([0, 0, (dia+2*wall)/2])\n        pipe_stub();\n\n    // Pipe stub 2 (mirrored)\n    mirror([0,0,1]) pipe_stub();\n\n    // Flanges\n    translate([0, 0, (dia+2*wall)/2 + 25/2 - wall])\n        flange();\n    mirror([0,0,1]) translate([0,0, (dia+2*wall)/2 + 25/2 - wall])\n        flange();\n\n    // Handle lever\n    translate([0, 0, 0])\n        rotate([90,0,0])\n            handle();\n}\n\n// Pipe stub 25 mm long\nmodule pipe_stub() {\n    difference() {\n        cylinder(h = 25, d1 = dia + 2*wall, d2 = dia + 2*wall, $fn = 32);\n        cylinder(h = 25 + 0.1, d1 = dia, d2 = dia, $fn = 32);\n    }\n}\n\n// Flange with 4 bolt holes\nmodule flange() {\n    difference() {\n        cylinder(h = flange_h, d = flange, $fn = 32);\n        cylinder(h = flange_h + 0.1, d = dia, $fn = 32);\n        for(a=[0:90:270])\n            rotate([0,0,a])\n                translate([bolt_c/2, 0, -0.1])\n                    cylinder(h = flange_h + 0.2, d = bolt_d + 1, $fn = 16);\n    }\n}\n\n// Handle lever (one piece printable)\nmodule handle() {\n    union() {\n        // Main lever rod\n        translate([0, 0, handle_len/2])\n            cylinder(h = handle_len, d = handle_d, $fn = 16);\n\n        // Hand grip perpendicular rod\n        translate([0, handle_len - handle_d, 0])\n            rotate([90,0,0])\n                cylinder(h = handle_d*4, d = handle_d*1.2, $fn = 16);\n\n        // Indicator flag\n        translate([0, handle_len - handle_d, 0])\n            rotate([90,0,0])\n                cube([handle_d*1.5, wall*5, wall*1.5], center = true);\n    }\n}\n\nvalve();",
    "renders": true
  },
  {
    "mechanical_component": "pump",
    "openscad_code": "// Centrifugal pump – realistic, medium-detail, 3-D printable\n// Overall size ≈ 100 mm (height)\n\n// Basic parameters -------------------------------------------------------------\nwall = 2;               // wall thickness for printability\ndia  = 45;              // volute outer diameter\nbody_h = 35;            // volute height\ninlet_d = 12;           // suction pipe inner diameter\noutlet_d = 10;          // discharge pipe inner diameter\nflange_t = 4;           // flange thickness\nmotor_d = 30;           // electric motor diameter\nmotor_h = 40;           // motor height\nleg_h = 8;              // foot height\nfoot_l = 30;            // foot length\nfoot_w = 20;            // foot width\n\n// Helper modules ---------------------------------------------------------------\nmodule volute() {\n    difference() {\n        // outer shell\n        cylinder(h = body_h, d = dia, center = true);\n\n        // inner cavity (leave 2 mm wall)\n        translate([0, 0, -1])\n            cylinder(h = body_h + 2, d = dia - wall*2, center = true);\n\n        // suction port hole (front)\n        rotate([90, 0, 0])\n            cylinder(h = dia, d = inlet_d, center = true);\n    }\n}\n\nmodule pipe(id, od, len) {\n    difference() {\n        cylinder(h = len, d = od, center = true);\n        cylinder(h = len + 2, d = id, center = true);\n    }\n}\n\nmodule flange(id, od, thick) {\n    difference() {\n        cylinder(h = thick, d = od, center = true);\n        cylinder(h = thick + 1, d = id, center = true);\n    }\n}\n\nmodule foot() {\n    difference() {\n        // main foot block\n        cube([foot_l, foot_w, leg_h], center = true);\n\n        // lightening holes\n        for (y = [-foot_w/4, foot_w/4])\n            translate([0, y, 0])\n                cylinder(h = leg_h + 1, d = 6, center = true);\n    }\n}\n\n// Build the pump ---------------------------------------------------------------\nunion() {\n    // Volute body\n    volute();\n\n    // Suction pipe + flange\n    translate([0, 0, -body_h/2 - flange_t/2])\n        flange(inlet_d, inlet_d + 12, flange_t);\n\n    translate([0, 0, -body_h/2 - flange_t - 10])\n        pipe(inlet_d, inlet_d + wall*2, 20);\n\n    // Discharge pipe + flange (tangential outlet)\n    translate([dia/2 + 5, 0, 0])\n        rotate([0, 90, 0])\n        union() {\n            pipe(outlet_d, outlet_d + wall*2, 20);\n            translate([0, 0, 10 + flange_t/2])\n                flange(outlet_d, outlet_d + 12, flange_t);\n        }\n\n    // Motor housing on top\n    translate([0, 0, body_h/2 + motor_h/2])\n        cylinder(h = motor_h, d = motor_d, center = true);\n\n    // Cooling fins on motor (simple rectangular fins)\n    for (a = [0 : 45 : 315])\n        rotate([0, 0, a])\n        translate([motor_d/2 + 2, 0, body_h/2 + motor_h/2])\n            cube([4, 2, motor_h], center = true);\n\n    // Feet (two symmetric feet)\n    translate([0, 0, -body_h/2 - leg_h/2])\n        foot();\n    translate([0, 0, -body_h/2 - leg_h/2])\n        mirror([1, 0, 0])\n        foot();\n}",
    "renders": true
  },
  {
    "mechanical_component": "cooler",
    "openscad_code": "// Cooler mechanical component - realistic medium complexity\n// Overall dimensions: 100mm x 70mm x 120mm\n\n// Main parameters\nwall_thickness = 2;\ncorner_radius = 5;\nmain_width = 70;\nmain_depth = 50;\nmain_height = 100;\nhandle_diameter = 12;\nhandle_length = 80;\nlid_height = 20;\nvent_rows = 3;\nvent_cols = 5;\n\n// Main cooler body with rounded corners\nmodule cooler_body() {\n    difference() {\n        // Outer shell\n        minkowski() {\n            cube([main_width, main_depth, main_height], center=true);\n            sphere(corner_radius);\n        }\n        \n        // Inner cavity\n        minkowski() {\n            cube([main_width-2*wall_thickness, main_depth-2*wall_thickness, main_height-wall_thickness], center=true);\n            sphere(corner_radius-wall_thickness/2);\n        }\n    }\n}\n\n// Ventilation grilles\nmodule ventilation_grilles() {\n    vent_width = 8;\n    vent_height = 3;\n    vent_spacing = 5;\n    \n    for (j = [0:vent_rows-1]) {\n        for (i = [0:vent_cols-1]) {\n            translate([\n                -main_width/2 + 10 + i*(vent_width+vent_spacing),\n                -main_depth/2 - 0.1,\n                -main_height/2 + 20 + j*(vent_height+vent_spacing)\n            ]) {\n                cube([vent_width, wall_thickness, vent_height]);\n            }\n        }\n    }\n}\n\n// Carry handle\nmodule carry_handle() {\n    translate([0, 0, main_height/2 + lid_height/2]) {\n        // Handle grip\n        rotate([90, 0, 0]) {\n            cylinder(h=handle_length, d=handle_diameter, center=true);\n        }\n        \n        // Handle supports\n        for (x = [-handle_length/2+5, handle_length/2-5]) {\n            translate([x, 0, 0]) {\n                cylinder(h=20, d=8);\n            }\n        }\n    }\n}\n\n// Hinge mechanism\nmodule hinges() {\n    hinge_length = 15;\n    hinge_diameter = 6;\n    \n    for (y = [-main_depth/2+10, main_depth/2-10]) {\n        translate([main_width/2-5, y, main_height/2]) {\n            // Hinge pin\n            rotate([90, 0, 0]) {\n                cylinder(h=hinge_length, d=hinge_diameter);\n            }\n            \n            // Hinge brackets\n            for (z = [0, hinge_length]) {\n                translate([0, 0, z]) {\n                    cube([8, 5, 2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Lid with sealing groove\nmodule cooler_lid() {\n    difference() {\n        // Main lid\n        minkowski() {\n            cube([main_width, main_depth, lid_height], center=true);\n            sphere(corner_radius);\n        }\n        \n        // Sealing groove\n        translate([0, 0, -lid_height/2 + 2]) {\n            minkowski() {\n                cube([main_width-4*wall_thickness, main_depth-4*wall_thickness, 1], center=true);\n                sphere(corner_radius-1);\n            }\n        }\n    }\n}\n\n// Drain plug\nmodule drain_plug() {\n    translate([0, main_depth/2-3, -main_height/2+10]) {\n        difference() {\n            // Plug housing\n            cylinder(h=10, d=8);\n            \n            // Thread\n            rotate([0, 90, 0]) {\n                for (i = [0:5]) {\n                    translate([0, 0, i*1.5]) {\n                        cylinder(h=1, d=7.5);\n                    }\n                }\n            }\n            \n            // Drain hole\n            cylinder(h=12, d=4);\n        }\n    }\n}\n\n// Feet for stability\nmodule support_feet() {\n    foot_diameter = 10;\n    foot_height = 5;\n    \n    for (x = [-main_width/2+15, main_width/2-15]) {\n        for (y = [-main_depth/2+15, main_depth/2-15]) {\n            translate([x, y, -main_height/2-foot_height/2]) {\n                cylinder(h=foot_height, d=foot_diameter);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    cooler_body();\n    translate([0, 0, main_height/2 + lid_height/2]) cooler_lid();\n    \n    // Functional elements\n    ventilation_grilles();\n    carry_handle();\n    hinges();\n    drain_plug();\n    support_feet();\n}",
    "renders": true
  },
  {
    "mechanical_component": "radiator",
    "openscad_code": "// Radiator mechanical component - realistic style, medium complexity\n// Dimensions: 100mm x 20mm x 80mm (W x D x H)\n\nmodule radiator() {\n    // Main body frame\n    difference() {\n        // Outer shell\n        translate([-50, -10, 0])\n            cube([100, 20, 80]);\n        \n        // Inner hollow space\n        translate([-48, -8, 2])\n            cube([96, 16, 76]);\n    }\n    \n    // Top inlet pipe connection\n    translate([0, 0, 82])\n        cylinder(h=10, r=6, $fn=16);\n    \n    // Bottom outlet pipe connection\n    translate([0, 0, -10])\n        cylinder(h=10, r=6, $fn=16);\n    \n    // Vertical heat fins\n    for (x = [-40:10:40]) {\n        translate([x, -9, 2])\n            cube([2, 18, 76]);\n    }\n    \n    // Mounting brackets (top)\n    for (x = [-35, 35]) {\n        translate([x, -15, 75])\n            cube([10, 5, 5]);\n    }\n    \n    // Mounting brackets (bottom)\n    for (x = [-35, 35]) {\n        translate([x, -15, 0])\n            cube([10, 5, 5]);\n    }\n    \n    // Side reinforcement ribs\n    translate([-50, -10, 40])\n        cube([2, 20, 2]);\n    \n    translate([48, -10, 40])\n        cube([2, 20, 2]);\n    \n    // Top reinforcement plate\n    translate([-48, -9, 78])\n        cube([96, 18, 2]);\n    \n    // Bottom reinforcement plate\n    translate([-48, -9, 0])\n        cube([96, 18, 2]);\n    \n    // Threaded inlet detail\n    difference() {\n        translate([0, 0, 87])\n            cylinder(h=3, r=4, $fn=32);\n        translate([0, 0, 87.5])\n            cylinder(h=4, r=2.5, $fn=32);\n    }\n    \n    // Threaded outlet detail\n    difference() {\n        translate([0, 0, -13])\n            cylinder(h=3, r=4, $fn=32);\n        translate([0, 0, -13.5])\n            cylinder(h=4, r=2.5, $fn=32);\n    }\n}\n\n// Render the radiator\nradiator();",
    "renders": true
  },
  {
    "mechanical_component": "lines",
    "openscad_code": "// Office Chair - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm tall, 100mm wide, 100mm deep\n\n// Parameters\nseat_width = 70;\nseat_depth = 65;\nseat_thickness = 8;\n\nbackrest_height = 50;\nbackrest_width = 65;\nbackrest_thickness = 8;\n\narmrest_height = 25;\narmrest_width = 10;\n\nbase_diameter = 100;\nbase_thickness = 8;\n\nwheel_diameter = 15;\nwheel_width = 10;\n\ncylinder_radius = 15;\ncylinder_height = 40;\n\n// Main chair assembly\nmodule office_chair() {\n    // Base with 5 wheels\n    base_assembly();\n    \n    // Gas cylinder\n    translate([0, 0, base_thickness/2 + wheel_diameter/2])\n        cylinder(h = cylinder_height, r = cylinder_radius, $fn = 32);\n    \n    // Seat\n    translate([0, 0, base_thickness/2 + wheel_diameter/2 + cylinder_height])\n        seat_assembly();\n    \n    // Backrest\n    translate([0, -seat_depth/2 + backrest_thickness/2, \n               base_thickness/2 + wheel_diameter/2 + cylinder_height + seat_thickness])\n        backrest();\n    \n    // Armrests\n    translate([-seat_width/2 - armrest_width/2 - 2, 0, \n               base_thickness/2 + wheel_diameter/2 + cylinder_height + seat_thickness/2])\n        armrest();\n    \n    translate([seat_width/2 + armrest_width/2 + 2, 0, \n               base_thickness/2 + wheel_diameter/2 + cylinder_height + seat_thickness/2])\n        mirror([1, 0, 0])\n            armrest();\n}\n\n// Base with 5 arms and wheels\nmodule base_assembly() {\n    // Central hub\n    cylinder(h = base_thickness, r = cylinder_radius + 5, $fn = 32);\n    \n    // 5 arms extending from center\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([0, base_diameter/2 - 15, 0])\n                cube([15, 30, base_thickness], center = true);\n    }\n    \n    // Wheels at ends of arms\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([0, base_diameter/2 - 15, -wheel_diameter/2])\n                rotate([90, 0, 0])\n                    cylinder(h = wheel_width, r = wheel_diameter/2, $fn = 16);\n    }\n}\n\n// Seat with cushion details\nmodule seat_assembly() {\n    // Main seat platform\n    cube([seat_width, seat_depth, seat_thickness], center = true);\n    \n    // Cushion detail - slightly smaller top layer\n    translate([0, 0, seat_thickness/2])\n        cube([seat_width - 4, seat_depth - 4, 3], center = true);\n    \n    // Seat mounting bracket\n    translate([0, 0, -seat_thickness/2])\n        cube([20, 20, 5], center = true);\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    // Main backrest panel\n    cube([backrest_width, backrest_thickness, backrest_height], center = true);\n    \n    // Lumbar support curve\n    difference() {\n        cube([backrest_width - 10, backrest_thickness, backrest_height - 15], center = true);\n        translate([0, backrest_thickness/2 + 1, 5])\n            cube([backrest_width - 20, backrest_thickness + 2, backrest_height - 25], center = true);\n    }\n    \n    // Headrest support\n    translate([0, 0, backrest_height/2 + 10])\n        cube([20, backrest_thickness, 15], center = true);\n}\n\n// Armrest with adjustment mechanism\nmodule armrest() {\n    // Vertical post\n    cylinder(h = armrest_height, r = 5, $fn = 16);\n    \n    // Horizontal armrest pad\n    translate([0, 0, armrest_height])\n        rotate([90, 0, 0])\n            cube([armrest_width, 40, 25], center = true);\n    \n    // Adjustment button\n    translate([0, 3, armrest_height/2])\n        sphere(r = 3, $fn = 16);\n}\n\n// Render the chair\noffice_chair();",
    "renders": true
  },
  {
    "mechanical_component": "hoses",
    "openscad_code": "// Realistic hose mechanical component - medium complexity\n// Industrial hydraulic hose assembly with fittings\n\n$fn = 36;\n\n// Main parameters\nhose_length = 100;\nhose_diameter = 15;\nfitting_length = 20;\ncollar_length = 12;\ncollar_diameter = 22;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Flexible hose body module\nmodule hose_body(length, diameter, wall_thickness) {\n    difference() {\n        // Outer hose\n        cylinder(h = length, d = diameter, center = true);\n        // Inner hollow\n        cylinder(h = length + 1, d = diameter - wall_thickness*2, center = true);\n    }\n}\n\n// Hose reinforcement ribs module\nmodule reinforcement_ribs(length, diameter) {\n    ribs = floor(length / 8);\n    for (i = [-ribs/2:ribs/2]) {\n        translate([0, 0, i * 8 - 4]) {\n            // Rib ring\n            difference() {\n                cylinder(h = 1.5, d = diameter + 3);\n                cylinder(h = 2, d = diameter);\n            }\n        }\n    }\n}\n\n// End fitting module\nmodule fitting(is_rotated = false) {\n    // Main fitting body\n    rotate([0, is_rotated ? 180 : 0, 0]) {\n        union() {\n            // Hexagonal section\n            translate([0, 0, hose_length/2 + fitting_length/2]) {\n                cylinder(h = 8, d = 18, $fn = 6);\n            }\n            \n            // Tapered section\n            translate([0, 0, hose_length/2 + 12]) {\n                cylinder(h1 = 8, h2 = 0, r1 = 9, r2 = 6);\n            }\n            \n            // Threaded section\n            translate([0, 0, hose_length/2 + 16]) {\n                cylinder(h = 12, d = 12);\n                // Thread detail\n                for (i = [0:3:11]) {\n                    translate([0, 0, hose_length/2 + 16 + i]) {\n                        difference() {\n                            cylinder(h = 1.5, d = 14);\n                            cylinder(h = 2, d = 12);\n                        }\n                    }\n                }\n            }\n            \n            // Collar\n            translate([0, 0, hose_length/2 - collar_length/2]) {\n                difference() {\n                    cylinder(h = collar_length, d = collar_diameter);\n                    cylinder(h = collar_length + 1, d = hose_diameter);\n                }\n                // Crimp marks\n                for (i = [0:2:collar_length-2]) {\n                    translate([0, 0, i - collar_length/2 + 1]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h = collar_diameter - 2, d = 1, center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Bend strain relief module\nmodule strain_relief() {\n    // Left relief\n    translate([0, 0, -hose_length/2 + 5]) {\n        for (i = [0:15]) {\n            rotate([0, i * 12, 0]) {\n                translate([0, 0, i * 2]) {\n                    scale([1, 1, 0.3]) {\n                        sphere(d = hose_diameter + 2);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Right relief\n    translate([0, 0, hose_length/2 - 5]) {\n        for (i = [0:15]) {\n            rotate([0, -i * 12, 0]) {\n                translate([0, 0, -i * 2]) {\n                    scale([1, 1, 0.3]) {\n                        sphere(d = hose_diameter + 2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Hose body\n    color(\"#2C3E50\") hose_body(hose_length, hose_diameter, wall);\n    \n    // Reinforcement ribs\n    color(\"#34495E\") reinforcement_ribs(hose_length - 20, hose_diameter);\n    \n    // Left fitting\n    color(\"#BDC3C7\") fitting(false);\n    \n    // Right fitting (mirrored)\n    color(\"#BDC3C7\") fitting(true);\n    \n    // Strain relief sections\n    color(\"#7F8C8D\") strain_relief();\n}",
    "renders": true
  },
  {
    "mechanical_component": "fittings",
    "openscad_code": "// Adjustable pipe fitting with flanges and bolt holes\n// Overall height: 80mm, flange diameter: 60mm\n\nmodule bolt_hole(pos=[0,0,0], angle=0) {\n    translate(pos)\n        rotate([0, angle, 0])\n            cylinder(h=12, d=5.5, $fn=20);   // 5mm bolt clearance\n}\n\nmodule flange(d=60, h=8) {\n    difference() {\n        cylinder(h=h, d=d, $fn=60);           // main flange disc\n        // central bore\n        translate([0,0,-1])\n            cylinder(h=h+2, d=26, $fn=40);\n        // 4 bolt holes on PCD 45mm\n        for(a=[0:90:270])\n            rotate([0,0,a]) \n                translate([22.5,0,h/2])\n                    bolt_hole(angle=90);\n    }\n}\n\nmodule body() {\n    union() {\n        // lower pipe socket\n        translate([0,0,0])\n            difference() {\n                cylinder(h=32, d=34, $fn=40);\n                translate([0,0,-1])\n                    cylinder(h=34, d=26, $fn=40);\n            }\n        // upper pipe socket\n        translate([0,0,48])\n            difference() {\n                cylinder(h=32, d=34, $fn=40);\n                translate([0,0,-1])\n                    cylinder(h=34, d=26, $fn=40);\n            }\n        // central adjustment collar\n        translate([0,0,32])\n            difference() {\n                cylinder(h=16, d=48, $fn=60);\n                // hex key access\n                translate([0,0,-1])\n                    cylinder(h=18, d=28, $fn=6);\n                // screw boss\n                translate([20,0,8])\n                    rotate([90,0,0])\n                        cylinder(h=12, d=8, $fn=20);\n            }\n    }\n}\n\n// Main assembly\nunion() {\n    // lower flange\n    translate([0,0,0])\n        flange();\n    // upper flange\n    translate([0,0,72])\n        flange();\n    // main body between flanges\n    body();\n    // locking screw detail\n    translate([20,0,40])\n        rotate([90,0,0])\n            cylinder(h=16, d=6.5, $fn=20);\n}",
    "renders": true
  },
  {
    "mechanical_component": "flange",
    "openscad_code": "// ANSI 2-inch slip-on flange\n// Overall OD: 152 mm, Bolt-circle: 121 mm, ID: 53 mm, Thickness: 19 mm\n// Six 5/8\"-11 UNC bolt holes (19 mm clearance)\n\n$fn = 36;               // smooth curves\n\n/* ---------- parameters ---------- */\nhub_od     = 90;        // raised-face hub diameter\nhub_h      = 3;         // raised-face height\nflange_od  = 152;       // flange outside diameter\nflange_id  = 53;        // bore diameter\nflange_t   = 19;        // total thickness\nbolt_d     = 19;        // bolt hole diameter\nbolt_pcd   = 121;       // bolt-circle diameter\nbolt_cnt   = 6;         // number of bolt holes\nweb_h      = 7;         // web thickness behind hub\nfillet_r   = 2;         // print-friendly inner fillet\nwall_t     = 2;         // printable wall thickness\n\n/* ---------- main geometry ---------- */\nmodule flange() {\n    difference() {\n        /* solid flange body */\n        union() {\n            // main disc\n            cylinder(h = flange_t, d = flange_od, center = false);\n\n            // raised face hub\n            translate([0,0,flange_t-hub_h])\n                cylinder(h = hub_h, d = hub_od, center = false);\n\n            // reinforcing web behind hub\n            translate([0,0,0])\n                cylinder(h = web_h, d = hub_od + 2*wall_t, center = false);\n        }\n\n        /* central bore */\n        translate([0,0,-1])\n            cylinder(h = flange_t + 2, d = flange_id, center = false);\n\n        /* bolt holes arranged in a circle */\n        for(i = [0 : bolt_cnt-1]) {\n            angle = i * 360/bolt_cnt;\n            translate([bolt_pcd/2, 0, -1])\n                rotate([0, 0, angle])\n                cylinder(h = flange_t + 2, d = bolt_d, center = false);\n        }\n\n        /* inside corner fillet for printability */\n        translate([0,0,-0.1])\n            rotate_extrude()\n                translate([flange_id/2 + wall_t, 0.1])\n                    circle(r = fillet_r);\n    }\n}\n\n/* ---------- render ---------- */\nflange();",
    "renders": true
  },
  {
    "mechanical_component": "yoke",
    "openscad_code": "// Yoke mechanical component - realistic style, medium complexity\n// Overall dimensions: 120mm x 100mm x 30mm\n\n// Main parameters\nwall_thickness = 2;\nmain_width = 100;\nmain_height = 120;\nmain_thickness = 30;\nshaft_diameter = 12;\nboss_height = 15;\nbolt_hole_diameter = 6;\n\n// Main yoke body - U-shaped structure\nmodule yoke_body() {\n    difference() {\n        // Outer U-shape\n        union() {\n            // Left arm\n            translate([-main_width/2, 0, 0])\n                cube([wall_thickness, main_height, main_thickness], center=true);\n            \n            // Right arm\n            translate([main_width/2, 0, 0])\n                cube([wall_thickness, main_height, main_thickness], center=true);\n            \n            // Bottom cross bar\n            translate([0, -main_height/2 + wall_thickness/2, 0])\n                cube([main_width, wall_thickness, main_thickness], center=true);\n        }\n        \n        // Inner hollow space\n        translate([0, -main_height/2 + wall_thickness + 2, 0])\n            cube([main_width - 2*wall_thickness, main_height - 2*wall_thickness - 4, main_thickness + 0.1], center=true);\n    }\n}\n\n// Shaft boss - cylindrical mounting point\nmodule shaft_boss() {\n    translate([0, main_height/2 - boss_height/2, 0])\n    difference() {\n        // Main boss cylinder\n        cylinder(h=boss_height, d=shaft_diameter + 2*wall_thickness, center=true);\n        \n        // Shaft hole\n        cylinder(h=boss_height + 1, d=shaft_diameter, center=true);\n        \n        // Keyway slot\n        translate([0, 0, -boss_height/2 - 0.1])\n            cube([wall_thickness, shaft_diameter/2, boss_height + 0.2], center=true);\n    }\n}\n\n// Mounting brackets with bolt holes\nmodule mounting_brackets() {\n    for(side = [-1, 1]) {\n        translate([side * (main_width/2 - wall_thickness/2), -main_height/2 + 15, 0])\n        difference() {\n            // Bracket body\n            cube([wall_thickness + 4, 30, main_thickness + 4], center=true);\n            \n            // Bolt hole\n            translate([0, -10, 0])\n                cylinder(h=main_thickness + 5, d=bolt_hole_diameter, center=true);\n            \n            // Counterbore\n            translate([0, -10, (main_thickness + 4)/2 - 3])\n                cylinder(h=6, d=bolt_hole_diameter + 4, center=true);\n        }\n    }\n}\n\n// Reinforcement ribs\nmodule reinforcement_ribs() {\n    // Side ribs\n    for(side = [-1, 1]) {\n        translate([side * (main_width/2 - wall_thickness - 2), -main_height/4, 0])\n        cube([4, main_height/2, wall_thickness], center=true);\n    }\n    \n    // Bottom ribs\n    for(pos = [-30, 0, 30]) {\n        translate([pos, -main_height/2 + 10, 0])\n        cube([8, 4, main_thickness - 2*wall_thickness], center=true);\n    }\n}\n\n// Chamfers and fillets (simplified with tapered cylinders)\nmodule chamfers() {\n    // Top chamfer on arms\n    for(side = [-1, 1]) {\n        translate([side * main_width/2, main_height/2 - 2, 0])\n        difference() {\n            cylinder(h=4, d1=wall_thickness + 2, d2=wall_thickness, center=true);\n            translate([0, 0, -2.1])\n                cube([wall_thickness + 4, 4.2, 4.2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    yoke_body();\n    shaft_boss();\n    mounting_brackets();\n    reinforcement_ribs();\n    chamfers();\n}",
    "renders": true
  },
  {
    "mechanical_component": "spline",
    "openscad_code": "// Realistic spline shaft mechanical component - medium complexity\n// 3D printable with 2mm walls, ~120mm length\n\n$fn = 32; // Smooth curves for 3D printing\n\n// Main parameters\nshaft_length = 120;\nshaft_diameter = 20;\nspline_teeth = 6;\nspline_depth = 2;\nspline_width = 4;\nkeyway_width = 6;\nkeyway_depth = 3;\nbearing_seat_length = 15;\nbearing_seat_diameter = 25;\nchamfer_size = 1;\n\nmodule spline_shaft() {\n    // Main cylindrical shaft body\n    difference() {\n        cylinder(h = shaft_length, d = shaft_diameter, center = true);\n        \n        // Central bore for weight reduction\n        cylinder(h = shaft_length + 2, d = shaft_diameter - 4, center = true);\n    }\n    \n    // Spline teeth along shaft\n    for(i = [0:spline_teeth-1]) {\n        rotate([0, 0, i * 360/spline_teeth]) {\n            translate([0, 0, -shaft_length/2]) {\n                linear_extrude(height = shaft_length) {\n                    polygon(points = [\n                        [shaft_diameter/2 - spline_depth, -spline_width/2],\n                        [shaft_diameter/2 - spline_depth, spline_width/2],\n                        [shaft_diameter/2, spline_width/2],\n                        [shaft_diameter/2, -spline_width/2]\n                    ]);\n                }\n            }\n        }\n    }\n    \n    // Keyway at one end\n    translate([0, 0, shaft_length/2 - bearing_seat_length/2]) {\n        cube([keyway_width, keyway_depth, bearing_seat_length], center = true);\n    }\n    \n    // Bearing seat (larger diameter section)\n    translate([0, 0, shaft_length/2 - bearing_seat_length/2]) {\n        cylinder(h = bearing_seat_length, d = bearing_seat_diameter);\n    }\n    \n    // Second bearing seat at opposite end\n    translate([0, 0, -shaft_length/2 + bearing_seat_length/2]) {\n        cylinder(h = bearing_seat_length, d = bearing_seat_diameter);\n    }\n    \n    // Chamfers on edges\n    translate([0, 0, shaft_length/2]) {\n        cylinder(h1 = chamfer_size, h2 = 0, d1 = shaft_diameter + 2*chamfer_size, d2 = shaft_diameter);\n    }\n    \n    translate([0, 0, -shaft_length/2]) {\n        cylinder(h1 = 0, h2 = chamfer_size, d1 = shaft_diameter, d2 = shaft_diameter + 2*chamfer_size);\n    }\n    \n    // Thread relief groove\n    translate([0, 0, shaft_length/2 - bearing_seat_length - 5]) {\n        difference() {\n            cylinder(h = 3, d = shaft_diameter + 1);\n            cylinder(h = 5, d = shaft_diameter - 2);\n        }\n    }\n}\n\n// Optional retaining ring groove\nmodule retaining_ring_groove() {\n    translate([0, 0, shaft_length/2 - bearing_seat_length - 10]) {\n        difference() {\n            cylinder(h = 2, d = shaft_diameter + 1);\n            cylinder(h = 3, d = shaft_diameter - 4);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    spline_shaft();\n    retaining_ring_groove();\n}",
    "renders": true
  },
  {
    "mechanical_component": "key",
    "openscad_code": "// Realistic Medium-Complexity Key (House Key Style)\n// Overall length ≈ 62 mm, max width ≈ 26 mm\n// No overhangs > 45°, 2 mm wall thickness everywhere\n\n$fn = 36;\n\nmodule key_head() {\n    // Key ring hole (4 mm diameter, 2 mm wall)\n    difference() {\n        cylinder(h = 3.5, d = 12);\n        translate([0, 0, -0.1])\n            cylinder(h = 3.7, d = 4.2);\n    }\n}\n\nmodule key_blade() {\n    // Main blade body 40 mm long x 6 mm wide x 3 mm thick\n    difference() {\n        translate([0, 0, 0])\n            cube([40, 6, 3], center = true);\n\n        // Top bevel 45° for printability\n        translate([10, 0, 1.5])\n            rotate([0, 45, 0])\n            cube([28, 6.2, 2.2], center = true);\n    }\n}\n\nmodule key_bow() {\n    // Decorative bow shape (oval, 26 mm wide x 18 mm tall)\n    difference() {\n        // Outer oval\n        scale([1, 0.72, 1])\n        cylinder(h = 3.5, d = 26);\n\n        // Inner oval (creates 2 mm wall)\n        translate([0, 0, -0.1])\n        scale([0.85, 0.57, 1])\n        cylinder(h = 3.7, d = 26);\n    }\n}\n\nmodule key_groove() {\n    // Mill groove along blade bottom for pin tumblers\n    translate([10, 0, -1.5])\n    cube([30, 1.8, 1.8], center = true);\n}\n\nmodule key_cuts() {\n    // Five pin cuts (depths 1–3 mm, spaced 5 mm apart)\n    for (i = [0:4]) {\n        translate([35 - i*5, 0, 0])\n        cube([1.8, 6.2, 1 + i*0.5], center = true);\n    }\n}\n\nmodule key_tip() {\n    // Rounded tip for smooth insertion\n    translate([40, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 3, d = 6, center = true);\n}\n\n// Assembly\nunion() {\n    // Bow\n    key_bow();\n\n    // Head (ring) positioned atop bow\n    translate([0, 0, 3.5])\n    key_head();\n\n    // Blade extending from bow center\n    translate([0, -12, 1.75])\n    rotate([90, 0, 0])\n    union() {\n        key_blade();\n        key_tip();\n    }\n\n    // Groove and cuts subtracted from blade\n    translate([0, -12, 1.75])\n    rotate([90, 0, 0])\n    difference() {\n        children(0);\n        key_groove();\n        key_cuts();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "keyway",
    "openscad_code": "// Keyway Mechanical Component for Shaft-Hub Connection\n// Overall dimensions: 80mm x 30mm x 30mm\n\n$fn = 64;\n\n// Main parameters\nshaft_diameter = 20;\nhub_diameter = 30;\nkey_width = 6;\nkey_height = 6;\nkey_length = 25;\nwall_thickness = 2;\n\n// Base shaft cylinder\nmodule shaft() {\n    difference() {\n        // Main shaft body\n        cylinder(h = 80, d = shaft_diameter, center = true);\n        \n        // Keyway slot - centered on shaft\n        translate([0, 0, -key_length/2])\n            cube([key_width, key_height + 1, key_length], center = true);\n    }\n}\n\n// Hub with keyway\nmodule hub() {\n    difference() {\n        // Main hub body\n        cylinder(h = 30, d = hub_diameter, center = true);\n        \n        // Central shaft hole\n        cylinder(h = 30 + 2, d = shaft_diameter, center = true);\n        \n        // Keyway slot in hub\n        translate([0, 0, -key_height/2])\n            cube([key_width + 0.5, key_height + 1, 30 + 2], center = true);\n    }\n}\n\n// Key itself\nmodule key() {\n    // Main key body\n    translate([0, 0, -key_length/2])\n        cube([key_width, key_height, key_length], center = true);\n    \n    // Rounded top edges for easier insertion\n    translate([0, key_height/2 - 1, -key_length/2 + key_width/2])\n        rotate([90, 0, 0])\n            cylinder(h = key_width, d = key_width, center = true);\n    \n    translate([0, key_height/2 - 1, key_length/2 - key_width/2])\n        rotate([90, 0, 0])\n            cylinder(h = key_width, d = key_width, center = true);\n}\n\n// Set screw hole in hub\nmodule set_screw_hole() {\n    rotate([90, 0, 0])\n        translate([hub_diameter/2 - 3, 0, 0])\n            cylinder(h = 6, d = 3, center = true);\n}\n\n// Assembly\n// Render shaft with keyway\ntranslate([-30, 0, 0])\n    shaft();\n\n// Render hub with keyway and set screw\ntranslate([30, 0, 0])\n    difference() {\n        hub();\n        set_screw_hole();\n    }\n\n// Render key separately for reference\ntranslate([0, 0, 50])\n    key();\n\n// Add chamfer to key edges for realism\nmodule chamfer_key() {\n    difference() {\n        key();\n        // Top chamfers\n        translate([0, key_height/2 + 0.5, -key_length/2])\n            cube([key_width + 2, 1, key_length + 2], center = true);\n        \n        // Side chamfers\n        translate([key_width/2 + 0.5, 0, -key_length/2])\n            cube([1, key_height + 2, key_length + 2], center = true);\n    }\n}\n\n// Render chamfered key\ntranslate([0, 0, -50])\n    chamfer_key();",
    "renders": true
  },
  {
    "mechanical_component": "setscrew",
    "openscad_code": "// Realistic Setscrew – OpenSCAD\n// Overall height ≈ 80 mm, hex-socket cap, dog-point tip\n// Wall thickness ≥ 2 mm everywhere, printable without supports\n\n$fn = 36;               // global facet resolution\n\nmodule setscrew() {\n    // ---------- Main dimensions ----------\n    shank_d   = 20;     // M20 equivalent\n    shank_l   = 60;     // threaded length\n    head_d    = 30;     // hex head across-flats\n    head_h    = 12;     // hex head height\n    socket_d  = 12;     // hex socket across-flats\n    socket_h  = 8;      // hex socket depth\n    dog_l     = 8;      // length of dog point\n    dog_d     = 10;     // diameter of dog point\n    thread_pitch = 2.5; // visible thread pitch\n\n    // ---------- Hex head ----------\n    difference() {\n        cylinder(h = head_h, d = head_d / cos(30));   // across-points\n        // Hex socket\n        translate([0, 0, -0.1])\n            cylinder(h = socket_h + 0.2,\n                     d = socket_d / cos(30));\n    }\n\n    // ---------- Shank ----------\n    // Smooth shank up to dog point\n    translate([0, 0, -shank_l])\n        cylinder(h = shank_l - dog_l, d = shank_d);\n\n    // Dog point (reduced diameter tip)\n    translate([0, 0, -(shank_l)])\n        cylinder(h = dog_l, d = dog_d);\n\n    // ---------- External threads (visible ridges) ----------\n    thread_turns = floor((shank_l - dog_l) / thread_pitch);\n    for (i = [0 : thread_turns - 1]) {\n        z = -i * thread_pitch - head_h - thread_pitch/2;\n        translate([0, 0, z])\n            rotate([0, 0, (i % 2) * 180])      // staggered halves\n                difference() {\n                    cylinder(h = thread_pitch + 0.2, d = shank_d + 1);\n                    cylinder(h = thread_pitch + 0.4, d = shank_d - 1);\n                }\n    }\n}\n\n// Render\nsetscrew();",
    "renders": true
  },
  {
    "mechanical_component": "locknut",
    "openscad_code": "$fn = 50; // Global resolution for smooth curves\n\n// Main parameters\nnut_height = 25;\nnut_diameter = 40;  // Across flats\nthread_diameter = 20;\ncollar_height = 8;\ncollar_diameter = 30;\ngrip_notch_depth = 2;\ngrip_notch_width = 3;\nnum_grip_notches = 6;\nwall_thickness = 2;\n\nmodule hex_body() {\n    // Main hexagonal body\n    difference() {\n        cylinder(h=nut_height, r=nut_diameter/2, $fn=6); // Hexagon via cylinder\n        // Central threaded hole\n        cylinder(h=nut_height+1, r=thread_diameter/2+0.5, center=true);\n    }\n}\n\nmodule nyloc_collar() {\n    // Nylon collar on top\n    difference() {\n        cylinder(h=collar_height, r=collar_diameter/2);\n        cylinder(h=collar_height+1, r=thread_diameter/2+0.2, center=true);\n    }\n}\n\nmodule grip_notches() {\n    // Grip notches around collar\n    for (i=[0:num_grip_notches-1]) {\n        rotate([0, 0, i*360/num_grip_notches])\n        translate([0, collar_diameter/2 - grip_notch_depth, collar_height/2])\n            cube([grip_notch_width, grip_notch_depth*2, collar_height], center=true);\n    }\n}\n\nmodule chamfers() {\n    // Top and bottom chamfers for printability\n    difference() {\n        cylinder(h=nut_height, r=nut_diameter/2, $fn=6);\n        translate([0, 0, -0.1]) // Bottom chamfer\n            cylinder(h=2, r1=nut_diameter/2-1, r2=nut_diameter/2+1, $fn=6);\n        translate([0, 0, nut_height-1.9]) // Top chamfer\n            cylinder(h=2, r1=nut_diameter/2+1, r2=nut_diameter/2-1, $fn=6);\n    }\n}\n\n// Assembly\nunion() {\n    // Main hex body with chamfers\n    difference() {\n        chamfers();\n        cylinder(h=nut_height+1, r=thread_diameter/2+0.5, center=true);\n    }\n    \n    // Nyloc collar\n    translate([0, 0, nut_height-collar_height/2])\n        nyloc_collar();\n    \n    // Grip notches on collar\n    grip_notches();\n}",
    "renders": true
  },
  {
    "mechanical_component": "washer",
    "openscad_code": "// Realistic Washer - Medium Complexity\n// 3D printable washer with realistic proportions and structural details\n\n// Washer parameters\nwasher_od = 60; // Outer diameter in mm\nwasher_id = 25; // Inner diameter in mm\nwasher_t = 3.5; // Thickness in mm\nchamfer_h = 0.7; // Chamfer height\nfillet_r = 1.2; // Edge fillet radius\ngrip_notch_w = 8; // Grip notch width\ngrip_notch_d = 1.5; // Grip notch depth\ntexture_segments = 36; // Surface texture segments\n\n// Washer module\nmodule washer() {\n    difference() {\n        // Main washer body with chamfered edges\n        union() {\n            // Bottom chamfer\n            cylinder(h=washer_t, r1=washer_od/2, r2=washer_od/2-chamfer_h, $fn=100);\n            \n            // Middle straight section\n            translate([0, 0, chamfer_h])\n                cylinder(h=washer_t-2*chamfer_h, r=washer_od/2-chamfer_h, $fn=100);\n            \n            // Top chamfer\n            translate([0, 0, washer_t-chamfer_h])\n                cylinder(h=chamfer_h, r1=washer_od/2-chamfer_h, r2=washer_od/2, $fn=100);\n        }\n        \n        // Central hole with top/bottom fillets\n        union() {\n            // Bottom fillet\n            cylinder(h=fillet_r, r1=washer_id/2, r2=washer_id/2+fillet_r, $fn=100);\n            \n            // Middle straight section\n            translate([0, 0, fillet_r])\n                cylinder(h=washer_t-2*fillet_r, r=washer_id/2+fillet_r, $fn=100);\n            \n            // Top fillet\n            translate([0, 0, washer_t-fillet_r])\n                cylinder(h=fillet_r, r1=washer_id/2+fillet_r, r2=washer_id/2, $fn=100);\n        }\n        \n        // Grip notches for easier handling\n        for(i=[0:1]) {\n            rotate([0, 0, i*180])\n                translate([washer_od/2 - grip_notch_d/2, 0, washer_t/2])\n                    cube([grip_notch_d, grip_notch_w, washer_t], center=true);\n        }\n    }\n}\n\n// Surface texture for better grip\nmodule surface_texture() {\n    difference() {\n        washer();\n        \n        // Radial grooves for grip\n        for(i=[0:texture_segments-1]) {\n            rotate([0, 0, i*360/texture_segments])\n                translate([washer_od/2 - 3, 0, -0.1])\n                    cube([6, 0.5, washer_t+0.2], center=true);\n        }\n        \n        // Concentric grooves\n        for(r=[washer_id/2+3:3:washer_od/2-3]) {\n            difference() {\n                cylinder(h=0.2, r=r+0.25, $fn=100);\n                cylinder(h=0.3, r=r-0.25, $fn=100);\n            }\n        }\n    }\n}\n\n// Main assembly\nsurface_texture();",
    "renders": true
  },
  {
    "mechanical_component": "shim",
    "openscad_code": "// Shim - Mechanical Alignment Spacer (Realistic Style, Medium Complexity)\n// Dimensions: 100mm x 20mm x 3mm with adjustment features\n\n$fn = 50;  // Smooth curves for 3D printing\nwall_thickness = 2;  // Minimum printable wall thickness\n\n// Main shim body with tapered edges\nmodule shim_body() {\n    difference() {\n        // Main rectangular block with chamfered edges\n        difference() {\n            // Base block\n            translate([0, 0, 1.5])\n                cube([100, 20, 3], center = true);\n            \n            // Top chamfer\n            translate([0, 0, 2.5])\n                cube([104, 24, 1], center = true);\n                \n            // Bottom chamfer\n            translate([0, 0, 0.5])\n                cube([104, 24, 1], center = true);\n        }\n        \n        // Central slot for adjustment mechanism\n        translate([0, 0, 1.5])\n            cube([96, 16, 3.2], center = true);\n    }\n}\n\n// Adjustment screw holes (M3 screws)\nmodule screw_holes() {\n    for(i = [-2, 0, 2]) {\n        translate([i * 30, 0, 1.5])\n            rotate([0, 90, 0])\n                cylinder(h = 20, d = 3.4, center = true);\n    }\n}\n\n// Reinforcement ribs along length\nmodule ribs() {\n    for(pos = [-40, -20, 0, 20, 40]) {\n        translate([pos, 0, -0.5])\n            cube([8, 16, wall_thickness], center = true);\n    }\n}\n\n// Grip texture pattern (knurled surface)\nmodule grip_texture() {\n    difference() {\n        // Base grip pads\n        translate([0, 0, 3.1])\n            cube([100, 18, 0.4], center = true);\n            \n        // Diamond pattern cutouts\n        for(y = [-7, -3.5, 0, 3.5, 7]) {\n            for(x = [-45, -35, -25, -15, -5, 5, 15, 25, 35, 45]) {\n                translate([x, y, 3.3])\n                    rotate([0, 0, 45])\n                        cube([2, 2, 0.6], center = true);\n            }\n        }\n    }\n}\n\n// Alignment pins for stacking\nmodule alignment_pins() {\n    // Bottom pins\n    translate([-40, -7, -1.5])\n        cylinder(h = 2, d = 4, center = true);\n    translate([-40, 7, -1.5])\n        cylinder(h = 2, d = 4, center = true);\n    translate([40, -7, -1.5])\n        cylinder(h = 2, d = 4, center = true);\n    translate([40, 7, -1.5])\n        cylinder(h = 2, d = 4, center = true);\n        \n    // Top pin holes (sockets)\n    translate([-40, -7, 4.5])\n        rotate([180, 0, 0])\n            cylinder(h = 2.2, d = 4.2, center = true);\n    translate([-40, 7, 4.5])\n        rotate([180, 0, 0])\n            cylinder(h = 2.2, d = 4.2, center = true);\n    translate([40, -7, 4.5])\n        rotate([180, 0, 0])\n            cylinder(h = 2.2, d = 4.2, center = true);\n    translate([40, 7, 4.5])\n        rotate([180, 0, 0])\n            cylinder(h = 2.2, d = 4.2, center = true);\n}\n\n// Thickness markings (engraved text with cubes)\nmodule thickness_markings() {\n    // 3.0mm marking\n    translate([-48, 9, 1.5])\n        cube([0.5, 0.5, 0.3], center = true);\n    translate([-47, 9, 1.5])\n        cube([0.5, 0.5, 0.3], center = true);\n    translate([-46, 9, 1.5])\n        cube([0.5, 0.5, 0.3], center = true);\n        \n    // Decimal point\n    translate([-45, 9, 1.5])\n        cube([0.5, 0.5, 0.3], center = true);\n        \n    // Zero\n    translate([-44, 9, 1.5])\n        cube([0.5, 0.5, 0.3], center = true);\n}\n\n// Main assembly\nunion() {\n    // Core shim components\n    shim_body();\n    ribs();\n    \n    // Functional features\n    difference() {\n        union() {\n            screw_holes();\n            alignment_pins();\n        }\n        \n        // Ensure proper clearance for screws\n        translate([0, 0, 1.5])\n            cube([100, 20, 3.4], center = true);\n    }\n    \n    // Surface features\n    grip_texture();\n    thickness_markings();\n}",
    "renders": true
  },
  {
    "mechanical_component": "grommet",
    "openscad_code": "// Cable grommet – medium-complexity realistic model\n// Overall size ≈ 60 mm Ø, 20 mm thick, 2 mm wall everywhere\n// Fits into a 60 mm Ø desk hole, guides cables and keeps them tidy\n\n$fn = 36;               // smooth curves for printability\n\n// Main dimensions\nouter_dia = 60;         // matches standard desk hole\nwall = 2;               // printable wall thickness\nheight = 20;\nlip_height = 4;         // flange that sits on desk\ninner_dia = outer_dia - 2*wall;\ncable_hole_dia = 28;    // generous central passage\n\nmodule grommet()\n{\n    difference() {\n        // Outer body with top lip\n        union() {\n            cylinder(d = outer_dia, h = height, center = false);\n\n            // Top lip flange\n            translate([0, 0, height - lip_height])\n                cylinder(d = outer_dia + 2*wall, h = lip_height, center = false);\n        }\n\n        // Central cable hole\n        translate([0, 0, -1])                // ensure clean subtraction\n            cylinder(d = cable_hole_dia, h = height + 2, center = false);\n\n        // Four radial slots for cable segregation\n        for (a = [0:90:270])\n            rotate([0, 0, a])\n                translate([0, cable_hole_dia/2 + wall/2, -1])\n                    cube([wall, wall + cable_hole_dia/2, height + 2], center = true);\n\n        // Bottom chamfer – guides cables upward, 45°\n        translate([0, 0, -0.1])\n            cylinder(d1 = inner_dia - 4, d2 = inner_dia, h = 4, center = false);\n    }\n\n    // Optional anti-slip ribs on lip underside (printable without support)\n    for (r = [inner_dia/2 + wall : 2 : outer_dia/2 - wall])\n        rotate_extrude(angle = 360, $fn = 64)\n            translate([r, 0, 0])\n                square([0.5, 0.5]);\n}\n\n// Render the grommet\ngrommet();",
    "renders": true
  },
  {
    "mechanical_component": "boot",
    "openscad_code": "// Boot mechanical component - realistic style, medium complexity\n// Overall dimensions: 90mm length, 35mm width, 40mm height\n\nwall_thickness = 2;\nsole_height = 5;\nheel_height = 15;\nboot_length = 90;\nboot_width = 35;\nankle_height = 40;\n\n// Main sole with tread pattern\nmodule sole() {\n    // Base sole\n    union() {\n        difference() {\n            translate([0, 0, sole_height/2])\n                cube([boot_length, boot_width, sole_height], center=true);\n            \n            // Tread grooves\n            for(i=[-boot_length/2+10:10:boot_length/2-10]) {\n                translate([i, 0, sole_height-1])\n                    cube([2, boot_width-4, 2], center=true);\n            }\n        }\n        \n        // Heel block\n        translate([boot_length/2-15, 0, heel_height/2+sole_height])\n            cube([30, boot_width-4, heel_height], center=true);\n    }\n}\n\n// Upper foot portion\nmodule foot_upper() {\n    hull() {\n        // Toe box\n        translate([-boot_length/2+20, 0, sole_height+10])\n            sphere(d=boot_width-2);\n        \n        // Mid foot\n        translate([0, 0, sole_height+15])\n            sphere(d=boot_width);\n            \n        // Ankle transition\n        translate([boot_length/2-25, 0, sole_height+20])\n            sphere(d=boot_width-4);\n    }\n}\n\n// Ankle cuff with structural ribs\nmodule ankle_cuff() {\n    difference() {\n        // Main cuff\n        translate([boot_length/2-25, 0, ankle_height-5])\n            cylinder(h=15, d1=boot_width-2, d2=boot_width+4, center=true);\n        \n        // Inner cavity\n        translate([boot_length/2-25, 0, ankle_height-5])\n            cylinder(h=17, d=boot_width-6, center=true);\n            \n        // Front opening\n        rotate([0, 0, 0])\n            translate([boot_length/2-25, boot_width/2-2, ankle_height-5])\n                cube([boot_length/2, 8, 20], center=true);\n    }\n    \n    // Reinforcement ribs\n    for(i=[-1:1]) {\n        rotate([0, 0, i*60])\n            translate([boot_length/2-25, 0, ankle_height+2])\n                cube([boot_width/2, 2, 8], center=true);\n    }\n}\n\n// Lace eyelets\nmodule eyelets() {\n    for(i=[-2:2]) {\n        translate([i*15-15, 0, sole_height+20+i*2])\n            cylinder(h=wall_thickness, d=3, center=true);\n    }\n}\n\n// Side reinforcement panels\nmodule side_panels() {\n    for(side=[-1, 1]) {\n        translate([0, side*(boot_width/2-1), sole_height+15])\n            cube([boot_length-20, wall_thickness, 20], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    sole();\n    \n    difference() {\n        union() {\n            foot_upper();\n            ankle_cuff();\n        }\n        \n        // Hollow interior\n        translate([0, 0, sole_height+wall_thickness])\n            scale([0.8, 0.8, 0.9])\n                foot_upper();\n    }\n    \n    side_panels();\n    eyelets();\n}",
    "renders": true
  },
  {
    "mechanical_component": "bellows",
    "openscad_code": "// Realistic Bellows - Medium Complexity OpenSCAD Model\n// Wall thickness = 2mm, overall size ~110mm long, 45mm diameter\n\n$fn = 50;\n\nmodule bellows_body() {\n    // Main corrugated bellows tube\n    difference() {\n        union() {\n            for(i = [0:6]) {\n                translate([0, 0, 5 + i*12]) {\n                    cylinder(h=8, d1=42, d2=38, center=true);\n                }\n            }\n            // End caps\n            translate([0, 0, -2]) cylinder(h=4, d=44, center=true);\n            translate([0, 0, 94]) cylinder(h=4, d=44, center=true);\n        }\n        \n        // Hollow interior\n        for(i = [-1:7]) {\n            translate([0, 0, 5 + i*12]) {\n                cylinder(h=12, d=38, center=true);\n            }\n        }\n    }\n}\n\nmodule inlet_nozzle() {\n    // Inlet fitting with threaded appearance\n    difference() {\n        union() {\n            // Main nozzle body\n            cylinder(h=20, d=20, center=true);\n            // Thread ridges\n            for(i = [0:4]) {\n                translate([0, 0, -10 + i*4]) {\n                    cylinder(h=2, d=22, center=true);\n                }\n            }\n        }\n        // Central hole\n        cylinder(h=22, d=16, center=true);\n    }\n}\n\nmodule outlet_flange() {\n    // Output flange with bolt holes\n    difference() {\n        union() {\n            // Flange base\n            cylinder(h=6, d=50, center=true);\n            // Raised collar\n            translate([0, 0, 3]) {\n                cylinder(h=4, d=40, center=true);\n            }\n        }\n        \n        // Central hole\n        cylinder(h=8, d=30, center=true);\n        \n        // Bolt holes (4x M4)\n        for(angle = [0:90:270]) {\n            rotate([0, 0, angle]) {\n                translate([20, 0, 0]) {\n                    cylinder(h=8, d=4.5, center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule handle_mount() {\n    // Handle mounting bracket\n    difference() {\n        union() {\n            // Base plate\n            cube([30, 8, 4], center=true);\n            // Support ribs\n            translate([0, 0, -3]) {\n                cube([26, 4, 6], center=true);\n            }\n        }\n        // Mounting holes\n        for(x = [-10:20:10]) {\n            translate([x, 0, 0]) {\n                cylinder(h=5, d=3.5, center=true);\n            }\n        }\n    }\n}\n\nmodule operating_handle() {\n    // Pivoting handle assembly\n    rotate([0, 90, 0]) {\n        difference() {\n            union() {\n                // Handle rod\n                cylinder(h=60, d=8, center=true);\n                // Grip end\n                translate([0, 30, 0]) {\n                    sphere(d=12);\n                }\n                // Pivot boss\n                translate([0, -30, 0]) {\n                    cylinder(h=12, d=14, center=true);\n                }\n            }\n            // Pivot hole\n            translate([0, -30, 0]) {\n                cylinder(h=14, d=6, center=true);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    bellows_body();\n    \n    // Inlet at bottom\n    translate([0, 0, -6]) {\n        inlet_nozzle();\n    }\n    \n    // Outlet at top\n    translate([0, 0, 98]) {\n        outlet_flange();\n    }\n    \n    // Handle mount on side\n    translate([26, 0, 45]) {\n        handle_mount();\n    }\n    \n    // Operating handle\n    translate([26, 0, 50]) {\n        operating_handle();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "baffle",
    "openscad_code": "// Realistic 3D-printable baffle mechanical component\n// Size: 100 mm diameter, 15 mm thick\n// Wall thickness: 2 mm\n// Central flow aperture: 40 mm diameter\n// Six radial stiffening ribs\n// Flange mounting holes M4 on 80 mm PCD\n\nmodule baffle() {\n    // Overall disk body\n    difference() {\n        cylinder(h = 15, d = 100, $fn = 60);        // main disk\n        \n        // Central circular flow opening\n        translate([0, 0, -1])\n            cylinder(h = 17, d = 40, $fn = 60);\n        \n        // Top chamfer for flow direction indication\n        translate([0, 0, 14])\n            cylinder(h1 = 1, h2 = 0, d1 = 100, d2 = 96, $fn = 60);\n    }\n    \n    // Radial stiffening ribs (6×)\n    for (a = [0:60:359]) {\n        rotate([0, 0, a])\n            translate([30 - 1, -3, 0])\n                cube([20, 6, 15], center = false);\n    }\n    \n    // Mounting flange ring\n    difference() {\n        translate([0, 0, 0])\n            cylinder(h = 4, d = 90, $fn = 60);\n        translate([0, 0, -1])\n            cylinder(h = 6, d = 80, $fn = 60);\n    }\n    \n    // Six M4 mounting holes on 80 mm PCD\n    for (a = [0:60:359]) {\n        rotate([0, 0, a])\n            translate([40, 0, -1])\n                cylinder(h = 6, d = 4.5, $fn = 16);\n    }\n    \n    // Identification tag emboss\n    translate([0, 35, 15])\n        cube([25, 8, 1], center = true);\n}\n\nbaffle();",
    "renders": true
  },
  {
    "mechanical_component": "strut",
    "openscad_code": "// OpenSCAD Strut / Furniture Support Leg\n// Medium complexity, realistic style\n// Wall thickness ≈2 mm throughout\n\n$fn = 36;           // Smooth curves\nwall = 2;           // 3D-print-friendly wall thickness\nstrut_h = 120;      // Overall height\nstrut_w = 40;       // Base width\nstrut_d = 40;       // Base depth\ntop_w = 25;         // Top width (for taper)\ntop_d = 25;         // Top depth (for taper)\nboss_h = 10;        // Height of mounting boss\nboss_d = 16;        // Diameter of boss\nbolt_d = 5;         // M5 clearance hole\n\nmodule tapered_box(h, bw, bd, tw, td) {\n    // Create a tapered hollow box by linear_extrude + scale\n    difference() {\n        linear_extrude(height = h, scale = [tw/bw, td/bd], center = false)\n            offset(r = wall, $fn = 4)\n                square([bw, bd], center = true);\n        linear_extrude(height = h, scale = [(tw-2*wall)/(bw-2*wall), (td-2*wall)/(bd-2*wall)], center = false)\n            offset(delta = -wall, $fn = 4)\n                square([bw-2*wall, bd-2*wall], center = true);\n    }\n}\n\nmodule mounting_boss() {\n    // Top mounting boss with M5 clearance hole\n    difference() {\n        cylinder(h = boss_h, d = boss_d, $fn = 32);\n        translate([0, 0, -0.1])\n            cylinder(h = boss_h + 0.2, d = bolt_d, $fn = 32);\n    }\n}\n\nmodule rib_set(n) {\n    // Internal reinforcing ribs along the length\n    for (i = [1 : n-1]) {\n        translate([0, 0, i * strut_h / n])\n            rotate([0, 0, 45])\n                cube([strut_w * 0.9, wall, strut_h / n * 0.4], center = true);\n    }\n}\n\nmodule foot_pad() {\n    // Rubber-like foot pad at the bottom\n    difference() {\n        translate([0, 0, -1.5])\n            cylinder(h = 3, d1 = strut_w + 2, d2 = strut_w, $fn = 32);\n        translate([0, 0, -2])\n            cylinder(h = 4, d = strut_w - 2*wall, $fn = 32);\n    }\n}\n\n// Assembly\nunion() {\n    // Main hollow tapered strut body\n    tapered_box(strut_h, strut_w, strut_d, top_w, top_d);\n\n    // Mounting boss on top\n    translate([0, 0, strut_h])\n        mounting_boss();\n\n    // Internal ribs for stiffness\n    rib_set(4);\n\n    // Foot pad\n    foot_pad();\n}",
    "renders": true
  },
  {
    "mechanical_component": "bracket",
    "openscad_code": "// Realistic L-shaped bracket for shelving\n// Overall size: 100mm x 100mm x 20mm depth\n\n// Parameters\n$fn=30;\nwall_thickness=2;\nbase_size=[100,100,20];\nbracket_thickness=20;\nbolt_diameter=6;\nbolt_head_diameter=11;\nbolt_head_depth=4;\n\n// Main bracket body\nmodule bracket_body(){\n    // Base plate\n    translate([0,0,0])\n    cube([base_size[0],base_size[1],wall_thickness], center=false);\n    \n    // Vertical plate\n    translate([0,base_size[1]-wall_thickness,0])\n    cube([base_size[0],wall_thickness,bracket_thickness], center=false);\n    \n    // Side support gussets\n    for(i=[0.2,0.4,0.6,0.8]){\n        translate([base_size[0]*i-5,0,wall_thickness])\n        rotate([0,45,0])\n        cube([wall_thickness,20,14.14], center=true);\n    }\n}\n\n// Rounded corners for better printing and strength\nmodule rounded_corners(){\n    // Bottom corners\n    translate([wall_thickness,wall_thickness,wall_thickness])\n    sphere(r=wall_thickness);\n    translate([base_size[0]-wall_thickness,wall_thickness,wall_thickness])\n    sphere(r=wall_thickness);\n    translate([wall_thickness,base_size[1]-wall_thickness,wall_thickness])\n    sphere(r=wall_thickness);\n    translate([base_size[0]-wall_thickness,base_size[1]-wall_thickness,wall_thickness])\n    sphere(r=wall_thickness);\n}\n\n// Mounting holes\nmodule mounting_holes(){\n    // Horizontal plate holes (3 holes)\n    for(pos=[25,50,75]){\n        translate([pos,base_size[1]-50,wall_thickness/2])\n        cylinder(h=wall_thickness+1, d=bolt_diameter, $fn=16);\n        translate([pos,base_size[1]-50,0])\n        cylinder(h=bolt_head_depth, d=bolt_head_diameter, $fn=16);\n    }\n    \n    // Vertical plate holes (2 holes)\n    for(pos=[30,70]){\n        translate([pos,base_size[1]-wall_thickness,wall_thickness+bolt_head_depth]){\n            rotate([90,0,0])\n            cylinder(h=wall_thickness+1, d=bolt_diameter, $fn=16);\n        }\n        translate([pos,base_size[1]-wall_thickness*2,wall_thickness]){\n            rotate([90,0,0])\n            cylinder(h=bolt_head_depth, d=bolt_head_diameter, $fn=16);\n        }\n    }\n}\n\n// Reinforcement ribs\nmodule reinforcement_ribs(){\n    // Vertical ribs\n    for(pos=[20,40,60,80]){\n        translate([pos,0,wall_thickness])\n        cube([wall_thickness,base_size[1],bracket_thickness-wall_thickness]);\n    }\n    \n    // Horizontal ribs\n    for(pos=[30,70]){\n        translate([0,pos,wall_thickness])\n        cube([base_size[0],wall_thickness,bracket_thickness-wall_thickness]);\n    }\n}\n\n// Main assembly\nunion(){\n    bracket_body();\n    rounded_corners();\n    reinforcement_ribs();\n}\n\ndifference(){\n    union(){\n        bracket_body();\n        rounded_corners();\n        reinforcement_ribs();\n    }\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "mechanical_component": "mount",
    "openscad_code": "// Adjustable Monitor Mount Arm\n// Medium complexity realistic style with 3D-printable joints and cable management\n\n// Parameters\nwall = 2;           // wall thickness for 3D printing\nbase_r = 25;        // base radius\nbase_h = 6;         // base height\npost_h = 60;        // vertical post height\npost_r = 8;         // vertical post radius\narm_len = 90;       // horizontal arm length\narm_w = 15;         // arm width\narm_h = 12;         // arm height\nknob_r = 6;         // tightening knob radius\nknob_h = 4;\nplate_w = 75;       // VESA plate width\nplate_h = 75;       // VESA plate height\nplate_t = 3;        // plate thickness\nscrew_d = 4;        // VESA screw diameter\nscrew_spacing = 50; // VESA 50mm spacing\n\n// Utility module for rounded box\nmodule rounded_box(sx, sy, sz, r) {\n    hull() {\n        translate([ r,  r, 0]) cylinder(r=r, h=sz);\n        translate([sx-r,  r, 0]) cylinder(r=r, h=sz);\n        translate([sx-r, sy-r, 0]) cylinder(r=r, h=sz);\n        translate([ r, sy-r, 0]) cylinder(r=r, h=sz);\n    }\n}\n\n// Base with screw holes\nmodule base() {\n    difference() {\n        cylinder(r=base_r, h=base_h, $fn=60);\n        // Center hole for bolt\n        cylinder(r=5, h=base_h, $fn=32);\n        // Four countersunk holes for desk mounting\n        for(a=[0, 90, 180, 270]) {\n            rotate([0,0,a])\n                translate([base_r-8, 0, -1])\n                    cylinder(r=3.5, h=base_h+2, $fn=16);\n        }\n    }\n    // Cable notch\n    translate([-base_r/2, -wall, base_h-wall])\n        cube([base_r, wall*2, wall]);\n}\n\n// Vertical post with height adjustment slots\nmodule vertical_post() {\n    difference() {\n        cylinder(r=post_r, h=post_h, $fn=32);\n        // Height adjustment slots\n        for(i=[1:4]) {\n            translate([0, 0, i*post_h/5])\n                rotate([90,0,0])\n                    cylinder(r=5, h=post_r*2, $fn=16);\n        }\n        // Internal channel for cables\n        cylinder(r=post_r-wall, h=post_h, $fn=32);\n    }\n}\n\n// Tightening knob\nmodule knob() {\n    difference() {\n        union() {\n            cylinder(r=knob_r, h=knob_h, $fn=32);\n            translate([0,0,knob_h])\n                cylinder(r=knob_r*0.8, h=knob_h/2, $fn=24);\n        }\n        // Grip pattern\n        for(a=[0:30:330]) {\n            rotate([0,0,a])\n                translate([knob_r-1, -0.5, 0])\n                    cube([2, 1, knob_h+1]);\n        }\n    }\n}\n\n// Horizontal arm with cable channel\nmodule horizontal_arm() {\n    difference() {\n        union() {\n            // Main arm body\n            rounded_box(arm_len, arm_w, arm_h, 3);\n            // Joint collar\n            translate([0, arm_w/2, arm_h/2])\n                rotate([90,0,0])\n                    cylinder(r=post_r+2, h=arm_w+4, $fn=32);\n            // Cable channel cover\n            translate([arm_len/2, arm_w/2, arm_h+1])\n                rounded_box(arm_len-20, arm_w-4, 2, 2);\n        }\n        // Internal cable channel\n        translate([arm_len/2, arm_w/2, arm_h/2])\n            rounded_box(arm_len-10, arm_w-6, arm_h-4, 2);\n        // Knob hole\n        translate([0, arm_w+1, arm_h/2])\n            rotate([90,0,0])\n                cylinder(r=3, h=arm_w+2, $fn=16);\n    }\n}\n\n// VESA mounting plate\nmodule vesa_plate() {\n    difference() {\n        rounded_box(plate_w, plate_h, plate_t, 3);\n        // VESA 75x75 pattern\n        for(x=[-1,1]) {\n            for(y=[-1,1]) {\n                translate([plate_w/2 + x*screw_spacing/2, plate_h/2 + y*screw_spacing/2, -1])\n                    cylinder(r=screw_d/2, h=plate_t+2, $fn=16);\n            }\n        }\n        // Central hole for cable pass-through\n        translate([plate_w/2, plate_h/2, -1])\n            cylinder(r=10, h=plate_t+2, $fn=32);\n    }\n    // Cable clip\n    translate([plate_w/2, plate_h+2, plate_t/2])\n        rotate([90,0,0])\n            difference() {\n                cylinder(r=5, h=10, $fn=16);\n                cylinder(r=3, h=11, $fn=16);\n            }\n}\n\n// Assembly\ntranslate([0,0,base_h]) {\n    base();\n    vertical_post();\n    \n    // First joint\n    translate([0,0,post_h-15])\n        rotate([0,0,45])\n            union() {\n                horizontal_arm();\n                translate([0, arm_w+1, arm_h/2])\n                    rotate([90,0,0])\n                        knob();\n            }\n    \n    // Second joint and VESA plate\n    translate([arm_len*cos(45), arm_len*sin(45), post_h-15])\n        rotate([0,0,45]) {\n            horizontal_arm();\n            translate([arm_len, arm_w/2, arm_h/2])\n                rotate([0,90,0])\n                    vesa_plate();\n            translate([0, arm_w+1, arm_h/2])\n                rotate([90,0,0])\n                    knob();\n        }\n}",
    "renders": true
  },
  {
    "mechanical_component": "isolator",
    "openscad_code": "// Isolator mechanical component - anti-vibration mount\n// Overall dimensions: 80mm diameter x 50mm height\n// 3D printable with 2mm walls and minimal overhangs\n\n$fn = 32;\n\n// Main parameters\nbase_d = 80;\ntop_d = 60;\nheight = 50;\nwall_thk = 2;\nrubber_thk = 15;\nstud_d = 12;\nstud_h = 20;\n\n// Base plate module\nmodule base_plate() {\n    difference() {\n        // Main base disk\n        cylinder(d = base_d, h = 10);\n        \n        // Central hole for rubber isolation\n        cylinder(d = top_d - 10, h = 11);\n        \n        // Mounting holes (4x M6)\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([base_d/2 - 10, 0, -1])\n                    cylinder(d = 6.5, h = 12);\n        }\n        \n        // Weight reduction pockets\n        for(i = [0:3]) {\n            rotate([0, 0, i*90 + 45])\n                translate([base_d/2 - 20, 0, 5])\n                    cube([20, 15, 6], center = true);\n        }\n    }\n}\n\n// Rubber isolation element\nmodule rubber_element() {\n    color(\"darkgray\")\n    difference() {\n        cylinder(d = top_d - 10, h = rubber_thk);\n        \n        // Center hole for stud\n        cylinder(d = stud_d + 2, h = rubber_thk + 1);\n        \n        // Rubber flex grooves\n        for(i = [1:3]) {\n            translate([0, 0, i*rubber_thk/4])\n                cylinder(d = top_d - 10 - i*3, h = 1);\n        }\n    }\n}\n\n// Top plate module\nmodule top_plate() {\n    difference() {\n        cylinder(d = top_d, h = 10);\n        \n        // Central hole for stud access\n        cylinder(d = stud_d, h = 11);\n        \n        // Mounting holes (3x M5)\n        for(i = [0:2]) {\n            rotate([0, 0, i*120])\n                translate([top_d/2 - 8, 0, -1])\n                    cylinder(d = 5.5, h = 12);\n        }\n    }\n}\n\n// Threaded stud\nmodule mounting_stud() {\n    color(\"silver\")\n    union() {\n        // Main threaded portion\n        cylinder(d = stud_d, h = stud_h);\n        \n        // Hex head\n        translate([0, 0, stud_h])\n            cylinder(d = stud_d * 1.5, h = 8, $fn = 6);\n        \n        // Thread relief\n        translate([0, 0, -5])\n            cylinder(d = stud_d - 1, h = 5);\n    }\n}\n\n// Assembly\nunion() {\n    // Base plate\n    base_plate();\n    \n    // Rubber isolation element\n    translate([0, 0, 10])\n        rubber_element();\n    \n    // Top plate\n    translate([0, 0, 10 + rubber_thk])\n        top_plate();\n    \n    // Mounting stud\n    translate([0, 0, 10 + rubber_thk + 10])\n        mounting_stud();\n}\n\n// Optional: Add alignment marks\nmodule alignment_marks() {\n    for(i = [0:7]) {\n        rotate([0, 0, i*45])\n            translate([base_d/2 - 3, -1, 0])\n                cube([2, 2, 1]);\n    }\n}\n\n// Render alignment marks on base\n%translate([0, 0, -0.1])\n    alignment_marks();",
    "renders": true
  },
  {
    "mechanical_component": "damper",
    "openscad_code": "// Medium-complexity realistic damper (shock absorber) for 3D printing\n// Approx. 100 mm total length, 30 mm diameter, 2 mm wall thickness\n\n$fn = 60;\n\nmodule damper() {\n    // Main cylinder body\n    difference() {\n        cylinder(h = 80, d = 30, center = true);\n        cylinder(h = 81, d = 26, center = true);\n    }\n\n    // Top mounting eye\n    translate([0, 0, 40]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 20, d = 20);\n                cylinder(h = 21, d = 8);\n            }\n            // Reinforcement ribs around eye\n            for (i = [0:45:135]) {\n                rotate([0, 0, i]) {\n                    translate([0, 10, -10]) {\n                        cube([2, 10, 20], center = true);\n                    }\n                }\n            }\n        }\n    }\n\n    // Bottom mounting eye\n    translate([0, 0, -40]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 20, d = 20);\n                cylinder(h = 21, d = 8);\n            }\n            // Reinforcement ribs\n            for (i = [0:45:135]) {\n                rotate([0, 0, i]) {\n                    translate([0, 10, -10]) {\n                        cube([2, 10, 20], center = true);\n                    }\n                }\n            }\n        }\n    }\n\n    // Piston rod\n    translate([0, 0, 40]) {\n        cylinder(h = 35, d = 12);\n    }\n    \n    // Rod end cap\n    translate([0, 0, 25]) {\n        difference() {\n            cylinder(h = 10, d = 16);\n            cylinder(h = 11, d = 12);\n        }\n    }\n\n    // Dust boot/bellows\n    difference() {\n        translate([0, 0, 15]) {\n            cylinder(h = 20, d = 28);\n        }\n        translate([0, 0, 15]) {\n            cylinder(h = 21, d = 24);\n        }\n    }\n    \n    // Spring seat on top\n    translate([0, 0, 30]) {\n        difference() {\n            cylinder(h = 5, d = 35);\n            cylinder(h = 6, d = 30);\n        }\n    }\n    \n    // Spring seat on bottom\n    translate([0, 0, -30]) {\n        difference() {\n            cylinder(h = 5, d = 35);\n            cylinder(h = 6, d = 30);\n        }\n    }\n    \n    // Cooling fins\n    for (i = [0:30:330]) {\n        rotate([0, 0, i]) {\n            translate([0, 15, 0]) {\n                cube([2, 8, 60], center = true);\n            }\n        }\n    }\n}\n\ndamper();",
    "renders": true
  },
  {
    "mechanical_component": "reservoir",
    "openscad_code": "// Realistic Reservoir (Medium Complexity)\n// 3D Printable Water Reservoir with structural elements\n\n$fn = 36;  // Smooth curves\n\n// Main dimensions\nbase_length = 80;\nbase_width = 60;\nbase_height = 100;\nwall_thickness = 2;\n\n// Outlet pipe dimensions\npipe_diameter = 12;\npipe_length = 30;\n\n// Support feet\nfoot_height = 8;\nfoot_diameter = 15;\n\n// Mounting brackets\nbracket_width = 8;\nbracket_height = 15;\nbracket_thickness = 3;\n\n// Lid details\nlid_rim_height = 5;\nlid_diameter = 64;\n\nmodule reservoir_body() {\n    difference() {\n        // Main tank body\n        union() {\n            // Base tank\n            cube([base_length, base_width, base_height], center=true);\n            \n            // Top rounded section\n            translate([0, 0, base_height/2 - 5])\n            scale([1, 1, 0.3])\n            sphere(d=base_width);\n        }\n        \n        // Hollow interior\n        cube([base_length-wall_thickness*2, base_width-wall_thickness*2, base_height-wall_thickness], center=true);\n        \n        // Top opening\n        translate([0, 0, base_height/2 + 5])\n        cylinder(h=10, d=lid_diameter);\n    }\n}\n\nmodule outlet_pipe() {\n    // Main outlet pipe\n    translate([base_length/2 + pipe_length/2, 0, -base_height/2 + 20])\n    rotate([0, 90, 0])\n    cylinder(h=pipe_length, d=pipe_diameter);\n    \n    // Pipe flange\n    translate([base_length/2 + 2, 0, -base_height/2 + 20])\n    rotate([0, 90, 0])\n    cylinder(h=4, d=pipe_diameter + 6);\n}\n\nmodule support_feet() {\n    // Four support feet\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (base_length/2 - foot_diameter), y * (base_width/2 - foot_diameter), -base_height/2 - foot_height/2])\n            cylinder(h=foot_height, d=foot_diameter);\n            \n            // Foot pads\n            translate([x * (base_length/2 - foot_diameter), y * (base_width/2 - foot_diameter), -base_height/2 - foot_height - 1])\n            cube([foot_diameter + 4, foot_diameter + 4, 2], center=true);\n        }\n    }\n}\n\nmodule mounting_brackets() {\n    // Side mounting brackets\n    for(side = [-1, 1]) {\n        translate([side * (base_length/2 + bracket_thickness/2), 0, base_height/4])\n        cube([bracket_thickness, bracket_width, bracket_height], center=true);\n        \n        // Bracket holes\n        translate([side * (base_length/2 + bracket_thickness/2 + (side > 0 ? 1 : -1)), 0, base_height/4])\n        cylinder(h=bracket_thickness + 1, d=4);\n    }\n}\n\nmodule level_indicator() {\n    // Sight glass channel\n    translate([base_length/2 - wall_thickness, 0, 0])\n    cube([wall_thickness, 8, base_height - 20], center=true);\n    \n    // Level markings\n    for(h = [-base_height/2 + 15 : 10 : base_height/2 - 15]) {\n        translate([base_length/2 + 2, 0, h])\n        cube([2, 12, 1], center=true);\n    }\n}\n\nmodule lid_assembly() {\n    // Main lid\n    translate([0, 0, base_height/2 + 5])\n    cylinder(h=lid_rim_height, d=lid_diameter);\n    \n    // Lid handle\n    translate([0, 0, base_height/2 + lid_rim_height + 5])\n    cylinder(h=10, d=20);\n    \n    // Handle grip\n    translate([0, 0, base_height/2 + lid_rim_height + 10])\n    sphere(d=15);\n}\n\n// Assembly\nunion() {\n    reservoir_body();\n    outlet_pipe();\n    support_feet();\n    mounting_brackets();\n    level_indicator();\n    lid_assembly();\n}",
    "renders": true
  },
  {
    "mechanical_component": "tank",
    "openscad_code": "// Tank Track Module\nmodule track_segment(length, width, height, segment_count) {\n    for (i = [0:segment_count-1]) {\n        translate([i * (length/segment_count), 0, 0])\n            cube([length/segment_count - 1, width, height], center = true);\n    }\n}\n\n// Road Wheel Module\nmodule road_wheel(radius, width, spoke_count) {\n    difference() {\n        cylinder(h = width, r = radius, center = true);\n        \n        // Spoke holes\n        for (i = [0:spoke_count-1]) {\n            rotate([0, 0, i * (360/spoke_count)])\n                translate([radius/2, 0, 0])\n                    cylinder(h = width + 1, r = 4, center = true);\n        }\n        \n        // Center hub hole\n        cylinder(h = width + 1, r = 6, center = true);\n    }\n}\n\n// Main Tank Body\nmodule tank_body() {\n    difference() {\n        // Main hull\n        hull() {\n            translate([-30, -20, 10])\n                cube([60, 40, 20], center = true);\n            translate([-25, -18, 20])\n                cube([50, 36, 15], center = true);\n        }\n        \n        // Driver hatch\n        translate([-20, 0, 25])\n            cube([15, 12, 3], center = true);\n            \n        // Engine deck grills\n        for (i = [0:3]) {\n            translate([15 + i*5, -15, 25])\n                cube([3, 25, 2], center = true);\n        }\n    }\n}\n\n// Turret Module\nmodule turret() {\n    rotate([0, 0, 45]) {\n        difference() {\n            // Turret base\n            cylinder(h = 15, r = 20, center = true);\n            \n            // Turret ring\n            translate([0, 0, -8])\n                cylinder(h = 20, r = 10, center = true);\n                \n            // Commander cupola\n            translate([0, 15, 5])\n                rotate([90, 0, 0])\n                    cylinder(h = 8, r = 5, center = true);\n        }\n        \n        // Main gun\n        translate([0, 25, 0])\n            rotate([0, 0, 0])\n                cylinder(h = 50, r1 = 3, r2 = 2, center = true);\n                \n        // Gun mantlet\n        translate([0, 20, 0])\n            cube([15, 8, 8], center = true);\n    }\n}\n\n// Left Track Assembly\ntranslate([-35, -25, 5]) {\n    // Track segments\n    track_segment(60, 10, 4, 20);\n    \n    // Road wheels\n    for (i = [0:4]) {\n        translate([i * 12 - 24, 0, -8])\n            road_wheel(8, 4, 6);\n    }\n    \n    // Drive sprocket\n    translate([-30, 0, -8])\n        road_wheel(10, 4, 8);\n        \n    // Idler wheel\n    translate([30, 0, -8])\n        road_wheel(8, 4, 6);\n}\n\n// Right Track Assembly\ntranslate([-35, 25, 5]) {\n    // Track segments\n    track_segment(60, 10, 4, 20);\n    \n    // Road wheels\n    for (i = [0:4]) {\n        translate([i * 12 - 24, 0, -8])\n            road_wheel(8, 4, 6);\n    }\n    \n    // Drive sprocket\n    translate([-30, 0, -8])\n        road_wheel(10, 4, 8);\n        \n    // Idler wheel\n    translate([30, 0, -8])\n        road_wheel(8, 4, 6);\n}\n\n// Main hull\ntank_body();\n\n// Turret assembly\ntranslate([0, 0, 25]) {\n    turret();\n}\n\n// Additional details\n// Front armor slope\ntranslate([-30, 0, 15])\n    rotate([0, -30, 0])\n        cube([5, 40, 20], center = true);\n\n// Rear tow hooks\ntranslate([28, -15, 5])\n    cylinder(h = 2, r = 3);\ntranslate([28, 15, 5])\n    cylinder(h = 2, r = 3);\n\n// Engine exhaust\ntranslate([25, -8, 25])\n    cylinder(h = 8, r = 2);\ntranslate([25, 8, 25])\n    cylinder(h = 8, r = 2);\n\n// Storage boxes\ntranslate([10, -18, 25])\n    cube([15, 4, 8], center = true);\ntranslate([10, 18, 25])\n    cube([15, 4, 8], center = true);",
    "renders": true
  },
  {
    "mechanical_component": "manifold",
    "openscad_code": "// Manifold Office Chair - Medium complexity 3D printable model\n// Overall dimensions: ~120mm height, 100mm width, 100mm depth\n\n// Base module for chair legs\nmodule chair_base() {\n    difference() {\n        // Central hub\n        cylinder(h=15, r=20, $fn=32);\n        \n        // Countersink holes for screws\n        for(i=[0:3]) {\n            rotate([0, 0, i*90]) \n                translate([15, 0, 10]) \n                    cylinder(h=10, r=3, $fn=16);\n        }\n    }\n}\n\n// 5-star leg assembly\nmodule leg_assembly() {\n    union() {\n        chair_base();\n        \n        // 5 legs with wheels\n        for(i=[0:4]) {\n            rotate([0, 0, i*72]) {\n                // Leg strut\n                translate([0, 0, 7.5]) \n                    cube([60, 10, 5], center=true);\n                \n                // Wheel mount\n                translate([60, 0, 0]) \n                    rotate([90, 0, 0]) \n                        cylinder(h=8, r=6, $fn=16);\n                \n                // Wheel\n                translate([60, 0, -8]) \n                    rotate([0, 90, 0]) \n                        cylinder(h=6, r=10, center=true, $fn=16);\n            }\n        }\n    }\n}\n\n// Gas cylinder\nmodule gas_cylinder() {\n    union() {\n        // Outer cylinder\n        cylinder(h=40, r=8, $fn=32);\n        \n        // Inner piston\n        translate([0, 0, 40]) \n            cylinder(h=20, r=5, $fn=32);\n        \n        // Top mounting plate\n        translate([0, 0, 60]) \n            cylinder(h=3, r=15, $fn=32);\n    }\n}\n\n// Seat structure\nmodule seat_structure() {\n    difference() {\n        // Main seat pan\n        translate([0, 0, 65]) \n            cube([100, 100, 10], center=true);\n        \n        // Lightening holes\n        for(x=[-30, 0, 30]) {\n            for(y=[-30, 0, 30]) {\n                translate([x, y, 70]) \n                    cylinder(h=15, r=8, $fn=16);\n            }\n        }\n    }\n}\n\n// Seat cushion\nmodule seat_cushion() {\n    // Main cushion\n    translate([0, 0, 80]) \n        cube([90, 90, 15], center=true);\n    \n    // Rounded edges\n    translate([0, 0, 87.5]) \n        minkowski() {\n            cube([85, 85, 0.1], center=true);\n            cylinder(h=0.1, r=5, $fn=32);\n        }\n}\n\n// Backrest support\nmodule backrest_support() {\n    // Vertical post\n    translate([0, -40, 90]) \n        cube([8, 8, 60], center=true);\n    \n    // Horizontal support\n    translate([0, -40, 120]) \n        cube([80, 8, 8], center=true);\n}\n\n// Backrest\nmodule backrest() {\n    union() {\n        // Main backrest frame\n        translate([0, -40, 135]) \n            cube([80, 10, 50], center=true);\n        \n        // Lumbar support curve\n        translate([0, -35, 120]) \n            scale([1, 0.8, 1]) \n                sphere(r=30, $fn=32);\n    }\n}\n\n// Armrest assembly\nmodule armrest(side) {\n    translate([side*45, 0, 85]) {\n        union() {\n            // Vertical support\n            cube([8, 30, 20], center=true);\n            \n            // Horizontal armrest\n            translate([0, 15, 10]) \n                cube([8, 40, 5], center=true);\n            \n            // End cap\n            translate([0, 35, 10]) \n                sphere(r=5, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base components\n    leg_assembly();\n    gas_cylinder();\n    seat_structure();\n    seat_cushion();\n    \n    // Backrest assembly\n    backrest_support();\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n}",
    "renders": true
  },
  {
    "mechanical_component": "adapter",
    "openscad_code": "// Motor mount adapter (NEMA-17 to 40 mm face mount)\n// Converts standard NEMA-17 stepper pattern to 40 mm bolt circle\n// Overall size ~60 mm diameter, 12 mm thick\n\n$fn = 60;  // Good balance between detail and render time\n\n// Main parameters\nadapter_od = 60;       // Outer diameter of adapter plate\nadapter_th = 12;       // Total thickness\ncenter_bore = 22;      // Center hole for motor shaft\nnema_bcd = 31;         // NEMA-17 bolt circle diameter\nnema_hole = 3.2;       // NEMA-17 mounting hole diameter\nnema_screw = 5.5;      // Counter-bore diameter for screw heads\nnema_depth = 6;        // Counter-bore depth\nmount_bcd = 40;        // Target mount bolt circle diameter\nmount_hole = 4.2;      // Target mount hole diameter\nmount_screw = 7.5;     // Counter-sink diameter for mount screws\nmount_depth = 4;       // Counter-sink depth\nwall_thick = 2.2;      // Minimum wall thickness for printing\n\n// Main adapter body\ndifference() {\n    // Base cylinder\n    cylinder(d = adapter_od, h = adapter_th);\n    \n    // Center shaft clearance hole\n    translate([0, 0, -1])\n        cylinder(d = center_bore, h = adapter_th + 2);\n    \n    // NEMA-17 mounting holes (4x at 90 deg)\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n            translate([nema_bcd/2, 0, -1])\n                cylinder(d = nema_hole, h = adapter_th + 2);\n        \n        // Counter-bores for NEMA screws\n        rotate([0, 0, a])\n            translate([nema_bcd/2, 0, adapter_th - nema_depth])\n                cylinder(d = nema_screw, h = nema_depth + 1);\n    }\n    \n    // Mounting holes for target pattern (4x at 45 deg offset)\n    for (a = [45:90:315]) {\n        rotate([0, 0, a])\n            translate([mount_bcd/2, 0, -1])\n                cylinder(d = mount_hole, h = adapter_th + 2);\n        \n        // Counter-sinks for mount screws\n        rotate([0, 0, a])\n            translate([mount_bcd/2, 0, 0])\n                cylinder(d1 = mount_screw, d2 = mount_hole, h = mount_depth + 1);\n    }\n}\n\n// Structural ribs for stiffness\nmodule rib(angle, length) {\n    rotate([0, 0, angle])\n        translate([0, -wall_thick/2, 0])\n            cube([length, wall_thick, adapter_th], center = false);\n}\n\n// Add 4 radial ribs between hole patterns\nunion() {\n    for (a = [22.5:90:337.5]) {\n        rib(a, adapter_od/2 - mount_bcd/2 - 3);\n    }\n}\n\n// Alignment pin boss on mount side\ntranslate([0, mount_bcd/2 - 8, 0])\n    cylinder(d = 6, h = adapter_th);\ndifference() {\n    translate([0, mount_bcd/2 - 8, 0])\n        cylinder(d = 6, h = adapter_th);\n    translate([0, mount_bcd/2 - 8, adapter_th - 4])\n        cylinder(d = 3, h = 5);\n}\n\n// Chamfer edges for better printability\nmodule chamfer_edge(r) {\n    difference() {\n        cylinder(d = adapter_od, h = adapter_th);\n        translate([0, 0, -r/2])\n            cylinder(d = adapter_od - 2*r, h = adapter_th + r);\n    }\n}\n\n// Apply chamfers to top and bottom edges\ntranslate([0, 0, 0])\n    chamfer_edge(1.5);",
    "renders": true
  },
  {
    "mechanical_component": "reducer",
    "openscad_code": "// Reducer mechanical component - realistic style, medium complexity\n// A compact inline gearbox reducer with mounting flanges and keyways\n\n// Main parameters\n$fn = 32;\nwall_thickness = 2.2;\nbody_length = 60;\nbody_diameter = 50;\nflange_diameter = 80;\nflange_thickness = 6;\nbearing_boss = 8;\nshaft_diameter_small = 12;\nshaft_diameter_large = 20;\nkeyway_width = 4;\nkeyway_depth = 2.2;\nmount_bolt_circle = 65;\nmount_bolt_diameter = 5.5;\nmount_bolt_count = 4;\n\nmodule main_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h=body_length, d=body_diameter, center=true);\n        \n        // Hollow center - remove inner cylinder\n        translate([0,0,-body_length/2 - 0.1])\n        cylinder(h=body_length + 0.2, d=body_diameter - 2*wall_thickness, center=false);\n    }\n}\n\nmodule flange(end) {\n    translate([0,0,end * body_length/2])\n    difference() {\n        // Flange disk\n        cylinder(h=flange_thickness, d=flange_diameter);\n        \n        // Counterbore for bearing boss\n        cylinder(h=flange_thickness, d=body_diameter + 2, center=false);\n        \n        // Mounting holes\n        for(i=[0:mount_bolt_count-1]) {\n            rotate([0,0,i*360/mount_bolt_count])\n            translate([mount_bolt_circle/2,0,-0.1])\n            cylinder(h=flange_thickness + 0.2, d=mount_bolt_diameter);\n        }\n    }\n    \n    // Bearing boss\n    translate([0,0,end * (body_length/2 + flange_thickness)])\n    cylinder(h=bearing_boss, d=shaft_diameter_large + 2*wall_thickness);\n}\n\nmodule shaft(diameter, length, keyway=true) {\n    difference() {\n        cylinder(h=length, d=diameter);\n        if(keyway) {\n            // Keyway slot\n            translate([diameter/2 - keyway_depth, -keyway_width/2, -0.1])\n            cube([keyway_depth + 0.2, keyway_width, length + 0.2]);\n        }\n    }\n}\n\nmodule cooling_fins() {\n    // Add cooling fins around the body\n    for(i=[0:11]) {\n        rotate([0,0,i*30])\n        translate([body_diameter/2 - 1, -2, -body_length/2 + 5])\n        cube([3,4,body_length - 10]);\n    }\n}\n\nmodule mounting_feet() {\n    // Add mounting feet at bottom\n    translate([0,-body_diameter/2 - 5,0])\n    difference() {\n        // Main foot block\n        cube([body_length - 10, 10, 8], center=true);\n        \n        // Mounting slots\n        translate([-20,0,-3])\n        cube([8,6,8]);\n        translate([20,0,-3])\n        cube([8,6,8]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main reducer body\n    main_body();\n    \n    // Cooling fins\n    cooling_fins();\n    \n    // Input flange (small shaft side)\n    flange(-1);\n    translate([0,0,-body_length/2 - flange_thickness - bearing_boss])\n    shaft(shaft_diameter_small, 25);\n    \n    // Output flange (large shaft side)\n    flange(1);\n    translate([0,0,body_length/2 + flange_thickness + bearing_boss])\n    shaft(shaft_diameter_large, 30);\n    \n    // Mounting feet\n    mounting_feet();\n}",
    "renders": true
  },
  {
    "mechanical_component": "expander",
    "openscad_code": "// Expandable Shelf Unit - Mechanical Expander\n// Overall dimensions: 100mm wide x 150mm tall x 80mm deep when collapsed\n\nmodule support_leg(height = 20, width = 8, depth = 6) {\n    // Main leg body with rounded edges\n    difference() {\n        translate([0, -depth/2, 0])\n            minkowski() {\n                cube([width, depth, height], center = false);\n                cylinder(h = 0.5, r = 1.5, $fn = 16);\n            }\n        \n        // Cable routing hole\n        translate([width/2, depth/2, height - 8])\n            rotate([0, 90, 0])\n                cylinder(h = width + 1, r = 1.5, $fn = 16);\n    }\n}\n\nmodule sliding_joint(width = 10, height = 15, depth = 4) {\n    // Main joint body\n    difference() {\n        cube([width, depth, height], center = true);\n        \n        // Slot for sliding mechanism\n        translate([0, 0, 0])\n            cube([width - 4, depth + 2, 3], center = true);\n        \n        // Mounting holes\n        for(x = [-width/3, width/3])\n            translate([x, -depth/2 - 1, height/4])\n                rotate([90, 0, 0])\n                    cylinder(h = depth + 2, r = 1.5, $fn = 16);\n    }\n}\n\nmodule shelf_panel(width = 100, depth = 80, thickness = 3) {\n    // Main shelf with reinforcing ribs\n    difference() {\n        // Main shelf\n        cube([width, depth, thickness], center = true);\n        \n        // Weight reduction pattern\n        for(x = [-width/2 + 15 : 20 : width/2 - 15])\n            for(y = [-depth/2 + 15 : 20 : depth/2 - 15])\n                translate([x, y, 0])\n                    cube([10, 10, thickness + 1], center = true);\n        \n        // Cable management holes\n        translate([0, depth/2 - 10, 0])\n            rotate([90, 0, 0])\n                cylinder(h = thickness + 2, r = 3, $fn = 16);\n    }\n    \n    // Reinforcement ribs\n    for(side = [-1, 1]) {\n        translate([width/2 * side, 0, thickness/2 + 2])\n            cube([2, depth - 10, 4], center = true);\n    }\n}\n\nmodule expandable_frame() {\n    // Left frame assembly\n    translate([-40, 0, 0]) {\n        // Legs\n        for(side = [-1, 1]) {\n            translate([0, side * 30, 0])\n                support_leg(height = 120);\n        }\n        \n        // Connecting rail\n        translate([4, 0, 60])\n            rotate([90, 0, 0])\n                cube([2, 60, 80]);\n        \n        // Sliding joints\n        for(z = [20, 40, 60, 80, 100]) {\n            translate([4, 0, z])\n                sliding_joint();\n        }\n    }\n    \n    // Right frame assembly\n    translate([40, 0, 0]) {\n        mirror([1, 0, 0]) {\n            // Legs\n            for(side = [-1, 1]) {\n                translate([0, side * 30, 0])\n                    support_leg(height = 120);\n            }\n            \n            // Connecting rail\n            translate([4, 0, 60])\n                rotate([90, 0, 0])\n                    cube([2, 60, 80]);\n            \n            // Sliding joints\n            for(z = [20, 40, 60, 80, 100]) {\n                translate([4, 0, z])\n                    sliding_joint();\n            }\n        }\n    }\n}\n\nmodule expansion_mechanism() {\n    // Telescoping tubes\n    difference() {\n        // Outer tube\n        translate([0, 0, 30])\n            rotate([90, 0, 0])\n                cylinder(h = 80, r = 4, $fn = 20);\n        \n        // Inner tube\n        translate([0, 0, 30])\n            rotate([90, 0, 0])\n                cylinder(h = 82, r = 3, $fn = 20);\n    }\n    \n    // Locking pins\n    for(angle = [0 : 45 : 135]) {\n        rotate([0, 0, angle])\n            translate([0, 40, 30])\n                cylinder(h = 10, r = 1.5, $fn = 8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Frame structure\n    expandable_frame();\n    \n    // Shelves\n    for(z = [25, 45, 65, 85, 105]) {\n        translate([0, 0, z])\n            shelf_panel(width = 90, depth = 70);\n    }\n    \n    // Expansion mechanism at center\n    expansion_mechanism();\n    \n    // Base stabilizers\n    for(side = [-1, 1]) {\n        translate([0, side * 40, 0])\n            cube([90, 5, 3], center = true);\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "coupler",
    "openscad_code": "// Shaft-to-Shaft Rigid Coupler (medium complexity, realistic style)\n// Connects two 12 mm motor shafts with set-screws and keyways\n\n// Overall dimensions\ncoupler_length = 60;        // Total length\nouter_diameter = 32;        // Outer body diameter\nwall_thickness = 2.5;       // Wall thickness for 3D printing\nshaft_diameter = 12;        // Shaft bore diameter\nkey_width = 4;              // Keyway width\nkey_depth = 2;              // Keyway depth\nsetscrew_diameter = 3;      // M3 set-screw\nsetscrew_length = 8;        // Set-screw engagement\nflange_diameter = 40;       // End-flange diameter\nflange_thickness = 4;       // Flange thickness\n\n$fn = 50;                   // Smooth curves\n\nmodule coupler_body() {\n    difference() {\n        // Main body cylinder\n        cylinder(h = coupler_length, d = outer_diameter);\n\n        // Central bore for both shafts\n        translate([0, 0, -1])\n            cylinder(h = coupler_length + 2, d = shaft_diameter);\n\n        // Keyways – one per side, offset 90°\n        translate([-key_width/2, -outer_diameter/2, 0])\n            cube([key_width, outer_diameter, coupler_length/2 + key_depth]);\n        rotate([0, 0, 90])\n            translate([-key_width/2, -outer_diameter/2, coupler_length/2 - key_depth])\n                cube([key_width, outer_diameter, coupler_length/2 + key_depth]);\n\n        // Set-screw holes (4 total, 2 per shaft)\n        for (z = [coupler_length/4, 3*coupler_length/4])\n            for (a = [0, 90])\n                rotate([0, 0, a])\n                    translate([outer_diameter/2, 0, z])\n                        rotate([0, 90, 0])\n                            cylinder(h = wall_thickness + 2, d = setscrew_diameter + 0.2);\n    }\n}\n\nmodule end_flanges() {\n    // Add small flanges at both ends for grip & alignment\n    for (z = [0, coupler_length - flange_thickness]) {\n        translate([0, 0, z])\n            cylinder(h = flange_thickness, d = flange_diameter);\n    }\n}\n\nmodule wrench_flats() {\n    // Hexagonal flats for wrench tightening\n    for (z = [coupler_length/2 - 6, coupler_length/2 + 2]) {\n        translate([0, 0, z])\n            cylinder(h = 4, d = outer_diameter + 4, $fn = 6);\n    }\n}\n\n// Assemble the coupler\nunion() {\n    coupler_body();\n    end_flanges();\n    wrench_flats();\n}",
    "renders": true
  },
  {
    "mechanical_component": "spindle",
    "openscad_code": "// Spindle mechanical component - realistic style, medium complexity\n\n// Parameters\nspindle_diameter = 20;\nspindle_length = 100;\nbearing_seat_diameter = 16;\nbearing_seat_length = 10;\nkeyway_width = 6;\nkeyway_depth = 3;\nthread_pitch = 2;\nthread_depth = 1;\nchamfer_size = 1;\nfillet_radius = 1.5;\n\n// Main spindle module\nmodule spindle() {\n    // Main shaft body\n    union() {\n        // Central shaft\n        cylinder(d=spindle_diameter, h=spindle_length, $fn=64);\n        \n        // Bearing seats\n        translate([0, 0, 0])\n            bearing_seat();\n        translate([0, 0, spindle_length - bearing_seat_length])\n            mirror([0, 0, 1]) bearing_seat();\n        \n        // Threaded end\n        translate([0, 0, spindle_length - bearing_seat_length - 20])\n            threaded_section();\n        \n        // Keyway\n        translate([-spindle_diameter/2 - keyway_depth, 0, spindle_length/2 - 15])\n            keyway();\n        \n        // Structural ribs\n        for(i = [1:8]) {\n            rotate([0, 0, i * 45])\n                translate([spindle_diameter/2 - 2, -1.5, spindle_length/2 - 25])\n                    cube([4, 3, 50]);\n        }\n    }\n}\n\n// Bearing seat with chamfer\nmodule bearing_seat() {\n    difference() {\n        cylinder(d=bearing_seat_diameter, h=bearing_seat_length, $fn=32);\n        \n        // Chamfer\n        translate([0, 0, -0.1])\n            cylinder(d1=bearing_seat_diameter - 2*chamfer_size, \n                    d2=bearing_seat_diameter, \n                    h=chamfer_size, $fn=32);\n    }\n}\n\n// Threaded section\nmodule threaded_section() {\n    difference() {\n        cylinder(d=spindle_diameter - 2, h=20, $fn=32);\n        \n        // Thread grooves\n        for(z = [0:thread_pitch:20]) {\n            translate([0, 0, z])\n                cylinder(d1=spindle_diameter - 2 - 2*thread_depth, \n                        d2=spindle_diameter - 2, \n                        h=thread_pitch/2, $fn=32);\n        }\n    }\n}\n\n// Keyway slot\nmodule keyway() {\n    cube([keyway_depth, keyway_width, 30], center=true);\n}\n\n// Center collar\nmodule center_collar() {\n    translate([0, 0, spindle_length/2 - 5])\n        difference() {\n            cylinder(d=spindle_diameter + 8, h=10, $fn=32);\n            cylinder(d=spindle_diameter + 1, h=12, center=true, $fn=32);\n        }\n}\n\n// Assembly\nunion() {\n    spindle();\n    center_collar();\n}",
    "renders": true
  },
  {
    "mechanical_component": "mandrel",
    "openscad_code": "// Realistic Mandrel (work-holding shaft) – Medium complexity\n// Overall length: 100 mm, Ø 20 mm, 2 mm wall thickness\n\n$fn = 36;\n\nmodule shaft_body() {\n    // Main cylindrical tube 2 mm wall\n    difference() {\n        cylinder(h = 100, d = 20);           // outer shell\n        translate([0,0,-0.1])\n            cylinder(h = 100.2, d = 16);     // inner bore\n    }\n}\n\nmodule collet_slots() {\n    // Four axial slots for expansion collet\n    for(i=[0:90:270])\n        rotate([0,0,i])\n            translate([0,8,10])\n                cube([2, 4, 80], center=true);\n}\n\nmodule drive_flat() {\n    // Flat for wrench / chuck jaw\n    translate([-10, -7, 85])\n        cube([20, 14, 15]);\n}\n\nmodule center_drill() {\n    // 60° center drill on each end\n    translate([0,0,-2])\n        cylinder(h = 4, d1 = 0, d2 = 8);\n    translate([0,0,100])\n        mirror([0,0,1])\n        cylinder(h = 4, d1 = 0, d2 = 8);\n}\n\nmodule collar_ring() {\n    // Retaining flange near tail end\n    translate([0,0,90])\n    difference() {\n        cylinder(h = 6, d = 30);\n        translate([0,0,-0.1])\n            cylinder(h = 6.2, d = 16);\n    }\n}\n\nmodule knurl_band() {\n    // Knurled grip band at head end\n    translate([0,0,0])\n    difference() {\n        cylinder(h = 15, d = 24);\n        translate([0,0,-0.1])\n            cylinder(h = 15.2, d = 20);\n    }\n    // Small raised diamonds\n    for(z=[2.5:5:12.5])\n        for(a=[0:30:330])\n            rotate([0,0,a])\n                translate([11,0,z])\n                    scale([1,0.5,1])\n                        sphere(d = 2);\n}\n\nunion() {\n    shaft_body();\n    difference() {\n        union() {\n            collar_ring();\n            knurl_band();\n            drive_flat();\n        }\n        collet_slots();\n    }\n    center_drill();\n}",
    "renders": true
  },
  {
    "mechanical_component": "bolt",
    "openscad_code": "// M8x60 hex-head bolt with washer and nut – 3D-printable, realistic style\n\n// Overall scale factor – final bolt is ~85 mm long\nscale_factor = 1.0;\n\n// ---------- Basic dimensions ----------\nthread_d   = 8 * scale_factor;          // M8 thread\nhead_d     = 13 * scale_factor;         // across flats\nhead_h     = 5.3 * scale_factor;\nshank_l    = 60 * scale_factor;\nwasher_d   = 17 * scale_factor;\nwasher_h   = 1.6 * scale_factor;\nnut_d      = 13 * scale_factor;\nnut_h      = 6.5 * scale_factor;\npitch      = 1.25 * scale_factor;       // M8 coarse pitch\nturns      = 30;                        // thread revolutions\n\n// ---------- Helpers ----------\nmodule hex_prism(d, h) {\n    // hexagon prism with across-flats diameter d\n    for(a=[0:60:300])\n        rotate([0,0,a])\n            translate([d/2,0,h/2])\n                cube([d*0.866,h,d], center=true);   // 0.866 = cos(30°)\n}\n\nmodule washer(d_out, h) {\n    difference() {\n        cylinder(h=h, d=d_out, $fn=60);\n        cylinder(h=h+0.2, d=thread_d+1, center=true, $fn=60);\n    }\n}\n\nmodule threads(d, pitch, turns) {\n    // simple external thread with 60° V-profile\n    for(i=[0:turns-1])\n        translate([0,0,i*pitch])\n            difference() {\n                cylinder(h=pitch*1.1, d1=d+1.5, d2=d-1.5, $fn=6);\n                cylinder(h=pitch*1.1, d=d-1.8, center=true, $fn=6);\n            }\n}\n\n// ---------- Bolt assembly ----------\nmodule bolt() {\n    difference() {\n        union() {\n            // hexagonal head\n            hex_prism(head_d, head_h);\n            // smooth shank\n            translate([0,0,head_h])\n                cylinder(h=shank_l-head_h, d=thread_d, $fn=60);\n            // threaded part\n            translate([0,0,shank_l])\n                threads(thread_d, pitch, turns);\n        }\n        // chamfer on head top\n        translate([0,0,head_h+0.1])\n            cylinder(h=head_h*1.5, d1=0, d2=head_d*1.2, center=true, $fn=60);\n    }\n}\n\nmodule nut() {\n    difference() {\n        hex_prism(nut_d, nut_h);\n        cylinder(h=nut_h+0.2, d=thread_d, center=true, $fn=60);\n    }\n}\n\n// ---------- Assembly ----------\ntranslate([0,0,-1])\n    bolt();\n\ntranslate([0,0,-washer_h-1])\n    washer(washer_d, washer_h);\n\ntranslate([0,0,-washer_h-nut_h-2])\n    nut();",
    "renders": true
  },
  {
    "mechanical_component": "nut",
    "openscad_code": "// Realistic Hex Nut – 3D-printable, medium complexity\n// Nominal size: 50 mm across flats, 25 mm thick\n// All dimensions in mm\n\n$fn = 64;        // smooth curves for printing\npitch = 2.5;     // M16 thread pitch\nthread_depth = 1.25;\nwall = 2;        // printable wall thickness\n\n// overall outer hex dimensions\nA = 50;          // across-flats\nH = 25;          // thickness\nR = A / sqrt(3); // circumscribed radius\n\nmodule hex_profile(h) {\n    difference() {\n        cylinder(h = h, r = R, $fn = 6);\n        // chamfer lower edge to avoid print issues\n        translate([0, 0, -0.1])\n            cylinder(h = h + 0.2, r1 = R - 2, r2 = R, $fn = 6);\n    }\n}\n\nmodule threaded_hole() {\n    // clearance hole plus threaded section\n    difference() {\n        cylinder(h = H, r = 8 + thread_depth, center = true);\n        // six-start partial thread for realism & printability\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([0, 0, -H/2])\n                    linear_extrude(height = H + 0.2, twist = 30)\n                        translate([8, 0, 0])\n                            square([thread_depth, pitch/2], center = true);\n        }\n    }\n}\n\n// top and bottom recessed faces for wrench contact\nmodule wrench_seats() {\n    h = 1.5;\n    difference() {\n        hex_profile(h + 0.1);\n        translate([0, 0, -0.05])\n            scale([0.90, 0.90, 1])\n                hex_profile(h + 0.2);\n    }\n}\n\n// main nut body\ndifference() {\n    hex_profile(H);\n    threaded_hole();\n    // recess top and bottom\n    translate([0, 0, H/2 - 0.75])\n        wrench_seats();\n    translate([0, 0, -H/2 + 0.75])\n        mirror([0, 0, 1])\n            wrench_seats();\n}\n\n// add slight edge fillet for realism\nmodule edge_fillet() {\n    fillet_r = 1;\n    intersection() {\n        hex_profile(H + 2*fillet_r);\n        translate([0, 0, -fillet_r])\n            minkowski() {\n                hex_profile(H);\n                sphere(fillet_r);\n            }\n    }\n}\n\ndifference() {\n    edge_fillet();\n    threaded_hole();\n    translate([0, 0, H/2 - 0.75])\n        wrench_seats();\n    translate([0, 0, -H/2 + 0.75])\n        mirror([0, 0, 1])\n            wrench_seats();\n}",
    "renders": true
  },
  {
    "mechanical_component": "screw",
    "openscad_code": "// Medium-complexity, realistic-style screw for 3D printing\n// Overall length ≈ 90 mm, head diameter ≈ 18 mm, shank Ø ≈ 10 mm\n\nmodule screw() {\n    // ---- HEAD ----\n    // Phillips pan head\n    difference() {\n        // Pan head dome\n        cylinder(h = 4.5, d1 = 18, d2 = 18, $fn = 60);\n\n        // Phillips recess\n        translate([0, 0, 2])\n            rotate([0, 0, 45])\n            linear_extrude(height = 4, center = true) {\n                offset(-0.5)\n                square([8, 2], center = true);\n            }\n    }\n\n    // Head-to-shank fillet (avoids overhang)\n    translate([0, 0, -1])\n        cylinder(h = 2, d1 = 10.5, d2 = 18, $fn = 60);\n\n    // ---- SHANK ----\n    // Threaded section\n    union() {\n        // Main shank cylinder\n        translate([0, 0, -80])\n            cylinder(h = 75, d = 10, $fn = 60);\n\n        // Threads: helical ridge\n        thread_height = 1.0;        // 45° triangular\n        thread_pitch = 3;\n        thread_turns = 75 / thread_pitch;\n\n        for (i = [0 : thread_turns]) {\n            rotate([0, 0, i * 360 * thread_pitch / 10])\n            translate([0, 0, -i * thread_pitch])\n                cylinder(h = thread_height, d1 = 11, d2 = 9, $fn = 30);\n        }\n\n        // Start thread taper\n        translate([0, 0, -85])\n            cylinder(h = 5, d1 = 9, d2 = 11, $fn = 30);\n    }\n}\n\nscrew();",
    "renders": true
  },
  {
    "mechanical_component": "rivet",
    "openscad_code": "// Realistic Rivet - Medium Complexity\n// 3-axis symmetrical, 3D-printable\n\nrivet_diameter = 12;          // main shaft diameter\nrivet_length = 50;            // total length\nhead_diameter = 20;           // head diameter\nhead_thickness = 4;           // head thickness\ntail_diameter = 18;           // tail diameter\ntail_thickness = 3;           // tail thickness\nchamfer = 1.5;                // edge chamfer\ngroove_depth = 1;             // annular groove\ngroove_width = 2;\nshaft_grooves = 3;            // number of grip rings\nwall = 2;                     // minimum printable wall\n\nmodule rivet() {\n    // Main shaft\n    difference() {\n        cylinder(h = rivet_length, d = rivet_diameter, $fn = 64);\n        // Center bore (hollow for material saving)\n        translate([0, 0, wall])\n            cylinder(h = rivet_length - 2*wall, d = rivet_diameter - 2*wall, $fn = 64);\n    }\n\n    // Head (factory head)\n    translate([0, 0, rivet_length])\n    difference() {\n        // Main head volume\n        cylinder(h = head_thickness, d = head_diameter, $fn = 64);\n        // Top chamfer\n        translate([0, 0, head_thickness - chamfer])\n            cylinder(h = chamfer, d1 = head_diameter, d2 = head_diameter - 2*chamfer, $fn = 64);\n        // Counterbore for screwdriver\n        translate([0, 0, 1])\n            cylinder(h = head_thickness - 2, d = head_diameter - 6, $fn = 6);\n    }\n\n    // Tail (formed head)\n    translate([0, 0, 0])\n    difference() {\n        cylinder(h = tail_thickness, d = tail_diameter, $fn = 64);\n        // Bottom chamfer\n        translate([0, 0, 0])\n            cylinder(h = chamfer, d1 = tail_diameter - 2*chamfer, d2 = tail_diameter, $fn = 64);\n    }\n\n    // Grip rings on shaft\n    for(i = [1 : shaft_grooves]) {\n        translate([0, 0, tail_thickness + (i-0.5)*(rivet_length - head_thickness - tail_thickness)/shaft_grooves])\n            difference() {\n                cylinder(h = groove_width, d = rivet_diameter + 1, $fn = 64);\n                cylinder(h = groove_width + 0.2, d = rivet_diameter - 2*groove_depth, $fn = 64);\n            }\n    }\n\n    // Anti-rotation flats on shaft\n    for(a = [0, 120, 240]) {\n        rotate([0, 0, a])\n            translate([rivet_diameter/2 - wall/2, 0, tail_thickness])\n                cube([wall, wall*2, rivet_length - head_thickness - tail_thickness], center = true);\n    }\n}\n\n// Render the rivet\nrivet();",
    "renders": true
  },
  {
    "mechanical_component": "clip",
    "openscad_code": "// Medium-complexity realistic spring clip\n// Overall size: ~90 mm long, 30 mm wide, 15 mm thick\n// Wall thickness: 2 mm for 3D-printability\n\n// Clip parameters\n$fn = 32;\nclip_length = 90;\nclip_width = 30;\nclip_thickness = 15;\nwall = 2;\nspring_radius = 5;\nspring_coils = 4;\nspring_wire = 1.5;\n\n// Main body module\nmodule clip_body() {\n    // Left arm\n    translate([0, -clip_width/2, 0])\n    cube([clip_length*0.45, wall, clip_thickness], center=false);\n\n    // Right arm\n    translate([0, clip_width/2 - wall, 0])\n    cube([clip_length*0.45, wall, clip_thickness], center=false);\n\n    // Bridge connecting the two arms at the rear\n    translate([clip_length*0.45 - wall, 0, 0])\n    cube([wall, clip_width, clip_thickness], center=false);\n\n    // Bottom plate\n    translate([0, 0, -clip_thickness/2 + wall/2])\n    cube([clip_length*0.45, clip_width, wall], center=false);\n\n    // Top plate\n    translate([0, 0, clip_thickness/2 - wall/2])\n    cube([clip_length*0.45, clip_width, wall], center=false);\n}\n\n// Grip pads\nmodule grip_pads() {\n    for (i = [0:1]) {\n        mirror([0, i==0 ? 0 : 1, 0])\n        translate([clip_length*0.15, i==0 ? wall/2 : clip_width - wall*1.5, 0])\n        cube([clip_length*0.1, wall, clip_thickness - wall*2], center=false);\n    }\n}\n\n// Spring module\nmodule spring() {\n    // Central axis\n    translate([clip_length*0.45 - spring_radius, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h=spring_coils*spring_wire*2, r=spring_wire, center=true);\n\n    // Coils\n    for (i = [0:spring_coils-1]) {\n        translate([clip_length*0.45 - spring_radius, 0, -spring_coils*spring_wire + i*spring_wire*2])\n        rotate([90, 0, 0])\n        cylinder(h=spring_wire, r=spring_radius, center=true);\n    }\n}\n\n// Jaw teeth for grip\nmodule teeth() {\n    tooth_width = 2;\n    tooth_height = 1;\n    num_teeth = 5;\n    \n    for (i = [0:num_teeth-1]) {\n        // Bottom teeth\n        translate([i*clip_length*0.1 + 5, 0, -clip_thickness/2 + wall + tooth_height/2])\n        cube([tooth_width, clip_width - wall*2, tooth_height], center=true);\n        \n        // Top teeth\n        translate([i*clip_length*0.1 + 5, 0, clip_thickness/2 - wall - tooth_height/2])\n        cube([tooth_width, clip_width - wall*2, tooth_height], center=true);\n    }\n}\n\n// Mounting holes\nmodule holes() {\n    hole_radius = 3;\n    \n    // Left hole\n    translate([10, clip_width/4, 0])\n    cylinder(h=clip_thickness + 1, r=hole_radius, center=true);\n    \n    // Right hole\n    translate([10, -clip_width/4, 0])\n    cylinder(h=clip_thickness + 1, r=hole_radius, center=true);\n}\n\n// Assembly\nunion() {\n    clip_body();\n    grip_pads();\n    teeth();\n    spring();\n    difference() {\n        // Reinforcement rib\n        translate([clip_length*0.2, 0, 0])\n        cube([clip_length*0.15, wall*2, clip_thickness - wall*2], center=false);\n        \n        // Material relief\n        holes();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "pin",
    "openscad_code": "// Pin mechanical component - realistic style, medium complexity\n// Overall length: 80mm, diameter: 8mm with head and threading\n\n$fn = 32;  // Smooth curves\n\n// Pin module\nmodule pin() {\n    // Pin head (rounded top)\n    translate([0, 0, 78])\n    union() {\n        cylinder(h=4, d1=8, d2=12);\n        translate([0, 0, 4])\n        sphere(d=12);\n    }\n    \n    // Pin shaft with knurled grip section\n    difference() {\n        // Main shaft\n        cylinder(h=60, d=8);\n        \n        // Knurling cuts\n        for (i = [0:4:60]) {\n            rotate([0, 0, 45])\n            translate([4, 0, i])\n            cube([8, 1, 2], center=true);\n        }\n    }\n    \n    // Threaded section\n    difference() {\n        cylinder(h=18, d=8);\n        \n        // Thread grooves\n        for (i = [0:1.5:18]) {\n            rotate([0, 0, i*30])\n            translate([4, 0, i])\n            cube([8, 0.8, 1.5], center=true);\n        }\n    }\n    \n    // Chamfered tip\n    translate([0, 0, -2])\n    cylinder(h=2, d1=8, d2=2);\n}\n\n// Pin with split ring hole\nmodule pin_with_ring() {\n    union() {\n        pin();\n        \n        // Ring attachment hole\n        translate([0, 0, 74])\n        rotate([90, 0, 0])\n        cylinder(h=12, d=4);\n    }\n}\n\n// Render the pin\npin_with_ring();",
    "renders": true
  },
  {
    "mechanical_component": "stud",
    "openscad_code": "// OpenSCAD Stud – 3D-printable, medium-complexity structural stud\n// Overall dimensions: 100 mm tall × 50 mm deep × 70 mm wide\n// Designed for FDM printing (no overhangs > 45°, 2 mm wall thickness)\n\n$fn = 36;          // Smooth curves without excessive facets\n\nmodule stud_post() {\n    // Main hollow stud body\n    difference() {\n        cube([70, 50, 100], center = true);         // Outer shell\n        translate([0, 0, 2])\n            cube([66, 46, 100], center = true);     // Inner void (2 mm walls)\n    }\n}\n\nmodule nail_holes() {\n    // Two vertical nail/screw slots on front face\n    for (z = [-35, 35]) {\n        translate([0, 25.1, z])\n            rotate([90, 0, 0])\n            cylinder(h = 2, d = 6, $fn = 8);        // 6 mm holes, 2 mm deep\n    }\n}\n\nmodule base_flange() {\n    // Wide base flange for stability and screw clearance\n    difference() {\n        translate([0, 0, -52])\n            cube([90, 70, 4], center = true);       // Flange 90×70×4 mm\n        translate([0, 0, -50.1])\n            cube([70, 50, 4.2], center = true);     // Relief to sit flush\n    }\n}\n\nmodule web_braces() {\n    // Internal cross bracing for stiffness (prints without support)\n    for (mir = [0, 1]) {\n        mirror([mir ? 1 : 0, 0, 0]) {\n            translate([0, 0, 0])\n                rotate([45, 0, 0])\n                cube([2, 46, 40], center = true);   // Diagonal brace 2 mm thick\n        }\n    }\n}\n\nmodule chamfers() {\n    // Light top/bottom chamfers for print quality and appearance\n    for (z = [-50, 50]) {\n        translate([0, 0, z])\n            difference() {\n                cube([70, 50, 6], center = true);\n                translate([0, 0, z > 0 ? 3 : -3])\n                    cube([74, 54, 6], center = true);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    stud_post();\n    base_flange();\n    chamfers();\n    difference() {\n        stud_post();\n        web_braces();\n    }\n    nail_holes();\n}",
    "renders": true
  },
  {
    "mechanical_component": "thumbscrew",
    "openscad_code": "// Thumbscrew – realistic, medium complexity\n// Overall height ≈ 60 mm, printable without supports\n\n// Parameters\n$fn = 36;               // Facet resolution\ndia_head = 18;          // Knurled head diameter\nh_head   = 10;          // Knurled head height\ndia_shank = 6;          // Threaded shank diameter\nh_shank  = 30;          // Length of threaded section\npitch    = 2;           // Thread pitch\nwall     = 2;           // Minimum wall thickness\n\n// ---- Knurled thumb head ----\nmodule knurled_head() {\n    difference() {\n        cylinder(h = h_head, d = dia_head, center = true);      // Basic disc\n\n        // Central bore for shank\n        translate([0, 0, 0])\n            cylinder(h = h_head + 1, d = dia_shank, center = true);\n\n        // 24 knurls (grooves) around rim\n        for (a = [0:15:360-15])\n            rotate([0, 0, a])\n                translate([dia_head/2 - 1.5, 0, 0])\n                    cube([3, 1, h_head + 1], center = true);\n    }\n}\n\n// ---- Threaded shank ----\nmodule threaded_shank() {\n    // Core cylinder\n    cylinder(h = h_shank, d = dia_shank);\n\n    // Simple external threads – stack of truncated cones\n    threads = floor(h_shank / pitch);\n    for (i = [0 : threads-1]) {\n        translate([0, 0, i * pitch])\n            cylinder(h = pitch * 0.8, d1 = dia_shank, d2 = dia_shank + 1, $fn = 8);\n    }\n}\n\n// ---- Washer seat under head ----\nmodule washer_seat() {\n    difference() {\n        cylinder(h = 1.5, d = dia_head * 0.7);\n        cylinder(h = 2, d = dia_shank);\n    }\n}\n\n// ---- Assembly ----\nunion() {\n    // Thumb head\n    translate([0, 0, h_shank + h_head/2])\n        knurled_head();\n\n    // Washer seat\n    translate([0, 0, h_shank])\n        washer_seat();\n\n    // Threaded shank\n    translate([0, 0, 0])\n        threaded_shank();\n}",
    "renders": true
  },
  {
    "mechanical_component": "wingnut",
    "openscad_code": "// Wingnut - Realistic style, medium complexity\n// Overall dimensions: ~60mm diameter, ~25mm thick\n\n$fn = 36;\n\nmodule wingnut_body() {\n    // Central hexagonal hub\n    difference() {\n        // Main hexagonal prism\n        cylinder(h = 12, r = 8, $fn = 6);\n        \n        // Threaded hole (M8 thread clearance)\n        cylinder(h = 14, r = 4.5, $fn = 32);\n    }\n}\n\nmodule wings() {\n    // Create two wings with filleted edges\n    for (i = [0, 1]) {\n        rotate([0, 0, i * 180])\n        translate([0, 10, 6]) {\n            // Wing base\n            difference() {\n                union() {\n                    // Main wing body - tapered\n                    hull() {\n                        translate([-15, -5, 0])\n                            cube([30, 10, 3]);\n                        translate([-12, -4, 6])\n                            cube([24, 8, 3]);\n                    }\n                    \n                    // Rounded leading edge\n                    translate([15, 0, 3])\n                        rotate([0, 90, 0])\n                        cylinder(h = 10, r = 3, center = true);\n                }\n                \n                // Lightening holes\n                for (j = [0:1]) {\n                    translate([5 - j * 10, 0, 3])\n                        cylinder(h = 7, r = 2.5, $fn = 16);\n                }\n            }\n            \n            // Grip ridges on top surface\n            for (k = [0:4]) {\n                translate([-12 + k * 6, -4.5, 9])\n                    cube([1.5, 9, 0.8]);\n            }\n        }\n    }\n}\n\nmodule base_flange() {\n    // Lower flange for strength\n    difference() {\n        cylinder(h = 3, r = 12);\n        cylinder(h = 4, r = 4.5);\n    }\n}\n\nmodule chamfers() {\n    // Add chamfers to wing edges\n    for (i = [0, 1]) {\n        rotate([0, 0, i * 180])\n        translate([0, 10, 6]) {\n            // Wing tip chamfer\n            translate([15, 0, 3])\n                rotate([0, 90, 0])\n                cylinder(h = 10, r1 = 3, r2 = 2, center = true);\n                \n            // Wing root fillet\n            translate([0, 5, 0])\n                rotate([90, 0, 0])\n                cylinder(h = 10, r = 2, center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    wingnut_body();\n    wings();\n    base_flange();\n    \n    // Add slight taper to wings for printability\n    translate([0, 0, 12])\n        scale([1, 1, 0.95])\n        wings();\n}\n\n// Add small relief cuts for stress relief\ndifference() {\n    union() {\n        wingnut_body();\n        wings();\n        base_flange();\n    }\n    \n    // Stress relief cuts\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([7, 0, 6])\n            cube([2, 1, 6]);\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "eyebolt",
    "openscad_code": "$fn = 32;\n\n// Eyebolt parameters\nthickness = 2.5;          // Wall thickness for 3D printing\nmajor_d = 35;             // Ring outer diameter\nminor_d = 20;             // Ring inner diameter\nshank_d = 12;             // Threaded shank diameter\nshank_l = 55;             // Shank length\nhex_d = 22;               // Hex base diameter\nhex_h = 8;                // Hex height\nthreads_pitch = 2.5;      // Thread pitch\nthreads_n = 7;            // Number of thread turns\n\nmodule eye_ring() {\n    // Main ring body\n    rotate_extrude(angle = 360)\n        translate([major_d/2 - thickness/2, 0, 0])\n            circle(r = thickness/2);\n    \n    // Inner cutout\n    rotate_extrude(angle = 360)\n        translate([minor_d/2, 0, 0])\n            circle(r = minor_d/2);\n    \n    // Fillet for strength\n    for (i = [0:90:360]) {\n        rotate([0, 0, i])\n            translate([major_d/2 - thickness, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(r = thickness, h = thickness, $fn = 16);\n    }\n}\n\nmodule threaded_shank() {\n    // Core cylinder\n    cylinder(d = shank_d, h = shank_l);\n    \n    // Thread profiles using rotated triangles\n    for (i = [0:threads_n-1]) {\n        translate([0, 0, i * threads_pitch])\n            rotate_extrude(angle = 360, $fn = 16)\n                translate([shank_d/2, 0, 0])\n                    polygon([\n                        [0, 0],\n                        [threads_pitch * 0.8, 0],\n                        [0, threads_pitch * 0.3]\n                    ]);\n    }\n}\n\nmodule hex_base() {\n    // Hexagonal flange under eye\n    cylinder(d = hex_d, h = hex_h, $fn = 6);\n    \n    // Chamfer edges\n    translate([0, 0, hex_h - 2])\n        cylinder(d1 = hex_d, d2 = hex_d * 0.9, h = 2, $fn = 6);\n}\n\nmodule eyebolt() {\n    union() {\n        // Eye ring on top\n        translate([0, 0, hex_h + shank_l])\n            eye_ring();\n        \n        // Hex base under eye\n        translate([0, 0, shank_l])\n            hex_base();\n        \n        // Threaded shank\n        translate([0, 0, 0])\n            threaded_shank();\n        \n        // Transition fillet between hex and shank\n        translate([0, 0, shank_l - 1])\n            cylinder(d1 = shank_d, d2 = hex_d * 0.8, h = 2, $fn = 32);\n    }\n}\n\n// Generate complete eyebolt\neyebolt();",
    "renders": true
  },
  {
    "mechanical_component": "hook",
    "openscad_code": "// Realistic Hook Mechanical Component - OpenSCAD\n// Wall-mounted utility hook with structural reinforcements\n// Overall dimensions: 120mm height, 60mm depth, 30mm width\n\n// Wall plate module with mounting holes\nmodule wall_plate() {\n    // Main plate\n    difference() {\n        cube([30, 8, 80], center=true);\n        \n        // Mounting holes - 4mm diameter, recessed\n        for(pos = [[0, -30], [0, 30]]) {\n            translate([pos[0], 0, pos[1]])\n            rotate([90, 0, 0])\n            cylinder(h=10, d=8, $fn=16);\n            \n            translate([pos[0], -2, pos[1]])\n            rotate([90, 0, 0])\n            cylinder(h=10, d=4.2, $fn=16);\n        }\n    }\n}\n\n// Hook arm with structural ribbing\nmodule hook_arm() {\n    // Main curved arm\n    translate([0, 0, 30])\n    rotate([0, 90, 0])\n    difference() {\n        union() {\n            // Outer curve\n            rotate_extrude(angle=90, $fn=64)\n            translate([20, 0, 0])\n            circle(d=8);\n            \n            // Straight extension\n            translate([0, -15, 0])\n            cube([8, 30, 8], center=true);\n            \n            // Structural ribs\n            for(i = [0:15:75]) {\n                translate([0, 0, i-35])\n                rotate([0, 90, 0])\n                cube([2, 30, 6], center=true);\n            }\n        }\n        \n        // Hollow interior\n        rotate_extrude(angle=90, $fn=64)\n        translate([20, 0, 0])\n        circle(d=4);\n        \n        translate([0, -15, 0])\n        cube([4, 30, 4], center=true);\n    }\n}\n\n// Hook tip with safety ball\nmodule hook_tip() {\n    translate([0, -45, 30])\n    rotate([0, 90, 0])\n    union() {\n        // Tapered end\n        cylinder(h=15, d1=8, d2=6, $fn=32);\n        \n        // Safety ball\n        translate([0, -8, 0])\n        sphere(d=10, $fn=32);\n        \n        // Reinforcement ring\n        translate([0, -5, 0])\n        cylinder(h=3, d=12, $fn=32);\n    }\n}\n\n// Support bracket\nmodule support_bracket() {\n    translate([0, 0, -15])\n    rotate([45, 0, 0])\n    difference() {\n        // Main brace\n        cube([6, 30, 6], center=true);\n        \n        // Lightening holes\n        for(i = [-10, 0, 10]) {\n            translate([0, i, 0])\n            rotate([0, 0, 45])\n            cylinder(h=8, d=3, $fn=6);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Wall mounting plate\n    wall_plate();\n    \n    // Hook assembly\n    union() {\n        hook_arm();\n        hook_tip();\n        support_bracket();\n    }\n    \n    // Additional support gusset\n    translate([0, -10, 10])\n    rotate([0, -30, 0])\n    linear_extrude(height=4)\n    polygon(points=[[0,0], [15,8], [15,12], [0,4]]);\n}",
    "renders": true
  },
  {
    "mechanical_component": "latch",
    "openscad_code": "// Latch mechanical component - OpenSCAD code\n// Medium complexity, realistic style, 3D printable\n\n// Overall dimensions\nlatch_length = 80;\nlatch_width = 30;\nlatch_height = 15;\n\n// Wall thickness\nwall = 2;\n\n// Main body\nmodule latch_body() {\n    difference() {\n        // Outer shell\n        cube([latch_length, latch_width, latch_height], center=true);\n        \n        // Hollow center\n        translate([0, 0, 0])\n            cube([latch_length-wall*2, latch_width-wall*2, latch_height-wall], center=true);\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    for (x=[-latch_length/2+15, latch_length/2-15]) {\n        translate([x, 0, 0])\n            cylinder(h=latch_height+1, r=3, center=true, $fn=20);\n    }\n}\n\n// Latch bolt\nmodule latch_bolt() {\n    difference() {\n        // Main bolt body\n        translate([latch_length/2-5, 0, 0])\n            cube([20, 10, 8], center=true);\n        \n        // Tapered end\n        translate([latch_length/2+10, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=10, r1=4, r2=0, center=true, $fn=20);\n    }\n    \n    // Bolt guide\n    translate([latch_length/2-10, 0, -latch_height/2+2])\n        cube([20, 6, 4], center=true);\n}\n\n// Spring mechanism\nmodule spring() {\n    for (i=[-2:2]) {\n        rotate([90, 0, 0])\n        translate([latch_length/2-20, i*3, 0])\n            cylinder(h=5, r=1.5, center=true, $fn=12);\n    }\n}\n\n// Strike plate\nmodule strike_plate() {\n    translate([-latch_length/2-10, 0, -latch_height/2])\n        cube([15, 25, 3], center=true);\n    \n    // Strike hole\n    translate([-latch_length/2-10, 0, -latch_height/2+1])\n        cube([8, 8, 5], center=true);\n}\n\n// Handle\nmodule handle() {\n    translate([0, latch_width/2+5, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=15, r=5, center=true, $fn=20);\n        cylinder(h=16, r=3, center=true, $fn=20);\n    }\n    \n    // Handle base\n    translate([0, latch_width/2+5, 0])\n        cube([10, 4, 8], center=true);\n}\n\n// Assembly\nunion() {\n    // Main latch body\n    latch_body();\n    \n    // Mounting holes (subtract)\n    difference() {\n        union() {\n            // Latch bolt\n            latch_bolt();\n            \n            // Spring\n            spring();\n            \n            // Handle\n            handle();\n            \n            // Strike plate\n            strike_plate();\n        }\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "hinge",
    "openscad_code": "// Furniture-style Butt Hinge (Medium Complexity)\n// Two leaves joined by a pin, sized for cabinet doors (~75 mm tall)\n\n// Parameters ----------------------------------------------------------\n$fn = 36;                     // global smoothness\nhinge_height      = 75;       // total leaf height\nleaf_thick        = 2.2;      // printable wall thickness\nleaf_width        = 37;\nknuckle_d         = 8;        // barrel diameter\nknuckle_h         = 7.5;\nknuckle_gap       = 0.4;      // clearance between knuckles\npin_d             = 3.5;\npin_slack         = 0.2;      // clearance pin-to-knuckle\nscrew_d           = 3.2;\nscrew_h           = 4;\nscrew_head_d      = 5.4;\nscrew_head_h      = 2;\n\n// Modules --------------------------------------------------------------\n\nmodule screw_hole(pos, ang = 0) {\n    translate(pos)\n        rotate([0, 90, ang])\n        difference() {\n            cylinder(h = leaf_thick + 0.5, d = screw_d);\n            translate([0, 0, leaf_thick - screw_head_h])\n                cylinder(h = screw_head_h + 0.1, d = screw_head_d, $fn = 6);\n        }\n}\n\nmodule leaf_half(offset = 0) {\n    translate([offset, 0, 0])\n    union() {\n        // main leaf plate\n        cube([leaf_width, leaf_thick, hinge_height], center = true);\n\n        // screw holes (4 rows)\n        for (z = [-hinge_height/2 + 10, hinge_height/2 - 10])\n            for (y = [-leaf_width/2 + 8, leaf_width/2 - 8])\n                screw_hole([y, 0, z], 0);\n\n        // knuckles\n        knuckle_count = 3;\n        for (i = [0:knuckle_count-1]) {\n            z = -hinge_height/2 + knuckle_h/2 + i * (knuckle_h + knuckle_gap);\n            translate([-leaf_width/2 - knuckle_d/2, 0, z])\n                rotate([0, 90, 0])\n                    cylinder(h = knuckle_d, d = knuckle_d, center = true);\n        }\n    }\n}\n\nmodule hinge_pin() {\n    // central pin\n    translate([0, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = hinge_height + 2, d = pin_d, center = true);\n}\n\n// Main geometry --------------------------------------------------------\n\ndifference() {\n    union() {\n        // left leaf\n        leaf_half(leaf_width/2 + knuckle_d/2);\n\n        // right leaf (mirror of left)\n        mirror([1, 0, 0])\n            leaf_half(leaf_width/2 + knuckle_d/2);\n\n        // hinge pin\n        hinge_pin();\n    }\n\n    // cut central gap between leaves\n    translate([0, 0, 0])\n        cube([1, leaf_thick + 1, hinge_height + 2], center = true);\n\n    // clearance holes for pin in knuckles\n    for (side = [-1, 1])\n        mirror([side, 0, 0]) {\n            knuckle_count = 3;\n            for (i = [0:knuckle_count-1]) {\n                z = -hinge_height/2 + knuckle_h/2 + i * (knuckle_h + knuckle_gap);\n                translate([-leaf_width/2 - knuckle_d/2, 0, z])\n                    rotate([0, 90, 0])\n                        cylinder(h = knuckle_d + 1, d = pin_d + pin_slack, center = true);\n            }\n        }\n}",
    "renders": true
  },
  {
    "mechanical_component": "hasp",
    "openscad_code": "// Hasp - realistic medium complexity\n// Overall dimensions: 110mm x 35mm x 15mm\n\n$fn = 32;\nwall = 2;\n\nmodule base_plate() {\n    // Main mounting plate\n    difference() {\n        cube([90, 25, 4], center=true);\n        // Mounting holes\n        for (x = [-35, -15, 15, 35])\n            translate([x, 0, 2])\n                cylinder(h=5, r=2.5, center=true);\n    }\n}\n\nmodule hinge_bar() {\n    // Cylindrical hinge bar\n    rotate([0, 90, 0])\n        cylinder(h=15, r=3, center=true);\n}\n\nmodule hinge_loops() {\n    // Two loops for hinge\n    for (y = [-10, 10]) {\n        translate([0, y, 0])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=10, r=4, center=true);\n                    cylinder(h=11, r=2, center=true);\n                }\n    }\n}\n\nmodule hasp_arm() {\n    // Main hasp arm\n    difference() {\n        union() {\n            // Arm body\n            translate([-45, 0, 0])\n                cube([90, 20, 4], center=true);\n            // Tapered end\n            translate([45, 0, 0])\n                cube([10, 15, 4], center=true);\n        }\n        // Slot for staple\n        translate([45, 0, 0])\n            cube([8, 6, 5], center=true);\n    }\n}\n\nmodule reinforcement_ribs() {\n    // Structural ribs on hasp arm\n    for (x = [-25, -5, 15]) {\n        translate([x, 0, 2])\n            cube([8, 16, 2], center=true);\n    }\n}\n\nmodule staple_plate() {\n    // Plate that receives the hasp\n    difference() {\n        cube([25, 20, 4], center=true);\n        // Mounting holes\n        for (x = [-8, 8])\n            translate([x, 0, 2])\n                cylinder(h=5, r=2.5, center=true);\n    }\n}\n\nmodule staple_loop() {\n    // Loop that accepts the hasp\n    difference() {\n        union() {\n            // Base\n            cube([25, 20, 4], center=true);\n            // Loop\n            translate([0, 0, 10])\n                difference() {\n                    cube([20, 16, 16], center=true);\n                    cube([8, 6, 20], center=true);\n                }\n        }\n        // Chamfer edges\n        translate([0, 0, 2])\n            cube([23, 18, 3], center=true);\n    }\n}\n\n// Assembly\n// Base plate with hinge loops\ntranslate([-55, 0, 0])\n    union() {\n        base_plate();\n        hinge_loops();\n    }\n\n// Hasp arm with hinge bar\ntranslate([0, 0, 2])\n    union() {\n        hasp_arm();\n        reinforcement_ribs();\n        translate([-45, 0, 0])\n            hinge_bar();\n    }\n\n// Staple plate and loop\ntranslate([65, 0, 0])\n    union() {\n        staple_plate();\n        translate([0, 0, 10])\n            staple_loop();\n    }",
    "renders": true
  },
  {
    "mechanical_component": "clamp",
    "openscad_code": "// Medium-complexity C-clamp – all basic primitives, 3D-printable\n// Overall footprint ≈ 105 mm × 60 mm × 120 mm\n\n// -------------- PARAMETERS --------------\n$fn = 36;            // smooth curves\nwall = 2;            // printable wall thickness\nscrew_d = 8;         // threaded rod Ø\nhandle_r = 12;       // handle ring radius\nslot_w = 32;         // jaw opening width\nslot_h = 45;         // usable throat depth\nframe_w = 60;        // frame outer width\nframe_h = 90;        // frame outer height\n\n// -------------- MODULES --------------\nmodule frame_half() {\n    difference() {\n        // outer C-profile\n        union() {\n            translate([0, 0, frame_h/2])\n                cube([frame_w, wall, frame_h], center=true);\n            translate([0, 0, 0])\n                cube([wall, wall, frame_h], center=true);\n            translate([frame_w-wall, 0, 0])\n                cube([wall, wall, frame_h], center=true);\n        }\n        // inner clearance\n        translate([wall, 0, frame_h/2])\n            cube([frame_w-2*wall, wall+0.2, frame_h-2*wall], center=true);\n    }\n}\n\n// screw rod with hex socket and threaded shaft\nmodule threaded_rod(len) {\n    union() {\n        // shaft\n        cylinder(h=len, d=screw_d, center=true);\n        // hex-socket head\n        translate([0, 0, len/2+1])\n            cylinder(h=6, d=14, $fn=6, center=false);\n        // small lead-in chamfer\n        translate([0, 0, len/2+7])\n            cylinder(h=2, d1=14, d2=10, center=false);\n    }\n}\n\n// revolving handle\nmodule handle() {\n    rotate([90,0,0])\n        difference() {\n            union() {\n                // ring\n                rotate_extrude()\n                    translate([handle_r, 0, 0])\n                        circle(r=4);\n                // spokes\n                for(i=[0:120:359])\n                    rotate([0,0,i])\n                        translate([handle_r/2, 0, -2])\n                            cube([handle_r, 4, 4], center=true);\n            }\n            // central hole for rod\n            cylinder(h=10, d=screw_d+1, center=true);\n        }\n}\n\n// sliding jaw\nmodule jaw_block() {\n    difference() {\n        // main block\n        cube([frame_w-2*wall, wall+2, slot_h], center=true);\n        // screw clearance\n        translate([0, 0, slot_h/2+screw_d/2])\n            rotate([90,0,0])\n                cylinder(h=frame_w, d=screw_d+1, center=true);\n        // internal ribs for strength\n        for(y=[-slot_h/4, 0, slot_h/4])\n            translate([0, 0, y])\n                cube([frame_w-2*wall-4, wall, 2], center=true);\n    }\n}\n\n// -------------- ASSEMBLY --------------\ndifference() {\n    union() {\n        // C-frame\n        frame_half();\n        mirror([1,0,0]) frame_half();\n\n        // fixed jaw pad\n        translate([frame_w/2-wall/2, 0, -frame_h/2+wall/2])\n            cube([wall, wall+2, 20], center=true);\n\n        // screw rod\n        translate([frame_w/2-wall/2, 0, -frame_h/2+screw_d/2])\n            threaded_rod(slot_h+20);\n\n        // handle on screw\n        translate([frame_w/2-wall/2, 0, -frame_h/2+slot_h+20])\n            handle();\n    }\n\n    // cut the working slot\n    translate([wall, 0, -frame_h/2+slot_h/2])\n        cube([slot_w, wall+0.2, slot_h], center=true);\n\n    // rod entry hole through frame\n    translate([frame_w/2-wall/2, 0, -frame_h/2])\n        rotate([90,0,0])\n            cylinder(h=frame_w, d=screw_d+0.5, center=true);\n}",
    "renders": true
  },
  {
    "mechanical_component": "plate",
    "openscad_code": "// Plate mechanical_component - realistic style with medium complexity\n// Overall dimensions: 120mm x 120mm x 15mm\n\n// Main plate body\nmodule plate_body() {\n    difference() {\n        // Main plate base\n        cube([120, 120, 3], center=true);\n        \n        // Center hole for weight reduction\n        translate([0, 0, -1])\n            cylinder(h=5, r=15, center=true);\n    }\n}\n\n// Reinforcement ribs on bottom\nmodule reinforcement_ribs() {\n    for(i=[-40:40:40]) {\n        translate([i, 0, -1.5])\n            cube([20, 110, 2], center=true);\n    }\n    for(i=[-40:40:40]) {\n        translate([0, i, -1.5])\n            cube([110, 20, 2], center=true);\n    }\n}\n\n// Edge lip/curb\nmodule edge_lip() {\n    difference() {\n        // Outer lip\n        translate([0, 0, 1.5])\n            cube([124, 124, 3], center=true);\n        \n        // Inner cutout\n        translate([0, 0, -1])\n            cube([116, 116, 6], center=true);\n    }\n}\n\n// Corner gussets for strength\nmodule corner_gussets() {\n    for(x=[-55, 55])\n    for(y=[-55, 55]) {\n        translate([x, y, -1])\n            rotate([0, 0, 45])\n            cube([8, 8, 2], center=true);\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    for(x=[-45:45:90])\n    for(y=[-45:45:90]) {\n        translate([x, y, 2])\n            cylinder(h=5, r=2.5, center=true);\n    }\n}\n\n// Surface texture grooves\nmodule surface_grooves() {\n    for(i=[-50:10:50]) {\n        translate([i, 0, 1.5])\n            cube([2, 110, 0.5], center=true);\n    }\n    for(i=[-50:10:50]) {\n        translate([0, i, 1.5])\n            cube([110, 2, 0.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    plate_body();\n    translate([0, 0, -1.5])\n        reinforcement_ribs();\n    edge_lip();\n    corner_gussets();\n    mounting_holes();\n    surface_grooves();\n}",
    "renders": true
  },
  {
    "mechanical_component": "strap",
    "openscad_code": "// Adjustable Watch-Strap Mechanical Component\n// Realistic style, medium complexity\n\n// Parameters\n$fn = 36;\nstrap_width = 20;           // 20 mm strap width\nstrap_thickness = 2.2;      // 2.2 mm wall thickness for printing\nsegment_length = 12;        // Length of one articulation segment\ntotal_segments = 9;         // Total segments for wrist circumference\npin_diameter = 1.8;         // Hinge pin diameter\nbuckle_width = 22;          // Buckle outer width\nbuckle_thickness = 3.5;     // Buckle metal thickness\nspring_bar_diameter = 1.5;  // Spring bar for lugs\n\n// Main strap assembly\nmodule strap() {\n    // Left side with buckle\n    translate([-total_segments*segment_length/2 - 20, 0, 0])\n        left_strap();\n    \n    // Right side with holes\n    translate([total_segments*segment_length/2 + 20, 0, 0])\n        right_strap();\n}\n\n// Left strap with buckle assembly\nmodule left_strap() {\n    // Tapered end segment\n    difference() {\n        cube([segment_length*1.5, strap_width, strap_thickness], center=true);\n        translate([0, 0, strap_thickness/2 + 0.1])\n            cube([segment_length*1.5 + 0.2, strap_width - 4, strap_thickness + 0.2], center=true);\n    }\n    \n    // Buckle frame\n    translate([segment_length*0.75 + buckle_width/2, 0, strap_thickness/2 + buckle_thickness/2])\n        buckle();\n    \n    // Buckle tongue\n    translate([segment_length*0.75 + buckle_width/2, 0, strap_thickness/2 + buckle_thickness + 0.5])\n        rotate([90, 0, 0])\n            cylinder(h=buckle_width - 2, d1=2, d2=1);\n    \n    // Spring bar housing\n    translate([-segment_length*0.75 - 5, 0, 0])\n        spring_bar_housing();\n}\n\n// Right strap with adjustment holes\nmodule right_strap() {\n    // Segmented strap body\n    for(i = [0:total_segments-1]) {\n        translate([i*segment_length, 0, 0])\n            strap_segment(i == total_segments-1);\n    }\n    \n    // Tapered end\n    translate([(total_segments)*segment_length + 6, 0, 0])\n        tapered_end();\n    \n    // Adjustment holes\n    for(i = [1:6]) {\n        translate([(i-1)*segment_length*1.2 + 20, 0, strap_thickness/2])\n            cylinder(h=strap_thickness + 0.2, d=3, center=true);\n    }\n    \n    // Spring bar housing\n    translate([-5, 0, 0])\n        spring_bar_housing();\n}\n\n// Individual strap segment with hinges\nmodule strap_segment(is_last=false) {\n    // Main segment body\n    difference() {\n        cube([segment_length - 1, strap_width, strap_thickness], center=true);\n        \n        // Hinge pin holes\n        translate([segment_length/2 - 0.5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=strap_width + 0.2, d=pin_diameter + 0.2, center=true);\n        \n        translate([-segment_length/2 + 0.5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=strap_width + 0.2, d=pin_diameter + 0.2, center=true);\n    }\n    \n    // Hinge knuckles\n    if(!is_last) {\n        for(side = [-1, 1]) {\n            translate([segment_length/2 - 0.5, side*(strap_width/2 - 3), 0])\n                rotate([0, 90, 0])\n                    difference() {\n                        cylinder(h=6, d=6, center=true);\n                        cylinder(h=7, d=pin_diameter + 0.2, center=true);\n                    }\n        }\n    }\n}\n\n// Buckle frame\nmodule buckle() {\n    difference() {\n        // Outer frame\n        cube([buckle_width, buckle_thickness, buckle_width/2], center=true);\n        \n        // Inner opening\n        translate([0, 0, -1])\n            cube([buckle_width - 6, buckle_thickness + 2, buckle_width/2 - 3], center=true);\n    }\n}\n\n// Tapered strap end\nmodule tapered_end() {\n    hull() {\n        translate([-3, 0, 0])\n            cube([6, strap_width - 4, strap_thickness], center=true);\n        translate([3, 0, 0])\n            cube([6, 8, strap_thickness], center=true);\n    }\n}\n\n// Spring bar housing for lugs\nmodule spring_bar_housing() {\n    difference() {\n        cube([10, strap_width + 4, strap_thickness + 2], center=true);\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=strap_width + 6, d=spring_bar_diameter + 0.4, center=true);\n    }\n}\n\n// Render the strap assembly\nstrap();",
    "renders": true
  },
  {
    "mechanical_component": "anchor",
    "openscad_code": "// Realistic Medium-Complexity Anchor – OpenSCAD\n// Overall printable length ~95 mm, wall thickness 2 mm\n// 3D-print friendly – no large overhangs, all parts taper or split\n\nanchor_length = 95;           // total length of shank + fluke assembly\nshank_d     = 8;              // shank tube outer Ø\nshank_wall  = 2;              // wall thickness\nfluke_len   = 45;             // length of each fluke\nfluke_thick = 3;              // thickness at base\ncrown_h     = 12;             // height of crown block\nstock_len   = 60;             // stock cross-bar length\nstock_d     = 6;              // stock Ø\nring_d      = 12;             // shackle ring Ø\nring_thick  = 2;5\n\nmodule hollow_cylinder(d, h, wall) {\n    difference() {\n        cylinder(h=h, d=d, $fn=32);\n        translate([0,0,-0.1])\n            cylinder(h=h+0.2, d=d-2*wall, $fn=32);\n    }\n}\n\nmodule fluke_pair() {\n    // two mirrored flukes emerging from crown\n    for (m=[0,1]) {\n        mirror([0, m?1:0, 0])\n        translate([0,0, crown_h/2])\n        rotate([30,0,0])         // fluke sweep angle\n        difference() {\n            linear_extrude(height=fluke_len, convexity=4)\n                polygon([[0,0],\n                         [fluke_len*0.8, fluke_thick],\n                         [fluke_len, fluke_thick*0.7],\n                         [fluke_len,0]]);\n            // hollow cavity\n            translate([5,0.5,-0.1])\n                cube([fluke_len-7, fluke_thick-1, 1]);\n        }\n    }\n}\n\nmodule stock_bar() {\n    // cross stock with slight taper for printability\n    difference() {\n        hull() {\n            translate([-stock_len/2,0,-stock_d/2]) sphere(d=stock_d, $fn=16);\n            translate([ stock_len/2,0,-stock_d/2]) sphere(d=stock_d, $fn=16);\n        }\n        // lightening holes\n        for (i=[-1,1])\n            translate([i*stock_len/4,0,0])\n                rotate([0,90,0])\n                    cylinder(h=stock_d+1, d=stock_d/2, $fn=12);\n    }\n}\n\nmodule shackle_ring() {\n    // toroidal shackle at top of shank\n    rotate_extrude($fn=32)\n        translate([ring_d/2,0,0])\n            circle(d=ring_thick, $fn=16);\n}\n\nmodule anchor_assembly() {\n    union() {\n        // shank tube\n        translate([0,0,-anchor_length/2])\n            hollow_cylinder(d=shank_d, h=anchor_length, wall=shank_wall);\n\n        // crown block joining flukes\n        translate([0,0,0])\n            cube([shank_d+2, shank_d+2, crown_h], center=true);\n\n        // flukes\n        fluke_pair();\n\n        // stock mounted perpendicular, 1/3 way up\n        translate([0,0, anchor_length/3])\n            rotate([0,90,0])\n                stock_bar();\n\n        // shackle ring at top\n        translate([0,0, anchor_length/2+ring_thick])\n            shackle_ring();\n    }\n}\n\n// render with base flat on bed\nrotate([0,180,0])\n    anchor_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "shackle",
    "openscad_code": "// Realistic 3D-printable shackle anchor – medium complexity\n// Overall length ~90 mm, printable without support\n\n// ---------- Parameters ----------\n$fn = 36;               // global smoothness\nbody_diam  = 20;        // straight bar diameter\narc_height = 70;        // inner height of U\narc_width  = 40;        // inner width of U\npin_diam   = 10;        // bolt/pin diameter\npin_length = 50;        // bolt/pin length\ngap_clear  = 2;         // clearance for pin insertion\nwall_thk   = 2;         // printable wall thickness\near_gap    = 24;        // distance between ears\near_thk    = 8;         // thickness of each ear\near_h      = 25;        // height of ears\n\n// ---------- Helper modules ----------\nmodule rounded_bar(length, diam, vert=false) {\n    // capsule-shaped bar with spherical ends\n    h = vert ? length : diam;\n    r = diam/2;\n    translate([0,0, vert ? -r : 0])\n        hull() {\n            cylinder(h=h, d=diam, center=false);\n            translate([0,0, vert ? 0 : length])\n                sphere(d=diam);\n            translate([0,0, vert ? length : 0])\n                sphere(d=diam);\n        }\n}\n\n// ---------- Main U-shaped shackle body ----------\nmodule shackle_body() {\n    // center of U is at origin\n    // vertical legs\n    leg_len = arc_height/2;\n    translate([ arc_width/2, 0, 0]) rotate([90,0,0])\n        rounded_bar(leg_len, body_diam, vert=true);\n    translate([-arc_width/2, 0, 0]) rotate([90,0,0])\n        rounded_bar(leg_len, body_diam, vert=true);\n\n    // curved crown (torus segment)\n    rotate([90,0,0])\n        difference() {\n            // outer torus\n            rotate_extrude(angle=180)\n                translate([arc_width/2 + body_diam/2, 0, 0])\n                    circle(d=body_diam);\n            // inner torus (hollow)\n            rotate_extrude(angle=180)\n                translate([arc_width/2 - body_diam/2, 0, 0])\n                    circle(d=body_diam - 2*wall_thk);\n        }\n}\n\n// ---------- Threaded pin (bolt) ----------\nmodule pin() {\n    // simple cylinder with hex head\n    difference() {\n        union() {\n            // smooth shank\n            cylinder(h=pin_length - 10, d=pin_diam);\n            translate([0,0,pin_length - 10])\n                cylinder(h=10, d=pin_diam + 4); // hex head stub\n        }\n        // hex head indents (simplified knurl)\n        for(i=[0:5])\n            rotate([0,0,i*60])\n                translate([0,0,pin_length - 5])\n                    cube([pin_diam+5, 2, 12], center=true);\n    }\n}\n\n// ---------- Ears with aligned holes ----------\nmodule ears() {\n    // left ear\n    translate([-ear_gap/2 - ear_thk/2, 0, -ear_h/2])\n        cube([ear_thk, body_diam + 4, ear_h], center=true);\n    // right ear\n    translate([ ear_gap/2 + ear_thk/2, 0, -ear_h/2])\n        cube([ear_thk, body_diam + 4, ear_h], center=true);\n\n    // pin holes\n    for(x=[-ear_gap/2, ear_gap/2])\n        translate([x, 0, 0])\n            rotate([90,0,0])\n                cylinder(h=ear_thk + 1, d=pin_diam + gap_clear, center=true);\n}\n\n// ---------- Assembly ----------\nunion() {\n    shackle_body();\n    ears();\n    // position pin horizontally through ears\n    translate([0,0,0]) rotate([0,90,0])\n        pin();\n}",
    "renders": true
  },
  {
    "mechanical_component": "clevis",
    "openscad_code": "// Clevis mechanical component - medium complexity realistic style\n// Suitable for 3D printing with 2mm wall thickness\n\n// Main parameters\nclevis_width = 40;\nclevis_height = 50;\nclevis_thickness = 12;\npin_diameter = 8;\npin_length = 50;\nfork_gap = 20;\nbase_length = 30;\nbase_width = 45;\nbase_thickness = 8;\nfillet_radius = 3;\n\n// Create main clevis body\nmodule clevis_body() {\n    // Base plate\n    difference() {\n        union() {\n            // Main base\n            translate([0, 0, base_thickness/2])\n                cube([base_length, base_width, base_thickness], center=true);\n            \n            // Fork arms\n            translate([base_length/2 + clevis_thickness/2, -fork_gap/2 - clevis_width/2, clevis_height/2])\n                cube([clevis_thickness, clevis_width, clevis_height], center=true);\n            \n            translate([base_length/2 + clevis_thickness/2, fork_gap/2 + clevis_width/2, clevis_height/2])\n                cube([clevis_thickness, clevis_width, clevis_height], center=true);\n            \n            // Reinforcement ribs\n            for(i = [-1, 1]) {\n                translate([base_length/4, i * (base_width/2 - 5), clevis_height/2 + base_thickness/4])\n                    rotate([0, 90, 0])\n                        cylinder(h=base_length/2, r=3, $fn=20);\n            }\n        }\n        \n        // Pin holes\n        translate([base_length/2 + clevis_thickness/2, -fork_gap/2 - clevis_width/2, clevis_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=clevis_width + 2, r=pin_diameter/2 + 0.5, $fn=32);\n        \n        translate([base_length/2 + clevis_thickness/2, fork_gap/2 + clevis_width/2, clevis_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=clevis_width + 2, r=pin_diameter/2 + 0.5, $fn=32);\n        \n        // Base mounting holes\n        for(x = [-base_length/3, base_length/3])\n            for(y = [-base_width/3, base_width/3]) {\n                translate([x, y, 0])\n                    cylinder(h=base_thickness + 2, r=3, $fn=20);\n            }\n    }\n    \n    // Add fillets to edges\n    for(i = [-1, 1]) {\n        translate([base_length/2 + clevis_thickness/2, i * (fork_gap/2 + clevis_width/2), clevis_height - fillet_radius])\n            rotate([90, 0, 0])\n                cylinder(h=fillet_radius*2, r=fillet_radius, $fn=20);\n    }\n}\n\n// Create clevis pin\nmodule clevis_pin() {\n    translate([base_length/2 + clevis_thickness/2, 0, clevis_height/2])\n        rotate([90, 0, 0])\n            union() {\n                // Main pin shaft\n                cylinder(h=pin_length, r=pin_diameter/2, $fn=32);\n                \n                // Head\n                translate([0, -pin_length/2 - 2, 0])\n                    cylinder(h=4, r=pin_diameter/2 + 2, $fn=32);\n                \n                // Cotter pin hole\n                translate([0, pin_length/2 - 5, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=pin_diameter + 2, r=1.5, $fn=16);\n            }\n}\n\n// Create cotter pin\nmodule cotter_pin() {\n    translate([base_length/2 + clevis_thickness/2, pin_length/2 - 5, clevis_height/2])\n        rotate([0, 90, 0])\n            union() {\n                // Main body\n                cylinder(h=pin_diameter + 4, r=1.5, $fn=16);\n                \n                // Bent ends\n                translate([0, pin_diameter/2 + 2, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=8, r=1.5, $fn=16);\n                \n                translate([0, -pin_diameter/2 - 2, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=8, r=1.5, $fn=16);\n            }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    clevis_body();\n\ntranslate([0, 0, 0])\n    clevis_pin();\n\n// Uncomment to include cotter pin\n// translate([0, 0, 0])\n//     cotter_pin();",
    "renders": true
  },
  {
    "mechanical_component": "turnbuckle",
    "openscad_code": "// Turnbuckle - medium complexity, realistic style\n// Overall length ~100mm, designed for 3D printing with 2mm walls\n\n// Parameters\n$fn = 36;\nbody_length = 60;\nbody_diameter = 20;\nthread_length = 20;\nthread_diameter = 8;\neye_diameter = 16;\neye_thickness = 4;\neye_gap = 6;\nwall_th = 2;\n\n// Main turnbuckle body\nmodule turnbuckle_body() {\n    difference() {\n        // Main cylindrical body\n        rotate([0, 90, 0]) cylinder(h=body_length, d=body_diameter, center=true);\n        \n        // Hexagonal flats for wrench\n        for (i=[0:5]) {\n            rotate([0, 0, i*60+30]) {\n                translate([0, 0, -body_length/2 - 1]) {\n                    rotate([0, 90, 0]) cube([body_length+2, 20/sqrt(3), body_diameter], center=true);\n                }\n            }\n        }\n        \n        // Internal threads - left side\n        rotate([0, 90, 0]) {\n            translate([-body_length/2 + 2, 0, 0]) {\n                cylinder(h=thread_length, d=thread_diameter+wall_th, center=true);\n            }\n        }\n        \n        // Internal threads - right side\n        rotate([0, 90, 0]) {\n            translate([body_length/2 - 2, 0, 0]) {\n                cylinder(h=thread_length, d=thread_diameter+wall_th, center=true);\n            }\n        }\n    }\n    \n    // Thread grooves on body\n    for (i=[-body_length/2+5:5:body_length/2-5]) {\n        rotate([0, 90, 0]) {\n            translate([i, 0, 0]) {\n                difference() {\n                    cylinder(h=0.5, d=body_diameter+0.1, center=true);\n                    cylinder(h=1, d=body_diameter-2, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Eye bolt module\nmodule eye_bolt(direction=1) {\n    // Threaded rod\n    rotate([0, 90*direction, 0]) {\n        difference() {\n            cylinder(h=thread_length+10, d=thread_diameter, center=true);\n            // Thread grooves\n            for (i=[-thread_length/2:2:thread_length/2]) {\n                translate([i, 0, 0]) {\n                    rotate([0, 90, 0]) cylinder(h=2.5, d=thread_diameter-1, center=true);\n                }\n            }\n        }\n    }\n    \n    // Eye loop\n    translate([direction*(thread_length/2 + eye_diameter/2 - eye_thickness/2), 0, 0]) {\n        rotate([0, 90*direction, 0]) {\n            difference() {\n                // Outer eye\n                rotate_extrude() {\n                    translate([eye_diameter/2, 0, 0]) {\n                        square([eye_thickness, eye_diameter/2]);\n                    }\n                }\n                // Inner hole\n                rotate_extrude() {\n                    translate([eye_diameter/2 - wall_th, 0, 0]) {\n                        square([wall_th, eye_diameter/2 - wall_th - eye_gap/2]);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Reinforcement fillet\n    translate([direction*(thread_length/2), 0, 0]) {\n        rotate([0, 90*direction, 0]) {\n            cylinder(h=4, d1=thread_diameter, d2=eye_diameter, center=false);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) turnbuckle_body();\ntranslate([-body_length/2, 0, 0]) eye_bolt(1);\ntranslate([body_length/2, 0, 0]) mirror([1, 0, 0]) eye_bolt(-1);",
    "renders": true
  },
  {
    "mechanical_component": "tack",
    "openscad_code": "// Tack (small nail) for bulletin boards\n// Overall length: 60 mm (head Ø 10 mm, pin Ø 2 mm)\n\n$fn = 48;          // segment resolution for curved parts\nwall = 1.5;        // safe 3D-print wall thickness\nhead_d = 10;       // head diameter\nhead_h = 3;        // head height\npin_d = 2;         // pin shaft diameter\npin_l = 57;        // pin length (leaves 3 mm head overlap)\n\n// Main tack module\nmodule tack() {\n    // Head – slightly domed disk with chamfer\n    difference() {\n        // Main domed head\n        union() {\n            cylinder(d = head_d, h = head_h);\n            translate([0,0,head_h])\n            cylinder(d1 = head_d, d2 = head_d*0.9, h = 1);\n        }\n        // Top-side hollow for filament saving & design relief\n        translate([0,0,-0.01])\n        cylinder(d = head_d - 2*wall, h = head_h + 2);\n    }\n\n    // Shaft (pin)\n    translate([0,0,-pin_l])\n    cylinder(d = pin_d, h = pin_l);\n    \n    // Tip – slight cone for realistic point\n    translate([0,0,-pin_l - 0.5])\n    cylinder(d1 = pin_d, d2 = 0, h = 1.5);\n}\n\n// Optional grip rings for mechanical retention in wood\nmodule grip_rings(count = 3) {\n    for (i = [1:count]) {\n        translate([0,0,-i*8])\n        difference() {\n            cylinder(d = pin_d + 0.4, h = 0.4);\n            cylinder(d = pin_d, h = 0.8);\n        }\n    }\n}\n\n// Assembly\ntack();\ngrip_rings();",
    "renders": true
  },
  {
    "mechanical_component": "staple",
    "openscad_code": "// Staple mechanical component - OpenSCAD\n// Realistic office staple with proper proportions for 3D printing\n// Wall thickness: 2mm throughout\n// Overall dimensions: 35mm x 6mm x 5mm\n\nmodule staple() {\n    // Main wire parameters\n    wire_diameter = 2;\n    wire_radius = wire_diameter/2;\n    \n    // Staple dimensions\n    width = 35;\n    height = 5;\n    leg_length = 6;\n    crown_radius = 3;\n    \n    // Crown (top curved part)\n    translate([0, 0, height/2]) {\n        difference() {\n            // Main crown body\n            hull() {\n                cube([width - 2*crown_radius, wire_diameter, wire_diameter], center=true);\n                \n                // Rounded ends\n                translate([(width - 2*crown_radius)/2, 0, 0])\n                    sphere(r=wire_radius, $fn=16);\n                translate([-(width - 2*crown_radius)/2, 0, 0])\n                    sphere(r=wire_radius, $fn=16);\n            }\n            \n            // Hollow center for realistic wire\n            hull() {\n                cube([width - 2*crown_radius - 2*wire_diameter, wire_diameter - 1, wire_diameter - 1], center=true);\n                \n                translate([(width - 2*crown_radius - 2*wire_diameter)/2, 0, 0])\n                    sphere(r=wire_radius - 0.5, $fn=16);\n                translate([-(width - 2*crown_radius - 2*wire_diameter)/2, 0, 0])\n                    sphere(r=wire_radius - 0.5, $fn=16);\n            }\n        }\n    }\n    \n    // Left leg\n    translate([-width/2 + crown_radius, 0, -leg_length/2]) {\n        difference() {\n            cylinder(h=leg_length, r=wire_radius, $fn=16);\n            cylinder(h=leg_length, r=wire_radius - 1, $fn=16);\n        }\n    }\n    \n    // Right leg\n    translate([width/2 - crown_radius, 0, -leg_length/2]) {\n        difference() {\n            cylinder(h=leg_length, r=wire_radius, $fn=16);\n            cylinder(h=leg_length, r=wire_radius - 1, $fn=16);\n        }\n    }\n    \n    // Leg chamfers for realistic wire ends\n    translate([-width/2 + crown_radius, 0, -leg_length]) {\n        cylinder(h=1, r1=wire_radius - 0.5, r2=wire_radius, $fn=16);\n    }\n    \n    translate([width/2 - crown_radius, 0, -leg_length]) {\n        cylinder(h=1, r1=wire_radius - 0.5, r2=wire_radius, $fn=16);\n    }\n    \n    // Crown to leg transition joints\n    translate([-width/2 + crown_radius, 0, height/2 - wire_radius/2]) {\n        difference() {\n            cube([crown_radius, wire_diameter, wire_diameter], center=true);\n            cube([crown_radius - 1, wire_diameter - 1, wire_diameter - 1], center=true);\n        }\n    }\n    \n    translate([width/2 - crown_radius, 0, height/2 - wire_radius/2]) {\n        difference() {\n            cube([crown_radius, wire_diameter, wire_diameter], center=true);\n            cube([crown_radius - 1, wire_diameter - 1, wire_diameter - 1], center=true);\n        }\n    }\n}\n\n// Render the staple\nstaple();",
    "renders": true
  },
  {
    "mechanical_component": "nail",
    "openscad_code": "// Nail - mechanical component style\n// 3D printable nail with structural details\n\n// Main parameters\nlength = 80;        // total length of nail\nhead_d = 14;        // head diameter\nhead_h = 3;         // head height\nshank_d = 5;        // shank diameter\ntip_length = 12;    // tapered tip length\ngrip_d = 6;         // grip diameter for textured shank\ngrip_h = 1;         // grip ring height\nrings = 8;          // number of grip rings\n\n// Nail head with chamfered edge\nmodule nail_head() {\n    difference() {\n        // Main head cylinder\n        cylinder(h=head_h, d=head_d, $fn=50);\n        \n        // Chamfer on top\n        translate([0, 0, head_h-0.5])\n            cylinder(h=1.5, d1=head_d-2, d2=head_d, $fn=50);\n        \n        // Center mark indentation\n        translate([0, 0, -0.1])\n            cylinder(h=1.5, d=2, $fn=20);\n    }\n}\n\n// Textured grip rings on shank\nmodule grip_rings() {\n    for(i = [1:rings]) {\n        translate([0, 0, head_h + (i-1)*(grip_h+1.5)])\n            difference() {\n                cylinder(h=grip_h, d=grip_d, $fn=30);\n                cylinder(h=grip_h+0.1, d=shank_d, $fn=30);\n            }\n    }\n}\n\n// Tapered tip\nmodule nail_tip() {\n    hull() {\n        // Start of taper\n        translate([0, 0, length-tip_length])\n            cylinder(h=0.1, d=shank_d, $fn=30);\n        \n        // Sharp point\n        translate([0, 0, length])\n            sphere(d=0.5, $fn=20);\n    }\n}\n\n// Main nail structure\nmodule nail() {\n    union() {\n        // Head\n        nail_head();\n        \n        // Shank with grip rings\n        translate([0, 0, head_h])\n            union() {\n                // Smooth upper shank\n                cylinder(h=length-head_h-tip_length-(rings*(grip_h+1.5)), d=shank_d, $fn=30);\n                \n                // Textured grip section\n                grip_rings();\n            }\n        \n        // Tapered tip\n        nail_tip();\n        \n        // Structural reinforcement inside head\n        translate([0, 0, 0])\n            cylinder(h=head_h-0.5, d=shank_d+1, $fn=30);\n    }\n}\n\n// Create the complete nail\nrotate([0, 180, 0])\n    nail();",
    "renders": true
  },
  {
    "mechanical_component": "dowel",
    "openscad_code": "// Realistic Dowel Mechanical Connector\n// Medium complexity, 3D printable in PLA/ABS\n\n$fn = 32;  // Smooth curves for printing\n\n// Main parameters\ndowel_length = 80;\ndowel_diameter = 12;\nwall_thickness = 2.4;\nknurl_height = 3;\nknurl_count = 12;\n\n// Chamfer angles\nchamfer_angle = 45;\nchamfer_depth = 2;\n\n// Internal thread parameters\nthread_diameter = 8;\nthread_depth = 15;\nthread_pitch = 2;\n\n// End cap details\ncap_thickness = 4;\ncap_diameter = 14;\n\nmodule dowel_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h = dowel_length, d = dowel_diameter);\n        \n        // Central hollow section\n        translate([0, 0, -1])\n            cylinder(h = dowel_length + 2, d = dowel_diameter - (2 * wall_thickness));\n        \n        // Top chamfer\n        translate([0, 0, dowel_length - chamfer_depth])\n            cylinder(h = chamfer_depth + 1, d1 = dowel_diameter, d2 = dowel_diameter - 2);\n        \n        // Bottom chamfer\n            cylinder(h = chamfer_depth + 1, d1 = dowel_diameter - 2, d2 = dowel_diameter);\n    }\n}\n\nmodule knurled_grip() {\n    for(i = [0:knurl_count-1]) {\n        rotate([0, 0, i * (360 / knurl_count)])\n            translate([dowel_diameter/2 - 0.5, -1.5, dowel_length/2 - knurl_height/2])\n                cube([1, 3, knurl_height], center = true);\n    }\n}\n\nmodule internal_threading() {\n    // Thread entry at top\n    translate([0, 0, dowel_length - thread_depth])\n        cylinder(h = thread_depth + 1, d = thread_diameter);\n    \n    // Thread grooves (simplified as notches)\n    for(i = [0:thread_depth/thread_pitch]) {\n        translate([0, 0, dowel_length - (i * thread_pitch) - 1])\n            cylinder(h = 1.2, d = thread_diameter + 0.4);\n    }\n}\n\nmodule end_caps() {\n    // Top cap\n    difference() {\n        translate([0, 0, dowel_length - 0.5])\n            cylinder(h = cap_thickness, d = cap_diameter);\n        translate([0, 0, dowel_length - 0.5])\n            cylinder(h = cap_thickness + 1, d = dowel_diameter + 0.2);\n    }\n    \n    // Bottom cap\n    difference() {\n        translate([0, 0, 0.5])\n            cylinder(h = cap_thickness, d = cap_diameter);\n        translate([0, 0, 0.5])\n            cylinder(h = cap_thickness + 1, d = dowel_diameter + 0.2);\n    }\n}\n\nmodule alignment_pips() {\n    // Small alignment nubs on caps\n    translate([0, cap_diameter/2 - 1.5, dowel_length - cap_thickness/2])\n        sphere(d = 1.5);\n    translate([0, -cap_diameter/2 + 1.5, cap_thickness/2])\n        sphere(d = 1.5);\n}\n\n// Assemble the complete dowel\nunion() {\n    dowel_body();\n    knurled_grip();\n    difference() {\n        dowel_body();\n        internal_threading();\n    }\n    end_caps();\n    alignment_pips();\n}",
    "renders": true
  },
  {
    "mechanical_component": "peg",
    "openscad_code": "// Peg for furniture assembly – realistic style, medium complexity\n// Overall height ~110 mm, diameter ~25 mm\n// Wall thickness kept ≥ 2 mm for 3D-printability\n\n// ---------------------------------------------\n// PARAMETERS\n// ---------------------------------------------\n$fn = 32;               // Smooth curves\npeg_h = 110;            // Total height\nhead_h = 12;            // Flanged head\nhead_d = 25;            // Head diameter\nshank_d = 20;           // Main shank diameter\nshank_h = peg_h - head_h;\ngrip_cnt = 6;           // Number of grip rings\ngrip_h = 3;\ngrip_gap = 3;\ngrip_start = head_h + 5;\ntip_r = 1.5;            // Chamfer radius on tip\n\n// ---------------------------------------------\n// MODULE: Head with countersink\n// ---------------------------------------------\nmodule head() {\n    difference() {\n        // Main flange\n        cylinder(h = head_h, d = head_d);\n\n        // Countersink – improves seating\n        translate([0, 0, -0.1])\n            cylinder(h = head_h + 0.2, d1 = head_d * 0.6, d2 = head_d, center = false);\n    }\n\n    // Aesthetic knurl on top\n    for (i = [0 : 45 : 359])\n        rotate([0, 0, i])\n            translate([head_d / 2 * 0.7, 0, head_h - 1])\n                cube([head_d * 0.15, 1, 2]);\n}\n\n// ---------------------------------------------\n// MODULE: Shank with grip rings\n// ---------------------------------------------\nmodule shank() {\n    difference() {\n        // Main shank body\n        cylinder(h = shank_h, d = shank_d);\n\n        // Grip rings cutouts\n        for (i = [0 : grip_cnt - 1])\n            translate([0, 0, grip_start + i * (grip_h + grip_gap)])\n                cylinder(h = grip_h + 0.1, d = shank_d - 2 * 2); // 2 mm wall\n    }\n\n    // Small chamfer on lower tip for easy insertion\n    translate([0, 0, shank_h - tip_r])\n        cylinder(h = tip_r, d1 = shank_d, d2 = shank_d - 2 * tip_r);\n}\n\n// ---------------------------------------------\n// MODULE: Peg assembly\n// ---------------------------------------------\nmodule peg() {\n    union() {\n        head();\n        translate([0, 0, head_h])\n            shank();\n    }\n}\n\n// Render\npeg();",
    "renders": true
  },
  {
    "mechanical_component": "knob",
    "openscad_code": "// Realistic Medium-Complexity Knob (≈60 mm diameter)\n// Optimized for FDM printing – no overhangs >45°, 2 mm+ walls\n\n// Overall dimensions\nknob_dia = 60;          // Outer diameter of grip\nknob_height = 32;       // Total height (grip + boss)\npost_dia = 6;           // D-shaft post diameter\npost_depth = 12;        // Post engagement depth\nwall = 2;               // Minimum shell thickness\n\nmodule grip() {\n    // Main fluted grip\n    difference() {\n        // Outer fluted cylinder\n        cylinder(h = knob_height * 0.75, d = knob_dia, $fn = 60);\n\n        // Center bore for weight reduction\n        cylinder(h = knob_height * 0.75 + 0.2, d = knob_dia - 2 * wall, $fn = 60);\n    }\n\n    // Finger scallops – six shallow depressions\n    for (i = [0 : 5]) {\n        rotate([0, 0, i * 60])\n            translate([0, knob_dia / 2 - 6, knob_height * 0.375])\n                scale([1, 0.4, 0.7])\n                    sphere(d = 12, $fn = 20);\n    }\n}\n\nmodule boss() {\n    // Structural boss beneath grip\n    difference() {\n        cylinder(h = knob_height * 0.25 + 0.2, d = knob_dia * 0.6, $fn = 40);\n        // Lightening cavity\n        cylinder(h = knob_height * 0.25, d = knob_dia * 0.6 - 2 * wall, $fn = 40);\n    }\n}\n\nmodule d_shaft() {\n    // D-shaped post to mate with potentiometer / valve stem\n    difference() {\n        // Round shaft\n        cylinder(h = post_depth + 0.2, d = post_dia, $fn = 30);\n\n        // Flat on shaft (D-cut)\n        translate([-post_dia / 2 - 0.2, -post_dia, 0])\n            cube([post_dia + 0.2, post_dia * 2, post_depth + 0.5]);\n    }\n}\n\n// Assembly\nunion() {\n    // Grip on top\n    grip();\n\n    // Boss underneath grip\n    translate([0, 0, knob_height * 0.75])\n        boss();\n\n    // D-shaft post centered below\n    translate([0, 0, knob_height - post_depth])\n        d_shaft();\n}",
    "renders": true
  },
  {
    "mechanical_component": "handle",
    "openscad_code": "// Handle for a drawer or cabinet door\n// Overall dimensions: 120mm wide x 30mm deep x 35mm high\n\n$fn = 32;  // Smooth curves for printing\n\nmodule handle_base() {\n    // Main mounting plate - 2mm thick\n    difference() {\n        translate([-55, -13, 0])\n            cube([110, 26, 2]);\n        \n        // Counter-sunk screw holes (4mm diameter, 6mm deep)\n        translate([-45, 0, -0.1])\n            cylinder(h=3.1, d=8);\n        translate([-45, 0, 3])\n            cylinder(h=3, d=4);\n        \n        translate([45, 0, -0.1])\n            cylinder(h=3.1, d=8);\n        translate([45, 0, 3])\n            cylinder(h=3, d=4);\n    }\n}\n\nmodule handle_grip() {\n    // Main grip bar\n    translate([0, 12, 6])\n        rotate([90, 0, 0])\n            cylinder(h=100, d=12);\n    \n    // Grip ends with fillets\n    translate([-50, 12, 6])\n        rotate([90, 0, 0])\n            cylinder(h=2, d=14);\n    \n    translate([50, 12, 6])\n        rotate([90, 0, 0])\n            cylinder(h=2, d=14);\n    \n    // Support arms connecting grip to base\n    for (x = [-50, 50]) {\n        translate([x, 0, 2])\n            rotate([90, 0, 0])\n                cylinder(h=12, d1=8, d2=6);\n    }\n    \n    // Reinforcement ribs under grip\n    for (x = [-40:20:40]) {\n        translate([x, 6, 2])\n            cube([4, 12, 4]);\n    }\n}\n\nmodule handle_detail() {\n    // Finger grooves on grip\n    for (i = [-4:1:4]) {\n        translate([i*8, 12, 12])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=5, d=8);\n                    translate([0, 0, -0.1])\n                        cylinder(h=5.2, d=6);\n                }\n    }\n    \n    // Corner chamfers on base\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x*52, y*11, 0])\n                cube([6, 6, 2]);\n            translate([x*55, y*13, 0])\n                rotate([0, 0, x*y*45])\n                    cube([8, 8, 2]);\n        }\n    }\n}\n\n// Assemble the complete handle\nunion() {\n    handle_base();\n    handle_grip();\n    handle_detail();\n}",
    "renders": true
  },
  {
    "mechanical_component": "lever",
    "openscad_code": "// Realistic lever mechanical component\n// Medium complexity, 3D printable\n\n// Constants for proportions\nlever_length = 100;      // Total length of lever arm\nlever_diameter = 8;      // Diameter of lever rod\nfulcrum_height = 20;     // Height of fulcrum base\nfulcrum_width = 30;      // Width of fulcrum\nhandle_length = 25;      // Length of handle grip\nhandle_diameter = 12;    // Diameter of handle\nwall_thickness = 2;      // Wall thickness for printability\njoint_clearance = 0.4;   // Clearance for pivot joint\n\n// Main lever assembly\nmodule lever_assembly() {\n    // Lever rod with tapering ends\n    translate([0, 0, fulcrum_height + lever_diameter/2])\n    union() {\n        // Main rod\n        cylinder(h = lever_length, d = lever_diameter, $fn = 16);\n        \n        // Tapered ends\n        translate([lever_length/2 - lever_diameter/2, 0, 0])\n        cylinder(h = lever_diameter, d1 = lever_diameter, d2 = lever_diameter*0.7, $fn = 16);\n        \n        translate([-lever_length/2 + lever_diameter/2, 0, 0])\n        cylinder(h = lever_diameter, d1 = lever_diameter*0.7, d2 = lever_diameter, $fn = 16);\n    }\n    \n    // Handle grip at one end\n    translate([lever_length/2 + handle_length/2 - lever_diameter/2, 0, fulcrum_height + lever_diameter/2])\n    rotate([0, 90, 0])\n    union() {\n        // Grip cylinder\n        cylinder(h = handle_length, d = handle_diameter, $fn = 32);\n        \n        // Grip texture rings\n        for(i = [1:handle_length/5-1]) {\n            translate([i*5 - handle_length/2, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 1.5, d = handle_diameter + 1, $fn = 32);\n        }\n    }\n    \n    // Fulcrum base\n    translate([0, 0, 0])\n    difference() {\n        // Solid base\n        cube([fulcrum_width, fulcrum_width, fulcrum_height], center = true);\n        \n        // Lightening holes\n        for(x = [-fulcrum_width/4, fulcrum_width/4]) {\n            for(y = [-fulcrum_width/4, fulcrum_width/4]) {\n                translate([x, y, -fulcrum_height/2 + wall_thickness])\n                cylinder(h = fulcrum_height - wall_thickness*2, d = wall_thickness*3, $fn = 8);\n            }\n        }\n        \n        // Center hole for pivot pin\n        translate([0, 0, -fulcrum_height/2 - 1])\n        cylinder(h = fulcrum_height + 2, d = lever_diameter + joint_clearance, $fn = 16);\n    }\n    \n    // Pivot pin\n    translate([0, 0, fulcrum_height + lever_diameter/2])\n    cylinder(h = lever_diameter + 2, d = lever_diameter - 1, $fn = 16);\n    \n    // Support ribs\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n        translate([fulcrum_width/2 - wall_thickness, 0, fulcrum_height/2])\n        rotate([90, 0, 0])\n        linear_extrude(height = wall_thickness)\n        polygon(points = [\n            [0, 0],\n            [fulcrum_width/4, -fulcrum_height/2],\n            [fulcrum_width/4 + wall_thickness, -fulcrum_height/2],\n            [wall_thickness, 0]\n        ]);\n    }\n    \n    // Load attachment point at other end\n    translate([-lever_length/2 + lever_diameter/2, 0, fulcrum_height + lever_diameter/2])\n    union() {\n        // Eyelet for load attachment\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = lever_diameter*2, d = lever_diameter*1.5, $fn = 16);\n            cylinder(h = lever_diameter*2 + 1, d = lever_diameter*0.8, $fn = 16);\n        }\n        \n        // Reinforcement plates\n        for(side = [-1, 1]) {\n            translate([0, side * lever_diameter*0.75, 0])\n            cube([wall_thickness*2, wall_thickness, lever_diameter*1.5], center = true);\n        }\n    }\n}\n\n// Render the complete lever\nlever_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "ratchet",
    "openscad_code": "// Ratchet mechanical_component - OpenSCAD Code\n// 3D printable ratchet with realistic proportions and medium complexity\n\n// Overall dimensions\nratchet_length = 120;\nratchet_width = 25;\nratchet_height = 15;\nhandle_length = 100;\nhandle_diameter = 12;\n\n// Ratchet head module\nmodule ratchet_head() {\n    // Main body\n    difference() {\n        union() {\n            // Head base\n            translate([-ratchet_length/2, -ratchet_width/2, 0])\n                cube([ratchet_length/2, ratchet_width, ratchet_height]);\n            \n            // Rounded top\n            translate([0, 0, ratchet_height])\n                cylinder(h=ratchet_height/2, r=ratchet_width/2, $fn=32);\n            \n            // Reinforcement ribs\n            for(i=[-1, 1]) {\n                translate([-ratchet_length/3, i*ratchet_width/4, 0])\n                    cube([ratchet_length/4, ratchet_width/8, ratchet_height*1.2]);\n            }\n        }\n        \n        // Drive square hole\n        translate([-ratchet_length/2 + 5, 0, ratchet_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=ratchet_width+2, r=6, $fn=4);\n        \n        // Top access hole\n        translate([-ratchet_length/3, 0, ratchet_height*1.5])\n            cylinder(h=ratchet_height, r=ratchet_width/4, $fn=32);\n    }\n    \n    // Ratchet mechanism housing\n    translate([-ratchet_length/3, 0, ratchet_height/2])\n        difference() {\n            sphere(d=ratchet_width*1.2);\n            sphere(d=ratchet_width*0.8);\n        }\n    \n    // Direction switch\n    translate([-ratchet_length/2 + 8, 0, ratchet_height*1.7])\n        rotate([90, 0, 0])\n            cylinder(h=ratchet_height/2, r=ratchet_width/8, $fn=16);\n}\n\n// Handle module\nmodule handle() {\n    // Main grip\n    difference() {\n        cylinder(h=handle_length, r=handle_diameter/2, $fn=32);\n        \n        // Grip pattern grooves\n        for(i=[0:5:handle_length-10]) {\n            translate([0, 0, i+5])\n                cylinder(h=2, r=handle_diameter/2+0.5, $fn=32);\n        }\n    }\n    \n    // End cap\n    translate([0, 0, handle_length])\n        cylinder(h=handle_diameter/2, r=handle_diameter/2+1, $fn=32);\n    \n    // Safety loop\n    translate([0, 0, handle_length - handle_diameter/2])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=handle_diameter*2, r=handle_diameter/4, $fn=32);\n                cylinder(h=handle_diameter*2+1, r=handle_diameter/4-2, $fn=32);\n            }\n}\n\n// Assembly\nunion() {\n    // Ratchet head\n    ratchet_head();\n    \n    // Handle connection\n    translate([-ratchet_length/2, 0, ratchet_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=ratchet_width/4, r=handle_diameter/2+1, $fn=32);\n    \n    // Handle\n    translate([-ratchet_length/2 - handle_length/2, 0, ratchet_height/2])\n        rotate([0, 90, 0])\n            handle();\n}\n\n// Structural reinforcement at joint\ntranslate([-ratchet_length/2 - 5, 0, ratchet_height/2])\n    difference() {\n        sphere(d=handle_diameter*1.5);\n        sphere(d=handle_diameter*1.3);\n    }",
    "renders": true
  },
  {
    "mechanical_component": "pawl",
    "openscad_code": "// Realistic 3D-printable pawl (clockwise ratchet stop)\n// Overall length ≈ 65 mm, thickness ≈ 6 mm\n// Designed for 2 mm wall thickness everywhere and no overhangs >45°\n\n// ---------- PARAMETERS ----------\npawl_len = 65;          // total length\npawl_width = 12;        // width\nthick = 6;              // uniform thickness\nhole_d = 4;             // pivot hole diameter\ntooth_h = 5;            // ratchet-tooth engagement height\ntooth_w = 4;            // ratchet-tooth width\nspring_len = 15;        // spring-arm length\nspring_width = 3.5;     // spring-arm width\nspring_gap = 1.5;       // gap for flexible leaf\nfillet_r = 1.2;         // small edge fillets for 3D-print friendliness\n\n// ---------- MAIN ----------\ndifference() {\n    union() {\n        // 1. Pivot boss (cylinder with hole removed later)\n        translate([0, 0, 0])\n            cylinder(d = 12, h = thick, $fn = 30);\n\n        // 2. Main lever body\n        translate([6, 0, 0])\n            cube([pawl_len - 6, pawl_width, thick], center = true);\n\n        // 3. Ratchet tooth (right-angle hook)\n        translate([pawl_len - tooth_w/2, (pawl_width/2 + tooth_h/2), 0])\n            cube([tooth_w, tooth_h, thick], center = true);\n\n        // 4. Spring arm (leaf-spring style)\n        translate([-spring_len - 3, 0, 0])\n            cube([spring_len, spring_width, thick], center = true);\n\n        // 5. Rounded end on spring arm\n        translate([-spring_len - 3 - spring_width/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = spring_width, d = thick, $fn = 20);\n    }\n\n    // ---------- HOLES / CUTOUTS ----------\n    // Pivot hole\n    translate([0, 0, -1])\n        cylinder(d = hole_d, h = thick + 2, $fn = 20);\n\n    // Spring gap (slot for flex)\n    translate([-spring_len - 3 + 1, 0, 0])\n        cube([spring_len - 2, spring_width + 1.5, thick + 1], center = true);\n\n    // Small edge fillets for printability\n    // Bottom-front edge of lever\n    translate([pawl_len/2, 0, -thick/2 - 0.1])\n        rotate([0, 0, 0])\n            minkowski() {\n                cube([pawl_len, pawl_width, 0.2]);\n                cylinder(r = fillet_r, h = 0.2, $fn = 8);\n            }\n\n    // Bottom-front edge of tooth\n    translate([pawl_len - tooth_w/2, pawl_width/2 + tooth_h/2, -thick/2 - 0.1])\n        rotate([0, 0, 0])\n            minkowski() {\n                cube([tooth_w, tooth_h, 0.2]);\n                cylinder(r = fillet_r, h = 0.2, $fn = 8);\n            }\n}",
    "renders": true
  },
  {
    "mechanical_component": "clipring",
    "openscad_code": "// Clip Ring mechanical_component - medium complexity realistic style\n// Overall dimensions: 80mm diameter, 20mm height\n\n// Parameters\nring_outer_diameter = 80;\nring_inner_diameter = 60;\nring_height = 20;\nclip_thickness = 3;\nspring_gap = 8;\nhandle_length = 15;\nhandle_width = 10;\nhandle_height = 8;\ngrip_segments = 20;\nwall_thickness = 2;\n\nmodule main_ring() {\n    difference() {\n        // Outer ring body\n        cylinder(h=ring_height, d=ring_outer_diameter, center=true, $fn=64);\n        \n        // Inner hole\n        cylinder(h=ring_height+2, d=ring_inner_diameter, center=true, $fn=64);\n        \n        // Spring gap cut\n        translate([0, -ring_outer_diameter/2, -ring_height/2-1])\n            cube([spring_gap, ring_outer_diameter, ring_height+2], center=true);\n    }\n}\n\nmodule clip_handles() {\n    // Left handle\n    translate([-ring_outer_diameter/2 - handle_length/2, 0, 0]) {\n        difference() {\n            // Main handle body\n            cube([handle_length, handle_width, handle_height], center=true);\n            \n            // Finger grip grooves\n            for(i = [-1, 0, 1]) {\n                translate([0, i*2.5, handle_height/2 - 1])\n                    cube([handle_length*0.8, 1, 1.5], center=true);\n            }\n        }\n    }\n    \n    // Right handle\n    translate([ring_outer_diameter/2 + handle_length/2, 0, 0]) {\n        mirror([1,0,0]) {\n            difference() {\n                // Main handle body\n                cube([handle_length, handle_width, handle_height], center=true);\n                \n                // Finger grip grooves\n                for(i = [-1, 0, 1]) {\n                    translate([0, i*2.5, handle_height/2 - 1])\n                        cube([handle_length*0.8, 1, 1.5], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule reinforcement_ribs() {\n    // Internal reinforcement ribs for structural integrity\n    for(i = [0:60:359]) {\n        rotate([0, 0, i]) {\n            translate([ring_inner_diameter/2 + wall_thickness/2, 0, 0]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h=ring_height*0.8, d=wall_thickness*2, center=true, $fn=12);\n                        cylinder(h=ring_height*0.9, d=wall_thickness, center=true, $fn=12);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule spring_mechanism() {\n    // Spring housing on left side\n    translate([-spring_gap/2 - wall_thickness, 0, 0]) {\n        difference() {\n            // Housing block\n            cube([wall_thickness*2, wall_thickness*3, ring_height*0.7], center=true);\n            \n            // Spring channel\n            rotate([90, 0, 0])\n                cylinder(h=wall_thickness*2.5, d=wall_thickness, center=true, $fn=12);\n        }\n    }\n    \n    // Spring housing on right side\n    translate([spring_gap/2 + wall_thickness, 0, 0]) {\n        mirror([1,0,0]) {\n            difference() {\n                // Housing block\n                cube([wall_thickness*2, wall_thickness*3, ring_height*0.7], center=true);\n                \n                // Spring channel\n                rotate([90, 0, 0])\n                    cylinder(h=wall_thickness*2.5, d=wall_thickness, center=true, $fn=12);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Core ring structure\n    main_ring();\n    \n    // Operating handles\n    clip_handles();\n    \n    // Internal reinforcements\n    reinforcement_ribs();\n    \n    // Spring mechanism housings\n    spring_mechanism();\n    \n    // Beveled edges for comfort\n    translate([0, 0, ring_height/2 - 0.5]) {\n        difference() {\n            cylinder(h=1, d=ring_outer_diameter+2, center=true, $fn=64);\n            cylinder(h=2, d=ring_outer_diameter-2, center=true, $fn=64);\n        }\n    }\n    \n    translate([0, 0, -ring_height/2 + 0.5]) {\n        difference() {\n            cylinder(h=1, d=ring_outer_diameter+2, center=true, $fn=64);\n            cylinder(h=2, d=ring_outer_diameter-2, center=true, $fn=64);\n        }\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "circlip",
    "openscad_code": "// OpenSCAD Circlip (Medium Complexity, Realistic Style)\n// External retaining ring, ~100 mm OD, 2 mm thick, 3D-printable\n\n$fn = 36;\n\n// Dimensions (mm)\nOD = 100;               // Outer diameter\nID = 85;                // Inner diameter\nTHK = 2;                // Thickness\nGAP = 6;                // Axial cut for installation\nEARW = 12;              // Lug ear width\nEARH = 8;               // Lug ear height (radial)\nEARHOLE = 3;            // Lug hole diameter\nFILLETR = 1;            // Inside corner fillet radius\n\nmodule circlip_body() {\n    difference() {\n        // Main ring\n        difference() {\n            cylinder(h = THK, d = OD, center = true);\n            cylinder(h = THK + 0.2, d = ID, center = true);\n        }\n\n        // Axial installation gap\n        translate([0, OD/2 - GAP/2, 0])\n            cube([GAP, GAP, THK + 0.2], center = true);\n\n        // Inside chamfers (printable 45°)\n        translate([0, 0, -THK/2])\n            cylinder(h = THK, d1 = ID + 1.5, d2 = ID - 1.5, center = true);\n\n        // Outside chamfers\n        translate([0, 0, -THK/2])\n            cylinder(h = THK, d1 = OD - 1.5, d2 = OD + 1.5, center = true);\n    }\n}\n\nmodule lug_ear(ang = 0) {\n    rotate([0, 0, ang])\n    translate([0, (OD - EARH)/2, 0])\n    difference() {\n        union() {\n            // Ear block\n            translate([0, EARH/2, 0])\n                cube([EARW, EARH, THK], center = true);\n\n            // Fillet ring segment for strength\n            rotate_extrude(angle = 30)\n                translate([(OD - EARH)/2 - FILLETR, 0, 0])\n                    circle(r = FILLETR);\n        }\n\n        // Lug hole for pliers\n        translate([0, EARH - 2, 0])\n            rotate([90, 0, 0])\n                cylinder(h = EARW + 0.2, d = EARHOLE, center = true);\n\n        // Chamfer the top edges\n        translate([0, 0, THK/2])\n            cube([EARW + 0.2, EARH + 0.2, 1], center = true);\n    }\n}\n\nmodule circlip_assembly() {\n    union() {\n        circlip_body();\n        lug_ear(120);   // Ear 1\n        lug_ear(-120);  // Ear 2 (mirror)\n    }\n}\n\n// Render the circlip\ncirclip_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "eclip",
    "openscad_code": "// E-clip (external retaining ring) - realistic style, medium complexity\n// Overall diameter ~60 mm, shaft groove ~30 mm, thickness 2 mm\n// Designed for 3D printing with no overhangs\n\n$fn = 50;  // Smooth curves\n\n// Basic parameters\nouter_dia = 60;\ninner_dia = 30;\nthickness = 2;\nslot_width = 4;\ngrip_holes_dia = 6;\ngrip_hole_offset = (outer_dia + inner_dia) / 4;\n\n// Main ring body\nmodule ring_body() {\n    difference() {\n        // Outer ring\n        cylinder(h = thickness, r = outer_dia / 2, center = true);\n        \n        // Inner hole\n        cylinder(h = thickness + 0.2, r = inner_dia / 2, center = true);\n    }\n}\n\n// Entry slot for radial assembly\nmodule entry_slot() {\n    difference() {\n        // Slot base\n        translate([0, -outer_dia / 2, 0])\n            cube([slot_width, outer_dia / 2 - inner_dia / 2 + 1, thickness + 0.2], center = true);\n        \n        // Rounded inner corner\n        translate([0, -inner_dia / 2 - 1, 0])\n            rotate([0, 0, 180])\n            cylinder(h = thickness + 0.2, r = 2, center = true);\n    }\n}\n\n// Grip holes for installation pliers\nmodule grip_holes() {\n    for (a = [0, 180]) {\n        rotate([0, 0, a])\n            translate([grip_hole_offset, 0, 0])\n                cylinder(h = thickness + 0.2, r = grip_holes_dia / 2, center = true);\n    }\n}\n\n// Stiffening ribs on outer edge\nmodule stiffening_ribs() {\n    rib_width = 2;\n    rib_height = 1;\n    num_ribs = 12;\n    \n    for (i = [0 : num_ribs - 1]) {\n        angle = i * 360 / num_ribs;\n        // Skip ribs near entry slot\n        if (abs(angle) > 30 && abs(angle - 180) > 30) {\n            rotate([0, 0, angle])\n                translate([0, outer_dia / 2 - rib_height / 2, 0])\n                    cube([rib_width, rib_height, thickness], center = true);\n        }\n    }\n}\n\n// Assembly chamfer on bottom side\nmodule chamfer() {\n    difference() {\n        // Main ring\n        cylinder(h = thickness, r = outer_dia / 2, center = true);\n        \n        // Chamfer cut\n        translate([0, 0, -thickness / 2])\n            cylinder(h1 = thickness, h2 = 0, r1 = outer_dia / 2 - 1, r2 = outer_dia / 2, center = false);\n    }\n}\n\n// Complete e-clip assembly\nunion() {\n    // Main structure\n    difference() {\n        union() {\n            ring_body();\n            chamfer();\n            stiffening_ribs();\n        }\n        \n        // Cut features\n        grip_holes();\n        entry_slot();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "seeger",
    "openscad_code": "// Seeger External Retaining Ring (medium complexity, realistic style)\n$fn = 32;               // Smooth curved surfaces\nring_d = 60;            // Nominal shaft diameter\nradial_thk = 2.5;       // Radial wall thickness\naxial_thk = 2.2;        // Axial thickness\ngap = 6;                // Bore-entry gap width\nlug_w = 8;              // Grip-lug width\nlug_h = 5;              // Grip-lug height\nlug_l = 10;             // Grip-lug length (axial)\nchamfer = 0.6;          // Print-friendly chamfers\n\n// Overall outer diameter (rule-of-thumb ≈ 1.15 × shaft)\nouter_d = ring_d * 1.15;\n\n// Helper module for rounded rectangle extrusion (lugs)\nmodule rounded_rect(w, h, l, r = 1) {\n    linear_extrude(height = l, center = true) {\n        offset(r = r) offset(r = -r)\n            square([w, h], center = true);\n    }\n}\n\n// Main ring body with entry gap\nmodule ring_body() {\n    difference() {\n        // Solid ring\n        difference() {\n            cylinder(h = axial_thk, d = outer_d, center = true);\n            cylinder(h = axial_thk + 0.1, d = ring_d, center = true);\n        }\n        // Gap cut\n        translate([0, -outer_d/2, -axial_thk/2 - 0.1])\n            cube([gap, outer_d, axial_thk + 0.2], center = false);\n    }\n}\n\n// Grip lugs on each side of the gap\nmodule grip_lugs() {\n    lug_y = outer_d/2 - radial_thk/2;\n    for (mir = [0, 1]) {\n        mirror([0, mir, 0]) {\n            translate([-lug_w/2, lug_y, 0])\n                rounded_rect(lug_w, lug_h, lug_l, 1);\n        }\n    }\n}\n\n// Lightening chamfers on sharp edges for printability\nmodule chamfers() {\n    // Top & bottom ring edges\n    translate([0, 0, axial_thk/2])\n        cylinder(h = chamfer, d1 = outer_d - chamfer*2, d2 = outer_d, center = true);\n    translate([0, 0, -axial_thk/2])\n        cylinder(h = chamfer, d1 = outer_d, d2 = outer_d - chamfer*2, center = true);\n\n    // Inner chamfers\n    translate([0, 0, axial_thk/2])\n        cylinder(h = chamfer, d1 = ring_d, d2 = ring_d + chamfer*2, center = true);\n    translate([0, 0, -axial_thk/2])\n        cylinder(h = chamfer, d1 = ring_d + chamfer*2, d2 = ring_d, center = true);\n}\n\n// Assembly\nunion() {\n    difference() {\n        union() {\n            ring_body();\n            grip_lugs();\n        }\n        chamfers();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "lockring",
    "openscad_code": "// Realistic Lockring for 3D printing – outer Ø60 mm, inner Ø35 mm, 10 mm thick\n// All critical dimensions in mm, walls >= 2 mm, no overhangs >45°\n\n$fn = 48;          // global facet count for smoother curves\n\nmodule lockring() {\n    // main solid ring body\n    difference() {\n        cylinder(h = 10, d = 60);               // outer cylinder\n        cylinder(h = 12, d = 35);               // central bore (extra height to ensure clean cut)\n    }\n\n    // 4 notches on top for a hook wrench – simple vertical cuts\n    notch_width = 6;\n    notch_depth = 3;\n    notch_height = 4;\n    for (a = [0, 90, 180, 270]) {\n        rotate([0, 0, a])\n            translate([60/2 - notch_depth/2, -notch_width/2, 10])\n                cube([notch_depth, notch_width, notch_height]);\n    }\n\n    // internal threads – represented by stacked rings (no overhangs)\n    thread_height = 1.5;\n    thread_pitch = 2.5;\n    thread_count = 3;\n    thread_depth = 1.2;\n    \n    for (i = [0 : thread_count-1]) {\n        translate([0, 0, i * thread_pitch + 1])\n            difference() {\n                cylinder(h = thread_height, d = 35 + 2*thread_depth);\n                cylinder(h = thread_height + 0.1, d = 35);   // clearance\n            }\n    }\n\n    // chamfer on bottom inside edge – printable 45°\n    difference() {\n        translate([0, 0, -0.1])\n            cylinder(h = 2, d1 = 35, d2 = 38);    // conical chamfer\n        cylinder(h = 3, d = 35);                  // remove center\n    }\n\n    // tiny alignment dot on outer face\n    translate([60/2 + 0.1, 0, 5])\n        sphere(d = 2);\n}\n\nlockring();",
    "renders": true
  },
  {
    "mechanical_component": "wedge",
    "openscad_code": "// Wedge mechanical component - structural support block\n// Dimensions: 90mm x 50mm x 35mm max height\n\nmodule main_wedge() {\n    // Main wedge body with 2mm wall thickness\n    difference() {\n        // Outer wedge shape\n        linear_extrude(height = 35, center = false)\n            polygon(points = [\n                [0, 0],\n                [90, 0],\n                [90, 35],\n                [20, 50],\n                [0, 45]\n            ]);\n        \n        // Hollow interior\n        translate([2, 2, 2])\n            linear_extrude(height = 31, center = false)\n                polygon(points = [\n                    [0, 0],\n                    [86, 0],\n                    [86, 33],\n                    [22, 48],\n                    [0, 43]\n                ]);\n    }\n}\n\nmodule mounting_holes() {\n    // Counterbored mounting holes for M4 screws\n    hole_positions = [[15, 25], [75, 25], [45, 40]];\n    \n    for(pos = hole_positions) {\n        translate([pos[0], pos[1], 0]) {\n            // Counterbore 8mm diameter, 4mm deep\n            cylinder(h = 4, d = 8, $fn = 20);\n            // Through hole 4.5mm diameter\n            translate([0, 0, 4])\n                cylinder(h = 31, d = 4.5, $fn = 20);\n        }\n    }\n}\n\nmodule reinforcement_ribs() {\n    // Internal reinforcement ribs for structural strength\n    rib_positions = [30, 60];\n    \n    for(x = rib_positions) {\n        translate([x, 0, 2]) {\n            // Vertical rib\n            linear_extrude(height = 31, center = false)\n                polygon(points = [\n                    [0, 0],\n                    [2, 0],\n                    [2, 40],\n                    [0, 35]\n                ]);\n        }\n    }\n}\n\nmodule alignment_pins() {\n    // Alignment dowel pins on top surface\n    pin_positions = [[10, 45], [80, 45]];\n    \n    for(pos = pin_positions) {\n        translate([pos[0], pos[1], 35]) {\n            // Pin base\n            cylinder(h = 5, d = 6, $fn = 20);\n            // Tapered pin\n            translate([0, 0, 5])\n                cylinder(h1 = 4, h2 = 0, r1 = 3, r2 = 2, $fn = 20);\n        }\n    }\n}\n\nmodule grip_surface() {\n    // Knurled grip surface on sloped face\n    for(i = [0:4:45]) {\n        translate([i + 2, 48 - i * 0.8, 0]) {\n            rotate([0, 0, -30])\n                cube([2, 2, 35 - i * 0.6]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_wedge();\n    \n    // Add mounting holes\n    mounting_holes();\n    \n    // Add reinforcement ribs\n    reinforcement_ribs();\n    \n    // Add alignment pins\n    alignment_pins();\n    \n    // Add grip surface\n    grip_surface();\n}",
    "renders": true
  },
  {
    "mechanical_component": "standoff",
    "openscad_code": "// Realistic OpenSCAD Standoff – 80 mm tall, M4 threaded\n// Medium complexity, 3D-printable (no support)\n\n$fn = 36;          // global circle resolution\n\n// ---- parameters ----------------------------------------------------------\nstand_h      = 80;          // overall height\nouter_d      = 15;          // main barrel Ø\ninner_d      = 10;          // clearance Ø\nwall_t       = 2;           // wall thickness (>=2 mm for printing)\n\nthread_major = 4;           // M4\nthread_minor = 3.1;         // M4 tapping Ø\nthread_depth = 6;           // length of threaded section\n\nchamfer      = 1;           // top/bottom edge chamfer\nbase_flange  = 20;          // Ø of mounting flange\nflange_thick = 3;\n\n// ---- helper modules ------------------------------------------------------\nmodule chamfer_cylinder(h, d1, d2) {\n    // truncated cone for 45° chamfers\n    cylinder(h=h, d1=d1, d2=d2, center=true);\n}\n\nmodule standoff_body() {\n    difference() {\n        // outer shell\n        union() {\n            // main barrel\n            cylinder(h=stand_h, d=outer_d);\n            // bottom flange\n            translate([0,0,0])\n                cylinder(h=flange_thick, d=base_flange);\n            // top flange\n            translate([0,0,stand_h-flange_thick])\n                cylinder(h=flange_thick, d=base_flange);\n            // chamfers\n            translate([0,0,flange_thick])\n                chamfer_cylinder(chamfer, outer_d, outer_d-2*chamfer);\n            translate([0,0,stand_h-flange_thick-chamfer])\n                chamfer_cylinder(chamfer, outer_d-2*chamfer, outer_d);\n        }\n\n        // central clearance bore\n        cylinder(h=stand_h+2, d=inner_d, center=true);\n\n        // threaded section (bottom)\n        translate([0,0,-1])\n            cylinder(h=thread_depth+2, d=thread_minor, center=false);\n    }\n}\n\n// ---- screw recesses on flanges ------------------------------------------\nmodule flange_screws() {\n    screw_d = 4.2;                    // clearance for M4 screw\n    screw_off = base_flange/2 - wall_t;\n    for (a=[0:120:359]) {\n        rotate([0,0,a])\n            translate([screw_off,0,-1])\n                cylinder(h=flange_thick+2, d=screw_d);\n    }\n}\n\n// ---- main assembly -------------------------------------------------------\ndifference() {\n    standoff_body();\n    // subtract screw holes in flanges\n    flange_screws();\n}",
    "renders": true
  },
  {
    "mechanical_component": "insert",
    "openscad_code": "// Modern office chair with adjustable height, wheels, and ergonomic backrest\n// Overall dimensions: 600mm wide x 600mm deep x 1100-1300mm high\n\n$fn = 32;\nchair_width = 550;\nchair_depth = 550;\nseat_height = 500;\nbackrest_height = 650;\narmrest_height = 200;\n\n// Main seat cushion\nmodule seat_cushion() {\n    difference() {\n        // Main cushion\n        translate([0, 0, seat_height - 50])\n            cube([chair_width, chair_depth, 100], center=true);\n        \n        // Rounded top edges\n        translate([0, 0, seat_height + 40])\n            scale([0.95, 0.95, 1])\n                cylinder(h=60, r=chair_width/2, center=true);\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    difference() {\n        union() {\n            // Main backrest\n            translate([0, -chair_depth/2 + 20, seat_height + backrest_height/2])\n                cube([chair_width - 100, 50, backrest_height], center=true);\n            \n            // Lumbar support curve\n            translate([0, -chair_depth/2 + 20, seat_height + 200])\n                scale([0.8, 1, 0.3])\n                    sphere(r=150);\n        }\n        \n        // Cutout for ventilation\n        translate([0, -chair_depth/2 + 30, seat_height + 350])\n            cube([chair_width - 200, 60, 200], center=true);\n    }\n}\n\n// Armrest with adjustment mechanism\nmodule armrest() {\n    // Left armrest\n    translate([-chair_width/2 + 50, 0, 0])\n        union() {\n            // Support post\n            translate([0, 0, seat_height - 150])\n                cylinder(h=150, r=15);\n            \n            // Rest pad\n            translate([0, chair_depth/4, seat_height - armrest_height/2])\n                cube([80, 200, 40], center=true);\n            \n            // Adjustment button\n            translate([0, 0, seat_height - 100])\n                cylinder(h=20, r=8);\n        }\n    \n    // Right armrest (mirror)\n    mirror([1, 0, 0])\n        armrest();\n}\n\n// 5-star base with wheels\nmodule base() {\n    difference() {\n        // Central column\n        translate([0, 0, seat_height/2])\n            cylinder(h=seat_height, r=30);\n        \n        // Gas spring housing\n        translate([0, 0, 0])\n            cylinder(h=100, r=50);\n    }\n    \n    // 5 star legs\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([0, 0, 0])\n                union() {\n                    // Leg\n                    translate([150, 0, 0])\n                        cube([300, 30, 30], center=true);\n                    \n                    // Wheel\n                    translate([280, 0, -25])\n                        cylinder(h=50, r=25);\n                }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    seat_cushion();\n    backrest();\n    armrest();\n}",
    "renders": true
  },
  {
    "mechanical_component": "ferrule",
    "openscad_code": "// OpenSCAD Ferrule – medium-complexity, realistic, 3D-printable\n// Overall height 90 mm, Ø 30 mm, wall ≈ 2 mm\n\n$fn = 50;                       // smooth curves\n\n// Main parameters\nh_body   = 60;                  // tubular body height\nd_body   = 26;                  // inner Ø of body (add 2 mm wall)\nt_wall   = 2;                   // wall thickness\nr_nose   = 5;                   // radius of rounded nose\nh_sleeve = 30;                  // length of clamping sleeve\nd_sleeve = 36;                  // outer Ø of sleeve\nh_flange = 8;                   // height of mounting flange\nd_flange = 46;                  // outer Ø of flange\nn_holes  = 4;                   // mounting holes in flange\nd_hole   = 4.2;                 // clearance for M4 screw\nchamfer  = 1;                   // small 45° chamfers\n\nmodule ferrule() {\n    union() {\n        // --- tubular body --------------------------------------------------\n        difference() {\n            // outer\n            cylinder(h = h_body, d = d_body + 2*t_wall, center = false);\n            // inner bore\n            translate([0, 0, -0.1])                // slight overlap\n                cylinder(h = h_body + 0.2, d = d_body, center = false);\n        }\n\n        // --- rounded nose ----------------------------------------------------\n        translate([0, 0, h_body])\n            difference() {\n                sphere(r = r_nose);\n                // cut sphere flush with body\n                translate([0, 0, -r_nose])\n                    cube([d_body + 2*t_wall + 1,\n                          d_body + 2*t_wall + 1,\n                          r_nose*2], center = true);\n            }\n\n        // --- clamping sleeve -------------------------------------------------\n        translate([0, 0, h_body + r_nose])\n            difference() {\n                // outer sleeve\n                cylinder(h = h_sleeve, d = d_sleeve, center = false);\n                // inner cavity\n                translate([0, 0, -0.1])\n                    cylinder(h = h_sleeve + 0.2, d = d_body, center = false);\n                // slits for compression – three vertical cuts\n                for (a = [0:120:240])\n                    rotate([0, 0, a])\n                        translate([d_body/2 + t_wall, 0, 2])\n                            cube([t_wall + 1, 1.5, h_sleeve - 4]);\n            }\n\n        // --- mounting flange -------------------------------------------------\n        translate([0, 0, h_body + r_nose + h_sleeve])\n            difference() {\n                // flange disc\n                cylinder(h = h_flange, d = d_flange, center = false);\n                // central hole matches sleeve bore\n                translate([0, 0, -0.1])\n                    cylinder(h = h_flange + 0.2, d = d_body, center = false);\n                // mounting holes\n                for (a = [0:360/n_holes:359])\n                    rotate([0, 0, a])\n                        translate([d_flange/2 - d_hole, 0, h_flange/2])\n                            rotate([90, 0, 0])\n                                cylinder(h = d_flange, d = d_hole, center = true);\n            }\n\n        // --- small chamfers for printability ---------------------------------\n        translate([0, 0, h_body + r_nose + h_sleeve + h_flange])\n            cylinder(h = chamfer, d1 = d_flange, d2 = d_flange - 2*chamfer, center = false);\n    }\n}\n\nferrule();",
    "renders": true
  },
  {
    "mechanical_component": "thimble",
    "openscad_code": "// Realistic Thimble - Medium Complexity\n// Overall dimensions: ~30mm diameter, ~35mm height\n\n// Parameters\nthimble_h = 35;\nthimble_r = 15;\nwall_t = 2;\nband_h = 6;\nband_offset = 8;\nknurl_depth = 0.8;\nknurl_w = 1.2;\nknurl_h = 1.5;\nnum_knurls = 36;\nrim_h = 3;\nrim_r = 16;\ndimple_r = 2;\ndimple_depth = 1;\n\nmodule thimble_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = thimble_h, r1 = thimble_r, r2 = thimble_r - 2, $fn = 120);\n        \n        // Inner cavity\n        translate([0, 0, wall_t])\n        cylinder(h = thimble_h - wall_t, r1 = thimble_r - wall_t, r2 = thimble_r - wall_t - 2, $fn = 120);\n    }\n}\n\nmodule rim() {\n    difference() {\n        // Rim ring\n        translate([0, 0, thimble_h - rim_h])\n        cylinder(h = rim_h, r1 = rim_r, r2 = rim_r, $fn = 120);\n        \n        // Taper inner edge\n        translate([0, 0, thimble_h - rim_h])\n        cylinder(h = rim_h + 0.1, r1 = rim_r - wall_t, r2 = rim_r - wall_t - 1, $fn = 120);\n    }\n}\n\nmodule knurl_band() {\n    difference() {\n        // Band ring\n        translate([0, 0, band_offset])\n        cylinder(h = band_h, r1 = thimble_r + 0.5, r2 = thimble_r + 0.5, $fn = 120);\n        \n        // Remove inner part\n        translate([0, 0, band_offset])\n        cylinder(h = band_h + 0.1, r1 = thimble_r - wall_t, r2 = thimble_r - wall_t, $fn = 120);\n    }\n    \n    // Knurl pattern\n    for(i = [0 : num_knurls - 1]) {\n        rotate([0, 0, i * 360 / num_knurls])\n        translate([thimble_r + 0.5 - knurl_depth/2, 0, band_offset + band_h/2])\n        rotate([90, 0, 0])\n        scale([knurl_w, knurl_depth, knurl_h])\n        cube([1, 1, 1], center = true);\n    }\n}\n\nmodule dimples() {\n    // Small dimples for grip\n    for(i = [0 : 3]) {\n        angle = i * 90 + 15;\n        for(j = [0 : 2]) {\n            h = 12 + j * 6;\n            rotate([0, 0, angle])\n            translate([thimble_r - wall_t/2, 0, h])\n            sphere(r = dimple_r, $fn = 24);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    thimble_body();\n    rim();\n    knurl_band();\n    difference() {\n        // Remove dimples from body\n        thimble_body();\n        dimples();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "oring",
    "openscad_code": "// O-Ring Mechanical Component\n// Realistic Style, Medium Complexity\n\n// Main Parameters\n$fn = 50;\nouter_diameter = 80;\ninner_diameter = 60;\ncross_section = (outer_diameter - inner_diameter) / 2;\ncenter_diameter = inner_diameter + cross_section;\nring_thickness = 2;\n\n// O-Ring Module with realistic details\nmodule o_ring() {\n    // Main torus body\n    rotate_extrude(angle = 360, $fn = 100) {\n        translate([center_diameter/2, 0, 0]) {\n            circle(r = cross_section/2, $fn = 50);\n        }\n    }\n    \n    // Inner pressure relief groove\n    difference() {\n        rotate_extrude(angle = 360, $fn = 100) {\n            translate([center_diameter/2, 0, 0]) {\n                circle(r = cross_section/2 - 0.5, $fn = 50);\n            }\n        }\n        rotate_extrude(angle = 360, $fn = 100) {\n            translate([center_diameter/2, 0, 0]) {\n                circle(r = cross_section/2 - 1.5, $fn = 50);\n            }\n        }\n    }\n    \n    // Surface texture - small grooves for grip\n    for (i = [0:8:359]) {\n        rotate([0, 0, i]) {\n            translate([center_diameter/2, -cross_section/2 + 0.2, -cross_section/2 + 1]) {\n                cube([cross_section/2, cross_section - 0.4, 0.3]);\n            }\n        }\n    }\n}\n\n// Mounting flange with bolt holes\nmodule mounting_flange() {\n    // Flange base\n    cylinder(h = 5, r = 45, center = true);\n    \n    // Bolt holes (6 holes equally spaced)\n    for (i = [0:60:359]) {\n        rotate([0, 0, i]) {\n            translate([35, 0, 0]) {\n                cylinder(h = 6, r = 3, center = true);\n            }\n        }\n    }\n    \n    // Center hole for O-ring seating\n    cylinder(h = 6, r = inner_diameter/2 - 1, center = true);\n}\n\n// O-ring housing groove\nmodule o_ring_groove() {\n    // Main groove\n    difference() {\n        cylinder(h = 3, r = outer_diameter/2 + 1, center = true);\n        cylinder(h = 4, r = inner_diameter/2 - 1, center = true);\n    }\n    \n    // Chamfer edges\n    difference() {\n        cylinder(h = 3, r = outer_diameter/2 + 1, center = true);\n        translate([0, 0, 1.5]) {\n            cylinder(h = 1, r1 = outer_diameter/2 + 1, r2 = outer_diameter/2 - 1, center = false);\n        }\n    }\n    \n    difference() {\n        cylinder(h = 3, r = inner_diameter/2 - 1, center = true);\n        translate([0, 0, -1.5]) {\n            cylinder(h = 1, r1 = inner_diameter/2 - 1, r2 = inner_diameter/2 + 1, center = false);\n        }\n    }\n}\n\n// Assembly\nmodule o_ring_assembly() {\n    // Mounting flange at bottom\n    translate([0, 0, -10]) {\n        mounting_flange();\n    }\n    \n    // O-ring groove in flange\n    translate([0, 0, -7.5]) {\n        o_ring_groove();\n    }\n    \n    // The O-ring itself\n    translate([0, 0, -6]) {\n        o_ring();\n    }\n    \n    // Identification markings\n    translate([0, 0, -12.5]) {\n        for (i = [0:30:359]) {\n            rotate([0, 0, i]) {\n                translate([40, 0, 0]) {\n                    cube([2, 0.5, 0.5], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Render the assembly\no_ring_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "packing",
    "openscad_code": "// Packing Crate - Medium Complexity Realistic Style\n// 3D printable wooden shipping crate with structural reinforcements\n\n// Overall dimensions\ncrate_w = 100;\ncrate_d = 70;\ncrate_h = 80;\nwall_thickness = 2;\n\n// Slat dimensions\nslat_w = 8;\nslat_gap = 4;\nnum_slats_long = floor(crate_w / (slat_w + slat_gap));\nnum_slats_short = floor(crate_d / (slat_w + slat_gap));\n\nmodule crate_frame() {\n    // Bottom frame\n    difference() {\n        cube([crate_w, crate_d, wall_thickness]);\n        translate([10, 10, -0.1]) cube([crate_w-20, crate_d-20, wall_thickness+0.2]);\n    }\n    \n    // Top frame\n    translate([0, 0, crate_h-wall_thickness]) {\n        difference() {\n            cube([crate_w, crate_d, wall_thickness]);\n            translate([10, 10, -0.1]) cube([crate_w-20, crate_d-20, wall_thickness+0.2]);\n        }\n    }\n    \n    // Corner posts\n    for(x=[0, crate_w-wall_thickness]) {\n        for(y=[0, crate_d-wall_thickness]) {\n            translate([x, y, 0]) cube([wall_thickness, wall_thickness, crate_h]);\n        }\n    }\n}\n\nmodule side_slats(orientation=0) {\n    // 0 = long side, 90 = short side\n    length = orientation == 0 ? crate_w : crate_d;\n    height = crate_h - 2*wall_thickness;\n    num_slats = orientation == 0 ? num_slats_long : num_slats_short;\n    \n    for(i=[0:num_slats-1]) {\n        pos = i * (slat_w + slat_gap) + slat_gap/2;\n        if(pos + slat_w <= length) {\n            translate(orientation == 0 ? \n                [pos, 0, wall_thickness] : \n                [0, pos, wall_thickness]) {\n                cube(orientation == 0 ? \n                    [slat_w, wall_thickness, height] : \n                    [wall_thickness, slat_w, height]);\n            }\n        }\n    }\n}\n\nmodule handle_holes() {\n    // Handle cutouts on short sides\n    handle_w = 25;\n    handle_h = 10;\n    offset = 15;\n    \n    for(side=[0, 1]) {\n        translate([side * (crate_w-wall_thickness), offset, crate_h/2]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h=wall_thickness+0.2, r=handle_h/2, $fn=20);\n                    translate([0, 0, -0.1]) \n                        cylinder(h=wall_thickness+0.4, r=handle_h/2-2, $fn=20);\n                }\n            }\n        }\n    }\n}\n\nmodule lid_planks() {\n    plank_w = 12;\n    plank_gap = 2;\n    num_planks = floor(crate_w / (plank_w + plank_gap));\n    \n    for(i=[0:num_planks-1]) {\n        pos = i * (plank_w + plank_gap) + plank_gap/2;\n        if(pos + plank_w <= crate_w) {\n            translate([pos, wall_thickness, crate_h]) {\n                cube([plank_w, crate_d-2*wall_thickness, wall_thickness]);\n            }\n        }\n    }\n}\n\nmodule metal_corners() {\n    corner_size = 8;\n    corner_h = crate_h - 2*wall_thickness;\n    \n    for(x=[0, crate_w-corner_size]) {\n        for(y=[0, crate_d-corner_size]) {\n            translate([x, y, wall_thickness]) {\n                difference() {\n                    cube([corner_size, corner_size, corner_h]);\n                    translate([2, 2, -0.1]) \n                        cube([corner_size-4, corner_size-4, corner_h+0.2]);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    crate_frame();\n    \n    // Side slats\n    translate([0, 0, 0]) side_slats(0);\n    translate([0, crate_d-wall_thickness, 0]) side_slats(0);\n    translate([0, 0, 0]) rotate([0, 0, 90]) side_slats(90);\n    translate([crate_w-wall_thickness, 0, 0]) rotate([0, 0, 90]) side_slats(90);\n    \n    // Handle holes\n    handle_holes();\n    \n    // Lid\n    lid_planks();\n    \n    // Metal corner reinforcements\n    metal_corners();\n}",
    "renders": true
  },
  {
    "mechanical_component": "gland",
    "openscad_code": "// Cable Gland (PG-21 size, ~50 mm OD body) – medium realism\n// All dimensions in mm, printable without supports\nwall = 2;                // wall thickness for printability\nknurl_h = 1.2;           // knurl tooth height\nknurl_n = 18;            // number of knurls around the body\n\nmodule gland() {\n    // Main hexagonal body\n    union() {\n        // Hex flats for wrench\n        cylinder(h = 15, r = 25, $fn = 6);      // across-flats 50 mm\n\n        // Knurled grip ring\n        translate([0, 0, 15])\n            knurled_ring();\n\n        // Dome cap\n        translate([0, 0, 15 + 8])\n            cylinder(h = 10, r1 = 23, r2 = 21, $fn = 50);\n\n        // Entry thread boss (external thread M32×1.5)\n        translate([0, 0, -10])\n            cylinder(h = 10, r = 16.5, $fn = 50);\n    }\n\n    // Central bore for cable\n    difference() {\n        children();\n        translate([0, 0, -12])\n            cylinder(h = 50, r = 10.5, $fn = 50);   // 21 mm hole\n    }\n\n    // Four internal sealing ridges\n    for (z = [-8 : 5 : 7]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 1.5, r = 15, $fn = 50);\n                cylinder(h = 2, r = 10.5, $fn = 50);\n            }\n    }\n}\n\nmodule knurled_ring() {\n    difference() {\n        cylinder(h = 8, r = 25, $fn = 50);\n        for (i = [0 : knurl_n - 1])\n            rotate([0, 0, i * 360 / knurl_n])\n                translate([25 - knurl_h / 2, 0, -0.1])\n                    cube([knurl_h, 2, 8.2], center = true);\n    }\n}\n\n// Assemble the gland\ngland();",
    "renders": true
  },
  {
    "mechanical_component": "cap",
    "openscad_code": "// Realistic Cap with Mechanical Component Features\n// Medium complexity 3D printable cap with structural reinforcements\n\n$fn = 50;\n\n// Main dimensions\ncap_height = 55;\nbrim_width = 60;\ncrown_diameter = 52;\nwall_thickness = 2;\n\n// Structural reinforcement details\nrib_count = 6;\nvent_holes = 6;\nadjustment_strap_width = 20;\n\nmodule cap_top() {\n    // Crown dome with slight curvature\n    difference() {\n        // Main dome shape\n        scale([1, 1, 0.7])\n            sphere(d = crown_diameter);\n        \n        // Hollow out interior\n        translate([0, 0, -wall_thickness])\n            scale([1, 1, 0.7])\n                sphere(d = crown_diameter - 2*wall_thickness);\n    }\n}\n\nmodule cap_brim() {\n    // Curved brim with structural ribs underneath\n    union() {\n        // Top surface of brim\n        difference() {\n            // Main brim shape\n            translate([0, 0, -cap_height/2])\n                cylinder(h = 2, d1 = brim_width, d2 = brim_width + 10);\n            \n            // Cut center hole\n            translate([0, 0, -cap_height/2 - 1])\n                cylinder(h = 4, d = crown_diameter);\n        }\n        \n        // Structural ribs underneath\n        for(i = [0:rib_count-1]) {\n            rotate([0, 0, i * (360/rib_count)])\n                translate([brim_width/2 - 12, 0, -cap_height/2 + 1])\n                    cube([12, 1.5, 2], center = true);\n        }\n    }\n}\n\nmodule ventilation_holes() {\n    // Ventilation eyelets around crown\n    for(i = [0:vent_holes-1]) {\n        rotate([0, 0, i * (360/vent_holes)])\n            translate([crown_diameter/2 - wall_thickness - 3, 0, -cap_height/3])\n                rotate([90, 0, 0])\n                    cylinder(h = wall_thickness*2, d = 3, center = true);\n    }\n}\n\nmodule sweatband() {\n    // Internal sweatband with grip texture\n    difference() {\n        // Main sweatband ring\n        translate([0, 0, -cap_height/2 + 5])\n            cylinder(h = 8, d = crown_diameter - wall_thickness, center = true);\n        \n        // Inner cutout\n        translate([0, 0, -cap_height/2 + 5])\n            cylinder(h = 8, d = crown_diameter - wall_thickness - 6, center = true);\n    }\n    \n    // Grip ridges on inside\n    for(z = [-3, 0, 3]) {\n        translate([0, 0, -cap_height/2 + 5 + z])\n            difference() {\n                cylinder(h = 1, d = crown_diameter - wall_thickness - 2);\n                cylinder(h = 1.2, d = crown_diameter - wall_thickness - 4);\n            }\n    }\n}\n\nmodule adjustment_mechanism() {\n    // Velcro strap adjustment at back\n    translate([0, -crown_diameter/2 + 5, -cap_height/2 + 15])\n        union() {\n            // Strap base\n            cube([adjustment_strap_width, 3, 15], center = true);\n            \n            // Velcro hooks (simulated)\n            for(x = [-adjustment_strap_width/2 + 3 : 3 : adjustment_strap_width/2 - 3]) {\n                for(y = [-6 : 3 : 6]) {\n                    translate([x, y, 8])\n                        cylinder(h = 1, d = 1);\n                }\n            }\n        }\n}\n\nmodule logo_badge() {\n    // Raised logo badge on front\n    translate([0, crown_diameter/2 - 8, -cap_height/3])\n        union() {\n            // Badge base\n            cube([12, 2, 8], center = true);\n            \n            // Logo detail (simple cross)\n            translate([0, 1.5, 0])\n                cube([8, 0.5, 0.5], center = true);\n            translate([0, 0, 1.5])\n                cube([0.5, 0.5, 5], center = true);\n        }\n}\n\n// Main assembly\nunion() {\n    cap_top();\n    cap_brim();\n    ventilation_holes();\n    sweatband();\n    adjustment_mechanism();\n    logo_badge();\n}",
    "renders": true
  },
  {
    "mechanical_component": "plug",
    "openscad_code": "// Realistic 3-pin mains plug, 85 mm x 55 mm x 40 mm\n// Wall thickness ≥ 2 mm, all angles ≤ 45°, printable without supports\n\n// body shell\nmodule body_shell() {\n    difference() {\n        hull() {\n            translate([-42, -27, 0])    cube([84, 54, 36], center=false);\n            translate([-35, -20, 36])   cube([70, 40,  8], center=false);\n        }\n        // cavity for wiring\n        translate([-38, -23, 2]) cube([76, 46, 32], center=false);\n    }\n}\n\n// cable strain-relief sleeve\nmodule strain_relief() {\n    translate([0, 0, -12])\n        cylinder(h=12, d1=20, d2=14, $fn=30);\n}\n\n// earth pin (larger, rectangular)\nmodule earth_pin() {\n    translate([-22.5, 0, -18])\n        rotate([90, 0, 0])\n        linear_extrude(height=42, center=false)\n            offset(delta=1) offset(delta=-1)\n                square([7, 5], center=true);\n}\n\n// line & neutral pins (round)\nmodule round_pin(x) {\n    translate([x, 0, -18])\n        rotate([90, 0, 0])\n        cylinder(h=40, d=4.5, $fn=16);\n}\n\n// fuse compartment\nmodule fuse_holder() {\n    difference() {\n        translate([-15, 15, 10])\n            cube([30, 8, 10], center=true);\n        translate([-15, 15, 10])\n            cube([26, 6, 8], center=true);\n    }\n}\n\n// grip ribs on sides\nmodule side_grips() {\n    for (z=[6:4:26])\n        for (y=[-25, 25])\n            translate([0, y, z])\n                cube([85, 2, 2], center=true);\n}\n\n// screw post (for assembly)\nmodule screw_post() {\n    translate([30, 0, 18])\n        cylinder(h=16, d=6, $fn=16);\n    translate([30, 0, 18])\n        cylinder(h=16, d=3, $fn=16);\n}\n\n// final assembly\nunion() {\n    body_shell();\n    strain_relief();\n    earth_pin();\n    round_pin(11.5);\n    round_pin(22.5);\n    fuse_holder();\n    side_grips();\n    screw_post();\n}",
    "renders": true
  },
  {
    "mechanical_component": "disk",
    "openscad_code": "// Realistic Medium-Complexity Disk Mechanical Component (Brake Rotor)\n// 120 mm diameter, 12 mm thick, ventilated design with 5-bolt hub\n\n$fn = 64;               // global circle resolution\n\n// Overall dimensions\nouter_dia = 120;\ninner_dia = 70;\nthickness = 12;\nhub_dia = 46;\nbolt_circle_dia = 34;\nbolt_dia = 6;\nwall = 2;               // minimal printable wall thickness\nvent_gap = 4;\n\n// Main rotor disk\nmodule rotor_disk() {\n    difference() {\n        // solid outer ring\n        cylinder(h = thickness, d = outer_dia, center = true);\n        // central hole\n        cylinder(h = thickness + 2, d = inner_dia, center = true);\n    }\n}\n\n// Ventilation vanes between two friction rings\nmodule ventilation_vanes() {\n    vane_thick = 2;\n    vane_height = thickness - 2 * wall;\n    vane_count = 36;\n    \n    for (i = [0 : vane_count - 1]) {\n        rotate([0, 0, i * 360 / vane_count])\n            translate([0, (inner_dia + outer_dia) / 4, 0])\n                cube([vane_thick, (outer_dia - inner_dia) / 2 - vent_gap, vane_height], center = true);\n    }\n}\n\n// Inner hub with bolt holes\nmodule hub() {\n    difference() {\n        // hub cylinder\n        cylinder(h = thickness + 4, d = hub_dia, center = true);\n        // center bore\n        cylinder(h = thickness + 6, d = 20, center = true);\n        \n        // 5 bolt holes on bolt circle\n        for (a = [0 : 72 : 360 - 72]) {\n            rotate([0, 0, a])\n                translate([bolt_circle_dia / 2, 0, 0])\n                    cylinder(h = thickness + 6, d = bolt_dia, center = true);\n        }\n    }\n}\n\n// Friction ring surfaces (top & bottom)\nmodule friction_rings() {\n    difference() {\n        cylinder(h = wall, d = outer_dia, center = true);\n        cylinder(h = wall + 2, d = inner_dia, center = true);\n    }\n}\n\n// Final union\nunion() {\n    // bottom friction ring\n    translate([0, 0, -thickness / 2 + wall / 2])\n        friction_rings();\n    \n    // top friction ring\n    translate([0, 0, thickness / 2 - wall / 2])\n        friction_rings();\n    \n    // ventilation vanes between rings\n    ventilation_vanes();\n    \n    // central hub\n    hub();\n}",
    "renders": true
  },
  {
    "mechanical_component": "fork",
    "openscad_code": "$fn=50;\n\n// Fork parameters\nhandle_len = 110;\nhandle_d = 8;\nneck_len = 20;\nneck_d = 6;\nhead_len = 50;\nhead_w = 32;\nhead_th = 2.5;\ntine_w = 2.5;\ntine_gap = 3;\ntine_tip_r = 1.5;\nwall = 2;\n\nmodule fork_handle() {\n    // Main handle tube\n    difference() {\n        cylinder(h=handle_len, d=handle_d);\n        translate([0,0,wall])\n            cylinder(h=handle_len-wall*2, d=handle_d-wall*2);\n    }\n    \n    // Grip rings\n    for(i=[0:4]) {\n        translate([0,0,handle_len*0.15 + i*handle_len*0.15])\n            rotate([0,0,0])\n            difference() {\n                cylinder(h=3, d=handle_d+2);\n                cylinder(h=3+0.1, d=handle_d-0.5);\n            }\n    }\n}\n\nmodule fork_neck() {\n    // Tapered neck\n    translate([0,0,handle_len]) {\n        cylinder(h=neck_len, d1=handle_d, d2=neck_d);\n    }\n}\n\nmodule fork_head() {\n    translate([0,0,handle_len+neck_len]) {\n        // Head base plate\n        difference() {\n            cube([head_len, head_w, head_th], center=true);\n            translate([0,0,head_th/2+0.1])\n                cube([head_len-wall*2, head_w-wall*2, head_th+0.2], center=true);\n        }\n        \n        // Tines\n        n = 4;\n        for(i=[0:n-1]) {\n            y = -head_w/2 + tine_gap + tine_w/2 + i*(tine_w+tine_gap);\n            translate([head_len/2-tine_tip_r, y, 0]) {\n                // Tine body\n                hull() {\n                    translate([-(head_len-tine_tip_r*2), 0, 0])\n                        cylinder(h=head_th, d=tine_w);\n                    translate([0, 0, 0])\n                        sphere(r=tine_tip_r);\n                }\n                // Hollow tine\n                translate([-(head_len-tine_tip_r*2-wall), 0, 0])\n                    cube([head_len-tine_tip_r*2-wall, tine_w-wall, head_th-wall], center=true);\n            }\n        }\n        \n        // Reinforcement ribs\n        for(i=[0:n-1]) {\n            y = -head_w/2 + tine_gap + tine_w/2 + i*(tine_w+tine_gap);\n            translate([head_len/2-head_w/4, y, head_th/2])\n                cube([head_w/2, tine_w, head_th/2], center=true);\n        }\n    }\n}\n\nunion() {\n    fork_handle();\n    fork_neck();\n    fork_head();\n}",
    "renders": true
  },
  {
    "mechanical_component": "rod",
    "openscad_code": "// Realistic Rod Mechanical Component\n// Features: Threaded end, hex nut, smooth shaft, chamfered head, 2mm wall thickness\n\nmodule threaded_section(diameter=10, length=20, thread_pitch=1.5, threads=13) {\n    // Create threaded section using stacked cylinders\n    union() {\n        for (i = [0:threads-1]) {\n            translate([0, 0, i * thread_pitch]) {\n                cylinder(h=thread_pitch, d=diameter, $fn=6);\n            }\n        }\n    }\n}\n\nmodule hex_nut(size=12, thickness=6) {\n    // Hexagonal nut with center hole\n    difference() {\n        cylinder(h=thickness, d=size, $fn=6);\n        cylinder(h=thickness+1, d=6.5, $fn=16); // Thread clearance\n    }\n}\n\nmodule rod_head(diameter=18, length=8) {\n    // Chamfered rod head\n    difference() {\n        union() {\n            // Main head cylinder\n            cylinder(h=length, d=diameter, $fn=32);\n            // Chamfer\n            translate([0, 0, length]) {\n                cylinder(h=2, d1=diameter, d2=diameter-4, $fn=32);\n            }\n        }\n        // Center hole for weight reduction\n        cylinder(h=length+2, d=6.5, $fn=16);\n    }\n}\n\nmodule smooth_shaft(diameter=10, length=60) {\n    // Main smooth shaft\n    difference() {\n        cylinder(h=length, d=diameter, $fn=32);\n        // Center hole for weight reduction\n        cylinder(h=length+2, d=6.5, $fn=16);\n    }\n}\n\nmodule end_chamfer(diameter=10) {\n    // Chamfered end for smooth transition\n    cylinder(h=2, d1=0, d2=diameter, $fn=32);\n}\n\n// Main rod assembly\nunion() {\n    // Rod head\n    rod_head();\n    \n    // Smooth shaft\n    translate([0, 0, 8]) {\n        smooth_shaft();\n    }\n    \n    // Hex nut\n    translate([0, 0, 8+60]) {\n        hex_nut();\n    }\n    \n    // Threaded section\n    translate([0, 0, 8+60+6]) {\n        threaded_section();\n    }\n    \n    // End chamfer\n    translate([0, 0, 8+60+6+19.5]) {\n        end_chamfer();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "shaft",
    "openscad_code": "// Realistic Shaft Mechanical Component - Medium Complexity\n// 3D printable drive shaft with keyways, splines, and mounting flanges\n\n// Overall dimensions\nshaft_length = 100;\nshaft_diameter = 12;\nwall_thickness = 2;\n\nmodule shaft_body(length, diameter) {\n    // Main cylindrical shaft body\n    difference() {\n        cylinder(h=length, d=diameter, $fn=32);\n        \n        // Central bore for weight reduction\n        translate([0, 0, wall_thickness])\n            cylinder(h=length - 2*wall_thickness, d=diameter - 2*wall_thickness, $fn=32);\n    }\n}\n\nmodule keyway(length, diameter) {\n    // Standard keyway slot\n    key_width = diameter * 0.25;\n    key_depth = diameter * 0.15;\n    \n    translate([0, -diameter/2, -0.1])\n        cube([key_width, key_depth + 0.2, length + 0.2], center=true);\n}\n\nmodule splines(length, diameter, count=6) {\n    // Splined section for torque transmission\n    spline_height = diameter * 0.1;\n    spline_width = 360 / count;\n    \n    for(i=[0:count-1]) {\n        rotate([0, 0, i * spline_width])\n            translate([0, 0, -0.1])\n                cylinder(h=length + 0.2, d1=diameter + 2*spline_height, d2=diameter, $fn=3);\n    }\n}\n\nmodule mounting_flange(diameter, thickness) {\n    // Flange with bolt holes for mounting\n    flange_diameter = diameter * 2;\n    bolt_circle = flange_diameter * 0.7;\n    bolt_hole = 3.5;\n    \n    difference() {\n        cylinder(h=thickness, d=flange_diameter, $fn=32);\n        \n        // Central bore\n        cylinder(h=thickness + 0.2, d=diameter, $fn=32);\n        \n        // Bolt holes\n        for(i=[0:3]) {\n            rotate([0, 0, i * 90])\n                translate([bolt_circle/2, 0, -0.1])\n                    cylinder(h=thickness + 0.2, d=bolt_hole, $fn=16);\n        }\n    }\n}\n\nmodule chamfer(diameter, thickness) {\n    // 45-degree chamfer for smooth edges\n    difference() {\n        cylinder(h=thickness, d=diameter, $fn=32);\n        cylinder(h=thickness + 0.1, d=diameter - 2*thickness, $fn=32);\n    }\n}\n\n// Main assembly\nunion() {\n    // Left mounting flange\n    translate([0, 0, 0])\n        mounting_flange(shaft_diameter, wall_thickness * 2);\n    \n    // Left chamfer\n    translate([0, 0, wall_thickness * 2])\n        chamfer(shaft_diameter, wall_thickness);\n    \n    // Left keyway section\n    translate([0, 0, wall_thickness * 3])\n        shaft_body(15, shaft_diameter);\n    \n    translate([0, 0, wall_thickness * 3])\n        keyway(15, shaft_diameter);\n    \n    // Central splined section\n    translate([0, 0, wall_thickness * 3 + 15])\n        shaft_body(20, shaft_diameter);\n    \n    translate([0, 0, wall_thickness * 3 + 15])\n        splines(20, shaft_diameter);\n    \n    // Main shaft body\n    translate([0, 0, wall_thickness * 3 + 35])\n        shaft_body(30, shaft_diameter);\n    \n    // Right keyway section\n    translate([0, 0, wall_thickness * 3 + 65])\n        shaft_body(15, shaft_diameter);\n    \n    translate([0, 0, wall_thickness * 3 + 65])\n        keyway(15, shaft_diameter);\n    \n    // Right chamfer\n    translate([0, 0, wall_thickness * 3 + 80])\n        chamfer(shaft_diameter, wall_thickness);\n    \n    // Right mounting flange\n    translate([0, 0, wall_thickness * 3 + 80 + wall_thickness])\n        mounting_flange(shaft_diameter, wall_thickness * 2);\n}\n\n// Center the shaft\ntranslate([0, 0, -shaft_length/2 - wall_thickness * 2.5]) {\n    // Render the shaft\n    children();\n}",
    "renders": true
  },
  {
    "mechanical_component": "sheave",
    "openscad_code": "// Sheave (Pulley) - Medium complexity realistic style\n// 3D printable with 2mm wall thickness and no severe overhangs\n\n$fn = 36;\n\n// Main parameters\nsheave_d = 80;          // Overall diameter\nsheave_th = 25;         // Overall thickness\nrim_width = 10;         // Width of rim\nhub_d = 20;             // Hub diameter\nhub_l = 30;             // Hub length (extends both sides)\nbore_d = 8;             // Central bore for shaft\ngroove_d = 65;          // Rope groove diameter\ngroove_depth = 4;       // Rope groove depth\nspoke_count = 6;        // Number of spokes\nspoke_w = 6;            // Spoke width\nspoke_th = 3;           // Spoke thickness\nkeyway_w = 3;           // Keyway width\nkeyway_d = 1.5;         // Keyway depth\n\n// Main sheave body\nmodule sheave_body() {\n    difference() {\n        // Main disk\n        cylinder(d = sheave_d, h = sheave_th, center = true);\n        \n        // Central bore\n        cylinder(d = bore_d, h = hub_l + 2, center = true);\n        \n        // Rope groove\n        translate([0, 0, 0])\n            cylinder(d = groove_d, h = sheave_th + 1, center = true);\n        \n        // Keyway\n        translate([bore_d/2 + keyway_d/2, 0, 0])\n            cube([keyway_d, keyway_w, hub_l + 2], center = true);\n    }\n}\n\n// Spokes between hub and rim\nmodule spokes() {\n    for(i = [0 : spoke_count-1]) {\n        rotate([0, 0, i * 360/spoke_count])\n            translate([(hub_d + sheave_d - 2*rim_width)/4, 0, 0])\n                cube([spoke_w, (sheave_d - hub_d - 2*rim_width)/2, spoke_th], center = true);\n    }\n}\n\n// Hub with flanges\nmodule hub() {\n    difference() {\n        // Main hub cylinder\n        cylinder(d = hub_d, h = hub_l, center = true);\n        \n        // Central bore\n        cylinder(d = bore_d, h = hub_l + 2, center = true);\n        \n        // Keyway\n        translate([bore_d/2 + keyway_d/2, 0, 0])\n            cube([keyway_d, keyway_w, hub_l + 2], center = true);\n    }\n    \n    // Hub flanges\n    translate([0, 0, hub_l/2 - 2])\n        cylinder(d = hub_d + 8, h = 4, center = true);\n    translate([0, 0, -hub_l/2 + 2])\n        cylinder(d = hub_d + 8, h = 4, center = true);\n}\n\n// Rim with groove\nmodule rim() {\n    difference() {\n        // Outer rim\n        cylinder(d = sheave_d, h = sheave_th, center = true);\n        \n        // Inner cutout for spokes\n        cylinder(d = sheave_d - 2*rim_width, h = sheave_th + 2, center = true);\n    }\n    \n    // Rope groove detail\n    translate([0, 0, -sheave_th/2 + 2])\n        rotate_extrude(angle = 360)\n            translate([groove_d/2, 0, 0])\n                circle(r = groove_depth);\n}\n\n// Assembly\nunion() {\n    // Main sheave disk with groove\n    sheave_body();\n    \n    // Spokes for structural support\n    spokes();\n    \n    // Central hub\n    hub();\n    \n    // Reinforce rim\n    rim();\n}\n\n// Optional mounting holes for set screws\ntranslate([hub_d/2 * cos(45), hub_d/2 * sin(45), hub_l/2 - 3])\n    rotate([0, 90, 0])\n        cylinder(d = 3, h = 6, center = true);\ntranslate([hub_d/2 * cos(45), hub_d/2 * sin(45), -hub_l/2 + 3])\n    rotate([0, 90, 0])\n        cylinder(d = 3, h = 6, center = true);",
    "renders": true
  },
  {
    "mechanical_component": "wheel",
    "openscad_code": "// Realistic Wheel - Medium Complexity\n// 3D printable wheel with tire, rim, spokes and hub\n\n// Parameters\nwheel_diameter = 100;\ntire_width = 12;\nrim_diameter = 80;\nhub_diameter = 15;\nspoke_count = 8;\nspoke_width = 3;\nspoke_thickness = 2;\naxle_hole_diameter = 6;\nwall_thickness = 2;\n\n// Main wheel assembly\nmodule wheel() {\n    difference() {\n        union() {\n            // Tire - slightly larger than rim\n            color(\"black\") \n            translate([0, 0, -tire_width/2])\n            cylinder(h=tire_width, d=wheel_diameter, $fn=50);\n            \n            // Rim\n            color(\"silver\")\n            translate([0, 0, -tire_width/2 + 1])\n            cylinder(h=tire_width - 2, d=rim_diameter, $fn=50);\n            \n            // Spokes\n            spokes();\n            \n            // Hub\n            color(\"gray\")\n            translate([0, 0, -hub_diameter/2])\n            cylinder(h=hub_diameter, d=hub_diameter, $fn=30);\n        }\n        \n        // Center axle hole\n        translate([0, 0, -hub_diameter/2 - 1])\n        cylinder(h=hub_diameter + 2, d=axle_hole_diameter, $fn=20);\n        \n        // Lug nut holes (decorative)\n        lug_nut_holes();\n    }\n}\n\n// Generate spokes in star pattern\nmodule spokes() {\n    for(i = [0:spoke_count-1]) {\n        rotate([0, 0, i * 360/spoke_count]) {\n            // Main spoke\n            translate([rim_diameter/4, -spoke_width/2, -spoke_thickness/2])\n            cube([rim_diameter/2 - hub_diameter/2 - 2, spoke_width, spoke_thickness]);\n            \n            // Reinforcement at hub\n            translate([hub_diameter/2 + 2, -spoke_width/1.5, -spoke_thickness/1.5])\n            cube([5, spoke_width*1.33, spoke_thickness*1.33]);\n            \n            // Reinforcement at rim\n            translate([rim_diameter/2 - 7, -spoke_width/1.5, -spoke_thickness/1.5])\n            cube([5, spoke_width*1.33, spoke_thickness*1.33]);\n        }\n    }\n}\n\n// Decorative lug nut holes\nmodule lug_nut_holes() {\n    lug_radius = hub_diameter/2 + 5;\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([lug_radius, 0, -hub_diameter/2 - 1])\n            cylinder(h=hub_diameter + 2, d=3, $fn=6);\n        }\n    }\n}\n\n// Tire tread pattern\nmodule tire_tread() {\n    translate([0, 0, -tire_width/2])\n    rotate([0, 0, 0])\n    for(i = [0:359]) {\n        rotate([0, 0, i]) {\n            translate([wheel_diameter/2 - 2, 0, 0])\n            cube([2, 1, tire_width], center=true);\n        }\n    }\n}\n\n// Render the complete wheel\nrotate([90, 0, 0])\nwheel();",
    "renders": true
  },
  {
    "mechanical_component": "roller",
    "openscad_code": "// Roller - Medium Complexity Realistic Style\n// Overall dimensions: 80mm diameter, 100mm length\n\n$fn = 64;  // Smooth curves for printing\n\nmodule roller_body() {\n    // Main cylindrical body - 76mm diameter for 2mm wall thickness\n    difference() {\n        cylinder(h = 96, d = 80, center = true);\n        cylinder(h = 100, d = 76, center = true);\n    }\n}\n\nmodule end_caps() {\n    // Left end cap with bearing recess\n    translate([-48, 0, 0]) {\n        difference() {\n            cylinder(h = 8, d = 80);\n            // Bearing recess - 20mm diameter, 4mm deep\n            translate([4, 0, -1]) {\n                cylinder(h = 6, d = 20);\n            }\n            // Mounting holes - 4x M6 holes on 60mm PCD\n            for (i = [0:90:270]) {\n                rotate([0, 0, i]) {\n                    translate([30, 0, -1]) {\n                        cylinder(h = 10, d = 7);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Right end cap (mirror of left)\n    mirror([1, 0, 0]) {\n        translate([-48, 0, 0]) {\n            difference() {\n                cylinder(h = 8, d = 80);\n                translate([4, 0, -1]) {\n                    cylinder(h = 6, d = 20);\n                }\n                for (i = [0:90:270]) {\n                    rotate([0, 0, i]) {\n                        translate([30, 0, -1]) {\n                            cylinder(h = 10, d = 7);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule grip_pattern() {\n    // Diamond knurling pattern around center section\n    // 48 segments around circumference\n    for (i = [0:7.5:359]) {\n        rotate([0, 0, i]) {\n            // Left hand spiral\n            translate([0, 0, -40]) {\n                rotate([0, 90, 0]) {\n                    for (j = [0:5:90]) {\n                        translate([0, 0, j]) {\n                            rotate([0, 0, j * 2]) {\n                                polyhedron(\n                                    points = [\n                                        [38, 0, 0], [38, 2, 0], [38, 2, 2], [38, 0, 2],\n                                        [40, 0, 0], [40, 2, 0], [40, 2, 2], [40, 0, 2]\n                                    ],\n                                    faces = [\n                                        [0,1,2,3], [4,7,6,5], [0,4,5,1],\n                                        [2,6,7,3], [1,5,6,2], [0,3,7,4]\n                                    ]\n                                );\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Right hand spiral\n            translate([0, 0, -40]) {\n                rotate([0, 90, 0]) {\n                    for (j = [0:5:90]) {\n                        translate([0, 0, j]) {\n                            rotate([0, 0, -j * 2]) {\n                                polyhedron(\n                                    points = [\n                                        [38, 0, 0], [38, -2, 0], [38, -2, 2], [38, 0, 2],\n                                        [40, 0, 0], [40, -2, 0], [40, -2, 2], [40, 0, 2]\n                                    ],\n                                    faces = [\n                                        [0,1,2,3], [4,7,6,5], [0,4,5,1],\n                                        [2,6,7,3], [1,5,6,2], [0,3,7,4]\n                                    ]\n                                );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule shaft() {\n    // Central hollow shaft - 15mm OD, 10mm ID\n    difference() {\n        cylinder(h = 110, d = 15, center = true);\n        cylinder(h = 112, d = 10, center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Center the roller at origin\n    roller_body();\n    end_caps();\n    grip_pattern();\n    shaft();\n}",
    "renders": true
  },
  {
    "mechanical_component": "race",
    "openscad_code": "// Racing chair with mechanical components\n// Overall dimensions: 120mm height x 90mm width x 110mm depth\n\nmodule seat_base() {\n    // Main seat cushion - 5mm wall thickness\n    difference() {\n        translate([0, 0, 40]) cube([90, 80, 15], center=true);\n        translate([0, 0, 42.5]) cube([86, 76, 12], center=true);\n    }\n    \n    // Seat cushion top surface\n    translate([0, 0, 47.5]) cube([86, 76, 5], center=true);\n}\n\nmodule backrest() {\n    // Main backrest structure\n    difference() {\n        translate([0, -25, 80]) cube([90, 10, 70], center=true);\n        translate([0, -23, 80]) cube([86, 6, 66], center=true);\n    }\n    \n    // Backrest side supports\n    for(side = [-1, 1]) {\n        translate([side * 35, -20, 80]) cube([15, 10, 70], center=true);\n    }\n    \n    // Headrest\n    translate([0, -25, 115]) cube([60, 8, 20], center=true);\n}\n\nmodule armrest() {\n    // Armrest structure\n    translate([35, 30, 55]) cube([8, 25, 20], center=true);\n    translate([35, 42.5, 45]) cube([8, 10, 40], center=true);\n}\n\nmodule hydraulic_piston() {\n    // Main piston cylinder\n    cylinder(h=40, r=8, $fn=20);\n    \n    // Piston rod\n    translate([0, 0, 40]) cylinder(h=20, r=4, $fn=16);\n    \n    // Base cylinder\n    translate([0, 0, -5]) cylinder(h=10, r=12, $fn=20);\n}\n\nmodule wheel_fork() {\n    // Fork arms\n    for(angle = [0, 120, 240]) {\n        rotate([0, 0, angle]) {\n            translate([25, 0, 5]) cube([20, 6, 10], center=true);\n            // Wheel\n            translate([45, 0, 0]) rotate([90, 0, 0]) \n                cylinder(h=8, r=6, center=true, $fn=12);\n        }\n    }\n}\n\nmodule racing_chair() {\n    // Central support structure\n    union() {\n        // Seat assembly\n        seat_base();\n        \n        // Backrest\n        backrest();\n        \n        // Armrests\n        for(side = [-1, 1]) {\n            translate([side * 35, 0, 0]) armrest();\n        }\n        \n        // Hydraulic piston\n        translate([0, 0, 20]) hydraulic_piston();\n        \n        // Wheel base\n        translate([0, 0, 0]) wheel_fork();\n    }\n}\n\n// Render the racing chair\nracing_chair();",
    "renders": true
  },
  {
    "mechanical_component": "ball",
    "openscad_code": "// OpenSCAD Ball Mechanical Component\n// Realistic style, medium complexity\n// Overall diameter: 100mm (3D-printable size)\n\nmodule ball_component(radius) {\n    // Main ball body\n    difference() {\n        sphere(r = radius);\n        \n        // Hollow cavity with 2mm wall thickness\n        sphere(r = radius - 2);\n    }\n}\n\nmodule hex_bolt() {\n    // Hexagonal bolt head\n    cylinder(h = 6, r = 8, $fn = 6);\n    \n    // Threaded shaft\n    translate([0, 0, -8])\n        cylinder(h = 12, r = 5, $fn = 16);\n}\n\nmodule threaded_insert() {\n    // Internal threaded hole\n    cylinder(h = 15, r = 6, $fn = 16);\n}\n\nmodule reinforcement_ribs() {\n    // 8 radial ribs for structural support\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([35, 0, -10])\n                cube([15, 4, 20], center = true);\n    }\n}\n\nmodule bearing_seat() {\n    // Circular bearing seat on top\n    difference() {\n        cylinder(h = 5, r = 20);\n        cylinder(h = 5, r = 12);\n    }\n}\n\nmodule mounting_holes() {\n    // 4 mounting holes at 45-degree positions\n    for(i = [45, 135, 225, 315]) {\n        rotate([0, 0, i])\n            translate([35, 0, 0])\n                cylinder(h = 50, r = 3, $fn = 16);\n    }\n}\n\nmodule surface_grooves() {\n    // Equatorial grooves for grip/alignment\n    rotate([90, 0, 0])\n        for(z = [-30:15:30]) {\n            translate([0, 0, z])\n                cylinder(h = 3, r = 49, center = true);\n        }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Main ball structure\n        ball_component(50);\n        \n        // Reinforcement structure inside\n        translate([0, 0, 0])\n            reinforcement_ribs();\n        \n        // External features\n        ball_component(50);\n        \n        // Surface grooves\n        surface_grooves();\n        \n        // Bearing seat on top\n        translate([0, 0, 48])\n            bearing_seat();\n        \n        // Bolt heads around equator\n        for(i = [0:120:240]) {\n            rotate([0, 0, i])\n                translate([43, 0, 0])\n                    rotate([90, 0, 0])\n                        hex_bolt();\n        }\n    }\n    \n    // Mounting holes\n    mounting_holes();\n    \n    // Central threaded inserts\n    for(axis = [[1,0,0], [0,1,0], [0,0,1]]) {\n        rotate([0, 90 * (axis[0] + axis[1]), 90 * axis[2]])\n            translate([0, 0, 48])\n                threaded_insert();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "needle",
    "openscad_code": "// Medical Hypodermic Needle – realistic, medium complexity\n// Overall length ≈ 92 mm – prints vertically with no supports\n\n$fn = 36;          // smooth curves\n\nneedle_length = 92;\nhub_d         = 8;\nhub_h         = 12;\nneedle_od     = 1.6;\nneedle_id     = 0.9;\nluer_d        = 6;\nluer_h        = 7;\ngrip_d        = 12;\ngrip_h        = 4;\n\nmodule needle_body() {\n    difference() {\n        // main hub cylinder\n        cylinder(h = hub_h, d = hub_d, center = false);\n        // central bore\n        translate([0, 0, -0.1])\n            cylinder(h = hub_h + 0.2, d = luer_d, center = false);\n    }\n}\n\nmodule luer_lock() {\n    // external 6 % Luer taper\n    translate([0, 0, hub_h])\n        cylinder(h1 = luer_h, h2 = luer_h, r1 = luer_d/2, r2 = luer_d/2 - 0.2);\n}\n\nmodule grip_flanges() {\n    // six small flanges for finger grip\n    for (i = [0:5]) {\n        rotate([0, 0, i*60])\n            translate([hub_d/2 + 1, 0, hub_h/2])\n                cube([grip_h, 2, grip_h], center = true);\n    }\n}\n\nmodule needle_shaft() {\n    // hollow needle tube\n    difference() {\n        cylinder(h = needle_length - hub_h - luer_h, d = needle_od, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = needle_length - hub_h - luer_h + 0.2, d = needle_id, center = false);\n    }\n}\n\nmodule bevel_tip() {\n    // 15 degree bevel cut\n    translate([0, 0, needle_length - hub_h - luer_h])\n        rotate([0, 15, 0])\n            translate([0, 0, -needle_od])\n                cube([needle_od*2, needle_od*2, needle_od*2], center = true);\n}\n\nmodule cap() {\n    // protective cap (prints separately)\n    difference() {\n        translate([0, 0, 45])\n            cylinder(h = 40, d = 4, center = true);\n        translate([0, 0, 45])\n            cylinder(h = 42, d = needle_od + 0.6, center = true);\n    }\n}\n\n// Assembly – build only the needle\nunion() {\n    needle_body();\n    luer_lock();\n    grip_flanges();\n    translate([0, 0, hub_h + luer_h])\n        needle_shaft();\n    bevel_tip();\n}\n\n// Uncomment next line to add the protective cap\n// cap();",
    "renders": true
  },
  {
    "mechanical_component": "shield",
    "openscad_code": "// Mechanical component shield - realistic style, medium complexity\n// Dimensions: 100mm wide x 120mm tall x 15mm thick\n// Wall thickness: 2mm throughout\n\n// Main shield body\nmodule shield_body() {\n    difference() {\n        // Outer shell\n        linear_extrude(height=15, center=true, twist=0, scale=[1, 1]) {\n            offset(r=5) {\n                polygon(points=[\n                    [-45, -55], [45, -55], [50, -30], [50, 30], \n                    [30, 55], [-30, 55], [-50, 30], [-50, -30]\n                ]);\n            }\n        }\n        \n        // Inner cavity for weight reduction\n        translate([0, 0, 0])\n        linear_extrude(height=16, center=true) {\n            offset(r=7) {\n                polygon(points=[\n                    [-40, -50], [40, -50], [45, -25], [45, 25], \n                    [25, 50], [-25, 50], [-45, 25], [-45, -25]\n                ]);\n            }\n        }\n    }\n}\n\n// Reinforcement ribs\nmodule reinforcement_ribs() {\n    // Vertical rib\n    translate([0, 0, -6.5])\n    difference() {\n        cube([4, 110, 2], center=true);\n        translate([0, 0, 2])\n        cube([3.8, 109.8, 2], center=true);\n    }\n    \n    // Horizontal ribs (3 of them)\n    for(y=[-35, 0, 35]) {\n        translate([0, y, -6.5])\n        difference() {\n            cube([90, 4, 2], center=true);\n            translate([0, 0, 2])\n            cube([89.8, 3.8, 2], center=true);\n        }\n    }\n}\n\n// Mounting bracket for handle\nmodule mounting_bracket() {\n    translate([0, -45, 0])\n    difference() {\n        // Base plate\n        cube([30, 15, 8], center=true);\n        \n        // Screw holes\n        for(x=[-10, 10]) {\n            translate([x, 0, 4])\n            cylinder(h=10, r=2.5, center=true, $fn=16);\n        }\n        \n        // Cable routing groove\n        translate([0, 7.5, 2])\n        cube([28, 1, 4], center=true);\n    }\n}\n\n// Handle assembly\nmodule handle() {\n    translate([0, -45, -10])\n    union() {\n        // Handle grip\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=25, r=6, center=true, $fn=20);\n            cylinder(h=26, r=4, center=true, $fn=20);\n        }\n        \n        // Handle supports\n        for(x=[-10, 10]) {\n            translate([x, 0, 0])\n            cube([4, 6, 10], center=true);\n        }\n    }\n}\n\n// Mechanical joints - rivets\nmodule rivets() {\n    // Rivet positions around perimeter\n    for(i=[0:15]) {\n        angle = i * 22.5;\n        x = cos(angle) * 48;\n        y = sin(angle) * 58;\n        \n        // Skip bottom corners\n        if(abs(y) < 55 || abs(x) < 45) {\n            translate([x, y, 7.5])\n            cylinder(h=2, r=3, $fn=8);\n        }\n    }\n}\n\n// Ventilation holes\nmodule ventilation() {\n    for(y=[-30, -15, 0, 15, 30]) {\n        for(x=[-30, -15, 0, 15, 30]) {\n            if(!(abs(x) < 10 && abs(y) < 10)) {\n                translate([x, y, 7.5])\n                cylinder(h=15, r=3, center=true, $fn=16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    shield_body();\n    \n    // Reinforcements\n    reinforcement_ribs();\n    \n    // Mounting hardware\n    mounting_bracket();\n    handle();\n    \n    // Fasteners\n    rivets();\n    \n    // Ventilation (subtractive)\n    difference() {\n        children();\n        ventilation();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "cage",
    "openscad_code": "// OpenSCAD Cage mechanical_component – realistic, medium-complexity\n// Overall footprint: 100 x 70 mm, height 120 mm, wall-thickness 2 mm\n\n// Parameters\nwall_t = 2;\npost_r = 3;\nbar_r  = 2.5;\nfloor_h = 5;\nw = 100;\nd = 70;\nh = 120;\n\n// Main body\nmodule cage_assembly() {\n    // Floor plate\n    difference() {\n        translate([0, 0, floor_h/2])\n            cube([w, d, floor_h], center=true);\n        // Perimeter vent grid\n        for (i = [0:1])\n            for (j = [-40:20:40])\n                translate([i?j:0, i?0:j, 0])\n                    cube([i?2:40, i?40:2, floor_h+0.1], center=true);\n    }\n\n    // Corner posts\n    posts_pos = [[-w/2+post_r, -d/2+post_r],\n                 [ w/2-post_r, -d/2+post_r],\n                 [ w/2-post_r,  d/2-post_r],\n                 [-w/2+post_r,  d/2-post_r]];\n    for (p = posts_pos)\n        translate([p.x, p.y, h/2])\n            cylinder(r=post_r, h=h, $fn=12);\n\n    // Horizontal bars – front & back\n    for (level = [20:20:h-20])\n        for (x = [-w/2+10:20:w/2-10])\n            translate([x, -d/2+wall_t/2, level])\n                rotate([0, 90, 0])\n                    cylinder(r=bar_r, h=d-wall_t, $fn=8);\n\n    // Horizontal bars – left & right\n    for (level = [30:20:h-20])\n        for (y = [-d/2+10:20:d/2-10])\n            translate([w/2-wall_t/2, y, level])\n                rotate([90, 0, 0])\n                    cylinder(r=bar_r, h=w-wall_t, $fn=8);\n\n    // Top frame\n    difference() {\n        translate([0, 0, h+wall_t/2])\n            cube([w, d, wall_t], center=true);\n        // Center access hole\n        translate([0, 0, h])\n            cube([w*0.6, d*0.6, wall_t+0.1], center=true);\n    }\n}\n\n// Hinges for door (left side)\nmodule door_hinges() {\n    for (z = [h*0.3, h*0.7])\n        translate([-w/2+post_r, -d/2+post_r, z])\n            rotate([0, 90, 0])\n                cylinder(r=bar_r, h=6, $fn=8);\n}\n\n// Door panel\nmodule door() {\n    translate([-w/2+wall_t/2, -d/2+wall_t, h/2])\n        rotate([0, 90, 0])\n            difference() {\n                cube([h-10, w*0.4, wall_t], center=true);\n                // Window cut-outs\n                for (i = [-1:1])\n                    for (j = [-1:1])\n                        translate([i*25, j*15, 0])\n                            cube([15, 8, wall_t+0.1], center=true);\n            }\n}\n\n// Assembly\nunion() {\n    cage_assembly();\n    door_hinges();\n    translate([0, 0, 0])   // place door slightly rotated\n        rotate([0, 0, 20])\n            door();\n}",
    "renders": true
  },
  {
    "mechanical_component": "ring",
    "openscad_code": "// Ring mechanical component - realistic style\n// Medium complexity with structural elements and joints\n\n// Parameters\nring_outer = 40;          // Outer diameter\nring_inner = 36;          // Inner diameter (2mm wall thickness)\nring_height = 10;         // Ring height\nbolt_holes = 6;           // Number of bolt holes\nbolt_diameter = 4;        // Bolt hole diameter\nflange_thickness = 3;     // Flange thickness\nrib_height = 4;           // Structural rib height\nkey_width = 6;            // Keyway width\nkey_depth = 3;            // Keyway depth\n\nmodule ring_body() {\n    // Main ring structure\n    difference() {\n        cylinder(h=ring_height, d=ring_outer, $fn=100);\n        cylinder(h=ring_height+0.2, d=ring_inner, $fn=100);\n    }\n}\n\nmodule mounting_flange() {\n    // Bottom mounting flange with bolt holes\n    difference() {\n        // Flange base\n        cylinder(h=flange_thickness, d=ring_outer+10, $fn=100);\n        // Inner clearance\n        cylinder(h=flange_thickness+0.2, d=ring_inner+2, $fn=100);\n        \n        // Bolt holes array\n        for(i=[0:bolt_holes-1]) {\n            rotate([0, 0, i*360/bolt_holes])\n                translate([ring_outer/2+3, 0, -0.1])\n                    cylinder(h=flange_thickness+0.2, d=bolt_diameter, $fn=20);\n        }\n    }\n}\n\nmodule structural_ribs() {\n    // Radial ribs for reinforcement\n    for(i=[0:bolt_holes-1]) {\n        rotate([0, 0, i*360/bolt_holes+30])\n            translate([0, 0, 0])\n                cube([ring_outer/2-ring_inner/2-2, 3, rib_height], center=true);\n    }\n}\n\nmodule keyway() {\n    // Keyway for shaft alignment\n    rotate([0, 0, 0])\n        translate([0, ring_inner/2-key_depth/2-1, ring_height/2])\n            cube([key_width, key_depth+1, ring_height+0.2], center=true);\n}\n\nmodule chamfer_edges() {\n    // Top chamfer for easier assembly\n    difference() {\n        cylinder(h=ring_height, d=ring_outer, $fn=100);\n        translate([0, 0, -0.1])\n            cylinder(h=ring_height+0.2, d1=ring_outer, d2=ring_outer-2, $fn=100);\n    }\n}\n\nmodule top_surface() {\n    // Top surface with small recess for washer\n    difference() {\n        cylinder(h=1, d=ring_outer-4, $fn=100);\n        cylinder(h=1.2, d=ring_inner+2, $fn=100);\n    }\n}\n\n// Assembly\nunion() {\n    // Main ring with chamfered top\n    difference() {\n        chamfer_edges();\n        cylinder(h=ring_height+0.2, d=ring_inner, $fn=100);\n    }\n    \n    // Mounting flange at bottom\n    translate([0, 0, 0])\n        mounting_flange();\n    \n    // Structural ribs\n    translate([0, 0, ring_height-rib_height])\n        structural_ribs();\n    \n    // Keyway\n    keyway();\n    \n    // Top washer recess\n    translate([0, 0, ring_height-1])\n        top_surface();\n}",
    "renders": true
  },
  {
    "mechanical_component": "loop",
    "openscad_code": "// Loop Chair - Medium complexity mechanical_component with realistic styling\n// Overall dimensions: 600x550x800mm (scale down for printing)\n\n// Parameters\nseat_width = 450;\nseat_depth = 400;\nseat_thickness = 20;\nback_height = 400;\nleg_height = 450;\nleg_diameter = 30;\nloop_radius = 35;\nloop_thickness = 8;\n\n// Scale factor for 3D printing (target ~100mm height)\nprint_scale = 0.125;\n\n// Main chair module\nmodule chair() {\n    // Legs with loop connections\n    for (i = [0:3]) {\n        angle = i * 90;\n        translate([seat_width/2 * cos(angle), seat_depth/2 * sin(angle), 0])\n            leg_with_loop(angle);\n    }\n    \n    // Seat frame\n    difference() {\n        cube([seat_width, seat_depth, seat_thickness], center=true);\n        translate([0, 0, -1])\n            cube([seat_width-40, seat_depth-40, seat_thickness+2], center=true);\n    }\n    \n    // Backrest with loop details\n    translate([0, -seat_depth/2 + 20, back_height/2 + seat_thickness/2])\n        backrest();\n    \n    // Support loops between legs\n    for (i = [0:3]) {\n        angle = i * 90;\n        next_angle = ((i+1)%4) * 90;\n        x1 = seat_width/2 * cos(angle);\n        y1 = seat_depth/2 * sin(angle);\n        x2 = seat_width/2 * cos(next_angle);\n        y2 = seat_depth/2 * sin(next_angle);\n        \n        translate([(x1+x2)/2, (y1+y2)/2, leg_height/2])\n            rotate([0, 0, angle + 45])\n            support_loop();\n    }\n}\n\n// Individual leg with loop details\nmodule leg_with_loop(angle) {\n    // Main leg post\n    cylinder(h=leg_height, d=leg_diameter, center=false);\n    \n    // Loop detail at 2/3 height\n    translate([0, 0, leg_height*2/3])\n        rotate([90, 0, 0])\n        difference() {\n            torus(loop_radius, loop_thickness);\n            cube([loop_radius*2+loop_thickness, loop_thickness, loop_thickness*2], center=true);\n        }\n    \n    // Base pad\n    translate([0, 0, -5])\n        cylinder(h=10, d=leg_diameter+10, center=false);\n}\n\n// Backrest with loop pattern\nmodule backrest() {\n    // Main backrest frame\n    difference() {\n        cube([seat_width-20, 20, back_height], center=true);\n        translate([0, 0, -1])\n            cube([seat_width-60, 24, back_height-40], center=true);\n    }\n    \n    // Decorative loops\n    for (j = [-1, 1]) {\n        for (i = [-2:2]) {\n            x_pos = i * (seat_width/6);\n            y_pos = j * 5;\n            z_pos = j * (back_height/4);\n            translate([x_pos, y_pos, z_pos])\n                rotate([90, 0, 0])\n                torus(15, 4);\n        }\n    }\n}\n\n// Torus primitive for loops\nmodule torus(r_major, r_minor) {\n    rotate_extrude()\n        translate([r_major, 0, 0])\n            circle(r=r_minor);\n}\n\n// Support loop between legs\nmodule support_loop() {\n    rotate([90, 0, 0])\n    torus(50, 6);\n}\n\n// Scale for printing and render\nscale(print_scale)\n    chair();",
    "renders": true
  },
  {
    "mechanical_component": "tie",
    "openscad_code": "// Mechanical Tie with Structural Elements\n// 3D printable tie with realistic proportions and mechanical details\n\n// Main parameters\ntie_width = 35;\ntie_length = 140;\ntie_thickness = 3;\nknot_width = 25;\nknot_height = 20;\nmech_detail_size = 2;\nwall_thickness = 2;\n\nmodule tie_body() {\n    // Main tie shape - tapered rectangular prism\n    hull() {\n        translate([-tie_width/2, 0, 0])\n            cube([tie_width, tie_length, tie_thickness]);\n        translate([-tie_width/4, tie_length*0.8, 0])\n            cube([tie_width/2, tie_length*0.2, tie_thickness]);\n    }\n}\n\nmodule tie_knot() {\n    // Mechanical knot structure\n    difference() {\n        // Main knot body\n        translate([0, 25, -knot_height/2])\n            cube([knot_width, knot_height, knot_height], center=true);\n        \n        // Center hole for mechanical detail\n        translate([0, 25, 0])\n            cylinder(h=knot_height+1, r=knot_width/4, center=true);\n    }\n    \n    // Mechanical rivets on knot\n    for (i = [-1, 1]) {\n        translate([i*knot_width/3, 25, knot_height/2])\n            cylinder(h=mech_detail_size, r=mech_detail_size, $fn=6);\n    }\n}\n\nmodule structural_ribs() {\n    // Internal structural ribs for strength\n    for (y = [40:20:tie_length-30]) {\n        translate([0, y, tie_thickness/2])\n            cube([tie_width*0.8, 2, tie_thickness], center=true);\n    }\n}\n\nmodule mech_joint_detail() {\n    // Mechanical joint at tie back\n    translate([0, 50, -tie_thickness/2-1])\n        difference() {\n            cube([tie_width*0.3, 15, 2], center=true);\n            translate([0, 50, -1])\n                cylinder(h=4, r=tie_width*0.15, center=true);\n        }\n}\n\nmodule back_texture() {\n    // Mechanical texture on back for grip\n    for (y = [10:5:tie_length-10]) {\n        for (x = [-tie_width/2+5:5:tie_width/2-5]) {\n            translate([x, y, tie_thickness/2+0.1])\n                cube([2, 2, 0.5]);\n        }\n    }\n}\n\nmodule front_pattern() {\n    // Mechanical diagonal pattern\n    for (angle = [30:60:150]) {\n        rotate([0, 0, angle])\n            translate([0, tie_length/2, tie_thickness/2+0.1])\n                cube([2, tie_length*1.5, 0.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main tie structure\n    union() {\n        tie_body();\n        tie_knot();\n    }\n    \n    // Internal structure\n    %structural_ribs();\n    \n    // Mechanical details\n    mech_joint_detail();\n    \n    // Surface details\n    back_texture();\n    front_pattern();\n    \n    // Reinforcement edges\n    hull() {\n        translate([-tie_width/2-1, 5, -1])\n            cube([tie_width+2, 3, tie_thickness+2]);\n        translate([-tie_width/2-1, tie_length-8, -1])\n            cube([tie_width/2, 3, tie_thickness+2]);\n    }\n}\n\n// Mounting hole for mechanical attachment\ntranslate([0, tie_length-15, tie_thickness/2])\n    rotate([90, 0, 0])\n        cylinder(h=tie_thickness, r=2, center=true);",
    "renders": true
  },
  {
    "mechanical_component": "band",
    "openscad_code": "// Realistic Band (watch-style wrist band) with mechanical clasp\n// Dimensions: 120mm long, 22mm wide, 3mm thick\n// Proper 3D printing tolerances included\n\nmodule band_segment(length, width, thickness) {\n    // Main curved band segment\n    difference() {\n        // Outer curved shape\n        hull() {\n            for (i = [0:1]) {\n                translate([i * length, 0, 0])\n                    scale([1, 0.9, 1])\n                    sphere(d=width);\n            }\n        }\n        \n        // Hollow inner section for flexibility\n        translate([0, 0, -thickness/2 + 0.1])\n            scale([0.98, 0.9, 0.8])\n            band_segment(length, width*0.9, thickness);\n    }\n}\n\nmodule watch_lug(width, thickness) {\n    // Watch lug structure\n    difference() {\n        // Main lug body\n        translate([0, 0, thickness/2])\n            cube([8, width, thickness], center=true);\n        \n        // Spring bar hole\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=12, d=1.8, center=true);\n        \n        // Tapered edges\n        translate([4, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=width, d1=thickness, d2=thickness*0.5, center=true);\n        translate([-4, 0, 0])\n            rotate([0, -90, 0])\n                cylinder(h=width, d1=thickness, d2=thickness*0.5, center=true);\n    }\n}\n\nmodule clasp_mechanism(width, thickness) {\n    // Deployant clasp with mechanical parts\n    union() {\n        // Main clasp body\n        difference() {\n            translate([0, 0, 0])\n                cube([20, width, thickness*1.2], center=true);\n            \n            // Button holes\n            for (i = [-1, 1]) {\n                translate([5, i*(width/2 - 3), thickness*0.6])\n                    rotate([0, 90, 0])\n                        cylinder(h=6, r=2.5, center=true);\n            }\n            \n            // Groove for strap\n            translate([0, 0, -thickness*0.3])\n                cube([18, width*0.9, thickness*0.8], center=true);\n        }\n        \n        // Hinge pin\n        translate([-10, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=width + 2, d=1.6, center=true);\n        \n        // Clasp cover\n        translate([8, 0, thickness*0.8])\n            cube([12, width*0.85, thickness*0.6], center=true);\n        \n        // Micro-adjustment holes\n        for (i = [0:3]) {\n            translate([14, -width/2 + 2 + i*2, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=thickness*2, d=1.5, center=true);\n        }\n    }\n}\n\nmodule texture_pattern(length, width, thickness) {\n    // Raised texture pattern for grip\n    for (i = [1:length/4 - 1]) {\n        translate([i*4 - length/2 + 2, 0, thickness/2 + 0.1])\n            rotate([0, 90, 0])\n                cylinder(h=width*0.9, d=0.8, center=true);\n    }\n}\n\nmodule band_hardware() {\n    // Complete watch band assembly\n    band_thickness = 3;\n    band_width = 22;\n    \n    // Top strap\n    translate([-40, 0, 0])\n        band_segment(50, band_width, band_thickness);\n    translate([-40, 0, 0])\n        texture_pattern(50, band_width, band_thickness);\n    \n    // Watch lugs\n    translate([-15, 0, 0])\n        watch_lug(band_width, band_thickness);\n    translate([15, 0, 0])\n        rotate([0, 180, 0])\n            watch_lug(band_width, band_thickness);\n    \n    // Bottom strap\n    translate([40, 0, 0])\n        rotate([0, 180, 0])\n            band_segment(50, band_width, band_thickness);\n    translate([40, 0, 0])\n        rotate([0, 180, 0])\n            texture_pattern(50, band_width, band_thickness);\n    \n    // Clasp mechanism\n    translate([65, 0, 0])\n        clasp_mechanism(band_width, band_thickness);\n    \n    // Keeper loop\n    translate([25, 0, band_thickness/2 + 0.5])\n        difference() {\n            cube([10, band_width*0.95, band_thickness*0.8], center=true);\n            translate([0, 0, -0.5])\n                cube([8, band_width*0.75, band_thickness*0.6], center=true);\n        }\n}\n\n// Render the complete band\nband_hardware();",
    "renders": true
  },
  {
    "mechanical_component": "piston",
    "openscad_code": "$fa = 1;\n$fs = 1;\n\nmodule piston_assembly(){\n    \n    // Piston head parameters\n    piston_diameter = 50;\n    piston_height = 35;\n    wall_thickness = 2.5;\n    \n    // Piston pin parameters\n    pin_diameter = 12;\n    pin_length = 60;\n    \n    // Piston rod parameters\n    rod_length = 100;\n    rod_diameter = 15;\n    \n    // Ring grooves\n    groove_width = 2;\n    groove_depth = 1.5;\n    groove_spacing = 4;\n    \n    // Piston head with hollow core\n    difference(){\n        // Outer cylinder\n        cylinder(h=piston_height, d=piston_diameter, center=true);\n        \n        // Hollow interior\n        translate([0, 0, 0])\n            cylinder(h=piston_height+2, d=piston_diameter-2*wall_thickness, center=true);\n            \n        // Top combustion chamber depression\n        translate([0, 0, piston_height/2-2])\n            cylinder(h=4, d=piston_diameter*0.7, center=false);\n    }\n    \n    // Ring grooves\n    for(i=[1:3]){\n        translate([0, 0, piston_height/2-5-i*groove_spacing])\n            rotate_extrude(angle=360)\n                translate([(piston_diameter-groove_depth)/2, 0, 0])\n                    square([groove_depth, groove_width]);\n    }\n    \n    // Piston pin bosses\n    difference(){\n        union(){\n            // Left boss\n            translate([-piston_diameter/2+5, 0, 0])\n                cube([10, pin_diameter+4, piston_height], center=true);\n            \n            // Right boss\n            translate([piston_diameter/2-5, 0, 0])\n                cube([10, pin_diameter+4, piston_height], center=true);\n        }\n        \n        // Pin hole through bosses\n        rotate([90, 0, 0])\n            translate([0, 0, 0])\n                cylinder(h=piston_diameter+20, d=pin_diameter, center=true);\n    }\n    \n    // Skirt slots for oil return\n    for(i=[0:3]){\n        rotate([0, 0, i*90])\n            translate([0, piston_diameter/2-wall_thickness-1, -piston_height/4])\n                cube([6, wall_thickness+2, piston_height/2], center=true);\n    }\n    \n    // Piston rod (connecting rod)\n    translate([0, 0, -rod_length/2-piston_height/2-2])\n        rotate([90, 0, 0])\n            union(){\n                // Rod shaft\n                cylinder(h=rod_length, d=rod_diameter, center=true);\n                \n                // Big end (crank bearing)\n                translate([0, -rod_length/2+10, 0])\n                    difference(){\n                        cylinder(h=20, d=rod_diameter*2, center=true);\n                        translate([0, 0, 0])\n                            cylinder(h=25, d=rod_diameter*0.7, center=true);\n                    }\n                \n                // Small end (piston pin bearing)\n                translate([0, rod_length/2-10, 0])\n                    difference(){\n                        cylinder(h=20, d=rod_diameter*1.5, center=true);\n                        translate([0, 0, 0])\n                            cylinder(h=25, d=pin_diameter+1, center=true);\n                    }\n            }\n    \n    // Oil drain holes\n    for(i=[0:1]){\n        rotate([0, 0, 45+i*90])\n            translate([0, piston_diameter/2-wall_thickness/2, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=wall_thickness+2, d=3, center=true);\n    }\n    \n    // Identification markings (embossed text placeholder)\n    translate([0, 0, piston_height/2+1])\n        rotate([0, 180, 0])\n            linear_extrude(height=0.5)\n                text(\"STD 0.50\", size=4, halign=\"center\");\n}\n\n// Render the piston\npiston_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "diaphragm",
    "openscad_code": "// Diaphragm mechanical component - realistic style, medium complexity\n$fn = 36;\n\n// Main parameters\nmodule diaphragm() {\n    // Outer ring dimensions\n    outer_diameter = 80;\n    inner_diameter = 40;\n    thickness = 6;\n    ring_width = (outer_diameter - inner_diameter) / 2;\n    \n    // Diaphragm membrane\n    membrane_thickness = 1.5;\n    membrane_diameter = inner_diameter;\n    \n    // Mounting holes\n    hole_diameter = 4;\n    hole_count = 4;\n    hole_radius = outer_diameter/2 + 5;\n    \n    // Reinforcement ribs\n    rib_count = 8;\n    rib_thickness = 2;\n    rib_height = 3;\n    \n    // Central boss\n    boss_diameter = 20;\n    boss_height = 8;\n    boss_hole = 8;\n    \n    // Outer mounting ring\n    difference() {\n        cylinder(h = thickness, d = outer_diameter);\n        \n        // Inner hole\n        cylinder(h = thickness + 2, d = inner_diameter);\n        \n        // Mounting holes\n        for(i = [0:hole_count-1]) {\n            rotate([0, 0, i * 360/hole_count])\n                translate([hole_radius, 0, -1])\n                    cylinder(h = thickness + 2, d = hole_diameter);\n        }\n    }\n    \n    // Membrane\n    translate([0, 0, thickness - membrane_thickness])\n        cylinder(h = membrane_thickness, d = membrane_diameter);\n    \n    // Reinforcement ribs\n    for(i = [0:rib_count-1]) {\n        rotate([0, 0, i * 360/rib_count + 360/(rib_count*2)])\n            translate([inner_diameter/2 + ring_width/2, 0, thickness - membrane_thickness])\n                cube([ring_width, rib_thickness, rib_height + membrane_thickness], center = true);\n    }\n    \n    // Central boss\n    translate([0, 0, thickness])\n        difference() {\n            cylinder(h = boss_height, d = boss_diameter);\n            cylinder(h = boss_height + 2, d = boss_hole);\n        }\n    \n    // Boss support ribs\n    for(i = [0:4]) {\n        rotate([0, 0, i * 90])\n            translate([boss_diameter/2 - 2, 0, thickness])\n                cube([4, 2, boss_height/2], center = true);\n    }\n    \n    // Outer chamfer\n    difference() {\n        cylinder(h = 2, d = outer_diameter + 2);\n        translate([0, 0, -1])\n            cylinder(h = 4, d = outer_diameter - 4);\n    }\n}\n\ndiaphragm();",
    "renders": true
  },
  {
    "mechanical_component": "link",
    "openscad_code": "// Realistic medium-complexity mechanical component: connecting link with pinned joints\n// Overall length 100 mm, printable wall thickness 2 mm\n\n$fn = 36;\n\nmodule pinHole(d=6, l=20) {              // clearance hole for Ø6 pin\n    rotate([0,90,0]) cylinder(d=d, h=l, $fn=20);\n}\n\nmodule boss(d=12, h=8) {                 // thickened eye ends\n    cylinder(d=d, h=h);\n}\n\nmodule eyeEnd(d=12, h=8) {               // one end with pin hole\n    difference() {\n        boss(d, h);\n        // central pin hole\n        translate([0,0,-1]) pinHole(d=6.2, l=h+2);\n        // chamfers for printability\n        translate([0,0,-0.5]) cylinder(d1=d+2, d2=d, h=1);\n        translate([0,0,h+0.5]) cylinder(d1=d+2, d2=d, h=1);\n    }\n}\n\nmodule webSlot(n=5) {                    // lightening slots in web\n    for(i=[-n:n]) {\n        translate([i*12,0,0])\n            cube([8,4,20], center=true);\n    }\n}\n\nmodule linkBody() {                      // I-beam shaped link\n    // flanges\n    translate([0,0,9]) cube([80,16,4], center=true);\n    translate([0,0,-9]) cube([80,16,4], center=true);\n\n    // web between flanges\n    difference() {\n        cube([84,4,18], center=true);\n        webSlot();\n    }\n    \n    // gussets for strength\n    for(side=[-1,1])\n    translate([30*side,8*side,0])\n    rotate([0,0,45*side])\n        cube([8,2,18], center=true);\n}\n\nmodule link() {\n    union() {\n        linkBody();\n        \n        // left eye end\n        translate([-40,0,0]) eyeEnd();\n        \n        // right eye end\n        translate([40,0,0]) eyeEnd();\n    }\n}\n\nlink();",
    "renders": true
  },
  {
    "mechanical_component": "armature",
    "openscad_code": "// Armature - Realistic Style - Medium Complexity\n// Overall dimensions: 120mm (H) x 80mm (W) x 60mm (D)\n// Wall thickness: 2mm throughout for 3D printability\n\n// Base plate with mounting holes\nmodule base_plate() {\n    difference() {\n        // Main base\n        translate([0, 0, 2]) cube([60, 80, 4], center=true);\n        \n        // Mounting holes - 4 corners\n        for (x = [-25, 25])\n            for (y = [-35, 35])\n                translate([x, y, 1]) cylinder(h=6, r=2.5, $fn=20);\n    }\n}\n\n// Vertical column with structural ribs\nmodule vertical_column() {\n    union() {\n        // Main column tube\n        difference() {\n            cylinder(h=100, r=10, center=true, $fn=32);\n            translate([0, 0, 0]) cylinder(h=104, r=8, center=true, $fn=32);\n        }\n        \n        // Structural ribs every 20mm\n        for (z = [-40:20:40]) {\n            translate([0, 0, z]) rotate([0, 0, 0])\n                cube([4, 20, 2], center=true);\n            translate([0, 0, z]) rotate([0, 0, 90])\n                cube([4, 20, 2], center=true);\n        }\n    }\n}\n\n// Articulated joint with bearing surfaces\nmodule joint(h=15) {\n    difference() {\n        union() {\n            // Main joint body\n            cylinder(h=h, r=12, center=true, $fn=32);\n            \n            // Reinforcement ring\n            translate([0, 0, -h/2]) cylinder(h=3, r=14, center=false, $fn=32);\n            translate([0, 0, h/2-3]) cylinder(h=3, r=14, center=false, $fn=32);\n        }\n        \n        // Bearing hole\n        translate([0, 0, 0]) cylinder(h=h+2, r=6, center=true, $fn=32);\n        \n        // Set screw hole\n        rotate([90, 0, 0])\n            translate([0, 0, 0]) cylinder(h=25, r=2.5, center=true, $fn=20);\n    }\n}\n\n// Horizontal arm segment\nmodule arm_segment(length=35, include_joint=true) {\n    union() {\n        // Main arm tube\n        difference() {\n            translate([length/2, 0, 0]) cube([length, 16, 16], center=true);\n            translate([length/2, 0, 0]) cube([length+2, 12, 12], center=true);\n        }\n        \n        // End cap\n        translate([length, 0, 0]) cube([2, 16, 16], center=true);\n        \n        // Support gussets\n        for (x = [length/4, 3*length/4]) {\n            translate([x, 0, 8]) cube([2, 16, 4], center=true);\n            translate([x, 0, -8]) cube([2, 16, 4], center=true);\n        }\n        \n        // Optional joint at end\n        if (include_joint) {\n            translate([length, 0, 0]) rotate([0, 90, 0]) joint();\n        }\n    }\n}\n\n// Cable management clips\nmodule cable_clips() {\n    for (z = [-30:15:30]) {\n        translate([0, 0, z]) rotate([0, 90, 0]) {\n            difference() {\n                // Clip body\n                translate([0, 12, 0]) cube([6, 8, 4], center=true);\n                \n                // Cable slot\n                translate([0, 12, 0]) cube([8, 4, 2], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) base_plate();\ntranslate([0, 0, 7]) vertical_column();\n\n// First arm segment\ntranslate([0, 0, 107]) rotate([0, 90, 0]) joint();\ntranslate([12, 0, 107]) rotate([0, 90, 0]) arm_segment(35, true);\n\n// Second arm segment\ntranslate([47, 0, 107]) rotate([0, 90, 0]) joint();\ntranslate([59, 0, 107]) rotate([0, 90, 0]) arm_segment(30, false);\n\n// Add cable management\ntranslate([0, 0, 107]) cable_clips();",
    "renders": true
  },
  {
    "mechanical_component": "rotor",
    "openscad_code": "// Realistic Rotor (Turbine-style) – medium complexity\n// Overall height ≈ 70 mm, OD ≈ 60 mm – printable on most FDM beds\n\n// Wall thickness target 2 mm\n$fn = 36;               // smooth curves\n\nmodule hub() {\n    // central shaft hub\n    difference() {\n        cylinder(h = 30, d = 20);           // main hub body\n        translate([0,0,-1])\n            cylinder(h = 32, d = 14);       // 3 mm wall\n        // keyway slot\n        translate([10, -2, 0])\n            cube([4, 4, 30], center = true);\n    }\n}\n\nmodule blade() {\n    // single turbine blade, 2 mm thick shell\n    difference() {\n        // outer aerofoil shape\n        hull() {\n            translate([0,0,0]) sphere(d = 10);\n            translate([0,0,30]) sphere(d = 5);\n            translate([0,15,15]) sphere(d = 8);\n        }\n        // hollow core\n        translate([0,-1,-1]) scale([0.7,0.7,0.7])\n            hull() {\n                translate([0,0,0]) sphere(d = 10);\n                translate([0,0,30]) sphere(d = 5);\n                translate([0,15,15]) sphere(d = 8);\n            }\n    }\n}\n\nmodule rotor_disk() {\n    // main disk with blades\n    difference() {\n        cylinder(h = 4, d = 60);             // disk body\n        cylinder(h = 6, d = 56);             // 2 mm wall\n    }\n    \n    // 8 blades around the disk\n    for(i = [0:7]) {\n        rotate([0,0,i*45])\n            translate([25,0,2])\n                rotate([90,0,0])\n                    blade();\n    }\n}\n\nmodule shaft() {\n    // bottom shaft extension, printable without support\n    cylinder(h = 25, d1 = 14, d2 = 10);\n}\n\nmodule cooling_holes() {\n    // radial cooling holes in hub\n    for(i = [0:3]) {\n        rotate([0,0,i*90])\n            translate([9,0,15])\n                rotate([0,90,0])\n                    cylinder(h = 20, d = 4);\n    }\n}\n\n// assembly\nunion() {\n    hub();\n    translate([0,0,30]) rotor_disk();\n    translate([0,0,-25]) shaft();\n    cooling_holes();\n}",
    "renders": true
  },
  {
    "mechanical_component": "stator",
    "openscad_code": "// Stator for a 3-phase brushless motor — medium-complexity, printable\n// Outer diameter ≈ 110 mm, stack height ≈ 30 mm, 9 teeth\n\n$fn = 36;\n\n// Overall parameters\nstator_OD = 110;          // stator outer diameter\nstator_ID = 62;           // stator inner diameter (air-gap)\nstack_h = 30;             // lamination stack height\ntooth_width = 7;          // tooth body width\nslot_depth = 12;          // tooth length from ID to slot bottom\nslot_open = 2.2;          // opening toward air-gap (wire entry)\nwall = 2;                 // printable wall thickness\nsegments = 9;             // 9 teeth / slots\n\n// Mounting ears\near_thick = wall;\near_hole = 4.5;\near_R = (stator_OD + 20)/2;\n\n// Lamination details\nlam_thick = 0.5;\nlams = floor(stack_h / lam_thick);\n\n// Create one tooth profile (2-D polygon)\nmodule tooth_profile() {\n    // Points for half-tooth (symmetric around Y axis)\n    p = [\n        [stator_ID/2, 0],                                      // root center\n        [stator_ID/2, slot_open/2],                            // slot opening\n        [stator_ID/2 + slot_depth, tooth_width/2],             // tooth side\n        [stator_ID/2 + slot_depth, -tooth_width/2 + wall],     // slot bottom\n        [stator_OD/2 - wall, -tooth_width/2 + wall],           // outer arc start\n        [stator_OD/2 - wall, tooth_width/2 - wall],            // mirrored\n        [stator_ID/2 + slot_depth, tooth_width/2 - wall],\n        [stator_ID/2 + slot_depth, -tooth_width/2],\n        [stator_ID/2, -slot_open/2],\n        [stator_ID/2, 0]                                       // close\n    ];\n    polygon(p, convexity=4);\n}\n\n// Full tooth with slot voids\nmodule tooth() {\n    difference() {\n        // Main tooth solid\n        linear_extrude(height = stack_h)\n            tooth_profile();\n        \n        // Wire slot cavity\n        translate([0, -tooth_width/2 - 0.1, 0])\n            cube([slot_depth + 0.2, tooth_width + 0.2, stack_h + 0.2], center=false);\n    }\n}\n\n// Mounting ears\nmodule ears() {\n    for (a = [0:120:240])\n        rotate([0, 0, a])\n            translate([ear_R, 0, stack_h/2])\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h = ear_thick, r = 7);\n                        cylinder(h = ear_thick + 0.2, r = ear_hole/2);\n                    }\n}\n\n// Lamination ridges (printable without support)\nmodule ridges() {\n    for (i = [0:1:lams-1])\n        translate([0, 0, i*lam_thick])\n            linear_extrude(height = lam_thick*0.8)\n                difference() {\n                    circle(d = stator_OD);\n                    circle(d = stator_ID);\n                }\n}\n\n// Build stator\nunion() {\n    // Main ring with teeth and slots\n    for (i = [0:segments-1])\n        rotate([0, 0, i*(360/segments)])\n            tooth();\n    \n    // Outer ring closure\n    difference() {\n        cylinder(h = stack_h, d = stator_OD);\n        cylinder(h = stack_h + 0.2, d = stator_ID + 2*slot_depth);\n    }\n    \n    // Lamination effect\n    ridges();\n    \n    // Mounting ears\n    ears();\n}",
    "renders": true
  },
  {
    "mechanical_component": "chain",
    "openscad_code": "// Realistic chain link module with proper proportions for 3D printing\n// Each link is approximately 25mm x 12mm x 4mm with 2mm wall thickness\n\nmodule chain_link() {\n    // Main oval body of the link\n    difference() {\n        // Outer oval shape\n        scale([1.2, 1, 1])\n        cylinder(h=4, d=12, $fn=32);\n        \n        // Inner hole - offset to create realistic oval chain link\n        translate([0, 0, -0.5])\n        scale([0.8, 0.6, 1])\n        cylinder(h=5.5, d=10, $fn=32);\n    }\n    \n    // Reinforcement ridges on top and bottom\n    translate([0, 0, 4])\n    scale([1.2, 1, 0.2])\n    cylinder(h=1, d=12, $fn=32);\n    \n    translate([0, 0, -1])\n    scale([1.2, 1, 0.2])\n    cylinder(h=1, d=12, $fn=32);\n}\n\n// Connector piece between links\nmodule chain_connector() {\n    // Main cylindrical connector bar\n    rotate([90, 0, 0])\n    cylinder(h=6, d=3.5, $fn=16);\n    \n    // End caps for strength\n    translate([0, -3, 0])\n    rotate([90, 0, 0])\n    cylinder(h=1, d=5.5, $fn=16);\n    \n    translate([0, 3, 0])\n    rotate([90, 0, 0])\n    cylinder(h=1, d=5.5, $fn=16);\n}\n\n// Assembly of 5 links with connectors\nmodule chain_assembly() {\n    // First link\n    chain_link();\n    \n    // Connector 1\n    translate([12, 0, 2])\n    rotate([0, 0, 90])\n    chain_connector();\n    \n    // Second link\n    translate([18, 0, 0])\n    rotate([0, 0, 90])\n    chain_link();\n    \n    // Connector 2\n    translate([18, 12, 2])\n    chain_connector();\n    \n    // Third link\n    translate([18, 18, 0])\n    chain_link();\n    \n    // Connector 3\n    translate([30, 18, 2])\n    rotate([0, 0, 90])\n    chain_connector();\n    \n    // Fourth link\n    translate([36, 18, 0])\n    rotate([0, 0, 90])\n    chain_link();\n    \n    // Connector 4\n    translate([36, 30, 2])\n    chain_connector();\n    \n    // Fifth link\n    translate([36, 36, 0])\n    chain_link();\n}\n\n// Main chain with realistic proportions\n// Total length approximately 120mm\nchain_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "belt",
    "openscad_code": "// Realistic Belt Mechanical Component\n// Dimensions: 100mm x 20mm x 8mm (closed loop)\n\n// Main belt body module\nmodule belt_body() {\n    // Belt thickness and width\n    belt_thickness = 2;\n    belt_width = 20;\n    belt_radius = 40;\n    \n    // Create the main belt loop using torus-like structure\n    difference() {\n        // Outer belt surface\n        rotate_extrude(angle = 360, $fn = 100) {\n            translate([belt_radius, 0, 0])\n                square([belt_thickness, belt_width]);\n        }\n        \n        // Inner hole for belt loop\n        rotate_extrude(angle = 360, $fn = 100) {\n            translate([belt_radius - belt_thickness, 0, 0])\n                square([belt_thickness - 1, belt_width - 1]);\n        }\n    }\n}\n\n// Belt teeth module for grip\nmodule belt_teeth() {\n    tooth_height = 1.5;\n    tooth_width = 3;\n    tooth_spacing = 6;\n    belt_radius = 40;\n    belt_width = 20;\n    \n    // Create teeth along inner circumference\n    for(i = [0: tooth_spacing: 359]) {\n        rotate([0, 0, i])\n            translate([belt_radius - 2, -belt_width/2 + 2, 0])\n                cube([tooth_height, tooth_width, 2]);\n    }\n}\n\n// Belt holes for adjustment\nmodule belt_holes() {\n    hole_diameter = 4;\n    hole_spacing = 8;\n    belt_radius = 40;\n    belt_width = 20;\n    \n    // Create adjustment holes along one side\n    for(i = [0: hole_spacing: 40]) {\n        rotate([0, 90, 0])\n            translate([belt_radius + i - 20, 0, -belt_width/2])\n                cylinder(h = belt_width + 1, d = hole_diameter, $fn = 20);\n    }\n}\n\n// Belt buckle attachment point\nmodule buckle_mount() {\n    mount_length = 15;\n    mount_width = 10;\n    mount_thickness = 3;\n    \n    // Create buckle mount on belt end\n    translate([40, -5, -1.5])\n        cube([mount_length, mount_width, mount_thickness]);\n    \n    // Buckle pin hole\n    translate([47.5, 0, 1])\n        rotate([90, 0, 0])\n            cylinder(h = 10, d = 2, $fn = 20);\n}\n\n// Belt texture pattern\nmodule belt_texture() {\n    texture_height = 0.3;\n    texture_width = 1;\n    belt_radius = 40;\n    belt_width = 20;\n    \n    // Create diagonal texture lines\n    for(i = [0: 5: 359]) {\n        rotate([0, 0, i])\n            translate([belt_radius - 1, -belt_width/2, -0.5])\n                cube([texture_height, belt_width, texture_height]);\n    }\n}\n\n// Reinforcement ribs\nmodule reinforcement_ribs() {\n    rib_width = 1.5;\n    rib_height = 1;\n    belt_radius = 40;\n    \n    // Create ribs for strength\n    for(i = [0: 45: 359]) {\n        rotate([0, 0, i])\n            translate([belt_radius - 2, -10, 0])\n                cube([rib_height, 20, rib_width]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Basic belt structure\n    belt_body();\n    \n    // Add functional elements\n    belt_teeth();\n    belt_holes();\n    buckle_mount();\n    \n    // Add detail elements\n    belt_texture();\n    reinforcement_ribs();\n}",
    "renders": true
  },
  {
    "mechanical_component": "cable",
    "openscad_code": "// Cable mechanical component - realistic medium complexity\n// USB-C cable with strain relief and connector details\n\n// Parameters\ncable_diameter = 4;\ncable_length = 80;\nconnector_length = 8;\nconnector_width = 8.3;\nconnector_height = 2.5;\nstrain_relief_length = 12;\nstrain_relief_diameter = 6;\nusb_shell_length = 15;\nusb_shell_diameter = 9;\n\n// Wall thickness\nwall = 2;\n\nmodule cable_strand(diameter, length) {\n    difference() {\n        cylinder(h=length, d=diameter, $fn=32);\n        \n        // Hollow core\n        translate([0, 0, -1])\n            cylinder(h=length+2, d=diameter-wall*2, $fn=32);\n            \n        // Internal wire detail\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([diameter/4, 0, -1])\n                    cylinder(h=length+2, d=0.5, $fn=8);\n        }\n    }\n}\n\nmodule strain_relief() {\n    // Main strain relief body\n    difference() {\n        cylinder(h=strain_relief_length, d=strain_relief_diameter, $fn=32);\n        cylinder(h=strain_relief_length+2, d=strain_relief_diameter-wall*2, $fn=32);\n    }\n    \n    // Gripping ridges\n    for(i=[0:5]) {\n        translate([0, 0, i*2])\n            difference() {\n                cylinder(h=1, d=strain_relief_diameter+0.5, $fn=32);\n                cylinder(h=2, d=strain_relief_diameter-1, $fn=32);\n            }\n    }\n}\n\nmodule usb_connector() {\n    // Metal shell\n    difference() {\n        cylinder(h=usb_shell_length, d=usb_shell_diameter, $fn=32);\n        translate([0, 0, -1])\n            cylinder(h=usb_shell_length+2, d=usb_shell_diameter-wall*2, $fn=32);\n    }\n    \n    // Connector housing\n    translate([0, 0, usb_shell_length/2])\n        difference() {\n            cube([connector_width, connector_height, connector_length], center=true);\n            cube([connector_width-wall*2, connector_height-wall*2, connector_length+2], center=true);\n        }\n    \n    // Contact pins\n    for(i=[-3:3]) {\n        translate([i*1, 0, usb_shell_length + connector_length/2 + 0.5])\n            cube([0.5, 0.3, 1]);\n    }\n    \n    // Shell grip texture\n    rotate([90, 0, 0])\n        for(i=[0:11]) {\n            rotate([0, 0, i*30])\n                translate([usb_shell_diameter/2-0.5, 0, usb_shell_length/2])\n                    cube([1, 0.5, usb_shell_length], center=true);\n        }\n}\n\n// Main assembly\nunion() {\n    // Cable body\n    translate([0, 0, strain_relief_length])\n        cable_strand(cable_diameter, cable_length);\n    \n    // Strain relief left\n    translate([0, 0, 0])\n        strain_relief();\n    \n    // Strain relief right\n    translate([0, 0, strain_relief_length+cable_length])\n        rotate([180, 0, 0])\n            strain_relief();\n    \n    // USB-C connector left\n    translate([0, 0, strain_relief_length+cable_length+strain_relief_length])\n        usb_connector();\n    \n    // USB-C connector right\n    translate([0, 0, -usb_shell_length])\n        rotate([180, 0, 0])\n            usb_connector();\n}",
    "renders": true
  },
  {
    "mechanical_component": "wire",
    "openscad_code": "// Wire-frame chair in realistic style\n// Overall dimensions: 450mm(W) x 500mm(D) x 850mm(H)\n\nchair_width = 450;\nchair_depth = 500;\nchair_height = 850;\nseat_height = 450;\nwire_diameter = 8;\nwall_thickness = wire_diameter;\n\n// Main chair module\nmodule wire_chair() {\n    // Side frames\n    for(side = [-1, 1]) {\n        translate([side * chair_width/2, 0, 0]) {\n            // Back post\n            rotate([0, 0, 0])\n                cylinder(h=chair_height, d=wire_diameter, $fn=16);\n            \n            // Front post\n            translate([0, chair_depth, 0])\n                cylinder(h=seat_height, d=wire_diameter, $fn=16);\n                \n            // Seat support rail\n            translate([0, chair_depth/2, seat_height])\n                rotate([0, 90, 0])\n                    cylinder(h=chair_width, d=wire_diameter, $fn=16);\n                    \n            // Back support rail\n            translate([0, 0, seat_height+100])\n                rotate([0, 90, 0])\n                    cylinder(h=chair_width, d=wire_diameter, $fn=16);\n        }\n    }\n    \n    // Back frame horizontal members\n    for(z = [seat_height+200, seat_height+350, seat_height+500]) {\n        translate([-chair_width/2, 0, z])\n            rotate([0, 90, 0])\n                cylinder(h=chair_width, d=wire_diameter, $fn=16);\n    }\n    \n    // Seat frame\n    // Front rail\n    translate([-chair_width/2, chair_depth, seat_height])\n        rotate([0, 90, 0])\n            cylinder(h=chair_width, d=wire_diameter, $fn=16);\n    \n    // Back rail\n    translate([-chair_width/2, 0, seat_height])\n        rotate([0, 90, 0])\n            cylinder(h=chair_width, d=wire_diameter, $fn=16);\n    \n    // Side rails\n    for(side = [-1, 1]) {\n        translate([side * chair_width/2, chair_depth/2, seat_height])\n            rotate([0, 0, 90])\n                cylinder(h=chair_depth, d=wire_diameter, $fn=16);\n    }\n    \n    // Support wires for seat\n    for(x = [-chair_width/2+50:50:chair_width/2-50]) {\n        translate([x, chair_depth/2, seat_height-4])\n            rotate([0, 0, 90])\n                cylinder(h=chair_depth, d=wire_diameter-2, $fn=16);\n    }\n    \n    // Support wires for back\n    for(z = [seat_height+50:50:seat_height+450]) {\n        translate([-chair_width/2+25, chair_depth/20, z])\n            cylinder(h=chair_depth/10, d=wire_diameter-2, $fn=16);\n    }\n    \n    // Leg cross-bracing\n    for(side = [-1, 1]) {\n        // Front cross brace\n        translate([side * chair_width/2, chair_depth-100, seat_height/2])\n            rotate([0, 90, 30])\n                cylinder(h=200, d=wire_diameter, $fn=16);\n                \n        // Rear cross brace\n        translate([side * chair_width/2, 100, seat_height/2+100])\n            rotate([0, 90, -30])\n                cylinder(h=200, d=wire_diameter, $fn=16);\n    }\n    \n    // Bottom stabilizer bar\n    translate([0, chair_depth/2, 50])\n        rotate([0, 90, 0])\n            cylinder(h=chair_width-40, d=wire_diameter, $fn=16);\n}\n\n// Generate the chair\nwire_chair();",
    "renders": true
  },
  {
    "mechanical_component": "torsionbar",
    "openscad_code": "// Torsion Bar Component\n// Realistic medium-complexity automotive torsion bar\n// ~120mm long, 3D printable with 2mm walls\n\n$fn = 32; // Smooth curves\n\n// Main dimensions\nbar_diameter = 8;\nbar_length = 100;\nspline_length = 10;\nspline_diameter = 12;\nspline_teeth = 24;\nspline_tooth_height = 1.5;\nmount_diameter = 20;\nmount_thickness = 6;\nkey_width = 6;\nkey_height = 3;\n\nmodule spline_profile(teeth, height, radius) {\n    difference() {\n        circle(r=radius);\n        for(i=[0:teeth-1]) {\n            rotate([0,0,i*360/teeth])\n            translate([radius+height,0,0])\n            square([height*2, height], center=true);\n        }\n    }\n}\n\nmodule spline_end() {\n    // Main spline body\n    cylinder(h=spline_length, d=spline_diameter, center=true);\n    \n    // Splines\n    linear_extrude(height=spline_length+0.1, center=true)\n    offset(0.1)\n    spline_profile(spline_teeth, spline_tooth_height, spline_diameter/2);\n    \n    // Mounting flange\n    translate([0,0,spline_length/2+mount_thickness/2])\n    cylinder(h=mount_thickness, d=mount_diameter);\n    \n    // Mounting holes\n    for(i=[0:2]) {\n        rotate([0,0,i*120])\n        translate([mount_diameter/2-4,0,spline_length/2+mount_thickness/2])\n        cylinder(h=mount_thickness+0.1, d=3.5, $fn=6);\n    }\n    \n    // Keyway\n    translate([0,spline_diameter/2-key_height/2,0])\n    cube([key_width, key_height, spline_length+0.1], center=true);\n}\n\nmodule bar_shaft() {\n    // Main torsion bar\n    cylinder(h=bar_length, d=bar_diameter, center=true);\n    \n    // Stress relief grooves\n    for(i=[-1:1]) {\n        translate([0,0,i*bar_length/4])\n        rotate_extrude()\n        translate([bar_diameter/2-1,0,0])\n        circle(r=1);\n    }\n    \n    // Anti-rotation flats\n    translate([0,0,bar_length/2-5])\n    difference() {\n        cylinder(h=10, d=bar_diameter+0.1, center=true);\n        translate([0,-bar_diameter/2-1,0])\n        cube([bar_diameter+2, bar_diameter/2+1, 10.1], center=true);\n    }\n    \n    translate([0,0,-bar_length/2+5])\n    difference() {\n        cylinder(h=10, d=bar_diameter+0.1, center=true);\n        translate([0,-bar_diameter/2-1,0])\n        cube([bar_diameter+2, bar_diameter/2+1, 10.1], center=true);\n    }\n}\n\nmodule torsion_bar() {\n    // Left spline end\n    translate([-bar_length/2-spline_length/2,0,0])\n    spline_end();\n    \n    // Main bar\n    bar_shaft();\n    \n    // Right spline end (mirrored)\n    translate([bar_length/2+spline_length/2,0,0])\n    mirror([1,0,0])\n    spline_end();\n    \n    // Center support bearing\n    translate([0,0,0])\n    difference() {\n        cylinder(h=15, d=bar_diameter+8, center=true);\n        cylinder(h=15.1, d=bar_diameter+2, center=true);\n    }\n    \n    // Bearing mounting lugs\n    for(i=[0:1]) {\n        rotate([0,0,i*180])\n        translate([0,bar_diameter/2+4,0])\n        cube([8, 6, 15], center=true);\n        \n        // Mounting holes\n        translate([0,bar_diameter/2+7,0])\n        cylinder(h=15.1, d=3.5, $fn=6);\n    }\n}\n\n// Assembly\ntorsion_bar();",
    "renders": true
  },
  {
    "mechanical_component": "torsionrod",
    "openscad_code": "// Torsion Rod Mechanical Component - Medium Complexity\n// Realistic style with proper structural elements for 3D printing\n\n// Parameters for sizing\nrod_length = 100;\nrod_diameter = 12;\nend_length = 20;\nmounting_hole_diameter = 6;\nwall_thickness = 2;\nkey_width = 4;\nkey_depth = 2;\n\n// Main torsion rod body\nmodule torsion_rod_body() {\n    difference() {\n        // Main cylindrical rod\n        cylinder(h = rod_length, d = rod_diameter, $fn = 32);\n        \n        // Central bore for weight reduction\n        cylinder(h = rod_length, d = rod_diameter - 2*wall_thickness, $fn = 32);\n    }\n}\n\n// End mounting feature with keyway\nmodule rod_end() {\n    difference() {\n        union() {\n            // Main end cylinder\n            cylinder(h = end_length, d = rod_diameter + 8, $fn = 32);\n            \n            // Reinforcement ring\n            translate([0, 0, end_length - 4])\n                cylinder(h = 4, d = rod_diameter + 12, $fn = 32);\n        }\n        \n        // Mounting hole\n        cylinder(h = end_length + 2, d = mounting_hole_diameter, $fn = 32);\n        \n        // Keyway slot\n        translate([-key_width/2 - rod_diameter/2, 0, 0])\n            cube([key_width, key_depth + 2, end_length + 2]);\n    }\n}\n\n// Anti-rotation flats\nmodule anti_rotation_flats() {\n    // Create two opposing flats on the rod\n    difference() {\n        torsion_rod_body();\n        \n        // First flat\n        translate([0, -rod_diameter/2 - 1, rod_length/4])\n            cube([rod_diameter + 2, rod_diameter/2 + 2, rod_length/2], center = true);\n        \n        // Second flat (rotated 90 degrees)\n        rotate([0, 0, 90])\n            translate([0, -rod_diameter/2 - 1, rod_length/4])\n                cube([rod_diameter + 2, rod_diameter/2 + 2, rod_length/2], center = true);\n    }\n}\n\n// Stress relief grooves\nmodule stress_relief_grooves() {\n    for (i = [1:3]) {\n        translate([0, 0, i * rod_length/4])\n            difference() {\n                cylinder(h = 1, d = rod_diameter + 1, $fn = 32);\n                cylinder(h = 2, d = rod_diameter - 2, $fn = 32);\n            }\n    }\n}\n\n// Assembly module\nmodule torsion_rod_assembly() {\n    union() {\n        // Main rod with flats\n        anti_rotation_flats();\n        \n        // Add stress relief grooves\n        stress_relief_grooves();\n        \n        // First end mount\n        translate([0, 0, -end_length/2])\n            rod_end();\n        \n        // Second end mount (mirrored)\n        translate([0, 0, rod_length + end_length/2])\n            rotate([180, 0, 0])\n                rod_end();\n        \n        // Optional mounting flange\n        translate([0, 0, -end_length - 5])\n            difference() {\n                cylinder(h = 3, d = rod_diameter + 16, $fn = 32);\n                cylinder(h = 4, d = mounting_hole_diameter + 2, $fn = 32);\n            }\n    }\n}\n\n// Render the complete assembly\ntorsion_rod_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "torsiontube",
    "openscad_code": "// Torsion Tube Mechanical Component – OpenSCAD 3D Printable Model\n// Overall length ~120 mm, wall thickness 2 mm\n\n$fn = 36;          // moderate resolution\nwall = 2;          // printable wall thickness\n\n// Main tube profile\nmodule tube_body(len = 100, od = 22, id = 18) {\n    difference() {\n        cylinder(h = len, d = od, center = true);\n        cylinder(h = len + 0.2, d = id, center = true);\n    }\n}\n\n// End splines for torque transmission\nmodule splined_end(teeth = 6, len = 12, od = 26, id = 18) {\n    tooth_w = od / teeth * 0.9;\n    tooth_h = (od - id) / 2;\n    for (i = [0:teeth-1])\n        rotate([0, 0, i * 360/teeth])\n            translate([0, id/2 + tooth_h/2, 0])\n                cube([tooth_w, tooth_h, len], center = true);\n}\n\n// Mounting flange with bolt holes\nmodule flange(pos_z, bolt_d = 4, bolt_cnt = 4, pcd = 34) {\n    difference() {\n        // flange disk\n        translate([0, 0, pos_z])\n            cylinder(h = wall*2, d = 40, center = true);\n        // bolt holes\n        for (i = [0:bolt_cnt-1])\n            rotate([0, 0, i * 360/bolt_cnt])\n                translate([pcd/2, 0, pos_z])\n                    cylinder(h = wall*2 + 0.2, d = bolt_d, center = true);\n    }\n}\n\n// Lightening pockets along tube (cosmetic + weight reduction)\nmodule lightening_pockets(len = 100) {\n    pocket_w = 12;\n    pocket_h = 4;\n    pocket_d = 2;\n    for (pos = [-len/2 + 15 : 20 : len/2 - 15])\n        translate([0, 0, pos])\n            rotate([0, 90, 0])\n                cube([pocket_w, pocket_d, pocket_h], center = true);\n}\n\n// Assemble the torsion tube\nunion() {\n    // central tube\n    tube_body();\n\n    // left splined end\n    translate([0, 0, -55])\n        splined_end();\n\n    // right splined end\n    mirror([0, 0, 1])\n        translate([0, 0, -55])\n            splined_end();\n\n    // left flange\n    flange(-40);\n\n    // right flange\n    flange(40);\n\n    // cosmetic lightening pockets\n    difference() {\n        tube_body();\n        lightening_pockets();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "torsionspring",
    "openscad_code": "// Torsion Spring - Mechanical Component\n// Realistic style, medium complexity, 3D printable\n\n// Global parameters\nspring_coils = 8;\nwire_diameter = 4;\nspring_diameter = 30;\nleg_length = 40;\nleg_width = 6;\nleg_thickness = 4;\nmount_hole_diameter = 6;\nwall_thickness = 2;\n\n// Main torsion spring module\nmodule torsion_spring() {\n    union() {\n        // Spring coils\n        spring_body();\n        \n        // Top leg\n        translate([0, 0, spring_diameter/2 + wire_diameter/2])\n            rotate([0, 90, 0])\n                spring_leg();\n        \n        // Bottom leg (mirrored)\n        translate([0, 0, -spring_diameter/2 - wire_diameter/2])\n            rotate([0, 90, 180])\n                spring_leg();\n    }\n}\n\n// Generate the coiled portion\nmodule spring_body() {\n    difference() {\n        union() {\n            // Main coil structure\n            for(i = [0:spring_coils-1]) {\n                rotate([0, 0, i * 360/spring_coils])\n                    translate([spring_diameter/2, 0, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h=spring_diameter/2.5, d=wire_diameter, $fn=16);\n            }\n            \n            // End connections\n            translate([spring_diameter/2, 0, spring_diameter/4])\n                sphere(d=wire_diameter, $fn=16);\n            translate([-spring_diameter/2, 0, -spring_diameter/4])\n                sphere(d=wire_diameter, $fn=16);\n        }\n        \n        // Hollow center for weight reduction\n        cylinder(h=spring_diameter*1.2, d=spring_diameter-wire_diameter*2, center=true, $fn=32);\n    }\n}\n\n// Generate spring legs with mounting holes\nmodule spring_leg() {\n    difference() {\n        // Main leg body\n        union() {\n            // Flat mounting portion\n            translate([leg_length/2, 0, 0])\n                cube([leg_length, leg_width, leg_thickness], center=true);\n            \n            // Rounded transition\n            translate([0, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=leg_width, d=leg_thickness*1.5, center=true, $fn=16);\n            \n            // Reinforcement ribs\n            for(pos = [-leg_length/3, 0, leg_length/3]) {\n                translate([pos, 0, leg_thickness/2 + wall_thickness/2])\n                    cube([wall_thickness*2, leg_width-wall_thickness, wall_thickness], center=true);\n            }\n        }\n        \n        // Mounting holes\n        translate([leg_length-8, 0, 0])\n            cylinder(h=leg_thickness+2, d=mount_hole_diameter, center=true, $fn=16);\n        translate([8, 0, 0])\n            cylinder(h=leg_thickness+2, d=mount_hole_diameter, center=true, $fn=16);\n    }\n}\n\n// Base mounting bracket\nmodule mounting_bracket() {\n    difference() {\n        union() {\n            // Main bracket body\n            translate([0, 0, -15])\n                cube([spring_diameter*2.5, leg_width*3, 10], center=true);\n            \n            // Support ribs\n            for(offset = [-spring_diameter/2, spring_diameter/2]) {\n                translate([offset, 0, -10])\n                    cube([wall_thickness*3, leg_width*2.5, 20], center=true);\n            }\n        }\n        \n        // Center hole for spring clearance\n        translate([0, 0, -10])\n            cylinder(h=20, d=spring_diameter+wire_diameter, center=true, $fn=32);\n        \n        // Mounting holes\n        for(x = [-spring_diameter, 0, spring_diameter]) {\n            translate([x, leg_width, -15])\n                cylinder(h=12, d=mount_hole_diameter+2, center=true, $fn=16);\n        }\n    }\n}\n\n// Assembly\ntorsion_spring();\ntranslate([0, 0, -spring_diameter/2 - wire_diameter/2 - 15])\n    mounting_bracket();",
    "renders": true
  },
  {
    "mechanical_component": "coilspring",
    "openscad_code": "// Realistic 3D-printable compression coil spring\n// Overall height ≈ 80 mm, outer Ø ≈ 30 mm\n// Designed for FDM printing: 2 mm wire diameter, 45° “bridged” coils, flat ends\n\nmodule coil_spring(\n    turns      = 8,      // active coils\n    wire_d     = 2,      // wire diameter (mm)\n    mean_d     = 28,     // mean coil diameter (mm)\n    pitch      = 9,      // axial distance between coils (mm)\n    flat       = 3       // flat-ground end coils (number to remove)\n){\n    // Helper: single revolution of the helix\n    module helix_rev(h, r, t_steps=32){\n        for(i=[0:t_steps-1]){\n            assign(\n                a1 = i*360/t_steps,\n                a2 = (i+1)*360/t_steps,\n                z1 = h*i/t_steps,\n                z2 = h*(i+1)/t_steps\n            )\n            hull(){\n                translate([r*cos(a1), r*sin(a1), z1])\n                    sphere(d=wire_d, $fn=8);\n                translate([r*cos(a2), r*sin(a2), z2])\n                    sphere(d=wire_d, $fn=8);\n            }\n        }\n    }\n\n    // Active coils\n    difference(){\n        union(){\n            for(n=[0:turns-1]){\n                translate([0,0,n*pitch])\n                    helix_rev(pitch, mean_d/2);\n            }\n        }\n        // Remove bottom flat-ground zone\n        translate([-mean_d/2-1, -mean_d/2-1, -wire_d/2])\n            cube([mean_d+2, mean_d+2, flat*pitch]);\n        // Remove top flat-ground zone\n        translate([-mean_d/2-1, -mean_d/2-1, (turns-flat)*pitch-wire_d/2])\n            cube([mean_d+2, mean_d+2, flat*pitch+wire_d]);\n    }\n\n    // End plates for seating (optional but printable)\n    plate_th = 2;\n    translate([0,0,-plate_th-wire_d/2])\n        cylinder(h=plate_th, d1=mean_d+wire_d, d2=mean_d+wire_d, $fn=32);\n    translate([0,0,turns*pitch-wire_d/2])\n        cylinder(h=plate_th, d1=mean_d+wire_d, d2=mean_d+wire_d, $fn=32);\n}\n\n// Render the spring\ncoil_spring();",
    "renders": true
  },
  {
    "mechanical_component": "leafspring",
    "openscad_code": "// Leafspring for light truck / trailer axle\n// Overall length ≈110 mm, printable on most FDM beds\n\n$fn = 36;               // smooth curves\nth = 2.2;               // uniform wall / leaf thickness\neye_d = 8;              // bushing eye inner diameter\neye_l = 12;             // eye length along the spring\nleaf_w = 25;            // constant leaf width\ncenter_bolt_d = 6;      // center bolt diameter\n\n// -------------------------\n// Helper: single leaf\nmodule leaf(len, h_curve, n)\n{\n    // basic flat beam\n    difference() {\n        translate([0, 0, h_curve/2])\n            cube([len, leaf_w, th], center=true);\n\n        // taper ends slightly for realism\n        for(i = [-1, 1])\n            translate([i*len/2, 0, h_curve/2])\n                rotate([0, 90, 0])\n                    cylinder(h=len*0.15, r=leaf_w/2+1, center=true);\n    }\n}\n\n// -------------------------\n// Helper: rolled eye (bushing eye)\nmodule rolled_eye(pos)\n{\n    translate(pos)\n    rotate([90,0,0])\n    difference() {\n        cylinder(h=eye_l, r=eye_d/2 + th, center=true); // outer\n        cylinder(h=eye_l+1, r=eye_d/2, center=true);     // inner hole\n    }\n}\n\n// -------------------------\n// Main leaf assembly\nmodule leaf_pack()\n{\n    // lengths of successive leaves (shortest on top)\n    lengths = [105, 95, 85, 75, 65];\n    heights = [0, -th-0.2, -2*th-0.4, -3*th-0.6, -4*th-0.8];\n\n    // curved profile parameters\n    span = 110;\n    mid_h = 18;                     // arch height at center\n\n    // build each leaf with its own curvature\n    for(i = [0:len(lengths)-1]) {\n        leaf_len = lengths[i];\n        h_offset = heights[i];\n\n        // simple parabolic curve\n        curve = mid_h * (1 - pow((leaf_len/2)/span*2, 2));\n\n        translate([0, 0, h_offset])\n            leaf(leaf_len, curve, i);\n    }\n}\n\n// -------------------------\n// Center clamp block\nmodule center_clamp()\n{\n    clamp_l = 30;\n    clamp_w = leaf_w + 8;\n    clamp_h = 12;\n\n    difference() {\n        translate([0, 0, clamp_h/2])\n            cube([clamp_l, clamp_w, clamp_h], center=true);\n\n        // center bolt hole\n        translate([0, 0, -1])\n            cylinder(h=clamp_h+2, d=center_bolt_d, center=true);\n    }\n}\n\n// -------------------------\n// Assembly\nleaf_pack();\n\n// Front & rear eyes\nrolled_eye([ lengths[0]/2, 0, mid_h ]);\nmirror([1,0,0]) rolled_eye([ lengths[0]/2, 0, mid_h ]);\n\n// Center clamp on top\ntranslate([0, 0, mid_h + th/2 + 1])\n    center_clamp();",
    "renders": true
  },
  {
    "mechanical_component": "discspring",
    "openscad_code": "// Disc Spring (Belleville washer) - Realistic style, medium complexity\n// Overall dimensions: 100mm OD x 51mm ID x 4.2mm free height\n// Wall thickness: 2mm throughout for 3D printing\n\n// Parameters\nod = 100;           // Outer diameter\nid = 51;            // Inner diameter\nt = 2.0;            // Material thickness\nh0 = 3.2;           // Cone height\nh_total = 4.2;      // Free height (t + h0)\nsegments = 128;     // Smooth curves\n\n// Main conical disc\nmodule disc_spring() {\n    difference() {\n        // Outer disc cone\n        cylinder(d1=od, d2=od - 8, h=h_total, $fn=segments);\n        \n        // Central bore\n        translate([0, 0, -0.1])\n            cylinder(d=id, h=h_total + 0.2, $fn=segments);\n        \n        // Remove material to create conical shape\n        translate([0, 0, h0 + t])\n            cylinder(d1=od - 1, d2=id + 1, h=h_total, $fn=segments);\n    }\n}\n\n// Reinforcement ribs on underside\nmodule ribs() {\n    rib_count = 8;\n    rib_width = 3;\n    rib_height = 1.5;\n    \n    for (i = [0:rib_count-1]) {\n        rotate([0, 0, i * 360/rib_count])\n            translate([(od + id)/4, -rib_width/2, 0])\n                cube([rib_width, (od - id)/2 - 5, rib_height]);\n    }\n}\n\n// Chamfered edges for stress relief\nmodule chamfers() {\n    // Top outer edge\n    translate([0, 0, h_total])\n        cylinder(d1=od, d2=od - 2, h=1, $fn=segments);\n    \n    // Bottom inner edge\n    translate([0, 0, 0])\n        cylinder(d1=id + 2, d2=id, h=1, $fn=segments);\n}\n\n// Assembly\nunion() {\n    // Main spring body\n    disc_spring();\n    \n    // Add ribs to underside\n    translate([0, 0, 0])\n        ribs();\n    \n    // Add chamfers\n    difference() {\n        union() {\n            disc_spring();\n            chamfers();\n        }\n        \n        // Remove overlapping material\n        translate([0, 0, h_total + 1])\n            cylinder(d=od + 2, h=2, $fn=segments);\n    }\n}\n\n// Optional mounting holes for tooling (commented out)\n// for (i = [0:3]) {\n//     rotate([0, 0, i * 90 + 45])\n//         translate([od/2 - 8, 0, h_total/2])\n//             rotate([90, 0, 0])\n//                 cylinder(d=3, h=t + 1, $fn=16);\n// }",
    "renders": true
  },
  {
    "mechanical_component": "belleville",
    "openscad_code": "// Belleville Washer - Medium Complexity\n// 3D printable model with realistic proportions\n\n// Parameters\n$fn = 36;\nouter_d = 100;          // Outer diameter (mm)\ninner_d = 50;           // Inner diameter (mm)\nheight = 12;            // Total height (mm)\nthickness = 2;          // Wall thickness (mm)\nsegments = 8;           // Number of conical segments\nbolt_clearance = 6;     // Bolt hole clearance (mm)\n\n// Main belleville washer module\nmodule belleville_washer() {\n    difference() {\n        // Outer conical shell\n        union() {\n            for (i = [0:segments-1]) {\n                rotate([0, 0, i * (360/segments)])\n                conical_segment();\n            }\n        }\n        \n        // Center hole\n        translate([0, 0, -1])\n        cylinder(h = height + 2, r = inner_d/2 + bolt_clearance, $fn = 32);\n        \n        // Top chamfer\n        translate([0, 0, height])\n        cylinder(h = 3, r1 = outer_d/2 - 2, r2 = outer_d/2, $fn = 32);\n        \n        // Bottom chamfer\n        translate([0, 0, -2])\n        cylinder(h = 3, r1 = outer_d/2 - 2, r2 = outer_d/2, $fn = 32);\n    }\n    \n    // Reinforcement ribs\n    for (i = [0:segments-1]) {\n        rotate([0, 0, i * (360/segments) + (180/segments)])\n        translate([0, 0, height/2])\n        reinforcement_rib();\n    }\n}\n\n// Single conical segment\nmodule conical_segment() {\n    angle = 360/segments;\n    \n    // Create tapered segment\n    difference() {\n        // Main segment body\n        rotate_extrude(angle = angle, $fn = 2)\n        translate([inner_d/2, 0])\n        polygon(points=[\n            [0, 0],\n            [outer_d/2 - inner_d/2, 0],\n            [outer_d/2 - inner_d/2, height],\n            [0, height - 2],\n            [0, 0]\n        ]);\n        \n        // Inner taper\n        rotate_extrude(angle = angle, $fn = 2)\n        translate([inner_d/2, 0])\n        polygon(points=[\n            [thickness, 0],\n            [outer_d/2 - inner_d/2 - thickness, 0],\n            [outer_d/2 - inner_d/2 - thickness, height - thickness],\n            [thickness, height - thickness - 2],\n            [thickness, 0]\n        ]);\n    }\n}\n\n// Reinforcement rib\nmodule reinforcement_rib() {\n    rib_width = 3;\n    rib_height = height - 2;\n    \n    translate([inner_d/2 + 10, -rib_width/2, -rib_height/2])\n    cube([outer_d/2 - inner_d/2 - 15, rib_width, rib_height]);\n}\n\n// Surface texture details\nmodule surface_details() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([outer_d/2 - 15, -1, height/2])\n        cube([2, 2, height - 4]);\n    }\n}\n\n// Assembly\nunion() {\n    belleville_washer();\n    \n    // Add surface details for realism\n    surface_details();\n}\n\n// Print orientation helper\n%translate([0, 0, -20])\ncolor([0.8, 0.8, 0.8, 0.3])\ncylinder(h = 2, r = outer_d/2 + 5, $fn = 32);",
    "renders": true
  },
  {
    "mechanical_component": "wavewasher",
    "openscad_code": "// Wave Washer - Mechanical Spring Component\n// Realistic style, medium complexity\n\n// Parameters\n$fn = 50;  // Smooth curves\nouter_diameter = 80;  // mm\ninner_diameter = 40;  // mm\nthickness = 2;        // mm wall thickness\nwave_height = 8;      // mm wave amplitude\nwaves = 6;            // number of waves\nsegments = 48;        // segments per wave\n\n// Wave profile calculation\nmodule wave_profile() {\n    for (i = [0 : segments-1]) {\n        angle = i * 360 / segments;\n        wave_angle = angle * waves;\n        // Create sine wave profile\n        h = sin(wave_angle) * (wave_height/2);\n        translate([0, 0, h])\n            cube([outer_diameter/2 - inner_diameter/2, thickness, thickness], center=true);\n    }\n}\n\n// Create wave washer ring\nmodule wave_washer() {\n    difference() {\n        // Outer ring with wave profile\n        union() {\n            for (i = [0 : 360/waves : 360]) {\n                rotate([0, 0, i])\n                    wave_profile();\n            }\n        }\n        \n        // Inner hole\n        cylinder(h=wave_height + thickness*2, r=inner_diameter/2 - thickness/2, center=true);\n        \n        // Smooth top and bottom faces\n        translate([0, 0, wave_height/2 + thickness])\n            cylinder(h=thickness*2, r=outer_diameter/2 + 1, center=true);\n        translate([0, 0, -wave_height/2 - thickness])\n            cylinder(h=thickness*2, r=outer_diameter/2 + 1, center=true);\n    }\n}\n\n// Add chamfers to edges\nmodule chamfer_edges() {\n    difference() {\n        wave_washer();\n        \n        // Top chamfer\n        translate([0, 0, wave_height/2 + thickness])\n            cylinder(h=thickness*3, r1=outer_diameter/2 - thickness, r2=outer_diameter/2, center=true);\n        \n        // Bottom chamfer\n        translate([0, 0, -wave_height/2 - thickness])\n            cylinder(h=thickness*3, r1=outer_diameter/2 - thickness, r2=outer_diameter/2, center=true);\n        \n        // Inner chamfers\n        translate([0, 0, wave_height/2 + thickness])\n            cylinder(h=thickness*3, r1=inner_diameter/2 + thickness, r2=inner_diameter/2, center=true);\n        translate([0, 0, -wave_height/2 - thickness])\n            cylinder(h=thickness*3, r1=inner_diameter/2 + thickness, r2=inner_diameter/2, center=true);\n    }\n}\n\n// Main assembly\nchamfer_edges();",
    "renders": true
  },
  {
    "mechanical_component": "springpin",
    "openscad_code": "// Springpin (coil spring with two pins) – realistic, medium complexity\n// Overall length ~100 mm, Ø ~25 mm, wall thickness ≥ 2 mm for 3D-printing\n\nmodule springpin(outer_d = 25, wire_d = 3, coils = 8, free_length = 70,\n                 pin_d = 6, pin_l = 15) {\n    // Derived parameters\n    pitch      = free_length / coils;\n    inner_d    = outer_d - wire_d;\n    turns      = coils;\n\n    //--------------------------\n    // Coil spring body\n    //--------------------------\n    module coil() {\n        // One helical segment\n        module segment(i) {\n            h = i * pitch;\n            rotate([0, 0, i * 360 / turns])\n                translate([inner_d/2, 0, h])\n                    rotate([90, 0, 0])\n                        cylinder(d = wire_d, h = 1.05 * pitch, $fn = 12);\n        }\n        for (i = [0 : turns - 1]) segment(i);\n    }\n\n    //--------------------------\n    // Top & bottom pins\n    //--------------------------\n    module pin(end) {\n        translate([0, 0, end ? free_length : 0])\n            rotate([0, 0, end ? 180 : 0]) // point outwards\n                cylinder(d = pin_d, h = pin_l, $fn = 16);\n    }\n\n    //--------------------------\n    // Realistic details\n    //--------------------------\n    // Chamfers on pins to reduce overhang\n    module chamfer_pin(end) {\n        translate([0, 0, end ? free_length - 1 : -1])\n            rotate([0, 0, end ? 180 : 0])\n                cylinder(d1 = pin_d, d2 = pin_d - 2, h = 2, $fn = 16);\n    }\n\n    //--------------------------\n    // Assembly\n    //--------------------------\n    union() {\n        color(\"silver\") coil();\n        color(\"silver\") pin(true);\n        color(\"silver\") pin(false);\n        color(\"silver\") chamfer_pin(true);\n        color(\"silver\") chamfer_pin(false);\n    }\n}\n\n// Render one springpin\nspringpin();",
    "renders": true
  },
  {
    "mechanical_component": "springclip",
    "openscad_code": "// Springclip - medium complexity realistic style\n// Overall dimensions ~100mm length x 30mm width x 25mm height\n// 3D printable with 2mm walls and no extreme overhangs\n\nmodule rounded_cube(size, radius, center=false) {\n    // Helper for rounded corners using hull\n    translate(center?[0,0,0]:[size[0]/2, size[1]/2, size[2]/2])\n    hull() {\n        for(x=[radius, size[0]-radius], y=[radius, size[1]-radius], z=[radius, size[2]-radius]) {\n            translate([x,y,z]) sphere(r=radius, $fn=16);\n        }\n    }\n}\n\nmodule spring_body() {\n    // Main spring body - U-shaped with rounded ends\n    difference() {\n        union() {\n            // Left arm\n            translate([5, 10, 10]) rounded_cube([75, 10, 5], 2.5, center=true);\n            \n            // Right arm\n            translate([5, 20, 10]) rounded_cube([75, 10, 5], 2.5, center=true);\n            \n            // Curved back\n            translate([82.5, 15, 10]) rotate([0,90,0]) cylinder(h=10, r1=5, r2=5, $fn=32);\n            \n            // Back connecting bridge\n            translate([82.5, 15, 15]) rounded_cube([10, 10, 5], 2.5, center=true);\n        }\n        \n        // Central cavity for spring action\n        translate([5, 15, 10]) rounded_cube([70, 8, 3.5], 2, center=true);\n    }\n}\n\nmodule grip_teeth() {\n    // Teeth pattern on inner surfaces for better grip\n    teeth_count = 8;\n    tooth_width = 2;\n    tooth_height = 1;\n    tooth_depth = 2;\n    \n    // Left arm teeth\n    for(i=[0:teeth_count-1]) {\n        translate([10 + i*8, 15, 10]) \n        cube([tooth_width, tooth_depth, tooth_height], center=true);\n    }\n    \n    // Right arm teeth\n    for(i=[0:teeth_count-1]) {\n        translate([10 + i*8, 15, 10]) \n        cube([tooth_width, tooth_depth, tooth_height], center=true);\n    }\n}\n\nmodule finger_grips() {\n    // Textured grip areas for fingers\n    grip_radius = 5;\n    grip_depth = 1;\n    \n    // Left arm grip pattern\n    translate([40, 5, 10]) rotate([90,0,0]) \n    cylinder(h=grip_depth, r=grip_radius, $fn=20);\n    \n    // Right arm grip pattern  \n    translate([40, 25, 10]) rotate([90,0,0]) \n    cylinder(h=grip_depth, r=grip_radius, $fn=20);\n    \n    // Additional grip texture\n    for(a=[0:30:330]) {\n        translate([40, 5, 10]) rotate([0,0,a]) \n        translate([grip_radius, 0, 0]) \n        cube([2, 1, 0.5], center=true);\n        \n        translate([40, 25, 10]) rotate([0,0,a]) \n        translate([grip_radius, 0, 0]) \n        cube([2, 1, 0.5], center=true);\n    }\n}\n\nmodule spring_cut() {\n    // Cutout for spring mechanism\n    translate([0, 15, 12.5]) \n    cube([85, 10, 2.5], center=false);\n}\n\nmodule mounting_hole() {\n    // Optional mounting hole in back\n    translate([82.5, 15, 12.5]) rotate([90,0,0]) \n    cylinder(h=10, r=2.5, $fn=16);\n}\n\n// Main assembly\nunion() {\n    // Core spring structure\n    spring_body();\n    \n    // Grip teeth for holding items\n    color(\"silver\") grip_teeth();\n    \n    // Finger grips for comfortable use\n    color(\"gray\") finger_grips();\n}\n\n// Optional mounting hole (uncomment if needed)\n// mounting_hole();",
    "renders": true
  },
  {
    "mechanical_component": "springplate",
    "openscad_code": "// Springplate - a flat plate with integrated spring mount points for vibration isolation\n// Overall size: 120mm x 80mm x 15mm with 4 corner spring mounts\n\n// Parameters\nplate_length = 120;\nplate_width = 80;\nplate_thickness = 4;\nspring_mount_height = 8;\nspring_mount_diameter = 12;\nspring_coil_diameter = 6;\nwall_thickness = 2;\nmount_hole_diameter = 4;\n\n// Main plate with rounded corners\nmodule main_plate() {\n    // Base plate\n    difference() {\n        // Main block\n        translate([0, 0, plate_thickness/2])\n            cube([plate_length, plate_width, plate_thickness], center=true);\n        \n        // Rounded corners\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x * (plate_length/2 - 5), y * (plate_width/2 - 5), 0])\n                    cylinder(h=plate_thickness+1, r=5, center=true);\n            }\n        }\n    }\n    \n    // Chamfer edges\n    difference() {\n        translate([0, 0, plate_thickness/2 + 0.5])\n            cube([plate_length, plate_width, plate_thickness+1], center=true);\n        \n        translate([0, 0, plate_thickness/2 - 1])\n            cube([plate_length-wall_thickness, plate_width-wall_thickness, plate_thickness+2], center=true);\n    }\n}\n\n// Spring mount with integrated coil spring representation\nmodule spring_mount() {\n    // Base cylinder\n    cylinder(h=spring_mount_height, r=spring_mount_diameter/2, center=false);\n    \n    // Center hole for mounting\n    translate([0, 0, -0.1])\n        cylinder(h=spring_mount_height+0.2, r=mount_hole_diameter/2, center=false);\n    \n    // Coil spring representation (simplified)\n    for(i = [1:5]) {\n        rotate([0, 0, i * 60])\n            translate([spring_coil_diameter/2, 0, (i-1) * (spring_mount_height/5)])\n                rotate([90, 0, 0])\n                    cylinder(h=spring_mount_diameter, r=0.8, center=true);\n    }\n    \n    // Top lip\n    translate([0, 0, spring_mount_height])\n        cylinder(h=2, r=spring_mount_diameter/2 + 1, center=false);\n}\n\n// Reinforcement ribs\nmodule reinforcement_ribs() {\n    // Longitudinal ribs\n    for(y = [-plate_width/4, 0, plate_width/4]) {\n        translate([0, y, plate_thickness/2 + 1.5])\n            cube([plate_length - 20, 3, 3], center=true);\n    }\n    \n    // Transverse ribs\n    for(x = [-plate_length/3, 0, plate_length/3]) {\n        translate([x, 0, plate_thickness/2 + 1.5])\n            cube([3, plate_width - 10, 3], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main plate\n    main_plate();\n    \n    // Reinforcement structure\n    reinforcement_ribs();\n    \n    // Spring mounts at corners\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (plate_length/2 - 15), y * (plate_width/2 - 15), plate_thickness])\n                spring_mount();\n        }\n    }\n    \n    // Center mounting boss\n    translate([0, 0, plate_thickness])\n        cylinder(h=6, r=8, center=false);\n    translate([0, 0, plate_thickness-0.1])\n        cylinder(h=6.2, r=4, center=false);\n}",
    "renders": true
  },
  {
    "mechanical_component": "springcap",
    "openscad_code": "// Realistic Springcap Mechanical Component\n// Medium complexity 3D printable design\n// Overall dimensions: 60mm diameter, 25mm height\n\n// Main parameters\nspring_d = 60;           // Outer diameter\nspring_h = 20;           // Spring height\ncap_h = 8;               // Top cap thickness\nwall_t = 2;              // Wall thickness for 3D printing\ncoil_turns = 8;          // Number of spring coils\ncoil_rad = 2;            // Coil wire radius\ncenter_hole = 10;        // Center hole diameter\nmount_holes = 4;         // Mounting holes count\nmount_d = 4;             // Mounting hole diameter\n\n// Spring coil module\nmodule spring_coil() {\n    for(i = [0:coil_turns-1]) {\n        // Each coil turn as a torus segment\n        rotate([0, 0, i * 360/coil_turns])\n            translate([0, 0, i * spring_h/coil_turns])\n                rotate_extrude(angle=360, $fn=16)\n                    translate([spring_d/2 - coil_rad, 0, 0])\n                        circle(r=coil_rad);\n    }\n}\n\n// Top cap with mounting holes\nmodule top_cap() {\n    difference() {\n        // Main cap body\n        cylinder(h=cap_h, d=spring_d, $fn=64);\n        \n        // Center hole\n        cylinder(h=cap_h+1, d=center_hole, $fn=32);\n        \n        // Mounting holes\n        for(i = [0:mount_holes-1]) {\n            rotate([0, 0, i * 360/mount_holes])\n                translate([spring_d/2 - mount_d - 5, 0, -1])\n                    cylinder(h=cap_h+2, d=mount_d, $fn=16);\n        }\n        \n        // Reinforcement ribs (negative space between)\n        for(i = [0:mount_holes-1]) {\n            rotate([0, 0, i * 360/mount_holes + 360/(mount_holes*2)])\n                translate([spring_d/2 - 10, -2, -1])\n                    cube([20, 4, cap_h+2]);\n        }\n    }\n    \n    // Add grip knurls on top\n    for(i = [0:35]) {\n        rotate([0, 0, i * 10])\n            translate([spring_d/2 - 4, -1, cap_h-1])\n                cube([2, 2, 1]);\n    }\n}\n\n// Bottom base with alignment tabs\nmodule bottom_base() {\n    difference() {\n        // Main base\n        cylinder(h=cap_h, d=spring_d, $fn=64);\n        \n        // Center hole\n        cylinder(h=cap_h+1, d=center_hole, $fn=32);\n        \n        // Alignment slots\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([spring_d/2 - 8, -2, -1])\n                    cube([6, 4, cap_h+2]);\n        }\n    }\n    \n    // Add chamfer to bottom edge\n    difference() {\n        cylinder(h=cap_h, d=spring_d, $fn=64);\n        translate([0, 0, -1])\n            cylinder(h=cap_h+2, d=spring_d-4, $fn=64);\n    }\n}\n\n// Assembly\nunion() {\n    // Top cap\n    translate([0, 0, spring_h + cap_h])\n        top_cap();\n    \n    // Spring coils\n    color(\"silver\")\n        spring_coil();\n    \n    // Bottom base\n    translate([0, 0, 0])\n        bottom_base();\n    \n    // Structural support rings\n    color(\"gray\")\n    for(i = [0:1]) {\n        translate([0, 0, i * spring_h + cap_h/2])\n            difference() {\n                cylinder(h=wall_t, d=spring_d-4, $fn=64);\n                cylinder(h=wall_t+1, d=center_hole+2, $fn=32);\n            }\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "springseat",
    "openscad_code": "// OpenSCAD Springseat – realistic style, medium complexity\n// Overall footprint ≈ 110 mm × 110 mm, height ≈ 90 mm\n// 2 mm wall thickness everywhere for 3-D printing\n\n/* ============== PARAMETERS ============== */\nseat_d       = 100;      // top disc / spring platform\nseat_h       = 4;\nwall_t       = 2;        // uniform wall thickness\nspring_coil_d= 60;       // main coil OD\nspring_wire_d= 6;        // wire Ø\nspring_turns = 4.5;\nspring_pitch = 12;\nleg_h        = 50;       // from bottom plate to spring start\nbase_d       = 110;\nbase_h       = 6;\nbolt_head_d  = 10;       // central M6 bolt head\nbolt_head_h  = 5;\nbolt_shank_d = 6;\n\n/* ============== HELPERS ============== */\nmodule hollow_cylinder(od, id, h){\n    difference(){\n        cylinder(d=od, h=h, $fn=48);\n        translate([0,0,-0.1])\n            cylinder(d=id, h=h+0.2, $fn=48);\n    }\n}\n\n/* ============== MAIN PARTS ============== */\nmodule spring(){\n    // Draw one coil as a torus segment\n    module coil_seg(ang){\n        rotate([0,0,ang])\n            translate([spring_coil_d/2,0,ang*spring_pitch/360])\n                rotate([90,0,0])\n                    cylinder(d=spring_wire_d, h=spring_coil_d*PI*2/120, $fn=12);\n    }\n    // Build all turns\n    for(t=[0:5:360*spring_turns]) coil_seg(t);\n}\n\nmodule spring_seat_top(){\n    difference(){\n        // main seat disc\n        cylinder(d=seat_d, h=seat_h, $fn=60);\n        // central hole for M6 bolt\n        translate([0,0,-0.1])\n            cylinder(d=bolt_shank_d+0.5, h=seat_h+0.2, $fn=20);\n    }\n}\n\nmodule base_plate(){\n    difference(){\n        cylinder(d=base_d, h=base_h, $fn=60);\n        // hollow underside saves material\n        translate([0,0,-0.1])\n            cylinder(d=base_d-wall_t*2, h=base_h+0.2, $fn=48);\n    }\n}\n\nmodule legs(){\n    // 4 simple hollow legs, no overhangs\n    for(a=[45:90:315]){\n        rotate([0,0,a])\n            translate([base_d/2-wall_t-10,0,0])\n                rotate([0,90,0])\n                    hollow_cylinder(od=20, id=20-wall_t*2, h=leg_h);\n    }\n}\n\n/* ============== ASSEMBLY ============== */\ntranslate([0,0,base_h]) legs();\nbase_plate();\ntranslate([0,0,base_h+leg_h]) spring();\ntranslate([0,0,base_h+leg_h+spring_turns*spring_pitch-spring_wire_d/2])\n    spring_seat_top();",
    "renders": true
  },
  {
    "mechanical_component": "springpost",
    "openscad_code": "// Springpost - realistic style, medium complexity\n// A metal post with integrated spring mechanism for furniture assembly\n\n// Parameters\n$post_d = 25;           // Post diameter\n$post_h = 120;          // Post height\n$wall_t = 2;            // Wall thickness\n$base_d = 45;           // Base diameter\n$base_h = 15;           // Base height\n$spring_o = 18;         // Spring outer diameter\n$spring_w = 2.5;        // Spring wire diameter\n$spring_coils = 8;      // Number of coils\n$spring_h = 50;         // Spring total height\n$slot_w = 6;            // Key slot width\n$slot_d = 15;           // Key slot depth\n$hole_d = 8;            // Mounting hole diameter\n$hole_h = 10;           // Mounting hole counterbore depth\n$rib_w = 3;             // Reinforcement rib width\n$rib_h = 8;             // Rib height\n\n// Main post body\nmodule post_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = $post_h, d = $post_d, $fn = 64);\n        \n        // Inner hollow\n        translate([0, 0, -1])\n            cylinder(h = $post_h + 2, d = $post_d - 2 * $wall_t, $fn = 64);\n        \n        // Key slot for spring alignment\n        translate([-$post_d/2 - 1, -$slot_w/2, $post_h - $slot_d])\n            cube([$post_d/2 + 2, $slot_w, $slot_d + 1]);\n    }\n}\n\n// Base with mounting holes\nmodule base() {\n    difference() {\n        // Base cylinder\n        cylinder(h = $base_h, d = $base_d, $fn = 64);\n        \n        // Mounting holes - 4 holes at 90 degrees\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([$base_d/2 * 0.7, 0, 0])\n                    cylinder(h = $base_h + 1, d = $hole_d, $fn = 32);\n        }\n        \n        // Center hole for post\n        cylinder(h = $base_h + 1, d = $post_d - 1, $fn = 64);\n    }\n    \n    // Reinforcement ribs\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([0, ($post_d + $base_d)/4, $base_h - $rib_h])\n                cube([$rib_w, ($base_d - $post_d)/2 - 5, $rib_h], center = true);\n    }\n}\n\n// Spring mechanism\nmodule spring() {\n    // Spring base platform\n    translate([0, 0, $post_h - $spring_h - 10])\n        cylinder(h = 8, d = $post_d - 4, $fn = 32);\n    \n    // Spring coils\n    for (i = [0:$spring_coils - 1]) {\n        h = $post_h - $spring_h - 6 + i * ($spring_h / $spring_coils);\n        rotate([0, 0, i * 360 / $spring_coils * 2]) {\n            translate([0, 0, h])\n                cylinder(h = $spring_h / $spring_coils, d = $spring_w, $fn = 16);\n        }\n    }\n    \n    // Spring top cap\n    translate([0, 0, $post_h - 6])\n        cylinder(h = 5, d = $spring_o, $fn = 32);\n}\n\n// Top mounting bracket\nmodule top_bracket() {\n    translate([0, 0, $post_h])\n        difference() {\n            union() {\n                // Main bracket\n                cube([30, 20, 12], center = true);\n                \n                // Side supports\n                translate([10, 0, 0])\n                    cube([8, 16, 8], center = true);\n                translate([-10, 0, 0])\n                    cube([8, 16, 8], center = true);\n            }\n            \n            // Mounting holes\n            translate([0, 0, -1])\n                cylinder(h = 14, d = 4, $fn = 16);\n            translate([10, 0, -1])\n                cylinder(h = 14, d = 4, $fn = 16);\n            translate([-10, 0, -1])\n                cylinder(h = 14, d = 4, $fn = 16);\n            \n            // Center hole for post\n            translate([0, 0, -1])\n                cylinder(h = 14, d = $post_d - 2, $fn = 64);\n        }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Post\n    translate([0, 0, $base_h])\n        post_body();\n    \n    // Spring mechanism\n    spring();\n    \n    // Top bracket\n    top_bracket();\n}",
    "renders": true
  },
  {
    "mechanical_component": "springguide",
    "openscad_code": "// OpenSCAD Spring Guide – realistic, medium complexity\n// Overall size: 90 mm long, 30 mm OD, fits 20 mm OD spring\n// Wall thickness = 2 mm everywhere for 3D-printability\n\n$fa = 2;\n$fs = 0.5;\n\nmodule spring_guide() {\n    // Main cylindrical body\n    difference() {\n        cylinder(h = 80, d = 30, center = true); // 2 mm wall shell\n        translate([0, 0, -1])                    // clearance for spring\n            cylinder(h = 82, d = 20, center = true);\n    }\n\n    // Front flange (locating face)\n    translate([0, 0, 40])\n        cylinder(h = 5, d = 40); // 5 mm thick, 40 mm OD\n\n    // Rear flange with bolt holes\n    translate([0, 0, -40])\n        difference() {\n            cylinder(h = 10, d = 40); // 10 mm thick\n            // Three M4 bolt holes on PCD 30 mm\n            for (a = [0:120:240])\n                rotate([0, 0, a])\n                    translate([15, 0, -1])\n                        cylinder(h = 12, d = 4.5, $fn = 20);\n        }\n\n    // Internal lead-in chamfer (prints without support)\n    translate([0, 0, 39])\n        cylinder(h1 = 2, h2 = 0, r1 = 10, r2 = 12);\n\n    // External ribs for stiffness\n    for (a = [0:90:359])\n        rotate([0, 0, a])\n            translate([0, 15, 0])\n                cube([2, 2, 80], center = true);\n\n    // Mounting boss for set-screw (M4)\n    rotate([0, 90, 0])\n        translate([0, 0, 15])\n            rotate([0, 0, 90])\n                difference() {\n                    cube([10, 8, 8], center = true); // boss body\n                    translate([0, 0, 4.5])\n                        rotate([90, 0, 0])\n                            cylinder(h = 10, d = 4.5, $fn = 20); // tapped hole\n                }\n}\n\nspring_guide();",
    "renders": true
  },
  {
    "mechanical_component": "springretainer",
    "openscad_code": "// Spring Retainer Mechanical Component\n// Medium complexity, realistic style\n\n$fn = 50;\nwall_thickness = 2;\nspring_diameter = 12;\nspring_length = 40;\nbody_length = 60;\nbody_width = 25;\nbody_height = 15;\nmount_hole_diameter = 5;\nmount_hole_spacing = 40;\n\nmodule main_body() {\n    difference() {\n        // Main rectangular body\n        cube([body_length, body_width, body_height], center=true);\n        \n        // Central spring channel\n        translate([0, 0, 0])\n            cylinder(h=body_height+2, r=spring_diameter/2+1, center=true);\n        \n        // Mounting holes\n        translate([mount_hole_spacing/2, 0, -body_height/2])\n            cylinder(h=body_height+2, r=mount_hole_diameter/2, center=false);\n        translate([-mount_hole_spacing/2, 0, -body_height/2])\n            cylinder(h=body_height+2, r=mount_hole_diameter/2, center=false);\n    }\n}\n\nmodule spring_guides() {\n    // Front guide fingers\n    for(i=[-1, 1]) {\n        translate([body_length/2-3, i*8, 0])\n            cube([4, 4, body_height-1], center=true);\n    }\n    \n    // Rear guide fingers\n    for(i=[-1, 1]) {\n        translate([-body_length/2+3, i*8, 0])\n            cube([4, 4, body_height-1], center=true);\n    }\n}\n\nmodule retention_clips() {\n    // Top retention clips\n    for(x=[body_length/4, -body_length/4]) {\n        translate([x, body_width/2-2, body_height/2+1])\n            union() {\n                cube([6, 4, 3], center=true);\n                translate([0, 2, 1.5])\n                    cube([6, 2, 3], center=true);\n            }\n    }\n    \n    mirror([0, 1, 0])\n        for(x=[body_length/4, -body_length/4]) {\n            translate([x, body_width/2-2, body_height/2+1])\n                union() {\n                    cube([6, 4, 3], center=true);\n                    translate([0, 2, 1.5])\n                        cube([6, 2, 3], center=true);\n                }\n        }\n}\n\nmodule reinforcement_ribs() {\n    // Bottom ribs for strength\n    for(x=[-body_length/3, 0, body_length/3]) {\n        translate([x, 0, -body_height/2+1])\n            cube([4, body_width-6, 2], center=true);\n    }\n}\n\nmodule chamfer_edges() {\n    // Chamfer top edges\n    translate([0, 0, body_height/2])\n        cube([body_length+0.5, body_width+0.5, 1], center=true);\n    \n    difference() {\n        translate([0, 0, body_height/2-1])\n            cube([body_length-4, body_width-4, 2], center=true);\n        translate([0, 0, body_height/2-2])\n            cube([body_length-2, body_width-2, 4], center=true);\n    }\n}\n\nunion() {\n    main_body();\n    spring_guides();\n    retention_clips();\n    reinforcement_ribs();\n    chamfer_edges();\n}",
    "renders": true
  },
  {
    "mechanical_component": "springbushing",
    "openscad_code": "// Spring Bushing - Medium Complexity Realistic Model\n// Overall dimensions: 40mm OD, 20mm ID, 60mm length\n// Designed for 3D printing with 2mm walls and no overhangs\n\nmodule main_bushing() {\n    // Outer cylindrical shell with chamfered edges\n    difference() {\n        // Main cylinder body\n        cylinder(h=60, d=40, $fn=100);\n        \n        // Inner bore for spring\n        cylinder(h=62, d=20, $fn=100);\n        \n        // Top chamfer\n        translate([0, 0, 58])\n            cylinder(h=2, d1=40, d2=36, $fn=100);\n        \n        // Bottom chamfer\n        translate([0, 0, 0])\n            cylinder(h=2, d1=36, d2=40, $fn=100);\n    }\n}\n\nmodule mounting_flange() {\n    // Top mounting flange with bolt holes\n    difference() {\n        // Flange base\n        cylinder(h=8, d=56, $fn=100);\n        \n        // Bolt holes - 4 holes at 45mm PCD\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([22.5, 0, -1])\n                    cylinder(h=10, d=6, $fn=32);\n        }\n        \n        // Central clearance\n        cylinder(h=10, d=22, $fn=100);\n    }\n}\n\nmodule grease_grooves() {\n    // Spiral grease grooves on inner surface\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([0, 0, i*10])\n                linear_extrude(height=2, twist=60)\n                    offset(delta=0.5)\n                        circle(d=19, $fn=100);\n    }\n}\n\nmodule retaining_ring_groove() {\n    // External retaining ring groove\n    translate([0, 0, 45])\n        difference() {\n            cylinder(h=3, d=44, $fn=100);\n            cylinder(h=3, d=36, $fn=100);\n        }\n}\n\nmodule ribbed_outer_surface() {\n    // External ribs for grip and heat dissipation\n    for(i=[0:23]) {\n        rotate([0, 0, i*15])\n            translate([18, 0, 5])\n                cube([4, 2, 50], center=true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    union() {\n        // Main bushing body\n        main_bushing();\n        \n        // Mounting flange on top\n        translate([0, 0, 60])\n            mounting_flange();\n        \n        // Retaining ring groove\n        retaining_ring_groove();\n        \n        // Ribbed outer surface\n        ribbed_outer_surface();\n        \n        // Grease grooves on inner surface\n        translate([0, 0, 5])\n            grease_grooves();\n    }",
    "renders": true
  },
  {
    "mechanical_component": "springcollar",
    "openscad_code": "// Spring Collar for 1-inch shaft\n// Medium-complexity, realistic style, 3D-printable\n\n$fn = 36;\n\n// Overall dimensions\ncollar_outer = 35;      // outer diameter\ncollar_inner = 25.4;    // 1 inch bore\ncollar_height = 20;\nwall_thickness = 2.2;   // safe for FDM\nsetscrew_d = 4;         // M4 set screw\nsetscrew_p = 0.75 * collar_height; // vertical position\ngrip_slit_w = 1.5;      // slit for clamping\ngrip_boss_w = 10;       // clamping tab width\ngrip_boss_h = 6;\n\nmodule collar_body() {\n    difference() {\n        cylinder(h = collar_height, d = collar_outer);\n        // central bore\n        translate([0, 0, -0.1])\n            cylinder(h = collar_height + 0.2, d = collar_inner);\n        // slit for clamping\n        translate([-collar_outer/2, -grip_slit_w/2, -0.1])\n            cube([collar_outer, grip_slit_w, collar_height + 0.2]);\n    }\n}\n\nmodule grip_tabs() {\n    // left tab\n    translate([0, -collar_outer/2 - grip_boss_w/2, collar_height/2 - grip_boss_h/2])\n        cube([grip_boss_h, grip_boss_w, grip_boss_h], center = true);\n    // right tab\n    translate([0,  collar_outer/2 + grip_boss_w/2, collar_height/2 - grip_boss_h/2])\n        cube([grip_boss_h, grip_boss_w, grip_boss_h], center = true);\n}\n\nmodule setscrew_hole() {\n    rotate([90, 0, 0])\n        translate([0, 0, -setscrew_d/2 - wall_thickness])\n            cylinder(h = wall_thickness + setscrew_d/2 + 1, d = setscrew_d + 0.5, $fn = 20);\n}\n\n// chamfers on top/bottom edges for printability\nmodule chamfers() {\n    difference() {\n        cylinder(h = collar_height, d = collar_outer);\n        // upper chamfer\n        translate([0, 0, collar_height - 1])\n            cylinder(h = 2, d1 = collar_outer - 2, d2 = collar_outer + 2);\n        // lower chamfer\n        translate([0, 0, -1])\n            cylinder(h = 2, d1 = collar_outer + 2, d2 = collar_outer - 2);\n    }\n}\n\nmodule springcollar() {\n    difference() {\n        union() {\n            collar_body();\n            grip_tabs();\n            chamfers();\n        }\n        // setscrew hole on left tab\n        translate([-grip_boss_h/2, -collar_outer/2 - grip_boss_w/2, setscrew_p])\n            setscrew_hole();\n    }\n}\n\nspringcollar();",
    "renders": true
  },
  {
    "mechanical_component": "springdamper",
    "openscad_code": "// Spring-damper assembly\n// Overall length ~100 mm, printable without supports\n\n// Parameters\n$fn = 36;\nwall = 2;\npiston_d = 12;\ncylinder_d = 20;\nspring_d = 18;\ncoil_wire = 2;\ncoils = 8;\nspring_free_length = 50;\ndamper_body_length = 60;\neye_d = 10;\neye_thick = 8;\nthread_d = 6;\n\n// --- Utility modules\nmodule spring_profile(h){\n    // Single coil ring\n    rotate_extrude(angle=360, $fn=8)\n        translate([spring_d/2,0,0])\n            circle(d=c coil_wire);\n}\n\nmodule coil(h){\n    // Helical coil using stacked rings\n    pitch = h / coils;\n    for(i=[0:coils-1])\n        translate([0,0,i*pitch])\n            spring_profile(coil_wire);\n}\n\n// --- End eyes\nmodule eye(){\n    difference(){\n        union(){\n            cylinder(h=eye_thick, d=eye_d, center=true);\n            cylinder(h=wall*2, d=thread_d, center=true);\n        }\n        cylinder(h=eye_thick+2, d=eye_d/2, center=true);\n    }\n}\n\n// --- Damper cylinder body\nmodule damper_cylinder(){\n    difference(){\n        union(){\n            // Main tube\n            cylinder(h=damper_body_length, d=cylinder_d);\n            // Bottom cap\n            translate([0,0,damper_body_length])\n                cylinder(h=wall, d=cylinder_d+wall*2);\n        }\n        // Inner bore\n        cylinder(h=damper_body_length+1, d=piston_d);\n        // Vent hole detail\n        translate([cylinder_d/2-wall/2, 0, damper_body_length-wall])\n            rotate([90,0,0])\n                cylinder(h=wall*2, d=wall);\n    }\n}\n\n// --- Piston rod\nmodule piston_rod(){\n    union(){\n        // Rod\n        cylinder(h=spring_free_length+damper_body_length/2, d=piston_d);\n        // End threads\n        translate([0,0,spring_free_length+damper_body_length/2])\n            cylinder(h=eye_thick, d=thread_d);\n        // Nut representation\n        translate([0,0,spring_free_length+damper_body_length/2+eye_thick])\n            cylinder(h=wall, d=thread_d+2, $fn=6);\n    }\n}\n\n// --- Assembly\ntranslate([0,0,eye_thick/2])\n    eye(); // Lower eye\n\ntranslate([0,0,eye_thick])\n    damper_cylinder(); // Outer cylinder\n\ntranslate([0,0,eye_thick+damper_body_length/2])\n    piston_rod(); // Rod running through spring\n\ntranslate([0,0,eye_thick+damper_body_length/2+spring_free_length/2])\n    rotate([0,0,0])\n        coil(spring_free_length); // Coil spring around rod\n\ntranslate([0,0,eye_thick+damper_body_length/2+spring_free_length])\n    eye(); // Upper eye",
    "renders": true
  },
  {
    "mechanical_component": "springloaded",
    "openscad_code": "// Spring-loaded hinge assembly\n// Overall size ~80mm x 30mm x 40mm\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main parameters\nbase_width = 80;\nbase_height = 30;\nbase_depth = 30;\nspring_d = 12;\nspring_coils = 8;\nspring_wire = 1.5;\npin_d = 6;\nwall_thick = 2;\n\nmodule spring(d, coils, wire, pitch) {\n    // Create one coil segment\n    module coil_seg(angle) {\n        rotate([0, 0, angle])\n            translate([d/2, 0, angle/360*pitch])\n                rotate([90, 0, 0])\n                    cylinder(h=wire, d=wire, center=true);\n    }\n    \n    // Generate all coils\n    for(i = [0:coils*360/30])\n        coil_seg(i*30);\n}\n\nmodule base_plate() {\n    // Bottom mounting plate\n    difference() {\n        cube([base_width, base_depth, wall_thick], center=true);\n        \n        // Mounting holes\n        for(x = [-30, -10, 10, 30])\n            translate([x, 0, -wall_thick/2])\n                cylinder(h=wall_thick+1, d=3.5);\n    }\n}\n\nmodule hinge_body() {\n    // Main hinge block with spring cavity\n    difference() {\n        // Main body\n        translate([-base_width/2+10, 0, wall_thick])\n            cube([20, base_depth-4, base_height], center=true);\n        \n        // Spring cavity\n        translate([-base_width/2, 0, wall_thick+base_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=25, d=spring_d+2);\n        \n        // Pin hole\n        translate([-base_width/2-5, 0, wall_thick+base_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=30, d=pin_d+1);\n    }\n}\n\nmodule moving_arm() {\n    // Rotating arm with mounting bracket\n    difference() {\n        union() {\n            // Arm body\n            translate([0, 0, base_height/2+wall_thick])\n                cube([30, base_depth-8, wall_thick*2], center=true);\n            \n            // Mounting flange\n            translate([15, 0, base_height/2+wall_thick+5])\n                cube([10, base_depth-12, 10], center=true);\n        }\n        \n        // Pin hole\n        translate([-15, 0, base_height/2+wall_thick])\n            rotate([0, 90, 0])\n                cylinder(h=30, d=pin_d+1);\n        \n        // Mounting holes in flange\n        for(y = [-8, 8])\n            translate([20, y, base_height/2+wall_thick+10])\n                cylinder(h=10, d=3.5);\n    }\n}\n\nmodule spring_anchor() {\n    // Anchor point for spring\n    translate([-base_width/2+wall_thick, 0, wall_thick+base_height/2])\n        cube([wall_thick*2, wall_thick, wall_thick*2], center=true);\n}\n\nmodule pin() {\n    // Central hinge pin\n    rotate([0, 90, 0])\n        cylinder(h=40, d=pin_d);\n}\n\n// Assembly\nunion() {\n    // Static parts\n    base_plate();\n    hinge_body();\n    spring_anchor();\n    \n    // Spring (positioned in cavity)\n    translate([-base_width/2+5, 0, wall_thick+base_height/2])\n        rotate([0, 90, 0])\n            spring(spring_d, spring_coils, spring_wire, 4);\n    \n    // Moving parts (positioned at 45° open)\n    translate([-base_width/2-5, 0, wall_thick+base_height/2])\n        rotate([0, 0, 45])\n            moving_arm();\n    \n    // Pin\n    pin();\n}",
    "renders": true
  },
  {
    "mechanical_component": "plunger",
    "openscad_code": "// Realistic Plunger - Medium Complexity\n// Overall height: ~120mm, handle diameter: ~15mm, cup diameter: ~55mm\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main module\nmodule plunger() {\n    // Handle assembly\n    handle_assembly();\n    \n    // Plunger head assembly\n    plunger_head();\n}\n\n// Handle with grip texture\nmodule handle_assembly() {\n    // Main handle shaft\n    cylinder(h = 100, d = 15, center = false);\n    \n    // Grip rings along handle\n    for(i = [10:15:85]) {\n        translate([0, 0, i])\n            cylinder(h = 3, d1 = 17, d2 = 15, center = false);\n    }\n    \n    // Top knob for hanging\n    translate([0, 0, 100]) {\n        // Knob sphere\n        sphere(d = 20);\n        \n        // Hanging hole\n        translate([0, 0, -5])\n            rotate([90, 0, 0])\n                cylinder(h = 25, d = 8, center = true);\n    }\n}\n\n// Rubber cup with reinforcement\nmodule plunger_head() {\n    // Main cup body\n    difference() {\n        // Outer cup shape\n        translate([0, 0, -25])\n            cylinder(h = 30, d1 = 55, d2 = 45, center = false);\n        \n        // Inner cavity\n        translate([0, 0, -22])\n            cylinder(h = 25, d1 = 50, d2 = 40, center = false);\n    }\n    \n    // Reinforcement ring at top\n    translate([0, 0, 0])\n        cylinder(h = 5, d = 45, center = false);\n    \n    // Connection to handle\n    translate([0, 0, 5]) {\n        // Main connector\n        cylinder(h = 15, d = 15, center = false);\n        \n        // Reinforcement ribs\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([7.5, 0, 7.5])\n                    cube([2, 15, 15], center = true);\n        }\n    }\n    \n    // Bottom lip detail\n    translate([0, 0, -25]) {\n        difference() {\n            cylinder(h = 3, d = 57, center = false);\n            cylinder(h = 3, d = 53, center = false);\n        }\n    }\n    \n    // Internal ridges for suction\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([22.5, 0, -10])\n                cube([1, 45, 15], center = true);\n    }\n}\n\n// Generate the plunger\nplunger();",
    "renders": true
  },
  {
    "mechanical_component": "pushrod",
    "openscad_code": "// Pushrod mechanical component - realistic style, medium complexity\n// Overall length: 120mm, diameter: 8mm\n// 3D printable with 2mm wall thickness throughout\n\n$fn = 36; // Smooth curves for 3D printing\n\n// Main parameters\nrod_length = 100;\nrod_diameter = 8;\nball_diameter = 12;\nball_cup_thickness = 2;\nthread_length = 10;\nthread_diameter = 6;\nhex_size = 10;\nhex_height = 8;\n\n// Main rod body\nmodule rod_body() {\n    difference() {\n        // Main cylinder\n        cylinder(h = rod_length, d = rod_diameter, center = true);\n        \n        // Lightening holes - reduce weight while maintaining strength\n        for (i = [-40:20:40]) {\n            translate([0, 0, i])\n                cylinder(h = 15, d = 4, center = true);\n        }\n    }\n}\n\n// Ball joint end\nmodule ball_joint_end() {\n    // Ball cup housing\n    difference() {\n        union() {\n            // Main cup body\n            cylinder(h = ball_diameter + 4, d = ball_diameter + 4, center = true);\n            \n            // Reinforcement ring\n            translate([0, 0, (ball_diameter + 4)/2])\n                cylinder(h = 3, d = ball_diameter + 8);\n        }\n        \n        // Spherical cavity for ball joint\n        sphere(d = ball_diameter);\n        \n        // Opening for ball stud\n        translate([0, 0, (ball_diameter + 4)/2])\n            cylinder(h = 5, d = ball_diameter/2);\n    }\n}\n\n// Threaded adjustment end\nmodule threaded_end() {\n    // Hex adjustment nut\n    cylinder(h = hex_height, d = hex_size, d1 = hex_size, $fn = 6);\n    \n    // Threaded rod extension\n    translate([0, 0, hex_height/2 + thread_length/2])\n        cylinder(h = thread_length, d = thread_diameter);\n    \n    // Thread relief groove\n    translate([0, 0, -hex_height/2 - 1])\n        cylinder(h = 2, d = thread_diameter - 2);\n}\n\n// Assembly with both ends\nmodule pushrod_assembly() {\n    // Center rod\n    rod_body();\n    \n    // Left end - ball joint\n    translate([-rod_length/2 - (ball_diameter + 4)/2, 0, 0])\n        ball_joint_end();\n    \n    // Right end - threaded adjustment\n    translate([rod_length/2 + thread_length/2 + hex_height/2, 0, 0])\n        rotate([0, 180, 0])\n            threaded_end();\n    \n    // Structural ribs for strength\n    for (i = [-30:30:30]) {\n        translate([i, rod_diameter/2 + 1, 0])\n            rotate([90, 0, 0])\n                cube([2, rod_diameter + 2, 1], center = true);\n    }\n}\n\n// Render the complete pushrod\npushrod_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "pullrod",
    "openscad_code": "// Pullrod for suspension system - realistic style, medium complexity\n// Overall length ~120mm, designed for 3D printing with 2mm walls\n\n$fn=32;\n\n// Main parameters\nrod_length = 120;\nrod_diameter = 8;\nball_joint_diameter = 16;\nball_joint_height = 12;\nthread_diameter = 6;\nthread_length = 20;\nhex_width = 12;\nhex_height = 8;\nclevis_width = 18;\nclevis_thickness = 4;\npin_diameter = 6;\npin_length = 22;\n\nmodule hex_nut(height, width) {\n    difference() {\n        cylinder(h=height, d=width/cos(30), center=true);\n        cylinder(h=height+0.1, d=thread_diameter, center=true);\n    }\n}\n\nmodule ball_joint() {\n    // Main ball joint housing\n    difference() {\n        cylinder(h=ball_joint_height, d=ball_joint_diameter);\n        // Hollow center for ball\n        translate([0, 0, -1])\n            sphere(d=ball_joint_diameter-4);\n        // Slot for pullrod\n        translate([0, -ball_joint_diameter/2, 7])\n            cube([ball_joint_diameter, ball_joint_diameter, ball_joint_height]);\n    }\n    \n    // Threaded insert\n    translate([0, 0, ball_joint_height])\n        cylinder(h=thread_length, d=thread_diameter+4);\n    \n    // Hex nut at base\n    translate([0, 0, ball_joint_height+thread_length])\n        hex_nut(hex_height, hex_width);\n}\n\nmodule clevis_end() {\n    // Main clevis body\n    difference() {\n        cube([clevis_width, clevis_thickness, clevis_width], center=true);\n        // Pin hole\n        rotate([90, 0, 0])\n            translate([0, 0, -clevis_width/2-1])\n                cylinder(h=clevis_width+2, d=pin_diameter);\n    }\n    \n    // Fork arms\n    for(side = [-1, 1]) {\n        translate([0, side*(clevis_thickness/2 + 2), 0])\n            cube([clevis_width-6, 4, clevis_width-6], center=true);\n    }\n    \n    // Threaded rod connection\n    translate([0, 0, -clevis_width/2-5])\n        cylinder(h=10, d=thread_diameter+4);\n    \n    // Lock nut\n    translate([0, 0, -clevis_width/2-15])\n        hex_nut(hex_height, hex_width);\n}\n\nmodule threaded_rod() {\n    // Main rod body\n    cylinder(h=rod_length, d=rod_diameter, center=true);\n    \n    // Thread pattern (simulated with grooves)\n    for(i = [0:2:rod_length-2]) {\n        translate([0, 0, -rod_length/2+i])\n            difference() {\n                cylinder(h=1.5, d=rod_diameter);\n                cylinder(h=2, d=thread_diameter);\n            }\n    }\n}\n\nmodule pullrod_assembly() {\n    // Left end - clevis\n    translate([-rod_length/2-15, 0, 0])\n        clevis_end();\n    \n    // Right end - ball joint\n    translate([rod_length/2+6, 0, 0])\n        ball_joint();\n    \n    // Center rod\n    rotate([0, 90, 0])\n        threaded_rod();\n}\n\n// Main assembly\npullrod_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "connectingrod",
    "openscad_code": "// Realistic 3D-printable connecting rod\n// Dimensions in mm, overall length ≈ 110 mm\n\n// ---------- PARAMETERS ----------\nrod_len = 80;          // centre-to-centre distance\nbig_end_d = 22;        // big-end bore\nsmall_end_d = 14;      // small-end bore\nwall = 2;              // printable wall thickness\npin_d = 6;             // wrist-pin / crank-pin diameter\nfillet = 3;            // small edge fillets for printing\n$fn = 36;              // cylinder resolution\n\n// ---------- MODULES ----------\n\n// Simple cylinder with clearance on bottom\nmodule cyl(d, h) {\n    cylinder(d = d, h = h, center = false);\n}\n\n// I-beam cross-section profile\nmodule i_beam(w, h, t) {\n    difference() {\n        union() {\n            // top flange\n            translate([0, h/2 - t/2, 0])\n                cube([w, t, t], center = true);\n            // web\n            cube([t, h, t], center = true);\n            // bottom flange\n            translate([0, -h/2 + t/2, 0])\n                cube([w, t, t], center = true);\n        }\n        // central hole (weight reduction)\n        translate([0, 0, 0])\n            cube([t*0.6, h*0.6, t*1.2], center = true);\n    }\n}\n\n// Rod shank\nmodule shank(len) {\n    // overall shank width tapers slightly\n    w_start = 16;\n    w_end = 12;\n    h = 14;\n\n    // generate lofted I-beam segments\n    slices = 8;\n    for (i = [0 : slices-1]) {\n        assign(\n            z = len * i / slices,\n            w = w_start + (w_end - w_start) * i / (slices - 1)\n        )\n        translate([0, 0, z])\n            linear_extrude(height = len / slices + 0.1, scale = [1, 1])\n                i_beam(w, h, wall);\n    }\n}\n\n// Bearing end cap with bolt holes\nmodule end_cap(outer_d, inner_d, thickness) {\n    difference() {\n        // main cap body\n        cylinder(d = outer_d + wall*2, h = thickness, center = true);\n        // bore\n        cylinder(d = inner_d, h = thickness + 1, center = true);\n        // bolt holes\n        for (a = [0 : 120 : 359])\n            rotate([0, 0, a])\n                translate([outer_d/2 + wall/2, 0, 0])\n                    cylinder(d = 3.2, h = thickness + 1, center = true);\n    }\n}\n\n// ---------- MAIN MODEL ----------\nunion() {\n    // ---------- SMALL END ----------\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h = 14, d = small_end_d + wall*2, center = true);\n            cylinder(h = 15, d = small_end_d, center = true);\n            // split line for printing\n            cube([small_end_d + wall*4, wall*2, 15], center = true);\n        }\n\n    // ---------- BIG END ----------\n    translate([0, rod_len, 0])\n        difference() {\n            cylinder(h = 16, d = big_end_d + wall*2, center = true);\n            cylinder(h = 17, d = big_end_d, center = true);\n            // split line for printing\n            cube([big_end_d + wall*4, wall*2, 17], center = true);\n        }\n\n    // ---------- SHANK ----------\n    translate([0, 0, -7])\n        shank(rod_len);\n\n    // ---------- BOLT BOSSES ----------\n    // big end\n    translate([0, rod_len, 0])\n        for (a = [0 : 120 : 359])\n            rotate([0, 0, a])\n                translate([big_end_d/2 + wall, 0, 0])\n                    cylinder(h = 16, d = 6, center = true);\n\n    // small end\n    translate([0, 0, 0])\n        for (a = [0 : 120 : 359])\n            rotate([0, 0, a])\n                translate([small_end_d/2 + wall, 0, 0])\n                    cylinder(h = 14, d = 5, center = true);\n\n    // ---------- OIL SQUIRT HOLE ----------\n    translate([0, rod_len/2, 5])\n        rotate([90, 0, 0])\n            cylinder(h = 10, d = 2, center = true);\n}",
    "renders": true
  },
  {
    "mechanical_component": "crank",
    "openscad_code": "// Crank mechanical component - realistic style, medium complexity\n// Overall size: ~120mm long, ~60mm wide, ~20mm thick\n\n// Main parameters\ncrank_length = 120;\ncrank_width = 60;\ncrrank_thickness = 20;\nshaft_diameter = 12;\nshaft_length = 30;\nhandle_diameter = 15;\nhandle_length = 25;\nwall_thickness = 2;\n\n// Main crank arm\nmodule crank_arm() {\n    difference() {\n        // Main arm body\n        union() {\n            // Central hub\n            cylinder(h=crrank_thickness, d=shaft_diameter + 10, $fn=32);\n            \n            // Arm extension\n            translate([0, crank_width/2, 0])\n                cube([crank_length - 30, 10, crrank_thickness], center=true);\n            \n            // Reinforcement ribs\n            for(i = [0:1]) {\n                rotate([0, 0, i * 180])\n                    translate([crank_length/2 - 15, 0, 0])\n                        cube([crank_length - 30, 3, crrank_thickness], center=true);\n            }\n        }\n        \n        // Central shaft hole\n        cylinder(h=crrank_thickness + 1, d=shaft_diameter, $fn=32);\n        \n        // Weight reduction holes\n        translate([crank_length/2, 0, 0])\n            cylinder(h=crrank_thickness + 1, d=8, $fn=16);\n    }\n}\n\n// Handle assembly\nmodule handle() {\n    translate([crank_length - 30, crank_width/2, 0]) {\n        rotate([90, 0, 0]) {\n            // Handle shaft\n            difference() {\n                cylinder(h=handle_length, d=handle_diameter, $fn=32);\n                cylinder(h=handle_length + 1, d=handle_diameter - 4, $fn=32);\n            }\n            \n            // Handle grip\n            translate([0, 0, handle_length - 5]) {\n                difference() {\n                    sphere(d=handle_diameter + 4, $fn=32);\n                    sphere(d=handle_diameter - 2, $fn=32);\n                }\n            }\n        }\n        \n        // Mounting plate\n        translate([0, 0, -crrank_thickness/2 - 2])\n            cube([15, 15, 4], center=true);\n    }\n}\n\n// Shaft keyway\nmodule keyway() {\n    translate([0, 0, -crrank_thickness/2])\n        cube([shaft_diameter/2, 3, crrank_thickness + 1], center=true);\n}\n\n// Assembly\nunion() {\n    crank_arm();\n    handle();\n    keyway();\n    \n    // Counterweight\n    translate([-20, 0, 0]) {\n        difference() {\n            cylinder(h=crrank_thickness, d=20, $fn=32);\n            cylinder(h=crrank_thickness + 1, d=16, $fn=32);\n        }\n    }\n    \n    // Mounting holes\n    for(i = [-1, 1]) {\n        translate([i * 10, 0, 0])\n            cylinder(h=crrank_thickness + 1, d=4, $fn=16);\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "eccentric",
    "openscad_code": "// Eccentric cam with integrated shaft and keyway\n// Overall dimensions: 80mm diameter, 25mm thick\n// Realistic medium-complexity mechanical component\n\n// Main parameters\nshaft_diameter = 12;\nshaft_length = 30;\ncam_diameter = 80;\ncam_thickness = 25;\neccentricity = 15;\nkeyway_width = 4;\nkeyway_depth = 2;\nwall_thickness = 2;\n\nmodule keyway() {\n    // Create keyway slot for shaft\n    translate([0, shaft_diameter/2 - keyway_depth/2, -cam_thickness/2 - 1])\n        cube([keyway_width, keyway_depth + 2, cam_thickness + 2], center=true);\n}\n\nmodule shaft_hole() {\n    // Main shaft bore\n    cylinder(h=cam_thickness + 2, d=shaft_diameter, $fn=64);\n    \n    // Add keyway to shaft hole\n    keyway();\n}\n\nmodule cam_profile() {\n    // Create eccentric cam shape\n    difference() {\n        // Main cam body - offset by eccentricity\n        translate([eccentricity, 0, 0])\n            cylinder(h=cam_thickness, d=cam_diameter, $fn=128);\n        \n        // Central shaft hole\n        shaft_hole();\n    }\n    \n    // Add structural ribs for strength\n    for(i = [0:60:359]) {\n        rotate([0, 0, i])\n            translate([eccentricity/2, 0, 0])\n                cube([eccentricity, 4, cam_thickness], center=true);\n    }\n}\n\nmodule shaft_extension() {\n    // Extend shaft beyond cam body\n    translate([0, 0, cam_thickness/2])\n        cylinder(h=shaft_length, d=shaft_diameter, $fn=64);\n    \n    // Add shaft keyway extension\n    translate([0, shaft_diameter/2 - keyway_depth/2, cam_thickness/2 + shaft_length/2])\n        cube([keyway_width, keyway_depth, shaft_length], center=true);\n}\n\nmodule mounting_holes() {\n    // Add mounting holes for attachment\n    for(i = [0:120:240]) {\n        rotate([0, 0, i])\n            translate([cam_diameter/2 - 10, 0, 0])\n                cylinder(h=cam_thickness + 2, d=6, $fn=32);\n    }\n}\n\n// Assemble the complete eccentric cam\nunion() {\n    // Main cam body\n    cam_profile();\n    \n    // Shaft extension\n    shaft_extension();\n    \n    // Mounting holes (remove material)\n    difference() {\n        children();\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "lobe",
    "openscad_code": "// OpenSCAD Lobe Pump Rotor – medium-complexity mechanical component\n// Dimensions chosen for 3D-printability on a 200 mm bed\n// Overall Ø ≈ 90 mm, thickness 20 mm, wall 2 mm\n\n$fn = 36;   // smooth curves\n\n// ---------- PARAMETERS ----------\nwall        = 2;        // shell thickness\nD           = 90;       // outer diameter\nth          = 20;       // rotor thickness\nbore        = 8;        // central shaft bore\nlobes       = 3;        // tri-lobe rotor\ndrive_holes = 6;        // bolt circle on hub\ndrive_d     = 4;        // clearance holes for M4 screws\ndrive_R     = 15;       // radius of bolt circle\nkey_w       = 3;        // shaft key width\nkey_h       = 1.5;      // shaft key depth\n\n// ---------- 2D PROFILE ----------\nmodule lobe_profile(r_outer, r_inner, n) {\n    // one lobe as union of two offset circles (epitrochoid approximation)\n    step = 360/n;\n    for(i=[0:n-1]) {\n        rotate(i*step)\n            translate([r_outer - r_inner, 0, 0])\n                circle(r = r_inner);\n    }\n}\n\n// ---------- MAIN BODY ----------\nmodule rotor_body() {\n    profile_h = 10;           // height of lobe part\n    hub_h     = th - profile_h;\n    \n    difference() {\n        // lobed disc\n        linear_extrude(height = profile_h)\n            offset(delta = wall)           // outer shell\n                offset(delta = -wall)      // inner void\n                    lobe_profile(D/2 - wall, D/4, lobes);\n        \n        // central bore + keyway\n        translate([0, 0, -1])\n            cylinder(h = profile_h + 2, d = bore, $fn = 32);\n        translate([bore/2, 0, -1])\n            cube([key_w, bore/2 + key_h, profile_h + 2], center = true);\n    }\n    \n    // hub\n    translate([0, 0, profile_h])\n        difference() {\n            cylinder(h = hub_h, d = D/3);      // hub cylinder\n            translate([0, 0, -1])\n                cylinder(h = hub_h + 2, d = bore);\n            // keyway continues through hub\n            translate([bore/2, 0, -1])\n                cube([key_w, bore/2 + key_h, hub_h + 2], center = true);\n            \n            // drive bolt holes\n            for(i=[0:drive_holes-1])\n                rotate(i*360/drive_holes)\n                    translate([drive_R, 0, -1])\n                        cylinder(h = hub_h + 2, d = drive_d);\n        }\n}\n\n// ---------- LIGHTENING POCKETS ----------\n// triangular cut-outs between lobes to save material\nmodule lightening() {\n    depth = th - wall;\n    for(i=[0:lobes-1])\n        rotate(i*360/lobes)\n            translate([D/4, 0, wall/2])\n                rotate([0, 90, 0]) {\n                    difference() {\n                        cylinder(h = D/3, d = D/3, $fn = 3);\n                        translate([0, 0, wall])\n                            cylinder(h = D/3 + 2, d = D/3 - 2*wall, $fn = 3);\n                    }\n                }\n}\n\n// ---------- ASSEMBLY ----------\nunion() {\n    rotor_body();\n    lightening();\n}",
    "renders": true
  },
  {
    "mechanical_component": "follower",
    "openscad_code": "// OpenSCAD code for a realistic CAM FOLLOWER (medium complexity, 3D-printable)\n// Height ≈ 80 mm, Ø≈ 50 mm, wall 2 mm\n\n$fn = 36;            // reasonable resolution for 3D-print\n\n// ---------- parameters ----------\nshank_d     = 10;    // Ø of cylindrical shank\nshank_h     = 35;    // length of shank\nhead_d      = 36;    // diameter of roller head\nhead_h      = 20;    // thickness of roller\nroller_d    = 16;    // Ø of actual roller\nroller_h    = 14;    // width of roller\nboss_d      = 20;    // hub diameter\nboss_h      = 6;     // hub height\nkey_d       = 4;     // set-screw key diameter\nkey_h       = 3;\n\n// ---------- module: cylindrical shank ----------\nmodule shank() {\n    // main cylinder\n    cylinder(d = shank_d, h = shank_h, center = false);\n    // chamfer at bottom\n    translate([0,0,0])\n        cylinder(d1 = shank_d, d2 = shank_d-2, h = 2, center = false);\n}\n\n// ---------- module: follower head ----------\nmodule head() {\n    difference() {\n        // solid disk\n        cylinder(d = head_d, h = head_h, center = false);\n\n        // large central recess (light-weighting)\n        translate([0,0,2])\n            cylinder(d = head_d - 6, h = head_h - 2, center = false);\n\n        // four spoke-like lightening holes\n        for (a = [0:90:270]) {\n            rotate([0,0,a])\n                translate([head_d/2 - 5, 0, 2])\n                    cube([10, 6, head_h - 2], center = true);\n        }\n\n        // center hole for roller axle\n        translate([0,0,(head_h - roller_h)/2])\n            cylinder(d = roller_d + 2, h = roller_h + 0.1, center = false);\n    }\n}\n\n// ---------- module: roller ----------\nmodule roller() {\n    difference() {\n        // roller body\n        cylinder(d = roller_d, h = roller_h, center = true);\n        // central axle hole (Ø4 mm, printable without support)\n        cylinder(d = 4, h = roller_h + 1, center = true);\n    }\n}\n\n// ---------- module: axle hub ----------\nmodule boss() {\n    difference() {\n        // hub cylinder\n        translate([0, 0, head_h/2])\n            cylinder(d = boss_d, h = boss_h, center = true);\n        // horizontal key-way for grub screw\n        translate([0, 0, head_h/2])\n            rotate([0,90,0])\n                cylinder(d = key_d, h = key_h + 0.2, center = true);\n    }\n}\n\n// ---------- assembly ----------\nunion() {\n    // shank\n    shank();\n\n    // head translated to top of shank\n    translate([0, 0, shank_h - 1])\n        head();\n\n    // hub between head and roller\n    translate([0, 0, shank_h - 1])\n        boss();\n\n    // roller floating in head recess\n    translate([0, 0, shank_h + head_h/2])\n        roller();\n}",
    "renders": true
  },
  {
    "mechanical_component": "slider",
    "openscad_code": "// Slider mechanical_component - realistic style with medium complexity\n// 3D printable linear bearing slider\n// Dimensions: 100mm x 40mm x 30mm\n\n// Configuration parameters\n$fn = 32;\nwall_thickness = 2;\nslide_diameter = 12;\nslide_clearance = 0.5;\nmounting_hole_diameter = 4;\nmounting_hole_spacing = 25;\n\n// Main slider block\nmodule slider_block() {\n    difference() {\n        // Main body\n        union() {\n            // Base block\n            cube([80, 40, 25], center=true);\n            \n            // Reinforcement ribs\n            for(i = [-1:1:1]) {\n                translate([i * 30, 0, 10]) {\n                    cube([6, 38, 5], center=true);\n                }\n            }\n            \n            // Top mounting flanges\n            translate([0, 0, 12.5]) {\n                cube([85, 45, 3], center=true);\n            }\n        }\n        \n        // Central slide hole\n        translate([0, 0, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=50, r=(slide_diameter + slide_clearance)/2, center=true);\n            }\n        }\n        \n        // Mounting holes\n        for(i = [-1:1:1]) {\n            translate([i * mounting_hole_spacing, 15, 12.5]) {\n                cylinder(h=5, r=mounting_hole_diameter/2, center=true);\n            }\n            translate([i * mounting_hole_spacing, -15, 12.5]) {\n                cylinder(h=5, r=mounting_hole_diameter/2, center=true);\n            }\n        }\n        \n        // Weight reduction pockets\n        translate([0, 0, -8]) {\n            cube([70, 30, 8], center=true);\n        }\n    }\n}\n\n// Lubrication grooves\nmodule lubrication_grooves() {\n    difference() {\n        slider_block();\n        \n        // Circumferential grooves\n        rotate([90, 0, 0]) {\n            for(z = [-15:5:15]) {\n                translate([0, 0, z]) {\n                    cylinder(h=1.5, r=(slide_diameter + slide_clearance)/2 + 0.5, center=true);\n                }\n            }\n        }\n        \n        // Axial grooves\n        for(angle = [0:60:359]) {\n            rotate([90, 0, angle]) {\n                cube([slide_diameter + slide_clearance + 1, 1, 100], center=true);\n            }\n        }\n    }\n}\n\n// End caps for retention\nmodule end_caps() {\n    // Front cap\n    translate([40, 0, 0]) {\n        difference() {\n            cylinder(h=5, r=22, center=true);\n            cylinder(h=6, r=(slide_diameter + slide_clearance)/2, center=true);\n        }\n    }\n    \n    // Rear cap\n    translate([-40, 0, 0]) {\n        difference() {\n            cylinder(h=5, r=22, center=true);\n            cylinder(h=6, r=(slide_diameter + slide_clearance)/2, center=true);\n        }\n    }\n}\n\n// Assembly\nlubrication_grooves();\nend_caps();",
    "renders": true
  },
  {
    "mechanical_component": "guide",
    "openscad_code": "// Linear Bearing Guide Rail Assembly\n// A 3D-printable guide rail with carriage for smooth linear motion\n// Overall length: 100mm, designed for 3D printing with 2mm walls\n\n// Parameters\nrail_length = 100;\nrail_width = 20;\nrail_height = 15;\ncarriage_length = 40;\ncarriage_width = 30;\ncarriage_height = 12;\nbearing_diameter = 6;\nbearing_spacing = 15;\nmount_hole_diameter = 4;\nmount_hole_spacing = 20;\n\n// Rail base with mounting holes\nmodule rail_base() {\n    difference() {\n        // Main rail body\n        cube([rail_length, rail_width, rail_height], center=true);\n        \n        // Mounting holes along bottom\n        for(i = [-2:2]) {\n            translate([i * mount_hole_spacing, 0, -rail_height/2 - 0.1]) {\n                cylinder(h=rail_height + 1, d=mount_hole_diameter, $fn=16);\n            }\n        }\n        \n        // Center channel for weight reduction\n        translate([0, 0, 0]) {\n            cube([rail_length * 0.8, rail_width * 0.6, rail_height * 0.7], center=true);\n        }\n    }\n}\n\n// Rail top with v-groove guide\nmodule rail_guide() {\n    difference() {\n        // Top rail section\n        translate([0, 0, rail_height/2 + 2]) {\n            cube([rail_length, rail_width * 0.8, 4], center=true);\n        }\n        \n        // V-groove track\n        for(i = [-1, 1]) {\n            translate([0, i * rail_width * 0.15, rail_height/2 + 4]) {\n                rotate([0, 45 * i, 0]) {\n                    cube([rail_length, 3, 3], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Bearing carriage assembly\nmodule carriage() {\n    difference() {\n        union() {\n            // Main carriage body\n            translate([0, 0, carriage_height/2]) {\n                cube([carriage_length, carriage_width, carriage_height], center=true);\n            }\n            \n            // End caps for stability\n            for(i = [-1, 1]) {\n                translate([i * carriage_length/2, 0, carriage_height/2]) {\n                    cube([2, carriage_width, carriage_height], center=true);\n                }\n            }\n            \n            // Mounting platform\n            translate([0, 0, carriage_height + 1]) {\n                cube([carriage_length * 0.6, carriage_width * 0.6, 2], center=true);\n            }\n        }\n        \n        // Bearing pockets\n        for(i = [-1, 1]) {\n            translate([i * bearing_spacing, 0, carriage_height/2]) {\n                sphere(d=bearing_diameter, $fn=20);\n            }\n        }\n        \n        // Mounting holes in platform\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x * 8, y * 8, carriage_height + 2.1]) {\n                    cylinder(h=3, d=3, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// End stops\nmodule end_stop() {\n    difference() {\n        // Main stop block\n        cube([4, rail_width + 4, rail_height + 8], center=true);\n        \n        // Screw hole\n        translate([0, 0, 0]) {\n            cylinder(h=5, d=3, $fn=16);\n        }\n    }\n}\n\n// Assembly\nmodule guide_rail_assembly() {\n    // Rail components\n    rail_base();\n    rail_guide();\n    \n    // End stops\n    translate([-rail_length/2 - 2, 0, 0]) {\n        end_stop();\n    }\n    translate([rail_length/2 + 2, 0, 0]) {\n        mirror([1, 0, 0]) {\n            end_stop();\n        }\n    }\n    \n    // Carriage positioned at 25% of rail\n    translate([-rail_length/4, 0, rail_height + 2]) {\n        carriage();\n    }\n}\n\n// Render the complete guide rail\nguide_rail_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "rail",
    "openscad_code": "// Rail mechanical component - realistic style, medium complexity\n// 3D printable rail with mounting holes and structural reinforcement\n\n$fn = 30;\n\n// Main parameters\nrail_length = 100;\nrail_width = 20;\nrail_height = 15;\nwall_thickness = 2;\nmounting_hole_diameter = 4;\nmounting_hole_spacing = 20;\n\n// Base rail profile module\nmodule rail_profile() {\n    difference() {\n        // Main rail body\n        linear_extrude(height = rail_height) {\n            polygon(points = [\n                [0, 0],\n                [rail_width, 0],\n                [rail_width - wall_thickness, wall_thickness],\n                [rail_width - wall_thickness, rail_height - wall_thickness],\n                [rail_width, rail_height],\n                [0, rail_height],\n                [wall_thickness, rail_height - wall_thickness],\n                [wall_thickness, wall_thickness],\n                [0, 0]\n            ]);\n        }\n        \n        // Internal cavity\n        translate([wall_thickness, wall_thickness, wall_thickness]) {\n            cube([rail_width - 2*wall_thickness, rail_height - 2*wall_thickness, rail_height + 1]);\n        }\n    }\n}\n\n// Mounting holes module\nmodule mounting_holes() {\n    for(i = [0 : floor(rail_length / mounting_hole_spacing)]) {\n        translate([i * mounting_hole_spacing + wall_thickness, rail_width/2, rail_height/2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = rail_width + 1, d = mounting_hole_diameter, $fn = 20);\n            }\n        }\n    }\n}\n\n// Reinforcement ribs\nmodule reinforcement_ribs() {\n    rib_spacing = 25;\n    for(i = [0 : floor(rail_length / rib_spacing)]) {\n        translate([i * rib_spacing + wall_thickness, 0, 0]) {\n            difference() {\n                cube([wall_thickness, rail_width, rail_height]);\n                translate([0, wall_thickness, wall_thickness]) {\n                    cube([wall_thickness + 0.1, rail_width - 2*wall_thickness, rail_height - 2*wall_thickness]);\n                }\n            }\n        }\n    }\n}\n\n// End caps module\nmodule end_caps() {\n    // Left end cap\n    translate([0, 0, 0]) {\n        cube([wall_thickness, rail_width, rail_height]);\n    }\n    \n    // Right end cap\n    translate([rail_length - wall_thickness, 0, 0]) {\n        cube([wall_thickness, rail_width, rail_height]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main rail body\n    translate([0, 0, 0]) {\n        linear_extrude(height = rail_length) {\n            polygon(points = [\n                [0, 0],\n                [rail_height, 0],\n                [rail_height, rail_width],\n                [0, rail_width]\n            ]);\n        }\n        \n        // Rotate the profile along the length\n        for(i = [0 : rail_length]) {\n            translate([i, 0, 0]) {\n                rotate([0, 90, 0]) {\n                    rail_profile();\n                }\n            }\n        }\n    }\n    \n    // Add mounting holes\n    mounting_holes();\n    \n    // Add reinforcement ribs\n    reinforcement_ribs();\n    \n    // Add end caps\n    end_caps();\n    \n    // Add top mounting flange\n    translate([-5, 0, rail_height]) {\n        difference() {\n            cube([rail_length + 10, rail_width, wall_thickness]);\n            for(i = [0 : floor(rail_length / mounting_hole_spacing)]) {\n                translate([i * mounting_hole_spacing + 10, rail_width/2, -1]) {\n                    cylinder(h = wall_thickness + 2, d = mounting_hole_diameter);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "track",
    "openscad_code": "// Realistic Medium-Complexity Track Segment (Tank-style)\n// Outer dimensions ≈ 120 mm long, 40 mm wide, 20 mm high\n// Wall thickness ≈ 2 mm everywhere for 3D printing\n\nmodule track_pad(x) {\n    // Single rubber pad – 10 mm wide, 18 mm long, 4 mm thick\n    translate([x, 0, 0])\n    difference() {\n        cube([18, 10, 4], center = true);\n        // Tread pattern – shallow grooves 1 mm deep\n        for(i = [-3:3])\n            translate([i*2.5, 0, 1.5])\n                cube([1.5, 8, 3], center = true);\n    }\n}\n\nmodule track_link() {\n    // One metal link – 20 mm long, 12 mm wide, 6 mm thick\n    difference() {\n        cube([20, 12, 6], center = true);\n        // Lightening holes, 4 mm diameter\n        translate([0, 0, 0])\n            cylinder(h = 7, d = 4, center = true, $fn = 20);\n        // Pin holes at ends, 3 mm diameter\n        for(side = [-1, 1])\n            translate([side * 9, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 14, d = 3, center = true, $fn = 20);\n    }\n    \n    // Guide tooth – 3 mm high\n    translate([0, -7, 4])\n        cube([8, 2, 3], center = true);\n    \n    // Attach rubber pad\n    track_pad(0);\n}\n\nmodule track_segment(length = 120) {\n    n = floor(length / 20);     // 20 mm pitch\n    \n    // Central row of links\n    for(i = [0:n-1])\n        translate([i*20 - length/2 + 10, 0, 3])\n            track_link();\n    \n    // Outer guide plates (2 mm thick) sandwiching links\n    difference() {\n        // Main plate\n        translate([0, -14, 0])\n            cube([length, 4, 8], center = true);\n        // Clearance holes for pins\n        for(i = [0:n-1])\n            for(side = [-1, 1])\n                translate([i*20 - length/2 + 10, -14, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = 6, d = 4, center = true);\n    }\n    \n    mirror([0, 1, 0])\n        difference() {\n            translate([0, -14, 0])\n                cube([length, 4, 8], center = true);\n            for(i = [0:n-1])\n                for(side = [-1, 1])\n                    translate([i*20 - length/2 + 10, -14, 0])\n                        rotate([0, 90, 0])\n                            cylinder(h = 6, d = 4, center = true);\n        }\n    \n    // End connectors for joining segments\n    // Male tab\n    translate([length/2, 0, 3])\n        difference() {\n            cube([4, 8, 6], center = true);\n            rotate([0, 90, 0])\n                cylinder(h = 10, d = 3, center = true);\n        }\n    \n    // Female slot\n    translate([-length/2, 0, 3])\n        difference() {\n            cube([4, 8, 6], center = true);\n            rotate([0, 90, 0])\n                cylinder(h = 10, d = 3.5, center = true);\n            translate([-2, 0, 0])\n                cube([4.5, 8, 6], center = true);\n        }\n}\n\ntrack_segment(120);",
    "renders": true
  },
  {
    "mechanical_component": "ways",
    "openscad_code": "// Ways mechanical component - realistic style with medium complexity\n// A 3D printable ways (wayside railway track component) with sleepers and fastening details\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main dimensions (in mm)\nways_length = 120;\nways_width = 50;\nrail_height = 8;\nrail_width = 3;\nsleeper_width = 40;\nsleeper_height = 3;\nsleeper_spacing = 15;\nbase_thickness = 2;\n\n// Rail profile module - realistic I-beam shape\nmodule rail_profile() {\n    difference() {\n        // Main rail body\n        union() {\n            // Top flange\n            translate([0, rail_height - 1.5, 0])\n                cube([rail_width, 1.5, ways_length], center=true);\n            // Web\n            translate([0, rail_height/2, 0])\n                cube([rail_width - 1, rail_height - 3, ways_length], center=true);\n            // Bottom flange\n            translate([0, 0.75, 0])\n                cube([rail_width, 1.5, ways_length], center=true);\n        }\n        // Lightening holes in web\n        for(z = [-ways_length/2 + 10 : 15 : ways_length/2 - 10]) {\n            translate([0, rail_height/2, z])\n                cylinder(h=rail_width, r=0.5, center=true, rotate=[0,90,0]);\n        }\n    }\n}\n\n// Sleeper module with realistic details\nmodule sleeper() {\n    difference() {\n        // Main sleeper body\n        cube([sleeper_width, sleeper_height, sleeper_width/2], center=true);\n        \n        // Rail seat recesses\n        for(x = [-rail_width*2, rail_width*2]) {\n            translate([x, -sleeper_height/2 + 0.5, 0])\n                cube([rail_width + 1, 1, sleeper_width/2 - 2], center=true);\n        }\n        \n        // Drainage holes\n        for(z = [-sleeper_width/4 + 3 : 3 : sleeper_width/4 - 3]) {\n            translate([0, 0, z])\n                cylinder(h=sleeper_height, r=1, center=true);\n        }\n    }\n    \n    // Rail clips (simplified)\n    for(x = [-rail_width*2, rail_width*2]) {\n        translate([x, sleeper_height/2 + 0.5, sleeper_width/4 - 2])\n            cylinder(h=2, r=1.5);\n        translate([x, sleeper_height/2 + 0.5, -sleeper_width/4 + 2])\n            cylinder(h=2, r=1.5);\n    }\n}\n\n// Base plate for stability\nmodule base_plate() {\n    translate([0, -base_thickness/2, 0])\n        cube([ways_width + 10, base_thickness, ways_length + 10], center=true);\n}\n\n// Assembly\nunion() {\n    // Base\n    base_plate();\n    \n    // Sleepers\n    for(z = [-ways_length/2 + sleeper_width/4 : sleeper_spacing : ways_length/2 - sleeper_width/4]) {\n        translate([0, sleeper_height/2 + base_thickness, z])\n            sleeper();\n    }\n    \n    // Left rail\n    translate([-ways_width/4, rail_height/2 + sleeper_height + base_thickness, 0])\n        rotate([90, 0, 0])\n            rail_profile();\n    \n    // Right rail\n    translate([ways_width/4, rail_height/2 + sleeper_height + base_thickness, 0])\n        rotate([90, 0, 0])\n            rail_profile();\n}",
    "renders": true
  },
  {
    "mechanical_component": "wayshaft",
    "openscad_code": "// Realistic wayshaft mechanical component - medium complexity\n// Main drive shaft with keyway, bearing journals and threaded ends\n\n// Parameters\nshaft_dia = 12;          // Main shaft diameter\nshaft_length = 100;      // Total shaft length\nbearing_dia = 16;        // Bearing journal diameter\nbearing_length = 15;     // Bearing journal length\nkeyway_width = 4;        // Keyway width\nkeyway_depth = 2;        // Keyway depth\nthread_dia = 10;         // Threaded end diameter\nthread_length = 15;      // Threaded section length\nchamfer = 1;             // Edge chamfer\nwall = 2;                // Minimum wall thickness\n\n// Main shaft body module\nmodule shaft_body() {\n    difference() {\n        // Main cylinder\n        cylinder(h=shaft_length, d=shaft_dia, $fn=50);\n        \n        // Keyway along shaft\n        translate([0, -shaft_dia/2, shaft_length/2 - keyway_width/2])\n            rotate([0, 90, 0])\n            cube([shaft_length - 2*thread_length, keyway_width, keyway_depth]);\n    }\n}\n\n// Bearing journal module\nmodule bearing_journal(pos) {\n    translate([0, 0, pos]) {\n        // Main journal\n        cylinder(h=bearing_length, d=bearing_dia, $fn=50);\n        \n        // Chamfer edges\n        translate([0, 0, -0.1])\n            cylinder(h=chamfer+0.2, d1=bearing_dia, d2=shaft_dia, $fn=50);\n        translate([0, 0, bearing_length-chamfer])\n            cylinder(h=chamfer+0.2, d1=shaft_dia, d2=bearing_dia, $fn=50);\n    }\n}\n\n// Threaded end module\nmodule threaded_end(pos) {\n    translate([0, 0, pos]) {\n        // Threaded section\n        cylinder(h=thread_length, d=thread_dia, $fn=50);\n        \n        // Thread relief groove\n        translate([0, 0, -1])\n            cylinder(h=2, d=thread_dia-1, $fn=50);\n        \n        // End chamfer\n        translate([0, 0, thread_length-chamfer])\n            cylinder(h=chamfer+0.2, d1=thread_dia, d2=thread_dia-2, $fn=50);\n    }\n}\n\n// Set screw hole module\nmodule set_screw_hole(pos) {\n    translate([0, 0, pos])\n        rotate([90, 0, 0])\n        cylinder(h=shaft_dia+2, d=3, $fn=20);\n}\n\n// Main assembly\nunion() {\n    // Central shaft\n    shaft_body();\n    \n    // Left bearing journal\n    bearing_journal(thread_length);\n    \n    // Right bearing journal\n    bearing_journal(shaft_length - thread_length - bearing_length);\n    \n    // Left threaded end\n    threaded_end(0);\n    \n    // Right threaded end\n    threaded_end(shaft_length - thread_length);\n    \n    // Set screw holes for bearings\n    set_screw_hole(thread_length + bearing_length/2);\n    set_screw_hole(shaft_length - thread_length - bearing_length/2);\n}\n\n// Center the model\ntranslate([0, 0, -shaft_length/2]) {\n    %union();\n}",
    "renders": true
  },
  {
    "mechanical_component": "wayslide",
    "openscad_code": "// Wayslide mechanical component - realistic style, medium complexity\n// Overall dimensions: 80x40x30mm\n\n$fn = 32;\n\n// Main base plate\nmodule base_plate() {\n    difference() {\n        // Main plate\n        cube([80, 40, 3], center=true);\n        \n        // Mounting holes\n        for(x = [-30, 30]) {\n            for(y = [-15, 15]) {\n                translate([x, y, 1.5])\n                    cylinder(h=4, r=2);\n            }\n        }\n    }\n}\n\n// Linear rail structure\nmodule rail() {\n    // Bottom rail base\n    translate([0, -15, 0])\n    difference() {\n        cube([70, 8, 8], center=true);\n        // Weight reduction slots\n        for(x = [-25, -15, -5, 5, 15, 25]) {\n            translate([x, 0, 3])\n                cube([6, 6, 3], center=true);\n        }\n    }\n    \n    // Top rail guide\n    translate([0, -15, 8])\n    cube([70, 6, 4], center=true);\n    \n    // Rail lip\n    translate([0, -19, 6])\n    cube([70, 2, 4], center=true);\n}\n\n// Carriage block\nmodule carriage() {\n    // Main body\n    difference() {\n        translate([0, 5, 6])\n            cube([20, 12, 12], center=true);\n        \n        // Center bore\n        translate([0, 5, 6])\n            cylinder(h=15, r=4, center=true);\n    }\n    \n    // Guide slots\n    translate([0, -6, 6])\n    cube([16, 2, 8], center=true);\n    \n    // Mounting lugs\n    for(x = [-7, 7]) {\n        translate([x, 11, 6])\n        cube([4, 4, 12], center=true);\n        \n        // Mounting holes\n        translate([x, 11, 12])\n        cylinder(h=5, r=1.5);\n    }\n}\n\n// End stops\nmodule end_stop(pos_x) {\n    translate([pos_x, -15, 0])\n    union() {\n        // Stop block\n        cube([4, 8, 12], center=true);\n        \n        // Adjustment screw boss\n        translate([0, 0, 8])\n            cylinder(h=6, r=3);\n            \n        // Screw hole\n        translate([0, 0, 11])\n            cylinder(h=8, r=1.5);\n    }\n}\n\n// Lubrication ports\nmodule lube_ports() {\n    translate([0, 5, 14])\n    for(x = [-6, 0, 6]) {\n        translate([x, 0, 0])\n        union() {\n            cylinder(h=4, r=2);\n            cylinder(h=2, r=1.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base components\n    base_plate();\n    rail();\n    \n    // Moving parts\n    carriage();\n    \n    // Hardware\n    end_stop(35);\n    end_stop(-35);\n    lube_ports();\n}",
    "renders": true
  },
  {
    "mechanical_component": "waybearing",
    "openscad_code": "// Waybearing (linear rail bearing block) – OpenSCAD 3-D printable model\n// Overall size ≈ 100 mm long, 40 mm wide, 42 mm high\n// 2 mm wall thickness respected for 3-D printing\n\n$fa = 2;\n$fs = 0.5;\n\nmodule rail_block() {\n    // Main block body\n    difference() {\n        // Solid block\n        cube([100, 40, 30], center = true);\n        \n        // Central V-groove for rail (oversized for clearance)\n        translate([0, 0, -15])\n            rotate([0, 90, 0])\n                cylinder(h = 100, r1 = 12, r2 = 12, center = true);\n    }\n}\n\nmodule ball_circuits() {\n    // Four ball return tubes\n    for (x = [-45, 45])\n        for (y = [-15, 15]) {\n            translate([x, y, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 40, r = 3, center = true);\n        }\n}\n\nmodule end_plates() {\n    // Front and back end caps with bolt holes\n    for (z = [-50, 50]) {\n        translate([z, 0, 0])\n            difference() {\n                // End plate\n                cube([2, 40, 42], center = true);\n                \n                // Grease fittings\n                translate([0, 0, 15])\n                    cylinder(h = 10, r = 2, center = true);\n                \n                // Mounting bolt holes\n                for (y = [-12, 12])\n                    translate([0, y, -10])\n                        rotate([90, 0, 0])\n                            cylinder(h = 5, r = 2.2, center = true);\n            }\n    }\n}\n\nmodule mounting_bases() {\n    // Lower mounting pads\n    for (x = [-35, 0, 35])\n        translate([x, 0, -20])\n            cube([20, 30, 4], center = true);\n}\n\nmodule seal_lips() {\n    // Wiper seals on ends\n    for (z = [-50, 50]) {\n        translate([z, 0, -5])\n            cube([2, 36, 2], center = true);\n    }\n}\n\nunion() {\n    rail_block();\n    ball_circuits();\n    end_plates();\n    mounting_bases();\n    seal_lips();\n}",
    "renders": true
  },
  {
    "mechanical_component": "waybushing",
    "openscad_code": "// Waybushing mechanical component - realistic style, medium complexity\n// Overall dimensions: 80mm diameter, 40mm height\n\n$fn = 50;\n\n// Main parameters\nouter_diameter = 80;\ninner_diameter = 50;\nheight = 40;\nbase_thickness = 5;\nflange_thickness = 8;\nflange_diameter = 100;\nmounting_hole_diameter = 8;\nmounting_hole_count = 4;\nmounting_hole_radius = 35;\nlubrication_hole_diameter = 6;\nlubrication_hole_depth = 10;\nkeyway_width = 8;\nkeyway_depth = 4;\n\nmodule waybushing() {\n    // Main cylindrical body\n    difference() {\n        cylinder(h=height, d=outer_diameter, center=true);\n        cylinder(h=height+2, d=inner_diameter, center=true);\n    }\n    \n    // Mounting flange\n    difference() {\n        translate([0, 0, -height/2 + base_thickness/2])\n            cylinder(h=flange_thickness, d=flange_diameter, center=true);\n        \n        // Mounting holes\n        for(i=[0:mounting_hole_count-1]) {\n            rotate([0, 0, i*360/mounting_hole_count])\n                translate([mounting_hole_radius, 0, -height/2 - 1])\n                    cylinder(h=flange_thickness+2, d=mounting_hole_diameter);\n        }\n    }\n    \n    // Keyway on inner bore\n    translate([0, 0, -height/2])\n        cube([keyway_width, keyway_depth, height], center=false);\n    \n    // Lubrication groove on inner surface\n    rotate([0, 90, 0])\n        translate([0, 0, -height/2 + height/4])\n            difference() {\n                cylinder(h=height/2, d=inner_diameter+1, center=true);\n                cylinder(h=height/2+2, d=inner_diameter-1, center=true);\n            }\n    \n    // Lubrication hole\n    rotate([0, 90, 0])\n        translate([0, 0, -height/2 + height/4])\n            rotate([0, 0, 90])\n                translate([outer_diameter/2 - lubrication_hole_depth/2, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=lubrication_hole_depth, d=lubrication_hole_diameter);\n    \n    // Chamfers on edges\n    translate([0, 0, height/2 - 1])\n        cylinder(h=2, d1=outer_diameter, d2=outer_diameter-4, center=true);\n    \n    translate([0, 0, -height/2 + 1])\n        cylinder(h=2, d1=outer_diameter-4, d2=outer_diameter, center=true);\n    \n    // Reinforcement ribs\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([outer_diameter/2 - 5, 0, 0])\n                cube([10, 5, height-2], center=true);\n    }\n}\n\n// Render the waybushing\nwaybushing();",
    "renders": true
  },
  {
    "mechanical_component": "wayspring",
    "openscad_code": "// Wayspring - Modern outdoor lounge chair\n// Overall dimensions: 1200mm long x 650mm wide x 750mm high\n\n$fn = 50;\n\n// Main module\nmodule wayspring() {\n    \n    // Parameters\n    seat_height = 400;\n    backrest_height = 750;\n    width = 650;\n    length = 1200;\n    leg_thickness = 40;\n    frame_thickness = 30;\n    \n    // Main frame assembly\n    union() {\n        \n        // Left frame\n        translate([-width/2 + frame_thickness/2, 0, 0])\n            frame_side(seat_height, backrest_height, frame_thickness);\n        \n        // Right frame\n        translate([width/2 - frame_thickness/2, 0, 0])\n            mirror([1, 0, 0])\n                frame_side(seat_height, backrest_height, frame_thickness);\n        \n        // Front support bar\n        translate([0, length/2 - frame_thickness/2, seat_height/2])\n            rotate([90, 0, 0])\n                cylinder(h = width - frame_thickness, r = frame_thickness/2);\n        \n        // Rear support bar\n        translate([0, -length/2 + frame_thickness/2, seat_height/2 + 50])\n            rotate([90, 0, 0])\n                cylinder(h = width - frame_thickness, r = frame_thickness/2);\n        \n        // Seat slats\n        for(y = [-length/2 + 60 : 35 : length/2 - 60]) {\n            translate([0, y, seat_height - 15])\n                cube([width - 60, 25, 30], center = true);\n        }\n        \n        // Backrest slats\n        for(z = [seat_height + 50 : 35 : backrest_height - 50]) {\n            y_pos = -length/2 + 60 + (z - seat_height - 50) * 0.3;\n            translate([0, y_pos, z])\n                cube([width - 80, 25, 20], center = true);\n        }\n        \n        // Armrests\n        translate([-width/2 + frame_thickness/2, length/2 - 100, seat_height + 150])\n            cube([frame_thickness, 200, 20], center = true);\n        translate([width/2 - frame_thickness/2, length/2 - 100, seat_height + 150])\n            cube([frame_thickness, 200, 20], center = true);\n        \n        // Support legs\n        leg_positions = [\n            [-width/2 + 100, length/2 - 100, 0],\n            [width/2 - 100, length/2 - 100, 0],\n            [-width/2 + 100, -length/2 + 100, 0],\n            [width/2 - 100, -length/2 + 100, 0]\n        ];\n        \n        for(pos = leg_positions) {\n            translate(pos)\n                cylinder(h = seat_height - leg_thickness, r = leg_thickness/2);\n        }\n    }\n}\n\n// Side frame module\nmodule frame_side(seat_h, back_h, thickness) {\n    difference() {\n        union() {\n            // Main curved support\n            translate([0, 0, seat_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h = thickness, r = seat_h/2);\n            \n            // Backrest vertical\n            translate([0, -back_h/2 + seat_h/2 + 50, back_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h = thickness, r = back_h/2);\n            \n            // Connecting arc\n            translate([0, -back_h/2 + 100, seat_h])\n                rotate([0, 0, 90])\n                    rotate([0, 90, 0])\n                        cylinder(h = thickness, r = 100);\n        }\n        \n        // Remove center for hollow frame\n        difference() {\n            translate([0, 0, seat_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h = thickness + 1, r = seat_h/2 - 15);\n            \n            translate([0, -back_h/2 + seat_h/2 + 50, back_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h = thickness + 1, r = back_h/2 - 15);\n            \n            translate([0, -back_h/2 + 100, seat_h])\n                rotate([0, 0, 90])\n                    rotate([0, 90, 0])\n                        cylinder(h = thickness + 1, r = 85);\n        }\n    }\n}\n\n// Scale for 3D printing (1:10 scale)\nscale([0.1, 0.1, 0.1])\n    wayspring();",
    "renders": true
  },
  {
    "mechanical_component": "wayspacer",
    "openscad_code": "// Wayspacer - a bench-style seating element with integrated side tables\n// Overall dimensions: 400mm long x 300mm deep x 450mm high\n\n// Main seat module\nmodule seat_plank() {\n    // Main seating surface with rounded edges\n    difference() {\n        // Main plank\n        translate([0, 0, 10]) cube([400, 300, 40], center=true);\n        \n        // Rounded top edges\n        for(x = [-190, 190]) {\n            translate([x, 0, 30]) cylinder(h=40, r=5, center=true);\n        }\n    }\n}\n\n// Structural leg frame\nmodule leg_frame() {\n    // Front legs\n    for(y = [-120, 120]) {\n        for(x = [-180, 180]) {\n            translate([x, y, -200]) \n                cylinder(h=200, r=8);\n            \n            // Cross bracing\n            if(y == -120) {\n                translate([x, y-10, -100])\n                    rotate([90, 0, 0])\n                    cylinder(h=240, r=5);\n            }\n        }\n    }\n    \n    // Rear support beam\n    translate([0, 140, -180])\n        rotate([90, 0, 0])\n        cube([380, 20, 15], center=true);\n}\n\n// Side table extensions\nmodule side_table() {\n    // Left side table\n    union() {\n        // Table surface\n        translate([-220, 0, 220]) \n            cube([160, 200, 15], center=true);\n        \n        // Support structure\n        translate([-220, 0, 110]) \n            cylinder(h=220, r=6);\n        \n        // Bracing\n        translate([-220, 0, 220])\n            rotate([90, 0, 0])\n            cylinder(h=200, r=5);\n    }\n    \n    // Right side table (mirrored)\n    mirror([1, 0, 0]) \n        side_table();\n}\n\n// Backrest with slats\nmodule backrest() {\n    // Frame posts\n    for(x = [-180, 180]) {\n        translate([x, 120, 300]) \n            cylinder(h=200, r=8);\n    }\n    \n    // Slats\n    for(z = [240, 270, 320, 350]) {\n        translate([0, 120, z])\n            cube([340, 15, 8], center=true);\n    }\n    \n    // Top rail\n    translate([0, 120, 400])\n        cube([380, 15, 20], center=true);\n}\n\n// Assembly\nunion() {\n    // Main seating elements\n    seat_plank();\n    leg_frame();\n    \n    // Side features\n    side_table();\n    \n    // Back support\n    backrest();\n    \n    // Reinforcement blocks\n    for(x = [-150, 0, 150]) {\n        translate([x, 0, 5])\n            cube([50, 280, 10], center=true);\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "waywasher",
    "openscad_code": "// Realistic Waywasher (medium complexity)\n// Dimensions: 120mm x 70mm x 85mm (LxWxH)\n\n// Main washer body\nmodule washer_body() {\n    difference() {\n        // Outer shell\n        hull() {\n            cube([120, 70, 60], center=true);\n            translate([0, 0, 25]) cube([110, 60, 50], center=true);\n        }\n        \n        // Inner cavity\n        translate([0, 0, 5]) cube([116, 66, 55], center=true);\n    }\n}\n\n// Top lid with hinge\nmodule lid() {\n    translate([0, 0, 30]) rotate([0, 0, 0]) {\n        // Main lid\n        difference() {\n            translate([0, 0, 2.5]) cube([118, 68, 5], center=true);\n            translate([0, 0, 5]) cube([114, 64, 10], center=true);\n        }\n        \n        // Handle\n        translate([50, 0, 7]) {\n            difference() {\n                cube([15, 30, 8], center=true);\n                translate([0, 0, 2]) cube([11, 26, 12], center=true);\n            }\n        }\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    translate([0, 35.5, 15]) {\n        difference() {\n            cube([60, 5, 20], center=true);\n            translate([-20, -3, 5]) cube([8, 8, 8], center=true);\n            translate([-5, -3, 5]) cube([8, 8, 8], center=true);\n            translate([10, -3, 5]) cube([8, 8, 8], center=true);\n        }\n        \n        // Knobs\n        for(x = [-20, -5, 10]) {\n            translate([x, -5, 5]) cylinder(h=8, d=6, center=true);\n        }\n    }\n}\n\n// Front loading door\nmodule door() {\n    translate([0, -35.5, -5]) {\n        difference() {\n            // Door frame\n            cube([80, 5, 50], center=true);\n            \n            // Window opening\n            translate([0, -3, 0]) cylinder(h=10, d=40, center=true);\n        }\n        \n        // Window glass\n        translate([0, -2.5, 0]) cylinder(h=1, d=38, center=true);\n        \n        // Door handle\n        translate([30, 2.5, 0]) {\n            rotate([90, 0, 0]) cylinder(h=25, d=6, center=true);\n            translate([0, 12.5, 0]) sphere(d=8);\n        }\n    }\n}\n\n// Base with feet\nmodule base() {\n    // Base platform\n    translate([0, 0, -35]) cube([125, 75, 10], center=true);\n    \n    // Feet\n    for(x = [-45, 45])\n    for(y = [-25, 25]) {\n        translate([x, y, -42.5]) {\n            cylinder(h=15, d=12, center=true);\n            translate([0, 0, -7.5]) sphere(d=12);\n        }\n    }\n}\n\n// Back panel with connections\nmodule back_panel() {\n    translate([0, 0, 0]) {\n        // Water inlets\n        translate([40, 35, 15]) {\n            rotate([90, 0, 0]) cylinder(h=15, d=10, center=true);\n            translate([0, 7.5, 0]) sphere(d=10);\n        }\n        \n        translate([20, 35, 15]) {\n            rotate([90, 0, 0]) cylinder(h=15, d=10, center=true);\n            translate([0, 7.5, 0]) sphere(d=10);\n        }\n        \n        // Drain outlet\n        translate([-40, 35, -10]) {\n            rotate([90, 0, 0]) cylinder(h=20, d=15, center=true);\n            translate([0, 10, 0]) sphere(d=15);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    washer_body();\n    lid();\n    control_panel();\n    door();\n    base();\n    back_panel();\n}",
    "renders": true
  },
  {
    "mechanical_component": "wayseal",
    "openscad_code": "// Wayseal (window seal with cable pass-through) for 3D printing\n// Overall size: 120 x 40 x 40 mm\n\n// Parameters\nseal_length = 120;\nseal_width  = 40;\nseal_height = 40;\nwall_thick  = 2.0;\ncable_d     = 8;\ngasket_d    = 16;\ngasket_h    = 4;\nflange_d    = 30;\nflange_h    = 3;\n\nmodule main_body() {\n    // Central main tube\n    difference() {\n        cube([seal_length, seal_width, seal_height], center=true);\n        translate([0,0,0])\n            cube([seal_length-2*wall_thick, seal_width-2*wall_thick, seal_height], center=true);\n    }\n}\n\nmodule cable_holes() {\n    // Cable passage hole\n    rotate([90,0,0])\n        cylinder(h=seal_width+1, d=cable_d+2*wall_thick, center=true, $fn=32);\n    // Interior grommet cavity\n    rotate([90,0,0])\n        cylinder(h=seal_width+1, d=gasket_d, center=true, $fn=32);\n}\n\nmodule gaskets() {\n    // Left gasket ring\n    translate([-seal_length/2-0.1, 0, 0])\n        rotate([90,0,0])\n            difference() {\n                cylinder(h=gasket_h, d=flange_d, center=true, $fn=32);\n                cylinder(h=gasket_h+0.2, d=gasket_d, center=true, $fn=32);\n            }\n    // Right gasket ring\n    translate([seal_length/2+0.1, 0, 0])\n        rotate([90,0,0])\n            difference() {\n                cylinder(h=gasket_h, d=flange_d, center=true, $fn=32);\n                cylinder(h=gasket_h+0.2, d=gasket_d, center=true, $fn=32);\n            }\n}\n\nmodule ribs() {\n    // Structural ribs along length\n    for (x=[-seal_length/2+10:20:seal_length/2-10]) {\n        translate([x,0,0]) {\n            difference() {\n                cube([2, seal_width-2*wall_thick, seal_height-2*wall_thick], center=true);\n                translate([0,0,0])\n                    rotate([90,0,0])\n                        cylinder(h=2.2, d=cable_d+2*wall_thick, center=true, $fn=32);\n            }\n        }\n    }\n}\n\nmodule sealing_lips() {\n    // Flexible sealing lips top & bottom\n    difference() {\n        // Top lip\n        translate([0,0,seal_height/2-wall_thick/2])\n            cube([seal_length-4*wall_thick, seal_width-4*wall_thick, wall_thick], center=true);\n        // Gap\n        translate([0,0,seal_height/2-wall_thick/2])\n            cube([seal_length-8*wall_thick, seal_width-8*wall_thick, wall_thick+0.2], center=true);\n    }\n    difference() {\n        // Bottom lip\n        translate([0,0,-seal_height/2+wall_thick/2])\n            cube([seal_length-4*wall_thick, seal_width-4*wall_thick, wall_thick], center=true);\n        // Gap\n        translate([0,0,-seal_height/2+wall_thick/2])\n            cube([seal_length-8*wall_thick, seal_width-8*wall_thick, wall_thick+0.2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    ribs();\n    gaskets();\n    sealing_lips();\n    difference() {\n        cube([seal_length, seal_width, seal_height], center=true);\n        cable_holes();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "waycap",
    "openscad_code": "// Waycap mechanical component - realistic style, medium complexity\n// Overall dimensions: 80mm diameter, 35mm height\n\n$fn = 50;\n\n// Main parameters\ncap_diameter = 80;\ncap_height = 35;\nwall_thickness = 2;\n\n// Create the main cap body\nmodule cap_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = cap_height, d = cap_diameter);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n        cylinder(h = cap_height - wall_thickness, d = cap_diameter - 2 * wall_thickness);\n    }\n}\n\n// Create the spout opening\nmodule spout() {\n    translate([cap_diameter/2 - 10, 0, cap_height - 5])\n    rotate([0, 90, 0])\n    difference() {\n        // Main spout tube\n        cylinder(h = 15, d1 = 12, d2 = 8);\n        \n        // Hollow inside\n        cylinder(h = 15, d1 = 8, d2 = 4);\n    }\n}\n\n// Threading on inside\nmodule threads() {\n    for(i = [0:10]) {\n        translate([0, 0, wall_thickness + i * 2.5])\n        rotate([0, 0, i * 15])\n        difference() {\n            // Thread ring\n            cylinder(h = 1.5, d = cap_diameter - 2 * wall_thickness - 2);\n            // Cut to make threads\n            for(j = [0:5]) {\n                rotate([0, 0, j * 60])\n                translate([cap_diameter/2 - wall_thickness - 4, 0, -1])\n                cube([4, 1, 3]);\n            }\n        }\n    }\n}\n\n// Grip ridges on outside\nmodule grip_ridges() {\n    for(i = [0:23]) {\n        rotate([0, 0, i * 15])\n        translate([cap_diameter/2 - 1, -1.5, 5])\n        cube([2, 3, 25]);\n    }\n}\n\n// Top surface detail\nmodule top_detail() {\n    // Center dome\n    translate([0, 0, cap_height])\n    sphere(d = 10);\n    \n    // Concentric rings\n    for(i = [1:3]) {\n        color(\"gray\")\n        translate([0, 0, cap_height - 0.5])\n        difference() {\n            cylinder(h = 1, d = 10 + i * 15);\n            cylinder(h = 1.1, d = 8 + i * 15);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    cap_body();\n    spout();\n    threads();\n    grip_ridges();\n    top_detail();\n}",
    "renders": true
  },
  {
    "mechanical_component": "waycover",
    "openscad_code": "// Waycover mechanical component - telescoping protective cover for linear rails\n// Medium complexity realistic model with proper proportions\n\n// Overall dimensions (collapsed state)\ncover_length = 100;\ncover_width = 40;\ncover_height = 30;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Number of telescoping sections\nsections = 4;\n\n// Calculate section dimensions\nsection_length = cover_length / sections;\nsection_overlap = 5;\n\nmodule way_section(len, wid, hei, offset) {\n    // Main hollow section body\n    difference() {\n        // Outer shell\n        translate([offset, 0, 0])\n            cube([len, wid, hei], center=true);\n        \n        // Inner hollow space\n        translate([offset, 0, 0])\n            cube([len - wall*2, wid - wall*2, hei - wall], center=true);\n    }\n    \n    // Mounting flanges at ends\n    flange_width = wid + 6;\n    flange_height = hei + 2;\n    \n    // Front flange with mounting holes\n    translate([offset + len/2 - 1, 0, hei/2])\n        cube([2, flange_width, flange_height], center=true);\n    \n    // Rear flange with mounting holes\n    translate([offset - len/2 + 1, 0, hei/2])\n        cube([2, flange_width, flange_height], center=true);\n    \n    // Reinforcement ribs along sides\n    for(side = [-1, 1]) {\n        translate([offset, side * (wid/2 - wall), 0])\n            cube([len - 4, wall, hei - wall], center=true);\n    }\n}\n\nmodule telescoping_waycover() {\n    // Generate telescoping sections from largest to smallest\n    for(i = [0:sections-1]) {\n        scale_factor = 1 - (i * 0.15);\n        current_len = section_length * scale_factor;\n        current_wid = cover_width * scale_factor;\n        current_hei = cover_height * scale_factor;\n        \n        // Offset each section for nesting\n        offset = i * (section_length - section_overlap);\n        \n        way_section(current_len, current_wid, current_hei, offset);\n    }\n    \n    // End cap for smallest section\n    cap_scale = 1 - ((sections-1) * 0.15);\n    cap_w = cover_width * cap_scale;\n    cap_h = cover_height * cap_scale;\n    \n    translate([(sections-1) * (section_length - section_overlap) + section_length/2 - 1, 0, 0])\n        cube([2, cap_w, cap_h], center=true);\n    \n    // Wipers (flexible seals) at each section junction\n    for(i = [1:sections-1]) {\n        wiper_scale = 1 - ((i-1) * 0.15);\n        wiper_w = cover_width * wiper_scale;\n        wiper_h = cover_height * wiper_scale;\n        offset = i * (section_length - section_overlap) - section_overlap/2;\n        \n        translate([offset, 0, wiper_h/2 + 1])\n            cube([wall*2, wiper_w + 2, 1], center=true);\n    }\n    \n    // Mounting holes pattern\n    for(i = [0:sections-1]) {\n        hole_scale = 1 - (i * 0.15);\n        hole_w = cover_width * hole_scale;\n        hole_h = cover_height * hole_scale;\n        offset = i * (section_length - section_overlap);\n        \n        // Front holes\n        translate([offset + section_length/2 - 1, hole_w/2 + 3, 0])\n            cylinder(h=4, r=1.5, center=true, $fn=8);\n        translate([offset + section_length/2 - 1, -hole_w/2 - 3, 0])\n            cylinder(h=4, r=1.5, center=true, $fn=8);\n            \n        // Rear holes\n        translate([offset - section_length/2 + 1, hole_w/2 + 3, 0])\n            cylinder(h=4, r=1.5, center=true, $fn=8);\n        translate([offset - section_length/2 + 1, -hole_w/2 - 3, 0])\n            cylinder(h=4, r=1.5, center=true, $fn=8);\n    }\n}\n\n// Render the complete waycover\ntelescoping_waycover();",
    "renders": true
  },
  {
    "mechanical_component": "bellow",
    "openscad_code": "// Mechanical bellow - realistic style, medium complexity\n// 3D printable with 2mm wall thickness\n\n$fn = 50;\n\n// Main parameters\nbellow_length = 80;\nbellow_diameter = 40;\nconvolution_height = 8;\nconvolution_count = 5;\nflange_thickness = 4;\nflange_diameter = 50;\nmount_hole_diameter = 6;\n\n// Wall thickness\nwall_thickness = 2;\n\n// Module for single convolution\nmodule convolution(height, outer_diam, inner_diam) {\n    difference() {\n        // Outer wave\n        union() {\n            cylinder(h=height, d=outer_diam, center=true);\n            translate([0, 0, -height/2])\n                cylinder(h=wall_thickness, d=outer_diam+wall_thickness, center=false);\n            translate([0, 0, height/2])\n                cylinder(h=wall_thickness, d=outer_diam+wall_thickness, center=false);\n        }\n        \n        // Inner hole\n        cylinder(h=height+2, d=inner_diam, center=true);\n        \n        // Create bellows shape with wave cuts\n        for(i = [0:1]) {\n            rotate([0, 90*i, 0])\n                translate([0, 0, -height/2-wall_thickness])\n                    cube([outer_diam+4, wall_thickness*2, height+wall_thickness*2], center=true);\n        }\n    }\n}\n\n// Reinforcement rings between convolutions\nmodule reinforcement_ring(diam, thickness) {\n    difference() {\n        cylinder(h=thickness, d=diam+wall_thickness*2, center=true);\n        cylinder(h=thickness+1, d=diam, center=true);\n    }\n}\n\n// Mounting flange\nmodule mounting_flange() {\n    difference() {\n        // Main flange body\n        cylinder(h=flange_thickness, d=flange_diameter, center=false);\n        \n        // Mounting holes\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([(flange_diameter-mount_hole_diameter)/2, 0, -1])\n                    cylinder(h=flange_thickness+2, d=mount_hole_diameter, center=false);\n        }\n        \n        // Center hole\n        cylinder(h=flange_thickness+2, d=bellow_diameter-wall_thickness*2, center=false);\n    }\n}\n\n// Assembly\nunion() {\n    // Bottom flange\n    mounting_flange();\n    \n    // Convolutions\n    for(i = [0:convolution_count-1]) {\n        translate([0, 0, flange_thickness + i*convolution_height])\n            convolution(convolution_height, bellow_diameter, bellow_diameter-wall_thickness*2);\n        \n        // Reinforcement rings between convolutions\n        if(i < convolution_count-1) {\n            translate([0, 0, flange_thickness + (i+0.5)*convolution_height])\n                reinforcement_ring(bellow_diameter, wall_thickness);\n        }\n    }\n    \n    // Top flange\n    translate([0, 0, flange_thickness + convolution_count*convolution_height])\n        mounting_flange();\n}",
    "renders": true
  },
  {
    "mechanical_component": "gaiter",
    "openscad_code": "// Realistic Gaiter Mechanical Component - Medium Complexity\n// Boot gaiter with structural ribs and mounting features\n\n$fn = 50;\n\n// Main parameters\nheight = 80;\ntop_diameter = 45;\nbottom_diameter = 55;\nwall_thickness = 2;\nrib_height = 3;\nrib_spacing = 8;\n\n// Gaiter body module\nmodule gaiter_body() {\n    difference() {\n        // Outer shell - tapered cylinder\n        cylinder(h=height, d1=bottom_diameter, d2=top_diameter, center=false);\n        \n        // Inner hollow space\n        translate([0, 0, -0.5])\n        cylinder(h=height+1, d1=bottom_diameter-wall_thickness*2, d2=top_diameter-wall_thickness*2, center=false);\n        \n        // Bottom opening relief\n        translate([0, 0, -1])\n        cylinder(h=5, d=bottom_diameter-10, center=false);\n    }\n}\n\n// Structural ribs\nmodule ribs() {\n    for(i = [rib_spacing:rib_spacing:height-rib_spacing]) {\n        translate([0, 0, i])\n        difference() {\n            cylinder(h=rib_height, d=bottom_diameter + (top_diameter-bottom_diameter)*(i/height) + 2, center=false);\n            cylinder(h=rib_height+0.2, d=bottom_diameter + (top_diameter-bottom_diameter)*(i/height) - 2, center=false);\n        }\n    }\n}\n\n// Top mounting flange\nmodule top_flange() {\n    translate([0, 0, height])\n    difference() {\n        cylinder(h=4, d=top_diameter + 6, center=false);\n        cylinder(h=5, d=top_diameter, center=false);\n    }\n}\n\n// Bottom mounting ring\nmodule bottom_ring() {\n    difference() {\n        cylinder(h=6, d=bottom_diameter + 8, center=false);\n        cylinder(h=7, d=bottom_diameter, center=false);\n    }\n}\n\n// Reinforcement gussets\nmodule gussets() {\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n        translate([bottom_diameter/2 + 2, 0, 3])\n        rotate([90, 0, 0])\n        cube([4, 6, wall_thickness], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    gaiter_body();\n    ribs();\n    top_flange();\n    bottom_ring();\n    gussets();\n}",
    "renders": true
  },
  {
    "mechanical_component": "guard",
    "openscad_code": "// Guard Chair - Realistic Style, Medium Complexity\n// A protective guard chair with integrated shield backrest and weapon rest\n\n// Overall dimensions\nchair_width = 80;\nchair_depth = 70;\nchair_height = 100;\nseat_height = 45;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Leg module with reinforced joints\nmodule chair_leg(x_pos, y_pos, height) {\n    translate([x_pos, y_pos, 0]) {\n        // Main leg post\n        cylinder(h = height, r = 4, $fn = 16);\n        \n        // Base foot for stability\n        translate([0, 0, 0]) {\n            cylinder(h = 3, r = 6, $fn = 16);\n        }\n        \n        // Top joint reinforcement\n        translate([0, 0, height - 3]) {\n            cylinder(h = 3, r = 5, $fn = 16);\n        }\n    }\n}\n\n// Seat module with ventilation holes\nmodule seat() {\n    difference() {\n        // Main seat platform\n        translate([0, 0, seat_height - wall_thickness]) {\n            cube([chair_width - 20, chair_depth - 10, wall_thickness], center = true);\n        }\n        \n        // Ventilation slots\n        for (x = [-30:20:30]) {\n            translate([x, 0, seat_height - wall_thickness/2]) {\n                cube([4, chair_depth - 15, wall_thickness + 1], center = true);\n            }\n        }\n    }\n}\n\n// Backrest shield with emblem\nmodule backrest_shield() {\n    // Main shield shape\n    difference() {\n        translate([0, -chair_depth/2 + 5, seat_height + 25]) {\n            cube([chair_width - 10, wall_thickness, 50], center = true);\n        }\n        \n        // Curved top cut\n        translate([0, -chair_depth/2 + 5, seat_height + 50]) {\n            cylinder(h = wall_thickness + 2, r = 25, center = true, $fn = 32);\n        }\n    }\n    \n    // Shield emblem\n    translate([0, -chair_depth/2 + 3, seat_height + 35]) {\n        cube([15, wall_thickness + 1, 20], center = true);\n    }\n}\n\n// Armrest with weapon rest slot\nmodule armrest(x_pos) {\n    translate([x_pos, 0, seat_height + 15]) {\n        // Main armrest\n        cube([wall_thickness * 2, chair_depth - 30, 8], center = true);\n        \n        // Weapon rest slot\n        translate([0, -10, 4]) {\n            cube([wall_thickness * 2 + 1, 5, 2], center = true);\n        }\n    }\n}\n\n// Horizontal support bars\nmodule support_bar(z_pos) {\n    // Front bar\n    translate([0, chair_depth/2 - 15, z_pos]) {\n        cube([chair_width - 30, wall_thickness, wall_thickness], center = true);\n    }\n    \n    // Side bars\n    translate([chair_width/2 - 15, 0, z_pos]) {\n        rotate([0, 0, 90]) {\n            cube([chair_depth - 20, wall_thickness, wall_thickness], center = true);\n        }\n    }\n    translate([-chair_width/2 + 15, 0, z_pos]) {\n        rotate([0, 0, 90]) {\n            cube([chair_depth - 20, wall_thickness, wall_thickness], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Four legs\n    chair_leg(chair_width/2 - 10, chair_depth/2 - 10, seat_height);\n    chair_leg(-chair_width/2 + 10, chair_depth/2 - 10, seat_height);\n    chair_leg(chair_width/2 - 10, -chair_depth/2 + 10, seat_height);\n    chair_leg(-chair_width/2 + 10, -chair_depth/2 + 10, seat_height);\n    \n    // Seat\n    seat();\n    \n    // Backrest shield\n    backrest_shield();\n    \n    // Armrests\n    armrest(chair_width/2 - 5);\n    armrest(-chair_width/2 + 5);\n    \n    // Support bars at 1/3 and 2/3 height\n    support_bar(seat_height * 0.33);\n    support_bar(seat_height * 0.66);\n}",
    "renders": true
  },
  {
    "mechanical_component": "bumper",
    "openscad_code": "// Realistic Bumper Mechanical Component\n// Medium complexity 3D printable bumper with mounting features\n\nbumper_width = 120;\nbumper_height = 40;\nbumper_depth = 30;\nwall_thickness = 2;\n\nmodule bumper_main_body() {\n    difference() {\n        // Main bumper body\n        hull() {\n            translate([-bumper_width/2, 0, 0])\n                cube([bumper_width, bumper_depth, bumper_height], center=true);\n            translate([-bumper_width/2 + 5, 0, bumper_height/2 - 5])\n                cube([bumper_width - 10, bumper_depth - 4, 10], center=true);\n        }\n        \n        // Hollow out center\n        translate([0, 0, wall_thickness/2])\n            cube([bumper_width - 2*wall_thickness, bumper_depth - 2*wall_thickness, bumper_height - wall_thickness], center=true);\n    }\n}\n\nmodule bumper_mounting_tabs() {\n    tab_width = 20;\n    tab_height = 15;\n    tab_thickness = 3;\n    \n    for(side = [-1, 1]) {\n        translate([side * (bumper_width/2 - tab_width/2), 0, -bumper_height/2 + tab_height/2]) {\n            // Mounting tab\n            cube([tab_width, tab_thickness, tab_height], center=true);\n            \n            // Mounting hole\n            translate([0, tab_thickness/2 + 1, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=tab_thickness + 2, r=3, center=true, $fn=20);\n        }\n    }\n}\n\nmodule bumper_stiffening_ribs() {\n    rib_width = 2;\n    rib_height = 8;\n    num_ribs = 5;\n    \n    for(i = [0:num_ribs-1]) {\n        x_pos = -bumper_width/2 + 10 + i * ((bumper_width - 20)/(num_ribs - 1));\n        translate([x_pos, 0, 0])\n            cube([rib_width, bumper_depth - 4, rib_height], center=true);\n    }\n}\n\nmodule bumper_impact_surface() {\n    // Impact absorbing ribs on front\n    rib_count = 6;\n    \n    difference() {\n        // Front impact pad\n        translate([0, bumper_depth/2 - 2, 0])\n            cube([bumper_width - 10, 4, bumper_height - 10], center=true);\n            \n        // Grooves for flexibility\n        for(i = [1:rib_count-1]) {\n            x_pos = -bumper_width/2 + 5 + i * ((bumper_width - 10)/rib_count);\n            translate([x_pos, bumper_depth/2 - 2, 0])\n                cube([1.5, 5, bumper_height - 8], center=true);\n        }\n    }\n}\n\nmodule bumper_reinforcement() {\n    // Internal reinforcement ring\n    translate([0, 0, -bumper_height/2 + 5])\n        difference() {\n            cylinder(h=wall_thickness, r=bumper_depth/2 - 2, center=true, $fn=40);\n            cylinder(h=wall_thickness + 1, r=bumper_depth/2 - 6, center=true, $fn=40);\n        }\n}\n\n// Assembly\nunion() {\n    bumper_main_body();\n    bumper_mounting_tabs();\n    bumper_stiffening_ribs();\n    bumper_impact_surface();\n    bumper_reinforcement();\n}",
    "renders": true
  },
  {
    "mechanical_component": "stop",
    "openscad_code": "// OpenSCAD Stop Block – mechanical stop for a sliding table or fence\n// Overall footprint: 100 mm × 60 mm × 80 mm\n// Wall thickness kept at 2 mm everywhere for reliable 3D printing\n\n$fn = 50;          // smooth curves\n\n// ---------- parameters ----------\nbase_l      = 100;   // length along rail\nbase_w      = 60;    // depth\nbase_h      = 10;    // thickness of bottom plate\nbody_h      = 70;    // total height above plate\nslot_w      = 8;     // T-slot width\nslot_h      = 6;     // T-slot height under base\nslot_l      = 80;    // T-slot length\nboss_d      = 20;    // knob boss diameter\nboss_h      = 15;    // knob boss height\nknob_d      = 28;    // hand-knob diameter\nknob_h      = 18;    // hand-knob height\nbolt_d      = 6;     // M6 threaded bolt\nwall        = 2;     // wall thickness\n\n// ---------- main assembly ----------\nmodule stop_block() {\n    union() {\n        // Base plate with T-slot underneath\n        difference() {\n            base_plate();\n            T_slot();\n        }\n\n        // Up-standing body\n        translate([0, 0, base_h])\n            body();\n\n        // Knob on threaded boss\n        translate([base_l/2 - 10, base_w/2 - 10, base_h + body_h])\n            knob_assembly();\n    }\n}\n\n// ---------- parts ----------\nmodule base_plate() {\n    // simple solid base\n    cube([base_l, base_w, base_h], center=false);\n}\n\nmodule T_slot() {\n    // central T-slot pocket for 30-series extrusion\n    translate([(base_l - slot_l)/2, (base_w - slot_w)/2, 0])\n        cube([slot_l, slot_w, slot_h], center=false);\n}\n\nmodule body() {\n    // outer shell\n    difference() {\n        // main block\n        translate([0, 0, 0])\n            cube([base_l, base_w, body_h], center=false);\n\n        // lightening cuts – remove big inner volume\n        translate([wall, wall, wall])\n            cube([base_l - 2*wall, base_w - 2*wall, body_h - wall], center=false);\n\n        // vertical access hole for bolt\n        translate([base_l/2, base_w/2, -1])\n            cylinder(h = body_h + 2, d = bolt_d + 2*wall, center=false);\n    }\n}\n\nmodule knob_assembly() {\n    // threaded boss\n    cylinder(h = boss_h, d = boss_d, center=false);\n\n    // hand-knob on top\n    translate([0, 0, boss_h])\n        difference() {\n            // knurled knob body\n            cylinder(h = knob_h, d = knob_d, center=false);\n\n            // central hole for M6 bolt\n            translate([0, 0, -1])\n                cylinder(h = knob_h + 2, d = bolt_d + 1, center=false);\n        }\n\n    // add 4 knurls around knob for grip\n    for(a = [0:90:270])\n        rotate([0, 0, a])\n            translate([knob_d/2 - 2, -2, boss_h])\n                cube([4, 4, knob_h], center=false);\n}\n\n// ---------- render ----------\nstop_block();",
    "renders": true
  },
  {
    "mechanical_component": "buffer",
    "openscad_code": "// Realistic 3D-printable buffer (shock absorber / bumper) with medium complexity\n// Size: 100 mm total length, 35 mm outer diameter, 2 mm wall thickness\n\n$fn=48;            // Smooth curves for realistic look\nwall = 2;          // 3D-print friendly wall thickness\nbody_len = 80;     // Main cylinder length\nbody_dia = 35;     // Outer body diameter\nrod_dia = 12;      // Piston rod diameter\nrod_len = 40;      // Exposed rod length\nbase_dia = 50;     // Mounting base diameter\nbase_h = 8;        // Mounting base thickness\nspring_dia = 30;   // Protective spring coil diameter\nspring_coils = 12; // Number of visible spring coils\nspring_wire = 3;   // Wire thickness for spring\ncap_h = 10;        // Top cap height\nflange_holes = 4;  // Number of mounting holes on flange\n\n// Helper: flanged mounting plate\nmodule flange(d, h, holes) {\n    // Main disc\n    cylinder(d=d, h=h, center=false);\n    \n    // Counter-bored holes around flange\n    for(i=[0:holes-1]) {\n        rotate([0,0,i*360/holes])\n        translate([d/2-7, 0, -1])\n            // Counter-bore (6 mm screw head)\n            cylinder(d=11, h=h+2, center=false);\n        rotate([0,0,i*360/holes])\n        translate([d/2-7, 0, -1])\n            // Through hole (3 mm screw shaft)\n            cylinder(d=3.5, h=h+2, center=false);\n    }\n}\n\n// Helper: coil spring segments\nmodule coil_spring(outer_d, coils, wire_d, length) {\n    pitch = length / coils;\n    for(i=[0:coils-1]) {\n        translate([0,0,i*pitch])\n            rotate([90,0,0])\n            // Each coil is a torus segment\n            rotate_extrude(angle=360, $fn=20)\n                translate([outer_d/2 - wire_d/2, 0, 0])\n                    circle(d=wire_d);\n    }\n}\n\n// Main body cylinder\nmodule body() {\n    difference() {\n        // Outer shell\n        cylinder(d=body_dia, h=body_len, center=false);\n        // Inner bore\n        cylinder(d=body_dia-2*wall, h=body_len+1, center=false);\n    }\n    \n    // Reinforcing ribs on body\n    for(i=[0:3]) {\n        rotate([0,0,i*90])\n        translate([body_dia/2-wall/2, -wall*1.5, 0])\n            cube([wall*3, wall*3, body_len]);\n    }\n}\n\n// Piston rod\nmodule piston_rod() {\n    // Rod shaft\n    translate([0,0,body_len])\n        cylinder(d=rod_dia, h=rod_len, center=false);\n    \n    // Rod end eyelet\n    translate([0,0,body_len+rod_len])\n    rotate([90,0,0])\n        difference() {\n            cylinder(d=rod_dia+4, h=8, center=true);\n            rotate([90,0,0])\n                cylinder(d=6, h=rod_dia+8, center=true);\n        }\n}\n\n// Top cap with seal lip\nmodule top_cap() {\n    difference() {\n        // Cap disc\n        cylinder(d=body_dia, h=cap_h, center=false);\n        // Center hole for rod\n        cylinder(d=rod_dia+1, h=cap_h+1, center=false);\n    }\n    // Seal lip\n    translate([0,0,cap_h/2])\n        cylinder(d1=body_dia, d2=body_dia+6, h=3, center=true);\n}\n\n// Assembly\ntranslate([0,0,base_h])\n    body();\n\ntranslate([0,0,0])\n    flange(base_dia, base_h, flange_holes);\n\ntranslate([0,0,body_len+cap_h/2])\n    top_cap();\n\ntranslate([0,0,0])\n    piston_rod();\n\n// Protective coil spring around rod\ntranslate([0,0,body_len/2])\n    coil_spring(spring_dia, spring_coils, spring_wire, body_len/2);",
    "renders": true
  },
  {
    "mechanical_component": "shock",
    "openscad_code": "// Shock Absorber - Realistic Style, Medium Complexity\n// Designed for 3D printing with 2mm wall thickness and no overhangs\n\n$fn = 50;\n\n// Main dimensions\nshaft_dia = 8;\nshaft_length = 60;\nbody_dia = 25;\nbody_length = 80;\neye_dia = 10;\neye_thickness = 6;\nspring_dia = 20;\nspring_coils = 12;\nspring_wire = 2;\n\n// Top eye mount\nmodule top_eye() {\n    translate([0, 0, shaft_length/2 + eye_dia/2]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=eye_thickness, d=eye_dia, center=true);\n                cylinder(h=eye_thickness+2, d=eye_dia/2, center=true);\n            }\n        }\n    }\n}\n\n// Bottom eye mount\nmodule bottom_eye() {\n    translate([0, 0, -body_length/2 - eye_dia/2]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=eye_thickness, d=eye_dia, center=true);\n                cylinder(h=eye_thickness+2, d=eye_dia/2, center=true);\n            }\n        }\n    }\n}\n\n// Shaft\nmodule shaft() {\n    color(\"silver\") {\n        cylinder(h=shaft_length, d=shaft_dia, center=true);\n    }\n}\n\n// Main body cylinder\nmodule body() {\n    color(\"darkgray\") {\n        difference() {\n            cylinder(h=body_length, d=body_dia, center=true);\n            // Internal bore\n            cylinder(h=body_length+2, d=shaft_dia+2, center=true);\n            \n            // Thread detail (grooves)\n            for(i = [-1:1]) {\n                translate([0, 0, i*25]) {\n                    cylinder(h=2, d=body_dia-2, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Dust boot\nmodule dust_boot() {\n    color(\"black\") {\n        translate([0, 0, shaft_length/2 - 10]) {\n            cylinder(h=20, d=body_dia-4, center=true);\n        }\n    }\n}\n\n// Spring coils\nmodule spring() {\n    color(\"gold\") {\n        for(i = [0:spring_coils-1]) {\n            translate([0, 0, -body_length/2 + 5 + i*(spring_coils/10)]) {\n                rotate_extrude() {\n                    translate([spring_dia/2, 0, 0]) {\n                        circle(spring_wire);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Mounting brackets\nmodule brackets() {\n    color(\"gray\") {\n        // Top bracket\n        translate([body_dia/2 + 2, 0, body_length/2 - 10]) {\n            cube([4, 6, 15], center=true);\n        }\n        translate([-body_dia/2 - 2, 0, body_length/2 - 10]) {\n            cube([4, 6, 15], center=true);\n        }\n        \n        // Bottom bracket\n        translate([body_dia/2 + 2, 0, -body_length/2 + 10]) {\n            cube([4, 6, 15], center=true);\n        }\n        translate([-body_dia/2 - 2, 0, -body_length/2 + 10]) {\n            cube([4, 6, 15], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    shaft();\n    translate([0, 0, -body_length/2 - shaft_length/2]) body();\n    top_eye();\n    bottom_eye();\n    dust_boot();\n    \n    // Spring around the shaft\n    spring();\n    \n    // Support brackets\n    brackets();\n}",
    "renders": true
  },
  {
    "mechanical_component": "absorber",
    "openscad_code": "// Shock-absorber strut (automotive style)\n// Overall height ≈ 110 mm, printable as a single piece with minimal overhangs\n// 2 mm wall thickness maintained on all load-bearing parts\n\n$fn = 36;\n\nmodule upper_mount() {\n    difference() {\n        // Main mounting plate\n        translate([0,0,2]) cube([40,30,4], center=true);\n        // Two bolt holes Ø6 mm\n        for (x = [-15, 15]) translate([x,0,0]) cylinder(h=6, d=6.2, center=true);\n        // Central clearance\n        translate([0,0,0]) cylinder(h=6, d=8, center=true);\n    }\n}\n\nmodule piston_rod() {\n    // Chrome-plated rod\n    color(\"silver\") cylinder(h=55, d=6);\n}\n\nmodule dust_shield() {\n    // Corrugated bellows style (printed as stacked cylinders to avoid overhang)\n    union() {\n        for (i = [0:4]) {\n            translate([0,0,i*5]) cylinder(h=4, d1=16-i*1.2, d2=16-i*1.4);\n        }\n    }\n}\n\nmodule upper_bushing() {\n    difference() {\n        cylinder(h=10, d=20);\n        cylinder(h=12, d=8);\n    }\n}\n\nmodule coil_spring() {\n    // Spring as stacked toroids (printable without supports)\n    for (i = [0:7]) {\n        translate([0,0,20+i*10]) rotate([0,0,i*45]) \n            rotate_extrude() translate([8,0,0]) circle(d=4);\n    }\n}\n\nmodule lower_bushing() {\n    difference() {\n        cylinder(h=12, d=22);\n        cylinder(h=14, d=10);\n    }\n}\n\nmodule shock_body() {\n    color(\"gray\") {\n        difference() {\n            // Main cylinder wall (2 mm thick)\n            cylinder(h=50, d=30);\n            cylinder(h=52, d=26);\n        }\n        // Bottom eyelet\n        rotate([90,0,0]) difference() {\n            cylinder(h=20, d=20, center=true);\n            cylinder(h=22, d=8, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    translate([0,0,100]) upper_mount();\n    translate([0,0,90]) piston_rod();\n    translate([0,0,80]) dust_shield();\n    translate([0,0,65]) upper_bushing();\n    coil_spring();\n    translate([0,0,25]) lower_bushing();\n    translate([0,0,0]) shock_body();\n}",
    "renders": true
  },
  {
    "mechanical_component": "support",
    "openscad_code": "// Adjustable height monitor stand with cable management\n// Dimensions: 150mm wide x 120mm deep x 80-120mm height adjustable\n\n// Main parameters\nbase_width = 150;\nbase_depth = 120;\nmin_height = 80;\nmax_height = 120;\nwall_thickness = 2;\n\n// Base plate with rubber feet\nmodule base_plate() {\n    difference() {\n        // Main base\n        cube([base_width, base_depth, 5], center=true);\n        \n        // Cable routing slot\n        translate([0, -50, 0])\n            cube([20, 40, 6], center=true);\n        \n        // Screw holes for rubber feet\n        for(x = [-60, 60])\n            for(y = [-45, 45])\n                translate([x, y, 2.5])\n                    cylinder(h=3, r=3, center=true);\n    }\n}\n\n// Height adjustment mechanism - telescoping columns\nmodule height_column() {\n    // Outer column (fixed to base)\n    difference() {\n        translate([0, 0, min_height/2])\n            cube([40, 40, min_height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, min_height/2 + 5])\n            cube([36, 36, min_height - 10], center=true);\n    }\n    \n    // Inner column (adjustable)\n    difference() {\n        translate([0, 0, min_height + (max_height-min_height)/2])\n            cube([34, 34, max_height-min_height], center=true);\n        \n        // Weight reduction\n        translate([0, 0, min_height + (max_height-min_height)/2])\n            cube([30, 30, max_height-min_height], center=true);\n    }\n    \n    // Height adjustment holes\n    for(i = [0:4]) {\n        translate([20, 0, min_height + i*10])\n            rotate([0, 90, 0])\n                cylinder(h=40, r=2, center=true);\n    }\n}\n\n// Support arms for monitor platform\nmodule support_arms() {\n    // Left arm\n    translate([-45, 0, max_height + 5])\n        cube([15, 10, 10], center=true);\n    \n    // Right arm\n    translate([45, 0, max_height + 5])\n        cube([15, 10, 10], center=true);\n}\n\n// Monitor platform with ventilation\nmodule monitor_platform() {\n    difference() {\n        // Main platform\n        translate([0, 0, max_height + 10])\n            cube([base_width - 20, base_depth - 20, 5], center=true);\n        \n        // Ventilation slots\n        for(x = [-55:10:55])\n            translate([x, 0, max_height + 12.5])\n                cube([5, 70, 2], center=true);\n        \n        // Cable pass-through hole\n        translate([0, 20, max_height + 12.5])\n            cylinder(h=3, r=15, center=true);\n    }\n}\n\n// Reinforcement gussets\nmodule gussets() {\n    for(angle = [0, 90, 180, 270]) {\n        rotate([0, 0, angle])\n        translate([20, 20, min_height/2])\n            cube([wall_thickness*2, 15, min_height], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base components\n    base_plate();\n    \n    // Structural elements\n    height_column();\n    gussets();\n    \n    // Support structure\n    support_arms();\n    monitor_platform();\n}",
    "renders": true
  },
  {
    "mechanical_component": "beam",
    "openscad_code": "// Realistic I-beam with mounting holes, flanges, and web stiffeners\n// Suitable for 3D printing - no overhangs, 2mm wall thickness\n\n// Main beam parameters\nbeam_length = 100;\nflange_width = 40;\nflange_thickness = 4;\nweb_height = 30;\nweb_thickness = 4;\n\n// Mounting holes\nhole_diameter = 6;\nhole_spacing = 25;\nend_margin = 15;\n\n// Stiffener ribs\nrib_thickness = 3;\nrib_spacing = 20;\n\n// Fillets for realism\nfillet_radius = 2;\n\nmodule beam() {\n    difference() {\n        // Main beam body\n        union() {\n            // Top flange\n            translate([0, 0, web_height/2 + flange_thickness/2])\n                cube([beam_length, flange_width, flange_thickness], center=true);\n            \n            // Bottom flange\n            translate([0, 0, -web_height/2 - flange_thickness/2])\n                cube([beam_length, flange_width, flange_thickness], center=true);\n            \n            // Web\n            cube([beam_length, web_thickness, web_height], center=true);\n            \n            // End stiffeners\n            for (x = [-beam_length/2 + end_margin, beam_length/2 - end_margin]) {\n                translate([x, 0, 0])\n                    cube([rib_thickness, flange_width, web_height + 2*flange_thickness], center=true);\n            }\n            \n            // Web stiffeners\n            for (x = [-beam_length/2 + end_margin + rib_spacing; \n                     x <= beam_length/2 - end_margin - rib_spacing; \n                     x = x + rib_spacing]) {\n                translate([x, 0, 0])\n                    cube([rib_thickness, web_thickness + 4, web_height], center=true);\n            }\n        }\n        \n        // Mounting holes in top flange\n        for (x = [-beam_length/2 + end_margin; \n                 x <= beam_length/2 - end_margin; \n                 x = x + hole_spacing]) {\n            translate([x, flange_width/4, web_height/2 + flange_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(h=flange_thickness + 2, r=hole_diameter/2, center=true, $fn=20);\n            \n            translate([x, -flange_width/4, web_height/2 + flange_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(h=flange_thickness + 2, r=hole_diameter/2, center=true, $fn=20);\n        }\n        \n        // Mounting holes in bottom flange\n        for (x = [-beam_length/2 + end_margin + hole_spacing/2; \n                 x <= beam_length/2 - end_margin - hole_spacing/2; \n                 x = x + hole_spacing]) {\n            translate([x, flange_width/4, -web_height/2 - flange_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(h=flange_thickness + 2, r=hole_diameter/2, center=true, $fn=20);\n            \n            translate([x, -flange_width/4, -web_height/2 - flange_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(h=flange_thickness + 2, r=hole_diameter/2, center=true, $fn=20);\n        }\n        \n        // Web lightening holes\n        for (x = [-beam_length/2 + end_margin + hole_spacing; \n                 x <= beam_length/2 - end_margin - hole_spacing; \n                 x = x + hole_spacing]) {\n            translate([x, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=web_thickness + 2, r=hole_diameter, center=true, $fn=20);\n        }\n    }\n    \n    // Add fillets for realistic appearance\n    for (x = [-beam_length/2 + end_margin, beam_length/2 - end_margin]) {\n        translate([x, flange_width/2 - fillet_radius, web_height/2])\n            rotate([0, 0, 90])\n                cylinder(h=fillet_radius*2, r=fillet_radius, center=true, $fn=20);\n        \n        translate([x, -flange_width/2 + fillet_radius, web_height/2])\n            rotate([0, 0, 90])\n                cylinder(h=fillet_radius*2, r=fillet_radius, center=true, $fn=20);\n    }\n}\n\n// Render the beam\nbeam();",
    "renders": true
  },
  {
    "mechanical_component": "gusset",
    "openscad_code": "// Gusset Plate - Structural Reinforcement Bracket\n// Medium complexity with realistic details for 3D printing\n\nmodule gusset_main() {\n    // Main triangular plate\n    difference() {\n        // Base plate\n        linear_extrude(height = 3) {\n            polygon(points = [\n                [0, 0],\n                [60, 0],\n                [0, 60]\n            ]);\n        }\n        \n        // Lightening holes\n        translate([15, 15, 0]) {\n            cylinder(h = 4, d = 8, $fn = 32);\n        }\n        translate([35, 15, 0]) {\n            cylinder(h = 4, d = 8, $fn = 32);\n        }\n        translate([15, 35, 0]) {\n            cylinder(h = 4, d = 8, $fn = 32);\n        }\n    }\n}\n\nmodule gusset_flange() {\n    // Bottom flange\n    translate([0, -2, -2]) {\n        cube([62, 4, 2]);\n    }\n    \n    // Side flange\n    translate([-2, 0, -2]) {\n        cube([2, 62, 2]);\n    }\n}\n\nmodule bolt_holes() {\n    // Bottom bolt holes\n    for (x = [10:20:50]) {\n        translate([x, -2, 0]) {\n            cylinder(h = 8, d = 5.5, $fn = 16);\n        }\n    }\n    \n    // Side bolt holes\n    for (y = [10:20:50]) {\n        translate([-2, y, 0]) {\n            cylinder(h = 8, d = 5.5, $fn = 16);\n        }\n    }\n    \n    // Corner bolt hole\n    translate([50, 50, 0]) {\n        cylinder(h = 8, d = 5.5, $fn = 16);\n    }\n}\n\nmodule reinforcement_ribs() {\n    // Diagonal rib\n    translate([30, 30, 1.5]) {\n        rotate([0, 0, -45]) {\n            cube([42, 2, 2], center = true);\n        }\n    }\n    \n    // Horizontal rib\n    translate([30, 20, 1.5]) {\n        cube([56, 2, 2], center = true);\n    }\n    \n    // Vertical rib\n    translate([20, 30, 1.5]) {\n        cube([2, 56, 2], center = true);\n    }\n}\n\nmodule chamfers() {\n    // Edge chamfers for printability\n    translate([0, 0, 3]) {\n        cube([2, 2, 1]);\n    }\n    translate([58, 0, 3]) {\n        cube([2, 2, 1]);\n    }\n    translate([0, 58, 3]) {\n        cube([2, 2, 1]);\n    }\n}\n\n// Assembly\nunion() {\n    gusset_main();\n    gusset_flange();\n    reinforcement_ribs();\n    chamfers();\n}\n\ndifference() {\n    children();\n    bolt_holes();\n}",
    "renders": true
  },
  {
    "mechanical_component": "rib",
    "openscad_code": "// Rib mechanical_component - realistic style, medium complexity\n// Overall dimensions: 140mm x 60mm x 80mm\n\n$fn = 32;\n\nmodule rib_frame() {\n    // Main curved rib body\n    hull() {\n        translate([0, 0, 40]) \n            scale([1, 0.3, 1]) \n                sphere(d = 50);\n        translate([0, 0, 10]) \n            scale([1.2, 0.4, 0.8]) \n                sphere(d = 60);\n    }\n    \n    // Rib head joint connector\n    translate([0, 0, 75])\n        cylinder(h = 15, d1 = 25, d2 = 20);\n}\n\nmodule support_braces() {\n    // Side support braces\n    for(angle = [30, -30]) {\n        rotate([0, 0, angle])\n            translate([20, 0, 30])\n                cube([40, 4, 8], center = true);\n    }\n    \n    // Bottom cross brace\n    translate([0, 0, 5])\n        cube([80, 5, 10], center = true);\n}\n\nmodule mounting_holes() {\n    // Mounting holes for spine attachment\n    for(x = [-25, 0, 25]) {\n        translate([x, 0, 5])\n            cylinder(h = 15, d = 6, center = true);\n    }\n    \n    // Side mounting points\n    for(y = [-20, 20]) {\n        translate([0, y, 40])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d = 4, center = true);\n    }\n}\n\nmodule reinforcement_ribs() {\n    // Internal reinforcement structure\n    for(z = [20, 35, 50]) {\n        translate([0, 0, z])\n            difference() {\n                cube([50, 3, 2], center = true);\n                cube([46, 4, 3], center = true);\n            }\n    }\n}\n\nmodule connector_pins() {\n    // Connector pins for adjacent ribs\n    translate([35, 0, 30])\n        cylinder(h = 8, d = 4);\n    translate([-35, 0, 30])\n        cylinder(h = 8, d = 4);\n    \n    // Matching holes on opposite side\n    translate([35, 0, 30])\n        cylinder(h = 10, d = 5, center = true);\n    translate([-35, 0, 30])\n        cylinder(h = 10, d = 5, center = true);\n}\n\n// Main assembly\ndifference() {\n    union() {\n        rib_frame();\n        support_braces();\n        connector_pins();\n    }\n    \n    mounting_holes();\n    reinforcement_ribs();\n}\n\n// Add small fillets for 3D printing\ntranslate([0, 30, 40])\n    sphere(d = 3);\ntranslate([0, -30, 40])\n    sphere(d = 3);",
    "renders": true
  },
  {
    "mechanical_component": "truss",
    "openscad_code": "// Realistic Medium-Complexity Truss (Furniture-style Shelf Support)\n// External dimensions: 120 mm (W) × 80 mm (H) × 40 mm (D)\n// All wall thickness: 2 mm for 3D-printability\n\n// Main parameters\nw = 120;         // overall width\nh = 80;          // overall height\nd = 40;          // overall depth\nt = 2;           // wall / rod thickness\nrod_r = 2;       // rod radius\njoint_r = 3;     // ball-joint radius\nsegments = 32;   // for smooth spheres\n\n// Render the complete truss\nunion() {\n    \n    // --- Top chord (horizontal bar) ---\n    translate([0, h/2, 0])\n        chord(w, d);\n\n    // --- Bottom chord (horizontal bar) ---\n    translate([0, -h/2, 0])\n        chord(w, d);\n\n    // --- Vertical end posts ---\n    translate([w/2 - joint_r, 0, 0])\n        vertical(h);\n    translate([-w/2 + joint_r, 0, 0])\n        vertical(h);\n\n    // --- Central vertical post ---\n    translate([0, 0, 0])\n        vertical(h);\n\n    // --- Diagonal web members ---\n    for (i = [-1, 1]) {\n        // First diagonal (upper-left to lower-right and mirror)\n        diagonal(\n            [i * w/2, h/2, 0],\n            [-i * w/2, -h/2, 0]\n        );\n        // Second diagonal nested in central bay\n        diagonal(\n            [0, h/2, 0],\n            [i * w/4, -h/2, 0]\n        );\n        diagonal(\n            [i * w/4, h/2, 0],\n            [0, -h/2, 0]\n        );\n    }\n\n    // --- Ball joints at intersections ---\n    joints();\n}\n\n// Top / bottom chord module (hollow box beam)\nmodule chord(len, dep) {\n    difference() {\n        // Outer box\n        cube([len, t, dep], center = true);\n        // Inner hollow channel\n        cube([len - 2*t, t - 0.5, dep - 2*t], center = true);\n    }\n}\n\n// Vertical post module (hollow square tube)\nmodule vertical(height) {\n    difference() {\n        // Outer tube\n        cube([t, height, d], center = true);\n        // Inner hollow\n        cube([t - 0.5, height - 2*t, d - 2*t], center = true);\n    }\n}\n\n// Diagonal rod module with end joints\nmodule diagonal(from, to) {\n    v = to - from;\n    l = norm(v);\n    translate(from)\n    rotate([0, atan2(v.z, sqrt(v.x*v.x + v.y*v.y)), atan2(v.y, v.x)])\n        cylinder(h = l, r = rod_r, $fn = segments);\n}\n\n// Generate all ball joints at rod ends and intersections\nmodule joints() {\n    // Top chord joints\n    for (x = [-w/2, -w/4, 0, w/4, w/2])\n        translate([x, h/2, 0])\n            sphere(r = joint_r, $fn = segments);\n\n    // Bottom chord joints\n    for (x = [-w/2, -w/4, 0, w/4, w/2])\n        translate([x, -h/2, 0])\n            sphere(r = joint_r, $fn = segments);\n}",
    "renders": true
  },
  {
    "mechanical_component": "joist",
    "openscad_code": "// Joist mechanical_component - realistic style, medium complexity\n// 3D printable with 2mm wall thickness and no overhangs\n\n// Parameters\njoist_length = 120;\njoist_width = 30;\njoist_height = 40;\nhole_diameter = 8;\nhole_spacing = 20;\nwall_thickness = 2;\n\n// Main joist body\nmodule joist_body() {\n    // Top flange\n    translate([0, 0, joist_height - wall_thickness])\n        cube([joist_length, joist_width, wall_thickness], center = true);\n    \n    // Bottom flange\n    translate([0, 0, 0])\n        cube([joist_length, joist_width, wall_thickness], center = true);\n    \n    // Web\n    translate([0, 0, joist_height/2])\n        cube([joist_length, wall_thickness, joist_height - 2*wall_thickness], center = true);\n    \n    // Reinforcement ribs\n    for(i = [-joist_length/2 + 10 : 15 : joist_length/2 - 10]) {\n        translate([i, 0, joist_height/2])\n            cube([wall_thickness, joist_width - 4, joist_height - 4], center = true);\n    }\n}\n\n// Bolt holes for connections\nmodule bolt_holes() {\n    for(i = [-joist_length/2 + 15 : hole_spacing : joist_length/2 - 15]) {\n        // Top holes\n        translate([i, 0, joist_height - wall_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=joist_width, d=hole_diameter, $fn=16, center=true);\n        \n        // Bottom holes\n        translate([i, 0, wall_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=joist_width, d=hole_diameter, $fn=16, center=true);\n    }\n}\n\n// End caps with rounded edges\nmodule end_caps() {\n    // Left end\n    translate([-joist_length/2, 0, joist_height/2])\n        cube([wall_thickness*2, joist_width, joist_height], center = true);\n    \n    // Right end\n    translate([joist_length/2, 0, joist_height/2])\n        cube([wall_thickness*2, joist_width, joist_height], center = true);\n}\n\n// Support brackets\nmodule support_brackets() {\n    // Left bracket\n    translate([-joist_length/2 + 5, 0, -5])\n        cube([10, joist_width + 4, 5], center = true);\n    \n    // Right bracket\n    translate([joist_length/2 - 5, 0, -5])\n        cube([10, joist_width + 4, 5], center = true);\n}\n\n// Assembly\nunion() {\n    joist_body();\n    end_caps();\n    support_brackets();\n}\n\ndifference() {\n    children();\n    bolt_holes();\n}",
    "renders": true
  },
  {
    "mechanical_component": "column",
    "openscad_code": "// Mechanical Column Component - Structural Support Element\n// Realistic style, medium complexity, 3D printable\n\n// Overall dimensions\ncolumn_height = 120;\nbase_diameter = 40;\nshaft_diameter = 30;\ncapital_diameter = 45;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Base module with mounting holes\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=15, d=base_diameter, $fn=32);\n        \n        // Center hole for weight reduction\n        cylinder(h=16, d=base_diameter-wall*2, $fn=32);\n        \n        // Mounting holes - 4 holes at 90 degrees\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n                translate([base_diameter/2-5, 0, 0])\n                    cylinder(h=16, d=3.2, $fn=16);\n        }\n    }\n    \n    // Base lip detail\n    translate([0,0,12])\n        cylinder(h=3, d1=base_diameter+2, d2=base_diameter, $fn=32);\n}\n\n// Shaft with fluting details\nmodule shaft() {\n    // Main hollow shaft\n    difference() {\n        cylinder(h=column_height-35, d=shaft_diameter, $fn=32);\n        cylinder(h=column_height-34, d=shaft_diameter-wall*2, $fn=32);\n    }\n    \n    // Structural fluting for rigidity\n    for(i=[0:7]) {\n        rotate([0,0,i*45])\n            translate([shaft_diameter/2-wall/2, 0, 0])\n                cube([wall, 3, column_height-35], center=true);\n    }\n    \n    // Reinforcement rings every 20mm\n    for(i=[1:5]) {\n        translate([0,0,i*20-2])\n            difference() {\n                cylinder(h=4, d=shaft_diameter+2, $fn=32);\n                cylinder(h=5, d=shaft_diameter, $fn=32);\n            }\n    }\n}\n\n// Capital with integrated coupling\nmodule capital() {\n    // Main capital shape - tapered\n    difference() {\n        cylinder(h=20, d1=capital_diameter, d2=capital_diameter-5, $fn=32);\n        cylinder(h=21, d1=capital_diameter-wall*2, d2=capital_diameter-5-wall*2, $fn=32);\n    }\n    \n    // Top mounting flange\n    translate([0,0,18])\n        difference() {\n            cylinder(h=5, d=capital_diameter+4, $fn=32);\n            cylinder(h=6, d=capital_diameter-2, $fn=32);\n            \n            // Threaded insert holes\n            for(i=[0:3]) {\n                rotate([0,0,i*90+45])\n                    translate([capital_diameter/2-3, 0, 0])\n                        cylinder(h=6, d=5, $fn=16);\n            }\n        }\n    \n    // Decorative fillet\n    translate([0,0,17.5])\n        cylinder(h=1, d=capital_diameter+1, $fn=32);\n}\n\n// Assembly\nunion() {\n    // Base at origin\n    base();\n    \n    // Shaft on top of base\n    translate([0,0,15])\n        shaft();\n    \n    // Capital on top of shaft\n    translate([0,0,column_height-20])\n        capital();\n}",
    "renders": true
  },
  {
    "mechanical_component": "girder",
    "openscad_code": "$fs = 0.5;\n$fa = 2;\n\n// Overall girder dimensions (mm)\ngirder_length = 120;\ngirder_height = 40;\ngirder_width = 40;\nwall_thickness = 2;\n\n// Flange and web dimensions\nflange_thickness = 4;\nweb_thickness = 3;\n\n// Bolt hole parameters\nbolt_hole_diameter = 4.5;\nbolt_spacing = 20;\nbolt_edge_distance = 15;\n\n// Fillet radius for realistic appearance\nfillet_radius = 2;\n\nmodule flange(length, width, thickness) {\n    // Main flange plate\n    difference() {\n        cube([length, width, thickness], center=true);\n        \n        // Rounded edges using sphere subtraction\n        for (x = [-length/2 + fillet_radius, length/2 - fillet_radius]) {\n            for (y = [-width/2 + fillet_radius, width/2 - fillet_radius]) {\n                translate([x, y, thickness/2 - fillet_radius]) {\n                    sphere(r=fillet_radius);\n                }\n            }\n        }\n    }\n}\n\nmodule web(length, height, thickness) {\n    // Central web plate\n    difference() {\n        cube([length, thickness, height], center=true);\n        \n        // Rounded top/bottom edges\n        for (z = [-height/2 + fillet_radius, height/2 - fillet_radius]) {\n            for (x = [-length/2 + fillet_radius, length/2 - fillet_radius]) {\n                translate([x, 0, z]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=thickness+1, r=fillet_radius, center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule bolt_holes(length, spacing, diameter) {\n    // Create bolt holes along the flange\n    num_holes = floor((length - 2*bolt_edge_distance)/spacing) + 1;\n    \n    for (i = [0:num_holes-1]) {\n        x_pos = -length/2 + bolt_edge_distance + i*spacing;\n        translate([x_pos, 0, -flange_thickness/2 - 0.1]) {\n            cylinder(h=flange_thickness+0.2, d=diameter, center=true);\n        }\n    }\n}\n\nmodule girder_assembly() {\n    union() {\n        // Top flange\n        translate([0, 0, girder_height/2 - flange_thickness/2]) {\n            flange(girder_length, girder_width, flange_thickness);\n            bolt_holes(girder_length, bolt_spacing, bolt_hole_diameter);\n        }\n        \n        // Bottom flange\n        translate([0, 0, -girder_height/2 + flange_thickness/2]) {\n            flange(girder_length, girder_width, flange_thickness);\n            bolt_holes(girder_length, bolt_spacing, bolt_hole_diameter);\n        }\n        \n        // Web\n        web(girder_length, girder_height - 2*flange_thickness, web_thickness);\n        \n        // Reinforcement ribs\n        for (x = [-girder_length/2 + 2*bolt_edge_distance : bolt_spacing*2 : girder_length/2 - 2*bolt_edge_distance]) {\n            translate([x, 0, 0]) {\n                rotate([90, 0, 0]) {\n                    cube([web_thickness*2, girder_height - 2*flange_thickness - 4, wall_thickness], center=true);\n                }\n            }\n        }\n        \n        // End plates\n        for (x = [-girder_length/2, girder_length/2]) {\n            translate([x, 0, 0]) {\n                rotate([0, 90, 0]) {\n                    cube([wall_thickness, girder_width, girder_height], center=true);\n                    \n                    // End plate bolt holes\n                    for (y = [-girder_width/2 + 2*wall_thickness : 15 : girder_width/2 - 2*wall_thickness]) {\n                        for (z = [-girder_height/2 + 2*wall_thickness : 15 : girder_height/2 - 2*wall_thickness]) {\n                            translate([0, y, z]) {\n                                rotate([90, 0, 0]) {\n                                    cylinder(h=wall_thickness+0.2, d=bolt_hole_diameter, center=true);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the complete girder\ngirder_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "rafter",
    "openscad_code": "// Realistic Rafter mechanical_component with structural joints\n// Medium complexity OpenSCAD model\n\n// Overall dimensions (mm)\nrafter_length = 120;\nrafter_width = 25;\nrafter_height = 40;\n\n// Joint dimensions\ntenon_length = 15;\ntenon_width = 8;\nmortise_depth = 10;\nbolt_hole_diameter = 4;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main rafter body\nmodule rafter_body() {\n    difference() {\n        // Main timber\n        cube([rafter_length, rafter_width, rafter_height], center=false);\n        \n        // Lightening slots (printable without support)\n        for (i = [20:40:rafter_length-30]) {\n            translate([i, wall_thickness, wall_thickness])\n                cube([20, rafter_width - 2*wall_thickness, rafter_height - 2*wall_thickness]);\n        }\n    }\n}\n\n// Birdsmouth joint at bottom\nmodule birdsmouth_joint() {\n    translate([0, 0, 0]) {\n        // Cutout for birdsmouth\n        translate([0, rafter_width, 0])\n            rotate([0, 0, -30])\n            cube([rafter_length/3, rafter_width*2, rafter_height]);\n        \n        // Reinforcement block\n        translate([5, 0, 0])\n            cube([15, rafter_width, wall_thickness*3]);\n    }\n}\n\n// Tenon joint at top\nmodule top_tenon() {\n    translate([rafter_length - tenon_length, 0, rafter_height - tenon_width*2]) {\n        cube([tenon_length, tenon_width, tenon_width*2]);\n        \n        // Bolt hole through tenon\n        translate([tenon_length/2, tenon_width/2, tenon_width])\n            rotate([90, 0, 0])\n            cylinder(h=tenon_width*2, d=bolt_hole_diameter, $fn=16);\n    }\n}\n\n// Mortise joint on side\nmodule side_mortise() {\n    translate([rafter_length/2, rafter_width, rafter_height/2]) {\n        cube([mortise_depth, wall_thickness, 15]);\n        \n        // Dowel holes\n        for (i = [0, 1]) {\n            translate([mortise_depth/2, -wall_thickness, 5 + i*5])\n                rotate([90, 0, 0])\n                cylinder(h=wall_thickness*2, d=bolt_hole_diameter, $fn=16);\n        }\n    }\n}\n\n// Structural ridge detail\nmodule ridge_detail() {\n    translate([rafter_length - 20, 0, rafter_height - wall_thickness]) {\n        // Ridge plate connection\n        cube([20, rafter_width, wall_thickness]);\n        \n        // Gusset plate\n        translate([10, rafter_width/2, 0])\n            rotate([0, -45, 0])\n            cube([15, wall_thickness*2, 15]);\n    }\n}\n\n// Wood grain texture simulation\nmodule wood_grain() {\n    for (i = [0:3:rafter_length]) {\n        translate([i, 0, 0])\n            cube([0.5, rafter_width, rafter_height]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body with joints\n    union() {\n        rafter_body();\n        birdsmouth_joint();\n        top_tenon();\n        side_mortise();\n        ridge_detail();\n    }\n    \n    // Wood grain texture (subtle)\n    %wood_grain();\n}",
    "renders": true
  },
  {
    "mechanical_component": "sill",
    "openscad_code": "// Window sill mechanical component - realistic style, medium complexity\n// Overall dimensions: 140mm width x 30mm depth x 15mm height\n\n// Wall thickness constant\nwall_thickness = 2;\n\n// Main sill body with slight taper for water drainage\nmodule sill_body() {\n    difference() {\n        // Main tapered block\n        hull() {\n            translate([0, -15, 0])\n                cube([140, 30, 15], center=true);\n            translate([0, 15, -2])\n                cube([140, 26, 11], center=true);\n        }\n        \n        // Hollow cavity for weight reduction\n        translate([0, 0, 2])\n            cube([136, 26, 9], center=true);\n    }\n}\n\n// Front drip edge to prevent water running back to wall\nmodule drip_edge() {\n    translate([0, -16, 7])\n        cube([138, 2, 1], center=true);\n}\n\n// Mounting brackets - 4 brackets for secure wall attachment\nmodule mounting_brackets() {\n    for(x = [-60, -20, 20, 60]) {\n        translate([x, 15, 2]) {\n            // Main bracket body\n            difference() {\n                cube([8, 6, 6], center=true);\n                // Screw hole\n                translate([0, 3, 0])\n                    cylinder(h=10, r=1.5, center=true, $fn=16);\n            }\n            // Reinforcement gusset\n            translate([0, 0, -3])\n                cube([8, 6, 2], center=true);\n        }\n    }\n}\n\n// Weather seal groove on back edge\nmodule seal_groove() {\n    translate([0, 15, 5])\n        cube([136, 2, 2], center=true);\n}\n\n// Drainage channels - slight slope channels for water runoff\nmodule drainage_channels() {\n    for(x = [-50, -10, 30, 70]) {\n        translate([x, 0, 14.5])\n            rotate([0, 10, 0])\n                cube([20, 30, 0.5], center=true);\n    }\n}\n\n// Surface texture - subtle grooves for grip\nmodule surface_texture() {\n    for(y = [-10, -5, 0, 5, 10]) {\n        translate([0, y, 14.8])\n            cube([140, 0.5, 0.3], center=true);\n    }\n}\n\n// Corner reinforcements\nmodule corner_reinforcements() {\n    // Front left\n    translate([-68, -14, 2])\n        rotate([0, 0, 45])\n        cube([4, 4, 10], center=true);\n    \n    // Front right\n    translate([68, -14, 2])\n        rotate([0, 0, -45])\n        cube([4, 4, 10], center=true);\n}\n\n// Assembly\nunion() {\n    sill_body();\n    drip_edge();\n    mounting_brackets();\n    seal_groove();\n    drainage_channels();\n    surface_texture();\n    corner_reinforcements();\n}",
    "renders": true
  },
  {
    "mechanical_component": "purlin",
    "openscad_code": "// Purlin Mechanical Component - C-Channel Style\n// Realistic style with medium complexity, 3D printable\n\n// Overall dimensions (mm)\npurlin_length = 120;\npurlin_width = 40;\npurlin_height = 20;\nwall_thickness = 2;\nweb_thickness = 2;\n\nmodule purlin_web() {\n    // Main web section\n    translate([0, 0, purlin_height/2])\n        cube([purlin_length, web_thickness, purlin_height], center=true);\n}\n\nmodule purlin_flanges() {\n    // Top and bottom flanges\n    for(z = [-purlin_height/2 + wall_thickness/2, purlin_height/2 - wall_thickness/2]) {\n        translate([0, 0, z])\n            cube([purlin_length, purlin_width, wall_thickness], center=true);\n    }\n}\n\nmodule bolt_holes() {\n    // Standard bolt holes for connections\n    hole_diameter = 6;\n    hole_spacing = 25;\n    num_holes = floor(purlin_length / hole_spacing) - 1;\n    \n    for(i = [1:num_holes]) {\n        x_pos = -purlin_length/2 + i * hole_spacing;\n        \n        // Holes in web\n        translate([x_pos, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=purlin_width + 2, d=hole_diameter, center=true, $fn=20);\n        \n        // Holes in flanges\n        for(y = [-purlin_width/3, purlin_width/3]) {\n            translate([x_pos, y, purlin_height/2 - wall_thickness/2])\n                cylinder(h=wall_thickness + 1, d=hole_diameter, center=true, $fn=20);\n            translate([x_pos, y, -purlin_height/2 + wall_thickness/2])\n                cylinder(h=wall_thickness + 1, d=hole_diameter, center=true, $fn=20);\n        }\n    }\n}\n\nmodule stiffener_ribs() {\n    // Structural stiffening ribs\n    rib_thickness = 2;\n    rib_spacing = 30;\n    num_ribs = floor(purlin_length / rib_spacing) - 1;\n    \n    for(i = [1:num_ribs]) {\n        x_pos = -purlin_length/2 + i * rib_spacing;\n        \n        // Web stiffeners\n        translate([x_pos, 0, 0])\n            cube([rib_thickness, web_thickness + 4, purlin_height - 2*wall_thickness], center=true);\n        \n        // Flange to web connections\n        translate([x_pos, purlin_width/2 - wall_thickness/2 - 1, 0])\n            cube([rib_thickness, 2, purlin_height/2 - wall_thickness/2], center=true);\n        translate([x_pos, -purlin_width/2 + wall_thickness/2 + 1, 0])\n            cube([rib_thickness, 2, purlin_height/2 - wall_thickness/2], center=true);\n    }\n}\n\nmodule chamfer_edges() {\n    // Add chamfers for realistic appearance and printability\n    chamfer_size = 1;\n    \n    // Web chamfers\n    difference() {\n        cube([purlin_length, web_thickness, purlin_height], center=true);\n        \n        // Top chamfers\n        translate([0, 0, purlin_height/2 - chamfer_size])\n            rotate([0, 90, 0])\n                cylinder(h=purlin_length + 2, d=chamfer_size*2, center=true, $fn=20);\n        \n        // Bottom chamfers\n        translate([0, 0, -purlin_height/2 + chamfer_size])\n            rotate([0, 90, 0])\n                cylinder(h=purlin_length + 2, d=chamfer_size*2, center=true, $fn=20);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main purlin body\n    union() {\n        purlin_web();\n        purlin_flanges();\n    }\n    \n    // Structural enhancements\n    union() {\n        stiffener_ribs();\n    }\n}\n\n// Remove material for bolt holes\ndifference() {\n    children();\n    bolt_holes();\n}\n\n// Apply chamfers\ndifference() {\n    children();\n    chamfer_edges();\n}",
    "renders": true
  },
  {
    "mechanical_component": "lintel",
    "openscad_code": "// OpenSCAD Lintel for Structural Support\n// Realistic style, medium complexity\n// External dimensions: 120mm W x 20mm H x 60mm D\n// Wall thickness: 2mm throughout for 3D printing\n\n// Global parameters for the lintel\nlintel_length = 120;\nlintel_height = 20;\nlintel_depth  = 60;\nwall_thick    = 2;\n\n// Internal cavity dimensions\ninner_len = lintel_length - 2*wall_thick;\ninner_h   = lintel_height - 2*wall_thick;\ninner_d   = lintel_depth  - 2*wall_thick;\n\n// Rebar-like stiffening ribs\nrib_thick  = 2;\nrib_spacing = 20;\nrib_count  = floor(inner_len / rib_spacing);\n\n// End-cap bolt bosses\nboss_d = 8;\nboss_h = wall_thick + 2;\nboss_r = boss_d/2;\n\nmodule lintel_body() {\n    difference() {\n        // Outer shell\n        cube([lintel_length, lintel_depth, lintel_height], center=true);\n\n        // Hollow cavity\n        translate([0,0,0])\n            cube([inner_len, inner_d, inner_h], center=true);\n\n        // Fillets on lower inside edges for printability\n        translate([0, 0, -inner_h/2])\n            cube([inner_len+1, inner_d+1, wall_thick], center=true);\n    }\n}\n\nmodule stiffening_ribs() {\n    for (i = [-rib_count/2+0.5 : 1 : rib_count/2-0.5]) {\n        translate([i*rib_spacing, 0, -inner_h/2])\n            cube([rib_thick, inner_d, inner_h], center=true);\n    }\n}\n\nmodule bolt_bosses() {\n    // Left boss\n    translate([-lintel_length/2 + boss_r, 0, lintel_height/2 - boss_h/2])\n        cylinder(h=boss_h, r=boss_r, $fn=20);\n\n    // Right boss\n    translate([ lintel_length/2 - boss_r, 0, lintel_height/2 - boss_h/2])\n        cylinder(h=boss_h, r=boss_r, $fn=20);\n}\n\nmodule bolt_holes() {\n    // Through holes for M4 bolts\n    hole_r = 2.2;\n    for (x = [-lintel_length/2 + boss_r, lintel_length/2 - boss_r]) {\n        translate([x, 0, lintel_height/2])\n            rotate([90,0,0])\n                cylinder(h=boss_h+1, r=hole_r, $fn=16);\n    }\n}\n\nmodule surface_texture() {\n    // Subtle grain pattern on top face\n    grain_w = 0.5;\n    grain_h = 0.2;\n    grain_spacing = 1;\n\n    for (i = [-lintel_length/2 : grain_spacing : lintel_length/2]) {\n        translate([i, 0, lintel_height/2 - grain_h/2])\n            cube([grain_w, lintel_depth, grain_h], center=true);\n    }\n}\n\n// Build the lintel\nunion() {\n    lintel_body();\n    stiffening_ribs();\n    bolt_bosses();\n    surface_texture();\n}\n\ndifference() {\n    // Everything above\n    children(0);\n\n    // Remove bolt holes last\n    bolt_holes();\n}",
    "renders": true
  },
  {
    "mechanical_component": "corbel",
    "openscad_code": "// Corbel mechanical component - structural support bracket\n// Medium complexity realistic style with mechanical details\n\n// Wall thickness\nwall = 2;\n\n// Overall dimensions\nlength = 80;\nheight = 60;\ndepth = 50;\n\n// Mounting plate dimensions\nmount_width = 60;\nmount_height = 40;\nmount_thickness = 4;\n\n// Bracket arm dimensions\narm_width = 20;\narm_height = 15;\narm_length = 60;\n\n// Gusset dimensions\ngusset_height = 35;\ngusset_base = 25;\n\n// Hole parameters\nhole_diameter = 6;\nhole_spacing = 20;\n\n// Rounding radius\nround_r = 2;\n\n// Main mounting plate\nmodule mounting_plate() {\n    difference() {\n        // Main plate\n        translate([0, -mount_thickness/2, mount_height/2])\n            cube([mount_width, mount_thickness, mount_height], center=true);\n        \n        // Mounting holes - vertical pattern\n        for(i = [-1, 0, 1]) {\n            translate([i * hole_spacing, -mount_thickness/2 - 1, hole_spacing])\n                rotate([90, 0, 0])\n                    cylinder(h=mount_thickness+2, d=hole_diameter, center=true, $fn=20);\n            \n            translate([i * hole_spacing, -mount_thickness/2 - 1, -hole_spacing])\n                rotate([90, 0, 0])\n                    cylinder(h=mount_thickness+2, d=hole_diameter, center=true, $fn=20);\n        }\n    }\n}\n\n// Tapered support arm\nmodule support_arm() {\n    difference() {\n        union() {\n            // Main arm - tapered\n            hull() {\n                // Top surface\n                translate([-arm_width/2, 0, height])\n                    cube([arm_width, arm_length, arm_height]);\n                \n                // Bottom surface\n                translate([-arm_width/2, 0, gusset_height])\n                    cube([arm_width, arm_length, arm_height]);\n            }\n            \n            // Rounded edges\n            translate([0, arm_length - round_r, height - round_r])\n                rotate([90, 0, 0])\n                    cylinder(h=arm_width, r=round_r, center=true, $fn=20);\n        }\n        \n        // Weight reduction holes\n        for(i = [0.3, 0.5, 0.7]) {\n            translate([0, arm_length * i, height - 10])\n                rotate([0, 90, 0])\n                    cylinder(h=arm_width + 2, d=8, center=true, $fn=20);\n        }\n    }\n}\n\n// Triangular gusset for reinforcement\nmodule gusset() {\n    difference() {\n        // Main gusset\n        union() {\n            // Triangular support\n            polyhedron(\n                points = [\n                    [-arm_width/2 - wall, 0, gusset_height],\n                    [arm_width/2 + wall, 0, gusset_height],\n                    [arm_width/2 + wall, arm_length * 0.8, gusset_height],\n                    [-arm_width/2 - wall, arm_length * 0.8, gusset_height],\n                    [-arm_width/2 - wall, 0, wall],\n                    [arm_width/2 + wall, 0, wall],\n                    [arm_width/2 + wall, gusset_base, wall],\n                    [-arm_width/2 - wall, gusset_base, wall]\n                ],\n                faces = [\n                    [0, 1, 2, 3],    // Top\n                    [4, 5, 1, 0],    // Front\n                    [5, 6, 2, 1],    // Right\n                    [6, 7, 3, 2],    // Back\n                    [7, 4, 0, 3],    // Left\n                    [4, 7, 6, 5]     // Bottom\n                ]\n            );\n            \n            // Side reinforcement ribs\n            translate([-arm_width/2 - wall - 1, 0, gusset_height/2])\n                cube([1, gusset_base, gusset_height]);\n            \n            translate([arm_width/2 + wall, 0, gusset_height/2])\n                cube([1, gusset_base, gusset_height]);\n        }\n        \n        // Lightening holes in gusset\n        translate([0, gusset_base/3, gusset_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=arm_width + 4, d=8, center=true, $fn=20);\n    }\n}\n\n// Top load bearing plate\nmodule load_plate() {\n    difference() {\n        // Main plate\n        translate([0, arm_length - 5, height + arm_height/2])\n            cube([arm_width + 4, 10, arm_height], center=true);\n        \n        // Drainage hole\n        translate([0, arm_length - 5, height + arm_height - 2])\n            rotate([90, 0, 0])\n                cylinder(h=10 + 2, d=4, center=true, $fn=20);\n    }\n}\n\n// Assembly\nunion() {\n    // Mounting plate\n    mounting_plate();\n    \n    // Support arm\n    support_arm();\n    \n    // Gusset reinforcement\n    gusset();\n    \n    // Load bearing plate\n    load_plate();\n    \n    // Small fillets for stress relief\n    translate([-arm_width/2 - wall/2, 0, gusset_height])\n        rotate([90, 0, 0])\n            cylinder(h=wall, r=wall, center=true, $fn=20);\n    \n    translate([arm_width/2 + wall/2, 0, gusset_height])\n        rotate([90, 0, 0])\n            cylinder(h=wall, r=wall, center=true, $fn=20);\n}\n\n// Optional support struts (uncomment for extra reinforcement)\n/*\nfor(i = [-1, 1]) {\n    translate([i * (arm_width/2 + wall/2), 0, gusset_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=arm_length * 0.6, d=wall, center=false, $fn=8);\n}\n*/",
    "renders": true
  },
  {
    "mechanical_component": "bracketry",
    "openscad_code": "// Right-angle corner bracket for 90° aluminum extrusion\n// Overall footprint ~60 mm × 60 mm × 40 mm\n// 2 mm wall thickness minimum, printable without supports\n\n$fn = 32;                // smooth curves\nwall = 2;                // uniform wall thickness\nscrew_d = 5.5;           // M5 screw clearance\nscrew_head_d = 10;       // M5 countersink\nscrew_head_h = 5;\nslot_w = 6;              // T-slot clearance\nslot_h = 12;\nboss_r = 7;              // corner boss\nboss_h = 8;\n\nmodule main_body() {\n    difference() {\n        // outer L-shell\n        union() {\n            // vertical leg\n            translate([-30, -wall/2, 0])\n                cube([60, wall, 40]);\n\n            // horizontal leg\n            translate([-wall/2, -30, 0])\n                cube([wall, 60, 40]);\n\n            // corner fillet\n            translate([0, 0, 0])\n                cylinder(r = 10, h = 40, center = true);\n\n            // top stiffening rib\n            translate([0, 0, 38])\n                cube([60, 60, wall], center = true);\n\n            // bottom stiffening rib\n            translate([0, 0, 2])\n                cube([60, 60, wall], center = true);\n        }\n\n        // inner cavity\n        translate([0, 0, 20])\n            cube([56, 56, 36], center = true);\n\n        // T-slot cutouts on vertical face\n        for (z = [10, 30]) {\n            translate([30 + wall/2, 0, z])\n                rotate([0, 90, 0])\n                    cube([slot_h, slot_w, 60], center = true);\n        }\n\n        // T-slot cutouts on horizontal face\n        for (z = [10, 30]) {\n            translate([0, 30 + wall/2, z])\n                rotate([90, 0, 0])\n                    cube([slot_h, slot_w, 60], center = true);\n        }\n\n        // screw holes vertical leg\n        translate([30 + wall/2, -20, 10])\n            rotate([0, 90, 0])\n                cylinder(d = screw_d, h = 40, center = true);\n        translate([30 + wall/2, 20, 10])\n            rotate([0, 90, 0])\n                cylinder(d = screw_d, h = 40, center = true);\n\n        // screw holes horizontal leg\n        translate([-20, 30 + wall/2, 10])\n            rotate([90, 0, 0])\n                cylinder(d = screw_d, h = 40, center = true);\n        translate([20, 30 + wall/2, 10])\n            rotate([90, 0, 0])\n                cylinder(d = screw_d, h = 40, center = true);\n\n        // screw head countersinks vertical leg\n        translate([30 + wall/2 + 2, -20, 10])\n            rotate([0, 90, 0])\n                cylinder(d1 = screw_head_d, d2 = screw_d, h = screw_head_h, center = true);\n        translate([30 + wall/2 + 2, 20, 10])\n            rotate([0, 90, 0])\n                cylinder(d1 = screw_head_d, d2 = screw_d, h = screw_head_h, center = true);\n\n        // screw head countersinks horizontal leg\n        translate([-20, 30 + wall/2 + 2, 10])\n            rotate([90, 0, 0])\n                cylinder(d1 = screw_head_d, d2 = screw_d, h = screw_head_h, center = true);\n        translate([20, 30 + wall/2 + 2, 10])\n            rotate([90, 0, 0])\n                cylinder(d1 = screw_head_d, d2 = screw_d, h = screw_head_h, center = true);\n    }\n}\n\n// corner reinforcement boss\nmodule corner_boss() {\n    difference() {\n        translate([0, 0, 0])\n            cylinder(r = boss_r, h = boss_h, center = true);\n        translate([0, 0, 0])\n            cylinder(r = boss_r - wall, h = boss_h + 1, center = true);\n    }\n}\n\nunion() {\n    main_body();\n    translate([0, 0, 0])\n        corner_boss();\n}",
    "renders": true
  },
  {
    "mechanical_component": "cleat",
    "openscad_code": "// Cleat mechanical component - medium complexity realistic style\n// Size: ~120mm x 50mm x 35mm\n\nmodule base_plate() {\n    // Main mounting base with rounded edges\n    difference() {\n        minkowski() {\n            cube([120, 50, 4], center=true);\n            sphere(2);\n        }\n        \n        // Mounting holes pattern\n        for(x=[-45, -15, 15, 45]) {\n            for(y=[-15, 15]) {\n                translate([x, y, 0])\n                    cylinder(h=5, r=3.5, center=true);\n            }\n        }\n    }\n}\n\nmodule cleat_wings() {\n    // Two angled wings for rope retention\n    for(side=[-1, 1]) {\n        translate([0, side * 15, 0]) {\n            rotate([0, 30 * side, 0]) {\n                difference() {\n                    // Wing body with rounded top\n                    hull() {\n                        translate([-50, -5, 0])\n                            cube([40, 10, 30], center=true);\n                        translate([50, -5, 0])\n                            cube([40, 10, 30], center=true);\n                        translate([0, -5, 25])\n                            cube([100, 10, 5], center=true);\n                    }\n                    \n                    // Rope groove\n                    translate([0, -5, 15])\n                        rotate([90, 0, 0])\n                            cylinder(h=100, r=6, center=true);\n                    \n                    // Chamfer edges\n                    translate([0, -8, -2])\n                        rotate([0, 45, 0])\n                            cube([110, 5, 5], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule center_horn() {\n    // Center horn structure\n    difference() {\n        hull() {\n            // Base\n            translate([0, 0, 0])\n                cube([20, 30, 5], center=true);\n            // Middle\n            translate([0, 0, 15])\n                cube([15, 25, 5], center=true);\n            // Top\n            translate([0, 0, 25])\n                cube([8, 15, 5], center=true);\n        }\n        \n        // Horn groove\n        translate([0, 0, 12])\n            rotate([90, 0, 0])\n                cylinder(h=35, r=5, center=true);\n        \n        // Lightening holes\n        translate([0, 0, 8])\n            cylinder(h=20, r=4, center=true);\n    }\n}\n\nmodule reinforcing_ribs() {\n    // Structural ribs for strength\n    for(pos=[-40, -20, 0, 20, 40]) {\n        translate([pos, 0, 2]) {\n            difference() {\n                cube([3, 48, 8], center=true);\n                translate([0, 0, 6])\n                    cube([5, 50, 5], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_plate();\n    \n    translate([0, 0, 2])\n        cleat_wings();\n    \n    translate([0, 0, 5])\n        center_horn();\n    \n    translate([0, 0, 2])\n        reinforcing_ribs();\n}",
    "renders": true
  },
  {
    "mechanical_component": "stanchion",
    "openscad_code": "// Stanchion Mechanical Component - Realistic Style, Medium Complexity\n// Overall dimensions: 60mm height, 25mm diameter base, 2mm wall thickness\n\nmodule stanchion_base() {\n    // Main base cylinder with chamfered bottom\n    difference() {\n        cylinder(h=8, d=25, $fn=60);\n        translate([0, 0, -0.1])\n            cylinder(h=8.2, d=21, $fn=60);\n    }\n    \n    // Base mounting holes - 4 holes for M3 screws\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([9, 0, -0.5])\n                cylinder(h=9, d=3.5, $fn=16);\n    }\n    \n    // Bottom chamfer detail\n    translate([0, 0, 0.5])\n        difference() {\n            cylinder(h=1.5, d=25, $fn=60);\n            cylinder(h=1.6, d=23, $fn=60);\n        }\n}\n\nmodule stanchion_post() {\n    // Main post tube - 2mm wall thickness\n    difference() {\n        cylinder(h=45, d=12, $fn=40);\n        translate([0, 0, -0.1])\n            cylinder(h=45.2, d=8, $fn=40);\n    }\n    \n    // Reinforcement ring at base\n    translate([0, 0, 2])\n        difference() {\n            cylinder(h=3, d=16, $fn=40);\n            cylinder(h=3.2, d=12, $fn=40);\n        }\n    \n    // Top collar with internal threads\n    translate([0, 0, 42])\n        difference() {\n            cylinder(h=6, d=14, $fn=40);\n            translate([0, 0, 2])\n                cylinder(h=4.2, d=10, $fn=40);\n            // Thread relief cuts\n            for (i = [0:2]) {\n                rotate([0, 0, i * 120])\n                    translate([5, 0, 2])\n                        cube([10, 1, 4], center=true);\n            }\n        }\n}\n\nmodule stanchion_top() {\n    // Top cap with retention lip\n    difference() {\n        union() {\n            cylinder(h=3, d=16, $fn=40);\n            translate([0, 0, 3])\n                cylinder(h=2, d=20, $fn=40);\n        }\n        // Central hole for cable/rod\n        translate([0, 0, -0.1])\n            cylinder(h=5.2, d=6, $fn=30);\n    }\n    \n    // Grip knurls\n    for (i = [0:17]) {\n        rotate([0, 0, i * 20])\n            translate([9, 0, 0])\n                cube([1, 0.5, 3], center=true);\n    }\n}\n\n// Assembly\nstanchion_base();\ntranslate([0, 0, 8])\n    stanchion_post();\ntranslate([0, 0, 53])\n    stanchion_top();",
    "renders": true
  },
  {
    "mechanical_component": "bulkhead",
    "openscad_code": "// Realistic Bulkhead Mechanical Component\n// Medium complexity with structural elements and mounting features\n\n// Overall dimensions\nlength = 100;\nheight = 80;\ndepth = 15;\nwall_thickness = 2;\n\n// Mounting holes\nhole_diameter = 4;\nhole_spacing = 80;\ncorner_radius = 5;\n\n// Reinforcement ribs\nrib_width = 3;\nrib_height = 6;\nnum_ribs = 3;\n\n// Cable opening\ncable_hole_diameter = 12;\ncable_hole_offset = 30;\n\n// Flange details\nflange_width = 8;\nflange_thickness = 2;\n\nmodule main_frame() {\n    // Main rectangular frame with rounded corners\n    difference() {\n        // Outer shell\n        minkowski() {\n            cube([length, height, depth], center=true);\n            cylinder(r=corner_radius, h=0.1, center=true);\n        }\n        \n        // Inner cavity\n        minkowski() {\n            cube([length-2*wall_thickness, height-2*wall_thickness, depth+1], center=true);\n            cylinder(r=corner_radius-wall_thickness, h=0.1, center=true);\n        }\n    }\n}\n\nmodule mounting_holes() {\n    // Corner mounting holes\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * hole_spacing/2, y * height/2 - 10, 0])\n                cylinder(d=hole_diameter, h=depth+1, center=true);\n        }\n    }\n    \n    // Central mounting hole\n    translate([0, 0, 0])\n        cylinder(d=hole_diameter, h=depth+1, center=true);\n}\n\nmodule reinforcement_ribs() {\n    // Vertical ribs for structural strength\n    for(i = [-1:1]) {\n        translate([i * length/4, 0, 0])\n            cube([rib_width, height-2*corner_radius, rib_height], center=true);\n    }\n}\n\nmodule cable_access() {\n    // Cable entry hole\n    translate([cable_hole_offset, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(d=cable_hole_diameter, h=wall_thickness+1, center=true);\n    \n    // Cable strain relief grooves\n    for(angle = [0:60:300]) {\n        rotate([0, 0, angle])\n            translate([cable_hole_offset + cable_hole_diameter/2 + 2, 0, 0])\n                cube([4, 1, wall_thickness], center=true);\n    }\n}\n\nmodule mounting_flanges() {\n    // Top and bottom mounting flanges\n    for(y = [-1, 1]) {\n        translate([0, y * (height/2 + flange_width/2), 0])\n            cube([length + 2*flange_width, flange_width, flange_thickness], center=true);\n        \n        // Flange holes\n        for(x = [-1, 0, 1]) {\n            translate([x * hole_spacing/3, y * (height/2 + flange_width/2), 0])\n                cylinder(d=hole_diameter, h=flange_thickness+1, center=true);\n        }\n    }\n}\n\nmodule identification_label() {\n    // Recessed area for label\n    translate([0, -height/3, depth/2 - wall_thickness/2])\n        cube([40, 15, wall_thickness], center=true);\n}\n\n// Assembly\nunion() {\n    // Main structure\n    difference() {\n        main_frame();\n        mounting_holes();\n    }\n    \n    // Structural additions\n    reinforcement_ribs();\n    \n    // Access features\n    difference() {\n        cable_access();\n    }\n    \n    // Mounting hardware\n    mounting_flanges();\n    \n    // Details\n    identification_label();\n}",
    "renders": true
  },
  {
    "mechanical_component": "bulkplate",
    "openscad_code": "// Bulkplate mechanical component - medium complexity, realistic style\n// Base plate with grid of mounting holes, structural ribs, and corner gussets\n\n// Overall dimensions\nplate_length = 120;\nplate_width = 80;\nplate_thickness = 6;\nwall_thickness = 2;\n\n// Hole parameters\nhole_diameter = 6;\nhole_spacing_x = 20;\nhole_spacing_y = 20;\nedge_margin = 10;\n\n// Rib parameters\nrib_height = 12;\nrib_width = 3;\nnum_ribs = 3;\n\n// Gusset parameters\ngusset_size = 15;\ngusset_thickness = 4;\n\n// Mounting boss parameters\nboss_diameter = 12;\nboss_height = 8;\n\nmodule base_plate() {\n    // Main flat plate\n    difference() {\n        cube([plate_length, plate_width, plate_thickness], center=true);\n        \n        // Grid of mounting holes\n        for(x = [-plate_length/2 + edge_margin : hole_spacing_x : plate_length/2 - edge_margin]) {\n            for(y = [-plate_width/2 + edge_margin : hole_spacing_y : plate_width/2 - edge_margin]) {\n                translate([x, y, -plate_thickness/2 - 1])\n                    cylinder(h=plate_thickness+2, d=hole_diameter, $fn=32);\n            }\n        }\n    }\n}\n\nmodule structural_ribs() {\n    // Longitudinal ribs along X axis\n    for(i = [1:num_ribs-1]) {\n        x_pos = -plate_length/2 + edge_margin + i * ((plate_length - 2*edge_margin)/(num_ribs-1));\n        translate([x_pos, 0, plate_thickness/2])\n            cube([rib_width, plate_width - 2*edge_margin, rib_height], center=true);\n    }\n    \n    // Transverse ribs along Y axis\n    for(i = [1:2]) {\n        y_pos = -plate_width/2 + edge_margin + i * ((plate_width - 2*edge_margin)/3);\n        translate([0, y_pos, plate_thickness/2])\n            cube([plate_length - 2*edge_margin, rib_width, rib_height], center=true);\n    }\n}\n\nmodule corner_gussets() {\n    // Corner reinforcement gussets\n    for(x_sign = [-1, 1]) {\n        for(y_sign = [-1, 1]) {\n            translate([x_sign * (plate_length/2 - gusset_size/2), \n                      y_sign * (plate_width/2 - gusset_size/2), \n                      plate_thickness/2])\n                cube([gusset_size, gusset_size, gusset_thickness], center=true);\n        }\n    }\n}\n\nmodule mounting_bosses() {\n    // Raised mounting bosses at corners\n    boss_positions = [\n        [-plate_length/2 + 15, -plate_width/2 + 15],\n        [plate_length/2 - 15, -plate_width/2 + 15],\n        [-plate_length/2 + 15, plate_width/2 - 15],\n        [plate_length/2 - 15, plate_width/2 - 15]\n    ];\n    \n    for(pos = boss_positions) {\n        translate([pos[0], pos[1], plate_thickness/2 + boss_height/2])\n            cylinder(h=boss_height, d=boss_diameter, $fn=32);\n    }\n}\n\nmodule lightening_holes() {\n    // Weight reduction holes between ribs\n    difference() {\n        union();\n        \n        for(x = [-plate_length/2 + edge_margin + hole_spacing_x : hole_spacing_x : plate_length/2 - edge_margin - hole_spacing_x]) {\n            for(y = [-plate_width/2 + edge_margin + hole_spacing_y : hole_spacing_y : plate_width/2 - edge_margin - hole_spacing_y]) {\n                translate([x, y, 0])\n                    cylinder(h=plate_thickness+1, d=5, $fn=32);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_plate();\n    \n    translate([0, 0, 0])\n        structural_ribs();\n    \n    translate([0, 0, 0])\n        corner_gussets();\n    \n    translate([0, 0, 0])\n        mounting_bosses();\n    \n    translate([0, 0, plate_thickness/2])\n        lightening_holes();\n}",
    "renders": true
  },
  {
    "mechanical_component": "web",
    "openscad_code": "// Parameters for realistic web mechanical_component (spider web frame)\nweb_diameter = 120;           // Overall web diameter in mm\nweb_thickness = 2;           // Thickness of web strands\nhub_size = 15;              // Central hub diameter\nnum_radials = 16;           // Number of radial strands\nnum_circles = 8;            // Number of concentric circles\nspoke_thickness = 2.5;      // Thickness of radial spokes\njoint_size = 3.5;           // Size of connection joints\n\n// Main web structure\nmodule web_frame() {\n    // Central hub\n    difference() {\n        cylinder(h=web_thickness*2, d=hub_size, $fn=32);\n        translate([0, 0, -0.1])\n            cylinder(h=web_thickness*2.2, d=hub_size-4, $fn=32);\n    }\n    \n    // Radial spokes\n    for(i = [0:num_radials-1]) {\n        angle = i * 360 / num_radials;\n        rotate([0, 0, angle])\n            translate([hub_size/2, -spoke_thickness/2, 0])\n                cube([web_diameter/2-hub_size/2, spoke_thickness, web_thickness]);\n    }\n    \n    // Concentric circles\n    for(r = [1:num_circles]) {\n        radius = hub_size/2 + r * ((web_diameter/2 - hub_size/2) / num_circles);\n        hull() {\n            for(i = [0:num_radials-1]) {\n                angle = i * 360 / num_radials;\n                translate([radius * cos(angle), radius * sin(angle), web_thickness/2])\n                    sphere(d=joint_size, $fn=16);\n            }\n        }\n    }\n}\n\n// Structural reinforcement joints\nmodule reinforcement_joints() {\n    // Connect radial spokes to concentric circles\n    for(r = [1:num_circles]) {\n        for(i = [0:num_radials-1]) {\n            angle = i * 360 / num_radials;\n            radius = hub_size/2 + r * ((web_diameter/2 - hub_size/2) / num_circles);\n            translate([radius * cos(angle), radius * sin(angle), web_thickness/2])\n                sphere(d=joint_size+1, $fn=12);\n        }\n    }\n}\n\n// Mounting bracket for wall attachment\nmodule mounting_bracket() {\n    bracket_width = 20;\n    bracket_height = 30;\n    bracket_depth = 8;\n    \n    translate([0, web_diameter/2 + bracket_depth/2, web_thickness/2]) {\n        // Main bracket body\n        cube([bracket_width, bracket_depth, bracket_height], center=true);\n        \n        // Screw holes\n        translate([0, 0, bracket_height/3])\n            cylinder(h=bracket_depth+1, d=4, center=true, $fn=16);\n        translate([0, 0, -bracket_height/3])\n            cylinder(h=bracket_depth+1, d=4, center=true, $fn=16);\n            \n        // Reinforcement ribs\n        for(i = [-1:1:1]) {\n            translate([i * bracket_width/4, 0, 0])\n                cube([2, bracket_depth, bracket_height], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    web_frame();\n    reinforcement_joints();\n    mounting_bracket();\n}",
    "renders": true
  },
  {
    "mechanical_component": "flitch",
    "openscad_code": "// Flitch (timber beam with steel reinforcement) mechanical component\n// Designed for structural connection in timber framing\n\n// Basic dimensions\nflitch_length = 120;\nflitch_width = 60;\nflitch_height = 80;\nsteel_thickness = 6;\nbolt_diameter = 8;\nbolt_spacing = 30;\nwall_thickness = 2;\n\n// Main timber beam\nmodule timber_beam() {\n    difference() {\n        // Main timber block\n        cube([flitch_length, flitch_width, flitch_height]);\n        \n        // Chamfer edges slightly\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([flitch_length - 2*wall_thickness, flitch_width - 2*wall_thickness, flitch_height - 2*wall_thickness]);\n    }\n}\n\n// Steel flitch plate\nmodule steel_plate() {\n    // Central steel plate\n    translate([(flitch_length - steel_thickness)/2, 0, 0])\n        cube([steel_thickness, flitch_width, flitch_height]);\n    \n    // Add bolt holes along the plate\n    for (i = [0:floor(flitch_length/bolt_spacing) - 1]) {\n        translate([i * bolt_spacing + bolt_spacing, flitch_width/2, flitch_height/2])\n            rotate([90, 0, 0])\n                cylinder(h = steel_thickness + 2, d = bolt_diameter, $fn = 16);\n    }\n}\n\n// End plates for connection\nmodule end_plates() {\n    // Left end plate\n    translate([-wall_thickness, 0, 0])\n        cube([wall_thickness, flitch_width, flitch_height]);\n    \n    // Right end plate\n    translate([flitch_length, 0, 0])\n        cube([wall_thickness, flitch_width, flitch_height]);\n}\n\n// Bolt heads and nuts\nmodule bolt_assembly() {\n    for (i = [0:floor(flitch_length/bolt_spacing) - 1]) {\n        // Bolt head on one side\n        translate([i * bolt_spacing + bolt_spacing, wall_thickness/2, flitch_height/2])\n            rotate([90, 0, 0])\n                cylinder(h = 4, d = bolt_diameter * 1.6, $fn = 6);\n        \n        // Nut on other side\n        translate([i * bolt_spacing + bolt_spacing, flitch_width - wall_thickness/2, flitch_height/2])\n            rotate([90, 0, 0])\n                cylinder(h = 4, d = bolt_diameter * 1.6, $fn = 6);\n    }\n}\n\n// Support brackets\nmodule support_brackets() {\n    // Bottom support brackets\n    translate([flitch_length/4, -wall_thickness, -wall_thickness])\n        cube([flitch_length/2, wall_thickness * 2, wall_thickness]);\n    \n    translate([3*flitch_length/4, -wall_thickness, -wall_thickness])\n        cube([flitch_length/2, wall_thickness * 2, wall_thickness]);\n    \n    // Top support brackets\n    translate([flitch_length/4, -wall_thickness, flitch_height])\n        cube([flitch_length/2, wall_thickness * 2, wall_thickness]);\n    \n    translate([3*flitch_length/4, -wall_thickness, flitch_height])\n        cube([flitch_length/2, wall_thickness * 2, wall_thickness]);\n}\n\n// Assembly\nunion() {\n    // Main components\n    timber_beam();\n    steel_plate();\n    \n    // Connection hardware\n    end_plates();\n    bolt_assembly();\n    \n    // Structural supports\n    support_brackets();\n}",
    "renders": true
  },
  {
    "mechanical_component": "boss",
    "openscad_code": "// Boss - Executive Office Chair\n// Overall height: ~110mm, seat width: ~60mm, base diameter: ~50mm\n// Wall thickness: 2mm throughout for 3D printing\n\n$fn = 36; // Smooth curves\n\nmodule caster_wheel() {\n    // 8mm diameter wheel with 2mm thick rim\n    rotate([90,0,0]) \n    difference() {\n        cylinder(h=8, d=8, center=true);        // wheel\n        cylinder(h=9, d=4, center=true);        // axle hole\n    }\n}\n\nmodule five_star_base() {\n    // 50mm diameter base with 5 casters\n    difference() {\n        cylinder(h=4, d=50);                    // base disc\n        cylinder(h=5, d=6);                     // center hole for gas spring\n    }\n    \n    // 5 arms with casters\n    for(i=[0:4]) {\n        rotate([0,0,i*72]) {\n            translate([20,0,2]) \n                cube([25,10,4], center=true);   // arm\n            translate([42.5,0,0]) \n                caster_wheel();                 // caster at end\n        }\n    }\n}\n\nmodule gas_spring() {\n    // 25mm high gas spring cylinder\n    difference() {\n        cylinder(h=25, d=10);                   // outer cylinder\n        cylinder(h=26, d=6);                    // inner hole\n    }\n}\n\nmodule seat_cushion() {\n    // 60x50mm seat with 8mm thickness and rounded edges\n    difference() {\n        minkowski() {\n            cube([60,50,8], center=true);       // base cushion\n            sphere(d=4);                        // rounded edges\n        }\n        translate([0,0,-5]) \n            cube([56,46,10], center=true);      // hollow interior\n    }\n}\n\nmodule backrest() {\n    // 70mm tall backrest with lumbar curve\n    difference() {\n        // Main backrest shape\n        hull() {\n            translate([0,25,35]) \n                sphere(d=4);                    // top curve\n            translate([0,-25,35]) \n                sphere(d=4);\n            translate([0,25,0]) \n                sphere(d=4);\n            translate([0,-25,0]) \n                sphere(d=4);\n        }\n        \n        // Hollow back\n        translate([0,0,17.5]) \n            scale([0.8,0.8,0.8]) \n            cube([50,40,35], center=true);\n    }\n}\n\nmodule armrest() {\n    // L-shaped armrest with 2mm wall thickness\n    union() {\n        // Vertical support\n        translate([-30,-27,4]) \n            cube([4,4,20]);\n        \n        // Horizontal pad\n        translate([-32,-27,24]) \n            cube([8,30,4]);\n    }\n}\n\n// Assembly\nunion() {\n    // Base assembly\n    five_star_base();\n    \n    translate([0,0,4]) gas_spring();\n    \n    // Seat assembly\n    translate([0,0,29]) {\n        rotate([0,10,0]) {                      // seat tilt\n            seat_cushion();\n            \n            // Backrest support post\n            translate([0,0,8]) \n                cylinder(h=30, d=6);\n            \n            // Backrest\n            translate([0,0,38]) \n                rotate([5,0,0]) backrest();\n            \n            // Armrests\n            armrest();\n            mirror([1,0,0]) armrest();\n        }\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "disc",
    "openscad_code": "// OpenSCAD code for a realistic medium-complexity disc mechanical_component (compact side table)\n// Overall diameter: 100 mm, height: 45 mm\n// 3D-print friendly: no steep overhangs, 2 mm wall thickness\n\n// ------------------------------\n// Parameters\n// ------------------------------\ndia_top = 100;          // top disc diameter\ndia_base = 85;          // base disc diameter\nheight = 45;            // total height\nwall = 2;               // wall thickness\nseg = 48;               // cylinder segments for smooth curves\nbolt_d = 4;             // bolt hole diameter\nbolt_holes = 6;         // number of bolt holes around rim\n\n// ------------------------------\n// Modules\n// ------------------------------\n\n// Cylindrical shell helper\nmodule hollow_cylinder(d_outer, d_inner, h, center = false) {\n    difference() {\n        cylinder(h = h, d = d_outer, $fn = seg, center = center);\n        cylinder(h = h + 0.2, d = d_inner, $fn = seg, center = center);\n    }\n}\n\n// Radial bolt holes\nmodule bolt_holes_array(d, h) {\n    for (i = [0 : bolt_holes - 1]) {\n        angle = i * 360 / bolt_holes;\n        rotate([0, 0, angle])\n            translate([d / 2, 0, -h / 2])\n                cylinder(h = h + 0.2, d = bolt_d, $fn = 16);\n    }\n}\n\n// Top disc with slight taper\nmodule top_disc() {\n    difference() {\n        // main disc\n        cylinder(h = wall, d1 = dia_top, d2 = dia_top - 2, $fn = seg);\n        // underside cavity\n        cylinder(h = wall + 0.2, d = dia_top - 2 * wall, $fn = seg);\n        // bolt holes\n        bolt_holes_array(dia_top - wall, wall);\n    }\n}\n\n// Central support tube\nmodule support_tube() {\n    hollow_cylinder(\n        d_outer = dia_top * 0.55,\n        d_inner = dia_top * 0.55 - 2 * wall,\n        h = height - 2 * wall\n    );\n}\n\n// Base disc with foot ring\nmodule base_disc() {\n    difference() {\n        // main base\n        cylinder(h = wall, d = dia_base, $fn = seg);\n        // underside cavity\n        cylinder(h = wall + 0.2, d = dia_base - 2 * wall, $fn = seg);\n        // central hole\n        cylinder(h = wall + 0.2, d = dia_base * 0.4, $fn = seg);\n        // bolt holes\n        bolt_holes_array(dia_base - wall, wall);\n    }\n}\n\n// Reinforcing ribs inside support tube\nmodule ribs() {\n    rib_h = height - 2 * wall;\n    rib_w = 1.5;\n    rib_l = (dia_top * 0.55 - 2 * wall) / 2 - 1;\n    for (i = [0 : 3]) {\n        rotate([0, 0, i * 90])\n            translate([0, -rib_w / 2, 0])\n                cube([rib_l, rib_w, rib_h], center = false);\n    }\n}\n\n// ------------------------------\n// Assembly\n// ------------------------------\ndifference() {\n    union() {\n        // Top disc\n        translate([0, 0, height - wall])\n            top_disc();\n\n        // Support tube\n        translate([0, 0, wall])\n            support_tube();\n\n        // Base disc\n        base_disc();\n\n        // Internal ribs\n        translate([0, 0, wall])\n            ribs();\n    }\n\n    // Remove central through-hole for optional fastening rod\n    cylinder(h = height + 0.2, d = 8, $fn = 24);\n}",
    "renders": true
  },
  {
    "mechanical_component": "fin",
    "openscad_code": "// Realistic fin mechanical component - medium complexity\n// 3D printable fin with structural elements and mounting features\n\n$fn = 32;  // Smooth curves for 3D printing\n\nmodule fin_base() {\n    // Main fin body - streamlined shape\n    difference() {\n        // Tapered fin body\n        hull() {\n            // Leading edge\n            translate([0, -25, 0])\n                scale([1, 0.3, 1])\n                sphere(d=20);\n            // Trailing edge\n            translate([0, 25, 0])\n                scale([0.3, 1, 0.8])\n                sphere(d=15);\n        }\n        \n        // Hollow interior for weight reduction\n        translate([0, 5, -2])\n            scale([0.8, 0.9, 0.9])\n            cube([15, 40, 10], center=true);\n    }\n}\n\nmodule fin_root() {\n    // Root mounting interface\n    translate([0, -30, -5])\n        difference() {\n            // Base plate\n            cube([30, 12, 3], center=true);\n            \n            // Mounting holes\n            for(x = [-10, 0, 10])\n                translate([x, -27, -3.5])\n                    cylinder(h=6, d=3.2);\n            \n            // Alignment slot\n            translate([0, -27, -4])\n                cube([4, 8, 2], center=true);\n        }\n}\n\nmodule reinforcing_ribs() {\n    // Structural ribs for strength\n    for(y = [-15, -5, 5, 15]) {\n        translate([0, y, 2])\n            difference() {\n                // Rib body\n                cube([20, 2, 6], center=true);\n                \n                // Lightening holes\n                translate([0, y, 2])\n                    cylinder(h=3, d=8);\n            }\n    }\n}\n\nmodule leading_edge_spar() {\n    // Main structural spar\n    translate([0, -25, 0])\n        rotate([90, 0, 0])\n            cylinder(h=50, d=4);\n}\n\nmodule trailing_edge_trim() {\n    // Trailing edge reinforcement\n    hull() {\n        translate([0, 25, -2])\n            sphere(d=3);\n        translate([0, 25, 2])\n            sphere(d=3);\n    }\n}\n\nmodule surface_features() {\n    // Realistic surface details\n    // Flow straighteners\n    for(y = [-20:10:20]) {\n        translate([0, y, 4])\n            cube([18, 0.5, 1], center=true);\n    }\n    \n    // Pressure equalization holes\n    for(x = [-7, 7])\n        translate([x, 10, 0])\n            rotate([0, 90, 0])\n                cylinder(h=20, d=1.5);\n}\n\n// Assembly\nunion() {\n    // Main components\n    fin_base();\n    fin_root();\n    reinforcing_ribs();\n    leading_edge_spar();\n    trailing_edge_trim();\n    surface_features();\n    \n    // Additional mounting features\n    // Side tabs\n    for(side = [-1, 1]) {\n        translate([side * 15, -20, 0])\n            cube([2, 8, 6], center=true);\n    }\n    \n    // Top alignment ridge\n    translate([0, 0, 5])\n        cube([25, 50, 1], center=true);\n}",
    "renders": true
  },
  {
    "mechanical_component": "ribbing",
    "openscad_code": "// Ribbing chair - realistic medium complexity\n// Overall dimensions: 400mm wide x 450mm deep x 830mm high\n\n// Chair frame module\nmodule chair_frame() {\n    // Seat frame - 2mm thick rectangular frame\n    difference() {\n        // Outer frame\n        cube([400, 450, 30], center=true);\n        // Inner cutout\n        translate([0, 0, 2])\n            cube([360, 410, 30], center=true);\n    }\n    \n    // Back frame\n    translate([0, -225, 400])\n        difference() {\n            cube([400, 30, 800], center=true);\n            translate([0, 0, 2])\n                cube([360, 30, 760], center=true);\n        }\n    \n    // Front legs\n    translate([-180, 180, -400])\n        cylinder(h=800, r=15, $fn=16);\n    translate([180, 180, -400])\n        cylinder(h=800, r=15, $fn=16);\n    \n    // Back legs\n    translate([-180, -180, -400])\n        cylinder(h=800, r=15, $fn=16);\n    translate([180, -180, -400])\n        cylinder(h=800, r=15, $fn=16);\n}\n\n// Ribbing pattern for seat\nmodule seat_ribs() {\n    for(i = [-180:20:180]) {\n        translate([i, 0, 15])\n            cube([15, 410, 2]);\n    }\n}\n\n// Ribbing pattern for backrest\nmodule backrest_ribs() {\n    for(i = [0:25:750]) {\n        translate([0, -210, 25 + i])\n            cube([360, 2, 15]);\n    }\n}\n\n// Support bars between legs\nmodule support_bars() {\n    // Front support\n    translate([0, 180, -200])\n        cube([360, 2, 15]);\n    \n    // Back support\n    translate([0, -180, -200])\n        cube([360, 2, 15]);\n    \n    // Side supports\n    translate([-180, 0, -200])\n        cube([2, 360, 15]);\n    translate([180, 0, -200])\n        cube([2, 360, 15]);\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    seat_ribs();\n    backrest_ribs();\n    support_bars();\n}",
    "renders": true
  },
  {
    "mechanical_component": "stay",
    "openscad_code": "// Stay - a support bracket for shelves or other furniture\n// Overall dimensions: 100mm tall x 80mm wide x 25mm deep\n$fn = 32;\n\n// Main body dimensions\nbody_w = 80;\nbody_h = 100;\nbody_t = 25;\n\n// Wall thickness\nwall = 2;\n\n// Screw hole parameters\nscrew_d = 5;\nscrew_h = 10;\nscrew_spacing = 60;\n\n// Rib parameters\nrib_t = 3;\nrib_h = 12;\n\n// Fillet radius\nr = 4;\n\nmodule main_body() {\n    // Outer shell\n    difference() {\n        // Main rectangular block with rounded edges\n        minkowski() {\n            cube([body_w - 2*r, body_h - 2*r, body_t], center = true);\n            sphere(r);\n        }\n        \n        // Hollow out center\n        translate([0, 0, -wall/2])\n            cube([body_w - 2*wall - 2*r, body_h - 2*wall - 2*r, body_t + 1], center = true);\n    }\n}\n\nmodule mounting_plate() {\n    // Plate that mounts to wall\n    translate([0, body_h/2 - 15, 0])\n    difference() {\n        // Plate body\n        cube([body_w - 10, 30, body_t], center = true);\n        \n        // Screw holes\n        for(x = [-screw_spacing/2, screw_spacing/2]) {\n            translate([x, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = body_t + 1, d = screw_d, center = true);\n        }\n        \n        // Counterbores\n        for(x = [-screw_spacing/2, screw_spacing/2]) {\n            translate([x, 0, body_t/2 - 1])\n                rotate([90, 0, 0])\n                    cylinder(h = 3, d = screw_d * 2, center = true);\n        }\n    }\n}\n\nmodule support_ribs() {\n    // Structural ribs for strength\n    rib_positions = [-30, -15, 0, 15, 30];\n    \n    for(x = rib_positions) {\n        translate([x, -body_h/2 + rib_h/2 + 10, 0])\n            difference() {\n                // Main rib\n                cube([rib_t, rib_h, body_t - wall], center = true);\n                \n                // Top rounding\n                translate([0, rib_h/2, 0])\n                    cube([rib_t, r, body_t - wall], center = true);\n                \n                // Bottom rounding\n                translate([0, -rib_h/2, 0])\n                    cube([rib_t, r, body_t - wall], center = true);\n            }\n    }\n}\n\nmodule shelf_support() {\n    // Horizontal support ledge\n    translate([0, -body_h/2 + 10, body_t/2 + 5])\n        cube([body_w - 20, 10, 5], center = true);\n    \n    // Support triangle\n    translate([0, -body_h/2 + 15, body_t/2 - 5])\n    rotate([0, 90, 0])\n    linear_extrude(height = body_w - 20, center = true)\n    polygon(points=[[0,0], [10,0], [10,10]]);\n}\n\n// Assemble the stay\nunion() {\n    main_body();\n    mounting_plate();\n    support_ribs();\n    shelf_support();\n}",
    "renders": true
  },
  {
    "mechanical_component": "bar",
    "openscad_code": "// Realistic 3D printable BAR (medium complexity)\n// Overall footprint: 100mm x 50mm x 110mm\n\n// Wall thickness constant\nwall = 2;\n\n// Main body module\nmodule bar_body() {\n    // Countertop slab\n    translate([0, 0, 105])\n        cube([100, 50, 5], center=true);\n    \n    // Front apron\n    translate([0, 27.5, 90])\n        cube([96, wall, 20], center=true);\n    \n    // Back apron\n    translate([0, -27.5, 90])\n        cube([96, wall, 20], center=true);\n    \n    // Left side panel\n    translate([-48.5, 0, 85])\n        cube([wall, 50, 40], center=true);\n    \n    // Right side panel\n    translate([48.5, 0, 85])\n        cube([wall, 50, 40], center=true);\n}\n\n// Shelf module\nmodule shelf() {\n    translate([0, 0, 65])\n        cube([90, 40, wall], center=true);\n}\n\n// Leg module with footrest\nmodule legs() {\n    // Left front leg\n    translate([-45, 22, 42.5])\n        cube([wall, wall, 85], center=true);\n    \n    // Right front leg\n    translate([45, 22, 42.5])\n        cube([wall, wall, 85], center=true);\n    \n    // Left back leg\n    translate([-45, -22, 42.5])\n        cube([wall, wall, 85], center=true);\n    \n    // Right back leg\n    translate([45, -22, 42.5])\n        cube([wall, wall, 85], center=true);\n    \n    // Footrest bar\n    translate([0, 0, 15])\n        cube([90, wall, wall], center=true);\n}\n\n// Bottle rail module\nmodule bottle_rail() {\n    // Left rail\n    translate([-45, 20, 87.5])\n        cube([wall, wall, 5], center=true);\n    \n    // Right rail\n    translate([45, 20, 87.5])\n        cube([wall, wall, 5], center=true);\n    \n    // Front rail\n    translate([0, 22.5, 87.5])\n        cube([86, wall, 5], center=true);\n}\n\n// Panel detail modules\nmodule panel_details() {\n    // Front panel grooves\n    for (x = [-30, -10, 10, 30]) {\n        translate([x, 27.5, 80])\n            cube([wall, wall+0.1, 20], center=true);\n    }\n    \n    // Side panel grooves\n    for (z = [70, 80, 90]) {\n        translate([-48.5, 0, z])\n            cube([wall, 45, wall], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    bar_body();\n    shelf();\n    legs();\n    bottle_rail();\n    panel_details();\n}",
    "renders": true
  },
  {
    "mechanical_component": "strip",
    "openscad_code": "// 3D-Printable Realistic Strip Mechanical Component – Medium Complexity\n// Overall size: 120 mm × 40 mm × 10 mm\n// 2 mm wall thickness, no overhangs, ready for FDM printing\n\n// ---------- Global parameters ----------\nwall = 2;           // uniform wall thickness\nL   = 120;          // total length\nW   = 40;           // total width  \nH   = 10;           // total height\nhole_d = 6;         // mounting-hole diameter\nhole_pitch = 30;    // spacing between holes\nslot_w = 8;         // T-slot width\nslot_h = 5;         // T-slot depth\nrib_pitch = 20;     // spacing between inner ribs\nfillet_r = 1.5;     // edge fillet radius (printed as chamfer)\n\n// ---------- Main body ----------\nmodule body() {\n    // outer shell\n    difference() {\n        hull() {\n            translate([0,0,0]) cube([L,W,H], center=true);\n        }\n        // hollow cavity\n        translate([0,0,-(H-wall)/2])\n            cube([L-2*wall, W-2*wall, H], center=true);\n    }\n}\n\n// ---------- Mounting holes ----------\nmodule holes() {\n    for (i = [-1, 0, 1]) {\n        translate([i*hole_pitch, 0, 0])\n            cylinder(h=H+2, d=hole_d, center=true, $fn=32);\n    }\n}\n\n// ---------- T-slots ----------\nmodule t_slots() {\n    // left slot\n    translate([0, (W-slot_w)/2, (H-slot_h)/2])\n        cube([L, slot_w, slot_h], center=true);\n    // right slot\n    translate([0, -(W-slot_w)/2, (H-slot_h)/2])\n        cube([L, slot_w, slot_h], center=true);\n}\n\n// ---------- Internal ribs ----------\nmodule ribs() {\n    for (x = [-L/2+rib_pitch : rib_pitch : L/2-rib_pitch]) {\n        translate([x, 0, 0])\n            cube([wall, W-2*wall, H-2*wall], center=true);\n    }\n}\n\n// ---------- Edge stiffening rails ----------\nmodule rails() {\n    // top rails\n    translate([0, (W-wall)/2, (-H+wall)/2])\n        cube([L, wall, wall], center=true);\n    translate([0, -(W-wall)/2, (-H+wall)/2])\n        cube([L, wall, wall], center=true);\n}\n\n// ---------- Chamfer/fillet helper ----------\nmodule chamfer_edges() {\n    // simple chamfer by subtracting corner wedges\n    for (dx = [-L/2, L/2]) {\n        for (dy = [-W/2, W/2]) {\n            for (dz = [-H/2, H/2]) {\n                translate([dx, dy, dz])\n                    mirror([dx<0?1:0, dy<0?1:0, dz<0?1:0])\n                    translate([0,0,0])\n                    rotate([0,45,0])\n                    cube([sqrt(2)*fillet_r, sqrt(2)*fillet_r, sqrt(2)*fillet_r]);\n            }\n        }\n    }\n}\n\n// ---------- Assembly ----------\ndifference() {\n    union() {\n        body();\n        rails();\n        ribs();\n    }\n    // mounting holes\n    holes();\n    // T-slots\n    t_slots();\n    // chamfer outer edges\n    chamfer_edges();\n}",
    "renders": true
  },
  {
    "mechanical_component": "cuff",
    "openscad_code": "// Cuff mechanical_component - Realistic Style, Medium Complexity\n// Dimensions: ~120mm width, ~80mm height, ~50mm depth\n\n// Parameters\nwall_thickness = 2;\ninner_radius = 30;\nouter_radius = 38;\nheight = 25;\npivot_radius = 6;\nbolt_radius = 2;\nslot_length = 15;\nslot_width = 4;\n\n// Main cuff body\nmodule cuff_body() {\n    difference() {\n        // Outer shell\n        cylinder(h=height, r=outer_radius, $fn=100);\n        \n        // Inner cavity\n        translate([0, 0, -0.1])\n            cylinder(h=height+0.2, r=inner_radius, $fn=100);\n        \n        // Gap for opening\n        translate([0, -outer_radius-1, -0.1])\n            cube([wall_thickness*2, outer_radius+2, height+0.2]);\n    }\n}\n\n// Hinge mechanism\nmodule hinge() {\n    translate([-outer_radius, 0, height/2]) {\n        rotate([90, 0, 0]) {\n            // Pin socket\n            difference() {\n                cylinder(h=height/2, r=pivot_radius+wall_thickness, $fn=20);\n                cylinder(h=height/2+0.2, r=pivot_radius, $fn=20);\n            }\n        }\n    }\n}\n\n// Mounting bracket\nmodule bracket() {\n    translate([outer_radius, 0, height/2]) {\n        difference() {\n            // Bracket body\n            cube([20, 12, wall_thickness*2], center=true);\n            \n            // Mounting holes\n            for(i=[-1, 1]) {\n                translate([5*i, 0, -wall_thickness-0.1])\n                    cylinder(h=wall_thickness*2+0.2, r=bolt_radius, $fn=16);\n            }\n        }\n        \n        // Reinforcement ribs\n        for(i=[-1, 1]) {\n            translate([10, 6*i, 0])\n                cube([10, wall_thickness, height], center=true);\n        }\n    }\n}\n\n// Adjustment slot\nmodule adjustment_slot() {\n    translate([0, -outer_radius-5, height/2]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cube([slot_length+wall_thickness*2, slot_width+wall_thickness*2, wall_thickness*2], center=true);\n                cube([slot_length+0.2, slot_width+0.2, wall_thickness*2+0.2], center=true);\n            }\n        }\n    }\n}\n\n// Structural ribs\nmodule ribs() {\n    for(angle=[0:60:359]) {\n        rotate([0, 0, angle]) {\n            translate([0, 0, height/2]) {\n                cube([wall_thickness, outer_radius-inner_radius, height], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main cuff\n    cuff_body();\n    \n    // Internal structure\n    ribs();\n    \n    // Mechanical components\n    hinge();\n    bracket();\n    adjustment_slot();\n    \n    // Bolt heads\n    translate([outer_radius+10, -4, height/2]) {\n        cylinder(h=wall_thickness, r=bolt_radius+1, $fn=6);\n    }\n    translate([outer_radius+10, 4, height/2]) {\n        cylinder(h=wall_thickness, r=bolt_radius+1, $fn=6);\n    }\n    \n    // Pivot pin\n    translate([-outer_radius, 0, height/2]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=height+wall_thickness*2, r=pivot_radius, $fn=16);\n        }\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "hoop",
    "openscad_code": "// Hoop mechanical_component - Realistic style with medium complexity\n// Overall dimensions: 120mm diameter, 20mm thickness\n\n// Parameters\nhoop_d = 120;\nhoop_t = 20;\nwall_t = 2;\nbolt_d = 4;\nbolt_h = 10;\nribs = 8;\n\n// Main hoop ring\nmodule hoop_ring() {\n    difference() {\n        // Outer torus\n        rotate_extrude(angle = 360, $fn = 64)\n            translate([hoop_d/2 - wall_t, 0, 0])\n                square([wall_t, hoop_t]);\n        \n        // Inner hollow\n        rotate_extrude(angle = 360, $fn = 64)\n            translate([hoop_d/2 - wall_t, 0, 0])\n                square([wall_t - 1, hoop_t - 2]);\n    }\n}\n\n// Structural ribs for reinforcement\nmodule support_ribs() {\n    for(i = [0:ribs-1]) {\n        rotate([0, 0, i * 360/ribs])\n            translate([hoop_d/2 - wall_t - 2, -wall_t/2, 0])\n                cube([4, wall_t, hoop_t], center = true);\n    }\n}\n\n// Mounting brackets\nmodule mounting_brackets() {\n    // Top bracket\n    translate([0, hoop_d/2, hoop_t/2])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d1 = 10, d2 = 6, $fn = 16);\n    \n    // Bottom bracket\n    translate([0, -hoop_d/2, hoop_t/2])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d1 = 10, d2 = 6, $fn = 16);\n    \n    // Bolt holes\n    translate([0, hoop_d/2 + 5, hoop_t/2])\n        rotate([90, 0, 0])\n            cylinder(h = 16, d = bolt_d, $fn = 16);\n    \n    translate([0, -hoop_d/2 - 5, hoop_t/2])\n        rotate([90, 0, 0])\n            cylinder(h = 16, d = bolt_d, $fn = 16);\n}\n\n// Surface texture rings\nmodule texture_rings() {\n    for(i = [0:3]) {\n        rotate_extrude(angle = 360, $fn = 64)\n            translate([hoop_d/2 - wall_t/2, 0, i * 5])\n                circle(d = 1);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    union() {\n        hoop_ring();\n        support_ribs();\n    }\n    \n    // Mounting hardware\n    difference() {\n        mounting_brackets();\n        // Remove material for weight reduction\n        translate([0, 0, -1])\n            cylinder(h = hoop_t + 2, d = hoop_d - 10, $fn = 64);\n    }\n    \n    // Surface details\n    texture_rings();\n}",
    "renders": true
  },
  {
    "mechanical_component": "collarette",
    "openscad_code": "// Collarette Mechanical Component - Realistic Style with Medium Complexity\n// Overall dimensions: 80mm diameter x 25mm height\n\n// Main parameters\nring_diameter = 80;\nring_height = 25;\nwall_thickness = 2;\nbolt_holes = 8;\nbolt_diameter = 5;\n\n// Main ring body\nmodule main_ring() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=ring_height, d=ring_diameter, $fn=100);\n        \n        // Hollow center\n        cylinder(h=ring_height + 1, d=ring_diameter - 2*wall_thickness, $fn=100);\n    }\n}\n\n// Top flange with bolt holes\nmodule top_flange() {\n    difference() {\n        // Flange base\n        cylinder(h=5, d=ring_diameter + 20, $fn=100);\n        \n        // Center hole\n        cylinder(h=6, d=ring_diameter - 2*wall_thickness, $fn=100);\n        \n        // Bolt holes\n        for(i=[0:bolt_holes-1]) {\n            rotate([0, 0, i*360/bolt_holes])\n                translate([ring_diameter/2 + 5, 0, -1])\n                    cylinder(h=7, d=bolt_diameter, $fn=32);\n        }\n    }\n}\n\n// Bottom mounting feet\nmodule mounting_feet() {\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([ring_diameter/2 - 5, 0, -2])\n                cube([15, 8, 4], center=true);\n    }\n}\n\n// Internal stiffening ribs\nmodule stiffening_ribs() {\n    for(i=[0:11]) {\n        rotate([0, 0, i*30]) {\n            translate([0, (ring_diameter - 2*wall_thickness)/2 - 2, ring_height/2])\n                cube([wall_thickness, 4, ring_height], center=true);\n        }\n    }\n}\n\n// Alignment pin holes\nmodule alignment_pins() {\n    for(i=[0:3]) {\n        rotate([0, 0, i*90 + 45])\n            translate([ring_diameter/2 - 10, 0, -1])\n                cylinder(h=ring_height + 2, d=3, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    main_ring();\n    \n    // Top flange\n    translate([0, 0, ring_height])\n        top_flange();\n    \n    // Mounting feet\n    mounting_feet();\n    \n    // Internal ribs\n    stiffening_ribs();\n    \n    // Alignment pin holes (cutouts)\n    difference() {\n        children();\n        alignment_pins();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "eyelet",
    "openscad_code": "// Realistic eyelet mechanical component\n// Overall dimensions: 30mm diameter, 25mm height, 2mm wall thickness\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main flange with mounting holes\nmodule flange() {\n    difference() {\n        // Main circular flange\n        cylinder(h = 4, d = 30, center = true);\n        \n        // Center hole for eyelet\n        cylinder(h = 5, d = 16, center = true);\n        \n        // Mounting holes - 4 holes at 90 degrees\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([12, 0, 0]) {\n                    cylinder(h = 5, d = 3.5, center = true);\n                }\n            }\n        }\n        \n        // Counterbores for mounting holes\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([12, 0, 2]) {\n                    cylinder(h = 2, d = 6, center = true);\n                }\n            }\n        }\n    }\n}\n\n// Reinforcement ribs under flange\nmodule ribs() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45]) {\n            translate([0, 0, -2]) {\n                cube([2, 8, 3], center = true);\n            }\n        }\n    }\n}\n\n// Main eyelet ring with smooth inner surface\nmodule eyelet_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h = 10, d = 16, center = true);\n        \n        // Inner hole with chamfer\n        cylinder(h = 12, d = 10, center = true);\n        \n        // Top chamfer\n        translate([0, 0, 4]) {\n            cylinder(h = 2, d1 = 10, d2 = 12, center = true);\n        }\n        \n        // Bottom chamfer\n        translate([0, 0, -4]) {\n            cylinder(h = 2, d1 = 12, d2 = 10, center = true);\n        }\n    }\n}\n\n// Structural web connecting ring to flange\nmodule web_support() {\n    difference() {\n        // Main web cylinder\n        cylinder(h = 11, d = 16, center = true);\n        \n        // Hollow center\n        cylinder(h = 12, d = 12, center = true);\n        \n        // Grooves for weight reduction and grip\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([7, 0, 0]) {\n                    cube([2, 1, 12], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Top lip for cable retention\nmodule retention_lip() {\n    translate([0, 0, 5.5]) {\n        difference() {\n            // Lip ring\n            cylinder(h = 2, d = 18, center = true);\n            \n            // Inner clearance\n            cylinder(h = 3, d = 12, center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base flange with mounting holes\n    flange();\n    \n    // Reinforcement ribs\n    ribs();\n    \n    // Web support structure\n    translate([0, 0, 7.5]) {\n        web_support();\n    }\n    \n    // Eyelet ring\n    translate([0, 0, 14.5]) {\n        eyelet_ring();\n    }\n    \n    // Retention lip\n    retention_lip();\n}",
    "renders": true
  },
  {
    "mechanical_component": "gudgeon",
    "openscad_code": "// Gudgeon (pintle hinge) – realistic medium-complexity 3D-printable model\n// Units: millimetres\n// Overall length ≈ 70 mm, pintle Ø 8 mm, eye Ø 28 mm, wall thickness 2 mm\n\n$fn = 36;               // Smooth curves for printing\n\n// Main dimensions\npintle_d   = 8;         // pintle pin diameter\npintle_l   = 30;        // pintle length\neye_d      = 28;        // eye outer diameter\neye_id     = eye_d - 4; // eye inner diameter (2 mm wall)\neye_l      = 25;        // eye axial length\nflange_w   = 40;        // mounting flange width\nflange_t   = 5;         // flange thickness\nhole_d     = 4.2;       // screw hole Ø (M4 clearance)\nhole_y_sep = 20;        // screw spacing along Y\nhole_x_sep = 20;        // screw spacing along X\n\nmodule pintle_pin() {\n    // Main cylindrical pin\n    cylinder(h = pintle_l, d = pintle_d);\n    \n    // Chamfered tip (avoid overhang)\n    translate([0,0,pintle_l])\n    cylinder(h = 2, d1 = pintle_d, d2 = pintle_d - 2);\n}\n\nmodule mounting_flange() {\n    difference() {\n        // Base plate\n        cube([flange_w, flange_t, eye_l], center = true);\n        \n        // Screw holes (4 holes, 2×2 grid)\n        for (x = [-hole_x_sep/2, hole_x_sep/2])\n            for (z = [-hole_y_sep/2, hole_y_sep/2])\n                translate([x, 0, z])\n                rotate([0,90,0])\n                cylinder(h = flange_t + 1, d = hole_d, center = true);\n    }\n}\n\nmodule eye_ring() {\n    difference() {\n        // Full eye outer\n        cylinder(h = eye_l, d = eye_d, center = true);\n        \n        // Remove centre\n        cylinder(h = eye_l + 2, d = eye_id, center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])  pintle_pin();\ntranslate([0, 0, 0])  eye_ring();\ntranslate([0, -flange_t/2 - eye_d/2, 0]) mounting_flange();",
    "renders": true
  },
  {
    "mechanical_component": "pintle",
    "openscad_code": "// realistic medium-complexity pintle for gate hinge\n// overall height ≈ 110 mm, largest diameter ≈ 30 mm\n// wall-thickness ≈ 2 mm, no overhangs > 45°\n\n$fn = 36;   // smooth curves\n\n// ---------- base plate ----------\nmodule base_plate() {\n    difference() {\n        // main plate\n        cube([50, 50, 6], center = true);\n        // lightening holes\n        for (x = [-18, 18])\n            for (y = [-18, 18])\n                translate([x, y, 2.9])\n                    cylinder(h = 6.1, r = 5, center = true);\n        // countersunk mounting holes Ø5 mm for M4 screws\n        for (x = [-22, 22])\n            for (y = [-22, 22])\n                translate([x, y, -0.1])\n                    cylinder(h = 8, r1 = 4, r2 = 2.5);\n    }\n}\n\n// ---------- gusset ribs ----------\nmodule ribs() {\n    for (angle = [0, 90, 180, 270])\n        rotate([0, 0, angle])\n            translate([0, 20, 3])\n                cube([5, 20, 6], center = true);\n}\n\n// ---------- pintle pin ----------\nmodule pin() {\n    union() {\n        // lower tapered neck\n        cylinder(h = 18, r1 = 6, r2 = 4.5);\n        // main shank Ø10 mm\n        translate([0, 0, 18])\n            cylinder(h = 75, r = 5);\n        // rounded tip\n        translate([0, 0, 93])\n            sphere(r = 5);\n    }\n}\n\n// ---------- grease groove ----------\nmodule grease_groove() {\n    translate([0, 0, 45])\n        difference() {\n            cylinder(h = 3, r = 5);\n            cylinder(h = 3.5, r = 3);\n        }\n}\n\n// ---------- final assembly ----------\nunion() {\n    // base & ribs\n    color(\"silver\")\n    union() {\n        base_plate();\n        ribs();\n    }\n    \n    // pintle pin centered on plate\n    color(\"gray\")\n    translate([0, 0, 6])\n        union() {\n            pin();\n            grease_groove();\n        }\n}",
    "renders": true
  },
  {
    "mechanical_component": "knuckle",
    "openscad_code": "// Knuckle Mechanical Component\n// A realistic knuckle joint for mechanical linkages\n// Size: ~100mm x 70mm x 50mm\n\n$fn = 50;\nwall_thickness = 2;\n\nmodule knuckle_body() {\n    // Main knuckle body with two mounting lugs\n    difference() {\n        // Main cylindrical body\n        union() {\n            cylinder(h=35, d=50);\n            \n            // Top mounting lug\n            translate([0, 25, 17.5]) \n                rotate([90, 0, 0])\n                    cylinder(h=20, d=15);\n            \n            // Bottom mounting lug\n            translate([0, -25, 17.5]) \n                rotate([90, 0, 0])\n                    cylinder(h=20, d=15);\n        }\n        \n        // Central bore\n        cylinder(h=40, d=25);\n        \n        // Top lug bore\n        translate([0, 25, 17.5]) \n            rotate([90, 0, 0])\n                cylinder(h=22, d=8);\n        \n        // Bottom lug bore\n        translate([0, -25, 17.5]) \n            rotate([90, 0, 0])\n                cylinder(h=22, d=8);\n    }\n}\n\nmodule forked_end() {\n    // Forked end with two prongs\n    difference() {\n        union() {\n            // Main fork body\n            translate([0, 0, -30])\n                cylinder(h=30, d=40);\n            \n            // Top prong\n            translate([0, 12, -30])\n                cube([40, 10, 30], center=true);\n            \n            // Bottom prong\n            translate([0, -12, -30])\n                cube([40, 10, 30], center=true);\n        }\n        \n        // Central bore through fork\n        translate([0, 0, -45])\n            rotate([0, 90, 0])\n                cylinder(h=50, d=8);\n        \n        // Gap between prongs\n        translate([0, 0, -15])\n            cube([40, 30, 30], center=true);\n    }\n}\n\nmodule reinforcement_ribs() {\n    // Structural reinforcement ribs\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([20, 0, 17.5])\n                cube([15, wall_thickness*2, 35], center=true);\n    }\n}\n\nmodule threaded_insert() {\n    // Threaded insert for pin retention\n    translate([0, 0, 17.5])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=10, d=12);\n                cylinder(h=12, d=6);\n            }\n}\n\n// Assembly\nunion() {\n    knuckle_body();\n    \n    forked_end();\n    \n    reinforcement_ribs();\n    \n    // Threaded inserts on mounting lugs\n    translate([0, 25, 17.5]) \n        rotate([90, 0, 0])\n            threaded_insert();\n    \n    translate([0, -25, 17.5]) \n        rotate([90, 0, 0])\n            threaded_insert();\n    \n    // Fillets for strength\n    translate([0, 0, 0])\n        cylinder(h=2, d=52);\n    \n    translate([0, 0, 35])\n        cylinder(h=2, d=52);\n}",
    "renders": true
  },
  {
    "mechanical_component": "catch",
    "openscad_code": "// OpenSCAD catch mechanism – medium complexity, realistic style\n// Overall length ~90 mm, width ~25 mm, height ~35 mm\n\n$fn = 32;\n\n// Wall / plate thickness\nt = 2;\n\n// Main hook body – curved claw shape\nmodule hook_body() {\n    difference() {\n        // Outer claw\n        rotate([0, 90, 0])\n            cylinder(h = 38, d1 = 22, d2 = 12, center = true);\n\n        // Inner relief\n        rotate([0, 90, 0])\n            cylinder(h = 42, d1 = 18, d2 = 8, center = true);\n\n        // Flat back\n        translate([-25, 0, 0])\n            cube([50, 50, 50], center = true);\n    }\n}\n\n// Mounting plate with countersunk holes\nmodule mount_plate() {\n    difference() {\n        // Base plate\n        translate([0, 0, -t/2])\n            cube([40, 25, t], center = true);\n\n        // Two counter-sunk screw holes\n        for (y = [-9, 9])\n            translate([0, y, -t/2])\n                rotate([90, 0, 0])\n                    cylinder(h = 25, d1 = 5, d2 = 2.5);\n    }\n}\n\n// Pivot pin – printed horizontally for strength\nmodule pivot_pin() {\n    translate([-10, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 30, d = 4, center = true);\n}\n\n// Spring perch cylinder\nmodule spring_perch() {\n    translate([-18, 0, 12])\n        cylinder(h = 8, d = 8, center = true);\n}\n\n// Reinforcing ribs on hook sides\nmodule ribs() {\n    for (side = [-1, 1]) {\n        translate([0, side * 11.5, 0])\n            cube([20, t, 20], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    hook_body();\n    mount_plate();\n    pivot_pin();\n    spring_perch();\n    ribs();\n}",
    "renders": true
  },
  {
    "mechanical_component": "eye",
    "openscad_code": "// Mechanical Eye Component - Realistic Style\n// Overall diameter: 60mm, wall thickness: 2mm\n\n$fn = 50;  // Smooth curves for 3D printing\n\nmodule eye_base() {\n    // Main spherical housing with flattened back for mounting\n    difference() {\n        sphere(d = 60);\n        translate([0, 0, -31]) cube([100, 100, 40], center = true);\n    }\n}\n\nmodule iris_assembly() {\n    // Iris mechanism - 6 curved blades\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([0, 0, 25]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h = 2, r1 = 20, r2 = 15);  // Blade\n                        translate([0, 0, -1]) cylinder(h = 4, r = 2);  // Pivot hole\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule lens() {\n    // Clear lens dome\n    translate([0, 0, 28]) scale([1, 1, 0.5]) sphere(d = 30);\n}\n\nmodule mounting_flange() {\n    // Rear mounting flange with 4 bolt holes\n    difference() {\n        translate([0, 0, -30]) cylinder(h = 5, r = 35);\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90 + 45]) {\n                translate([25, 0, -32]) cylinder(h = 7, r = 3);\n            }\n        }\n    }\n}\n\nmodule adjustment_ring() {\n    // Focus adjustment ring with knurling\n    translate([0, 0, -15]) difference() {\n        cylinder(h = 8, r = 32);\n        cylinder(h = 10, r = 30);\n    }\n    \n    // Knurling pattern\n    for(i = [0:35]) {\n        rotate([0, 0, i * 10]) {\n            translate([31, 0, -15]) cube([2, 1, 8]);\n        }\n    }\n}\n\nmodule internal_structures() {\n    // Internal support ribs\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([0, 0, -15]) {\n                cube([2, 25, 30], center = true);\n            }\n        }\n    }\n}\n\nmodule cable_management() {\n    // Cable entry port\n    translate([0, -32, -15]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 10, r1 = 5, r2 = 7);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    eye_base();\n    mounting_flange();\n    adjustment_ring();\n    \n    difference() {\n        union() {\n            lens();\n            iris_assembly();\n        }\n        \n        // Central viewing aperture\n        cylinder(h = 40, r = 8);\n    }\n    \n    internal_structures();\n    cable_management();\n}",
    "renders": true
  },
  {
    "mechanical_component": "block",
    "openscad_code": "// Block mechanical_component: Engine Mounting Bracket\n// Realistic style, medium complexity\n// Dimensions: 120mm x 80mm x 40mm\n\n$fn = 32;\n\n// Main bracket body\nmodule bracket_body() {\n    difference() {\n        // Base block\n        cube([120, 80, 40], center=true);\n        \n        // Center bore for shaft\n        translate([0, 0, 0])\n            cylinder(h=45, r=15, center=true);\n        \n        // Cable routing channels\n        translate([0, 35, 0])\n            cube([20, 10, 45], center=true);\n        translate([0, -35, 0])\n            cube([20, 10, 45], center=true);\n    }\n}\n\n// Mounting flanges\nmodule mounting_flanges() {\n    // Front flange\n    difference() {\n        translate([60, 0, 0])\n            cube([20, 80, 20], center=true);\n        \n        // Mounting holes\n        for(i = [-1, 1]) {\n            translate([70, i * 25, 0])\n                cylinder(h=25, r=4, center=true);\n        }\n    }\n    \n    // Rear flange\n    mirror([1, 0, 0]) mounting_flanges();\n}\n\n// Rib reinforcement\nmodule reinforcement_ribs() {\n    // Vertical ribs\n    for(x = [-40, -20, 0, 20, 40]) {\n        translate([x, 0, 0])\n            cube([4, 76, 38]);\n    }\n    \n    // Horizontal ribs\n    for(y = [-30, -15, 0, 15, 30]) {\n        translate([0, y, 0])\n            cube([116, 4, 38]);\n    }\n}\n\n// Gusset plates\nmodule gusset_plates() {\n    // Corner gussets\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * 55, y * 35, -20])\n                rotate([0, 0, 45])\n                cube([15, 15, 15], center=true);\n        }\n    }\n}\n\n// Threaded inserts\nmodule threaded_inserts() {\n    // Top inserts\n    for(pos = [[-40, -25], [-40, 25], [40, -25], [40, 25]]) {\n        translate([pos[0], pos[1], 20])\n            difference() {\n                cylinder(h=10, r=6);\n                cylinder(h=12, r=3);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    bracket_body();\n    mounting_flanges();\n    reinforcement_ribs();\n    gusset_plates();\n    threaded_inserts();\n}",
    "renders": true
  },
  {
    "mechanical_component": "pad",
    "openscad_code": "// Realistic medium-complexity pad (seat cushion / padded stool)\n// Overall size: 200 mm diameter, 90 mm height\n// 2 mm wall thickness, no overhangs, printable in one piece\n\n$fn = 50;                       // smooth curves\n\n// ---------- parameters ----------\ndia  = 200;                     // cushion diameter\nh    = 90;                      // total height\nfoamR = 8;                      // corner radius of foam core\nwall  = 2;                      // printable wall thickness\nboltD = 6;                      // bolt hole diameter\nlegH  = 70;                     // leg protrusion height\nlegR  = 8;                      // leg radius\nnuts  = 5;                      // bolts in a circle\n\n// ---------- main ----------\nunion() {\n    // 1. soft foam core (slightly rounded cylinder)\n    difference() {\n        translate([0,0,h/2])\n            minkowski() {\n                cylinder(h=h-foamR*2, d=dia-foamR*2, center=true);\n                sphere(foamR);\n            }\n        // hollow out printable void\n        translate([0,0,h/2+wall])\n            cylinder(h=h-wall*2, d=dia-wall*2, center=true);\n    }\n\n    // 2. rigid bottom disk with bolt pattern\n    difference() {\n        translate([0,0,wall/2])\n            cylinder(h=wall, d=dia, center=false);\n        // bolt holes for legs\n        for(i=[0:nuts-1])\n            rotate([0,0,i*360/nuts])\n                translate([(dia/2-legR*2), 0, -1])\n                    cylinder(h=wall+2, d=boltD, center=false);\n    }\n\n    // 3. four support legs (simple cylinders)\n    for(i=[0:3])\n        rotate([0,0,i*90])\n            translate([dia/2-legR*2, 0, -legH/2])\n                cylinder(h=legH, d=legR*2, center=true);\n}\n\n// 4. subtle top surface quilting pattern\nmodule stitchLine(len=20) {\n    cube([len, 1, 1], center=true);\n}\n\ntranslate([0,0,h-2])\ndifference() {\n    cylinder(h=2, d=dia, center=false);\n    cylinder(h=2, d=dia-wall*2, center=false);\n}\n\nfor(a=[0:30:150])\n    rotate([0,0,a])\n        translate([0, 0, h-1])\n            stitchLine(dia/2-wall*2);",
    "renders": true
  },
  {
    "mechanical_component": "foot",
    "openscad_code": "// Mechanical Component: Articulated Robot Foot\n// Realistic style, medium complexity\n// Designed for 3D printing with 2mm walls and no overhangs\n\n// Overall dimensions (footprint: 80mm x 120mm, height: 40mm)\n\nmodule foot_base() {\n    // Main foot platform with structural ribs\n    difference() {\n        // Base platform\n        translate([0, 0, 2]) {\n            cube([80, 120, 4], center=true);\n        }\n        \n        // Cable channel\n        translate([0, 0, 2]) {\n            cube([60, 100, 4.1], center=true);\n        }\n        \n        // Mounting holes (4 corners)\n        for(x = [-30, 30])\n            for(y = [-50, 50])\n                translate([x, y, 0]) {\n                    cylinder(h=5, d=4, center=true);\n                }\n    }\n}\n\nmodule heel_section() {\n    // Heel shock absorber mount\n    translate([0, 45, 0]) {\n        difference() {\n            // Main heel block\n            cube([50, 30, 20], center=true);\n            \n            // Shock absorber cylinder\n            translate([0, 0, 10]) {\n                cylinder(h=15, d=20, center=true);\n            }\n            \n            // Mounting holes for shock\n            translate([0, 0, 10]) {\n                cylinder(h=16, d=6, center=true);\n            }\n        }\n    }\n}\n\nmodule toe_section() {\n    // Toe section with ball joint mount\n    translate([0, -45, 0]) {\n        difference() {\n            // Toe platform\n            cube([70, 30, 15], center=true);\n            \n            // Ball joint socket (hemisphere)\n            translate([0, 0, 7.5]) {\n                sphere(d=25);\n            }\n            \n            // Socket access hole\n            translate([0, 0, 0]) {\n                cylinder(h=8, d=20, center=true);\n            }\n        }\n        \n        // Toe reinforcement ribs\n        for(offset = [-25, 0, 25]) {\n            translate([offset, -45, 0]) {\n                cube([3, 30, 12], center=true);\n            }\n        }\n    }\n}\n\nmodule arch_support() {\n    // Central arch structure\n    translate([0, 0, 10]) {\n        difference() {\n            // Main arch beam\n            cube([60, 80, 8], center=true);\n            \n            // Weight reduction cutouts\n            for(x = [-20, 0, 20])\n                for(y = [-20, 0, 20])\n                    translate([x, y, 10]) {\n                        cube([15, 15, 9], center=true);\n                    }\n        }\n        \n        // Side support walls\n        translate([-35, 0, 5]) {\n            cube([2, 80, 10], center=true);\n        }\n        translate([35, 0, 5]) {\n            cube([2, 80, 10], center=true);\n        }\n    }\n}\n\nmodule ankle_mount() {\n    // Ankle joint mounting bracket\n    translate([0, 0, 25]) {\n        difference() {\n            // Main bracket body\n            cube([40, 40, 15], center=true);\n            \n            // Central hole for ankle pivot\n            translate([0, 0, 32.5]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=42, d=12, center=true);\n                }\n            }\n            \n            // Keyway slot\n            translate([6, 0, 32.5]) {\n                rotate([90, 0, 0]) {\n                    cube([6, 42, 4], center=true);\n                }\n            }\n        }\n        \n        // Reinforcement gussets\n        for(angle = [0:90:270]) {\n            rotate([0, 0, angle]) {\n                translate([25, 0, 17.5]) {\n                    cube([15, 3, 10], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule tread_pattern() {\n    // Tread pattern on bottom surface\n    translate([0, 0, 0.5]) {\n        // Hexagonal tread pattern\n        for(x = [-30:15:30])\n            for(y = [-50:15:50]) {\n                translate([x, y, 0]) {\n                    cylinder(h=1, d=10, $fn=6);\n                }\n            }\n    }\n}\n\n// Assemble all components\nunion() {\n    foot_base();\n    heel_section();\n    toe_section();\n    arch_support();\n    ankle_mount();\n    tread_pattern();\n}",
    "renders": true
  },
  {
    "mechanical_component": "base",
    "openscad_code": "// Base mechanical component - Motor Mount Plate\n// A realistic motor mount plate with mounting holes, ribs, and cable management\n\n// Overall dimensions\nplate_length = 100;\nplate_width = 80;\nplate_thickness = 4;\n\n// Motor mount boss dimensions\nboss_diameter = 22;\nboss_height = 8;\nboss_hole_diameter = 6;\n\n// Mounting holes pattern\nmount_hole_diameter = 4.2;\nmount_hole_spacing = 60;\n\n// Structural ribs\nrib_height = 12;\nrib_thickness = 2;\nnum_ribs = 3;\n\n// Cable management\ncable_tie_width = 4;\ncable_tie_height = 2;\ncable_tie_radius = 15;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main plate\nmodule main_plate() {\n    difference() {\n        // Base plate\n        cube([plate_length, plate_width, plate_thickness], center=true);\n        \n        // Motor mount hole\n        translate([0, 0, -1])\n            cylinder(h=plate_thickness+2, d=boss_hole_diameter, center=true);\n    }\n}\n\n// Motor mount boss with four mounting holes\nmodule motor_boss() {\n    difference() {\n        union() {\n            // Main boss\n            cylinder(h=boss_height, d=boss_diameter);\n            \n            // Add fillet for strength\n            translate([0, 0, boss_height-2])\n                cylinder(h=2, d=boss_diameter+2, d1=boss_diameter);\n        }\n        \n        // Four motor mounting holes on boss\n        for(angle = [0:90:270]) {\n            rotate([0, 0, angle])\n                translate([boss_diameter/2 - 4, 0, -1])\n                    cylinder(h=boss_height+2, d=3.2);\n        }\n    }\n}\n\n// Structural ribs for strength\nmodule ribs() {\n    rib_spacing = plate_length / (num_ribs + 1);\n    \n    for(i = [1:num_ribs]) {\n        translate([-plate_length/2 + i * rib_spacing, 0, plate_thickness/2])\n            cube([rib_thickness, plate_width, rib_height], center=true);\n    }\n}\n\n// Corner mounting holes\nmodule mounting_holes() {\n    // Calculate positions\n    hole_offset_x = mount_hole_spacing/2;\n    hole_offset_y = plate_width/2 - 10;\n    \n    // Four corner holes\n    for(x = [-hole_offset_x, hole_offset_x]) {\n        for(y = [-hole_offset_y, hole_offset_y]) {\n            translate([x, y, -1])\n                cylinder(h=plate_thickness+2, d=mount_hole_diameter);\n        }\n    }\n}\n\n// Cable management loop\nmodule cable_loop() {\n    translate([plate_length/2 - 15, 0, plate_thickness/2 + rib_height/2])\n        rotate([0, 90, 0])\n            difference() {\n                // Outer loop\n                cylinder(h=cable_tie_width, r=cable_tie_radius);\n                \n                // Inner cutout\n                cylinder(h=cable_tie_width+1, r=cable_tie_radius-3);\n                \n                // Bottom opening\n                translate([0, 0, -cable_tie_width/2-1])\n                    cube([cable_tie_radius*2, 3, cable_tie_width+2], center=true);\n            }\n}\n\n// Assembly\nunion() {\n    // Main plate\n    main_plate();\n    \n    // Mounting holes through plate\n    mounting_holes();\n    \n    // Motor boss on top\n    translate([0, 0, plate_thickness/2 + boss_height/2])\n        motor_boss();\n    \n    // Structural ribs\n    ribs();\n    \n    // Cable management\n    cable_loop();\n}",
    "renders": true
  },
  {
    "mechanical_component": "rest",
    "openscad_code": "// Adjustable laptop/keyboard rest – printable in one piece\n// 120 mm wide × 60 mm deep × 35 mm high when folded\n// 3 mm wall thickness everywhere, all angles ≤ 45° for support-free printing\n\n$fn = 36;\n\n// overall footprint\nwidth = 120;\ndepth = 60;\nheight = 35;\n\n// material thickness\nwall = 2.5;\n\n// utility – rounded box with optional bottom cut-out\nmodule box_rounded(l, w, h, r, cut=false) {\n    hull() {\n        for(dx=[0,l], dy=[0,w])\n            translate([dx,dy,0])\n                cylinder(h=h, r=r, center=true);\n    }\n    if(cut) translate([l/2,w/2,-h/2-0.1])\n        cube([l+2, w+2, h+0.2], center=true);\n}\n\n// main body – a shallow tray with rounded edges\nmodule tray() {\n    difference() {\n        box_rounded(width, depth, height, 4, cut=true);\n        translate([0,0,wall]) box_rounded(width-wall*2, depth-wall*2, height, 4, cut=true);\n    }\n}\n\n// top anti-slip ribs\nmodule ribs() {\n    for(y=[10:10:depth-10])\n        translate([width/2-5, y, height-1])\n            cube([10, 1, 1.5], center=true);\n}\n\n// rear hinge blocks (simple pin-less living hinge concept)\nmodule hinges() {\n    for(x=[-width/2+15, width/2-15])\n        translate([x, -depth/2+5, 0])\n            cylinder(h=10, r=4, center=false);\n}\n\n// front support legs (fold out)\nmodule legs() {\n    for(x=[-width/2+20, width/2-20]) {\n        translate([x, depth/2-5, 0])\n            rotate([0,0,-90])\n                cylinder(h=20, r=3, center=false);\n    }\n}\n\n// central cable notch\nmodule cable_notch() {\n    translate([0, depth/2, 0])\n        rotate([90,0,0])\n            cylinder(h=15, r=4, center=false);\n}\n\n// assembly\nunion() {\n    tray();\n    ribs();\n    hinges();\n    legs();\n    cable_notch();\n}",
    "renders": true
  },
  {
    "mechanical_component": "stand",
    "openscad_code": "// Adjustable monitor stand\n// Overall dimensions: 200mm wide x 120mm deep x 80mm tall\n// Includes height-adjustable posts, cable cutouts, and rubber feet\n\n$fn = 40;\n\n// Main platform\nmodule platform() {\n    difference() {\n        // Base plate\n        translate([0, 0, -2])\n            cube([200, 120, 4], center = true);\n        \n        // Cable cutout at back\n        translate([0, 50, 0])\n            cube([180, 10, 5], center = true);\n        \n        // Front bevel\n        translate([0, -61, -1])\n            rotate([90, 0, 0])\n                cylinder(h = 2, r1 = 100, r2 = 95);\n    }\n    \n    // Front lip\n    translate([0, -60, 1])\n        cube([200, 2, 2], center = true);\n}\n\n// Height adjustment posts\nmodule posts() {\n    for(x = [-80, 80]) {\n        // Outer sleeve\n        translate([x, 0, 40])\n            cylinder(h = 80, d = 20);\n        \n        // Inner post\n        translate([x, 0, 10])\n            cylinder(h = 70, d = 16);\n        \n        // Adjustment holes\n        for(h = [20:20:60]) {\n            translate([x + 10, 0, h])\n                rotate([0, 90, 0])\n                    cylinder(h = 5, d = 4);\n        }\n    }\n}\n\n// Support arms\nmodule support_arms() {\n    for(x = [-80, 80]) {\n        // Main arm\n        translate([x, 0, 78])\n            rotate([90, 0, 0])\n                cylinder(h = 60, d1 = 18, d2 = 12);\n        \n        // Gusset\n        translate([x, 30, 58])\n            rotate([0, 0, -45])\n                cube([4, 30, 4], center = true);\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    for(x = [-85, 85])\n        for(y = [-45, 45]) {\n            translate([x, y, -3])\n                cylinder(h = 3, d = 12);\n        }\n}\n\n// Assembly\nplatform();\nposts();\nsupport_arms();\nfeet();",
    "renders": true
  },
  {
    "mechanical_component": "saddle",
    "openscad_code": "// Saddle mechanical component - realistic style with medium complexity\n// Overall dimensions: ~120mm length, 90mm width, 40mm height\n\n// Main saddle body with ergonomic curves\nmodule saddle_body() {\n    difference() {\n        // Main seat shape\n        translate([0, 0, 20])\n        scale([1, 0.7, 0.4])\n        sphere(d = 100, $fn = 64);\n        \n        // Cut bottom flat\n        translate([0, 0, -10])\n        cube([200, 200, 50], center = true);\n        \n        // Cut front nose taper\n        translate([45, 0, 20])\n        rotate([0, 0, 30])\n        cube([60, 80, 50], center = true);\n        \n        // Cut rear taper\n        translate([-45, 0, 20])\n        rotate([0, 0, -30])\n        cube([60, 80, 50], center = true);\n    }\n}\n\n// Internal support structure\nmodule support_frame() {\n    // Front support arch\n    translate([30, 0, 5])\n    rotate([0, 90, 0])\n    cylinder(h = 70, r1 = 25, r2 = 20, $fn = 32);\n    \n    // Rear support arch\n    translate([-30, 0, 5])\n    rotate([0, 90, 0])\n    cylinder(h = 70, r1 = 30, r2 = 25, $fn = 32);\n    \n    // Side rails\n    for(y = [-30, 30]) {\n        translate([0, y, 10])\n        cube([100, 3, 15], center = true);\n    }\n}\n\n// Mounting rail system\nmodule mounting_rail() {\n    // Main rail tube\n    translate([0, 0, 2])\n    rotate([90, 0, 0])\n    cylinder(h = 90, r = 5, $fn = 32);\n    \n    // Mounting holes\n    for(x = [-35, -15, 5, 25]) {\n        translate([x, 0, 2])\n        rotate([90, 0, 0])\n        cylinder(h = 12, r = 2.5, $fn = 16);\n    }\n    \n    // Reinforcement plates\n    for(x = [-35, -15, 5, 25]) {\n        translate([x, 0, 2])\n        cube([8, 15, 2], center = true);\n    }\n}\n\n// Cushion padding layer\nmodule cushion_layer() {\n    difference() {\n        // Main cushion\n        translate([0, 0, 35])\n        scale([1, 0.75, 0.2])\n        sphere(d = 95, $fn = 64);\n        \n        // Relief cuts for comfort\n        for(x = [-20, 0, 20]) {\n            translate([x, 0, 30])\n            rotate([0, 0, 45])\n            cube([10, 60, 10], center = true);\n        }\n    }\n}\n\n// Side reinforcement panels\nmodule side_panels() {\n    for(y = [-35, 35]) {\n        translate([0, y, 20])\n        rotate([0, 90, 0])\n        cylinder(h = 3, r = 45, $fn = 32);\n        \n        // Panel holes for ventilation\n        for(z = [30, 15, 0]) {\n            translate([0, y, z])\n            rotate([0, 90, 0])\n            cylinder(h = 5, r = 8, $fn = 16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    saddle_body();\n    support_frame();\n    mounting_rail();\n    \n    // Additional layers\n    translate([0, 0, 3])\n    cushion_layer();\n    \n    side_panels();\n}",
    "renders": true
  },
  {
    "mechanical_component": "cradle",
    "openscad_code": "// Cradle mechanical component - realistic style with medium complexity\n// Overall dimensions: 120mm x 70mm x 85mm (L x W x H)\n\n// Constants\nwall_thickness = 2;\nbase_thickness = 3;\npost_diameter = 6;\nrail_diameter = 4;\nrocker_radius = 40;\nrocker_thickness = 3;\nbasket_length = 100;\nbasket_width = 60;\nbasket_height = 35;\n\n// Main cradle assembly\nmodule cradle() {\n    // Base frame\n    translate([0, 0, base_thickness/2])\n        base_frame();\n    \n    // Vertical posts (4 corners)\n    for(x = [-basket_length/2 + wall_thickness, basket_length/2 - wall_thickness])\n        for(y = [-basket_width/2 + wall_thickness, basket_width/2 - wall_thickness])\n            translate([x, y, base_thickness + basket_height/2])\n                cylinder(h=basket_height, d=post_diameter, $fn=16);\n    \n    // Top rails connecting posts\n    for(y = [-basket_width/2 + wall_thickness, basket_width/2 - wall_thickness]) {\n        translate([0, y, base_thickness + basket_height])\n            rotate([90, 0, 0])\n                cylinder(h=basket_length - 2*wall_thickness, d=rail_diameter, $fn=16);\n    }\n    \n    // Side rails\n    for(x = [-basket_length/2 + wall_thickness, basket_length/2 - wall_thickness]) {\n        translate([x, 0, base_thickness + basket_height])\n            rotate([90, 90, 0])\n                cylinder(h=basket_width - 2*wall_thickness, d=rail_diameter, $fn=16);\n    }\n    \n    // Rocking base\n    translate([0, 0, -rocker_radius + base_thickness/2])\n        rocking_base();\n    \n    // Basket bed\n    translate([0, 0, base_thickness + wall_thickness])\n        basket_bed();\n    \n    // Decorative end caps\n    for(x = [-basket_length/2 + wall_thickness, basket_length/2 - wall_thickness]) {\n        translate([x, basket_width/2 - wall_thickness, base_thickness + basket_height])\n            sphere(d=rail_diameter + 2, $fn=16);\n        translate([x, -basket_width/2 + wall_thickness, base_thickness + basket_height])\n            sphere(d=rail_diameter + 2, $fn=16);\n    }\n}\n\n// Base frame structure\nmodule base_frame() {\n    difference() {\n        // Main base\n        cube([basket_length + 20, basket_width + 20, base_thickness], center=true);\n        \n        // Lightening holes\n        for(x = [-basket_length/4, basket_length/4])\n            for(y = [-basket_width/4, basket_width/4])\n                translate([x, y, -base_thickness/2])\n                    cylinder(h=base_thickness + 1, d=8, $fn=8);\n    }\n}\n\n// Rocking base with curved runners\nmodule rocking_base() {\n    difference() {\n        // Main rockers\n        union() {\n            // Left rocker\n            translate([-basket_length/2 - 10, -basket_width/2 - 10, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=basket_length + 20, d=rocker_radius*2, $fn=50);\n            \n            // Right rocker\n            translate([-basket_length/2 - 10, basket_width/2 + 10, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=basket_length + 20, d=rocker_radius*2, $fn=50);\n            \n            // Connecting beams\n            for(x = [-basket_length/4, 0, basket_length/4])\n                translate([x, 0, -rocker_radius + rocker_thickness])\n                    cube([rocker_thickness, basket_width + 22, rocker_thickness*2], center=true);\n        }\n        \n        // Remove bottom half\n        translate([0, 0, -rocker_radius - 1])\n            cube([200, 200, rocker_radius], center=true);\n    }\n}\n\n// Basket bed with mattress support\nmodule basket_bed() {\n    difference() {\n        // Main bed frame\n        cube([basket_length - wall_thickness*2, basket_width - wall_thickness*2, wall_thickness], center=true);\n        \n        // Ventilation slots\n        for(i = [-2:2])\n            translate([i * 15, 0, -wall_thickness/2 - 0.5])\n                cube([8, basket_width - wall_thickness*2 - 10, wall_thickness + 1], center=true);\n    }\n    \n    // Mattress detail\n    translate([0, 0, wall_thickness + 2])\n        cube([basket_length - wall_thickness*2 - 4, basket_width - wall_thickness*2 - 4, 4], center=true);\n}\n\n// Assembly\ncradle();",
    "renders": true
  },
  {
    "mechanical_component": "sling",
    "openscad_code": "// Realistic Sling Mechanical Component - Medium Complexity\n// A functional sling with adjustable straps and mounting hardware\n\n$fa = 2;\n$fs = 0.5;\n\n// Main parameters\nstrap_width = 12;\nstrap_thickness = 2;\nsling_length = 120;\nsling_width = 30;\nbuckle_size = 15;\nmounting_hole_diameter = 6;\n\n// Main sling body\nmodule sling_body() {\n    // Central load-bearing strap\n    translate([0, 0, 0])\n        difference() {\n            // Main strap\n            cube([sling_length, strap_width, strap_thickness], center=true);\n            \n            // Reinforcement holes along the strap\n            for(i = [-2:2]) {\n                translate([i * 25, 0, 0])\n                    cylinder(h=strap_thickness + 1, d=4, center=true, $fn=16);\n            }\n        }\n    \n    // Side reinforcements\n    for(side = [-1, 1]) {\n        translate([0, side * (strap_width/2 + 2), 0])\n            cube([sling_length, 4, strap_thickness + 1], center=true);\n    }\n}\n\n// Adjustable buckle assembly\nmodule buckle() {\n    // Main buckle frame\n    difference() {\n        // Outer frame\n        cube([buckle_size, buckle_size * 1.2, 4], center=true);\n        \n        // Central bar\n        translate([0, 0, 0])\n            cube([buckle_size * 0.8, 3, 6], center=true);\n        \n        // Strap passage holes\n        translate([0, buckle_size * 0.3, 0])\n            cube([buckle_size - 3, buckle_size * 0.4, 6], center=true);\n        \n        translate([0, -buckle_size * 0.3, 0])\n            cube([buckle_size - 3, buckle_size * 0.4, 6], center=true);\n    }\n    \n    // Buckle pin\n    translate([buckle_size/2 - 2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=buckle_size * 1.2, d=2, center=true, $fn=12);\n}\n\n// Mounting bracket\nmodule mounting_bracket() {\n    // Bracket base\n    difference() {\n        cube([20, 15, 5], center=true);\n        \n        // Mounting hole\n        translate([0, 0, -1])\n            cylinder(h=7, d=mounting_hole_diameter, center=true, $fn=16);\n    }\n    \n    // Strap loop\n    translate([0, 0, 3])\n        difference() {\n            cylinder(h=8, d=10, center=true, $fn=32);\n            cylinder(h=9, d=6, center=true, $fn=32);\n        }\n}\n\n// Rivet detail\nmodule rivet() {\n    cylinder(h=3, d=4, center=true, $fn=12);\n    translate([0, 0, 1.5])\n        sphere(d=4.5, $fn=12);\n}\n\n// Assemble the sling\nmodule complete_sling() {\n    // Main sling body\n    sling_body();\n    \n    // Buckle at one end\n    translate([sling_length/2 + buckle_size/2 + 5, 0, 0])\n        buckle();\n    \n    // Mounting bracket at other end\n    translate([-sling_length/2 - 10, 0, 0])\n        mounting_bracket();\n    \n    // Reinforcement rivets\n    for(pos = [-sling_length/2 + 10, -sling_length/2 + 30, sling_length/2 - 30, sling_length/2 - 10]) {\n        translate([pos, strap_width/2, strap_thickness/2 + 1])\n            rivet();\n        translate([pos, -strap_width/2, strap_thickness/2 + 1])\n            rivet();\n    }\n    \n    // Secondary support strap\n    translate([0, 0, strap_thickness + 2])\n        rotate([90, 0, 0])\n            cube([sling_length * 0.6, 8, 2], center=true);\n}\n\n// Render the complete sling\ncomplete_sling();",
    "renders": true
  },
  {
    "mechanical_component": "tiebar",
    "openscad_code": "// Tiebar Mechanical Component - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm length x 20mm width x 12mm height\n\n$fn = 32;\n\n// Main body parameters\nbody_length = 120;\nbody_width = 20;\nbody_height = 8;\nwall_thickness = 2;\n\n// End bracket parameters\nbracket_length = 25;\nbracket_width = 20;\nbracket_height = 12;\nbracket_hole_diameter = 8;\nbracket_hole_depth = 8;\n\n// Gusset parameters\ngusset_height = 4;\ngusset_width = 3;\n\n// Rib parameters\nrib_count = 3;\nrib_width = 1.5;\nrib_height = 2;\n\n// Center slot parameters\nslot_width = 6;\nslot_length = 60;\nslot_depth = 2;\n\nmodule end_bracket(position) {\n    translate(position) {\n        difference() {\n            // Main bracket block\n            cube([bracket_length, bracket_width, bracket_height], center = true);\n            \n            // Mounting hole\n            translate([0, 0, bracket_height/2 - bracket_hole_depth/2])\n                rotate([0, 90, 0])\n                    cylinder(h = bracket_length + 2, d = bracket_hole_diameter, center = true);\n            \n            // Chamfer edges\n            translate([bracket_length/2 - 2, 0, bracket_height/2 - 2])\n                rotate([0, 0, 45])\n                    cube([2.8, bracket_width + 1, 2.8], center = true);\n            \n            translate([-bracket_length/2 + 2, 0, bracket_height/2 - 2])\n                rotate([0, 0, -45])\n                    cube([2.8, bracket_width + 1, 2.8], center = true);\n        }\n    }\n}\n\nmodule gusset(position, rotation) {\n    translate(position)\n        rotate([0, 0, rotation]) {\n            linear_extrude(height = gusset_height, convexity = 10) {\n                polygon(points = [\n                    [-gusset_width/2, -body_width/2],\n                    [gusset_width/2, -body_width/2],\n                    [gusset_width/2, body_width/2],\n                    [-gusset_width/2, body_width/2]\n                ]);\n            }\n        }\n}\n\nmodule rib(position) {\n    translate(position) {\n        cube([rib_width, body_width, rib_height], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Central body with slot\n    difference() {\n        // Main body\n        cube([body_length, body_width, body_height], center = true);\n        \n        // Center slot for weight reduction\n        translate([0, 0, body_height/2 - slot_depth/2])\n            cube([slot_length, slot_width, slot_depth], center = true);\n        \n        // Rounded edges on top\n        translate([0, 0, body_height/2 - 1])\n            minkowski() {\n                cube([body_length - 4, body_width - 4, 1], center = true);\n                cylinder(h = 0.1, r = 1);\n            }\n    }\n    \n    // End brackets\n    end_bracket([body_length/2 + bracket_length/2 - 2, 0, 0]);\n    end_bracket([-body_length/2 - bracket_length/2 + 2, 0, 0]);\n    \n    // Gussets for reinforcement\n    gusset([body_length/2 - 15, 0, body_height/2 + gusset_height/2], 0);\n    gusset([-body_length/2 + 15, 0, body_height/2 + gusset_height/2], 0);\n    \n    // Structural ribs\n    for (i = [-1:1]) {\n        rib([i * (body_length/4), 0, body_height/2 + rib_height/2]);\n    }\n    \n    // Additional reinforcement blocks\n    translate([body_length/2 - 10, 0, -body_height/2 - 1])\n        cube([20, body_width - 4, 2], center = true);\n    \n    translate([-body_length/2 + 10, 0, -body_height/2 - 1])\n        cube([20, body_width - 4, 2], center = true);\n}",
    "renders": true
  },
  {
    "mechanical_component": "strapping",
    "openscad_code": "// Strapping Mechanical Component - Cable Tie Anchor Block\n// Realistic medium-complexity 3D printable strapping component\n\n// Main parameters\nblock_width = 40;\nblock_height = 25;\nblock_length = 80;\nwall_thickness = 2.5;\nstrap_width = 12;\nstrap_thickness = 1.5;\nhole_diameter = 6;\nmounting_hole_diameter = 4.5;\nmounting_hole_depth = 8;\n\n// Main anchor block\nmodule anchor_block() {\n    difference() {\n        // Main body\n        cube([block_length, block_width, block_height], center=true);\n        \n        // Strap channel\n        translate([0, 0, block_height/2 - strap_thickness/2])\n            cube([block_length - 10, strap_width + 2, strap_thickness + 0.5], center=true);\n        \n        // Strap entry/exit holes\n        translate([-block_length/2 + 5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=strap_width + 2, d=strap_thickness + 2, center=true);\n        \n        translate([block_length/2 - 5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=strap_width + 2, d=strap_thickness + 2, center=true);\n        \n        // Mounting holes\n        translate([-block_length/3, -block_width/3, -block_height/2])\n            cylinder(h=mounting_hole_depth + 1, d=mounting_hole_diameter);\n        \n        translate([block_length/3, -block_width/3, -block_height/2])\n            cylinder(h=mounting_hole_depth + 1, d=mounting_hole_diameter);\n        \n        translate([-block_length/3, block_width/3, -block_height/2])\n            cylinder(h=mounting_hole_depth + 1, d=mounting_hole_diameter);\n        \n        translate([block_length/3, block_width/3, -block_height/2])\n            cylinder(h=mounting_hole_depth + 1, d=mounting_hole_diameter);\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    for(i = [-1, 1]) {\n        translate([i * block_length/4, 0, 0])\n            rotate([0, 90, 0])\n                difference() {\n                    cube([block_height, wall_thickness * 3, block_width/2], center=true);\n                    translate([0, 0, -block_width/4])\n                        cube([block_height, wall_thickness * 3 + 1, wall_thickness], center=true);\n                }\n    }\n}\n\n// Strap retention teeth\nmodule retention_teeth() {\n    for(i = [0:3]) {\n        translate([-block_length/2 + 15 + i * 3, 0, block_height/2 - strap_thickness - 1])\n            cube([2, strap_width - 2, 1.5], center=true);\n    }\n}\n\n// Edge fillets (approximated with cylinders)\nmodule edge_fillets() {\n    // Top edges\n    for(x = [-block_length/2 + wall_thickness, block_length/2 - wall_thickness]) {\n        for(y = [-block_width/2 + wall_thickness, block_width/2 - wall_thickness]) {\n            translate([x, y, block_height/2])\n                cylinder(h=wall_thickness * 2, d=wall_thickness * 2, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    anchor_block();\n    ribs();\n    retention_teeth();\n    \n    // Add edge reinforcements\n    difference() {\n        translate([0, 0, 0])\n            cube([block_length + 0.5, block_width + 0.5, block_height + 0.5], center=true);\n        translate([0, 0, 0])\n            cube([block_length - wall_thickness, block_width - wall_thickness, block_height - wall_thickness], center=true);\n    }\n}\n\n// Add label area\ntranslate([0, block_width/2 + wall_thickness/2, 0])\n    cube([block_length/3, wall_thickness, block_height/3], center=true);",
    "renders": true
  },
  {
    "mechanical_component": "lacing",
    "openscad_code": "// Lacing mechanical_component - Shoe with realistic medium complexity\n// Overall dimensions: ~120mm x 45mm x 50mm\n\n// Shoe sole module\nmodule sole() {\n    difference() {\n        // Main sole body\n        hull() {\n            translate([-5, 0, 0]) cube([130, 42, 10]);\n            translate([5, 0, 5]) cube([110, 38, 8]);\n        }\n        \n        // Tread pattern grooves\n        for(i = [0:5]) {\n            translate([15 + i * 18, 5, 0]) \n                cube([3, 32, 12]);\n        }\n    }\n}\n\n// Shoe upper module\nmodule upper() {\n    difference() {\n        union() {\n            // Main upper body\n            hull() {\n                translate([0, 0, 10]) cube([120, 40, 25]);\n                translate([10, 0, 35]) cube([100, 35, 15]);\n            }\n            \n            // Toe cap reinforcement\n            translate([110, 20, 20]) \n                rotate([0, 90, 0]) \n                cylinder(h=25, r1=20, r2=15);\n            \n            // Heel counter\n            translate([0, 20, 20]) \n                rotate([0, 90, 0]) \n                cylinder(h=25, r1=15, r2=10);\n        }\n        \n        // Eyelets cutouts\n        for(side = [-1, 1]) {\n            for(i = [0:5]) {\n                translate([20 + i * 15, 20 + side * 15, 25]) \n                    rotate([90, 0, 0]) \n                    cylinder(h=5, r=2.5);\n            }\n        }\n    }\n}\n\n// Lacing eyelets module\nmodule eyelets() {\n    for(side = [-1, 1]) {\n        for(i = [0:5]) {\n            translate([20 + i * 15, 20 + side * 15, 27]) \n                rotate([90, 0, 0]) \n                cylinder(h=3, r=3);\n        }\n    }\n}\n\n// Laces module\nmodule laces() {\n    color(\"brown\")\n    for(side = [-1, 1]) {\n        // Main lace segments\n        for(i = [0:4]) {\n            translate([27.5 + i * 15, 20 + side * 10, 27]) \n                rotate([0, 0, side * 30]) \n                cube([15, 2, 2]);\n        }\n        \n        // Crossover lacing\n        for(i = [0:4]) {\n            translate([27.5 + i * 15, 20 - side * 5, 27]) \n                rotate([0, 0, side * -30]) \n                cube([15, 2, 2]);\n        }\n    }\n    \n    // Lace ends\n    translate([10, 20, 27]) \n        rotate([90, 0, 0]) \n        cylinder(h=15, r=1.5);\n    translate([110, 20, 27]) \n        rotate([90, 0, 0]) \n        cylinder(h=15, r=1.5);\n}\n\n// Tongue module\nmodule tongue() {\n    translate([60, 20, 25]) \n        rotate([15, 0, 0]) \n        cube([50, 20, 3]);\n}\n\n// Assembly\nunion() {\n    sole();\n    upper();\n    eyelets();\n    tongue();\n    laces();\n}",
    "renders": true
  },
  {
    "mechanical_component": "mesh",
    "openscad_code": "// Mesh Office Chair with Structural Frame\n// Overall dimensions: 500mm height x 450mm width x 450mm depth\n\n// Parameters\nseat_height = 450;\nback_height = 500;\nseat_width = 450;\nseat_depth = 450;\nback_width = 450;\nmesh_thickness = 2;\ntube_diameter = 20;\nbase_diameter = 350;\n\n// Main chair module\nmodule office_chair() {\n    // Seat mesh surface\n    translate([0, 0, seat_height])\n        seat_mesh();\n    \n    // Backrest mesh surface\n    translate([0, -seat_depth/2, seat_height + back_height/2])\n        rotate([90, 0, 0])\n            back_mesh();\n    \n    // Structural frame\n    frame();\n    \n    // Base support\n    base_support();\n}\n\n// Mesh pattern for seat\nmodule seat_mesh() {\n    difference() {\n        // Base seat shape\n        cube([seat_width, seat_depth, mesh_thickness], center=true);\n        \n        // Create mesh holes\n        for (x = [-seat_width/2 + 20 : 40 : seat_width/2 - 20]) {\n            for (y = [-seat_depth/2 + 20 : 40 : seat_depth/2 - 20]) {\n                translate([x, y, 0])\n                    cube([25, 25, mesh_thickness + 1], center=true);\n            }\n        }\n        \n        // Rounded edges\n        translate([0, 0, -mesh_thickness/2])\n            cylinder(h=mesh_thickness+1, r=seat_width/2, center=true);\n    }\n}\n\n// Mesh pattern for backrest\nmodule back_mesh() {\n    difference() {\n        // Base backrest shape\n        cube([back_width, back_height, mesh_thickness], center=true);\n        \n        // Create mesh holes\n        for (x = [-back_width/2 + 20 : 40 : back_width/2 - 20]) {\n            for (y = [-back_height/2 + 20 : 40 : back_height/2 - 20]) {\n                translate([x, y, 0])\n                    cube([25, 25, mesh_thickness + 1], center=true);\n            }\n        }\n        \n        // Tapered top\n        translate([0, back_height/2 - 20, 0])\n            cube([back_width - 100, 40, mesh_thickness + 1], center=true);\n    }\n}\n\n// Structural frame\nmodule frame() {\n    // Seat frame\n    translate([0, 0, seat_height - mesh_thickness/2])\n        seat_frame();\n    \n    // Backrest frame\n    translate([0, -seat_depth/2, seat_height + back_height/2])\n        rotate([90, 0, 0])\n            back_frame();\n    \n    // Support legs\n    legs();\n}\n\n// Seat frame structure\nmodule seat_frame() {\n    // Front tube\n    translate([0, seat_depth/2, 0])\n        rotate([90, 0, 0])\n            cylinder(h=seat_width, r=tube_diameter/2, center=true);\n    \n    // Back tube\n    translate([0, -seat_depth/2, 0])\n        rotate([90, 0, 0])\n            cylinder(h=seat_width, r=tube_diameter/2, center=true);\n    \n    // Side tubes\n    translate([seat_width/2, 0, 0])\n        rotate([90, 90, 0])\n            cylinder(h=seat_depth, r=tube_diameter/2, center=true);\n    \n    translate([-seat_width/2, 0, 0])\n        rotate([90, 90, 0])\n            cylinder(h=seat_depth, r=tube_diameter/2, center=true);\n}\n\n// Backrest frame structure\nmodule back_frame() {\n    // Outer frame\n    difference() {\n        // Main frame shape\n        cube([back_width + tube_diameter, back_height + tube_diameter, tube_diameter], center=true);\n        \n        // Inner cutout for mesh\n        cube([back_width - tube_diameter, back_height - tube_diameter, tube_diameter + 1], center=true);\n    }\n}\n\n// Support legs and base\nmodule legs() {\n    // Central support column\n    translate([0, 0, seat_height/2])\n        cylinder(h=seat_height - tube_diameter, r=tube_diameter, center=true);\n    \n    // Legs to base\n    for (angle = [0 : 72 : 360]) {\n        rotate([0, 0, angle])\n            translate([0, base_diameter/2 - 50, seat_height/2 - tube_diameter])\n                rotate([90, 0, 0])\n                    cylinder(h=250, r=tube_diameter/2, center=true);\n    }\n}\n\n// Base support\nmodule base_support() {\n    // Central hub\n    translate([0, 0, 0])\n        cylinder(h=40, r=30, center=true);\n    \n    // Base legs\n    for (angle = [0 : 72 : 360]) {\n        rotate([0, 0, angle])\n            translate([0, base_diameter/2 - 25, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=50, r=tube_diameter/2, center=true);\n    }\n}\n\n// Render the chair\noffice_chair();",
    "renders": true
  },
  {
    "mechanical_component": "grid",
    "openscad_code": "// Realistic Grid-Style Storage Bench\n// Medium complexity OpenSCAD model with structural frame and grid pattern\n\n// Overall dimensions\nbench_length = 120;\nbench_width = 40;\nbench_height = 45;\nframe_thickness = 3;\ngrid_thickness = 2;\nleg_size = 4;\n\n// Module for bench frame\nmodule bench_frame() {\n    // Bottom frame rectangle\n    difference() {\n        // Outer frame\n        cube([bench_length, bench_width, frame_thickness], center=true);\n        \n        // Inner cutout\n        translate([0,0,-0.5])\n        cube([bench_length-2*frame_thickness, bench_width-2*frame_thickness, frame_thickness+1], center=true);\n    }\n    \n    // Side frame pieces\n    translate([bench_length/2-frame_thickness/2, 0, bench_height/2-frame_thickness/2])\n    cube([frame_thickness, bench_width, bench_height-frame_thickness], center=true);\n    \n    translate([-bench_length/2+frame_thickness/2, 0, bench_height/2-frame_thickness/2])\n    cube([frame_thickness, bench_width, bench_height-frame_thickness], center=true);\n    \n    // Front and back frame pieces\n    translate([0, bench_width/2-frame_thickness/2, bench_height/2-frame_thickness/2])\n    cube([bench_length, frame_thickness, bench_height-frame_thickness], center=true);\n    \n    translate([0, -bench_width/2+frame_thickness/2, bench_height/2-frame_thickness/2])\n    cube([bench_length, frame_thickness, bench_height-frame_thickness], center=true);\n}\n\n// Module for grid pattern\nmodule grid_pattern() {\n    grid_spacing = 8;\n    grid_height = bench_height - 2*frame_thickness - 2;\n    \n    // Vertical grid bars\n    for (x = [-bench_length/2+frame_thickness+4 : grid_spacing : bench_length/2-frame_thickness-4]) {\n        translate([x, 0, bench_height/2-frame_thickness-1])\n        cube([grid_thickness, bench_width-2*frame_thickness-2, grid_height], center=true);\n    }\n    \n    // Horizontal grid bars\n    for (y = [-bench_width/2+frame_thickness+4 : grid_spacing : bench_width/2-frame_thickness-4]) {\n        translate([0, y, bench_height/2-frame_thickness-1])\n        cube([bench_length-2*frame_thickness-2, grid_thickness, grid_height], center=true);\n    }\n}\n\n// Module for legs\nmodule legs() {\n    // Front left leg\n    translate([-bench_length/2+leg_size, bench_width/2-leg_size, -bench_height/2])\n    cube([leg_size, leg_size, bench_height], center=true);\n    \n    // Front right leg\n    translate([bench_length/2-leg_size, bench_width/2-leg_size, -bench_height/2])\n    cube([leg_size, leg_size, bench_height], center=true);\n    \n    // Back left leg\n    translate([-bench_length/2+leg_size, -bench_width/2+leg_size, -bench_height/2])\n    cube([leg_size, leg_size, bench_height], center=true);\n    \n    // Back right leg\n    translate([bench_length/2-leg_size, -bench_width/2+leg_size, -bench_height/2])\n    cube([leg_size, leg_size, bench_height], center=true);\n}\n\n// Module for support brackets\nmodule support_brackets() {\n    bracket_size = 6;\n    bracket_thickness = 2;\n    \n    // Front support brackets\n    translate([bench_length/4, bench_width/2-frame_thickness/2, 0])\n    rotate([90,0,0])\n    cube([bracket_size, bracket_thickness, bench_height/2], center=true);\n    \n    translate([-bench_length/4, bench_width/2-frame_thickness/2, 0])\n    rotate([90,0,0])\n    cube([bracket_size, bracket_thickness, bench_height/2], center=true);\n    \n    // Back support brackets\n    translate([bench_length/4, -bench_width/2+frame_thickness/2, 0])\n    rotate([90,0,0])\n    cube([bracket_size, bracket_thickness, bench_height/2], center=true);\n    \n    translate([-bench_length/4, -bench_width/2+frame_thickness/2, 0])\n    rotate([90,0,0])\n    cube([bracket_size, bracket_thickness, bench_height/2], center=true);\n}\n\n// Assembly\nunion() {\n    // Translate entire bench to sit on build plate\n    translate([0, 0, bench_height/2]) {\n        // Main bench structure\n        union() {\n            bench_frame();\n            grid_pattern();\n            legs();\n            support_brackets();\n        }\n        \n        // Top surface with slight overhang\n        translate([0, 0, bench_height-frame_thickness/2])\n        cube([bench_length+2, bench_width+2, frame_thickness], center=true);\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "grating",
    "openscad_code": "// Parameters\nwidth = 100;           // Overall width\ndepth = 60;            // Overall depth  \nheight = 5;            // Slat thickness\ngap = 4;               // Gap between slats\nslat_w = 6;            // Width of each slat\nframe_t = 3;           // Frame thickness\nleg_h = 25;            // Leg height\nleg_t = 4;             // Leg thickness\nbolt_r = 1.5;          // Bolt hole radius\nbolt_h = 10;           // Bolt hole depth\n\n// Calculate number of slats\nnum_slats = floor((width - 2*frame_t) / (slat_w + gap));\n\n// Main grating module\nmodule grating() {\n    difference() {\n        // Frame\n        union() {\n            // Outer frame\n            translate([0, 0, 0])\n                cube([width, depth, height]);\n            \n            // Inner cutout\n            translate([frame_t, frame_t, -1])\n                cube([width - 2*frame_t, depth - 2*frame_t, height + 2]);\n                \n            // Leg mounting blocks\n            translate([frame_t/2, frame_t/2, -frame_t])\n                cube([frame_t*2, frame_t*2, frame_t]);\n            translate([width - frame_t*2.5, frame_t/2, -frame_t])\n                cube([frame_t*2, frame_t*2, frame_t]);\n            translate([frame_t/2, depth - frame_t*2.5, -frame_t])\n                cube([frame_t*2, frame_t*2, frame_t]);\n            translate([width - frame_t*2.5, depth - frame_t*2.5, -frame_t])\n                cube([frame_t*2, frame_t*2, frame_t]);\n        }\n        \n        // Slat voids for weight reduction\n        for (i = [0:num_slats-1]) {\n            x_pos = frame_t + i*(slat_w + gap) + gap/2;\n            translate([x_pos, frame_t, height/2])\n                cube([slat_w, depth - 2*frame_t, height*0.8]);\n        }\n        \n        // Mounting holes in frame\n        for (x = [frame_t*1.5, width - frame_t*1.5]) {\n            for (y = [frame_t*1.5, depth - frame_t*1.5]) {\n                translate([x, y, -frame_t])\n                    cylinder(h=frame_t*2, r=bolt_r, $fn=16);\n            }\n        }\n    }\n    \n    // Add actual slats on top\n    for (i = [0:num_slats-1]) {\n        x_pos = frame_t + i*(slat_w + gap) + gap/2;\n        translate([x_pos, frame_t, 0])\n            cube([slat_w, depth - 2*frame_t, height]);\n    }\n    \n    // Add reinforcement ribs underneath\n    for (i = [1:3]) {\n        y_pos = frame_t + i*(depth - 2*frame_t)/4;\n        translate([frame_t, y_pos - 1, -height/2])\n            cube([width - 2*frame_t, 2, height/2]);\n    }\n}\n\n// Leg module\nmodule leg() {\n    difference() {\n        // Main leg\n        cube([leg_t, leg_t, leg_h]);\n        \n        // Lightening holes\n        translate([leg_t/2, leg_t/2, leg_h/2])\n            rotate([0, 90, 0])\n                cylinder(h=leg_t, r=leg_t/3, $fn=16);\n                \n        // Bottom foot pad\n        translate([-1, -1, -2])\n            cube([leg_t+2, leg_t+2, 2]);\n    }\n    \n    // Bolt hole\n    translate([leg_t/2, leg_t/2, leg_h - 5])\n        rotate([90, 0, 0])\n            cylinder(h=leg_t+2, r=bolt_r, $fn=16);\n}\n\n// Assembly\ngrating();\n\n// Add legs at corners\ntranslate([frame_t*1.5, frame_t*1.5, -leg_h])\n    leg();\ntranslate([width - frame_t*1.5 - leg_t, frame_t*1.5, -leg_h])\n    leg();\ntranslate([frame_t*1.5, depth - frame_t*1.5 - leg_t, -leg_h])\n    leg();\ntranslate([width - frame_t*1.5 - leg_t, depth - frame_t*1.5 - leg_t, -leg_h])\n    leg();",
    "renders": true
  },
  {
    "mechanical_component": "lattice",
    "openscad_code": "// Lattice Stool - Medium complexity realistic style\n// Dimensions: 300mm height, 350mm diameter seat\n// Wall thickness: 2mm throughout\n\n// Main module\nmodule lattice_stool() {\n    // Base ring structure\n    difference() {\n        cylinder(h=20, d=350, $fn=100);\n        translate([0,0,2]) cylinder(h=20, d=346, $fn=100);\n    }\n    \n    // Leg lattice structure\n    for (i=[0:35:360]) {\n        rotate([0,0,i]) lattice_leg();\n    }\n    \n    // Seat structure\n    translate([0,0,300]) seat_top();\n    \n    // Support rings between legs\n    translate([0,0,100]) support_ring(320);\n    translate([0,0,200]) support_ring(330);\n}\n\n// Lattice leg module\nmodule lattice_leg() {\n    translate([175/2-2, 0, 10]) {\n        // Main leg tube\n        difference() {\n            cylinder(h=280, d=12, $fn=20);\n            translate([0,0,2]) cylinder(h=276, d=8, $fn=20);\n        }\n        \n        // Lattice cross members\n        for (z=[0:30:270]) {\n            translate([0,0,z]) {\n                rotate([0,90,0]) {\n                    // Horizontal cross bar\n                    difference() {\n                        cube([20, 12, 4], center=true);\n                        cube([18, 8, 2], center=true);\n                    }\n                    \n                    // Diagonal braces\n                    translate([0,0,15]) rotate([45,0,0]) {\n                        difference() {\n                            cube([20, 12, 4], center=true);\n                            cube([18, 8, 2], center=true);\n                        }\n                    }\n                    translate([0,0,-15]) rotate([-45,0,0]) {\n                        difference() {\n                            cube([20, 12, 4], center=true);\n                            cube([18, 8, 2], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Support ring module\nmodule support_ring(diameter) {\n    difference() {\n        cylinder(h=15, d=diameter, $fn=100);\n        translate([0,0,2]) cylinder(h=15, d=diameter-4, $fn=100);\n    }\n    \n    // Connectors to legs\n    for (i=[0:35:360]) {\n        rotate([0,0,i]) {\n            translate([diameter/2-2, 0, 7.5]) {\n                difference() {\n                    cube([4, 12, 15], center=true);\n                    cube([2, 8, 15], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Seat top module\nmodule seat_top() {\n    // Main seat disk\n    difference() {\n        cylinder(h=15, d=350, $fn=100);\n        translate([0,0,2]) cylinder(h=15, d=346, $fn=100);\n    }\n    \n    // Seat surface pattern\n    for (r=[50:50:150]) {\n        difference() {\n            cylinder(h=3, d=r*2, $fn=100);\n            translate([0,0,1]) cylinder(h=3, d=r*2-4, $fn=100);\n        }\n    }\n    \n    // Leg connectors to seat\n    for (i=[0:35:360]) {\n        rotate([0,0,i]) {\n            translate([175-2, 0, 0]) {\n                difference() {\n                    cube([4, 12, 15], center=true);\n                    cube([2, 8, 15], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Generate the stool\nlattice_stool();",
    "renders": true
  },
  {
    "mechanical_component": "frame",
    "openscad_code": "// Modular 3D-printable mechanical frame (120 mm × 80 mm × 35 mm)\n// Designed for medium-complexity realistic appearance with 2 mm walls and no overhangs\n\n$fn = 32;           // Smooth curves for 3D printing\n\n// ---------- Parameter block ----------\nwall = 2;           // Uniform 2 mm wall thickness\nL = 120;            // Overall length\nW = 80;             // Overall width\nH = 35;             // Overall height\npost = 8;           // Corner post size\nrib = 4;            // Internal rib thickness\nbolt = 4;           // M4 clearance hole diameter\ncornerR = 3;        // External corner fillet radius\n\n// ---------- Helper modules ----------\nmodule roundedCube(s, r){\n    // Creates a cube with chamfered vertical edges for printability\n    hull(){\n        for(dx=[-1,1], dy=[-1,1])\n            translate([dx*(s.x/2-r), dy*(s.y/2-r), 0])\n                cylinder(r=r, h=s.z, center=true);\n    }\n}\n\nmodule cornerPost(x, y){\n    // Structural corner post with M4 through hole\n    difference(){\n        translate([x, y, H/2])\n            roundedCube([post, post, H], cornerR);\n        translate([x, y, 0])\n            cylinder(d=bolt, h=H+2, center=false);\n    }\n}\n\nmodule ribLong(dir){\n    // Longitudinal reinforcement rib\n    translate([0, dir*(W/2-wall-rib/2), H/2-wall/2])\n        cube([L-2*post, rib, H-2*wall], center=true);\n}\n\nmodule ribShort(dir){\n    // Transverse reinforcement rib\n    translate([dir*(L/2-wall-rib/2), 0, H/2-wall/2])\n        cube([rib, W-2*post, H-2*wall], center=true);\n}\n\nmodule crossBrace(){\n    // Diagonal bracing plate for torsional stiffness\n    difference(){\n        hull(){\n            translate([post/2, post/2, wall])\n                cube([0.1, 0.1, H-2*wall], center=true);\n            translate([L-post/2, W-post/2, wall])\n                cube([0.1, 0.1, H-2*wall], center=true);\n        }\n        // Cut slot to avoid print supports\n        translate([L/2, W/2, H/2])\n            cube([L, wall, H], center=true);\n    }\n}\n\n// ---------- Main frame assembly ----------\nunion(){\n    // Outer rectangular frame\n    difference(){\n        roundedCube([L, W, H], cornerR);\n        translate([0, 0, wall])\n            roundedCube([L-2*wall, W-2*wall, H+2], cornerR);\n    }\n\n    // Corner posts with bolt holes\n    for(x=[post/2, L-post/2])\n        for(y=[post/2, W-post/2])\n            cornerPost(x, y);\n\n    // Internal reinforcement ribs\n    ribLong(1);\n    ribLong(-1);\n    ribShort(1);\n    ribShort(-1);\n\n    // Central cross brace\n    crossBrace();\n}",
    "renders": true
  },
  {
    "mechanical_component": "chassis",
    "openscad_code": "// OpenSCAD Chassis Mechanical Component - Realistic Medium Complexity\n// 3D printable frame with structural ribs, mounting holes and cable guides\n\nmodule chassis_frame() {\n    // Main rectangular frame body\n    difference() {\n        // Outer shell - 2mm walls\n        cube([120, 80, 25], center=true);\n        \n        // Hollow interior\n        translate([0,0,-1])\n            cube([116, 76, 23], center=true);\n    }\n}\n\nmodule mounting_holes() {\n    // Corner mounting holes - M3 size\n    for(x=[-55, 55])\n        for(y=[-35, 35])\n            translate([x, y, 0])\n                cylinder(h=30, d=3.2, center=true, $fn=20);\n}\n\nmodule structural_ribs() {\n    // Internal reinforcing ribs\n    for(x=[-40, 0, 40]) {\n        translate([x, 0, 0])\n            cube([2, 76, 20], center=true);\n    }\n    \n    for(y=[-25, 0, 25]) {\n        translate([0, y, 0])\n            cube([116, 2, 20], center=true);\n    }\n}\n\nmodule cable_guides() {\n    // Cable management loops\n    for(pos=[-40, 0, 40]) {\n        translate([pos, 45, 0])\n            rotate([90,0,0])\n                difference() {\n                    // Guide post\n                    cylinder(h=15, d=6, center=true, $fn=16);\n                    \n                    // Cable channel\n                    translate([0,0,-2])\n                        cube([10, 3, 10], center=true);\n                }\n    }\n}\n\nmodule standoffs() {\n    // PCB standoffs - 5mm height\n    for(x=[-45, 45])\n        for(y=[-25, 25]) {\n            translate([x, y, -12.5])\n                cylinder(h=5, d=6, $fn=16);\n            \n            // M3 threaded insert hole\n            translate([x, y, -15])\n                cylinder(h=10, d=4.2, $fn=20);\n        }\n}\n\nmodule side_braces() {\n    // Side reinforcement brackets\n    for(side=[-1, 1]) {\n        translate([0, side*42, 0])\n            difference() {\n                // Bracket body\n                cube([110, 6, 15], center=true);\n                \n                // Lightening holes\n                for(x=[-40, 0, 40])\n                    translate([x, 0, 0])\n                        cylinder(h=10, d=8, center=true, $fn=20);\n            }\n    }\n}\n\n// Main assembly\nunion() {\n    chassis_frame();\n    structural_ribs();\n    side_braces();\n    \n    difference() {\n        union() {\n            cable_guides();\n            standoffs();\n        }\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "body",
    "openscad_code": "// Office Chair with adjustable height and swivel base\n// Realistic style, medium complexity\n\n$fn = 30;\nwall_thickness = 2;\nseat_width = 45;\nseat_depth = 40;\nback_height = 55;\nbase_diameter = 55;\ncushion_thickness = 8;\n\nmodule chair_base() {\n    // Central pole\n    cylinder(h=30, r1=4, r2=4);\n    \n    // 5-star base legs\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, 0, -5])\n        linear_extrude(height=5)\n        polygon(points=[[0,0], [20,2], [20,-2]]);\n    }\n    \n    // Wheels\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([18, 0, -8])\n        sphere(r=4);\n    }\n}\n\nmodule gas_lift() {\n    // Outer cylinder\n    cylinder(h=25, r1=5, r2=5);\n    \n    // Inner cylinder (visible part)\n    translate([0, 0, 25])\n    cylinder(h=15, r1=3.5, r2=3.5);\n}\n\nmodule seat_cushion() {\n    // Main seat block\n    translate([0, 0, cushion_thickness/2])\n    cube([seat_width, seat_depth, cushion_thickness], center=true);\n    \n    // Rounded edges\n    translate([0, 0, cushion_thickness/2])\n    minkowski() {\n        cube([seat_width-4, seat_depth-4, cushion_thickness-4], center=true);\n        sphere(r=2);\n    }\n}\n\nmodule backrest() {\n    // Main backrest panel\n    translate([0, -seat_depth/2 - 5, back_height/2 + cushion_thickness])\n    cube([seat_width - 10, wall_thickness, back_height], center=true);\n    \n    // Lumbar support curve\n    translate([0, -seat_depth/2 - 5, cushion_thickness + 15])\n    scale([1, 0.3, 1])\n    sphere(r=20);\n    \n    // Headrest\n    translate([0, -seat_depth/2 - 5, cushion_thickness + back_height + 10])\n    cube([25, 15, 15], center=true);\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-seat_width/2 - 5, 0, cushion_thickness + 5])\n    cube([wall_thickness, seat_depth/2, 20]);\n    \n    // Right armrest\n    translate([seat_width/2 + 5, 0, cushion_thickness + 5])\n    cube([wall_thickness, seat_depth/2, 20]);\n    \n    // Armrest pads\n    translate([-seat_width/2 - 5, seat_depth/4, cushion_thickness + 15])\n    cube([wall_thickness + 4, 15, 3], center=true);\n    \n    translate([seat_width/2 + 5, seat_depth/4, cushion_thickness + 15])\n    cube([wall_thickness + 4, 15, 3], center=true);\n}\n\n// Assembly\nunion() {\n    // Base and lift\n    chair_base();\n    translate([0, 0, 5])\n    gas_lift();\n    \n    // Seat assembly\n    translate([0, 0, 45])\n    union() {\n        seat_cushion();\n        backrest();\n        armrests();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "shell",
    "openscad_code": "// Shell Mechanical Component - Hydraulic Cylinder End Cap\n// Realistic style with medium complexity\n// Size: 80mm diameter, 40mm height\n\n$fn = 50;  // Higher resolution for smoother curves\n\n// Main parameters\nshell_diameter = 80;\nshell_height = 40;\nwall_thickness = 2;\nfillet_radius = 3;\n\n// Flange parameters\nflange_diameter = 100;\nflange_thickness = 5;\nbolt_holes = 6;\nbolt_diameter = 8;\nbolt_circle = 90;\n\n// Central port parameters\nport_diameter = 20;\nport_height = 10;\nport_inner = 12;\n\n// Structural ribs\nrib_count = 8;\nrib_width = 4;\nrib_height = 8;\n\nmodule shell_body() {\n    // Main shell body - hollow cylinder with rounded edges\n    difference() {\n        // Outer shell\n        cylinder(h = shell_height, d = shell_diameter, center = true);\n        \n        // Inner hollow space\n        translate([0, 0, -wall_thickness/2])\n            cylinder(h = shell_height + wall_thickness, d = shell_diameter - 2*wall_thickness, center = true);\n        \n        // Top and bottom fillets for realistic appearance\n        translate([0, 0, shell_height/2 - fillet_radius])\n            sphere(r = fillet_radius);\n        translate([0, 0, -shell_height/2 + fillet_radius])\n            sphere(r = fillet_radius);\n    }\n}\n\nmodule mounting_flange() {\n    // Flange for mounting with bolt holes\n    difference() {\n        // Main flange disk\n        cylinder(h = flange_thickness, d = flange_diameter, center = true);\n        \n        // Counterbore for bolt heads\n        translate([0, 0, flange_thickness/2 - 2])\n            cylinder(h = 2, d = bolt_diameter + 4, center = true);\n        \n        // Bolt holes arranged in circle\n        for (i = [0:bolt_holes-1]) {\n            rotate([0, 0, i * 360/bolt_holes])\n                translate([bolt_circle/2, 0, 0])\n                    cylinder(h = flange_thickness + 1, d = bolt_diameter, center = true);\n        }\n    }\n}\n\nmodule central_port() {\n    // Central hydraulic port with threading simulation\n    difference() {\n        // Outer port cylinder\n        translate([0, 0, shell_height/2 + port_height/2])\n            cylinder(h = port_height, d = port_diameter);\n        \n        // Inner port hole\n        translate([0, 0, shell_height/2 - 1])\n            cylinder(h = port_height + 2, d = port_inner);\n        \n        // Threading grooves (simulated with small cylinders)\n        for (i = [1:3]) {\n            translate([0, 0, shell_height/2 + port_height * i/4])\n                cylinder(h = 0.5, d = port_inner + 1);\n        }\n    }\n}\n\nmodule structural_ribs() {\n    // Reinforcement ribs for structural integrity\n    for (i = [0:rib_count-1]) {\n        rotate([0, 0, i * 360/rib_count]) {\n            translate([0, (shell_diameter - wall_thickness)/2 - rib_width/2, 0])\n                cube([rib_width, rib_height, shell_height - 4], center = true);\n        }\n    }\n}\n\nmodule pressure_indicator() {\n    // Small pressure indicator boss\n    translate([shell_diameter/2 - 10, 0, shell_height/2 - 5])\n        difference() {\n            cylinder(h = 8, d = 6);\n            translate([0, 0, 6])\n                cylinder(h = 2, d = 3);\n        }\n}\n\n// Assemble the complete shell component\nunion() {\n    // Main shell body\n    shell_body();\n    \n    // Mounting flange\n    translate([0, 0, -shell_height/2 - flange_thickness/2])\n        mounting_flange();\n    \n    // Central hydraulic port\n    central_port();\n    \n    // Internal structural ribs\n    structural_ribs();\n    \n    // Pressure indicator\n    pressure_indicator();\n    \n    // Additional small details - alignment pin\n    translate([shell_diameter/2 - 5, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d = 4);\n    \n    // Material identification marking (simulated slot)\n    translate([0, shell_diameter/2 + 2, 0])\n        cube([20, 1, 3], center = true);\n}",
    "renders": true
  },
  {
    "mechanical_component": "casing",
    "openscad_code": "// Parametric Office Chair Casing\n// Main dimensions in millimeters\n$fa = 1; $fs = 0.4;\n\n// Overall dimensions\nseat_width = 140;\nseat_depth = 130;\nback_height = 150;\nwall = 2;\n\nmodule seat_shell() {\n    // Main seat pan with slight ergonomic contour\n    difference() {\n        hull() {\n            translate([0, -seat_depth/4, wall]) cube([seat_width, seat_depth/2, wall*2], center=true);\n            translate([0, seat_depth/4, 0]) cube([seat_width*0.9, seat_depth/2, wall], center=true);\n        }\n        // Central cutout for comfort\n        translate([0, seat_depth/6, wall-1]) cube([seat_width*0.3, seat_depth*0.4, wall+2], center=true);\n    }\n}\n\nmodule back_shell() {\n    // Curved backrest shell\n    difference() {\n        // Main backrest\n        translate([0, 0, back_height/2 + wall]) scale([1, 0.9, 1]) \n            cylinder(h=back_height, r1=seat_width/2, r2=seat_width/2*0.8, center=true);\n        \n        // Lumbar relief\n        translate([0, -seat_depth/6, back_height/2 + wall]) \n            cylinder(h=back_height*0.6, r1=seat_width/2*0.7, r2=seat_width/2*0.5, center=true);\n    }\n    \n    // Reinforcement ribs\n    for(i=[-1:1]) {\n        translate([i*seat_width/4, 0, back_height/2 + wall]) \n            cube([wall*2, seat_depth*0.3, back_height*0.8], center=true);\n    }\n}\n\nmodule armrest_mounts() {\n    // Left mount\n    translate([-seat_width/2 - wall*3, 0, 20]) {\n        difference() {\n            cube([wall*4, seat_depth*0.3, 40], center=true);\n            // Mounting hole pattern\n            for(y=[-10, 10]) {\n                translate([0, y, 0]) cylinder(h=wall*5, r=3, center=true);\n            }\n        }\n    }\n    \n    // Right mount (mirrored)\n    mirror([1,0,0]) armrest_mounts();\n}\n\nmodule base_plate() {\n    // Mounting plate for gas spring\n    difference() {\n        translate([0, 0, -wall]) \n            cube([seat_width*0.7, seat_depth*0.7, wall*2], center=true);\n        \n        // Central hole for gas spring\n        translate([0, 0, -wall-1]) \n            cylinder(h=wall*4, r=15, center=true);\n        \n        // Mounting slots\n        for(a=[0:45:315]) {\n            rotate([0,0,a]) translate([seat_width*0.25, 0, -wall]) \n                cube([20, 8, wall*4], center=true);\n        }\n    }\n}\n\nmodule control_lever() {\n    // Side lever housing\n    translate([seat_width/2 + wall*2, -seat_depth/3, 10]) {\n        difference() {\n            cube([wall*3, 15, 25], center=true);\n            // Lever slot\n            translate([0, 0, 5]) rotate([90,0,0]) \n                cylinder(h=wall*4, r=4, center=true);\n        }\n    }\n}\n\n// Assemble the chair casing\nunion() {\n    seat_shell();\n    back_shell();\n    armrest_mounts();\n    base_plate();\n    control_lever();\n}",
    "renders": true
  },
  {
    "mechanical_component": "canopy",
    "openscad_code": "// Realistic Medium-Complexity Canopy (Garden Swing / Pergola Style)\n// Overall footprint ≈ 120 mm × 120 mm × 100 mm\n// Wall thickness = 2 mm everywhere\n\n// Parameters\nroof_angle = 25;          // degrees\npost_h = 70;              // mm\npost_w = 10;              // mm\nrail_w = 6;               // mm\nroof_over = 15;           // mm overhang each side\nwall_clear = 2;           // clearance for print\n\nmodule leg(x,y) {\n    // Vertical post with rounded top and 2 mm shell\n    difference() {\n        union() {\n            // Main post\n            translate([x, y, 0])\n                cube([post_w, post_w, post_h], center=true);\n            // Rounded top\n            translate([x, y, post_h/2 + post_w/2])\n                rotate([90,0,0])\n                    cylinder(h=post_w, d=post_w, $fn=20);\n        }\n        // Hollow core\n        translate([x, y, -1])\n            cube([post_w-wall_clear*2, post_w-wall_clear*2, post_h+2], center=true);\n    }\n}\n\nmodule rail(h) {\n    // Horizontal rail with 2 mm wall thickness\n    difference() {\n        cube([120, rail_w, rail_w], center=true);\n        translate([0,0,-1])\n            cube([116, rail_w-wall_clear*2, rail_w+2], center=true);\n    }\n}\n\nmodule roof() {\n    // Pitched roof with 2 mm shell\n    difference() {\n        // Outer shell\n        union() {\n            // Main roof body\n            translate([0, 0, post_h + 10])\n                rotate([roof_angle,0,0])\n                    cube([120 + roof_over*2, 120 + roof_over*2, 6], center=true);\n            // Opposite side\n            translate([0, 0, post_h + 10])\n                rotate([-roof_angle,0,0])\n                    cube([120 + roof_over*2, 120 + roof_over*2, 6], center=true);\n        }\n        // Inner hollow\n        translate([0, 0, post_h + 10])\n            rotate([roof_angle,0,0])\n                cube([116 + roof_over*2, 116 + roof_over*2, 10], center=true);\n        translate([0, 0, post_h + 10])\n            rotate([-roof_angle,0,0])\n                cube([116 + roof_over*2, 116 + roof_over*2, 10], center=true);\n    }\n}\n\nmodule braces() {\n    // Corner braces for rigidity\n    for(x=[-50,50], y=[-50,50])\n        translate([x, y, post_h/2])\n            rotate([0,0,45*(x>0?1:-1)*(y>0?1:-1)])\n                cube([rail_w*1.5, rail_w*1.5, post_h*0.8], center=true);\n}\n\n// Assembly\nunion() {\n    // Four legs\n    leg(-50,-50);\n    leg(50,-50);\n    leg(-50,50);\n    leg(50,50);\n\n    // Upper rails\n    translate([0,-50,post_h-10])\n        rotate([0,90,0])\n            rail(0);\n    translate([0,50,post_h-10])\n        rotate([0,90,0])\n            rail(0);\n    translate([-50,0,post_h-10])\n        rotate([90,0,0])\n            rail(0);\n    translate([50,0,post_h-10])\n        rotate([90,0,0])\n            rail(0);\n\n    // Mid rails\n    translate([0,-50,post_h/2])\n        rotate([0,90,0])\n            rail(0);\n    translate([0,50,post_h/2])\n        rotate([0,90,0])\n            rail(0);\n    translate([-50,0,post_h/2])\n        rotate([90,0,0])\n            rail(0);\n    translate([50,0,post_h/2])\n        rotate([90,0,0])\n            rail(0);\n\n    // Corner braces\n    braces();\n\n    // Roof\n    roof();\n}",
    "renders": true
  },
  {
    "mechanical_component": "lid",
    "openscad_code": "// Lid for a small storage box / container (realistic style, medium complexity)\n// Overall size: 84 x 84 x 18 mm – printable on most FDM machines\n// Wall thickness ≈ 2 mm\n\n// ---------- Parameters ----------\n$fn = 36;               // Circle quality\nwall = 2;               // Uniform wall thickness\nlidW = 84;              // Lid footprint width/depth\nlidH = 18;              // Total lid height\nclear = 0.2;            // Printing clearance\nhandleH = 6;            // Height of recessed handle cut-out\nhandleR = 12;           // Radius of finger recess\nribSpacing = 20;        // Spacing between internal ribs\nribH = lidH - 4;        // Rib height (stops 2 mm below top surface)\n\n// ---------- Main lid body ----------\nmodule lid_shell() {\n    difference() {\n        // Outer shell\n        cube([lidW, lidW, lidH], center=true);\n\n        // Hollow inside with clearance for box lip\n        translate([0, 0, 1])\n            cube([lidW - 2*wall - 2*clear, \n                  lidW - 2*wall - 2*clear, \n                  lidH + 2], center=true);\n    }\n}\n\n// ---------- Recessed handle on top ----------\nmodule handle_recess() {\n    difference() {\n        // Nothing to add – just cut a recess\n        translate([0, 0, lidH/2])\n            cube([lidW, lidW, lidH], center=true);\n\n        // Large finger recess\n        translate([0, 0, lidH - handleH/2])\n            cylinder(h = handleH + 1, r = handleR, center=true);\n\n        // Smaller thru-hole for grip\n        translate([0, 0, lidH/2])\n            cylinder(h = lidH + 1, r = handleR - 6, center=true);\n    }\n}\n\n// ---------- Internal reinforcement ribs ----------\nmodule ribs() {\n    // Two sets of ribs in X and Y directions\n    for (axis = [0, 90]) {\n        rotate([0, 0, axis]) {\n            for (pos = [-ribSpacing, 0, ribSpacing]) {\n                translate([pos, 0, 0])\n                    cube([wall, lidW - 2*wall, ribH], center=true);\n            }\n        }\n    }\n}\n\n// ---------- Small alignment pegs ----------\nmodule pegs() {\n    pegD = 4;\n    pegL = 3;\n    offset = lidW/2 - wall - pegD/2;\n    \n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x*offset, y*offset, -lidH/2 + pegL/2])\n                cylinder(h = pegL, d = pegD, center=false);\n}\n\n// ---------- Assembly ----------\nunion() {\n    lid_shell();\n    ribs();\n    pegs();\n    handle_recess();\n}",
    "renders": true
  },
  {
    "mechanical_component": "top",
    "openscad_code": "// Realistic Mechanical Spinning Top with Bearing and Structural Details\n// Medium complexity - 3D printable, ~80mm tall\n\n$fn = 50;\n\n// Main parameters\ntip_height = 25;\nbody_height = 35;\nhandle_height = 20;\nbearing_radius = 8;\nwall_thickness = 2;\n\nmodule top_assembly() {\n    // Main body structure\n    translate([0, 0, tip_height]) \n    difference() {\n        // Outer conical body\n        cylinder(h = body_height, r1 = 25, r2 = 20, center = false);\n        \n        // Central cavity for weight reduction\n        cylinder(h = body_height - wall_thickness, r1 = 23 - wall_thickness, r2 = 18 - wall_thickness, center = false);\n    }\n    \n    // Tip - conical point\n    cylinder(h = tip_height, r1 = 15, r2 = 0.5, center = false);\n    \n    // Handle shaft\n    translate([0, 0, tip_height + body_height])\n    difference() {\n        cylinder(h = handle_height, r = 8, center = false);\n        cylinder(h = handle_height, r = 6, center = false);\n    }\n    \n    // Handle grip ring\n    translate([0, 0, tip_height + body_height + handle_height/2])\n    difference() {\n        cylinder(h = 10, r = 12, center = true);\n        cylinder(h = 12, r = 9, center = true);\n    }\n    \n    // Structural ribs for reinforcement\n    for (i = [0:6]) {\n        rotate([0, 0, i * 60])\n        translate([0, 0, tip_height + body_height/2])\n        difference() {\n            cube([wall_thickness * 2, 22, body_height], center = true);\n            cylinder(h = body_height + 2, r = 18 - wall_thickness, center = true);\n        }\n    }\n    \n    // Bearing race detail\n    translate([0, 0, tip_height + body_height - 5])\n    difference() {\n        cylinder(h = 10, r = bearing_radius + wall_thickness, center = false);\n        cylinder(h = 11, r = bearing_radius, center = false);\n    }\n    \n    // Grip grooves on handle\n    for (j = [0:3]) {\n        translate([0, 0, tip_height + body_height + j * 4 + 2])\n        rotate([0, 0, 45])\n        difference() {\n            cylinder(h = 1.5, r = 8.5, center = true);\n            cylinder(h = 2, r = 7, center = true);\n        }\n    }\n    \n    // Base stability ring\n    translate([0, 0, tip_height - 2])\n    difference() {\n        cylinder(h = 4, r = 26, center = false);\n        cylinder(h = 5, r = 24, center = false);\n    }\n}\n\n// Generate the complete top\ntop_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "deck",
    "openscad_code": "// OpenSCAD code for a realistic deck chair (medium complexity)\n\n// Overall dimensions\ndeck_length = 120;\ndeck_width = 50;\ndeck_height = 80;\nleg_thickness = 4;\nslat_thickness = 2;\nslat_width = 4;\nslat_gap = 2;\n\n// Frame module\nmodule frame() {\n    // Front frame\n    difference() {\n        // Main frame rectangle\n        cube([deck_width, leg_thickness, deck_height]);\n        // Rounded top corners\n        translate([deck_width-4, -1, deck_height-4]) \n            cube([8, leg_thickness+2, 8]);\n        translate([4, -1, deck_height-4]) \n            cube([8, leg_thickness+2, 8]);\n    }\n    \n    // Back frame\n    translate([0, deck_length-leg_thickness, 0])\n        difference() {\n            cube([deck_width, leg_thickness, deck_height]);\n            translate([deck_width-4, -1, deck_height-4]) \n                cube([8, leg_thickness+2, 8]);\n            translate([4, -1, deck_height-4]) \n                cube([8, leg_thickness+2, 8]);\n        }\n    \n    // Side frames\n    translate([0, 0, 0])\n        cube([leg_thickness, deck_length, deck_height]);\n    translate([deck_width-leg_thickness, 0, 0])\n        cube([leg_thickness, deck_length, deck_height]);\n}\n\n// Seat slats\nmodule seat_slats() {\n    num_slats = floor((deck_length - 2*leg_thickness) / (slat_width + slat_gap));\n    slat_start = leg_thickness;\n    \n    for(i = [0:num_slats-1]) {\n        y_pos = slat_start + i * (slat_width + slat_gap);\n        translate([leg_thickness, y_pos, deck_height/2])\n            cube([deck_width-2*leg_thickness, slat_width, slat_thickness]);\n    }\n}\n\n// Backrest slats\nmodule backrest_slats() {\n    num_slats = floor((deck_height - 20) / (slat_width + slat_gap));\n    slat_start = 20;\n    \n    for(i = [0:num_slats-1]) {\n        z_pos = slat_start + i * (slat_width + slat_gap);\n        translate([leg_thickness, leg_thickness, z_pos])\n            cube([deck_width-2*leg_thickness, deck_length-2*leg_thickness, slat_width]);\n    }\n}\n\n// Support beams\nmodule support_beams() {\n    // Front support\n    translate([leg_thickness, deck_length/2, deck_height/2])\n        cube([deck_width-2*leg_thickness, slat_thickness*1.5, slat_thickness*1.5]);\n    \n    // Back support\n    translate([leg_thickness, deck_length/2, deck_height/2])\n        cube([deck_width-2*leg_thickness, slat_thickness*1.5, slat_thickness*1.5]);\n    \n    // Side supports\n    translate([deck_width/2, leg_thickness, deck_height/2])\n        cube([slat_thickness*1.5, deck_length-2*leg_thickness, slat_thickness*1.5]);\n    translate([deck_width/2, leg_thickness, deck_height/2])\n        cube([slat_thickness*1.5, deck_length-2*leg_thickness, slat_thickness*1.5]);\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-2, deck_length/2-10, deck_height-5])\n        cube([leg_thickness+2, 20, leg_thickness]);\n    \n    // Right armrest\n    translate([deck_width, deck_length/2-10, deck_height-5])\n        cube([leg_thickness+2, 20, leg_thickness]);\n}\n\n// Assembly\nunion() {\n    frame();\n    seat_slats();\n    backrest_slats();\n    support_beams();\n    armrests();\n}",
    "renders": true
  },
  {
    "mechanical_component": "floor",
    "openscad_code": "// Floor mechanical component - Industrial Floor Panel with Structural Grid\n// 150mm x 150mm x 10mm overall dimensions, 3D printable\n\n// Main parameters\npanel_size = 150;\npanel_thickness = 10;\ngrid_thickness = 2;\nleg_height = 8;\nleg_diameter = 6;\nbolt_hole_diameter = 3;\nsurface_texture_depth = 0.5;\n\n// Base floor panel\nmodule floor_panel() {\n    difference() {\n        // Main panel body\n        cube([panel_size, panel_size, panel_thickness], center=true);\n        \n        // Corner bolt holes\n        for(x = [-1, 1])\n        for(y = [-1, 1]) {\n            translate([x * (panel_size/2 - 10), y * (panel_size/2 - 10), panel_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(h=panel_thickness + 2, d=bolt_hole_diameter, center=true, $fn=16);\n        }\n    }\n}\n\n// Structural grid underneath\nmodule structural_grid() {\n    // Longitudinal ribs\n    for(i = [-2:2]) {\n        translate([i * 30, 0, -leg_height/2])\n            cube([grid_thickness, panel_size - 20, leg_height + panel_thickness/2], center=true);\n    }\n    \n    // Transverse ribs\n    for(j = [-2:2]) {\n        translate([0, j * 30, -leg_height/2])\n            cube([panel_size - 20, grid_thickness, leg_height + panel_thickness/2], center=true);\n    }\n}\n\n// Support legs\nmodule support_legs() {\n    for(x = [-1, 0, 1])\n    for(y = [-1, 0, 1]) {\n        if(!(x == 0 && y == 0)) {\n            translate([x * 50, y * 50, -leg_height])\n                cylinder(h=leg_height, d=leg_diameter, center=false, $fn=16);\n        }\n    }\n}\n\n// Anti-slip surface texture\nmodule surface_texture() {\n    // Diamond pattern texture\n    for(i = [-7:7])\n    for(j = [-7:7]) {\n        translate([i * 10, j * 10, panel_thickness/2 + surface_texture_depth/2])\n            cube([6, 6, surface_texture_depth], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main panel with bolt holes\n    floor_panel();\n    \n    // Structural reinforcement grid\n    translate([0, 0, -panel_thickness/2])\n        structural_grid();\n    \n    // Support legs\n    support_legs();\n    \n    // Surface texture for grip\n    surface_texture();\n}",
    "renders": true
  },
  {
    "mechanical_component": "panel",
    "openscad_code": "// Panel mechanical component - Control panel with mounting features\n// Realistic style, medium complexity\n\n// Overall dimensions\npanel_width = 100;\npanel_height = 80;\npanel_thickness = 5;\nmounting_hole_diameter = 4;\nmounting_hole_spacing = 85;\ncorner_radius = 8;\n\n// Display cutout\ndisplay_width = 60;\ndisplay_height = 30;\ndisplay_depth = 2;\n\n// Button array\nbutton_diameter = 8;\nbutton_height = 3;\nbutton_spacing = 15;\nbutton_rows = 2;\nbutton_cols = 3;\n\n// Indicator lights\nled_diameter = 5;\nled_height = 1;\nled_spacing = 10;\n\n// Mounting brackets\nbracket_width = 20;\nbracket_height = 15;\nbracket_thickness = 3;\n\nmodule rounded_cube(size, radius) {\n    translate([radius, radius, 0])\n    minkowski() {\n        cube([size.x - 2*radius, size.y - 2*radius, size.z]);\n        cylinder(r=radius, h=0.01);\n    }\n}\n\nmodule panel_body() {\n    difference() {\n        // Main panel\n        rounded_cube([panel_width, panel_height, panel_thickness], corner_radius);\n        \n        // Display window\n        translate([(panel_width - display_width)/2, (panel_height - display_height)/2, panel_thickness - display_depth])\n            cube([display_width, display_height, display_depth + 0.1]);\n        \n        // Mounting holes\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([panel_width/2 + x*mounting_hole_spacing/2, panel_height/2 + y*mounting_hole_spacing/2, -0.1])\n                    cylinder(h=panel_thickness + 0.2, d=mounting_hole_diameter);\n            }\n        }\n    }\n}\n\nmodule buttons() {\n    for (i = [0:button_rows-1]) {\n        for (j = [0:button_cols-1]) {\n            translate([\n                panel_width/2 + (j - (button_cols-1)/2) * button_spacing,\n                panel_height/2 - 20 + (i - (button_rows-1)/2) * button_spacing,\n                panel_thickness\n            ]) {\n                // Button base\n                cylinder(h=button_height, d=button_diameter);\n                \n                // Button top\n                translate([0, 0, button_height])\n                    cylinder(h=1, d=button_diameter * 0.8);\n            }\n        }\n    }\n}\n\nmodule indicator_leds() {\n    for (i = [0:2]) {\n        translate([\n            panel_width/2 + (i - 1) * led_spacing,\n            panel_height/2 + 25,\n            panel_thickness\n        ]) {\n            // LED housing\n            cylinder(h=led_height, d=led_diameter);\n            \n            // LED lens\n            translate([0, 0, led_height])\n                sphere(d=led_diameter);\n        }\n    }\n}\n\nmodule mounting_brackets() {\n    for (side = [-1, 1]) {\n        translate([side * panel_width/2 + side * bracket_width/2, 0, -bracket_thickness]) {\n            difference() {\n                // Bracket body\n                cube([bracket_width, bracket_height, bracket_thickness]);\n                \n                // Mounting slot\n                translate([bracket_width/2, bracket_height/2, -0.1])\n                    cube([bracket_width * 0.6, bracket_height * 0.4, bracket_thickness + 0.2]);\n            }\n            \n            // Gusset for strength\n            translate([side * bracket_width/2, bracket_height/2, -bracket_thickness/2])\n                rotate([0, 90, 0])\n                    cube([bracket_thickness, bracket_height/2, bracket_width/2]);\n        }\n    }\n}\n\nmodule cable_gland() {\n    translate([panel_width/2, panel_height - 10, -5]) {\n        union() {\n            // Main gland body\n            cylinder(h=8, d=12);\n            \n            // Cable entry\n            translate([0, 0, -2])\n                cylinder(h=10, d=8);\n            \n            // Thread detail\n            for (i = [0:3]) {\n                translate([0, 0, i * 2])\n                    cylinder(h=0.5, d=12 - i * 0.5);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    panel_body();\n    buttons();\n    indicator_leds();\n    mounting_brackets();\n    cable_gland();\n    \n    // Label area\n    translate([panel_width/2 - 30, 10, panel_thickness - 0.1])\n        cube([60, 15, 0.2]);\n}",
    "renders": true
  },
  {
    "mechanical_component": "sheet",
    "openscad_code": "// Realistic sheet-metal bracket with gusset reinforcement\n// Overall size: 80mm x 60mm x 40mm\n\n$fn = 32;          // Smooth curves\nwall = 2;          // Uniform wall thickness for 3D printing\n\nmodule base_plate() {\n    // Main horizontal base with screw holes\n    difference() {\n        // Solid plate\n        cube([80, 60, wall], center=true);\n        // Countersunk screw holes (M4)\n        for(x=[-30, 30])\n            for(y=[-20, 20])\n                translate([x, y, -wall/2])\n                    rotate([180,0,0])\n                        cylinder(h=wall+1, d1=7, d2=4);\n    }\n}\n\nmodule vertical_plate() {\n    // Perpendicular mounting plate\n    difference() {\n        translate([0, 30-wall/2, 20])\n            cube([80, wall, 40]);\n        // Keyhole slots for wall mounting\n        translate([-20, 30-wall/2, 35])\n            rotate([90,0,0])\n                cylinder(h=wall+1, r=3.5);\n        translate([-20, 30-wall/2, 25])\n            rotate([90,0,0])\n                cube([6, wall+1, 10], center=true);\n        \n        translate([20, 30-wall/2, 35])\n            rotate([90,0,0])\n                cylinder(h=wall+1, r=3.5);\n        translate([20, 30-wall/2, 25])\n            rotate([90,0,0])\n                cube([6, wall+1, 10], center=true);\n    }\n}\n\nmodule gusset(count=3) {\n    // Triangular reinforcement webs\n    for(i=[-1:1]) {\n        translate([i*30, 0, 20])\n            rotate([0, -90, 0])\n                difference() {\n                    // Main triangle\n                    linear_extrude(height=wall)\n                        polygon(points=[[0,0],[30,0],[30,20]]);\n                    // Lightening holes\n                    translate([20, 10, -1])\n                        cylinder(h=wall+2, r=5);\n                }\n    }\n}\n\nmodule edge_flanges() {\n    // 90° flanges for stiffness\n    translate([0, 0, 20])\n        difference() {\n            // Top flange\n            translate([0, 30-wall/2, 20])\n                cube([80, wall, 5]);\n            // Notches for clearance\n            for(x=[-30, 30])\n                translate([x, 30-wall/2, 22.5])\n                    cube([10, wall+1, 5], center=true);\n        }\n    \n    translate([0, 0, 20])\n        difference() {\n            // Side flanges\n            translate([40-wall/2, 0, 20])\n                cube([wall, 60, 5]);\n            // Notches for clearance\n            for(y=[-20, 20])\n                translate([40-wall/2, y, 22.5])\n                    cube([wall+1, 10, 5], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    base_plate();\n    vertical_plate();\n    gusset();\n    edge_flanges();\n}",
    "renders": true
  },
  {
    "mechanical_component": "slab",
    "openscad_code": "// Realistic medium-complexity slab mechanical_component (platform base)\n// Overall footprint: 80 x 60 mm, height 20 mm\n// 2 mm wall thickness throughout for 3D-printability\n\n$fn = 50;\n\nmodule slab_base() {\n    // Main deck plate\n    difference() {\n        cube([80, 60, 5], center = true);\n        \n        // Weight-reduction pockets (5 mm deep from top)\n        for (x = [-30, -10, 10, 30])\n            for (y = [-20, 0, 20])\n                translate([x, y, 2])\n                    cube([14, 14, 5.1], center = true);\n    }\n}\n\nmodule frame_rails() {\n    // Long-side rails\n    for (y = [-28, 28]) {\n        translate([0, y, -8.5])\n            cube([84, 4, 15], center = true);\n    }\n    // Short-side rails\n    for (x = [-38, 38]) {\n        translate([x, 0, -8.5])\n            cube([4, 64, 15], center = true);\n    }\n}\n\nmodule corner_gussets() {\n    // Triangular braces at corners\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x*34, y*24, -5]) {\n                rotate([0, 0, x*y*45])\n                    linear_extrude(height = 10, center = true)\n                        polygon(points = [[0, 0], [8, 0], [0, 8]]);\n            }\n        }\n    }\n}\n\nmodule mounting_bosses() {\n    // Four threaded-insert bosses on top\n    for (x = [-30, 30])\n        for (y = [-20, 20]) {\n            translate([x, y, 2.5])\n                cylinder(h = 5, r = 4, center = true);\n            translate([x, y, 0])\n                cylinder(h = 10, r = 3, center = true);\n        }\n}\n\nmodule bottom_skids() {\n    // Bottom skids/standoffs\n    for (x = [-30, 30])\n        for (y = [-20, 20]) {\n            translate([x, y, -12.5])\n                cylinder(h = 5, r = 3, center = true);\n        }\n}\n\nmodule cable_slots() {\n    // Side cable pass-throughs\n    for (side = [-1, 1]) {\n        translate([side*42, 0, -5])\n            rotate([0, 90, 0])\n                cylinder(h = 60, r = 5, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    slab_base();\n    frame_rails();\n    corner_gussets();\n    mounting_bosses();\n    bottom_skids();\n    cable_slots();\n}",
    "renders": true
  },
  {
    "mechanical_component": "joint",
    "openscad_code": "// Universal joint yoke with cross-pin bearing block\n// Overall size ~85 mm × 85 mm × 110 mm – printable on most FDM beds\n\n$fn = 36;           // smooth curves\nwall = 2;           // uniform wall thickness for printability\npin_d = 8;          // cross-pin Ø\npin_l = 30;         // cross-pin length\nyoke_w = 20;        // yoke arm width\nboss_d = 30;        // bearing boss Ø\nboss_h = 12;        // boss height\n\n// ------------------ Main yoke body ------------------\nmodule yoke_half() {\n    difference() {\n        // outer shell\n        union() {\n            translate([0, 0, 35])  cube([60, yoke_w, 70], center=true);\n            rotate([0, 90, 0]) cylinder(h=60, d=yoke_w, center=true);\n            translate([0, 0, -35]) cube([60, yoke_w, 70], center=true);\n        }\n        // central hole for shaft\n        rotate([0, 90, 0]) cylinder(h=100, d=12, center=true);\n    }\n}\n\n// ------------------ Bearing boss with pin hole ------------------\nmodule bearing_boss() {\n    difference() {\n        cylinder(h=boss_h, d=boss_d, center=true);\n        rotate([0, 90, 0]) cylinder(h=boss_d + 2, d=pin_d + 1, center=true);\n    }\n}\n\n// ------------------ Cross pin (print separately or in place) ------------------\nmodule cross_pin() {\n    cylinder(h=pin_l, d=pin_d, center=true);\n}\n\n// ------------------ Assembly ------------------\ndifference() {\n    union() {\n        // yoke arms\n        yoke_half();\n        mirror([1, 0, 0]) yoke_half();\n\n        // bosses on each arm\n        translate([30, 0, 35])  bearing_boss();\n        translate([30, 0, -35]) bearing_boss();\n        translate([-30, 0, 35]) bearing_boss();\n        translate([-30, 0, -35]) bearing_boss();\n\n        // cross pins inside bosses\n        translate([30, 0, 35])  rotate([0, 90, 0]) cross_pin();\n        translate([30, 0, -35]) rotate([0, 90, 0]) cross_pin();\n    }\n\n    // remove internal material to keep walls 2 mm\n    // vertical clearance\n    for (z = [35, -35])\n        translate([0, 0, z]) cube([60 - 2*wall, yoke_w - 2*wall, 70 - 2*wall], center=true);\n\n    // horizontal clearance for cross-bore\n    rotate([0, 90, 0])\n        cylinder(h=100, d=boss_d - 2*wall, center=true);\n}",
    "renders": true
  },
  {
    "mechanical_component": "connector",
    "openscad_code": "// OpenSCAD code for a realistic medium-complexity furniture connector\n// A \"corner bracket\" for joining two 20×20 mm aluminum extrusions at a right angle\n\n// Overall dimensions\nbracket_outer = 40;          // 40 mm cube\nbracket_inner = 36;          // 36 mm inner cube (2 mm wall thickness)\nbolt_hole_d = 5.5;           // 5.5 mm clearance for M5 bolt\nbolt_head_d = 9;             // 9 mm counter-bore for M5 socket head\nbolt_head_h = 5;             // 5 mm deep counter-bore\nboss_clear = 30;             // boss diameter for extrusion slot clearance\nboss_h = 12;                 // boss height (fits 6 mm slot depth)\nfillet_r = 2;                // 2 mm fillets for printability\n\n// Main bracket body\nmodule bracket_body() {\n    difference() {\n        // outer cube with rounded edges\n        minkowski() {\n            cube(bracket_outer, center = true);\n            sphere(fillet_r);\n        }\n        // hollow center\n        minkowski() {\n            cube(bracket_inner, center = true);\n            sphere(fillet_r);\n        }\n    }\n}\n\n// Corner gusset for strength\nmodule corner_gusset() {\n    intersection() {\n        // triangular prism\n        polyhedron(\n            points = [\n                [bracket_outer/2, bracket_outer/2, bracket_outer/2],\n                [-bracket_outer/2, bracket_outer/2, bracket_outer/2],\n                [bracket_outer/2, -bracket_outer/2, bracket_outer/2],\n                [bracket_outer/2, bracket_outer/2, -bracket_outer/2]\n            ],\n            faces = [\n                [0,1,2], [0,2,3], [0,3,1], [3,2,1]\n            ]\n        );\n        // limit to 45-degree corner\n        rotate([0,0,-45])\n            cube(bracket_outer*2, center = true);\n    }\n}\n\n// Bolt boss and hole set\nmodule bolt_set(axis) {\n    translate([0,0,0])\n    rotate(axis)\n    union() {\n        // boss cylinder\n        cylinder(h = boss_h, d = boss_clear, $fn = 32);\n        // bolt clearance hole\n        translate([0,0,-1])\n            cylinder(h = boss_h + 2, d = bolt_hole_d, $fn = 32);\n        // counter-bore for bolt head\n        translate([0,0,-bolt_head_h - 1])\n            cylinder(h = bolt_head_h + 1, d = bolt_head_d, $fn = 32);\n    }\n}\n\n// Extrusion slot engagement tongues\nmodule tongues() {\n    for (axis = [[0,90,0], [-90,0,0], [0,0,90]])\n        rotate(axis)\n        translate([0,0,bracket_outer/2 - boss_h/2])\n            difference() {\n                // tongue\n                cube([20.2, 20.2, boss_h], center = true);\n                // slot clearance\n                cube([20.5, 15, boss_h + 0.1], center = true);\n            }\n}\n\n// Assembly\nunion() {\n    bracket_body();\n    corner_gusset();\n    tongues();\n    // bolt bosses on the three outer faces\n    bolt_set([0,90,0]);      // +Y face\n    bolt_set([90,0,0]);      // +X face\n    bolt_set([0,0,0]);       // +Z face\n}",
    "renders": true
  },
  {
    "mechanical_component": "gimbal",
    "openscad_code": "// OpenSCAD Gimbal – 3-axis camera gimbal, 3D-printable, medium complexity\n// Outer frame ~100 mm Ø, wall thickness 2 mm everywhere\n\n$fn = 36;\n\n// -------------------- Parameters --------------------\nwall = 2;\nbearing_od = 8;\nbearing_h = 4;\nmotor_od = 22;\nmotor_h = 12;\nshaft_d = 4;\n\n// -------------------- Helper Modules ----------------\nmodule tube(od, id, h) {\n    difference() {\n        cylinder(h = h, d = od);\n        translate([0, 0, -0.1])\n            cylinder(h = h + 0.2, d = id);\n    }\n}\n\n// -------------------- Roll Ring ---------------------\nmodule roll_ring() {\n    difference() {\n        tube(od = 100, id = 100 - 2*wall, h = wall);\n        // four motor cut-outs\n        for (a = [0:90:270])\n            rotate([0, 0, a])\n                translate([100/2 - motor_h/2 - wall, 0, -0.1])\n                    cube([motor_h, motor_od, wall + 0.2], center = true);\n    }\n}\n\n// -------------------- Pitch Fork --------------------\nmodule pitch_fork() {\n    // Fork arms\n    difference() {\n        union() {\n            // left arm\n            translate([-50/2, 0, 0])\n                cube([50, wall, 40], center = true);\n            // right arm\n            translate([50/2, 0, 0])\n                cube([50, wall, 40], center = true);\n            // cross brace\n            translate([0, 0, 20 - wall/2])\n                cube([50 + wall, wall, wall], center = true);\n        }\n        // motor hole right\n        translate([50/2, 0, 0])\n            rotate([90, 0, 0])\n                tube(od = bearing_od + 2*wall, id = bearing_od, h = wall + 1);\n        // motor hole left\n        translate([-50/2, 0, 0])\n            rotate([90, 0, 0])\n                tube(od = bearing_od + 2*wall, id = bearing_od, h = wall + 1);\n    }\n}\n\n// -------------------- Yaw Base ----------------------\nmodule yaw_base() {\n    difference() {\n        tube(od = 60, id = 60 - 2*wall, h = wall);\n        // center shaft hole\n        translate([0, 0, -0.1])\n            cylinder(h = wall + 0.2, d = shaft_d + 2*wall);\n        // motor slot\n        translate([60/2 - motor_h/2 - wall, 0, -0.1])\n            cube([motor_h, motor_od, wall + 0.2], center = true);\n    }\n}\n\n// -------------------- Camera Tray -------------------\nmodule camera_tray() {\n    w = 30;\n    h = 20;\n    difference() {\n        cube([w, wall, h], center = true);\n        // camera slot\n        translate([0, 0, 0])\n            cube([w - 2*wall, wall + 0.2, h - 2*wall], center = true);\n    }\n}\n\n// -------------------- Assembly ----------------------\n// Yaw base (bottom)\nyaw_base();\n\n// Roll ring above yaw base\ntranslate([0, 0, wall])\n    roll_ring();\n\n// Pitch fork mounted on roll ring\ntranslate([0, 0, wall + 100/2])\n    rotate([90, 0, 0])\n        pitch_fork();\n\n// Camera tray inside pitch fork\ntranslate([0, 0, wall + 100/2 + 40/2])\n    rotate([0, 90, 0])\n        camera_tray();",
    "renders": true
  },
  {
    "mechanical_component": "universal",
    "openscad_code": "// Universal Workbench - 3D printable mechanical component\n// Dimensions: 120mm(W) x 60mm(D) x 80mm(H)\n// Wall thickness: 2mm throughout\n\n// Main dimensions\nbench_w = 120;\nbench_d = 60;\nbench_h = 80;\nleg_size = 20;\ntop_thick = 4;\nshelf_thick = 3;\nback_h = 30;\n\n// Workbench module\nmodule workbench() {\n    // Table top\n    difference() {\n        // Main top\n        translate([0, 0, bench_h - top_thick/2])\n            cube([bench_w, bench_d, top_thick], center=true);\n        \n        // Front chamfer\n        translate([0, bench_d/2 - 1, bench_h - 1])\n            rotate([45, 0, 0])\n            cube([bench_w, 2, 2], center=true);\n    }\n    \n    // Back panel\n    translate([0, bench_d/2 - 1, bench_h - back_h/2 - top_thick])\n        cube([bench_w - leg_size*2, 2, back_h], center=true);\n    \n    // Shelf\n    translate([0, 0, bench_h/3])\n        cube([bench_w - leg_size*2, bench_d - leg_size*2, shelf_thick], center=true);\n    \n    // Legs - using loop for repetition\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x * (bench_w/2 - leg_size/2), \n                  y * (bench_d/2 - leg_size/2), \n                  bench_h/2 - top_thick/2])\n            cube([leg_size, leg_size, bench_h - top_thick], center=true);\n    }\n    \n    // Support braces between legs\n    for(x = [-1, 1]) {\n        // Side braces\n        translate([x * (bench_w/2 - leg_size/2), 0, bench_h/2 - 10])\n            cube([leg_size, bench_d - leg_size, 2], center=true);\n    }\n    \n    for(y = [-1, 1]) {\n        // Front/back braces\n        translate([0, y * (bench_d/2 - leg_size/2), bench_h/2 - 10])\n            cube([bench_w - leg_size, leg_size, 2], center=true);\n    }\n    \n    // Tool peg board holes\n    for(i = [0:4]) {\n        for(j = [0:2]) {\n            translate([-bench_w/2 + 15 + i*20, \n                      bench_d/2 - 5, \n                      bench_h - back_h/2 - 5])\n                rotate([90, 0, 0])\n                cylinder(h=2, r=2, $fn=16);\n        }\n    }\n    \n    // Drawer\n    translate([0, 0, bench_h/2 + 5]) {\n        // Drawer box\n        difference() {\n            cube([bench_w - leg_size*2 - 10, 25, 15], center=true);\n            // Drawer cavity\n            cube([bench_w - leg_size*2 - 14, 21, 12], center=true);\n        }\n        \n        // Drawer handle\n        translate([0, 15, 0])\n            cube([20, 2, 5], center=true);\n    }\n    \n    // Vise mount holes\n    translate([bench_w/2 - 15, 0, bench_h - 2])\n        cylinder(h=4, r=3, $fn=16);\n    translate([-bench_w/2 + 15, 0, bench_h - 2])\n        cylinder(h=4, r=3, $fn=16);\n}\n\n// Render the workbench\nworkbench();",
    "renders": true
  },
  {
    "mechanical_component": "socket",
    "openscad_code": "// Standard hex socket (1/2\" drive) with detent-ball groove and through hole\n// Realistic proportions, 3D-print friendly (no overhangs > 45°)\n\n// Overall scale factor – final height ≈ 65 mm\nscale_factor = 1;\n\n// ---------- PARAMETERS ----------\ndrive_size      = 12.7 * scale_factor;   // 1/2\" square drive\nhex_size        = 19.0 * scale_factor;   // 19 mm hex (3/4\")\nbody_d          = 30.0 * scale_factor;   // Outer diameter of socket body\nbody_h          = 65.0 * scale_factor;   // Total height\nwall_thick      = 2.5 * scale_factor;    // Minimum wall thickness\nchamfer         = 1.5 * scale_factor;    // Light chamfers for printability\nball_d          = 4.0 * scale_factor;    // Spring-ball detent\nball_depth      = 1.2 * scale_factor;    // How far ball sticks in\nhex_depth       = body_h * 0.65;         // Depth of hex cavity\ndrive_depth     = body_h * 0.25;         // Depth of square drive\nknurl_h         = 15.0 * scale_factor;   // Height of knurled grip band\nknurl_ridges    = 36;                    // Number of grip ribs\n$fn             = 60;                    // Circle resolution\n\n// ---------- MAIN MODULE ----------\nmodule socket() {\n    difference() {\n        union() {\n            // Main cylindrical body\n            body();\n\n            // External knurled grip band\n            knurled_band();\n        }\n\n        // Remove internal features\n        internal_cavity();\n    }\n\n    // Add spring-ball groove\n    ball_detent();\n}\n\n// ---------- BODY ----------\nmodule body() {\n    // Lower chamfered cylinder\n    difference() {\n        cylinder(h = body_h, d = body_d, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = chamfer + 0.2, d1 = body_d - 2*chamfer, d2 = body_d, center = false);\n    }\n}\n\n// ---------- KNURLED GRIP ----------\nmodule knurled_band() {\n    band_pos = body_h - knurl_h - chamfer;\n    for (i = [0 : knurl_ridges - 1]) {\n        rotate([0, 0, i * 360 / knurl_ridges])\n            translate([0, body_d/2 - wall_thick/2, band_pos])\n                cube([wall_thick, wall_thick*2, knurl_h], center = true);\n    }\n}\n\n// ---------- INTERNAL VOIDS ----------\nmodule internal_cavity() {\n    // Hex socket\n    translate([0, 0, body_h - hex_depth])\n        rotate([0, 0, 30])\n            cylinder(h = hex_depth + 0.2, d = hex_size, $fn = 6, center = false);\n\n    // Square drive\n    translate([0, 0, 0])\n        rotate([0, 0, 45])\n            cube([drive_size, drive_size, drive_depth + 0.2], center = true);\n\n    // Through hole (optional – keeps print lightweight)\n    translate([0, 0, -0.1])\n        cylinder(h = body_h + 0.2, d = drive_size * 0.5, center = false);\n\n    // Top chamfer inside hex\n    translate([0, 0, body_h - hex_depth - chamfer])\n        rotate([0, 0, 30])\n            cylinder(h = chamfer + 0.2, d1 = hex_size, d2 = hex_size - 2*chamfer, $fn = 6, center = false);\n}\n\n// ---------- SPRING-BALL DETENT ----------\nmodule ball_detent() {\n    translate([0, body_d/2 - wall_thick - ball_d/2, drive_depth/2])\n        rotate([90, 0, 0])\n            difference() {\n                sphere(d = ball_d);\n                translate([0, -ball_d, -ball_d])\n                    cube([ball_d*2, ball_d, ball_d*2], center = true);\n            }\n}\n\n// ---------- RENDER ----------\nsocket();",
    "renders": true
  },
  {
    "mechanical_component": "lug",
    "openscad_code": "// Realistic Lug - Medium complexity OpenSCAD model\n// Dimensions: ~80mm total length, designed for 3D printing\n\n$fn = 32; // Smoother curves for realistic appearance\n\n// Main parameters\nlug_length = 80;\nlug_width = 40;\nlug_height = 35;\nwall_thickness = 2;\nbolt_hole_diameter = 6;\nbolt_head_diameter = 11;\nbolt_head_height = 4;\n\nmodule lug_body() {\n    difference() {\n        // Main body - rounded rectangular shape\n        union() {\n            // Central body\n            translate([0, 0, lug_height/2])\n                cube([lug_length, lug_width, lug_height], center=true);\n            \n            // Rounded ends\n            translate([(lug_length/2) - (lug_width/2), 0, lug_height/2])\n                cylinder(h=lug_height, r=lug_width/2, center=true);\n            translate([-(lug_length/2) + (lug_width/2), 0, lug_height/2])\n                cylinder(h=lug_height, r=lug_width/2, center=true);\n        }\n        \n        // Central hole for shaft/pipe\n        translate([0, 0, lug_height/2])\n            cylinder(h=lug_height + 2, r=15, center=true);\n        \n        // Chamfer edges slightly\n        translate([0, 0, -1])\n            cylinder(h=lug_height + 2, r1=14, r2=16, center=true);\n    }\n}\n\nmodule mounting_ears() {\n    // Left ear\n    translate([-(lug_length/2) - 10, 0, lug_height/2])\n        difference() {\n            cube([20, lug_width/2, lug_height], center=true);\n            // Bolt hole\n            translate([-(lug_length/2) - 10, 0, lug_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h=25, r=bolt_hole_diameter/2, center=true);\n            // Counterbore for bolt head\n            translate([-(lug_length/2) - 10, 0, lug_height/2 + 8])\n                rotate([90, 0, 0])\n                    cylinder(h=bolt_head_height + 1, r=bolt_head_diameter/2, center=true);\n        }\n    \n    // Right ear\n    translate([(lug_length/2) + 10, 0, lug_height/2])\n        difference() {\n            cube([20, lug_width/2, lug_height], center=true);\n            // Bolt hole\n            translate([(lug_length/2) + 10, 0, lug_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h=25, r=bolt_hole_diameter/2, center=true);\n            // Counterbore for bolt head\n            translate([(lug_length/2) + 10, 0, lug_height/2 + 8])\n                rotate([90, 0, 0])\n                    cylinder(h=bolt_head_height + 1, r=bolt_head_diameter/2, center=true);\n        }\n}\n\nmodule reinforcement_ribs() {\n    // Vertical ribs for strength\n    for (x = [-lug_length/3, lug_length/3]) {\n        translate([x, -lug_width/2 + wall_thickness, lug_height/2])\n            cube([wall_thickness, lug_width/2 - wall_thickness, lug_height - wall_thickness], center=false);\n        translate([x, 0, lug_height/2])\n            cube([wall_thickness, lug_width/2 - wall_thickness, lug_height - wall_thickness], center=false);\n    }\n    \n    // Horizontal ribs\n    translate([0, 0, lug_height - wall_thickness])\n        difference() {\n            cube([lug_length - lug_width, lug_width - wall_thickness, wall_thickness], center=true);\n            cylinder(h=wall_thickness + 1, r=14, center=true);\n        }\n}\n\nmodule rounding_edges() {\n    // Add small fillets to prevent layer splitting\n    for (x = [-lug_length/2 + lug_width/4, lug_length/2 - lug_width/4]) {\n        translate([x, lug_width/2 - wall_thickness, lug_height - wall_thickness])\n            rotate([90, 0, 0])\n                cylinder(h=wall_thickness*2, r=wall_thickness, center=true);\n        translate([x, -lug_width/2 + wall_thickness, lug_height - wall_thickness])\n            rotate([90, 0, 0])\n                cylinder(h=wall_thickness*2, r=wall_thickness, center=true);\n    }\n}\n\n// Assemble the complete lug\nunion() {\n    lug_body();\n    mounting_ears();\n    reinforcement_ribs();\n    rounding_edges();\n}",
    "renders": true
  },
  {
    "mechanical_component": "pivot",
    "openscad_code": "// Pivot mechanical component - medium complexity\n// Realistic style with 3D-printable features\n\n$fn = 32;\n\n// Main dimensions\nbase_width = 60;\nbase_thickness = 8;\nshaft_diameter = 12;\nshaft_length = 45;\nbearing_diameter = 20;\nbearing_thickness = 10;\nmount_hole_diameter = 4.2;\nmount_hole_spacing = 45;\n\n// Base plate with mounting holes\nmodule base() {\n    difference() {\n        // Main base\n        cube([base_width, base_width, base_thickness], center=true);\n        \n        // Mounting holes (4 corners)\n        for(x = [-1, 1])\n        for(y = [-1, 1]) {\n            translate([x * mount_hole_spacing/2, y * mount_hole_spacing/2, -1])\n                cylinder(d=mount_hole_diameter, h=base_thickness+2, center=true);\n        }\n        \n        // Center hole for shaft\n        translate([0, 0, -1])\n            cylinder(d=shaft_diameter+2, h=base_thickness+2, center=true);\n    }\n}\n\n// Rotating shaft assembly\nmodule rotating_shaft() {\n    union() {\n        // Main shaft\n        cylinder(d=shaft_diameter, h=shaft_length);\n        \n        // Top collar\n        translate([0, 0, shaft_length - 5])\n            cylinder(d=shaft_diameter + 6, h=5);\n            \n        // Keyway slot\n        translate([shaft_diameter/2 - 1, -2, shaft_length/2])\n            cube([2, 4, shaft_length - 10], center=true);\n    }\n}\n\n// Bearing housing\nmodule bearing_housing() {\n    difference() {\n        // Main housing\n        union() {\n            cylinder(d=bearing_diameter + 8, h=bearing_thickness);\n            // Mounting ears\n            for(angle = [0, 90, 180, 270]) {\n                rotate([0, 0, angle])\n                    translate([bearing_diameter/2 + 6, -4, 0])\n                        cube([8, 8, bearing_thickness]);\n            }\n        }\n        \n        // Bearing cavity\n        translate([0, 0, -1])\n            cylinder(d=bearing_diameter, h=bearing_thickness+2);\n            \n        // Mounting holes in ears\n        for(angle = [0, 90, 180, 270]) {\n            rotate([0, 0, angle])\n                translate([bearing_diameter/2 + 10, 0, bearing_thickness/2])\n                    cylinder(d=mount_hole_diameter, h=bearing_thickness+2, center=true);\n        }\n    }\n}\n\n// Positioning pins for alignment\nmodule positioning_pins() {\n    for(angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n            translate([base_width/2 - 8, 0, base_thickness/2])\n                cylinder(d=3, h=base_thickness, center=true);\n    }\n}\n\n// Assembly\nmodule pivot_assembly() {\n    // Base with positioning pins\n    union() {\n        base();\n        positioning_pins();\n    }\n    \n    // Bearing housing on base\n    translate([0, 0, base_thickness/2 + bearing_thickness/2])\n        bearing_housing();\n    \n    // Rotating shaft through bearing\n    translate([0, 0, base_thickness + bearing_thickness/2])\n        rotate([0, 0, 30])  // Rotated position\n        rotating_shaft();\n}\n\n// Render the complete pivot\npivot_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "nipple",
    "openscad_code": "// Mechanical Nipple Component - Medium Complexity\n// Realistic style with 3D-printable features\n\n$fn = 64;\n\n// Main dimensions\nnipple_height = 40;\nbase_diameter = 25;\ntip_diameter = 8;\nthread_height = 15;\nthread_diameter = 22;\nwall_thickness = 2;\n\nmodule nipple_base() {\n    // Main cylindrical base\n    difference() {\n        cylinder(h=thread_height, d=base_diameter, center=false);\n        // Central hollow for 3D printing\n        translate([0, 0, -0.1])\n            cylinder(h=thread_height+0.2, d=base_diameter-wall_thickness*2, center=false);\n    }\n    \n    // Threading detail - simplified knurls\n    for(i=[0:30]) {\n        rotate([0, 0, i*12])\n            translate([thread_diameter/2 - 1, 0, 0])\n                cube([2, 1.5, thread_height], center=true);\n    }\n}\n\nmodule nipple_body() {\n    // Tapered body from base to tip\n    hull() {\n        translate([0, 0, thread_height])\n            cylinder(h=0.1, d=base_diameter-4, center=false);\n        translate([0, 0, nipple_height-thread_height])\n            cylinder(h=0.1, d=tip_diameter*2, center=false);\n    }\n    \n    // Internal cavity\n    difference() {\n        cylinder(h1=base_diameter-4, h2=tip_diameter*2, h=nipple_height-thread_height, center=false);\n        translate([0, 0, wall_thickness])\n            cylinder(h1=base_diameter-4-wall_thickness*2, h2=tip_diameter*2-wall_thickness*2, h=nipple_height-thread_height-wall_thickness, center=false);\n    }\n}\n\nmodule nipple_tip() {\n    // Rounded tip\n    difference() {\n        translate([0, 0, nipple_height-thread_height])\n            sphere(d=tip_diameter*2);\n        // Hollow tip\n        translate([0, 0, nipple_height-thread_height-2])\n            sphere(d=tip_diameter*2-wall_thickness*2);\n    }\n    \n    // Small vent hole\n    translate([0, 0, nipple_height-thread_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=tip_diameter*2, d=2, center=true);\n}\n\nmodule mounting_flange() {\n    // Mounting flange at base\n    difference() {\n        translate([0, 0, -5])\n            cylinder(h=5, d=base_diameter+10, center=false);\n        translate([0, 0, -5])\n            cylinder(h=5.2, d=base_diameter+6, center=false);\n    }\n    \n    // Mounting holes\n    for(i=[0:3]) {\n        rotate([0, 0, i*90+45])\n            translate([(base_diameter+10)/2 - 4, 0, -2.5])\n                cylinder(h=5.2, d=3, center=true);\n    }\n}\n\nmodule structural_ribs() {\n    // Internal strengthening ribs\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([0, 0, thread_height/2])\n                cube([wall_thickness*2, base_diameter/2-4, thread_height-4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    nipple_base();\n    nipple_body();\n    nipple_tip();\n    mounting_flange();\n    structural_ribs();\n}",
    "renders": true
  },
  {
    "mechanical_component": "union",
    "openscad_code": "// Union Chair - Realistic Style, Medium Complexity\n// Overall dimensions: ~100mm wide x ~110mm deep x ~120mm tall\n\n// Main chair module\nmodule chair() {\n    \n    // Seat base - 2mm thick with 2mm walls\n    difference() {\n        // Main seat platform\n        translate([0, 0, 50]) \n            cube([100, 110, 4], center=true);\n        \n        // Lightening holes for material savings\n        for(x = [-30, 0, 30]) {\n            for(y = [-30, 0, 30]) {\n                translate([x, y, 52]) \n                    cylinder(h=5, r=8, center=true);\n            }\n        }\n    }\n    \n    // Seat cushion - upholstered look\n    translate([0, 0, 58]) \n        cube([96, 106, 12], center=true);\n    \n    // Backrest support posts\n    difference() {\n        // Left post\n        translate([-42, -45, 90]) \n            rotate([0, 15, 0]) \n                cylinder(h=70, r=5, center=true);\n        \n        // Right post\n        translate([42, -45, 90]) \n            rotate([0, 15, 0]) \n                cylinder(h=70, r=5, center=true);\n    }\n    \n    // Backrest frame\n    difference() {\n        // Main backrest\n        translate([0, -50, 105]) \n            cube([90, 6, 60], center=true);\n        \n        // Decorative cutouts\n        for(y = [80, 100, 120]) {\n            translate([0, -47, y]) \n                cube([70, 8, 8], center=true);\n        }\n    }\n    \n    // Backrest cushion\n    translate([0, -47, 105]) \n        cube([86, 8, 56], center=true);\n    \n    // Front legs\n    translate([-40, 40, 25]) \n        cylinder(h=50, r=6, center=true);\n    translate([40, 40, 25]) \n        cylinder(h=50, r=6, center=true);\n    \n    // Rear legs with rear support integration\n    difference() {\n        // Left rear leg\n        translate([-40, -40, 25]) \n            cylinder(h=50, r=6, center=true);\n        \n        // Right rear leg\n        translate([40, -40, 25]) \n            cylinder(h=50, r=6, center=true);\n    }\n    \n    // Support braces between legs\n    // Front brace\n    translate([0, 40, 10]) \n        rotate([90, 0, 0]) \n            cylinder(h=80, r=3, center=true);\n    \n    // Side braces\n    translate([-40, 0, 10]) \n        rotate([0, 90, 0]) \n            cylinder(h=80, r=3, center=true);\n    translate([40, 0, 10]) \n        rotate([0, 90, 0]) \n            cylinder(h=80, r=3, center=true);\n    \n    // Rear brace\n    translate([0, -40, 10]) \n        rotate([90, 0, 0]) \n            cylinder(h=80, r=3, center=true);\n    \n    // Armrest assembly\n    // Left armrest\n    translate([-55, -10, 75]) {\n        // Vertical support\n        difference() {\n            translate([0, 0, -20]) \n                cylinder(h=40, r=4, center=true);\n            \n            // Cable management hole\n            translate([0, -5, -20]) \n                cylinder(h=10, r=2, center=true);\n        }\n        \n        // Armrest pad\n        translate([0, 0, 15]) \n            cube([8, 50, 6], center=true);\n    }\n    \n    // Right armrest\n    translate([55, -10, 75]) {\n        // Vertical support\n        difference() {\n            translate([0, 0, -20]) \n                cylinder(h=40, r=4, center=true);\n            \n            // Cable management hole\n            translate([0, -5, -20]) \n                cylinder(h=10, r=2, center=true);\n        }\n        \n        // Armrest pad\n        translate([0, 0, 15]) \n            cube([8, 50, 6], center=true);\n    }\n    \n    // Optional: Casters for mobility\n    // Front casters\n    translate([-40, 40, 0]) {\n        sphere(r=3);\n        translate([0, 0, -3]) \n            cylinder(h=3, r=1, center=true);\n    }\n    \n    translate([40, 40, 0]) {\n        sphere(r=3);\n        translate([0, 0, -3]) \n            cylinder(h=3, r=1, center=true);\n    }\n}\n\n// Render the chair\nchair();",
    "renders": true
  },
  {
    "mechanical_component": "elbow",
    "openscad_code": "// Elbow mechanical component - realistic style, medium complexity\n// Pneumatic 90-degree elbow with flanges and reinforcement ribs\n\n// Overall dimensions\nelbow_radius = 40;          // Bend radius in mm\ntube_diameter = 20;         // Inner tube diameter\nwall_thickness = 2;         // Wall thickness for 3D printing\nflange_thickness = 4;       // Flange thickness\nflange_diameter = 35;       // Flange outer diameter\nbolt_hole_diameter = 4;     // Bolt hole size\nbolt_circle_diameter = 28;  // Bolt circle diameter\nnum_bolts = 4;              // Number of bolt holes per flange\n\n// Derived dimensions\nouter_diameter = tube_diameter + 2 * wall_thickness;\narm_length = 30;            // Straight section length from bend center\n\nmodule elbow_tube() {\n    // Create the straight sections\n    translate([0, -arm_length, 0])\n        rotate([0, 0, 90])\n            cylinder(h=arm_length, d=outer_diameter, $fn=32);\n    \n    translate([-arm_length, 0, 0])\n        rotate([0, 0, 0])\n            cylinder(h=arm_length, d=outer_diameter, $fn=32);\n    \n    // Create the curved section using hull of spheres\n    for (i = [0:5:90]) {\n        rotate([0, 0, i])\n            translate([elbow_radius * cos(i), -elbow_radius * sin(i), 0])\n                sphere(d=outer_diameter, $fn=16);\n    }\n}\n\nmodule inner_hollow() {\n    // Remove inner material to create hollow tube\n    translate([0, 0, -2])\n    scale([1, 1, 1.2]) {\n        translate([0, -arm_length, 0])\n            rotate([0, 0, 90])\n                cylinder(h=arm_length, d=tube_diameter, $fn=32);\n        \n        translate([-arm_length, 0, 0])\n            rotate([0, 0, 0])\n                cylinder(h=arm_length, d=tube_diameter, $fn=32);\n        \n        for (i = [0:5:90]) {\n            rotate([0, 0, i])\n                translate([elbow_radius * cos(i), -elbow_radius * sin(i), 0])\n                    sphere(d=tube_diameter, $fn=16);\n        }\n    }\n}\n\nmodule reinforcement_ribs() {\n    // Add structural reinforcement ribs\n    rib_thickness = 2;\n    rib_height = 6;\n    \n    // Outer ribs on the bend\n    for (i = [30:30:120]) {\n        rotate([0, 0, i])\n            translate([elbow_radius, 0, 0])\n                rotate([0, 90, 0])\n                    cube([rib_height, rib_thickness, outer_diameter + 4], center=true);\n    }\n    \n    // Straight section ribs\n    translate([-arm_length/2, -arm_length-5, 0])\n        rotate([0, 90, 0])\n            cube([rib_height, rib_thickness, outer_diameter + 4], center=true);\n    \n    translate([-arm_length-5, -arm_length/2, 0])\n        rotate([0, 0, 90])\n            rotate([0, 90, 0])\n                cube([rib_height, rib_thickness, outer_diameter + 4], center=true);\n}\n\nmodule flange_with_holes(position, rotation) {\n    translate(position)\n        rotate([0, 0, rotation]) {\n            // Main flange disk\n            cylinder(h=flange_thickness, d=flange_diameter, $fn=32);\n            \n            // Bolt holes\n            for (i = [0:360/num_bolts:360-360/num_bolts]) {\n                rotate([0, 0, i])\n                    translate([bolt_circle_diameter/2, 0, -1])\n                        cylinder(h=flange_thickness+2, d=bolt_hole_diameter, $fn=16);\n            }\n            \n            // Center hole\n            translate([0, 0, -1])\n                cylinder(h=flange_thickness+2, d=tube_diameter, $fn=32);\n        }\n}\n\n// Main assembly\nunion() {\n    // Basic elbow tube\n    difference() {\n        elbow_tube();\n        inner_hollow();\n    }\n    \n    // Reinforcement structure\n    reinforcement_ribs();\n    \n    // End flanges\n    flange_with_holes([0, -arm_length-flange_thickness, 0], 0);\n    flange_with_holes([-arm_length-flange_thickness, 0, 0], 90);\n    \n    // Gusset plates at flange joints\n    translate([0, -arm_length-flange_thickness/2, outer_diameter/2])\n        cube([outer_diameter+4, flange_thickness, 6], center=true);\n    \n    translate([-arm_length-flange_thickness/2, 0, outer_diameter/2])\n        rotate([0, 0, 90])\n            cube([outer_diameter+4, flange_thickness, 6], center=true);\n}",
    "renders": true
  },
  {
    "mechanical_component": "tee",
    "openscad_code": "// Realistic Tee mechanical_component - Medium complexity\n// 3D printable structural tee connector for 25mm tubing\n\n$fn = 32;\nwall_thickness = 2;\ntube_diameter = 25;\ntube_length = 60;\nflange_diameter = 35;\nflange_thickness = 3;\nbolt_diameter = 5;\nbolt_spacing = 20;\nfillet_radius = 2;\n\nmodule main_body() {\n    // Main tube along X-axis\n    difference() {\n        union() {\n            // Main tube\n            cylinder(h = tube_length, d = tube_diameter + 2*wall_thickness, center = true);\n            \n            // Flanges at ends\n            translate([tube_length/2, 0, 0])\n                cylinder(h = flange_thickness, d = flange_diameter, center = true);\n            translate([-tube_length/2, 0, 0])\n                cylinder(h = flange_thickness, d = flange_diameter, center = true);\n            \n            // Fillet at center junction\n            sphere(r = tube_diameter/2 + wall_thickness);\n        }\n        \n        // Central hollow\n        cylinder(h = tube_length + 2, d = tube_diameter, center = true);\n    }\n}\n\nmodule perpendicular_tube() {\n    // Tube along Z-axis\n    difference() {\n        union() {\n            // Main tube\n            translate([0, 0, tube_length/2])\n                cylinder(h = tube_length, d = tube_diameter + 2*wall_thickness, center = true);\n                \n            // Flange at end\n            translate([0, 0, tube_length])\n                cylinder(h = flange_thickness, d = flange_diameter, center = true);\n                \n            // Reinforcement ribs\n            for (angle = [0:120:359]) {\n                rotate([0, 0, angle])\n                    translate([0, tube_diameter/2 + wall_thickness/2, tube_length/4])\n                        cube([wall_thickness, tube_diameter/2 + wall_thickness, tube_length/2], center = true);\n            }\n        }\n        \n        // Central hollow\n        translate([0, 0, tube_length/2])\n            cylinder(h = tube_length + 2, d = tube_diameter, center = true);\n    }\n}\n\nmodule bolt_holes() {\n    // Bolt holes in flanges\n    for (axis = [[tube_length/2, 0, 0], [-tube_length/2, 0, 0], [0, 0, tube_length]]) {\n        for (angle = [0:90:270]) {\n            translate(axis)\n                rotate([90, 0, angle])\n                    translate([bolt_spacing/2, 0, 0])\n                        rotate([0, 90, 0])\n                            cylinder(h = flange_thickness + 2, d = bolt_diameter, center = true);\n        }\n    }\n}\n\nmodule chamfers() {\n    // Chamfers for printability\n    difference() {\n        union();\n        \n        // Remove sharp edges\n        translate([tube_length/2 + flange_thickness/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = tube_diameter + 2*wall_thickness + 4, d = tube_diameter + 2*wall_thickness + 4, center = true);\n                \n        translate([-tube_length/2 - flange_thickness/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = tube_diameter + 2*wall_thickness + 4, d = tube_diameter + 2*wall_thickness + 4, center = true);\n                \n        translate([0, 0, tube_length + flange_thickness/2])\n            cylinder(h = tube_diameter + 2*wall_thickness + 4, d = tube_diameter + 2*wall_thickness + 4, center = true);\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        main_body();\n        perpendicular_tube();\n    }\n    \n    bolt_holes();\n    chamfers();\n}",
    "renders": true
  },
  {
    "mechanical_component": "cross",
    "openscad_code": "// Cross-shaped mechanical component with structural reinforcements\n// Overall size: 100mm x 100mm x 20mm\n\n$fn = 32;\n\n// Main cross body\nmodule cross_body() {\n    difference() {\n        union() {\n            // Central hub with rounded edges\n            cylinder(h=20, r1=12, r2=12);\n            \n            // Horizontal arm (80mm total width)\n            translate([-40, -8, 0])\n                cube([80, 16, 20]);\n            \n            // Vertical arm (80mm total height)\n            translate([-8, -40, 0])\n                cube([16, 80, 20]);\n        }\n        \n        // Central hole for shaft (8mm diameter)\n        translate([0, 0, -1])\n            cylinder(h=22, r1=4, r2=4);\n    }\n}\n\n// Reinforcement ribs on arms\nmodule reinforcement_ribs() {\n    // Horizontal arm ribs\n    for(pos = [-25, 0, 25]) {\n        translate([pos, -12, 5])\n            cube([2, 24, 10]);\n    }\n    \n    // Vertical arm ribs\n    for(pos = [-25, 0, 25]) {\n        translate([-12, pos, 5])\n            cube([24, 2, 10]);\n    }\n}\n\n// Mounting holes (4mm diameter)\nmodule mounting_holes() {\n    // Holes on horizontal arm ends\n    translate([-35, 0, -1])\n        cylinder(h=22, r1=2, r2=2);\n    translate([35, 0, -1])\n        cylinder(h=22, r1=2, r2=2);\n    \n    // Holes on vertical arm ends\n    translate([0, -35, -1])\n        cylinder(h=22, r1=2, r2=2);\n    translate([0, 35, -1])\n        cylinder(h=22, r1=2, r2=2);\n}\n\n// Chamfers on arm edges\nmodule edge_chamfers() {\n    difference() {\n        // Horizontal arm chamfers\n        translate([-40, -8, 18])\n            cube([80, 16, 2]);\n        translate([-40, -8, 0])\n            cube([80, 16, 2]);\n        \n        // Vertical arm chamfers\n        translate([-8, -40, 18])\n            cube([16, 80, 2]);\n        translate([-8, -40, 0])\n            cube([16, 80, 2]);\n    }\n    \n    // Chamfer cutters\n    translate([0, 0, -1])\n        difference() {\n            cylinder(h=22, r1=12, r2=12);\n            cylinder(h=22, r1=10, r2=10);\n        }\n}\n\n// Main assembly\nunion() {\n    cross_body();\n    reinforcement_ribs();\n    mounting_holes();\n    edge_chamfers();\n}",
    "renders": true
  },
  {
    "mechanical_component": "swivel",
    "openscad_code": "// Realistic Swivel Joint Mechanical Component\n// Medium complexity 3D printable swivel mechanism\n\n$fn = 32;\n\n// Main dimensions\nswivel_diameter = 60;\nbase_height = 15;\npost_diameter = 20;\npost_height = 40;\nbearing_diameter = 30;\nbearing_height = 12;\nmounting_hole_diameter = 8;\nmounting_hole_spacing = 45;\n\nmodule base_plate() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = base_height, d = swivel_diameter, center = true);\n        \n        // Central hole for post\n        cylinder(h = base_height + 2, d = post_diameter + 4, center = true);\n        \n        // Mounting holes\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([mounting_hole_spacing/2, 0, -base_height/2])\n                    cylinder(h = base_height + 2, d = mounting_hole_diameter, center = false);\n        }\n    }\n}\n\nmodule thrust_bearing() {\n    difference() {\n        // Bearing outer race\n        cylinder(h = bearing_height, d = bearing_diameter, center = true);\n        \n        // Inner race hole\n        cylinder(h = bearing_height + 2, d = bearing_diameter - 10, center = true);\n        \n        // Ball bearing grooves\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30])\n                translate([bearing_diameter/2 - 4, 0, -bearing_height/2])\n                    sphere(d = 4);\n        }\n    }\n}\n\nmodule swivel_post() {\n    union() {\n        // Main post cylinder\n        cylinder(h = post_height, d = post_diameter, center = false);\n        \n        // Top mounting flange\n        translate([0, 0, post_height])\n            cylinder(h = 8, d = 30, center = false);\n            \n        // Reinforcement ribs\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([post_diameter/2 - 2, -2, 0])\n                    cube([4, 4, post_height]);\n        }\n    }\n}\n\nmodule lubrication_fittings() {\n    // Grease fittings on base\n    translate([swivel_diameter/2 - 8, 0, base_height/2 + 3])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d1 = 6, d2 = 4, center = false);\n    \n    translate([swivel_diameter/2 - 8, 0, -base_height/2 - 3])\n        rotate([-90, 0, 0])\n            cylinder(h = 8, d1 = 6, d2 = 4, center = false);\n}\n\nmodule assembly() {\n    // Base assembly\n    translate([0, 0, base_height/2])\n        base_plate();\n    \n    // Thrust bearing\n    translate([0, 0, base_height + bearing_height/2])\n        thrust_bearing();\n    \n    // Swivel post\n    translate([0, 0, base_height + bearing_height])\n        swivel_post();\n    \n    // Lubrication fittings\n    lubrication_fittings();\n    \n    // Chamfers and fillets on edges\n    translate([0, 0, base_height/2])\n        cylinder(h = 2, d1 = swivel_diameter - 4, d2 = swivel_diameter, center = true);\n    \n    translate([0, 0, base_height + bearing_height + post_height + 4])\n        cylinder(h = 2, d1 = 30, d2 = 26, center = true);\n}\n\n// Generate the complete swivel mechanism\nassembly();",
    "renders": true
  },
  {
    "mechanical_component": "rodend",
    "openscad_code": "// Rod End (Heim Joint) - Medium Complexity Realistic Model\n// Overall size: ~50mm diameter ball, ~100mm total length\n\n$fn = 50;  // Smooth curves for 3D printing\n\nmodule rod_end_assembly() {\n    // Main housing - threaded female portion\n    translate([0, 0, -15])\n    difference() {\n        // Main cylindrical body\n        cylinder(h = 30, r = 18);\n        \n        // Central bore for ball\n        sphere(r = 14);\n        \n        // Thread relief at bottom\n        translate([0, 0, 25])\n        cylinder(h = 8, r = 15);\n        \n        // Slot cuts for wrench flats\n        for(i = [0:1]) {\n            rotate([0, 0, i * 90])\n            translate([0, 20, 15])\n            cube([40, 4, 30], center = true);\n        }\n    }\n    \n    // Threaded shank portion\n    translate([0, 0, -35])\n    difference() {\n        cylinder(h = 20, r = 12);\n        \n        // Internal threading (simplified as grooves)\n        for(i = [0:5]) {\n            translate([0, 0, i * 3])\n            cylinder(h = 1, r = 10.5);\n        }\n    }\n    \n    // Ball joint sphere\n    translate([0, 0, 0])\n    sphere(r = 12);\n    \n    // Male threaded stud through ball\n    rotate([90, 0, 0])\n    difference() {\n        // Main stud\n        cylinder(h = 50, r = 6);\n        \n        // Threading grooves\n        for(i = [0:9]) {\n            translate([0, 0, -25 + i * 5])\n            cylinder(h = 2, r = 5.2);\n        }\n        \n        // Tapered end\n        translate([0, 0, 25])\n        cylinder(h = 5, r1 = 6, r2 = 4);\n    }\n    \n    // Retaining ring around ball\n    difference() {\n        translate([0, 0, 12])\n        cylinder(h = 8, r = 20);\n        \n        // Chamfer inner edge\n        translate([0, 0, 12])\n        cylinder(h = 8, r1 = 14.5, r2 = 15.5);\n    }\n    \n    // Grease fitting boss\n    translate([18, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 8, r = 4);\n        cylinder(h = 10, r = 2);\n    }\n    \n    // Structural ribs on housing\n    for(angle = [0:60:359]) {\n        rotate([0, 0, angle])\n        translate([15, 0, 0])\n        cube([6, 3, 25], center = true);\n    }\n    \n    // Safety wire holes\n    for(angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n        translate([0, 16, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 8, r = 1.5);\n    }\n}\n\nrod_end_assembly();",
    "renders": true
  },
  {
    "mechanical_component": "balljoint",
    "openscad_code": "// Ball-joint mechanical component\n// Medium complexity – printable in one piece with 2 mm wall thickness\n\n// overall scale factor\nsf = 1.0;\n\n// basic dimensions (mm)\nsocket_od      = 30*sf;          // outer Ø of socket\nsocket_wall    = 2*sf;           // wall thickness\nball_d         = 20*sf;          // ball Ø\nstem_d         = 12*sf;          // stem Ø\nstem_l         = 20*sf;          // stem length\nbase_d         = 26*sf;          // mounting base Ø\nbase_h         = 6*sf;           // mounting base thickness\nbolt_hole_d    = 5*sf;           // M5 clearance\ncap_bolts      = 3;              // number of cap screws\ncap_bolt_d     = 3*sf;           // screw head Ø\ncap_bolt_h     = 4*sf;           // screw head height\ncap_split      = 1.2*sf;         // intentional split gap for clamping\ncap_flange_h   = 3*sf;           // flange thickness around cap\ncap_flange_w   = 3*sf;           // flange width\n$fn            = 36;             // smoother curves\n\nmodule socket_half(angle=0) {\n    // half-shell of the socket with clamping flange\n    difference() {\n        union() {\n            // main shell\n            rotate([0, angle, 0])\n                difference() {\n                    sphere(d = socket_od);\n                    sphere(d = socket_od - 2*socket_wall);\n                }\n\n            // clamping flange\n            translate([0, 0, socket_od/2 - cap_flange_h/2])\n                cylinder(h = cap_flange_h, d = socket_od + 2*cap_flange_w, center=true);\n        }\n\n        // cut sphere to create inner cavity for ball\n        sphere(d = ball_d + 0.4);   // 0.2 mm clearance each side\n\n        // split line\n        rotate([0, 90, 0])\n            cube([socket_od*2, cap_split, socket_od*2], center=true);\n\n        // bolt holes in flange\n        for(i=[0:cap_bolts-1])\n            rotate([0,0,i*360/cap_bolts])\n                translate([socket_od/2 + cap_flange_w/2, 0, 0])\n                    rotate([90,0,0])\n                        cylinder(h = cap_flange_w + 1, d = cap_bolt_d + 0.5, center=true);\n    }\n}\n\nmodule ball_joint() {\n    // mounting base with central hole\n    difference() {\n        cylinder(h = base_h, d = base_d);\n        translate([0,0,-0.1])\n            cylinder(h = base_h + 0.2, d = bolt_hole_d);\n    }\n\n    // lower socket half\n    translate([0,0,base_h])\n        socket_half(0);\n\n    // upper socket half\n    translate([0,0,base_h])\n        rotate([180,0,0])\n            socket_half(0);\n\n    // ball with integral stem\n    translate([0,0,base_h + socket_od/2 - ball_d/2 + socket_wall])\n        union() {\n            sphere(d = ball_d);\n            translate([0,0,ball_d/2])\n                cylinder(h = stem_l, d = stem_d);\n            translate([0,0,ball_d/2 + stem_l])\n                sphere(d = stem_d);  // rounded tip\n        }\n}\n\n// render\nball_joint();",
    "renders": true
  },
  {
    "mechanical_component": "snap",
    "openscad_code": "// Snap module for 3D printing – medium complexity, realistic style\n// Overall size: ~110 mm long, ~35 mm wide, ~12 mm thick\n// Wall thickness ≈ 2 mm, no overhangs >45°\n\n// Basic snap dimensions\nsnap_len = 110;\nsnap_width = 35;\nsnap_thick = 12;\nwall = 2;\npin_d = 6;\npin_h = 8;\ngap = 2.5; // clearance for mating part\n\n// Helper module for rounded rectangle profile\nmodule rounded_rect(l, w, h, r) {\n    translate([0, 0, h/2])\n    minkowski() {\n        cube([l-2*r, w-2*r, h], center = true);\n        sphere(r);\n    }\n}\n\n// Main snap body\nmodule snap_body() {\n    difference() {\n        // Outer shell\n        rounded_rect(snap_len, snap_width, snap_thick, 3);\n\n        // Inner cutout to save material\n        translate([0, 0, wall])\n        rounded_rect(snap_len-wall*2, snap_width-wall*2, snap_thick-wall*2, 2);\n    }\n}\n\n// Flexing tongue with hook\nmodule tongue() {\n    translate([snap_len/2 - 5, 0, snap_thick/2])\n    difference() {\n        union() {\n            // Tongue beam\n            translate([0, 0, -snap_thick/4])\n            rounded_rect(40, snap_width*0.7, snap_thick/2, 2);\n\n            // Hook lip\n            translate([15, 0, -snap_thick/2 + 1])\n            cube([wall+1, snap_width*0.5, wall+1], center = true);\n        }\n\n        // Relief slot\n        translate([20, 0, 0])\n        cube([30, snap_width*0.5, snap_thick], center = true);\n    }\n}\n\n// Alignment pins for precise mating\nmodule pin(pos_x, pos_y) {\n    translate([pos_x, pos_y, snap_thick/2])\n    cylinder(h = pin_h, d = pin_d, $fn = 12);\n}\n\n// Pin holes in opposite side\nmodule pin_hole(pos_x, pos_y) {\n    translate([pos_x, pos_y, snap_thick/2])\n    cylinder(h = pin_h + 1, d = pin_d + gap, $fn = 12);\n}\n\n// Assembly\nunion() {\n    snap_body();\n    tongue();\n\n    // Two alignment pins\n    pin(-snap_len/4,  snap_width/3);\n    pin(-snap_len/4, -snap_width/3);\n\n    // Two matching holes\n    translate([snap_len/2, 0, 0])\n    difference() {\n        cube([0.01, 0.01, 0.01]); // dummy for difference\n        pin_hole( snap_len/4,  snap_width/3);\n        pin_hole( snap_len/4, -snap_width/3);\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "spigot",
    "openscad_code": "// Realistic Medium-Complexity Spigot (Outdoor Garden Tap)\n// Overall height ≈ 85 mm, suitable for FDM printing without support\n\n$fn = 36;               // global resolution for curved surfaces\nwall = 2;               // uniform wall thickness for printability\n\n// Main union\nunion() {\n    // 1. Wall-mount flange (Ø40 mm, 6 mm thick)\n    translate([0, 0, -3])\n        difference() {\n            cylinder(h = 6, d = 40);\n            cylinder(h = 7, d = 40 - 2*wall);  // hollow back\n        }\n\n    // 2. Short pipe stub (Ø20 mm, protrudes 15 mm)\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h = 15, d = 20);\n            cylinder(h = 16, d = 20 - 2*wall);\n        }\n\n    // 3. Main valve body (Ø28 mm, 35 mm long)\n    translate([0, 0, 15])\n        difference() {\n            cylinder(h = 35, d = 28);\n            cylinder(h = 36, d = 28 - 2*wall);\n            // hex flats for wrench (across flats = 26 mm)\n            for (a = [0:60:359])\n                rotate([0, 0, a])\n                    translate([13, 0, 17.5])\n                        cube([26, 1, 35], center = true);\n        }\n\n    // 4. Outlet spout (angled 30°, 30 mm long, Ø22 mm)\n    translate([0, 0, 50])\n        rotate([30, 0, 0])\n            difference() {\n                cylinder(h = 30, d = 22);\n                cylinder(h = 31, d = 22 - 2*wall);\n            }\n\n    // 5. Handle structure\n    // 5a. Stem (Ø12 mm, 25 mm tall)\n    translate([0, 0, 50])\n        difference() {\n            cylinder(h = 25, d = 12);\n            cylinder(h = 26, d = 12 - 2*wall);\n        }\n\n    // 5b. Cross-handle arms (4 spokes, 2 mm thick)\n    module spoke() {\n        translate([9, 0, 62.5])\n            rotate([0, 90, 0])\n                cylinder(h = 18, d = 4);\n    }\n    for (i = [0:90:359])\n        rotate([0, 0, i])\n            spoke();\n\n    // 5c. Rim ring (Ø30 mm, 3 mm thick)\n    translate([0, 0, 62.5])\n        difference() {\n            rotate_extrude()\n                translate([15, 0, 0])\n                    circle(d = 6);\n            rotate_extrude()\n                translate([15, 0, 0])\n                    circle(d = 6 - 2*wall);\n        }\n\n    // 6. Thread band indication (decorative shallow grooves)\n    module thread_ring(h) {\n        translate([0, 0, h])\n            difference() {\n                cylinder(h = 1, d = 28);\n                cylinder(h = 1.1, d = 28 - 2*wall - 1);\n            }\n    }\n    for (z = [20:3:47])\n        thread_ring(z);\n}",
    "renders": true
  },
  {
    "mechanical_component": "tenon",
    "openscad_code": "// Realistic medium-complexity tenon joint\n// Overall dimensions: 100 mm long × 40 mm wide × 40 mm tall\n// Designed for 3D-printing with 2 mm wall thickness and no overhangs\n\n$fn = 50;\n\nmodule tenon_block() {\n    // Main block (mortise side)\n    difference() {\n        cube([60, 40, 40], center = true);\n        \n        // Mortise cavity 40×20×20 mm\n        translate([-10, 0, 0])\n            cube([42, 24, 24], center = true);\n        \n        // Rounded inside edges of mortise\n        for (x=[-30, 30])\n            for (y=[-20, 20])\n                translate([x, y, 20])\n                    rotate([90, 0, 0])\n                        cylinder(h=1, r=2, center=true);\n        \n        // Fillets for stress relief\n        for (z=[-20, 20])\n            translate([30, 0, z])\n                rotate([0, 90, 0])\n                    cylinder(h=1, r=2, center=true);\n    }\n}\n\nmodule tenon_tongue() {\n    // Tongue protruding 40 mm from block\n    difference() {\n        // Main tongue body 40×20×20 mm\n        translate([50, 0, 0])\n            cube([40, 20, 20], center = true);\n        \n        // Taper for insertion ease\n        translate([70, 0, 0])\n            scale([1, 0.9, 0.9])\n                cube([10, 20, 20], center = true);\n    }\n    \n    // Wedges for tight fit\n    for (i=[-8, 8]) {\n        translate([58, i, 0])\n            rotate([0, 0, 45])\n                cube([4, 4, 18], center = true);\n    }\n    \n    // Glue grooves\n    for (z=[-8, 0, 8]) {\n        translate([50, 0, z])\n            rotate([0, 90, 0])\n                cylinder(h=20, r=1.5, center=true);\n    }\n}\n\nmodule shoulders() {\n    // Shoulders around tongue\n    for (side=[-1, 1]) {\n        translate([30, side*22, 0])\n            cube([2, 4, 40], center = true);\n    }\n    \n    for (vert=[-1, 1]) {\n        translate([30, 0, vert*22])\n            cube([2, 44, 4], center = true);\n    }\n}\n\nmodule alignment_pins() {\n    // Dowel pin holes\n    for (x=[-20, 20]) {\n        translate([x, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=40, r=2.5, center=true);\n    }\n    \n    // Corresponding pins\n    for (x=[-20, 20]) {\n        translate([60, x, 0])\n            rotate([0, 90, 0])\n                cylinder(h=10, r=2.4, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    tenon_block();\n    tenon_tongue();\n    shoulders();\n    alignment_pins();\n}",
    "renders": true
  },
  {
    "mechanical_component": "mortise",
    "openscad_code": "// Mortise lock body - realistic style, medium complexity\n// 3D-printable mortise lock case with keyhole and screw holes\n\n$fn = 50;\n\n// Main dimensions (mm)\nlock_length = 90;\nlock_width = 16;\nlock_height = 60;\nwall_thickness = 2.4;\n\n// Keyway dimensions\nkeyhole_width = 7;\nkeyhole_height = 30;\nkeyhole_depth = 8;\n\n// Latch dimensions\nlatch_diameter = 12;\nlatch_travel = 10;\n\n// Screw holes\nscrew_hole_diameter = 4;\nscrew_hole_depth = 8;\nscrew_positions = [[10, 10], [10, lock_height-10], [lock_length-10, 10], [lock_length-10, lock_height-10]];\n\n// Faceplate dimensions\nfaceplate_thickness = 2;\nfaceplate_width = 25;\n\n// Latch opening\nlatch_opening_x = lock_length - 15;\nlatch_opening_diameter = 14;\n\nmodule lock_body() {\n    difference() {\n        // Main body\n        cube([lock_length, lock_width, lock_height], center=false);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([lock_length - 2*wall_thickness, lock_width - wall_thickness, lock_height - 2*wall_thickness], center=false);\n        \n        // Keyhole slot\n        translate([lock_length/2 - keyhole_width/2, 0, lock_height/2 - keyhole_height/2])\n            cube([keyhole_width, keyhole_depth, keyhole_height]);\n        \n        // Keyhole circular part\n        translate([lock_length/2, 0, lock_height/2 + keyhole_height/2 - 5])\n            rotate([90, 0, 0])\n                cylinder(h=keyhole_depth, d=12);\n        \n        // Latch opening - front\n        translate([latch_opening_x, -1, lock_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=faceplate_thickness+2, d=latch_opening_diameter);\n        \n        // Latch opening - side\n        translate([latch_opening_x + latch_travel, 0, lock_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=lock_width, d=latch_opening_diameter);\n        \n        // Screw holes\n        for(pos = screw_positions) {\n            translate([pos[0], -1, pos[1]])\n                rotate([90, 0, 0])\n                    cylinder(h=screw_hole_depth+2, d=screw_hole_diameter, center=false);\n        }\n    }\n}\n\nmodule faceplate() {\n    translate([0, -faceplate_thickness, 0]) {\n        difference() {\n            // Main faceplate\n            cube([lock_length, faceplate_thickness, lock_height]);\n            \n            // Keyhole opening\n            translate([lock_length/2 - keyhole_width/2, 0, lock_height/2 - keyhole_height/2])\n                cube([keyhole_width, faceplate_thickness+1, keyhole_height]);\n            \n            translate([lock_length/2, 0, lock_height/2 + keyhole_height/2 - 5])\n                rotate([90, 0, 0])\n                    cylinder(h=keyhole_width+1, d=12);\n            \n            // Latch opening\n            translate([latch_opening_x, 0, lock_height/2])\n                rotate([0, 90, 0])\n                    cylinder(h=faceplate_thickness+1, d=latch_opening_diameter);\n            \n            // Screw holes through faceplate\n            for(pos = screw_positions) {\n                translate([pos[0], 0, pos[1]])\n                    rotate([90, 0, 0])\n                        cylinder(h=faceplate_thickness+1, d=screw_hole_diameter);\n            }\n        }\n    }\n}\n\n// Assembly\nlock_body();\nfaceplate();\n\n// Add subtle chamfers\nmodule chamfer_edge() {\n    translate([0, -1, 0]) {\n        for(i = [0:1]) {\n            mirror([i, 0, 0]) {\n                translate([i*lock_length, 0, 0]) {\n                    rotate([0, -90, 0])\n                        linear_extrude(height=lock_height)\n                            polygon(points=[[0,0],[wall_thickness,0],[0,wall_thickness]]);\n                }\n            }\n            mirror([0, 0, i]) {\n                translate([0, 0, i*lock_height]) {\n                    rotate([90, 0, 0])\n                        linear_extrude(height=lock_length)\n                            polygon(points=[[0,0],[wall_thickness,0],[0,wall_thickness]]);\n                }\n            }\n        }\n    }\n}\n\n// Add chamfers to edges\ntranslate([0, lock_width, 0]) {\n    chamfer_edge();\n    translate([0, -lock_width, 0]) {\n        rotate([0, 180, 0]) {\n            chamfer_edge();\n        }\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "splined",
    "openscad_code": "// Splined coupling hub – realistic, medium complexity\n// 35 mm OD, 20 mm tall, 12-tooth involute spline\n// Wall thickness ≈2 mm, printable without support\n\n$fn = 60;\n\n// ---------- PARAMETERS ----------\nhub_h = 20;            // total height\nhub_od = 35;           // outer diameter\nhub_id = 22;           // inner diameter before splines\nshaft_d = 10;          // central through-hole\ntooth_cnt = 12;        // number of spline teeth\ntooth_h = 2;           // radial tooth height\ntooth_w = 3;           // chordal tooth width at pitch circle\nbase_thick = 2;        // wall under teeth\nflange_h = 4;          // top locating flange\nkey_w = 4; key_h = 2;  // optional keyway on shaft hole\n\n// ---------- MODULES ----------\nmodule hub_body() {\n    difference() {\n        // main cylinder\n        cylinder(h = hub_h, d = hub_od);\n        // central hole\n        translate([0, 0, -1])\n            cylinder(h = hub_h + 2, d = shaft_d);\n    }\n}\n\nmodule spline_teeth() {\n    pitch_r = hub_id / 2 + tooth_h / 2;\n    for (i = [0 : tooth_cnt - 1])\n        rotate([0, 0, i * 360 / tooth_cnt])\n            translate([pitch_r, 0, base_thick])\n                cube([tooth_w, tooth_h, hub_h - base_thick - flange_h], center = true);\n}\n\nmodule flange() {\n    difference() {\n        cylinder(h = flange_h, d = hub_od);\n        cylinder(h = flange_h + 1, d = hub_id + tooth_h * 2 + 0.5);\n    }\n}\n\nmodule keyway() {\n    translate([-key_w/2, shaft_d/2, -1])\n        cube([key_w, key_h + shaft_d/2, hub_h + 2]);\n}\n\n// ---------- MAIN ----------\nunion() {\n    hub_body();\n    spline_teeth();\n    translate([0, 0, hub_h - flange_h])\n        flange();\n    keyway();\n}",
    "renders": true
  },
  {
    "mechanical_component": "threaded",
    "openscad_code": "// Threaded Furniture Connector - Medium Complexity\n// A realistic threaded mechanical component for furniture assembly\n\n// Global parameters\n$fn = 50;  // Smooth curves\n\n// Main component dimensions\nmodule threaded_connector() {\n    // Outer sleeve with internal threads\n    difference() {\n        // Main sleeve body\n        cylinder(h = 40, d = 30);\n        \n        // Internal threaded hole\n        translate([0, 0, -1])  // Ensure complete cut\n            cylinder(h = 42, d = 20);\n    }\n    \n    // External threads on the sleeve\n    for (i = [0:9]) {\n        rotate([0, 0, i * 36])\n            translate([0, 0, i * 3.5])\n                thread_profile();\n    }\n    \n    // Top flange for furniture mounting\n    translate([0, 0, 40])\n        cylinder(h = 8, d = 45);\n    \n    // Mounting holes in flange\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([15, 0, 44])\n                cylinder(h = 10, d = 5);\n    }\n    \n    // Bottom hexagonal section for wrench\n    translate([0, 0, -5])\n        cylinder(h = 10, d1 = 30, d2 = 25);\n    \n    // Reinforcement ribs\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([13, 0, 20])\n                cube([2, 15, 40], center = true);\n    }\n}\n\n// Thread profile module\nmodule thread_profile() {\n    // Single thread segment\n    rotate_extrude(angle = 36, $fn = 10)\n        translate([10, 0, 0])\n            polygon(points = [\n                [0, 0],\n                [0.5, 0],\n                [0.5, 2],\n                [0, 2.5]\n            ]);\n}\n\n// Insert pin (threaded rod portion)\nmodule threaded_pin() {\n    // Main pin body\n    difference() {\n        cylinder(h = 60, d = 19.5);\n        \n        // Create threads by subtracting grooves\n        for (i = [0:14]) {\n            translate([0, 0, i * 3.5])\n                rotate([0, 0, 18])\n                    cylinder(h = 2, d = 22);\n        }\n    }\n    \n    // Tapered end for easy insertion\n    translate([0, 0, 60])\n        cylinder(h = 10, d1 = 19.5, d2 = 15);\n    \n    // Head with hex socket\n    difference() {\n        translate([0, 0, -15])\n            cylinder(h = 15, d = 30);\n        \n        // Hex socket\n        translate([0, 0, -10])\n            cylinder(h = 10, d = 20, $fn = 6);\n    }\n    \n    // Washer seat\n    translate([0, 0, -15.5])\n        cylinder(h = 1.5, d = 25);\n}\n\n// Assembly - show both parts\ntranslate([-25, 0, 0]) threaded_connector();\ntranslate([25, 0, 0]) threaded_pin();",
    "renders": true
  },
  {
    "mechanical_component": "barbed",
    "openscad_code": "// Barbed hose-barb 1\" BSPP bulkhead union – 3D-printable (2 mm walls, no overhangs >45°)\n// Overall length ≈ 82 mm, largest OD ≈ 55 mm – fits inside 150 mm cube\n\n// ------------- parameters -------------\nwall          = 2;          // minimum wall thickness for FDM\nbarb_d        = 17;         // external Ø of hose-barb\nbarb_core_d   = barb_d - 2*wall;\nbarb_len      = 30;\nbarb_count    = 5;          // number of barb rings\nbarb_pitch    = barb_len/(barb_count + 0.5);\n\nhex_d         = 30;         // wrench flat across hex\nhex_h         = 10;\n\nthread_d      = 33.249;     // 1\" BSPP Ø\nthread_pitch  = 2.309;\nthread_len    = 15;\nthread_apex   = thread_pitch * 0.866; // ISO 60° peak height\n\nbulkhead_flange_d = 55;\nbulkhead_flange_h = 4;\n\n// ------------- modules -------------\nmodule barb_profile()          // 2D profile of a single barb tooth\n{\n    difference() {\n        square([barb_len/2, barb_d/2], center=false);\n        translate([0, barb_core_d/2])\n            square([barb_len/2, barb_d/2 - barb_core_d/2], center=false);\n    }\n}\n\nmodule barb_rings()\n{\n    for(i=[0:barb_count-1])\n    {\n        translate([0, 0, i*barb_pitch])\n            rotate_extrude($fn=60)\n                barb_profile();\n    }\n}\n\nmodule hex_nut(h)\n{\n    cylinder(h=h, d=hex_d, $fn=6);\n}\n\nmodule bspp_thread(n_turns)\n{\n    for(t=[0:n_turns-1])\n    {\n        translate([0, 0, t*thread_pitch])\n            rotate_extrude($fn=60)\n                polygon(points=[\n                    [thread_d/2 - thread_apex, 0],\n                    [thread_d/2,               thread_apex],\n                    [thread_d/2 + thread_apex, 0],\n                    [thread_d/2,               -thread_apex*0.1] // truncated root\n                ]);\n    }\n}\n\nmodule bulkhead_flange()\n{\n    cylinder(h=bulkhead_flange_h, d=bulkhead_flange_d, $fn=64);\n}\n\n// ------------- assembly -------------\nunion()\n{\n    // hose-barb side A\n    barb_rings();\n\n    // hex drive\n    translate([0, 0, barb_len + 1])\n        hex_nut(hex_h);\n\n    // BSPP male thread side A\n    translate([0, 0, barb_len + 1 + hex_h])\n        bspp_thread(ceil(thread_len/thread_pitch));\n\n    // bulkhead flange\n    translate([0, 0, barb_len + 1 + hex_h + thread_len])\n        bulkhead_flange();\n\n    // BSPP male thread side B (mirror image)\n    mirror([0, 0, 1])\n    {\n        translate([0, 0, -(bulkhead_flange_h + thread_len)])\n            bspp_thread(ceil(thread_len/thread_pitch));\n\n        translate([0, 0, -(bulkhead_flange_h + thread_len + hex_h)])\n            hex_nut(hex_h);\n\n        translate([0, 0, -(bulkhead_flange_h + thread_len + hex_h + barb_len)])\n            barb_rings();\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "quick",
    "openscad_code": "// Quick office chair – medium complexity, 3D-printable\n// Overall footprint ~120 mm wide × 110 mm deep × 140 mm high\n\n// Parameters\nseat_w   = 110;\nseat_d   = 100;\nseat_h   = 10;\nback_h   = 80;\narm_w    = 25;\narm_h    = 15;\ngas_r    = 15;\nbase_r   = 100;\nwheel_r  = 12;\nwall_t   = 2;\n\n// Main assembly\nmodule chair() {\n    // Seat cushion – hollowed box for printability\n    difference() {\n        translate([0, 0, seat_h/2]) cube([seat_w, seat_d, seat_h], center=true);\n        translate([0, 0, seat_h/2])\n            cube([seat_w-wall_t*2, seat_d-wall_t*2, seat_h+0.1], center=true);\n    }\n\n    // Backrest\n    difference() {\n        translate([0, -seat_d/2-3, seat_h+back_h/2])\n            cube([seat_w*0.8, wall_t, back_h], center=true);\n        translate([0, -seat_d/2-3-0.05, seat_h+back_h/2])\n            cube([seat_w*0.8-wall_t*2, wall_t+0.1, back_h-wall_t*2], center=true);\n    }\n\n    // Arms\n    module arm(offset_x) {\n        union() {\n            // Vertical post\n            translate([offset_x, 0, seat_h+arm_h/2])\n                cube([wall_t, seat_d*0.6, arm_h], center=true);\n            // Horizontal rest\n            translate([offset_x, seat_d*0.15, seat_h+arm_h])\n                cube([arm_w, wall_t, wall_t], center=true);\n        }\n    }\n    arm( seat_w/2 - arm_w/2);\n    arm(-seat_w/2 + arm_w/2);\n\n    // Gas cylinder\n    cylinder(h=50, r=gas_r, center=false);\n\n    // 5-star base\n    difference() {\n        cylinder(h=wall_t, r=base_r, center=false);\n        for (a=[0:72:360-1])\n            rotate([0,0,a])\n                translate([base_r*0.6, 0, -0.05])\n                    cube([base_r*0.4, wall_t*2, wall_t+0.1], center=true);\n    }\n\n    // Wheels\n    module wheel(pos_x, pos_y) {\n        translate([pos_x, pos_y, wall_t])\n            sphere(r=wheel_r);\n    }\n    for (a=[0:72:360-1]) {\n        px = cos(a)*base_r*0.8;\n        py = sin(a)*base_r*0.8;\n        wheel(px, py);\n    }\n}\n\nchair();",
    "renders": true
  },
  {
    "mechanical_component": "bayonet",
    "openscad_code": "// Bayonet Mechanical Component - Realistic Style, Medium Complexity\n\n// Parameters\nblade_length = 100;\nblade_width = 25;\nblade_thickness = 3;\nhandle_length = 80;\nhandle_diameter = 20;\nguard_width = 40;\nguard_thickness = 8;\nring_diameter = 28;\nring_thickness = 5;\n\n// Blade module with fuller groove\nmodule bayonet_blade() {\n    // Main blade body\n    difference() {\n        // Blade profile\n        hull() {\n            translate([0, 0, -blade_thickness/2])\n                cube([blade_length, blade_width, blade_thickness], center=false);\n            translate([blade_length-30, 0, -blade_thickness/2])\n                cube([30, blade_width*0.6, blade_thickness], center=false);\n            translate([blade_length-1, 0, -blade_thickness/2])\n                cube([1, blade_width*0.2, blade_thickness], center=false);\n        }\n        \n        // Fuller groove\n        translate([blade_length*0.3, blade_width/2-2, -blade_thickness/2-0.1])\n            cube([blade_length*0.5, 4, blade_thickness+0.2], center=false);\n        translate([blade_length*0.3, blade_width/2-2-4, -blade_thickness/2-0.1])\n            cube([blade_length*0.5, 4, blade_thickness+0.2], center=false);\n    }\n    \n    // Blood channel edge\n    for(i = [0:1]) {\n        mirror([0, i, 0]) {\n            translate([blade_length*0.7, blade_width/2-1, -blade_thickness/2-0.1])\n                cube([blade_length*0.2, 2, blade_thickness+0.2], center=false);\n        }\n    }\n}\n\n// Handle with grip rings\nmodule bayonet_handle() {\n    difference() {\n        // Main handle cylinder\n        cylinder(h = handle_length, d = handle_diameter, center = false);\n        \n        // Grip rings\n        for(i = [0:5]) {\n            translate([0, 0, 5 + i*12])\n                cylinder(h = 3, d = handle_diameter-4, center = false);\n        }\n    }\n    \n    // End cap\n    translate([0, 0, handle_length])\n        cylinder(h = 8, d1 = handle_diameter, d2 = handle_diameter-4, center = false);\n}\n\n// Guard with muzzle ring\nmodule bayonet_guard() {\n    union() {\n        // Main guard block\n        translate([-guard_thickness/2, -guard_width/2, 0])\n            cube([guard_thickness, guard_width, blade_thickness+4], center=false);\n        \n        // Muzzle ring\n        translate([guard_thickness/2, 0, blade_thickness/2+2])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h = ring_thickness, d = ring_diameter, center = true);\n                cylinder(h = ring_thickness+0.2, d = ring_diameter-8, center = true);\n            }\n        \n        // Reinforcement ribs\n        for(i = [-1:2:1]) {\n            translate([-guard_thickness/2-1, i*(guard_width/2-5), 0])\n                cube([guard_thickness+2, 5, blade_thickness+4], center=false);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Blade\n    translate([handle_length, 0, 0])\n        bayonet_blade();\n    \n    // Handle\n    rotate([0, 90, 0])\n        bayonet_handle();\n    \n    // Guard at handle/blade junction\n    translate([handle_length, 0, 0])\n        bayonet_guard();\n    \n    // Locking lug\n    translate([handle_length-10, 0, -blade_thickness/2-3])\n        cube([8, 12, 3], center=false);\n    \n    // Spring clip\n    translate([handle_length-15, handle_diameter/2+2, -blade_thickness/2-1])\n        difference() {\n            cube([20, 4, blade_thickness+2], center=false);\n            translate([2, 2, -0.1])\n                cube([16, 4, blade_thickness+2.2], center=false);\n        }\n}",
    "renders": true
  },
  {
    "mechanical_component": "threadlock",
    "openscad_code": "// Threadlock - Medium complexity realistic mechanical component\n// Size: ~70mm diameter, 35mm height\n\n$fn = 50;\n\n// Main dimensions\nbody_d = 70;\nbody_h = 25;\ntop_d = 74;\ntop_h = 10;\ninner_d = 30;\ninner_h = 20;\nthread_pitch = 5;\nthread_depth = 2;\ngrip_width = 8;\ngrip_h = 15;\ngrip_count = 8;\nbase_thickness = 3;\nwall_thickness = 2.5;\n\nmodule main_body() {\n    // Outer cylindrical body\n    difference() {\n        cylinder(d=body_d, h=body_h);\n        \n        // Hollow center\n        translate([0, 0, base_thickness])\n            cylinder(d=inner_d, h=body_h);\n    }\n    \n    // Top lip/flange\n    translate([0, 0, body_h])\n        cylinder(d1=body_d, d2=top_d, h=top_h);\n}\n\nmodule grip_ridges() {\n    // Create grip ridges around the circumference\n    for(i = [0:grip_count-1]) {\n        rotate([0, 0, i * (360/grip_count)])\n            translate([body_d/2 - grip_width/2, 0, 0])\n                cube([grip_width, grip_width, grip_h], center=true);\n    }\n}\n\nmodule internal_threads() {\n    // Create internal thread pattern\n    thread_turns = floor(inner_h / thread_pitch);\n    \n    for(i = [0:thread_turns-1]) {\n        translate([0, 0, base_thickness + i * thread_pitch])\n            rotate([0, 0, i * 30])\n                linear_extrude(height=thread_pitch, twist=30)\n                    circle(d=inner_d + thread_depth, $fn=6);\n    }\n}\n\nmodule alignment_pins() {\n    // Add alignment pins for proper seating\n    pin_d = 4;\n    pin_h = 8;\n    \n    for(angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n            translate([(body_d - pin_d)/2 - wall_thickness, 0, 0])\n                cylinder(d=pin_d, h=pin_h);\n    }\n}\n\nmodule base_reinforcement() {\n    // Reinforcement ribs at base\n    rib_w = 3;\n    rib_h = 8;\n    \n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([inner_d/2 + wall_thickness, 0, 0])\n                cube([body_d/2 - inner_d/2 - wall_thickness, rib_w, rib_h]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    main_body();\n    \n    // Grip enhancement\n    grip_ridges();\n    \n    // Internal features\n    translate([0, 0, 0]) {\n        difference() {\n            // Threaded section\n            cylinder(d=inner_d + 2*thread_depth, h=inner_h);\n            \n            // Internal threads\n            internal_threads();\n        }\n    }\n    \n    // Base reinforcement\n    base_reinforcement();\n    \n    // Alignment features\n    alignment_pins();\n}",
    "renders": true
  },
  {
    "mechanical_component": "expansion",
    "openscad_code": "// Expandable Peg-Board Display Rack\n// Medium-complexity mechanical component: telescoping frame with adjustable peg rows\n// Max footprint 120 mm x 80 mm, height 140 mm\n\n$fn = 36;  // smooth curves for printing\n\n// Overall dimensions\nrail_w = 6;          // wall thickness of rails\nrail_h = 8;\npeg_d = 5;           // peg diameter\npeg_gap = 20;        // spacing between pegs\nbase_h = 8;\nmax_ext = 100;       // max slide extension\n\nmodule peg(d=peg_d, h=20) {\n    // printable peg without overhangs\n    difference() {\n        cylinder(d1 = d+2, d2 = d, h = h);\n        cylinder(d = d-2, h = h+1);  // light-weight hole\n    }\n}\n\nmodule peg_row(count=5) {\n    for (i = [0:count-1])\n        translate([i*peg_gap, 0, 0])\n            peg();\n}\n\nmodule telescoping_rail(len=max_ext) {\n    // outer rail\n    difference() {\n        cube([len, rail_w, rail_h], center=true);\n        translate([0, 0, rail_h/2-1])\n            cube([len-4, rail_w-4, rail_h], center=true);\n    }\n    \n    // inner rail\n    translate([len-2, 0, 0])\n        cube([max_ext-len+2, rail_w-2, rail_h-2], center=true);\n}\n\nmodule frame_base() {\n    // sturdy base plate\n    cube([120, 80, base_h], center=true);\n    \n    // mounting slots\n    for (x = [-50:50:50])\n        for (y = [-30:30:30])\n            translate([x, y, -base_h/2])\n                cylinder(d = 4, h = base_h+1, center=true);\n}\n\nmodule back_panel(h=120) {\n    // peg board back with holes\n    difference() {\n        cube([100, 6, h], center=true);\n        for (i = [0:4])\n            for (j = [0:4])\n                translate([-40 + i*20, 0, -50 + j*20])\n                    rotate([90, 0, 0])\n                        cylinder(d = 4, h = 10, center=true);\n    }\n}\n\nmodule adjustable_assembly() {\n    // left rail\n    translate([-50, -20, 70])\n        rotate([0, 90, 0])\n            telescoping_rail(80);\n    \n    // right rail\n    translate([-50,  20, 70])\n        rotate([0, 90, 0])\n            telescoping_rail(80);\n    \n    // peg rows on sliders\n    translate([-40, -20, 80])\n        peg_row();\n    translate([-40,  20, 80])\n        peg_row();\n    \n    // back panel\n    translate([0, 0, 65])\n        back_panel();\n}\n\n// Main assembly\nunion() {\n    frame_base();\n    adjustable_assembly();\n}",
    "renders": true
  },
  {
    "mechanical_component": "corrugated",
    "openscad_code": "// Corrugated metal stool with realistic proportions\n// Overall height 450mm, seat diameter 300mm\n\n// Parameters\nseat_d = 300;           // Seat diameter\nleg_h = 400;            // Leg height\ncorrugation_w = 10;     // Width of each corrugation\ncorrugation_d = 3;      // Depth of corrugations\nwall_t = 2;             // Wall thickness for 3D printing\nleg_t = 15;             // Leg thickness\nbracing_h = 200;        // Cross-bracing height\n\n// Corrugated seat module\nmodule corrugated_seat() {\n    // Base seat disc\n    difference() {\n        cylinder(h=wall_t, d=seat_d, center=true);\n        \n        // Hollow center\n        cylinder(h=wall_t+1, d=seat_d-2*wall_t, center=true);\n    }\n    \n    // Corrugations on top\n    for (angle = [0:15:359]) {\n        rotate([0, 0, angle])\n        translate([0, seat_d/2 - corrugation_w, wall_t/2])\n        cube([corrugation_w, corrugation_w, corrugation_d], center=true);\n    }\n    \n    // Reinforcement ring underneath\n    rotate_extrude()\n    translate([seat_d/2 - wall_t*2, 0, 0])\n    square([wall_t, wall_t*2]);\n}\n\n// Corrugated leg module\nmodule corrugated_leg() {\n    // Main leg tube\n    difference() {\n        cylinder(h=leg_h, d=leg_t, center=false);\n        cylinder(h=leg_h+1, d=leg_t-2*wall_t, center=false);\n    }\n    \n    // Vertical corrugations\n    for (i = [0:5:leg_h-10]) {\n        translate([0, 0, i+5])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=leg_t, d=corrugation_w, center=true);\n            cylinder(h=leg_t+1, d=leg_t-2*wall_t, center=true);\n        }\n    }\n}\n\n// Cross-bracing module\nmodule cross_bracing() {\n    // Horizontal ring\n    rotate_extrude()\n    translate([seat_d/2 - leg_t*2, 0, 0])\n    square([wall_t, leg_t]);\n    \n    // Diagonal supports\n    for (angle = [45:90:315]) {\n        rotate([0, 0, angle])\n        translate([seat_d/2 - leg_t*2, 0, bracing_h])\n        rotate([0, 45, 0])\n        cube([leg_t, leg_t, seat_d/2 - leg_t*2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0, 0, leg_h + wall_t/2])\n    corrugated_seat();\n    \n    // Legs\n    for (angle = [0:90:270]) {\n        rotate([0, 0, angle])\n        translate([seat_d/2 - leg_t/2, 0, 0])\n        corrugated_leg();\n    }\n    \n    // Cross-bracing\n    cross_bracing();\n    \n    // Foot pads for stability\n    for (angle = [0:90:270]) {\n        rotate([0, 0, angle])\n        translate([seat_d/2 - leg_t/2, 0, 0])\n        cylinder(h=wall_t*2, d=leg_t+5, center=false);\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "accordion",
    "openscad_code": "// Accordion - realistic style, medium complexity\n// Dimensions: 120mm (width) x 65mm (depth) x 120mm (height)\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule main_body() {\n    // Central bellows section\n    difference() {\n        cube([80, 60, 100], center=true);\n        translate([0, 0, 50])\n            cube([76, 56, 98], center=true);\n    }\n}\n\nmodule bellows() {\n    // Accordion folds\n    for(i = [-40:5:40]) {\n        translate([i, 0, 0])\n            rotate([0, 90, 0])\n            linear_extrude(height=60, center=true)\n            polygon(points=[[0, -50], [2, -50], [2, 50], [0, 50]]);\n    }\n}\n\nmodule keyboard_side() {\n    // Piano keys side\n    translate([-42, 0, 0])\n    difference() {\n        cube([20, 55, 75], center=true);\n        translate([8, 0, 25])\n            cube([16, 50, 65], center=true);\n    }\n    \n    // White keys\n    for(i = [-20:4:16]) {\n        translate([-42, i, 10])\n            cube([3, 3.5, 30]);\n    }\n    \n    // Black keys\n    for(i = [-18, -14, -10, -6, -2, 2, 6, 10, 14]) {\n        translate([-42, i, 22])\n            cube([2, 2, 20]);\n    }\n}\n\nmodule button_side() {\n    // Button side\n    translate([42, 0, 0])\n    difference() {\n        cylinder(h=75, r=28, center=true);\n        translate([0, 0, 25])\n            cylinder(h=65, r=26, center=true);\n    }\n    \n    // Buttons\n    for(row = [1:5]) {\n        for(col = [1:5]) {\n            translate([42, -20 + col*8, -25 + row*10])\n                cylinder(h=3, r=2);\n        }\n    }\n}\n\nmodule straps() {\n    // Top strap holders\n    translate([0, 30, 45])\n    rotate([90, 0, 0])\n    cylinder(h=8, r=3);\n    \n    translate([0, -30, 45])\n    rotate([90, 0, 0])\n    cylinder(h=8, r=3);\n    \n    // Bottom strap holders\n    translate([0, 30, -45])\n    rotate([90, 0, 0])\n    cylinder(h=8, r=3);\n    \n    translate([0, -30, -45])\n    rotate([90, 0, 0])\n    cylinder(h=8, r=3);\n}\n\nmodule air_valve() {\n    // Air release valve on bottom\n    translate([0, 0, -50])\n    difference() {\n        cylinder(h=10, r=8);\n        translate([0, 0, -1])\n            cylinder(h=12, r=6);\n    }\n}\n\nmodule decorative_grill() {\n    // Front grill pattern\n    for(i = [-35:7:35]) {\n        translate([i, 0, 20])\n            cube([1, 50, 30]);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    keyboard_side();\n    button_side();\n    straps();\n    air_valve();\n    decorative_grill();\n}",
    "renders": true
  },
  {
    "mechanical_component": "bellowsjoint",
    "openscad_code": "// Bellows Joint - Flexible Mechanical Coupling\n// Realistic style, medium complexity, 3D printable\n\n$fn = 36;  // Smooth curves for printing\n\nmodule bellows_segment(r_outer, r_inner, height, thickness) {\n    difference() {\n        // Outer bellows ridge\n        cylinder(h=height, r1=r_outer, r2=r_outer*0.95);\n        \n        // Inner cavity\n        translate([0, 0, -0.1])\n            cylinder(h=height+0.2, r1=r_inner, r2=r_inner*0.95);\n    }\n}\n\nmodule bellows_body(length, segments) {\n    segment_height = length / segments;\n    \n    for(i = [0:segments-1]) {\n        translate([0, 0, i * segment_height]) {\n            // Alternating ridges\n            if(i % 2 == 0) {\n                bellows_segment(15, 10, segment_height, 2);\n            } else {\n                bellows_segment(13, 8, segment_height, 2);\n            }\n        }\n    }\n}\n\nmodule coupling_end(type) {\n    // End coupling with mounting flange\n    difference() {\n        union() {\n            // Main coupling body\n            cylinder(h=12, r=18);\n            \n            // Mounting flange\n            translate([0, 0, 12])\n                cylinder(h=5, r=22);\n                \n            // Reinforcement ribs\n            for(i = [0:3]) {\n                rotate([0, 0, i*90])\n                    translate([15, 0, 6])\n                        cube([8, 2, 12], center=true);\n            }\n        }\n        \n        // Central bore\n        cylinder(h=20, r=type == \"small\" ? 6 : 8);\n        \n        // Mounting holes\n        for(i = [0:3]) {\n            rotate([0, 0, i*90+45])\n                translate([18, 0, 14.5])\n                    cylinder(h=3, r=2.5);\n        }\n    }\n}\n\nmodule bellows_joint() {\n    // Main assembly\n    union() {\n        // Left coupling\n        coupling_end(\"large\");\n        \n        // Bellows body\n        translate([0, 0, 12])\n            bellows_body(40, 8);\n            \n        // Right coupling\n        translate([0, 0, 52])\n            coupling_end(\"small\");\n            \n        // Protective sleeve rings\n        translate([0, 0, 5])\n            cylinder(h=2, r=20);\n        translate([0, 0, 57])\n            cylinder(h=2, r=16);\n    }\n}\n\n// Generate the complete bellows joint\nbellows_joint();",
    "renders": true
  },
  {
    "mechanical_component": "cotter",
    "openscad_code": "// Cotter Pin - Split Pin\n// Realistic medium-complexity model for 3D printing\n// Overall length ~80mm, 3D-printable with 2mm walls\n\n$fn = 32;\n\n// Main parameters\npin_len = 80;\npin_d = 6;\nhead_d = 10;\nhead_h = 4;\nsplit_gap = 2.2;      // slightly > pin_d to allow compression\neye_d = 6;\neye_thick = 2;\ntaper_len = 12;       // tapered tip length\nchamfer = 0.5;        // small chamfers for realism\n\n// Helper module for rounded edge cube\nmodule round_cube(size, r) {\n    translate([r, r, 0])\n    minkowski() {\n        cube([size.x-2*r, size.y-2*r, size.z]);\n        cylinder(h=size.z, r=r, $fn=16);\n    }\n}\n\n// One half of the split pin body\nmodule pin_half() {\n    // main shaft\n    hull() {\n        // straight part\n        translate([0, 0, 0])\n            cylinder(h=pin_len-taper_len, d=pin_d);\n        \n        // tapered tip\n        translate([0, 0, pin_len-taper_len])\n            cylinder(h=taper_len, d1=pin_d, d2=0.5);\n    }\n    \n    // head disk\n    translate([0, 0, -head_h])\n        cylinder(h=head_h, d=head_d);\n    \n    // eye loop (half-ring)\n    rotate([0, 90, 0])\n        difference() {\n            torus(r1=eye_d/2, r2=eye_thick/2);\n            cube([eye_d*2, eye_d*2, eye_thick*2], center=true);\n        }\n}\n\n// Torus primitive made from cylinders\nmodule torus(r1, r2) {\n    for(a=[0:15:360-15])\n        rotate([0, 0, a])\n            translate([r1, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=2*r1, d=r2*2, center=true);\n}\n\n// Main assembly\nunion() {\n    // Left half\n    translate([-split_gap/2, 0, 0])\n        pin_half();\n    \n    // Right half\n    translate([split_gap/2, 0, 0])\n        mirror([1, 0, 0])\n            pin_half();\n    \n    // Reinforcing rib at base\n    translate([0, 0, -head_h-0.1])\n        round_cube([split_gap+pin_d*0.8, pin_d*1.2, 2], 1);\n    \n    // Small bump stops (x2) near tip to hold when inserted\n    for(z=[pin_len*0.7, pin_len*0.85])\n        translate([0, 0, z])\n            cylinder(h=2, d=pin_d*1.4, $fn=8);\n}\n\n// Small chamfers for realism\ntranslate([0, 0, pin_len])\n    cylinder(h=chamfer*2, d1=0.5+chamfer*2, d2=0.5);\ntranslate([0, 0, -head_h])\n    cylinder(h=chamfer, d1=head_d, d2=head_d+chamfer*2);",
    "renders": true
  },
  {
    "mechanical_component": "keeper",
    "openscad_code": "// Keeper (Garden Bench) - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm wide × 45mm deep × 45mm high\n\n$fn = 50;\n\nmodule leg(x, z) {\n    translate([x, 0, z])\n    difference() {\n        // Main leg post\n        cube([8, 40, 40], center=true);\n        // Taper bottom slightly\n        translate([0, 0, -22])\n        scale([1, 1.2, 0.8])\n        cube([9, 41, 10], center=true);\n    }\n}\n\nmodule back_slats() {\n    for(i = [-40:10:40]) {\n        translate([i, 20, 15])\n        cube([6, 2, 30], center=true);\n    }\n}\n\nmodule seat_slats() {\n    for(i = [-30:8:30]) {\n        translate([i, 0, 0])\n        cube([6, 42, 4], center=true);\n    }\n}\n\nmodule stretcher() {\n    // Front stretcher\n    translate([0, -18, -15])\n    cube([110, 6, 6], center=true);\n    \n    // Rear stretcher\n    translate([0, 18, -15])\n    cube([110, 6, 6], center=true);\n}\n\nmodule armrest() {\n    // Left armrest\n    translate([-48, 0, 20])\n    difference() {\n        cube([4, 40, 4], center=true);\n        // Rounded front\n        translate([0, -20, 0])\n        cylinder(h=4, r=2, center=true);\n    }\n    \n    // Right armrest\n    mirror([1, 0, 0])\n    armrest();\n}\n\n// Main assembly\nunion() {\n    // Four legs\n    leg(-45, -20);\n    leg(45, -20);\n    leg(-45, -20);\n    leg(45, -20);\n    \n    // Seat frame\n    translate([0, 0, -2])\n    difference() {\n        // Outer frame\n        cube([110, 46, 8], center=true);\n        // Inner cutout\n        cube([90, 30, 10], center=true);\n    }\n    \n    // Seat slats\n    seat_slats();\n    \n    // Back posts\n    translate([-45, 20, 15])\n    cube([8, 8, 30], center=true);\n    translate([45, 20, 15])\n    cube([8, 8, 30], center=true);\n    \n    // Back top rail\n    translate([0, 20, 30])\n    cube([110, 6, 6], center=true);\n    \n    // Back slats\n    back_slats();\n    \n    // Stretchers between legs\n    stretcher();\n    \n    // Armrests\n    armrest();\n}",
    "renders": true
  },
  {
    "mechanical_component": "lock",
    "openscad_code": "// Padlock - Realistic Style, Medium Complexity\n// Overall dimensions: 60mm x 30mm x 35mm\n\n// Parameters\nlock_body_w = 40;\nlock_body_h = 30;\nlock_body_d = 20;\nshackle_d = 6;\nshackle_gap = 20;\nshackle_clearance = 3;\nwall_thickness = 2;\ndetail_radius = 2;\n\n// Main lock body\nmodule lock_body() {\n    difference() {\n        // Outer rounded body\n        minkowski() {\n            cube([lock_body_w, lock_body_d, lock_body_h], center=true);\n            sphere(detail_radius);\n        }\n        \n        // Keyway slot\n        translate([0, lock_body_d/2 - 1, -lock_body_h/4])\n            cube([8, 4, lock_body_h/2], center=true);\n        \n        // Shackle holes - top\n        translate([-lock_body_w/4, 0, lock_body_h/2])\n            cylinder(h=wall_thickness*2, d=shackle_d+shackle_clearance, center=true);\n        translate([lock_body_w/4, 0, lock_body_h/2])\n            cylinder(h=wall_thickness*2, d=shackle_d+shackle_clearance, center=true);\n    }\n    \n    // Keyway details\n    translate([0, lock_body_d/2, -lock_body_h/4])\n        rotate([90, 0, 0])\n            cylinder(h=2, d=6, $fn=6);\n    \n    // Body chamfers\n    translate([0, 0, lock_body_h/2 - detail_radius])\n        cube([lock_body_w + detail_radius*2, lock_body_d + detail_radius*2, detail_radius], center=true);\n}\n\n// Shackle\nmodule shackle() {\n    // Left leg\n    translate([-lock_body_w/4, 0, lock_body_h/2 + shackle_gap/2])\n        cylinder(h=shackle_gap/2, d=shackle_d, center=true);\n    \n    // Right leg\n    translate([lock_body_w/4, 0, lock_body_h/2 + shackle_gap/2])\n        cylinder(h=shackle_gap/2, d=shackle_d, center=true);\n    \n    // Top arc\n    translate([0, 0, lock_body_h/2 + shackle_gap])\n        rotate([90, 0, 0])\n            rotate_extrude(angle=180)\n                translate([lock_body_w/4, 0, 0])\n                    circle(d=shackle_d);\n}\n\n// Lock pins\nmodule pins() {\n    for (i = [-1:1]) {\n        translate([i*6, lock_body_d/2 - 2, -lock_body_h/6])\n            cylinder(h=4, d=3, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    color(\"silver\")\n        lock_body();\n    \n    // Shackle\n    color(\"gray\")\n        shackle();\n    \n    // Pin details\n    color(\"gold\")\n        pins();\n}",
    "renders": true
  },
  {
    "mechanical_component": "weld",
    "openscad_code": "// A realistic 3D printable weld bead on a V-groove butt joint plate\n// Overall footprint ≈ 120 mm × 50 mm × 25 mm\n\n// ---------- PARAMETERS ----------\nplate_w = 120;          // base plate width\nplate_l = 50;           // base plate length\nplate_t = 4;            // base plate thickness\ngroove_ang = 60;        // V-groove included angle (degrees)\ngroove_depth = 3;       // V-groove max depth\nbead_h = 4;             // weld bead height above plate\nbead_w = 6;             // weld bead width at toe\nwall = 2;               // printable wall thickness\n\n// ---------- MODULES ----------\n\n// Build one side of the V-groove plate\nmodule plate_half() {\n    difference() {\n        // Main half plate\n        cube([plate_w/2, plate_l, plate_t], center=false);\n\n        // V-groove cut (half of the V)\n        translate([plate_w/2, 0, plate_t])\n        rotate([0, -groove_ang/2, 0])\n        cube([plate_w, plate_l, groove_depth*2], center=false);\n    }\n}\n\n// Single rippled weld pass (circle extruded with slight wobble)\nmodule pass_ripple(r, h) {\n    for (i=[0:1:20]) {\n        translate([i*r/4, 0, 0])\n        sphere(r=r + 0.3*sin(i*25), $fn=8);\n    }\n}\n\n// Full weld bead along the groove\nmodule weld_bead() {\n    union() {\n        // Root bead\n        hull() {\n            translate([plate_w/2 - 0.5, 0, plate_t])\n            sphere(r=bead_w/3, $fn=8);\n            translate([plate_w/2 + 0.5, plate_l, plate_t])\n            sphere(r=bead_w/3, $fn=8);\n        }\n\n        // Cap passes (multiple ripples)\n        for (y=[0:4:plate_l-4]) {\n            translate([plate_w/2, y, plate_t + bead_h/2])\n            rotate([90, 0, 0])\n            pass_ripple(bead_w/2, bead_h);\n        }\n    }\n}\n\n// Reinforcement gusset under the joint\nmodule gusset() {\n    difference() {\n        // Main gusset body\n        translate([plate_w/2 - 6, plate_l/2 - 6, -3])\n        cube([12, 12, 3]);\n\n        // Lightening hole\n        translate([plate_w/2, plate_l/2, -1.5])\n        cylinder(h=4, r=3, $fn=16);\n    }\n}\n\n// ---------- ASSEMBLY ----------\nunion() {\n    // Left plate half\n    plate_half();\n\n    // Right plate half (mirror)\n    mirror([1, 0, 0])\n    translate([-plate_w, 0, 0])\n    plate_half();\n\n    // Weld bead on top\n    weld_bead();\n\n    // Optional gusset for structural look\n    gusset();\n}",
    "renders": true
  },
  {
    "mechanical_component": "braze",
    "openscad_code": "// Realistic MEDIUM-complexity 3D-printable BRAZE armchair\n// Overall footprint ~80 mm wide x 90 mm deep x 110 mm high\n// Wall thicknesses ≥ 2 mm everywhere for FDM printing without supports\n\n// ---------- PARAMETERS ----------\nseat_w   = 70;   // seat width\nseat_d   = 60;   // seat depth\nseat_h   = 45;   // seat height above ground\nback_h   = 65;   // backrest height above seat\nleg_t    = 4;    // leg thickness\ncushion  = 8;    // seat cushion thickness\nback_cush= 6;    // back cushion thickness\narm_h    = 20;   // armrest height above seat\narm_t    = 3;    // armrest thickness\nstretch  = 2;    // stretcher thickness between legs\n$fn      = 30;   // cylinder quality\n\n// ---------- MODULES ----------\n// Simple leg with rounded bottom\nmodule leg() {\n    translate([0,0,leg_t/2])\n    intersection() {\n        cube([leg_t,leg_t,seat_h-leg_t/2], center=true);\n        // rounded foot\n        translate([0,0,-(seat_h-leg_t/2)/2])\n            sphere(d=leg_t*1.4, $fn=20);\n    }\n}\n\n// Armrest pad\nmodule arm_pad() {\n    hull() {\n        cube([arm_t,seat_d*0.6,arm_t]);\n        translate([0,0,arm_t])\n            cube([arm_t,seat_d*0.6-10,arm_t]);\n    }\n}\n\n// ---------- MAIN CHAIR ----------\nunion() {\n\n    // ---------- SEAT ----------\n    translate([0,0,seat_h]) {\n        // seat frame\n        difference() {\n            cube([seat_w,seat_d,leg_t], center=true); // frame\n            translate([0,0,-1])\n                cube([seat_w-4,seat_d-4,leg_t+2], center=true); // hollow\n        }\n        // cushion on top\n        translate([0,0,leg_t/2+cushion/2])\n            cube([seat_w-4,seat_d-4,cushion], center=true);\n    }\n\n    // ---------- BACKREST ----------\n    translate([0,seat_d/2-back_cushion/2,seat_h+back_h/2]) {\n        // back frame\n        difference() {\n            cube([seat_w,back_cushion,back_h], center=true);\n            translate([0,0,-1])\n                cube([seat_w-4,back_cushion-4,back_h-4], center=true);\n        }\n    }\n\n    // ---------- LEGS ----------\n    for(x=[-1,1])\n    for(y=[-1,1])\n        translate([x*(seat_w-leg_t)/2, y*(seat_d-leg_t)/2, 0])\n            leg();\n\n    // ---------- STRETCHERS ----------\n    // front-back\n    for(x=[-1,1])\n        translate([x*(seat_w-leg_t)/2, 0, seat_h/2])\n            rotate([90,0,0])\n                cylinder(h=seat_d-leg_t, d=stretch, $fn=8);\n\n    // left-right\n    for(y=[-1,1])\n        translate([0, y*(seat_d-leg_t)/2, seat_h/2])\n            rotate([0,90,0])\n                cylinder(h=seat_w-leg_t, d=stretch, $fn=8);\n\n    // ---------- ARMRESTS ----------\n    for(x=[-1,1])\n        translate([x*(seat_w+arm_t)/2, 0, seat_h+arm_h/2])\n            union() {\n                // vertical post\n                cube([arm_t,arm_t,arm_h], center=true);\n                // horizontal pad\n                translate([0,0,arm_h/2+arm_t/2])\n                    arm_pad();\n            }\n}",
    "renders": true
  },
  {
    "mechanical_component": "solder",
    "openscad_code": "// Solder - Medium complexity realistic style\n// Overall dimensions: 100mm long, 20mm diameter\n\n$fn = 32;\n\n// Main parameters\nsolder_length = 100;\nsolder_diameter = 20;\ntip_length = 15;\ntip_diameter = 5;\nhandle_length = 45;\ngrip_length = 25;\ngrip_ring_width = 3;\ngrip_ring_spacing = 5;\ncable_diameter = 6;\ncable_length = 15;\n\n// Main solder body\nmodule solder_body() {\n    union() {\n        // Handle section\n        color(\"darkslategray\")\n        cylinder(h = handle_length, d = solder_diameter, center = false);\n        \n        // Grip rings on handle\n        translate([0, 0, 5])\n        for(i = [0:3]) {\n            translate([0, 0, i * grip_ring_spacing])\n            cylinder(h = grip_ring_width, d1 = solder_diameter, d2 = solder_diameter - 2, center = false);\n        }\n        \n        // Metal shaft\n        color(\"silver\")\n        translate([0, 0, handle_length])\n        cylinder(h = solder_length - handle_length - tip_length, d = solder_diameter - 4, center = false);\n        \n        // Heating element transition\n        translate([0, 0, solder_length - tip_length])\n        cylinder(h = tip_length, d1 = solder_diameter - 4, d2 = tip_diameter, center = false);\n        \n        // Fine tip\n        color(\"lightgray\")\n        translate([0, 0, solder_length])\n        cylinder(h = 5, d = tip_diameter, center = false);\n    }\n}\n\n// Cable entry\nmodule cable_entry() {\n    difference() {\n        // Cable housing\n        color(\"black\")\n        translate([0, 0, -cable_length])\n        cylinder(h = cable_length, d = cable_diameter + 4, center = false);\n        \n        // Cable hole\n        translate([0, 0, -cable_length - 1])\n        cylinder(h = cable_length + 2, d = cable_diameter, center = false);\n    }\n}\n\n// Control dial\nmodule temperature_dial() {\n    translate([solder_diameter/2 + 2, 0, handle_length/2])\n    rotate([90, 0, 0])\n    difference() {\n        color(\"red\")\n        cylinder(h = 4, d = 8, center = true);\n        \n        // Dial indicator notch\n        translate([0, -4.5, 0])\n        cube([1, 1, 5], center = true);\n    }\n}\n\n// Standoff mounting points\nmodule standoff_mounts() {\n    for(angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n        translate([solder_diameter/2 + 3, 0, handle_length/2])\n        color(\"gray\")\n        cylinder(h = 4, d = 6, center = true);\n    }\n}\n\n// Assembly\nsolder_body();\ntranslate([0, 0, 0])\ncable_entry();\ntemperature_dial();\nstandoff_mounts();",
    "renders": true
  },
  {
    "mechanical_component": "adhesive",
    "openscad_code": "// Adhesive Tape Dispenser - Medium complexity realistic style\n// Dimensions: ~110x70x65 mm (suitable for 3D printing)\n\n$fn = 32;\n\n// Main parameters\nbase_width = 100;\nbase_depth = 60;\nbase_height = 25;\nwall_thickness = 2;\n\n// Tape roll dimensions\ntape_core_d = 25;\ntape_core_h = 50;\ntape_outer_d = 75;\n\n// Cutter blade\nblade_width = 50;\nblade_height = 8;\nblade_angle = 30;\n\n// Handle dimensions\nhandle_length = 80;\nhandle_d = 12;\nhandle_offset = 40;\n\n// Grip pattern\ngrip_width = 3;\ngrip_depth = 1;\ngrip_spacing = 8;\n\nmodule base() {\n    // Main base with rounded edges\n    difference() {\n        hull() {\n            translate([0, 0, base_height/2])\n                cube([base_width, base_depth, base_height], center=true);\n            translate([0, 0, base_height/2 - 5])\n                cube([base_width - 10, base_depth - 10, base_height], center=true);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, base_height/2 + 2])\n            cube([base_width - 2*wall_thickness, base_depth - 2*wall_thickness, base_height + 2], center=true);\n    }\n    \n    // Bottom reinforcement ribs\n    for (x = [-base_width/3, 0, base_width/3]) {\n        translate([x, 0, 2])\n            cube([wall_thickness, base_depth - 10, 4], center=true);\n    }\n}\n\nmodule tape_spindle() {\n    // Central spindle for tape roll\n    cylinder(h = tape_core_h + 4, r = tape_core_d/2 + 1, center=true);\n    \n    // Core support\n    difference() {\n        cylinder(h = tape_core_h + 6, r = tape_core_d/2, center=true);\n        cylinder(h = tape_core_h + 8, r = tape_core_d/2 - 2, center=true);\n    }\n}\n\nmodule cutter_assembly() {\n    // Blade mount\n    translate([base_width/2 - 15, 0, base_height + 5]) {\n        rotate([0, 0, 0])\n            cube([10, blade_width + 10, blade_height + 10], center=true);\n        \n        // Serrated blade\n        difference() {\n            cube([blade_height, blade_width, 2], center=true);\n            for (i = [-blade_width/2 + 3 : 3 : blade_width/2 - 3]) {\n                translate([0, i, 1])\n                    cube([blade_height - 1, 0.5, 2], center=true);\n            }\n        }\n    }\n    \n    // Blade guard\n    translate([base_width/2 - 20, 0, base_height + 10])\n        rotate([blade_angle, 0, 0])\n            cube([20, blade_width + 20, 1], center=true);\n}\n\nmodule handle() {\n    // Main handle\n    translate([0, handle_offset, base_height + handle_length/2]) {\n        rotate([90, 0, 0])\n            cylinder(h = handle_length, r = handle_d/2, center=true);\n        \n        // Handle supports\n        translate([0, 0, handle_length/2 - 10])\n            rotate([90, 0, 0])\n                cylinder(h = 20, r1 = handle_d/2 + 2, r2 = handle_d/2 + 4, center=true);\n        \n        // Grip pattern\n        for (z = [-handle_length/2 + 10 : grip_spacing : handle_length/2 - 10]) {\n            translate([0, 0, z])\n                rotate([0, 90, 0])\n                    cube([handle_d + 2*grip_width, handle_d + 2*grip_width, grip_depth], center=true);\n        }\n    }\n}\n\nmodule tape_roll() {\n    // Actual tape roll (for display)\n    color(\"beige\", 0.6)\n    translate([0, 0, base_height + tape_core_h/2 + 2]) {\n        // Outer tape\n        difference() {\n            cylinder(h = tape_core_h, r = tape_outer_d/2, center=true);\n            cylinder(h = tape_core_h + 1, r = tape_core_d/2, center=true);\n        }\n        \n        // Tape core\n        color(\"white\")\n        cylinder(h = tape_core_h + 2, r = tape_core_d/2 - 0.5, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    \n    translate([0, 0, 0])\n        tape_spindle();\n    \n    cutter_assembly();\n    \n    handle();\n    \n    tape_roll();\n}",
    "renders": true
  },
  {
    "mechanical_component": "bond",
    "openscad_code": "// Bond Armchair - Realistic Medium Complexity\n// Overall dimensions: ~120mm W x ~110mm D x ~110mm H\n\nchair_width = 120;\nchair_depth = 110;\nchair_height = 110;\nleg_height = 45;\nseat_thickness = 8;\nback_height = 65;\narmrest_height = 20;\n\n// Leg profile\nmodule leg() {\n    difference() {\n        // Main leg post\n        cube([8, 8, leg_height], center = true);\n        \n        // Chamfer bottom edges\n        translate([0, 0, -leg_height/2 + 2])\n        rotate([0, 45, 0])\n        cube([11.3, 11.3, 4], center = true);\n        \n        translate([0, 0, -leg_height/2 + 2])\n        rotate([45, 0, 0])\n        cube([11.3, 11.3, 4], center = true);\n    }\n}\n\n// Seat cushion\nmodule seat() {\n    difference() {\n        // Main cushion block\n        translate([0, 0, leg_height + seat_thickness/2])\n        cube([chair_width - 20, chair_depth - 20, seat_thickness], center = true);\n        \n        // Rounded top edges\n        translate([0, 0, leg_height + seat_thickness])\n        minkowski() {\n            cube([chair_width - 20, chair_depth - 20, 0.1], center = true);\n            cylinder(h = 0.1, r = 3, $fn = 16);\n        }\n    }\n}\n\n// Backrest frame\nmodule backrest() {\n    // Outer frame\n    difference() {\n        translate([0, -(chair_depth - 20)/2 - 5, leg_height + seat_thickness + back_height/2])\n        cube([chair_width - 20, 10, back_height], center = true);\n        \n        // Inner opening\n        translate([0, -(chair_depth - 20)/2 - 4, leg_height + seat_thickness + back_height/2])\n        cube([chair_width - 30, 12, back_height - 10], center = true);\n    }\n    \n    // Vertical slats\n    for(i = [-1, 0, 1]) {\n        translate([i * 25, -(chair_depth - 20)/2 - 5, leg_height + seat_thickness + back_height/2])\n        cube([6, 8, back_height - 4], center = true);\n    }\n}\n\n// Armrest\nmodule armrest() {\n    translate([chair_width/2 - 10, 0, leg_height + seat_thickness + armrest_height/2])\n    cube([20, chair_depth - 20, armrest_height], center = true);\n}\n\n// Assembly\nunion() {\n    // Four legs\n    translate([chair_width/2 - 12, chair_depth/2 - 12, leg_height/2])\n    leg();\n    \n    translate([-(chair_width/2 - 12), chair_depth/2 - 12, leg_height/2])\n    leg();\n    \n    translate([chair_width/2 - 12, -(chair_depth/2 - 12), leg_height/2])\n    leg();\n    \n    translate([-(chair_width/2 - 12), -(chair_depth/2 - 12), leg_height/2])\n    leg();\n    \n    // Seat\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest();\n    mirror([1, 0, 0])\n    armrest();\n    \n    // Support stretchers\n    // Front-back stretchers\n    translate([0, chair_depth/2 - 12, leg_height/2 - 15])\n    cube([chair_width - 24, 6, 6], center = true);\n    \n    translate([0, -(chair_depth/2 - 12), leg_height/2 - 15])\n    cube([chair_width - 24, 6, 6], center = true);\n    \n    // Side stretchers\n    translate([chair_width/2 - 12, 0, leg_height/2 - 15])\n    cube([6, chair_depth - 24, 6], center = true);\n    \n    translate([-(chair_width/2 - 12), 0, leg_height/2 - 15])\n    cube([6, chair_depth - 24, 6], center = true);\n}",
    "renders": true
  },
  {
    "mechanical_component": "fastener",
    "openscad_code": "// Medium-complexity 3D-printable realistic BOLT with hex head and partial threads\n// Overall length: 90 mm (M10 equivalent), hex head 16 mm A/F, thread length 40 mm\n\n$fn = 60;               // global circle resolution\nthread_pitch = 2.0;     // 2 mm thread pitch, M10-like\nshank_dia = 10;         // bolt body diameter\nhead_a_f = 16;          // across-flats for hex head\nhead_h = 7;             // height of hex head\nwasher_dia = 20;        // integrated washer under head\nwasher_h = 1.5;\nsmooth_len = 40;        // unthreaded shank length\nthread_len = 40;        // threaded length\ntotal_len = smooth_len + thread_len;\nwall = 2;               // printable wall thickness for hollow threads\n\nmodule hex_head(h, af) {\n    difference() {\n        // solid hex prism\n        cylinder(h = h, d = af / cos(30), $fn = 6);\n        // top chamfer\n        translate([0, 0, h - 1])\n            cylinder(h = 1.5, d1 = af / cos(30), d2 = af / cos(30) - 2, $fn = 6);\n    }\n}\n\nmodule washer(d, h) {\n    difference() {\n        cylinder(h = h, d = d);\n        translate([0, 0, -0.1])\n            cylinder(h = h + 0.2, d = shank_dia + 0.5);\n    }\n}\n\nmodule threaded_section(len, dia, pitch) {\n    // outer threaded shell\n    difference() {\n        cylinder(h = len, d = dia);\n        // hollow core for saving material & print time\n        translate([0, 0, -0.1])\n            cylinder(h = len + 0.2, d = dia - 2 * wall);\n    }\n\n    // single-start V-threads generated by subtraction\n    for (z = [0 : pitch/2 : len - pitch]) {\n        translate([0, 0, z])\n            rotate([0, 0, 30 * (z / pitch)])\n                difference() {\n                    cylinder(h = pitch + 0.1, d = dia + 0.2, $fn = 3);\n                    translate([0, 0, -0.05])\n                        cylinder(h = pitch + 0.2, d = dia - 1.25 * pitch, $fn = 3);\n                }\n    }\n}\n\nmodule smooth_shank(len, dia) {\n    difference() {\n        cylinder(h = len, d = dia);\n        translate([0, 0, -0.1])\n            cylinder(h = len + 0.2, d = dia - 2 * wall);\n    }\n}\n\n// Assembly\nunion() {\n    // Hex head\n    hex_head(head_h, head_a_f);\n\n    // Washer integrated under head\n    translate([0, 0, -washer_h])\n        washer(washer_dia, washer_h);\n\n    // Unthreaded shank\n    translate([0, 0, -head_h - washer_h])\n        smooth_shank(smooth_len, shank_dia);\n\n    // Threaded section\n    translate([0, 0, -head_h - washer_h - smooth_len])\n        threaded_section(thread_len, shank_dia, thread_pitch);\n}",
    "renders": true
  },
  {
    "mechanical_component": "brace",
    "openscad_code": "// Brace mechanical component - OpenSCAD code\n// Realistic style, medium complexity\n\n// Overall dimensions\nlength = 100;\nwidth = 20;\nheight = 40;\nwall_thickness = 2;\n\nmodule base_plate() {\n    // Main mounting plate\n    difference() {\n        cube([length, width, wall_thickness], center=true);\n        \n        // Mounting holes\n        for (i = [-1, 1]) {\n            translate([i * length/3, 0, -wall_thickness/2])\n                cylinder(h=wall_thickness+1, d=4, $fn=16);\n        }\n    }\n}\n\nmodule support_arms() {\n    // Two angled support arms\n    for (i = [-1, 1]) {\n        translate([i * length/3, 0, 0]) {\n            rotate([0, i * 15, 0])\n                cube([length/2, wall_thickness, height/2], center=true);\n        }\n    }\n}\n\nmodule gusset_plates() {\n    // Triangular gusset plates for reinforcement\n    for (i = [-1, 1]) {\n        translate([i * length/3, 0, height/4]) {\n            rotate([0, i * 15, 0])\n                linear_extrude(height=wall_thickness, center=true, convexity=10)\n                    polygon(points=[[0,0], [length/4,0], [0,height/3]]);\n        }\n    }\n}\n\nmodule cross_brace() {\n    // Cross brace between support arms\n    translate([0, 0, height/3])\n        rotate([0, 0, 45])\n            cube([length/1.5, wall_thickness, wall_thickness], center=true);\n}\n\nmodule top_mount() {\n    // Top mounting bracket\n    translate([0, 0, height/2]) {\n        difference() {\n            cube([length/1.5, width/1.5, wall_thickness*2], center=true);\n            \n            // Mounting slots\n            for (i = [-1, 1]) {\n                translate([i * length/4, 0, -wall_thickness-1])\n                    cube([20, 6, wall_thickness*2+2], center=true);\n            }\n        }\n    }\n}\n\nmodule ribbing() {\n    // Structural ribs for stiffness\n    for (pos = [-length/3, 0, length/3]) {\n        translate([pos, 0, height/4]) {\n            rotate([0, 90, 0])\n                cube([wall_thickness, width/2, height/2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_plate();\n    support_arms();\n    gusset_plates();\n    cross_brace();\n    top_mount();\n    ribbing();\n    \n    // Corner fillets for printability\n    for (i = [-1, 1]) {\n        for (j = [-1, 1]) {\n            translate([i * length/2.2, j * width/2.2, 0])\n                cylinder(h=wall_thickness+1, d=wall_thickness*2, $fn=16);\n        }\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "trunnion",
    "openscad_code": "// Realistic Trunnion Mechanical Component\n// Medium complexity design suitable for 3D printing\n\n// Global parameters\n$fn = 50; // Resolution for curved surfaces\nwall_thickness = 2; // 3D printable wall thickness\n\n// Overall dimensions\ntrunnion_length = 80;\ntrunnion_diameter = 30;\nbearing_length = 25;\nbearing_diameter = 36;\nmounting_plate_size = 60;\nmounting_plate_thickness = 8;\nbolt_hole_diameter = 6;\nbolt_hole_spacing = 45;\n\n// Main trunnion pin\nmodule trunnion_pin() {\n    // Central shaft\n    difference() {\n        cylinder(h=trunnion_length, d=trunnion_diameter, center=true);\n        \n        // Central bore for weight reduction\n        cylinder(h=trunnion_length+2, d=trunnion_diameter-wall_thickness*2, center=true);\n    }\n    \n    // Bearing journals at each end\n    translate([0, 0, trunnion_length/2 - bearing_length/2]) {\n        cylinder(h=bearing_length, d=bearing_diameter);\n    }\n    \n    translate([0, 0, -trunnion_length/2 + bearing_length/2]) {\n        cylinder(h=bearing_length, d=bearing_diameter);\n    }\n    \n    // Grease grooves on bearing surfaces\n    for (i = [-1, 1]) {\n        translate([0, 0, i * (trunnion_length/2 - bearing_length/2)]) {\n            for (z = [-bearing_length/4, 0, bearing_length/4]) {\n                rotate([0, 90, 0]) {\n                    translate([bearing_diameter/2, 0, z]) {\n                        cube([0.5, 1, 2], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Mounting bracket\nmodule mounting_bracket() {\n    // Base plate\n    difference() {\n        cube([mounting_plate_size, mounting_plate_thickness, mounting_plate_size], center=true);\n        \n        // Bolt holes\n        for (x = [-bolt_hole_spacing/2, bolt_hole_spacing/2]) {\n            for (z = [-bolt_hole_spacing/2, bolt_hole_spacing/2]) {\n                translate([x, -mounting_plate_thickness/2 - 1, z]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=mounting_plate_thickness+2, d=bolt_hole_diameter);\n                    }\n                }\n            }\n        }\n        \n        // Center bore for trunnion\n        translate([0, 0, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=mounting_plate_size+2, d=trunnion_diameter+1, center=true);\n            }\n        }\n    }\n    \n    // Reinforcement ribs\n    for (angle = [0, 90, 180, 270]) {\n        rotate([0, angle, 0]) {\n            translate([mounting_plate_size/2 - wall_thickness*2, 0, 0]) {\n                cube([wall_thickness*4, mounting_plate_thickness, mounting_plate_size/4], center=true);\n            }\n        }\n    }\n}\n\n// Bearing caps\nmodule bearing_caps() {\n    for (i = [-1, 1]) {\n        translate([0, 0, i * (trunnion_length/2 - bearing_length/2)]) {\n            difference() {\n                // Main cap body\n                rotate([90, 0, 0]) {\n                    cylinder(h=mounting_plate_size/3, d=bearing_diameter+10, center=true);\n                }\n                \n                // Bore for trunnion\n                rotate([90, 0, 0]) {\n                    cylinder(h=mounting_plate_size/3+2, d=bearing_diameter+1, center=true);\n                }\n                \n                // Grease fitting hole\n                translate([0, mounting_plate_size/6, 0]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=10, d=5);\n                    }\n                }\n            }\n            \n            // Mounting bolts for cap\n            for (angle = [45, 135, 225, 315]) {\n                rotate([90, 0, angle]) {\n                    translate([bearing_diameter/2 + 6, 0, 0]) {\n                        rotate([0, 90, 0]) {\n                            cylinder(h=mounting_plate_size/3+2, d=bolt_hole_diameter);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main trunnion assembly\n    trunnion_pin();\n    \n    // Mounting brackets (two sides)\n    translate([-mounting_plate_size/2 - 5, 0, 0]) {\n        mounting_bracket();\n    }\n    \n    translate([mounting_plate_size/2 + 5, 0, 0]) {\n        mounting_bracket();\n    }\n    \n    // Bearing caps\n    bearing_caps();\n    \n    // Structural gussets\n    for (i = [-1, 1]) {\n        translate([i * (mounting_plate_size/2 + 5), 0, trunnion_length/2 - bearing_length/2]) {\n            difference() {\n                cube([wall_thickness*3, mounting_plate_size/2, bearing_length], center=true);\n                translate([0, 0, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=mounting_plate_size/2+2, d=trunnion_diameter+2, center=true);\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "mechanical_component": "fulcrum",
    "openscad_code": "// Realistic Medium-Complexity Fulcrum Mechanical Component\n// Overall dimensions ~100mm long x 40mm wide x 60mm high\n// Wall thickness 2mm throughout for 3D-printability\n$fa = 2; $fs = 0.5;\n\n// Main fulcrum body – wedge-shaped ramp with rounded top\nmodule fulcrum_body() {\n    difference() {\n        // Solid wedge core\n        polyhedron(\n            points = [\n                [-48, 0, 0], [48, 0, 0],          // base front\n                [-48, 20, 0], [48, 20, 0],        // base back\n                [-48, 0, 40], [48, 0, 40],        // ridge front\n                [-48, 20, 40], [48, 20, 40]       // ridge back\n            ],\n            faces = [\n                [0,2,3,1], [4,5,7,6],             // bottom & top\n                [0,1,5,4], [2,6,7,3],             // sides\n                [0,4,6,2], [1,3,7,5]              // front & back\n            ]\n        );\n        // Hollow out inside\n        translate([0, 10, 2])\n            cube([92, 16, 36], center = true);\n    }\n}\n\n// Knife-edge ridge reinforcement\nmodule ridge() {\n    difference() {\n        // Outer rounded ridge\n        translate([0, 10, 40])\n            rotate([90, 0, 0])\n                cylinder(h = 100, r = 2.5, center = true, $fn = 30);\n        // Inner hollow ridge for 2mm walls\n        translate([0, 10, 40])\n            rotate([90, 0, 0])\n                cylinder(h = 100, r = 0.5, center = true, $fn = 30);\n    }\n}\n\n// Side stiffening ribs (triangular gussets)\nmodule side_ribs() {\n    for (x = [-42, -28, -14, 0, 14, 28, 42]) {\n        translate([x, 0, 20]) {\n            // Left rib\n            linear_extrude(height = 2)\n                polygon(points = [[-4, 0], [4, 0], [0, 18]]);\n            // Right rib mirrored\n            translate([0, 18, 0])\n                mirror([0, 1, 0])\n                    linear_extrude(height = 2)\n                        polygon(points = [[-4, 0], [4, 0], [0, 18]]);\n        }\n    }\n}\n\n// Base mounting flanges with holes for screws\nmodule base_flanges() {\n    for (y = [0, 20]) {\n        translate([0, y, -2]) {\n            difference() {\n                // Flange plate 2mm thick\n                cube([100, 4, 2], center = true);\n                // Two screw holes per flange\n                for (x = [-35, 35])\n                    translate([x, 0, 0])\n                        cylinder(h = 3, r = 2.5, $fn = 16);\n            }\n        }\n    }\n}\n\n// Chamfered corner details for realism\nmodule chamfered_corners() {\n    // Simple chamfer blocks at the four bottom corners\n    for (x = [-46, 46])\n        for (y = [2, 18])\n            translate([x, y, 0])\n                rotate([0, 0, 45])\n                    cube([2.8, 2.8, 2], center = true);\n}\n\n// Output the complete fulcrum assembly\nunion() {\n    fulcrum_body();\n    ridge();\n    side_ribs();\n    base_flanges();\n    chamfered_corners();\n}",
    "renders": true
  },
  {
    "mechanical_component": "toggle",
    "openscad_code": "// Toggle switch - realistic style, medium complexity\n// Dimensions: 60mm x 30mm x 35mm\n\n$fn = 50;\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        translate([0, 0, 10])\n            cube([50, 30, 20], center=true);\n        \n        // Mounting holes\n        translate([-20, -10, 10])\n            cylinder(h=25, r=2.5, center=true);\n        translate([-20, 10, 10])\n            cylinder(h=25, r=2.5, center=true);\n        translate([20, -10, 10])\n            cylinder(h=25, r=2.5, center=true);\n        translate([20, 10, 10])\n            cylinder(h=25, r=2.5, center=true);\n        \n        // Internal cavity\n        translate([0, 0, 10])\n            cube([46, 26, 18], center=true);\n    }\n}\n\n// Switch mechanism housing\nmodule mechanism() {\n    difference() {\n        // Pivot housing\n        translate([0, 0, 0])\n            cube([30, 15, 12], center=true);\n        \n        // Pivot hole\n        translate([0, 0, -1])\n            cylinder(h=14, r=3, center=true);\n        \n        // Contact recess\n        translate([-10, 0, -6])\n            cube([8, 10, 8], center=true);\n        translate([10, 0, -6])\n            cube([8, 10, 8], center=true);\n    }\n}\n\n// Toggle lever\nmodule lever() {\n    // Pivot pin\n    translate([0, 0, 0])\n        cylinder(h=15, r=3, center=true);\n    \n    // Lever arm\n    translate([0, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=35, r=4, center=false);\n    \n    // Lever handle\n    translate([0, 0, 35])\n        rotate([0, 90, 0])\n        sphere(r=6);\n    \n    // Grip knurls\n    for(i = [0:3:30]) {\n        rotate([0, 0, i])\n        translate([0, -3.5, 20])\n            cube([1, 7, 1], center=true);\n    }\n}\n\n// Terminal screws\nmodule terminals() {\n    // Left terminal\n    translate([-25, 0, 5])\n        screw();\n    // Right terminal\n    translate([25, 0, 5])\n        screw();\n}\n\nmodule screw() {\n    // Screw head\n    cylinder(h=3, r=5);\n    \n    // Screw slot\n    translate([0, 0, 1.5])\n        cube([8, 1, 2], center=true);\n    \n    // Threads (simplified)\n    for(i = [0:3:10]) {\n        translate([0, 0, i-5])\n            cylinder(h=1.5, r=4.5);\n    }\n}\n\n// Assembly\nbody();\ntranslate([0, 0, 10]) mechanism();\nlever();\nterminals();",
    "renders": true
  },
  {
    "mechanical_component": "buckle",
    "openscad_code": "// Medium-complexity realistic 3D-printable buckle\n// Overall size ≈ 60 mm x 40 mm x 10 mm\n\n$fn = 50;\n\n// Wall thickness\nwt = 2;\n\n// Main frame outer dimensions\nframe_l = 60;\nframe_w = 38;\nframe_t = 10;\n\n// Tongue hole\ntongue_w = 12;\ntongue_h = 4;\n\n// Belt bar\nbar_w = 8;\n\n// Prong\nprong_l = 22;\nprong_w = 3;\nprong_h = 3;\n\nmodule frame() {\n    difference() {\n        // Outer solid frame\n        cube([frame_l, frame_w, frame_t], center = true);\n\n        // Central window\n        translate([0, 0, -1])\n            cube([frame_l - 2*wt, frame_w - 2*wt, frame_t + 2], center = true);\n\n        // Tongue slot\n        translate([ frame_l/2 - bar_w - tongue_w/2 - wt/2, 0, -1])\n            cube([tongue_w + wt, tongue_h + 2*wt, frame_t + 2], center = true);\n    }\n}\n\nmodule belt_bar() {\n    translate([ frame_l/2 - bar_w/2 - wt, 0, 0])\n        cube([bar_w, frame_w - 2*wt, frame_t], center = true);\n}\n\nmodule prong() {\n    translate([ -frame_l/2 + wt + 2, 0, frame_t/2 - prong_h/2])\n        rotate([90, 0, 0])\n        union() {\n            // Base ring\n            cylinder(h = prong_w, r = wt*1.5, center = true);\n\n            // Prong shaft\n            translate([ prong_l/2 - wt/2, 0, 0])\n                cube([prong_l, prong_w, prong_h], center = true);\n\n            // Tip sphere for safety\n            translate([ prong_l - wt/2, 0, 0])\n                sphere(r = prong_w/2);\n        }\n}\n\n// Chamfer helper\nmodule chamfer_edge() {\n    for (x = [-1, 1])\n    for (y = [-1, 1])\n        translate([x*(frame_l/2 - wt), y*(frame_w/2 - wt), 0])\n            mirror([x, y, 0])\n                rotate([0, 0, 45])\n                    cube([sqrt(2)*wt, sqrt(2)*wt, frame_t], center = true);\n}\n\n// Assembly\nunion() {\n    difference() {\n        frame();\n        chamfer_edge();\n    }\n    belt_bar();\n    prong();\n}",
    "renders": true
  }
]