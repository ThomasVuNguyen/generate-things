[
  {
    "plant": "aloe",
    "openscad_code": "// Realistic Aloe Plant - Medium Complexity\n// 3D printable with 2mm walls and no overhangs\n\n$fn = 32;\n\n// Main parameters\npot_height = 40;\npot_radius = 30;\nplant_height = 120;\nbase_width = 5; // wall thickness for 3D printing\n\nmodule pot() {\n    // Outer pot\n    difference() {\n        cylinder(h=pot_height, r=pot_radius, center=false);\n        translate([0, 0, 2]) // Base thickness\n            cylinder(h=pot_height, r=pot_radius-3, center=false);\n    }\n    \n    // Drainage hole\n    translate([0, 0, 2])\n        cylinder(h=3, r=5, center=false);\n    \n    // Soil surface\n    translate([0, 0, pot_height-5])\n        cylinder(h=5, r=pot_radius-3, center=false);\n}\n\nmodule leaf(height, width, thickness, angle) {\n    // Tapered leaf shape using scaled cylinders\n    union() {\n        // Main leaf body\n        translate([0, 0, height/2])\n            scale([width/2, thickness/2, height/2])\n                sphere(r=1);\n        \n        // Leaf tip - triangular\n        translate([0, 0, height])\n            rotate([90, 0, 0])\n                cylinder(h=width*0.7, r1=width/2, r2=0, center=false);\n    }\n}\n\nmodule aloe_rosette() {\n    // Central leaves - largest\n    for(i=[0:5]) {\n        angle = i * 60;\n        rotate([0, 0, angle])\n            translate([0, 0, pot_height])\n                rotate([10 + i*2, 0, 0])\n                    leaf(plant_height*0.8, 20, 4, angle);\n    }\n    \n    // Middle ring leaves\n    for(i=[0:8]) {\n        angle = i * 45;\n        rotate([0, 0, angle])\n            translate([0, 0, pot_height+5])\n                rotate([15 + i*1.5, 0, 0])\n                    leaf(plant_height*0.6, 15, 3, angle);\n    }\n    \n    // Outer small leaves\n    for(i=[0:12]) {\n        angle = i * 30;\n        rotate([0, 0, angle])\n            translate([0, 0, pot_height+8])\n                rotate([20 + i*1, 0, 0])\n                    leaf(plant_height*0.4, 10, 2, angle);\n    }\n    \n    // Baby shoots\n    translate([15, 15, pot_height+3])\n        rotate([0, 0, 45])\n            leaf(plant_height*0.3, 8, 2, 45);\n    \n    translate([-15, -10, pot_height+3])\n        rotate([0, 0, -30])\n            leaf(plant_height*0.25, 7, 2, -30);\n}\n\nmodule aloe_texture() {\n    // Leaf surface details - subtle ridges\n    for(leaf=[0:20]) {\n        rotate([0, 0, leaf*18])\n            translate([0, 0, pot_height+leaf*0.5])\n                rotate([5+leaf, 0, 0])\n                    cylinder(h=plant_height*0.7, r=0.5, center=false);\n    }\n}\n\n// Assembly\nunion() {\n    pot();\n    aloe_rosette();\n}\n\n// Base for printing\ntranslate([0, 0, -2])\n    cube([pot_radius*2.5, pot_radius*2.5, 2], center=true);",
    "renders": true
  },
  {
    "plant": "fern",
    "openscad_code": "// Realistic Fern Plant - Medium Complexity\n// 3D printable fern with proper proportions and structural elements\n\nmodule stem_segment(h, r, taper=1) {\n    // Create a tapered stem segment\n    cylinder(h=h, r1=r, r2=r*taper, $fn=8);\n}\n\nmodule leaf_frond(length, width, angle, curl=0) {\n    // Create a single leaf frond with realistic shape\n    translate([0, 0, 0]) {\n        rotate([0, 0, angle]) {\n            // Main leaf blade\n            for(i = [0:5:length]) {\n                translate([i*0.8, 0, 0]) {\n                    rotate([0, curl*i/length*30, 0]) {\n                        scale([1, (1-i/length)*0.8, 0.1]) {\n                            sphere(d=width, $fn=6);\n                        }\n                    }\n                }\n            }\n            // Leaf midrib\n            color(\"darkgreen\") \n            cylinder(h=length, r=0.5, $fn=6);\n        }\n    }\n}\n\nmodule leaflet_pair(length, angle) {\n    // Create a pair of leaflets\n    translate([0, 0, 0]) {\n        rotate([0, 0, angle]) {\n            // Left leaflet\n            translate([-length/2, 0, 0]) {\n                rotate([0, 0, -45]) {\n                    leaf_frond(length*0.7, length*0.15, 0, 10);\n                }\n            }\n            // Right leaflet\n            translate([length/2, 0, 0]) {\n                rotate([0, 0, 45]) {\n                    leaf_frond(length*0.7, length*0.15, 0, -10);\n                }\n            }\n        }\n    }\n}\n\nmodule fern_frond(base_length, levels, base_angle) {\n    // Create a complete fern frond with multiple leaflets\n    translate([0, 0, 0]) {\n        rotate([0, 0, base_angle]) {\n            // Main stem of frond\n            color(\"saddle\") \n            stem_segment(base_length, 1.5, 0.7);\n            \n            // Progressive leaflets\n            for(i = [1:levels]) {\n                translate([i*base_length/levels, 0, 0]) {\n                    scale([1 - i*0.1, 1 - i*0.1, 1]) {\n                        leaflet_pair(base_length*0.4, 0);\n                    }\n                }\n            }\n            \n            // Tip leaflet\n            translate([base_length, 0, 0]) {\n                scale([0.3, 0.3, 1]) {\n                    leaf_frond(base_length*0.3, base_length*0.08, 0);\n                }\n            }\n        }\n    }\n}\n\nmodule rhizome() {\n    // Create the main rhizome/root structure\n    color(\"saddle\") {\n        // Main horizontal rhizome\n        translate([0, 0, -5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=15, r=3, $fn=12);\n            }\n        }\n        \n        // Root hairs\n        for(i = [0:30:360]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, -7]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=8, r=0.5, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule fiddlehead(radius) {\n    // Create a young fiddlehead (crosier)\n    color(\"darkgreen\") {\n        rotate_extrude(angle=180, $fn=32) {\n            translate([radius, 0, 0]) {\n                circle(r=radius/2, $fn=16);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base rhizome\n    rhizome();\n    \n    // Central cluster of fronds\n    for(i = [0:45:315]) {\n        rotate([0, 0, i]) {\n            translate([0, 0, 0]) {\n                fern_frond(35, 6, 75 - i*0.1);\n            }\n        }\n    }\n    \n    // Outer ring of larger fronds\n    for(i = [0:60:300]) {\n        rotate([0, 0, i]) {\n            translate([5*cos(i), 5*sin(i), 0]) {\n                fern_frond(45, 8, 60 - i*0.05);\n            }\n        }\n    }\n    \n    // Young fiddleheads emerging\n    translate([8, 0, 3]) {\n        rotate([0, 0, 30]) {\n            fiddlehead(4);\n        }\n    }\n    \n    translate([-8, 0, 3]) {\n        rotate([0, 0, -30]) {\n            fiddlehead(3.5);\n        }\n    }\n}",
    "renders": true
  },
  {
    "plant": "ivy",
    "openscad_code": "// Ivy Plant - Realistic Style, Medium Complexity\n// Overall dimensions ~100mm tall x 80mm wide x 80mm deep\n\nmodule stem_segment(length, radius) {\n    // Create a single stem segment with slight taper\n    cylinder(h=length, r1=radius, r2=radius*0.8, $fn=8);\n}\n\nmodule leaf() {\n    // Heart-shaped ivy leaf with thickness\n    union() {\n        // Main leaf body\n        scale([1, 1.2, 1]) \n        difference() {\n            sphere(r=8, $fn=16);\n            translate([0, 0, -6])\n            cube([20, 20, 20], center=true);\n        }\n        \n        // Leaf thickness\n        translate([0, 0, -1])\n        scale([0.8, 1, 0.2])\n        sphere(r=8, $fn=16);\n        \n        // Leaf veins\n        for(i=[-1:1]) {\n            rotate([0, 0, i*30])\n            translate([0, 0, 0.5])\n            scale([0.1, 0.7, 0.1])\n            cube([1, 10, 1], center=true);\n        }\n    }\n}\n\nmodule vine(length, segments) {\n    // Create a climbing vine with alternating leaves\n    for(i=[0:segments-1]) {\n        translate([0, 0, i*length/segments])\n        rotate([0, 0, i*45])\n        stem_segment(length/segments, 2);\n        \n        // Add leaves every other segment\n        if(i%2==0) {\n            translate([0, 0, i*length/segments])\n            rotate([0, 90, 0])\n            translate([0, 8, 0])\n            rotate([0, 0, 30])\n            leaf();\n            \n            // Opposite leaf\n            translate([0, 0, i*length/segments])\n            rotate([0, -90, 0])\n            translate([0, -8, 0])\n            rotate([0, 0, -30])\n            mirror([0, 1, 0])\n            leaf();\n        }\n    }\n}\n\nmodule planter() {\n    // Simple pot for the ivy base\n    difference() {\n        // Outer pot\n        cylinder(h=20, r1=25, r2=20, $fn=32);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n        cylinder(h=19, r1=23, r2=18, $fn=32);\n    }\n}\n\nmodule soil() {\n    // Soil surface in planter\n    translate([0, 0, 19])\n    scale([1, 1, 0.3])\n    sphere(r=25, $fn=32);\n}\n\n// Main assembly\nunion() {\n    // Planter base\n    planter();\n    soil();\n    \n    // Main vine growing up\n    translate([0, 0, 20])\n    rotate([0, 0, 15])\n    vine(60, 12);\n    \n    // Side branch 1\n    translate([5, 5, 35])\n    rotate([30, 0, 45])\n    vine(40, 8);\n    \n    // Side branch 2\n    translate([-5, -3, 45])\n    rotate([-20, 0, -30])\n    vine(35, 6);\n    \n    // Top curling branch\n    translate([0, 10, 75])\n    rotate([45, 0, 0])\n    rotate([0, 0, 90])\n    vine(25, 4);\n}",
    "renders": true
  },
  {
    "plant": "jade",
    "openscad_code": "// Jade Plant - OpenSCAD Code\n// Realistic style, medium complexity\n\n$fn = 24;\n\n// Main plant module\nmodule jade_plant() {\n    // Pot base\n    translate([0, 0, 0])\n        pot();\n    \n    // Main trunk\n    translate([0, 0, 15])\n        trunk();\n    \n    // Branches with leaves\n    translate([0, 0, 25])\n        branches();\n}\n\n// Pot module\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = 20, r1 = 25, r2 = 20);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = 18, r1 = 23, r2 = 18);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h = 3, r = 3);\n    }\n    \n    // Soil surface\n    translate([0, 0, 19])\n        cylinder(h = 1, r = 22.5);\n}\n\n// Trunk module\nmodule trunk() {\n    // Main stem\n    cylinder(h = 15, r1 = 4, r2 = 6);\n    \n    // Textured segments\n    for(i = [0:2:13]) {\n        translate([0, 0, i])\n            rotate([0, 0, i * 30])\n                cylinder(h = 2, r1 = 5.5, r2 = 5.5);\n    }\n}\n\n// Branches module\nmodule branches() {\n    // Main branch 1\n    translate([0, 0, 0])\n        rotate([0, 0, 0])\n            branch(30, 3);\n    \n    // Main branch 2\n    translate([0, 0, 0])\n        rotate([0, 0, 120])\n            branch(25, 2.5);\n    \n    // Main branch 3\n    translate([0, 0, 0])\n        rotate([0, 0, 240])\n            branch(28, 2.8);\n}\n\n// Branch with leaves\nmodule branch(length, thickness) {\n    // Stem\n    translate([0, 0, 0])\n        rotate([30, 0, 0])\n            cylinder(h = length, r1 = thickness, r2 = thickness * 0.8);\n    \n    // Leaves along branch\n    for(i = [5:5:length-5]) {\n        // Left leaves\n        translate([0, 0, i])\n            rotate([30 + i * 2, 0, 45])\n                leaf(thickness * 2);\n        \n        // Right leaves\n        translate([0, 0, i])\n            rotate([30 + i * 2, 0, -45])\n                leaf(thickness * 2);\n    }\n    \n    // Terminal leaf cluster\n    translate([0, 0, length])\n        rotate([45, 0, 0])\n            leaf_cluster(thickness * 3);\n}\n\n// Single jade leaf\nmodule leaf(size) {\n    // Main leaf body\n    scale([1, 0.5, 0.2])\n        sphere(r = size);\n    \n    // Leaf tip\n    translate([size * 0.8, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = size * 0.3, r1 = size * 0.3, r2 = 0);\n}\n\n// Leaf cluster\nmodule leaf_cluster(size) {\n    // Central leaves\n    leaf(size);\n    \n    // Surrounding leaves\n    for(angle = [0:60:300]) {\n        rotate([0, 0, angle])\n            translate([size * 0.5, 0, 0])\n                rotate([0, 30, 0])\n                    leaf(size * 0.8);\n    }\n}\n\n// Generate the plant\njade_plant();",
    "renders": true
  },
  {
    "plant": "pothos",
    "openscad_code": "// Pothos Plant - Realistic Style, Medium Complexity\n// Size: ~100mm tall, 3D printable with 2mm walls\n\n$fn = 32;  // Smooth curves for printing\n\n// Main parameters\npot_height = 40;\npot_diameter = 35;\nstem_thickness = 3;\nleaf_thickness = 1.5;\nwall_thickness = 2;\n\n// Pot module\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = pot_height, d1 = pot_diameter, d2 = pot_diameter * 0.8, center = false);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n        cylinder(h = pot_height - wall_thickness, d1 = pot_diameter - wall_thickness*2, d2 = (pot_diameter * 0.8) - wall_thickness*2, center = false);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n        cylinder(h = 5, d = 8, center = false);\n    }\n    \n    // Soil surface\n    translate([0, 0, pot_height - 2])\n    cylinder(h = 2, d = pot_diameter - 4, center = false);\n}\n\n// Leaf module - heart-shaped\nmodule leaf(size = 25) {\n    scale([1, 0.8, 1])\n    difference() {\n        // Main leaf shape\n        union() {\n            sphere(d = size);\n            translate([0, -size/2, 0])\n            sphere(d = size * 0.8);\n        }\n        \n        // Stem attachment point\n        translate([0, -size/2, -leaf_thickness/2])\n        cube([size*0.3, size*0.3, leaf_thickness*2], center = true);\n        \n        // Vein details (subtractive for realism)\n        translate([0, 0, -leaf_thickness/2])\n        for(i = [-0.3, 0, 0.3]) {\n            rotate([0, 0, i * 30])\n            translate([0, 0, -0.5])\n            cube([leaf_thickness*0.5, size*0.7, leaf_thickness], center = true);\n        }\n    }\n}\n\n// Stem segment with node\nmodule stem_segment(length = 20, angle = 0) {\n    color(\"darkgreen\")\n    union() {\n        // Main stem\n        rotate([0, 90, 0])\n        cylinder(h = length, d = stem_thickness, center = false);\n        \n        // Node (where leaves/roots emerge)\n        translate([length/2, 0, 0])\n        sphere(d = stem_thickness * 1.5);\n    }\n}\n\n// Main plant structure\nmodule pothos_plant() {\n    // Pot at base\n    translate([0, 0, 0])\n    pot();\n    \n    // Main stem emerging from soil\n    translate([0, 0, pot_height])\n    rotate([5, 0, 0])\n    stem_segment(30, 0);\n    \n    // First level branches\n    for(i = [0:45:360]) {\n        rotate([0, 0, i])\n        translate([15, 0, pot_height + 15])\n        rotate([0, 0, 30])\n        stem_segment(25, 0);\n        \n        // Leaves on first level\n        translate([25, 0, pot_height + 15])\n        rotate([0, 0, i])\n        rotate([0, -30, -45])\n        leaf(20);\n        \n        translate([25, 0, pot_height + 15])\n        rotate([0, 0, i + 180])\n        rotate([0, 30, 135])\n        leaf(18);\n    }\n    \n    // Second level - trailing vines\n    for(i = [0:60:360]) {\n        rotate([0, 0, i])\n        translate([0, 0, pot_height + 5])\n        rotate([30, 0, 0])\n        stem_segment(40, 0);\n        \n        // Leaves along vine\n        for(j = [0:15:35]) {\n            translate([j, 0, pot_height + 5 + j*0.5])\n            rotate([0, 0, j*2])\n            rotate([0, -20, 0])\n            leaf(15 - j/5);\n        }\n    }\n    \n    // Aerial roots\n    color(\"brown\")\n    for(i = [0:90:360]) {\n        rotate([0, 0, i])\n        translate([12, 0, pot_height + 20])\n        rotate([90, 0, 0])\n        cylinder(h = 15, d1 = 2, d2 = 1, center = false);\n    }\n}\n\n// Generate the plant\npothos_plant();",
    "renders": true
  },
  {
    "plant": "spiderplant",
    "openscad_code": "// Spider Plant - Chlorophytum comosum\n// Realistic style, medium complexity\n\n// Overall dimensions: ~120mm width x 80mm depth x 80mm height\n\nmodule pot() {\n    // Main pot body\n    difference() {\n        // Outer pot\n        cylinder(h = 25, d1 = 60, d2 = 55, $fn = 48);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = 23, d1 = 56, d2 = 51, $fn = 48);\n    }\n    \n    // Drainage hole\n    translate([0, 0, 0])\n        cylinder(h = 2, d = 6, $fn = 16);\n    \n    // Rim detail\n    translate([0, 0, 25])\n        cylinder(h = 3, d1 = 62, d2 = 60, $fn = 48);\n}\n\nmodule soil_surface() {\n    // Top soil surface\n    translate([0, 0, 25])\n        cylinder(h = 2, d = 56, $fn = 48);\n}\n\nmodule leaf(length, width, height, angle, curl) {\n    // Individual leaf blade\n    translate([0, 0, height])\n    rotate([0, 0, angle])\n    rotate([curl, 0, 0])\n    scale([width, length, 1])\n    difference() {\n        sphere(d = 1);\n        translate([-0.5, -0.5, -0.5])\n            cube(1);\n    }\n}\n\nmodule leaf_cluster(x, y, z, count, start_angle) {\n    // Cluster of leaves at one growth point\n    translate([x, y, z])\n    for(i = [0:count-1]) {\n        leaf_length = rands(25, 45, 1)[0];\n        leaf_width = rands(2, 3.5, 1)[0];\n        leaf_angle = start_angle + i * (360/count) + rands(-10, 10, 1)[0];\n        leaf_curl = rands(-15, 5, 1)[0];\n        leaf(leaf_length, leaf_width, 0, leaf_angle, leaf_curl);\n    }\n}\n\nmodule stolon() {\n    // Flowering stem/stolon\n    translate([0, 20, 28])\n    rotate([90, 0, 0])\n    cylinder(h = 15, d1 = 3, d2 = 1.5, $fn = 12);\n    \n    // Baby plantlet at end\n    translate([0, 35, 28])\n    leaf_cluster(0, 0, 0, 4, 0);\n}\n\nmodule main_plant() {\n    // Central crown leaves\n    leaf_cluster(0, 0, 27, 8, 0);\n    \n    // Outer ring of longer leaves\n    leaf_cluster(0, 0, 27, 12, 15);\n    \n    // Random scattered leaves for natural look\n    for(i = [0:5]) {\n        random_x = rands(-10, 10, 1)[0];\n        random_y = rands(-10, 10, 1)[0];\n        leaf_cluster(random_x, random_y, 27, 3, rands(0, 360, 1)[0]);\n    }\n}\n\n// Assemble the complete plant\nunion() {\n    pot();\n    soil_surface();\n    main_plant();\n    \n    // Add 3 stolons with plantlets\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n        stolon();\n    }\n}",
    "renders": true
  },
  {
    "plant": "snakeplant",
    "openscad_code": "// Snake plant (Sansevieria) in realistic style\n// Overall height: 100 mm, pot diameter: 50 mm\n\nmodule pot() {\n    // Outer pot\n    difference() {\n        cylinder(h=25, r1=25, r2=22, $fn=60);\n        translate([0,0,2])\n            cylinder(h=23, r1=23, r2=20, $fn=60);\n    }\n    \n    // Soil surface\n    translate([0,0,23])\n        cylinder(h=2, r1=22, r2=22, $fn=60);\n}\n\nmodule leaf(height, width, thickness, lean, twist) {\n    // Base of leaf\n    translate([0,0,0])\n        cube([width, thickness, 2], center=true);\n    \n    // Tapered blade\n    for(i=[0:5:height]) {\n        h = i;\n        w = width * (1 - h/height * 0.7);\n        t = thickness * (1 - h/height * 0.5);\n        \n        translate([0,0,h])\n        rotate([0,0,twist * h/height])\n        rotate([lean,0,0])\n            cube([w, t, 5], center=true);\n    }\n}\n\nmodule snake_plant() {\n    pot();\n    \n    // Central large leaves\n    for(angle=[0:120:240]) {\n        rotate([0,0,angle])\n        translate([5,0,25])\n            leaf(height=60, width=12, thickness=2.5, lean=10, twist=5);\n    }\n    \n    // Medium leaves\n    for(angle=[60:120:300]) {\n        rotate([0,0,angle])\n        translate([8,0,25])\n            leaf(height=45, width=8, thickness=2, lean=15, twist=-8);\n    }\n    \n    // Small shoots\n    for(angle=[30:60:330]) {\n        rotate([0,0,angle])\n        translate([3,0,25])\n            leaf(height=30, width=5, thickness=1.5, lean=20, twist=3);\n    }\n    \n    // Curved outer leaves\n    rotate([0,0,-30])\n    translate([10,0,25])\n    rotate([0,10,0])\n        leaf(height=55, width=10, thickness=2, lean=-5, twist=12);\n        \n    rotate([0,0,150])\n    translate([10,0,25])\n    rotate([0,-10,0])\n        leaf(height=55, width=10, thickness=2, lean=-5, twist=-12);\n}\n\n// Render the complete plant\nsnake_plant();",
    "renders": true
  },
  {
    "plant": "monstera",
    "openscad_code": "// Monstera Plant - Realistic Style\n// 3D printable with 2mm walls, no overhangs\n\n// Global settings\n$fn = 36;\n\n// Pot dimensions\npot_height = 40;\npot_radius = 25;\npot_thickness = 2;\n\n// Stem dimensions\nstem_height = 80;\nstem_radius = 4;\n\n// Leaf dimensions\nleaf_length = 45;\nleaf_width = 35;\nleaf_thickness = 2;\n\n// Create the entire plant\nmodule monstera_plant() {\n    union() {\n        // Pot\n        translate([0, 0, pot_height/2])\n            pot();\n        \n        // Soil surface\n        translate([0, 0, pot_height])\n            soil();\n        \n        // Main stem\n        translate([0, 0, pot_height])\n            stem();\n        \n        // Leaves\n        translate([0, 0, pot_height + stem_height*0.9])\n            rotate([0, 0, 45])\n            leaf(0);\n            \n        translate([0, 0, pot_height + stem_height*0.7])\n            rotate([0, 0, -30])\n            leaf(15);\n            \n        translate([0, 0, pot_height + stem_height*0.5])\n            rotate([0, 0, 75])\n            leaf(-10);\n            \n        translate([0, 0, pot_height + stem_height*0.3])\n            rotate([0, 0, -60])\n            leaf(5);\n    }\n}\n\n// Pot with drainage hole\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = pot_height, r = pot_radius, center = true);\n        \n        // Inner hollow\n        translate([0, 0, -pot_thickness/2])\n            cylinder(h = pot_height + 1, r = pot_radius - pot_thickness, center = true);\n        \n        // Drainage hole\n        translate([0, 0, pot_height/2 - pot_thickness])\n            cylinder(h = pot_thickness + 1, r = 5, center = true);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, -1])\n        cylinder(h = 2, r = pot_radius - pot_thickness, center = true);\n}\n\n// Main stem\nmodule stem() {\n    for(i = [1:8]) {\n        translate([0, 0, i * stem_height/8])\n            rotate([0, 0, i * 15])\n            cylinder(h = stem_height/8, r = stem_radius - i*0.2, center = false);\n    }\n}\n\n// Individual leaf with fenestrations\nmodule leaf(angle_offset) {\n    // Main leaf body\n    translate([0, 0, 0])\n        rotate([angle_offset, 0, 0])\n        union() {\n            // Leaf blade\n            scale([1, 0.8, 1])\n                leaf_shape();\n            \n            // Petiole (leaf stem)\n            translate([0, -leaf_width/2 - 5, -leaf_thickness/2])\n                rotate([90, 0, 0])\n                cylinder(h = 15, r = 2, center = false);\n        }\n}\n\n// Leaf shape with fenestrations\nmodule leaf_shape() {\n    difference() {\n        // Main leaf body\n        hull() {\n            translate([0, 0, 0])\n                sphere(r = leaf_length/2);\n            translate([0, leaf_width/2, 0])\n                sphere(r = leaf_length/3);\n            translate([leaf_length/4, -leaf_width/4, 0])\n                sphere(r = leaf_length/4);\n            translate([-leaf_length/4, -leaf_width/4, 0])\n                sphere(r = leaf_length/4);\n        }\n        \n        // Central fenestration\n        translate([0, 5, 0])\n            rotate([0, 0, 30])\n            scale([1, 0.3, 1])\n            cylinder(h = leaf_thickness + 1, r = leaf_length/5, center = true);\n        \n        // Side fenestrations\n        translate([leaf_length/3, 0, 0])\n            rotate([0, 0, -20])\n            scale([0.8, 0.2, 1])\n            cylinder(h = leaf_thickness + 1, r = leaf_length/6, center = true);\n            \n        translate([-leaf_length/3, 0, 0])\n            rotate([0, 0, 20])\n            scale([0.8, 0.2, 1])\n            cylinder(h = leaf_thickness + 1, r = leaf_length/6, center = true);\n            \n        // Small holes\n        for(i = [1:3]) {\n            translate([leaf_length/4 * cos(i * 120), leaf_width/4 * sin(i * 120), 0])\n                sphere(r = 3);\n        }\n    }\n}\n\n// Generate the plant\nmonstera_plant();",
    "renders": true
  },
  {
    "plant": "dieffenbachia",
    "openscad_code": "// Dieffenbachia plant – medium complexity, realistic style\n// Overall height ~120 mm, printable as one piece\n\n$fn = 36;               // smooth curves\n\n// ---------- POT ----------\nmodule pot() {\n    difference() {\n        cylinder(h = 28, d1 = 50, d2 = 45, center = false);   // outer\n        translate([0, 0, 2])\n            cylinder(h = 26, d1 = 46, d2 = 41, center = false); // inner cavity\n    }\n}\n\n// ---------- STEM ----------\nmodule stem(h = 75, r = 4) {\n    // simple segmented cane-like stem\n    for(i = [0:8]) {\n        translate([0, 0, i*9])\n            cylinder(h = 9, r = r - i*0.15, center = false);\n    }\n}\n\n// ---------- SINGLE LEAF ----------\nmodule leaf(len = 35, wid = 18, ang = 0) {\n    // main blade\n    translate([0, 0, -len/2])\n        rotate([0, 90, 0])\n            scale([1, wid/len, 0.2])\n                sphere(d = len);\n\n    // petiole\n    rotate([0, 0, ang])\n        translate([0, 0, -len/2 - 8])\n            rotate([90, 0, 0])\n                cylinder(h = 10, r = 2, center = false);\n}\n\n// ---------- LEAF CLUSTER ----------\nmodule leaf_cluster(base_h, base_r) {\n    // attach to top of stem\n    translate([0, 0, base_h])\n    rotate([0, 0, 45]) {\n        for(a = [0:120:359]) {\n            rotate([0, 0, a])\n                translate([base_r + 5, 0, 0])\n                    rotate([0, -30, 0])\n                        leaf(35 - a/10, 20 - a/20, a);\n        }\n    }\n}\n\n// ---------- ASSEMBLY ----------\nunion() {\n    pot();\n    translate([0, 0, 28])\n        stem();\n    translate([0, 0, 28 + 75])\n        leaf_cluster(0, 0);\n}",
    "renders": true
  },
  {
    "plant": "philodendron",
    "openscad_code": "$fn = 30;\n\n// Philodendron plant with medium complexity\n// Overall height: 100 mm, suitable for 3D printing\n\n// Base pot\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = 25, r1 = 30, r2 = 25);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = 23, r1 = 28, r2 = 23);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    color(\"saddlebrown\")\n    translate([0, 0, 24])\n        cylinder(h = 3, r1 = 28, r2 = 23);\n}\n\n// Stem segment\nmodule stem_segment(length, angle) {\n    rotate([0, 0, angle])\n        translate([0, 0, 2])\n            cylinder(h = length, r1 = 2.5, r2 = 2);\n}\n\n// Leaf blade with proper philodendron shape\nmodule leaf(blade_length, blade_width, petiole_length) {\n    color(\"forestgreen\")\n    union() {\n        // Petiole\n        translate([0, 0, 0])\n            cylinder(h = petiole_length, r = 1.5);\n        \n        // Leaf blade\n        translate([0, 0, petiole_length])\n            difference() {\n                // Overall heart shape\n                scale([blade_width, blade_length, 1])\n                    sphere(r = 1);\n                \n                // Cut the bottom to make heart indent\n                translate([0, -blade_length/2, -1])\n                    cube([blade_width*2, blade_length, 2.2], center = true);\n                \n                // Add veins (subtractive for detail)\n                for(i = [-1:1]) {\n                    translate([i*3, 0, -0.5])\n                        cube([0.5, blade_length, 1.2]);\n                }\n            }\n    }\n}\n\n// Main plant structure\nmodule philodendron() {\n    pot();\n    soil();\n    \n    // Central stems growing from soil\n    for(i = [0:60:359]) {\n        // First level stem\n        translate([0, 0, 27])\n        rotate([0, 0, i])\n        translate([10, 0, 0]) {\n            stem_segment(25, 0);\n            \n            // Second level stem\n            translate([0, 0, 25])\n            rotate([0, 30, 0])\n            stem_segment(20, 0);\n            \n            // First leaf\n            translate([0, 0, 45])\n            rotate([0, -30, 45])\n            leaf(15, 12, 8);\n            \n            // Second leaf on same stem\n            translate([0, 0, 45])\n            rotate([0, -30, -45])\n            leaf(18, 15, 10);\n        }\n    }\n    \n    // Additional stems with leaves\n    for(i = [30:120:359]) {\n        translate([0, 0, 27])\n        rotate([0, 0, i])\n        translate([15, 0, 0]) {\n            stem_segment(30, 0);\n            \n            // Larger leaf\n            translate([0, 0, 30])\n            rotate([0, -20, 0])\n            leaf(22, 18, 12);\n        }\n    }\n    \n    // Small aerial roots\n    color(\"darkgoldenrod\")\n    for(i = [0:90:359]) {\n        translate([0, 0, 27])\n        rotate([0, 0, i])\n        translate([8, 0, 0])\n            cylinder(h = 15, r = 1);\n    }\n}\n\n// Render the complete plant\nphilodendron();",
    "renders": true
  },
  {
    "plant": "peace",
    "openscad_code": "// Peace Lily Plant (Spathiphyllum)\n// Realistic style, medium complexity\n// Overall height: ~120 mm\n\n// Parameters\n$fn = 32;\nstem_height = 80;\nstem_diameter = 4;\nleaf_length = 45;\nleaf_width = 25;\nleaf_thickness = 2;\nflower_height = 25;\nflower_width = 18;\nflower_length = 30;\npot_height = 30;\npot_diameter = 50;\nsoil_height = 10;\n\n// Main module\nmodule peace_plant() {\n    union() {\n        // Flower pot\n        translate([0, 0, soil_height]) \n            pot();\n        \n        // Soil surface\n        translate([0, 0, soil_height - 0.1]) \n            cylinder(h = soil_height + 0.2, d1 = pot_diameter - 2, d2 = pot_diameter - 8, $fn = 64);\n        \n        // Plant stems and leaves\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90 + 15]) \n                translate([8, 0, soil_height]) \n                    stem_with_leaves(i);\n        }\n        \n        // Flowers\n        translate([5, 5, soil_height + stem_height - 10]) \n            rotate([0, -15, 30]) \n                flower();\n        translate([-5, -3, soil_height + stem_height - 12]) \n            rotate([0, 10, -20]) \n                flower();\n    }\n}\n\n// Flower pot with drainage hole\nmodule pot() {\n    difference() {\n        union() {\n            // Outer pot\n            cylinder(h = pot_height, d = pot_diameter);\n            // Bottom\n            translate([0, 0, -1]) \n                cylinder(h = 2, d = pot_diameter);\n        }\n        // Inner hollow\n        translate([0, 0, -0.5]) \n            cylinder(h = pot_height + 2, d = pot_diameter - 4);\n        // Drainage hole\n        translate([0, 0, -0.5]) \n            cylinder(h = 3, d = 6);\n    }\n}\n\n// Stem with leaves module\nmodule stem_with_leaves(index) {\n    color(\"darkgreen\") {\n        // Main stem\n        translate([0, 0, 0]) \n            cylinder(h = stem_height, d = stem_diameter);\n        \n        // Leaves\n        translate([0, 0, stem_height - 20]) \n            rotate([0, 90, 0]) \n                leaf(leaf_length, leaf_width, leaf_thickness);\n        \n        translate([0, 0, stem_height - 35]) \n            rotate([0, 60, -30]) \n                leaf(leaf_length * 0.8, leaf_width * 0.8, leaf_thickness);\n        \n        translate([0, 0, stem_height - 50]) \n            rotate([0, 45, 45]) \n                leaf(leaf_length * 0.6, leaf_width * 0.6, leaf_thickness);\n    }\n}\n\n// Leaf module with realistic shape\nmodule leaf(length, width, thickness) {\n    difference() {\n        union() {\n            // Main leaf body\n            scale([1, width/length, 1]) \n                sphere(d = length);\n            \n            // Leaf tip extension\n            translate([length/2, 0, 0]) \n                rotate([0, 90, 0]) \n                    cylinder(h = length/3, d1 = width/2, d2 = 0);\n        }\n        // Center vein indentation\n        translate([0, 0, -thickness/2]) \n            cube([length * 1.2, width/10, thickness + 1], center = true);\n        \n        // Side veins\n        for(i = [-1, 1]) {\n            translate([i * length/4, 0, -thickness/2]) \n                rotate([0, 0, i * 15]) \n                    cube([length/2, width/15, thickness + 1], center = true);\n        }\n    }\n}\n\n// Flower (spathe and spadix)\nmodule flower() {\n    union() {\n        // White spathe\n        color(\"white\") {\n            translate([0, 0, 0]) \n                rotate([0, 90, 0]) \n                    difference() {\n                        // Main curved spathe\n                        scale([1, 1.5, 0.6]) \n                            sphere(d = flower_width);\n                        \n                        // Inner hollow\n                        translate([0, 0, -flower_width/2]) \n                            cube([flower_width * 1.2, flower_width * 1.2, flower_width], center = true);\n                        \n                        // Bottom opening\n                        translate([0, -flower_width/2, 0]) \n                            cube([flower_width, flower_width, flower_width], center = true);\n                    }\n        }\n        \n        // Yellow spadix\n        color(\"yellow\") {\n            translate([0, flower_width/2 - 2, 0]) \n                rotate([0, 90, 0]) \n                    cylinder(h = flower_length, d = flower_width/3);\n        }\n    }\n}\n\n// Render the plant\npeace_plant();",
    "renders": true
  },
  {
    "plant": "schefflera",
    "openscad_code": "// Schefflera Plant - Realistic Style, Medium Complexity\n// Overall height ~120 mm, suitable for 3D printing\n\n// Parameters\nstem_d = 8;\nstem_h = 60;\nleaf_scale = 1.0;\nwall_t = 2;\n\nmodule stem_segment(h, r_base, r_top) {\n    cylinder(h=h, r1=r_base, r2=r_top, $fn=16);\n}\n\nmodule leaf_cluster(radius, height, count) {\n    for(i=[0:count-1]) {\n        rotate([0, 0, i*360/count])\n        translate([0, radius, 0])\n        rotate([0, -30, 0])\n        scale([1, 0.5, 0.05])\n        sphere(r=leaf_scale*12, $fn=32);\n    }\n}\n\nmodule branch(level, length, angle) {\n    if(level > 0) {\n        // Branch cylinder\n        rotate([0, 0, angle])\n        rotate([0, 30, 0])\n        cylinder(h=length, r1=2.5, r2=1.5, $fn=12);\n        \n        // Sub-branches\n        translate([0, 0, length*0.7])\n        rotate([0, -30, 0])\n        branch(level-1, length*0.7, 45);\n        \n        translate([0, 0, length*0.7])\n        rotate([0, -30, 0])\n        branch(level-1, length*0.7, -45);\n        \n        // Leaves at branch end\n        translate([0, 0, length])\n        rotate([0, -30, 0])\n        leaf_cluster(8, 5, 7);\n    }\n}\n\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=25, r1=30, r2=25, $fn=32);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n        cylinder(h=27, r1=28, r2=23, $fn=32);\n    }\n    \n    // Soil surface\n    translate([0, 0, 24])\n    scale([1, 1, 0.1])\n    sphere(r=28, $fn=32);\n}\n\nmodule schefflera() {\n    // Pot\n    pot();\n    \n    // Main stem\n    translate([0, 0, 25])\n    stem_segment(stem_h, stem_d/2, stem_d/2.2);\n    \n    // Primary branches\n    translate([0, 0, 35])\n    branch(2, 25, 30);\n    \n    translate([0, 0, 45])\n    branch(2, 30, -45);\n    \n    translate([0, 0, 55])\n    branch(2, 28, 15);\n    \n    translate([0, 0, 65])\n    branch(2, 35, -60);\n    \n    // Top leaf cluster\n    translate([0, 0, 85])\n    leaf_cluster(15, 0, 8);\n}\n\n// Render the plant\nschefflera();",
    "renders": true
  },
  {
    "plant": "zz",
    "openscad_code": "// ZZ Plant - Realistic Style, Medium Complexity\n// Overall height ~120mm, suitable for 3D printing with 2mm walls\n\n// Main pot with drainage tray\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = 45, d1 = 55, d2 = 50, $fn = 64);\n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = 45, d1 = 51, d2 = 46, $fn = 64);\n    }\n    \n    // Drainage tray\n    translate([0, 0, -3])\n        cylinder(h = 3, d = 60, $fn = 64);\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, 42])\n        scale([1, 1, 0.3])\n            sphere(d = 50, $fn = 64);\n}\n\n// Individual leaflet cluster\nmodule leaflet_cluster(height, angle, twist) {\n    translate([0, 0, height])\n    rotate([0, 0, twist])\n    rotate([0, angle, 0])\n    translate([0, 0, 5])\n    for(i = [0:30:150]) {\n        rotate([0, 0, i])\n        translate([8, 0, 0])\n        scale([1, 0.3, 0.1])\n            sphere(d = 15, $fn = 8);\n    }\n}\n\n// Main stem with leaflets\nmodule stem(height, bend, rotation) {\n    // Stem structure\n    rotate([0, 0, rotation])\n    rotate([bend, 0, 0])\n    translate([0, 0, 45])\n    union() {\n        // Main stalk\n        cylinder(h = height, d = 4, $fn = 16);\n        \n        // Leaflet pairs along stem\n        for(i = [0:20:height-20]) {\n            // Left side\n            translate([0, 0, i])\n            rotate([0, 90, 0])\n            leaflet_cluster(0, 45, 0);\n            \n            // Right side\n            translate([0, 0, i])\n            rotate([0, 90, 180])\n            leaflet_cluster(0, 45, 180);\n            \n            // Front smaller pair\n            translate([0, 0, i+10])\n            rotate([0, 90, 90])\n            scale([0.7, 0.7, 0.7])\n            leaflet_cluster(0, 30, 90);\n            \n            // Back smaller pair\n            translate([0, 0, i+10])\n            rotate([0, 90, 270])\n            scale([0.7, 0.7, 0.7])\n            leaflet_cluster(0, 30, 270);\n        }\n    }\n}\n\n// Rhizome emerging from soil\nmodule rhizome() {\n    translate([0, 0, 42])\n    difference() {\n        sphere(d = 12, $fn = 32);\n        translate([0, 0, -3])\n            cube([15, 15, 6], center = true);\n    }\n}\n\n// Assembly\npot();\ntranslate([0, 0, 3])\n    soil();\nrhizome();\n\n// Multiple stems with natural variation\nstem(60, 15, 0);\nstem(70, -10, 45);\nstem(55, 20, 120);\nstem(65, -5, 200);\nstem(50, 25, 270);",
    "renders": true
  },
  {
    "plant": "fiddle",
    "openscad_code": "// Fiddle Leaf Fig Plant (realistic style, medium complexity)\n// Overall height ~120 mm, pot diameter ~55 mm, printable without supports\n\n$fn = 36;  // Smooth curves\n\nmodule pot() {\n    // Main pot body - tapered cylinder with slight flare\n    difference() {\n        cylinder(h = 35, r1 = 28, r2 = 25, center = false);\n        translate([0, 0, 2])\n            cylinder(h = 33, r1 = 26, r2 = 23, center = false);\n    }\n    \n    // Pot rim lip\n    translate([0, 0, 35])\n        cylinder(h = 3, r1 = 30, r2 = 28, center = false);\n    \n    // Drainage tray base\n    translate([0, 0, -2])\n        cylinder(h = 2, r = 32, center = false);\n}\n\nmodule soil_surface() {\n    // Slightly domed soil surface\n    translate([0, 0, 36])\n        scale([1, 1, 0.3])\n            sphere(r = 25, center = true);\n}\n\nmodule stem(height = 60) {\n    // Main trunk with gentle taper\n    cylinder(h = height, r1 = 4, r2 = 2.5, center = false);\n    \n    // Add slight texture rings\n    for(i = [1:4:height-5]) {\n        translate([0, 0, i])\n            cylinder(h = 0.8, r1 = 4.2, r2 = 2.7, center = false);\n    }\n}\n\nmodule leaf(length = 45, width = 25, angle = 0, bend = 0) {\n    // Single fiddle leaf shape\n    rotate([0, 0, angle])\n    translate([0, 0, bend])\n    union() {\n        // Main leaf body - elongated violin shape\n        scale([width/20, length/20, 0.8])\n            sphere(r = 10, center = true);\n        \n        // Leaf tip extension\n        translate([0, length/2, 0])\n            scale([width/30, 4, 0.6])\n                sphere(r = 5, center = true);\n        \n        // Leaf stem (petiole)\n        translate([0, -length/2 - 3, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 6, r = 1, center = false);\n    }\n}\n\nmodule branch(level, height, angle) {\n    // Branch structure with leaves\n    translate([0, 0, height])\n    rotate([0, 0, angle]) {\n        // Branch\n        rotate([90, 0, 0])\n            cylinder(h = 15 + level*3, r1 = 2, r2 = 1.2, center = false);\n        \n        // Leaves on this branch\n        translate([0, 15 + level*3, 0])\n            rotate([0, -20 - level*5, 0])\n                leaf(40 - level*3, 22 - level*2, 15, 2);\n        \n        translate([0, 12 + level*3, 0])\n            rotate([0, -25 - level*5, 0])\n                leaf(35 - level*3, 20 - level*2, -20, 1);\n    }\n}\n\n// Main assembly\nunion() {\n    // Pot and soil\n    pot();\n    soil_surface();\n    \n    // Main stem emerging from soil\n    translate([0, 0, 38])\n        stem(65);\n    \n    // Lower branches\n    branch(0, 55, 45);\n    branch(0, 55, -45);\n    \n    // Mid branches\n    branch(1, 75, 30);\n    branch(1, 75, -30);\n    \n    // Top branches\n    branch(2, 95, 15);\n    branch(2, 95, -15);\n    \n    // Crown leaves\n    translate([0, 0, 103])\n    union() {\n        leaf(38, 20, 0, 0);\n        leaf(35, 18, 45, -5);\n        leaf(35, 18, -45, -5);\n    }\n}",
    "renders": true
  },
  {
    "plant": "rubber",
    "openscad_code": "// Rubber Plant - Realistic Medium Complexity\n// Overall height ~120mm, suitable for 3D printing\n\n$fn = 36; // Smooth curves\n\nmodule stem_segment(h, r_top, r_bot) {\n    cylinder(h = h, r1 = r_bot, r2 = r_top, $fn = 16);\n}\n\nmodule leaf(length, width, thickness) {\n    // Main leaf blade\n    difference() {\n        scale([1, width/length, thickness/width])\n            sphere(d = length);\n        \n        // Leaf tip taper\n        translate([length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = length/2, r1 = width/2, r2 = 0, $fn = 8);\n        \n        // Stem cutout\n        translate([-length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = width, r = thickness*2, $fn = 8);\n    }\n    \n    // Central vein\n    translate([0, 0, -thickness/2])\n        scale([length*0.9, thickness/4, thickness/10])\n            sphere(d = width);\n}\n\nmodule branch(level, angle, length) {\n    if (level > 0) {\n        // Main branch stem\n        rotate([angle, 0, 0])\n            stem_segment(h = length, r_top = 2.5, r_bot = 3.5);\n        \n        // Leaves on this branch\n        for (i = [1:3]) {\n            rotate([angle, 0, i*120])\n                translate([0, 0, length*0.8])\n                    rotate([30, 0, 0])\n                        leaf(25, 12, 2);\n        }\n        \n        // Sub-branches\n        if (level > 1) {\n            rotate([angle, 0, 0])\n                translate([0, 0, length*0.7])\n                    branch(level-1, 25, length*0.7);\n                    \n            rotate([angle, 0, 0])\n                translate([0, 0, length*0.5])\n                    branch(level-1, -25, length*0.7);\n        }\n    }\n}\n\n// Main plant pot\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = 25, r1 = 25, r2 = 22, center = false);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = 23, r1 = 23, r2 = 20, center = false);\n        \n        // Drainage holes\n        for (i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([20, 0, 1])\n                    cylinder(h = 2, r = 2, $fn = 8);\n        }\n    }\n    \n    // Soil surface\n    translate([0, 0, 23])\n        cylinder(h = 2, r = 23, $fn = 32);\n}\n\n// Main trunk\nmodule trunk() {\n    // Base trunk\n    stem_segment(h = 40, r_top = 4, r_bot = 5);\n    \n    // Upper trunk continuation\n    translate([0, 0, 38])\n        stem_segment(h = 30, r_top = 3, r_bot = 4);\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Pot\n    pot();\n    \n    // Trunk emerging from soil\n    translate([0, 0, 25]) {\n        trunk();\n        \n        // First level branches\n        translate([0, 0, 35])\n            branch(2, 30, 20);\n            \n        translate([0, 0, 45])\n            branch(2, -20, 25);\n            \n        translate([0, 0, 55])\n            branch(1, 15, 15);\n            \n        translate([0, 0, 65])\n            branch(1, -35, 18);\n    }\n}",
    "renders": true
  },
  {
    "plant": "calathea",
    "openscad_code": "// Calathea Plant - Realistic Medium Complexity\n// Overall height: 120mm, base diameter: 80mm\n\n$fn = 24;\n\n// Main pot with drainage hole\nmodule pot() {\n    difference() {\n        cylinder(h = 40, d1 = 80, d2 = 75);\n        translate([0, 0, 2]) cylinder(h = 40, d1 = 76, d2 = 71);\n    }\n    // Drainage hole\n    translate([0, 0, -1]) cylinder(h = 3, d = 8);\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, 38]) cylinder(h = 5, d1 = 74, d2 = 70);\n}\n\n// Stem for leaf attachment\nmodule stem(height, angle, rotation) {\n    translate([0, 0, 40]) {\n        rotate([angle, 0, rotation]) {\n            cylinder(h = height, d = 4);\n        }\n    }\n}\n\n// Calathea leaf with characteristic pattern\nmodule leaf(length, width, curl) {\n    // Main leaf blade\n    translate([0, 0, length/2]) {\n        rotate([90, 0, 0]) {\n            scale([width/length, 1, 1]) {\n                sphere(d = length);\n            }\n        }\n    }\n    \n    // Central vein\n    translate([0, 0, length/2]) {\n        rotate([90, 0, 0]) {\n            scale([0.1, 1, 0.02]) {\n                cube([length, width, 2], center = true);\n            }\n        }\n    }\n    \n    // Side veins (3 pairs)\n    for (i = [-1, 1]) {\n        for (j = [0.3, 0.5, 0.7]) {\n            translate([i * width/3, 0, j * length]) {\n                rotate([90, 0, 0]) {\n                    rotate([0, i * 15, 0]) {\n                        scale([0.05, 1, 0.01]) {\n                            cube([length/4, width/2, 1], center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Leaf curl\n    translate([0, 0, length/2]) {\n        rotate([90 + curl, 0, 0]) {\n            rotate([0, curl/2, 0]) {\n                scale([width/length, 1, 1]) {\n                    sphere(d = length);\n                }\n            }\n        }\n    }\n}\n\n// Full plant assembly\nmodule calathea() {\n    union() {\n        pot();\n        soil();\n        \n        // Stems and leaves in realistic arrangement\n        // Central tall leaves\n        stem(30, 0, 0);\n        translate([0, 0, 70]) leaf(50, 25, 5);\n        \n        stem(25, 10, 30);\n        translate([8, 5, 65]) rotate([0, 0, 30]) leaf(45, 22, 3);\n        \n        stem(25, 10, -30);\n        translate([-8, 5, 65]) rotate([0, 0, -30]) leaf(45, 22, -3);\n        \n        // Middle layer leaves\n        stem(20, 20, 60);\n        translate([12, 8, 60]) rotate([0, 0, 60]) leaf(40, 20, 8);\n        \n        stem(20, 20, -60);\n    translate([-12, 8, 60]) rotate([0, 0, -60]) leaf(40, 20, -8);\n        \n        stem(20, 20, 120);\n        translate([-6, -10, 60]) rotate([0, 0, 120]) leaf(38, 19, 6);\n        \n        stem(20, 20, -120);\n        translate([6, -10, 60]) rotate([0, 0, -120]) leaf(38, 19, -6);\n        \n        // Lower outer leaves\n        stem(15, 30, 90);\n        translate([0, -15, 55]) rotate([0, 0, 90]) leaf(35, 18, 10);\n        \n        stem(15, 30, -90);\n        translate([0, -15, 55]) rotate([0, 0, -90]) leaf(35, 18, -10);\n        \n        stem(15, 35, 150);\n        translate([-8, -12, 52]) rotate([0, 0, 150]) leaf(30, 15, 12);\n        \n        stem(15, 35, -150);\n        translate([8, -12, 52]) rotate([0, 0, -150]) leaf(30, 15, -12);\n    }\n}\n\n// Render the complete plant\ncalathea();",
    "renders": true
  },
  {
    "plant": "croton",
    "openscad_code": "// Croton Plant - Realistic Medium Complexity\n// Overall height ~110 mm, printable in one piece\n// Wall thickness kept ≥ 2 mm for stems and ≥ 1.5 mm for leaves\n\n$fn = 36;\n\n// Main assembly\nunion() {\n\n    // Pot\n    translate([0,0,0])\n        pot();\n\n    // Soil surface\n    translate([0,0,25])\n        soil();\n\n    // Central stem\n    translate([0,0,27])\n        rotate([0,0,rands(-5,5,1)[0]])\n        central_stem();\n\n    // Leaf clusters\n    translate([0,0,35])\n        leaf_cluster(0);\n    translate([8,5,45])\n        leaf_cluster(120);\n    translate([-10,-3,55])\n        leaf_cluster(240);\n    translate([5,-8,65])\n        leaf_cluster(60);\n}\n\nmodule pot() {\n    // Outer pot\n    cylinder(h = 30, r1 = 25, r2 = 22, center = false);\n    \n    // Inner hollow (2 mm wall)\n    difference() {\n        cylinder(h = 28, r1 = 23, r2 = 20, center = false);\n        translate([0,0,2])\n        cylinder(h = 28, r1 = 21, r2 = 18, center = false);\n    }\n    \n    // Base ring for stability\n    translate([0,0,-1])\n    cylinder(h = 2, r1 = 26, r2 = 26, center = false);\n}\n\nmodule soil() {\n    // Soil surface with slight irregularity\n    difference() {\n        sphere(d = 46);\n        translate([0,0,-20])\n        cube([50,50,40], center = true);\n    }\n}\n\nmodule central_stem() {\n    // Main trunk\n    cylinder(h = 60, r1 = 2.5, r2 = 1.5, center = false);\n    \n    // Branching nodes\n    for(i = [1:3]) {\n        translate([0,0,i*15])\n        sphere(d = 4);\n    }\n}\n\nmodule leaf_cluster(angle) {\n    rotate([0,0,angle])\n    translate([rands(-3,3,1)[0],rands(-3,3,1)[0],0]) {\n        \n        // Petioles (leaf stems)\n        for(i = [0:3]) {\n            rotate([rands(-30,-10,1)[0], rands(-20,20,1)[0], i*90+45])\n            translate([0,0,0])\n            cylinder(h = 12, r = 1.2, center = false);\n            \n            // Leaves\n            translate([0,0,12])\n            rotate([rands(-30,-10,1)[0], rands(-20,20,1)[0], i*90+45])\n            croton_leaf();\n        }\n    }\n}\n\nmodule croton_leaf() {\n    // Main leaf blade\n    scale([1, 0.6, 0.2])\n    difference() {\n        // Basic leaf shape\n        hull() {\n            sphere(d = 20);\n            translate([0,-5,0])\n            sphere(d = 8);\n            translate([0,5,0])\n            sphere(d = 8);\n        }\n        \n        // Vein grooves\n        translate([0,0,-1])\n        scale([0.9,0.9,1])\n        cylinder(h = 3, r1 = 0.5, r2 = 0.5, center = false);\n        \n        for(v = [-3:1:3]) {\n            translate([0,v*2,0])\n            rotate([90,0,0])\n            cylinder(h = 10, r1 = 0.3, r2 = 0, center = false);\n        }\n    }\n    \n    // Color patches (raised areas)\n    translate([rands(-2,2,1)[0], rands(-2,2,1)[0],1])\n    scale([0.3,0.3,1])\n    sphere(d = 3);\n    \n    translate([rands(-3,3,1)[0], rands(-3,3,1)[0],1])\n    scale([0.4,0.4,1])\n    sphere(d = 4);\n}",
    "renders": true
  },
  {
    "plant": "begonia",
    "openscad_code": "// Begonia Plant - Realistic Medium Complexity\n// Overall dimensions: ~80mm wide x 100mm tall x 80mm deep\n\n$fn = 32;\n\n// Main plant parameters\npot_height = 30;\npot_radius = 35;\nstem_height = 60;\nleaf_length = 25;\nleaf_width = 18;\nleaf_thickness = 2;\n\n// Flower parameters\nflower_radius = 8;\nflower_petal_count = 4;\nflower_center_radius = 3;\n\n// Pot with drainage holes\nmodule pot() {\n    difference() {\n        // Main pot body\n        cylinder(h=pot_height, r=pot_radius, center=false);\n        \n        // Hollow inside\n        translate([0, 0, 2]) \n            cylinder(h=pot_height, r=pot_radius-3, center=false);\n        \n        // Drainage holes\n        for(i=[0:2]) {\n            rotate([0, 0, i*120]) \n                translate([pot_radius-5, 0, 1])\n                    cylinder(h=3, r=2, center=false);\n        }\n    }\n}\n\n// Single leaf with characteristic begonia shape\nmodule leaf() {\n    difference() {\n        // Main leaf body - asymmetric heart shape\n        union() {\n            // Left lobe\n            translate([-leaf_width/3, 0, 0])\n                scale([1.2, 1, 1])\n                    sphere(r=leaf_length/2);\n            \n            // Right lobe\n            translate([leaf_width/3, 0, 0])\n                scale([1.2, 1, 1])\n                    sphere(r=leaf_length/2);\n            \n            // Central connecting part\n            hull() {\n                translate([0, -leaf_length/3, 0])\n                    sphere(r=leaf_width/3);\n                translate([0, leaf_length/3, 0])\n                    sphere(r=leaf_width/4);\n            }\n        }\n        \n        // Cut to leaf thickness\n        translate([0, 0, -leaf_thickness/2-1])\n            cube([leaf_width*2, leaf_length*2, leaf_thickness+2], center=true);\n    }\n}\n\n// Stem with joints\nmodule stem() {\n    // Main stem\n    cylinder(h=stem_height, r=3, center=false);\n    \n    // Stem segments with joints\n    for(h=[10:15:stem_height-10]) {\n        translate([0, 0, h])\n            sphere(r=3.5);\n    }\n}\n\n// Small begonia flower\nmodule flower() {\n    // Flower center\n    sphere(r=flower_center_radius);\n    \n    // Petals - begonia has 4 petals\n    for(i=[0:3]) {\n        rotate([0, 0, i*90]) {\n            translate([flower_radius/2, 0, 0])\n                scale([1.5, 0.8, 0.3])\n                    sphere(r=flower_radius);\n        }\n    }\n}\n\n// Complete plant assembly\nmodule begonia_plant() {\n    // Pot at base\n    color(\"brown\") pot();\n    \n    // Stem emerging from pot\n    translate([0, 0, pot_height]) {\n        color(\"darkgreen\") stem();\n        \n        // Leaves along stem\n        for(h=[15:15:stem_height-5]) {\n            // Alternate leaf placement\n            angle = h * 137.5; // Golden angle for natural spacing\n            rotate([0, 0, angle]) {\n                translate([0, 8, h]) {\n                    rotate([90, 30*sin(h), 0]) {\n                        color(\"green\") leaf();\n                    }\n                }\n            }\n            \n            // Opposite leaf\n            rotate([0, 0, angle+180]) {\n                translate([0, 8, h+3]) {\n                    rotate([90, -30*sin(h), 0]) {\n                        scale([0.8, 0.8, 0.8])\n                            color(\"green\") leaf();\n                    }\n                }\n            }\n        }\n        \n        // Flowers at top\n        for(i=[0:2]) {\n            rotate([0, 0, i*120]) {\n                translate([0, 12, stem_height-5+i*3]) {\n                    color(\"pink\") flower();\n                }\n            }\n        }\n    }\n}\n\n// Render the complete plant\nbegonia_plant();",
    "renders": true
  },
  {
    "plant": "peperomia",
    "openscad_code": "// Peperomia plant - realistic style, medium complexity\n// Overall height ~100mm, suitable for 3D printing\n\n$fn = 36;\nwall = 2;\n\n// Main plant assembly\nmodule peperomia() {\n    union() {\n        // Pot\n        translate([0, 0, 0]) pot();\n        \n        // Soil surface\n        translate([0, 0, 25]) soil();\n        \n        // Main stem\n        translate([0, 0, 27]) stem();\n        \n        // Leaf clusters\n        leaf_cluster(0, 0, 30, 0);\n        leaf_cluster(15, 8, 40, 35);\n        leaf_cluster(-12, -10, 50, -45);\n        leaf_cluster(8, -12, 60, 120);\n        leaf_cluster(-5, 5, 70, -110);\n    }\n}\n\n// Cylindrical pot with slight taper\nmodule pot() {\n    difference() {\n        cylinder(h = 25, r1 = 25, r2 = 23);\n        translate([0, 0, wall]) cylinder(h = 25, r1 = 23, r2 = 21);\n    }\n}\n\n// Soil surface with slight dome\nmodule soil() {\n    translate([0, 0, -2]) scale([1, 1, 0.3]) sphere(r = 23);\n}\n\n// Main central stem\nmodule stem() {\n    cylinder(h = 45, r = 3);\n}\n\n// Generate cluster of leaves around attachment point\nmodule leaf_cluster(x, y, z, rotation) {\n    translate([x, y, z]) rotate([0, 0, rotation]) {\n        // Individual leaves radiating from center\n        for(i = [0:45:315]) {\n            rotate([0, 0, i]) translate([4, 0, 0]) leaf(30 + i/3);\n        }\n    }\n}\n\n// Single peperomia leaf with realistic proportions\nmodule leaf(tilt) {\n    // Leaf blade - thick at base, thin at tip\n    translate([0, 0, 0]) rotate([tilt, 0, 0]) {\n        union() {\n            // Main leaf body\n            hull() {\n                translate([0, 0, 0]) sphere(r = 4);\n                translate([12, 0, 0]) scale([1, 0.7, 0.3]) sphere(r = 6);\n                translate([20, 0, 0]) scale([1, 0.5, 0.2]) sphere(r = 3);\n            }\n            \n            // Leaf stem\n            translate([-2, 0, -1]) rotate([90, 0, 0]) cylinder(h = 6, r = 1.5);\n            \n            // Vein details\n            translate([0, 0, 0.5]) rotate([tilt, 0, 0]) {\n                for(v = [0:3:9]) {\n                    translate([v, 0, 0]) rotate([0, 90, 0]) scale([0.2, 0.2, 1]) \n                        cylinder(h = 12 - v/2, r = 0.5);\n                }\n            }\n        }\n    }\n}\n\n// Generate the complete plant\npeperomia();",
    "renders": true
  },
  {
    "plant": "pilea",
    "openscad_code": "// Pilea Plant - Realistic Medium Complexity\n// Overall height: ~100mm, suitable for 3D printing\n\n// Stem parameters\nstem_height = 60;\nstem_radius = 3;\nstem_segments = 20;\n\n// Leaf parameters\nleaf_length = 25;\nleaf_width = 20;\nleaf_thickness = 1.5;\nleaf_tilt = 30;\nnum_leaf_pairs = 5;\n\n// Pot parameters\npot_height = 25;\npot_radius = 22;\npot_thickness = 2;\n\n// Soil parameters\nsoil_height = 8;\nsoil_radius = 20;\n\n// Stem module\nmodule stem() {\n    cylinder(h=stem_height, r=stem_radius, $fn=stem_segments);\n}\n\n// Single leaf module with realistic shape\nmodule leaf() {\n    // Main leaf body\n    difference() {\n        scale([1, leaf_width/leaf_length, 1])\n            sphere(d=leaf_length, $fn=20);\n        \n        // Cut off bottom half\n        translate([0, -leaf_width, 0])\n            cube([leaf_length*2, leaf_width*2, leaf_length], center=true);\n        \n        // Leaf tip\n        translate([leaf_length/2 - 3, 0, 0])\n            sphere(d=6, $fn=10);\n    }\n    \n    // Leaf thickness\n    scale([0.9, 0.9, 0.1])\n        sphere(d=leaf_length, $fn=20);\n}\n\n// Leaf pair module\nmodule leaf_pair(height) {\n    rotate([0, leaf_tilt, 0])\n        leaf();\n    \n    rotate([0, leaf_tilt, 180])\n        leaf();\n}\n\n// Pot module\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_height, r=pot_radius, $fn=32);\n        \n        // Inner hollow\n        translate([0, 0, pot_thickness])\n            cylinder(h=pot_height, r=pot_radius-pot_thickness, $fn=32);\n        \n        // Bottom hole for drainage\n        translate([0, 0, -1])\n            cylinder(h=pot_thickness+2, r=5, $fn=16);\n    }\n    \n    // Pot base ring\n    translate([0, 0, -2])\n        cylinder(h=2, r=pot_radius+2, $fn=32);\n}\n\n// Soil module\nmodule soil() {\n    difference() {\n        cylinder(h=soil_height, r=soil_radius, $fn=32);\n        \n        // Stem hole\n        translate([0, 0, -1])\n            cylinder(h=soil_height+2, r=stem_radius+1, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    // Pot at base\n    pot();\n    \n    // Soil on top of pot\n    translate([0, 0, 0])\n        soil();\n    \n    // Stem growing from soil\n    translate([0, 0, soil_height])\n        stem();\n    \n    // Leaves along stem\n    for(i = [1:num_leaf_pairs]) {\n        translate([0, 0, soil_height + i*(stem_height/num_leaf_pairs)])\n            rotate([0, 0, i*45])\n                leaf_pair(i*(stem_height/num_leaf_pairs));\n    }\n    \n    // Top leaves (smaller)\n    translate([0, 0, soil_height + stem_height - 5])\n        scale([0.7, 0.7, 0.7])\n            rotate([0, 0, 0])\n                leaf_pair(stem_height);\n    \n    translate([0, 0, soil_height + stem_height - 5])\n        scale([0.7, 0.7, 0.7])\n            rotate([0, 0, 90])\n                leaf_pair(stem_height);\n}",
    "renders": true
  },
  {
    "plant": "fittonia",
    "openscad_code": "// Fittonia plant - realistic style, medium complexity\n// Overall size: ~90mm diameter, ~65mm tall\n\n// Parameters\npot_d = 55;\npot_h = 25;\nstem_h = 15;\nleaf_w = 12;\nleaf_l = 20;\nleaf_t = 2;\nvein_t = 0.8;\nwall = 2;\n\n// Main plant pot\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = pot_h, d1 = pot_d, d2 = pot_d * 0.85, $fn = 60);\n        // Inner cavity\n        translate([0, 0, wall])\n            cylinder(h = pot_h - wall, d1 = pot_d - wall*2, d2 = pot_d * 0.85 - wall*2, $fn = 60);\n    }\n}\n\n// Single leaf with veins\nmodule leaf(angle = 0, bend = 0) {\n    color(\"darkolivegreen\")\n    rotate([0, 0, angle])\n    rotate([bend, 0, 0])\n    union() {\n        // Main leaf body - elliptical\n        scale([1, 0.6, 1])\n        translate([0, 0, -leaf_t/2])\n        cylinder(h = leaf_t, d = leaf_l, $fn = 30);\n        \n        // Veins - raised lines\n        color(\"seagreen\")\n        for(i = [-2:1:2]) {\n            translate([i * leaf_l/8, 0, leaf_t/2 + vein_t/2])\n            rotate([90, 0, 0])\n            scale([0.15, 1, 1])\n            cylinder(h = leaf_l * 0.8, d = vein_t, $fn = 6);\n        }\n        \n        // Central vein\n        translate([0, 0, leaf_t/2 + vein_t/2])\n        rotate([90, 0, 0])\n        scale([0.3, 1, 1])\n        cylinder(h = leaf_l * 0.9, d = vein_t * 1.5, $fn = 6);\n    }\n}\n\n// Stem segment\nmodule stem_segment(h = 10, angle = 0) {\n    color(\"darkgreen\")\n    rotate([angle, 0, 0])\n    cylinder(h = h, d = 3, $fn = 12);\n}\n\n// Create a leaf cluster from one stem point\nmodule leaf_cluster(pos, stem_angle, leaf_count = 5) {\n    translate(pos)\n    rotate([stem_angle, 0, 0]) {\n        // Small stem\n        stem_segment(stem_h, -15);\n        \n        // Leaves radiating from stem tip\n        translate([0, 0, stem_h])\n        for(i = [0:leaf_count-1]) {\n            angle = i * 360/leaf_count + rand(i*10)*30;\n            bend = 15 + rand(i*20)*10;\n            translate([0, 0, 3])\n            rotate([0, 0, angle])\n            translate([leaf_l/2, 0, 0])\n            rotate([bend, 0, 0])\n            leaf(angle, bend);\n        }\n    }\n}\n\n// Helper for slight randomness\nfunction rand(seed) = (sin(seed * 123.456) + 1) / 2;\n\n// Main plant assembly\nmodule fittonia_plant() {\n    // Pot base\n    pot();\n    \n    // Main stems with leaf clusters\n    // Central cluster\n    leaf_cluster([0, 0, pot_h], 0, 6);\n    \n    // Side clusters at different angles\n    for(i = [0:3]) {\n        angle = i * 90;\n        x = cos(angle) * 15;\n        y = sin(angle) * 15;\n        stem_tilt = 30 + i*5;\n        leaf_cluster([x, y, pot_h], stem_tilt, 4);\n    }\n    \n    // Inner smaller clusters\n    for(i = [0:2]) {\n        angle = i * 120 + 60;\n        x = cos(angle) * 8;\n        y = sin(angle) * 8;\n        stem_tilt = 20 + i*3;\n        leaf_cluster([x, y, pot_h], stem_tilt, 3);\n    }\n    \n    // Soil surface\n    color(\"saddlebrown\")\n    translate([0, 0, pot_h - 1])\n    cylinder(h = 2, d = pot_d - wall*2.5, $fn = 60);\n}\n\n// Render the complete plant\nfittonia_plant();",
    "renders": true
  },
  {
    "plant": "anthurium",
    "openscad_code": "// Anthurium Plant - Realistic Style, Medium Complexity\n// Overall height ~100mm, designed for 3D printing with 2mm walls\n\n// Main parameters\nstem_length = 40;\nstem_diameter = 4;\nleaf_length = 60;\nleaf_width = 30;\nleaf_thickness = 2;\nspathe_length = 45;\nspathe_width = 25;\nspadix_length = 20;\nspadix_diameter = 4;\npot_height = 25;\npot_diameter = 45;\n\n// Color definitions\n$fn = 50;\n\n// Pot module\nmodule pot() {\n    difference() {\n        cylinder(h=pot_height, d=pot_diameter, $fn=64);\n        translate([0, 0, 2])\n            cylinder(h=pot_height-4, d=pot_diameter-4, $fn=64);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, pot_height-2])\n        cylinder(h=4, d=pot_diameter-4, $fn=64);\n}\n\n// Stem module with slight curve\nmodule stem() {\n    for(i=[0:5:stem_length]) {\n        translate([sin(i/5)*2, 0, pot_height+i])\n            rotate([0, sin(i/10)*5, 0])\n                cylinder(h=5.1, d=stem_diameter, $fn=16);\n    }\n}\n\n// Leaf module with characteristic heart shape\nmodule leaf() {\n    // Main leaf body\n    translate([0, 0, 0])\n    scale([1, 0.7, 1])\n    difference() {\n        sphere(d=leaf_length);\n        translate([leaf_length/2, 0, 0])\n            sphere(d=leaf_length*0.8);\n        translate([-leaf_length/2, 0, 0])\n            sphere(d=leaf_length*0.8);\n    }\n    \n    // Add central vein\n    translate([0, 0, leaf_thickness/2+0.1])\n        scale([leaf_length*0.8, leaf_thickness, leaf_thickness*0.5])\n            sphere(d=leaf_width/4);\n    \n    // Side veins\n    for(angle=[-30, -15, 0, 15, 30]) {\n        translate([0, 0, leaf_thickness/2+0.1])\n            rotate([0, angle, 0])\n            translate([leaf_length/4, 0, 0])\n                scale([leaf_length*0.3, leaf_thickness*0.7, leaf_thickness*0.3])\n                    sphere(d=leaf_width/6);\n    }\n}\n\n// Spathe (red heart-shaped bract)\nmodule spathe() {\n    color(\"red\")\n    translate([0, 0, 0])\n    scale([1.2, 1, 0.2])\n    difference() {\n        sphere(d=spathe_length);\n        translate([spathe_length/2, 0, 0])\n            sphere(d=spathe_length*0.9);\n        translate([-spathe_length/2, 0, 0])\n            sphere(d=spathe_length*0.9);\n    }\n}\n\n// Spadix (yellow protrusion)\nmodule spadix() {\n    color(\"goldenrod\")\n    difference() {\n        cylinder(h=spadix_length, d=spadix_diameter, $fn=16);\n        for(i=[0:2:spadix_length]) {\n            translate([spadix_diameter/2*sin(i*36), spadix_diameter/2*cos(i*36), i])\n                sphere(d=1.5);\n        }\n    }\n}\n\n// Assemble the plant\nunion() {\n    // Pot and soil\n    pot();\n    translate([0, 0, 2]) soil();\n    \n    // Main stem and leaves\n    translate([0, 0, 0]) stem();\n    \n    // First leaf\n    translate([sin(40/5)*2, 0, pot_height+40])\n        rotate([0, 90+sin(40/10)*5, 45])\n            translate([leaf_length/3, 0, 0])\n                scale([1, 1, leaf_thickness/leaf_length])\n                    leaf();\n    \n    // Second leaf\n    translate([sin(20/5)*2, 0, pot_height+20])\n        rotate([0, 90+sin(20/10)*5, -30])\n            translate([leaf_length/3, 0, 0])\n                scale([0.8, 0.8, leaf_thickness/leaf_length])\n                    leaf();\n    \n    // Flower structure\n    translate([sin(35/5)*2, 0, pot_height+35])\n        rotate([0, 90+sin(35/10)*5, 0])\n            union() {\n                translate([spathe_length/3, 0, 0])\n                    scale([1, 1, 0.5])\n                        spathe();\n                translate([0, 0, spathe_width/4])\n                    rotate([90, 0, 0])\n                        spadix();\n            }\n}",
    "renders": true
  },
  {
    "plant": "spathiphyllum",
    "openscad_code": "// Realistic Spathiphyllum Plant - Medium Complexity\n// Features: pot, soil, stem cluster, leaves, and white spathes with spadices\n\n// Overall scale\nscale_factor = 1;\n\n// Pot dimensions\npot_height = 35 * scale_factor;\npot_top = 60 * scale_factor;\npot_bottom = 40 * scale_factor;\npot_wall = 2 * scale_factor;\n\n// Soil\nsoil_height = 10 * scale_factor;\n\n// Stem parameters\nstem_count = 7;\nstem_height_min = 25 * scale_factor;\nstem_height_max = 45 * scale_factor;\nstem_radius = 1.5 * scale_factor;\n\n// Leaf parameters\nleaf_length_min = 40 * scale_factor;\nleaf_length_max = 70 * scale_factor;\nleaf_width_max = 25 * scale_factor;\nleaf_thickness = 1.5 * scale_factor;\n\n// Spathe parameters\nspathe_count = 3;\nspathe_length = 30 * scale_factor;\nspathe_width = 15 * scale_factor;\nspathe_thickness = 1.2 * scale_factor;\n\n// Spadix parameters\nspadix_length = 8 * scale_factor;\nspadix_radius = 2 * scale_factor;\n\nmodule pot() {\n    difference() {\n        cylinder(h=pot_height, r1=pot_bottom/2, r2=pot_top/2, $fn=48);\n        translate([0, 0, pot_wall])\n            cylinder(h=pot_height-pot_wall, r1=pot_bottom/2-pot_wall, r2=pot_top/2-pot_wall, $fn=48);\n    }\n}\n\nmodule soil() {\n    color(\"saddlebrown\")\n    translate([0, 0, pot_height-soil_height])\n    cylinder(h=soil_height, r1=pot_top/2-2, r2=pot_top/2-2, $fn=48);\n}\n\nmodule leaf(stem_len, leaf_len, leaf_width, angle, tilt) {\n    translate([0, 0, stem_len])\n    rotate([0, 90-tilt, angle])\n    union() {\n        // Stem extension\n        color(\"darkgreen\")\n        cylinder(h=leaf_len*0.2, r=stem_radius, $fn=8);\n        \n        // Leaf blade\n        color(\"forestgreen\")\n        translate([leaf_len*0.1, 0, 0])\n        scale([1, leaf_width/leaf_len, leaf_thickness/leaf_len])\n        rotate([0, 90, 0])\n        difference() {\n            // Main leaf shape\n            scale([1, 0.3, 1])\n            sphere(r=leaf_len, $fn=32);\n            \n            // Cut to make pointed tip\n            translate([leaf_len*0.8, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=leaf_len*2, r=leaf_len, $fn=32);\n        }\n    }\n}\n\nmodule spathe(stem_len, angle, tilt) {\n    translate([0, 0, stem_len])\n    rotate([0, 90-tilt, angle])\n    union() {\n        // Spathe (white leaf-like bract)\n        color(\"white\")\n        translate([spathe_length*0.15, 0, 0])\n        rotate([0, 90, 0])\n        scale([1, spathe_width/spathe_length, spathe_thickness/spathe_length])\n        difference() {\n            sphere(r=spathe_length, $fn=32);\n            translate([spathe_length*0.7, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=spathe_length*2, r=spathe_length, $fn=32);\n        }\n        \n        // Spadix (central spike)\n        color(\"palegoldenrod\")\n        translate([spathe_length*0.4, 0, spathe_width/4])\n        rotate([90, 0, 0])\n        cylinder(h=spadix_length, r=spadix_radius, $fn=16);\n    }\n}\n\nmodule plant() {\n    // Pot and soil\n    union() {\n        pot();\n        soil();\n    }\n    \n    // Plant stems and leaves\n    for (i = [0:stem_count-1]) {\n        angle = i*360/stem_count + 15*(i%2);\n        stem_len = stem_height_min + (stem_height_max-stem_height_min)*(i%3)/2;\n        leaf_len = leaf_length_min + (leaf_length_max-leaf_length_min)*((i+1)%3)/2;\n        leaf_w = leaf_width_max - 5*(i%2);\n        tilt = 60 + (i%3)*10;\n        \n        // Main stem\n        color(\"darkgreen\")\n        translate([0, 0, pot_height-soil_height/2])\n        rotate([0, 0, angle])\n        cylinder(h=stem_len, r=stem_radius, $fn=8);\n        \n        // Attach leaf\n        translate([0, 0, pot_height-soil_height/2])\n        leaf(stem_len, leaf_len, leaf_w, angle, tilt);\n    }\n    \n    // Spathes and spadices\n    for (i = [0:spathe_count-1]) {\n        angle = i*120 + 25 + (i*15);\n        stem_len = stem_height_max - 5;\n        tilt = 75 - i*10;\n        \n        // Spathe stem\n        color(\"darkgreen\")\n        translate([0, 0, pot_height-soil_height/2])\n        rotate([0, 0, angle])\n        cylinder(h=stem_len, r=stem_radius, $fn=8);\n        \n        // Attach spathe\n        translate([0, 0, pot_height-soil_height/2])\n        spathe(stem_len, angle, tilt);\n    }\n}\n\n// Render the complete plant\nplant();",
    "renders": true
  },
  {
    "plant": "dracaena",
    "openscad_code": "// Dracaena Plant - Realistic Medium Complexity\n// Characteristic: Long lance-shaped leaves growing in rosettes from thick woody canes\n\n// Parameters\nstem_height = 60;\nstem_diameter = 8;\nleaf_length = 35;\nleaf_width = 2.5;\nleaf_thickness = 1.5;\nnum_leaf_clusters = 3;\nleaves_per_cluster = 8;\n\n// Main module\nmodule dracaena() {\n    // Base pot\n    translate([0, 0, -10]) \n        pot();\n    \n    // Stems with leaf clusters\n    for (i = [0:num_leaf_clusters-1]) {\n        translate([0, 0, i * (stem_height/num_leaf_clusters)]) {\n            // Main stem segment\n            color(\"saddlebrown\") \n                stem_segment(stem_height/num_leaf_clusters - 5);\n            \n            // Leaf cluster at top of segment\n            if (i > 0) {\n                translate([0, 0, stem_height/num_leaf_clusters - 5]) \n                    leaf_cluster();\n            }\n        }\n    }\n    \n    // Top leaf cluster\n    translate([0, 0, stem_height]) \n        leaf_cluster();\n}\n\n// Pot module\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = 12, r1 = 15, r2 = 12, $fn = 32);\n        \n        // Inner cavity\n        translate([0, 0, 2]) \n            cylinder(h = 11, r1 = 13, r2 = 10, $fn = 32);\n    }\n    \n    // Soil surface\n    translate([0, 0, 2]) \n        color(\"darkgreen\") \n            cylinder(h = 1, r = 12.5, $fn = 32);\n}\n\n// Stem segment\nmodule stem_segment(height) {\n    cylinder(h = height, d = stem_diameter, $fn = 16);\n    \n    // Growth rings\n    for (i = [1:3]) {\n        translate([0, 0, height * i/4]) \n            scale([1.05, 1.05, 0.3]) \n                cylinder(h = 1, d = stem_diameter, $fn = 16);\n    }\n}\n\n// Leaf cluster\nmodule leaf_cluster() {\n    for (i = [0:leaves_per_cluster-1]) {\n        rotate([0, 0, i * 360/leaves_per_cluster]) \n            translate([0, 0, 0]) \n                leaf();\n    }\n}\n\n// Individual leaf\nmodule leaf() {\n    // Leaf blade\n    translate([leaf_length/2, 0, 0]) \n        rotate([0, 90, 0]) \n            scale([leaf_length, leaf_width, leaf_thickness]) \n                hull() {\n                    sphere(d = 1);\n                    translate([leaf_length/2, 0, 0]) \n                        sphere(d = 0.8);\n                }\n    \n    // Leaf midrib\n    translate([leaf_length/2, 0, 0]) \n        rotate([0, 90, 0]) \n            scale([leaf_length, 0.5, 0.5]) \n                cylinder(h = 1, d = 1);\n    \n    // Leaf base\n    translate([0, 0, 0]) \n        scale([1.5, 1.5, 1]) \n            sphere(d = 2);\n}\n\n// Generate the plant\ndracaena();",
    "renders": true
  },
  {
    "plant": "syngonium",
    "openscad_code": "// Syngonium Plant - Realistic Medium Complexity\n// Characteristic arrowhead leaves on climbing stems\n\n// Parameters for realistic proportions\nstem_d = 5;\nleaf_thick = 2;\npot_h = 35;\npot_r = 30;\nsoil_h = 8;\n\nmodule pot() {\n    difference() {\n        cylinder(h = pot_h, r = pot_r, $fn = 48);\n        translate([0, 0, 2])\n            cylinder(h = pot_h, r = pot_r - 2.5, $fn = 48);\n    }\n    translate([0, 0, 2])\n        cylinder(h = soil_h, r = pot_r - 2.5, $fn = 48);\n}\n\nmodule leaf(length, width, angle, twist) {\n    // Arrowhead leaf shape with 5 points\n    linear_extrude(height = leaf_thick, convexity = 10)\n        polygon(points = [\n            [0, 0],                    // Stem attachment\n            [-width*0.3, length*0.4],  // Left base\n            [-width*0.5, length*0.7],  // Left side\n            [0, length],               // Tip\n            [width*0.5, length*0.7],   // Right side\n            [width*0.3, length*0.4],   // Right base\n            [0, 0]                     // Close\n        ]);\n}\n\nmodule stem_section(height, segments = 6) {\n    for(i = [0:segments-1]) {\n        rotate([0, 0, i * 60])\n        translate([0, 0, i * height/segments])\n            cylinder(h = height/segments + 0.1, r = stem_d/2, $fn = 16);\n    }\n}\n\nmodule leaf_cluster(level, height) {\n    leaf_sizes = [12, 18, 25];\n    leaf_angles = [30, 45, 60];\n    \n    for(i = [0:len(leaf_sizes)-1]) {\n        rotate([0, 0, 120 * i])\n        translate([0, stem_d/2 + 3, height + i * 8])\n        rotate([leaf_angles[i], 0, 30 * (i % 2 == 0 ? 1 : -1)])\n            leaf(leaf_sizes[i], leaf_sizes[i] * 0.7, 0, 0);\n    }\n}\n\nmodule main_plant() {\n    // Central stem\n    stem_section(60, 8);\n    \n    // First level leaves\n    leaf_cluster(1, 15);\n    \n    // Second level rotated\n    rotate([0, 0, 60])\n    translate([0, 0, 25])\n        leaf_cluster(2, 20);\n    \n    // Top cluster\n    translate([0, 0, 45])\n    rotate([0, 0, 30])\n        leaf_cluster(3, 10);\n    \n    // Aerial roots\n    for(i = [0:2]) {\n        rotate([0, 0, 120 * i])\n        translate([stem_d/2, 0, 20 + i * 15])\n            rotate([90, 0, 45])\n                cylinder(h = 12, r = 1.5, $fn = 8);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    pot();\n\ntranslate([0, 0, soil_h])\n    main_plant();",
    "renders": true
  },
  {
    "plant": "aglaonema",
    "openscad_code": "// Aglaonema plant – medium detail, 3D-printable\n// Overall height ≈ 110 mm, pot diameter 50 mm\n\n$fn=36;\n\n// --- pot -------------------------------------------------\nmodule pot() {\n    difference() {\n        cylinder(h=34, d1=50, d2=48);  // outer shell, 2 mm walls\n        translate([0,0,2])\n            cylinder(h=32, d1=46, d2=44);\n    }\n    // base ring for stability\n    translate([0,0,-2])\n        cylinder(h=4, d=52);\n}\n\n// --- single leaf ----------------------------------------\nmodule leaf(len, wid, ang, twist) {\n    // len = mid-rib length\n    // wid = max width\n    // ang = elevation from horizontal\n    // twist = roll around mid-rib\n    rotate([ang,0,0])\n    rotate([0,0,twist])\n    translate([0,-len/2,0])\n    union() {\n        // mid-rib (2 mm thick)\n        rotate([90,0,0])\n            cylinder(h=len, d=2.5, $fn=8);\n\n        // leaf blade: elliptical shell\n        for(i=[0:6]) {\n            h = len*i/6;\n            w = wid * sin(180*i/6);   // elliptical taper\n            translate([0, -len/2 + h, 0])\n            rotate([90,0,0])\n            scale([w/2, 2, w/2])\n                sphere(d=1);\n        }\n    }\n}\n\n// --- stem segment ---------------------------------------\nmodule stem_seg(h, taper) {\n    cylinder(h=h, d1=6, d2=taper, center=true);\n}\n\n// --- assemble plant -------------------------------------\nmodule plant() {\n    pot();\n\n    // central stem\n    color(\"darkgreen\")\n    translate([0,0,34])\n    union() {\n        stem_seg(30, 5);\n        translate([0,0,30])\n        stem_seg(25, 4);\n        translate([0,0,55])\n        stem_seg(20, 3);\n    }\n\n    // leaves attached to stem nodes\n    // node 1 (lower)\n    translate([0,0,40])\n    for(a=[30, 150, 270])\n        rotate([0,0,a])\n        translate([0,6,0])\n        leaf(35, 18, 25, 5);\n\n    // node 2 (middle)\n    translate([0,0,65])\n    for(a=[0, 120, 240])\n        rotate([0,0,a])\n        translate([0,5,0])\n        leaf(40, 20, 30, -5);\n\n    // node 3 (top)\n    translate([0,0,85])\n    for(a=[45, 165, 285])\n        rotate([0,0,a])\n        translate([0,4,0])\n        leaf(38, 22, 35, 10);\n}\n\n// --- render ---------------------------------------------\nplant();",
    "renders": true
  },
  {
    "plant": "asparagus",
    "openscad_code": "// Realistic Asparagus Plant – OpenSCAD\n// Printable, medium detail (~120 lines)\n\n$fn = 32;                // smooth curves\nstalk_d = 10;            // mm\nstalk_h = 120;           // mm\ntip_r = 2.5;             // mm\nspear_r = 6;             // mm\nspear_h = 40;            // mm\nbract_l = 3;             // mm\nbract_w = 1.2;           // mm\nbract_gap = 5;           // mm\nscale_fac = 0.92;        // taper per segment\nwall = 2;                // mm shell thickness\n\nmodule spear(t) {\n    // single tapered spear segment\n    translate([0,0,t])\n        cylinder(d1=stalk_d*pow(scale_fac,t/bract_gap), d2=stalk_d*pow(scale_fac,(t+bract_gap)/bract_gap), h=bract_gap, center=false);\n}\n\nmodule bracts(z) {\n    // small triangular bracts circling the segment\n    for(a=[0:45:360-1])\n        rotate([0,0,a])\n            translate([stalk_d/2*pow(scale_fac,z/bract_gap),0,z])\n                rotate([90,0,0])\n                    linear_extrude(height=bract_w)\n                        polygon([[0,0],[bract_l,0],[bract_l/2,bract_l]]);\n}\n\nmodule tip() {\n    // conical tip\n    cylinder(d1=spear_r, d2=0, h=spear_h);\n}\n\nmodule stalk() {\n    // hollow stalk with wall thickness\n    difference() {\n        union() {\n            // stack of tapered segments\n            for(i=[0:bract_gap:stalk_h-spear_h]) {\n                spear(i);\n                bracts(i);\n            }\n            // tip\n            translate([0,0,stalk_h-spear_h])\n                tip();\n        }\n        // hollow core\n        translate([0,0,-1])\n            cylinder(d=stalk_d-wall*2, h=stalk_h+2);\n    }\n}\n\nmodule root_cluster() {\n    // fibrous roots\n    for(i=[0:30:359]) {\n        rotate([0,0,i])\n            translate([0,0,-8])\n                rotate([80+rand(i)*5,0,0])\n                    cylinder(d=2.5, h=18+rand(i)*5);\n    }\n}\n\nfunction rand(seed) = (seed*73)%100/100;\n\nmodule plant() {\n    union() {\n        stalk();\n        root_cluster();\n    }\n}\n\n// center and scale to 120 mm max height\ntranslate([0,0,0])\n    scale(120/(stalk_h+10))\n        plant();",
    "renders": true
  },
  {
    "plant": "bromeliad",
    "openscad_code": "// Realistic Bromeliad Plant - Medium Complexity\n// Overall height ~120mm, suitable for 3D printing\n\n// Parameters\n$fn = 36;\nstem_height = 25;\nstem_radius = 6;\nleaf_length = 45;\nleaf_width = 8;\nleaf_thickness = 2;\nbract_height = 35;\nbract_radius = 20;\nflower_radius = 3;\nflower_height = 8;\n\n// Central stem\nmodule stem() {\n    cylinder(h=stem_height, r=stem_radius);\n}\n\n// Individual leaf with natural curve\nmodule leaf() {\n    // Create curved leaf shape\n    difference() {\n        // Main leaf body\n        hull() {\n            translate([0, -leaf_width/2, 0]) cylinder(h=leaf_length, r=leaf_thickness/2);\n            translate([0, leaf_width/2, 0]) cylinder(h=leaf_length, r=leaf_thickness/2);\n        }\n        \n        // Taper the end\n        translate([0, 0, leaf_length - 5]) \n            rotate([0, 0, 45]) cube([leaf_width*2, leaf_width*2, 10], center=true);\n    }\n    \n    // Add central vein\n    translate([0, 0, -leaf_thickness/2]) \n        cube([leaf_thickness/4, leaf_width*0.8, leaf_length], center=true);\n}\n\n// Rosette of leaves around stem\nmodule leaf_rosette() {\n    for(i = [0:30:359]) {\n        rotate([0, 0, i]) {\n            translate([0, 0, 5]) {\n                rotate([5 + i/10, 0, 0]) leaf();\n            }\n        }\n    }\n}\n\n// Bract (modified leaf forming cup)\nmodule bract() {\n    difference() {\n        cylinder(h=bract_height, r1=bract_radius, r2=bract_radius*0.7);\n        \n        // Hollow out center\n        translate([0, 0, -1]) \n            cylinder(h=bract_height+2, r1=bract_radius-3, r2=bract_radius*0.7-3);\n        \n        // Create pointed bract tips\n        for(i = [0:20:359]) {\n            rotate([0, 0, i]) {\n                translate([bract_radius-2, 0, bract_height-5]) {\n                    rotate([0, 90, 0]) \n                        cylinder(h=3, r1=2, r2=0);\n                }\n            }\n        }\n    }\n}\n\n// Individual flower\nmodule flower() {\n    // Petal cluster\n    union() {\n        for(i = [0:60:359]) {\n            rotate([0, 0, i]) {\n                rotate([30, 0, 0]) \n                    scale([1, 0.5, 1]) \n                        sphere(d=flower_radius*2);\n            }\n        }\n        // Central part\n        sphere(d=flower_radius);\n    }\n}\n\n// Flower spike\nmodule flower_spike() {\n    // Central spike\n    translate([0, 0, bract_height]) {\n        cylinder(h=flower_height*2, r=flower_radius/2);\n        \n        // Flowers around spike\n        for(i = [0:45:359]) {\n            rotate([0, 0, i]) {\n                translate([flower_radius*1.5, 0, flower_height]) {\n                    flower();\n                }\n            }\n        }\n    }\n}\n\n// Base with drainage\nmodule base() {\n    difference() {\n        cylinder(h=8, r=stem_radius+4);\n        // Drainage hole\n        translate([0, 0, -1]) \n            cylinder(h=10, r=stem_radius);\n    }\n}\n\n// Assemble the plant\nunion() {\n    // Base\n    base();\n    \n    // Stem\n    translate([0, 0, 8]) stem();\n    \n    // Leaves\n    translate([0, 0, 8]) leaf_rosette();\n    \n    // Bract cup\n    translate([0, 0, 8+stem_height-5]) bract();\n    \n    // Flowers\n    translate([0, 0, 8+stem_height-5]) flower_spike();\n}",
    "renders": true
  },
  {
    "plant": "orchid",
    "openscad_code": "// Enhanced Orchid Plant with Realistic Details and 3D Printability\n// Includes stems, leaves, flowers, and aerial roots\n// Designed for 3D printing with no overhangs and 2mm wall thickness\n\n// Overall scale factor for easy resizing\nscale_factor = 1.0;\n\n// Constants for proportions\npot_height = 40 * scale_factor;\npot_radius = 30 * scale_factor;\nstem_height = 80 * scale_factor;\nstem_radius = 3 * scale_factor;\nleaf_length = 60 * scale_factor;\nleaf_width = 20 * scale_factor;\nleaf_thickness = 2 * scale_factor;\nflower_count = 5;\nflower_size = 15 * scale_factor;\n\n// Main module - the complete orchid plant\nmodule orchid_plant() {\n    union() {\n        // Pot\n        translate([0, 0, pot_height/2])\n            pot();\n        \n        // Main stem emerging from pot\n        translate([0, 0, pot_height])\n            stem(stem_height, stem_radius);\n        \n        // Leaves growing from base\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90 + 45])\n                translate([10, 0, pot_height - 5])\n                    rotate([30, 0, 0])\n                        leaf(leaf_length, leaf_width, leaf_thickness);\n        }\n        \n        // Flowers along the stem\n        for(i = [0:flower_count-1]) {\n            rotate([0, 0, i * 72])\n                translate([0, 0, pot_height + 20 + i * 12])\n                    flower(flower_size, i * 15);\n        }\n        \n        // Aerial roots\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120 + 60])\n                translate([15, 0, pot_height - 10])\n                    aerial_root(40, 2);\n        }\n    }\n}\n\n// Decorative pot with drainage holes\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_height, r=pot_radius, $fn=32);\n        \n        // Inner hollow space\n        cylinder(h=pot_height-5, r=pot_radius-3, $fn=32);\n        \n        // Drainage holes\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([pot_radius-2, 0, 5])\n                    cylinder(h=5, r=2, $fn=8);\n        }\n    }\n}\n\n// Stem with natural curve\nmodule stem(height, radius) {\n    // Create curved stem using hull of spheres\n    for(i = [0:height/5]) {\n        translate([sin(i/3) * 5, 0, i * 5])\n            sphere(r=radius, $fn=16);\n    }\n}\n\n// Realistic leaf with tapered end\nmodule leaf(length, width, thickness) {\n    linear_extrude(height=thickness, convexity=10) {\n        polygon(points=[\n            [0, 0],\n            [length * 0.3, width/2],\n            [length * 0.7, width * 0.8],\n            [length, 0],\n            [length * 0.7, -width * 0.8],\n            [length * 0.3, -width/2]\n        ]);\n    }\n}\n\n// Detailed orchid flower\nmodule flower(size, angle) {\n    rotate([0, angle, 0]) {\n        union() {\n            // Center column\n            translate([0, 0, size/2])\n                cylinder(h=size, r=size/4, $fn=16);\n            \n            // Three sepals (back petals)\n            for(i = [0:2]) {\n                rotate([0, 0, i * 120])\n                    translate([0, size/2, 0])\n                        rotate([60, 0, 0])\n                            petal(size * 0.7, size * 0.3, size * 0.05);\n            }\n            \n            // Two lateral petals\n            rotate([0, 0, -45])\n                translate([size/2, size/2, 0])\n                    rotate([45, 0, 0])\n                        petal(size * 0.8, size * 0.4, size * 0.05);\n            \n            rotate([0, 0, 45])\n                translate([-size/2, size/2, 0])\n                    rotate([45, 0, 0])\n                        petal(size * 0.8, size * 0.4, size * 0.05);\n            \n            // Labellum (lip)\n            translate([0, size * 0.8, -size * 0.3])\n                rotate([30, 0, 0])\n                    lip(size * 0.6, size * 0.4, size * 0.05);\n        }\n    }\n}\n\n// Individual petal module\nmodule petal(length, width, thickness) {\n    linear_extrude(height=thickness, convexity=10) {\n        polygon(points=[\n            [0, 0],\n            [length * 0.3, width/2],\n            [length * 0.7, width * 0.9],\n            [length, 0],\n            [length * 0.7, -width * 0.9],\n            [length * 0.3, -width/2]\n        ]);\n    }\n}\n\n// Specialized lip petal\nmodule lip(length, width, thickness) {\n    linear_extrude(height=thickness, convexity=10) {\n        polygon(points=[\n            [-width/2, 0],\n            [-width * 0.3, length * 0.5],\n            [0, length],\n            [width * 0.3, length * 0.5],\n            [width/2, 0],\n            [0, -length * 0.2]\n        ]);\n    }\n}\n\n// Aerial root module\nmodule root(length, radius) {\n    // Create curved root\n    for(i = [0:length/2]) {\n        translate([sin(i/5) * 3, 0, -i * 2])\n            sphere(r=radius, $fn=8);\n    }\n}\n\n// Generate the complete orchid plant\norchid_plant();",
    "renders": true
  },
  {
    "plant": "african",
    "openscad_code": "// African Baobab Tree - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Parameters\ntrunk_height = 60;\ntrunk_radius = 10;\nbranch_radius = 3;\nbranch_length = [15, 20, 25, 18, 22];\ncanopy_size = 35;\n\n// Trunk module with characteristic bottle shape\nmodule baobab_trunk() {\n    union() {\n        // Main trunk - tapered cylinder\n        cylinder(h=trunk_height, r1=trunk_radius*1.2, r2=trunk_radius, $fn=32);\n        \n        // Bulge in middle for characteristic baobab shape\n        translate([0, 0, trunk_height/2])\n            scale([1.3, 1.3, 1])\n            cylinder(h=trunk_height/2, r1=trunk_radius, r2=trunk_radius*1.1, $fn=32);\n    }\n}\n\n// Branch module\nmodule branch(length, angle, rotation) {\n    translate([0, 0, trunk_height - 5])\n    rotate([0, angle, rotation])\n    union() {\n        // Main branch\n        cylinder(h=length, r1=branch_radius*1.2, r2=branch_radius, $fn=16);\n        \n        // Sub-branches for fuller appearance\n        for(i = [1:3]) {\n            translate([0, 0, length * i/4])\n            rotate([0, 20 + i*10, i*45])\n            cylinder(h=length/2, r1=branch_radius*0.8, r2=branch_radius*0.5, $fn=12);\n        }\n    }\n}\n\n// Leaf cluster module\nmodule leaf_cluster(size, height) {\n    color(\"darkgreen\")\n    translate([0, 0, height])\n    for(i = [0:5]) {\n        rotate([0, i*30, i*60])\n        translate([size/3, 0, 0])\n        sphere(r=size/4, $fn=12);\n    }\n}\n\n// Root system base\nmodule root_system() {\n    difference() {\n        // Root base\n        cylinder(h=10, r1=trunk_radius*1.5, r2=trunk_radius*1.3, $fn=32);\n        \n        // Root grooves\n        for(i = [0:7]) {\n            rotate([0, 0, i*45])\n            translate([trunk_radius*0.8, 0, 5])\n            cube([trunk_radius, 4, 10], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Root system\n    root_system();\n    \n    // Trunk\n    translate([0, 0, 5])\n    baobab_trunk();\n    \n    // Branches with leaves\n    for(i = [0:4]) {\n        angle = 20 + i*15;\n        rotation = i*72;\n        branch(branch_length[i], angle, rotation);\n        \n        // Add leaf clusters at branch ends\n        translate([0, 0, trunk_height - 5])\n        rotate([0, angle, rotation])\n        translate([0, 0, branch_length[i]])\n        leaf_cluster(canopy_size/3, 0);\n    }\n    \n    // Additional small branches\n    for(i = [0:2]) {\n        angle = 30 + i*20;\n        rotation = 180 + i*60;\n        branch(branch_length[i]/2, angle, rotation);\n    }\n}\n\n// Ground base for stability\ntranslate([0, 0, -2])\ncolor(\"saddlebrown\")\ncylinder(h=2, r=trunk_radius*2.2, $fn=32);",
    "renders": true
  },
  {
    "plant": "money",
    "openscad_code": "// Money Plant (Pilea peperomioides) - Realistic Style\n// Overall height: 120mm, pot diameter: 60mm\n\n$fn = 32;\n\n// Main module\nmodule money_plant() {\n    // Plant pot\n    union() {\n        // Pot body\n        cylinder(h = 40, d1 = 60, d2 = 50);\n        \n        // Pot rim\n        translate([0, 0, 40])\n            cylinder(h = 5, d1 = 62, d2 = 60);\n            \n        // Soil surface\n        translate([0, 0, 38])\n            cylinder(h = 2, d = 58);\n    }\n    \n    // Central stem\n    translate([0, 0, 40])\n        cylinder(h = 80, d = 4);\n    \n    // Generate leaves at different heights\n    for(i = [1:4]) {\n        rotate([0, 0, i * 90])\n            translate([0, 0, 45 + i * 15])\n                leaf_cluster();\n    }\n}\n\n// Single leaf cluster\nmodule leaf_cluster() {\n    // Stem from main trunk\n    translate([0, 0, 0])\n        rotate([20, 0, 30])\n            cylinder(h = 25, d = 2);\n    \n    // Leaves attached to stem\n    for(j = [0:2]) {\n        rotate([0, 0, j * 120])\n            translate([8, 0, 20 - j * 5])\n                rotate([90, 0, 10])\n                    money_leaf(20 - j * 2);\n    }\n}\n\n// Individual money plant leaf\nmodule money_leaf(size) {\n    // Leaf blade\n    difference() {\n        // Main leaf shape\n        scale([1, 1.2, 0.3])\n            sphere(d = size);\n        \n        // Leaf indent\n        translate([size/4, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = size/2, d = size/4);\n                \n        // Petiole hole\n        translate([0, 0, -size/2])\n            cylinder(h = size, d = 2);\n    }\n    \n    // Petiole (leaf stem)\n    translate([0, 0, -size/2])\n        rotate([0, 0, 90])\n            cylinder(h = size/3, d = 2);\n}\n\n// Generate the complete plant\nmoney_plant();",
    "renders": true
  },
  {
    "plant": "christmas",
    "openscad_code": "// Christmas Plant - Realistic Poinsettia with Pot\n// Overall height ~120mm, printable in one piece\n\n// Parameters\npot_height = 35;\npot_radius = 30;\npot_thick = 2;\nsoil_height = 10;\nstem_height = 60;\nstem_radius = 3;\nleaf_thick = 1.2;\nbract_length = 25;\nbract_width = 15;\nbract_count = 7;\nleaf_length = 20;\nleaf_width = 12;\n\n// Pot with drainage hole\nmodule pot() {\n    difference() {\n        union() {\n            // Outer pot\n            cylinder(h = pot_height, r1 = pot_radius, r2 = pot_radius * 0.8, $fn = 60);\n            // Rim\n            translate([0, 0, pot_height])\n                cylinder(h = 5, r1 = pot_radius + 3, r2 = pot_radius + 3, $fn = 60);\n        }\n        // Inner cavity\n        translate([0, 0, pot_thick])\n            cylinder(h = pot_height + 1, r1 = pot_radius - pot_thick, r2 = (pot_radius - pot_thick) * 0.8, $fn = 60);\n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h = pot_thick + 2, r = 4, $fn = 20);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, pot_height - soil_height])\n        cylinder(h = soil_height + 1, r = pot_radius - pot_thick - 1, $fn = 60);\n}\n\n// Main stem\nmodule stem() {\n    translate([0, 0, pot_height - soil_height])\n        cylinder(h = stem_height, r = stem_radius, $fn = 20);\n}\n\n// Red bract (modified leaf)\nmodule bract(l, w) {\n    // Tapered leaf shape using hull of spheres\n    hull() {\n        translate([0, 0, -leaf_thick/2])\n            sphere(r = w/2, $fn = 20);\n        translate([l - 5, 0, -leaf_thick/2])\n            sphere(r = 2, $fn = 10);\n    }\n    // Vein detail\n    translate([0, 0, leaf_thick/2 + 0.01])\n        cube([l, 0.5, 0.5], center = true);\n}\n\n// Green leaf\nmodule green_leaf(l, w) {\n    // Simple leaf shape\n    scale([l, w, leaf_thick])\n        sphere(r = 0.5, $fn = 20);\n}\n\n// Flower cluster (yellow cyathia)\nmodule flower_cluster() {\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([0, 3, 0])\n            sphere(r = 1.2, $fn = 10);\n    }\n}\n\n// Assembly\nunion() {\n    pot();\n    soil();\n    stem();\n    \n    // Red bracts in star pattern\n    for(i = [0:bract_count - 1]) {\n        rotate([0, 0, i * (360 / bract_count)])\n        translate([0, 0, pot_height + stem_height - 5])\n        rotate([30, 0, 0])\n            bract(bract_length, bract_width);\n    }\n    \n    // Small green leaves below bracts\n    for(i = [0:bract_count - 1]) {\n        rotate([0, 0, i * (360 / bract_count) + (360 / bract_count / 2)])\n        translate([0, 0, pot_height + stem_height - 15])\n        rotate([45, 0, 0])\n            green_leaf(leaf_length, leaf_width);\n    }\n    \n    // Flower cluster at center\n    translate([0, 0, pot_height + stem_height + 2])\n        flower_cluster();\n}",
    "renders": true
  },
  {
    "plant": "easter",
    "openscad_code": "// Easter Plant - Daffodil in a pot\n// Size: ~100 mm tall\n\n// Overall parameters\npot_d = 40;\npot_h = 30;\nsoil_h = 10;\nwall_th = 2;\n\nmodule pot() {\n    // Outer pot\n    difference() {\n        cylinder(h = pot_h, d1 = pot_d, d2 = 35, $fn = 36);\n        translate([0, 0, wall_th])\n            cylinder(h = pot_h, d1 = pot_d - wall_th*2, d2 = 35 - wall_th*2, $fn = 36);\n    }\n    // Base disk\n    cylinder(h = wall_th, d = pot_d, $fn = 36);\n}\n\nmodule soil() {\n    // Soil surface\n    translate([0, 0, pot_h - soil_h])\n        cylinder(h = soil_h, d = pot_d - wall_th*2, $fn = 36);\n}\n\nmodule stem() {\n    // Central stem\n    cylinder(h = 60, d = 3, $fn = 8);\n}\n\nmodule leaf(h, angle, base_r) {\n    // Simple leaf blade\n    rotate([0, 0, angle])\n        translate([base_r, 0, -h/2])\n            rotate([90, 0, 0])\n                scale([1, 4, 0.5])\n                    cylinder(h = h, d = 3, $fn = 6);\n}\n\nmodule trumpet() {\n    // Daffodil trumpet\n    color(\"yellow\")\n    translate([0, 0, 62])\n        rotate([0, 180, 0])\n            cylinder(h1 = 0, h2 = 10, d1 = 10, d2 = 6, $fn = 36);\n}\n\nmodule petal() {\n    // Individual petal\n    color(\"white\")\n    scale([1, 1.5, 0.5])\n        sphere(d = 8, $fn = 8);\n}\n\nmodule petals() {\n    // Six petals around trumpet\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n            translate([8, 0, 60])\n                petal();\n    }\n}\n\nmodule egg() {\n    // Simple easter egg\n    color(\"pink\")\n    scale([1, 1.3, 1])\n        sphere(d = 8, $fn = 32);\n}\n\nmodule easter_eggs() {\n    // Three eggs nestled in soil\n    translate([10, 10, pot_h - soil_h + 4]) egg();\n    translate([-12, -8, pot_h - soil_h + 4]) rotate([0, 0, 45]) egg();\n    translate([8, -12, pot_h - soil_h + 4]) rotate([0, 0, -30]) egg();\n}\n\n// Assemble the Easter plant\nunion() {\n    pot();\n    translate([0, 0, wall_th]) soil();\n    translate([0, 0, pot_h - soil_h]) stem();\n    translate([0, 0, pot_h - soil_h]) {\n        for(i = [0:2]) {\n            leaf(30, i*120 + 30, 2);\n            leaf(25, i*120 - 30, 2);\n        }\n    }\n    petals();\n    trumpet();\n    easter_eggs();\n}",
    "renders": true
  },
  {
    "plant": "thanksgiving",
    "openscad_code": "// Thanksgiving Cornucopia with Pumpkins and Autumn Leaves\n// Realistic style, medium complexity\n\n$fn = 30;\n\n// Overall scale\nscale_factor = 0.8;\n\n// Cornucopia horn\nmodule horn() {\n    // Main horn body - tapered tube\n    difference() {\n        union() {\n            // Outer shell\n            rotate_extrude(angle = 180, convexity = 10) {\n                translate([15, 0, 0]) {\n                    rotate([90, 0, 0]) {\n                        difference() {\n                            circle(d1 = 50, d2 = 20);\n                            circle(d1 = 46, d2 = 16);\n                        }\n                    }\n                }\n            }\n            \n            // Closed end cap\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h = 2, d = 20);\n                    cylinder(h = 2.1, d = 16);\n                }\n            }\n        }\n        \n        // Opening for hollow interior\n        rotate_extrude(angle = 180, convexity = 10) {\n            translate([15, 0, 0]) {\n                rotate([90, 0, 0]) {\n                    circle(d = 16);\n                }\n            }\n        }\n    }\n}\n\n// Pumpkin module\nmodule pumpkin(size = 10) {\n    // Main pumpkin body - slightly flattened sphere\n    scale([1.1, 1, 1]) {\n        sphere(d = size);\n    }\n    \n    // Pumpkin segments\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([0, -size/2.1, 0]) {\n                scale([0.15, 1, 1]) {\n                    sphere(d = size * 1.1);\n                }\n            }\n        }\n    }\n    \n    // Stem\n    translate([0, 0, size/2]) {\n        cylinder(h = size/4, d1 = size/5, d2 = size/6);\n    }\n}\n\n// Autumn leaf module\nmodule leaf(length = 15, width = 8) {\n    // Main leaf shape\n    scale([length/10, width/10, 0.8]) {\n        difference() {\n            sphere(d = 10);\n            translate([5, 0, 0]) {\n                sphere(d = 8);\n            }\n            translate([-5, 0, 0]) {\n                sphere(d = 8);\n            }\n        }\n    }\n    \n    // Leaf veins\n    translate([0, 0, 0.5]) {\n        color(\"brown\") {\n            // Central vein\n            cube([length, 0.5, 0.5], center = true);\n            \n            // Side veins\n            for(i = [-1, 1]) {\n                rotate([0, 0, i * 30]) {\n                    translate([length/4, 0, 0]) {\n                        cube([length/2, 0.3, 0.3], center = true);\n                    }\n                }\n                rotate([0, 0, i * 60]) {\n                    translate([length/3, 0, 0]) {\n                        cube([length/3, 0.3, 0.3], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    // Cornucopia\n    translate([0, -20, 0]) {\n        rotate([0, 0, 45]) {\n            horn();\n        }\n    }\n    \n    // Pumpkins inside\n    translate([10, -10, 5]) {\n        color(\"orange\") {\n            pumpkin(12);\n        }\n    }\n    \n    translate([5, -15, 8]) {\n        color(\"darkorange\") {\n            pumpkin(8);\n        }\n    }\n    \n    translate([-5, -12, 3]) {\n        color(\"orangered\") {\n            pumpkin(10);\n        }\n    }\n    \n    // Small pumpkin on rim\n    translate([-20, -25, 15]) {\n        color(\"orange\") {\n            pumpkin(7);\n        }\n    }\n    \n    // Autumn leaves scattered\n    translate([15, -5, 15]) {\n        rotate([90, 0, 45]) {\n            color(\"red\") {\n                leaf(12, 7);\n            }\n        }\n    }\n    \n    translate([8, -8, 12]) {\n        rotate([90, 0, -30]) {\n            color(\"gold\") {\n                leaf(10, 6);\n            }\n        }\n    }\n    \n    translate([0, -18, 18]) {\n        rotate([90, 0, 60]) {\n            color(\"darkred\") {\n                leaf(8, 5);\n            }\n        }\n    }\n    \n    // Additional leaves around base\n    for(i = [0:5]) {\n        angle = i * 60;\n        radius = 30 + i * 3;\n        translate([radius * cos(angle), radius * sin(angle) - 20, 0]) {\n            rotate([90, 0, angle + 15]) {\n                color(i % 2 == 0 ? \"brown\" : \"goldenrod\") {\n                    leaf(6 + i, 4 + i/2);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "plant": "cactus",
    "openscad_code": "// Realistic medium-complexity 3D printable cactus\n// Overall height ≈ 110 mm, max width ≈ 60 mm\n\n$fn = 30; // smooth curves\n\n// Main trunk module with slight taper\nmodule trunk(h = 70, r_base = 18, r_top = 15) {\n    union() {\n        // tapered cylinder for trunk\n        cylinder(h1 = h, r1 = r_base, r2 = r_top, $fn = 40);\n        \n        // vertical ribs for texture\n        for (i = [0 : 30 : 359]) {\n            rotate([0, 0, i])\n                translate([r_base - 1.2, -1.5, 0])\n                    cube([3, 3, h]);\n        }\n    }\n}\n\n// Arm segment with taper and rounded tip\nmodule arm(len = 35, r_start = 12, r_end = 8) {\n    difference() {\n        hull() {\n            // start cylinder\n            translate([0, 0, 0])\n                cylinder(h = 0.1, r = r_start);\n            // end cylinder\n            translate([0, 0, len])\n                sphere(r = r_end);\n        }\n        \n        // hollow it out for printing (2 mm walls)\n        translate([0, 0, -1])\n            cylinder(h = len + 2, r = r_start - 2);\n    }\n}\n\n// Small bump / areole detail\nmodule areole() {\n    sphere(d = 4);\n}\n\n// Spine cluster\nmodule spines() {\n    for (a = [0 : 60 : 300]) {\n        rotate([0, 0, a])\n            translate([2, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 4, r = 0.4);\n    }\n}\n\n// Main assembly\nunion() {\n    // trunk\n    trunk();\n\n    // left arm\n    translate([0, 0, 45])\n        rotate([0, -20, -35])\n            arm();\n\n    // right arm\n    translate([0, 0, 55])\n        rotate([0, 20, 45])\n            arm();\n\n    // top arm\n    translate([0, 0, 65])\n        rotate([20, 0, 0])\n            arm(len = 30, r_start = 10, r_end = 6);\n\n    // areoles with spines along trunk\n    for (z = [15 : 20 : 55]) {\n        for (a = [0 : 90 : 270]) {\n            rotate([0, 0, a])\n                translate([17, 0, z]) {\n                    areole();\n                    spines();\n                }\n        }\n    }\n\n    // areoles on arms\n    for (z = [5 : 10 : 25]) {\n        for (a = [0 : 120 : 240]) {\n            rotate([0, -20, -35])\n                translate([9, 0, z])\n                    rotate([0, 0, a]) {\n                        areole();\n                        spines();\n                    }\n            rotate([0, 20, 45])\n                translate([9, 0, z])\n                    rotate([0, 0, a]) {\n                        areole();\n                        spines();\n                    }\n            rotate([20, 0, 0])\n                translate([7, 0, z])\n                    rotate([0, 0, a]) {\n                        areole();\n                        spines();\n                    }\n        }\n    }\n\n    // bottom base ring for print stability\n    translate([0, 0, -2])\n        cylinder(h = 2, r = 20);\n}\n\n// Hollow interior for material saving\ndifference() {\n    children();\n    translate([0, 0, -1])\n        cylinder(h = 75, r = 13);\n}",
    "renders": true
  },
  {
    "plant": "succulent",
    "openscad_code": "// Realistic succulent plant - medium complexity\n// Echeveria-type rosette with layered thick leaves\n\n// Main parameters\n$fn = 24;  // Smooth curves\nscale_factor = 1;  // Adjust overall size\npot_d = 60 * scale_factor;\npot_h = 45 * scale_factor;\nplant_h = 80 * scale_factor;\n\n// Main module\nmodule succulent_plant() {\n    // Pot\n    translate([0, 0, 0]) {\n        difference() {\n            cylinder(h = pot_h, d1 = pot_d, d2 = pot_d * 0.8);\n            translate([0, 0, 2]) cylinder(h = pot_h, d1 = pot_d - 4, d2 = pot_d * 0.8 - 4);\n        }\n    }\n    \n    // Soil surface\n    translate([0, 0, pot_h - 2]) {\n        scale([1, 1, 0.3]) sphere(d = pot_d * 0.75);\n    }\n    \n    // Central stem\n    translate([0, 0, pot_h - 5]) {\n        cylinder(h = 15, d = 8);\n    }\n    \n    // Rosette layers\n    for (i = [0:3]) {\n        rosette_layer(i);\n    }\n}\n\n// Individual rosette layer\nmodule rosette_layer(layer) {\n    layer_height = pot_h + 10 + layer * 12;\n    leaf_count = 8 + layer * 4;\n    leaf_length = 30 - layer * 5;\n    leaf_width = 15 - layer * 3;\n    \n    for (i = [0:leaf_count - 1]) {\n        angle = i * 360 / leaf_count;\n        \n        translate([0, 0, layer_height]) {\n            rotate([0, 0, angle]) {\n                translate([leaf_length * 0.3, 0, 0]) {\n                    rotate([0, 20 + layer * 10, 0]) {\n                        scale([1, 0.6, 0.3]) {\n                            succulent_leaf(leaf_length, leaf_width);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Individual leaf shape\nmodule succulent_leaf(length, width) {\n    // Main leaf body\n    hull() {\n        translate([0, 0, 0]) sphere(d = width);\n        translate([length, 0, 0]) sphere(d = width * 0.7);\n    }\n    \n    // Leaf tip\n    translate([length, 0, 0]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = width * 0.5, d1 = width * 0.7, d2 = 0.1);\n        }\n    }\n    \n    // Leaf thickness with hollow center\n    difference() {\n        // Outer shape\n        hull() {\n            translate([0, 0, 0]) sphere(d = width + 2);\n            translate([length, 0, 0]) sphere(d = width * 0.7 + 2);\n        }\n        \n        // Inner hollow\n        hull() {\n            translate([0, 0, 0]) sphere(d = width);\n            translate([length, 0, 0]) sphere(d = width * 0.7);\n        }\n    }\n}\n\n// Baby offsets\nmodule baby_offsets() {\n    for (i = [0:2]) {\n        angle = i * 120;\n        translate([pot_d * 0.4, 0, pot_h]) {\n            rotate([0, 0, angle]) {\n                translate([15, 0, 5]) {\n                    scale(0.4) {\n                        rosette_layer(0);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the complete plant\nunion() {\n    succulent_plant();\n    baby_offsets();\n}",
    "renders": true
  },
  {
    "plant": "echeveria",
    "openscad_code": "// Echeveria Plant - Realistic Style, Medium Complexity\n// 3D printable echeveria succulent with rosette structure\n\n// Global parameters\n$fn = 24;  // Smooth curves for printing\nplant_height = 60;  // Total height in mm\nbase_diameter = 80;  // Rosette diameter at base\nwall_thickness = 2;  // 3D printable wall thickness\nleaf_thickness = 1.5;  // Leaf thickness for printing\n\n// Main echeveria module\nmodule echeveria() {\n    // Central stem/trunk\n    translate([0, 0, -5]) \n        cylinder(h=10, d=8, $fn=16);\n    \n    // Rosette leaves in spiral pattern\n    for (i = [0:35]) {\n        translate([0, 0, 0])\n            rotate([0, 0, i * 137.5])  // Golden angle for natural spiral\n            translate([0, 15 + i * 0.8, 0])\n                rotate([85 - i * 0.7, 0, 0])  // Leaves angle up gradually\n                    scale([1, 1 - i * 0.01, 1])\n                        echeveria_leaf(35 - i * 0.5);\n    }\n    \n    // Inner smaller leaves\n    for (i = [0:20]) {\n        translate([0, 0, 5])\n            rotate([0, 0, i * 139.5])\n            translate([0, 5 + i * 0.4, 0])\n                rotate([75 - i * 0.5, 0, 0])\n                    scale([0.7, 0.7, 1])\n                        echeveria_leaf(20 - i * 0.3);\n    }\n}\n\n// Individual leaf module with realistic echeveria shape\nmodule echeveria_leaf(length) {\n    // Main leaf body - tapered cylinder with rounded tip\n    translate([0, 0, -leaf_thickness/2])\n        linear_extrude(height=leaf_thickness, convexity=10)\n            difference() {\n                // Outer leaf shape\n                scale([1, 0.4, 1])\n                    circle(d=length);\n                \n                // Inner hollow for wall thickness\n                offset(-wall_thickness)\n                    scale([1, 0.4, 1])\n                        circle(d=length - wall_thickness*2);\n            };\n    \n    // Leaf tip - small sphere for rounded end\n    translate([length/2, 0, 0])\n        sphere(d=leaf_thickness*2);\n    \n    // Leaf ridges for texture\n    for (r = [0.2, 0.4, 0.6, 0.8]) {\n        translate([r * length/2 - length/4, 0, leaf_thickness/2 + 0.1])\n            rotate([90, 0, 0])\n                cylinder(h=length*0.3, d=0.5, $fn=8);\n    }\n}\n\n// Base pot for stability\nmodule base_pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=15, d=base_diameter + 20, $fn=32);\n        \n        // Inner hollow\n        translate([0, 0, -1])\n            cylinder(h=17, d=base_diameter + 16, $fn=32);\n        \n        // Drainage hole\n        translate([0, 0, -0.5])\n            cylinder(h=16, d=6, $fn=16);\n    }\n}\n\n// Soil surface\nmodule soil_surface() {\n    translate([0, 0, 10])\n        difference() {\n            cylinder(h=3, d=base_diameter + 16, $fn=32);\n            cylinder(h=3.5, d=base_diameter + 12, $fn=32);\n        }\n}\n\n// Assembly\ntranslate([0, 0, 15])\n    echeveria();\n\ntranslate([0, 0, 0])\n    base_pot();\n\ntranslate([0, 0, 10])\n    soil_surface();",
    "renders": true
  },
  {
    "plant": "haworthia",
    "openscad_code": "// Haworthia Plant - Realistic Medium Complexity\n// Size: ~90mm diameter x 70mm height\n\n$fn = 36;\n\n// Main module\nmodule haworthia() {\n    // Base pot\n    difference() {\n        cylinder(h = 25, d = 90, center = true);\n        translate([0, 0, 2])\n            cylinder(h = 30, d = 84, center = true);\n    }\n    \n    // Soil surface\n    translate([0, 0, 11.5])\n        cylinder(h = 2, d = 84);\n    \n    // Central rosette\n    translate([0, 0, 12])\n        rosette();\n}\n\n// Leaf module with haworthia characteristics\nmodule haworthia_leaf(height = 25, width = 8, thickness = 2.5, angle = 0, bend = 0) {\n    rotate([0, 0, angle])\n    translate([0, 0, height/2])\n    rotate([bend, 0, 0])\n    union() {\n        // Main leaf body\n        scale([1, width/height, thickness/height])\n            sphere(d = height);\n        \n        // Leaf tip\n        translate([0, 0, height/2 - 1])\n            cylinder(h = 5, d1 = width * 0.8, d2 = 1);\n        \n        // Surface ridges\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n            translate([width/4, 0, -height/4])\n                scale([0.3, 0.1, 1])\n                sphere(d = height * 0.8);\n        }\n    }\n}\n\n// Complete rosette\nmodule rosette() {\n    // Outer ring of leaves\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([20, 0, 0])\n        haworthia_leaf(\n            height = 25 + (i % 2) * 5,\n            width = 7 + (i % 3) * 2,\n            thickness = 2.5,\n            angle = i * 30,\n            bend = 10 + (i % 3) * 5\n        );\n    }\n    \n    // Middle ring\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([10, 0, 0])\n        haworthia_leaf(\n            height = 20,\n            width = 6,\n            thickness = 2.5,\n            angle = i * 45 + 22.5,\n            bend = 15\n        );\n    }\n    \n    // Center leaves\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        haworthia_leaf(\n            height = 15,\n            width = 5,\n            thickness = 3,\n            angle = i * 90 + 45,\n            bend = 20\n        );\n    }\n    \n    // Flower stalk\n    translate([0, 0, 30])\n    cylinder(h = 30, d = 3);\n    \n    // Tiny flowers\n    for(i = [0:5]) {\n        rotate([0, 0, i * 72])\n        translate([5, 0, 45])\n        sphere(d = 3);\n    }\n}\n\n// Generate the plant\nhaworthia();",
    "renders": true
  },
  {
    "plant": "sedum",
    "openscad_code": "// Sedum plant with realistic medium complexity\n// 3D printable model, ~80mm tall\n\n// Stem module - cylindrical with taper\nmodule stem(h=15, r_base=3, r_top=2) {\n    union() {\n        cylinder(h=h, r1=r_base, r2=r_top, $fn=16);\n        // Add small ridges for texture\n        for(i=[0:45:315]) {\n            rotate([0, 0, i])\n            translate([r_base-0.5, -0.5, 0])\n            cube([1, 1, h]);\n        }\n    }\n}\n\n// Leaf module - succulent teardrop shape\nmodule leaf(length=12, width=8, thickness=4) {\n    // Main leaf body\n    difference() {\n        union() {\n            // Central oval\n            scale([1, width/length, thickness/length])\n            sphere(d=length, $fn=32);\n            \n            // Tapered tip\n            translate([length/2, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=length/4, r1=thickness/2, r2=0.5, $fn=16);\n        }\n        \n        // Hollow center for realistic thickness\n        translate([0, 0, -1])\n        scale([0.7, 0.7, 0.8])\n        sphere(d=length*0.8, $fn=32);\n    }\n}\n\n// Rosette cluster - multiple leaves in circular pattern\nmodule rosette(leaves=12, radius=25, height_offset=0) {\n    for(i=[0:360/leaves:359]) {\n        rotate([0, 0, i])\n        translate([radius, 0, height_offset])\n        rotate([0, -30, 20])\n        color(\"darkgreen\")\n        leaf();\n    }\n}\n\n// Secondary stem with smaller rosette\nmodule branch_stem(length=20, angle=45, rosette_size=15) {\n    rotate([angle, 0, 0])\n    translate([0, 0, 5])\n    union() {\n        // Branch stem\n        color(\"green\")\n        stem(h=length, r_base=2, r_top=1.5);\n        \n        // Rosette at branch end\n        translate([0, 0, length])\n        rosette(leaves=8, radius=rosette_size, height_offset=0);\n    }\n}\n\n// Main plant assembly\nmodule sedum_plant() {\n    union() {\n        // Main stem\n        color(\"darkgreen\")\n        stem(h=30, r_base=4, r_top=3);\n        \n        // Main rosette at top\n        translate([0, 0, 30])\n        rosette(leaves=16, radius=35);\n        \n        // First tier of branches\n        for(i=[0:60:300]) {\n            rotate([0, 0, i])\n            translate([0, 3, 25])\n            branch_stem(length=25, angle=45, rosette_size=20);\n        }\n        \n        // Second tier of smaller branches\n        for(i=[30:60:330]) {\n            rotate([0, 0, i])\n            translate([0, 2, 15])\n            branch_stem(length=15, angle=60, rosette_size=12);\n        }\n        \n        // Base for stability\n        translate([0, 0, -5])\n        cylinder(h=5, r=8, $fn=32);\n    }\n}\n\n// Create the plant scaled to 80mm height\nscale([1, 1, 1])\nsedum_plant();",
    "renders": true
  },
  {
    "plant": "crassula",
    "openscad_code": "// Crassula (jade plant) – medium-complexity, 3-D-printable, realistic style\n// Overall height ≈ 90 mm, max width ≈ 70 mm\n\n$fn = 36;               // smooth curves\n\nstem_d   = 8;           // main trunk diameter\nstem_h   = 25;          // main trunk height\npot_d    = 45;          // pot outer diameter\npot_h    = 25;          // pot height\nwall_t   = 2;           // printable wall thickness\n\n// Helper for rounded leaf cross-section\nmodule leaf_profile(r = 1, h = 1) {\n    difference() {\n        cylinder(r = r, h = h, center = true);\n        translate([0, 0, -h/2 - 0.1])\n            cube([r*2, r*2, h + 0.2], center = true);\n    }\n}\n\n// Single jade leaf\nmodule leaf(len = 12, wid = 8, thick = 2) {\n    hull() {\n        translate([0, 0, thick/2]) leaf_profile(wid/2, thick);\n        translate([0, len - wid/2, thick/2]) leaf_profile(wid/3, thick);\n    }\n}\n\n// Cluster of leaves around a stem joint\nmodule leaf_cluster(count = 5, scale = 1) {\n    for (i = [0:count-1])\n        rotate([0, 0, i*360/count])\n            translate([0, 5*scale, 0])\n                rotate([30, 0, 0])\n                    scale([scale, scale, scale])\n                        leaf();\n}\n\n// Branching structure\nmodule branch(depth = 0, len = 15, dia = 3, angle = 30) {\n    if (depth < 3) {\n        // main segment cylinder\n        cylinder(d = dia, h = len, center = false);\n        \n        // joint disk to thicken printable connection\n        translate([0, 0, len])\n            cylinder(d = dia + wall_t*2, h = wall_t, center = false);\n        \n        // leaves at joint\n        translate([0, 0, len])\n            leaf_cluster(count = 5 + depth*2, scale = 1.0 - depth*0.15);\n        \n        // two recursive sub-branches\n        translate([0, 0, len + wall_t])\n            rotate([angle + 20, 0, 0])\n                branch(depth + 1, len*0.8, dia*0.8, angle);\n        translate([0, 0, len + wall_t])\n            rotate([-angle, 0, 0])\n                branch(depth + 1, len*0.8, dia*0.8, angle);\n    }\n}\n\n// Pot with drainage hole\nmodule pot() {\n    difference() {\n        cylinder(d = pot_d, h = pot_h);\n        translate([0, 0, wall_t])\n            cylinder(d = pot_d - 2*wall_t, h = pot_h);\n    }\n    // drainage hole\n    translate([0, 0, -0.1])\n        cylinder(d = 4, h = wall_t + 0.2);\n}\n\n// Main trunk\nmodule main_stem() {\n    cylinder(d = stem_d, h = stem_h);\n    translate([0, 0, stem_h])\n        cylinder(d = stem_d + 2*wall_t, h = wall_t);\n}\n\n// Assemble plant\nunion() {\n    // pot\n    pot();\n    \n    // soil level flush with pot lip\n    translate([0, 0, pot_h])\n        union() {\n            // main trunk\n            main_stem();\n            \n            // three primary branches around trunk top\n            for (ang = [0, 120, 240])\n                rotate([0, 0, ang])\n                    translate([0, 0, stem_h + wall_t])\n                        rotate([35, 0, 0])\n                            branch(0, 20, 4, 30);\n        }\n}",
    "renders": true
  },
  {
    "plant": "kalanchoe",
    "openscad_code": "// Kalanchoe Plant - Realistic Style, Medium Complexity\n// 3D printable succulent with proper proportions and structural details\n\n// Parameters for overall sizing\nplant_height = 80;\npot_height = 30;\npot_diameter = 45;\nstem_thickness = 3;\nleaf_thickness = 2;\n\n// Module for creating a single leaf with realistic kalanchoe shape\nmodule kalanchoe_leaf(length, width, thickness) {\n    // Main leaf body - slightly curved ellipsoid\n    translate([0, 0, thickness/2])\n        scale([length/2, width/2, thickness/2])\n        sphere(2, $fn=32);\n    \n    // Leaf tip - elongated point\n    translate([length/2, 0, thickness/2])\n        rotate([0, 90, 0])\n        cylinder(h=length/4, r1=width/3, r2=0, $fn=16);\n    \n    // Leaf base - wider at stem attachment\n    translate([-length/2, 0, thickness/2])\n        rotate([0, -90, 0])\n        cylinder(h=length/8, r1=width/2, r2=width/3, $fn=16);\n}\n\n// Module for a stem segment\nmodule stem_segment(height, radius) {\n    cylinder(h=height, r=radius, $fn=16);\n}\n\n// Module for a complete stem with leaves in rosette pattern\nmodule stem_with_rosette(stem_h, stem_r, leaf_count) {\n    // Main stem\n    stem_segment(stem_h, stem_r);\n    \n    // Leaves arranged in pairs along stem\n    for(i = [0:leaf_count-1]) {\n        angle = 360 * i / leaf_count;\n        height_offset = stem_h * 0.3 + (i * stem_h * 0.1);\n        \n        // Create opposing leaf pair\n        translate([0, 0, height_offset])\n        rotate([0, 0, angle]) {\n            // Left leaf\n            translate([stem_r + 8, 0, 0])\n            rotate([0, -20, -30])\n            kalanchoe_leaf(15, 8, leaf_thickness);\n            \n            // Right leaf\n            translate([-stem_r - 8, 0, 0])\n            rotate([0, 20, 30])\n            mirror([1, 0, 0])\n            kalanchoe_leaf(15, 8, leaf_thickness);\n        }\n    }\n    \n    // Top rosette cluster\n    for(j = [0:5]) {\n        rosette_angle = 360 * j / 6;\n        translate([0, 0, stem_h])\n        rotate([0, 0, rosette_angle])\n        rotate([0, -15, 0])\n        translate([0, 5, 0])\n        kalanchoe_leaf(12, 6, leaf_thickness);\n    }\n}\n\n// Module for flower cluster (small decorative elements)\nmodule flower_cluster() {\n    // Tiny flowers on thin stems\n    for(k = [0:3]) {\n        flower_angle = 90 * k;\n        translate([0, 0, plant_height - 10])\n        rotate([0, 0, flower_angle])\n        translate([8, 0, 0])\n        rotate([0, 30, 0]) {\n            // Flower stem\n            cylinder(h=12, r=0.5, $fn=8);\n            // Flower head\n            translate([0, 0, 12])\n            sphere(2, $fn=16);\n        }\n    }\n}\n\n// Module for the pot with drainage hole\nmodule plant_pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_height, r=pot_diameter/2, $fn=64);\n        \n        // Inner hollow\n        translate([0, 0, pot_height/2])\n        cylinder(h=pot_height - 2, r=pot_diameter/2 - 2, $fn=64);\n        \n        // Drainage hole\n        translate([0, 0, 2])\n        cylinder(h=5, r=3, $fn=16);\n    }\n    \n    // Soil surface\n    translate([0, 0, pot_height - 2])\n    cylinder(h=2, r=pot_diameter/2 - 2, $fn=64);\n}\n\n// Main assembly\nunion() {\n    // Pot\n    plant_pot();\n    \n    // Main plant stems\n    translate([0, 0, pot_height - 2]) {\n        // Center stem\n        stem_with_rosette(plant_height - pot_height, stem_thickness, 4);\n        \n        // Side shoots\n        for(m = [0:2]) {\n            side_angle = 120 * m;\n            rotate([0, 0, side_angle])\n            translate([5, 0, 0])\n            rotate([0, 15, 0])\n            stem_with_rosette((plant_height - pot_height) * 0.7, stem_thickness * 0.8, 3);\n        }\n    }\n    \n    // Flower clusters on mature stems\n    flower_cluster();\n}",
    "renders": true
  },
  {
    "plant": "senecio",
    "openscad_code": "// Senecio Plant - Realistic Style, Medium Complexity\n// Size: ~120mm tall, 3D printable with 2mm walls\n\nmodule stem_segment(h, r, angle) {\n    // Single stem segment with slight taper\n    translate([0, 0, h/2])\n    rotate([0, angle, 0])\n    cylinder(h=h, r1=r, r2=r*0.8, $fn=8);\n}\n\nmodule leaf(length, width, thickness) {\n    // Senecio leaf - elongated oval shape\n    difference() {\n        // Main leaf body\n        scale([width, length, thickness])\n        sphere(r=1, $fn=16);\n        \n        // Leaf tip taper\n        translate([0, length*0.8, -thickness])\n        cube([width*2, length*0.4, thickness*2], center=true);\n    }\n}\n\nmodule foliage_cluster(x, y, z, count, scale_factor) {\n    // Cluster of leaves at a node\n    translate([x, y, z])\n    for(i = [0:count-1]) {\n        rotate([0, 0, i*(360/count) + rand(i)*15])\n        translate([0, 5*scale_factor, 0])\n        rotate([rand(i)*20 - 10, 0, 0])\n        scale(scale_factor)\n        leaf(15, 3, 1.5);\n    }\n}\n\nmodule main_stem() {\n    // Main vertical stem with segments\n    union() {\n        // Base segment (thickest)\n        stem_segment(20, 4, 0);\n        \n        // Middle segments\n        for(i = [1:4]) {\n            translate([0, 0, i*20])\n            stem_segment(20, 4-i*0.5, rand(i*10)*5);\n        }\n        \n        // Top segment\n        translate([0, 0, 100])\n        stem_segment(15, 2, 0);\n    }\n}\n\nmodule branching_stems() {\n    // Secondary stems branching from main\n    for(i = [1:3]) {\n        height = 30 + i*20;\n        angle = 30 + rand(i)*20;\n        \n        translate([0, 0, height])\n        rotate([0, angle, i*120])\n        union() {\n            stem_segment(25, 2.5, 0);\n            \n            // Tertiary branches\n            translate([0, 0, 15])\n            rotate([0, -20, 0])\n            stem_segment(15, 1.5, 0);\n        }\n    }\n}\n\nmodule roots() {\n    // Simple root system for stability\n    difference() {\n        // Root bulb\n        translate([0, 0, -15])\n        scale([1.5, 1.5, 1])\n        sphere(r=10, $fn=16);\n        \n        // Root indentations\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n            translate([8, 0, -15])\n            rotate([90, 0, 0])\n            cylinder(h=15, r1=3, r2=1, $fn=6);\n        }\n    }\n}\n\nmodule rand(seed) {\n    // Pseudo-random function for natural variation\n    rands(0, 1, 1, seed)[0];\n}\n\n// Main plant assembly\nunion() {\n    // Roots and base\n    roots();\n    \n    // Main structure\n    main_stem();\n    branching_stems();\n    \n    // Foliage placement\n    foliage_cluster(0, 0, 110, 5, 1);\n    foliage_cluster(0, 0, 90, 4, 0.8);\n    foliage_cluster(0, 0, 70, 3, 0.7);\n    \n    // Branch foliage\n    for(i = [1:3]) {\n        height = 30 + i*20;\n        angle = 30 + rand(i)*20;\n        \n        // Primary branch leaves\n        translate([0, 0, height])\n        rotate([0, angle, i*120])\n        translate([0, 25, 0])\n        foliage_cluster(0, 0, 0, 3, 0.6);\n        \n        // Secondary branch leaves\n        translate([0, 0, height])\n        rotate([0, angle, i*120])\n        translate([0, 15, 0])\n        rotate([0, -20, 0])\n        translate([0, 7.5, 0])\n        foliage_cluster(0, 0, 0, 2, 0.4);\n    }\n}",
    "renders": true
  },
  {
    "plant": "burro",
    "openscad_code": "// Burro's Tail Plant (Sedum morganianum) - Realistic style, medium complexity\n// Overall height ~120mm, width ~80mm, suitable for 3D printing\n\n// Stem module with realistic tapering and joints\nmodule stem_segment(h, r_base, r_top, detail=true) {\n    difference() {\n        cylinder(h=h, r1=r_base, r2=r_top, $fn=20);\n        \n        // Add slight texture for realistic stem surface\n        if (detail) {\n            for (i = [0:5:360]) {\n                rotate([0, 0, i])\n                    translate([r_base*0.7, -0.5, 0])\n                        cube([r_base*0.3, 1, h]);\n            }\n        }\n    }\n}\n\n// Single leaf module - tear-drop shaped with slight curve\nmodule leaf(length=18, width=6, thickness=2.5) {\n    // Main leaf body\n    hull() {\n        sphere(d=width, $fn=12);\n        translate([0, 0, length*0.7]) \n            sphere(d=width*0.4, $fn=12);\n    }\n    \n    // Add slight bulge for realistic plumpness\n    translate([0, 0, length*0.3])\n        scale([1, 1, 0.6])\n            sphere(d=width*1.1, $fn=12);\n}\n\n// Branch with multiple leaves\nmodule branch(length=25, leaf_count=8, angle=45) {\n    union() {\n        // Main branch stem\n        stem_segment(length, 2.5, 1.5);\n        \n        // Leaves along branch with alternating pattern\n        for (i = [0:leaf_count-1]) {\n            rotate([0, 0, i*360/leaf_count + (i%2)*30]) \n                translate([0, 0, i*length/leaf_count])\n                    rotate([angle, 0, 0])\n                        leaf();\n        }\n    }\n}\n\n// Main hanging cluster\nmodule hanging_cluster(x_pos, y_pos, z_pos, count=5) {\n    translate([x_pos, y_pos, z_pos]) {\n        stem_segment(15, 3, 2);\n        \n        for (i = [0:count-1]) {\n            rotate([0, 0, i*72]) {\n                translate([0, 0, 12])\n                    rotate([80 + sin(i*30)*10, 0, 0])\n                        branch(20 + i*3, 6 + i);\n            }\n        }\n    }\n}\n\n// Pot with drainage details\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=25, r1=25, r2=20, $fn=32);\n        \n        // Inner cavity\n        translate([0, 0, -0.1])\n            cylinder(h=24, r1=22, r2=17, $fn=32);\n        \n        // Drainage holes\n        for (i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([16, 0, 2])\n                    cylinder(h=5, r=2, $fn=8);\n        }\n    }\n    \n    // Rim detail\n    translate([0, 0, 25])\n        cylinder(h=3, r1=27, r2=25, $fn=32);\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, 25.5])\n        cylinder(h=3, r1=22, r2=17, $fn=32);\n}\n\n// Main plant assembly\nunion() {\n    // Pot and soil\n    pot();\n    soil();\n    \n    // Main stems emerging from soil\n    translate([0, 0, 28]) {\n        // Central hanging cluster\n        hanging_cluster(0, 0, 0, 6);\n        \n        // Side clusters for fullness\n        hanging_cluster(10, 5, 5, 4);\n        hanging_cluster(-8, -6, 3, 3);\n        hanging_cluster(5, -10, 7, 4);\n    }\n    \n    // Smaller trailing stems\n    translate([0, 0, 28]) {\n        for (a = [0:60:359]) {\n            rotate([0, 0, a]) {\n                translate([12, 0, 0])\n                    rotate([70, 0, 0])\n                        branch(15, 4);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "plant": "hen",
    "openscad_code": "// Hen Plant - Realistic style, medium complexity\n// A succulent shaped like a hen with chicks, 3D printable\n\n$fn = 32;  // Smooth curves\n\n// Overall dimensions (mm)\nplant_height = 80;\nplant_width = 90;\nplant_depth = 80;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Hen body (main rosette)\nmodule hen_body() {\n    difference() {\n        // Main body - slightly flattened sphere\n        scale([1, 0.8, 0.7]) sphere(d=plant_width);\n        \n        // Hollow out center\n        translate([0, 0, -wall*2])\n            scale([1, 0.8, 0.7]) sphere(d=plant_width-wall*2);\n        \n        // Flat bottom\n        translate([0, 0, -plant_height/2])\n            cube([plant_width*2, plant_width*2, plant_height], center=true);\n    }\n}\n\n// Leaf/scale detail\nmodule leaf(scale_factor=1, angle=0) {\n    translate([0, 0, -2])\n        rotate([0, 0, angle])\n            scale([scale_factor, scale_factor, scale_factor])\n                difference() {\n                    // Leaf shape\n                    scale([0.3, 1, 0.1]) sphere(d=20);\n                    \n                    // Taper the tip\n                    translate([0, 10, 0])\n                        rotate([0, 90, 0])\n                            cylinder(h=15, r1=8, r2=0, center=true);\n                }\n}\n\n// Generate rosette pattern\nmodule rosette() {\n    // Center leaves\n    for(i = [0:23]) {\n        rotate([0, 0, i*15]) {\n            translate([0, plant_width/4, -plant_height/4])\n                rotate([0, -20, 0])\n                    leaf(1.2, i*5);\n        }\n    }\n    \n    // Middle ring leaves\n    for(i = [0:17]) {\n        rotate([0, 0, i*20]) {\n            translate([0, plant_width/3, -plant_height/5])\n                rotate([0, -30, 0])\n                    leaf(0.9, i*3);\n        }\n    }\n    \n    // Outer leaves\n    for(i = [0:11]) {\n        rotate([0, 0, i*30]) {\n            translate([0, plant_width/2.5, -plant_height/6])\n                rotate([0, -40, 0])\n                    leaf(0.7, i*2);\n        }\n    }\n}\n\n// Hen comb detail\nmodule comb() {\n    translate([0, -plant_width/3, plant_height/8])\n        for(i = [0:3]) {\n            translate([i*4-6, 0, 0])\n                scale([0.5, 0.5, 1])\n                    cylinder(h=8, r1=4, r2=2);\n        }\n}\n\n// Beak detail\nmodule beak() {\n    translate([0, -plant_width/2.2, -plant_height/10])\n        rotate([0, 15, 0])\n            scale([1, 0.6, 0.6])\n                difference() {\n                    // Main beak\n                    cube([12, 8, 6], center=true);\n                    \n                    // Hollow\n                    translate([0, 0, -wall/2])\n                        cube([10, 6, 4], center=true);\n                }\n}\n\n// Eye detail\nmodule eye() {\n    translate([8, -plant_width/2.5, 0])\n        sphere(d=4);\n    translate([-8, -plant_width/2.5, 0])\n        sphere(d=4);\n}\n\n// Chicks (smaller offsets)\nmodule chick(pos, scale_factor) {\n    translate(pos)\n        scale(scale_factor)\n            union() {\n                hen_body();\n                rosette();\n            }\n}\n\n// Main assembly\nunion() {\n    // Main hen\n    hen_body();\n    rosette();\n    comb();\n    beak();\n    eye();\n    \n    // Three chicks\n    chick([plant_width/2, plant_width/4, -plant_height/3], 0.4);\n    chick([-plant_width/3, plant_width/3, -plant_height/4], 0.35);\n    chick([0, plant_width/2, -plant_height/3.5], 0.3);\n}",
    "renders": true
  },
  {
    "plant": "burrito",
    "openscad_code": "// Burrito Plant - Realistic Style with Medium Complexity\n// Size: ~100mm diameter, 90mm height\n\n// Main burrito body\nmodule burrito_body() {\n    // Tortilla wrap - main shell\n    difference() {\n        // Outer shell of burrito\n        rotate([90, 0, 0])\n            scale([1, 1.2, 0.8])\n            sphere(d = 90, $fn = 48);\n        \n        // Flatten bottom slightly for stability\n        translate([0, -50, -10])\n            cube([100, 100, 20], center = true);\n    }\n    \n    // Filling texture on surface\n    for(i = [0:30]) {\n        translate([\n            35 * cos(i * 12),\n            35 * sin(i * 12) * 1.2,\n            0\n        ]) {\n            rotate([0, 0, i * 12])\n                scale([1, 0.7, 0.3])\n                sphere(d = 8 + (i % 3) * 3, $fn = 12);\n        }\n    }\n}\n\n// Lettuce leaves\nmodule lettuce_leaves() {\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, -35, 15])\n        rotate([90, 0, 0])\n        scale([1.2, 0.8, 0.3])\n        cylinder(h = 25, d1 = 40, d2 = 20, $fn = 8);\n    }\n}\n\n// Tomato chunks\nmodule tomatoes() {\n    for(i = [0:5]) {\n        translate([\n            20 * cos(i * 60),\n            20 * sin(i * 60),\n            25\n        ])\n        sphere(d = 8, $fn = 12);\n    }\n}\n\n// Cheese strips\nmodule cheese() {\n    for(i = [0:8]) {\n        translate([\n            15 * cos(i * 45),\n            15 * sin(i * 45),\n            28\n        ])\n        rotate([90, 0, i * 45])\n        scale([0.2, 1, 0.1])\n        cube([3, 12, 3]);\n    }\n}\n\n// Plant pot as base\nmodule plant_pot() {\n    difference() {\n        // Main pot body\n        cylinder(h = 30, d1 = 60, d2 = 50, $fn = 32);\n        \n        // Hollow inside\n        translate([0, 0, 2])\n            cylinder(h = 28, d1 = 56, d2 = 46, $fn = 32);\n        \n        // Drainage hole\n        translate([0, 0, 0])\n            cylinder(h = 2, d = 8, $fn = 16);\n    }\n    \n    // Rim detail\n    translate([0, 0, 30])\n    cylinder(h = 5, d1 = 62, d2 = 60, $fn = 32);\n}\n\n// Soil surface\nmodule soil_surface() {\n    translate([0, 0, 32])\n    scale([1, 1, 0.3])\n    sphere(d = 54, $fn = 32);\n}\n\n// Main assembly\nunion() {\n    // Plant pot base\n    plant_pot();\n    \n    // Soil\n    soil_surface();\n    \n    // Burrito body\n    translate([0, 0, 35])\n    burrito_body();\n    \n    // Lettuce\n    translate([0, 0, 35])\n    lettuce_leaves();\n    \n    // Tomatoes\n    translate([0, 0, 35])\n    tomatoes();\n    \n    // Cheese\n    translate([0, 0, 35])\n    cheese();\n}",
    "renders": true
  },
  {
    "plant": "string",
    "openscad_code": "// String Plant (Hanging String of Pearls) - Realistic Style, Medium Complexity\n\n$fn = 32;  // Smooth curves for printing\n\n// Overall dimensions (mm)\nplant_width = 80;\nplant_height = 100;\npot_diameter = 40;\npot_height = 35;\n\nmodule pot() {\n    // Main pot body with wall thickness\n    difference() {\n        cylinder(h=pot_height, d=pot_diameter, center=false);\n        translate([0, 0, 2]) \n            cylinder(h=pot_height, d=pot_diameter-4, center=false);\n    }\n    \n    // Pot rim detail\n    translate([0, 0, pot_height-3])\n        cylinder(h=3, d=pot_diameter+2, center=false);\n    \n    // Drainage hole\n    translate([0, 0, 1])\n        cylinder(h=2, d=5, center=false);\n}\n\nmodule string_branch(length, angle, twist) {\n    // Main stem\n    rotate([0, 0, angle]) {\n        rotate([0, twist, 0]) {\n            translate([0, 0, -length/2])\n                cylinder(h=length, d=2, center=true);\n                \n            // Add pearls along the branch\n            for(i = [1:5:length-5]) {\n                translate([0, 0, -length/2 + i])\n                    sphere(d=4);\n            }\n            \n            // Secondary branches\n            if(length > 15) {\n                translate([0, 0, -length/2 + length/3])\n                    string_branch(length*0.6, 45, 30);\n                translate([0, 0, -length/2 + length/2])\n                    string_branch(length*0.5, -30, -20);\n            }\n        }\n    }\n}\n\nmodule soil_surface() {\n    // Soil at top of pot\n    translate([0, 0, pot_height-2])\n        cylinder(h=2, d=pot_diameter-2, center=false);\n}\n\nmodule root_ball() {\n    // Dense cluster at soil level\n    for(i = [0:30:330]) {\n        rotate([0, 0, i]) {\n            translate([8, 0, pot_height-5]) {\n                string_branch(15, 0, 0);\n            }\n        }\n    }\n}\n\nmodule hanging_strings() {\n    // Main hanging vines\n    for(i = [0:45:315]) {\n        rotate([0, 0, i]) {\n            translate([pot_diameter/2 - 5, 0, pot_height-5]) {\n                string_branch(60, 90, i);\n            }\n        }\n    }\n    \n    // Center hanging string\n    translate([0, 0, pot_height-5]) {\n        string_branch(70, 90, 0);\n    }\n}\n\n// Assembly\nunion() {\n    pot();\n    soil_surface();\n    \n    translate([0, 0, pot_height-2]) {\n        root_ball();\n    }\n    \n    hanging_strings();\n}",
    "renders": true
  },
  {
    "plant": "hoya",
    "openscad_code": "// Hoya Plant - Realistic Style, Medium Complexity\n// Designed for 3D printing with 2mm wall thickness\n\n// Main parameters\n$fn = 24;\nplant_height = 120;\npot_height = 40;\npot_diameter = 60;\nleaf_length = 35;\nleaf_width = 20;\nleaf_thickness = 2;\nstem_diameter = 3;\n\n// Pot module\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_height, d=pot_diameter, center=false);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n        cylinder(h=pot_height-4, d=pot_diameter-4, center=false);\n        \n        // Drainage hole\n        translate([0, 0, 2])\n        cylinder(h=5, d=8, center=false);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, pot_height-2])\n    cylinder(h=4, d=pot_diameter-2, center=false);\n}\n\n// Single leaf module with realistic shape\nmodule leaf() {\n    // Leaf body\n    scale([1, leaf_width/leaf_length, leaf_thickness/leaf_length])\n    sphere(d=leaf_length);\n    \n    // Leaf tip point\n    translate([leaf_length/2, 0, 0])\n    scale([0.3, 0.3, 0.3])\n    sphere(d=leaf_length/3);\n}\n\n// Leaf pair on stem\nmodule leaf_pair(angle) {\n    translate([0, 0, 0])\n    rotate([0, angle, 0])\n    translate([0, -leaf_length/3, 0])\n    leaf();\n    \n    translate([0, 0, 0])\n    rotate([0, angle, 180])\n    translate([0, -leaf_length/3, 0])\n    leaf();\n}\n\n// Stem segment with leaves\nmodule stem_segment(height, leaf_count) {\n    // Main stem\n    cylinder(h=height, d=stem_diameter, center=false);\n    \n    // Leaves along stem\n    for(i = [1:leaf_count]) {\n        translate([0, 0, height * i / (leaf_count + 1)])\n        rotate([0, 0, i * 137.5]) // Golden angle for natural spacing\n        leaf_pair(45);\n    }\n}\n\n// Main vine with branching\nmodule vine(length, segments) {\n    stem_length = length / segments;\n    \n    for(i = [0:segments-1]) {\n        translate([0, 0, i * stem_length])\n        rotate([0, 0, i * 30])\n        stem_segment(stem_length, 2);\n        \n        // Branch off at certain points\n        if(i % 2 == 1 && i < segments-2) {\n            translate([0, 0, i * stem_length + stem_length/2])\n            rotate([0, 45, 45])\n            scale([0.7, 0.7, 0.7])\n            vine(length * 0.6, 3);\n        }\n    }\n}\n\n// Hoya flower cluster (umbel)\nmodule flower_cluster() {\n    // Flower stems\n    for(i = [1:8]) {\n        rotate([0, 0, i * 45])\n        translate([8, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=12, d=1.5, center=false);\n        \n        // Individual flowers (small spheres)\n        rotate([0, 0, i * 45])\n        translate([8, 0, 12])\n        sphere(d=3);\n        \n        // Star-shaped petals\n        for(j = [1:5]) {\n            rotate([0, 0, i * 45])\n            translate([8, 0, 12])\n            rotate([0, 0, j * 72])\n            translate([2, 0, 0])\n            scale([4, 1, 0.5])\n            sphere(d=1);\n        }\n    }\n    \n    // Central cluster stem\n    cylinder(h=8, d=2, center=false);\n}\n\n// Main plant assembly\nunion() {\n    // Pot and soil\n    translate([0, 0, 0])\n    pot();\n    \n    translate([0, 0, 0])\n    color([0.4, 0.3, 0.2])\n    soil();\n    \n    // Main vines emerging from soil\n    translate([0, 0, pot_height])\n    rotate([10, 0, 0])\n    vine(plant_height - pot_height - 20, 5);\n    \n    translate([-5, 5, pot_height])\n    rotate([15, 20, 10])\n    vine(plant_height - pot_height - 30, 4);\n    \n    translate([5, -5, pot_height])\n    rotate([20, -15, -20])\n    vine(plant_height - pot_height - 25, 4);\n    \n    // Flower clusters at vine tips\n    translate([0, 0, plant_height - 10])\n    rotate([0, 0, 0])\n    color([0.9, 0.8, 0.9])\n    flower_cluster();\n    \n    translate([15, 10, plant_height - 15])\n    rotate([0, 0, 45])\n    color([0.9, 0.8, 0.9])\n    scale([0.8, 0.8, 0.8])\n    flower_cluster();\n}",
    "renders": true
  },
  {
    "plant": "wax",
    "openscad_code": "// Wax Plant (Hoya carnosa) - Realistic Style\n// Medium complexity model with 2mm walls for 3D printing\n\n$fn = 30;  // Smooth curves\n\n// Main parameters\npot_diameter = 40;\npot_height = 35;\nstem_thickness = 3;\nleaf_length = 25;\nleaf_width = 15;\nleaf_thickness = 2;\n\n// Pot module\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = pot_height, d1 = pot_diameter, d2 = pot_diameter * 0.8, center = false);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = pot_height - 4, d1 = pot_diameter - 4, d2 = pot_diameter * 0.8 - 4, center = false);\n    }\n    \n    // Base ring\n    translate([0, 0, 0.5])\n        cylinder(h = 2, d = pot_diameter + 2, center = false);\n}\n\n// Soil surface\nmodule soil() {\n    color(\"saddlebrown\")\n    translate([0, 0, pot_height - 2])\n        cylinder(h = 3, d1 = pot_diameter - 4, d2 = pot_diameter * 0.8 - 4, center = false);\n}\n\n// Single leaf module\nmodule leaf(angle = 0, bend = 0) {\n    // Leaf blade\n    translate([0, 0, leaf_length / 2])\n    rotate([0, bend, angle])\n    scale([1, leaf_width / leaf_length, 1])\n    difference() {\n        sphere(d = leaf_length);\n        \n        // Remove bottom half\n        translate([0, 0, -leaf_length / 2])\n            cube([leaf_length * 2, leaf_width * 2, leaf_length], center = true);\n        \n        // Thicken edges\n        translate([0, 0, -leaf_thickness / 2])\n            cube([leaf_length * 0.9, leaf_width * 0.9, leaf_thickness], center = true);\n    }\n    \n    // Petiole (leaf stem)\n    translate([0, 0, 0])\n    rotate([0, bend, angle])\n        cylinder(h = 8, d1 = stem_thickness, d2 = stem_thickness * 0.7);\n}\n\n// Stem segment\nmodule stem_segment(length = 20, angle = 0) {\n    color(\"darkgreen\")\n    rotate([0, 0, angle])\n        cylinder(h = length, d = stem_thickness, center = false);\n}\n\n// Node with leaves\nmodule node(stem_angle = 0, leaf_pairs = 2) {\n    // Stem at this node\n    stem_segment(15, stem_angle);\n    \n    // Leaves\n    for (i = [0:leaf_pairs - 1]) {\n        rotate([0, 0, i * 180 / leaf_pairs])\n        translate([0, 0, 7])\n        union() {\n            leaf(45, 15);\n            leaf(-45, 15);\n        }\n    }\n}\n\n// Main plant structure\nmodule plant() {\n    color(\"darkgreen\")\n    translate([0, 0, pot_height])\n    union() {\n        // Central stem\n        for (i = [0:4]) {\n            translate([0, 0, i * 20])\n            rotate([0, 0, i * 30])\n            node(i * 30);\n        }\n        \n        // Branching stems\n        translate([0, 0, 20])\n        rotate([0, 0, 45])\n        for (j = [0:2]) {\n            translate([0, 0, j * 15])\n            rotate([0, 0, j * 25])\n            node(j * 25, 1);\n        }\n        \n        translate([0, 0, 40])\n        rotate([0, 0, -60])\n        for (k = [0:2]) {\n            translate([0, 0, k * 12])\n            rotate([0, 0, k * -30])\n            node(k * -30, 1);\n        }\n    }\n}\n\n// Assembly\npot();\nsoil();\nplant();",
    "renders": true
  },
  {
    "plant": "basket",
    "openscad_code": "// Basket Plant - Realistic Style, Medium Complexity\n// Overall dimensions: ~100mm tall x ~80mm diameter\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main module\nmodule basket_plant() {\n    // Basket base structure\n    basket();\n    \n    // Soil inside basket\n    translate([0, 0, 30]) soil();\n    \n    // Plant components\n    translate([0, 0, 35]) plant_stem();\n    \n    // Generate multiple leaves\n    for(i = [0:5]) {\n        rotate([0, 0, i*60]) \n            translate([15, 0, 35]) \n                rotate([0, 30 + i*10, 0]) \n                    leaf(i*5);\n    }\n}\n\n// Basket module - woven style with 2mm walls\nmodule basket() {\n    difference() {\n        // Outer basket shell\n        cylinder(h = 35, d1 = 80, d2 = 70);\n        \n        // Hollow interior\n        cylinder(h = 33, d1 = 76, d2 = 66);\n    }\n    \n    // Basket rim\n    translate([0, 0, 33]) \n        difference() {\n            cylinder(h = 4, d = 82);\n            cylinder(h = 4, d = 78);\n        }\n    \n    // Woven texture rings\n    for(i = [5:5:30]) {\n        translate([0, 0, i]) \n            difference() {\n                cylinder(h = 1.5, d1 = 79 - i*0.2, d2 = 79 - i*0.2);\n                cylinder(h = 1.5, d1 = 77 - i*0.2, d2 = 77 - i*0.2);\n            }\n    }\n    \n    // Base reinforcement ring\n    translate([0, 0, 0.5]) \n        difference() {\n            cylinder(h = 2, d = 78);\n            cylinder(h = 2, d = 74);\n        }\n}\n\n// Soil module - slightly mounded\nmodule soil() {\n    scale([1, 1, 0.3]) \n        sphere(d = 70);\n}\n\n// Plant stem module\nmodule plant_stem() {\n    // Central stem\n    cylinder(h = 25, d = 5);\n    \n    // Branching structures\n    for(i = [0:2]) {\n        rotate([0, 0, i*120]) \n            translate([0, 0, 10 + i*5]) \n                rotate([30, 0, 0]) \n                    cylinder(h = 15, d1 = 3, d2 = 2);\n    }\n}\n\n// Leaf module - realistic shape with thickness\nmodule leaf(angle) {\n    // Leaf blade\n    scale([1, 0.3, 0.05]) \n        sphere(d = 40);\n    \n    // Leaf vein\n    translate([0, 0, 0.5]) \n        scale([0.9, 0.05, 0.05]) \n            sphere(d = 35);\n    \n    // Stem connection\n    translate([-20, 0, 0]) \n        rotate([0, 0, angle]) \n            cylinder(h = 5, d1 = 2, d2 = 1);\n}\n\n// Generate the complete model\nbasket_plant();",
    "renders": true
  },
  {
    "plant": "chain",
    "openscad_code": "// Chain Plant (Tradescantia) in realistic style - medium complexity\n// Overall dimensions: ~100mm length, ~60mm width\n\n$fn = 30;\n\nmodule leaf(length, width, thickness) {\n    // Single leaf with realistic tapered shape\n    translate([0, 0, thickness/2])\n    scale([1, 0.3, 0.1])\n    sphere(d = width);\n    \n    // Leaf tip extension\n    translate([width/2, 0, 0])\n    scale([1.5, 0.2, 0.08])\n    sphere(d = width/2);\n}\n\nmodule node() {\n    // Node where leaves connect - 4mm diameter\n    sphere(d = 4);\n}\n\nmodule segment(length) {\n    // Single segment between nodes\n    hull() {\n        translate([0, 0, 0]) sphere(d = 2);\n        translate([length, 0, 0]) sphere(d = 2);\n    }\n}\n\nmodule leaf_pair(angle, length, width, thickness) {\n    // Opposite leaf pair at node\n    rotate([0, 0, angle])\n    union() {\n        // Top leaf\n        translate([0, 2, 0])\n        rotate([0, 0, -30])\n        leaf(length, width, thickness);\n        \n        // Bottom leaf\n        translate([0, -2, 0])\n        rotate([0, 0, 30])\n        mirror([0, 1, 0])\n        leaf(length, width, thickness);\n    }\n}\n\nmodule chain_plant() {\n    // Main stem with alternating nodes and leaves\n    stem_length = 100;\n    segment_length = 8;\n    num_segments = stem_length / segment_length;\n    \n    for (i = [0:num_segments-1]) {\n        // Stem segment\n        translate([i * segment_length, 0, 0])\n        segment(segment_length);\n        \n        // Node at each segment\n        translate([i * segment_length, 0, 0])\n        node();\n        \n        // Leaves at every other node\n        if (i % 2 == 0) {\n            translate([i * segment_length, 0, 0])\n            leaf_pair(i * 45, 15, 8, 1);\n        }\n    }\n    \n    // Root system at base\n    translate([-5, 0, -2])\n    union() {\n        cylinder(h = 5, d1 = 3, d2 = 1);\n        for (angle = [0:45:315]) {\n            rotate([90, 0, angle])\n            translate([0, 0, 2.5])\n            cylinder(h = 8, d1 = 1, d2 = 0.5);\n        }\n    }\n}\n\n// Base pot with drainage\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = 20, d = 40);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n        cylinder(h = 18, d = 36);\n        \n        // Drainage holes\n        for (angle = [0:60:300]) {\n            rotate([0, 0, angle])\n            translate([15, 0, 1])\n            cylinder(h = 3, d = 3);\n        }\n    }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, 2])\n    cylinder(h = 3, d = 36);\n}\n\n// Assembly\nunion() {\n    // Pot\n    translate([0, 0, 0])\n    pot();\n    \n    // Soil\n    translate([0, 0, 0])\n    soil();\n    \n    // Plant emerging from soil\n    translate([0, 0, 5])\n    rotate([0, -20, 0])\n    chain_plant();\n}",
    "renders": true
  },
  {
    "plant": "hearts",
    "openscad_code": "// Hearts Plant - Realistic Style - Medium Complexity\n// 3D printable with 2mm walls, ~100mm height\n\n// Parameters\nstem_d = 6;\nstem_h = 40;\nleaf_w = 20;\nleaf_h = 15;\nleaf_t = 2;\npot_r = 25;\npot_h = 25;\nsoil_h = 10;\nwall_t = 2;\n\nmodule stem() {\n    // Main stem\n    cylinder(d=stem_d, h=stem_h, $fn=20);\n    \n    // Secondary stem\n    translate([5, 0, stem_h-10])\n        rotate([0, 20, 0])\n        cylinder(d=stem_d*0.7, h=20, $fn=16);\n        \n    // Third stem\n    translate([-4, 3, stem_h-15])\n        rotate([0, -25, 30])\n        cylinder(d=stem_d*0.6, h=15, $fn=16);\n}\n\nmodule heart_leaf(x=0, y=0, z=0, rot=0, scale=1) {\n    translate([x, y, z])\n    rotate([0, 0, rot])\n    scale(scale)\n    difference() {\n        // Main heart shape\n        union() {\n            // Left lobe\n            translate([-leaf_w/2, 0, 0])\n                sphere(d=leaf_w, $fn=32);\n            // Right lobe\n            translate([leaf_w/2, 0, 0])\n                sphere(d=leaf_w, $fn=32);\n            // Point\n            translate([0, -leaf_h/2, 0])\n                cube([leaf_w*1.2, leaf_h, leaf_t*2], center=true);\n        }\n        \n        // Carve out center\n        scale([0.7, 0.7, 1])\n            translate([0, 0, -leaf_t])\n            cube([leaf_w*1.5, leaf_h*1.5, leaf_t*3], center=true);\n            \n        // Vein groove\n        translate([0, leaf_h/4, -leaf_t/2])\n            rotate([90, 0, 0])\n            cylinder(d=1, h=leaf_t*2, $fn=8);\n    }\n}\n\nmodule leaves() {\n    // Main leaves on stems\n    translate([0, 0, stem_h])\n        rotate([90, 0, 0])\n        heart_leaf(0, 0, 0, 0, 1.2);\n        \n    translate([5, 0, stem_h-5])\n        rotate([70, 20, 45])\n        heart_leaf(0, 0, 0, 0, 0.8);\n        \n    translate([-4, 3, stem_h-8])\n        rotate([80, -25, -30])\n        heart_leaf(0, 0, 0, 0, 0.7);\n        \n    // Lower leaves\n    translate([0, 0, stem_h/2])\n        rotate([60, 0, 180])\n        heart_leaf(0, 0, 0, 0, 0.6);\n}\n\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(r=pot_r, h=pot_h, $fn=60);\n        \n        // Inner cavity\n        translate([0, 0, wall_t])\n            cylinder(r=pot_r-wall_t, h=pot_h, $fn=60);\n            \n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(r=3, h=wall_t+2, $fn=16);\n    }\n    \n    // Soil surface\n    translate([0, 0, pot_h-soil_h])\n        cylinder(r=pot_r-wall_t, h=soil_h, $fn=60);\n}\n\nmodule plant() {\n    pot();\n    \n    translate([0, 0, pot_h-soil_h+wall_t]) {\n        stem();\n        leaves();\n    }\n}\n\n// Render the plant\nplant();",
    "renders": true
  },
  {
    "plant": "rosary",
    "openscad_code": "// Rosary Plant - 3D Printable Model\n// Medium complexity realistic style\n\n// Parameters\n$fn = 32;\nbead_diameter = 8;\nstem_thickness = 2;\nleaf_length = 35;\nleaf_width = 12;\nplant_height = 120;\npot_height = 25;\npot_diameter = 40;\n\nmodule bead(d=bead_diameter) {\n    sphere(d=d);\n}\n\nmodule stem_segment(length, angle=0) {\n    rotate([0, 0, angle])\n        cylinder(h=length, d=stem_thickness, center=true);\n}\n\nmodule leaf(length=leaf_length, width=leaf_width) {\n    // Main leaf blade\n    difference() {\n        scale([1, 0.5, 0.1])\n            sphere(d=width);\n        \n        // Leaf tip\n        translate([width/2, 0, 0])\n            sphere(d=width/2);\n    }\n    \n    // Leaf veins\n    for(i = [-0.3:0.2:0.3]) {\n        translate([i*width/2, -length/2, 0.5])\n            scale([0.1, 1, 0.1])\n            sphere(d=length);\n    }\n    \n    // Stem connection\n    translate([0, -length/2, 0])\n        cylinder(h=3, d=2);\n}\n\nmodule rosary_chain() {\n    // Main stem/trunk\n    color(\"darkgreen\")\n    difference() {\n        cylinder(h=plant_height-pot_height, d=6);\n        // Hollow center for printing\n        translate([0, 0, -1])\n            cylinder(h=plant_height-pot_height+2, d=2);\n    }\n    \n    // Bead decorations along stem\n    for(i = [1:5:plant_height-pot_height-10]) {\n        translate([0, 0, i])\n            color(\"gold\")\n            bead();\n    }\n    \n    // Side branches with leaves\n    for(i = [20:15:plant_height-pot_height-20]) {\n        translate([0, 0, i])\n        for(j = [0:60:300]) {\n            rotate([0, 0, j])\n            translate([3, 0, 0])\n            rotate([0, 90, 0])\n            stem_segment(15, 30);\n            \n            // Leaves at branch ends\n            translate([15*cos(30), 15*sin(30), 0])\n            rotate([0, 0, j-90])\n            rotate([45, 0, 0])\n            leaf();\n        }\n    }\n}\n\nmodule pot() {\n    color(\"brown\")\n    difference() {\n        cylinder(h=pot_height, d1=pot_diameter, d2=35);\n        // Hollow for printing\n        translate([0, 0, -1])\n            cylinder(h=pot_height+2, d1=pot_diameter-4, d2=33);\n        \n        // Drainage hole\n        translate([0, 0, pot_height/2])\n            cylinder(h=pot_height, d=4);\n    }\n    \n    // Decorative rim\n    translate([0, 0, pot_height])\n    color(\"tan\")\n    cylinder(h=3, d=pot_diameter+2);\n}\n\n// Assembly\ntranslate([0, 0, pot_height])\nrosary_chain();\n\ntranslate([0, 0, 0])\npot();\n\n// Soil surface\ntranslate([0, 0, pot_height-2])\ncolor(\"darkbrown\")\ncylinder(h=2, d=pot_diameter-2);",
    "renders": true
  },
  {
    "plant": "glory",
    "openscad_code": "// Morning Glory Plant - Realistic Style\n\n// Parameters\nflower_diameter = 35;\nstem_height = 100;\nleaf_length = 25;\nleaf_width = 20;\npot_diameter = 50;\npot_height = 40;\nwall_thickness = 2;\n\n// Main plant assembly\nmodule morning_glory_plant() {\n    union() {\n        // Pot\n        translate([0, 0, 0])\n            pot();\n        \n        // Stem\n        translate([0, 0, pot_height])\n            stem();\n        \n        // Leaves along stem\n        for(i = [1:4]) {\n            rotate([0, 0, i*90])\n                translate([8, 0, pot_height + i*20])\n                    leaf();\n        }\n        \n        // Flower at top\n        translate([0, 0, pot_height + stem_height])\n            flower();\n        \n        // Buds\n        translate([5, 5, pot_height + 70])\n            bud();\n        translate([-5, -5, pot_height + 50])\n            bud();\n    }\n}\n\n// Pot with drainage hole\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_height, d=pot_diameter, $fn=32);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n            cylinder(h=pot_height-wall_thickness, d=pot_diameter-2*wall_thickness, $fn=32);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h=wall_thickness+2, d=5, $fn=16);\n    }\n}\n\n// Main stem with slight taper\nmodule stem() {\n    for(i = [0:stem_height/5-1]) {\n        h = 5;\n        d1 = 6 - i*0.3;\n        d2 = 6 - (i+1)*0.3;\n        translate([0, 0, i*5])\n            cylinder(h1=h, h2=h, d1=d1, d2=d2, $fn=12);\n    }\n}\n\n// Morning glory flower with petals\nmodule flower() {\n    // Flower base\n    difference() {\n        sphere(d=flower_diameter, $fn=32);\n        translate([0, 0, -flower_diameter/2-1])\n            cube([flower_diameter+2, flower_diameter+2, flower_diameter], center=true);\n    }\n    \n    // Petals\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n            translate([0, flower_diameter/2-5, 0])\n                petal();\n    }\n    \n    // Flower center\n    translate([0, 0, flower_diameter/2-3])\n        cylinder(h=5, d=8, $fn=20);\n}\n\n// Individual petal\nmodule petal() {\n    scale([0.8, 1.2, 0.3])\n        sphere(d=12, $fn=16);\n}\n\n// Heart-shaped leaf\nmodule leaf() {\n    translate([leaf_length/2, 0, 0])\n        rotate([90, 0, 90])\n            scale([leaf_length, leaf_width, wall_thickness])\n                difference() {\n                    // Basic leaf shape\n                    sphere(d=20, $fn=32);\n                    \n                    // Cut to heart shape\n                    translate([5, 0, 0])\n                        cube([20, 30, 20], center=true);\n                    \n                    // Leaf notch\n                    translate([10, 0, 0])\n                        rotate([0, 0, 45])\n                            cube([8, 8, 20], center=true);\n                    translate([10, 0, 0])\n                        rotate([0, 0, -45])\n                            cube([8, 8, 20], center=true);\n                }\n}\n\n// Small bud\nmodule bud() {\n    scale([0.5, 0.5, 0.7])\n        sphere(d=15, $fn=16);\n    translate([0, 0, 5])\n        cylinder(h=3, d=5, $fn=12);\n}\n\n// Render the plant\nmorning_glory_plant();",
    "renders": true
  },
  {
    "plant": "arrowhead",
    "openscad_code": "// Arrowhead Plant (Syngonium podophyllum) - Realistic Style, Medium Complexity\n\n// Overall dimensions: ~120mm tall, ~90mm wide\n\nmodule arrowhead_plant() {\n    union() {\n        // Pot\n        translate([0, 0, -15]) {\n            difference() {\n                cylinder(h = 25, r1 = 30, r2 = 25, $fn = 48);\n                translate([0, 0, 2]) {\n                    cylinder(h = 25, r1 = 28, r2 = 23, $fn = 48);\n                }\n            }\n        }\n        \n        // Main stem\n        translate([0, 0, 10]) {\n            rotate([80, 0, 0]) {\n                cylinder(h = 50, r = 3, $fn = 12);\n                \n                // First leaf pair\n                translate([0, 25, 0]) {\n                    rotate([0, 90, 0]) {\n                        arrowhead_leaf(35);\n                    }\n                    \n                    rotate([0, 90, 180]) {\n                        arrowhead_leaf(30);\n                    }\n                }\n                \n                // Second leaf pair\n                translate([0, 40, 0]) {\n                    rotate([0, 90, 30]) {\n                        arrowhead_leaf(40);\n                    }\n                    \n                    rotate([0, 90, 210]) {\n                        arrowhead_leaf(32);\n                    }\n                }\n            }\n            \n            // Side stem\n            translate([0, 0, 5]) {\n                rotate([70, 0, 45]) {\n                    cylinder(h = 35, r = 2.5, $fn = 12);\n                    \n                    translate([0, 20, 0]) {\n                        rotate([0, 90, 15]) {\n                            arrowhead_leaf(28);\n                        }\n                    }\n                    \n                    translate([0, 28, 0]) {\n                        rotate([0, 90, 195]) {\n                            arrowhead_leaf(25);\n                        }\n                    }\n                }\n            }\n            \n            // Small aerial roots\n            for(i = [0:2]) {\n                translate([0, 15 + i * 10, 0]) {\n                    rotate([90 + i * 10, 0, 0]) {\n                        cylinder(h = 8 + i * 3, r = 1.2, $fn = 8);\n                    }\n                }\n            }\n        }\n        \n        // Soil surface\n        translate([0, 0, 9]) {\n            difference() {\n                cylinder(h = 2, r = 28, $fn = 48);\n                translate([0, 0, -1]) {\n                    cylinder(h = 4, r = 26, $fn = 48);\n                }\n            }\n        }\n    }\n}\n\nmodule arrowhead_leaf(size) {\n    // Size parameter scales the leaf\n    \n    // Main leaf blade\n    scale([size/40, size/40, 1]) {\n        union() {\n            // Central lobe\n            translate([0, 0, 0]) {\n                rotate([90, 0, 0]) {\n                    linear_extrude(height = 2, convexity = 10) {\n                        polygon(points = [\n                            [0, 0],\n                            [15, 0],\n                            [25, 5],\n                            [30, 15],\n                            [28, 25],\n                            [20, 30],\n                            [10, 32],\n                            [0, 33],\n                            [-10, 32],\n                            [-20, 30],\n                            [-28, 25],\n                            [-30, 15],\n                            [-25, 5],\n                            [-15, 0]\n                        ]);\n                    }\n                }\n            }\n            \n            // Left lobe\n            translate([-15, 0, 0]) {\n                rotate([90, 0, -30]) {\n                    linear_extrude(height = 1.5, convexity = 10) {\n                        polygon(points = [\n                            [0, 0],\n                            [8, 0],\n                            [12, 3],\n                            [10, 8],\n                            [5, 10],\n                            [0, 10]\n                        ]);\n                    }\n                }\n            }\n            \n            // Right lobe\n            translate([15, 0, 0]) {\n                rotate([90, 0, 30]) {\n                    mirror([1, 0, 0]) {\n                        linear_extrude(height = 1.5, convexity = 10) {\n                            polygon(points = [\n                                [0, 0],\n                                [8, 0],\n                                [12, 3],\n                                [10, 8],\n                                [5, 10],\n                                [0, 10]\n                            ]);\n                        }\n                    }\n                }\n            }\n            \n            // Leaf stem (petiole)\n            translate([0, 0, -1]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 15, r = 1.5, $fn = 8);\n                }\n            }\n            \n            // Veins\n            for(angle = [0:30:150]) {\n                translate([0, 0, 1.1]) {\n                    rotate([90, 0, angle]) {\n                        scale([0.3, 0.1, 1]) {\n                            cylinder(h = size * 0.8, r = 0.5, $fn = 4);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the plant\narrowhead_plant();",
    "renders": true
  },
  {
    "plant": "nerve",
    "openscad_code": "// Nerve Plant (Fittonia albivenis) - Realistic Style, Medium Complexity\n// Overall size: ~70mm wide x 60mm deep x 50mm tall\n\n// Main pot\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = 25, d1 = 45, d2 = 40, $fn = 48);\n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = 23, d1 = 41, d2 = 36, $fn = 48);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, 24])\n        cylinder(h = 3, d = 39, $fn = 48);\n}\n\n// Stem structure\nmodule stem(h, angle, rot) {\n    translate([0, 0, 27])\n    rotate([0, angle, rot])\n    cylinder(h = h, d = 2.2, $fn = 12);\n}\n\n// Leaf with characteristic nerve pattern\nmodule leaf(size, angle, rot, tilt) {\n    translate([0, 0, 27])\n    rotate([tilt, angle, rot])\n    translate([0, 0, size * 0.8])\n    union() {\n        // Main leaf blade\n        scale([1, 1.7, 0.3])\n            sphere(d = size, $fn = 24);\n        \n        // Central vein\n        color(\"darkgreen\")\n        translate([0, 0, 0.4])\n        scale([0.1, 0.9, 0.1])\n            cube([size * 0.8, size * 1.5, size * 0.3], center = true);\n        \n        // Lateral veins (3 per side)\n        for (i = [1:3]) {\n            color(\"darkgreen\")\n            rotate([0, 0, i * 20])\n            translate([size * 0.3, 0, 0.4])\n            scale([0.05, 0.6, 0.05])\n                cube([size * 0.8, size * 1.2, size * 0.3], center = true);\n            \n            color(\"darkgreen\")\n            rotate([0, 0, -i * 20])\n            translate([size * 0.3, 0, 0.4])\n            scale([0.05, 0.6, 0.05])\n                cube([size * 0.8, size * 1.2, size * 0.3], center = true);\n        }\n    }\n}\n\n// Generate leaf cluster\nmodule leaf_cluster(x, y, base_angle) {\n    translate([x, y, 0])\n    for (i = [0:5]) {\n        leaf(12 + (i % 3) * 2, base_angle + i * 60, i * 40, 65 + (i % 2) * 10);\n    }\n}\n\n// Generate stems for leaf cluster\nmodule stem_cluster(x, y) {\n    translate([x, y, 0])\n    for (i = [0:5]) {\n        stem(8 + (i % 3) * 2, 65 + (i % 2) * 10, i * 40);\n    }\n}\n\n// Main assembly\nunion() {\n    // Brown pot\n    color(\"saddlebrown\")\n    pot();\n    \n    // Dark soil\n    color(\"#3a2a1a\")\n    soil();\n    \n    // Generate 3 clusters of leaves\n    stem_cluster(-8, 5);\n    leaf_cluster(-8, 5, 0);\n    \n    stem_cluster(8, -3);\n    leaf_cluster(8, -3, 30);\n    \n    stem_cluster(0, -8);\n    leaf_cluster(0, -8, 60);\n    \n    // Central larger leaves\n    stem(12, 90, 0);\n    leaf(16, 90, 0, 80);\n    stem(10, 85, 180);\n    leaf(14, 85, 180, 75);\n}",
    "renders": true
  },
  {
    "plant": "prayer",
    "openscad_code": "// Prayer Plant (Maranta leuconeura) - realistic medium-complexity model\n// Size: ~110 mm tall, for 3D printing\n\n// Parameters\nstem_d = 4;           // main stem diameter\nleaf_L = 35;          // leaf length\nleaf_W = 20;          // max leaf width\npot_H = 25;           // pot height\npot_R = 35;           // pot radius\nwall = 2;             // print-safe wall thickness\n$fn = 36;             // cylinder/curve resolution\n\n// Pot\nmodule pot() {\n    difference() {\n        cylinder(h = pot_H, r1 = pot_R, r2 = pot_R * 0.9, center = false);\n        translate([0, 0, wall])\n            cylinder(h = pot_H - wall, r1 = pot_R - wall, r2 = pot_R * 0.9 - wall);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, pot_H * 0.9])\n        color(\"brown\")\n        cylinder(h = 4, r1 = pot_R - wall, r2 = (pot_R - wall) * 0.95);\n}\n\n// Central stem\nmodule stem(h = 60) {\n    color(\"darkgreen\")\n    cylinder(h = h, d = stem_d);\n}\n\n// Single leaf with realistic venation\nmodule leaf() {\n    // Main leaf blade\n    translate([0, 0, -1])\n        scale([leaf_L / 2, leaf_W / 2, 1])\n        sphere(d = 2);\n\n    // Vein ridges (raised)\n    color(\"green\")\n    for (v = [0.3 : 0.2 : 0.9]) {\n        translate([0, 0, 0.2])\n            rotate([0, 0, 15])\n            hull() {\n                translate([-leaf_L * v * 0.5, 0, 0])\n                    sphere(d = 0.8);\n                translate([leaf_L * v * 0.5, 0, 0])\n                    sphere(d = 0.8);\n            }\n    }\n    // Side veins\n    for (a = [-30 : 20 : 30]) {\n        translate([0, 0, 0.2])\n            rotate([0, 0, a])\n            hull() {\n                translate([0, 0, 0])\n                    sphere(d = 0.6);\n                translate([leaf_L * 0.4, 0, 0])\n                    sphere(d = 0.6);\n            }\n    }\n}\n\n// Petiole (leaf stalk)\nmodule petiole(len = 20) {\n    color(\"darkgreen\")\n    rotate([90, 0, 0])\n        cylinder(h = len, d = 1.5);\n}\n\n// Single leaf assembly\nmodule leaf_assembly(angle = 0, up = 0) {\n    translate([0, 0, up])\n        rotate([0, 0, angle])\n        translate([0, 0, 5])\n            union() {\n                petiole();\n                translate([0, 0, 20])\n                    rotate([20, 0, 0])\n                        leaf();\n            }\n}\n\n// Cluster of leaves around one node\nmodule leaf_cluster(height, count = 5) {\n    translate([0, 0, height])\n        for (i = [0 : count - 1])\n            rotate([0, 0, i * 360 / count])\n                translate([stem_d / 2, 0, 0])\n                    leaf_assembly(angle = i * 15);\n}\n\n// Main plant\nmodule prayer_plant() {\n    pot();\n    soil();\n    translate([0, 0, pot_H * 0.9])\n        union() {\n            stem(h = 55);\n            leaf_cluster(10, 3);\n            leaf_cluster(30, 5);\n            leaf_cluster(50, 4);\n        }\n}\n\n// Render\nprayer_plant();",
    "renders": true
  },
  {
    "plant": "zebra",
    "openscad_code": "// Zebra Plant (Aphelandra squarrosa) - Realistic Style, Medium Complexity\n// Overall height ~100mm, 3D-printable with 2mm walls\n\n// Parameters\nstem_h = 50;           // Main stem height\nstem_r = 3;            // Main stem radius\nleaf_w = 20;           // Leaf width\nleaf_l = 40;           // Leaf length\nleaf_t = 2;            // Leaf thickness\npot_h = 25;            // Pot height\npot_r = 25;            // Pot radius\nstripes = 8;           // Number of white stripes per leaf\n\n// Module for a single leaf with zebra stripes\nmodule striped_leaf() {\n    difference() {\n        // Main leaf body\n        scale([1, 0.3, 1])\n        rotate([0, 90, 0])\n        cylinder(h=leaf_l, r=leaf_w/2, $fn=50);\n        \n        // White stripes (cutouts)\n        for(i=[0:stripes-1]) {\n            translate([leaf_l/2 - (i+0.5)*leaf_l/stripes, 0, leaf_t/2])\n            rotate([90, 0, 0])\n            cube([leaf_l/stripes*0.6, leaf_w*0.8, leaf_t*2], center=true);\n        }\n    }\n}\n\n// Module for stem with visible segments\nmodule stem_segment(h, r) {\n    union() {\n        // Main cylinder\n        cylinder(h=h, r=r, $fn=20);\n        \n        // Segment rings\n        for(i=[0:h/5-1]) {\n            translate([0, 0, i*5])\n            cylinder(h=1, r=r*1.2, $fn=20);\n        }\n    }\n}\n\n// Module for pot with drainage hole\nmodule pot() {\n    difference() {\n        union() {\n            // Outer pot\n            cylinder(h=pot_h, r=pot_r, $fn=50);\n            \n            // Rim\n            translate([0, 0, pot_h])\n            cylinder(h=3, r=pot_r+2, $fn=50);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1])\n        cylinder(h=pot_h+2, r=pot_r-3, $fn=50);\n        \n        // Drainage hole\n        translate([pot_r/2, 0, -1])\n        cylinder(h=pot_h+2, r=2, $fn=20);\n    }\n}\n\n// Main assembly\nunion() {\n    // Pot\n    pot();\n    \n    // Main stem\n    translate([0, 0, pot_h])\n    stem_segment(stem_h, stem_r);\n    \n    // Leaves arranged spirally up the stem\n    for(i=[0:5]) {\n        angle = i*60;\n        height = 10 + i*8;\n        \n        translate([0, 0, pot_h + height])\n        rotate([0, 0, angle])\n        translate([stem_r+2, 0, 0])\n        rotate([0, -30-i*5, 0])\n        striped_leaf();\n    }\n    \n    // Top cluster of smaller leaves\n    for(i=[0:3]) {\n        a = i*120;\n        translate([0, 0, pot_h + stem_h - 5])\n        rotate([0, 0, a])\n        translate([stem_r+1, 0, 0])\n        rotate([0, -60, 0])\n        scale(0.7)\n        striped_leaf();\n    }\n}",
    "renders": true
  },
  {
    "plant": "rattlesnake",
    "openscad_code": "// Rattlesnake Plant (Calathea lancifolia)\n// Medium complexity realistic 3D printable model\n// Total height ~110 mm\n\n// Stem module - main stalk\nmodule stem(h, r, angle) {\n    translate([0, 0, 0])\n    rotate([0, angle, 0])\n    cylinder(h=h, r1=r, r2=r*0.8, $fn=16);\n}\n\n// Leaf module - long slender with wavy edges\nmodule leaf(length, width, thickness) {\n    // Main leaf body - elongated ellipse\n    translate([0, 0, -thickness/2])\n    scale([length, width, thickness])\n    sphere(1, $fn=32);\n    \n    // Add leaf veins\n    for(i = [-0.3:0.15:0.3]) {\n        translate([i * length, 0, -thickness/2 + 0.1])\n        scale([length*0.8, 0.5, 0.2])\n        sphere(1, $fn=8);\n    }\n}\n\n// Petiole (leaf stem)\nmodule petiole(length, angle) {\n    rotate([0, angle, 0])\n    cylinder(h=length, r1=1.5, r2=1.2, $fn=12);\n}\n\n// Assembly of leaf with petiole\nmodule leaf_assembly(leaf_len, leaf_wid, pet_len, rot_z, rot_y) {\n    translate([0, 0, 10]) {\n        rotate([0, 0, rot_z]) {\n            petiole(pet_len, rot_y);\n            translate([0, pet_len * sin(rot_y), pet_len * cos(rot_y)])\n            rotate([0, 90 - rot_y, 0])\n            leaf(leaf_len, leaf_wid, 1.5);\n        }\n    }\n}\n\n// Pot module\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=25, r1=30, r2=25, $fn=32);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n        cylinder(h=23, r1=27, r2=22, $fn=32);\n    }\n    \n    // Drainage hole\n    translate([0, 0, -1])\n    cylinder(h=3, r=3, $fn=16);\n}\n\n// Base soil\nmodule soil() {\n    translate([0, 0, 23])\n    cylinder(h=5, r1=27, r2=22, $fn=32);\n}\n\n// Main plant structure\nmodule plant() {\n    pot();\n    \n    translate([0, 0, 25])\n    soil();\n    \n    // Central stems\n    for(i = [0:60:300]) {\n        rotate([0, 0, i])\n        translate([8, 0, 24])\n        stem(15, 2.5, 10);\n    }\n    \n    // Leaf arrangements\n    // Inner leaves - shorter\n    leaf_assembly(35, 8, 12, 0, 30);\n    leaf_assembly(32, 7, 11, 45, 35);\n    leaf_assembly(34, 7.5, 12, 90, 25);\n    leaf_assembly(33, 7, 10.5, 135, 40);\n    \n    // Middle leaves - medium\n    leaf_assembly(40, 9, 14, 180, 20);\n    leaf_assembly(38, 8.5, 13, 225, 30);\n    leaf_assembly(42, 9, 15, 270, 25);\n    leaf_assembly(39, 8.5, 13.5, 315, 35);\n    \n    // Outer leaves - longest\n    leaf_assembly(45, 10, 16, 22.5, 15);\n    leaf_assembly(43, 9.5, 15, 67.5, 20);\n    leaf_assembly(46, 10, 16.5, 112.5, 18);\n    leaf_assembly(44, 9.5, 15.5, 157.5, 22);\n    leaf_assembly(47, 10.5, 17, 202.5, 16);\n    leaf_assembly(45, 10, 16, 247.5, 21);\n    leaf_assembly(48, 11, 17.5, 292.5, 19);\n    leaf_assembly(46, 10.5, 16.5, 337.5, 23);\n}\n\n// Render the complete plant\nplant();",
    "renders": true
  },
  {
    "plant": "snake",
    "openscad_code": "// Snake Plant (Sansevieria trifasciata) - Realistic Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n// Dimensions: ~120mm height, 80mm width\n\n// Parameters\nwall_thickness = 2;          // 3D printable wall thickness\npot_height = 25;\npot_radius = 35;\nsoil_height = 10;\nleaf_base_width = 12;\nleaf_tip_width = 6;\nleaf_thickness = 3;\nnum_leaves = 7;\n\n// Pot module\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_height, r=pot_radius, $fn=60);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n            cylinder(h=pot_height+2, r=pot_radius-wall_thickness, $fn=60);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h=2, r=3, $fn=20);\n    }\n    \n    // Rim detail\n    translate([0, 0, pot_height])\n        difference() {\n            cylinder(h=3, r=pot_radius+1, $fn=60);\n            cylinder(h=4, r=pot_radius-1, $fn=60);\n        }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, pot_height-soil_height])\n        difference() {\n            cylinder(h=soil_height+1, r=pot_radius-3, $fn=50);\n            translate([0, 0, -1])\n                cylinder(h=soil_height+2, r=pot_radius-5, $fn=50);\n        }\n}\n\n// Individual leaf module with realistic curves\nmodule leaf(height, angle, twist, x_pos, y_pos, scale_factor) {\n    // Calculate width taper along height\n    hull() {\n        // Base of leaf\n        translate([x_pos, y_pos, pot_height-soil_height+2])\n            rotate([0, angle, twist])\n                scale([1*scale_factor, 1*scale_factor, 1])\n                    cube([leaf_base_width*scale_factor, leaf_thickness, 2], center=true);\n        \n        // Tip of leaf\n        translate([x_pos + sin(twist)*height*0.3, \n                   y_pos + cos(twist)*height*0.3, \n                   pot_height-soil_height+height])\n            rotate([0, angle, twist])\n                scale([0.5*scale_factor, 0.5*scale_factor, 1])\n                    cube([leaf_tip_width*scale_factor, leaf_thickness*0.7, 2], center=true);\n    }\n    \n    // Leaf surface details - subtle ridges\n    for(i = [0:2]) {\n        rotate([0, angle, twist])\n            translate([x_pos + sin(twist)*i*height/3, \n                       y_pos + cos(twist)*i*height/3, \n                       pot_height-soil_height+2+i*height/3])\n                scale([1-i*0.15, 1-i*0.15, 1])\n                    cube([leaf_base_width*scale_factor*0.8, leaf_thickness*0.3, height/3], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Pot and soil\n    pot();\n    color(\"saddlebrown\")\n    soil();\n    \n    // Generate leaves with realistic arrangement\n    for(i = [0:num_leaves-1]) {\n        angle = 75 + (i%2)*10;  // Alternating angles\n        twist = (i*45) + (i*15);  // Spiral arrangement\n        x_pos = (i%3-1)*8;  // Staggered positions\n        y_pos = (floor(i/3)-1)*8;\n        scale_factor = 0.8 + (i%3)*0.15;  // Varying sizes\n        \n        // Main leaf\n        color(\"darkgreen\")\n        leaf(80+rand(i)*20, angle, twist, x_pos, y_pos, scale_factor);\n        \n        // Secondary smaller leaf\n        if(i%2 == 0) {\n            color(\"forestgreen\")\n            leaf(60+rand(i+5)*15, angle-5, twist+20, x_pos+5, y_pos+5, scale_factor*0.7);\n        }\n    }\n}\n\n// Helper function for pseudo-random variation\nfunction rand(n) = (n*13%100)/100;",
    "renders": true
  },
  {
    "plant": "wandering",
    "openscad_code": "// Wandering plant (Tradescantia zebrina) in realistic style\n// Overall height ~110 mm, suitable for 3D printing\n\n// Wall thickness constant\nwall = 2;\n\n// Main stem module\nmodule stem(segments, length, base_angle, bend) {\n    for (i = [0 : segments - 1]) {\n        angle = base_angle + bend * sin(i * 20);\n        translate([0, 0, i * length / segments])\n        rotate([0, angle, 0])\n        color(\"darkolivegreen\")\n        cylinder(h = length / segments, d1 = 5 - i * 0.3, d2 = 4 - i * 0.3, $fn = 12);\n    }\n}\n\n// Individual leaf module\nmodule leaf(length, width, curl) {\n    difference() {\n        // Main leaf body\n        translate([-length / 2, 0, 0])\n        color([0.2, 0.4, 0.1])\n        cube([length, width, wall]);\n        \n        // Midrib\n        translate([-length / 2, width / 2 - 0.5, -0.1])\n        color(\"darkgreen\")\n        cube([length, 1, wall + 0.2]);\n        \n        // Stripes (zebrina pattern)\n        for (i = [1 : 2 : length - 2]) {\n            translate([-length / 2 + i, 0, -0.1])\n            color([0.3, 0.5, 0.2])\n            cube([1, width, wall + 0.2]);\n        }\n    }\n    \n    // Curl the leaf slightly\n    rotate([0, curl, 0])\n    translate([length / 2, width / 2, 0])\n    color([0.2, 0.4, 0.1])\n    cube([length / 3, width / 2, wall]);\n}\n\n// Node with leaves\nmodule node(num_leaves, stem_diam) {\n    // Node joint\n    color(\"darkgreen\")\n    sphere(d = stem_diam + 1, $fn = 12);\n    \n    // Leaves radiating from node\n    for (i = [0 : num_leaves - 1]) {\n        rotate([0, 0, i * 360 / num_leaves])\n        translate([stem_diam / 2 + 2, 0, 0])\n        rotate([0, 45, 0])\n        leaf(18, 8, 15);\n    }\n}\n\n// Pot module\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = 25, d1 = 35, d2 = 30, $fn = 32);\n        \n        // Inner cavity\n        translate([0, 0, wall])\n        cylinder(h = 23, d1 = 31, d2 = 26, $fn = 32);\n    }\n    \n    // Soil surface\n    translate([0, 0, 24])\n    color(\"#3e2723\")\n    cylinder(h = 1, d = 29, $fn = 32);\n}\n\n// Main plant assembly\nmodule plant() {\n    pot();\n    \n    // Central stem\n    translate([0, 0, 25])\n    stem(20, 80, 5, 3);\n    \n    // Side branches\n    translate([0, 0, 25])\n    for (i = [1 : 5]) {\n        rotate([0, 0, i * 72])\n        translate([0, 0, 10 * i])\n        rotate([0, 30, 0])\n        stem(8, 40 - i * 5, 10, 5);\n    }\n    \n    // Nodes with leaves along main stem\n    for (i = [2 : 3 : 18]) {\n        translate([0, 0, 25 + i * 4])\n        node(3, 5 - i * 0.2);\n    }\n    \n    // Nodes on side branches\n    for (i = [1 : 5]) {\n        rotate([0, 0, i * 72])\n        for (j = [1 : 2 : 6]) {\n            translate([0, 0, 25 + 10 * i + j * 5])\n            rotate([0, 30, 0])\n            translate([0, 0, j * 4])\n            node(2, 4 - j * 0.3);\n        }\n    }\n}\n\n// Render the plant\nplant();",
    "renders": true
  },
  {
    "plant": "inch",
    "openscad_code": "// Inch Plant / Wandering Dude - 3D Printable Model\n// Realistic style, medium complexity\n\n$fn = 36;  // Smooth curves for 3D printing\n\nmodule stem_segment(length, diameter) {\n    // Main cylindrical stem with slight taper\n    cylinder(h = length, d1 = diameter, d2 = diameter * 0.9, center = true);\n}\n\nmodule leaf_node() {\n    // Individual leaf with proper inch plant proportions\n    // Leaf blade - elongated oval\n    translate([0, 5, 0])\n        scale([1, 2.5, 0.3])\n            sphere(d = 10);\n    \n    // Leaf tip point\n    translate([0, 18, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 4, d1 = 2, d2 = 0.1);\n    \n    // Sheath around stem\n    translate([0, -2, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 3, d = 3);\n}\n\nmodule stem_with_leaves(stem_length, segments) {\n    segment_length = stem_length / segments;\n    \n    for(i = [0:segments-1]) {\n        translate([0, 0, -stem_length/2 + i * segment_length + segment_length/2]) {\n            // Main stem piece\n            stem_segment(segment_length, 3);\n            \n            // Leaves every other segment, alternating sides\n            if(i % 2 == 0) {\n                translate([0, 0, segment_length/2])\n                    rotate([0, 0, i * 30])\n                    translate([2, 0, 0])\n                    rotate([0, 90, 0])\n                    leaf_node();\n            } else {\n                translate([0, 0, segment_length/2])\n                    rotate([0, 0, -i * 30])\n                    translate([-2, 0, 0])\n                    rotate([0, -90, 180])\n                    leaf_node();\n            }\n        }\n    }\n}\n\nmodule pot_base() {\n    // Cylindrical pot with drainage tray\n    difference() {\n        // Outer pot\n        cylinder(h = 25, d = 45);\n        \n        // Hollow inside\n        translate([0, 0, -2])\n            cylinder(h = 25, d = 41);\n        \n        // Drainage hole\n        translate([0, 0, -24.5])\n            cylinder(h = 5, d = 8);\n    }\n    \n    // Pot rim\n    translate([0, 0, 25])\n        cylinder(h = 3, d = 47);\n    \n    // Drainage tray\n    translate([0, 0, -25.5])\n        cylinder(h = 2, d = 50);\n}\n\nmodule soil_surface() {\n    // Slightly domed soil\n    translate([0, 0, 2])\n        scale([1, 1, 0.3])\n            sphere(d = 40);\n}\n\nmodule main_plant() {\n    union() {\n        // Pot and soil\n        pot_base();\n        soil_surface();\n        \n        // Main stem emerging from soil\n        translate([0, 0, 5])\n            rotate([0, 10, 0])\n            stem_with_leaves(60, 8);\n        \n        // First trailing vine\n        translate([10, 0, 5])\n            rotate([20, 45, 10])\n            stem_with_leaves(80, 10);\n        \n        // Second trailing vine\n        translate([-8, 5, 5])\n            rotate([15, -30, -20])\n            stem_with_leaves(70, 9);\n        \n        // Short upright stem\n        translate([5, -5, 5])\n            rotate([-10, 0, 25])\n            stem_with_leaves(30, 4);\n    }\n}\n\n// Scale to appropriate 3D printing size\nscale([0.8, 0.8, 0.8])\n    main_plant();",
    "renders": true
  },
  {
    "plant": "purple",
    "openscad_code": "// Purple Plant - Realistic Style - Medium Complexity\n// Overall height 120mm, suitable for 3D printing\n\ncolor(\"purple\") \n\nplant_height = 120;\npot_height = 40;\npot_radius = 35;\nstem_height = 60;\nstem_radius = 3;\nleaf_length = 25;\nleaf_width = 15;\nleaf_thickness = 2;\n\n// Main plant assembly\nunion() {\n    \n    // Pot with drainage hole\n    difference() {\n        // Outer pot\n        cylinder(h=pot_height, r=pot_radius, $fn=64);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h=pot_height, r=pot_radius-4, $fn=64);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h=5, r=5, $fn=32);\n    }\n    \n    // Pot base ring\n    translate([0, 0, -2])\n        cylinder(h=4, r=pot_radius+2, $fn=64);\n    \n    // Main stem\n    translate([0, 0, pot_height])\n        cylinder(h=stem_height, r=stem_radius, $fn=32);\n    \n    // Leaves - arranged in spiral up the stem\n    for(i = [0:5]) {\n        angle = i * 60;\n        height = pot_height + 15 + i * 8;\n        \n        // Left leaf\n        translate([0, 0, height])\n        rotate([0, 0, angle])\n        translate([stem_radius+2, 0, 0])\n        rotate([0, -20, -30])\n        scale([leaf_length, leaf_width, leaf_thickness])\n        leaf_shape();\n        \n        // Right leaf opposite\n        translate([0, 0, height+5])\n        rotate([0, 0, angle+30])\n        translate([stem_radius+2, 0, 0])\n        rotate([0, 20, 30])\n        scale([leaf_length*0.9, leaf_width*0.9, leaf_thickness])\n        leaf_shape();\n    }\n    \n    // Top flower cluster\n    translate([0, 0, pot_height+stem_height])\n    union() {\n        // Center sphere\n        sphere(r=6, $fn=32);\n        \n        // Petals around center\n        for(j = [0:7]) {\n            rotate([0, 0, j*45])\n            translate([0, 8, 0])\n            rotate([0, 90, 0])\n            scale([1, 1.5, 0.5])\n            cylinder(h=10, r1=4, r2=0, $fn=16);\n        }\n    }\n    \n    // Small buds on stem\n    for(k = [0:2]) {\n        bud_angle = k * 120;\n        bud_height = pot_height + 30 + k * 15;\n        \n        translate([0, 0, bud_height])\n        rotate([0, 0, bud_angle])\n        translate([stem_radius+1, 0, 0])\n        sphere(r=4, $fn=16);\n    }\n}\n\n// Leaf shape module - oval with pointed tip\nmodule leaf_shape() {\n    difference() {\n        // Main leaf body\n        scale([1, 0.5, 1])\n        sphere(r=1, $fn=32);\n        \n        // Vein indentation\n        translate([0, 0, -0.5])\n        scale([0.9, 0.3, 1.1])\n        sphere(r=1, $fn=32);\n    }\n}\n\n// Soil surface in pot\ntranslate([0, 0, pot_height-8])\ncolor(\"saddlebrown\")\ndifference() {\n    cylinder(h=8, r=pot_radius-4, $fn=64);\n    translate([0, 0, -1])\n    cylinder(h=10, r=pot_radius-6, $fn=64);\n}",
    "renders": true
  },
  {
    "plant": "heart",
    "openscad_code": "// Heart Plant - Realistic Style with Medium Complexity\n// A potted heart-shaped succulent with leaves and stem structure\n\n// Parameters\npot_height = 30;\npot_radius = 25;\nwall_thickness = 2;\nheart_scale = 40;\nstem_height = 35;\nleaf_count = 8;\nleaf_scale = 12;\n\n// Main assembly\nmodule heart_plant() {\n    union() {\n        // Pot\n        translate([0, 0, 0])\n            flower_pot();\n        \n        // Stem\n        translate([0, 0, pot_height])\n            scale([0.8, 0.8, 1])\n                stem();\n        \n        // Heart leaves cluster\n        translate([0, 0, pot_height + stem_height])\n            heart_cluster();\n    }\n}\n\n// Flower pot with drainage hole\nmodule flower_pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = pot_height, r1 = pot_radius, r2 = pot_radius * 0.85, $fn = 32);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n            cylinder(h = pot_height - wall_thickness, r1 = pot_radius - wall_thickness, r2 = pot_radius * 0.85 - wall_thickness, $fn = 32);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h = wall_thickness + 2, r = 3, $fn = 16);\n        \n        // Base flattening\n        translate([0, 0, -1])\n            cube([pot_radius * 2, pot_radius * 2, 1], center = true);\n    }\n    \n    // Soil surface\n    translate([0, 0, pot_height - wall_thickness])\n        scale([0.9, 0.9, 1])\n            sphere(r = pot_radius - wall_thickness, $fn = 32);\n}\n\n// Main stem structure\nmodule stem() {\n    color(\"darkgreen\")\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([stem_height/4, 0, 0])\n                rotate([0, 15, 0])\n                    cylinder(h = stem_height, r1 = 3, r2 = 2, $fn = 8);\n    }\n    \n    // Central stem\n    cylinder(h = stem_height, r = 2.5, $fn = 8);\n}\n\n// Heart-shaped leaf\nmodule heart_leaf() {\n    color(\"green\")\n    union() {\n        // Left lobe\n        translate([-heart_scale/3, 0, 0])\n            scale([1, 1.2, 0.5])\n                sphere(r = heart_scale/2.5, $fn = 16);\n        \n        // Right lobe\n        translate([heart_scale/3, 0, 0])\n            scale([1, 1.2, 0.5])\n                sphere(r = heart_scale/2.5, $fn = 16);\n        \n        // Bottom point\n        translate([0, -heart_scale/2, 0])\n            rotate([90, 0, 0])\n                cylinder(h = heart_scale/1.5, r1 = heart_scale/2, r2 = 0, $fn = 16);\n        \n        // Connector\n        hull() {\n            translate([-heart_scale/4, 0, 0])\n                sphere(r = heart_scale/4, $fn = 8);\n            translate([heart_scale/4, 0, 0])\n                sphere(r = heart_scale/4, $fn = 8);\n        }\n    }\n}\n\n// Cluster of heart leaves\nmodule heart_cluster() {\n    // Main heart\n    heart_leaf();\n    \n    // Secondary leaves\n    for(i = [1:leaf_count]) {\n        rotate([0, 0, i * (360/leaf_count)])\n            translate([heart_scale * 0.7, 0, -5])\n                rotate([30 - i * 5, 0, 0])\n                    scale([0.6, 0.6, 0.6])\n                        heart_leaf();\n    }\n    \n    // Tiny filler leaves\n    for(j = [1:6]) {\n        rotate([0, 0, j * 60 + 30])\n            translate([heart_scale * 0.4, 0, -8])\n                rotate([45, 0, 0])\n                    scale([0.3, 0.3, 0.3])\n                        heart_leaf();\n    }\n}\n\n// Render the complete plant\nheart_plant();",
    "renders": true
  },
  {
    "plant": "umbrella",
    "openscad_code": "// Umbrella Plant (Schefflera arboricola) - Realistic Medium Complexity\n// Overall height ~120mm, pot diameter ~70mm\n\n$fn = 32;\n\n// Main module\nmodule umbrella_plant() {\n    // Plant pot\n    translate([0, 0, 0]) {\n        difference() {\n            // Outer pot with slight taper\n            cylinder(h = 35, r1 = 35, r2 = 32);\n            // Inner cavity\n            translate([0, 0, 5])\n                cylinder(h = 33, r1 = 32, r2 = 29);\n            // Drainage hole\n            translate([0, 0, -1])\n                cylinder(h = 2, r = 4);\n        }\n        \n        // Soil surface\n        translate([0, 0, 32])\n            cylinder(h = 3, r = 30, $fn = 24);\n    }\n    \n    // Main trunk\n    translate([0, 0, 35]) {\n        // Base of trunk\n        cylinder(h = 8, r = 5);\n        \n        // Trunk segments with slight taper\n        for(i = [0:2]) {\n            translate([0, 0, 8 + i*25])\n                rotate([0, 0, 15*i])\n                cylinder(h = 25 - i*3, r1 = 4.5 - i*0.5, r2 = 4 - i*0.5);\n        }\n    }\n    \n    // Branching structure with leaves\n    module branch(height, angle, rotation) {\n        translate([0, 0, height])\n        rotate([0, angle, rotation]) {\n            // Branch\n            cylinder(h = 20, r = 1.5);\n            \n            // Leaf clusters at branch end\n            translate([0, 0, 20])\n            rotate([0, -angle, 0])\n            for(leaf = [0:7]) {\n                rotate([0, 0, leaf * 45])\n                translate([0, 12, 0])\n                leaf_cluster();\n            }\n        }\n    }\n    \n    // Individual leaf cluster (umbrella shape)\n    module leaf_cluster() {\n        // Central stem\n        cylinder(h = 8, r = 0.8);\n        \n        // Leaflets arranged in umbrella pattern\n        for(i = [1:8]) {\n            angle = i * 45;\n            translate([0, 0, 6])\n            rotate([0, angle, 0])\n            translate([7, 0, 0])\n            rotate([90, 0, 0])\n            scale([0.8, 0.8, 0.1])\n            // Oval leaf shape\n            scale([1.5, 1, 1])\n            sphere(r = 5);\n        }\n    }\n    \n    // Generate branching structure\n    branch(45, 20, 0);\n    branch(60, 30, 45);\n    branch(70, 35, 90);\n    branch(80, 25, 135);\n    branch(90, 15, 180);\n    \n    // Add some smaller branches for fullness\n    branch(55, 40, 225);\n    branch(75, 20, 270);\n    branch(85, 10, 315);\n    \n    // Aerial roots detail\n    for(i = [0:3]) {\n        rotate([0, 0, i*90]) {\n            translate([4, 0, 45])\n            rotate([30, 0, 0])\n            cylinder(h = 15, r = 1);\n        }\n    }\n}\n\n// Render the plant\numbrella_plant();",
    "renders": true
  },
  {
    "plant": "corn",
    "openscad_code": "// Corn Plant Model - Realistic Style - Medium Complexity\n// OpenSCAD code for 3D printable corn plant\n\n// Main parameters\n$fn = 32;\nstalk_height = 120;\nstalk_diameter = 8;\near_length = 40;\near_diameter = 15;\nleaf_length = 80;\nleaf_width = 12;\ntassel_height = 25;\n\nmodule corn_stalk() {\n    // Main stalk with slight taper\n    cylinder(h=stalk_height, d1=stalk_diameter, d2=stalk_diameter*0.8, center=false);\n    \n    // Add nodes/rings along stalk\n    for(i = [0:15:stalk_height-20]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(h=3, d=stalk_diameter+2, center=false);\n                cylinder(h=4, d=stalk_diameter-1, center=false);\n            }\n    }\n}\n\nmodule corn_leaf(angle, height_offset, length_factor=1) {\n    translate([0, 0, height_offset])\n        rotate([0, 0, angle])\n            translate([stalk_diameter/2+2, 0, -leaf_width/2])\n                rotate([90+20*sin(angle), 0, 0])\n                    scale([1, length_factor, 1])\n                        hull() {\n                            translate([0, 0, 0])\n                                cube([leaf_width, 2, leaf_width/2]);\n                            translate([0, leaf_length*length_factor, 0])\n                                cube([leaf_width/3, 2, leaf_width/6]);\n                        };\n}\n\nmodule corn_ear(height_offset, angle) {\n    translate([0, 0, height_offset])\n        rotate([0, 0, angle])\n            translate([stalk_diameter/2+ear_diameter/2, 0, 0])\n                rotate([0, 90, 0])\n                    difference() {\n                        // Main ear body\n                        cylinder(h=ear_length, d=ear_diameter, center=true);\n                        \n                        // Remove center for husk\n                        cylinder(h=ear_length+2, d=ear_diameter-4, center=true);\n                        \n                        // Add kernel texture\n                        for(i = [0:10:ear_length-5]) {\n                            rotate([0, 0, i])\n                                for(j = [0:20:360]) {\n                                    rotate([0, j, 0])\n                                        translate([ear_diameter/2-1, 0, i-ear_length/2])\n                                            sphere(d=2);\n                                }\n                        }\n                    }\n}\n\nmodule husk(ear_height, angle) {\n    translate([0, 0, ear_height])\n        rotate([0, 0, angle])\n            translate([stalk_diameter/2+ear_diameter/2, 0, 0])\n                rotate([0, 90, 0])\n                    difference() {\n                        // Outer husk\n                        scale([1, 1.2, 1])\n                            cylinder(h=ear_length+10, d=ear_diameter+6, center=true);\n                        \n                        // Inner removal\n                        cylinder(h=ear_length+12, d=ear_diameter+2, center=true);\n                        \n                        // Split husk\n                        translate([0, 0, ear_length/2+5])\n                            cube([ear_diameter+8, 2, ear_length+10], center=true);\n                    }\n}\n\nmodule tassel() {\n    translate([0, 0, stalk_height])\n        // Main tassel stem\n        cylinder(h=tassel_height, d=2, center=false);\n    \n    // Tassel branches\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n            translate([0, 0, stalk_height+5])\n                rotate([90+rand(i)*20, 0, 0])\n                    translate([0, 0, 0])\n                        scale([0.3+rand(i)*0.2, 1, 0.3+rand(i)*0.2])\n                            cylinder(h=tassel_height*0.8, d=1, center=false);\n    }\n}\n\n// Simple random function\nfunction rand(n) = (sin(n*123.456)*0.5+0.5);\n\n// Base/root system\nmodule roots() {\n    for(i = [0:45:359]) {\n        rotate([0, 0, i])\n            translate([stalk_diameter/2, 0, -5])\n                rotate([90+rand(i)*20, 0, 0])\n                    scale([0.8, 1, 0.8])\n                        cylinder(h=15, d1=3, d2=1, center=false);\n    }\n}\n\n// Assemble the plant\nunion() {\n    // Base\n    translate([0, 0, -5])\n        cylinder(h=5, d=stalk_diameter+4, center=false);\n    \n    // Roots\n    roots();\n    \n    // Main stalk\n    corn_stalk();\n    \n    // Leaves\n    for(i = [0:30:359]) {\n        corn_leaf(i, 20+rand(i)*80, 0.8+rand(i)*0.4);\n        corn_leaf(i+15, 30+rand(i)*70, 0.9+rand(i)*0.3);\n    }\n    \n    // Corn ears with husks\n    corn_ear(60, 45);\n    husk(60, 45);\n    corn_ear(45, -45);\n    husk(45, -45);\n    \n    // Tassel at top\n    tassel();\n}",
    "renders": true
  },
  {
    "plant": "lucky",
    "openscad_code": "// Lucky Bamboo Plant - Realistic Style\n// Overall dimensions: ~120mm height\n\n// Stem parameters\nstem_d = 12;        // mm\nstem_wall = 2;      // mm\nnode_d = 14;        // mm\nnode_h = 3;         // mm\nnum_nodes = 4;      // per stem segment\n\n// Leaf parameters\nleaf_w = 8;         // mm\nleaf_l = 25;        // mm\nleaf_t = 1.5;       // mm\n\n// Pot parameters\npot_r = 35;         // mm\npot_h = 40;         // mm\npot_wall = 3;       // mm\nsoil_h = 15;        // mm\n\n// Base module for a single bamboo node\nmodule bamboo_node() {\n    difference() {\n        cylinder(h=node_h, d=node_d, $fn=32);\n        translate([0, 0, -0.1])\n            cylinder(h=node_h+0.2, d=node_d-2*stem_wall, $fn=32);\n    }\n}\n\n// Bamboo stem segment with nodes\nmodule bamboo_stem(h, angle=0) {\n    rotate([angle, 0, 0]) {\n        // Main hollow tube\n        difference() {\n            cylinder(h=h, d=stem_d, $fn=32);\n            translate([0, 0, -0.1])\n                cylinder(h=h+0.2, d=stem_d-2*stem_wall, $fn=32);\n        }\n        \n        // Add nodes\n        for(i = [1:num_nodes-1])\n            translate([0, 0, i*h/num_nodes - node_h/2])\n                bamboo_node();\n    }\n}\n\n// Lucky bamboo leaf\nmodule bamboo_leaf() {\n    scale([1, 1, 0.3]) {\n        difference() {\n            // Leaf body\n            translate([-leaf_w/2, 0, 0])\n                scale([leaf_w, leaf_l, leaf_t])\n                sphere(r=1, $fn=16);\n                \n            // Taper the tip\n            translate([-leaf_w, leaf_l*0.8, -leaf_t])\n                cube([leaf_w*3, leaf_l*0.5, leaf_t*3]);\n        }\n    }\n}\n\n// Leaf cluster\nmodule leaf_cluster() {\n    for(i = [0:3]) {\n        rotate([0, 0, i*90 + 45])\n            translate([0, stem_d/2 + 2, 0])\n                rotate([0, 30, 0])\n                    bamboo_leaf();\n    }\n}\n\n// Pot with soil and water\nmodule pot() {\n    // Outer pot\n    difference() {\n        cylinder(h=pot_h, r=pot_r, $fn=64);\n        translate([0, 0, pot_wall])\n            cylinder(h=pot_h, r=pot_r-pot_wall, $fn=64);\n    }\n    \n    // Soil layer\n    translate([0, 0, pot_wall])\n        color(\"saddlebrown\")\n        cylinder(h=soil_h, r=pot_r-pot_wall-1, $fn=64);\n    \n    // Water level (partially filled)\n    translate([0, 0, pot_wall + soil_h - 5])\n        color(\"lightblue\", 0.6)\n        cylinder(h=5, r=pot_r-pot_wall-1, $fn=64);\n}\n\n// Main plant assembly\nmodule lucky_bamboo() {\n    // Pot\n    pot();\n    \n    // Main stem\n    translate([0, 0, pot_wall + soil_h])\n        bamboo_stem(80);\n    \n    // First branch\n    translate([0, 0, pot_wall + soil_h + 20])\n        rotate([0, 0, 45])\n            translate([stem_d/2, 0, 0])\n                rotate([0, 0, 90])\n                    bamboo_stem(40, 30);\n    \n    // Second branch\n    translate([0, 0, pot_wall + soil_h + 35])\n        rotate([0, 0, -30])\n            translate([stem_d/2, 0, 0])\n                rotate([0, 0, 90])\n                    bamboo_stem(30, 20);\n    \n    // Add leaves to branches\n    translate([0, 0, pot_wall + soil_h + 60])\n        leaf_cluster();\n        \n    translate([0, 0, pot_wall + soil_h + 65])\n        rotate([0, 0, 45])\n            scale([0.7, 0.7, 0.7])\n                leaf_cluster();\n                \n    translate([0, 0, pot_wall + soil_h + 50])\n        rotate([0, 0, -30])\n            scale([0.6, 0.6, 0.6])\n                leaf_cluster();\n}\n\n// Render the complete model\nlucky_bamboo();",
    "renders": true
  },
  {
    "plant": "bamboo",
    "openscad_code": "// Bamboo Plant - Realistic Style - Medium Complexity\n// Overall height ~120mm, optimized for 3D printing with 2mm walls\n\n// Parameters\nstem_d = 8;           // Main stem diameter\nstem_wall = 2;        // Wall thickness\nnode_h = 10;          // Height between nodes\nnode_gap = 15;        // Spacing between nodes\nsegments = 36;        // Cylinder segments for smooth curves\nleaf_scale = 0.8;     // Leaf scaling factor\n\n// Create complete bamboo plant\nmodule bamboo_plant() {\n    // Base ground disk\n    translate([0, 0, -1])\n        cylinder(h=2, d=30, $fn=segments);\n    \n    // Main stems\n    translate([0, 0, 0])\n        main_stem(height=80);\n    \n    translate([12, 0, 0])\n        rotate([0, 10, 15])\n            main_stem(height=65);\n    \n    translate([-10, 8, 0])\n        rotate([0, -8, -20])\n            main_stem(height=70);\n}\n\n// Generate main stem with nodes\nmodule main_stem(height) {\n    nodes = floor(height / node_gap);\n    \n    for(i = [0:nodes-1]) {\n        // Node ring\n        translate([0, 0, i * node_gap])\n            node_ring();\n        \n        // Stem segment between nodes\n        translate([0, 0, i * node_gap + node_h/2])\n            cylinder(h=node_gap - node_h, d=stem_d, $fn=segments);\n    }\n    \n    // Top segment\n    translate([0, 0, (nodes-1) * node_gap + node_gap - node_h/2])\n        cylinder(h=node_h, d=stem_d, $fn=segments);\n    \n    // Tapered top\n    translate([0, 0, height])\n        cylinder(h=10, d1=stem_d, d2=stem_d*0.6, $fn=segments);\n    \n    // Add branches and leaves\n    branch_level = height * 0.6;\n    translate([0, 0, branch_level])\n        branches();\n}\n\n// Create node ring with swelling\nmodule node_ring() {\n    difference() {\n        // Outer swelling\n        cylinder(h=node_h, d=stem_d*1.3, $fn=segments);\n        \n        // Hollow center\n        cylinder(h=node_h+1, d=stem_d-stem_wall*2, $fn=segments);\n    }\n}\n\n// Create branch structure with leaves\nmodule branches() {\n    // First branch\n    rotate([0, 0, 0])\n        branch();\n    \n    // Second branch\n    rotate([0, 0, 120])\n        branch();\n    \n    // Third branch\n    rotate([0, 0, 240])\n        branch();\n}\n\n// Single branch with leaves\nmodule branch() {\n    // Branch stem\n    rotate([0, 45, 0])\n        cylinder(h=25, d=3, $fn=segments);\n    \n    // Leaves along branch\n    for(i = [0:2]) {\n        translate([0, 0, 5 + i*7])\n            rotate([0, 45 + i*15, 45])\n                leaf();\n    }\n}\n\n// Bamboo leaf shape\nmodule leaf() {\n    scale([leaf_scale, leaf_scale, leaf_scale])\n        union() {\n            // Main leaf blade\n            translate([0, 0, 15])\n                rotate([90, 0, 0])\n                    linear_extrude(height=0.8)\n                        polygon(points=[[0,0], [2,15], [0,30], [-2,15]]);\n            \n            // Leaf tip\n            translate([0, 0, 30])\n                rotate([90, 0, 0])\n                    cylinder(h=3, d1=2, d2=0.1, $fn=segments);\n        }\n}\n\n// Render the complete plant\nbamboo_plant();",
    "renders": true
  },
  {
    "plant": "ponytail",
    "openscad_code": "// Ponytail Plant (Beaucarnea recurvata) - Realistic Style, Medium Complexity\n// Designed for 3D printing - no overhangs, 2mm wall thickness\n\n// Overall dimensions: ~100mm height\n\nmodule pot() {\n    // Main pot body - slightly tapered cylinder\n    difference() {\n        cylinder(h=40, r1=35, r2=30, $fn=64);\n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h=38, r1=33, r2=28, $fn=64);\n        // Drainage hole\n        translate([0, 0, 0.5])\n            cylinder(h=2, r=5, $fn=32);\n    }\n    \n    // Pot rim detail\n    translate([0, 0, 40])\n        cylinder(h=5, r1=32, r2=34, $fn=64);\n}\n\nmodule trunk() {\n    // Bulbous base (caudex)\n    translate([0, 0, 45])\n        scale([1.2, 1, 1])\n        sphere(r=20, $fn=64);\n    \n    // Main trunk tapering upwards\n    translate([0, 0, 60])\n        cylinder(h=30, r1=12, r2=8, $fn=32);\n    \n    // Trunk texture rings\n    for(i=[0:3:30]) {\n        translate([0, 0, 60+i])\n            cylinder(h=1.5, r1=11.5, r2=7.5, $fn=32);\n    }\n}\n\nmodule leaves() {\n    // Number of leaf clusters\n    num_clusters = 8;\n    \n    for(i=[0:num_clusters-1]) {\n        angle = i * (360/num_clusters);\n        \n        // Leaf cluster stem\n        rotate([0, 0, angle])\n        translate([0, 0, 90])\n        rotate([20 + rand(i)*10, 0, 0])\n        cylinder(h=40, r=1.5, $fn=8);\n        \n        // Individual leaves in cluster\n        for(j=[0:4]) {\n            rotate([0, 0, angle])\n            translate([0, 0, 90])\n            rotate([20 + rand(i)*10, j*15 - 30, 0])\n            translate([0, 0, 5+j*7])\n            scale([0.5, 1, 8])\n            rotate([90, 0, 0])\n            cylinder(h=1, r1=2, r2=0.5, $fn=3);\n        }\n    }\n    \n    // Central leaf bundle\n    for(k=[0:12]) {\n        rotate([0, 0, k*30])\n        translate([0, 0, 90])\n        rotate([15 + rand(k)*5, 0, 0])\n        translate([0, 0, 5])\n        scale([0.6, 1, 10])\n        rotate([90, 0, 0])\n        cylinder(h=1, r1=2.5, r2=1, $fn=3);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, 42])\n        cylinder(h=3, r1=33, r2=28, $fn=64);\n}\n\n// Main assembly\nunion() {\n    pot();\n    soil();\n    trunk();\n    leaves();\n}\n\n// Helper function for random variation\nfunction rand(n) = (n * 13.7) % 1;",
    "renders": true
  },
  {
    "plant": "palms",
    "openscad_code": "// Palm Tree - Realistic Medium Complexity\n// Designed for 3D printing with 2mm walls and minimal overhangs\n\n// Overall dimensions\ntree_height = 120;\ntrunk_height = 70;\ncanopy_width = 80;\n\n// Base pot\ndifference() {\n    // Outer pot\n    cylinder(h = 25, r1 = 30, r2 = 25, $fn = 48);\n    \n    // Inner cavity\n    translate([0, 0, -1])\n        cylinder(h = 26, r1 = 28, r2 = 23, $fn = 48);\n    \n    // Drainage hole\n    translate([0, 0, -1])\n        cylinder(h = 2, r = 3, $fn = 16);\n}\n\n// Trunk segments\nmodule trunk_segment(height, radius, taper) {\n    difference() {\n        cylinder(h = height, r1 = radius, r2 = radius * taper, $fn = 12);\n        \n        // Growth rings\n        for(i = [1:2:height]) {\n            translate([0, 0, i])\n                cylinder(h = 0.5, r1 = radius * 1.05, r2 = radius * 1.05, $fn = 12);\n        }\n    }\n}\n\n// Main trunk assembly\nunion() {\n    // Base trunk\n    translate([0, 0, 24])\n        trunk_segment(30, 6, 0.8);\n    \n    // Middle trunk\n    translate([0, 0, 54])\n        trunk_segment(25, 4.8, 0.7);\n    \n    // Top trunk\n    translate([0, 0, 79])\n        trunk_segment(15, 3.5, 0.6);\n}\n\n// Palm frond module\nmodule frond(length, width, angle) {\n    translate([0, 0, 94])\n    rotate([0, 0, angle])\n    rotate([0, -20, 0])\n    union() {\n        // Main stem\n        cylinder(h = length * 0.7, r1 = 1.5, r2 = 0.5, $fn = 8);\n        \n        // Leaf blades\n        for(i = [0:30:length * 0.7]) {\n            translate([0, 0, i])\n            rotate([0, 90, 0])\n            translate([0, 0, -width/2])\n            linear_extrude(height = 0.8)\n            polygon(points = [\n                [0, 0],\n                [width * (1 - i/length/0.7) * 0.8, 0],\n                [width * (1 - i/length/0.7) * 0.4, width * 0.3],\n                [0, width * 0.1]\n            ]);\n        }\n    }\n}\n\n// Generate 8 fronds around the top\nfor(i = [0:45:315]) {\n    frond(canopy_width/2, 15, i);\n}\n\n// Small coconuts\nmodule coconut() {\n    scale([1, 1.2, 1])\n    sphere(r = 5, $fn = 16);\n}\n\n// Place coconuts under canopy\ntranslate([15, 10, 85])\n    coconut();\ntranslate([-12, 8, 87])\n    coconut();\ntranslate([8, -12, 88])\n    coconut();\n\n// Soil surface\ndifference() {\n    translate([0, 0, 22])\n        cylinder(h = 3, r = 29.5, $fn = 48);\n    \n    translate([0, 0, 21])\n        cylinder(h = 3, r = 27.5, $fn = 48);\n}",
    "renders": true
  },
  {
    "plant": "areca",
    "openscad_code": "// Areca Palm in realistic medium-complexity OpenSCAD\n// Overall height ~120 mm, printable as one solid piece\n\n$fn = 36;\n\n// Main stem module\nmodule stem(h=60, r=4) {\n    color(\"SaddleBrown\")\n    union() {\n        // Central trunk\n        cylinder(h=h, r1=r, r2=r*1.2);\n        \n        // Trunk rings\n        for(i=[0:5:h-5])\n            translate([0,0,i])\n            rotate([0,0,sin(i*10)*5])\n            scale([1.1, 1.1, 0.5])\n            cylinder(h=2, r=r, $fn=20);\n    }\n}\n\n// Single frond (leaf)\nmodule frond(len=35, angle=0, droop=0) {\n    color(\"forestgreen\")\n    union() {\n        // Main rib\n        rotate([0,90,0])\n        translate([-len/2, 0, 0])\n        rotate([droop,0,0])\n        scale([1,0.4,0.4])\n        cylinder(h=len, r=1.2);\n        \n        // Leaflets\n        for(i=[1:2:len-3]) {\n            // Left leaflet\n            translate([0,0,0])\n            rotate([0,angle,droop])\n            translate([i-len/2,0,0])\n            rotate([0,-45-5*i,0])\n            scale([len-i, 0.8, 0.1])\n            sphere(r=2);\n            \n            // Right leaflet\n            translate([0,0,0])\n            rotate([0,angle,droop])\n            translate([i-len/2,0,0])\n            rotate([0,45+5*i,0])\n            scale([len-i, 0.8, 0.1])\n            sphere(r=2);\n        }\n    }\n}\n\n// Crown of fronds\nmodule crown() {\n    for(a=[0:30:330]) {\n        rotate([0,0,a])\n        translate([0,0,55])\n        rotate([30+sin(a*5)*10, 0, 0])\n        frond(len=30+rand(a*5)*8, angle=0, droop=-20-rand(a*3)*10);\n    }\n    \n    // Inner smaller fronds\n    for(a=[15:40:335]) {\n        rotate([0,0,a])\n        translate([0,0,60])\n        rotate([50+rand(a*7)*5, 0, 0])\n        frond(len=20+rand(a*3)*5, angle=0, droop=-30);\n    }\n}\n\n// Base pot\nmodule pot() {\n    color(\"sienna\")\n    difference() {\n        // Outer pot\n        cylinder(h=25, r1=20, r2=18);\n        // Inner cavity\n        translate([0,0,2])\n        cylinder(h=23, r1=18, r2=16);\n    }\n    \n    // Soil top\n    color(\"darkgoldenrod\")\n    translate([0,0,1])\n    cylinder(h=2, r1=17.5, r2=17.5);\n    \n    // Rim detail\n    color(\"sienna\")\n    translate([0,0,25])\n    cylinder(h=3, r1=21, r2=20);\n}\n\n// Random helper\nfunction rand(s)=abs(sin(s*123.456))*0.5+0.5;\n\n// Main assembly\nunion() {\n    pot();\n    translate([0,0,25]) stem(h=55);\n    translate([0,0,25]) crown();\n}",
    "renders": true
  },
  {
    "plant": "kentia",
    "openscad_code": "// Kentia Palm - Realistic Medium Complexity\n// Overall height ~120mm, suitable for 3D printing\n\n$fn = 36;  // Smooth curves for printability\n\n// Main parameters\npot_height = 35;\npot_radius = 30;\ntrunk_height = 80;\ntrunk_radius = 4;\nleaf_length = 45;\nleaf_width = 12;\nleaf_thickness = 2;\n\n// Pot with slight taper\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_height, r1=pot_radius, r2=pot_radius*0.85, center=false);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h=pot_height-4, r1=pot_radius-3, r2=pot_radius*0.85-3, center=false);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h=3, r=3, center=false);\n    }\n}\n\n// Trunk with segmented appearance\nmodule trunk() {\n    // Base connection to pot\n    translate([0, 0, pot_height-2])\n        cylinder(h=6, r=trunk_radius+1, center=false);\n    \n    // Main trunk segments\n    for(i=[0:4]) {\n        translate([0, 0, pot_height + i*15])\n            cylinder(h=15, r=trunk_radius*(1-i*0.05), center=false);\n    }\n    \n    // Top segment\n    translate([0, 0, pot_height+trunk_height-5])\n        cylinder(h=5, r=trunk_radius*0.7, center=false);\n}\n\n// Single leaf with realistic curvature\nmodule single_leaf(length, width, angle, tilt) {\n    rotate([tilt, 0, angle])\n    translate([0, 0, pot_height+trunk_height])\n    union() {\n        // Main leaf blade\n        translate([length/2, 0, 0])\n            scale([length, width, leaf_thickness])\n            sphere(r=0.5);\n        \n        // Central vein\n        translate([length/2, 0, leaf_thickness/2+0.1])\n            rotate([90, 0, 0])\n            scale([length*0.9, 0.5, 0.5])\n            cylinder(h=1, r=1, center=true);\n        \n        // Leaf segments for palm frond appearance\n        for(i=[-3:3]) {\n            if(i!=0) {\n                translate([length*0.3, i*width/4, 0])\n                rotate([0, 0, i*5])\n                scale([length*0.4, width/5, leaf_thickness])\n                sphere(r=0.4);\n            }\n        }\n    }\n}\n\n// Kentia frond (collection of leaves)\nmodule kentia_frond() {\n    // Lower fronds\n    for(i=[0:2]) {\n        single_leaf(leaf_length*0.8, leaf_width*0.8, i*120, -20);\n    }\n    \n    // Middle fronds\n    for(i=[0:3]) {\n        single_leaf(leaf_length*0.9, leaf_width*0.9, i*90-45, -10);\n    }\n    \n    // Upper fronds\n    for(i=[0:2]) {\n        single_leaf(leaf_length, leaf_width, i*60+30, 0);\n    }\n    \n    // Crown frond\n    single_leaf(leaf_length*1.1, leaf_width*1.1, 0, 15);\n}\n\n// Assembly\nunion() {\n    // Pot and trunk\n    pot();\n    trunk();\n    \n    // Palm fronds\n    kentia_frond();\n}",
    "renders": true
  },
  {
    "plant": "parlor",
    "openscad_code": "// Parlor Palm Plant\n// Overall height: 100mm\n// Pot: 40mm diameter x 35mm height\n// Leaves span: 80mm diameter\n\n$fn = 32;\n\n// Main module\nmodule parlor_palm() {\n    union() {\n        // Ceramic pot with drainage hole\n        pot();\n        \n        // Soil surface\n        translate([0, 0, 33]) soil();\n        \n        // Main stem\n        translate([0, 0, 35]) stem();\n        \n        // Palm fronds arranged in layers\n        palm_layers();\n    }\n}\n\n// Pot module\nmodule pot() {\n    difference() {\n        // Outer pot shape - tapered cylinder\n        cylinder(h1 = 35, h2 = 30, r1 = 20, r2 = 18);\n        \n        // Inner cavity\n        translate([0, 0, 2]) cylinder(h = 33, r = 16);\n        \n        // Drainage hole\n        translate([0, 0, 1]) cylinder(h = 3, r = 3);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    color(\"saddlebrown\") \n    cylinder(h = 2, r = 16);\n}\n\n// Main stem\nmodule stem() {\n    color(\"darkgreen\") {\n        // Base trunk\n        cylinder(h = 25, r = 4);\n        \n        // Upper trunk with slight taper\n        translate([0, 0, 25]) cylinder(h = 20, r1 = 4, r2 = 2.5);\n    }\n}\n\n// Palm frond leaves\nmodule leaf(length, angle, height, twist) {\n    translate([0, 0, height]) {\n        rotate([0, 0, angle]) {\n            rotate([0, twist, 0]) {\n                // Central spine\n                color(\"darkgreen\") \n                translate([0, 0, -length/2]) cube([1, 1, length], center = true);\n                \n                // Leaflets along spine\n                for(i = [-length/2+5:5:length/2-5]) {\n                    // Left side leaflets\n                    translate([-2.5, i, 0]) rotate([0, 90, 0]) \n                    scale([1, 0.3, 1]) sphere(r = 4);\n                    \n                    // Right side leaflets\n                    translate([2.5, i, 0]) rotate([0, 90, 0]) \n                    scale([1, 0.3, 1]) sphere(r = 4);\n                }\n            }\n        }\n    }\n}\n\n// Arrangement of palm fronds in layers\nmodule palm_layers() {\n    // Bottom layer - 4 fronds\n    for(i = [0, 90, 180, 270]) {\n        leaf(25, i, 45, 30);\n    }\n    \n    // Middle layer - 3 fronds\n    for(i = [45, 165, 285]) {\n        leaf(20, i, 55, 25);\n    }\n    \n    // Top layer - 2 fronds\n    for(i = [120, 300]) {\n        leaf(15, i, 65, 20);\n    }\n    \n    // Crown frond\n    leaf(12, 0, 70, 15);\n}\n\n// Generate the model\nparlor_palm();",
    "renders": true
  },
  {
    "plant": "majesty",
    "openscad_code": "// Majesty Palm in OpenSCAD\n// Realistic style, medium complexity\n\n// Parameters\nscale_factor = 1.5; // Overall size scaling\ntrunk_height = 80 * scale_factor;\ntrunk_radius = 8 * scale_factor;\nleaf_length = 45 * scale_factor;\nleaf_width = 12 * scale_factor;\nfrond_count = 8;\nleaflets_per_side = 7;\npot_height = 25 * scale_factor;\npot_radius = 30 * scale_factor;\nwall_thickness = 2;\n\n// Main plant assembly\nunion() {\n    // Pot\n    translate([0, 0, 0]) {\n        difference() {\n            cylinder(h=pot_height, r=pot_radius, $fn=50);\n            translate([0, 0, wall_thickness])\n                cylinder(h=pot_height, r=pot_radius-wall_thickness, $fn=50);\n        }\n        // Pot base\n        translate([0, 0, -wall_thickness])\n            cylinder(h=wall_thickness, r=pot_radius, $fn=50);\n    }\n    \n    // Soil\n    translate([0, 0, wall_thickness])\n        cylinder(h=5, r=pot_radius-wall_thickness-1, $fn=30);\n    \n    // Trunk\n    translate([0, 0, pot_height - 5]) {\n        cylinder(h=trunk_height, r=trunk_radius, $fn=20);\n        \n        // Trunk rings\n        for(i = [1:10:trunk_height]) {\n            translate([0, 0, i])\n                cylinder(h=2, r=trunk_radius*1.1, $fn=20);\n        }\n    }\n    \n    // Fronds\n    for(i = [0:frond_count-1]) {\n        rotate([0, 0, i * 360/frond_count])\n            translate([0, 0, trunk_height + pot_height - 5])\n                frond();\n    }\n}\n\n// Individual frond module\nmodule frond() {\n    color(\"darkgreen\")\n    translate([0, 0, 0]) {\n        // Central stem\n        rotate([0, 90, 0])\n            cylinder(h=leaf_length, r=1.5, $fn=8);\n        \n        // Leaflets\n        for(side = [0, 1]) {\n            mirror([side == 0 ? 1 : -1, 0, 0])\n            for(j = [1:leaflets_per_side]) {\n                translate([0, 0, j * leaf_length/leaflets_per_side])\n                    rotate([0, 0, j * -15])\n                        translate([leaf_width/2, 0, 0])\n                            scale([1, 0.3, 1])\n                                rotate([0, 90, 0])\n                                    cylinder(h=leaf_width, r1=2, r2=0.5, $fn=3);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "plant": "yucca",
    "openscad_code": "// Yucca Plant - Realistic Style, Medium Complexity\n// 3D printable model with appropriate wall thickness\n\n$fn = 24;  // Resolution for curved surfaces\n\n// Main parameters\npot_height = 25;\npot_radius = 35;\nstem_height = 120;\nstem_radius = 8;\nleaf_length = 80;\nleaf_width = 12;\nleaf_thickness = 2;\n\n// Main assembly\nunion() {\n    // Plant pot\n    translate([0, 0, 0]) {\n        difference() {\n            cylinder(h=pot_height, r=pot_radius, center=false);  // Outer pot\n            translate([0, 0, 3])\n                cylinder(h=pot_height, r=pot_radius-3, center=false);  // Inner hollow\n        }\n        // Pot rim detail\n        translate([0, 0, pot_height])\n            cylinder(h=3, r=pot_radius+1, center=false);\n    }\n    \n    // Soil surface\n    translate([0, 0, pot_height-1])\n        cylinder(h=2, r=pot_radius-2, center=false);\n    \n    // Main stem\n    translate([0, 0, pot_height+2]) {\n        cylinder(h=stem_height/2, r=stem_radius, center=false);\n        \n        // Upper stem segment\n        translate([0, 0, stem_height/2])\n            cylinder(h=stem_height/2, r=stem_radius*0.8, center=false);\n    }\n    \n    // Leaf clusters\n    // Lower cluster\n    for(i=[0:4]) {\n        rotate([0, 0, i*72]) {\n            translate([0, 0, pot_height+20]) {\n                rotate([0, 30, 0]) {\n                    yucca_leaf(leaf_length*0.8, leaf_width, leaf_thickness);\n                }\n            }\n        }\n    }\n    \n    // Middle cluster\n    for(i=[0:5]) {\n        rotate([0, 0, i*60+30]) {\n            translate([0, 0, pot_height+50]) {\n                rotate([0, 15, 0]) {\n                    yucca_leaf(leaf_length, leaf_width, leaf_thickness);\n                }\n            }\n        }\n    }\n    \n    // Top cluster\n    for(i=[0:6]) {\n        rotate([0, 0, i*60]) {\n            translate([0, 0, pot_height+stem_height-5]) {\n                rotate([0, -10, 0]) {\n                    yucca_leaf(leaf_length*1.1, leaf_width, leaf_thickness);\n                }\n            }\n        }\n    }\n    \n    // Small side shoots\n    translate([stem_radius, 0, pot_height+65])\n        rotate([0, 0, 90])\n            yucca_leaf(leaf_length*0.6, leaf_width*0.8, leaf_thickness);\n    \n    translate([-stem_radius, 0, pot_height+75])\n        rotate([0, 0, -90])\n            yucca_leaf(leaf_length*0.7, leaf_width*0.9, leaf_thickness);\n}\n\n// Leaf module with pointed tip\nmodule yucca_leaf(length, width, thickness) {\n    hull() {\n        // Base of leaf\n        translate([0, 0, 0])\n            cube([width, thickness, 10], center=true);\n        \n        // Tip of leaf\n        translate([0, 0, length])\n            cube([width*0.1, thickness, 1], center=true);\n    }\n    \n    // Leaf texture lines\n    for(i=[1:4]) {\n        translate([0, 0, i*length/5])\n            cube([width*0.8, thickness*0.5, 0.5], center=true);\n    }\n}",
    "renders": true
  },
  {
    "plant": "castiron",
    "openscad_code": "// Cast Iron Plant (Aspidistra elatior) - Realistic Style\n// Height: 120mm, Width: 100mm, Depth: 100mm\n\nmodule pot() {\n    // Main pot body - tapered cylinder\n    difference() {\n        cylinder(h=35, r1=45, r2=40, $fn=64);\n        translate([0, 0, 2])\n            cylinder(h=33, r1=43, r2=38, $fn=64);\n    }\n    \n    // Pot rim detail\n    translate([0, 0, 35])\n        cylinder(h=5, r1=46, r2=46, $fn=64);\n    \n    // Drainage holes\n    for(i=[-20:20:20]) {\n        translate([i, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=5, r=3, $fn=16);\n    }\n}\n\nmodule soil() {\n    // Soil surface inside pot\n    translate([0, 0, 5])\n        cylinder(h=10, r1=42, r2=37, $fn=64);\n}\n\nmodule leaf(base_angle, height, width, curl_factor) {\n    // Single leaf with natural curve\n    translate([0, 0, 15])\n        rotate([base_angle, 0, 0])\n            translate([0, 0, height/2])\n                rotate([0, curl_factor, 0])\n                    // Main leaf blade\n                    scale([width, height, 1])\n                        difference() {\n                            sphere(r=1, $fn=32);\n                            translate([0, -0.3, 0])\n                                scale([0.95, 0.8, 1])\n                                    sphere(r=1, $fn=32);\n                        }\n}\n\nmodule leaf_cluster() {\n    // Central stem bundle\n    cylinder(h=15, r=5, $fn=16);\n    \n    // Generate 8 leaves at different angles\n    for(i=[0:45:315]) {\n        // Vary leaf parameters for natural look\n        leaf_height = 70 + rand(i) * 20;\n        leaf_width = 15 + rand(i+10) * 8;\n        curl = -10 + rand(i+20) * 20;\n        \n        translate([0, 0, 15])\n            rotate([0, 0, i])\n                translate([5 + rand(i+30) * 5, 0, 0])\n                    leaf(75 + rand(i+40) * 15, leaf_height, leaf_width, curl);\n    }\n}\n\n// Random number generator based on seed\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\nmodule roots() {\n    // Visible root system at soil surface\n    for(i=[0:30:330]) {\n        rotate([0, 0, i])\n            translate([15 + rand(i) * 10, 0, 10])\n                rotate([90, 0, 0])\n                    cylinder(h=20, r1=3, r2=1, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Pot and soil\n    pot();\n    soil();\n    \n    // Root system\n    roots();\n    \n    // Plant cluster\n    translate([0, 0, 10])\n        leaf_cluster();\n}\n\n// Base for stability\ntranslate([0, 0, -2])\n    cylinder(h=2, r=50, $fn=64);",
    "renders": true
  },
  {
    "plant": "spineless",
    "openscad_code": "// Spineless Cactus (Opuntia ficus-indica) - medium complexity, realistic style\n// 3D printable, ~100mm tall, wall thickness 2mm\n\nmodule cactus_pad(h, r, angle=0) {\n    // Main oval pad body\n    translate([0,0,h/2])\n    rotate([0,0,angle])\n    scale([1.2,1,1])\n    difference() {\n        sphere(r);\n        translate([0,0,-r+2])\n        cube([r*2.4,r*2,2], center=true);\n    }\n    \n    // Thickened rim for printability\n    translate([0,0,h/2])\n    rotate([0,0,angle])\n    scale([1.2,1,1])\n    difference() {\n        sphere(r+2);\n        sphere(r);\n    }\n}\n\nmodule areole_cluster(x,y,z,base_r) {\n    // Small circular areoles (spineless)\n    for(i=[-1:1]) {\n        for(j=[-1:1]) {\n            translate([x+i*3, y+j*3, z])\n            scale([1,1,0.5])\n            sphere(base_r/8, $fn=8);\n        }\n    }\n}\n\nmodule trunk_segment(h) {\n    // Main trunk cylinder with slight taper\n    cylinder(h1=h, h2=h*0.8, r1=12, r2=10, $fn=16);\n    \n    // Trunk texture rings\n    for(i=[0:h/5-1]) {\n        translate([0,0,i*5])\n        difference() {\n            cylinder(h=2, r=12, $fn=16);\n            cylinder(h=3, r=10, $fn=16);\n        }\n    }\n}\n\nmodule cactus() {\n    // Base trunk\n    translate([0,0,0])\n    trunk_segment(30);\n    \n    // Main lower pad\n    translate([0,0,30])\n    cactus_pad(8, 35, 0);\n    \n    // Areoles on lower pad\n    areole_cluster(0, 25, 38, 35);\n    areole_cluster(30, 0, 38, 35);\n    areole_cluster(-30, 0, 38, 35);\n    \n    // Second level pads\n    translate([40,0,35])\n    rotate([0,0,45])\n    cactus_pad(8, 25);\n    \n    translate([-40,0,35])\n    rotate([0,0,-45])\n    cactus_pad(8, 25);\n    \n    // Top pads\n    translate([0,0,38])\n    rotate([0,0,30])\n    cactus_pad(8, 20);\n    \n    translate([20,20,38])\n    rotate([0,0,-20])\n    cactus_pad(6, 15);\n    \n    // Small new growth\n    translate([-25,15,38])\n    rotate([0,0,60])\n    cactus_pad(4, 10);\n    \n    // Ground base for stability\n    translate([0,0,-5])\n    cylinder(h=5, r=50, $fn=32);\n}\n\n// Render the cactus\ncactus();",
    "renders": true
  },
  {
    "plant": "bird",
    "openscad_code": "// Bird Plant - Realistic Style with Medium Complexity\n// Dimensions: ~100mm height, ~80mm width, ~60mm depth\n\n$fn = 36;\nwall_thickness = 2;\n\n// Main module\nmodule bird_plant() {\n    union() {\n        // Bird body (main structure)\n        translate([0, 0, 30]) {\n            bird_body();\n        }\n        \n        // Head and beak\n        translate([0, 0, 55]) {\n            bird_head();\n        }\n        \n        // Wings\n        translate([-15, 0, 40]) {\n            rotate([0, 0, 20]) {\n                bird_wing();\n            }\n        }\n        translate([15, 0, 40]) {\n            mirror([1, 0, 0]) {\n                rotate([0, 0, 20]) {\n                    bird_wing();\n                }\n            }\n        }\n        \n        // Tail\n        translate([0, -20, 35]) {\n            bird_tail();\n        }\n        \n        // Legs and feet\n        translate([-8, 0, 0]) {\n            bird_leg();\n        }\n        translate([8, 0, 0]) {\n            bird_leg();\n        }\n        \n        // Plant pot base\n        translate([0, 0, -5]) {\n            plant_pot();\n        }\n        \n        // Plant leaves\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120]) {\n                translate([0, 25, 10]) {\n                    plant_leaf();\n                }\n            }\n        }\n    }\n}\n\n// Bird body - main torso structure\nmodule bird_body() {\n    difference() {\n        // Main body sphere\n        sphere(r = 18);\n        \n        // Hollow interior\n        sphere(r = 16);\n        \n        // Flatten bottom slightly\n        translate([0, 0, -20]) {\n            cube([40, 40, 20], center = true);\n        }\n    }\n}\n\n// Bird head with beak\nmodule bird_head() {\n    union() {\n        // Head\n        difference() {\n            sphere(r = 12);\n            sphere(r = 10);\n        }\n        \n        // Beak\n        translate([0, 12, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h1 = 8, h2 = 0, r1 = 3, r2 = 0);\n            }\n        }\n        \n        // Eye sockets\n        translate([-5, 8, 3]) {\n            sphere(r = 2);\n        }\n        translate([5, 8, 3]) {\n            sphere(r = 2);\n        }\n        \n        // Eyes\n        translate([-5, 9, 3]) {\n            sphere(r = 1);\n        }\n        translate([5, 9, 3]) {\n            sphere(r = 1);\n        }\n    }\n}\n\n// Bird wing\nmodule bird_wing() {\n    difference() {\n        // Main wing shape\n        scale([1, 0.5, 0.2]) {\n            sphere(r = 15);\n        }\n        \n        // Feather details\n        for(i = [1:3]) {\n            translate([0, -i * 3, 1]) {\n                scale([0.8, 0.3, 0.1]) {\n                    sphere(r = 12);\n                }\n            }\n        }\n    }\n}\n\n// Bird tail\nmodule bird_tail() {\n    difference() {\n        // Main tail\n        scale([1, 1.5, 0.2]) {\n            sphere(r = 12);\n        }\n        \n        // Tail feathers\n        for(i = [-1:1]) {\n            translate([i * 4, 10, 0]) {\n                scale([0.3, 0.8, 0.1]) {\n                    sphere(r = 8);\n                }\n            }\n        }\n    }\n}\n\n// Bird leg and foot\nmodule bird_leg() {\n    union() {\n        // Leg\n        cylinder(h = 25, r = 2);\n        \n        // Foot\n        translate([0, 0, 0]) {\n            // Main foot\n            cube([8, 3, 1], center = true);\n            \n            // Toes\n            for(i = [-1, 0, 1]) {\n                translate([i * 2.5, -2, 0]) {\n                    cube([1, 2, 1]);\n                }\n            }\n        }\n    }\n}\n\n// Plant pot base\nmodule plant_pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = 15, r1 = 25, r2 = 20);\n        \n        // Inner hollow\n        translate([0, 0, wall_thickness]) {\n            cylinder(h = 13, r1 = 23, r2 = 18);\n        }\n        \n        // Drainage hole\n        cylinder(h = 20, r = 3);\n    }\n}\n\n// Plant leaf\nmodule plant_leaf() {\n    difference() {\n        // Main leaf\n        scale([0.3, 1, 0.1]) {\n            sphere(r = 15);\n        }\n        \n        // Leaf vein\n        translate([0, 0, 0.2]) {\n            scale([0.05, 0.8, 0.05]) {\n                sphere(r = 15);\n            }\n        }\n    }\n}\n\n// Render the complete model\nbird_plant();",
    "renders": true
  },
  {
    "plant": "dragon",
    "openscad_code": "// Dragon plant - realistic style, medium complexity\n// Overall dimensions: ~100mm wide x 80mm deep x 120mm tall\n\n$fn = 36;\nwall_thickness = 2;\n\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = 30, d1 = 50, d2 = 45);\n        \n        // Hollow inside\n        translate([0, 0, wall_thickness])\n        cylinder(h = 30, d1 = 46, d2 = 41);\n    }\n    \n    // Base ring\n    translate([0, 0, -2])\n    cylinder(h = 4, d = 52);\n}\n\nmodule stem(height = 80, thickness = 6) {\n    // Main stem with slight taper\n    cylinder(h = height, d1 = thickness, d2 = thickness * 0.7);\n}\n\nmodule leaf_segment(length, width, curve_angle, curl_angle) {\n    // Individual leaf segment\n    rotate([0, 0, curve_angle])\n    rotate([0, curl_angle, 0])\n    scale([1, 0.3, 0.1])\n    sphere(d = length);\n}\n\nmodule leaf(length = 30, segments = 5) {\n    // Progressive leaf with segments\n    union() {\n        for (i = [0:segments-1]) {\n            translate([i * length/segments, 0, 0])\n            rotate([0, 15 * i, 0])\n            leaf_segment(length/segments, 8 - i, 5 * i, -10 * i);\n        }\n        \n        // Central vein\n        translate([0, 0, -0.5])\n        scale([length, 0.8, 0.2])\n        cube([1, 1, 1]);\n    }\n}\n\nmodule dragon_plant() {\n    // Pot\n    pot();\n    \n    // Main stem\n    translate([0, 0, 30])\n    stem(80, 6);\n    \n    // Lower leaves - large\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([0, 15, 35])\n        rotate([0, -30, 0])\n        leaf(35, 6);\n    }\n    \n    // Middle leaves - medium\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([0, 12, 60])\n        rotate([0, -20, 0])\n        leaf(25, 5);\n    }\n    \n    // Upper leaves - small\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 8, 85])\n        rotate([0, -15, 0])\n        leaf(20, 4);\n    }\n    \n    // Crown leaves - dragon head appearance\n    translate([0, 0, 105])\n    union() {\n        // Central crown\n        leaf(15, 3);\n        \n        // Side frills\n        rotate([0, 0, 45])\n        translate([5, 0, 5])\n        scale([0.7, 0.7, 0.7])\n        leaf(12, 3);\n        \n        rotate([0, 0, -45])\n        translate([-5, 0, 5])\n        scale([0.7, 0.7, 0.7])\n        leaf(12, 3);\n        \n        // Back frill\n        rotate([0, 0, 180])\n        translate([0, 3, 8])\n        scale([0.8, 0.5, 0.5])\n        leaf(10, 3);\n    }\n    \n    // Aerial roots\n    for (i = [0:1]) {\n        rotate([0, 0, i * 180 + 90])\n        translate([0, 8, 50])\n        rotate([90, 0, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h = 25, d = 3);\n    }\n}\n\n// Assembly\ndragon_plant();",
    "renders": true
  },
  {
    "plant": "flamingo",
    "openscad_code": "// Flamingo Plant - Realistic Style, Medium Complexity\n// 3D printable, approximately 120mm tall\n\nmodule flamingo_plant() {\n    // Main pot with drainage hole\n    difference() {\n        cylinder(h=25, r1=30, r2=28, $fn=64); // Tapered pot\n        translate([0, 0, -1])\n            cylinder(h=27, r1=25, r2=23, $fn=64); // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h=2, r=3, $fn=16); // Drainage hole\n    }\n    \n    // Soil surface\n    translate([0, 0, 24])\n        cylinder(h=2, r=28.5, $fn=64);\n    \n    // Plant stem base\n    translate([0, 0, 26])\n        cylinder(h=8, r=4, $fn=16);\n    \n    // Main stem\n    translate([0, 0, 34])\n        rotate([0, -10, 0])\n        cylinder(h=40, r=3, $fn=12);\n    \n    // First branch with leaf\n    translate([0, 0, 60])\n        rotate([0, -30, 45])\n        cylinder(h=25, r=2, $fn=8);\n    \n    translate([0, 0, 60])\n        rotate([0, -30, 45])\n        translate([0, 0, 25])\n        leaf();\n    \n    // Second branch with leaf\n    translate([0, 0, 65])\n        rotate([0, -20, -30])\n        cylinder(h=20, r=2, $fn=8);\n    \n    translate([0, 0, 65])\n        rotate([0, -20, -30])\n        translate([0, 0, 20])\n        leaf();\n    \n    // Flamingo flower spike\n    translate([0, 0, 74])\n        rotate([0, -15, 0])\n        flower_spike();\n}\n\nmodule leaf() {\n    // Main leaf blade\n    scale([1, 0.3, 1])\n    rotate([0, 90, 0])\n    difference() {\n        sphere(r=12, $fn=32);\n        translate([-12, 0, 0])\n            cube([25, 25, 25]);\n    }\n    \n    // Leaf tip\n    translate([11, 0, 0])\n        scale([1, 0.3, 1])\n        rotate([0, 90, 0])\n        cylinder(h=8, r1=3, r2=0, $fn=8);\n    \n    // Veins\n    for(i = [-2:1:2]) {\n        translate([i*2, 0, 0])\n            rotate([90, 0, 0])\n            scale([0.5, 0.5, 1])\n            cylinder(h=12, r=0.5, $fn=4);\n    }\n}\n\nmodule flower_spike() {\n    // Spadix (yellow spike)\n    color(\"yellow\")\n    translate([0, 0, 15])\n        cylinder(h=20, r1=2, r2=1, $fn=12);\n    \n    // Spathe (pink/red leaf-like structure)\n    color([0.9, 0.3, 0.5])\n    difference() {\n        union() {\n            // Main spathe body\n            scale([1, 0.2, 1])\n            rotate([0, 90, 0])\n            sphere(r=15, $fn=32);\n            \n            // Curved spathe tip\n            translate([10, 0, 5])\n                rotate([0, 30, 0])\n                scale([1, 0.2, 1])\n                rotate([0, 90, 0])\n                cylinder(h=8, r1=5, r2=0, $fn=8);\n        }\n        \n        // Hollow interior for 3D printing\n        translate([-15, 0, 0])\n            cube([30, 30, 30]);\n    }\n    \n    // Supporting stem\n    cylinder(h=15, r=2, $fn=12);\n}\n\n// Render the complete plant\nflamingo_plant();",
    "renders": true
  },
  {
    "plant": "lace",
    "openscad_code": "// Lace Plant - Realistic Medium Complexity\n// Size: 100mm diameter, 120mm height\n\n$fn = 24;\n\nmodule leaf_segment(w, l, h) {\n    difference() {\n        cube([w, l, h], center=true);\n        for (i = [1:3]) {\n            translate([0, -l/2 + i*l/4, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=w, r1=0.5, r2=1.5, center=true);\n        }\n    }\n}\n\nmodule leaf_pair(len, angle) {\n    rotate([0, 0, angle])\n        translate([0, len/2, 0])\n            leaf_segment(4, len, 1.5);\n    rotate([0, 0, angle + 180])\n        translate([0, len/2, 0])\n            leaf_segment(4, len, 1.5);\n}\n\nmodule leaf_cluster(height) {\n    for (i = [0:30:359]) {\n        rotate([0, 0, i])\n            translate([0, 0, height])\n                leaf_pair(15 + sin(i)*5, 15 + cos(i)*10);\n    }\n}\n\nmodule stem() {\n    cylinder(h=100, r1=3, r2=2, center=false);\n}\n\nmodule root_system() {\n    for (i = [0:45:359]) {\n        rotate([0, 0, i])\n            translate([0, 0, -5])\n                rotate([90 - i/2, 0, 0])\n                    cylinder(h=20, r1=2, r2=1, center=false);\n    }\n}\n\nmodule flower_center() {\n    sphere(r=5);\n    for (i = [0:20:359]) {\n        rotate([0, 0, i])\n            translate([0, 4, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=8, r1=1, r2=0.5, center=false);\n    }\n}\n\nmodule lace_plant() {\n    union() {\n        // Main stem\n        translate([0, 0, 0])\n            stem();\n        \n        // Root system\n        root_system();\n        \n        // Leaf clusters along stem\n        for (h = [20:25:80]) {\n            leaf_cluster(h);\n        }\n        \n        // Flower at top\n        translate([0, 0, 105])\n            flower_center();\n        \n        // Small connecting stems\n        for (i = [0:60:359]) {\n            rotate([0, 0, i])\n                translate([0, 0, 50])\n                    rotate([90 + sin(i)*10, 0, 0])\n                        cylinder(h=25, r1=1.5, r2=1, center=false);\n        }\n    }\n}\n\n// Scale to fit 100mm diameter base\nscale([0.8, 0.8, 0.8])\n    lace_plant();",
    "renders": true
  },
  {
    "plant": "urn",
    "openscad_code": "// Urn Plant - Realistic Style, Medium Complexity\n// Dimensions: 120mm height overall, 80mm pot diameter\n\n// Parameters\npot_height = 60;\npot_top_diameter = 80;\npot_bottom_diameter = 60;\nwall_thickness = 2;\nsoil_level = 45;\n\n// Main pot module\nmodule pot() {\n    difference() {\n        // Outer pot shape (truncated cone)\n        cylinder(h=pot_height, d1=pot_bottom_diameter, d2=pot_top_diameter, $fn=64);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n        cylinder(h=pot_height - wall_thickness, \n                d1=pot_bottom_diameter - 2*wall_thickness, \n                d2=pot_top_diameter - 2*wall_thickness, \n                $fn=64);\n    }\n    \n    // Bottom base ring\n    translate([0, 0, -2])\n    cylinder(h=4, d=pot_bottom_diameter + 8, $fn=64);\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, soil_level])\n    cylinder(h=3, d=pot_top_diameter - 4, $fn=64);\n}\n\n// Stem module\nmodule stem(height, angle, thickness) {\n    rotate([angle, 0, 0])\n    translate([0, 0, soil_level])\n    cylinder(h=height, d=thickness, $fn=16);\n}\n\n// Leaf module - realistic leaf shape\nmodule leaf(length, width, curl) {\n    scale([width/10, length/10, 1])\n    union() {\n        // Main leaf blade\n        translate([0, 0, 0])\n        scale([1, 3, 0.3])\n        sphere(d=10, $fn=32);\n        \n        // Leaf tip extension\n        translate([0, 15, 0])\n        scale([0.3, 1, 0.3])\n        sphere(d=10, $fn=32);\n        \n        // Add curl effect\n        rotate([0, curl, 0])\n        translate([0, 5, 0])\n        scale([0.8, 0.8, 0.3])\n        sphere(d=8, $fn=32);\n    }\n}\n\n// Plant assembly\nmodule plant() {\n    // Main central stem\n    stem(40, 0, 4);\n    \n    // Side stems with leaves\n    for(i = [1:5]) {\n        angle = i * 72;\n        stem_height = 25 + i * 3;\n        stem_angle = 15 + i * 5;\n        \n        rotate([0, 0, angle])\n        translate([5 + i, 0, 0])\n        stem(stem_height, stem_angle, 3);\n        \n        // Leaves on each stem\n        for(j = [1:3]) {\n            leaf_pos = soil_level + (j * stem_height/4);\n            leaf_length = 15 + j * 2;\n            leaf_width = 5 + j;\n            leaf_curl = -10 + j * 5;\n            \n            rotate([0, 0, angle + j * 30])\n            translate([5 + i, 0, leaf_pos])\n            rotate([stem_angle, 0, j * 45])\n            leaf(leaf_length, leaf_width, leaf_curl);\n        }\n    }\n    \n    // Central cluster leaves\n    for(i = [1:8]) {\n        rotate([0, 0, i * 45])\n        translate([0, 0, soil_level + 35])\n        rotate([10 + i * 3, 0, i * 45])\n        leaf(20, 8, 15);\n    }\n}\n\n// Assembly\nunion() {\n    pot();\n    soil();\n    plant();\n}",
    "renders": true
  },
  {
    "plant": "oak",
    "openscad_code": "// Realistic Oak Plant - Medium Complexity\n// 3D printable oak tree with trunk, branches, and acorns\n// Overall height ~120mm, base ~40mm diameter\n\nmodule trunk() {\n    // Main trunk - slightly tapered cylinder\n    cylinder(h=50, r1=6, r2=4, $fn=20);\n    \n    // Trunk texture with vertical grooves\n    for(i=[0:30:360]) {\n        rotate([0, 0, i])\n        translate([4.5, 0, 0])\n        cube([1, 0.5, 50], center=true);\n    }\n}\n\nmodule branch(length, angle, thickness) {\n    // Create a branch segment\n    rotate([0, 0, angle])\n    rotate([0, 80, 0])\n    cylinder(h=length, r=thickness, $fn=8);\n    \n    // Branch end - slight taper\n    translate([0, 0, length])\n    rotate([0, 0, angle])\n    rotate([0, 80, 0])\n    cylinder(h=length*0.2, r1=thickness, r2=thickness*0.5, $fn=6);\n}\n\nmodule leaf_cluster(x, y, z) {\n    translate([x, y, z]) {\n        // Central leaf\n        rotate([0, 0, 45])\n        scale([1, 1.5, 0.3])\n        sphere(r=5, $fn=16);\n        \n        // Side leaves\n        rotate([0, 0, -30])\n        scale([0.8, 1.2, 0.25])\n        sphere(r=4, $fn=16);\n        \n        rotate([0, 0, 120])\n        scale([0.9, 1.3, 0.25])\n        sphere(r=4.5, $fn=16);\n        \n        // Small leaf detail\n        rotate([0, 0, 200])\n        scale([0.6, 1, 0.2])\n        sphere(r=3, $fn=12);\n    }\n}\n\nmodule acorn(x, y, z) {\n    translate([x, y, z]) {\n        // Acorn cap\n        difference() {\n            sphere(r=2, $fn=12);\n            translate([0, 0, 1])\n            cylinder(h=3, r=1.8, $fn=12);\n        }\n        \n        // Acorn body\n        translate([0, 0, -2])\n        scale([0.8, 0.8, 1.2])\n        sphere(r=2.5, $fn=12);\n    }\n}\n\nmodule base() {\n    // Ground base\n    difference() {\n        cylinder(h=5, r=20, $fn=32);\n        translate([0, 0, 2])\n        cylinder(h=3, r=18, $fn=32);\n    }\n    \n    // Soil texture\n    for(i=[0:20:360]) {\n        rotate([0, 0, i])\n        translate([15, 0, 5])\n        sphere(r=1+sin(i*3)*0.5, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    base();\n    \n    translate([0, 0, 5]) {\n        trunk();\n        \n        // Main branches\n        translate([0, 0, 45])\n        branch(25, 0, 2);\n        \n        translate([0, 0, 40])\n        branch(20, 120, 1.8);\n        \n        translate([0, 0, 35])\n        branch(22, -120, 1.8);\n        \n        // Secondary branches\n        translate([0, 0, 60])\n        branch(15, 60, 1.2);\n        \n        translate([0, 0, 55])\n        branch(18, -60, 1.3);\n        \n        // Leaf clusters on main branches\n        leaf_cluster(20, 0, 65);\n        leaf_cluster(-10, 17, 55);\n        leaf_cluster(-10, -17, 50);\n        \n        // More leaf clusters\n        leaf_cluster(15, 12, 75);\n        leaf_cluster(-12, 10, 68);\n        leaf_cluster(8, -15, 70);\n        \n        // Acorns\n        acorn(18, 5, 63);\n        acorn(-8, 15, 53);\n        acorn(12, -12, 48);\n        \n        // Top leaf cluster\n        leaf_cluster(0, 0, 85);\n        acorn(3, 3, 83);\n    }\n}",
    "renders": true
  },
  {
    "plant": "maple",
    "openscad_code": "// Realistic Maple Plant - Medium Complexity\n// Total height ~120mm, printable as single piece\n\n// Main module\nmodule maple_plant() {\n    // Pot\n    difference() {\n        cylinder(h=30, d=50, $fn=60);\n        translate([0, 0, 2])\n            cylinder(h=28, d=46, $fn=60);\n    }\n    \n    // Soil surface\n    color(\"brown\")\n    translate([0, 0, 29])\n        cylinder(h=1, d=48, $fn=60);\n    \n    // Main trunk\n    color(\"brown\") {\n        translate([0, 0, 30])\n            cylinder(h=35, d=6, $fn=20);\n        \n        // Secondary trunk\n        translate([0, 0, 65])\n            rotate([15, 0, 30])\n            cylinder(h=25, d=4, $fn=16);\n    }\n    \n    // Generate 5 main branches with leaves\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, 0, 65])\n            branch_with_leaves();\n    }\n    \n    // Additional lower branch\n    translate([0, 0, 55])\n        rotate([0, 0, 45])\n        rotate([20, 0, 0])\n        branch_with_leaves();\n}\n\n// Branch with leaves module\nmodule branch_with_leaves() {\n    // Branch structure\n    color(\"brown\")\n    rotate([25, 0, 0])\n    cylinder(h=20, d=3, $fn=12);\n    \n    // Leaf cluster base\n    translate([0, 0, 20])\n    rotate([35, 0, 0])\n    leaf_cluster();\n}\n\n// Maple leaf cluster\nmodule leaf_cluster() {\n    // Central stem\n    color(\"brown\")\n    cylinder(h=8, d=1.5, $fn=8);\n    \n    // Generate 7 maple leaves around stem\n    for(i = [0:6]) {\n        rotate([0, 0, i*51])\n        translate([0, 0, 4])\n        maple_leaf();\n    }\n}\n\n// Single maple leaf (5-lobed)\nmodule maple_leaf() {\n    color(\"#228B22\")\n    // Center vein\n    translate([0, -5, 0])\n        rotate([90, 0, 0])\n        cylinder(h=10, d=0.8, $fn=6);\n    \n    // Left lobes (3)\n    for(side = [0,1]) {\n        mirror([side, 0, 0])\n        for(l = [1:3]) {\n            rotate([0, 0, 15 + l*15])\n            translate([l*2.5, 0, 0])\n            scale([l*0.3, 1, 0.8])\n            sphere(d=6, $fn=12);\n        }\n    }\n    \n    // Right lobes (3)  \n    for(side = [0,1]) {\n        mirror([side, 0, 0])\n        for(l = [1:3]) {\n            rotate([0, 0, -15 - l*15])\n            translate([l*2.5, 0, 0])\n            scale([l*0.3, 1, 0.8])\n            sphere(d=6, $fn=12);\n        }\n    }\n    \n    // Top lobe\n    translate([0, 9, 0])\n        rotate([90, 0, 0])\n        cylinder(h=6, d=5, $fn=12);\n    \n    // Connect lobes with thin material\n    translate([0, 2, 0])\n        cube([12, 8, 0.5], center=true);\n    \n    // Stem connection\n    translate([0, -5, 0])\n        cylinder(h=2, d=1.2, $fn=8);\n}\n\n// Render the complete plant\nmaple_plant();",
    "renders": true
  },
  {
    "plant": "pine",
    "openscad_code": "// Realistic 3D Printable Pine Plant – OpenSCAD\n// Overall height ≈ 120 mm, base Ø 45 mm\n\n// Parameters\ntrunk_h = 30;\ntrunk_r = 4;\npot_h = 25;\npot_r = 22;\nwall = 2;\n\n// Helper module for a single needle cluster (flat, 2 mm thick)\nmodule needle_cluster(len, wid) {\n    difference() {\n        scale([1, wid/len, 1])\n            cylinder(h=len, r1=len/2, r2=0.2, $fn=8); // cone\n        translate([0,0,-0.1])\n            cube([len*2, wid*2, len+0.2], center=true); // remove back half\n    }\n}\n\n// Branch with needles\nmodule branch(level, angle, len, wid) {\n    if (level > 0) {\n        rotate([0,0,angle])\n        translate([0,0,len*0.8])\n        union() {\n            // stem segment\n            color(\"brown\")\n            cylinder(h=len, r=wid/2, $fn=6);\n            \n            // needles clusters\n            for (i = [0:60:359])\n                rotate([0,90,i])\n                translate([0, 0, len*0.7])\n                color(\"darkgreen\")\n                needle_cluster(len*0.7, wid*1.2);\n            \n            // sub-branches\n            for (j = [30, -30])\n                branch(level-1, j, len*0.8, wid*0.8);\n        }\n    }\n}\n\n// Trunk\nmodule trunk() {\n    color(\"brown\")\n    cylinder(h=trunk_h, r=trunk_r, $fn=12);\n}\n\n// Pot\nmodule pot() {\n    difference() {\n        cylinder(h=pot_h, r=pot_r, $fn=48);\n        translate([0,0,wall])\n        cylinder(h=pot_h, r=pot_r-wall, $fn=48);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0,0,wall])\n    color(\"saddlebrown\")\n    cylinder(h=2, r=pot_r-wall, $fn=48);\n}\n\n// Assemble\nunion() {\n    // pot and soil\n    pot();\n    soil();\n    \n    // trunk\n    translate([0,0,pot_h])\n    trunk();\n    \n    // main branches in spiral\n    for (a = [0:45:359])\n        translate([0,0,pot_h+trunk_h-3])\n        rotate([0,0,a])\n        branch(3, -25, 20, 3);\n}",
    "renders": true
  },
  {
    "plant": "willow",
    "openscad_code": "// Willow Plant - Realistic Style, Medium Complexity\n// 3D printable with 2mm wall thickness\n\n$fn = 30;\n\n// Main module for the willow plant\nmodule willow_plant() {\n    // Base/trunk\n    union() {\n        // Main trunk\n        translate([0, 0, 0]) {\n            cylinder(h = 80, d1 = 12, d2 = 8, center = false);\n        }\n        \n        // Root flare at base\n        translate([0, 0, 0]) {\n            cylinder(h = 5, d = 16, center = false);\n        }\n        \n        // Main branches\n        branches();\n        \n        // Hanging branches with leaves\n        hanging_branches();\n    }\n}\n\n// Generate main upward branches\nmodule branches() {\n    // Branch 1\n    translate([0, 0, 60]) {\n        rotate([0, 20, 0]) {\n            cylinder(h = 30, d1 = 6, d2 = 3, center = false);\n            translate([0, 0, 25]) {\n                rotate([0, -15, 45]) {\n                    cylinder(h = 25, d1 = 4, d2 = 2, center = false);\n                }\n            }\n        }\n    }\n    \n    // Branch 2\n    translate([0, 0, 65]) {\n        rotate([0, -25, 120]) {\n            cylinder(h = 35, d1 = 5, d2 = 2.5, center = false);\n            translate([0, 0, 30]) {\n                rotate([0, 10, -30]) {\n                    cylinder(h = 20, d1 = 3, d2 = 1.5, center = false);\n                }\n            }\n        }\n    }\n    \n    // Branch 3\n    translate([0, 0, 70]) {\n        rotate([0, 15, 240]) {\n            cylinder(h = 28, d1 = 4.5, d2 = 2, center = false);\n        }\n    }\n}\n\n// Generate hanging willow branches\nmodule hanging_branches() {\n    // Create multiple hanging branch clusters\n    for (i = [0:45:315]) {\n        translate([0, 0, 75]) {\n            rotate([0, 0, i]) {\n                translate([8, 0, 0]) {\n                    rotate([30, 0, 0]) {\n                        hanging_cluster();\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Single hanging branch cluster\nmodule hanging_cluster() {\n    // Main hanging branch\n    translate([0, 0, 0]) {\n        rotate([0, 0, 0]) {\n            cylinder(h = 40, d1 = 3, d2 = 1, center = false);\n            \n            // Sub-branches\n            for (j = [0:60:300]) {\n                translate([0, 0, 10]) {\n                    rotate([0, j, 0]) {\n                        translate([1, 0, 0]) {\n                            rotate([45, 0, 0]) {\n                                cylinder(h = 25, d1 = 1.5, d2 = 0.5, center = false);\n                                leaves();\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Lower sub-branches\n            for (k = [0:90:270]) {\n                translate([0, 0, 25]) {\n                    rotate([0, k + 45, 0]) {\n                        translate([0.5, 0, 0]) {\n                            rotate([60, 0, 0]) {\n                                cylinder(h = 20, d1 = 1, d2 = 0.5, center = false);\n                                leaves();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate leaves on branches\nmodule leaves() {\n    // Create small ellipsoid leaves\n    for (l = [0:12:48]) {\n        translate([0, 0, l]) {\n            rotate([0, 90, 0]) {\n                scale([1, 0.6, 0.3]) {\n                    sphere(d = 2);\n                }\n            }\n        }\n    }\n    \n    // Additional leaves on sides\n    translate([0, 1.5, 10]) {\n        rotate([0, 45, 0]) {\n            scale([1, 0.6, 0.3]) {\n                sphere(d = 2);\n            }\n        }\n    }\n    \n    translate([0, -1.5, 15]) {\n        rotate([0, -45, 0]) {\n            scale([1, 0.6, 0.3]) {\n                sphere(d = 2);\n            }\n        }\n    }\n}\n\n// Generate the complete willow plant\nwillow_plant();",
    "renders": true
  },
  {
    "plant": "birch",
    "openscad_code": "// Realistic birch tree - 3D printable\n// Medium complexity, ~110 lines\n\n$fn=36; // Smooth curves for 3D printing\n\n// Main birch tree module\nmodule birch_tree(height=120, base_diameter=15) {\n    \n    // Trunk - white with black markings\n    union() {\n        // Main trunk\n        color(\"white\")\n        cylinder(h=height, d1=base_diameter, d2=base_diameter*0.7);\n        \n        // Bark texture - black markings\n        for(i=[0:15:height-20]) {\n            rotate([0, 0, i*137.5])\n            translate([0, 0, i])\n            color(\"black\")\n            linear_extrude(height=5, center=true)\n            scale([1, 0.3, 1])\n            circle(d=base_diameter*0.8);\n        }\n    }\n    \n    // Branches\n    for(i=[1:3]) {\n        rotate([0, 0, i*120]) {\n            translate([0, 0, height*0.7])\n            rotate([30, 0, 0])\n            branch(height*0.4, base_diameter*0.5);\n        }\n    }\n    \n    // Top branches\n    for(i=[1:5]) {\n        rotate([0, 0, i*72]) {\n            translate([0, 0, height-15])\n            rotate([20, 0, 0])\n            branch(height*0.25, base_diameter*0.3);\n        }\n    }\n}\n\n// Branch module with leaves\nmodule branch(length, diameter) {\n    union() {\n        // Branch structure\n        color(\"white\")\n        cylinder(h=length, d1=diameter, d2=diameter*0.3);\n        \n        // Sub-branches\n        for(j=[1:3]) {\n            rotate([0, 0, j*120])\n            translate([0, 0, length*0.6])\n            rotate([30, 0, 0])\n            cylinder(h=length*0.4, d1=diameter*0.5, d2=diameter*0.2);\n        }\n        \n        // Leaf clusters\n        for(k=[0:20:length]) {\n            translate([0, 0, k])\n            rotate([0, 0, k*45])\n            leaf_cluster(diameter*2);\n        }\n    }\n}\n\n// Birch leaf cluster\nmodule leaf_cluster(size) {\n    color([0.2, 0.4, 0.1, 0.8])\n    for(l=[0:60:360]) {\n        rotate([0, 0, l])\n        translate([size*0.8, 0, 0])\n        rotate([90, 0, 0])\n        \n        // Individual leaf shape\n        scale([1, 1.5, 0.5])\n        sphere(d=size*0.8);\n    }\n}\n\n// Roots for stability\nmodule roots(base_diameter) {\n    color(\"saddlebrown\")\n    for(r=[0:45:315]) {\n        rotate([0, 0, r])\n        translate([base_diameter*0.8, 0, -2])\n        rotate([90, 0, 0])\n        cylinder(h=base_diameter*0.6, d1=base_diameter*0.4, d2=base_diameter*0.2);\n    }\n}\n\n// Base platform for 3D printing\nmodule base() {\n    color(\"darkgreen\")\n    difference() {\n        cylinder(h=3, d=40);\n        cylinder(h=3.5, d=38);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 3])\nbirch_tree(100, 12);\n\ntranslate([0, 0, 0])\nroots(12);\n\ntranslate([0, 0, 0])\nbase();",
    "renders": true
  },
  {
    "plant": "elm",
    "openscad_code": "// Elm Plant - Realistic Style, Medium Complexity\n// Total height: 120mm, Base diameter: 40mm\n\nmodule elm_plant() {\n    // Main trunk\n    color(\"saddlebrown\")\n    union() {\n        // Base trunk\n        cylinder(h = 30, d1 = 12, d2 = 10, $fn = 16);\n        \n        // Upper trunk extension\n        translate([0, 0, 30])\n            cylinder(h = 25, d1 = 10, d2 = 8, $fn = 16);\n            \n        // Top trunk\n        translate([0, 0, 55])\n            cylinder(h = 20, d1 = 8, d2 = 6, $fn = 16);\n    }\n    \n    // Main branches\n    color(\"saddlebrown\")\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([0, 0, 50])\n                rotate([30, 0, 0])\n                    cylinder(h = 35, d1 = 6, d2 = 3, $fn = 8);\n    }\n    \n    // Secondary branches\n    color(\"saddlebrown\")\n    for(i = [22.5:45:337.5]) {\n        rotate([0, 0, i])\n            translate([0, 0, 65])\n                rotate([45, 0, 0])\n                    cylinder(h = 25, d1 = 3, d2 = 1.5, $fn = 6);\n    }\n    \n    // Elm leaf clusters - characteristic asymmetrical leaves\n    color(\"forestgreen\")\n    union() {\n        // Top canopy\n        translate([0, 0, 80])\n            sphere(d = 50, $fn = 32);\n            \n        // Mid-level canopy\n        for(i = [0:60:300]) {\n            rotate([0, 0, i])\n                translate([15, 0, 70])\n                    sphere(d = 35, $fn = 24);\n        }\n        \n        // Lower canopy\n        for(i = [30:60:330]) {\n            rotate([0, 0, i])\n                translate([20, 0, 60])\n                    sphere(d = 25, $fn = 16);\n        }\n    }\n    \n    // Individual elm leaves - asymmetrical with serrated edges\n    color(\"darkgreen\")\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([20, 0, 75])\n                rotate([90, 0, 0])\n                    scale([1, 0.6, 0.1])\n                        cylinder(h = 8, d = 12, $fn = 3);\n                        \n        rotate([0, 0, i + 15])\n            translate([15, 5, 65])\n                rotate([75, 0, 0])\n                    scale([1, 0.5, 0.1])\n                        cylinder(h = 6, d = 10, $fn = 3);\n    }\n    \n    // Root system base for stability\n    color(\"saddlebrown\")\n    difference() {\n        cylinder(h = 8, d = 40, $fn = 32);\n        translate([0, 0, -1])\n            cylinder(h = 10, d = 36, $fn = 32);\n    }\n    \n    // Surface roots\n    color(\"saddlebrown\")\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([15, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 20, d1 = 4, d2 = 2, $fn = 8);\n    }\n}\n\nelm_plant();",
    "renders": true
  },
  {
    "plant": "ash",
    "openscad_code": "// OpenSCAD Ash Plant – realistic style, medium complexity\n// Overall height ≈ 120 mm\n\n$fn = 30;\n\n// Stem parameters\nstem_h = 100;\nstem_r = 4;\n\n// Leaf parameters\nleaf_l = 25;\nleaf_w = 4;\nleaf_t = 1.5;\nleaflets = 9;\n\n// Seed parameters\nseed_l = 20;\nseed_r = 1.5;\nseeds = 3;\n\n// Main assembly\nmodule ash_plant() {\n    union() {\n        // Stem\n        color(\"saddlebrown\")\n        cylinder(h = stem_h, r = stem_r, center = false);\n\n        // Leaf cluster at top\n        translate([0, 0, stem_h])\n        rotate([0, 0, 0])\n        leaf_cluster();\n\n        // Additional leaf cluster halfway\n        translate([0, 0, stem_h * 0.5])\n        rotate([0, 0, 30])\n        leaf_cluster();\n\n        // Seed clusters\n        for (i = [0 : seeds - 1])\n            translate([0, 0, stem_h * (0.7 + i * 0.1)])\n            rotate([0, 0, i * 120])\n            seed_cluster();\n    }\n}\n\n// Single compound leaf\nmodule leaf_cluster() {\n    for (i = [0 : leaflets - 1]) {\n        angle = i * (360 / leaflets);\n        translate([0, 0, -leaf_t / 2])\n        rotate([0, 0, angle])\n        translate([stem_r + leaf_w / 2, 0, 0])\n        rotate([0, 90, 0])\n        color(\"forestgreen\")\n        scale([leaf_l, leaf_w, leaf_t])\n        ellipsoid();\n    }\n}\n\n// Ellipsoid primitive (approximated)\nmodule ellipsoid() {\n    scale([1, 1, 0.6])\n    sphere(r = 1);\n}\n\n// Seed cluster (samara)\nmodule seed_cluster() {\n    for (a = [0 : 120 : 240]) {\n        rotate([0, 0, a])\n        translate([stem_r + 2, 0, 0])\n        rotate([-30, 0, 0])\n        color(\"beige\")\n        samara();\n    }\n}\n\n// Single samara wing\nmodule samara() {\n    union() {\n        // Seed body\n        translate([0, 0, seed_l / 2])\n        rotate([90, 0, 0])\n        cylinder(h = seed_l, r = seed_r, center = true);\n\n        // Wing\n        translate([0, seed_l / 2, 0])\n        rotate([90, 0, 0])\n        linear_extrude(height = 0.8, center = true, convexity = 10)\n        polygon(points = [[0, 0], [seed_l * 0.5, seed_l], [-seed_l * 0.5, seed_l]]);\n    }\n}\n\n// Render the plant\nash_plant();",
    "renders": true
  },
  {
    "plant": "cherry",
    "openscad_code": "// Cherry Plant - Realistic Style\n// Total height ~120mm, printable without overhangs\n\n// Stem module - tapered cylinder with internal hole\nmodule stem(h, r1, r2) {\n    difference() {\n        cylinder(h=h, r1=r1, r2=r2, $fn=20);\n        translate([0,0,-1])\n            cylinder(h=h+2, r1=r1-2, r2=r2-2, $fn=20);\n    }\n}\n\n// Leaf module - simple ellipsoid blade with central vein\nmodule leaf(length, width) {\n    difference() {\n        // Main leaf shape\n        scale([1, width/length, 0.3])\n            sphere(r=length/2, $fn=30);\n        \n        // Central vein depression\n        translate([0,0,-0.5])\n            scale([1, 0.1, 0.1])\n                sphere(r=length/2, $fn=20);\n    }\n}\n\n// Cherry fruit - sphere with stem attachment\nmodule cherry(radius) {\n    union() {\n        // Main cherry body\n        sphere(r=radius, $fn=30);\n        \n        // Stem attachment point\n        translate([0,0,radius])\n            cylinder(h=3, r=2, $fn=10);\n    }\n}\n\n// Branch segment with leaves\nmodule branch_segment(length, angle, leaves) {\n    translate([0,0,5])\n        rotate([0,0,angle])\n            union() {\n                // Branch\n                stem(h=length, r1=3, r2=2);\n                \n                // Leaves along branch\n                for(i=[1:leaves]) {\n                    rotate([0,0,i*120])\n                        translate([length*0.3*i/leaves,0,0])\n                            rotate([0,-30,0])\n                                leaf(15, 8);\n                }\n            }\n}\n\n// Main cherry cluster\nmodule cherry_cluster() {\n    union() {\n        // Central cherry\n        cherry(8);\n        \n        // Side cherries\n        translate([12,0,0])\n            cherry(7);\n        translate([-10,6,2])\n            cherry(7);\n        translate([-8,-6,1])\n            cherry(7);\n    }\n}\n\n// Main plant structure\nunion() {\n    // Base stem\n    stem(h=40, r1=4, r2=3);\n    \n    // First branch level\n    translate([0,0,35])\n        branch_segment(25, 30, 2);\n    \n    // Second branch level\n    translate([0,0,30])\n        branch_segment(20, -45, 2);\n    \n    // Third branch level\n    translate([0,0,25])\n        branch_segment(30, 180, 3);\n    \n    // Cherry clusters at branch ends\n    translate([cos(30)*20, sin(30)*20, 35+25])\n        cherry_cluster();\n    \n    translate([cos(-45)*15, sin(-45)*15, 30+20])\n        cherry(8);\n    \n    translate([-30, 0, 25+30])\n        cherry_cluster();\n    \n    // Ground base for stability\n    translate([0,0,-5])\n        cylinder(h=5, r=8, $fn=20);\n}",
    "renders": true
  },
  {
    "plant": "appletree",
    "openscad_code": "// Apple Tree – OpenSCAD, realistic style, medium complexity\n// Overall height ≈ 120 mm, printable without supports\n\n$fn = 36;\n\n// Main parameters\ntrunk_h = 60;\ntrunk_r = 6;\ncanopy_d = 70;\ncanopy_h = 60;\napple_r = 4;\n\n// -----------------\n// Trunk & branches\n// -----------------\nmodule trunk() {\n    // Main trunk\n    cylinder(h = trunk_h, r1 = trunk_r, r2 = trunk_r * 0.8);\n\n    // First level branches\n    for (a = [0:120:240]) {\n        translate([0, 0, trunk_h * 0.4])\n            rotate([0, 75, a])\n            cylinder(h = 25, r1 = trunk_r * 0.6, r2 = 2);\n    }\n\n    // Second level branches\n    for (a = [60:120:300]) {\n        translate([0, 0, trunk_h * 0.7])\n            rotate([0, 60, a])\n            cylinder(h = 20, r1 = trunk_r * 0.4, r2 = 1.5);\n    }\n}\n\n// -----------------\n// Leaves (simple spheres)\n// -----------------\nmodule leaves() {\n    translate([0, 0, trunk_h + canopy_h * 0.2]) {\n        // Outer shell for canopy\n        difference() {\n            sphere(d = canopy_d);\n            translate([0, 0, -canopy_h])\n                cube([canopy_d * 2, canopy_d * 2, canopy_h * 1.5], center = true);\n        }\n\n        // Internal spheres for volume\n        for (i = [0:15]) {\n            rotate([rands(-30, 30, 1)[0], rands(0, 360, 1)[0], 0])\n                translate(rands([-20, -20, -10], [20, 20, 30], 1))\n                    sphere(d = rands(12, 18, 1)[0]);\n        }\n    }\n}\n\n// -----------------\n// Apples\n// -----------------\nmodule apples() {\n    for (i = [0:4]) {\n        rotate([rands(-20, 20, 1)[0], 0, i * 72])\n            translate([rands(18, 25, 1)[0], 0, trunk_h + rands(15, 45, 1)[0]])\n                sphere(r = apple_r);\n    }\n\n    // Small indentation on top\n    for (i = [0:4]) {\n        rotate([rands(-20, 20, 1)[0], 0, i * 72])\n            translate([rands(18, 25, 1)[0], 0, trunk_h + rands(15, 45, 1)[0]])\n                translate([0, 0, apple_r - 0.5])\n                    cylinder(h = 1.5, r1 = 1, r2 = 0.5);\n    }\n}\n\n// -----------------\n// Base plate for printing\n// -----------------\nmodule base() {\n    translate([0, 0, -2])\n        cylinder(h = 2, r = trunk_r * 1.5);\n}\n\n// -----------------\n// Assembly\n// -----------------\nunion() {\n    base();\n    trunk();\n    leaves();\n    apples();\n}",
    "renders": true
  },
  {
    "plant": "beech",
    "openscad_code": "// Beech plant (Fagus sylvatica) – realistic medium-complexity model\n// Total height ≈ 110 mm, leaf spread ≈ 100 mm\n// 2 mm wall thickness, no over-hhangs, printable without support\n\n$fa = 2; $fs = 0.5;\n\n// ---------- Parameters ----------\ntrunk_h  = 70;   // mm\ntrunk_r  = 4;\nbranch_r = 2.5;\nleaf_t   = 1.5;  // leaf thickness\nleaf_l   = 18;   // leaf length\nleaf_w   = 12;   // leaf width\n\n// ---------- Trunk ----------\nmodule trunk() {\n    difference() {\n        cylinder(h = trunk_h, r1 = trunk_r, r2 = trunk_r * 0.9, center = false);\n        translate([-trunk_r + 1, -trunk_r + 1, 0])\n            cube([trunk_r * 2 - 2, trunk_r * 2 - 2, trunk_h]);\n    }\n}\n\n// ---------- Branch ----------\nmodule branch(len, ang, rot) {\n    translate([0, 0, trunk_h * 0.8])\n    rotate([ang, 0, rot])\n    cylinder(h = len, r1 = branch_r, r2 = branch_r * 0.6, center = false);\n}\n\n// ---------- Single Beech Leaf ----------\nmodule leaf() {\n    // Elliptical blade with pointed drip tip\n    difference() {\n        scale([1, leaf_w / leaf_l, 1])\n            sphere(d = leaf_l, $fn = 24);\n\n        // Drip tip\n        translate([leaf_l * 0.5 - 1, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = leaf_l * 0.3, r1 = 0, r2 = leaf_w * 0.2, center = false);\n    }\n\n    // Central vein\n    color(\"brown\")\n    translate([0, 0, -leaf_t / 2])\n    scale([leaf_l * 0.85, 0.4, leaf_t])\n    sphere(d = 1);\n}\n\n// ---------- Leaf Cluster ----------\nmodule leaf_cluster(base_ang, base_rot) {\n    translate([0, 0, trunk_h * 0.8])\n    rotate([base_ang, 0, base_rot])\n    translate([0, 0, 25]) // end of branch\n    for (i = [0 : 30 : 150])\n        rotate([0, i, i * 1.2])\n        translate([0, 0, leaf_l * 0.5])\n        rotate([90, 0, 0])\n        leaf();\n}\n\n// ---------- Main ----------\nunion() {\n    trunk();\n\n    // Primary branches\n    for (rot = [0 : 120 : 240])\n        branch(25, 35, rot);\n\n    // Secondary branches and leaves\n    leaf_cluster(30, 0);\n    leaf_cluster(25, 120);\n    leaf_cluster(40, 240);\n}",
    "renders": true
  },
  {
    "plant": "cedar",
    "openscad_code": "// Cedar plant - realistic style, 3D-printable\n// Overall height 120 mm, base width 40 mm\n\n// Trunk module - tapered for realism\nmodule trunk() {\n    // Main trunk cylinder, slightly tapered\n    cylinder(h = 40, r1 = 6, r2 = 4.5, $fn = 32);\n    \n    // Sub-trunk branches\n    for (i = [0:120:359]) {\n        rotate([0, 0, i]) {\n            translate([4.5, 0, 25]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 12, r1 = 2.5, r2 = 1.5, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\n// Needle cluster - small cylinders as cedar needles\nmodule needle_cluster(radius, height) {\n    difference() {\n        // Cluster base\n        sphere(r = radius, $fn = 20);\n        \n        // Hollow out for printing\n        sphere(r = radius - 2, $fn = 20);\n    }\n    \n    // Individual needles\n    for (i = [0:30:359]) {\n        rotate([0, 0, i]) {\n            for (j = [0:15:45]) {\n                rotate([j, 0, 0]) {\n                    translate([0, 0, radius - 1]) {\n                        cylinder(h = 3, r = 0.4, $fn = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Branch with needle clusters\nmodule branch(length, angle, start_radius) {\n    rotate([0, angle, 0]) {\n        // Branch cylinder\n        cylinder(h = length, r = start_radius, r2 = start_radius * 0.7, $fn = 16);\n        \n        // Needle clusters along branch\n        for (i = [0.3 : 0.25 : 0.9]) {\n            translate([0, 0, i * length]) {\n                rotate([0, 90, 0]) {\n                    translate([0, 0, start_radius * 0.9]) {\n                        needle_cluster(4 + i * 2, 6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main cedar plant assembly\nunion() {\n    // Base pot\n    difference() {\n        cylinder(h = 15, r = 20, $fn = 64);\n        translate([0, 0, 2]) {\n            cylinder(h = 13, r = 18, $fn = 64);\n        }\n    }\n    \n    // Soil surface\n    translate([0, 0, 15]) {\n        cylinder(h = 3, r = 18, $fn = 64);\n    }\n    \n    // Trunk emerging from pot\n    translate([0, 0, 15]) {\n        trunk();\n    }\n    \n    // Main branches\n    translate([0, 0, 55]) {\n        for (i = [0:60:359]) {\n            rotate([0, 0, i]) {\n                branch(25, 30, 2.5);\n            }\n        }\n    }\n    \n    // Upper branches\n    translate([0, 0, 75]) {\n        for (i = [30:60:389]) {\n            rotate([0, 0, i]) {\n                branch(20, 25, 2);\n            }\n        }\n    }\n    \n    // Top cone\n    translate([0, 0, 90]) {\n        cylinder(h = 30, r1 = 20, r2 = 8, $fn = 32);\n        \n        // Needle clusters on top\n        for (i = [0:45:359]) {\n            rotate([0, 0, i]) {\n                translate([15, 0, 15]) {\n                    needle_cluster(5, 8);\n                }\n                translate([10, 0, 25]) {\n                    needle_cluster(4, 6);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "plant": "spruce",
    "openscad_code": "// Spruce plant - realistic style, medium complexity\n// Overall height: 120mm, base diameter: 45mm\n\n// Constants\ntrunk_h = 50;\ntrunk_r = 6;\nlevels = 6;\nbranch_angle = 25;\nwall = 2;\n\n// Trunk module\nmodule trunk() {\n    // Main trunk\n    cylinder(h=trunk_h, r1=trunk_r, r2=trunk_r*0.7, $fn=16);\n    \n    // Trunk segments\n    for(i = [1:3]) {\n        translate([0, 0, i*trunk_h/4])\n        difference() {\n            cylinder(h=trunk_h/6, r1=trunk_r*1.2, r2=trunk_r, $fn=16);\n            cylinder(h=trunk_h/6+2, r1=trunk_r*1.2-wall, r2=trunk_r-wall, $fn=16);\n        }\n    }\n}\n\n// Branch module\nmodule branch(level, angle) {\n    len = 25 - level*3;\n    thick = 4 - level*0.4;\n    \n    // Main branch\n    rotate([0, angle, 0])\n    translate([0, 0, level*15])\n    union() {\n        cylinder(h=len, r=thick, $fn=8);\n        \n        // Sub branches\n        for(i = [1:3]) {\n            rotate([0, 0, i*120])\n            translate([len*0.7, 0, 0])\n            rotate([0, -20, 0])\n            cylinder(h=len*0.6, r=thick*0.7, $fn=6);\n        }\n    }\n}\n\n// Needle cluster\nmodule needles(pos, size) {\n    translate(pos)\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n        translate([size, 0, 0])\n        scale([0.3, 0.3, 1])\n        sphere(r=size, $fn=6);\n    }\n}\n\n// Tree foliage layer\nmodule foliage_layer(level) {\n    layer_r = 40 - level*5;\n    layer_h = 10;\n    \n    // Conical layer\n    difference() {\n        cylinder(h1=layer_h, r1=layer_r, r2=layer_r-10, $fn=32);\n        cylinder(h1=layer_h+2, r1=layer_r-wall, r2=layer_r-10-wall, $fn=32);\n    }\n    \n    // Needle clusters on surface\n    for(i = [0:8]) {\n        rotate([0, 0, i*40])\n        translate([layer_r-5, 0, level*15+layer_h/2])\n        needles([0, 0, 0], 3);\n    }\n}\n\n// Base\nmodule base() {\n    difference() {\n        cylinder(h=10, r=25, $fn=32);\n        cylinder(h=12, r=23, $fn=32);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    translate([0, 0, 0])\n    base();\n    \n    // Trunk\n    translate([0, 0, 10])\n    trunk();\n    \n    // Branches\n    for(level = [0:levels-1]) {\n        for(angle = [branch_angle, -branch_angle]) {\n            branch(level, angle);\n            rotate([0, 0, 90])\n            branch(level, angle);\n            rotate([0, 0, 180])\n            branch(level, angle);\n            rotate([0, 0, 270])\n            branch(level, angle);\n        }\n    }\n    \n    // Foliage layers\n    for(level = [0:levels-1]) {\n        translate([0, 0, 20 + level*15])\n        foliage_layer(level);\n    }\n    \n    // Top cone\n    translate([0, 0, 110])\n    difference() {\n        cylinder(h=10, r1=5, r2=0, $fn=16);\n        cylinder(h=12, r1=3, r2=0, $fn=16);\n    }\n}",
    "renders": true
  },
  {
    "plant": "fir",
    "openscad_code": "// Realistic Fir Plant - OpenSCAD\n// 3D printable fir tree with appropriate proportions\n\n// Parameters\ntrunk_height = 50;\ntrunk_radius = 8;\nbase_width = 30;\nleaf_color = \"green\";\ntrunk_color = \"brown\";\n\n// Module for a single branch with needles\nmodule branch(level, angle, length) {\n    // Branch structure\n    translate([0, 0, level * 10])\n    rotate([0, 0, angle]) {\n        // Main branch cylinder\n        color(leaf_color)\n        rotate([90, 0, 0])\n        cylinder(h = length, r1 = 3, r2 = 1, $fn = 8);\n        \n        // Needle clusters along branch\n        for(i = [1:length/3]) {\n            translate([0, i * 3, 0])\n            rotate([0, 0, i * 45])\n            scale([1, 0.3, 1])\n            sphere(r = 2, $fn = 6);\n        }\n    }\n}\n\n// Module for foliage layer\nmodule foliage_layer(height, radius, layer) {\n    // Central cone for this layer\n    color(\"darkgreen\")\n    translate([0, 0, height])\n    cylinder(h = 15, r1 = radius, r2 = radius * 0.7, $fn = 12);\n    \n    // Branches radiating from center\n    for(i = [0:45:359]) {\n        branch(height, i, radius * 0.8);\n    }\n}\n\n// Trunk with bark texture\nmodule trunk() {\n    color(\"saddlebrown\")\n    difference() {\n        // Main trunk cylinder\n        cylinder(h = trunk_height, r = trunk_radius, $fn = 12);\n        \n        // Bark grooves for texture\n        for(i = [0:15:trunk_height]) {\n            translate([0, 0, i])\n            rotate([0, 0, i * 30])\n            cube([trunk_radius * 2, 1, 5], center = true);\n        }\n    }\n}\n\n// Root system base\nmodule roots() {\n    color(\"saddlebrown\")\n    difference() {\n        // Base cone\n        cylinder(h = 10, r1 = base_width, r2 = trunk_radius, $fn = 16);\n        \n        // Root grooves\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n            translate([trunk_radius, 0, 5])\n            cube([15, 2, 10], center = true);\n        }\n    }\n}\n\n// Main tree assembly\nmodule fir_tree() {\n    union() {\n        // Root system at bottom\n        roots();\n        \n        // Trunk\n        trunk();\n        \n        // Multiple foliage layers with decreasing size\n        foliage_layer(10, 40, 1);\n        foliage_layer(25, 35, 2);\n        foliage_layer(40, 30, 3);\n        foliage_layer(55, 25, 4);\n        foliage_layer(70, 20, 5);\n        foliage_layer(85, 15, 6);\n        \n        // Top cone\n        color(\"darkgreen\")\n        translate([0, 0, 95])\n        cylinder(h = 15, r1 = 10, r2 = 0, $fn = 12);\n    }\n}\n\n// Generate the tree\nfir_tree();",
    "renders": true
  },
  {
    "plant": "cypress",
    "openscad_code": "// Cypress Tree - Realistic Style, Medium Complexity\n// Designed for 3D printing with 2mm wall thickness and no overhangs\n\n// Main parameters\nheight = 100;  // Total height in mm\nbase_radius = 25;  // Base radius in mm\ntrunk_ratio = 0.4;  // Trunk height ratio\nwall_thickness = 2;  // For 3D printing\n\n// Trunk module with tapered shape\nmodule trunk() {\n    union() {\n        // Main trunk cylinder\n        cylinder(h=height*trunk_ratio, r1=base_radius/3, r2=base_radius/4, $fn=32);\n        \n        // Trunk texture rings\n        for(i=[1:5:height*trunk_ratio-5]) {\n            translate([0, 0, i])\n            difference() {\n                cylinder(h=2, r1=base_radius/3+1, r2=base_radius/4+1, $fn=32);\n                cylinder(h=3, r1=base_radius/3-1, r2=base_radius/4-1, $fn=32);\n            }\n        }\n    }\n}\n\n// Single branch module\nmodule branch(level, angle, length) {\n    if(level < 4) {\n        rotate([0, 0, angle])\n        rotate([30 + level*10, 0, 0])\n        translate([0, 0, 5])\n        union() {\n            // Branch structure\n            cylinder(h=length, r1=wall_thickness, r2=wall_thickness*0.7, $fn=16);\n            \n            // Sub-branches\n            for(i=[0:60:359]) {\n                translate([0, 0, length*0.7])\n                scale([0.7, 0.7, 0.7])\n                branch(level+1, i, length*0.8);\n            }\n            \n            // Foliage cluster at branch tip\n            translate([0, 0, length])\n            scale([0.5, 0.5, 0.6])\n            foliage_cluster();\n        }\n    }\n}\n\n// Foliage cluster module (cypress cone shape)\nmodule foliage_cluster() {\n    // Main foliage body - tapered cylinder\n    difference() {\n        cylinder(h=20, r1=8, r2=0.5, $fn=16);\n        \n        // Remove center for hollow printing\n        cylinder(h=20, r1=6, r2=0, $fn=16);\n    }\n    \n    // Add texture layers\n    for(i=[5:5:15]) {\n        translate([0, 0, i])\n        scale([1 - i/30, 1 - i/30, 0.2])\n        difference() {\n            cylinder(h=3, r1=8 - i/2, r2=6 - i/2, $fn=16);\n            cylinder(h=4, r1=6 - i/2, r2=4 - i/2, $fn=16);\n        }\n    }\n}\n\n// Root system base\nmodule root_base() {\n    difference() {\n        // Main root flare\n        cylinder(h=10, r1=base_radius+5, r2=base_radius, $fn=32);\n        \n        // Hollow for printing\n        cylinder(h=12, r1=base_radius+3, r2=base_radius-2, $fn=32);\n    }\n    \n    // Surface roots\n    for(i=[0:45:359]) {\n        rotate([0, 0, i])\n        translate([base_radius-2, 0, 5])\n        rotate([90, 0, 0])\n        cylinder(h=15, r=wall_thickness, $fn=8);\n    }\n}\n\n// Main tree assembly\nunion() {\n    // Root system\n    root_base();\n    \n    // Trunk\n    translate([0, 0, 10])\n    trunk();\n    \n    // Main branches\n    for(i=[0:60:359]) {\n        translate([0, 0, height*trunk_ratio*0.3])\n        branch(0, i, height*0.15);\n    }\n    \n    // Upper foliage cone\n    translate([0, 0, height*trunk_ratio])\n    scale([1, 1, 1.2])\n    foliage_cluster();\n}",
    "renders": true
  },
  {
    "plant": "sequoia",
    "openscad_code": "// Sequoia tree model for 3D printing\n// Medium complexity - realistic style\n\n$fn = 32;\n\n// Overall scale\nscale_factor = 1;\n\n// Trunk parameters\ntrunk_height = 70 * scale_factor;\ntrunk_bottom_radius = 12 * scale_factor;\ntrunk_top_radius = 8 * scale_factor;\n\n// Branch parameters\nbranch_levels = 5;\nbranches_per_level = [3, 4, 5, 6, 7];\nbranch_start_height = [15, 30, 45, 55, 65];\nbranch_length = [20, 18, 15, 12, 8];\nbranch_radius = [2.5, 2.2, 1.8, 1.5, 1.2];\nbranch_angle = [25, 30, 35, 40, 45];\n\n// Foliage parameters\nfoliage_clusters = 20;\nfoliage_radius = [6, 5, 4, 3.5, 3];\nfoliage_scale = [1.5, 1.3, 1.1, 0.9, 0.7];\n\n// Base parameters\nbase_height = 3 * scale_factor;\nbase_radius = 15 * scale_factor;\n\nmodule trunk() {\n    // Main tapered trunk\n    cylinder(h = trunk_height, r1 = trunk_bottom_radius, r2 = trunk_top_radius, center = false);\n    \n    // Trunk texture - subtle ridges\n    for (i = [0 : 5 : trunk_height]) {\n        translate([0, 0, i]) {\n            difference() {\n                cylinder(h = 2, r1 = trunk_bottom_radius - (trunk_bottom_radius - trunk_top_radius) * i/trunk_height, \n                              r2 = trunk_bottom_radius - (trunk_bottom_radius - trunk_top_radius) * (i+2)/trunk_height, center = false);\n                cylinder(h = 2.1, r1 = trunk_bottom_radius - (trunk_bottom_radius - trunk_top_radius) * i/trunk_height - 1, \n                              r2 = trunk_bottom_radius - (trunk_bottom_radius - trunk_top_radius) * (i+2)/trunk_height - 1, center = false);\n            }\n        }\n    }\n}\n\nmodule branch(level, angle, length, radius) {\n    // Branch stem\n    rotate([0, 0, angle]) {\n        rotate([90 - branch_angle[level-1], 0, 0]) {\n            cylinder(h = length, r = radius, center = false);\n            \n            // Sub-branches\n            if (level < 4) {\n                for (sub = [0 : 45 : 135]) {\n                    rotate([0, 0, sub]) {\n                        rotate([30, 0, 0]) {\n                            cylinder(h = length * 0.6, r = radius * 0.6, center = false);\n                            \n                            // Tiny twigs\n                            if (level < 3) {\n                                translate([0, 0, length * 0.6]) {\n                                    rotate([0, 20, 45]) {\n                                        cylinder(h = length * 0.3, r = radius * 0.3, center = false);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule foliage() {\n    // Generate foliage clusters along branches\n    for (level = [0 : branch_levels-1]) {\n        for (b = [0 : branches_per_level[level]-1]) {\n            angle = b * (360 / branches_per_level[level]);\n            height = branch_start_height[level];\n            \n            // Main foliage cluster\n            translate([0, 0, height]) {\n                rotate([0, 0, angle]) {\n                    translate([branch_length[level] * 0.7, 0, 0]) {\n                        // Cluster of spheres for realistic foliage\n                        for (i = [0 : 5]) {\n                            translate([\n                                sin(i * 137.5) * foliage_radius[level] * 0.5,\n                                cos(i * 137.5) * foliage_radius[level] * 0.5,\n                                i * 2 - 5\n                            ]) {\n                                scale([foliage_scale[level], foliage_scale[level], foliage_scale[level] * 1.2]) {\n                                    sphere(r = foliage_radius[level]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule base() {\n    // Root flare base\n    cylinder(h = base_height, r1 = base_radius, r2 = trunk_bottom_radius, center = false);\n    \n    // Root details\n    for (r = [0 : 30 : 330]) {\n        rotate([0, 0, r]) {\n            translate([base_radius - 2, 0, -1]) {\n                scale([1, 0.3, 0.5]) {\n                    sphere(r = 3);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base and trunk\n    base();\n    translate([0, 0, base_height]) {\n        trunk();\n    }\n    \n    // Branches\n    for (level = [0 : branch_levels-1]) {\n        for (b = [0 : branches_per_level[level]-1]) {\n            angle = b * (360 / branches_per_level[level]);\n            height = branch_start_height[level] + base_height;\n            \n            translate([0, 0, height]) {\n                branch(level + 1, angle, branch_length[level], branch_radius[level]);\n            }\n        }\n    }\n    \n    // Foliage\n    foliage();\n}",
    "renders": true
  },
  {
    "plant": "redwood",
    "openscad_code": "// Redwood Plant - Realistic Medium Complexity\n// Features: tapered trunk, textured bark, needle-like branches, root flare, printable base\n\n$fn = 20;\n\n// Overall dimensions\ntree_height = 120;\nbase_diameter = 40;\ntrunk_base = 8;\ntrunk_top = 3;\n\nmodule bark_texture(r, h, segments=8, depth=0.5) {\n    // Creates vertical bark grooves around cylinder\n    difference() {\n        cylinder(r=r, h=h, center=false);\n        for(i=[0:segments-1]) {\n            rotate([0, 0, i*360/segments])\n                translate([r-0.1, -depth/2, 0])\n                    cube([depth*2, depth, h], center=false);\n        }\n    }\n}\n\nmodule trunk() {\n    // Main tapered trunk with bark texture\n    linear_extrude(height=tree_height*0.7, twist=5, scale=[trunk_top/trunk_base, trunk_top/trunk_base])\n        bark_texture(trunk_base, tree_height*0.7, 12, 0.8);\n}\n\nmodule root_flare() {\n    // Wide root system at base\n    difference() {\n        cylinder(h=8, r1=trunk_base*1.8, r2=trunk_base, center=false);\n        translate([0, 0, -1])\n            cube([trunk_base*3.6, trunk_base*3.6, 10], center=true);\n    }\n    // Individual root extensions\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([trunk_base*1.4, -2, 0])\n                scale([1, 0.6, 0.5])\n                    cylinder(h=15, r1=3, r2=1);\n    }\n}\n\nmodule branch(level, angle, length, thickness) {\n    // Recursive branching system\n    if(level > 0) {\n        rotate([angle, 0, 0])\n            translate([0, 0, length/2])\n                union() {\n                    // Main branch segment\n                    cylinder(h=length, r1=thickness/2, r2=thickness/4);\n                    \n                    // Sub-branches\n                    for(side=[-1, 1]) {\n                        rotate([0, 0, side*30])\n                            translate([0, 0, length*0.7])\n                                branch(level-1, angle*0.7 + 20, length*0.7, thickness*0.6);\n                    }\n                    \n                    // Needle clusters\n                    if(level <= 2) {\n                        for(i=[0:4]) {\n                            rotate([0, 0, i*72])\n                                translate([0, thickness/2, length*0.9])\n                                    rotate([90, 0, 0])\n                                        scale([0.5, 0.5, 2])\n                                            sphere(thickness/3);\n                        }\n                    }\n                }\n    }\n}\n\nmodule foliage() {\n    // Top canopy structure\n    translate([0, 0, tree_height*0.7])\n        union() {\n            for(i=[0:3]) {\n                rotate([0, 0, i*90])\n                    branch(4, -30 + i*5, tree_height*0.2, trunk_top*2);\n            }\n            // Upper crown\n            sphere(tree_height*0.15);\n        }\n}\n\nmodule printable_base() {\n    // Stable base with 2mm walls\n    difference() {\n        cylinder(h=5, r=base_diameter/2);\n        translate([0, 0, 2])\n            cylinder(h=3, r=base_diameter/2 - 2);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    color(\"brown\")\n        printable_base();\n    \n    // Roots\n    translate([0, 0, 5])\n        color(\"saddlebrown\")\n            root_flare();\n    \n    // Trunk\n    translate([0, 0, 5])\n        color(\"saddlebrown\")\n            trunk();\n    \n    // Foliage\n    color(\"darkgreen\")\n        foliage();\n}",
    "renders": true
  },
  {
    "plant": "mahogany",
    "openscad_code": "// Mahogany plant in realistic style (medium complexity)\n// Overall height ~120mm, pot ~50mm diameter\n\n$fn = 32;  // Smooth curves for 3D printing\nwall = 2;  // Wall thickness for 3D printing\n\nmodule pot() {\n    // Ceramic pot with drainage hole\n    difference() {\n        // Outer pot shape - truncated cone\n        cylinder(h1 = 35, h2 = 30, r1 = 25, r2 = 20);\n        \n        // Hollow interior\n        translate([0, 0, wall])\n            cylinder(h1 = 33, h2 = 28, r1 = 23, r2 = 18);\n        \n        // Base drainage hole\n        translate([0, 0, -1])\n            cylinder(h = 3, r = 3);\n    }\n    \n    // Pot rim detail\n    translate([0, 0, 34])\n        cylinder(h = 3, r1 = 26, r2 = 25);\n}\n\nmodule soil() {\n    // Soil surface inside pot\n    color(\"saddlebrown\")\n    translate([0, 0, 2])\n        cylinder(h = 8, r1 = 22, r2 = 17);\n}\n\nmodule trunk() {\n    // Main trunk - slightly tapered cylinder\n    color(\"saddlebrown\")\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([0, 0, 10])\n                cylinder(h = 18, r1 = 3, r2 = 2.5);\n    }\n    \n    // Trunk joints\n    translate([0, 0, 25])\n        sphere(r = 3.5);\n}\n\nmodule leaves() {\n    // Mahogany compound leaf structure\n    color(\"forestgreen\")\n    \n    // Main leaf stem\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([0, 0, 28])\n                rotate([20 + i * 3, 0, 0])\n                    leaf_cluster();\n    }\n}\n\nmodule leaf_cluster() {\n    // Individual leaf cluster with 6-8 leaflets\n    for(j = [0:6]) {\n        rotate([0, 0, j * 25])\n            translate([0, 0, j * 4])\n                leaflet();\n    }\n}\n\nmodule leaflet() {\n    // Individual leaflet shape - elongated oval\n    scale([1, 0.3, 0.1])\n        rotate([0, 90, 0])\n            cylinder(h = 20, r1 = 8, r2 = 6);\n    \n    // Leaflet stem\n    translate([0, 0, -2])\n        rotate([90, 0, 0])\n            cylinder(h = 10, r = 0.5);\n}\n\nmodule roots() {\n    // Visible surface roots\n    color(\"saddlebrown\")\n    for(i = [0:3]) {\n        rotate([0, 0, i * 120])\n            translate([8, 0, 5])\n                rotate([0, 90 - i * 10, 0])\n                    cylinder(h = 15, r1 = 1.5, r2 = 0.8);\n    }\n}\n\n// Assembly\nunion() {\n    pot();\n    soil();\n    roots();\n    trunk();\n    leaves();\n}",
    "renders": true
  },
  {
    "plant": "teak",
    "openscad_code": "// Teak Plant (Tectona grandis) - Realistic Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Main parameters\ntrunk_height = 80;\ntrunk_radius = 6;\nleaf_length = 25;\nleaf_width = 15;\nleaf_thickness = 2;\npot_height = 30;\npot_radius = 35;\nwall_thickness = 2;\n\n// Trunk module with characteristic teak bark texture\nmodule trunk() {\n    // Main trunk cylinder\n    cylinder(h=trunk_height, r1=trunk_radius, r2=trunk_radius*0.8, $fn=20);\n    \n    // Bark texture rings\n    for(i = [0:5:trunk_height-10]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(h=3, r1=trunk_radius+1, r2=trunk_radius+0.8, $fn=20);\n                cylinder(h=3.2, r1=trunk_radius, r2=trunk_radius*0.8, $fn=20);\n            }\n    }\n}\n\n// Teak leaf with characteristic shape\nmodule teak_leaf() {\n    // Main leaf body\n    scale([1, 0.8, 0.1])\n        sphere(r=leaf_length/2);\n    \n    // Leaf tip extension\n    translate([0, leaf_length/2-5, 0])\n        scale([0.3, 0.4, 1])\n            sphere(r=leaf_width/2);\n    \n    // Central vein\n    translate([0, -leaf_length/2, 0])\n        rotate([90, 0, 0])\n            cylinder(h=leaf_length, r=leaf_thickness/2, $fn=8);\n    \n    // Side veins\n    for(i = [-leaf_length/3, -leaf_length/6, leaf_length/6, leaf_length/3]) {\n        translate([i, -leaf_length/4, 0])\n            rotate([90, 0, atan2(leaf_length/4, i)])\n                cylinder(h=sqrt(i*i + (leaf_length/4)*(leaf_length/4)), r=leaf_thickness/3, $fn=6);\n    }\n}\n\n// Branch with leaves\nmodule branch_with_leaves(angle, length, rotate_z) {\n    rotate([0, angle, rotate_z])\n        translate([-trunk_radius, 0, 0])\n            union() {\n                // Branch\n                cylinder(h=length, r=trunk_radius/3, $fn=8);\n                \n                // Leaves along branch\n                for(i = [0:15:length-10]) {\n                    translate([0, 0, i])\n                        rotate([0, 90, 0])\n                            teak_leaf();\n                }\n            }\n}\n\n// Plant pot with drainage holes\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_height, r=pot_radius, $fn=32);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n            cylinder(h=pot_height-wall_thickness, r=pot_radius-wall_thickness, $fn=32);\n        \n        // Bottom drainage holes\n        for(i = [0:120:300]) {\n            rotate([0, 0, i])\n                translate([pot_radius/2, 0, 0])\n                    cylinder(h=pot_height, r=3, $fn=8);\n        }\n    }\n    \n    // Rim detail\n    translate([0, 0, pot_height])\n        cylinder(h=5, r=pot_radius+2, r2=pot_radius, $fn=32);\n}\n\n// Assembly\nunion() {\n    // Pot at base\n    pot();\n    \n    // Trunk emerging from pot\n    translate([0, 0, pot_height])\n        trunk();\n    \n    // Main branches with leaves\n    branch_with_leaves(20, 30, 0);\n    branch_with_leaves(30, 35, 72);\n    branch_with_leaves(25, 40, 144);\n    branch_with_leaves(35, 30, 216);\n    branch_with_leaves(20, 38, 288);\n    \n    // Top canopy\n    translate([0, 0, trunk_height-20])\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([0, 15, 0])\n                    rotate([0, 0, 0])\n                        teak_leaf();\n        }\n    \n    translate([0, 0, trunk_height-15])\n        for(i = [22.5:45:337.5]) {\n            rotate([0, 0, i])\n                translate([0, 20, 0])\n                    rotate([0, 0, 0])\n                        teak_leaf();\n        }\n}",
    "renders": true
  },
  {
    "plant": "rosewood",
    "openscad_code": "// OpenSCAD Rosewood Plant - Realistic Medium Complexity\n// Dimensions: ~120mm height, ~80mm diameter pot\n\n// Parameters\npot_height = 35;\npot_radius = 40;\nstem_thickness = 4;\nleaf_length = 25;\nleaf_width = 12;\nleaf_thickness = 2;\n\n// Main plant module\nmodule rosewood_plant() {\n    // Flower pot\n    union() {\n        // Outer pot\n        difference() {\n            cylinder(h=pot_height, r=pot_radius, $fn=64);\n            translate([0, 0, -1])\n                cylinder(h=pot_height+2, r=pot_radius-3, $fn=64);\n        }\n        \n        // Soil surface\n        translate([0, 0, pot_height-5])\n            cylinder(h=5, r=pot_radius-2, $fn=64);\n    }\n    \n    // Main stem\n    translate([0, 0, pot_height-3])\n        cylinder(h=60, r=stem_thickness, $fn=16);\n    \n    // Branching stems and leaves\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([0, 0, pot_height+20])\n                branch_group(i);\n    }\n}\n\n// Branch with leaves group\nmodule branch_group(level) {\n    height = 30 - level*3;\n    translate([0, 0, 0])\n        rotate([30+level*10, 0, 0])\n            cylinder(h=height, r=stem_thickness*0.7, $fn=12);\n    \n    // Sub-branches with leaves\n    for(j=[0:2]) {\n        rotate([0, 0, j*120])\n            translate([0, 0, height*0.3])\n                sub_branch(j);\n    }\n}\n\n// Sub-branch with paired leaves\nmodule sub_branch(offset) {\n    rotate([20+offset*15, 0, 0])\n        cylinder(h=20, r=stem_thickness*0.5, $fn=8);\n    \n    // Leaf pairs\n    for(k=[0:1]) {\n        mirror([0, k*2-1, 0])\n            translate([0, 2, 15])\n                rotate([0, -20, 0])\n                    leaf();\n    }\n}\n\n// Rosewood leaf shape\nmodule leaf() {\n    scale([1, 0.6, 1])\n        difference() {\n            // Main leaf body\n            hull() {\n                sphere(r=leaf_width/2);\n                translate([leaf_length-leaf_width/2, 0, 0])\n                    sphere(r=leaf_width/2);\n            }\n            \n            // Leaf tip point\n            translate([leaf_length-leaf_width/3, 0, -leaf_thickness])\n                sphere(r=leaf_width/3);\n            \n            // Central vein indentation\n            translate([leaf_length/2, 0, leaf_thickness/2])\n                cube([leaf_length-4, 1, leaf_thickness], center=true);\n        }\n}\n\n// Generate the complete plant\nrosewood_plant();",
    "renders": true
  },
  {
    "plant": "sandalwood",
    "openscad_code": "// Sandalwood plant with realistic medium complexity\n// Overall height ~100mm, printable in one piece\n\n// Base stem module\nmodule stem(h, r, taper) {\n    cylinder(h=h, r1=r, r2=r*taper, $fn=20);\n}\n\n// Leaf module - sandalwood leaves are elliptical and opposite\nmodule leaf(length, width, thickness) {\n    // Main leaf blade\n    scale([length, width, thickness]) \n    sphere(1, $fn=20);\n    \n    // Leaf tip extension\n    translate([length*0.8, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=length*0.3, r1=width*0.3, r2=0, $fn=10);\n}\n\n// Leaf pair module (opposite leaves)\nmodule leaf_pair(stem_radius, height_offset, leaf_length, leaf_width, angle) {\n    translate([0, 0, height_offset]) {\n        // Left leaf\n        rotate([0, 0, angle])\n        translate([stem_radius+2, 0, 0])\n        rotate([0, 0, -45])\n        leaf(leaf_length, leaf_width, 0.5);\n        \n        // Right leaf\n        rotate([0, 0, angle+180])\n        translate([stem_radius+2, 0, 0])\n        rotate([0, 0, 45])\n        leaf(leaf_length, leaf_width, 0.5);\n    }\n}\n\n// Main sandalwood plant module\nmodule sandalwood_plant() {\n    // Main trunk - sandalwood has straight trunk\n    color(\"saddlebrown\")\n    stem(60, 4, 0.8);\n    \n    // Secondary branches\n    for(i = [1:3]) {\n        branch_angle = 45 + i*15;\n        rotate([branch_angle, 0, i*120])\n        translate([0, 0, 20 + i*15])\n        color(\"saddlebrown\")\n        stem(30 - i*5, 2.5 - i*0.3, 0.7);\n    }\n    \n    // Leaves along main trunk\n    for(i = [1:8]) {\n        height = 10 + i*6;\n        leaf_length = 12 - i*0.5;\n        leaf_width = 4 - i*0.2;\n        leaf_pair(3.2, height, leaf_length, leaf_width, i*45);\n    }\n    \n    // Leaves on branches\n    for(branch = [1:3]) {\n        branch_angle = 45 + branch*15;\n        for(j = [1:4]) {\n            rotate([branch_angle, 0, branch*120])\n            translate([0, 0, 20 + branch*15 + j*5])\n            leaf_pair(2.5 - branch*0.3, 0, 8 - j*0.5, 3 - j*0.2, j*60);\n        }\n    }\n    \n    // Root flare at base\n    translate([0, 0, -5])\n    color(\"saddlebrown\")\n    cylinder(h=10, r1=6, r2=4, $fn=20);\n    \n    // Small surface roots\n    for(k = [1:5]) {\n        rotate([0, 0, k*72])\n        translate([4, 0, -2])\n        rotate([80, 0, 0])\n        color(\"saddlebrown\")\n        cylinder(h=8, r1=1.5, r2=0.8, $fn=10);\n    }\n}\n\n// Render the plant centered on build plate\ntranslate([0, 0, 5])\nsandalwood_plant();",
    "renders": true
  },
  {
    "plant": "ebony",
    "openscad_code": "// Ebony Plant - Realistic Style, Medium Complexity\n// Overall dimensions: ~100mm height, 80mm width\n// Wall thickness: 2mm for all parts\n\n$fn = 32;  // Smooth curves\n\n// Main module\nmodule ebony_plant() {\n    \n    // Pot base\n    difference() {\n        // Outer pot\n        cylinder(h = 25, d1 = 50, d2 = 45);\n        \n        // Inner hollow\n        translate([0, 0, 2])\n            cylinder(h = 25, d1 = 46, d2 = 41);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h = 3, d = 6);\n    }\n    \n    // Soil surface\n    translate([0, 0, 24])\n        scale([1, 1, 0.3])\n            sphere(d = 45);\n    \n    // Main trunk\n    color(\"brown\")\n    translate([0, 0, 25])\n        cylinder(h = 30, d = 6);\n    \n    // Branch generation module\n    module branch(height, angle, start_radius) {\n        translate([0, 0, height])\n        rotate([angle, 0, 45]) {\n            // Branch structure\n            cylinder(h = 20, d = start_radius * 2);\n            \n            // Sub-branches\n            for (i = [0:2]) {\n                rotate([0, 0, i * 120])\n                translate([0, 0, 15])\n                rotate([30, 0, 0])\n                    cylinder(h = 10, d = start_radius * 0.8);\n            }\n            \n            // Leaves cluster\n            translate([0, 0, 20])\n            for (j = [0:4]) {\n                rotate([0, 0, j * 72])\n                translate([start_radius * 2, 0, 0])\n                rotate([90, 0, 0])\n                    scale([1, 0.6, 0.1])\n                        sphere(d = 12);\n            }\n        }\n    }\n    \n    // Generate main branches\n    for (k = [0:3]) {\n        rotate([0, 0, k * 90])\n        branch(35 + k * 5, 20 + k * 5, 3 - k * 0.5);\n    }\n    \n    // Additional smaller branches\n    for (m = [0:5]) {\n        angle = m * 60;\n        rotate([0, 0, angle])\n        translate([0, 0, 45 + m * 2])\n        rotate([15 + m * 3, 0, 0])\n            cylinder(h = 8, d = 1.5);\n    }\n    \n    // Root details visible at pot top\n    for (n = [0:7]) {\n        rotate([0, 0, n * 45])\n        translate([8, 0, 24.5])\n        rotate([90, 0, 0])\n            scale([0.5, 0.5, 1])\n                cylinder(h = 5, d = 2);\n    }\n    \n    // Leaf details on main trunk\n    for (p = [0:8]) {\n        rotate([0, 0, p * 40])\n        translate([3, 0, 30 + p * 2])\n        rotate([90, 0, 0])\n            scale([0.8, 0.4, 0.1])\n                sphere(d = 6);\n    }\n}\n\n// Render the plant centered\ntranslate([0, 0, 0])\n    ebony_plant();",
    "renders": true
  },
  {
    "plant": "aspen",
    "openscad_code": "// Aspen Tree Model - Realistic Style, Medium Complexity\n// Overall height ~120mm, 3D printable with 2mm walls\n\nmodule trunk_segment(h, r_bottom, r_top) {\n    // Tapered trunk segment\n    cylinder(h=h, r1=r_bottom, r2=r_top, $fn=12);\n}\n\nmodule leaf_cluster(x, y, z, scale, angle) {\n    // Cluster of aspen leaves\n    translate([x, y, z]) {\n        rotate([0, 0, angle]) {\n            scale([scale, scale, scale]) {\n                // Main leaf\n                translate([0, 0, 0]) {\n                    rotate([90, 0, 0]) {\n                        scale([1, 1.4, 0.5]) sphere(r=3, $fn=8);\n                    }\n                }\n                // Side leaves\n                for(i = [0:2]) {\n                    rotate([0, 0, i*120]) {\n                        translate([2.5, 0, 0]) {\n                            rotate([90, 0, 0]) {\n                                scale([0.8, 1.2, 0.4]) sphere(r=2.5, $fn=6);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule aspen_tree() {\n    // Trunk - main stem\n    translate([0, 0, 0]) {\n        union() {\n            // Base trunk\n            trunk_segment(h=15, r_bottom=6, r_top=5);\n            \n            // Middle trunk\n            translate([0, 0, 15]) {\n                trunk_segment(h=20, r_bottom=5, r_top=4);\n            }\n            \n            // Upper trunk\n            translate([0, 0, 35]) {\n                trunk_segment(h=25, r_bottom=4, r_top=3);\n            }\n            \n            // Top trunk\n            translate([0, 0, 60]) {\n                trunk_segment(h=20, r_bottom=3, r_top=2);\n            }\n        }\n    }\n    \n    // Branches\n    for(i = [0:5]) {\n        angle = i * 60;\n        height = 20 + i * 7;\n        \n        translate([0, 0, height]) {\n            rotate([0, 0, angle]) {\n                rotate([30, 0, 0]) {\n                    translate([2.5, 0, 0]) {\n                        trunk_segment(h=15, r_bottom=2.5, r_top=1.5);\n                    }\n                }\n            }\n        }\n        \n        // Secondary branches\n        translate([0, 0, height + 8]) {\n            rotate([0, 0, angle + 30]) {\n                rotate([25, 0, 0]) {\n                    translate([1.5, 0, 0]) {\n                        trunk_segment(h=10, r_bottom=1.5, r_top=1);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Canopy - clusters of leaves\n    for(i = [0:7]) {\n        angle = i * 51.4;\n        radius = 12 + sin(i*45)*3;\n        \n        leaf_cluster(\n            cos(angle) * radius,\n            sin(angle) * radius,\n            75 + sin(i*30) * 10,\n            0.8 + sin(i*60) * 0.2,\n            angle\n        );\n        \n        leaf_cluster(\n            cos(angle + 25) * (radius - 5),\n            sin(angle + 25) * (radius - 5),\n            80 + cos(i*30) * 8,\n            0.7 + cos(i*45) * 0.15,\n            angle + 25\n        );\n    }\n    \n    // Top canopy\n    for(i = [0:4]) {\n        angle = i * 72;\n        leaf_cluster(\n            cos(angle) * 8,\n            sin(angle) * 8,\n            90,\n            1.0,\n            angle\n        );\n    }\n    \n    // Central top leaves\n    leaf_cluster(0, 0, 95, 1.2, 0);\n}\n\n// Base for stability\ntranslate([0, 0, -2]) {\n    cylinder(h=2, r=10, $fn=16);\n}\n\n// Generate the tree\naspen_tree();",
    "renders": true
  },
  {
    "plant": "poplar",
    "openscad_code": "// Poplar tree 3D model – medium complexity, 3D-printable, ~100 mm high\n// All dimensions in mm; 2 mm minimum wall thickness respected\n\nmodule trunk() {\n    // Main trunk cylinder, tapering toward top\n    difference() {\n        cylinder(h = 60, d1 = 12, d2 = 7, $fn = 20);\n        // Hollow core to save material, 2 mm wall\n        translate([0,0,-1]) cylinder(h = 62, d1 = 8, d2 = 3, $fn = 16);\n    }\n}\n\nmodule branch(len, ang, rot) {\n    // Single branch with sub-branches; recursive\n    translate([0,0,len*0.85]) rotate([ang, rot, 0]) {\n        // Branch cylinder, tapering\n        difference() {\n            cylinder(h = len, d1 = len/5, d2 = len/7, $fn = 8);\n            translate([0,0,-1]) cylinder(h = len+2, d1 = len/5-2, d2 = len/7-2, $fn = 8);\n        }\n        if (len > 12) {\n            // Two sub-branches at alternate angles\n            branch(len * 0.65, 25, 30);\n            branch(len * 0.65, 25, -30);\n        }\n    }\n}\n\nmodule leaf(pos, scale) {\n    // Simple elliptical poplar leaf\n    translate(pos) scale([1, 1.7, 0.4]) sphere(d = 8 * scale, $fn = 12);\n}\n\nmodule canopy() {\n    // Crown built by scattering leaves along branch ends\n    for (rot = [0:60:359]) {\n        rotate([0, 0, rot]) {\n            translate([0, 0, 50]) {\n                branch(30, 20, 0);\n                branch(25, 15, 120);\n                branch(25, 15, -120);\n            }\n        }\n    }\n    // Attach leaves at branch tips\n    for (rot = [0:45:359])\n        for (rad = [35:15:65]) {\n            leaf([rad * cos(rot), rad * sin(rot), 85], 0.8);\n            leaf([rad * cos(rot+22), rad * sin(rot+22), 90], 0.9);\n            leaf([rad * cos(rot+11), rad * sin(rot+11), 95], 0.7);\n        }\n}\n\nmodule base() {\n    // Circular base for bed adhesion\n    difference() {\n        cylinder(h = 3, d = 30, $fn = 32);\n        translate([0,0,-1]) cylinder(h = 5, d = 26, $fn = 32);\n    }\n}\n\nunion() {\n    base();\n    translate([0,0,3]) trunk();\n    canopy();\n}",
    "renders": true
  },
  {
    "plant": "cottonwood",
    "openscad_code": "// Cottonwood Plant - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Global parameters\ntrunk_height = 80;\ntrunk_radius = 5;\nleaf_cluster_radius = 25;\nleaf_count = 7;\nbase_radius = 15;\nbase_height = 5;\n\nmodule cottonwood_trunk() {\n    // Main trunk with slight taper\n    cylinder(h=trunk_height, r1=trunk_radius, r2=trunk_radius*0.8, $fn=8);\n    \n    // Bark texture rings\n    for(i=[1:5:trunk_height-10]) {\n        translate([0, 0, i])\n            cylinder(h=2, r=trunk_radius+0.5, $fn=8);\n    }\n}\n\nmodule leaf_cluster() {\n    // Central stem for leaf cluster\n    cylinder(h=leaf_cluster_radius*0.4, r=1.5, $fn=6);\n    \n    // Individual heart-shaped cottonwood leaves\n    for(i=[0:leaf_count-1]) {\n        rotate([0, 0, i*(360/leaf_count)])\n        translate([0, leaf_cluster_radius*0.6, leaf_cluster_radius*0.2])\n        rotate([90-i*5, 0, 0])\n        scale([1, 0.8, 0.3])\n        sphere(r=leaf_cluster_radius*0.5, $fn=12);\n    }\n    \n    // Smaller secondary leaves\n    for(i=[0:leaf_count*2-1]) {\n        rotate([0, 0, i*(360/(leaf_count*2))])\n        translate([0, leaf_cluster_radius*0.3, leaf_cluster_radius*0.1])\n        rotate([75-i*3, 0, 0])\n        scale([0.6, 0.5, 0.2])\n        sphere(r=leaf_cluster_radius*0.3, $fn=8);\n    }\n}\n\nmodule root_system() {\n    // Base root flare\n    cylinder(h=base_height, r1=base_radius, r2=trunk_radius*1.5, $fn=16);\n    \n    // Main surface roots\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([trunk_radius*1.2, 0, base_height/2])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.5])\n        cylinder(h=base_radius*0.8, r1=3, r2=1, $fn=6);\n    }\n    \n    // Secondary roots\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n        translate([base_radius*0.7, 0, base_height*0.3])\n        rotate([80, 0, 0])\n        scale([0.7, 0.7, 0.4])\n        cylinder(h=base_radius*0.5, r1=2, r2=0.5, $fn=4);\n    }\n}\n\nmodule cottonwood_tree() {\n    // Root system at base\n    translate([0, 0, 0])\n        root_system();\n    \n    // Main trunk\n    translate([0, 0, base_height])\n        cottonwood_trunk();\n    \n    // Upper leaf clusters at different heights\n    translate([0, 0, trunk_height*0.6])\n        leaf_cluster();\n    \n    translate([0, 0, trunk_height*0.8])\n        rotate([0, 0, 30])\n        scale([0.8, 0.8, 0.8])\n        leaf_cluster();\n    \n    translate([0, 0, trunk_height])\n        rotate([0, 0, -20])\n        scale([0.9, 0.9, 0.9])\n        leaf_cluster();\n}\n\n// Generate the complete cottonwood plant\ncottonwood_tree();",
    "renders": true
  },
  {
    "plant": "sycamore",
    "openscad_code": "// Sycamore Plant - Realistic Style, Medium Complexity\n// Designed for 3D printing with 2mm wall thickness and no overhangs\n\n// Main parameters\nscale_factor = 1.2;\npot_height = 35;\npot_radius = 40;\nstem_height = 80;\nstem_radius = 5;\nleaf_length = 45;\nleaf_width = 35;\nleaf_thickness = 2;\nnum_leaf_pairs = 5;\n\n// Create the entire sycamore plant\nmodule sycamore_plant() {\n    union() {\n        // Pot\n        translate([0, 0, pot_height/2])\n            pot();\n        \n        // Stem\n        translate([0, 0, pot_height + stem_height/2])\n            stem();\n        \n        // Leaves\n        translate([0, 0, pot_height + stem_height - 10])\n            leaves();\n    }\n}\n\n// Decorative pot with drainage holes\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_height, r=pot_radius, $fn=32);\n        \n        // Inner hollow\n        translate([0, 0, 5])\n            cylinder(h=pot_height-5, r=pot_radius-2, $fn=32);\n        \n        // Drainage holes\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([pot_radius-6, 0, 2])\n                    cylinder(h=2, r=3, $fn=16);\n        }\n        \n        // Top rim\n        translate([0, 0, pot_height-5])\n            cylinder(h=5, r=pot_radius-2, $fn=32);\n    }\n}\n\n// Main stem with realistic texture\nmodule stem() {\n    union() {\n        // Main trunk\n        cylinder(h=stem_height, r=stem_radius, $fn=16);\n        \n        // Texture rings\n        for(i=[1:10]) {\n            translate([0, 0, i*stem_height/11])\n                cylinder(h=1, r=stem_radius+0.5, $fn=16);\n        }\n    }\n}\n\n// Leaf structure with sycamore characteristics\nmodule leaves() {\n    // Create pairs of leaves along stem\n    for(i=[1:num_leaf_pairs]) {\n        rotate([0, 0, i*45])\n            translate([0, 0, i*8])\n                leaf_pair();\n    }\n    \n    // Top cluster\n    rotate([0, 0, 30])\n        translate([0, 0, num_leaf_pairs*8+5])\n            top_leaf_cluster();\n}\n\n// Paired leaves with palmate venation\nmodule leaf_pair() {\n    // Left leaf\n    rotate([0, 0, -45])\n        translate([-leaf_length/3, 0, 0])\n            sycamore_leaf();\n    \n    // Right leaf\n    rotate([0, 0, 45])\n        translate([leaf_length/3, 0, 0])\n            sycamore_leaf();\n}\n\n// Single sycamore leaf with characteristic shape\nmodule sycamore_leaf() {\n    color(\"green\")\n    difference() {\n        union() {\n            // Main leaf blade\n            scale([1, 0.8, 1])\n                sphere(r=leaf_width/2, $fn=32);\n            \n            // Lobed extensions (5 lobes)\n            for(i=[0:4]) {\n                rotate([0, 0, i*72-36])\n                    translate([leaf_length/3, 0, 0])\n                        scale([0.7, 0.5, 1])\n                            sphere(r=leaf_width/3, $fn=16);\n            }\n        }\n        \n        // Central vein\n        translate([0, -leaf_width/4, leaf_thickness/2])\n            cube([leaf_length, leaf_width/2, leaf_thickness], center=true);\n        \n        // Side veins\n        for(i=[-2:2]) {\n            if(i != 0) {\n                rotate([0, 0, i*25])\n                    translate([leaf_length/4, 0, leaf_thickness/2])\n                        scale([0.8, 0.3, 1])\n                            cube([leaf_length/2, leaf_width/4, leaf_thickness], center=true);\n            }\n        }\n        \n        // Petiole hole\n        translate([-leaf_length/2, 0, 0])\n            cylinder(h=leaf_thickness+1, r=3, center=true, $fn=12);\n    }\n}\n\n// Top leaf cluster\nmodule top_leaf_cluster() {\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([leaf_length/4, 0, 0])\n                rotate([0, 0, i*30])\n                    sycamore_leaf();\n    }\n}\n\n// Scale and render the plant\nscale([scale_factor, scale_factor, scale_factor])\n    sycamore_plant();",
    "renders": true
  },
  {
    "plant": "linden",
    "openscad_code": "// Linden tree - realistic style, medium complexity\n// Approx. 100 mm tall, 3D printable\n\n$fn = 32;\n\n// Main trunk module\nmodule trunk() {\n    // Base trunk segment\n    difference() {\n        cylinder(h = 60, d1 = 12, d2 = 8, center = false);\n        // Hollow core for material saving\n        translate([0, 0, 2])\n            cylinder(h = 58, d1 = 8, d2 = 4, center = false);\n    }\n    \n    // Bark texture rings\n    for(i = [0:5:55]) {\n        translate([0, 0, i])\n            scale([1.05, 1.05, 0.5])\n                cylinder(h = 2, d = 12 + sin(i*3)*0.5, center = false);\n    }\n}\n\n// Branch module\nmodule branch(length, thickness, angle, rotation) {\n    translate([0, 0, 50])\n    rotate([angle, 0, rotation])\n    union() {\n        // Main branch\n        difference() {\n            cylinder(h = length, d1 = thickness, d2 = thickness*0.5, center = false);\n            translate([0, 0, 2])\n                cylinder(h = length-2, d1 = thickness-2, d2 = thickness*0.5-1, center = false);\n        }\n        \n        // Sub-branches for leaves\n        for(i = [0.3:0.2:0.9]) {\n            translate([0, 0, length*i])\n            rotate([0, 90, 45*i*360])\n            scale([0.6, 0.6, 0.6])\n                leaf_cluster(thickness*0.8);\n        }\n    }\n}\n\n// Linden leaf cluster\nmodule leaf_cluster(size) {\n    for(i = [0:60:300]) {\n        rotate([0, 0, i])\n        translate([size*1.5, 0, 0])\n        rotate([0, 90, 0])\n        union() {\n            // Leaf blade - heart-shaped\n            scale([1, 1.2, 0.2])\n                sphere(d = size*2);\n            \n            // Leaf tip\n            translate([0, size*1.2, 0])\n                scale([0.3, 0.3, 0.2])\n                    sphere(d = size);\n            \n            // Vein details\n            for(j = [0.3:0.3:1.2]) {\n                rotate([0, 0, -30 + j*60])\n                translate([0, j*size*0.8, 0.2])\n                    cube([0.5, size*0.3, 0.5], center = true);\n            }\n        }\n    }\n}\n\n// Tree crown\nmodule crown() {\n    // Main crown sphere\n    translate([0, 0, 65])\n    scale([1.2, 1.2, 0.8])\n    sphere(d = 40);\n    \n    // Additional leaf groups\n    for(angle = [0:60:300]) {\n        rotate([0, 0, angle])\n        translate([20, 0, 75])\n        scale([0.7, 0.7, 0.7])\n            leaf_cluster(8);\n    }\n    \n    for(angle = [30:60:270]) {\n        rotate([0, 0, angle])\n        translate([15, 0, 85])\n        scale([0.5, 0.5, 0.5])\n            leaf_cluster(6);\n    }\n}\n\n// Assembly\nunion() {\n    // Trunk\n    trunk();\n    \n    // Main branches\n    branch(25, 6, -30, 0);\n    branch(20, 5, -45, 72);\n    branch(22, 5, -35, 144);\n    branch(18, 4, -50, 216);\n    branch(24, 6, -25, 288);\n    \n    // Crown\n    crown();\n    \n    // Root flare at base\n    translate([0, 0, -2])\n    scale([1.2, 1.2, 0.5])\n    cylinder(h = 4, d = 16, center = false);\n}",
    "renders": true
  },
  {
    "plant": "hickory",
    "openscad_code": "// Hickory Plant - Medium Complexity\n// Realistic style with proper proportions and 3D printability\n\n// Main parameters\ntrunk_height = 60;\ntrunk_diameter = 8;\nbranch_start_height = 30;\nleaf_cluster_size = 12;\ntotal_height = 100;\n\n// Trunk module with characteristic hickory bark texture\nmodule hickory_trunk(height, diameter) {\n    union() {\n        // Main trunk cylinder\n        cylinder(h=height, d=diameter, $fn=32);\n        \n        // Bark texture rings\n        for(i = [0:5:height-5]) {\n            translate([0, 0, i]) {\n                difference() {\n                    cylinder(h=3, d=diameter+1, $fn=32);\n                    cylinder(h=3.5, d=diameter-1, $fn=32);\n                }\n            }\n        }\n    }\n}\n\n// Compound leaf structure typical of hickory\nmodule compound_leaf(length, width, leaflet_count) {\n    union() {\n        // Main rachis (central stem)\n        color(\"darkgreen\") \n        rotate([90, 0, 0]) \n        cylinder(h=length, d=1.5, $fn=8);\n        \n        // Leaflets along rachis\n        for(i = [2:3:length-5]) {\n            // Left leaflet\n            translate([-width/2, 0, i]) \n            rotate([0, 0, -30]) \n            scale([1, 0.6, 0.2]) \n            color(\"forestgreen\") \n            sphere(d=width*0.8, $fn=16);\n            \n            // Right leaflet\n            translate([width/2, 0, i]) \n            rotate([0, 0, 30]) \n            scale([1, 0.6, 0.2]) \n            color(\"forestgreen\") \n            sphere(d=width*0.8, $fn=16);\n        }\n    }\n}\n\n// Nut cluster with hickory nuts\nmodule nut_cluster(size) {\n    union() {\n        // Bract (husk) structure\n        color(\"saddlebrown\") {\n            for(i = [0:60:300]) {\n                rotate([0, 0, i]) \n                translate([size/2, 0, 0]) \n                rotate([0, 90, 0]) \n                scale([1, 0.7, 0.3]) \n                cylinder(h=size*1.2, d=size/2, $fn=6);\n            }\n        }\n        \n        // Nuts inside\n        for(j = [0:120:240]) {\n            rotate([0, 0, j]) \n            translate([size/3, 0, -size/4]) \n            color(\"burlywood\") \n            sphere(d=size/2, $fn=16);\n        }\n    }\n}\n\n// Branch with leaves and nuts\nmodule branch_with_foliage(length, angle, rotation) {\n    translate([0, 0, branch_start_height]) {\n        rotate([0, 0, rotation]) {\n            rotate([angle, 0, 0]) {\n                // Branch\n                color(\"saddlebrown\") \n                cylinder(h=length, d=3, $fn=8);\n                \n                // Terminal leaf cluster\n                translate([0, 0, length]) \n                rotate([0, 0, 180]) \n                compound_leaf(length*0.8, leaf_cluster_size, 8);\n                \n                // Nut clusters\n                translate([length/3, 0, length/2]) \n                nut_cluster(6);\n                \n                translate([length*0.7, 0, length*0.7]) \n                nut_cluster(5);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Ground base\n    translate([0, 0, -2]) \n    color(\"darkolivegreen\") \n    cylinder(h=2, d=trunk_diameter+6, $fn=32);\n    \n    // Main trunk\n    hickory_trunk(trunk_height, trunk_diameter);\n    \n    // Lower branches\n    branch_with_foliage(25, 30, 0);\n    branch_with_foliage(22, 35, 90);\n    branch_with_foliage(28, 25, 180);\n    branch_with_foliage(24, 32, 270);\n    \n    // Upper branches\n    branch_with_foliage(20, 20, 45);\n    branch_with_foliage(18, 22, 135);\n    branch_with_foliage(21, 18, 225);\n    branch_with_foliage(19, 25, 315);\n}",
    "renders": true
  },
  {
    "plant": "walnut",
    "openscad_code": "// Walnut Plant - Realistic Style\n// Main parameters\n$fn = 50;\nwalnut_scale = 1;  // 1:1 scale for ~70mm tall plant\n\n// Walnut shell module\nmodule walnut_shell() {\n    // Main shell body - two halves\n    intersection() {\n        // Left half\n        translate([-15, 0, 0]) {\n            rotate([0, 0, 15]) {\n                scale([1, 1.2, 0.9]) {\n                    sphere(d=50);\n                }\n            }\n        }\n        \n        // Right half\n        translate([15, 0, 0]) {\n            rotate([0, 0, -15]) {\n                scale([1, 1.2, 0.9]) {\n                    sphere(d=50);\n                }\n            }\n        }\n    }\n    \n    // Shell surface texture - ridges\n    for(i = [0:20:340]) {\n        rotate([0, 0, i]) {\n            translate([0, 0, -5]) {\n                linear_extrude(height=50) {\n                    offset(delta=0.5) {\n                        difference() {\n                            circle(d=45);\n                            circle(d=35);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Shell seam\n    difference() {\n        union() {\n            cylinder(h=25, d=8, center=true);\n            translate([0, 0, 12.5]) sphere(d=8);\n            translate([0, 0, -12.5]) sphere(d=8);\n        }\n        translate([0, -5, -15]) cube([30, 10, 30]);\n    }\n}\n\n// Walnut nutmeat (inside)\nmodule walnut_nutmeat() {\n    color([0.8, 0.6, 0.4]) {\n        difference() {\n            // Main nutmeat shape\n            scale([1.1, 0.8, 0.7]) {\n                sphere(d=35);\n            }\n            \n            // Natural lobes\n            translate([0, 0, -5]) {\n                rotate([0, 90, 0]) {\n                    for(i = [0:2]) {\n                        rotate([0, 0, i*120]) {\n                            translate([5, 0, 0]) {\n                                sphere(d=15);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Central cavity\n            scale([0.3, 0.3, 0.4]) {\n                sphere(d=35);\n            }\n        }\n    }\n}\n\n// Stem connection point\nmodule stem_base() {\n    translate([0, 0, 25]) {\n        cylinder(h=8, d1=6, d2=4);\n        \n        // Stem attachment scar\n        for(i = [0:45:315]) {\n            rotate([0, 0, i]) {\n                translate([2, 0, 7]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=2, d=1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create the complete walnut plant\nunion() {\n    // Main shell - dark brown\n    color([0.3, 0.2, 0.1]) {\n        walnut_shell();\n    }\n    \n    // Optional: Show interior\n    // translate([0, 0, -50]) {\n    //     walnut_nutmeat();\n    // }\n    \n    // Stem base\n    stem_base();\n}\n\n// Print orientation helper\n%translate([0, 0, -30]) {\n    color([0.5, 0.5, 0.5, 0.3]) {\n        cube([80, 80, 1], center=true);\n    }\n}",
    "renders": true
  },
  {
    "plant": "pecan",
    "openscad_code": "// Pecan Plant - Realistic Medium Complexity\n// Features: Trunk, branches, leaves, pecan fruits, and root system\n// Printable size: ~100mm height, wall thickness 2mm\n\n$fn = 30;\n\n// Main parameters\ntrunk_height = 60;\ntrunk_radius = 8;\nbranch_levels = 3;\npecan_count = 12;\nleaf_count = 24;\n\n// Pecan fruit module\nmodule pecan_fruit() {\n    // Main pecan shell - elongated oval\n    translate([0, 0, 0]) {\n        scale([1, 0.6, 2]) \n            sphere(r = 5);\n    }\n    \n    // Pecan seam line\n    difference() {\n        translate([0, 0, 0])\n            scale([1, 0.6, 2])\n                sphere(r = 5);\n        translate([0, 0, 1])\n            scale([0.9, 0.5, 1.9])\n                sphere(r = 5);\n    }\n    \n    // Pecan cap\n    translate([0, 0, 9])\n        cylinder(h = 2, r1 = 4, r2 = 3);\n}\n\n// Leaf module - pecan leaf shape\nmodule pecan_leaf() {\n    // Main leaf body\n    translate([0, 0, 0]) {\n        scale([1, 0.3, 3])\n            sphere(r = 8);\n    }\n    \n    // Leaf tip\n    translate([0, 0, 25])\n        cylinder(h = 5, r1 = 3, r2 = 0.5);\n    \n    // Leaf veins (simplified)\n    for(i = [-1, 0, 1]) {\n        rotate([0, i * 15, 0])\n            translate([0, 0, 10])\n                scale([0.1, 0.1, 1])\n                    cube([2, 1, 20]);\n    }\n}\n\n// Branch module with leaves and pecans\nmodule branch(level, angle, length) {\n    // Main branch\n    rotate([0, angle, 0])\n        translate([0, 0, trunk_height * 0.3 * level])\n            cylinder(h = length, r1 = 4 - level, r2 = 2 - level * 0.5);\n    \n    // Sub-branches\n    if(level < branch_levels) {\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([0, 0, length * 0.7])\n                    branch(level + 1, angle + 30, length * 0.7);\n        }\n    }\n    \n    // Attach leaves and pecans to end branches\n    if(level == branch_levels) {\n        // Leaves\n        for(j = [0:leaf_count/branch_levels - 1]) {\n            rotate([0, 0, j * 360 / (leaf_count/branch_levels)])\n                translate([0, 0, length])\n                    rotate([90, 0, 0])\n                        pecan_leaf();\n        }\n        \n        // Pecans\n        for(k = [0:pecan_count/branch_levels - 1]) {\n            rotate([0, 0, k * 360 / (pecan_count/branch_levels) + 15])\n                translate([0, 0, length * 0.8])\n                    rotate([0, 90, 0])\n                        pecan_fruit();\n        }\n    }\n}\n\n// Root system\nmodule roots() {\n    for(i = [0:5]) {\n        rotate([0, i * 60, 0])\n            translate([0, 0, -10])\n                cylinder(h = 15, r1 = 3, r2 = 1);\n    }\n}\n\n// Main trunk\nunion() {\n    // Trunk\n    cylinder(h = trunk_height, r = trunk_radius);\n    \n    // Trunk texture (bark rings)\n    for(i = [0:trunk_height/5 - 1]) {\n        translate([0, 0, i * 5])\n            difference() {\n                cylinder(h = 2, r = trunk_radius);\n                cylinder(h = 2.1, r = trunk_radius - 0.5);\n            }\n    }\n    \n    // Main branches\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n            branch(1, 45, 30);\n    }\n    \n    // Root system\n    translate([0, 0, 0])\n        roots();\n}\n\n// Base for stability\ntranslate([0, 0, -12])\n    cylinder(h = 2, r = 15);",
    "renders": true
  },
  {
    "plant": "chestnut",
    "openscad_code": "// Realistic Chestnut Plant - Medium Complexity\n// Approx 80mm tall, 3D printable with 2mm walls\n\n$fn = 32;\n\n// Main stem/trunk\nmodule stem() {\n    union() {\n        // Main trunk\n        cylinder(h=60, d1=8, d2=6);\n        // Root flare at base\n        translate([0,0,-2])\n            cylinder(h=8, d1=12, d2=8);\n    }\n}\n\n// Branch structure\nmodule branch(length, angle, rotation) {\n    rotate([0, angle, rotation])\n        translate([0,0,50])\n            cylinder(h=length, d1=4, d2=2);\n}\n\n// Leaf cluster\nmodule leaf_cluster(pos, angle) {\n    translate(pos)\n    rotate([0, angle, 0])\n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n        translate([0,0,0])\n            scale([1,0.6,0.1])\n                sphere(d=20);\n    }\n}\n\n// Chestnut burr (spiky outer shell)\nmodule chestnut_burr(pos) {\n    translate(pos)\n    difference() {\n        // Main burr body\n        sphere(d=30);\n        \n        // Spikes - subtract inverted cones\n        for(i=[0:15]) {\n            rotate([0, i*24, 0])\n            translate([15,0,0])\n                rotate([90,0,0])\n                    cylinder(h1=8, h2=0, r1=3, r2=0);\n        }\n        \n        // Hollow interior for chestnut\n        sphere(d=22);\n    }\n}\n\n// Actual chestnut inside\nmodule chestnut(pos) {\n    translate(pos)\n    scale([1,0.8,1.2])\n    difference() {\n        sphere(d=18);\n        // Flattened base\n        translate([0,0,-9])\n            cube([18,18,9], center=true);\n    }\n}\n\n// Small branches with leaves\nmodule canopy() {\n    union() {\n        // Main branches\n        branch(25, 30, 0);\n        branch(20, 45, 90);\n        branch(22, 35, 180);\n        branch(18, 40, 270);\n        \n        // Smaller sub-branches with leaves\n        leaf_cluster([8,0,65], -30);\n        leaf_cluster([0,8,60], -45);\n        leaf_cluster([-8,0,62], -35);\n        leaf_cluster([0,-8,58], -40);\n    }\n}\n\n// Ground base plate for stability\nmodule base() {\n    translate([0,0,-5])\n        cylinder(h=3, d=40);\n}\n\n// Assembly\nunion() {\n    // Ground base\n    base();\n    \n    // Main plant structure\n    stem();\n    canopy();\n    \n    // Chestnuts hanging from branches\n    translate([12,0,40])\n        chestnut_burr([0,0,0]);\n    translate([12,0,40])\n        chestnut([0,0,-5]);\n        \n    translate([-8,6,45])\n        chestnut_burr([0,0,0]);\n    translate([-8,6,45])\n        chestnut([0,0,-5]);\n        \n    translate([0,-10,42])\n        chestnut_burr([0,0,0]);\n    translate([0,-10,42])\n        chestnut([0,0,-5]);\n}",
    "renders": true
  },
  {
    "plant": "alder",
    "openscad_code": "// Alder tree (Alnus glutinosa) – medium detail, 3D-printable\n// Overall height ≈ 120 mm, trunk thickness ≈ 6 mm → printable with 2 mm+ walls\n\n$fn = 36;          // round segments for smooth cylinders & spheres\nwall = 2;          // printable wall thickness\ntrunk_r = 3;       // trunk radius at base\ntrunk_h = 60;      // trunk height\n\n// ---------- TRUNK ----------\nmodule trunk() {\n    // slight taper\n    linear_extrude(height = trunk_h, scale = 0.7, center = false)\n        circle(r = trunk_r, $fn = 12);\n}\n\n// ---------- BRANCHES ----------\n// generate a single branch with smaller twigs\nmodule branch(len, angle, rot, thick) {\n    if (len > 8) {               // recursion stop\n        translate([0, 0, len])   // move to tip\n            rotate([angle, 0, rot]) {\n                cylinder(h = len, r1 = thick, r2 = thick * 0.6, center = false);\n\n                // two smaller twigs at ~45°\n                branch(len * 0.7, 45, 0, thick * 0.7);\n                branch(len * 0.7, 45, 180, thick * 0.7);\n            }\n    }\n}\n\n// ---------- CONES ----------\n// alder catkin-like cones\nmodule cone(h, r) {\n    // simple elongated cone, printable without support\n    cylinder(h = h, r1 = r, r2 = 0, center = false);\n}\n\n// ---------- LEAVES ----------\n// simple oval leaf, flat for printing\nmodule leaf(len, wid) {\n    scale([1, wid / len, 1])\n        sphere(r = len / 2, $fn = 6);\n}\n\n// ---------- ASSEMBLY ----------\nunion() {\n    // trunk\n    trunk();\n\n    // 6 main branches around trunk top\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([0, 0, trunk_h])\n                branch(30, 30, 0, 2.5);\n    }\n\n    // cones hanging from branch tips (example positions)\n    translate([0, 0, trunk_h + 25])\n        rotate([30, 0, 0])\n            translate([0, 0, 30])\n                cone(10, 3);\n\n    translate([0, 0, trunk_h + 25])\n        rotate([30, 0, 180])\n            translate([0, 0, 30])\n                cone(10, 3);\n\n    // sparse leaves near ends\n    for (a = [0:120:360])\n        rotate([0, 0, a])\n            translate([15, 0, trunk_h + 45])\n                leaf(8, 4);\n}",
    "renders": true
  },
  {
    "plant": "dogwood",
    "openscad_code": "// Dogwood plant - realistic style, medium complexity\n// Overall height ~120mm\n\n// Constants\nstem_height = 80;\nstem_d = 4;\nbranch_len = 25;\nleaf_len = 20;\nleaf_w = 12;\nflower_d = 20;\npetal_len = 10;\npetal_w = 5;\n\n// Main stem\nmodule stem(h, d) {\n    cylinder(h=h, d=d, $fn=20);\n}\n\n// Branch with leaves and flowers\nmodule branch(angle, len) {\n    rotate([0, 0, angle])\n    translate([0, 0, stem_height * 0.6])\n    rotate([90 - angle * 0.5, 0, 0])\n    union() {\n        // Branch\n        cylinder(h=len, d=stem_d * 0.7, $fn=12);\n        \n        // Leaves along branch\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n            translate([len * (0.3 + i * 0.2), 0, 0])\n            rotate([0, -30, 0])\n            leaf();\n        }\n        \n        // Flower cluster at branch tip\n        translate([len, 0, 0])\n        rotate([0, 0, 45])\n        flower_cluster();\n    }\n}\n\n// Dogwood leaf shape (ovate with pointed tip)\nmodule leaf() {\n    // Central vein\n    translate([-leaf_len/2, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=leaf_len, d=0.5, $fn=8);\n    \n    // Leaf blade\n    translate([-leaf_len/2, 0, 0])\n    scale([leaf_len, leaf_w, 1])\n    sphere(d=1, $fn=16);\n    \n    // Veins\n    for(i = [-2:2]) {\n        if(i != 0) {\n            rotate([0, 0, i * 15])\n            translate([0, 0, 0.2])\n            scale([0.8, 0.3, 0.1])\n            cylinder(h=leaf_len * 0.7, d=1, $fn=8);\n        }\n    }\n}\n\n// Dogwood flower with 4 petals\nmodule flower() {\n    // Center cluster\n    sphere(d=flower_d * 0.3, $fn=16);\n    \n    // Four petals\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([petal_len/2, 0, 0])\n        scale([petal_len, petal_w, 1])\n        sphere(d=1, $fn=16);\n    }\n}\n\n// Cluster of small flowers\nmodule flower_cluster() {\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([flower_d * 0.7, 0, 0])\n        flower();\n    }\n}\n\n// Main plant assembly\nunion() {\n    // Pot\n    difference() {\n        cylinder(h=20, d1=25, d2=22, $fn=32);\n        translate([0, 0, 2])\n        cylinder(h=18, d1=23, d2=20, $fn=32);\n    }\n    \n    // Soil\n    translate([0, 0, 2])\n    cylinder(h=5, d1=23, d2=20, $fn=32);\n    \n    // Main stem\n    translate([0, 0, 5])\n    stem(stem_height, stem_d);\n    \n    // Branches\n    for(i = [0:4]) {\n        branch(i * 72 + 36, branch_len);\n    }\n    \n    // Top leaves\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, 0, stem_height * 0.9])\n        rotate([0, 30, 0])\n        leaf();\n    }\n    \n    // Top flower cluster\n    translate([0, 0, stem_height])\n    flower_cluster();\n}",
    "renders": true
  },
  {
    "plant": "magnolia",
    "openscad_code": "// Magnolia Plant - Realistic Style, Medium Complexity\n// Overall height ~120mm, suitable for 3D printing\n\n// Petal module for magnolia flowers\nmodule petal(length, width, thickness) {\n    difference() {\n        scale([1, width/length, thickness/length])\n            sphere(d = length, $fn = 20);\n        translate([0, 0, -length/2])\n            cube([length*2, length*2, length], center = true);\n    }\n}\n\n// Flower module with 9 petals arranged in 3 layers\nmodule flower(diameter) {\n    union() {\n        // Center stamen\n        color(\"yellow\")\n        for(i = [0:5:180]) {\n            rotate([0, 0, i])\n                translate([diameter/8, 0, 0])\n                    cylinder(h = diameter/3, d1 = diameter/10, d2 = diameter/15, $fn = 8);\n        }\n        \n        // Petals - 3 layers\n        for(layer = [0:2]) {\n            for(petal_num = [0:2]) {\n                rotate([0, 0, petal_num*120 + layer*15])\n                    rotate([layer*15 - 15, 0, 0])\n                        translate([0, 0, layer*diameter/8])\n                            petal(diameter/2.5, diameter/3, diameter/10);\n            }\n        }\n    }\n}\n\n// Leaf module with central vein\nmodule leaf(length, width) {\n    difference() {\n        // Main leaf shape\n        scale([1, width/length, 0.2])\n            sphere(d = length, $fn = 20);\n        \n        // Taper leaf tip\n        translate([length/2, 0, -1])\n            cube([length, width, 2], center = true);\n        \n        // Add vein detail\n        translate([0, 0, 0.2])\n            color(\"darkgreen\")\n            scale([1, 0.05, 0.05])\n                sphere(d = length, $fn = 20);\n    }\n}\n\n// Branch module with leaves\nmodule branch_segment(length, radius) {\n    union() {\n        // Main branch\n        cylinder(h = length, r = radius, $fn = 8);\n        \n        // Add leaves along branch\n        for(i = [0:1:3]) {\n            rotate([0, 0, i*90 + 45])\n                translate([0, 0, i*length/4])\n                    rotate([30, 0, 0])\n                        leaf(length/2, length/3);\n        }\n    }\n}\n\n// Main stem\nmodule stem(height) {\n    union() {\n        // Main trunk\n        cylinder(h = height, r1 = 6, r2 = 4, $fn = 8);\n        \n        // Add branches at nodes\n        for(node = [0:1:3]) {\n            translate([0, 0, height - node*height/4])\n                rotate([30 + node*10, 0, 0])\n                    branch_segment(height/3, 2);\n        }\n    }\n}\n\n// Base module for stability\nmodule base() {\n    difference() {\n        cylinder(h = 10, r1 = 25, r2 = 20, $fn = 32);\n        translate([0, 0, -1])\n            cylinder(h = 12, r1 = 22, r2 = 17, $fn = 32);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 10])\n    stem(80);\n\ntranslate([0, 0, 0])\n    base();\n\n// Add flowers at branch tips\ntranslate([20, 0, 85])\n    rotate([0, 0, 30])\n        flower(30);\n\ntranslate([-15, 15, 70])\n    rotate([0, 0, -30])\n        flower(25);\n\ntranslate([-10, -20, 75])\n    rotate([0, 0, 0])\n        flower(28);",
    "renders": true
  },
  {
    "plant": "sassafras",
    "openscad_code": "// Sassafras Plant - Realistic Style - Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Main parameters\nmodule sassafras_plant() {\n    // Base trunk\n    translate([0, 0, 0]) {\n        cylinder(h = 60, d1 = 8, d2 = 12, $fn = 20);\n    }\n    \n    // Root flare at base\n    translate([0, 0, 0]) {\n        cylinder(h = 5, d1 = 16, d2 = 8, $fn = 20);\n    }\n    \n    // Main branches\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120]) {\n            translate([0, 0, 45]) {\n                rotate([20 + i*5, 0, 0]) {\n                    cylinder(h = 35, d1 = 6, d2 = 3, $fn = 15);\n                    \n                    // Secondary branches\n                    translate([0, 0, 25]) {\n                        rotate([30, 0, 45]) {\n                            cylinder(h = 20, d1 = 3, d2 = 2, $fn = 12);\n                            \n                            // Leaves on secondary branch\n                            for(j = [0:2]) {\n                                rotate([0, 0, j * 120]) {\n                                    translate([0, 12, 0]) {\n                                        rotate([90, 0, 0]) {\n                                            scale([1, 1, 0.8]) {\n                                                // Sassafras mitten-shaped leaf\n                                                difference() {\n                                                    union() {\n                                                        sphere(d = 8, $fn = 20);\n                                                        translate([4, 0, 0]) {\n                                                            sphere(d = 6, $fn = 15);\n                                                        }\n                                                    }\n                                                    translate([-2, 0, 2]) {\n                                                        cube([10, 0.5, 4], center = true);\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Additional leaves on main trunk\n    for(k = [0:3]) {\n        rotate([0, 0, k * 90 + 45]) {\n            translate([0, 0, 30 + k * 10]) {\n                rotate([45, 0, 0]) {\n                    scale([0.8, 0.8, 0.6]) {\n                        // Three-lobed leaf\n                        union() {\n                            // Central lobe\n                            rotate([0, 0, 0]) {\n                                translate([0, 6, 0]) {\n                                    rotate([90, 0, 0]) {\n                                        scale([1, 1.5, 0.5]) {\n                                            sphere(d = 7, $fn = 15);\n                                        }\n                                    }\n                                }\n                            }\n                            // Side lobes\n                            rotate([0, 0, 30]) {\n                                translate([3, 5, 0]) {\n                                    rotate([90, 0, 0]) {\n                                        scale([0.8, 1.2, 0.4]) {\n                                            sphere(d = 5, $fn = 12);\n                                        }\n                                    }\n                                }\n                            }\n                            rotate([0, 0, -30]) {\n                                translate([-3, 5, 0]) {\n                                    rotate([90, 0, 0]) {\n                                        scale([0.8, 1.2, 0.4]) {\n                                            sphere(d = 5, $fn = 12);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Small twigs with leaves\n    for(m = [0:5]) {\n        rotate([0, 0, m * 60]) {\n            translate([0, 0, 50 + m * 2]) {\n                rotate([15 + m*3, 0, m*20]) {\n                    cylinder(h = 8, d1 = 2, d2 = 1, $fn = 8);\n                    translate([0, 0, 6]) {\n                        rotate([90, 0, 0]) {\n                            scale([0.6, 0.6, 0.4]) {\n                                sphere(d = 4, $fn = 12);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the plant\nsassafras_plant();",
    "renders": true
  },
  {
    "plant": "tupelo",
    "openscad_code": "// Tupelo Plant (Nyssa) - Realistic Medium Complexity\n// Height: ~120mm, designed for 3D printing\n\n$fn = 24; // Smooth curves\n\n// Main parameters\ntrunk_height = 80;\ntrunk_diameter = 12;\ncrown_radius = 45;\ncrown_height = 60;\nleaf_size = 8;\nleaf_thickness = 2;\n\nmodule trunk() {\n    // Main trunk\n    union() {\n        // Base flare\n        cylinder(h=15, d1=trunk_diameter*1.5, d2=trunk_diameter);\n        \n        // Main trunk segment\n        translate([0,0,15])\n            cylinder(h=trunk_height-15, d=trunk_diameter);\n            \n        // Branch junctions\n        for(i=[1:4]) {\n            rotate([0,0,i*90+15])\n                translate([trunk_diameter/2,0,trunk_height-30+i*5])\n                    rotate([0,90,0])\n                        cylinder(h=20, d=trunk_diameter*0.7);\n        }\n    }\n}\n\nmodule leaf_cluster(x,y,z,scale=1) {\n    // Create a cluster of tupelo leaves\n    translate([x,y,z])\n    for(i=[0:3]) {\n        rotate([0,0,i*90])\n        translate([0,0,0])\n        scale([scale,scale,scale])\n        // Single tupelo leaf (oval with pointed tip)\n        hull() {\n            translate([0,0,leaf_thickness/2])\n                sphere(d=leaf_size*0.3);\n            translate([leaf_size,0,leaf_thickness/2])\n                sphere(d=leaf_size*0.1);\n            translate([leaf_size/2,leaf_size*0.6,leaf_thickness/2])\n                sphere(d=leaf_size*0.3);\n            translate([leaf_size/2,-leaf_size*0.6,leaf_thickness/2])\n                sphere(d=leaf_size*0.3);\n        }\n    }\n}\n\nmodule crown() {\n    translate([0,0,trunk_height])\n    scale([1,1,0.8])\n    difference() {\n        // Main crown shape\n        sphere(d=crown_radius*2);\n        \n        // Hollow for printing\n        sphere(d=crown_radius*2-4);\n        \n        // Flatten bottom\n        translate([0,0,-crown_radius/2])\n            cube([crown_radius*4,crown_radius*4,crown_radius], center=true);\n    }\n}\n\nmodule branches() {\n    // Main branches extending from crown\n    for(i=[0:5]) {\n        rotate([rand(i*123)*45-22.5, rand(i*321)*30-15, i*60])\n            translate([0,0,trunk_height+crown_height/3])\n                branch_segment(30, 6);\n    }\n}\n\nmodule branch_segment(len, dia) {\n    // Recursive branching\n    color(\"brown\")\n    if(len > 10) {\n        union() {\n            cylinder(h=len, d=dia);\n            translate([0,0,len])\n                rotate([0,0,rand(123)*60-30])\n                branch_segment(len*0.7, dia*0.7);\n                \n            // Leaves at branch tips\n            if(len <= 20) {\n                leaf_cluster(0,0,len, 0.8);\n            }\n        }\n    }\n}\n\nmodule root_system() {\n    // Base root flare\n    difference() {\n        cylinder(h=10, d1=trunk_diameter*2.5, d2=trunk_diameter*1.5);\n        \n        // Hollow center\n        cylinder(h=11, d=trunk_diameter-2);\n    }\n    \n    // Visible surface roots\n    for(i=[0:3]) {\n        rotate([0,0,i*120])\n            translate([trunk_diameter*0.8,0,5])\n                rotate([90,0,0])\n                    cylinder(h=25, d=trunk_diameter*0.4);\n    }\n}\n\n// Generate tree\nunion() {\n    // Root system\n    root_system();\n    \n    // Trunk\n    trunk();\n    \n    // Crown structure\n    crown();\n    \n    // Branches with leaves\n    branches();\n    \n    // Additional leaf clusters\n    for(i=[0:8]) {\n        angle = rand(i*456)*360;\n        height = rand(i*789)*crown_height;\n        radius = rand(i*234)*(crown_radius*0.8);\n        leaf_cluster(\n            cos(angle)*radius,\n            sin(angle)*radius,\n            trunk_height+height,\n            rand(i*567)*0.5+0.7\n        );\n    }\n}\n\n// Base plate for stability\ntranslate([0,0,-5])\n    cylinder(h=5, d=trunk_diameter*4);",
    "renders": true
  },
  {
    "plant": "hackberry",
    "openscad_code": "// Hackberry Plant - Realistic Style, Medium Complexity\n// Height: ~120mm, suitable for 3D printing\n\n$fn = 24;\n\nmodule trunk() {\n    // Main trunk with slight taper\n    cylinder(h = 60, r1 = 8, r2 = 6, center = false);\n    \n    // Bark texture - overlapping rings\n    for (i = [0:5:55]) {\n        translate([0, 0, i])\n        difference() {\n            cylinder(h = 3, r = 7.5, center = false);\n            cylinder(h = 3.2, r = 6.5, center = false);\n        }\n    }\n}\n\nmodule branch(height, angle, length, thickness) {\n    translate([0, 0, height])\n    rotate([0, angle, 0])\n    cylinder(h = length, r = thickness, center = false);\n}\n\nmodule leaf() {\n    // Hackberry leaf - ovate shape with pointed tip\n    scale([1, 1.5, 0.3])\n    difference() {\n        sphere(r = 5);\n        \n        // Cut bottom for flat base\n        translate([0, -5, -5])\n        cube([12, 12, 12], center = true);\n        \n        // Leaf tip\n        translate([0, 5, 0])\n        scale([0.3, 0.3, 1])\n        sphere(r = 3);\n    }\n}\n\nmodule leaf_cluster(x, y, z, base_angle) {\n    translate([x, y, z])\n    rotate([0, 0, base_angle])\n    for (i = [0:45:315]) {\n        rotate([0, 15 + (i % 90)/5, i])\n        translate([0, 8, 0])\n        rotate([0, 0, 30 - (i % 60)])\n        leaf();\n    }\n}\n\nmodule berries() {\n    // Hackberry fruit - small round drupes\n    color(\"darkorange\")\n    for (i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([12, 0, 0])\n        sphere(r = 2);\n    }\n}\n\nmodule main_plant() {\n    union() {\n        // Trunk\n        trunk();\n        \n        // Main branches\n        branch(50, -30, 25, 3);\n        leaf_cluster(20, 0, 50, 0);\n        \n        branch(45, -45, 20, 2.5);\n        leaf_cluster(15, 0, 45, 45);\n        \n        branch(40, 30, 22, 2.5);\n        leaf_cluster(-18, 0, 40, -30);\n        \n        // Side branches\n        branch(35, 0, 18, 2) {\n            translate([0, 0, 18])\n            leaf_cluster(0, 12, 0, 90);\n            berries();\n        }\n        \n        branch(30, 15, 15, 1.8) {\n            translate([0, 0, 15])\n            leaf_cluster(0, -10, 0, -90);\n            berries();\n        }\n        \n        // Lower foliage\n        leaf_cluster(0, 0, 25, 0);\n    }\n}\n\n// Base for stability\ndifference() {\n    cylinder(h = 5, r = 20, center = false);\n    cylinder(h = 5.2, r = 18, center = false);\n}\n\n// Main plant assembly\ntranslate([0, 0, 5])\nmain_plant();",
    "renders": true
  },
  {
    "plant": "hornbeam",
    "openscad_code": "// Hornbeam Plant - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm height, ~80mm diameter\n\nmodule hornbeam_trunk() {\n    // Main trunk - slightly tapered cylinder\n    cylinder(h=40, r1=8, r2=6, $fn=20);\n    \n    // Add trunk texture with small cylinders\n    for(i=[0:30:360]) {\n        rotate([0, 0, i])\n        translate([0, 6.5, 20])\n        cylinder(h=20, r=0.5, $fn=8);\n    }\n}\n\nmodule branch(start_height, angle, length, thickness) {\n    translate([0, 0, start_height])\n    rotate([angle, 0, 0])\n    cylinder(h=length, r=thickness, $fn=12);\n}\n\nmodule leaf_cluster(pos_x, pos_y, pos_z, angle) {\n    translate([pos_x, pos_y, pos_z])\n    rotate([0, 0, angle])\n    union() {\n        // Central leaf\n        translate([0, 0, 0])\n        scale([1, 1.8, 0.5])\n        sphere(r=4, $fn=8);\n        \n        // Side leaves\n        for(i=[-30, 30]) {\n            rotate([0, 0, i])\n            translate([2, 0, 0])\n            scale([0.8, 1.4, 0.4])\n            sphere(r=3.5, $fn=8);\n        }\n        \n        // Top leaf\n        translate([0, 6, 0])\n        scale([0.7, 1.2, 0.3])\n        sphere(r=3, $fn=8);\n    }\n}\n\nmodule root_system() {\n    // Main roots spreading out\n    for(i=[0:60:300]) {\n        rotate([0, 0, i])\n        translate([0, 0, -2])\n        rotate([25, 0, 0])\n        cylinder(h=15, r1=4, r2=2, $fn=8);\n    }\n    \n    // Smaller feeder roots\n    for(i=[30:60:330]) {\n        rotate([0, 0, i])\n        translate([0, 2, -2])\n        rotate([35, 0, 0])\n        cylinder(h=10, r1=2, r2=1, $fn=6);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base and roots\n    difference() {\n        cylinder(h=5, r=15, $fn=32);\n        translate([0, 0, -1])\n        cylinder(h=7, r=14, $fn=32);\n    }\n    \n    translate([0, 0, 2])\n    root_system();\n    \n    // Trunk\n    translate([0, 0, 5])\n    hornbeam_trunk();\n    \n    // Main branches\n    translate([0, 0, 45])\n    union() {\n        branch(0, 30, 25, 4);\n        branch(0, -30, 25, 4);\n        branch(0, 15, 20, 3);\n        branch(0, -15, 20, 3);\n    }\n    \n    // Secondary branches\n    translate([0, 0, 55])\n    union() {\n        branch(0, 45, 15, 2.5);\n        branch(0, -45, 15, 2.5);\n        branch(0, 0, 18, 2.5);\n    }\n    \n    // Leaf clusters on main branches\n    leaf_cluster(10, 0, 65, 45);\n    leaf_cluster(-10, 0, 65, -45);\n    leaf_cluster(5, 8, 70, 15);\n    leaf_cluster(-5, -8, 70, -15);\n    \n    // Leaf clusters on secondary branches\n    leaf_cluster(15, 5, 80, 30);\n    leaf_cluster(-15, -5, 80, -30);\n    leaf_cluster(0, 10, 85, 0);\n    leaf_cluster(8, -12, 75, 60);\n    leaf_cluster(-8, 12, 75, -60);\n    \n    // Top leaf clusters\n    leaf_cluster(0, 0, 95, 0);\n    leaf_cluster(3, 4, 100, 20);\n    leaf_cluster(-3, -4, 100, -20);\n    leaf_cluster(6, -2, 105, 40);\n    leaf_cluster(-6, 2, 105, -40);\n}",
    "renders": true
  },
  {
    "plant": "ironwood",
    "openscad_code": "// Ironwood Plant - Realistic Desert Ironwood Tree (medium complexity)\n// Desert ironwood (Olneya tesota) with characteristic gnarled trunk and compound leaves\n\n// Parameters\ntrunk_height = 40;\ntrunk_base_diameter = 12;\ntrunk_top_diameter = 8;\nmain_height = 100;\ncanopy_radius = 45;\n\n// Trunk module with realistic gnarled texture\nmodule trunk() {\n    // Main trunk segment\n    difference() {\n        cylinder(h=trunk_height, d1=trunk_base_diameter, d2=trunk_top_diameter, $fn=12);\n        \n        // Carve out irregular grooves for realistic texture\n        for(i=[0:30]) {\n            rotate([0, 0, i*12 + sin(i)*5]) \n            translate([trunk_base_diameter/2 - 1.5, -trunk_height/2, 0])\n            rotate([0, 90, 0])\n            cylinder(h=trunk_height*1.2, d=1.5 + sin(i*3)*0.5, $fn=6);\n        }\n    }\n    \n    // Add bark detail rings\n    for(h=[5:5:trunk_height-5]) {\n        translate([0, 0, h])\n        scale([1.02, 1.02, 0.3])\n        cylinder(h=2, d1=trunk_base_diameter - (trunk_base_diameter-trunk_top_diameter)*h/trunk_height, \n                      d2=trunk_base_diameter - (trunk_base_diameter-trunk_top_diameter)*h/trunk_height, $fn=12);\n    }\n}\n\n// Branch module - creates angled branches with taper\nmodule branch(length, start_diam, angle, rot_angle) {\n    translate([0, 0, trunk_height - 5])\n    rotate([angle, 0, rot_angle])\n    cylinder(h=length, d1=start_diam, d2=start_diam*0.6, $fn=8);\n    \n    // Sub-branches\n    if(length > 15) {\n        translate([0, 0, trunk_height - 5 + length*0.7])\n        rotate([angle + 25, 0, rot_angle + 45])\n        branch(length*0.6, start_diam*0.7, 15, 0);\n    }\n}\n\n// Compound leaf structure with 3-5 leaflets\nmodule compound_leaf(stem_length) {\n    // Main leaf stem\n    color(\"darkgreen\")\n    cylinder(h=stem_length, d=1.2, $fn=6);\n    \n    // Leaflets along stem\n    for(pos=[0.2:0.15:0.8]) {\n        translate([0, 0, pos*stem_length])\n        rotate([0, 90, 0])\n        scale([0.3, 0.05, 0.8])\n        sphere(d=12, $fn=8);\n    }\n    \n    // Terminal leaflet\n    translate([0, 0, stem_length])\n    rotate([0, 90, 0])\n    scale([0.35, 0.05, 1])\n    sphere(d=15, $fn=8);\n}\n\n// Root system for stability\nmodule roots() {\n    difference() {\n        // Root ball base\n        translate([0, 0, -8])\n        sphere(d=trunk_base_diameter*1.8, $fn=12);\n        \n        // Hollow for material savings\n        translate([0, 0, -5])\n        sphere(d=trunk_base_diameter*1.4, $fn=12);\n    }\n    \n    // Surface roots\n    for(angle=[0:60:300]) {\n        rotate([0, 0, angle + sin(angle)*10])\n        translate([trunk_base_diameter*0.6, 0, -3])\n        rotate([0, 20, 0])\n        scale([1, 1, 0.5])\n        cylinder(h=15, d1=4, d2=2, $fn=6);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base and roots\n    roots();\n    \n    // Trunk\n    trunk();\n    \n    // Main branches\n    branch(30, 6, 35, 0);\n    branch(25, 5, 45, 120);\n    branch(28, 5.5, 40, 240);\n    \n    // Canopy with compound leaves\n    for(i=[0:8]) {\n        angle = i*45 + sin(i*2)*15;\n        radius = canopy_radius*(0.7 + sin(i*3)*0.3);\n        height = trunk_height + 15 + sin(i*4)*10;\n        \n        translate([cos(angle)*radius, sin(angle)*radius, height])\n        rotate([0, 0, angle + 90])\n        compound_leaf(20 + sin(i*5)*5);\n    }\n    \n    // Additional small branches with leaves\n    for(j=[0:12]) {\n        angle = j*30 + sin(j*3)*20;\n        translate([cos(angle)*15, sin(angle)*15, trunk_height + 10])\n        rotate([sin(j*4)*15, 0, angle])\n        compound_leaf(15 + sin(j*2)*3);\n    }\n}",
    "renders": true
  },
  {
    "plant": "tanoak",
    "openscad_code": "// Tanoak Tree (Notholithocarpus densiflorus) - Realistic Style, Medium Complexity\n// Height: ~100mm, optimized for 3D printing with 2mm walls and minimal overhangs\n\n$fn = 32;\n\n// Main module\nmodule tanoak_tree() {\n    union() {\n        // Trunk\n        trunk();\n        \n        // Main branches\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n            translate([0, 0, 25])\n            main_branch();\n        }\n        \n        // Foliage clusters\n        for(i = [15:60:345]) {\n            rotate([0, 0, i])\n            translate([35*sin(i), 35*cos(i), 65])\n            foliage_cluster(45 + i/3, 15 - abs(i)/30);\n        }\n        \n        // Acorns\n        for(i = [30:60:330]) {\n            rotate([0, 0, i])\n            translate([25*sin(i*2), 25*cos(i*2), 55])\n            acorn_cluster();\n        }\n    }\n}\n\n// Trunk module\nmodule trunk() {\n    difference() {\n        // Main trunk\n        cylinder(h = 50, r1 = 8, r2 = 6, center = false);\n        \n        // Bark texture grooves (vertical)\n        for(i = [0:15:360]) {\n            rotate([0, 0, i])\n            translate([6.5, -0.5, 0])\n            cube([1, 1, 50]);\n        }\n    }\n}\n\n// Main branch module\nmodule main_branch() {\n    difference() {\n        union() {\n            // Branch stem\n            rotate([20 + $t*5, 0, 0])\n            cylinder(h = 40, r1 = 3.5, r2 = 2, center = false);\n            \n            // Branch junction reinforcement\n            translate([0, 0, -5])\n            sphere(r = 4);\n        }\n        \n        // Hollow for 3D printing\n        rotate([20 + $t*5, 0, 0])\n        translate([0, 0, 2])\n        cylinder(h = 36, r1 = 1.5, r2 = 0.5, center = false);\n    }\n}\n\n// Foliage cluster module\nmodule foliage_cluster(rot_z, scale_factor) {\n    scale([scale_factor/10, scale_factor/10, scale_factor/10])\n    rotate([0, 0, rot_z])\n    union() {\n        // Central leaf mass\n        difference() {\n            scale([1.2, 1, 0.8])\n            sphere(r = 15);\n            \n            // Internal hollow for printing\n            scale([0.8, 0.7, 0.6])\n            sphere(r = 15);\n        }\n        \n        // Individual leaf clusters\n        for(i = [0:30:330]) {\n            rotate([i, i/2, 0])\n            translate([8*cos(i*2), 6*sin(i*2), 5])\n            leaf_cluster();\n        }\n    }\n}\n\n// Leaf cluster module\nmodule leaf_cluster() {\n    // Simplified leaf bundle\n    difference() {\n        scale([1, 0.6, 0.3])\n        sphere(r = 6);\n        \n        // Vein indentations\n        for(i = [-1:1]) {\n            translate([0, i*1.5, -0.5])\n            cube([8, 0.5, 1], center = true);\n        }\n    }\n}\n\n// Acorn cluster module\nmodule acorn_cluster() {\n    union() {\n        // Stem\n        translate([0, 0, 3])\n        cylinder(h = 2, r = 0.5, center = true);\n        \n        // Main acorn\n        difference() {\n            union() {\n                // Cap\n                translate([0, 0, 1])\n                cylinder(h = 1.5, r1 = 2.5, r2 = 2, center = true);\n                \n                // Nut\n                translate([0, 0, -1])\n                scale([1, 1, 1.3])\n                sphere(r = 2);\n            }\n            \n            // Hollow interior\n            translate([0, 0, -1.5])\n            scale([0.7, 0.7, 0.9])\n            sphere(r = 2);\n        }\n        \n        // Secondary acorn\n        translate([3, 2, 0])\n        scale(0.7)\n        difference() {\n            union() {\n                cylinder(h = 1, r1 = 1.8, r2 = 1.4, center = true);\n                translate([0, 0, -0.8])\n                scale([1, 1, 1.3])\n                sphere(r = 1.4);\n            }\n            translate([0, 0, -1.2])\n            scale([0.7, 0.7, 0.9])\n            sphere(r = 1.4);\n        }\n    }\n}\n\n// Base for stability\nmodule base() {\n    difference() {\n        cylinder(h = 3, r = 12, center = false);\n        cylinder(h = 3, r = 10, center = false);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    translate([0, 0, 3])\n    tanoak_tree();\n}",
    "renders": true
  },
  {
    "plant": "chinquapin",
    "openscad_code": "// Chinquapin Plant - Realistic Style, Medium Complexity\n// Approx 120mm tall, 3D printable with 2mm walls\n\n// Main parameters\n$fn = 32;  // Smooth curves\nstem_d = 8;\nstem_h = 40;\nleaf_w = 25;\nleaf_l = 45;\nleaf_t = 2;\nnut_d = 12;\nnut_h = 15;\nburr_spike_l = 8;\nburr_spike_d = 1.5;\n\nmodule stem() {\n    // Main woody stem\n    cylinder(d=stem_d, h=stem_h);\n    \n    // Bark texture rings\n    for(i = [0:5:stem_h-5]) {\n        translate([0, 0, i])\n            rotate([0, 0, i*15])\n            difference() {\n                cylinder(d=stem_d+1, h=3);\n                cylinder(d=stem_d-1, h=3.5);\n            }\n    }\n}\n\nmodule leaf(rotation=0, bend=0) {\n    // Single chinquapin leaf - elliptical with serrated edges\n    translate([0, 0, -leaf_t/2])\n    rotate([bend, 0, rotation])\n    difference() {\n        // Main leaf blade\n        scale([leaf_l, leaf_w, leaf_t])\n        sphere(d=1);\n        \n        // Leaf stem\n        translate([-leaf_l/2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(d=3, h=10);\n        \n        // Veins - subtract thin grooves\n        for(i = [-1:0.5:1]) {\n            rotate([0, 0, i*30])\n            translate([leaf_l/4, 0, 0])\n            scale([leaf_l/2, 2, 1])\n            cube([1, 1, leaf_t+0.1], center=true);\n        }\n    }\n}\n\nmodule leaves_cluster() {\n    // Cluster of leaves around stem top\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([stem_d/2 + leaf_l/4, 0, stem_h - 5])\n        leaf(rotation=i, bend=20);\n    }\n    \n    // Additional upper leaves\n    for(i = [22.5:45:337.5]) {\n        rotate([0, 0, i])\n        translate([stem_d/2 + leaf_l/3, 0, stem_h + 5])\n        leaf(rotation=i+15, bend=-15);\n    }\n}\n\nmodule burr_spike() {\n    // Individual spike on burr\n    cylinder(d=burr_spike_d, h=burr_spike_l);\n}\n\nmodule burr() {\n    // Chinquapin burr with spiky exterior\n    difference() {\n        // Main burr body\n        sphere(d=nut_d + 8);\n        \n        // Hollow inside for nuts\n        sphere(d=nut_d + 2);\n        \n        // Opening splits\n        for(i = [0:60:300]) {\n            rotate([0, 0, i])\n            translate([0, nut_d/2, 0])\n            cube([nut_d/2, nut_d, nut_d*2], center=true);\n        }\n    }\n    \n    // Spikes on burr\n    for(i = [0:30:330]) {\n        for(j = [0:30:150]) {\n            rotate([i, j, 0])\n            translate([0, 0, nut_d/2 + 4])\n            burr_spike();\n        }\n    }\n}\n\nmodule nuts() {\n    // Cluster of 3-4 chinquapin nuts\n    for(i = [0:120:240]) {\n        rotate([0, 0, i])\n        translate([stem_d/2 + 15, 0, stem_h - 15])\n        difference() {\n            // Nut shape - pointed oval\n            scale([1, 1, 1.3])\n            sphere(d=nut_d);\n            \n            // Pointed tip\n            translate([0, 0, -nut_h/2])\n            cylinder(d1=nut_d, d2=0, h=nut_h/2);\n            \n            // Flat base\n            translate([0, 0, nut_h/2])\n            cylinder(d=nut_d, h=1);\n        }\n    }\n    \n    // Mature burrs higher up\n    translate([0, 0, stem_h - 10])\n    burr();\n}\n\n// Assembly\nunion() {\n    // Main plant structure\n    stem();\n    leaves_cluster();\n    nuts();\n    \n    // Base for stability\n    translate([0, 0, -2])\n    cylinder(d=stem_d + 10, h=2);\n}",
    "renders": true
  },
  {
    "plant": "ginkgo",
    "openscad_code": "// Ginkgo plant - medium complexity, realistic style\n// Overall height: ~120mm\n\n$fn = 36;\n\nmodule stem(h) {\n    // Main stem with slight taper\n    cylinder(h1 = h, r1 = 6, r2 = 4.5);\n}\n\nmodule leaf_pair(angle, y_offset, scale) {\n    // Single ginkgo leaf pair (fan shape)\n    translate([0, y_offset, 0])\n    rotate([0, 0, angle])\n    scale([scale, scale, scale])\n    union() {\n        // Left leaf\n        translate([-15, 0, 0])\n        rotate([0, 0, 25])\n        linear_extrude(height = 1.5)\n        polygon(points = [\n            [0, 0],\n            [-12, 5],\n            [-18, 15],\n            [-20, 25],\n            [-15, 35],\n            [-8, 40],\n            [0, 42],\n            [8, 40],\n            [15, 35],\n            [20, 25],\n            [18, 15],\n            [12, 5],\n            [0, 0]\n        ]);\n        \n        // Right leaf (mirror)\n        mirror([1, 0, 0])\n        rotate([0, 0, 25])\n        linear_extrude(height = 1.5)\n        polygon(points = [\n            [0, 0],\n            [-12, 5],\n            [-18, 15],\n            [-20, 25],\n            [-15, 35],\n            [-8, 40],\n            [0, 42],\n            [8, 40],\n            [15, 35],\n            [20, 25],\n            [18, 15],\n            [12, 5],\n            [0, 0]\n        ]);\n        \n        // Central stem connecting leaves\n        translate([0, -5, -0.5])\n        cube([2, 10, 2], center = true);\n    }\n}\n\nmodule branching_stem(level) {\n    if (level > 0) {\n        // Main branch segment\n        cylinder(h = 25, r = 3.5 - level * 0.5);\n        \n        // Sub-branches\n        for (i = [-1, 1]) {\n            translate([0, 0, 20])\n            rotate([15 * i, 0, 45 * i])\n            translate([0, 0, 5])\n            branching_stem(level - 1);\n        }\n        \n        // Add leaves at branch ends\n        if (level == 1) {\n            leaf_pair(0, 0, 0.7);\n        }\n    }\n}\n\n// Base pot\nmodule pot() {\n    difference() {\n        // Outer pot\n        translate([0, 0, -15])\n        cylinder(h = 20, r1 = 25, r2 = 22);\n        \n        // Inner cavity\n        translate([0, 0, -13])\n        cylinder(h = 18, r1 = 22, r2 = 19);\n        \n        // Drainage hole\n        translate([0, 0, -15])\n        cylinder(h = 2, r = 3);\n    }\n    \n    // Soil surface\n    translate([0, 0, 5])\n    color(\"saddlebrown\")\n    cylinder(h = 2, r = 22);\n}\n\n// Main plant assembly\nunion() {\n    // Pot base\n    pot();\n    \n    // Main stem\n    translate([0, 0, 5])\n    stem(40);\n    \n    // First branching level\n    translate([0, 0, 45])\n    rotate([0, 0, 0])\n    branching_stem(3);\n    \n    // Second branching level\n    translate([0, 0, 35])\n    rotate([0, 0, 120])\n    branching_stem(2);\n    \n    // Third branching level\n    translate([0, 0, 30])\n    rotate([0, 0, -120])\n    branching_stem(2);\n    \n    // Direct leaves on main stem\n    for (i = [1:3]) {\n        translate([0, 0, 20 + i * 8])\n        rotate([0, 0, i * 60])\n        leaf_pair(90, 8, 0.5);\n    }\n}",
    "renders": true
  },
  {
    "plant": "yew",
    "openscad_code": "// Yew Plant (Taxus baccata) – medium realism, 3D-printable\n// Overall height ~120 mm, printable as a single piece\n\n$fn = 32;           // smooth curves\nwall = 2;           // printable wall thickness\n\nmodule trunk() {\n    // tapered main trunk\n    linear_extrude(height=35, scale=[0.8,0.8], center=false)\n        offset(delta=wall)\n            circle(d=18);\n}\n\nmodule branch(h, ang, rot) {\n    // angled branch with slight taper\n    translate([0,0,h*0.5])\n        rotate([ang,0,rot])\n            linear_extrude(height=h, scale=[0.7,0.7], center=true)\n                offset(delta=wall)\n                    circle(d=8);\n}\n\nmodule needle() {\n    // single yew needle leaf\n    scale([1,5,0.4])\n        sphere(d=2);\n}\n\nmodule needles_cluster(n, radius) {\n    // cluster of needles on a twig\n    for(i=[0:n-1])\n        rotate([0,0,i*360/n])\n            translate([radius,0,0])\n                rotate([90,0,0])\n                    needle();\n}\n\nmodule foliage_ball(d) {\n    // dense ball of foliage\n    union() {\n        sphere(d=d);\n        for(z=[-d/2:d/4:d/2])\n            rotate([0,0,rands(0,360,1)[0]])\n                translate([rands(0,d*0.4,1)[0],0,z])\n                    rotate([rands(-30,30,1)[0],0,0])\n                        needles_cluster(6, 4);\n    }\n}\n\nmodule yew_tree() {\n    trunk();\n    \n    // five main ascending branches\n    for(i=[0:4]) {\n        branch(25, 40, i*72);\n    }\n    \n    // secondary smaller branches with foliage\n    for(i=[0:4]) {\n        translate([0,0,20])\n            rotate([0,0,i*72])\n                translate([12,0,0])\n                    rotate([0,-20,0])\n                        branch(18, 20, 0);\n    }\n    \n    // foliage balls on tips\n    for(i=[0:4]) {\n        translate([0,0,20])\n            rotate([0,0,i*72])\n                translate([12,0,18])\n                    foliage_ball(22);\n    }\n    \n    // top foliage crown\n    translate([0,0,32])\n        foliage_ball(28);\n}\n\nyew_tree();",
    "renders": true
  },
  {
    "plant": "juniper",
    "openscad_code": "// Juniper Plant - Realistic Style, Medium Complexity\n// Sized for 3D printing (80mm height)\n\n// Main parameters\npot_r = 25;\npot_h = 20;\ntrunk_h = 30;\ntrunk_r = 4;\nfoliage_r = 15;\n$fn = 32;\n\n// Pot module\nmodule pot() {\n    difference() {\n        // Main pot body\n        cylinder(h = pot_h, r1 = pot_r, r2 = pot_r * 0.8);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n        cylinder(h = pot_h - 4, r1 = pot_r - 2, r2 = pot_r * 0.8 - 2);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n        cylinder(h = 3, r = 3);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, pot_h - 2])\n    sphere(r = 22);\n}\n\n// Trunk with texture\nmodule trunk() {\n    union() {\n        // Main trunk\n        cylinder(h = trunk_h, r = trunk_r);\n        \n        // Texture rings\n        for (i = [1:3:trunk_h]) {\n            translate([0, 0, i])\n            cylinder(h = 1, r = trunk_r + 0.5);\n        }\n    }\n}\n\n// Single foliage cluster\nmodule foliage_cluster(r, h, angle) {\n    translate([0, 0, h])\n    rotate([0, angle, 0])\n    scale([1, 1, 0.7])\n    sphere(r = r);\n}\n\n// Main foliage structure\nmodule foliage() {\n    union() {\n        // Central crown\n        translate([0, 0, trunk_h])\n        sphere(r = foliage_r);\n        \n        // Upper clusters\n        for (i = [0:60:359]) {\n            rotate([0, 0, i])\n            translate([foliage_r * 0.7, 0, trunk_h + foliage_r * 0.5])\n            sphere(r = foliage_r * 0.6);\n        }\n        \n        // Mid-level clusters\n        for (i = [30:90:359]) {\n            rotate([0, 0, i])\n            translate([foliage_r * 0.5, 0, trunk_h - 5])\n            rotate([0, 15, 0])\n            sphere(r = foliage_r * 0.4);\n        }\n        \n        // Lower clusters\n        for (i = [60:120:359]) {\n            rotate([0, 0, i])\n            translate([foliage_r * 0.3, 0, trunk_h - 10])\n            rotate([0, 25, 0])\n            sphere(r = foliage_r * 0.3);\n        }\n        \n        // Side branches\n        for (i = [0:45:359]) {\n            rotate([0, 0, i])\n            translate([trunk_r + 2, 0, trunk_h * 0.6])\n            rotate([0, -30, 0])\n            union() {\n                cylinder(h = 8, r = 1.5);\n                translate([0, 0, 8])\n                sphere(r = 4);\n            }\n        }\n    }\n}\n\n// Scale to printable size\nscale([0.8, 0.8, 0.8])\nunion() {\n    // Pot and soil\n    pot();\n    soil();\n    \n    // Plant\n    translate([0, 0, pot_h])\n    union() {\n        trunk();\n        foliage();\n    }\n}",
    "renders": true
  },
  {
    "plant": "hemlock",
    "openscad_code": "// Hemlock Plant - Realistic Style (Medium Complexity)\n// Overall height ~120mm, optimized for FDM printing\n\n$fn = 36;  // Smooth curves for printing\n\n// Main stem\nmodule stem() {\n    difference() {\n        // Main trunk\n        cylinder(h = 100, d1 = 8, d2 = 6, center = false);\n        \n        // Hollow core for material saving\n        translate([0, 0, 2])\n            cylinder(h = 96, d1 = 4, d2 = 2, center = false);\n    }\n}\n\n// Compound leaf structure\nmodule compound_leaf(height, angle, rotation) {\n    translate([0, 0, height])\n    rotate([0, angle, rotation]) {\n        // Central stem of leaf\n        rotate([90, 0, 0])\n        cylinder(h = 25, d = 1.5, center = false);\n        \n        // Leaflet pairs\n        for (i = [5:5:20]) {\n            // Left leaflet\n            translate([-5, 0, i])\n            rotate([0, -30, 0])\n            scale([1, 0.4, 0.1])\n            sphere(d = 8);\n            \n            // Right leaflet\n            translate([5, 0, i])\n            rotate([0, 30, 0])\n            scale([1, 0.4, 0.1])\n            sphere(d = 8);\n        }\n    }\n}\n\n// Umbrella-shaped flower cluster\nmodule flower_cluster(height) {\n    translate([0, 0, height]) {\n        // Central stem\n        cylinder(h = 15, d = 2, center = false);\n        \n        // Umbrella rays\n        for (i = [0:30:330]) {\n            rotate([0, 0, i])\n            translate([8, 0, 15])\n            rotate([30, 0, 0])\n            cylinder(h = 20, d = 1, center = false);\n        }\n        \n        // Small flowers along rays\n        for (i = [0:30:330]) {\n            for (j = [5:5:15]) {\n                rotate([0, 0, i])\n                translate([8 + j * sin(30), 0, 15 + j * cos(30)])\n                sphere(d = 2.5);\n            }\n        }\n    }\n}\n\n// Lower foliage branches\nmodule foliage_branch(height, angle, rotation) {\n    translate([0, 0, height])\n    rotate([0, 0, rotation]) {\n        // Main branch\n        rotate([angle, 0, 90])\n        cylinder(h = 30, d1 = 3, d2 = 1.5, center = false);\n        \n        // Sub-branches with leaves\n        for (i = [10:8:25]) {\n            rotate([0, 0, 45])\n            translate([i * sin(angle), 0, i * cos(angle)])\n            compound_leaf(0, -angle, 0);\n        }\n    }\n}\n\n// Base root flare\nmodule root_flare() {\n    difference() {\n        // Flared base\n        cylinder(h = 10, d1 = 12, d2 = 8, center = false);\n        \n        // Root indentations\n        for (i = [0:45:315]) {\n            rotate([0, 0, i])\n            translate([4, 0, 5])\n            scale([1, 0.3, 1])\n            sphere(d = 6);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    root_flare();\n    \n    // Main stem\n    translate([0, 0, 10])\n    stem();\n    \n    // Lower foliage branches\n    for (i = [0:60:300]) {\n        foliage_branch(25, 30, i);\n    }\n    \n    // Mid-level compound leaves\n    for (i = [0:90:270]) {\n        compound_leaf(50, 15, i);\n        compound_leaf(65, -15, i + 45);\n    }\n    \n    // Upper flower clusters\n    flower_cluster(100);\n}",
    "renders": true
  },
  {
    "plant": "larch",
    "openscad_code": "// Larch Tree in realistic style\n// Height: 120 mm, suitable for 3D printing\n// Wall thickness: 2 mm for all hollow parts\n\n$fn = 36;  // Smooth curves for printing\n\n// Main module\nmodule larch_tree() {\n    // Trunk\n    trunk();\n    \n    // Branches\n    branches();\n    \n    // Needles (cone clusters)\n    needles();\n}\n\n// Trunk with tapering and bark texture\nmodule trunk() {\n    difference() {\n        // Main trunk shape\n        cylinder(h1 = 100, h2 = 80, r1 = 8, r2 = 5, center = false);\n        \n        // Hollow core for 3D printing\n        translate([0, 0, 2])\n            cylinder(h1 = 96, h2 = 76, r1 = 6, r2 = 3, center = false);\n    }\n    \n    // Bark texture rings\n    for(i = [5:10:95]) {\n        translate([0, 0, i])\n            rotate([0, 0, i * 3])\n                difference() {\n                    cylinder(h = 2, r = 8 - i * 0.03, center = false);\n                    cylinder(h = 2.1, r = 6 - i * 0.03, center = false);\n                }\n    }\n}\n\n// Branch system\nmodule branches() {\n    // Lower branches\n    for(angle = [0:60:300]) {\n        rotate([0, 0, angle])\n            translate([0, 6, 25])\n                rotate([30, 0, 0])\n                    branch_segment(35, 5, 3);\n    }\n    \n    // Middle branches\n    for(angle = [30:60:330]) {\n        rotate([0, 0, angle])\n            translate([0, 4, 45])\n                rotate([25, 0, 0])\n                    branch_segment(30, 4, 2.5);\n    }\n    \n    // Upper branches\n    for(angle = [15:60:315]) {\n        rotate([0, 0, angle])\n            translate([0, 2, 65])\n                rotate([20, 0, 0])\n                    branch_segment(25, 3, 2);\n    }\n}\n\n// Individual branch segment\nmodule branch_segment(length, start_r, end_r) {\n    difference() {\n        cylinder(h = length, r1 = start_r, r2 = end_r, center = false);\n        \n        // Hollow core\n        translate([0, 0, 2])\n            cylinder(h = length - 4, r1 = start_r - 2, r2 = end_r - 2, center = false);\n    }\n    \n    // Sub branches\n    if(length > 20) {\n        for(i = [10:15:length - 10]) {\n            rotate([0, 0, i * 5])\n                translate([0, start_r - (start_r - end_r) * i / length, i])\n                    rotate([25, 0, 0])\n                        branch_segment(length * 0.4, end_r * 0.7, end_r * 0.4);\n        }\n    }\n}\n\n// Needles arranged in cones\nmodule needles() {\n    // Bottom layer cones\n    for(angle = [0:60:300]) {\n        rotate([0, 0, angle])\n            translate([0, 25, 30])\n                needle_cone(20, 15);\n    }\n    \n    // Middle layer cones\n    for(angle = [30:60:330]) {\n        rotate([0, 0, angle])\n            translate([0, 20, 50])\n                needle_cone(18, 12);\n    }\n    \n    // Top layer cones\n    for(angle = [15:60:315]) {\n        rotate([0, 0, angle])\n            translate([0, 15, 70])\n                needle_cone(16, 10);\n    }\n    \n    // Top cone\n    needle_cone(12, 8);\n}\n\n// Individual needle cone\nmodule needle_cone(radius, height) {\n    difference() {\n        // Outer cone\n        cylinder(h = height, r1 = radius, r2 = 0, center = false);\n        \n        // Hollow cone\n        translate([0, 0, 2])\n            cylinder(h = height - 4, r1 = radius - 2, r2 = 0, center = false);\n    }\n    \n    // Needle details (small cylinders)\n    for(i = [2:4:height - 2]) {\n        r = radius * (1 - i / height);\n        for(angle = [0:30:360]) {\n            rotate([0, 0, angle])\n                translate([r - 1, 0, i])\n                    rotate([90, 0, 0])\n                        cylinder(h = 3, r = 0.5, center = false);\n        }\n    }\n}\n\n// Assembly\nlarch_tree();",
    "renders": true
  },
  {
    "plant": "tamarack",
    "openscad_code": "// Tamarack (Larix laricina) – realistic medium-detail model\n// Height ~110 mm, suitable for 3D printing (2 mm wall thickness, no overhangs >45°)\n\n// trunk\nmodule trunk(h=50, r=4) {\n    difference() {\n        cylinder(h=h, r1=r, r2=r*0.7, $fn=20);      // tapered trunk\n        for(i=[0:3])                                // slight bark grooves\n            rotate([0,0,i*90])\n                translate([r-0.5,0,0])\n                    cube([1,0.5,h], center=true);\n    }\n}\n\n// single needle cluster\nmodule needle_cluster(len=6, dia=0.6) {\n    // radial needles\n    for(a=[0:30:330])\n        rotate([0,a,0])\n            translate([0,0,len/2])\n                cylinder(h=len, d=dia, $fn=6);\n}\n\n// short shoot with needles\nmodule short_shoot() {\n    union() {\n        cylinder(h=3, d=1.4, $fn=8);                // woody peg\n        translate([0,0,2])\n            scale([0.3,0.3,1])\n                sphere(d=4, $fn=12);                // needle bundle base\n        translate([0,0,2.1])\n            needle_cluster();\n    }\n}\n\n// branch with alternating short shoots\nmodule branch(len=25, ang=0) {\n    rotate([ang,0,0])\n        union() {\n            cylinder(h=len, d=2, $fn=12);           // branch stem\n            for(i=[2:4:len-2]) {                    // shoots every 4 mm\n                // left side\n                translate([0,-1,i])\n                    rotate([0,90,0])\n                        short_shoot();\n                // right side offset\n                translate([0,1,i+2])\n                    rotate([0,-90,0])\n                        short_shoot();\n            }\n        }\n}\n\n// crown: layered whorls\nmodule crown() {\n    union() {\n        // top cone\n        for(i=[0:60:300])                           // 6 branches per whorl\n            rotate([0,0,i])\n                translate([0,0,52])\n                    rotate([30,0,0])\n                        branch(30);\n        // middle whorl\n        for(i=[30:60:330])\n            rotate([0,0,i])\n                translate([0,0,40])\n                    rotate([50,0,0])\n                        branch(25);\n        // bottom whorl\n        for(i=[0:60:300])\n            rotate([0,0,i])\n                translate([0,0,30])\n                    rotate([70,0,0])\n                        branch(20);\n    }\n}\n\n// cone\nmodule cone(h=18, r=6) {\n    difference() {\n        cylinder(h=h, r1=r, r2=0, $fn=32);          // cone shape\n        // subtle scales\n        for(z=[2:3:h-2])\n            for(a=[0:20:340])\n                rotate([0,0,a])\n                    translate([r-1.4,0,z])\n                        cube([2,0.4,1.5], center=true);\n    }\n}\n\n// assemble tamarack\nunion() {\n    trunk();\n    crown();\n    // small cones\n    translate([0,0,55])\n        rotate([0,0,0])\n            cone();\n    translate([8,0,50])\n        rotate([0,0,30])\n            cone();\n    translate([-7,-5,48])\n        rotate([0,0,-45])\n            cone();\n}",
    "renders": true
  },
  {
    "plant": "douglasfir",
    "openscad_code": "// Douglas Fir Tree - Realistic Style\n// Medium complexity 3D printable model\n\n// Main parameters\ntrunk_height = 60;\ntrunk_base_d = 10;\ntrunk_top_d = 6;\nfoliage_base_d = 25;\ntotal_height = 120;\n\n// Trunk module with bark texture\nmodule trunk() {\n    // Main trunk\n    cylinder(h=trunk_height, d1=trunk_base_d, d2=trunk_top_d, $fn=20);\n    \n    // Bark rings\n    for(i=[5:10:trunk_height-10]) {\n        translate([0, 0, i])\n            rotate([0, 0, i*5])\n            difference() {\n                cylinder(h=2, d=trunk_base_d - (trunk_base_d-trunk_top_d)*(i/trunk_height) + 1, $fn=20);\n                cylinder(h=3, d=trunk_base_d - (trunk_base_d-trunk_top_d)*(i/trunk_height) - 1, $fn=20);\n            }\n    }\n    \n    // Low branches\n    for(i=[1:3]) {\n        rotate([0, 0, i*120])\n        translate([trunk_base_d/2 - 2, 0, trunk_height/3]) {\n            rotate([30, 0, 0])\n            cylinder(h=15, d1=4, d2=2, $fn=8);\n        }\n    }\n}\n\n// Needle cluster module\nmodule needle_cluster(radius, height) {\n    union() {\n        // Central stem\n        cylinder(h=height, d=radius/3, $fn=6);\n        \n        // Individual needles\n        for(i=[0:30]) {\n            rotate([0, 0, i*12])\n            translate([radius/2, 0, height/2])\n            rotate([90, 0, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(h=radius*0.8, d=0.5, $fn=3);\n        }\n    }\n}\n\n// Foliage layer\nmodule foliage_layer(diameter, height, z_pos, taper) {\n    translate([0, 0, z_pos])\n    scale([1, 1, taper])\n    cylinder(h=height, d=diameter, $fn=12);\n    \n    // Add needle clusters\n    for(i=[0:6:360]) {\n        rotate([0, 0, i])\n        translate([diameter/2 - 3, 0, z_pos + height/2])\n        needle_cluster(diameter/4, height/2);\n    }\n}\n\n// Main tree assembly\nmodule douglas_fir() {\n    // Base\n    union() {\n        // Trunk\n        trunk();\n        \n        // Multiple foliage layers\n        foliage_layer(foliage_base_d, 25, trunk_height - 5, 1.2);\n        foliage_layer(foliage_base_d*0.8, 20, trunk_height + 15, 1.1);\n        foliage_layer(foliage_base_d*0.6, 15, trunk_height + 30, 1);\n        foliage_layer(foliage_base_d*0.4, 10, trunk_height + 40, 0.9);\n        foliage_layer(foliage_base_d*0.25, 8, trunk_height + 47, 0.8);\n    }\n    \n    // Root flare at base\n    translate([0, 0, 0])\n    cylinder(h=5, d1=trunk_base_d + 4, d2=trunk_base_d, $fn=20);\n    \n    // Surface roots\n    for(i=[0:45:360]) {\n        rotate([0, 0, i])\n        translate([trunk_base_d/2 + 2, 0, 0])\n        rotate([90, 0, 0])\n        scale([1, 0.3, 1])\n        cylinder(h=8, d1=3, d2=1, $fn=6);\n    }\n}\n\n// Scale to printable size\nscale([0.8, 0.8, 0.8])\ndouglas_fir();",
    "renders": true
  },
  {
    "plant": "baobab",
    "openscad_code": "// Baobab tree in realistic style - medium complexity\n// Designed for 3D printing with 2mm wall thickness\n\n// Main parameters\ntrunk_height = 60;\ntrunk_diameter = 30;\ncanopy_size = 80;\nbase_height = 8;\n\n// Root module - creates spreading roots\nmodule roots() {\n    for (i = [0:60:359]) {\n        rotate([0, 0, i]) {\n            translate([0, -trunk_diameter/2, 0]) {\n                cube([6, 3, 4], center = true);\n            }\n            translate([0, -trunk_diameter/2 - 4, 0]) {\n                cube([4, 2, 3], center = true);\n            }\n            translate([0, -trunk_diameter/2 - 8, 0]) {\n                cube([3, 1.5, 2], center = true);\n            }\n        }\n    }\n}\n\n// Trunk module - bottle-shaped characteristic of baobabs\nmodule trunk() {\n    union() {\n        // Base flare\n        cylinder(h1 = base_height, h2 = trunk_height/3, r1 = trunk_diameter/2 + 10, r2 = trunk_diameter/2 + 5, center = false);\n        \n        // Main trunk\n        cylinder(h = trunk_height*2/3, r = trunk_diameter/2, center = false);\n        \n        // Taper to top\n        translate([0, 0, trunk_height*2/3]) {\n            cylinder(h1 = trunk_height/3, h2 = trunk_height/6, r1 = trunk_diameter/2, r2 = trunk_diameter/2 - 5, center = false);\n        }\n        \n        // Texture lines\n        for (i = [0:30:359]) {\n            rotate([0, 0, i]) {\n                translate([trunk_diameter/2 - 1, 0, base_height]) {\n                    cube([2, 0.5, trunk_height - base_height], center = false);\n                }\n            }\n        }\n    }\n}\n\n// Branch module - creates spreading branches\nmodule branch(angle, length, thickness) {\n    rotate([angle, 0, 0]) {\n        // Main branch\n        translate([0, 0, trunk_height - 10]) {\n            cylinder(h = length, r = thickness, center = false);\n        }\n        \n        // Sub-branches\n        for (i = [0:45:180]) {\n            rotate([0, 0, i]) {\n                translate([0, thickness/2, trunk_height - 10 + length*0.7]) {\n                    cylinder(h = length*0.6, r = thickness*0.7, center = false);\n                }\n            }\n        }\n    }\n}\n\n// Canopy module - sparse foliage at branch tips\nmodule canopy() {\n    // Main canopy spheres\n    translate([0, 0, trunk_height + 20]) {\n        sphere(r = canopy_size/2);\n    }\n    \n    // Smaller canopies on branches\n    for (angle = [30, 45, 60]) {\n        rotate([0, angle, 0]) {\n            translate([canopy_size/3, 0, trunk_height + 15]) {\n                sphere(r = canopy_size/4);\n            }\n        }\n    }\n    \n    // Foliage details\n    for (i = [0:60:359]) {\n        rotate([0, 0, i]) {\n            translate([canopy_size/2 * cos(i), canopy_size/2 * sin(i), trunk_height + 25]) {\n                sphere(r = 8);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Roots at base\n    translate([0, 0, 0]) {\n        roots();\n    }\n    \n    // Main trunk\n    translate([0, 0, 0]) {\n        trunk();\n    }\n    \n    // Primary branches\n    branch(30, 35, 4);\n    branch(-30, 30, 4);\n    branch(15, 25, 3);\n    branch(-15, 25, 3);\n    \n    // Canopy\n    translate([0, 0, 0]) {\n        canopy();\n    }\n}",
    "renders": true
  },
  {
    "plant": "kapok",
    "openscad_code": "// Kapok plant - Ceiba pentandra\n// Medium complexity realistic style\n// 3D printable version with proper wall thickness\n\n$fn = 50;\n\nmodule kapok_plant() {\n    // Main trunk\n    color(\"#8B4513\") {\n        // Lower trunk - wider base\n        cylinder(h = 60, r1 = 12, r2 = 8, center = false);\n        \n        // Upper trunk - tapering\n        translate([0, 0, 60])\n            cylinder(h = 40, r1 = 8, r2 = 5, center = false);\n    }\n    \n    // Branches - 5 main branches in spiral pattern\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([0, 0, 80 + i * 5])\n                branch(i);\n        }\n    }\n    \n    // Compound leaves\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72 + 36]) {\n            translate([0, 0, 85 + i * 3])\n                leaf_cluster(45 - i * 5);\n        }\n    }\n    \n    // Seed pods - characteristic kapok pods\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 15]) {\n            translate([0, 0, 70 - i * 10])\n                seed_pod(15 - i * 3);\n        }\n    }\n}\n\nmodule branch(level) {\n    // Main branch\n    color(\"#8B4513\") {\n        rotate([30 + level * 5, 0, 0])\n            cylinder(h = 30 - level * 3, r1 = 4, r2 = 2, center = false);\n    }\n    \n    // Secondary branches\n    for(j = [0:2]) {\n        rotate([0, 0, j * 120]) {\n            translate([0, 0, 10 + j * 5])\n                rotate([45 - j * 10, 0, 0])\n                    cylinder(h = 15 - level * 2, r1 = 2.5, r2 = 1.5, center = false);\n        }\n    }\n}\n\nmodule leaf_cluster(height) {\n    // Petiole (leaf stem)\n    color(\"#228B22\") {\n        rotate([0, 0, 0])\n            cylinder(h = height, r1 = 1.5, r2 = 1, center = false);\n        \n        // 5-7 leaflets per leaf\n        for(k = [0:5]) {\n            translate([0, 0, height * 0.8])\n                rotate([0, 0, k * 60])\n                    leaflet(k);\n        }\n    }\n}\n\nmodule leaflet(index) {\n    // Elliptical leaflet shape\n    color(\"#228B22\") {\n        scale([1, 0.6, 1])\n            rotate([0, 90, 0])\n                cylinder(h = 15, r1 = 6, r2 = 2, center = false);\n        \n        // Vein detail\n        color(\"#006400\") {\n            translate([0, -0.5, 7.5])\n                cube([0.5, 1, 15], center = true);\n        }\n        \n        // Midrib\n        translate([0, 0, 7.5])\n            rotate([90, 0, 0])\n                cylinder(h = 15, r1 = 0.5, r2 = 0.5, center = true);\n    }\n}\n\nmodule seed_pod(size) {\n    // Kapok seed pod - oblong shape\n    color(\"#D2691E\") {\n        translate([size * 2, 0, 0])\n            rotate([0, 90, 0])\n                difference() {\n                    // Main pod shape\n                    scale([1, 0.7, 1])\n                        cylinder(h = size * 3, r1 = size * 1.5, r2 = size * 0.8, center = false);\n                    \n                    // Split along length\n                    translate([size * 1.5, 0, -1])\n                        cube([size * 3, size * 2, 2], center = true);\n                    \n                    // Internal cavity for printing\n                    translate([size * 1.5, 0, size * 1.5])\n                        scale([0.8, 0.6, 0.9])\n                            cylinder(h = size * 2.5, r1 = size * 1.2, r2 = size * 0.6, center = false);\n                }\n    }\n    \n    // Fibrous kapok fibers visible\n    color(\"#F5F5DC\") {\n        for(f = [0:8]) {\n            rotate([0, 0, f * 45])\n                translate([size * 2 + size * 0.5, 0, size * 1.5])\n                    cylinder(h = size * 0.5, r1 = 0.3, r2 = 0.1, center = false);\n        }\n    }\n}\n\n// Generate the complete kapok plant\nkapok_plant();",
    "renders": true
  },
  {
    "plant": "eucalyptus",
    "openscad_code": "// Realistic Eucalyptus Plant - 3D Printable\n// Medium complexity (~120 lines)\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\nstem_height = 120;\nstem_dia = 8;\nleaf_length = 35;\nleaf_width = 12;\nleaf_thickness = 2;\nnum_leaf_pairs = 6;\npot_height = 25;\npot_dia = 45;\n\nmodule stem() {\n    // Main trunk with slight taper\n    cylinder(h=stem_height, d1=stem_dia, d2=stem_dia*0.8, center=false);\n    \n    // Add subtle texture rings\n    for(i=[0:5:stem_height-10]) {\n        translate([0,0,i]) \n            cylinder(h=2, d=stem_dia+0.5, $fn=6);\n    }\n}\n\nmodule leaf_pair(angle, height, size_factor) {\n    translate([0,0,height]) {\n        rotate([0,0,angle]) {\n            // Left leaf\n            rotate([0,-25,0]) \n                scale([size_factor,size_factor,size_factor]) \n                    leaf();\n            // Right leaf\n            rotate([0,25,180]) \n                scale([size_factor,size_factor,size_factor]) \n                    leaf();\n        }\n    }\n}\n\nmodule leaf() {\n    // Main leaf blade with curved shape\n    difference() {\n        // Base leaf shape\n        hull() {\n            translate([leaf_length*0.8,0,0]) \n                sphere(d=leaf_width*0.8);\n            translate([leaf_length*0.2,0,0]) \n                sphere(d=leaf_width*0.4);\n        }\n        \n        // Central vein depression\n        translate([leaf_length*0.5,0,-leaf_thickness]) \n            cube([leaf_length*0.2, leaf_width*0.3, leaf_thickness*2], center=true);\n    \n        // Side cutouts for realistic shape\n        translate([leaf_length*0.6, leaf_width*0.3, 0]) \n            sphere(d=leaf_width*0.4);\n        translate([leaf_length*0.6, -leaf_width*0.3, 0]) \n            sphere(d=leaf_width*0.4);\n    }\n    \n    // Add stem connection\n    translate([0,0,0]) \n        cylinder(h=leaf_length*0.15, d=leaf_width*0.2, center=true);\n}\n\nmodule eucalyptus_tree() {\n    stem();\n    \n    // Generate leaf pairs spiraling up stem\n    for(i=[0:num_leaf_pairs-1]) {\n        leaf_pair(\n            i*60 + 30,  // Rotation angle\n            stem_height*0.2 + i*15,  // Height\n            max(0.5, 1 - i*0.1)  // Size decreases toward top\n        );\n    }\n    \n    // Top cluster of smaller leaves\n    translate([0,0,stem_height-5]) {\n        for(j=[0:4]) {\n            rotate([0,0,j*72]) \n                rotate([30-j*5,0,0]) \n                    scale([0.6,0.6,0.6]) \n                        leaf();\n        }\n    }\n}\n\nmodule pot() {\n    difference() {\n        // Outer pot shape\n        cylinder(h=pot_height, d=pot_dia, d2=pot_dia*0.9);\n        \n        // Hollow interior\n        translate([0,0,-1]) \n            cylinder(h=pot_height+2, d=pot_dia-4, d2=pot_dia*0.9-3);\n        \n        // Drainage hole (3D printing friendly)\n        translate([0,0,-1]) \n            cylinder(h=2, d=5);\n    }\n    \n    // Soil surface\n    translate([0,0,1]) \n        cylinder(h=2, d=pot_dia-4, d2=pot_dia*0.9-3);\n}\n\n// Assembly\ntranslate([0,0,pot_height]) \n    eucalyptus_tree();\n    \npot();",
    "renders": true
  },
  {
    "plant": "acacia",
    "openscad_code": "// Acacia Plant - Realistic Style, Medium Complexity\n// 3D printable model with 2mm wall thickness and no overhangs\n\n// Main parameters\ntrunk_height = 60;\ntrunk_radius = 4;\nbase_radius = 8;\ncanopy_radius = 25;\nleaf_length = 12;\nleaf_width = 3;\nleaf_thickness = 2;\n\n// Base module\nmodule base() {\n    difference() {\n        cylinder(h=5, r1=base_radius, r2=base_radius*0.9, $fn=32);\n        cylinder(h=6, r1=base_radius-2, r2=base_radius*0.9-2, $fn=32);\n    }\n}\n\n// Trunk with gentle taper\nmodule trunk() {\n    difference() {\n        cylinder(h=trunk_height, r1=trunk_radius, r2=trunk_radius*0.7, $fn=16);\n        cylinder(h=trunk_height+1, r1=trunk_radius-2, r2=trunk_radius*0.7-2, $fn=16);\n    }\n}\n\n// Individual leaf pod\nmodule leaf_pod() {\n    difference() {\n        sphere(d=leaf_length, $fn=16);\n        cube([leaf_length*1.5, leaf_length*1.5, leaf_length*0.5], center=true);\n    }\n}\n\n// Leaf cluster\nmodule leaf_cluster() {\n    for (i = [0:3]) {\n        rotate([0, 0, i*90+45]) {\n            translate([0, leaf_length*0.6, 0]) {\n                rotate([0, 90, 0]) {\n                    scale([1, 0.7, 0.3]) {\n                        leaf_pod();\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main branch\nmodule branch(level, length, angle) {\n    if (level > 0) {\n        rotate([0, angle, 0]) {\n            difference() {\n                cylinder(h=length, r1=length/8, r2=length/10, $fn=8);\n                cylinder(h=length+1, r1=length/8-1, r2=length/10-1, $fn=8);\n            }\n            \n            // Sub branches\n            translate([0, 0, length*0.7]) {\n                for (j = [0:2]) {\n                    rotate([0, 0, j*120+45*level]) {\n                        branch(level-1, length*0.6, 30+level*5);\n                    }\n                }\n            }\n            \n            // Leaves at branch end\n            if (level == 1) {\n                translate([0, 0, length]) {\n                    leaf_cluster();\n                }\n            }\n        }\n    }\n}\n\n// Main canopy\nmodule canopy() {\n    for (i = [0:5]) {\n        rotate([0, 0, i*60+30]) {\n            branch(3, 15, 20);\n        }\n    }\n    \n    // Top cluster\n    translate([0, 0, 5]) {\n        leaf_cluster();\n    }\n}\n\n// Thorns - characteristic acacia feature\nmodule thorns() {\n    for (i = [10:15:trunk_height-10]) {\n        rotate([0, 0, i*30]) {\n            translate([trunk_radius, 0, i]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=3, r1=1, r2=0.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nbase();\ntranslate([0, 0, 5]) {\n    trunk();\n    thorns();\n    translate([0, 0, trunk_height-5]) {\n        canopy();\n    }\n}",
    "renders": true
  },
  {
    "plant": "mesquite",
    "openscad_code": "// Mesquite Plant - Realistic Style, Medium Complexity\n// Overall height ~120mm, 3D printable with 2mm walls and minimal overhangs\n\n// Parameters\ntrunk_h = 60;\ntrunk_r = 8;\nmain_branch_len = 35;\nbranch_thick = 4;\nleaflet_len = 12;\nleaflet_w = 3;\nseedpod_len = 25;\nseedpod_w = 6;\n\n// Main trunk\nmodule trunk() {\n    union() {\n        // Base flare\n        cylinder(h=10, r1=trunk_r*1.2, r2=trunk_r, $fn=16);\n        translate([0,0,10])\n            cylinder(h=trunk_h-10, r=trunk_r, $fn=16);\n    }\n}\n\n// Main branching structure\nmodule branches() {\n    // Primary branches - mesquite has zig-zag pattern\n    for(i=[0:120:359]) {\n        rotate([0,0,i])\n        translate([0,0,trunk_h-5])\n        rotate([20+rand(i)*15, 0, 0])\n        union() {\n            // Branch segment 1\n            cylinder(h=main_branch_len, r=branch_thick, $fn=8);\n            \n            // Secondary branches\n            for(j=[0:60:179]) {\n                translate([0,0,main_branch_len*0.6])\n                rotate([0,0,j])\n                rotate([30,0,0])\n                cylinder(h=main_branch_len*0.7, r=branch_thick*0.7, $fn=6);\n            }\n            \n            // Terminal twigs with leaves\n            translate([0,0,main_branch_len])\n            rotate([15,0,0])\n            twig_with_leaves();\n        }\n    }\n}\n\n// Twigs with compound leaves\nmodule twig_with_leaves() {\n    color(\"darkgreen\")\n    for(k=[0:45:135]) {\n        rotate([0,0,k])\n        translate([0,0,0])\n        rotate([0,25,0])\n        union() {\n            // Twig\n            cylinder(h=leaflet_len*1.5, r=branch_thick*0.4, $fn=6);\n            \n            // Leaflets - mesquite has pinnate leaves\n            for(l=[0:leaflet_len/3:leaflet_len]) {\n                translate([0,0,l])\n                rotate([0,-90,0])\n                scale([1,0.3,1])\n                sphere(r=leaflet_w, $fn=8);\n            }\n        }\n    }\n}\n\n// Mesquite seed pods\nmodule seedpods() {\n    color(\"brown\")\n    for(i=[0:120:359]) {\n        rotate([0,0,i+60])\n        translate([trunk_r*1.5,0,trunk_h*0.8])\n        rotate([90,0,0])\n        scale([1,1,0.4])\n        cylinder(h=seedpod_len, r=seedpod_w/2, $fn=12);\n    }\n}\n\n// Ground base for stability\nmodule base() {\n    color(\"saddlebrown\")\n    difference() {\n        cylinder(h=3, r=trunk_r*2, $fn=32);\n        cylinder(h=4, r=trunk_r*1.8, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    translate([0,0,3])\n    trunk();\n    \n    translate([0,0,3])\n    branches();\n    \n    seedpods();\n}\n\n// Helper for randomness\nfunction rand(n) = (n*13 % 100)/100;",
    "renders": true
  },
  {
    "plant": "jacaranda",
    "openscad_code": "// Jacaranda Tree - Realistic Medium Complexity\n// Overall height ~120mm, suitable for desktop 3D printing\n\n$fn = 32;\ntrunk_height = 40;\ntrunk_radius = 5;\nbranch_levels = 3;\nflowers_per_cluster = 8;\nflower_radius = 3;\n\nmodule trunk() {\n    // Main trunk with slight taper\n    cylinder(h=trunk_height, r1=trunk_radius, r2=trunk_radius*0.8, center=false);\n    \n    // Bark texture rings\n    for(i = [1:4:trunk_height]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(h=2, r=trunk_radius+0.5, center=false);\n                cylinder(h=2.2, r=trunk_radius-0.5, center=false);\n            }\n    }\n}\n\nmodule branch(length, angle, level) {\n    if(level > 0) {\n        // Branch cylinder\n        rotate([0, 0, angle])\n            rotate([80, 0, 0])\n                cylinder(h=length, r=trunk_radius/(level+1), center=false);\n        \n        // Sub-branches\n        sub_length = length * 0.7;\n        for(i = [0:60:300]) {\n            translate([0, 0, length])\n                rotate([0, 0, i])\n                    branch(sub_length, angle + 20 - level*5, level-1);\n        }\n        \n        // Leaves and flowers at branch tips\n        if(level == 1) {\n            translate([0, 0, length])\n                rotate([0, 0, angle])\n                    leaf_cluster();\n        }\n    }\n}\n\nmodule leaf_cluster() {\n    // Leaf stems\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            rotate([30, 0, 0])\n                translate([0, 0, 5])\n                    cylinder(h=15, r=0.5, center=false);\n    }\n    \n    // Flower clusters\n    for(i = [0:120:240]) {\n        rotate([0, 0, i])\n            translate([0, 0, 18])\n                flower_cluster();\n    }\n}\n\nmodule flower_cluster() {\n    // Central stem\n    cylinder(h=8, r=0.3, center=false);\n    \n    // Individual flowers\n    for(i = [0:360/flowers_per_cluster:360]) {\n        rotate([0, 0, i])\n            translate([0, 4, 4])\n                rotate([90, 0, 0])\n                    flower();\n    }\n}\n\nmodule flower() {\n    // Flower bell shape\n    difference() {\n        sphere(r=flower_radius);\n        translate([0, 0, -flower_radius])\n            cube([flower_radius*2, flower_radius*2, flower_radius], center=true);\n    }\n    \n    // Flower interior\n    translate([0, 0, -flower_radius/2])\n        sphere(r=flower_radius*0.6);\n    \n    // Petal details\n    for(i = [0:72:360]) {\n        rotate([0, 0, i])\n            translate([flower_radius*0.7, 0, -flower_radius/2])\n                rotate([90, 0, 0])\n                    scale([0.5, 0.5, 1])\n                        cylinder(h=flower_radius*0.8, r=flower_radius*0.3, center=false);\n    }\n}\n\nmodule base() {\n    // Decorative pot base\n    difference() {\n        cylinder(h=15, r=15, center=false);\n        cylinder(h=16, r=13, center=false);\n    }\n    \n    // Soil surface\n    translate([0, 0, 1])\n        cylinder(h=1, r=14.5, center=false);\n}\n\n// Assembly\nunion() {\n    // Base and trunk\n    base();\n    translate([0, 0, 15])\n        trunk();\n    \n    // Main branches\n    for(i = [0:120:240]) {\n        translate([0, 0, trunk_height/2])\n            rotate([0, 0, i])\n                branch(trunk_height*0.8, 20, branch_levels);\n    }\n    \n    // Top branches\n    translate([0, 0, trunk_height])\n        for(i = [0:90:270]) {\n            rotate([0, 0, i])\n                branch(trunk_height*0.6, 10, branch_levels-1);\n        }\n}",
    "renders": true
  },
  {
    "plant": "ceiba",
    "openscad_code": "// Ceiba Plant - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Overall scale factor for easy resizing\nscale_factor = 1;\n\n// Main trunk parameters\ntrunk_height = 80 * scale_factor;\ntrunk_base_diameter = 20 * scale_factor;\ntrunk_top_diameter = 15 * scale_factor;\n\n// Branch parameters\nnum_primary_branches = 5;\nbranch_start_height = 60 * scale_factor;\nbranch_length = 25 * scale_factor;\nbranch_diameter = 6 * scale_factor;\n\n// Leaf parameters\nleaf_clusters = 8;\nleaves_per_cluster = 5;\nleaf_length = 12 * scale_factor;\nleaf_width = 3 * scale_factor;\nleaf_thickness = 1 * scale_factor;\n\n// Thorn parameters\nthorn_height = 4 * scale_factor;\nthorn_base = 2 * scale_factor;\n\n// Module for creating tapered trunk\nmodule tapered_trunk(height, base_d, top_d) {\n    union() {\n        // Main trunk cylinder with slight taper\n        cylinder(h=height, d1=base_d, d2=top_d, $fn=32);\n        \n        // Add thorns in spiral pattern\n        for(i = [0:30]) {\n            rotate([0, 0, i*12]) \n            translate([base_d/2 - thorn_base/2, 0, height * (i/30)])\n            rotate([90, 0, 0])\n            cylinder(h=thorn_height, d1=thorn_base, d2=0.5, $fn=6);\n        }\n    }\n}\n\n// Module for creating a branch\nmodule branch(length, diameter, angle) {\n    rotate([0, 0, angle])\n    rotate([30, 0, 0])\n    cylinder(h=length, d=diameter, $fn=16);\n}\n\n// Module for creating leaf cluster\nmodule leaf_cluster(pos_x, pos_y, pos_z) {\n    translate([pos_x, pos_y, pos_z]) {\n        for(i = [0:leaves_per_cluster-1]) {\n            rotate([0, 0, i*72]) \n            rotate([0, 30, 0])\n            translate([leaf_length/2, 0, 0])\n            scale([leaf_length, leaf_width, leaf_thickness])\n            sphere(d=1, $fn=8);\n        }\n    }\n}\n\n// Main model\nunion() {\n    // Base trunk\n    translate([0, 0, 0])\n    tapered_trunk(trunk_height, trunk_base_diameter, trunk_top_diameter);\n    \n    // Primary branches\n    for(i = [0:num_primary_branches-1]) {\n        rotate([0, 0, i*360/num_primary_branches])\n        translate([0, trunk_top_diameter/2 - branch_diameter/2, branch_start_height])\n        branch(branch_length, branch_diameter, 0);\n    }\n    \n    // Secondary branches (smaller)\n    for(i = [0:num_primary_branches-1]) {\n        rotate([0, 0, i*360/num_primary_branches + 30])\n        translate([0, trunk_top_diameter/2 - 4, branch_start_height + 10])\n        branch(branch_length*0.7, branch_diameter*0.7, 0);\n    }\n    \n    // Leaf clusters at branch ends\n    for(i = [0:num_primary_branches-1]) {\n        angle = i*360/num_primary_branches;\n        branch_end_x = cos(angle) * (trunk_top_diameter/2 + branch_length);\n        branch_end_y = sin(angle) * (trunk_top_diameter/2 + branch_length);\n        leaf_cluster(branch_end_x, branch_end_y, branch_start_height + branch_length*0.5);\n    }\n    \n    // Additional leaf clusters higher up\n    for(i = [0:leaf_clusters-1]) {\n        angle = i*45;\n        height = trunk_height - 15 - (i*3);\n        radius = trunk_top_diameter/2 + 5;\n        leaf_cluster(cos(angle)*radius, sin(angle)*radius, height);\n    }\n    \n    // Root flare at base\n    translate([0, 0, 0])\n    cylinder(h=5, d=trunk_base_diameter*1.3, $fn=32);\n    \n    // Buttress roots\n    for(i = [0:7]) {\n        rotate([0, 0, i*45])\n        translate([trunk_base_diameter/2 - 2, -2, 0])\n        cube([8, 4, 5]);\n    }\n}",
    "renders": true
  },
  {
    "plant": "palo",
    "openscad_code": "// Palo plant - medium complexity realistic style\n// Overall height: 120mm, pot diameter: 60mm\n\n$fn = 32;\n\n// Main module\nmodule palo_plant() {\n    // Plant pot\n    difference() {\n        cylinder(h = 40, d1 = 60, d2 = 55);  // Tapered pot\n        translate([0, 0, 2])\n            cylinder(h = 38, d1 = 56, d2 = 51);  // Hollow interior\n    }\n    \n    // Soil surface\n    translate([0, 0, 38])\n        cylinder(h = 2, d = 55);\n    \n    // Main trunk\n    translate([0, 0, 40])\n        cylinder(h = 50, d1 = 8, d2 = 6);  // Tapered trunk\n    \n    // Generate 6 leaf nodes along trunk\n    for(i = [1:6]) {\n        rotate([0, 0, i * 60])\n        translate([0, 0, 45 + i * 7])\n            leaf_cluster();\n    }\n    \n    // Top leaf cluster\n    translate([0, 0, 90])\n        rotate([0, 0, 30])\n        scale([1.2, 1.2, 1.2])\n            leaf_cluster();\n}\n\n// Leaf cluster module with multiple leaves\nmodule leaf_cluster() {\n    // Central stem\n    cylinder(h = 15, d = 2);\n    \n    // 5 leaves per cluster at different angles\n    for(angle = [30, 60, 90, 120, 150]) {\n        rotate([0, 0, angle * 72])\n        rotate([0, angle - 60, 0])\n            leaf();\n    }\n}\n\n// Single leaf module\nmodule leaf() {\n    // Leaf blade\n    translate([0, 0, 7.5])\n        rotate([90, 0, 0])\n        scale([1, 3, 0.5])\n        sphere(d = 8);\n    \n    // Leaf stem\n    translate([0, 0, 0])\n        rotate([0, 15, 0])\n        cylinder(h = 15, d1 = 2, d2 = 1);\n}\n\n// Generate the model\npalo_plant();",
    "renders": true
  },
  {
    "plant": "kauri",
    "openscad_code": "// Kauri Tree - Realistic Medium Complexity\n// Height: 120mm\n\n// Trunk parameters\ntrunk_height = 80;\ntrunk_base_diameter = 20;\ntrunk_top_diameter = 15;\n\n// Branch parameters\nbranch_count = 5;\nbranch_levels = 3;\nbranch_angle = 30;\nbranch_taper = 0.7;\n\n// Leaf cluster parameters\nleaf_cluster_size = 8;\nleaf_size = 4;\nleaf_thickness = 1.5;\n\n// Root flare parameters\nroot_flare_height = 10;\nroot_count = 6;\n\n// Bark texture\nbark_segments = 12;\n\n// Main trunk module\nmodule trunk(height, base_d, top_d) {\n    difference() {\n        // Main trunk body\n        cylinder(h=height, d1=base_d, d2=top_d, $fn=bark_segments);\n        \n        // Bark texture grooves\n        for (i = [0:bark_segments-1]) {\n            rotate([0, 0, i * 360/bark_segments]) \n                translate([base_d/2 - 1, -0.5, 0])\n                    cube([2, 1, height]);\n        }\n    }\n}\n\n// Root flare module\nmodule root_flare(height, count, trunk_d) {\n    for (i = [0:count-1]) {\n        rotate([0, 0, i * 360/count]) {\n            translate([trunk_d/4, -2, 0]) {\n                rotate([20, 0, 0]) {\n                    scale([1, 0.5, 1])\n                        cylinder(h=height, d=trunk_d/2, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Branch module\nmodule branch(length, diameter, angle) {\n    rotate([0, 0, angle]) {\n        rotate([0, 30, 0]) {\n            cylinder(h=length, d=diameter, $fn=8);\n            \n            // Sub-branches\n            if (length > 15) {\n                translate([0, 0, length * 0.7]) {\n                    branch(length * 0.6, diameter * branch_taper, 45);\n                    branch(length * 0.6, diameter * branch_taper, -45);\n                }\n            }\n        }\n    }\n}\n\n// Leaf cluster module\nmodule leaf_cluster(size, count) {\n    for (i = [0:count-1]) {\n        rotate([0, 0, i * 360/count]) {\n            rotate([45 + i * 10, 0, 0]) {\n                translate([0, 0, size]) {\n                    scale([1, 0.7, 0.1])\n                        sphere(d=size, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Main tree construction\nunion() {\n    // Root flare at base\n    root_flare(root_flare_height, root_count, trunk_base_diameter);\n    \n    // Main trunk\n    translate([0, 0, root_flare_height])\n        trunk(trunk_height, trunk_base_diameter, trunk_top_diameter);\n    \n    // Branches\n    for (level = [0:branch_levels-1]) {\n        for (i = [0:branch_count-1]) {\n            translate([0, 0, root_flare_height + trunk_height * (level + 1)/(branch_levels + 1)]) {\n                rotate([0, 0, i * 360/branch_count + level * 15]) {\n                    branch(30 - level * 5, 4 - level, branch_angle);\n                }\n            }\n        }\n    }\n    \n    // Top foliage cluster\n    translate([0, 0, root_flare_height + trunk_height + 5]) {\n        leaf_cluster(leaf_cluster_size, 8);\n    }\n    \n    // Side foliage clusters\n    for (level = [1:branch_levels]) {\n        for (i = [0:branch_count-1]) {\n            translate([0, 0, root_flare_height + trunk_height * level/(branch_levels + 1)]) {\n                rotate([0, 0, i * 360/branch_count + level * 10]) {\n                    translate([20 - level * 3, 0, 10]) {\n                        leaf_cluster(leaf_cluster_size - level, 6);\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "plant": "rimu",
    "openscad_code": "// Rimu tree (Dacrydium cupressinum) - realistic medium complexity\n// Overall height: 120mm, printable base: 50mm diameter\n\n// Parameters\ntrunk_height = 80;\ntrunk_base_r = 6;\ntrunk_top_r = 4;\nfoliage_start = 30;\nfoliage_layers = 8;\nbranch_count = 5;\nscale_factor = 0.85;  // scaling between foliage layers\n\n// Trunk with slight taper\nmodule trunk() {\n    cylinder(h=trunk_height, r1=trunk_base_r, r2=trunk_top_r, $fn=32);\n    \n    // Bark texture rings\n    for(i=[0:5:trunk_height-10]) {\n        translate([0,0,i])\n            difference() {\n                cylinder(h=2, r1=trunk_base_r-(i*0.025), r2=trunk_base_r-(i*0.025), $fn=32);\n                cylinder(h=3, r1=trunk_base_r-(i*0.025)-1, r2=trunk_base_r-(i*0.025)-1, $fn=32);\n            }\n    }\n}\n\n// Individual drooping branchlet\nmodule branchlet(len, angle, droop) {\n    translate([0,0,0])\n    rotate([angle, droop, 0])\n    union() {\n        // Stem\n        cylinder(h=len, r=0.8, $fn=8);\n        \n        // Scale-like leaves along stem\n        for(i=[2:2:len-2]) {\n            translate([0,0,i])\n            rotate([0,0,i*30])\n            union() {\n                // Opposite pairs of leaves\n                translate([1.5,0,0])\n                    rotate([90,0,0])\n                    scale([1,0.3,0.8])\n                    sphere(r=1, $fn=8);\n                translate([-1.5,0,0])\n                    rotate([90,0,0])\n                    scale([1,0.3,0.8])\n                    sphere(r=1, $fn=8);\n            }\n        }\n    }\n}\n\n// Foliage cluster (layer)\nmodule foliage_cluster(radius, height, layer) {\n    // Central stem\n    cylinder(h=height, r=1.2, $fn=8);\n    \n    // Radiating branchlets\n    for(i=[0:30:359]) {\n        rotate([0,0,i]) {\n            // Vary branchlet length by layer\n            branch_len = 15 - layer*1.5;\n            translate([0, radius*0.6, height/2])\n                branchlet(branch_len, 60 + layer*3, 15 + layer*2);\n            translate([0, radius*0.4, height/2 - 5])\n                branchlet(branch_len*0.8, 45 + layer*2, 10 + layer);\n        }\n    }\n}\n\n// Main tree assembly\nmodule rimu_tree() {\n    // Thick base for printing stability\n    difference() {\n        cylinder(h=5, r=25, $fn=64);\n        cylinder(h=6, r=23, $fn=64);\n    }\n    \n    // Trunk\n    translate([0,0,5])\n        trunk();\n    \n    // Progressive foliage layers\n    for(layer=[0:foliage_layers-1]) {\n        scale_fac = pow(scale_factor, layer);\n        translate([0,0,foliage_start + layer*8])\n            scale([scale_fac, scale_fac, 1])\n                foliage_cluster(12 - layer, 8, layer);\n    }\n    \n    // Top cone of foliage\n    translate([0,0,foliage_start + foliage_layers*8])\n        scale([pow(scale_factor, foliage_layers), pow(scale_factor, foliage_layers), 1.5])\n        cylinder(h=15, r1=8, r2=0, $fn=32);\n}\n\n// Render the tree\nrimu_tree();",
    "renders": true
  },
  {
    "plant": "totara",
    "openscad_code": "// Totara plant - realistic style, medium complexity\n// Height: ~120mm, suitable for 3D printing\n\n// Main parameters\ntrunk_height = 60;\ntrunk_radius = 8;\nfoliage_radius = 45;\ncrown_levels = 5;\n\nmodule totara_trunk() {\n    // Main trunk\n    cylinder(h=trunk_height, r=trunk_radius, $fn=20);\n    \n    // Trunk texture rings\n    for(i = [0:5:trunk_height-5]) {\n        translate([0, 0, i])\n            cylinder(h=1.5, r=trunk_radius+0.5, $fn=20);\n    }\n    \n    // Base flare\n    translate([0, 0, -2])\n        cylinder(h=5, r1=trunk_radius+3, r2=trunk_radius, $fn=20);\n}\n\nmodule totara_branch(height, angle, length, thickness) {\n    translate([0, 0, height])\n        rotate([0, angle, 0])\n            rotate([0, 0, rand(-15, 15)])\n                union() {\n                    // Branch stem\n                    cylinder(h=length, r=thickness, $fn=8);\n                    \n                    // Branch continuation (smaller)\n                    translate([0, 0, length-2])\n                        rotate([0, rand(-30, 30), rand(-30, 30)])\n                            cylinder(h=length*0.7, r=thickness*0.7, $fn=8);\n                }\n}\n\nmodule totara_foliage_cluster(pos, size) {\n    translate(pos) {\n        scale([1, 0.8, 1.2])\n            sphere(r=size, $fn=12);\n        \n        // Additional smaller clusters\n        translate([size*0.6, 0, 0])\n            scale([0.7, 0.7, 0.8])\n                sphere(r=size*0.6, $fn=10);\n        \n        translate([-size*0.4, size*0.5, size*0.3])\n            scale([0.8, 0.6, 0.7])\n                sphere(r=size*0.5, $fn=8);\n    }\n}\n\nmodule totara_crown() {\n    // Create crown levels\n    for(level = [0:crown_levels-1]) {\n        level_height = trunk_height + level*15;\n        level_radius = foliage_radius * (1 - level*0.15);\n        \n        // Multiple foliage clusters per level\n        for(angle = [0:60:359]) {\n            branch_angle = 30 + level*5;\n            branch_length = 20 + level*3;\n            branch_thickness = 3 - level*0.4;\n            \n            rotate([0, 0, angle])\n                totara_branch(\n                    level_height,\n                    branch_angle,\n                    branch_length,\n                    branch_thickness\n                );\n            \n            // Add foliage at branch ends\n            rotate([0, 0, angle])\n                translate([\n                    sin(branch_angle) * branch_length,\n                    0,\n                    level_height + cos(branch_angle) * branch_length\n                ])\n                    totara_foliage_cluster([0, 0, 0], level_radius*0.4);\n        }\n        \n        // Central foliage mass\n        translate([0, 0, level_height])\n            totara_foliage_cluster([0, 0, 0], level_radius*0.5);\n    }\n    \n    // Top cone\n    translate([0, 0, trunk_height + crown_levels*15])\n        cylinder(h=25, r1=foliage_radius*0.4, r2=0, $fn=12);\n}\n\n// Generate random helper function\nfunction rand(min, max) = min + (max-min)*(rands(0,1,1)[0]);\n\n// Root system\nmodule totara_roots() {\n    for(angle = [0:45:359]) {\n        rotate([0, 0, angle])\n            rotate([90, 0, 0])\n                translate([trunk_radius*0.7, 0, 0])\n                    scale([1, 0.3, 0.5])\n                        cylinder(h=15, r1=3, r2=0, $fn=6);\n    }\n}\n\n// Main assembly\nunion() {\n    // Root flare\n    totara_roots();\n    \n    // Trunk\n    totara_trunk();\n    \n    // Crown\n    totara_crown();\n}\n\n// Add a simple base for printing stability\ntranslate([0, 0, -5])\n    cylinder(h=3, r=trunk_radius+5, $fn=20);",
    "renders": true
  },
  {
    "plant": "araucaria",
    "openscad_code": "// Araucaria (Monkey-Puzzle) Tree – 3D-printable, medium complexity\n// Approx. 120 mm tall; no overhangs >45°, 2 mm wall thicknesses\n\n// Parameters\ntrunk_h = 30;          // mm\ntrunk_r = 6;           // mm\nring_d  = 50;          // mm (widest spread)\nlevels  = 7;           // whorls of branches\nleaf_l  = 12;          // mm\nleaf_w  = 3;           // mm\nleaf_t  = 2;           // mm wall thickness\n\n$fn = 36;\n\nmodule trunk() {\n    // Simple tapered trunk\n    cylinder(h = trunk_h, r1 = trunk_r, r2 = trunk_r * 0.8, center = false);\n}\n\nmodule leaf() {\n    // Single stiff lanceolate leaf, printable without support\n    hull() {\n        translate([0, leaf_l/2, 0]) sphere(d = leaf_w);\n        translate([0, 0, 0]) sphere(d = leaf_w * 0.5);\n    }\n    scale([1, 1, leaf_t/leaf_w]) children();\n}\n\nmodule branch_ring(level) {\n    // One horizontal whorl of branches\n    n = 8 + level;               // more leaves higher up\n    r = ring_d * 0.5 * (1 - level*0.08); // tapering crown\n    for(i = [0:n-1]) {\n        angle = i * 360/n;\n        tilt = 20;               // low angle for printability\n        translate([0, 0, trunk_h * level/levels])\n        rotate([0, 0, angle])\n        translate([r, 0, 0])\n        rotate([0, 90 - tilt, 0])\n        leaf();\n    }\n}\n\nmodule apex() {\n    // Conical top above last whorl\n    cone_h = 10;\n    cylinder(h = cone_h, r1 = trunk_r*0.8, r2 = 0, center = false);\n}\n\n// Assembly\nunion() {\n    trunk();\n    for(l = [0:levels-1]) branch_ring(l);\n    translate([0, 0, trunk_h]) apex();\n}",
    "renders": true
  },
  {
    "plant": "bunya",
    "openscad_code": "// Bunya Pine (Araucaria bidwillii) - medium complexity realistic model\n// Height: 100mm, suitable for 3D printing\n\n// Trunk parameters\ntrunk_height = 40;\ntrunk_base_d = 12;\ntrunk_top_d = 8;\n\n// Crown parameters\ncrown_levels = 4;\nbase_crown_d = 35;\ncrown_height = 60;\n\n// Needle cluster parameters\nneedle_len = 8;\nneedle_d = 1.5;\nneedles_per_cluster = 8;\n\n// Cone parameters\ncone_height = 25;\ncone_base_d = 20;\ncone_segments = 16;\n\nmodule trunk() {\n    // Main trunk with slight taper\n    cylinder(h=trunk_height, d1=trunk_base_d, d2=trunk_top_d, $fn=8);\n    \n    // Surface texture - bark rings\n    for(i=[0:2:trunk_height]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(h=1.5, d=trunk_base_d - (trunk_base_d-trunk_top_d)*(i/trunk_height) + 2, $fn=8);\n                cylinder(h=2, d=trunk_base_d - (trunk_base_d-trunk_top_d)*(i/trunk_height), $fn=8);\n            }\n    }\n}\n\nmodule needle_cluster(base_r, height) {\n    // Central stem\n    color(\"darkgreen\")\n    cylinder(h=needle_len, d=1, $fn=6);\n    \n    // Individual needles radiating out\n    for(i=[0:needles_per_cluster-1]) {\n        rotate([0, 0, i*360/needles_per_cluster])\n        translate([0, 0, needle_len/2])\n        rotate([90, 0, 0])\n        color(\"forestgreen\")\n        cylinder(h=needle_len, d=needle_d, $fn=4);\n    }\n}\n\nmodule branch_level(level, max_levels) {\n    level_height = crown_height * (level/max_levels);\n    level_radius = base_crown_d/2 * (1 - level/(max_levels*1.5));\n    \n    // 3-5 branches per level\n    branch_count = 3 + (level % 3);\n    \n    for(i=[0:branch_count-1]) {\n        angle = i*360/branch_count;\n        branch_len = level_radius * 0.8;\n        \n        rotate([0, 0, angle])\n        translate([0, 0, level_height])\n        rotate([30 + level*5, 0, 0])\n        union() {\n            // Branch\n            color(\"saddle\")\n            cylinder(h=branch_len, d1=4-level*0.5, d2=2-level*0.3, $fn=6);\n            \n            // Needle clusters along branch\n            for(j=[1:5]) {\n                translate([0, 0, j*branch_len/6])\n                rotate([0, 0, j*45])\n                needle_cluster(0, 0);\n            }\n        }\n    }\n}\n\nmodule bunya_cone() {\n    // Main cone body\n    color(\"saddle\")\n    cylinder(h=cone_height, d1=cone_base_d, d2=cone_base_d/3, $fn=cone_segments);\n    \n    // Individual scales\n    for(ring=[0:4]) {\n        ring_height = cone_height * (ring/5);\n        ring_radius = cone_base_d/2 * (1 - ring_height/cone_height);\n        \n        for(scale=[0:cone_segments-1]) {\n            rotate([0, 0, scale*360/cone_segments])\n            translate([ring_radius - 1, 0, ring_height])\n            rotate([90, 0, 0])\n            color(\"peru\")\n            cylinder(h=3, d1=4, d2=2, $fn=4);\n        }\n    }\n    \n    // Cone tip\n    translate([0, 0, cone_height])\n    color(\"saddle\")\n    sphere(d=cone_base_d/3, $fn=8);\n}\n\nmodule bunya_pine() {\n    // Trunk\n    translate([0, 0, 0])\n    trunk();\n    \n    // Branch levels\n    for(level=[0:crown_levels-1]) {\n        branch_level(level, crown_levels);\n    }\n    \n    // Top cone\n    translate([0, 0, trunk_height + crown_height - 10])\n    bunya_cone();\n}\n\n// Create the model centered at base\ntranslate([0, 0, 0])\nbunya_pine();",
    "renders": true
  },
  {
    "plant": "pandanus",
    "openscad_code": "// Pandanus Plant - Realistic Style, Medium Complexity\n// 3D printable pandanus (screw pine) with prop roots, trunk, and spiral leaves\n// Overall height ~120mm, suitable for 3D printing\n\n// Parameters\ntrunk_height = 60;\ntrunk_radius = 8;\nroot_count = 8;\nleaf_count = 30;\nleaf_length = 50;\nleaf_width = 6;\nprop_root_thickness = 4;\n\n// Prop roots module\nmodule prop_root(height, angle, twist) {\n    difference() {\n        // Main root structure\n        rotate([0, 0, twist]) \n        rotate([angle, 0, 0])\n        translate([0, 0, -height/2])\n        cylinder(h=height, r1=prop_root_thickness, r2=prop_root_thickness/2, $fn=8);\n        \n        // Hollow for 3D printing\n        translate([0, 0, -height/2 - 1])\n        cylinder(h=height + 2, r1=prop_root_thickness - 2, r2=prop_root_thickness/2 - 1, $fn=8);\n    }\n}\n\n// Spiral leaf module\nmodule spiral_leaf(length, width, height_offset, angle) {\n    // Leaf blade\n    rotate([0, 0, angle])\n    translate([0, 0, height_offset])\n    rotate([80, 0, 0])\n    linear_extrude(height=width, center=true, convexity=10)\n    polygon(points=[\n        [0, 0],\n        [length * 0.3, -width/2],\n        [length * 0.7, -width/3],\n        [length, 0],\n        [length * 0.7, width/3],\n        [length * 0.3, width/2],\n        [0, 0]\n    ]);\n    \n    // Leaf spine\n    translate([0, 0, height_offset])\n    rotate([80, 0, angle])\n    cylinder(h=length, r=0.5, $fn=4);\n}\n\n// Trunk module\nmodule trunk() {\n    difference() {\n        // Outer trunk\n        cylinder(h=trunk_height, r=trunk_radius, $fn=16);\n        \n        // Hollow trunk\n        translate([0, 0, -1])\n        cylinder(h=trunk_height + 2, r=trunk_radius - 2, $fn=16);\n        \n        // Trunk texture rings\n        for(i = [1:5:trunk_height-5]) {\n            translate([0, 0, i])\n            difference() {\n                cylinder(h=2, r=trunk_radius, $fn=16);\n                cylinder(h=3, r=trunk_radius - 1, $fn=16);\n            }\n        }\n    }\n}\n\n// Base module for stability\nmodule base() {\n    difference() {\n        cylinder(h=5, r=trunk_radius + 15, $fn=32);\n        translate([0, 0, -1])\n        cylinder(h=7, r=trunk_radius + 13, $fn=32);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    base();\n    \n    // Trunk\n    translate([0, 0, 5])\n    trunk();\n    \n    // Prop roots\n    for(i = [0:root_count-1]) {\n        angle = i * 360 / root_count;\n        prop_root(trunk_height * 0.7, 45, angle);\n    }\n    \n    // Spiral leaf crown\n    for(i = [0:leaf_count-1]) {\n        angle = i * 137.5; // Golden angle for spiral\n        height = trunk_height + 5 + (i * 0.5);\n        spiral_leaf(leaf_length, leaf_width, height, angle);\n    }\n    \n    // Central growing point\n    translate([0, 0, trunk_height + 8])\n    sphere(r=4, $fn=16);\n}",
    "renders": true
  },
  {
    "plant": "palm",
    "openscad_code": "// Palm Plant - Realistic Medium Complexity\n// Overall height ~120mm, pot ~50mm diameter\n\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=30, d1=50, d2=45, $fn=32);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h=28, d1=46, d2=41, $fn=32);\n    }\n    \n    // Base ring for stability\n    translate([0, 0, -2])\n        cylinder(h=4, d=52, $fn=32);\n}\n\nmodule trunk() {\n    // Main trunk segments with slight taper\n    for(i=[0:3]) {\n        translate([0, 0, 30 + i*12])\n            cylinder(h=15, d1=10-i*1.2, d2=9-i*1.2, $fn=16);\n    }\n}\n\nmodule leaf_segment(length, width, angle, twist) {\n    // Single leaf segment with proper taper\n    translate([0, 0, 0])\n        rotate([0, 0, twist])\n            rotate([angle, 0, 0])\n                translate([0, 0, -length/2])\n                    scale([1, width/length, 1])\n                        cube([length, 2, 1], center=true);\n}\n\nmodule frond(level, count, height) {\n    // Create a frond at given level\n    translate([0, 0, 30 + height])\n        for(i=[0:count-1]) {\n            rotate([0, 0, i*360/count])\n                for(j=[0:5]) {\n                    // Progressive leaf segments\n                    len = 20 + j*8;\n                    wid = 3 + j*1.5;\n                    ang = 15 + j*12;\n                    twi = (j%2==0) ? 5 : -5;\n                    \n                    translate([0, 0, j*2])\n                        leaf_segment(len, wid, ang, twi);\n                }\n        }\n}\n\nmodule palm() {\n    union() {\n        // Pot and soil\n        pot();\n        \n        translate([0, 0, 28])\n            color(\"saddlebrown\")\n                cylinder(h=4, d=45, $fn=32);\n        \n        // Trunk\n        color(\"tan\")\n            trunk();\n        \n        // Fronds at different heights\n        color(\"forestgreen\") {\n            frond(1, 6, 65);\n            frond(2, 5, 50);\n            frond(3, 4, 35);\n        }\n        \n        // Crownshaft at top\n        color(\"darkgreen\")\n            translate([0, 0, 75])\n                cylinder(h=8, d=6, $fn=16);\n    }\n}\n\n// Scale to fit 3D printer bed\nscale(0.8)\n    palm();",
    "renders": true
  },
  {
    "plant": "datepalm",
    "openscad_code": "// Date Palm Plant - Realistic Medium Complexity\n// Overall height ~120mm, printable as one piece\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Scale factor for easy resizing\nscale_factor = 1;\n\n// Main module\nmodule date_palm() {\n    // Base/roots\n    union() {\n        // Root flare at ground level\n        difference() {\n            cylinder(h = 10 * scale_factor, r1 = 18 * scale_factor, r2 = 14 * scale_factor, center = false);\n            translate([0, 0, -1]) \n                cylinder(h = 12 * scale_factor, r1 = 12 * scale_factor, r2 = 10 * scale_factor, center = false);\n        }\n        \n        // Trunk\n        for(i = [0:5:100]) {\n            translate([0, 0, 10 + i * scale_factor]) \n                rotate([0, 0, i * 1.5]) \n                cylinder(h = 5 * scale_factor, r1 = 14 * scale_factor - i * 0.08, r2 = 14 * scale_factor - (i + 5) * 0.08, center = false);\n        }\n        \n        // Crown area\n        translate([0, 0, 110 * scale_factor]) \n            sphere(20 * scale_factor);\n    }\n    \n    // Fronds (leaves)\n    module frond(length, angle, rotation) {\n        translate([0, 0, 110 * scale_factor])\n        rotate([angle, 0, rotation])\n        translate([0, 0, 15])\n        union() {\n            // Main frond stem\n            cylinder(h = length, r1 = 2, r2 = 0.5, center = false);\n            \n            // Leaflets\n            for(i = [0:5:length]) {\n                // Left side leaflets\n                translate([0, -i * 0.8, i])\n                rotate([0, 90, 30])\n                scale([1, 0.3, 0.1])\n                sphere(3 + (length - i) * 0.1);\n                \n                // Right side leaflets\n                translate([0, i * 0.8, i])\n                rotate([0, 90, -30])\n                scale([1, 0.3, 0.1])\n                sphere(3 + (length - i) * 0.1);\n            }\n        }\n    }\n    \n    // Generate multiple fronds in crown\n    for(i = [0:30:359]) {\n        frond(40 * scale_factor, 30 + sin(i * 3) * 10, i);\n    }\n    \n    // Dates cluster\n    module date_cluster() {\n        translate([0, 0, 105 * scale_factor])\n        for(j = [0:20:340]) {\n            rotate([0, 0, j])\n            translate([15 * scale_factor, 0, 0])\n            for(k = [0:1:5]) {\n                translate([0, 0, -k * 3])\n                sphere(2 * scale_factor);\n            }\n        }\n    }\n    \n    date_cluster();\n}\n\n// Render the palm\ndate_palm();",
    "renders": true
  },
  {
    "plant": "coconut",
    "openscad_code": "// Coconut Palm Plant - Realistic Style, Medium Complexity\n// 3D printable coconut palm with fruit, trunk, and fronds\n// Overall height ~120mm, coconut ~50mm diameter\n\n$fn = 36;  // Smooth curves for printing\nwall_thickness = 2;\n\n// Main coconut fruit\nmodule coconut() {\n    difference() {\n        // Main body\n        sphere(d = 50);\n        \n        // Three eyes on top\n        for (i = [0:2]) {\n            rotate([0, 0, i*120]) \n                translate([0, 10, 23]) \n                    sphere(d = 8);\n        }\n        \n        // Natural seam\n        rotate([0, 90, 0]) \n            cube([50, 2, 50], center = true);\n    }\n}\n\n// Coconut husk fibers\nmodule husk_fibers() {\n    for (i = [0:11]) {\n        rotate([0, 0, i*30]) {\n            translate([0, 0, -5]) \n                cylinder(h = 60, d1 = 48, d2 = 45);\n        }\n    }\n}\n\n// Palm frond leaf\nmodule frond_leaf(length = 40, width = 8) {\n    // Central rib\n    translate([0, 0, -length/2]) \n        cube([wall_thickness, width/3, length]);\n    \n    // Leaf segments\n    for (i = [0:8]) {\n        translate([0, 0, -20 + i*5]) {\n            rotate([0, 15 - i*3, 0]) {\n                // Left side\n                translate([0, width/2, 0]) \n                    cube([wall_thickness, width/2, 3]);\n                // Right side\n                translate([0, -width/2, 0]) \n                    cube([wall_thickness, -width/2, 3]);\n            }\n        }\n    }\n}\n\n// Palm frond structure\nmodule frond() {\n    union() {\n        // Stem\n        cylinder(h = 60, d = 6);\n        \n        // Leaves\n        for (i = [0:5]) {\n            rotate([0, 0, i*60]) {\n                translate([0, 0, 30]) \n                    rotate([0, 80 - i*10, 0]) \n                        frond_leaf(40 - i*3, 8 - i);\n            }\n        }\n    }\n}\n\n// Palm trunk with texture\nmodule trunk(height = 80) {\n    union() {\n        // Main trunk\n        cylinder(h = height, d = 20);\n        \n        // Ring texture\n        for (i = [0:height/5]) {\n            translate([0, 0, i*5]) \n                cylinder(h = 2, d = 22);\n        }\n        \n        // Base flare\n        translate([0, 0, -5]) \n            cylinder(h = 10, d1 = 30, d2 = 20);\n    }\n}\n\n// Root system\nmodule roots() {\n    for (i = [0:5]) {\n        rotate([0, 0, i*60]) {\n            translate([8, 0, -10]) \n                rotate([30, 0, 0]) \n                    cylinder(h = 20, d1 = 6, d2 = 3);\n        }\n    }\n}\n\n// Complete coconut palm plant\nunion() {\n    // Base with roots\n    roots();\n    \n    // Trunk\n    trunk(80);\n    \n    // Crown of fronds\n    translate([0, 0, 85]) {\n        for (i = [0:7]) {\n            rotate([0, 0, i*45]) {\n                rotate([0, -20, 0]) {\n                    translate([0, 0, -10]) \n                        frond();\n                }\n            }\n        }\n    }\n    \n    // Coconuts hanging\n    translate([20, 15, 75]) {\n        coconut();\n        husk_fibers();\n    }\n    \n    translate([-15, 20, 70]) {\n        rotate([0, 0, 30]) \n            scale([0.8, 0.8, 0.8]) {\n                coconut();\n                husk_fibers();\n            }\n    }\n    \n    translate([-10, -18, 72]) {\n        rotate([0, 0, -45]) \n            scale([0.9, 0.9, 0.9]) {\n                coconut();\n                husk_fibers();\n            }\n    }\n}",
    "renders": true
  },
  {
    "plant": "oilpalm",
    "openscad_code": "// Oil Palm Plant - Realistic Style, Medium Complexity\n// Approx. 100mm tall, 3D printable with 2mm walls\n\n$fn = 36;\n\n// Main parameters\ntrunk_height = 80;\ntrunk_radius = 6;\nleaf_length = 70;\nleaf_width = 12;\nleaf_thickness = 2;\nfrond_count = 8;\nfrond_tier_height = 20;\ntier_count = 3;\n\nmodule trunk() {\n    // Main trunk with slight taper\n    linear_extrude(height=trunk_height, twist=5, scale=[0.8, 0.8])\n        circle(r=trunk_radius);\n    \n    // Trunk texture rings\n    for(i = [0:5:trunk_height-10]) {\n        translate([0, 0, i])\n            cylinder(h=2, r1=trunk_radius+1, r2=trunk_radius+0.5);\n    }\n}\n\nmodule leaf_segment(length, width, thickness, curvature) {\n    // Single leaf segment with proper taper\n    hull() {\n        translate([0, 0, 0])\n            cube([width*0.8, thickness, length*0.1], center=true);\n        translate([0, 0, length*0.9])\n            cube([width*0.2, thickness, length*0.1], center=true);\n    }\n    \n    // Leaf veins\n    for(i = [0.2:0.2:0.8]) {\n        rotate([0, curvature, 0])\n            translate([0, 0, length*i])\n                cube([width*0.05, thickness*1.5, length*0.15], center=true);\n    }\n}\n\nmodule frond() {\n    // Frond stem\n    rotate([0, -20, 0])\n        cylinder(h=leaf_length*0.3, r=leaf_width/4, center=false);\n    \n    // Leaflets on both sides\n    for(i = [0:30:leaf_length-20]) {\n        // Left side leaflets\n        rotate([0, 90, 0])\n            translate([-leaf_width/2, 0, i])\n                leaf_segment(leaf_length*0.4, leaf_width/3, leaf_thickness, 15);\n        \n        // Right side leaflets\n        rotate([0, -90, 0])\n            translate([leaf_width/2, 0, i])\n                leaf_segment(leaf_length*0.4, leaf_width/3, leaf_thickness, -15);\n    }\n}\n\nmodule fruit_bunch() {\n    // Main fruit stem\n    rotate([0, 45, 0])\n        cylinder(h=25, r=3);\n    \n    // Individual fruits\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n            for(i = [0:8:20]) {\n                translate([8, 0, i])\n                    sphere(d=6);\n            }\n    }\n}\n\n// Main assembly\nunion() {\n    // Trunk\n    trunk();\n    \n    // Frond tiers\n    for(tier = [0:tier_count-1]) {\n        translate([0, 0, trunk_height - tier*frond_tier_height])\n            for(i = [0:360/frond_count:359]) {\n                rotate([0, 0, i])\n                    translate([trunk_radius+5, 0, 0])\n                        rotate([0, 0, -30])\n                            frond();\n            }\n    }\n    \n    // Fruit bunches\n    translate([trunk_radius+5, 0, trunk_height*0.6])\n        fruit_bunch();\n    translate([-trunk_radius-5, 0, trunk_height*0.4])\n        rotate([0, 0, 180])\n            fruit_bunch();\n}",
    "renders": true
  },
  {
    "plant": "traveler",
    "openscad_code": "// Traveler Plant - realistic style, medium complexity\n// 3D printable with 2mm walls and no overhangs\n\nmodule leaf(width, height, thickness, twist) {\n    // Create a single leaf with natural curve\n    translate([0, 0, height/2]) {\n        rotate([0, twist, 0]) {\n            hull() {\n                // Base of leaf\n                translate([0, 0, -height/2]) \n                    scale([width, thickness, 1]) sphere(d=2);\n                // Tip of leaf  \n                translate([0, 0, height/2]) \n                    scale([width/3, thickness/2, 1]) sphere(d=1);\n            }\n        }\n    }\n}\n\nmodule stem_segment(height, base_radius, top_radius) {\n    // Single segment of plant stem\n    cylinder(h=height, r1=base_radius, r2=top_radius, $fn=8);\n}\n\nmodule plant_stem(height, segments) {\n    // Build stem from segments with decreasing radius\n    for(i = [0:segments-1]) {\n        segment_height = height / segments;\n        base_r = 4 - (i * 0.5);\n        top_r = 4 - ((i + 1) * 0.5);\n        \n        translate([0, 0, i * segment_height]) {\n            stem_segment(segment_height, base_r, top_r);\n        }\n    }\n}\n\nmodule leaf_cluster(stem_height, count) {\n    // Generate cluster of leaves around stem\n    for(i = [0:count-1]) {\n        angle = i * (360 / count);\n        height_offset = stem_height * 0.4 + (i % 2) * 10;\n        \n        rotate([0, 0, angle]) {\n            translate([8, 0, height_offset]) {\n                rotate([0, -20, 0]) {\n                    leaf(6, 15, 1, 15);\n                }\n            }\n        }\n        \n        // Second layer offset\n        rotate([0, 0, angle + 45]) {\n            translate([7, 0, height_offset + 8]) {\n                rotate([0, -30, 0]) {\n                    leaf(5, 12, 0.8, 20);\n                }\n            }\n        }\n    }\n}\n\nmodule pot() {\n    // Basic plant pot with drainage\n    difference() {\n        // Outer pot\n        cylinder(h=15, r1=20, r2=18, $fn=32);\n        \n        // Inner cavity\n        translate([0, 0, -1]) \n            cylinder(h=16, r1=18, r2=16, $fn=32);\n        \n        // Drainage hole\n        translate([0, 0, -0.5]) \n            cylinder(h=2, r=2, $fn=16);\n    }\n    \n    // Pot base\n    translate([0, 0, -2]) \n        cylinder(h=2, r=20, $fn=32);\n}\n\nmodule soil_surface() {\n    // Surface of soil in pot\n    translate([0, 0, 14]) \n        scale([1, 1, 0.3]) \n            sphere(r=18, $fn=32);\n}\n\n// Main assembly\nunion() {\n    // Pot and soil\n    pot();\n    soil_surface();\n    \n    // Main plant\n    translate([0, 0, 15]) {\n        // Central stem\n        plant_stem(40, 8);\n        \n        // Main leaf clusters\n        translate([0, 0, 15]) {\n            leaf_cluster(40, 5);\n        }\n        \n        translate([0, 0, 25]) {\n            leaf_cluster(40, 4);\n        }\n        \n        // Top leaves\n        translate([0, 0, 40]) {\n            leaf_cluster(40, 3);\n        }\n        \n        // Single top leaf\n        rotate([0, 0, 60]) {\n            translate([0, 0, 45]) {\n                rotate([0, -15, 0]) {\n                    leaf(4, 10, 0.6, 10);\n                }\n            }\n        }\n    }\n    \n    // Baby shoots\n    for(i = [0:2]) {\n        angle = i * 120;\n        rotate([0, 0, angle]) {\n            translate([12, 0, 15]) {\n                rotate([0, 0, -30]) {\n                    plant_stem(15, 3);\n                    leaf_cluster(15, 3);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "plant": "royal",
    "openscad_code": "// Royal Plant: Crown Imperial (Fritillaria imperialis)\n// A majestic bulb plant with tiered crown-like bell flowers\n// Overall height ~120mm, suitable for 3D printing\n\n$fn = 30;  // Smooth curves for printing\n\nmodule stem_segment(h, r) {\n    // Create tapered stem segments with 2mm wall thickness\n    difference() {\n        cylinder(h=h, r1=r, r2=r*0.8);\n        translate([0, 0, 1]) \n            cylinder(h=h-2, r1=r-2, r2=r*0.8-2);\n    }\n}\n\nmodule leaf(length, width, angle) {\n    // Curved lanceolate leaf with central vein\n    rotate([0, 0, angle]) {\n        translate([0, -width/2, 0]) {\n            // Main leaf blade\n            difference() {\n                scale([1, 0.3, 1]) sphere(r=length/2);\n                translate([0, -2, 0]) \n                    scale([0.8, 0.2, 0.9]) sphere(r=length/2);\n            }\n            // Central vein\n            translate([0, 0, 1]) \n                scale([1.05, 0.05, 0.05]) \n                cube([length, width, 2], center=true);\n        }\n    }\n}\n\nmodule flower_bell(r, h, petals) {\n    // Royal crown-shaped bell flower\n    union() {\n        // Main bell\n        translate([0, 0, h/2]) {\n            difference() {\n                cylinder(h=h, r1=r, r2=r*0.7);\n                translate([0, 0, 2]) \n                    cylinder(h=h-4, r1=r-2, r2=r*0.7-2);\n            }\n        }\n        \n        // Petal edges (crown points)\n        for(i=[0:petals-1]) {\n            rotate([0, 0, i*360/petals]) {\n                translate([r-1, 0, h-3]) {\n                    rotate([0, 90, 0]) \n                        cylinder(h=5, r=2, r2=0.5);\n                }\n            }\n        }\n    }\n}\n\nmodule whorl(flowers, tier_height) {\n    // Arrange flowers in royal crown formation\n    for(i=[0:flowers-1]) {\n        rotate([0, 0, i*360/flowers + 15]) {\n            translate([20, 0, tier_height]) {\n                rotate([0, -15, 0]) \n                    flower_bell(r=8, h=15, petals=6);\n            }\n        }\n    }\n}\n\n// Main plant assembly\ntranslate([0, 0, 5]) {\n    union() {\n        // Base bulb (hidden in soil)\n        translate([0, 0, -10]) sphere(r=15);\n        \n        // Main stem\n        stem_segment(h=40, r=6);  // Lower\n        \n        translate([0, 0, 40]) {\n            // First leaf whorl\n            for(i=[0:5]) {\n                rotate([0, 0, i*60]) {\n                    translate([12, 0, 0]) {\n                        rotate([30, 0, 0]) \n                            leaf(length=35, width=12, angle=0);\n                    }\n                }\n            }\n            \n            stem_segment(h=35, r=5);  // Mid\n            \n            translate([0, 0, 35]) {\n                // Second leaf whorl\n                for(i=[0:4]) {\n                    rotate([0, 0, i*72 + 36]) {\n                        translate([10, 0, 0]) {\n                            rotate([25, 0, 0]) \n                                leaf(length=30, width=10, angle=0);\n                        }\n                    }\n                }\n                \n                stem_segment(h=30, r=4);  // Upper\n                \n                // Royal crown of flowers\n                translate([0, 0, 30]) {\n                    whorl(flowers=6, tier_height=0);      // Lower tier\n                    translate([0, 0, 15]) whorl(flowers=5, tier_height=0);  // Upper tier\n                    \n                    // Final crown tuft\n                    translate([0, 0, 15]) \n                        cylinder(h=8, r1=6, r2=0);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "plant": "cabbage",
    "openscad_code": "// Cabbage Plant - Realistic Style, Medium Complexity\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 32;  // Smooth curves for printing\n\n// Main cabbage head\nmodule cabbage_head() {\n    // Core structure\n    difference() {\n        union() {\n            // Main body - slightly flattened sphere\n            scale([1, 1, 0.7])\n            sphere(d = 80);\n            \n            // Add slight irregularities for realism\n            for(i = [0:7]) {\n                rotate([0, 0, i * 45])\n                translate([0, 35, 0])\n                scale([1.2, 0.8, 1])\n                sphere(d = 20);\n            }\n        }\n        \n        // Hollow out for 3D printing\n        scale([0.9, 0.9, 0.6])\n        sphere(d = 80);\n    }\n}\n\n// Individual leaf\nmodule leaf(size = 20, height = 5, angle = 0) {\n    rotate([0, 0, angle])\n    translate([0, size/2, height])\n    scale([1.5, 1, 0.3])\n    sphere(d = size);\n}\n\n// Cabbage leaves wrapping around head\nmodule outer_leaves() {\n    // Bottom leaves\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([0, 38, -10])\n        rotate([30, 0, 0])\n        scale([1.2, 1, 0.8])\n        leaf(35, 0, i * 5);\n    }\n    \n    // Middle leaves\n    for(i = [0:9]) {\n        rotate([0, 0, i * 40])\n        translate([0, 32, 5])\n        rotate([15, 0, 0])\n        scale([1, 0.9, 0.7])\n        leaf(30, 0, i * 8);\n    }\n    \n    // Top leaves\n    for(i = [0:7]) {\n        rotate([0, 0, i * 51])\n        translate([0, 25, 15])\n        rotate([5, 0, 0])\n        scale([0.8, 0.7, 0.6])\n        leaf(25, 0, i * 12);\n    }\n}\n\n// Stem/trunk\nmodule stem() {\n    // Main stem\n    cylinder(h = 25, d1 = 12, d2 = 8);\n    \n    // Root flare\n    translate([0, 0, -5])\n    cylinder(h = 10, d1 = 16, d2 = 12);\n    \n    // Small roots\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([6, 0, -8])\n        rotate([30, 0, 0])\n        cylinder(h = 15, d = 3);\n    }\n}\n\n// Leaf veins for detail\nmodule leaf_veins() {\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([0, 0, 2])\n        difference() {\n            cylinder(h = 4, d = 1.5);\n            translate([0, 0, -1])\n            cylinder(h = 6, d = 0.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main cabbage\n    translate([0, 0, 25])\n    cabbage_head();\n    \n    // Outer leaves\n    translate([0, 0, 25])\n    outer_leaves();\n    \n    // Stem\n    translate([0, 0, 0])\n    stem();\n}\n\n// Base plate for printing stability\ndifference() {\n    cylinder(h = 2, d = 90);\n    cylinder(h = 3, d = 86);\n}",
    "renders": true
  },
  {
    "plant": "sabal",
    "openscad_code": "// Sabal Palm Plant - Realistic Medium Complexity\n// Designed for 3D printing with 2mm wall thickness and no overhangs\n\nmodule leaf_segment(length, width, angle, twist) {\n    // Individual leaf segment with realistic taper\n    translate([0, 0, 0])\n    rotate([0, twist, angle])\n    linear_extrude(height = 2, center = true)\n    polygon(points = [\n        [0, 0],\n        [length * 0.1, -width/2],\n        [length * 0.9, -width/0.8],\n        [length, 0],\n        [length * 0.9, width/0.8],\n        [length * 0.1, width/2]\n    ]);\n}\n\nmodule frond(count, base_radius) {\n    // Single palm frond with 20-30 leaf segments\n    union() {\n        // Central stem/rachis\n        color(\"darkgreen\")\n        cylinder(h = 80, r1 = 2.5, r2 = 1.5, $fn = 8);\n        \n        // Leaf segments arrayed along rachis\n        for(i = [0:count-1]) {\n            translate([0, 0, i * 3])\n            leaf_segment(\n                25 + sin(i * 15) * 10,  // Varying length\n                8 - i * 0.2,            // Tapering width\n                i * 30,                 // Fan angle\n                -20 + i * 2             // Twist angle\n            );\n        }\n    }\n}\n\nmodule trunk_segment(height, radius, taper) {\n    // Trunk cylinder with characteristic fiber texture\n    difference() {\n        // Main trunk volume\n        cylinder(h = height, r1 = radius, r2 = radius * taper, $fn = 16);\n        \n        // Fiber grooves (subtractive)\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30])\n            translate([radius * 0.8, -2, -2])\n            cube([radius * 0.4, 4, height + 4]);\n        }\n    }\n}\n\nmodule trunk(total_height) {\n    // Multi-segment trunk for realistic taper\n    union() {\n        // Base - widest part\n        trunk_segment(total_height * 0.3, 8, 0.9);\n        \n        // Middle segment\n        translate([0, 0, total_height * 0.3])\n        trunk_segment(total_height * 0.3, 7.2, 0.85);\n        \n        // Top segment - narrowest\n        translate([0, 0, total_height * 0.6])\n        trunk_segment(total_height * 0.4, 6.1, 0.75);\n    }\n}\n\nmodule root_base() {\n    // Stabilizing root system base\n    difference() {\n        // Main root bulb\n        sphere(12, $fn = 16);\n        \n        // Root indentations\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([8, 0, -6])\n            rotate([0, 30, 0])\n            cylinder(h = 15, r1 = 2, r2 = 4, $fn = 8);\n        }\n    }\n}\n\nmodule sabal_palm() {\n    // Complete sabal palm assembly\n    union() {\n        // Root system at base\n        color(\"brown\")\n        root_base();\n        \n        // Main trunk\n        color(\"brown\")\n        translate([0, 0, 10])\n        trunk(60);\n        \n        // Crown of fronds\n        translate([0, 0, 70])\n        union() {\n            // 8 main fronds in crown\n            for(i = [0:7]) {\n                rotate([0, 0, i * 45])\n                translate([0, 12, 0])\n                rotate([-20 - i * 3, 0, 0])\n                frond(25, 15);\n            }\n            \n            // 4 smaller inner fronds\n            for(j = [0:3]) {\n                rotate([0, 0, j * 90 + 22.5])\n                translate([0, 8, 5])\n                rotate([-35, 0, 0])\n                frond(20, 10);\n            }\n        }\n        \n        // Crownshaft - smooth green cylinder\n        color(\"darkgreen\")\n        translate([0, 0, 65])\n        cylinder(h = 8, r = 6.5, $fn = 16);\n    }\n}\n\n// Main model\nsabal_palm();",
    "renders": true
  },
  {
    "plant": "rattan",
    "openscad_code": "// Realistic Rattan Plant in Pot (Medium Complexity)\n// Main dimensions (mm)\nstem_height = 80;\nstem_diameter = 4;\npot_height = 25;\npot_outer_radius = 30;\npot_inner_radius = 27;\nwall_thickness = 2;\n\n// Generate complete plant\nmodule rattan_plant() {\n    union() {\n        // Pot\n        difference() {\n            // Outer pot\n            cylinder(h=pot_height, r=pot_outer_radius, $fn=64);\n            // Inner hollow\n            translate([0, 0, wall_thickness])\n                cylinder(h=pot_height, r=pot_inner_radius, $fn=64);\n            // Bottom hole for drainage\n            translate([0, 0, -1])\n                cylinder(h=wall_thickness+2, r=5, $fn=32);\n        }\n        \n        // Soil surface\n        translate([0, 0, pot_height - wall_thickness])\n            cylinder(h=wall_thickness, r=pot_inner_radius - 1, $fn=64);\n        \n        // Main stem\n        translate([0, 0, pot_height - wall_thickness])\n            cylinder(h=stem_height, r=stem_diameter, $fn=16);\n        \n        // Generate fronds\n        for (i = [0:45:360]) {\n            rotate([0, 0, i])\n                translate([0, 0, stem_height * 0.3])\n                    frond_group();\n        }\n        \n        // Additional fronds higher up\n        for (i = [22:45:360]) {\n            rotate([0, 0, i])\n                translate([0, 0, stem_height * 0.6])\n                    scale([0.8, 0.8, 0.8])\n                        frond_group();\n        }\n    }\n}\n\n// Single frond structure\nmodule frond_group() {\n    union() {\n        // Main frond stem\n        rotate([45, 0, 0])\n            cylinder(h=35, r=1.5, $fn=8);\n        \n        // Leaflets along frond\n        for (j = [0:20:35]) {\n            rotate([45, 0, 0])\n                translate([0, 0, j])\n                    leaf_pair();\n        }\n    }\n}\n\n// Pair of leaflets\nmodule leaf_pair() {\n    // Right leaflet\n    translate([2, 0, 0])\n        rotate([0, 30, 0])\n            scale([8, 1, 0.5])\n                sphere(r=2, $fn=16);\n    \n    // Left leaflet\n    translate([-2, 0, 0])\n        rotate([0, -30, 0])\n            scale([8, 1, 0.5])\n                sphere(r=2, $fn=16);\n}\n\n// Render the complete plant\nrattan_plant();",
    "renders": true
  },
  {
    "plant": "sugar",
    "openscad_code": "// Sugar plant - realistic style with medium complexity\n// A 1:10 scale model of a sugar beet processing plant\n// Overall size: 100mm x 80mm x 70mm\n\n$fn = 32;\n\n// Main building\nmodule mainBuilding() {\n    // Base foundation\n    translate([0, 0, 0])\n        cube([60, 40, 5], center = true);\n    \n    // Main structure\n    translate([0, 0, 17.5])\n        cube([55, 35, 30], center = true);\n    \n    // Roof with slight angle\n    translate([0, 0, 35])\n        rotate([10, 0, 0])\n            cube([57, 37, 8], center = true);\n    \n    // Chimney\n    translate([25, 0, 45])\n        cylinder(h = 25, r = 4, center = true);\n    \n    // Ventilation pipes on roof\n    for (i = [-20:20:20]) {\n        translate([i, 15, 40])\n            cylinder(h = 8, r = 2, center = true);\n    }\n}\n\n// Storage silos\nmodule silos() {\n    for (i = [-30:15:30]) {\n        // Silo body\n        translate([i, -25, 25])\n            cylinder(h = 50, r = 10, center = true);\n        \n        // Silo top cone\n        translate([i, -25, 50])\n            cylinder(h1 = 10, h2 = 0, r1 = 10, r2 = 5, center = true);\n        \n        // Support legs\n        for (j = [0:90:270]) {\n            rotate([0, 0, j])\n                translate([i + 7, -25, 12.5])\n                    cylinder(h = 25, r = 1.5, center = true);\n        }\n    }\n}\n\n// Conveyor system\nmodule conveyor() {\n    // Main conveyor belt\n    translate([0, 0, 25])\n        rotate([0, 15, 0])\n            cube([80, 4, 2], center = true);\n    \n    // Support towers\n    for (i = [-30:15:30]) {\n        // Tower\n        translate([i, 0, 12.5])\n            cube([3, 3, 25], center = true);\n        \n        // Cross beams\n        translate([i, 0, 20])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r = 1, center = true);\n    }\n}\n\n// Processing towers\nmodule processingTowers() {\n    // Primary tower\n    translate([-30, 15, 30])\n        cylinder(h = 60, r = 8, center = true);\n    \n    // Secondary tower\n    translate([-15, 20, 25])\n        cylinder(h = 50, r = 6, center = true);\n    \n    // Connecting pipes\n    translate([-22.5, 17.5, 35])\n        rotate([0, 0, 30])\n            cylinder(h = 18, r = 1.5, center = true);\n}\n\n// Access platforms and stairs\nmodule platforms() {\n    // Main platform\n    translate([0, 10, 20])\n        cube([40, 8, 1], center = true);\n    \n    // Support posts\n    for (i = [-15:10:15]) {\n        translate([i, 10, 10])\n            cylinder(h = 20, r = 1, center = true);\n    }\n    \n    // Stairs\n    translate([20, 10, 10])\n        for (i = [0:2:10]) {\n            translate([i, 0, i])\n                cube([2, 8, 1], center = true);\n        }\n}\n\n// Piping network\nmodule piping() {\n    // Horizontal pipes\n    for (z = [15:10:45]) {\n        translate([0, 0, z])\n            cylinder(h = 100, r = 1, center = true);\n    }\n    \n    // Vertical connections\n    for (x = [-40:10:40]) {\n        translate([x, 0, 30])\n            cylinder(h = 30, r = 0.8, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    mainBuilding();\n    silos();\n    conveyor();\n    processingTowers();\n    platforms();\n    piping();\n}",
    "renders": true
  },
  {
    "plant": "banana",
    "openscad_code": "// Banana plant with medium complexity and realistic style\n// Overall height: 120mm, printable as single object\n\n$fn = 36;  // Smooth curves for realistic appearance\n\nmodule banana_fruit(angle, length, thickness, curvature) {\n    // Main banana body\n    translate([0, 0, 0])\n    rotate([0, angle, 0])\n    rotate_extrude(angle = curvature)\n    translate([length/2, 0, 0])\n    scale([1, 0.9])\n    circle(d = thickness);\n    \n    // Banana tip\n    translate([length * sin(curvature), 0, length * cos(curvature)])\n    rotate([0, angle, 0])\n    sphere(d = thickness * 0.7);\n    \n    // Stem connection\n    translate([0, 0, 0])\n    rotate([0, angle, 0])\n    cylinder(h = thickness * 0.3, d = thickness * 0.8);\n}\n\nmodule leaf_segment(width, length, curve) {\n    // Single leaf segment with natural curve\n    linear_extrude(height = 2, center = true, convexity = 10)\n    polygon(points = [\n        [0, 0],\n        [width/2, length * 0.3],\n        [width * 0.8, length * 0.7],\n        [width/2, length],\n        [-width * 0.8, length * 0.7],\n        [-width/2, length * 0.3]\n    ]);\n    \n    // Vein detail\n    translate([0, 0, 1.1])\n    color(\"darkgreen\")\n    linear_extrude(height = 0.5, center = true)\n    polygon(points = [\n        [0, 0],\n        [1, length * 0.3],\n        [2, length * 0.7],\n        [1, length],\n        [-2, length * 0.7],\n        [-1, length * 0.3]\n    ]);\n}\n\nmodule leaf(base_angle, length, width, segments) {\n    // Assemble leaf from segments with natural droop\n    for (i = [0:segments-1]) {\n        rotate([base_angle + i * 10, 0, 0])\n        translate([0, i * 15, -i * 5])\n        rotate([0, 0, -i * 15])\n        leaf_segment(width - i * 3, length - i * 10, 10);\n    }\n}\n\nmodule pseudostem(height, diameter) {\n    // Main trunk structure with leaf sheath layers\n    for (i = [0:height/20]) {\n        color(\"darkgreen\")\n        translate([0, 0, i * 20])\n        cylinder(h = 22, d1 = diameter - i * 2, d2 = diameter - (i+1) * 2);\n    }\n    \n    // Base flare for stability\n    translate([0, 0, -5])\n    cylinder(h = 10, d1 = diameter * 1.5, d2 = diameter);\n}\n\n// Main banana plant assembly\nunion() {\n    // Pseudostem (main trunk)\n    pseudostem(100, 20);\n    \n    // Large leaves\n    leaf(30, 80, 40, 5);\n    leaf(60, 75, 38, 5);\n    leaf(-30, 85, 42, 5);\n    leaf(-60, 70, 35, 5);\n    \n    // Flower/bunch support\n    translate([0, 0, 100])\n    rotate([0, 0, 45])\n    cylinder(h = 30, d = 8);\n    \n    // Banana bunch\n    translate([0, 0, 130])\n    rotate([0, 0, 45])\n    union() {\n        // Main support stem\n        cylinder(h = 40, d = 5);\n        \n        // Individual bananas\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([15, 0, 20])\n            banana_fruit(-30, 35, 12, 60);\n        }\n        \n        // Additional row\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60 + 30])\n            translate([12, 0, 0])\n            banana_fruit(-25, 30, 10, 55);\n        }\n    }\n    \n    // Root flare for printing stability\n    translate([0, 0, -10])\n    cylinder(h = 5, d = 30);\n}",
    "renders": true
  },
  {
    "plant": "plantain",
    "openscad_code": "// Plantain Plant - Realistic Style, Medium Complexity\n// Height: ~120mm, 3D printable with 2mm walls\n\n// Parameters\nstem_d = 8;\nstem_h = 100;\nleaf_w = 18;\nleaf_l = 80;\nleaf_t = 2;\nfruit_d = 12;\nfruit_l = 25;\nnum_leaves = 6;\nnum_fruits = 8;\n\n// Main stem module\nmodule stem() {\n    // Main trunk\n    cylinder(d=stem_d, h=stem_h, $fn=16);\n    \n    // Reinforcement rings every 20mm\n    for(i=[1:5]) {\n        translate([0, 0, i*20])\n            cylinder(d=stem_d+4, h=3, $fn=16);\n    }\n}\n\n// Individual leaf module\nmodule leaf(angle, height) {\n    translate([0, 0, height])\n    rotate([0, 0, angle]) {\n        // Central vein (2mm thick for printing)\n        translate([leaf_w/2-1, 0, 0])\n            cube([2, leaf_l, leaf_t]);\n        \n        // Left side of leaf\n        hull() {\n            translate([0, 0, leaf_t/2])\n                sphere(d=leaf_t*2);\n            translate([leaf_w/2-1, leaf_l-5, leaf_t/2])\n                sphere(d=leaf_t*2);\n            translate([1, leaf_l-2, leaf_t/2])\n                sphere(d=leaf_t*2);\n        }\n        \n        // Right side of leaf\n        hull() {\n            translate([leaf_w, 0, leaf_t/2])\n                sphere(d=leaf_t*2);\n            translate([leaf_w/2+1, leaf_l-5, leaf_t/2])\n                sphere(d=leaf_t*2);\n            translate([leaf_w-1, leaf_l-2, leaf_t/2])\n                sphere(d=leaf_t*2);\n        }\n        \n        // Leaf joints\n        translate([leaf_w/2, 0, -leaf_t])\n            cylinder(d=4, h=leaf_t*2, $fn=8);\n    }\n}\n\n// Fruit bunch module\nmodule fruit_bunch() {\n    // Stem for fruits\n    translate([0, -15, stem_h-20])\n    rotate([90, 0, 0])\n        cylinder(d=5, h=30, $fn=8);\n    \n    // Individual fruits arranged in spiral\n    for(i=[0:num_fruits-1]) {\n        rotate([0, 0, i*45])\n        translate([8, -15, stem_h-20-i*3])\n        rotate([90, 0, 0])\n            scale([1, 1, 1.2])\n                cylinder(d1=fruit_d, d2=fruit_d*0.8, h=fruit_l, $fn=12);\n    }\n    \n    // Purple flower remnant at top\n    translate([0, -15, stem_h-20])\n    rotate([90, 0, 0])\n        cylinder(d=10, h=5, $fn=16);\n}\n\n// Root system base\nmodule roots() {\n    difference() {\n        // Base cone for stability\n        cylinder(d1=20, d2=stem_d, h=10, $fn=16);\n        \n        // Root details\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n            translate([5, 0, 5])\n                cube([15, 3, 5]);\n        }\n    }\n}\n\n// Assemble plant\nunion() {\n    // Base with roots\n    roots();\n    \n    // Main stem\n    translate([0, 0, 10])\n        stem();\n    \n    // Leaves arranged in spiral\n    for(i=[0:num_leaves-1]) {\n        angle = i*(360/num_leaves) + (i%2)*30;\n        height = 20 + i*15;\n        leaf(angle, height);\n    }\n    \n    // Fruit bunch\n    fruit_bunch();\n}",
    "renders": true
  },
  {
    "plant": "papaya",
    "openscad_code": "// Realistic Papaya Plant - Medium Complexity\n// Includes trunk, palm fronds, and papaya fruits\n// 3D printable with ~2mm wall thickness\n\n$fn = 32;\n\n// Main module\nmodule papaya_plant() {\n    union() {\n        // Base trunk\n        trunk();\n        \n        // Palm fronds (leaves)\n        palm_fronds();\n        \n        // Papaya fruits\n        papaya_fruits();\n    }\n}\n\n// Trunk module\nmodule trunk() {\n    // Main trunk - tapered cylinder\n    difference() {\n        cylinder(h1 = 80, h2 = 70, r1 = 8, r2 = 6, $fn = 16);\n        \n        // Hollow center for 3D printing\n        translate([0, 0, 2])\n            cylinder(h = 78, r = 4, $fn = 16);\n    }\n    \n    // Trunk rings for texture\n    for(i = [1:6:60]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(h = 2, r = 7.5 - i*0.025, $fn = 16);\n                cylinder(h = 2.1, r = 6 - i*0.025, $fn = 16);\n            }\n    }\n}\n\n// Palm fronds module\nmodule palm_fronds() {\n    // Create 7 fronds in spiral pattern\n    for(i = [0:6]) {\n        rotate([0, 0, i * 51.4])  // 360/7 degrees\n        translate([0, 0, 75])\n            rotate([30 + i*5, 0, 0])\n                palm_leaf();\n    }\n}\n\n// Individual palm leaf\nmodule palm_leaf() {\n    // Leaf stem\n    translate([0, 0, -5])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 40, r = 1.5, $fn = 8);\n                cylinder(h = 40, r = 0.5, $fn = 8);\n            }\n    \n    // Leaf blade - simplified as thin ellipsoid\n    translate([20, 0, 0])\n        rotate([0, 0, -30])\n            scale([1, 0.3, 0.1])\n                sphere(r = 25);\n    \n    // Leaf segments\n    for(j = [0:4]) {\n        translate([15 + j*5, 0, 0])\n            rotate([0, 0, (j % 2 == 0) ? 15 : -15])\n                scale([0.7, 0.2, 0.05])\n                    sphere(r = 15 - j*2);\n    }\n}\n\n// Papaya fruits module\nmodule papaya_fruits() {\n    // Position fruits along trunk\n    papaya_fruit(0, 45, 0);      // Lower fruit\n    papaya_fruit(20, 55, 30);    // Middle fruit\n    papaya_fruit(-15, 60, -20);  // Upper fruit\n}\n\n// Individual papaya fruit\nmodule papaya_fruit(x_pos, z_pos, angle) {\n    translate([x_pos, 0, z_pos])\n        rotate([0, 0, angle])\n            rotate([90, 0, 0])\n                difference() {\n                    // Main fruit body - ellipsoid\n                    scale([1, 1, 1.8])\n                        sphere(r = 8);\n                    \n                    // Hollow for printing\n                    scale([0.9, 0.9, 1.7])\n                        sphere(r = 7.5);\n                    \n                    // Stem attachment\n                    translate([0, 0, 12])\n                        cylinder(h = 3, r = 2, $fn = 8);\n                }\n}\n\n// Create the plant\npapaya_plant();",
    "renders": true
  },
  {
    "plant": "avocado",
    "openscad_code": "// Avocado Plant - Realistic Style, Medium Complexity\n// Overall height: 100mm, suitable for 3D printing\n\n// Main parameters\npit_radius = 15;\npit_height = 25;\nflesh_thickness = 8;\nskin_thickness = 3;\nstem_diameter = 3;\nstem_height = 40;\nleaf_length = 35;\nleaf_width = 15;\nleaf_thickness = 2;\n\n// Main avocado fruit\nmodule avocado_fruit() {\n    // Outer skin (dark green)\n    color(\"darkgreen\")\n    difference() {\n        // Main body - scaled sphere for avocado shape\n        scale([1, 1.2, 1.3])\n        sphere(r=pit_radius + flesh_thickness + skin_thickness, $fn=50);\n        \n        // Bottom flat cut for stability\n        translate([0, 0, -(pit_radius + flesh_thickness + skin_thickness)])\n        cube([pit_radius*3, pit_radius*3, pit_radius*2], center=true);\n    }\n    \n    // Inner flesh (light green)\n    color(\"lightgreen\")\n    difference() {\n        scale([1, 1.2, 1.3])\n        sphere(r=pit_radius + flesh_thickness, $fn=50);\n        \n        // Hollow for pit\n        scale([0.9, 0.9, 0.9])\n        translate([0, 0, 5])\n        sphere(r=pit_radius + 2, $fn=50);\n        \n        // Bottom flat cut\n        translate([0, 0, -(pit_radius + flesh_thickness)])\n        cube([pit_radius*2.5, pit_radius*2.5, pit_radius*2], center=true);\n    }\n    \n    // Seed/pit (brown)\n    color(\"saddlebrown\")\n    translate([0, 0, 5])\n    scale([0.9, 0.9, 1.1])\n    sphere(r=pit_radius, $fn=30);\n}\n\n// Stem\nmodule stem() {\n    color(\"forestgreen\")\n    cylinder(h=stem_height, d=stem_diameter, $fn=12);\n}\n\n// Leaf module\nmodule leaf() {\n    color(\"forestgreen\")\n    difference() {\n        // Main leaf shape\n        scale([1, 0.3, 0.1])\n        sphere(r=leaf_length/2, $fn=30);\n        \n        // Tapered end\n        translate([leaf_length/2 - 5, 0, 0])\n        scale([0.3, 1, 1])\n        sphere(r=leaf_length/4, $fn=20);\n    }\n    \n    // Leaf veins\n    for(i = [-2:1:2]) {\n        translate([i*3, 0, leaf_thickness/2 + 0.1])\n        scale([0.1, 1, 0.05])\n        cube([leaf_length*0.8, leaf_width/2, leaf_thickness]);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    avocado_fruit();\n\ntranslate([0, 0, pit_radius*1.3 + flesh_thickness + skin_thickness])\n    stem();\n\n// Leaves array\nfor(i = [0:30:330]) {\n    rotate([0, 0, i])\n    translate([stem_diameter/2 + 2, 0, stem_height - 5])\n    rotate([0, 90 + sin(i*2)*10, 0])\n    translate([leaf_length/2, 0, 0])\n    leaf();\n}\n\n// Additional smaller leaves\nfor(i = [15:30:315]) {\n    rotate([0, 0, i])\n    translate([stem_diameter/2 + 1, 0, stem_height - 15])\n    rotate([0, 70 + cos(i*3)*15, 0])\n    scale([0.7, 0.7, 0.7])\n    translate([leaf_length/2, 0, 0])\n    leaf();\n}",
    "renders": true
  },
  {
    "plant": "mango",
    "openscad_code": "// Mango Plant - Realistic style, medium complexity\n// Approx 90mm tall, 3D printable with 2mm walls\n\n$fn = 36;\n\n// Main module\nmodule mango_plant() {\n    // Pot base\n    difference() {\n        cylinder(h = 25, r = 30, center = false);\n        translate([0, 0, 2]) \n            cylinder(h = 23, r = 28, center = false);\n    }\n    \n    // Soil surface\n    translate([0, 0, 23]) \n        color(\"brown\") \n            cylinder(h = 2, r = 28.5, center = false);\n    \n    // Main trunk\n    translate([0, 0, 25]) \n        cylinder(h = 40, r1 = 4, r2 = 2.5, center = false);\n    \n    // Branches\n    translate([0, 0, 40]) {\n        // Branch 1\n        rotate([20, 0, 25]) \n            cylinder(h = 25, r1 = 2.5, r2 = 1.5, center = false);\n        \n        // Branch 2\n        rotate([-25, 10, -30]) \n            cylinder(h = 22, r1 = 2.5, r2 = 1.5, center = false);\n        \n        // Branch 3\n        rotate([10, -15, 60]) \n            cylinder(h = 20, r1 = 2.5, r2 = 1.5, center = false);\n    }\n    \n    // Leaves on branches\n    module leaf(pos, rot, scale) {\n        translate(pos) {\n            rotate(rot) {\n                scale([scale, scale, scale]) {\n                    // Leaf blade\n                    rotate([0, 90, 0]) \n                        linear_extrude(height = 0.8) \n                            polygon(points = [\n                                [0, 0], [3, 8], [0, 16], [-3, 8]\n                            ]);\n                    \n                    // Leaf stem\n                    translate([0, 0, 0.4]) \n                        rotate([90, 0, 0]) \n                            cylinder(h = 2, r = 0.3, center = false);\n                }\n            }\n        }\n    }\n    \n    // Leaves distribution\n    leaf([0, 0, 65], [20, 0, 25], 1.2);\n    leaf([8, 2, 60], [25, 15, 30], 1);\n    leaf([-7, -3, 55], [15, -10, 20], 0.9);\n    leaf([0, 0, 42], [-25, 10, -30], 1.1);\n    leaf([-6, 5, 38], [-20, 5, -25], 0.8);\n    leaf([4, -4, 35], [-30, 20, -35], 1);\n    leaf([0, 0, 45], [10, -15, 60], 1);\n    leaf([5, -3, 40], [15, -20, 55], 0.9);\n    leaf([-4, 4, 37], [5, -10, 65], 0.7);\n    \n    // Small mangoes\n    module mango(pos, rot) {\n        translate(pos) {\n            rotate(rot) {\n                scale([1, 0.8, 1.2]) \n                    sphere(r = 3);\n            }\n        }\n    }\n    \n    // Mangoes placement\n    mango([12, 5, 58], [0, 0, 45]);\n    mango([-10, -4, 52], [0, 10, -30]);\n    mango([6, -8, 48], [0, -15, 60]);\n    \n    // Drainage holes in pot\n    translate([0, 0, 0]) {\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([25, 0, 2]) \n                    cylinder(h = 3, r = 2, center = false);\n            }\n        }\n    }\n    \n    // Pot rim detail\n    translate([0, 0, 25]) {\n        difference() {\n            cylinder(h = 3, r = 31, center = false);\n            cylinder(h = 3, r = 29.5, center = false);\n        }\n    }\n}\n\n// Render the plant\nmango_plant();",
    "renders": true
  },
  {
    "plant": "breadfruit",
    "openscad_code": "// Breadfruit Plant - Realistic Style (Medium Complexity)\n// 3D printable model with proper wall thickness and no overhangs\n\n// Overall dimensions (mm)\nfruit_diameter = 60;\nstem_length = 80;\nleaf_length = 70;\nleaf_width = 40;\n\nmodule breadfruit() {\n    // Main fruit body - segmented sphere with surface texture\n    difference() {\n        sphere(d = fruit_diameter, $fn = 32);\n        \n        // Create segmented surface pattern\n        for (i = [0:15]) {\n            rotate([0, 0, i * 22.5]) {\n                translate([0, 0, -fruit_diameter/2]) {\n                    cube([fruit_diameter, 2, fruit_diameter], center = true);\n                }\n            }\n        }\n    }\n    \n    // Add small bumps for texture\n    for (a = [0:30:360]) {\n        for (b = [0:30:180]) {\n            rotate([0, b, a]) {\n                translate([0, 0, fruit_diameter/2 - 5]) {\n                    sphere(d = 3, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\nmodule stem() {\n    // Main stem with slight curve\n    translate([0, 0, -fruit_diameter/2]) {\n        rotate([5, 0, 0]) {\n            cylinder(h = stem_length, d1 = 8, d2 = 6, $fn = 16);\n        }\n    }\n    \n    // Branching secondary stems\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120]) {\n            translate([0, 0, -fruit_diameter/2 + 20]) {\n                rotate([30, 0, 0]) {\n                    cylinder(h = 40, d1 = 4, d2 = 2, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\nmodule leaf() {\n    // Leaf blade - elliptical shape\n    scale([1, leaf_width/leaf_length, 0.2]) {\n        sphere(d = leaf_length, $fn = 32);\n    }\n    \n    // Leaf veins\n    for (i = [-3:3]) {\n        if (i != 0) {\n            rotate([0, 0, i * 15]) {\n                translate([0, 0, 1]) {\n                    cube([leaf_length * 0.8, 1, 1], center = true);\n                }\n            }\n        }\n    }\n    \n    // Central vein\n    translate([0, 0, 1]) {\n        cube([leaf_length * 0.9, 2, 1], center = true);\n    }\n}\n\nmodule leaves_cluster() {\n    // Group of leaves around stem\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([0, 0, -fruit_diameter/2 + 30]) {\n                rotate([30 + i * 5, 0, 0]) {\n                    translate([0, leaf_length/2, 0]) {\n                        leaf();\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Base support for 3D printing\nmodule base() {\n    translate([0, 0, -fruit_diameter/2 - stem_length - 5]) {\n        cylinder(h = 5, d = 30, $fn = 32);\n    }\n}\n\n// Assemble the complete breadfruit plant\nunion() {\n    breadfruit();\n    stem();\n    leaves_cluster();\n    base();\n    \n    // Additional small fruits (immature)\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120 + 60]) {\n            translate([30, 0, -fruit_diameter/2 + 10]) {\n                scale([0.5, 0.5, 0.5]) {\n                    breadfruit();\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "plant": "soursop",
    "openscad_code": "// Soursop Plant - Realistic Medium Complexity\n// 3D printable soursop with stem, leaves, and fruit\n\n// Overall scale - 100mm tall plant\nscale_factor = 1;\n\n$fn = 36;  // Smooth curves\n\n// Main module\nmodule soursop_plant() {\n    // Stem/trunk\n    color(\"darkgreen\") \n    stem();\n    \n    // Main fruit\n    color(\"darkgreen\") \n    translate([0, 0, 80]) \n    rotate([0, 0, 15]) \n    soursop_fruit();\n    \n    // Large leaves\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 30]) \n        translate([25, 0, 60 - i * 8]) \n        rotate([20 - i * 5, 0, 0]) \n        leaf();\n    }\n    \n    // Smaller upper leaves\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120]) \n        translate([20, 0, 75]) \n        rotate([30, 0, 0]) \n        scale([0.7, 0.7, 0.7]) \n        leaf();\n    }\n}\n\n// Stem/trunk module\nmodule stem() {\n    // Main trunk\n    cylinder(h = 80, d1 = 8, d2 = 12, center = false);\n    \n    // Branching details\n    for(i = [1:3]) {\n        translate([0, 0, i * 20]) \n        rotate([0, 0, i * 45]) \n        cylinder(h = 15, d1 = 6, d2 = 4, center = false);\n    }\n}\n\n// Soursop fruit module\nmodule soursop_fruit() {\n    // Main body - irregular heart shape\n    scale([1, 1.2, 0.9]) \n    sphere(d = 35);\n    \n    // Spiky texture with small cones\n    for(i = [0:30]) {\n        rotate([0, 0, i * 12]) \n        translate([17, 0, 0]) \n        rotate([90, 0, 0]) \n        cylinder(h = 2, d1 = 1, d2 = 0.5, center = false);\n    }\n    \n    // Top connection to stem\n    translate([0, 0, 16]) \n    cylinder(h = 5, d = 4, center = false);\n}\n\n// Leaf module - soursop characteristic oval shape with pointed tip\nmodule leaf() {\n    // Main leaf blade\n    scale([1, 2.5, 0.2]) \n    sphere(d = 20);\n    \n    // Leaf tip extension\n    translate([0, 25, 0]) \n    scale([0.3, 0.8, 0.1]) \n    sphere(d = 10);\n    \n    // Leaf veins\n    for(i = [-3:3]) {\n        translate([i * 3, -15, 0]) \n        rotate([0, 0, i * 5]) \n        scale([0.2, 1.5, 0.1]) \n        cylinder(h = 30, d = 0.5, center = false);\n    }\n    \n    // Central vein\n    translate([0, 0, 0.5]) \n    scale([0.3, 2.2, 0.2]) \n    cylinder(h = 25, d = 0.8, center = false);\n    \n    // Petiole (leaf stem)\n    translate([0, -12, -1]) \n    cylinder(h = 8, d = 2, center = false);\n}\n\n// Generate the complete plant\nsoursop_plant();",
    "renders": true
  },
  {
    "plant": "rambutan",
    "openscad_code": "// Rambutan Plant - Realistic Style, Medium Complexity\n// Overall height ~120mm, suitable for 3D printing\n\n// Parameters\nfruit_radius = 12;\nfruit_height = 100;\nspine_length = 4;\nspine_base = 2;\nnum_spines = 60;\nleaf_length = 35;\nleaf_width = 8;\nstem_thickness = 4;\n\n// Main stem\nmodule stem() {\n    color(\"darkgreen\")\n    cylinder(h=fruit_height, r=stem_thickness, $fn=8);\n}\n\n// Single spine\nmodule spine() {\n    color(\"red\")\n    union() {\n        translate([0, 0, -spine_length/2])\n            cylinder(h=spine_length, r1=spine_base/2, r2=0, $fn=6);\n    }\n}\n\n// Rambutan fruit with spines\nmodule rambutan_fruit() {\n    color(\"red\")\n    union() {\n        // Main fruit body\n        sphere(r=fruit_radius, $fn=32);\n        \n        // Spines around the fruit\n        for (i = [0:num_spines-1]) {\n            angle1 = i * 360 / num_spines;\n            layer = i % 5;\n            height = fruit_radius - layer * 2;\n            radius_at_height = sqrt(fruit_radius*fruit_radius - height*height);\n            \n            translate([radius_at_height * cos(angle1), \n                      radius_at_height * sin(angle1), \n                      height])\n                rotate([90, 0, angle1])\n                    spine();\n        }\n    }\n}\n\n// Single leaf\nmodule leaf() {\n    color(\"green\")\n    difference() {\n        // Main leaf shape\n        scale([1, leaf_width/leaf_length, 0.3])\n            sphere(r=leaf_length, $fn=16);\n        \n        // Vein indentation\n        translate([0, 0, -leaf_width/4])\n            cube([leaf_length*2, 1, leaf_width/2], center=true);\n    }\n}\n\n// Leaf cluster\nmodule leaf_cluster() {\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([0, 15, 0])\n                rotate([20, 0, 0])\n                    leaf();\n    }\n}\n\n// Complete plant assembly\ntranslate([0, 0, 0])\n    stem();\n\ntranslate([0, 0, fruit_height])\n    rambutan_fruit();\n\n// Add leaves at top\ntranslate([0, 0, fruit_height + fruit_radius])\n    rotate([0, 0, 30])\n        leaf_cluster();\n\n// Additional fruit lower down\ntranslate([20, 0, fruit_height * 0.7])\n    scale([0.8, 0.8, 0.8])\n        rambutan_fruit();\n\ntranslate([-15, 10, fruit_height * 0.5])\n    scale([0.7, 0.7, 0.7])\n        rambutan_fruit();",
    "renders": true
  },
  {
    "plant": "lychee",
    "openscad_code": "// Lychee Plant - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness\n\n// Main parameters\nscale_factor = 0.8;\nfruit_radius = 8 * scale_factor;\nstem_height = 30 * scale_factor;\nleaf_length = 25 * scale_factor;\nleaf_width = 8 * scale_factor;\ntrunk_radius = 4 * scale_factor;\ntrunk_height = 60 * scale_factor;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Create a single lychee fruit with textured skin\nmodule lychee_fruit(r=fruit_radius) {\n    difference() {\n        // Main fruit body\n        sphere(r=r, $fn=32);\n        \n        // Hollow inside\n        sphere(r=r-wall, $fn=32);\n        \n        // Add texture bumps (lychee skin)\n        for(i=[0:15]) {\n            rotate([0, 0, i*24]) \n                translate([r-0.5, 0, r*0.7]) \n                    rotate([90, 0, 0])\n                        cylinder(h=1.5, r1=1.2, r2=0.8, $fn=6);\n        }\n        for(i=[0:12]) {\n            rotate([0, 0, i*30]) \n                translate([r-0.5, 0, r*0.3]) \n                    rotate([90, 0, 0])\n                        cylinder(h=1.5, r1=1.2, r2=0.8, $fn=6);\n        }\n    }\n}\n\n// Create leaf with proper vein structure\nmodule leaf(length=leaf_length, width=leaf_width) {\n    difference() {\n        // Main leaf blade\n        scale([1, 0.3, 1])\n            sphere(r=length/2, $fn=20);\n        \n        // Hollow inside\n        translate([0, 0, -0.5])\n            scale([1, 0.25, 0.8])\n                sphere(r=length/2-1, $fn=20);\n    }\n    \n    // Leaf stem\n    translate([-length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=5, r=1, $fn=8);\n}\n\n// Create branch with multiple fruits\nmodule fruit_cluster(count=4) {\n    for(i=[0:count-1]) {\n        rotate([0, 0, i*90]) \n            translate([0, 12*scale_factor, i*3*scale_factor]) {\n                // Small stem to fruit\n                rotate([90, 0, 0])\n                    cylinder(h=8*scale_factor, r=1*scale_factor, $fn=8);\n                translate([0, 0, 8*scale_factor])\n                    lychee_fruit(fruit_radius*0.9);\n            }\n    }\n}\n\n// Create main trunk\nmodule trunk(height=trunk_height, radius=trunk_radius) {\n    difference() {\n        // Main trunk\n        cylinder(h=height, r=radius, $fn=12);\n        \n        // Hollow inside\n        translate([0, 0, wall])\n            cylinder(h=height-wall*2, r=radius-wall, $fn=12);\n    }\n    \n    // Add some branch nodes\n    for(i=[1:3]) {\n        translate([0, 0, i*height/4])\n            rotate([0, 0, i*120])\n                difference() {\n                    cylinder(h=radius*1.5, r=radius*0.7, $fn=8);\n                    translate([0, 0, wall])\n                        cylinder(h=radius*1.5-wall*2, r=radius*0.7-wall, $fn=8);\n                }\n    }\n}\n\n// Create branch system\nmodule branch_system() {\n    union() {\n        // Main branch\n        trunk();\n        \n        // Upper branches with leaves\n        translate([0, 0, trunk_height-wall]) {\n            // Branch 1\n            rotate([30, 0, 45])\n                translate([0, 0, -10])\n                    trunk(trunk_height*0.5, trunk_radius*0.7);\n            \n            // Branch 2\n            rotate([25, 0, -60])\n                translate([0, 0, -10])\n                    trunk(trunk_height*0.4, trunk_radius*0.6);\n            \n            // Branch 3\n            rotate([20, 0, 180])\n                translate([0, 0, -10])\n                    trunk(trunk_height*0.45, trunk_radius*0.65);\n        }\n        \n        // Fruit clusters\n        translate([0, 0, trunk_height*0.7])\n            rotate([0, 0, 45])\n                fruit_cluster(3);\n        \n        translate([0, 0, trunk_height*0.8])\n            rotate([0, 0, -60])\n                fruit_cluster(2);\n        \n        // Leaves arrangement\n        translate([0, 0, trunk_height*0.9])\n            for(i=[0:5]) {\n                rotate([0, 0, i*60]) \n                    rotate([30-i*5, 0, 0])\n                        translate([0, 15*scale_factor, 0])\n                            leaf();\n            }\n    }\n}\n\n// Base platform for stability\nmodule base() {\n    difference() {\n        cylinder(h=5, r=20*scale_factor, $fn=32);\n        cylinder(h=5, r=18*scale_factor, $fn=32);\n    }\n}\n\n// Main assembly\nunion() {\n    base();\n    translate([0, 0, 5])\n        branch_system();\n}",
    "renders": true
  },
  {
    "plant": "longan",
    "openscad_code": "// Longan plant model for 3D printing\n// Features: trunk, branching structure, compound leaves, fruit clusters\n\n$fn = 32;\n\n// Overall dimensions (mm)\nplant_height = 120;\ntrunk_height = 40;\ncanopy_radius = 35;\n\n// Trunk module with slight taper\nmodule trunk() {\n    union() {\n        // Main trunk\n        cylinder(h = trunk_height, r1 = 6, r2 = 4, center = false);\n        \n        // Base flare for stability\n        translate([0, 0, -2])\n            cylinder(h = 4, r1 = 8, r2 = 6, center = false);\n    }\n}\n\n// Individual leaf with pinnate structure\nmodule leaf_pair(length = 25) {\n    for (i = [0:1]) {\n        rotate([0, 0, i * 180])\n            translate([0, 0, -length/2])\n                scale([0.3, 0.8, 1])\n                    rotate([0, 90, 0])\n                        cylinder(h = length, r = 1.2, center = true);\n    }\n}\n\n// Compound leaf with 4-6 leaflets\nmodule compound_leaf() {\n    union() {\n        // Main rachis (central stem)\n        rotate([0, 90, 0])\n            cylinder(h = 28, r = 1, center = true);\n        \n        // Leaflets along rachis\n        for (i = [1:6]) {\n            translate([i*4 - 14, 0, 0])\n                rotate([0, 0, (i%2)*10 - 5])\n                    leaf_pair(20 - i);\n        }\n    }\n}\n\n// Small branch with leaves\nmodule branch_with_leaves(level = 0) {\n    union() {\n        // Branch structure\n        color(\"saddlebrown\")\n            cylinder(h = 15 + level*5, r = 1.5 - level*0.3, center = false);\n        \n        // Leaves at branch end\n        translate([0, 0, 15 + level*5])\n            rotate([0, 0, 45])\n                color(\"forestgreen\")\n                    compound_leaf();\n    }\n}\n\n// Fruit cluster with individual longans\nmodule fruit_cluster() {\n    translate([0, 0, 5])\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([8, 0, 0])\n            for (j = [0:1]) {\n                translate([0, 0, j*4])\n                    scale([1, 1, 0.8])\n                        sphere(r = 3);\n            }\n    }\n}\n\n// Main canopy with branches\nmodule canopy() {\n    for (angle = [0:45:315]) {\n        rotate([0, 0, angle])\n            translate([0, 0, trunk_height])\n            for (i = [0:2]) {\n                rotate([30 + i*10, 0, 0])\n                    translate([0, 0, i*8])\n                        branch_with_leaves(i);\n            }\n    }\n    \n    // Top fruit clusters\n    for (angle = [30:60:330]) {\n        rotate([0, 0, angle])\n            translate([0, 0, trunk_height + 25])\n                rotate([20, 0, 0])\n                    translate([12, 0, 0])\n                        color(\"goldenrod\")\n                            fruit_cluster();\n    }\n}\n\n// Assemble the complete plant\nunion() {\n    // Trunk\n    color(\"saddlebrown\")\n        trunk();\n    \n    // Canopy with branches and leaves\n    canopy();\n    \n    // Root system base (for 3D printing stability)\n    translate([0, 0, -4])\n        cylinder(h = 2, r = 10, center = false);\n}",
    "renders": true
  },
  {
    "plant": "tamarind",
    "openscad_code": "// Tamarind Plant (Tamarindus indica) – medium-complexity, 3D-printable model\n// Total height ≈ 100 mm, trunk Ø ≈ 10 mm, pod length ≈ 40 mm\n// Wall thickness ≥ 2 mm, no steep overhangs\n\n$fn = 24;          // smooth curves, still printable\ntrunk_h = 70;      // main trunk height\ntrunk_r = 5;       // trunk radius\nwall_t = 2;        // minimum wall thickness for printing\n\nmodule trunk(h, r) {\n    // tapered cylinder for the main trunk\n    cylinder(h1 = h, r1 = r, r2 = r * 0.7, center = false);\n}\n\nmodule branch(len, angle, rot) {\n    // single branch with slight taper\n    translate([0, 0, trunk_h * 0.85])  // attach high on trunk\n    rotate([angle, 0, rot])\n    translate([0, 0, -len/2])          // center branch for union\n    cylinder(h = len, r1 = 2.5, r2 = 1.8, center = true);\n}\n\nmodule leaflet(l, w, t) {\n    // one pinnate leaflet\n    linear_extrude(height = t, center = true, scale = [0.9, 0.9])\n    hull() {\n        translate([l/2, 0, 0]) circle(d = w);\n        translate([-l/2, 0, 0]) circle(d = w);\n    }\n}\n\nmodule leaf_cluster(len, wid) {\n    // compound leaf with ~10 leaflets\n    color(\"forestgreen\")\n    for (i = [-4:1:4]) {\n        translate([i * 4, 0, 0])\n        rotate([0, 0, i * -6])\n        leaflet(10, 3, 0.6);\n    }\n    // central rachis\n    color(\"darkgreen\")\n    translate([0, 0, -0.3])\n    cube([len, 1, 1.2], center = true);\n}\n\nmodule tamarind_pod(len, thick) {\n    // curved pod using hull of spheres\n    color(\"saddlebrown\")\n    hull() {\n        for (a = [0:30:180]) {\n            translate([len * (cos(a) - 1)/2, 0, len * sin(a)/4])\n            sphere(d = thick);\n        }\n    }\n    // shallow groove along pod\n    difference() {\n        children();\n        translate([0, 0, -thick/2 - 0.1])\n        cube([len + 1, 1, thick + 0.2], center = true);\n    }\n}\n\nmodule roots() {\n    // buttress-like surface roots for stability\n    color(\"saddlebrown\")\n    for (rot = [0:90:270]) {\n        rotate([0, 0, rot])\n        translate([trunk_r + 2, 0, -trunk_h/2])\n        cube([15, 3, 6], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // base\n    difference() {\n        cylinder(h = wall_t, r1 = 18, r2 = 20, center = false);\n        cylinder(h = wall_t + 0.2, r1 = 14, r2 = 16, center = false);\n    }\n\n    // trunk\n    translate([0, 0, wall_t])\n    trunk(trunk_h, trunk_r);\n\n    // surface roots\n    translate([0, 0, wall_t])\n    roots();\n\n    // branches\n    for (ang = [30, 50, 70])\n        branch(25, ang, 0);\n    for (ang = [30, 50, 70])\n        branch(25, ang, 180);\n\n    // compound leaves\n    for (ang = [30, 50, 70])\n    translate([0, 0, trunk_h * 0.85])\n    rotate([ang, 0, 0])\n    translate([0, 0, 25])\n    rotate([90 - ang, 0, 0])\n    leaf_cluster(40, 4);\n\n    for (ang = [30, 50, 70])\n    translate([0, 0, trunk_h * 0.85])\n    rotate([ang, 0, 180])\n    translate([0, 0, 25])\n    rotate([90 - ang, 0, 0])\n    leaf_cluster(40, 4);\n\n    // pods\n    for (rot = [45:90:315]) {\n        translate([0, 0, trunk_h * 0.7])\n        rotate([20, 0, rot])\n        translate([0, 0, 15])\n        rotate([110, 0, 0])\n        tamarind_pod(40, 5);\n    }\n}",
    "renders": true
  },
  {
    "plant": "cacao",
    "openscad_code": "// Realistic Cacao Plant - Medium Complexity\n// 3D printable cacao tree with trunk, branches, leaves, and cacao pods\n\n// Overall dimensions\ntree_height = 120;\ntrunk_diameter = 12;\nbase_diameter = 20;\n\n// Modules\n\nmodule trunk() {\n    // Main trunk with slight taper\n    union() {\n        cylinder(h=tree_height, d1=trunk_diameter, d2=trunk_diameter*0.8, $fn=16);\n        \n        // Base flare for stability\n        translate([0, 0, -2])\n            cylinder(h=5, d1=base_diameter, d2=trunk_diameter, $fn=16);\n    }\n}\n\nmodule branch(length, angle, rotation) {\n    // Individual branch with taper\n    rotate([0, angle, rotation])\n        translate([0, 0, tree_height*0.7])\n            cylinder(h=length, d1=trunk_diameter*0.4, d2=trunk_diameter*0.2, $fn=8);\n}\n\nmodule leaf(length, width, angle, bend) {\n    // Elliptical leaf with central vein\n    rotate([0, angle, 0])\n        rotate([bend, 0, 0])\n            union() {\n                // Main leaf blade\n                scale([1, width/length, 0.2])\n                    sphere(d=length, $fn=20);\n                \n                // Central vein\n                translate([0, 0, -0.5])\n                    scale([1, 0.1, 0.1])\n                        sphere(d=length*0.9, $fn=8);\n            }\n}\n\nmodule cacao_pod(size, angle, rotation) {\n    // Cacao pod - elongated ribbed fruit\n    rotate([0, angle, rotation])\n        translate([0, 0, tree_height*0.4])\n            union() {\n                // Main pod body\n                scale([1, 0.7, 1.2])\n                    sphere(d=size, $fn=20);\n                \n                // Surface ridges\n                for(i = [0:30:150]) {\n                    rotate([0, 0, i])\n                        translate([size*0.4, 0, 0])\n                            scale([0.1, 0.1, 1.2])\n                                sphere(d=size, $fn=6);\n                }\n                \n                // Stem connection\n                translate([0, 0, size*0.6])\n                    cylinder(h=size*0.3, d1=size*0.2, d2=size*0.1, $fn=8);\n            }\n}\n\n// Main assembly\nunion() {\n    // Trunk\n    trunk();\n    \n    // Lower branches\n    branch(25, 30, 45);\n    branch(22, 25, 135);\n    branch(20, 35, 225);\n    branch(23, 28, 315);\n    \n    // Upper branches\n    branch(18, 15, 0);\n    branch(16, 20, 90);\n    branch(19, 18, 180);\n    branch(17, 22, 270);\n    \n    // Leaves on branches\n    // Lower branches\n    translate([0, 0, tree_height*0.7])\n    for(i = [0:3]) {\n        rotate([0, 25 + i*5, 45 + i*20])\n            translate([20 + i*3, 0, 0])\n                leaf(15, 8, 15, 5);\n    }\n    \n    for(i = [0:3]) {\n        rotate([0, 20 + i*5, 135 + i*20])\n            translate([18 + i*3, 0, 0])\n                leaf(14, 7, 12, 8);\n    }\n    \n    // Upper branches\n    translate([0, 0, tree_height*0.85])\n    for(i = [0:2]) {\n        rotate([0, 15 + i*3, 0 + i*30])\n            translate([15 + i*2, 0, 0])\n                leaf(12, 6, 10, 10);\n    }\n    \n    // Cacao pods\n    cacao_pod(8, -45, 60);\n    cacao_pod(7, -40, 120);\n    cacao_pod(9, -50, 240);\n    cacao_pod(6, -35, 300);\n    \n    // Additional leaves on trunk\n    for(i = [1:5]) {\n        rotate([0, 0, i*72])\n            translate([trunk_diameter*0.6, 0, tree_height*0.5 - i*10])\n                leaf(10, 5, 30, 15);\n    }\n}",
    "renders": true
  },
  {
    "plant": "coffee",
    "openscad_code": "// Realistic Coffee Plant - OpenSCAD\n// Medium complexity, 3D printable, ~100mm tall\n\n// Global parameters\npot_height = 35;\npot_top_dia = 45;\npot_bottom_dia = 35;\nsoil_height = 8;\ntrunk_height = 60;\ntrunk_dia = 6;\nleaf_length = 25;\nleaf_width = 12;\nleaf_thick = 2;\nbean_size = 4;\n\n// Main assembly\nmodule coffee_plant() {\n    union() {\n        // Pot\n        translate([0,0,0]) pot();\n        \n        // Soil surface\n        translate([0,0,pot_height - soil_height]) soil();\n        \n        // Trunk\n        translate([0,0,pot_height]) trunk();\n        \n        // Leaves - 4 tiers\n        for(i=[1:4]) {\n            rotate([0,0,i*90])\n                translate([0,0,pot_height + i*trunk_height/5])\n                    leaf_cluster();\n        }\n        \n        // Coffee cherries\n        for(i=[1:3]) {\n            rotate([0,0,i*120])\n                translate([0,0,pot_height + trunk_height*0.8])\n                    cherry_cluster();\n        }\n    }\n}\n\n// Flower pot with drainage hole\nmodule pot() {\n    difference() {\n        // Main pot shape\n        cylinder(h=pot_height, r1=pot_bottom_dia/2, r2=pot_top_dia/2, $fn=48);\n        \n        // Hollow inside\n        translate([0,0,2])\n            cylinder(h=pot_height-1, r1=pot_bottom_dia/2-3, r2=pot_top_dia/2-3, $fn=48);\n        \n        // Drainage hole\n        translate([0,0,pot_height-3])\n            cylinder(h=5, r=4, $fn=16);\n    }\n}\n\n// Soil surface with texture\nmodule soil() {\n    difference() {\n        cylinder(h=soil_height, r=pot_top_dia/2-3.5, $fn=32);\n        \n        // Random depressions for texture\n        for(i=[0:5]) {\n            rotate([0,0,i*60])\n                translate([pot_top_dia/2-10,0,soil_height-2])\n                    sphere(r=3);\n        }\n    }\n}\n\n// Main trunk with slight taper\nmodule trunk() {\n    cylinder(h=trunk_height, r1=trunk_dia/2, r2=trunk_dia/2.5, $fn=16);\n}\n\n// Single leaf\nmodule coffee_leaf() {\n    difference() {\n        // Main leaf shape\n        scale([1, leaf_width/leaf_length, 1])\n            cylinder(h=leaf_length, r1=leaf_width/4, r2=leaf_width/8, $fn=32);\n        \n        // Leaf tip\n        translate([0,0,leaf_length])\n            sphere(r=leaf_width/8);\n        \n        // Central vein\n        translate([0,-leaf_thick/2,leaf_length/2])\n            cube([leaf_thick*0.8, leaf_thick, leaf_length*0.9], center=true);\n    }\n}\n\n// Cluster of 2-3 leaves per node\nmodule leaf_cluster() {\n    for(i=[-30:30:30]) {\n        rotate([i,0,0]) {\n            translate([trunk_dia/2+leaf_width/2,0,0])\n                rotate([0,90,0])\n                    coffee_leaf();\n            mirror([1,0,0])\n                translate([trunk_dia/2+leaf_width/2,0,0])\n                    rotate([0,90,0])\n                        coffee_leaf();\n        }\n    }\n}\n\n// Coffee cherry (fruit)\nmodule cherry() {\n    union() {\n        // Main cherry body\n        sphere(r=bean_size/2);\n        \n        // Small stem\n        translate([0,0,bean_size/2])\n            cylinder(h=bean_size/2, r=bean_size/6, $fn=8);\n    }\n}\n\n// Cluster of cherries\nmodule cherry_cluster() {\n    translate([trunk_dia/2+leaf_width/3,0,0]) {\n        // Red ripe cherries\n        color(\"darkred\") {\n            cherry();\n            translate([bean_size,0,0])\n                cherry();\n            translate([0,bean_size,0])\n                cherry();\n        }\n    }\n}\n\n// Render the plant\ncoffee_plant();",
    "renders": true
  },
  {
    "plant": "cinchona",
    "openscad_code": "// Cinchona plant - medium complexity realistic model\n// Height: 120mm, printable without supports\n\n$fn = 24;\n\n// Main stem module\nmodule stem(h, r, angle) {\n    translate([0, 0, 0])\n    rotate([0, angle, 0])\n    cylinder(h = h, r1 = r, r2 = r * 0.8);\n}\n\n// Leaf module - elliptical with central vein\nmodule leaf(length, width) {\n    difference() {\n        scale([1, 0.6, 0.1])\n        sphere(r = length);\n        \n        // Central vein\n        translate([0, 0, -0.5])\n        scale([1, 0.05, 2])\n        sphere(r = length);\n    }\n}\n\n// Branch with leaves\nmodule branch(stem_r, stem_l, angle, leaves) {\n    rotate([0, angle, 0]) {\n        // Main branch\n        cylinder(h = stem_l, r1 = stem_r, r2 = stem_r * 0.7);\n        \n        // Leaves along branch\n        for(i = [1:leaves]) {\n            rotate([0, 0, i * 360/leaves]) {\n                translate([stem_r * 1.5, 0, stem_l * i/leaves])\n                rotate([90, 0, 0])\n                leaf(15 + i, 8);\n            }\n        }\n    }\n}\n\n// Flower cluster (cinchona has small white-pink flowers)\nmodule flower_cluster(pos) {\n    translate(pos) {\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([5, 0, 0])\n            scale([0.3, 0.3, 0.3])\n            sphere(r = 3);\n        }\n    }\n}\n\n// Main trunk\nunion() {\n    // Base trunk\n    cylinder(h = 40, r1 = 8, r2 = 6);\n    \n    // Upper trunk\n    translate([0, 0, 40])\n    cylinder(h = 30, r1 = 6, r2 = 4);\n    \n    // Lower branches\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n        branch(3, 25, 30, 4);\n    }\n    \n    // Middle branches\n    for(j = [0:3]) {\n        rotate([0, 0, j * 90 + 45])\n        translate([0, 0, 50])\n        branch(2, 20, 25, 3);\n    }\n    \n    // Top branches\n    for(k = [0:5]) {\n        rotate([0, 0, k * 72])\n        translate([0, 0, 70])\n        branch(1.5, 15, 20, 2);\n    }\n    \n    // Flowers at branch tips\n    flower_cluster([0, 0, 85]);\n    for(m = [0:5]) {\n        angle = m * 72;\n        rotate([0, 0, angle])\n        translate([0, 0, 70])\n        rotate([0, 20, 0])\n        translate([0, 0, 15])\n        flower_cluster([0, 0, 0]);\n    }\n    \n    // Ground base\n    translate([0, 0, -5]) {\n        cylinder(h = 5, r1 = 12, r2 = 10);\n    }\n}",
    "renders": true
  },
  {
    "plant": "camphor",
    "openscad_code": "// Camphor Plant - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n// Dimensions: ~80mm height, ~60mm width\n\n// Main parameters for easy scaling\nplant_height = 80;\ntrunk_height = 25;\ntrunk_radius = 8;\nbranch_count = 5;\nleaf_cluster_size = 6;\n\n// Module for creating a single leaf\nmodule leaf(length, width, thickness) {\n    // Elliptical leaf shape with central vein\n    translate([0, 0, thickness/2]) {\n        hull() {\n            scale([length/2, width/2, thickness]) sphere(1);\n            scale([length/2, width/4, thickness]) sphere(0.8);\n        }\n    }\n    \n    // Central vein detail\n    translate([0, 0, thickness]) {\n        color(\"darkgreen\")\n        scale([length, 0.3, 0.2]) sphere(1);\n    }\n}\n\n// Module for creating a leaf cluster\nmodule leaf_cluster(x_pos, y_pos, z_pos, angle) {\n    translate([x_pos, y_pos, z_pos]) {\n        rotate([0, 0, angle]) {\n            for (i = [0:45:315]) {\n                rotate([0, 30, i]) {\n                    translate([leaf_cluster_size*0.8, 0, 0]) {\n                        color(\"forestgreen\")\n                        leaf(leaf_cluster_size, leaf_cluster_size*0.6, 0.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Module for creating a branch with leaves\nmodule branch(start_z, angle, length) {\n    // Branch structure\n    translate([0, 0, start_z]) {\n        rotate([0, angle, 0]) {\n            // Main branch cylinder\n            color(\"saddlebrown\")\n            cylinder(h=length, r1=2, r2=1, $fn=8);\n            \n            // Secondary branches\n            for (i = [0:30:120]) {\n                rotate([0, 0, i]) {\n                    translate([0, 0, length*0.3]) {\n                        rotate([0, 20, 0]) {\n                            cylinder(h=length*0.7, r1=1.5, r2=0.8, $fn=6);\n                            \n                            // Leaf clusters on branch\n                            leaf_cluster(length*0.5, 0, length*0.7, 0);\n                        }\n                    }\n                }\n            }\n            \n            // Main leaf cluster at branch end\n            leaf_cluster(length*0.9, 0, length, 0);\n        }\n    }\n}\n\n// Main trunk with root flare\nmodule trunk() {\n    union() {\n        // Main trunk\n        color(\"saddlebrown\")\n        cylinder(h=trunk_height, r=trunk_radius, $fn=12);\n        \n        // Root flare at base\n        translate([0, 0, -2]) {\n            cylinder(h=4, r1=trunk_radius*1.3, r2=trunk_radius, $fn=12);\n        }\n        \n        // Surface detail rings\n        for (i = [5:5:trunk_height-5]) {\n            translate([0, 0, i]) {\n                color(\"saddlebrown\")\n                difference() {\n                    cylinder(h=0.5, r=trunk_radius+0.2, $fn=12);\n                    cylinder(h=0.5, r=trunk_radius-0.2, $fn=12);\n                }\n            }\n        }\n    }\n}\n\n// Main plant assembly\nmodule camphor_plant() {\n    union() {\n        // Base/trunk\n        trunk();\n        \n        // Main branches\n        for (i = [0:72:360]) {\n            rotate([0, 0, i]) {\n                branch(trunk_height-5, 30, 25);\n            }\n        }\n        \n        // Top canopy\n        translate([0, 0, trunk_height+20]) {\n            for (j = [0:60:359]) {\n                rotate([0, 0, j]) {\n                    leaf_cluster(0, 0, 0, 0);\n                }\n            }\n        }\n        \n        // Supporting base for 3D printing\n        translate([0, 0, -5]) {\n            color(\"darkgreen\")\n            cylinder(h=5, r=trunk_radius*1.5, $fn=16);\n        }\n    }\n}\n\n// Render the plant\ncamphor_plant();",
    "renders": true
  },
  {
    "plant": "sandal",
    "openscad_code": "// Sandal Plant - Realistic Medium Complexity\n// Overall size 120mm long, 50mm wide, 30mm tall\n\n// Parameters\n$fn = 32;\nsole_length = 120;\nsole_width = 50;\nsole_thickness = 8;\narch_height = 15;\nstrap_width = 8;\nstrap_thickness = 3;\nplant_height = 25;\nplant_diameter = 6;\n\nmodule sole_shape() {\n    difference() {\n        // Main sole\n        hull() {\n            translate([-sole_length/2, -sole_width/2, 0])\n                cube([sole_length*0.7, sole_width, sole_thickness]);\n            translate([sole_length/2 - 20, -sole_width/2 + 5, 0])\n                cube([40, sole_width - 10, sole_thickness]);\n        }\n        \n        // Arch cutout\n        translate([10, -sole_width/2 + 5, -1])\n            cube([sole_length*0.4, sole_width - 10, sole_thickness + 2]);\n        \n        // Heel curve\n        translate([-sole_length/2 + 10, 0, -1])\n            rotate([0, 90, 0])\n                cylinder(h=sole_width + 2, r=20, center=true);\n    }\n}\n\nmodule arch_support() {\n    translate([10, 0, sole_thickness]) {\n        hull() {\n            cube([sole_length*0.4, sole_width - 10, 1]);\n            translate([sole_length*0.2, 0, arch_height])\n                cube([sole_length*0.2, sole_width - 20, 1]);\n        }\n    }\n}\n\nmodule front_strap() {\n    translate([sole_length/2 - 30, 0, sole_thickness]) {\n        rotate([90, 0, 0])\n            cylinder(h=20, r=strap_width/2, center=true);\n        translate([0, 0, 10])\n            rotate([0, 90, 0])\n                cylinder(h=strap_width*2, r=strap_thickness, center=true);\n    }\n}\n\nmodule side_straps() {\n    // Left strap\n    translate([0, -sole_width/2 + 5, sole_thickness + 5]) {\n        rotate([0, -30, 0])\n            cube([40, strap_thickness, strap_width]);\n    }\n    \n    // Right strap\n    translate([0, sole_width/2 - 5, sole_thickness + 5]) {\n        rotate([0, 30, 0])\n            cube([40, strap_thickness, strap_width]);\n    }\n}\n\nmodule heel_strap() {\n    translate([-sole_length/2 + 15, 0, sole_thickness + 10]) {\n        rotate([0, 90, 0])\n            cylinder(h=sole_width - 10, r=strap_thickness, center=true);\n        // Support posts\n        translate([0, -sole_width/2 + 5, -5])\n            cylinder(h=10, r=strap_thickness);\n        translate([0, sole_width/2 - 5, -5])\n            cylinder(h=10, r=strap_thickness);\n    }\n}\n\nmodule plant_stem(x, y, height) {\n    translate([x, y, sole_thickness + arch_height]) {\n        // Main stem\n        cylinder(h=height, r=plant_diameter/2);\n        \n        // Leaves\n        for(i = [0:2]) {\n            rotate([0, 0, i*120])\n                translate([plant_diameter, 0, height*0.7])\n                    rotate([90, 0, 0])\n                        scale([1, 0.3, 1])\n                            cylinder(h=plant_height*0.4, r=plant_diameter*1.5);\n        }\n    }\n}\n\nmodule sandal_plant() {\n    union() {\n        // Sandal base\n        sole_shape();\n        arch_support();\n        \n        // Straps\n        front_strap();\n        side_straps();\n        heel_strap();\n        \n        // Plants growing from sandal\n        plant_stem(sole_length/2 - 20, 0, plant_height);\n        plant_stem(0, -sole_width/4, plant_height*0.8);\n        plant_stem(0, sole_width/4, plant_height*0.8);\n        plant_stem(-sole_length/4, 0, plant_height*0.9);\n    }\n}\n\n// Render the sandal plant\nsandal_plant();",
    "renders": true
  },
  {
    "plant": "myrtle",
    "openscad_code": "// Myrtle plant in realistic style, medium complexity\n// Overall height ~120mm, pot ~50mm square\n\nmodule pot() {\n    // Main pot with slight taper\n    translate([0, 0, 10])\n    difference() {\n        cylinder(h=25, r1=25, r2=20, $fn=32);\n        translate([0, 0, 2])\n        cylinder(h=23, r1=23, r2=18, $fn=32);\n    }\n    \n    // Pot rim\n    translate([0, 0, 35])\n    cylinder(h=3, r=26, $fn=32);\n    \n    // Drainage tray\n    translate([0, 0, 10])\n    cylinder(h=2, r=27, $fn=32);\n}\n\nmodule soil() {\n    // Soil surface inside pot\n    translate([0, 0, 37])\n    cylinder(h=5, r1=22, r2=20, $fn=32);\n}\n\nmodule stem(h, r, angle) {\n    // Main stem segment\n    rotate([0, angle, 0])\n    cylinder(h=h, r=r, $fn=12);\n}\n\nmodule leaf() {\n    // Elliptical leaf with central vein\n    scale([1, 0.6, 0.1])\n    sphere(r=8, $fn=16);\n    \n    // Central vein\n    translate([0, 0, 0.5])\n    scale([0.8, 0.1, 0.1])\n    sphere(r=8, $fn=16);\n}\n\nmodule branch(level, angle, length) {\n    if (level <= 3) {\n        // Main branch segment\n        stem(length, 2 - level*0.4, angle);\n        \n        // Position at top of this segment\n        translate([0, 0, length])\n        rotate([0, angle, 0])\n        translate([0, 0, 0])\n        \n        // Two sub-branches\n        for (i = [0:1]) {\n            rotate([0, 0, i*120 + (level*30)])\n            rotate([0, (i*20 - 10) + (level*5), 0])\n            branch(level+1, 15 + level*5, length*0.7);\n        }\n        \n        // Add leaves at this level\n        if (level >= 2) {\n            for (j = [0:2]) {\n                rotate([0, 0, j*120])\n                translate([0, 0, length*0.5])\n                translate([8, 0, 0])\n                rotate([0, 90, j*120])\n                leaf();\n                \n                translate([-8, 0, 0])\n                rotate([0, -90, j*120])\n                leaf();\n            }\n        }\n    }\n}\n\nmodule roots() {\n    // Visible roots emerging from soil\n    for (i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([15, 0, 37])\n        rotate([90, 25, 0])\n        cylinder(h=15, r1=2, r2=1, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    pot();\n    soil();\n    roots();\n    \n    // Main trunk\n    translate([0, 0, 42])\n    branch(1, 0, 30);\n}",
    "renders": true
  },
  {
    "plant": "ironbark",
    "openscad_code": "// Ironbark Plant – medium complexity, realistic style\n// Overall height ≈ 120 mm, suitable for FDM printing\n\n// Parameters\ntrunk_d = 12;           // trunk diameter\ntrunk_h = 55;           // trunk height\nwall_t  = 2;            // printable wall thickness\nleaf_base = 5;          // leaf stem base diameter\nleaf_len  = 18;         // leaf blade length\nleaf_wid  = 4;          // leaf blade width\nleaf_thk  = 1.2;        // leaf thickness\nbranches  = 5;          // number of primary branches\nleaves    = 4;          // leaves per branch\n\n// Utility: hollow cylinder (tube)\nmodule tube(h, r1, r2, t) {\n    difference() {\n        cylinder(h=h, r1=r1, r2=r2, $fn=32);\n        translate([0,0,-0.01])\n            cylinder(h=h+0.02, r1=r1-t, r2=r2-t, $fn=32);\n    }\n}\n\n// Utility: ironbark leaf with slight droop\nmodule ironbark_leaf(len, wid, thk) {\n    // midrib\n    translate([0,-len/2,0])\n        cube([wid*0.2, len, thk]);\n    // blade – two curved halves\n    difference() {\n        sphere(wid/2, $fn=24);\n        translate([0,0,wid/2])\n            cube([wid*2, wid*2, wid], center=true);\n        translate([0,0,-wid/2])\n            cube([wid*2, wid*2, wid], center=true);\n    }\n    scale([1, len/wid, thk/wid])\n        sphere(wid/2, $fn=24);\n}\n\n// Branch with leaves\nmodule branch(len, ang) {\n    // stem\n    rotate([0,ang,0])\n        tube(h=len, r1=leaf_base, r2=leaf_base*0.6, t=wall_t);\n    // leaves\n    for(i=[0:leaves-1]) {\n        rotate([0,ang, i*360/leaves])\n            translate([0,0,len*0.85])\n                rotate([0,-20, i*5])\n                    ironbark_leaf(leaf_len, leaf_wid, leaf_thk);\n    }\n}\n\n// Trunk with ironbark texture rings\nmodule trunk() {\n    tube(h=trunk_h, r1=trunk_d/2, r2=trunk_d/2*0.9, t=wall_t);\n    // bark rings\n    for(i=[1:3:trunk_h-5]) {\n        translate([0,0,i])\n            difference() {\n                cylinder(h=2, r1=trunk_d/2, r2=trunk_d/2, $fn=32);\n                cylinder(h=2.2, r1=trunk_d/2-wall_t-0.5, r2=trunk_d/2-wall_t-0.5, $fn=32);\n            }\n    }\n}\n\n// Root flare base for stability\nmodule root_flare() {\n    difference() {\n        cylinder(h=10, r1=trunk_d/2*1.4, r2=trunk_d/2, $fn=32);\n        cylinder(h=11, r1=trunk_d/2*1.4-wall_t, r2=trunk_d/2-wall_t, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // base\n    root_flare();\n    // trunk\n    trunk();\n    // branches\n    for(i=[0:branches-1]) {\n        rotate([0,0,i*360/branches])\n            translate([0,0,trunk_h*0.8])\n                branch(30, 25 + i*3);\n    }\n}",
    "renders": true
  },
  {
    "plant": "jarrah",
    "openscad_code": "// Realistic Jarrah plant (Eucalyptus marginata)\n// Medium complexity, 3D-printable model\n// Overall height: 100 mm, base diameter: 60 mm\n\nmodule trunk_segment(h, r, taper) {\n    cylinder(h = h, r1 = r, r2 = r * taper, $fn = 8);\n}\n\nmodule trunk() {\n    union() {\n        // Main trunk base\n        trunk_segment(30, 12, 0.7);\n        \n        // Upper trunk segments\n        translate([0, 0, 30])\n            trunk_segment(25, 12 * 0.7, 0.5);\n        \n        translate([0, 0, 55])\n            trunk_segment(20, 12 * 0.7 * 0.5, 0.4);\n    }\n}\n\nmodule branch(len, ang, rot, base_r) {\n    translate([0, 0, 10])\n    rotate([ang, 0, rot])\n    union() {\n        cylinder(h = len, r1 = base_r, r2 = base_r * 0.3, $fn = 6);\n        \n        // Sub-branches\n        if (len > 15) {\n            translate([0, 0, len * 0.6])\n            rotate([30, 0, 45])\n            cylinder(h = len * 0.5, r1 = base_r * 0.5, r2 = base_r * 0.2, $fn = 5);\n            \n            translate([0, 0, len * 0.6])\n            rotate([25, 0, -60])\n            cylinder(h = len * 0.4, r1 = base_r * 0.5, r2 = base_r * 0.15, $fn = 5);\n        }\n    }\n}\n\nmodule leaf_cluster(pos, scale) {\n    translate(pos)\n    scale([scale, scale, scale])\n    union() {\n        // Central leaf\n        rotate([0, 0, 0])\n            leaf();\n        \n        // Surrounding leaves at angles\n        for (i = [1:5]) {\n            rotate([0, 0, i * 72])\n            rotate([20 + i * 5, 0, 0])\n            leaf();\n        }\n    }\n}\n\nmodule leaf() {\n    // Jarrah leaf: lanceolate, 8-12 cm long, slightly curved\n    scale([1, 0.3, 0.05])\n    rotate([90, 0, 0])\n    difference() {\n        // Main leaf blade\n        scale([1, 0.6, 1])\n        sphere(r = 5, $fn = 12);\n        \n        // Remove back half\n        translate([0, 0, -3])\n        cube([20, 20, 6], center = true);\n        \n        // Taper tip\n        translate([4.5, 0, 0])\n        rotate([0, 0, 15])\n        cube([3, 10, 6], center = true);\n    }\n}\n\nmodule flower_bud(pos) {\n    translate(pos)\n    union() {\n        // Bud base\n        cylinder(h = 2, r = 1.5, $fn = 8);\n        \n        // Operculum (bud cap)\n        translate([0, 0, 2])\n        sphere(r = 1.2, $fn = 8);\n    }\n}\n\nmodule base() {\n    // Base for stability and print adhesion\n    difference() {\n        cylinder(h = 5, r = 30, $fn = 32);\n        \n        // Hollow center for material savings\n        cylinder(h = 5, r = 25, $fn = 32);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    base();\n    \n    // Trunk\n    translate([0, 0, 5])\n    trunk();\n    \n    // Main branches\n    translate([0, 0, 60])\n    union() {\n        branch(35, -30, 0, 3);\n        branch(30, -25, 120, 2.5);\n        branch(32, -35, 240, 2.8);\n    }\n    \n    // Secondary branches\n    translate([0, 0, 75])\n    union() {\n        branch(20, -20, 60, 1.5);\n        branch(18, -15, 180, 1.3);\n        branch(22, -25, 300, 1.6);\n    }\n    \n    // Leaf clusters on main branches\n    leaf_cluster([10, 0, 82], 1.2);\n    leaf_cluster([-8, 6, 85], 1.0);\n    leaf_cluster([5, -9, 80], 1.1);\n    leaf_cluster([-12, -5, 78], 0.9);\n    leaf_cluster([15, -8, 83], 1.0);\n    \n    // Leaf clusters on secondary branches\n    leaf_cluster([8, 5, 92], 0.8);\n    leaf_cluster([-6, 8, 88], 0.7);\n    leaf_cluster([3, -10, 90], 0.9);\n    \n    // Flower buds\n    flower_bud([12, 3, 85]);\n    flower_bud([-10, 7, 83]);\n    flower_bud([7, -11, 87]);\n}",
    "renders": true
  },
  {
    "plant": "karri",
    "openscad_code": "// Karri (Eucalyptus diversicolor) tree model\n// Height: 120 mm, designed for 3D printing\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule trunk(height, radius, taper) {\n    // Main trunk with slight taper\n    difference() {\n        cylinder(h = height, r1 = radius, r2 = radius * taper);\n        // Hollow core for printing\n        translate([0, 0, wall_thickness]) \n            cylinder(h = height - wall_thickness*2, r1 = radius - wall_thickness, r2 = radius*taper - wall_thickness);\n    }\n}\n\nmodule bark_texture(height, radius) {\n    // Add vertical grooves for bark texture\n    for(i = [0:10:height]) {\n        rotate([0, 0, i*37])\n            translate([radius - 0.5, 0, i])\n                cube([1, 0.5, 10], center = true);\n    }\n}\n\nmodule branch(length, radius, angle) {\n    // Branches at specific angles\n    rotate([0, 0, angle])\n        rotate([80, 0, 0])\n            trunk(length, radius, 0.6);\n}\n\nmodule leaf_cluster(pos_x, pos_y, pos_z, scale) {\n    // Karri leaves in clusters\n    translate([pos_x, pos_y, pos_z]) {\n        scale([scale, scale, scale]) {\n            // Central leaf stem\n            rotate([90, 0, 0])\n                cylinder(h = 8, r = 0.4);\n            \n            // Individual lanceolate leaves\n            for(i = [0:45:360]) {\n                rotate([0, 0, i]) \n                    rotate([75, 0, 0])\n                        scale([1, 0.3, 0.1])\n                            sphere(r = 6);\n            }\n        }\n    }\n}\n\n// Base trunk\ntranslate([0, 0, 0])\n    trunk(60, 8, 0.8);\n\n// Add bark texture to main trunk\ntranslate([0, 0, 30])\n    bark_texture(60, 8);\n\n// First level branches\nfor(i = [0:120:360]) {\n    rotate([0, 0, i])\n        translate([0, 6, 45])\n            branch(30, 3, 0.5);\n}\n\n// Second level branches\nfor(i = [60:120:300]) {\n    rotate([0, 0, i])\n        translate([0, 4, 65])\n            branch(20, 2, 0.4);\n}\n\n// Leaf clusters on branches\nfor(i = [0:120:360]) {\n    rotate([0, 0, i])\n        translate([0, 22, 65])\n            leaf_cluster(0, 0, 0, 0.8);\n}\n\nfor(i = [60:120:300]) {\n    rotate([0, 0, i])\n        translate([0, 16, 80])\n            leaf_cluster(0, 0, 0, 0.6);\n}\n\n// Top leaf cluster\ntranslate([0, 0, 85])\n    leaf_cluster(0, 0, 0, 1.2);\n\n// Root flare at base\ndifference() {\n    cylinder(h = 8, r1 = 10, r2 = 8);\n    cylinder(h = 8.1, r1 = 8, r2 = 6);\n}",
    "renders": true
  },
  {
    "plant": "marri",
    "openscad_code": "// Marri plant (Corymbia calophylla) in medium-realistic detail\n// Height ≈ 120 mm, printable without supports\n\n// Trunk base\nmodule trunk() {\n    difference() {\n        // Main trunk\n        cylinder(h=50, d1=12, d2=8, $fn=20);\n        // Bark texture grooves\n        for(i=[0:15:359])\n            rotate([0,0,i])\n            translate([4,0,0])\n            cube([2,1,52], center=true);\n    }\n}\n\n// Branch with gum nuts\nmodule branch(len=25, ang=20) {\n    rotate([ang,0,0])\n    union() {\n        // Branch cylinder\n        cylinder(h=len, d=4, $fn=8);\n        \n        // Gum nuts cluster at end\n        translate([0,0,len])\n        for(j=[0:45:359])\n            rotate([0,0,j])\n            translate([3,0,0])\n            scale([1,1,1.2])\n            sphere(d=3, $fn=8);\n    }\n}\n\n// Leaf cluster\nmodule leaves() {\n    for(i=[0:30:359]) {\n        rotate([0,0,i])\n        translate([0,0,5])\n        rotate([30,0,0])\n        scale([1,0.3,1])\n        ellipsoid(15, 5, 2);\n    }\n}\n\n// Helper module for leaf shape\nmodule ellipsoid(rx, ry, rz) {\n    scale([rx, ry, rz])\n    sphere(d=2, $fn=12);\n}\n\n// Main assembly\nunion() {\n    // Base trunk\n    trunk();\n    \n    // Lower branches\n    translate([0,0,45])\n    for(i=[0:120:359])\n        rotate([0,0,i])\n        translate([5,0,0])\n        branch(20, 25);\n    \n    // Middle branches\n    translate([0,0,35])\n    for(i=[60:120:359])\n        rotate([0,0,i])\n        translate([4,0,0])\n        branch(15, 35);\n    \n    // Top canopy\n    translate([0,0,48])\n    leaves();\n    \n    // Upper smaller branches\n    translate([0,0,50])\n    for(i=[0:90:359])\n        rotate([0,0,i])\n        translate([3,0,0])\n        branch(10, 40);\n}",
    "renders": true
  },
  {
    "plant": "rose",
    "openscad_code": "// Rose Plant for 3D Printing - Realistic Style, Medium Complexity\n// Overall height ~100 mm, pot diameter ~50 mm\n\n// Parameters\n$fn = 30;\nstem_height = 70;\nstem_diameter = 4;\npot_height = 30;\npot_diameter = 50;\nsoil_height = 10;\npetal_count = 12;\npetal_length = 15;\npetal_width = 10;\nbud_radius = 8;\n\n// Main assembly\nunion() {\n    // Pot\n    difference() {\n        // Outer pot\n        cylinder(h = pot_height, d = pot_diameter, center = false);\n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = pot_height, d = pot_diameter - 4, center = false);\n    }\n    \n    // Soil\n    translate([0, 0, 2])\n        cylinder(h = soil_height, d = pot_diameter - 4, center = false);\n    \n    // Stem\n    translate([0, 0, soil_height + 2])\n        cylinder(h = stem_height, d = stem_diameter, center = false);\n    \n    // Thorns\n    for (i = [1:5]) {\n        translate([\n            stem_diameter * cos(i * 60),\n            stem_diameter * sin(i * 60),\n            soil_height + 2 + i * 12\n        ])\n        rotate([90, 0, i * 60])\n            cylinder(h = 3, d1 = 2, d2 = 0.5, center = false);\n    }\n    \n    // Rose bud\n    translate([0, 0, stem_height + soil_height + 2])\n        sphere(r = bud_radius);\n    \n    // Petals\n    module petal(angle, z_rot) {\n        translate([0, 0, stem_height + soil_height + 2 + bud_radius / 2])\n        rotate([angle, 0, z_rot])\n        translate([bud_radius, 0, 0])\n        scale([1, 0.7, 0.3])\n            sphere(r = petal_length);\n    }\n    \n    // Generate petals in spiral\n    for (i = [0:petal_count - 1]) {\n        petal(\n            45 + i * 5,\n            i * (360 / petal_count)\n        );\n    }\n    \n    // Leaves\n    module leaf(height) {\n        translate([0, 0, height])\n        rotate([30, 0, 0])\n        scale([1, 2, 0.5])\n            sphere(r = 8);\n    }\n    \n    // Add leaves along stem\n    leaf(soil_height + 20);\n    rotate([0, 0, 120])\n        leaf(soil_height + 35);\n    rotate([0, 0, 240])\n        leaf(soil_height + 50);\n    \n    // Leaf veins\n    module vein(height, angle) {\n        translate([0, 0, height])\n        rotate([30, 0, angle])\n        translate([0, 0, 4])\n            cube([0.5, 12, 0.5], center = true);\n    }\n    \n    for (i = [-30:30:30]) {\n        vein(soil_height + 20, i);\n        rotate([0, 0, 120])\n            vein(soil_height + 35, i);\n        rotate([0, 0, 240])\n            vein(soil_height + 50, i);\n    }\n}\n\n// Base for stability\ntranslate([0, 0, -2])\n    cylinder(h = 2, d = pot_diameter + 4, center = false);",
    "renders": true
  },
  {
    "plant": "daisy",
    "openscad_code": "// Realistic Daisy Plant - OpenSCAD\n// Total height: ~120mm, suitable for 3D printing\n\n// Petal parameters\npetal_length = 25;\npetal_width = 8;\npetal_thickness = 2;\npetal_count = 16;\n\n// Center disk parameters\ndisk_height = 6;\ndisk_radius = 12;\ndisk_detail = 32;\n\n// Stem parameters\nstem_height = 80;\nstem_radius = 3;\n\n// Leaf parameters\nleaf_length = 25;\nleaf_width = 12;\nleaf_thickness = 2;\nleaf_angle = 30;\nleaf_count = 3;\n\n// Base parameters\nbase_height = 5;\nbase_radius = 20;\n\n// Petal module - single white petal\nmodule petal() {\n    difference() {\n        // Main petal shape\n        scale([1, petal_width/petal_length, 1])\n            cylinder(h=petal_thickness, r1=petal_length, r2=petal_length/3, $fn=20);\n        \n        // Taper the tip\n        translate([petal_length-3, 0, -1])\n            cube([6, petal_width, petal_thickness+2], center=true);\n        \n        // Round the base\n        translate([0, 0, -1])\n            cylinder(h=petal_thickness+2, r=petal_thickness, $fn=16);\n    }\n}\n\n// Flower head module - disk with petals\nmodule flower_head() {\n    union() {\n        // Center disk (yellow)\n        color(\"gold\")\n        cylinder(h=disk_height, r=disk_radius, $fn=disk_detail);\n        \n        // Disk texture (small cylinders)\n        for(i = [0:35]) {\n            angle = i * 10;\n            radius = disk_radius * 0.8;\n            translate([cos(angle) * radius, sin(angle) * radius, disk_height-1])\n                cylinder(h=2, r=1.5, $fn=8);\n        }\n        \n        // Petals\n        color(\"white\")\n        for(i = [0:petal_count-1]) {\n            rotate([0, 0, i * (360/petal_count)])\n            translate([0, disk_radius, disk_height/2])\n            petal();\n        }\n    }\n}\n\n// Leaf module - elongated shape\nmodule leaf() {\n    difference() {\n        // Main leaf body\n        scale([1, leaf_width/leaf_length, 1])\n            cylinder(h=leaf_thickness, r1=leaf_length, r2=2, $fn=20);\n        \n        // Vein groove\n        translate([leaf_length/2-5, 0, leaf_thickness/2])\n            cube([leaf_length-10, 1, 1], center=true);\n        \n        // Leaf tip\n        translate([leaf_length-2, 0, -1])\n            cube([4, leaf_width/2, leaf_thickness+2], center=true);\n    }\n}\n\n// Stem with leaves\nmodule stem_with_leaves() {\n    union() {\n        // Main stem\n        color(\"darkgreen\")\n        cylinder(h=stem_height, r=stem_radius, $fn=16);\n        \n        // Leaves at intervals\n        for(i = [1:leaf_count]) {\n            height = stem_height * (i * 0.25);\n            rotate_angle = i * 120;\n            \n            translate([0, 0, height])\n            rotate([0, 0, rotate_angle])\n            rotate([leaf_angle, 0, 0])\n            translate([stem_radius+leaf_length/2, 0, 0])\n            leaf();\n        }\n        \n        // Stem texture rings\n        for(i = [5:5:stem_height-10]) {\n            translate([0, 0, i])\n            cylinder(h=1, r=stem_radius+0.5, $fn=16);\n        }\n    }\n}\n\n// Base for stability\nmodule base() {\n    color(\"brown\")\n    difference() {\n        cylinder(h=base_height, r=base_radius, $fn=32);\n        translate([0, 0, -1])\n        cylinder(h=base_height+2, r=base_radius-2, $fn=32);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    base();\n    \n    // Stem\n    translate([0, 0, base_height])\n    stem_with_leaves();\n    \n    // Flower head on top\n    translate([0, 0, base_height + stem_height])\n    rotate([0, 0, 22.5]) // Offset petals for visual interest\n    flower_head();\n}",
    "renders": true
  },
  {
    "plant": "tulip",
    "openscad_code": "// Realistic Tulip Plant - Medium Complexity\n// 3D printable tulip with stem, leaves, and flower\n\n$fn = 36;  // Smoothness for curved surfaces\n\n// Overall scale factor\nscale_factor = 1.0;\n\n// Thickness for 3D printing\nwall_thickness = 2;\n\n// Main tulip assembly\nmodule tulip_plant() {\n    // Stem\n    translate([0, 0, 0]) stem();\n    \n    // Leaves\n    translate([0, 0, 15]) leaves();\n    \n    // Flower\n    translate([0, 0, 80]) flower();\n}\n\n// Stem module - hollow cylinder for printing\nmodule stem() {\n    height = 80;\n    base_diameter = 8;\n    top_diameter = 5;\n    \n    difference() {\n        // Outer stem\n        cylinder(h = height, d1 = base_diameter, d2 = top_diameter, center = false);\n        \n        // Hollow center\n        translate([0, 0, wall_thickness]) \n            cylinder(h = height - wall_thickness, \n                    d1 = base_diameter - 2*wall_thickness, \n                    d2 = top_diameter - 2*wall_thickness, \n                    center = false);\n    }\n}\n\n// Leaves module - 2 curved leaves\nmodule leaves() {\n    // First leaf\n    translate([-8, 0, 0]) rotate([0, -10, -30]) single_leaf();\n    \n    // Second leaf\n    translate([8, 0, 0]) rotate([0, 10, 30]) mirror([1, 0, 0]) single_leaf();\n}\n\n// Single leaf with realistic shape\nmodule single_leaf() {\n    length = 40;\n    width = 15;\n    \n    // Leaf blade\n    hull() {\n        translate([0, 0, 0]) sphere(d = width);\n        translate([length*0.7, 0, 0]) scale([1, 0.3, 0.3]) sphere(d = width);\n        translate([length, 0, 0]) sphere(d = width*0.3);\n    }\n    \n    // Leaf thickness\n    linear_extrude(height = wall_thickness, center = true) {\n        offset(-wall_thickness/2) {\n            hull() {\n                translate([0, 0]) circle(d = width);\n                translate([length*0.7, 0]) scale([1, 0.3]) circle(d = width);\n                translate([length, 0]) circle(d = width*0.3);\n            }\n        }\n    }\n}\n\n// Flower module - tulip bloom\nmodule flower() {\n    // Central receptacle\n    translate([0, 0, -5]) cylinder(h = 10, d = 8);\n    \n    // Petals\n    for(i = [0:5]) {\n        rotate([0, 0, i*60]) translate([0, 0, 0]) petal();\n    }\n}\n\n// Single petal with realistic tulip shape\nmodule petal() {\n    // Petal body\n    translate([0, -3, 0]) rotate([0, 15, 0]) {\n        // Main petal shape\n        hull() {\n            translate([0, 0, 0]) sphere(d = 8);\n            translate([0, 0, 15]) sphere(d = 12);\n            translate([0, 0, 25]) sphere(d = 6);\n        }\n        \n        // Petal thickness\n        difference() {\n            scale([1.1, 1, 1.1]) {\n                hull() {\n                    translate([0, 0, 0]) sphere(d = 8);\n                    translate([0, 0, 15]) sphere(d = 12);\n                    translate([0, 0, 25]) sphere(d = 6);\n                }\n            }\n            \n            // Inner hollow\n            scale([0.9, 1, 0.9]) {\n                hull() {\n                    translate([0, 0, 0]) sphere(d = 8);\n                    translate([0, 0, 15]) sphere(d = 12);\n                    translate([0, 0, 25]) sphere(d = 6);\n                }\n            }\n        }\n    }\n}\n\n// Scale and render the complete tulip\nscale([scale_factor, scale_factor, scale_factor]) {\n    tulip_plant();\n}",
    "renders": true
  },
  {
    "plant": "lily",
    "openscad_code": "// Realistic 3D-printable lily plant (medium complexity)\n// Overall height ~120 mm, base diameter ~60 mm\n\nmodule stem() {\n    // Main stem with slight taper\n    for(i=[0:5:100]) {\n        translate([0, 0, i]) \n        cylinder(h=5, d1=6-i/40, d2=6-(i+5)/40, $fn=8);\n    }\n}\n\nmodule leaf() {\n    // Single lily leaf with central vein\n    difference() {\n        // Main leaf blade\n        scale([1, 3, 0.3])\n        sphere(15, $fn=16);\n        \n        // Taper the tip\n        translate([0, 25, 0])\n        cube([30, 30, 10], center=true);\n        \n        // Add vein groove\n        translate([0, 5, 1.5])\n        cube([1, 25, 1.5], center=true);\n    }\n}\n\nmodule petals() {\n    // Generate 6 lily petals arranged radially\n    for(i=[0:60:359]) {\n        rotate([0, 0, i])\n        translate([0, 20, 95])\n        rotate([90, 0, 0])\n        scale([1, 1.5, 0.3])\n        sphere(12, $fn=8);\n    }\n}\n\nmodule stamens() {\n    // Central stamens with anthers\n    for(i=[0:30:359]) {\n        rotate([0, 0, i])\n        translate([0, 8, 105])\n        cylinder(h=15, d=1.5, $fn=6);\n        \n        // Anther tips\n        translate([0, 8, 120])\n        sphere(1.5, $fn=6);\n    }\n}\n\nmodule base_pot() {\n    // Simple pot for stability\n    difference() {\n        cylinder(h=20, d=50, $fn=32);\n        translate([0, 0, -1])\n        cylinder(h=22, d=46, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Base pot\n    base_pot();\n    \n    // Stem\n    translate([0, 0, 20])\n    stem();\n    \n    // Two leaves at different heights\n    translate([0, 0, 40])\n    rotate([0, 110, 0])\n    leaf();\n    \n    translate([0, 0, 60])\n    rotate([0, 70, 180])\n    leaf();\n    \n    // Flower head\n    petals();\n    stamens();\n}",
    "renders": true
  },
  {
    "plant": "daffodil",
    "openscad_code": "// Realistic Daffodil Plant - Medium Complexity\n// Designed for 3D printing with 2mm wall thickness and minimal overhangs\n\n$fn = 36;\n\n// Main parameters\nstem_height = 80;\nstem_diameter = 4;\nflower_diameter = 40;\ntrumpet_length = 20;\nleaf_length = 60;\nleaf_width = 8;\nbase_height = 10;\n\n// Colors (for preview only)\ncolor_stem = [0.2, 0.6, 0.2];\ncolor_petal = [1, 1, 0.8];\ncolor_trumpet = [1, 1, 0.4];\n\n// Main daffodil assembly\nmodule daffodil() {\n    // Pot base\n    color(color_stem)\n    translate([0, 0, 0])\n        cylinder(h = base_height, r1 = 25, r2 = 20);\n    \n    // Stem\n    color(color_stem)\n    translate([0, 0, base_height])\n        cylinder(h = stem_height, d = stem_diameter);\n    \n    // Leaves\n    for(i = [0, 120]) {\n        rotate([0, 0, i])\n        translate([stem_diameter/2, 0, base_height + 10])\n        rotate([0, 90, 0])\n        leaf();\n    }\n    \n    // Flower head\n    translate([0, 0, base_height + stem_height])\n    rotate([0, 0, 0])\n    flower_head();\n}\n\n// Leaf module\nmodule leaf() {\n    color(color_stem)\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                sphere(d = leaf_width);\n            translate([leaf_length - 5, 0, 0])\n                sphere(d = leaf_width/2);\n        }\n        \n        // Add central vein\n        translate([0, -leaf_width/2 - 1, 0])\n            cube([leaf_length, leaf_width/4, leaf_width/2]);\n    }\n}\n\n// Flower head assembly\nmodule flower_head() {\n    // Central trumpet\n    color(color_trumpet)\n    translate([0, 0, 0])\n    trumpet();\n    \n    // Petals\n    for(i = [0:60:359]) {\n        rotate([0, 0, i])\n        translate([flower_diameter/4, 0, 0])\n        petal();\n    }\n}\n\n// Trumpet (corona)\nmodule trumpet() {\n    color(color_trumpet)\n    difference() {\n        cylinder(h = trumpet_length, r1 = flower_diameter/4, r2 = flower_diameter/3);\n        \n        // Hollow center\n        cylinder(h = trumpet_length + 2, r1 = flower_diameter/4 - 2, r2 = flower_diameter/3 - 2);\n    }\n    \n    // Trumpet rim detail\n    translate([0, 0, trumpet_length])\n    color(color_trumpet)\n    difference() {\n        cylinder(h = 2, r1 = flower_diameter/3, r2 = flower_diameter/3 + 1);\n        cylinder(h = 3, r = flower_diameter/3 - 1.5);\n    }\n}\n\n// Petal module\nmodule petal() {\n    color(color_petal)\n    difference() {\n        scale([1.5, 1, 0.3])\n        sphere(d = flower_diameter/3);\n        \n        // Taper the petal tip\n        translate([flower_diameter/6, 0, -flower_diameter/12])\n            cube([flower_diameter/3, flower_diameter/3, flower_diameter/6], center = true);\n    }\n}\n\n// Generate the complete daffodil\ndaffodil();",
    "renders": true
  },
  {
    "plant": "sunflower",
    "openscad_code": "// Sunflower plant in realistic style\n// Overall height ~120mm, suitable for 3D printing\n\n$fn = 36;  // Smooth curves\n\n// Main dimensions\nstem_height = 100;\nstem_diameter = 4;\nflower_diameter = 80;\ncenter_diameter = 20;\nleaf_length = 35;\nleaf_width = 18;\n\nmodule sunflower() {\n    // Stem\n    color(\"darkgreen\")\n    translate([0, 0, stem_height/2])\n        cylinder(h=stem_height, d=stem_diameter, center=true);\n    \n    // Leaves\n    for(i=[1:3]) {\n        rotate([0, 0, i*120])\n        translate([0, stem_diameter/2 + 2, stem_height/2 - i*20])\n        rotate([90, 0, 30])\n        color(\"forestgreen\")\n        scale([1, 0.3, 1])\n        sphere(d=leaf_length);\n    }\n    \n    // Flower head\n    translate([0, 0, stem_height + center_diameter/2]) {\n        \n        // Center disk - textured\n        color(\"saddlebrown\")\n        difference() {\n            cylinder(h=8, d=center_diameter, center=true);\n            for(a=[0:30:360]) {\n                rotate([0, 0, a])\n                translate([center_diameter/2 - 2, 0, 0])\n                cylinder(h=10, d=1.5, center=true);\n            }\n        }\n        \n        // Petals\n        color(\"goldenrod\")\n        for(angle=[0:15:360]) {\n            rotate([0, 0, angle])\n            translate([0, 0, 4])\n            rotate([90, 0, 0])\n            linear_extrude(height=2)\n            scale([1, 2.5, 1])\n            circle(d=flower_diameter/2 - center_diameter/2 - 5);\n        }\n        \n        // Back of petals\n        color(\"goldenrod\")\n        translate([0, 0, -4])\n        difference() {\n            cylinder(h=8, d=flower_diameter - 10, center=true);\n            cylinder(h=10, d=center_diameter + 5, center=true);\n        }\n    }\n}\n\n// Base platform for stability\ncolor(\"brown\")\ntranslate([0, 0, 1])\ncylinder(h=2, d=20);\n\n// Generate the sunflower\nsunflower();",
    "renders": true
  },
  {
    "plant": "marigold",
    "openscad_code": "// Marigold Plant - Realistic Style, Medium Complexity\n// 3D printable, ~100mm tall\n\n// Parameters\nstem_height = 80;\nstem_radius = 3;\nleaf_length = 25;\nleaf_width = 8;\nleaf_thickness = 2;\nflower_radius = 35;\npetal_count = 20;\npetal_length = 15;\npetal_width = 8;\ncenter_radius = 12;\ncenter_height = 10;\n\n// Stem module\nmodule stem() {\n    // Main stem\n    cylinder(h=stem_height, r=stem_radius, $fn=16);\n    \n    // Add slight taper at top\n    translate([0, 0, stem_height-5])\n        cylinder(h=5, r1=stem_radius, r2=stem_radius*0.8, $fn=16);\n}\n\n// Leaf module with realistic shape\nmodule leaf() {\n    // Main leaf body - tapered oval\n    scale([1, leaf_width/leaf_length, 1])\n        cylinder(h=leaf_length, r=leaf_length/2, $fn=8);\n    \n    // Leaf vein\n    translate([0, 0, leaf_thickness/2])\n        scale([0.1, 0.3, 1])\n            cube([leaf_width, leaf_length, leaf_thickness], center=true);\n}\n\n// Flower petal module\nmodule petal() {\n    // Curved petal shape\n    translate([0, petal_length/2, 0])\n        scale([petal_width/10, petal_length/10, 1])\n            sphere(r=5, $fn=16);\n    \n    // Add thickness\n    translate([0, petal_length/2, -1])\n        scale([petal_width/10, petal_length/10, 0.2])\n            sphere(r=5, $fn=16);\n}\n\n// Flower head module\nmodule flower_head() {\n    // Center disk - textured\n    difference() {\n        cylinder(h=center_height, r=center_radius, $fn=32);\n        \n        // Seed pattern holes\n        for(i=[0:15]) {\n            rotate([0, 0, i*22.5])\n                translate([center_radius*0.7, 0, center_height/2])\n                    cylinder(h=center_height+1, r=1, $fn=8);\n        }\n    }\n    \n    // Petals around center\n    for(i=[0:petal_count-1]) {\n        rotate([0, 0, i*(360/petal_count)])\n            translate([0, center_radius + petal_length/2, center_height/2])\n                rotate([15, 0, 0])\n                    petal();\n    }\n}\n\n// Leaves along stem\nmodule leaves() {\n    // Lower leaves\n    for(i=[0:2]) {\n        translate([0, 0, 15 + i*20])\n            rotate([0, 0, i*120])\n                translate([stem_radius+2, 0, 0])\n                    rotate([0, -30, 0])\n                        leaf();\n    }\n    \n    // Upper leaves\n    for(i=[0:1]) {\n        translate([0, 0, 55 + i*15])\n            rotate([0, 0, 45 + i*180])\n                translate([stem_radius+1, 0, 0])\n                    rotate([0, -20, 0])\n                        scale([0.8, 0.8, 1])\n                            leaf();\n    }\n}\n\n// Main assembly\nunion() {\n    // Stem\n    stem();\n    \n    // Leaves\n    leaves();\n    \n    // Flower at top\n    translate([0, 0, stem_height])\n        flower_head();\n}",
    "renders": true
  },
  {
    "plant": "petunia",
    "openscad_code": "// Petunia Plant - Realistic Style, Medium Complexity\n// Overall height ~100mm, suitable for 3D printing\n\n$fn = 32;\n\n// Main stem\nmodule stem() {\n    color(\"darkgreen\")\n    union() {\n        // Main stem trunk\n        cylinder(h = 40, r1 = 3, r2 = 2);\n        \n        // Side branches\n        for(i = [1:3]) {\n            rotate([0, 0, i*120])\n            translate([0, 0, 15])\n            rotate([0, 30, 0])\n            cylinder(h = 25, r1 = 2, r2 = 1);\n        }\n    }\n}\n\n// Individual leaf\nmodule leaf() {\n    color(\"forestgreen\")\n    scale([1, 1.8, 0.3])\n    sphere(5);\n}\n\n// Leaf cluster on stem\nmodule leaf_cluster() {\n    for(i = [1:6]) {\n        rotate([0, 0, i*60])\n        translate([5 + i%2*2, 0, 10 + i*5])\n        rotate([30, 0, 0])\n        leaf();\n    }\n}\n\n// Petal shape\nmodule petal() {\n    color(\"purple\")\n    scale([1, 1.5, 0.5])\n    sphere(6);\n}\n\n// Flower bud\nmodule bud() {\n    color(\"lightgreen\")\n    translate([0, 0, 2])\n    sphere(3);\n}\n\n// Complete flower\nmodule flower() {\n    union() {\n        // Center\n        translate([0, 0, 2])\n        color(\"yellow\")\n        sphere(3);\n        \n        // Petals\n        for(i = [1:5]) {\n            rotate([0, 0, i*72])\n            translate([0, 6, 0])\n            petal();\n        }\n        \n        // Calyx\n        translate([0, 0, -2])\n        color(\"darkgreen\")\n        cylinder(h = 4, r1 = 4, r2 = 3);\n    }\n}\n\n// Plant pot\nmodule pot() {\n    color(\"brown\")\n    difference() {\n        // Outer pot\n        cylinder(h = 25, r1 = 25, r2 = 20);\n        \n        // Inner hollow\n        translate([0, 0, -1])\n        cylinder(h = 26, r1 = 22, r2 = 17);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    color(\"saddlebrown\")\n    translate([0, 0, -2])\n    cylinder(h = 3, r = 21);\n}\n\n// Complete plant assembly\nmodule petunia_plant() {\n    // Pot and soil\n    pot();\n    translate([0, 0, 25]) soil();\n    \n    // Stem assembly\n    translate([0, 0, 26]) {\n        stem();\n        \n        // Add leaves along stem\n        for(i = [1:3]) {\n            rotate([0, 0, i*120])\n            translate([0, 0, 15])\n            rotate([0, 30, 0])\n            translate([0, 0, 10])\n            leaf_cluster();\n        }\n    }\n    \n    // Flowers at top\n    translate([0, 0, 66]) {\n        flower();\n        \n        // Additional flowers on branches\n        for(i = [1:3]) {\n            rotate([0, 0, i*120])\n            translate([20, 0, 10])\n            rotate([0, 0, i*45])\n            flower();\n        }\n    }\n    \n    // Buds\n    for(i = [1:4]) {\n        rotate([0, 0, i*90])\n        translate([15 + i%2*5, 0, 50 + i*3])\n        bud();\n    }\n}\n\n// Render the complete plant\npetunia_plant();",
    "renders": true
  },
  {
    "plant": "zinnia",
    "openscad_code": "// Realistic Zinnia Plant - Medium Complexity\n// Overall height ~120mm, printable without supports\n\n$fn=36; // Smooth curves for realistic appearance\n\n// Main stem\nmodule stem() {\n    color(\"darkgreen\")\n    union() {\n        // Central stem\n        cylinder(h=100, r1=3, r2=2);\n        \n        // Small leaves along stem\n        for(i=[20:20:80]) {\n            translate([0,0,i])\n            rotate([0,0,i*45])\n            leaf();\n        }\n    }\n}\n\n// Individual leaf\nmodule leaf() {\n    color(\"green\")\n    translate([-8,0,0])\n    rotate([0,0,-30])\n    scale([0.5,1,0.1])\n    difference() {\n        sphere(r=16);\n        translate([16,0,0])\n        sphere(r=12);\n    }\n}\n\n// Petal structure\nmodule petal(length=20, width=8) {\n    color(\"firebrick\")\n    translate([0,length/2,0])\n    rotate([90,0,0])\n    scale([1,1,0.4])\n    difference() {\n        sphere(r=width);\n        translate([0,width,0])\n        sphere(r=width*0.8);\n        translate([0,0,-width])\n        cube([width*2,width*2,width*2], center=true);\n    }\n}\n\n// Flower head\nmodule flower_head() {\n    color(\"firebrick\")\n    union() {\n        // Central disk\n        translate([0,0,102])\n        cylinder(h=8, r1=8, r2=10);\n        \n        // Petal ring 1\n        for(i=[0:30:359]) {\n            translate([0,0,102])\n            rotate([0,0,i])\n            translate([12,0,0])\n            petal(22, 10);\n        }\n        \n        // Petal ring 2\n        for(i=[15:30:359]) {\n            translate([0,0,102])\n            rotate([0,0,i])\n            translate([18,0,0])\n            petal(20, 9);\n        }\n        \n        // Petal ring 3\n        for(i=[0:30:359]) {\n            translate([0,0,102])\n            rotate([0,0,i])\n            translate([24,0,0])\n            petal(18, 8);\n        }\n    }\n}\n\n// Small bud\nmodule bud() {\n    color(\"darkgreen\")\n    translate([8,8,95])\n    rotate([0,0,45])\n    union() {\n        sphere(r=6);\n        cylinder(h=8, r1=2, r2=4);\n    }\n}\n\n// Base pot\nmodule pot() {\n    color(\"sienna\")\n    difference() {\n        // Outer pot\n        translate([0,0,-5])\n        cylinder(h=15, r1=25, r2=20);\n        \n        // Inner cavity\n        translate([0,0,-4])\n        cylinder(h=14, r1=22, r2=17);\n        \n        // Drainage hole\n        translate([0,0,-5])\n        cylinder(h=3, r=3);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    color(\"saddlebrown\")\n    translate([0,0,10])\n    cylinder(h=3, r=22);\n}\n\n// Main assembly\nunion() {\n    pot();\n    soil();\n    translate([0,0,13]) stem();\n    flower_head();\n    bud();\n}",
    "renders": true
  },
  {
    "plant": "hibiscus",
    "openscad_code": "// Hibiscus Plant - Realistic Style, Medium Complexity\n// Dimensions: ~100mm height, printable at 100% scale\n\n$fn = 48;  // Smooth curves for 3D printing\n\n// Main stem\nmodule stem() {\n    union() {\n        // Main vertical stem\n        cylinder(h = 80, r1 = 4, r2 = 3, center = false);\n        \n        // Branch 1\n        translate([0, 0, 50])\n            rotate([0, 30, 0])\n            cylinder(h = 25, r1 = 2.5, r2 = 2, center = false);\n        \n        // Branch 2\n        translate([0, 0, 45])\n            rotate([0, -25, 45])\n            cylinder(h = 20, r1 = 2.5, r2 = 2, center = false);\n    }\n}\n\n// Leaf with realistic shape\nmodule leaf(length = 25, width = 15, thickness = 2) {\n    difference() {\n        // Main leaf shape\n        scale([width/2, length, thickness/2])\n            sphere(r = 1, center = true);\n        \n        // Leaf tip\n        translate([0, length/2 + 2, 0])\n            scale([width/3, 4, thickness])\n                sphere(r = 1);\n        \n        // Vein indentation\n        translate([0, 0, thickness/2])\n            scale([width/6, length*0.9, 0.5])\n                cube([1, 1, 1], center = true);\n    }\n}\n\n// Petal with realistic hibiscus shape\nmodule petal(length = 20, width = 18, thickness = 1.5) {\n    difference() {\n        union() {\n            // Main petal body\n            translate([0, length/2, 0])\n                scale([width/2, length/2, thickness])\n                    sphere(r = 1, center = true);\n            \n            // Petal extension\n            translate([0, length*0.8, 0])\n                scale([width/3, length*0.4, thickness])\n                    sphere(r = 1, center = true);\n        }\n        \n        // Ruffled edge\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n                translate([width/2 - 1, 0, 0])\n                    cylinder(h = thickness + 1, r = 1.5, center = true);\n        }\n    }\n}\n\n// Stamen column\nmodule stamen(height = 12, radius = 3) {\n    union() {\n        // Central column\n        cylinder(h = height, r = radius, center = false);\n        \n        // Anthers\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([radius + 3, 0, height - 2])\n                    sphere(r = 1.5);\n        }\n        \n        // Stigma\n        translate([0, 0, height])\n            sphere(r = 2);\n    }\n}\n\n// Single flower assembly\nmodule flower() {\n    union() {\n        // Petals (5 for hibiscus)\n        for(i = [0:72:360]) {\n            rotate([0, 0, i])\n                translate([0, 10, 0])\n                    rotate([10, 0, 0])\n                        petal();\n        }\n        \n        // Center stamen\n        translate([0, 0, 2])\n            stamen();\n    }\n}\n\n// Leaves along branches\nmodule branch_leaves() {\n    // Leaves on main stem\n    translate([8, 0, 30])\n        rotate([0, 0, 30])\n        leaf(20, 12);\n    \n    translate([-6, 5, 45])\n        rotate([0, 10, -20])\n        leaf(22, 14);\n    \n    // Leaves on branch 1\n    translate([20, 0, 55])\n        rotate([0, 0, 45])\n        leaf(18, 11);\n    \n    // Leaves on branch 2\n    translate([-15, -10, 50])\n        rotate([0, -10, -30])\n        leaf(19, 12);\n}\n\n// Complete plant assembly\nunion() {\n    // Stem and branches\n    stem();\n    \n    // Leaves\n    branch_leaves();\n    \n    // Flowers\n    translate([0, 0, 80])\n        flower();\n    \n    translate([18, 0, 65])\n        rotate([15, 0, 30])\n        scale([0.8, 0.8, 0.8])\n            flower();\n    \n    translate([-12, -8, 60])\n        rotate([20, 0, -45])\n        scale([0.7, 0.7, 0.7])\n            flower();\n}",
    "renders": true
  },
  {
    "plant": "carnation",
    "openscad_code": "// Carnation plant with realistic proportions for 3D printing\n// Approx. 90 mm tall, 60 mm diameter bloom\n\n// Main parameters\nstem_d = 5;           // stem diameter\nstem_h = 40;          // stem height\nbloom_d = 60;         // flower head diameter\npetal_count = 28;     // number of petals per layer\nlayers = 4;           // petal layers\nlayer_step = 3;       // vertical step between layers\npetal_t = 2;          // petal thickness for printing\n\nmodule calyx() {\n    // Green calyx (sepals) at flower base\n    difference() {\n        cylinder(d1=10, d2=8, h=6, $fn=6);\n        translate([0,0,-1]) cylinder(d1=8, d2=6, h=8, $fn=6);\n    }\n    // Sepal points\n    for(i=[0:4]) {\n        rotate([0,0,i*72]) \n            translate([4,0,3]) \n                rotate([0,-30,0]) \n                    cylinder(d1=3, d2=1, h=6, $fn=3);\n    }\n}\n\nmodule petal(radius, height, angle, layer) {\n    // Individual fringed petal\n    scale([1, 0.7, 1]) {\n        translate([0,0,layer*layer_step]) {\n            rotate([0,0,angle]) {\n                rotate([0,-15-layer*5,0]) {\n                    // Main petal body\n                    translate([radius,0,0]) \n                        cube([12, petal_t, 8], center=true);\n                    \n                    // Fringed tip\n                    for(j=[0:3]) {\n                        translate([radius+10+j*2, 0, 4-j*1.5]) \n                            cube([3, petal_t, 2], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule bloom() {\n    // Flower head construction\n    union() {\n        calyx();\n        \n        // Petal layers\n        for(layer=[0:layers-1]) {\n            for(i=[0:petal_count-1]) {\n                petal(\n                    radius = 15 + layer*5,\n                    height = 8 - layer*1.5,\n                    angle = i*(360/petal_count) + layer*6.5,\n                    layer = layer\n                );\n            }\n        }\n        \n        // Central disk\n        translate([0,0,layers*layer_step+2]) {\n            sphere(d=8, $fn=20);\n            // Stamen details\n            for(k=[0:11]) {\n                rotate([0,0,k*30]) {\n                    translate([3,0,2]) \n                        cylinder(d1=1.5, d2=0.5, h=4, $fn=4);\n                }\n            }\n        }\n    }\n}\n\nmodule leaf(length, width, angle) {\n    // Simple lanceolate leaf\n    rotate([0,0,angle]) {\n        translate([0,-length/2,0]) {\n            scale([1, length/width, 1]) {\n                difference() {\n                    cylinder(d=width, h=petal_t, center=true, $fn=8);\n                    translate([width/3,0,0]) \n                        scale([0.3,1,1]) \n                            cylinder(d=width, h=petal_t+0.1, center=true, $fn=8);\n                }\n            }\n        }\n    }\n}\n\nmodule stem() {\n    // Main stem with leaves\n    union() {\n        // Stem cylinder\n        cylinder(d=stem_d, h=stem_h, $fn=8);\n        \n        // Upper leaves\n    leaf(20, 8, 45);\n    translate([0,0,-15]) leaf(25, 10, -30);\n    translate([0,0,-30]) leaf(22, 9, 60);\n    }\n}\n\n// Final assembly\ntranslate([0,0,0]) stem();\ntranslate([0,0,stem_h-2]) bloom();",
    "renders": true
  },
  {
    "plant": "peony",
    "openscad_code": "// Realistic Peony Plant (Medium Complexity)\n// 3D printable model with proper wall thickness and no overhangs\n\n// Overall dimensions: ~80mm diameter, ~70mm height\n\n// Main plant module\nmodule peony_plant() {\n    union() {\n        // Pot base\n        pot();\n        \n        // Main stem\n        stem();\n        \n        // Leaves\n        leaves();\n        \n        // Flower head\n        flower_head();\n    }\n}\n\n// Plant pot\nmodule pot() {\n    // Outer pot\n    cylinder(h = 25, r1 = 25, r2 = 20, $fn = 36);\n    \n    // Inner hollow (wall thickness 2mm)\n    translate([0, 0, 2])\n        cylinder(h = 23, r1 = 23, r2 = 18, $fn = 36);\n    \n    // Soil surface\n    translate([0, 0, 2])\n        color(\"saddlebrown\")\n        cylinder(h = 3, r1 = 23, r2 = 23, $fn = 36);\n}\n\n// Main stem\nmodule stem() {\n    color(\"darkgreen\")\n    translate([0, 0, 25])  // Start from pot\n    cylinder(h = 35, r1 = 3, r2 = 2, $fn = 8);\n}\n\n// Leaves\nmodule leaves() {\n    // Leaf parameters\n    leaf_count = 5;\n    \n    for (i = [0:leaf_count-1]) {\n        rotate([0, 0, i * 72])\n        translate([0, 0, 35 + i * 3])\n        rotate([30 + i * 5, 0, 0])\n        single_leaf(15 + i * 2);\n    }\n}\n\n// Single leaf\nmodule single_leaf(length) {\n    color(\"green\")\n    translate([0, 0, 0])\n    union() {\n        // Main leaf blade\n        scale([1, 0.5, 0.1])\n        sphere(r = length, $fn = 24);\n        \n        // Leaf stem\n        translate([0, 0, -length/2])\n        rotate([90, 0, 0])\n        cylinder(h = length/3, r = 0.8, $fn = 6);\n    }\n}\n\n// Flower head\nmodule flower_head() {\n    translate([0, 0, 60])\n    union() {\n        // Central bud\n        bud();\n        \n        // Petals\n        petals();\n    }\n}\n\n// Central bud\nmodule bud() {\n    color(\"darkred\")\n    sphere(r = 4, $fn = 16);\n}\n\n// Petal arrangement\nmodule petals() {\n    petal_layers = 3;\n    \n    for (layer = [0:petal_layers-1]) {\n        petals_in_layer = 5 + layer * 2;\n        petal_size = 12 - layer * 2;\n        \n        for (i = [0:petals_in_layer-1]) {\n            angle = i * (360 / petals_in_layer);\n            tilt = 20 + layer * 15;\n            \n            rotate([0, 0, angle])\n            rotate([tilt, 0, 0])\n            translate([0, 0, layer * 2])\n            single_petal(petal_size);\n        }\n    }\n}\n\n// Single petal\nmodule single_petal(size) {\n    color(\"lightpink\")\n    union() {\n        // Main petal shape\n        translate([0, 0, 0])\n        scale([1, 0.7, 0.3])\n        sphere(r = size, $fn = 24);\n        \n        // Petal tip detail\n        translate([size * 0.8, 0, 0])\n        scale([0.3, 0.7, 0.3])\n        sphere(r = size * 0.5, $fn = 12);\n    }\n}\n\n// Create the plant\npeony_plant();",
    "renders": true
  },
  {
    "plant": "geranium",
    "openscad_code": "// Geranium Plant - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs and 2mm wall thickness\n// Overall height: 100mm, pot diameter: 50mm\n\nmodule pot() {\n    // Main pot body - slightly tapered cylinder\n    difference() {\n        cylinder(h=25, r1=25, r2=20, $fn=48);\n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h=26, r1=23, r2=18, $fn=48);\n    }\n    \n    // Pot rim lip\n    translate([0, 0, 25])\n        cylinder(h=3, r1=26, r2=25, $fn=48);\n    \n    // Drainage hole at bottom\n    translate([0, 0, 0])\n        cylinder(h=2, r=3, $fn=16);\n}\n\nmodule soil() {\n    // Soil surface - slightly domed\n    translate([0, 0, 25])\n        scale([1, 1, 0.3])\n            sphere(r=20, $fn=48);\n}\n\nmodule stem(height=40, angle=0) {\n    // Main stem with slight taper\n    translate([0, 0, 28])\n        rotate([angle, 0, 0])\n            cylinder(h=height, r1=2.5, r2=2, $fn=12);\n}\n\nmodule leaf(length=20, width=15, angle=0) {\n    // Geranium leaf shape - 5 lobed palmate\n    rotate([0, 0, angle])\n        for(i=[0:4]) {\n            rotate([0, 0, i*72-144])\n                translate([length/2, 0, 0])\n                    scale([length/2, width/2, 1])\n                        intersection() {\n                            sphere(r=1, $fn=8);\n                            translate([-1, 0, 0])\n                                cube([2, 2, 0.5], center=true);\n                        }\n        }\n    // Center part of leaf\n    translate([0, 0, 0])\n        scale([3, 3, 1])\n            cylinder(h=0.5, r=1.5, $fn=8);\n}\n\nmodule flower_cluster(pos=[0, 0, 0]) {\n    // Center of flower cluster\n    translate(pos)\n        sphere(r=2, $fn=12);\n    \n    // Individual flowers in cluster\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([5, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=8, r1=3, r2=0.5, $fn=8);\n    }\n    \n    // Petals\n    for(i=[0:5]) {\n        rotate([0, 0, i*72])\n            translate([5, 0, 0])\n                rotate([30, 0, 0])\n                    scale([1.5, 1, 0.5])\n                        sphere(r=3, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    pot();\n    \n    soil();\n    \n    // Main stem\n    stem(35, 5);\n    \n    // Side stems with leaves\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([0, 0, 35])\n                union() {\n                    stem(25, 30);\n                    translate([0, 0, 25])\n                        rotate([0, 0, 45])\n                            leaf();\n                }\n    }\n    \n    // Top flower clusters\n    translate([0, 0, 63])\n        flower_cluster();\n    \n    // Side flower clusters\n    for(i=[0:3]) {\n        rotate([0, 0, i*90+45])\n            translate([0, 0, 50])\n                rotate([0, 30, 0])\n                    flower_cluster([10, 0, 0]);\n    }\n    \n    // Additional leaves\n    for(i=[0:7]) {\n        rotate([0, 0, i*51])\n            translate([0, 0, 32+i*3])\n                rotate([0, 0, i*25])\n                    leaf(15, 12, 0);\n    }\n}",
    "renders": true
  },
  {
    "plant": "violet",
    "openscad_code": "// Violet plant module\n// Realistic style, medium complexity\n\n// Constants for dimensions\npot_height = 30;\npot_radius = 25;\nstem_height = 80;\nstem_radius = 2.5;\nleaf_length = 35;\nleaf_width = 25;\nflower_radius = 12;\nflower_height = 8;\ncenter_radius = 3;\n\n// Main plant assembly\nmodule violet_plant() {\n    union() {\n        // Pot\n        translate([0, 0, pot_height/2])\n            pot();\n        \n        // Soil surface\n        translate([0, 0, pot_height])\n            soil_surface();\n        \n        // Main stem\n        translate([0, 0, pot_height])\n            stem(stem_height);\n        \n        // Leaves\n        leaves();\n        \n        // Flowers on stems\n        flowers();\n    }\n}\n\n// Pot with drainage gap\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_height, r=pot_radius, $fn=32);\n        \n        // Inner hollow\n        translate([0, 0, 2])\n            cylinder(h=pot_height, r=pot_radius-3, $fn=32);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h=5, r=4, $fn=16);\n    }\n}\n\n// Soil surface\nmodule soil_surface() {\n    color(\"saddlebrown\")\n    translate([0, 0, 1])\n        cylinder(h=2, r=pot_radius-3, $fn=32);\n}\n\n// Main stem\nmodule stem(height) {\n    color(\"darkgreen\")\n    cylinder(h=height, r=stem_radius, $fn=12);\n}\n\n// Generate leaves around stem\nmodule leaves() {\n    // Parameters for leaf arrangement\n    leaf_count = 5;\n    leaf_start_height = pot_height + 20;\n    leaf_spacing = 12;\n    \n    for(i = [0:leaf_count-1]) {\n        // Calculate position\n        angle = i * 72 + 15 * sin(i * 72);\n        height = leaf_start_height + (i % 2) * leaf_spacing;\n        \n        translate([0, 0, height])\n            rotate([0, 0, angle])\n                leaf();\n    }\n}\n\n// Single leaf\nmodule leaf() {\n    color(\"forestgreen\")\n    translate([stem_radius + 2, 0, 0])\n        rotate([90, 0, 0])\n            scale([leaf_width/leaf_length, 1, 1])\n                difference() {\n                    // Main leaf shape\n                    sphere(r=leaf_length/2, $fn=32);\n                    \n                    // Remove back half\n                    translate([0, 0, -leaf_length/2-1])\n                        cube([leaf_length+2, leaf_length+2, leaf_length+2], center=true);\n                    \n                    // Leaf stem\n                    translate([0, 0, -leaf_length/2])\n                        cylinder(h=leaf_length/4, r=stem_radius/2, $fn=8);\n                }\n}\n\n// Generate flowers on stems\nmodule flowers() {\n    flower_count = 3;\n    \n    for(i = [0:flower_count-1]) {\n        angle = i * 120;\n        height = pot_height + stem_height - 15 - i * 8;\n        radius = 15 + i * 5;\n        \n        translate([0, 0, height])\n            rotate([0, 0, angle])\n                translate([radius, 0, 0])\n                    flower();\n    }\n}\n\n// Single flower\nmodule flower() {\n    color(\"mediumpurple\")\n    translate([0, 0, 0])\n        union() {\n            // Petals\n            for(i = [0:4]) {\n                rotate([0, 0, i * 72])\n                    translate([0, flower_radius/2, 0])\n                        rotate([60, 0, 0])\n                            scale([1.2, 1, 0.6])\n                                sphere(r=flower_radius/2, $fn=16);\n            }\n            \n            // Flower center\n            translate([0, 0, flower_height/2])\n                color(\"yellow\")\n                    sphere(r=center_radius, $fn=16);\n            \n            // Small stem\n            color(\"darkgreen\")\n            translate([0, 0, -flower_height/2])\n                cylinder(h=flower_height/2, r=stem_radius/1.5, $fn=8);\n        }\n}\n\n// Render the complete plant\nviolet_plant();",
    "renders": true
  },
  {
    "plant": "pansy",
    "openscad_code": "// Pansy flower - realistic medium complexity\n// Overall size ~100mm diameter, 3D printable with 2mm walls\n\n$fn = 36;\n\n// Main flower module\nmodule pansy() {\n    // Central disk\n    union() {\n        // Main flower head\n        translate([0, 0, 2])\n            scale([1, 1, 0.3])\n                sphere(d = 100);\n        \n        // Bottom petal (largest)\n        color(\"indigo\")\n        translate([0, -25, 0])\n            rotate([15, 0, 0])\n                scale([1.2, 1.5, 0.5])\n                    sphere(d = 50);\n        \n        // Top petals (pair)\n        color(\"violet\")\n        translate([-20, 15, 5])\n            rotate([-10, -5, -30])\n                scale([1, 1.2, 0.4])\n                    sphere(d = 40);\n        \n        translate([20, 15, 5])\n            rotate([-10, 5, 30])\n                scale([1, 1.2, 0.4])\n                    sphere(d = 40);\n        \n        // Side petals\n        color(\"purple\")\n        translate([-35, -10, 3])\n            rotate([0, 0, -45])\n                scale([0.8, 1.3, 0.3])\n                    sphere(d = 35);\n        \n        translate([35, -10, 3])\n            rotate([0, 0, 45])\n                scale([0.8, 1.3, 0.3])\n                    sphere(d = 35);\n        \n        // Flower center markings\n        color(\"yellow\")\n        for(i = [0:5:355]) {\n            rotate([0, 0, i])\n                translate([0, 12, 8])\n                    cylinder(h = 3, d1 = 8, d2 = 4);\n        }\n        \n        // Dark veins\n        color(\"darkslateblue\")\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([0, 0, 7])\n                    linear_extrude(height = 1)\n                        polygon(points = [[0, 0], [5, 20], [0, 40], [-5, 20]]);\n        }\n    }\n}\n\n// Stem and leaves\nmodule stem() {\n    union() {\n        // Main stem\n        color(\"green\")\n        translate([0, 0, -30])\n            cylinder(h = 60, d1 = 8, d2 = 5);\n        \n        // Leaves\n        for(i = [0:120:240]) {\n            rotate([0, 0, i])\n                translate([0, -10, -15])\n                    rotate([90, 0, 0])\n                        scale([1, 0.5, 1])\n                            leaf();\n        }\n    }\n}\n\n// Leaf module\nmodule leaf() {\n    difference() {\n        union() {\n            // Main leaf shape\n            scale([30, 15, 2])\n                sphere(d = 20);\n            \n            // Leaf stem\n            translate([0, -7.5, 0])\n                cube([30, 1, 2], center = true);\n        }\n        \n        // Leaf veins\n        for(i = [-2:1:2]) {\n            translate([i * 5, 0, 1])\n                cube([1, 15, 2], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    pansy();\n    stem();\n}",
    "renders": true
  },
  {
    "plant": "iris",
    "openscad_code": "// Realistic Iris Plant - OpenSCAD Model\n// Medium complexity, 3D printable, ~100mm height\n\n// Main parameters\nstem_height = 80;\nstem_diameter = 4;\nleaf_length = 60;\nleaf_width = 15;\nflower_height = 25;\nflower_width = 35;\n\n// Stem module with slight taper\nmodule stem(h, d) {\n    union() {\n        // Main stem\n        cylinder(h1 = h, r1 = d/2, r2 = d/2 * 0.8, $fn = 12);\n        \n        // Stem joints/nodes\n        for(i = [1:10:h-5]) {\n            translate([0, 0, i])\n                cylinder(h = 2, r = d/2 * 1.3, $fn = 8);\n        }\n    }\n}\n\n// Iris leaf with central rib\nmodule leaf(length, width) {\n    difference() {\n        // Leaf blade\n        scale([1, 0.3, 1])\n            rotate([90, 0, 0])\n                cylinder(h = length, r1 = width, r2 = width * 0.7, $fn = 3);\n        \n        // Leaf tip detail\n        translate([0, -length/2, 0])\n            rotate([0, 90, 0])\n                cylinder(h = width * 0.8, r1 = 2, r2 = 0.1, $fn = 8);\n    }\n    \n    // Central vein\n    translate([0, 0, 0.5])\n        scale([0.1, 1, 0.1])\n            rotate([90, 0, 0])\n                cylinder(h = length, r = width/2, $fn = 3);\n}\n\n// Standard iris flower structure\nmodule iris_flower() {\n    union() {\n        // Standards (upright petals)\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([0, 0, flower_height/2])\n                    rotate([30, 0, 0])\n                        scale([1, 0.3, 2])\n                            sphere(d = flower_width/2, $fn = 16);\n        }\n        \n        // Falls (drooping petals)\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120 + 60])\n                translate([0, flower_width/2 * 0.8, -flower_height/4])\n                    rotate([-45, 0, 0])\n                        scale([1.2, 0.4, 0.8])\n                            sphere(d = flower_width/1.8, $fn = 16);\n        }\n        \n        // Beard (central fuzzy structure)\n        translate([0, 0, -flower_height/3])\n            cylinder(h = flower_height/3, r1 = flower_width/8, r2 = flower_width/10, $fn = 8);\n        \n        // Style arms\n        for(i = [0:1]) {\n            rotate([0, 0, i * 180 + 30])\n                translate([0, flower_width/3, flower_height/4])\n                    rotate([20, 0, 0])\n                        scale([0.5, 0.2, 1.5])\n                            sphere(d = flower_width/3, $fn = 8);\n        }\n    }\n}\n\n// Roots/rhizome base\nmodule rhizome() {\n    difference() {\n        // Main rhizome\n        scale([1.5, 1, 0.5])\n            rotate([90, 0, 0])\n                cylinder(h = 25, r = 8, $fn = 8);\n        \n        // Root attachment points\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([10, 0, -5])\n                    cylinder(h = 10, r = 3, $fn = 6);\n        }\n    }\n}\n\n// Build the complete plant\nunion() {\n    // Base rhizome\n    rhizome();\n    \n    // Main stem\n    translate([0, 0, 5])\n        stem(stem_height, stem_diameter);\n    \n    // Alternate leaves along stem\n    for(i = [1:20:stem_height-20]) {\n        rotate([0, 0, i * 45])\n            translate([stem_diameter/2 + 2, 0, i])\n                rotate([15, 0, 0])\n                    leaf(leaf_length - i/2, leaf_width);\n    }\n    \n    // Flower at top\n    translate([0, 0, stem_height + 5])\n        scale([0.8, 0.8, 0.8])\n            iris_flower();\n    \n    // Bud\n    translate([stem_diameter/2 + 3, 0, stem_height - 10])\n        rotate([15, 0, 30])\n            scale([0.5, 0.5, 0.5])\n                iris_flower();\n}",
    "renders": true
  },
  {
    "plant": "hyacinth",
    "openscad_code": "// Hyacinth Plant - Realistic Medium Complexity\n// Scale: 120mm tall\n$fn = 24;\n\n// Base pot\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = 40, r1 = 35, r2 = 30, center = false);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = 38, r1 = 33, r2 = 28, center = false);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h = 3, r = 3, center = false);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, 38])\n        scale([1.1, 1.1, 0.3])\n            sphere(30);\n}\n\n// Individual bulb segment\nmodule bulb_segment(height, radius) {\n    rotate_extrude()\n        translate([radius, 0, 0])\n            circle(r = radius / 2);\n}\n\n// Hyacinth bulb\nmodule bulb() {\n    translate([0, 0, 35])\n    scale([1, 1, 0.8])\n    difference() {\n        // Main bulb\n        union() {\n            sphere(12);\n            translate([0, 0, -5])\n                cylinder(h = 15, r = 12, r2 = 8);\n        }\n        \n        // Root cavity\n        translate([0, 0, -6])\n            cylinder(h = 8, r = 4, center = false);\n    }\n}\n\n// Individual leaf\nmodule leaf(length, width, height) {\n    // Tapered leaf shape\n    translate([0, 0, height])\n    rotate([0, 90, 0])\n    linear_extrude(height = width, center = true, scale = 0.2)\n        polygon(points = [\n            [0, 0],\n            [length, -width/4],\n            [length, width/4],\n            [0, 0]\n        ]);\n}\n\n// Leaf cluster\nmodule leaves() {\n    for(i = [0:8]) {\n        rotate([0, 0, i * 45])\n        translate([8, 0, 30])\n            rotate([10 + i * 5, 0, 0])\n                leaf(60 - i * 3, 8 - i * 0.5, 0);\n    }\n}\n\n// Individual flower\nmodule flower(size) {\n    // Central tube\n    cylinder(h = size, r = size / 4, center = false);\n    \n    // Petals\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([size / 3, 0, size / 2])\n            scale([0.7, 0.3, 0.7])\n                sphere(size / 2);\n    }\n}\n\n// Flower cluster\nmodule flower_cluster() {\n    // Main stem\n    translate([0, 0, 40])\n    cylinder(h = 40, r = 3, center = false);\n    \n    // Individual flowers along stem\n    for(i = [0:15]) {\n        angle = i * 137.5;\n        height = 45 + i * 4;\n        radius = 15 - i * 0.5;\n        \n        translate([cos(angle) * radius, sin(angle) * radius, height])\n            rotate([0, 0, angle])\n            rotate([30, 0, 0])\n                flower(8 - i * 0.2);\n    }\n}\n\n// Assembly\nunion() {\n    pot();\n    soil();\n    bulb();\n    leaves();\n    flower_cluster();\n}",
    "renders": true
  },
  {
    "plant": "azalea",
    "openscad_code": "// Azalea Plant - Medium Complexity Realistic Style\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 32; // Smooth curves\n\n// Main parameters\npot_height = 35;\npot_radius = 25;\nstem_height = 40;\nstem_radius = 4;\nflower_radius = 12;\nleaf_length = 20;\nleaf_width = 8;\n\nmodule azalea_plant() {\n    union() {\n        // Pot\n        difference() {\n            // Outer pot\n            cylinder(h=pot_height, r=pot_radius, center=false);\n            // Inner hollow\n            translate([0,0,2])\n                cylinder(h=pot_height-2, r=pot_radius-2, center=false);\n        }\n        \n        // Soil top\n        translate([0,0,2])\n            cylinder(h=3, r=pot_radius-1.5, center=false);\n        \n        // Main stem\n        translate([0,0,5])\n            cylinder(h=stem_height, r=stem_radius, center=false);\n        \n        // Branches with flowers and leaves\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n            translate([0,0,15+i*5])\n                branch(i);\n        }\n    }\n}\n\nmodule branch(level) {\n    // Branch stem\n    rotate([30+level*10,0,0])\n    translate([0,0,0])\n    cylinder(h=20-level*3, r=2, center=false);\n    \n    // Sub-branches\n    for(j=[0:1]) {\n        rotate([0,0,j*180])\n        translate([0,0,8])\n        sub_branch(level);\n    }\n}\n\nmodule sub_branch(level) {\n    rotate([20,0,0])\n    cylinder(h=15-level*2, r=1.5, center=false);\n    \n    // Flowers at branch ends\n    for(k=[0:2]) {\n        rotate([0,0,k*120])\n        translate([0,0,13-level*2])\n        flower();\n    }\n    \n    // Leaves along branch\n    for(l=[0:1]) {\n        rotate([0,0,45+l*90])\n        translate([0,0,5+l*5])\n        leaf();\n    }\n}\n\nmodule flower() {\n    // Flower center\n    sphere(r=2.5);\n    \n    // Petals\n    for(p=[0:4]) {\n        rotate([0,0,p*72])\n        translate([0,7,0])\n        rotate([0,90,0])\n        scale([1,0.6,0.3])\n        sphere(r=flower_radius/2);\n    }\n}\n\nmodule leaf() {\n    // Leaf blade\n    rotate([0,30,0])\n    scale([1,0.5,0.2])\n    sphere(r=leaf_length/2);\n    \n    // Leaf stem\n    translate([0,-leaf_length/2,0])\n    rotate([90,0,0])\n    cylinder(h=3, r=0.5, center=false);\n}\n\n// Position plant for printing\ntranslate([0,0,pot_height])\nrotate([180,0,0])\nazalea_plant();",
    "renders": true
  },
  {
    "plant": "rhododendron",
    "openscad_code": "// Rhododendron Plant - Realistic Style, Medium Complexity\n// Overall height ≈ 100 mm, printable without supports\n\n// Parameters\nstem_d = 6;\nstem_h = 40;\nleaf_l = 22;\nleaf_w = 8;\nleaf_t = 1.5;\nflower_r = 4;\npetal_r = 2;\nflower_h = 3;\nwall = 2;\n\nmodule stem() {\n    // Main woody stem\n    cylinder(d = stem_d, h = stem_h, $fn = 16);\n    \n    // Secondary branches\n    for(i = [0:2]) {\n        rotate([0, 0, i*120])\n        translate([stem_d/2, 0, stem_h*0.6])\n        rotate([30, 0, 0])\n        cylinder(d = stem_d*0.7, h = stem_h*0.5, $fn = 12);\n    }\n}\n\nmodule leaf() {\n    // Elliptical leaf blade\n    scale([leaf_w/leaf_l, 1, leaf_t/leaf_l])\n    sphere(d = leaf_l, $fn = 32);\n    \n    // Central vein\n    translate([0, 0, leaf_t/2])\n    cube([leaf_l*0.9, leaf_t*0.5, leaf_t], center = true);\n}\n\nmodule leaf_cluster() {\n    // Cluster of leaves at branch ends\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([stem_d*0.8, 0, 0])\n        rotate([0, 30 + i*5, 0])\n        leaf();\n    }\n}\n\nmodule petal() {\n    // Individual flower petal\n    rotate([90, 0, 0])\n    scale([1, 1.5, 0.5])\n    sphere(d = petal_r*2, $fn = 16);\n}\n\nmodule flower() {\n    // Flower center\n    sphere(d = flower_r*0.5, $fn = 16);\n    \n    // Five petals around center\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([flower_r*0.7, 0, flower_h/2])\n        petal();\n    }\n}\n\nmodule flower_cluster() {\n    // Terminal flower cluster\n    for(i = [0:7]) {\n        rotate([0, 0, i*51.4])\n        translate([stem_d*1.2, 0, 0])\n        rotate([20 + i*3, 0, 0])\n        translate([0, 0, flower_h/2])\n        flower();\n    }\n}\n\n// Main assembly\nunion() {\n    // Base pot\n    difference() {\n        cylinder(d = 35, h = 20, $fn = 32);\n        translate([0, 0, wall])\n        cylinder(d = 35 - wall*2, h = 20, $fn = 32);\n    }\n    \n    // Plant structure\n    translate([0, 0, 20]) {\n        // Main stem\n        stem();\n        \n        // Leaves on main stem\n        for(i = [0:3]) {\n            rotate([0, 0, i*45])\n            translate([stem_d/2, 0, stem_h*0.2 + i*8])\n            rotate([0, -30, 0])\n            leaf();\n        }\n        \n        // Secondary branches with leaves and flowers\n        for(i = [0:2]) {\n            rotate([0, 0, i*120])\n            translate([stem_d/2, 0, stem_h*0.6])\n            rotate([30, 0, 0])\n            translate([0, 0, stem_h*0.5])\n            union() {\n                leaf_cluster();\n                translate([0, 0, stem_h*0.3])\n                flower_cluster();\n            }\n        }\n        \n        // Top flower cluster\n        translate([0, 0, stem_h])\n        flower_cluster();\n    }\n}",
    "renders": true
  },
  {
    "plant": "camellia",
    "openscad_code": "// Camellia Plant - Realistic Style, Medium Complexity\n// 3D printable camellia with proper structure and wall thickness\n\n// Parameters\n$fn = 32;\nstem_diameter = 6;\nstem_height = 40;\nleaf_length = 25;\nleaf_width = 12;\nleaf_thickness = 2;\nflower_diameter = 30;\npetal_count = 8;\nbud_count = 3;\n\n// Stem module\nmodule stem() {\n    // Main stem\n    cylinder(h=stem_height, d=stem_diameter, $fn=16);\n    \n    // Branching structure\n    for(i=[1:3]) {\n        rotate([0, 0, i*120]) {\n            translate([0, 0, stem_height/2]) {\n                rotate([30, 0, 0]) {\n                    cylinder(h=15, d1=stem_diameter, d2=stem_diameter*0.7, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Leaf module with realistic camellia shape\nmodule leaf() {\n    // Main leaf body - elliptical shape\n    scale([1, 0.6, 0.1]) {\n        sphere(d=leaf_length);\n    }\n    \n    // Leaf tip - pointed\n    translate([leaf_length/2 - 2, 0, 0]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=5, d1=leaf_width*0.3, d2=0, $fn=16);\n        }\n    }\n    \n    // Leaf stem connection\n    translate([-leaf_length/2 + 1, 0, -leaf_thickness]) {\n        cylinder(h=leaf_thickness*2, d=leaf_width*0.2, $fn=8);\n    }\n}\n\n// Flower petal module\nmodule petal() {\n    // Petal shape - rounded with slight curl\n    scale([1.2, 1, 0.3]) {\n        sphere(d=flower_diameter/petal_count, $fn=16);\n    }\n    \n    // Curl the petal edge\n    translate([0, flower_diameter/petal_count/2, 0]) {\n        rotate([10, 0, 0]) {\n            scale([1, 0.8, 0.2]) {\n                sphere(d=flower_diameter/petal_count*0.8, $fn=16);\n            }\n        }\n    }\n}\n\n// Complete flower module\nmodule flower() {\n    // Flower center - stamens\n    color(\"yellow\") {\n        translate([0, 0, -2]) {\n            cylinder(h=4, d=flower_diameter/4, $fn=16);\n        }\n    }\n    \n    // Petals arranged in layers\n    for(layer=[0:1]) {\n        for(i=[0:petal_count-1]) {\n            rotate([0, 0, i*360/petal_count + layer*180/petal_count]) {\n                translate([0, flower_diameter/3 - layer*3, layer*2]) {\n                    rotate([layer*15, 0, 0]) {\n                        petal();\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Bud module\nmodule bud() {\n    // Small unopened flower\n    scale([0.4, 0.4, 0.6]) {\n        flower();\n    }\n    \n    // Sepals\n    for(i=[0:4]) {\n        rotate([0, 0, i*72]) {\n            translate([0, flower_diameter/6, 0]) {\n                scale([0.3, 0.15, 0.1]) {\n                    rotate([30, 0, 0]) {\n                        sphere(d=flower_diameter/3, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assemble the plant\nunion() {\n    // Main stem\n    color(\"green\") {\n        stem();\n    }\n    \n    // Leaves at different heights\n    for(h=[15, 25, 35]) {\n        rotate([0, 0, h*12]) {\n            translate([stem_diameter/2, 0, h]) {\n                rotate([0, -30, 0]) {\n                    color(\"darkgreen\") {\n                        leaf();\n                    }\n                }\n            }\n        }\n    }\n    \n    // Main flower at top\n    translate([0, 0, stem_height + 5]) {\n        color(\"red\") {\n            flower();\n        }\n    }\n    \n    // Side buds\n    for(i=[1:bud_count]) {\n        angle = i*60 + 30;\n        translate([stem_diameter*cos(angle), stem_diameter*sin(angle), stem_height - 5]) {\n            rotate([0, 0, angle]) {\n                color(\"darkred\") {\n                    bud();\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "plant": "gardenia",
    "openscad_code": "// Gardenia Plant - Realistic Style, Medium Complexity\n// Overall height ~120mm, suitable for 3D printing\n\n// Stem module\nmodule stem() {\n    color(\"darkgreen\")\n    union() {\n        // Main stem\n        cylinder(h=40, d1=6, d2=4, $fn=12);\n        \n        // Side branches\n        for(i=[0:3]) {\n            rotate([0,0,i*90+45])\n            translate([0,2,30-i*5])\n            rotate([0,90,0])\n            cylinder(h=20, d1=3, d2=2, $fn=8);\n        }\n    }\n}\n\n// Leaf module\nmodule leaf(length=25) {\n    color(\"forestgreen\")\n    difference() {\n        // Leaf blade\n        scale([1,0.4,1])\n        rotate([90,0,0])\n        cylinder(h=length, d=length*0.6, $fn=20);\n        \n        // Leaf tip\n        translate([0,-length/2,0])\n        sphere(d=length*0.4, $fn=10);\n        \n        // Leaf veins (subtractive)\n        for(i=[-2:2]) {\n            rotate([0,0,i*15])\n            translate([0,0,0.5])\n            cube([length*0.8,0.5,1], center=true);\n        }\n    }\n}\n\n// Petal module\nmodule petal() {\n    color(\"ivory\")\n    intersection() {\n        // Basic petal shape\n        scale([1,0.6,1])\n        rotate([90,0,0])\n        sphere(d=12, $fn=20);\n        \n        // Elongated petal\n        translate([0,-3,0])\n        scale([1,1.5,1])\n        sphere(d=10, $fn=15);\n    }\n}\n\n// Flower module\nmodule flower() {\n    union() {\n        // Center of flower\n        translate([0,0,2])\n        color(\"goldenrod\")\n        cylinder(h=4, d=8, $fn=20);\n        \n        // Petals in spiral\n        for(i=[0:7]) {\n            rotate([0,0,i*45])\n            translate([8,0,2])\n            rotate([0,20,0])\n            petal();\n        }\n        \n        // Sepals\n        color(\"darkgreen\")\n        for(i=[0:4]) {\n            rotate([0,0,i*72])\n            translate([3,0,-1])\n            rotate([0,-20,0])\n            scale([0.8,0.3,0.8])\n            cylinder(h=8, d1=3, d2=1, $fn=8);\n        }\n    }\n}\n\n// Bud module\nmodule bud() {\n    color(\"limegreen\")\n    difference() {\n        sphere(d=8, $fn=15);\n        \n        // Sepals\n        for(i=[0:4]) {\n            rotate([0,0,i*72])\n            translate([0,0,-2])\n            rotate([0,-30,0])\n            scale([0.6,0.3,0.6])\n            cylinder(h=6, d1=2, d2=0.5, $fn=8);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base pot\n    color(\"saddlebrown\")\n    difference() {\n        cylinder(h=25, d1=40, d2=35, $fn=30);\n        translate([0,0,2])\n        cylinder(h=23, d1=36, d2=31, $fn=30);\n    }\n    \n    // Soil\n    color(\"saddlebrown\")\n    translate([0,0,23])\n    cylinder(h=5, d=36, $fn=30);\n    \n    // Main plant structure\n    translate([0,0,28])\n    union() {\n        stem();\n        \n        // Leaves along stem\n        for(i=[0:5]) {\n            rotate([0,0,i*60])\n            translate([6,0,10+i*5])\n            rotate([0,0,-30])\n            rotate([0,60,0])\n            leaf(20+i*3);\n        }\n        \n        // Flowers at branch tips\n        for(i=[0:3]) {\n            rotate([0,0,i*120])\n            translate([15,0,35-i*5])\n            flower();\n        }\n        \n        // Buds\n        for(i=[0:2]) {\n            rotate([0,0,i*180+60])\n            translate([12,0,30-i*3])\n            bud();\n        }\n    }\n}",
    "renders": true
  },
  {
    "plant": "jasmine",
    "openscad_code": "// Jasmine Plant - Realistic Style, Medium Complexity\n// Overall dimensions: ~100mm height, 80mm width\n\n// Main stem diameter\nstem_d = 4;\n\n// Leaf dimensions\nleaf_l = 20;\nleaf_w = 10;\nleaf_t = 1.5;\n\n// Flower dimensions\nflower_d = 12;\nflower_h = 8;\npetal_l = 6;\npetal_w = 3;\npetal_t = 1;\n\nmodule stem_segment(h, taper=1) {\n    cylinder(h=h, d1=stem_d, d2=stem_d*taper, $fn=8);\n}\n\nmodule leaf() {\n    // Main leaf blade\n    scale([1, leaf_w/leaf_l, leaf_t/leaf_l])\n    rotate([0, 90, 0])\n    scale([1, 0.3, 1])\n    sphere(leaf_l/2, $fn=20);\n    \n    // Leaf tip\n    translate([leaf_l/2, 0, 0])\n    scale([0.3, 0.3, 1])\n    sphere(2, $fn=8);\n}\n\nmodule flower() {\n    // Central part\n    color(\"yellow\")\n    translate([0, 0, flower_h/2])\n    sphere(flower_d/5, $fn=12);\n    \n    // Petals - 5 around the center\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([flower_d/3, 0, flower_h/2])\n        rotate([0, 30, 0])\n        scale([petal_l, petal_w, petal_t])\n        sphere(1, $fn=8);\n    }\n}\n\nmodule branch(level=0) {\n    // Main branch segment\n    stem_segment(20 - level*3);\n    \n    // Leaves\n    for(i=[0:2]) {\n        rotate([0, 0, i*120 + (level*30)])\n        translate([0, 0, 5 + i*5])\n        rotate([30 - level*10, 0, 0])\n        leaf();\n    }\n    \n    // Sub-branches\n    if(level < 2) {\n        // Left sub-branch\n        translate([0, 0, 15])\n        rotate([0, 0, -45])\n        branch(level + 1);\n        \n        // Right sub-branch\n        translate([0, 0, 15])\n        rotate([0, 0, 45])\n        branch(level + 1);\n    }\n    \n    // Flowers at branch tips\n    if(level >= 1) {\n        translate([0, 0, 20 - level*3])\n        color(\"white\")\n        flower();\n    }\n}\n\n// Base pot\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=20, d1=30, d2=25, $fn=20);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n        cylinder(h=22, d1=26, d2=21, $fn=20);\n    }\n    \n    // Soil surface\n    translate([0, 0, 19.5])\n    color(\"#4A3C28\")\n    cylinder(h=1, d=28, $fn=20);\n}\n\n// Main plant\nunion() {\n    // Pot\n    pot();\n    \n    // Main stem\n    translate([0, 0, 20])\n    stem_segment(25);\n    \n    // Branches\n    translate([0, 0, 40])\n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n        rotate([30, 0, 0])\n        branch();\n    }\n    \n    // Additional flowers\n    translate([0, 0, 50])\n    rotate([0, 0, 60])\n    rotate([45, 0, 0])\n    translate([0, 0, 15])\n    color(\"white\")\n    flower();\n    \n    translate([0, 0, 55])\n    rotate([0, 0, -60])\n    rotate([35, 0, 0])\n    translate([0, 0, 12])\n    color(\"white\")\n    flower();\n}",
    "renders": true
  },
  {
    "plant": "wisteria",
    "openscad_code": "// Wisteria Plant in Realistic Style - Medium Complexity\n// Height ~100mm, width ~80mm, depth ~60mm\n\n// Main parameters\nstem_diameter = 6;\nbranch_diameter = 3;\nleaf_length = 12;\nleaf_width = 4;\nflower_length = 25;\nflower_diameter = 3;\nwall_thickness = 2;\n\nmodule stem() {\n    cylinder(h = 40, d = stem_diameter, $fn = 12);\n}\n\nmodule branch(length, angle) {\n    rotate([0, angle, 0])\n    translate([0, 0, stem_diameter/2])\n    cylinder(h = length, d = branch_diameter, $fn = 8);\n}\n\nmodule compound_leaf(stem_len) {\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, 0, i*stem_len/5])\n        rotate([45, 0, 0])\n        scale([0.8, 0.3, 0.1])\n        sphere(d = leaf_length);\n    }\n}\n\nmodule leaf_stem() {\n    cylinder(h = 15, d = 1.5, $fn = 6);\n}\n\nmodule leaf_cluster() {\n    for(j = [0:2]) {\n        rotate([0, 0, j*120])\n        translate([0, 0, j*3])\n        union() {\n            leaf_stem();\n            translate([0, 0, 15])\n            compound_leaf(15);\n        }\n    }\n}\n\nmodule flower_bud() {\n    sphere(d = flower_diameter, $fn = 6);\n}\n\nmodule flower_cluster() {\n    for(k = [0:7]) {\n        rotate([0, 0, k*45])\n        translate([0, 0, k*2.5])\n        rotate([20, 0, 0])\n        union() {\n            cylinder(h = 2, d = 0.8, $fn = 6);\n            translate([0, 0, 2])\n            flower_bud();\n        }\n    }\n}\n\nmodule hanging_flower() {\n    rotate([90, 0, 0])\n    for(l = [0:5]) {\n        translate([0, 0, -l*4])\n        rotate([0, l*15, 0])\n        flower_cluster();\n    }\n}\n\nmodule main_trunk() {\n    union() {\n        // Base stem\n        stem();\n        \n        // Lower branches\n        translate([0, 0, 35])\n        branch(25, 30);\n        translate([0, 0, 30])\n        rotate([0, 0, 120])\n        branch(20, -25);\n        \n        // Upper branches\n        translate([0, 0, 25])\n        rotate([0, 0, 180])\n        branch(18, 20);\n        translate([0, 0, 20])\n        rotate([0, 0, 240])\n        branch(22, -35);\n    }\n}\n\nmodule leaves_on_branches() {\n    // Leaf clusters on branches\n    translate([12, 0, 50])\n    rotate([0, 0, 30])\n    leaf_cluster();\n    \n    translate([-8, 14, 45])\n    rotate([0, 0, 150])\n    leaf_cluster();\n    \n    translate([-10, -8, 40])\n    rotate([0, 0, 210])\n    leaf_cluster();\n}\n\nmodule flowers_on_branches() {\n    // Hanging flowers\n    translate([15, 0, 48])\n    hanging_flower();\n    \n    translate([-5, 13, 43])\n    rotate([0, 0, 120])\n    hanging_flower();\n    \n    translate([-12, -5, 38])\n    rotate([0, 0, 240])\n    hanging_flower();\n}\n\nmodule roots() {\n    difference() {\n        cylinder(h = 8, d = 12, $fn = 12);\n        translate([0, 0, -1])\n        cylinder(h = 10, d = 8, $fn = 12);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    translate([0, 0, -8])\n    roots();\n    \n    // Main structure\n    main_trunk();\n    \n    // Foliage\n    leaves_on_branches();\n    \n    // Flowers\n    flowers_on_branches();\n}",
    "renders": true
  },
  {
    "plant": "lilac",
    "openscad_code": "// Lilac Plant - Realistic Medium Complexity\n// 3D printable lilac with proper structure and proportions\n\n// Main parameters\nstem_height = 80;\nstem_radius = 3;\nbush_radius = 40;\nflower_cluster_radius = 8;\nleaf_length = 25;\nleaf_width = 15;\n\n// Stem module with branches\nmodule stem() {\n    // Main stem\n    cylinder(h=stem_height, r=stem_radius, $fn=8);\n    \n    // Branches\n    for(i=[1:3]) {\n        rotate([0, 0, i*120]) \n            translate([0, 0, stem_height*0.7]) {\n                rotate([45, 0, 0])\n                    cylinder(h=30, r=2, $fn=6);\n                translate([0, 0, 25])\n                    rotate([30, 0, 0])\n                        cylinder(h=20, r=1.5, $fn=6);\n            }\n    }\n}\n\n// Individual lilac flower (tiny trumpet shape)\nmodule flower() {\n    union() {\n        // Flower tube\n        cylinder(h=3, r1=1, r2=0.5, $fn=8);\n        // Petals\n        for(i=[0:72:359]) {\n            rotate([0, 0, i])\n                translate([0.8, 0, 1.5])\n                    scale([0.4, 0.8, 0.1])\n                        sphere(r=1, $fn=6);\n        }\n    }\n}\n\n// Flower cluster (conical shape like real lilacs)\nmodule flower_cluster(pos, angle, size) {\n    translate(pos)\n    rotate([angle, 0, 0]) {\n        // Central axis\n        cylinder(h=size*2, r=1, $fn=6);\n        \n        // Flowers arranged in spirals\n        for(i=[0:30:359]) {\n            rotate([0, 0, i])\n                for(j=[0.5:0.5:2]) {\n                    translate([j*size/3, 0, j*size])\n                        scale([size/8, size/8, size/8])\n                            flower();\n                }\n        }\n    }\n}\n\n// Leaf with central vein\nmodule leaf() {\n    difference() {\n        // Main leaf shape\n        scale([1, leaf_width/leaf_length, 0.2])\n            sphere(r=leaf_length/2, $fn=12);\n        \n        // Central vein indentation\n        translate([0, 0, -0.5])\n            scale([0.9, 0.1, 0.5])\n                sphere(r=leaf_length/2, $fn=12);\n    }\n}\n\n// Branch with leaves\nmodule leafy_branch(pos, angle) {\n    translate(pos)\n    rotate([angle, 0, 0]) {\n        // Stem\n        cylinder(h=leaf_length*1.2, r=1, $fn=6);\n        \n        // Leaves in pairs\n        for(i=[0:30:120]) {\n            rotate([0, 0, i]) {\n                translate([0, 3, leaf_length/2])\n                    rotate([90, 0, 30])\n                        leaf();\n                translate([0, -3, leaf_length/2])\n                    rotate([-90, 0, 30])\n                        mirror([0, 1, 0])\n                            leaf();\n            }\n        }\n    }\n}\n\n// Main plant assembly\nunion() {\n    // Base and roots\n    translate([0, 0, -5])\n        cylinder(h=5, r=stem_radius*1.5, $fn=8);\n    \n    // Main stem\n    stem();\n    \n    // Flower clusters on branches\n    flower_cluster([0, 0, stem_height*0.9], -20, flower_cluster_radius);\n    flower_cluster([12, 0, stem_height*0.8], -30, flower_cluster_radius*0.8);\n    flower_cluster([-10, 10, stem_height*0.85], -25, flower_cluster_radius*0.9);\n    \n    // Additional clusters on side branches\n    translate([0, 0, stem_height*0.7])\n        rotate([0, 0, 120])\n            translate([10, 0, 10])\n                flower_cluster([0, 0, 0], -20, flower_cluster_radius*0.7);\n    \n    // Leaves on main stem\n    leafy_branch([0, 0, stem_height*0.4], 10);\n    leafy_branch([0, 0, stem_height*0.6], -10);\n    rotate([0, 0, 120])\n        leafy_branch([0, 0, stem_height*0.5], 15);\n}",
    "renders": true
  },
  {
    "plant": "delphinium",
    "openscad_code": "// Delphinium plant – medium-complexity, realistic style\n// Designed for FDM printing; 2 mm walls, ~120 mm tall\n\n// overall scale\nplant_scale = 1.0;\n\n// stem parameters\nstem_h = 100 * plant_scale;\nstem_r = 2.5 * plant_scale;\n\n// leaf parameters\nleaf_l = 20 * plant_scale;\nleaf_w =  5 * plant_scale;\nleaf_t =  2 * plant_scale;\n\n// flower parameters\nfloret_r = 4 * plant_scale;\nfloret_h = 3 * plant_scale;\nflorets_per_spike = 10;\nspike_count = 5;\n\nmodule stem() {\n    // central hollow tube, 2 mm wall\n    difference() {\n        cylinder(h=stem_h, r=stem_r, $fn=20);\n        translate([0,0,1]) cylinder(h=stem_h-2, r=stem_r-2, $fn=20);\n    }\n}\n\nmodule leaf() {\n    // palmate leaf made from stretched spheres\n    union() {\n        // central lobe\n        scale([1, 0.15, 1])\n            rotate([90,0,0])\n                cylinder(h=leaf_l, r=leaf_w, $fn=20);\n\n        // side lobes\n        for (a=[-45:45:45])\n            translate([leaf_l*0.3*sin(a), 0, leaf_l*0.3*cos(a)])\n                rotate([90, 0, a])\n                    scale([0.7, 0.15, 1])\n                        cylinder(h=leaf_l*0.7, r=leaf_w*0.7, $fn=20);\n    }\n}\n\nmodule leaf_pair(height, angle) {\n    translate([0,0,height])\n        rotate([0,0,angle])\n            leaf();\n    mirror([0,1,0])\n        translate([0,0,height])\n            rotate([0,0,angle])\n                leaf();\n}\n\nmodule floret() {\n    // five-petal open cup\n    difference() {\n        sphere(r=floret_r, $fn=32);\n        translate([0,0,-floret_r*0.8])\n            cylinder(h=floret_r*1.6, r=floret_r*0.3, $fn=20);\n    }\n    // small center spur\n    translate([0,0,-floret_h])\n        rotate([-30,0,0])\n            cylinder(h=floret_r*0.6, r1=floret_r*0.4, r2=0, $fn=10);\n}\n\nmodule spike() {\n    // vertical raceme of florets\n    for (i=[0:1:florets_per_spike-1]) {\n        h = i * 6 * plant_scale;\n        rad = stem_r + i * 0.3 * plant_scale;\n        translate([rad*sin(i*30), rad*cos(i*30), stem_h - h])\n            rotate([0,0,i*30])\n                floret();\n    }\n}\n\n// assembly\nstem();\n\n// leaves in opposite pairs ascending the stem\nfor (i=[1:4]) {\n    leaf_pair(i*stem_h/5, i*45);\n}\n\n// multiple flowering spikes around apex\nfor (a=[0:72:360-1]) {\n    rotate([0,0,a])\n        translate([0,0,stem_h])\n            spike();\n}",
    "renders": true
  },
  {
    "plant": "snapdragon",
    "openscad_code": "// Snapdragon Plant - Realistic Style\n// Medium complexity model for 3D printing\n\n// Overall dimensions\nplant_height = 120;\nbase_radius = 25;\n\n// Stem parameters\nstem_height = 80;\nstem_radius = 3;\n\n// Leaf parameters\nleaf_length = 35;\nleaf_width = 8;\nleaf_thickness = 2;\n\n// Flower spike parameters\nspike_length = 40;\nspike_radius = 15;\nflower_count = 12;\n\n// Individual flower parameters\nflower_length = 18;\nflower_width = 8;\nflower_thickness = 3;\n\n// Petal parameters\nupper_lip_height = 7;\nlower_lip_height = 5;\nlip_thickness = 2;\n\nmodule stem() {\n    // Main stem with slight taper\n    cylinder(h=stem_height, r1=stem_radius, r2=stem_radius*0.8, $fn=8);\n}\n\nmodule leaf() {\n    // Single leaf with central vein\n    translate([0, 0, leaf_length/2]) {\n        difference() {\n            // Leaf blade\n            scale([1, 0.3, 1])\n                cylinder(h=leaf_length, r=leaf_width, $fn=3);\n            \n            // Central vein indentation\n            translate([0, 0, -1])\n                scale([0.8, 0.2, 1.1])\n                    cylinder(h=leaf_length*1.2, r=leaf_width*0.3, $fn=3);\n        }\n    }\n}\n\nmodule leaves() {\n    // Array of leaves along stem\n    for(i=[1:3]) {\n        rotate([0, 0, i*120]) {\n            translate([0, 0, i*20])\n                rotate([30, 0, 0])\n                    leaf();\n        }\n    }\n}\n\nmodule single_flower(pos) {\n    translate(pos) {\n        rotate([90, 0, 0]) {\n            // Flower base\n            cylinder(h=flower_length, r=flower_width/2, $fn=8);\n            \n            // Upper lip (2 petals fused)\n            translate([0, 0, flower_length-upper_lip_height])\n                scale([1.2, 0.8, 1])\n                    cylinder(h=upper_lip_height, r=flower_width/2, $fn=8);\n            \n            // Lower lip (3 petals fused)\n            translate([0, -flower_width/3, flower_length-lower_lip_height])\n                scale([1.3, 1, 1])\n                    cylinder(h=lower_lip_height, r=flower_width/2*1.2, $fn=8);\n            \n            // Side petals\n            for(side=[-1, 1]) {\n                translate([side*flower_width/2, 0, flower_length-upper_lip_height*0.7])\n                    rotate([0, side*20, 0])\n                        scale([0.5, 1, 0.8])\n                            cylinder(h=upper_lip_height*1.2, r=flower_width/3, $fn=6);\n            }\n        }\n    }\n}\n\nmodule flower_spike() {\n    // Create flower spike with individual flowers\n    for(i=[0:flower_count-1]) {\n        angle = i*30;\n        height = stem_height + (i*spike_length/flower_count);\n        radius = spike_radius * sin(i*180/flower_count);\n        \n        single_flower([\n            radius * cos(angle),\n            radius * sin(angle),\n            height\n        ]);\n    }\n}\n\nmodule base() {\n    // Pot base with drainage holes\n    difference() {\n        cylinder(h=15, r=base_radius, $fn=32);\n        \n        // Drainage holes\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([base_radius*0.7, 0, -1])\n                    cylinder(h=17, r=3, $fn=8);\n        }\n        \n        // Hollow center\n        translate([0, 0, 5])\n            cylinder(h=15, r=base_radius-3, $fn=32);\n    }\n}\n\nmodule soil() {\n    // Soil surface inside pot\n    translate([0, 0, 12])\n        cylinder(h=3, r=base_radius-3, $fn=32);\n}\n\n// Main assembly\ntranslate([0, 0, 15]) {\n    // Plant components\n    union() {\n        // Stem\n        stem();\n        \n        // Leaves\n        leaves();\n        \n        // Flower spike\n        flower_spike();\n    }\n}\n\n// Base and soil\nbase();\ntranslate([0, 0, 15]) soil();",
    "renders": true
  },
  {
    "plant": "cosmos",
    "openscad_code": "// Cosmos Plant - OpenSCAD\n// Realistic style, medium complexity\n// Overall height: ~120mm, printable without supports\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main parameters\nstem_height = 90;\nstem_diameter = 6;\nflower_diameter = 60;\nleaf_length = 40;\nleaf_width = 8;\npetal_count = 12;\n\nmodule cosmos_plant() {\n    // Stem\n    color(\"darkgreen\")\n    cylinder(h=stem_height, d=stem_diameter, center=false);\n\n    // Leaves along stem\n    for(i=[1:5]) {\n        translate([0, 0, i * stem_height/6])\n        rotate([0, 0, i * 60])\n        leaf();\n    }\n\n    // Flower head at top\n    translate([0, 0, stem_height])\n    rotate([0, 0, 0])\n    flower_head();\n}\n\nmodule leaf() {\n    // Leaf blade - simple elliptical shape\n    color(\"forestgreen\")\n    translate([stem_diameter/2 + leaf_width/2, 0, 0])\n    rotate([90, 0, 0])\n    scale([1, 0.3, 1])\n    cylinder(h=leaf_length, d=leaf_width, center=false);\n\n    // Leaf midrib\n    color(\"darkgreen\")\n    translate([stem_diameter/2 + leaf_width/3, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h=leaf_length * 0.9, d=1, center=false);\n}\n\nmodule petal() {\n    // Single petal - elongated oval\n    color(\"lightpink\")\n    scale([0.3, 1, 0.1])\n    sphere(d=flower_diameter/2);\n\n    // Petal detail lines\n    color(\"hotpink\")\n    translate([0, -flower_diameter/4, 0])\n    scale([0.05, 0.5, 0.05])\n    sphere(d=flower_diameter/2);\n}\n\nmodule flower_head() {\n    // Central disk\n    color(\"goldenrod\")\n    cylinder(h=8, d=15, center=false);\n\n    // Disk florets\n    for(i=[0:30]) {\n        translate([sin(i*12)*6, cos(i*12)*6, 4])\n        color(\"darkorange\")\n        sphere(d=2);\n    }\n\n    // Petals arranged radially\n    for(i=[0:petal_count-1]) {\n        rotate([0, 0, i * 360/petal_count])\n        translate([0, flower_diameter/3, 4])\n        petal();\n    }\n\n    // Underside of flower\n    color(\"yellowgreen\")\n    translate([0, 0, -4])\n    cylinder(h=8, d=20, center=false);\n}\n\n// Base for stability\nmodule base() {\n    color(\"brown\")\n    cylinder(h=5, d=30, center=false);\n}\n\n// Assembly\ntranslate([0, 0, 5])\ncosmos_plant();\n\nbase();",
    "renders": true
  },
  {
    "plant": "chrysanthemum",
    "openscad_code": "// Chrysanthemum Plant – Realistic, medium complexity\n// All dimensions in mm – overall height ≈ 110 mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule stem() {\n    // Main vertical stem\n    cylinder(h = 60, d1 = 6, d2 = 4, $fn = 16);\n}\n\nmodule leaf(length, width, angle) {\n    // Single serrated leaf\n    translate([0, 0, 0])\n    rotate([0, 0, angle])\n    linear_extrude(height = wall, center = true)\n    polygon(points = [\n        [0, 0],\n        [length * 0.15, -width/2],\n        [length * 0.5, -width * 0.9],\n        [length, -width/2],\n        [length * 0.85, 0],\n        [length, width/2],\n        [length * 0.5, width * 0.9],\n        [length * 0.15, width/2]\n    ]);\n}\n\nmodule leaves() {\n    // Attach leaves along the stem\n    for (i = [1:2:5]) {\n        translate([0, 0, i * 12])\n        rotate([0, 90, 0])\n        leaf(25, 10, 30 * (i % 2 ? 1 : -1));\n    }\n}\n\nmodule petal(length, width, rotZ, tilt) {\n    // Single spoon-shaped petal\n    translate([0, 0, 0])\n    rotate([tilt, 0, rotZ])\n    scale([1, width/length, 1])\n    cylinder(h = length, r1 = 0.1, r2 = 2.5, $fn = 12);\n}\n\nmodule flower_head(diam) {\n    // Central disk\n    cylinder(h = 4, d = diam, $fn = 48);\n\n    // Two layers of petals for realism\n    // Inner layer – shorter petals\n    for (a = [0:15:359]) {\n        rotate([0, 0, a])\n        translate([0, diam/2 - 2, 2])\n        petal(12, 4, 0, 25);\n    }\n\n    // Outer layer – longer petals\n    for (a = [7.5:15:359]) {\n        rotate([0, 0, a])\n        translate([0, diam/2 + 2, 1])\n        petal(18, 5, 0, 15);\n    }\n}\n\nmodule pot() {\n    // Simple tapered flower pot\n    difference() {\n        cylinder(h = 25, d1 = 38, d2 = 34, $fn = 48);\n        translate([0, 0, wall])\n        cylinder(h = 23, d1 = 34, d2 = 30, $fn = 48);\n    }\n}\n\nmodule soil_surface() {\n    // Top soil surface inside pot\n    translate([0, 0, 24])\n    cylinder(h = 1, d = 33, $fn = 48);\n}\n\n// Assembly\nunion() {\n    pot();\n    soil_surface();\n    translate([0, 0, 25]) {\n        stem();\n        leaves();\n        translate([0, 0, 60])\n        flower_head(35);\n    }\n}",
    "renders": true
  },
  {
    "plant": "aster",
    "openscad_code": "// Aster plant - realistic style, medium complexity\n// 3D printable, approx 100mm tall\n\n// Main parameters\nstem_h = 80;\nstem_r = 3;\nflower_r = 25;\npetal_l = 12;\npetal_w = 3;\nleaf_l = 30;\nleaf_w = 15;\n\n// Petal module - single daisy-like petal\nmodule petal(l, w, t) {\n    difference() {\n        scale([w, l, t]) sphere(1, $fn=8);\n        translate([0, -l/2, 0]) cube([w*2, l, t*2], center=true);\n    }\n}\n\n// Leaf module - lanceolate shape\nmodule leaf(l, w, t) {\n    difference() {\n        hull() {\n            translate([0, l/2, 0]) sphere(w/2, $fn=16);\n            translate([0, -l/2, 0]) sphere(w/4, $fn=16);\n        }\n        translate([0, 0, -t/2-0.1]) cube([w*2, l*2, t+0.2], center=true);\n    }\n}\n\n// Flower head with petals\nmodule flower(head_r, petal_l, petal_w) {\n    union() {\n        // Center disk\n        cylinder(h=4, r=head_r, $fn=32);\n        \n        // Petals around disk\n        for(i=[0:15]) {\n            rotate([0, 0, i*22.5]) \n                translate([0, head_r+petal_l/2-3, 2]) \n                    rotate([0, 10, 0]) \n                        petal(petal_l, petal_w, 1.5);\n        }\n        \n        // Disk florets - small cylinders\n        for(i=[0:23]) {\n            angle = i*15;\n            radius = head_r*0.8*sin(i*20);\n            rotate([0, 0, angle]) \n                translate([radius*cos(i*20), radius*sin(i*20), 4]) \n                    cylinder(h=0.5, r=0.5, $fn=8);\n        }\n    }\n}\n\n// Stem with leaves\nmodule stem(stem_h, stem_r) {\n    union() {\n        // Main stem\n        cylinder(h=stem_h, r=stem_r, $fn=16);\n        \n        // Leaves along stem\n        for(i=[0:4]) {\n            height = stem_h*0.2 + i*stem_h*0.2;\n            rotate([0, 0, i*45+30]) \n                translate([stem_r+1, 0, height]) \n                    rotate([90, 0, 0]) \n                        leaf(leaf_l, leaf_w, 1.5);\n        }\n        \n        // Leaf attachment nubs\n        for(i=[0:4]) {\n            height = stem_h*0.2 + i*stem_h*0.2;\n            rotate([0, 0, i*45+30]) \n                translate([stem_r, 0, height]) \n                    sphere(2.5, $fn=16);\n        }\n    }\n}\n\n// Base for stability\nmodule base() {\n    cylinder(h=5, r=15, $fn=32);\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Stem\n    translate([0, 0, 5]) \n        stem(stem_h, stem_r);\n    \n    // Flower at top\n    translate([0, 0, stem_h+5]) \n        flower(flower_r, petal_l, petal_w);\n}",
    "renders": true
  },
  {
    "plant": "phlox",
    "openscad_code": "// Phlox Plant - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Constants\nstem_height = 60;\nstem_diameter = 4;\nflower_cluster_radius = 25;\npetal_count = 5;\nflower_count = 7;\nleaf_length = 20;\nleaf_width = 8;\nleaf_thickness = 2;\n\n// Stem module\nmodule stem() {\n    // Main stem\n    cylinder(h=stem_height, d=stem_diameter, $fn=16);\n    \n    // Add slight texture with rings\n    for(i = [5:10:stem_height-5]) {\n        translate([0, 0, i])\n            cylinder(h=1, d=stem_diameter+1, $fn=16);\n    }\n}\n\n// Leaf module with realistic shape\nmodule leaf() {\n    // Main leaf blade\n    scale([1, leaf_width/leaf_length, 1])\n        difference() {\n            // Leaf shape using scaled spheres\n            scale([leaf_length, leaf_length, leaf_thickness])\n                sphere(d=leaf_length, $fn=32);\n            \n            // Cut bottom for flat attachment\n            translate([0, 0, -leaf_thickness])\n                cube([leaf_length*2, leaf_width*2, leaf_thickness*2], center=true);\n        }\n    \n    // Central vein\n    translate([0, 0, leaf_thickness/2])\n        scale([leaf_length*0.8, 0.5, 0.5])\n            cube([1, 1, 1], center=true);\n}\n\n// Petal module\nmodule petal(size) {\n    scale([size, size*1.5, size/3])\n        difference() {\n            // Basic petal shape\n            sphere(d=size*2, $fn=32);\n            \n            // Cut to create petal form\n            translate([0, -size, 0])\n                cube([size*4, size*4, size*4], center=true);\n            translate([0, 0, -size])\n                cube([size*4, size*4, size*4], center=true);\n        }\n}\n\n// Flower head module\nmodule flower_head(size) {\n    // Center disk\n    color(\"yellow\")\n    translate([0, 0, size/2])\n        cylinder(h=size/3, d=size/1.5, $fn=16);\n    \n    // Petals around center\n    color(\"magenta\")\n    for(i = [0:petal_count-1]) {\n        rotate([0, 0, i*360/petal_count])\n            translate([0, size*0.7, size/2])\n                rotate([90, 0, 0])\n                    petal(size/2);\n    }\n}\n\n// Flower cluster module\nmodule flower_cluster() {\n    // Main stem for cluster\n    translate([0, 0, stem_height])\n        cylinder(h=15, d=3, $fn=16);\n    \n    // Individual flowers in dome formation\n    for(i = [0:flower_count-1]) {\n        angle = i*360/flower_count;\n        height = stem_height + 5 + sin(i*45)*5;\n        radius = flower_cluster_radius * (0.7 + 0.3*sin(i*60));\n        \n        translate([radius*cos(angle), radius*sin(angle), height])\n            rotate([0, 0, angle])\n                flower_head(8);\n    }\n    \n    // Top flower\n    translate([0, 0, stem_height + 15])\n        flower_head(10);\n}\n\n// Leaves along stem\nmodule leaves() {\n    // Lower leaves\n    for(i = [0:2]) {\n        height = 10 + i*15;\n        rotate([0, 0, i*120])\n            translate([stem_diameter/2+2, 0, height])\n                rotate([0, 90, 0])\n                    leaf();\n    }\n    \n    // Upper smaller leaves\n    for(i = [0:1]) {\n        height = 30 + i*10;\n        rotate([0, 0, i*180+60])\n            scale(0.7)\n                translate([stem_diameter/2+1.5, 0, height])\n                    rotate([0, 90, 0])\n                        leaf();\n    }\n}\n\n// Base for stability\nmodule base() {\n    // Simple flat base\n    translate([0, 0, -2])\n        cylinder(h=2, d=20, $fn=32);\n}\n\n// Main assembly\nunion() {\n    base();\n    stem();\n    leaves();\n    flower_cluster();\n}",
    "renders": true
  },
  {
    "plant": "primrose",
    "openscad_code": "// Primrose Plant - Realistic Style, Medium Complexity\n// 3D printable primrose with proper structure and proportions\n\n$fn = 32;  // Smooth curves for printing\n\n// Main parameters\nstem_height = 35;\nflower_diameter = 25;\nleaf_length = 30;\npetal_thickness = 1.5;\n\nmodule stem() {\n    // Main stem with slight taper\n    translate([0, 0, 0])\n    cylinder(h=stem_height, r1=3, r2=2, center=false);\n    \n    // Secondary stem branch\n    translate([0, 2, stem_height-10])\n    rotate([0, 20, 0])\n    cylinder(h=15, r1=2, r2=1.5, center=false);\n}\n\nmodule leaf(base_angle=0, bend_angle=0) {\n    // Leaf blade - elliptical shape\n    translate([0, 0, 0])\n    rotate([0, base_angle, bend_angle])\n    scale([1, 0.6, 0.1])\n    sphere(d=leaf_length);\n    \n    // Leaf vein structure\n    for(i=[-2:2]) {\n        translate([i*3, 0, 1])\n        rotate([0, base_angle, bend_angle])\n        scale([0.1, 1, 0.1])\n        cylinder(h=leaf_length/2, r=0.5, center=true);\n    }\n}\n\nmodule petal() {\n    // Individual primrose petal - heart-shaped\n    rotate([0, 90, 0])\n    linear_extrude(height=petal_thickness)\n    union() {\n        circle(d=flower_diameter/3);\n        translate([0, -flower_diameter/6, 0])\n        circle(d=flower_diameter/3);\n    }\n}\n\nmodule flower() {\n    // Flower center - yellow eye\n    translate([0, 0, stem_height+5])\n    sphere(d=6);\n    \n    // Five petals in primrose arrangement\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, flower_diameter/2.5, stem_height+5])\n        petal();\n    }\n    \n    // Calyx (green base)\n    translate([0, 0, stem_height+2])\n    cylinder(h=5, r=flower_diameter/3, center=false);\n}\n\nmodule root_system() {\n    // Simple root structure for stability\n    for(angle=[0:120:359]) {\n        rotate([0, 0, angle])\n        translate([5, 0, -2])\n        cylinder(h=8, r=1.5, center=false);\n    }\n}\n\n// Main assembly\nunion() {\n    // Roots\n    root_system();\n    \n    // Stem system\n    stem();\n    \n    // Leaves - primrose has basal rosette\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([10, 0, 5])\n        rotate([0, -30, 0])\n        leaf(45, i*15);\n    }\n    \n    // Additional leaves up stem\n    translate([0, 3, 12])\n    rotate([0, -45, 30])\n    leaf(30, 0);\n    \n    translate([0, -3, 20])\n    rotate([0, -45, -30])\n    leaf(30, 0);\n    \n    // Flower head\n    flower();\n}",
    "renders": true
  },
  {
    "plant": "clematis",
    "openscad_code": "// Realistic Clematis Plant - Medium Complexity\n// Wall thickness: 2mm for all parts\n// Overall height: ~120mm\n\n$fn = 32;\n\n// Main stem module\nmodule stem(h, angle) {\n    color(\"darkgreen\")\n    rotate([0, 0, angle]) {\n        // Main stem cylinder\n        translate([0, 0, 0]) \n            cylinder(h = h, r1 = 3, r2 = 2);\n        \n        // Add texture lines\n        for(i = [0:30:h]) {\n            rotate([0, 0, i*3]) \n                translate([2.5, 0, i])\n                    cube([0.5, 0.5, 5]);\n        }\n    }\n}\n\n// Leaf module with 3 leaflets\nmodule leaf() {\n    color(\"forestgreen\") {\n        // Central leaflet\n        translate([0, 0, 0])\n            rotate([0, -20, 0])\n            scale([1, 0.6, 0.1])\n            sphere(r = 15);\n        \n        // Left leaflet\n        translate([-12, 0, 2])\n            rotate([0, -30, -30])\n            scale([0.8, 0.5, 0.1])\n            sphere(r = 12);\n        \n        // Right leaflet\n        translate([12, 0, 2])\n            rotate([0, -30, 30])\n            scale([0.8, 0.5, 0.1])\n            sphere(r = 12);\n        \n        // Petiole\n        translate([0, 0, -2])\n            cylinder(h = 8, r = 1);\n    }\n}\n\n// Flower module\nmodule flower() {\n    color(\"violet\") {\n        // Center stamens\n        translate([0, 0, 0])\n            cylinder(h = 8, r = 4);\n        \n        // Petals - 6 tepals\n        for(i = [0:60:359]) {\n            rotate([0, 0, i])\n            translate([0, 8, 0])\n            rotate([45, 0, 0])\n            scale([1, 1.2, 0.3])\n            sphere(r = 10);\n        }\n        \n        // Stem support\n        translate([0, 0, -2])\n            cylinder(h = 5, r = 2);\n    }\n}\n\n// Tendril module\nmodule tendril() {\n    color(\"darkgreen\") {\n        // Main tendril\n        for(i = [0:5:35]) {\n            rotate([0, 0, i*8])\n            translate([i*0.3, 0, i*0.3])\n                sphere(r = 1.2);\n        }\n    }\n}\n\n// Bud module\nmodule bud() {\n    color(\"lightgreen\") {\n        translate([0, 0, 0])\n            scale([1, 1, 1.5])\n            sphere(r = 5);\n        translate([0, 0, -3])\n            cylinder(h = 5, r = 2);\n    }\n}\n\n// Main plant assembly\nunion() {\n    // Ground base\n    color(\"brown\")\n    translate([0, 0, -5])\n        cylinder(h = 5, r = 20);\n    \n    // Main stem\n    stem(80, 0);\n    \n    // Side stems\n    for(h = [20:20:70]) {\n        translate([0, 0, h])\n            stem(40, 15 + h*2);\n        translate([0, 0, h])\n            stem(35, -15 - h*2);\n    }\n    \n    // Leaves along stems\n    for(h = [25:25:75]) {\n        translate([0, 0, h])\n        rotate([0, 0, h*3])\n        translate([0, 15, 0])\n            leaf();\n        \n        translate([0, 0, h+10])\n        rotate([0, 0, -h*3])\n        translate([0, -15, 0])\n            leaf();\n    }\n    \n    // Flowers\n    translate([0, 20, 90])\n        flower();\n    translate([15, 15, 85])\n        flower();\n    translate([-15, -15, 80])\n        flower();\n    translate([20, -10, 75])\n        flower();\n    \n    // Buds\n    translate([10, 25, 95])\n        bud();\n    translate([-10, 20, 88])\n        bud();\n    \n    // Tendrils\n    translate([5, 18, 65])\n        tendril();\n    translate([-8, -20, 70])\n        tendril();\n    translate([12, -15, 55])\n        tendrill();\n}",
    "renders": true
  },
  {
    "plant": "hellebore",
    "openscad_code": "// Hellebore plant - realistic style, medium complexity\n// Overall height ~120mm, printable without supports\n\n// Parameters\nstem_d = 4;          // Main stem diameter (mm)\nstem_h = 60;         // Main stem height\nleaf_l = 30;         // Leaf length\nleaf_w = 15;         // Leaf width\nleaf_t = 2;          // Leaf thickness\nflower_d = 40;       // Flower diameter\npetal_count = 5;     // Number of petals\npetal_l = 18;        // Petal length\npetal_w = 12;        // Petal width\ncenter_d = 8;        // Flower center diameter\n\n// Main stem\nmodule stem() {\n    cylinder(h=stem_h, d=stem_d, $fn=16);\n}\n\n// Single leaf with pointed tip\nmodule leaf() {\n    difference() {\n        // Main leaf shape\n        scale([1, 0.3, 1])\n            cylinder(h=leaf_l, d=leaf_w, $fn=3);\n        \n        // Cut bottom flat\n        translate([0, -leaf_w/2, -1])\n            cube([leaf_w*2, leaf_w, leaf_t+2], center=true);\n        \n        // Pointed tip\n        translate([0, leaf_l/2, 0])\n            rotate([90, 0, 0])\n                cylinder(h=leaf_w*0.8, d1=leaf_t*2, d2=0, $fn=8);\n    }\n}\n\n// Petal with cupped shape\nmodule petal() {\n    difference() {\n        // Main petal\n        scale([1, 0.7, 0.3])\n            sphere(d=petal_l, $fn=16);\n        \n        // Create cupped shape\n        translate([0, -petal_l/4, petal_l/4])\n            sphere(d=petal_l*1.2, $fn=16);\n    }\n}\n\n// Flower center with stamens\nmodule flower_center() {\n    union() {\n        // Main center\n        sphere(d=center_d, $fn=16);\n        \n        // Stamens\n        for(i = [0:15]) {\n            rotate([0, 0, i*22.5])\n                translate([center_d/2, 0, center_d/4])\n                    cylinder(h=3, d=0.5, $fn=4);\n        }\n    }\n}\n\n// Complete flower\nmodule flower() {\n    union() {\n        // Petals\n        for(i = [0:petal_count-1]) {\n            rotate([0, 0, i*(360/petal_count)])\n                translate([0, flower_d/2 - petal_l/2, 0])\n                    petal();\n        }\n        \n        // Center\n        translate([0, 0, petal_l/4])\n            flower_center();\n    }\n}\n\n// Leaf attachment point\nmodule leaf_joint() {\n    sphere(d=stem_d*1.2, $fn=12);\n}\n\n// Main plant assembly\nmodule hellebore() {\n    // Stem\n    translate([0, 0, 0])\n        stem();\n    \n    // Lower leaves\n    for(i = [0:2]) {\n        rotate([0, 0, i*120])\n            translate([0, 0, stem_h/3])\n                rotate([30, 0, 0])\n                    leaf_joint();\n    }\n    \n    // Upper leaves\n    for(i = [0:1]) {\n        rotate([0, 0, 45 + i*180])\n            translate([0, 0, stem_h*2/3])\n                rotate([15, 0, 0])\n                    leaf_joint();\n    }\n    \n    // Attach leaves\n    // Lower leaves\n    translate([0, 0, stem_h/3])\n        rotate([30, 0, 0])\n            leaf();\n    \n    translate([0, 0, stem_h/3])\n        rotate([30, 0, 120])\n            leaf();\n    \n    translate([0, 0, stem_h/3])\n        rotate([30, 0, 240])\n            leaf();\n    \n    // Upper leaves\n    translate([0, 0, stem_h*2/3])\n        rotate([15, 0, 45])\n            leaf();\n    \n    translate([0, 0, stem_h*2/3])\n        rotate([15, 0, 225])\n            leaf();\n    \n    // Flower at top\n    translate([0, 0, stem_h])\n        rotate([0, 0, 0])\n            flower();\n}\n\n// Render the plant\nhellebore();",
    "renders": true
  },
  {
    "plant": "anemone",
    "openscad_code": "// Sea Anemone - Realistic style, medium complexity\n// 3D printable with proper wall thickness and no overhangs\n\n$fn = 32; // Smooth curves\n\n// Main parameters\nbase_d = 40;  // Base diameter\nbase_h = 15;  // Base height\ntentacle_count = 32;\ntentacle_length = 35;\ntentacle_width = 2.5;\noral_disc_d = 35;\nwall_thickness = 2;\n\n// Base structure (foot/pedal disc)\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=base_h, d=base_d, center=false);\n        \n        // Hollow center for material saving\n        translate([0,0,wall_thickness])\n            cylinder(h=base_h-wall_thickness, d=base_d-wall_thickness*2, center=false);\n        \n        // Bottom cavity\n        translate([0,0,0])\n            cylinder(h=wall_thickness, d=base_d-wall_thickness*2, center=false);\n    }\n}\n\n// Individual tentacle with natural curve\nmodule tentacle(height, angle, curl_angle) {\n    translate([0,0,base_h])  // Start from top of base\n    rotate([0,0,angle]) {\n        // Main tentacle body\n        hull() {\n            // Base of tentacle\n            translate([oral_disc_d/2 - tentacle_width, 0, 0])\n                sphere(d=tentacle_width*1.5);\n            \n            // Tip of tentacle\n            translate([\n                (oral_disc_d/2 - tentacle_width) + sin(curl_angle) * height,\n                0,\n                cos(curl_angle) * height\n            ])\n                sphere(d=tentacle_width);\n        }\n        \n        // Add slight bulge in middle for realistic shape\n        translate([\n            (oral_disc_d/2 - tentacle_width) + sin(curl_angle/2) * height/2,\n            0,\n            cos(curl_angle/2) * height/2\n        ])\n            sphere(d=tentacle_width*1.3);\n    }\n}\n\n// Oral disc (mouth area)\nmodule oral_disc() {\n    translate([0,0,base_h])\n    difference() {\n        // Main disc\n        cylinder(h=wall_thickness*0.8, d=oral_disc_d, center=true);\n        \n        // Central mouth opening\n        translate([0,0,-wall_thickness])\n            cylinder(h=wall_thickness*2, d=oral_disc_d/3, center=true);\n    }\n}\n\n// Create ring of tentacles\nmodule tentacles() {\n    for(i = [0:tentacle_count-1]) {\n        // Two rings of tentacles - inner and outer\n        angle = i * 360/tentacle_count;\n        \n        // Outer ring - longer tentacles\n        if(i % 2 == 0) {\n            tentacle(tentacle_length, angle, 30);\n        } \n        // Inner ring - slightly shorter\n        else {\n            tentacle(tentacle_length * 0.8, angle + 360/(tentacle_count*2), 25);\n        }\n    }\n}\n\n// Base texture (suction cup like structures)\nmodule base_texture() {\n    translate([0,0,base_h-wall_thickness]) {\n        for(i = [0:12]) {\n            rotate([0,0,i*30]) {\n                for(j = [0:3]) {\n                    translate([base_d/4 + j*5, 0, 0])\n                        scale([1,0.7,0.3])\n                            sphere(d=2);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    base();\n    \n    // Base texture\n    base_texture();\n    \n    // Oral disc\n    oral_disc();\n    \n    // Tentacles\n    tentacles();\n}",
    "renders": true
  },
  {
    "plant": "ranunculus",
    "openscad_code": "// Ranunculus 3D Printable Model\n// Medium complexity realistic ranunculus flower\n\n// Main parameters\nflower_diameter = 80;\nstem_height = 100;\nstem_diameter = 6;\nleaf_length = 35;\nleaf_width = 15;\npetal_thickness = 1.5;\ncenter_height = 12;\n\n// Petal generation module\nmodule petal(length, width, thickness) {\n    difference() {\n        hull() {\n            // Main petal shape\n            translate([0, 0, -thickness/2])\n                scale([1, 1, 0.3])\n                sphere(d=width);\n            translate([0, length/2, 0])\n                scale([0.3, 1.5, 0.2])\n                sphere(d=width);\n            translate([0, length-2, 0])\n                scale([0.2, 0.2, 0.2])\n                sphere(d=width/2);\n        }\n        \n        // Add petal veining\n        for(i = [-1, 1]) {\n            translate([i*width/4, 0, -thickness])\n                cube([0.5, length, thickness*2], center=true);\n        }\n    }\n}\n\n// Layer of petals\nmodule petal_layer(diameter, count, scale_factor, height, angle) {\n    for(i = [0:count-1]) {\n        rotate([0, 0, i*360/count])\n        translate([diameter/2, 0, height])\n        rotate([0, angle, 0])\n        scale([scale_factor, scale_factor, scale_factor])\n        petal(12, 8, petal_thickness);\n    }\n}\n\n// Flower center with stamens\nmodule flower_center() {\n    // Central dome\n    translate([0, 0, center_height/2])\n        scale([1, 1, 0.6])\n        sphere(d=12);\n    \n    // Stamens\n    for(i = [0:35]) {\n        rotate([0, 0, i*10])\n        translate([4, 0, center_height-1])\n        rotate([90, 0, 0])\n        cylinder(h=4, d1=0.8, d2=0.3);\n    }\n}\n\n// Stem module\nmodule stem() {\n    // Main stem\n    cylinder(h=stem_height, d=stem_diameter, $fn=12);\n    \n    // Leaf attachment nodes\n    translate([0, 0, stem_height*0.3])\n    rotate([0, 90, 0])\n    cylinder(h=3, d=3, $fn=6);\n    \n    translate([0, 0, stem_height*0.6])\n    rotate([0, -90, 0])\n    cylinder(h=3, d=3, $fn=6);\n}\n\n// Leaf module\nmodule leaf() {\n    difference() {\n        // Main leaf shape\n        hull() {\n            translate([0, 0, 0])\n                scale([1, 3, 0.2])\n                sphere(d=leaf_width);\n            translate([0, leaf_length-5, 0])\n                scale([0.3, 0.3, 0.2])\n                sphere(d=leaf_width/3);\n        }\n        \n        // Leaf veins\n        translate([-leaf_width/2, 0, -0.5])\n            cube([leaf_width, leaf_length, 1]);\n        for(i = [-1, 0, 1]) {\n            translate([i*leaf_width/4, leaf_length/2, -0.5])\n                rotate([0, 0, i*15])\n                cube([1, leaf_length/2, 1]);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Stem\n    translate([0, 0, 0])\n        stem();\n    \n    // Leaves\n    translate([stem_diameter/2, 0, stem_height*0.3])\n        rotate([0, 90, 0])\n        rotate([0, 0, -30])\n        leaf();\n    \n    translate([-stem_diameter/2, 0, stem_height*0.6])\n        rotate([0, -90, 0])\n        rotate([0, 0, 30])\n        leaf();\n    \n    // Flower head\n    translate([0, 0, stem_height])\n    union() {\n        // Outer petals\n        petal_layer(flower_diameter*0.8, 12, 1.2, 0, 30);\n        petal_layer(flower_diameter*0.7, 10, 1.0, 3, 20);\n        petal_layer(flower_diameter*0.6, 8, 0.8, 6, 10);\n        \n        // Inner petals\n        petal_layer(flower_diameter*0.4, 6, 0.6, 9, 5);\n        \n        // Center\n        flower_center();\n    }\n}",
    "renders": true
  },
  {
    "plant": "freesia",
    "openscad_code": "// Freesia plant - realistic style, medium complexity\n// Designed for 3D printing with 2mm wall thickness\n\n$fn=50;  // Smooth curves\n\n// Overall scale\nscale_factor = 0.8;\n\n// Stem module\nmodule stem(height, thickness) {\n    color(\"darkgreen\")\n    union() {\n        // Main stem\n        cylinder(h=height, r=thickness, $fn=12);\n        \n        // Add small ridges along stem for realism\n        for(i=[0:5:height-1]) {\n            translate([0, 0, i])\n            cylinder(h=1, r=thickness*1.1, $fn=12);\n        }\n    }\n}\n\n// Leaf module - freesia has sword-like leaves\nmodule leaf(length, width, thickness) {\n    color(\"forestgreen\")\n    translate([0, 0, -length/2])\n    rotate([90, 0, 0])\n    difference() {\n        // Main leaf shape\n        scale([1, 0.2, 1])\n        cylinder(h=length, r=width, center=true, $fn=4);\n        \n        // Taper the end\n        translate([0, 0, length/4])\n        cube([width*2, width, length/2], center=true);\n    }\n}\n\n// Individual flower module\nmodule flower() {\n    // Flower size\n    corolla_length = 20;\n    corolla_width = 8;\n    \n    color(\"lightyellow\")\n    union() {\n        // Main corolla tube\n        rotate([90, 0, 0])\n        cylinder(h=corolla_length, r1=corolla_width/2, r2=corolla_width/4, $fn=12);\n        \n        // Six petal lobes - freesia has 6 petals\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n            translate([corolla_width/2, 0, -5])\n            rotate([0, 30, 0])\n            scale([1.2, 0.8, 0.3])\n            sphere(corolla_width/2);\n        }\n        \n        // Stamen\n        color(\"goldenrod\")\n        for(i=[0:2]) {\n            rotate([0, 0, i*120])\n            translate([corolla_width/3, 0, -corolla_length+2])\n            cylinder(h=5, r=0.5, $fn=6);\n        }\n    }\n}\n\n// Flower spike module - multiple flowers along a stem\nmodule flower_spike(height, flower_count) {\n    color(\"darkgreen\")\n    union() {\n        // Main spike stem\n        cylinder(h=height, r=2, $fn=12);\n        \n        // Attach flowers alternately\n        for(i=[0:flower_count-1]) {\n            angle = (i % 2 == 0) ? 45 : -45;\n            translate([0, 0, i*height/(flower_count+1)])\n            rotate([0, angle, 0])\n            translate([0, 0, -5])\n            flower();\n        }\n    }\n}\n\n// Main plant assembly\nmodule freesia_plant() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Base bulb-like structure\n        color(\"brown\")\n        translate([0, 0, -5])\n        sphere(r=15);\n        \n        // Main stem\n        stem(80, 3);\n        \n        // Side shoots with flower spikes\n        for(i=[0:2]) {\n            rotate([0, 0, i*120])\n            translate([0, 0, 25])\n            rotate([30, 0, 0])\n            flower_spike(30, 3);\n        }\n        \n        // Leaves - sword-like, emerging from base\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n            translate([10, 0, 0])\n            rotate([0, -10, 0])\n            leaf(60, 8, 2);\n        }\n        \n        // Top flower spike\n        translate([0, 0, 80])\n        flower_spike(20, 2);\n    }\n}\n\n// Generate the plant\nfreesia_plant();",
    "renders": true
  },
  {
    "plant": "gladiolus",
    "openscad_code": "// Gladiolus Flower - 3D Printable Model\n// Based on realistic proportions and structure\n\n$fn = 32;\nstem_height = 120;\nstem_diameter = 4;\nflower_count = 8;\nflower_spacing = 12;\nbulb_radius = 15;\nleaf_count = 4;\n\nmodule stem() {\n    // Main stem\n    color(\"darkgreen\")\n    union() {\n        cylinder(h=stem_height, d=stem_diameter, center=false);\n        \n        // Reinforcement rings every 20mm\n        for(i = [20:20:stem_height-10]) {\n            translate([0, 0, i])\n            cylinder(h=2, d=stem_diameter+2, center=false);\n        }\n    }\n}\n\nmodule leaf(height=60, angle=45, bend=20) {\n    // Single sword-shaped leaf\n    color(\"green\")\n    union() {\n        // Leaf base\n        translate([0, 0, 0])\n        rotate([0, bend, 0])\n        rotate([0, 0, angle])\n        linear_extrude(height=2, center=true, convexity=10)\n        polygon(points=[\n            [0, 0],\n            [5, -2],\n            [7, 0],\n            [5, 2],\n            [0, 0]\n        ]);\n        \n        // Leaf blade\n        translate([0, 0, 2])\n        rotate([0, bend, 0])\n        rotate([0, 0, angle])\n        cylinder(h=height, d1=3, d2=1, center=false);\n    }\n}\n\nmodule flower_bud(pos, size=1) {\n    // Individual flower bud\n    color(\"lightcoral\")\n    union() {\n        // Flower tube\n        translate(pos)\n        rotate([90, 0, 0])\n        cylinder(h=15*size, d1=4*size, d2=2*size, center=false);\n        \n        // Petals\n        for(a = [0:60:359]) {\n            translate(pos)\n            rotate([90, 0, a])\n            rotate([0, 30, 0])\n            scale([1*size, 0.5*size, 1*size])\n            sphere(d=6*size);\n        }\n        \n        // Stamen\n        color(\"yellow\")\n        translate(pos + [0, 0, 15*size])\n        sphere(d=2*size);\n    }\n}\n\nmodule bulb() {\n    // Corm at base\n    color(\"saddlebrown\")\n    union() {\n        sphere(d=bulb_radius*2);\n        \n        // Roots\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n            translate([0, bulb_radius, -bulb_radius])\n            rotate([90, 0, 0])\n            cylinder(h=20, d=2, center=false);\n        }\n    }\n}\n\nmodule gladiolus() {\n    // Assemble the complete plant\n    \n    // Base bulb\n    translate([0, 0, -bulb_radius])\n    bulb();\n    \n    // Stem\n    stem();\n    \n    // Leaves\n    for(i = [0:leaf_count-1]) {\n        angle = i * 90 + 45;\n        height = 50 - i*5;\n        translate([0, 0, 5 + i*20])\n        leaf(height=height, angle=angle, bend=15 + i*5);\n    }\n    \n    // Flowers along stem\n    for(i = [0:flower_count-1]) {\n        z_pos = stem_height - 20 - i * flower_spacing;\n        size = 1 - (i * 0.05);\n        \n        // Alternate left/right\n        x_pos = (i % 2) * 8 - 4;\n        y_pos = (i % 2 == 0) ? 4 : -4;\n        \n        translate([x_pos, y_pos, z_pos])\n        rotate([0, 0, (i % 2) * 45])\n        flower_bud([0, 0, 0], size);\n    }\n    \n    // Top flower\n    translate([0, 0, stem_height])\n    flower_bud([0, 0, 0], 1.2);\n}\n\n// Render the plant\ngladiolus();",
    "renders": true
  },
  {
    "plant": "stock",
    "openscad_code": "// Stock (Brassica) plant – medium-complexity realistic model\n// ~110 mm tall, printable without supports\n\n$fn = 36;  // smooth curves\n\n// overall scale\nplant_scale = 1;\n\n// stem parameters\nstem_h  = 40 * plant_scale;\nstem_r  = 3 * plant_scale;\n\n// leaf parameters\nleaf_L  = 25 * plant_scale;\nleaf_W  = 12 * plant_scale;\nleaf_T  = 2;            // wall-thickness for printability\n\n// cabbage head parameters\nhead_r = 22 * plant_scale;\n\n// root parameters\nroot_L = 10 * plant_scale;\nroot_r = 4 * plant_scale;\n\n/* ---------- main union ---------- */\nunion() {\n    /* ---------- roots ---------- */\n    translate([0, 0, -root_L]) roots();\n\n    /* ---------- stem ---------- */\n    color(\"darkolivegreen\")\n    cylinder(h = stem_h, r = stem_r, center = false);\n\n    /* ---------- leaves ---------- */\n    for (i = [0 : 1 : 4])\n        translate([0, 0, stem_h/5 * i + 5])\n            rotate([0, 0, i * 72 + (i % 2) * 25])\n                leaf(leaf_L - i*2.5, leaf_W - i*1.5);\n\n    /* ---------- head ---------- */\n    color(\"mediumseagreen\")\n    translate([0, 0, stem_h + head_r*0.75])\n        scale([1, 1, 0.85])\n            sphere(r = head_r);\n}\n\n/* ---------- modules ---------- */\n\nmodule leaf(L, W) {\n    difference() {\n        /* main blade */\n        translate([-L/2, 0, -leaf_T/2])\n            scale([1, 0.5, 1])\n                cube([L, W, leaf_T], center = true);\n\n        /* midrib groove on top */\n        translate([0, 0, leaf_T/2 - 0.1])\n            rotate([90, 0, 0])\n                cylinder(h = L, r = W/8, center = true);\n\n        /* petiole indent under leaf */\n        translate([-L/2 + 2, 0, -leaf_T/2])\n            rotate([90, 0, 0])\n                cylinder(h = 4, r = stem_r + 1, center = true);\n    }\n\n    /* tiny veins for realism */\n    for (v = [-1 : 0.5 : 1]) {\n        if (abs(v) > 0.1) {\n            rotate([0, 0, 45 * v])\n                translate([L/4, 0, leaf_T/2 - 0.05])\n                    scale([0.5, 0.05, 0.05])\n                        cube([L/2, 1, 1], center = true);\n        }\n    }\n}\n\nmodule roots() {\n    for (a = [0 : 45 : 359]) {\n        rotate([0, 0, a])\n            rotate([90 + (a % 15), 0, 0])\n                cylinder(h = root_L + (a % 5), r1 = root_r, r2 = root_r/3);\n    }\n}",
    "renders": true
  },
  {
    "plant": "verbena",
    "openscad_code": "// Verbena Plant - Realistic style, medium complexity\n// Overall height ~120mm, base diameter ~80mm\n\n// Base parameters\nbase_height = 15;\nbase_radius = 40;\nstem_height = 100;\nstem_radius = 3;\n\n// Leaf parameters\nleaf_length = 25;\nleaf_width = 12;\nleaf_thickness = 2;\n\n// Flower parameters\nflower_radius = 8;\nflower_height = 5;\npetal_count = 5;\n\n// Main stem module\nmodule stem(h, r) {\n    cylinder(h=h, r=r, $fn=16);\n}\n\n// Leaf module with serrated edges\nmodule leaf(length, width, thickness) {\n    difference() {\n        // Main leaf shape\n        scale([1, width/length, thickness/width])\n            sphere(length/2, $fn=8);\n        \n        // Serrated edges\n        for(i = [-2:1:2]) {\n            translate([length/3 * i, width/2 - 2, 0])\n                rotate([0, 0, 45])\n                cube([4, 4, thickness*2], center=true);\n        }\n    }\n}\n\n// Single flower cluster\nmodule flower_cluster(r, h) {\n    // Center of flower\n    color([0.8, 0.4, 0.6])\n    cylinder(h=h, r=r, $fn=24);\n    \n    // Petals around center\n    for(i = [0:petal_count-1]) {\n        rotate([0, 0, i * 360/petal_count])\n        translate([r * 0.8, 0, h/2])\n        rotate([90, 0, 0])\n        scale([0.6, 0.3, 1])\n        sphere(r * 0.7, $fn=8);\n    }\n}\n\n// Branch with leaves and flowers\nmodule branch(length, angle, level) {\n    if(level > 0) {\n        rotate([0, 0, angle])\n        translate([0, 0, stem_height * 0.3])\n        union() {\n            // Branch stem\n            cylinder(h=length, r=stem_radius * 0.7, $fn=8);\n            \n            // Leaves along branch\n            for(i = [0:1]) {\n                rotate([0, 0, i * 180 + 30])\n                translate([length * 0.3, 0, 0])\n                rotate([45, 0, 0])\n                leaf(leaf_length * 0.7, leaf_width * 0.7, leaf_thickness);\n            }\n            \n            // Flowers at branch tip\n            translate([0, 0, length])\n            flower_cluster(flower_radius * 0.8, flower_height);\n            \n            // Sub-branches\n            branch(length * 0.7, 25, level-1);\n            branch(length * 0.7, -25, level-1);\n        }\n    }\n}\n\n// Base planter\nmodule planter(height, radius) {\n    difference() {\n        // Outer pot\n        cylinder(h=height, r=radius, $fn=32);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n        cylinder(h=height+2, r=radius-2, $fn=32);\n        \n        // Drainage hole\n        translate([0, 0, height/2])\n        rotate([90, 0, 0])\n        cylinder(h=radius, r=2, $fn=16);\n    }\n}\n\n// Main plant assembly\nunion() {\n    // Base planter\n    color([0.6, 0.4, 0.2])\n    planter(base_height, base_radius);\n    \n    // Main stem\n    color([0.2, 0.5, 0.2])\n    translate([0, 0, base_height])\n    stem(stem_height, stem_radius);\n    \n    // Leaves on main stem\n    for(i = [1:5]) {\n        rotate([0, 0, i * 72])\n        translate([0, 0, base_height + stem_height * i/6])\n        rotate([30, 0, 0])\n        leaf(leaf_length, leaf_width, leaf_thickness);\n    }\n    \n    // Branches with flowers\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n        branch(stem_height * 0.4, 30, 2);\n    }\n    \n    // Top flower cluster\n    color([0.8, 0.4, 0.6])\n    translate([0, 0, base_height + stem_height])\n    flower_cluster(flower_radius * 1.2, flower_height);\n}",
    "renders": true
  },
  {
    "plant": "salvia",
    "openscad_code": "// Salvia plant - realistic medium complexity\n// Overall height ~120mm, printable without supports\n\n// Stem module\nmodule stem(h, r, taper=0.9) {\n    cylinder(h=h, r1=r, r2=r*taper, $fn=12);\n}\n\n// Leaf module - salvia characteristic ovate leaf with serrated edge representation\nmodule leaf(length, width, thickness=1.5) {\n    // Main leaf blade\n    scale([1, width/length, 1])\n    rotate([0,90,0])\n    hull() {\n        // Tip\n        translate([length-1,0,0]) sphere(r=1.2, $fn=8);\n        // Base\n        translate([0,0,0]) sphere(r=1.5, $fn=8);\n    }\n    \n    // Central vein\n    translate([0,0,-thickness/2-0.1])\n    scale([length*0.9, 0.3, thickness])\n    rotate([0,90,0])\n    sphere(r=1, $fn=6);\n}\n\n// Flower whorl module - salvia has square whorls\nmodule flower_whorl(diam, height) {\n    // Central stem part\n    cylinder(h=height, r=2.5, $fn=8);\n    \n    // Flowers around the whorl\n    for(i=[0:45:315]) {\n        rotate([0,0,i])\n        translate([diam/2, 0, height/2])\n        rotate([0,90,0])\n        scale([1,1,0.7])\n        sphere(r=3.5, $fn=16);\n    }\n}\n\n// Main plant assembly\nunion() {\n    // Main stem - 100mm tall with slight taper\n    stem(h=100, r=4);\n    \n    // First branch pair at 30mm\n    for(side=[0,180]) {\n        rotate([0,0,side])\n        translate([0,0,30])\n        rotate([30,0,0])\n        union() {\n            stem(h=40, r=2.5);\n            \n            // Leaves on first branch\n            translate([0,0,35])\n            rotate([0,0,30])\n            leaf(15, 8);\n            \n            translate([0,0,25])\n            rotate([0,0,-20])\n            leaf(12, 7);\n        }\n    }\n    \n    // Second branch pair at 55mm\n    for(side=[90,270]) {\n        rotate([0,0,side])\n        translate([0,0,55])\n        rotate([25,0,0])\n        union() {\n            stem(h=35, r=2.2);\n            \n            // Leaves on second branch\n            translate([0,0,30])\n            rotate([0,0,45])\n            leaf(13, 7);\n            \n            translate([0,0,20])\n            rotate([0,0,-35])\n            leaf(11, 6);\n        }\n    }\n    \n    // Third branch pair at 75mm\n    for(side=[45,225]) {\n        rotate([0,0,side])\n        translate([0,0,75])\n        rotate([20,0,0])\n        union() {\n            stem(h=25, r=2);\n            \n            // Leaves on third branch\n            translate([0,0,20])\n            rotate([0,0,20])\n            leaf(10, 6);\n        }\n    }\n    \n    // Leaves on main stem\n    for(i=[0:60:300]) {\n        rotate([0,0,i])\n        translate([0,4,15])\n        rotate([0,110,0])\n        leaf(20, 12);\n    }\n    \n    for(i=[30:60:270]) {\n        rotate([0,0,i])\n        translate([0,3.5,40])\n        rotate([0,105,0])\n        leaf(18, 11);\n    }\n    \n    // Flower spikes at top\n    translate([0,0,100])\n    union() {\n        // Main flower spike\n        stem(h=20, r=2);\n        \n        // Flower whorls\n        for(z=[0:5:20]) {\n            translate([0,0,z])\n            flower_whorl(12, 4);\n        }\n    }\n    \n    // Base/saucer for stability\n    translate([0,0,-3])\n    cylinder(h=3, r1=15, r2=12, $fn=32);\n}",
    "renders": true
  },
  {
    "plant": "lantana",
    "openscad_code": "// Lantana Plant - Realistic Style, Medium Complexity\n// Overall height ~120mm, printable without supports\n\n// Main stem parameters\nstem_height = 80;\nstem_radius = 3;\nstem_segments = 8;\n\n// Leaf parameters\nleaf_length = 25;\nleaf_width = 18;\nleaf_thickness = 2;\nleaves_per_cluster = 4;\nleaf_clusters = 6;\n\n// Flower cluster parameters\nflower_radius = 12;\nflower_height = 15;\nflowers_per_cluster = 20;\nflower_clusters = 5;\n\n// Helper module for rounded cylinder\nmodule rounded_cylinder(h, r1, r2, segs=8) {\n    cylinder(h=h, r1=r1, r2=r2, $fn=segs);\n}\n\n// Main stem with slight taper\nmodule stem() {\n    difference() {\n        union() {\n            // Main stem\n            rounded_cylinder(stem_height, stem_radius, stem_radius*0.8, stem_segments);\n            \n            // Branching nodes\n            for(i = [1:3]) {\n                translate([0, 0, i*20+10])\n                    sphere(r=stem_radius*1.3, $fn=8);\n            }\n        }\n    }\n}\n\n// Individual leaf with serrated edges\nmodule leaf() {\n    difference() {\n        // Main leaf shape\n        scale([1, 1, 0.1])\n            sphere(r=leaf_length/2);\n        \n        // Serrated edges\n        for(i = [0:5]) {\n            rotate([0, 0, i*30-75])\n                translate([leaf_length/2-3, 0, 0])\n                    cube([6, 2, leaf_thickness*2], center=true);\n        }\n        \n        // Leaf vein\n        rotate([0, 0, 90])\n            translate([0, -leaf_width/2-1, 0])\n                cube([leaf_width+2, 1, leaf_thickness*2], center=true);\n    }\n}\n\n// Flower cluster\nmodule flower_cluster() {\n    // Base of cluster\n    sphere(r=flower_radius/3, $fn=12);\n    \n    // Individual flowers\n    for(i = [0:flowers_per_cluster-1]) {\n        rotate([0, 0, i*360/flowers_per_cluster])\n            translate([flower_radius/2, 0, flower_height/4])\n                rotate([90, 0, 0])\n                    scale([0.4, 0.4, 1])\n                        cylinder(h=flower_height/2, r1=flower_radius/8, r2=0, $fn=8);\n    }\n}\n\n// Branch with leaves and flowers\nmodule branch(height, angle, rotation) {\n    rotate([0, 0, rotation])\n        rotate([angle, 0, 0])\n            translate([0, 0, height/2])\n                union() {\n                    // Branch\n                    rounded_cylinder(height, stem_radius*0.6, stem_radius*0.4, 6);\n                    \n                    // Leaves\n                    for(i = [0:leaf_clusters-1]) {\n                        rotate([0, 0, i*60])\n                            translate([height*0.3, 0, -height/2+i*height/leaf_clusters])\n                                rotate([0, 90, 0])\n                                    leaf();\n                    }\n                    \n                    // Flower cluster at tip\n                    translate([0, 0, height/2])\n                        flower_cluster();\n                }\n}\n\n// Main plant assembly\nunion() {\n    // Main stem\n    stem();\n    \n    // Branches\n    branch(30, 45, 0);\n    branch(25, -30, 60);\n    branch(35, 60, 120);\n    branch(20, -45, 180);\n    branch(28, 35, 240);\n    branch(32, -55, 300);\n    \n    // Base/root flare\n    translate([0, 0, -3])\n        cylinder(h=6, r1=stem_radius*2, r2=stem_radius, $fn=12);\n}\n\n// Print base for stability\ntranslate([0, 0, -6])\n    cylinder(h=3, r=15, $fn=32);",
    "renders": true
  },
  {
    "plant": "verbascum",
    "openscad_code": "// Verbascum (Mullein) Plant - Realistic Style, Medium Complexity\n// 3D printable (~100mm tall, 2mm walls)\n\n// Parameters\nstem_h = 80;\nstem_r = 3;\nbase_r = 15;\nleaf_l = 25;\nleaf_w = 8;\nflower_d = 12;\nflower_h = 8;\npetal_c = 5;  // petal count\n\n// Plant pot\nmodule pot() {\n    difference() {\n        cylinder(h = 20, r1 = base_r, r2 = base_r - 3, $fn = 32);\n        translate([0, 0, 2])\n            cylinder(h = 18, r1 = base_r - 2, r2 = base_r - 5, $fn = 32);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, 18])\n        cylinder(h = 2, r = base_r - 2, $fn = 32);\n}\n\n// Main stem\nmodule stem() {\n    color(\"darkolivegreen\")\n    translate([0, 0, 20])\n        cylinder(h = stem_h, r = stem_r, $fn = 16);\n}\n\n// Individual leaf\nmodule leaf(angle, height, twist) {\n    color(\"forestgreen\")\n    translate([0, 0, 20 + height])\n    rotate([0, 0, twist])\n    rotate([angle, 0, 0])\n    translate([0, leaf_l/2, 0])\n    scale([leaf_w, leaf_l, 2])\n        sphere(r = 1, $fn = 8);\n}\n\n// Leaves along stem\nmodule leaves() {\n    for(i = [0:2:10]) {\n        leaf(30 + i*3, i*6, i*45);\n        mirror([1, 0, 0])\n            leaf(30 + i*3, i*6, -i*45);\n    }\n}\n\n// Individual flower\nmodule flower() {\n    union() {\n        // Flower center\n        color(\"goldenrod\")\n        cylinder(h = flower_h, r = flower_d/4, $fn = 16);\n        \n        // Petals\n        color(\"sandybrown\")\n        for(i = [0:petal_c-1]) {\n            rotate([0, 0, i*360/petal_c])\n            translate([flower_d/3, 0, flower_h/2])\n            scale([flower_d/6, flower_d/20, flower_h/4])\n                sphere(r = 1, $fn = 8);\n        }\n    }\n}\n\n// Flower spike\nmodule flower_spike() {\n    color(\"yellow\")\n    for(i = [0:5]) {\n        translate([0, 0, 80 + i*4])\n            scale([1 - i*0.05, 1 - i*0.05, 1])\n                flower();\n    }\n}\n\n// Base assembly\nunion() {\n    pot();\n    soil();\n    stem();\n    leaves();\n    flower_spike();\n}",
    "renders": true
  },
  {
    "plant": "foxglove",
    "openscad_code": "// Foxglove Plant - Realistic Style, Medium Complexity\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 32;\n\n// Main dimensions (mm)\nstem_height = 80;\nstem_diameter = 4;\nflower_spike_height = 60;\nflower_count = 12;\nflower_spacing = 5;\nflower_length = 35;\nflower_diameter = 10;\nleaf_length = 30;\nleaf_width = 10;\nleaf_thickness = 2;\n\nmodule stem() {\n    // Main stem with slight taper\n    union() {\n        cylinder(h=stem_height, d1=stem_diameter, d2=stem_diameter*0.8, center=false);\n        \n        // Reinforcement rings every 20mm\n        for(i = [1:20:stem_height-10]) {\n            translate([0, 0, i])\n            cylinder(h=3, d=stem_diameter+1, center=false);\n        }\n    }\n}\n\nmodule leaf(position, angle, scale_factor=1) {\n    translate(position)\n    rotate([0, angle, 0])\n    scale([scale_factor, scale_factor, 1])\n    union() {\n        // Leaf blade\n        difference() {\n            hull() {\n                translate([-leaf_length/2, 0, 0])\n                sphere(d=leaf_width);\n                translate([leaf_length/2, 0, 0])\n                sphere(d=leaf_width/2);\n            }\n            \n            // Vein groove\n            translate([0, -leaf_width/2-1, -leaf_thickness/2])\n            cube([leaf_length, leaf_width+2, leaf_thickness+1], center=true);\n        }\n        \n        // Stem attachment\n        translate([-leaf_length/2-2, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=3, d=3, center=false);\n    }\n}\n\nmodule individual_flower(position, angle, openness=1) {\n    translate(position)\n    rotate([0, angle, 0])\n    union() {\n        // Flower tube\n        difference() {\n            cylinder(h=flower_length*openness, d=flower_diameter, center=false);\n            cylinder(h=flower_length*openness+1, d=flower_diameter-4, center=false);\n        }\n        \n        // Bell flare at opening\n        translate([0, 0, flower_length*openness])\n        scale([1, 1, 0.3])\n        sphere(d=flower_diameter+2);\n        \n        // Internal spots pattern\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n            translate([flower_diameter/2-2, 0, flower_length*openness*0.7])\n            sphere(d=1.5);\n        }\n    }\n}\n\nmodule flower_spike() {\n    translate([0, 0, stem_height])\n    union() {\n        // Central spike structure\n        cylinder(h=flower_spike_height, d=3, center=false);\n        \n        // Flowers arranged spirally\n        for(i = [0:flower_count-1]) {\n            angle = i * 137.5;  // Golden angle for natural spacing\n            height = i * flower_spacing;\n            openness = 1 - (i * 0.05);  // Flowers more open at bottom\n            \n            if(height < flower_spike_height-5) {\n                rotate([0, 0, angle])\n                translate([0, 3, height])\n                individual_flower([0, 0, 0], 15, openness);\n            }\n        }\n    }\n}\n\nmodule leaves_cluster() {\n    // Lower leaves\n    leaf([0, 0, 10], -30, 0.8);\n    leaf([0, 0, 20], -45, 1);\n    leaf([0, 0, 30], -60, 0.9);\n    \n    // Upper leaves smaller\n    leaf([0, 0, 40], -20, 0.7);\n    leaf([0, 0, 50], -35, 0.6);\n}\n\n// Assembly\nunion() {\n    stem();\n    flower_spike();\n    leaves_cluster();\n    \n    // Mirror leaves on opposite side for balance\n    mirror([0, 1, 0]) {\n        leaves_cluster();\n    }\n}",
    "renders": true
  },
  {
    "plant": "bleedingheart",
    "openscad_code": "// Bleeding Heart Plant (Dicentra spectabilis) - Realistic Medium Complexity\n$fn = 32;\n\n// Overall scale\nplant_scale = 1;\n\n// Stem parameters\nstem_height = 80 * plant_scale;\nstem_radius = 2 * plant_scale;\n\n// Leaf parameters\nleaf_length = 25 * plant_scale;\nleaf_width = 15 * plant_scale;\nleaf_thickness = 1.5 * plant_scale;\n\n// Flower parameters\nflower_scale = plant_scale;\nheart_width = 12 * flower_scale;\nheart_height = 15 * flower_scale;\nheart_depth = 8 * flower_scale;\ndrop_length = 8 * flower_scale;\ndrop_radius = 1.5 * flower_scale;\n\nmodule stem() {\n    // Main stem\n    cylinder(h=stem_height, r=stem_radius, center=false);\n    \n    // Stem branches\n    for (i = [1:3]) {\n        translate([0, 0, stem_height * 0.3 * i])\n        rotate([0, 90 - i * 15, 30 * i])\n        cylinder(h=stem_height * 0.4, r=stem_radius * 0.7, center=false);\n    }\n}\n\nmodule leaf() {\n    // Base leaf shape\n    difference() {\n        // Main leaf body - elongated heart shape\n        scale([1, 1.2, 0.3])\n        sphere(r=leaf_width/2);\n        \n        // Cut leaf in half for heart shape\n        translate([-leaf_width, 0, 0])\n        cube([leaf_width*2, leaf_width*2, leaf_thickness*2]);\n        \n        // Vein indentations\n        for (i = [0.2, 0.4, 0.6, 0.8]) {\n            translate([leaf_length * (i - 0.5), 0, leaf_thickness/2])\n            rotate([90, 0, 0])\n            cylinder(h=leaf_width * 0.9, r=leaf_thickness/4, center=true);\n        }\n    }\n}\n\nmodule flower_cluster() {\n    // Heart-shaped outer petals\n    difference() {\n        // Main heart shape\n        union() {\n            translate([heart_width/4, 0, 0])\n            sphere(r=heart_width/2);\n            \n            mirror([1, 0, 0])\n            translate([heart_width/4, 0, 0])\n            sphere(r=heart_width/2);\n        }\n        \n        // Inner cavity\n        scale([0.7, 0.7, 0.8])\n        union() {\n            translate([heart_width/4, 0, -heart_depth/4])\n            sphere(r=heart_width/2);\n            \n            mirror([1, 0, 0])\n            translate([heart_width/4, 0, -heart_depth/4])\n            sphere(r=heart_width/2);\n        }\n    }\n    \n    // Inner white drop/tear\n    translate([0, 0, -heart_depth/2 - drop_length/2])\n    cylinder(h=drop_length, r1=drop_radius, r2=drop_radius*0.5, center=true);\n}\n\n// Main plant assembly\nunion() {\n    // Stem structure\n    stem();\n    \n    // Leaves along stem\n    for (i = [1:4]) {\n        translate([0, 0, stem_height * 0.2 * i])\n        rotate([0, 90 - i * 20, 45 * i])\n        translate([stem_radius * 2, 0, 0])\n        leaf();\n        \n        translate([0, 0, stem_height * 0.2 * i])\n        rotate([0, 90 - i * 20, -45 * i])\n        translate([-stem_radius * 2, 0, 0])\n        leaf();\n    }\n    \n    // Flower clusters at branch ends\n    translate([0, 0, stem_height])\n    rotate([0, 15, 0])\n    flower_cluster();\n    \n    translate([stem_height * 0.35, 0, stem_height * 0.7])\n    rotate([0, 15, 30])\n    flower_cluster();\n    \n    translate([-stem_height * 0.35, 0, stem_height * 0.7])\n    rotate([0, 15, -30])\n    flower_cluster();\n    \n    translate([0, stem_height * 0.35, stem_height * 0.5])\n    rotate([15, 0, 45])\n    flower_cluster();\n}",
    "renders": true
  },
  {
    "plant": "impatiens",
    "openscad_code": "// Impatiens Plant - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\nmodule stem_segment(height, radius) {\n    cylinder(h=height, r=radius, $fn=8);\n}\n\nmodule leaf(length, width) {\n    difference() {\n        // Main leaf body - oval shape\n        scale([1, 0.6, 0.1]) sphere(r=length, $fn=16);\n        \n        // Leaf serrations - small notches along edges\n        for(i=[-3:3]) {\n            translate([i*length/7, width/2, 0.1])\n                rotate([0, 0, 45]) cube([2, 2, 2], center=true);\n            translate([i*length/7, -width/2, 0.1])\n                rotate([0, 0, 45]) cube([2, 2, 2], center=true);\n        }\n    }\n    \n    // Leaf vein\n    translate([0, 0, -0.5]) \n        cube([length*0.8, 0.5, 0.2], center=true);\n    \n    // Side veins\n    for(i=[-2:2]) {\n        if(i != 0) {\n            translate([i*length/4, 0, -0.5])\n                rotate([0, 0, atan2(i*length/4, width/2)])\n                cube([sqrt(pow(i*length/4, 2) + pow(width/2, 2))*0.8, 0.3, 0.2], center=true);\n        }\n    }\n}\n\nmodule flower(petal_count, size) {\n    // Flower center\n    translate([0, 0, 1])\n        sphere(r=2, $fn=12);\n    \n    // Petals\n    for(i=[0:petal_count-1]) {\n        rotate([0, 0, i*360/petal_count])\n            translate([0, 0, 0.5])\n                scale([1, 2, 0.3]) sphere(r=size, $fn=8);\n    }\n    \n    // Back spur (characteristic of impatiens)\n    rotate([30, 0, 0])\n        translate([0, -size*1.5, -size/2])\n            cylinder(h=size*2, r1=size/2, r2=size/4, $fn=8);\n}\n\nmodule main_stem() {\n    union() {\n        // Main vertical stem\n        translate([0, 0, 0])\n            stem_segment(40, 2);\n        \n        // First set of leaves\n        translate([0, 0, 10])\n            rotate([0, 45, 0])\n                leaf(15, 8);\n        translate([0, 0, 10])\n            rotate([0, -45, 180])\n                leaf(15, 8);\n        \n        // Second set of leaves\n        translate([0, 0, 20])\n            rotate([0, -45, 0])\n                leaf(12, 6);\n        translate([0, 0, 20])\n            rotate([0, 45, 180])\n                leaf(12, 6);\n        \n        // Third set of leaves\n        translate([0, 0, 30])\n            rotate([0, 30, 0])\n                leaf(10, 5);\n        translate([0, 0, 30])\n            rotate([0, -30, 180])\n                leaf(10, 5);\n        \n        // Flower stems\n        translate([0, 0, 35])\n            rotate([0, 0, 45])\n                stem_segment(8, 1);\n        translate([5.6, 5.6, 35])\n            flower(5, 3);\n            \n        translate([0, 0, 32])\n            rotate([0, 0, -30])\n                stem_segment(6, 1);\n        translate([-3, 5.2, 32])\n            flower(5, 2.5);\n            \n        translate([0, 0, 28])\n            rotate([0, 0, 150])\n                stem_segment(7, 1);\n        translate([-6.1, 3.5, 28])\n            flower(5, 2.8);\n    }\n}\n\n// Base pot with soil\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=15, r1=12, r2=10, $fn=32);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h=13, r1=10, r2=8, $fn=32);\n    }\n    \n    // Soil surface\n    translate([0, 0, 13])\n        cylinder(h=2, r=10, $fn=32);\n}\n\n// Assembly\ntranslate([0, 0, 15])\n    main_stem();\n    \ntranslate([0, 0, 0])\n    pot();",
    "renders": true
  },
  {
    "plant": "alyssum",
    "openscad_code": "// Alyssum plant module - realistic style, medium complexity\n// Overall height ~80mm, designed for FDM printing with 2mm walls\n\n// Parameters\nstem_height = 60;\nstem_radius = 2;\nflower_cluster_radius = 12;\nflower_radius = 3;\nleaf_length = 15;\nleaf_width = 3;\nnum_flowers = 30;\n\n// Main stem\nmodule stem() {\n    // Central stem\n    cylinder(h=stem_height, r=stem_radius, $fn=16);\n    \n    // Branching stems\n    for(i = [1:3]) {\n        rotate([0, 0, i * 120]) \n        translate([0, 0, stem_height * 0.3 + i * 8])\n        rotate([30 + i * 10, 0, 0])\n        cylinder(h=25 - i * 3, r=1.5, $fn=12);\n    }\n}\n\n// Single leaf with slight curvature\nmodule leaf() {\n    difference() {\n        // Main leaf body\n        scale([1, leaf_width/leaf_length, 0.3])\n        sphere(r=leaf_length, $fn=16);\n        \n        // Vein indentation\n        translate([0, 0, -leaf_width * 0.2])\n        scale([0.1, 1, 0.5])\n        sphere(r=leaf_length * 0.9, $fn=12);\n    }\n}\n\n// Cluster of small leaves\nmodule leaf_cluster(height) {\n    for(i = [1:5]) {\n        rotate([0, 0, i * 72])\n        translate([3, 0, height])\n        rotate([0, 20 + i * 5, 0])\n        leaf();\n    }\n}\n\n// Single alyssum flower (4-petaled)\nmodule flower() {\n    union() {\n        // Center\n        sphere(r=flower_radius * 0.5, $fn=12);\n        \n        // Four petals\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([flower_radius * 0.4, 0, 0])\n            scale([2, 1, 0.3])\n            sphere(r=flower_radius, $fn=12);\n        }\n    }\n}\n\n// Flower cluster at stem tip\nmodule flower_cluster() {\n    // Main cluster center\n    sphere(r=flower_cluster_radius * 0.3, $fn=20);\n    \n    // Randomly placed flowers\n    for(i = [1:num_flowers]) {\n        angle = i * 137.5;  // Golden angle\n        radius = flower_cluster_radius * sqrt(i/num_flowers);\n        \n        translate([\n            radius * cos(angle),\n            radius * sin(angle),\n            stem_height + 5\n        ])\n        rotate([90, 0, angle])\n        scale([0.7 + 0.3 * sin(i * 3), 0.7 + 0.3 * cos(i * 2), 1])\n        flower();\n    }\n}\n\n// Root system for stability\nmodule roots() {\n    for(i = [1:4]) {\n        rotate([0, 0, i * 90])\n        translate([i * 1.5 - 3, 0, -5])\n        rotate([30, 0, 0])\n        cylinder(h=8, r1=2, r2=0.5, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base pot (simplified)\n    cylinder(h=10, r1=15, r2=12, $fn=32);\n    \n    // Root system\n    roots();\n    \n    // Stem\n    translate([0, 0, 10])\n    stem();\n    \n    // Leaves along stem\n    for(i = [1:6]) {\n        rotate([0, 0, i * 60])\n        translate([0, 0, 10 + i * 8])\n        leaf_cluster(i * 0.5);\n    }\n    \n    // Flower cluster\n    flower_cluster();\n}",
    "renders": true
  },
  {
    "plant": "calendula",
    "openscad_code": "// Calendula Plant - Realistic Style\n// Features: stem, leaves, flower head with layered petals, center disc florets\n\n$fn = 32;\n\n// Main parameters\nstem_height = 80;\nstem_diameter = 4;\nleaf_length = 25;\nleaf_width = 8;\nflower_diameter = 35;\npetal_count = 16;\npetal_length = 12;\nwall_thickness = 2;\n\nmodule stem() {\n    // Main stem cylinder\n    cylinder(h=stem_height, d=stem_diameter, center=false);\n    \n    // Stem detail rings\n    for(i = [10:15:stem_height-20]) {\n        translate([0, 0, i])\n            cylinder(h=2, d=stem_diameter+1, center=false);\n    }\n}\n\nmodule leaf() {\n    // Leaf blade - elongated oval shape\n    scale([1, leaf_width/leaf_length, 0.3])\n        sphere(d=leaf_length);\n    \n    // Leaf vein detail\n    translate([0, 0, 1])\n        rotate([90, 0, 0])\n            cylinder(h=leaf_length-4, d=1, center=false);\n}\n\nmodule leaves() {\n    // Lower leaves\n    for(i = [0:30:2]) {\n        rotate([0, 0, i*120])\n            translate([stem_diameter/2 + 2, 0, 15 + i*10])\n                rotate([0, -30, 30])\n                    leaf();\n    }\n    \n    // Upper smaller leaves\n    for(i = [0:45:3]) {\n        rotate([0, 0, i*120 + 60])\n            translate([stem_diameter/2 + 1, 0, 50 + i*5])\n                scale([0.7, 0.7, 0.7])\n                    rotate([0, -20, 20])\n                        leaf();\n    }\n}\n\nmodule petal() {\n    // Single petal - elongated teardrop shape\n    union() {\n        // Main petal body\n        translate([0, 0, 1])\n            scale([1, 0.3, 0.15])\n                sphere(d=petal_length);\n        \n        // Petal tip detail\n        translate([petal_length/2 - 2, 0, 1])\n            scale([0.3, 0.3, 0.3])\n                sphere(d=4);\n    }\n}\n\nmodule disc_florets() {\n    // Central disc florets - small cylinders\n    for(i = [0:5:360]) {\n        for(r = [2:2:8]) {\n            rotate([0, 0, i])\n                translate([r, 0, 0])\n                    cylinder(h=2, d=1.5, center=false);\n        }\n    }\n    \n    // Central raised dome\n    translate([0, 0, 2])\n        sphere(d=6);\n}\n\nmodule flower_head() {\n    union() {\n        // Base receptacle\n        cylinder(h=3, d=flower_diameter/3, center=false);\n        \n        // Layered petals in two rings\n        for(i = [0:petal_count-1]) {\n            rotate([0, 0, i*(360/petal_count)])\n                translate([flower_diameter/4, 0, 3])\n                    rotate([15, 0, 0])\n                        petal();\n        }\n        \n        for(i = [0:petal_count-1]) {\n            rotate([0, 0, i*(360/petal_count) + (360/petal_count)/2])\n                translate([flower_diameter/3.5, 0, 3])\n                    rotate([25, 0, 0])\n                        scale([0.8, 0.8, 0.8])\n                            petal();\n        }\n        \n        // Central disc florets\n        translate([0, 0, 3])\n            disc_florets();\n    }\n}\n\n// Assembly\nunion() {\n    // Stem\n    translate([0, 0, 0])\n        stem();\n    \n    // Leaves\n    translate([0, 0, 0])\n        leaves();\n    \n    // Flower head\n    translate([0, 0, stem_height])\n        rotate([0, 0, 15])\n            flower_head();\n}",
    "renders": true
  },
  {
    "plant": "coreopsis",
    "openscad_code": "// Coreopsis Plant - Realistic Style, Medium Complexity\n// Overall height ~120mm, printable without supports\n\n// Stem parameters\nstem_height = 80;\nstem_radius = 3;\n\n// Leaf parameters\nleaf_length = 30;\nleaf_width = 8;\nleaf_thickness = 2;\n\n// Flower parameters\nflower_center_radius = 12;\npetal_count = 8;\npetal_length = 25;\npetal_width = 6;\npetal_thickness = 2;\n\n// Base parameters\nbase_radius = 25;\nbase_height = 5;\n\nmodule stem() {\n    // Main stem\n    cylinder(h=stem_height, r=stem_radius, $fn=16);\n    \n    // Stem branching nodes\n    for(i=[1:3]) {\n        translate([0, 0, stem_height * 0.2 * i])\n        rotate([0, 90, 0])\n        cylinder(h=stem_radius * 1.5, r=stem_radius * 0.8, $fn=8);\n    }\n}\n\nmodule leaf() {\n    // Tapered leaf shape\n    hull() {\n        translate([0, 0, leaf_thickness/2])\n        scale([1, 0.4, 1])\n        sphere(r=leaf_width/2, $fn=16);\n        \n        translate([leaf_length - leaf_width/2, 0, leaf_thickness/2])\n        sphere(r=leaf_width/4, $fn=16);\n    }\n    \n    // Leaf vein detail\n    translate([leaf_length/4, 0, leaf_thickness])\n    cube([leaf_length/2, 0.5, 0.5]);\n}\n\nmodule leaves() {\n    // Lower leaves\n    for(i=[1:2]) {\n        translate([0, 0, stem_height * 0.3 * i])\n        rotate([0, 45 + i * 15, 120 * i])\n        translate([stem_radius, 0, 0])\n        leaf();\n    }\n    \n    // Upper leaves\n    translate([0, 0, stem_height * 0.75])\n    rotate([0, 30, 45])\n    translate([stem_radius, 0, 0])\n    leaf();\n}\n\nmodule petal() {\n    // Single petal with slight curve\n    hull() {\n        translate([0, 0, petal_thickness/2])\n        sphere(r=petal_width/2, $fn=8);\n        \n        translate([petal_length - petal_width/4, 0, petal_thickness/2])\n        sphere(r=petal_width/4, $fn=8);\n    }\n    \n    // Petal texture lines\n    for(i=[-1:1]) {\n        translate([petal_length/2 + i * 3, 0, petal_thickness])\n        cube([petal_length/3, 0.5, 0.5]);\n    }\n}\n\nmodule flower() {\n    // Flower center (disk florets)\n    difference() {\n        sphere(r=flower_center_radius, $fn=32);\n        translate([0, 0, -flower_center_radius - 1])\n        sphere(r=flower_center_radius * 0.9, $fn=32);\n    }\n    \n    // Petals around center\n    for(i=[0:petal_count-1]) {\n        rotate([0, 0, i * 360/petal_count])\n        translate([flower_center_radius, 0, 0])\n        rotate([0, 10, 0])\n        petal();\n    }\n}\n\nmodule base() {\n    // Planting pot base\n    cylinder(h=base_height, r1=base_radius, r2=base_radius * 0.9, $fn=32);\n    \n    // Base detail ring\n    translate([0, 0, base_height/2])\n    difference() {\n        cylinder(h=base_height * 0.8, r=base_radius, $fn=32);\n        cylinder(h=base_height * 0.8, r=base_radius - 2, $fn=32);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    base();\n    \n    // Stem\n    translate([0, 0, base_height])\n    stem();\n    \n    // Leaves\n    translate([0, 0, base_height])\n    leaves();\n    \n    // Flower on top\n    translate([0, 0, base_height + stem_height])\n    rotate([0, 0, 15])\n    flower();\n}",
    "renders": true
  },
  {
    "plant": "echinacea",
    "openscad_code": "// Echinacea Coneflower - Realistic Medium Complexity\n// Overall height: 120mm\n\n$fn = 32;\n\n// Main stem\nmodule stem(h=80, r=4) {\n    color(\"darkgreen\")\n    cylinder(h=h, r1=r, r2=r*0.8, center=false);\n}\n\n// Leaf blade\nmodule leaf(len=30, wid=12) {\n    color(\"forestgreen\")\n    difference() {\n        // Main leaf shape\n        scale([1, 0.3, 1])\n        sphere(d=len);\n        \n        // Cut bottom half\n        translate([0, -len, 0])\n        cube([len*2, len*2, len], center=true);\n        \n        // Add center vein indentation\n        translate([0, 0, -1])\n        scale([0.1, 1, 0.1])\n        sphere(d=len);\n    }\n}\n\n// Single leaf with stem\nmodule leaf_with_stem() {\n    translate([0, 0, 10])\n    rotate([0, 0, 45])\n    union() {\n        // Petiole\n        color(\"darkgreen\")\n        rotate([0, 90, 0])\n        cylinder(h=15, r=1.2, center=false);\n        \n        // Blade\n        translate([7.5, 0, 0])\n        rotate([0, 0, -10])\n        leaf();\n    }\n}\n\n// Disk floret (center cone)\nmodule disk_floret(h=20, r=15) {\n    color(\"saddlebrown\")\n    difference() {\n        // Main cone\n        cylinder(h=h, r1=r, r2=r*0.6, center=false);\n        \n        // Add texture with small dimples\n        for(i=[0:15]) {\n            rotate([0, 0, i*360/16]) {\n                translate([r*0.7, 0, h*0.5])\n                rotate([90, 0, 0])\n                cylinder(h=4, r1=1.5, r2=0.5);\n            }\n        }\n    }\n}\n\n// Ray petal\nmodule petal(len=25, wid=8) {\n    color(\"magenta\")\n    difference() {\n        // Main petal shape\n        scale([1, 0.2, 1])\n        sphere(d=len);\n        \n        // Taper end\n        translate([len/2, 0, 0])\n        scale([0.3, 1, 0.3])\n        sphere(d=len);\n        \n        // Add slight curl\n        translate([0, 0, -2])\n        scale([1, 1, 0.1])\n        sphere(d=len);\n    }\n}\n\n// Flower head assembly\nmodule flower_head() {\n    union() {\n        // Center cone\n        disk_floret();\n        \n        // Ray petals around cone\n        for(i=[0:11]) {\n            rotate([0, 0, i*360/12]) {\n                translate([18, 0, 15])\n                rotate([0, -20, 0])\n                petal();\n            }\n        }\n    }\n}\n\n// Complete plant assembly\nmodule echinacea() {\n    // Base stem\n    translate([0, 0, 0])\n    stem();\n    \n    // Lower leaves\n    translate([0, 0, 20])\n    rotate([0, 0, -30])\n    leaf_with_stem();\n    \n    translate([0, 0, 35])\n    rotate([0, 0, 45])\n    mirror([1, 0, 0])\n    leaf_with_stem();\n    \n    // Upper leaves\n    translate([0, 0, 50])\n    rotate([0, 0, 120])\n    scale([0.8, 0.8, 0.8])\n    leaf_with_stem();\n    \n    // Flower at top\n    translate([0, 0, 80])\n    flower_head();\n}\n\n// Render the complete plant\nechinacea();",
    "renders": true
  },
  {
    "plant": "rudbeckia",
    "openscad_code": "// Rudbeckia (Black-eyed Susan) - realistic 3D printable plant\n// Overall height 120 mm, flower head diameter 60 mm\n\n$fn = 48;\n\n// Main stem\nmodule stem() {\n    // Central hollow tube for strength\n    difference() {\n        cylinder(h = 100, d = 6);\n        translate([0, 0, 2]) cylinder(h = 96, d = 2);\n    }\n    \n    // Small leaves along stem\n    for(i = [1:15:90]) {\n        rotate([0, 0, i*137.5]) translate([0, 3, i]) \n            rotate([0, 90, 0]) leaf();\n    }\n}\n\n// Individual leaf with realistic venation\nmodule leaf() {\n    difference() {\n        // Main leaf blade\n        scale([1, 2.5, 0.1]) sphere(d = 12);\n        \n        // Veins\n        for(j = [0.3:0.3:0.9]) {\n            translate([0, 0, 0.5]) \n                rotate([0, 0, j*60-30]) \n                scale([j, 2, 0.05]) \n                sphere(d = 8);\n        }\n    }\n}\n\n// Flower center (cone-shaped disc)\nmodule flower_center() {\n    // Central cone\n    difference() {\n        cylinder(h = 12, d1 = 20, d2 = 15);\n        // Seed pattern holes\n        for(a = [0:30:360]) {\n            for(r = [5:3:8]) {\n                rotate([0, 0, a]) translate([r, 0, 6]) \n                    rotate([90, 0, 0]) cylinder(h = 3, d = 1.5);\n            }\n        }\n    }\n    \n    // Rim detail\n    translate([0, 0, 12]) cylinder(h = 2, d = 22);\n}\n\n// Petal\nmodule petal() {\n    difference() {\n        // Main petal shape\n        scale([1, 2.5, 0.2]) sphere(d = 15);\n        \n        // Tapered tip\n        translate([0, 12, 0]) scale([0.7, 0.3, 1]) sphere(d = 8);\n        \n        // Vein detail\n        translate([0, 0, 0.2]) scale([0.1, 1.5, 0.1]) \n            cube([20, 20, 1], center = true);\n    }\n}\n\n// Complete flower head\nmodule flower() {\n    union() {\n        // Center disc\n        flower_center();\n        \n        // Ray petals\n        for(i = [0:15:360]) {\n            rotate([0, 0, i]) translate([0, 18, 12]) {\n                rotate([0, 10, 0]) petal();\n            }\n        }\n    }\n}\n\n// Base for stability\nmodule base() {\n    difference() {\n        cylinder(h = 5, d = 30);\n        cylinder(h = 3, d = 4);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    translate([0, 0, 0]) base();\n    \n    // Stem\n    translate([0, 0, 5]) stem();\n    \n    // Flower at top\n    translate([0, 0, 105]) flower();\n}",
    "renders": true
  },
  {
    "plant": "gaillardia",
    "openscad_code": "// Gaillardia flower – realistic, 3D-printable\n// Height ≈ 90 mm, 2 mm wall thickness throughout\n\n// Parameters\n$fn = 30;\nstem_d = 6;               // stem diameter\nstem_h = 40;              // stem height\nleaf_l = 25;              // leaf length\nleaf_w = 6;               // leaf width\nhead_r = 18;              // overall flower head radius\ndisc_r = 7;               // central disc radius\ndisc_h = 5;\nray_petals = 14;          // number of ray petals\nray_l = 12;               // ray petal length\nray_w = 3.5;              // ray petal width\nray_t = 1.5;              // ray petal thickness\ncenter_petals = 60;       // small central florets\ncenter_h = 4;\n\nmodule stem() {\n    translate([0, 0, stem_h/2])\n        cylinder(d = stem_d, h = stem_h, center = true);\n}\n\nmodule leaf() {\n    hull() {\n        translate([-leaf_l/2, 0, 0])\n            sphere(d = leaf_w);\n        translate([ leaf_l/2, 0, 0])\n            sphere(d = leaf_w*0.7);\n    }\n}\n\nmodule leaves() {\n    for(i=[0:1]) {\n        angle = i*120 + 30;\n        rotate([0, 0, angle])\n            translate([stem_d/2 + 1, 0, stem_h*0.35])\n                rotate([90, 0, 0])\n                    leaf();\n    }\n}\n\nmodule ray_petal() {\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                sphere(d = ray_w);\n            translate([ray_l, 0, 0])\n                sphere(d = ray_w*0.6);\n        }\n        // remove inner material to keep 2 mm walls\n        translate([0, 0, -ray_t/2 - 0.1])\n            cube([ray_l + 2, ray_w - 3, ray_t + 0.2], center = true);\n    }\n}\n\nmodule ray_ring() {\n    for(i=[0:ray_petals-1]) {\n        rotate([0, 0, i*360/ray_petals])\n            translate([head_r - ray_l/2, 0, 0])\n                rotate([90, 0, 0])\n                    scale([1, 1, 0.6])\n                        ray_petal();\n    }\n}\n\nmodule central_florets() {\n    for(i=[0:center_petals-1]) {\n        a = i*137.5; // golden angle\n        r = sqrt(i/center_petals) * disc_r * 0.9;\n        translate([r*cos(a), r*sin(a), 0])\n            cylinder(d1 = 2, d2 = 1.2, h = center_h);\n    }\n}\n\nmodule disc() {\n    difference() {\n        cylinder(r = disc_r, h = disc_h, $fn = 50);\n        translate([0, 0, -0.1])\n            cylinder(r = disc_r - 2, h = disc_h + 0.2, $fn = 50);\n    }\n}\n\nmodule flower_head() {\n    translate([0, 0, stem_h + disc_h/2 - 1])\n        union() {\n            disc();\n            central_florets();\n            ray_ring();\n        }\n}\n\n// Main model\nunion() {\n    stem();\n    leaves();\n    flower_head();\n}",
    "renders": true
  },
  {
    "plant": "helenium",
    "openscad_code": "// Helenium Plant - Realistic Style, Medium Complexity\n// Overall height: ~120mm, suitable for 3D printing\n\n$fn = 32;\n\n// Main stem thickness for 3D printing\nstem_d = 6;\nwall_thickness = 2;\n\nmodule helenium_plant() {\n    // Central stem\n    color(\"darkolivegreen\") \n    translate([0,0,0]) \n    cylinder(h=100, d=stem_d, center=false);\n\n    // Leaves along stem\n    for(i=[1:20:80]) {\n        translate([0,0,i]) \n        rotate([0,0,i*30]) \n        helenium_leaf();\n    }\n\n    // Flower head cluster\n    translate([0,0,100]) \n    rotate([0,0,0]) \n    helenium_flower();\n}\n\nmodule helenium_leaf() {\n    // Single leaf with proper proportions\n    translate([0,0,0])\n    rotate([0,90,0])\n    scale([1, 0.6, 1])\n    difference() {\n        // Main leaf blade\n        union() {\n            // Central vein\n            translate([0,0,0])\n            cylinder(h=35, d=wall_thickness+1, center=false);\n            \n            // Leaf blade\n            translate([0,0,10])\n            scale([1, 0.3, 1])\n            sphere(d=20);\n            \n            translate([0,0,25])\n            scale([0.8, 0.3, 0.8])\n            sphere(d=15);\n        }\n        \n        // Cutouts for realistic leaf shape\n        translate([0,2,15])\n        rotate([0,90,0])\n        cylinder(h=30, d=3, center=true);\n        \n        translate([0,-2,20])\n        rotate([0,90,0])\n        cylinder(h=25, d=2.5, center=true);\n    }\n}\n\nmodule helenium_flower() {\n    // Flower head with central disk and petals\n    color(\"goldenrod\") {\n        // Central disk\n        translate([0,0,-3])\n        cylinder(h=6, d=15, center=false);\n        \n        // Disk surface texture\n        for(a=[0:30:330]) {\n            translate([0,0,3])\n            rotate([0,0,a])\n            translate([4,0,0])\n            sphere(d=2.5);\n        }\n    }\n    \n    // Petals around disk\n    color(\"orangered\") {\n        for(angle=[0:15:345]) {\n            rotate([0,0,angle])\n            translate([7,-1,2])\n            rotate([0,90,0])\n            scale([1, 0.3, 0.1])\n            cylinder(h=20, d=5, center=false);\n        }\n    }\n    \n    // Additional petal layer for fullness\n    color(\"darkorange\") {\n        for(angle=[7.5:15:352.5]) {\n            rotate([0,0,angle])\n            translate([6,-0.8,2.5])\n            rotate([0,90,0])\n            scale([0.8, 0.25, 0.08])\n            cylinder(h=18, d=4, center=false);\n        }\n    }\n}\n\n// Assemble the plant\nhelenium_plant();",
    "renders": true
  },
  {
    "plant": "achillea",
    "openscad_code": "// Achillea (Yarrow) Plant - Realistic Style, Medium Complexity\n// Overall height ~110mm, suitable for 3D printing\n\n// Stem parameters\nstem_height = 80;\nstem_radius = 2;\nstem_segments = 16;\n\n// Leaf parameters\nleaf_length = 20;\nleaf_width = 4;\nleaf_thickness = 1.5;\nnum_leaf_pairs = 4;\n\n// Flower head parameters\nhead_radius = 15;\nhead_height = 8;\nnum_florets = 30;\nfloret_radius = 1.5;\nfloret_height = 3;\n\n// Root ball parameters\nroot_radius = 12;\nroot_height = 15;\n\n// Stem module with slight taper\nmodule stem() {\n    union() {\n        // Main stem\n        cylinder(h=stem_height, r1=stem_radius, r2=stem_radius*0.8, $fn=stem_segments);\n        \n        // Add slight texture rings\n        for(i = [1:5:stem_height-5]) {\n            translate([0, 0, i])\n                cylinder(h=1, r=stem_radius*1.1, $fn=stem_segments);\n        }\n    }\n}\n\n// Individual leaf module - deeply divided, feathery appearance\nmodule leaf() {\n    linear_extrude(height=leaf_thickness, center=true)\n    union() {\n        // Main leaf shape\n        scale([1, 0.3, 1])\n            circle(r=leaf_length/2, $fn=20);\n            \n        // Add divisions for realistic feathery look\n        for(i = [0:30:150]) {\n            rotate(i)\n                translate([leaf_length/3, 0, 0])\n                    scale([0.6, 0.2, 1])\n                        circle(r=leaf_length/4, $fn=12);\n        }\n        \n        for(i = [0:30:-150]) {\n            rotate(i)\n                translate([leaf_length/3, 0, 0])\n                    scale([0.6, 0.2, 1])\n                        circle(r=leaf_length/4, $fn=12);\n        }\n    }\n}\n\n// Leaf pair arrangement along stem\nmodule leaf_pairs() {\n    for(i = [1:num_leaf_pairs]) {\n        height = (stem_height/num_leaf_pairs) * i;\n        angle = i * 45;\n        \n        translate([0, 0, height]) {\n            rotate([0, 0, angle]) {\n                // First leaf\n                rotate([0, 90, -30])\n                    translate([stem_radius + leaf_length/2, 0, 0])\n                        leaf();\n                \n                // Opposite leaf\n                rotate([0, 90, 30])\n                    translate([-stem_radius - leaf_length/2, 0, 0])\n                        leaf();\n            }\n        }\n    }\n}\n\n// Individual floret (small flower)\nmodule floret() {\n    // Simple disk floret\n    cylinder(h=floret_height, r=floret_radius, $fn=8);\n}\n\n// Flower head - composite of many florets\nmodule flower_head() {\n    union() {\n        // Base disk\n        cylinder(h=head_height, r=head_radius, $fn=32);\n        \n        // Arrangement of florets\n        for(i = [0:360/num_florets:360]) {\n            for(r = [head_radius*0.2:head_radius*0.2:head_radius*0.8]) {\n                angle = i + (r*10);\n                x = r * cos(angle);\n                y = r * sin(angle);\n                \n                translate([x, y, head_height])\n                    floret();\n            }\n        }\n        \n        // Central florets\n        for(i = [0:60:360]) {\n            rotate([0, 0, i])\n                translate([head_radius*0.5, 0, head_height])\n                    floret();\n        }\n    }\n}\n\n// Root ball for stability\nmodule root_ball() {\n    difference() {\n        // Main root mass\n        sphere(r=root_radius, $fn=32);\n        \n        // Add root-like texture\n        for(i = [0:45:360]) {\n            rotate([0, 0, i])\n                translate([root_radius*0.7, 0, -root_height/2])\n                    scale([0.3, 0.3, 1])\n                        cylinder(h=root_height*2, r=root_radius*0.4, $fn=8);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Root ball at base\n    translate([0, 0, -root_height/2])\n        root_ball();\n    \n    // Stem\n    translate([0, 0, root_height/2])\n        stem();\n    \n    // Leaves along stem\n    translate([0, 0, root_height/2])\n        leaf_pairs();\n    \n    // Flower head at top\n    translate([0, 0, root_height/2 + stem_height])\n        flower_head();\n}",
    "renders": true
  },
  {
    "plant": "dahlia",
    "openscad_code": "// Dahlia plant - realistic style, medium complexity\n// Size: 100mm height, 80mm diameter flower head\n\n$fn = 24;  // Smooth curves for 3D printing\n\n// Overall scale factor\nscale_factor = 1;\n\n// Main stem\nmodule stem() {\n    translate([0, 0, -50]) {\n        // Main stem cylinder\n        cylinder(h = 50, r1 = 4, r2 = 3, center = false);\n        \n        // Stem texture with small bumps\n        for(i = [0:5:50]) {\n            rotate([0, 0, i * 15]) {\n                translate([3.5, 0, i]) {\n                    sphere(d = 1);\n                }\n            }\n        }\n    }\n}\n\n// Individual petal with slight curve\nmodule petal(length, width, height) {\n    // Petal base\n    translate([0, -width/2, 0]) {\n        // Main petal body - elongated ellipsoid\n        scale([length, width, height]) {\n            sphere(d = 1);\n        }\n        \n        // Petal tip - more pointed\n        translate([length * 0.8, 0, 0]) {\n            scale([length * 0.3, width * 0.7, height * 0.8]) {\n                rotate([0, 0, -90]) {\n                    cylinder(h = width, r1 = 0, r2 = width/2, center = true);\n                }\n            }\n        }\n    }\n}\n\n// Flower head - multiple layers of petals\nmodule flower_head() {\n    // Central disk - textured\n    translate([0, 0, 45]) {\n        // Disk base\n        cylinder(h = 8, r = 15, center = true);\n        \n        // Disk florets texture\n        for(i = [0:15:359]) {\n            rotate([0, 0, i]) {\n                translate([10, 0, 4]) {\n                    cylinder(h = 2, r = 1.5);\n                }\n            }\n        }\n        \n        // Petal layers\n        // Inner layer - more upright\n        for(i = [0:30:359]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, 4]) {\n                    rotate([0, -20, 0]) {\n                        petal(15, 3, 1.5);\n                    }\n                }\n            }\n        }\n        \n        // Middle layer - spreading\n        for(i = [0:15:359]) {\n            rotate([0, 0, i + 7.5]) {\n                translate([0, 0, 2]) {\n                    rotate([0, -45, 0]) {\n                        petal(25, 4, 2);\n                    }\n                }\n            }\n        }\n        \n        // Outer layer - flat\n        for(i = [0:12:359]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, 0]) {\n                    rotate([0, -75, 0]) {\n                        petal(35, 5, 2.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Leaves with serrated edges\nmodule leaf() {\n    // Main leaf blade\n    translate([0, 0, 0]) {\n        scale([1, 0.3, 0.05]) {\n            sphere(d = 20);\n        }\n        \n        // Leaf veins\n        for(i = [-0.8:0.2:0.8]) {\n            translate([i * 15, 0, 0.5]) {\n                scale([0.05, 0.05, 1]) {\n                    sphere(d = 20);\n                }\n            }\n        }\n    }\n    \n    // Petiole (leaf stem)\n    translate([-10, 0, 0]) {\n        rotate([0, 0, 30]) {\n            scale([0.2, 0.2, 1]) {\n                cylinder(h = 8, r = 2);\n            }\n        }\n    }\n}\n\n// Main plant assembly\nmodule dahlia_plant() {\n    // Stem\n    stem();\n    \n    // Flower head\n    flower_head();\n    \n    // Leaves on stem\n    translate([0, 0, 15]) {\n        rotate([0, 0, 120]) {\n            rotate([0, -30, 0]) {\n                leaf();\n            }\n        }\n    }\n    \n    translate([0, 0, 25]) {\n        rotate([0, 0, -60]) {\n            rotate([0, -30, 0]) {\n                leaf();\n            }\n        }\n    }\n    \n    translate([0, 0, 35]) {\n        rotate([0, 0, 180]) {\n            rotate([0, -30, 0]) {\n                leaf();\n            }\n        }\n    }\n}\n\n// Generate the complete plant\nscale([scale_factor, scale_factor, scale_factor]) {\n    dahlia_plant();\n}",
    "renders": true
  },
  {
    "plant": "buddleia",
    "openscad_code": "// Buddleia (Butterfly Bush) - 3D printable OpenSCAD model\n// Total height ~120mm, suitable for medium complexity realistic style\n\nmodule buddleia() {\n    // Main stem\n    color(\"saddlebrown\")\n    translate([0, 0, 0])\n    cylinder(h = 80, d1 = 6, d2 = 4, $fn = 12);\n\n    // First level branches\n    for (i = [0:120:360]) {\n        rotate([0, 0, i])\n        translate([0, 0, 60])\n        rotate([30, 0, 0])\n        color(\"saddlebrown\")\n        cylinder(h = 35, d1 = 3.5, d2 = 2.5, $fn = 8);\n    }\n\n    // Second level branches\n    for (i = [0:60:360]) {\n        rotate([0, 0, i])\n        translate([0, 0, 75])\n        rotate([25, 0, 0])\n        color(\"saddlebrown\")\n        cylinder(h = 25, d1 = 2.5, d2 = 1.5, $fn = 6);\n    }\n\n    // Leaves\n    module leaf() {\n        difference() {\n            hull() {\n                translate([-8, -2, 0])\n                sphere(d = 2, $fn = 8);\n                translate([8, 2, 0])\n                sphere(d = 2, $fn = 8);\n            }\n            translate([0, 0, -1])\n            cube([20, 4, 2], center = true);\n        }\n    }\n\n    // Add leaves along branches\n    for (i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([5, 0, 35])\n        rotate([0, 10, 0])\n        color(\"darkgreen\")\n        scale([0.7, 0.7, 0.7])\n        leaf();\n    }\n\n    // Flower clusters\n    module flower_cluster() {\n        for (i = [0:15:165]) {\n            rotate([0, 0, i])\n            translate([0, 0, 0])\n            rotate([0, 15, 0])\n            color(\"mediumpurple\")\n            sphere(d = 3, $fn = 8);\n        }\n    }\n\n    // Main flower panicles\n    for (i = [0:90:270]) {\n        rotate([0, 0, i])\n        translate([0, 0, 85])\n        rotate([20, 0, 0])\n        color(\"slateblue\")\n        cylinder(h = 25, d = 8, $fn = 8);\n        \n        // Individual flower clusters on panicles\n        for (j = [0:5:20]) {\n            rotate([0, 0, j * 10])\n            translate([0, 0, j])\n            color(\"purple\")\n            scale([0.8, 0.8, 0.8])\n            flower_cluster();\n        }\n    }\n\n    // Secondary flower clusters\n    for (i = [0:120:360]) {\n        rotate([0, 0, i])\n        translate([0, 0, 65])\n        rotate([25, 0, 0])\n        color(\"mediumorchid\")\n        cylinder(h = 15, d = 6, $fn = 6);\n        \n        for (j = [0:3:12]) {\n            rotate([0, 0, j * 15])\n            translate([0, 0, j])\n            color(\"violet\")\n            scale([0.6, 0.6, 0.6])\n            flower_cluster();\n        }\n    }\n\n    // Base support for 3D printing\n    color(\"darkgreen\")\n    translate([0, 0, -2])\n    cylinder(h = 2, d = 12, $fn = 16);\n}\n\n// Render the complete plant\nbuddleia();",
    "renders": true
  },
  {
    "plant": "lavender",
    "openscad_code": "// Lavender plant in realistic style, medium complexity\n// 3D printable, ~80mm tall, 2mm wall thickness\n\nmodule stem(h=40, r=1.5) {\n    // Main stem with slight taper\n    cylinder(h=h, r1=r, r2=r*0.8, $fn=8);\n}\n\nmodule leaf(l=15, w=3, t=2) {\n    // Simple elongated leaf shape\n    difference() {\n        scale([1, 0.3, 1])\n            rotate([90, 0, 0])\n                cylinder(h=l, r=w, $fn=4);\n        translate([0, -w-1, l/2])\n            cube([w*2, w*2, l+1], center=true);\n    }\n}\n\nmodule flower_spike(h=25, r=3, density=12) {\n    // Lavender flower spike with individual buds\n    union() {\n        // Central spike\n        cylinder(h=h, r=r*0.3, $fn=6);\n        \n        // Flower buds arranged in spiral\n        for(i=[0:density-1]) {\n            angle = i * 137.5;  // Golden angle for natural spacing\n            height = i * (h/density);\n            bud_r = r * (1 - height/h * 0.5);  // Taper towards top\n            \n            translate([0, 0, height])\n                rotate([0, 0, angle])\n                    translate([bud_r, 0, 0])\n                        sphere(r=1.2, $fn=6);\n        }\n    }\n}\n\nmodule lavender_plant() {\n    // Base pot\n    difference() {\n        cylinder(h=15, r=15, $fn=32);\n        translate([0, 0, 2])\n            cylinder(h=14, r=13, $fn=32);\n    }\n    \n    // Soil surface\n    translate([0, 0, 13])\n        sphere(r=14.5, $fn=32);\n    \n    // Main stems (3 main branches)\n    translate([0, 0, 15]) {\n        for(i=[0:2]) {\n            rotate([0, 0, i*120])\n                translate([5, 0, 0])\n                    rotate([10 + i*5, 0, 0])\n                        stem(h=35 + i*5);\n        }\n        \n        // Secondary stems\n        for(j=[0:4]) {\n            angle = j * 72;\n            rotate([0, 0, angle])\n                translate([3, 0, 8])\n                    rotate([30 - j*3, 0, 0])\n                        stem(h=20 + j*2, r=1);\n        }\n    }\n    \n    // Leaves along stems\n    for(i=[0:5]) {\n        height = 20 + i*3;\n        rotate([0, 0, i*60])\n            translate([0, 0, height])\n                rotate([0, 90, -20])\n                    leaf(l=12 - i*0.5, w=2.5);\n    }\n    \n    // Flower spikes\n    translate([0, 0, 15]) {\n        // Main spikes\n        for(i=[0:2]) {\n            rotate([0, 0, i*120])\n                translate([5, 0, 35 + i*5])\n                    rotate([0, 0, 0])\n                        flower_spike(h=25 - i*2, r=4);\n        }\n        \n        // Secondary spikes\n        for(j=[0:4]) {\n            angle = j * 72;\n            rotate([0, 0, angle])\n                translate([3, 0, 8 + 20 + j*2])\n                    rotate([0, 0, 0])\n                        flower_spike(h=15 - j, r=2.5);\n        }\n    }\n}\n\n// Generate the complete plant\nlavender_plant();",
    "renders": true
  },
  {
    "plant": "rosemary",
    "openscad_code": "// Rosemary Plant - Realistic Style, Medium Complexity\n// Characteristic needle-like leaves on woody stems\n\n// Parameters\nstem_height = 40;\nstem_diameter = 4;\nleaf_length = 12;\nleaf_width = 1.5;\nleaf_thickness = 0.8;\nnum_stems = 5;\nnum_leaf_clusters = 8;\npot_height = 20;\npot_diameter = 35;\nwall_thickness = 2;\n\n// Main module\nmodule rosemary_plant() {\n    union() {\n        // Pot\n        translate([0, 0, 0]) \n            pot();\n        \n        // Main stems emerging from pot\n        for(i = [0:num_stems-1]) {\n            rotate([0, 0, i * 360/num_stems + 15])\n            translate([pot_diameter/4 * cos(i * 72), pot_diameter/4 * sin(i * 72), pot_height])\n                stem(stem_height - i*3, stem_diameter - i*0.3);\n        }\n    }\n}\n\n// Pot module\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_height, d=pot_diameter, $fn=32);\n        // Inner hollow\n        translate([0, 0, wall_thickness])\n            cylinder(h=pot_height, d=pot_diameter-wall_thickness*2, $fn=32);\n        // Bottom\n        translate([0, 0, 0])\n            cube([pot_diameter, pot_diameter, wall_thickness], center=true);\n    }\n}\n\n// Stem module with leaves\nmodule stem(height, diameter) {\n    // Main stem cylinder\n    cylinder(h=height, d=diameter, $fn=8);\n    \n    // Branching sub-stems\n    for(j = [1:3]) {\n        translate([0, 0, height * j/4])\n        rotate([90 - j*15, 0, j*45])\n        cylinder(h=height/2, d=diameter*0.7, $fn=6);\n    }\n    \n    // Leaf clusters along stem\n    for(k = [1:num_leaf_clusters]) {\n        translate([0, 0, height * k/num_leaf_clusters])\n        rotate([0, 0, k * 137.5]) // Golden angle for natural distribution\n        leaf_cluster();\n    }\n}\n\n// Leaf cluster module\nmodule leaf_cluster() {\n    // Small twig\n    rotate([90, 0, 0])\n    cylinder(h=leaf_length/3, d=leaf_width/2, $fn=4);\n    \n    // Individual leaves radiating from twig\n    for(a = [0:3]) {\n        rotate([0, a*90, 0])\n        translate([0, 0, leaf_length/6])\n            single_leaf();\n    }\n}\n\n// Single rosemary leaf\nmodule single_leaf() {\n    // Tapered leaf shape\n    hull() {\n        translate([0, 0, 0])\n            sphere(d=leaf_width, $fn=8);\n        translate([0, 0, leaf_length])\n            scale([0.3, 0.3, 1])\n                sphere(d=leaf_width, $fn=8);\n    }\n    \n    // Leaf vein detail\n    translate([0, -leaf_thickness/2, leaf_length/2])\n        cube([leaf_thickness/4, leaf_thickness, leaf_length*0.8], center=true);\n}\n\n// Generate the plant\nrosemary_plant();",
    "renders": true
  },
  {
    "plant": "sage",
    "openscad_code": "// Realistic 3D-Printable Sage Plant - OpenSCAD\n// Medium complexity, ~120 lines\n// Printable at 1:1 scale (~120mm tall)\n\n// Parameters\nplant_height = 120;\npot_height = 25;\npot_diameter = 45;\nstem_diameter = 3;\nleaf_length = 20;\nleaf_width = 10;\nleaf_thickness = 1.5;\nwall_thickness = 2;\n\n// Main assembly\nunion() {\n    // Pot\n    translate([0, 0, 0])\n        pot();\n\n    // Main stem\n    translate([0, 0, pot_height])\n        stem();\n\n    // Branches and leaves\n    translate([0, 0, pot_height + 5])\n        sage_bush();\n}\n\n// Simple tapered pot with drainage hole\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_height, d1=pot_diameter, d2=pot_diameter*0.9, $fn=48);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n            cylinder(h=pot_height, d1=pot_diameter-wall_thickness*2, d2=pot_diameter*0.9-wall_thickness*2, $fn=48);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h=pot_height+2, d=6, $fn=16);\n    }\n    \n    // Rim for strength\n    translate([0, 0, pot_height-wall_thickness/2])\n        cylinder(h=wall_thickness, d=pot_diameter+wall_thickness, $fn=48);\n}\n\n// Main stem with slight taper\nmodule stem() {\n    cylinder(h=plant_height-pot_height-10, d1=stem_diameter, d2=stem_diameter*0.7, $fn=16);\n}\n\n// Bushy sage structure\nmodule sage_bush() {\n    // Generate multiple branching levels\n    for (i = [1:4]) {\n        rotate([0, 0, i*90])\n            branch_level(i*25, i*30);\n    }\n    \n    // Top cluster\n    translate([0, 0, plant_height-pot_height-15])\n        rotate([0, 0, 45])\n            branch_level(20, 45);\n}\n\n// Individual branching level\nmodule branch_level(height, spread) {\n    for (j = [1:3]) {\n        rotate([0, 0, j*120])\n            branch_pair(height, spread);\n    }\n}\n\n// Symmetrical branch pair with leaves\nmodule branch_pair(height, spread) {\n    for (side = [-1, 1]) {\n        translate([0, 0, height])\n        rotate([0, 0, side * spread])\n        translate([0, 0, 0])\n        rotate([0, 0, side * 15])\n        union() {\n            // Branch\n            translate([0, 0, 0])\n                rotate([90-side*10, 0, 0])\n                    cylinder(h=height*0.6, d=stem_diameter*0.8, $fn=8);\n            \n            // Leaves along branch\n            for (k = [1:4]) {\n                translate([0, 0, k*height*0.15])\n                rotate([0, 0, k*30])\n                rotate([90-side*5, 0, 0])\n                    sage_leaf();\n            }\n        }\n    }\n}\n\n// Individual sage leaf with realistic shape\nmodule sage_leaf() {\n    // Tapered elliptical leaf\n    scale([leaf_length, leaf_width, leaf_thickness])\n        sphere(r=1, $fn=32);\n    \n    // Vein detail (subtractive)\n    difference() {\n        // Leaf body\n        scale([leaf_length, leaf_width, leaf_thickness])\n            sphere(r=1, $fn=32);\n        \n        // Central vein\n        translate([0, 0, leaf_thickness/2+0.1])\n            scale([leaf_length*0.8, leaf_width*0.1, leaf_thickness*0.5])\n                sphere(r=1, $fn=16);\n    }\n    \n    // Slight curl\n    translate([leaf_length/2, 0, 0])\n    rotate([0, 5, 0])\n        children();\n}",
    "renders": true
  },
  {
    "plant": "thyme",
    "openscad_code": "// Realistic Thyme Plant for 3D Printing\n// Height: ~80mm, Base diameter: ~60mm\n\n$fn = 32;  // Smooth curves\n\n// Main module\nmodule thyme_plant() {\n    // Base stem cluster\n    union() {\n        // Central main stem\n        translate([0, 0, 0]) \n            cylinder(h = 20, d = 5, center = true);\n        \n        // Secondary stems\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([3, 0, 8])\n                    rotate([20 + i * 5, 0, 0])\n                        cylinder(h = 15, d1 = 4, d2 = 2, center = true);\n        }\n    }\n    \n    // Generate branching stems with leaves\n    module branch_stem(level, angle, length, thickness) {\n        if(level > 0) {\n            // Main branch segment\n            rotate([0, angle, 0])\n                cylinder(h = length, d = thickness, center = true);\n            \n            // End leaves\n            if(level == 1) {\n                for(j = [0:3]) {\n                    rotate([0, 0, j * 90])\n                        translate([0, 0, length/2])\n                            rotate([30, 0, 0])\n                                leaf_pair(3);\n                }\n            }\n            \n            // Recursive sub-branches\n            if(level > 1) {\n                for(k = [0:2]) {\n                    rotate([0, 0, k * 120])\n                        translate([0, 0, length/2])\n                            branch_stem(level - 1, 30 + k * 5, length * 0.7, thickness * 0.7);\n                }\n            }\n        }\n    }\n    \n    // Leaf pair module\n    module leaf_pair(size) {\n        // Two small oval leaves\n        translate([size/2, 0, 0])\n            rotate([0, 0, 30])\n                scale([1.5, 0.8, 0.3])\n                    sphere(d = size);\n                    \n        translate([-size/2, 0, 0])\n            rotate([0, 0, -30])\n                scale([1.5, 0.8, 0.3])\n                    sphere(d = size);\n    }\n    \n    // Generate main branching structure\n    for(i = [0:11]) {\n        angle = i * 30;\n        height = 10 + (i % 3) * 5;\n        \n        translate([0, 0, 5])\n            rotate([0, 0, angle])\n                translate([8 * cos(i * 15), 8 * sin(i * 15), height])\n                    rotate([20 + i % 4 * 10, 0, 0])\n                        branch_stem(3, 25, 12, 2);\n    }\n    \n    // Bottom support ring for stability\n    difference() {\n        cylinder(h = 3, d = 40, center = true);\n        cylinder(h = 3.5, d = 36, center = true);\n    }\n    \n    // Add small flowers\n    module tiny_flower(pos) {\n        translate(pos)\n            union() {\n                // Flower center\n                sphere(d = 1.5);\n                \n                // Petals\n                for(p = [0:4]) {\n                    rotate([0, 0, p * 72])\n                        translate([1.5, 0, 0])\n                            scale([0.8, 0.3, 0.1])\n                                sphere(d = 1.2);\n                }\n            }\n    }\n    \n    // Place flowers at branch tips\n    for(i = [0:7]) {\n        angle = i * 45;\n        tiny_flower([\n            15 * cos(angle), \n            15 * sin(angle), \n            35 + i * 3\n        ]);\n    }\n}\n\n// Render the plant\nthyme_plant();",
    "renders": true
  },
  {
    "plant": "mint",
    "openscad_code": "// Realistic 3D-printable mint plant – medium complexity\n// Overall height ~120 mm, pot ~50 mm, wall thickness 2 mm\n\n// Pot with drainage cavity\nmodule pot() {\n    difference() {\n        cylinder(h = 45, d1 = 50, d2 = 45, $fn = 48);        // outer shell\n        translate([0, 0, 2])\n            cylinder(h = 43, d1 = 46, d2 = 41, $fn = 48);    // inner cavity\n    }\n}\n\n// Soil surface (thin disc)\nmodule soil() {\n    translate([0, 0, 44])\n        cylinder(h = 3, d = 46, $fn = 48);\n}\n\n// Single mint leaf with stem stub\nmodule leaf(len = 18, wid = 12, thick = 1.6) {\n    difference() {\n        union() {\n            // Main leaf blade – stretched sphere\n            scale([wid, len, thick])\n                sphere(d = 1, $fn = 24);\n\n            // Petiole stub\n            translate([0, len/2 + 1.5, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 4, d = 2.2, $fn = 8);\n        }\n\n        // Vein grooves (three shallow)\n        for (a = [-30, 0, 30])\n            rotate([0, 0, a])\n                translate([0, 0, thick/2 - 0.2])\n                    cube([0.8, len * 0.7, 0.4], center = true);\n    }\n}\n\n// Group of leaves on one stem node\nmodule leaf_cluster(height) {\n    translate([0, 0, height])\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 10])\n            rotate([45, 0, 0])\n                translate([6, 0, 0])\n                    scale(1 - i * 0.15)\n                        leaf(18 - i * 2, 12 - i * 1.5);\n    }\n}\n\n// Main stem with multiple leaf clusters\nmodule mint_plant() {\n    // Central stem\n    cylinder(h = 75, d = 4, $fn = 12);\n\n    // Nodes every ~18 mm\n    for (h = [15:18:70])\n        leaf_cluster(h);\n\n    // Top cluster smaller\n    translate([0, 0, 75])\n        scale(0.7)\n            leaf_cluster(0);\n}\n\n// Assembly\npot();\nsoil();\ntranslate([0, 0, 47])\n    mint_plant();",
    "renders": true
  },
  {
    "plant": "oregano",
    "openscad_code": "// Oregano Plant - Medium Complexity Realistic Style\n// Overall height ~120mm, 3D printable with 2mm walls\n\n// Parameters\nstem_d = 4;           // Main stem diameter (mm)\nleaf_w = 8;           // Single leaf width\nleaf_l = 18;          // Single leaf length\nleaf_t = 2;           // Leaf thickness\nnum_stems = 5;        // Number of main stems\nnum_leaf_pairs = 6;   // Leaf pairs per stem\npot_h = 25;           // Pot height\npot_r = 30;           // Pot radius\n\n// Main stem with leaves module\nmodule stem_with_leaves(height, angle, rotation) {\n    translate([0, 0, pot_h])\n    rotate([0, angle, rotation]) {\n        // Main stem\n        cylinder(h=height, d=stem_d, $fn=8);\n        \n        // Side stems with leaves\n        for (i = [1:num_leaf_pairs]) {\n            z_pos = height * i / (num_leaf_pairs + 1);\n            \n            // Left side stem\n            translate([0, 0, z_pos])\n            rotate([0, 90, 30])\n            cylinder(h=height/3, d=stem_d*0.7, $fn=6);\n            \n            // Left leaves\n            translate([-height/6, 0, z_pos])\n            rotate([0, 0, -30])\n            leaf();\n            \n            translate([-height/4, 0, z_pos + 3])\n            rotate([0, 0, -45])\n            scale([0.8, 0.8, 1])\n            leaf();\n            \n            // Right side stem\n            translate([0, 0, z_pos])\n            rotate([0, -90, -30])\n            cylinder(h=height/3, d=stem_d*0.7, $fn=6);\n            \n            // Right leaves\n            translate([height/6, 0, z_pos])\n            rotate([0, 0, 30])\n            mirror([1, 0, 0])\n            leaf();\n            \n            translate([height/4, 0, z_pos + 3])\n            rotate([0, 0, 45])\n            scale([0.8, 0.8, 1])\n            mirror([1, 0, 0])\n            leaf();\n        }\n        \n        // Top cluster of small leaves\n        translate([0, 0, height])\n        for (j = [0:4]) {\n            rotate([0, 0, j * 72])\n            translate([leaf_w/2, 0, 0])\n            rotate([0, 45, 0])\n            scale([0.7, 0.7, 1])\n            leaf();\n        }\n    }\n}\n\n// Single oregano leaf shape\nmodule leaf() {\n    // Main leaf body\n    hull() {\n        translate([0, 0, 0])\n        sphere(d=leaf_w, $fn=8);\n        \n        translate([leaf_l - leaf_w/2, 0, 0])\n        sphere(d=leaf_w/2, $fn=6);\n    }\n    \n    // Leaf tip\n    translate([leaf_l, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=leaf_w/3, d1=leaf_w/2, d2=0, $fn=6);\n    \n    // Leaf veins (raised lines)\n    for (v = [-1:1]) {\n        translate([leaf_l/2 + v * 2, 0, leaf_t/2 + 0.1])\n        rotate([0, 90, 0])\n        cylinder(h=leaf_l * 0.8, d=0.5, $fn=4);\n    }\n}\n\n// Flower pot with soil\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_h, r=pot_r, $fn=32);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n        cylinder(h=pot_h - 2, r=pot_r - 2, $fn=32);\n    }\n    \n    // Soil surface\n    translate([0, 0, pot_h - 2])\n    cylinder(h=2, r=pot_r - 2, $fn=32);\n    \n    // Pot base\n    translate([0, 0, -2])\n    cylinder(h=2, r=pot_r + 2, $fn=32);\n}\n\n// Generate plant\nunion() {\n    // Pot\n    pot();\n    \n    // Main stems\n    for (i = [0:num_stems-1]) {\n        angle = 10 + i * 5;\n        rotation = i * (360 / num_stems);\n        stem_with_leaves(70 + i * 10, angle, rotation);\n    }\n}",
    "renders": true
  },
  {
    "plant": "basil",
    "openscad_code": "// Basil plant - realistic style, medium complexity\n// Overall height ~100mm, 3D printable with 2mm walls\n\n$fn = 24;\n\n// Main module for the entire basil plant\nmodule basil_plant() {\n    // Pot\n    union() {\n        // Pot base\n        difference() {\n            cylinder(h=25, d1=35, d2=30);\n            translate([0, 0, 2])\n                cylinder(h=23, d1=31, d2=26);\n        }\n        \n        // Pot rim\n        translate([0, 0, 25])\n            cylinder(h=3, d1=32, d2=35);\n    }\n    \n    // Soil surface\n    translate([0, 0, 24])\n        cylinder(h=2, d1=26, d2=26);\n    \n    // Main stems\n    translate([0, 0, 26])\n        rotate([0, 0, 0])\n            stem(0, 0);\n    translate([5, -3, 26])\n        rotate([0, 0, 30])\n            stem(1, 15);\n    translate([-4, 2, 26])\n        rotate([0, 0, -25])\n            stem(2, -10);\n}\n\n// Stem module with leaves\nmodule stem(id, base_angle) {\n    height = 35 + id * 5;\n    diameter = 2.5;\n    \n    // Main stem\n    cylinder(h=height, d=diameter);\n    \n    // Generate leaf pairs along stem\n    for(i = [1:3]) {\n        translate([0, 0, i * height/4])\n            rotate([0, base_angle + i * 20, 0])\n                leaf_pair(i);\n    }\n    \n    // Top cluster\n    translate([0, 0, height])\n        rotate([0, base_angle, 0])\n            leaf_cluster();\n}\n\n// Single leaf pair module\nmodule leaf_pair(level) {\n    scale_factor = 1 - level * 0.15;\n    \n    for(side = [0, 1]) {\n        rotate([0, side * 180, 0])\n            translate([0, 1.5, 0])\n                rotate([0, -30 + side * 60, 0])\n                    basil_leaf(scale_factor);\n    }\n}\n\n// Single leaf module\nmodule basil_leaf(scale_factor) {\n    // Leaf base (petiole)\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=3, d=1.2);\n    \n    // Leaf blade\n    translate([0, 3, 0])\n        scale([scale_factor, scale_factor, scale_factor])\n            difference() {\n                // Main leaf shape\n                scale([1, 1.6, 0.3])\n                    sphere(d=10);\n                \n                // Leaf tip\n                translate([0, 7, 0])\n                    scale([0.3, 0.3, 0.3])\n                        sphere(d=3);\n                \n                // Vein indentation\n                translate([0, 3, 0])\n                    rotate([90, 0, 0])\n                        scale([0.15, 0.05, 1])\n                            cube([15, 20, 1]);\n                \n                // Side indentations for basil characteristic\n                translate([2.5, 2, 0])\n                    rotate([0, 0, 20])\n                        scale([0.8, 0.3, 1])\n                            cube([3, 4, 1]);\n                translate([-2.5, 2, 0])\n                    rotate([0, 0, -20])\n                        scale([0.8, 0.3, 1])\n                            cube([3, 4, 1]);\n            }\n}\n\n// Top leaf cluster module\nmodule leaf_cluster() {\n    // Small stem extension\n    cylinder(h=2, d=2);\n    \n    // Generate 6 leaves in cluster\n    for(i = [0:5]) {\n        rotate([0, i * 60, 0])\n            translate([0, 2, 0])\n                rotate([0, -20, 0])\n                    scale([0.8, 0.8, 0.8])\n                        basil_leaf(1);\n    }\n}\n\n// Generate the basil plant\nbasil_plant();",
    "renders": true
  },
  {
    "plant": "catnip",
    "openscad_code": "// Catnip Plant (Nepeta cataria) - Realistic Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 32;  // Smooth curves for 3D printing\nplant_scale = 1;  // Overall scale factor\n\nmodule stem_segment(height, base_radius, top_radius) {\n    // Create tapered stem segment with hollow core\n    difference() {\n        cylinder(h = height, r1 = base_radius, r2 = top_radius, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = height + 0.2, r1 = base_radius - 2, r2 = top_radius - 2, center = false);\n    }\n}\n\nmodule leaf(length, width, angle) {\n    // Single catnip leaf with serrated edge approximation\n    rotate([0, 0, angle]) {\n        translate([0, -length/2, 0]) {\n            // Main leaf blade\n            scale([width/length, 1, 0.3])\n                sphere(d = length);\n            \n            // Add leaf detail with veins\n            for(i = [-1, 0, 1]) {\n                rotate([0, 0, i * 15])\n                    translate([0, -length/4, 1.5])\n                        cube([0.5, length/2, 0.5], center = true);\n            }\n        }\n    }\n}\n\nmodule leaf_cluster(stem_pos, height, num_leaves) {\n    // Cluster of leaves along main stem\n    translate(stem_pos) {\n        for(i = [0:num_leaves-1]) {\n            rotate([0, 0, i * (360/num_leaves)])\n                translate([0, 8, 0])\n                    rotate([90, 0, 0])\n                        leaf(height * 0.8, height * 0.6, 0);\n        }\n    }\n}\n\nmodule flower_bud() {\n    // Small flower bud with petals\n    translate([0, 0, 0]) {\n        // Flower center\n        sphere(d = 4);\n        \n        // Petals around center\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([2.5, 0, 0])\n                    scale([1, 0.5, 0.2])\n                        sphere(d = 3);\n        }\n    }\n}\n\nmodule flower_spike(height, num_flowers) {\n    // Vertical spike with flowers\n    stem_segment(height, 1.5, 1);\n    \n    for(i = [0:num_flowers-1]) {\n        translate([0, 0, i * (height/num_flowers)])\n            rotate([0, 0, i * 30])\n                translate([3, 0, 0])\n                    flower_bud();\n    }\n}\n\nmodule main_plant() {\n    // Base pot\n    translate([0, 0, -5]) {\n        difference() {\n            cylinder(h = 10, r1 = 20, r2 = 18, center = false);\n            translate([0, 0, 2])\n                cylinder(h = 8, r1 = 17, r2 = 15, center = false);\n        }\n        \n        // Soil surface\n        translate([0, 0, 8])\n            cylinder(h = 2, r = 17.5);\n    }\n    \n    // Main stem\n    translate([0, 0, 10]) {\n        stem_segment(40, 3, 2);\n        \n        // First leaf cluster\n        leaf_cluster([0, 0, 15], 25, 6);\n        \n        // Second leaf cluster\n        leaf_cluster([0, 0, 30], 20, 5);\n        \n        // Flower spikes\n        translate([0, 0, 40])\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90])\n                    translate([5, 0, 0])\n                        rotate([30, 0, 0])\n                            flower_spike(15, 4);\n            }\n    }\n    \n    // Side stems\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([0, 0, 20])\n                rotate([45, 0, 0])\n                    stem_segment(25, 2, 1);\n    }\n}\n\n// Scale and render the plant\nscale([plant_scale, plant_scale, plant_scale])\n    main_plant();",
    "renders": true
  },
  {
    "plant": "penstemon",
    "openscad_code": "// Penstemon Plant - Realistic Style, Medium Complexity\n// Overall height ~120mm, suitable for 3D printing\n\n$fn = 24;  // Smooth curves for printing\n\n// Main stem module\nmodule stem(height, thickness) {\n    color(\"darkgreen\")\n    cylinder(h=height, d=thickness, center=false);\n}\n\n// Leaf module with proper attachment angle\nmodule leaf(length, width) {\n    color(\"forestgreen\")\n    difference() {\n        // Main leaf blade\n        scale([1, width/length, 0.1])\n        sphere(d=length);\n        \n        // Leaf tip\n        translate([length/2, 0, 0])\n        sphere(d=length/3);\n    }\n}\n\n// Flower cluster base (thyrse)\nmodule flower_cluster(radius, height) {\n    color(\"darkred\")\n    cylinder(h=height, d=radius*2, center=true);\n}\n\n// Individual penstemon flower (tubular, bilabiate)\nmodule flower(tube_length, tube_diameter) {\n    // Main flower tube\n    color(\"crimson\")\n    cylinder(h=tube_length, d=tube_diameter, center=false);\n    \n    // Upper lip (2 lobes)\n    translate([0, tube_diameter/2, tube_length*0.7])\n    rotate([90, 0, 0])\n    scale([1, 1.5, 0.5])\n    sphere(d=tube_diameter);\n    \n    // Lower lip (3 lobes)\n    translate([0, -tube_diameter/2, tube_length*0.7])\n    rotate([90, 0, 0])\n    scale([1.2, 2, 0.5])\n    sphere(d=tube_diameter);\n    \n    // Interior staminode (sterile stamen)\n    color(\"yellow\")\n    translate([0, 0, tube_length*0.9])\n    cylinder(h=tube_length*0.2, d=tube_diameter*0.3, center=false);\n}\n\n// Main plant structure\ntranslate([0, 0, 0]) {\n    // Main stem - 100mm tall, 8mm thick\n    stem(100, 8);\n    \n    // Lower leaves - opposite pairs\n    for(i = [1:3]) {\n        rotate([0, 0, i*60])\n        translate([0, 0, i*25])\n        rotate([0, -30, 0])\n        translate([4, 0, 0])\n        leaf(25, 8);\n        \n        rotate([0, 0, i*60+180])\n        translate([0, 0, i*25])\n        rotate([0, -30, 0])\n        translate([4, 0, 0])\n        leaf(25, 8);\n    }\n    \n    // Upper leaves - smaller\n    for(i = [1:2]) {\n        rotate([0, 0, i*90+45])\n        translate([0, 0, 75+i*15])\n        rotate([0, -45, 0])\n        translate([3, 0, 0])\n        leaf(15, 5);\n    }\n    \n    // Flower clusters at top\n    translate([0, 0, 95])\n    rotate([0, 0, 0])\n    flower_cluster(12, 8);\n    \n    // Individual flowers on cluster\n    for(i = [0:4]) {\n        angle = i*72;\n        rotate([0, 0, angle])\n        translate([10, 0, 95])\n        rotate([0, 30, 0])\n        flower(15, 4);\n    }\n    \n    // Secondary flower stems\n    for(i = [0:2]) {\n        angle = i*120 + 30;\n        rotate([0, 0, angle])\n        translate([0, 0, 85])\n        rotate([0, -20, 0])\n        translate([0, 0, 0])\n        stem(20, 4);\n        \n        translate([0, 0, 85])\n        rotate([0, 0, angle])\n        rotate([0, -20, 0])\n        translate([15, 0, 10])\n        flower(12, 3.5);\n    }\n}\n\n// Base for stability - 2mm thick\ntranslate([0, 0, -2])\ncolor(\"brown\")\ncylinder(h=2, d=30, center=false);",
    "renders": true
  },
  {
    "plant": "heliotrope",
    "openscad_code": "// Heliotrope plant - realistic style, medium complexity\n// Overall height ~100mm, suitable for 3D printing\n\n$fn = 32;\n\nmodule stem_segment(h, r1, r2) {\n    cylinder(h = h, r1 = r1, r2 = r2, $fn = 16);\n}\n\nmodule leaf() {\n    difference() {\n        // Main leaf blade\n        scale([1, 0.4, 0.1])\n            sphere(r = 12, $fn = 24);\n        \n        // Leaf tip point\n        translate([12, 0, -1])\n            rotate([0, 90, 0])\n                cylinder(h = 6, r1 = 2, r2 = 0, $fn = 8);\n    }\n}\n\nmodule flower_cluster() {\n    // Central stem\n    cylinder(h = 8, r = 1.5, $fn = 8);\n    \n    // Individual tiny flowers in spiral\n    for(i = [0:45:359]) {\n        rotate([0, 0, i])\n            translate([4, 0, 0])\n                sphere(r = 1.2, $fn = 8);\n    }\n    \n    // Tiny stems\n    for(i = [0:45:359]) {\n        rotate([0, 0, i])\n            translate([4, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 3, r1 = 0.5, r2 = 0.3, $fn = 6);\n    }\n}\n\nmodule main_stem() {\n    union() {\n        // Base\n        translate([0, 0, -2])\n            cylinder(h = 4, r = 5, $fn = 16);\n        \n        // Main vertical stem\n        stem_segment(60, 3, 2);\n        \n        // Branch 1\n        translate([0, 0, 20])\n            rotate([0, 0, 30])\n                stem_segment(25, 2.5, 1.5);\n        \n        // Branch 2\n        translate([0, 0, 35])\n            rotate([0, 0, -20])\n                stem_segment(30, 2, 1.2);\n        \n        // Branch 3\n        translate([0, 0, 45])\n            rotate([0, 0, 45])\n                stem_segment(20, 1.5, 1);\n    }\n}\n\n// Main plant structure\nunion() {\n    // Main stem\n    main_stem();\n    \n    // Leaves along main stem\n    for(i = [5:15:50]) {\n        translate([0, 0, i])\n            rotate([0, 0, i * 7])\n                leaf();\n    }\n    \n    // Leaves on branch 1\n    translate([0, 0, 20])\n        rotate([0, 0, 30])\n            translate([12, 0, 0])\n                rotate([0, 0, 15])\n                    leaf();\n    \n    // Leaves on branch 2\n    translate([0, 0, 35])\n        rotate([0, 0, -20])\n            translate([15, 0, 0])\n                rotate([0, 0, -10])\n                    leaf();\n    \n    // Flower clusters at stem tips\n    translate([0, 0, 60])\n        flower_cluster();\n    \n    translate([10, 0, 45])\n        rotate([0, 0, 30])\n            flower_cluster();\n    \n    translate([12, 0, 65])\n        rotate([0, 0, -20])\n            flower_cluster();\n    \n    translate([8, 0, 65])\n        rotate([0, 0, 45])\n            flower_cluster();\n    \n    // Base pot (simple cylinder for stability)\n    translate([0, 0, -20])\n        cylinder(h = 18, r = 15, $fn = 32);\n}",
    "renders": true
  },
  {
    "plant": "nasturtium",
    "openscad_code": "// Nasturtium plant for 3D printing - realistic style, medium complexity\n// Overall height: ~100mm, suitable for desktop display\n\nmodule leaf() {\n    // Single nasturtium leaf - shield-shaped with central stem\n    linear_extrude(height=1.5) difference() {\n        union() {\n            // Main leaf body - rounded shield shape\n            scale([1, 0.8, 1]) circle(d=25, $fn=32);\n            translate([-8, 0, 0]) circle(d=12, $fn=16);\n        }\n        \n        // Central vein indentation\n        translate([0, -12, -1]) scale([0.15, 1, 1]) circle(d=25, $fn=32);\n        \n        // Leaf stem attachment point\n        translate([-11, 0, -1]) circle(d=3, $fn=8);\n    }\n    \n    // Leaf stem\n    translate([-11, 0, 0]) rotate([90,0,0]) cylinder(h=12, d=3, $fn=8);\n}\n\nmodule flower_petals() {\n    // 5 petals in a spiral arrangement\n    for(i=[0:4]) {\n        rotate([0, 0, i*72]) translate([0, 8, 0]) rotate([0, 0, i*30]) {\n            // Individual petal - slightly cupped\n            rotate([0, -20, 0]) scale([1, 1.3, 1]) \n                cylinder(h=12, d1=8, d2=6, $fn=16);\n        }\n    }\n}\n\nmodule flower_center() {\n    // Central trumpet structure\n    translate([0, 0, 2]) cylinder(h=15, d1=5, d2=3, $fn=16);\n    \n    // Stamens at center\n    for(i=[0:7]) {\n        rotate([0, 0, i*45]) translate([2, 0, 12]) \n            cylinder(h=4, d=0.8, $fn=4);\n    }\n}\n\nmodule single_flower() {\n    union() {\n        // Flower petals and center\n        flower_petals();\n        flower_center();\n        \n        // Flower stem\n        translate([0, 0, -2]) cylinder(h=15, d=2, $fn=8);\n    }\n}\n\nmodule stem_segment(height=20, diameter=3) {\n    // Flexible stem with joints\n    cylinder(h=height, d=diameter, $fn=8);\n    \n    // Joint rings every 10mm\n    for(i=[1:floor(height/10)]) {\n        translate([0, 0, i*10]) cylinder(h=1, d=diameter+1, $fn=8);\n    }\n}\n\nmodule plant_base() {\n    // Pot base\n    difference() {\n        cylinder(h=20, d1=35, d2=30, $fn=32);\n        translate([0, 0, 2]) cylinder(h=18, d1=31, d2=26, $fn=32);\n    }\n    \n    // Soil surface texture\n    for(i=[0:20]) {\n        rotate([0, 0, i*18]) translate([i*0.8, 0, 19]) \n            scale([1, 0.5, 1]) sphere(d=2+sin(i*5), $fn=8);\n    }\n}\n\n// Main plant assembly\nunion() {\n    // Base pot\n    plant_base();\n    \n    // Main stem - curved\n    translate([0, 0, 20]) rotate([0, 5, 0]) stem_segment(30, 4);\n    translate([0, 2.5, 50]) rotate([0, 10, 15]) stem_segment(25, 3.5);\n    translate([2, 5, 75]) rotate([0, -5, 25]) stem_segment(20, 3);\n    \n    // First leaf pair\n    translate([7, 10, 70]) rotate([0, -30, 45]) leaf();\n    translate([-5, 8, 72]) mirror([1,0,0]) rotate([0, -30, -30]) leaf();\n    \n    // Second leaf pair higher up\n    translate([5, 12, 85]) rotate([0, -20, 60]) scale([0.8,0.8,0.8]) leaf();\n    translate([-3, 10, 87]) mirror([1,0,0]) rotate([0, -20, -45]) scale([0.8,0.8,0.8]) leaf();\n    \n    // Flowers at stem tips\n    translate([3, 15, 95]) rotate([0, 0, 90]) single_flower();\n    translate([-2, 8, 90]) rotate([0, 0, -45]) scale([0.7,0.7,0.7]) single_flower();\n    \n    // Additional branching stems with smaller flowers\n    translate([0, 6, 65]) rotate([0, 45, 25]) stem_segment(15, 2.5);\n    translate([0, 10, 80]) rotate([0, 0, 45]) scale([0.6,0.6,0.6]) single_flower();\n}",
    "renders": true
  },
  {
    "plant": "portulaca",
    "openscad_code": "// Portulaca Plant - Realistic Style, Medium Complexity\n// Designed for 3D printing with 2mm wall thickness\n\n// Main parameters\nstem_height = 40;\nstem_diameter = 3;\nflower_diameter = 20;\nleaf_length = 15;\nleaf_width = 2;\npot_height = 35;\npot_diameter = 50;\n\n// Stem module\nmodule stem() {\n    union() {\n        // Main stem\n        cylinder(h=stem_height, d=stem_diameter, $fn=16);\n        \n        // Branching stems\n        for(i = [1:3]) {\n            rotate([0, 0, i*120]) \n            translate([0, 0, stem_height/2])\n            rotate([30, 0, 0])\n            cylinder(h=stem_height/2, d=stem_diameter*0.7, $fn=16);\n        }\n    }\n}\n\n// Leaf module with realistic succulent shape\nmodule leaf() {\n    hull() {\n        sphere(d=leaf_width);\n        translate([leaf_length-leaf_width, 0, 0])\n        sphere(d=leaf_width*0.7);\n    }\n}\n\n// Portulaca leaf cluster\nmodule leaf_cluster(stem_pos) {\n    translate(stem_pos)\n    for(i = [1:5]) {\n        rotate([0, 0, i*72])\n        translate([stem_diameter/2, 0, 0])\n        rotate([45, 0, 0])\n        leaf();\n    }\n}\n\n// Flower petal\nmodule petal() {\n    scale([1, 0.3, 1])\n    sphere(d=flower_diameter/2, $fn=16);\n}\n\n// Portulaca flower with multiple layers\nmodule flower(center_pos) {\n    translate(center_pos)\n    union() {\n        // Center\n        sphere(d=flower_diameter/4, $fn=32);\n        \n        // Outer petals\n        for(i = [1:8]) {\n            rotate([0, 0, i*45])\n            translate([flower_diameter/3, 0, 0])\n            petal();\n        }\n        \n        // Inner petals\n        for(i = [1:5]) {\n            rotate([0, 0, i*72+36])\n            translate([flower_diameter/6, 0, 0])\n            scale(0.6)\n            petal();\n        }\n    }\n}\n\n// Pot with drainage holes\nmodule pot() {\n    difference() {\n        // Main pot\n        cylinder(h=pot_height, d=pot_diameter, $fn=64);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n        cylinder(h=pot_height-2, d=pot_diameter-4, $fn=64);\n        \n        // Drainage holes\n        for(i = [1:3]) {\n            rotate([0, 0, i*120])\n            translate([pot_diameter/2-3, 0, 0])\n            cylinder(h=10, d=3, $fn=16);\n        }\n    }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, 2])\n    cylinder(h=3, d=pot_diameter-4, $fn=64);\n}\n\n// Main assembly\nunion() {\n    // Pot\n    pot();\n    \n    // Soil\n    color(\"saddlebrown\")\n    soil();\n    \n    // Plant\n    color(\"darkgreen\")\n    translate([0, 0, 5])\n    union() {\n        // Main stem\n        stem();\n        \n        // Leaves along main stem\n        leaf_cluster([0, 0, 10]);\n        leaf_cluster([0, 0, 20]);\n        leaf_cluster([0, 0, 30]);\n        \n        // Branch leaves\n        for(i = [1:3]) {\n            rotate([0, 0, i*120])\n            translate([0, 0, stem_height/2])\n            rotate([30, 0, 0])\n            leaf_cluster([0, 0, stem_height/4]);\n        }\n        \n        // Flowers\n        color(\"hotpink\")\n        flower([0, 0, stem_height+3]);\n        \n        for(i = [1:3]) {\n            rotate([0, 0, i*120])\n            translate([0, 0, stem_height/2])\n            rotate([30, 0, 0])\n            translate([0, 0, stem_height/2])\n            flower([0, 0, 3]);\n        }\n    }\n}",
    "renders": true
  },
  {
    "plant": "ageratum",
    "openscad_code": "// Ageratum plant - realistic style, medium complexity\n// Overall size: ~100mm tall, 70mm wide\n\n// Main parameters\nstem_height = 50;\nstem_radius = 2;\nflower_cluster_radius = 25;\nflower_radius = 3;\nleaf_length = 20;\nleaf_width = 12;\nleaf_thickness = 2;\n\nmodule stem() {\n    // Main stem with slight taper\n    cylinder(h=stem_height, r1=stem_radius, r2=stem_radius*0.8, $fn=16);\n    \n    // Secondary stems\n    for (i = [0:120:359]) {\n        rotate([0, 0, i]) \n        translate([0, 0, stem_height*0.4]) \n        rotate([30, 0, 0]) \n        cylinder(h=stem_height*0.6, r1=stem_radius*0.7, r2=stem_radius*0.5, $fn=12);\n    }\n}\n\nmodule leaf(stem_pos, angle, length, width) {\n    translate(stem_pos) {\n        rotate([0, 0, angle]) {\n            rotate([30, 0, 0]) {\n                // Leaf blade - elliptical shape\n                scale([1, width/length, 0.5]) \n                sphere(r=length/2, $fn=20);\n                \n                // Leaf veins\n                for (v = [-0.3:0.2:0.3]) {\n                    translate([0, v*width/2, leaf_thickness/2]) \n                    rotate([0, 0, v*30]) \n                    scale([length*0.8, 0.5, 0.5]) \n                    cylinder(h=1, r=leaf_thickness/4, $fn=8);\n                }\n            }\n        }\n    }\n}\n\nmodule leaves() {\n    // Main leaves along stem\n    for (i = [0:45:359]) {\n        rotate([0, 0, i]) {\n            leaf([0, 0, stem_height*(0.1 + i/360)], i+90, leaf_length*0.8, leaf_width);\n        }\n    }\n    \n    // Secondary leaves on branches\n    for (i = [0:120:359]) {\n        rotate([0, 0, i]) {\n            leaf([sin(30)*stem_height*0.3, cos(30)*stem_height*0.3, stem_height*0.5], \n                 i+45, leaf_length*0.6, leaf_width*0.7);\n        }\n    }\n}\n\nmodule flower(bloom_size) {\n    // Individual flower - fluffy pom-pom style\n    union() {\n        // Central disk\n        sphere(r=flower_radius*0.7, $fn=12);\n        \n        // Petals in multiple layers\n        for (layer = [0:30:150]) {\n            rotate([layer, 0, 0]) {\n                for (j = [0:30:359]) {\n                    rotate([0, 0, j]) {\n                        translate([flower_radius*0.8, 0, 0]) {\n                            sphere(r=flower_radius*0.5, $fn=8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule flower_cluster() {\n    // Main flower cluster\n    translate([0, 0, stem_height + 5]) {\n        for (a = [0:30:359]) {\n            rotate([0, 0, a]) {\n                for (r = [0:8:flower_cluster_radius-5]) {\n                    translate([r, 0, sin(a*3)*5]) {\n                        flower(flower_radius);\n                    }\n                }\n            }\n        }\n        \n        // Top flowers\n        for (i = [0:45:359]) {\n            rotate([0, 0, i]) {\n                translate([0, flower_cluster_radius*0.7, 15]) {\n                    flower(flower_radius*0.9);\n                }\n            }\n        }\n    }\n}\n\n// Base for stability\nmodule base() {\n    cylinder(h=5, r=15, $fn=32);\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Stem starting from base\n    translate([0, 0, 5]) {\n        stem();\n    }\n    \n    // Leaves\n    translate([0, 0, 5]) {\n        leaves();\n    }\n    \n    // Flower cluster\n    flower_cluster();\n}",
    "renders": true
  },
  {
    "plant": "coleus",
    "openscad_code": "// Coleus Plant - Realistic Style, Medium Complexity\n// Size: ~100mm tall, optimized for 3D printing\n\n$fn = 32; // Smooth curves\n\n// Main parameters\nstem_height = 70;\nstem_diameter = 4;\nleaf_length = 25;\nleaf_width = 15;\nleaf_thickness = 2;\npot_height = 25;\npot_diameter = 40;\n\nmodule coleus_plant() {\n    // Flower pot\n    union() {\n        // Pot body\n        cylinder(h = pot_height, d1 = pot_diameter, d2 = pot_diameter * 0.8, $fn = 64);\n        \n        // Pot rim\n        translate([0, 0, pot_height])\n            cylinder(h = 3, d1 = pot_diameter + 2, d2 = pot_diameter, $fn = 64);\n    }\n    \n    // Soil surface\n    translate([0, 0, pot_height - 2])\n        cylinder(h = 4, d = pot_diameter - 4, $fn = 64);\n    \n    // Main stem\n    translate([0, 0, pot_height])\n        cylinder(h = stem_height, d = stem_diameter, $fn = 16);\n    \n    // Branching stems and leaves\n    for (i = [0:3]) {\n        angle = i * 90 + 45;\n        height = pot_height + 15 + i * 15;\n        \n        // Side branch\n        translate([0, 0, height])\n            rotate([0, 0, angle])\n            rotate([15, 0, 0])\n            cylinder(h = 25, d = 2.5, $fn = 12);\n        \n        // Leaves on each branch\n        for (j = [0:1]) {\n            leaf_angle = j * 180;\n            leaf_pos = j * 10 + 10;\n            \n            translate([0, 0, height])\n                rotate([0, 0, angle])\n                rotate([15, 0, 0])\n                translate([leaf_pos, 0, 0])\n                rotate([0, 90, leaf_angle])\n                coleus_leaf();\n        }\n    }\n    \n    // Top leaves cluster\n    for (k = [0:5]) {\n        top_angle = k * 60;\n        top_tilt = 30 + (k % 2) * 20;\n        \n        translate([0, 0, pot_height + stem_height])\n            rotate([top_tilt, 0, top_angle])\n            translate([0, 0, -5])\n            coleus_leaf();\n    }\n}\n\nmodule coleus_leaf() {\n    // Leaf base shape\n    scale([leaf_length, leaf_width, leaf_thickness])\n        sphere(d = 1, $fn = 16);\n    \n    // Leaf tip extension\n    translate([leaf_length * 0.7, 0, 0])\n        scale([leaf_length * 0.3, leaf_width * 0.3, leaf_thickness])\n        sphere(d = 1, $fn = 8);\n    \n    // Vein ridge\n    translate([0, 0, leaf_thickness])\n        scale([leaf_length * 0.9, 1, 0.5])\n        sphere(d = 0.5, $fn = 8);\n    \n    // Side serrations\n    for (s = [0:3]) {\n        serr_pos = -leaf_width/2 + leaf_width/6 + s * leaf_width/3;\n        translate([leaf_length * 0.3, serr_pos, leaf_thickness/2])\n            rotate([0, 0, s % 2 == 0 ? 30 : -30])\n            scale([2, 1, 2])\n            cube([3, 0.5, 1], center = true);\n    }\n}\n\ncoleus_plant();",
    "renders": true
  },
  {
    "plant": "waxplant",
    "openscad_code": "// Waxplant (Hoya carnosa) - Medium complexity realistic style\n// Overall height ~120mm, suitable for 3D printing\n\n$fn=32;\nwall_thickness = 2;\n\nmodule stem_segment(length, angle, thickness) {\n    // Create one segment of the vine stem\n    rotate([0, 0, angle]) {\n        translate([0, 0, -length/2]) {\n            cylinder(h=length, r=thickness, center=true);\n        }\n    }\n}\n\nmodule leaf(length=25, width=15, thickness=wall_thickness) {\n    // Single waxy leaf with typical Hoya shape\n    scale([1, width/length, 1]) {\n        difference() {\n            // Main leaf body - elliptical shape\n            scale([length/2, length/2, thickness/2]) {\n                sphere(center=true);\n            }\n            \n            // Leaf tip - slightly pointed\n            translate([length/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=length/4, r=thickness/2, center=true);\n            \n            // Leaf base indentation\n            translate([-length/2+2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=4, r=width/3, center=true);\n        }\n    }\n    \n    // Central vein\n    translate([0, -thickness/2-0.1, 0])\n        scale([length*0.8, 0.5, thickness/4])\n            cube(center=true);\n}\n\nmodule node_with_leaves(node_pos, leaf_count, stem_angle) {\n    // Node where leaves and new stems emerge\n    translate(node_pos) {\n        rotate([0, 0, stem_angle]) {\n            // Node joint\n            sphere(r=wall_thickness*1.5, center=true);\n            \n            // Leaves at this node\n            for(i=[0:leaf_count-1]) {\n                leaf_angle = 360/leaf_count * i;\n                leaf_tilt = 30 + (i%2)*10; // Alternating tilt\n                \n                rotate([0, 0, leaf_angle]) {\n                    rotate([leaf_tilt, 0, 0]) {\n                        translate([wall_thickness*2, 0, 0]) {\n                            leaf();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule main_stem() {\n    // Main climbing stem with segments\n    stem_points = [\n        [0, 0, 0],\n        [0, 0, 20],\n        [15, 10, 45],\n        [25, 20, 70],\n        [35, 25, 95],\n        [40, 30, 120]\n    ];\n    \n    // Create stem segments\n    for(i=[0:len(stem_points)-2]) {\n        p1 = stem_points[i];\n        p2 = stem_points[i+1];\n        segment_length = norm(p2-p1);\n        direction = (p2-p1)/segment_length;\n        \n        translate(p1) {\n            color(\"darkgreen\") {\n                cylinder(h=segment_length, r=wall_thickness, center=false);\n            }\n            \n            // Add leaves at nodes\n            if(i%2==0 && i<len(stem_points)-2) {\n                node_with_leaves([0, 0, segment_length/2], 2, i*20);\n            }\n        }\n        \n        translate(p2) {\n            // Secondary stems\n            if(i>0 && i<3) {\n                rotate([0, 45, 30*i]) {\n                    stem_segment(15, 0, wall_thickness*0.8);\n                    node_with_leaves([0, 0, 15], 1, 0);\n                }\n            }\n        }\n    }\n}\n\nmodule flower_cluster(position) {\n    // Umbel flower cluster typical of Hoya\n    translate(position) {\n        // Peduncle\n        color(\"darkgreen\") {\n            cylinder(h=8, r=wall_thickness, center=false);\n        }\n        \n        // Individual flowers in cluster\n        for(angle=[0:30:330]) {\n            rotate([0, 0, angle]) {\n                translate([wall_thickness*2, 0, 8]) {\n                    // Flower\n                    color(\"lightpink\") {\n                        sphere(r=wall_thickness*1.2, center=true);\n                    }\n                    \n                    // Star-shaped corona\n                    color(\"darkred\") {\n                        for(star_angle=[0:72:360]) {\n                            rotate([0, 0, star_angle]) {\n                                translate([wall_thickness*0.5, 0, 0]) {\n                                    cylinder(h=wall_thickness*0.5, r=wall_thickness*0.3, center=true);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main plant assembly\nunion() {\n    // Base pot\n    translate([0, 0, -10]) {\n        color(\"brown\") {\n            difference() {\n                cylinder(h=20, r=25, center=false);\n                translate([0, 0, wall_thickness]) {\n                    cylinder(h=20, r=23, center=false);\n                }\n            }\n        }\n    }\n    \n    // Potting soil\n    translate([0, 0, -8]) {\n        color(\"saddlebrown\") {\n            cylinder(h=8, r=23, center=false);\n        }\n    }\n    \n    // Main plant\n    main_stem();\n    \n    // Add flower clusters at tips\n    flower_cluster([40, 30, 120]);\n    flower_cluster([25, 20, 70]);\n}",
    "renders": true
  },
  {
    "plant": "stephanotis",
    "openscad_code": "// Stephanotis Plant - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 32;\n\n// Main parameters\nstem_height = 80;\nstem_diameter = 4;\nleaf_length = 35;\nleaf_width = 20;\nflower_diameter = 18;\nflower_height = 25;\n\n// Stem module with slight taper\nmodule stem() {\n    union() {\n        // Main stem\n        cylinder(h=stem_height, d1=stem_diameter, d2=stem_diameter*0.8, center=false);\n        \n        // Branching nodes\n        for(i=[1:5]) {\n            translate([0, 0, i*15]) {\n                rotate([0, 90, 30*i]) \n                    cylinder(h=25-i*2, d=stem_diameter*0.7, center=false);\n            }\n        }\n    }\n}\n\n// Leaf with realistic shape\nmodule leaf() {\n    scale([1, leaf_width/leaf_length, 0.2])\n    difference() {\n        // Basic leaf shape\n        scale([1, 0.6, 1])\n            sphere(d=leaf_length);\n        \n        // Remove bottom half for flat base\n        translate([0, 0, -leaf_length/2])\n            cube([leaf_length*2, leaf_length*2, leaf_length], center=true);\n        \n        // Leaf tip\n        translate([leaf_length/2, 0, 0])\n            rotate([0, 0, -90])\n                cylinder(h=leaf_length*0.3, d1=leaf_width*0.1, d2=0, center=false);\n    }\n}\n\n// Stephanotis flower - star shaped with center\nmodule flower() {\n    difference() {\n        union() {\n            // Flower center - small sphere\n            sphere(d=flower_diameter*0.3);\n            \n            // 5 petals in star formation\n            for(i=[0:4]) {\n                rotate([0, 0, i*72]) {\n                    translate([flower_diameter*0.3, 0, flower_height*0.4])\n                        rotate([90, 0, 0])\n                            scale([1, 0.6, 1])\n                                cylinder(h=flower_height*0.7, d1=flower_diameter*0.5, d2=flower_diameter*0.2);\n                }\n            }\n        }\n        \n        // Hollow out for 3D printing\n        sphere(d=flower_diameter*0.8);\n    }\n}\n\n// Place leaves along stem\nmodule place_leaves() {\n    for(i=[0:3]) {\n        translate([0, 0, 20+i*20])\n            rotate([0, 45+i*10, 120*i])\n                translate([0, 15, 0])\n                    leaf();\n    }\n}\n\n// Place flowers at branch ends\nmodule place_flowers() {\n    for(i=[1:3]) {\n        translate([sin(i*120)*20, cos(i*120)*20, 60+i*8])\n            rotate([0, 0, i*120])\n                flower();\n    }\n    \n    // Top flower\n    translate([0, 0, stem_height-5])\n        flower();\n}\n\n// Pot for the plant\nmodule pot() {\n    difference() {\n        union() {\n            // Main pot shape\n            cylinder(h=25, d1=35, d2=30, center=false);\n            \n            // Rim\n            translate([0, 0, 25])\n                cylinder(h=5, d1=35, d2=35, center=false);\n        }\n        \n        // Hollow center\n        cylinder(h=23, d1=31, d2=26, center=false);\n    }\n}\n\n// Assembly\nunion() {\n    // Pot\n    translate([0, 0, 0])\n        pot();\n    \n    // Stem\n    translate([0, 0, 25])\n        stem();\n    \n    // Leaves\n    translate([0, 0, 25])\n        place_leaves();\n    \n    // Flowers\n    translate([0, 0, 25])\n        place_flowers();\n}",
    "renders": true
  },
  {
    "plant": "plumbago",
    "openscad_code": "// Plumbago plant in realistic style with medium complexity\n// Overall height: ~120mm, suitable for 3D printing\n\nmodule plumbago_plant() {\n    // Main stem with gentle curves\n    color(\"darkgreen\") {\n        // Base stem\n        translate([0, 0, 0]) {\n            rotate([0, 10, 0]) cylinder(h=30, d1=6, d2=4, $fn=8);\n        }\n        \n        // Upper stem segments\n        for(i=[1:3]) {\n            rotate([0, 15*i, 45*i]) {\n                translate([0, 0, 25*i]) {\n                    cylinder(h=25, d1=4, d2=3, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Branching system\n    module branch(angle, length, level) {\n        if(level > 0) {\n            color(\"darkgreen\") {\n                rotate([angle, 0, 0]) {\n                    translate([0, 0, 5]) {\n                        cylinder(h=length, d1=2.5, d2=1.5, $fn=6);\n                        \n                        // Sub-branches\n                        translate([0, 0, length-5]) {\n                            branch(25, length*0.7, level-1);\n                            rotate([0, 0, 120]) branch(25, length*0.7, level-1);\n                            rotate([0, 0, 240]) branch(25, length*0.7, level-1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Generate branches from main stem\n    for(i=[1:3]) {\n        rotate([0, 0, 120*i]) {\n            translate([0, 0, 20*i]) {\n                branch(35, 20, 2);\n            }\n        }\n    }\n    \n    // Leaves - plumbago has oval leaves with pointed tips\n    module leaf(length, width) {\n        color(\"forestgreen\") {\n            scale([1, width/length, 0.3]) {\n                // Basic leaf shape using spheres\n                translate([0, 0, -length/4]) {\n                    sphere(d=length, $fn=16);\n                    translate([0, 0, -length/2]) sphere(d=length*0.8, $fn=16);\n                }\n                \n                // Pointed tip\n                translate([0, 0, length/2]) {\n                    scale([0.5, 0.5, 1]) sphere(d=length*0.6, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Place leaves along branches\n    for(angle=[0:30:359]) {\n        rotate([0, 0, angle]) {\n            translate([8, 0, 15]) {\n                rotate([0, 30, 0]) leaf(12, 6);\n            }\n            translate([6, 0, 30]) {\n                rotate([0, 20, 0]) leaf(10, 5);\n            }\n            translate([4, 0, 45]) {\n                rotate([0, 15, 0]) leaf(8, 4);\n            }\n        }\n    }\n    \n    // Flower clusters - plumbago has phlox-like clusters\n    module flower_cluster(position, size) {\n        translate(position) {\n            // Individual flowers (5-petaled)\n            for(i=[0:4]) {\n                rotate([0, 0, i*72]) {\n                    translate([size*0.8, 0, 0]) {\n                        color(\"cornflowerblue\") {\n                            // Petal shape\n                            scale([1, 0.6, 0.2]) sphere(d=size*2, $fn=12);\n                        }\n                    }\n                }\n            }\n            \n            // Center of flower\n            color(\"lightblue\") {\n                sphere(d=size*1.2, $fn=12);\n            }\n        }\n    }\n    \n    // Place flower clusters at branch tips\n    for(angle=[0:60:359]) {\n        rotate([0, 0, angle]) {\n            translate([12, 0, 75]) {\n                flower_cluster([0, 0, 0], 3);\n            }\n            translate([8, 0, 85]) {\n                flower_cluster([0, 0, 0], 2.5);\n            }\n        }\n    }\n    \n    // Additional flowers on upper branches\n    flower_cluster([0, 0, 95], 3.5);\n    flower_cluster([5, 0, 100], 3);\n    flower_cluster([-5, 0, 105], 3);\n}\n\n// Base platform for stability\ncolor(\"saddlebrown\") {\n    translate([0, 0, -5]) {\n        cylinder(h=5, r=15, $fn=32);\n    }\n}\n\n// Generate the complete plant\nplumbago_plant();",
    "renders": true
  },
  {
    "plant": "bougainvillea",
    "openscad_code": "// Bougainvillea Plant - Realistic Style, Medium Complexity\n// 3D Printable with 2mm walls\n\n// Parameters for printability\nwall_thickness = 2;\nscale_factor = 0.5; // Scales entire plant to ~75mm height\n\n// Main module\nmodule bougainvillea_plant() {\n    // Pot\n    union() {\n        // Pot base\n        cylinder(h=20*scale_factor, r1=25*scale_factor, r2=20*scale_factor);\n        \n        // Pot rim\n        translate([0,0,20*scale_factor])\n            cylinder(h=3*scale_factor, r1=22*scale_factor, r2=25*scale_factor);\n    }\n    \n    // Main stem\n    translate([0,0,20*scale_factor])\n        cylinder(h=30*scale_factor, r=3*scale_factor);\n    \n    // Branches - using loops for repetitive structure\n    for(i=[0:120:360]) {\n        rotate([0,0,i])\n            translate([0,0,25*scale_factor])\n                branch();\n    }\n    \n    // Leaves\n    for(i=[0:45:360]) {\n        rotate([0,0,i])\n            translate([0,0,35*scale_factor])\n                leaf_cluster();\n    }\n    \n    // Flowers\n    for(i=[0:60:360]) {\n        rotate([0,0,i])\n            translate([0,0,40*scale_factor])\n                flower_cluster();\n    }\n}\n\n// Branch module with realistic tapering\nmodule branch() {\n    length = 15*scale_factor;\n    for(i=[0:1:5]) {\n        translate([0,length*i/5,0])\n            rotate([0,20*i,0])\n                cylinder(h=length/5, r=2*scale_factor*(1-i/10));\n    }\n}\n\n// Leaf cluster module\nmodule leaf_cluster() {\n    // Central stem\n    cylinder(h=8*scale_factor, r=wall_thickness/2);\n    \n    // Individual leaves\n    for(i=[0:60:300]) {\n        rotate([0,0,i])\n            translate([0,4*scale_factor,0])\n                leaf();\n    }\n}\n\n// Individual leaf\nmodule leaf() {\n    // Leaf blade\n    translate([0,5*scale_factor,0])\n        scale([1,2,0.3])\n            sphere(r=4*scale_factor);\n    \n    // Leaf stem\n    translate([0,2*scale_factor,0])\n        cylinder(h=4*scale_factor, r=wall_thickness/2);\n}\n\n// Flower cluster module\nmodule flower_cluster() {\n    // Bract structure\n    for(i=[0:72:360]) {\n        rotate([0,0,i])\n            translate([0,6*scale_factor,0])\n                scale([1.5,1.5,0.5])\n                    sphere(r=3*scale_factor);\n    }\n    \n    // Tiny central flowers\n    for(i=[0:60:300]) {\n        rotate([0,0,i])\n            translate([0,4*scale_factor,2*scale_factor])\n                sphere(r=1*scale_factor);\n    }\n}\n\n// Generate the plant\nbougainvillea_plant();",
    "renders": true
  },
  {
    "plant": "passionflower",
    "openscad_code": "// Realistic 3D-printable passionflower plant\n// Model size ~80 mm tall\n\n// Wall thickness constant\nwall = 2;\n\n// Main stem\nmodule stem(h = 60, r = 3) {\n    // Central support cylinder\n    cylinder(h = h, r = r, $fn = 16);\n    \n    // Reinforcement rings every 10 mm\n    for(i = [0:10:h-10]) {\n        translate([0, 0, i])\n            cylinder(h = wall, r = r + 1, $fn = 16);\n    }\n}\n\n// Passionflower leaf with three lobes\nmodule leaf(len = 25, wid = 20) {\n    difference() {\n        // Main leaf body\n        union() {\n            // Central lobe\n            translate([0, -len/3, 0])\n                scale([0.4, 1, 0.1])\n                sphere(d = len, $fn = 32);\n            \n            // Left lobe\n            translate([-len/3, -len/4, 0])\n                rotate([0, 0, -30])\n                scale([0.35, 0.9, 0.1])\n                sphere(d = len, $fn = 32);\n            \n            // Right lobe\n            translate([len/3, -len/4, 0])\n                rotate([0, 0, 30])\n                scale([0.35, 0.9, 0.1])\n                sphere(d = len, $fn = 32);\n        }\n        \n        // Vein details (subtractive)\n        for(i = [-1:1]) {\n            translate([i*len/4, 0, -0.1])\n                cube([0.5, len, 2], center = true);\n        }\n    }\n}\n\n// Tendril for climbing support\nmodule tendril(len = 15, coils = 3) {\n    for(i = [0:1:coils*360]) {\n        translate([sin(i)*2, cos(i)*2, i/360*len/coils])\n            rotate([90, 0, i])\n            cylinder(h = len/coils/10, r = 0.5, $fn = 8);\n    }\n}\n\n// Petal with frilly edge\nmodule petal(len = 12, wid = 8) {\n    difference() {\n        // Main petal shape\n        scale([1, 1.5, 0.5])\n        sphere(d = wid, $fn = 32);\n        \n        // Add frilly edge with small spheres\n        for(i = [0:30:330]) {\n            translate([sin(i)*wid/2, cos(i)*wid/2, 0])\n                sphere(d = 2, $fn = 8);\n        }\n    }\n}\n\n// Inner corona filaments\nmodule corona_filaments(count = 40, r = 8) {\n    for(i = [0:360/count:359]) {\n        rotate([0, 0, i])\n        translate([r, 0, 0])\n            cylinder(h = 10, r1 = 0.3, r2 = 0.1, $fn = 8);\n    }\n}\n\n// Central stamens\nmodule stamens(count = 5, r = 3) {\n    for(i = [0:360/count:359]) {\n        rotate([0, 0, i])\n        translate([r, 0, 5])\n            cylinder(h = 8, r = 0.5, $fn = 8);\n    }\n}\n\n// Complete flower head\nmodule flower() {\n    // Base receptacle\n    translate([0, 0, 0])\n        cylinder(h = 4, r = 6, $fn = 32);\n    \n    // Outer petals (5)\n    for(i = [0:72:359]) {\n        rotate([0, 0, i])\n        translate([0, 8, 2])\n            rotate([15, 0, 0])\n            petal();\n    }\n    \n    // Inner corona\n    translate([0, 0, 3])\n        corona_filaments();\n    \n    // Stamens\n    stamens();\n}\n\n// Assembly\nunion() {\n    // Main stem\n    stem();\n    \n    // First leaf pair\n    translate([0, 0, 20])\n    rotate([90, 0, 0])\n    leaf();\n    \n    translate([0, 0, 20])\n    rotate([90, 0, 180])\n    leaf();\n    \n    // Second leaf pair higher up\n    translate([0, 0, 40])\n    rotate([90, 0, 45])\n    leaf();\n    \n    translate([0, 0, 40])\n    rotate([90, 0, -45])\n    leaf();\n    \n    // Tendrils\n    translate([0, 0, 30])\n    rotate([0, 90, 0])\n    tendril();\n    \n    translate([0, 0, 50])\n    rotate([0, -90, 45])\n    tendril();\n    \n    // Flower at top\n    translate([0, 0, 60])\n    flower();\n}",
    "renders": true
  },
  {
    "plant": "moonflower",
    "openscad_code": "// Moonflower plant - realistic style, medium complexity\n// Overall height ~120mm, optimized for 3D printing\n\n$fn = 32;\n\n// Main parameters\nstem_height = 100;\nstem_diameter = 4;\nleaf_length = 35;\nleaf_width = 25;\nflower_diameter = 50;\npot_height = 20;\npot_diameter = 45;\nwall_thickness = 2;\n\nmodule pot() {\n    // Main pot body\n    difference() {\n        cylinder(h = pot_height, d = pot_diameter, $fn = 64);\n        translate([0, 0, wall_thickness])\n            cylinder(h = pot_height, d = pot_diameter - 2*wall_thickness, $fn = 64);\n    }\n    \n    // Pot rim\n    translate([0, 0, pot_height])\n        cylinder(h = 3, d1 = pot_diameter, d2 = pot_diameter + 3, $fn = 64);\n}\n\nmodule stem() {\n    // Main stem\n    color(\"darkgreen\")\n    cylinder(h = stem_height, d = stem_diameter);\n    \n    // Stem segments\n    for(i = [1:20:stem_height-20]) {\n        translate([0, 0, i])\n            cylinder(h = 2, d = stem_diameter + 1);\n    }\n}\n\nmodule leaf(base_angle, height, rotation) {\n    translate([0, 0, height])\n    rotate([0, 0, rotation])\n    rotate([base_angle, 0, 0])\n    translate([stem_diameter/2 + 2, 0, 0])\n    color(\"forestgreen\")\n    difference() {\n        // Main leaf shape\n        scale([1, leaf_width/leaf_length, 1])\n        sphere(d = leaf_length);\n        \n        // Leaf vein groove\n        translate([0, 0, -leaf_width/4])\n            cube([leaf_length, 1, leaf_width/2], center = true);\n    }\n}\n\nmodule flower() {\n    translate([0, 0, stem_height])\n    rotate([0, 0, 0])\n    color(\"white\")\n    union() {\n        // Flower center\n        sphere(d = 8);\n        \n        // Petals\n        for(i = [0:15:359]) {\n            rotate([0, 0, i])\n            translate([12, 0, 0])\n            rotate([90, 0, 0])\n            scale([1, 0.6, 1])\n            cylinder(h1 = 0, h2 = 18, r1 = 0, r2 = 8);\n        }\n        \n        // Inner details\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n            translate([5, 0, 2])\n            scale([0.3, 0.3, 1])\n            sphere(d = 3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Pot\n    translate([0, 0, 0])\n        pot();\n    \n    // Soil\n    translate([0, 0, pot_height - wall_thickness])\n        color(\"saddlebrown\")\n        cylinder(h = wall_thickness, d = pot_diameter - 2*wall_thickness);\n    \n    // Stem\n    translate([0, 0, pot_height])\n        stem();\n    \n    // Leaves\n    leaf(30, 30, 0);\n    leaf(-30, 40, 45);\n    leaf(25, 55, 120);\n    leaf(-35, 65, 200);\n    leaf(20, 75, 270);\n    \n    // Flower\n    flower();\n}",
    "renders": true
  },
  {
    "plant": "morningglory",
    "openscad_code": "// Morning Glory Plant - Realistic Style, Medium Complexity\n// 3D printable with 2mm wall thickness\n\n// Overall dimensions: ~80mm height, ~60mm diameter\n\n$fn = 30;\n\nmodule stem() {\n    // Main stem - 2mm diameter cylinder\n    color(\"darkgreen\")\n    cylinder(h = 80, d = 4, $fn = 16);\n}\n\nmodule leaf() {\n    // Heart-shaped leaf with 2mm thickness\n    difference() {\n        // Main leaf shape\n        scale([1, 1.2, 1])\n        sphere(d = 25);\n        \n        // Cutout for heart shape\n        translate([0, 5, 0])\n        scale([0.6, 0.8, 1.2])\n        sphere(d = 20);\n        \n        // Stem attachment hole\n        translate([0, 0, -2])\n        cylinder(h = 5, d = 4, $fn = 8);\n    }\n}\n\nmodule flower() {\n    // Trumpet-shaped morning glory flower\n    color(\"cornflowerblue\")\n    union() {\n        // Petal tube\n        cylinder(h = 20, d1 = 12, d2 = 8, $fn = 32);\n        \n        // Flared petals\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([0, 6, 20])\n            scale([1, 1.5, 0.3])\n            sphere(d = 12);\n        }\n        \n        // Flower center\n        translate([0, 0, 22])\n        color(\"white\")\n        cylinder(h = 2, d = 4);\n    }\n}\n\nmodule bud() {\n    // Unopened flower bud\n    color(\"darkblue\")\n    scale([1, 1, 1.5])\n    sphere(d = 8);\n}\n\n// Main plant assembly\nunion() {\n    // Main stem\n    stem();\n    \n    // Leaves along stem\n    for(i = [1:3]) {\n        translate([0, 0, i * 20])\n        rotate([90, 0, i * 45])\n        translate([10, 0, 0])\n        leaf();\n    }\n    \n    for(i = [1:3]) {\n        translate([0, 0, i * 20 + 10])\n        rotate([90, 0, i * 45 + 180])\n        translate([10, 0, 0])\n        mirror([1, 0, 0])\n        leaf();\n    }\n    \n    // Vines wrapping around stem\n    color(\"darkgreen\")\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([2, 0, 60])\n        rotate([90, 0, 0])\n        cylinder(h = 30, d = 2, $fn = 8);\n    }\n    \n    // Flowers at top\n    translate([0, 0, 80])\n    flower();\n    \n    // Additional flowers and buds\n    translate([8, 0, 70])\n    rotate([0, 30, 0])\n    flower();\n    \n    translate([-8, 0, 75])\n    rotate([0, -30, 0])\n    bud();\n    \n    translate([6, 6, 65])\n    rotate([0, 20, 45])\n    bud();\n    \n    // Support base for 3D printing\n    color(\"brown\")\n    translate([0, 0, -2])\n    cylinder(h = 2, d = 20, $fn = 32);\n}",
    "renders": true
  },
  {
    "plant": "sweetpea",
    "openscad_code": "// Sweetpea Plant - Realistic Style, Medium Complexity\n// 3D printable sweetpea with tendrils, leaves, and flowers\n\n$fn = 32;\n\n// Global parameters\nstem_diameter = 3;\nleaf_thickness = 1.5;\nflower_size = 8;\npot_height = 25;\npot_diameter = 40;\nplant_height = 120;\n\nmodule pot() {\n    // Main pot body\n    difference() {\n        cylinder(h=pot_height, d=pot_diameter, center=false);\n        translate([0, 0, 2])\n            cylinder(h=pot_height, d=pot_diameter-4, center=false);\n    }\n    \n    // Pot rim\n    translate([0, 0, pot_height])\n        cylinder(h=4, d=pot_diameter+2, center=false);\n}\n\nmodule stem_segment(height, diameter, bend_angle=0) {\n    // Create stem segment with optional bend\n    rotate([0, bend_angle, 0])\n        cylinder(h=height, d=diameter, center=false);\n}\n\nmodule leaf() {\n    // Main leaf blade\n    scale([1, 2.5, 0.2])\n        sphere(d=leaf_thickness*5);\n    \n    // Leaf tip extension\n    translate([0, 12.5, 0])\n        scale([0.3, 0.3, 1])\n            cylinder(h=8, d=leaf_thickness*2, center=false);\n    \n    // Leaf veins (raised ridges)\n    for(i=[-1:0.5:1]) {\n        translate([i*3, 0, leaf_thickness/2+0.1])\n            rotate([90, 0, 0])\n                scale([0.3, 2.5, 0.5])\n                    cylinder(h=10, d=0.5, center=false);\n    }\n}\n\nmodule tendril() {\n    // Curved tendril for climbing\n    for(i=[0:15:180]) {\n        translate([0, 0, i/10])\n            rotate([0, i, 0])\n                translate([5*sin(i), 5*cos(i), 0])\n                    sphere(d=0.8);\n    }\n}\n\nmodule flower() {\n    // Flower base\n    sphere(d=flower_size);\n    \n    // Petals (5 petals in a whorl)\n    for(i=[0:72:360]) {\n        rotate([0, 0, i])\n            translate([flower_size/2, 0, 0])\n                scale([1.5, 0.8, 0.3])\n                    sphere(d=flower_size/2);\n    }\n    \n    // Flower center\n    translate([0, 0, flower_size/2])\n        sphere(d=flower_size/3);\n}\n\nmodule main_stem() {\n    // Create main stem with alternating leaves\n    union() {\n        // Main vertical stem\n        stem_segment(plant_height-pot_height, stem_diameter);\n        \n        // Side branches with leaves\n        for(i=[20:25:plant_height-pot_height-20]) {\n            rotate([0, 0, i*137.5]) {\n                // Side branch\n                translate([0, 0, i])\n                    rotate([30, 0, 0])\n                        stem_segment(25, stem_diameter*0.7);\n                \n                // Leaves on side branches\n                translate([0, 0, i])\n                    rotate([30, 0, 0])\n                        translate([20, 0, 0])\n                            rotate([0, -30, 0])\n                                leaf();\n                \n                // Tendrils\n                translate([0, 0, i])\n                    rotate([60, 45, 0])\n                        tendril();\n            }\n        }\n    }\n}\n\nmodule flowers_cluster() {\n    // Cluster of flowers at top\n    translate([0, 0, plant_height-pot_height])\n        for(i=[0:60:300]) {\n            rotate([0, 0, i])\n                translate([10, 0, 5])\n                    flower();\n        }\n}\n\n// Assembly\nunion() {\n    // Pot at base\n    pot();\n    \n    // Plant growing from pot\n    translate([0, 0, pot_height])\n        main_stem();\n    \n    // Flowers at top\n    flowers_cluster();\n    \n    // Additional leaves along main stem\n    for(i=[40:30:plant_height-pot_height-40]) {\n        rotate([0, 0, i*137.5]) {\n            translate([0, 0, i])\n                rotate([45, 0, 0])\n                    translate([15, 0, 0])\n                        leaf();\n        }\n    }\n}",
    "renders": true
  },
  {
    "plant": "honeysuckle",
    "openscad_code": "// Honeysuckle Plant - Realistic Style\n// Main stem and branching structure\n\n$fn = 32;\n\nmodule stem_segment(h, r, angle) {\n    rotate([0, angle, 0]) cylinder(h=h, r=r, center=true);\n}\n\nmodule leaf() {\n    // Main leaf body\n    scale([1, 2, 0.2]) sphere(r=10);\n    \n    // Leaf tip\n    translate([0, 20, 0]) scale([0.5, 0.5, 0.2]) sphere(r=5);\n    \n    // Leaf base\n    translate([0, -15, 0]) rotate([0, 30, 0]) cylinder(h=3, r1=2, r2=1);\n}\n\nmodule flower() {\n    // Flower tube\n    cylinder(h=15, r1=4, r2=2);\n    \n    // Petals\n    for(i=[0:5]) {\n        rotate([0, 0, i*60]) {\n            translate([2.5, 0, 12]) rotate([30, 0, 0]) \n                scale([1, 0.5, 0.2]) sphere(r=3);\n        }\n    }\n    \n    // Stamens\n    for(i=[0:4]) {\n        rotate([0, 0, i*72]) {\n            translate([0, 0, 15]) cylinder(h=5, r=0.3);\n        }\n    }\n}\n\n// Main plant structure\nmodule honeysuckle_plant() {\n    // Base stem\n    translate([0, 0, 5]) cylinder(h=60, r=5);\n    \n    // First branching level\n    for(i=[0:3]) {\n        rotate([0, 0, i*90]) {\n            translate([0, 0, 45]) rotate([30, 0, 0]) {\n                stem_segment(30, 3, 0);\n                \n                // Second branching\n                translate([0, 0, 25]) rotate([0, 0, 45]) rotate([20, 0, 0]) {\n                    stem_segment(20, 2, 0);\n                    \n                    // Leaves\n                    translate([0, 0, 15]) rotate([0, -90, 0]) leaf();\n                    translate([0, 0, 10]) rotate([0, -60, 30]) leaf();\n                    translate([0, 0, 5]) rotate([0, -120, -30]) leaf();\n                    \n                    // Flowers\n                    translate([0, 0, 20]) rotate([0, 0, 0]) flower();\n                    translate([0, 0, 18]) rotate([0, 0, 180]) flower();\n                }\n            }\n        }\n    }\n    \n    // Lower leaves\n    for(i=[0:5]) {\n        rotate([0, 0, i*72]) {\n            translate([0, 0, 25 + i*3]) rotate([45, 0, 0]) leaf();\n        }\n    }\n    \n    // Additional flowers along main stem\n    for(i=[0:2]) {\n        rotate([0, 0, 30 + i*120]) {\n            translate([0, 0, 35 + i*10]) rotate([0, 0, 0]) flower();\n        }\n    }\n}\n\n// Generate the plant\nhoneysuckle_plant();",
    "renders": true
  },
  {
    "plant": "trumpetvine",
    "openscad_code": "// Trumpetvine Plant - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main stem module\nmodule stem(height, radius) {\n    cylinder(h=height, r=radius, center=false);\n    \n    // Add texture with small ridges\n    for(i = [0:5:height]) {\n        translate([0, 0, i])\n            cylinder(h=2, r=radius + 0.5, r2=radius + 0.3);\n    }\n}\n\n// Trumpet flower module\nmodule flower(diameter = 12, length = 25) {\n    union() {\n        // Trumpet bell\n        translate([0, 0, length * 0.3])\n            cylinder(h=length * 0.7, r1=diameter/2, r2=diameter/4);\n        \n        // Flower tube\n        cylinder(h=length * 0.3, r=diameter/4);\n        \n        // Stamen inside\n        translate([0, 0, length * 0.6])\n            for(i = [0:60:359]) {\n                rotate([0, 0, i])\n                    translate([diameter/3, 0, 0])\n                        cylinder(h=length * 0.2, r=0.3);\n            }\n    }\n}\n\n// Leaf module with proper thickness\nmodule leaf(length = 30, width = 15) {\n    difference() {\n        // Main leaf body\n        scale([1, width/length, wall_thickness/length])\n            sphere(d=length);\n        \n        // Leaf veins\n        for(i = [-0.3:0.2:0.3]) {\n            rotate([0, 0, i * 45])\n                translate([0, -length * 0.4, -wall_thickness])\n                    cube([length * 0.8, wall_thickness * 0.5, wall_thickness * 2]);\n        }\n    }\n}\n\n// Branch module\nmodule branch(length, angle, flowers = 2) {\n    rotate([angle, 0, 0]) {\n        stem(length, 2);\n        \n        // Add leaves along branch\n        for(i = [0.2:0.3:0.9]) {\n            translate([0, 0, length * i])\n                rotate([0, 90, 45])\n                    leaf(20, 10);\n        }\n        \n        // Add flowers at end\n        translate([0, 0, length])\n            for(j = [0:360/flowers:359]) {\n                rotate([0, 0, j])\n                    translate([5, 0, 0])\n                        rotate([90, 0, 0])\n                            flower();\n            }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base stem\n    translate([0, 0, 0])\n        stem(80, 3);\n    \n    // Lower branches\n    for(i = [0:90:270]) {\n        rotate([0, 0, i])\n            translate([0, 0, 20])\n                branch(40, 30, 3);\n    }\n    \n    // Middle branches\n    for(i = [45:90:315]) {\n        rotate([0, 0, i])\n            translate([0, 0, 45])\n                branch(35, 25, 2);\n    }\n    \n    // Upper branches\n    for(i = [30:60:330]) {\n        rotate([0, 0, i])\n            translate([0, 0, 65])\n                branch(30, 20, 1);\n    }\n    \n    // Top leaves\n    for(i = [0:60:359]) {\n        rotate([0, 0, i])\n            translate([0, 0, 75])\n                rotate([0, 90, 30])\n                    leaf(25, 12);\n    }\n}",
    "renders": true
  },
  {
    "plant": "mandevilla",
    "openscad_code": "// Mandevilla Plant - Realistic Medium Complexity\n// 3D printable model with proper wall thickness\n\n// Parameters\npot_height = 35;\npot_radius = 25;\nstem_height = 80;\nstem_radius = 3;\nleaf_length = 25;\nleaf_width = 12;\nflower_radius = 8;\nflower_height = 15;\n\n// Main plant assembly\nmodule mandevilla_plant() {\n    union() {\n        // Pot\n        color(\"brown\") {\n            cylinder(h=pot_height, r=pot_radius+2, $fn=32);\n            translate([0,0,pot_height]) {\n                cylinder(h=5, r1=pot_radius+2, r2=pot_radius, $fn=32);\n            }\n        }\n        \n        // Soil\n        color(\"darkgreen\") {\n            translate([0,0,5]) {\n                cylinder(h=pot_height-10, r=pot_radius-2, $fn=32);\n            }\n        }\n        \n        // Main stem\n        color(\"green\") {\n            translate([0,0,pot_height-5]) {\n                cylinder(h=stem_height, r=stem_radius, $fn=16);\n            }\n        }\n        \n        // Leaves and flowers\n        for(i=[0:45:315]) {\n            rotate([0,0,i]) {\n                translate([0,0,pot_height+15+sin(i)*10]) {\n                    rotate([30+sin(i)*20,0,0]) {\n                        leaf();\n                    }\n                }\n            }\n        }\n        \n        // Additional vines\n        for(i=[60:60:300]) {\n            rotate([0,0,i]) {\n                translate([0,0,pot_height+20]) {\n                    vine();\n                }\n            }\n        }\n        \n        // Flowers on top\n        translate([0,0,pot_height+stem_height-5]) {\n            flowers_cluster();\n        }\n    }\n}\n\n// Leaf module\nmodule leaf() {\n    // Main leaf blade\n    color(\"forestgreen\") {\n        translate([0,0,0]) {\n            scale([leaf_length, leaf_width, 1]) {\n                sphere(r=1, $fn=16);\n            }\n        }\n        \n        // Leaf stem\n        translate([leaf_length/2,0,0]) {\n            rotate([0,90,0]) {\n                cylinder(h=leaf_length/2, r=1.5, $fn=8);\n            }\n        }\n        \n        // Leaf veins\n        for(j=[-0.5:0.2:0.5]) {\n            translate([j*leaf_width/2,0,0.5]) {\n                scale([leaf_length*0.8, 0.5, 0.5]) {\n                    cube([1,1,1]);\n                }\n            }\n        }\n    }\n}\n\n// Vine module\nmodule vine() {\n    color(\"darkgreen\") {\n        // Curved vine\n        for(k=[0:5:30]) {\n            translate([sin(k*3)*8, cos(k*3)*8, k*1.5]) {\n                rotate([k*2,0,0]) {\n                    cylinder(h=2, r=1.5, $fn=8);\n                }\n            }\n        }\n        \n        // Small leaves on vine\n        for(m=[5:10:30]) {\n            translate([sin(m*3)*8, cos(m*3)*8, m*1.5]) {\n                rotate([m*2+90,0,m*5]) {\n                    scale([5,3,0.5]) {\n                        sphere(r=1, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Flowers cluster\nmodule flowers_cluster() {\n    for(n=[0:60:300]) {\n        rotate([0,0,n]) {\n            translate([8,0,0]) {\n                flower();\n            }\n        }\n    }\n}\n\n// Individual flower\nmodule flower() {\n    color(\"crimson\") {\n        // Flower base\n        translate([0,0,0]) {\n            cylinder(h=flower_height/3, r=flower_radius, $fn=12);\n        }\n        \n        // Petals\n        for(p=[0:45:315]) {\n            rotate([0,0,p]) {\n                translate([flower_radius,0,flower_height/3]) {\n                    rotate([0,90,0]) {\n                        scale([flower_radius, flower_radius/2, 2]) {\n                            sphere(r=1, $fn=8);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Flower center\n        color(\"yellow\") {\n            translate([0,0,flower_height/2]) {\n                sphere(r=flower_radius/3, $fn=12);\n            }\n        }\n    }\n}\n\n// Generate the plant\nmandevilla_plant();",
    "renders": true
  },
  {
    "plant": "allamanda",
    "openscad_code": "// Allamanda plant - realistic style, medium complexity\n// Characteristic trumpet-shaped yellow flowers, glossy leaves, woody stems\n\n$fn = 36;  // Smooth curves for printing\n\n// Overall scale factor - adjust for print size\nscale_factor = 0.6;  // Results in ~120mm height\n\n// Main plant module\nmodule allamanda_plant() {\n    // Central woody stem\n    color(\"#8B4513\") stem();\n    \n    // Branch 1 - left side\n    translate([-15, -10, 30]) rotate([0, 15, -25]) branch();\n    \n    // Branch 2 - right side  \n    translate([15, -8, 25]) rotate([0, -20, 30]) branch();\n    \n    // Branch 3 - back\n    translate([0, -12, 35]) rotate([10, 0, 0]) branch();\n    \n    // Base pot\n    color(\"#A0522D\") pot();\n}\n\n// Woody stem with realistic texture\nmodule stem() {\n    difference() {\n        // Main stem cylinder\n        cylinder(h = 80 * scale_factor, r1 = 4 * scale_factor, r2 = 3 * scale_factor, center = false);\n        \n        // Texture grooves - subtract small cylinders\n        for(i = [1:8]) {\n            rotate([0, 0, i * 45]) \n                translate([0, 3.5 * scale_factor, 0])\n                    cylinder(h = 82 * scale_factor, r = 0.5 * scale_factor, center = false);\n        }\n    }\n}\n\n// Branch with leaves and flowers\nmodule branch() {\n    // Branch stem\n    color(\"#8B4513\") \n        cylinder(h = 40 * scale_factor, r1 = 2 * scale_factor, r2 = 1 * scale_factor, center = false);\n    \n    // Leaves along branch\n    for(i = [1:3]) {\n        translate([0, 0, i * 12 * scale_factor]) \n            rotate([0, 90 + i * 10, 0]) leaf();\n    }\n    \n    // Flowers at branch tip\n    translate([0, 0, 40 * scale_factor]) \n        rotate([0, 0, 0]) flower_cluster();\n}\n\n// Allamanda leaf - elliptical with pointed tip\nmodule leaf() {\n    // Main leaf blade\n    color(\"#228B22\") {\n        // Base ellipse\n        scale([1, 0.4, 1]) \n            sphere(r = 8 * scale_factor);\n        \n        // Pointed tip\n        translate([8 * scale_factor, 0, 0]) \n            rotate([0, 90, 0]) \n                cylinder(h = 4 * scale_factor, r1 = 2 * scale_factor, r2 = 0, center = false);\n    }\n    \n    // Leaf vein detail\n    color(\"#006400\") {\n        translate([-6, 0, 0.5] * scale_factor) \n            rotate([90, 0, 0]) \n                cylinder(h = 12 * scale_factor, r = 0.3 * scale_factor, center = false);\n        \n        // Side veins\n        for(i = [-1, 1]) {\n            translate([2 * scale_factor, i * 1.5 * scale_factor, 0.5 * scale_factor]) \n                rotate([90, i * 15, 0]) \n                    cylinder(h = 6 * scale_factor, r = 0.2 * scale_factor, center = false);\n        }\n    }\n}\n\n// Trumpet-shaped allamanda flower\nmodule flower() {\n    color(\"#FFD700\") {\n        // Flower tube\n        cylinder(h = 8 * scale_factor, r1 = 2 * scale_factor, r2 = 1.5 * scale_factor, center = false);\n        \n        // Trumpet flare\n        translate([0, 0, 8 * scale_factor]) \n            cylinder(h = 3 * scale_factor, r1 = 1.5 * scale_factor, r2 = 5 * scale_factor, center = false);\n        \n        // Petals (5 lobes)\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72]) \n                translate([3.5 * scale_factor, 0, 8.5 * scale_factor]) \n                    rotate([30, 0, 90]) \n                        scale([1, 0.3, 1]) \n                            sphere(r = 3 * scale_factor);\n        }\n    }\n    \n    // Center stamens\n    color(\"#8B4513\") {\n        for(i = [1:5]) {\n            translate([1.5 * scale_factor, 0, 11 * scale_factor]) \n                rotate([0, i * 15, 0]) \n                    cylinder(h = 2 * scale_factor, r = 0.2 * scale_factor, center = false);\n        }\n    }\n}\n\n// Cluster of 2-3 flowers\nmodule flower_cluster() {\n    flower();\n    translate([3, 2, -2] * scale_factor) \n        rotate([10, 20, 15]) \n            flower();\n    translate([-2, -3, 1] * scale_factor) \n        rotate([-15, -10, -20]) \n            flower();\n}\n\n// Simple terracotta pot with drainage hole\nmodule pot() {\n    difference() {\n        union() {\n            // Main pot body\n            cylinder(h = 20 * scale_factor, r1 = 15 * scale_factor, r2 = 12 * scale_factor, center = false);\n            \n            // Rim detail\n            translate([0, 0, 20 * scale_factor]) \n                cylinder(h = 3 * scale_factor, r1 = 16 * scale_factor, r2 = 15 * scale_factor, center = false);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1 * scale_factor]) \n            cylinder(h = 22 * scale_factor, r1 = 13 * scale_factor, r2 = 10 * scale_factor, center = false);\n            \n        // Drainage hole\n        translate([0, 0, -1 * scale_factor]) \n            cylinder(h = 2 * scale_factor, r = 2 * scale_factor, center = false);\n    }\n    \n    // Soil surface\n    color(\"#8B4513\") \n        translate([0, 0, 0.5 * scale_factor]) \n            cylinder(h = 1 * scale_factor, r1 = 13 * scale_factor, r2 = 10 * scale_factor, center = false);\n}\n\n// Generate the complete plant\nallamanda_plant();",
    "renders": true
  },
  {
    "plant": "campsis",
    "openscad_code": "// Campsis (Trumpet Vine) Plant - Realistic Medium Complexity\n// 3D-printable model, max dimension ~120 mm\n\n// Overall scale factor\nscale_factor = 0.6;\n\n// Main stem\nmodule stem() {\n    difference() {\n        union() {\n            translate([0, 0, 0])\n                cylinder(h = 80 * scale_factor, r1 = 4 * scale_factor, r2 = 3 * scale_factor, $fn = 20);\n            translate([0, 0, 75 * scale_factor])\n                cylinder(h = 30 * scale_factor, r1 = 3 * scale_factor, r2 = 2 * scale_factor, $fn = 20);\n        }\n        // Hollow core for 2 mm walls\n        translate([0, 0, -1])\n            cylinder(h = 112 * scale_factor, r = 1.8 * scale_factor, $fn = 20);\n    }\n}\n\n// Leaf\nmodule leaf(length = 25 * scale_factor, width = 12 * scale_factor, thickness = 2 * scale_factor) {\n    difference() {\n        union() {\n            // Main blade\n            scale([1, 0.3, 1])\n                sphere(d = width, $fn = 30);\n            translate([-length / 2, 0, 0])\n                scale([length / width, 1, 1])\n                    sphere(d = width, $fn = 30);\n            // Petiole\n            rotate([90, 0, 0])\n                translate([0, 0, -length / 2])\n                    cylinder(h = length / 3, r = 1.2 * scale_factor, $fn = 8);\n        }\n        // Vein groove\n        translate([0, 0, -thickness / 2])\n            cube([length, thickness / 4, thickness], center = true);\n    }\n}\n\n// Trumpet flower\nmodule flower() {\n    // Corolla\n    color(\"orange\")\n    difference() {\n        union() {\n            // Bell\n            rotate([180, 0, 0])\n                cylinder(h1 = 8 * scale_factor, h2 = 0, r1 = 8 * scale_factor, r2 = 3 * scale_factor, $fn = 24);\n            // Tube\n            translate([0, 0, -4 * scale_factor])\n                cylinder(h = 4 * scale_factor, r1 = 3 * scale_factor, r2 = 2 * scale_factor, $fn = 20);\n        }\n        // Hollow inside\n        rotate([180, 0, 0])\n            cylinder(h1 = 7.5 * scale_factor, h2 = 0, r1 = 7 * scale_factor, r2 = 2.5 * scale_factor, $fn = 24);\n        translate([0, 0, -4.5 * scale_factor])\n            cylinder(h = 5 * scale_factor, r = 1.5 * scale_factor, $fn = 20);\n    }\n\n    // Stamens\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([4 * scale_factor, 0, -2 * scale_factor])\n                cylinder(h = 3 * scale_factor, r = 0.3 * scale_factor, $fn = 6);\n    }\n}\n\n// Pod\nmodule seed_pod() {\n    difference() {\n        // Pod body\n        scale([1, 0.5, 1])\n            sphere(d = 15 * scale_factor, $fn = 30);\n        // Split line\n        translate([0, 0, -8 * scale_factor])\n            cube([20 * scale_factor, 1 * scale_factor, 16 * scale_factor], center = true);\n    }\n}\n\n// Branch with leaves and flowers\nmodule branch(angle, length, height) {\n    translate([0, 0, height * scale_factor])\n    rotate([0, angle, 0])\n    translate([length / 2 * scale_factor, 0, 0]) {\n        // Branch stem\n        rotate([0, 90, 0])\n            cylinder(h = length * scale_factor, r = 2 * scale_factor, $fn = 12);\n        \n        // Leaves along branch\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([i * length / 3 * scale_factor, 0, 0])\n                    rotate([0, -30, 0])\n                        leaf();\n        }\n        \n        // Flowers at tips\n        translate([length * scale_factor, 0, 0])\n            rotate([0, -90, 0])\n                flower();\n        \n        // Seed pods\n        if(length > 25) {\n            translate([length / 2 * scale_factor, 5 * scale_factor, 0])\n                rotate([90, 0, 0])\n                    seed_pod();\n        }\n    }\n}\n\n// Assemble the plant\nstem();\n\n// Main branches\nbranch(30, 40, 60);\nbranch(-45, 35, 70);\nbranch(15, 30, 90);\n\n// Lower leaves on main stem\nfor(i = [0:3]) {\n    rotate([0, 0, i * 90])\n        translate([0, 0, i * 20 * scale_factor + 10])\n            rotate([45, 0, 0])\n                leaf();\n}\n\n// Upper flowers\ntranslate([0, 0, 105 * scale_factor])\n    flower();",
    "renders": true
  },
  {
    "plant": "bignonia",
    "openscad_code": "// Bignonia Plant - Realistic Style (Medium Complexity)\n// 3D printable model with proper wall thickness and no overhangs\n\n// Main parameters\nplant_height = 100;\nstem_diameter = 4;\nwall_thickness = 2;\n\n// Leaves parameters\nleaf_length = 25;\nleaf_width = 12;\nleaf_thickness = 1.5;\n\n// Flower parameters\nflower_diameter = 12;\nflower_height = 8;\npetal_count = 5;\n\n// Module for creating a single leaf with pointed tip\nmodule leaf(length, width, thickness) {\n    difference() {\n        // Main leaf body - tapered oval\n        scale([1, 0.3, 1])\n            cylinder(h=length, d=width, $fn=20);\n        \n        // Create pointed tip\n        translate([length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=width/2, d=width, $fn=20);\n        \n        // Central vein indentation\n        translate([0, 0, -thickness/2])\n            cube([length, 1, thickness*2], center=true);\n    }\n}\n\n// Module for creating a flower cluster\nmodule flower_cluster(diameter, height) {\n    // Flower base\n    cylinder(h=height/2, d=diameter, $fn=16);\n    \n    // Individual petals\n    for(i = [0:petal_count-1]) {\n        rotate([0, 0, i * 360/petal_count]) {\n            translate([diameter/2, 0, height/2]) {\n                rotate([0, 90, 0])\n                    scale([1, 0.6, 0.3])\n                        cylinder(h=diameter/2, d=height/2, $fn=8);\n            }\n        }\n    }\n    \n    // Flower center\n    translate([0, 0, height/2])\n        sphere(d=diameter/4);\n}\n\n// Module for creating a stem segment\nmodule stem_segment(height, diameter) {\n    cylinder(h=height, d=diameter, $fn=8);\n}\n\n// Module for creating a branch with leaves and flowers\nmodule branch_segment(length, angle, leaf_count) {\n    rotate([0, 0, angle]) {\n        translate([0, 0, length/2]) {\n            // Main branch\n            stem_segment(length, stem_diameter);\n            \n            // Leaves along branch\n            for(i = [0:leaf_count-1]) {\n                rotate([0, 0, i * 120]) {\n                    translate([0, length/2 - i * (length/leaf_count), 0]) {\n                        rotate([90, 0, 45])\n                            translate([0, 0, leaf_width/2])\n                                leaf(leaf_length, leaf_width, leaf_thickness);\n                    }\n                }\n            }\n            \n            // Flowers at branch tip\n            if(leaf_count > 2) {\n                translate([0, length, 0])\n                    rotate([90, 0, 0])\n                        flower_cluster(flower_diameter, flower_height);\n            }\n        }\n    }\n}\n\n// Main plant structure\nunion() {\n    // Base pot\n    difference() {\n        // Outer pot\n        cylinder(h=20, d=35, $fn=32);\n        // Inner cavity for soil\n        translate([0, 0, 2])\n            cylinder(h=18, d=31, $fn=32);\n    }\n    \n    // Main stem\n    translate([0, 0, 20]) {\n        stem_segment(plant_height * 0.6, stem_diameter);\n        \n        // Primary branches\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120]) {\n                translate([0, 0, plant_height * 0.3])\n                    branch_segment(plant_height * 0.4, 30, 3);\n                \n                translate([0, 0, plant_height * 0.5])\n                    branch_segment(plant_height * 0.3, -30, 2);\n            }\n        }\n        \n        // Top cluster\n        translate([0, 0, plant_height * 0.6])\n            branch_segment(plant_height * 0.2, 0, 1);\n    }\n}\n\n// Additional small leaves near base\nfor(i = [0:5]) {\n    rotate([0, 0, i * 60]) {\n        translate([12, 0, 15])\n            rotate([90, 0, 30])\n                scale([0.7, 0.7, 0.7])\n                    leaf(leaf_length * 0.6, leaf_width * 0.6, leaf_thickness);\n    }\n}",
    "renders": true
  },
  {
    "plant": "tecoma",
    "openscad_code": "// Tecoma Plant - Realistic Medium Complexity\n// Wall thickness 2mm, printable without supports\n\n$fn = 36;\n\nmodule tecoma_plant() {\n    // Main stem\n    translate([0, 0, 0]) {\n        stem();\n    }\n    \n    // First branch level\n    translate([0, 0, 30]) {\n        rotate([0, 0, 45]) {\n            branch(25, 3);\n        }\n    }\n    \n    translate([0, 0, 30]) {\n        rotate([0, 0, -45]) {\n            branch(25, 3);\n        }\n    }\n    \n    // Second branch level\n    translate([0, 0, 50]) {\n        rotate([0, 0, 135]) {\n            branch(20, 2.5);\n        }\n    }\n    \n    translate([0, 0, 50]) {\n        rotate([0, 0, -135]) {\n            branch(20, 2.5);\n        }\n    }\n    \n    // Top branch\n    translate([0, 0, 65]) {\n        branch(15, 2);\n    }\n    \n    // Leaves\n    translate([0, 0, 35]) {\n        rotate([0, 0, 45]) {\n            translate([22, 0, 0]) {\n                leaf();\n            }\n        }\n    }\n    \n    translate([0, 0, 35]) {\n        rotate([0, 0, -45]) {\n            translate([22, 0, 0]) {\n                leaf();\n            }\n        }\n    }\n    \n    translate([0, 0, 55]) {\n        rotate([0, 0, 135]) {\n            translate([18, 0, 0]) {\n                leaf();\n            }\n        }\n    }\n    \n    translate([0, 0, 55]) {\n        rotate([0, 0, -135]) {\n            translate([18, 0, 0]) {\n                leaf();\n            }\n        }\n    }\n    \n    translate([0, 0, 70]) {\n        translate([0, 0, 0]) {\n            leaf();\n        }\n    }\n    \n    // Flowers\n    translate([0, 0, 75]) {\n        rotate([0, 0, 0]) {\n            translate([0, 0, 5]) {\n                flower();\n            }\n        }\n    }\n    \n    translate([0, 0, 35]) {\n        rotate([0, 0, 45]) {\n            translate([25, 0, 2]) {\n                flower();\n            }\n        }\n    }\n    \n    translate([0, 0, 35]) {\n        rotate([0, 0, -45]) {\n            translate([25, 0, 2]) {\n                flower();\n            }\n        }\n    }\n}\n\nmodule stem() {\n    // Base pot\n    difference() {\n        cylinder(h = 12, r1 = 15, r2 = 12);\n        translate([0, 0, 2]) {\n            cylinder(h = 12, r1 = 13, r2 = 10);\n        }\n    }\n    \n    // Main stem trunk\n    translate([0, 0, 12]) {\n        cylinder(h = 55, r1 = 3, r2 = 2);\n    }\n}\n\nmodule branch(length, radius) {\n    // Branch cylinder with slight taper\n    cylinder(h = length, r1 = radius, r2 = radius * 0.7);\n}\n\nmodule leaf() {\n    // Petiole\n    translate([0, 0, 0]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 8, r1 = 0.5, r2 = 0.5);\n        }\n    }\n    \n    // Leaf blade - tecoma has pinnate leaves\n    translate([0, 0, 8]) {\n        rotate([90, 0, 0]) {\n            // Main leaf stem\n            cylinder(h = 20, r1 = 0.3, r2 = 0.3);\n            \n            // Leaflets\n            for(i = [1:4]) {\n                translate([0, i * 4, 0]) {\n                    rotate([0, 0, 30]) {\n                        leaflet();\n                    }\n                }\n                translate([0, i * 4, 0]) {\n                    rotate([0, 0, -30]) {\n                        leaflet();\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule leaflet() {\n    // Simple elliptical leaflet\n    scale([1, 0.6, 0.2]) {\n        sphere(r = 3);\n    }\n}\n\nmodule flower() {\n    // Flower stem\n    cylinder(h = 3, r1 = 0.3, r2 = 0.3);\n    \n    // Calyx\n    translate([0, 0, 3]) {\n        cylinder(h = 2, r1 = 2, r2 = 2);\n    }\n    \n    // Corolla - tecoma has trumpet-shaped flowers\n    translate([0, 0, 5]) {\n        difference() {\n            // Outer trumpet\n            cylinder(h = 8, r1 = 2, r2 = 4);\n            \n            // Inner hollow\n            translate([0, 0, -1]) {\n                cylinder(h = 10, r1 = 1.5, r2 = 3.5);\n            }\n        }\n        \n        // Petal lobes - 5 lobes\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72]) {\n                translate([3.5, 0, 8]) {\n                    rotate([90, 0, 0]) {\n                        scale([1, 0.4, 0.2]) {\n                            sphere(r = 1.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Stamens\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([1.5, 0, 7]) {\n                cylinder(h = 2, r1 = 0.1, r2 = 0.1);\n            }\n        }\n    }\n}\n\n// Render the complete plant\ntecoma_plant();",
    "renders": true
  },
  {
    "plant": "tabebuia",
    "openscad_code": "// Tabebuia Plant - Realistic Style, Medium Complexity\n// Overall height ~120mm, printable base 50mm diameter\n\n// Trunk parameters\ntrunk_height = 60;\ntrunk_radius = 4;\ntrunk_segments = 8;\n\n// Branch parameters\nbranch_length = 25;\nbranch_radius = 2;\nbranches = 5;\n\n// Leaf parameters\nleaf_length = 12;\nleaf_width = 3;\nleaf_thickness = 1.5;\nleaves_per_branch = 4;\n\n// Flower parameters\nflower_radius = 8;\nflower_depth = 4;\npetals = 5;\nflowers_per_branch = 3;\n\n// Base parameters\nbase_height = 5;\nbase_radius = 25;\n\n// Trunk with slight taper\nmodule trunk(h, r1, r2) {\n    cylinder(h=h, r1=r1, r2=r2, $fn=trunk_segments);\n}\n\n// Simple branch with slight angle\nmodule branch(len, r) {\n    rotate([0, 15, 0])\n        cylinder(h=len, r=r, r2=r*0.7, $fn=6);\n}\n\n// Palmately compound leaf (5 leaflets)\nmodule leaf() {\n    // Central stem\n    color(\"green\")\n    cylinder(h=leaf_length, r=leaf_thickness/2, $fn=4);\n    \n    // Five leaflets in palmate arrangement\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, leaf_width/3, leaf_length*0.7])\n        rotate([0, 30, 0])\n        scale([1, 0.6, 1])\n        color(\"darkgreen\")\n        cube([leaf_length*0.6, leaf_width, leaf_thickness], center=true);\n    }\n}\n\n// Trumpet-shaped flower\nmodule flower() {\n    // Flower base\n    color(\"lightpink\")\n    translate([0, 0, -flower_depth/2])\n    cylinder(h=flower_depth, r1=flower_radius*0.3, r2=flower_radius, $fn=petals);\n    \n    // Petal details\n    for(i=[0:petals-1]) {\n        rotate([0, 0, i*(360/petals)])\n        translate([flower_radius*0.6, 0, 0])\n        rotate([0, 30, 0])\n        color(\"pink\")\n        scale([1.2, 0.4, 0.8])\n        sphere(r=flower_radius/2, $fn=6);\n    }\n    \n    // Flower center\n    color(\"yellow\")\n    translate([0, 0, flower_depth/2])\n    sphere(r=flower_radius/0.4, $fn=8);\n}\n\n// Complete branch with leaves and flowers\nmodule branch_with_details() {\n    // Main branch\n    branch(branch_length, branch_radius);\n    \n    // Leaves along branch\n    for(i=[1:leaves_per_branch]) {\n        translate([0, 0, i*branch_length/(leaves_per_branch+1)])\n        rotate([0, 90, 45])\n        leaf();\n    }\n    \n    // Flowers at branch tip\n    translate([0, 0, branch_length])\n    flower();\n}\n\n// Main plant assembly\nmodule tabebuia() {\n    // Base for stability\n    color(\"brown\")\n    cylinder(h=base_height, r=base_radius, $fn=32);\n    \n    // Trunk\n    translate([0, 0, base_height])\n    trunk(trunk_height, trunk_radius, trunk_radius*0.8);\n    \n    // Branches\n    for(i=[0:branches-1]) {\n        rotate([0, 0, i*(360/branches)])\n        translate([0, 0, trunk_height*0.7])\n        rotate([0, 0, 30])\n        branch_with_details();\n    }\n}\n\n// Render the plant\ntabebuia();",
    "renders": true
  },
  {
    "plant": "poinciana",
    "openscad_code": "// Poinciana Plant - Realistic Style\n// Size: ~100mm height, suitable for 3D printing\n\n// Main parameters\ntrunk_height = 35;\ntrunk_radius = 4;\nmain_branch_length = 25;\nleaf_length = 12;\nleaf_width = 5;\nflower_radius = 8;\nflower_petal_length = 6;\n\nmodule trunk() {\n    // Main trunk with slight taper\n    cylinder(h=trunk_height, r1=trunk_radius, r2=trunk_radius*0.8, $fn=8);\n    \n    // Root flare at base\n    translate([0,0,-1])\n        cylinder(h=3, r1=trunk_radius*1.5, r2=trunk_radius, $fn=8);\n}\n\nmodule branch(length, angle, rotation) {\n    translate([0,0,trunk_height*0.8])\n        rotate([angle, 0, rotation]) {\n            // Branch structure\n            cylinder(h=length, r=trunk_radius*0.5, $fn=6);\n            \n            // Sub branches\n            for(i=[1:3]) {\n                translate([0,0,length*i/3])\n                    rotate([30-i*5, 0, i*120])\n                        cylinder(h=length*0.6, r=trunk_radius*0.3, $fn=5);\n            }\n        }\n}\n\nmodule leaf(stem_length) {\n    color(\"darkgreen\")\n    translate([0,0,stem_length])\n    rotate([90,0,0])\n    union() {\n        // Main leaf stem\n        cylinder(h=leaf_length, r=0.5, $fn=4);\n        \n        // Leaflets\n        for(i=[0:4]) {\n            translate([0, leaf_length*i/4, 0])\n            rotate([0, i*5, 0])\n            scale([1, 0.4, 0.1])\n                sphere(r=leaf_width, $fn=8);\n        }\n        \n        // Terminal leaflet\n        translate([0, leaf_length, 0])\n        scale([1.2, 0.5, 0.1])\n            sphere(r=leaf_width*0.8, $fn=8);\n    }\n}\n\nmodule flower() {\n    color(\"red\")\n    translate([0,0,flower_radius])\n    union() {\n        // Flower center\n        sphere(r=flower_radius*0.4, $fn=12);\n        \n        // Petals\n        for(i=[0:4]) {\n            rotate([0, 0, i*72])\n            translate([flower_radius*0.3, 0, 0])\n            rotate([30, 0, 0])\n            scale([1, 0.3, 0.1])\n                cylinder(h=flower_petal_length, r=flower_petal_length*0.4, $fn=8);\n        }\n        \n        // Stamens\n        for(i=[0:7]) {\n            rotate([0, 0, i*51])\n            translate([flower_radius*0.2, 0, flower_radius*0.3])\n            cylinder(h=2, r=0.2, $fn=3);\n        }\n    }\n}\n\nmodule leaf_cluster(branch_pos, branch_angle, branch_rot) {\n    translate(branch_pos)\n        rotate([branch_angle, 0, branch_rot]) {\n            // Main branch with leaves\n            cylinder(h=main_branch_length, r=trunk_radius*0.4, $fn=6);\n            \n            // Leaves along branch\n            for(i=[1:5]) {\n                translate([0,0,main_branch_length*i/6])\n                rotate([90-branch_angle, 0, i*45])\n                    leaf(main_branch_length*0.3);\n            }\n        }\n}\n\nmodule flower_cluster() {\n    // Flowers at branch tips\n    for(i=[1:4]) {\n        rotate([0, 0, i*90])\n        translate([main_branch_length*0.8, 0, trunk_height*0.8])\n            flower();\n    }\n}\n\n// Assemble the plant\nunion() {\n    // Main trunk\n    trunk();\n    \n    // Branches with leaves\n    leaf_cluster([0,0,0], 30, 45);\n    leaf_cluster([0,0,0], 25, 135);\n    leaf_cluster([0,0,0], 35, 225);\n    leaf_cluster([0,0,0], 20, 315);\n    \n    // Additional branches\n    branch(main_branch_length, 20, 0);\n    branch(main_branch_length*0.9, 25, 90);\n    branch(main_branch_length*0.8, 30, 180);\n    branch(main_branch_length*0.85, 35, 270);\n    \n    // Flowers\n    flower_cluster();\n}\n\n// Base for stability\ntranslate([0,0,-3])\n    cylinder(h=3, r=trunk_radius*2, $fn=16);",
    "renders": true
  },
  {
    "plant": "cassia",
    "openscad_code": "// Cassia Plant - Realistic Style - Medium Complexity\n// 3D Printable with 2mm walls, ~120mm height\n\n// Main parameters\nstem_height = 100;\nstem_diameter = 3;\nleaf_length = 25;\nleaf_width = 6;\nleaf_thickness = 1.5;\nflower_diameter = 8;\nflower_height = 4;\nseedpod_length = 35;\nseedpod_width = 4;\n\n// Stem module with slight natural curve\nmodule stem() {\n    union() {\n        // Main stem\n        for(i = [0:5:stem_height]) {\n            translate([0, 0, i]) \n                rotate([sin(i*2)*2, cos(i*2)*2, 0])\n                    cylinder(h=5.1, d=stem_diameter + sin(i*0.1), $fn=12);\n        }\n        \n        // Branching nodes\n        for(i = [30:20:stem_height-20]) {\n            translate([0, 0, i]) {\n                rotate([0, 90, 45]) cylinder(h=8, d=2.2, $fn=8);\n                rotate([0, 90, -45]) cylinder(h=8, d=2.2, $fn=8);\n            }\n        }\n    }\n}\n\n// Compound leaf with paired leaflets\nmodule compound_leaf() {\n    difference() {\n        // Main rachis\n        cylinder(h=leaf_length, d=1.5, center=true);\n        \n        // Leaflets along rachis\n        for(i = [-leaf_length/2+3:4:leaf_length/2-3]) {\n            for(side = [0, 180]) {\n                rotate([0, side, 0])\n                translate([leaf_width/2, 0, i])\n                scale([1, 0.3, 1])\n                    difference() {\n                        sphere(d=leaf_width, $fn=12);\n                        translate([leaf_width/2, 0, 0]) cube([leaf_width, leaf_width, leaf_width], center=true);\n                    }\n            }\n        }\n    }\n}\n\n// Individual cassia flower (yellow clusters)\nmodule flower() {\n    color(\"yellow\") {\n        for(i = [0:60:300]) {\n            rotate([0, 0, i])\n            translate([flower_diameter/2, 0, 0])\n                cylinder(h=flower_height, d=flower_diameter/2, $fn=6);\n        }\n        cylinder(h=flower_height, d=flower_diameter/3, $fn=12);\n    }\n}\n\n// Seed pod characteristic to cassia\nmodule seedpod() {\n    color(\"brown\") {\n        difference() {\n            // Main pod body\n            scale([1, 0.3, 1])\n                cylinder(h=seedpod_length, d=seedpod_width, $fn=20);\n            \n            // Segmentation lines\n            for(i = [-seedpod_length/2+3:4:seedpod_length/2-3]) {\n                translate([0, 0, i])\n                    cube([seedpod_width+1, seedpod_width, 0.5], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, stem_height/2]) stem();\n\n// Leaves along stem\nfor(z = [20:15:stem_height-10]) {\n    for(angle = [0:120:240]) {\n        rotate([0, 0, angle])\n        translate([stem_diameter/2, 0, z])\n        rotate([90, sin(z)*10, 0])\n            compound_leaf();\n    }\n}\n\n// Flower clusters at branch tips\nfor(z = [70, 85, 95]) {\n    translate([10*sin(z*2), 10*cos(z*2), z])\n        flower();\n    translate([-10*sin(z*2), -10*cos(z*2), z])\n        flower();\n}\n\n// Seed pods hanging down\nfor(z = [40:15:80]) {\n    translate([8*sin(z*3), 8*cos(z*3), z])\n    rotate([90, 0, 0])\n        seedpod();\n}",
    "renders": true
  },
  {
    "plant": "caesalpinia",
    "openscad_code": "// Caesalpinia plant – medium-complexity realistic 3D-printable model\n// Overall height ≈ 110 mm – printable on most FDM printers\n\n// Parameters\npot_h = 20;\npot_r = 25;\nsoil_h = 5;\nstem_h = 40;\nstem_r = 2.5;\njoint_r = 3;\nleaf_len = 18;\nleaf_w = 5;\nleaf_t = 1.2;\npinna_cnt = 8;\npinna_len = 8;\npinna_w = 2;\npinna_t = 0.8;\nflower_r = 4.5;\nflower_h = 7;\nstamen_len = 3;\n\n// Wall thickness\nwall = 2;\n\nmodule pot() {\n    difference() {\n        cylinder(h = pot_h, r = pot_r + wall, $fn = 48);\n        translate([0, 0, wall])\n            cylinder(h = pot_h + 1, r = pot_r, $fn = 48);\n    }\n}\n\nmodule soil() {\n    translate([0, 0, pot_h - soil_h])\n        cylinder(h = soil_h, r = pot_r - wall, $fn = 48);\n}\n\nmodule stem() {\n    cylinder(h = stem_h, r = stem_r, $fn = 16);\n}\n\nmodule leaf(stem_top) {\n    translate(stem_top)\n        rotate([0, 0, 45])\n            for (i = [0:1]) mirror([i ? 1 : 0, 0, 0]) {\n                // rachis\n                translate([0, 0, stem_r])\n                    rotate([90, 0, 0])\n                        cylinder(h = leaf_len, r = joint_r, $fn = 8);\n                \n                // pinnae\n                for (j = [0:pinna_cnt - 1]) {\n                    translate([0, leaf_len * (j + 0.5) / pinna_cnt, 0])\n                        rotate([0, 90, 0])\n                            scale([pinna_len, pinna_w, pinna_t])\n                                cube([1, 1, 1], center = true);\n                }\n            }\n}\n\nmodule flower(pos) {\n    translate(pos) {\n        // petals\n        for (a = [0:60:359]) rotate([0, 0, a])\n            translate([flower_r * 0.6, 0, 0])\n                rotate([0, 90, 0])\n                    scale([flower_r * 0.8, flower_r * 0.5, flower_h * 0.5])\n                        cylinder(h = 1, r1 = 1, r2 = 0.1, $fn = 6);\n        // center\n        cylinder(h = flower_h * 0.6, r = flower_r * 0.3, $fn = 16);\n        // stamens\n        for (b = [0:45:359]) rotate([0, 0, b])\n            translate([flower_r * 0.25, 0, flower_h * 0.6])\n                cylinder(h = stamen_len, r = 0.4, $fn = 8);\n    }\n}\n\nmodule plant() {\n    // Pot and soil\n    union() {\n        pot();\n        soil();\n    }\n\n    // Stem\n    translate([0, 0, pot_h])\n        stem();\n\n    // Leaves\n    for (l = [0:2]) {\n        angle = l * 120;\n        height = pot_h + stem_h * (0.3 + l * 0.25);\n        leaf([cos(angle) * 2, sin(angle) * 2, height]);\n    }\n\n    // Flowers\n    flower([0, 0, pot_h + stem_h]);\n    flower([stem_r * 2, stem_r * 2, pot_h + stem_h * 0.8]);\n    flower([-stem_r * 2, -stem_r * 2, pot_h + stem_h * 0.8]);\n}\n\nplant();",
    "renders": true
  },
  {
    "plant": "erythrina",
    "openscad_code": "// Erythrina (Coral Tree) - Medium Complexity Realistic Style\n// Overall height ~120 mm, 3D-printable\n\nmodule stem_segment(h, r) {\n    cylinder(h=h, r1=r, r2=r*0.9, $fn=12);\n}\n\nmodule thorn(len, base_r) {\n    rotate([0, 90, 0])\n    cylinder(h=len, r1=base_r, r2=0, $fn=6);\n}\n\nmodule leaf(len, wid) {\n    scale([1, wid/len, 0.3])\n    rotate([0, 90, 0])\n    sphere(d=len, $fn=32);\n}\n\nmodule leaflet_pair(len, wid) {\n    union() {\n        translate([0, 0, 0]) leaf(len, wid);\n        translate([0, wid*0.8, 0]) leaf(len*0.8, wid*0.7);\n    }\n}\n\nmodule flower_cluster() {\n    color(\"crimson\")\n    for (i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([0, 5, 0])\n        rotate([0, 90, 0])\n        cylinder(h=8, r1=2, r2=0, $fn=8);\n    }\n    sphere(d=4, $fn=12);\n}\n\nmodule main_trunk() {\n    union() {\n        // Central trunk\n        stem_segment(60, 4);\n        \n        // Thorns on trunk\n        for (i = [1:3:20]) {\n            rotate([0, 0, i*30])\n            translate([4, 0, i*2.5])\n            thorn(3, 0.8);\n        }\n    }\n}\n\nmodule branch(len, angle, start_r) {\n    translate([0, 0, 60])\n    rotate([angle*0.7, 0, angle])\n    stem_segment(len, start_r);\n}\n\nmodule compound_leaf(stem_len) {\n    color(\"darkgreen\")\n    for (i = [0:4]) {\n        translate([0, 0, i*stem_len/5])\n        rotate([0, 0, i*25])\n        translate([stem_len*0.3, 0, 0])\n        leaflet_pair(12, 8);\n    }\n    cylinder(h=stem_len, r=0.8, $fn=8);\n}\n\n// Base\ntranslate([0, 0, 0]) {\n    difference() {\n        cylinder(h=8, r=15, $fn=32);\n        cylinder(h=10, r=13, $fn=32);\n    }\n}\n\n// Main trunk\ntranslate([0, 0, 8]) main_trunk();\n\n// Primary branches\ntranslate([0, 0, 68]) {\n    for (a = [0:120:240]) {\n        rotate([0, 0, a])\n        translate([0, 0, 0])\n        branch(30, -20, 3);\n    }\n}\n\n// Secondary branches\ntranslate([0, 0, 98]) {\n    for (a = [30:120:390]) {\n        rotate([0, 0, a])\n        translate([0, 0, 0])\n        branch(20, -25, 2);\n    }\n}\n\n// Leaves\ntranslate([0, 0, 75]) {\n    for (a = [0:120:240]) {\n        rotate([0, 0, a])\n        translate([15, 0, 0])\n        compound_leaf(25);\n    }\n}\n\ntranslate([0, 0, 105]) {\n    for (a = [30:120:390]) {\n        rotate([0, 0, a])\n        translate([10, 0, 0])\n        compound_leaf(20);\n    }\n}\n\n// Flowers\ntranslate([0, 0, 118]) {\n    for (a = [0:72:360]) {\n        rotate([0, 0, a])\n        translate([8, 0, 0])\n        flower_cluster();\n    }\n}",
    "renders": true
  },
  {
    "plant": "butea",
    "openscad_code": "// Butea Plant - Flame of the Forest\n// Medium complexity realistic style\n// All dimensions in mm, printable size ~100mm tall\n// Wall thickness 2mm for 3D printing\n\n// Main module for the entire plant\nmodule butea_plant() {\n    // Trunk base\n    trunk();\n    \n    // Main branches\n    for(i = [0:120:360]) {\n        rotate([0, 0, i])\n        translate([0, 0, 15])\n        main_branch();\n    }\n    \n    // Roots visible above ground\n    surface_roots();\n}\n\n// Trunk module\nmodule trunk() {\n    difference() {\n        // Main trunk cylinder\n        cylinder(h = 40, d1 = 20, d2 = 15, $fn = 16);\n        \n        // Texture grooves\n        for(i = [0:30:360]) {\n            rotate([0, 0, i])\n            translate([8, 0, 0])\n            cube([4, 2, 40], center = true);\n        }\n    }\n}\n\n// Main branch structure\nmodule main_branch() {\n    union() {\n        // Branch segment\n        rotate([15, 0, 0])\n        cylinder(h = 35, d1 = 8, d2 = 5, $fn = 8);\n        \n        // Secondary branches\n        translate([0, 0, 25])\n        rotate([20, 0, 30])\n        secondary_branch();\n        \n        translate([0, 0, 25])\n        rotate([20, 0, -30])\n        secondary_branch();\n        \n        // Flower clusters\n        translate([0, 0, 35])\n        rotate([30, 0, 0])\n        flower_cluster();\n    }\n}\n\n// Secondary branches\nmodule secondary_branch() {\n    union() {\n        // Branch\n        cylinder(h = 20, d1 = 4, d2 = 2, $fn = 6);\n        \n        // Leaves\n        translate([0, 0, 10])\n        rotate([0, 0, 45])\n        leaf();\n        \n        translate([0, 0, 15])\n        rotate([0, 0, -45])\n        leaf();\n    }\n}\n\n// Butea leaf\nmodule leaf() {\n    difference() {\n        // Main leaf body\n        scale([1, 2.5, 0.5])\n        sphere(d = 8, $fn = 16);\n        \n        // Leaf stem\n        translate([0, -1, 0])\n        cube([1, 2, 1], center = true);\n        \n        // Vein groove\n        translate([0, 0, 0.5])\n        cube([0.5, 8, 0.5], center = true);\n    }\n}\n\n// Flower cluster\nmodule flower_cluster() {\n    // Central stalk\n    cylinder(h = 12, d = 1.5, $fn = 8);\n    \n    // Individual flowers\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([4, 0, 6])\n        flower();\n    }\n}\n\n// Individual flower\nmodule flower() {\n    union() {\n        // Flower base\n        sphere(d = 3, $fn = 8);\n        \n        // Petals - 5 per flower\n        for(i = [0:72:288]) {\n            rotate([0, 0, i])\n            translate([2, 0, 0])\n            scale([1.5, 0.5, 0.3])\n            sphere(d = 2, $fn = 8);\n        }\n    }\n}\n\n// Surface roots\nmodule surface_roots() {\n    for(i = [0:90:270]) {\n        rotate([0, 0, i])\n        translate([10, 0, 0])\n        rotate([90, 0, 0])\n        scale([1, 3, 0.8])\n        cylinder(h = 8, d1 = 3, d2 = 1, $fn = 6);\n    }\n}\n\n// Generate the complete plant\ntranslate([0, 0, 5])\nbutea_plant();",
    "renders": true
  },
  {
    "plant": "spathodea",
    "openscad_code": "// Spathodea Plant - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Main parameters\nstem_height = 80;\nstem_radius = 3;\nleaf_length = 35;\nleaf_width = 20;\nflower_height = 25;\nflower_radius = 12;\nwall_thickness = 2;\n\n// Stem module with branching structure\nmodule stem() {\n    // Main stem\n    cylinder(h=stem_height, r1=stem_radius, r2=stem_radius*0.8, $fn=8);\n    \n    // Side branches\n    for(i=[1:3]) {\n        translate([0, 0, stem_height * 0.3 * i])\n        rotate([0, 30 + i*10, 45*i])\n        cylinder(h=stem_height * 0.4, r1=stem_radius*0.6, r2=stem_radius*0.4, $fn=6);\n    }\n}\n\n// Leaf module with pinnate venation\nmodule leaf(length, width) {\n    // Main leaf blade - elliptical shape\n    scale([length/2, width/2, 1])\n    difference() {\n        sphere(r=1, $fn=24);\n        translate([0, 0, -1])\n        cube([2, 2, 2], center=true);\n    }\n    \n    // Midrib\n    translate([0, 0, 0.5])\n    color(\"darkgreen\")\n    scale([length*0.9, 1, 0.3])\n    cube([1, 1, 1], center=true);\n    \n    // Side veins\n    for(i=[-3:3]) {\n        if(i != 0) {\n            translate([i*length/8, 0, 0.5])\n            rotate([0, 0, i*15])\n            scale([length/4, 0.5, 0.2])\n            cube([1, 1, 1], center=true);\n        }\n    }\n    \n    // Petiole\n    translate([-length/2, 0, -wall_thickness])\n    cylinder(h=wall_thickness*2, r=wall_thickness, $fn=6);\n}\n\n// Flower bud module\nmodule flower_bud() {\n    // Calyx\n    translate([0, 0, -wall_thickness])\n    cylinder(h=wall_thickness*2, r=flower_radius*0.7, $fn=12);\n    \n    // Corolla - 5 petals in typical spathodea shape\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([flower_radius*0.4, 0, wall_thickness])\n        rotate([0, 20, 0])\n        scale([flower_radius*0.8, flower_radius*0.4, flower_height*0.6])\n        difference() {\n            sphere(r=1, $fn=12);\n            translate([-1, 0, 0])\n            cube([2, 2, 2], center=true);\n        }\n    }\n    \n    // Stamens\n    for(i=[0:9]) {\n        rotate([0, 0, i*40])\n        translate([flower_radius*0.5, 0, flower_height*0.8])\n        cylinder(h=flower_height*0.3, r=0.3, $fn=4);\n    }\n}\n\n// Seed pod module\nmodule seed_pod() {\n    // Pod body - elongated capsule\n    translate([0, 0, -flower_height/2])\n    scale([flower_radius*0.5, flower_radius*0.3, flower_height*1.2])\n    difference() {\n        sphere(r=1, $fn=12);\n        translate([0, 0, -1.2])\n        cube([2, 2, 2], center=true);\n    }\n    \n    // Seed lines\n    for(i=[-2:2]) {\n        translate([i*flower_radius*0.15, 0, 0])\n        color(\"brown\")\n        cube([wall_thickness, flower_radius*0.25, flower_height], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    translate([0, 0, -5])\n    cylinder(h=5, r=15, $fn=16);\n    \n    // Stem structure\n    stem();\n    \n    // Leaves along stem\n    for(i=[0:5]) {\n        translate([0, 0, 10 + i*12])\n        rotate([0, 15 + i*5, 45*i])\n        translate([stem_radius*1.5, 0, 0])\n        rotate([0, 0, -30])\n        leaf(leaf_length - i*2, leaf_width - i);\n    }\n    \n    // Terminal flower cluster\n    translate([0, 0, stem_height + 5])\n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n        translate([flower_radius*0.8, 0, 0])\n        flower_bud();\n    }\n    \n    // Side flowers\n    translate([0, 0, stem_height * 0.6])\n    rotate([0, 30, 45])\n    translate([stem_radius*2, 0, 0])\n    flower_bud();\n    \n    // Seed pod\n    translate([0, 0, stem_height * 0.3])\n    rotate([0, -20, -30])\n    translate([stem_radius*1.5, 0, 0])\n    seed_pod();\n}",
    "renders": true
  },
  {
    "plant": "delonix",
    "openscad_code": "// Delonix plant (medium complexity, realistic style)\n// 3D printable, ~100mm tall\n\n// Parameters\nscale_factor = 1;\ntrunk_h = 60 * scale_factor;\ntrunk_r = 3 * scale_factor;\nbranch_len = 25 * scale_factor;\nleaflet_l = 12 * scale_factor;\nleaflet_w = 3 * scale_factor;\nflower_d = 8 * scale_factor;\nflower_h = 3 * scale_factor;\npod_l = 35 * scale_factor;\npod_w = 8 * scale_factor;\nwall = 2; // 3D print wall thickness\n\n// Main trunk\nmodule trunk() {\n    cylinder(h=trunk_h, r=trunk_r, $fn=16);\n}\n\n// Branch with leaves\nmodule branch(angle, len) {\n    rotate([0, angle, 0])\n    translate([0, 0, trunk_h - 10])\n    union() {\n        // Branch stem\n        cylinder(h=len, r=trunk_r * 0.8, $fn=12);\n        \n        // Leaves on branch\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120])\n            translate([0, len * 0.8, 0])\n            rotate([90, 0, -30])\n            leaf_cluster();\n        }\n    }\n}\n\n// Single leaflet\nmodule leaflet() {\n    scale([1, 0.3, 1])\n    sphere(d=leaflet_l, $fn=8);\n}\n\n// Bipinnate leaf cluster\nmodule leaf_cluster() {\n    // Main rachis\n    cylinder(h=leaflet_l * 1.2, r=wall, $fn=6);\n    \n    // Secondary leaflets\n    for (i = [0:3]) {\n        rotate([0, 0, i * 45 - 67.5])\n        translate([0, 0, i * leaflet_l * 0.3])\n        union() {\n            // Left leaflet\n            translate([leaflet_w, 0, 0])\n            rotate([0, 0, -15])\n            leaflet();\n            \n            // Right leaflet\n            translate([-leaflet_w, 0, 0])\n            rotate([0, 0, 15])\n            leaflet();\n        }\n    }\n}\n\n// Delonix flower\nmodule flower() {\n    // Flower center\n    cylinder(h=flower_h, r=flower_d * 0.3, $fn=12);\n    \n    // Petals (5 petals typical for delonix)\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([flower_d * 0.4, 0, flower_h/2])\n        scale([1.2, 0.5, 0.3])\n        sphere(d=flower_d, $fn=8);\n    }\n}\n\n// Seed pod\nmodule seed_pod() {\n    // Main pod body\n    scale([1, 0.8, 0.3])\n    cylinder(h=pod_l, r=pod_w/2, $fn=16);\n    \n    // Pod seam\n    translate([0, 0, -0.5])\n    cube([pod_l, wall, 1], center=true);\n}\n\n// Base with roots\nmodule base() {\n    // Root flare\n    cylinder(h=8, r1=trunk_r * 2, r2=trunk_r * 1.5, $fn=16);\n    \n    // Surface roots\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([trunk_r * 1.5, 0, 4])\n        scale([1.5, 0.5, 0.5])\n        sphere(d=trunk_r * 4, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base and trunk\n    base();\n    translate([0, 0, 8])\n    trunk();\n    \n    // Main branches\n    for (a = [0:60:300]) {\n        rotate([0, 0, a])\n        branch(30 + a/10, branch_len);\n    }\n    \n    // Upper branches\n    for (a = [30:60:330]) {\n        rotate([0, 0, a])\n        translate([0, 0, trunk_h * 0.7])\n        branch(-20 - a/20, branch_len * 0.8);\n    }\n    \n    // Flowers on upper branches\n    for (a = [0:45:315]) {\n        rotate([0, 0, a])\n        translate([branch_len * 0.7, 0, trunk_h * 0.85])\n        rotate([0, -30, 0])\n        flower();\n    }\n    \n    // Seed pods\n    for (a = [15:60:255]) {\n        rotate([0, 0, a])\n        translate([branch_len * 0.6, 0, trunk_h * 0.6])\n        rotate([0, 45, 0])\n        seed_pod();\n    }\n}",
    "renders": true
  },
  {
    "plant": "parsley",
    "openscad_code": "// Realistic Parsley Plant - Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 32;\n\n// Main parameters\npot_height = 35;\npot_radius = 25;\nstem_height = 80;\nleaf_count = 12;\nleaf_length = 30;\nleaf_width = 15;\n\n// Pot module\nmodule pot() {\n    // Outer pot\n    cylinder(h = pot_height, r1 = pot_radius + 2, r2 = pot_radius * 0.8);\n    \n    // Inner cavity\n    translate([0, 0, 2])\n        cylinder(h = pot_height - 4, r1 = pot_radius, r2 = pot_radius * 0.8 - 2);\n    \n    // Bottom drainage hole\n    translate([0, 0, -1])\n        cylinder(h = 3, r = 3);\n}\n\n// Single parsley leaf module\nmodule leaf(length, width, twist) {\n    translate([0, 0, -width/2])\n        scale([length/width, 1, 0.5])\n            rotate([0, 0, twist])\n                sphere(width/2);\n}\n\n// Stem module with leaves\nmodule stem(stem_h, leaf_c) {\n    // Main stem\n    cylinder(h = stem_h, r = 2);\n    \n    // Generate leaves along stem\n    for(i = [0:leaf_c-1]) {\n        angle = i * 360 / leaf_c;\n        height = 10 + (i * (stem_h - 20) / leaf_c);\n        \n        // Left side leaf\n        translate([0, 0, height])\n            rotate([0, 90, angle])\n                translate([0, 0, -leaf_width/2])\n                    leaf(leaf_length, leaf_width, 15);\n        \n        // Right side leaf\n        translate([0, 0, height])\n            rotate([0, 90, angle + 180])\n                translate([0, 0, -leaf_width/2])\n                    leaf(leaf_length, leaf_width, -15);\n    }\n}\n\n// Root cluster module\nmodule root_cluster() {\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([5, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 15, r1 = 2, r2 = 1);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Pot\n    color(\"saddlebrown\")\n        pot();\n    \n    // Potting soil\n    translate([0, 0, 2])\n        color(\"saddlebrown\")\n            cylinder(h = 3, r1 = pot_radius - 1, r2 = pot_radius * 0.8 - 1.5);\n    \n    // Root system inside pot\n    translate([0, 0, 5])\n        color(\"tan\")\n            root_cluster();\n    \n    // Main plant stems\n    for(i = [0:2]) {\n        angle = i * 120;\n        translate([cos(angle) * 8, sin(angle) * 8, 5])\n            rotate([5 + i * 2, 0, angle])\n                color(\"forestgreen\")\n                    stem(stem_height - i * 10, leaf_count - i * 2);\n    }\n    \n    // Central tallest stem\n    translate([0, 0, 5])\n        rotate([0, 0, 0])\n            color(\"forestgreen\")\n                stem(stem_height + 10, leaf_count + 2);\n}",
    "renders": true
  },
  {
    "plant": "cilantro",
    "openscad_code": "$fn = 32; // Smooth curves\n\n// Overall scale factor to fit 3D printer bed\nscale_factor = 0.8;\nscale(scale_factor) {\n\n// Pot\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = 30, r1 = 25, r2 = 20, center = false);\n        // Inner hollow\n        translate([0, 0, 2])\n            cylinder(h = 28, r1 = 23, r2 = 18, center = false);\n    }\n}\n\n// Stem\nmodule stem(height, angle) {\n    rotate([0, 0, angle])\n        translate([0, 0, 5])\n            cylinder(h = height, r = 1.5, center = false);\n}\n\n// Leaf segment (single leaflet)\nmodule leaflet(length, width, angle) {\n    rotate([0, 0, angle])\n        translate([length/2, 0, 0])\n            scale([length, width, 1])\n                sphere(r = 1, center = true);\n}\n\n// Compound leaf\nmodule compound_leaf(stem_length, leaf_count, spread_angle) {\n    union() {\n        // Main stem for this leaf\n        stem(stem_length, 0);\n        \n        // Leaflets along stem\n        for(i = [1:leaf_count]) {\n            translate([0, 0, (i * stem_length) / (leaf_count + 1) + 5])\n                rotate([90, 0, 0])\n                    leaflet(12, 4, spread_angle);\n            translate([0, 0, (i * stem_length) / (leaf_count + 1) + 5])\n                rotate([90, 0, 0])\n                    leaflet(12, 4, -spread_angle);\n        }\n    }\n}\n\n// Whole plant structure\nunion() {\n    // Pot\n    pot();\n    \n    // Central stem cluster\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([0, 0, 30])\n                compound_leaf(35, 4, 20);\n    }\n    \n    // Outer leaves\n    for(i = [0:8]) {\n        rotate([0, 0, i * 45])\n            translate([5 * cos(i * 45), 5 * sin(i * 45), 30])\n                compound_leaf(25, 3, 25);\n    }\n    \n    // Top cluster\n    for(i = [0:3]) {\n        rotate([0, 0, i * 120])\n            translate([0, 0, 65])\n                compound_leaf(20, 2, 30);\n    }\n    \n    // Small filler leaves\n    for(i = [0:10]) {\n        rotate([0, 0, i * 36])\n            translate([8 * cos(i * 36), 8 * sin(i * 36), 35])\n                compound_leaf(15, 2, 35);\n    }\n}\n\n}",
    "renders": true
  },
  {
    "plant": "coriander",
    "openscad_code": "// Coriander Plant - Realistic Medium Complexity\n// Height: ~120mm, suitable for 3D printing\n\n$fn = 32;\n\n// Main stem module\nmodule stem(height, radius) {\n    cylinder(h=height, r=radius, $fn=8);\n}\n\n// Leaf module - compound pinnate leaf\nmodule leaf(stem_len, leaf_len, width, angle) {\n    rotate([0, 0, angle]) {\n        // Main leaf stem\n        color(\"darkgreen\")\n        cylinder(h=stem_len, r=1.2, $fn=6);\n        \n        // Leaflets\n        for(i = [0:2:stem_len-5]) {\n            translate([0, 0, i]) {\n                rotate([0, 70, 0]) {\n                    // Left leaflet\n                    translate([-leaf_len/2, 0, 0])\n                    scale([1, 0.3, 0.1])\n                    sphere(leaf_len/2);\n                    \n                    // Right leaflet\n                    translate([leaf_len/2, 0, 0])\n                    scale([1, 0.3, 0.1])\n                    sphere(leaf_len/2);\n                }\n            }\n        }\n    }\n}\n\n// Flower cluster (umbel)\nmodule flower_cluster(pos, size) {\n    translate(pos) {\n        // Central stem\n        cylinder(h=size/2, r=1, $fn=6);\n        \n        // Individual flowers\n        for(i = [0:15:359]) {\n            rotate([0, 0, i]) {\n                translate([size/2, 0, size/2]) {\n                    sphere(2, $fn=8);\n                    translate([0, 0, 2])\n                    sphere(1.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Seed cluster\nmodule seed_cluster(pos, size) {\n    translate(pos) {\n        color(\"saddlebrown\")\n        for(i = [0:45:359]) {\n            rotate([0, 0, i]) {\n                translate([size/3, 0, 0]) {\n                    scale([1, 0.7, 0.7])\n                    sphere(2.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Main plant structure\nmodule coriander_plant() {\n    // Base root bulb\n    translate([0, 0, -5]) {\n        color(\"sandybrown\")\n        sphere(8);\n    }\n    \n    // Main stem\n    translate([0, 0, 0]) {\n        color(\"darkgreen\")\n        stem(100, 3);\n        \n        // Lower leaves - larger\n        for(i = [0:60:240]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, 10 + i/3]) {\n                    leaf(35, 15, 3, 30);\n                }\n            }\n        }\n        \n        // Upper leaves - smaller\n        for(i = [0:90:270]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, 40 + i/4]) {\n                    leaf(25, 12, 2.5, 20);\n                }\n            }\n        }\n        \n        // Top flower clusters\n        translate([0, 0, 90]) {\n            flower_cluster([0, 0, 0], 25);\n            flower_cluster([15, 0, 5], 20);\n            flower_cluster([-15, 0, 5], 20);\n        }\n        \n        // Seed clusters on side branches\n        translate([0, 0, 75]) {\n            seed_cluster([20, 0, 0], 15);\n            seed_cluster([-20, 0, 0], 15);\n        }\n    }\n}\n\n// Generate the plant\ncoriander_plant();",
    "renders": true
  },
  {
    "plant": "dill",
    "openscad_code": "// Dill Plant - Realistic Style, Medium Complexity\n// Approx 100mm tall, 3D printable with 2mm walls\n\nmodule stem_segment(h, r, taper=1) {\n    // Single hollow stem segment with 2mm walls\n    difference() {\n        cylinder(h=h, r1=r, r2=r*taper, $fn=16);\n        translate([0,0,-0.1]) \n            cylinder(h=h+0.2, r1=r-2, r2=(r*taper)-2, $fn=16);\n    }\n}\n\nmodule leaf_segment(length, width, angle, curl) {\n    // Single dill leaf segment - thin and feathery\n    translate([0,0,length/2])\n    rotate([0, angle, 0])\n    rotate([curl, 0, 0])\n    scale([1, 0.3, 0.1])\n    difference() {\n        sphere(d=width, $fn=8);\n        translate([0,0,2]) sphere(d=width-4, $fn=8);\n    }\n}\n\nmodule leaf_branch(base_r, height, num_leaves) {\n    // Branch with multiple leaf segments\n    union() {\n        stem_segment(height, base_r, 0.7);\n        \n        for(i=[0:num_leaves-1]) {\n            rotate([0, 0, i*(360/num_leaves)])\n            translate([0, 0, height*0.8])\n            leaf_segment(height*0.5, 8, 45, 15);\n            \n            rotate([0, 0, i*(360/num_leaves)+20])\n            translate([0, 0, height*0.6])\n            leaf_segment(height*0.4, 6, 35, -10);\n            \n            rotate([0, 0, i*(360/num_leaves)-20])\n            translate([0, 0, height*0.4])\n            leaf_segment(height*0.3, 5, 25, 20);\n        }\n    }\n}\n\nmodule umbel(radius, num_subbranches) {\n    // Main flower head (umbel) with sub-branches\n    union() {\n        stem_segment(5, radius/2, 1);\n        \n        for(i=[0:num_subbranches-1]) {\n            rotate([0, 0, i*(360/num_subbranches)])\n            translate([radius*0.8, 0, 0])\n            rotate([0, 90, 0])\n            linear_extrude(height=2)\n            circle(r=1.5, $fn=8);\n            \n            // Tiny flowers\n            for(j=[0:5]) {\n                rotate([0, 0, j*60])\n                translate([radius*0.8, 0, 0])\n                sphere(d=2, $fn=6);\n            }\n        }\n    }\n}\n\nmodule dill_plant() {\n    // Main dill plant structure\n    color(\"darkolivegreen\")\n    union() {\n        // Main stem\n        translate([0,0,0])\n        stem_segment(60, 4, 0.5);\n        \n        // First level branches\n        for(i=[0:3]) {\n            rotate([0, 0, i*90+15])\n            translate([0,0,20])\n            rotate([30, 0, 0])\n            leaf_branch(3, 35, 6);\n        }\n        \n        // Second level branches\n        for(i=[0:2]) {\n            rotate([0, 0, i*120+30])\n            translate([0,0,40])\n            rotate([45, 0, 0])\n            leaf_branch(2.5, 25, 5);\n        }\n        \n        // Top umbel flower heads\n        translate([0,0,60])\n        umbel(12, 12);\n        \n        // Side flower heads\n        translate([0,0,50])\n        rotate([0, 0, 45])\n        rotate([30, 0, 0])\n        umbel(8, 8);\n        \n        translate([0,0,45])\n        rotate([0, 0, -60])\n        rotate([25, 0, 0])\n        umbel(7, 6);\n    }\n}\n\n// Scale to fit 100mm height\nscale([1,1,1])\ndill_plant();",
    "renders": true
  },
  {
    "plant": "fennel",
    "openscad_code": "// Fennel Plant - Realistic Medium Complexity\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 30;\n\nmodule stem_segment(height, radius, taper) {\n    // Creates a tapered stem segment\n    cylinder(h = height, r1 = radius, r2 = radius * taper, center = false);\n}\n\nmodule leaf_segment(length, width, thickness) {\n    // Creates a single fennel leaf segment (feather-like)\n    translate([0, 0, thickness/2])\n        difference() {\n            // Main leaf shape\n            scale([1, 0.3, 1])\n                sphere(d = width);\n            \n            // Create feathery cuts\n            for(i = [0:15:180]) {\n                rotate([0, 0, i])\n                    translate([width/4, 0, -thickness])\n                        cube([width/2, width/3, thickness*2], center = true);\n            }\n        }\n}\n\nmodule leaf_cluster(count, base_length) {\n    // Creates a cluster of leaves at one level\n    for(i = [0:count-1]) {\n        angle = (360 / count) * i;\n        rotate([0, 0, angle])\n            translate([base_length/2, 0, 0])\n                rotate([0, 90, 0])\n                    leaf_segment(base_length, base_length/2, 2);\n    }\n}\n\nmodule main_stem() {\n    // Main vertical stem with branches\n    union() {\n        // Base stem\n        stem_segment(80, 4, 0.8);\n        \n        // Lower branches\n        for(level = [1:3]) {\n            translate([0, 0, level * 20])\n                rotate([0, 0, level * 45])\n                    branch(60 - level * 10);\n        }\n    }\n}\n\nmodule branch(length) {\n    // Creates a branching stem\n    rotate([30, 0, 0])\n        union() {\n            stem_segment(length, 3, 0.7);\n            \n            // Add leaf clusters along branch\n            for(pos = [length/3, 2*length/3]) {\n                translate([0, 0, pos])\n                    leaf_cluster(5, 20 - pos/3);\n            }\n        }\n}\n\nmodule flower_head() {\n    // Creates the characteristic fennel flower/seed head\n    translate([0, 0, 85])\n        union() {\n            // Central dome\n            sphere(d = 15);\n            \n            // Seed stalks\n            for(i = [0:15]) {\n                rotate([0, 0, i * 24])\n                    translate([7, 0, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h = 8, r = 0.5);\n            }\n            \n            // Tiny flowers/seeds\n            for(i = [0:30]) {\n                angle = i * 12;\n                rotate([0, 0, angle])\n                    translate([5 + sin(i*5)*2, 0, 2 + cos(i*5)*2])\n                        sphere(d = 1.5);\n            }\n        }\n}\n\nmodule bulb_base() {\n    // Creates the bulbous base\n    translate([0, 0, -10])\n        union() {\n            // Main bulb\n            scale([1, 1, 0.6])\n                sphere(d = 25);\n            \n            // Root extensions\n            for(i = [0:5]) {\n                rotate([0, 0, i * 60])\n                    translate([8, 0, -5])\n                        rotate([45, 0, 0])\n                            cylinder(h = 15, r1 = 3, r2 = 1);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    // Base bulb\n    bulb_base();\n    \n    // Main stem structure\n    main_stem();\n    \n    // Top flower head\n    flower_head();\n    \n    // Additional leaves near base\n    translate([0, 0, 5])\n        leaf_cluster(8, 25);\n}",
    "renders": true
  },
  {
    "plant": "chervil",
    "openscad_code": "// Chervil plant - realistic style, medium complexity\n// Overall height ~120mm\n\n$fn = 36;\nstem_d = 3;\nstem_h = 80;\nleaflet_l = 15;\nleaflet_w = 3;\npetal_l = 1.5;\npetal_w = 0.8;\numbel_r = 15;\n\nmodule stem(h, base_d=stem_d) {\n    // tapered green stem\n    color(\"darkgreen\")\n    cylinder(h = h, d1 = base_d, d2 = base_d * 0.8, $fn=12);\n}\n\nmodule leaflet(l = leaflet_l, w = leaflet_w, h = 1.2) {\n    // small lacy leaflet with serrated edge via stacked cubes\n    color(\"forestgreen\")\n    for(i = [0:5]) {\n        translate([0, i*l/6, 0])\n        cube([w, l/6, h], center=true);\n    }\n    // add tiny side lobes\n    for(i = [-2:2]) {\n        translate([i*w/3, l/2, 0])\n        cube([abs(i)*1.2, l/4, h], center=true);\n    }\n}\n\nmodule leaf_pair(angle, stem_pos) {\n    rotate([0, 0, angle])\n    translate([0, stem_pos, 0])\n    rotate([90, 0, 30])\n    leaflet();\n    \n    rotate([0, 0, angle+180])\n    translate([0, stem_pos, 0])\n    rotate([90, 0, -30])\n    leaflet();\n}\n\nmodule compound_leaf(stem_length = 25) {\n    // central rachis\n    stem(stem_length, 2);\n    \n    // 3-4 pairs of leaflets\n    for(i = [0:3]) {\n        leaf_pair(i*30, i*stem_length/4);\n    }\n    // terminal leaflet\n    translate([0, stem_length, 0])\n    rotate([90, 0, 0])\n    leaflet();\n}\n\nmodule flower_petal() {\n    // tiny white petal\n    color(\"white\")\n    scale([petal_w, petal_l, 0.6])\n    sphere(d = 1.2);\n}\n\nmodule umbel() {\n    // compound umbel of tiny white flowers\n    color(\"white\")\n    for(a = [0:45:315]) {\n        rotate([0, 0, a])\n        translate([umbel_r * 0.7, 0, 0]) {\n            // primary rays\n            stem(10, 1);\n            for(b = [0:60:300]) {\n                rotate([0, 0, b])\n                translate([4, 0, 8])\n                scale(0.6)\n                stem(6, 0.8);\n                \n                // flowers at tips\n                for(c = [0:120:240]) {\n                    rotate([0, 0, c])\n                    translate([1.5, 0, 12])\n                    flower_petal();\n                }\n            }\n        }\n    }\n}\n\n// Main plant\ntranslate([0, 0, 0]) {\n    // main stem\n    stem(stem_h);\n    \n    // 3 compound leaves in whorl\n    for(i = [0:120:240]) {\n        rotate([0, 0, i])\n        translate([0, 0, 20])\n        rotate([30, 0, 0])\n        compound_leaf(30);\n    }\n    \n    // second whorl higher up\n    for(i = [60:120:300]) {\n        rotate([0, 0, i])\n        translate([0, 0, 50])\n        rotate([20, 0, 0])\n        compound_leaf(25);\n    }\n    \n    // flowering umbels at top\n    translate([0, 0, stem_h-5])\n    umbel();\n    \n    // smaller umbel below\n    translate([0, 0, stem_h-15])\n    scale(0.7)\n    umbel();\n}",
    "renders": true
  },
  {
    "plant": "tarragon",
    "openscad_code": "// Tarragon Plant - Realistic Style, Medium Complexity\n// Overall height ~120mm, suitable for 3D printing\n\n// Main parameters\nstem_height = 80;\nstem_dia = 4;\nleaf_length = 25;\nleaf_width = 3;\nleaf_thickness = 1.5;\nnum_stems = 5;\nnum_leaf_pairs = 6;\npot_height = 35;\npot_dia = 45;\n\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_height, d=pot_dia, $fn=64);\n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h=pot_height-2, d=pot_dia-4, $fn=64);\n    }\n}\n\nmodule stem_segment(height, diameter) {\n    cylinder(h=height, d=diameter, $fn=16);\n}\n\nmodule tarragon_leaf(length, width, thickness) {\n    // Tarragon leaves are long and narrow\n    scale([1, width/length, thickness/width])\n        sphere(d=length, $fn=32);\n}\n\nmodule leaf_pair(stem_pos, angle, height) {\n    rotate([0, 0, angle])\n    translate([0, 0, height])\n    union() {\n        // Left leaf\n        rotate([0, -30, -30])\n        translate([stem_pos/2, 0, 0])\n            tarragon_leaf(leaf_length, leaf_width, leaf_thickness);\n        \n        // Right leaf\n        rotate([0, -30, 30])\n        translate([-stem_pos/2, 0, 0])\n            tarragon_leaf(leaf_length, leaf_width, leaf_thickness);\n    }\n}\n\nmodule main_stem(stem_id) {\n    stem_angle = stem_id * 15 - 30;\n    stem_lean = stem_id * 5 - 10;\n    \n    rotate([stem_lean, 0, stem_angle])\n    translate([0, 0, pot_height])\n    union() {\n        // Main stem\n        stem_segment(stem_height, stem_dia);\n        \n        // Add leaf pairs along stem\n        for (i = [1:num_leaf_pairs]) {\n            leaf_height = (i * stem_height / (num_leaf_pairs + 1)) - 5;\n            leaf_angle = i * 60;\n            leaf_pair(stem_dia + 4, leaf_angle, leaf_height);\n        }\n        \n        // Add smaller side stems\n        if (stem_id % 2 == 0) {\n            translate([0, 0, stem_height * 0.6])\n            rotate([20, 0, 60])\n            union() {\n                stem_segment(stem_height * 0.4, stem_dia * 0.7);\n                for (j = [1:3]) {\n                    side_leaf_height = j * 10;\n                    side_leaf_angle = j * 45;\n                    leaf_pair(stem_dia * 0.7 + 2, side_leaf_angle, side_leaf_height);\n                }\n            }\n        }\n    }\n}\n\n// Build the plant\nunion() {\n    // Pot\n    pot();\n    \n    // Stems\n    for (i = [0:num_stems-1]) {\n        main_stem(i);\n    }\n    \n    // Base soil\n    translate([0, 0, pot_height-5])\n    cylinder(h=5, d=pot_dia-2, $fn=64);\n}",
    "renders": true
  },
  {
    "plant": "marjoram",
    "openscad_code": "// Marjoram plant - realistic style, medium complexity\n// Height ~120mm, suitable for 3D printing\n\nmodule stem_segment(height, radius) {\n    // Create stem segment with slight taper\n    cylinder(h=height, r1=radius, r2=radius*0.9, $fn=8);\n}\n\nmodule leaf(length, width, thickness) {\n    // Marjoram leaf - small oval with pointed tip\n    translate([0, length/2, 0])\n    scale([width/2, length, thickness/2])\n    sphere(1, $fn=16);\n}\n\nmodule leaf_pair(stem_height, angle_offset) {\n    // Pair of opposite leaves along stem\n    translate([0, 0, stem_height])\n    rotate([0, 0, angle_offset])\n    union() {\n        // Left leaf\n        rotate([0, 30, -30])\n        translate([0, 0, 0])\n        leaf(8, 4, 0.6);\n        \n        // Right leaf\n        rotate([0, 30, 30])\n        translate([0, 0, 0])\n        leaf(8, 4, 0.6);\n    }\n}\n\nmodule small_flower() {\n    // Tiny marjoram flower cluster\n    translate([0, 0, 0])\n    union() {\n        // Central bulb\n        sphere(1.2, $fn=8);\n        \n        // Petals\n        for(i=[0:45:315]) {\n            rotate([0, 0, i])\n            translate([1.8, 0, 0])\n            scale([0.8, 1.5, 0.8])\n            sphere(0.8, $fn=6);\n        }\n    }\n}\n\nmodule flower_cluster(height) {\n    // Cluster of flowers at stem tip\n    translate([0, 0, height])\n    union() {\n        for(i=[0:60:300]) {\n            rotate([0, 0, i])\n            translate([4, 0, 0])\n            small_flower();\n        }\n    }\n}\n\nmodule main_stem() {\n    // Main vertical stem with branches\n    union() {\n        // Main stem\n        stem_segment(80, 1.2);\n        \n        // First branch pair\n        translate([0, 0, 20])\n        rotate([0, 0, 0])\n        stem_segment(25, 0.8);\n        \n        translate([0, 0, 20])\n        rotate([0, 0, 180])\n        stem_segment(25, 0.8);\n        \n        // Second branch pair\n        translate([0, 0, 40])\n        rotate([0, 0, 90])\n        stem_segment(20, 0.6);\n        \n        translate([0, 0, 40])\n        rotate([0, 0, 270])\n        stem_segment(20, 0.6);\n        \n        // Third branch pair\n        translate([0, 0, 60])\n        rotate([0, 0, 45])\n        stem_segment(15, 0.5);\n        \n        translate([0, 0, 60])\n        rotate([0, 0, 225])\n        stem_segment(15, 0.5);\n    }\n}\n\nmodule leaves_along_stem() {\n    // Add leaves along main stem and branches\n    union() {\n        // Leaves on main stem\n        for(i=[1:1:6]) {\n            leaf_pair(i*12, i*30);\n        }\n        \n        // Leaves on first branches\n        for(i=[1:1:3]) {\n            translate([0, 0, 20])\n            rotate([0, 0, 0])\n            translate([i*8, 0, 0])\n            rotate([0, 20, 0])\n            leaf_pair(0, i*60);\n            \n            translate([0, 0, 20])\n            rotate([0, 0, 180])\n            translate([i*8, 0, 0])\n            rotate([0, 20, 0])\n            leaf_pair(0, i*60);\n        }\n        \n        // Leaves on second branches\n        for(i=[1:1:2]) {\n            translate([0, 0, 40])\n            rotate([0, 0, 90])\n            translate([i*7, 0, 0])\n            rotate([0, 25, 0])\n            leaf_pair(0, i*90);\n            \n            translate([0, 0, 40])\n            rotate([0, 0, 270])\n            translate([i*7, 0, 0])\n            rotate([0, 25, 0])\n            leaf_pair(0, i*90);\n        }\n    }\n}\n\nmodule flowers_at_tips() {\n    // Add flower clusters at stem and branch tips\n    union() {\n        // Main stem flowers\n        flower_cluster(80);\n        \n        // First branch flowers\n        translate([0, 0, 20])\n        rotate([0, 0, 0])\n        translate([25, 0, 0])\n        flower_cluster(0);\n        \n        translate([0, 0, 20])\n        rotate([0, 0, 180])\n        translate([25, 0, 0])\n        flower_cluster(0);\n        \n        // Second branch flowers\n        translate([0, 0, 40])\n        rotate([0, 0, 90])\n        translate([20, 0, 0])\n        flower_cluster(0);\n        \n        translate([0, 0, 40])\n        rotate([0, 0, 270])\n        translate([20, 0, 0])\n        flower_cluster(0);\n        \n        // Third branch flowers\n        translate([0, 0, 60])\n        rotate([0, 0, 45])\n        translate([15, 0, 0])\n        flower_cluster(0);\n        \n        translate([0, 0, 60])\n        rotate([0, 0, 225])\n        translate([15, 0, 0])\n        flower_cluster(0);\n    }\n}\n\n// Base for stability\ncylinder(h=3, r=15, $fn=32);\n\n// Assemble the plant\ntranslate([0, 0, 3])\nunion() {\n    main_stem();\n    leaves_along_stem();\n    flowers_at_tips();\n}",
    "renders": true
  },
  {
    "plant": "savory",
    "openscad_code": "// Savory plant (Satureja) - realistic style, medium complexity\n// Overall size: ~100mm tall, printable without supports\n\n// Main plant module\nmodule savory_plant() {\n    // Base soil\n    color(\"saddlebrown\")\n    cylinder(h=8, r=25, $fn=32);\n    \n    // Central stem\n    translate([0,0,8])\n    color(\"green\")\n    cylinder(h=60, r=3, $fn=16);\n    \n    // Generate branching stems\n    for(i=[0:45:315]) {\n        rotate([0,0,i])\n        translate([0,0,15])\n        branch_stem(1);\n        \n        rotate([0,0,i+22])\n        translate([0,0,30])\n        branch_stem(0.8);\n        \n        rotate([0,0,i+11])\n        translate([0,0,45])\n        branch_stem(0.6);\n    }\n    \n    // Top flowering stems\n    for(i=[0:30:330]) {\n        rotate([0,0,i])\n        translate([0,0,55])\n        top_branch();\n    }\n}\n\n// Branching stem module\nmodule branch_stem(scale) {\n    translate([0,0,0])\n    rotate([15+rand()*10,0,0])\n    color(\"darkgreen\")\n    cylinder(h=25*scale, r=2*scale, $fn=12);\n    \n    // Leaves along branch\n    for(j=[0:25:50]) {\n        rotate([0,0,j])\n        translate([0,0,j*0.4*scale])\n        leaf_pair(scale);\n    }\n}\n\n// Leaf pair module\nmodule leaf_pair(scale) {\n    // Left leaf\n    translate([-5*scale,0,0])\n    rotate([0,90,0])\n    scale([scale,scale,scale])\n    color(\"forestgreen\")\n    linear_extrude(height=0.8, convexity=10)\n    polygon(points=[[0,0],[8,3],[10,8],[7,12],[2,10],[0,5]]);\n    \n    // Right leaf\n    translate([5*scale,0,0])\n    rotate([0,-90,0])\n    scale([scale,scale,scale])\n    color(\"forestgreen\")\n    linear_extrude(height=0.8, convexity=10)\n    polygon(points=[[0,0],[-8,3],[-10,8],[-7,12],[-2,10],[0,5]]);\n}\n\n// Top flowering branch\nmodule top_branch() {\n    translate([0,0,0])\n    rotate([20+rand()*15,0,0])\n    color(\"green\")\n    cylinder(h=15, r=1.5, $fn=8);\n    \n    // Small leaves\n    for(k=[0:45:180]) {\n        rotate([0,0,k])\n        translate([0,0,k*0.2])\n        leaf_pair(0.5);\n    }\n    \n    // Flower clusters\n    translate([0,0,15])\n    flower_cluster();\n}\n\n// Flower cluster module\nmodule flower_cluster() {\n    // Small white/purple flowers\n    for(a=[0:60:300]) {\n        rotate([0,0,a])\n        translate([4,0,0])\n        scale([0.3,0.3,0.3])\n        color(\"violet\")\n        sphere(r=2, $fn=12);\n    }\n    \n    // Central tiny flowers\n    for(b=[0:72:360]) {\n        rotate([0,0,b])\n        translate([2,0,0])\n        scale([0.2,0.2,0.2])\n        color(\"white\")\n        sphere(r=1.5, $fn=8);\n    }\n}\n\n// Random helper for natural variation\nfunction rand() = rands(0,1,1)[0];\n\n// Render the plant\nsavory_plant();",
    "renders": true
  },
  {
    "plant": "chive",
    "openscad_code": "// Realistic Chive Plant - Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 24;  // Resolution for curved surfaces\n\n// Overall dimensions\nplant_height = 120;\npot_diameter = 60;\npot_height = 40;\n\nmodule chive_plant() {\n    union() {\n        // Pot base\n        translate([0, 0, 0])\n            pot();\n        \n        // Soil surface\n        translate([0, 0, pot_height - 5])\n            soil();\n        \n        // Chive stems growing from center\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30 + (i % 2) * 15])  // Staggered arrangement\n                translate([0, 0, pot_height])\n                    chive_stem(i * 2 + 10, 60 + i * 5, 2 + (i % 3));\n        }\n        \n        // Small flower buds on some stems\n        for(i = [1:3:11]) {\n            rotate([0, 0, i * 30 + (i % 2) * 15])\n                translate([0, 0, pot_height + 60 + i * 5])\n                    flower_bud();\n        }\n    }\n}\n\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = pot_height, d = pot_diameter, $fn = 48);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = pot_height - 1, d = pot_diameter - 4, $fn = 48);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h = 3, d = 6, $fn = 16);\n    }\n    \n    // Pot rim\n    translate([0, 0, pot_height])\n        cylinder(h = 3, d1 = pot_diameter, d2 = pot_diameter + 4, $fn = 48);\n}\n\nmodule soil() {\n    // Soil surface with slight dome\n    difference() {\n        cylinder(h = 5, d = pot_diameter - 4, $fn = 48);\n        \n        // Slight concave surface\n        translate([0, 0, -1])\n            cylinder(h = 6, d = pot_diameter - 8, $fn = 48);\n    }\n}\n\nmodule chive_stem(base_radius, height, stem_thickness) {\n    // Stem base (slightly thicker at bottom)\n    translate([base_radius, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = height, d1 = stem_thickness * 2.5, d2 = stem_thickness, $fn = 8);\n    \n    // Hollow tube structure for 3D printing\n    difference() {\n        cylinder(h = height, d = stem_thickness * 2, $fn = 8);\n        translate([0, 0, 2])\n            cylinder(h = height - 4, d = stem_thickness * 1.6, $fn = 8);\n    }\n    \n    // Leaf blade structure at top\n    translate([0, 0, height])\n        rotate([0, 0, 45])\n            chive_leaf(stem_thickness * 3, 25);\n}\n\nmodule chive_leaf(width, length) {\n    // Single flat leaf blade\n    scale([1, 0.3, 1])\n        rotate([90, 0, 0])\n            cylinder(h = length, d = width, d2 = width * 0.7, $fn = 6);\n    \n    // Second blade at slight angle\n    rotate([0, 0, 120])\n        scale([1, 0.3, 1])\n            rotate([90, 0, 0])\n                cylinder(h = length * 0.9, d = width * 0.8, d2 = width * 0.6, $fn = 6);\n}\n\nmodule flower_bud() {\n    // Small spherical flower bud\n    sphere(d = 4);\n    \n    // Tiny stem connecting bud\n    translate([0, 0, -2])\n        cylinder(h = 3, d = 1.5, $fn = 8);\n}\n\n// Main assembly\nchive_plant();",
    "renders": true
  },
  {
    "plant": "garlic",
    "openscad_code": "// Garlic plant - realistic style, medium complexity\n// Height approx 100 mm\n\nmodule garlic_bulb() {\n    // Main bulb body with slight taper\n    difference() {\n        // Outer bulb shape\n        union() {\n            scale([1, 1, 0.9]) sphere(d=35, $fn=60);\n            translate([0, 0, -5]) cylinder(h=15, d1=35, d2=30, $fn=60);\n        }\n        \n        // Create garlic segments indentation\n        for(i=[0:7]) {\n            rotate([0, 0, i*45]) \n                translate([10, 0, -5]) \n                    rotate([0, 90, 0]) \n                        cylinder(h=20, d=8, $fn=20);\n        }\n    }\n    \n    // Root base\n    translate([0, 0, -12]) \n        cylinder(h=8, d=25, $fn=30);\n}\n\nmodule garlic_stem() {\n    // Main stem\n    translate([0, 0, 15]) {\n        rotate([0, 0, 5]) \n            cylinder(h=60, d1=8, d2=3, $fn=12);\n    }\n    \n    // Stem leaves\n    for(i=[0:3]) {\n        rotate([0, 0, i*90]) {\n            translate([0, 0, 45]) \n                rotate([30, 0, 0]) \n                    linear_extrude(height=2) \n                        polygon([[0,0], [25,0], [20,5], [5,5]]);\n        }\n    }\n}\n\nmodule garlic_cloves() {\n    // Individual cloves visible at base\n    for(i=[0:7]) {\n        rotate([0, 0, i*45]) {\n            translate([15, 0, -8]) {\n                scale([1, 0.7, 1]) \n                    rotate([0, 90, 0]) \n                        cylinder(h=12, d=8, $fn=12);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main bulb\n    garlic_bulb();\n    \n    // Visible cloves\n    garlic_cloves();\n    \n    // Stem\n    garlic_stem();\n    \n    // Small bulbils (top growth)\n    translate([0, 0, 75]) {\n        for(i=[0:4]) {\n            rotate([0, 0, i*72]) {\n                translate([0, 0, 0]) \n                    rotate([30, 0, 0]) \n                        sphere(d=6, $fn=12);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "plant": "onion",
    "openscad_code": "// Onion Plant - Realistic Style, Medium Complexity\n// 3D printable onion with bulb, roots, and green shoots\n\nmodule onion_bulb() {\n    // Main bulb - slightly flattened sphere with taper\n    union() {\n        // Core bulb\n        scale([1, 1, 0.8])\n        sphere(d=40, $fn=64);\n        \n        // Bottom taper\n        translate([0, 0, -15])\n        cylinder(h=15, d1=40, d2=25, $fn=64);\n    }\n}\n\nmodule onion_roots() {\n    // Root cluster at bottom\n    for(i = [0:35]) {\n        rotate([0, 0, i*10])\n        translate([8 + sin(i*3)*2, 0, -25])\n        rotate([95 + sin(i*2)*5, 0, 0])\n        cylinder(h=15 + sin(i*4)*3, d1=2.5, d2=1, $fn=8);\n    }\n}\n\nmodule onion_skin_layers() {\n    // Outer skin layers for realistic look\n    difference() {\n        // Outer skin\n        scale([1.02, 1.02, 1.02])\n        onion_bulb();\n        \n        // Remove inner part to create shell\n        translate([0, 0, 2])\n        scale([0.95, 0.95, 0.95])\n        onion_bulb();\n    }\n}\n\nmodule leaf_blade(height, angle, bend) {\n    // Individual leaf blade with slight curve\n    translate([0, 0, height])\n    rotate([0, 0, angle])\n    rotate([bend, 0, 0])\n    linear_extrude(height=2, center=true)\n    polygon(points=[\n        [0, 0],\n        [2, -15],\n        [1, -35],\n        [0, -40],\n        [-1, -35],\n        [-2, -15]\n    ]);\n}\n\nmodule green_shoots() {\n    // Central growing shoots\n    for(i = [0:7]) {\n        rotate([0, 0, i*45])\n        translate([0, 0, 15])\n        rotate([5 + i*2, 0, 0])\n        leaf_blade(0, 0, -10 + i*3);\n    }\n    \n    // Side shoots\n    for(i = [0:4]) {\n        rotate([0, 0, i*90 + 22.5])\n        translate([18, 0, 10])\n        rotate([0, 0, -20 + i*10])\n        leaf_blade(0, 0, -15);\n    }\n}\n\nmodule onion_plant() {\n    union() {\n        // Main bulb structure\n        onion_bulb();\n        \n        // Add skin layers on top\n        onion_skin_layers();\n        \n        // Roots at bottom\n        onion_roots();\n        \n        // Green shoots from top\n        green_shoots();\n        \n        // Small crown detail\n        translate([0, 0, 15])\n        cylinder(h=3, d=8, $fn=32);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 25])\nonion_plant();",
    "renders": true
  },
  {
    "plant": "shallot",
    "openscad_code": "// Shallot plant - realistic style, medium complexity\n// Overall height ~100mm, printable as-is\n\n// Parameters\nbulb_scale = 1.0;\nstem_length = 60;\nleaf_count = 8;\nleaf_length = 40;\nwall = 2;\n\n// Main bulb cluster\nmodule shallot_bulb_cluster() {\n    difference() {\n        // Central bulb\n        translate([0,0,10])\n        scale([bulb_scale, bulb_scale*0.9, bulb_scale*1.1])\n        sphere(r=15, $fn=32);\n        \n        // Remove bottom flat surface\n        translate([0,0,-5])\n        cube([40,40,15], center=true);\n    }\n    \n    // Side bulbs (cloves)\n    for(i=[0:2]) {\n        rotate([0,0,i*120])\n        translate([20,0,12])\n        rotate([0,15,0])\n        scale([0.7,0.7,0.7])\n        sphere(r=12, $fn=32);\n    }\n    \n    // Root hairs\n    for(i=[0:15]) {\n        rotate([0,0,i*24])\n        translate([8+sin(i*3)*3,0,0])\n        cylinder(r1=1.5, r2=0.5, h=10+rand(5), $fn=8);\n    }\n}\n\n// Stem\nmodule stem() {\n    color(\"darkgreen\")\n    translate([0,0,25])\n    cylinder(r1=3, r2=2, h=stem_length, $fn=16);\n}\n\n// Leaf blade\nmodule leaf(twist=0) {\n    color(\"green\")\n    rotate([0,0,twist])\n    translate([0,0,25+stem_length])\n    rotate([0,90+rand(10),0])\n    hull() {\n        translate([0,0,0])\n        cylinder(r=2, h=1, $fn=8);\n        translate([0,leaf_length-rand(5),0])\n        scale([1,0.3,0.1])\n        cylinder(r=5, h=1, $fn=8);\n    }\n}\n\n// Helper for random variation\nfunction rand(n) = (n * (sin($fn*123.456) + 1))/2;\n\n// Main assembly\nunion() {\n    shallot_bulb_cluster();\n    stem();\n    \n    // Leaves in spiral\n    for(i=[0:leaf_count-1]) {\n        rotate([0,0,i*(360/leaf_count) + rand(10)])\n        leaf(i*5);\n    }\n    \n    // Soil base\n    translate([0,0,-3])\n    color(\"saddlebrown\")\n    cylinder(r=30, h=3, $fn=32);\n}",
    "renders": true
  },
  {
    "plant": "ginger",
    "openscad_code": "// Realistic Ginger Plant - OpenSCAD\n// Main rhizome body with characteristic joints and fingers\n\nmodule ginger_segment(length, radius, angle=0) {\n    translate([0, 0, length/2])\n    rotate([angle, 0, 0])\n    union() {\n        // Main body cylinder\n        cylinder(h=length, r=radius, $fn=24);\n        \n        // Knobby growth rings\n        for(i = [1:3:length-2]) {\n            translate([0, 0, i])\n            scale([1.2, 1.2, 0.3])\n            sphere(r=radius, $fn=20);\n        }\n    }\n}\n\nmodule ginger_finger(length, base_radius, taper=0.7) {\n    // Tapered finger growing from main rhizome\n    hull() {\n        translate([0, 0, 0])\n        sphere(r=base_radius, $fn=16);\n        \n        translate([0, 0, length])\n        sphere(r=base_radius * taper, $fn=16);\n    }\n    \n    // Segment joints along finger\n    for(i = [length/4, length/2, length*3/4]) {\n        translate([0, 0, i])\n        rotate([90, 0, 0])\n        cylinder(h=base_radius*1.5, r1=base_radius*1.3, r2=base_radius*0.8, $fn=16);\n    }\n}\n\nmodule ginger_rhizome() {\n    // Main central rhizome\n    ginger_segment(40, 12, 15);\n    \n    // First level branches\n    for(i = [1:3]) {\n        rotate([0, 0, i*120])\n        translate([15, 0, 10])\n        rotate([0, 60, 0])\n        ginger_segment(25, 8, 20);\n    }\n    \n    // Secondary fingers\n    rotate([0, 0, 45])\n    translate([25, 5, 5])\n    rotate([0, 45, 30])\n    ginger_finger(20, 5);\n    \n    rotate([0, 0, 200])\n    translate([20, -8, 8])\n    rotate([0, -30, -20])\n    ginger_finger(15, 4);\n    \n    rotate([0, 0, 280])\n    translate([18, 3, 12])\n    rotate([0, 80, 10])\n    ginger_finger(12, 3.5);\n    \n    // Terminal growth buds\n    translate([0, 0, 42])\n    sphere(r=8, $fn=20);\n    \n    translate([28*cos(120), 28*sin(120), 32])\n    sphere(r=6, $fn=20);\n    \n    translate([25*cos(45), 25*sin(45), 22])\n    sphere(r=4, $fn=16);\n}\n\n// Root hairs module\nmodule root_hairs(count=20) {\n    for(i = [1:count]) {\n        angle = i * (360/count);\n        height = 2 + (i % 3) * 3;\n        \n        rotate([0, 0, angle])\n        translate([12 + (i % 5), 0, height])\n        rotate([90 + (i % 20), 0, 0])\n        cylinder(h=5 + (i % 4), r1=0.8, r2=0.3, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Core rhizome structure\n    ginger_rhizome();\n    \n    // Root system at bottom\n    translate([0, 0, -5])\n    root_hairs(25);\n    \n    // Surface texture details\n    for(i = [1:30]) {\n        theta = rands(0, 360, 1)[0];\n        phi = rands(10, 40, 1)[0];\n        \n        rotate([0, 0, theta])\n        translate([rands(8, 15, 1)[0], 0, phi])\n        sphere(r=0.5, $fn=8);\n    }\n}\n\n// Scale to realistic size (approximately 80mm length)\nscale([1.2, 1.2, 1.2])",
    "renders": true
  },
  {
    "plant": "turmeric",
    "openscad_code": "// Turmeric Plant Model - Realistic Style, Medium Complexity\n// 3D printable turmeric plant with rhizome, roots, stem and leaves\n\n// Main parameters\nscale_factor = 1; // Overall size multiplier\nrhizome_scale = 25 * scale_factor;\nstem_height = 80 * scale_factor;\nleaf_length = 60 * scale_factor;\nwall_thickness = 2 * scale_factor;\n\n// Rhizome (main turmeric root) - segmented and knobby\nmodule rhizome() {\n    difference() {\n        // Main body\n        union() {\n            // Central rhizome\n            scale([1.2, 0.8, 0.6]) \n                sphere(r=rhizome_scale);\n            \n            // Side branches\n            for(i = [0:2]) {\n                rotate([0, 0, i*120]) \n                    translate([rhizome_scale*0.8, 0, -rhizome_scale*0.3])\n                        scale([0.7, 0.7, 0.5])\n                            sphere(r=rhizome_scale*0.8);\n            }\n            \n            // Growth rings\n            for(i = [1:3]) {\n                translate([0, 0, -rhizome_scale*0.5 + i*5])\n                    difference() {\n                        cylinder(h=3, r=rhizome_scale*1.1, $fn=32);\n                        cylinder(h=3.5, r=rhizome_scale*0.9, $fn=32);\n                    }\n            }\n        }\n        \n        // Root attachment holes (for printing support)\n        for(i = [0:5]) {\n            rotate([0, 0, i*72]) \n                translate([rhizome_scale*0.9, 0, -rhizome_scale*0.7])\n                    cylinder(h=rhizome_scale, r=3, $fn=8);\n        }\n    }\n}\n\n// Fine root system\nmodule roots() {\n    for(i = [0:8]) {\n        rotate([0, 0, i*40 + rand(i)*15]) {\n            translate([rand(i*2)*5, rand(i*3)*5, -rhizome_scale*1.2])\n                rotate([90 + rand(i)*10, 0, 0])\n                    cylinder(h=15 + rand(i)*10, r1=2, r2=0.5, $fn=8);\n        }\n    }\n}\n\n// Stem with natural joints\nmodule stem() {\n    union() {\n        // Main stem\n        for(i = [0:4]) {\n            translate([0, 0, i*15])\n                cylinder(h=15, r1=4.5 - i*0.3, r2=4.2 - i*0.3, $fn=16);\n        }\n        \n        // Node joints\n        for(i = [0:3]) {\n            translate([0, 0, 15 + i*15])\n                difference() {\n                    cylinder(h=3, r=5.5, $fn=16);\n                    cylinder(h=4, r=3.5, $fn=16);\n                }\n        }\n    }\n}\n\n// Curved leaf blade\nmodule leaf() {\n    difference() {\n        union() {\n            // Main leaf shape\n            translate([0, 0, -leaf_length/2])\n                scale([0.3, 1, 1])\n                    cylinder(h=leaf_length, r1=leaf_length/4, r2=leaf_length/6, $fn=20);\n            \n            // Central vein\n            translate([0, 0, -leaf_length/2])\n                scale([0.05, 0.8, 1])\n                    cylinder(h=leaf_length, r1=leaf_length/5, r2=leaf_length/7, $fn=8);\n        }\n        \n        // Leaf tip taper\n        translate([0, 0, leaf_length/2 - 5])\n            cube([leaf_length/3, leaf_length/2, 10], center=true);\n    }\n}\n\n// Leaf sheath wrapping stem\nmodule leaf_sheath(height) {\n    difference() {\n        cylinder(h=height, r1=6, r2=5, $fn=16);\n        cylinder(h=height+1, r1=4.5, r2=4.5, $fn=16);\n    }\n}\n\n// Assemble the plant\nmodule turmeric_plant() {\n    // Rhizome and roots\n    union() {\n        rhizome();\n        roots();\n    }\n    \n    // Stem growing from rhizome\n    translate([0, 0, rhizome_scale*0.6])\n        stem();\n    \n    // Leaves arranged spirally\n    for(i = [0:4]) {\n        rotate([0, 0, i*72 + 15*sin(i)])\n            translate([0, 0, 45 + i*8])\n                rotate([30 + i*5, 0, 0])\n                    leaf_sheath(12);\n                    \n        rotate([0, 0, i*72 + 15*sin(i)])\n            translate([0, 8, 50 + i*8])\n                rotate([30 + i*5, 0, 0])\n                    leaf();\n    }\n}\n\n// Helper for random variation\nfunction rand(n) = (n*13.7)%1;\n\n// Generate the complete plant\nturmeric_plant();",
    "renders": true
  },
  {
    "plant": "cumin",
    "openscad_code": "// Cumin Plant - Realistic Style, Medium Complexity\n// Overall height ~120mm, suitable for 3D printing\n\n// Parameters\nstem_height = 80;\nstem_diameter = 4;\numbel_diameter = 25;\nseed_size = 1.2;\nseed_count = 40;\nleaf_length = 30;\nleaf_width = 2;\nleaf_thickness = 1.5;\n\n// Main stem\nmodule main_stem() {\n    cylinder(h=stem_height, d=stem_diameter, $fn=20);\n}\n\n// Umbel structure with seeds\nmodule umbel() {\n    // Central umbel structure\n    translate([0, 0, stem_height])\n    difference() {\n        sphere(d=umbel_diameter, $fn=32);\n        // Hollow center for printing\n        sphere(d=umbel_diameter-4, $fn=32);\n    }\n    \n    // Seeds arranged on umbel surface\n    for(i = [0:seed_count-1]) {\n        rotate([0, 0, i*360/seed_count])\n        translate([umbel_diameter/2-1, 0, stem_height])\n        rotate([90, 0, 0])\n        cylinder(h=seed_size*2, d=seed_size, $fn=8);\n    }\n    \n    // Seed stalks\n    for(i = [0:seed_count-1]) {\n        rotate([0, 0, i*360/seed_count])\n        translate([umbel_diameter/2-3, 0, stem_height])\n        rotate([90, 0, 0])\n        cylinder(h=5, d=0.8, $fn=6);\n    }\n}\n\n// Individual leaf segment\nmodule leaf_segment(l, w, t) {\n    linear_extrude(height = t)\n    scale([1, 0.3, 1])\n    circle(d=w, $fn=8);\n}\n\n// Compound leaf\nmodule compound_leaf(length, width, thickness) {\n    // Main leaf stem\n    translate([0, 0, thickness/2])\n    rotate([90, 0, 0])\n    cylinder(h=length, d=thickness, $fn=8);\n    \n    // Leaflets\n    for(i = [1:5]) {\n        translate([0, length*i/6, 0])\n        rotate([0, 0, 45])\n        leaf_segment(length/6, width, thickness);\n        \n        translate([0, length*i/6, 0])\n        rotate([0, 0, -45])\n        leaf_segment(length/6, width, thickness);\n    }\n}\n\n// Lower leaves\nmodule lower_leaves() {\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([stem_diameter/2+1, 0, stem_height*0.2])\n        rotate([0, -30, 0])\n        compound_leaf(leaf_length, leaf_width, leaf_thickness);\n    }\n}\n\n// Upper leaves (smaller)\nmodule upper_leaves() {\n    for(i = [0:2]) {\n        rotate([0, 0, i*120+60])\n        translate([stem_diameter/2+1, 0, stem_height*0.6])\n        rotate([0, -15, 0])\n        scale([0.7, 0.7, 0.7])\n        compound_leaf(leaf_length*0.7, leaf_width*0.7, leaf_thickness*0.7);\n    }\n}\n\n// Base/root flare\nmodule root_flare() {\n    translate([0, 0, -5])\n    cylinder(h=10, d1=stem_diameter+4, d2=stem_diameter, $fn=20);\n}\n\n// Assemble plant\nunion() {\n    root_flare();\n    main_stem();\n    lower_leaves();\n    upper_leaves();\n    umbel();\n}",
    "renders": true
  },
  {
    "plant": "caraway",
    "openscad_code": "// Caraway plant (Carum carvi) – realistic style, medium complexity, 3D-printable\n\n// Overall scale: 100 mm tall, 60 mm wide\nplantScale = 1;\n\n// Wall thickness for printability\nwall = 2;\n\nmodule stemSegment(h = 20, r = 1.6) {\n    // Hollow cylinder with thick walls\n    difference() {\n        cylinder(h = h, r = r, $fn = 12);\n        translate([0, 0, -0.1])\n            cylinder(h = h + 0.2, r = r - wall, $fn = 12);\n    }\n}\n\nmodule carawayLeaf(len = 18, wid = 10) {\n    // Feather-like pinnate leaf made from stacked thin cuboids\n    for(i = [0 : 2 : len]) {\n        translate([0, 0, i])\n            rotate([0, 90, 0])\n                scale([0.2, 1, 1])\n                    cube([wid * (1 - i / len), wall, 2], center = true);\n    }\n}\n\nmodule umbel(rays = 8, rayLen = 12) {\n    // Umbrella-like inflorescence\n    for(a = [0 : 360 / rays : 360 - 360 / rays]) {\n        rotate([0, 0, a])\n            translate([0, rayLen / 2, 0])\n                stemSegment(h = rayLen, r = 1);\n    }\n    // Central flower cluster (tiny spheres)\n    for(i = [0 : 30]) {\n        translate(rands(0, 4, 3))\n            sphere(r = 1.2);\n    }\n}\n\nmodule carawayPlant() {\n    // Main stem\n    stemSegment(h = 60, r = 2.5);\n    \n    // Lower basal leaves\n    for(a = [0 : 120 : 240]) {\n        rotate([0, 0, a])\n            translate([0, 10, 0])\n                rotate([0, -20, 0])\n                    carawayLeaf();\n    }\n    \n    // Upper cauline leaves\n    for(a = [60 : 60 : 240]) {\n        rotate([0, 0, a])\n            translate([0, 8, 30])\n                rotate([0, -35, 0])\n                    carawayLeaf(len = 15, wid = 7);\n    }\n    \n    // Umbels\n    translate([0, 0, 55])\n        umbel();\n    translate([0, 0, 40])\n        umbel(rays = 6, rayLen = 8);\n}\n\n// Render\nscale(plantScale)\n    carawayPlant();",
    "renders": true
  },
  {
    "plant": "anise",
    "openscad_code": "// Anise plant model - realistic style, medium complexity\n// Dimensions in mm, suitable for 3D printing\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\nstem_height = 80;\nstem_diameter = 4;\nleaf_length = 25;\nleaf_width = 15;\nseed_cluster_diameter = 12;\nseed_height = 4;\nroot_length = 20;\n\n// Base soil/root ball\nmodule soil_base() {\n    difference() {\n        sphere(d = 35);\n        translate([0, 0, -8])\n            cube([40, 40, 16], center = true);\n    }\n}\n\n// Main stem with segments\nmodule stem() {\n    // Root section\n    translate([0, 0, -root_length/2]) {\n        cylinder(h = root_length, d1 = stem_diameter + 2, d2 = stem_diameter);\n    }\n    \n    // Main stem segments\n    for(i = [0:5]) {\n        translate([0, 0, i * (stem_height/6)])\n            cylinder(h = stem_height/6 + 1, d = stem_diameter);\n    }\n    \n    // Stem joints/bumps\n    for(i = [1:5]) {\n        translate([0, 0, i * (stem_height/6) - 2])\n            sphere(d = stem_diameter + 1);\n    }\n}\n\n// Individual anise leaf with proper shape\nmodule leaf() {\n    difference() {\n        // Main leaf blade\n        scale([1, 0.4, 0.1])\n            sphere(d = leaf_length);\n        \n        // Leaf divisions (typical anise compound leaf)\n        translate([0, 0, -leaf_width])\n            cube([leaf_length, leaf_width, leaf_width*2], center = true);\n    }\n    \n    // Leaf stem\n    translate([leaf_length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 5, d = 1.5);\n}\n\n// Seed cluster (umbel structure)\nmodule seed_cluster(height) {\n    // Main umbel structure\n    translate([0, 0, height]) {\n        sphere(d = seed_cluster_diameter);\n        \n        // Individual seeds in cluster\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([seed_cluster_diameter/2 - seed_height/2, 0, 0])\n                    scale([1, 0.7, 0.5])\n                        sphere(d = seed_height);\n        }\n        \n        // Secondary umbels\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90 + 30])\n                translate([seed_cluster_diameter/1.5, 0, 5])\n                    sphere(d = seed_cluster_diameter/2);\n        }\n    }\n}\n\n// Compound leaf arrangement\nmodule compound_leaf(height, angle, leaf_count) {\n    translate([0, 0, height]) {\n        rotate([0, 0, angle]) {\n            // Central leaf stem\n            cylinder(h = leaf_length - 5, d = 2);\n            \n            // Leaflets\n            for(i = [0:leaf_count-1]) {\n                rotate([0, 0, -30 + i * 20])\n                    translate([0, 0, i * 4])\n                        leaf();\n            }\n        }\n    }\n}\n\n// Complete anise plant assembly\nmodule anise_plant() {\n    union() {\n        // Base\n        translate([0, 0, -root_length])\n            soil_base();\n        \n        // Main stem\n        stem();\n        \n        // Lower leaves (larger)\n        compound_leaf(10, 0, 5);\n        compound_leaf(15, 120, 5);\n        compound_leaf(20, 240, 5);\n        \n        // Middle leaves\n        compound_leaf(35, 60, 4);\n        compound_leaf(40, 180, 4);\n        compound_leaf(45, 300, 4);\n        \n        // Upper leaves (smaller)\n        compound_leaf(55, 30, 3);\n        compound_leaf(60, 150, 3);\n        \n        // Seed clusters\n        seed_cluster(65);\n        seed_cluster(70);\n        seed_cluster(75);\n    }\n}\n\n// Render the plant\nanise_plant();",
    "renders": true
  },
  {
    "plant": "cardamom",
    "openscad_code": "// Realistic Cardamom Plant - Medium Complexity\n// Size: ~120mm tall, 3D printable with 2mm wall thickness\n\n// Parameters\nstem_height = 80;\nstem_diameter = 5;\nleaf_length = 50;\nleaf_width = 25;\nleaf_thickness = 2;\npod_length = 15;\npod_diameter = 4;\npods_per_cluster = 6;\ncluster_height = 25;\n\n// Base module for ground\nmodule base() {\n    translate([0, 0, -2])\n        cylinder(h=4, r=25, $fn=32);\n}\n\n// Stem with nodes\nmodule stem() {\n    // Main stem\n    color(\"darkgreen\")\n    cylinder(h=stem_height, d=stem_diameter, $fn=16);\n    \n    // Node rings every 20mm\n    for(i = [1:20:stem_height-10]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(h=3, d=7, $fn=16);\n                cylinder(h=3.5, d=4.5, $fn=16);\n            }\n    }\n}\n\n// Leaf blade with midrib\nmodule leaf() {\n    color(\"forestgreen\")\n    union() {\n        // Main leaf blade\n        translate([0, leaf_length/2, 0])\n            scale([leaf_width, leaf_length, leaf_thickness])\n                sphere(r=0.5, $fn=32);\n        \n        // Midrib\n        translate([0, leaf_length/2, leaf_thickness/2 + 0.1])\n            rotate([90, 0, 0])\n                cylinder(h=leaf_length, d=1.5, $fn=8);\n        \n        // Veins\n        for(i = [-leaf_width/2+5:5:leaf_width/2-5]) {\n            translate([i, leaf_length/4, leaf_thickness/2 + 0.2])\n                rotate([90, 0, 0])\n                    cylinder(h=leaf_length/2, d=0.5, $fn=4);\n        }\n    }\n}\n\n// Petiole connecting leaf to stem\nmodule petiole() {\n    color(\"darkgreen\")\n    rotate([0, -30, 0])\n        cylinder(h=10, d1=3, d2=1.5, $fn=8);\n}\n\n// Leaf assembly at angle\nmodule leaf_assembly(angle) {\n    rotate([0, 0, angle])\n        translate([0, stem_diameter/2 + 2, 0])\n            union() {\n                petiole();\n                translate([0, 10, 0])\n                    rotate([0, -45, 0])\n                        leaf();\n            }\n}\n\n// Cardamom pod\nmodule pod() {\n    color(\"saddlebrown\")\n    union() {\n        // Main pod body\n        scale([1, 1, 0.7])\n            sphere(r=pod_diameter/2, $fn=16);\n        \n        // Tip\n        translate([0, 0, pod_diameter/2 * 0.7])\n            cylinder(h=2, d1=pod_diameter/2, d2=1, $fn=8);\n    }\n}\n\n// Pod cluster\nmodule pod_cluster() {\n    translate([0, stem_diameter/2 + 5, cluster_height])\n        for(i = [0:360/pods_per_cluster:359]) {\n            rotate([0, 0, i])\n                translate([pod_diameter*1.5, 0, 0])\n                    rotate([0, 90, 0])\n                        pod();\n        }\n}\n\n// Main plant assembly\nunion() {\n    base();\n    \n    translate([0, 0, 2])\n        union() {\n            stem();\n            \n            // Leaves at different heights\n            for(i = [30, 50, 70]) {\n                translate([0, 0, i])\n                    union() {\n                        leaf_assembly(45);\n                        leaf_assembly(-45);\n                    }\n            }\n            \n            // Pod clusters\n            pod_cluster();\n            translate([0, 0, 10])\n                pod_cluster();\n        }\n}",
    "renders": true
  },
  {
    "plant": "cinnamon",
    "openscad_code": "// Cinnamon plant (Cinnamomum verum) – medium-realistic, 3D-printable\n// Height ≈ 110 mm, pot Ø ≈ 45 mm, suitable for FDM printing\n// No steep overhangs, 2 mm wall thickness on stem/trunk\n\n// Parameters\n$fn = 36;                     // smooth curves\npot_h   = 25;                 // clay pot height\npot_r   = 22.5;               // pot radius\nsoil_h  = 8;                  // soil fill\nstem_r  = 3;                  // stem radius\nstem_h  = 75;                 // stem height above soil\nleaf_l  = 30;                 // leaf blade length\nleaf_w  = 10;                 // leaf blade max width\nleaf_t  = 1.2;                // leaf thickness\nnum_nodes = 7;                // branching nodes on stem\npetiole_len = 6;              // short petiole\ncinnamon_bark_color = [160/255, 90/255, 50/255];\nleaf_color = [60/255, 110/255, 80/255];\n\n// Main assembly\nunion() {\n    // Clay pot with drainage hole\n    difference() {\n        cylinder(h = pot_h, r1 = pot_r, r2 = pot_r * 0.9); // tapered pot\n        translate([0, 0, -0.1])\n            cylinder(h = pot_h + 0.2, r1 = pot_r - 2, r2 = pot_r * 0.9 - 2); // hollow\n        // drainage hole\n        translate([0, 0, pot_h - 1])\n            cylinder(h = 2, r = 3);\n    }\n\n    // Soil\n    translate([0, 0, pot_h - soil_h])\n        cylinder(h = soil_h + 0.2, r = pot_r - 2.2);\n\n    // Stem/trunk\n    color(cinnamon_bark_color)\n    translate([0, 0, pot_h - soil_h + 1]) // base at soil level\n        cylinder(h = stem_h, r = stem_r);\n\n    // Generate foliage nodes up the stem\n    for (i = [0 : num_nodes - 1]) {\n        angle = i * 137.5;        // golden angle for natural distribution\n        h = pot_h - soil_h + 1 + (i + 1) * (stem_h / (num_nodes + 1));\n        rotate([0, 0, angle])\n            translate([0, 0, h])\n                cinnamon_node();\n    }\n}\n\n// One branching node with opposite leaves\nmodule cinnamon_node() {\n    // Petioles and leaves in opposite pairs\n    for (side = [-1, 1]) {\n        // Petiole\n        rotate([0, 0, side * 90])\n            rotate([30, 0, 0])\n                cylinder(h = petiole_len, r = 1.2);\n\n        // Leaf blade – simple elliptical\n        color(leaf_color)\n        translate([side * (petiole_len + leaf_l / 2), 0, petiole_len * sin(30)])\n            rotate([0, 30, side * 90])\n                scale([leaf_l, leaf_w, leaf_t])\n                    sphere();               // stretched sphere → elliptical leaf\n    }\n}",
    "renders": true
  },
  {
    "plant": "clove",
    "openscad_code": "// Realistic Clove Plant - Medium Complexity\n// Overall height ~100mm, suitable for 3D printing\n\n$fn = 36;  // Smooth curves\n\n// Main parameters\nstem_height = 90;\nstem_diameter = 4;\nbud_height = 12;\nbud_diameter = 8;\ncalyx_height = 6;\ncalyx_diameter = 10;\nleaf_length = 25;\nleaf_width = 6;\nleaf_thickness = 2;\n\nmodule stem() {\n    // Main vertical stem\n    cylinder(h=stem_height, d=stem_diameter, center=false);\n    \n    // Add small bumps for realism\n    for(i = [10:5:stem_height-20]) {\n        translate([0, 0, i])\n            rotate([90, 0, 0])\n                scale([1, 0.8, 1])\n                    cylinder(h=3, d=stem_diameter*1.5, center=true);\n    }\n}\n\nmodule bud() {\n    // Flower bud - clove shape\n    union() {\n        // Main bud body\n        translate([0, 0, bud_height/2])\n            sphere(d=bud_diameter);\n        \n        // Calyx at base\n        translate([0, 0, 0])\n            cylinder(h=calyx_height, d=calyx_diameter, center=false);\n        \n        // Small sepals\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([calyx_diameter/2 - 1, 0, calyx_height/2])\n                    rotate([30, 0, 0])\n                        scale([0.3, 0.3, 1])\n                            cylinder(h=3, d=2, center=true);\n        }\n    }\n}\n\nmodule leaf(stem_pos, angle) {\n    // Single leaf with proper shape\n    translate([0, 0, stem_pos])\n        rotate([angle, 0, 0])\n            translate([0, 0, leaf_length/2])\n                rotate([0, 90, 0])\n                    scale([1, leaf_width/leaf_length, leaf_thickness/leaf_length])\n                        union() {\n                            // Main leaf body\n                            cylinder(h=leaf_length, d=leaf_width, center=true);\n                            \n                            // Leaf tip\n                            translate([0, 0, leaf_length/2])\n                                sphere(d=leaf_width);\n                            \n                            // Central vein\n                            translate([0, 0, -leaf_length/2])\n                                cylinder(h=leaf_length, d=leaf_thickness, center=false);\n                        }\n}\n\nmodule clove_plant() {\n    union() {\n        // Main stem\n        stem();\n        \n        // Flower buds along stem\n        for(pos = [stem_height-15, stem_height-30, stem_height-45]) {\n            translate([0, 0, pos])\n                bud();\n        }\n        \n        // Leaves in pairs\n        for(h = [20:15:70]) {\n            leaf(h, 45);\n            leaf(h, -45);\n            leaf(h + 7.5, 135);\n            leaf(h + 7.5, -135);\n        }\n        \n        // Base support for printing\n        translate([0, 0, -2])\n            cylinder(h=2, d=stem_diameter*3, center=false);\n    }\n}\n\n// Generate the complete plant\nclove_plant();",
    "renders": true
  },
  {
    "plant": "nutmeg",
    "openscad_code": "// Nutmeg plant with realistic style - medium complexity\n// Overall height ~120mm, suitable for 3D printing\n\n$fn = 32;  // Smooth curves\n\nmodule stem_segment(h, r_base, r_top) {\n    // Tapered cylinder for stem segments\n    cylinder(h = h, r1 = r_base, r2 = r_top, $fn = 16);\n}\n\nmodule leaf(length, width, angle) {\n    // Single leaf blade with central vein\n    translate([0, 0, 0])\n    rotate([0, angle, 0])\n    union() {\n        // Main leaf blade - ellipsoid shape\n        scale([1, width/length, 0.1])\n        sphere(r = length/2);\n        \n        // Central vein\n        translate([0, 0, -0.5])\n        color(\"darkgreen\")\n        scale([1, 0.05, 0.05])\n        sphere(r = length/2);\n    }\n}\n\nmodule leaf_cluster(base_r) {\n    // Cluster of leaves at stem tip\n    for(i = [0:45:359]) {\n        rotate([0, 0, i])\n        translate([base_r * 1.5, 0, 0])\n        rotate([30, 0, 0])\n        leaf(25, 12, 15);\n    }\n}\n\nmodule stem_system() {\n    // Main stem system with branches\n    color(\"darkgreen\") {\n        // Main trunk\n        translate([0, 0, 0])\n        stem_segment(50, 3, 2.5);\n        \n        // First branch - left\n        translate([0, 0, 30])\n        rotate([0, 0, -25])\n        stem_segment(35, 2, 1.5);\n        \n        // Sub-branches on first branch\n        translate([0, 0, 35])\n        rotate([0, 0, -30])\n        stem_segment(20, 1.5, 1);\n        \n        // Second branch - right\n        translate([0, 0, 40])\n        rotate([0, 0, 35])\n        stem_segment(30, 2, 1.5);\n        \n        // Third branch - center top\n        translate([0, 0, 50])\n        stem_segment(25, 2.5, 2);\n        \n        // Leaf clusters at branch tips\n        translate([0, 0, 75])\n        leaf_cluster(5);\n        \n        translate([15*cos(-55), 15*sin(-55), 65])\n        leaf_cluster(4);\n        \n        translate([20*cos(35), 20*sin(35), 70])\n        leaf_cluster(4);\n    }\n}\n\nmodule nutmeg_seed() {\n    // Realistic nutmeg seed\n    color(\"saddlebrown\") {\n        // Main seed body - oval shape\n        scale([1, 0.8, 1.2])\n        sphere(r = 8);\n        \n        // Surface texture with small bumps\n        for(i = [0:20:359]) {\n            for(j = [0:30:180]) {\n                rotate([0, j, i])\n                translate([8, 0, 0])\n                sphere(r = 0.5);\n            }\n        }\n    }\n}\n\nmodule mace_aril() {\n    // Lacy red aril (mace) surrounding seed\n    color(\"red\") {\n        // Base ring\n        rotate([90, 0, 0])\n        cylinder(h = 1, r = 9);\n        \n        // Lacy protrusions\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n            translate([9, 0, 0])\n            scale([1, 0.3, 6])\n            rotate([30, 0, 0])\n            sphere(r = 1);\n        }\n    }\n}\n\nmodule fruit() {\n    // Ripe fruit with seed inside\n    color(\"yellow\") {\n        // Outer fruit - slightly flattened sphere\n        scale([1.1, 1, 0.9])\n        sphere(r = 15);\n    }\n    \n    // Split showing seed\n    translate([0, 0, -5])\n    difference() {\n        nutmeg_seed();\n        translate([0, 0, -8])\n        cube([20, 20, 10], center = true);\n    }\n    \n    // Mace aril visible\n    translate([0, 0, 5])\n    rotate([0, 0, 45])\n    mace_aril();\n}\n\n// Main assembly\ntranslate([0, 0, 0])\nunion() {\n    // Plant base\n    translate([0, 0, -5])\n    color(\"darkbrown\")\n    cylinder(h = 5, r = 8);\n    \n    // Stem system\n    stem_system();\n    \n    // Fruits hanging from branches\n    translate([15*cos(-55), 15*sin(-55), 65])\n    rotate([0, 90, 0])\n    fruit();\n    \n    translate([20*cos(35), 20*sin(35), 70])\n    rotate([0, 90, 0])\n    fruit();\n    \n    translate([10*cos(10), 10*sin(10), 50])\n    rotate([0, 90, 0])\n    fruit();\n}",
    "renders": true
  },
  {
    "plant": "allspice",
    "openscad_code": "// Allspice plant (Pimenta dioica) – medium complexity, printable, ~100 mm tall\n// Realistic proportions: woody stem, glossy evergreen leaves, clusters of unripe/green berries\n\n// Print-friendly settings\n$fn = 36;               // Smooth curves without excessive facets\nwall = 2;               // Uniform 2 mm walls everywhere\n\n// Overall scale – 1 unit = 1 mm\nscale_factor = 1;\n\nmodule allspice_plant() {\n    // Central woody stem\n    union() {\n        // Main trunk\n        cylinder(h = 60, r1 = 4, r2 = 3, center = false);\n\n        // Branches\n        for (ang = [30 : 60 : 330]) {\n            rotate([0, 0, ang])\n                translate([0, 0, 20])\n                    rotate([30, 0, 0])\n                        cylinder(h = 35, r1 = 2, r2 = 1.5, center = false);\n        }\n\n        // Secondary twigs\n        for (ang = [30 : 40 : 330]) {\n            rotate([0, 0, ang + 15])\n                translate([0, 0, 35])\n                    rotate([40, 0, 0])\n                        cylinder(h = 15, r1 = 1, r2 = 0.6, center = false);\n        }\n    }\n}\n\n// Evergreen leaf – elliptic, ~40 mm long, 20 mm wide, 1 mm thick\nmodule leaf() {\n    difference() {\n        scale([1, 0.5, 0.05])\n            sphere(d = 40);\n        // Hollow out to 2 mm wall\n        scale([1 - wall / 20, 0.5 - wall / 20, 0.05 - wall / 2])\n            sphere(d = 40 - 2 * wall);\n    }\n    // Petiole\n    translate([0, -20, 0])\n        cylinder(h = 5, r = wall, center = false);\n}\n\n// Cluster of small green berries\nmodule berry_cluster() {\n    for (i = [0 : 1 : 7]) {\n        rotate([0, 0, i * 45])\n            translate([6, 0, 0])\n                sphere(d = 5);\n    }\n}\n\n// Assemble plant\nunion() {\n    allspice_plant();\n\n    // Attach leaves to twigs\n    for (ang = [30 : 40 : 330]) {\n        for (h = [45 : 10 : 55]) {\n            rotate([0, 0, ang + 15])\n                translate([0, 0, h])\n                    rotate([45, 0, 90])\n                        leaf();\n        }\n    }\n\n    // Attach berry clusters near branch tips\n    for (ang = [30 : 60 : 330]) {\n        rotate([0, 0, ang + 5])\n            translate([0, 0, 52])\n                berry_cluster();\n    }\n}",
    "renders": true
  },
  {
    "plant": "mace",
    "openscad_code": "// Mace plant (Myristica fragrans) – medium-complexity realistic style, 3D-printable\n// Overall height 120 mm, all walls ≥2 mm, no steep overhangs\n\n$fn = 36;\n\n// Main module\nmodule mace_plant() {\n    union() {\n        // Trunk\n        trunk();\n\n        // First whorl of branches\n        for (i = [0:60:359]) rotate([0, 0, i]) translate([0, 0, 20]) branch();\n\n        // Second whorl slightly higher and rotated\n        for (i = [30:60:389]) rotate([0, 0, i]) translate([0, 0, 35]) branch();\n\n        // Crown of simple elliptic leaves\n        for (i = [0:45:359]) rotate([0, 0, i]) translate([0, 0, 55]) leaf_cluster();\n    }\n}\n\n// Trunk: tapered cylinder with slight flare at base\nmodule trunk() {\n    difference() {\n        cylinder(h = 50, r1 = 5, r2 = 4, center = false);\n        // Light hollow to save material\n        translate([0, 0, 2]) cylinder(h = 46, r1 = 3, r2 = 2);\n    }\n}\n\n// Single horizontal branch with sub-branches\nmodule branch() {\n    union() {\n        // Primary branch\n        rotate([0, 90, 0]) cylinder(h = 25, r1 = 2, r2 = 1.5);\n\n        // Two sub-branches at tip\n        translate([20, 0, 0]) rotate([0, 30, 0]) cylinder(h = 15, r1 = 1.5, r2 = 1);\n        translate([20, 0, 0]) rotate([0, -30, 0]) cylinder(h = 15, r1 = 1.5, r2 = 1);\n    }\n}\n\n// Cluster of 3 leaves at each position\nmodule leaf_cluster() {\n    for (j = [0:120:240]) rotate([0, 0, j]) translate([0, 0, 0]) leaf();\n}\n\n// Single simple elliptic leaf (flattened sphere)\nmodule leaf() {\n    translate([0, 20, 0]) rotate([90, 0, 0]) scale([1, 2.5, 0.5]) sphere(d = 12);\n}\n\n// Render the plant\nmace_plant();",
    "renders": true
  },
  {
    "plant": "fenugreek",
    "openscad_code": "// Fenugreek Plant - Realistic Style, Medium Complexity\n// Overall height ~120mm, suitable for 3D printing\n\n// Main parameters\nstem_height = 80;\nstem_diameter = 4;\nleaf_length = 25;\nleaf_width = 15;\nseed_pod_length = 35;\nseed_pod_diameter = 3;\n\nmodule stem() {\n    // Main stem with slight taper\n    cylinder(h=stem_height, d1=stem_diameter+1, d2=stem_diameter, $fn=8);\n    \n    // Secondary stems\n    for(i=[1:3]) {\n        translate([0, 0, i*25]) {\n            rotate([0, 15 + i*10, 45*i]) {\n                cylinder(h=30-i*5, d=2, $fn=6);\n            }\n        }\n    }\n}\n\nmodule fenugreek_leaf(stem_pos=0, angle=0, scale_factor=1) {\n    translate([0, 0, stem_pos]) {\n        rotate([0, 0, angle]) {\n            scale([scale_factor, scale_factor, 1]) {\n                // Leaf blade - oblong shape with pointed tip\n                difference() {\n                    // Main leaf body\n                    hull() {\n                        translate([0, 0, 0]) sphere(d=leaf_width, $fn=16);\n                        translate([leaf_length-5, 0, 0]) sphere(d=leaf_width*0.3, $fn=8);\n                    }\n                    \n                    // Leaf tip\n                    translate([leaf_length-2, 0, -2]) \n                        cube([5, 0.5, 4], center=true);\n                }\n                \n                // Leaf veins\n                for(v=[-0.3, 0, 0.3]) {\n                    translate([leaf_length/2, v*leaf_width/2, 0.5])\n                        rotate([90, 0, 0])\n                        cylinder(h=leaf_length/2, d=0.5, $fn=4);\n                }\n            }\n        }\n    }\n}\n\nmodule seed_pod(stem_pos=0, angle=0) {\n    translate([0, 0, stem_pos]) {\n        rotate([0, 0, angle]) {\n            rotate([0, 90, 0]) {\n                // Main pod body - curved cylinder\n                difference() {\n                    cylinder(h=seed_pod_length, d=seed_pod_diameter, $fn=8);\n                    \n                    // Pod segmentation notches\n                    for(i=[1:4]) {\n                        translate([0, 0, i*7])\n                            rotate([0, 90, 0])\n                            cube([seed_pod_diameter+2, 1, 2], center=true);\n                    }\n                }\n                \n                // Pod tip\n                translate([seed_pod_length, 0, 0])\n                    sphere(d=seed_pod_diameter*0.8, $fn=8);\n            }\n        }\n    }\n}\n\nmodule fenugreek_plant() {\n    // Base/root section\n    translate([0, 0, -5]) {\n        cylinder(h=5, d=stem_diameter+3, $fn=8);\n    }\n    \n    // Main stem assembly\n    stem();\n    \n    // Leaves along main stem\n    for(i=[0:7]) {\n        fenugreek_leaf(\n            stem_pos = 10 + i*10,\n            angle = i*45,\n            scale_factor = 0.8 + (i%3)*0.1\n        );\n    }\n    \n    // Leaves on secondary stems\n    for(i=[1:3]) {\n        translate([0, 0, i*25]) {\n            rotate([0, 15 + i*10, 45*i]) {\n                translate([0, 0, 30-i*5]) {\n                    fenugreek_leaf(\n                        stem_pos = 0,\n                        angle = 30,\n                        scale_factor = 0.6\n                    );\n                }\n            }\n        }\n    }\n    \n    // Seed pods (mature fenugreek has long pods)\n    for(i=[0:2]) {\n        seed_pod(\n            stem_pos = 70 + i*5,\n            angle = 120 + i*40\n        );\n    }\n}\n\n// Generate the complete plant\nfenugreek_plant();",
    "renders": true
  },
  {
    "plant": "mustard",
    "openscad_code": "// Mustard Plant OpenSCAD Model\n// Medium complexity realistic style\n// 3D printable with 2mm walls\n\nmodule stem() {\n    union() {\n        // Main stem\n        cylinder(h=80, d=6, $fn=12);\n        \n        // Stem texture rings\n        for(i = [0:5:75]) {\n            translate([0, 0, i])\n            cylinder(h=2, d=6.5, $fn=12);\n        }\n    }\n}\n\nmodule leaf(length, width, angle, height) {\n    // Leaf blade\n    translate([0, 0, height])\n    rotate([0, 0, angle])\n    linear_extrude(height=2)\n    scale([1, 0.5])\n    circle(d=length);\n    \n    // Leaf veins\n    for(i = [-1:0.5:1]) {\n        translate([0, 0, height+1])\n        rotate([0, 0, angle])\n        translate([i*width/4, 0, 0])\n        cube([length/2, 0.5, 1], center=true);\n    }\n}\n\nmodule flower() {\n    // Center of flower\n    sphere(d=8, $fn=20);\n    \n    // Petals\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([6, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=12, d1=4, d2=2, $fn=6);\n    }\n}\n\nmodule branch() {\n    union() {\n        // Main branch\n        rotate([20, 0, 0])\n        cylinder(h=30, d=3, $fn=8);\n        \n        // Leaves on branch\n        leaf(20, 15, 45, 10);\n        leaf(18, 12, -30, 15);\n        leaf(22, 16, 60, 20);\n        \n        // Secondary branch\n        translate([0, 0, 25])\n        rotate([30, 0, 30])\n        cylinder(h=15, d=2, $fn=6);\n        \n        // Small leaves on secondary\n        translate([0, 0, 25])\n        rotate([30, 0, 30])\n        leaf(12, 8, 90, 7);\n    }\n}\n\nmodule mustard_plant() {\n    // Base\n    translate([0, 0, -5])\n    cylinder(h=5, d=20, $fn=32);\n    \n    // Main stem\n    translate([0, 0, 0])\n    stem();\n    \n    // Lower branches\n    translate([0, 0, 15])\n    rotate([0, 0, 45])\n    branch();\n    \n    translate([0, 0, 25])\n    rotate([0, 0, -45])\n    branch();\n    \n    translate([0, 0, 35])\n    rotate([0, 0, 135])\n    branch();\n    \n    translate([0, 0, 45])\n    rotate([0, 0, -135])\n    branch();\n    \n    // Upper leaves\n    leaf(25, 20, 0, 50);\n    leaf(23, 18, 90, 55);\n    leaf(24, 19, 180, 60);\n    leaf(26, 21, 270, 65);\n    \n    // Flowers\n    translate([0, 0, 75])\n    flower();\n    \n    translate([0, 0, 70])\n    rotate([0, 0, 60])\n    translate([8, 0, 0])\n    flower();\n    \n    translate([0, 0, 68])\n    rotate([0, 0, -60])\n    translate([8, 0, 0])\n    flower();\n}\n\n// Render the plant\nmustard_plant();",
    "renders": true
  },
  {
    "plant": "horseradish",
    "openscad_code": "// Horseradish Plant (Armoracia rusticana) - Realistic Medium Complexity\n// Overall height ~120 mm, suitable for 3D printing\n// Wall thickness 2 mm throughout\n\n$fn = 32;  // Smooth curves\n\n// Main taproot\nmodule taproot() {\n    union() {\n        // Main body - irregular cylinder\n        for (i = [0:10]) {\n            rotate([0, 0, i * 36])\n            translate([0, 0, i * 8])\n            cylinder(h = 10, r1 = 12 - i * 0.8, r2 = 12 - (i + 1) * 0.8, $fn = 8);\n        }\n        \n        // Side roots\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([8, 0, 20 + i * 15])\n            rotate([90, 0, 0])\n            cylinder(h = 25 - i * 3, r1 = 3, r2 = 1.5);\n        }\n        \n        // Root hairs\n        for (j = [0:3]) {\n            rotate([0, 0, j * 90])\n            for (i = [0:5]) {\n                translate([12 - i * 2, 0, 40 + i * 12])\n                sphere(r = 1.5);\n            }\n        }\n    }\n}\n\n// Leaf stem\nmodule stem() {\n    cylinder(h = 50, r1 = 4, r2 = 2);\n}\n\n// Single leaf\nmodule leaf(length, width) {\n    difference() {\n        union() {\n            // Main leaf blade\n            scale([1, width/length, 1])\n            rotate_extrude(angle = 180, $fn = 64)\n            translate([length/2, 0, 0])\n            circle(r = length/2, $fn = 64);\n            \n            // Stem connection\n            translate([0, -width/2, 0])\n            cube([length/10, width, 2]);\n        }\n        \n        // Leaf veins\n        for (i = [1:3]) {\n            rotate([0, 0, i * 30 - 45])\n            translate([length/4, -width/2, -1])\n            cube([length/2, 1, 4]);\n        }\n    }\n}\n\n// Leaf cluster\nmodule leaf_cluster() {\n    translate([0, 0, 50])\n    union() {\n        stem();\n        \n        // Base leaves\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([0, 0, 45])\n            rotate([0, 0, -30 + i * 10])\n            leaf(35, 12);\n        }\n        \n        // Upper leaves\n        for (i = [0:3]) {\n            rotate([0, 0, i * 120 + 60])\n            translate([0, 0, 35])\n            rotate([0, 0, -45 + i * 15])\n            leaf(28, 10);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, -20])\nunion() {\n    // Main plant\n    taproot();\n    leaf_cluster();\n    \n    // Soil base\n    translate([0, 0, -5])\n    difference() {\n        cylinder(h = 5, r = 25);\n        translate([0, 0, -1])\n        cylinder(h = 7, r = 20);\n    }\n}",
    "renders": true
  },
  {
    "plant": "wasabi",
    "openscad_code": "// Realistic Wasabi Plant - Medium Complexity\n// Approx 100mm tall when printed\n\n// Main parameters\nrhizome_height = 30;\nrhizome_radius = 15;\nstem_length = 25;\nleaf_length = 80;\nleaf_width = 35;\npetiole_length = 15;\n\nmodule wasabi_rhizome() {\n    // Main root/rhizome with slight taper\n    difference() {\n        cylinder(h=rhizome_height, r1=rhizome_radius, r2=rhizome_radius*0.9, $fn=32);\n        // Small root indentations\n        for(i=[0:3]) {\n            rotate([0,0,i*90+15])\n                translate([rhizome_radius-2, 0, rhizome_height*0.3])\n                    rotate([90,0,0])\n                        cylinder(h=8, r1=2, r2=1, $fn=12);\n        }\n    }\n}\n\nmodule stem() {\n    // Petiole stem connecting leaf to rhizome\n    cylinder(h=stem_length, r=3, $fn=16);\n}\n\nmodule leaf_lobe(length, width, angle) {\n    // Single heart-shaped leaf lobe\n    translate([0,0,leaf_length/2])\n        rotate([angle,0,0])\n            scale([width/leaf_length, 1, 1])\n                rotate_extrude(angle=360, $fn=32)\n                    translate([leaf_length/2, 0, 0])\n                        circle(r=leaf_length/2, $fn=32);\n}\n\nmodule single_leaf(rotation) {\n    // Complete leaf with petiole and blade\n    rotate([0,0,rotation]) {\n        // Petiole\n        color(\"darkgreen\")\n            stem();\n        \n        // Leaf blade\n        translate([0,0,stem_length + petiole_length])\n            rotate([0,0,0])\n                scale([1,1,0.15])\n                    union() {\n                        // Main leaf body\n                        leaf_lobe(leaf_length, leaf_width, 0);\n                        \n                        // Veins (subtractive)\n                        for(i=[-2:2]) {\n                            if(i != 0) {\n                                translate([i*leaf_width/6, 0, 1])\n                                    scale([0.05,1,0.1])\n                                        cube([leaf_length, leaf_width/12, 2], center=true);\n                            }\n                        }\n                    }\n    }\n}\n\nmodule wasabi_plant() {\n    // Base rhizome\n    color(\"palegreen\")\n        wasabi_rhizome();\n    \n    // Stems and leaves\n    translate([0,0,rhizome_height])\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n                translate([rhizome_radius*0.7,0,0])\n                    single_leaf(i*45);\n        }\n    \n    // Small emerging leaf bud\n    translate([0,0,rhizome_height])\n        rotate([0,0,45])\n            translate([rhizome_radius*0.5,0,0])\n                scale([0.3,0.3,0.3])\n                    single_leaf(0);\n}\n\n// Generate the complete plant\nwasabi_plant();",
    "renders": true
  },
  {
    "plant": "paprika",
    "openscad_code": "// Paprika Plant - Realistic Style, Medium Complexity\n// Overall height ~120mm, suitable for 3D printing\n\n$fn = 32;\nwall = 2;\n\nmodule paprika_body() {\n    // Main paprika fruit (bell pepper shape)\n    color(\"darkred\")\n    union() {\n        // Upper rounded part\n        translate([0, 0, 30])\n        scale([1, 1.2, 1.1])\n        sphere(d = 45);\n        \n        // Lower tapered part\n        translate([0, 0, 10])\n        cylinder(h = 25, d1 = 40, d2 = 35);\n        \n        // Bottom indent\n        translate([0, 0, 0])\n        difference() {\n            cylinder(h = 12, d = 35);\n            translate([0, 0, -1])\n            sphere(d = 25);\n        }\n    }\n}\n\nmodule stem() {\n    // Stem connecting to plant\n    color(\"darkgreen\")\n    translate([0, 0, 50])\n    rotate([10, 0, 0])\n    cylinder(h = 20, d = 8);\n    \n    // Calyx (green leafy part at top)\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([0, 12, 45])\n        rotate([90, 0, 0])\n        scale([1, 2.5, 0.5])\n        cylinder(h = 15, d = 8);\n    }\n}\n\nmodule leaf(stem_pos, angle1, angle2, length, width) {\n    // Single leaf with realistic shape\n    translate(stem_pos)\n    rotate([angle1, angle2, 0])\n    color(\"green\")\n    difference() {\n        // Main leaf body\n        scale([width, length, 1])\n        sphere(d = 10);\n        \n        // Leaf tip point\n        translate([0, length * 5, 0])\n        sphere(d = 5);\n        \n        // Cut center for realistic shape\n        translate([0, length * 2.5, -2])\n        cube([width * 3, length * 5, 5], center = true);\n    }\n}\n\nmodule main_stem() {\n    // Central stem structure\n    color(\"darkgreen\")\n    cylinder(h = 100, d = 6);\n    \n    // Side branches\n    for(i = [1:3]) {\n        translate([0, 0, i * 25])\n        rotate([0, 0, i * 120])\n        rotate([30, 0, 0])\n        cylinder(h = 30, d = 4);\n    }\n}\n\nmodule flower() {\n    // Small white flower\n    color(\"white\")\n    union() {\n        // Center\n        translate([0, 0, 65])\n        sphere(d = 3);\n        \n        // Petals\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([5, 0, 65])\n            rotate([90, 0, 0])\n            scale([1, 2, 0.5])\n            cylinder(h = 8, d = 4);\n        }\n    }\n}\n\nmodule roots() {\n    // Simple root system at base\n    color(\"brown\")\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 0, -5])\n        rotate([30, 0, 0])\n        cylinder(h = 15, d = 3);\n    }\n}\n\n// Assembly\nunion() {\n    // Base and roots\n    roots();\n    \n    // Main plant structure\n    translate([0, 0, 0])\n    main_stem();\n    \n    // Leaves on main stem\n    leaf([0, 0, 20], 45, 30, 20, 12);\n    leaf([0, 0, 40], -30, -45, 18, 10);\n    leaf([0, 0, 60], 60, 20, 22, 14);\n    \n    // Leaves on branches\n    translate([0, 0, 25])\n    rotate([0, 0, 120])\n    leaf([15, 0, 15], 45, 0, 16, 10);\n    \n    translate([0, 0, 50])\n    rotate([0, 0, 240])\n    leaf([12, 0, 10], -40, 10, 15, 9);\n    \n    // Paprika fruits\n    translate([20, 10, 35])\n    paprika_body();\n    \n    translate([-15, -15, 45])\n    rotate([0, 0, 30])\n    scale([0.8, 0.8, 0.8])\n    paprika_body();\n    \n    translate([10, -20, 25])\n    scale([0.7, 0.7, 0.7])\n    paprika_body();\n    \n    // Flowers for future fruits\n    translate([12, 8, 70])\n    flower();\n    \n    translate([-10, 12, 60])\n    flower();\n}",
    "renders": true
  },
  {
    "plant": "cayenne",
    "openscad_code": "// Cayenne Pepper Plant - Realistic Style, Medium Complexity\n// 3D printable model with 2mm wall thickness and no overhangs\n\n// Main parameters\nplant_height = 120;\nstem_diameter = 5;\nleaf_length = 35;\nleaf_width = 15;\npepper_length = 75;\npepper_diameter = 10;\n\nmodule stem_section(h, d, angle = 0) {\n    // Create stem segment with slight taper\n    translate([0, 0, h/2])\n    rotate([angle, 0, 0])\n    cylinder(h = h, d1 = d, d2 = d * 0.8, $fn = 8);\n}\n\nmodule leaf(length, width, angle, bend) {\n    // Create leaf with central vein\n    rotate([0, 0, angle])\n    rotate([bend, 0, 0])\n    translate([0, -width/2, 0])\n    union() {\n        // Leaf blade\n        scale([1, 0.3, 0.1])\n        sphere(d = length, $fn = 8);\n        \n        // Central vein\n        translate([length/2, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = length * 0.8, d = 1.5, $fn = 6);\n    }\n}\n\nmodule cayenne_pepper(length, diameter) {\n    // Create tapered cayenne pepper shape\n    hull() {\n        // Top cone\n        translate([0, 0, length * 0.9])\n        rotate([180, 0, 0])\n        cylinder(h = length * 0.1, d1 = diameter * 0.3, d2 = 0, $fn = 8);\n        \n        // Main body\n        cylinder(h = length * 0.9, d1 = diameter, d2 = diameter * 0.6, $fn = 8);\n        \n        // Bottom rounded tip\n        translate([0, 0, -2])\n        sphere(d = diameter * 0.6, $fn = 8);\n    }\n    \n    // Pepper stem\n    translate([0, 0, length * 0.9])\n    cylinder(h = 3, d = 2, $fn = 6);\n}\n\nmodule main_stem() {\n    // Create segmented main stem\n    union() {\n        // Base section\n        stem_section(30, stem_diameter);\n        \n        // Branch 1\n        translate([0, 0, 25])\n        rotate([45, 0, 0])\n        stem_section(25, stem_diameter * 0.8);\n        \n        // Branch 2\n        translate([0, 0, 40])\n        rotate([-30, 0, 45])\n        stem_section(30, stem_diameter * 0.8);\n        \n        // Upper continuation\n        translate([0, 0, 30])\n        stem_section(40, stem_diameter * 0.7);\n    }\n}\n\nmodule leaves_cluster() {\n    // Create realistic leaf arrangements\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([15, 0, 25])\n        leaf(leaf_length, leaf_width, i/2, 15);\n        \n        rotate([0, 0, i + 20])\n        translate([12, 0, 35])\n        leaf(leaf_length * 0.8, leaf_width * 0.8, -i/3, 20);\n    }\n}\n\nmodule peppers_cluster() {\n    // Create pepper bunches\n    translate([20, 0, 50])\n    rotate([90, 0, 0])\n    cayenne_pepper(pepper_length * 0.8, pepper_diameter * 0.8);\n    \n    translate([15, 10, 45])\n    rotate([75, 0, 30])\n    cayenne_pepper(pepper_length, pepper_diameter);\n    \n    translate([-10, -15, 55])\n    rotate([105, 0, -20])\n    cayenne_pepper(pepper_length * 0.9, pepper_diameter * 0.9);\n    \n    translate([-20, 5, 60])\n    rotate([80, 0, 180])\n    cayenne_pepper(pepper_length * 1.1, pepper_diameter);\n}\n\n// Base pot\ntranslate([0, 0, -10])\ncylinder(h = 15, d = 40, $fn = 16);\n\n// Main plant structure\nunion() {\n    // Main stem\n    translate([0, 0, 5])\n    main_stem();\n    \n    // Leaves\n    translate([0, 0, 5])\n    leaves_cluster();\n    \n    // Additional leaves on branches\n    translate([15, 0, 25])\n    rotate([45, 0, 0])\n    leaves_cluster();\n    \n    translate([-10, 10, 40])\n    rotate([-30, 0, 45])\n    leaves_cluster();\n    \n    // Peppers\n    peppers_cluster();\n}",
    "renders": true
  },
  {
    "plant": "jalapeño",
    "openscad_code": "// Jalapeño Plant - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 32;  // Smooth curves for realistic appearance\nwall_thickness = 2;\n\nmodule stem_segment(height, radius, angle) {\n    translate([0, 0, height/2]) rotate([0, 0, angle]) \n        cylinder(h=height, r=radius, center=true);\n}\n\nmodule leaf(length, width, angle) {\n    translate([0, 0, length/4]) rotate([0, angle, 0]) {\n        // Main leaf body\n        scale([1, width/length, 0.3]) sphere(d=length);\n        \n        // Leaf stem\n        translate([0, 0, -length/4]) cylinder(h=length/8, r=wall_thickness);\n    }\n}\n\nmodule jalapeno_fruit(length, max_diameter) {\n    // Main pepper body - ellipsoid shape\n    scale([max_diameter/length, max_diameter/length, 1]) \n        sphere(d=length);\n    \n    // Stem attachment point\n    translate([0, 0, length/2]) cylinder(h=wall_thickness*2, r=wall_thickness*1.5);\n}\n\nmodule main_stem() {\n    union() {\n        // Base of plant\n        cylinder(h=wall_thickness*3, r=wall_thickness*8);\n        \n        // Main vertical stem\n        translate([0, 0, wall_thickness*1.5]) cylinder(h=40, r=wall_thickness*1.5);\n        \n        // Branch segments\n        for(i = [1:5]) {\n            rotate([0, 0, i*72]) {\n                translate([0, 0, 15 + i*5]) \n                    stem_segment(20, wall_thickness, 30);\n                translate([0, 0, 25 + i*3]) \n                    stem_segment(15, wall_thickness*0.8, -20);\n            }\n        }\n    }\n}\n\nmodule leaves_cluster() {\n    // Leaves along main stem\n    for(i = [1:3]) {\n        rotate([0, 0, i*120]) {\n            translate([0, wall_thickness*5, 10 + i*10]) \n                leaf(25, 15, 45);\n            translate([0, -wall_thickness*5, 12 + i*10]) \n                leaf(20, 12, -30);\n        }\n    }\n    \n    // Leaves on branches\n    for(i = [1:5]) {\n        rotate([0, 0, i*72]) {\n            translate([wall_thickness*4, 0, 25]) \n                rotate([0, 0, 30]) leaf(18, 10, 20);\n            translate([-wall_thickness*3, 0, 30]) \n                rotate([0, 0, -30]) leaf(15, 8, -25);\n        }\n    }\n}\n\nmodule fruits() {\n    // Jalapeño peppers hanging from branches\n    for(i = [1:3]) {\n        rotate([0, 0, i*120]) {\n            translate([wall_thickness*8, 0, 35]) \n                rotate([90, 0, 0]) jalapeno_fruit(25, 12);\n            translate([-wall_thickness*6, 0, 40]) \n                rotate([90, 0, 45]) jalapeno_fruit(20, 10);\n        }\n    }\n    \n    // Additional peppers lower down\n    for(i = [1:2]) {\n        rotate([0, 0, i*180 + 60]) {\n            translate([wall_thickness*5, 0, 25]) \n                rotate([90, 0, 20]) jalapeno_fruit(22, 11);\n        }\n    }\n}\n\n// Assembly of complete plant\nunion() {\n    // Plant base and main structure\n    main_stem();\n    \n    // All leaves\n    leaves_cluster();\n    \n    // All fruits\n    fruits();\n}\n\n// Base platform for 3D printing stability\ntranslate([0, 0, -wall_thickness*1.5]) \n    cylinder(h=wall_thickness*2, r=wall_thickness*10);",
    "renders": true
  },
  {
    "plant": "habanero",
    "openscad_code": "// Habanero Pepper Plant - Realistic Style, Medium Complexity\n// Designed for 3D printing with 2mm wall thickness\n\n// Overall scale factor\nscale_factor = 1;\n\n// Main plant module\nmodule habanero_plant() {\n    // Pot base\n    translate([0, 0, 0]) pot();\n    \n    // Main stem emerging from pot\n    translate([0, 0, 25]) stem(40, 3);\n    \n    // Branch 1 with leaves and pepper\n    translate([0, 0, 50]) {\n        rotate([0, 0, 30]) {\n            stem(25, 2);\n            translate([20, 0, 15]) pepper();\n            translate([15, 5, 10]) leaf(8, 12, 20);\n            translate([10, -5, 5]) leaf(7, 10, -15);\n        }\n    }\n    \n    // Branch 2 with leaves and pepper\n    translate([0, 0, 45]) {\n        rotate([0, 0, -45]) {\n            stem(22, 2);\n            translate([-18, 0, 12]) pepper();\n            translate([-12, 4, 8]) leaf(7, 11, -25);\n            translate([-14, -3, 6]) leaf(6, 9, 30);\n        }\n    }\n    \n    // Lower leaves\n    translate([5, 3, 30]) leaf(10, 15, 45);\n    translate([-4, -2, 28]) leaf(9, 14, -35);\n}\n\n// Pot module with drainage hole\nmodule pot() {\n    difference() {\n        // Outer pot - tapered cylinder\n        cylinder(h = 25, r1 = 20, r2 = 18, $fn = 32);\n        \n        // Inner cavity\n        translate([0, 0, 2]) cylinder(h = 23, r1 = 17.5, r2 = 15.5, $fn = 32);\n        \n        // Drainage hole\n        translate([0, 0, -1]) cylinder(h = 3, r = 3, $fn = 16);\n    }\n    \n    // Pot rim\n    translate([0, 0, 25]) difference() {\n        cylinder(h = 3, r1 = 21, r2 = 21, $fn = 32);\n        cylinder(h = 3, r1 = 18, r2 = 18, $fn = 32);\n    }\n}\n\n// Stem module with segments\nmodule stem(height, radius) {\n    segments = floor(height / 5);\n    for(i = [0:segments-1]) {\n        translate([0, 0, i * 5]) {\n            cylinder(h = 5, r = radius - (i * 0.1), $fn = 8);\n        }\n    }\n}\n\n// Leaf module with realistic shape\nmodule leaf(length, width, angle) {\n    rotate([0, 0, angle]) {\n        translate([0, 0, 0]) {\n            // Main leaf body\n            scale([length/10, width/10, 0.8]) {\n                sphere(r = 5, $fn = 16);\n            }\n            \n            // Leaf tip\n            translate([length/2, 0, 0]) {\n                scale([1, 0.7, 0.8]) {\n                    rotate([0, 90, 0]) cone(3, 2);\n                }\n            }\n            \n            // Leaf base\n            translate([-length/2, 0, 0]) {\n                scale([0.8, 0.8, 0.8]) {\n                    sphere(r = 3, $fn = 8);\n                }\n            }\n            \n            // Central vein\n            translate([0, 0, 0.5]) {\n                rotate([90, 0, 0]) {\n                    scale([length/20, 0.3, 0.3]) {\n                        cylinder(h = length, r = 1, $fn = 4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Habanero pepper module\nmodule pepper() {\n    // Main pepper body - lantern shape\n    rotate([90, 0, 0]) {\n        // Bottom bulb\n        translate([0, 0, -8]) scale([1, 1, 1.2]) sphere(r = 6, $fn = 16);\n        \n        // Middle section\n        translate([0, 0, -2]) scale([1.1, 1.1, 1]) sphere(r = 5.5, $fn = 16);\n        \n        // Top taper\n        translate([0, 0, 4]) scale([0.8, 0.8, 0.8]) sphere(r = 4.5, $fn = 16);\n        \n        // Stem attachment\n        translate([0, 0, 8]) cylinder(h = 3, r = 2, $fn = 8);\n    }\n    \n    // Characteristic wrinkles\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([4, 0, 0]) scale([0.5, 6, 1]) sphere(r = 1, $fn = 8);\n        }\n    }\n}\n\n// Cone helper for leaf tip\nmodule cone(height, radius) {\n    cylinder(h = height, r1 = radius, r2 = 0, $fn = 8);\n}\n\n// Scale and render the plant\nscale(scale_factor) habanero_plant();",
    "renders": true
  },
  {
    "plant": "pepper",
    "openscad_code": "// Realistic Pepper Plant - Capsicum annuum\n// Medium complexity, 3D-printable, 85 mm height\n\n// Overall scale\nplant_scale = 1.0;\nwall_thick = 2;\n\nmodule stem(base_r = 3, top_r = 1.5, h = 25) {\n    // Main stem with slight taper\n    cylinder(h = h, r1 = base_r, r2 = top_r, $fn = 12);\n}\n\nmodule leaf(length = 20, width = 12, thickness = 1.5) {\n    // Simple elliptical leaf shape\n    difference() {\n        scale([1, 0.6, 1]) sphere(d = width, $fn = 20);\n        translate([0, 0, -thickness]) cube([width*2, width*2, thickness*2], center = true);\n    }\n    // Central vein\n    translate([0, -width/2, 0]) rotate([90, 0, 0]) cylinder(h = width, r = 0.4, $fn = 8);\n}\n\nmodule leaf_cluster(stem_angle = 45, count = 3) {\n    // Attach several leaves around stem\n    for(i = [0:count-1]) {\n        rotate([0, 0, i * 120]) {\n            translate([0, 0, i * 5]) rotate([stem_angle, 0, 0]) {\n                color(\"darkgreen\") leaf();\n            }\n        }\n    }\n}\n\nmodule pepper(length = 35, max_d = 18) {\n    // Bell pepper body\n    difference() {\n        union() {\n            // Main pepper body - elongated sphere\n            scale([1, 1, 1.4]) sphere(d = max_d, $fn = 32);\n            \n            // Stem attachment\n            translate([0, 0, max_d*0.7]) cylinder(h = 5, r = 4, $fn = 12);\n        }\n        \n        // Indentation at bottom\n        translate([0, 0, -max_d*0.7]) sphere(d = max_d*0.8, $fn = 32);\n        \n        // Internal cavity for printing\n        translate([0, 0, wall_thick]) scale([0.8, 0.8, 0.8]) sphere(d = max_d-wall_thick*2, $fn = 32);\n    }\n    \n    // Characteristic lobes\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([max_d*0.3, 0, 0]) scale([0.3, 0.4, 0.6]) sphere(d = max_d/2, $fn = 16);\n        }\n    }\n}\n\nmodule pepper_plant() {\n    // Main stem\n    translate([0, 0, 0]) {\n        color(\"saddlebrown\") stem();\n        \n        // First branch\n        translate([0, 0, 10]) rotate([30, 0, 45]) {\n            color(\"saddlebrown\") stem(base_r = 2, top_r = 1, h = 15);\n            \n            // Leaves on first branch\n            translate([0, 0, 15]) leaf_cluster(stem_angle = 25);\n            \n            // First pepper\n            translate([0, 0, 15]) rotate([0, 90, 0]) color(\"red\") pepper();\n        }\n        \n        // Second branch\n        translate([0, 0, 18]) rotate([-25, 0, -30]) {\n            color(\"saddlebrown\") stem(base_r = 2.5, top_r = 1.2, h = 20);\n            \n            // Leaves on second branch\n            translate([0, 0, 20]) leaf_cluster(stem_angle = 35);\n            \n            // Second pepper\n            translate([0, 0, 20]) rotate([0, -90, 0]) color(\"darkgreen\") pepper(length = 30, max_d = 15);\n        }\n        \n        // Third branch\n        translate([0, 0, 22]) rotate([15, 0, 120]) {\n            color(\"saddlebrown\") stem(base_r = 2, top_r = 0.8, h = 12);\n            \n            // Leaves on third branch\n            translate([0, 0, 12]) leaf_cluster(stem_angle = 30);\n            \n            // Third pepper - smaller, still growing\n            translate([0, 0, 12]) rotate([0, 60, 0]) color(\"yellow\") pepper(length = 25, max_d = 12);\n        }\n        \n        // Top leaves\n        translate([0, 0, 25]) leaf_cluster(stem_angle = 20, count = 4);\n    }\n    \n    // Base pot for stability\n    translate([0, 0, -10]) difference() {\n        cylinder(h = 10, r = 20, $fn = 32);\n        cylinder(h = 10, r = 18, $fn = 32);\n    }\n}\n\n// Render the complete plant\nscale([plant_scale, plant_scale, plant_scale]) pepper_plant();",
    "renders": true
  },
  {
    "plant": "vanilla",
    "openscad_code": "// Realistic Vanilla Plant – 90 mm tall, 3D-printable, 2 mm walls\n// Main stem, alternate lanceolate leaves, aerial roots, & a cluster of beans\n\n$fn = 36;           // Smooth curves for printing\n\n// Overall scale factor (mm)\nplant_scale = 1;\n\n// ---- Modules ----\n\n// Simple leaf blade (lanceolate)\nmodule leaf(len = 35, wid = 12, thick = 2) {\n    // Tapered leaf shape using hull of spheres\n    translate([0, len/2, 0])\n        rotate([90, 0, 0])\n            hull() {\n                translate([-wid/2, 0, 0]) sphere(d = thick);\n                translate([ wid/2, 0, 0]) sphere(d = thick);\n                translate([0, len, 0])    sphere(d = thick/2);\n            }\n}\n\n// Aerial root tendril\nmodule root(len = 20, dia = 2) {\n    color(\"saddlebrown\")\n        for(i = [0: 2: len])\n            translate([0, 0, -i])\n                rotate([0, 3*i, 0])\n                    cylinder(h = 2, d = dia);\n}\n\n// Vanilla bean (thin capsule)\nmodule bean(len = 60, dia = 8) {\n    color(\"darkolivegreen\")\n        rotate([90, 0, 0])\n            scale([1, 1, 0.55])\n                cylinder(h = len, d = dia, center = true);\n}\n\n// ---- Plant structure ----\nunion() {\n\n    // Central stem (hollow for 2 mm wall)\n    color(\"forestgreen\")\n    difference() {\n        cylinder(h = 90 * plant_scale, d = 12 * plant_scale);\n        translate([0, 0, -1])\n            cylinder(h = 92 * plant_scale, d = 8 * plant_scale);\n    }\n\n    // Alternate leaves every ~18 mm along stem\n    for(i = [0: 18: 72]) {\n        // Left leaf\n        translate([0, 0, i * plant_scale])\n            rotate([0, -20, -45])\n                leaf();\n\n        // Right leaf staggered slightly upward\n        translate([0, 0, (i + 9) * plant_scale])\n            rotate([0, -20, 135])\n                leaf();\n    }\n\n    // Aerial roots emerging from nodes\n    for(i = [20: 25: 75]) {\n        translate([5 * plant_scale, 0, i * plant_scale])\n            rotate([0, 30, 0])\n                root(len = 25 * plant_scale);\n    }\n\n    // Bean cluster at top node\n    translate([0, 0, 85 * plant_scale])\n        rotate([0, 0, 0])\n            for(a = [0: 60: 300]) {\n                rotate([0, 0, a])\n                    translate([6 * plant_scale, 0, 0])\n                        rotate([0, 20, 0])\n                            bean();\n            }\n}",
    "renders": true
  },
  {
    "plant": "saffron",
    "openscad_code": "// Saffron Plant - Realistic medium complexity\n// 3D printable model with proper wall thickness (~2mm)\n\nmodule stamen(filament_length = 15, anther_size = 2) {\n    // Single stamen with filament and anther\n    translate([0, 0, 0]) {\n        // Filament (thin stem)\n        color(\"yellow\") cylinder(h = filament_length, r = 0.5, $fn = 8);\n        // Anther (pollen-bearing tip)\n        translate([0, 0, filament_length]) \n            sphere(d = anther_size * 2, $fn = 12);\n    }\n}\n\nmodule petals() {\n    // Six saffron petals in two whorls\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) translate([0, 5, 0]) {\n            // Petal shape - elongated teardrop\n            scale([1, 2.5, 0.3]) sphere(d = 6, $fn = 12);\n        }\n    }\n}\n\nmodule flower() {\n    // Main saffron flower assembly\n    union() {\n        // Petals\n        petals();\n        \n        // Stamen cluster in center\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120]) \n                translate([0.5, 0, 0]) stamen(12, 1.5);\n        }\n        \n        // Style (female part) - longer than stamens\n        color(\"red\") {\n            translate([0, 0, 0]) cylinder(h = 18, r = 0.7, $fn = 8);\n            translate([0, 0, 18]) sphere(d = 3, $fn = 12);\n            // Stigmas (3 red branches)\n            for(j = [0:2]) {\n                rotate([0, 0, j * 120]) \n                    translate([0, 0, 18.5]) rotate([30, 0, 0])\n                        scale([0.3, 0.3, 1.5]) cube([1, 1, 8], center = true);\n            }\n        }\n        \n        // Flower base\n        cylinder(h = 2, r1 = 6, r2 = 4, $fn = 24);\n    }\n}\n\nmodule leaf(length = 80, width = 8) {\n    // Long slender saffron leaf with central ridge\n    difference() {\n        // Main leaf blade\n        scale([width/20, length/10, 1]) \n            sphere(d = 20, $fn = 12);\n        \n        // Taper the tip\n        translate([0, length/2 + 5, 0]) \n            cube([width + 2, 10, 2], center = true);\n    }\n    \n    // Central vein\n    translate([0, 0, 1]) \n        color(\"darkgreen\") cube([width/4, length, 0.5], center = true);\n}\n\nmodule corm() {\n    // Saffron corm (underground bulb-like structure)\n    scale([1, 1, 0.6]) sphere(d = 25, $fn = 24);\n    \n    // Protective tunic layers\n    for(layer = [0:1]) {\n        color(\"brown\") {\n            rotate([0, 0, layer * 45]) \n                difference() {\n                    sphere(d = 26 + layer * 2, $fn = 24);\n                    sphere(d = 24 + layer * 2, $fn = 24);\n                }\n        }\n    }\n    \n    // Roots emerging from base\n    for(root = [0:7]) {\n        rotate([0, 0, root * 45]) {\n            translate([0, 10, -13]) \n                rotate([90, 0, 0]) \n                    cylinder(h = 20, r1 = 1.5, r2 = 0.5, $fn = 8);\n        }\n    }\n}\n\nmodule saffron_plant() {\n    // Main plant assembly\n    // Corm at base\n    translate([0, 0, -10]) corm();\n    \n    // Leaves emerging from corm\n    for(leaf_angle = [30, -30, 150, -150]) {\n        rotate([0, 0, leaf_angle]) {\n            translate([0, 12, 0]) \n                rotate([80, 0, 0]) \n                    leaf(60 + leaf_angle/2, 6);\n        }\n    }\n    \n    // Flower stem\n    translate([0, 0, 0]) \n        cylinder(h = 30, r = 2, $fn = 8);\n    \n    // Flower at top of stem\n    translate([0, 0, 30]) flower();\n}\n\n// Scale to reasonable 3D printing size (100mm height)\nscale([0.7, 0.7, 0.7]) saffron_plant();",
    "renders": true
  },
  {
    "plant": "sumac",
    "openscad_code": "// Sumac Plant - Realistic Style, Medium Complexity\n// OpenSCAD code for 3D printable model\n\n// Overall dimensions (mm)\nplant_height = 120;\nbase_radius = 25;\n\n// Stem parameters\nstem_radius = 4;\nstem_segments = 8;\n\n// Leaf parameters\nleaf_length = 35;\nleaf_width = 12;\nleaf_thickness = 2;\nleaflets_per_side = 6;\nleaflet_spacing = 5;\n\n// Berry cluster parameters\nberry_radius = 3;\nberries_per_cluster = 30;\ncluster_height = 25;\ncluster_radius = 8;\n\nmodule stem_segment(height, radius) {\n    cylinder(h=height, r=radius, $fn=8);\n}\n\nmodule leaflet() {\n    // Tapered leaf shape\n    hull() {\n        translate([0, 0, leaf_thickness/2]) sphere(r=leaf_thickness/2, $fn=8);\n        translate([leaf_length*0.8, 0, 0]) sphere(r=leaf_thickness/2, $fn=8);\n        translate([leaf_length, 0, 0]) sphere(r=leaf_thickness/4, $fn=8);\n    }\n    \n    // Add central vein\n    translate([leaf_length/2, 0, leaf_thickness/2]) \n        cube([leaf_length*1.1, 0.5, 0.5], center=true);\n}\n\nmodule compound_leaf() {\n    // Main leaf stem\n    translate([0, 0, leaf_thickness/2]) \n        rotate([90, 0, 0]) cylinder(h=leaf_length*0.8, r=1, $fn=6);\n    \n    // Leaflets on both sides\n    for (i = [0:leaflets_per_side-1]) {\n        y_pos = (i - leaflets_per_side/2 + 0.5) * leaflet_spacing;\n        \n        // Left side leaflets\n        translate([leaf_length*0.7, y_pos, 0])\n            rotate([0, 0, -15]) \n            scale([0.8 - i*0.05, 1, 1]) \n            leaflet();\n            \n        // Right side leaflets\n        translate([leaf_length*0.7, -y_pos, 0])\n            rotate([0, 0, 15]) \n            scale([0.8 - i*0.05, 1, 1]) \n            mirror([0,1,0]) \n            leaflet();\n    }\n}\n\nmodule berry() {\n    sphere(r=berry_radius, $fn=6);\n}\n\nmodule berry_cluster() {\n    translate([0, 0, cluster_height/2]) {\n        // Central stem\n        cylinder(h=cluster_height, r=1, $fn=6);\n        \n        // Berries arranged in cone shape\n        for (i = [0:berries_per_cluster-1]) {\n            theta = i * 137.5;  // Golden angle for natural distribution\n            height_factor = i / berries_per_cluster;\n            r = cluster_radius * (1 - height_factor) * 0.8;\n            \n            translate([\n                r * cos(theta),\n                r * sin(theta),\n                height_factor * cluster_height\n            ]) berry();\n        }\n    }\n}\n\nmodule sumac_plant() {\n    // Base/trunk\n    union() {\n        // Main trunk\n        translate([0, 0, plant_height/2]) \n            cylinder(h=plant_height, r1=base_radius, r2=stem_radius, $fn=12);\n        \n        // Root flare at base\n        translate([0, 0, 2]) \n            cylinder(h=5, r1=base_radius*1.2, r2=base_radius, $fn=12);\n    }\n    \n    // Branches\n    branches = 5;\n    for (i = [0:branches-1]) {\n        angle = i * 72;\n        height = 40 + i * 15;\n        \n        translate([0, 0, height]) {\n            rotate([20 + i*5, angle, 0]) {\n                // Branch stem\n                color(\"brown\") \n                    cylinder(h=30, r=stem_radius*0.7, $fn=6);\n                \n                // Compound leaves at branch end\n                translate([30, 0, 0]) {\n                    rotate([0, 90, 0]) {\n                        compound_leaf();\n                        rotate([0, 0, 120]) compound_leaf();\n                        rotate([0, 0, 240]) compound_leaf();\n                    }\n                }\n                \n                // Berry clusters on some branches\n                if (i % 2 == 0) {\n                    translate([25, 5, 5]) {\n                        color(\"darkred\") berry_cluster();\n                    }\n                }\n            }\n        }\n    }\n    \n    // Top leaves\n    translate([0, 0, plant_height - 10]) {\n        for (j = [0:3]) {\n            rotate([0, 0, j*90]) {\n                translate([stem_radius*2, 0, 0]) {\n                    rotate([0, 90, 0]) compound_leaf();\n                }\n            }\n        }\n    }\n}\n\n// Generate the plant\nsumac_plant();",
    "renders": true
  },
  {
    "plant": "ajowan",
    "openscad_code": "// Ajowan (Trachyspermum ammi) plant with stem, compound umbel inflorescences and seed-like fruits\n// Overall height ≈ 120 mm, suitable for 3D printing with 2 mm wall thickness\n\n$fn = 24;               // moderate facet count for smooth curves\nstem_d = 4;             // main stem diameter\nstem_h = 100;           // main stem height\nnode_spacing = 20;      // distance between branching nodes\npedicel_l = 10;         // length of individual flower stalks\numbel_r = 18;           // radius of compound umbel\nfruit_d = 2;            // diameter of tiny seed-like fruits\nwall_t = 2;             // printable wall thickness\n\nmodule stem() {\n    // main vertical stem as hollow tube\n    difference() {\n        cylinder(h = stem_h, d = stem_d);\n        translate([0, 0, wall_t])\n            cylinder(h = stem_h, d = stem_d - 2*wall_t);\n    }\n}\n\nmodule leaflet() {\n    // small linear leaflet segment (ajowan has pinnate leaves)\n    translate([0, 0, -0.5])\n        cube([20, 1.5, 1], center = true);\n}\n\nmodule pinnate_leaf() {\n    // compound pinnate leaf with 3 pairs plus terminal leaflet\n    union() {\n        // central rachis\n        color(\"darkgreen\")\n        cube([11, 1.5, 1], center = true);\n        // leaflets\n        for (i = [-1:1]) {\n            translate([i*7, 0, 0])\n                leaflet();\n        }\n    }\n}\n\nmodule umbellet() {\n    // one small umbellet of the compound umbel\n    for (a = [0:60:359]) {\n        rotate([0, 0, a])\n            translate([umbel_r/3, 0, 0])\n                cylinder(h = pedicel_l, d = 1);\n    }\n}\n\nmodule fruit_cluster() {\n    // cluster of tiny rounded fruits at umbel tips\n    for (a = [0:30:359]) {\n        rotate([0, 0, a])\n            translate([umbel_r/3, 0, pedicel_l])\n                sphere(d = fruit_d);\n    }\n}\n\nmodule inflorescence() {\n    // compound umbel inflorescence\n    color(\"lightgreen\")\n    union() {\n        // primary rays\n        for (a = [0:45:359]) {\n            rotate([0, 0, a])\n                translate([umbel_r/2, 0, 0])\n                    cylinder(h = pedicel_l, d = 1.5);\n        }\n        // secondary umbellets and fruits\n        for (a = [0:45:359]) {\n            rotate([0, 0, a])\n                translate([umbel_r/2, 0, pedicel_l])\n                    umbellet();\n            rotate([0, 0, a])\n                translate([umbel_r/2, 0, pedicel_l])\n                    fruit_cluster();\n        }\n    }\n}\n\nmodule branching_node(z_pos) {\n    // node with 3 leaves and 1 inflorescence\n    translate([0, 0, z_pos])\n        union() {\n            // three leaves at 120°\n            for (a = [0:120:359]) {\n                rotate([0, 0, a])\n                    rotate([30, 0, 0])\n                        translate([0, 0, 5])\n                            pinnate_leaf();\n            }\n            // inflorescence above leaves\n            rotate([0, 0, 60])\n                translate([0, 0, 8])\n                    inflorescence();\n        }\n}\n\n// assemble plant\nstem();\n// add 4 branching nodes along stem\nfor (z = [stem_h - node_spacing, stem_h - 2*node_spacing, stem_h - 3*node_spacing, stem_h - 4*node_spacing]) {\n    branching_node(z);\n}",
    "renders": true
  },
  {
    "plant": "angelica",
    "openscad_code": "// Angelica Plant - Realistic Style - Medium Complexity\n// Overall height: 120mm, base diameter: 50mm\n\n// Parameters\nstalk_radius = 3;\nstalk_height = 80;\nleaflet_length = 25;\nleaflet_width = 10;\numbel_radius = 25;\nseed_radius = 1.5;\nwall_thickness = 2;\n\nmodule stalk() {\n    // Main hollow cylindrical stalk\n    difference() {\n        cylinder(h=stalk_height, r=stalk_radius, $fn=20);\n        translate([0, 0, wall_thickness])\n            cylinder(h=stalk_height-wall_thickness, r=stalk_radius-wall_thickness, $fn=20);\n    }\n}\n\nmodule leaflet(l, w, t) {\n    // Individual leaflet - compound leaf structure\n    translate([0, 0, -w/2])\n    rotate([0, 90, 0])\n    difference() {\n        scale([1, 0.3, 1])\n            sphere(d=w, $fn=20);\n        translate([0, -w/2, 0])\n            cube([l*2, w, w], center=true);\n    }\n}\n\nmodule compound_leaf() {\n    // Compound leaf with 3 leaflets\n    for (i = [0:60:120]) {\n        rotate([0, 0, i])\n        translate([stalk_radius+2, 0, 0])\n        rotate([0, 45, 0])\n        leaflet(leaflet_length, leaflet_width, 2);\n        \n        rotate([0, 0, i+30])\n        translate([stalk_radius+2, 0, -leaflet_width])\n        rotate([0, 30, 0])\n        scale([0.8, 0.8, 0.8])\n        leaflet(leaflet_length*0.7, leaflet_width*0.7, 2);\n        \n        rotate([0, 0, i-30])\n        translate([stalk_radius+2, 0, leaflet_width])\n        rotate([0, 60, 0])\n        scale([0.8, 0.8, 0.8])\n        leaflet(leaflet_length*0.7, leaflet_width*0.7, 2);\n    }\n}\n\nmodule leaves_cluster() {\n    // Cluster of compound leaves along stalk\n    for (i = [1:6]) {\n        translate([0, 0, i*12])\n        rotate([0, 0, i*60])\n        compound_leaf();\n    }\n}\n\nmodule umbel_branch(length, angle) {\n    // Individual branch of the umbel\n    rotate([0, angle, 0])\n    translate([0, 0, stalk_height])\n    cylinder(h=length, r=1.5, $fn=8);\n}\n\nmodule flower_umbel() {\n    // Characteristic umbrella-shaped flower cluster\n    translate([0, 0, stalk_height])\n    rotate([0, 0, 0])\n    for (i = [0:30:360]) {\n        rotate([0, 0, i])\n        for (j = [15:15:75]) {\n            umbel_branch(umbel_radius * cos(j), j);\n            // Add seeds at branch ends\n            translate([0, umbel_radius * cos(j) * sin(j), stalk_height + umbel_radius * cos(j) * cos(j)])\n            sphere(d=seed_radius*2, $fn=8);\n        }\n    }\n}\n\nmodule base() {\n    // Sturdy base for stability\n    difference() {\n        cylinder(h=8, r=25, $fn=32);\n        translate([0, 0, 2])\n            cylinder(h=6, r=23, $fn=32);\n    }\n}\n\n// Main assembly\nunion() {\n    base();\n    translate([0, 0, 8])\n        stalk();\n    translate([0, 0, 8])\n        leaves_cluster();\n    flower_umbel();\n}",
    "renders": true
  },
  {
    "plant": "anatto",
    "openscad_code": "// Anatto Plant (Bixa orellana) - Realistic Style, Medium Complexity\n// Height: ~120 mm, suitable for 3D printing\n\n// Main parameters\nstem_height = 80;\nstem_diameter = 4;\nleaf_length = 35;\nleaf_width = 20;\nfruit_diameter = 8;\nfruit_spike_height = 12;\nwall_thickness = 2;\n\n// Stem module\nmodule stem() {\n    union() {\n        // Main stem\n        cylinder(h=stem_height, d=stem_diameter, $fn=16);\n        \n        // Branch nodes\n        for(i=[1:3]) {\n            translate([0, 0, i*25]) {\n                rotate([0, 90, 45*i]) {\n                    cylinder(h=20, d=3, $fn=12);\n                }\n            }\n        }\n    }\n}\n\n// Leaf module with proper anatto leaf shape\nmodule leaf() {\n    difference() {\n        // Main leaf body\n        scale([1, 0.6, 0.1]) {\n            sphere(d=leaf_length, $fn=32);\n        }\n        \n        // Leaf tip\n        translate([leaf_length/2, 0, 1.5]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=leaf_length/3, d1=leaf_width/2, d2=0, $fn=8);\n            }\n        }\n        \n        // Vein details\n        for(i=[-1:0.5:1]) {\n            rotate([0, 0, i*15]) {\n                translate([0, -leaf_width/2, 0.5]) {\n                    cube([leaf_length*0.8, wall_thickness, 1], center=false);\n                }\n            }\n        }\n    }\n}\n\n// Cluster of leaves\nmodule leaf_cluster() {\n    for(i=[0:2]) {\n        rotate([0, 0, i*120]) {\n            translate([8, 0, 0]) {\n                rotate([60, 0, 0]) {\n                    leaf();\n                }\n            }\n        }\n    }\n}\n\n// Spiky fruit capsule (anatto seed pod)\nmodule annatto_fruit() {\n    difference() {\n        // Main fruit body\n        sphere(d=fruit_diameter, $fn=16);\n        \n        // Spikes\n        for(i=[0:30:359]) {\n            rotate([0, i, 0]) {\n                translate([fruit_diameter/2 + 0.5, 0, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=fruit_spike_height/2, d1=1.5, d2=0.5, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Seed pod cluster\nmodule fruit_cluster() {\n    translate([15, 0, 50]) {\n        rotate([45, 0, 0]) {\n            for(i=[0:2]) {\n                translate([i*3, 0, i*2]) {\n                    annatto_fruit();\n                }\n            }\n        }\n    }\n}\n\n// Base/root system\nmodule root_system() {\n    difference() {\n        cylinder(h=10, d=stem_diameter*3, $fn=16);\n        translate([0, -10, 0]) {\n            cube([20, 10, 10], center=true);\n        }\n    }\n}\n\n// Assemble the plant\nunion() {\n    // Root base\n    root_system();\n    \n    // Stem\n    translate([0, 0, 10]) {\n        stem();\n    }\n    \n    // Leaves on main stem\n    for(i=[1:3]) {\n        translate([0, 0, 20 + i*20]) {\n            rotate([0, 0, i*60]) {\n                leaf_cluster();\n            }\n        }\n    }\n    \n    // Leaves on branches\n    for(i=[1:3]) {\n        translate([0, 0, 25*i]) {\n            rotate([0, 0, 45*i]) {\n                translate([10, 0, 0]) {\n                    leaf_cluster();\n                }\n            }\n        }\n    }\n    \n    // Fruit clusters\n    fruit_cluster();\n    translate([-10, 0, 60]) {\n        rotate([0, 0, 180]) {\n            fruit_cluster();\n        }\n    }\n}",
    "renders": true
  },
  {
    "plant": "asafetida",
    "openscad_code": "// Ferula assa-foetida (Asafetida plant)\n// Medium-complexity, 3D-printable model, life-size for 1:10 scale\n// Overall height ≈ 120 mm\n\nmodule stalk(h=60, r=3) {\n    // Hollow tube with 2 mm walls\n    difference() {\n        cylinder(h=h, r1=r, r2=r*0.7, $fn=16);\n        translate([0,0,1]) cylinder(h=h-2, r1=r-2, r2=r*0.7-2, $fn=16);\n    }\n}\n\nmodule leaf_segment(len=25, wid=6) {\n    // Single lanceolate leaflet, curled slightly for printability\n    linear_extrude(height=2, convexity=4)\n    polygon(points=[\n        [0,0],\n        [len*0.4, wid*0.3],\n        [len, 0],\n        [len*0.4, -wid*0.3],\n        [0,0]\n    ]);\n}\n\nmodule leaf_cluster(stalk_len=25) {\n    // Group of 3–4 leaflets in a compound leaf\n    union() {\n        for(i=[0:3]) {\n            rotate([0,0,i*90+45]) \n                translate([0,0, stalk_len*i/5])\n                rotate([0,-25,0])\n                leaf_segment(stalk_len - i*3, 6 - i);\n        }\n    }\n}\n\nmodule umbel(r=20, rays=20) {\n    // Spherical umbel of tiny blossoms\n    for(i=[0:rays-1])\n        rotate([0,0,i*360/rays])\n        rotate([90/rays*i,0,0])\n        translate([r*sin(i*360/rays), 0, r*cos(i*360/rays)])\n        scale([0.4,0.4,1.2])\n        sphere(r=1.5, $fn=8);\n}\n\nmodule main_plant() {\n    // Root stem\n    translate([0,0,5])\n    stalk(50, 5);\n\n    // First whorl of leaves\n    for(i=[0:3]) {\n        rotate([0,0,i*90]) {\n            translate([0,0,50]) rotate([0,0,30]) leaf_cluster(30);\n        }\n    }\n\n    // Second whorl higher up\n    for(i=[0:2]) {\n        rotate([0,0,i*120+60]) {\n            translate([0,0,75]) rotate([0,0,-15]) leaf_cluster(25);\n        }\n    }\n\n    // Flowering stem\n    translate([0,0,45])\n    rotate([15,0,0])\n    stalk(45, 3.5);\n\n    translate([0,0,45+45])\n    umbel(15);\n\n    // Additional smaller flowering branches\n    for(i=[0:1]) {\n        rotate([0,0,i*180])\n        translate([0,0,70])\n        rotate([30+i*10,0,0])\n        stalk(20, 2);\n\n        translate([0,0,70+20])\n        rotate([30+i*10,0,0])\n        umbel(10 - i*3);\n    }\n}\n\n// Base plate for print stability\ndifference() {\n    cylinder(h=5, r=25, $fn=32);\n    cylinder(h=5, r=23, $fn=32);\n}\n\n// Assemble plant on base\ntranslate([0,0,5])\nmain_plant();",
    "renders": true
  },
  {
    "plant": "avens",
    "openscad_code": "// Avens plant (Geum) - realistic medium complexity model\n// Height: ~120mm, suitable for 3D printing\n\nmodule stem_segment(h, r, taper=1) {\n    // Create tapered stem segment\n    cylinder(h=h, r1=r, r2=r*taper, $fn=8);\n}\n\nmodule leaf(length, width, angle) {\n    // Create a single compound leaf with 3 leaflets\n    rotate([0, 0, angle])\n    translate([0, 0, 0])\n    union() {\n        // Central leaflet\n        translate([0, 0, 0])\n        scale([length, width, 1])\n        rotate([45, 0, 0])\n        sphere(r=1, $fn=16);\n        \n        // Left leaflet\n        translate([-length/3, 0, 0])\n        rotate([0, 0, -30])\n        scale([length*0.7, width*0.8, 1])\n        rotate([45, 0, 0])\n        sphere(r=1, $fn=16);\n        \n        // Right leaflet\n        translate([length/3, 0, 0])\n        rotate([0, 0, 30])\n        scale([length*0.7, width*0.8, 1])\n        rotate([45, 0, 0])\n        sphere(r=1, $fn=16);\n    }\n}\n\nmodule flower() {\n    // Create a single yellow flower with 5 petals\n    union() {\n        // Center disk\n        color(\"yellow\")\n        translate([0, 0, 0])\n        sphere(r=3, $fn=16);\n        \n        // Petals\n        for(i = [0:4]) {\n            rotate([0, 0, i*72])\n            translate([5, 0, 0])\n            rotate([0, 90, 0])\n            scale([8, 6, 1])\n            cylinder(h=1, r1=3, r2=0, $fn=8);\n        }\n        \n        // Sepals\n        color(\"green\")\n        translate([0, 0, -2])\n        for(i = [0:4]) {\n            rotate([0, 0, i*72 + 36])\n            translate([2, 0, 0])\n            rotate([0, 90, 0])\n            scale([4, 3, 1])\n            cylinder(h=1.5, r1=2, r2=0, $fn=6);\n        }\n    }\n}\n\nmodule seed_head() {\n    // Create spherical seed head with hooked styles\n    union() {\n        color(\"brown\")\n        sphere(r=4, $fn=16);\n        \n        // Hooks (styles)\n        for(i = [0:20]) {\n            rotate([0, i*18, 0])\n            translate([0, 0, 4])\n            rotate([90, 0, 0])\n            cylinder(h=6, r=0.3, $fn=6);\n        }\n    }\n}\n\n// Main plant structure\nunion() {\n    // Main stem\n    color(\"darkgreen\")\n    translate([0, 0, 0])\n    stem_segment(h=80, r=2);\n    \n    // Branches with leaves\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([0, 0, 20 + i*15])\n        union() {\n            // Branch\n            rotate([30, 0, 0])\n            stem_segment(h=30, r=1.2);\n            \n            // Leaves on branch\n            translate([10, 0, 15])\n            rotate([0, 30, 0])\n            leaf(length=15, width=8, angle=0);\n            \n            translate([20, 0, 25])\n            rotate([0, -20, 0])\n            leaf(length=12, width=7, angle=45);\n        }\n    }\n    \n    // Basal leaves\n    for(i = [0:5]) {\n        rotate([0, 0, i*72])\n        translate([0, 0, 5])\n        rotate([0, 45, 0])\n        leaf(length=20, width=12, angle=0);\n    }\n    \n    // Flowers on top\n    translate([0, 0, 80])\n    rotate([0, 0, 0])\n    union() {\n        // Flower stems\n        for(i = [0:2]) {\n            rotate([0, 0, i*120])\n            translate([0, 0, 0])\n            rotate([15, 0, 0])\n            stem_segment(h=25, r=0.8);\n            \n            // Flowers\n            rotate([0, 0, i*120])\n            translate([0, 0, 25])\n            rotate([15, 0, 0])\n            flower();\n        }\n        \n        // Seed heads\n        rotate([0, 0, 60])\n        translate([0, 0, 20])\n        rotate([15, 0, 0])\n        seed_head();\n    }\n    \n    // Root system base\n    color(\"brown\")\n    translate([0, 0, -5])\n    cylinder(h=5, r=5, $fn=16);\n}",
    "renders": true
  },
  {
    "plant": "barberry",
    "openscad_code": "// Barberry plant - realistic style, medium complexity\n// Overall height ~100mm, suitable for 3D printing\n\n$fn = 32;\n\n// Main parameters\nstem_height = 60;\nstem_radius = 3;\nbranch_length = 25;\nbranch_radius = 1.5;\nleaf_size = 6;\nberry_radius = 2.5;\n\n// Main stem\nmodule main_stem() {\n    cylinder(h = stem_height, r = stem_radius, center = false);\n}\n\n// Branch with leaves and berries\nmodule branch(angle, rotation) {\n    translate([0, 0, stem_height * 0.7]) {\n        rotate([0, angle, rotation]) {\n            // Branch structure\n            cylinder(h = branch_length, r = branch_radius, center = false);\n            \n            // Leaves along branch\n            for (i = [1:3]) {\n                translate([0, 0, i * branch_length / 4]) {\n                    rotate([0, 0, 120 * i]) {\n                        // Leaf pair\n                        translate([branch_radius + 1, 0, 0]) {\n                            rotate([0, 90, 45]) {\n                                scale([leaf_size, leaf_size * 0.6, 0.5]) {\n                                    sphere(r = 1);\n                                }\n                            }\n                        }\n                        translate([-branch_radius - 1, 0, 0]) {\n                            rotate([0, 90, -45]) {\n                                scale([leaf_size, leaf_size * 0.6, 0.5]) {\n                                    sphere(r = 1);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Berries at branch tip\n            translate([0, 0, branch_length + berry_radius]) {\n                sphere(r = berry_radius);\n            }\n        }\n    }\n}\n\n// Root flare\nmodule root_flare() {\n    difference() {\n        cylinder(h = 8, r1 = stem_radius * 3, r2 = stem_radius * 1.2, center = false);\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([stem_radius * 1.5, 0, 2]) {\n                    cube([stem_radius * 3, 2, 6], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Thorns\nmodule thorns() {\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([stem_radius, 0, 5 + i * 10]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 4, r1 = 1, r2 = 0.5, center = false);\n                }\n            }\n        }\n    }\n}\n\n// Main plant assembly\nunion() {\n    // Base root system\n    root_flare();\n    \n    // Main stem with thorns\n    union() {\n        main_stem();\n        thorns();\n    }\n    \n    // Branches around stem\n    branch(30, 0);\n    branch(45, 120);\n    branch(30, 240);\n    branch(-30, 60);\n    branch(-45, 180);\n    branch(-30, 300);\n}",
    "renders": true
  },
  {
    "plant": "bay",
    "openscad_code": "// Bay plant with realistic proportions\n// Overall height ~120 mm, suitable for 3D printing\n\n$fn = 36; // Smooth curves\n\n// Main dimensions\npot_height = 40;\npot_radius = 30;\ntrunk_height = 35;\ntrunk_radius = 4;\nfoliage_radius = 45;\n\n// Pot with slight taper\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = pot_height, r1 = pot_radius, r2 = pot_radius * 0.9);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = pot_height - 4, r1 = pot_radius - 2, r2 = pot_radius * 0.9 - 2);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h = 3, r = 4);\n    }\n    \n    // Rim detail\n    translate([0, 0, pot_height])\n        cylinder(h = 4, r1 = pot_radius + 1, r2 = pot_radius + 2);\n}\n\n// Central trunk\nmodule trunk() {\n    color(\"brown\")\n    translate([0, 0, pot_height])\n        cylinder(h = trunk_height, r = trunk_radius);\n}\n\n// Leaf cluster - elliptical leaves\nmodule leaf_cluster(pos, angle, scale) {\n    translate(pos)\n    rotate([0, 0, angle])\n    scale([scale, scale, scale]) {\n        // Central stem\n        cylinder(h = 10, r = 0.8);\n        \n        // Generate leaves in spiral\n        for(i = [0:8]) {\n            rotate([0, 0, i * 45])\n            translate([3, 0, i])\n                rotate([0, 90, 0])\n                scale([1, 0.6, 0.1])\n                    sphere(r = 8);\n        }\n    }\n}\n\n// Main foliage structure\nmodule foliage() {\n    color(\"darkgreen\")\n    translate([0, 0, pot_height + trunk_height]) {\n        // Central cluster\n        leaf_cluster([0, 0, 0], 0, 1.2);\n        \n        // Branch 1\n        translate([0, 0, -5])\n        rotate([30, 0, 45])\n            leaf_cluster([0, 0, 15], 15, 0.8);\n        \n        // Branch 2\n        translate([0, 0, -5])\n        rotate([30, 0, -45])\n            leaf_cluster([0, 0, 15], -15, 0.8);\n        \n        // Branch 3\n        translate([0, 0, -8])\n        rotate([45, 0, 180])\n            leaf_cluster([0, 0, 12], 0, 0.7);\n        \n        // Small upper cluster\n        translate([0, 0, 8])\n            leaf_cluster([0, 0, 0], 0, 0.6);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    color(\"saddlebrown\")\n    difference() {\n        translate([0, 0, pot_height - 2])\n            cylinder(h = 4, r = pot_radius - 1);\n        \n        // Slight depression\n        translate([0, 0, pot_height - 1])\n            cylinder(h = 3, r = pot_radius - 5);\n    }\n}\n\n// Assembly\npot();\nsoil();\ntrunk();\nfoliage();",
    "renders": true
  },
  {
    "plant": "bergamot",
    "openscad_code": "// Bergamot Plant - Medium Complexity Realistic Style\n// Overall height ~120mm, printable in upright orientation\n\n$fn = 36;  // Smooth curves for organic shapes\n\n// Main module\nmodule bergamot_plant() {\n    // Central stem/trunk\n    color(\"SaddleBrown\") stem();\n    \n    // Main branches\n    for(i=[0:120:359]) {\n        rotate([0, 0, i])\n            translate([0, 0, 15])\n                branch();\n    }\n    \n    // Large leaves\n    for(i=[30:60:330]) {\n        rotate([0, 0, i])\n            translate([18, 0, 35])\n                rotate([0, 20, 0])\n                    leaf(35);\n    }\n    \n    // Medium leaves\n    for(i=[0:45:359]) {\n        rotate([0, 0, i])\n            translate([25, 0, 55])\n                rotate([0, -15, 0])\n                    leaf(25);\n    }\n    \n    // Small upper leaves\n    for(i=[15:30:359]) {\n        rotate([0, 0, i])\n            translate([20, 0, 75])\n                rotate([0, 10, 0])\n                    leaf(15);\n    }\n    \n    // Bergamot fruits\n    for(i=[45:90:359]) {\n        rotate([0, 0, i])\n            translate([30, 0, 65])\n                rotate([0, 0, 0])\n                    bergamot_fruit();\n    }\n    \n    // Additional fruits lower down\n    for(i=[0:120:359]) {\n        rotate([0, 0, i])\n            translate([22, 0, 45])\n                rotate([0, 0, 0])\n                    bergamot_fruit();\n    }\n}\n\n// Central stem\nmodule stem() {\n    difference() {\n        cylinder(h=100, d1=8, d2=6, center=false);\n        // Hollow for printing\n        translate([0, 0, 2])\n            cylinder(h=96, d1=4, d2=2, center=false);\n    }\n}\n\n// Branch module\nmodule branch() {\n    difference() {\n        rotate([10, 0, 0])\n            cylinder(h=30, d1=4, d2=2, center=false);\n        // Hollow branch\n        translate([0, 0, 0])\n            rotate([10, 0, 0])\n                cylinder(h=30, d1=2, d2=1, center=false);\n    }\n}\n\n// Bergamot leaf with characteristic shape\nmodule leaf(size) {\n    // Leaf blade - elliptical with pointed tip\n    translate([0, 0, -size/4])\n        scale([1, 0.4, 0.1])\n            rotate([0, 90, 0])\n                difference() {\n                    // Main leaf body\n                    union() {\n                        sphere(size/2);\n                        translate([size/2, 0, 0])\n                            cylinder(h=size/2, r=size/4, center=true);\n                    }\n                    // Pointed tip\n                    translate([size-2, 0, 0])\n                        rotate([0, 0, 0])\n                            sphere(size/3);\n                }\n    \n    // Leaf stem\n    color(\"DarkGreen\")\n        translate([-size/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=size/6, r=0.5, center=true);\n    \n    // Leaf veins (raised)\n    color(\"ForestGreen\")\n        translate([0, 0, 1])\n            for(i=[-0.3:0.15:0.3]) {\n                rotate([0, 0, i*60])\n                    translate([size/4, 0, 0])\n                        scale([size/2, 0.2, 0.1])\n                            rotate([0, 90, 0])\n                                cylinder(h=1, r=size/8, center=true);\n            }\n}\n\n// Bergamot fruit (small orange-like citrus)\nmodule bergamot_fruit() {\n    // Main fruit body - slightly flattened sphere\n    color(\"DarkOrange\")\n        difference() {\n            scale([1, 1, 0.8])\n                sphere(r=6);\n            // Hollow center for printing\n            scale([1, 1, 0.8])\n                sphere(r=4);\n        }\n    \n    // Small nipple at top\n    color(\"Orange\")\n        translate([0, 0, 5.5])\n            cylinder(h=1, r=1, center=true);\n    \n    // Calyx (green part at stem)\n    color(\"ForestGreen\")\n        translate([0, 0, 5.8])\n            cylinder(h=0.5, r=1.5, center=true);\n    \n    // Slight texture - small dimples\n    color(\"Orange\")\n        for(i=[0:30:359]) {\n            rotate([0, 0, i])\n                translate([4.8, 0, 1])\n                    sphere(r=0.3);\n        }\n}\n\n// Render the plant\ntranslate([0, 0, 0])\n    bergamot_plant();",
    "renders": true
  },
  {
    "plant": "boldo",
    "openscad_code": "// Boldo plant - medium complexity realistic style\n// Overall height ~120mm, suitable for 3D printing\n\n// Main stem\nmodule stem() {\n    // Central trunk\n    cylinder(h=80, r=6, $fn=16);\n    \n    // Branch joints\n    for(i=[1:3]) {\n        translate([0, 0, i*20]) {\n            rotate([0, 0, i*120]) {\n                // Branch connection\n                cylinder(h=15, r=4, $fn=12);\n            }\n        }\n    }\n}\n\n// Boldo leaf - elliptical with wavy edges\nmodule leaf(length=40, width=25, thickness=2) {\n    // Main leaf body - ellipsoid\n    scale([1, width/length, thickness/length])\n        sphere(r=length/2, $fn=32);\n    \n    // Leaf veins\n    for(i=[-2:1:2]) {\n        translate([0, i*5, -thickness/2]) {\n            rotate([90, 0, 0])\n                cube([length-10, 0.5, thickness+0.5], center=true);\n        }\n    }\n    \n    // Central vein\n    rotate([90, 0, 0])\n        cube([length-5, 1.5, thickness+1], center=true);\n}\n\n// Small branch with leaves\nmodule branch(stem_length=30, leaf_count=3) {\n    // Stem\n    cylinder(h=stem_length, r=2, $fn=8);\n    \n    // Leaves\n    for(i=[1:leaf_count]) {\n        rotate([0, 0, i*120]) {\n            translate([0, 15, stem_length-5])\n                rotate([0, -20, 30])\n                    leaf();\n        }\n    }\n}\n\n// Root system\nmodule roots() {\n    for(i=[1:5]) {\n        rotate([0, 0, i*72]) {\n            translate([0, 0, -5]) {\n                rotate([15, 0, 0])\n                    cylinder(h=15, r1=4, r2=2, $fn=6);\n            }\n        }\n    }\n}\n\n// Main plant assembly\nmodule boldo_plant() {\n    union() {\n        // Base/root system\n        roots();\n        \n        // Main stem\n        stem();\n        \n        // Branches at each joint\n        for(i=[1:3]) {\n            translate([0, 0, i*20]) {\n                rotate([0, 0, i*120]) {\n                    translate([0, 6, 0]) {\n                        rotate([30, 0, 0])\n                            branch();\n                    }\n                }\n            }\n        }\n        \n        // Top leaves\n        for(i=[1:4]) {\n            rotate([0, 0, i*90]) {\n                translate([0, 8, 75])\n                    rotate([45, 0, 0])\n                        leaf(35, 20);\n            }\n        }\n        \n        // Base support disc\n        translate([0, 0, -10])\n            cylinder(h=5, r=15, $fn=32);\n    }\n}\n\n// Generate the plant\nboldo_plant();",
    "renders": true
  },
  {
    "plant": "borage",
    "openscad_code": "// Borage plant (Borago officinalis)\n// Medium-complexity realistic 3D-printable model\n// Overall height ~90 mm, printable without supports\n\n// Parameters\nstem_r = 2.5;          // stem radius\nstem_h = 40;           // main stem height\nleaf_l = 20;           // leaf length\nleaf_w = 12;           // leaf width\nleaf_t = 2;            // leaf thickness\nflower_r = 8;          // flower radius\nflower_h = 4;          // flower height\nbud_r = 3;             // bud radius\nnum_flowers = 6;       // flowers per cluster\nnum_clusters = 3;      // flower clusters\npetals = 5;            // petals per flower\n\n// Main stem\nmodule stem(h = stem_h, r = stem_r) {\n    cylinder(h = h, r = r, $fn = 16);\n}\n\n// Hairy surface for stem\nmodule stem_texture(h = stem_h, r = stem_r) {\n    difference() {\n        stem(h, r);\n        // Add slight texture with small subtracted cylinders\n        for (i = [0:3:h]) {\n            rotate([0, 0, i*30])\n                translate([r-0.3, 0, i])\n                    cylinder(h = 1.5, r = 0.4, $fn = 8);\n        }\n    }\n}\n\n// Borage leaf (oval with slight point)\nmodule leaf(l = leaf_l, w = leaf_w, t = leaf_t) {\n    scale([1, w/l, t/l])\n        difference() {\n            scale([1, 0.5, 1])\n                sphere(r = l/2, $fn = 32);\n            // Pointed tip\n            translate([l/2-2, 0, 0])\n                cube([4, w, t*2], center = true);\n        }\n}\n\n// Leaf with stem attachment\nmodule leaf_branch(l = leaf_l, w = leaf_w, angle = 45) {\n    union() {\n        // Petiole (leaf stem)\n        rotate([0, 90, 0])\n            cylinder(h = 10, r = 1.2, $fn = 8);\n        // Leaf blade\n        translate([5, 0, 0])\n            rotate([angle, 0, 0])\n                leaf(l, w);\n    }\n}\n\n// Star-shaped flower\nmodule flower(r = flower_r, h = flower_h) {\n    union() {\n        // Center disk\n        cylinder(h = h, r = r/3, $fn = 32);\n        \n        // Petals\n        for (i = [0:360/petals:359]) {\n            rotate([0, 0, i])\n                translate([r/2, 0, h/2])\n                    scale([0.6, 0.2, 0.1])\n                        sphere(r = r/2, $fn = 8);\n        }\n    }\n}\n\n// Flower bud\nmodule bud(r = bud_r) {\n    sphere(r = r, $fn = 16);\n}\n\n// Flower cluster\nmodule flower_cluster(height, angle) {\n    rotate([0, 0, angle]) {\n        translate([0, 0, height]) {\n            // Main flower\n            flower();\n            \n            // Smaller flowers around\n            for (i = [1:num_flowers-1]) {\n                rotate([0, 0, i*60])\n                    translate([8 + i*2, 0, 2])\n                        scale([0.7, 0.7, 0.7])\n                            flower();\n            }\n            \n            // Buds below\n            for (j = [0:2]) {\n                rotate([0, 0, j*120])\n                    translate([6, 0, -3])\n                        bud(r = 2);\n            }\n        }\n    }\n}\n\n// Main plant assembly\nmodule borage_plant() {\n    union() {\n        // Main stem\n        stem_texture();\n        \n        // Lower leaves\n        translate([0, 0, 10])\n            rotate([0, 0, 45])\n                leaf_branch(angle = -30);\n        translate([0, 0, 15])\n            rotate([0, 0, -45])\n                leaf_branch(angle = -20);\n        \n        // Mid leaves\n        translate([0, 0, 25])\n            rotate([0, 0, 120])\n                leaf_branch(angle = -25);\n        translate([0, 0, 30])\n            rotate([0, 0, -120])\n                leaf_branch(angle = -35);\n        \n        // Upper leaves and branches\n        translate([0, 0, 35])\n            rotate([0, 0, 180])\n                leaf_branch(angle = -40);\n        \n        // Flower clusters\n        flower_cluster(50, 0);\n        flower_cluster(60, 60);\n        flower_cluster(70, -60);\n    }\n}\n\n// Render the plant\ntranslate([0, 0, 0])\n    borage_plant();",
    "renders": true
  },
  {
    "plant": "calamus",
    "openscad_code": "// Realistic Calamus Plant - 3D Printable\n// Medium complexity model using basic primitives\n\n// Parameters\nstem_height = 80;\nstem_diameter = 6;\nleaf_length = 40;\nleaf_width = 8;\nleaf_thickness = 2;\nroot_length = 25;\nflower_diameter = 15;\nbase_height = 5;\n\n// Main module\nmodule calamus_plant() {\n    // Base/root system\n    union() {\n        // Base platform\n        translate([0, 0, base_height/2])\n            cylinder(h=base_height, d=30, $fn=32);\n        \n        // Roots emerging from base\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([12, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=root_length, d=4, $fn=16);\n        }\n    }\n    \n    // Main stem\n    translate([0, 0, base_height + stem_height/2])\n        cylinder(h=stem_height, d=stem_diameter, $fn=32);\n    \n    // Leaves\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n            translate([0, 0, base_height + stem_height - i*8])\n                leaf();\n    }\n    \n    // Flower spike at top\n    translate([0, 0, base_height + stem_height + 5])\n        flower_spike();\n}\n\n// Individual leaf module\nmodule leaf() {\n    // Leaf blade\n    translate([0, leaf_length/2, 0])\n        rotate([0, 90, 0])\n            scale([1, leaf_width/leaf_length, 1])\n                cylinder(h=leaf_length, d=leaf_thickness, $fn=32);\n    \n    // Leaf midrib\n    translate([0, leaf_length/2, 0])\n        rotate([0, 90, 0])\n            cylinder(h=leaf_length, d=2, $fn=16);\n    \n    // Side veins\n    for(j=[-2:2]) {\n        if(j != 0) {\n            translate([j*3, leaf_length/4, 0])\n                rotate([0, 90, atan(j*3/leaf_length)])\n                    cylinder(h=sqrt(leaf_length*leaf_length/16 + j*j*9), d=1, $fn=8);\n        }\n    }\n}\n\n// Flower spike module\nmodule flower_spike() {\n    union() {\n        // Central spike\n        cylinder(h=20, d=3, $fn=16);\n        \n        // Individual flowers\n        for(k=[0:5]) {\n            rotate([0, 0, k*60])\n                translate([0, 6, k*3])\n                    scale([1, 1, 0.6])\n                        sphere(d=flower_diameter, $fn=32);\n        }\n    }\n}\n\n// Generate the plant\ncalamus_plant();",
    "renders": true
  },
  {
    "plant": "capers",
    "openscad_code": "// Realistic Capers Plant - Medium Complexity\n// 3D printable with 2mm wall thickness, no overhangs\n\nmodule stem_segment(h, r, angle) {\n    // Create a single stem segment with slight taper\n    translate([0, 0, h/2])\n        rotate([angle, 0, 0])\n            cylinder(h=h, r1=r, r2=r*0.8, $fn=8);\n}\n\nmodule leaf() {\n    // Oval-shaped leaf with central vein\n    scale([1, 2, 0.3])\n        sphere(r=5, $fn=16);\n    \n    // Central vein\n    translate([0, 0, 0.5])\n        scale([0.3, 1.8, 0.2])\n            sphere(r=5, $fn=16);\n}\n\nmodule flower_bud() {\n    // Small spherical bud with sepals\n    sphere(r=3, $fn=12);\n    \n    // Sepals\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n            translate([0, 3.2, 0])\n                rotate([45, 0, 0])\n                    scale([0.5, 1, 0.2])\n                        cylinder(h=2, r=1, $fn=8);\n    }\n}\n\nmodule main_stem() {\n    // Create main woody stem with segments\n    union() {\n        // Base trunk - thicker\n        cylinder(h=15, r=4, $fn=8);\n        \n        // Upper segments\n        for(i=[1:4]) {\n            translate([0, 0, 15 + (i-1)*8])\n                stem_segment(8, 4 - i*0.5, 10);\n        }\n    }\n}\n\nmodule branches() {\n    // Create branching structure\n    for(angle=[0:60:359]) {\n        rotate([0, 0, angle])\n            translate([0, 0, 20])\n                rotate([25 + angle/10, 0, 0])\n                    union() {\n                        // Primary branch\n                        stem_segment(25, 2.5, 0);\n                        \n                        // Secondary branches\n                        translate([0, 0, 12])\n                            for(sub_angle=[-30, 30]) {\n                                rotate([0, 0, sub_angle])\n                                    rotate([20, 0, 0])\n                                        stem_segment(15, 1.5, 0);\n                            }\n                    }\n    }\n}\n\nmodule leaves_cluster() {\n    // Create a cluster of leaves at branch ends\n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n            translate([0, 6, 0])\n                rotate([135, 0, 0])\n                    leaf();\n    }\n}\n\nmodule buds() {\n    // Place flower buds at branch tips\n    for(angle=[0:60:359]) {\n        rotate([0, 0, angle])\n            translate([0, 0, 45 + sin(angle)*2])\n                flower_bud();\n    }\n}\n\n// Base support for stability\ntranslate([0, 0, -2])\n    cylinder(h=4, r=12, $fn=16);\n\n// Main plant structure\nunion() {\n    // Main stem\n    main_stem();\n    \n    // Branches\n    branches();\n    \n    // Add leaves to branch ends\n    for(angle=[0:60:359]) {\n        rotate([0, 0, angle])\n            translate([0, 0, 35])\n                rotate([25 + angle/10, 0, 0])\n                    leaves_cluster();\n    }\n    \n    // Add buds\n    buds();\n}",
    "renders": true
  },
  {
    "plant": "carob",
    "openscad_code": "// Carob Plant - Ceratonia siliqua\n// Medium complexity realistic model\n// Height: 120mm, suitable for 3D printing\n\nmodule carob_pod(length, width, thickness) {\n    // Main pod body - flattened oval cross-section\n    difference() {\n        // Main pod hull\n        scale([1, 0.7, 0.3])\n        rotate([0, 90, 0])\n        cylinder(h=length, d=width, $fn=16);\n        \n        // Seed depressions along pod\n        for(i = [length/4 : length/4 : length-length/4]) {\n            translate([i-length/2, 0, -thickness/2])\n            sphere(d=width/4, $fn=8);\n        }\n    }\n    \n    // Pod tip\n    translate([length/2, 0, 0])\n    scale([0.3, 0.3, 0.3])\n    sphere(d=width, $fn=8);\n    \n    // Pod stem\n    translate([-length/2, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=5, d=3, $fn=8);\n}\n\nmodule leaf(length, width) {\n    // Single pinnate leaf with 2-4 pairs of leaflets\n    color(\"darkgreen\")\n    difference() {\n        // Main rachis (central stem)\n        translate([0, 0, -1])\n        cube([length, 2, 2], center=true);\n        \n        // Leaflet pairs\n        for(i = [length/3 : length/3 : length-length/3]) {\n            // Left leaflet\n            translate([i-length/2, -width/2-1, 0])\n            rotate([0, 5, -30])\n            scale([0.8, 0.4, 0.1])\n            sphere(d=width, $fn=8);\n            \n            // Right leaflet\n            translate([i-length/2, width/2+1, 0])\n            rotate([0, -5, 30])\n            scale([0.8, 0.4, 0.1])\n            sphere(d=width, $fn=8);\n        }\n    }\n}\n\nmodule branch_segment(length, diameter) {\n    // Woody branch segment with slight taper\n    color(\"brown\")\n    cylinder(h=length, d1=diameter, d2=diameter*0.8, $fn=8);\n}\n\nmodule small_branch(length, diameter, angle) {\n    // Recursive branching structure\n    if(length > 15) {\n        rotate([0, 0, angle])\n        branch_segment(length, diameter);\n        \n        // Branch into 2-3 smaller branches\n        translate([0, 0, length])\n        for(i = [-30:30:30]) {\n            small_branch(length*0.7, diameter*0.7, i);\n        }\n    }\n}\n\n// Main trunk\ncolor(\"saddlebrown\")\ntranslate([0, 0, 60])\ncylinder(h=60, d1=20, d2=15, $fn=8);\n\n// Base root flare\ntranslate([0, 0, 30])\ncylinder(h=30, d1=25, d2=20, $fn=8);\n\n// Main branches at 3 levels\ntranslate([0, 0, 120])\nunion() {\n    // Level 1 branches\n    for(i = [0:120:240]) {\n        rotate([0, 0, i])\n        rotate([30, 0, 0])\n        small_branch(40, 8, 0);\n    }\n    \n    // Level 2 branches\n    translate([0, 0, -20])\n    for(i = [60:120:180]) {\n        rotate([0, 0, i])\n        rotate([20, 0, 0])\n        small_branch(30, 6, 0);\n    }\n    \n    // Level 3 branches\n    translate([0, 0, -35])\n    for(i = [0:72:288]) {\n        rotate([0, 0, i])\n        rotate([15, 0, 0])\n        small_branch(20, 4, 0);\n    }\n}\n\n// Leaves on outer branches\nfor(branch = [[-30, 50, 100], [30, 40, 95], [-50, 20, 90], [50, 25, 85], [-40, -30, 100], [40, -35, 95]]) {\n    translate(branch)\n    rotate([0, 0, rand(360)])\n    leaf(25, 12);\n}\n\ntranslate([20, 45, 105])\nrotate([0, 0, 45])\nleaf(20, 10);\n\ntranslate([-25, -40, 100])\nrotate([0, 0, -30])\nleaf(22, 11);\n\n// Carob pods hanging from branches\ntranslate([35, 30, 90])\nrotate([90, 0, 0])\ncarob_pod(45, 12, 6);\n\ntranslate([-30, 35, 85])\nrotate([80, 0, 15])\ncarob_pod(40, 11, 5);\n\ntranslate([15, -45, 95])\nrotate([100, 0, -10])\ncarob_pod(42, 11, 5);\n\n// Ground base\ncolor(\"darkolivegreen\")\ntranslate([0, 0, 0])\ncylinder(h=2, d=60, $fn=32);",
    "renders": true
  },
  {
    "plant": "celery",
    "openscad_code": "// Celery plant - realistic medium complexity\n// Overall height: 120mm, base diameter: 40mm\n\nmodule celery_stalk(h=100, r=5, segments=8, twist=30) {\n    // Create a single curved celery stalk with natural taper\n    difference() {\n        union() {\n            // Main stalk body with slight curve\n            for(i = [0:segments-1]) {\n                height = h * i / segments;\n                radius = r * (1 - height / (h * 1.5)); // Taper towards top\n                angle = twist * sin(i * 180 / segments);\n                \n                translate([0, 5 * sin(height * 0.05), height])\n                rotate([angle, 0, 0])\n                cylinder(h=h/segments, r1=radius, r2=radius*0.95, $fn=6);\n            }\n            \n            // Connect segments with smooth transitions\n            for(i = [0:segments-2]) {\n                height1 = h * i / segments;\n                height2 = h * (i+1) / segments;\n                radius1 = r * (1 - height1 / (h * 1.5));\n                radius2 = r * (1 - height2 / (h * 1.5));\n                \n                translate([0, 5 * sin(height1 * 0.05) + 2.5, (height1+height2)/2])\n                cylinder(h=height2-height1, r1=radius1, r2=radius2, $fn=6);\n            }\n        }\n        \n        // Hollow out the stalk for 3D printing\n        translate([0, 0, -1])\n        cylinder(h=h+2, r=r-2, $fn=6);\n    }\n}\n\nmodule celery_ribs() {\n    // Characteristic celery ribs along the stalk\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([3.5, 0, 5])\n        difference() {\n            // Raised rib\n            cube([1.5, 1, 90]);\n            // Slight curve to rib\n            translate([-0.5, -0.5, 45])\n            rotate([0, 5, 0])\n            cube([2.5, 2, 40]);\n        }\n    }\n}\n\nmodule celery_leaf(length=25, width=12) {\n    // Create a celery leaf with proper shape\n    difference() {\n        // Main leaf body\n        translate([0, 0, -1])\n        scale([1, 0.6, 0.1])\n        sphere(r=width/2, $fn=20);\n        \n        // Taper to point\n        translate([width/2-5, 0, -2])\n        rotate([0, 0, -30])\n        cube([width, width, 5]);\n        \n        // Leaf serration cuts\n        for(i = [0:4]) {\n            translate([i*4-8, -width/2, -1])\n            rotate([0, 0, 15])\n            cube([2, width, 3]);\n        }\n    }\n}\n\nmodule celery_leaves() {\n    // Attach leaves to top of stalks\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 15])\n        translate([0, 8, 95])\n        rotate([90, 0, 15])\n        scale([0.8 + i*0.1, 0.8 + i*0.1, 1])\n        celery_leaf(25 + i*5, 12 + i*2);\n    }\n    \n    // Smaller inner leaves\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([0, 4, 100])\n        rotate([75, 0, 0])\n        scale([0.6, 0.6, 0.6])\n        celery_leaf(20, 10);\n    }\n}\n\nmodule celery_base() {\n    // Root base with natural irregular shape\n    difference() {\n        union() {\n            // Main base\n            cylinder(h=15, r=20, $fn=8);\n            \n            // Root extensions\n            for(i = [0:5]) {\n                rotate([0, 0, i * 60])\n                translate([15, 0, 7])\n                rotate([90, 0, 0])\n                cylinder(h=12, r1=4, r2=2, $fn=4);\n            }\n        }\n        \n        // Hollow base\n        translate([0, 0, -1])\n        cylinder(h=17, r=18, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    celery_base();\n    \n    // Main stalk group\n    translate([0, 0, 15])\n    union() {\n        // Central large stalk\n        celery_stalk(100, 8, 12, 25);\n        \n        // Side stalks\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n            translate([8, 0, 0])\n            rotate([5, 0, 0])\n            celery_stalk(85, 6, 10, 20);\n        }\n        \n        // Add ribs to all stalks\n        celery_ribs();\n    }\n    \n    // Leaves at top\n    celery_leaves();\n}",
    "renders": true
  },
  {
    "plant": "chicory",
    "openscad_code": "// Chicory Plant - Realistic Medium Complexity\n// Total height ~120mm, suitable for 3D printing\n\n// Main parameters\nstem_d = 5;\nstem_h = 80;\nleaf_length = 35;\nleaf_width = 8;\nflower_d = 25;\nflower_h = 15;\nwall_t = 2;\n\n// Root parameters\nroot_d = 12;\nroot_h = 25;\n\n// Stem module with gentle taper\nmodule stem() {\n    union() {\n        // Main stem\n        cylinder(h=stem_h, d1=stem_d+2, d2=stem_d, $fn=16);\n        \n        // Stem joints for leaves\n        for(i=[1:7]) {\n            rotate([0, 0, i*45]) \n                translate([0, 0, i*10+10])\n                    sphere(d=stem_d+1, $fn=12);\n        }\n    }\n}\n\n// Individual leaf with proper chicory shape (lobed)\nmodule single_leaf(length, width, angle) {\n    // Leaf body - elongated with lobed edges\n    translate([0, 0, -length/2])\n    rotate([0, angle, 0])\n    union() {\n        // Main leaf blade\n        scale([1, 0.3, 1])\n            sphere(d=length, $fn=20);\n        \n        // Lobes along edge\n        for(i=[-2:2]) {\n            if(i != 0) {\n                translate([i*width/4, 0, -length/4])\n                rotate([0, 0, 15*i])\n                scale([0.4, 0.4, 0.6])\n                    sphere(d=width, $fn=12);\n            }\n        }\n        \n        // Central vein\n        translate([0, 0, -length/2])\n            cylinder(h=length, d=1, $fn=8);\n    }\n}\n\n// Leaf attachment module\nmodule leaf_attachment() {\n    for(i=[1:7]) {\n        rotate([0, 0, i*45]) {\n            translate([stem_d/2+2, 0, i*10+10]) {\n                rotate([0, -30, 0])\n                    single_leaf(leaf_length-i*2, leaf_width, 15);\n            }\n            \n            // Opposite leaf on other side\n            translate([-stem_d/2-2, 0, i*10+10]) {\n                rotate([0, 30, 180])\n                    single_leaf(leaf_length-i*2, leaf_width, -15);\n            }\n        }\n    }\n}\n\n// Chicory flower head with ray florets\nmodule flower_head() {\n    union() {\n        // Flower base\n        cylinder(h=flower_h/2, d=flower_d, $fn=32);\n        \n        // Individual ray florets (blue petals)\n        for(i=[0:23]) {\n            rotate([0, 0, i*15]) {\n                translate([0, flower_d/2-3, flower_h/2])\n                    rotate([75, 0, 0])\n                        scale([0.8, 0.2, 3])\n                            sphere(d=4, $fn=8);\n            }\n        }\n        \n        // Center disk florets\n        translate([0, 0, flower_h])\n            cylinder(h=3, d=flower_d/2, $fn=24);\n        \n        // Sepals below flower\n        translate([0, 0, -1])\n            cylinder(h=4, d=flower_d+4, $fn=32);\n    }\n}\n\n// Taproot - typical chicory root\nmodule taproot() {\n    union() {\n        // Main root\n        translate([0, 0, -root_h/2])\n            cylinder(h=root_h, d1=root_d, d2=root_d/2, $fn=16);\n        \n        // Root hairs/fibers\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n                translate([root_d/2, 0, -root_h/3])\n                    rotate([90, 0, 0])\n                        cylinder(h=8, d=1.5, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Root at base\n    translate([0, 0, -root_h/2])\n        taproot();\n    \n    // Stem\n    translate([0, 0, root_h])\n        stem();\n    \n    // Leaves\n    translate([0, 0, root_h])\n        leaf_attachment();\n    \n    // Flower at top\n    translate([0, 0, root_h+stem_h])\n        flower_head();\n}",
    "renders": true
  },
  {
    "plant": "cicely",
    "openscad_code": "// Cicely plant (Myrrhis odorata)\n// Realistic style, medium complexity\n// 3D printable with 2mm walls and no overhangs\n\n// Overall dimensions\nplant_height = 100;\nstem_diameter = 3;\nleaf_length = 25;\nseed_length = 35;\n\nmodule stem() {\n    // Main stem, hollow for 3d printing\n    difference() {\n        cylinder(h=plant_height, d=stem_diameter, $fn=8);\n        translate([0,0,1])\n            cylinder(h=plant_height-2, d=stem_diameter-2, $fn=8);\n    }\n}\n\nmodule leaf(length, width, stem_offset, angle, twist) {\n    // Individual compound leaf\n    translate([0,0,stem_offset])\n    rotate([0,0,angle])\n    rotate([90+twist,0,0])\n    union() {\n        // Central rachis\n        cylinder(h=length, d=1.5, $fn=6);\n        \n        // Leaflets along rachis\n        for(i=[0:5:length-5]) {\n            translate([0,0,i])\n            rotate([0,90,0])\n            scale([1,0.6,1])\n            difference() {\n                // Leaflet blade\n                sphere(d=width, $fn=20);\n                \n                // Vein groove\n                translate([0,-width/2,0])\n                cube([width/4, width, width/2], center=true);\n            }\n            \n            // Opposite leaflet\n            translate([0,0,i])\n            rotate([0,-90,0])\n            scale([1,0.6,1])\n            difference() {\n                sphere(d=width, $fn=20);\n                translate([0,-width/2,0])\n                cube([width/4, width, width/2], center=true);\n            }\n        }\n    }\n}\n\nmodule seed_head(position, size) {\n    // Compound umbel seed head\n    translate([0,0,position])\n    union() {\n        // Central umbel stalk\n        cylinder(h=20, d=2, $fn=6);\n        \n        // Primary rays\n        for(i=[0:30:330]) {\n            rotate([0,0,i])\n            translate([0,0,20])\n            rotate([90,0,0])\n            cylinder(h=size, d=0.8, $fn=4);\n            \n            // Secondary umbels\n            for(j=[0:45:315]) {\n                rotate([0,0,i])\n                translate([size*cos(j)*0.7, size*sin(j)*0.7, 20])\n                sphere(d=4, $fn=12);\n                \n                // Individual seeds\n                for(k=[0:60:300]) {\n                    rotate([0,0,k])\n                    translate([size*cos(j)*0.7+3, size*sin(j)*0.7, 20])\n                    scale([1,0.3,1])\n                    sphere(d=1.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Build the plant\nunion() {\n    // Main stem\n    stem();\n    \n    // Lower leaves\n    leaf(leaf_length*0.8, leaf_length*0.7, 10, 0, 15);\n    leaf(leaf_length, leaf_length*0.8, 15, 45, -10);\n    leaf(leaf_length*0.9, leaf_length*0.75, 20, -60, 5);\n    \n    // Mid leaves\n    leaf(leaf_length*1.1, leaf_length*0.85, 35, 120, 20);\n    leaf(leaf_length*0.95, leaf_length*0.8, 40, -135, -15);\n    \n    // Upper leaves\n    leaf(leaf_length*0.7, leaf_length*0.6, 55, 80, 10);\n    leaf(leaf_length*0.75, leaf_length*0.65, 60, -75, -5);\n    \n    // Seed head\n    seed_head(plant_height-10, seed_length);\n}",
    "renders": true
  },
  {
    "plant": "costmary",
    "openscad_code": "// Costmary plant (Tanacetum balsamita) - realistic medium complexity\n// Overall height ~110 mm, 3D-printable without supports\n\n$fn = 36;\n\n// Parameters\nstem_h = 65;\nstem_r = 3;\nleaf_w = 12;\nleaf_l = 35;\nleaf_t = 2;\nflower_r = 12;\nflower_h = 8;\nbract_l = 6;\nbract_t = 1.5;\nnum_flowers = 7;\n\nmodule stem() {\n    // Main stem\n    cylinder(h = stem_h, r = stem_r, center = false);\n    \n    // Small ridges for texture\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([stem_r, 0, stem_h / 2])\n                cube([1, 0.5, stem_h - 10], center = true);\n    }\n}\n\nmodule leaf(base_angle, twist, height, scale_factor = 1) {\n    translate([0, 0, height])\n    rotate([base_angle, 0, twist])\n    scale([scale_factor, scale_factor, scale_factor])\n    difference() {\n        // Main leaf blade - elongated oval\n        scale([1, leaf_l / leaf_w, 1])\n            cylinder(h = leaf_t, r = leaf_w / 2, center = true);\n        \n        // Small serrations along edge\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([leaf_w / 2 - 1, 0, 0])\n                    cube([2, 1, leaf_t + 0.5], center = true);\n        }\n        \n        // Central vein\n        translate([0, -leaf_l / 2, 0])\n            rotate([90, 0, 0])\n                cylinder(h = leaf_l, r = 0.5, center = false);\n    }\n}\n\nmodule flower_cluster() {\n    // Central disk flowers\n    cylinder(h = flower_h, r = flower_r / 3, center = false);\n    \n    // Ray flowers (bracts)\n    for (i = [0:15]) {\n        rotate([0, 0, i * 360 / 16])\n            translate([flower_r / 2, 0, flower_h / 2])\n                rotate([0, 90, 0])\n                    scale([1, 0.8, 0.3])\n                        cylinder(h = bract_l, r = bract_t, center = true);\n    }\n}\n\nmodule plant() {\n    union() {\n        // Main stem\n        stem();\n        \n        // Leaves in opposite pairs\n        for (i = [0:3]) {\n            // Lower leaves - larger\n            leaf(30 + i * 5, 45, i * 15 + 10, 1.2 - i * 0.2);\n            leaf(-30 - i * 5, -45, i * 15 + 10, 1.2 - i * 0.2);\n            \n            // Upper leaves - smaller\n            if (i < 3) {\n                leaf(20 + i * 10, 30, i * 15 + 25, 0.8 - i * 0.1);\n                leaf(-20 - i * 10, -30, i * 15 + 25, 0.8 - i * 0.1);\n            }\n        }\n        \n        // Flower heads at top\n        for (j = [0:num_flowers - 1]) {\n            rotate([0, 0, j * 360 / num_flowers])\n                translate([0, 8, stem_h - 5 + j * 2])\n                    rotate([15 + j * 5, 0, 0])\n                        flower_cluster();\n        }\n        \n        // Base support for printing\n        translate([0, 0, -2])\n            cylinder(h = 2, r = 8, center = false);\n    }\n}\n\n// Render the plant\nplant();",
    "renders": true
  },
  {
    "plant": "cubeb",
    "openscad_code": "// Cubeb Pepper Plant - Piper cubeba\n// Realistic medium-complexity model for 3D printing\n\n// Parameters for sizing\nstem_height = 80;\nstem_diameter = 4;\nleaf_length = 35;\nleaf_width = 15;\nfruit_diameter = 4;\nfruit_cluster_size = 8;\n\n// Main stem module\nmodule stem() {\n    cylinder(h=stem_height, d=stem_diameter, $fn=12);\n}\n\n// Leaf module with proper proportions\nmodule leaf() {\n    // Central vein\n    translate([0, -leaf_length/2, 0])\n        rotate([90, 0, 0])\n            cylinder(h=leaf_length, d=1.5, $fn=6);\n    \n    // Leaf blade - elliptical shape\n    scale([leaf_width/20, leaf_length/20, 1])\n        sphere(d=20, $fn=32);\n}\n\n// Fruit cluster (cubeb berries)\nmodule fruit_cluster() {\n    for(i = [0:fruit_cluster_size-1]) {\n        rotate([0, 0, i * 45])\n            translate([5, 0, 0])\n                sphere(d=fruit_diameter, $fn=12);\n    }\n}\n\n// Branch with leaves and fruits\nmodule branch(branch_angle, branch_length) {\n    rotate([branch_angle, 0, 0])\n        translate([0, 0, stem_height/2])\n            union() {\n                // Branch stem\n                cylinder(h=branch_length, d=stem_diameter*0.8, $fn=8);\n                \n                // Leaves along branch\n                translate([0, 0, branch_length*0.3])\n                    rotate([0, 30, 0])\n                        leaf();\n                translate([0, 0, branch_length*0.6])\n                    rotate([0, -30, 0])\n                        mirror([1, 0, 0])\n                            leaf();\n                \n                // Fruit cluster at branch tip\n                translate([0, 0, branch_length])\n                    fruit_cluster();\n            }\n}\n\n// Base pot\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=20, d1=25, d2=30, $fn=32);\n        \n        // Hollow inside\n        translate([0, 0, 2])\n            cylinder(h=18, d1=21, d2=26, $fn=32);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, 18])\n        cylinder(h=2, d=28, $fn=32);\n}\n\n// Main plant assembly\nunion() {\n    // Pot and soil\n    pot();\n    soil();\n    \n    // Main stem emerging from soil\n    translate([0, 0, 20])\n        stem();\n    \n    // Branches with realistic distribution\n    translate([0, 0, 20])\n        union() {\n            branch(45, 30);\n            branch(-45, 25);\n            branch(30, 28);\n            branch(-30, 32);\n            branch(60, 20);\n            branch(-60, 22);\n        }\n    \n    // Top leaves\n    translate([0, 0, stem_height + 20])\n        union() {\n            rotate([0, 0, 0]) leaf();\n            rotate([0, 0, 90]) leaf();\n            rotate([0, 0, 180]) leaf();\n            rotate([0, 0, 270]) leaf();\n        }\n}",
    "renders": true
  },
  {
    "plant": "cudweed",
    "openscad_code": "// Cudweed plant - medium complexity realistic style\n\n// Overall dimensions ~120mm tall\n\n// Base soil disk\nmodule soil() {\n    cylinder(h = 4, r = 40, $fn = 48);\n}\n\n// Main stem with slight taper\nmodule stem(h = 60, r_base = 3, r_top = 2) {\n    union() {\n        // Central stem\n        cylinder(h1 = h, r1 = r_base, r2 = r_top, $fn = 16);\n        \n        // Light surface texture with small bumps\n        for(i = [0:30]) {\n            rotate([0, 0, i * 12])\n                translate([r_base + 0.5, 0, i * 2])\n                    sphere(d = 1.2);\n        }\n    }\n}\n\n// Individual cudweed leaf - elongated with soft tip\nmodule leaf(len = 20, wid = 6) {\n    difference() {\n        // Main leaf blade\n        hull() {\n            translate([-len/2, 0, 0])\n                sphere(d = wid);\n            translate([len/2, 0, 0])\n                sphere(d = wid * 0.5);\n        }\n        \n        // Subtle central groove\n        translate([0, 0, -1])\n            cube([len, 1, 2], center = true);\n            \n        // Taper both ends slightly\n        translate([-len/2 - 2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = wid + 2, r = 2);\n    }\n}\n\n// Cluster of leaves in rosette\nmodule leaf_rosette(count = 12) {\n    for(i = [0:count-1]) {\n        ang = i * (360 / count) + (i % 2) * 15;\n        rad = 12 + (i % 3) * 3;\n        \n        translate([cos(ang) * rad, sin(ang) * rad, 4])\n            rotate([90, 0, ang])\n                rotate([0, 20 + (i % 4) * 10, 0])\n                    leaf(15 + (i % 3) * 3, 4 + (i % 2) * 2);\n    }\n}\n\n// Individual flower head - soft woolly ball\nmodule flower_head(size = 8) {\n    union() {\n        // Core\n        sphere(d = size * 0.7);\n        \n        // Woolly fibers\n        for(phi = [0:30:150]) {\n            for(theta = [0:30:330]) {\n                translate([0, 0, 0])\n                    rotate([phi, 0, theta])\n                        translate([0, 0, size * 0.35])\n                            scale([0.3, 0.3, 1])\n                                sphere(d = size * 0.4);\n            }\n        }\n    }\n}\n\n// Branch with flowers\nmodule flower_branch() {\n    // Branch stem\n    rotate([-90 + rand(-15, 15), 0, rand(-20, 20)])\n        cylinder(h = 25, r = 1.5, $fn = 8);\n    \n    // Flowers along branch\n    for(i = [0:2]) {\n        translate([0, 0, 8 + i * 7])\n            rotate([0, 0, i * 120])\n                translate([3, 0, 0])\n                    flower_head(6 + i);\n    }\n}\n\n// Utility to get pseudo-random value between min and max\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Main plant assembly\nunion() {\n    // Soil base\n    soil();\n    \n    // Main stem emerging from soil\n    translate([0, 0, 4])\n        stem(50, 3.5, 2.5);\n    \n    // Basal rosette leaves\n    leaf_rosette(14);\n    \n    // Upper flower stems\n    translate([0, 0, 45])\n        for(i = [0:4]) {\n            ang = i * 72 + rand(-10, 10);\n            rot = rand(0, 360);\n            \n            translate([0, 0, 2])\n                rotate([ang, 0, rot])\n                    translate([0, 0, 10])\n                        flower_branch();\n        }\n    \n    // Tiny scale-like leaves on stem\n    for(i = [0:10]) {\n        h = 10 + i * 3.5;\n        ang = i * 137.5;\n        \n        translate([0, 0, h])\n            rotate([0, 0, ang])\n                translate([3.5 - i * 0.15, 0, 0])\n                    rotate([90, 0, 0])\n                        scale([0.8, 0.3, 1])\n                            leaf(4, 2);\n    }\n}",
    "renders": true
  },
  {
    "plant": "curryleaf",
    "openscad_code": "// Curryleaf plant - medium complexity realistic model\n// Overall height ~100mm, suitable for 3D printing\n\n// Parameters\nstem_height = 80;\nstem_diameter = 4;\nleaf_length = 25;\nleaf_width = 10;\nleaf_thickness = 1;\nnum_leaf_pairs = 6;\nleaf_spacing = 10;\n\n// Main module\nmodule curryleaf_plant() {\n    // Main stem with slight taper\n    cylinder(h=stem_height, d1=stem_diameter+1, d2=stem_diameter, $fn=12);\n    \n    // Add branches with leaves\n    for (i = [1:num_leaf_pairs]) {\n        translate([0, 0, i*leaf_spacing]) {\n            rotate([0, 0, i*60]) {\n                branch_with_leaves(i*5);\n            }\n        }\n    }\n    \n    // Base root flare\n    translate([0, 0, -2]) {\n        cylinder(h=4, d1=stem_diameter+4, d2=stem_diameter+1, $fn=12);\n    }\n}\n\n// Single leaf with characteristic curryleaf shape\nmodule curryleaf() {\n    difference() {\n        // Main leaf blade\n        scale([1, 0.4, 0.05])\n            sphere(d=leaf_length*2, $fn=20);\n        \n        // Remove center for pinnate leaf effect\n        translate([0, -leaf_width/2, -leaf_thickness])\n            cube([leaf_length*0.8, leaf_width*0.2, leaf_thickness*3], center=true);\n    }\n    \n    // Petiole (leaf stem)\n    translate([leaf_length/2, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=leaf_length/4, d=leaf_thickness*2, $fn=8);\n}\n\n// Branch with leaf pairs\nmodule branch_with_leaves(angle) {\n    // Branch stem\n    translate([0, 0, 0]) {\n        rotate([0, angle, 0]) {\n            cylinder(h=stem_height/4, d=stem_diameter*0.8, $fn=8);\n            \n            // Left leaf pair\n            translate([0, 0, stem_height/8]) {\n                rotate([0, 45, -30]) {\n                    curryleaf();\n                }\n            }\n            \n            // Right leaf pair\n            translate([0, 0, stem_height/8]) {\n                rotate([0, 45, 30]) {\n                    mirror([0, 1, 0]) {\n                        curryleaf();\n                    }\n                }\n            }\n            \n            // Terminal leaf\n            translate([0, 0, stem_height/4]) {\n                rotate([0, 0, 0]) {\n                    curryleaf();\n                }\n            }\n        }\n    }\n}\n\n// Generate the plant\ncurryleaf_plant();\n\n// Add slight ground base for stability\ntranslate([0, 0, -4]) {\n    cylinder(h=2, d=15, $fn=32);\n}",
    "renders": true
  },
  {
    "plant": "damiana",
    "openscad_code": "// Damiana plant (Turnera diffusa) - realistic medium complexity\n// 3D printable model with proper wall thickness and no overhangs\n// Approximate size: 80mm height\n\n// Parameters\nstem_height = 30;\nstem_diameter = 3;\nmain_leaf_length = 25;\nmain_leaf_width = 12;\nleaf_thickness = 2;\nflower_diameter = 8;\nflower_height = 6;\nbranch_angle = 35;\nwall_thickness = 2;\n\n// Stem module\nmodule stem(h, d) {\n    difference() {\n        cylinder(h=h, d=d, $fn=16);\n        // Hollow core for 3D printing\n        translate([0, 0, wall_thickness])\n            cylinder(h=h-wall_thickness*2, d=d-wall_thickness*2, $fn=16);\n    }\n}\n\n// Leaf module - damiana has serrated oval leaves\nmodule damiana_leaf(length, width, thick) {\n    difference() {\n        // Main leaf body\n        scale([1, width/length, thick/length])\n            sphere(d=length, $fn=32);\n        \n        // Serrations on edges\n        for(i = [0:8]) {\n            rotate([0, 0, i*45-180])\n                translate([length/2-2, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=3, d=1.5, $fn=6);\n        }\n        \n        // Leaf tip\n        translate([length/2-1, 0, 0])\n            sphere(d=2, $fn=12);\n    }\n    \n    // Leaf veins\n    for(i = [-1:0.5:1]) {\n        translate([i*width/4, 0, thick/2])\n            rotate([90, 0, 0])\n                cylinder(h=length/2, d=0.5, $fn=6);\n    }\n}\n\n// Flower module - damiana has small yellow flowers with 5 petals\nmodule damiana_flower(diam, height) {\n    union() {\n        // Flower center\n        cylinder(h=height/2, d=diam/2, $fn=16);\n        \n        // Petals\n        for(i = [0:4]) {\n            rotate([0, 0, i*72])\n                translate([diam/4, 0, height/2])\n                    rotate([90, 0, 0])\n                        scale([1, 1.5, 0.5])\n                            cylinder(h=diam/3, d=diam/6, $fn=12);\n        }\n    }\n}\n\n// Main plant structure\nunion() {\n    // Main stem\n    stem(stem_height, stem_diameter);\n    \n    // First level branches\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([0, 0, stem_height/3])\n                rotate([branch_angle, 0, 0])\n                    union() {\n                        stem(stem_height/2, stem_diameter*0.8);\n                        \n                        // Leaves on first branches\n                        for(j = [0:2]) {\n                            rotate([0, 0, j*120])\n                                translate([0, stem_height/4, 0])\n                                    rotate([0, 90, 0])\n                                        damiana_leaf(main_leaf_length, main_leaf_width, leaf_thickness);\n                        }\n                        \n                        // Second level branches\n                        translate([0, 0, stem_height/2])\n                            rotate([branch_angle/2, 0, 0])\n                                union() {\n                                    stem(stem_height/3, stem_diameter*0.6);\n                                    \n                                    // Leaves on second branches\n                                    for(k = [0:1]) {\n                                        rotate([0, 0, k*180])\n                                            translate([0, stem_height/6, 0])\n                                                rotate([0, 90, 0])\n                                                    damiana_leaf(main_leaf_length*0.8, main_leaf_width*0.8, leaf_thickness);\n                                    }\n                                    \n                                    // Flowers at branch tips\n                                    translate([0, 0, stem_height/3])\n                                        damiana_flower(flower_diameter, flower_height);\n                                }\n                    }\n    }\n    \n    // Top leaves\n    for(i = [0:5]) {\n        rotate([0, 0, i*72])\n            translate([0, 0, stem_height-5])\n                rotate([0, 90, 0])\n                    damiana_leaf(main_leaf_length*0.9, main_leaf_width*0.9, leaf_thickness);\n    }\n    \n    // Top flowers\n    translate([0, 0, stem_height])\n        damiana_flower(flower_diameter*1.2, flower_height*1.2);\n}",
    "renders": true
  },
  {
    "plant": "devilsclaw",
    "openscad_code": "// Devils claw plant - realistic medium complexity\n// Overall height ~90 mm, suitable for 3D printing\n\n$fn = 32;\n\n// Main parameters\nstem_d = 6;        // Stem diameter\nstem_h = 25;       // Stem height\nclaw_l = 35;       // Claw length\nclaw_w = 12;       // Claw width at base\nclaw_t = 3;        // Claw thickness\njoint_r = 4;       // Joint radius\nroot_l = 20;       // Root length\nwall_t = 2;        // Wall thickness for 3D printing\n\nmodule stem() {\n    // Central stem with slight taper\n    cylinder(h = stem_h, d1 = stem_d, d2 = stem_d * 0.8, center = false);\n}\n\nmodule claw_pair(angle, twist) {\n    // Single pair of curved claws\n    translate([0, 0, stem_h - 5])\n    rotate([0, 0, angle])\n    rotate([0, twist, 0])\n    union() {\n        // Left claw\n        translate([0, claw_w/2, 0])\n        rotate([0, -15, 0])\n        scale([1, 1, 0.3])\n        difference() {\n            // Main claw body\n            hull() {\n                translate([0, 0, 0])\n                sphere(d = claw_t * 2);\n                translate([claw_l * 0.8, 0, 0])\n                sphere(d = claw_t * 1.5);\n                translate([claw_l, 0, 0])\n                sphere(d = claw_t);\n            }\n            // Hollow interior\n            scale([0.7, 0.7, 0.7])\n            translate([claw_l/2, 0, 0])\n            cube([claw_l + 5, claw_t, claw_t], center = true);\n        }\n        \n        // Right claw (mirrored)\n        mirror([0, 1, 0])\n        children();\n    }\n}\n\nmodule roots() {\n    // Root system at base\n    for (i = [0:60:359]) {\n        rotate([0, 0, i])\n        translate([stem_d/2, 0, -root_l/2])\n        rotate([90, 0, 0])\n        cylinder(h = root_l, d1 = 4, d2 = 2, center = true);\n    }\n}\n\nmodule surface_texture() {\n    // Add small bumps for realistic texture\n    for (i = [0:30:359]) {\n        rotate([0, 0, i])\n        for (j = [5:5:stem_h-5]) {\n            translate([stem_d/2 + 0.5, 0, j])\n            sphere(d = 1);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Central stem\n    difference() {\n        union() {\n            stem();\n            surface_texture();\n        }\n        // Hollow stem for printing\n        translate([0, 0, -1])\n        cylinder(h = stem_h + 2, d = stem_d - wall_t * 2);\n    }\n    \n    // First pair of claws (upper)\n    claw_pair(0, 30);\n    \n    // Second pair of claws (middle)\n    claw_pair(120, 15);\n    \n    // Third pair of claws (lower)\n    claw_pair(240, 0);\n    \n    // Root system\n    roots();\n}\n\n// Ground base (flat bottom for printing)\ntranslate([0, 0, -root_l - 2])\ncylinder(h = 2, d = 25, center = false);",
    "renders": true
  },
  {
    "plant": "epazote",
    "openscad_code": "// Epazote plant - realistic style, medium complexity\n// 3D printable, ~90mm tall\n\n$fn=24;\n\n// Overall dimensions\nplant_height = 90;\nstem_height = 50;\nstem_diameter = 4;\n\n// Leaves\nleaf_length = 25;\nleaf_width = 12;\nleaf_thickness = 2;\n\n// Flowers\nflower_size = 3;\nflower_cluster_size = 8;\n\nmodule stem() {\n    // Main stem with slight taper\n    cylinder(h=stem_height, d1=stem_diameter, d2=stem_diameter*0.8, $fn=8);\n    \n    // Secondary stems\n    for(i=[0:120:359]) {\n        rotate([0, 0, i]) \n        translate([0, 0, stem_height*0.6]) \n        rotate([30, 0, 0]) \n        cylinder(h=stem_height*0.5, d=stem_diameter*0.6, $fn=6);\n    }\n}\n\nmodule leaf() {\n    // Serrated leaf shape using difference of ellipsoids\n    difference() {\n        scale([1, leaf_width/leaf_length, 0.3]) \n        sphere(leaf_length/2);\n        \n        // Cut bottom flat\n        translate([0, 0, -leaf_length*0.15]) \n        cube([leaf_length*1.2, leaf_width*1.2, leaf_length*0.3], center=true);\n        \n        // Serrations on edges\n        for(i=[-leaf_width/2+2:2:leaf_width/2-2]) {\n            translate([leaf_length*0.4, i, 0]) \n            rotate([0, 0, i*5]) \n            scale([0.3, 1, 1]) \n            cylinder(h=leaf_thickness*2, d=2, $fn=3);\n        }\n    }\n}\n\nmodule leaves_cluster(height_offset, stem_radius, count) {\n    for(i=[0:360/count:359]) {\n        rotate([0, 0, i]) \n        translate([stem_radius+leaf_width/4, 0, height_offset]) \n        rotate([90-i*0.5, 0, -30]) \n        leaf();\n    }\n}\n\nmodule flower() {\n    // Tiny clustered flowers\n    difference() {\n        sphere(flower_size);\n        // Add texture\n        for(i=[0:45:359]) {\n            rotate([0, 0, i]) \n            translate([flower_size*0.7, 0, 0]) \n            cylinder(h=flower_size*0.5, d=0.5, center=true);\n        }\n    }\n}\n\nmodule flower_cluster() {\n    // Cluster of flowers at stem tips\n    for(i=[0:45:359]) {\n        rotate([0, 0, i]) \n        translate([0, flower_cluster_size/2, 0]) \n        flower();\n    }\n}\n\n// Base pot\ntranslate([0, 0, -10]) \ncylinder(h=15, d=25, $fn=32);\n\n// Main plant\nunion() {\n    // Stem system\n    translate([0, 0, 5]) \n    stem();\n    \n    // Leaves along stems\n    for(z=[10:15:stem_height-10]) {\n        leaves_cluster(z, stem_diameter/2+1, 6);\n    }\n    \n    // Flowers at top\n    translate([0, 0, stem_height+stem_height*0.5*0.5]) \n    rotate([30, 0, 0]) \n    translate([0, 0, stem_height*0.25]) \n    flower_cluster();\n    \n    // Lower leaves\n    for(z=[15:20:stem_height-5]) {\n        translate([0, 0, z]) \n        rotate([0, 0, z*3]) \n        translate([stem_diameter/2+leaf_width/3, 0, 0]) \n        rotate([80-z, 0, -20]) \n        scale([0.8, 0.8, 0.8]) \n        leaf();\n    }\n}",
    "renders": true
  },
  {
    "plant": "erba",
    "openscad_code": "// Realistic erba (grass-like) plant – printable, ~110 mm high\n// All walls ≥ 2 mm, no steep overhangs\n\n// Parameters\nblade_w   = 2;   // mm\nblade_t   = 2;   // mm\nblade_h   = 60;  // mm\nblade_cnt = 18;  // blades\npot_r     = 25;  // mm\npot_h     = 25;  // mm\nsoil_h    = 8;   // mm\n\n// Helper: single blade, slightly bent backwards\nmodule blade() {\n    union() {\n        // Stem\n        translate([0, 0, blade_h/2])\n            cube([blade_w, blade_t, blade_h], center=true);\n        // Gentle bend (thin arc made of stacked cylinders)\n        for (i=[0:3:blade_h-3]) {\n            rotate([0, -i/4, 0])\n                translate([0, 0, blade_h - i])\n                    cylinder(h=3, d1=blade_w*0.9, d2=blade_w*0.9, $fn=8);\n        }\n        // Tip\n        translate([0, 0, blade_h])\n            sphere(d=blade_w*1.2, $fn=12);\n    }\n}\n\n// Soil disk with 2 mm wall\nmodule soil_disk() {\n    difference() {\n        cylinder(h=soil_h, r=pot_r, $fn=60);\n        translate([0, 0, -1])\n            cylinder(h=soil_h+2, r=pot_r-2, $fn=60);\n    }\n}\n\n// Pot with 2 mm wall, tapered\nmodule pot() {\n    difference() {\n        cylinder(h=pot_h, r1=pot_r, r2=pot_r*0.9, $fn=60);\n        translate([0, 0, -1])\n            cylinder(h=pot_h+2, r1=pot_r-2, r2=pot_r*0.9-2, $fn=60);\n    }\n}\n\n// Cluster of blades\nmodule plant_top() {\n    for (i=[0:blade_cnt-1]) {\n        angle = i*360/blade_cnt + (i%2)*7; // slight asymmetry\n        rot_tilt = (i%3)*3;                // random tilt\n        translate([0, 0, soil_h])\n            rotate([rot_tilt, 0, angle])\n                translate([0, 5, 0])       // offset for cone\n                    blade();\n    }\n}\n\n// Assembly\nunion() {\n    // Pot\n    translate([0, 0, 0])\n        pot();\n    // Soil\n    translate([0, 0, 0])\n        soil_disk();\n    // Blades\n    plant_top();\n}\n\n// Optional base ring for better bed adhesion\ntranslate([0, 0, -2])\n    cylinder(h=2, r=pot_r+2, $fn=60);",
    "renders": true
  },
  {
    "plant": "estragon",
    "openscad_code": "// Estragon (Artemisia dracunculus) plant – medium complexity, 3D-printable\n// Approx. 90 mm tall, 2 mm wall thickness, no overhangs >45°\n\nmodule stem(h, taper=1, base_r=3) {\n    // tapered cylinder for stems\n    cylinder(h=h, r1=base_r, r2=base_r*taper, $fn=12);\n}\n\nmodule leaf(l, w, t=2) {          // l=length, w=width, t=thickness\n    // simple lanceolate leaf built from hull of ellipsoids\n    hull() {\n        translate([-l/2, 0, 0]) scale([l/2, w/2, t/2]) sphere(1, $fn=8);\n        translate([ l/2, 0, 0]) scale([l/6, w/4, t/2]) sphere(1, $fn=8);\n    }\n}\n\nmodule leaf_pair(h, angle, n) {\n    // pair of opposite leaves at given height and angle\n    translate([0, 0, h]) rotate([0, 0, angle]) {\n        for (side=[-1, 1])\n            mirror([side, 0, 0])\n                rotate([0, -25, 0])\n                    leaf(18, 4, 2);\n    }\n}\n\nmodule main_stem() {\n    // central stem with nodes\n    union() {\n        stem(h=70, taper=0.6, base_r=3);\n        for (i=[1:4]) {\n            leaf_pair(h=i*15, angle=i*45, n=i);\n        }\n    }\n}\n\nmodule side_branch(h, base_r) {\n    // smaller lateral branch with leaves\n    translate([0, 0, h])\n    rotate([0, 0, 30])\n    rotate([0, 45, 0]) {\n        stem(h=30, taper=0.4, base_r=base_r);\n        for (i=[1:2])\n            translate([0, 0, i*10])\n            rotate([0, 0, i*60])\n            rotate([0, -35, 0])\n                leaf(14, 3, 2);\n    }\n}\n\nmodule root_base() {\n    // flared root/ground interface for print stability\n    cylinder(h=8, r1=7, r2=5, $fn=16);\n    difference() {\n        cube([14, 14, 2], center=true);\n        cylinder(h=2.1, r=4.5, $fn=16);\n    }\n}\n\n// Assembly\n$fs = 1;\n$fa = 4;\n\nunion() {\n    root_base();\n    main_stem();\n    side_branch(25, 2.5);\n    mirror([1, 0, 0]) side_branch(25, 2.5);\n    side_branch(45, 2);\n    mirror([1, 0, 0]) side_branch(45, 2);\n}",
    "renders": true
  },
  {
    "plant": "galingale",
    "openscad_code": "// Galingale (Cyperus longus) – realistic medium-complexity model\n// Overall height 120 mm, printable in one piece with 2 mm wall thickness\n\n// ---------- PARAMETERS ----------\nbase_h = 12;           // rhizome height\nstem_h = 80;           // triangular stem height\numbel_r = 40;          // umbrella radius\nspike_l = 25;          // single ray length\nspike_t = 2;           // spike thickness for printing\nn_rays = 18;           // rays per whorl\nn_whorls = 3;          // umbrella whorls\nangle_step = 360/n_rays;\n\n// ---------- MODULES ----------\nmodule rhizome() {\n    // creeping rootstock: several tapered cylinders\n    for (a = [0:120:359]) {\n        translate([cos(a)*15, sin(a)*15, 0])\n            rotate([90,0,a])\n                cylinder(h1=20, h2=5, r1=6, r2=3, $fn=8);\n    }\n    // central knob\n    cylinder(h=base_h, r1=8, r2=12, $fn=16);\n}\n\nmodule triangular_stem() {\n    // three-sided prism with rounded edges\n    linear_extrude(height=stem_h, center=false, convexity=10) {\n        offset(r=1.5) {\n            polygon(points=[[-2.5,-2.5], [2.5,-2.5], [0,4]]);\n        }\n    }\n}\n\nmodule ray() {\n    hull() {\n        // base joint\n        sphere(d=spike_t*3, $fn=8);\n        // elongated spike\n        translate([0,0,spike_l])\n            sphere(d=spike_t*2, $fn=6);\n    }\n}\n\nmodule whorl(height, radius) {\n    translate([0,0,height]) {\n        for (i = [0:angle_step:359]) {\n            rotate([0, 90-20, i])\n                translate([radius, 0, 0])\n                    ray();\n        }\n    }\n}\n\nmodule umbrella() {\n    for (k = [0:n_whorls-1]) {\n        z = stem_h - 15 - k*12;\n        r = umbel_r - k*7;\n        whorl(z, r);\n    }\n}\n\n// ---------- MAIN ----------\nunion() {\n    rhizome();\n    translate([0,0,base_h])\n        triangular_stem();\n    umbrella();\n}",
    "renders": true
  },
  {
    "plant": "ginseng",
    "openscad_code": "// Parameters for sizing and proportions\n$fn = 32; // Smooth curves\nroot_thickness = 2.5;\nstem_diameter = 4;\nleaf_thickness = 1.5;\nbase_scale = 55; // mm total height\n\n// Main ginseng root structure\nmodule main_root() {\n    // Central taproot\n    translate([0,0,-base_scale/4])\n        scale([1, 0.6, 2])\n        rotate([0, 15, 0])\n        difference() {\n            sphere(d=base_scale/2);\n            translate([0,0,-base_scale/4])\n                cube([base_scale, base_scale, base_scale/2], center=true);\n        }\n    \n    // Side roots\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n        translate([base_scale/4, 0, -base_scale/3])\n        rotate([90, 0, 0])\n        scale([0.4, 0.4, 1.2])\n        cylinder(d1=base_scale/6, d2=base_scale/12, h=base_scale/3);\n    }\n    \n    // Fine root hairs\n    for(i=[0:60:359]) {\n        rotate([0, 0, i])\n        translate([base_scale/2.2, 0, -base_scale/2.5])\n        rotate([90, 0, 0])\n        scale([0.15, 0.15, 1])\n        cylinder(d=root_thickness, h=base_scale/5);\n    }\n}\n\n// Stem growing from root\nmodule stem() {\n    translate([0,0,base_scale/2.5])\n        cylinder(d=stem_diameter, h=base_scale/2.5);\n}\n\n// Compound leaf structure\nmodule leaf_cluster(height) {\n    // Central leaf stem\n    translate([0,0,height])\n        cylinder(d=stem_diameter/2, h=base_scale/8);\n    \n    // 5 leaflets per compound leaf\n    for(j=[-60,-30,0,30,60]) {\n        rotate([0, 0, j])\n        translate([base_scale/8, 0, height+base_scale/8])\n        rotate([60, 0, 0])\n        scale([1, 0.6, 0.1])\n        sphere(d=base_scale/6);\n    }\n}\n\n// Main plant assembly\nunion() {\n    // Root system\n    color(\"tan\") main_root();\n    \n    // Stem\n    color(\"green\") stem();\n    \n    // Whorl of compound leaves\n    for(i=[0:120:239]) {\n        rotate([0, 0, i])\n        leaf_cluster(base_scale/1.8);\n    }\n    \n    // Red berry cluster\n    color(\"red\")\n    translate([0,0,base_scale/1.5])\n    for(k=[0:72:359]) {\n        rotate([0, 0, k])\n        translate([stem_diameter*2, 0, 0])\n        sphere(d=stem_diameter/1.5);\n    }\n}",
    "renders": true
  },
  {
    "plant": "guascas",
    "openscad_code": "// Guascas Plant (Galinsoga parviflora)\n// Realistic style, medium complexity\n// Overall height: ~120mm\n\n// Plant parameters\nstem_height = 80;\nstem_radius = 2;\nleaf_length = 25;\nleaf_width = 15;\nflower_radius = 8;\nflower_height = 5;\nnum_leaves = 8;\nnum_flowers = 5;\nwall_thickness = 2;\n\n// Stem module\nmodule stem(h, r) {\n    cylinder(h = h, r = r, $fn = 16);\n}\n\n// Leaf module with serrated edges\nmodule leaf(l, w) {\n    // Main leaf body\n    difference() {\n        scale([1, 0.6, 1]) \n            sphere(r = w/2, $fn = 32);\n        \n        // Cut to make leaf shape\n        translate([0, -w/2, 0]) \n            cube([w*2, w, w], center = true);\n        \n        // Leaf tip\n        translate([l/2, 0, 0]) \n            rotate([0, 90, 0]) \n                cylinder(h = w/2, r1 = w/4, r2 = 0, $fn = 8);\n    }\n    \n    // Serrations on leaf edges\n    for(i = [-l/4:3:l/4]) {\n        translate([i, 0, w/4]) \n            rotate([90, 0, 0]) \n                cylinder(h = 1, r1 = 0.5, r2 = 0, $fn = 6);\n    }\n}\n\n// Flower module (small white composite flower)\nmodule flower(r, h) {\n    // Center disk\n    color(\"yellow\") \n        cylinder(h = h, r = r/3, $fn = 16);\n    \n    // Petals around center\n    for(i = [0:30:359]) {\n        rotate([0, 0, i]) {\n            translate([r/2, 0, h]) \n                scale([2, 0.5, 0.1]) \n                    sphere(r = r/4, $fn = 8);\n        }\n    }\n}\n\n// Main plant structure\nmodule guascas_plant() {\n    // Base root system\n    union() {\n        // Main stem\n        color(\"darkgreen\") \n            stem(stem_height, stem_radius);\n        \n        // Root bulb\n        translate([0, 0, -5]) \n            sphere(r = 5, $fn = 16);\n        \n        // Side roots\n        for(i = [0:45:359]) {\n            rotate([0, 0, i]) {\n                translate([3, 0, -3]) \n                    rotate([45, 0, 0]) \n                        cylinder(h = 8, r1 = 1.5, r2 = 0.5, $fn = 8);\n            }\n        }\n    }\n    \n    // Branching stems with leaves\n    for(i = [0:360/num_leaves:359]) {\n        rotate([0, 0, i]) {\n            // Side branch\n            translate([0, 0, stem_height * 0.3 + (i % 60)]) \n                rotate([15 + (i % 20), 0, 0]) {\n                    stem(stem_height * 0.4, stem_radius * 0.7);\n                    \n                    // Leaves on branch\n                    for(j = [0:20:80]) {\n                        translate([0, 0, j]) \n                            rotate([0, 0, j % 60]) {\n                                color(\"green\") \n                                    translate([stem_radius * 2, 0, 0]) \n                                        rotate([0, 90, 0]) \n                                            leaf(leaf_length, leaf_width);\n                            }\n                    }\n                }\n        }\n    }\n    \n    // Terminal flowers\n    for(i = [0:360/num_flowers:359]) {\n        rotate([0, 0, i]) {\n            translate([0, 0, stem_height - 5]) \n                rotate([5 + (i % 10), 0, 0]) {\n                    stem(10, stem_radius * 0.5);\n                    translate([0, 0, 10]) \n                        rotate([0, 0, 45]) \n                            color(\"white\") \n                                flower(flower_radius, flower_height);\n                }\n        }\n    }\n    \n    // Leaves along main stem\n    for(k = [10:15:stem_height - 20]) {\n        rotate([0, 0, k * 2]) {\n            color(\"green\") \n                translate([stem_radius, 0, k]) \n                    rotate([0, 90, 0]) \n                        leaf(leaf_length * 0.8, leaf_width * 0.8);\n        }\n    }\n}\n\n// Render the plant\nguascas_plant();",
    "renders": true
  },
  {
    "plant": "hops",
    "openscad_code": "// Realistic Hops Plant - OpenSCAD\n// Medium complexity, 3D printable\n\n// Main parameters\nstem_diameter = 3;\nstem_height = 100;\ncone_length = 25;\ncone_diameter = 12;\nleaf_length = 30;\nleaf_width = 20;\nwall_thickness = 2;\n\n// Stem module\nmodule stem() {\n    difference() {\n        cylinder(h=stem_height, d=stem_diameter, $fn=8);\n        // Hollow core for printing\n        translate([0, 0, wall_thickness])\n            cylinder(h=stem_height - wall_thickness*2, d=stem_diameter - wall_thickness*2, $fn=8);\n    }\n}\n\n// Hops cone bract (scale)\nmodule bract() {\n    difference() {\n        scale([1, 0.7, 0.3])\n            sphere(d=cone_diameter, $fn=16);\n        // Hollow for printing\n        scale([1, 0.7, 0.25])\n            sphere(d=cone_diameter - wall_thickness*2, $fn=16);\n    }\n}\n\n// Full hops cone\nmodule hops_cone(height) {\n    union() {\n        // Central core\n        difference() {\n            cylinder(h=cone_length, d=3, $fn=8);\n            cylinder(h=cone_length - wall_thickness, d=3 - wall_thickness*2, $fn=8);\n        }\n        \n        // Bracts around cone\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5])\n                translate([0, 4, cone_length * (i/15)])\n                    rotate([90, 0, 0])\n                        bract();\n        }\n    }\n}\n\n// Leaf module\nmodule leaf() {\n    difference() {\n        // Main leaf shape\n        scale([1, 0.6, 0.1])\n            sphere(d=leaf_length, $fn=32);\n        \n        // Hollow\n        scale([1, 0.6, 0.05])\n            sphere(d=leaf_length - wall_thickness*2, $fn=32);\n        \n        // Vein details\n        for(i = [-2:2]) {\n            rotate([0, 0, i * 15])\n                translate([leaf_length/4, 0, 0])\n                    scale([0.8, 0.05, 0.05])\n                        sphere(d=leaf_length/2, $fn=8);\n        }\n    }\n}\n\n// Vine tendril\nmodule tendril() {\n    difference() {\n        for(i = [0:20]) {\n            translate([sin(i*30)*3, cos(i*30)*3, i*2])\n                sphere(d=1.5, $fn=8);\n        }\n        // Hollow\n        for(i = [0:20]) {\n            translate([sin(i*30)*3, cos(i*30)*3, i*2 + wall_thickness/2])\n                sphere(d=1.5 - wall_thickness, $fn=8);\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0])\n    stem();\n\n// First cone cluster\ntranslate([0, 0, 70])\n    rotate([0, 15, 0])\n        hops_cone(1);\n\n// Second cone\ntranslate([0, 5, 50])\n    rotate([0, -20, 30])\n        hops_cone(0.8);\n\n// Third cone\ntranslate([0, -5, 60])\n    rotate([0, 10, -45])\n        hops_cone(0.9);\n\n// Leaves\ntranslate([0, 5, 40])\n    rotate([0, 90, 0])\n        leaf();\n\ntranslate([0, -5, 30])\n    rotate([0, -90, 45])\n        scale([0.7, 0.7, 0.7])\n            leaf();\n\n// Tendrils\ntranslate([0, 0, 80])\n    rotate([0, 90, 0])\n        tendril();\n\ntranslate([0, 0, 65])\n    rotate([90, 0, 45])\n        tendril();",
    "renders": true
  },
  {
    "plant": "hyssop",
    "openscad_code": "// Hyssop plant - realistic style, medium complexity\n// Size: ~100mm tall, 3D-printable with 2mm wall thickness\n\n// Stem parameters\nstem_radius = 3;\nstem_height = 60;\nstem_segments = 12;\n\n// Leaf parameters\nleaf_length = 15;\nleaf_width = 3;\nleaf_thickness = 2;\nleaves_per_whorl = 6;\nwhorl_count = 5;\nwhorl_spacing = 10;\n\n// Flower parameters\nflower_radius = 5;\nflower_height = 12;\nflowers_per_spike = 8;\nflower_spike_height = 25;\n\n// Base parameters\nbase_radius = 15;\nbase_height = 5;\n\nmodule flower_spike() {\n    // Central spike\n    cylinder(h=flower_spike_height, r=stem_radius*0.7, $fn=stem_segments);\n    \n    // Flowers along spike\n    for(i = [1:flowers_per_spike]) {\n        translate([0, 0, i * (flower_spike_height / (flowers_per_spike + 1))])\n        rotate([0, 0, i * 45])\n        union() {\n            // Flower base\n            cylinder(h=flower_height, r=flower_radius, $fn=6);\n            \n            // Small petals\n            for(j = [0:5]) {\n                rotate([0, 0, j * 60])\n                translate([flower_radius * 0.7, 0, flower_height * 0.7])\n                rotate([90, 0, 0])\n                cylinder(h=flower_radius * 0.8, r1=flower_radius * 0.5, r2=0, $fn=6);\n            }\n        }\n    }\n}\n\nmodule leaf() {\n    // Tapered linear leaf shape\n    hull() {\n        translate([-leaf_length/2, 0, 0])\n        sphere(d=leaf_thickness, $fn=8);\n        translate([leaf_length/2, 0, 0])\n        sphere(d=leaf_thickness, $fn=8);\n    }\n    \n    // Leaf detail - slight curve\n    translate([0, 0, -leaf_thickness/2])\n    difference() {\n        translate([0, 0, leaf_thickness/4])\n        cube([leaf_length, leaf_width, leaf_thickness/2], center=true);\n        \n        // Remove material for realistic leaf shape\n        translate([leaf_length/4, 0, leaf_thickness/4])\n        rotate([0, 20, 0])\n        cube([leaf_length/2, leaf_width*1.2, leaf_thickness], center=true);\n    }\n}\n\nmodule leaf_whorl(height) {\n    for(i = [0:leaves_per_whorl-1]) {\n        rotate([0, 0, i * (360/leaves_per_whorl)])\n        translate([stem_radius + leaf_length/2, 0, height])\n        rotate([0, 30, 0])\n        leaf();\n    }\n}\n\nmodule main_stem() {\n    // Main stem\n    cylinder(h=stem_height, r=stem_radius, $fn=stem_segments);\n    \n    // Add leaf whorls\n    for(i = [0:whorl_count-1]) {\n        translate([0, 0, i * whorl_spacing + 10])\n        leaf_whorl(0);\n    }\n    \n    // Top flower spike\n    translate([0, 0, stem_height])\n    flower_spike();\n}\n\nmodule plant_base() {\n    // Solid base for stability\n    cylinder(h=base_height, r=base_radius, $fn=32);\n    \n    // Root details for realism\n    difference() {\n        translate([0, 0, -base_height/2])\n        cylinder(h=base_height*2, r=base_radius, $fn=32);\n        \n        // Hollow center for material saving\n        translate([0, 0, -base_height/2])\n        cylinder(h=base_height*2, r=base_radius-2, $fn=32);\n        \n        // Root texture\n        for(i = [0:8]) {\n            rotate([0, 0, i * 45])\n            translate([base_radius/2, 0, -base_height/4])\n            cube([base_radius/2, 2, base_height*1.5], center=true);\n        }\n    }\n}\n\n// Assemble the plant\nunion() {\n    // Base\n    plant_base();\n    \n    // Main stem with leaves and flowers\n    translate([0, 0, base_height])\n    main_stem();\n}",
    "renders": true
  },
  {
    "plant": "kaffir",
    "openscad_code": "// Kaffir lime plant – realistic, medium complexity, 3D-printable (≈ 100 mm tall)\n// Wall thickness kept ≥ 2 mm, no steep overhangs, everything printable upright.\n\n$fn = 36;          // smooth curves\nstem_d   = 6;      // trunk diameter\nstem_h   = 35;     // trunk height\npot_w    = 35;     // pot width\npot_h    = 20;     // pot height\nleaf_l   = 22;     // leaf length\nleaf_w   = 12;     // leaf width\nleaf_t   = 2;      // leaf thickness\n\nmodule pot() {\n    difference() {\n        // outer pot\n        cylinder(h = pot_h, d1 = pot_w, d2 = pot_w * 0.9, center = false);\n        // inner cavity\n        translate([0, 0, 2])\n            cylinder(h = pot_h - 1, d1 = pot_w - 4, d2 = pot_w * 0.9 - 4, center = false);\n    }\n}\n\nmodule stem() {\n    // tapered trunk\n    cylinder(h = stem_h, d1 = stem_d, d2 = stem_d * 0.7, center = false);\n}\n\nmodule kaffir_leaf(l, w, t, angle) {\n    // simple double-leaflet\n    rotate([0, 0, angle])\n    translate([0, 0, t/2])\n    difference() {\n        // main oval blade\n        scale([1, w/l, 1])\n            cylinder(h = l, d = l, center = true);\n        // petiole cutout\n        translate([0, -l/2 + 2, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 4, d = 3, center = true);\n    }\n}\n\nmodule leaves() {\n    // 8 leaves in a natural spiral\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([stem_d/2 + 3, 0, stem_h * 0.3 + i * 4])\n            kaffir_leaf(leaf_l, leaf_w, leaf_t, 30 - i * 5);\n    }\n    // second whorl smaller\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60 + 25])\n        translate([stem_d/2 + 2, 0, stem_h * 0.7 + i * 3])\n            scale([0.7,0.7,1])\n                kaffir_leaf(leaf_l * 0.8, leaf_w * 0.8, leaf_t, 20 - i * 3);\n    }\n}\n\n// Assembly\nunion() {\n    // soil surface inside pot\n    translate([0, 0, pot_h - 1])\n        color(\"saddlebrown\")\n            cylinder(h = 2, d = pot_w - 3, $fn = 32);\n    \n    pot();\n    translate([0, 0, pot_h - 1])\n        stem();\n    \n    translate([0, 0, pot_h - 1])\n        color(\"forestgreen\")\n            leaves();\n}",
    "renders": true
  },
  {
    "plant": "kencur",
    "openscad_code": "// Kaempferia galanga (kencur) plant – realistic, medium-complexity, 3-D printable\n// Total height ≈ 100 mm, printed upright, no steep overhangs\n\n$fn = 32;            // smooth curves\nwall = 2;            // printable wall thickness\n\n// Main rhizome body – slightly curved\nmodule rhizome() {\n    difference() {\n        scale([1, 0.45, 0.45])\n            rotate([0, 10, 0])\n                cylinder(h = 45, d1 = 18, d2 = 22, center = true);  // taper\n        \n        // light internal hollow to save material\n        translate([0, 0, -2])\n            scale([0.7, 0.7, 0.7])\n                cylinder(h = 50, d = 14, center = true);\n    }\n}\n\n// Eye / growing point on rhizome\nmodule eye() {\n    translate([0, 9, 0])\n        sphere(d = 6);\n}\n\n// Petiole (leaf stalk)\nmodule petiole(len = 35, ang = 35) {\n    rotate([0, ang, 0]) {\n        color(\"darkgreen\")\n            cylinder(h = len, d = 4, center = true);\n    }\n}\n\n// Single leaf blade – elliptical, slightly cupped\nmodule leaf(w = 22, l = 40, cup = 10) {\n    difference() {\n        // main blade\n        translate([0, 0, cup/2])\n            scale([w, l, cup])\n                sphere(d = 1, center = true);\n        \n        // thin it out\n        translate([0, 0, -cup-1])\n            cube([w+2, l+2, cup*2], center = true);\n    }\n}\n\n// Combine petiole + leaf\nmodule leaf_set(len = 35, ang = 35, rotZ = 0) {\n    rotate([0, 0, rotZ]) {\n        petiole(len, ang);\n        translate([0, len*sin(ang), len*cos(ang)])\n            rotate([ang, 0, 0])\n                leaf();\n    }\n}\n\n// Fine root hairs\nmodule roots(n = 6) {\n    for (i = [0:n-1])\n        rotate([0, 0, i*360/n])\n            translate([8, 0, -20])\n                rotate([90, 0, 0])\n                    cylinder(h = 12 + 3*sin(i*50), d = 1.5);\n}\n\n// Whole plant assembly\nmodule kencur() {\n    color(\"sienna\")\n        rhizome();\n    \n    color(\"darkgreen\")\n        for (z = [-40:15:20])\n            translate([0, 0, z])\n                eye();\n    \n    // two opposite leaves\n    leaf_set(len = 35, ang = 30, rotZ = 0);\n    leaf_set(len = 32, ang = 35, rotZ = 180);\n    \n    color(\"saddlebrown\")\n        roots();\n}\n\n// Render\nkencur();",
    "renders": true
  },
  {
    "plant": "kokum",
    "openscad_code": "// Kokum plant - Garcinia indica\n// Realistic medium-complexity 3D printable model\n\n$fn = 24;\n\n// overall scale\nscale_factor = 3;\n\n// main trunk\nmodule trunk() {\n    // tapered central trunk\n    for(i=[0:5]) {\n        h = i*10;\n        r_top = 8 - i*0.8;\n        r_bot = 8.5 - i*0.8;\n        translate([0,0,h])\n            cylinder(h=10, r1=r_bot, r2=r_top, $fn=16);\n    }\n}\n\n// branch structure\nmodule branch(len, angle, rot) {\n    rotate([0,angle,rot])\n    translate([0,0,55])\n    union() {\n        // branch cylinder\n        cylinder(h=len, r1=3, r2=1.5, $fn=12);\n        \n        // sub branches at end\n        if(len > 15) {\n            translate([0,0,len-2])\n            union() {\n                branch(len*0.7, 25, 35);\n                branch(len*0.6, -30, -45);\n            }\n        }\n    }\n}\n\n// leaf cluster\nmodule leaf_cluster() {\n    // central stem\n    cylinder(h=8, r=0.8, $fn=8);\n    \n    // individual leaves\n    for(i=[0:4]) {\n        rotate([0,0,i*72])\n        translate([0,0,4])\n        rotate([45,0,0])\n        scale([1,0.6,0.1])\n        sphere(r=6);\n    }\n}\n\n// kokum fruit\nmodule kokum_fruit() {\n    // main fruit body\n    sphere(r=5);\n    \n    // four lobed structure\n    difference() {\n        sphere(r=5);\n        // cut grooves\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n            translate([4.5,0,0])\n            cube([9,1,10], center=true);\n        }\n    }\n    \n    // stem attachment\n    translate([0,0,5])\n    cylinder(h=2, r=0.8, $fn=8);\n}\n\n// place leaves on branch\nmodule leaves_along_branch(segments) {\n    for(i=[1:segments]) {\n        translate([0,0,i*5])\n        rotate([0,90,0])\n        rotate([0,0,sin(i*30)*45])\n        leaf_cluster();\n    }\n}\n\n// place fruits on branch\nmodule fruits_on_branch(count) {\n    for(i=[1:count]) {\n        translate([0,0,i*7+3])\n        rotate([90,0,0])\n        translate([3,0,0])\n        kokum_fruit();\n    }\n}\n\n// assemble plant\nscale([scale_factor,scale_factor,scale_factor])\nunion() {\n    // base pot\n    translate([0,0,-15])\n    difference() {\n        cylinder(h=15, r=20, $fn=32);\n        cylinder(h=14, r=18, $fn=32);\n    }\n    \n    // soil\n    translate([0,0,-14])\n    color(\"saddlebrown\")\n    cylinder(h=2, r=17.5, $fn=32);\n    \n    // trunk\n    color(\"saddlebrown\")\n    trunk();\n    \n    // main branches\n    color(\"darkgreen\")\n    union() {\n        branch(30, -20, 0);\n        branch(25, 25, 90);\n        branch(28, 15, 180);\n        branch(22, -30, 270);\n    }\n    \n    // leaves and fruits on branches\n    translate([0,0,55])\n    union() {\n        // branch 1\n        rotate([0,-20,0])\n        translate([0,0,28])\n        union() {\n            leaves_along_branch(5);\n            fruits_on_branch(3);\n        }\n        \n        // branch 2\n        rotate([0,25,90])\n        translate([0,0,23])\n        union() {\n            leaves_along_branch(4);\n            fruits_on_branch(2);\n        }\n        \n        // branch 3\n        rotate([0,15,180])\n        translate([0,0,26])\n        union() {\n            leaves_along_branch(5);\n            fruits_on_branch(3);\n        }\n        \n        // branch 4\n        rotate([0,-30,270])\n        translate([0,0,20])\n        union() {\n            leaves_along_branch(4);\n            fruits_on_branch(2);\n        }\n    }\n}",
    "renders": true
  },
  {
    "plant": "koseret",
    "openscad_code": "// Koseret Plant - realistic medium-detail model\n// 3D printable, approx 80 mm tall\n\n$fn = 50;\n\n// Main stem module - central trunk\nmodule stem(h = 60, r = 3) {\n    union() {\n        // Main trunk\n        cylinder(h = h, r = r, center = false);\n        \n        // Thicken base for stability\n        translate([0, 0, 0])\n            cylinder(h = 5, r1 = r + 2, r2 = r, center = false);\n    }\n}\n\n// Leaf module - oval leaf shape\nmodule leaf(length = 20, width = 8, thickness = 1.5) {\n    difference() {\n        // Main leaf body\n        scale([1, width/length, 0.5])\n            sphere(d = length);\n        \n        // Add slight curvature\n        translate([0, -width/2, -1])\n            cube([length + 2, width, 2], center = true);\n        \n        // Leaf stem hole\n        translate([0, 0, -thickness])\n            cylinder(h = thickness*2, r = 1.5, center = true);\n    }\n}\n\n// Leaf cluster - group of leaves\nmodule leaf_cluster(height = 30, angle = 0) {\n    rotate([0, 0, angle])\n    translate([0, 0, height]) {\n        // Supporting twig\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 1, center = false);\n        \n        // Leaves around twig\n        for(i = [0:60:359]) {\n            rotate([0, 0, i])\n            translate([5, 0, 4]) {\n                rotate([0, 30 + sin(i*3) * 20, 0])\n                    leaf();\n            }\n        }\n    }\n}\n\n// Small flowering buds\nmodule bud() {\n    union() {\n        // Bud stem\n        cylinder(h = 4, r = 0.5, center = false);\n        \n        // Bud head\n        translate([0, 0, 4])\n            sphere(d = 3);\n    }\n}\n\n// Main plant assembly\nmodule koseret_plant() {\n    union() {\n        // Main stem\n        stem();\n        \n        // Layer 1 - lower leaves\n        leaf_cluster(15, 0);\n        leaf_cluster(15, 120);\n        leaf_cluster(15, 240);\n        \n        // Layer 2 - mid leaves\n        leaf_cluster(30, 60);\n        leaf_cluster(30, 180);\n        leaf_cluster(30, 300);\n        \n        // Layer 3 - upper leaves\n        leaf_cluster(45, 30);\n        leaf_cluster(45, 150);\n        leaf_cluster(45, 270);\n        \n        // Top buds\n        translate([0, 0, 60])\n        for(i = [0:120:359]) {\n            rotate([0, 0, i])\n            translate([3, 0, 0])\n                bud();\n        }\n        \n        // Base pot\n        translate([0, 0, -8])\n        difference() {\n            // Outer pot\n            cylinder(h = 10, r1 = 12, r2 = 10, center = false);\n            \n            // Inner cavity\n            translate([0, 0, 2])\n                cylinder(h = 10, r1 = 9.5, r2 = 7.5, center = false);\n        }\n    }\n}\n\n// Render the plant\nkoseret_plant();",
    "renders": true
  },
  {
    "plant": "lemonbalm",
    "openscad_code": "// Lemon Balm Plant – Modular, 3D-printable, medium complexity\n// Overall height ~110 mm, footprint ~60 mm\n\n// ---------- Plant Parameters ----------\nstem_h  = 80;    // main stem height\nstem_r  = 3;     // stem radius\nleaf_l  = 18;    // leaf length\nleaf_w  = 12;    // leaf width\nleaf_t  = 1.5;   // leaf thickness\nnum_nodes = 5;   // node pairs along stem\npetiole_l = 4;   // length of petiole\nwall      = 2;   // 3D-print wall thickness\n\n// ---------- Helper Modules ----------\nmodule stem_segment(h,r) {\n    cylinder(h=h, r1=r, r2=r, $fn=12);\n}\n\nmodule leaf_shape() {\n    // simple lemon-balm-like heart/oval with serrations via hulling\n    difference() {\n        scale([1, .7, 1])\n        hull() {\n            translate([ leaf_l/2, 0, 0 ]) sphere(d=leaf_w);\n            translate([-leaf_l/2, 0, 0 ]) sphere(d=leaf_w);\n        }\n        // thin out middle for vein groove\n        translate([0,0,-leaf_t/2-.1])\n            cube([leaf_l*1.2, leaf_w*.2, leaf_t+1], center=true);\n    }\n}\n\nmodule single_leaf(angle, up) {\n    translate([0,0,up]) {\n        rotate([0, angle, 0]) {\n            translate([petiole_l/2,0,0]) \n                cube([petiole_l, 1.5, 1.5], center=true);\n            translate([petiole_l+leaf_l/2, 0, 0])\n                leaf_shape();\n        }\n    }\n}\n\n// ---------- Main Stem ----------\nmodule plant_stem() {\n    color(\"darkolivegreen\")\n    stem_segment(stem_h, stem_r);\n}\n\n// ---------- Leaves at Nodes ----------\nmodule node_pair(height, angle_offset) {\n    // opposite leaves at one node\n    for(side=[0,1])\n        mirror([0, side==1 ? 1:0, 0])\n            single_leaf(30 + angle_offset, height);\n}\n\n// ---------- Whole Plant ----------\nmodule lemon_balm() {\n    plant_stem();\n    for(i=[1:num_nodes]) {\n        h = i*(stem_h/(num_nodes+1));\n        ang = i*25; // slight twist up the stem\n        node_pair(h, ang);\n    }\n    // small top pair\n    translate([0,0,stem_h-3])\n    node_pair(0, 45);\n}\n\n// ---------- Pot & Soil ----------\nmodule pot() {\n    difference() {\n        cylinder(h=25, r1=30, r2=26, $fn=32); // outer\n        translate([0,0,-.1])\n            cylinder(h=25.2, r1=28, r2=24, $fn=32); // inner cavity\n    }\n}\n\nmodule soil_surface() {\n    color(\"saddlebrown\")\n    translate([0,0,.2])\n        cylinder(h=2, r1=27.8, r2=27.8, $fn=32);\n}\n\n// ---------- Assembly ----------\nunion() {\n    translate([0,0,0]) pot();\n    translate([0,0,2]) soil_surface();\n    translate([0,0,25]) lemon_balm();\n}",
    "renders": true
  },
  {
    "plant": "lemongrass",
    "openscad_code": "// Lemongrass plant - realistic style, medium complexity\n// 3D printable, ~80mm tall\n\n// Parameters\nstem_thick = 3;           // mm wall thickness\nleaf_thick = 2;           // mm leaf thickness\nbase_r = 18;              // mm pot radius\nbase_h = 12;              // mm pot height\nplant_h = 80;             // mm total height above pot\n\n// Pot with soil\nmodule pot() {\n    difference() {\n        cylinder(h = base_h, r1 = base_r, r2 = base_r - 2, $fn = 48);\n        translate([0, 0, 2])\n            cylinder(h = base_h, r1 = base_r - stem_thick, r2 = base_r - 2 - stem_thick, $fn = 48);\n    }\n    // Soil surface\n    translate([0, 0, base_h - 1])\n        cylinder(h = 2, r1 = base_r - 2, r2 = base_r - 2, $fn = 48);\n}\n\n// Single lemongrass stem with leaves\nmodule stem(leaves = 4, height = 60, angle = 0) {\n    color(\"darkgreen\")\n    rotate([0, 0, angle])\n    union() {\n        // Main stem\n        translate([0, 0, 0])\n            cylinder(h = height, r1 = 3, r2 = 2, $fn = 16);\n        \n        // Leaves\n        for(i = [0:leaves-1]) {\n            rotate([0, 0, i * 90 + (angle/3)])\n            translate([0, 0, height * 0.3 + i * height * 0.15])\n                leaf(height * 0.4, 8 - i, 30 - i * 5);\n        }\n    }\n}\n\n// Single leaf blade\nmodule leaf(len, width, droop) {\n    // Tapered flat leaf\n    hull() {\n        translate([0, 0, 0])\n            cube([leaf_thick, width, 3], center = true);\n        translate([0, len * 0.7, -len * sin(droop) * 0.5])\n            cube([leaf_thick, width * 0.3, 2], center = true);\n    }\n    // Tip\n    translate([0, len * 0.85, -len * sin(droop) * 0.7])\n        sphere(d = leaf_thick * 1.5);\n}\n\n// Base cluster of stems\nmodule plant_cluster() {\n    // Central tallest stem\n    translate([0, 0, base_h])\n        stem(4, plant_h * 0.9, 0);\n    \n    // Surrounding stems\n    for(i = [0:5]) {\n        angle = i * 60 + 30;\n        dist = 4 + i % 2 * 3;\n        translate([cos(angle) * dist, sin(angle) * dist, base_h])\n            stem(3 + i % 2, plant_h * (0.7 - i * 0.05), angle);\n    }\n    \n    // Small shoots\n    for(j = [0:2]) {\n        a = j * 120;\n        d = 8;\n        translate([cos(a) * d, sin(a) * d, base_h])\n            stem(2, plant_h * 0.4, a + 45);\n    }\n}\n\n// Assembly\nunion() {\n    color(\"saddlebrown\") pot();\n    plant_cluster();\n}",
    "renders": true
  },
  {
    "plant": "licorice",
    "openscad_code": "// Licorice Plant - Realistic Style, Medium Complexity\n// Overall height: ~120mm, Width: ~80mm, Depth: ~80mm\n$fn = 36;\n\n// Main stem module\nmodule stem(height = 100, diameter = 8) {\n    color(\"darkgreen\")\n    union() {\n        // Central stem\n        cylinder(h = height, d = diameter, center = false);\n        \n        // Segments along stem\n        for(i = [1:10:height-20]) {\n            translate([0, 0, i])\n            difference() {\n                cylinder(h = 15, d = diameter + 3, center = true);\n                cylinder(h = 20, d = diameter - 1, center = true);\n            }\n        }\n    }\n}\n\n// Leaf module - compound leaf with 3 leaflets\nmodule leaf(stem_length = 25) {\n    color(\"forestgreen\")\n    union() {\n        // Main leaf stem\n        rotate([0, 0, -30])\n        cylinder(h = stem_length, d = 2, center = false);\n        \n        // Three leaflets\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n            translate([0, 0, stem_length * 0.3])\n            union() {\n                // Petiole\n                rotate([30, 0, 0])\n                cylinder(h = 12, d = 1.5, center = false);\n                \n                // Leaf blade - oval shape\n                translate([0, 0, 6])\n                rotate([90, 0, 0])\n                scale([1, 1.5, 0.5])\n                sphere(d = 8);\n            }\n        }\n    }\n}\n\n// Root system module\nmodule roots() {\n    color(\"saddlebrown\")\n    union() {\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n            translate([0, 15, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 20, d1 = 6, d2 = 3, center = false);\n        }\n        \n        // Central root\n        translate([0, 0, -10])\n        cylinder(h = 15, d1 = 8, d2 = 4, center = false);\n    }\n}\n\n// Flower cluster module\nmodule flowers() {\n    color(\"lightyellow\")\n    translate([0, 0, 95])\n    union() {\n        // Flower stems\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n            translate([0, 5, 0])\n            rotate([30, 0, 0])\n            cylinder(h = 10, d = 1.5, center = false);\n            \n            // Flower heads\n            translate([0, 8, 5])\n            sphere(d = 3);\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0])\nunion() {\n    // Root system at base\n    roots();\n    \n    // Main stem\n    stem();\n    \n    // Leaves along stem\n    for(i = [20:15:85]) {\n        rotate([0, 0, i * 3])\n        translate([0, 4, i])\n        leaf();\n    }\n    \n    // Terminal flower cluster\n    flowers();\n}",
    "renders": true
  },
  {
    "plant": "lovage",
    "openscad_code": "// Lovage plant (Levisticum officinale) – realistic medium-complexity model\n// 110 mm tall, 90 mm wide; 2 mm wall thickness everywhere, no extreme overhangs\n// All parts printable upright on the bed\n\n// ---------- parameters ----------\nstalk_d   = 3.2;          // mm diameter of hollow stalks\nwall_t    = 2.0;          // mm wall thickness\nleaf_L    = 35;           // mm average leaflet length\nleaf_W    = 12;           // mm leaflet max width\npetiole_L = 20;           // mm petiole (leaf-stem) length\nheight    = 110;          // mm total height\nbase_d    = 18;           // mm root-crown diameter\nbranches  = 6;            // number of compound leaves\n\n// ---------- utility module: hollow cylinder ----------\nmodule hollow_cyl(h, r, wall=wall_t) {\n    difference() {\n        cylinder(h=h, r=r, $fn=20);\n        translate([0,0,-0.1])\n            cylinder(h=h+0.2, r=r-wall, $fn=20);\n    }\n}\n\n// ---------- leaf leaflet ----------\nmodule leaflet() {\n    // tapered blade; slightly curved down\n    translate([0, leaf_L/2, 0]) rotate([90,0,0]) {\n        difference() {\n            hull() {\n                cylinder(h=leaf_L, r1=leaf_W/2, r2=0.5, $fn=30);\n                translate([0,leaf_L/2,0])\n                    sphere(leaf_W/2*0.7, $fn=20);\n            }\n            // thin veins removed for printability\n        }\n    }\n}\n\n// ---------- compound leaf (pinnate) ----------\nmodule compound_leaf() {\n    for(i=[-3:1:3]) {\n        translate([i*leaf_W*0.6, petiole_L + abs(i)*leaf_L*0.1, 0])\n            rotate([0, i*5, 0])\n            leaflet();\n    }\n    // central petiole\n    rotate([-90,0,0]) hollow_cyl(petiole_L, stalk_d/2, wall_t);\n}\n\n// ---------- branches ----------\nmodule branch(stem_h, angle) {\n    translate([0,0, stem_h])\n        rotate([angle, 0, 0])\n        union() {\n            // main stalk segment\n            rotate([-90,0,0])\n                hollow_cyl(height-stem_h, stalk_d/2, wall_t);\n            // compound leaf at end\n            translate([0, height-stem_h, 0])\n                rotate([0, 180, 0])\n                compound_leaf();\n        }\n}\n\n// ---------- root-crown ----------\nmodule root_crown() {\n    difference() {\n        cylinder(h=10, r=base_d/2, $fn=40);\n        translate([0,0,-0.1])\n            cylinder(h=10.2, r=base_d/2-wall_t, $fn=40);\n    }\n    // slight taper\n    translate([0,0,10])\n        cylinder(h=5, r1=base_d/2, r2=stalk_d/2, $fn=20);\n}\n\n// ---------- main trunk ----------\nmodule trunk() {\n    rotate([-90,0,0])\n        hollow_cyl(height-15, stalk_d/2, wall_t);\n}\n\n// ---------- assembly ----------\nunion() {\n    root_crown();\n    trunk();\n    // distribute branches in a spiral to mimic nature\n    for(i=[0:branches-1])\n        branch(20 + i*12, 15 + i*25);\n}",
    "renders": true
  },
  {
    "plant": "mahlab",
    "openscad_code": "// Mahlab plant - realistic medium complexity\n// Total height ~90 mm, printable without supports\n\n// Stem parameters\nstem_height = 50;\nstem_diameter = 4;\n\n// Branch parameters\nbranch_count = 5;\nbranch_length = 25;\nbranch_diameter = 2.5;\nbranch_angle = 35;\n\n// Leaf parameters\nleaf_length = 15;\nleaf_width = 8;\nleaf_thickness = 1.5;\n\n// Fruit parameters\nfruit_diameter = 6;\nfruit_count = 8;\n\n// Base parameters\nbase_height = 8;\nbase_diameter = 12;\n\nmodule stem() {\n    // Main vertical stem\n    cylinder(h=stem_height, d=stem_diameter, $fn=16);\n    \n    // Add rings for bark texture\n    for(i = [5:10:stem_height-5]) {\n        translate([0, 0, i])\n            scale([1.1, 1.1, 0.2])\n            cylinder(h=1, d=stem_diameter, $fn=16);\n    }\n}\n\nmodule branch(height, angle, rotation) {\n    // Branch emerging from stem\n    rotate([0, angle, rotation])\n        translate([0, 0, height])\n            union() {\n                // Branch cylinder\n                cylinder(h=branch_length, d=branch_diameter, $fn=8);\n                \n                // Leaves along branch\n                for(i = [5:5:branch_length-5]) {\n                    rotate([0, 0, i*10])\n                        translate([0, 0, i])\n                            leaf();\n                }\n                \n                // Fruits at branch end\n                for(i = [0:45:315]) {\n                    rotate([0, 0, i])\n                        translate([branch_length-2, 0, 0])\n                            scale([0.8, 0.8, 0.8])\n                            fruit();\n                }\n            }\n}\n\nmodule leaf() {\n    // Mahlab leaf - elliptical shape\n    difference() {\n        // Main leaf body\n        scale([leaf_width/leaf_length, 1, leaf_thickness/leaf_length])\n            sphere(d=leaf_length, $fn=32);\n        \n        // Leaf tip\n        translate([leaf_length/2-1, 0, 0])\n            sphere(d=3, $fn=16);\n    }\n}\n\nmodule fruit() {\n    // Mahlab cherry - small spherical fruit\n    union() {\n        sphere(d=fruit_diameter, $fn=16);\n        \n        // Small stem on fruit\n        translate([0, 0, fruit_diameter/2])\n            cylinder(h=2, d=1, $fn=8);\n    }\n}\n\nmodule base() {\n    // Pot/base for the plant\n    difference() {\n        cylinder(h=base_height, d1=base_diameter, d2=base_diameter*0.8, $fn=32);\n        \n        // Hollow out for printing\n        translate([0, 0, 2])\n            cylinder(h=base_height-3, d1=base_diameter-4, d2=base_diameter*0.8-4, $fn=32);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    base();\n    \n    // Stem\n    translate([0, 0, base_height])\n        stem();\n    \n    // Branches\n    for(i = [1:branch_count]) {\n        translate([0, 0, base_height])\n            branch(stem_height*0.3 + i*8, branch_angle, i*360/branch_count);\n    }\n    \n    // Top leaves\n    for(i = [1:6]) {\n        translate([0, 0, base_height+stem_height-5])\n            rotate([0, 15, i*60])\n                scale([0.7, 0.7, 0.7])\n                leaf();\n    }\n}",
    "renders": true
  },
  {
    "plant": "mastic",
    "openscad_code": "// Mastic plant (Pistacia lentiscus) - realistic style, medium complexity\n// Height: ~120 mm, printable as one piece\n\n$fn = 36;\n\n// Main trunk\nmodule trunk() {\n    difference() {\n        union() {\n            // Main trunk body\n            cylinder(h = 40, d1 = 12, d2 = 8, center = false);\n            // Trunk flare at base\n            translate([0, 0, -2])\n                cylinder(h = 4, d1 = 16, d2 = 12, center = false);\n        }\n        // Hollow core for material saving\n        translate([0, 0, -1])\n            cylinder(h = 42, d = 8, center = false);\n    }\n}\n\n// Primary branch\nmodule primary_branch(angle, rot) {\n    rotate([0, angle, rot])\n        translate([0, 0, 35])\n            difference() {\n                union() {\n                    // Main branch\n                    cylinder(h = 30, d1 = 6, d2 = 4, center = false);\n                    // Sub-branch 1\n                    translate([0, 0, 20])\n                        rotate([0, -20, 30])\n                            cylinder(h = 20, d1 = 4, d2 = 2.5, center = false);\n                    // Sub-branch 2\n                    translate([0, 0, 15])\n                        rotate([0, -25, -40])\n                            cylinder(h = 18, d1 = 3.5, d2 = 2, center = false);\n                }\n                // Hollow cores\n                cylinder(h = 32, d = 3, center = false);\n                translate([0, 0, 20])\n                    rotate([0, -20, 30])\n                        cylinder(h = 22, d = 2, center = false);\n                translate([0, 0, 15])\n                    rotate([0, -25, -40])\n                        cylinder(h = 20, d = 1.5, center = false);\n            }\n}\n\n// Leaf cluster\nmodule leaf_cluster(pos, scale_factor) {\n    translate(pos)\n        scale([scale_factor, scale_factor, scale_factor])\n            for (i = [0:7]) {\n                rotate([0, 20 * sin(i * 45), i * 45])\n                    translate([0, 0, 0])\n                        difference() {\n                            // Leaf body - elliptical shape\n                            scale([1, 0.6, 0.1])\n                                sphere(d = 8);\n                            // Leaf vein groove\n                            translate([0, 0, -0.5])\n                                scale([0.1, 0.4, 0.2])\n                                    cube([8, 1, 2], center = true);\n                        }\n            }\n}\n\n// Berry cluster\nmodule berry_cluster(pos, count) {\n    translate(pos)\n        for (i = [0:count-1]) {\n            rotate([0, 30 * sin(i * 60), i * 60])\n                translate([3 + i * 0.5, 0, 0])\n                    sphere(d = 2.5);\n        }\n}\n\n// Assemble the plant\nunion() {\n    // Base/trunk\n    trunk();\n    \n    // Primary branches around trunk\n    for (i = [0:3]) {\n        primary_branch(25 + i * 5, i * 90);\n    }\n    \n    // Secondary branches and foliage\n    // Branch 1 foliage\n    translate([0, 0, 65])\n        rotate([0, 25, 45])\n            leaf_cluster([0, 0, 0], 0.8);\n    \n    // Branch 2 foliage\n    translate([0, 0, 62])\n        rotate([0, 25, 135])\n            leaf_cluster([0, 0, 0], 0.7);\n    \n    // Branch 3 foliage\n    translate([0, 0, 58])\n        rotate([0, 25, 225])\n            leaf_cluster([0, 0, 0], 0.75);\n    \n    // Branch 4 foliage\n    translate([0, 0, 60])\n        rotate([0, 25, 315])\n            leaf_cluster([0, 0, 0], 0.8);\n    \n    // Sub-branch foliage\n    translate([6, 4, 50])\n        rotate([0, -20, 30])\n            leaf_cluster([0, 0, 15], 0.5);\n    \n    translate([-5, -3, 45])\n        rotate([0, -25, -40])\n            leaf_cluster([0, 0, 12], 0.4);\n    \n    // Berries on branch tips\n    translate([8, 6, 55])\n        berry_cluster([0, 0, 0], 5);\n    \n    translate([-7, -5, 50])\n        berry_cluster([0, 0, 0], 4);\n    \n    translate([5, -7, 60])\n        berry_cluster([0, 0, 0], 6);\n}\n\n// Base ring for stability\ntranslate([0, 0, -4])\n    difference() {\n        cylinder(h = 2, d = 20);\n        cylinder(h = 3, d = 16);\n    }",
    "renders": true
  },
  {
    "plant": "melegueta",
    "openscad_code": "// Melegueta plant (Aframomum melegueta)\n// Realistic style, medium complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 36;\n\n// Main dimensions (in mm)\nplant_height = 120;\npot_diameter = 60;\npot_height = 40;\nstem_diameter = 8;\nleaf_width = 25;\nleaf_length = 60;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Pot module\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = pot_height, d1 = pot_diameter, d2 = pot_diameter * 0.8, center = false);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n        cylinder(h = pot_height - wall_thickness, d1 = pot_diameter - 2*wall_thickness, d2 = pot_diameter * 0.8 - 2*wall_thickness, center = false);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n        cylinder(h = 3, d = 6, center = false);\n    }\n}\n\n// Soil module\nmodule soil() {\n    translate([0, 0, pot_height - 5])\n    scale([1, 1, 0.3])\n    sphere(d = pot_diameter * 0.9);\n}\n\n// Stem module\nmodule stem() {\n    translate([0, 0, pot_height - 2])\n    cylinder(h = plant_height - pot_height + 2, d = stem_diameter, center = false);\n}\n\n// Leaf blade\nmodule leaf_blade(length, width, angle) {\n    translate([0, 0, -length/2])\n    rotate([0, 90, 0])\n    rotate([0, 0, angle])\n    scale([1, 0.2, 0.05])\n    cube([length, width, width], center = true);\n}\n\n// Leaf with stem\nmodule leaf(length, width, height_angle, rotation_angle, stem_length = 20) {\n    translate([0, 0, stem_length])\n    rotate([height_angle, 0, rotation_angle])\n    union() {\n        // Leaf stem\n        cylinder(h = stem_length, d = 2, center = false);\n        \n        // Leaf blade\n        translate([0, 0, stem_length])\n        leaf_blade(length, width, 0);\n    }\n}\n\n// Cluster of melegueta fruits\nmodule fruit_cluster() {\n    translate([10, 0, plant_height - 20])\n    rotate([0, -30, 0])\n    union() {\n        // Main fruit body\n        scale([1, 1, 1.5])\n        sphere(d = 12);\n        \n        // Individual fruits\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([8, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 8, d1 = 4, d2 = 6, center = false);\n        }\n    }\n}\n\n// Generate leaves around stem\nmodule leaves() {\n    for (i = [0:5]) {\n        angle = i * 60;\n        height = pot_height + 20 + i * 15;\n        \n        translate([0, 0, height])\n        rotate([0, 0, angle])\n        translate([stem_diameter/2 + 2, 0, 0])\n        leaf(leaf_length - i*3, leaf_width - i*2, 30 + i*5, 0);\n        \n        // Opposite leaf\n        translate([0, 0, height + 5])\n        rotate([0, 0, angle + 180])\n        translate([stem_diameter/2 + 2, 0, 0])\n        leaf(leaf_length - i*3, leaf_width - i*2, -30 - i*5, 0);\n    }\n}\n\n// Assembly\nunion() {\n    pot();\n    soil();\n    stem();\n    leaves();\n    fruit_cluster();\n}",
    "renders": true
  },
  {
    "plant": "nigella",
    "openscad_code": "// Nigella (Love-in-a-mist) plant – medium complexity realistic model\n// 1:1 scale (flower ~45 mm across), printable without supports\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Stem module\nmodule stem(h, r) {\n    color(\"darkolivegreen\")\n    union() {\n        cylinder(h = h, r = r, $fn = 16);               // main shaft\n        for(i = [1:3])                                   // thin side shoots\n            translate([0, 0, h*i/4])\n            rotate([90, 0, i*120])\n            cylinder(h = h/3, r = r*0.5, $fn = 8);\n    }\n}\n\n// Ferny leaf module (simple pinnate)\nmodule leaf(length) {\n    color(\"forestgreen\")\n    for(t = [0:30:150])                                // left side\n        translate([0, 0, 0])\n        rotate([0, 0, t])\n        translate([length/2, 0, 0])\n        scale([1, 0.3, 0.1])\n        cube([length, wall, wall], center = true);\n\n    mirror([0, 1, 0])\n    for(t = [0:30:150])                                // right side\n        translate([0, 0, 0])\n        rotate([0, 0, t])\n        translate([length/2, 0, 0])\n        scale([1, 0.3, 0.1])\n        cube([length, wall, wall], center = true);\n}\n\n// Petal module (5 per flower, slightly cupped)\nmodule petal() {\n    color(\"midnightblue\")\n    rotate([10, 0, 0])                                 // slight upward curl\n    scale([1, 1.2, 0.15])\n    cylinder(h = 9, r1 = 7, r2 = 2, center = true, $fn = 20);\n}\n\n// Staminodes (false stamens) – fluffy central tuft\nmodule staminodes() {\n    color(\"darkslateblue\")\n    for(i = [0:20]) {\n        rotate([0, 0, i*137.5])                        // golden angle\n        translate([0, 0, 2])\n        rotate([90, 0, 0])\n        scale([0.4, 0.4, 1])\n        cylinder(h = 6, r = 0.7, $fn = 8);\n    }\n}\n\n// Seed pod (inflated capsule after flowering)\nmodule seed_pod() {\n    color(\"darkgreen\")\n    difference() {\n        sphere(d = 18, $fn = 32);                      // main body\n        translate([0, 0, -10])\n        cylinder(h = 20, r = 8, $fn = 32);             // hollow out bottom\n    }\n    // longitudinal ridges for realism\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([8.5, 0, 0])\n        cube([wall, 2, 18], center = true);\n    }\n}\n\n// Bract (involucral leaf below flower)\nmodule bract() {\n    color(\"seagreen\")\n    difference() {\n        cylinder(h = 2, r1 = 18, r2 = 16, $fn = 24);   // thin disk\n        cylinder(h = 3, r1 = 3, r2 = 3, $fn = 16);     // center hole\n    }\n    // narrow lobes radiating out\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([12, 0, 1])\n        scale([1, 0.2, 1])\n        cube([10, wall, 2], center = true);\n    }\n}\n\n// Whole flower head\nmodule flower() {\n    // Bract\n    bract();\n    translate([0, 0, 3])\n    // 5 petals\n    for(p = [0:72:360])\n        rotate([0, 0, p])\n        translate([0, 8, 0])\n        petal();\n    // Central tuft\n    translate([0, 0, 6])\n    staminodes();\n}\n\n// Main plant assembly\nunion() {\n    // Main stem\n    translate([0, 0, 0])\n    stem(h = 80, r = 2);\n\n    // Leaves along stem\n    for(pos = [20:20:60]) {\n        translate([0, 0, pos])\n        rotate([90, 0, 60+pos*2])\n        leaf(25);\n    }\n\n    // Flower at top\n    translate([0, 0, 82])\n    flower();\n\n    // One seed pod on side shoot\n    translate([10, 0, 60])\n    rotate([90, 0, 45])\n    cylinder(h = 15, r = 1, $fn = 8); // short pedicel\n    translate([13, 0, 60])\n    seed_pod();\n}",
    "renders": true
  },
  {
    "plant": "pepperleaf",
    "openscad_code": "// Pepperleaf Plant - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness\n\nmodule stem_segment(h, r) {\n    cylinder(h=h, r=r, $fn=12);\n}\n\nmodule leaf_blade() {\n    intersection() {\n        // Main leaf shape\n        scale([1, 2.5, 0.1]) sphere(r=12);\n        \n        // Taper the tip\n        translate([0, 25, 0]) cube([30, 30, 5], center=true);\n    }\n}\n\nmodule leaf_vein() {\n    translate([0, 12, 1]) cylinder(h=0.5, r=0.5, $fn=8);\n}\n\nmodule leaf_detail() {\n    union() {\n        // Main blade\n        leaf_blade();\n        \n        // Veins\n        for(i=[-8:4:8]) {\n            translate([i, 0, 1]) scale([0.3, 1, 0.1]) leaf_vein();\n        }\n        \n        // Central vein\n        translate([0, 0, 1.1]) scale([0.5, 1, 0.1]) leaf_vein();\n    }\n}\n\nmodule leaf_pair(angle, height) {\n    translate([0, 0, height]) rotate([0, 0, angle]) {\n        // Left leaf\n        rotate([0, 0, -30]) translate([-2, 0, 0]) rotate([0, 15, 0]) leaf_detail();\n        \n        // Right leaf\n        rotate([0, 0, 30]) translate([2, 0, 0]) mirror([1,0,0]) rotate([0, 15, 0]) leaf_detail();\n        \n        // Connecting stem\n        rotate([0, 0, 15]) translate([0, -5, 0]) stem_segment(10, 0.5);\n    }\n}\n\nmodule main_stem() {\n    union() {\n        // Base\n        translate([0, 0, -5]) cylinder(h=5, r=3, $fn=12);\n        \n        // Stem segments\n        stem_segment(15, 2);\n        translate([0, 0, 15]) stem_segment(20, 1.8);\n        translate([0, 0, 35]) stem_segment(25, 1.5);\n        translate([0, 0, 60]) stem_segment(20, 1.2);\n    }\n}\n\nmodule pepperleaf_plant() {\n    union() {\n        // Main stem\n        main_stem();\n        \n        // Leaf pairs at different heights\n        leaf_pair(45, 20);\n        leaf_pair(-45, 30);\n        leaf_pair(90, 45);\n        leaf_pair(-90, 50);\n        leaf_pair(135, 65);\n        leaf_pair(-135, 70);\n        \n        // Top leaves\n        translate([0, 0, 80]) rotate([0, -15, 0]) leaf_detail();\n        translate([0, 0, 85]) rotate([0, -15, 45]) leaf_detail();\n        translate([0, 0, 90]) rotate([0, -15, -45]) leaf_detail();\n    }\n}\n\n// Scale to printable size (approx 100mm height)\nscale([1, 1, 1]) pepperleaf_plant();",
    "renders": true
  },
  {
    "plant": "perilla",
    "openscad_code": "// Perilla plant - Realistic medium complexity\n// 3D printable model with proper wall thickness\n\n// Constants\nstem_height = 35;\nstem_diameter = 3.5;\nleaf_length = 18;\nleaf_width = 15;\nleaf_thickness = 2;\npetiole_length = 8;\nnum_leaf_pairs = 4;\n\n// Main stem module\nmodule stem() {\n    // Central stem\n    cylinder(h=stem_height, d=stem_diameter, $fn=16);\n    \n    // Root flare at base\n    translate([0, 0, -2])\n        cylinder(h=5, d1=stem_diameter * 1.5, d2=stem_diameter, $fn=16);\n}\n\n// Single leaf with perilla characteristics\nmodule leaf(angle, height, rotation) {\n    translate([0, 0, height])\n    rotate([0, 0, rotation])\n    rotate([angle, 0, 0])\n    translate([0, 0, -leaf_thickness/2]) {\n        // Main leaf body - perilla shape with serrated edges\n        difference() {\n            // Base leaf shape - broad ovate\n            scale([1, 1.2, 1])\n            sphere(d=leaf_width, $fn=32);\n            \n            // Cut to make heart-shaped base\n            translate([0, -leaf_width/3, -leaf_thickness])\n                cube([leaf_width * 1.5, leaf_width * 0.8, leaf_thickness * 2], center=true);\n            \n            // Cut to make pointed tip\n            rotate([0, 0, 180])\n            translate([0, leaf_length/2, -leaf_thickness])\n                cylinder(h=leaf_length, r1=leaf_width/2.5, r2=0, $fn=3);\n        }\n        \n        // Leaf veins\n        for(i = [-1, 0, 1]) {\n            rotate([0, 0, i * 25])\n            translate([0, -leaf_length/3, leaf_thickness/2 - 0.1])\n                cube([leaf_width/15, leaf_length/1.5, leaf_thickness/5], center=true);\n        }\n        \n        // Petiole\n        translate([0, -leaf_length/2, 0])\n        rotate([90, 0, 0])\n            cylinder(h=petiole_length, d=stem_diameter * 0.6, $fn=8);\n    }\n}\n\n// Small flower spike (perilla flowers are tiny)\nmodule flower_spike() {\n    translate([0, 0, stem_height + 2])\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([stem_diameter * 0.8, 0, 0])\n            sphere(d=1.5, $fn=8);\n    }\n}\n\n// Main plant assembly\nmodule perilla_plant() {\n    // Base soil disk\n    translate([0, 0, -5])\n        cylinder(h=3, d=30, $fn=32);\n    \n    // Main stem\n    stem();\n    \n    // Leaves arranged alternately up the stem\n    for(i = [0:num_leaf_pairs-1]) {\n        height = 5 + i * (stem_height / num_leaf_pairs);\n        angle = 45 - i * 5;\n        \n        // Left leaf\n        leaf(angle, height, 60);\n        \n        // Right leaf\n        leaf(angle, height, -60);\n        \n        // Front leaf (smaller)\n        leaf(angle - 10, height + 3, 0);\n    }\n    \n    // Top flower cluster\n    flower_spike();\n}\n\n// Render the plant\nperilla_plant();",
    "renders": true
  },
  {
    "plant": "rau",
    "openscad_code": "// Rau plant (Vietnamese coriander) - realistic medium complexity\n// Overall height: 110 mm, suitable for desktop 3D printing\n\n$fn = 32;               // Smooth curves\nwall = 2;               // 3D-printable wall thickness\n\nmodule stem(h, r, taper=0.9){\n    // Single segmented stem with slight taper\n    cylinder(h=h, r1=r, r2=r*taper, center=false);\n}\n\nmodule leaf(len, wid, thick){\n    // Heart-shaped leaf with central vein\n    translate([0,0,thick/2])\n    difference(){\n        // Main leaf blade\n        scale([1, 0.7, 1])\n        hull(){\n            sphere(len/2);\n            translate([len*0.8,0,0]) sphere(wid/2);\n        }\n        // Remove bottom half\n        translate([0,0,-len]) cube([len*2,len*2,len*2], center=true);\n    }\n    \n    // Central vein\n    translate([len*0.4,0,thick/0.8])\n    rotate([0,90,0]) cylinder(h=len*0.9, r=thick/2, center=true);\n}\n\nmodule node(stem_r){\n    // Swollen node where leaves attach\n    sphere(stem_r*1.8);\n}\n\nmodule plant(){\n    // Main stem\n    translate([0,0,0])\n    stem(h=80, r=3);\n    \n    // Generate 6 alternating leaf pairs up the stem\n    for(i=[0:5]){\n        angle = 45 + i*15;          // Increasing angle up stem\n        height = 8 + i*12;          // Spacing between nodes\n        \n        translate([0,0,height]) node(3);\n        \n        // Left leaf\n        translate([0,0,height])\n        rotate([0,0,140 + i*30])\n        translate([3,0,0])\n        rotate([0,0,-20])\n        rotate([0,angle,0])\n        leaf(len=25-i*2, wid=15-i, thick=wall);\n        \n        // Right leaf\n        translate([0,0,height])\n        rotate([0,0,-40 - i*30])\n        translate([3,0,0])\n        rotate([0,0,20])\n        rotate([0,angle,0])\n        leaf(len=25-i*2, wid=15-i, thick=wall);\n    }\n    \n    // Root system base\n    translate([0,0,-5])\n    cylinder(h=10, r1=8, r2=5);\n    \n    // Some surface roots\n    for(i=[0:4]){\n        rotate([0,0,i*72])\n        translate([3,0,-2])\n        rotate([30,0,0])\n        cylinder(h=15, r=1.2);\n    }\n}\n\n// Render the complete plant\nplant();",
    "renders": true
  },
  {
    "plant": "rue",
    "openscad_code": "// Rue plant - realistic style, medium complexity\n// Overall height: ~120mm, suitable for 3D printing\n\n// Stem system\nmodule stem_segment(h, r) {\n    cylinder(h=h, r=r, $fn=16);\n}\n\n// Main stem\nmodule main_stem() {\n    union() {\n        // Base stem\n        translate([0, 0, 0])\n            stem_segment(30, 3);\n        \n        // Upper stem segment\n        translate([0, 0, 30])\n            rotate([5, 0, 0])\n            stem_segment(25, 2.5);\n            \n        // Top segment\n        translate([0, 5, 54])\n            rotate([10, 0, 0])\n            stem_segment(20, 2);\n    }\n}\n\n// Rue leaf - characteristic blue-green lobed shape\nmodule rue_leaf() {\n    difference() {\n        // Main leaf body - compound leaf with 3-5 lobes\n        union() {\n            // Central lobe\n            translate([0, 0, 0])\n                scale([1, 2, 0.5])\n                sphere(8, $fn=16);\n                \n            // Side lobes\n            translate([-6, 2, 0])\n                rotate([0, 0, -25])\n                scale([0.8, 1.5, 0.5])\n                sphere(6, $fn=16);\n                \n            translate([6, 2, 0])\n                rotate([0, 0, 25])\n                scale([0.8, 1.5, 0.5])\n                sphere(6, $fn=16);\n                \n            // Lower lobes\n            translate([-4, -4, 0])\n                rotate([0, 0, -45])\n                scale([0.7, 1.2, 0.5])\n                sphere(5, $fn=16);\n                \n            translate([4, -4, 0])\n                rotate([0, 0, 45])\n                scale([0.7, 1.2, 0.5])\n                sphere(5, $fn=16);\n        }\n        \n        // Add vein indentations\n        for(i = [-1:1]) {\n            translate([i*2, -6, 1])\n                rotate([0, 0, i*10])\n                scale([0.5, 3, 0.5])\n                cube([1, 12, 2], center=true);\n        }\n    }\n}\n\n// Petiole (leaf stem)\nmodule petiole() {\n    cylinder(h=8, r1=1, r2=0.5, $fn=8);\n}\n\n// Flower cluster - rue has yellow 4-petaled flowers\nmodule flower() {\n    union() {\n        // Center\n        sphere(2, $fn=12);\n        \n        // 4 petals\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([3, 0, 0])\n            scale([1.5, 1, 0.3])\n            sphere(3, $fn=12);\n        }\n    }\n}\n\n// Flower cluster\nmodule flower_cluster() {\n    translate([0, 0, 0])\n    scale([1, 1, 0.8])\n    flower();\n    \n    for(i = [1:3]) {\n        rotate([0, 0, i*120])\n        translate([4, 0, 2])\n        scale([0.7, 0.7, 0.7])\n        flower();\n    }\n}\n\n// Leaf arrangement on stem\nmodule leaf_pair(angle, height, rotation) {\n    translate([0, 0, height])\n    rotate([0, 0, rotation])\n    {\n        // Left leaf\n        rotate([0, angle, -90])\n        translate([-3, 0, 0])\n        {\n            petiole();\n            translate([0, -4, 8])\n            rotate([0, 0, 0])\n            rue_leaf();\n        }\n        \n        // Right leaf\n        rotate([0, angle, 90])\n        translate([3, 0, 0])\n        {\n            petiole();\n            translate([0, -4, 8])\n            rotate([0, 0, 0])\n            mirror([1, 0, 0])\n            rue_leaf();\n        }\n    }\n}\n\n// Complete rue plant\nunion() {\n    // Base pot\n    difference() {\n        cylinder(h=15, r=20, $fn=32);\n        translate([0, 0, 2])\n            cylinder(h=13, r=17.5, $fn=32);\n    }\n    \n    // Main stem emerging from pot\n    translate([0, 0, 15])\n        main_stem();\n    \n    // Leaf pairs along stem\n    for(i = [0:3]) {\n        leaf_pair(25 - i*5, 20 + i*15, i*45);\n    }\n    \n    // Top leaves\n    leaf_pair(15, 74, 22);\n    \n    // Flower clusters at top\n    translate([0, 8, 74])\n        rotate([0, 20, 0])\n        flower_cluster();\n        \n    translate([-5, 5, 70])\n        rotate([0, 30, 45])\n        scale([0.8, 0.8, 0.8])\n        flower_cluster();\n        \n    translate([5, 7, 72])\n        rotate([0, 25, -30])\n        scale([0.9, 0.9, 0.9])\n        flower_cluster();\n}",
    "renders": true
  },
  {
    "plant": "sarsaparilla",
    "openscad_code": "// Realistic 3D-printable sarsaparilla plant\n// Medium complexity – approx. 110 lines\n// Largest dimension ≈ 100 mm\n\n// General parameters\npot_d = 45;            // pot top diameter\npot_h = 35;            // pot height\nstem_d = 4;            // main stem diameter\nleaf_L = 22;           // leaflet length\nleaf_W = 11;           // leaflet width\nleaf_T = 1.5;          // leaflet thickness (printable)\nberry_d = 4;           // berry diameter\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main module\nmodule sarsaparilla() {\n    union() {\n        // Pot\n        translate([0, 0, 0])\n            pot();\n\n        // Stem rises from pot centre\n        translate([0, 0, pot_h])\n            stem();\n\n        // Leaf clusters along stem\n        for (h = [0:18:72])\n            translate([0, 0, pot_h + h])\n                leaf_cluster();\n\n        // Berries at top\n        translate([0, 0, pot_h + 80])\n            berry_cluster();\n    }\n}\n\n// Simple pot with slight taper\nmodule pot() {\n    difference() {\n        cylinder(h = pot_h, d1 = pot_d, d2 = pot_d * 0.8, $fn = 32);\n        // Hollow out\n        translate([0, 0, wall])\n            cylinder(h = pot_h - wall, d1 = pot_d - wall * 2, d2 = pot_d * 0.8 - wall * 2, $fn = 32);\n    }\n}\n\n// Main stem\nmodule stem() {\n    cylinder(h = 80, d = stem_d, $fn = 16);\n}\n\n// One leaflet with elliptical outline\nmodule leaflet() {\n    // Use thin ellipsoid\n    scale([1, leaf_W / leaf_L, leaf_T / leaf_L])\n        sphere(d = leaf_L);\n}\n\n// Cluster of 5 leaflets radiating from one node\nmodule leaf_cluster() {\n    for (a = [0:72:359]) {\n        rotate([0, 0, a])\n            translate([leaf_L * 0.5, 0, 0])\n                rotate([0, 0, -30])\n                    rotate([0, 45, 0])\n                        leaflet();\n    }\n}\n\n// Berry cluster (umbel)\nmodule berry_cluster() {\n    for (i = [0:6]) {\n        rotate([0, 0, i * 60])\n            translate([stem_d * 2, 0, 0])\n                rotate([0, 90, 0])\n                    for (j = [0:5]) {\n                        rotate([0, 0, j * 60])\n                            translate([berry_d * 1.2, 0, 0])\n                                berry();\n                    }\n    }\n}\n\n// Single berry sphere\nmodule berry() {\n    sphere(d = berry_d);\n}\n\n// Render the plant\nsarsaparilla();",
    "renders": true
  },
  {
    "plant": "shiso",
    "openscad_code": "// Shiso Plant - Realistic Style with Medium Complexity\n// Overall height ~120mm, suitable for 3D printing\n\n// Main parameters\nstem_height = 100;\nstem_diameter = 4;\nleaf_length = 40;\nleaf_width = 30;\nleaf_thickness = 2;\nflower_height = 15;\nflower_diameter = 8;\n\n// Stem module with joints\nmodule stem() {\n    // Main stem\n    cylinder(h=stem_height, d=stem_diameter, $fn=8);\n    \n    // Segment joints every 20mm\n    for(i = [1:5]) {\n        translate([0, 0, i*20])\n        cylinder(h=2, d=stem_diameter*1.5, $fn=8);\n    }\n}\n\n// Realistic leaf with serrated edges and veining\nmodule leaf(angle, height) {\n    // Rotate to position along stem\n    rotate([angle, 0, 0])\n    translate([0, 0, height]) {\n        // Main leaf blade\n        rotate([0, 90, 0])\n        linear_extrude(height=leaf_thickness)\n        difference() {\n            // Leaf shape\n            hull() {\n                for(i = [0:10:360]) {\n                    rotate([0, 0, i])\n                    translate([leaf_length/2 * cos(i/2), leaf_width/2 * sin(i/2), 0])\n                    circle(d=leaf_thickness*2);\n                }\n            }\n            \n            // Serrated edges\n            for(i = [0:30:360]) {\n                rotate([0, 0, i])\n                translate([leaf_length/2 - 2, 0, 0])\n                circle(d=5);\n            }\n        }\n        \n        // Central vein\n        rotate([0, 90, 0])\n        translate([0, 0, leaf_thickness/2 + 0.1])\n        cube([leaf_length, 0.5, 0.3], center=true);\n        \n        // Side veins\n        for(side = [-1:2:1]) {\n            for(pos = [0.3:0.2:0.8]) {\n                rotate([0, 90, 0])\n                translate([leaf_length*(pos-0.5), side*leaf_width*0.3, leaf_thickness/2 + 0.1])\n                rotate([0, 0, side*30])\n                cube([leaf_length*0.3, 0.3, 0.2], center=true);\n            }\n        }\n    }\n}\n\n// Layered flower cluster\nmodule flower_cluster(height) {\n    translate([0, 0, height])\n    color(\"lightgreen\")\n    difference() {\n        // Main flower shape\n        sphere(d=flower_diameter, $fn=12);\n        \n        // Petal gaps\n        for(i = [0:45:360]) {\n            rotate([0, 0, i])\n            translate([flower_diameter/2 - 1, 0, 0])\n            cylinder(h=flower_diameter, d=2, $fn=6);\n        }\n    }\n    \n    // Small flowers\n    for(i = [0:60:360]) {\n        rotate([0, 0, i])\n        translate([flower_diameter/2 + 2, 0, height + 2])\n        sphere(d=flower_diameter/3, $fn=8);\n    }\n}\n\n// Root system for stability\nmodule root_system() {\n    translate([0, 0, -5])\n    color(\"brown\")\n    for(angle = [0:60:300]) {\n        rotate([angle, 0, 0])\n        translate([0, 3, -2])\n        cylinder(h=10, d1=3, d2=1, $fn=6);\n    }\n}\n\n// Main plant assembly\nmodule shiso_plant() {\n    // Base root system\n    root_system();\n    \n    // Main stem\n    stem();\n    \n    // Leaves at different heights and angles\n    for(i = [0:4]) {\n        leaf(30 + i*15, 20 + i*15);\n        leaf(-30 - i*15, 25 + i*15);\n        leaf(0, 30 + i*15);\n    }\n    \n    // Top leaves\n    leaf(45, 90);\n    leaf(-45, 95);\n    \n    // Flower cluster at top\n    flower_cluster(stem_height - 5);\n}\n\n// Render the complete plant\nshiso_plant();",
    "renders": true
  },
  {
    "plant": "skullcap",
    "openscad_code": "// Skullcap Plant (Scutellaria) - Realistic Medium Complexity\n// Overall height ~110 mm, suitable for 3D printing\n\n// Main parameters\nstem_diameter = 6;\nstem_height = 60;\nleaf_thickness = 2;\nflower_diameter = 12;\nflower_height = 18;\nwall_thickness = 2;\n\n// Stem module with slight tapering\nmodule stem() {\n    union() {\n        // Main stem\n        cylinder(h=stem_height, d1=stem_diameter, d2=stem_diameter*0.8, $fn=16);\n        \n        // Node rings every 15mm\n        for(i=[1:4]) {\n            translate([0,0,i*15])\n            cylinder(h=3, d=stem_diameter+3, $fn=16);\n        }\n    }\n}\n\n// Individual leaf with proper skullcap shape\nmodule leaf(length, width) {\n    difference() {\n        // Main leaf body - elliptical\n        scale([1, width/length, leaf_thickness/length])\n        sphere(d=length, $fn=32);\n        \n        // Serrated edges simulation via small spheres\n        for(i=[-0.8:0.2:0.8]) {\n            translate([i*length/2, 0, 0])\n            sphere(d=length/8);\n        }\n        \n        // Central vein indentation\n        translate([0,0,-leaf_thickness])\n        cube([length*0.1, width*0.3, leaf_thickness*2], center=true);\n    }\n}\n\n// Skullcap flower with helmet shape\nmodule flower() {\n    difference() {\n        // Main helmet-shaped calyx\n        scale([1, 1.2, 0.8])\n        sphere(d=flower_diameter, $fn=32);\n        \n        // Top opening\n        translate([0,0,flower_diameter/3])\n        cylinder(h=flower_height, d=flower_diameter*0.7, $fn=32);\n        \n        // Side viewing windows\n        rotate([0,90,0])\n        for(angle=[45,135,225,315]) {\n            rotate([0,0,angle])\n            translate([flower_diameter/2,0,0])\n            cube([flower_diameter/3, flower_diameter/4, flower_height/2], center=true);\n        }\n    }\n    \n    // Small petals inside\n    union() {\n        for(i=[0:60:300]) {\n            rotate([0,0,i])\n            translate([0, flower_diameter/4, flower_height/2])\n            scale([0.3, 0.1, 0.5])\n            sphere(d=flower_diameter/2, $fn=16);\n        }\n    }\n}\n\n// Leaf pair at node\nmodule leaf_pair(height, angle) {\n    translate([0,0,height])\n    rotate([0,0,angle]) {\n        // Left leaf\n        rotate([0,0,-30])\n        translate([stem_diameter/2+5, 0, 0])\n        rotate([0,-10,0])\n        leaf(25, 12);\n        \n        // Right leaf\n        rotate([0,0,30])\n        translate([stem_diameter/2+5, 0, 0])\n        rotate([0,10,0])\n        leaf(25, 12);\n    }\n}\n\n// Main plant assembly\nunion() {\n    // Base root flare\n    translate([0,0,-5])\n    cylinder(h=10, d1=stem_diameter*1.5, d2=stem_diameter, $fn=16);\n    \n    // Main stem\n    stem();\n    \n    // Leaves at nodes\n    for(i=[0:3]) {\n        leaf_pair(i*15+5, i*45);\n    }\n    \n    // Terminal flower cluster\n    translate([0,0,stem_height])\n    union() {\n        // Main terminal flower\n        flower();\n        \n        // Secondary flowers on short pedicels\n        for(i=[0:120:240]) {\n            rotate([0,0,i])\n            translate([stem_diameter*1.5, 0, -5])\n            rotate([15,0,0])\n            scale([0.7,0.7,0.7])\n            flower();\n        }\n    }\n    \n    // Bracts (small leaf-like structures) below flowers\n    for(i=[0:72:360]) {\n        rotate([0,0,i])\n        translate([stem_diameter*0.8, 0, stem_height-5])\n        rotate([30,0,0])\n        scale([0.5,0.5,0.5])\n        leaf(15, 8);\n    }\n}",
    "renders": true
  },
  {
    "plant": "star",
    "openscad_code": "// Realistic Star Plant - 3D Printable\n// Medium complexity star-shaped succulent with thick leaves\n\n// Parameters\nleaf_thickness = 2.5;  // Wall thickness for 3D printing\nbase_height = 8;\nleaf_length = 25;\nleaf_width = 18;\nnum_points = 5;  // 5-pointed star\nplant_height = 40;\npot_outer = 45;\npot_height = 20;\npot_thick = 2.5;\n\n// Main plant module\nmodule star_plant() {\n    union() {\n        // Central stem\n        translate([0, 0, base_height]) {\n            cylinder(h=plant_height - base_height, r1=6, r2=4, $fn=16);\n        }\n        \n        // Star leaves arranged in spiral\n        for(i=[0:num_points-1]) {\n            rotate([0, 0, i * (360/num_points)]) {\n                translate([0, 0, base_height + i * 2]) {\n                    rotate([0, 0, -15]) {\n                        star_leaf(leaf_length - i*2, leaf_width - i*1.5);\n                    }\n                }\n            }\n        }\n        \n        // Additional smaller leaves\n        for(i=[0:num_points-1]) {\n            rotate([0, 0, i * (360/num_points) + 180/num_points]) {\n                translate([0, 0, base_height + plant_height/2 + i*1.5]) {\n                    rotate([0, 0, 15]) {\n                        star_leaf(leaf_length*0.7, leaf_width*0.7);\n                    }\n                }\n            }\n        }\n        \n        // Base/trunk\n        difference() {\n            cylinder(h=base_height, r1=8, r2=6, $fn=24);\n            cylinder(h=base_height, r1=5, r2=3, $fn=24);\n        }\n        \n        // Pot\n        translate([0, 0, -pot_height]) {\n            pot();\n        }\n    }\n}\n\n// Individual star leaf module\nmodule star_leaf(length, width) {\n    // Main leaf body\n    difference() {\n        // Outer shape\n        scale([1, 0.4, 0.2]) {\n            sphere(d=width, $fn=12);\n        }\n        \n        // Inner hollow for thickness\n        translate([0, 0, -leaf_thickness]) {\n            scale([0.7, 0.3, 0.15]) {\n                sphere(d=width*0.8, $fn=12);\n            }\n        }\n    }\n    \n    // Leaf tip\n    translate([length*0.8, 0, 0]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=length*0.3, r1=leaf_thickness, r2=0.5, $fn=8);\n        }\n    }\n    \n    // Vein details\n    for(v=[-0.3, 0, 0.3]) {\n        translate([length*0.2, v*width*0.2, leaf_thickness/2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=length*0.6, r=0.5, $fn=6);\n            }\n        }\n    }\n}\n\n// Plant pot module\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_height, r=pot_outer/2, $fn=32);\n        \n        // Inner cavity\n        translate([0, 0, -1]) {\n            cylinder(h=pot_height-1, r=pot_outer/2 - pot_thick, $fn=32);\n        }\n        \n        // Drainage holes (3 small holes)\n        for(a=[0:120:240]) {\n            rotate([0, 0, a]) {\n                translate([pot_outer/2 - pot_thick - 2, 0, pot_height - 3]) {\n                    cylinder(h=3, r=1.5, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Pot rim detail\n    translate([0, 0, pot_height-2]) {\n        difference() {\n            cylinder(h=2, r=pot_outer/2 + 1, $fn=32);\n            cylinder(h=3, r=pot_outer/2 - 1, $fn=32);\n        }\n    }\n}\n\n// Render the plant\nstar_plant();",
    "renders": true
  },
  {
    "plant": "sweetleaf",
    "openscad_code": "// Sweetleaf plant (Stevia rebaudiana) – medium complexity, realistic style\n// Overall height ≈ 110 mm, safe for FDM printing (no steep overhangs, 2 mm walls)\n\n$fn = 24;                   // General resolution\n\nstem_h   = 100;             // Main stem height\nstem_top =  10;             // Top diameter of stem\nstem_bot =   4;             // Bottom diameter of stem\nbase_r   =  20;             // Pot base radius\nbase_h   =  15;             // Pot height\nwall_t   =   2;             // 3D-printable wall thickness\nleaf_L   =  22;             // Leaf length along midrib\nleaf_W   =   9;             // Max leaf width\npetiole_L =  8;             // Petiole length\n\n// Simple rounded pot\nmodule pot() {\n    difference() {\n        cylinder(h = base_h, r1 = base_r, r2 = base_r * 0.85);\n        translate([0, 0, wall_t])\n            cylinder(h = base_h, r1 = base_r - wall_t, r2 = base_r * 0.85 - wall_t);\n    }\n}\n\n// Single leaf with realistic elliptical blade and slight cupping\nmodule leaf(angle, height) {\n    translate([0, 0, height])\n    rotate([0, 0, angle])\n    translate([0, stem_top/2 + petiole_L, 0])\n    rotate([80, 0, 0])          // Tilt leaf up\n    union() {\n        // Petiole\n        color(\"darkgreen\")\n        rotate([90, 0, 0])\n        cylinder(h = petiole_L, r1 = 0.8, r2 = 0.8, $fn = 8);\n        \n        // Blade – ellipsoid trimmed to leaf shape\n        color(\"green\")\n        translate([0, leaf_L/2, 0])\n        scale([leaf_W/2, leaf_L/2, 0.5])\n        sphere(1);\n    }\n}\n\n// Main stem with slight taper\nmodule stem() {\n    color(\"saddlebrown\")\n    cylinder(h = stem_h, r1 = stem_bot, r2 = stem_top);\n}\n\n// Whorl of opposite leaves every ~20 mm\nmodule foliage() {\n    for (z = [20 : 20 : stem_h - 10]) {      // 4 levels\n        for (ang = [0, 180]) {               // Opposite pairs\n            leaf(ang + (z/5), z);            // Slight twist per level\n        }\n    }\n}\n\n// Base assembly\npot();\ntranslate([0, 0, base_h]) stem();\nfoliage();",
    "renders": true
  },
  {
    "plant": "tulsi",
    "openscad_code": "// Realistic Tulsi Plant - Medium complexity\n// Scaled for 3D printing, ~100mm height, 2mm wall thickness\n\nmodule stem_segment(h, r, angle) {\n    translate([0, 0, h/2]) rotate([0, angle, 0]) \n        cylinder(h=h, r=r, $fn=8);\n}\n\nmodule leaf() {\n    // Central vein\n    translate([0, 0, 0.5]) rotate([90, 0, 0])\n        cylinder(h=12, r1=0.5, r2=0.2, $fn=6);\n    \n    // Leaf blade\n    translate([0, 0, 1]) rotate([90, 0, 0])\n        scale([1, 1.8, 0.3])\n            sphere(5, $fn=12);\n}\n\nmodule leaf_cluster(base_angle, height) {\n    translate([0, 0, height]) rotate([0, 0, base_angle]) {\n        // Main leaf pair\n        translate([3, 0, 0]) rotate([0, 0, -20]) leaf();\n        translate([-3, 0, 0]) rotate([0, 180, 20]) leaf();\n        \n        // Smaller upper leaves\n        translate([2, 0, 3]) rotate([0, 0, -40]) scale(0.7) leaf();\n        translate([-2, 0, 3]) rotate([0, 180, 40]) scale(0.7) leaf();\n    }\n}\n\nmodule flower() {\n    // Flower center\n    translate([0, 0, 0]) sphere(1.5, $fn=12);\n    \n    // Petals\n    for(i=[0:45:315]) {\n        rotate([0, 0, i]) translate([2.5, 0, 0])\n            scale([0.8, 0.3, 0.2]) sphere(2, $fn=6);\n    }\n}\n\nmodule stem_with_leaves() {\n    // Main stem\n    cylinder(h=40, r1=2.5, r2=1.5, $fn=8);\n    \n    // Branching stems\n    for(h=[10:15:30]) {\n        translate([0, 0, h]) {\n            // Side branch\n            rotate([0, 30, 45 + h*3]) {\n                cylinder(h=15, r1=1.5, r2=0.8, $fn=8);\n                \n                // Leaves on branch\n                translate([0, 0, 7]) rotate([0, -30, 0]) {\n                    leaf_cluster(0, 0);\n                    leaf_cluster(90, 3);\n                }\n            }\n        }\n    }\n    \n    // Main leaves\n    leaf_cluster(0, 35);\n    leaf_cluster(120, 32);\n    leaf_cluster(240, 38);\n    \n    // Flowers at top\n    translate([0, 0, 40]) {\n        for(i=[0:120:240]) {\n            rotate([0, 0, i]) translate([3, 0, 2]) flower();\n        }\n    }\n}\n\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=25, r1=25, r2=20, $fn=32);\n        \n        // Hollow inside\n        translate([0, 0, -1]) cylinder(h=27, r1=23, r2=18, $fn=32);\n        \n        // Drainage hole\n        translate([0, 0, -0.5]) cylinder(h=2, r=3, $fn=12);\n    }\n    \n    // Soil surface\n    translate([0, 0, 24.5]) \n        cylinder(h=1, r=22, r2=19, $fn=32);\n}\n\n// Main assembly\ntranslate([0, 0, 25]) stem_with_leaves();\npot();",
    "renders": true
  },
  {
    "plant": "vervain",
    "openscad_code": "// Vervain Plant - Realistic Style, Medium Complexity\n// Overall height ~120mm, suitable for 3D printing\n\n$fn = 30;\n\n// Main parameters\nstem_height = 100;\nstem_diameter = 4;\nleaf_length = 25;\nleaf_width = 8;\nflower_diameter = 12;\nflower_height = 8;\n\n// Stem module with slight taper\nmodule stem() {\n    union() {\n        // Main stem\n        cylinder(h = stem_height, d1 = stem_diameter, d2 = stem_diameter * 0.7);\n        \n        // Small branches\n        for(i = [1:3]) {\n            translate([0, 0, stem_height * 0.3 * i])\n            rotate([0, 0, 120 * i])\n            translate([stem_diameter/2, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 15, d1 = 2, d2 = 1.5);\n        }\n    }\n}\n\n// Vervain leaf - lanceolate shape with serrated edges\nmodule leaf() {\n    difference() {\n        // Main leaf body - elongated ellipsoid\n        scale([1, leaf_width/leaf_length, 0.3])\n        sphere(r = leaf_length/2);\n        \n        // Serrated edges - subtract small triangles\n        for(i = [1:8]) {\n            rotate([0, 0, 360/8 * i])\n            translate([leaf_length/2 - 3, 0, 0])\n            rotate([0, 0, 45])\n            cube([3, 1, 2], center = true);\n        }\n        \n        // Central vein\n        translate([0, 0, -0.5])\n        scale([0.9, 0.1, 0.3])\n        sphere(r = leaf_length/2);\n    }\n}\n\n// Small vervain flower cluster\nmodule flower_cluster() {\n    // Central stem of cluster\n    cylinder(h = flower_height, d = 1.5);\n    \n    // Individual tiny flowers (5-petaled)\n    for(i = [1:5]) {\n        rotate([0, 0, 72 * i])\n        translate([flower_diameter/3, 0, flower_height/2])\n        sphere(r = 1.5);\n    }\n    \n    // Buds above\n    translate([0, 0, flower_height])\n    sphere(r = 2);\n}\n\n// Leaf attachment point with support\nmodule leaf_attachment(height) {\n    translate([0, 0, height])\n    rotate([30, 0, 0])\n    union() {\n        // Petiole (leaf stem)\n        cylinder(h = 8, d = 1.5);\n        \n        // Leaf\n        translate([0, 0, 8])\n        rotate([0, 0, -30])\n        leaf();\n    }\n}\n\n// Main plant assembly\nunion() {\n    // Base with root flare\n    translate([0, 0, -5])\n    cylinder(h = 5, d1 = 6, d2 = 8);\n    \n    // Main stem\n    stem();\n    \n    // Leaves in opposite pairs\n    for(i = [1:5]) {\n        height = stem_height * 0.15 * i;\n        // Opposite leaf pair\n        rotate([0, 0, 90 * i])\n        leaf_attachment(height);\n        \n        rotate([0, 0, 90 * i + 180])\n        leaf_attachment(height);\n    }\n    \n    // Flower spike at top\n    translate([0, 0, stem_height])\n    for(i = [1:4]) {\n        rotate([0, 0, 45 * i])\n        translate([0, 0, i * 3])\n        flower_cluster();\n    }\n    \n    // Additional flowers along upper stem\n    for(i = [1:2]) {\n        translate([0, 0, stem_height - 15 * i])\n        rotate([0, 0, 60 * i])\n        translate([stem_diameter/2, 0, 0])\n        rotate([60, 0, 0])\n        flower_cluster();\n    }\n}",
    "renders": true
  },
  {
    "plant": "wintergreen",
    "openscad_code": "// Wintergreen plant (Gaultheria procumbens) – realistic style, medium complexity\n// Overall height ~100 mm, suitable for 3D printing at 2 mm wall thickness\n\n$fn = 24;           // moderate facet count\nstem_d = 5;         // main stem diameter\nleaf_l = 25;        // leaf length\nleaf_w = 12;        // leaf width\nleaf_t = 2;         // leaf thickness\nberry_d = 8;        // wintergreen berry diameter\n\n// Main stem rising from soil\nmodule stem(h = 40) {\n    difference() {\n        cylinder(d = stem_d, h = h, $fn = 12);\n        translate([0, 0, -0.5])\n            cylinder(d = stem_d - 4, h = h + 1, $fn = 12);   // hollow core\n    }\n}\n\n// Simple elliptical leaf with slight cup\nmodule leaf(angle = 0, tilt = 20) {\n    translate([0, 0, leaf_t / 2])\n    rotate([tilt, 0, angle])\n    difference() {\n        scale([leaf_w, leaf_l, leaf_t])\n            sphere(d = 1);\n        translate([0, 0, leaf_t / 2])\n            scale([leaf_w * 0.9, leaf_l * 0.9, leaf_t + 1])\n                sphere(d = 1);\n    }\n}\n\n// Tiny round wintergreen berry\nmodule berry(pos = [0, 0, 0]) {\n    translate(pos)\n    sphere(d = berry_d);\n}\n\n// Petiole connector between stem and leaf\nmodule petiole(len = 8) {\n    color(\"darkgreen\")\n    rotate([90, 0, 0])\n        cylinder(d = 2, h = len);\n}\n\n// Assemble a whorl of 4-5 leaves around the stem\nmodule leaf_whorl(h) {\n    for (a = [0 : 72 : 359]) {\n        translate([0, 0, h])\n        rotate([0, 0, a])\n        translate([stem_d / 2 + 1, 0, 0]) {\n            petiole();\n            translate([4, 0, 0])\n                rotate([0, 0, 180])\n                leaf(angle = a);\n        }\n    }\n}\n\n// Cluster of 3-4 berries near top\nmodule berry_cluster(h) {\n    for (i = [0 : 3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([stem_d / 2 + 3, 0, h])\n            berry();\n    }\n}\n\n// Base soil disk\nmodule base() {\n    color(\"brown\")\n    difference() {\n        cylinder(d = 30, h = 4, $fn = 40);\n        translate([0, 0, -0.5])\n            cylinder(d = 26, h = 5, $fn = 40);\n    }\n}\n\n// Build the plant\nbase();\ntranslate([0, 0, 4])\n    stem();\n// Two leaf whorls\nleaf_whorl(15);\nleaf_whorl(30);\n// Berries slightly above top whorl\nberry_cluster(45);",
    "renders": true
  },
  {
    "plant": "agave",
    "openscad_code": "// Realistic Agave Plant - Medium Complexity\n// Designed for 3D printing with 2mm wall thickness\n\nmodule agave_leaf(length, width, thickness, angle) {\n    // Create a single agave leaf with curved shape\n    translate([0, 0, 0])\n    rotate([0, 0, angle])\n    rotate([0, -15, 0])\n    hull() {\n        // Base of leaf\n        translate([0, 0, 0])\n        scale([1, 0.8, 1])\n        sphere(d = thickness*2, $fn=8);\n        \n        // Tip of leaf\n        translate([length, 0, 0])\n        scale([0.2, 0.1, 0.1])\n        sphere(d = thickness*2, $fn=6);\n        \n        // Mid section\n        translate([length*0.6, width*0.3, 0])\n        scale([0.5, 0.3, 0.8])\n        sphere(d = thickness*2, $fn=6);\n        \n        translate([length*0.6, -width*0.3, 0])\n        scale([0.5, 0.3, 0.8])\n        sphere(d = thickness*2, $fn=6);\n    }\n}\n\nmodule leaf_spines(length, count) {\n    // Add decorative spines along leaf edges\n    for(i = [1:count]) {\n        spine_pos = length * i / (count + 1);\n        // Top spines\n        translate([spine_pos, 0, 0])\n        rotate([0, 90, 45])\n        scale([0.15, 0.15, 1])\n        cylinder(h = length * 0.08, d1 = 1.5, d2 = 0.5, $fn=3);\n        \n        // Bottom spines\n        translate([spine_pos, 0, 0])\n        rotate([0, 90, -45])\n        scale([0.15, 0.15, 1])\n        cylinder(h = length * 0.08, d1 = 1.5, d2 = 0.5, $fn=3);\n    }\n}\n\nmodule agave_rosette() {\n    // Main plant body\n    base_height = 15;\n    base_radius = 25;\n    \n    // Create central base\n    cylinder(h = base_height, r1 = base_radius, r2 = base_radius * 0.8, $fn=16);\n    \n    // Add soil base\n    translate([0, 0, -3])\n    cylinder(h = 5, r1 = base_radius * 1.2, r2 = base_radius * 1.1, $fn=16);\n    \n    // Generate leaves in spiral pattern\n    leaf_lengths = [35, 40, 38, 42, 36, 39, 37, 41];\n    leaf_widths = [8, 10, 9, 11, 8.5, 9.5, 8.8, 10.5];\n    \n    for(i = [0:7]) {\n        angle = i * 45;\n        height = base_height - 2;\n        leaf_length = leaf_lengths[i];\n        \n        translate([0, 0, height])\n        rotate([0, 0, angle])\n        translate([base_radius * 0.6, 0, 0])\n        agave_leaf(leaf_length, leaf_widths[i], 2.5, 0);\n        \n        // Add spine details to outer leaves\n        if(i > 3) {\n            translate([0, 0, height])\n            rotate([0, 0, angle])\n            translate([base_radius * 0.6 + leaf_length/2, 0, 0])\n            leaf_spines(leaf_length/2, 4);\n        }\n    }\n    \n    // Add central flower spike (young agave)\n    translate([0, 0, base_height + 5])\n    cylinder(h = 20, r1 = 2, r2 = 1, $fn=8);\n    \n    // Add small bud details\n    for(j = [0:3]) {\n        translate([0, 0, base_height + 10 + j*3])\n        rotate([0, 0, j*90])\n        translate([2, 0, 0])\n        scale([0.3, 0.3, 0.3])\n        sphere(d = 4, $fn=6);\n    }\n}\n\n// Main assembly\n$fn = 16;\nagave_rosette();",
    "renders": true
  },
  {
    "plant": "graptopetalum",
    "openscad_code": "// Graptopetalum succulent in realistic style\n// Medium complexity, 3D printable, ~100mm diameter\n\n$fn = 36;  // Smooth curves for printing\n\nmodule stem() {\n    // Central stem/trunk\n    cylinder(h = 20, r1 = 6, r2 = 4, center = false);\n}\n\nmodule rosette_layer(height, count, start_angle, scale_factor) {\n    // Generate a layer of leaves in rosette pattern\n    for (i = [0:count-1]) {\n        rotate([0, 0, start_angle + i * 360/count]) \n        translate([0, 25 * scale_factor, height]) \n        rotate([90, 0, 0]) \n        scale([scale_factor, scale_factor, 1]) \n        leaf();\n    }\n}\n\nmodule leaf() {\n    // Individual graptopetalum leaf - thick, pointed, slightly curved\n    difference() {\n        // Main leaf body\n        hull() {\n            translate([0, 0, 0]) sphere(r = 4);\n            translate([0, 15, 0]) sphere(r = 2.5);\n            translate([0, 30, 0]) sphere(r = 1);\n        }\n        \n        // Carve out underside for realistic thickness\n        translate([0, 10, -2]) \n        rotate([10, 0, 0]) \n        scale([0.8, 0.9, 0.5]) \n        cylinder(h = 25, r1 = 3.5, r2 = 0.5);\n        \n        // Add subtle tip\n        translate([0, 29, 0]) \n        rotate([0, 0, 0]) \n        scale([0.3, 0.3, 1]) \n        sphere(r = 3);\n    }\n}\n\nmodule roots() {\n    // Simple root system for base stability\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) \n        translate([4, 0, -5]) \n        rotate([30, 0, 0]) \n        cylinder(h = 10, r1 = 2, r2 = 0.5);\n    }\n}\n\nmodule pot() {\n    // Simple pot with drainage hole\n    difference() {\n        // Outer pot\n        cylinder(h = 25, r1 = 30, r2 = 25);\n        \n        // Hollow inside\n        translate([0, 0, 2]) \n        cylinder(h = 25, r1 = 27, r2 = 22);\n        \n        // Drainage hole\n        translate([0, 0, -1]) \n        cylinder(h = 5, r = 3);\n    }\n}\n\nmodule soil() {\n    // Soil surface\n    translate([0, 0, 2]) \n    scale([1, 1, 0.3]) \n    sphere(r = 27);\n}\n\n// Main assembly\nunion() {\n    // Pot and soil\n    pot();\n    translate([0, 0, 2]) soil();\n    \n    // Plant structure\n    translate([0, 0, 5]) {\n        // Central stem\n        stem();\n        \n        // Root system\n        translate([0, 0, 0]) roots();\n        \n        // Rosette layers - graptopetalum has tight spirals\n        rosette_layer(18, 5, 0, 1.0);      // Bottom layer\n        rosette_layer(22, 6, 30, 0.85);    // Middle layer\n        rosette_layer(26, 7, 15, 0.7);     // Top layer\n        rosette_layer(30, 4, 45, 0.5);     // Center cluster\n    }\n}",
    "renders": true
  },
  {
    "plant": "aeonium",
    "openscad_code": "// Aeonium Plant - Realistic Style\n// Medium complexity OpenSCAD model\n// Approximate size: 80mm tall, 60mm wide\n\nmodule stem() {\n    // Main stem - tapered cylinder\n    translate([0, 0, 5])\n        cylinder(h=20, r1=4, r2=2.5, $fn=12);\n    \n    // Stem segments\n    for(i = [0:5]) {\n        translate([0, 0, 5 + i*3])\n            rotate([0, 0, i*45])\n                cylinder(h=2, r=4.2, $fn=12);\n    }\n}\n\nmodule rosette_layer(radius, height, count, scale_factor) {\n    // Individual leaf shape for aeonium\n    module leaf() {\n        difference() {\n            // Main leaf body - elongated teardrop\n            scale([1, 2.5, 0.3])\n                rotate([90, 0, 0])\n                    sphere(r=radius/3, $fn=8);\n            \n            // Cut underside for flat bottom\n            translate([0, 0, -radius/6])\n                cube([radius*2, radius*2, radius], center=true);\n            \n            // Taper leaf tip\n            translate([0, radius/2 + 1, 0])\n                rotate([0, 0, 0])\n                    cylinder(h=radius, r=radius/3, $fn=8);\n        }\n        \n        // Add subtle vein\n        translate([0, -radius/4, 0.5])\n            scale([0.2, 1.5, 0.1])\n                rotate([90, 0, 0])\n                    sphere(r=radius/4, $fn=6);\n    }\n    \n    // Create rosette pattern\n    for(i = [0:count-1]) {\n        angle = i * (360/count);\n        rotate([0, 0, angle])\n            translate([radius * scale_factor, 0, height])\n                rotate([0, 0, -angle - 15])\n                    scale([1, 1, 1])\n                        leaf();\n    }\n}\n\nmodule aeonium_plant() {\n    // Base pot\n    difference() {\n        // Outer pot\n        cylinder(h=10, r=15, $fn=24);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n            cylinder(h=12, r=13, $fn=24);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h=12, r=2, $fn=8);\n    }\n    \n    // Soil surface\n    translate([0, 0, 9])\n        cylinder(h=2, r=14, $fn=24);\n    \n    // Main stem\n    translate([0, 0, 10])\n        stem();\n    \n    // Main rosette (top)\n    translate([0, 0, 28])\n        rosette_layer(radius=20, height=0, count=12, scale_factor=1);\n    \n    // Secondary rosettes\n    translate([0, 0, 25])\n        rosette_layer(radius=15, height=0, count=10, scale_factor=0.8);\n    \n    // Tertiary rosettes\n    translate([0, 0, 22])\n        rosette_layer(radius=10, height=0, count=8, scale_factor=0.6);\n    \n    // Offset rosettes on stem\n    translate([3, 2, 18])\n        rotate([15, 0, 45])\n            rosette_layer(radius=8, height=0, count=6, scale_factor=0.5);\n    \n    translate([-3, -2, 15])\n        rotate([-15, 0, -30])\n            rosette_layer(radius=6, height=0, count=5, scale_factor=0.4);\n}\n\n// Render the complete plant\naeonium_plant();",
    "renders": true
  },
  {
    "plant": "sempervivum",
    "openscad_code": "// Sempervivum (Hen-and-Chicks) – medium-complexity, 3-D-printable\n$fn = 60;               // smooth curves for printing\n\n// overall scale – 80 mm max diameter\nscale_factor = 1;\n\n// rosette parameters\npetals       = 12;      // number of leaves per tier\ntiers        = 4;       // stacked tiers\ntier_step    = 7;       // vertical spacing\nbase_d       = 60;      // widest tier diameter\nbase_t       = 2;       // safe wall thickness\n\nmodule leaf(r_outer, r_inner, h, twist=0) {\n    // single chubby succulent leaf, no overhangs\n    difference() {\n        union() {\n            // main body\n            translate([0,0,h/2])\n                scale([1, 1.3, 1])\n                sphere(d = r_outer);\n            // tapered base cylinder\n            cylinder(h = h, d1 = r_inner, d2 = r_outer, center=false);\n        }\n        // hollow out for 2 mm walls\n        translate([0,0,-1])\n            cylinder(h = h+2, d1 = r_inner-4, d2 = r_outer-4, center=false);\n    }\n}\n\nmodule tier(diameter, height, twist) {\n    // one tier of leaves\n    for(i = [0: petals-1])\n        rotate([0,0, i*(360/petals) + twist])\n            translate([diameter/2, 0, 0])\n                rotate([0, 50, 0])        // leaves angle upward\n                leaf(r_outer = 12, r_inner = 4, h = height, twist = twist);\n}\n\nmodule rosette() {\n    // stack tiers shrinking upward\n    for(t = [0: tiers-1]) {\n        shrink_factor = pow(0.75, t);\n        tier_d = base_d * shrink_factor;\n        tier_h = 8 * shrink_factor;\n        translate([0,0, t*tier_step])\n            tier(diameter = tier_d, height = tier_h, twist = t*10);\n    }\n}\n\nmodule tiny_offset() {\n    // small pedestal for print bed adhesion\n    cylinder(h = 3, d = base_d+4, center=false);\n}\n\n// main model\nunion() {\n    tiny_offset();\n    translate([0,0,3])\n        scale([scale_factor, scale_factor, scale_factor])\n            rosette();\n}",
    "renders": true
  },
  {
    "plant": "opuntia",
    "openscad_code": "// Opuntia (Prickly Pear) Cactus - Realistic Medium Complexity\n// Designed for 3D printing with 2mm wall thickness and minimal overhangs\n\n$fn = 50;  // Smooth curves for printing\n\n// Main parameters\nbase_height = 20;\npad_height = 8;\npad_width = 35;\npad_length = 50;\nnum_pads = 5;\nspine_length = 3;\nspine_diameter = 1.2;\n\n// Base trunk\nmodule base_trunk() {\n    difference() {\n        cylinder(h = base_height, r1 = 15, r2 = 12, center = false);\n        // Hollow core for saving material\n        cylinder(h = base_height - 2, r1 = 13, r2 = 10, center = false);\n    }\n}\n\n// Individual pad with spines\nmodule cactus_pad(width, length, height, angle) {\n    // Main pad body - elliptical cylinder\n    translate([0, 0, height/2]) {\n        rotate([0, 0, angle]) {\n            difference() {\n                scale([width/2, length/2, 1]) \n                    cylinder(h = height, r = 1, center = true);\n                // Hollow center\n                scale([(width-4)/2, (length-4)/2, 1]) \n                    cylinder(h = height + 1, r = 1, center = true);\n            }\n        }\n    }\n    \n    // Spines on top surface\n    for(i = [0:3]) {\n        for(j = [0:4]) {\n            if(i % 2 == j % 2) {\n                translate([\n                    (i - 1.5) * width/4,\n                    (j - 2) * length/4,\n                    height\n                ]) {\n                    rotate([90, 0, 0])\n                        cylinder(h = spine_length, r = spine_diameter/2, center = false);\n                }\n            }\n        }\n    }\n}\n\n// Create branching structure\nmodule opuntia() {\n    union() {\n        // Base\n        base_trunk();\n        \n        // First pad pair\n        translate([0, 0, base_height - 2]) {\n            rotate([0, 0, 45]) {\n                cactus_pad(pad_width, pad_length, pad_height, 0);\n                mirror([1, 0, 0]) {\n                    cactus_pad(pad_width, pad_length * 0.8, pad_height, 0);\n                }\n            }\n        }\n        \n        // Second level pads\n        translate([0, 0, base_height + pad_height]) {\n            rotate([0, 0, 135]) {\n                cactus_pad(pad_width * 0.9, pad_length * 0.9, pad_height, 0);\n                translate([20, 0, 0]) {\n                    rotate([0, 0, 30]) {\n                        cactus_pad(pad_width * 0.7, pad_length * 0.7, pad_height, 0);\n                    }\n                }\n            }\n        }\n        \n        // Third level pads\n        translate([10, 0, base_height + pad_height * 2]) {\n            rotate([0, 0, -30]) {\n                cactus_pad(pad_width * 0.8, pad_length * 0.8, pad_height, 0);\n                translate([-15, 15, 0]) {\n                    rotate([0, 0, 60]) {\n                        cactus_pad(pad_width * 0.6, pad_length * 0.6, pad_height, 0);\n                    }\n                }\n            }\n        }\n        \n        // Small pads on edges\n        translate([-15, 20, base_height + pad_height]) {\n            rotate([0, 0, 90]) {\n                cactus_pad(pad_width * 0.5, pad_length * 0.5, pad_height * 0.8, 0);\n            }\n        }\n        \n        translate([25, -15, base_height + pad_height * 1.5]) {\n            rotate([0, 0, -15]) {\n                cactus_pad(pad_width * 0.4, pad_length * 0.4, pad_height * 0.7, 0);\n            }\n        }\n    }\n}\n\n// Generate the plant\nopuntia();",
    "renders": true
  },
  {
    "plant": "mammillaria",
    "openscad_code": "// Realistic Mammillaria Cactus - Medium Complexity\n// Size: ~80mm tall, 3D printable with 2mm walls\n\nmodule mammillaria() {\n    // Main cactus body\n    difference() {\n        // Main rounded cylinder body\n        union() {\n            cylinder(h = 60, r1 = 25, r2 = 20, $fn = 64);\n            translate([0, 0, 55])\n                sphere(r = 22, $fn = 64);\n        }\n        \n        // Hollow out center for 3D printing\n        translate([0, 0, -5])\n            cylinder(h = 75, r1 = 23, r2 = 18, $fn = 64);\n    }\n    \n    // Tubercles (nipple-like projections)\n    for (i = [0:5]) {\n        rotate([0, 0, i * 72]) {\n            for (j = [0:7]) {\n                translate([0, 0, j * 7.5])\n                rotate([0, 0, j * 15])\n                translate([20 + sin(j) * 3, 0, 0])\n                    union() {\n                        // Main tubercle cone\n                        rotate([90, 0, 0])\n                            cylinder(h = 8, r1 = 4, r2 = 2.5, $fn = 12);\n                        \n                        // Hollow base of tubercle\n                        translate([0, 0, -1])\n                        rotate([90, 0, 0])\n                            cylinder(h = 10, r1 = 2.5, r2 = 1.5, $fn = 12);\n                    }\n            }\n        }\n    }\n    \n    // Areoles (white spots with spines)\n    for (i = [0:5]) {\n        rotate([0, 0, i * 72]) {\n            for (j = [0:7]) {\n                translate([0, 0, j * 7.5])\n                rotate([0, 0, j * 15])\n                translate([27 + sin(j) * 3, 0, 3])\n                    union() {\n                        // White areole pad\n                        color(\"white\")\n                        sphere(r = 1.5, $fn = 12);\n                        \n                        // Radial spines\n                        for (k = [0:7]) {\n                            rotate([0, 0, k * 45])\n                            rotate([85, 0, 0])\n                                cylinder(h = 6, r1 = 0.3, r2 = 0.1, $fn = 6);\n                        }\n                        \n                        // Central spines (longer)\n                        rotate([75, 0, 0])\n                            cylinder(h = 10, r1 = 0.4, r2 = 0.2, $fn = 6);\n                        rotate([80, 180, 0])\n                            cylinder(h = 9, r1 = 0.4, r2 = 0.2, $fn = 6);\n                    }\n            }\n        }\n    }\n    \n    // Pot base\n    translate([0, 0, -15])\n    difference() {\n        // Outer pot\n        cylinder(h = 15, r1 = 30, r2 = 28, $fn = 64);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = 18, r1 = 27, r2 = 25, $fn = 64);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h = 3, r = 3, $fn = 16);\n    }\n    \n    // Soil surface\n    translate([0, 0, -14.5])\n    difference() {\n        cylinder(h = 2, r = 27.5, $fn = 64);\n        translate([0, 0, -1])\n            cylinder(h = 4, r = 24, $fn = 64);\n    }\n    \n    // Optional flower on top\n    translate([0, 0, 77])\n    union() {\n        // Flower center\n        color(\"yellow\")\n        sphere(r = 3, $fn = 16);\n        \n        // Petals\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30])\n            translate([4, 0, 0])\n            rotate([90, 0, 0])\n            scale([1, 2, 0.5])\n                color(\"pink\")\n                sphere(r = 2, $fn = 8);\n        }\n    }\n}\n\n// Render the plant\nmammillaria();",
    "renders": true
  },
  {
    "plant": "rebutia",
    "openscad_code": "// Rebutia cactus - realistic medium complexity\n// Base parameters\nbase_height = 15;\npot_d = 60;\nplant_height = 80;\nrib_count = 13;\nspine_rows = 8;\n\n// Pot module\nmodule pot() {\n    difference() {\n        cylinder(h=base_height, d1=pot_d, d2=pot_d*0.9, $fn=60);\n        translate([0, 0, 2])\n            cylinder(h=base_height, d1=pot_d-4, d2=pot_d*0.9-4, $fn=60);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, base_height-2])\n        sphere(d=pot_d*0.95, $fn=60);\n}\n\n// Single spine\nmodule spine(len=3) {\n    translate([0, 0, -len/2])\n        cylinder(h=len, d1=0.4, d2=0.2, $fn=6);\n}\n\n// Spine cluster\nmodule spine_cluster() {\n    for(i=[0:5]) {\n        rotate([0, 0, i*60]) {\n            translate([2, 0, 0])\n                rotate([90, 0, 0])\n                    spine(3);\n            translate([1.5, 0, 0])\n                rotate([90, 0, 30])\n                    spine(2.5);\n            translate([1.5, 0, 0])\n                rotate([90, 0, -30])\n                    spine(2.5);\n        }\n    }\n}\n\n// Single rib\nmodule rib() {\n    difference() {\n        union() {\n            // Main rib body\n            translate([0, 0, -plant_height/2])\n                cylinder(h=plant_height, d1=30, d2=25, $fn=6);\n            \n            // Rounded top\n            translate([0, 0, plant_height/2])\n                sphere(d=30, $fn=6);\n        }\n        \n        // Hollow center\n        translate([0, 0, -plant_height/2-5])\n            cylinder(h=plant_height+10, d=26, $fn=6);\n    }\n}\n\n// Main cactus body\nmodule cactus_body() {\n    union() {\n        for(i=[0:rib_count-1]) {\n            rotate([0, 0, i*(360/rib_count)]) {\n                rib();\n                \n                // Spines along each rib\n                for(j=[1:spine_rows-1]) {\n                    translate([0, 0, -plant_height/2 + j*(plant_height/spine_rows)])\n                        spine_cluster();\n                }\n            }\n        }\n    }\n}\n\n// Offset shoot\nmodule offset_shoot() {\n    translate([12, 5, plant_height/2-10]) {\n        rotate([15, 0, 30]) {\n            scale([0.6, 0.6, 0.6]) {\n                cactus_body();\n            }\n        }\n    }\n}\n\n// Flower\nmodule flower() {\n    translate([0, 0, plant_height/2+8]) {\n        // Flower tube\n        cylinder(h=8, d1=5, d2=3, $fn=20);\n        \n        // Petals\n        for(i=[0:11]) {\n            rotate([0, 0, i*30]) {\n                translate([4, 0, 6])\n                    rotate([90, 0, 0])\n                        scale([1, 0.5, 1])\n                            cylinder(h=6, d1=3, d2=0.5, $fn=20);\n            }\n        }\n        \n        // Stamen tips\n        for(i=[0:5]) {\n            rotate([0, 0, i*72]) {\n                translate([1.5, 0, 8])\n                    sphere(d=0.8);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    pot();\n    soil();\n    translate([0, 0, base_height-5])\n        cactus_body();\n    translate([0, 0, base_height-5])\n        offset_shoot();\n    translate([8, 3, base_height-5+plant_height/2-5])\n        scale([0.4, 0.4, 0.4])\n            offset_shoot();\n    translate([0, 0, base_height-5])\n        flower();\n}",
    "renders": true
  },
  {
    "plant": "gymnocalycium",
    "openscad_code": "// Gymnocalycium mihanovichii – 3D-printable medium-detail model\n// ~80 mm Ø, 55 mm H – printable without supports\n\n// main parameters\nbase_r = 40;        // main body radius\nbase_h = 35;        // main body height\nrib_n = 8;          // number of ribs\nareole_spacing = 8; // vertical spacing between areoles\nspine_len = 4.5;    // spine length\nwall_t = 2;         // printable wall thickness\n\n// root module\nmodule gymnocalycium() {\n    // main cactus body\n    difference() {\n        union() {\n            // slightly flattened sphere as core\n            scale([1, 1, 0.9])\n                sphere(d = base_r * 2);\n            // cylindrical base for bottom flatness\n            cylinder(h = wall_t, r = base_r, $fn = 60);\n        }\n        // hollow inside for material saving\n        translate([0, 0, -1])\n            sphere(d = base_r * 2 - wall_t * 2);\n    }\n\n    // ribs\n    for (i = [0 : rib_n - 1]) {\n        rotate([0, 0, i * 360 / rib_n])\n            rib();\n    }\n\n    // soil disc\n    translate([0, 0, -wall_t])\n        cylinder(h = wall_t * 2, r = base_r + wall_t, $fn = 60);\n}\n\n// single rib with areoles and spines\nmodule rib() {\n    // rib body (tapering wedge)\n    hull() {\n        translate([base_r - 4, 0, base_h / 2])\n            cube([4, 0.1, base_h], center = true);\n        translate([base_r - 8, 0, base_h / 2])\n            cube([8, 0.1, base_h * 0.8], center = true);\n    }\n\n    // areoles and spines along rib\n    for (z = [base_h / 4 : areole_spacing : base_h - 5]) {\n        areole_pair(z);\n    }\n}\n\n// pair of areoles with spines\nmodule areole_pair(z) {\n    translate([base_r - 3, 0, z]) {\n        // areole\n        color(\"white\")\n            sphere(d = 2.5, $fn = 12);\n        // spines\n        for (a = [-35, 35]) {\n            rotate([0, a, 0])\n                translate([1.5, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = spine_len, r = 0.4, $fn = 8);\n        }\n    }\n}\n\n// render\ngymnocalycium();",
    "renders": true
  },
  {
    "plant": "notocactus",
    "openscad_code": "// Notocactus (Parodia) in realistic style – medium complexity\n// Height ~90 mm, Ø ~65 mm. 2 mm wall thickness, no over-hhangs.\n\n// ---------------- Parameters ----------------\nbody_h   = 65;      // main stem height\nbody_r   = 30;      // stem radius\nribs     = 16;      // number of vertical ribs\nrib_w    = 4;       // rib width at surface\nrib_d    = 2.5;     // rib depth\nareole_d = 1.5;     // areole depth\nspike_l  = 5;       // spine length\npot_h    = 25;      // pot height\npot_r    = 35;      // pot outer radius\nwall     = 2;       // printable wall thickness\n\n// ---------------- Modules ----------------\nmodule stem_rib(){\n    difference(){\n        union(){\n            // rib body\n            translate([0,0,body_h/2])\n                scale([1, rib_w/body_r, 1])\n                    sphere(d=body_r*2, $fn=50);\n            // fillet to avoid overhang\n            cylinder(h=body_h, r1=body_r+rib_d-wall, r2=body_r+rib_d, center=true);\n        }\n        // hollow core\n        cylinder(h=body_h+2, r=body_r-wall, center=true);\n    }\n}\n\nmodule areole_ring(z){\n    for(i=[0:ribs-1]){\n        rotate([0,0,i*360/ribs])\n            translate([body_r+rib_d-areole_d/2, 0, z])\n                sphere(d=areole_d, $fn=8);\n    }\n}\n\nmodule spines(z){\n    for(i=[0:ribs-1]){\n        rotate([0,0,i*360/ribs])\n            translate([body_r+rib_d+spike_l/2, 0, z])\n                rotate([90,0,0])\n                    cylinder(h=spike_l, r=0.4, $fn=6);\n    }\n}\n\nmodule stem(){\n    difference(){\n        union(){\n            // core cylinder\n            cylinder(h=body_h, r=body_r, center=true, $fn=50);\n            // ribs\n            for(i=[0:ribs-1])\n                rotate([0,0,i*360/ribs])\n                    stem_rib();\n            // top dome\n            translate([0,0,body_h/2])\n                sphere(d=body_r*2, $fn=50);\n        }\n        // hollow inside\n        cylinder(h=body_h+4, r=body_r-wall, center=true, $fn=50);\n        translate([0,0,body_h/2+1])\n            sphere(d=(body_r-wall)*2, $fn=50);\n    }\n\n    // areoles and spines\n    for(z=[-body_h/2+5:7:body_h/2-5]){\n        areole_ring(z);\n        spines(z);\n    }\n}\n\nmodule pot(){\n    difference(){\n        union(){\n            // outer pot\n            cylinder(h=pot_h, r=pot_r, $fn=50);\n            // bottom lip\n            translate([0,0,-pot_h/2])\n                cylinder(h=4, r1=pot_r, r2=pot_r+3, $fn=50);\n        }\n        // cavity\n        translate([0,0,-wall])\n            cylinder(h=pot_h-wall, r=pot_r-wall, $fn=50);\n    }\n}\n\n// ---------------- Assembly ----------------\nstem();\ntranslate([0,0,-body_h/2-pot_h/2])\n    pot();",
    "renders": true
  },
  {
    "plant": "parodia",
    "openscad_code": "// Parodia cactus - realistic medium complexity\n// Overall height: 90 mm, base diameter: 60 mm\n\n$fn = 36;  // Smooth curves for printing\n\n// Main parameters\nbase_r = 30;\nbody_h = 60;\nrib_count = 16;\nrib_width = 6;\nspine_length = 3;\nareole_size = 2.5;\noffset = 0.2;  // Ensure printable wall thickness\n\nmodule parodia() {\n    // Central body with ribs\n    union() {\n        // Core cylinder\n        cylinder(h = body_h, r = base_r, center = false);\n        \n        // Ribs around the body\n        for (i = [0 : rib_count - 1]) {\n            rotate([0, 0, i * 360 / rib_count])\n                translate([base_r - rib_width / 2 - offset, 0, 0])\n                    cube([rib_width, base_r * 2, body_h], center = true);\n        }\n        \n        // Top dome\n        translate([0, 0, body_h])\n            scale([1, 1, 0.7])\n                sphere(r = base_r + offset);\n    }\n    \n    // Areoles with spines\n    module areole_spines(z_pos, angle) {\n        // Areole pad\n        translate([0, 0, z_pos])\n            rotate([0, 90, 0])\n                sphere(r = areole_size);\n        \n        // Spines radiating from areole\n        for (j = [0 : 7]) {\n            rotate([0, 0, j * 45])\n                translate([0, areole_size, z_pos])\n                    rotate([angle, 0, 0])\n                        cylinder(h = spine_length, r = 0.3);\n        }\n    }\n    \n    // Place areoles along ribs\n    for (i = [0 : rib_count - 1]) {\n        rib_angle = i * 360 / rib_count;\n        for (z = [10 : 10 : body_h - 10]) {\n            rotate([0, 0, rib_angle])\n                translate([base_r + rib_width / 2, 0, 0])\n                    rotate([0, 0, rib_angle])\n                        areole_spines(z, 30);\n        }\n    }\n    \n    // Central crown of flowers\n    module flower() {\n        // Flower base\n        translate([0, 0, body_h + base_r * 0.7])\n            cylinder(h = 5, r1 = 8, r2 = 10);\n        \n        // Petals\n        for (k = [0 : 11]) {\n            rotate([0, 0, k * 30])\n                translate([0, 5, body_h + base_r * 0.7 + 2.5])\n                    rotate([30, 0, 0])\n                        scale([1, 0.6, 0.2])\n                            sphere(r = 6);\n        }\n        \n        // Center stamens\n        translate([0, 0, body_h + base_r * 0.7 + 7])\n            for (m = [0 : 5 : 180]) {\n                rotate([m, 0, 0])\n                    cylinder(h = 5, r = 0.3);\n            }\n    }\n    \n    flower();\n    \n    // Base platform for printing stability\n    translate([0, 0, -2])\n        cylinder(h = 2, r = base_r + 5);\n}\n\n// Render the complete plant\nparodia();",
    "renders": true
  },
  {
    "plant": "echinopsis",
    "openscad_code": "// Echinopsis (Sea-Urchin Cactus) – medium complexity, 3D-printable\n// Overall height: 110 mm, max diameter: 80 mm\n// Wall thickness: 2 mm everywhere\n\n$fn = 36;\n\n// Main body (barrel-shaped)\nmodule body() {\n    difference() {\n        // Outer skin\n        scale([1, 1, 0.9])\n            cylinder(h = 60, d1 = 80, d2 = 75, center = true);\n\n        // Hollow core (2 mm wall)\n        translate([0, 0, 2])\n            scale([1, 1, 0.9])\n                cylinder(h = 62, d1 = 76, d2 = 71, center = true);\n    }\n}\n\n// Single rib\nmodule rib() {\n    // Tapered vertical rib\n    linear_extrude(height = 55, center = true, scale = [0.3, 1])\n        offset(delta = 1.5)\n            polygon(points = [[0, -30], [5, 0], [0, 30]]);\n}\n\n// All ribs around body\nmodule ribs() {\n    for (i = [0 : 15]) {\n        rotate([0, 0, i * (360 / 16)])\n            translate([0, 40, 0])\n                rib();\n    }\n}\n\n// Single areole cluster (spine base)\nmodule areole() {\n    difference() {\n        // Small raised disk\n        cylinder(h = 2, d = 4, center = true);\n        translate([0, 0, 1])\n            cylinder(h = 2.5, d = 2, center = true); // hollow centre\n    }\n}\n\n// Spines radiating from an areole\nmodule spine_cluster() {\n    union() {\n        for (a = [0 : 60 : 300]) {\n            rotate([0, 0, a])\n                for (e = [15 : 15 : 45]) {\n                    rotate([e, 0, 0])\n                        cylinder(h = 12, d1 = 1.2, d2 = 0.4, center = false);\n                }\n        }\n    }\n}\n\n// Place areoles + spines along ribs\nmodule areole_line() {\n    for (z = [-25 : 10 : 25]) {\n        translate([0, 0, z])\n            union() {\n                areole();\n                translate([0, 2.5, 0])\n                    spine_cluster();\n            }\n    }\n}\n\n// All areole lines on every rib\nmodule all_areoles() {\n    for (i = [0 : 15]) {\n        rotate([0, 0, i * (360 / 16) + 11.25]) // offset between ribs\n            translate([0, 40, 0])\n                areole_line();\n    }\n}\n\n// Crown of flowers\nmodule flower() {\n    color(\"lightpink\")\n        // Petal ring\n        for (a = [0 : 45 : 315]) {\n            rotate([0, 0, a])\n                translate([0, 15, 0])\n                    scale([1, 2.5, 0.3])\n                        sphere(d = 10);\n        }\n    // Central tube\n    translate([0, 0, 3])\n        cylinder(h = 10, d = 8);\n}\n\n// Top soil disc (printing base)\nmodule soil_disc() {\n    cylinder(h = 2, d = 82, center = false);\n}\n\n// Assembly\nunion() {\n    soil_disc();\n    translate([0, 0, 1])\n        body();\n    ribs();\n    all_areoles();\n    translate([0, 0, 32])\n        flower();\n}",
    "renders": true
  },
  {
    "plant": "astrophytum",
    "openscad_code": "// Astrophytum cactus (medium realism)\n// Overall height ≈ 95 mm, base Ø ≈ 60 mm – 3D-print friendly\n\n$fn = 36;                // smooth curves\nwall = 2;                // printable wall thickness\n\n// Main body – 8-ribbed sphere-like shape\nmodule body() {\n    difference() {\n        sphere(d = 60);          // outer shell\n        translate([0,0,-30])\n            sphere(d = 58);      // hollow bottom\n    }\n    \n    // 8 vertical ribs (realistic fluting)\n    for (i=[0:7]) {\n        rotate([0,0,i*45])\n            translate([29,0,-30])\n                cube([wall, 6, 60], center=true);\n    }\n}\n\n// Woolly areole pads on each rib\nmodule areoles(height) {\n    for (i=[0:7]) {\n        rotate([0,0,i*45])\n            for (z=[-20:10:20]) {\n                translate([29,0,z])\n                    sphere(d = 4);\n                translate([29,0,z+4])\n                    sphere(d = 3);\n            }\n    }\n}\n\n// Crown depression where new growth starts\nmodule crown() {\n    difference() {\n        translate([0,0,30])\n            cylinder(h = 8, d1 = 30, d2 = 20, center=true);\n        translate([0,0,30])\n            cylinder(h = 10, d1 = 26, d2 = 16, center=true);\n    }\n}\n\n// Small radial spines (very short in astrophytum)\nmodule spines() {\n    for (i=[0:7]) {\n        rotate([0,0,i*45])\n            for (z=[-20:10:20]) {\n                translate([33,0,z])\n                    rotate([90,0,0])\n                        cylinder(h = 6, d = 1);\n            }\n    }\n}\n\n// Optional display tray base for printing stability\nmodule tray() {\n    difference() {\n        cylinder(h = 4, d = 70);\n        translate([0,0,-1])\n            cylinder(h = 6, d = 66);\n    }\n}\n\n// Assemble the plant\nunion() {\n    tray();\n    translate([0,0,2])\n        body();\n    translate([0,0,2])\n        areoles(60);\n    translate([0,0,2])\n        crown();\n    translate([0,0,2])\n        spines();\n}",
    "renders": true
  },
  {
    "plant": "ferocactus",
    "openscad_code": "// Ferocactus (Barrel Cactus) - Realistic Medium Complexity\n// 3D printable, ~90 mm tall\n\n// Stem parameters\nstem_r = 25;            // main barrel radius\nstem_h = 70;            // barrel height\nstem_wall = 2;          // wall thickness for printing\n\n// Rib parameters\nribs = 13;              // typical rib count for ferocactus\nrib_w = 6;              // rib width at base\nrib_h = 2.5;            // rib height from stem surface\n\n// Areole parameters\nareole_d = 2.2;         // areole diameter\nareole_spacing = 12;    // vertical spacing between areoles\n\n// Spine parameters\nspine_L = 8;            // central spine length\nspine_r = 0.5;          // spine radius\nspine_angle = 20;       // spine upward tilt\n\n// Crown parameters\ncrown_r = 3;            // crown spine base radius\ncrown_L = 12;           // crown spine length\n\n// Base stand\nbase_h = 5;\nbase_r = stem_r + 3;\n\nmodule stem_core() {\n    // Hollow barrel core for printing\n    difference() {\n        cylinder(h = stem_h, r = stem_r, $fn = 60);\n        translate([0, 0, -1])\n            cylinder(h = stem_h + 2, r = stem_r - stem_wall, $fn = 60);\n    }\n}\n\nmodule ribs() {\n    // Generate vertical ribs around stem\n    for (i = [0 : ribs - 1]) {\n        rotate([0, 0, i * 360 / ribs])\n            translate([stem_r - rib_w/2, 0, 0])\n                cube([rib_w, stem_h, rib_h], center = true);\n    }\n}\n\nmodule areole_row(z) {\n    // Single row of areoles at height z\n    for (i = [0 : ribs - 1]) {\n        rotate([0, 0, i * 360 / ribs])\n            translate([stem_r - 1, 0, z])\n                sphere(d = areole_d, $fn = 12);\n    }\n}\n\nmodule spines() {\n    // Central spines from each areole\n    for (z = [stem_h/2 : -areole_spacing : -stem_h/2 + 10]) {\n        for (i = [0 : ribs - 1]) {\n            rotate([0, 0, i * 360 / ribs])\n                translate([stem_r, 0, z])\n                    rotate([0, 90 - spine_angle, 0])\n                        cylinder(h = spine_L, r = spine_r, $fn = 8);\n        }\n    }\n}\n\nmodule crown_spines() {\n    // Dense crown spines at top\n    for (i = [0 : 8]) {\n        rotate([0, 0, i * 45])\n            translate([crown_r, 0, stem_h/2 - 5])\n                rotate([0, 90 - 30, 0])\n                    cylinder(h = crown_L, r = spine_r * 1.2, $fn = 8);\n    }\n}\n\nmodule base() {\n    // Stable base for printing\n    cylinder(h = base_h, r = base_r, $fn = 60);\n}\n\n// Main assembly\nunion() {\n    // Base\n    base();\n    \n    // Stem\n    translate([0, 0, base_h])\n        union() {\n            stem_core();\n            ribs();\n        }\n    \n    // Areoles and spines\n    translate([0, 0, base_h])\n        union() {\n            for (z = [stem_h/2 - 5 : -areole_spacing : -stem_h/2 + 10])\n                areole_row(z);\n            spines();\n            crown_spines();\n        }\n}",
    "renders": true
  },
  {
    "plant": "cleistocactus",
    "openscad_code": "// Cleistocactus strausii (Silver Torch Cactus) - Realistic style, medium complexity\n\n// Parameters\nbase_d = 30;            // Base diameter for 3D print stability\npot_h = 25;             // Pot height\ncactus_h = 100;         // Total cactus height\nstem_d = 8;             // Stem diameter\nrib_count = 16;         // Number of ribs (realistic count)\nspine_count = 12;       // Spines per areole\nspine_len = 2.5;        // Spine length\nwall = 2;               // Wall thickness for 3D printing\n\n// Pot module\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_h, d1=base_d, d2=base_d*0.9, $fn=64);\n        \n        // Inner cavity\n        translate([0, 0, wall])\n            cylinder(h=pot_h-wall, d1=base_d-wall*2, d2=base_d*0.9-wall*2, $fn=64);\n    }\n    \n    // Drainage holes\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([base_d/2-5, 0, wall])\n                rotate([90, 0, 0])\n                    cylinder(h=wall*2, d=3, $fn=16);\n    }\n}\n\n// Single spine\nmodule spine() {\n    color(\"darkgray\")\n    translate([0, 0, -spine_len/2])\n        scale([0.3, 0.3, 1])\n            sphere(d=spine_len, $fn=8);\n}\n\n// Areole with spines\nmodule areole() {\n    // Areole pad\n    color(\"lightgreen\")\n    translate([0, 0, -0.5])\n        sphere(d=1.5, $fn=12);\n    \n    // Spines in radial pattern\n    for(i=[0:spine_count-1]) {\n        rotate([0, 0, i*(360/spine_count)])\n            translate([1.2, 0, 0])\n                rotate([45, 0, 0])\n                    spine();\n    }\n}\n\n// Single rib\nmodule rib() {\n    // Main rib body\n    color(\"darkgreen\")\n    linear_extrude(height=cactus_h, center=false)\n        offset(delta=wall)\n            polygon(points=[\n                [0, 0],\n                [stem_d/2, 0],\n                [stem_d/2+3, cactus_h*0.3],\n                [stem_d/2+2, cactus_h*0.7],\n                [stem_d/2-1, cactus_h],\n                [0, cactus_h]\n            ]);\n}\n\n// Main cactus stem\nmodule cactus_stem() {\n    // Central core\n    color(\"darkgreen\")\n    cylinder(h=cactus_h, d=stem_d, $fn=rib_count);\n    \n    // Vertical ribs\n    for(i=[0:rib_count-1]) {\n        rotate([0, 0, i*(360/rib_count)])\n            rib();\n    }\n    \n    // Areoles along ribs\n    for(i=[0:rib_count-1]) {\n        for(j=[1:5]) {\n            rotate([0, 0, i*(360/rib_count)])\n                translate([stem_d/2+1, 0, j*cactus_h/6])\n                    areole();\n        }\n    }\n}\n\n// Soil surface\nmodule soil() {\n    color(\"brown\")\n    translate([0, 0, pot_h-wall])\n        cylinder(h=wall, d=base_d*0.9, $fn=64);\n}\n\n// Assembly\nunion() {\n    // Pot\n    pot();\n    \n    // Soil\n    soil();\n    \n    // Cactus stem\n    translate([0, 0, pot_h-wall])\n        cactus_stem();\n}",
    "renders": true
  },
  {
    "plant": "espostoa",
    "openscad_code": "// Espostoa cactus - realistic medium complexity\n// Overall height ~120mm, suitable for 3D printing\n\nmodule cylinder_segment(h, r1, r2, fn=32) {\n    cylinder(h=h, r1=r1, r2=r2, $fn=fn);\n}\n\n// Main cactus body with ribs\nmodule cactus_body() {\n    union() {\n        // Central core\n        cylinder_segment(h=80, r1=15, r2=18);\n        \n        // Vertical ribs (12 ribs)\n        for(i=[0:11]) {\n            rotate([0, 0, i*30]) \n                translate([12, 0, 0])\n                    cube([8, 2, 80], center=true);\n        }\n        \n        // Top growing tip\n        translate([0, 0, 80])\n            sphere(r=8, $fn=32);\n    }\n}\n\n// Areoles with spines\nmodule areole_spines() {\n    // Main body areoles\n    for(h=[20:15:70]) {\n        for(r=[0:30:330]) {\n            rotate([0, 0, r]) {\n                translate([18, 0, h]) {\n                    // Areole pad\n                    color(\"tan\")\n                        sphere(r=1.5, $fn=16);\n                    \n                    // Radial spines\n                    for(s=[0:30:150]) {\n                        rotate([s, 90, 0])\n                            cylinder(h=8, r1=0.2, r2=0.1, $fn=8);\n                    }\n                    \n                    // Central spines\n                    rotate([0, 90, 0])\n                        cylinder(h=12, r1=0.3, r2=0.1, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Base roots\nmodule cactus_base() {\n    difference() {\n        // Main root ball\n        translate([0, 0, -10])\n            cylinder_segment(h=15, r1=12, r2=20);\n        \n        // Hollow for weight reduction\n        translate([0, 0, -8])\n            cylinder_segment(h=11, r1=8, r2=16);\n    }\n}\n\n// Pot with drainage\nmodule cactus_pot() {\n    difference() {\n        union() {\n            // Outer pot\n            cylinder(h=25, r1=30, r2=27, $fn=64);\n            translate([0, 0, 25])\n                cylinder(h=5, r1=27, r2=30, $fn=64);\n        }\n        \n        // Inner cavity\n        cylinder(h=28, r1=26, r2=23, $fn=64);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h=3, r1=4, r2=4, $fn=16);\n    }\n}\n\n// Soil surface\nmodule soil_surface() {\n    translate([0, 0, 28])\n        cylinder(h=3, r1=25, r2=25, $fn=64);\n}\n\n// White wool covering\nmodule white_wool() {\n    for(h=[25:10:75]) {\n        for(r=[0:45:315]) {\n            rotate([0, 0, r]) {\n                translate([18, 0, h])\n                    sphere(r=2 + 0.5*sin(h*5), $fn=8);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Pot and soil\n    cactus_pot();\n    translate([0, 0, 0])\n        soil_surface();\n    \n    // Cactus parts\n    translate([0, 0, 31])\n        union() {\n            cactus_base();\n            cactus_body();\n            white_wool();\n            areole_spines();\n        }\n}",
    "renders": true
  },
  {
    "plant": "oreocereus",
    "openscad_code": "// Oreocereus cactus - realistic style, medium complexity\n// Height: ~120mm, Base diameter: ~50mm\n\n$fn = 32;\n\n// Main parameters\nbase_height = 25;\nstem_segments = 6;\nsegment_height = 15;\nstem_diameter = 50;\nspine_length = 8;\nwool_clusters = 20;\nwall_thickness = 2;\n\nmodule oreocereus() {\n    difference() {\n        union() {\n            // Base pot\n            cylinder(h=base_height, d1=stem_diameter+20, d2=stem_diameter+15, center=false);\n            \n            // Main stem\n            translate([0,0,base_height]) {\n                for(i=[0:stem_segments-1]) {\n                    translate([0,0,i*segment_height]) {\n                        stem_segment(stem_diameter - i*3, segment_height);\n                    }\n                }\n            }\n            \n            // Top dome\n            translate([0,0,base_height+(stem_segments*segment_height)]) {\n                sphere(d=stem_diameter - (stem_segments-1)*3);\n            }\n        }\n        \n        // Hollow out base\n        translate([0,0,wall_thickness]) {\n            cylinder(h=base_height-wall_thickness, d1=stem_diameter+20-(wall_thickness*2), d2=stem_diameter+15-(wall_thickness*2));\n        }\n    }\n    \n    // Spines and wool\n    translate([0,0,base_height]) {\n        for(i=[0:stem_segments-1]) {\n            for(j=[0:wool_clusters]) {\n                rotate([0,0,j*360/wool_clusters]) {\n                    translate([0,(stem_diameter-i*3)/2,i*segment_height+segment_height/2]) {\n                        spine_cluster();\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule stem_segment(diameter, height) {\n    difference() {\n        cylinder(h=height, d=diameter);\n        \n        // Ribs\n        for(i=[0:11]) {\n            rotate([0,0,i*30]) {\n                translate([(diameter/2)-wall_thickness-2, -wall_thickness/2, 0]) {\n                    cube([wall_thickness+4, wall_thickness, height]);\n                }\n            }\n        }\n    }\n}\n\nmodule spine_cluster() {\n    // Wool cluster\n    color(\"white\") {\n        sphere(d=6);\n    }\n    \n    // Central spines\n    color(\"darkgray\") {\n        for(i=[0:2]) {\n            rotate([0,i*120,15]) {\n                translate([0,0,0]) {\n                    cylinder(h=spine_length, d=0.5, center=true);\n                }\n            }\n        }\n    }\n    \n    // Radial spines\n    for(i=[0:7]) {\n        rotate([0,0,i*45]) {\n            rotate([0,0,5]) {\n                translate([0,0,0]) {\n                    cylinder(h=spine_length*0.7, d=0.3, center=true);\n                }\n            }\n        }\n    }\n}\n\noreocereus();",
    "renders": true
  },
  {
    "plant": "cereus",
    "openscad_code": "// Realistic 3D-printable Cereus cactus\n// ~120 mm tall, 2 mm wall thickness, no overhangs > 45°\n\n$fn = 36;  // smooth curves\nwall = 2;  // printable wall thickness\n\n// Main stem\nmodule stem(h = 100, r = 12) {\n    // hollow cylinder with ribs\n    difference() {\n        cylinder(h = h, r = r, center = false);\n        translate([0, 0, wall])\n            cylinder(h = h - 2*wall, r = r - wall, center = false);\n    }\n    // vertical ribs every 30°\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([r - wall/2, 0, 0])\n                cube([wall, 2, h], center = true);\n    }\n}\n\n// Areole pad (where spines grow)\nmodule areole_pad(r = 4) {\n    difference() {\n        sphere(r);\n        sphere(r - wall);\n    }\n}\n\n// Cluster of radial spines\nmodule spine_cluster(len = 6) {\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            rotate([30, 0, 0])\n                cylinder(h = len, r1 = 0.5, r2 = 0.2, center = false);\n    }\n}\n\n// Single branch segment\nmodule branch_segment(h = 30, r = 7) {\n    // tapered branch hollow\n    difference() {\n        cylinder(h = h, r1 = r, r2 = r * 0.7, center = false);\n        translate([0, 0, wall])\n            cylinder(h = h - wall, r1 = r - wall, r2 = (r - wall) * 0.7, center = false);\n    }\n    // 5-6 ribs along branch\n    for(i = [0:60:300]) {\n        rotate([0, 0, i])\n            translate([r - wall/2, 0, 0])\n                cube([wall, 2, h], center = true);\n    }\n}\n\n// Main cactus assembly\nunion() {\n    // primary stem\n    stem(100, 12);\n    \n    // branch 1\n    translate([0, 0, 70])\n        rotate([0, 0, 30])\n            branch_segment(40, 8);\n    \n    // branch 2\n    translate([0, 0, 50])\n        rotate([0, 0, -45])\n            branch_segment(35, 7);\n    \n    // branch 3\n    translate([0, 0, 80])\n        rotate([0, 0, 150])\n            branch_segment(30, 6);\n    \n    // areoles along ribs\n    for(z = [10:20:90]) {\n        for(a = [0:60:300]) {\n            rotate([0, 0, a])\n                translate([12 - 1, 0, z]) {\n                    areole_pad(3);\n                    spine_cluster(5);\n                }\n        }\n    }\n    \n    // areoles on branches\n    for(z = [5:15:35]) {\n        translate([0, 0, 70])\n            rotate([0, 0, 30])\n                translate([8 - 1, 0, z]) {\n                    areole_pad(2.5);\n                    spine_cluster(4);\n                }\n    }\n}",
    "renders": true
  },
  {
    "plant": "stapelia",
    "openscad_code": "// Stapelia Plant - Realistic Style, Medium Complexity\n// Characteristic star-shaped flowers with textured stems\n\n// Parameters\nstem_height = 40;\nstem_diameter = 8;\nflower_size = 25;\npetal_count = 5;\nstem_segments = 6;\n\nmodule stapelia_plant() {\n    // Main stem\n    color(\"darkgreen\") {\n        for(i = [0:stem_segments-1]) {\n            translate([0, 0, i * 7]) \n                rotate([0, 0, i * 30])\n                stem_segment(stem_diameter - i * 0.8);\n        }\n    }\n    \n    // Flowers at stem tips\n    translate([0, 0, stem_segments * 7 - 5])\n        rotate([0, 0, 45])\n        stapelia_flower(flower_size);\n    \n    // Side branches\n    translate([0, 0, 25])\n        rotate([20, 0, 30])\n        side_branch();\n    \n    translate([0, 0, 15])\n        rotate([-25, 0, -45])\n        side_branch();\n}\n\nmodule stem_segment(diameter) {\n    // Segmented stem with ribs\n    difference() {\n        cylinder(h = 8, d = diameter, $fn = 12);\n        \n        // Create ribs\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([-diameter/2 - 1, -1, 2])\n                cube([diameter + 2, 2, 6]);\n        }\n    }\n    \n    // Small spines\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([diameter/2, 0, 4])\n            rotate([90, 0, 0])\n            cylinder(h = 1.5, d1 = 0.5, d2 = 0, $fn = 6);\n    }\n}\n\nmodule stapelia_flower(size) {\n    // Flower center disk\n    color(\"maroon\") {\n        cylinder(h = 2, d = size * 0.4, $fn = 32);\n        \n        // Petals\n        for(i = [0:petal_count-1]) {\n            rotate([0, 0, i * 72])\n                translate([size/2 - 3, 0, 0])\n                rotate([0, 90, 0])\n                petal(size);\n        }\n        \n        // Corona (center ring)\n        translate([0, 0, 1.5])\n            cylinder(h = 3, d = size * 0.3, $fn = 32);\n            \n        // Textured surface\n        for(j = [0:15]) {\n            rotate([0, 0, j * 22.5])\n                translate([size * 0.15, 0, 1])\n                sphere(d = 0.8, $fn = 8);\n        }\n    }\n}\n\nmodule petal(size) {\n    // Individual petal shape\n    scale([1, 0.7, 1])\n    difference() {\n        cylinder(h = size/2, d1 = size/3, d2 = size/6, $fn = 6);\n        \n        // Hairy texture\n        for(k = [0:8]) {\n            translate([k * 1.5 - 6, 0, 0])\n                rotate([90, 0, 0])\n                cylinder(h = 0.5, d = 0.3, $fn = 4);\n        }\n    }\n}\n\nmodule side_branch() {\n    // Smaller branch with flower\n    for(j = [0:2]) {\n        translate([0, 0, j * 5])\n            rotate([0, 0, j * 20])\n            stem_segment(stem_diameter * 0.7);\n    }\n    \n    translate([0, 0, 15])\n        rotate([0, 0, -20])\n        stapelia_flower(flower_size * 0.7);\n}\n\n// Base for stability\ntranslate([0, 0, -2])\n    cylinder(h = 2, d = 20, $fn = 32);\n\n// Render the plant\nstapelia_plant();",
    "renders": true
  },
  {
    "plant": "huernia",
    "openscad_code": "// Huernia plant with realistic medium complexity\n// Characteristic star-shaped flowers with raised annulus and toothed edges\n\nmodule huernia_plant() {\n    // Main stem - thick central column\n    translate([0, 0, 0])\n    cylinder(h = 40, r1 = 8, r2 = 6, $fn = 20);\n    \n    // Add slight texture to stem\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([7, 0, 10])\n        cylinder(h = 20, r = 1.5, $fn = 8);\n    }\n    \n    // Generate 4 main branches\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, 0, 15])\n        rotate([30, 0, 0])\n        branch();\n    }\n    \n    // Generate 2 flowers on top branches\n    for(i = [0:1]) {\n        rotate([0, 0, i * 180])\n        translate([12, 0, 35])\n        rotate([0, -30, 0])\n        flower();\n    }\n    \n    // Generate 1 flower on side branch\n    translate([-10, 10, 25])\n    rotate([0, 45, 135])\n    flower();\n}\n\nmodule branch() {\n    // Main branch segment\n    union() {\n        translate([0, 0, 0])\n        cylinder(h = 20, r1 = 5, r2 = 3, $fn = 12);\n        \n        // Secondary branches\n        for(j = [0:1]) {\n            rotate([0, 0, j * 60 - 30])\n            translate([0, 0, 10])\n            rotate([20, 0, 0])\n            cylinder(h = 15, r1 = 3, r2 = 2, $fn = 10);\n        }\n    }\n}\n\nmodule flower() {\n    // Flower base - shallow cup\n    difference() {\n        union() {\n            // Outer cup\n            translate([0, 0, -2])\n            cylinder(h = 5, r = 12, $fn = 24);\n            \n            // Star points\n            for(i = [0:7]) {\n                rotate([0, 0, i * 45])\n                translate([12, 0, 1])\n                cube([8, 4, 3], center = true);\n            }\n        }\n        \n        // Hollow center\n        translate([0, 0, -3])\n        cylinder(h = 7, r = 8, $fn = 20);\n    }\n    \n    // Central raised annulus (corona)\n    translate([0, 0, 4])\n    cylinder(h = 3, r1 = 6, r2 = 4, $fn = 20);\n    \n    // Corona teeth\n    for(i = [0:9]) {\n        rotate([0, 0, i * 36])\n        translate([5, 0, 4])\n        cube([2, 1, 4], center = true);\n    }\n    \n    // Small bumps on petal surface\n    for(i = [0:15]) {\n        a = i * 24;\n        r = 6 + (i % 2) * 4;\n        translate([r * cos(a), r * sin(a), 3])\n        sphere(r = 0.8, $fn = 8);\n    }\n}\n\n// Generate the complete plant\nhuernia_plant();",
    "renders": true
  },
  {
    "plant": "caralluma",
    "openscad_code": "// Caralluma cactus plant - realistic medium complexity\n// Overall height ~120mm, suitable for 3D printing\n\n$fn = 32;\n\n// Main stem module - creates segmented vertical stem\nmodule stem_segment(h, r, segments = 5) {\n    union() {\n        for(i = [0:segments-1]) {\n            translate([0, 0, i * h/segments]) {\n                difference() {\n                    cylinder(h = h/segments * 0.8, r = r * (1 - i * 0.1));\n                    \n                    // Add vertical grooves for texture\n                    for(g = [0:5]) {\n                        rotate([0, 0, g * 60]) {\n                            translate([-r/3, -r/6, -1]) {\n                                cube([r/1.5, r/3, h/segments + 2]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Individual flower module - star-shaped caralluma flower\nmodule flower(diameter = 12, height = 8) {\n    union() {\n        // Central part\n        cylinder(h = height * 0.3, r = diameter * 0.15);\n        \n        // Petals - 5 pointed star\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72]) {\n                translate([diameter * 0.3, 0, height * 0.3]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = diameter * 0.4, r1 = diameter * 0.15, r2 = 0);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Branching arm module\nmodule arm(length, angle, thickness) {\n    rotate([angle, 0, 0]) {\n        translate([0, 0, 5]) {\n            cylinder(h = length, r = thickness);\n            \n            // Add small bumps along arm\n            for(b = [1:3]) {\n                translate([0, 0, b * length/4]) {\n                    sphere(r = thickness * 1.3);\n                }\n            }\n        }\n    }\n}\n\n// Main plant assembly\nmodule caralluma_plant() {\n    // Base pot\n    difference() {\n        cylinder(h = 20, r = 30);\n        translate([0, 0, 2]) {\n            cylinder(h = 18, r = 28);\n        }\n    }\n    \n    // Soil surface\n    translate([0, 0, 19]) {\n        cylinder(h = 2, r = 29);\n    }\n    \n    // Main stem\n    translate([0, 0, 20]) {\n        stem_segment(h = 60, r = 8, segments = 6);\n        \n        // Upper thinner stem\n        translate([0, 0, 60]) {\n            stem_segment(h = 40, r = 5, segments = 4);\n        }\n        \n        // Arms branching from main stem\n        translate([0, 0, 30]) {\n            arm(25, 45, 3);\n            rotate([0, 0, 120]) {\n                arm(30, -30, 3);\n            }\n            rotate([0, 0, 240]) {\n                arm(20, 15, 3);\n            }\n        }\n        \n        // Flowers at tips\n        translate([0, 0, 100]) {\n            flower();\n        }\n        \n        translate([-15, 0, 55]) {\n            flower(8);\n        }\n        \n        translate([8, -8, 50]) {\n            flower(10);\n        }\n    }\n    \n    // Small side shoots\n    translate([0, 0, 45]) {\n        rotate([0, 0, 60]) {\n            translate([12, 0, 0]) {\n                cylinder(h = 15, r = 2);\n                translate([0, 0, 15]) {\n                    flower(6);\n                }\n            }\n        }\n    }\n}\n\n// Render the complete plant\ncaralluma_plant();",
    "renders": true
  },
  {
    "plant": "hoodia",
    "openscad_code": "// Hoodia Plant - Realistic Medium Complexity\n// Designed for 3D printing (2mm walls, no overhangs)\n\n// Main parameters\nplant_height = 100;\nbase_radius = 20;\nsegment_height = 12;\nsegments = 8;\nrib_count = 12;\nspine_length = 3;\n\n// Base module - flared stem\nmodule base() {\n    difference() {\n        cylinder(h=15, r1=base_radius, r2=base_radius*0.8, $fn=32);\n        translate([0,0,-1]) cylinder(h=17, r1=base_radius-2, r2=base_radius*0.8-2, $fn=32);\n    }\n}\n\n// Single stem segment with ribs\nmodule segment(pos, taper_factor) {\n    translate([0,0,pos*segment_height]) {\n        difference() {\n            // Outer cylinder with taper\n            cylinder(h=segment_height, r1=base_radius*taper_factor, r2=base_radius*(taper_factor-0.05), $fn=32);\n            // Hollow center\n            translate([0,0,-1]) cylinder(h=segment_height+2, r1=base_radius*taper_factor-2, r2=base_radius*(taper_factor-0.05)-2, $fn=32);\n            \n            // Vertical ribs\n            for(i=[0:rib_count-1]) {\n                rotate([0,0,i*360/rib_count]) {\n                    translate([base_radius*taper_factor-1.5, -1, 0])\n                    cube([2, 2, segment_height]);\n                }\n            }\n        }\n        \n        // Spines along ribs\n        for(i=[0:rib_count-1]) {\n            rotate([0,0,i*360/rib_count]) {\n                translate([base_radius*taper_factor-1, 0, segment_height/2]) {\n                    rotate([90,0,0]) cylinder(h=spine_length, r1=0.5, r2=0.2, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Flower cluster at top\nmodule flower_cluster() {\n    translate([0,0,segments*segment_height+5]) {\n        // Central flower stem\n        cylinder(h=8, r1=2, r2=1, $fn=16);\n        \n        // Individual flowers\n        for(i=[0:5]) {\n            rotate([0,0,i*60]) {\n                translate([5,0,6]) {\n                    rotate([30,0,0]) {\n                        // Petals\n                        for(j=[0:4]) {\n                            rotate([0,0,j*72]) {\n                                translate([2,0,0]) rotate([0,90,0]) \n                                cylinder(h=3, r1=1.5, r2=0.5, $fn=8);\n                            }\n                        }\n                        // Flower center\n                        sphere(r=1.5, $fn=16);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Roots/base anchoring\nmodule roots() {\n    difference() {\n        // Main root ball\n        sphere(r=base_radius*0.7, $fn=32);\n        // Hollow\n        sphere(r=base_radius*0.7-2, $fn=32);\n        \n        // Root tendrils\n        for(i=[0:5]) {\n            rotate([0,i*60,0]) {\n                translate([0,0,-base_radius*0.7]) {\n                    cylinder(h=10, r1=3, r2=1, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Main plant assembly\nunion() {\n    // Roots\n    translate([0,0,-10]) roots();\n    \n    // Base\n    base();\n    \n    // Stem segments\n    for(i=[0:segments-1]) {\n        segment(i, 1-i*0.07);\n    }\n    \n    // Flower cluster\n    flower_cluster();\n}",
    "renders": true
  },
  {
    "plant": "pleiospilos",
    "openscad_code": "// Pleiospilos (living rock plant) – medium-complexity, realistic\n// Target print size ≈70 mm diameter, 40 mm high\n\n$fn = 36;\n\n// overall scale factor\nplant_scale = 1.0;\n\nmodule pleiospilos() {\n    // central fissure\n    fissure_h = 3;\n    fissure_w = 12;\n    fissure_d = 8;\n\n    // leaf pair parameters\n    leaf_h = 18;\n    leaf_w = 35;\n    leaf_t = 25;\n    gap = 1.5; // 2 mm printable wall between halves\n\n    // create two opposite leaves\n    difference() {\n        union() {\n            // leaf pair A\n            translate([0, 0, leaf_h/2])\n                leaf_pair(leaf_w, leaf_h, leaf_t, gap);\n\n            // leaf pair B rotated 90°\n            rotate([0, 0, 90])\n                translate([0, 0, leaf_h/2])\n                    leaf_pair(leaf_w*0.92, leaf_h*0.93, leaf_t*0.92, gap);\n        }\n\n        // central fissure cut-out\n        translate([0, 0, leaf_h - fissure_h/2])\n            cube([fissure_w, fissure_d, fissure_h + 0.2], center = true);\n    }\n\n    // soil base\n    color(\"saddlebrown\")\n        translate([0, 0, -6])\n            cylinder(h = 6, r1 = 35, r2 = 32, center = false);\n}\n\nmodule leaf_pair(w, h, t, g) {\n    // left leaf\n    translate([ -g/2, 0, 0 ])\n        leaf_half(w/2, h, t);\n\n    // right leaf mirrored\n    mirror([1, 0, 0 ])\n        translate([ -g/2, 0, 0 ])\n            leaf_half(w/2, h, t);\n}\n\nmodule leaf_half(w, h, t) {\n    // outer dome\n    difference() {\n        scale([1, 0.7, 0.5])\n            sphere(d = t);\n\n        // inner hollow for walls\n        translate([0, 0, -1])\n            scale([0.85, 0.6, 0.45])\n                sphere(d = t);\n    }\n\n    // base cylinder to connect halves\n    translate([0, 0, -h/2])\n        cylinder(h = h, r1 = w, r2 = w*0.65, center = true);\n}\n\n// render\npleiospilos();",
    "renders": true
  },
  {
    "plant": "lithops",
    "openscad_code": "// Lithops Plant - Realistic Style, Medium Complexity\n// Model dimensions: ~70mm diameter, ~35mm height\n\nmodule lithops_pair() {\n    // Main body - two fused leaves with central cleft\n    difference() {\n        // Outer leaf shape - slightly flattened dome\n        scale([1, 0.8, 0.5])\n        sphere(d=60, $fn=64);\n        \n        // Central cleft between leaves\n        translate([0, 0, -5])\n        cube([30, 60, 20], center=true);\n        \n        // Flatten bottom for printing\n        translate([0, 0, -20])\n        cube([100, 100, 40], center=true);\n    }\n    \n    // Left leaf top surface texture\n    for(i=[-20:5:20]) {\n        for(j=[-15:5:15]) {\n            translate([i, j, 15])\n            scale([1, 0.8, 0.3])\n            sphere(d=4, $fn=8);\n        }\n    }\n    \n    // Right leaf top surface texture\n    for(i=[-20:5:20]) {\n        for(j=[-15:5:15]) {\n            translate([i, j, 15])\n            scale([1, 0.8, 0.3])\n            sphere(d=4, $fn=8);\n        }\n    }\n    \n    // Surface cracks/fissures\n    difference() {\n        // Left leaf\n        translate([-15, 0, 14])\n        rotate([0, 0, 15])\n        scale([1, 0.1, 0.2])\n        cylinder(h=30, d=2, $fn=3);\n        \n        // Right leaf\n        translate([15, 0, 14])\n        rotate([0, 0, -15])\n        scale([1, 0.1, 0.2])\n        cylinder(h=30, d=2, $fn=3);\n    }\n    \n    // Window patterns on leaf surfaces\n    translate([-25, -8, 14])\n    scale([1, 0.8, 0.1])\n    sphere(d=12, $fn=32);\n    \n    translate([25, -8, 14])\n    scale([1, 0.8, 0.1])\n    sphere(d=12, $fn=32);\n}\n\n// Root system for stability\nmodule roots() {\n    union() {\n        // Main tap root\n        translate([0, 0, -25])\n        cylinder(h=20, d1=8, d2=4, $fn=8);\n        \n        // Lateral roots\n        for(angle=[0:120:240]) {\n            rotate([0, 0, angle])\n            translate([4, 0, -20])\n            rotate([90, 0, 0])\n            cylinder(h=15, d1=3, d2=2, $fn=6);\n        }\n    }\n}\n\n// Soil base for presentation\nmodule soil_base() {\n    difference() {\n        translate([0, 0, -30])\n        cylinder(h=10, d=80, $fn=32);\n        \n        // Hollow center for root clearance\n        translate([0, 0, -30])\n        cylinder(h=12, d=20, $fn=32);\n    }\n}\n\n// Assemble the complete plant\nunion() {\n    lithops_pair();\n    roots();\n    soil_base();\n}",
    "renders": true
  },
  {
    "plant": "conophytum",
    "openscad_code": "// Conophytum bilobum - realistic medium complexity\n// Overall dimensions: ~80mm diameter x 45mm height\n\n$fn = 36;\n\n// Main body parameters\nbody_radius = 40;\nbody_height = 35;\nsplit_depth = 18;\nsplit_width = 12;\n\n// Leaf pair construction\nmodule bilobed_body() {\n    difference() {\n        // Main body as fused pair\n        union() {\n            // Left lobe\n            translate([-split_width/2, 0, 0])\n                scale([1, 0.9, 0.8])\n                sphere(d = body_radius * 2);\n            // Right lobe  \n            translate([split_width/2, 0, 0])\n                scale([1, 0.9, 0.8])\n                sphere(d = body_radius * 2);\n        }\n        \n        // Central split between lobes\n        translate([0, 0, -body_height])\n            cube([split_width * 2, body_radius * 1.5, split_depth * 2], center = true);\n            \n        // Top indentation\n        translate([0, 0, body_height * 0.6])\n            rotate([90, 0, 0])\n                cylinder(h = body_height * 0.4, r1 = body_radius * 0.6, r2 = body_radius * 0.4, $fn = 32);\n    }\n}\n\n// Surface texture dots\nmodule surface_dots() {\n    for(i = [0:15:359]) {\n        for(j = [0:15:359]) {\n            theta = i;\n            phi = j;\n            x = body_radius * 0.9 * cos(theta) * sin(phi);\n            y = body_radius * 0.9 * sin(theta) * sin(phi);\n            z = body_height * 0.7 * cos(phi) - body_height * 0.2;\n            if(z < body_height * 0.4 && z > -body_height * 0.7) {\n                translate([x, y, z])\n                    sphere(d = 1.5);\n            }\n        }\n    }\n}\n\n// Growth fissure details\nmodule fissure_lines() {\n    // Main central fissure\n    translate([0, 0, body_height * 0.7])\n        rotate([90, 0, 0])\n            cylinder(h = 2, r1 = split_width, r2 = split_width * 1.2, $fn = 6);\n            \n    // Radial cracks\n    for(angle = [0:30:150]) {\n        rotate([0, 0, angle])\n            translate([split_width * 0.8, 0, body_height * 0.65])\n                rotate([90, 0, 0])\n                    cylinder(h = 1.5, r1 = 1, r2 = 2, $fn = 4);\n    }\n}\n\n// Root system base\nmodule root_base() {\n    translate([0, 0, -body_height * 0.8])\n        cylinder(h = 8, r1 = body_radius * 0.3, r2 = body_radius * 0.4, $fn = 16);\n    \n    // Small root hairs\n    for(i = [0:45:359]) {\n        rotate([0, 0, i])\n            translate([body_radius * 0.35, 0, -body_height * 0.8])\n                rotate([90, 0, 0])\n                    cylinder(h = 6, r = 1.5, $fn = 8);\n    }\n}\n\n// Flower buds (if in bloom)\nmodule flower_buds() {\n    // Small buds emerging from fissure\n    for(pos = [[-3, 0, body_height * 0.75], [3, 0, body_height * 0.75]]) {\n        translate(pos)\n            sphere(d = 4);\n    }\n}\n\n// Assembly\nunion() {\n    difference() {\n        union() {\n            // Main plant body\n            bilobed_body();\n            \n            // Add surface texture\n            surface_dots();\n            \n            // Fissure details\n            fissure_lines();\n        }\n        \n        // Hollow interior for printing\n        translate([0, 0, -body_height * 0.3])\n            scale([0.8, 0.8, 0.7])\n            bilobed_body();\n    }\n    \n    // Root system\n    root_base();\n    \n    // Optional flower buds\n    flower_buds();\n}",
    "renders": true
  },
  {
    "plant": "plectranthus",
    "openscad_code": "// Plectranthus Plant - Realistic Style, Medium Complexity\n// Dimensions: ~80mm height, ~70mm width\n\n// Overall scale factor\nscale_factor = 1;\n\n// Main planter pot\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = 25 * scale_factor, r1 = 20 * scale_factor, r2 = 15 * scale_factor, $fn = 32);\n        \n        // Inner cavity\n        translate([0, 0, 2 * scale_factor])\n            cylinder(h = 23 * scale_factor, r1 = 18 * scale_factor, r2 = 13 * scale_factor, $fn = 32);\n        \n        // Drainage hole\n        translate([0, 0, -1 * scale_factor])\n            cylinder(h = 3 * scale_factor, r = 3 * scale_factor, $fn = 16);\n    }\n    \n    // Pot rim\n    translate([0, 0, 25 * scale_factor])\n        cylinder(h = 3 * scale_factor, r1 = 20.5 * scale_factor, r2 = 20 * scale_factor, $fn = 32);\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, 24 * scale_factor])\n        cylinder(h = 2 * scale_factor, r1 = 17.5 * scale_factor, r2 = 16 * scale_factor, $fn = 32);\n}\n\n// Single leaf with proper plectranthus shape\nmodule leaf(length = 20, width = 15, thickness = 1, angle = 0, curl = 0) {\n    translate([0, 0, thickness / 2])\n    rotate([0, 0, angle])\n    rotate([curl, 0, 0])\n    scale([1, 1, thickness])\n    difference() {\n        // Main leaf shape\n        intersection() {\n            scale([length, width, 1])\n                sphere(r = 0.5, $fn = 32);\n            \n            // Rounded end\n            translate([length/4, 0, 0])\n                sphere(r = length/2, $fn = 32);\n            \n            // Tapered base\n            translate([-length/2, 0, 0])\n                sphere(r = width/2, $fn = 32);\n        }\n        \n        // Vein indentations\n        for(i = [-2:2]) {\n            rotate([0, 0, i * 15])\n            translate([0, 0, -0.2])\n                cube([length * 0.8, 0.5, 0.4], center = true);\n        }\n    }\n}\n\n// Stem segment\nmodule stem_segment(height = 30, diameter = 2) {\n    cylinder(h = height, r = diameter, $fn = 8);\n}\n\n// Main stem with leaves\nmodule stem(base_angle = 0, base_x = 0, base_y = 0, segments = 3) {\n    translate([base_x, base_y, 26 * scale_factor])\n    rotate([base_angle, 0, 0]) {\n        // Main stem\n        stem_segment(height = 10 * scale_factor, diameter = 2.5 * scale_factor);\n        \n        translate([0, 0, 5 * scale_factor])\n        for(i = [0:segments-1]) {\n            rotate([0, 0, i * 120 + 60])\n            translate([0, 0, i * 8 * scale_factor])\n            union() {\n                // Side branch\n                stem_segment(height = 6 * scale_factor, diameter = 1.5 * scale_factor);\n                \n                // Leaves along branch\n                for(j = [0:1]) {\n                    translate([0, 0, j * 3 * scale_factor])\n                    rotate([0, 90, j * 180])\n                    translate([3 * scale_factor, 0, 0])\n                    leaf(\n                        length = (12 - j * 2) * scale_factor,\n                        width = (8 - j * 1) * scale_factor,\n                        thickness = 0.8 * scale_factor,\n                        angle = j * 30,\n                        curl = j * 10\n                    );\n                }\n            }\n        }\n    }\n}\n\n// Root system for stability\nmodule root_ball() {\n    difference() {\n        translate([0, 0, 20 * scale_factor])\n            sphere(r = 8 * scale_factor, $fn = 16);\n        \n        // Hollow center\n        translate([0, 0, 20 * scale_factor])\n            sphere(r = 6 * scale_factor, $fn = 16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Pot assembly\n    union() {\n        pot();\n        soil();\n        root_ball();\n    }\n    \n    // Main stems\n    stem(base_angle = 0, base_x = 0, base_y = 0, segments = 4);\n    stem(base_angle = 15, base_x = 5, base_y = 3, segments = 3);\n    stem(base_angle = -20, base_x = -4, base_y = -2, segments = 3);\n    stem(base_angle = 10, base_x = 3, base_y = -4, segments = 2);\n}",
    "renders": true
  },
  {
    "plant": "anacampseros",
    "openscad_code": "// Anacampseros plant - realistic style, medium complexity\n// Approx 70mm diameter, 35mm height\n\n// Main parameters\nbase_d = 70;\nbase_h = 15;\nplant_h = 20;\nleaf_count = 20;\nmax_leaf_len = 25;\nmin_leaf_len = 15;\nstem_r = 3;\n\nmodule soil_surface() {\n    // Top soil surface with slight irregularity\n    difference() {\n        cylinder(h = 2, d = base_d + 5, $fn = 48);\n        translate([0, 0, -0.1]) cylinder(h = 2.2, d = base_d - 2, $fn = 48);\n    }\n}\n\nmodule pot() {\n    // Simple terracotta-style pot\n    difference() {\n        union() {\n            cylinder(h = base_h, d1 = base_d + 8, d2 = base_d - 5, $fn = 48);\n            translate([0, 0, base_h]) cylinder(h = 2, d = base_d - 5, $fn = 48);\n        }\n        translate([0, 0, 2]) cylinder(h = base_h, d1 = base_d + 4, d2 = base_d - 9, $fn = 48);\n    }\n}\n\nmodule leaf(len, width, angle, tilt) {\n    // Individual leaf with realistic tapered shape\n    translate([0, 0, -len/4]) rotate([tilt, 0, angle]) {\n        hull() {\n            translate([0, 0, 0]) sphere(d = width, $fn = 12);\n            translate([0, 0, len]) sphere(d = width * 0.3, $fn = 12);\n        }\n    }\n}\n\nmodule rosette() {\n    // Central rosette of leaves\n    for(i = [0:leaf_count-1]) {\n        angle = i * 360/leaf_count + (i % 3) * 5;\n        len = min_leaf_len + (i % 4) * ((max_leaf_len - min_leaf_len)/3);\n        width = 4 + (i % 3) * 0.5;\n        tilt = 15 + (i % 5) * 5;\n        \n        leaf(len, width, angle, tilt);\n    }\n}\n\nmodule stem() {\n    // Central stem structure\n    cylinder(h = plant_h, r = stem_r, $fn = 16);\n}\n\nmodule offsets() {\n    // Offset plant slightly for natural look\n    translate([5, 3, 0]) children();\n}\n\n// Assembly\nunion() {\n    // Pot base\n    pot();\n    \n    // Soil surface\n    translate([0, 0, base_h - 1]) soil_surface();\n    \n    // Plant structure\n    translate([0, 0, base_h]) {\n        stem();\n        translate([0, 0, plant_h/2]) \n            scale([1, 1, 0.8]) \n                rosette();\n    }\n    \n    // Additional offset rosette for natural appearance\n    translate([8, -5, base_h + plant_h/3]) \n        scale([0.7, 0.7, 0.7]) \n            rosette();\n}",
    "renders": true
  },
  {
    "plant": "avonia",
    "openscad_code": "// Avonia plant - realistic style, medium complexity\n// Characteristic features: succulent leaves arranged in a low rosette, thick fleshy triangular leaves with windowed tips\n\nmodule leaf(width=8, height=12, thickness=3, angle=0) {\n    // Create a single triangular succulent leaf with windowed tip\n    translate([0, 0, height/2])\n    rotate([0, angle, 0])\n    difference() {\n        // Main leaf body - triangular prism\n        union() {\n            // Base triangular section\n            linear_extrude(height=height*0.7, center=true)\n                polygon(points=[[-width/2, 0], [width/2, 0], [0, thickness]]);\n            \n            // Tapered top section\n            translate([0, 0, height*0.35])\n            linear_extrude(height=height*0.35, center=true, scale=0.5)\n                polygon(points=[[-width/2, 0], [width/2, 0], [0, thickness]]);\n        }\n        \n        // Window cutout at tip\n        translate([0, thickness/2, height*0.5])\n        rotate([90, 0, 0])\n        cylinder(h=thickness+1, r1=width*0.3, r2=width*0.15, $fn=8);\n        \n        // Side indentations for leaf definition\n        translate([width*0.3, -1, height*0.2])\n        rotate([0, 90, 0])\n        cylinder(h=height*0.4, r1=thickness*0.8, r2=thickness*0.4, $fn=6);\n        \n        mirror([1, 0, 0])\n        translate([width*0.3, -1, height*0.2])\n        rotate([0, 90, 0])\n        cylinder(h=height*0.4, r1=thickness*0.8, r2=thickness*0.4, $fn=6);\n    }\n}\n\nmodule rosette(diameter=50, leaves=12) {\n    // Create a complete rosette of leaves\n    for(i = [0:leaves-1]) {\n        angle = i * 360/leaves;\n        radius = diameter * 0.4;\n        \n        translate([cos(angle) * radius, sin(angle) * radius, 0])\n        rotate([0, 0, angle])\n        rotate([15 + sin(i*30)*10, 0, 0])\n        leaf(width=6 + sin(i*45)*2, height=10 + cos(i*30)*3, thickness=2.5);\n    }\n}\n\nmodule stem(height=8, diameter=15) {\n    // Short stem/base for the rosette\n    cylinder(h=height, d=diameter, $fn=32);\n    \n    // Add slight taper\n    translate([0, 0, height])\n    cylinder(h=height*0.3, d1=diameter, d2=diameter*0.8, $fn=32);\n    \n    // Root details\n    difference() {\n        cylinder(h=height*0.5, d=diameter*1.2, center=true, $fn=32);\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n            translate([diameter*0.4, 0, 0])\n            cube([diameter*0.8, 2, height*0.5], center=true);\n        }\n    }\n}\n\nmodule soil_surface(diameter=60, height=3) {\n    // Simple soil surface with slight irregularity\n    difference() {\n        cylinder(h=height, d=diameter, $fn=64);\n        \n        // Add some surface texture\n        for(i = [0:20]) {\n            rotate([0, 0, i*18])\n            translate([diameter*0.3*cos(i*5), diameter*0.3*sin(i*5), -1])\n            sphere(d=2 + sin(i*3)*1.5, $fn=8);\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 5])\nsoil_surface(diameter=65, height=3);\n\ntranslate([0, 0, 0])\nstem(height=8, diameter=18);\n\ntranslate([0, 0, 8])\nrosette(diameter=55, leaves=16);",
    "renders": true
  },
  {
    "plant": "titanopsis",
    "openscad_code": "// Titanopsis plant with realistic medium complexity detail\n// Overall height ~60 mm, suitable for 3D printing with 2 mm walls\n\nwall = 1.2;          // shell thickness for printing\nsc = 1.5;            // overall scale factor\n$fn = 24;            // smooth curves\n\n// Main rosette\nmodule rosette() {\n    // central growing point\n    translate([0,0,3*sc]) sphere(d=4*sc);\n\n    // 6 pairs of leaves radiating out\n    for(a=[0:60:359])\n        rotate([0,0,a])\n            translate([5*sc,0,0])\n                rotate([0,90,0])\n                    leaf_pair();\n}\n\n// Single leaf\nmodule leaf() {\n    // leaf body – flat wedge\n    linear_extrude(height = 2*wall, center=true)\n        hull() {\n            translate([0,-1.5*sc]) circle(d=2*sc);\n            translate([8*sc,0])    circle(d=1*sc);\n        }\n    // upper surface bump ridges\n    for(i=[1:3:8])\n        translate([i*sc,0,1*wall])\n            scale([0.6,0.6,0.3])\n                sphere(d=2*sc);\n}\n\n// Opposing leaf pair\nmodule leaf_pair() {\n    leaf();\n    mirror([0,1,0]) leaf();\n}\n\n// Pot\nmodule pot() {\n    difference() {\n        cylinder(h=18*sc,d1=28*sc,d2=22*sc);\n        translate([0,0,wall]) cylinder(h=18*sc-wall,d1=25*sc,d2=19*sc);\n    }\n    // drainage hole\n    translate([0,0,-1]) cylinder(h=2*wall,d=4*sc);\n}\n\n// Surface soil\nmodule soil() {\n    translate([0,0,0.5*wall])\n        cylinder(h=2*wall,d1=24*sc,d2=24*sc);\n}\n\n// Final assembly\nunion() {\n    pot();\n    soil();\n    translate([0,0,2*wall]) rosette();\n}",
    "renders": true
  },
  {
    "plant": "faucaria",
    "openscad_code": "// Faucaria (Tiger Jaws) - Realistic style, medium complexity\n// 3D printable succulent plant model\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main module\nmodule faucaria() {\n    // Plant base/pot\n    difference() {\n        cylinder(h = 30, r1 = 35, r2 = 30, center = false);  // Tapered pot\n        translate([0, 0, 1]) cylinder(h = 32, r1 = 33, r2 = 28, center = false);  // Hollow\n    }\n    \n    // Soil surface\n    translate([0, 0, 28]) \n        sphere(r = 28);\n    \n    // Main rosette\n    rosette();\n}\n\n// Create rosette of leaves\nmodule rosette() {\n    // Central leaves\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45]) \n            translate([0, 18, 28]) \n                rotate([0, 0, 15 * sin(i * 45)]) \n                    leaf();\n    }\n    \n    // Outer ring of leaves\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30 + 15]) \n            translate([0, 28, 28]) \n                rotate([0, 0, 25 * sin(i * 30)]) \n                    scale([0.85, 0.85, 0.85]) \n                        leaf();\n    }\n}\n\n// Single faucaria leaf\nmodule leaf() {\n    // Main leaf body\n    difference() {\n        // Triangular leaf shape\n        hull() {\n            translate([0, -8, 0]) sphere(r = 4);\n            translate([0, 8, 0]) sphere(r = 4);\n            translate([18, 0, 0]) sphere(r = 3);\n        }\n        \n        // Central groove\n        translate([0, 0, -1]) \n            rotate([0, 90, 0]) \n                cylinder(h = 20, r = 1.5, center = true);\n        \n        // Teeth indentations\n        for (i = [1:4]) {\n            translate([i * 3.5, 0, 0]) \n                rotate([0, 90, 0]) \n                    cylinder(h = 6, r = 0.8, center = true);\n        }\n    }\n    \n    // Add teeth on edges\n    for (i = [1:4]) {\n        // Top teeth\n        translate([i * 3.5, 4, 0]) \n            rotate([0, 0, 30]) \n                tooth();\n        \n        // Bottom teeth\n        translate([i * 3.5, -4, 0]) \n            rotate([0, 0, -30]) \n                tooth();\n    }\n    \n    // Leaf surface texture dots\n    for (x = [3:3:15]) {\n        for (y = [-3:3:3]) {\n            translate([x, y, 1.5]) \n                sphere(r = 0.5);\n        }\n    }\n}\n\n// Individual tooth\nmodule tooth() {\n    difference() {\n        // Main tooth\n        hull() {\n            sphere(r = 1.2);\n            translate([0, 0, 2]) sphere(r = 0.5);\n        }\n        \n        // Sharp edge\n        translate([0, 0, 1]) \n            rotate([0, 90, 0]) \n                cylinder(h = 3, r = 0.3, center = true);\n    }\n}\n\n// Render the plant\nfaucaria();",
    "renders": true
  },
  {
    "plant": "glottiphyllum",
    "openscad_code": "// Glottiphyllum Plant - Realistic Style - Medium Complexity\n// 3D printable with 2mm wall thickness, ~75mm diameter\n\n// Base soil and pot\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = 25, r1 = 38, r2 = 35, $fn = 48);\n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = 23, r1 = 36, r2 = 33, $fn = 48);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, 25])\n        cylinder(h = 2, r = 35, $fn = 48);\n}\n\n// Individual leaf with proper glottiphyllum curve\nmodule leaf(length = 30, width = 15, thickness = 3, angle = 0, bend = 15) {\n    translate([0, 0, 27])\n    rotate([0, 0, angle])\n    rotate([bend, 0, 0])\n    union() {\n        // Main leaf body\n        scale([1, width/length, thickness/length])\n        sphere(r = length/2, $fn = 32);\n        \n        // Thicken base for 3D printing\n        translate([0, 0, -thickness/2])\n        cylinder(h = 4, r = width/2, $fn = 16);\n    }\n}\n\n// Rosette formation\nmodule rosette() {\n    // Center cluster\n    for(i = [0:6]) {\n        rotate([0, 0, i*60])\n        translate([0, 8, 0])\n        leaf(25, 12, 2.5, 0, 10);\n    }\n    \n    // Middle ring\n    for(i = [0:9]) {\n        rotate([0, 0, i*36])\n        translate([0, 15, 0])\n        leaf(30, 14, 3, 0, 20);\n    }\n    \n    // Outer ring\n    for(i = [0:12]) {\n        rotate([0, 0, i*30])\n        translate([0, 22, 0])\n        leaf(35, 16, 3.5, 0, 25);\n    }\n}\n\n// Surface texture lines on leaves\nmodule leaf_texture() {\n    for(i = [0:5]) {\n        rotate([0, 0, i*72])\n        translate([0, 0, 27])\n        rotate([15, 0, 0])\n        translate([0, 10, 0])\n        scale([1, 0.1, 0.1])\n        leaf(20, 1, 1, 0, 0);\n    }\n}\n\n// Main assembly\nunion() {\n    pot();\n    soil();\n    rosette();\n}",
    "renders": true
  },
  {
    "plant": "mesembryanthemum",
    "openscad_code": "// Mesembryanthemum plant - realistic medium complexity\n// Overall height ~100 mm\n\n$fn = 32;\n\nmodule stem_segment(h, r) {\n    // Create a single stem segment with slight taper\n    cylinder(h = h, r1 = r, r2 = r * 0.9, center = false);\n}\n\nmodule stem() {\n    // Main stem with multiple segments\n    union() {\n        // Base stem\n        translate([0, 0, 0])\n            stem_segment(30, 3);\n        \n        // First branch\n        translate([0, 0, 28])\n            rotate([0, 25, 0])\n            stem_segment(25, 2.5);\n        \n        // Second branch\n        translate([0, 0, 26])\n            rotate([0, -30, 15])\n            stem_segment(20, 2.2);\n        \n        // Third branch\n        translate([0, 0, 24])\n            rotate([20, 10, -20])\n            stem_segment(18, 2);\n    }\n}\n\nmodule leaf(length, width, thickness) {\n    // Create a succulent leaf with slight curve\n    difference() {\n        // Main leaf body\n        scale([length, width, thickness])\n            sphere(r = 1);\n        \n        // Add subtle groove on top\n        translate([0.3, 0, -0.2])\n            scale([length * 0.8, width * 0.3, thickness * 1.2])\n            sphere(r = 0.8);\n    }\n}\n\nmodule leaves_cluster() {\n    // Generate clusters of leaves along branches\n    \n    // Leaves on main stem\n    for(i = [1:3]) {\n        translate([0, 0, i * 8])\n        rotate([0, 90, i * 120])\n        translate([6, 0, 0])\n        rotate([0, -20, 0])\n        leaf(8, 4, 2);\n    }\n    \n    // Leaves on first branch\n    for(i = [1:2]) {\n        translate([0, 0, 35 + i * 6])\n        rotate([25, 0, 0])\n        rotate([0, 0, i * 150])\n        translate([5, 0, 0])\n        rotate([0, -25, 0])\n        leaf(7, 3.5, 1.8);\n    }\n    \n    // Leaves on second branch\n    for(i = [1:2]) {\n        translate([0, 0, 42 + i * 5])\n        rotate([-30, 15, 0])\n        rotate([0, 0, i * 130])\n        translate([4, 0, 0])\n        rotate([0, -30, 0])\n        leaf(6, 3, 1.5);\n    }\n}\n\nmodule flower_petal(size) {\n    // Create individual flower petal\n    scale([size, size * 0.6, size * 0.2])\n    sphere(r = 1);\n}\n\nmodule flower_center(r) {\n    // Central part of flower with stamens\n    union() {\n        // Main center\n        color(\"yellow\")\n        sphere(r = r);\n        \n        // Stamens\n        for(i = [1:16]) {\n            rotate([0, 0, i * 22.5])\n            translate([r * 0.8, 0, r * 0.9])\n            cylinder(h = r * 0.5, r1 = 0.2, r2 = 0);\n        }\n    }\n}\n\nmodule flower(diameter, height) {\n    // Complete flower with petals and center\n    union() {\n        // Petals arranged in circle\n        for(i = [1:24]) {\n            rotate([0, 0, i * 15])\n            translate([diameter * 0.4, 0, height * 0.9])\n            rotate([0, 20, 0])\n            color(\"magenta\")\n            flower_petal(diameter * 0.3);\n        }\n        \n        // Flower center\n        translate([0, 0, height])\n        flower_center(diameter * 0.25);\n    }\n}\n\nmodule flowers() {\n    // Position flowers at branch tips\n    \n    // Flower on first branch\n    translate([0, 0, 50])\n    rotate([25, 0, 0])\n    translate([0, 0, 0])\n    flower(15, 2);\n    \n    // Flower on second branch\n    translate([0, 0, 45])\n    rotate([-30, 15, 0])\n    translate([0, 0, 0])\n    flower(12, 1.8);\n    \n    // Flower on third branch\n    translate([0, 0, 40])\n    rotate([20, 10, -20])\n    translate([0, 0, 0])\n    flower(10, 1.5);\n}\n\nmodule base() {\n    // Simple round base for stability\n    cylinder(h = 5, r = 15, center = false);\n}\n\n// Main assembly\nunion() {\n    // Plant base\n    base();\n    \n    // Stem structure\n    translate([0, 0, 5])\n    stem();\n    \n    // Leaves clusters\n    translate([0, 0, 5])\n    leaves_cluster();\n    \n    // Flowers\n    translate([0, 0, 5])\n    flowers();\n}",
    "renders": true
  },
  {
    "plant": "delosperma",
    "openscad_code": "// Delosperma Cooperi (Ice Plant) – medium-complexity realistic model\n// Size: ≈ 110 mm wide × 100 mm deep × 45 mm tall\n// Wall thickness ≥ 2 mm everywhere for easy FDM printing\n\n// global scale (1 unit = 1 mm)\n$fn = 24;\n\n// Main pot\nmodule pot() {\n    difference() {\n        // Outer shell\n        cylinder(h = 35, d1 = 70, d2 = 65);\n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = 34, d1 = 66, d2 = 61);\n    }\n}\n\n// A single fleshy leaf\nmodule leaf(len = 18, thick = 4, ang = 0) {\n    // Ellipsoid body\n    translate([0, 0, len/2])\n        rotate([0, 90, 0])\n            scale([1, 0.6, 1])\n                sphere(d = thick);\n\n    // Tapered tip – cone\n    translate([0, 0, len - 2])\n        rotate([0, 90, 0])\n            cylinder(h = 5, d1 = thick, d2 = 0);\n}\n\n// A whorl of 5 leaves at given height & radius\nmodule leaf_whorl(h, r, baseAng = 0) {\n    for(i = [0:4]) {\n        angle = baseAng + i * 72;\n        translate([r * cos(angle), r * sin(angle), h])\n            rotate([0, 0, angle + 90])\n                rotate([20, 0, 0])\n                    leaf();\n    }\n}\n\n// Full foliage clump\nmodule foliage() {\n    // Central leaves\n    leaf_whorl(0, 0);\n\n    // First tier\n    leaf_whorl(0, 12, 36);\n    leaf_whorl(4, 18, 18);\n\n    // Second tier – slightly smaller\n    leaf_whorl(8, 22, 0);\n    leaf_whorl(12, 25, 36);\n\n    // Third tier – outermost\n    leaf_whorl(16, 28, 18);\n}\n\n// Daisy-like flower\nmodule flower(diam = 20) {\n    // Center disk\n    color(\"yellow\")\n        translate([0, 0, 1])\n            cylinder(h = 3, d = 8);\n\n    // Petals – thin cylinders\n    petals = 30;\n    for(i = [0:petals-1]) {\n        angle = i * 360 / petals;\n        rotate([0, 0, angle])\n            translate([diam/2 - 2, 0, 1.5])\n                rotate([90, 0, 0])\n                    scale([1, 0.3, 1])\n                        cylinder(h = 8, d = 3);\n    }\n}\n\n// Place a few flowers on the foliage\nmodule flowers() {\n    translate([10, 10, 22]) rotate([15, 0, 30]) flower();\n    translate([-12, -5, 20]) rotate([10, 0, -45]) flower();\n    translate([8, -15, 18]) rotate([20, 0, 60]) flower();\n}\n\n// Soil surface\nmodule soil() {\n    color(\"#3a2d25\")\n        translate([0, 0, 34])\n            cylinder(h = 3, d1 = 66, d2 = 61);\n}\n\n// Assemble\nunion() {\n    pot();\n    soil();\n    translate([0, 0, 37]) foliage();\n    flowers();\n}",
    "renders": true
  },
  {
    "plant": "drosanthemum",
    "openscad_code": "// Drosanthemum Plant - Realistic Style, Medium Complexity\n// 3D printable succulent with characteristic features\n\n$fn = 36;\n\n// Main parameters\npot_diameter = 40;\npot_height = 35;\nplant_height = 80;\nstem_thickness = 3;\nleaf_thickness = 2;\nflower_radius = 8;\n\n// Drawing pot with drainage hole\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_height, d=pot_diameter, center=false);\n        \n        // Inner cavity\n        translate([0,0,2])\n        cylinder(h=pot_height-4, d=pot_diameter-4, center=false);\n        \n        // Drainage hole\n        translate([0,0,2])\n        cylinder(h=5, d=6, center=false);\n    }\n}\n\n// Characteristic drosanthemum leaf - triangular with rounded edges\nmodule leaf(size=10, angle=0) {\n    translate([0,0,size/2])\n    rotate([0,0,angle])\n    scale([1,0.7,0.3])\n    sphere(d=size);\n}\n\n// Stem segment with leaf attachment points\nmodule stem_segment(height=10, leaf_count=3) {\n    union() {\n        // Main stem\n        cylinder(h=height, d=stem_thickness, center=false);\n        \n        // Leaves arranged around stem\n        for(i=[0:leaf_count-1]) {\n            rotate([0,0,i*120])\n            translate([stem_thickness/2+3,0,height/2])\n            leaf(size=8+rand(i)*3, angle=30);\n        }\n    }\n}\n\n// Flower cluster - characteristic of drosanthemum\nmodule flower_cluster() {\n    union() {\n        // Center of flower\n        color(\"yellow\")\n        sphere(d=flower_radius/2);\n        \n        // Petals in multiple layers\n        for(layer=[0:1]) {\n            for(i=[0:11]) {\n                rotate([0,0,i*30+layer*15])\n                translate([flower_radius/1.5,0,layer*2])\n                scale([1,0.3,0.2])\n                sphere(d=flower_radius);\n            }\n        }\n    }\n}\n\n// Helper for slight randomness\nfunction rand(n) = 0.8 + 0.4 * sin(n*873);\n\n// Main plant structure\nmodule plant() {\n    // Base stem rising from soil\n    translate([0,0,pot_height-2])\n    stem_segment(height=15, leaf_count=4);\n    \n    // Branching stems\n    for(i=[0:2]) {\n        angle = 20 + i*15;\n        rotate([angle,0,i*120])\n        translate([0,0,15])\n        union() {\n            cylinder(h=20, d=stem_thickness, center=false);\n            \n            // Sub-branches\n            for(j=[0:1]) {\n                rotate([0,0,j*60-30])\n                translate([0,0,10])\n                union() {\n                    cylinder(h=15, d=stem_thickness*0.8, center=false);\n                    \n                    // Terminal flowers\n                    translate([0,0,15])\n                    rotate([0,0,rand(i+j)*30])\n                    flower_cluster();\n                }\n            }\n        }\n    }\n    \n    // Additional flowering stems\n    for(k=[0:1]) {\n        rotate([0,0,k*180])\n        translate([stem_thickness/2,0,25])\n        rotate([45,0,0])\n        union() {\n            cylinder(h=30, d=stem_thickness*0.9, center=false);\n            translate([0,0,30])\n            flower_cluster();\n        }\n    }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0,0,pot_height-5])\n    color(\"brown\")\n    cylinder(h=5, d=pot_diameter-4, center=false);\n}\n\n// Assembly\nunion() {\n    pot();\n    soil();\n    plant();\n}",
    "renders": true
  },
  {
    "plant": "lampranthus",
    "openscad_code": "// Lampranthus plant - realistic style with medium complexity\n// Designed for 3D printing with 2mm walls\n\n$fn = 32;  // Smooth curves for printing\n\n// Main parameters\nplant_height = 80;\npot_height = 25;\npot_radius = 30;\nstem_thickness = 4;\nleaf_thickness = 2.5;\nleaf_length = 15;\nleaf_width = 8;\nflower_radius = 8;\n\n// Pot module\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_height, r=pot_radius, center=false);\n        \n        // Hollow inside\n        translate([0, 0, 2])\n            cylinder(h=pot_height, r=pot_radius-3, center=false);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h=3, r=4, center=false);\n    }\n}\n\n// Single succulent leaf\nmodule leaf(length, width, thickness, angle) {\n    rotate([angle, 0, 0])\n    translate([0, 0, -length/2])\n    scale([1, width/length, thickness/length])\n    sphere(d=length);\n}\n\n// Stem segment with leaves\nmodule stem_segment(height, radius, leaf_count) {\n    union() {\n        // Stem cylinder\n        cylinder(h=height, r=radius, center=false);\n        \n        // Leaves around stem\n        for(i = [0:leaf_count-1]) {\n            rotate([0, 0, i * 360/leaf_count])\n            translate([radius+leaf_width/2, 0, height/2])\n            leaf(leaf_length, leaf_width, leaf_thickness, 45);\n        }\n    }\n}\n\n// Flower cluster\nmodule flower_cluster() {\n    // Flower center\n    color(\"yellow\")\n    sphere(r=flower_radius/3);\n    \n    // Petals around center\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([flower_radius/2, 0, 0])\n        rotate([90, 0, 0])\n        scale([1, 0.5, 0.3])\n        cylinder(h=flower_radius, r1=flower_radius/3, r2=0);\n    }\n}\n\n// Main plant structure\nmodule lampranthus() {\n    // Pot at base\n    translate([0, 0, 0])\n    color(\"brown\")\n    pot();\n    \n    // First stem level\n    translate([0, 0, pot_height])\n    color(\"lightgreen\")\n    stem_segment(15, stem_thickness, 6);\n    \n    // Second stem level\n    translate([0, 0, pot_height+15])\n    color(\"lightgreen\")\n    stem_segment(12, 3.5, 5);\n    \n    // Third stem level\n    translate([0, 0, pot_height+27])\n    color(\"lightgreen\")\n    stem_segment(10, 3, 4);\n    \n    // Flower stems\n    for(i = [0:2]) {\n        angle = i * 120;\n        rotate([0, 0, angle])\n        translate([8, 0, pot_height+30])\n        rotate([30, 0, 0])\n        union() {\n            color(\"lightgreen\")\n            cylinder(h=20, r=2.5);\n            \n            // Flowers at tips\n            translate([0, 0, 20])\n            color(\"magenta\")\n            flower_cluster();\n        }\n    }\n    \n    // Additional smaller stems\n    for(i = [0:4]) {\n        angle = i * 72;\n        rotate([0, 0, angle])\n        translate([5, 0, pot_height+25])\n        rotate([20, 0, 0])\n        color(\"lightgreen\")\n        stem_segment(8, 2, 3);\n    }\n}\n\n// Render the complete plant\nlampranthus();",
    "renders": true
  },
  {
    "plant": "phalacrocarpus",
    "openscad_code": "// Phalacrocarpus plant (succulent) – realistic, medium complexity\n// Total height ~110 mm, max diameter ~80 mm, wall 2 mm\n// Designed for FDM printing (no steep overhangs)\n\n$fn = 32;           // global smoothness\n\nmodule stem() {\n    // tapered central cylinder, hollow with 2 mm wall\n    difference() {\n        cylinder(h = 60, d1 = 20, d2 = 15, center = false);\n        translate([0,0,-1])\n            cylinder(h = 62, d1 = 16, d2 = 11, center = false);\n    }\n}\n\nmodule leaf_pair(base_h, angle, rot, scale_fact) {\n    // generates one opposite leaf pair\n    translate([0, 0, base_h])\n    rotate([0, 0, rot]) {\n        for (side = [-1, 1]) {\n            rotate([0, side * angle, 0])\n            scale([scale_fact, scale_fact, scale_fact])\n            difference() {\n                // thick leaf body\n                hull() {\n                    translate([0,0,0]) sphere(d = 10);\n                    translate([0,0,30]) sphere(d = 6);\n                }\n                // hollow core\n                translate([0,0,15]) scale([0.7,0.7,0.8])\n                    cylinder(h = 32, d = 6, center = true);\n            }\n        }\n    }\n}\n\nmodule rosette() {\n    // 6 leaf pairs stacked spirally up the stem\n    for (i = [0:5]) {\n        leaf_pair(\n            base_h = 5 + i*10,\n            angle = 15 + i*5,\n            rot = i*60,\n            scale_fact = 1 - i*0.12\n        );\n    }\n}\n\nmodule soil_disc() {\n    // simple pot soil surface\n    translate([0,0,-3])\n        cylinder(h = 6, d = 45, center = false);\n}\n\nmodule pot() {\n    // truncated cone pot, 2 mm walls\n    difference() {\n        cylinder(h = 25, d1 = 48, d2 = 42, center = false);\n        translate([0,0,-1])\n            cylinder(h = 27, d1 = 44, d2 = 38, center = false);\n    }\n}\n\n// final assembly\nunion() {\n    pot();\n    soil_disc();\n    translate([0,0,6])\n        union() {\n            stem();\n            rosette();\n        }\n}",
    "renders": true
  },
  {
    "plant": "rhipsalis",
    "openscad_code": "// Rhipsalis Cereuscula (Coral Cactus) - Medium complexity realistic model\n// 3D printable with 2mm wall thickness, ~100mm height\n\n// Overall parameters\nplant_height = 100;\npot_height = 25;\npot_diameter = 45;\n\n// Main stem characteristics\nstem_diameter = 6;\nsegment_length = 12;\nsegments_per_branch = 3;\n\n// Create the pot\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_height, d=pot_diameter, $fn=32);\n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h=pot_height-1, d=pot_diameter-4, $fn=32);\n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h=3, d=6, $fn=16);\n    }\n}\n\n// Create a single stem segment\nmodule stem_segment(length, diameter, angle) {\n    // Main cylindrical segment\n    rotate([0, angle, 0])\n        cylinder(h=length, d=diameter, $fn=12);\n    \n    // Add small nodes/bumps along the segment\n    for(i = [1:2:length-2]) {\n        translate([0, 0, i])\n            rotate([0, angle, 0])\n                sphere(d=diameter*1.3, $fn=8);\n    }\n}\n\n// Create a branching structure\nmodule branch(start_angle, segments, level) {\n    if(level <= 2) {\n        // Main branch segments\n        for(i = [0:segments-1]) {\n            translate([0, 0, i*segment_length*0.8])\n                rotate([start_angle + (i*15), 0, 0])\n                    stem_segment(segment_length, stem_diameter/(level*0.7), 0);\n        }\n        \n        // Create sub-branches\n        translate([0, 0, segments*segment_length*0.8])\n            for(angle = [-45, 0, 45]) {\n                rotate([0, 0, angle])\n                    rotate([30 + level*10, 0, 0])\n                        branch(start_angle + angle, segments_per_branch-1, level+1);\n            }\n    }\n}\n\n// Create the coral-like clusters at branch ends\nmodule coral_cluster() {\n    // Central sphere\n    sphere(d=4, $fn=12);\n    \n    // Radiating small cylinders\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n            rotate([30 + (i%60), 0, 0])\n                translate([0, 0, 2])\n                    cylinder(h=8, d=2, $fn=8);\n    }\n}\n\n// Main plant assembly\nmodule rhipsalis_plant() {\n    union() {\n        // Pot at base\n        pot();\n        \n        // Plant emerges from pot\n        translate([0, 0, pot_height-2]) {\n            // Multiple main stems\n            for(angle = [0:120:359]) {\n                rotate([0, 0, angle]) {\n                    // Main vertical stem\n                    branch(0, 5, 1);\n                    \n                    // Side branches\n                    rotate([0, 0, 60])\n                        branch(15, 4, 1);\n                    rotate([0, 0, -60])\n                        branch(-15, 4, 1);\n                }\n            }\n            \n            // Add coral clusters at branch ends\n            translate([0, 10, 60]) coral_cluster();\n            translate([8, -8, 70]) coral_cluster();\n            translate([-12, 5, 65]) coral_cluster();\n            translate([5, 12, 75]) coral_cluster();\n        }\n    }\n}\n\n// Render the complete plant\nrhipsalis_plant();",
    "renders": true
  },
  {
    "plant": "schlumbergera",
    "openscad_code": "// Schlumbergera (Christmas Cactus) – realistic, medium complexity\n// Overall height ≈ 110 mm, max width ≈ 95 mm, ready for FDM printing\n\n$fn = 36;  // smooth curves\n\nmodule pot() {\n    // 2 mm wall thickness, slight taper for easy printing\n    difference() {\n        cylinder(h = 32, d1 = 48, d2 = 46, center = false);\n        translate([0, 0, 2])\n            cylinder(h = 30, d1 = 44, d2 = 42, center = false);\n    }\n}\n\nmodule soil_surface() {\n    // slightly domed soil inside pot\n    translate([0, 0, 2])\n        scale([1, 1, 0.3])\n            sphere(d = 44);\n}\n\nmodule stem_segment(len = 20, thick = 5) {\n    // single flattened phylloclade (leaf-like stem)\n    hull() {\n        translate([-len/2, 0, 0]) sphere(d = thick);\n        translate([ len/2, 0, 0]) sphere(d = thick);\n        translate([0, -thick*0.8, 0]) sphere(d = thick);\n        translate([0,  thick*0.8, 0]) sphere(d = thick);\n    }\n}\n\nmodule joint() {\n    // small sphere connector for natural look\n    sphere(d = 4.5);\n}\n\nmodule branch(seg = 4, angle = 35, scale = 0.8, rot = 0) {\n    // recursive branching structure\n    if (seg > 0) {\n        color(\"darkgreen\")\n        stem_segment(20 * pow(scale, 4-seg), 5 * pow(scale, 4-seg));\n        translate([20 * pow(scale, 4-seg), 0, 0]) {\n            joint();\n            rotate([0, angle, rot])\n                branch(seg - 1, angle, scale, 30);\n            rotate([0, -angle, rot])\n                branch(seg - 1, angle, scale, -30);\n        }\n    }\n}\n\nmodule flower() {\n    // simple radial flower ~8 mm Ø\n    union() {\n        // petals\n        for (i = [0:60:359])\n            rotate([0, 0, i])\n                translate([3.5, 0, 3])\n                    rotate([90, 0, 0])\n                        cylinder(h = 7, d1 = 4, d2 = 2);\n        // center\n        translate([0, 0, 3])\n            sphere(d = 3);\n    }\n}\n\nmodule plant() {\n    // main stem rising from soil\n    translate([0, 0, 32+5]) {\n        branch(4, 30, 0.85, 0);\n        branch(4, 30, 0.85, 120);\n        branch(4, 30, 0.85, 240);\n    }\n    // add a few flowers on outer branches\n    translate([0, 0, 32+5])\n        for (p = [[24, 18, 12], [-20, 22, 15], [30, -10, 10]])\n            translate(p)\n                color(\"hotpink\")\n                    flower();\n}\n\n// assembly\npot();\nsoil_surface();\nplant();",
    "renders": true
  },
  {
    "plant": "hatiora",
    "openscad_code": "// Hatiora (Dancing Bones Cactus) - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no extreme overhangs\n\n$fn = 36;  // Smooth curves for 3D printing\nwall = 2;  // Wall thickness for 3D printing\n\nmodule segment(length=20, diameter=8, joints=3) {\n    // Main cylindrical segment with slight taper\n    difference() {\n        cylinder(h=length, d1=diameter+wall, d2=diameter*0.8+wall, center=true);\n        translate([0,0,-length/2-1])\n            cylinder(h=length+2, d1=diameter, d2=diameter*0.8, center=true);\n    }\n    \n    // Joint nodes along segment\n    for(i=[1:joints-1]) {\n        translate([0,0,-length/2 + i*(length/joints)])\n        difference() {\n            sphere(d=diameter*1.3+wall);\n            sphere(d=diameter*1.1);\n        }\n    }\n    \n    // Segment end caps\n    translate([0,0,-length/2])\n        sphere(d=diameter+wall);\n    translate([0,0,length/2])\n        sphere(d=diameter*0.8+wall);\n}\n\nmodule branching_stem(level=0, max_level=3) {\n    if(level < max_level) {\n        // Main segment\n        segment(length=20-level*3, diameter=8-level*1.5, joints=3);\n        \n        // Branching segments\n        branches = level < 1 ? 3 : 2;\n        for(i=[1:branches]) {\n            rotate([0, 0, i*120 + level*30])\n            rotate([45 - level*10, 0, 0])\n            translate([0,0,5-level])\n            scale([0.8,0.8,0.8])\n            branching_stem(level+1, max_level);\n        }\n    } else {\n        // Terminal segments\n        segment(length=15, diameter=5, joints=2);\n    }\n}\n\nmodule pot() {\n    // Simple pot base\n    difference() {\n        cylinder(h=25, d1=35, d2=30, center=true);\n        translate([0,0,-10])\n            cylinder(h=20, d1=31, d2=26, center=true);\n    }\n    \n    // Soil surface\n    translate([0,0,10.5])\n        cylinder(h=3, d=29);\n}\n\nmodule plant() {\n    union() {\n        // Plant base emerging from soil\n        translate([0,0,12])\n        rotate([0,0,0])\n        branching_stem(0, 3);\n        \n        // Additional main stems for fullness\n        translate([0,0,12])\n        rotate([0,0,120])\n        scale([0.7,0.7,0.7])\n        branching_stem(0, 2);\n        \n        translate([0,0,12])\n        rotate([0,0,-120])\n        scale([0.7,0.7,0.7])\n        branching_stem(0, 2);\n    }\n}\n\n// Assembly\ntranslate([0,0,0])\n    pot();\n\ntranslate([0,0,0])\n    plant();",
    "renders": true
  },
  {
    "plant": "epiphyllum",
    "openscad_code": "// Epiphyllum (Orchid Cactus) Plant – 3D-printable medium complexity model\n// Overall height ≈ 90 mm, pot diameter ≈ 50 mm\n\nmodule thick_wall(obj, t = 2) {\n    difference() {\n        obj;\n        offset(r = -t) obj;\n    }\n}\n\n// Flattened leaf/branch segment\nmodule leaf_segment(w = 12, l = 25, thick = 2) {\n    difference() {\n        scale([1, 1, 0.35]) sphere(d = w, $fn = 24);\n        translate([0, 0, -thick]) cube([w*2, w*2, thick*2], center = true);\n    }\n}\n\n// Single flower\nmodule flower(d = 10) {\n    union() {\n        // Stigma\n        cylinder(h = 3, d = 2.5, $fn = 12);\n        // Petals\n        for (a = [0:60:359])\n            rotate([0, 0, a])\n                translate([0, d/2 - 1, 0])\n                    scale([0.35, 1.2, 0.2])\n                        thick_wall(sphere(d = 6, $fn = 12), 1.5);\n    }\n}\n\n// Stem that holds flowers\nmodule flower_stem(h = 20) {\n    color(\"lightgreen\")\n        cylinder(h = h, d1 = 2.5, d2 = 1.5, $fn = 8);\n}\n\n// One main branch with 2-3 leaves and optional flower\nmodule branch(len = 35, angle = 0, flower_here = true) {\n    color(\"darkgreen\") {\n        rotate([angle, 0, 0])\n            translate([0, 0, 5])\n                union() {\n                    // Main branch body (avoid overhangs)\n                    cylinder(h = len, d1 = 6, d2 = 4, $fn = 12);\n\n                    // Side leaves\n                    for (i = [1:3]) {\n                        rotate([0, 0, i*120])\n                            translate([5, 0, len * (0.3 + i*0.2)])\n                                rotate([0, -25, 0])\n                                    leaf_segment(10 + i, 18, 2);\n                    }\n\n                    // Flower at tip\n                    if (flower_here) {\n                        translate([0, 0, len + 1])\n                            union() {\n                                flower_stem(8);\n                                translate([0, 0, 9])\n                                    rotate([0, 0, 180])\n                                        flower(12);\n                            }\n                    }\n                }\n    }\n}\n\n// Pot\nmodule pot() {\n    difference() {\n        cylinder(h = 25, d1 = 50, d2 = 45, $fn = 48);\n        translate([0, 0, 2])\n            cylinder(h = 23, d1 = 46, d2 = 41, $fn = 48);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, 2])\n        cylinder(h = 3, d = 46, $fn = 48);\n}\n\n// Main plant assembly\nmodule epiphyllum_plant() {\n    pot();\n    translate([0, 0, 25]) soil();\n\n    // Central upright stem\n    color(\"darkgreen\")\n        cylinder(h = 18, d = 6, $fn = 12);\n\n    // First tier branches\n    for (a = [0:120:359])\n        rotate([0, 0, a])\n            translate([0, 0, 18])\n                branch(28, -30, false);\n\n    // Second tier branches\n    for (a = [60:120:359])\n        rotate([0, 0, a])\n            translate([0, 0, 35])\n                branch(22, -20, true);\n}\n\nepiphyllum_plant();",
    "renders": true
  },
  {
    "plant": "selenicereus",
    "openscad_code": "// Selenicereus (Night-Blooming Cereus) – realistic medium-complexity model\n// Overall height 110 mm, base Ø70 mm, suitable for resin or FDM printing\n// 2 mm wall everywhere; ribs and areoles modeled as positive geometry to avoid overhangs\n\nmodule cylinder2(r, h) cylinder(r = r, h = h, $fn = 24);   // quick alias\nmodule sphere2(r) sphere(r = r, $fn = 24);\n\n// ---------- Central stem ----------\nmodule central_stem() {\n    union() {\n        // Main trunk\n        cylinder2(r = 15, h = 50);\n        \n        // Ribs (6 ribs along the stem)\n        for (i = [0 : 5]) {\n            rotate([0, 0, i * 60])\n                translate([15, 0, 0])\n                    cube([4, 3, 50], center = true);\n        }\n    }\n}\n\n// ---------- Areole spines ----------\nmodule areole_spines(z) {\n    // 6 radial spines per areole\n    for (a = [0 : 60 : 300]) {\n        rotate([0, 0, a])\n            translate([17.5, 0, z])\n                rotate([90, 0, 0])\n                    cylinder2(r = 0.4, h = 3);\n    }\n}\n\n// ---------- Secondary stem segment ----------\nmodule segment(len, angle, rot) {\n    translate([0, 0, 5])\n        rotate([angle, rot, 0])\n            translate([0, 0, 25])\n                union() {\n                    // Stem body\n                    cylinder2(r = 10, h = len);\n                    \n                    // Ribs on segment\n                    for (i = [0 : 5]) {\n                        rotate([0, 0, i * 60])\n                            translate([10, 0, len / 2])\n                                cube([3, 2.5, len], center = true);\n                    }\n                    \n                    // Areoles every 10 mm\n                    for (z = [10 : 10 : len - 5]) {\n                        areole_spines(z);\n                    }\n                }\n}\n\n// ---------- Flower bud ----------\nmodule flower_bud() {\n    translate([0, 0, 105])\n        union() {\n            // Receptacle\n            cylinder2(r = 8, h = 5);\n            \n            // Sepals\n            for (i = [0 : 8]) {\n                rotate([0, 0, i * 40])\n                    translate([0, 8.5, 7.5])\n                        rotate([90, 0, 0])\n                            scale([1, 0.3, 1])\n                                cylinder2(r = 5, h = 1.5);\n            }\n            \n            // Petals (partially open)\n            for (i = [0 : 7]) {\n                rotate([0, 0, i * 45])\n                    translate([0, 9, 10])\n                        rotate([45, 0, 0])\n                            scale([1.2, 0.2, 1])\n                                cylinder2(r = 6, h = 1.2);\n            }\n        }\n}\n\n// ---------- Roots / pot base ----------\nmodule pot_base() {\n    difference() {\n        cylinder2(r = 35, h = 15);          // outer pot\n        cylinder2(r = 33, h = 15);          // inner hollow\n    }\n}\n\n// ---------- Assembly ----------\nunion() {\n    // Pot\n    pot_base();\n    \n    // Central stem\n    central_stem();\n    \n    // Areoles on main stem\n    for (z = [10 : 15 : 40]) {\n        areole_spines(z);\n    }\n    \n    // Two branching segments\n    segment(40, 30, 0);\n    segment(35, -25, 180);\n    \n    // Flower bud at the tip\n    flower_bud();\n}",
    "renders": true
  },
  {
    "plant": "disocactus",
    "openscad_code": "// Disocactus (rat-tail cactus) – realistic style, medium complexity\n// Approx. 110 mm tall, 2 mm wall thickness, 3D-printable\n\n$fn = 30;  // smooth curves\nwall = 2;  // printing wall thickness\n\n// Main pot with slight taper\nmodule pot() {\n    difference() {\n        cylinder(h = 35, r1 = 28, r2 = 25, center = false);\n        translate([0, 0, wall])\n            cylinder(h = 33, r1 = 26, r2 = 23, center = false);\n    }\n}\n\n// Drainage tray\nmodule tray() {\n    difference() {\n        cylinder(h = 4, r = 30, center = false);\n        translate([0, 0, wall])\n            cylinder(h = 4, r = 28, center = false);\n    }\n}\n\n// Single segment of a flattened stem (cladode)\nmodule segment(len = 20, wid = 12, thick = 5) {\n    scale([1, wid/len, thick/len])\n        sphere(d = len);\n}\n\n// Joint ring between segments\nmodule joint_ring(d = 5) {\n    cylinder(h = wall*1.5, r = d/2 + wall, center = true);\n}\n\n// One cascading stem built from repeated segments\nmodule stem(segs = 8, start_angle = 0) {\n    translate([0, 0, 35])  // top of pot\n    rotate([start_angle, 0, 0])\n    for(i = [0 : segs-1]) {\n        rotate([0, 15 + i*3, 30*i])  // gentle twist downward\n        translate([0, 0, -i*18])     // spacing\n        union() {\n            color(\"green\")\n            segment(len = 20 - i*0.8, wid = 12 - i*0.5, thick = 5);\n            color(\"darkolivegreen\")\n            joint_ring(d = 8 - i*0.3);\n        }\n    }\n}\n\n// Aerial roots for realism\nmodule aerial_root(stem_pos = 4) {\n    translate([0, 0, 35 - stem_pos*18])  // attach to stem\n    rotate([90 + 15*stem_pos, 0, 45*stem_pos])\n    cylinder(h = 15, r1 = 1.2, r2 = 0.5);\n}\n\n// Flower bud\nmodule flower() {\n    translate([0, 0, 35 - 5*18])\n    rotate([0, 60, 45])\n    color(\"crimson\")\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, 5, 0])\n        scale([1, 0.4, 0.4])\n        sphere(d = 8);\n    }\n}\n\n// Soil surface inside pot\nmodule soil() {\n    color(\"saddlebrown\")\n    translate([0, 0, 34])\n    cylinder(h = 3, r1 = 26, r2 = 23);\n}\n\n// Assemble\npot();\ntranslate([0, 0, 0])\n    tray();\nsoil();\n\n// Three main cascading stems at different angles\nstem(8, 20);\nstem(7, 90);\nstem(6, 200);\n\n// Add aerial roots along stems\nfor(p = [2, 4, 6]) aerial_root(p);\n\n// One flower near the tip of the longest stem\nflower();",
    "renders": true
  },
  {
    "plant": "aporoactus",
    "openscad_code": "// Aporoactus Plant - Realistic Style, Medium Complexity\n// Size: ~120mm tall, 3D printable with 2mm walls\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\npot_height = 40;\npot_radius = 35;\nstem_height = 80;\nstem_radius = 4;\nrib_count = 8;\nrib_width = 6;\nrib_height = 3;\nareole_spacing = 15;\nspine_length = 8;\nflower_radius = 12;\nflower_height = 15;\n\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h=pot_height, r=pot_radius, $fn=64);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h=pot_height-2, r=pot_radius-2, $fn=64);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h=3, r=5, $fn=16);\n    }\n    \n    // Pot rim\n    translate([0, 0, pot_height])\n        cylinder(h=5, r1=pot_radius, r2=pot_radius+2, $fn=64);\n}\n\nmodule soil() {\n    color(\"saddlebrown\")\n    translate([0, 0, 2])\n        cylinder(h=10, r=pot_radius-3, $fn=64);\n}\n\nmodule stem() {\n    color(\"darkolivegreen\")\n    union() {\n        // Main stem\n        translate([0, 0, pot_height+8])\n            cylinder(h=stem_height, r=stem_radius, $fn=16);\n        \n        // Ribs\n        for (i = [0:rib_count-1]) {\n            rotate([0, 0, i*360/rib_count])\n            translate([stem_radius, 0, pot_height+8])\n                cube([rib_width, rib_height, stem_height], center=true);\n        }\n    }\n}\n\nmodule areole_spine(x, y, z, angle) {\n    translate([x, y, z]) {\n        rotate([0, 0, angle]) {\n            // Areole base\n            color(\"wheat\")\n            sphere(r=1.5);\n            \n            // Main spine\n            color(\"ivory\")\n            translate([2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=spine_length, r=0.3);\n            \n            // Side spines\n            translate([1.5, 0, 0])\n                rotate([0, 90, 30])\n                    cylinder(h=spine_length*0.7, r=0.2);\n            translate([1.5, 0, 0])\n                rotate([0, 90, -30])\n                    cylinder(h=spine_length*0.7, r=0.2);\n        }\n    }\n}\n\nmodule spines() {\n    // Create spines along ribs\n    for (rib = [0:rib_count-1]) {\n        rib_angle = rib*360/rib_count;\n        for (h = [0:areole_spacing:stem_height-areole_spacing]) {\n            h_pos = pot_height+10+h;\n            areole_spine(\n                (stem_radius+rib_width/2)*cos(rib_angle),\n                (stem_radius+rib_width/2)*sin(rib_angle),\n                h_pos,\n                45\n            );\n        }\n    }\n}\n\nmodule flower() {\n    color(\"hotpink\")\n    translate([0, 0, pot_height+8+stem_height+5]) {\n        // Flower base\n        rotate([0, 0, 0])\n            cylinder(h=flower_height*0.3, r=flower_radius*0.8, $fn=32);\n        \n        // Petals\n        for (i = [0:11]) {\n            rotate([0, 0, i*30])\n            translate([flower_radius*0.7, 0, flower_height*0.3])\n                rotate([90, 0, 0])\n                    cylinder(h=flower_height*0.7, r1=flower_radius*0.3, r2=0, $fn=16);\n        }\n        \n        // Center\n        color(\"yellow\")\n        translate([0, 0, flower_height*0.3])\n            cylinder(h=flower_height*0.4, r=flower_radius*0.3, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    pot();\n    soil();\n    stem();\n    spines();\n    flower();\n}",
    "renders": true
  },
  {
    "plant": "leuchtenbergia",
    "openscad_code": "// Leuchtenbergia principis - Agave Cactus\n// Realistic medium-complexity model, 3D-printable\n\n$fn = 36;\n\n// Overall dimensions\npot_d = 60;\npot_h = 35;\nplant_h = 120;\n\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = pot_h, d1 = pot_d, d2 = pot_d * 0.9);\n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = pot_h - 2, d1 = pot_d - 4, d2 = pot_d * 0.9 - 4);\n    }\n    // Base rim\n    translate([0, 0, -1])\n        cylinder(h = 3, d = pot_d + 4);\n}\n\nmodule soil() {\n    color(\"#3A2E21\")\n    translate([0, 0, 2])\n        cylinder(h = 8, d1 = pot_d - 6, d2 = pot_d - 8);\n}\n\nmodule spine(length = 30, width = 3, thickness = 2) {\n    // Tapered spine with slight curve\n    hull() {\n        translate([0, 0, 0])\n            scale([1, 0.8, 1])\n                sphere(d = width);\n        translate([0, 0, length])\n            scale([0.3, 0.3, 1])\n                sphere(d = width * 0.5);\n    }\n}\n\nmodule tubercle(base_d = 12, height = 25) {\n    // Triangular tubercle with 3 spines\n    union() {\n        // Main body - elongated tetrahedron\n        hull() {\n            translate([0, 0, 0])\n                sphere(d = base_d);\n            translate([0, 0, height])\n                sphere(d = base_d * 0.3);\n        }\n        \n        // Three spines at angles\n        rotate([0, -30, 0])\n            translate([base_d/2, 0, height * 0.7])\n                rotate([0, 0, 120])\n                    spine(15, 2, 1.5);\n                    \n        rotate([0, 30, 0])\n            translate([-base_d/2, 0, height * 0.7])\n                rotate([0, 0, -120])\n                    spine(15, 2, 1.5);\n                    \n        rotate([0, 0, 180])\n            translate([0, base_d/2, height * 0.7])\n                spine(12, 2, 1.5);\n    }\n}\n\nmodule rosette() {\n    // Central growing point\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([0, 0, 10])\n                tubercle(10 + i * 1.5, 20 + i * 3);\n    }\n    \n    // Outer ring\n    for(i = [0:8]) {\n        rotate([0, 0, i * 40 + 20])\n            translate([8 + sin(i * 45) * 3, 0, 5])\n                rotate([0, 20 + sin(i * 30) * 10, 0])\n                    tubercle(8 + cos(i * 40) * 2, 18 + sin(i * 30) * 4);\n    }\n    \n    // Bottom ring\n    for(i = [0:10]) {\n        rotate([0, 0, i * 36])\n            translate([12 + cos(i * 50) * 2, 0, 2])\n                rotate([0, 40 + cos(i * 45) * 15, 0])\n                    tubercle(6 + sin(i * 35) * 1.5, 12 + cos(i * 25) * 3);\n    }\n}\n\n// Assembly\npot();\nsoil();\ntranslate([0, 0, 10])\n    rosette();",
    "renders": true
  },
  {
    "plant": "obregonia",
    "openscad_code": "// Obregonia cactus in realistic style\n// Medium complexity 3D printable model\n\n// Parameters\n$fn = 50;\nplant_height = 60;\nbase_diameter = 45;\nrib_count = 8;\nareole_size = 2.5;\nspike_length = 8;\nflower_size = 8;\n\n// Main stem\nmodule obregonia_stem() {\n    // Base\n    cylinder(h=plant_height*0.15, d1=base_diameter, d2=base_diameter*0.9, center=false);\n    \n    // Main body with ribs\n    translate([0, 0, plant_height*0.15])\n    difference() {\n        union() {\n            // Core cylinder\n            cylinder(h=plant_height*0.65, d=base_diameter*0.85, center=false);\n            \n            // Ribs\n            for (i = [0:rib_count-1]) {\n                rotate([0, 0, i*360/rib_count])\n                translate([base_diameter*0.35, 0, 0])\n                cube([base_diameter*0.15, base_diameter*0.1, plant_height*0.65], center=true);\n            }\n        }\n        \n        // Hollow center\n        translate([0, 0, -1])\n        cylinder(h=plant_height*0.7, d=base_diameter*0.5, center=false);\n    }\n    \n    // Top dome\n    translate([0, 0, plant_height*0.8])\n    difference() {\n        sphere(d=base_diameter*0.9);\n        translate([0, 0, -base_diameter*0.45])\n        cube([base_diameter, base_diameter, base_diameter], center=true);\n    }\n}\n\n// Areoles with spines\nmodule areole_spines(height) {\n    for (j = [1:4]) {\n        translate([0, 0, height*j/5])\n        for (i = [0:rib_count-1]) {\n            rotate([0, 0, i*360/rib_count + (j%2)*22.5])\n            translate([base_diameter*0.42, 0, 0])\n            union() {\n                // Areole\n                sphere(d=areole_size);\n                \n                // Spines\n                for (k = [0:5]) {\n                    rotate([0, 90, k*60])\n                    translate([areole_size*0.5, 0, 0])\n                    rotate([0, 0, -20 + k*7])\n                    cylinder(h=spike_length, d=0.5, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Flower\nmodule flower() {\n    translate([0, 0, plant_height*0.9])\n    union() {\n        // Center\n        sphere(d=flower_size*0.5);\n        \n        // Petals\n        for (i = [0:11]) {\n            rotate([0, 0, i*30])\n            translate([flower_size*0.3, 0, 0])\n            rotate([0, 90, 0])\n            scale([1, 0.6, 0.3])\n            cylinder(h=flower_size*0.7, d=flower_size*0.3);\n        }\n    }\n}\n\n// Roots\nmodule roots() {\n    difference() {\n        union() {\n            for (i = [0:3]) {\n                rotate([0, 0, i*120])\n                translate([base_diameter*0.2, 0, -plant_height*0.05])\n                rotate([90, 0, 0])\n                cylinder(h=plant_height*0.15, d1=base_diameter*0.3, d2=base_diameter*0.15);\n            }\n        }\n        translate([0, 0, -plant_height*0.05])\n        cylinder(h=plant_height*0.2, d=base_diameter*0.4, center=false);\n    }\n}\n\n// Assembly\nunion() {\n    // Plant base\n    roots();\n    \n    // Main cactus body\n    obregonia_stem();\n    \n    // Areoles and spines\n    areole_spines(plant_height*0.65);\n    \n    // Optional flower (uncomment for flowering plant)\n    // flower();\n}",
    "renders": true
  },
  {
    "plant": "thelocactus",
    "openscad_code": "// Thelocactus bicolor - realistic medium-complexity 3D model\n// Total height ≈ 80 mm, base diameter ≈ 55 mm\n\n$fn = 48;  // Smooth curves for 3D printing\n\n// Main stem\nmodule stem() {\n    // Central body - slightly flattened sphere\n    translate([0, 0, 25])\n        scale([1, 1, 0.7])\n        sphere(d = 45);\n    \n    // Top dome\n    translate([0, 0, 45])\n        scale([1, 1, 0.5])\n        sphere(d = 35);\n}\n\n// Single rib module\nmodule rib(height, angle, offset) {\n    rotate([0, 0, angle])\n    translate([offset, 0, 0])\n    difference() {\n        // Main rib body - tapered cylinder\n        cylinder(h = height, d1 = 12, d2 = 8, center = true);\n        \n        // Hollow center for printing efficiency\n        cylinder(h = height + 2, d1 = 8, d2 = 4, center = true);\n    }\n}\n\n// Create all ribs around stem\nmodule ribs() {\n    for (i = [0:15]) {\n        rib(35, i * 22.5, 18);\n    }\n}\n\n// Single areole with spines\nmodule areole(base_height, angle, rib_offset) {\n    rotate([0, 0, angle])\n    translate([rib_offset + 6, 0, base_height])\n    union() {\n        // Areole pad\n        sphere(d = 3);\n        \n        // Radial spines\n        for (j = [0:7]) {\n            rotate([0, 0, j * 45])\n            translate([2, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 8, d = 0.8, center = true);\n        }\n        \n        // Central spines\n        translate([0, 0, 1])\n        rotate([0, 0, 15])\n        cylinder(h = 12, d = 1.2);\n        \n        translate([0, 0, 1])\n        rotate([0, 0, -15])\n        cylinder(h = 12, d = 1.2);\n    }\n}\n\n// Place areoles along ribs\nmodule areoles() {\n    for (i = [0:15]) {\n        for (h = [10:10:40]) {\n            areole(h, i * 22.5, 18);\n        }\n    }\n}\n\n// Flower bud\nmodule flower() {\n    translate([0, 0, 55])\n    union() {\n        // Flower base\n        cylinder(h = 8, d = 8);\n        \n        // Petals\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([4, 0, 8])\n            rotate([30, 0, 0])\n            scale([1, 0.5, 0.1])\n            sphere(d = 8);\n        }\n    }\n}\n\n// Base for stability\nmodule base() {\n    difference() {\n        cylinder(h = 5, d = 60);\n        cylinder(h = 6, d = 50);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    stem();\n    ribs();\n    areoles();\n    flower();\n}",
    "renders": true
  },
  {
    "plant": "turbinicarpus",
    "openscad_code": "// Turbinicarpus cactus - realistic style, medium complexity\n// Height: ~80mm, Base diameter: ~45mm\n\n$fn = 36;\n\n// Main stem module\nmodule turbinicarpus_body() {\n    // Base sphere with slight flattening\n    translate([0, 0, 5]) \n        scale([1, 1, 0.8])\n        sphere(d = 45);\n    \n    // Top cone section\n    translate([0, 0, 40])\n        cylinder(h1 = 35, h2 = 0, r1 = 22, r2 = 5, center = true);\n    \n    // Central depression\n    translate([0, 0, 75])\n        rotate([180, 0, 0])\n        cylinder(h = 10, r1 = 8, r2 = 12);\n}\n\n// Tubercle (nipple) module - building block for ribs\nmodule tubercle(h, r_base, r_tip) {\n    hull() {\n        translate([0, 0, 0]) sphere(r = r_base);\n        translate([0, 0, h]) sphere(r = r_tip);\n    }\n}\n\n// Generate ribs along the body\nmodule ribs() {\n    for (i = [0:5:355]) {\n        rotate([0, 0, i]) {\n            // Base ribs\n            translate([20, 0, 20])\n                rotate([90, 0, 0])\n                tubercle(8, 4, 2);\n            \n            // Mid ribs\n            translate([18, 0, 35])\n                rotate([90, 0, 0])\n                tubercle(6, 3.5, 1.5);\n            \n            // Upper ribs\n            translate([15, 0, 50])\n                rotate([90, 0, 0])\n                tubercle(4, 3, 1);\n        }\n    }\n}\n\n// Areole module (woolly spots between tubercles)\nmodule areole() {\n    // Wool structure\n    difference() {\n        sphere(r = 2.5);\n        sphere(r = 2);\n    }\n    \n    // Central spine base\n    translate([0, 0, 2.5])\n        cylinder(h = 3, r = 0.8);\n}\n\n// Generate areoles along ribs\nmodule generate_areoles() {\n    for (rib = [0:30:359]) {\n        rotate([0, 0, rib]) {\n            // Lower areoles\n            for (h = [15:10:45]) {\n                translate([22, 0, h]) areole();\n            }\n            \n            // Upper areoles\n            for (h = [50:8:65]) {\n                translate([18, 0, h]) scale([0.8, 0.8, 0.8]) areole();\n            }\n        }\n    }\n}\n\n// Spine module\nmodule spine(len, thickness) {\n    translate([0, 0, 3])  // Start from areole\n        rotate([5 + rand(10), 0, 0])  // Slight upward angle\n        cylinder(h = len, r = thickness);\n}\n\n// Generate spines\nmodule generate_spines() {\n    seed = 42;\n    for (rib = [0:30:359]) {\n        rotate([0, 0, rib]) {\n            // Central spines\n            translate([22, 0, 25])\n                for (i = [0:2]) {\n                    rotate([0, 0, i*120 + rand(20)])\n                    spine(8 + rand(2), 0.3 + rand(0.1));\n                }\n            \n            // Radial spines\n            translate([22, 0, 35])\n                for (i = [0:5]) {\n                    rotate([0, 0, i*60 + rand(15)])\n                    spine(5 + rand(1.5), 0.2 + rand(0.05));\n                }\n            \n            // Upper spines (shorter)\n            translate([18, 0, 58])\n                for (i = [0:3]) {\n                    rotate([0, 0, i*90 + rand(30)])\n                    spine(3 + rand(1), 0.15 + rand(0.05));\n                }\n        }\n    }\n}\n\n// Helper function for random variation\nfunction rand(x) = (x * 0.3 * sin($children * 1234 + 567));\n\n// Root system for base\nmodule roots() {\n    for (i = [0:45:359]) {\n        rotate([0, 0, i]) {\n            translate([20, 0, 0])\n                rotate([90, 0, 0])\n                cylinder(h = 8, r1 = 2, r2 = 0.5);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base and roots\n    difference() {\n        union() {\n            turbinicarpus_body();\n            roots();\n        }\n        \n        // Hollow for printing\n        translate([0, 0, 5])\n            scale([0.9, 0.9, 0.9])\n            turbinicarpus_body();\n    }\n    \n    // External features\n    ribs();\n    \n    // Generate all areoles and spines\n    generate_areoles();\n    generate_spines();\n}",
    "renders": true
  },
  {
    "plant": "lophophora",
    "openscad_code": "// Lophophora williamsii (Peyote) - Realistic Style, Medium Complexity\n\n// Main parameters\nbase_diameter = 40;\nplant_height = 30;\nrib_count = 8;\nareole_spacing = 6;\nflower_offset = 8;\n\n// Base plant body\nmodule base_body() {\n    // Main spherical top with flattened bottom\n    difference() {\n        union() {\n            translate([0, 0, plant_height/2])\n                scale([1, 1, 0.7])\n                sphere(d=base_diameter, $fn=60);\n            \n            // Lower cylindrical base for stability\n            cylinder(h=plant_height/3, d1=base_diameter*0.9, d2=base_diameter*0.7, $fn=60);\n        }\n        \n        // Hollow out center for 3D printing\n        translate([0, 0, -5])\n            cylinder(h=plant_height+10, d=base_diameter-4, $fn=60);\n    }\n}\n\n// Individual rib structure\nmodule rib() {\n    difference() {\n        // Main rib body\n        translate([0, 0, plant_height/2])\n            scale([0.15, 1, 0.8])\n            sphere(d=base_diameter, $fn=60);\n        \n        // Create rib valley\n        translate([0, 0, plant_height/2-5])\n            scale([0.08, 0.9, 0.7])\n            sphere(d=base_diameter+2, $fn=60);\n    }\n}\n\n// Areole (aerial bud) with tufts\nmodule areole(height_pos) {\n    radius = base_diameter/2 - 3;\n    \n    // Main areole pad\n    translate([0, radius*cos(height_pos*30), height_pos])\n        rotate([90, 0, height_pos*30])\n        scale([1, 0.7, 0.3])\n        sphere(d=3, $fn=20);\n    \n    // Tufts of hair\n    for(i = [0:2]) {\n        translate([0, radius*cos(height_pos*30), height_pos+1])\n            rotate([90+i*20, 0, height_pos*30+i*120])\n            cylinder(h=2, d1=0.5, d2=0.2, $fn=8);\n    }\n}\n\n// Flower bud on top\nmodule flower() {\n    translate([0, 0, plant_height-2])\n    union() {\n        // Flower base\n        cylinder(h=3, d=6, $fn=20);\n        \n        // Petals\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n            translate([2.5, 0, 3])\n            rotate([30, 0, 0])\n            scale([0.4, 1, 0.3])\n            sphere(d=3, $fn=20);\n        }\n    }\n}\n\n// Root system base\nmodule root_base() {\n    difference() {\n        // Tap root\n        translate([0, 0, -5])\n            cylinder(h=10, d1=base_diameter/3, d2=base_diameter/4, $fn=20);\n        \n        // Side roots\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([base_diameter/6, 0, -3])\n            rotate([90, 0, 0])\n            cylinder(h=8, d=4, $fn=10);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base plant structure\n    base_body();\n    \n    // Ribs around the body\n    for(i = [0:rib_count-1]) {\n        rotate([0, 0, i*(360/rib_count)])\n        rib();\n    }\n    \n    // Areoles along ribs\n    for(h = [3:areole_spacing:plant_height-5]) {\n        for(i = [0:rib_count-1]) {\n            rotate([0, 0, i*(360/rib_count) + 22.5])\n            areole(h);\n        }\n    }\n    \n    // Central flower\n    flower();\n    \n    // Root system\n    root_base();\n}\n\n// Add drainage hole for potting\ntranslate([0, 0, -10])\n    cylinder(h=20, d=5, $fn=20);",
    "renders": true
  },
  {
    "plant": "ariocarpus",
    "openscad_code": "// Ariocarpus plant - medium complexity realistic style\n// Size: ~80mm diameter, 35mm height, 2mm wall thickness\n\n$fn = 36;\n\n// Main plant body\nmodule ariocarpus_body() {\n    // Central tubercle cluster base\n    difference() {\n        // Main rounded base\n        translate([0, 0, 5]) \n            scale([1, 1, 0.4])\n            sphere(d = 60);\n        \n        // Hollow center for 3D printing\n        translate([0, 0, 7]) \n            scale([1, 1, 0.4])\n            sphere(d = 56);\n    }\n}\n\n// Individual tubercle (leaf-like structure)\nmodule tubercle(height, angle, rotation, offset) {\n    translate([offset * cos(angle), offset * sin(angle), 0]) {\n        rotate([0, 0, rotation]) {\n            // Main tubercle body\n            translate([0, 0, 5]) {\n                difference() {\n                    // Outer shape - triangular prism with rounded top\n                    hull() {\n                        translate([0, 0, 0]) cylinder(h = height, d1 = 10, d2 = 6);\n                        translate([4, 0, height - 5]) sphere(d = 8);\n                        translate([-4, 0, height - 5]) sphere(d = 8);\n                        translate([0, 4, height - 5]) sphere(d = 8);\n                        translate([0, -4, height - 5]) sphere(d = 8);\n                    }\n                    \n                    // Hollow interior\n                    hull() {\n                        translate([0, 0, 2]) cylinder(h = height - 4, d1 = 6, d2 = 2);\n                        translate([2, 0, height - 5]) sphere(d = 4);\n                        translate([-2, 0, height - 5]) sphere(d = 4);\n                        translate([0, 2, height - 5]) sphere(d = 4);\n                        translate([0, -2, height - 5]) sphere(d = 4);\n                    }\n                }\n            }\n            \n            // Surface texture - small bumps\n            for (i = [0:2]) {\n                rotate([0, 0, i * 120]) \n                translate([3, 0, height - 2]) \n                sphere(d = 2);\n            }\n        }\n    }\n}\n\n// Root system base\nmodule root_base() {\n    difference() {\n        // Main root structure\n        cylinder(h = 8, d1 = 50, d2 = 30);\n        \n        // Hollow base\n        cylinder(h = 8, d1 = 46, d2 = 26);\n    }\n    \n    // Individual roots\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([18, 0, -2]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h = 15, d1 = 6, d2 = 3);\n                        cylinder(h = 15, d1 = 4, d2 = 1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Flower buds (characteristic woolly areoles)\nmodule flower_buds() {\n    for (i = [0:7]) {\n        angle = i * 51.4;\n        radius = 22;\n        translate([radius * cos(angle), radius * sin(angle), 20]) {\n            // Woolly center\n            color(\"white\") {\n                for (j = [0:5]) {\n                    rotate([0, 0, j * 60]) {\n                        translate([0, 0, 0]) \n                        rotate([90, 0, 0]) \n                        cylinder(h = 2, d1 = 1, d2 = 0.5);\n                    }\n                }\n            }\n            \n            // Areole base\n            sphere(d = 3);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Root system\n    root_base();\n    \n    // Main plant body\n    ariocarpus_body();\n    \n    // First ring of tubercles\n    for (i = [0:8]) {\n        angle = i * 40;\n        tubercle(15, angle, angle + 20, 15);\n    }\n    \n    // Second ring of tubercles\n    for (i = [0:6]) {\n        angle = i * 60 + 30;\n        tubercle(12, angle, angle - 10, 8);\n    }\n    \n    // Central tubercles\n    tubercle(10, 0, 0, 0);\n    tubercle(8, 180, 0, 0);\n    \n    // Flower buds\n    flower_buds();\n}",
    "renders": true
  },
  {
    "plant": "aztekium",
    "openscad_code": "// Aztekium ritteri – medium–complexity, printable, recognizable\n// Overall height ≈ 60 mm, max Ø ≈ 35 mm\n\n$fn = 36;            // smooth spheres / cylinders\n\n// ---------- parameters ----------\nbase_h      =  8;    // tuberous base\nrib_w       =  2.5;  // wall thickness for ribs\nrib_h       = 25;    // rib height above base\nrib_qty     =  5;    // number of vertical ribs\nnotch_d     =  0.8;  // shallow grooves between ribs\noffset      =  1.5;  // rib outward offset for subtle bulge\ntuft_r      =  2.5;  // small apical wool tufts\n\n// ---------- modules ----------\n\n// single vertical rib with slight outward bulge\nmodule rib() {\n    hull() {\n        translate([0, 0, 0])\n            cylinder(h = rib_h, r = rib_w/2, center=false);\n        translate([0, offset, rib_h])\n            cylinder(h = 1, r = rib_w/2+offset/3, center=false);\n    }\n}\n\n// shallow groove between ribs (subtractive)\nmodule notch() {\n    rotate([0, 90, 0])\n        cylinder(h = rib_w*2, r = notch_d, center=true);\n}\n\n// tiny wool tufts on top\nmodule tuft() {\n    for (a = [0:120:240])\n        rotate([0, 0, a])\n            translate([tuft_r*cos(30), tuft_r*sin(30), rib_h+0.5])\n                sphere(r = 1.2);\n}\n\n// ---------- main geometry ----------\nunion() {\n    // thick base\n    cylinder(h = base_h, r = 15, center=false);\n\n    // ribs arranged radially\n    for (i = [0:rib_qty-1])\n        rotate([0, 0, i*(360/rib_qty)])\n            translate([0, 0, base_h])\n                rib();\n\n    // subtractive notches between ribs\n    for (i = [0:rib_qty-1])\n        rotate([0, 0, i*(360/rib_qty)+(360/rib_qty)/2])\n            translate([0, 12, base_h+rib_h/2])\n                notch();\n\n    // apical wool tufts\n    tuft();\n}\n\n// ---------- subtle bottom chamfer for print bed adhesion ----------\ndifference() {\n    cylinder(h = 1.5, r = 15.5);\n    translate([0, 0, -0.1])\n        cylinder(h = 2, r = 14.5);\n}",
    "renders": true
  },
  {
    "plant": "geohintonia",
    "openscad_code": "// Geohintonia plant - realistic style, medium complexity\n// Characteristics: globular cactus with pronounced tubercles and woolly areoles\n\n// Main parameters\nbase_diameter = 50;\nheight_ratio = 0.8;\ntubercle_height = 8;\ntubercle_base = 12;\nareole_size = 3;\nwool_height = 2;\nwall_thickness = 2;\n\n// Main body module\nmodule main_body() {\n    difference() {\n        // Outer sphere\n        sphere(d = base_diameter, $fn = 64);\n        \n        // Hollow center\n        translate([0, 0, -wall_thickness/2])\n            sphere(d = base_diameter - wall_thickness*2, $fn = 64);\n        \n        // Flat base\n        translate([0, 0, -base_diameter/2])\n            cube([base_diameter, base_diameter, base_diameter/2], center = true);\n    }\n}\n\n// Single tubercle module\nmodule tubercle(pos_x, pos_y, pos_z, angle) {\n    translate([pos_x, pos_y, pos_z]) {\n        rotate([0, 0, angle]) {\n            // Main tubercle body - conical shape\n            cylinder(h1 = tubercle_height, r1 = tubercle_base/2, r2 = tubercle_base/3, $fn = 8);\n            \n            // Woolly areole on top\n            translate([0, 0, tubercle_height]) {\n                // Central wool\n                color(\"white\") {\n                    for(i = [0:3]) {\n                        rotate([0, 0, i * 90])\n                        translate([areole_size/4, 0, 0])\n                            cylinder(h = wool_height, r = areole_size/3, $fn = 6);\n                    }\n                }\n                \n                // Areole base\n                cylinder(h = wool_height/2, r = areole_size/2, $fn = 12);\n            }\n        }\n    }\n}\n\n// Generate tubercle positions in spiral pattern\nmodule generate_tubercles() {\n    rows = 8;\n    cols = 12;\n    \n    for(row = [0:rows-1]) {\n        angle_offset = row * 15;\n        radius = (base_diameter/2 - 5) * sin(row * 180/rows);\n        z_pos = -base_diameter/4 + row * (base_diameter/2) / rows;\n        \n        for(col = [0:cols-1]) {\n            angle = col * (360/cols) + angle_offset;\n            x_pos = radius * cos(angle);\n            y_pos = radius * sin(angle);\n            \n            // Skip tubercles near bottom\n            if(z_pos > -base_diameter/3) {\n                tubercle(x_pos, y_pos, z_pos, angle);\n            }\n        }\n    }\n}\n\n// Root system for stability\nmodule root_system() {\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([base_diameter/4, 0, -base_diameter/2 - 5]) {\n                rotate([90, 0, 0])\n                    cylinder(h = 10, r1 = 4, r2 = 2, $fn = 8);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main plant body\n    main_body();\n    \n    // Tubercles\n    generate_tubercles();\n    \n    // Root system\n    root_system();\n    \n    // Small apical depression\n    translate([0, 0, base_diameter/2 - 3]) {\n        cylinder(h = 5, r1 = 8, r2 = 5, $fn = 16);\n    }\n}",
    "renders": true
  },
  {
    "plant": "pterocactus",
    "openscad_code": "// Pterocactus - Realistic Style, Medium Complexity\n// Height ≈ 80 mm, suitable for 3D printing with 2 mm walls\n\n// Stem base\nmodule stem_base() {\n    difference() {\n        cylinder(h=25, d1=18, d2=22, $fn=48); // tapered trunk\n        translate([0,0,-1])\n            cylinder(h=27, d1=14, d2=18, $fn=48); // hollow core\n    }\n}\n\n// Single pad segment\nmodule pad_segment(r=10, h=6, angle=0) {\n    rotate([0,0,angle])\n    difference() {\n        scale([1.0, 0.7, 1])\n            cylinder(h=h, r=r, $fn=32); // oval pad\n        translate([0,0,-1])\n            scale([0.7, 0.5, 1.2])\n                cylinder(h=h+2, r=r-2, $fn=32); // hollow\n    }\n}\n\n// Areole with spines\nmodule areole() {\n    union() {\n        translate([0,0,1.5]) sphere(d=2.5, $fn=12); // areole bump\n        // 4 radial spines\n        for(a=[0:90:270]) {\n            rotate([0,0,a])\n            translate([1.5,0,1.5])\n            rotate([90,0,0])\n            cylinder(h=5, d=0.6, $fn=8);\n        }\n    }\n}\n\n// Branch with pads\nmodule branch(pads=3, start_angle=0, bend=20) {\n    rotate([start_angle, 0, 0]) {\n        for(i=[0:1:pads-1]) {\n            translate([0,0,i*8])\n            rotate([bend*i,0,0])\n            pad_segment(r=10-i, h=6);\n            // Areoles on edges\n            for(a=[0:60:300]) {\n                rotate([0,0,a])\n                translate([8-i*0.5,0,3+i*8])\n                areole();\n            }\n        }\n    }\n}\n\n// Flowers\nmodule flower() {\n    color(\"magenta\")\n    for(i=[0:45:315]) {\n        rotate([0,0,i])\n        translate([3,0,0])\n        scale([1,0.3,1])\n        sphere(d=4, $fn=12);\n    }\n    translate([0,0,2]) sphere(d=3, $fn=12);\n}\n\n// Main plant\nunion() {\n    // Base stem\n    stem_base();\n    \n    // First branch pair\n    translate([0,0,20])\n    branch(pads=3, start_angle=35, bend=25);\n    \n    translate([0,0,20])\n    rotate([0,0,180])\n    branch(pads=3, start_angle=35, bend=25);\n    \n    // Second branch pair\n    translate([0,0,35])\n    rotate([0,0,90])\n    branch(pads=2, start_angle=30, bend=20);\n    \n    translate([0,0,35])\n    rotate([0,0,270])\n    branch(pads=2, start_angle=30, bend=20);\n    \n    // Flowers on top\n    translate([0,0,48])\n    flower();\n}",
    "renders": true
  },
  {
    "plant": "cylindropuntia",
    "openscad_code": "// Cylindropuntia cholla cactus – medium-realistic, 3D-printable\n// Overall height ~100 mm, wall thickness 2 mm, no steep overhangs\n\n$fn = 36;               // smooth cylinders\nwall = 2;               // printable wall thickness\nsegH = 12;              // height of one stem segment\nsegR = 6;               // radius of one stem segment\njointR = 4;             // radius of narrower joints\n\n// ---- main trunk ----\nmodule trunk() {\n    union() {\n        // base segment\n        cylinder(h = segH, r1 = segR + wall, r2 = segR + wall, center = false);\n\n        // next segment\n        translate([0, 0, segH])\n            cylinder(h = segH, r1 = segR + wall, r2 = segR + wall, center = false);\n\n        // core voids for hollow prints\n        translate([0, 0, wall])\n            cylinder(h = segH - wall, r1 = segR, r2 = segR, center = false);\n        translate([0, 0, segH + wall])\n            cylinder(h = segH - wall, r1 = segR, r2 = segR, center = false);\n\n        // joint ring between segments\n        translate([0, 0, segH])\n            cylinder(h = wall, r1 = jointR + wall, r2 = jointR + wall, center = false);\n    }\n}\n\n// ---- single branch segment ----\nmodule branchSegment(len = segH * 2, startR = jointR + wall, endR = segR + wall) {\n    difference() {\n        union() {\n            // outer cone\n            cylinder(h = len, r1 = startR, r2 = endR, center = false);\n            // tiny sphere tip to remove overhang\n            translate([0, 0, len])\n                sphere(r = endR);\n        }\n        // hollow core\n        translate([0, 0, wall])\n            cylinder(h = len - wall * 2, r1 = startR - wall, r2 = endR - wall, center = false);\n    }\n}\n\n// ---- spine cluster ----\nmodule spineCluster() {\n    for (a = [0:60:359])\n        rotate([90, 0, a])\n            translate([0, segR + 1, 0])\n                rotate([0, 30, 0])\n                    cylinder(h = 5, r1 = 0.4, r2 = 0.2, center = false);\n}\n\n// ---- assemble plant ----\nmodule cylindropuntia() {\n    union() {\n        // central trunk\n        trunk();\n\n        // first branch pair\n        for (ang = [45, -45])\n            rotate([0, 0, ang])\n                translate([0, jointR + wall, segH + wall])\n                    rotate([30, 0, 0])\n                        branchSegment();\n\n        // second branch pair higher up\n        for (ang = [120, -120])\n            rotate([0, 0, ang])\n                translate([0, jointR + wall, segH * 2])\n                    rotate([25, 0, 0])\n                        branchSegment(len = segH * 1.8);\n\n        // spines on main segments\n        for (z = [segH / 2, segH * 1.5])\n            for (a = [30:30:330])\n                rotate([0, 0, a])\n                    translate([0, segR + wall, z])\n                        spineCluster();\n    }\n}\n\n// render\ncylindropuntia();",
    "renders": true
  },
  {
    "plant": "tacinga",
    "openscad_code": "// Tacinga (Opuntia) cactus plant - realistic medium complexity model\n// Characteristic features: paddle-shaped cladodes, areoles with glochids, small spines\n\n$fn=32; // Smooth curves for 3D printing\n\nmodule cladode(w=30, h=50, t=8) {\n    // Main paddle-shaped segment with gentle tapering\n    difference() {\n        // Main body - elliptical cylinder with rounded top\n        union() {\n            cylinder(h=h*0.8, d1=w, d2=w*0.9);  // Tapered main body\n            translate([0,0,h*0.8]) \n                scale([1, 0.6, 1]) sphere(d=w*0.9);  // Rounded end\n        }\n        \n        // Hollow interior for 3D printing (2mm walls)\n        translate([0,0,-1]) \n            cylinder(h=h+2, d1=w-4, d2=w*0.9-4);\n    }\n    \n    // Edge ridges for structural detail\n    for(i=[0:3]) {\n        rotate([0,0,i*90]) \n            translate([w/2-2, -2, 0]) \n                cube([4, 4, h*0.8]);\n    }\n}\n\nmodule areole_cluster(pos=[0,0,0], size=3) {\n    // Areole with glochids (fine bristles) and spines\n    translate(pos) {\n        // Base areole pad\n        sphere(d=size*2);\n        \n        // Central spines (2-3 per areole)\n        for(i=[0:2]) {\n            rotate([0, i*120, 0]) \n                translate([0,0,size]) \n                    cylinder(h=size*3, d1=size/3, d2=size/6);\n        }\n        \n        // Glochids (fine bristles in cluster)\n        for(i=[0:5]) {\n            rotate([0, i*60, 0]) \n                translate([0,0,size*0.8]) \n                    cylinder(h=size*2, d1=size/6, d2=0.1);\n        }\n    }\n}\n\nmodule main_stem() {\n    // Central vertical stem\n    difference() {\n        cylinder(h=80, d=15);\n        translate([0,0,-1]) cylinder(h=82, d=11); // Hollow center\n    }\n}\n\nmodule lower_cladodes() {\n    // Bottom two cladodes in opposite directions\n    translate([0,0,10]) {\n        rotate([0,0,45]) \n            rotate([0,90,0]) \n                cladode(25,40,6);\n        \n        rotate([0,0,-45]) \n            rotate([0,-90,0]) \n                cladode(25,40,6);\n    }\n}\n\nmodule upper_cladodes() {\n    // Top cladodes, smaller and angled upward\n    translate([0,0,50]) {\n        rotate([0,0,30]) \n            rotate([0,60,0]) \n                cladode(20,35,5);\n        \n        rotate([0,0,-30]) \n            rotate([0,-60,0]) \n                cladode(20,35,5);\n    }\n}\n\nmodule new_growth() {\n    // Small developing cladodes at top\n    translate([0,0,75]) {\n        rotate([0,0,15]) \n            rotate([0,45,0]) \n                scale([0.5,0.5,0.5]) \n                    cladode(15,25,4);\n    }\n}\n\n// Root system base\nmodule roots() {\n    difference() {\n        cylinder(h=10, d=20);\n        translate([0,0,-1]) cylinder(h=12, d=16);\n    }\n    \n    // Root protrusions\n    for(i=[0:3]) {\n        rotate([0,0,i*90]) \n            translate([8,0,2]) \n                rotate([90,0,0]) \n                    cylinder(h=15, d=4);\n    }\n}\n\n// Place areoles on cladodes\nmodule cladode_with_areoles(w,h,rot) {\n    rotate(rot) {\n        cladode(w,h,6);\n        \n        // Areoles along edges - realistic spacing\n        for(i=[0.2:0.2:0.8]) {\n            // Left edge\n            translate([-w/2+3, 0, h*i]) \n                areole_cluster([0,0,0], 2);\n            // Right edge\n            translate([w/2-3, 0, h*i]) \n                areole_cluster([0,0,0], 2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base and roots\n    translate([0,0,-10]) roots();\n    \n    // Main stem\n    main_stem();\n    \n    // Lower cladodes with areoles\n    translate([0,0,15]) {\n        cladode_with_areoles(28, 45, [0,0,45]);\n        cladode_with_areoles(28, 45, [0,0,-45]);\n    }\n    \n    // Upper cladodes\n    translate([0,0,50]) {\n        cladode_with_areoles(22, 35, [0,0,30]);\n        cladode_with_areoles(22, 35, [0,0,-30]);\n    }\n    \n    // New growth\n    translate([0,0,75]) \n        scale([0.6,0.6,0.6]) \n            cladode_with_areoles(18, 20, [0,0,15]);\n}",
    "renders": true
  },
  {
    "plant": "brasiliopuntia",
    "openscad_code": "// Brasiliopuntia (prickly pear cactus) - realistic medium complexity\n// Overall height ~100 mm\n\n// Parameters\n$fn = 32;\nstem_r = 6;\njoint_h = 3;\npad_thick = 2.5;\npad_w = 35;\npad_h = 45;\nspine_len = 3;\nspine_r = 0.4;\n\n// Main trunk\nmodule trunk() {\n    union() {\n        // Base cylinder\n        cylinder(h = 15, r1 = stem_r + 2, r2 = stem_r);\n        \n        // Upper joints\n        for (i = [0:1]) {\n            translate([0, 0, 15 + i * 15])\n            cylinder(h = 10, r = stem_r);\n        }\n    }\n}\n\n// Single pad (leaf-like cladode)\nmodule pad(h_scale = 1) {\n    difference() {\n        // Main oval pad\n        scale([1, 1, h_scale])\n        scale([pad_w, pad_thick, pad_h])\n        sphere();\n        \n        // Small indentations for realism\n        for (x = [-0.5:0.5:0.5]) {\n            for (z = [-0.5:0.5:0.5]) {\n                translate([x * pad_w * 0.4, 0, z * pad_h * 0.4])\n                scale([0.3, pad_thick + 1, 0.2])\n                sphere();\n            }\n        }\n    }\n    \n    // Areoles (spine clusters)\n    for (x = [-0.6:0.3:0.6]) {\n        for (z = [-0.7:0.3:0.7]) {\n            if (abs(x) > 0.2 || abs(z) > 0.2) {\n                translate([x * pad_w * 0.45, pad_thick - 0.5, z * pad_h * 0.45])\n                scale([0.8, 0.8, 0.8])\n                sphere(spine_r * 2);\n                \n                // Spines\n                for (a = [0:60:300]) {\n                    rotate([0, 90 - a, 0])\n                    translate([0, 0, spine_len])\n                    cylinder(h = spine_len, r = spine_r);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Trunk\n    trunk();\n    \n    // First tier pads\n    for (ang = [0:120:240]) {\n        rotate([0, 0, ang])\n        translate([stem_r, 0, 20])\n        rotate([0, 90, 0])\n        pad();\n    }\n    \n    // Second tier pads\n    for (ang = [60:120:300]) {\n        rotate([0, 0, ang])\n        translate([stem_r, 0, 30])\n        rotate([0, 90, 0])\n        pad(0.8);\n    }\n    \n    // Top pads\n    rotate([0, 0, 0])\n    translate([0, 0, 35])\n    pad(0.7);\n    \n    rotate([0, 0, 90])\n    translate([0, 0, 35])\n    pad(0.7);\n}",
    "renders": true
  },
  {
    "plant": "quibentia",
    "openscad_code": "// Quibentia plant - realistic style, medium complexity\n// Overall dimensions ~120mm height, 90mm width\n\n$fn = 36;\nwall_thickness = 2;\n\n// Main stem/trunk\nmodule stem() {\n    difference() {\n        // Main cylindrical stem\n        cylinder(h = 80, r1 = 6, r2 = 4, center = false);\n        // Hollow center for printing\n        translate([0, 0, wall_thickness]) \n            cylinder(h = 80 - wall_thickness*2, r1 = 6 - wall_thickness, r2 = 4 - wall_thickness, center = false);\n    }\n}\n\n// Triangular leaf segment\nmodule leaf_segment(width = 15, height = 20, thickness = 2) {\n    difference() {\n        // Triangular leaf shape\n        linear_extrude(height = thickness) \n            polygon(points = [[0, 0], [width/2, height], [-width/2, height]]);\n        // Hollow center\n        translate([0, 0, wall_thickness]) \n            linear_extrude(height = thickness - wall_thickness*2) \n                polygon(points = [[0, wall_thickness], [(width/2)-wall_thickness, height-wall_thickness], [-(width/2)+wall_thickness, height-wall_thickness]]);\n    }\n}\n\n// Full leaf with segments\nmodule leaf(rotation = 0, scale_factor = 1) {\n    rotate([0, rotation, 0]) {\n        scale([scale_factor, scale_factor, scale_factor]) {\n            union() {\n                // Central vein\n                translate([0, 0, -1]) \n                    cube([1.5, 40, 3], center = true);\n                \n                // Left segments\n                for(i = [0:4]) {\n                    translate([0, i*8, 0]) \n                        rotate([0, 0, -30]) \n                            leaf_segment(12 - i, 16 - i*2);\n                }\n                \n                // Right segments\n                for(i = [0:4]) {\n                    translate([0, i*8, 0]) \n                        rotate([0, 0, 30]) \n                            mirror([1, 0, 0]) \n                                leaf_segment(12 - i, 16 - i*2);\n                }\n                \n                // Tip\n                translate([0, 38, 0]) \n                    rotate([0, 0, -90]) \n                        leaf_segment(8, 12);\n            }\n        }\n    }\n}\n\n// Root structure\nmodule roots() {\n    union() {\n        for(i = [0:5]) {\n            rotate([0, 0, i*60]) \n                translate([0, 0, -5]) \n                    cylinder(h = 15, r1 = 3, r2 = 1);\n        }\n    }\n}\n\n// Branch node\nmodule branch_node(height = 40) {\n    translate([0, 0, height]) {\n        sphere(r = 4);\n        \n        // Left branch\n        rotate([0, 0, -45]) \n            translate([0, 0, 0]) \n                leaf(rotation = -30, scale_factor = 0.8);\n        \n        // Right branch\n        rotate([0, 0, 45]) \n            translate([0, 0, 0]) \n                leaf(rotation = 30, scale_factor = 0.8);\n        \n        // Top leaf\n        leaf(rotation = 0, scale_factor = 1.2);\n    }\n}\n\n// Base pot\nmodule pot() {\n    difference() {\n        // Pot shape\n        cylinder(h = 20, r1 = 25, r2 = 20);\n        // Hollow for soil\n        translate([0, 0, wall_thickness]) \n            cylinder(h = 20 - wall_thickness, r1 = 25 - wall_thickness, r2 = 20 - wall_thickness);\n        \n        // Drainage holes\n        for(i = [0:2]) {\n            rotate([0, 0, i*120]) \n                translate([15, 0, 0]) \n                    cylinder(h = 20, r = 2);\n        }\n    }\n}\n\n// Soil surface\nmodule soil() {\n    translate([0, 0, 19]) \n        cylinder(h = 2, r = 22);\n}\n\n// Complete plant assembly\nunion() {\n    // Pot\n    pot();\n    \n    // Soil\n    soil();\n    \n    // Stem\n    translate([0, 0, 20]) \n        stem();\n    \n    // Roots\n    translate([0, 0, 20]) \n        roots();\n    \n    // Branch nodes\n    branch_node(height = 35);\n    branch_node(height = 60);\n}",
    "renders": true
  },
  {
    "plant": "miqueliopuntia",
    "openscad_code": "// Miqueliopuntia Cactus - Realistic Style, Medium Complexity\n// Overall height ~80mm, width ~60mm\n\nmodule main_stem(h, r, segments) {\n    // Central segmented column\n    for(i=[0:segments-1]) {\n        translate([0,0,i*h/segments]) {\n            cylinder(h=h/segments+0.5, r1=r*0.9, r2=r, $fn=8);\n        }\n    }\n    \n    // Vertical ridges\n    for(i=[0:7]) {\n        rotate([0,0,i*45]) {\n            translate([r-1,0,0]) {\n                cube([2,2,h], center=false);\n            }\n        }\n    }\n}\n\nmodule pad_segment(w, h, thickness) {\n    // Main pad body\n    difference() {\n        scale([1, 0.8, 1]) sphere(d=w, $fn=6);\n        translate([0,0,-w/2]) cube([w*1.2, w*1.2, w/2], center=true);\n    }\n    \n    // Thicken for 3D printing\n    translate([0,0,-thickness/2]) scale([0.9, 0.7, 0.1]) sphere(d=w, $fn=6);\n    \n    // Areoles (raised dots)\n    for(theta=[0:60:300]) {\n        for(r=[w*0.3, w*0.5]) {\n            rotate([0,0,theta]) {\n                translate([r,0,thickness/2+0.5]) {\n                    sphere(d=1.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\nmodule spine_cluster(base_x, base_y, base_z, angle) {\n    translate([base_x, base_y, base_z]) {\n        rotate([0,0,angle]) {\n            // Central spine\n            rotate([90,0,0]) {\n                cylinder(h=8, r1=0.5, r2=0.3, $fn=4);\n            }\n            \n            // Side spines\n            for(i=[-20,20]) {\n                rotate([0,0,i]) {\n                    rotate([90,0,0]) {\n                        cylinder(h=6, r1=0.4, r2=0.2, $fn=4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main plant structure\nunion() {\n    // Base pot\n    difference() {\n        cylinder(h=15, r=25, $fn=32);\n        translate([0,0,2]) cylinder(h=13, r=23, $fn=32);\n    }\n    \n    translate([0,0,15]) {\n        // Soil\n        color(\"#8B4513\") sphere(d=48, $fn=32);\n        \n        // Main stem\n        translate([0,0,5]) {\n            main_stem(30, 8, 6);\n            \n            // First level pads\n            for(angle=[45,135,225,315]) {\n                rotate([0,0,angle]) {\n                    translate([12,0,20]) {\n                        rotate([0,-15,0]) {\n                            pad_segment(25, 8, 3);\n                            \n                            // Spines on pad\n                            for(spine_angle=[0,120,240]) {\n                                spine_cluster(10*cos(spine_angle), 10*sin(spine_angle), 3, spine_angle);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Second level pads\n            translate([0,0,35]) {\n                for(angle=[0,90,180,270]) {\n                    rotate([0,0,angle]) {\n                        translate([8,0,0]) {\n                            rotate([0,-25,0]) {\n                                scale([0.7,0.7,0.7]) {\n                                    pad_segment(20, 6, 2.5);\n                                    \n                                    // Smaller spines\n                                    for(spine_angle=[30,150,270]) {\n                                        spine_cluster(7*cos(spine_angle), 7*sin(spine_angle), 2.5, spine_angle);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Top pad\n            translate([0,0,50]) {\n                rotate([0,-10,0]) {\n                    scale([0.5,0.5,0.5]) {\n                        pad_segment(15, 5, 2);\n                        \n                        // Few spines on top\n                        for(spine_angle=[0,180]) {\n                            spine_cluster(5*cos(spine_angle), 5*sin(spine_angle), 2, spine_angle);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "plant": "pereskiopsis",
    "openscad_code": "// Pereskiopsis - a fast-growing cactus often used as grafting stock\n// Medium complexity realistic style, 3D-printable (no overhangs)\n\n// Overall scale factor for easy resizing\nscale_factor = 1;\n\n// Stem parameters\nstem_height = 60 * scale_factor;\nstem_diameter = 8 * scale_factor;\njoint_spacing = 20 * scale_factor;\nnum_joints = 3;\n\n// Leaf parameters\nleaf_length = 12 * scale_factor;\nleaf_width = 3 * scale_factor;\nleaf_thickness = 1.5 * scale_factor;\nleaves_per_joint = 2;\n\n// Areole (bud) parameters\nareole_size = 2 * scale_factor;\nareole_height = 1 * scale_factor;\n\n// Root parameters\nroot_length = 15 * scale_factor;\nroot_diameter = 4 * scale_factor;\nnum_roots = 4;\n\n// Main stem module\nmodule stem_segment(height, diameter) {\n    // Create cylindrical stem segment with slight taper\n    cylinder(h = height, d1 = diameter * 0.9, d2 = diameter, $fn = 16);\n}\n\n// Joint module (where leaves emerge)\nmodule joint(diameter) {\n    // Thickened joint area\n    translate([0, 0, 0])\n        cylinder(h = 4 * scale_factor, d = diameter * 1.3, $fn = 16);\n    \n    // Areoles (small bumps where spines/roots would grow)\n    for (i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([diameter * 0.6, 0, 2 * scale_factor])\n                cylinder(h = areole_height, d = areole_size, $fn = 8);\n    }\n}\n\n// Leaf module\nmodule leaf() {\n    // Simple elongated leaf shape\n    translate([0, 0, -leaf_thickness/2])\n        scale([leaf_length, leaf_width, leaf_thickness])\n            sphere(d = 1, $fn = 8);\n    \n    // Leaf tip\n    translate([leaf_length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = leaf_width/2, d1 = leaf_width, d2 = 0.5, $fn = 8);\n}\n\n// Root module\nmodule root() {\n    // Tapering root structure\n    rotate([90, 0, 0])\n        cylinder(h = root_length, d1 = root_diameter, d2 = root_diameter * 0.3, $fn = 8);\n}\n\n// Main plant assembly\nmodule pereskiopsis() {\n    union() {\n        // Base roots\n        for (i = [0:360/num_roots:359]) {\n            rotate([0, 0, i])\n                translate([0, 0, 0])\n                    root();\n        }\n        \n        // Stem segments with joints\n        for (j = [0:num_joints-1]) {\n            translate([0, 0, j * joint_spacing])\n                stem_segment(joint_spacing, stem_diameter);\n            \n            translate([0, 0, j * joint_spacing])\n                joint(stem_diameter);\n            \n            // Leaves at each joint\n            for (k = [0:180:180]) {\n                rotate([0, 0, k])\n                    translate([stem_diameter/2, 0, j * joint_spacing + 2 * scale_factor])\n                        rotate([0, -30, 0])\n                            leaf();\n            }\n        }\n        \n        // Top growing tip\n        translate([0, 0, num_joints * joint_spacing])\n            cylinder(h = 5 * scale_factor, d = stem_diameter * 0.8, $fn = 16);\n    }\n}\n\n// Render the plant\npereskiopsis();",
    "renders": true
  },
  {
    "plant": "pereskia",
    "openscad_code": "// Pereskia Plant - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Main parameters\nheight = 80;\nbase_radius = 25;\nstem_thickness = 4;\nleaf_thickness = 2;\nwall_thickness = 2;\n\nmodule stem_segment(h, r, angle = 0) {\n    rotate([0, angle, 0])\n    cylinder(h=h, r=r, $fn=8);\n}\n\nmodule leaf(length, width, thickness) {\n    // Main leaf blade\n    scale([length, width, thickness])\n    sphere(1, $fn=8);\n    \n    // Leaf stem\n    translate([length/2, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h=length/4, r=thickness/2, $fn=6);\n}\n\nmodule thorns(count, height) {\n    for(i=[0:count-1]) {\n        rotate([0, 0, i * 360/count])\n        translate([stem_thickness, 0, height * i/count])\n        rotate([30, 0, 0])\n        cylinder(h=3, r1=0.5, r2=0.1, $fn=4);\n    }\n}\n\nmodule branch(level, angle, length) {\n    if(level > 0) {\n        // Main branch segment\n        rotate([angle, 0, 0])\n        stem_segment(length, stem_thickness);\n        \n        // Add thorns\n        translate([0, 0, length/2])\n        thorns(3, length);\n        \n        // Add leaves\n        for(i=[0:1]) {\n            rotate([0, 0, i * 180 + 45])\n            translate([stem_thickness*2, 0, length/2])\n            rotate([0, 30, 0])\n            leaf(15, 8, leaf_thickness);\n        }\n        \n        // Recursive branches\n        translate([0, 0, length])\n        branch(level-1, angle + 25, length * 0.8);\n        translate([0, 0, length])\n        branch(level-1, angle - 25, length * 0.8);\n    }\n}\n\nmodule base() {\n    difference() {\n        // Main pot\n        cylinder(h=15, r=base_radius, $fn=32);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n        cylinder(h=15-wall_thickness, r=base_radius-wall_thickness, $fn=32);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n        cylinder(h=wall_thickness+2, r=3, $fn=16);\n    }\n    \n    // Soil surface\n    translate([0, 0, 14])\n    difference() {\n        cylinder(h=2, r=base_radius-1, $fn=32);\n        translate([0, 0, -1])\n        cylinder(h=4, r=base_radius-wall_thickness-1, $fn=32);\n    }\n}\n\nmodule main_stem() {\n    // Central trunk\n    for(i=[0:3]) {\n        translate([0, 0, i * 15])\n        stem_segment(15, stem_thickness + i);\n    }\n    \n    // Add thorns along trunk\n    for(i=[1:4]) {\n        translate([0, 0, i * 12])\n        thorns(4, 10);\n    }\n    \n    // Main branches\n    translate([0, 0, 45])\n    branch(3, 30, 20);\n    translate([0, 0, 40])\n    rotate([0, 0, 120])\n    branch(3, -25, 18);\n    translate([0, 0, 35])\n    rotate([0, 0, 240])\n    branch(3, 20, 22);\n}\n\n// Main assembly\ntranslate([0, 0, 0])\nbase();\n\ntranslate([0, 0, 15])\nmain_stem();",
    "renders": true
  },
  {
    "plant": "rhodocactus",
    "openscad_code": "// Rhodocactus plant (formerly Pereskia) - realistic medium-complexity model\n// Overall height ~100 mm, width ~80 mm, suitable for 3D printing\n\n// Main parameters\nstem_height = 100;\nstem_dia = 8;\nbranch_levels = 4;\nleaf_len = 18;\nleaf_wid = 12;\nleaf_thk = 2.4;\nflower_dia = 15;\nflower_petals = 5;\n\n// Structural stem\nmodule stem(h, d) {\n    // Hollow cylinder for 3D printing\n    difference() {\n        cylinder(h = h, d = d + 4, $fn = 16);\n        translate([0, 0, -1])\n            cylinder(h = h + 2, d = d, $fn = 16);\n    }\n}\n\n// Fleshy leaf with central vein\nmodule leaf(l, w, t) {\n    color(\"darkgreen\")\n    difference() {\n        // Main leaf body\n        scale([1, w/l, t/l])\n            sphere(l/2);\n        // Hollow for printability\n        scale([0.6, 0.6, 1.5])\n            sphere(l/2 * 0.9);\n        // Central vein depression\n        translate([0, -w/3, -t/2])\n            cube([l * 0.8, w/6, t + 0.1], center = true);\n    }\n}\n\n// Rose-like flower cluster\nmodule flower(d, petals) {\n    color(\"crimson\")\n    union() {\n        // Central disk\n        sphere(d/4);\n        // Petals arranged radially\n        for (i = [0:petals-1]) {\n            rotate([0, 0, i * 360/petals])\n                translate([d/3, 0, 0])\n                    rotate([0, 90, 0])\n                        scale([1, 1.5, 0.4])\n                            sphere(d/3);\n        }\n    }\n}\n\n// Thorn structures\nmodule thorn() {\n    color(\"brown\")\n    rotate([0, 90, 0])\n        cylinder(h = 4, d1 = 1.5, d2 = 0.5);\n}\n\n// Branch with leaves and flowers\nmodule branch(level, angle) {\n    // Main branch segment\n    rotate([0, 0, angle])\n        rotate([90 - level * 20, 0, 0])\n            cylinder(h = 25 - level * 3, d = 6, center = true);\n    \n    // Leaves along branch\n    for (i = [0:2]) {\n        rotate([0, 0, angle + i * 120])\n            translate([0, 0, 10 - i * 8])\n                rotate([45, 0, 0])\n                    leaf(leaf_len - level * 2, leaf_wid - level, leaf_thk);\n    }\n    \n    // Flowers at branch tips\n    if (level > 1) {\n        rotate([0, 0, angle])\n            translate([0, 0, 22 - level * 3])\n                flower(flower_dia - level, flower_petals);\n    }\n    \n    // Thorns\n    for (t = [0:3]) {\n        rotate([0, 0, angle + t * 90])\n            translate([0, 3.5, t * 6 - 6])\n                thorn();\n    }\n}\n\n// Root system base\nmodule roots() {\n    color(\"brown\")\n    difference() {\n        // Main root bulb\n        translate([0, 0, -5])\n            sphere(12);\n        // Hollow\n        sphere(8);\n        // Root extensions\n        for (r = [0:5]) {\n            rotate([0, 0, r * 60])\n                translate([8, 0, -5])\n                    rotate([45, 0, 0])\n                        cylinder(h = 15, d = 4);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Root base\n    roots();\n    \n    // Main stem\n    translate([0, 0, 5])\n        stem(stem_height, stem_dia);\n    \n    // Branching structure\n    for (level = [1:branch_levels]) {\n        // Primary branches\n        for (b = [0:2]) {\n            rotate([0, 0, b * 120])\n                translate([0, 0, level * 20])\n                    branch(level, 30 * (b % 2 == 0 ? 1 : -1));\n        }\n    }\n}",
    "renders": true
  },
  {
    "plant": "leuenbergeria",
    "openscad_code": "// Leuenbergeria plant (medium complexity, realistic style)\n// Overall height ~120 mm, designed for 3D printing with 2 mm walls\n\n// stem parameters\nstem_h = 70;\nstem_r = 4;\nstem_t = 2;\n\n// segment parameters\nseg_h = 8;\nseg_gap = 2;\nseg_n = floor(stem_h / (seg_h + seg_gap));\n\n// pad parameters\npad_r = 12;\npad_h = 4;\npad_t = 2;\n\n// areole parameters\nareole_r = 1.5;\nareole_h = 1.5;\n\n// spine parameters\nspine_len = 6;\nspine_r = 0.4;\n\n// flower parameters\nflower_r = 5;\nflower_h = 3;\nflower_n = 8;\n\n// 2 mm wall everywhere\n$fn = 36;\n\nmodule stem_segment(h, r, t) {\n    difference() {\n        cylinder(h = h, r = r, center = true);\n        translate([0, 0, -1])\n            cylinder(h = h + 2, r = r - t, center = true);\n    }\n}\n\nmodule areole_cluster() {\n    union() {\n        // central areole\n        translate([0, 0, 0])\n            cylinder(h = areole_h, r = areole_r);\n        // spines in star pattern\n        for (a = [0:60:300]) {\n            rotate([0, 0, a])\n                translate([areole_r * 2, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = spine_len, r = spine_r);\n        }\n    }\n}\n\nmodule pad_cluster() {\n    difference() {\n        // pad body\n        translate([0, 0, pad_h / 2])\n            cylinder(h = pad_h, r = pad_r);\n        // hollow center\n        translate([0, 0, -1])\n            cylinder(h = pad_h + 2, r = pad_r - pad_t);\n    }\n    \n    // areoles on pad edges\n    for (a = [30:30:359]) {\n        r = pad_r * 0.8;\n        translate([r * cos(a), r * sin(a), pad_h])\n            areole_cluster();\n    }\n}\n\nmodule flower() {\n    union() {\n        // central dome\n        translate([0, 0, flower_h / 2])\n            sphere(r = flower_h);\n        \n        // petals\n        for (i = [0:flower_n - 1]) {\n            rotate([0, 0, i * (360 / flower_n)])\n                translate([flower_r * 0.6, 0, flower_h * 0.6])\n                    scale([1, 0.6, 0.25])\n                        sphere(r = flower_r);\n        }\n    }\n}\n\n// build plant\nunion() {\n    // main stem\n    for (i = [0:seg_n - 1]) {\n        translate([0, 0, i * (seg_h + seg_gap) + seg_h / 2])\n            stem_segment(seg_h, stem_r, stem_t);\n    }\n    \n    // top flower\n    translate([0, 0, stem_h + flower_h / 2])\n        flower();\n    \n    // side pads\n    pad_angles = [45, 135, 225, 315];\n    for (i = [0:len(pad_angles) - 1]) {\n        rotate([0, 0, pad_angles[i]])\n            translate([stem_r * 1.2, 0, stem_h * 0.7])\n                rotate([90, 0, 0])\n                    pad_cluster();\n    }\n    \n    // lower pads\n    pad_angles2 = [0, 90, 180, 270];\n    for (i = [0:len(pad_angles2) - 1]) {\n        rotate([0, 0, pad_angles2[i]])\n            translate([stem_r * 1.2, 0, stem_h * 0.4])\n                rotate([90, 0, 0])\n                    pad_cluster();\n    }\n}\n\n// base support disk for print stability\ntranslate([0, 0, -1])\n    cylinder(h = 2, r = 10);",
    "renders": true
  },
  {
    "plant": "peireskiopsis",
    "openscad_code": "// Peireskiopsis Cactus Model - Realistic Style, Medium Complexity\n// 3D printable at 100mm height, wall thickness 2mm\n\n$fn = 36;\n\n// Main parameters\nheight = 100;\nbase_diameter = 35;\nsegment_height = 20;\nsegments = 5;\nspine_length = 2;\nspine_diameter = 0.8;\nareole_size = 1.5;\n\n// Base module for cactus structure\nmodule cactus_base() {\n    difference() {\n        // Main trunk\n        cylinder(h=height, d1=base_diameter, d2=base_diameter*0.7);\n        // Hollow center for 3D printing\n        translate([0, 0, 1.5])\n            cylinder(h=height-2, d1=base_diameter-4, d2=base_diameter*0.7-4);\n    }\n}\n\n// Individual cactus segment with ribs and areoles\nmodule cactus_segment(h, d, z_pos) {\n    union() {\n        // Main segment body\n        translate([0, 0, z_pos])\n            difference() {\n                cylinder(h=h, d=d);\n                translate([0, 0, 1])\n                    cylinder(h=h-1.5, d=d-4);\n            }\n        \n        // Ribs around the segment (8 ribs)\n        for(i=[0:7]) {\n            rotate([0, 0, i*45])\n                translate([d/2-2, -2, z_pos])\n                    cube([4, 4, h]);\n        }\n        \n        // Areoles with spines\n        for(i=[0:7]) {\n            for(j=[0:2]) {\n                rotate([0, 0, i*45])\n                    translate([d/2+1, 0, z_pos+j*(h/3)])\n                        union() {\n                            // Areole pad\n                            sphere(d=areole_size);\n                            \n                            // Spines (3 per areole)\n                            for(k=[0:2]) {\n                                rotate([0, k*120, 0])\n                                    translate([areole_size/2, 0, 0])\n                                        rotate([90, 0, 0])\n                                            cylinder(h=spine_length, d=spine_diameter);\n                            }\n                        }\n            }\n        }\n    }\n}\n\n// Roots system for base stability\nmodule roots() {\n    for(i=[0:5]) {\n        rotate([0, 0, i*72])\n            translate([base_diameter/2-5, -3, -5])\n                union() {\n                    // Root cylinder\n                    cylinder(h=15, d1=6, d2=3);\n                    // Root tip\n                    translate([0, 0, 15])\n                        sphere(d=3);\n                }\n    }\n}\n\n// Soil base\nmodule soil_base() {\n    difference() {\n        cylinder(h=10, d=base_diameter+20);\n        translate([0, 0, 2])\n            cylinder(h=12, d=base_diameter+16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Soil base\n    color(\"#8B4513\")\n        soil_base();\n    \n    // Roots\n    color(\"#654321\")\n        translate([0, 0, 0])\n            roots();\n    \n    // Main cactus\n    color(\"#2E8B57\")\n        cactus_base();\n    \n    // Segments\n    for(i=[1:segments]) {\n        segment_d = base_diameter - (i*3);\n        cactus_segment(segment_height, segment_d, i*segment_height);\n    }\n    \n    // Top segment (smaller)\n    color(\"#2E8B57\")\n        translate([0, 0, height-segment_height/2])\n            difference() {\n                cylinder(h=segment_height/2, d=base_diameter*0.5);\n                translate([0, 0, 1])\n                    cylinder(h=segment_height/2-1.5, d=base_diameter*0.5-4);\n            }\n}",
    "renders": true
  },
  {
    "plant": "maihuenia",
    "openscad_code": "// Maihuenia plant - realistic style, medium complexity\n// Designed for 3D printing with 2mm walls and no overhangs\n\n// Main parameters\nplant_height = 80;\npot_diameter = 40;\npot_height = 30;\nstem_thickness = 3;\npad_thickness = 2;\n\n// Pot module\nmodule pot() {\n    // Outer pot\n    difference() {\n        cylinder(h = pot_height, d1 = pot_diameter, d2 = pot_diameter * 0.8, $fn = 32);\n        translate([0, 0, 2])\n            cylinder(h = pot_height, d1 = pot_diameter - 4, d2 = pot_diameter * 0.8 - 4, $fn = 32);\n    }\n    \n    // Soil surface\n    translate([0, 0, pot_height - 2])\n        cylinder(h = 2, d = pot_diameter - 4, $fn = 32);\n}\n\n// Stem segment module\nmodule stem_segment(height, angle) {\n    rotate([angle, 0, 0])\n        cylinder(h = height, r = stem_thickness, $fn = 8);\n}\n\n// Pad module (cladode)\nmodule pad(length, width, thickness, angle, tilt) {\n    translate([0, 0, stem_thickness])\n    rotate([tilt, 0, angle])\n    scale([1, width/length, thickness/length])\n    difference() {\n        // Main pad shape\n        sphere(d = length, $fn = 16);\n        \n        // Flatten bottom\n        translate([0, 0, -length/2])\n            cube([length * 2, length * 2, length], center = true);\n        \n        // Add areoles (small bumps)\n        for(i = [1:3]) {\n            rotate([0, 0, i * 120])\n            translate([length * 0.35, 0, 0])\n                sphere(d = 2, $fn = 8);\n        }\n    }\n}\n\n// Spine module\nmodule spine(length) {\n    cylinder(h = length, r1 = 0.5, r2 = 0.1, $fn = 4);\n}\n\n// Main plant structure\nmodule maihuenia() {\n    union() {\n        // Pot\n        pot();\n        \n        // Main stem\n        translate([0, 0, pot_height])\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            union() {\n                // Vertical stem\n                stem_segment(plant_height * 0.3, 0);\n                \n                // Branches\n                for(j = [1:3]) {\n                    translate([0, 0, j * 15])\n                    rotate([0, 0, j * 45])\n                    stem_segment(20, 30);\n                    \n                    // Pads on branches\n                    translate([0, 0, j * 15 + 20])\n                    rotate([0, 0, j * 45])\n                    pad(15, 8, pad_thickness, 0, 0);\n                }\n                \n                // Pads on main stem\n                translate([0, 0, i * 10 + 10])\n                pad(20, 10, pad_thickness, 0, 15);\n            }\n        }\n        \n        // Spines on pads\n        translate([0, 0, pot_height + 10])\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([8 * cos(i * 72), 8 * sin(i * 72), 0])\n            for(j = [0:5]) {\n                rotate([0, 0, j * 60])\n                translate([10, 0, 2])\n                rotate([90, 0, 0])\n                spine(3);\n            }\n        }\n        \n        // Base rosette\n        translate([0, 0, pot_height])\n        for(i = [0:8]) {\n            rotate([0, 0, i * 45])\n            translate([0, 0, 0])\n            pad(25, 12, pad_thickness, 0, 30);\n        }\n    }\n}\n\n// Render the plant\nmaihuenia();",
    "renders": true
  },
  {
    "plant": "tunilla",
    "openscad_code": "// Tunilla cactus plant for 3D printing\n// Overall height ~120 mm, base diameter ~80 mm\n// Wall thickness 2 mm throughout\n\n$fn = 32;  // Smooth curves\n\n// Main trunk module\nmodule trunk() {\n    difference() {\n        // Outer trunk\n        cylinder(h = 40, d1 = 25, d2 = 20);\n        \n        // Hollow core\n        translate([0, 0, -1])\n            cylinder(h = 42, d1 = 21, d2 = 16);\n    }\n}\n\n// Single pad/cladode\nmodule pad(length = 30, width = 18, thickness = 8) {\n    difference() {\n        // Outer ellipsoid pad\n        scale([1, 0.6, 0.3])\n            sphere(d = width);\n        \n        // Hollow interior\n        scale([0.85, 0.5, 0.2])\n            sphere(d = width - 3);\n        \n        // Attachment point hole\n        translate([-length/2, 0, -thickness/2])\n            rotate([0, 90, 0])\n            cylinder(h = length, d = 6);\n    }\n}\n\n// Areole cluster (spine bases)\nmodule areole_cluster() {\n    for (i = [1:8]) {\n        rotate([0, 0, i * 45])\n        translate([8, 0, 0])\n        cylinder(h = 1.5, d = 2);\n    }\n}\n\n// Single spine\nmodule spine(height = 5) {\n    cylinder(h = height, d1 = 0.4, d2 = 0.1);\n}\n\n// Flower bud\nmodule flower() {\n    color(\"yellow\")\n    for (i = [1:5]) {\n        rotate([0, 0, i * 72])\n        translate([2, 0, 0])\n        rotate([90, 0, 0])\n        scale([1, 0.5, 1])\n        cylinder(h = 3, d1 = 2, d2 = 0);\n    }\n}\n\n// Base pot\nmodule pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = 25, d1 = 70, d2 = 60);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = 25, d1 = 66, d2 = 56);\n        \n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h = 3, d = 8);\n    }\n}\n\n// Soil surface\nmodule soil() {\n    color(\"saddlebrown\")\n    translate([0, 0, 24])\n    scale([1, 1, 0.3])\n    cylinder(h = 10, d = 66);\n}\n\n// Complete plant assembly\nunion() {\n    // Pot and soil\n    pot();\n    soil();\n    \n    // Main trunk emerging from soil\n    translate([0, 0, 24])\n    trunk();\n    \n    // First level pads\n    translate([0, 0, 64])\n    rotate([0, 0, 0])\n    pad(35, 22, 10);\n    \n    translate([0, 0, 64])\n    rotate([0, 0, 120])\n    pad(30, 20, 9);\n    \n    translate([0, 0, 64])\n    rotate([0, 0, 240])\n    pad(28, 19, 8);\n    \n    // Second level pads\n    translate([15, 0, 75])\n    rotate([30, 0, 45])\n    pad(25, 16, 7);\n    \n    translate([-10, 10, 78])\n    rotate([20, -20, 200])\n    pad(22, 15, 6);\n    \n    // Third level pads\n    translate([20, 5, 85])\n    rotate([45, 10, 30])\n    pad(20, 14, 5);\n    \n    // Areoles and spines on pads\n    for (angle = [45:120:315]) {\n        translate([0, 0, 64])\n        rotate([0, 0, angle])\n        translate([12, 0, 2])\n        areole_cluster();\n        \n        // Add spines to areoles\n        for (j = [1:8]) {\n            translate([0, 0, 64])\n            rotate([0, 0, angle])\n            translate([12, 0, 2])\n            rotate([0, 0, j * 45])\n            translate([2, 0, 1.5])\n            rotate([30, 0, 0])\n            spine(4);\n        }\n    }\n    \n    // Flowers on upper pads\n    translate([20, 5, 85])\n    rotate([45, 10, 30])\n    translate([8, 0, 3])\n    flower();\n    \n    translate([-10, 10, 78])\n    rotate([20, -20, 200])\n    translate([6, 0, 3])\n    flower();\n}",
    "renders": true
  },
  {
    "plant": "airampoa",
    "openscad_code": "// Airampoa (Ariocarpus retusus) - realistic style, medium complexity\n// Size: ~100mm diameter x 40mm height, 2mm wall thickness\n\n$fn = 32;\n\nmodule tubercle(x, y, z, angle, height, width) {\n    // Individual tubercle with realistic triangular shape\n    translate([x, y, z]) rotate([0, 0, angle]) {\n        hull() {\n            // Base triangle\n            translate([0, 0, 0]) cylinder(h=2, d1=width*1.2, d2=width, $fn=3);\n            // Upper point\n            translate([0, 0, height]) cylinder(h=1, d1=width*0.2, d2=0, $fn=3);\n        }\n    }\n}\n\nmodule central_body() {\n    // Main flattened spherical body\n    difference() {\n        scale([1, 1, 0.4]) sphere(d=80);\n        // Hollow center\n        scale([0.9, 0.9, 0.3]) sphere(d=80);\n    }\n    \n    // Top surface texture\n    for(i = [0:5]) {\n        rotate([0, 0, i*60]) {\n            for(j = [1:3]) {\n                translate([j*8, 0, 0]) \n                    cylinder(h=2, d=6, $fn=6);\n            }\n        }\n    }\n}\n\nmodule areole(x, y, z) {\n    // Woolly areole with spines\n    translate([x, y, z+2]) {\n        // Wool pad\n        color(\"white\") \n            sphere(d=3);\n        \n        // Spines in radial pattern\n        for(i = [0:7]) {\n            rotate([0, 0, i*45]) {\n                translate([1.5, 0, 0]) \n                    rotate([90, 0, 0]) \n                        cylinder(h=4, d1=0.3, d2=0.1);\n            }\n        }\n    }\n}\n\nmodule flower_bud() {\n    // Central flower bud\n    translate([0, 0, 18]) {\n        // Bud\n        color(\"lightpink\") \n            scale([1, 1, 1.5]) sphere(d=8);\n        \n        // Petals\n        for(i = [0:11]) {\n            rotate([0, 0, i*30]) {\n                translate([4, 0, 0]) \n                    rotate([0, 30, 0]) \n                        scale([1, 0.5, 0.1]) sphere(d=6);\n            }\n        }\n    }\n}\n\n// Main plant assembly\nunion() {\n    central_body();\n    \n    // Radial tubercles\n    for(angle = [0:30:359]) {\n        r = 25 + 10*sin(angle*3);\n        tubercle(\n            r*cos(angle), \n            r*sin(angle), \n            -5, \n            angle, \n            15 + 5*cos(angle*2), \n            8 + 2*sin(angle*3)\n        );\n    }\n    \n    // Areoles on tubercle tips\n    for(angle = [0:60:359]) {\n        r = 25;\n        areole(\n            r*cos(angle), \n            r*sin(angle), \n            10\n        );\n    }\n    \n    // Central flower\n    flower_bud();\n    \n    // Root system base\n    translate([0, 0, -10]) {\n        difference() {\n            cylinder(h=10, d=50);\n            cylinder(h=12, d=46);\n        }\n        \n        // Taproot\n        translate([0, 0, -5]) \n            cylinder(h=20, d1=20, d2=8);\n    }\n}",
    "renders": true
  },
  {
    "plant": "corryocactus",
    "openscad_code": "// Corryocactus plant model - realistic style, medium complexity\n// Features segmented columns with spines and detailed joints\n// Designed for 3D printing with 2mm wall thickness and no overhangs\n\n$fn = 32;\n\n// Main parameters\nbase_height = 15;\nsegment_height = 25;\nsegment_radius = 12;\nspine_length = 3;\nspine_radius = 0.5;\ntotal_segments = 5;\n\nmodule spine() {\n    // Individual spine - slightly curved for realism\n    rotate([0, 5, 0])\n    cylinder(h = spine_length, r1 = spine_radius, r2 = 0.3, center = true);\n}\n\nmodule spine_cluster() {\n    // Cluster of spines radiating from areole\n    for(i = [0:72:359]) {\n        rotate([0, 0, i])\n        translate([0, segment_radius - 1, 0])\n        rotate([90, 0, 0])\n        spine();\n    }\n}\n\nmodule rib() {\n    // Single rib along the column\n    hull() {\n        translate([0, 0, -segment_height/2])\n        sphere(r = segment_radius);\n        translate([0, 0, segment_height/2])\n        sphere(r = segment_radius);\n    }\n}\n\nmodule column_segment() {\n    // Main column segment with ribs and spines\n    union() {\n        // Core cylinder\n        cylinder(h = segment_height, r = segment_radius, center = true);\n        \n        // Add 8 ribs around the circumference\n        for(i = [0:45:359]) {\n            rotate([0, 0, i])\n            translate([0, 0, 0])\n            scale([1.15, 1.15, 1])\n            rib();\n        }\n        \n        // Areoles with spines at rib intersections\n        for(i = [0:45:359]) {\n            rotate([0, 0, i + 22.5])\n            translate([0, segment_radius, segment_height/2 - 5])\n            spine_cluster();\n            \n            rotate([0, 0, i + 22.5])\n            translate([0, segment_radius, -segment_height/2 + 5])\n            spine_cluster();\n        }\n    }\n}\n\nmodule joint() {\n    // Connection joint between segments\n    cylinder(h = 4, r = segment_radius * 0.8, center = true);\n    \n    // Add slight taper at top and bottom\n    translate([0, 0, 2])\n    cylinder(h = 2, r1 = segment_radius * 0.8, r2 = segment_radius * 0.6, center = true);\n    \n    translate([0, 0, -2])\n    cylinder(h = 2, r1 = segment_radius * 0.8, r2 = segment_radius * 0.6, center = true);\n}\n\nmodule main_plant() {\n    // Assemble the complete plant\n    union() {\n        // Base pot\n        translate([0, 0, base_height/2])\n        cylinder(h = base_height, r1 = segment_radius + 8, r2 = segment_radius + 5);\n        \n        // Add soil surface texture\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n            translate([random(0, segment_radius + 3), 0, base_height])\n            sphere(r = random(1, 2));\n        }\n        \n        // Main column segments\n        for(i = [0:total_segments-1]) {\n            translate([0, 0, base_height + segment_height/2 + i * (segment_height + 4)])\n            column_segment();\n            \n            // Add joint between segments\n            if(i < total_segments - 1) {\n                translate([0, 0, base_height + segment_height + 2 + i * (segment_height + 4)])\n                joint();\n            }\n        }\n        \n        // Add slight natural tilt\n        rotate([random(-2, 2), random(-2, 2), 0])\n        children();\n    }\n}\n\n// Create the plant with slight random variation\nmain_plant();",
    "renders": true
  },
  {
    "plant": "browningia",
    "openscad_code": "// Browningia cactus (realistic, medium complexity)\n// Overall height: 120 mm, base diameter: 45 mm\n\nmodule spine() {\n    // Single spine, 3 mm long, 0.8 mm base\n    cylinder(h = 3, r1 = 0.8, r2 = 0.1, $fn = 6);\n}\n\nmodule spine_cluster() {\n    // Cluster of 6-8 spines radiating from areole\n    union() {\n        for (a = [0:60:300]) {\n            rotate([0, 0, a])\n            translate([1.5, 0, 0])\n            rotate([0, -15, 0])\n            spine();\n        }\n    }\n}\n\nmodule areole() {\n    // Cushion-like areole, 3 mm diameter, 1 mm thick\n    translate([0, 0, -0.5])\n    cylinder(h = 1, r = 1.5, $fn = 12);\n    // Small spines\n    translate([0, 0, 0.5])\n    spine_cluster();\n}\n\nmodule rib() {\n    // One vertical rib with slight curvature\n    // Height: 100 mm, width: 6 mm, thickness: 3 mm\n    linear_extrude(height = 100, twist = -5, convexity = 4)\n    offset(delta = 1.5)\n    polygon(points = [[0, 0], [3, 0], [3, 80], [0, 85]]);\n}\n\nmodule main_stem() {\n    // Main columnar stem, 100 mm tall\n    union() {\n        // Core cylinder\n        cylinder(h = 100, r = 15, $fn = 20);\n        \n        // Add 8 ribs around circumference\n        for (i = [0:45:315]) {\n            rotate([0, 0, i])\n            translate([15, 0, 0])\n            rib();\n        }\n        \n        // Areoles along ribs\n        for (i = [0:45:315]) {\n            for (h = [15:15:90]) {\n                rotate([0, 0, i])\n                translate([19, 0, h])\n                areole();\n            }\n        }\n    }\n}\n\nmodule offset_stem() {\n    // Smaller offset stem growing from base\n    translate([20, 0, 10])\n    rotate([0, -15, 0])\n    cylinder(h = 50, r = 8, $fn = 16);\n    \n    // Rib details on offset stem\n    for (i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([8, 0, 10])\n        rotate([0, -15, 0])\n        cylinder(h = 50, r1 = 2, r2 = 1, $fn = 6);\n    }\n    \n    // Areoles on offset stem\n    for (i = [0:60:300]) {\n        for (h = [20:15:50]) {\n            rotate([0, 0, i])\n            translate([10, 0, h])\n            rotate([0, -15, 0])\n            areole();\n        }\n    }\n}\n\nmodule base() {\n    // Flat base for stability, 2 mm thick\n    cylinder(h = 2, r = 25, $fn = 32);\n}\n\n// Assemble the cactus\nunion() {\n    base();\n    translate([0, 0, 2])\n    main_stem();\n    offset_stem();\n}",
    "renders": true
  },
  {
    "plant": "lepidocoryphantha",
    "openscad_code": "// Lepidocoryphantha cactus - medium complexity realistic model\n// Characteristics: globular body, spiral tubercles, central spines, radial spines\n// Size: 80mm diameter, 65mm height\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main parameters\nbody_d = 60;           // Main body diameter\nbody_h = 45;           // Body height\ntubercle_h = 8;        // Tubercle height\ntubercle_w = 12;       // Tubercle width\nspine_base_d = 1.5;    // Spine base diameter\nspine_len = 12;        // Spine length\nwall_t = 2;            // Wall thickness for 3D printing\n\n// Main plant body - slightly flattened sphere\nmodule main_body() {\n    difference() {\n        // Outer body\n        scale([1, 1, 0.8])\n            sphere(d = body_d);\n        \n        // Hollow interior for printing\n        translate([0, 0, wall_t])\n            scale([1, 1, 0.8])\n                sphere(d = body_d - 2*wall_t);\n        \n        // Flat bottom for stable printing\n        translate([0, 0, -body_h/2])\n            cube([body_d+2, body_d+2, body_h], center=true);\n    }\n}\n\n// Individual tubercle (nipple-like protrusions)\nmodule tubercle(height) {\n    difference() {\n        // Main tubercle shape\n        union() {\n            // Base cone\n            cylinder(h = height*0.7, d1 = tubercle_w, d2 = tubercle_w*0.8, center=true);\n            \n            // Top dome\n            translate([0, 0, height*0.35])\n                sphere(d = tubercle_w*0.8);\n        }\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h = height+2, d1 = tubercle_w-2*wall_t, d2 = tubercle_w-2*wall_t-2, center=true);\n    }\n}\n\n// Spine cluster - 1 central spine + 6-8 radial spines\nmodule spine_cluster() {\n    union() {\n        // Central spine (longest)\n        translate([0, 0, tubercle_h])\n            rotate([0, 90, 0])\n                cylinder(h = spine_len*1.5, d = spine_base_d*1.2);\n        \n        // Radial spines in circle\n        for(i = [0:7]) {\n            rotate([0, 0, i*45])\n                translate([spine_base_d*2.5, 0, tubercle_h*0.8])\n                    rotate([0, 75, 0])\n                        cylinder(h = spine_len, d = spine_base_d);\n        }\n    }\n}\n\n// Complete tubercle with spines\nmodule full_tubercle(angle, elevation, rotation) {\n    rotate([0, elevation, rotation])\n        translate([body_d/2 * cos(angle), body_d/2 * sin(angle), 0])\n            rotate([90, 0, angle])\n                union() {\n                    tubercle(tubercle_h);\n                    spine_cluster();\n                }\n}\n\n// Generate spiral pattern of tubercles\nmodule cactus_body() {\n    union() {\n        main_body();\n        \n        // Fibonacci spiral for tubercle placement\n        for(i = [0:34]) {\n            angle = i * 137.5;  // Golden angle\n            elevation = 20 * sin(i * 0.3);\n            rotation = i * 30;\n            full_tubercle(angle, elevation, rotation);\n        }\n    }\n}\n\n// Base platform for stability\nmodule base() {\n    difference() {\n        cylinder(h = 8, d = body_d + 20);\n        cylinder(h = 10, d = body_d + 16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Position cactus on base\n    translate([0, 0, 8])\n        cactus_body();\n    \n    // Add stable base\n    base();\n}",
    "renders": true
  },
  {
    "plant": "cochemiea",
    "openscad_code": "// Cochemiea plant in realistic style\n// Characteristic ribs, areoles, spines and flower\n\n$fn = 36;\n\n// Main parameters\nbase_height = 12;\nbody_height = 70;\nbody_diameter = 45;\nribs = 13;\nspines_per_areole = 5;\nflower_offset = 8;\n\nmodule spine() {\n    // Central spine\n    color(\"slategray\")\n    translate([0,0,-1])\n    cylinder(h=8, d1=0.8, d2=0.2, $fn=8);\n    \n    // Radial spines\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([0.5,0,0])\n        rotate([90-15, 0, 0])\n        color(\"slategray\")\n        cylinder(h=6, d1=0.6, d2=0.2, $fn=8);\n    }\n}\n\nmodule areole() {\n    difference() {\n        // Soft wool pad\n        color(\"ivory\")\n        sphere(d=2.5);\n        \n        // Recess for spines\n        translate([0,0,-1])\n        sphere(d=2);\n    }\n    \n    // Insert spines\n    translate([0,0,1])\n    spine();\n}\n\nmodule rib() {\n    // Single rib surface with gentle curve\n    hull() {\n        translate([0,0,0])\n        sphere(d=3);\n        translate([0,body_height*0.3,body_diameter*0.4])\n        sphere(d=4);\n        translate([0,body_height*0.7,body_diameter*0.45])\n        sphere(d=3.5);\n        translate([0,body_height,0])\n        sphere(d=2);\n    }\n}\n\nmodule body() {\n    union() {\n        // Base\n        color(\"saddlebrown\")\n        cylinder(h=base_height, d=body_diameter+6, $fn=ribs*2);\n        \n        // Main body ribs\n        for(i=[0:ribs-1]) {\n            rotate([0,0,i*360/ribs])\n            translate([body_diameter/2-2, 0, base_height])\n            color(\"darkgreen\")\n            rib();\n        }\n        \n        // Top dome\n        translate([0,0,base_height+body_height])\n        color(\"darkgreen\")\n        sphere(d=body_diameter);\n    }\n}\n\nmodule areoles() {\n    // Place areoles along ribs\n    for(rib=[0:ribs-1]) {\n        angle = rib*360/ribs;\n        \n        // Areoles along each rib\n        for(level=[0:3]) {\n            height = base_height + 10 + level*15;\n            radius = body_diameter/2 - 3 + level*2;\n            \n            rotate([0,0,angle])\n            translate([radius, 0, height])\n            areole();\n        }\n    }\n}\n\nmodule flower() {\n    // Flower base\n    color(\"crimson\")\n    translate([0,0,base_height+body_height+flower_offset])\n    sphere(d=8);\n    \n    // Petals\n    for(i=[0:11]) {\n        rotate([0,0,i*30])\n        translate([0,5,base_height+body_height+flower_offset])\n        rotate([30,0,0])\n        color(\"pink\")\n        scale([1,1,0.3])\n        cylinder(h=10, d1=5, d2=0, $fn=3);\n    }\n    \n    // Stamens\n    for(i=[0:8]) {\n        rotate([0,0,i*45])\n        translate([0,2,base_height+body_height+flower_offset+3])\n        color(\"yellow\")\n        cylinder(h=4, d=0.5);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    areoles();\n    flower();\n}",
    "renders": true
  },
  {
    "plant": "glandulicactus",
    "openscad_code": "// Glandulicactus - medium complexity with realistic proportions\n// Overall height: 120 mm, suitable for 3D printing\n\n// Parameters\nstem_h = 120;          // Main stem height\nbase_r = 25;           // Base radius\njoint_r = 8;           // Joint radius\nareole_r = 3;          // Areole (spine cluster) radius\nspine_l = 4;           // Spine length\nrib_n = 8;             // Number of ribs\nrib_depth = 5;         // Rib depth\npot_h = 30;            // Pot height\npot_r = 35;            // Pot radius\n\n// Main union\nunion() {\n    // Flower pot\n    translate([0, 0, -pot_h/2])\n    cylinder(h = pot_h, r1 = pot_r, r2 = pot_r * 0.8, $fn = 64);\n    \n    // Stem base\n    translate([0, 0, 0])\n    cylinder(h = stem_h, r = base_r, $fn = 6);\n    \n    // Ribs using difference\n    for(i = [0:rib_n-1]) {\n        rotate([0, 0, i * 360/rib_n])\n        translate([0, 0, 0])\n        difference() {\n            cylinder(h = stem_h, r = base_r + rib_depth, $fn = 6);\n            translate([0, 0, -1])\n            cylinder(h = stem_h + 2, r = base_r - 2, $fn = 6);\n        }\n    }\n    \n    // Areoles (spine clusters) along ribs\n    for(i = [0:rib_n-1]) {\n        for(j = [1:5]) {\n            rotate([0, 0, i * 360/rib_n + 15])\n            translate([base_r + rib_depth/2, 0, j * (stem_h/6)])\n            scale([1, 0.7, 1])\n            sphere(areole_r);\n            \n            // Spines\n            for(k = [0:5]) {\n                rotate([0, 0, k * 60])\n                translate([areole_r, 0, 0])\n                rotate([90, 0, 0])\n                cylinder(h = spine_l, r = 0.3, $fn = 8);\n            }\n        }\n    }\n    \n    // Apical wool\n    translate([0, 0, stem_h])\n    sphere(areole_r * 2);\n    \n    // Offset branches\n    branch(0, 45, 0.7, 60);\n    branch(120, 30, 0.5, 40);\n    branch(240, 60, 0.6, 50);\n}\n\n// Branch module\nmodule branch(angle, tilt, scale_factor, height) {\n    rotate([0, 0, angle])\n    rotate([0, tilt, 0])\n    translate([base_r * scale_factor, 0, height/2])\n    cylinder(h = height, r = base_r * scale_factor * 0.6, $fn = 6);\n    \n    // Branch ribs\n    for(i = [0:rib_n-1]) {\n        rotate([0, 0, angle])\n        rotate([0, tilt, 0])\n        rotate([0, 0, i * 360/rib_n])\n        translate([base_r * scale_factor, 0, height/2])\n        difference() {\n            cylinder(h = height, r = base_r * scale_factor * 0.6 + rib_depth * scale_factor, $fn = 6);\n            translate([0, 0, -1])\n            cylinder(h = height + 2, r = base_r * scale_factor * 0.6 - 2, $fn = 6);\n        }\n    }\n    \n    // Branch areoles\n    for(i = [0:rib_n-1]) {\n        for(j = [1:3]) {\n            rotate([0, 0, angle])\n            rotate([0, tilt, 0])\n            rotate([0, 0, i * 360/rib_n + 15])\n            translate([base_r * scale_factor * 0.6 + rib_depth * scale_factor/2, 0, j * (height/4)])\n            scale([1, 0.7, 1])\n            sphere(areole_r * scale_factor);\n            \n            // Branch spines\n            for(k = [0:3]) {\n                rotate([0, 0, angle])\n                rotate([0, tilt, 0])\n                rotate([0, 0, i * 360/rib_n + 15])\n                rotate([0, 0, k * 90])\n                translate([base_r * scale_factor * 0.6 + rib_depth * scale_factor/2 + areole_r * scale_factor, 0, j * (height/4)])\n                rotate([90, 0, 0])\n                cylinder(h = spine_l * scale_factor, r = 0.2, $fn = 8);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "plant": "hamatocactus",
    "openscad_code": "// Hamatocactus (Fishhook Cactus) – medium-complexity realistic style\n// 3D-printable, ~80 mm tall, 2 mm wall thickness assumed for ribs & spines\n\n$fn = 36;\n\nmodule spine() {\n    // Single needle-like spine, 0.5 mm thick\n    color(\"gray80\")\n        cylinder(h = 8, d1 = 0.5, d2 = 0.2);\n}\n\nmodule areole_spine_cluster() {\n    // Central spine + 4 radial spines in a star pattern\n    union() {\n        translate([0, 0, 0]) rotate([90, 0, 0]) scale([1, 1, 1.5]) spine();\n        for(i = [0:4])\n            rotate([0, 0, i*72])\n                translate([2, 0, 0]) rotate([90, 0, 0]) scale([0.8, 0.8, 1]) spine();\n    }\n}\n\nmodule rib() {\n    // One vertical rib, 2 mm thick at base\n    difference() {\n        // main rib body\n        hull() {\n            translate([-1, 0, 0]) cylinder(h = 40, d = 2);\n            translate([1, 0, 0]) cylinder(h = 40, d = 2);\n        }\n        // hollow inside for 2 mm shell\n        translate([0, 0, -1]) scale([0.8, 0.8, 1.05])\n            hull() {\n                translate([-1, 0, 0]) cylinder(h = 40, d = 2);\n                translate([1, 0, 0]) cylinder(h = 40, d = 2);\n            }\n    }\n}\n\nmodule cactus_body() {\n    // Body formed by 13 ribs radiating around a hollow core\n    difference() {\n        union() {\n            // core cylinder\n            cylinder(h = 40, d = 20, $fn = 36);\n            // ribs around core\n            for(i = [0:12])\n                rotate([0, 0, i*360/13])\n                    translate([10, 0, 0]) rotate([0, 0, 0])\n                        rib();\n        }\n        // hollow core\n        cylinder(h = 42, d = 16, $fn = 36);\n    }\n}\n\nmodule areoles() {\n    // Place areoles with spine clusters along each rib\n    ribs = 13;\n    levels = 5;\n    for(i = [0:ribs-1])\n        for(j = [1:levels]) {\n            rotate([0, 0, i*360/ribs])\n                translate([10, 0, j*35/levels])\n                    rotate([0, 90, 0])\n                        areole_spine_cluster();\n        }\n}\n\nmodule soil_disk() {\n    // Simple disk for base, 2 mm thick\n    cylinder(h = 2, d = 30);\n}\n\n// Assemble the plant\nunion() {\n    color(\"darkgreen\") cactus_body();\n    color(\"gray50\") areoles();\n    color(\"saddlebrown\") translate([0, 0, -2]) soil_disk();\n}",
    "renders": true
  },
  {
    "plant": "echinocereus",
    "openscad_code": "// Echinocereus cactus - 3D printable medium complexity model\n// Total height 120 mm, suitable for FDM printing\n\nheight = 120;               // overall height\nbase_r = 25;                // base radius\nrib_count = 14;             // number of ribs\nspine_len = 5;              // spine length\nwall = 2;                   // wall thickness for printability\n$fn = 36;                   // cylinder resolution\n\n// Main stem (hollow for printing)\nmodule stem() {\n    difference() {\n        cylinder(h = height, r = base_r);\n        translate([0,0,-1])\n            cylinder(h = height+2, r = base_r - wall);\n    }\n}\n\n// Single rib profile (triangular cross-section)\nmodule rib_profile() {\n    hull() {\n        translate([0, 0, 0]) sphere(d = wall*2);\n        translate([0, 5, 5]) sphere(d = wall*2);\n        translate([0, 0, 10]) sphere(d = wall*2);\n    }\n}\n\n// Ribs running along the stem\nmodule ribs() {\n    for(i = [0:rib_count-1]) {\n        rotate([0, 0, i*360/rib_count])\n            translate([base_r - wall, 0, 0])\n                linear_extrude(height = height, scale = 0.8)\n                    rib_profile();\n    }\n}\n\n// Single spine cluster at a node\nmodule spine_cluster() {\n    union() {\n        // central spine\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h = spine_len, r = 0.4);\n        // radial spines\n        for(a = [0:60:300])\n            rotate([0, 0, a])\n                translate([0, 0, 0])\n                    rotate([100, 0, 0])\n                        cylinder(h = spine_len*0.8, r = 0.3);\n    }\n}\n\n// Spine rows along ribs\nmodule spines() {\n    for(i = [0:rib_count-1]) {\n        angle = i*360/rib_count;\n        for(z = [10:10:height-10]) {\n            rotate([0, 0, angle])\n                translate([base_r + 2, 0, z])\n                    spine_cluster();\n        }\n    }\n}\n\n// Areoles (cushion-like pads)\nmodule areoles() {\n    for(i = [0:rib_count-1]) {\n        angle = i*360/rib_count;\n        for(z = [10:10:height-10]) {\n            rotate([0, 0, angle])\n                translate([base_r - 2, 0, z])\n                    scale([1, 0.6, 0.4])\n                        sphere(d = 4);\n        }\n    }\n}\n\n// Optional flower on top\nmodule flower() {\n    translate([0, 0, height])\n        rotate([0, 0, 45])\n            for(i = [0:5]) {\n                rotate([0, 0, i*60])\n                    translate([0, 6, 0])\n                        scale([1, 0.5, 1])\n                            sphere(d = 12);\n            }\n}\n\n// Base pedestal for print stability\nmodule base() {\n    cylinder(h = 5, r = base_r + 5);\n}\n\n// Assembly\nunion() {\n    base();\n    stem();\n    ribs();\n    areoles();\n    spines();\n    flower();\n}",
    "renders": true
  },
  {
    "plant": "sclerocactus",
    "openscad_code": "// Sclerocactus model - medium complexity realistic style\n// Dimensions in mm, suitable for 3D printing\n\n$fn = 36;  // Circle resolution for smoother curves\n\n// Main parameters\nstem_height = 80;\nstem_diameter = 25;\nrib_count = 13;\nrib_depth = 2;\nspine_length = 8;\nspine_thickness = 0.8;\nareole_spacing = 12;\nbase_height = 10;\n\nmodule stem() {\n    difference() {\n        // Main stem body with slight taper\n        cylinder(h = stem_height, \n                 r1 = stem_diameter/2, \n                 r2 = stem_diameter/2 * 0.85);\n        \n        // Hollow center for printing\n        translate([0, 0, -1])\n            cylinder(h = stem_height + 2, \n                     r = stem_diameter/2 - 2);\n        \n        // Ribs - vertical grooves\n        for (i = [0 : rib_count-1]) {\n            rotate([0, 0, i * 360/rib_count])\n                translate([stem_diameter/2 - rib_depth, 0, 0])\n                    cube([rib_depth * 2, 1, stem_height], center = true);\n        }\n    }\n}\n\nmodule areole() {\n    // Small woolly pad where spines emerge\n    difference() {\n        sphere(d = 3);\n        sphere(d = 2.4);\n    }\n}\n\nmodule spine() {\n    // Single spine with slight curve\n    hull() {\n        translate([0, 0, 0])\n            cylinder(h = spine_length, r = spine_thickness, center = true);\n        translate([0, 0, spine_length * 0.3])\n            cylinder(h = spine_length * 0.7, r = spine_thickness * 0.6, center = true);\n    }\n}\n\nmodule spine_cluster() {\n    // Central spine - longest\n    translate([0, 0, 0])\n        rotate([0, 10, 0])\n            spine();\n    \n    // Radial spines - shorter\n    for (i = [0 : 7]) {\n        rotate([0, 0, i * 45])\n            translate([0, 0, -2])\n                rotate([0, 20, 0])\n                    scale([0.7, 0.7, 0.7])\n                        spine();\n    }\n}\n\nmodule areoles_with_spines() {\n    // Place areoles and spines along ribs\n    for (rib = [0 : rib_count-1]) {\n        for (level = [1 : 5]) {\n            rotate([0, 0, rib * 360/rib_count + 360/rib_count/2])\n                translate([stem_diameter/2 - 1, 0, level * areole_spacing])\n                    union() {\n                        areole();\n                        spine_cluster();\n                    }\n        }\n    }\n}\n\nmodule base() {\n    // Root system base\n    cylinder(h = base_height, r = stem_diameter/2 + 5);\n    \n    // Root extensions\n    for (i = [0 : 4]) {\n        rotate([0, 0, i * 72])\n            translate([stem_diameter/2 + 3, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 15, r1 = 4, r2 = 2);\n    }\n}\n\nmodule sclerocactus() {\n    union() {\n        // Base\n        translate([0, 0, 0])\n            base();\n        \n        // Main stem\n        translate([0, 0, base_height])\n            stem();\n        \n        // Areoles and spines\n        translate([0, 0, base_height])\n            areoles_with_spines();\n        \n        // Crown area at top\n        translate([0, 0, base_height + stem_height - 5])\n            sphere(d = 8);\n    }\n}\n\n// Generate the plant\nsclerocactus();",
    "renders": true
  },
  {
    "plant": "pediocactus",
    "openscad_code": "// Pediocactus (Pediocactus simpsonii) realistic model\n// Medium complexity, 3D-printable, ~80mm tall\n\n// Global dimensions (mm)\nstem_height = 40;\nstem_dia = 35;\nrib_count = 13;\nrib_depth = 3;\nareole_spacing = 6;\nspine_len = 4.5;\nspine_thick = 0.8;\nflower_dia = 18;\nflower_height = 12;\n\n// Wall thickness for printing\nwall = 2;\n\n// Main stem module with ribs\nmodule stem() {\n    difference() {\n        // Outer ribbed cylinder\n        cylinder(h = stem_height, d = stem_dia, $fn = rib_count*4);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h = stem_height + 2, d = stem_dia - 2*wall, $fn = rib_count*4);\n    }\n    \n    // Add ribs\n    for (i = [0 : rib_count-1]) {\n        rotate([0, 0, i*360/rib_count])\n            translate([stem_dia/2 - rib_depth/2, 0, 0])\n                cube([rib_depth, 1.5, stem_height], center = true);\n    }\n}\n\n// Areole (spine cluster) module\nmodule areole(z_pos, angle) {\n    translate([0, 0, z_pos])\n    rotate([0, 0, angle]) {\n        // Areole bump\n        translate([stem_dia/2 - wall/2, 0, 0])\n            sphere(d = 2.5, $fn = 12);\n        \n        // Spines\n        for (s = [0:3]) {\n            rotate([0, s*30 - 45, 0])\n                translate([stem_dia/2 + spine_len/2, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = spine_len, d = spine_thick, $fn = 8);\n        }\n    }\n}\n\n// Flower crown\nmodule flower() {\n    translate([0, 0, stem_height])\n    rotate([0, 0, 15]) {\n        // Receptacle\n        cylinder(h = 4, d1 = 8, d2 = 12, $fn = 24);\n        \n        // Petals\n        for (p = [0:17]) {\n            rotate([0, 0, p*20])\n                translate([7, 0, 4])\n                    rotate([0, 90, 0])\n                        scale([1, 1.8, 1])\n                            cylinder(h = flower_height/2, d1 = 2, d2 = flower_dia/3, $fn = 12);\n        }\n        \n        // Stamens\n        for (s = [0:11]) {\n            rotate([0, 0, s*30])\n                translate([3, 0, 8])\n                    cylinder(h = 6, d = 0.6, $fn = 8);\n        }\n    }\n}\n\n// Root base for stability\nmodule root_base() {\n    translate([0, 0, -5])\n        cylinder(h = 5, d1 = 25, d2 = 20, $fn = 32);\n}\n\n// Assembly\nunion() {\n    root_base();\n    \n    difference() {\n        union() {\n            stem();\n            \n            // Areoles on ribs\n            for (z = [5 : areole_spacing : stem_height-5]) {\n                for (a = [0 : 360/rib_count : 360-360/rib_count]) {\n                    areole(z, a);\n                }\n            }\n        }\n        \n        // Drainage hole\n        translate([0, 0, -6])\n            cylinder(h = 10, d = 6, $fn = 24);\n    }\n    \n    flower();\n}",
    "renders": true
  },
  {
    "plant": "neolloydia",
    "openscad_code": "// Neolloydia cactus - realistic medium complexity\n// Approximate size: 80mm diameter, 60mm height\n\n$fn=36;  // Smooth curves\n\n// Main module\nmodule neolloydia() {\n    // Base stem\n    color(\"darkgreen\")\n    translate([0,0,5])\n    difference() {\n        union() {\n            // Central cylindrical base\n            cylinder(h=20, r1=20, r2=15, center=true);\n            \n            // Add tubercles around base\n            for(i=[0:30:360]) {\n                rotate([0,0,i])\n                translate([18,0,0])\n                rotate([0,90,0])\n                cylinder(h=8, r1=4, r2=2, center=true);\n            }\n        }\n        \n        // Hollow center for 3D printing\n        cylinder(h=22, r=10, center=true);\n    }\n    \n    // Upper stem segments\n    color(\"forestgreen\")\n    for(i=[0:45:360]) {\n        rotate([0,0,i])\n        translate([0,0,15])\n        difference() {\n            union() {\n                // Main segment body\n                translate([12,0,0])\n                rotate([0,90,0])\n                cylinder(h=25, r1=6, r2=3, center=true);\n                \n                // Side tubercles\n                translate([8,0,5])\n                sphere(r=3);\n                translate([8,0,-5])\n                sphere(r=3);\n            }\n            \n            // Hollow segments\n            translate([12,0,0])\n            rotate([0,90,0])\n            cylinder(h=27, r=2, center=true);\n        }\n    }\n    \n    // Central apex\n    color(\"yellowgreen\")\n    translate([0,0,30])\n    difference() {\n        sphere(r=8);\n        sphere(r=6);  // Hollow\n    }\n    \n    // Spines\n    color(\"tan\")\n    module spine() {\n        cylinder(h=8, r=0.3);\n    }\n    \n    // Add spines to tubercles\n    for(i=[0:30:360]) {\n        rotate([0,0,i])\n        translate([22,0,0])\n        rotate([0,0,15])\n        spine();\n        \n        rotate([0,0,i])\n        translate([22,0,0])\n        rotate([0,0,-15])\n        spine();\n    }\n    \n    // Spines on segments\n    for(i=[0:45:360]) {\n        rotate([0,0,i])\n        translate([12,0,10])\n        rotate([0,0,0])\n        spine();\n        \n        rotate([0,0,i])\n        translate([12,0,-10])\n        rotate([0,0,0])\n        spine();\n    }\n    \n    // Root system base\n    color(\"saddlebrown\")\n    translate([0,0,-5])\n    difference() {\n        cylinder(h=10, r=25, r1=25, r2=20);\n        cylinder(h=12, r=18);\n    }\n    \n    // Areoles (spine cushions)\n    color(\"lightgray\")\n    for(i=[0:30:360]) {\n        for(j=[-8,0,8]) {\n            rotate([0,0,i])\n            translate([20,0,j])\n            sphere(r=1);\n        }\n    }\n}\n\n// Render the plant\nneolloydia();",
    "renders": true
  },
  {
    "plant": "epithelantha",
    "openscad_code": "// Epithelantha Micromeris (Button Cactus) - Realistic Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Overall dimensions: 70mm diameter, 60mm height (including flowers)\n\n// Main parameters\nbase_diameter = 70;\nbase_height = 40;\nrib_count = 8;\nspine_length = 3;\nspine_density = 12;\nflower_size = 8;\n\n// Main cactus body\nmodule cactus_body() {\n    // Base sphere with slight flattening\n    difference() {\n        scale([1, 1, 0.9])\n            sphere(d = base_diameter, $fn = 64);\n        \n        // Flatten bottom for stable printing\n        translate([0, 0, -base_height/2])\n            cube([base_diameter, base_diameter, base_height], center = true);\n    }\n}\n\n// Ribs module for the characteristic vertical ridges\nmodule ribs() {\n    for (i = [0:rib_count-1]) {\n        rotate([0, 0, i * (360/rib_count)]) {\n            translate([base_diameter/2 - 8, -3, 0])\n                scale([1, 0.8, 0.9])\n                    cylinder(h = base_height * 0.9, d1 = 6, d2 = 4, $fn = 8);\n        }\n    }\n}\n\n// Spines (areoles with radial spines)\nmodule spines() {\n    for (i = [0:rib_count-1]) {\n        for (j = [-1:1]) {\n            rotate([0, 0, i * (360/rib_count)]) {\n                translate([base_diameter/2 - 12, 0, j * 15]) {\n                    // Areole base\n                    sphere(d = 2.5, $fn = 12);\n                    \n                    // Radial spines in star pattern\n                    for (k = [0:spine_density-1]) {\n                        rotate([0, 0, k * (360/spine_density)]) {\n                            translate([0, 0, 1]) {\n                                rotate([90, 0, 0])\n                                    cylinder(h = spine_length, d = 0.8, $fn = 8);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Flowers (characteristic pink/white flowers)\nmodule flowers() {\n    // Top flower cluster\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([base_diameter/4, 0, base_height/2 - 5]) {\n                // Flower base\n                sphere(d = flower_size, $fn = 24);\n                \n                // Petals\n                for (j = [0:5]) {\n                    rotate([0, 0, j * 60]) {\n                        translate([flower_size/2, 0, 0])\n                            scale([1, 0.4, 0.2])\n                                sphere(d = flower_size * 0.8, $fn = 12);\n                    }\n                }\n                \n                // Central stigma\n                translate([0, 0, flower_size/2])\n                    cylinder(h = 3, d = 2, $fn = 12);\n            }\n        }\n    }\n}\n\n// Root system for stability\nmodule root_system() {\n    difference() {\n        // Main root bulb\n        translate([0, 0, -base_height/2 - 5])\n            sphere(d = 25, $fn = 32);\n        \n        // Hollow for material saving\n        translate([0, 0, -base_height/2 - 5])\n            sphere(d = 20, $fn = 32);\n        \n        // Side roots\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([10, 0, -base_height/2 - 5]) {\n                    rotate([90, 0, 0])\n                        cylinder(h = 15, d1 = 6, d2 = 3, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body with ribs\n    union() {\n        cactus_body();\n        ribs();\n    }\n    \n    // Spines on ribs\n    spines();\n    \n    // Flowers at top\n    flowers();\n    \n    // Root system at bottom\n    root_system();\n}",
    "renders": true
  },
  {
    "plant": "coryphantha",
    "openscad_code": "// Coryphantha cactus - medium detail, printable, ~80 mm tall\n// No overhangs steeper than 45°, 2 mm wall thickness\n\nmodule core() {              // main ribbed body\n    union() {\n        cylinder(h = 60, d1 = 35, d2 = 30, $fn = 60);     // tapered trunk\n        translate([0,0,60])\n            sphere(d = 32, $fn = 60);                     // rounded top\n    }\n}\n\nmodule ribs() {             // vertical ribs\n    for(i=[0:11]) rotate([0,0,i*30])\n        translate([-1.5,14,0])\n            cylinder(h = 60, d = 3, $fn = 8);\n}\n\nmodule areole(n, z) {       // single areole with spines\n    translate([0,16,z])\n    union() {\n        sphere(d = 2.5, $fn = 10);                    // wool pad\n        for(a=[0:120:359]) rotate([0,0,a])\n            translate([0,0,1.5])\n                rotate([90-15,0,0])\n                    cylinder(h = 12, d = 0.6, $fn = 4); // stiff spine\n    }\n}\n\nmodule areole_ring(z) {     // ring of areoles at height z\n    for(i=[0:11]) rotate([0,0,i*30])\n        areole(i, z);\n}\n\nmodule roots() {            // shallow radial roots for base\n    difference() {\n        cylinder(h = 8, d = 45, $fn = 60);              // base disc\n        cylinder(h = 10, d = 25, $fn = 60);             // hollow bottom\n    }\n    for(a=[0:60:359]) rotate([0,0,a])\n        translate([17.5,0,-2])\n            rotate([90,0,0])\n                cylinder(h = 18, d = 6, $fn = 6);       // thick root\n}\n\n// ---- assembly ----\ndifference() {\n    union() {\n        roots();\n        translate([0,0,8])\n            union() {\n                core();\n                ribs();\n                for(h=[15:12:55]) areole_ring(h);      // 4 rows\n            }\n    }\n    // hollow trunk for printing\n    translate([0,0,8])\n        cylinder(h = 55, d = 26, $fn = 60);\n    translate([0,0,63])\n        sphere(d = 28, $fn = 60);\n}",
    "renders": true
  },
  {
    "plant": "escobaria",
    "openscad_code": "// Escobaria Cactus - Realistic Medium Complexity\n// Overall height ~100mm, suitable for 3D printing\n\n// Main parameters\nbase_d = 45;            // Base diameter\nbase_h = 12;            // Base height\nbody_h = 65;            // Main body height\nspine_len = 8;          // Spine length\nspine_d = 0.8;          // Spine thickness\nrib_count = 13;         // Number of ribs\ntubercle_count = 7;     // Tubercles per rib\n\n// Base with slight taper\nmodule base() {\n    difference() {\n        cylinder(h=base_h, d1=base_d*1.1, d2=base_d, $fn=60);\n        \n        // Hollow base for printing\n        translate([0,0,2])\n            cylinder(h=base_h, d1=base_d*1.1-4, d2=base_d-4, $fn=60);\n    }\n}\n\n// Single tubercle with spines\nmodule tubercle(height, angle) {\n    // Main tubercle body\n    translate([0,0,height])\n        rotate([0,0,angle])\n            scale([1,1.3,1])\n                sphere(d=4.5, $fn=16);\n    \n    // Central spines (3-4 per tubercle)\n    for(i=[0:2]) {\n        rotate([0,0,angle + i*120])\n            translate([0,2.2,height+2])\n                rotate([90,0,0])\n                    cylinder(h=spine_len, d=spine_d, $fn=8);\n    }\n    \n    // Radial spines (shorter)\n    for(i=[0:11]) {\n        rotate([0,0,angle + i*30])\n            translate([1.8,0,height+1.5])\n                rotate([85,0,0])\n                    cylinder(h=spine_len*0.7, d=spine_d*0.7, $fn=6);\n    }\n}\n\n// Single rib structure\nmodule rib(height, rot_angle) {\n    // Main rib body - slightly curved\n    rotate([0,0,rot_angle])\n        translate([0,0,base_h])\n            scale([1,0.4,1])\n                cylinder(h=height, d=base_d*0.8, $fn=20);\n    \n    // Add tubercles along rib\n    for(i=[1:tubercle_count]) {\n        tubercle_height = base_h + (i*height/(tubercle_count+1));\n        rib_angle = rot_angle;\n        translate([0,0,0])\n            tubercle(tubercle_height, rib_angle);\n    }\n}\n\n// Main cactus body\nmodule cactus_body() {\n    union() {\n        // Central core\n        cylinder(h=body_h, d=base_d, $fn=60);\n        \n        // Add ribs around body\n        for(i=[0:rib_count-1]) {\n            rib_angle = i*(360/rib_count);\n            rib(body_h*0.9, rib_angle);\n        }\n        \n        // Crown depression for flowers\n        translate([0,0,body_h-3])\n            sphere(d=8, $fn=20);\n    }\n}\n\n// Small offset to prevent non-manifold geometry\nmodule manifold_offset() {\n    translate([0,0,-0.01])\n        scale([0.99,0.99,1.01])\n            children();\n}\n\n// Complete plant assembly\nunion() {\n    // Base\n    base();\n    \n    // Main body with manifold offset\n    manifold_offset() {\n        cactus_body();\n    }\n    \n    // Top areoles with flowers\n    translate([0,0,body_h-5])\n        for(i=[0:5]) {\n            rotate([0,0,i*60])\n                translate([8,0,0])\n                    sphere(d=2.5, $fn=10);\n        }\n}",
    "renders": true
  }
]