[
  {
    "sports_equipment": "basketball",
    "openscad_code": "// Basketball Lamp - Realistic Style with Medium Complexity\n// Combines sports theme with functional furniture lighting\n\n// Main parameters\nball_diameter = 80;\nwall_thickness = 2;\nlamp_height = 120;\nbase_diameter = 60;\n\n// Basketball module with realistic details\nmodule basketball() {\n    // Main sphere body with wall thickness\n    difference() {\n        sphere(d = ball_diameter);\n        sphere(d = ball_diameter - wall_thickness);\n    }\n    \n    // Basketball seam lines using cylinders\n    color(\"black\") {\n        // Vertical seam\n        rotate([90, 0, 0]) \n            cylinder(h = ball_diameter, d = 1.5, $fn = 32);\n        \n        // Horizontal seam\n        rotate([0, 90, 0]) \n            cylinder(h = ball_diameter, d = 1.5, $fn = 32);\n        \n        // Curved seams following basketball pattern\n        for (i = [0:60:359]) {\n            rotate([0, 0, i]) \n                rotate([0, 30, 0]) \n                    cylinder(h = ball_diameter * 0.8, d = 1.5, $fn = 32);\n            rotate([0, 0, i + 30]) \n                rotate([0, -30, 0]) \n                    cylinder(h = ball_diameter * 0.8, d = 1.5, $fn = 32);\n        }\n    }\n    \n    // Grip texture pattern using small cylinders\n    color(\"orange\") {\n        for (theta = [0:30:359]) {\n            for (phi = [0:30:150]) {\n                rotate([0, phi, theta]) \n                    translate([0, 0, ball_diameter/2 - 0.5]) \n                        cylinder(h = 0.5, d = 2, $fn = 8);\n            }\n        }\n    }\n}\n\n// Lamp base with stability features\nmodule lamp_base() {\n    // Main base cylinder\n    cylinder(h = 15, d = base_diameter, $fn = 64);\n    \n    // Counterweight ring for stability\n    translate([0, 0, 5]) \n        difference() {\n            cylinder(h = 10, d = base_diameter - 10, $fn = 64);\n            cylinder(h = 10, d = base_diameter - 20, $fn = 64);\n        }\n    \n    // Cable management hole\n    rotate([90, 0, 0]) \n        cylinder(h = base_diameter, d = 8, $fn = 32);\n}\n\n// Support pole with joints\nmodule support_pole() {\n    // Lower pole section\n    cylinder(h = lamp_height/2, d = 8, $fn = 32);\n    \n    // Joint connector\n    translate([0, 0, lamp_height/2]) \n        cylinder(h = 10, d = 12, $fn = 32);\n    \n    // Upper pole section\n    translate([0, 0, lamp_height/2 + 10]) \n        cylinder(h = lamp_height/2 - 30, d = 8, $fn = 32);\n    \n    // Ball mount bracket\n    translate([0, 0, lamp_height - 30]) \n        sphere(d = 12);\n}\n\n// Lamp assembly\nmodule basketball_lamp() {\n    // Base at bottom\n    translate([0, 0, 0]) \n        lamp_base();\n    \n    // Support pole\n    translate([0, 0, 15]) \n        support_pole();\n    \n    // Basketball lamp shade\n    translate([0, 0, lamp_height - 30]) \n        rotate([0, 0, 45]) \n            basketball();\n    \n    // LED holder inside basketball\n    translate([0, 0, lamp_height - 30]) {\n        difference() {\n            sphere(d = ball_diameter - wall_thickness - 2);\n            sphere(d = ball_diameter - wall_thickness - 10);\n        }\n        \n        // LED mounting holes\n        for (i = [0:120:359]) {\n            rotate([0, 0, i]) \n                translate([0, 25, 0]) \n                    cylinder(h = 5, d = 3, $fn = 16);\n        }\n    }\n}\n\n// Render the complete lamp\nbasketball_lamp();",
    "renders": true
  },
  {
    "sports_equipment": "football",
    "openscad_code": "// Football Furniture: Modular Football Ottoman\n// Dimensions: ~120mm diameter, suitable as footrest or small seat\n\n$fn = 48;  // Smooth curves for realistic appearance\n\nmodule football_ottoman() {\n    // Main body - hollow sphere for lightweight structure\n    difference() {\n        sphere(d=120);\n        sphere(d=116);  // 2mm wall thickness\n    }\n    \n    // Internal support structure\n    translate([0,0,-58]) {\n        cylinder(h=116, d=20, $fn=6);  // Central column\n    }\n    \n    // Hexagonal panel pattern for realistic football texture\n    difference() {\n        // Outer shell with panels\n        for(i=[0:5]) {\n            rotate([0,0,i*60]) {\n                translate([0,0,60]) {\n                    linear_extrude(height=2) {\n                        polygon(points=[\n                            [0,0],\n                            [30,0],\n                            [15,26]\n                        ]);\n                    }\n                }\n            }\n        }\n        \n        // Cut hexagonal pattern into surface\n        for(i=[0:5]) {\n            rotate([0,0,i*60]) {\n                for(j=[0:5]) {\n                    rotate([0,0,j*60]) {\n                        translate([0,0,59.5]) {\n                            cylinder(h=5, d=20);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Pentagonal panels at vertices\n    for(phi=[atan(1/2), 180-atan(1/2)]) {\n        rotate([phi,0,0]) {\n            for(theta=[0:72:360]) {\n                rotate([0,0,theta]) {\n                    translate([0,0,60]) {\n                        intersection() {\n                            sphere(d=120);\n                            translate([0,0,-5]) {\n                                cylinder(h=10, d=15);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Furniture base - stable flat bottom\n    translate([0,0,-60]) {\n        difference() {\n            cylinder(h=10, d=80);\n            cylinder(h=11, d=76);  // 2mm wall\n        }\n    }\n    \n    // Anti-slip rubber feet\n    for(angle=[45:90:360]) {\n        rotate([0,0,angle]) {\n            translate([30,0,-65]) {\n                cylinder(h=3, d=8);\n            }\n        }\n    }\n    \n    // Ventilation holes for pressure regulation\n    for(i=[0:3]) {\n        rotate([0,0,i*90]) {\n            translate([0,50,0]) {\n                rotate([90,0,0]) {\n                    cylinder(h=120, d=3);\n                }\n            }\n        }\n    }\n    \n    // Reinforcement rings at stress points\n    translate([0,0,-50]) {\n        cylinder(h=5, d=100);\n    }\n    translate([0,0,50]) {\n        cylinder(h=5, d=100);\n    }\n    \n    // Handle recess for carrying\n    difference() {\n        translate([0,60,0]) {\n            rotate([90,0,0]) {\n                cylinder(h=20, d=40);\n            }\n        }\n        translate([0,70,0]) {\n            cube([50,20,40], center=true);\n        }\n    }\n}\n\n// Assembly\nfootball_ottoman();",
    "renders": true
  },
  {
    "sports_equipment": "soccer_ball",
    "openscad_code": "$fn = 32;\n\n// Overall soccer ball as furniture – a spherical stool with hex/pent footrest\nmodule soccer_stool() {\n    // Main ball shell (hollow, 2 mm wall)\n    difference() {\n        sphere(d = 120);                 // outer\n        sphere(d = 116);                 // inner\n    }\n\n    // Black pentagon patches\n    for (p = pentagon_positions()) {\n        translate(p)\n            rotate([acos(-1/5)/PI*180, 0, 0])\n            pentagon_patch();\n    }\n\n    // White hexagon patches\n    for (h = hexagon_positions()) {\n        translate(h)\n            rotate([acos(-1/3)/PI*180, 0, 0])\n            hexagon_patch();\n    }\n\n    // Internal support ring (hidden but printable)\n    translate([0, 0, -55])\n        cylinder(h = 110, d = 40, $fn = 6);\n\n    // Four cylindrical legs (Ø15 mm) with 2 mm wall\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n            translate([45, 0, -70])\n                difference() {\n                    cylinder(h = 70, d = 15);\n                    translate([0, 0, 2])\n                        cylinder(h = 68, d = 11);\n                }\n    }\n}\n\n// Single pentagon patch (2 mm thick, inset 0.5 mm)\nmodule pentagon_patch() {\n    linear_extrude(height = 1.5, convexity = 5)\n        offset(r = -0.5)\n            polygon([\n                for (i = [0:4])\n                    [18*cos(i*72), 18*sin(i*72)]\n            ]);\n}\n\n// Single hexagon patch (2 mm thick, inset 0.5 mm)\nmodule hexagon_patch() {\n    linear_extrude(height = 1.5, convexity = 5)\n        offset(r = -0.5)\n            polygon([\n                for (i = [0:5])\n                    [18*cos(i*60), 18*sin(i*60)]\n            ]);\n}\n\n// Pre-computed positions for standard truncated-icosahedron patches\nfunction pentagon_positions() = [\n    [0, 0, 60],                         // top\n    [0, 0, -60],                        // bottom\n    [0, 48.5, 30],\n    [0, 48.5, -30],\n    [0, -48.5, 30],\n    [0, -48.5, -30],\n    [42, 24.25, 30],\n    [42, 24.25, -30],\n    [42, -24.25, 30],\n    [42, -24.25, -30],\n    [-42, 24.25, 30],\n    [-42, 24.25, -30]\n];\n\nfunction hexagon_positions() = [\n    [0, 29.1, 48],\n    [0, 29.1, -48],\n    [0, -29.1, 48],\n    [0, -29.1, -48],\n    [25.2, 14.55, 48],\n    [25.2, 14.55, -48],\n    [25.2, -14.55, 48],\n    [25.2, -14.55, -48],\n    [-25.2, 14.55, 48],\n    [-25.2, 14.55, -48],\n    [-25.2, -14.55, 48],\n    [-25.2, -14.55, -48],\n    [29.1, 0, 25],\n    [29.1, 0, -25],\n    [-29.1, 0, 25],\n    [-29.1, 0, -25],\n    [14.55, 25.2, 25],\n    [14.55, 25.2, -25],\n    [14.55, -25.2, 25],\n    [14.55, -25.2, -25]\n];\n\nsoccer_stool();",
    "renders": true
  },
  {
    "sports_equipment": "baseball",
    "openscad_code": "// Baseball furniture - Baseball-shaped side table\n// Overall dimensions: 200mm diameter, 450mm height\n// Features hollow sphere tabletop with storage inside and cylindrical legs\n\n// Parameters\nsphere_diameter = 200;      // Main baseball sphere\nleg_height = 250;           // Table leg height\nleg_diameter = 20;          // Table leg thickness\nwall_thickness = 2;         // 3D printable wall thickness\nseam_width = 3;             // Baseball seam thickness\nstitch_spacing = 15;        // Spacing between stitches\nstitch_length = 8;          // Length of each stitch\nstitch_thickness = 1.5;     // Stitch thickness\n\n// Main module for the baseball table\nmodule baseball_table() {\n    // Table top - hollow baseball sphere\n    difference() {\n        // Outer sphere\n        sphere(d = sphere_diameter, $fn = 100);\n        \n        // Hollow interior\n        sphere(d = sphere_diameter - 2 * wall_thickness, $fn = 100);\n        \n        // Flat bottom for stability\n        translate([0, 0, -sphere_diameter/2])\n            cube([sphere_diameter * 2, sphere_diameter * 2, sphere_diameter], center = true);\n    }\n    \n    // Baseball seams - two intersecting curved lines\n    baseball_seams();\n    \n    // Table legs - three legs for stability\n    for (i = [0:120:359]) {\n        rotate([0, 0, i])\n            translate([sphere_diameter/2 * 0.7, 0, -leg_height - sphere_diameter/2])\n                cylinder(h = leg_height, d = leg_diameter, $fn = 32);\n    }\n    \n    // Leg support ring for stability\n    translate([0, 0, -leg_height/2 - sphere_diameter/2])\n        cylinder(h = wall_thickness, d1 = sphere_diameter * 0.8, d2 = sphere_diameter * 0.6, $fn = 64);\n}\n\n// Module for baseball seam pattern\nmodule baseball_seams() {\n    // First seam curve\n    rotate([0, 90, 0])\n        seam_curve();\n    \n    // Second seam curve (opposite direction)\n    rotate([0, 90, 180])\n        seam_curve();\n}\n\n// Module for one seam curve with stitches\nmodule seam_curve() {\n    // Main seam line\n    rotate_extrude(angle = 180, $fn = 100)\n        translate([sphere_diameter/2 - seam_width/2, 0, 0])\n            square([seam_width, seam_width]);\n    \n    // Stitches along the seam\n    for (a = [-80:stitch_spacing:80]) {\n        // Skip center to avoid overlap\n        if (abs(a) > 10) {\n            rotate([0, 0, a])\n                translate([sphere_diameter/2, 0, 0])\n                    rotate([90, 0, 0])\n                        stitch();\n        }\n    }\n}\n\n// Module for individual stitch\nmodule stitch() {\n    // Main stitch body\n    cube([stitch_length, stitch_thickness, stitch_thickness], center = true);\n    \n    // Stitch holes (decorative)\n    for (x = [-stitch_length/3, stitch_length/3]) {\n        translate([x, 0, 0])\n            cylinder(h = stitch_thickness + 0.1, d = stitch_thickness/2, center = true, $fn = 16);\n    }\n}\n\n// Generate the baseball table\ntranslate([0, 0, sphere_diameter/2 + leg_height])\n    baseball_table();",
    "renders": true
  },
  {
    "sports_equipment": "tennis_ball",
    "openscad_code": "// Tennis Ball Furniture - Storage Ottoman\n// Combines a realistic tennis ball design with functional storage furniture\n\n// Main Parameters\nball_diameter = 120;  // Tennis ball size\nwall_thickness = 2;   // 3D printable wall thickness\nseam_height = 3;      // Tennis ball seam height\nstorage_depth = 60;   // Internal storage depth\nleg_height = 80;      // Furniture leg height\n\n// Color Constants\ntennis_ball_color = [0.8, 0.9, 0.2];\nwhite_color = [1, 1, 1];\n\n// Tennis Ball Surface Texture Module\nmodule tennis_texture(radius) {\n    // Create fuzzy felt texture with small bumps\n    for (i = [0:30]) {\n        theta = rands(0, 360, 1)[0];\n        phi = rands(0, 180, 1)[0];\n        x = radius * sin(phi) * cos(theta);\n        y = radius * sin(phi) * sin(theta);\n        z = radius * cos(phi);\n        \n        translate([x, y, z]) {\n            scale([1, 1, 0.3]) {\n                sphere(r=0.5);\n            }\n        }\n    }\n}\n\n// Tennis Ball Seam Module\nmodule tennis_seam(radius) {\n    // Create the characteristic curved seam lines\n    for (i = [0:360:30]) {\n        rotate([0, 0, i]) {\n            rotate([90, 0, 0]) {\n                translate([0, 0, radius*0.98]) {\n                    scale([1, 0.1, seam_height]) {\n                        sphere(r=radius);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main Tennis Ball Body\nmodule tennis_ball_body() {\n    difference() {\n        // Outer ball shell\n        color(tennis_ball_color) {\n            sphere(d=ball_diameter);\n            tennis_texture(ball_diameter/2);\n            tennis_seam(ball_diameter/2);\n        }\n        \n        // Hollow interior for storage\n        translate([0, 0, -wall_thickness/2]) {\n            sphere(d=ball_diameter - 2*wall_thickness);\n        }\n    }\n}\n\n// Storage Lid (top half of ball)\nmodule storage_lid() {\n    difference() {\n        // Top hemisphere\n        color(tennis_ball_color) {\n            intersection() {\n                sphere(d=ball_diameter);\n                translate([0, 0, 0]) {\n                    cube([ball_diameter*2, ball_diameter*2, ball_diameter/2], center=true);\n                }\n            }\n            tennis_seam(ball_diameter/2);\n        }\n        \n        // Inner hollow\n        translate([0, 0, -wall_thickness]) {\n            intersection() {\n                sphere(d=ball_diameter - 2*wall_thickness);\n                translate([0, 0, 0]) {\n                    cube([ball_diameter*2, ball_diameter*2, ball_diameter/2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Furniture Leg Module\nmodule furniture_leg() {\n    color([0.4, 0.4, 0.4]) {\n        // Main leg cylinder\n        cylinder(h=leg_height, d=8, center=false);\n        \n        // Leg base pad\n        translate([0, 0, leg_height]) {\n            cylinder(h=3, d=12, center=false);\n        }\n        \n        // Connection joint\n        translate([0, 0, 0]) {\n            sphere(d=10);\n        }\n    }\n}\n\n// Leg Assembly\nmodule leg_assembly() {\n    // Four legs in furniture position\n    translate([ball_diameter/2 - 15, ball_diameter/2 - 15, -leg_height]) {\n        furniture_leg();\n    }\n    \n    translate([-ball_diameter/2 + 15, ball_diameter/2 - 15, -leg_height]) {\n        furniture_leg();\n    }\n    \n    translate([ball_diameter/2 - 15, -ball_diameter/2 + 15, -leg_height]) {\n        furniture_leg();\n    }\n    \n    translate([-ball_diameter/2 + 15, -ball_diameter/2 + 15, -leg_height]) {\n        furniture_leg();\n    }\n}\n\n// Assembly\nmodule tennis_ball_ottoman() {\n    // Main body\n    translate([0, 0, leg_height + storage_depth/2]) {\n        tennis_ball_body();\n    }\n    \n    // Storage lid (slightly offset for visualization)\n    translate([0, 0, leg_height + storage_depth + 5]) {\n        storage_lid();\n    }\n    \n    // Support structure\n    color([0.3, 0.3, 0.3]) {\n        cylinder(h=storage_depth, d=ball_diameter*0.8, center=false);\n    }\n    \n    // Furniture legs\n    leg_assembly();\n    \n    // Handle for lid\n    color(white_color) {\n        translate([0, ball_diameter/2 - 5, leg_height + storage_depth + 5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=20, d=5);\n                translate([0, 0, 20]) {\n                    sphere(d=5);\n                }\n            }\n        }\n    }\n}\n\n// Render the complete model\ntennis_ball_ottoman();",
    "renders": true
  },
  {
    "sports_equipment": "volleyball",
    "openscad_code": "// Volleyball-shaped side table\n// Realistic style, medium complexity\n// 3D-printable, no overhangs, 2 mm walls\n\n// overall scale\nscale = 0.8;\n\n// volleyball ball parameters\nball_d = 110 * scale;\nwall_t = 2;\nstripe_w = 6 * scale;\nstripe_t = 1.2;\n\n// leg parameters\nleg_h = 280 * scale;\nleg_r = 8 * scale;\nleg_t = 2.5;\nleg_base_r = 20 * scale;\n\n// top parameters\ntop_d = 230 * scale;\ntop_t = 8 * scale;\n\n// module for a hollow sphere\nmodule hollow_sphere(od, id) {\n    difference() {\n        sphere(d = od);\n        sphere(d = id);\n    }\n}\n\n// module for a single volleyball stripe segment\nmodule stripe_segment(length, width, thickness, angle) {\n    rotate([0, 0, angle])\n        translate([0, 0, -width / 2])\n            linear_extrude(height = width, center = true)\n                polygon(points = [[0, 0], [length, 0], [length * 0.9, thickness]]);\n}\n\n// volleyball shell with three stripes\nmodule volleyball_shell() {\n    difference() {\n        // outer shell\n        hollow_sphere(ball_d, ball_d - 2 * wall_t);\n        \n        // cut flat bottom for stability\n        translate([0, 0, -ball_d / 2 + 5 * scale])\n            cube([ball_d * 1.2, ball_d * 1.2, 10 * scale], center = true);\n    }\n    \n    // three curved stripes\n    for (a = [0, 120, 240]) {\n        rotate([0, 0, a])\n            translate([0, 0, ball_d / 2 - stripe_t])\n                color(\"white\")\n                    difference() {\n                        cylinder(h = stripe_t * 2, r = ball_d / 2, $fn = 128);\n                        scale([1, 0.3, 1])\n                            cylinder(h = stripe_t * 2, r = ball_d / 2 + 1, $fn = 128);\n                    }\n    }\n}\n\n// leg with hollow core\nmodule leg() {\n    difference() {\n        cylinder(h = leg_h, r = leg_r, $fn = 32);\n        translate([0, 0, leg_t])\n            cylinder(h = leg_h - leg_t, r = leg_r - leg_t, $fn = 32);\n    }\n    \n    // base flare\n    translate([0, 0, leg_h])\n        difference() {\n            cylinder(h = 6 * scale, r1 = leg_r, r2 = leg_base_r, $fn = 32);\n            cylinder(h = 6 * scale + 1, r1 = leg_r - leg_t, r2 = leg_base_r - leg_t, $fn = 32);\n        }\n}\n\n// circular tabletop\nmodule tabletop() {\n    difference() {\n        cylinder(h = top_t, r = top_d / 2, $fn = 64);\n        translate([0, 0, 2])\n            cylinder(h = top_t, r = top_d / 2 - 2, $fn = 64);\n    }\n    \n    // inner lip for ball nesting\n    translate([0, 0, top_t - 2])\n        cylinder(h = 4, r1 = top_d / 2 - 2, r2 = top_d / 2 - 12, $fn = 64);\n}\n\n// assembly\ntranslate([0, 0, leg_h + ball_d / 2 - 5 * scale])\n    volleyball_shell();\n\ntranslate([0, 0, leg_h - 5 * scale])\n    leg();\n\ntranslate([0, 0, leg_h + ball_d - 5 * scale])\n    tabletop();",
    "renders": true
  },
  {
    "sports_equipment": "golf_ball",
    "openscad_code": "// Golf Ball Furniture - OpenSCAD Code\n// Realistic style, medium complexity\n// Dimensions: 80mm diameter golf ball on 120mm tall stand\n\n// Main module\nmodule golf_ball_furniture() {\n    // Base stand\n    union() {\n        // Base plate\n        translate([0, 0, 0])\n            cylinder(h=5, r=60, $fn=64);\n        \n        // Center column\n        translate([0, 0, 5])\n            cylinder(h=80, r1=25, r2=15, $fn=64);\n        \n        // Top support ring\n        translate([0, 0, 85])\n            cylinder(h=5, r=35, $fn=64);\n        \n        // Golf ball\n        translate([0, 0, 95])\n            golf_ball(40, 2);\n    }\n}\n\n// Golf ball module with dimples\nmodule golf_ball(radius, wall_thickness) {\n    difference() {\n        // Main ball sphere\n        sphere(r=radius, $fn=128);\n        \n        // Hollow center\n        sphere(r=radius - wall_thickness, $fn=128);\n        \n        // Dimples - icosahedron pattern\n        dimple_pattern(radius);\n    }\n}\n\n// Dimple pattern using icosahedron vertices\nmodule dimple_pattern(ball_radius) {\n    // Icosahedron vertices scaled to sphere surface\n    phi = (1 + sqrt(5)) / 2;\n    scale = ball_radius * 0.95;\n    \n    // Vertices of icosahedron\n    vertices = [\n        [0, 1, phi], [0, -1, phi], [0, 1, -phi], [0, -1, -phi],\n        [1, phi, 0], [-1, phi, 0], [1, -phi, 0], [-1, -phi, 0],\n        [phi, 0, 1], [phi, 0, -1], [-phi, 0, 1], [-phi, 0, -1]\n    ];\n    \n    // Create dimples at each vertex\n    for (v = vertices) {\n        translate(v * scale)\n            rotate([0, 0, 45])\n                sphere(r=ball_radius * 0.12, $fn=16);\n    }\n    \n    // Additional dimples for fuller coverage\n    for (angle = [0:36:359]) {\n        rotate([0, 0, angle])\n            for (lat = [-60:30:60]) {\n                rotate([lat, 0, 0])\n                    translate([0, 0, ball_radius * 0.9])\n                        sphere(r=ball_radius * 0.1, $fn=16);\n            }\n    }\n}\n\n// Generate the model\ngolf_ball_furniture();",
    "renders": true
  },
  {
    "sports_equipment": "ping_pong_ball",
    "openscad_code": "// Ping-Pong Ball Furniture - Storage Ottoman\n// Realistic style, medium complexity\n// Overall dimensions: 120mm diameter, 200mm height\n\n// Parameters\nball_diameter = 120;\nwall_thickness = 2;\nleg_height = 80;\nbase_thickness = 5;\ngrip_spacing = 15;\ngrip_depth = 1;\n\n// Main module\nmodule ping_pong_ottoman() {\n    // Base structure\n    difference() {\n        // Outer sphere (cut in half for ottoman)\n        intersection() {\n            sphere(d=ball_diameter, $fn=100);\n            translate([0, -ball_diameter/2, 0])\n                cube([ball_diameter, ball_diameter, ball_diameter], center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            sphere(d=ball_diameter - 2*wall_thickness, $fn=100);\n    }\n    \n    // Flat base for stability\n    translate([0, -ball_diameter/2 - base_thickness/2, 0])\n        cube([ball_diameter - 10, base_thickness, ball_diameter - 10], center=true);\n    \n    // Support legs (4 legs for furniture stability)\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([ball_diameter/2 - 15, -ball_diameter/2 - base_thickness/2, leg_height/2])\n                cylinder(h=leg_height, d=8, center=true);\n    }\n    \n    // Ping-pong ball seam detail (white circle)\n    translate([0, -1, 0])\n        rotate([90, 0, 0])\n            cylinder(h=2, d=ball_diameter - 4, center=true);\n    \n    // Grip texture pattern (hexagonal pattern)\n    module grip_pattern() {\n        for(i = [-2:2]) {\n            for(j = [-2:2]) {\n                translate([\n                    i * grip_spacing + ((j % 2) * grip_spacing/2),\n                    j * grip_spacing * 0.866,\n                    ball_diameter/2 - wall_thickness\n                ]) {\n                    rotate([0, 0, 30])\n                        cylinder(h=grip_depth, d=3, $fn=6);\n                }\n            }\n        }\n    }\n    \n    // Apply grip texture to curved surface\n    translate([0, 0, 0])\n        grip_pattern();\n    \n    // Furniture joint reinforcement\n    translate([0, -ball_diameter/2 - base_thickness, 0])\n        cylinder(h=10, d=20, center=true);\n    \n    // Hidden compartment handle (integrated into seam)\n    translate([0, -2, ball_diameter/4])\n        rotate([0, 90, 0])\n            cylinder(h=30, d=5, center=true);\n}\n\n// Render the final model\nping_pong_ottoman();",
    "renders": true
  },
  {
    "sports_equipment": "hockey_puck",
    "openscad_code": "// Hockey Puck Stool - Medium Complexity\n// A functional stool inspired by a hockey puck design\n\n$fn = 50;\n\n// Overall dimensions\npuck_radius = 40;\npuck_height = 25;\nleg_height = 200;\nleg_radius = 6;\nseat_padding = 5;\n\n// Main puck body (hollow for weight reduction)\nmodule puck_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = puck_height, r = puck_radius);\n        \n        // Hollow center\n        translate([0, 0, 2])\n            cylinder(h = puck_height - 4, r = puck_radius - 4);\n        \n        // Top grip pattern - concentric rings\n        for(i = [1:3]) {\n            translate([0, 0, puck_height - 1.5])\n                cylinder(h = 1.5, r = puck_radius - (i * 8) - 1);\n        }\n        \n        // Bottom grip pattern\n        for(i = [1:3]) {\n            translate([0, 0, 0])\n                cylinder(h = 1.5, r = puck_radius - (i * 8) - 1);\n        }\n    }\n}\n\n// Seat cushion with hockey puck styling\nmodule seat_cushion() {\n    translate([0, 0, puck_height]) {\n        difference() {\n            // Main cushion\n            cylinder(h = seat_padding * 2, r = puck_radius);\n            \n            // Center hole for weight reduction\n            translate([0, 0, 2])\n                cylinder(h = seat_padding * 2 - 4, r = puck_radius - 15);\n            \n            // Ventilation holes\n            for(angle = [0:45:315]) {\n                rotate([0, 0, angle])\n                    translate([puck_radius - 20, 0, 1])\n                        cylinder(h = seat_padding * 2 - 2, r = 3);\n            }\n        }\n    }\n}\n\n// Reinforcement ring for leg attachment\nmodule leg_base() {\n    translate([0, 0, 2]) {\n        difference() {\n            cylinder(h = 8, r = puck_radius - 8);\n            cylinder(h = 8, r = 25);\n        }\n    }\n}\n\n// Support legs with hockey stick inspiration\nmodule support_leg(angle, offset) {\n    rotate([0, 0, angle]) {\n        translate([offset, 0, 10]) {\n            // Main leg\n            cylinder(h = leg_height, r = leg_radius);\n            \n            // Foot pad\n            translate([0, 0, leg_height]) {\n                difference() {\n                    cylinder(h = 5, r = leg_radius + 4);\n                    cylinder(h = 5, r = leg_radius);\n                }\n            }\n            \n            // Cross-bracing connection points\n            translate([0, 0, leg_height * 0.7])\n                sphere(r = leg_radius + 1);\n            \n            translate([0, 0, leg_height * 0.3])\n                sphere(r = leg_radius + 1);\n        }\n    }\n}\n\n// Cross-bracing for stability\nmodule cross_brace() {\n    for(i = [0:90:270]) {\n        rotate([0, 0, i]) {\n            translate([30, 0, leg_height * 0.7]) {\n                rotate([90, 0, 90]) {\n                    cylinder(h = 60, r = leg_radius * 0.8);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    puck_body();\n    seat_cushion();\n    leg_base();\n    \n    // Support structure\n    for(i = [0:90:270]) {\n        support_leg(i, 25);\n    }\n    \n    // Cross-bracing\n    cross_brace();\n    \n    // Additional structural elements\n    translate([0, 0, 10]) {\n        cylinder(h = 5, r = 20);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "cricket_ball",
    "openscad_code": "// Cricket Ball Stool - A realistic cricket ball transformed into a functional piece of furniture\n// Overall height: 120mm, seat diameter: 100mm (scaled up from standard 72mm ball)\n\n// Main parameters\nball_diameter = 100;\nseam_height = 2;\nwall_thickness = 2.5;\nleg_diameter = 8;\nleg_height = 60;\nbase_diameter = 80;\n\n// Color constants\n$fn = 50;\n\n// Module for creating the ball seam texture\nmodule seam_stitch(stitch_length, stitch_width, stitch_height) {\n    for(i=[0:45:359]) {\n        rotate([0, 0, i])\n        translate([0, seam_height/2, ball_diameter/2 - stitch_height/2])\n        cube([stitch_width, stitch_length, stitch_height], center=true);\n    }\n}\n\n// Module for creating the ball surface with seam\nmodule cricket_ball_surface() {\n    difference() {\n        // Main ball sphere\n        sphere(d=ball_diameter);\n        \n        // Create the seam groove\n        rotate([90, 0, 0])\n        cylinder(h=ball_diameter*2, d=ball_diameter*0.8, $fn=6);\n        \n        // Remove top and bottom to create seating surface\n        translate([0, 0, -ball_diameter/2 - 1])\n        cube([ball_diameter*2, ball_diameter*2, ball_diameter], center=true);\n    }\n    \n    // Add seam stitches\n    seam_stitch(4, 2, 1.5);\n}\n\n// Module for hollow ball structure (3D printable)\nmodule hollow_ball() {\n    difference() {\n        cricket_ball_surface();\n        \n        // Hollow interior\n        sphere(d=ball_diameter - wall_thickness*2);\n    }\n}\n\n// Module for stool legs\nmodule stool_leg() {\n    cylinder(h=leg_height, d=leg_diameter);\n}\n\n// Module for base support ring\nmodule base_ring() {\n    difference() {\n        cylinder(h=wall_thickness*2, d=base_diameter);\n        cylinder(h=wall_thickness*2 + 1, d=base_diameter - wall_thickness*2);\n    }\n}\n\n// Main assembly\nmodule cricket_ball_stool() {\n    union() {\n        // Main ball seat\n        hollow_ball();\n        \n        // Structural ring at seam level\n        translate([0, 0, seam_height/2])\n        difference() {\n            cylinder(h=wall_thickness, d=ball_diameter);\n            cylinder(h=wall_thickness + 1, d=ball_diameter - wall_thickness*2);\n        }\n        \n        // Leg supports\n        for(i=[0:120:359]) {\n            rotate([0, 0, i])\n            translate([0, ball_diameter/3, -leg_height/2 - seam_height/2])\n            stool_leg();\n        }\n        \n        // Base ring for stability\n        translate([0, 0, -leg_height - seam_height/2])\n        base_ring();\n        \n        // Internal support structure\n        translate([0, 0, -seam_height/2 - leg_height/2])\n        difference() {\n            cylinder(h=leg_height, d=ball_diameter/2);\n            cylinder(h=leg_height + 1, d=ball_diameter/2 - wall_thickness);\n        }\n    }\n}\n\n// Render the stool\ncricket_ball_stool();",
    "renders": true
  },
  {
    "sports_equipment": "rugby_ball",
    "openscad_code": "// Rugby Ball Storage Ottoman\n// 3D printable furniture piece shaped like a rugby ball\n// Functions as both seating and storage for sports equipment\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Main dimensions (in mm)\nball_length = 120;\nball_width = 70;\nball_height = 65;\nwall_thickness = 2;\n\n// Module for creating the main rugby ball body\nmodule rugby_ball_body() {\n    // Create ellipsoid base shape\n    scale([1, 0.58, 0.54])\n    sphere(d=ball_length);\n    \n    // Add grip texture with raised panels\n    for (i = [0:4]) {\n        rotate([0, 0, i * 36])\n        translate([0, 0, ball_height/2 - 5])\n        linear_extrude(height=1.5)\n        scale([1, 0.6, 1])\n        circle(d=ball_width/3);\n    }\n}\n\n// Module for creating the hollow storage cavity\nmodule storage_cavity() {\n    difference() {\n        // Outer shell\n        scale([1, 0.58, 0.54])\n        sphere(d=ball_length);\n        \n        // Inner cavity\n        translate([0, 0, -wall_thickness])\n        scale([1, 0.58, 0.54])\n        sphere(d=ball_length - wall_thickness*2);\n        \n        // Create flat bottom for stability\n        translate([0, 0, -ball_height/2])\n        cube([ball_length, ball_width, ball_height], center=true);\n    }\n}\n\n// Module for the base support structure\nmodule base_support() {\n    // Main base ring\n    translate([0, 0, -ball_height/2 + 2])\n    rotate_extrude()\n    translate([ball_width/2 - 15, 0, 0])\n    circle(r=wall_thickness);\n    \n    // Support legs (4 legs for stability)\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([ball_width/2 - 15, 0, -ball_height/2 + 2])\n        cylinder(h=10, r=wall_thickness);\n    }\n}\n\n// Module for the lid with hinge details\nmodule lid_structure() {\n    // Main lid shape (half of rugby ball)\n    difference() {\n        intersection() {\n            // Top half of ball\n            translate([0, 0, -ball_height/2])\n            cube([ball_length, ball_width, ball_height], center=true);\n            \n            // Rugby ball shape\n            scale([1, 0.58, 0.54])\n            sphere(d=ball_length);\n        }\n        \n        // Handle cutout\n        translate([0, ball_width/4, 0])\n        cube([30, 10, 10], center=true);\n    }\n    \n    // Add handle grip\n    translate([0, ball_width/4, 5])\n    cylinder(h=15, r=3);\n}\n\n// Module for ventilation holes\nmodule ventilation_holes() {\n    // Small holes for air circulation\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([ball_width/2 - 20, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=wall_thickness*2, r=3);\n    }\n}\n\n// Main assembly\n// Base structure\nunion() {\n    // Hollow storage body\n    difference() {\n        storage_cavity();\n        \n        // Remove bottom for ventilation\n        translate([0, 0, -ball_height/2 - 1])\n        cube([ball_width, ball_width, 5], center=true);\n    }\n    \n    // Outer shell with grip texture\n    difference() {\n        rugby_ball_body();\n        \n        // Remove interior to match cavity\n        translate([0, 0, -wall_thickness])\n        scale([1, 0.58, 0.54])\n        sphere(d=ball_length - wall_thickness*2);\n    }\n    \n    // Base support\n    base_support();\n    \n    // Ventilation holes\n    ventilation_holes();\n    \n    // Lid (positioned slightly above for demonstration)\n    translate([0, 0, ball_height/2 + 5])\n    lid_structure();\n}",
    "renders": true
  },
  {
    "sports_equipment": "baseball_bat",
    "openscad_code": "// Baseball Bat Furniture Item\n// Realistic style, medium complexity\n// Overall length: 120mm, suitable for 3D printing\n\n// Main parameters\nbat_length = 120;\nhandle_length = 40;\nbarrel_length = 80;\nmax_diameter = 25;\nhandle_diameter = 12;\nwall_thickness = 2;\n\n// Grip texture module\nmodule grip_texture(length, diameter, spacing) {\n    for (i = [0:spacing:length]) {\n        translate([0, 0, i])\n        difference() {\n            cylinder(h=spacing*0.8, d=diameter+1, $fn=32);\n            cylinder(h=spacing*0.8+0.1, d=diameter, $fn=32);\n        }\n    }\n}\n\n// Handle with grip\nmodule handle() {\n    difference() {\n        // Main handle tube\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Hollow center\n        translate([0, 0, -0.1])\n        cylinder(h=handle_length+0.2, d=handle_diameter-wall_thickness*2, $fn=32);\n    }\n    \n    // Add grip texture\n    grip_texture(handle_length-5, handle_diameter-1, 3);\n}\n\n// Tapered barrel\nmodule barrel() {\n    difference() {\n        // Outer barrel shape (tapered)\n        union() {\n            // Handle transition\n            translate([0, 0, 0])\n            cylinder(h=10, d1=handle_diameter, d2=max_diameter*0.7, $fn=32);\n            \n            // Main barrel\n            translate([0, 0, 10])\n            cylinder(h=barrel_length-20, d=max_diameter*0.7, $fn=32);\n            \n            // Barrel end\n            translate([0, 0, barrel_length-10])\n            cylinder(h=10, d1=max_diameter*0.7, d2=max_diameter, $fn=32);\n        }\n        \n        // Hollow center\n        translate([0, 0, -0.1])\n        cylinder(h=barrel_length+0.2, d=max_diameter*0.7-wall_thickness*2, $fn=32);\n    }\n}\n\n// End cap detail\nmodule end_cap() {\n    difference() {\n        // Main cap\n        translate([0, 0, barrel_length-2])\n        cylinder(h=4, d=max_diameter+2, $fn=32);\n        \n        // Recessed center\n        translate([0, 0, barrel_length-2])\n        cylinder(h=4.2, d=max_diameter, $fn=32);\n        \n        // Hollow\n        translate([0, 0, barrel_length-2])\n        cylinder(h=4.2, d=max_diameter-wall_thickness*2, $fn=32);\n    }\n}\n\n// Seam details on barrel\nmodule barrel_seams() {\n    for (angle = [0:45:135]) {\n        rotate([0, 0, angle])\n        translate([max_diameter*0.35, 0, 15])\n        rotate([90, 0, 0])\n        cylinder(h=barrel_length-30, d=0.5, $fn=8);\n    }\n}\n\n// Weight distribution rings\nmodule weight_rings() {\n    for (i = [0:15:barrel_length-25]) {\n        translate([0, 0, i+20])\n        difference() {\n            cylinder(h=2, d=max_diameter*0.75, $fn=32);\n            cylinder(h=2.2, d=max_diameter*0.7, $fn=32);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Handle section\n    translate([0, 0, 0])\n    handle();\n    \n    // Barrel section\n    translate([0, 0, handle_length-5])\n    barrel();\n    \n    // End cap\n    end_cap();\n    \n    // Seam details\n    barrel_seams();\n    \n    // Weight rings\n    weight_rings();\n}\n\n// Base support for furniture stability\ntranslate([0, 0, -5])\ndifference() {\n    cylinder(h=5, d=30, $fn=32);\n    cylinder(h=5.2, d=26, $fn=32);\n}",
    "renders": true
  },
  {
    "sports_equipment": "cricket_bat",
    "openscad_code": "// Cricket Bat Furniture - OpenSCAD\n// Realistic style with medium complexity\n// Designed for 3D printing\n\n// Overall dimensions\nbat_length = 120;\nbat_width = 20;\nbat_thickness = 12;\n\n// Handle parameters\nhandle_length = 45;\nhandle_diameter = 8;\n\n// Grip parameters\ngrip_rings = 8;\ngrip_ring_height = 2;\ngrip_ring_spacing = 4;\n\n// Blade parameters\nblade_length = bat_length - handle_length;\nblade_width = bat_width;\nblade_thickness = bat_thickness;\n\n// Structural reinforcements\nreinforcement_thickness = 2;\njoint_radius = 3;\n\n// Main bat module\nmodule cricket_bat() {\n    // Handle assembly\n    union() {\n        // Main handle cylinder\n        translate([0, 0, 0])\n            cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip texture rings\n        for(i = [0:grip_rings-1]) {\n            translate([0, 0, i * grip_ring_spacing + 5])\n                difference() {\n                    cylinder(h=grip_ring_height, d=handle_diameter + 1.5, $fn=32);\n                    cylinder(h=grip_ring_height + 0.1, d=handle_diameter - 0.5, $fn=32);\n                }\n        }\n        \n        // Handle to blade joint reinforcement\n        translate([0, 0, handle_length - 5])\n            cylinder(h=10, d1=handle_diameter + 2, d2=blade_thickness + 2, $fn=32);\n    }\n    \n    // Blade assembly\n    translate([0, 0, handle_length])\n        union() {\n            // Main blade body\n            difference() {\n                // Blade base shape\n                cube([blade_thickness, blade_width, blade_length], center=true);\n                \n                // Taper the blade edges\n                translate([0, blade_width/2 - 2, blade_length/2 - 10])\n                    rotate([90, 0, 0])\n                        cylinder(h=blade_width - 4, r=2, $fn=32);\n                translate([0, -blade_width/2 + 2, blade_length/2 - 10])\n                    rotate([90, 0, 0])\n                        cylinder(h=blade_width - 4, r=2, $fn=32);\n            }\n            \n            // Blade face details - slightly raised edges\n            translate([blade_thickness/2 + 0.5, 0, 0])\n                cube([1, blade_width - 4, blade_length - 5], center=true);\n            translate([-blade_thickness/2 - 0.5, 0, 0])\n                cube([1, blade_width - 4, blade_length - 5], center=true);\n            \n            // Sweet spot reinforcement\n            translate([0, 0, -blade_length/2 + 25])\n                cube([blade_thickness, blade_width - 2, 15], center=true);\n        }\n    \n    // Bottom edge protection\n    translate([0, 0, bat_length - 2])\n        difference() {\n            cube([blade_thickness + 1, blade_width + 1, 4], center=true);\n            cube([blade_thickness - 1, blade_width - 1, 4.1], center=true);\n        }\n}\n\n// Generate the bat\ncricket_bat();",
    "renders": true
  },
  {
    "sports_equipment": "tennis_racket",
    "openscad_code": "// Tennis Racket Furniture Piece - Medium Complexity Realistic Style\n// Overall dimensions: 120mm x 40mm x 8mm (suitable for 3D printing)\n\n// Racket head frame\nmodule racket_head() {\n    difference() {\n        // Outer frame - elliptical shape\n        scale([1, 1.2, 1])\n        cylinder(h = 8, d1 = 60, d2 = 60, $fn = 64);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n        scale([1, 1.2, 1])\n        cylinder(h = 10, d1 = 54, d2 = 54, $fn = 64);\n    }\n}\n\n// String bed - woven pattern\nmodule string_bed() {\n    difference() {\n        // String bed base\n        translate([0, 0, 4])\n        scale([1, 1.2, 0.1])\n        cylinder(h = 4, d1 = 54, d2 = 54, $fn = 64);\n        \n        // String holes\n        for (i = [-25:5:25]) {\n            for (j = [-22:5:22]) {\n                translate([i, j * 1.2, 3.5])\n                cylinder(h = 5, d = 1.5, $fn = 8);\n            }\n        }\n    }\n}\n\n// Racket shaft\nmodule shaft() {\n    // Main shaft\n    translate([0, -42, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 50, d1 = 8, d2 = 6, $fn = 16);\n    \n    // Shaft reinforcement rings\n    for (i = [0:10:40]) {\n        translate([0, -42 + i * 0.9, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 2, d = 10, $fn = 16);\n    }\n}\n\n// Handle grip\nmodule handle() {\n    // Handle core\n    translate([0, -92, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 50, d = 6, $fn = 16);\n    \n    // Grip texture - octagonal pattern\n    for (i = [0:5:45]) {\n        translate([0, -92 + i, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 5, d1 = 7, d2 = 7, $fn = 8);\n    }\n    \n    // Butt cap\n    translate([0, -117, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 3, d = 8, $fn = 16);\n}\n\n// Throat connection\nmodule throat() {\n    difference() {\n        // Main throat piece\n        translate([0, -30, 0])\n        cube([10, 12, 8], center = true);\n        \n        // Smooth transition curves\n        translate([0, -30, -1])\n        cube([12, 14, 10], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    racket_head();\n    string_bed();\n    shaft();\n    handle();\n    throat();\n    \n    // Structural gussets\n    translate([5, -35, 0])\n    rotate([0, 0, 30])\n    cube([3, 8, 8]);\n    translate([-5, -35, 0])\n    rotate([0, 0, -30])\n    cube([3, 8, 8]);\n}",
    "renders": true
  },
  {
    "sports_equipment": "badminton_racket",
    "openscad_code": "// Badminton Racket Furniture Item\n// Realistic style, medium complexity\n\n// Overall dimensions\nracket_length = 140;\nhead_width = 80;\nhead_height = 90;\nhandle_length = 50;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main racket head - oval frame\nmodule racket_head() {\n    difference() {\n        // Outer frame\n        scale([1, 1.2, 1])\n        cylinder(h=wall_thickness, d1=head_width, d2=head_width, $fn=50);\n        \n        // Inner cutout\n        translate([0, 0, -1])\n        scale([0.85, 0.85, 1])\n        cylinder(h=wall_thickness+2, d1=head_width-8, d2=head_width-8, $fn=50);\n    }\n}\n\n// String bed - simplified grid pattern\nmodule string_bed() {\n    string_spacing = 3;\n    string_width = 0.8;\n    \n    // Vertical strings\n    for(i = [-head_width/2+10 : string_spacing : head_width/2-10]) {\n        translate([i, 0, wall_thickness/2])\n        scale([string_width, head_height*0.6, wall_thickness])\n        cube([1, 1, 1], center=true);\n    }\n    \n    // Horizontal strings\n    for(j = [-head_height/2+15 : string_spacing : head_height/2-15]) {\n        translate([0, j, wall_thickness/2])\n        scale([head_width*0.7, string_width, wall_thickness])\n        cube([1, 1, 1], center=true);\n    }\n}\n\n// Handle grip with texture\nmodule handle() {\n    // Main handle body\n    cylinder(h=handle_length, d1=12, d2=10, center=false);\n    \n    // Grip texture - rings\n    for(i = [0:5:handle_length-10]) {\n        translate([0, 0, i])\n        cylinder(h=2, d1=12.5, d2=12.5, $fn=30);\n    }\n}\n\n// Shaft connecting head and handle\nmodule shaft() {\n    cylinder(h=racket_length-handle_length-head_height/2, d1=8, d2=10);\n}\n\n// T-joint reinforcement\nmodule t_joint() {\n    // Main joint body\n    translate([0, 0, -5])\n    cylinder(h=10, d1=14, d2=14, $fn=20);\n    \n    // Reinforcement wings\n    for(angle = [0:120:240]) {\n        rotate([0, 0, angle])\n        translate([7, 0, 0])\n        cube([6, 2, 10], center=true);\n    }\n}\n\n// Base stand for furniture use\nmodule stand() {\n    // Circular base\n    cylinder(h=5, d1=30, d2=30, $fn=40);\n    \n    // Support column\n    translate([0, 0, 2.5])\n    cylinder(h=15, d1=8, d2=12);\n}\n\n// Main assembly\ntranslate([0, 0, 5])\nstand();\n\ntranslate([0, 0, 20])\nunion() {\n    // Handle\n    handle();\n    \n    // Shaft\n    translate([0, 0, handle_length])\n    shaft();\n    \n    // T-joint\n    translate([0, 0, handle_length+5])\n    t_joint();\n    \n    // Racket head assembly\n    translate([0, 0, handle_length+(racket_length-handle_length-head_height/2)])\n    union() {\n        racket_head();\n        translate([0, 0, wall_thickness/2])\n        string_bed();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "squash_racket",
    "openscad_code": "// Squash Racket Furniture Item\n// Realistic style, medium complexity\n\n// Main parameters\nracket_length = 140;\nhead_width = 75;\nhead_height = 100;\nhandle_length = 40;\ngrip_diameter = 25;\nwall_thickness = 2;\n\n// Color definitions\nframe_color = \"Silver\";\ngrip_color = \"DarkGray\";\nstring_color = \"White\";\n\n// Main frame module\nmodule racket_frame() {\n    color(frame_color) {\n        // Head frame - oval shape\n        difference() {\n            // Outer oval\n            scale([head_width/2, head_height/2, 1])\n                cylinder(h=wall_thickness*2, r=1, $fn=50);\n            \n            // Inner cutout\n            translate([0, 0, -0.1])\n                scale([(head_width-wall_thickness*2)/2, (head_height-wall_thickness*2)/2, 1])\n                    cylinder(h=wall_thickness*2+0.2, r=1, $fn=50);\n        }\n        \n        // Throat - connection to handle\n        translate([-handle_length/2-5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=handle_length, r1=wall_thickness*2, r2=wall_thickness*3);\n        \n        // Handle shaft\n        translate([-racket_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=racket_length-handle_length-5, r1=wall_thickness*3, r2=grip_diameter/2);\n    }\n}\n\n// String bed module\nmodule string_bed() {\n    color(string_color) {\n        // Main strings (vertical)\n        for (x = [-head_width/2+wall_thickness*2 : 3 : head_width/2-wall_thickness*2]) {\n            translate([x, 0, wall_thickness])\n                cube([0.8, head_height-wall_thickness*4, wall_thickness/2]);\n        }\n        \n        // Cross strings (horizontal)\n        for (y = [-head_height/2+wall_thickness*2 : 3 : head_height/2-wall_thickness*2]) {\n            translate([0, y, wall_thickness])\n                cube([head_width-wall_thickness*4, 0.8, wall_thickness/2]);\n        }\n    }\n}\n\n// Grip module with texture\nmodule grip() {\n    color(grip_color) {\n        // Main grip body\n        translate([-racket_length/2+handle_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=handle_length, r=grip_diameter/2, $fn=32);\n        \n        // Grip texture rings\n        for (i = [0 : 3 : handle_length-3]) {\n            translate([-racket_length/2+i, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=1.5, r=grip_diameter/2+0.5, r2=grip_diameter/2-0.5, $fn=32);\n        }\n    }\n}\n\n// Structural reinforcement at throat\nmodule throat_reinforcement() {\n    color(frame_color) {\n        translate([-handle_length-10, 0, wall_thickness])\n            rotate([0, 0, 30])\n                cube([15, wall_thickness*2, wall_thickness*3]);\n        \n        translate([-handle_length-10, 0, wall_thickness])\n            rotate([0, 0, -30])\n                cube([15, wall_thickness*2, wall_thickness*3]);\n    }\n}\n\n// End cap\nmodule end_cap() {\n    color(\"Black\") {\n        translate([-racket_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=3, r=grip_diameter/2+1, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    racket_frame();\n    string_bed();\n    grip();\n    throat_reinforcement();\n    end_cap();\n}",
    "renders": true
  },
  {
    "sports_equipment": "table_tennis_paddle",
    "openscad_code": "// Table Tennis Paddle Furniture Item - Realistic Style, Medium Complexity\n// Overall dimensions: ~160mm tall x 150mm wide x 40mm deep (wall-mounted shelf)\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\npaddle_width = 130;\npaddle_height = 150;\nhandle_length = 100;\nhandle_width = 25;\nhandle_thickness = 20;\nshelf_depth = 40;\nshelf_support_radius = 3;\ngrip_ring_count = 5;\n\nmodule paddle_blade() {\n    difference() {\n        // Main blade shape\n        union() {\n            // Blade body\n            translate([0, 0, shelf_depth/2])\n                scale([1, 1.2, 0.3])\n                sphere(d = paddle_width);\n            \n            // Flat back\n            translate([0, -paddle_height/4, shelf_depth/2])\n                cube([paddle_width*0.9, paddle_height*0.6, shelf_depth*0.3], center=true);\n        }\n        \n        // Hollow out back for weight reduction\n        translate([0, -paddle_height/4, shelf_depth/2 + 1])\n            cube([paddle_width*0.85, paddle_height*0.55, shelf_depth*0.4], center=true);\n    }\n}\n\nmodule handle() {\n    // Main handle body\n    difference() {\n        translate([-paddle_width/2 - handle_width/2, -paddle_height/2 - handle_length/2, handle_thickness/2])\n            cube([handle_width, handle_length, handle_thickness]);\n            \n        // Grip rings\n        for(i = [1:grip_ring_count-1]) {\n            translate([-paddle_width/2 - handle_width/2, -paddle_height/2 - handle_length*(i/grip_ring_count), -1])\n                cube([handle_width, 1, handle_thickness+2]);\n        }\n    }\n    \n    // Handle end cap\n    translate([-paddle_width/2 - handle_width/2, -paddle_height/2 - handle_length, handle_thickness/2])\n        cylinder(h = handle_thickness, r1 = handle_width/2, r2 = handle_width/2.5);\n}\n\nmodule shelf_supports() {\n    // Wall mounting brackets\n    for(pos = [[-paddle_width/3, -paddle_height/3], [paddle_width/3, -paddle_height/3], \n               [0, paddle_height/3]]) {\n        translate([pos[0], pos[1], shelf_depth])\n            cylinder(h = 15, r = shelf_support_radius);\n    }\n}\n\nmodule rubber_surface() {\n    // Front rubber layer\n    translate([0, 0, shelf_depth*0.3 + 1])\n        scale([0.95, 0.95, 0.05])\n        sphere(d = paddle_width);\n    \n    // Back rubber layer\n    translate([0, 0, 1])\n        scale([0.9, 0.9, 0.05])\n        sphere(d = paddle_width);\n}\n\n// Main assembly\nunion() {\n    // Paddle blade as shelf\n    paddle_blade();\n    \n    // Handle as support\n    handle();\n    \n    // Shelf supports\n    shelf_supports();\n    \n    // Rubber surfaces as shelf liners\n    rubber_surface();\n}",
    "renders": true
  },
  {
    "sports_equipment": "hockey_stick",
    "openscad_code": "// Hockey Stick Furniture Item (Wall-Mounted Coat Rack)\n// Realistic style, medium complexity\n// Overall length ~140mm, designed for 3D printing\n\n// Constants\nwall_thickness = 2;\ngrip_diameter = 8;\nblade_width = 30;\nblade_height = 8;\nshaft_length = 120;\nshaft_width = 10;\nmount_size = 20;\n\n// Main module\nmodule hockey_stick_rack() {\n    // Wall mounting plate\n    translate([0, 0, mount_size/2])\n        cube([mount_size, wall_thickness, mount_size], center=true);\n    \n    // Mounting holes\n    for(x = [-mount_size/3, mount_size/3])\n        for(z = [-mount_size/3, mount_size/3])\n            translate([x, 0, z])\n                cylinder(h=wall_thickness+1, d=3, center=true, $fn=16);\n    \n    // Shaft connecting to mount\n    translate([0, -shaft_length/2 - mount_size/2, mount_size/2 - shaft_width/2])\n        cube([shaft_width, shaft_length, shaft_width], center=true);\n    \n    // Shaft grip texture rings\n    for(i = [1:5:shaft_length-10]) {\n        translate([0, -i - mount_size/2, mount_size/2 - shaft_width/2])\n            rotate([0, 90, 0])\n                cylinder(h=shaft_width+2, d=grip_diameter, center=true, $fn=32);\n    }\n    \n    // Curved shaft transition to blade\n    translate([0, -shaft_length - 15, mount_size/2 - shaft_width/2])\n        rotate([90, 0, 0])\n            cylinder(h=shaft_width, d=shaft_width, center=true, $fn=32);\n    \n    // Blade\n    translate([0, -shaft_length - 25, -blade_height/2])\n        difference() {\n            // Main blade shape\n            cube([blade_width, 40, blade_height], center=true);\n            \n            // Blade curve (hollowed)\n            translate([0, -5, -blade_height/2 + wall_thickness])\n                cylinder(h=blade_height + 1, d=blade_width - 10, center=true, $fn=32);\n            \n            // Blade taper\n            translate([0, 15, 0])\n                cube([blade_width - 10, 20, blade_height], center=true);\n        }\n    \n    // Coat hooks on blade\n    for(x = [-blade_width/3, 0, blade_width/3]) {\n        translate([x, -shaft_length - 25, blade_height/2 + 2])\n            rotate([45, 0, 0])\n                cylinder(h=10, d=4, $fn=16);\n    }\n    \n    // Reinforcement ribs\n    translate([0, -shaft_length/2 - mount_size/2, mount_size/2 - shaft_width - 1])\n        cube([shaft_width + 4, 15, wall_thickness], center=true);\n    \n    translate([0, -shaft_length - 15, -blade_height/2 - 1])\n        cube([blade_width, wall_thickness, blade_height + 2], center=true);\n}\n\n// Generate the model\nhockey_stick_rack();",
    "renders": true
  },
  {
    "sports_equipment": "golf_club",
    "openscad_code": "// Golf Club Furniture Item - Realistic Style\n// A decorative wall-mounted golf club display shelf\n// Overall dimensions: ~120mm width x 80mm height x 30mm depth\n\n$fn = 32;\n\n// Main module\nmodule golf_club_shelf() {\n    // Wall mounting plate\n    difference() {\n        translate([0, 0, 5]) \n            cube([120, 80, 4], center=true);\n        \n        // Mounting holes\n        for(x = [-40, 40])\n            translate([x, -30, 3])\n                cylinder(h=5, r=2.5);\n    }\n    \n    // Club support arms\n    for(side = [-1, 1]) {\n        // Left/right support arms\n        translate([side * 35, 20, 0])\n            rotate([0, 90, 0])\n                club_support();\n        \n        // Club holder clips\n        translate([side * 35, 25, 15])\n            rotate([0, 0, 90])\n                club_clip();\n    }\n    \n    // Decorative golf club model\n    translate([-20, 0, 25])\n        rotate([90, 0, 0])\n            scale([0.3, 0.3, 0.3])\n                golf_club();\n}\n\nmodule club_support() {\n    // Triangular support structure\n    difference() {\n        union() {\n            // Main support beam\n            cylinder(h=50, r=3);\n            \n            // Triangular brace\n            translate([-3, 0, 20])\n                rotate([90, 0, 0])\n                    cube([6, 20, 2]);\n        }\n        \n        // Lightening holes\n        translate([0, 0, 15])\n            cylinder(h=20, r=1.5);\n    }\n}\n\nmodule club_clip() {\n    // Spring-loaded clip for holding club shaft\n    difference() {\n        // Main clip body\n        union() {\n            translate([0, 0, 0])\n                cylinder(h=12, r=5);\n            translate([0, 12, 0])\n                sphere(r=5);\n        }\n        \n        // Shaft opening\n        translate([0, 6, 0])\n            rotate([90, 0, 0])\n                cylinder(h=10, r=2.5);\n        \n        // Grip texture grooves\n        for(i = [1:3:10]) {\n            translate([0, i, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=10.1, r=2.6);\n        }\n    }\n}\n\nmodule golf_club() {\n    // Complete golf club model\n    union() {\n        // Shaft\n        translate([0, 0, -60])\n            rotate([0, 0, 0])\n                cylinder(h=120, r=2);\n        \n        // Grip\n        translate([0, 0, -70])\n            cylinder(h=25, r=3);\n        \n        // Hosel\n        translate([0, 0, 0])\n            cylinder(h=8, r=3);\n        \n        // Club head - driver style\n        difference() {\n            // Main head\n            translate([0, 0, 8])\n                cube([45, 12, 15], center=true);\n            \n            // Face angle\n            translate([20, 0, 8])\n                rotate([0, 12, 0])\n                    cube([25, 15, 18], center=true);\n            \n            // Hollow back\n            translate([-10, 0, 8])\n                cube([25, 8, 10], center=true);\n            \n            // Score lines on face\n            for(i = [-2, 0, 2]) {\n                translate([22, i*2, 8])\n                    cube([0.5, 0.5, 12], center=true);\n            }\n        }\n        \n        // Sole plate detail\n        translate([0, 0, 15.5])\n            cube([45, 12, 1], center=true);\n    }\n}\n\n// Render the model\ngolf_club_shelf();",
    "renders": true
  },
  {
    "sports_equipment": "pool_cue",
    "openscad_code": "// Pool Cue Stand - Furniture Item\n// Realistic style, medium complexity\n// Scaled for 3D printing - approximately 120mm height\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\nbase_diameter = 50;\nbase_height = 5;\npole_height = 100;\npole_diameter = 6;\ngrip_length = 30;\ngrip_diameter = 8;\ntip_length = 5;\ntip_diameter = 4;\nholder_count = 6;\nholder_radius = 8;\n\n// Base module for stability\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = base_height, d = base_diameter, center = true);\n        \n        // Weight reduction hollow\n        translate([0, 0, -1.5])\n            cylinder(h = base_height + 2, d = base_diameter - 6, center = true);\n        \n        // Cable/channel for weight compartment\n        translate([0, -base_diameter/2 + 3, 0])\n            rotate([90, 0, 0])\n                cylinder(h = base_diameter/2, d = 4, center = true);\n    }\n}\n\n// Decorative ring detail\nmodule ring(height, diameter) {\n    for(i = [0:1:3]) {\n        translate([0, 0, height + i * 0.5])\n            cylinder(h = 0.5, d1 = diameter + 1, d2 = diameter + 0.5);\n    }\n}\n\n// Main pole with taper\nmodule pole() {\n    difference() {\n        union() {\n            // Bottom section\n            cylinder(h = pole_height * 0.7, d1 = pole_diameter + 2, d2 = pole_diameter, center = true);\n            \n            // Grip section\n            translate([0, 0, pole_height * 0.35])\n                cylinder(h = grip_length, d = grip_diameter, center = true);\n            \n            // Upper taper\n            translate([0, 0, pole_height * 0.7])\n                cylinder(h = pole_height * 0.3, d1 = pole_diameter, d2 = tip_diameter, center = true);\n            \n            // Tip\n            translate([0, 0, pole_height/2 - tip_length/2])\n                cylinder(h = tip_length, d = tip_diameter, center = true);\n            \n            // Decorative rings\n            ring(pole_height * 0.35 - grip_length/2 - 2, grip_diameter);\n            ring(pole_height * 0.35 + grip_length/2 + 1, grip_diameter);\n        }\n        \n        // Hollow center for weight reduction\n        for(i = [0:1:4]) {\n            translate([0, 0, -pole_height/2 + i * (pole_height/5) + 2])\n                cylinder(h = pole_height/5 - 1, d = 3, center = true);\n        }\n    }\n}\n\n// Pool cue holder arms\nmodule holder_arm(index) {\n    angle = index * (360 / holder_count);\n    \n    rotate([0, 0, angle])\n    translate([base_diameter/2 - 5, 0, base_height + 2])\n    rotate([90, 0, 0])\n    difference() {\n        // Main arm\n        cylinder(h = 25, d = 6, center = true);\n        \n        // Cue slot\n        translate([0, 0, -12])\n            cube([3.5, 20, 25], center = true);\n        \n        // Support gusset\n        translate([-2, 0, -10])\n            rotate([0, 90, 0])\n                cylinder(h = 4, d = 8, center = true);\n    }\n}\n\n// Grip texture pattern\nmodule grip_texture() {\n    for(i = [0:5:25]) {\n        rotate([0, 0, i * 15])\n        translate([0, 0, pole_height * 0.35 - grip_length/2 + i])\n        difference() {\n            cylinder(h = 3, d = grip_diameter + 0.5, center = true);\n            cylinder(h = 3.2, d = grip_diameter - 0.5, center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Main pole\n    translate([0, 0, base_height/2])\n        pole();\n    \n    // Grip texture\n    grip_texture();\n    \n    // Holder arms\n    for(i = [0:1:holder_count-1]) {\n        holder_arm(i);\n    }\n    \n    // Center support column\n    translate([0, 0, base_height/2])\n        cylinder(h = pole_height, d = 8, center = true);\n}\n\n// Feet for stability\nfor(i = [0:1:3]) {\n    angle = i * 90;\n    rotate([0, 0, angle])\n    translate([base_diameter/2 - 3, 0, -base_height/2])\n        cylinder(h = 3, d = 6);\n}",
    "renders": true
  }
]