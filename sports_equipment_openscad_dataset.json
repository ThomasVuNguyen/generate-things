[
  {
    "sports_equipment": "basketball",
    "openscad_code": "// Basketball Lamp - Realistic Style with Medium Complexity\n// Combines sports theme with functional furniture lighting\n\n// Main parameters\nball_diameter = 80;\nwall_thickness = 2;\nlamp_height = 120;\nbase_diameter = 60;\n\n// Basketball module with realistic details\nmodule basketball() {\n    // Main sphere body with wall thickness\n    difference() {\n        sphere(d = ball_diameter);\n        sphere(d = ball_diameter - wall_thickness);\n    }\n    \n    // Basketball seam lines using cylinders\n    color(\"black\") {\n        // Vertical seam\n        rotate([90, 0, 0]) \n            cylinder(h = ball_diameter, d = 1.5, $fn = 32);\n        \n        // Horizontal seam\n        rotate([0, 90, 0]) \n            cylinder(h = ball_diameter, d = 1.5, $fn = 32);\n        \n        // Curved seams following basketball pattern\n        for (i = [0:60:359]) {\n            rotate([0, 0, i]) \n                rotate([0, 30, 0]) \n                    cylinder(h = ball_diameter * 0.8, d = 1.5, $fn = 32);\n            rotate([0, 0, i + 30]) \n                rotate([0, -30, 0]) \n                    cylinder(h = ball_diameter * 0.8, d = 1.5, $fn = 32);\n        }\n    }\n    \n    // Grip texture pattern using small cylinders\n    color(\"orange\") {\n        for (theta = [0:30:359]) {\n            for (phi = [0:30:150]) {\n                rotate([0, phi, theta]) \n                    translate([0, 0, ball_diameter/2 - 0.5]) \n                        cylinder(h = 0.5, d = 2, $fn = 8);\n            }\n        }\n    }\n}\n\n// Lamp base with stability features\nmodule lamp_base() {\n    // Main base cylinder\n    cylinder(h = 15, d = base_diameter, $fn = 64);\n    \n    // Counterweight ring for stability\n    translate([0, 0, 5]) \n        difference() {\n            cylinder(h = 10, d = base_diameter - 10, $fn = 64);\n            cylinder(h = 10, d = base_diameter - 20, $fn = 64);\n        }\n    \n    // Cable management hole\n    rotate([90, 0, 0]) \n        cylinder(h = base_diameter, d = 8, $fn = 32);\n}\n\n// Support pole with joints\nmodule support_pole() {\n    // Lower pole section\n    cylinder(h = lamp_height/2, d = 8, $fn = 32);\n    \n    // Joint connector\n    translate([0, 0, lamp_height/2]) \n        cylinder(h = 10, d = 12, $fn = 32);\n    \n    // Upper pole section\n    translate([0, 0, lamp_height/2 + 10]) \n        cylinder(h = lamp_height/2 - 30, d = 8, $fn = 32);\n    \n    // Ball mount bracket\n    translate([0, 0, lamp_height - 30]) \n        sphere(d = 12);\n}\n\n// Lamp assembly\nmodule basketball_lamp() {\n    // Base at bottom\n    translate([0, 0, 0]) \n        lamp_base();\n    \n    // Support pole\n    translate([0, 0, 15]) \n        support_pole();\n    \n    // Basketball lamp shade\n    translate([0, 0, lamp_height - 30]) \n        rotate([0, 0, 45]) \n            basketball();\n    \n    // LED holder inside basketball\n    translate([0, 0, lamp_height - 30]) {\n        difference() {\n            sphere(d = ball_diameter - wall_thickness - 2);\n            sphere(d = ball_diameter - wall_thickness - 10);\n        }\n        \n        // LED mounting holes\n        for (i = [0:120:359]) {\n            rotate([0, 0, i]) \n                translate([0, 25, 0]) \n                    cylinder(h = 5, d = 3, $fn = 16);\n        }\n    }\n}\n\n// Render the complete lamp\nbasketball_lamp();",
    "renders": true
  },
  {
    "sports_equipment": "football",
    "openscad_code": "// Football Furniture: Modular Football Ottoman\n// Dimensions: ~120mm diameter, suitable as footrest or small seat\n\n$fn = 48;  // Smooth curves for realistic appearance\n\nmodule football_ottoman() {\n    // Main body - hollow sphere for lightweight structure\n    difference() {\n        sphere(d=120);\n        sphere(d=116);  // 2mm wall thickness\n    }\n    \n    // Internal support structure\n    translate([0,0,-58]) {\n        cylinder(h=116, d=20, $fn=6);  // Central column\n    }\n    \n    // Hexagonal panel pattern for realistic football texture\n    difference() {\n        // Outer shell with panels\n        for(i=[0:5]) {\n            rotate([0,0,i*60]) {\n                translate([0,0,60]) {\n                    linear_extrude(height=2) {\n                        polygon(points=[\n                            [0,0],\n                            [30,0],\n                            [15,26]\n                        ]);\n                    }\n                }\n            }\n        }\n        \n        // Cut hexagonal pattern into surface\n        for(i=[0:5]) {\n            rotate([0,0,i*60]) {\n                for(j=[0:5]) {\n                    rotate([0,0,j*60]) {\n                        translate([0,0,59.5]) {\n                            cylinder(h=5, d=20);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Pentagonal panels at vertices\n    for(phi=[atan(1/2), 180-atan(1/2)]) {\n        rotate([phi,0,0]) {\n            for(theta=[0:72:360]) {\n                rotate([0,0,theta]) {\n                    translate([0,0,60]) {\n                        intersection() {\n                            sphere(d=120);\n                            translate([0,0,-5]) {\n                                cylinder(h=10, d=15);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Furniture base - stable flat bottom\n    translate([0,0,-60]) {\n        difference() {\n            cylinder(h=10, d=80);\n            cylinder(h=11, d=76);  // 2mm wall\n        }\n    }\n    \n    // Anti-slip rubber feet\n    for(angle=[45:90:360]) {\n        rotate([0,0,angle]) {\n            translate([30,0,-65]) {\n                cylinder(h=3, d=8);\n            }\n        }\n    }\n    \n    // Ventilation holes for pressure regulation\n    for(i=[0:3]) {\n        rotate([0,0,i*90]) {\n            translate([0,50,0]) {\n                rotate([90,0,0]) {\n                    cylinder(h=120, d=3);\n                }\n            }\n        }\n    }\n    \n    // Reinforcement rings at stress points\n    translate([0,0,-50]) {\n        cylinder(h=5, d=100);\n    }\n    translate([0,0,50]) {\n        cylinder(h=5, d=100);\n    }\n    \n    // Handle recess for carrying\n    difference() {\n        translate([0,60,0]) {\n            rotate([90,0,0]) {\n                cylinder(h=20, d=40);\n            }\n        }\n        translate([0,70,0]) {\n            cube([50,20,40], center=true);\n        }\n    }\n}\n\n// Assembly\nfootball_ottoman();",
    "renders": true
  },
  {
    "sports_equipment": "soccer_ball",
    "openscad_code": "$fn = 32;\n\n// Overall soccer ball as furniture – a spherical stool with hex/pent footrest\nmodule soccer_stool() {\n    // Main ball shell (hollow, 2 mm wall)\n    difference() {\n        sphere(d = 120);                 // outer\n        sphere(d = 116);                 // inner\n    }\n\n    // Black pentagon patches\n    for (p = pentagon_positions()) {\n        translate(p)\n            rotate([acos(-1/5)/PI*180, 0, 0])\n            pentagon_patch();\n    }\n\n    // White hexagon patches\n    for (h = hexagon_positions()) {\n        translate(h)\n            rotate([acos(-1/3)/PI*180, 0, 0])\n            hexagon_patch();\n    }\n\n    // Internal support ring (hidden but printable)\n    translate([0, 0, -55])\n        cylinder(h = 110, d = 40, $fn = 6);\n\n    // Four cylindrical legs (Ø15 mm) with 2 mm wall\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n            translate([45, 0, -70])\n                difference() {\n                    cylinder(h = 70, d = 15);\n                    translate([0, 0, 2])\n                        cylinder(h = 68, d = 11);\n                }\n    }\n}\n\n// Single pentagon patch (2 mm thick, inset 0.5 mm)\nmodule pentagon_patch() {\n    linear_extrude(height = 1.5, convexity = 5)\n        offset(r = -0.5)\n            polygon([\n                for (i = [0:4])\n                    [18*cos(i*72), 18*sin(i*72)]\n            ]);\n}\n\n// Single hexagon patch (2 mm thick, inset 0.5 mm)\nmodule hexagon_patch() {\n    linear_extrude(height = 1.5, convexity = 5)\n        offset(r = -0.5)\n            polygon([\n                for (i = [0:5])\n                    [18*cos(i*60), 18*sin(i*60)]\n            ]);\n}\n\n// Pre-computed positions for standard truncated-icosahedron patches\nfunction pentagon_positions() = [\n    [0, 0, 60],                         // top\n    [0, 0, -60],                        // bottom\n    [0, 48.5, 30],\n    [0, 48.5, -30],\n    [0, -48.5, 30],\n    [0, -48.5, -30],\n    [42, 24.25, 30],\n    [42, 24.25, -30],\n    [42, -24.25, 30],\n    [42, -24.25, -30],\n    [-42, 24.25, 30],\n    [-42, 24.25, -30]\n];\n\nfunction hexagon_positions() = [\n    [0, 29.1, 48],\n    [0, 29.1, -48],\n    [0, -29.1, 48],\n    [0, -29.1, -48],\n    [25.2, 14.55, 48],\n    [25.2, 14.55, -48],\n    [25.2, -14.55, 48],\n    [25.2, -14.55, -48],\n    [-25.2, 14.55, 48],\n    [-25.2, 14.55, -48],\n    [-25.2, -14.55, 48],\n    [-25.2, -14.55, -48],\n    [29.1, 0, 25],\n    [29.1, 0, -25],\n    [-29.1, 0, 25],\n    [-29.1, 0, -25],\n    [14.55, 25.2, 25],\n    [14.55, 25.2, -25],\n    [14.55, -25.2, 25],\n    [14.55, -25.2, -25]\n];\n\nsoccer_stool();",
    "renders": true
  },
  {
    "sports_equipment": "baseball",
    "openscad_code": "// Baseball furniture - Baseball-shaped side table\n// Overall dimensions: 200mm diameter, 450mm height\n// Features hollow sphere tabletop with storage inside and cylindrical legs\n\n// Parameters\nsphere_diameter = 200;      // Main baseball sphere\nleg_height = 250;           // Table leg height\nleg_diameter = 20;          // Table leg thickness\nwall_thickness = 2;         // 3D printable wall thickness\nseam_width = 3;             // Baseball seam thickness\nstitch_spacing = 15;        // Spacing between stitches\nstitch_length = 8;          // Length of each stitch\nstitch_thickness = 1.5;     // Stitch thickness\n\n// Main module for the baseball table\nmodule baseball_table() {\n    // Table top - hollow baseball sphere\n    difference() {\n        // Outer sphere\n        sphere(d = sphere_diameter, $fn = 100);\n        \n        // Hollow interior\n        sphere(d = sphere_diameter - 2 * wall_thickness, $fn = 100);\n        \n        // Flat bottom for stability\n        translate([0, 0, -sphere_diameter/2])\n            cube([sphere_diameter * 2, sphere_diameter * 2, sphere_diameter], center = true);\n    }\n    \n    // Baseball seams - two intersecting curved lines\n    baseball_seams();\n    \n    // Table legs - three legs for stability\n    for (i = [0:120:359]) {\n        rotate([0, 0, i])\n            translate([sphere_diameter/2 * 0.7, 0, -leg_height - sphere_diameter/2])\n                cylinder(h = leg_height, d = leg_diameter, $fn = 32);\n    }\n    \n    // Leg support ring for stability\n    translate([0, 0, -leg_height/2 - sphere_diameter/2])\n        cylinder(h = wall_thickness, d1 = sphere_diameter * 0.8, d2 = sphere_diameter * 0.6, $fn = 64);\n}\n\n// Module for baseball seam pattern\nmodule baseball_seams() {\n    // First seam curve\n    rotate([0, 90, 0])\n        seam_curve();\n    \n    // Second seam curve (opposite direction)\n    rotate([0, 90, 180])\n        seam_curve();\n}\n\n// Module for one seam curve with stitches\nmodule seam_curve() {\n    // Main seam line\n    rotate_extrude(angle = 180, $fn = 100)\n        translate([sphere_diameter/2 - seam_width/2, 0, 0])\n            square([seam_width, seam_width]);\n    \n    // Stitches along the seam\n    for (a = [-80:stitch_spacing:80]) {\n        // Skip center to avoid overlap\n        if (abs(a) > 10) {\n            rotate([0, 0, a])\n                translate([sphere_diameter/2, 0, 0])\n                    rotate([90, 0, 0])\n                        stitch();\n        }\n    }\n}\n\n// Module for individual stitch\nmodule stitch() {\n    // Main stitch body\n    cube([stitch_length, stitch_thickness, stitch_thickness], center = true);\n    \n    // Stitch holes (decorative)\n    for (x = [-stitch_length/3, stitch_length/3]) {\n        translate([x, 0, 0])\n            cylinder(h = stitch_thickness + 0.1, d = stitch_thickness/2, center = true, $fn = 16);\n    }\n}\n\n// Generate the baseball table\ntranslate([0, 0, sphere_diameter/2 + leg_height])\n    baseball_table();",
    "renders": true
  },
  {
    "sports_equipment": "tennis_ball",
    "openscad_code": "// Tennis Ball Furniture - Storage Ottoman\n// Combines a realistic tennis ball design with functional storage furniture\n\n// Main Parameters\nball_diameter = 120;  // Tennis ball size\nwall_thickness = 2;   // 3D printable wall thickness\nseam_height = 3;      // Tennis ball seam height\nstorage_depth = 60;   // Internal storage depth\nleg_height = 80;      // Furniture leg height\n\n// Color Constants\ntennis_ball_color = [0.8, 0.9, 0.2];\nwhite_color = [1, 1, 1];\n\n// Tennis Ball Surface Texture Module\nmodule tennis_texture(radius) {\n    // Create fuzzy felt texture with small bumps\n    for (i = [0:30]) {\n        theta = rands(0, 360, 1)[0];\n        phi = rands(0, 180, 1)[0];\n        x = radius * sin(phi) * cos(theta);\n        y = radius * sin(phi) * sin(theta);\n        z = radius * cos(phi);\n        \n        translate([x, y, z]) {\n            scale([1, 1, 0.3]) {\n                sphere(r=0.5);\n            }\n        }\n    }\n}\n\n// Tennis Ball Seam Module\nmodule tennis_seam(radius) {\n    // Create the characteristic curved seam lines\n    for (i = [0:360:30]) {\n        rotate([0, 0, i]) {\n            rotate([90, 0, 0]) {\n                translate([0, 0, radius*0.98]) {\n                    scale([1, 0.1, seam_height]) {\n                        sphere(r=radius);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main Tennis Ball Body\nmodule tennis_ball_body() {\n    difference() {\n        // Outer ball shell\n        color(tennis_ball_color) {\n            sphere(d=ball_diameter);\n            tennis_texture(ball_diameter/2);\n            tennis_seam(ball_diameter/2);\n        }\n        \n        // Hollow interior for storage\n        translate([0, 0, -wall_thickness/2]) {\n            sphere(d=ball_diameter - 2*wall_thickness);\n        }\n    }\n}\n\n// Storage Lid (top half of ball)\nmodule storage_lid() {\n    difference() {\n        // Top hemisphere\n        color(tennis_ball_color) {\n            intersection() {\n                sphere(d=ball_diameter);\n                translate([0, 0, 0]) {\n                    cube([ball_diameter*2, ball_diameter*2, ball_diameter/2], center=true);\n                }\n            }\n            tennis_seam(ball_diameter/2);\n        }\n        \n        // Inner hollow\n        translate([0, 0, -wall_thickness]) {\n            intersection() {\n                sphere(d=ball_diameter - 2*wall_thickness);\n                translate([0, 0, 0]) {\n                    cube([ball_diameter*2, ball_diameter*2, ball_diameter/2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Furniture Leg Module\nmodule furniture_leg() {\n    color([0.4, 0.4, 0.4]) {\n        // Main leg cylinder\n        cylinder(h=leg_height, d=8, center=false);\n        \n        // Leg base pad\n        translate([0, 0, leg_height]) {\n            cylinder(h=3, d=12, center=false);\n        }\n        \n        // Connection joint\n        translate([0, 0, 0]) {\n            sphere(d=10);\n        }\n    }\n}\n\n// Leg Assembly\nmodule leg_assembly() {\n    // Four legs in furniture position\n    translate([ball_diameter/2 - 15, ball_diameter/2 - 15, -leg_height]) {\n        furniture_leg();\n    }\n    \n    translate([-ball_diameter/2 + 15, ball_diameter/2 - 15, -leg_height]) {\n        furniture_leg();\n    }\n    \n    translate([ball_diameter/2 - 15, -ball_diameter/2 + 15, -leg_height]) {\n        furniture_leg();\n    }\n    \n    translate([-ball_diameter/2 + 15, -ball_diameter/2 + 15, -leg_height]) {\n        furniture_leg();\n    }\n}\n\n// Assembly\nmodule tennis_ball_ottoman() {\n    // Main body\n    translate([0, 0, leg_height + storage_depth/2]) {\n        tennis_ball_body();\n    }\n    \n    // Storage lid (slightly offset for visualization)\n    translate([0, 0, leg_height + storage_depth + 5]) {\n        storage_lid();\n    }\n    \n    // Support structure\n    color([0.3, 0.3, 0.3]) {\n        cylinder(h=storage_depth, d=ball_diameter*0.8, center=false);\n    }\n    \n    // Furniture legs\n    leg_assembly();\n    \n    // Handle for lid\n    color(white_color) {\n        translate([0, ball_diameter/2 - 5, leg_height + storage_depth + 5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=20, d=5);\n                translate([0, 0, 20]) {\n                    sphere(d=5);\n                }\n            }\n        }\n    }\n}\n\n// Render the complete model\ntennis_ball_ottoman();",
    "renders": true
  },
  {
    "sports_equipment": "volleyball",
    "openscad_code": "// Volleyball-shaped side table\n// Realistic style, medium complexity\n// 3D-printable, no overhangs, 2 mm walls\n\n// overall scale\nscale = 0.8;\n\n// volleyball ball parameters\nball_d = 110 * scale;\nwall_t = 2;\nstripe_w = 6 * scale;\nstripe_t = 1.2;\n\n// leg parameters\nleg_h = 280 * scale;\nleg_r = 8 * scale;\nleg_t = 2.5;\nleg_base_r = 20 * scale;\n\n// top parameters\ntop_d = 230 * scale;\ntop_t = 8 * scale;\n\n// module for a hollow sphere\nmodule hollow_sphere(od, id) {\n    difference() {\n        sphere(d = od);\n        sphere(d = id);\n    }\n}\n\n// module for a single volleyball stripe segment\nmodule stripe_segment(length, width, thickness, angle) {\n    rotate([0, 0, angle])\n        translate([0, 0, -width / 2])\n            linear_extrude(height = width, center = true)\n                polygon(points = [[0, 0], [length, 0], [length * 0.9, thickness]]);\n}\n\n// volleyball shell with three stripes\nmodule volleyball_shell() {\n    difference() {\n        // outer shell\n        hollow_sphere(ball_d, ball_d - 2 * wall_t);\n        \n        // cut flat bottom for stability\n        translate([0, 0, -ball_d / 2 + 5 * scale])\n            cube([ball_d * 1.2, ball_d * 1.2, 10 * scale], center = true);\n    }\n    \n    // three curved stripes\n    for (a = [0, 120, 240]) {\n        rotate([0, 0, a])\n            translate([0, 0, ball_d / 2 - stripe_t])\n                color(\"white\")\n                    difference() {\n                        cylinder(h = stripe_t * 2, r = ball_d / 2, $fn = 128);\n                        scale([1, 0.3, 1])\n                            cylinder(h = stripe_t * 2, r = ball_d / 2 + 1, $fn = 128);\n                    }\n    }\n}\n\n// leg with hollow core\nmodule leg() {\n    difference() {\n        cylinder(h = leg_h, r = leg_r, $fn = 32);\n        translate([0, 0, leg_t])\n            cylinder(h = leg_h - leg_t, r = leg_r - leg_t, $fn = 32);\n    }\n    \n    // base flare\n    translate([0, 0, leg_h])\n        difference() {\n            cylinder(h = 6 * scale, r1 = leg_r, r2 = leg_base_r, $fn = 32);\n            cylinder(h = 6 * scale + 1, r1 = leg_r - leg_t, r2 = leg_base_r - leg_t, $fn = 32);\n        }\n}\n\n// circular tabletop\nmodule tabletop() {\n    difference() {\n        cylinder(h = top_t, r = top_d / 2, $fn = 64);\n        translate([0, 0, 2])\n            cylinder(h = top_t, r = top_d / 2 - 2, $fn = 64);\n    }\n    \n    // inner lip for ball nesting\n    translate([0, 0, top_t - 2])\n        cylinder(h = 4, r1 = top_d / 2 - 2, r2 = top_d / 2 - 12, $fn = 64);\n}\n\n// assembly\ntranslate([0, 0, leg_h + ball_d / 2 - 5 * scale])\n    volleyball_shell();\n\ntranslate([0, 0, leg_h - 5 * scale])\n    leg();\n\ntranslate([0, 0, leg_h + ball_d - 5 * scale])\n    tabletop();",
    "renders": true
  },
  {
    "sports_equipment": "golf_ball",
    "openscad_code": "// Golf Ball Furniture - OpenSCAD Code\n// Realistic style, medium complexity\n// Dimensions: 80mm diameter golf ball on 120mm tall stand\n\n// Main module\nmodule golf_ball_furniture() {\n    // Base stand\n    union() {\n        // Base plate\n        translate([0, 0, 0])\n            cylinder(h=5, r=60, $fn=64);\n        \n        // Center column\n        translate([0, 0, 5])\n            cylinder(h=80, r1=25, r2=15, $fn=64);\n        \n        // Top support ring\n        translate([0, 0, 85])\n            cylinder(h=5, r=35, $fn=64);\n        \n        // Golf ball\n        translate([0, 0, 95])\n            golf_ball(40, 2);\n    }\n}\n\n// Golf ball module with dimples\nmodule golf_ball(radius, wall_thickness) {\n    difference() {\n        // Main ball sphere\n        sphere(r=radius, $fn=128);\n        \n        // Hollow center\n        sphere(r=radius - wall_thickness, $fn=128);\n        \n        // Dimples - icosahedron pattern\n        dimple_pattern(radius);\n    }\n}\n\n// Dimple pattern using icosahedron vertices\nmodule dimple_pattern(ball_radius) {\n    // Icosahedron vertices scaled to sphere surface\n    phi = (1 + sqrt(5)) / 2;\n    scale = ball_radius * 0.95;\n    \n    // Vertices of icosahedron\n    vertices = [\n        [0, 1, phi], [0, -1, phi], [0, 1, -phi], [0, -1, -phi],\n        [1, phi, 0], [-1, phi, 0], [1, -phi, 0], [-1, -phi, 0],\n        [phi, 0, 1], [phi, 0, -1], [-phi, 0, 1], [-phi, 0, -1]\n    ];\n    \n    // Create dimples at each vertex\n    for (v = vertices) {\n        translate(v * scale)\n            rotate([0, 0, 45])\n                sphere(r=ball_radius * 0.12, $fn=16);\n    }\n    \n    // Additional dimples for fuller coverage\n    for (angle = [0:36:359]) {\n        rotate([0, 0, angle])\n            for (lat = [-60:30:60]) {\n                rotate([lat, 0, 0])\n                    translate([0, 0, ball_radius * 0.9])\n                        sphere(r=ball_radius * 0.1, $fn=16);\n            }\n    }\n}\n\n// Generate the model\ngolf_ball_furniture();",
    "renders": true
  },
  {
    "sports_equipment": "ping_pong_ball",
    "openscad_code": "// Ping-Pong Ball Furniture - Storage Ottoman\n// Realistic style, medium complexity\n// Overall dimensions: 120mm diameter, 200mm height\n\n// Parameters\nball_diameter = 120;\nwall_thickness = 2;\nleg_height = 80;\nbase_thickness = 5;\ngrip_spacing = 15;\ngrip_depth = 1;\n\n// Main module\nmodule ping_pong_ottoman() {\n    // Base structure\n    difference() {\n        // Outer sphere (cut in half for ottoman)\n        intersection() {\n            sphere(d=ball_diameter, $fn=100);\n            translate([0, -ball_diameter/2, 0])\n                cube([ball_diameter, ball_diameter, ball_diameter], center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            sphere(d=ball_diameter - 2*wall_thickness, $fn=100);\n    }\n    \n    // Flat base for stability\n    translate([0, -ball_diameter/2 - base_thickness/2, 0])\n        cube([ball_diameter - 10, base_thickness, ball_diameter - 10], center=true);\n    \n    // Support legs (4 legs for furniture stability)\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([ball_diameter/2 - 15, -ball_diameter/2 - base_thickness/2, leg_height/2])\n                cylinder(h=leg_height, d=8, center=true);\n    }\n    \n    // Ping-pong ball seam detail (white circle)\n    translate([0, -1, 0])\n        rotate([90, 0, 0])\n            cylinder(h=2, d=ball_diameter - 4, center=true);\n    \n    // Grip texture pattern (hexagonal pattern)\n    module grip_pattern() {\n        for(i = [-2:2]) {\n            for(j = [-2:2]) {\n                translate([\n                    i * grip_spacing + ((j % 2) * grip_spacing/2),\n                    j * grip_spacing * 0.866,\n                    ball_diameter/2 - wall_thickness\n                ]) {\n                    rotate([0, 0, 30])\n                        cylinder(h=grip_depth, d=3, $fn=6);\n                }\n            }\n        }\n    }\n    \n    // Apply grip texture to curved surface\n    translate([0, 0, 0])\n        grip_pattern();\n    \n    // Furniture joint reinforcement\n    translate([0, -ball_diameter/2 - base_thickness, 0])\n        cylinder(h=10, d=20, center=true);\n    \n    // Hidden compartment handle (integrated into seam)\n    translate([0, -2, ball_diameter/4])\n        rotate([0, 90, 0])\n            cylinder(h=30, d=5, center=true);\n}\n\n// Render the final model\nping_pong_ottoman();",
    "renders": true
  },
  {
    "sports_equipment": "hockey_puck",
    "openscad_code": "// Hockey Puck Stool - Medium Complexity\n// A functional stool inspired by a hockey puck design\n\n$fn = 50;\n\n// Overall dimensions\npuck_radius = 40;\npuck_height = 25;\nleg_height = 200;\nleg_radius = 6;\nseat_padding = 5;\n\n// Main puck body (hollow for weight reduction)\nmodule puck_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = puck_height, r = puck_radius);\n        \n        // Hollow center\n        translate([0, 0, 2])\n            cylinder(h = puck_height - 4, r = puck_radius - 4);\n        \n        // Top grip pattern - concentric rings\n        for(i = [1:3]) {\n            translate([0, 0, puck_height - 1.5])\n                cylinder(h = 1.5, r = puck_radius - (i * 8) - 1);\n        }\n        \n        // Bottom grip pattern\n        for(i = [1:3]) {\n            translate([0, 0, 0])\n                cylinder(h = 1.5, r = puck_radius - (i * 8) - 1);\n        }\n    }\n}\n\n// Seat cushion with hockey puck styling\nmodule seat_cushion() {\n    translate([0, 0, puck_height]) {\n        difference() {\n            // Main cushion\n            cylinder(h = seat_padding * 2, r = puck_radius);\n            \n            // Center hole for weight reduction\n            translate([0, 0, 2])\n                cylinder(h = seat_padding * 2 - 4, r = puck_radius - 15);\n            \n            // Ventilation holes\n            for(angle = [0:45:315]) {\n                rotate([0, 0, angle])\n                    translate([puck_radius - 20, 0, 1])\n                        cylinder(h = seat_padding * 2 - 2, r = 3);\n            }\n        }\n    }\n}\n\n// Reinforcement ring for leg attachment\nmodule leg_base() {\n    translate([0, 0, 2]) {\n        difference() {\n            cylinder(h = 8, r = puck_radius - 8);\n            cylinder(h = 8, r = 25);\n        }\n    }\n}\n\n// Support legs with hockey stick inspiration\nmodule support_leg(angle, offset) {\n    rotate([0, 0, angle]) {\n        translate([offset, 0, 10]) {\n            // Main leg\n            cylinder(h = leg_height, r = leg_radius);\n            \n            // Foot pad\n            translate([0, 0, leg_height]) {\n                difference() {\n                    cylinder(h = 5, r = leg_radius + 4);\n                    cylinder(h = 5, r = leg_radius);\n                }\n            }\n            \n            // Cross-bracing connection points\n            translate([0, 0, leg_height * 0.7])\n                sphere(r = leg_radius + 1);\n            \n            translate([0, 0, leg_height * 0.3])\n                sphere(r = leg_radius + 1);\n        }\n    }\n}\n\n// Cross-bracing for stability\nmodule cross_brace() {\n    for(i = [0:90:270]) {\n        rotate([0, 0, i]) {\n            translate([30, 0, leg_height * 0.7]) {\n                rotate([90, 0, 90]) {\n                    cylinder(h = 60, r = leg_radius * 0.8);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    puck_body();\n    seat_cushion();\n    leg_base();\n    \n    // Support structure\n    for(i = [0:90:270]) {\n        support_leg(i, 25);\n    }\n    \n    // Cross-bracing\n    cross_brace();\n    \n    // Additional structural elements\n    translate([0, 0, 10]) {\n        cylinder(h = 5, r = 20);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "cricket_ball",
    "openscad_code": "// Cricket Ball Stool - A realistic cricket ball transformed into a functional piece of furniture\n// Overall height: 120mm, seat diameter: 100mm (scaled up from standard 72mm ball)\n\n// Main parameters\nball_diameter = 100;\nseam_height = 2;\nwall_thickness = 2.5;\nleg_diameter = 8;\nleg_height = 60;\nbase_diameter = 80;\n\n// Color constants\n$fn = 50;\n\n// Module for creating the ball seam texture\nmodule seam_stitch(stitch_length, stitch_width, stitch_height) {\n    for(i=[0:45:359]) {\n        rotate([0, 0, i])\n        translate([0, seam_height/2, ball_diameter/2 - stitch_height/2])\n        cube([stitch_width, stitch_length, stitch_height], center=true);\n    }\n}\n\n// Module for creating the ball surface with seam\nmodule cricket_ball_surface() {\n    difference() {\n        // Main ball sphere\n        sphere(d=ball_diameter);\n        \n        // Create the seam groove\n        rotate([90, 0, 0])\n        cylinder(h=ball_diameter*2, d=ball_diameter*0.8, $fn=6);\n        \n        // Remove top and bottom to create seating surface\n        translate([0, 0, -ball_diameter/2 - 1])\n        cube([ball_diameter*2, ball_diameter*2, ball_diameter], center=true);\n    }\n    \n    // Add seam stitches\n    seam_stitch(4, 2, 1.5);\n}\n\n// Module for hollow ball structure (3D printable)\nmodule hollow_ball() {\n    difference() {\n        cricket_ball_surface();\n        \n        // Hollow interior\n        sphere(d=ball_diameter - wall_thickness*2);\n    }\n}\n\n// Module for stool legs\nmodule stool_leg() {\n    cylinder(h=leg_height, d=leg_diameter);\n}\n\n// Module for base support ring\nmodule base_ring() {\n    difference() {\n        cylinder(h=wall_thickness*2, d=base_diameter);\n        cylinder(h=wall_thickness*2 + 1, d=base_diameter - wall_thickness*2);\n    }\n}\n\n// Main assembly\nmodule cricket_ball_stool() {\n    union() {\n        // Main ball seat\n        hollow_ball();\n        \n        // Structural ring at seam level\n        translate([0, 0, seam_height/2])\n        difference() {\n            cylinder(h=wall_thickness, d=ball_diameter);\n            cylinder(h=wall_thickness + 1, d=ball_diameter - wall_thickness*2);\n        }\n        \n        // Leg supports\n        for(i=[0:120:359]) {\n            rotate([0, 0, i])\n            translate([0, ball_diameter/3, -leg_height/2 - seam_height/2])\n            stool_leg();\n        }\n        \n        // Base ring for stability\n        translate([0, 0, -leg_height - seam_height/2])\n        base_ring();\n        \n        // Internal support structure\n        translate([0, 0, -seam_height/2 - leg_height/2])\n        difference() {\n            cylinder(h=leg_height, d=ball_diameter/2);\n            cylinder(h=leg_height + 1, d=ball_diameter/2 - wall_thickness);\n        }\n    }\n}\n\n// Render the stool\ncricket_ball_stool();",
    "renders": true
  },
  {
    "sports_equipment": "rugby_ball",
    "openscad_code": "// Rugby Ball Storage Ottoman\n// 3D printable furniture piece shaped like a rugby ball\n// Functions as both seating and storage for sports equipment\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Main dimensions (in mm)\nball_length = 120;\nball_width = 70;\nball_height = 65;\nwall_thickness = 2;\n\n// Module for creating the main rugby ball body\nmodule rugby_ball_body() {\n    // Create ellipsoid base shape\n    scale([1, 0.58, 0.54])\n    sphere(d=ball_length);\n    \n    // Add grip texture with raised panels\n    for (i = [0:4]) {\n        rotate([0, 0, i * 36])\n        translate([0, 0, ball_height/2 - 5])\n        linear_extrude(height=1.5)\n        scale([1, 0.6, 1])\n        circle(d=ball_width/3);\n    }\n}\n\n// Module for creating the hollow storage cavity\nmodule storage_cavity() {\n    difference() {\n        // Outer shell\n        scale([1, 0.58, 0.54])\n        sphere(d=ball_length);\n        \n        // Inner cavity\n        translate([0, 0, -wall_thickness])\n        scale([1, 0.58, 0.54])\n        sphere(d=ball_length - wall_thickness*2);\n        \n        // Create flat bottom for stability\n        translate([0, 0, -ball_height/2])\n        cube([ball_length, ball_width, ball_height], center=true);\n    }\n}\n\n// Module for the base support structure\nmodule base_support() {\n    // Main base ring\n    translate([0, 0, -ball_height/2 + 2])\n    rotate_extrude()\n    translate([ball_width/2 - 15, 0, 0])\n    circle(r=wall_thickness);\n    \n    // Support legs (4 legs for stability)\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([ball_width/2 - 15, 0, -ball_height/2 + 2])\n        cylinder(h=10, r=wall_thickness);\n    }\n}\n\n// Module for the lid with hinge details\nmodule lid_structure() {\n    // Main lid shape (half of rugby ball)\n    difference() {\n        intersection() {\n            // Top half of ball\n            translate([0, 0, -ball_height/2])\n            cube([ball_length, ball_width, ball_height], center=true);\n            \n            // Rugby ball shape\n            scale([1, 0.58, 0.54])\n            sphere(d=ball_length);\n        }\n        \n        // Handle cutout\n        translate([0, ball_width/4, 0])\n        cube([30, 10, 10], center=true);\n    }\n    \n    // Add handle grip\n    translate([0, ball_width/4, 5])\n    cylinder(h=15, r=3);\n}\n\n// Module for ventilation holes\nmodule ventilation_holes() {\n    // Small holes for air circulation\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([ball_width/2 - 20, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=wall_thickness*2, r=3);\n    }\n}\n\n// Main assembly\n// Base structure\nunion() {\n    // Hollow storage body\n    difference() {\n        storage_cavity();\n        \n        // Remove bottom for ventilation\n        translate([0, 0, -ball_height/2 - 1])\n        cube([ball_width, ball_width, 5], center=true);\n    }\n    \n    // Outer shell with grip texture\n    difference() {\n        rugby_ball_body();\n        \n        // Remove interior to match cavity\n        translate([0, 0, -wall_thickness])\n        scale([1, 0.58, 0.54])\n        sphere(d=ball_length - wall_thickness*2);\n    }\n    \n    // Base support\n    base_support();\n    \n    // Ventilation holes\n    ventilation_holes();\n    \n    // Lid (positioned slightly above for demonstration)\n    translate([0, 0, ball_height/2 + 5])\n    lid_structure();\n}",
    "renders": true
  },
  {
    "sports_equipment": "baseball_bat",
    "openscad_code": "// Baseball Bat Furniture Item\n// Realistic style, medium complexity\n// Overall length: 120mm, suitable for 3D printing\n\n// Main parameters\nbat_length = 120;\nhandle_length = 40;\nbarrel_length = 80;\nmax_diameter = 25;\nhandle_diameter = 12;\nwall_thickness = 2;\n\n// Grip texture module\nmodule grip_texture(length, diameter, spacing) {\n    for (i = [0:spacing:length]) {\n        translate([0, 0, i])\n        difference() {\n            cylinder(h=spacing*0.8, d=diameter+1, $fn=32);\n            cylinder(h=spacing*0.8+0.1, d=diameter, $fn=32);\n        }\n    }\n}\n\n// Handle with grip\nmodule handle() {\n    difference() {\n        // Main handle tube\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Hollow center\n        translate([0, 0, -0.1])\n        cylinder(h=handle_length+0.2, d=handle_diameter-wall_thickness*2, $fn=32);\n    }\n    \n    // Add grip texture\n    grip_texture(handle_length-5, handle_diameter-1, 3);\n}\n\n// Tapered barrel\nmodule barrel() {\n    difference() {\n        // Outer barrel shape (tapered)\n        union() {\n            // Handle transition\n            translate([0, 0, 0])\n            cylinder(h=10, d1=handle_diameter, d2=max_diameter*0.7, $fn=32);\n            \n            // Main barrel\n            translate([0, 0, 10])\n            cylinder(h=barrel_length-20, d=max_diameter*0.7, $fn=32);\n            \n            // Barrel end\n            translate([0, 0, barrel_length-10])\n            cylinder(h=10, d1=max_diameter*0.7, d2=max_diameter, $fn=32);\n        }\n        \n        // Hollow center\n        translate([0, 0, -0.1])\n        cylinder(h=barrel_length+0.2, d=max_diameter*0.7-wall_thickness*2, $fn=32);\n    }\n}\n\n// End cap detail\nmodule end_cap() {\n    difference() {\n        // Main cap\n        translate([0, 0, barrel_length-2])\n        cylinder(h=4, d=max_diameter+2, $fn=32);\n        \n        // Recessed center\n        translate([0, 0, barrel_length-2])\n        cylinder(h=4.2, d=max_diameter, $fn=32);\n        \n        // Hollow\n        translate([0, 0, barrel_length-2])\n        cylinder(h=4.2, d=max_diameter-wall_thickness*2, $fn=32);\n    }\n}\n\n// Seam details on barrel\nmodule barrel_seams() {\n    for (angle = [0:45:135]) {\n        rotate([0, 0, angle])\n        translate([max_diameter*0.35, 0, 15])\n        rotate([90, 0, 0])\n        cylinder(h=barrel_length-30, d=0.5, $fn=8);\n    }\n}\n\n// Weight distribution rings\nmodule weight_rings() {\n    for (i = [0:15:barrel_length-25]) {\n        translate([0, 0, i+20])\n        difference() {\n            cylinder(h=2, d=max_diameter*0.75, $fn=32);\n            cylinder(h=2.2, d=max_diameter*0.7, $fn=32);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Handle section\n    translate([0, 0, 0])\n    handle();\n    \n    // Barrel section\n    translate([0, 0, handle_length-5])\n    barrel();\n    \n    // End cap\n    end_cap();\n    \n    // Seam details\n    barrel_seams();\n    \n    // Weight rings\n    weight_rings();\n}\n\n// Base support for furniture stability\ntranslate([0, 0, -5])\ndifference() {\n    cylinder(h=5, d=30, $fn=32);\n    cylinder(h=5.2, d=26, $fn=32);\n}",
    "renders": true
  },
  {
    "sports_equipment": "cricket_bat",
    "openscad_code": "// Cricket Bat Furniture - OpenSCAD\n// Realistic style with medium complexity\n// Designed for 3D printing\n\n// Overall dimensions\nbat_length = 120;\nbat_width = 20;\nbat_thickness = 12;\n\n// Handle parameters\nhandle_length = 45;\nhandle_diameter = 8;\n\n// Grip parameters\ngrip_rings = 8;\ngrip_ring_height = 2;\ngrip_ring_spacing = 4;\n\n// Blade parameters\nblade_length = bat_length - handle_length;\nblade_width = bat_width;\nblade_thickness = bat_thickness;\n\n// Structural reinforcements\nreinforcement_thickness = 2;\njoint_radius = 3;\n\n// Main bat module\nmodule cricket_bat() {\n    // Handle assembly\n    union() {\n        // Main handle cylinder\n        translate([0, 0, 0])\n            cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip texture rings\n        for(i = [0:grip_rings-1]) {\n            translate([0, 0, i * grip_ring_spacing + 5])\n                difference() {\n                    cylinder(h=grip_ring_height, d=handle_diameter + 1.5, $fn=32);\n                    cylinder(h=grip_ring_height + 0.1, d=handle_diameter - 0.5, $fn=32);\n                }\n        }\n        \n        // Handle to blade joint reinforcement\n        translate([0, 0, handle_length - 5])\n            cylinder(h=10, d1=handle_diameter + 2, d2=blade_thickness + 2, $fn=32);\n    }\n    \n    // Blade assembly\n    translate([0, 0, handle_length])\n        union() {\n            // Main blade body\n            difference() {\n                // Blade base shape\n                cube([blade_thickness, blade_width, blade_length], center=true);\n                \n                // Taper the blade edges\n                translate([0, blade_width/2 - 2, blade_length/2 - 10])\n                    rotate([90, 0, 0])\n                        cylinder(h=blade_width - 4, r=2, $fn=32);\n                translate([0, -blade_width/2 + 2, blade_length/2 - 10])\n                    rotate([90, 0, 0])\n                        cylinder(h=blade_width - 4, r=2, $fn=32);\n            }\n            \n            // Blade face details - slightly raised edges\n            translate([blade_thickness/2 + 0.5, 0, 0])\n                cube([1, blade_width - 4, blade_length - 5], center=true);\n            translate([-blade_thickness/2 - 0.5, 0, 0])\n                cube([1, blade_width - 4, blade_length - 5], center=true);\n            \n            // Sweet spot reinforcement\n            translate([0, 0, -blade_length/2 + 25])\n                cube([blade_thickness, blade_width - 2, 15], center=true);\n        }\n    \n    // Bottom edge protection\n    translate([0, 0, bat_length - 2])\n        difference() {\n            cube([blade_thickness + 1, blade_width + 1, 4], center=true);\n            cube([blade_thickness - 1, blade_width - 1, 4.1], center=true);\n        }\n}\n\n// Generate the bat\ncricket_bat();",
    "renders": true
  },
  {
    "sports_equipment": "tennis_racket",
    "openscad_code": "// Tennis Racket Furniture Piece - Medium Complexity Realistic Style\n// Overall dimensions: 120mm x 40mm x 8mm (suitable for 3D printing)\n\n// Racket head frame\nmodule racket_head() {\n    difference() {\n        // Outer frame - elliptical shape\n        scale([1, 1.2, 1])\n        cylinder(h = 8, d1 = 60, d2 = 60, $fn = 64);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n        scale([1, 1.2, 1])\n        cylinder(h = 10, d1 = 54, d2 = 54, $fn = 64);\n    }\n}\n\n// String bed - woven pattern\nmodule string_bed() {\n    difference() {\n        // String bed base\n        translate([0, 0, 4])\n        scale([1, 1.2, 0.1])\n        cylinder(h = 4, d1 = 54, d2 = 54, $fn = 64);\n        \n        // String holes\n        for (i = [-25:5:25]) {\n            for (j = [-22:5:22]) {\n                translate([i, j * 1.2, 3.5])\n                cylinder(h = 5, d = 1.5, $fn = 8);\n            }\n        }\n    }\n}\n\n// Racket shaft\nmodule shaft() {\n    // Main shaft\n    translate([0, -42, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 50, d1 = 8, d2 = 6, $fn = 16);\n    \n    // Shaft reinforcement rings\n    for (i = [0:10:40]) {\n        translate([0, -42 + i * 0.9, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 2, d = 10, $fn = 16);\n    }\n}\n\n// Handle grip\nmodule handle() {\n    // Handle core\n    translate([0, -92, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 50, d = 6, $fn = 16);\n    \n    // Grip texture - octagonal pattern\n    for (i = [0:5:45]) {\n        translate([0, -92 + i, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 5, d1 = 7, d2 = 7, $fn = 8);\n    }\n    \n    // Butt cap\n    translate([0, -117, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 3, d = 8, $fn = 16);\n}\n\n// Throat connection\nmodule throat() {\n    difference() {\n        // Main throat piece\n        translate([0, -30, 0])\n        cube([10, 12, 8], center = true);\n        \n        // Smooth transition curves\n        translate([0, -30, -1])\n        cube([12, 14, 10], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    racket_head();\n    string_bed();\n    shaft();\n    handle();\n    throat();\n    \n    // Structural gussets\n    translate([5, -35, 0])\n    rotate([0, 0, 30])\n    cube([3, 8, 8]);\n    translate([-5, -35, 0])\n    rotate([0, 0, -30])\n    cube([3, 8, 8]);\n}",
    "renders": true
  },
  {
    "sports_equipment": "badminton_racket",
    "openscad_code": "// Badminton Racket Furniture Item\n// Realistic style, medium complexity\n\n// Overall dimensions\nracket_length = 140;\nhead_width = 80;\nhead_height = 90;\nhandle_length = 50;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main racket head - oval frame\nmodule racket_head() {\n    difference() {\n        // Outer frame\n        scale([1, 1.2, 1])\n        cylinder(h=wall_thickness, d1=head_width, d2=head_width, $fn=50);\n        \n        // Inner cutout\n        translate([0, 0, -1])\n        scale([0.85, 0.85, 1])\n        cylinder(h=wall_thickness+2, d1=head_width-8, d2=head_width-8, $fn=50);\n    }\n}\n\n// String bed - simplified grid pattern\nmodule string_bed() {\n    string_spacing = 3;\n    string_width = 0.8;\n    \n    // Vertical strings\n    for(i = [-head_width/2+10 : string_spacing : head_width/2-10]) {\n        translate([i, 0, wall_thickness/2])\n        scale([string_width, head_height*0.6, wall_thickness])\n        cube([1, 1, 1], center=true);\n    }\n    \n    // Horizontal strings\n    for(j = [-head_height/2+15 : string_spacing : head_height/2-15]) {\n        translate([0, j, wall_thickness/2])\n        scale([head_width*0.7, string_width, wall_thickness])\n        cube([1, 1, 1], center=true);\n    }\n}\n\n// Handle grip with texture\nmodule handle() {\n    // Main handle body\n    cylinder(h=handle_length, d1=12, d2=10, center=false);\n    \n    // Grip texture - rings\n    for(i = [0:5:handle_length-10]) {\n        translate([0, 0, i])\n        cylinder(h=2, d1=12.5, d2=12.5, $fn=30);\n    }\n}\n\n// Shaft connecting head and handle\nmodule shaft() {\n    cylinder(h=racket_length-handle_length-head_height/2, d1=8, d2=10);\n}\n\n// T-joint reinforcement\nmodule t_joint() {\n    // Main joint body\n    translate([0, 0, -5])\n    cylinder(h=10, d1=14, d2=14, $fn=20);\n    \n    // Reinforcement wings\n    for(angle = [0:120:240]) {\n        rotate([0, 0, angle])\n        translate([7, 0, 0])\n        cube([6, 2, 10], center=true);\n    }\n}\n\n// Base stand for furniture use\nmodule stand() {\n    // Circular base\n    cylinder(h=5, d1=30, d2=30, $fn=40);\n    \n    // Support column\n    translate([0, 0, 2.5])\n    cylinder(h=15, d1=8, d2=12);\n}\n\n// Main assembly\ntranslate([0, 0, 5])\nstand();\n\ntranslate([0, 0, 20])\nunion() {\n    // Handle\n    handle();\n    \n    // Shaft\n    translate([0, 0, handle_length])\n    shaft();\n    \n    // T-joint\n    translate([0, 0, handle_length+5])\n    t_joint();\n    \n    // Racket head assembly\n    translate([0, 0, handle_length+(racket_length-handle_length-head_height/2)])\n    union() {\n        racket_head();\n        translate([0, 0, wall_thickness/2])\n        string_bed();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "squash_racket",
    "openscad_code": "// Squash Racket Furniture Item\n// Realistic style, medium complexity\n\n// Main parameters\nracket_length = 140;\nhead_width = 75;\nhead_height = 100;\nhandle_length = 40;\ngrip_diameter = 25;\nwall_thickness = 2;\n\n// Color definitions\nframe_color = \"Silver\";\ngrip_color = \"DarkGray\";\nstring_color = \"White\";\n\n// Main frame module\nmodule racket_frame() {\n    color(frame_color) {\n        // Head frame - oval shape\n        difference() {\n            // Outer oval\n            scale([head_width/2, head_height/2, 1])\n                cylinder(h=wall_thickness*2, r=1, $fn=50);\n            \n            // Inner cutout\n            translate([0, 0, -0.1])\n                scale([(head_width-wall_thickness*2)/2, (head_height-wall_thickness*2)/2, 1])\n                    cylinder(h=wall_thickness*2+0.2, r=1, $fn=50);\n        }\n        \n        // Throat - connection to handle\n        translate([-handle_length/2-5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=handle_length, r1=wall_thickness*2, r2=wall_thickness*3);\n        \n        // Handle shaft\n        translate([-racket_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=racket_length-handle_length-5, r1=wall_thickness*3, r2=grip_diameter/2);\n    }\n}\n\n// String bed module\nmodule string_bed() {\n    color(string_color) {\n        // Main strings (vertical)\n        for (x = [-head_width/2+wall_thickness*2 : 3 : head_width/2-wall_thickness*2]) {\n            translate([x, 0, wall_thickness])\n                cube([0.8, head_height-wall_thickness*4, wall_thickness/2]);\n        }\n        \n        // Cross strings (horizontal)\n        for (y = [-head_height/2+wall_thickness*2 : 3 : head_height/2-wall_thickness*2]) {\n            translate([0, y, wall_thickness])\n                cube([head_width-wall_thickness*4, 0.8, wall_thickness/2]);\n        }\n    }\n}\n\n// Grip module with texture\nmodule grip() {\n    color(grip_color) {\n        // Main grip body\n        translate([-racket_length/2+handle_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=handle_length, r=grip_diameter/2, $fn=32);\n        \n        // Grip texture rings\n        for (i = [0 : 3 : handle_length-3]) {\n            translate([-racket_length/2+i, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=1.5, r=grip_diameter/2+0.5, r2=grip_diameter/2-0.5, $fn=32);\n        }\n    }\n}\n\n// Structural reinforcement at throat\nmodule throat_reinforcement() {\n    color(frame_color) {\n        translate([-handle_length-10, 0, wall_thickness])\n            rotate([0, 0, 30])\n                cube([15, wall_thickness*2, wall_thickness*3]);\n        \n        translate([-handle_length-10, 0, wall_thickness])\n            rotate([0, 0, -30])\n                cube([15, wall_thickness*2, wall_thickness*3]);\n    }\n}\n\n// End cap\nmodule end_cap() {\n    color(\"Black\") {\n        translate([-racket_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=3, r=grip_diameter/2+1, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    racket_frame();\n    string_bed();\n    grip();\n    throat_reinforcement();\n    end_cap();\n}",
    "renders": true
  },
  {
    "sports_equipment": "table_tennis_paddle",
    "openscad_code": "// Table Tennis Paddle Furniture Item - Realistic Style, Medium Complexity\n// Overall dimensions: ~160mm tall x 150mm wide x 40mm deep (wall-mounted shelf)\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\npaddle_width = 130;\npaddle_height = 150;\nhandle_length = 100;\nhandle_width = 25;\nhandle_thickness = 20;\nshelf_depth = 40;\nshelf_support_radius = 3;\ngrip_ring_count = 5;\n\nmodule paddle_blade() {\n    difference() {\n        // Main blade shape\n        union() {\n            // Blade body\n            translate([0, 0, shelf_depth/2])\n                scale([1, 1.2, 0.3])\n                sphere(d = paddle_width);\n            \n            // Flat back\n            translate([0, -paddle_height/4, shelf_depth/2])\n                cube([paddle_width*0.9, paddle_height*0.6, shelf_depth*0.3], center=true);\n        }\n        \n        // Hollow out back for weight reduction\n        translate([0, -paddle_height/4, shelf_depth/2 + 1])\n            cube([paddle_width*0.85, paddle_height*0.55, shelf_depth*0.4], center=true);\n    }\n}\n\nmodule handle() {\n    // Main handle body\n    difference() {\n        translate([-paddle_width/2 - handle_width/2, -paddle_height/2 - handle_length/2, handle_thickness/2])\n            cube([handle_width, handle_length, handle_thickness]);\n            \n        // Grip rings\n        for(i = [1:grip_ring_count-1]) {\n            translate([-paddle_width/2 - handle_width/2, -paddle_height/2 - handle_length*(i/grip_ring_count), -1])\n                cube([handle_width, 1, handle_thickness+2]);\n        }\n    }\n    \n    // Handle end cap\n    translate([-paddle_width/2 - handle_width/2, -paddle_height/2 - handle_length, handle_thickness/2])\n        cylinder(h = handle_thickness, r1 = handle_width/2, r2 = handle_width/2.5);\n}\n\nmodule shelf_supports() {\n    // Wall mounting brackets\n    for(pos = [[-paddle_width/3, -paddle_height/3], [paddle_width/3, -paddle_height/3], \n               [0, paddle_height/3]]) {\n        translate([pos[0], pos[1], shelf_depth])\n            cylinder(h = 15, r = shelf_support_radius);\n    }\n}\n\nmodule rubber_surface() {\n    // Front rubber layer\n    translate([0, 0, shelf_depth*0.3 + 1])\n        scale([0.95, 0.95, 0.05])\n        sphere(d = paddle_width);\n    \n    // Back rubber layer\n    translate([0, 0, 1])\n        scale([0.9, 0.9, 0.05])\n        sphere(d = paddle_width);\n}\n\n// Main assembly\nunion() {\n    // Paddle blade as shelf\n    paddle_blade();\n    \n    // Handle as support\n    handle();\n    \n    // Shelf supports\n    shelf_supports();\n    \n    // Rubber surfaces as shelf liners\n    rubber_surface();\n}",
    "renders": true
  },
  {
    "sports_equipment": "hockey_stick",
    "openscad_code": "// Hockey Stick Furniture Item (Wall-Mounted Coat Rack)\n// Realistic style, medium complexity\n// Overall length ~140mm, designed for 3D printing\n\n// Constants\nwall_thickness = 2;\ngrip_diameter = 8;\nblade_width = 30;\nblade_height = 8;\nshaft_length = 120;\nshaft_width = 10;\nmount_size = 20;\n\n// Main module\nmodule hockey_stick_rack() {\n    // Wall mounting plate\n    translate([0, 0, mount_size/2])\n        cube([mount_size, wall_thickness, mount_size], center=true);\n    \n    // Mounting holes\n    for(x = [-mount_size/3, mount_size/3])\n        for(z = [-mount_size/3, mount_size/3])\n            translate([x, 0, z])\n                cylinder(h=wall_thickness+1, d=3, center=true, $fn=16);\n    \n    // Shaft connecting to mount\n    translate([0, -shaft_length/2 - mount_size/2, mount_size/2 - shaft_width/2])\n        cube([shaft_width, shaft_length, shaft_width], center=true);\n    \n    // Shaft grip texture rings\n    for(i = [1:5:shaft_length-10]) {\n        translate([0, -i - mount_size/2, mount_size/2 - shaft_width/2])\n            rotate([0, 90, 0])\n                cylinder(h=shaft_width+2, d=grip_diameter, center=true, $fn=32);\n    }\n    \n    // Curved shaft transition to blade\n    translate([0, -shaft_length - 15, mount_size/2 - shaft_width/2])\n        rotate([90, 0, 0])\n            cylinder(h=shaft_width, d=shaft_width, center=true, $fn=32);\n    \n    // Blade\n    translate([0, -shaft_length - 25, -blade_height/2])\n        difference() {\n            // Main blade shape\n            cube([blade_width, 40, blade_height], center=true);\n            \n            // Blade curve (hollowed)\n            translate([0, -5, -blade_height/2 + wall_thickness])\n                cylinder(h=blade_height + 1, d=blade_width - 10, center=true, $fn=32);\n            \n            // Blade taper\n            translate([0, 15, 0])\n                cube([blade_width - 10, 20, blade_height], center=true);\n        }\n    \n    // Coat hooks on blade\n    for(x = [-blade_width/3, 0, blade_width/3]) {\n        translate([x, -shaft_length - 25, blade_height/2 + 2])\n            rotate([45, 0, 0])\n                cylinder(h=10, d=4, $fn=16);\n    }\n    \n    // Reinforcement ribs\n    translate([0, -shaft_length/2 - mount_size/2, mount_size/2 - shaft_width - 1])\n        cube([shaft_width + 4, 15, wall_thickness], center=true);\n    \n    translate([0, -shaft_length - 15, -blade_height/2 - 1])\n        cube([blade_width, wall_thickness, blade_height + 2], center=true);\n}\n\n// Generate the model\nhockey_stick_rack();",
    "renders": true
  },
  {
    "sports_equipment": "golf_club",
    "openscad_code": "// Golf Club Furniture Item - Realistic Style\n// A decorative wall-mounted golf club display shelf\n// Overall dimensions: ~120mm width x 80mm height x 30mm depth\n\n$fn = 32;\n\n// Main module\nmodule golf_club_shelf() {\n    // Wall mounting plate\n    difference() {\n        translate([0, 0, 5]) \n            cube([120, 80, 4], center=true);\n        \n        // Mounting holes\n        for(x = [-40, 40])\n            translate([x, -30, 3])\n                cylinder(h=5, r=2.5);\n    }\n    \n    // Club support arms\n    for(side = [-1, 1]) {\n        // Left/right support arms\n        translate([side * 35, 20, 0])\n            rotate([0, 90, 0])\n                club_support();\n        \n        // Club holder clips\n        translate([side * 35, 25, 15])\n            rotate([0, 0, 90])\n                club_clip();\n    }\n    \n    // Decorative golf club model\n    translate([-20, 0, 25])\n        rotate([90, 0, 0])\n            scale([0.3, 0.3, 0.3])\n                golf_club();\n}\n\nmodule club_support() {\n    // Triangular support structure\n    difference() {\n        union() {\n            // Main support beam\n            cylinder(h=50, r=3);\n            \n            // Triangular brace\n            translate([-3, 0, 20])\n                rotate([90, 0, 0])\n                    cube([6, 20, 2]);\n        }\n        \n        // Lightening holes\n        translate([0, 0, 15])\n            cylinder(h=20, r=1.5);\n    }\n}\n\nmodule club_clip() {\n    // Spring-loaded clip for holding club shaft\n    difference() {\n        // Main clip body\n        union() {\n            translate([0, 0, 0])\n                cylinder(h=12, r=5);\n            translate([0, 12, 0])\n                sphere(r=5);\n        }\n        \n        // Shaft opening\n        translate([0, 6, 0])\n            rotate([90, 0, 0])\n                cylinder(h=10, r=2.5);\n        \n        // Grip texture grooves\n        for(i = [1:3:10]) {\n            translate([0, i, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=10.1, r=2.6);\n        }\n    }\n}\n\nmodule golf_club() {\n    // Complete golf club model\n    union() {\n        // Shaft\n        translate([0, 0, -60])\n            rotate([0, 0, 0])\n                cylinder(h=120, r=2);\n        \n        // Grip\n        translate([0, 0, -70])\n            cylinder(h=25, r=3);\n        \n        // Hosel\n        translate([0, 0, 0])\n            cylinder(h=8, r=3);\n        \n        // Club head - driver style\n        difference() {\n            // Main head\n            translate([0, 0, 8])\n                cube([45, 12, 15], center=true);\n            \n            // Face angle\n            translate([20, 0, 8])\n                rotate([0, 12, 0])\n                    cube([25, 15, 18], center=true);\n            \n            // Hollow back\n            translate([-10, 0, 8])\n                cube([25, 8, 10], center=true);\n            \n            // Score lines on face\n            for(i = [-2, 0, 2]) {\n                translate([22, i*2, 8])\n                    cube([0.5, 0.5, 12], center=true);\n            }\n        }\n        \n        // Sole plate detail\n        translate([0, 0, 15.5])\n            cube([45, 12, 1], center=true);\n    }\n}\n\n// Render the model\ngolf_club_shelf();",
    "renders": true
  },
  {
    "sports_equipment": "pool_cue",
    "openscad_code": "// Pool Cue Stand - Furniture Item\n// Realistic style, medium complexity\n// Scaled for 3D printing - approximately 120mm height\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\nbase_diameter = 50;\nbase_height = 5;\npole_height = 100;\npole_diameter = 6;\ngrip_length = 30;\ngrip_diameter = 8;\ntip_length = 5;\ntip_diameter = 4;\nholder_count = 6;\nholder_radius = 8;\n\n// Base module for stability\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = base_height, d = base_diameter, center = true);\n        \n        // Weight reduction hollow\n        translate([0, 0, -1.5])\n            cylinder(h = base_height + 2, d = base_diameter - 6, center = true);\n        \n        // Cable/channel for weight compartment\n        translate([0, -base_diameter/2 + 3, 0])\n            rotate([90, 0, 0])\n                cylinder(h = base_diameter/2, d = 4, center = true);\n    }\n}\n\n// Decorative ring detail\nmodule ring(height, diameter) {\n    for(i = [0:1:3]) {\n        translate([0, 0, height + i * 0.5])\n            cylinder(h = 0.5, d1 = diameter + 1, d2 = diameter + 0.5);\n    }\n}\n\n// Main pole with taper\nmodule pole() {\n    difference() {\n        union() {\n            // Bottom section\n            cylinder(h = pole_height * 0.7, d1 = pole_diameter + 2, d2 = pole_diameter, center = true);\n            \n            // Grip section\n            translate([0, 0, pole_height * 0.35])\n                cylinder(h = grip_length, d = grip_diameter, center = true);\n            \n            // Upper taper\n            translate([0, 0, pole_height * 0.7])\n                cylinder(h = pole_height * 0.3, d1 = pole_diameter, d2 = tip_diameter, center = true);\n            \n            // Tip\n            translate([0, 0, pole_height/2 - tip_length/2])\n                cylinder(h = tip_length, d = tip_diameter, center = true);\n            \n            // Decorative rings\n            ring(pole_height * 0.35 - grip_length/2 - 2, grip_diameter);\n            ring(pole_height * 0.35 + grip_length/2 + 1, grip_diameter);\n        }\n        \n        // Hollow center for weight reduction\n        for(i = [0:1:4]) {\n            translate([0, 0, -pole_height/2 + i * (pole_height/5) + 2])\n                cylinder(h = pole_height/5 - 1, d = 3, center = true);\n        }\n    }\n}\n\n// Pool cue holder arms\nmodule holder_arm(index) {\n    angle = index * (360 / holder_count);\n    \n    rotate([0, 0, angle])\n    translate([base_diameter/2 - 5, 0, base_height + 2])\n    rotate([90, 0, 0])\n    difference() {\n        // Main arm\n        cylinder(h = 25, d = 6, center = true);\n        \n        // Cue slot\n        translate([0, 0, -12])\n            cube([3.5, 20, 25], center = true);\n        \n        // Support gusset\n        translate([-2, 0, -10])\n            rotate([0, 90, 0])\n                cylinder(h = 4, d = 8, center = true);\n    }\n}\n\n// Grip texture pattern\nmodule grip_texture() {\n    for(i = [0:5:25]) {\n        rotate([0, 0, i * 15])\n        translate([0, 0, pole_height * 0.35 - grip_length/2 + i])\n        difference() {\n            cylinder(h = 3, d = grip_diameter + 0.5, center = true);\n            cylinder(h = 3.2, d = grip_diameter - 0.5, center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Main pole\n    translate([0, 0, base_height/2])\n        pole();\n    \n    // Grip texture\n    grip_texture();\n    \n    // Holder arms\n    for(i = [0:1:holder_count-1]) {\n        holder_arm(i);\n    }\n    \n    // Center support column\n    translate([0, 0, base_height/2])\n        cylinder(h = pole_height, d = 8, center = true);\n}\n\n// Feet for stability\nfor(i = [0:1:3]) {\n    angle = i * 90;\n    rotate([0, 0, angle])\n    translate([base_diameter/2 - 3, 0, -base_height/2])\n        cylinder(h = 3, d = 6);\n}",
    "renders": true
  },
  {
    "sports_equipment": "ski",
    "openscad_code": "// Ski Table (Wall-Mounted Shelf Unit)\n// Realistic style, medium complexity\n// Dimensions: 120mm high, 40mm deep, 60mm wide\n\n$fn = 32;\n\n// Overall module\nmodule ski_table() {\n    // Main ski body\n    union() {\n        // Ski profile shape (tapered ends)\n        translate([0, 0, 10])\n            ski_body();\n        \n        // Structural support brackets\n        translate([0, -15, 0])\n            support_brackets();\n        \n        // Wall mounting plate\n        translate([0, -18, 60])\n            mount_plate();\n        \n        // Ski pole supports (decorative)\n        translate([-20, 0, 80])\n            pole_support();\n        translate([20, 0, 80])\n            mirror([1, 0, 0])\n                pole_support();\n        \n        // Grip texture on top surface\n        translate([0, 0, 20])\n            grip_texture();\n    }\n}\n\n// Main ski body with realistic proportions\nmodule ski_body() {\n    difference() {\n        // Base ski shape\n        hull() {\n            // Tip (front)\n            translate([0, 0, 5])\n                scale([0.3, 1, 0.5])\n                    sphere(d = 20);\n            \n            // Tail (back)\n            translate([0, 0, 115])\n                scale([0.4, 1, 0.7])\n                    sphere(d = 20);\n            \n            // Mid section\n            translate([0, 0, 60])\n                cube([20, 4, 100], center = true);\n        }\n        \n        // Hollow out interior for 2mm walls\n        translate([0, -1, 60])\n            scale([0.8, 0.5, 0.95])\n                cube([18, 4, 100], center = true);\n        \n        // Binding holes (decorative)\n        for (i = [0:1]) {\n            translate([0, -3, 55 + i * 10])\n                cylinder(h = 5, d = 3);\n        }\n    }\n}\n\n// Support brackets\nmodule support_brackets() {\n    for (x = [-15, 15]) {\n        translate([x, 0, 30])\n            difference() {\n                // Main bracket\n                cube([8, 3, 20], center = true);\n                \n                // Screw hole\n                translate([0, 2, 0])\n                    cylinder(h = 4, d = 2.5);\n            }\n    }\n}\n\n// Wall mounting plate\nmodule mount_plate() {\n    difference() {\n        // Plate\n        cube([50, 2, 15], center = true);\n        \n        // Mounting holes\n        for (x = [-20, 0, 20]) {\n            translate([x, 1, 0])\n                cylinder(h = 3, d = 3);\n        }\n    }\n}\n\n// Decorative ski pole support\nmodule pole_support() {\n    difference() {\n        union() {\n            // Base cylinder\n            cylinder(h = 15, d = 8);\n            \n            // Top ring\n            translate([0, 0, 15])\n                cylinder(h = 3, d1 = 8, d2 = 6);\n        }\n        \n        // Center hole\n        translate([0, 0, -1])\n            cylinder(h = 17, d = 5);\n    }\n}\n\n// Grip texture pattern\nmodule grip_texture() {\n    // Diamond pattern for grip\n    for (y = [0:5:110]) {\n        for (x = [-8:4:8]) {\n            translate([x, 2, y])\n                difference() {\n                    cube([3, 1, 3]);\n                    translate([1.5, 0.5, 1.5])\n                        sphere(d = 2.5);\n                }\n        }\n    }\n}\n\n// Generate the ski table\nski_table();",
    "renders": true
  },
  {
    "sports_equipment": "snowboard",
    "openscad_code": "// Snowboard side table - realistic style with medium complexity\n// Dimensions: ~120mm length, ~300mm height table\n\n$fn = 50;\n\n// Main parameters\nboard_length = 120;\nboard_width = 30;\nboard_thickness = 3;\nwall_thickness = 2;\n\n// Table height\nleg_height = 280;\n\n// Module for rounded rectangle profile\nmodule rounded_rect_profile(w, h, r) {\n    translate([0, -h/2 + r, 0]) cylinder(h=w, r=r, center=true);\n    translate([0, h/2 - r, 0]) cylinder(h=w, r=r, center=true);\n    translate([0, 0, 0]) cube([w, h - 2*r, 0.1], center=true);\n}\n\n// Snowboard top surface with bindings area\nmodule snowboard_top() {\n    difference() {\n        // Main board shape - tapered ends\n        hull() {\n            // Front tip\n            translate([-board_length/2 + 5, 0, 0]) \n                scale([1, 0.6, 1]) sphere(r=board_width/2);\n            // Rear tip  \n            translate([board_length/2 - 5, 0, 0]) \n                scale([1, 0.6, 1]) sphere(r=board_width/2);\n            // Mid section\n            translate([0, 0, 0]) \n                cube([board_length - 10, board_width, board_thickness], center=true);\n        }\n        \n        // Binding screw holes (front)\n        for(x = [-20, -10]) {\n            translate([x, -8, -1]) cylinder(h=5, r=1.5, center=true);\n            translate([x, 8, -1]) cylinder(h=5, r=1.5, center=true);\n        }\n        \n        // Binding screw holes (rear)\n        for(x = [10, 20]) {\n            translate([x, -8, -1]) cylinder(h=5, r=1.5, center=true);\n            translate([x, 8, -1]) cylinder(h=5, r=1.5, center=true);\n        }\n    }\n}\n\n// Metal edge detail\nmodule metal_edges() {\n    // Top edge\n    translate([0, 0, 0.5]) \n        color(\"silver\") \n        hull() {\n            translate([-board_length/2 + 5, 0, 0]) \n                scale([1, 0.6, 1]) cylinder(h=board_thickness, r1=board_width/2 + 1, r2=board_width/2 + 1.5);\n            translate([board_length/2 - 5, 0, 0]) \n                scale([1, 0.6, 1]) cylinder(h=board_thickness, r1=board_width/2 + 1, r2=board_width/2 + 1.5);\n            translate([0, 0, 0]) \n                cube([board_length - 10, board_width + 2, board_thickness], center=true);\n        }\n}\n\n// Base with graphic pattern\nmodule snowboard_base() {\n    difference() {\n        snowboard_top();\n        \n        // Graphic pattern - grooves\n        for(i = [-60:10:60]) {\n            translate([i, 0, board_thickness/2 - 0.2]) \n                cube([5, board_width - 4, 0.4], center=true);\n        }\n    }\n}\n\n// Support frame structure\nmodule support_frame() {\n    // Main vertical posts\n    for(x = [-40, 40]) {\n        translate([x, -12, -leg_height/2]) \n            cube([8, 8, leg_height], center=true);\n        translate([x, 12, -leg_height/2]) \n            cube([8, 8, leg_height], center=true);\n    }\n    \n    // Cross braces\n    translate([0, 0, -leg_height + 40]) \n        cube([100, 4, 4], center=true);\n    translate([0, 0, -leg_height + 80]) \n        cube([100, 4, 4], center=true);\n    \n    // Horizontal stabilizers\n    translate([0, 0, -leg_height + 20]) \n        rotate([0, 0, 90]) cube([24, 4, 4], center=true);\n    translate([0, 0, -leg_height + 100]) \n        rotate([0, 0, 90]) cube([24, 4, 4], center=true);\n}\n\n// Assembly\ntranslate([0, 0, leg_height + board_thickness/2]) {\n    // Main snowboard table top\n    union() {\n        snowboard_top();\n        metal_edges();\n    }\n    \n    // Base graphic\n    translate([0, 0, -board_thickness]) \n        color(\"gray\") snowboard_base();\n}\n\n// Support structure\ncolor(\"darkgray\") support_frame();\n\n// Floor stabilizer base\ntranslate([0, 0, -leg_height]) \n    cube([120, 60, 8], center=true);",
    "renders": true
  },
  {
    "sports_equipment": "skateboard",
    "openscad_code": "// Skateboard Shelf - Realistic Medium Complexity\n// A wall-mounted skateboard that doubles as a small shelf\n\n// Overall dimensions (realistic skateboard proportions)\nboard_length = 120;\nboard_width = 30;\nboard_thickness = 3;\ntruck_height = 8;\nwheel_diameter = 12;\nwheel_width = 5;\nwall_mount_thickness = 4;\nshelf_depth = 15;\n\n// Module for skateboard deck with taper\nmodule skateboard_deck() {\n    // Main deck body with realistic taper\n    hull() {\n        // Front half (tapered)\n        translate([board_length/2 - 5, 0, 0])\n            scale([0.3, 1, 1])\n                cube([10, board_width, board_thickness], center=true);\n        \n        // Back half (tapered)\n        translate([-board_length/2 + 5, 0, 0])\n            scale([0.3, 1, 1])\n                cube([10, board_width, board_thickness], center=true);\n        \n        // Center section\n        cube([board_length - 20, board_width - 6, board_thickness], center=true);\n    }\n    \n    // Grip tape texture (subtle raised pattern)\n    for (x = [-board_length/2 + 5 : 5 : board_length/2 - 5]) {\n        for (y = [-board_width/2 + 3 : 3 : board_width/2 - 3]) {\n            translate([x, y, board_thickness/2 + 0.1])\n                cube([3, 1, 0.2], center=true);\n        }\n    }\n}\n\n// Module for truck assembly\nmodule truck(is_front = true) {\n    // Base plate\n    translate([0, 0, -board_thickness/2 - truck_height/2])\n        cube([20, 15, truck_height], center=true);\n    \n    // Hanger\n    translate([0, 0, -board_thickness/2 - truck_height - 2])\n        rotate([0, 0, is_front ? 5 : -5])\n        cube([25, 8, 4], center=true);\n    \n    // Axle\n    translate([0, 0, -board_thickness/2 - truck_height - 4])\n        cylinder(h=15, r=2, center=true, $fn=12);\n}\n\n// Module for wheels\nmodule wheels() {\n    for (side = [-1, 1]) {\n        translate([side * (board_length/2 - 15), 0, -board_thickness/2 - truck_height - 4])\n            for (pos = [-1, 1]) {\n                translate([0, pos * (wheel_width + 2), 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=wheel_width, d=wheel_diameter, $fn=16);\n            }\n    }\n}\n\n// Module for wall mount bracket\nmodule wall_mount() {\n    // Main bracket\n    translate([0, board_width/2 + wall_mount_thickness/2, 0])\n        cube([board_length - 10, wall_mount_thickness, board_thickness + 10], center=true);\n    \n    // Mounting holes\n    for (x = [-board_length/2 + 15 : 20 : board_length/2 - 15]) {\n        translate([x, board_width/2 + wall_mount_thickness, 0])\n            rotate([90, 0, 0])\n                cylinder(h=wall_mount_thickness + 1, d=3, $fn=16);\n    }\n}\n\n// Module for shelf surface\nmodule shelf_surface() {\n    // Shelf base\n    translate([0, -board_width/2 - shelf_depth/2, board_thickness/2 + shelf_depth/2])\n        cube([board_length - 10, shelf_depth, shelf_depth], center=true);\n    \n    // Front lip\n    translate([0, -board_width/2 - shelf_depth, board_thickness/2 + shelf_depth/2])\n        cube([board_length - 10, 2, shelf_depth], center=true);\n    \n    // Side supports\n    for (side = [-1, 1]) {\n        translate([side * (board_length/2 - 10), -board_width/2 - shelf_depth/2, 0])\n            cube([2, shelf_depth, board_thickness + shelf_depth], center=true);\n    }\n}\n\n// Assemble the complete skateboard shelf\nunion() {\n    // Main skateboard components\n    skateboard_deck();\n    \n    // Trucks (positioned realistically)\n    translate([-board_length/2 + 25, 0, 0])\n        truck(false);\n    translate([board_length/2 - 25, 0, 0])\n        truck(true);\n    \n    // Wheels\n    wheels();\n    \n    // Wall mount bracket\n    wall_mount();\n    \n    // Shelf surface\n    shelf_surface();\n}",
    "renders": true
  },
  {
    "sports_equipment": "bicycle",
    "openscad_code": "// Bicycle furniture - Bike Rack Stand\n// Realistic style, medium complexity\n\n// Parameters\nwheel_d = 16;\nwheel_h = 4;\nframe_t = 2;\nseat_w = 12;\nseat_l = 25;\nhandlebar_w = 20;\nstand_h = 40;\nstand_w = 50;\n\n// Main module\nmodule bike_rack() {\n    // Base stand\n    difference() {\n        union() {\n            // Main base platform\n            cube([stand_w, 20, 4], center=true);\n            \n            // Front wheel support\n            translate([-stand_w/2 + 8, 0, 2])\n                cube([16, 16, 8], center=true);\n            \n            // Rear wheel support\n            translate([stand_w/2 - 8, 0, 2])\n                cube([16, 16, 8], center=true);\n        }\n        \n        // Wheel slots\n        translate([-stand_w/2 + 8, 0, 2])\n            cube([2, 12, 10], center=true);\n        translate([stand_w/2 - 8, 0, 2])\n            cube([2, 12, 10], center=true);\n    }\n    \n    // Bike frame\n    color(\"silver\") {\n        // Main triangle frame\n        translate([0, 0, 6])\n            frame_triangle();\n        \n        // Seat post\n        translate([0, 0, 6 + 16])\n            cylinder(h=12, r=frame_t, $fn=8);\n        \n        // Seat\n        translate([0, 0, 6 + 16 + 12])\n            rotate([90, 0, 0])\n                scale([1, 0.7, 0.3])\n                    cylinder(h=seat_l, r=seat_w/2, $fn=20);\n        \n        // Handlebar stem\n        translate([-10, 0, 6 + 16])\n            rotate([15, 0, 0])\n                cylinder(h=10, r=frame_t, $fn=8);\n        \n        // Handlebar\n        translate([-15, 0, 6 + 16 + 9])\n            rotate([0, 0, 90])\n                cylinder(h=handlebar_w, r=frame_t*1.5, $fn=8);\n        \n        // Fork\n        translate([-10, 0, 6])\n            rotate([-30, 0, 0])\n                cylinder(h=14, r=frame_t, $fn=8);\n        \n        // Crank and pedals\n        translate([5, 0, 6 + 8])\n            rotate([90, 0, 0])\n                cylinder(h=frame_t*2, r=frame_t*2, $fn=16);\n        \n        // Pedals\n        translate([5, -8, 6 + 8])\n            cube([6, 2, 1], center=true);\n        translate([5, 8, 6 + 8])\n            cube([6, 2, 1], center=true);\n    }\n    \n    // Wheels\n    color(\"black\") {\n        // Front wheel\n        translate([-10, 0, 6])\n            wheel();\n        \n        // Rear wheel\n        translate([10, 0, 6])\n            wheel();\n    }\n    \n    // Chain\n    color(\"darkgray\") {\n        translate([10, 0, 6 + 4])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=8, r1=wheel_d/2 - 2, r2=wheel_d/2 - 2, $fn=20);\n                    cylinder(h=9, r1=wheel_d/2 - 4, r2=wheel_d/2 - 4, $fn=20);\n                }\n    }\n}\n\n// Frame triangle module\nmodule frame_triangle() {\n    union() {\n        // Top tube\n        translate([-5, 0, 8])\n            rotate([0, -atan(8/10), 0])\n                cylinder(h=20, r=frame_t, $fn=8);\n        \n        // Down tube\n        translate([-5, 0, 8])\n            rotate([0, atan(8/15), 0])\n                cylinder(h=25, r=frame_t, $fn=8);\n        \n        // Seat tube\n        translate([5, 0, 0])\n            cylinder(h=16, r=frame_t, $fn=8);\n    }\n}\n\n// Wheel module with spokes\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h=wheel_h, r=wheel_d/2, $fn=32);\n        \n        // Hub\n        translate([0, 0, -1])\n            cylinder(h=wheel_h+2, r=3, $fn=16);\n        \n        // Spoke holes pattern\n        for(i=[0:7]) {\n            rotate([0, 0, i*45])\n                translate([wheel_d/2 - 3, 0, -1])\n                    cube([2, 1, wheel_h+2], center=true);\n        }\n    }\n}\n\n// Generate the model\nbike_rack();",
    "renders": true
  },
  {
    "sports_equipment": "helmet",
    "openscad_code": "// Realistic helmet furniture item\n// Football helmet style with furniture characteristics\n\n// Parameters\n$fn = 64;\nwall_thickness = 2;\nhelmet_scale = 0.7;\n\n// Main helmet shell\nmodule helmet_shell() {\n    // Outer shell\n    difference() {\n        // Main dome\n        scale([1, 0.9, 1]) sphere(d = 80 * helmet_scale);\n        \n        // Face opening\n        translate([0, -20 * helmet_scale, 15 * helmet_scale])\n            scale([0.8, 0.6, 0.8])\n                sphere(d = 60 * helmet_scale);\n        \n        // Bottom opening\n        translate([0, 0, -45 * helmet_scale])\n            cube([100 * helmet_scale, 100 * helmet_scale, 50 * helmet_scale], center = true);\n    }\n    \n    // Inner shell (hollow)\n    difference() {\n        scale([1, 0.9, 1]) sphere(d = (80 - wall_thickness * 2) * helmet_scale);\n        \n        translate([0, -20 * helmet_scale, 15 * helmet_scale])\n            scale([0.8, 0.6, 0.8])\n                sphere(d = 60 * helmet_scale);\n        \n        translate([0, 0, -45 * helmet_scale])\n            cube([100 * helmet_scale, 100 * helmet_scale, 50 * helmet_scale], center = true);\n    }\n}\n\n// Face mask bars\nmodule face_mask() {\n    // Central vertical bar\n    translate([0, -30 * helmet_scale, 10 * helmet_scale])\n        rotate([90, 0, 0])\n            cylinder(h = 40 * helmet_scale, d = 3 * helmet_scale);\n    \n    // Horizontal bars\n    for(i = [-1:1]) {\n        translate([i * 15 * helmet_scale, -25 * helmet_scale, 15 * helmet_scale])\n            rotate([0, 90, 0])\n                cylinder(h = 30 * helmet_scale, d = 3 * helmet_scale);\n    }\n    \n    // Side bars\n    for(side = [-1, 1]) {\n        translate([side * 30 * helmet_scale, -20 * helmet_scale, 5 * helmet_scale])\n            rotate([0, 0, 30 * side])\n                cylinder(h = 25 * helmet_scale, d = 3 * helmet_scale);\n    }\n}\n\n// Chin strap mounts\nmodule chin_strap_mounts() {\n    for(side = [-1, 1]) {\n        translate([side * 25 * helmet_scale, -20 * helmet_scale, -20 * helmet_scale])\n            union() {\n                // Mount base\n                cube([8 * helmet_scale, 6 * helmet_scale, 4 * helmet_scale], center = true);\n                \n                // Mounting hole\n                translate([0, 0, -2.5 * helmet_scale])\n                    cylinder(h = 6 * helmet_scale, d = 2 * helmet_scale);\n            }\n    }\n}\n\n// Ventilation holes\nmodule ventilation_holes() {\n    for(i = [1:3]) {\n        translate([0, -15 * helmet_scale, 25 * helmet_scale - i * 10 * helmet_scale])\n            rotate([0, 90, 0])\n                cylinder(h = wall_thickness * 2, d = 5 * helmet_scale);\n    }\n    \n    for(side = [-1, 1]) {\n        translate([side * 20 * helmet_scale, -10 * helmet_scale, 15 * helmet_scale])\n            rotate([0, 90, 30 * side])\n                cylinder(h = wall_thickness * 2, d = 4 * helmet_scale);\n    }\n}\n\n// Furniture base (helmet stand)\nmodule helmet_stand() {\n    // Base platform\n    translate([0, 0, -45 * helmet_scale])\n        difference() {\n            cylinder(h = 5 * helmet_scale, d = 60 * helmet_scale);\n            \n            // Weight reduction holes\n            for(i = [1:3]) {\n                rotate([0, 0, i * 120])\n                    translate([15 * helmet_scale, 0, -1 * helmet_scale])\n                        cylinder(h = 7 * helmet_scale, d = 8 * helmet_scale);\n            }\n        }\n    \n    // Support column\n    translate([0, 0, -42.5 * helmet_scale])\n        cylinder(h = 30 * helmet_scale, d = 15 * helmet_scale);\n}\n\n// Grip texture pattern\nmodule grip_texture() {\n    for(i = [0:10]) {\n        rotate([0, 0, i * 36])\n            translate([20 * helmet_scale, 0, -10 * helmet_scale])\n                cube([2 * helmet_scale, 30 * helmet_scale, 1 * helmet_scale], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main helmet\n    helmet_shell();\n    \n    // Furniture elements\n    helmet_stand();\n    \n    // Sports equipment details\n    face_mask();\n    chin_strap_mounts();\n    ventilation_holes();\n    \n    // Grip texture on stand\n    grip_texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "bike_helmet",
    "openscad_code": "// Bike Helmet Furniture Item - OpenSCAD\n// Realistic style, medium complexity\n// Wall thickness: 2mm\n\nmodule helmet_shell() {\n    difference() {\n        // Main helmet body\n        scale([1, 0.9, 1.1])\n        sphere(d = 100, $fn = 64);\n        \n        // Cut bottom for head opening\n        translate([0, 0, -30])\n        cube([100, 100, 60], center = true);\n        \n        // Cut front opening for face\n        translate([0, -50, 0])\n        rotate([0, 20, 0])\n        cube([80, 80, 60], center = true);\n    }\n}\n\nmodule ventilation_holes() {\n    for(i = [1:5]) {\n        rotate([0, 0, i * 72])\n        translate([0, 25, 20])\n        rotate([0, 30, 0])\n        cylinder(h = 10, d = 8, center = true);\n    }\n    \n    for(i = [1:4]) {\n        rotate([0, 0, i * 90])\n        translate([0, 15, 0])\n        rotate([0, 45, 0])\n        cylinder(h = 10, d = 6, center = true);\n    }\n}\n\nmodule visor_mount() {\n    // Left mount\n    translate([-45, -25, 10])\n    cube([8, 15, 5], center = true);\n    \n    // Right mount\n    translate([45, -25, 10])\n    cube([8, 15, 5], center = true);\n    \n    // Visor\n    translate([0, -50, 15])\n    rotate([0, 30, 0])\n    linear_extrude(height = 2)\n    scale([1, 0.3])\n    circle(d = 60);\n}\n\nmodule chin_strap_mounts() {\n    // Left strap mount\n    translate([-35, -30, -20])\n    rotate([90, 0, 0])\n    cylinder(h = 10, d = 5, center = true);\n    \n    // Right strap mount\n    translate([35, -30, -20])\n    rotate([90, 0, 0])\n    cylinder(h = 10, d = 5, center = true);\n}\n\nmodule grip_texture() {\n    for(i = [0:30:360]) {\n        rotate([0, 0, i])\n        translate([48, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 2, d = 4);\n    }\n}\n\nmodule helmet_base() {\n    // Create hollow shell with 2mm walls\n    difference() {\n        union() {\n            helmet_shell();\n            // Add thickness\n            scale([0.96, 0.86, 1.06])\n            sphere(d = 100, $fn = 64);\n        }\n        \n        // Remove inner volume\n        scale([0.92, 0.82, 1.02])\n        sphere(d = 96, $fn = 64);\n        \n        // Ventilation holes\n        ventilation_holes();\n    }\n}\n\n// Assembly\nunion() {\n    helmet_base();\n    \n    // Reinforcement ring\n    translate([0, 0, -20])\n    rotate_extrude($fn = 64)\n    translate([48, 0, 0])\n    square([2, 5]);\n    \n    // Mounting details\n    visor_mount();\n    chin_strap_mounts();\n    \n    // Grip texture on rear\n    translate([0, 0, 30])\n    grip_texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "baseball_helmet",
    "openscad_code": "// Baseball Helmet Furniture - OpenSCAD\n// Realistic style, medium complexity\n\n// Overall dimensions (mm)\nhelmet_width = 80;\nhelmet_length = 100;\nhelmet_height = 70;\nwall_thickness = 2;\n\n// Main helmet shell\nmodule helmet_shell() {\n    difference() {\n        // Outer shell\n        union() {\n            // Main dome\n            translate([0, 0, helmet_height/2])\n                scale([helmet_width/2, helmet_length/2, helmet_height/2])\n                    sphere($fn=50);\n            \n            // Bill extension\n            translate([0, -helmet_length/2 - 15, helmet_height/3])\n                rotate([30, 0, 0])\n                    scale([helmet_width/3, 30, wall_thickness*2])\n                        cube([1, 1, 1], center=true);\n        }\n        \n        // Inner cavity\n        translate([0, 0, helmet_height/2])\n            scale([(helmet_width/2)-wall_thickness, (helmet_length/2)-wall_thickness, (helmet_height/2)-wall_thickness])\n                sphere($fn=50);\n        \n        // Face opening\n        translate([0, helmet_length/2 - 10, helmet_height/2])\n            rotate([-20, 0, 0])\n                scale([helmet_width/2.5, 40, 30])\n                    cube([1, 1, 1], center=true);\n    }\n}\n\n// Ventilation holes pattern\nmodule ventilation_holes() {\n    for (i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([helmet_width/3, 0, helmet_height*0.7])\n                rotate([90, 0, 0])\n                    cylinder(h=wall_thickness*3, r=4, $fn=20);\n    }\n}\n\n// Ear protector\nmodule ear_protector(side) {\n    translate([side*helmet_width/2.5, 0, helmet_height/3])\n        rotate([0, side*20, 0])\n            difference() {\n                scale([wall_thickness*3, 25, 30])\n                    cube([1, 1, 1], center=true);\n                translate([side*2, 0, 0])\n                    scale([wall_thickness*1.5, 20, 25])\n                        cube([1, 1, 1], center=true);\n            }\n}\n\n// Chin strap mounts\nmodule chin_strap_mounts() {\n    // Left mount\n    translate([-helmet_width/2.5, -helmet_length/3, helmet_height/4])\n        rotate([0, 90, 0])\n            cylinder(h=wall_thickness*3, r=3, $fn=20);\n    \n    // Right mount\n    translate([helmet_width/2.5, -helmet_length/3, helmet_height/4])\n        rotate([0, 90, 0])\n            cylinder(h=wall_thickness*3, r=3, $fn=20);\n}\n\n// Structural reinforcement ribs\nmodule reinforcement_ribs() {\n    // Top rib\n    translate([0, 0, helmet_height*0.8])\n        rotate([90, 0, 0])\n            cylinder(h=helmet_length*0.8, r=wall_thickness*1.5, $fn=20);\n    \n    // Side ribs\n    for (side = [-1, 1]) {\n        translate([side*helmet_width/3, 0, helmet_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=helmet_height*0.7, r=wall_thickness, $fn=20);\n    }\n}\n\n// Grip texture pattern on bill\nmodule bill_texture() {\n    for (i = [0:5]) {\n        translate([0, -helmet_length/2 - 15 - i*3, helmet_height/3 + wall_thickness])\n            rotate([30, 0, 0])\n                scale([helmet_width/3.2, 1, wall_thickness])\n                    cube([1, 1, 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    helmet_shell();\n    \n    // Ventilation system\n    ventilation_holes();\n    \n    // Ear protectors\n    ear_protector(1);\n    ear_protector(-1);\n    \n    // Chin strap system\n    chin_strap_mounts();\n    \n    // Structural elements\n    reinforcement_ribs();\n    \n    // Surface details\n    bill_texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "football_helmet",
    "openscad_code": "// Football Helmet Furniture - OpenSCAD\n// Realistic style, medium complexity\n\n// Overall dimensions\nhelmet_width = 90;\nhelmet_length = 110;\nhelmet_height = 85;\nwall_thickness = 2;\n\n// Main helmet shell\nmodule helmet_shell() {\n    difference() {\n        // Outer shell\n        scale([1, 1.2, 1.1])\n        sphere(d=helmet_width, $fn=60);\n        \n        // Hollow interior\n        translate([0, 0, -5])\n        scale([0.9, 0.9, 0.9])\n        sphere(d=helmet_width-wall_thickness*2, $fn=60);\n        \n        // Face opening\n        translate([0, helmet_length/2-20, 0])\n        rotate([0, 0, 0])\n        scale([0.8, 0.6, 0.9])\n        cube([helmet_width, helmet_length/2, helmet_height], center=true);\n        \n        // Bottom opening\n        translate([0, 0, -helmet_height/2+5])\n        cube([helmet_width, helmet_length, 20], center=true);\n    }\n}\n\n// Face mask structure\nmodule face_mask() {\n    // Main horizontal bars\n    for(i = [-1:1]) {\n        translate([0, helmet_length/2-15, i*20])\n        rotate([90, 0, 0])\n        cylinder(h=helmet_width*0.8, d=3, center=true);\n    }\n    \n    // Vertical bars\n    for(i = [-1:0.5:1]) {\n        translate([i*helmet_width/3, helmet_length/2-15, 0])\n        rotate([0, 0, 90])\n        cylinder(h=40, d=3, center=true);\n    }\n    \n    // Connection points\n    translate([helmet_width/2-15, helmet_length/2-25, 0])\n    sphere(d=5);\n    translate([-helmet_width/2+15, helmet_length/2-25, 0])\n    sphere(d=5);\n}\n\n// Helmet ridge\nmodule helmet_ridge() {\n    // Central ridge\n    translate([0, -helmet_length/4, helmet_height/2-10])\n    scale([1, 1.5, 0.3])\n    sphere(d=helmet_width/3, $fn=20);\n    \n    // Side ridges\n    for(side = [-1, 1]) {\n        translate([side*helmet_width/3, -helmet_length/4, helmet_height/2-15])\n        rotate([0, 15*side, 0])\n        scale([0.8, 1.2, 0.3])\n        sphere(d=helmet_width/4, $fn=20);\n    }\n}\n\n// Ventilation holes\nmodule vents() {\n    for(i = [1:3]) {\n        translate([0, -helmet_length/3+i*15, helmet_height/2-20])\n        rotate([0, 90, 0])\n        cylinder(h=wall_thickness+1, d=5, center=true);\n    }\n}\n\n// Chin strap anchors\nmodule chin_straps() {\n    for(side = [-1, 1]) {\n        translate([side*helmet_width/3, helmet_length/2-40, -helmet_height/2+20])\n        rotate([0, 90, 0])\n        cylinder(h=8, d=4);\n        \n        translate([side*helmet_width/3, helmet_length/2-40, -helmet_height/2+20])\n        sphere(d=6);\n    }\n}\n\n// Interior padding structure\nmodule padding() {\n    // Top pad\n    translate([0, 0, helmet_height/2-15])\n    scale([0.6, 0.8, 0.2])\n    sphere(d=helmet_width/2, $fn=20);\n    \n    // Side pads\n    for(side = [-1, 1]) {\n        translate([side*helmet_width/3, 0, 0])\n        scale([0.2, 0.7, 0.8])\n        sphere(d=helmet_width/3, $fn=20);\n    }\n}\n\n// Assembly\nunion() {\n    helmet_shell();\n    face_mask();\n    helmet_ridge();\n    vents();\n    chin_straps();\n    \n    // Furniture base - helmet stand\n    translate([0, -helmet_length/2-10, -helmet_height/2-10])\n    cylinder(h=20, d=helmet_width+10, $fn=60);\n    \n    translate([0, -helmet_length/2-20, -helmet_height/2-20])\n    cylinder(h=5, d=helmet_width+20, $fn=60);\n}",
    "renders": true
  },
  {
    "sports_equipment": "hockey_helmet",
    "openscad_code": "// Hockey Helmet Furniture Item\n// Realistic style, medium complexity\n// Overall size: 100mm width x 120mm depth x 80mm height\n\n// Main helmet shell\nmodule helmet_shell() {\n    difference() {\n        union() {\n            // Main dome\n            translate([0, 0, 25])\n            scale([1, 1.2, 0.8])\n            sphere(r=35, $fn=50);\n            \n            // Back extension\n            translate([0, 35, 15])\n            cube([60, 30, 40], center=true);\n            \n            // Chin guard base\n            translate([0, -30, 10])\n            cube([65, 25, 30], center=true);\n        }\n        \n        // Face opening\n        translate([0, -20, 35])\n        scale([0.7, 0.8, 1.2])\n        sphere(r=30, $fn=30);\n        \n        // Bottom opening\n        translate([0, 0, -5])\n        cube([80, 80, 40], center=true);\n    }\n}\n\n// Helmet vents (aerodynamic)\nmodule vents() {\n    for(i = [0:2]) {\n        translate([-25 + i*25, -10, 30])\n        rotate([0, 90, 0])\n        cylinder(h=3, r1=6, r2=3, $fn=16);\n    }\n    \n    for(i = [0:1]) {\n        translate([-15 + i*30, 20, 35])\n        rotate([0, 90, 0])\n        cylinder(h=3, r1=5, r2=2, $fn=16);\n    }\n}\n\n// Face cage attachment points\nmodule cage_mounts() {\n    // Side mounts\n    translate([-32, -20, 25])\n    cylinder(h=5, r=4, $fn=12);\n    \n    translate([32, -20, 25])\n    cylinder(h=5, r=4, $fn=12);\n    \n    // Top mount\n    translate([0, -5, 45])\n    cylinder(h=5, r=4, $fn=12);\n}\n\n// Rear adjustment mechanism\nmodule adjustment_system() {\n    translate([0, 40, 25])\n    difference() {\n        cube([50, 8, 25], center=true);\n        \n        // Adjustment slots\n        for(i = [0:3]) {\n            translate([-18 + i*12, 0, 0])\n            cube([4, 10, 20], center=true);\n        }\n    }\n}\n\n// Interior padding structure\nmodule padding() {\n    // Main padding\n    difference() {\n        translate([0, 0, 18])\n        scale([0.9, 0.9, 0.9])\n        helmet_shell();\n        \n        // Padding gaps\n        for(i = [0:3]) {\n            translate([-30 + i*20, -10, 18])\n            cube([8, 60, 20], center=true);\n        }\n    }\n}\n\n// Chin strap anchors\nmodule chin_straps() {\n    // Left anchor\n    translate([-35, -35, 15])\n    rotate([90, 0, 0])\n    cylinder(h=3, r=2, $fn=8);\n    \n    // Right anchor\n    translate([35, -35, 15])\n    rotate([90, 0, 0])\n    cylinder(h=3, r=2, $fn=8);\n}\n\n// Main assembly\nunion() {\n    // Outer shell with 2mm wall thickness\n    difference() {\n        helmet_shell();\n        translate([0, 0, 0])\n        scale([0.94, 0.94, 0.94])\n        helmet_shell();\n    }\n    \n    // Vents\n    vents();\n    \n    // Cage mounts\n    cage_mounts();\n    \n    // Adjustment system\n    adjustment_system();\n    \n    // Chin strap anchors\n    chin_straps();\n    \n    // Interior padding (offset for printing)\n    translate([0, 0, 2])\n    padding();\n}",
    "renders": true
  },
  {
    "sports_equipment": "climbing_helmet",
    "openscad_code": "// Climbing Helmet Furniture Item (Medium Complexity)\n// Realistic style, 3D printable, ~100mm width\n\n// Main parameters\n$fn = 32;\nwall_thickness = 2;\nhelmet_width = 100;\nhelmet_length = 120;\nhelmet_height = 80;\n\nmodule helmet_shell() {\n    // Outer shell - ellipsoid shape\n    difference() {\n        scale([1, 1.2, 0.8])\n            sphere(d=helmet_width);\n        \n        // Cut bottom flat\n        translate([0, 0, -helmet_height/2])\n            cube([helmet_width*2, helmet_length*2, helmet_height], center=true);\n    }\n}\n\nmodule inner_padding() {\n    // Inner padding layer\n    difference() {\n        scale([0.92, 1.1, 0.75])\n            sphere(d=helmet_width - wall_thickness*2);\n        \n        translate([0, 0, -helmet_height/2])\n            cube([helmet_width*2, helmet_length*2, helmet_height], center=true);\n    }\n}\n\nmodule ventilation_holes() {\n    // Front ventilation slots\n    for (i = [-2:2]) {\n        translate([i*12, helmet_length/2 - 10, 0])\n            rotate([0, 90, 0])\n                cylinder(h=15, d=6, center=true);\n    }\n    \n    // Top vents\n    for (j = [0:2]) {\n        rotate([0, 0, j*120])\n            translate([0, 25, helmet_height/2 - 10])\n                rotate([90, 0, 0])\n                    cylinder(h=8, d=4);\n    }\n}\n\nmodule chin_strap_mounts() {\n    // Left mount\n    translate([-helmet_width/2 + 5, -helmet_length/2 + 20, -helmet_height/3])\n        rotate([90, 0, 90])\n            cylinder(h=8, d=4);\n    \n    // Right mount\n    translate([helmet_width/2 - 5, -helmet_length/2 + 20, -helmet_height/3])\n        rotate([90, 0, 90])\n            cylinder(h=8, d=4);\n}\n\nmodule headlamp_clips() {\n    // Front clips for headlamp\n    translate([0, helmet_length/2 - 5, 0])\n        union() {\n            // Left clip\n            translate([-15, 0, 0])\n                cube([3, 8, 6], center=true);\n            \n            // Right clip\n            translate([15, 0, 0])\n                cube([3, 8, 6], center=true);\n        }\n}\n\nmodule adjustment_dial() {\n    // Rear adjustment mechanism\n    translate([0, -helmet_length/2 + 10, -helmet_height/4])\n        difference() {\n            cylinder(h=8, d=20);\n            cylinder(h=9, d=12);\n            \n            // Grip texture\n            for (i = [0:11]) {\n                rotate([0, 0, i*30])\n                    translate([8, 0, 4])\n                        cube([2, 1, 8], center=true);\n            }\n        }\n}\n\nmodule foam_texture() {\n    // Hexagonal foam pattern inside\n    for (x = [-30:15:30]) {\n        for (y = [-45:15:45]) {\n            translate([x, y, -helmet_height/2 + 5])\n                cylinder(h=5, d=8, $fn=6);\n        }\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Main helmet body\n        helmet_shell();\n        \n        // Structural elements\n        chin_strap_mounts();\n        headlamp_clips();\n        adjustment_dial();\n    }\n    \n    // Hollow out interior\n    inner_padding();\n    \n    // Add ventilation\n    ventilation_holes();\n}\n\n// Add foam texture to visible interior\ntranslate([0, 0, 1])\n    foam_texture();",
    "renders": true
  },
  {
    "sports_equipment": "weight",
    "openscad_code": "// Adjustable dumbbell weight plate furniture piece\n// Dimensions: 150mm diameter, 35mm thickness\n// 3D printable with 2mm walls and no overhangs\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\nplate_diameter = 150;\nplate_thickness = 35;\ncenter_hole_diameter = 52;\nhandle_clearance = 5;\ngrip_depth = 2;\ngrip_width = 10;\nnum_grips = 8;\n\n// Calculate structural elements\nwall_thickness = 2;\ninner_diameter = plate_diameter - (wall_thickness * 2);\nweb_thickness = 3;\n\nmodule grip_texture() {\n    difference() {\n        cylinder(h = plate_thickness, d = plate_diameter, center = true);\n        \n        // Create grip indentations around the edge\n        for (i = [0:num_grips-1]) {\n            rotate([0, 0, i * (360/num_grips)]) {\n                translate([plate_diameter/2 - grip_depth/2, 0, 0]) {\n                    cube([grip_depth, grip_width, plate_thickness + 1], center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule center_hole() {\n    // Main center hole for bar\n    cylinder(h = plate_thickness + 1, d = center_hole_diameter, center = true);\n    \n    // Additional clearance cuts for handle insertion\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45]) {\n            translate([center_hole_diameter/2 + handle_clearance/2, 0, 0]) {\n                cube([handle_clearance, 15, plate_thickness + 1], center = true);\n            }\n        }\n    }\n}\n\nmodule structural_web() {\n    // Internal web structure for strength\n    difference() {\n        cylinder(h = plate_thickness - (wall_thickness * 2), d = inner_diameter, center = true);\n        \n        // Cut spokes for weight reduction\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([0, 0, 0]) {\n                    cube([inner_diameter, web_thickness, plate_thickness - (wall_thickness * 2) + 1], center = true);\n                }\n            }\n        }\n        \n        // Center hole through web\n        cylinder(h = plate_thickness - (wall_thickness * 2) + 1, d = center_hole_diameter + wall_thickness, center = true);\n    }\n}\n\nmodule weight_label() {\n    // Raised weight indicator text area\n    translate([0, plate_diameter/2 - 15, plate_thickness/2 - 1]) {\n        cube([30, 8, 2], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Outer shell with grip texture\n    grip_texture();\n    \n    // Internal structural web\n    translate([0, 0, 0]) {\n        structural_web();\n    }\n    \n    // Center hole cut\n    translate([0, 0, 0]) {\n        center_hole();\n    }\n    \n    // Weight label area\n    weight_label();\n    \n    // Reinforcement ring on back\n    translate([0, 0, -plate_thickness/2 + 1]) {\n        difference() {\n            cylinder(h = 2, d = plate_diameter - 10, center = false);\n            cylinder(h = 3, d = center_hole_diameter + 10, center = false);\n        }\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "dumbbell",
    "openscad_code": "// Dumbbell Furniture - Realistic Medium Complexity\n// Overall length: 120mm, handle Ø22mm, plate Ø50mm, thickness 10mm\n\n$fn = 60;\n\n// Main module\nmodule dumbbell() {\n    color(\"silver\")\n    union() {\n        // Left end plate\n        translate([0, 0, 0])\n            end_plate();\n\n        // Right end plate\n        translate([120, 0, 0])\n            mirror([1, 0, 0])\n                end_plate();\n\n        // Central handle\n        translate([30, 0, 0])\n            handle();\n        \n        // Decorative weight indicator rings\n        translate([20, 0, 0])\n            indicator_ring();\n        translate([100, 0, 0])\n            indicator_ring();\n    }\n}\n\n// End plate with structural details\nmodule end_plate() {\n    difference() {\n        // Main plate body\n        union() {\n            // Outer disc\n            cylinder(h = 10, d = 50);\n            \n            // Inner reinforcement ring\n            translate([0, 0, 0.5])\n                cylinder(h = 9, d = 45);\n                \n            // Structural ribs\n            for(i = [0:45:315]) {\n                rotate([0, 0, i])\n                    translate([17.5, 0, 5])\n                        cube([15, 3, 10], center = true);\n            }\n        }\n        \n        // Center hole for handle\n        translate([0, 0, -1])\n            cylinder(h = 12, d = 23);\n            \n        // Mounting holes for furniture assembly\n        for(i = [0:120:359]) {\n            rotate([0, 0, i])\n                translate([20, 0, 5])\n                    cylinder(h = 11, d = 4);\n        }\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    difference() {\n        // Main handle tube\n        cylinder(h = 60, d = 22);\n        \n        // Grip rings\n        for(i = [5:5:55]) {\n            translate([0, 0, i])\n                difference() {\n                    cylinder(h = 2, d = 24);\n                    cylinder(h = 2.5, d = 20);\n                }\n        }\n    }\n}\n\n// Decorative weight indicator ring\nmodule indicator_ring() {\n    difference() {\n        cylinder(h = 5, d = 28);\n        cylinder(h = 5.5, d = 22.5);\n    }\n}\n\n// Main assembly\ndumbbell();",
    "renders": true
  },
  {
    "sports_equipment": "barbell",
    "openscad_code": "// Barbell Furniture - Decorative Table/Stand\n// Scale: 1:8 model for 3D printing (150mm long)\n\n// Overall dimensions (scaled down)\nbar_length = 140;\nbar_diameter = 6;\nplate_width = 8;\nplate_diameter = 30;\ncollar_width = 4;\ncollar_diameter = 10;\nbase_height = 15;\nbase_width = 40;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main bar with hollow center\nmodule barbell_bar() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=bar_length, d=bar_diameter, center=true);\n        // Hollow center\n        cylinder(h=bar_length+1, d=bar_diameter-wall_thickness*2, center=true);\n    }\n}\n\n// Weight plate with realistic details\nmodule weight_plate(diameter, width, holes=3) {\n    difference() {\n        // Main plate body\n        cylinder(h=width, d=diameter, center=true);\n        \n        // Center hole for bar\n        cylinder(h=width+1, d=bar_diameter+1, center=true);\n        \n        // Grip holes around perimeter\n        for(i=[0:holes-1]) {\n            rotate([0, 0, i*(360/holes)])\n                translate([diameter/2-6, 0, 0])\n                    cylinder(h=width+1, d=3, center=true);\n        }\n        \n        // Lightening cutouts on sides\n        translate([0, 0, width/4])\n            cylinder(h=width/2, d=diameter-6, center=true);\n    }\n}\n\n// Collar with knurled texture\nmodule barbell_collar() {\n    difference() {\n        // Main collar body\n        cylinder(h=collar_width, d=collar_diameter, center=true);\n        \n        // Center hole\n        cylinder(h=collar_width+1, d=bar_diameter+0.5, center=true);\n        \n        // Set screw hole\n        rotate([0, 90, 0])\n            translate([0, 0, collar_width/2])\n                cylinder(h=3, d=2);\n    }\n    \n    // Knurled texture bands\n    for(z=[-collar_width/2+1:1:collar_width/2-1]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h=0.5, d=collar_diameter);\n                for(i=[0:15]) {\n                    rotate([0, 0, i*12])\n                        translate([collar_diameter/2-1, 0, 0])\n                            cube([1, 0.5, 0.5], center=true);\n                }\n            }\n    }\n}\n\n// Support base that doubles as furniture stand\nmodule furniture_base() {\n    // Main base platform\n    difference() {\n        // Solid base\n        cube([base_width, bar_length+20, base_height], center=true);\n        \n        // Recess for bar storage\n        translate([0, 0, base_height/2])\n            cube([base_width-10, bar_length+10, base_height/2], center=true);\n        \n        // Cable management holes\n        for(x=[-base_width/4, base_width/4])\n            translate([x, 0, -base_height/2])\n                cylinder(h=base_height+1, d=3);\n    }\n    \n    // Support brackets\n    for(y=[-bar_length/2+20, bar_length/2-20]) {\n        translate([base_width/2-5, y, 0])\n            rotate([90, 0, 0])\n                cylinder(h=base_height-2, d=6);\n    }\n}\n\n// Assembly\nunion() {\n    // Base furniture element\n    furniture_base();\n    \n    // Bar positioned as decorative element\n    translate([0, 0, base_height/2+bar_diameter/2])\n        barbell_bar();\n    \n    // Weight plates on ends\n    for(side=[-1, 1]) {\n        // Inner plate\n        translate([side*(bar_length/2-plate_width*1.5), 0, base_height/2+bar_diameter/2])\n            weight_plate(plate_diameter, plate_width);\n        \n        // Outer plate\n        translate([side*(bar_length/2-plate_width*2.5), 0, base_height/2+bar_diameter/2])\n            weight_plate(plate_diameter*0.8, plate_width);\n        \n        // Collar\n        translate([side*(bar_length/2-plate_width*3.5), 0, base_height/2+bar_diameter/2])\n            barbell_collar();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "kettlebell",
    "openscad_code": "// Realistic 3D-printable kettlebell furniture item\n// Medium complexity (~120 lines)\n\n$fn = 50;  // Smooth curves for realistic look\nwall = 2;  // 3D-printable wall thickness (mm)\n\n// Overall proportions: 100 mm tall, 110 mm wide\nmodule kettlebell_furniture() {\n    // Main bell body – slightly flattened sphere for realistic kettlebell shape\n    translate([0, 0, 50])\n        scale([1, 1.2, 0.9])\n        difference() {\n            sphere(d = 80);\n            sphere(d = 80 - 2*wall);  // Hollow inside for weight reduction\n        }\n\n    // Flat base for stable furniture placement\n    translate([0, 0, 10])\n        difference() {\n            cylinder(h = wall, d = 90);\n            cylinder(h = wall + 0.1, d = 90 - 2*wall);\n        }\n\n    // Handle – ergonomic grip with 3D-printable curves\n    translate([0, 0, 85])\n        rotate([90, 0, 0])\n        difference() {\n            // Outer handle surface\n            torus(ro = 40, ri = 8);\n            // Inner hollow for grip comfort\n            torus(ro = 40 - wall, ri = 8 - wall);\n        }\n\n    // Handle connection bridges – structural supports\n    for (angle = [0, 180]) {\n        rotate([0, 0, angle])\n        translate([-20, 0, 85])\n            difference() {\n                cube([40, 16, 16], center = true);\n                cube([40 - 2*wall, 16 - 2*wall, 16 - 2*wall], center = true);\n            }\n    }\n\n    // Grip texture – raised ridges for ergonomics\n    for (i = [0:5:355]) {\n        rotate([0, 0, i])\n        translate([0, 0, 85])\n        rotate([90, 0, 0])\n            difference() {\n                torus(ro = 40, ri = 1.5);\n                torus(ro = 40 - wall, ri = 1.5 - wall);\n            }\n    }\n\n    // Weight indicator plate (furniture label)\n    translate([0, 0, 5])\n        difference() {\n            cylinder(h = 5, d = 30);\n            cylinder(h = 5.1, d = 30 - 2*wall);\n        }\n}\n\n// Helper module for torus shape (handle ring)\nmodule torus(ro, ri) {\n    rotate_extrude()\n        translate([ro, 0, 0])\n            circle(r = ri);\n}\n\n// Render the final model\nkettlebell_furniture();",
    "renders": true
  },
  {
    "sports_equipment": "medicine_ball",
    "openscad_code": "// Medicine Ball Furniture Item\n// Realistic style with medium complexity\n// Overall dimensions: ~100mm diameter\n\n// Parameters\nball_diameter = 80;\nwall_thickness = 2;\ngrip_depth = 3;\ngrip_width = 8;\nnum_grips = 8;\nbase_height = 15;\nbase_diameter = 60;\n\n// Main module\nmodule medicine_ball() {\n    // Main ball body\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter, $fn = 64);\n        \n        // Hollow interior\n        sphere(d = ball_diameter - wall_thickness * 2, $fn = 64);\n    }\n    \n    // Grip texture - latitudinal grooves\n    for (i = [1 : num_grips/2]) {\n        rotate([0, 0, i * 360 / (num_grips/2)]) {\n            translate([0, 0, -ball_diameter/2 + i * ball_diameter/(num_grips/2)]) {\n                difference() {\n                    sphere(d = ball_diameter, $fn = 64);\n                    translate([0, 0, -grip_depth]) {\n                        cube([ball_diameter + 2, grip_width, grip_depth * 2], center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Grip texture - longitudinal grooves\n    for (j = [1 : num_grips]) {\n        rotate([0, 0, j * 360 / num_grips]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    sphere(d = ball_diameter, $fn = 64);\n                    translate([0, 0, -grip_depth]) {\n                        cube([ball_diameter + 2, grip_width, grip_depth * 2], center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Furniture base/stand\n    translate([0, 0, -ball_diameter/2 - base_height/2]) {\n        // Base cylinder\n        cylinder(h = base_height, d = base_diameter, $fn = 32);\n        \n        // Support ring\n        translate([0, 0, base_height/2]) {\n            difference() {\n                cylinder(h = 10, d = ball_diameter * 0.7, $fn = 32);\n                cylinder(h = 10, d = ball_diameter * 0.7 - wall_thickness * 2, $fn = 32);\n            }\n        }\n        \n        // Base feet for stability\n        for (k = [0 : 3]) {\n            rotate([0, 0, k * 90]) {\n                translate([base_diameter/2 - 10, 0, 0]) {\n                    cube([20, 10, 5], center = true);\n                }\n            }\n        }\n    }\n    \n    // Reinforcement ribs inside base\n    for (l = [0 : 3]) {\n        rotate([0, 0, l * 90 + 45]) {\n            translate([0, 0, -base_height/2]) {\n                cube([wall_thickness * 2, base_diameter * 0.4, base_height], center = true);\n            }\n        }\n    }\n    \n    // Ball identification number\n    translate([ball_diameter/2 - 5, 0, 0]) {\n        rotate([0, 90, 0]) {\n            linear_extrude(height = 1.5) {\n                text(\"10\", size = 6, font = \"Arial\", halign = \"center\", valign = \"center\");\n            }\n        }\n    }\n}\n\n// Render the medicine ball\nmedicine_ball();",
    "renders": true
  },
  {
    "sports_equipment": "yoga_mat",
    "openscad_code": "// Realistic Yoga Mat Holder\n// Dimensions designed for 3D printing (approximately 120mm width)\n\n// Overall proportions\nmat_width = 100;\nmat_thickness = 3;\nmat_length = 120;\nroll_diameter = 35;\nholder_thickness = 2;\n\n// Create rolled yoga mat\nmodule rolled_mat() {\n    // Central cardboard tube\n    color(\"burlywood\")\n    difference() {\n        cylinder(h=mat_width, d=roll_diameter, $fn=32);\n        cylinder(h=mat_width+1, d=roll_diameter-4, $fn=32);\n    }\n    \n    // Rolled mat layers\n    color(\"darkolivegreen\")\n    for (i=[0:1:9]) {\n        rotate([0, 90, 0])\n        translate([roll_diameter/2 + i*mat_thickness, 0, 0])\n        difference() {\n            cylinder(h=mat_width, d=roll_diameter + 2*i*mat_thickness, $fn=32);\n            cylinder(h=mat_width+1, d=roll_diameter + 2*(i-1)*mat_thickness, $fn=32);\n        }\n    }\n    \n    // Mat texture pattern\n    color(\"darkolivegreen\")\n    for (i=[0:10:350]) {\n        rotate([0, 90, 0])\n        rotate([0, 0, i])\n        translate([roll_diameter/2 + 5*mat_thickness, 0, -mat_width/2])\n        cube([mat_thickness, 0.5, mat_width], center=true);\n    }\n}\n\n// Wall mount bracket\nmodule wall_bracket() {\n    color(\"gray\")\n    // Main bracket body\n    difference() {\n        cube([60, 15, holder_thickness], center=true);\n        // Screw holes\n        translate([-20, 0, -holder_thickness/2])\n        cylinder(h=holder_thickness+1, d=4, $fn=16);\n        translate([20, 0, -holder_thickness/2])\n        cylinder(h=holder_thickness+1, d=4, $fn=16);\n    }\n    \n    // Support arms\n    translate([0, 7.5, 0])\n    cube([5, 20, holder_thickness], center=true);\n    \n    // Curved mat rest\n    translate([0, 17.5, -holder_thickness/2])\n    difference() {\n        cylinder(h=holder_thickness+1, d=40, $fn=32);\n        translate([0, -10, 0])\n        cube([50, 20, holder_thickness+1], center=false);\n    }\n}\n\n// Floor stand base\nmodule floor_stand() {\n    color(\"lightgray\")\n    // Base platform\n    difference() {\n        cube([150, 80, 8], center=true);\n        // Rounded corners\n        translate([-75, -40, 4])\n        sphere(d=16, $fn=32);\n        translate([75, -40, 4])\n        sphere(d=16, $fn=32);\n        translate([-75, 40, 4])\n        sphere(d=16, $fn=32);\n        translate([75, 40, 4])\n        sphere(d=16, $fn=32);\n    }\n    \n    // Support posts\n    for (x=[-60, 60]) {\n        color(\"gray\")\n        translate([x, 0, 4])\n        cylinder(h=100, d=holder_thickness*3, $fn=16);\n        \n        // Top cross bar\n        color(\"gray\")\n        translate([0, 0, 104])\n        rotate([90, 0, 90])\n        cylinder(h=120, d=holder_thickness*2.5, $fn=16);\n    }\n    \n    // Stability feet\n    color(\"darkgray\")\n    for (x=[-75, 75]) {\n        translate([x, 0, 0])\n        cube([10, 100, 4], center=true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, roll_diameter/2])\nrolled_mat();\n\ntranslate([0, -50, -roll_diameter/2-5])\nwall_bracket();\n\ntranslate([0, 100, -10])\nfloor_stand();",
    "renders": true
  },
  {
    "sports_equipment": "jump_rope",
    "openscad_code": "// Jump rope furniture item - Realistic style, medium complexity\n\n// Parameters\nhandle_length = 80;\nhandle_diameter = 25;\ngrip_length = 60;\ngrip_diameter = 22;\nrope_diameter = 6;\nrope_length = 120;\nbearing_radius = 8;\nbearing_thickness = 4;\nwall_thickness = 2;\n\n// Main handle module\nmodule handle() {\n    difference() {\n        // Main handle body\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Hollow center\n        translate([0, 0, wall_thickness])\n            cylinder(h=handle_length-wall_thickness*2, d=handle_diameter-wall_thickness*2, $fn=32);\n        \n        // Bearing cavity\n        translate([0, 0, handle_length-bearing_thickness-wall_thickness])\n            cylinder(h=bearing_thickness+wall_thickness, d=bearing_radius*2+wall_thickness, $fn=32);\n    }\n    \n    // Grip texture\n    for(i = [0:4:grip_length-4]) {\n        translate([0, 0, i+handle_length/2-grip_length/2])\n            difference() {\n                cylinder(h=4, d=grip_diameter+2, $fn=32);\n                cylinder(h=4.1, d=grip_diameter-2, $fn=32);\n            }\n    }\n    \n    // End cap\n    translate([0, 0, handle_length])\n        cylinder(h=5, d=handle_diameter+2, $fn=32);\n}\n\n// Bearing module\nmodule bearing() {\n    difference() {\n        cylinder(h=bearing_thickness, d=bearing_radius*2, $fn=32);\n        cylinder(h=bearing_thickness+0.1, d=bearing_radius*2-wall_thickness*2, $fn=32);\n    }\n    \n    // Ball bearings\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([bearing_radius-wall_thickness/2, 0, bearing_thickness/2])\n                sphere(d=wall_thickness, $fn=8);\n    }\n}\n\n// Rope segment\nmodule rope_segment(length) {\n    hull() {\n        sphere(d=rope_diameter, $fn=16);\n        translate([0, 0, length])\n            sphere(d=rope_diameter, $fn=16);\n    }\n}\n\n// Complete rope\nmodule rope(length) {\n    segments = floor(length / 10);\n    for(i = [0:segments-1]) {\n        rotate([0, 0, i*15])\n            rope_segment(10);\n    }\n}\n\n// Assembly\nmodule jump_rope() {\n    // Left handle\n    translate([-rope_length/2-5, 0, 0])\n        handle();\n    \n    // Right handle\n    translate([rope_length/2+5, 0, 0])\n        mirror([1, 0, 0])\n            handle();\n    \n    // Left bearing\n    translate([-rope_length/2-5, 0, handle_length-bearing_thickness/2])\n        bearing();\n    \n    // Right bearing\n    translate([rope_length/2+5, 0, handle_length-bearing_thickness/2])\n        mirror([1, 0, 0])\n            bearing();\n    \n    // Rope\n    translate([-rope_length/2, 0, handle_length-bearing_thickness/2])\n        rotate([90, 0, 0])\n            rope(rope_length);\n}\n\n// Render\njump_rope();",
    "renders": true
  },
  {
    "sports_equipment": "hula_hoop",
    "openscad_code": "// Hula Hoop Furniture - Side Table\n// Combines a functional hula hoop with a small side table\n// Outer diameter: 140mm, Inner diameter: 120mm\n// Table height: 50mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main hula hoop ring\nmodule hoop_ring() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=wall*6, d=140, center=true, $fn=100);\n        \n        // Inner hollow space\n        translate([0, 0, 1])\n            cylinder(h=wall*6+2, d=140-2*wall, center=true, $fn=100);\n    }\n}\n\n// Grip texture pattern\nmodule grip_pattern() {\n    for(i=[0:15:359]) {\n        rotate([0, 0, i])\n            translate([67.5, 0, 0])\n                cube([4, 2, 10], center=true);\n    }\n}\n\n// Table surface\nmodule table_surface() {\n    difference() {\n        // Main table top\n        cylinder(h=wall, d=120-2*wall, $fn=60);\n        \n        // Center hole for cable management\n        translate([0, 0, -1])\n            cylinder(h=wall+2, d=20, $fn=30);\n    }\n}\n\n// Support legs (3 legs for stability)\nmodule support_legs() {\n    for(i=[0:120:240]) {\n        rotate([0, 0, i])\n            translate([40, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=40, d=wall+2, $fn=20);\n    }\n}\n\n// Base ring for stability\nmodule base_ring() {\n    difference() {\n        cylinder(h=wall*2, d=100, $fn=60);\n        translate([0, 0, -1])\n            cylinder(h=wall*2+2, d=100-2*wall, $fn=60);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 25])\n    union() {\n        // Main hula hoop structure\n        hoop_ring();\n        \n        // Add grip texture\n        grip_pattern();\n        \n        // Table surface\n        translate([0, 0, -wall*3.5])\n            table_surface();\n        \n        // Support structure\n        translate([0, 0, -wall*4])\n            support_legs();\n        \n        // Base\n        translate([0, 0, -wall*4-40])\n            base_ring();\n    }",
    "renders": true
  },
  {
    "sports_equipment": "frisbee",
    "openscad_code": "// Frisbee Furniture - Wall-mounted coat hanger that looks like a frisbee\n// Overall size: 120mm diameter, 15mm thick\n// Wall mounting bracket integrated into back side\n// 5 coat hooks evenly spaced around inner edge\n\n$fn = 36;\n\n// Main parameters\ndiameter = 120;\nthickness = 15;\nwall_thickness = 2;\nhook_count = 5;\nmount_hole_diameter = 5;\n\n// Main frisbee body\nmodule frisbee_body() {\n    difference() {\n        // Outer rim with aerodynamic lip\n        union() {\n            cylinder(h=thickness, d=diameter, $fn=100);\n            translate([0, 0, thickness])\n                cylinder(h=3, d1=diameter, d2=diameter-6, $fn=100);\n        }\n        \n        // Hollow center cavity\n        translate([0, 0, wall_thickness])\n            cylinder(h=thickness*2, d=diameter-wall_thickness*2, $fn=100);\n    }\n}\n\n// Grip texture - concentric rings on top surface\nmodule grip_texture() {\n    for(i=[1:10]) {\n        translate([0, 0, thickness+1.5])\n            cylinder(h=0.5, d=diameter-i*5, $fn=100);\n    }\n}\n\n// Mounting bracket on back\nmodule mounting_bracket() {\n    // Main bracket plate\n    translate([0, 0, -5])\n        cube([40, 20, 5], center=true);\n    \n    // Screw holes\n    translate([15, 0, -2.5])\n        cylinder(h=10, d=mount_hole_diameter);\n    translate([-15, 0, -2.5])\n        cylinder(h=10, d=mount_hole_diameter);\n    \n    // Reinforcement ribs\n    for(x=[-10, 10]) {\n        translate([x, 0, -2.5])\n            cube([5, 15, 5], center=true);\n    }\n}\n\n// Individual coat hook\nmodule hook() {\n    // Hook base\n    cylinder(h=8, d=12);\n    \n    // Hook arm\n    translate([0, 5, 4])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=20, d=8);\n                translate([0, 0, 2])\n                    cylinder(h=20, d=4);\n            }\n    \n    // Hook tip\n    translate([0, 5, 22])\n        sphere(d=8);\n}\n\n// Array of hooks around inner edge\nmodule hooks_array() {\n    for(i=[0:hook_count-1]) {\n        angle = i * 360/hook_count;\n        radius = (diameter-wall_thickness*2)/2 - 10;\n        translate([cos(angle)*radius, sin(angle)*radius, thickness-4])\n            rotate([0, 0, angle+90])\n                hook();\n    }\n}\n\n// Assembly\nunion() {\n    frisbee_body();\n    grip_texture();\n    mounting_bracket();\n    hooks_array();\n}",
    "renders": true
  },
  {
    "sports_equipment": "boomerang",
    "openscad_code": "// Boomerang Furniture Shelf Unit\n// A wall-mounted boomerang-shaped shelf system\n\n// Overall dimensions\nboomerang_length = 120;\nboomerang_width = 40;\nboomerang_thickness = 15;\nwall_mount_thickness = 3;\n\n// Shelf parameters\nshelf_count = 3;\nshelf_thickness = 2;\nshelf_spacing = 25;\n\n// Grip texture details\ngrip_depth = 0.5;\ngrip_spacing = 8;\n\n// Main boomerang shape module\nmodule boomerang_body() {\n    difference() {\n        // Base boomerang shape\n        union() {\n            // Central body\n            translate([0, 0, boomerang_thickness/2])\n                scale([1, 0.6, 1])\n                cube([boomerang_length, boomerang_width, boomerang_thickness], center=true);\n            \n            // Left wing\n            translate([-boomerang_length/3, 0, boomerang_thickness/2])\n                rotate([0, 0, -30])\n                scale([0.8, 0.4, 1])\n                cube([boomerang_length/2, boomerang_width, boomerang_thickness], center=true);\n            \n            // Right wing\n            translate([boomerang_length/3, 0, boomerang_thickness/2])\n                rotate([0, 0, 30])\n                scale([0.8, 0.4, 1])\n                cube([boomerang_length/2, boomerang_width, boomerang_thickness], center=true);\n        }\n        \n        // Rounded edges\n        translate([0, 0, boomerang_thickness/2])\n            cylinder(h=boomerang_thickness+1, r=boomerang_width/3, $fn=32);\n        \n        // Front edge rounding\n        translate([0, 0, -0.5])\n            cube([boomerang_length+2, boomerang_width+2, boomerang_thickness+1], center=true);\n    }\n}\n\n// Wall mounting plate\nmodule wall_mount() {\n    translate([0, 0, boomerang_thickness/2 + wall_mount_thickness/2])\n        cube([boomerang_length*0.6, boomerang_width*0.4, wall_mount_thickness], center=true);\n}\n\n// Grip texture on top surface\nmodule grip_texture() {\n    for (i = [-boomerang_length/2 + grip_spacing/2 : grip_spacing : boomerang_length/2 - grip_spacing/2]) {\n        translate([i, 0, boomerang_thickness - grip_depth/2])\n            cube([grip_spacing/2, boomerang_width*0.8, grip_depth], center=true);\n    }\n}\n\n// Shelf supports\nmodule shelf_supports() {\n    for (i = [0 : shelf_count-1]) {\n        // Left support\n        translate([-boomerang_length/4, 0, boomerang_thickness + shelf_spacing*(i+1)])\n            rotate([0, -90, -30])\n            cylinder(h=boomerang_width/3, r=2, $fn=8);\n        \n        // Right support\n        translate([boomerang_length/4, 0, boomerang_thickness + shelf_spacing*(i+1)])\n            rotate([0, -90, 30])\n            cylinder(h=boomerang_width/3, r=2, $fn=8);\n    }\n}\n\n// Individual shelf\nmodule shelf(index) {\n    height = boomerang_thickness + shelf_spacing*(index+1);\n    \n    difference() {\n        union() {\n            // Main shelf\n            translate([0, 0, height])\n                scale([0.9 - index*0.1, 0.7 - index*0.1, 1])\n                cube([boomerang_length*0.8, boomerang_width*0.6, shelf_thickness], center=true);\n            \n            // Front lip\n            translate([0, boomerang_width*0.25, height + shelf_thickness/2])\n                cube([boomerang_length*0.7, 2, shelf_thickness*2], center=true);\n        }\n        \n        // Cable management holes\n        for (j = [-1 : 1]) {\n            translate([j*20, 0, height])\n                cylinder(h=shelf_thickness+1, r=3, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    boomerang_body();\n    \n    // Wall mount\n    wall_mount();\n    \n    // Mounting holes\n    translate([-boomerang_length/4, 0, boomerang_thickness + wall_mount_thickness/2])\n        cylinder(h=wall_mount_thickness+1, r=2, $fn=16);\n    translate([boomerang_length/4, 0, boomerang_thickness + wall_mount_thickness/2])\n        cylinder(h=wall_mount_thickness+1, r=2, $fn=16);\n    \n    // Grip texture\n    grip_texture();\n    \n    // Shelves\n    for (i = [0 : shelf_count-1]) {\n        shelf(i);\n    }\n    \n    // Shelf supports\n    shelf_supports();\n}",
    "renders": true
  },
  {
    "sports_equipment": "lawn_dart",
    "openscad_code": "// Lawn Dart Furniture Item - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm length, 40mm diameter at fins\n\nmodule grip_texture() {\n    // Create grip rings around the handle\n    for (i = [0:3:36]) {\n        translate([0, 0, i])\n        difference() {\n            cylinder(h=1.5, d=14, $fn=32);\n            cylinder(h=2, d=12, $fn=32);\n        }\n    }\n}\n\nmodule dart_body() {\n    // Main metal body tube\n    difference() {\n        cylinder(h=80, d=12, $fn=32);\n        // Hollow center for weight reduction\n        cylinder(h=82, d=8, $fn=32);\n    }\n}\n\nmodule dart_tip() {\n    // Sharp metal tip with safety considerations\n    union() {\n        // Base cylinder\n        cylinder(h=8, d=8, $fn=16);\n        // Conical tip\n        translate([0, 0, 8])\n        cylinder(h1=25, h2=0, d1=8, d2=1, $fn=16);\n    }\n}\n\nmodule fin_supports() {\n    // Structural ribs between fins\n    for (angle = [0:120:359]) {\n        rotate([0, 0, angle])\n        translate([12, 0, 0])\n        rotate([0, 90, 0])\n        cube([16, 2, 2], center=true);\n    }\n}\n\nmodule fins() {\n    // Three aerodynamic fins\n    for (angle = [0:120:359]) {\n        rotate([0, 0, angle])\n        translate([22, 0, 0])\n        rotate([0, 0, 90])\n        linear_extrude(height=2)\n        polygon(points=[[0,0], [20,8], [20,-8]]);\n    }\n}\n\nmodule fin_assembly() {\n    // Complete fin structure with supports\n    union() {\n        // Fin base ring\n        cylinder(h=4, d=30, $fn=64);\n        \n        // Structural elements\n        fin_supports();\n        \n        // Fins themselves\n        translate([0, 0, 2])\n        fins();\n        \n        // Central hub\n        cylinder(h=6, d=12, $fn=32);\n    }\n}\n\nmodule weighted_core() {\n    // Internal weight chamber for proper balance\n    difference() {\n        cylinder(h=30, d=10, $fn=32);\n        cylinder(h=32, d=6, $fn=32);\n    }\n}\n\n// Main assembly\nunion() {\n    // Handle grip at the base\n    translate([0, 0, 0])\n    union() {\n        cylinder(h=20, d=14, $fn=32);\n        grip_texture();\n    }\n    \n    // Main body tube\n    translate([0, 0, 20])\n    dart_body();\n    \n    // Internal weight chamber\n    translate([0, 0, 85])\n    weighted_core();\n    \n    // Fin assembly\n    translate([0, 0, 100])\n    fin_assembly();\n    \n    // Tip at the front\n    translate([0, 0, 130])\n    dart_tip();\n}",
    "renders": true
  },
  {
    "sports_equipment": "bowling_ball",
    "openscad_code": "// Bowling Ball Furniture - Realistic Style with Medium Complexity\n// Overall dimensions: 120mm diameter sphere with structural base\n\n// Bowling ball parameters\nball_diameter = 100;\nfinger_hole_diameter = 16;\nthumb_hole_diameter = 18;\nhole_depth = 25;\nwall_thickness = 2;\n\n// Base parameters\nbase_height = 15;\nbase_diameter = 80;\nfoot_height = 8;\nfoot_diameter = 20;\n\n// Grip texture parameters\ngrip_ring_thickness = 1;\ngrip_ring_spacing = 3;\ngrip_ring_count = 8;\n\n// Create the bowling ball with finger holes\nmodule bowling_ball() {\n    difference() {\n        // Main sphere\n        sphere(d = ball_diameter, $fn = 100);\n        \n        // Finger holes (standard grip pattern)\n        // Thumb hole - offset to the side\n        translate([-ball_diameter/4, 0, ball_diameter/2 - holedepth])\n            cylinder(d = thumb_hole_diameter, h = hole_depth + 5, $fn = 32);\n        \n        // Finger holes - side by side\n        translate([ball_diameter/6, -ball_diameter/6, ball_diameter/2 - holedepth])\n            cylinder(d = finger_hole_diameter, h = hole_depth + 5, $fn = 32);\n        \n        translate([ball_diameter/6, ball_diameter/6, ball_diameter/2 - holedepth])\n            cylinder(d = finger_hole_diameter, h = hole_depth + 5, $fn = 32);\n    }\n    \n    // Add grip texture rings around finger holes\n    for(i = [1:grip_ring_count]) {\n        color(\"black\")\n        difference() {\n            sphere(d = ball_diameter + grip_ring_thickness*2, $fn = 100);\n            sphere(d = ball_diameter, $fn = 100);\n        }\n        translate([0, 0, -i * grip_ring_spacing])\n            sphere(d = ball_diameter + grip_ring_thickness*2, $fn = 100);\n    }\n}\n\n// Create the structural base with feet\nmodule ball_base() {\n    // Main base cylinder\n    cylinder(h = base_height, d = base_diameter, $fn = 64);\n    \n    // Create four support feet\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n        translate([base_diameter/2 - foot_diameter/2, 0, -foot_height])\n            cylinder(h = foot_height, d = foot_diameter, $fn = 32);\n    }\n    \n    // Center support pillar\n    translate([0, 0, base_height])\n    cylinder(h = ball_diameter/2 - 10, d = 30, $fn = 32);\n    \n    // Ball socket with proper clearance\n    translate([0, 0, base_height + ball_diameter/2 - 10])\n    difference() {\n        sphere(d = ball_diameter + wall_thickness*2, $fn = 64);\n        sphere(d = ball_diameter + 1, $fn = 64);\n    }\n}\n\n// Create the complete furniture piece\nunion() {\n    // Base structure\n    translate([0, 0, 0])\n        ball_base();\n    \n    // Bowling ball on top\n    translate([0, 0, base_height + ball_diameter/2 - 10])\n        bowling_ball();\n}\n\n// Add decorative elements - score display indent\ntranslate([0, -base_diameter/2 - 5, base_height/2])\ndifference() {\n    cube([40, 3, 8], center = true);\n    translate([0, 0, -1])\n        cube([38, 5, 6], center = true);\n}\n\n// Add structural reinforcement ribs\nmodule reinforcement_rib(width, height, length) {\n    cube([width, height, length]);\n}\n\n// Four reinforcement ribs between base and feet\nfor(angle = [45:90:315]) {\n    rotate([0, 0, angle])\n    translate([base_diameter/4, -2, 0])\n        reinforcement_rib(4, base_height/2, 20);\n}",
    "renders": true
  },
  {
    "sports_equipment": "bowling_pin",
    "openscad_code": "// Bowling Pin Furniture - Realistic Style\n// Medium complexity, 3D printable, 120mm height\n\nmodule bowling_pin_body() {\n    // Main body with realistic proportions\n    union() {\n        // Top knob\n        translate([0, 0, 110]) \n            sphere(d=12, $fn=20);\n        \n        // Neck section\n        cylinder(h=25, d1=12, d2=18, $fn=20);\n        \n        // Upper body (wider section)\n        translate([0, 0, 25])\n            cylinder(h=35, d1=18, d2=32, $fn=20);\n        \n        // Middle taper\n        translate([0, 0, 60])\n            cylinder(h=30, d1=32, d2=28, $fn=20);\n        \n        // Lower body\n        translate([0, 0, 90])\n            cylinder(h=20, d1=28, d2=22, $fn=20);\n    }\n}\n\nmodule grip_texture() {\n    // Horizontal grip rings around the neck area\n    for(i=[0:4]) {\n        translate([0, 0, 5 + i*3])\n            difference() {\n                cylinder(h=1.5, d=19, $fn=20);\n                cylinder(h=1.5, d=16.5, $fn=20);\n            }\n    }\n    \n    // Vertical grip grooves\n    for(i=[0:11]) {\n        rotate([0, 0, i*30])\n            translate([9.5, 0, 15])\n                cube([1.5, 1, 35], center=true);\n    }\n}\n\nmodule base_structure() {\n    // Hollow base for weight distribution\n    difference() {\n        // Outer base\n        cylinder(h=15, d=22, $fn=20);\n        \n        // Inner cavity (2mm wall thickness)\n        translate([0, 0, 2])\n            cylinder(h=11, d=18, $fn=20);\n    }\n    \n    // Reinforcement ribs inside base\n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n            translate([8.5, 0, 7.5])\n                cube([3, 1.5, 10], center=true);\n    }\n}\n\nmodule furniture_features() {\n    // Flat top surface for table functionality\n    translate([0, 0, 125])\n        cube([25, 25, 3], center=true);\n    \n    // Side handles for carrying\n    for(side=[-1, 1]) {\n        translate([side*15, 0, 70])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=20, d=8, $fn=16);\n                    cylinder(h=20, d=5, $fn=16);\n                }\n    }\n    \n    // Non-slip base ring\n    translate([0, 0, 0.5])\n        cylinder(h=3, d=25, $fn=20);\n}\n\n// Main assembly\nunion() {\n    // Core bowling pin\n    bowling_pin_body();\n    \n    // Grip texture\n    grip_texture();\n    \n    // Base structure\n    translate([0, 0, 110])\n        base_structure();\n    \n    // Furniture features\n    furniture_features();\n    \n    // Drain hole for 3D printing\n    translate([0, 0, 120])\n        cylinder(h=10, d=3, $fn=10);\n}",
    "renders": true
  },
  {
    "sports_equipment": "foosball",
    "openscad_code": "// Realistic Foosball Table - Medium Complexity\n// Overall dimensions: 120mm x 80mm x 35mm\n\n// Table parameters\ntable_length = 120;\ntable_width = 80;\ntable_height = 35;\nwall_thickness = 2;\nplayfield_depth = 3;\n\n// Player parameters\nplayer_height = 20;\nplayer_diameter = 6;\nplayer_head_d = 4;\n\n// Rod parameters\nrod_diameter = 3;\nrod_length = table_width + 10;\n\n// Leg parameters\nleg_height = 20;\nleg_size = 4;\n\n// Module for rounded corners\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(dx = [0, size.x - radius*2])\n            for(dy = [0, size.y - radius*2])\n                for(dz = [0, size.z - radius*2])\n                    translate([radius + dx, radius + dy, radius + dz])\n                        sphere(r = radius);\n    }\n}\n\n// Table frame\nmodule table_frame() {\n    difference() {\n        // Outer frame\n        rounded_cube([table_length, table_width, table_height], 3);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            rounded_cube([\n                table_length - wall_thickness*2, \n                table_width - wall_thickness*2, \n                table_height - wall_thickness\n            ], 2);\n        \n        // Playfield cavity\n        translate([wall_thickness + 5, wall_thickness + 5, table_height - playfield_depth - wall_thickness])\n            cube([\n                table_length - wall_thickness*2 - 10,\n                table_width - wall_thickness*2 - 10,\n                playfield_depth + 1\n            ]);\n    }\n}\n\n// Playfield with texture\nmodule playfield() {\n    translate([wall_thickness + 5, wall_thickness + 5, table_height - playfield_depth - wall_thickness])\n        cube([\n            table_length - wall_thickness*2 - 10,\n            table_width - wall_thickness*2 - 10,\n            playfield_depth\n        ]);\n    \n    // Field texture lines\n    for(i = [1:3]) {\n        translate([table_length/2 - 2, wall_thickness + 5 + i*20, table_height - playfield_depth - wall_thickness + 0.1])\n            cube([4, 1, 0.2]);\n    }\n}\n\n// Player figure\nmodule player(rotation = 0) {\n    rotate([90, 0, rotation]) {\n        // Body\n        cylinder(h = player_height, d = player_diameter);\n        \n        // Head\n        translate([0, 0, player_height])\n            sphere(d = player_head_d);\n        \n        // Feet\n        translate([0, 0, 2])\n            cube([player_diameter*1.5, 2, 1], center = true);\n    }\n}\n\n// Rod with players\nmodule rod_with_players(y_pos, num_players = 3) {\n    // Rod\n    rotate([0, 90, 0])\n        translate([0, y_pos, table_height/2])\n            cylinder(h = rod_length, d = rod_diameter);\n    \n    // Players on rod\n    spacing = (table_length - 30) / (num_players - 1);\n    for(i = [0:num_players-1]) {\n        translate([15 + i*spacing, y_pos, table_height/2])\n            player();\n    }\n}\n\n// Goal\nmodule goal(side) {\n    // Goal posts\n    translate([side ? table_length - wall_thickness - 5 : wall_thickness + 5, table_width/2 - 10, table_height/2])\n        cube([wall_thickness, 20, 20]);\n    \n    translate([side ? table_length - wall_thickness - 5 : wall_thickness + 5, table_width/2 + 10, table_height/2])\n        cube([wall_thickness, 20, 20]);\n    \n    // Back of goal\n    translate([side ? table_length - wall_thickness - 5 : wall_thickness + 5, table_width/2, table_height/2 - 10])\n        cube([wall_thickness, 20, 1]);\n}\n\n// Leg\nmodule leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, 0])\n        rounded_cube([leg_size, leg_size, leg_height], 1);\n}\n\n// Assembly\nunion() {\n    // Main table\n    table_frame();\n    \n    // Playfield\n    playfield();\n    \n    // Rods with players\n    rod_with_players(table_width/4, 3);\n    rod_with_players(table_width/2, 2);\n    rod_with_players(table_width*3/4, 3);\n    \n    // Goals\n    goal(false);  // Left goal\n    goal(true);   // Right goal\n    \n    // Legs\n    leg(wall_thickness + 5, wall_thickness + 5);\n    leg(table_length - wall_thickness - 5, wall_thickness + 5);\n    leg(wall_thickness + 5, table_width - wall_thickness - 5);\n    leg(table_length - wall_thickness - 5, table_width - wall_thickness - 5);\n}",
    "renders": true
  },
  {
    "sports_equipment": "basketball_hoop",
    "openscad_code": "// Basketball Hoop Furniture\n// Realistic style, medium complexity\n// Overall dimensions: ~100mm width x 80mm depth x 70mm height\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main module\nmodule basketball_hoop() {\n    difference() {\n        union() {\n            // Backboard\n            backboard();\n            \n            // Rim with support arms\n            rim_assembly();\n            \n            // Net support ring\n            net_ring();\n            \n            // Net\n            net();\n            \n            // Wall mounting bracket\n            mounting_bracket();\n        }\n        \n        // Remove holes for mounting screws\n        mounting_holes();\n    }\n}\n\n// Backboard - main furniture element\nmodule backboard() {\n    translate([0, 0, 35]) {\n        // Main backboard panel\n        difference() {\n            cube([60, 5, 40], center = true);\n            \n            // Target rectangle\n            translate([0, 2.6, 0])\n                cube([45, 1, 30], center = true);\n        }\n        \n        // Backboard frame\n        translate([0, 2.5, 35])\n            cube([64, 3, 44], center = true);\n        translate([0, 2.5, 35])\n            cube([60, 3, 48], center = true);\n    }\n}\n\n// Rim assembly with support arms\nmodule rim_assembly() {\n    translate([0, 20, 20]) {\n        // Main rim\n        rotate([90, 0, 0])\n            cylinder(h = 3, r1 = 22, r2 = 22, center = true);\n        \n        // Rim support arms\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([15, 0, 0])\n                    cube([10, 3, 15], center = true);\n        }\n        \n        // Connection to backboard\n        translate([0, -10, -7.5])\n            cube([4, 20, 15], center = true);\n    }\n}\n\n// Net support ring\nmodule net_ring() {\n    translate([0, 20, 17]) {\n        rotate([90, 0, 0])\n            cylinder(h = 2, r1 = 20, r2 = 20, center = true);\n    }\n}\n\n// Net with realistic loops\nmodule net() {\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30]) {\n            // Vertical net strings\n            translate([0, 20, 17])\n                rotate([0, 90, 0])\n                    cylinder(h = 15, r = 0.5, center = false);\n            \n            // Horizontal connecting rings\n            for (j = [1:3]) {\n                translate([0, 20 + j * 3.5, 17 - j * 3.5])\n                    rotate([90, 0, 0])\n                        cylinder(h = 0.5, r1 = 20 - j * 2, r2 = 20 - j * 2, center = true);\n            }\n        }\n    }\n}\n\n// Wall mounting bracket\nmodule mounting_bracket() {\n    translate([0, -25, 25]) {\n        // Main bracket\n        difference() {\n            cube([40, 10, 20], center = true);\n            \n            // Lightening holes\n            for (x = [-15, 0, 15]) {\n                for (z = [-5, 5]) {\n                    translate([x, 0, z])\n                        cylinder(h = 12, r = 3, center = true);\n                }\n            }\n        }\n        \n        // Support gussets\n        translate([0, -15, 15])\n            cube([35, 20, 5], center = true);\n    }\n}\n\n// Mounting holes for wall attachment\nmodule mounting_holes() {\n    for (x = [-20, -10, 0, 10, 20]) {\n        for (z = [15, 35]) {\n            translate([x, -30, z])\n                rotate([90, 0, 0])\n                    cylinder(h = 50, r = 1.5, center = true);\n        }\n    }\n}\n\n// Generate the model\nbasketball_hoop();",
    "renders": true
  },
  {
    "sports_equipment": "hockey_goal",
    "openscad_code": "// Hockey Goal Furniture - Realistic Style, Medium Complexity\n// Overall size: 100mm width x 50mm depth x 60mm height\n\n// Goal frame dimensions\ngoal_width = 100;\ngoal_depth = 50;\ngoal_height = 60;\npost_diameter = 4;\nnet_thickness = 1;\n\n// Module for rounded post using cylinder and sphere\nmodule rounded_post(length, diameter) {\n    union() {\n        cylinder(h = length, d = diameter, $fn = 16);\n        translate([0, 0, length]) sphere(d = diameter, $fn = 16);\n        translate([0, 0, 0]) sphere(d = diameter, $fn = 16);\n    }\n}\n\n// Main goal frame\nmodule goal_frame() {\n    color(\"white\") {\n        union() {\n            // Base frame\n            // Front bottom bar\n            translate([-goal_width/2, -goal_depth/2, 0])\n                rounded_post(goal_width, post_diameter);\n            \n            // Back bottom bar\n            translate([-goal_width/2, goal_depth/2, 0])\n                rounded_post(goal_width, post_diameter);\n            \n            // Side bottom bars\n            translate([-goal_width/2, -goal_depth/2, 0])\n                rotate([0, 90, 0])\n                    rounded_post(goal_depth, post_diameter);\n            translate([goal_width/2, -goal_depth/2, 0])\n                rotate([0, 90, 0])\n                    rounded_post(goal_depth, post_diameter);\n            \n            // Vertical posts\n            // Left front\n            translate([-goal_width/2, -goal_depth/2, 0])\n                rounded_post(goal_height, post_diameter);\n            \n            // Right front\n            translate([goal_width/2, -goal_depth/2, 0])\n                rounded_post(goal_height, post_diameter);\n            \n            // Left back\n            translate([-goal_width/2, goal_depth/2, 0])\n                rounded_post(goal_height, post_diameter);\n            \n            // Right back\n            translate([goal_width/2, goal_depth/2, 0])\n                rounded_post(goal_height, post_diameter);\n            \n            // Top frame\n            // Front top bar\n            translate([-goal_width/2, -goal_depth/2, goal_height])\n                rounded_post(goal_width, post_diameter);\n            \n            // Back top bar\n            translate([-goal_width/2, goal_depth/2, goal_height])\n                rounded_post(goal_width, post_diameter);\n            \n            // Side top bars\n            translate([-goal_width/2, -goal_depth/2, goal_height])\n                rotate([0, 90, 0])\n                    rounded_post(goal_depth, post_diameter);\n            translate([goal_width/2, -goal_depth/2, goal_height])\n                rotate([0, 90, 0])\n                    rounded_post(goal_depth, post_diameter);\n            \n            // Cross bar support\n            translate([0, -goal_depth/2, goal_height/2])\n                rotate([0, 90, 0])\n                    rounded_post(goal_depth, post_diameter);\n        }\n    }\n}\n\n// Net mesh\nmodule goal_net() {\n    color(\"lightgray\") {\n        difference() {\n            // Back wall net\n            translate([0, goal_depth/2 - 0.5, goal_height/2])\n                cube([goal_width - post_diameter, 1, goal_height - post_diameter], center = true);\n            \n            // Holes for net pattern\n            for (x = [-45:10:45]) {\n                for (y = [5:10:55]) {\n                    translate([x, goal_depth/2 - 0.5, y])\n                        cube([6, 1.2, 6], center = true);\n                }\n            }\n        }\n        \n        // Side nets\n        difference() {\n            translate([-goal_width/2 + 0.5, 0, goal_height/2])\n                cube([1, goal_depth - post_diameter, goal_height - post_diameter], center = true);\n            \n            for (z = [5:10:55]) {\n                for (y = [-20:10:20]) {\n                    translate([-goal_width/2 + 0.5, y, z])\n                        cube([1.2, 6, 6], center = true);\n                }\n            }\n        }\n        \n        difference() {\n            translate([goal_width/2 - 0.5, 0, goal_height/2])\n                cube([1, goal_depth - post_diameter, goal_height - post_diameter], center = true);\n            \n            for (z = [5:10:55]) {\n                for (y = [-20:10:20]) {\n                    translate([goal_width/2 - 0.5, y, z])\n                        cube([1.2, 6, 6], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Goal support legs\nmodule support_legs() {\n    color(\"white\") {\n        // Front support triangles\n        translate([-goal_width/2 + 5, -goal_depth/2 - 8, 0])\n            rotate([0, 0, 30])\n                rounded_post(10, post_diameter);\n        translate([goal_width/2 - 5, -goal_depth/2 - 8, 0])\n            rotate([0, 0, -30])\n                rounded_post(10, post_diameter);\n        \n        // Back support triangles\n        translate([-goal_width/2 + 5, goal_depth/2 + 8, 0])\n            rotate([0, 0, 150])\n                rounded_post(10, post_diameter);\n        translate([goal_width/2 - 5, goal_depth/2 + 8, 0])\n            rotate([0, 0, -150])\n                rounded_post(10, post_diameter);\n    }\n}\n\n// Main assembly\ngoal_frame();\ntranslate([0, 0, post_diameter/2]) goal_net();\nsupport_legs();",
    "renders": true
  },
  {
    "sports_equipment": "soccer_goal",
    "openscad_code": "// Soccer Goal - 3D Printable Furniture/Sports Equipment\n// Realistic style, medium complexity\n// Overall dimensions: 80mm x 40mm x 30mm\n\n// Parameters\ngoal_width = 80;\ngoal_depth = 40;\ngoal_height = 30;\npost_diameter = 3;\nnet_thickness = 1;\nwall_thickness = 2;\n\n// Main goal frame\nmodule goal_frame() {\n    // Back posts (vertical)\n    translate([-goal_width/2 + post_diameter/2, 0, post_diameter/2])\n        cylinder(h=goal_height, d=post_diameter, $fn=16);\n    translate([goal_width/2 - post_diameter/2, 0, post_diameter/2])\n        cylinder(h=goal_height, d=post_diameter, $fn=16);\n    \n    // Top crossbar\n    translate([0, 0, goal_height - post_diameter/2])\n        rotate([90, 0, 0])\n            cylinder(h=goal_width - post_diameter, d=post_diameter, $fn=16);\n    \n    // Bottom back bar\n    translate([0, 0, post_diameter/2])\n        rotate([90, 0, 0])\n            cylinder(h=goal_width - post_diameter, d=post_diameter, $fn=16);\n    \n    // Side depth bars\n    translate([-goal_width/2 + post_diameter/2, 0, goal_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=goal_depth, d=post_diameter, $fn=16);\n    translate([goal_width/2 - post_diameter/2, 0, goal_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=goal_depth, d=post_diameter, $fn=16);\n    \n    // Bottom side depth bars\n    translate([-goal_width/2 + post_diameter/2, goal_depth/2 - post_diameter/2, post_diameter/2])\n        cylinder(h=post_diameter, d=post_diameter, $fn=16);\n    translate([goal_width/2 - post_diameter/2, goal_depth/2 - post_diameter/2, post_diameter/2])\n        cylinder(h=post_diameter, d=post_diameter, $fn=16);\n}\n\n// Net mesh structure\nmodule goal_net() {\n    // Net frame around opening\n    difference() {\n        // Outer frame\n        translate([0, goal_depth/2 - net_thickness/2, goal_height/2])\n            cube([goal_width - post_diameter*2, net_thickness, goal_height - post_diameter], center=true);\n        \n        // Inner opening\n        translate([0, goal_depth/2 + net_thickness/2, goal_height/2])\n            cube([goal_width - post_diameter*2 - 4, net_thickness*3, goal_height - post_diameter - 4], center=true);\n    }\n    \n    // Net squares pattern\n    for(x = [-goal_width/2 + post_diameter + 4 : 4 : goal_width/2 - post_diameter - 4]) {\n        for(y = [0 : 4 : goal_depth - 8]) {\n            for(z = [post_diameter + 2 : 4 : goal_height - 3]) {\n                translate([x, y, z])\n                    cube([0.5, 0.5, 0.5], center=true);\n            }\n        }\n    }\n    \n    // Back net panel\n    translate([0, goal_depth - net_thickness/2, goal_height/2])\n        cube([goal_width - post_diameter*2, net_thickness, goal_height - post_diameter], center=true);\n}\n\n// Ground support pegs for stability\nmodule support_pegs() {\n    // Front pegs\n    translate([-goal_width/2 + 10, goal_depth/2, -2])\n        cylinder(h=4, d=4, $fn=8);\n    translate([goal_width/2 - 10, goal_depth/2, -2])\n        cylinder(h=4, d=4, $fn=8);\n    \n    // Back pegs\n    translate([-goal_width/2 + 10, -goal_depth/2, -2])\n        cylinder(h=4, d=4, $fn=8);\n    translate([goal_width/2 - 10, -goal_depth/2, -2])\n        cylinder(h=4, d=4, $fn=8);\n}\n\n// Assembly\nunion() {\n    goal_frame();\n    goal_net();\n    support_pegs();\n}",
    "renders": true
  },
  {
    "sports_equipment": "badminton_net",
    "openscad_code": "// Badminton Net Furniture Item - Realistic Style, Medium Complexity\n// 3D printable, ~120mm wide, ~65mm tall\n\n// Net dimensions (mm)\nnet_width = 120;\nnet_height = 45;\npost_height = 65;\npost_width = 8;\nbase_depth = 20;\nbase_height = 5;\nnet_thickness = 2;\n\n// Net cord dimensions\ncord_diameter = 1.5;\ncord_spacing = 3;\n\n// Base module for stability\nmodule base() {\n    // Main base plate\n    difference() {\n        cube([net_width + 20, base_depth, base_height], center=true);\n        \n        // Chamfer edges for printability\n        translate([0, 0, base_height-0.1])\n        cube([net_width + 20 - 4, base_depth - 4, 2], center=true);\n    }\n    \n    // Base supports\n    for(i = [-1, 1]) {\n        translate([i * (net_width/2 - post_width/2), 0, base_height/2])\n        cube([post_width, base_depth - 4, base_height], center=true);\n    }\n}\n\n// Net post with realistic detailing\nmodule post() {\n    // Main post\n    cylinder(h=post_height, r=post_width/2, $fn=16);\n    \n    // Post cap\n    translate([0, 0, post_height])\n    cylinder(h=3, r=post_width/2 + 1, $fn=16);\n    \n    // Reinforcement ring\n    translate([0, 0, base_height])\n    cylinder(h=2, r=post_width/2 + 0.5, $fn=16);\n}\n\n// Net mesh using cords\nmodule net_mesh(width, height) {\n    // Horizontal cords\n    for(y = [0:cord_spacing:height]) {\n        translate([-width/2, -cord_diameter/2, y])\n        cube([width, cord_diameter, cord_diameter], center=false);\n    }\n    \n    // Vertical cords\n    for(x = [0:cord_spacing:width]) {\n        translate([-width/2 + x, -cord_diameter/2, 0])\n        cube([cord_diameter, cord_diameter, height], center=false);\n    }\n    \n    // Top band\n    translate([-width/2, -cord_diameter/2, height])\n    cube([width, cord_diameter * 2, cord_diameter * 2], center=false);\n}\n\n// Net attachment hooks\nmodule hooks() {\n    for(side = [-1, 1]) {\n        // Hook base\n        translate([side * (net_width/2 + 2), 0, post_height - 5])\n        rotate([90, 0, 0])\n        cylinder(h=4, r=2, $fn=8);\n        \n        // Hook tip\n        translate([side * (net_width/2 + 4), 0, post_height - 5])\n        rotate([90, 0, 0])\n        sphere(r=2, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Left post\n    translate([-net_width/2, 0, base_height]) post();\n    \n    // Right post\n    translate([net_width/2, 0, base_height]) post();\n    \n    // Net\n    translate([0, 0, base_height + 15])\n    net_mesh(net_width, net_height);\n    \n    // Hooks for net attachment\n    hooks();\n    \n    // Support arms\n    translate([-net_width/2 - post_width/2, 0, base_height + 10])\n    rotate([0, -30, 0])\n    cube([20, 2, 2], center=true);\n    \n    translate([net_width/2 + post_width/2, 0, base_height + 10])\n    rotate([0, 30, 0])\n    cube([20, 2, 2], center=true);\n}",
    "renders": true
  },
  {
    "sports_equipment": "volleyball_net",
    "openscad_code": "// Volleyball Net Furniture Item\n// Realistic style, medium complexity\n\n// Parameters\n$fn = 36;\nnet_width = 80;\nnet_height = 40;\npost_diameter = 6;\npost_height = 50;\nbase_size = 15;\nbase_height = 5;\nnet_thickness = 2;\nrope_diameter = 1.5;\nnet_square_size = 4;\n\n// Main module\nmodule volleyball_net() {\n    // Left post assembly\n    translate([-net_width/2 - post_diameter/2, 0, 0]) {\n        // Base\n        difference() {\n            cube([base_size, base_size, base_height], center = true);\n            translate([0, 0, -1]) \n                cube([base_size - 4, base_size - 4, base_height + 2], center = true);\n        }\n        \n        // Post\n        translate([0, 0, post_height/2 + base_height/2]) {\n            difference() {\n                cylinder(h = post_height, d = post_diameter);\n                translate([0, 0, -1])\n                    cylinder(h = post_height + 2, d = post_diameter - 4);\n            }\n            \n            // Post cap\n            translate([0, 0, post_height/2 + 2])\n                sphere(d = post_diameter + 2);\n        }\n    }\n    \n    // Right post assembly (mirror of left)\n    translate([net_width/2 + post_diameter/2, 0, 0]) {\n        mirror([1, 0, 0]) {\n            // Base\n            difference() {\n                cube([base_size, base_size, base_height], center = true);\n                translate([0, 0, -1]) \n                    cube([base_size - 4, base_size - 4, base_height + 2], center = true);\n            }\n            \n            // Post\n            translate([0, 0, post_height/2 + base_height/2]) {\n                difference() {\n                    cylinder(h = post_height, d = post_diameter);\n                    translate([0, 0, -1])\n                        cylinder(h = post_height + 2, d = post_diameter - 4);\n                }\n                \n                // Post cap\n                translate([0, 0, post_height/2 + 2])\n                    sphere(d = post_diameter + 2);\n            }\n        }\n    }\n    \n    // Top rope\n    translate([0, 0, base_height + post_height - 2]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = net_width + post_diameter, d = rope_diameter, center = true);\n        }\n    }\n    \n    // Bottom rope\n    translate([0, 0, base_height + 15]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = net_width + post_diameter, d = rope_diameter, center = true);\n        }\n    }\n    \n    // Net mesh\n    translate([0, 0, base_height + (post_height + 15)/2]) {\n        // Vertical net ropes\n        for (x = [-net_width/2 : net_square_size : net_width/2]) {\n            translate([x, 0, 0]) {\n                cube([net_thickness, 2, post_height - 15 - 2]);\n            }\n        }\n        \n        // Horizontal net ropes\n        for (z = [0 : net_square_size : post_height - 15 - 2]) {\n            translate([0, 0, z - (post_height - 15 - 2)/2]) {\n                cube([net_width, 2, net_thickness]);\n            }\n        }\n    }\n    \n    // Side tension ropes\n    translate([-net_width/2 - post_diameter/2, 0, base_height + post_height/2]) {\n        rotate([0, -30, 0]) {\n            cylinder(h = 20, d = rope_diameter);\n        }\n    }\n    \n    translate([net_width/2 + post_diameter/2, 0, base_height + post_height/2]) {\n        rotate([0, 30, 0]) {\n            cylinder(h = 20, d = rope_diameter);\n        }\n    }\n    \n    // Ground anchors\n    translate([-net_width/2 - post_diameter/2 - 10, 0, base_height/2]) {\n        difference() {\n            cube([8, 4, base_height], center = true);\n            translate([0, 0, -1])\n                cube([4, 2, base_height + 2], center = true);\n        }\n    }\n    \n    translate([net_width/2 + post_diameter/2 + 10, 0, base_height/2]) {\n        difference() {\n            cube([8, 4, base_height], center = true);\n            translate([0, 0, -1])\n                cube([4, 2, base_height + 2], center = true);\n        }\n    }\n}\n\n// Render the volleyball net\nvolleyball_net();",
    "renders": true
  },
  {
    "sports_equipment": "climbing_rope",
    "openscad_code": "// Climbing Rope Furniture Item - Wall Mounted Rope Hanger\n// Realistic style, medium complexity\n// Dimensions: 120mm tall x 80mm wide x 60mm deep\n\n$fn = 32;  // Smooth curves for realism\n\n// Overall dimensions\nrope_diameter = 6;\nrope_length = 100;\nbase_width = 80;\nbase_height = 25;\nbase_depth = 15;\nmounting_hole_diameter = 4;\nmounting_hole_offset = 10;\ngrip_ring_height = 8;\ngrip_ring_diameter = 20;\n\nmodule rope_segment(length, diameter, twist_angle) {\n    // Create twisted rope segment using stacked cylinders\n    for(i = [0:2:length]) {\n        translate([0, 0, i])\n            rotate([0, 0, i * twist_angle])\n            cylinder(h = 2, d = diameter, $fn = 12);\n    }\n}\n\nmodule rope_knot(diameter) {\n    // Create figure-8 knot for realistic climbing rope\n    difference() {\n        union() {\n            // Main knot body\n            rotate([0, 90, 0])\n                cylinder(h = diameter * 3, d = diameter * 2.5, $fn = 16);\n            \n            // Crossing loop 1\n            translate([diameter, 0, diameter])\n                rotate([90, 0, 0])\n                cylinder(h = diameter * 3, d = diameter * 2.5, $fn = 16);\n            \n            // Crossing loop 2  \n            translate([-diameter, 0, -diameter])\n                rotate([90, 0, 0])\n                cylinder(h = diameter * 3, d = diameter * 2.5, $fn = 16);\n        }\n        \n        // Hollow center for printability\n        translate([0, 0, 0])\n            sphere(d = diameter * 1.2);\n    }\n}\n\nmodule wall_mount() {\n    // Wall mounting plate with countersunk holes\n    difference() {\n        // Base plate\n        cube([base_width, base_depth, base_height], center = true);\n        \n        // Rounded edges for realism\n        translate([0, -base_depth/2 - 1, 0])\n            cylinder(h = base_height + 2, r = base_depth/2, $fn = 32);\n        translate([0, base_depth/2 + 1, 0])\n            cylinder(h = base_height + 2, r = base_depth/2, $fn = 32);\n        \n        // Mounting holes (4 holes for stability)\n        for(x = [-base_width/2 + mounting_hole_offset, base_width/2 - mounting_hole_offset]) {\n            for(z = [-base_height/2 + 5, base_height/2 - 5]) {\n                translate([x, -base_depth/2 - 1, z])\n                    rotate([0, 90, 0])\n                    cylinder(h = base_depth + 2, d = mounting_hole_diameter, $fn = 16);\n            }\n        }\n        \n        // Rope hole through center\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = base_width + 2, d = rope_diameter + 2, $fn = 16);\n    }\n}\n\nmodule grip_rings() {\n    // Add grip rings along rope for climbing\n    for(pos = [15, 35, 55, 75, 95]) {\n        translate([0, 0, pos])\n            difference() {\n                cylinder(h = grip_ring_height, d = grip_ring_diameter, $fn = 32);\n                cylinder(h = grip_ring_height + 1, d = rope_diameter + 2, $fn = 16);\n            }\n    }\n}\n\n// Main assembly\nunion() {\n    // Wall mount base\n    wall_mount();\n    \n    // Main rope\n    translate([0, base_depth/2 + 5, 0])\n        rope_segment(rope_length, rope_diameter, 15);\n    \n    // Rope knot at bottom\n    translate([0, base_depth/2 + 5, -rope_length/2 - 10])\n        rope_knot(rope_diameter);\n    \n    // Grip rings on rope\n    translate([0, base_depth/2 + 5, rope_length/2])\n        grip_rings();\n    \n    // Reinforcement ring at mount point\n    translate([0, base_depth/2 + 5, 0])\n        difference() {\n            cylinder(h = 10, d = 20, $fn = 32);\n            cylinder(h = 11, d = rope_diameter + 4, $fn = 16);\n        }\n}",
    "renders": true
  },
  {
    "sports_equipment": "carabiner",
    "openscad_code": "// Carabiner furniture piece - functional shelf bracket\n// Overall dimensions: 120mm height, 60mm width, 30mm depth\n\n$fn = 50;\nwall_thickness = 2;\n\n// Main carabiner body module\nmodule carabiner_body() {\n    // Outer frame - D-shape\n    difference() {\n        // Main D-ring\n        union() {\n            // Left straight edge\n            translate([-25, -60, 0])\n                cube([wall_thickness, 120, 30]);\n            \n            // Top curve\n            translate([5, 60, 15])\n                rotate([90, 0, 0])\n                cylinder(h=30, r=30);\n            \n            // Bottom curve\n            translate([5, -60, 15])\n                rotate([90, 0, 0])\n                cylinder(h=30, r=30);\n            \n            // Right curved section\n            translate([35, 0, 15])\n                rotate([90, 0, 0])\n                cylinder(h=30, r=60);\n        }\n        \n        // Inner cutout\n        translate([-23, -58, -1])\n            cube([46, 116, 32]);\n        \n        translate([-10, 50, -1])\n            rotate([90, 0, 0])\n            cylinder(h=32, r=20);\n        \n        translate([-10, -50, -1])\n            rotate([90, 0, 0])\n            cylinder(h=32, r=20);\n        \n        translate([25, 0, -1])\n            rotate([90, 0, 0])\n            cylinder(h=32, r=56);\n    }\n}\n\n// Gate mechanism\nmodule gate() {\n    // Gate arm\n    difference() {\n        // Main gate body\n        union() {\n            translate([-25, 40, 10])\n                rotate([0, 0, -20])\n                cube([wall_thickness, 50, 10]);\n            \n            // Gate tip\n            translate([-25, 40, 10])\n                rotate([0, 0, -20])\n                translate([0, 48, 0])\n                cylinder(h=10, r=wall_thickness);\n        }\n        \n        // Spring cutout\n        translate([-24, 45, 11])\n            rotate([0, 0, -20])\n            cube([wall_thickness+1, 10, 8]);\n    }\n    \n    // Spring detail\n    translate([-24, 42, 15])\n        rotate([90, 0, 0])\n        cylinder(h=5, r=1);\n}\n\n// Mounting plate for furniture use\nmodule mounting_plate() {\n    // Back plate\n    translate([-35, -10, -15])\n        cube([70, 20, wall_thickness]);\n    \n    // Screw holes (4x)\n    for(y = [-5, 5]) {\n        for(x = [-25, 25]) {\n            translate([x, y, -14])\n                cylinder(h=wall_thickness+2, r=2);\n        }\n    }\n}\n\n// Grip texture pattern\nmodule grip_texture() {\n    // Horizontal ridges on straight section\n    for(i = [-55:5:55]) {\n        translate([-25, i, 0])\n            cube([wall_thickness, 3, 30]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    carabiner_body();\n    \n    // Gate\n    gate();\n    \n    // Mounting hardware\n    mounting_plate();\n    \n    // Grip texture on straight edge\n    grip_texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "anchor",
    "openscad_code": "// Anchor-style furniture coat hook / wall-mounted rack\n// Overall size ~120 mm tall, printable in one piece\n\n$fa = 2;\n$fs = 0.5;\n\n// Wall plate\nmodule wall_plate() {\n    difference() {\n        // Main plate 100 x 60 x 4 mm\n        translate([-50, -30, 0])\n            cube([100, 60, 4]);\n        // Two screw holes Ø5 mm\n        translate([-30, 0, -0.1])\n            cylinder(h=4.2, d=5, $fn=20);\n        translate([30, 0, -0.1])\n            cylinder(h=4.2, d=5, $fn=20);\n    }\n}\n\n// Anchor shank (vertical part)\nmodule shank() {\n    translate([0, 0, 4])\n        rotate([0, 90, 0])\n        cylinder(h=60, d1=12, d2=10, $fn=32);\n}\n\n// Crown (curved part at top)\nmodule crown() {\n    translate([0, 0, 4])\n        rotate([0, 90, 0])\n        translate([0, 0, 30])\n        rotate_extrude(angle=180, $fn=64)\n            translate([12, 0, 0])\n                circle(d=8);\n}\n\n// Anchor arms (two identical arms)\nmodule arm(side) {\n    mirror([side, 0, 0]) {\n        // Shoulder\n        translate([10, 0, 4])\n            rotate([90, 0, 0])\n            cylinder(h=25, d=8, $fn=24);\n        // Forearm with slight taper\n        translate([10, 0, 29])\n            rotate([90, 25, 0])\n            cylinder(h=30, d1=8, d2=6, $fn=24);\n    }\n}\n\n// Flukes (hook ends)\nmodule fluke(side) {\n    mirror([side, 0, 0]) {\n        translate([10, 0, 29])\n            rotate([90, 25, 0])\n            translate([0, 0, 30])\n                sphere(d=12, $fn=32);\n        // Cut flat bottom for printability\n        translate([10, 0, 29])\n            rotate([90, 25, 0])\n            translate([0, 0, 30 - 6])\n            cube([20, 20, 12], center=true);\n    }\n}\n\n// Decorative rope detail\nmodule rope_detail() {\n    hull() {\n        translate([-40, -20, 2])\n            cylinder(h=2, d=4, $fn=8);\n        translate([40, -20, 2])\n            cylinder(h=2, d=4, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    wall_plate();\n    shank();\n    crown();\n    arm(1);\n    arm(-1);\n    fluke(1);\n    fluke(-1);\n    rope_detail();\n}",
    "renders": true
  },
  {
    "sports_equipment": "crampons",
    "openscad_code": "// Crampons Furniture Item - Realistic Style, Medium Complexity\n// Dimensions: ~120mm length x 60mm width x 40mm height\n\n// Main plate structure\nmodule main_plate() {\n    difference() {\n        // Base plate with rounded edges\n        union() {\n            translate([-5, 0, 0]) cube([110, 8, 4], center=true);\n            translate([0, 0, 1]) cube([100, 6, 2], center=true);\n        }\n        \n        // Screw holes for mounting\n        for (x = [-40:20:40]) {\n            translate([x, 0, 3]) cylinder(h=3, r=2.5, center=true);\n        }\n    }\n}\n\n// Individual spike module\nmodule spike(height) {\n    difference() {\n        // Main spike cone\n        cylinder(h=height, r1=3, r2=0.5, center=false);\n        \n        // Grip grooves\n        for (i = [1:3]) {\n            translate([0, 0, i * (height/4)]) \n            rotate([0, 0, 45]) \n            cube([4, 0.5, 0.3], center=true);\n        }\n    }\n}\n\n// Front spike array\nmodule front_spikes() {\n    for (x = [-30:10:30]) {\n        translate([x, -25, 2]) spike(15);\n    }\n}\n\n// Rear spike array\nmodule rear_spikes() {\n    for (x = [-20:10:20]) {\n        translate([x, 25, 2]) spike(12);\n    }\n}\n\n// Side support bars\nmodule support_bars() {\n    color(\"silver\") {\n        // Left bar\n        translate([-52, 0, 0]) rotate([0, 90, 0]) \n            cylinder(h=110, r=2, center=true);\n        \n        // Right bar\n        translate([52, 0, 0]) rotate([0, 90, 0]) \n            cylinder(h=110, r=2, center=true);\n    }\n}\n\n// Strap mounts\nmodule strap_mounts() {\n    for (x = [-30:30:30]) {\n        // Front mount\n        translate([x, -20, 8]) rotate([90, 0, 0])\n            difference() {\n                cylinder(h=8, r=3, center=true);\n                cylinder(h=10, r=1.5, center=true);\n            }\n        \n        // Rear mount\n        translate([x, 20, 8]) rotate([90, 0, 0])\n            difference() {\n                cylinder(h=8, r=3, center=true);\n                cylinder(h=10, r=1.5, center=true);\n            }\n    }\n}\n\n// Anti-slip texture\nmodule texture() {\n    for (x = [-45:5:45]) {\n        for (y = [-30:5:30]) {\n            translate([x, y, 2.5]) cube([0.5, 0.5, 0.3], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    main_plate();\n    front_spikes();\n    rear_spikes();\n    \n    // Furniture-specific elements\n    support_bars();\n    strap_mounts();\n    texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "paddle",
    "openscad_code": "// Paddle Furniture Item - Realistic Style\n// Medium complexity 3D printable paddle with furniture-like structural details\n\n$fn = 32;\n\n// Overall dimensions\npaddle_length = 130;\npaddle_width = 40;\nhandle_length = 45;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main paddle module\nmodule paddle() {\n    // Handle with furniture-style joint details\n    handle();\n    \n    // Paddle blade with aerodynamic shaping\n    blade();\n    \n    // Reinforcement ribs\n    ribs();\n    \n    // Grip details\n    grip_texture();\n}\n\n// Handle construction\nmodule handle() {\n    // Main handle tube\n    translate([0, 0, -handle_length/2]) {\n        difference() {\n            // Outer cylinder\n            cylinder(h = handle_length, r = 10, center = true);\n            // Inner hollow\n            cylinder(h = handle_length + 1, r = 10 - wall_thickness, center = true);\n        }\n        \n        // Furniture-style joint collar at top\n        translate([0, 0, handle_length/2 - 3]) {\n            cylinder(h = 6, r = 12, center = true);\n        }\n        \n        // Base cap\n        translate([0, 0, -handle_length/2 + 2]) {\n            cylinder(h = 4, r = 11, center = true);\n        }\n    }\n}\n\n// Paddle blade with structural reinforcement\nmodule blade() {\n    // Main blade shape\n    translate([0, 0, handle_length/2 + paddle_length/2 - handle_length/2]) {\n        difference() {\n            // Outer blade\n            scale([1, 0.6, 1]) {\n                sphere(r = paddle_width/2);\n            }\n            \n            // Hollow interior\n            translate([0, 0, -wall_thickness]) {\n                scale([1 - (wall_thickness*2/paddle_width), \n                       0.6 - (wall_thickness*2/paddle_width), \n                       1 - (wall_thickness*2/paddle_width)]) {\n                    sphere(r = paddle_width/2 - wall_thickness);\n                }\n            }\n        }\n        \n        // Flatten the back\n        translate([0, 0, -paddle_width/4]) {\n            cube([paddle_width, paddle_width, paddle_width/2], center = true);\n        }\n    }\n}\n\n// Structural ribs for furniture-style strength\nmodule ribs() {\n    // Central spine\n    translate([0, 0, 0]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cube([paddle_width - 10, wall_thickness, paddle_length - 20], center = true);\n                cube([paddle_width - 10 - wall_thickness*2, wall_thickness + 0.1, paddle_length - 20 - wall_thickness*2], center = true);\n            }\n        }\n    }\n    \n    // Cross ribs\n    for(i = [0:20:paddle_length - 20]) {\n        translate([0, 0, -paddle_length/2 + 10 + i + handle_length/2]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cube([paddle_width - 10, wall_thickness, 25], center = true);\n                    cube([paddle_width - 10 - wall_thickness*2, wall_thickness + 0.1, 25 - wall_thickness*2], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Grip texture for ergonomic handling\nmodule grip_texture() {\n    // Spiral grip pattern\n    for(angle = [0:30:360]) {\n        rotate([0, 0, angle]) {\n            translate([8.5, 0, -handle_length/2 + 5]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = handle_length - 10, r = 1, center = true);\n                }\n            }\n        }\n    }\n    \n    // Furniture-style end cap detail\n    translate([0, 0, -handle_length/2]) {\n        difference() {\n            cylinder(h = 4, r = 10, center = false);\n            cylinder(h = 5, r = 8, center = false);\n        }\n    }\n}\n\n// Generate the complete paddle\npaddle();",
    "renders": true
  },
  {
    "sports_equipment": "oar",
    "openscad_code": "// Oar Furniture – wall-mounted coat rack shaped like a classic wooden oar\n// Overall length ~180 mm, max width ~28 mm, wall thickness 2 mm\n// Designed for 3D-printing (no supports, 2 mm walls, reasonable facets)\n\n$fn = 50;            // smooth curves\n\n// Parameters\nlength = 180;        // total length\nblade_l = 80;        // blade length\nhandle_l = 60;       // handle length\nshaft_l = length - blade_l - handle_l;\nshaft_d = 12;        // shaft diameter\nblade_max_w = 28;    // blade max width\nblade_t = 2.5;       // blade thickness\ngrip_d = 14;         // handle diameter\nmount_cyl_d = 8;     // wall-mount boss diameter\nmount_cyl_h = 6;\nkeyhole_d = 4;       // keyhole screw clearance\nkeyhole_h = 3;\n\n// Colour for preview\ncolor(\"BurlyWood\") difference() {\n\n    // --- Main oar body (shaft + handle + blade) -----------------------------\n    union() {\n\n        // Shaft\n        translate([0, 0, shaft_l/2])\n            cylinder(d = shaft_d, h = shaft_l, center = true);\n\n        // Handle with gentle taper toward end\n        for (i = [0 : 5 : handle_l]) {\n            h = 5;\n            d = grip_d - i * (grip_d - shaft_d) / handle_l;\n            translate([0, 0, shaft_l + i + h/2])\n                cylinder(d = d, h = h, center = true);\n        }\n\n        // Blade (elliptical outline, constant thickness)\n        translate([0, 0, -blade_l/2])\n            scale([1, blade_max_w / blade_l, 1])\n                rotate([0, 90, 0])\n                    cylinder(d = blade_l, h = blade_t, center = true);\n\n        // Rounded blade tip\n        translate([0, 0, -blade_l - blade_max_w/2])\n            rotate([0, 90, 0])\n                scale([1, blade_max_w / blade_max_w, 1])\n                    sphere(d = blade_max_w);\n    }\n\n    // --- Grip texture – shallow circumferential rings -----------------------\n    for (z = [0 : 6 : handle_l-6]) {\n        translate([0, 0, shaft_l + z + 3])\n            cylinder(d = grip_d + 1, h = 1.5, center = true);\n    }\n\n    // --- Wall-mount boss (keyhole style) ------------------------------------\n    translate([0, 0, shaft_l/2 + shaft_d/2 + mount_cyl_h/2])\n        cylinder(d = mount_cyl_d, h = mount_cyl_h, center = true);\n\n    // Keyhole slot\n    translate([0, -mount_cyl_d/4, shaft_l/2 + shaft_d/2 + mount_cyl_h - keyhole_h/2])\n        cube([mount_cyl_d/2, keyhole_d, keyhole_h], center = true);\n}",
    "renders": true
  },
  {
    "sports_equipment": "kayak_paddle",
    "openscad_code": "// Kayak Paddle Furniture Item - Medium Complexity Realistic Style\n// Overall dimensions: ~120mm long, 25mm wide, 8mm thick\n\n// Parameters\nshaft_diameter = 6;\nshaft_length = 100;\nblade_width = 25;\nblade_length = 20;\nblade_thickness = 2;\ngrip_length = 15;\ngrip_diameter = 8;\n\n// Main paddle module\nmodule kayak_paddle() {\n    // Central shaft\n    rotate([0, 90, 0]) {\n        difference() {\n            cylinder(h=shaft_length, d=shaft_diameter, $fn=32);\n            // Hollow shaft for 3D printing\n            cylinder(h=shaft_length+1, d=shaft_diameter-4, $fn=32);\n        }\n    }\n    \n    // Left blade\n    translate([-shaft_length/2 - blade_length/2, 0, 0]) {\n        rotate([0, 90, 0]) {\n            paddle_blade();\n        }\n    }\n    \n    // Right blade\n    translate([shaft_length/2 + blade_length/2, 0, 0]) {\n        rotate([0, -90, 0]) {\n            paddle_blade();\n        }\n    }\n    \n    // Left grip\n    translate([-shaft_length/2 + grip_length/2, 0, 0]) {\n        rotate([0, 90, 0]) {\n            grip_section();\n        }\n    }\n    \n    // Right grip\n    translate([shaft_length/2 - grip_length/2, 0, 0]) {\n        rotate([0, 90, 0]) {\n            grip_section();\n        }\n    }\n}\n\n// Paddle blade module\nmodule paddle_blade() {\n    difference() {\n        // Main blade shape\n        scale([1, 1, 0.3]) {\n            sphere(d=blade_width, $fn=64);\n        }\n        \n        // Hollow interior\n        scale([0.7, 0.7, 0.8]) {\n            sphere(d=blade_width-4, $fn=64);\n            translate([0, blade_length/2, 0]) {\n                cube([blade_width-4, blade_length, blade_thickness*2], center=true);\n            }\n        }\n        \n        // Cut flat back\n        translate([0, -blade_width/2, 0]) {\n            cube([blade_width+2, blade_width/2, blade_thickness*2], center=true);\n        }\n        \n        // Drain holes\n        for(i = [-1:1]) {\n            translate([i*6, 0, 0]) {\n                cylinder(h=blade_thickness+2, d=2, $fn=16);\n            }\n        }\n    }\n}\n\n// Grip section with texture\nmodule grip_section() {\n    difference() {\n        // Main grip body\n        cylinder(h=grip_length, d=grip_diameter, $fn=32);\n        \n        // Hollow grip\n        cylinder(h=grip_length+1, d=grip_diameter-4, $fn=32);\n        \n        // Grip texture rings\n        for(i = [0:2:grip_length-2]) {\n            translate([0, 0, i]) {\n                difference() {\n                    cylinder(h=1, d=grip_diameter+1, $fn=32);\n                    cylinder(h=1.1, d=grip_diameter-1, $fn=32);\n                }\n            }\n        }\n    }\n}\n\n// Render the paddle\nkayak_paddle();",
    "renders": true
  },
  {
    "sports_equipment": "canoe_paddle",
    "openscad_code": "// Canoe Paddle Furniture Item\n// Realistic style with medium complexity\n\n$fn = 32;  // Higher resolution for realistic appearance\n\n// Overall dimensions (mm)\npaddle_length = 120;\npaddle_width = 20;\npaddle_thickness = 4;\n\n// Shaft parameters\nshaft_length = 80;\nshaft_diameter = 8;\n\n// Blade parameters\nblade_length = 40;\nblade_width = 18;\nblade_thickness = 2.5;\n\n// Grip parameters\ngrip_length = 15;\ngrip_diameter = 12;\n\nmodule paddle_blade() {\n    // Main blade body\n    difference() {\n        // Tapered blade shape\n        linear_extrude(height = blade_thickness, scale = [0.7, 1])\n            polygon(points=[\n                [0, -blade_width/2],\n                [blade_length, -blade_width/4],\n                [blade_length, blade_width/4],\n                [0, blade_width/2]\n            ]);\n        \n        // Central ridge detail\n        translate([blade_length/2, 0, -0.1])\n            cube([blade_length/2, 1, blade_thickness + 0.2], center = true);\n        \n        // Flow grooves (aesthetic)\n        for(i = [-1:1]) {\n            translate([blade_length * 0.3, i * 3, -0.1])\n                cube([20, 1, blade_thickness + 0.2]);\n        }\n    }\n}\n\nmodule paddle_shaft() {\n    // Main shaft\n    cylinder(h = shaft_length, d = shaft_diameter, center = true);\n    \n    // Reinforcement rings\n    for(pos = [0, shaft_length/3, 2*shaft_length/3]) {\n        translate([0, 0, -shaft_length/2 + pos])\n            cylinder(h = 2, d = shaft_diameter + 2, center = true);\n    }\n}\n\nmodule paddle_grip() {\n    // T-grip handle\n    union() {\n        // Main grip cylinder\n        translate([0, 0, shaft_length/2 + grip_length/2])\n            cylinder(h = grip_length, d = grip_diameter, center = true);\n        \n        // Cross bar\n        translate([0, 0, shaft_length/2 + grip_length])\n            rotate([90, 0, 0])\n                cylinder(h = grip_diameter * 1.5, d = grip_diameter, center = true);\n        \n        // Grip texture rings\n        for(i = [1:3]) {\n            translate([0, 0, shaft_length/2 + i * 3.5])\n                difference() {\n                    cylinder(h = 2, d = grip_diameter + 1, center = true);\n                    cylinder(h = 2.2, d = grip_diameter - 1, center = true);\n                }\n        }\n    }\n}\n\n// Assemble the paddle\nunion() {\n    // Shaft\n    translate([0, 0, -paddle_length/2 + shaft_length/2])\n        paddle_shaft();\n    \n    // Blade\n    translate([0, 0, -paddle_length/2])\n        paddle_blade();\n    \n    // Grip\n    paddle_grip();\n}\n\n// Structural reinforcement\ntranslate([0, 0, -paddle_length/2 + 5])\n    difference() {\n        cylinder(h = 10, d = shaft_diameter + 4, center = true);\n        cylinder(h = 10.2, d = shaft_diameter, center = true);\n    }\n\n// Add subtle fillet at blade-shaft junction\ntranslate([0, 0, -paddle_length/2 + blade_thickness/2])\n    cylinder(h = blade_thickness, d1 = shaft_diameter, d2 = blade_width/2, center = true);",
    "renders": true
  },
  {
    "sports_equipment": "surfboard",
    "openscad_code": "// Surfboard Wall-Mounted Shelf\n// A decorative furniture piece combining surfboard aesthetics with functional shelving\n\nmodule surfboard_shelf() {\n    // Main surfboard body - realistic proportions\n    difference() {\n        // Tapered oval shape\n        scale([1, 0.65, 0.08])\n        sphere(r=50, $fn=60);\n        \n        // Cut bottom flat\n        translate([0, 0, -4])\n        cube([200, 200, 8], center=true);\n    }\n    \n    // Front curve refinement\n    translate([0, -35, 3])\n    scale([1, 0.3, 0.15])\n    sphere(r=45, $fn=40);\n    \n    // Tail fin details (decorative)\n    translate([-45, 0, 0])\n    rotate([0, 0, 5])\n    scale([0.8, 0.4, 0.05])\n    cylinder(h=15, r1=8, r2=12);\n    \n    translate([-45, 10, 0])\n    rotate([0, 0, -5])\n    scale([0.8, 0.4, 0.05])\n    cylinder(h=15, r1=8, r2=12);\n}\n\nmodule shelf_support() {\n    // Wall mounting bracket\n    translate([0, 0, -2])\n    difference() {\n        // Main bracket\n        cube([6, 35, 8], center=true);\n        \n        // Screw holes\n        for(i = [-12, 12]) {\n            translate([0, i, -1])\n            cylinder(h=10, r=2.5, $fn=16);\n        }\n    }\n    \n    // Reinforcement ribs\n    for(pos = [-1, 1]) {\n        translate([pos * 2, 0, 2])\n        cube([1.5, 35, 4], center=true);\n    }\n}\n\nmodule grip_pattern() {\n    // Diamond grip texture along top surface\n    for(x = [-35:10:35]) {\n        for(y = [-25:10:25]) {\n            translate([x, y, 4.2])\n            rotate([0, 0, 45])\n            scale([0.8, 0.8, 1])\n            cube([4, 4, 0.5], center=true);\n        }\n    }\n}\n\nmodule stringer_detail() {\n    // Central stringer (wood grain effect)\n    translate([0, 0, 2])\n    color(\"tan\")\n    cube([2, 65, 0.5], center=true);\n    \n    // Decorative pin lines\n    translate([0, 0, 2.1])\n    color(\"white\")\n    cube([1, 65, 0.2], center=true);\n}\n\n// Assembly\nunion() {\n    // Main surfboard body\n    surfboard_shelf();\n    \n    // Shelf surface details\n    grip_pattern();\n    \n    // Structural stringer\n    stringer_detail();\n    \n    // Wall mounting support\n    translate([0, 0, -6])\n    shelf_support();\n}\n\n// Scale to realistic 3D printable size\nscale(0.6) children();",
    "renders": true
  },
  {
    "sports_equipment": "wakeboard",
    "openscad_code": "// Wakeboard Furniture Item - Medium Complexity OpenSCAD Model\n// Realistic style with 3D printable features\n\n// Overall dimensions in mm\nboard_length = 120;\nboard_width = 35;\nboard_thickness = 4;\n\n// Base wakeboard shape\nmodule wakeboard_base() {\n    // Main board with curved ends\n    difference() {\n        // Center board\n        hull() {\n            cube([board_length, board_width, board_thickness], center=true);\n        }\n        \n        // Tapered ends\n        translate([board_length/2 - 5, 0, -board_thickness/2 - 0.1])\n            cube([10, board_width - 10, board_thickness + 0.2], center=true);\n        translate([-board_length/2 + 5, 0, -board_thickness/2 - 0.1])\n            cube([10, board_width - 10, board_thickness + 0.2], center=true);\n    }\n    \n    // Rounded edges\n    translate([board_length/2 - 5, 0, 0])\n        scale([1, 0.7, 1])\n        sphere(d=board_width, $fn=20);\n    translate([-board_length/2 + 5, 0, 0])\n        scale([1, 0.7, 1])\n        sphere(d=board_width, $fn=20);\n}\n\n// Grip pattern on top surface\nmodule grip_pattern() {\n    // Diamond pattern\n    for (x = [-50:10:50]) {\n        for (y = [-15:5:15]) {\n            if ((x + y) % 10 == 0) {\n                translate([x, y, board_thickness/2 - 0.1])\n                    cube([3, 3, 0.2], center=true);\n            }\n        }\n    }\n}\n\n// Binding mounts\nmodule binding_mounts() {\n    // Front binding mount\n    translate([20, 0, 0])\n        cylinder(h=2, d1=12, d2=8, $fn=16);\n    \n    // Rear binding mount\n    translate([-20, 0, 0])\n        cylinder(h=2, d1=12, d2=8, $fn=16);\n    \n    // Mount holes\n    for (angle = [0:120:240]) {\n        rotate([0, 0, angle])\n        translate([20, 0, -0.1])\n            cylinder(h=2.2, d=3, $fn=8);\n        \n        rotate([0, 0, angle])\n        translate([-20, 0, -0.1])\n            cylinder(h=2.2, d=3, $fn=8);\n    }\n}\n\n// Fins underneath\nmodule fins() {\n    // Center fin\n    translate([0, 0, -board_thickness/2 - 3])\n        cube([20, 2, 3], center=true);\n    \n    // Side fins\n    translate([30, board_width/2 - 5, -board_thickness/2 - 2])\n        rotate([0, 0, 15])\n        cube([15, 1.5, 2], center=false);\n    \n    translate([30, -board_width/2 + 5, -board_thickness/2 - 2])\n        rotate([0, 0, -15])\n        cube([15, 1.5, 2], center=false);\n    \n    translate([-30, board_width/2 - 5, -board_thickness/2 - 2])\n        rotate([0, 0, -15])\n        cube([15, 1.5, 2], center=false);\n    \n    translate([-30, -board_width/2 + 5, -board_thickness/2 - 2])\n        rotate([0, 0, 15])\n        cube([15, 1.5, 2], center=false);\n}\n\n// Structural reinforcement ribs\nmodule ribs() {\n    // Main support ribs\n    difference() {\n        // Rib structure\n        translate([0, 0, 0])\n            cube([board_length - 20, board_width - 10, 2], center=true);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, -0.1])\n            cube([board_length - 30, board_width - 20, 2.2], center=true);\n    }\n}\n\n// Furniture legs/wall mount brackets\nmodule brackets() {\n    // Wall mount bracket - front\n    translate([board_length/2 - 10, 0, -board_thickness/2 - 5])\n        cube([20, 8, 5], center=true);\n    \n    // Wall mount bracket - rear\n    translate([-board_length/2 + 10, 0, -board_thickness/2 - 5])\n        cube([20, 8, 5], center=true);\n    \n    // Mounting holes\n    translate([board_length/2 - 15, 0, -board_thickness/2 - 2.5])\n        cylinder(h=6, d=3, $fn=8);\n    translate([board_length/2 - 5, 0, -board_thickness/2 - 2.5])\n        cylinder(h=6, d=3, $fn=8);\n    \n    translate([-board_length/2 + 15, 0, -board_thickness/2 - 2.5])\n        cylinder(h=6, d=3, $fn=8);\n    translate([-board_length/2 + 5, 0, -board_thickness/2 - 2.5])\n        cylinder(h=6, d=3, $fn=8);\n}\n\n// Main assembly\nunion() {\n    // Base wakeboard shape\n    wakeboard_base();\n    \n    // Grip pattern on top\n    grip_pattern();\n    \n    // Binding mounts\n    binding_mounts();\n    \n    // Fins underneath\n    fins();\n    \n    // Internal structure\n    ribs();\n    \n    // Mounting brackets\n    brackets();\n}",
    "renders": true
  },
  {
    "sports_equipment": "bodyboard",
    "openscad_code": "// Bodyboard Furniture Item - Medium Complexity\n// Realistic style with furniture characteristics\n\n// Bodyboard dimensions (scaled for furniture use)\nboard_length = 120;\nboard_width = 48;\nboard_thickness = 8;\nnose_radius = 15;\ntail_width = 35;\n\n// Structural elements\nleg_height = 60;\nleg_diameter = 6;\nframe_thickness = 3;\nshelf_clearance = 25;\n\n// Materials\nwall_thickness = 2;\n\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(dx = [0, size.x - radius*2])\n            for(dy = [0, size.y - radius*2])\n                for(dz = [0, size.z - radius*2])\n                    translate([dx + radius, dy + radius, dz + radius])\n                        sphere(r=radius);\n    }\n}\n\nmodule bodyboard_shape() {\n    difference() {\n        // Main board shape with rounded edges\n        hull() {\n            // Nose - rounded front\n            translate([board_length - nose_radius, board_width/2, board_thickness/2])\n                sphere(r=nose_radius);\n            translate([board_length - nose_radius, -board_width/2, board_thickness/2])\n                sphere(r=nose_radius);\n            \n            // Tail - tapered back\n            translate([0, tail_width/2, board_thickness/2])\n                sphere(r=tail_width/2);\n            translate([0, -tail_width/2, board_thickness/2])\n                sphere(r=tail_width/2);\n            \n            // Mid section\n            translate([board_length/2, board_width/2, board_thickness/2])\n                sphere(r=2);\n            translate([board_length/2, -board_width/2, board_thickness/2])\n                sphere(r=2);\n        }\n        \n        // Hollow out interior for 3D printing\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            scale([(board_length - 2*wall_thickness)/board_length,\n                   (board_width - 2*wall_thickness)/board_width,\n                   (board_thickness - wall_thickness)/board_thickness])\n                bodyboard_solid();\n    }\n}\n\nmodule bodyboard_solid() {\n    hull() {\n        translate([board_length - nose_radius, board_width/2, board_thickness/2])\n            sphere(r=nose_radius);\n        translate([board_length - nose_radius, -board_width/2, board_thickness/2])\n            sphere(r=nose_radius);\n        translate([0, tail_width/2, board_thickness/2])\n            sphere(r=tail_width/2);\n        translate([0, -tail_width/2, board_thickness/2])\n            sphere(r=tail_width/2);\n    }\n}\n\nmodule grip_pattern() {\n    // Diamond pattern grip on top surface\n    for(x = [10:10:board_length - 20]) {\n        for(y = [-board_width/2 + 5:5:board_width/2 - 5]) {\n            translate([x, y, board_thickness - 0.5]) {\n                rotate([0, 0, 45])\n                    cube([3, 3, 1], center=true);\n            }\n        }\n    }\n}\n\nmodule furniture_frame() {\n    // Four legs with stretchers\n    for(x = [10, board_length - 20]) {\n        for(y = [board_width/2 - 10, -board_width/2 + 10]) {\n            // Leg\n            translate([x, y, -leg_height/2])\n                cylinder(h=leg_height, d=leg_diameter, center=true);\n        }\n    }\n    \n    // Lower shelf frame\n    translate([board_length/2, 0, -leg_height + frame_thickness]) {\n        cube([board_length - 20, board_width - 20, frame_thickness], center=true);\n    }\n    \n    // Side stretchers\n    for(side = [-1, 1]) {\n        translate([board_length/2, side * (board_width/2 - 5), -leg_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=board_width - 20, d=frame_thickness, center=true);\n    }\n    \n    // Front/back stretchers\n    for(end = [0, board_length]) {\n        translate([end - 10, 0, -leg_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=board_length - 20, d=frame_thickness, center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Bodyboard as table top\n    translate([0, 0, leg_height + board_thickness/2]) {\n        bodyboard_shape();\n        \n        // Add grip pattern on top\n        difference() {\n            bodyboard_shape();\n            translate([0, 0, -0.1])\n                bodyboard_shape();\n        }\n        grip_pattern();\n    }\n    \n    // Furniture frame\n    furniture_frame();\n    \n    // Support ribs under board\n    for(i = [1:3]) {\n        translate([i * board_length/4, 0, leg_height + board_thickness/2 - 2])\n            rotate([90, 0, 0])\n                cylinder(h=board_width - 10, d=4, center=true);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "sail",
    "openscad_code": "// Sail Furniture - Wall-mounted coat rack inspired by sailing\n// Overall dimensions: 120mm wide x 100mm tall x 45mm deep\n\n// Wall mounting base\nmodule wall_base() {\n    difference() {\n        // Main base plate\n        translate([-60, -2, -30])\n            cube([120, 4, 60]);\n        \n        // Screw holes (4x)\n        for(x = [-40, 40])\n            for(z = [-15, 15])\n                translate([x, -1, z])\n                    cylinder(h=5, r=2.5, $fn=16);\n    }\n}\n\n// Main sail shape with structural reinforcement\nmodule sail_body() {\n    difference() {\n        // Main sail shape (triangular with rounded bottom corners)\n        translate([0, 0, 30])\n            linear_extrude(height=2)\n                polygon(points=[\n                    [-50, -28],    // bottom left\n                    [0, 40],       // top center\n                    [50, -28],     // bottom right\n                    [45, -28],     // rounded corner\n                    [40, -25],\n                    [30, -25],\n                    [20, -26],\n                    [10, -27],\n                    [0, -27.5],\n                    [-10, -27],\n                    [-20, -26],\n                    [-30, -25],\n                    [-40, -25],\n                    [-45, -28]\n                ]);\n        \n        // Decorative cutout pattern (wind lines)\n        for(i = [-30:15:30])\n            translate([i, 0, 31])\n                rotate([0, 0, 45])\n                    cube([15, 1.5, 3]);\n    }\n}\n\n// Mast structure (functional coat hooks)\nmodule mast() {\n    // Vertical mast\n    translate([0, 2, 30])\n        rotate([90, 0, 0])\n            cylinder(h=70, r=2.5, $fn=16);\n    \n    // Boom (horizontal bar)\n    translate([0, 4, 0])\n        rotate([0, 90, 0])\n            cylinder(h=100, r=2.5, $fn=16);\n    \n    // Hook details on boom\n    for(x = [-35:15:35])\n        translate([x, 4, 0])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=12, r=2, $fn=12);\n                    translate([1, 0, -6])\n                        cube([10, 4, 12]);\n                }\n}\n\n// Reinforcement ribs for sail stability\nmodule sail_ribs() {\n    // Vertical rib\n    translate([0, -1, 30])\n        cube([2, 2, 58]);\n    \n    // Horizontal ribs\n    for(z = [0:15:45])\n        translate([-45, -1, z])\n            cube([90, 2, 2]);\n}\n\n// Rope detail (decorative)\nmodule rope_detail() {\n    color(\"brown\")\n    hull() {\n        translate([-45, 2, 30])\n            sphere(r=1.5, $fn=8);\n        translate([0, 2, 68])\n            sphere(r=1.5, $fn=8);\n        translate([45, 2, 30])\n            sphere(r=1.5, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    wall_base();\n    sail_body();\n    mast();\n    sail_ribs();\n    rope_detail();\n}",
    "renders": true
  },
  {
    "sports_equipment": "parachute",
    "openscad_code": "// Parachute Furniture Item - Realistic Medium Complexity\n// Inspired by parachute canopy and harness system\n\n// Parameters\ncanopy_diameter = 80;           // Main canopy width\ncanopy_height = 25;             // Canopy depth\nripstop_spacing = 4;            // Spacing between ripstop seams\nwebbing_width = 3;              // Webbing thickness\nconnector_size = 5;             // Connector dimensions\nmount_base = 15;                // Furniture mounting base diameter\n\n// Main canopy module with ripstop pattern\nmodule parachute_canopy() {\n    // Outer canopy shell\n    difference() {\n        // Main canopy dome\n        scale([1, 1, 0.4])\n        sphere(d=canopy_diameter, $fn=64);\n        \n        // Hollow out interior\n        scale([0.96, 0.96, 0.38])\n        sphere(d=canopy_diameter, $fn=64);\n    }\n    \n    // Ripstop seam pattern\n    for (i = [0:30:360]) {\n        rotate([0, 0, i])\n        translate([0, 0, -canopy_height/2])\n        linear_extrude(height=canopy_height+2, center=true)\n        square([0.5, canopy_diameter/2], center=true);\n    }\n    \n    // Radial support seams\n    for (i = [15:30:375]) {\n        rotate([0, 0, i])\n        translate([0, 0, -canopy_height/2])\n        linear_extrude(height=canopy_height+2, center=true)\n        square([0.5, canopy_diameter/2], center=true);\n    }\n}\n\n// Webbing straps module\nmodule webbing_straps() {\n    // Main lift web\n    for (i = [0:90:270]) {\n        rotate([0, 0, i])\n        translate([0, canopy_diameter/2 - webbing_width, -canopy_height/2])\n        cube([webbing_width, canopy_diameter/2, webbing_width*2], center=true);\n    }\n    \n    // Cross connector straps\n    rotate([90, 0, 0])\n    translate([0, 0, -canopy_height/2 - 10])\n    cylinder(h=20, d=webbing_width*1.5, $fn=16);\n}\n\n// Connector hardware\nmodule connectors() {\n    // Four-way connector hub\n    translate([0, 0, -canopy_height/2 - 15])\n    cylinder(h=connector_size, d=connector_size*2, $fn=16);\n    \n    // Attachment points\n    for (i = [0:90:270]) {\n        rotate([0, 0, i])\n        translate([0, canopy_diameter/4, -canopy_height/2 - 15])\n        cylinder(h=connector_size, d=connector_size, $fn=8);\n    }\n}\n\n// Furniture mounting base\nmodule mounting_base() {\n    // Base plate\n    translate([0, 0, -canopy_height/2 - 25])\n    cylinder(h=4, d=mount_base, $fn=32);\n    \n    // Mounting holes\n    for (i = [0:120:240]) {\n        rotate([0, 0, i])\n        translate([mount_base/2 - 4, 0, -canopy_height/2 - 24])\n        cylinder(h=6, d=2.2, $fn=12);\n    }\n    \n    // Support ribs\n    for (i = [0:60:300]) {\n        rotate([0, 0, i])\n        translate([mount_base/3, 0, -canopy_height/2 - 23])\n        cube([mount_base/3, 2, 2], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    parachute_canopy();\n    webbing_straps();\n    connectors();\n    mounting_base();\n}",
    "renders": true
  },
  {
    "sports_equipment": "wetsuit",
    "openscad_code": "// Wetsuit Chair - OpenSCAD\n// A realistic wetsuit-inspired lounge chair with neoprene texture and surfboard elements\n\n$fn = 32;\n\n// Main dimensions\nchair_length = 120;\nchair_width = 55;\nchair_height = 70;\nwall_thickness = 2;\n\nmodule wetsuit_texture(base_width, base_length) {\n    // Generate neoprene-like hexagonal pattern\n    hex_size = 3;\n    hex_height = 1;\n    for (x = [-base_width/2 + hex_size : hex_size*2 : base_width/2 - hex_size]) {\n        for (y = [-base_length/2 + hex_size : hex_size*1.7 : base_length/2 - hex_size]) {\n            translate([x + (y % (hex_size*3.4) == 0 ? hex_size : 0), y, 0]) {\n                cylinder(h=hex_height, r1=hex_size, r2=hex_size*0.9);\n            }\n        }\n    }\n}\n\nmodule chair_base() {\n    difference() {\n        // Main seat body - wetsuit torso shape\n        hull() {\n            translate([-chair_width/2, -chair_length/3, 0])\n                cube([chair_width, chair_length*2/3, chair_height/3]);\n            translate([-chair_width/2 + 5, -chair_length/2, chair_height/2])\n                cube([chair_width - 10, chair_length, chair_height/3]);\n        }\n        \n        // Remove interior for hollow printing\n        translate([0, 0, wall_thickness])\n            scale([0.9, 0.9, 0.9])\n            hull() {\n                translate([-chair_width/2, -chair_length/3, 0])\n                    cube([chair_width, chair_length*2/3, chair_height/3]);\n                translate([-chair_width/2 + 5, -chair_length/2, chair_height/2])\n                    cube([chair_width - 10, chair_length, chair_height/3]);\n            }\n    }\n}\n\nmodule backrest() {\n    // Curved backrest like wetsuit upper body\n    difference() {\n        rotate([5, 0, 0])\n            translate([0, -chair_length/2 + 5, chair_height/2])\n                scale([1, 1.2, 0.8])\n                    cylinder(h=chair_height/2, r1=chair_width/2, r2=chair_width/2.2);\n        \n        // Hollow interior\n        rotate([5, 0, 0])\n            translate([0, -chair_length/2 + 5, chair_height/2 + wall_thickness])\n                scale([0.85, 1.1, 0.7])\n                    cylinder(h=chair_height/2 - wall_thickness, r1=chair_width/2 - wall_thickness, r2=chair_width/2.2 - wall_thickness);\n    }\n}\n\nmodule armrests() {\n    // Wetsuit sleeve-inspired armrests\n    for(side = [-1, 1]) {\n        translate([side * (chair_width/2 - 5), 0, chair_height/2]) {\n            rotate([0, -20 * side, 0])\n                difference() {\n                    hull() {\n                        cylinder(h=30, r1=8, r2=6);\n                        translate([0, 15, -5])\n                            sphere(6);\n                    }\n                    cylinder(h=30, r1=6, r2=4);\n                }\n        }\n    }\n}\n\nmodule legs() {\n    // Surfboard fin-inspired legs\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (chair_width/2 - 15), y * (chair_length/3 - 10), 0]) {\n                difference() {\n                    // Main leg\n                    linear_extrude(height=20)\n                        polygon(points=[[-5,0],[5,0],[3,20],[-3,20]]);\n                    \n                    // Hollow interior\n                    translate([0, 0, wall_thickness])\n                        linear_extrude(height=20 - wall_thickness*2)\n                            polygon(points=[[-3,0],[3,0],[2,18],[-2,18]]);\n                }\n            }\n        }\n    }\n}\n\nmodule zipper_detail() {\n    // Central zipper like on wetsuit\n    translate([0, -chair_length/2 + 10, chair_height/2 + 5]) {\n        for(i = [0:5:chair_length/2]) {\n            translate([0, i, 0])\n                cylinder(h=2, r=2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main chair structure\n    chair_base();\n    backrest();\n    armrests();\n    legs();\n    \n    // Surface details\n    translate([0, 0, chair_height/3 + 1]) {\n        wetsuit_texture(chair_width - 10, chair_length - 20);\n    }\n    \n    // Wetsuit zipper detail\n    zipper_detail();\n    \n    // Side panels with stitch marks\n    for(side = [-1, 1]) {\n        translate([side * (chair_width/2 - wall_thickness), 0, chair_height/4]) {\n            for(i = [-chair_length/3:5:chair_length/3]) {\n                translate([0, i, 0])\n                    cube([wall_thickness, 2, 2]);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "life_jacket",
    "openscad_code": "// Life Jacket Furniture - Realistic Medium Complexity\n// Dimensions: 120mm x 100mm x 40mm\n\nmodule body_shell() {\n    // Main buoyant body - orange floatation material\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-50, -45, 0]) cylinder(h=35, d1=20, d2=25, $fn=20);\n            translate([50, -45, 0]) cylinder(h=35, d1=20, d2=25, $fn=20);\n            translate([-50, 45, 0]) cylinder(h=35, d1=20, d2=25, $fn=20);\n            translate([50, 45, 0]) cylinder(h=35, d1=20, d2=25, $fn=20);\n        }\n        \n        // Hollow center for wall thickness\n        scale([0.9, 0.85, 0.9]) {\n            hull() {\n                translate([-50, -45, 2]) cylinder(h=35, d1=20, d2=25, $fn=20);\n                translate([50, -45, 2]) cylinder(h=35, d1=20, d2=25, $fn=20);\n                translate([-50, 45, 2]) cylinder(h=35, d1=20, d2=25, $fn=20);\n                translate([50, 45, 2]) cylinder(h=35, d1=20, d2=25, $fn=20);\n            }\n        }\n    }\n}\n\nmodule shoulder_straps() {\n    // Left shoulder strap\n    translate([-30, -30, 15]) {\n        rotate([0, 15, 0]) \n            cube([8, 60, 3], center=true);\n    }\n    \n    // Right shoulder strap\n    translate([30, -30, 15]) {\n        rotate([0, -15, 0]) \n            cube([8, 60, 3], center=true);\n    }\n}\n\nmodule waist_belt() {\n    // Main belt around waist\n    translate([0, 30, 15]) \n        cube([100, 6, 3], center=true);\n    \n    // Belt buckle\n    translate([0, 40, 15]) {\n        difference() {\n            cube([15, 8, 4], center=true);\n            cube([10, 6, 5], center=true);\n        }\n    }\n}\n\nmodule reflective_strips() {\n    // Front reflective strips\n    for(i = [-20, 0, 20]) {\n        translate([i, 0, 35]) {\n            color(\"silver\") \n                cube([2, 80, 0.5], center=true);\n        }\n    }\n}\n\nmodule head_support() {\n    // Curved head/neck support\n    translate([0, -50, 25]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=60, d=40, $fn=30);\n                translate([0, 0, -5]) \n                    cylinder(h=70, d=35, $fn=30);\n                translate([0, 0, 30]) \n                    cube([100, 100, 60], center=true);\n            }\n        }\n    }\n}\n\nmodule side_buckles() {\n    // Left side buckle\n    translate([-55, 0, 15]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h=10, d=8, $fn=16);\n                cylinder(h=12, d=4, $fn=16);\n            }\n        }\n    }\n    \n    // Right side buckle\n    translate([55, 0, 15]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h=10, d=8, $fn=16);\n                cylinder(h=12, d=4, $fn=16);\n            }\n        }\n    }\n}\n\nmodule grip_texture() {\n    // Textured grip pattern on sides\n    for(y = [-30:10:30]) {\n        for(z = [5:5:30]) {\n            translate([-50, y, z]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=2, d=3, $fn=8);\n                }\n            }\n            translate([50, y, z]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=2, d=3, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Orange life jacket body\n    color(\"orange\") body_shell();\n    \n    // Black straps and belts\n    color(\"black\") {\n        shoulder_straps();\n        waist_belt();\n        side_buckles();\n    }\n    \n    // Safety features\n    reflective_strips();\n    head_support();\n    \n    // Functional details\n    grip_texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "scuba_tank",
    "openscad_code": "// Scuba Tank Furniture - OpenSCAD Code\n// Medium complexity realistic scuba tank design\n// Overall height: 120mm, suitable for 3D printing\n\nmodule tank_body() {\n    // Main tank cylinder - 2mm wall thickness\n    difference() {\n        cylinder(h=90, d=60, $fn=100);\n        translate([0, 0, 2]) cylinder(h=86, d=56, $fn=100);\n    }\n    \n    // Tank bottom - rounded cap\n    translate([0, 0, -5]) scale([1, 1, 0.3]) sphere(d=60, $fn=100);\n    translate([0, 0, -5]) scale([1, 1, 0.3]) sphere(d=56, $fn=100);\n}\n\nmodule valve_assembly() {\n    // Valve base\n    cylinder(h=8, d=30, $fn=40);\n    \n    // Valve body\n    translate([0, 0, 8]) cylinder(h=15, d=20, $fn=30);\n    \n    // Valve handle\n    translate([0, 0, 23]) rotate([0, 90, 0]) cylinder(h=25, d=6, $fn=20);\n    translate([0, 0, 23]) rotate([90, 0, 0]) cylinder(h=25, d=6, $fn=20);\n    \n    // Pressure gauge\n    translate([15, 0, 15]) sphere(d=8, $fn=20);\n    translate([15, 0, 15]) cylinder(h=3, d=8, $fn=20);\n}\n\nmodule tank_boot() {\n    // Protective rubber boot at bottom\n    translate([0, 0, -8]) cylinder(h=8, d=65, $fn=60);\n    difference() {\n        translate([0, 0, -8]) cylinder(h=8, d=65, $fn=60);\n        translate([0, 0, -6]) cylinder(h=6, d=61, $fn=60);\n    }\n    \n    // Grip texture lines\n    for(i = [0:15]) {\n        rotate([0, 0, i * 24]) {\n            translate([32.5, 0, -7]) cube([1, 1, 6]);\n        }\n    }\n}\n\nmodule tank_bands() {\n    // Tank bands for securing equipment\n    translate([0, 0, 30]) {\n        difference() {\n            cylinder(h=3, d=62, $fn=60);\n            cylinder(h=3.5, d=58, $fn=60);\n        }\n    }\n    \n    translate([0, 0, 60]) {\n        difference() {\n            cylinder(h=3, d=62, $fn=60);\n            cylinder(h=3.5, d=58, $fn=60);\n        }\n    }\n}\n\nmodule furniture_base() {\n    // Base plate for stability\n    difference() {\n        cube([80, 80, 5], center=true);\n        cube([76, 76, 5.5], center=true);\n    }\n    \n    // Mounting holes for furniture integration\n    for(x = [-30, 30]) {\n        for(y = [-30, 30]) {\n            translate([x, y, -3]) cylinder(h=10, d=4, $fn=20);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main tank assembly\n    translate([0, 0, 5]) {\n        union() {\n            tank_body();\n            valve_assembly();\n            tank_boot();\n            tank_bands();\n        }\n    }\n    \n    // Furniture base\n    translate([0, 0, -8]) furniture_base();\n}",
    "renders": true
  },
  {
    "sports_equipment": "diving_fins",
    "openscad_code": "// Diving Fins Furniture Piece (Realistic Style, Medium Complexity)\n// Dimensions: ~120mm long x 50mm wide x 35mm high\n\n// Fin blade parameters\nblade_length = 90;\nblade_width = 50;\nblade_thickness = 3;\nblade_taper = 15;\n\n// Foot pocket parameters\npocket_length = 35;\npocket_width = 28;\npocket_height = 20;\nwall_thickness = 2;\n\n// Structural frame parameters\nframe_thickness = 3;\nrib_spacing = 10;\nrib_count = 8;\n\nmodule fin_blade() {\n    // Main blade with aerodynamic shape\n    difference() {\n        // Tapered blade body\n        hull() {\n            translate([0, 0, blade_thickness/2])\n                cube([blade_length, blade_width, blade_thickness], center=true);\n            translate([blade_length/2 - blade_taper, 0, blade_thickness/2])\n                cube([blade_taper*2, blade_width - 20, blade_thickness], center=true);\n        }\n        \n        // Flow channels for water guidance\n        for(i = [-1, 1]) {\n            translate([blade_length/3, i * 12, -1])\n                cube([blade_length/2, 8, blade_thickness + 2], center=true);\n        }\n        \n        // Drain holes\n        for(y = [-20, 0, 20]) {\n            translate([blade_length*0.7, y, 0])\n                cylinder(h=blade_thickness + 2, r=3, $fn=16);\n        }\n    }\n}\n\nmodule foot_pocket() {\n    // Main foot pocket structure\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, pocket_height/2])\n                cube([pocket_length, pocket_width, pocket_height], center=true);\n            translate([-pocket_length/2, 0, 0])\n                sphere(r=pocket_width/2);\n        }\n        \n        // Inner cavity for foot\n        translate([0, 0, -wall_thickness])\n            cube([pocket_length - wall_thickness*2, \n                  pocket_width - wall_thickness*2, \n                  pocket_height - wall_thickness], center=true);\n        \n        // Heel opening\n        translate([-pocket_length/2 - 1, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=pocket_width, r=pocket_height/2 - wall_thickness, $fn=32);\n    }\n    \n    // Grip texture on foot pocket\n    for(x = [-pocket_length/2 + 5 : 5 : pocket_length/2 - 5]) {\n        for(y = [-pocket_width/2 + 3 : 3 : pocket_width/2 - 3]) {\n            translate([x, y, pocket_height - wall_thickness])\n                cube([1.5, 1.5, 1], center=true);\n        }\n    }\n}\n\nmodule structural_frame() {\n    // Connection frame between blade and pocket\n    translate([-pocket_length/2, 0, -blade_thickness/2])\n        cube([frame_thickness, pocket_width, blade_thickness + 2]);\n    \n    // Reinforcement ribs\n    for(i = [0:rib_count-1]) {\n        x_pos = -pocket_length/2 - frame_thickness - (i * rib_spacing);\n        if(x_pos > -blade_length/2 + 10) {\n            translate([x_pos, 0, 0])\n                cube([1, blade_width - i*2, blade_thickness], center=true);\n        }\n    }\n    \n    // Side rails for stability\n    for(side = [-1, 1]) {\n        hull() {\n            translate([-pocket_length/2, side * (pocket_width/2 - 1), 0])\n                cube([frame_thickness, 2, blade_thickness]);\n            translate([-blade_length/2 + 5, side * (blade_width/2 - 5), 0])\n                cube([frame_thickness, 2, blade_thickness]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main blade\n    translate([blade_length/2 - pocket_length/2, 0, 0])\n        fin_blade();\n    \n    // Foot pocket\n    translate([pocket_length/2, 0, pocket_height/2])\n        foot_pocket();\n    \n    // Structural frame\n    structural_frame();\n}",
    "renders": true
  },
  {
    "sports_equipment": "snorkel",
    "openscad_code": "// Realistic Medium-Complexity Snorkel Furniture Item\n// Wall thickness = 2 mm, printable without supports\n\n$fn = 64;\n\nmodule tube_segment(l, od, id) {\n    difference() {\n        cylinder(h = l, d = od, center = true);\n        translate([0, 0, -l/2 - 1])\n            cylinder(h = l + 2, d = id, center = false);\n    }\n}\n\nmodule mouthpiece() {\n    // Main bite wing\n    translate([0, 0, 20])\n        rotate([90, 0, 0])\n        difference() {\n            union() {\n                hull() {\n                    translate([-15, -8, -10]) cube([30, 16, 20]);\n                    translate([-12, -6, 10]) cube([24, 12, 10]);\n                }\n                // Connector tube\n                translate([0, 0, -15])\n                    cylinder(h = 15, d = 12);\n            }\n            // Bite channels\n            translate([0, 0, 0])\n                cube([30, 12, 8], center = true);\n            translate([0, 4, 0])\n                cube([30, 4, 12], center = true);\n            translate([0, -4, 0])\n                cube([30, 4, 12], center = true);\n        }\n}\n\nmodule purge_valve() {\n    translate([0, 0, 90])\n        rotate([0, 180, 0])\n        difference() {\n            // Valve housing\n            cylinder(h = 8, d = 18);\n            translate([0, 0, -1])\n                cylinder(h = 10, d = 14);\n            // Drain holes\n            for(i = [0:2]) {\n                rotate([0, 0, i * 120])\n                    translate([0, 5, 4])\n                        cube([2, 10, 8], center = true);\n            }\n        }\n}\n\nmodule mask_clip() {\n    translate([0, 0, 110])\n        rotate([90, 0, 0])\n        difference() {\n            union() {\n                // Clip base\n                cube([20, 4, 10], center = true);\n                // Clip arms\n                translate([0, -2, 5])\n                    cube([20, 4, 8], center = true);\n                translate([0, 2, 5])\n                    cube([20, 4, 8], center = true);\n            }\n            // Clip gaps\n            translate([0, 0, 9])\n                cube([16, 6, 6], center = true);\n            // Mounting hole\n            translate([0, 0, 5])\n                cylinder(h = 6, d = 4, center = true);\n        }\n}\n\nmodule grip_texture(l, d) {\n    difference() {\n        tube_segment(l, d, d - 4);\n        // Texture grooves\n        for(i = [0:9]) {\n            rotate([0, 0, i * 36])\n                translate([0, (d-2)/2, -l/2])\n                    cube([d/6, d/2, l], center = true);\n        }\n    }\n}\n\nmodule snorkel() {\n    // Main curved tube\n    translate([0, 0, 50])\n        rotate([0, 0, 0])\n        union() {\n            // Upper straight section\n            translate([0, 0, 55])\n                rotate([0, 0, 0])\n                tube_segment(70, 20, 16);\n            \n            // Curved section\n            translate([0, -35, 15])\n                rotate([0, 90, 0])\n                difference() {\n                    torus(35, 10);\n                    torus(35, 8);\n                }\n            \n            // Lower straight section\n            translate([0, 0, -10])\n                rotate([90, 0, 0])\n                tube_segment(50, 20, 16);\n        }\n    \n    // Grip texture on main tube\n    translate([0, 0, 80])\n        rotate([0, 0, 0])\n        grip_texture(30, 20);\n    \n    // Mouthpiece\n    mouthpiece();\n    \n    // Purge valve\n    purge_valve();\n    \n    // Mask clip\n    mask_clip();\n    \n    // Drain chamber base\n    translate([0, 0, -40])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 15, d = 25);\n            cylinder(h = 17, d = 21);\n        }\n}\n\n// Render the complete snorkel\nsnorkel();",
    "renders": true
  },
  {
    "sports_equipment": "goggles",
    "openscad_code": "// Goggles Furniture Item - Realistic Style\n// Medium complexity 3D printable goggles model\n\n$fn = 32;\n\nmodule goggles_frame() {\n    // Main frame structure\n    difference() {\n        // Outer frame\n        hull() {\n            translate([-28, 0, 0]) cylinder(h=8, r1=22, r2=22);\n            translate([28, 0, 0]) cylinder(h=8, r1=22, r2=22);\n        }\n        \n        // Inner frame cutout\n        hull() {\n            translate([-28, 0, 0]) cylinder(h=10, r1=18, r2=18);\n            translate([28, 0, 0]) cylinder(h=10, r1=18, r2=18);\n        }\n    }\n    \n    // Bridge connecting the two lenses\n    translate([0, 0, 4]) cube([12, 8, 4], center=true);\n}\n\nmodule lens(radius, height) {\n    // Lens shape with slight curvature\n    difference() {\n        cylinder(h=height, r=radius);\n        translate([0, 0, -0.5]) cylinder(h=height+1, r=radius-2);\n    }\n}\n\nmodule strap_attachment() {\n    // Attachment points for straps\n    translate([-42, 0, 4]) cylinder(h=8, r=4);\n    translate([42, 0, 4]) cylinder(h=8, r=4);\n    \n    // Strap slots\n    for(x=[-42, 42]) {\n        translate([x, 0, 4]) rotate([90, 0, 0]) \n            cylinder(h=8, r=1.5);\n    }\n}\n\nmodule padding() {\n    // Soft padding around frame edges\n    difference() {\n        // Left padding\n        translate([-28, 0, -2]) \n            scale([1, 1.1, 0.5]) cylinder(h=4, r=20);\n        translate([-28, 0, -3]) \n            scale([0.9, 1, 0.5]) cylinder(h=6, r=19);\n            \n        // Right padding  \n        translate([28, 0, -2]) \n            scale([1, 1.1, 0.5]) cylinder(h=4, r=20);\n        translate([28, 0, -3]) \n            scale([0.9, 1, 0.5]) cylinder(h=6, r=19);\n    }\n}\n\nmodule ventilation_holes() {\n    // Ventilation slots for anti-fog\n    for(i=[-1:1]) {\n        translate([i*15, 18, 4]) cube([8, 2, 1]);\n        translate([i*15, -18, 4]) cube([8, 2, 1]);\n    }\n}\n\nmodule nose_bridge() {\n    // Contoured nose piece\n    translate([0, 0, -6]) {\n        hull() {\n            translate([-8, -12, 0]) sphere(r=4);\n            translate([8, -12, 0]) sphere(r=4);\n            translate([0, -8, -2]) sphere(r=3);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Frame structure\n    goggles_frame();\n    \n    // Left lens\n    translate([-28, 0, 4]) lens(18, 2);\n    \n    // Right lens  \n    translate([28, 0, 4]) lens(18, 2);\n    \n    // Padding\n    padding();\n    \n    // Strap attachments\n    strap_attachment();\n    \n    // Ventilation system\n    ventilation_holes();\n    \n    // Nose bridge\n    nose_bridge();\n    \n    // Grip texture on frame\n    for(i=[-30:5:30]) {\n        translate([i, 22, 4]) cube([2, 1, 8]);\n        translate([i, -22, 4]) cube([2, 1, 8]);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "swimming_goggles",
    "openscad_code": "// Swimming Goggles Furniture Item\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Overall dimensions\ngoggles_width = 120;\ngoggles_height = 45;\nlens_diameter = 45;\nstrap_width = 15;\nstrap_thickness = 3;\n\n// Main module\nmodule swimming_goggles() {\n    // Left lens frame\n    translate([-goggles_width/4, 0, 0]) {\n        lens_assembly();\n    }\n    \n    // Right lens frame\n    translate([goggles_width/4, 0, 0]) {\n        mirror([1, 0, 0]) {\n            lens_assembly();\n        }\n    }\n    \n    // Bridge between lenses\n    bridge();\n    \n    // Head strap\n    head_strap();\n}\n\n// Lens assembly with frame and cushioning\nmodule lens_assembly() {\n    difference() {\n        // Outer frame\n        rotate([0, 90, 0]) {\n            difference() {\n                // Main frame body\n                cylinder(h = lens_diameter + 10, r1 = lens_diameter/2 + 6, r2 = lens_diameter/2 + 4);\n                \n                // Lens opening\n                translate([0, 0, -1]) {\n                    cylinder(h = lens_diameter + 12, r = lens_diameter/2);\n                }\n            }\n        }\n        \n        // Inner cushioning cutout\n        translate([0, 0, -lens_diameter/2 - 5]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 10, r = lens_diameter/2 + 2);\n            }\n        }\n    }\n    \n    // Lens surface\n    translate([0, 0, -lens_diameter/2]) {\n        scale([1, 1, 0.3]) {\n            sphere(d = lens_diameter);\n        }\n    }\n    \n    // Cushioning ring\n    translate([0, 0, -lens_diameter/2 - 8]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = 8, r1 = lens_diameter/2 + 4, r2 = lens_diameter/2 + 2);\n                cylinder(h = 9, r = lens_diameter/2);\n            }\n        }\n    }\n    \n    // Strap connector\n    translate([0, lens_diameter/2 + 5, 0]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 8, r = 5);\n        }\n    }\n}\n\n// Bridge between lenses\nmodule bridge() {\n    translate([0, 0, -5]) {\n        difference() {\n            // Main bridge\n            hull() {\n                translate([-goggles_width/4, 0, 0]) {\n                    sphere(d = 10);\n                }\n                translate([goggles_width/4, 0, 0]) {\n                    sphere(d = 10);\n                }\n            }\n            \n            // Nose cutout\n            translate([0, -5, -5]) {\n                cube([30, 20, 15], center = true);\n            }\n        }\n        \n        // Bridge padding\n        translate([0, -8, -10]) {\n            scale([1, 0.6, 0.5]) {\n                sphere(d = 30);\n            }\n        }\n    }\n}\n\n// Head strap system\nmodule head_strap() {\n    // Left strap segment\n    translate([-goggles_width/2 - 30, lens_diameter/2 + 10, 0]) {\n        rotate([0, 0, -20]) {\n            strap_segment(40);\n        }\n    }\n    \n    // Right strap segment\n    translate([goggles_width/2 + 30, lens_diameter/2 + 10, 0]) {\n        rotate([0, 0, 20]) {\n            mirror([1, 0, 0]) {\n                strap_segment(40);\n            }\n        }\n    }\n    \n    // Adjustment buckle\n    translate([-goggles_width/2 - 40, lens_diameter/2 + 15, 0]) {\n        buckle();\n    }\n    translate([goggles_width/2 + 40, lens_diameter/2 + 15, 0]) {\n        mirror([1, 0, 0]) {\n            buckle();\n        }\n    }\n}\n\n// Single strap segment\nmodule strap_segment(length) {\n    color(\"black\") {\n        for(i = [0:5:length]) {\n            translate([i, 0, 0]) {\n                cube([5, strap_width, strap_thickness]);\n            }\n        }\n        \n        // Grip texture\n        for(i = [2:5:length-2]) {\n            translate([i, strap_width/2, strap_thickness/2]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = strap_width - 2, r = 0.5);\n                }\n            }\n        }\n    }\n}\n\n// Adjustable buckle\nmodule buckle() {\n    difference() {\n        // Main buckle body\n        cube([8, strap_width + 4, 6], center = true);\n        \n        // Strap holes\n        translate([0, 0, 0]) {\n            cube([10, strap_width, 8], center = true);\n        }\n    }\n    \n    // Buckle teeth\n    for(i = [-2:2:2]) {\n        translate([5, i, 0]) {\n            rotate([0, 0, 45]) {\n                cube([1, 1, 4], center = true);\n            }\n        }\n    }\n}\n\n// Render the complete goggles\nswimming_goggles();",
    "renders": true
  },
  {
    "sports_equipment": "skating_rink",
    "openscad_code": "// Skating rink furniture item - Realistic style, medium complexity\n// A miniature skateboard ramp/box combo (grind box + quarter pipe)\n\n$fn = 32;\nmodule skate_rink() {\n    // Main base platform - 100x60x3mm\n    translate([0,0,0])\n        cube([100,60,3], center=true);\n    \n    // Quarter pipe ramp on left side\n    module quarter_pipe() {\n        // Base block\n        translate([-45,-25,1.5])\n            cube([20,30,5]);\n        \n        // Quarter pipe curve\n        difference() {\n            translate([-45,-25,6.5])\n                rotate([0,90,0])\n                    cylinder(h=20, r=25, center=false);\n            translate([-45,-25,6.5])\n                rotate([0,90,0])\n                    cylinder(h=20, r=23, center=false);\n        }\n        \n        // Ramp top surface\n        translate([-45,-10,31.5])\n            cube([20,2,2]);\n    }\n    \n    // Grind box in center\n    module grind_box() {\n        // Main box structure\n        difference() {\n            translate([0,-10,1.5])\n                cube([50,20,8]);\n            translate([0,-10,5.5])\n                cube([46,16,4]);\n        }\n        \n        // Metal coping on edges\n        for(x=[-24,24]) {\n            translate([x,0,9.5])\n                cylinder(h=20, r=1, center=true);\n            translate([x,0,9.5])\n                rotate([90,0,0])\n                    cylinder(h=2, r=1, center=true);\n        }\n        \n        // Grip tape texture - small squares\n        for(x=[-20:4:20]) {\n            for(y=[-6:4:6]) {\n                translate([x,y,9.51])\n                    cube([3,3,0.2], center=true);\n            }\n        }\n    }\n    \n    // Right side launch ramp\n    module launch_ramp() {\n        // Base support\n        translate([40,-25,1.5])\n            cube([15,30,5]);\n        \n        // Sloped ramp surface\n        difference() {\n            hull() {\n                translate([40,-25,6.5])\n                    cube([15,30,0.5]);\n                translate([55,-25,16.5])\n                    cube([0.5,30,0.5]);\n            }\n            hull() {\n                translate([40,-25,8.5])\n                    cube([15,30,0.5]);\n                translate([55,-25,18.5])\n                    cube([0.5,30,0.5]);\n            }\n        }\n        \n        // Support beams underneath\n        for(y=[-20:10:20]) {\n            translate([47.5,y,11.5])\n                cube([2,2,5], center=true);\n        }\n    }\n    \n    // Call all components\n    quarter_pipe();\n    grind_box();\n    launch_ramp();\n    \n    // Corner posts for structure\n    module post(x,y) {\n        translate([x,y,1.5])\n            cylinder(h=10, r=1.5);\n    }\n    \n    post(-45,-25);\n    post(-45,25);\n    post(55,-25);\n    post(55,25);\n}\n\n// Render the complete model\nskate_rink();",
    "renders": true
  },
  {
    "sports_equipment": "treadmill",
    "openscad_code": "// Treadmill Furniture Item - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm L x 60mm W x 45mm H\n\n// Base Frame Structure\nmodule base_frame() {\n    // Main longitudinal supports (left and right)\n    translate([5, 8, 0])\n        cube([110, 4, 8]);\n    \n    translate([5, 48, 0])\n        cube([110, 4, 8]);\n    \n    // Cross supports (front, middle, back)\n    translate([0, 8, 0])\n        cube([5, 44, 8]);\n    \n    translate([57.5, 8, 0])\n        cube([5, 44, 8]);\n    \n    translate([115, 8, 0])\n        cube([5, 44, 8]);\n}\n\n// Running Belt Assembly\nmodule running_belt() {\n    // Belt surface (textured pattern)\n    for (i = [0:5:110]) {\n        translate([5 + i, 12, 8.5])\n            cube([4, 36, 0.5]);\n    }\n    \n    // Front roller cylinder\n    translate([10, 30, 8.5])\n        rotate([90, 0, 0])\n            cylinder(h=36, d=4, $fn=12);\n    \n    // Rear roller cylinder\n    translate([110, 30, 8.5])\n        rotate([90, 0, 0])\n            cylinder(h=36, d=4, $fn=12);\n}\n\n// Console Mast and Arms\nmodule console_support() {\n    // Left mast\n    translate([25, 10, 8])\n        cube([3, 3, 25]);\n    \n    // Right mast\n    translate([25, 47, 8])\n        cube([3, 3, 25]);\n    \n    // Cross support between masts\n    translate([25, 13, 25])\n        cube([3, 34, 3]);\n}\n\n// Console Panel\nmodule console_panel() {\n    // Main console body\n    translate([20, 15, 33])\n        cube([20, 30, 6]);\n    \n    // Display screen\n    translate([22, 20, 39.5])\n        cube([16, 20, 0.5]);\n    \n    // Control buttons (left side)\n    for (i = [0:2]) {\n        translate([22, 22 + i*4, 36])\n            cylinder(h=1.5, d=2, $fn=8);\n    }\n    \n    // Control buttons (right side)\n    for (i = [0:2]) {\n        translate([36, 22 + i*4, 36])\n            cylinder(h=1.5, d=2, $fn=8);\n    }\n}\n\n// Side Rails\nmodule side_rails() {\n    // Left rail\n    translate([0, 0, 8])\n        cube([120, 8, 4]);\n    \n    // Right rail\n    translate([0, 52, 8])\n        cube([120, 8, 4]);\n}\n\n// Motor Housing\nmodule motor_housing() {\n    // Front housing\n    translate([0, 12, 8])\n        cube([15, 36, 12]);\n    \n    // Ventilation slots\n    difference() {\n        translate([0, 12, 8])\n            cube([15, 36, 12]);\n        \n        for (i = [0:2:6]) {\n            translate([2, 14 + i*4, 10])\n                cube([11, 2, 8]);\n        }\n    }\n}\n\n// Hand Rails\nmodule hand_rails() {\n    // Left hand rail\n    translate([28, 10, 33])\n        rotate([90, 0, 0])\n            cylinder(h=20, d=3, $fn=8);\n    \n    // Right hand rail\n    translate([28, 47, 33])\n        rotate([90, 0, 0])\n            cylinder(h=20, d=3, $fn=8);\n    \n    // Connecting rail\n    translate([28, 10, 53])\n        rotate([0, 90, 0])\n            cylinder(h=37, d=3, $fn=8);\n}\n\n// Assembly of all components\nunion() {\n    base_frame();\n    running_belt();\n    console_support();\n    console_panel();\n    side_rails();\n    motor_housing();\n    hand_rails();\n}",
    "renders": true
  },
  {
    "sports_equipment": "elliptical",
    "openscad_code": "// Elliptical coffee table with oval glass top and elliptical base\n// Overall size: 120 x 80 x 45 mm\n\n// Wall thickness = 2 mm\nwall = 2;\n\n// Main table top - elliptical glass surface\nmodule glass_top() {\n    // Create oval top using scaled cylinder\n    translate([0, 0, 42])\n    scale([1.5, 1, 1])\n    cylinder(h=3, r=40, $fn=80);\n}\n\n// Elliptical base support ring\nmodule base_ring() {\n    difference() {\n        // Outer ring\n        translate([0, 0, wall])\n        scale([1.8, 1, 0.3])\n        cylinder(h=38, r=35, $fn=60);\n        \n        // Inner cutout\n        translate([0, 0, wall-0.1])\n        scale([1.8, 1, 0.3])\n        cylinder(h=38.5, r=32, $fn=60);\n    }\n}\n\n// Support legs - 4 elliptical columns\nmodule legs() {\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([45, 0, 19])\n        scale([0.6, 1, 1])\n        cylinder(h=38, r=6, $fn=30);\n    }\n}\n\n// Cross support beams between legs\nmodule cross_supports() {\n    // Long beam\n    translate([0, -35, 20])\n    cube([90, wall, 10]);\n    \n    // Short beam\n    translate([-35, 0, 20])\n    cube([wall, 70, 10]);\n}\n\n// Decorative elliptical shelf\nmodule shelf() {\n    difference() {\n        // Main shelf\n        translate([0, 0, 10])\n        scale([1.3, 0.8, 1])\n        cylinder(h=wall, r=35, $fn=60);\n        \n        // Center hole for cable management\n        translate([0, 0, 9])\n        cylinder(h=wall+2, r=8, $fn=30);\n    }\n}\n\n// Leg joints with rounded corners\nmodule leg_joints() {\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([45, 0, 38])\n        sphere(r=4, $fn=20);\n    }\n}\n\n// Assembly\nunion() {\n    // Glass top\n    glass_top();\n    \n    // Structural elements\n    base_ring();\n    legs();\n    cross_supports();\n    shelf();\n    leg_joints();\n}",
    "renders": true
  },
  {
    "sports_equipment": "rowing_machine",
    "openscad_code": "// Rowing Machine - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm x 40mm x 45mm\n\n$fn = 32;\n\nmodule rowing_machine() {\n    // Main Rail\n    translate([0, 0, 5]) {\n        difference() {\n            cube([100, 15, 5], center = true);\n            translate([0, 0, 2.5]) cube([96, 11, 5.1], center = true);\n        }\n    }\n    \n    // Front Support Leg\n    translate([-45, 0, 0]) {\n        difference() {\n            cube([8, 35, 8], center = true);\n            translate([0, 0, 4]) cube([4, 31, 8.1], center = true);\n        }\n        // Foot pads\n        translate([0, -15, -4]) cube([12, 3, 2], center = true);\n        translate([0, 15, -4]) cube([12, 3, 2], center = true);\n    }\n    \n    // Rear Support Leg\n    translate([45, 0, 0]) {\n        difference() {\n            cube([8, 35, 8], center = true);\n            translate([0, 0, 4]) cube([4, 31, 8.1], center = true);\n        }\n        // Foot pads\n        translate([0, -15, -4]) cube([12, 3, 2], center = true);\n        translate([0, 15, -4]) cube([12, 3, 2], center = true);\n    }\n    \n    // Seat\n    translate([20, 0, 7.5]) {\n        difference() {\n            cube([20, 12, 5], center = true);\n            translate([0, 0, 2.5]) cube([16, 8, 5.1], center = true);\n        }\n        // Seat padding\n        translate([0, 0, 2.5]) scale([1, 1.2, 0.5]) sphere(d = 10);\n    }\n    \n    // Flywheel Housing\n    translate([-35, 0, 15]) {\n        difference() {\n            cylinder(h = 20, d = 25);\n            translate([0, 0, 2]) cylinder(h = 20.1, d = 21);\n        }\n        // Air vents\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) \n                translate([10, 0, 10]) cube([3, 2, 8], center = true);\n        }\n    }\n    \n    // Handle Bar\n    translate([10, 0, 25]) {\n        // Chain/Cord\n        cylinder(h = 45, d = 1.5, center = true);\n        \n        // Handle\n        translate([22.5, 0, 0]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h = 20, d = 4, center = true);\n                    translate([0, 0, -10.1]) cylinder(h = 20.2, d = 2, center = true);\n                }\n            }\n            // Grips\n            translate([10, 0, 0]) rotate([90, 0, 0]) cylinder(h = 5, d = 6);\n            translate([-10, 0, 0]) rotate([90, 0, 0]) cylinder(h = 5, d = 6);\n        }\n    }\n    \n    // Footplates\n    translate([-10, -20, 5]) {\n        difference() {\n            cube([25, 15, 8], center = true);\n            translate([0, 0, 4]) cube([21, 11, 8.1], center = true);\n        }\n        // Straps\n        for(i = [-1, 1]) {\n            translate([i * 8, 0, 8]) cube([3, 15, 1], center = true);\n        }\n    }\n    translate([-10, 20, 5]) {\n        difference() {\n            cube([25, 15, 8], center = true);\n            translate([0, 0, 4]) cube([21, 11, 8.1], center = true);\n        }\n        // Straps\n        for(i = [-1, 1]) {\n            translate([i * 8, 0, 8]) cube([3, 15, 1], center = true);\n        }\n    }\n    \n    // Monitor\n    translate([-35, 0, 30]) {\n        difference() {\n            cube([15, 20, 8], center = true);\n            translate([0, 0, 4]) cube([11, 16, 8.1], center = true);\n        }\n        // Screen\n        translate([0, 0, 8.1]) cube([10, 12, 1], center = true);\n    }\n}\n\n// Main assembly\nrowing_machine();",
    "renders": true
  },
  {
    "sports_equipment": "exercise_bike",
    "openscad_code": "// Exercise Bike - Realistic Style (Medium Complexity)\n// Approx. 90mm x 50mm x 70mm\n\nmodule main_frame() {\n    // Central vertical post\n    translate([0, 0, 30]) \n        rotate([0, 0, 0]) \n        cube([20, 10, 70], center=true);\n    \n    // Seat post\n    translate([0, -20, 60]) \n        cube([15, 8, 25], center=true);\n    \n    // Handlebar post\n    translate([0, 20, 60]) \n        cube([15, 8, 25], center=true);\n    \n    // Base frame front\n    translate([0, 25, 10]) \n        cube([25, 8, 20], center=true);\n    \n    // Base frame rear\n    translate([0, -25, 10]) \n        cube([25, 8, 20], center=true);\n    \n    // Cross support\n    translate([0, 0, 10]) \n        cube([25, 50, 8], center=true);\n}\n\nmodule seat() {\n    // Seat base\n    translate([0, -20, 75]) \n        cube([20, 12, 3], center=true);\n    \n    // Seat cushion\n    translate([0, -20, 78]) \n        scale([1, 1, 0.3]) \n        sphere(5, $fn=30);\n}\n\nmodule handlebars() {\n    // Handlebar stem\n    translate([0, 20, 75]) \n        cylinder(h=10, r=3, $fn=20);\n    \n    // Handlebar grips\n    for (x = [-10, 10]) {\n        translate([x, 20, 87]) \n            rotate([90, 0, 0]) \n            cylinder(h=8, r=2, $fn=20);\n    }\n    \n    // Handlebar center\n    translate([0, 20, 87]) \n        rotate([90, 0, 0]) \n        cylinder(h=25, r=1.5, $fn=20);\n}\n\nmodule flywheel() {\n    // Flywheel disc\n    translate([-15, 0, 25]) \n        rotate([90, 0, 0]) \n        cylinder(h=8, r=15, $fn=60);\n    \n    // Flywheel axle\n    translate([-15, 0, 25]) \n        rotate([90, 0, 0]) \n        cylinder(h=25, r=2, $fn=20);\n    \n    // Pedal crank\n    for (angle = [0, 180]) {\n        rotate([0, 0, angle]) \n        translate([-15, 8, 25]) \n            cube([2, 8, 2], center=true);\n    }\n    \n    // Pedals\n    for (angle = [0, 180]) {\n        rotate([0, 0, angle]) \n        translate([-15, 15, 25]) \n            cube([8, 5, 2], center=true);\n    }\n}\n\nmodule support_legs() {\n    // Front stabilizer\n    translate([0, 25, 5]) \n        union() {\n            cube([40, 5, 5], center=true);\n            // End caps\n            for (x = [-20, 20]) {\n                translate([x, 25, 5]) \n                    sphere(2.5, $fn=20);\n            }\n        }\n    \n    // Rear stabilizer\n    translate([0, -25, 5]) \n        union() {\n            cube([40, 5, 5], center=true);\n            // End caps\n            for (x = [-20, 20]) {\n                translate([x, -25, 5]) \n                    sphere(2.5, $fn=20);\n            }\n        }\n}\n\nmodule display_console() {\n    // Console base\n    translate([0, 15, 85]) \n        cube([12, 8, 3], center=true);\n    \n    // Display screen\n    translate([0, 15, 88]) \n        cube([10, 6, 1], center=true);\n    \n    // Buttons\n    for (x = [-3, 0, 3]) {\n        translate([x, 15, 89.5]) \n            cylinder(h=0.5, r=0.8, $fn=20);\n    }\n}\n\n// Main assembly\nunion() {\n    main_frame();\n    seat();\n    handlebars();\n    flywheel();\n    support_legs();\n    display_console();\n}",
    "renders": true
  },
  {
    "sports_equipment": "ball",
    "openscad_code": "// Realistic Soccer Ball Furniture Item\n// Medium complexity, 3D printable ball with furniture-specific base\n\n// Overall dimensions\nball_diameter = 100;\nbase_height = 20;\nbase_diameter = 60;\nwall_thickness = 2;\n\n// Soccer ball modules\nmodule soccer_ball() {\n    // Main ball body\n    difference() {\n        sphere(d = ball_diameter, $fn = 64);\n        \n        // Hollow interior\n        sphere(d = ball_diameter - 2*wall_thickness, $fn = 64);\n    }\n    \n    // Pentagon panels (standard soccer ball pattern)\n    module pentagon_panel() {\n        // Pentagonal prism for panel\n        linear_extrude(height = 0.5) {\n            polygon(points = [\n                [0, 0],\n                [10, 0],\n                [13.09, 7.65],\n                [5, 12.36],\n                [-3.09, 7.65]\n            ]);\n        }\n    }\n    \n    // Add 12 pentagon panels\n    for (i = [0:11]) {\n        rotate([0, 37.4*i, 0]) {\n            translate([0, 0, ball_diameter/2 - 0.5]) {\n                rotate([90, 0, 0]) {\n                    pentagon_panel();\n                }\n            }\n        }\n    }\n    \n    // Hexagon panels (20 total)\n    module hexagon_panel() {\n        linear_extrude(height = 0.5) {\n            polygon(points = [\n                [0, 0],\n                [8.66, 5],\n                [8.66, 15],\n                [0, 20],\n                [-8.66, 15],\n                [-8.66, 5]\n            ]);\n        }\n    }\n    \n    // Add 20 hexagon panels in soccer ball pattern\n    for (i = [0:19]) {\n        rotate([0, 30*i + 15, 0]) {\n            translate([0, 0, ball_diameter/2]) {\n                rotate([90, 0, 0]) {\n                    hexagon_panel();\n                }\n            }\n        }\n    }\n    \n    // Seam lines between panels\n    module seam_line() {\n        cylinder(h = 0.3, r1 = 0.5, r2 = 0.5, $fn = 8);\n    }\n    \n    // Add seam network\n    for (i = [0:5]) {\n        rotate([0, 0, i*60]) {\n            translate([0, 0, ball_diameter/2 - 0.1]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h = ball_diameter, r1 = 0.5, r2 = 0.5, $fn = 8);\n                        translate([0, 0, -1]) {\n                            cylinder(h = ball_diameter + 2, r1 = 0.3, r2 = 0.3, $fn = 8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Furniture base module\nmodule furniture_base() {\n    // Main base cylinder\n    cylinder(h = base_height, r = base_diameter/2, $fn = 32);\n    \n    // Support structure\n    difference() {\n        cylinder(h = base_height, r = base_diameter/2 - wall_thickness, $fn = 32);\n        cylinder(h = base_height - wall_thickness, r = base_diameter/2 - 2*wall_thickness, $fn = 32);\n    }\n    \n    // Anti-slip base ring\n    translate([0, 0, -0.5]) {\n        cylinder(h = 2, r = base_diameter/2 + 2, r1 = base_diameter/2 + 2, r2 = base_diameter/2 + 1, $fn = 32);\n    }\n    \n    // Ball mounting socket\n    translate([0, 0, base_height - 2]) {\n        sphere(d = ball_diameter - 4, $fn = 32);\n    }\n}\n\n// Assembly\nunion() {\n    // Furniture base\n    translate([0, 0, 0]) {\n        furniture_base();\n    }\n    \n    // Soccer ball on top\n    translate([0, 0, base_height + ball_diameter/2 - 2]) {\n        soccer_ball();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "soccerball",
    "openscad_code": "// Soccerball Ottoman / Stool\n// Medium complexity, realistic style, 3D printable\n\n$fn = 32;\n\n// Overall dimensions\nball_diameter = 100;\nwall_thickness = 2;\nleg_height = 60;\nleg_diameter = 20;\n\nmodule soccerball_ottoman() {\n    // Main hollow soccer ball body\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter);\n        \n        // Inner hollow sphere\n        sphere(d = ball_diameter - wall_thickness * 2);\n        \n        // Flat sitting surface on top (cutoff)\n        translate([0, 0, ball_diameter/3])\n            cube([ball_diameter*2, ball_diameter*2, ball_diameter], center = true);\n    }\n    \n    // Soccer ball panel pattern\n    color(\"white\")\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            // Pentagon panels\n            translate([0, 0, ball_diameter/2 - 0.5])\n                pentagon_panel(12, 2);\n                \n            // Hexagon panels around pentagon\n            for(j = [0:4]) {\n                rotate([0, 0, j * 72 + 36])\n                    translate([20, 0, ball_diameter/2 - 0.5])\n                        rotate([0, 0, 30])\n                            hexagon_panel(10, 2);\n            }\n        }\n    }\n    \n    // Structural legs\n    module leg() {\n        // Main leg cylinder\n        cylinder(h = leg_height, d = leg_diameter);\n        \n        // Leg reinforcement ring\n        translate([0, 0, leg_height/2])\n            cylinder(h = 4, d = leg_diameter + 6);\n            \n        // Foot pad\n        translate([0, 0, leg_height])\n            cylinder(h = 3, d1 = leg_diameter + 2, d2 = leg_diameter + 4);\n    }\n    \n    // Position 3 legs for stability\n    for(angle = [0, 120, 240]) {\n        rotate([0, 0, angle])\n            translate([ball_diameter/2 - leg_diameter/2 - 5, 0, -leg_height])\n                leg();\n    }\n    \n    // Internal support structure\n    difference() {\n        translate([0, 0, -ball_diameter/4])\n            cylinder(h = ball_diameter/2, d = ball_diameter - wall_thickness*4);\n            \n        // Lightening holes\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([ball_diameter/4, 0, -ball_diameter/4 + 5])\n                    cylinder(h = ball_diameter/2 - 10, d = 8);\n        }\n    }\n}\n\n// Pentagon panel module\nmodule pentagon_panel(size, height) {\n    linear_extrude(height = height)\n        polygon(points = [\n            [0, -size],\n            [size * cos(54), -size * sin(54)],\n            [size * cos(18), size * sin(18)],\n            [-size * cos(18), size * sin(18)],\n            [-size * cos(54), -size * sin(54)]\n        ]);\n}\n\n// Hexagon panel module\nmodule hexagon_panel(size, height) {\n    linear_extrude(height = height)\n        polygon(points = [\n            [0, -size],\n            [size * cos(30), -size * sin(30)],\n            [size * cos(30), size * sin(30)],\n            [0, size],\n            [-size * cos(30), size * sin(30)],\n            [-size * cos(30), -size * sin(30)]\n        ]);\n}\n\n// Add grip texture on sitting surface\nmodule grip_texture() {\n    difference() {\n        // Top sitting surface\n        translate([0, 0, ball_diameter/3 - 1])\n            cylinder(h = 3, d = ball_diameter - 10);\n            \n        // Grip dimples\n        for(x = [-35:10:35]) {\n            for(y = [-35:10:35]) {\n                if(sqrt(x*x + y*y) < 45) {\n                    translate([x, y, ball_diameter/3 + 1])\n                        sphere(d = 2);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nsoccerball_ottoman();\ngrip_texture();",
    "renders": true
  },
  {
    "sports_equipment": "tennisball",
    "openscad_code": "// Tennis Ball Stool - Realistic Style, Medium Complexity\n// A functional 3D printable stool shaped like a tennis ball\n\n// Global parameters\n$fn = 50;  // Smooth curves\nball_diameter = 120;  // 120mm diameter tennis ball\nwall_thickness = 2;   // 2mm wall thickness for printing\nleg_length = 250;     // Standard stool height\nseat_thickness = 15;  // Comfortable seating surface\n\n// Tennis ball color\ntennis_color = [0.9, 0.9, 0.2];  // Bright yellow-green\n\n// Main stool module\nmodule tennis_stool() {\n    // Hollow tennis ball seat\n    translate([0, 0, leg_length]) {\n        difference() {\n            // Outer ball\n            color(tennis_color) sphere(d = ball_diameter);\n            \n            // Hollow interior\n            sphere(d = ball_diameter - 2*wall_thickness);\n            \n            // Flat seating surface (top 1/3 of ball)\n            translate([0, 0, -ball_diameter/6])\n                cube([ball_diameter*1.5, ball_diameter*1.5, ball_diameter], center=true);\n        }\n    }\n    \n    // Tennis ball seam detail\n    translate([0, 0, leg_length + ball_diameter/2 - 2]) {\n        rotate([90, 0, 0]) {\n            // Main seam curves\n            for (angle = [0:120:359]) {\n                rotate([0, 0, angle]) {\n                    difference() {\n                        // Seam ridge\n                        translate([0, 0, 0])\n                            rotate_extrude(angle=60)\n                                translate([ball_diameter/2 - 1, 0, 0])\n                                    circle(r=1);\n                                    \n                        // Cut seam groove\n                        translate([0, 0, 0])\n                            rotate_extrude(angle=60)\n                                translate([ball_diameter/2 - 0.5, 0, 0])\n                                    circle(r=0.5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Structural legs (4 legs for stability)\n    leg_positions = [\n        [30, 30, 0],\n        [-30, 30, 0],\n        [-30, -30, 0],\n        [30, -30, 0]\n    ];\n    \n    for (pos = leg_positions) {\n        translate(pos) {\n            // Main leg tube\n            cylinder(h = leg_length, d1 = 25, d2 = 20);\n            \n            // Reinforcement ring at bottom\n            translate([0, 0, 5])\n                cylinder(h = 10, d = 35);\n                \n            // Tennis ball texture on legs (grip pattern)\n            for (i = [5:15:235]) {\n                translate([0, 0, i]) {\n                    rotate([0, 0, 45])\n                        cube([25, 2, 3], center=true);\n                    rotate([0, 0, -45])\n                        cube([25, 2, 3], center=true);\n                }\n            }\n        }\n    }\n    \n    // Cross-bracing between legs for stability\n    translate([0, 0, leg_length/2]) {\n        // Front brace\n        translate([0, 30, 0])\n            cube([60, 5, 10], center=true);\n            \n        // Side brace\n        translate([30, 0, 0])\n            cube([5, 60, 10], center=true);\n            \n        // Back brace\n        translate([0, -30, 0])\n            cube([60, 5, 10], center=true);\n            \n        // Other side brace\n        translate([-30, 0, 0])\n            cube([5, 60, 10], center=true);\n    }\n    \n    // Anti-slip feet\n    for (pos = leg_positions) {\n        translate(pos + [0, 0, 5]) {\n            // Rubber foot base\n            color([0.2, 0.2, 0.2])\n                cylinder(h = 8, d = 35);\n                \n            // Grip texture\n            for (r = [10:5:30]) {\n                rotate_extrude()\n                    translate([r, 0, 0])\n                        circle(r = 1);\n            }\n        }\n    }\n    \n    // Internal support structure (hidden)\n    translate([0, 0, leg_length - 10]) {\n        // Central support column\n        cylinder(h = 20, d = 40);\n        \n        // Radial supports\n        for (angle = [0:45:359]) {\n            rotate([0, 0, angle])\n                translate([20, 0, 0])\n                    cube([40, 5, 20], center=true);\n        }\n    }\n}\n\n// Generate the stool\ntennis_stool();",
    "renders": true
  },
  {
    "sports_equipment": "golfball",
    "openscad_code": "// Golfball Stool / Ottoman\n// Realistic style, medium complexity\n// Overall height: 200mm, ball diameter: 150mm, base diameter: 180mm\n\n$fn = 36;  // Smoother curves for realistic look\n\n// Main parameters\nball_d = 150;\nbase_d = 180;\nbase_h = 50;\nleg_h = 50;\nleg_w = 25;\nwall_th = 2;\ndimple_r = 6;\ndimple_depth = 2;\n\n// Main module\nmodule golfball_stool() {\n    // Base frame structure\n    difference() {\n        union() {\n            // Central cylinder for stability\n            cylinder(h = base_h, d = base_d, center = false);\n            \n            // Four support legs\n            for (i = [0:3]) {\n                rotate([0, 0, i * 90])\n                    translate([base_d/2 - leg_w/2, -leg_w/2, 0])\n                        cube([leg_w, leg_w, leg_h]);\n            }\n            \n            // Golfball seat\n            translate([0, 0, base_h + leg_h + ball_d/2])\n                golfball_seat();\n        }\n        \n        // Hollow out base for weight reduction\n        cylinder(h = base_h - wall_th, d = base_d - 2*wall_th, center = false);\n        \n        // Cable management hole\n        translate([0, 0, base_h/2])\n            rotate([90, 0, 0])\n                cylinder(h = wall_th*2, d = 20, center = true);\n    }\n}\n\n// Golfball seat with dimples\nmodule golfball_seat() {\n    difference() {\n        // Main ball\n        sphere(d = ball_d);\n        \n        // Hollow center for 3D printing\n        sphere(d = ball_d - 2*wall_th);\n        \n        // Generate dimples using spherical pattern\n        for (theta = [0:30:180]) {\n            for (phi = [0:30:360-30]) {\n                if (theta > 0 && theta < 180) {\n                    rotate([0, theta, phi])\n                        translate([0, 0, ball_d/2])\n                            sphere(d = dimple_r * 2);\n                }\n            }\n        }\n        \n        // Top flat sitting surface\n        translate([0, 0, ball_d/2 - 10])\n            cube([80, 80, 20], center = true);\n    }\n}\n\n// Optional rubber grip ring\nmodule grip_ring() {\n    translate([0, 0, base_h + leg_h + ball_d + 5])\n        rotate_extrude()\n            translate([ball_d/2 + 5, 0, 0])\n                circle(r = 5);\n}\n\n// Assembly\ngolfball_stool();\ngrip_ring();",
    "renders": true
  },
  {
    "sports_equipment": "cricketball",
    "openscad_code": "// Cricket Ball Stool\n// Realistic style, medium complexity\n// Dimensions: 120mm diameter ball, 200mm total height\n\n// Parameters\nball_d = 120;\nball_r = ball_d / 2;\nwall_t = 2;\nseam_w = 3;\nseam_h = 1.5;\nleg_h = 80;\nleg_r = 8;\nbase_d = 100;\nbase_r = base_d / 2;\ngrip_d = 1.5;\n\n// Main stool module\nmodule cricket_stool() {\n    // Ball seat\n    difference() {\n        // Main ball\n        sphere(r = ball_r, $fn = 100);\n        \n        // Cut bottom flat for stability\n        translate([0, 0, -ball_r - 1])\n            cube([ball_d * 2, ball_d * 2, ball_r * 2], center = true);\n        \n        // Hollow out\n        sphere(r = ball_r - wall_t, $fn = 100);\n    }\n    \n    // Cricket ball seam\n    for (i = [0:1]) {\n        rotate([0, 0, i * 90])\n            translate([0, 0, ball_r * 0.7])\n                linear_extrude(height = seam_h, convexity = 10)\n                    offset(delta = seam_w / 2)\n                        circle(r = ball_r * 0.6, $fn = 100);\n    }\n    \n    // Seam stitching details\n    for (a = [0:30:330]) {\n        rotate([0, 0, a])\n            translate([0, ball_r * 0.6, ball_r * 0.7])\n                rotate([90, 0, 0])\n                    cylinder(h = seam_h + 0.5, r = 1, $fn = 8);\n    }\n    \n    // Grip texture using small dimples\n    for (theta = [0:30:150]) {\n        for (phi = [0:30:330]) {\n            rotate([theta, 0, phi])\n                translate([0, 0, ball_r - grip_d])\n                    sphere(r = grip_d, $fn = 8);\n        }\n    }\n    \n    // Support legs\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n            translate([base_r * 0.7, 0, -leg_h / 2])\n                cylinder(h = leg_h, r = leg_r, $fn = 20);\n    }\n    \n    // Base platform\n    difference() {\n        cylinder(h = 10, r = base_r, $fn = 100);\n        cylinder(h = 11, r = base_r - wall_t, $fn = 100);\n    }\n    \n    // Reinforcement rings\n    translate([0, 0, -leg_h])\n        cylinder(h = 5, r = base_r * 0.9, $fn = 100);\n    \n    // Anti-slip pads\n    for (a = [0:120:240]) {\n        rotate([0, 0, a])\n            translate([base_r * 0.8, 0, -leg_h + 2.5])\n                cylinder(h = 2, r = 5, $fn = 20);\n    }\n}\n\n// Assembly\ncricket_stool();",
    "renders": true
  },
  {
    "sports_equipment": "rugbyball",
    "openscad_code": "// Rugbyball Furniture - Decorative Rugby Ball Stool\n// Realistic style, medium complexity\n// Overall dimensions: 120mm length, 60mm width, 80mm height\n\n// Main parameters\nball_length = 120;\nball_width = 60;\nball_height = 80;\nwall_thickness = 2;\nsegment_count = 24;\n\n// Create rugby ball with furniture base\nmodule rugby_ball_stool() {\n    // Main ball body - ellipsoid\n    difference() {\n        scale([1, 0.5, 0.67]) \n            sphere(d=ball_length, $fn=segment_count);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness])\n            scale([1-wall_thickness/30, 0.5-wall_thickness/60, 0.67-wall_thickness/40]) \n                sphere(d=ball_length-4, $fn=segment_count);\n    }\n    \n    // Furniture base - cylindrical stand\n    translate([0, 0, -ball_height/2-15])\n        difference() {\n            cylinder(h=30, d=40, $fn=segment_count);\n            translate([0, 0, wall_thickness])\n                cylinder(h=30, d=36, $fn=segment_count);\n        }\n    \n    // Support ribs for structure\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n            translate([0, 0, -ball_height/2-15])\n                difference() {\n                    cube([wall_thickness, 20, 30], center=true);\n                    translate([0, 0, -wall_thickness])\n                        cube([wall_thickness-1, 18, 28], center=true);\n                }\n    }\n    \n    // Grip texture panels\n    for(i=[0:30:330]) {\n        rotate([0, 0, i])\n            translate([ball_length/2-5, 0, 0])\n                rotate([0, 90, 0])\n                    difference() {\n                        cylinder(h=5, d=8, $fn=16);\n                        translate([0, 0, wall_thickness])\n                            cylinder(h=5, d=6, $fn=16);\n                    }\n    }\n    \n    // Seams for realistic look\n    translate([0, 0, 0])\n        rotate_extrude($fn=segment_count)\n            translate([ball_length/2, 0, 0])\n                square([wall_thickness, ball_width/2]);\n    \n    // Top surface - slightly flattened for seating\n    translate([0, 0, ball_height/2-5])\n        difference() {\n            scale([1, 0.5, 0.2])\n                sphere(d=ball_length-10, $fn=segment_count);\n            translate([0, 0, -wall_thickness])\n                scale([1, 0.5, 0.25])\n                    sphere(d=ball_length-14, $fn=segment_count);\n        }\n    \n    // Anti-slip pads on base\n    for(i=[0:120:240]) {\n        rotate([0, 0, i])\n            translate([15, 0, -ball_height/2-15])\n                cylinder(h=3, d=8, $fn=16);\n    }\n    \n    // Reinforcement ring\n    translate([0, 0, -ball_height/2+10])\n        difference() {\n            torus(30, 4, segment_count);\n            translate([0, 0, -wall_thickness])\n                torus(30, 2, segment_count);\n        }\n}\n\n// Torus helper module\nmodule torus(outer_radius, thickness, segments) {\n    rotate_extrude($fn=segments)\n        translate([outer_radius, 0, 0])\n            circle(r=thickness, $fn=segments);\n}\n\n// Assembly\nunion() {\n    // Main stool\n    rugby_ball_stool();\n    \n    // Optional handle for carrying\n    translate([0, -ball_width/2-15, 0])\n        difference() {\n            rotate([90, 0, 0])\n                cylinder(h=30, d=6, $fn=segment_count);\n            translate([0, 0, wall_thickness])\n                rotate([90, 0, 0])\n                    cylinder(h=30, d=4, $fn=segment_count);\n        }\n}",
    "renders": true
  },
  {
    "sports_equipment": "handball",
    "openscad_code": "// Handball Furniture - Handball-Shaped Side Table\n// Realistic style, medium complexity\n// Dimensions: 120mm diameter ball, 450mm height table\n\n// Parameters\nball_d = 120;\nwall_thickness = 2;\nleg_h = 330;\nbase_d = 300;\nnum_grooves = 8;\n\n// Main ball shell - hollow for printed structure\nmodule ball_shell() {\n    difference() {\n        sphere(d = ball_d);\n        sphere(d = ball_d - wall_thickness * 2);\n    }\n}\n\n// Handball grip grooves\nmodule grip_grooves() {\n    for (i = [0:num_grooves-1]) {\n        rotate([0, 0, i * 360/num_grooves])\n        translate([0, 0, -ball_d/2])\n        linear_extrude(height = ball_d)\n        difference() {\n            circle(d = ball_d * 0.9);\n            circle(d = ball_d * 0.9 - 4);\n        }\n    }\n}\n\n// Ball texture pattern\nmodule ball_texture() {\n    union() {\n        ball_shell();\n        grip_grooves();\n    }\n}\n\n// Table leg support structure\nmodule leg_assembly() {\n    // Central pole\n    cylinder(h = leg_h, d = 20, $fn = 32);\n    \n    // Reinforcement rings\n    for (h = [leg_h/4, leg_h/2, leg_h*3/4]) {\n        translate([0, 0, h])\n        cylinder(h = 3, d = 30, $fn = 32);\n    }\n    \n    // Base connection flange\n    translate([0, 0, leg_h - 10])\n    cylinder(h = 10, d = 40, $fn = 32);\n}\n\n// Circular base for stability\nmodule table_base() {\n    difference() {\n        // Main base\n        cylinder(h = 15, d = base_d, $fn = 64);\n        \n        // Cavity for weight reduction\n        cylinder(h = 13, d = base_d - wall_thickness * 2, $fn = 64);\n        \n        // Cable management hole\n        translate([base_d/2 - 20, 0, 0])\n        cylinder(h = 15, d = 10, $fn = 32);\n    }\n    \n    // Non-slip feet\n    for (angle = [0:60:359]) {\n        rotate([0, 0, angle])\n        translate([base_d/2 - 15, 0, 0])\n        cylinder(h = 3, d = 20, $fn = 16);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 15])\ntable_base();\n\ntranslate([0, 0, 15])\nleg_assembly();\n\ntranslate([0, 0, leg_h + 15])\nball_texture();\n\n// Mounting plate between ball and leg\ntranslate([0, 0, leg_h + 15 - ball_d/2])\ndifference() {\n    cylinder(h = 5, d = 30, $fn = 32);\n    cylinder(h = 5, d = 20, $fn = 32);\n}",
    "renders": true
  },
  {
    "sports_equipment": "softball",
    "openscad_code": "// Softball Furniture - Softball-shaped stool with realistic proportions\n// Overall height: 120mm, diameter: 150mm\n// Wall thickness: 2mm for 3D printability\n\nmodule softball_stool() {\n    // Main spherical shell (hollow for stool storage)\n    difference() {\n        // Outer sphere - slightly squashed for realistic softball shape\n        scale([1, 1, 0.95])\n        sphere(d=150, $fn=64);\n        \n        // Inner hollow space\n        translate([0, 0, 2])\n        scale([1, 1, 0.95])\n        sphere(d=146, $fn=64);\n    }\n    \n    // Seating surface (flattened top)\n    translate([0, 0, 72])\n    cylinder(h=8, d1=120, d2=110, $fn=64);\n    \n    // Support ring for seating surface\n    translate([0, 0, 64])\n    cylinder(h=8, d=118, d1=118, d2=122, $fn=64);\n    \n    // Base reinforcement ring\n    translate([0, 0, -72])\n    cylinder(h=10, d=140, $fn=64);\n    \n    // Softball seam pattern (realistic raised stitching)\n    for (i = [0:35]) {\n        rotate([0, 0, i * 10])\n        translate([0, 0, 0])\n        rotate([90, 0, 0])\n        translate([0, 0, 74])\n        linear_extrude(height=2.5)\n        offset(r=1)\n        circle(d=3);\n    }\n    \n    // Main seam lines\n    for (angle = [0:30:330]) {\n        rotate([0, 0, angle])\n        translate([0, 0, 0])\n        rotate([90, 0, 0])\n        translate([0, 0, 74])\n        linear_extrude(height=2.5)\n        square([150, 3], center=true);\n    }\n    \n    // Internal support structure (cross beams)\n    difference() {\n        union() {\n            // Vertical support cylinder\n            cylinder(h=144, d=30, $fn=32);\n            \n            // Horizontal cross beams\n            for (rot = [0:90:270]) {\n                rotate([0, 0, rot])\n                translate([15, 0, 0])\n                cube([60, 20, 144], center=true);\n            }\n        }\n        \n        // Hollow the supports for material saving\n        cylinder(h=144, d=26, $fn=32);\n        for (rot = [0:90:270]) {\n            rotate([0, 0, rot])\n            translate([15, 0, 0])\n            cube([56, 16, 144], center=true);\n        }\n    }\n    \n    // Anti-slip feet (4 rubber pads)\n    for (angle = [45:90:315]) {\n        rotate([0, 0, angle])\n        translate([55, 0, -75])\n        cylinder(h=5, d=12, $fn=16);\n    }\n    \n    // Ventilation holes for air circulation\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([40, 0, -20])\n        rotate([90, 0, 0])\n        cylinder(h=8, d=8, $fn=16);\n    }\n}\n\n// Generate the stool\nsoftball_stool();",
    "renders": true
  },
  {
    "sports_equipment": "squashball",
    "openscad_code": "// Squashball Table - A coffee table inspired by a squash ball\n// Overall dimensions: 120mm diameter x 50mm height\n\n// Parameters\nball_diameter = 80;\ntable_height = 50;\nwall_thickness = 2;\ngrip_depth = 1.5;\ngrip_count = 12;\n\n// Main squashball table top\nmodule squashball_top() {\n    difference() {\n        // Main ball shape\n        sphere(d = ball_diameter, $fn = 64);\n        \n        // Hollow out center\n        sphere(d = ball_diameter - (wall_thickness * 2), $fn = 64);\n        \n        // Cut flat top/bottom for table functionality\n        translate([0, 0, -ball_diameter/2 + table_height/2])\n            cube([ball_diameter * 2, ball_diameter * 2, ball_diameter], center = true);\n        \n        // Add grip texture grooves\n        for (i = [0:grip_count-1]) {\n            rotate([0, 0, i * (360/grip_count)])\n                translate([0, ball_diameter/2 - grip_depth/2, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = ball_diameter, d = grip_depth * 2, $fn = 3);\n        }\n    }\n}\n\n// Central support structure\nmodule central_support() {\n    // Main vertical post\n    cylinder(h = table_height - 4, d = 20, $fn = 32);\n    \n    // Reinforcement rings\n    translate([0, 0, table_height/4])\n        cylinder(h = 2, d1 = 20, d2 = 25, $fn = 32);\n    \n    translate([0, 0, table_height*3/4])\n        cylinder(h = 2, d1 = 25, d2 = 20, $fn = 32);\n}\n\n// Base structure\nmodule base() {\n    difference() {\n        // Main base disk\n        cylinder(h = 4, d = 100, $fn = 64);\n        \n        // Lightening holes\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([30, 0, -1])\n                    cylinder(h = 6, d = 8, $fn = 32);\n        }\n        \n        // Central hole for support\n        translate([0, 0, -1])\n            cylinder(h = 6, d = 20, $fn = 32);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 2])\n    base();\n\ntranslate([0, 0, 4])\n    central_support();\n\ntranslate([0, 0, table_height - 2])\n    squashball_top();",
    "renders": true
  },
  {
    "sports_equipment": "racquetball",
    "openscad_code": "// Racquetball Display Stand (Medium Complexity)\n// Realistic style furniture piece for showcasing a racquetball\n\nball_diameter = 42;  // Standard racquetball size\nwall_thickness = 2;  // 3D printable wall thickness\nbase_height = 8;\nbase_width = 90;\nbase_depth = 60;\npost_height = 35;\npost_diameter = 12;\nholder_inner = ball_diameter + 1;\nholder_outer = holder_inner + 2*wall_thickness;\n\n// Main display stand module\nmodule racquetball_stand() {\n    // Base with rounded edges\n    difference() {\n        minkowski() {\n            cube([base_width, base_depth, base_height], center=true);\n            sphere(r=wall_thickness);\n        }\n        translate([0,0,-base_height/2-1])\n            cube([base_width-4*wall_thickness, base_depth-4*wall_thickness, base_height+2], center=true);\n    }\n    \n    // Central support post\n    translate([0,0,base_height/2+post_height/2])\n        cylinder(h=post_height, d=post_diameter, center=true);\n    \n    // Ball holder (ring shape)\n    translate([0,0,base_height+post_height])\n        difference() {\n            cylinder(h=holder_outer/2, d=holder_outer, center=true);\n            cylinder(h=holder_outer/2+2, d=holder_inner, center=true);\n        }\n    \n    // Grip texture on post (helical pattern)\n    for (i=[0:30:360]) {\n        rotate([0,0,i])\n            translate([post_diameter/2+wall_thickness/2,0,base_height/2+wall_thickness/2])\n                rotate([90,0,0])\n                    cylinder(h=post_height-wall_thickness, d=wall_thickness, center=true);\n    }\n    \n    // Anti-slip feet\n    foot_positions = [[-base_width/2+10, -base_depth/2+10], \n                     [base_width/2-10, -base_depth/2+10],\n                     [-base_width/2+10, base_depth/2-10],\n                     [base_width/2-10, base_depth/2-10]];\n    \n    for (pos = foot_positions) {\n        translate([pos[0], pos[1], -base_height/2-wall_thickness/2])\n            cylinder(h=wall_thickness, d=wall_thickness*3, center=true);\n    }\n}\n\n// Racquetball with realistic texture\nmodule racquetball() {\n    // Main ball body\n    color(\"blue\")\n    sphere(d=ball_diameter);\n    \n    // Seam line around equator\n    rotate([0,90,0])\n        difference() {\n            cylinder(h=ball_diameter+2, d=ball_diameter+0.5, center=true);\n            cylinder(h=ball_diameter+4, d=ball_diameter-0.5, center=true);\n        }\n    \n    // Small dimples for realistic texture (simplified)\n    for (lat = [-60:30:60]) {\n        for (lon = [0:45:360]) {\n            rotate([lat, 0, lon])\n                translate([0, 0, ball_diameter/2-0.5])\n                    sphere(d=1.5);\n        }\n    }\n}\n\n// Assembly\nracquetball_stand();\ntranslate([0,0,base_height+post_height+holder_outer/4+ball_diameter/2])\n    racquetball();",
    "renders": true
  },
  {
    "sports_equipment": "paddleball",
    "openscad_code": "// Paddleball Furniture - Realistic Style (Medium Complexity)\n// Overall dimensions: ~120mm tall, ~60mm wide, ~80mm deep\n\n$fn = 50;  // Smooth curves\n\n// Main paddle body\nmodule paddle_body() {\n    difference() {\n        // Main paddle shape\n        union() {\n            // Handle\n            translate([0, 0, 10])\n                cylinder(h=80, d1=25, d2=22, center=false);\n            \n            // Paddle head\n            translate([0, 0, 90])\n                scale([1, 1.2, 0.2])\n                sphere(d=60);\n        }\n        \n        // Hollow out for weight reduction\n        translate([0, 0, 15])\n            cylinder(h=75, d=20);\n    }\n}\n\n// Grip texture on handle\nmodule grip_texture() {\n    for(i = [0:5:75]) {\n        translate([0, 0, 15 + i])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=4, d=26);\n                cylinder(h=5, d=24);\n            }\n    }\n}\n\n// Paddle face surface\nmodule paddle_face() {\n    // Main hitting surface\n    translate([0, 0, 90])\n        scale([1, 1.2, 0.05])\n        sphere(d=58);\n    \n    // Reinforcement ring\n    translate([0, 0, 89.5])\n        rotate_extrude()\n            translate([29, 0, 0])\n                circle(r=1.5);\n}\n\n// Ball and elastic cord\nmodule ball_assembly() {\n    // Ball\n    translate([0, 50, 30])\n        sphere(d=25);\n    \n    // Elastic cord\n    color(\"red\")\n    hull() {\n        translate([0, 0, 90])\n            sphere(d=3);\n        translate([0, 50, 30])\n            sphere(d=3);\n    }\n}\n\n// Structural support ribs\nmodule support_ribs() {\n    // Handle to paddle transition\n    for(i = [0:45:135]) {\n        rotate([i, 0, 0])\n            translate([0, 0, 85])\n                cube([2, 20, 10], center=true);\n    }\n    \n    // Paddle edge reinforcement\n    translate([0, 0, 90])\n        rotate([0, 0, 0])\n        for(i = [0:15:359]) {\n            rotate([0, 0, i])\n                translate([29, 0, 0])\n                    cube([2, 2, 4], center=true);\n        }\n}\n\n// Furniture-style base stand\nmodule base_stand() {\n    // Main base\n    translate([0, 0, -5])\n        difference() {\n            cube([70, 50, 10], center=true);\n            translate([0, 0, 2])\n                cube([66, 46, 10], center=true);\n        }\n    \n    // Mounting pegs\n    for(pos = [[-20, -15], [20, -15], [-20, 15], [20, 15]]) {\n        translate([pos[0], pos[1], 5])\n            cylinder(h=5, d=6);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    paddle_body();\n    grip_texture();\n    paddle_face();\n    support_ribs();\n    \n    // Ball assembly (can be detached for printing)\n    ball_assembly();\n    \n    // Optional base stand\n    translate([0, -60, 0])\n        base_stand();\n}",
    "renders": true
  },
  {
    "sports_equipment": "kickball",
    "openscad_code": "// Kickball Furniture - Bench with Integrated Ball Storage\n// Realistic style, medium complexity\n\n// Overall dimensions\nbench_length = 120;\nbench_width = 40;\nbench_height = 45;\nball_diameter = 32;\nwall_thickness = 2;\n\nmodule ball_texture() {\n    // Create raised seams for realistic kickball texture\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) \n            translate([-ball_diameter/2 - 1, -1, 0])\n                cube([ball_diameter + 2, 2, ball_diameter/10]);\n    }\n    for (j = [0:2]) {\n        rotate([0, j * 120 - 60, 0])\n            translate([0, -ball_diameter/2 - 1, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=ball_diameter + 2, r=1, $fn=20);\n    }\n}\n\nmodule kickball() {\n    difference() {\n        union() {\n            // Main ball body\n            sphere(d=ball_diameter, $fn=48);\n            // Add texture\n            ball_texture();\n        }\n        // Hollow center for weight reduction\n        sphere(d=ball_diameter - wall_thickness*2, $fn=48);\n    }\n}\n\nmodule bench_seat() {\n    // Main seat with rounded edges\n    difference() {\n        // Seat base\n        cube([bench_length, bench_width, wall_thickness*2], center=true);\n        // Rounded underside\n        translate([0, 0, -wall_thickness])\n            minkowski() {\n                cube([bench_length - wall_thickness*2, bench_width - wall_thickness*2, 1], center=true);\n                cylinder(r=wall_thickness, h=1, $fn=20);\n            }\n    }\n}\n\nmodule bench_leg(x_pos) {\n    // Tapered leg design\n    difference() {\n        // Main leg\n        translate([x_pos, 0, -bench_height/2 + wall_thickness])\n            cylinder(h=bench_height - wall_thickness*2, r1=bench_width/6, r2=bench_width/8, $fn=6);\n        // Hollow center\n        translate([x_pos, 0, -bench_height/2 + wall_thickness])\n            cylinder(h=bench_height - wall_thickness*2 - 2, r1=bench_width/6 - wall_thickness, r2=bench_width/8 - wall_thickness, $fn=6);\n    }\n}\n\nmodule ball_storage_cavity() {\n    // Create storage space under bench\n    translate([0, 0, -bench_height/2 + ball_diameter/2 + wall_thickness])\n        difference() {\n            // Main cavity\n            cube([bench_length - wall_thickness*4, bench_width - wall_thickness*2, ball_diameter + wall_thickness], center=true);\n            // Ball positions\n            for (i = [-1, 1]) {\n                translate([i * bench_length/4, 0, 0])\n                    sphere(d=ball_diameter + wall_thickness, $fn=32);\n            }\n        }\n}\n\nmodule support_brace() {\n    // Cross brace between legs\n    translate([0, 0, -bench_height/3])\n        difference() {\n            cube([bench_length - bench_width/3, wall_thickness*3, bench_height/3], center=true);\n            // Lightening holes\n            for (i = [-1, 0, 1]) {\n                translate([i * bench_length/4, 0, 0])\n                    cylinder(h=wall_thickness*3 + 2, r=wall_thickness*2, $fn=20);\n            }\n        }\n}\n\n// Main assembly\nunion() {\n    // Bench seat\n    translate([0, 0, bench_height - wall_thickness])\n        bench_seat();\n    \n    // Legs\n    bench_leg(-bench_length/3);\n    bench_leg(bench_length/3);\n    \n    // Support brace\n    support_brace();\n    \n    // Storage cavity\n    ball_storage_cavity();\n}\n\n// Balls in storage\ntranslate([-bench_length/4, 0, -bench_height/2 + ball_diameter/2 + wall_thickness])\n    kickball();\ntranslate([bench_length/4, 0, -bench_height/2 + ball_diameter/2 + wall_thickness])\n    kickball();",
    "renders": true
  },
  {
    "sports_equipment": "dodgeball",
    "openscad_code": "// Dodgeball Furniture Item - Realistic Style (Medium Complexity)\n// A dodgeball-inspired stool with realistic proportions and structural details\n\n// Overall dimensions\nball_diameter = 120;\nseat_height = 450;\nleg_diameter = 25;\nwall_thickness = 2;\n\n// Grip texture pattern\ngrip_width = 8;\ngrip_depth = 1.5;\ngrip_spacing = 15;\n\n// Color definitions\nball_color = \"#FF4444\";\nframe_color = \"#333333\";\n\n// Main module for the dodgeball stool\nmodule dodgeball_stool() {\n    union() {\n        // Seat - dodgeball ball\n        translate([0, 0, seat_height - ball_diameter/2])\n            dodgeball(ball_diameter);\n        \n        // Support frame\n        support_frame();\n        \n        // Base ring for stability\n        base_ring();\n    }\n}\n\n// Dodgeball with realistic grip texture\nmodule dodgeball(diameter) {\n    difference() {\n        // Main ball body\n        color(ball_color)\n            sphere(d = diameter, $fn = 64);\n        \n        // Grip texture - vertical grooves\n        for (i = [0:36]) {\n            rotate([0, 0, i * 10])\n                translate([diameter/2 - grip_depth, -grip_width/2, -diameter/2])\n                    cube([grip_depth, grip_width, diameter], center = false);\n        }\n        \n        // Grip texture - horizontal grooves\n        for (j = [-3:3]) {\n            rotate([90, 0, 0])\n                rotate([0, 0, j * 30])\n                    translate([diameter/2 - grip_depth, -grip_width/2, -diameter/2])\n                        cube([grip_depth, grip_width, diameter], center = false);\n        }\n    }\n}\n\n// Support frame with 4 legs\nmodule support_frame() {\n    color(frame_color) {\n        // Central support column\n        cylinder(h = seat_height - ball_diameter/2 - 50, d = 40, $fn = 32);\n        \n        // Four angled legs\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([20, 0, 0])\n                    rotate([15, 0, 0])\n                        cylinder(h = 350, d = leg_diameter, $fn = 16);\n        }\n        \n        // Leg braces\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([20, 0, 150])\n                    rotate([0, 0, 45])\n                        cylinder(h = 30, d = 8, $fn = 8);\n                translate([20, 0, 300])\n                    rotate([0, 0, 45])\n                        cylinder(h = 30, d = 8, $fn = 8);\n            }\n        }\n    }\n}\n\n// Stabilizing base ring\nmodule base_ring() {\n    color(frame_color) {\n        // Main ring\n        rotate_extrude($fn = 64)\n            translate([180, 0])\n                square([wall_thickness, 20]);\n        \n        // Support struts\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([0, 0, 10])\n                    cube([180, wall_thickness, 20], center = true);\n        }\n    }\n}\n\n// Generate the stool\ndodgeball_stool();",
    "renders": true
  },
  {
    "sports_equipment": "netball",
    "openscad_code": "// Netball Storage Stool\n// Combines a regulation-size netball as the seat with a hollow cylindrical base for storage\n// Overall height 380 mm, ball diameter 220 mm, base 250 mm diameter\n\n$fn = 64;  // Smooth curves\n\n// Main module\nmodule netball_stool() {\n    // Hollow storage base\n    difference() {\n        // Outer cylinder\n        cylinder(h = 160, d = 250, center = false);\n        \n        // Inner hollow space (2mm wall thickness)\n        translate([0, 0, 2])\n            cylinder(h = 158, d = 246, center = false);\n    }\n    \n    // Base rim for structure and printability\n    translate([0, 0, 158])\n        cylinder(h = 8, d = 260, center = false);\n    \n    // Support ring for ball mount\n    translate([0, 0, 166])\n        cylinder(h = 10, d = 200, center = false);\n    \n    // Ball mounting posts (4 posts for stability)\n    for (i = [0:90:270]) {\n        rotate([0, 0, i])\n            translate([65, 0, 166])\n                cube([10, 10, 30], center = true);\n    }\n    \n    // Netball seat\n    translate([0, 0, 190])\n        netball(110);\n}\n\n// Netball construction module\nmodule netball(radius) {\n    difference() {\n        // Main ball sphere\n        sphere(r = radius);\n        \n        // Create grip grooves using subtracted cylinders\n        // Vertical grooves\n        for (i = [0:30:150]) {\n            rotate([0, i, 0])\n                translate([0, 0, -radius - 2])\n                    cylinder(h = 2 * radius + 4, d = 8, center = true);\n        }\n        \n        // Horizontal grooves\n        for (j = [0:30:150]) {\n            rotate([j, 0, 0])\n                translate([0, 0, -radius - 2])\n                    cylinder(h = 2 * radius + 4, d = 8, center = true);\n        }\n        \n        // Equatorial groove\n        rotate([90, 0, 0])\n            translate([0, 0, -radius - 2])\n                cylinder(h = 2 * radius + 4, d = 8, center = true);\n    }\n    \n    // Panel seams (raised ridges)\n    color(\"white\") {\n        // Vertical seams\n        for (i = [15:30:165]) {\n            rotate([0, i, 0])\n                translate([0, 0, -radius - 0.5])\n                    cylinder(h = 2 * radius + 1, d = 2, center = true);\n        }\n        \n        // Horizontal seams\n        for (j = [15:30:165]) {\n            rotate([j, 0, 0])\n                translate([0, 0, -radius - 0.5])\n                    cylinder(h = 2 * radius + 1, d = 2, center = true);\n        }\n        \n        // Equatorial seam\n        rotate([90, 0, 0])\n            translate([0, 0, -radius - 0.5])\n                cylinder(h = 2 * radius + 1, d = 2, center = true);\n    }\n    \n    // Mounting hole (for attaching to base)\n    translate([0, 0, -radius])\n        cylinder(h = 20, d = 30, center = false);\n}\n\n// Generate the stool\nnetball_stool();",
    "renders": true
  },
  {
    "sports_equipment": "bowlingball",
    "openscad_code": "// Bowling Ball Stool\n// Realistic style, medium complexity\n// Approx 100 mm diameter, 3D-printable with 2 mm walls\n// Functions as a small stool or side table\n\n// Parameters\nball_d = 100;           // Main ball diameter\ngrip_d = 25;            // Grip hole diameter\ngrip_depth = 15;        // Grip hole depth\nwall_th = 2;            // Wall thickness for 3D printing\nbase_h = 8;             // Flat base height for stability\nleg_h = 40;             // Stool leg height\nleg_d = 12;             // Stool leg diameter\nleg_count = 3;          // Number of legs\ngrip_angle = 30;        // Grip hole angle from vertical\nfoot_d = 20;            // Foot diameter at leg bottom\n\n// Main module\nmodule bowling_ball_stool() {\n    // Hollow ball with flat base\n    difference() {\n        union() {\n            // Main ball (solid)\n            sphere(d = ball_d, $fn = 64);\n            \n            // Flat base for stability\n            translate([0, 0, -ball_d/2])\n                cylinder(h = base_h, d = ball_d * 0.8, $fn = 48);\n        }\n        \n        // Hollow interior\n        sphere(d = ball_d - 2*wall_th, $fn = 64);\n        \n        // Remove bottom for legs\n        translate([0, 0, -ball_d/2 - base_h])\n            cube([ball_d, ball_d, base_h + 1], center = true);\n    }\n    \n    // Grip holes (3 holes for fingers)\n    for (i = [0:2]) {\n        rotate([0, grip_angle, i * 120])\n            translate([0, 0, ball_d/2 - grip_depth/2])\n                cylinder(h = grip_depth, d = grip_d, $fn = 24);\n    }\n    \n    // Reinforcement ring inside ball\n    difference() {\n        translate([0, 0, -ball_d/2 + base_h + leg_h/2])\n            cylinder(h = leg_h, d = ball_d * 0.6, $fn = 48);\n        \n        translate([0, 0, -ball_d/2 + base_h + leg_h/2])\n            cylinder(h = leg_h + 1, d = ball_d * 0.6 - 2*wall_th, $fn = 48);\n    }\n    \n    // Stool legs\n    for (i = [0:leg_count-1]) {\n        rotate([0, 0, i * 360/leg_count + 30]) {\n            // Leg\n            translate([ball_d/2 * 0.6, 0, -ball_d/2 - leg_h/2])\n                rotate([90, 0, 0])\n                    cylinder(h = leg_h, d = leg_d, $fn = 16);\n            \n            // Foot\n            translate([ball_d/2 * 0.6, 0, -ball_d/2 - leg_h - foot_d/4])\n                sphere(d = foot_d, $fn = 16);\n        }\n    }\n    \n    // Finger grip texture rings\n    for (i = [0:4]) {\n        rotate_extrude($fn = 64)\n            translate([ball_d/2 - wall_th - i*2, 0, 0])\n                circle(r = 0.5);\n    }\n}\n\n// Generate the stool\nbowling_ball_stool();",
    "renders": true
  },
  {
    "sports_equipment": "billiardball",
    "openscad_code": "// Billiard Ball Stool – realistic style, medium complexity\n// Overall height ≈ 100 mm, seat diameter ≈ 120 mm\n// Wall thickness = 2 mm everywhere for 3D printability\n\n$fn = 64;\n\n// Main parameters\nball_diameter = 120;          // Size of the “ball” seat\nwall = 2;                     // 3D–printable wall thickness\nleg_length = 80;              // Height minus seat thickness\nleg_taper = 0.6;              // Taper factor toward the floor\nnumber_radius = 16;           // Radius of the white number disk\nnumber_thickness = 2;\nbase_foot_height = 3;         // Thin foot ring for print-bed adhesion\n\n// Utility module for the seat shell (hollow sphere segment)\nmodule seat_shell(h){\n    difference(){\n        sphere(d = ball_diameter);\n        translate([0,0,-(ball_diameter/2 - h + wall)])\n            sphere(d = ball_diameter - 2*wall);\n    }\n}\n\n// Eight ball: solid black shell with white number disk\nmodule eight_ball_seat(){\n    color(\"black\")\n    seat_shell(h = 40);\n\n    // White circular patch\n    translate([0, 0, ball_diameter/2 - number_thickness])\n        color(\"white\")\n        cylinder(h = number_thickness + 0.1, r = number_radius, center = true);\n\n    // Number 8 – two stacked discs to avoid bridges\n    translate([0, 0, ball_diameter/2 + 0.05])\n        color(\"black\")\n        cylinder(h = number_thickness + 0.1, r = number_radius - 3, center = true);\n}\n\n// Simple tapered cylinder leg for printability (no overhangs)\nmodule leg(){\n    cylinder(h = leg_length, r1 = ball_diameter/2 * 0.25, r2 = ball_diameter/2 * 0.25 * leg_taper, center = false);\n}\n\n// Reinforcement ring inside the seat for structural strength\nmodule inner_ring(){\n    ring_outer = ball_diameter/2 - wall - 2;\n    ring_inner = ring_outer - wall;\n    height = wall * 2;\n    translate([0, 0, leg_length - height/2])\n    difference(){\n        cylinder(h = height, r = ring_outer);\n        cylinder(h = height + 0.2, r = ring_inner);\n    }\n}\n\n// Foot ring to improve bed adhesion and hide the leg ends\nmodule foot_ring(){\n    foot_outer = ball_diameter/2 * 0.25 * leg_taper + 5;\n    difference(){\n        cylinder(h = base_foot_height, r = foot_outer);\n        cylinder(h = base_foot_height + 0.2, r = foot_outer - wall);\n    }\n}\n\n// Assembly\nunion(){\n    // Seat\n    translate([0, 0, leg_length])\n    eight_ball_seat();\n\n    // Structural ring under seat\n    inner_ring();\n\n    // Four legs in a cross formation for stability\n    for (a = [0:90:270]){\n        rotate([0, 0, a])\n        translate([ball_diameter/2 * 0.35, 0, 0])\n            leg();\n    }\n\n    // Foot ring at bottom\n    translate([0, 0, 0])\n    foot_ring();\n}",
    "renders": true
  },
  {
    "sports_equipment": "poolball",
    "openscad_code": "// Poolball Stool - Realistic Style with Medium Complexity\n// Overall dimensions: 300mm diameter, 450mm height\n// 3D printable with 2mm wall thickness, no overhangs\n\n// Parameters\nball_diameter = 300;\nleg_height = 150;\nbase_thickness = 20;\nseat_thickness = 30;\nnumber_radius = 40;\nstripe_width = 30;\nwall_thickness = 2;\n\n// Main poolball body (hollow for 3D printing)\nmodule poolball_body() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter, $fn = 100);\n        \n        // Hollow interior\n        sphere(d = ball_diameter - 2*wall_thickness, $fn = 100);\n        \n        // Flat top for seat\n        translate([0, 0, ball_diameter/2 - seat_thickness])\n            cube([ball_diameter*2, ball_diameter*2, ball_diameter], center = true);\n        \n        // Flat bottom for legs\n        translate([0, 0, -ball_diameter/2 + base_thickness])\n            cube([ball_diameter*2, ball_diameter*2, ball_diameter], center = true);\n    }\n}\n\n// Number circle (8-ball)\nmodule number_eight() {\n    // White circle background\n    translate([0, 0, ball_diameter/2 - seat_thickness + 1])\n        cylinder(h = 2, r = number_radius + 10, $fn = 32);\n    \n    // Black number 8\n    translate([0, 0, ball_diameter/2 - seat_thickness + 3])\n        linear_extrude(height = 2)\n            text(\"8\", size = 60, halign = \"center\", valign = \"center\", font = \"Arial:style=Bold\");\n}\n\n// Stripes for 8-ball pattern\nmodule stripes() {\n    // Solid stripe around equator\n    rotate([90, 0, 0])\n        cylinder(h = stripe_width, r = ball_diameter/2 - 1, $fn = 100);\n    \n    // Second stripe perpendicular\n    rotate([0, 90, 0])\n        cylinder(h = stripe_width, r = ball_diameter/2 - 1, $fn = 100);\n}\n\n// Cushioned seat top\nmodule seat_cushion() {\n    // Foam cushion\n    translate([0, 0, ball_diameter/2 - seat_thickness/2])\n        cylinder(h = seat_thickness, r = ball_diameter/2 - 10, $fn = 100);\n    \n    // Upholstery detail\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([ball_diameter/2 - 40, 0, ball_diameter/2 - seat_thickness + 2])\n                cylinder(h = 2, r = 5, $fn = 16);\n    }\n}\n\n// Support legs with cross-bracing\nmodule stool_legs() {\n    // Central support column\n    cylinder(h = leg_height, r = 40, $fn = 32);\n    \n    // Four angled legs\n    for(i = [0:90:270]) {\n        rotate([0, 0, i])\n            translate([25, 0, -leg_height/2])\n                rotate([15, 0, 0])\n                    cylinder(h = 160, r = 15, $fn = 16);\n    }\n    \n    // Cross-bracing rings\n    for(h = [40, 80, 120]) {\n        translate([0, 0, -h])\n            rotate([90, 0, 0])\n                cylinder(h = 5, r = 90, $fn = 32);\n    }\n}\n\n// Base plate for stability\nmodule base_plate() {\n    translate([0, 0, -leg_height - base_thickness/2])\n        cylinder(h = base_thickness, r = 120, $fn = 64);\n    \n    // Rubber feet\n    for(i = [45:90:315]) {\n        rotate([0, 0, i])\n            translate([100, 0, -leg_height - base_thickness - 5])\n                cylinder(h = 10, r = 15, $fn = 16);\n    }\n}\n\n// Assembly\nunion() {\n    // Main poolball stool\n    union() {\n        poolball_body();\n        stripes();\n        number_eight();\n        seat_cushion();\n    }\n    \n    // Support structure\n    translate([0, 0, -ball_diameter/2])\n        stool_legs();\n    \n    // Base\n    base_plate();\n}",
    "renders": true
  },
  {
    "sports_equipment": "snookerball",
    "openscad_code": "// Snooker Ball Stool – Realistic Style, Medium Complexity\n// Overall height ≈ 120 mm, seat diameter ≈ 100 mm, base diameter ≈ 120 mm\n// Wall thickness 2 mm everywhere for 3D-printability\n\n// Parameters\nball_d = 100;            // nominal ball diameter\nwall_t = 2;              // uniform wall thickness\nseat_r = ball_d/2 + wall_t;\nbase_r = 60 + wall_t;\nleg_h = 40;\nleg_od = 30;\nleg_id = leg_od - 2*wall_t;\nfillet_r = 5;\ngrip_ridge_h = 1.2;\ngrip_ridge_w = 2;\ngrip_ridges = 24;\n\n// Helper module: rounded cylinder for soft edges\nmodule rounded_cyl(h, r1, r2, fn=64) {\n    cylinder(h=h, r1=r1-fillet_r, r2=r2-fillet_r, $fn=fn);\n    translate([0,0,h]) sphere(r=fillet_r, $fn=fn);\n    translate([0,0,0]) sphere(r=fillet_r, $fn=fn);\n}\n\n// Helper module: spherical outer shell with 2 mm wall\nmodule hollow_sphere(od, wall) {\n    difference() {\n        sphere(r=od/2, $fn=128);\n        sphere(r=od/2-wall, $fn=128);\n    }\n}\n\n// Seat: classic striped snooker ball (white with red stripe)\nmodule seat_shell() {\n    difference() {\n        hollow_sphere(ball_d + 2*wall_t, wall_t);\n        // slice off bottom so sphere becomes a seat\n        translate([0,0,-(ball_d/2 - wall_t)])\n            cube([ball_d+4, ball_d+4, ball_d], center=true);\n    }\n}\n\n// Red stripe texture around equator\nmodule red_stripe() {\n    color(\"red\")\n    rotate([90,0,0])\n    difference() {\n        cylinder(h=grip_ridge_h*1.5, r1=seat_r-0.2, r2=seat_r-0.2, center=true, $fn=128);\n        cylinder(h=grip_ridge_h*1.5+0.2, r1=seat_r-wall_t+0.2, r2=seat_r-wall_t+0.2, center=true, $fn=128);\n    }\n}\n\n// Grip ridges on stripe\nmodule grip_ridges() {\n    for(i=[0:grip_ridges-1])\n        rotate([0,0,i*360/grip_ridges])\n        translate([0, seat_r-0.5, 0])\n            cube([grip_ridge_w, grip_ridge_h*4, grip_ridge_h], center=true);\n}\n\n// Central structural tube (leg)\nmodule leg_tube() {\n    difference() {\n        cylinder(h=leg_h, r=leg_od/2, $fn=64);\n        cylinder(h=leg_h+1, r=leg_id/2, $fn=64);\n    }\n}\n\n// Circular base with ribs for stability\nmodule base_plate() {\n    difference() {\n        cylinder(h=wall_t*2, r=base_r, $fn=128);           // main base disc\n        cylinder(h=wall_t*2+1, r=base_r-wall_t, $fn=128);  // hollow center\n    }\n    // radial ribs for rigidity\n    for(i=[0:5:360-5]) {\n        rotate([0,0,i])\n        translate([base_r/2 - wall_t, 0, wall_t])\n            cube([base_r/2, wall_t*2, wall_t*2], center=true);\n    }\n}\n\n// Assembly\ntranslate([0,0,leg_h+wall_t]) {\n    union() {\n        seat_shell();\n        red_stripe();\n        grip_ridges();\n    }\n}\n\nleg_tube();\n\ntranslate([0,0,wall_t])\nbase_plate();",
    "renders": true
  },
  {
    "sports_equipment": "pingpongball",
    "openscad_code": "// PingPong Ball Chair - Realistic Style, Medium Complexity\n// A chair inspired by the iconic white table-tennis ball with realistic proportions\n\n// Global parameters\nball_d = 40;                    // Standard ping pong ball diameter\nwall_thickness = 2;             // 3D-printable wall thickness\nscale_factor = 2.5;             // Scale up for furniture size\n\n// Scaled dimensions\nseat_d = ball_d * scale_factor;\nleg_h = seat_d * 1.2;\nback_h = seat_d * 0.8;\n\n// Create the ping pong ball texture pattern\nmodule ball_texture(radius, depth) {\n    for (i = [0:30:359]) {\n        rotate([0, 0, i])\n        translate([0, radius - depth, 0])\n        rotate([90, 0, 0])\n        cylinder(h=depth*2, d1=3, d2=1, $fn=6);\n    }\n}\n\n// Main seat - hollow ping pong ball half\nmodule pingpong_seat() {\n    difference() {\n        // Outer sphere\n        sphere(d=seat_d, $fn=100);\n        \n        // Inner hollow\n        sphere(d=seat_d - wall_thickness*2, $fn=100);\n        \n        // Cut bottom half for seating\n        translate([0, 0, -seat_d/2 - 1])\n        cube([seat_d*2, seat_d*2, seat_d], center=true);\n    }\n    \n    // Add texture on top surface\n    translate([0, 0, 0])\n    ball_texture(seat_d/2 - wall_thickness, 0.5);\n}\n\n// Chair legs with ping pong ball feet\nmodule chair_leg(height, foot) {\n    translate([0, 0, -height/2])\n    difference() {\n        // Main leg tube\n        cylinder(h=height, d=8, $fn=20);\n        \n        // Hollow tube\n        translate([0, 0, wall_thickness])\n        cylinder(h=height - wall_thickness*2, d=8 - wall_thickness*2, $fn=20);\n    }\n    \n    if (foot) {\n        // Ping pong ball foot\n        translate([0, 0, -height - ball_d/2 + 5])\n        sphere(d=ball_d/1.5, $fn=30);\n    }\n}\n\n// Backrest with ball pattern\nmodule backrest() {\n    translate([0, -seat_d/2 + wall_thickness, back_h/2])\n    difference() {\n        // Main backrest panel\n        cube([seat_d*0.8, wall_thickness*3, back_h], center=true);\n        \n        // Hollow out\n        translate([0, wall_thickness/2, 0])\n        cube([seat_d*0.8 - wall_thickness*2, wall_thickness, back_h - wall_thickness*2], center=true);\n    }\n    \n    // Decorative ball pattern\n    for (i = [-1:1]) {\n        for (j = [-1:1]) {\n            translate([i*15, 0, j*15 + back_h/4])\n            sphere(d=10, $fn=20);\n        }\n    }\n}\n\n// Assembly\nmodule chair() {\n    // Seat\n    translate([0, 0, leg_h])\n    pingpong_seat();\n    \n    // Legs\n    leg_positions = [\n        [seat_d/3, seat_d/3],\n        [-seat_d/3, seat_d/3],\n        [seat_d/3, -seat_d/3],\n        [-seat_d/3, -seat_d/3]\n    ];\n    \n    for (pos = leg_positions) {\n        translate([pos[0], pos[1], leg_h])\n        chair_leg(leg_h, true);\n    }\n    \n    // Backrest\n    backrest();\n    \n    // Support ring\n    translate([0, 0, leg_h - 30])\n    difference() {\n        cylinder(h=wall_thickness*2, d=seat_d*1.2, $fn=40);\n        cylinder(h=wall_thickness*2 + 1, d=seat_d*1.2 - wall_thickness*2, $fn=40);\n    }\n}\n\n// Render the chair\nchair();",
    "renders": true
  },
  {
    "sports_equipment": "tabletennisball",
    "openscad_code": "// Table Tennis Ball Stool\n// Realistic style, medium complexity\n// Dimensions: ~120mm diameter, ~450mm height\n\n$fn = 50;\nwall_thickness = 2;\nball_diameter = 120;\nleg_height = 330;\nbase_diameter = 350;\n\n// Main module\nmodule table_tennis_stool() {\n    // Table tennis ball seat\n    translate([0, 0, leg_height]) {\n        difference() {\n            // Outer sphere\n            sphere(d = ball_diameter);\n            \n            // Hollow interior\n            sphere(d = ball_diameter - 2 * wall_thickness);\n            \n            // Flat seating surface\n            translate([0, 0, -ball_diameter/2 + 15])\n                cube([ball_diameter * 1.5, ball_diameter * 1.5, ball_diameter], center = true);\n        }\n        \n        // White seam line around ball\n        rotate([90, 0, 0])\n            for(i = [-1, 1]) {\n                rotate([0, 0, i * 90])\n                    translate([0, 0, ball_diameter/2 - 1])\n                        scale([1, 0.05, 0.05])\n                            sphere(d = ball_diameter);\n            }\n    }\n    \n    // Central support column\n    translate([0, 0, leg_height/2]) {\n        difference() {\n            cylinder(h = leg_height, d = 40);\n            cylinder(h = leg_height, d = 36);\n        }\n        \n        // Reinforcement rings\n        for(h = [60, 120, 180, 240, 300]) {\n            translate([0, 0, h - leg_height/2])\n                cylinder(h = 4, d = 44);\n        }\n    }\n    \n    // Tripod base\n    for(angle = [0, 120, 240]) {\n        rotate([0, 0, angle])\n            translate([0, base_diameter/2 - 25, 0]) {\n                // Leg\n                translate([0, 0, leg_height/2 - 15])\n                    rotate([90, 0, 90])\n                        difference() {\n                            cylinder(h = 250, d = 30);\n                            cylinder(h = 250, d = 26);\n                        }\n                \n                // Foot pad\n                translate([0, 15, 0])\n                    difference() {\n                        cylinder(h = 8, d = 50);\n                        cylinder(h = 8, d = 46);\n                    }\n                \n                // Bracing struts\n                translate([0, -15, leg_height/3])\n                    rotate([0, -30, 0])\n                        difference() {\n                            cube([10, 10, 180], center = true);\n                            cube([6, 6, 184], center = true);\n                        }\n            }\n    }\n    \n    // Base ring\n    translate([0, 0, 0]) {\n        difference() {\n            cylinder(h = 20, d = base_diameter);\n            cylinder(h = 20, d = base_diameter - 2 * wall_thickness);\n        }\n        \n        // Non-slip pads\n        for(angle = [0, 120, 240]) {\n            rotate([0, 0, angle])\n                translate([0, base_diameter/2 - 25, -1])\n                    cylinder(h = 3, d = 40);\n        }\n    }\n}\n\n// Generate the stool\ntable_tennis_stool();",
    "renders": true
  },
  {
    "sports_equipment": "lacrosseball",
    "openscad_code": "// Lacrosse Ball Stool\n// Overall dimensions: 300mm tall x 200mm diameter\n// Realistic style with medium complexity\n\n// Global parameters\nball_diameter = 120;\nleg_height = 150;\nseat_thickness = 20;\nwall_thickness = 2;\n\n// Main module\nmodule lacrosse_ball_stool() {\n    // Lacrosse ball seat\n    union() {\n        // Main ball shape\n        translate([0, 0, leg_height + seat_thickness]) {\n            difference() {\n                // Outer sphere\n                sphere(d = ball_diameter, $fn = 64);\n                \n                // Hollow interior\n                sphere(d = ball_diameter - 2*wall_thickness, $fn = 64);\n                \n                // Flat bottom for seating\n                translate([0, 0, -ball_diameter/2 + 10])\n                    cube([ball_diameter, ball_diameter, ball_diameter], center = true);\n            }\n        }\n        \n        // Internal seat support structure\n        translate([0, 0, leg_height + seat_thickness - 10]) {\n            cylinder(h = 20, d1 = 80, d2 = 60, $fn = 6);\n        }\n        \n        // Leg assembly\n        leg_assembly();\n        \n        // Foot ring for stability\n        translate([0, 0, 10]) {\n            difference() {\n                cylinder(h = 10, d = 220, $fn = 64);\n                cylinder(h = 12, d = 200, $fn = 64);\n            }\n        }\n    }\n}\n\n// Generate 4 legs with cross-bracing\nmodule leg_assembly() {\n    // Legs\n    for (i = [0:3]) {\n        rotate([0, 0, i*90]) {\n            // Main leg post\n            translate([70, 0, leg_height/2]) {\n                rotate([90, 0, 90])\n                    cylinder(h = leg_height, d = 20, $fn = 8);\n            }\n            \n            // Cross brace\n            translate([35, 0, leg_height/3]) {\n                rotate([90, 0, 0])\n                    cube([70, 10, 5], center = true);\n            }\n            \n            // Lower brace\n            translate([55, 0, leg_height/6]) {\n                rotate([90, 0, 0])\n                    cube([30, 8, 5], center = true);\n            }\n        }\n    }\n    \n    // Central support column\n    translate([0, 0, leg_height/2]) {\n        cylinder(h = leg_height, d = 30, $fn = 16);\n    }\n}\n\n// Ball texture pattern\nmodule ball_texture() {\n    // Grip pattern using small cylinders\n    for (i = [0:11]) {\n        rotate([0, 0, i*30]) {\n            for (j = [0:5]) {\n                rotate([0, j*30, 0]) {\n                    translate([0, 0, ball_diameter/2 - 2 - j*5]) {\n                        cylinder(h = 2, d = 4, $fn = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Add texture to ball\ndifference() {\n    lacrosse_ball_stool();\n    \n    // Cut grip pattern into ball\n    translate([0, 0, leg_height + seat_thickness]) {\n        intersection() {\n            sphere(d = ball_diameter, $fn = 64);\n            ball_texture();\n        }\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "fieldhockeyball",
    "openscad_code": "// Field Hockey Ball Furniture Item\n// Realistic style, medium complexity\n// Dimensions scaled for furniture use (150mm diameter)\n\n// Overall scale factor\nball_diameter = 150;\nwall_thickness = 2;\n\n// Main ball body module\nmodule ball_body() {\n    // Hollow sphere shell\n    difference() {\n        sphere(d = ball_diameter);\n        sphere(d = ball_diameter - wall_thickness*2);\n    }\n}\n\n// Grip texture pattern - dimples\nmodule grip_dimples() {\n    // Create dimples in a soccer ball pattern\n    dimple_depth = 1.5;\n    dimple_radius = 3;\n    \n    // Split into 6 faces of icosahedron pattern\n    for (i = [0:5]) {\n        rotate([0, 0, i*60]) {\n            for (j = [-40:20:40]) {\n                for (k = [-40:20:40]) {\n                    if (j*j + k*k < 1600) {\n                        translate([j, k, 0])\n                        rotate([90, 0, 0])\n                        translate([0, 0, ball_diameter/2 - dimple_depth])\n                        sphere(d = dimple_radius*2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Internal support structure\nmodule internal_supports() {\n    // Cross-shaped internal supports for furniture strength\n    support_width = 3;\n    support_length = ball_diameter * 0.7;\n    \n    // Vertical support\n    translate([0, 0, -ball_diameter/2])\n    cube([support_width, support_width, ball_diameter], center = true);\n    \n    // Horizontal supports\n    rotate([0, 90, 0])\n    translate([0, 0, -ball_diameter/2])\n    cube([support_width, support_width, ball_diameter], center = true);\n    \n    rotate([90, 0, 0])\n    translate([0, 0, -ball_diameter/2])\n    cube([support_width, support_width, ball_diameter], center = true);\n}\n\n// Base connection plate for furniture mounting\nmodule base_plate() {\n    plate_thickness = 5;\n    plate_diameter = 40;\n    \n    translate([0, 0, -ball_diameter/2 - plate_thickness/2])\n    cylinder(h = plate_thickness, d = plate_diameter, $fn = 32);\n    \n    // Mounting holes\n    for (i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([plate_diameter/2 * 0.7, 0, -ball_diameter/2 - plate_thickness/2])\n        cylinder(h = plate_thickness + 1, d = 4, $fn = 16);\n    }\n}\n\n// Seam detail around ball circumference\nmodule seam_detail() {\n    seam_width = 1.5;\n    seam_depth = 0.5;\n    \n    // Main seam\n    translate([0, 0, -seam_depth/2])\n    difference() {\n        cylinder(h = seam_depth, d = ball_diameter + wall_thickness, $fn = 64);\n        cylinder(h = seam_depth + 0.1, d = ball_diameter - wall_thickness, $fn = 64);\n    }\n}\n\n// Assembly\nunion() {\n    // Main ball structure\n    difference() {\n        ball_body();\n        \n        // Add grip texture by subtracting dimples\n        grip_dimples();\n    }\n    \n    // Add seam detail\n    seam_detail();\n    \n    // Add perpendicular seam\n    rotate([90, 0, 0])\n    seam_detail();\n    \n    // Internal supports for 3D printing strength\n    internal_supports();\n    \n    // Base mounting plate\n    base_plate();\n}",
    "renders": true
  },
  {
    "sports_equipment": "icehockeypuck",
    "openscad_code": "// Ice Hockey Puck Stool\n// Combines a regulation hockey puck design with a functional stool\n// Overall height: 450mm, Puck diameter: 85mm, Seat diameter: 300mm\n\n// Parameters\npuck_d = 85;\npuck_h = 25;\nseat_d = 300;\nleg_h = 400;\nwall_t = 2;\ngrip_depth = 1.5;\ngrip_width = 3;\n\n// Main puck body with grip texture\nmodule puck_body() {\n    difference() {\n        // Main puck cylinder\n        cylinder(h = puck_h, d = puck_d, $fn = 64);\n        \n        // Add grip texture on top\n        for (i = [0:35]) {\n            rotate([0, 0, i * 10])\n                translate([0, puck_d/2 - grip_width/2 - 5, puck_h - grip_depth])\n                    cube([grip_width, 10, grip_depth]);\n        }\n        \n        // Hollow center for weight reduction\n        translate([0, 0, wall_t])\n            cylinder(h = puck_h - wall_t*2, d = puck_d - wall_t*2, $fn = 64);\n    }\n}\n\n// Structural support ring\nmodule support_ring() {\n    difference() {\n        cylinder(h = 20, d = seat_d - 40, $fn = 64);\n        translate([0, 0, wall_t])\n            cylinder(h = 20, d = seat_d - 40 - wall_t*2, $fn = 64);\n    }\n}\n\n// Stool legs with hockey stick inspired design\nmodule stool_leg() {\n    // Main leg tube\n    difference() {\n        cylinder(h = leg_h, d = 25, $fn = 32);\n        translate([0, 0, wall_t])\n            cylinder(h = leg_h - wall_t, d = 25 - wall_t*2, $fn = 32);\n    }\n    \n    // Blade-like foot detail\n    translate([0, 12.5, 0])\n        rotate([90, 0, 0])\n            linear_extrude(height = 2)\n                polygon(points=[[0,0], [25,0], [20,15], [5,15]]);\n}\n\n// Seat cushion with puck pattern\nmodule seat_cushion() {\n    difference() {\n        cylinder(h = 30, d = seat_d, $fn = 64);\n        \n        // Puck pattern indentation\n        translate([0, 0, 15])\n            cylinder(h = 15, d = puck_d + 10, $fn = 64);\n        \n        // Hollow center\n        translate([0, 0, wall_t])\n            cylinder(h = 30 - wall_t*2, d = seat_d - wall_t*2, $fn = 64);\n    }\n}\n\n// Assembly\nunion() {\n    // Puck base (bottom)\n    puck_body();\n    \n    // Legs (3 for stability)\n    for (i = [0:120:360]) {\n        rotate([0, 0, i])\n            translate([0, seat_d/2 - 50, puck_h])\n                stool_leg();\n    }\n    \n    // Support ring connecting legs\n    translate([0, 0, puck_h + leg_h - 20])\n        support_ring();\n    \n    // Seat top\n    translate([0, 0, puck_h + leg_h])\n        seat_cushion();\n}",
    "renders": true
  },
  {
    "sports_equipment": "puck",
    "openscad_code": "// Hockey Puck Furniture - Side Table / Stool\n// Realistic style with medium complexity\n// Uses only basic OpenSCAD primitives and operations\n\n// Main parameters\npuck_diameter = 80;\npuck_height = 25;\nwall_thickness = 2;\nleg_height = 200;\nleg_diameter = 20;\n\n// Create main puck body\nmodule puck_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h=puck_height, d=puck_diameter, $fn=64);\n        \n        // Hollow out center\n        translate([0, 0, wall_thickness])\n            cylinder(h=puck_height-wall_thickness*2, d=puck_diameter-wall_thickness*2, $fn=64);\n        \n        // Add weight reduction pattern on bottom\n        for (i = [1:3]) {\n            rotate([0, 0, i*120])\n                translate([puck_diameter/4, 0, puck_height-wall_thickness-0.1])\n                    cube([puck_diameter/8, 3, wall_thickness], center=true);\n        }\n    }\n}\n\n// Create textured grip pattern on sides\nmodule grip_pattern() {\n    difference() {\n        // Outer ring for grip\n        cylinder(h=puck_height, d=puck_diameter+0.5, $fn=64);\n        \n        // Create grip grooves\n        for (i = [0:35]) {\n            rotate([0, 0, i*10])\n                translate([puck_diameter/2, -0.5, 0])\n                    cube([1, 1, puck_height]);\n        }\n    }\n}\n\n// Create furniture legs with joints\nmodule furniture_leg() {\n    difference() {\n        // Main leg cylinder\n        cylinder(h=leg_height, d=leg_diameter, $fn=32);\n        \n        // Create joint holes for cross-bracing\n        translate([0, 0, leg_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=leg_diameter, d=10, $fn=16);\n        \n        // Add chamfer at bottom\n        translate([0, 0, 0.1])\n            cylinder(h=5, d1=leg_diameter, d2=leg_diameter-4, $fn=32);\n    }\n}\n\n// Create cross-bracing between legs\nmodule cross_brace() {\n    difference() {\n        // Main brace\n        cylinder(h=85, d=8, $fn=16);\n        \n        // Cut ends at 45 degrees\n        rotate([0, 45, 0])\n            translate([0, 0, 45])\n                cube([100, 100, 10], center=true);\n        rotate([0, -45, 0])\n            translate([0, 0, -45])\n                cube([100, 100, 10], center=true);\n    }\n}\n\n// Create decorative top surface\nmodule table_top() {\n    difference() {\n        // Main top surface\n        translate([0, 0, puck_height])\n            cylinder(h=3, d=puck_diameter+4, $fn=64);\n        \n        // Add concentric rings for decoration\n        for (i = [1:3]) {\n            translate([0, 0, puck_height+3-0.1])\n                cylinder(h=0.5, d=puck_diameter+4-i*8, $fn=64);\n        }\n    }\n}\n\n// Assembly of the furniture piece\nmodule puck_furniture() {\n    // Main puck body\n    puck_body();\n    \n    // Add grip texture\n    grip_pattern();\n    \n    // Add table top\n    table_top();\n    \n    // Add four legs\n    for (angle = [0:90:270]) {\n        rotate([0, 0, angle])\n            translate([puck_diameter/2-leg_diameter/2, 0, -leg_height])\n                furniture_leg();\n    }\n    \n    // Add cross-bracing between legs\n    for (angle = [45:90:315]) {\n        rotate([0, 0, angle])\n            translate([puck_diameter/2+leg_diameter/2-10, 0, -leg_height/2])\n                cross_brace();\n    }\n}\n\n// Render the complete furniture\npuck_furniture();",
    "renders": true
  },
  {
    "sports_equipment": "shuttlecock",
    "openscad_code": "// Shuttlecock-inspired stool\n// Realistic style with medium complexity\n\n// Parameters\nfeather_diameter = 100;\nfeather_height = 60;\ncork_diameter = 50;\ncork_height = 40;\nleg_height = 250;\nleg_diameter = 8;\nwall_thickness = 2;\n\nmodule feather_skirt() {\n    difference() {\n        // Outer cone\n        cylinder(h=feather_height, d1=feather_diameter, d2=cork_diameter, $fn=64);\n        \n        // Inner hollow cone\n        translate([0, 0, wall_thickness])\n            cylinder(h=feather_height-wall_thickness, d1=feather_diameter-wall_thickness*2, d2=cork_diameter-wall_thickness*2, $fn=64);\n        \n        // Feather texture cuts\n        for (i = [0:15]) {\n            rotate([0, 0, i * 22.5])\n                translate([feather_diameter/2 - 5, 0, 0])\n                    cube([10, 2, feather_height], center=true);\n        }\n    }\n}\n\nmodule cork_base() {\n    difference() {\n        // Main cork cylinder\n        cylinder(h=cork_height, d=cork_diameter, $fn=32);\n        \n        // Hollow center\n        translate([0, 0, wall_thickness])\n            cylinder(h=cork_height-wall_thickness, d=cork_diameter-wall_thickness*2, $fn=32);\n        \n        // Cork texture rings\n        for (i = [1:4]) {\n            translate([0, 0, i * 8])\n                difference() {\n                    cylinder(h=2, d=cork_diameter, $fn=32);\n                    cylinder(h=2, d=cork_diameter-wall_thickness*2, $fn=32);\n                }\n        }\n    }\n}\n\nmodule support_legs() {\n    // Three legs in tripod arrangement\n    for (i = [0:120:240]) {\n        rotate([0, 0, i])\n            translate([cork_diameter/2 - leg_diameter, 0, -leg_height/2])\n                cylinder(h=leg_height, d=leg_diameter, $fn=12);\n    }\n}\n\nmodule foot_pads() {\n    // Rubber feet for stability\n    for (i = [0:120:240]) {\n        rotate([0, 0, i])\n            translate([cork_diameter/2 - leg_diameter, 0, -leg_height])\n                cylinder(h=4, d=leg_diameter + 4, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    // Top feather section\n    translate([0, 0, cork_height])\n        feather_skirt();\n    \n    // Cork base\n    cork_base();\n    \n    // Support structure\n    translate([0, 0, -leg_height/2])\n        support_legs();\n    \n    // Foot pads\n    foot_pads();\n}",
    "renders": true
  },
  {
    "sports_equipment": "badmintonbirdie",
    "openscad_code": "// Badminton Birdie Furniture Piece - Realistic Style, Medium Complexity\n// This is a 3D printable birdie designed as a functional furniture element\n\n$fn = 30;  // Smooth curves for 3D printing\n\n// Overall dimensions (scaled up for furniture use)\nbirdie_length = 120;\ncork_diameter = 35;\nfeather_height = 80;\nbase_thickness = 8;\n\n// Structural wall thickness\nwall_thickness = 2;\n\n// Cork base module with realistic texture\nmodule cork_base() {\n    // Main cork body\n    difference() {\n        cylinder(h=base_thickness, d=cork_diameter, center=true);\n        // Hollow center for weight reduction\n        cylinder(h=base_thickness+1, d=cork_diameter-wall_thickness*2, center=true);\n    }\n    \n    // Cork texture rings\n    for(i=[1:3:base_thickness-1]) {\n        translate([0, 0, i-base_thickness/2]) {\n            cylinder(h=1, d1=cork_diameter-1, d2=cork_diameter-3, center=true);\n        }\n    }\n    \n    // Bottom grip pattern\n    for(theta=[0:30:360]) {\n        rotate([0, 0, theta]) {\n            translate([cork_diameter/2-3, 0, -base_thickness/2+0.5]) {\n                cube([6, 1, 1], center=true);\n            }\n        }\n    }\n}\n\n// Feather cone structure (realistic feather simulation)\nmodule feather_cone() {\n    // Outer cone\n    difference() {\n        cylinder(h=feather_height, d1=cork_diameter, d2=cork_diameter*2.5, center=false);\n        // Inner cone for hollow structure\n        cylinder(h=feather_height+1, d1=cork_diameter-wall_thickness*2, \n                d2=cork_diameter*2.5-wall_thickness*2, center=false);\n    }\n    \n    // Feather vein structure (16 veins)\n    for(i=[0:22.5:360]) {\n        rotate([0, 0, i]) {\n            translate([0, 0, 0]) {\n                cube([0.5, cork_diameter*1.25-2, feather_height-2]);\n            }\n        }\n    }\n    \n    // Horizontal support rings\n    for(h=[20:20:feather_height-20]) {\n        translate([0, 0, h]) {\n            cylinder(h=wall_thickness, d1=cork_diameter + h*0.02, d2=cork_diameter + h*0.025, center=true);\n        }\n    }\n}\n\n// Top cap for structural integrity\nmodule top_cap() {\n    translate([0, 0, feather_height]) {\n        difference() {\n            cylinder(h=wall_thickness*2, d=cork_diameter*2.5, center=true);\n            cylinder(h=wall_thickness*3, d=cork_diameter*2.5-wall_thickness*2, center=true);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, base_thickness/2]) {\n    union() {\n        cork_base();\n        \n        translate([0, 0, base_thickness/2]) {\n            feather_cone();\n            top_cap();\n        }\n    }\n}\n\n// Furniture base connector (for mounting)\ntranslate([0, 0, -base_thickness-5]) {\n    difference() {\n        cylinder(h=10, d=20, center=true);\n        cylinder(h=11, d=16, center=true);\n    }\n}\n\n// Side mounting brackets\nmodule mounting_bracket() {\n    difference() {\n        cube([15, wall_thickness*3, 20], center=true);\n        cube([11, wall_thickness*4, 16], center=true);\n    }\n}\n\ntranslate([0, cork_diameter/2+7.5, base_thickness/2]) {\n    mounting_bracket();\n    rotate([0, 180, 0]) {\n        translate([0, -15, 0]) {\n            mounting_bracket();\n        }\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "disc",
    "openscad_code": "// Disc Furniture - Modern Coffee Table with Disc Base\n// Realistic style, medium complexity\n// 3D printable design with no overhangs\n\n// Overall dimensions\ntable_height = 450;\ntable_top_diameter = 600;\ntable_top_thickness = 25;\nbase_disc_diameter = 450;\nbase_thickness = 40;\nleg_height = table_height - table_top_thickness - base_thickness;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Table top module with rounded edges\nmodule table_top() {\n    // Main top surface\n    difference() {\n        cylinder(h=table_top_thickness, d=table_top_diameter, $fn=100);\n        \n        // Hollow out underside to save material\n        translate([0, 0, -1])\n            cylinder(h=table_top_thickness-2, d=table_top_diameter-2*wall_thickness, $fn=100);\n    }\n    \n    // Rounded edge detail\n    translate([0, 0, table_top_thickness])\n        cylinder(h=3, d1=table_top_diameter, d2=table_top_diameter-6, $fn=100);\n}\n\n// Central support column\nmodule support_column() {\n    // Main column\n    cylinder(h=leg_height, d=80, $fn=64);\n    \n    // Internal support ribs for strength\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n            translate([-2, 0, 0])\n                cube([4, 40, leg_height]);\n    }\n}\n\n// Disc base with anti-slip features\nmodule disc_base() {\n    difference() {\n        // Main disc\n        cylinder(h=base_thickness, d=base_disc_diameter, $fn=100);\n        \n        // Lightening holes\n        for(i=[0:30:330]) {\n            rotate([0, 0, i])\n                translate([(base_disc_diameter-60)/2, 0, -1])\n                    cylinder(h=base_thickness+2, d=20, $fn=32);\n        }\n        \n        // Central hole for cable management\n        translate([0, 0, -1])\n            cylinder(h=base_thickness+2, d=30, $fn=32);\n    }\n    \n    // Rubber feet details\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n            translate([(base_disc_diameter-20)/2, 0, base_thickness-3])\n                cylinder(h=3, d=10, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Base disc at bottom\n    disc_base();\n    \n    // Support column\n    translate([0, 0, base_thickness])\n        support_column();\n    \n    // Table top\n    translate([0, 0, base_thickness + leg_height])\n        table_top();\n}\n\n// Cable management grommet in table top\ntranslate([0, 0, base_thickness + leg_height + table_top_thickness - 3])\n    cylinder(h=6, d=50, $fn=32);",
    "renders": true
  },
  {
    "sports_equipment": "javelin",
    "openscad_code": "// Javelin Furniture Item - Realistic Style, Medium Complexity\n// Overall length: 150mm, designed for 3D printing\n\n// Main parameters\nshaft_length = 130;\nshaft_diameter = 6;\ngrip_length = 40;\ngrip_diameter = 8;\ntip_length = 15;\nbase_length = 5;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Module for grip texture (spiral pattern)\nmodule grip_texture() {\n    for (i = [0:10:360]) {\n        rotate([0, 0, i]) \n            translate([grip_diameter/2 - 0.5, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=grip_length, d=1, $fn=8);\n    }\n}\n\n// Module for shaft with hollow center\nmodule shaft() {\n    difference() {\n        // Outer shaft\n        cylinder(h=shaft_length, d=shaft_diameter, $fn=32);\n        // Inner hollow\n        translate([0, 0, -1])\n            cylinder(h=shaft_length + 2, d=shaft_diameter - wall_thickness*2, $fn=32);\n    }\n}\n\n// Module for grip section\nmodule grip() {\n    difference() {\n        // Main grip body\n        translate([0, 0, (shaft_length - grip_length)/2])\n            cylinder(h=grip_length, d=grip_diameter, $fn=32);\n        \n        // Hollow center\n        translate([0, 0, (shaft_length - grip_length)/2 - 1])\n            cylinder(h=grip_length + 2, d=grip_diameter - wall_thickness*2, $fn=32);\n        \n        // Grip texture subtracted\n        translate([0, 0, (shaft_length - grip_length)/2])\n            grip_texture();\n    }\n}\n\n// Module for aerodynamic tip\nmodule tip() {\n    difference() {\n        // Outer cone\n        translate([0, 0, shaft_length])\n            cylinder(h=tip_length, d1=shaft_diameter, d2=0.5, $fn=32);\n        \n        // Inner hollow\n        translate([0, 0, shaft_length - 1])\n            cylinder(h=tip_length + 2, d1=shaft_diameter - wall_thickness*2, d2=0.5, $fn=32);\n    }\n}\n\n// Module for base support\nmodule base() {\n    difference() {\n        // Outer base\n        translate([0, 0, -base_length])\n            cylinder(h=base_length, d1=shaft_diameter + 4, d2=shaft_diameter, $fn=32);\n        \n        // Inner hollow\n        translate([0, 0, -base_length - 1])\n            cylinder(h=base_length + 2, d1=shaft_diameter + 4 - wall_thickness*2, d2=shaft_diameter - wall_thickness*2, $fn=32);\n    }\n}\n\n// Module for structural reinforcement rings\nmodule reinforcement_rings() {\n    // Ring at shaft-grip junction\n    translate([0, 0, (shaft_length - grip_length)/2 - 2])\n        cylinder(h=2, d=shaft_diameter + 2, $fn=32);\n    \n    // Ring at grip-tip junction\n    translate([0, 0, (shaft_length + grip_length)/2])\n        cylinder(h=2, d=shaft_diameter + 2, $fn=32);\n}\n\n// Assemble the javelin\nunion() {\n    // Main shaft\n    shaft();\n    \n    // Grip section\n    grip();\n    \n    // Aerodynamic tip\n    tip();\n    \n    // Base support\n    base();\n    \n    // Structural reinforcement\n    reinforcement_rings();\n}",
    "renders": true
  },
  {
    "sports_equipment": "discus",
    "openscad_code": "// Discus furniture item - sports equipment themed side table\n// Overall dimensions: 120mm diameter x 450mm height\n\n$fn = 36;  // Smooth curves for realistic appearance\n\n// Main parameters\ndiscus_diameter = 120;\ndiscus_thickness = 12;\ntable_height = 450;\nleg_diameter = 20;\nwall_thickness = 2;\n\nmodule discus_top() {\n    // Outer rim\n    difference() {\n        cylinder(h=discus_thickness, d=discus_diameter);\n        translate([0, 0, wall_thickness])\n            cylinder(h=discus_thickness, d=discus_diameter - wall_thickness*2);\n    }\n    \n    // Inner plate\n    translate([0, 0, wall_thickness])\n        cylinder(h=discus_thickness - wall_thickness*2, d=discus_diameter - 40);\n    \n    // Grip texture rings\n    for(i = [1:2:9]) {\n        rotate([0, 0, i*20])\n            translate([0, discus_diameter/2 - 15, discus_thickness/2])\n                cube([30, 2, discus_thickness], center=true);\n    }\n}\n\nmodule support_leg() {\n    // Main leg tube\n    difference() {\n        cylinder(h=table_height - discus_thickness, d=leg_diameter);\n        translate([0, 0, wall_thickness])\n            cylinder(h=table_height - discus_thickness - wall_thickness, d=leg_diameter - wall_thickness*2);\n    }\n    \n    // Reinforcement rings\n    for(pos = [0.3, 0.6, 0.9]) {\n        translate([0, 0, pos * (table_height - discus_thickness)])\n            cylinder(h=wall_thickness*2, d=leg_diameter + 4);\n    }\n}\n\nmodule base_plate() {\n    // Circular base for stability\n    difference() {\n        cylinder(h=wall_thickness*3, d=leg_diameter + 40);\n        translate([0, 0, wall_thickness])\n            cylinder(h=wall_thickness, d=leg_diameter + 36);\n    }\n    \n    // Non-slip pads\n    for(angle = [0:120:359]) {\n        rotate([0, 0, angle])\n            translate([leg_diameter/2 + 15, 0, -1])\n                cylinder(h=wall_thickness*2, d=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Top discus surface\n    translate([0, 0, table_height - discus_thickness])\n        discus_top();\n    \n    // Support structure\n    translate([0, 0, 0])\n        support_leg();\n    \n    // Base\n    translate([0, 0, 0])\n        base_plate();\n}\n\n// Optional magazine holder ring\ntranslate([leg_diameter/2 + 10, 0, table_height/2])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=60, d=leg_diameter + 10);\n        cylinder(h=60, d=leg_diameter + 6);\n    }",
    "renders": true
  },
  {
    "sports_equipment": "shotput",
    "openscad_code": "// Shotput Furniture Item - Medium Complexity Realistic Style\n// Realistic shotput with furniture base for display/storage\n\n// Overall dimensions\nshotput_radius = 45;\nbase_height = 15;\nbase_width = 80;\nbase_depth = 80;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule shotput_ball() {\n    // Main sphere with grip texture\n    difference() {\n        // Outer sphere\n        sphere(r = shotput_radius);\n        \n        // Grip texture - subtract small spheres in spiral pattern\n        for (i = [0:15:360]) {\n            for (j = [0:30:180]) {\n                rotate([0, j, i])\n                translate([shotput_radius - 1, 0, 0])\n                sphere(r = 2.5);\n            }\n        }\n    }\n    \n    // Add structural reinforcement inside\n    translate([0, 0, 0])\n    sphere(r = shotput_radius - wall_thickness);\n}\n\nmodule furniture_base() {\n    // Main base platform\n    difference() {\n        // Solid base\n        cube([base_width, base_depth, base_height], center = true);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, base_height/2 - wall_thickness])\n        cube([base_width - 2*wall_thickness, base_depth - 2*wall_thickness, base_height], center = true);\n        \n        // Shotput recess\n        translate([0, 0, base_height/2 - wall_thickness])\n        sphere(r = shotput_radius + 2);\n        \n        // Cable management holes\n        for (pos = [-25, 25]) {\n            translate([pos, base_depth/2 - wall_thickness, 0])\n            rotate([90, 0, 0])\n            cylinder(h = base_width, r = 5, center = true);\n        }\n    }\n    \n    // Support ribs\n    for (angle = [0:45:315]) {\n        rotate([0, 0, angle])\n        translate([20, 0, 0])\n        cube([40, wall_thickness, base_height - wall_thickness], center = true);\n    }\n    \n    // Non-slip feet\n    for (x = [-30, 30])\n    for (y = [-30, 30]) {\n        translate([x, y, -base_height/2])\n        cylinder(h = 5, r1 = 8, r2 = 5);\n    }\n}\n\nmodule display_stand() {\n    // Vertical support post\n    difference() {\n        cylinder(h = 80, r = 8, center = true);\n        cylinder(h = 82, r = 6, center = true);\n    }\n    \n    // Mounting bracket\n    translate([0, 0, 40])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 20, r = 12, center = true);\n        cylinder(h = 22, r = 8, center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, shotput_radius + base_height/2])\nshotput_ball();\n\ntranslate([0, 0, 0])\nfurniture_base();\n\n// Optional display stand (comment out if not needed)\n// translate([0, 0, 0])\n// display_stand();",
    "renders": true
  },
  {
    "sports_equipment": "hammer",
    "openscad_code": "// Realistic Hammer Furniture Item\n// Medium complexity OpenSCAD model with furniture characteristics\n\n// Overall dimensions\nhammer_length = 120;\nhammer_width = 45;\nhammer_height = 50;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main handle module\nmodule handle() {\n    // Handle shaft with ergonomic grip\n    translate([0, 0, -40]) {\n        difference() {\n            // Main handle cylinder\n            cylinder(h=80, d1=12, d2=10, $fn=32);\n            \n            // Grip texture grooves\n            for(i = [0:5:75]) {\n                translate([0, 0, i]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=12.1, d=1, center=true, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Handle collar for joint strength\n    translate([0, 0, 40]) {\n        difference() {\n            cylinder(h=8, d=16, $fn=32);\n            cylinder(h=9, d=10.5, $fn=32);\n        }\n    }\n}\n\n// Hammer head module\nmodule hammer_head() {\n    // Main head body\n    translate([0, 0, 45]) {\n        difference() {\n            // Primary hammer head block\n            cube([hammer_width, 25, 20], center=true);\n            \n            // Hollow interior for weight reduction\n            translate([0, 0, wall]) {\n                cube([hammer_width-wall*2, 25-wall*2, 20-wall*2], center=true);\n            }\n            \n            // Claw slot\n            translate([0, 15, 0]) {\n                cube([8, 8, 22], center=true);\n            }\n        }\n    }\n    \n    // Claw curve\n    translate([0, 15, 45]) {\n        difference() {\n            // Curved claw\n            rotate([0, 0, 0]) {\n                translate([0, 0, -10]) {\n                    cylinder(h=20, d1=20, d2=12, $fn=32);\n                }\n            }\n            \n            // Hollow claw\n            translate([0, 0, -10]) {\n                cylinder(h=21, d1=16, d2=8, $fn=32);\n            }\n        }\n    }\n    \n    // Striking face\n    translate([0, -12.5, 45]) {\n        difference() {\n            cube([hammer_width, 3, 20], center=true);\n            translate([0, 0, wall]) {\n                cube([hammer_width-wall*2, 3, 20-wall*2], center=true);\n            }\n        }\n    }\n}\n\n// Furniture base support\nmodule base_support() {\n    // Base plate for stability\n    translate([0, 0, -45]) {\n        difference() {\n            cylinder(h=4, d=35, $fn=64);\n            cylinder(h=5, d=31, $fn=64);\n        }\n    }\n    \n    // Support ribs\n    for(angle = [0:120:240]) {\n        rotate([0, 0, angle]) {\n            translate([13, 0, -43]) {\n                cube([10, wall, 6], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main hammer structure\n    handle();\n    hammer_head();\n    \n    // Furniture base\n    base_support();\n    \n    // Joint reinforcement\n    translate([0, 0, 40]) {\n        difference() {\n            sphere(d=18, $fn=32);\n            sphere(d=14, $fn=32);\n        }\n    }\n    \n    // Mounting holes for furniture attachment\n    translate([0, 0, -45]) {\n        for(pos = [[-10, 0], [10, 0]]) {\n            translate(pos) {\n                cylinder(h=5, d=3, $fn=16);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "dart",
    "openscad_code": "// Dart Furniture - A dart-shaped coat rack/stand\n// Overall height: 150mm, suitable for 3D printing\n\n// Parameters\n$fn = 32;\ntip_height = 40;\nbarrel_length = 60;\nbarrel_diameter = 12;\nshaft_length = 40;\nshaft_diameter = 8;\nflight_height = 10;\nflight_width = 40;\nwall_thickness = 2;\nbase_height = 15;\nbase_diameter = 30;\n\n// Main module\nmodule dart_furniture() {\n    // Central shaft with hole for mounting\n    difference() {\n        cylinder(h=shaft_length + barrel_length + tip_height, d=shaft_diameter, center=true);\n        translate([0, 0, (shaft_length + barrel_length + tip_height)/2 - base_height])\n            cylinder(h=base_height + 5, d=4, center=true);\n    }\n    \n    // Grip barrel section\n    translate([0, 0, shaft_length/2 + barrel_length/2]) {\n        difference() {\n            cylinder(h=barrel_length, d=barrel_diameter, center=true);\n            // Grip rings\n            for(i = [-2:1:2]) {\n                translate([0, 0, i * 8])\n                    rotate([90, 0, 0])\n                        cylinder(h=barrel_diameter + 2, d=2, center=true);\n            }\n        }\n    }\n    \n    // Pointed tip\n    translate([0, 0, shaft_length/2 + barrel_length + tip_height/2]) {\n        cylinder(h1=tip_height, h2=0, d1=barrel_diameter, d2=2, center=true);\n    }\n    \n    // Flight section (functional as coat hooks)\n    translate([0, 0, -shaft_length/2 - flight_height/2]) {\n        // Central flight support\n        difference() {\n            cube([wall_thickness, flight_width, flight_height], center=true);\n            // Cut hook openings\n            for(i = [-1:1:1]) {\n                translate([0, i * 12, 0])\n                    cube([wall_thickness + 1, 8, flight_height - 2], center=true);\n            }\n        }\n        \n        // Perpendicular flight wing\n        rotate([0, 0, 90]) {\n            difference() {\n                cube([wall_thickness, flight_width, flight_height], center=true);\n                // Cut hook openings\n                for(i = [-1:1:1]) {\n                    translate([0, i * 12, 0])\n                        cube([wall_thickness + 1, 8, flight_height - 2], center=true);\n                }\n            }\n        }\n    }\n    \n    // Mounting base\n    translate([0, 0, -(shaft_length/2 + barrel_length + tip_height)/2 - base_height/2 - 10]) {\n        difference() {\n            cylinder(h=base_height, d=base_diameter, center=true);\n            // Mounting holes\n            for(i = [0:120:359]) {\n                rotate([0, 0, i])\n                    translate([base_diameter/2 - 5, 0, 0])\n                        cylinder(h=base_height + 1, d=3, center=true);\n            }\n        }\n    }\n    \n    // Decorative rings\n    translate([0, 0, shaft_length/2]) {\n        cylinder(h=2, d=barrel_diameter + 4, center=true);\n    }\n    translate([0, 0, -shaft_length/2]) {\n        cylinder(h=2, d=barrel_diameter + 4, center=true);\n    }\n}\n\n// Render the dart furniture\ndart_furniture();",
    "renders": true
  },
  {
    "sports_equipment": "arrow",
    "openscad_code": "// Arrow furniture item - realistic style with medium complexity\n// Wall thickness: 2mm, printable without supports\n\n$fn = 50;\n\n// Main dimensions (mm)\narrow_length = 120;\nshaft_diameter = 8;\nhead_length = 25;\nhead_width = 18;\nfletching_length = 30;\nfletching_width = 12;\nnock_depth = 5;\n\n// Wall thickness\nwall = 2;\n\n// Arrow shaft with hollow core\nmodule shaft() {\n    difference() {\n        // Outer shaft\n        cylinder(h=arrow_length - head_length - nock_depth, d=shaft_diameter, center=false);\n        \n        // Hollow core\n        translate([0, 0, -0.1])\n            cylinder(h=arrow_length - head_length - nock_depth + 0.2, d=shaft_diameter - 2*wall, center=false);\n    }\n}\n\n// Arrow head - realistic 3-blade broadhead\nmodule arrow_head() {\n    union() {\n        // Central cone\n        cylinder(h=head_length, d1=0, d2=shaft_diameter, center=false);\n        \n        // Three blades\n        for (i = [0:120:240]) {\n            rotate([0, 0, i])\n                translate([0, shaft_diameter/2 + 1, head_length/2])\n                    cube([head_width - shaft_diameter, wall, head_length], center=true);\n        }\n    }\n}\n\n// Fletching - three vanes with realistic shape\nmodule fletching() {\n    for (i = [0:120:240]) {\n        rotate([0, 0, i])\n            translate([0, shaft_diameter/2 + 1, arrow_length - head_length - nock_depth - fletching_length/2])\n                // Vane shape - tapered\n                scale([1, 1, 1])\n                    difference() {\n                        // Main vane\n                        cube([fletching_width/2, wall, fletching_length], center=true);\n                        \n                        // Taper front\n                        translate([fletching_width/4, 0, fletching_length/2 - 2])\n                            rotate([0, 0, 45])\n                                cube([fletching_width, wall*2, 4], center=true);\n                    }\n    }\n}\n\n// Nock - realistic insert with groove\nmodule nock() {\n    difference() {\n        // Main nock body\n        cylinder(h=nock_depth, d=shaft_diameter + 2, center=false);\n        \n        // String groove\n        translate([0, 0, nock_depth/2])\n            rotate([90, 0, 0])\n                cylinder(h=shaft_diameter + 4, d=wall*2, center=true);\n        \n        // Hollow for string\n        translate([0, -shaft_diameter/2 - 1, nock_depth/2])\n            cube([shaft_diameter/2, shaft_diameter + 2, nock_depth + 0.2], center=true);\n    }\n}\n\n// Grip texture rings on shaft\nmodule grip_rings() {\n    for (z = [10:5:arrow_length - head_length - nock_depth - fletching_length - 10]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h=1, d=shaft_diameter + 1, center=false);\n                cylinder(h=1.2, d=shaft_diameter - 1, center=false);\n            }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Shaft\n    translate([0, 0, head_length])\n        shaft();\n    \n    // Grip texture\n    translate([0, 0, head_length])\n        grip_rings();\n    \n    // Arrow head\n    translate([0, 0, 0])\n        arrow_head();\n    \n    // Fletching\n    fletching();\n    \n    // Nock\n    translate([0, 0, arrow_length - nock_depth])\n        nock();\n}",
    "renders": true
  },
  {
    "sports_equipment": "bolt",
    "openscad_code": "// Bolt Furniture - Industrial Style Stool\n// Realistic medium-complexity OpenSCAD model\n\n// Main parameters\nbolt_diameter = 40;\nbolt_height = 120;\nthread_pitch = 8;\nhead_diameter = 70;\nhead_height = 25;\nseat_diameter = 300;\nseat_thickness = 12;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Hex bolt head module\nmodule hex_head() {\n    // Outer hex shape\n    difference() {\n        cylinder(h=head_height, d=head_diameter, $fn=6);\n        // Hollow center\n        cylinder(h=head_height+1, d=bolt_diameter+2, $fn=32);\n    }\n    \n    // Chamfer edges\n    translate([0, 0, head_height-2]) {\n        cylinder(h=2, d1=head_diameter, d2=head_diameter-4, $fn=6);\n    }\n}\n\n// Thread module with proper pitch\nmodule threads(height) {\n    threads_count = floor(height / thread_pitch);\n    \n    for (i = [0:threads_count-1]) {\n        translate([0, 0, i * thread_pitch]) {\n            difference() {\n                cylinder(h=thread_pitch-1, d=bolt_diameter, $fn=32);\n                cylinder(h=thread_pitch, d=bolt_diameter-wall_thickness*2, $fn=32);\n            }\n            \n            // Thread ridges\n            rotate([0, 0, 15]) {\n                for (j = [0:5]) {\n                    rotate([0, 0, j * 60]) {\n                        translate([bolt_diameter/2-wall_thickness, -wall_thickness, 0]) {\n                            cube([wall_thickness, wall_thickness*2, thread_pitch-0.5]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Seat surface with grip pattern\nmodule seat() {\n    difference() {\n        // Main seat disc\n        cylinder(h=seat_thickness, d=seat_diameter, $fn=64);\n        \n        // Center hole for bolt\n        cylinder(h=seat_thickness+1, d=bolt_diameter+2, $fn=32);\n        \n        // Lightening holes\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([seat_diameter/2 - 30, 0, -1]) {\n                    cylinder(h=seat_thickness+2, d=15, $fn=16);\n                }\n            }\n        }\n    }\n    \n    // Grip texture rings\n    for (ring = [1:5]) {\n        translate([0, 0, seat_thickness-1]) {\n            rotate_extrude(angle=360, $fn=64) {\n                translate([seat_diameter/2 - ring*25, 0]) {\n                    square([2, 2]);\n                }\n            }\n        }\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([bolt_diameter/2 + 10, -5, head_height]) {\n                cube([wall_thickness*3, 10, bolt_height/2]);\n            }\n        }\n    }\n}\n\n// Assembly\n// Base bolt structure\nunion() {\n    // Hex head at bottom\n    translate([0, 0, 0]) {\n        hex_head();\n    }\n    \n    // Threaded shaft\n    translate([0, 0, head_height]) {\n        threads(bolt_height - head_height);\n    }\n    \n    // Smooth shaft section for seat\n    translate([0, 0, head_height]) {\n        cylinder(h=bolt_height/2, d=bolt_diameter, $fn=32);\n    }\n    \n    // Structural ribs\n    ribs();\n    \n    // Seat top\n    translate([0, 0, bolt_height - seat_thickness/2]) {\n        seat();\n    }\n}\n\n// Feet pads for stability\ntranslate([0, 0, -3]) {\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([head_diameter/2 * 0.8, 0, 0]) {\n                cylinder(h=3, d=20, $fn=16);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "quiver",
    "openscad_code": "// Quiver furniture item - medium complexity realistic style\n// Approximate size: 120mm height, 60mm diameter\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main quiver body\nmodule quiver_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = 100, r1 = 30, r2 = 28);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n            cylinder(h = 102, r1 = 28 - wall_thickness, r2 = 26 - wall_thickness);\n    }\n}\n\n// Base with drainage holes\nmodule quiver_base() {\n    difference() {\n        // Base disc\n        translate([0, 0, -2])\n            cylinder(h = 4, r = 32);\n            \n        // Drainage holes\n        for (i = [0:5:355]) {\n            rotate([0, 0, i])\n                translate([20, 0, -3])\n                    cylinder(h = 6, r = 2);\n        }\n    }\n}\n\n// Reinforced rim\nmodule quiver_rim() {\n    difference() {\n        // Outer rim\n        translate([0, 0, 100])\n            cylinder(h = 8, r1 = 32, r2 = 34);\n            \n        // Inner taper\n        translate([0, 0, 99])\n            cylinder(h = 10, r1 = 26, r2 = 28);\n    }\n}\n\n// Decorative leather strap holders\nmodule strap_holder(position) {\n    translate([0, position * 30, 50])\n        rotate([90, 0, 0])\n            difference() {\n                // Main ring\n                cylinder(h = 8, r1 = 8, r2 = 8);\n                \n                // Center hole\n                cylinder(h = 10, r1 = 3, r2 = 3);\n            }\n}\n\n// Grip texture pattern\nmodule grip_texture() {\n    // Vertical ridges for grip\n    for (i = [0:10:350]) {\n        rotate([0, 0, i])\n            translate([29.5, 0, 10])\n                cylinder(h = 80, r1 = 0.5, r2 = 0.5);\n    }\n}\n\n// Furniture-style stand base\nmodule furniture_base() {\n    // Circular base plate\n    translate([0, 0, -10])\n        cylinder(h = 5, r = 40);\n        \n    // Support ring\n    translate([0, 0, -5])\n        cylinder(h = 3, r = 35);\n        \n    // Decorative feet\n    for (i = [0:90:270]) {\n        rotate([0, 0, i])\n            translate([25, 0, -10])\n                cube([15, 8, 5], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    quiver_body();\n    quiver_base();\n    quiver_rim();\n    \n    // Add strap holders\n    strap_holder(1);\n    strap_holder(-1);\n    \n    // Add grip texture\n    grip_texture();\n    \n    // Add furniture base\n    furniture_base();\n}",
    "renders": true
  },
  {
    "sports_equipment": "target",
    "openscad_code": "// Target furniture item - Archery target stand\n// Overall dimensions: 100mm wide x 50mm deep x 120mm tall\n\n$fn = 32;\n\n// Main parameters\nleg_width = 8;\nleg_height = 100;\nframe_thickness = 4;\ntarget_diameter = 80;\ntarget_thickness = 5;\nbase_depth = 50;\nbase_width = 100;\n\n// Target stand assembly\nmodule target_stand() {\n    // Base frame\n    difference() {\n        // Main base\n        cube([base_width, base_depth, 8]);\n        \n        // Lightening holes\n        for (i = [-1, 1]) {\n            translate([i * 30, 0, -1]) \n                cylinder(h = 10, r = 15);\n        }\n    }\n    \n    // Front legs\n    translate([-40, 20, 8]) \n        rotate([0, -10, 0])\n        leg();\n    translate([40, 20, 8]) \n        rotate([0, -10, 0])\n        leg();\n    \n    // Rear legs\n    translate([-40, 30, 8]) \n        rotate([0, 10, 0])\n        leg();\n    translate([40, 30, 8]) \n        rotate([0, 10, 0])\n        leg();\n    \n    // Cross brace\n    translate([0, 25, 55]) \n        rotate([0, 90, 0])\n        cylinder(h = 80, r = frame_thickness);\n    \n    // Target holder frame\n    translate([0, 25, 90]) \n        target_frame();\n}\n\n// Single leg module\nmodule leg() {\n    difference() {\n        // Main leg\n        cube([leg_width, leg_width, leg_height], center = true);\n        \n        // Lightening cutouts\n        for (i = [1:3]) {\n            translate([0, 0, -30 + i * 25])\n                cube([leg_width - 2, leg_width - 2, 15], center = true);\n        }\n    }\n}\n\n// Target holding frame\nmodule target_frame() {\n    // Outer frame\n    difference() {\n        cylinder(h = target_thickness + 2, r = target_diameter/2 + 4);\n        cylinder(h = target_thickness + 4, r = target_diameter/2);\n    }\n    \n    // Mounting brackets\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n        translate([target_diameter/2 + 2, 0, 0])\n        cube([6, 4, target_thickness + 2], center = true);\n    }\n    \n    // Target face\n    translate([0, 0, 1])\n    target_face();\n}\n\n// Target face with rings\nmodule target_face() {\n    // White outer ring\n    color(\"white\")\n    difference() {\n        cylinder(h = target_thickness, r = target_diameter/2);\n        cylinder(h = target_thickness + 1, r = target_diameter/2 - 8);\n    }\n    \n    // Black ring\n    color(\"black\")\n    difference() {\n        cylinder(h = target_thickness, r = target_diameter/2 - 8);\n        cylinder(h = target_thickness + 1, r = target_diameter/2 - 16);\n    }\n    \n    // Blue ring\n    color(\"blue\")\n    difference() {\n        cylinder(h = target_thickness, r = target_diameter/2 - 16);\n        cylinder(h = target_thickness + 1, r = target_diameter/2 - 24);\n    }\n    \n    // Red ring\n    color(\"red\")\n    difference() {\n        cylinder(h = target_thickness, r = target_diameter/2 - 24);\n        cylinder(h = target_thickness + 1, r = target_diameter/2 - 32);\n    }\n    \n    // Yellow bullseye\n    color(\"yellow\")\n    cylinder(h = target_thickness, r = target_diameter/2 - 32);\n}\n\n// Assembly\ntarget_stand();",
    "renders": true
  },
  {
    "sports_equipment": "goalpost",
    "openscad_code": "// Goalpost Bookshelf / Display Stand\n// Realistic style, medium complexity\n\n// Overall dimensions (mm)\ngoal_width = 100;\ngoal_depth = 40;\ngoal_height = 80;\npost_diameter = 8;\ncrossbar_diameter = 6;\nwall_thickness = 2;\n\nmodule goalpost_frame() {\n    // Left post with internal support\n    translate([0, 0, 0])\n        cylinder(h=goal_height, d=post_diameter, $fn=20);\n    \n    // Right post with internal support\n    translate([goal_width, 0, 0])\n        cylinder(h=goal_height, d=post_diameter, $fn=20);\n    \n    // Crossbar with internal structure\n    translate([goal_width/2, 0, goal_height])\n        rotate([90, 0, 0])\n            cylinder(h=goal_width, d=crossbar_diameter, $fn=20);\n}\n\nmodule net_supports() {\n    // Diagonal net supports\n    for(i=[0:1]) {\n        translate([i*goal_width, 0, goal_height-15])\n            rotate([0, 90, 0])\n                cylinder(h=goal_depth, d=3, $fn=8);\n    }\n}\n\nmodule shelf_platforms() {\n    // Bottom shelf\n    translate([goal_width/2, post_diameter/2, goal_height/4])\n        cube([goal_width-post_diameter, goal_depth-post_diameter, wall_thickness], center=true);\n    \n    // Middle shelf\n    translate([goal_width/2, post_diameter/2, goal_height/2])\n        cube([goal_width-post_diameter*2, goal_depth-post_diameter, wall_thickness], center=true);\n}\n\nmodule back_support() {\n    // Back frame support\n    translate([goal_width/2, goal_depth/2, goal_height/2])\n        cube([goal_width+post_diameter, wall_thickness, goal_height], center=true);\n}\n\nmodule connection_joints() {\n    // Joint reinforcements at corners\n    for(i=[0:1]) {\n        translate([i*goal_width, 0, goal_height])\n            sphere(d=post_diameter+2, $fn=16);\n    }\n}\n\nmodule grip_texture() {\n    // Textured bands on posts\n    for(h=[10:15:goal_height-10]) {\n        translate([0, 0, h])\n            cylinder(h=2, d=post_diameter+1, $fn=20);\n        \n        translate([goal_width, 0, h])\n            cylinder(h=2, d=post_diameter+1, $fn=20);\n    }\n}\n\n// Main assembly\nunion() {\n    goalpost_frame();\n    net_supports();\n    shelf_platforms();\n    back_support();\n    connection_joints();\n    grip_texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "goal",
    "openscad_code": "// Miniature football goal (table-top size) – 3D-printable, 80 mm wide\n// Goal posts and cross-bar with realistic rectangular profile\n// Netting created through thin slats (no severe over-hangs)\n// 2 mm wall thickness everywhere\n\n// ====== PARAMETERS ======\ngoalWidth  = 80;     // outer width\ngoalHeight = 48;     // outer height\ngoalDepth  = 30;     // front-to-back depth\npostSize   = 4;      // square profile of posts\nwallThk    = 2;      // wall thickness\nnetBar     = 1.5;    // thickness of net slats\nnetGap     = 4;      // spacing between net slats\n\n// ====== MAIN ASSEMBLY ======\nmodule goal() {\n    union() {\n        frame();         // structural frame\n        net();           // net representation\n        backStay();      // rear supports for stability\n    }\n}\n\n// ====== FRAME ======\nmodule frame() {\n    // left post\n    cube([postSize, postSize, goalHeight]);\n\n    // right post\n    translate([goalWidth-postSize, 0, 0])\n        cube([postSize, postSize, goalHeight]);\n\n    // cross bar\n    translate([0, 0, goalHeight-postSize])\n        cube([goalWidth, postSize, postSize]);\n\n    // bottom front bar\n    translate([0, 0, 0])\n        cube([goalWidth, postSize, postSize]);\n\n    // side depth bars\n    translate([0, postSize, 0])\n        cube([postSize, goalDepth-postSize, postSize]);\n    translate([goalWidth-postSize, postSize, 0])\n        cube([postSize, goalDepth-postSize, postSize]);\n\n    // rear bottom cross bar\n    translate([0, goalDepth-postSize, 0])\n        cube([goalWidth, postSize, postSize]);\n}\n\n// ====== NET (thin slats) ======\nmodule net() {\n    // vertical slats\n    for (x=[postSize+netGap : netGap+netBar : goalWidth-postSize-netGap-netBar]) {\n        translate([x, postSize, postSize])\n            cube([netBar, goalDepth-2*postSize, goalHeight-2*postSize]);\n    }\n\n    // horizontal slats\n    for (z=[postSize+netGap : netGap+netBar : goalHeight-postSize-netGap-netBar]) {\n        translate([postSize, postSize, z])\n            cube([goalWidth-2*postSize, goalDepth-2*postSize, netBar]);\n    }\n}\n\n// ====== BACK STAYS (triangular supports) ======\nmodule backStay() {\n    // left\n    translate([postSize/2, goalDepth, 0])\n        rotate([90, 0, -30])\n            cube([wallThk, goalHeight*0.7, postSize]);\n\n    // right\n    translate([goalWidth-postSize/2, goalDepth, 0])\n        rotate([90, 0, 30])\n            cube([wallThk, goalHeight*0.7, postSize]);\n}\n\n// ====== RENDER ======\ngoal();",
    "renders": true
  },
  {
    "sports_equipment": "basket",
    "openscad_code": "// Realistic 3D-printable storage basket (medium complexity)\n// Overall size: 100 mm x 70 mm x 80 mm\n\n// Parameters\nwall_thickness = 2;          // 2 mm printable walls\nbasket_w = 100;\nbasket_d = 70;\nbasket_h = 80;\nhandle_d = 12;\nhandle_clearance = 25;\nrail_h = 8;\nrail_gap = 3;\n\nmodule basket_base() {\n    // Main inner cavity\n    difference() {\n        // Outer rounded box\n        minkowski() {\n            cube([basket_w, basket_d, basket_h], center=true);\n            sphere(r=wall_thickness);\n        }\n        // Inner void\n        minkowski() {\n            cube([basket_w-2*wall_thickness,\n                  basket_d-2*wall_thickness,\n                  basket_h-wall_thickness], center=true);\n            sphere(r=0.1);\n        }\n    }\n}\n\nmodule strips() {\n    // Vertical slats around the sides\n    strip_w = 3;\n    strip_gap = 6;\n    strip_h = basket_h - 2*wall_thickness;\n    \n    // Long sides\n    for (x = [-basket_w/2+wall_thickness+strip_w/2 : strip_w+strip_gap : basket_w/2-wall_thickness-strip_w/2]) {\n        translate([x, 0, 0])\n            cube([strip_w, basket_d-2*wall_thickness, strip_h], center=true);\n    }\n    \n    // Short sides\n    for (y = [-basket_d/2+wall_thickness+strip_w/2 : strip_w+strip_gap : basket_d/2-wall_thickness-strip_w/2]) {\n        translate([0, y, 0])\n            cube([basket_w-2*wall_thickness, strip_w, strip_h], center=true);\n    }\n}\n\nmodule handles() {\n    // Handle rail on left side\n    translate([-basket_w/2-wall_thickness/2, 0, basket_h/2-handle_clearance/2]) {\n        rotate([0, 90, 0])\n            cylinder(h=basket_d, d=handle_d, center=true);\n    }\n    \n    // Handle rail on right side\n    translate([basket_w/2+wall_thickness/2, 0, basket_h/2-handle_clearance/2]) {\n        rotate([0, 90, 0])\n            cylinder(h=basket_d, d=handle_d, center=true);\n    }\n}\n\nmodule bottom_feet() {\n    // Four small rounded feet for print-bed clearance and stability\n    foot_r = 4;\n    foot_positions = [\n        [-basket_w/2+foot_r+5, -basket_d/2+foot_r+5, -basket_h/2+foot_r],\n        [-basket_w/2+foot_r+5,  basket_d/2-foot_r-5, -basket_h/2+foot_r],\n        [ basket_w/2-foot_r-5, -basket_d/2+foot_r+5, -basket_h/2+foot_r],\n        [ basket_w/2-foot_r-5,  basket_d/2-foot_r-5, -basket_h/2+foot_r]\n    ];\n    \n    for (pos = foot_positions) {\n        translate(pos)\n            sphere(r=foot_r);\n    }\n}\n\nmodule rim() {\n    // Top reinforcing rim\n    difference() {\n        // Outer rim\n        translate([0, 0, basket_h/2-wall_thickness/2]) {\n            cube([basket_w+2*rail_gap, basket_d+2*rail_gap, rail_h], center=true);\n        }\n        // Remove center\n        translate([0, 0, basket_h/2-wall_thickness/2]) {\n            cube([basket_w-2*wall_thickness, basket_d-2*wall_thickness, rail_h+2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    basket_base();\n    strips();\n    handles();\n    bottom_feet();\n    rim();\n}",
    "renders": true
  },
  {
    "sports_equipment": "backboard",
    "openscad_code": "// Realistic Backboard Furniture Item - Medium Complexity\n// Dimensions: 120mm width x 90mm height x 15mm depth\n\n$fn = 32;\nwall_thickness = 2;\nbackboard_width = 120;\nbackboard_height = 90;\nbackboard_depth = 15;\nframe_width = 8;\n\nmodule backboard_frame() {\n    // Outer frame - front face\n    difference() {\n        // Main frame\n        cube([backboard_width, backboard_height, backboard_depth], center=true);\n        \n        // Cut inner opening\n        translate([0, 0, 1])\n        cube([backboard_width - frame_width*2, backboard_height - frame_width*2, backboard_depth + 2], center=true);\n    }\n}\n\nmodule backboard_panel() {\n    // Main backboard panel\n    translate([0, 0, -backboard_depth/2 + wall_thickness/2])\n    cube([backboard_width - frame_width*2 - wall_thickness*2, \n          backboard_height - frame_width*2 - wall_thickness*2, \n          wall_thickness], center=true);\n}\n\nmodule mounting_holes() {\n    // Four mounting holes for wall attachment\n    hole_diameter = 6;\n    hole_depth = 20;\n    \n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (backboard_width/2 - frame_width - 10), \n                      y * (backboard_height/2 - frame_width - 10), \n                      -backboard_depth/2 - 1])\n            cylinder(h=hole_depth, d=hole_diameter, center=false);\n        }\n    }\n}\n\nmodule corner_braces() {\n    // Reinforcement braces at corners\n    brace_size = 12;\n    brace_thickness = 3;\n    \n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (backboard_width/2 - brace_size/2), \n                      y * (backboard_height/2 - brace_size/2), \n                      0])\n            cube([brace_size, brace_size, brace_thickness], center=true);\n        }\n    }\n}\n\nmodule center_target() {\n    // Target circle marking on backboard\n    target_diameter = 25;\n    target_thickness = 1;\n    \n    translate([0, 0, backboard_depth/2 + 0.1])\n    cylinder(h=target_thickness, d=target_diameter, center=true);\n    \n    // Inner circle\n    translate([0, 0, backboard_depth/2 + 0.2])\n    cylinder(h=target_thickness, d=target_diameter/2, center=true);\n}\n\nmodule grip_texture() {\n    // Horizontal grip lines on back surface\n    line_width = 1;\n    line_height = 0.5;\n    spacing = 5;\n    num_lines = 10;\n    \n    for(i = [-num_lines/2:num_lines/2]) {\n        translate([0, i * spacing, -backboard_depth/2 + wall_thickness + 0.1])\n        cube([backboard_width - frame_width*2 - wall_thickness*2, \n              line_width, \n              line_height], center=true);\n    }\n}\n\nmodule support_ribs() {\n    // Internal support structure\n    rib_thickness = 2;\n    rib_spacing = 20;\n    \n    // Vertical ribs\n    for(x = [-backboard_width/2 + frame_width + rib_spacing:rib_spacing:backboard_width/2 - frame_width - rib_spacing]) {\n        translate([x, 0, 0])\n        cube([rib_thickness, backboard_height - frame_width*2, backboard_depth - wall_thickness*2], center=true);\n    }\n    \n    // Horizontal ribs\n    for(y = [-backboard_height/2 + frame_width + rib_spacing:rib_spacing:backboard_height/2 - frame_width - rib_spacing]) {\n        translate([0, y, 0])\n        cube([backboard_width - frame_width*2, rib_thickness, backboard_depth - wall_thickness*2], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Frame structure\n    backboard_frame();\n    \n    // Backboard panel\n    backboard_panel();\n    \n    // Mounting features\n    difference() {\n        // Corner braces\n        corner_braces();\n        \n        // Mounting holes\n        mounting_holes();\n    }\n    \n    // Surface details\n    center_target();\n    \n    // Grip texture on back\n    grip_texture();\n    \n    // Internal structure (visible through mounting holes)\n    support_ribs();\n}",
    "renders": true
  },
  {
    "sports_equipment": "rim",
    "openscad_code": "// Bicycle Rim Furniture Item - Realistic Style\n// Medium complexity rim designed as a side table base\n// Overall dimensions: 150mm diameter, 50mm height\n\n// Parameters\nrim_diameter = 150;\nrim_height = 50;\nrim_thickness = 5;\nspoke_count = 16;\nspoke_diameter = 4;\nhub_diameter = 30;\nhub_height = 40;\ntable_top_diameter = 120;\ntable_top_thickness = 3;\nleg_width = 8;\n\n// Main rim body\nmodule rim_body() {\n    difference() {\n        // Outer rim cylinder\n        cylinder(h=rim_height, d=rim_diameter, $fn=100);\n        \n        // Inner hollow space\n        translate([0, 0, -1])\n            cylinder(h=rim_height+2, d=rim_diameter-rim_thickness*2, $fn=100);\n        \n        // Spoke holes\n        for(i=[0:spoke_count-1]) {\n            rotate([0, 0, i*360/spoke_count])\n                translate([rim_diameter/2-rim_thickness, 0, rim_height/2])\n                    rotate([90, 0, 0])\n                        cylinder(h=rim_thickness+1, d=spoke_diameter+1, $fn=20);\n        }\n    }\n}\n\n// Hub assembly\nmodule hub_assembly() {\n    // Central hub\n    color(\"silver\")\n    difference() {\n        cylinder(h=hub_height, d=hub_diameter, $fn=50);\n        translate([0, 0, -1])\n            cylinder(h=hub_height+2, d=hub_diameter-8, $fn=50);\n    }\n    \n    // Spoke flanges\n    for(i=[0:spoke_count-1]) {\n        rotate([0, 0, i*360/spoke_count + 360/spoke_count/2]) {\n            translate([rim_diameter/2-rim_thickness-10, 0, 0])\n                rotate([0, 0, 0])\n                    cylinder(h=spoke_diameter, d=spoke_diameter*1.5, $fn=20);\n        }\n    }\n}\n\n// Spokes\nmodule spokes() {\n    for(i=[0:spoke_count-1]) {\n        rotate([0, 0, i*360/spoke_count]) {\n            color(\"gray\")\n            translate([hub_diameter/2, 0, hub_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h=rim_diameter/2-hub_diameter/2-rim_thickness, d=spoke_diameter, $fn=12);\n        }\n    }\n}\n\n// Table top surface\nmodule table_top() {\n    color(\"wood\")\n    translate([0, 0, rim_height]) {\n        difference() {\n            cylinder(h=table_top_thickness, d=table_top_diameter, $fn=100);\n            translate([0, 0, -1])\n                cylinder(h=table_top_thickness+2, d=table_top_diameter-4, $fn=100);\n        }\n        \n        // Support ribs\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([0, table_top_diameter/4, 0])\n                    cube([table_top_diameter/2, table_top_thickness*2, table_top_thickness], center=true);\n        }\n    }\n}\n\n// Furniture legs\nmodule legs() {\n    for(i=[0:3]) {\n        rotate([0, 0, i*120]) {\n            color(\"black\")\n            translate([rim_diameter/2-5, 0, -25]) {\n                cube([leg_width, leg_width, 50], center=true);\n                \n                // Foot pad\n                translate([0, 0, -25.5])\n                    cube([leg_width+2, leg_width+2, 1], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Rim as furniture base\n    rim_body();\n    \n    // Hub and spokes as decorative elements\n    hub_assembly();\n    spokes();\n    \n    // Table top\n    table_top();\n    \n    // Support legs\n    legs();\n}\n\n// Grip texture on rim edges\nmodule grip_texture() {\n    translate([0, 0, 0]) {\n        for(z=[0:rim_height-1]) {\n            for(i=[0:180]) {\n                rotate([0, 0, i*2])\n                    translate([rim_diameter/2-rim_thickness/2, 0, z])\n                        cube([1, 0.5, 1], center=true);\n            }\n        }\n    }\n}\n\n// Add grip texture\ndifference() {\n    rim_body();\n    grip_texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "net",
    "openscad_code": "// Realistic Tennis Racquet Furniture – Wall-Mounted Display Rack\n// Overall size: 150mm wide × 120mm high × 80mm deep\n// Wall thickness: 2 mm throughout for 3D-printability\n// No overhangs >45°; all bridges printable without support\n\n// Color scheme\n$fn=40;          // Smooth curves\n\n// --- Parameters ----------------------------------------------------------\ngrip_d   = 26;   // Handle diameter\ngrip_l   = 100;  // Handle length\nhead_w   = 90;   // Inner racquet head width\nhead_h   = 110;  // Inner racquet head height\nframe_t  = 4;    // Frame tube diameter\nwall_t   = 2;    // Wall thickness for 3D printing\nback_len = 120;  // Overall back-plate length\nback_h   = 12;   // Back-plate thickness\nslot_w   = 6;    // String slot width for printing\nslot_h   = 1;    // String slot depth\n\n// --- Back-plate ----------------------------------------------------------\nmodule back_plate() {\n    difference() {\n        // Main plate\n        translate([0,-back_h/2,0])\n            cube([back_len, back_h, 80], center=true);\n        \n        // Mounting holes (4 mm holes for screws)\n        for (x=[-50, 50])\n            translate([x,0,40-1])\n                rotate([90,0,0]) cylinder(h=back_h+2, d=4, center=true);\n    }\n}\n\n// --- Racquet head --------------------------------------------------------\nmodule racquet_head() {\n    // Outer frame ellipse\n    difference() {\n        scale([head_w/2+frame_t, head_h/2+frame_t, 1])\n            cylinder(h=frame_t, d=2, center=true);\n        // Inner void\n        scale([head_w/2-frame_t, head_h/2-frame_t, 2])\n            cylinder(h=frame_t+2, d=2, center=true);\n    }\n}\n\n// --- Racquet handle ------------------------------------------------------\nmodule handle() {\n    // Main grip tube\n    translate([0, -(grip_l/2+head_h/2+frame_t), 0])\n        rotate([90,0,0])\n            cylinder(h=grip_l, d=grip_d, center=true);\n    // Butt cap flare\n    translate([0, -(grip_l+head_h/2+frame_t), 0])\n        rotate([90,0,0])\n            cylinder(h=8, d1=grip_d+6, d2=grip_d, center=false);\n}\n\n// --- Net (strings) -------------------------------------------------------\nmodule net() {\n    // Horizontal strings\n    for (y = [-head_h/2+5 : 5 : head_h/2-5]) {\n        translate([0, y, 0])\n            cube([head_w-10, slot_h, slot_w], center=true);\n    }\n    // Vertical strings\n    for (x = [-head_w/2+5 : 5 : head_w/2-5]) {\n        translate([x, 0, 0])\n            cube([slot_h, head_h-10, slot_w], center=true);\n    }\n}\n\n// --- Assembly ------------------------------------------------------------\nunion() {\n    back_plate();\n\n    // Racquet head and strings\n    translate([0, 40, 0])\n        union() {\n            racquet_head();\n            net();\n        }\n\n    // Handle\n    translate([0, 40, 0])\n        handle();\n}",
    "renders": true
  },
  {
    "sports_equipment": "post",
    "openscad_code": "// Bed Post - 4-post style with turned details and tenon joint\n// Overall height 100 mm, designed for 3D printing\n\nmodule turned_detail(diameter, height, segments=16) {\n    // Create a turned detail with taper\n    cylinder(h=height, d1=diameter*1.2, d2=diameter, $fn=segments);\n}\n\nmodule post_body() {\n    union() {\n        // Base foot - 20mm diameter, 4mm thick\n        cylinder(h=4, d=20, $fn=32);\n        \n        // First turned detail - acorn shape\n        translate([0, 0, 4])\n        turned_detail(18, 8);\n        \n        // Main shaft - 16mm diameter, 60mm long\n        translate([0, 0, 12])\n        cylinder(h=60, d=16, $fn=32);\n        \n        // Second turned detail - bead\n        translate([0, 0, 72])\n        turned_detail(20, 6);\n        \n        // Upper shaft - 12mm diameter, 20mm long\n        translate([0, 0, 78])\n        cylinder(h=20, d=12, $fn=32);\n        \n        // Tenon joint - 8mm diameter, 8mm long for connecting to headboard\n        translate([0, 0, 98])\n        cylinder(h=8, d=8, $fn=16);\n    }\n}\n\nmodule grip_texture() {\n    // Add grip rings around main shaft\n    for(i=[1:4:25]) {\n        translate([0, 0, 12 + i*2])\n        difference() {\n            cylinder(h=1, d=16.5, $fn=32);\n            cylinder(h=1.2, d=15.5, $fn=32);\n        }\n    }\n}\n\nmodule structural_reinforcement() {\n    // Add internal ribbing for strength\n    difference() {\n        cylinder(h=60, d=12, $fn=32);\n        // Hollow center with 2mm walls\n        translate([0, 0, -1])\n        cylinder(h=62, d=8, $fn=32);\n    }\n    \n    // Add cross braces inside\n    for(angle=[0:90:270]) {\n        rotate([0, 0, angle])\n        translate([0, 5.5, 30])\n        cube([1, 11, 58], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    post_body();\n    \n    // Add grip texture\n    grip_texture();\n    \n    // Add decorative collar at joint\n    translate([0, 0, 90])\n    difference() {\n        cylinder(h=4, d=14, $fn=32);\n        cylinder(h=4.2, d=10, $fn=32);\n    }\n}\n\n// Add subtle taper to tenon for easier assembly\ntranslate([0, 0, 98])\n    cylinder(h=8, d1=8.2, d2=7.8, $fn=16);",
    "renders": true
  },
  {
    "sports_equipment": "racket",
    "openscad_code": "// Tennis Racket Furniture Piece - Medium Complexity\n// Realistic style with structural details\n\n// Overall dimensions (mm)\nracket_length = 120;\nhead_width = 55;\nhead_height = 65;\nhandle_length = 45;\nhandle_diameter = 12;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main racket head\nmodule racket_head() {\n    // Outer frame\n    difference() {\n        // Main oval shape\n        scale([head_width/2, head_height/2, 1])\n            cylinder(h=wall_thickness*2, r=1, $fn=50);\n        \n        // Inner cutout\n        translate([0, 0, -0.1])\n            scale([(head_width-wall_thickness*2)/2, (head_height-wall_thickness*2)/2, 1])\n                cylinder(h=wall_thickness*2+0.2, r=1, $fn=50);\n    }\n    \n    // String pattern\n    string_spacing = 3;\n    for (x = [-head_width/2+5: string_spacing: head_width/2-5]) {\n        translate([x, 0, wall_thickness])\n            cube([0.5, head_height-10, 0.5]);\n    }\n    for (y = [-head_height/2+5: string_spacing: head_height/2-5]) {\n        translate([0, y, wall_thickness])\n            cube([head_width-10, 0.5, 0.5]);\n    }\n}\n\n// Handle with grip texture\nmodule racket_handle() {\n    // Main handle tube\n    cylinder(h=handle_length, r=handle_diameter/2, $fn=20);\n    \n    // Grip rings\n    for (i = [0:3:handle_length-5]) {\n        translate([0, 0, i+2])\n            difference() {\n                cylinder(h=2, r=handle_diameter/2, $fn=20);\n                cylinder(h=2.2, r=handle_diameter/2-1, $fn=20);\n            }\n    }\n    \n    // End cap\n    translate([0, 0, handle_length-2])\n        cylinder(h=4, r=handle_diameter/2+1, $fn=20);\n}\n\n// Throat connecting head and handle\nmodule racket_throat() {\n    // Tapered connection\n    hull() {\n        translate([0, -head_height/2, wall_thickness])\n            sphere(r=wall_thickness*2);\n        translate([0, 0, 0])\n            sphere(r=handle_diameter/2);\n    }\n}\n\n// Structural reinforcement\nmodule reinforcement_brace() {\n    // Diagonal braces\n    translate([head_width/4, -head_height/2, wall_thickness])\n        rotate([0, 0, -30])\n            cube([15, wall_thickness, wall_thickness*2]);\n    translate([-head_width/4, -head_height/2, wall_thickness])\n        rotate([0, 0, 30])\n            cube([15, wall_thickness, wall_thickness*2]);\n}\n\n// Assemble the complete racket\nunion() {\n    // Racket head at top\n    translate([0, 0, handle_length])\n        racket_head();\n    \n    // Handle at bottom\n    translate([0, 0, 0])\n        racket_handle();\n    \n    // Throat connection\n    translate([0, -head_height/2, handle_length-wall_thickness])\n        racket_throat();\n    \n    // Reinforcements\n    translate([0, 0, handle_length-wall_thickness])\n        reinforcement_brace();\n}\n\n// Mounting bracket for furniture use\ntranslate([0, -head_height/2-5, handle_length/2])\n    rotate([90, 0, 0])\n        difference() {\n            // Main bracket\n            cube([20, 10, 5], center=true);\n            // Screw holes\n            translate([-7, 0, 0])\n                cylinder(h=6, r=1.5, $fn=10);\n            translate([7, 0, 0])\n                cylinder(h=6, r=1.5, $fn=10);\n        }",
    "renders": true
  },
  {
    "sports_equipment": "bat",
    "openscad_code": "// Realistic Bat Furniture Item - Medium Complexity\n// 3D printable bat with furniture-like structural elements\n\n$fn = 32;\n\n// Overall dimensions (mm)\nbat_length = 120;\nbat_width = 35;\nbat_height = 35;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule bat_handle() {\n    // Main handle with grip texture\n    difference() {\n        // Handle body\n        translate([0, 0, 0])\n            scale([1, 1.2, 1])\n                cylinder(h=60, d1=25, d2=22);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, -1])\n            cylinder(h=62, d=25 - 2*wall_thickness);\n    }\n    \n    // Grip rings\n    for(i = [5:10:55]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(h=2, d=28);\n                cylinder(h=2.2, d=26);\n            }\n    }\n}\n\nmodule bat_barrel() {\n    // Main barrel with furniture-like joints\n    difference() {\n        // Barrel body - tapered cylinder\n        translate([0, 0, 60])\n            cylinder(h=60, d1=35, d2=32);\n        \n        // Internal hollow for printing\n        translate([0, 0, 59])\n            cylinder(h=62, d=35 - 2*wall_thickness);\n    }\n    \n    // Structural reinforcement rings (furniture-like joints)\n    for(i = [65:15:110]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(h=3, d=38);\n                cylinder(h=3.2, d=34);\n            }\n    }\n}\n\nmodule bat_knob() {\n    // Furniture-like end cap/knob\n    difference() {\n        // Main knob\n        translate([0, 0, -5])\n            cylinder(h=10, d1=30, d2=25);\n        \n        // Hollow section\n        translate([0, 0, -6])\n            cylinder(h=12, d=30 - 2*wall_thickness);\n    }\n    \n    // Decorative ring detail\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h=2, d=28);\n            cylinder(h=2.2, d=24);\n        }\n}\n\nmodule bat_sweet_spot_indicator() {\n    // Furniture-style decorative element indicating sweet spot\n    translate([0, 0, 85])\n        difference() {\n            // Elliptical indicator\n            scale([1.5, 0.8, 0.3])\n                sphere(d=25);\n            \n            // Cutout for 3D printing\n            scale([1.3, 0.6, 0.4])\n                sphere(d=20);\n        }\n}\n\nmodule bat_logo() {\n    // Furniture-style brand/logo area\n    translate([17.5, 0, 40])\n        rotate([0, 90, 0])\n            difference() {\n                // Logo plate\n                cube([15, 8, 1]);\n                \n                // Engraved text channel\n                translate([0.5, 2, -0.5])\n                    cube([14, 4, 1.5]);\n            }\n}\n\n// Assembly of the bat furniture item\nunion() {\n    bat_handle();\n    bat_barrel();\n    bat_knob();\n    bat_sweet_spot_indicator();\n    bat_logo();\n}",
    "renders": true
  },
  {
    "sports_equipment": "club",
    "openscad_code": "// Golf Club Driver (Wood) - Realistic Style, Medium Complexity\n// Overall length: 120mm, suitable for 3D printing\n\n// Club head parameters\nhead_length = 48;\nhead_width = 32;\nhead_height = 36;\nhosel_diameter = 8.5;\nhosel_length = 12;\n\n// Shaft parameters\nshaft_length = 72;\nshaft_diameter = 7.5;\n\n// Grip parameters\ngrip_length = 25;\ngrip_diameter_top = 9.5;\ngrip_diameter_bottom = 8.5;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Club head module\nmodule club_head() {\n    difference() {\n        // Main head body - ellipsoid shape\n        scale([1, 0.85, 0.9])\n        sphere(d=head_length, $fn=50);\n        \n        // Hollow interior for weight reduction\n        translate([0, 0, -wall])\n        scale([1, 0.85, 0.9])\n        sphere(d=head_length - 2*wall, $fn=50);\n        \n        // Face angle (loft ~10 degrees)\n        rotate([0, -10, 0])\n        translate([-head_length/2 - 2, 0, -head_height/2])\n        cube([head_length, head_width*2, head_height*2]);\n        \n        // Hosel hole\n        rotate([90, 0, 0])\n        translate([0, 0, -head_length/2 - 2])\n        cylinder(h=head_length, d=hosel_diameter, $fn=20);\n    }\n    \n    // Face grooves\n    for(i = [-8:2:8]) {\n        translate([head_length/2 - 1, i*2, -head_height/3])\n        rotate([0, 10, 0])\n        cube([0.5, 1.5, head_height/2]);\n    }\n    \n    // Sole plate texture\n    translate([0, 0, -head_height/2 + 1])\n    difference() {\n        cube([head_length - 10, head_width - 8, 2], center=true);\n        for(x = [-head_length/2 + 5:5:head_length/2 - 5]) {\n            translate([x, 0, -0.5])\n            cube([0.5, head_width - 8, 3]);\n        }\n    }\n}\n\n// Shaft module\nmodule shaft() {\n    difference() {\n        // Tapered shaft\n        cylinder(h=shaft_length, d1=shaft_diameter, d2=shaft_diameter*0.9, $fn=20);\n        // Hollow core\n        translate([0, 0, wall])\n        cylinder(h=shaft_length - wall, d1=shaft_diameter - 2*wall, d2=shaft_diameter*0.9 - 2*wall, $fn=20);\n    }\n}\n\n// Grip module\nmodule grip() {\n    // Main grip body\n    difference() {\n        cylinder(h=grip_length, d1=grip_diameter_top, d2=grip_diameter_bottom, $fn=20);\n        // Hollow core\n        translate([0, 0, wall])\n        cylinder(h=grip_length - wall, d1=grip_diameter_top - 2*wall, d2=grip_diameter_bottom - 2*wall, $fn=20);\n    }\n    \n    // Grip texture rings\n    for(i = [0:2:grip_length - 2]) {\n        translate([0, 0, i])\n        difference() {\n            cylinder(h=1, d=grip_diameter_top - 0.5, $fn=20);\n            cylinder(h=1.2, d=grip_diameter_top - 1.5, $fn=20);\n        }\n    }\n}\n\n// Hosel connection module\nmodule hosel_joint() {\n    // Reinforced hosel\n    difference() {\n        cylinder(h=hosel_length, d1=hosel_diameter + 2, d2=hosel_diameter, $fn=20);\n        cylinder(h=hosel_length + 2, d=hosel_diameter, $fn=20);\n    }\n}\n\n// Assembly\nunion() {\n    // Club head positioned at origin\n    club_head();\n    \n    // Hosel connection\n    translate([head_length/2 - 5, 0, head_height/2 - 8])\n    rotate([0, 90, 0])\n    hosel_joint();\n    \n    // Shaft connected to hosel\n    translate([head_length/2 - 5, 0, head_height/2 - 8])\n    rotate([0, 90, 0])\n    translate([0, 0, hosel_length])\n    shaft();\n    \n    // Grip at end of shaft\n    translate([head_length/2 - 5, 0, head_height/2 - 8])\n    rotate([0, 90, 0])\n    translate([0, 0, hosel_length + shaft_length - grip_length + 5])\n    grip();\n}",
    "renders": true
  },
  {
    "sports_equipment": "stick",
    "openscad_code": "// Stick furniture - realistic style pool cue stand\n// Medium complexity 3D printable design\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\nbase_diameter = 80;\nbase_height = 6;\npost_diameter = 12;\npost_height = 120;\nholder_diameter = 25;\nholder_height = 15;\ncue_rest_diameter = 8;\ncue_rest_depth = 10;\n\n// Main base\nmodule base() {\n    difference() {\n        // Base cylinder\n        cylinder(h = base_height, d = base_diameter, center = false);\n        \n        // Center hole for post\n        translate([0, 0, -1])\n            cylinder(h = base_height + 2, d = post_diameter + wall_thickness, center = false);\n        \n        // Cue slots around edge\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([base_diameter/2 - 15, 0, -1])\n                    cube([30, 8, base_height + 2], center = true);\n        }\n    }\n}\n\n// Central post\nmodule post() {\n    cylinder(h = post_height, d = post_diameter, center = false);\n}\n\n// Cue holder ring\nmodule cue_holder() {\n    difference() {\n        // Main ring\n        translate([0, 0, post_height - holder_height])\n            cylinder(h = holder_height, d = holder_diameter, center = false);\n        \n        // Center hole\n        translate([0, 0, post_height - holder_height - 1])\n            cylinder(h = holder_height + 2, d = post_diameter, center = false);\n        \n        // Cue holes\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([holder_diameter/2 - 8, 0, post_height - holder_height - 1])\n                    rotate([90, 0, 0])\n                        cylinder(h = 20, d = cue_rest_diameter + 1, center = true);\n        }\n    }\n}\n\n// Support brackets\nmodule brackets() {\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([post_diameter/2, 0, base_height])\n                cube([20, wall_thickness * 2, 15], center = true);\n    }\n}\n\n// Grip texture on post\nmodule grip_texture() {\n    for(h = [base_height + 20:5:post_height - 20]) {\n        color(\"gray\")\n            translate([0, 0, h])\n                cylinder(h = 1, d1 = post_diameter, d2 = post_diameter + 1, center = false);\n    }\n}\n\n// Assembly\nunion() {\n    // Base with slots\n    base();\n    \n    // Central post\n    translate([0, 0, base_height])\n        post();\n    \n    // Grip texture\n    grip_texture();\n    \n    // Cue holder ring\n    cue_holder();\n    \n    // Support brackets\n    brackets();\n    \n    // Bottom support ring\n    translate([0, 0, base_height + 5])\n        difference() {\n            cylinder(h = 3, d = 50, center = false);\n            cylinder(h = 5, d = post_diameter + 1, center = false);\n        }\n}",
    "renders": true
  },
  {
    "sports_equipment": "mallet",
    "openscad_code": "// Realistic Mallet Furniture Item - Medium Complexity\n// Overall dimensions: ~120mm x 45mm x 45mm\n\nmodule handle_grooves() {\n    for (i = [5:10:85]) {\n        translate([0, 0, i])\n        difference() {\n            cylinder(h=2, d=22, $fn=32);\n            cylinder(h=3, d=20, $fn=32);\n        }\n    }\n}\n\nmodule handle() {\n    difference() {\n        // Main handle body\n        union() {\n            cylinder(h=90, d=20, $fn=32);\n            // Tapered end\n            translate([0, 0, -5])\n            cylinder(h=10, d1=20, d2=18, $fn=32);\n        }\n        // Hollow core for weight reduction\n        cylinder(h=95, d=16, $fn=32);\n    }\n    // Grip texture grooves\n    handle_grooves();\n}\n\nmodule mallet_head() {\n    difference() {\n        union() {\n            // Main striking head - cylinder with rounded ends\n            translate([0, 0, 0])\n            cylinder(h=35, d=42, $fn=64);\n            \n            // Rounded ends using spheres\n            translate([0, 0, -17.5])\n            sphere(d=42, $fn=64);\n            translate([0, 0, 17.5])\n            sphere(d=42, $fn=64);\n            \n            // Connection collar\n            translate([0, 0, -25])\n            cylinder(h=10, d=24, $fn=32);\n        }\n        \n        // Handle insertion hole\n        translate([0, 0, -30])\n        cylinder(h=20, d=22, $fn=32);\n        \n        // Weight reduction cavity\n        translate([0, 0, -10])\n        cylinder(h=20, d=38, $fn=64);\n    }\n    \n    // Structural reinforcement rings\n    for (z = [-10:5:10]) {\n        translate([0, 0, z])\n        difference() {\n            cylinder(h=2, d=44, $fn=64);\n            cylinder(h=3, d=40, $fn=64);\n        }\n    }\n}\n\nmodule mallet_assembly() {\n    // Handle positioned vertically\n    translate([0, 0, 0])\n    color(\"DarkGoldenrod\")\n    handle();\n    \n    // Mallet head positioned on top\n    translate([0, 0, 90])\n    color(\"SaddleBrown\")\n    mallet_head();\n    \n    // Furniture-style base support\n    translate([0, 0, -8])\n    difference() {\n        // Base plate\n        cube([60, 60, 4], center=true);\n        // Center hole for handle\n        translate([0, 0, -1])\n        cylinder(h=6, d=22, $fn=32);\n    }\n}\n\n// Render the complete mallet\nmallet_assembly();",
    "renders": true
  },
  {
    "sports_equipment": "cue",
    "openscad_code": "// Pool/Billiards Cue Stick (Miniature – 150 mm long)\n// Realistic style – medium complexity\n// 3D-printable, 2 mm wall thickness, no overhangs >45°\n\n// Overall scale factor (un-scaled length = 150 mm)\nscale_factor = 1;\n\n// Main dimensions\ntotal_len = 150 * scale_factor;\nshaft_d   = 10 * scale_factor;\nbutt_d    = 18 * scale_factor;\ntip_d     = 6 * scale_factor;\nferrule_l = 12 * scale_factor;\ngrip_l    = 60 * scale_factor;\n\nmodule cue_stick() {\n    // Tip\n    translate([0, 0, 0])\n        cylinder(d1 = tip_d, d2 = shaft_d, h = 3 * scale_factor, $fn = 32);\n\n    // Shaft\n    translate([0, 0, 3 * scale_factor])\n        cylinder(d = shaft_d, h = total_len - grip_l - ferrule_l - 3 * scale_factor, $fn = 32);\n\n    // Ferrule (white ring)\n    translate([0, 0, total_len - grip_l - ferrule_l])\n        cylinder(d = shaft_d + 2 * scale_factor, h = ferrule_l, $fn = 32);\n\n    // Butt section\n    difference() {\n        // Solid butt taper\n        translate([0, 0, total_len - grip_l])\n            cylinder(d1 = shaft_d + 2 * scale_factor, d2 = butt_d, h = grip_l, $fn = 32);\n\n        // Rings for grip texture\n        for (i = [0 : 5 : grip_l - 5 * scale_factor]) {\n            translate([0, 0, total_len - grip_l + i + 1 * scale_factor])\n                cylinder(d = butt_d + 0.5 * scale_factor, h = 2 * scale_factor, $fn = 32);\n        }\n    }\n\n    // Rubber bumper (simple dome)\n    translate([0, 0, total_len])\n        sphere(d = butt_d, $fn = 32);\n}\n\n// Optional cue rack cradle (furniture element)\nmodule cue_rack() {\n    difference() {\n        // Base block\n        cube([butt_d + 8 * scale_factor, 20 * scale_factor, 5 * scale_factor], center = true);\n\n        // Cue cut-out\n        translate([0, 0, -2.5 * scale_factor])\n            cylinder(d = butt_d + 2 * scale_factor, h = 7 * scale_factor, $fn = 32);\n    }\n}\n\n// Assembly\nunion() {\n    cue_stick();\n\n    // Position rack under butt end\n    translate([0, -30 * scale_factor, -2.5 * scale_factor])\n        cue_rack();\n}",
    "renders": true
  },
  {
    "sports_equipment": "glove",
    "openscad_code": "// Realistic Glove Furniture – OpenSCAD\n// A medium-complexity 3D-printable glove-shaped decorative shelf\n// External size: ~110 mm overall length\n\n$fn = 30;\n\n// Global wall thickness\nwall = 2;\n\n// Basic palm block – hollowed for storage\nmodule palm() {\n    difference() {\n        // Outer palm shell (rounded box)\n        hull() {\n            translate([-20, 0, 0]) sphere(18);\n            translate([20, 0, 0]) sphere(18);\n            translate([0, -22, 0]) sphere(18);\n            translate([0, 22, 0]) sphere(18);\n        }\n        // Inner cavity\n        scale([0.9, 0.9, 0.9])\n            hull() {\n                translate([-20, 0, 0]) sphere(18);\n                translate([20, 0, 0]) sphere(18);\n                translate([0, -22, 0]) sphere(18);\n                translate([0, 22, 0]) sphere(18);\n            }\n    }\n}\n\n// Single finger tube\nmodule finger(len, dia) {\n    difference() {\n        // Outer\n        cylinder(h = len, d = dia, center = false);\n        // Inner hollow\n        cylinder(h = len, d = dia - 2*wall, center = false);\n    }\n}\n\n// Four fingers + thumb assembly\nmodule fingers() {\n    // Index, middle, ring, pinky\n    for (i = [0:3]) {\n        translate([10 + i*10, 20, 0])\n            rotate([90, 0, 0])\n                finger(len = 35 - 5*i, dia = 12 - 1*i);\n    }\n    // Thumb\n    translate([-25, 0, 8])\n        rotate([0, 90, 0])\n            finger(len = 30, dia = 14);\n}\n\n// Wrist cuff shelf\nmodule cuff() {\n    difference() {\n        cylinder(h = 20, d1 = 50, d2 = 60, center = false);\n        cylinder(h = 20, d1 = 50 - 2*wall, d2 = 60 - 2*wall, center = false);\n    }\n}\n\n// Grip texture ribs along palm side\nmodule grip() {\n    for (i = [-20:4:20]) {\n        translate([i, -25, 0])\n            cube([2, 50, 1.5]);\n    }\n}\n\n// Structural hidden join rib inside palm\nmodule join_rib() {\n    translate([0, 0, -15])\n        cube([40, 44, wall], center = true);\n}\n\n// Assembly\nunion() {\n    palm();\n    fingers();\n    \n    // Wrist cuff\n    translate([0, 0, -20])\n        cuff();\n    \n    // Grip texture\n    translate([0, 0, -18])\n        grip();\n    \n    // Internal joining rib for print strength\n    join_rib();\n}",
    "renders": true
  },
  {
    "sports_equipment": "mitt",
    "openscad_code": "// Realistic Baseball Mitt Furniture Piece\n// Medium complexity 3D printable model\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule mitt_body() {\n    // Main palm section\n    difference() {\n        // Outer shell\n        translate([0, 0, 15]) {\n            scale([1, 0.8, 0.6]) {\n                sphere(r = 45);\n            }\n        }\n        \n        // Inner cavity\n        translate([0, 0, 15]) {\n            scale([0.9, 0.7, 0.5]) {\n                sphere(r = 42);\n            }\n        }\n    }\n}\n\nmodule thumb() {\n    // Thumb section\n    translate([-35, 25, 10]) {\n        rotate([0, 20, -30]) {\n            scale([0.6, 0.8, 0.5]) {\n                sphere(r = 20);\n            }\n        }\n    }\n}\n\nmodule fingers() {\n    // Finger sections (4 fingers)\n    for(i = [0:3]) {\n        translate([20 + i*12, -20 + i*5, 12]) {\n            rotate([0, -15 - i*5, 10 + i*5]) {\n                scale([0.4, 0.9, 0.4]) {\n                    sphere(r = 18);\n                }\n            }\n        }\n    }\n}\n\nmodule webbing() {\n    // Webbing between thumb and fingers\n    translate([-5, 0, 25]) {\n        rotate([0, 0, 45]) {\n            scale([1.2, 0.3, 0.1]) {\n                cube([40, 20, 3]);\n            }\n        }\n    }\n    \n    // Cross webbing pattern\n    for(i = [0:2]) {\n        translate([0, -5 + i*10, 20 + i*3]) {\n            rotate([0, 15 - i*10, 0]) {\n                scale([0.8, 0.2, 0.1]) {\n                    cube([35, 15, 2]);\n                }\n            }\n        }\n    }\n}\n\nmodule lacing() {\n    // Lacing details around edges\n    for(angle = [0:30:330]) {\n        translate([\n            cos(angle) * 42,\n            sin(angle) * 34,\n            15\n        ]) {\n            rotate([90, 0, angle + 90]) {\n                cylinder(h = 3, r = 1.5);\n            }\n        }\n    }\n}\n\nmodule palm_pad() {\n    // Cushioned palm area\n    translate([0, 0, 12]) {\n        scale([0.7, 0.6, 0.1]) {\n            sphere(r = 35);\n        }\n    }\n}\n\nmodule wrist_strap() {\n    // Wrist strap attachment\n    translate([0, -40, 10]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                // Main strap\n                scale([1.2, 0.3, 0.5]) {\n                    cylinder(h = 30, r = 8);\n                }\n                \n                // Strap holes\n                for(i = [0:2]) {\n                    translate([0, 0, 5 + i*10]) {\n                        cylinder(h = 5, r = 2);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule grip_texture() {\n    // Leather texture pattern\n    for(x = [-30:10:30]) {\n        for(y = [-25:10:25]) {\n            translate([x, y, 28]) {\n                cylinder(h = 0.5, r = 3);\n            }\n        }\n    }\n}\n\nmodule furniture_base() {\n    // Structural base for furniture use\n    difference() {\n        // Base platform\n        translate([0, 0, -5]) {\n            cube([100, 80, wall_thickness], center = true);\n        }\n        \n        // Weight reduction holes\n        for(x = [-30:20:30]) {\n            for(y = [-20:20:20]) {\n                translate([x, y, -3]) {\n                    cylinder(h = wall_thickness + 1, r = 8);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main mitt components\n    mitt_body();\n    thumb();\n    fingers();\n    \n    // Details\n    webbing();\n    lacing();\n    palm_pad();\n    grip_texture();\n    \n    // Furniture elements\n    wrist_strap();\n    furniture_base();\n}",
    "renders": true
  },
  {
    "sports_equipment": "mask",
    "openscad_code": "// Wall-Mount Mask Display Shelf (realistic style, medium complexity)\n// Holds one decorative mask with back support, side brackets and keyhole mount\n\n$fn = 50;            // smooth curves\nwall_thickness = 2;  // 3D-print friendly\nmask_w = 65;         // inner clearance width for mask\nmask_h = 80;         // inner clearance height for mask\nshelf_d = 35;        // total depth from wall\nshelf_h = 8;         // base platform thickness\nbracket_w = 8;       // side bracket width\n\n// overall outer size\ntotal_w = mask_w + 2*bracket_w + 2*wall_thickness;\ntotal_h = shelf_h + mask_h + 20;\n\nmodule shelf_base() {\n    // main horizontal platform\n    difference() {\n        translate([0, shelf_d/2, shelf_h/2])\n            cube([total_w, shelf_d, shelf_h], center=true);\n        // lighten cavities\n        translate([0, shelf_d/2+1, shelf_h/2])\n            cube([total_w-2*wall_thickness, shelf_d-4, shelf_h-2], center=true);\n    }\n}\n\nmodule back_wall() {\n    // vertical back plate with keyhole mounts\n    difference() {\n        translate([0, 0, total_h/2])\n            cube([total_w, wall_thickness*2, total_h], center=true);\n        // keyhole slots for wall screws\n        for (x = [-total_w/4, total_w/4])\n            translate([x, 0, total_h-15])\n                rotate([90,0,0])\n                    cylinder(h=wall_thickness*2+1, d1=6, d2=3);\n    }\n}\n\nmodule side_brackets() {\n    // left and right curved brackets\n    for (x = [-total_w/2+bracket_w/2, total_w/2-bracket_w/2]) {\n        // curved arm\n        translate([x, shelf_d-10, shelf_h+30])\n            rotate([90,0,0])\n                cylinder(h=30, d1=bracket_w, d2=bracket_w);\n        // top connector bar\n        translate([x, shelf_d-10, shelf_h+60])\n            rotate([0,90,0])\n                cylinder(h=bracket_w, d=6);\n    }\n}\n\nmodule mask_support() {\n    // central vertical post that mask rests against\n    translate([0, shelf_d-5, shelf_h+mask_h/2])\n        cube([wall_thickness*3, wall_thickness*2, mask_h], center=true);\n    // small lip to keep mask from sliding forward\n    translate([0, shelf_d-wall_thickness-1, shelf_h+5])\n        cube([mask_w-10, wall_thickness, 4], center=true);\n}\n\nmodule grip_texture() {\n    // subtle texture lines on platform surface for grip\n    for (i = [-total_w/2+5 : 4 : total_w/2-5]) {\n        translate([i, shelf_d/2, shelf_h])\n            cube([1, shelf_d, 0.5]);\n    }\n}\n\n// build the shelf\nunion() {\n    shelf_base();\n    back_wall();\n    side_brackets();\n    mask_support();\n    grip_texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "pads",
    "openscad_code": "// Pads furniture item - realistic style\n// Protective kneepad chair with adjustable straps and padding\n\n$fn = 50;\n\n// Overall dimensions\npad_width = 80;\npad_height = 100;\npad_thickness = 35;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main pad body\nmodule pad_body() {\n    difference() {\n        // Outer shell\n        translate([0, 0, pad_thickness/2])\n            rounded_cube([pad_width, pad_height, pad_thickness], 5);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness + 2])\n            rounded_cube([pad_width - wall_thickness*2, pad_height - wall_thickness*2, pad_thickness - wall_thickness], 3);\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(x = [radius, size.x - radius])\n            for(y = [radius, size.y - radius])\n                for(z = [radius, size.z - radius])\n                    translate([x - size.x/2, y - size.y/2, z - size.z/2])\n                        sphere(r = radius);\n    }\n}\n\n// Protective foam padding\nmodule foam_padding() {\n    for(i = [0:3]) {\n        translate([(i - 1.5) * 15, 0, wall_thickness + 1])\n            rounded_cube([12, pad_height - 20, 8], 2);\n    }\n}\n\n// Ventilation holes\nmodule ventilation_holes() {\n    for(x = [-30, -10, 10, 30])\n        for(y = [-35, -15, 5, 25, 45])\n            translate([x, y, wall_thickness + 2])\n                cylinder(h = pad_thickness, r = 2, $fn = 16);\n}\n\n// Adjustable strap anchors\nmodule strap_anchors() {\n    // Left side anchors\n    for(y = [-35, 35]) {\n        translate([-pad_width/2 - 5, y, 15])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r = 3, $fn = 16);\n    }\n    \n    // Right side anchors\n    for(y = [-35, 35]) {\n        translate([pad_width/2 + 5, y, 15])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r = 3, $fn = 16);\n    }\n}\n\n// Grip texture pattern\nmodule grip_texture() {\n    for(x = [-35:10:35])\n        for(y = [-45:10:45])\n            translate([x, y, pad_thickness - 1])\n                cylinder(h = 1, r = 2.5, $fn = 8);\n}\n\n// Structural reinforcement ribs\nmodule reinforcement_ribs() {\n    // Vertical ribs\n    for(x = [-30, 0, 30]) {\n        translate([x, 0, pad_thickness/2])\n            rounded_cube([3, pad_height - 10, pad_thickness - wall_thickness*2], 1.5);\n    }\n    \n    // Horizontal ribs\n    for(y = [-40, 0, 40]) {\n        translate([0, y, pad_thickness/2])\n            rounded_cube([pad_width - 10, 3, pad_thickness - wall_thickness*2], 1.5);\n    }\n}\n\n// Assembly\nunion() {\n    // Main pad structure\n    pad_body();\n    \n    // Internal components\n    foam_padding();\n    ventilation_holes();\n    reinforcement_ribs();\n    \n    // External features\n    grip_texture();\n    strap_anchors();\n}",
    "renders": true
  },
  {
    "sports_equipment": "guard",
    "openscad_code": "// OpenSCAD Guard Rail – Medium-Complexity Realistic Furniture\n// 120 mm long, 40 mm deep, 80 mm high, 2 mm wall thickness\n// All supports printable without overhangs, split into printable parts\n\n// PARAMETERS\nrail_len   = 120;\nrail_depth = 40;\nrail_h     = 80;\nwall       = 2;\npost_w     = 6;\n\n// MAIN ASSEMBLY\nmodule guard_rail() {\n    union() {\n        // Horizontal top rail (hollow tube)\n        translate([0,0,rail_h-wall])\n            rounded_rail(rail_len, rail_depth-wall*2, wall);\n\n        // Two vertical posts\n        for (x = [-rail_len/2+post_w, rail_len/2-post_w])\n            translate([x,0,0])\n                post(post_w, rail_h);\n\n        // Mid-height stabilizing stretcher\n        translate([0,0,rail_h/2-wall])\n            rounded_rail(rail_len*0.8, rail_depth-wall*2, wall);\n\n        // Base feet for stability & printable bed adhesion\n        foot(-rail_len/2+5);\n        foot( rail_len/2-5);\n    }\n}\n\n// HOLLOW ROUNDED RAIL (top & stretcher)\nmodule rounded_rail(len, thick, h) {\n    difference() {\n        hull() {\n            translate([-len/2, -thick/2, 0])\n                cylinder(h=h, r=thick/2, $fn=20);\n            translate([ len/2, -thick/2, 0])\n                cylinder(h=h, r=thick/2, $fn=20);\n            translate([-len/2,  thick/2, 0])\n                cylinder(h=h, r=thick/2, $fn=20);\n            translate([ len/2,  thick/2, 0])\n                cylinder(h=h, r=thick/2, $fn=20);\n        }\n        // Hollow center\n        translate([0,0,-1])\n            cube([len+2, thick+2, h+2], center=true);\n    }\n}\n\n// VERTICAL POST with dowel-style ends\nmodule post(size, h) {\n    union() {\n        // Main post body\n        cube([size, rail_depth-wall*2, h-wall], center=true);\n\n        // Top dowel cap\n        translate([0,0,h-wall/2])\n            cylinder(h=wall*1.5, r=size/2, $fn=20);\n\n        // Bottom dowel foot\n        translate([0,0,wall/2])\n            cylinder(h=wall*1.5, r=size/2, $fn=20);\n    }\n}\n\n// WIDE FOOT FOR STABILITY\nmodule foot(x) {\n    translate([x,0,wall/2])\n        cube([10, rail_depth, wall], center=true);\n}\n\n// EXECUTE\nguard_rail();",
    "renders": true
  },
  {
    "sports_equipment": "shinpad",
    "openscad_code": "// Shinpad Furniture - Realistic Style\n// Medium complexity OpenSCAD model\n\n$fn = 32;\n\n// Overall dimensions\nlength = 120;\nwidth = 85;\nheight = 40;\nwall_thickness = 2;\n\n// Main shell\nmodule shinpad_shell() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-length/2, -width/2, 0])\n                cube([length, width, height]);\n            translate([-length/2+20, -width/2+10, height])\n                cube([length-40, width-20, 5]);\n        }\n        \n        // Inner cavity\n        translate([-length/2+wall_thickness, -width/2+wall_thickness, wall_thickness])\n            cube([length-2*wall_thickness, width-2*wall_thickness, height-wall_thickness]);\n    }\n}\n\n// Ventilation holes pattern\nmodule ventilation_holes() {\n    for (i = [0:3]) {\n        for (j = [0:4]) {\n            translate([-length/2+20+i*20, -width/2+15+j*15, height-1])\n                cylinder(h=3, d=6);\n        }\n    }\n}\n\n// Structural ribs for strength\nmodule support_ribs() {\n    // Vertical ribs\n    for (pos = [-40, 0, 40]) {\n        translate([pos, -width/2+wall_thickness, wall_thickness])\n            cube([wall_thickness, width-2*wall_thickness, height-2*wall_thickness]);\n    }\n    \n    // Horizontal ribs\n    for (pos = [-30, 0, 30]) {\n        translate([-length/2+wall_thickness, pos, wall_thickness])\n            cube([length-2*wall_thickness, wall_thickness, height-2*wall_thickness]);\n    }\n}\n\n// Grip texture pattern\nmodule grip_texture() {\n    difference() {\n        translate([-length/2+5, -width/2+5, 0])\n            cube([length-10, width-10, 1]);\n        \n        // Diamond pattern\n        for (i = [0:10]) {\n            for (j = [0:6]) {\n                translate([-length/2+10+i*10, -width/2+10+j*10, -0.5])\n                    rotate([0, 0, 45])\n                    cube([3, 3, 2], center=true);\n            }\n        }\n    }\n}\n\n// Strap mounts\nmodule strap_mounts() {\n    // Top mounts\n    translate([-length/2+10, -width/2-3, height/2])\n        rotate([90, 0, 0])\n        cylinder(h=6, d=4);\n    \n    translate([-length/2+10, width/2+3, height/2])\n        rotate([90, 0, 0])\n        cylinder(h=6, d=4);\n    \n    // Bottom mounts\n    translate([length/2-10, -width/2-3, height/2])\n        rotate([90, 0, 0])\n        cylinder(h=6, d=4);\n    \n    translate([length/2-10, width/2+3, height/2])\n        rotate([90, 0, 0])\n        cylinder(h=6, d=4);\n}\n\n// Edge protection strip\nmodule edge_protection() {\n    // Top edge\n    translate([-length/2, -width/2, height])\n        cube([length, wall_thickness*2, wall_thickness*2]);\n    \n    // Bottom edge\n    translate([-length/2, -width/2, 0])\n        cube([length, wall_thickness*2, wall_thickness*2]);\n    \n    // Side edges\n    translate([-length/2, -width/2, 0])\n        cube([wall_thickness*2, width, wall_thickness*2]);\n    \n    translate([length/2-wall_thickness*2, -width/2, 0])\n        cube([wall_thickness*2, width, wall_thickness*2]);\n}\n\n// Assembly\nunion() {\n    shinpad_shell();\n    support_ribs();\n    grip_texture();\n    strap_mounts();\n    edge_protection();\n    translate([0, 0, height-1])\n        ventilation_holes();\n}",
    "renders": true
  },
  {
    "sports_equipment": "chestpad",
    "openscad_code": "// Realistic chestpad furniture model - medium complexity\n// Dimensions: 90mm wide x 60mm deep x 35mm tall\n\n$fn = 32;\n\n// Main module\nmodule chestpad() {\n    // Base pad structure\n    difference() {\n        // Main pad body with rounded edges\n        minkowski() {\n            cube([86, 56, 18], center = true);\n            sphere(3);\n        }\n        \n        // Hollow interior for weight reduction\n        translate([0, 0, -1])\n            cube([82, 52, 20], center = true);\n    }\n    \n    // Top cushion layer\n    translate([0, 0, 11])\n        difference() {\n            minkowski() {\n                cube([84, 54, 8], center = true);\n                sphere(2);\n            }\n            // Hollow interior\n            translate([0, 0, -1])\n                cube([80, 50, 10], center = true);\n        }\n    \n    // Side support wings\n    for(side = [-1, 1]) {\n        translate([side * 44, 0, 5])\n            rotate([0, side * 15, 0])\n            difference() {\n                cube([8, 50, 25], center = true);\n                translate([0, 0, 5])\n                    cube([6, 48, 15], center = true);\n            }\n    }\n    \n    // Front support lip\n    translate([0, -30, 0])\n        difference() {\n            roundcube([70, 6, 20], 3);\n            translate([0, 0, 5])\n                cube([66, 4, 10], center = true);\n        }\n    \n    // Back support lip\n    translate([0, 30, 0])\n        difference() {\n            roundcube([70, 6, 20], 3);\n            translate([0, 0, 5])\n                cube([66, 4, 10], center = true);\n        }\n    \n    // Mounting holes for furniture attachment\n    for(x = [-30, 30]) {\n        for(y = [-20, 20]) {\n            translate([x, y, -2])\n                cylinder(h = 20, r = 3);\n        }\n    }\n    \n    // Grip texture pattern on top surface\n    for(x = [-35:10:35]) {\n        for(y = [-25:10:25]) {\n            translate([x, y, 19.5])\n                cylinder(h = 1, r = 2);\n        }\n    }\n    \n    // Reinforcement ribs underneath\n    translate([0, 0, -9])\n        for(i = [-30:15:30]) {\n            cube([3, 50, 2], center = true);\n        }\n    \n    translate([0, 0, -9])\n        for(i = [-20:10:20]) {\n            rotate([0, 0, 90])\n                cube([3, 86, 2], center = true);\n        }\n}\n\n// Helper module for rounded cube with consistent radius\nmodule roundcube(size, radius) {\n    minkowski() {\n        cube([size[0] - 2*radius, size[1] - 2*radius, size[2] - 2*radius], center = true);\n        sphere(radius);\n    }\n}\n\n// Assembly\nchestpad();",
    "renders": true
  },
  {
    "sports_equipment": "kneepad",
    "openscad_code": "// Furniture-style kneepad with realistic proportions and medium complexity\n// Overall dimensions: 110mm x 80mm x 35mm (L x W x H)\n\nmodule kneepad() {\n    // Main pad body with ergonomic curvature\n    difference() {\n        // Base curved shape\n        hull() {\n            // Front rounded edge\n            translate([55, 0, 17.5])\n                scale([1, 0.8, 1])\n                sphere(17.5);\n            // Rear support\n            translate([-55, 0, 12.5])\n                scale([1, 0.6, 0.7])\n                sphere(17.5);\n            // Side supports\n            translate([0, 40, 15])\n                scale([0.8, 0.3, 0.8])\n                sphere(15);\n            translate([0, -40, 15])\n                scale([0.8, 0.3, 0.8])\n                sphere(15);\n        }\n        \n        // Center cavity for knee\n        translate([0, 0, 25])\n            scale([0.8, 0.9, 0.4])\n            sphere(25);\n            \n        // Ventilation holes pattern\n        for(x = [-30:20:30])\n            for(y = [-25:15:25])\n                translate([x, y, 30])\n                    rotate([90, 0, 0])\n                    cylinder(h=10, d=6);\n    }\n    \n    // Structural frame around edges\n    difference() {\n        // Outer frame\n        hull() {\n            translate([50, 0, 17.5])\n                scale([1, 0.85, 1])\n                sphere(18);\n            translate([-50, 0, 12.5])\n                scale([1, 0.65, 0.75])\n                sphere(18);\n            translate([0, 42, 16])\n                scale([0.85, 0.35, 0.85])\n                sphere(16);\n            translate([0, -42, 16])\n                scale([0.85, 0.35, 0.85])\n                sphere(16);\n        }\n        \n        // Inner cutout for frame\n        hull() {\n            translate([47, 0, 17.5])\n                scale([1, 0.8, 1])\n                sphere(15);\n            translate([-47, 0, 12.5])\n                scale([1, 0.6, 0.7])\n                sphere(15);\n            translate([0, 39, 15])\n                scale([0.8, 0.3, 0.8])\n                sphere(13);\n            translate([0, -39, 15])\n                scale([0.8, 0.3, 0.8])\n                sphere(13);\n        }\n    }\n    \n    // Furniture-style joint connectors\n    module joint() {\n        difference() {\n            cylinder(h=8, d=12);\n            translate([0, 0, -1])\n                cylinder(h=10, d=8);\n        }\n    }\n    \n    // Front joints (2x)\n    translate([40, 30, 0])\n        joint();\n    translate([40, -30, 0])\n        joint();\n    \n    // Rear joints (2x)\n    translate([-40, 30, 0])\n        joint();\n    translate([-40, -30, 0])\n        joint();\n    \n    // Grip texture pattern on contact surface\n    module grip_pattern() {\n        for(x = [-40:8:40])\n            for(y = [-30:8:30])\n                translate([x, y, 32])\n                    cube([1, 1, 1], center=true);\n    }\n    \n    // Apply grip texture\n    intersection() {\n        children(0);\n        grip_pattern();\n    }\n    \n    // Support ribs underneath\n    module rib(width) {\n        translate([0, 0, 8])\n            cube([80, width, 2], center=true);\n    }\n    \n    // Cross ribs for structural integrity\n    rib(3);\n    rotate([0, 0, 90])\n        rib(3);\n    \n    // Furniture-style corner brackets\n    module corner_bracket() {\n        difference() {\n            // Main bracket body\n            hull() {\n                cube([8, 8, 6], center=true);\n                translate([4, 4, 0])\n                    cube([4, 4, 6], center=true);\n            }\n            // Screw hole\n            translate([3, 3, 0])\n                rotate([90, 0, 0])\n                cylinder(h=8, d=3);\n        }\n    }\n    \n    // Corner brackets at stress points\n    translate([45, 35, 3])\n        corner_bracket();\n    translate([45, -35, 3])\n        mirror([0, 1, 0])\n            corner_bracket();\n    translate([-45, 35, 3])\n        mirror([1, 0, 0])\n            corner_bracket();\n    translate([-45, -35, 3])\n        mirror([1, 1, 0])\n            corner_bracket();\n}\n\n// Render the kneepad\nkneepad();",
    "renders": true
  },
  {
    "sports_equipment": "elbowpad",
    "openscad_code": "// Elbowpad furniture item - medium complexity realistic style\n// Dimensions: ~120mm long, ~100mm wide, ~80mm thick\n\nmodule main_pad() {\n    difference() {\n        // Main cushion body\n        translate([0, 0, 20])\n            scale([1, 0.9, 0.6])\n            sphere(d=100, $fn=60);\n        \n        // Hollow out center for arm\n        translate([0, 0, -10])\n            rotate([0, 90, 0])\n            cylinder(h=120, d1=60, d2=50, $fn=40);\n    }\n}\n\nmodule grip_texture() {\n    // Raised grip pattern on surface\n    for (a = [0:30:330]) {\n        rotate([0, 0, a])\n            translate([48, 0, 15])\n                scale([0.1, 1, 0.1])\n                sphere(d=8, $fn=8);\n    }\n}\n\nmodule side_supports() {\n    // Left support\n    translate([-30, 0, 15])\n        rotate([0, 15, 0])\n        cylinder(h=40, d1=30, d2=25, $fn=20);\n    \n    // Right support\n    translate([30, 0, 15])\n        rotate([0, -15, 0])\n        cylinder(h=40, d1=30, d2=25, $fn=20);\n}\n\nmodule mounting_plate() {\n    // Base mounting plate\n    translate([0, 0, 0])\n        cube([80, 100, 4], center=true);\n    \n    // Mounting holes\n    for (x = [-30, 30])\n        for (y = [-35, 35])\n            translate([x, y, 2])\n                cylinder(h=5, d=6, $fn=20);\n}\n\nmodule structural_frame() {\n    // Outer frame\n    difference() {\n        translate([0, 0, 10])\n            cube([104, 104, 30], center=true);\n        \n        translate([0, 0, 10])\n            cube([96, 96, 35], center=true);\n    }\n    \n    // Reinforcement ribs\n    for (x = [-40, 0, 40])\n        translate([x, 0, 25])\n            cube([4, 96, 6], center=true);\n    \n    for (y = [-40, 0, 40])\n        translate([0, y, 25])\n            cube([96, 4, 6], center=true);\n}\n\nmodule furniture_base() {\n    // Furniture-style base support\n    translate([0, 0, -2])\n        cube([120, 120, 4], center=true);\n    \n    // Leg supports\n    for (x = [-50, 50])\n        for (y = [-50, 50])\n            translate([x, y, -15])\n                cylinder(h=26, d=8, $fn=16);\n}\n\nunion() {\n    // Main components assembled\n    main_pad();\n    grip_texture();\n    side_supports();\n    \n    // Furniture elements\n    mounting_plate();\n    structural_frame();\n    furniture_base();\n}",
    "renders": true
  },
  {
    "sports_equipment": "shoulderpad",
    "openscad_code": "// OpenSCAD Shoulderpad Furniture – Realistic, Medium Complexity\n// Overall size: ≈110 mm (width) × 60 mm (depth) × 35 mm (height)\n\n$fn = 36;  // smooth curves\nwall = 2;  // 3D-printable wall thickness\n\n// Helper to create a rounded rectangular prism\nmodule rounded_prism(w, d, h, r) {\n    hull() {\n        translate([r, r, 0]) cylinder(r = r, h = h);\n        translate([w - r, r, 0]) cylinder(r = r, h = h);\n        translate([r, d - r, 0]) cylinder(r = r, h = h);\n        translate([w - r, d - r, 0]) cylinder(r = r, h = h);\n    }\n}\n\n// Outer shell with gentle curvature\nmodule outer_shell() {\n    difference() {\n        hull() {\n            translate([wall, wall,  0]) cube([100 - 2*wall, 56 - 2*wall, 22]);\n            translate([wall, wall, 30]) cube([100 - 2*wall, 50 - 2*wall,  5]);\n        }\n        // Hollow cavity for weight saving\n        translate([wall + 2, wall + 2, wall]) cube([100 - 2*(wall + 2), 56 - 2*(wall + 2), 30]);\n    }\n}\n\n// Internal support ribs\nmodule support_ribs() {\n    for (x = [20, 50, 80]) {\n        translate([x, wall + 2, wall]) cube([wall, 56 - 2*(wall + 2), 30 - wall]);\n    }\n}\n\n// Ergonomic cushion pad\nmodule cushion_pad() {\n    difference() {\n        hull() {\n            translate([wall + 5, wall + 5, 30]) cube([90 - 2*(wall + 5), 46 - 2*(wall + 5), 5]);\n            translate([wall + 5, wall + 5, 33]) cube([90 - 2*(wall + 5), 46 - 2*(wall + 5), 2]);\n        }\n        // Soft inset\n        translate([wall + 8, wall + 8, 30.1]) cube([84 - 2*(wall + 8), 40 - 2*(wall + 8), 4]);\n    }\n}\n\n// Ventilation holes pattern\nmodule vent_holes() {\n    for (x = [15:15:85]) {\n        for (y = [15:15:45]) {\n            translate([x, y, 0]) cylinder(r = 2.5, h = 35);\n        }\n    }\n}\n\n// Mounting clip receivers (left & right)\nmodule mounting_receivers() {\n    for (side = [0:1]) {\n        translate([side ? 97 : 3, 28, 10]) {\n            rotate([0, 90, 0]) cylinder(r = 4, h = wall + 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    outer_shell();\n    support_ribs();\n    cushion_pad();\n    mounting_receivers();\n    difference() {\n        outer_shell();  // reuse outer shell for clean holes\n        vent_holes();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "skate",
    "openscad_code": "// Skateboard Bench - realistic style, medium complexity\n// Dimensions: 120mm long x 30mm wide x 40mm high\n\nmodule grip_texture(width, length, thickness) {\n    // Create grip tape texture pattern\n    for (x = [-width/2+2 : 4 : width/2-2]) {\n        for (y = [-length/2+2 : 4 : length/2-2]) {\n            translate([x, y, thickness/2])\n                cube([0.5, 0.5, thickness], center=true);\n        }\n    }\n}\n\nmodule truck_base(width) {\n    // Single truck assembly\n    difference() {\n        // Main truck body\n        translate([0, 0, 0])\n            cube([width-2, 8, 4], center=true);\n        \n        // Axle holes\n        for (offset = [-width/2+8, width/2-8]) {\n            translate([offset, 0, -1])\n                cylinder(h=6, r=1.5, center=true);\n        }\n        \n        // Kingpin hole\n        translate([0, 0, -1])\n            cylinder(h=6, r=2, center=true);\n    }\n    \n    // Bushings\n    translate([0, 0, 2.5])\n        cylinder(h=1.5, r=4, center=true);\n    \n    // Wheels (4 per truck)\n    for (offset = [-width/2+8, width/2-8]) {\n        rotate([90, 0, 0])\n            translate([offset, 0, 0])\n                cylinder(h=4, r=3, center=true);\n    }\n}\n\nmodule skateboard_deck() {\n    // Main deck shape with tapered ends\n    hull() {\n        // Front kicktail\n        translate([0, 50, 0])\n            scale([0.8, 0.7, 1])\n                sphere(r=8);\n        \n        // Rear kicktail\n        translate([0, -50, 0])\n            scale([0.8, 0.7, 1])\n                sphere(r=8);\n        \n        // Middle section\n        translate([0, 0, -2])\n            cube([30, 80, 4], center=true);\n    }\n    \n    // Deck surface (slightly curved)\n    translate([0, 0, 4])\n        cube([28, 96, 2], center=true);\n}\n\nmodule bench_supports() {\n    // Left support leg\n    translate([-15, 0, -20])\n        rotate([0, 15, 0])\n            cube([4, 26, 40], center=true);\n    \n    // Right support leg\n    translate([15, 0, -20])\n        rotate([0, -15, 0])\n            cube([4, 26, 40], center=true);\n    \n    // Cross brace\n    translate([0, 0, -35])\n        cube([34, 4, 3], center=true);\n}\n\n// Main assembly\nunion() {\n    // Skateboard deck (top of bench)\n    translate([0, 0, 20])\n        skateboard_deck();\n    \n    // Grip tape texture on top\n    translate([0, 0, 26])\n        grip_texture(28, 100, 0.5);\n    \n    // Trucks (mounted underneath as support structure)\n    translate([0, 25, 19])\n        truck_base(26);\n    \n    translate([0, -25, 19])\n        truck_base(26);\n    \n    // Bench support legs\n    bench_supports();\n}\n\n// Optional seat cushion detail\ntranslate([0, 0, 27])\n    color([0.8, 0.8, 0.8])\n        cube([26, 96, 2], center=true);",
    "renders": true
  },
  {
    "sports_equipment": "rollerblade",
    "openscad_code": "// Rollerblade-themed bookshelf bracket\n// Overall size: ~120mm x ~60mm x ~80mm\n// Wall thickness: 2mm for printability\n\nmodule wheel(radius=8, width=4) {\n    // Basic wheel with bearing hole\n    difference() {\n        cylinder(r=radius, h=width, $fn=32);\n        translate([0,0,-1]) cylinder(r=2, h=width+2, $fn=16);\n    }\n}\n\nmodule wheel_frame() {\n    // Main frame holding 4 wheels\n    frame_width = 50;\n    wheel_spacing = 12;\n    \n    // Frame base\n    difference() {\n        // Frame body\n        translate([-frame_width/2, -6, 0]) cube([frame_width, 12, 30]);\n        // Wheel cutouts\n        for (i=[-1.5:1:1.5]) {\n            translate([i*wheel_spacing, -8, 5]) rotate([90,0,0]) cylinder(r=8.5, h=16, $fn=32);\n            translate([i*wheel_spacing, -8, 20]) rotate([90,0,0]) cylinder(r=8.5, h=16, $fn=32);\n        }\n    }\n    \n    // Add wheels\n    for (i=[-1.5:1:1.5]) {\n        translate([i*wheel_spacing, 0, 8]) rotate([90,0,0]) wheel();\n        translate([i*wheel_spacing, 0, 23]) rotate([90,0,0]) wheel();\n    }\n}\n\nmodule boot_shell() {\n    // Main boot structure serving as shelf support\n    difference() {\n        // Outer shell\n        translate([-20, 10, 30]) cube([40, 35, 50]);\n        // Interior cavity\n        translate([-18, 12, 32]) cube([36, 31, 46]);\n    }\n    \n    // Ankle support\n    difference() {\n        translate([-15, 40, 55]) cube([30, 25, 20]);\n        translate([-13, 42, 57]) cube([26, 21, 16]);\n    }\n    \n    // Toe cap detail\n    difference() {\n        translate([-20, 10, 30]) cube([40, 10, 15]);\n        translate([-18, 12, 32]) cube([36, 6, 11]);\n    }\n}\n\nmodule lacing_system() {\n    // Eyelets for laces\n    eyelet_spacing = 8;\n    for (i=[0:1:3]) {\n        translate([10, 15 + i*eyelet_spacing, 35 + i*5]) rotate([0,90,0]) cylinder(r=1.5, h=3, $fn=16);\n        translate([-10, 15 + i*eyelet_spacing, 35 + i*5]) rotate([0,90,0]) cylinder(r=1.5, h=3, $fn=16);\n    }\n}\n\nmodule mounting_plate() {\n    // Wall mounting plate with screw holes\n    difference() {\n        translate([-25, -20, 75]) cube([50, 10, 5]);\n        translate([-15, -15, 73]) cylinder(r=2, h=10, $fn=16);\n        translate([15, -15, 73]) cylinder(r=2, h=10, $fn=16);\n    }\n}\n\nmodule grip_texture() {\n    // Tread pattern on bottom\n    for (x=[-15:5:15]) {\n        for (y=[10:5:40]) {\n            translate([x, y, 29.5]) cube([3, 3, 1]);\n        }\n    }\n}\n\n// Assemble all components\nunion() {\n    wheel_frame();\n    boot_shell();\n    lacing_system();\n    mounting_plate();\n    grip_texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "cleat",
    "openscad_code": "// Furniture cleat - medium complexity realistic style\n// Overall dimensions: 120mm long x 35mm wide x 30mm high\n\n// Main body with tapered sides for aerodynamics\nmodule cleat_body() {\n    difference() {\n        // Main tapered block\n        hull() {\n            translate([-2, 0, 0]) cube([124, 35, 8]);\n            translate([2, 0, 22]) cube([116, 32, 8]);\n        }\n        \n        // Front and rear tapers\n        translate([-5, -1, -1]) cube([10, 37, 32]);\n        translate([115, -1, -1]) cube([10, 37, 32]);\n        \n        // Central weight reduction hole\n        translate([55, 12, 10]) cube([10, 11, 12]);\n    }\n}\n\n// Grip pattern on top surface\nmodule grip_pattern() {\n    for (x = [10:10:110]) {\n        for (y = [5:5:30]) {\n            translate([x, y, 28.5]) {\n                difference() {\n                    cube([6, 2, 1.5]);\n                    translate([0.5, 0.5, 1.2]) cube([5, 1, 0.5]);\n                }\n            }\n        }\n    }\n}\n\n// Mounting holes for furniture attachment\nmodule mounting_holes() {\n    // Front holes\n    translate([20, 8, -1]) cylinder(h=32, r=2.2);\n    translate([20, 27, -1]) cylinder(h=32, r=2.2);\n    \n    // Rear holes\n    translate([100, 8, -1]) cylinder(h=32, r=2.2);\n    translate([100, 27, -1]) cylinder(h=32, r=2.2);\n    \n    // Counterbores\n    translate([20, 8, 28]) cylinder(h=2, r=4);\n    translate([20, 27, 28]) cylinder(h=2, r=4);\n    translate([100, 8, 28]) cylinder(h=2, r=4);\n    translate([100, 27, 28]) cylinder(h=2, r=4);\n}\n\n// Reinforcement ribs underneath\nmodule ribs() {\n    // Longitudinal rib\n    translate([60, 17.5, 5]) cube([110, 3, 4]);\n    \n    // Transverse ribs\n    for (pos = [30, 60, 90]) {\n        translate([pos, 5, 5]) cube([3, 25, 4]);\n    }\n}\n\n// Side support wings\nmodule support_wings() {\n    // Left wing\n    translate([0, -2, 10]) {\n        difference() {\n            cube([120, 2, 15]);\n            translate([5, -1, 0]) cube([110, 4, 10]);\n        }\n    }\n    \n    // Right wing\n    translate([0, 35, 10]) {\n        difference() {\n            cube([120, 2, 15]);\n            translate([5, -1, 0]) cube([110, 4, 10]);\n        }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        cleat_body();\n        ribs();\n        support_wings();\n        grip_pattern();\n    }\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "sports_equipment": "boots",
    "openscad_code": "// Realistic Boots Furniture (Medium Complexity)\n\nmodule sole() {\n    // Main sole with slight curve\n    difference() {\n        hull() {\n            translate([-25, -10, 0]) cube([50, 20, 8]);\n            translate([-20, -8, 2]) cube([40, 16, 4]);\n            translate([-15, -6, 4]) cube([30, 12, 2]);\n        }\n        \n        // Tread pattern\n        for(x = [-20:5:20]) {\n            translate([x, -9, 0]) cube([1, 18, 2]);\n        }\n    }\n}\n\nmodule heel() {\n    // Heel block\n    translate([-23, -9, 8]) cube([15, 18, 20]);\n    \n    // Heel reinforcement\n    translate([-25, -10, 28]) cube([19, 20, 3]);\n}\n\nmodule upper() {\n    // Main upper body\n    difference() {\n        hull() {\n            translate([-22, -9, 28]) cube([44, 18, 35]);\n            translate([-20, -8, 60]) cube([40, 16, 15]);\n            translate([-18, -6, 70]) cube([36, 12, 5]);\n        }\n        \n        // Foot opening\n        translate([-15, -5, 65]) cube([30, 10, 10]);\n    }\n    \n    // Toe cap reinforcement\n    difference() {\n        translate([15, -8, 28]) cube([10, 16, 25]);\n        translate([20, -6, 28]) cube([8, 12, 25]);\n    }\n}\n\nmodule lacing() {\n    // Eyelets\n    for(i = [0:4]) {\n        y = -7 + i*3.5;\n        translate([-19, y, 45 + i*4]) cylinder(h=3, r=1.5);\n        translate([19, y, 45 + i*4]) cylinder(h=3, r=1.5);\n    }\n    \n    // Lace zigzag\n    for(i = [0:3]) {\n        y1 = -7 + i*3.5;\n        y2 = -7 + (i+1)*3.5;\n        hull() {\n            translate([-18, y1, 46.5 + i*4]) sphere(r=0.8);\n            translate([18, y2, 47.5 + i*4]) sphere(r=0.8);\n        }\n    }\n}\n\nmodule ankle_support() {\n    // Back support\n    translate([-22, -9, 50]) cube([44, 18, 25]);\n    \n    // Padding\n    translate([-20, -7, 52]) cube([40, 14, 20]);\n    \n    // Pull tab\n    difference() {\n        translate([0, 0, 75]) cube([15, 3, 8]);\n        translate([5, -1, 77]) cube([5, 5, 4]);\n    }\n}\n\nmodule side_panels() {\n    // Side logos\n    translate([-21, -9, 40]) cube([2, 18, 12]);\n    translate([19, -9, 40]) cube([2, 18, 12]);\n    \n    // Ventilation holes\n    for(x = [-15:5:15]) {\n        translate([x, -10, 50]) cylinder(h=2, r=1.5);\n        translate([x, 10, 50]) cylinder(h=2, r=1.5);\n    }\n}\n\n// Assembly\nunion() {\n    sole();\n    heel();\n    upper();\n    ankle_support();\n    \n    translate([0, -12, 0]) lacing();\n    translate([0, 12, 0]) mirror([0,1,0]) lacing();\n    \n    side_panels();\n}",
    "renders": true
  },
  {
    "sports_equipment": "shoes",
    "openscad_code": "// Realistic 3D-printable shoe furniture (medium complexity)\n// Overall length ~110 mm, width ~40 mm, height ~45 mm\n\n// Wall thickness constant\nwall = 2;\n\n// Main shoe body module\nmodule shoe_body() {\n    difference() {\n        // Outer shell\n        hull() {\n            // Front rounded section\n            translate([0, 0, 10]) \n                scale([1, 0.6, 0.4]) \n                sphere(d = 40, $fn = 32);\n            \n            // Rear heel section  \n            translate([-50, 0, 10]) \n                scale([0.8, 0.7, 0.5]) \n                sphere(d = 35, $fn = 32);\n        }\n        \n        // Hollow interior for 3D printing\n        translate([0, 0, 12]) \n            scale([0.85, 0.75, 0.85]) \n            hull() {\n                translate([0, 0, 0]) \n                    scale([1, 0.6, 0.4]) \n                    sphere(d = 36, $fn = 32);\n                translate([-50, 0, 0]) \n                    scale([0.8, 0.7, 0.5]) \n                    sphere(d = 31, $fn = 32);\n            }\n    }\n}\n\n// Sole with grip pattern\nmodule sole() {\n    // Base sole\n    difference() {\n        hull() {\n            // Front sole\n            translate([5, 0, 0]) \n                scale([1.1, 1.2, 0.3]) \n                sphere(d = 45, $fn = 32);\n            \n            // Rear sole\n            translate([-55, 0, 0]) \n                scale([0.9, 1.1, 0.3]) \n                sphere(d = 40, $fn = 32);\n        }\n        \n        // Interior cavity\n        translate([0, 0, wall]) \n            scale([0.9, 0.9, 1]) \n            hull() {\n                translate([5, 0, 0]) \n                    scale([1.1, 1.2, 0.3]) \n                    sphere(d = 41, $fn = 32);\n                translate([-55, 0, 0]) \n                    scale([0.9, 1.1, 0.3]) \n                    sphere(d = 36, $fn = 32);\n            }\n    }\n    \n    // Grip pattern using loops\n    for (i = [0:4]) {\n        // Front grip lines\n        translate([20 - i*15, 0, 0.5]) \n            cube([3, 28 + i*2, 1], center = true);\n        \n        // Rear grip lines  \n        translate([-20 - i*10, 0, 0.5]) \n            cube([3, 24 + i*1.5, 1], center = true);\n    }\n    \n    // Circular grip pads\n    for (j = [0:3]) {\n        translate([-30 + j*15, 10, 0.5]) \n            cylinder(h = 1, d = 6);\n        translate([-30 + j*15, -10, 0.5]) \n            cylinder(h = 1, d = 6);\n    }\n}\n\n// Shoe upper details\nmodule upper_details() {\n    // Lace eyelets\n    for (i = [0:3]) {\n        translate([10 - i*12, 0, 25]) {\n            cylinder(h = wall + 1, d = 4);\n            translate([0, 8, 0]) \n                cylinder(h = wall + 1, d = 4);\n            translate([0, -8, 0]) \n                cylinder(h = wall + 1, d = 4);\n        }\n    }\n    \n    // Heel counter reinforcement\n    difference() {\n        translate([-45, 0, 15]) \n            scale([1, 0.8, 1.2]) \n            sphere(d = 25, $fn = 32);\n        translate([-45, 0, 15]) \n            scale([0.8, 0.7, 1.1]) \n            sphere(d = 22, $fn = 32);\n    }\n    \n    // Toe cap\n    difference() {\n        translate([10, 0, 15]) \n            scale([1.2, 1, 0.8]) \n            sphere(d = 25, $fn = 32);\n        translate([10, 0, 15]) \n            scale([1, 0.85, 0.7]) \n            sphere(d = 23, $fn = 32);\n    }\n}\n\n// Assembly\nunion() {\n    // Position sole at bottom\n    translate([0, 0, 0]) \n        sole();\n    \n    // Position shoe body above sole\n    translate([0, 0, 5]) \n        shoe_body();\n    \n    // Add upper details\n    translate([0, 0, 5]) \n        upper_details();\n}",
    "renders": true
  },
  {
    "sports_equipment": "spikes",
    "openscad_code": "// Realistic Spikes Furniture (Shoe Display Stand with Spikes)\n// Overall dimensions: 120mm wide x 80mm deep x 100mm tall\n// Wall thickness: 2mm for 3D printability\n\n// Main display platform\nmodule platform() {\n    // Base platform (raised floor with spike mounting points)\n    difference() {\n        // Solid base\n        cube([120, 80, 8], center=true);\n        \n        // Lightening holes underneath\n        translate([0, 0, -3])\n            cube([100, 60, 6], center=true);\n    }\n}\n\n// Spike mounting base with threaded insert simulation\nmodule spike_base() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=12, d=12, $fn=20);\n        // Inner hole for screw\n        translate([0, 0, -1])\n            cylinder(h=14, d=6, $fn=16);\n    }\n}\n\n// Individual spike (realistic track spike shape)\nmodule spike() {\n    // Spike shaft with proper taper\n    union() {\n        // Base cylinder\n        cylinder(h=8, d=8, $fn=16);\n        \n        // Tapered shaft\n        translate([0, 0, 8])\n            cylinder(h1=6, h2=0, r1=3.5, r2=1.5, $fn=16);\n        \n        // Needle tip\n        translate([0, 0, 14])\n            cylinder(h=6, d1=3, d2=0.5, $fn=12);\n    }\n}\n\n// Grip texture pattern on platform surface\nmodule grip_texture() {\n    // Diamond pattern grip\n    for(x=[-50:10:50]) {\n        for(y=[-35:10:35]) {\n            translate([x, y, 4.1])\n                rotate([0, 0, 45])\n                cube([6, 6, 0.8], center=true);\n        }\n    }\n}\n\n// Support ribs for structural strength\nmodule support_ribs() {\n    // Front-back ribs\n    translate([0, -20, -4])\n        cube([110, 4, 8], center=true);\n    translate([0, 20, -4])\n        cube([110, 4, 8], center=true);\n    \n    // Side ribs\n    translate([-50, 0, -4])\n        cube([4, 70, 8], center=true);\n    translate([50, 0, -4])\n        cube([4, 70, 8], center=true);\n}\n\n// Shoe positioning guides\nmodule shoe_guides() {\n    // Left shoe guide\n    translate([-30, 0, 4.5])\n        cube([45, 25, 2], center=true);\n    \n    // Right shoe guide\n    translate([30, 0, 4.5])\n        cube([45, 25, 2], center=true);\n    \n    // Heel stops\n    translate([-50, 15, 4.5])\n        cube([8, 4, 2], center=true);\n    translate([50, 15, 4.5])\n        cube([8, 4, 2], center=true);\n}\n\n// Complete assembly\nunion() {\n    // Main platform with all features\n    union() {\n        platform();\n        grip_texture();\n        support_ribs();\n        shoe_guides();\n    }\n    \n    // Spike mounting bases (realistic positions for track spikes)\n    translate([-45, -10, 4])\n        spike_base();\n    translate([-35, -10, 4])\n        spike_base();\n    translate([-25, -10, 4])\n        spike_base();\n    translate([-15, -10, 4])\n        spike_base();\n    \n    translate([45, -10, 4])\n        spike_base();\n    translate([35, -10, 4])\n        spike_base();\n    translate([25, -10, 4])\n        spike_base();\n    translate([15, -10, 4])\n        spike_base();\n    \n    // Front spikes (for sprint shoes)\n    translate([-40, 10, 4])\n        spike_base();\n    translate([-30, 10, 4])\n        spike_base();\n    translate([-20, 10, 4])\n        spike_base();\n    translate([-10, 10, 4])\n        spike_base();\n    \n    translate([40, 10, 4])\n        spike_base();\n    translate([30, 10, 4])\n        spike_base();\n    translate([20, 10, 4])\n        spike_base();\n    translate([10, 10, 4])\n        spike_base();\n    \n    // Detachable spikes (shown stored in platform)\n    translate([-60, -30, 6])\n        rotate([90, 0, 0])\n        spike();\n    translate([-60, -30, 12])\n        rotate([90, 0, 0])\n        spike();\n    translate(-60, -20, 6])\n        rotate([90, 0, 0])\n        spike();\n    \n    translate([60, -30, 6])\n        rotate([90, 0, 0])\n        spike();\n    translate([60, -30, 12])\n        rotate([90, 0, 0])\n        spike();\n    translate([60, -20, 6])\n        rotate([90, 0, 0])\n        spike();\n}",
    "renders": true
  },
  {
    "sports_equipment": "uniform",
    "openscad_code": "// Uniform Wardrobe - Realistic Style, Medium Complexity\n// 3D printable wardrobe with doors, shelves, and hanging rod\n\n// Main dimensions (in mm)\n$fn = 50;\nwidth = 80;\ndepth = 40;\nheight = 120;\nwall_thickness = 2;\ndoor_thickness = 2;\n\n// Main body module\nmodule wardrobe_body() {\n    // Outer shell\n    difference() {\n        // Main box\n        cube([width, depth, height]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([width-2*wall_thickness, depth-2*wall_thickness, height-wall_thickness]);\n    }\n}\n\n// Back panel with mounting holes\nmodule back_panel() {\n    difference() {\n        // Solid back\n        translate([0, -wall_thickness/2, 0])\n            cube([width, wall_thickness, height]);\n        \n        // Mounting holes (4x)\n        for(x = [width/4, 3*width/4]) {\n            for(y = [height/4, 3*height/4]) {\n                translate([x, -wall_thickness, y])\n                    cylinder(h=wall_thickness+1, r=2);\n            }\n        }\n    }\n}\n\n// Shelf module\nmodule shelf(position) {\n    translate([wall_thickness, wall_thickness, position])\n        cube([width-2*wall_thickness, depth-2*wall_thickness-2, wall_thickness]);\n}\n\n// Hanging rod supports\nmodule rod_support() {\n    translate([width/4, depth/2, height*0.8])\n        cylinder(h=wall_thickness*3, r=wall_thickness*2);\n}\n\n// Hanging rod\nmodule hanging_rod() {\n    translate([width/4, depth/2, height*0.8+wall_thickness*3])\n        rotate([90, 0, 0])\n            cylinder(h=width/2, r=wall_thickness);\n}\n\n// Door with handle\nmodule door() {\n    difference() {\n        // Door panel\n        cube([width/2-1, door_thickness, height-2*wall_thickness]);\n        \n        // Recessed panel\n        translate([wall_thickness, -0.5, wall_thickness])\n            cube([width/2-1-2*wall_thickness, door_thickness+1, height-4*wall_thickness]);\n        \n        // Handle hole\n        translate([width/4-5, door_thickness, height/2])\n            cylinder(h=door_thickness+1, r=3);\n    }\n    \n    // Handle\n    translate([width/4-5, door_thickness+2, height/2])\n        rotate([90, 0, 0])\n            cylinder(h=10, r=2);\n}\n\n// Door hinges (3 per door)\nmodule hinges() {\n    for(z = [height/4, height/2, 3*height/4]) {\n        translate([-1, depth/2, z])\n            cube([2, 4, 6]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main wardrobe\n    wardrobe_body();\n    \n    // Back panel\n    back_panel();\n    \n    // Shelves (2)\n    shelf(height/3);\n    shelf(2*height/3);\n    \n    // Hanging area\n    rod_support();\n    mirror([1, 0, 0]) rod_support();\n    hanging_rod();\n    \n    // Left door\n    translate([0, depth, wall_thickness]) {\n        door();\n        hinges();\n    }\n    \n    // Right door\n    translate([width/2+1, depth, wall_thickness]) {\n        door();\n        mirror([1, 0, 0]) hinges();\n    }\n    \n    // Base support\n    translate([-2, -2, -2])\n        cube([width+4, depth+4, 2]);\n}",
    "renders": true
  },
  {
    "sports_equipment": "jersey",
    "openscad_code": "// Jersey Chair - A sports-inspired furniture piece\n// Approximate dimensions: 120mm H x 80mm W x 85mm D\n\nmodule jersey_chair() {\n    // Chair proportions\n    seat_height = 45;\n    back_height = 75;\n    seat_depth = 85;\n    seat_width = 80;\n    wall_thickness = 2;\n    \n    // Main seat structure\n    union() {\n        // Seat base with jersey mesh pattern\n        difference() {\n            translate([0, 0, seat_height/2])\n                cube([seat_width, seat_depth, seat_height], center=true);\n            \n            // Hollow out interior\n            translate([0, 0, seat_height/2 + wall_thickness])\n                cube([seat_width - wall_thickness*2, seat_depth - wall_thickness*2, seat_height - wall_thickness], center=true);\n        }\n        \n        // Backrest with jersey styling\n        translate([0, -seat_depth/2 + 5, seat_height + back_height/2])\n            difference() {\n                cube([seat_width - 10, 10, back_height], center=true);\n                \n                // Jersey number cutout (23)\n                translate([0, 0, back_height/4])\n                    scale([0.8, 0.8, 0.8])\n                        rotate([90, 0, 0])\n                            linear_extrude(12)\n                                text(\"23\", size=20, halign=\"center\", valign=\"center\");\n            }\n        \n        // Armrests with sleeve styling\n        // Left arm\n        translate([-seat_width/2 - 10, 0, seat_height + 10])\n            rotate([0, -15, 0])\n                difference() {\n                    cylinder(h=30, r=5, center=true);\n                    cylinder(h=35, r=3, center=true);\n                }\n        \n        // Right arm\n        translate([seat_width/2 + 10, 0, seat_height + 10])\n            rotate([0, 15, 0])\n                difference() {\n                    cylinder(h=30, r=5, center=true);\n                    cylinder(h=35, r=3, center=true);\n                }\n        \n        // Legs with piping detail\n        leg_positions = [\n            [-seat_width/2 + 10, seat_depth/2 - 10],\n            [seat_width/2 - 10, seat_depth/2 - 10],\n            [-seat_width/2 + 10, -seat_depth/2 + 10],\n            [seat_width/2 - 10, -seat_depth/2 + 10]\n        ];\n        \n        for (pos = leg_positions) {\n            translate([pos[0], pos[1], seat_height/4])\n                difference() {\n                    cylinder(h=seat_height/2 + 5, r=6, center=true);\n                    cylinder(h=seat_height/2 + 10, r=4, center=true);\n                }\n            \n            // Piping stripe\n            translate([pos[0], pos[1], seat_height/4 + 5])\n                color(\"white\")\n                    cylinder(h=seat_height/2 - 5, r=4.5, center=true);\n        }\n        \n        // Jersey collar detail on back\n        translate([0, -seat_depth/2 + 5, seat_height + back_height - 5])\n            difference() {\n                sphere(r=15);\n                translate([0, -10, 0])\n                    cube([30, 20, 30], center=true);\n            }\n        \n        // Mesh texture strips on seat\n        for (i = [-3:3]) {\n            translate([i * 10, 0, seat_height - 2])\n                cube([2, seat_depth - 10, 1], center=true);\n        }\n        \n        for (j = [-4:4]) {\n            translate([0, j * 8, seat_height - 2])\n                cube([seat_width - 10, 2, 1], center=true);\n        }\n    }\n}\n\n// Render the chair\njersey_chair();",
    "renders": true
  },
  {
    "sports_equipment": "shorts",
    "openscad_code": "// Shorts furniture item - Folding shorts storage stool\n// Realistic style, medium complexity\n// Overall size: 120mm x 80mm x 80mm (closed), 120mm x 80mm x 160mm (open)\n\nmodule shorts_stool() {\n    // Main body - cylindrical stool\n    difference() {\n        union() {\n            // Stool body\n            cylinder(h=75, r=40, $fn=64);\n            \n            // Top rim with rounded edge\n            translate([0, 0, 75])\n                cylinder(h=5, r=42, $fn=64);\n                \n            // Bottom reinforcement ring\n            translate([0, 0, -2])\n                cylinder(h=7, r=43, $fn=64);\n        }\n        \n        // Hollow interior with 2mm walls\n        translate([0, 0, 5])\n            cylinder(h=65, r=38, $fn=64);\n    }\n    \n    // Shorts storage compartment - elliptical opening\n    difference() {\n        // Main opening\n        translate([0, 0, 30])\n            scale([1.3, 1, 1])\n                cylinder(h=40, r=35, $fn=64);\n                \n        // Inner bevel for smooth entry\n        translate([0, 0, 25])\n            scale([1.2, 0.9, 1])\n                cylinder(h=10, r1=35, r2=32, $fn=64);\n    }\n    \n    // Folding legs - 4 legs that fold flat\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([35, 0, -5]) {\n                // Leg support bracket\n                difference() {\n                    union() {\n                        // Main bracket\n                        cube([15, 8, 12], center=true);\n                        \n                        // Reinforcement ribs\n                        for(j = [-1:1]) {\n                            translate([0, j * 3, 0])\n                                cube([15, 1.5, 12], center=true);\n                        }\n                    }\n                    \n                    // Pivot hole\n                    translate([5, 0, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h=10, r=2.5, $fn=16);\n                }\n                \n                // Leg itself\n                translate([22, 0, -35]) {\n                    rotate([90, 0, 0]) {\n                        difference() {\n                            // Leg tube\n                            cylinder(h=70, r=3.5, $fn=16);\n                            \n                            // Hollow tube for weight reduction\n                            cylinder(h=70, r=2, $fn=16);\n                        }\n                        \n                        // Foot pad\n                        translate([0, 0, 70])\n                            cylinder(h=3, r=5, $fn=16);\n                    }\n                }\n            }\n    }\n    \n    // Shorts-inspired decorative elements\n    // Belt loops around top\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([38, 0, 72]) {\n                difference() {\n                    // Loop shape\n                    cube([8, 3, 6], center=true);\n                    \n                    // Inner opening\n                    translate([0, 0, -1])\n                        cube([6, 2, 8], center=true);\n                }\n            }\n    }\n    \n    // Mesh ventilation holes in shorts pattern\n    difference() {\n        // Main ventilation area\n        translate([0, 0, 45])\n            scale([1.2, 0.8, 1])\n                cylinder(h=20, r=30, $fn=64);\n                \n        // Hexagonal pattern holes\n        for(i = [0:3]) {\n            for(j = [0:2]) {\n                translate([\n                    -25 + i * 16.7,\n                    -20 + j * 20,\n                    45\n                ])\n                    cylinder(h=22, r=2.5, $fn=6);\n            }\n        }\n        \n        for(i = [0:2]) {\n            for(j = [0:1]) {\n                translate([\n                    -16.7 + i * 16.7,\n                    -10 + j * 20,\n                    45\n                ])\n                    cylinder(h=22, r=2.5, $fn=6);\n            }\n        }\n    }\n    \n    // Handle for carrying - shorts drawstring style\n    difference() {\n        // Main handle\n        translate([0, 45, 60])\n            rotate([90, 0, 0])\n                torus(ro=5, ri=2, $fn=32);\n                \n        // Grip texture\n        for(i = [0:8]) {\n            rotate([0, 0, i * 45])\n                translate([0, 45, 60])\n                    rotate([90, 0, 0])\n                        difference() {\n                            cylinder(h=12, r=5.5, $fn=16);\n                            cylinder(h=14, r=4.5, $fn=16);\n                        }\n        }\n    }\n}\n\n// Torus helper module for handle\nmodule torus(ro, ri, fn=32) {\n    rotate_extrude($fn=fn)\n        translate([ro, 0, 0])\n            circle(r=ri, $fn=fn);\n}\n\n// Render the stool\nshorts_stool();",
    "renders": true
  },
  {
    "sports_equipment": "socks",
    "openscad_code": "// Socks-inspired storage stool\n// Realistic style, medium complexity\n// 3D printable with 2mm walls and no overhangs\n\nwall = 2;\n\nmodule sock_body() {\n    // Main sock body - elliptical tube\n    difference() {\n        scale([1, 0.8, 1]) cylinder(h = 80, d = 60, center = true, $fn = 64);\n        translate([0, 0, 1]) scale([1, 0.8, 1]) cylinder(h = 82, d = 56, center = true, $fn = 64);\n    }\n}\n\nmodule cuff() {\n    // Ribbed cuff at top\n    for(i = [0:5:25]) {\n        translate([0, 0, 40 - i]) \n        difference() {\n            cylinder(h = 4, d = 62, $fn = 32);\n            cylinder(h = 4.1, d = 58, $fn = 32);\n        }\n    }\n}\n\nmodule heel_curve() {\n    // Heel protrusion\n    translate([0, -20, -20])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 40, d1 = 25, d2 = 15, $fn = 32);\n        translate([-20, -20, -10]) cube([40, 40, 50]);\n    }\n}\n\nmodule toe_box() {\n    // Rounded toe area\n    translate([0, 25, -30])\n    scale([1.2, 1, 1])\n    sphere(d = 30, $fn = 32);\n}\n\nmodule storage_hollow() {\n    // Internal storage cavity\n    translate([0, 0, -10])\n    scale([0.85, 0.7, 0.9])\n    cylinder(h = 60, d = 50, $fn = 32);\n}\n\nmodule base_support() {\n    // Circular base ring for stability\n    difference() {\n        cylinder(h = 5, d = 65, $fn = 64);\n        cylinder(h = 5.1, d = 61, $fn = 64);\n    }\n}\n\nmodule grip_texture() {\n    // Anti-slip texture on base\n    for(angle = [0:30:330]) {\n        rotate([0, 0, angle])\n        translate([27, 0, -2.5])\n        scale([1, 0.3, 1])\n        sphere(d = 3, $fn = 16);\n    }\n}\n\nmodule handle_hole() {\n    // Carrying handle\n    translate([0, 30, 20])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 15, d = 12, $fn = 32);\n        cylinder(h = 15.1, d = 8, $fn = 32);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    base_support();\n    translate([0, 0, 2.5]) base_support();\n    \n    // Main sock form\n    translate([0, 0, 7.5]) {\n        difference() {\n            union() {\n                sock_body();\n                cuff();\n                heel_curve();\n                toe_box();\n            }\n            storage_hollow();\n        }\n    }\n    \n    // Additional details\n    translate([0, 0, 0]) grip_texture();\n    handle_hole();\n}",
    "renders": true
  },
  {
    "sports_equipment": "belt",
    "openscad_code": "// Belt furniture - Wall-mounted belt rack with 5 hooks\n// Realistic medium complexity OpenSCAD model\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\nhook_diameter = 8;\nhook_length = 35;\nhook_clearance = 15;\nmounting_hole_diameter = 4.5;\nrack_width = 120;\nrack_height = 80;\nrack_depth = 25;\n\n// Main mounting bar with rounded edges\nmodule mounting_bar() {\n    difference() {\n        // Main bar body\n        union() {\n            // Main rectangular block\n            translate([0, rack_depth/2, rack_height/2])\n                cube([rack_width, rack_depth, rack_height], center=true);\n            \n            // Rounded top edge\n            translate([0, rack_depth/2, rack_height-1])\n                cube([rack_width, rack_depth, 2], center=true);\n            \n            // Rounded bottom edge\n            translate([0, rack_depth/2, 1])\n                cube([rack_width, rack_depth, 2], center=true);\n        }\n        \n        // Mounting holes (4 holes)\n        for(i = [-1, 1]) {\n            for(j = [-1, 1]) {\n                translate([i * 40, rack_depth + 1, j * 25 + rack_height/2])\n                    rotate([90, 0, 0])\n                    cylinder(h=10, d=mounting_hole_diameter, center=true);\n            }\n        }\n    }\n}\n\n// Individual belt hook\nmodule belt_hook() {\n    difference() {\n        union() {\n            // Hook base cylinder\n            translate([0, 0, 0])\n                cylinder(h=10, d=hook_diameter+4, center=true);\n            \n            // Curved hook arm\n            rotate([0, 90, 0])\n                translate([0, 0, -hook_length/2])\n                    cylinder(h=hook_length, d=hook_diameter, center=true);\n            \n            // Hook tip ball\n            rotate([0, 90, 0])\n                translate([0, 0, -hook_length])\n                    sphere(d=hook_diameter+2);\n        }\n        \n        // Hollow center for weight reduction\n        rotate([0, 90, 0])\n            translate([0, 0, -hook_length/2])\n                cylinder(h=hook_length, d=hook_diameter-4, center=true);\n    }\n}\n\n// Grip texture pattern on hooks\nmodule grip_texture() {\n    for(i = [0:5:hook_length-10]) {\n        rotate([0, 90, 0])\n            translate([0, 0, -i])\n                difference() {\n                    cylinder(h=5, d=hook_diameter+1, center=true);\n                    cylinder(h=6, d=hook_diameter-1, center=true);\n                }\n    }\n}\n\n// Complete belt rack assembly\nmodule belt_rack() {\n    union() {\n        // Mounting bar\n        mounting_bar();\n        \n        // 5 belt hooks\n        for(i = [-2, -1, 0, 1, 2]) {\n            translate([i * 24, rack_depth - 5, rack_height/2]) {\n                belt_hook();\n                grip_texture();\n            }\n        }\n        \n        // Decorative end caps\n        translate([-rack_width/2 - 2, rack_depth/2, rack_height/2])\n            cylinder(h=rack_height, d=4, center=true);\n        translate([rack_width/2 + 2, rack_depth/2, rack_height/2])\n            cylinder(h=rack_height, d=4, center=true);\n    }\n}\n\n// Generate the model\nbelt_rack();",
    "renders": true
  },
  {
    "sports_equipment": "strap",
    "openscad_code": "// Strap furniture - a simple leather strap with buckle and mounting holes\n// Designed as a furniture strap for securing or decorative purposes\n\nmodule buckle() {\n    // Main buckle ring\n    difference() {\n        cylinder(h=5, d=20, $fn=64);\n        translate([0, 0, -0.1])\n            cylinder(h=5.2, d=16, $fn=64);\n    }\n    \n    // Buckle tongue\n    translate([0, 9, 2.5])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=2.5, $fn=16);\n    \n    // Buckle bar\n    translate([0, 0, 5])\n        cube([20, 2, 8], center=true);\n}\n\nmodule strap_hole(hole_pos) {\n    // Create mounting hole at specified position\n    translate([hole_pos, 0, 2.5])\n        rotate([90, 0, 0])\n            cylinder(h=10, d=4, $fn=32);\n}\n\nmodule strap_texture(length) {\n    // Add subtle texture pattern along strap\n    for(i = [0:5:length-10]) {\n        translate([i, 0, 0])\n            cube([2, 25, 0.5]);\n    }\n}\n\nmodule strap_segment(length, width, thickness) {\n    // Main strap body with rounded edges\n    difference() {\n        // Base strap\n        translate([0, 0, thickness/2])\n            cube([length, width, thickness], center=true);\n        \n        // Round edges\n        translate([0, width/2, thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=length, d=thickness, $fn=32);\n        translate([0, -width/2, thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=length, d=thickness, $fn=32);\n    }\n}\n\n// Main assembly\nunion() {\n    // First strap segment (with buckle)\n    translate([-30, 0, 0])\n        strap_segment(60, 25, 5);\n    \n    // Buckle attached to first segment\n    translate([0, 0, 5])\n        buckle();\n    \n    // Second strap segment (adjustable part)\n    translate([40, 0, 0])\n        strap_segment(80, 25, 5);\n    \n    // Mounting holes on first segment\n    for(pos = [-25, -15, -5]) {\n        translate([0, 0, 0])\n            strap_hole(pos);\n    }\n    \n    // Adjustment holes on second segment\n    for(pos = [45:10:115]) {\n        translate([0, 0, 0])\n            strap_hole(pos);\n    }\n    \n    // Texture on both segments\n    translate([-60, 0, 0])\n        strap_texture(120);\n    translate([40, 0, 0])\n        strap_texture(80);\n}\n\n// Reinforcement rivets\nmodule rivet(x, y) {\n    translate([x, y, 2.5])\n        cylinder(h=5, d=8, $fn=16);\n}\n\nrivet(-25, 12.5);\nrivet(-25, -12.5);\nrivet(55, 12.5);\nrivet(55, -12.5);",
    "renders": true
  },
  {
    "sports_equipment": "harness",
    "openscad_code": "// Harness Furniture - Realistic Medium Complexity\n// A wall-mounted harness storage rack for rock-climbing gear\n\nwall_thickness = 2;\nmodule_size = 100; // Overall size reference\n\n// Main backplate for wall mounting\nmodule backplate() {\n    difference() {\n        // Main plate\n        translate([0, -5, 0])\n            cube([80, wall_thickness, 60], center=true);\n        \n        // Mounting holes\n        for(x = [-30, 0, 30])\n        for(z = [-20, 20]) {\n            translate([x, -5, z])\n                cylinder(h=wall_thickness+1, r=2, center=true);\n        }\n    }\n}\n\n// Hook for hanging harness\nmodule harness_hook() {\n    // Hook base\n    translate([0, 0, 30])\n    rotate([0, -90, 0])\n    difference() {\n        cylinder(h=20, r=4, center=true);\n        cylinder(h=21, r=2, center=true);\n    }\n    \n    // Hook curve\n    rotate([0, 90, 0])\n    translate([0, -20, 30])\n    difference() {\n        rotate_extrude(angle=180, $fn=30)\n            translate([15, 0, 0])\n                circle(r=4);\n        rotate_extrude(angle=180, $fn=30)\n            translate([15, 0, 0])\n                circle(r=2);\n    }\n    \n    // Safety lip\n    rotate([0, 90, 0])\n    translate([0, -35, 30])\n    rotate([0, 0, 90])\n    cube([4, wall_thickness, 8], center=true);\n}\n\n// Carabiner storage slots\nmodule carabiner_slots() {\n    for(i = [-1, 0, 1]) {\n        translate([i * 25, -2, -10])\n        difference() {\n            // Slot body\n            cube([8, wall_thickness, 15], center=true);\n            // Slot opening\n            translate([0, -2, 5])\n                cube([6, wall_thickness+2, 8], center=true);\n            // Rounded bottom\n            translate([0, -2, -7.5])\n                rotate([90, 0, 0])\n                cylinder(h=8.1, r=3, center=true);\n        }\n    }\n}\n\n// Quickdraw pegs\nmodule quickdraw_pegs() {\n    for(i = [-1, 1]) {\n        translate([i * 35, -1, 0])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=15, r=3, center=true);\n            cylinder(h=16, r=1.5, center=true);\n        }\n        \n        // End stop\n        translate([i * 35, -1, 8])\n        sphere(r=4);\n    }\n}\n\n// Chalk bag holder\nmodule chalk_holder() {\n    translate([0, -3, -25])\n    difference() {\n        // Main ring\n        cylinder(h=wall_thickness*2, r=12, center=true);\n        // Center hole\n        cylinder(h=wall_thickness*2+1, r=8, center=true);\n    }\n    \n    // Support arms\n    for(angle = [0, 120, 240]) {\n        rotate([0, 0, angle])\n        translate([10, -3, -25])\n        cube([20, wall_thickness, wall_thickness*2], center=true);\n    }\n}\n\n// Grip texture pattern\nmodule texture_grip() {\n    for(x = [-35:5:35])\n    for(z = [-25:5:25]) {\n        if(x*x + z*z < 30*30) {\n            translate([x, -6, z])\n            sphere(r=0.5, $fn=6);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    backplate();\n    harness_hook();\n    carabiner_slots();\n    quickdraw_pegs();\n    chalk_holder();\n    texture_grip();\n}",
    "renders": true
  },
  {
    "sports_equipment": "rope",
    "openscad_code": "// Rope Stool - Medium complexity realistic style\n// All dimensions in mm\n\nmodule rope_coil(diameter, turns, thickness, height) {\n    // Generate a coil of rope using torus segments\n    for(i = [0:turns-1]) {\n        rotate([0, 0, i * 360/turns])\n        translate([diameter/2, 0, i * height/turns])\n        rotate([90, 0, 0])\n        torus(thickness, height/turns/2);\n    }\n}\n\nmodule torus(radius, thickness) {\n    // Create a torus using cylinder and sphere\n    rotate_extrude()\n    translate([radius, 0, 0])\n    circle(thickness);\n}\n\nmodule stool_base() {\n    // Central support column\n    difference() {\n        cylinder(h=120, d=40, $fn=32);\n        cylinder(h=120, d=36, $fn=32);\n    }\n    \n    // Base plate for stability\n    difference() {\n        cylinder(h=8, d=80, $fn=32);\n        cylinder(h=8, d=76, $fn=32);\n    }\n    \n    // Top plate for seat attachment\n    translate([0, 0, 112])\n    difference() {\n        cylinder(h=8, d=80, $fn=32);\n        cylinder(h=8, d=76, $fn=32);\n    }\n}\n\nmodule rope_seat() {\n    // Create rope weave pattern for seat\n    rope_thickness = 8;\n    seat_radius = 90;\n    \n    // Outer ring\n    rotate_extrude($fn=64)\n    translate([seat_radius, 0, 0])\n    circle(rope_thickness/2);\n    \n    // Radial spokes\n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n        translate([rope_thickness/2, -rope_thickness/2, 0])\n        cube([seat_radius - rope_thickness, rope_thickness, rope_thickness]);\n    }\n    \n    // Concentric rings\n    for(r = [seat_radius-20:20:seat_radius-60]) {\n        rotate_extrude($fn=64)\n        translate([r, 0, 0])\n        circle(rope_thickness/2);\n    }\n}\n\nmodule rope_wrap() {\n    // Decorative rope wrapping around support column\n    wrap_height = 100;\n    wrap_turns = 20;\n    wrap_diameter = 44;\n    \n    for(i = [0:wrap_turns-1]) {\n        rotate([0, 0, i * 360/wrap_turns])\n        translate([wrap_diameter/2, 0, i * wrap_height/wrap_turns])\n        rotate([90, 0, 0])\n        torus(3, 2);\n    }\n}\n\nmodule foot_ring() {\n    // Comfortable foot rest ring\n    foot_height = 45;\n    \n    rotate_extrude($fn=64)\n    translate([55, 0, 0])\n    difference() {\n        circle(8);\n        circle(6);\n    }\n    \n    // Support brackets for foot ring\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, 50, foot_height])\n        cube([4, 10, 8], center=true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 8])\nstool_base();\n\ntranslate([0, 0, 120])\nrope_seat();\n\ntranslate([0, 0, 20])\nrope_wrap();\n\ntranslate([0, 0, 45])\nfoot_ring();",
    "renders": true
  },
  {
    "sports_equipment": "mat",
    "openscad_code": "// Welcome mat with realistic texture and structural frame\n// Dimensions: 120mm x 80mm x 8mm overall\n\nmodule frame_profile() {\n    // Outer frame - 2mm thick, 8mm tall\n    linear_extrude(height = 8) \n        offset(delta = 2) \n            square([116, 76], center = true);\n}\n\nmodule inner_mat() {\n    // Main mat surface - 2mm thick\n    translate([0, 0, 2])\n        cube([114, 74, 2], center = true);\n}\n\nmodule weave_texture() {\n    // Woven texture pattern\n    for (i = [-55:5:55]) {\n        translate([i, 0, 4])\n            cube([2, 70, 0.5], center = true);\n    }\n    \n    for (j = [-35:5:35]) {\n        translate([0, j, 4.5])\n            cube([110, 2, 0.5], center = true);\n    }\n}\n\nmodule welcome_text() {\n    // Raised \"WELCOME\" text\n    translate([-45, 0, 6])\n        scale([0.8, 0.8, 1])\n            linear_extrude(height = 1.5)\n                text(\"WELCOME\", size = 8, font = \"Arial:style=Bold\");\n}\n\nmodule rubber_feet() {\n    // Anti-slip rubber feet\n    for (x = [-45, 45]) {\n        for (y = [-30, 30]) {\n            translate([x, y, 0])\n                cylinder(h = 1.5, r = 4, $fn = 16);\n        }\n    }\n}\n\nmodule corner_supports() {\n    // Reinforced corners\n    for (x = [-58, 58]) {\n        for (y = [-38, 38]) {\n            translate([x, y, 0])\n                cylinder(h = 8, r = 3, $fn = 12);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    difference() {\n        // Frame structure\n        frame_profile();\n        // Cutout for mat insert\n        translate([0, 0, 2])\n            cube([112, 72, 10], center = true);\n    }\n    \n    // Mat surface with texture\n    union() {\n        inner_mat();\n        weave_texture();\n    }\n    \n    // Decorative text\n    welcome_text();\n    \n    // Structural elements\n    corner_supports();\n    \n    // Grip elements\n    translate([0, 0, 1.5])\n        rubber_feet();\n}",
    "renders": true
  },
  {
    "sports_equipment": "ring",
    "openscad_code": "// Ring Furniture - Modern Coffee Table Design\n// Realistic style with medium complexity\n\n// Overall dimensions\ntable_diameter = 120;\ntable_height = 45;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Ring structure parameters\nring_width = 25;\nring_height = 8;\nleg_width = 8;\nleg_height = 35;\n\nmodule table_top() {\n    // Main circular table top\n    difference() {\n        cylinder(h=ring_height, d=table_diameter, $fn=100);\n        \n        // Hollow center\n        cylinder(h=ring_height + 0.1, d=table_diameter - 2*ring_width, $fn=100);\n        \n        // Bottom hollow for weight reduction\n        translate([0, 0, ring_height - 2])\n            cylinder(h=2.1, d=table_diameter - 2*wall_thickness, $fn=100);\n    }\n    \n    // Inner edge support ring\n    translate([0, 0, ring_height - 2])\n        difference() {\n            cylinder(h=2, d=table_diameter - 2*ring_width + 2*wall_thickness, $fn=100);\n            cylinder(h=2.1, d=table_diameter - 2*ring_width, $fn=100);\n        }\n}\n\nmodule legs() {\n    // Generate 4 legs evenly spaced around the ring\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([(table_diameter - ring_width)/2 - leg_width/2, 0, 0])\n        rotate([90, 0, 0])\n        difference() {\n            // Main leg cylinder\n            cylinder(h=leg_height, d=leg_width, $fn=20);\n            \n            // Hollow for material efficiency\n            cylinder(h=leg_height + 0.1, d=leg_width - 2*wall_thickness, $fn=20);\n            \n            // Bottom chamfer for printability\n            translate([0, 0, 0.5])\n                cylinder(h=1, d1=leg_width + 1, d2=leg_width, $fn=20);\n        }\n    }\n}\n\nmodule support_structure() {\n    // Cross support beams between legs\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([0, 0, leg_height/2 + ring_height/2])\n        rotate([90, 0, 0])\n        difference() {\n            // Diagonal support beam\n            cube([leg_width*2, table_diameter/2 - ring_width, leg_width], center=true);\n            \n            // Hollow center\n            translate([0, 0, 0])\n            cube([leg_width*2 - 2*wall_thickness, \n                  table_diameter/2 - ring_width - wall_thickness, \n                  leg_width - wall_thickness], center=true);\n        }\n    }\n}\n\nmodule foot_pads() {\n    // Anti-slip feet at bottom of legs\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([(table_diameter - ring_width)/2 - leg_width/2, 0, leg_height + ring_height/2 - 0.5])\n        difference() {\n            // Foot pad\n            cylinder(h=2, d=leg_width + 4, $fn=20);\n            cylinder(h=2.1, d=leg_width + 2, $fn=20);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    table_top();\n    legs();\n    support_structure();\n    foot_pads();\n}",
    "renders": true
  },
  {
    "sports_equipment": "canvas",
    "openscad_code": "// Canvas Furniture - Artist Easel with Canvas\n// Realistic style, medium complexity\n// Dimensions: 100x80x120mm (WxDxH)\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\n\n// Main easel frame\nmodule easel_frame() {\n    // Left leg\n    translate([-40, 0, 0]) {\n        rotate([0, 10, 0]) {\n            cylinder(h=120, d1=8, d2=6);\n        }\n    }\n    \n    // Right leg\n    translate([40, 0, 0]) {\n        rotate([0, -10, 0]) {\n            cylinder(h=120, d1=8, d2=6);\n        }\n    }\n    \n    // Center support\n    translate([0, 25, 60]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=80, d=6);\n        }\n    }\n    \n    // Rear support leg\n    translate([0, -35, 0]) {\n        rotate([0, 0, 0]) {\n            cylinder(h=100, d=6);\n        }\n    }\n}\n\n// Canvas holder tray\nmodule canvas_tray() {\n    // Main tray\n    translate([0, 30, 20]) {\n        cube([90, 4, 8], center=true);\n    }\n    \n    // Tray supports\n    for(x=[-35, 35]) {\n        translate([x, 28, 20]) {\n            cube([4, 8, 8], center=true);\n        }\n    }\n    \n    // Canvas stop lip\n    translate([0, 32, 24]) {\n        cube([90, 2, 4], center=true);\n    }\n}\n\n// Canvas stretcher bars\nmodule canvas_stretcher() {\n    // Top bar\n    translate([0, 0, 110]) {\n        cube([70, 4, 4], center=true);\n    }\n    \n    // Bottom bar\n    translate([0, 0, 40]) {\n        cube([70, 4, 4], center=true);\n    }\n    \n    // Left bar\n    translate([-33, 0, 75]) {\n        cube([4, 4, 70], center=true);\n    }\n    \n    // Right bar\n    translate([33, 0, 75]) {\n        cube([4, 4, 70], center=true);\n    }\n    \n    // Canvas surface\n    translate([0, 2, 75]) {\n        cube([66, 0.5, 66], center=true);\n    }\n}\n\n// Adjustable height mechanism\nmodule height_adjustment() {\n    // Left slider\n    translate([-40, 0, 60]) {\n        difference() {\n            cube([4, 4, 20], center=true);\n            cylinder(h=6, d=3);\n        }\n    }\n    \n    // Right slider\n    translate([40, 0, 60]) {\n        difference() {\n            cube([4, 4, 20], center=true);\n            cylinder(h=6, d=3);\n        }\n    }\n}\n\n// Cross braces\nmodule cross_braces() {\n    // Lower front brace\n    translate([0, 20, 10]) {\n        rotate([0, 0, 0]) {\n            cube([90, 3, 3], center=true);\n        }\n    }\n    \n    // Upper rear brace\n    translate([0, -30, 80]) {\n        rotate([0, -15, 0]) {\n            cube([60, 3, 3], center=true);\n        }\n    }\n}\n\n// Canvas texture detail\nmodule canvas_texture() {\n    // Simulated canvas weave pattern\n    for(i=[-30:5:30]) {\n        for(j=[-30:5:30]) {\n            translate([i, 2.3, j]) {\n                cube([1, 0.2, 1], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    easel_frame();\n    canvas_tray();\n    cross_braces();\n    \n    // Canvas assembly\n    canvas_stretcher();\n    \n    // Details\n    height_adjustment();\n    canvas_texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "bag",
    "openscad_code": "// Realistic medium-complexity bag furniture item – hanging wall bag\n// Overall size ≈ 110 mm wide, 60 mm deep, 150 mm high\n\n$fn = 36;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer rounded block\n        hull() {\n            translate([-55/2, -30/2, 0]) cube([55, 30, 150], center = false);\n            translate([-55/2+5, -30/2+5, 0]) cube([55-10, 30-10, 150], center = false);\n        }\n        \n        // Inner cavity\n        hull() {\n            translate([-55/2+wall, -30/2+wall, wall]) cube([55-2*wall, 30-2*wall, 150-2*wall], center = false);\n            translate([-55/2+wall+3, -30/2+wall+3, wall]) cube([55-2*wall-6, 30-2*wall-6, 150-2*wall], center = false);\n        }\n        \n        // Top opening\n        translate([-55/2-1, -30/2-1, 148]) cube([55+2, 30+2, 5]);\n    }\n}\n\n// Front zipper strip\nmodule zipper() {\n    difference() {\n        // Zipper base\n        translate([-55/2+2, -30/2-1, 145]) cube([55-4, 2, 8]);\n        // Teeth recesses\n        for (i = [0:2:50]) {\n            translate([-55/2+2+i, -30/2-0.5, 145+1]) cube([1, 1, 6]);\n        }\n    }\n}\n\n// Hanging strap\nmodule strap() {\n    difference() {\n        // Full strap\n        union() {\n            translate([0, -25, 155]) cube([20, 5, 10], center = true);\n            translate([-10, -25, 160]) rotate([90, 0, 0]) cylinder(h = 10, d = 5);\n            translate([10, -25, 160]) rotate([90, 0, 0]) cylinder(h = 10, d = 5);\n        }\n        // Screw holes\n        translate([-10, -25, 160]) rotate([90, 0, 0]) cylinder(h = 12, d = 3);\n        translate([10, -25, 160]) rotate([90, 0, 0]) cylinder(h = 12, d = 3);\n    }\n}\n\n// Side pockets\nmodule side_pockets() {\n    for (side = [-1, 1]) {\n        translate([side * (55/2 - 2), 0, 70]) {\n            difference() {\n                cube([wall + 5, 20, 60], center = true);\n                translate([side * 1, 0, 0]) cube([wall + 1, 16, 56], center = true);\n            }\n        }\n    }\n}\n\n// Reinforcement seams\nmodule seams() {\n    // Vertical corner seams\n    for (x = [-55/2+5, 55/2-5]) {\n        for (y = [-30/2+5, 30/2-5]) {\n            translate([x, y, 0]) cube([wall, wall, 150]);\n        }\n    }\n    // Bottom horizontal seam\n    translate([0, 0, 0]) cube([55, 30, wall]);\n}\n\n// Furniture-style mounting plate at back\nmodule mount_plate() {\n    difference() {\n        translate([0, 30/2+1, 75]) cube([40, wall, 100], center = true);\n        // Keyhole slots for screws\n        for (h = [25, 125]) {\n            translate([-10, 30/2+1+wall/2, h]) {\n                rotate([90, 0, 0]) cylinder(h = wall+1, d = 6, $fn = 20);\n                translate([0, 0, -3]) cube([12, wall+1, 6], center = true);\n            }\n            translate([10, 30/2+1+wall/2, h]) {\n                rotate([90, 0, 0]) cylinder(h = wall+1, d = 6, $fn = 20);\n                translate([0, 0, -3]) cube([12, wall+1, 6], center = true);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    zipper();\n    strap();\n    side_pockets();\n    seams();\n    mount_plate();\n}",
    "renders": true
  },
  {
    "sports_equipment": "case",
    "openscad_code": "// Medium-complexity realistic display case for collectibles\n// External size: 100 x 60 x 120 mm (W x D x H)\n\nwall = 2;               // 2 mm thick printable walls\ngap = 0.2;              // clearance gaps for doors / lids\n\n// Main body shell\nmodule shell() {\n    difference() {\n        // outer box\n        cube([100, 60, 120], center=false);\n        // hollow out inside\n        translate([wall, wall, wall])\n            cube([100-2*wall, 60-2*wall, 120-2*wall], center=false);\n    }\n}\n\n// Front frame for glass (flush with front face)\nmodule front_frame() {\n    frame_w = 4;\n    difference() {\n        // full outer rectangle\n        translate([0, 0, 0])\n            cube([100, frame_w, 120]);\n        // inner opening\n        translate([frame_w, -gap, frame_w])\n            cube([100-2*frame_w, frame_w+gap, 120-2*frame_w]);\n    }\n}\n\n// Shelves with rounded front edge\nmodule shelves() {\n    shelf_h = 3;\n    shelf_d = 60 - wall;\n    \n    // three equally spaced shelves\n    for (z = [30, 65, 100]) {\n        translate([wall, wall, z]) {\n            difference() {\n                cube([100-2*wall, shelf_d, shelf_h]);\n                // front rounded edge\n                translate([0, shelf_d, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=100-2*wall, r=shelf_h/2, $fn=20);\n            }\n        }\n    }\n}\n\n// Back panel with screw keyholes for wall mounting\nmodule back_panel() {\n    panel_t = 3;\n    translate([-panel_t+gap, wall, wall]) {\n        cube([panel_t, 60-2*wall, 120-2*wall]);\n        // two keyholes for M4 screws\n        for (y = [30, 90]) {\n            translate([-panel_t/2, y, 60])\n                rotate([90, 0, 0])\n                    cylinder(h=panel_t+1, r=2.2, $fn=20);\n            translate([-panel_t/2, y, 60])\n                rotate([90, 0, 0])\n                    cylinder(h=panel_t+1, r=4.2, $fn=20);\n        }\n    }\n}\n\n// Door handle (simple bar grip)\nmodule door_handle() {\n    translate([50, 60, 60])\n        rotate([0, 90, 0])\n            cylinder(h=20, r=3, $fn=20);\n}\n\n// Hinges on the right side\nmodule hinges() {\n    for (z = [30, 90]) {\n        translate([100-wall, 60-wall, z])\n            rotate([0, 90, 0])\n                cylinder(h=wall*2, r=2, $fn=20);\n    }\n}\n\n// Ventilation slots at bottom rear\nmodule vents() {\n    slot_w = 20;\n    slot_h = 3;\n    for (x = [10:25:90]) {\n        translate([x, 0, wall])\n            cube([slot_w, wall, slot_h]);\n    }\n}\n\n// Assembly\nunion() {\n    shell();\n    front_frame();\n    shelves();\n    back_panel();\n    vents();\n    hinges();\n    door_handle();\n}",
    "renders": true
  },
  {
    "sports_equipment": "holder",
    "openscad_code": "// Modern Desk Tablet & Phone Holder\n// Realistic style, medium complexity, 3D printable\n\n// Global parameters\nwall_thickness = 2;\nbase_depth = 60;\nbase_width = 120;\nbase_height = 6;\nslot_width = 12;\nslot_depth = 8;\nback_angle = 15;\nfront_lip = 4;\n\n// Main body with cable holes\nmodule holder_base() {\n    difference() {\n        // Main base block\n        translate([0, 0, base_height/2])\n            cube([base_width, base_depth, base_height], center=true);\n        \n        // Cable routing slots\n        for (x=[-base_width/3, 0, base_width/3])\n            translate([x, base_depth/2, base_height/2])\n                cube([slot_width, slot_depth+1, base_height+1], center=true);\n    }\n}\n\n// Angled back support for tablets\nmodule tablet_support() {\n    // Main support structure\n    translate([0, -base_depth/2 + wall_thickness, base_height + 35*sin(back_angle)/2])\n        rotate([back_angle, 0, 0])\n            cube([base_width - 2*wall_thickness, wall_thickness, 35], center=true);\n    \n    // Support ribs for strength\n    for (x=[-base_width/2 + 15, 0, base_width/2 - 15]) {\n        translate([x, -base_depth/2 + wall_thickness/2, base_height + 35*sin(back_angle)/2])\n            rotate([back_angle, 0, 0])\n                cube([wall_thickness, wall_thickness, 35], center=true);\n    }\n}\n\n// Phone slot divider\nmodule phone_divider() {\n    translate([base_width/4, 0, base_height/2 + 25/2])\n        cube([wall_thickness, base_depth - wall_thickness, 25], center=true);\n}\n\n// Anti-slip feet\nmodule rubber_feet() {\n    foot_diameter = 8;\n    foot_height = 1.5;\n    \n    for (x=[-base_width/2 + 15, base_width/2 - 15])\n        for (y=[-base_depth/2 + 15, base_depth/2 - 15])\n            translate([x, y, foot_height/2])\n                cylinder(d=foot_diameter, h=foot_height, center=true);\n}\n\n// Front lip to prevent sliding\nmodule front_lip() {\n    translate([0, base_depth/2 - front_lip/2, base_height + 8/2])\n        cube([base_width, front_lip, 8], center=true);\n}\n\n// Soft grip texture pattern\nmodule grip_texture() {\n    pattern_size = 2;\n    spacing = 4;\n    \n    for (x=[-base_width/2 + 10 : spacing : base_width/2 - 10])\n        for (y=[-base_depth/2 + 10 : spacing : base_depth/2 - 10])\n            translate([x, y, base_height + 0.5])\n                cube([pattern_size, pattern_size, 1], center=true);\n}\n\n// Assembly\nunion() {\n    holder_base();\n    tablet_support();\n    phone_divider();\n    front_lip();\n    grip_texture();\n}\n\n// Add rubber feet as separate part\n%rubber_feet();",
    "renders": true
  },
  {
    "sports_equipment": "rack",
    "openscad_code": "// Realistic medium-complexity 3D-printable shoe rack\n// Dimensions: 90 mm W x 35 mm D x 70 mm H\n\n$fn = 24;\n\nmodule slat(width, depth, thick) {\n    // Individual wooden slat with rounded edges\n    difference() {\n        cube([width, depth, thick], center = true);\n        translate([0, 0, thick/2 - 0.5])\n            cube([width - 2, depth - 2, thick], center = true);\n    }\n}\n\nmodule shelf(width, depth, thick, gap) {\n    // Shelf made of parallel slats with gaps for airflow\n    slatCount = 5;\n    slatWidth = (width - (slatCount - 1) * gap) / slatCount;\n    for (i = [0 : slatCount - 1]) {\n        translate([(i * (slatWidth + gap)) - width/2 + slatWidth/2, 0, 0])\n            slat(slatWidth, depth - 4, thick);\n    }\n}\n\nmodule sidePanel(height, depth, thick) {\n    // Side frame with rounded top and cutouts for weight reduction\n    difference() {\n        // Main panel\n        translate([0, 0, 0])\n            cube([thick, depth, height], center = true);\n        \n        // Rounded top\n        translate([0, 0, height/2 + thick/2])\n            rotate([90, 0, 0])\n                cylinder(h = thick, r = depth/2, center = true);\n        \n        // Cutouts for weight reduction\n        for (y = [-depth/3, 0, depth/3]) {\n            for (z = [-height/4, 0, height/4]) {\n                translate([0, y, z])\n                    cube([thick + 1, 10, 10], center = true);\n            }\n        }\n    }\n}\n\nmodule backPanel(width, height, thick) {\n    // Perforated back panel for stability and airflow\n    difference() {\n        cube([width, thick, height], center = true);\n        holeSize = 4;\n        holeSpacing = 12;\n        for (x = [-width/2 + holeSpacing : holeSpacing : width/2 - holeSpacing]) {\n            for (z = [-height/2 + holeSpacing : holeSpacing : height/2 - holeSpacing]) {\n                translate([x, 0, z])\n                    cylinder(h = thick + 1, r = holeSize/2, center = true);\n            }\n        }\n    }\n}\n\nmodule supportPin() {\n    // Cylindrical support pins for shelves\n    cylinder(h = 20, r = 3, center = true);\n}\n\n// Main assembly\nunion() {\n    // Left side panel\n    translate([-45 + 2, 0, 0])\n        sidePanel(70, 35, 4);\n    \n    // Right side panel\n    translate([45 - 2, 0, 0])\n        sidePanel(70, 35, 4);\n    \n    // Back panel\n    translate([0, 15.5, 0])\n        backPanel(90, 70, 2);\n    \n    // Bottom shelf\n    translate([0, 0, -30])\n        shelf(82, 35, 3, 2);\n    \n    // Middle shelf\n    translate([0, 0, 0])\n        shelf(82, 35, 3, 2);\n    \n    // Top shelf\n    translate([0, 0, 30])\n        shelf(82, 35, 3, 2);\n    \n    // Support pins for adjustable shelves (6 per side)\n    for (z = [-25, -15, -5, 5, 15, 25]) {\n        translate([-45 + 2, 10, z])\n            rotate([90, 0, 0])\n                supportPin();\n        translate([-45 + 2, -10, z])\n            rotate([90, 0, 0])\n                supportPin();\n        translate([45 - 2, 10, z])\n            rotate([90, 0, 0])\n                supportPin();\n        translate([45 - 2, -10, z])\n            rotate([90, 0, 0])\n                supportPin();\n    }\n    \n    // Small feet for stability\n    footHeight = 2;\n    footRadius = 3;\n    footPositions = [[-35, -12], [-35, 12], [35, -12], [35, 12]];\n    for (pos = footPositions) {\n        translate([pos[0], pos[1], -35 - footHeight/2])\n            cylinder(h = footHeight, r = footRadius, center = true);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "stand",
    "openscad_code": "// Realistic Furniture-Style Tablet Stand\n// Medium complexity, 3D printable, realistic appearance\n// Overall size: 120mm(W) x 100mm(D) x 80mm(H)\n\n// Wall thickness constant\nwall_thickness = 2;\n\n// Base module - solid foundation\nmodule base() {\n    // Main base plate\n    difference() {\n        cube([120, 100, 4], center=true);\n        // Cable routing groove on bottom\n        translate([0, -40, -2.1]) \n            cube([20, 80, 2], center=true);\n    }\n}\n\n// Front support - angled tablet rest\nmodule front_support() {\n    // Main support block\n    translate([0, 35, 2]) {\n        difference() {\n            // Angled support\n            rotate([75, 0, 0]) \n                cube([110, 40, 4], center=true);\n            // Grip texture grooves\n            for(i = [-4:4]) {\n                translate([i*12 - 6, 0, -3]) \n                    cube([1.5, 60, 6], center=true);\n            }\n        }\n    }\n    // Front lip to prevent sliding\n    translate([0, 55, 18]) \n        cube([110, 4, 8], center=true);\n}\n\n// Back support - adjustable angle support\nmodule back_support() {\n    // Main back plate\n    translate([0, -35, 2]) {\n        difference() {\n            rotate([-75, 0, 0]) \n                cube([110, 50, 4], center=true);\n            // Ventilation slots\n            for(i = [-3:3]) {\n                translate([i*15 - 7.5, 0, -3]) \n                    cube([6, 40, 6], center=true);\n            }\n        }\n    }\n    // Reinforcement struts\n    strut_positions = [[-40, -20], [40, -20]];\n    for(pos = strut_positions) {\n        translate([pos[0], pos[1], 10]) {\n            rotate([0, 0, 45]) \n                cube([wall_thickness, 30, 8], center=true);\n        }\n    }\n}\n\n// Side arms - tablet guides\nmodule side_arms() {\n    for(side = [-1, 1]) {\n        translate([side*55, 0, 40]) {\n            difference() {\n                // Main arm structure\n                cube([wall_thickness, 70, 60], center=true);\n                // Rounded edges for 3D printing\n                translate([0, -35, -30]) \n                    cylinder(h=60, r1=wall_thickness, r2=wall_thickness, center=true);\n                translate([0, 35, -30]) \n                    cylinder(h=60, r1=wall_thickness, r2=wall_thickness, center=true);\n                // Rubber grip cutouts\n                translate([0, 15, -25]) \n                    cube([wall_thickness+0.1, 30, 5], center=true);\n            }\n            // Rubber bumpers\n            translate([side*0.5, 15, -25]) \n                sphere(d=4, center=true);\n            translate([side*0.5, -15, -25]) \n                sphere(d=4, center=true);\n        }\n    }\n}\n\n// Cable management - rear hook\nmodule cable_hook() {\n    translate([0, -48, 40]) {\n        difference() {\n            rotate([-90, 0, 0]) \n                cylinder(h=20, d=8, center=true);\n            // Cable entry slot\n            translate([-10, 0, 0]) \n                cube([20, 8, 8], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    front_support();\n    back_support();\n    side_arms();\n    cable_hook();\n}\n\n// Optional: Add small support feet for stability\nmodule feet() {\n    foot_positions = [[-50, -40], [50, -40], [-50, 40], [50, 40]];\n    for(pos = foot_positions) {\n        translate([pos[0], pos[1], -2.5]) \n            cylinder(h=5, d=8, center=true);\n    }\n}\n\n// Uncomment to add feet\n// feet();",
    "renders": true
  },
  {
    "sports_equipment": "pump",
    "openscad_code": "// Hand-operated water pump furniture - medium complexity realistic style\n// Overall size: ~110 mm tall, 80 mm deep, 60 mm wide\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main body (pump cylinder)\nmodule pump_body() {\n    difference() {\n        union() {\n            // Outer cylinder wall (2mm thick)\n            cylinder(h = 55, d = 30);\n            // Base flange for mounting\n            translate([0, 0, -2])\n                cylinder(h = 4, d = 45);\n            // Top flange\n            translate([0, 0, 55])\n                cylinder(h = 4, d = 35);\n        }\n        // Hollow center\n        cylinder(h = 60, d = 26);\n    }\n}\n\n// Pump handle lever\nmodule handle() {\n    // Handle grip\n    translate([0, 0, 70])\n        rotate([90, 0, 0])\n            cylinder(h = 60, d = 8);\n    \n    // Handle support arm\n    translate([-10, 15, 55])\n        rotate([0, -30, 0])\n            cube([20, 6, 6]);\n    \n    // Pivot joint\n    translate([-15, 10, 55])\n        sphere(d = 10);\n}\n\n// Pump spout outlet\nmodule spout() {\n    union() {\n        // Main spout pipe\n        translate([15, 0, 30])\n            rotate([0, 90, 0])\n                cylinder(h = 30, d1 = 12, d2 = 8);\n        \n        // Spout mounting bracket\n        translate([10, -6, 25])\n            cube([10, 12, 15]);\n    }\n}\n\n// Base support structure\nmodule base_support() {\n    union() {\n        // Front support leg\n        translate([0, -20, -10])\n            cube([6, 20, 10]);\n        \n        // Rear support leg\n        translate([0, 15, -10])\n            cube([6, 20, 10]);\n        \n        // Cross brace\n        translate([3, -15, -5])\n            cube([15, 30, 4]);\n    }\n}\n\n// Handle grip texture (knurled pattern)\nmodule grip_texture() {\n    for (i = [0:2:58]) {\n        rotate([0, 90, 0])\n            translate([i - 29, -4, 0])\n                cube([2, 8, 0.5]);\n    }\n}\n\n// Mounting bolt holes\nmodule mounting_holes() {\n    for (x = [-15, 15]) {\n        for (y = [-15, 15]) {\n            translate([x, y, -1])\n                cylinder(h = 5, d = 4);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Pump body\n    pump_body();\n    \n    // Handle assembly\n    handle();\n    \n    // Apply grip texture to handle\n    translate([0, 0, 70])\n        rotate([90, 0, 0])\n            grip_texture();\n    \n    // Spout\n    spout();\n    \n    // Base support structure\n    base_support();\n    \n    // Mounting holes (subtract from base)\n    translate([0, 0, -2])\n        mounting_holes();\n}\n\n// Structural reinforcement ribs\nfor (angle = [0:120:359]) {\n    rotate([0, 0, angle])\n        translate([13, 0, 27])\n            cube([2, 2, 6]);\n}",
    "renders": true
  },
  {
    "sports_equipment": "needle",
    "openscad_code": "// Needle Furniture - Realistic Style, Medium Complexity\n// 3D printable needle (sewing needle) with furniture characteristics\n\nneedle_height = 120;\nneedle_thickness = 3;\neye_width = 8;\neye_height = 4;\ngrip_length = 25;\n\nmodule needle_eye() {\n    // Main eye hole (elongated oval)\n    difference() {\n        translate([0, 0, -needle_thickness/2])\n            scale([1, 0.6, 1])\n            cylinder(h=needle_thickness+0.2, r1=eye_width/2, r2=eye_width/2, $fn=50);\n        translate([0, 0, -needle_thickness/2-0.1])\n            scale([0.7, 0.4, 1])\n            cylinder(h=needle_thickness+0.3, r1=eye_width/2-1.5, r2=eye_width/2-1.5, $fn=50);\n    }\n}\n\nmodule grip_texture() {\n    // Textured grip area for handling\n    for (i = [0:2:grip_length-2]) {\n        translate([-needle_height/2 + 5 + i, 0, -needle_thickness/2-0.1])\n            cube([1.5, needle_thickness+0.2, needle_thickness+0.2], center=true);\n    }\n}\n\nmodule needle_shaft() {\n    // Main tapered shaft\n    hull() {\n        // Eye end\n        translate([-needle_height/2, 0, 0])\n            cylinder(h=needle_thickness, r1=needle_thickness/2, r2=needle_thickness/2, center=true, $fn=30);\n        // Point end\n        translate([needle_height/2-2, 0, 0])\n            cylinder(h=needle_thickness, r1=0.5, r2=0.5, center=true, $fn=30);\n    }\n}\n\nmodule furniture_base() {\n    // Stable base for standing needle vertically (furniture characteristic)\n    difference() {\n        // Main base cylinder\n        translate([0, 0, -needle_height/2-8])\n            cylinder(h=6, r1=12, r2=15, $fn=60);\n        \n        // Center hole for needle insertion\n        translate([0, 0, -needle_height/2-10])\n            cylinder(h=12, r1=needle_thickness/2+0.5, r2=needle_thickness/2+0.5, $fn=30);\n    }\n    \n    // Decorative rings on base\n    for (i = [1:2]) {\n        translate([0, 0, -needle_height/2-7 + i*2])\n            cylinder(h=0.8, r1=13-i, r2=14-i, $fn=60);\n    }\n}\n\nmodule needle_assembly() {\n    // Complete needle structure\n    union() {\n        // Main shaft\n        needle_shaft();\n        \n        // Eye at the top\n        translate([-needle_height/2 + 5, 0, 0])\n            needle_eye();\n        \n        // Grip area near eye\n        translate([-needle_height/2 + 5, 0, 0])\n            grip_texture();\n        \n        // Furniture base\n        furniture_base();\n        \n        // Structural reinforcement ring\n        translate([-needle_height/2 + grip_length + 5, 0, 0])\n            cylinder(h=needle_thickness, r1=needle_thickness/2+0.5, r2=needle_thickness/2+0.5, center=true, $fn=30);\n    }\n}\n\n// Rotate to stand vertically\nrotate([90, 0, 0])\n    needle_assembly();",
    "renders": true
  },
  {
    "sports_equipment": "gauge",
    "openscad_code": "// Gauge-shaped Furniture Item - A side table with gauge face\n// Overall dimensions: 120mm diameter, 400mm height\n\n$fn = 50;\n\n// Main parameters\ngauge_diameter = 120;\ngauge_thickness = 20;\nleg_height = 380;\nleg_diameter = 25;\nshelf_thickness = 15;\nshelf_diameter = 80;\n\n// Gauge face module\nmodule gauge_face() {\n    // Main gauge body\n    difference() {\n        cylinder(h=gauge_thickness, d=gauge_diameter);\n        // Hollow center for weight reduction\n        cylinder(h=gauge_thickness + 1, d=gauge_diameter - 4);\n    }\n    \n    // Transparent window (solid for 3D printing)\n    translate([0, 0, gauge_thickness - 2])\n        cylinder(h=2, d=gauge_diameter - 10);\n    \n    // Gauge markings\n    for (i = [0:9]) {\n        rotate([0, 0, i * 36])\n            translate([gauge_diameter/2 - 10, 0, gauge_thickness - 1])\n                cube([10, 2, 1]);\n    }\n    \n    // Center hub\n    translate([0, 0, gauge_thickness - 3])\n        cylinder(h=3, d=20);\n}\n\n// Gauge needle module\nmodule gauge_needle() {\n    // Needle base\n    translate([0, 0, gauge_thickness - 2.5])\n        cylinder(h=5, d=8);\n    \n    // Needle arm\n    translate([0, 0, gauge_thickness - 0.5])\n        rotate([0, 0, -45]) // Position at 45 degrees\n        union() {\n            // Main needle\n            translate([gauge_diameter/4, 0, 0])\n                cube([gauge_diameter/2 - 15, 3, 1]);\n            \n            // Counterweight\n            translate([-8, 0, 0])\n                cube([10, 3, 1]);\n        }\n}\n\n// Leg module with joint detail\nmodule table_leg() {\n    // Main leg\n    cylinder(h=leg_height, d=leg_diameter);\n    \n    // Joint collar at top\n    translate([0, 0, leg_height - 10])\n        cylinder(h=10, d=leg_diameter + 6);\n    \n    // Foot detail\n    translate([0, 0, 5])\n        sphere(d=leg_diameter + 4);\n}\n\n// Shelf module\nmodule middle_shelf() {\n    difference() {\n        cylinder(h=shelf_thickness, d=shelf_diameter);\n        // Cutouts for legs\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90 + 45])\n                translate([shelf_diameter/2 - 10, 0, -1])\n                    cylinder(h=shelf_thickness + 2, d=leg_diameter + 2);\n        }\n    }\n}\n\n// Assembly\n// Base\ntranslate([0, 0, 0]) {\n    // Four legs\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([gauge_diameter/2 - 20, 0, 0])\n                table_leg();\n    }\n    \n    // Bottom shelf\n    translate([0, 0, 100])\n        middle_shelf();\n    \n    // Top gauge table surface\n    translate([0, 0, leg_height])\n        union() {\n            gauge_face();\n            gauge_needle();\n        }\n    \n    // Support ring between legs\n    translate([0, 0, 200])\n        difference() {\n            cylinder(h=10, d=gauge_diameter - 10);\n            cylinder(h=11, d=gauge_diameter - 30);\n        }\n}",
    "renders": true
  },
  {
    "sports_equipment": "whistle",
    "openscad_code": "// Whistle Furniture Item - Realistic Style, Medium Complexity\n// Dimensions: 120mm length, 40mm width, 20mm height\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\nlength = 120;\nwidth = 40;\nheight = 20;\nmouthpiece_length = 25;\nwindow_length = 35;\nwindow_width = 10;\nball_diameter = 12;\ngrip_depth = 1;\n\n// Main body with hollow chamber\nmodule whistle_body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, height/2]) cube([length, width, height], center=true);\n            translate([-(length/2 - mouthpiece_length/2), 0, height/2]) \n                cube([mouthpiece_length, width*0.7, height], center=true);\n        }\n        \n        // Inner chamber\n        translate([0, 0, height/2 + wall_thickness/2]) \n            cube([length - 2*wall_thickness, width - 2*wall_thickness, height - wall_thickness], center=true);\n        \n        // Mouthpiece opening\n        translate([-(length/2 - mouthpiece_length/2 + wall_thickness), 0, height/2]) \n            cube([mouthpiece_length, width*0.7 - wall_thickness, height - wall_thickness], center=true);\n    }\n}\n\n// Window (sound hole)\nmodule window() {\n    difference() {\n        translate([length/2 - window_length/2 - 15, 0, height - 1]) \n            cube([window_length, window_width, 2], center=true);\n    }\n}\n\n// Grip texture rings\nmodule grip_rings() {\n    for (i = [0:3]) {\n        translate([-(length/2 - 10 - i*20), 0, height/2]) {\n            difference() {\n                cylinder(h=wall_thickness, r=width/2, center=true);\n                cylinder(h=wall_thickness+0.1, r=width/2 - grip_depth, center=true);\n            }\n        }\n    }\n}\n\n// Pea ball inside\nmodule pea() {\n    color(\"white\")\n    translate([length/2 - 35, 0, height/2]) \n        sphere(d=ball_diameter);\n}\n\n// Keychain ring mount\nmodule keychain_mount() {\n    translate([length/2, 0, height/2]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h=8, r=5, center=true);\n                cylinder(h=9, r=3, center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    whistle_body();\n    window();\n    grip_rings();\n    keychain_mount();\n    \n    // Add pea only for visual representation\n    %pea();\n}",
    "renders": true
  },
  {
    "sports_equipment": "timer",
    "openscad_code": "// OpenSCAD code for a realistic timer furniture item (table-top hourglass)\n// Overall dimensions: 120 mm tall, 80 mm diameter base\n\n$fn = 50;          // Smooth curves for printing\nwall = 2;          // 2 mm wall thickness for 3D printing\n\n// Main module\nmodule timer() {\n    // Base ring with structural gussets\n    union() {\n        // Bottom ring support\n        difference() {\n            cylinder(h = 8, d = 80, center = true);\n            translate([0, 0, 1])\n                cylinder(h = 10, d = 76, center = true);\n        }\n        \n        // Top ring support\n        translate([0, 0, 112])\n        difference() {\n            cylinder(h = 8, d = 80, center = true);\n            translate([0, 0, 1])\n                cylinder(h = 10, d = 76, center = true);\n        }\n        \n        // Structural gussets (8 radial supports)\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([0, 35, 56])\n            cube([wall, 8, 104], center = true);\n        }\n    }\n    \n    // Central hourglass structure\n    difference() {\n        // Main glass shape (two cones joined)\n        union() {\n            // Bottom cone\n            cylinder(h1 = 50, h2 = 0, r1 = 32, r2 = 6, center = true);\n            translate([0, 0, 50])\n            cylinder(h1 = 0, h2 = 50, r1 = 6, r2 = 32, center = true);\n        }\n        \n        // Hollow out the glass\n        translate([0, 0, -1])\n        union() {\n            cylinder(h1 = 52, h2 = 0, r1 = 30, r2 = 4, center = true);\n            translate([0, 0, 52])\n            cylinder(h1 = 0, h2 = 52, r1 = 4, r2 = 30, center = true);\n        }\n    }\n    \n    // Wooden end caps with traditional furniture joints\n    difference() {\n        // Top cap\n        translate([0, 0, 100])\n        cylinder(h = 12, d = 36);\n        \n        // Decorative groove\n        translate([0, 0, 106])\n        cylinder(h = 2, d = 32);\n    }\n    \n    difference() {\n        // Bottom cap\n        translate([0, 0, 20])\n        cylinder(h = 12, d = 36);\n        \n        // Decorative groove\n        translate([0, 0, 26])\n        cylinder(h = 2, d = 32);\n    }\n    \n    // Sand particles (simplified representation)\n    // Top sand\n    translate([0, 0, 75])\n    cylinder(h = 20, r1 = 4, r2 = 4);\n    \n    // Bottom sand\n    translate([0, 0, 35])\n    cylinder(h = 20, r1 = 4, r2 = 4);\n    \n    // Central neck detail\n    translate([0, 0, 50])\n    cylinder(h = 8, d = 14);\n}\n\n// Render the timer\ntimer();",
    "renders": true
  },
  {
    "sports_equipment": "scoreboard",
    "openscad_code": "// Sports scoreboard furniture - medium complexity realistic style\n// Dimensions: 120mm x 80mm x 150mm (Width x Depth x Height)\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main scoreboard frame\nmodule scoreboard_frame() {\n    // Outer frame\n    difference() {\n        // Outer box\n        cube([120, 80, 150], center=true);\n        // Inner cavity\n        translate([0, 0, 5])\n            cube([116, 76, 146], center=true);\n    }\n}\n\n// Score display panel\nmodule display_panel() {\n    // Main display background\n    translate([0, 0, 60])\n        cube([100, 60, 2], center=true);\n    \n    // Digital display segments (7-segment style)\n    for (x = [-35, 35]) {\n        for (y = [15, -15]) {\n            translate([x, y, 62])\n                cube([20, 25, 1], center=true);\n        }\n    }\n}\n\n// Control buttons panel\nmodule control_panel() {\n    translate([0, -35, 20])\n        cube([90, 8, 30], center=true);\n    \n    // Buttons\n    for (i = [-30, -10, 10, 30]) {\n        translate([i, -39, 30])\n            cylinder(h=5, r=4, center=true);\n    }\n}\n\n// Support legs\nmodule support_legs() {\n    // Front legs\n    for (x = [-45, 45]) {\n        translate([x, 35, -65])\n            cylinder(h=130, r=3, center=false);\n    }\n    \n    // Rear legs\n    for (x = [-45, 45]) {\n        translate([x, -35, -65])\n            cylinder(h=130, r=3, center=false);\n    }\n}\n\n// Cross bracing\nmodule cross_bracing() {\n    // Front brace\n    translate([0, 35, -20])\n        cube([100, wall_thickness, 10], center=true);\n    \n    // Rear brace\n    translate([0, -35, -20])\n        cube([100, wall_thickness, 10], center=true);\n    \n    // Side braces\n    translate([45, 0, -20])\n        cube([wall_thickness, 70, 10], center=true);\n    translate([-45, 0, -20])\n        cube([wall_thickness, 70, 10], center=true);\n}\n\n// Speaker grilles\nmodule speakers() {\n    for (y = [25, -25]) {\n        translate([55, y, 100])\n            cube([8, 20, 2], center=true);\n        \n        // Grille holes\n        for (i = [-8:4:8]) {\n            translate([59, y + i, 100])\n                cylinder(h=3, r=1, center=true);\n        }\n    }\n}\n\n// Top handle\nmodule top_handle() {\n    translate([0, 0, 76]) {\n        // Handle base\n        cube([60, 10, 6], center=true);\n        \n        // Handle grip\n        translate([0, 0, 5])\n            cylinder(h=20, r=5, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    scoreboard_frame();\n    display_panel();\n    control_panel();\n    support_legs();\n    cross_bracing();\n    speakers();\n    top_handle();\n}",
    "renders": true
  },
  {
    "sports_equipment": "doll",
    "openscad_code": "// Doll's Rocking Chair (realistic style, medium complexity)\n// Overall height ~80 mm, seat ~50 mm wide – fits 1:6 scale dolls\n\n$fa = 3; $fs = 1; // smoother curves\n\n// Chair parameters\nwall = 2;              // wall thickness for printing\nseat_w = 50;           // seat width\nseat_d = 45;           // seat depth\nseat_h = 40;           // seat height above rockers\nback_h = 40;           // back-rest height above seat\nleg_len = seat_h - wall; // length of legs\n\ndifference() {\n    union() {\n        // Rockers (curved skids)\n        translate([-seat_w/2 - 2*wall, -seat_d - 20, 0])\n            mirror([0,1,0]) rockers();\n\n        // Seat\n        translate([0,0,seat_h])\n            cube([seat_w, seat_d, wall], center=true);\n\n        // Back rest\n        translate([0, -seat_d/2 + wall/2, seat_h + back_h/2])\n            cube([seat_w, wall, back_h], center=true);\n\n        // Back slats\n        slats();\n\n        // Front legs\n        translate([seat_w/2 - wall, 0, seat_h/2])\n            cube([wall, seat_d/2, leg_len], center=true);\n        translate([-seat_w/2 + wall, 0, seat_h/2])\n            cube([wall, seat_d/2, leg_len], center=true);\n\n        // Rear legs\n        translate([seat_w/2 - wall, -seat_d/2 + wall/2, seat_h/2])\n            cube([wall, wall, leg_len], center=true);\n        translate([-seat_w/2 + wall, -seat_d/2 + wall/2, seat_h/2])\n            cube([wall, wall, leg_len], center=true);\n    }\n\n    // Cutouts for weight reduction and style\n    // Central seat hole\n    translate([0, 0, seat_h])\n        cylinder(h = wall + 0.1, r = 12, $fn=32, center=true);\n\n    // Back-rest decorative cutout\n    translate([0, -seat_d/2, seat_h + back_h/2])\n        cube([seat_w*0.5, wall + 0.1, back_h*0.6], center=true);\n}\n\nmodule rockers() {\n    // left rocker\n    difference() {\n        translate([0, 0, -10])\n            cylinder(h = seat_w + 4*wall, r = 10, center=true, $fn=64);\n        translate([0, 0, -10])\n            cylinder(h = seat_w + 4*wall + 1, r = 8, center=true, $fn=64);\n    }\n    // right rocker\n    translate([0, seat_d + 40, 0])\n        difference() {\n            translate([0, 0, -10])\n                cylinder(h = seat_w + 4*wall, r = 10, center=true, $fn=64);\n            translate([0, 0, -10])\n                cylinder(h = seat_w + 4*wall + 1, r = 8, center=true, $fn=64);\n        }\n    // bridging beam between rockers\n    translate([0, (seat_d + 40)/2, -10])\n        rotate([90,0,0])\n            cylinder(h = seat_d + 40, r = wall, $fn=32);\n}\n\nmodule slats() {\n    // Four vertical slats\n    for (x = [-seat_w/3, -seat_w/6, seat_w/6, seat_w/3]) {\n        translate([x, -seat_d/2 + wall/2, seat_h + back_h/2])\n            cube([wall*0.8, wall, back_h], center=true);\n    }\n}\n\n// Optional armrests (comment out if undesired)\ntranslate([seat_w/2, 0, seat_h + back_h/2])\n    armrest();\nmirror([1,0,0])\n    armrest();\n\nmodule armrest() {\n    difference() {\n        translate([wall/2, 0, 0])\n            cube([wall, seat_d/2, wall*4], center=true);\n        translate([wall/2, seat_d/4 - 2, -wall])\n            cube([wall + 0.1, wall*2, wall*6], center=true);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "figure",
    "openscad_code": "// Figure furniture item - Rocking Chair with realistic styling\n// Dimensions: ~120mm height, ~90mm width, ~75mm depth\n\nmodule leg() {\n    // Chair leg with rounded top and tapered shape\n    difference() {\n        cylinder(h=40, r1=5, r2=4, $fn=20);\n        translate([0, 0, 38]) sphere(r=4.5, $fn=20);\n    }\n}\n\nmodule rocker_rocker() {\n    // Rounded rocker base\n    difference() {\n        hull() {\n            translate([-35, 0, 0]) cylinder(h=5, r=5, $fn=20);\n            translate([35, 0, 0]) cylinder(h=5, r=5, $fn=20);\n        }\n        translate([-35, 0, -2]) cube([70, 10, 9], center=true);\n    }\n}\n\nmodule back_support() {\n    // Curved back support with vertical slats\n    union() {\n        // Main back frame\n        translate([0, 0, 0]) rotate([10, 0, 0]) cube([60, 4, 45], center=true);\n        \n        // Vertical slats\n        for(i = [-20:10:20]) {\n            translate([i, 0, 10]) cube([4, 3, 35], center=true);\n        }\n    }\n}\n\nmodule armrest() {\n    // Curved armrest\n    hull() {\n        translate([-5, 0, 0]) cylinder(h=3, r=4, $fn=20);\n        translate([25, 5, 0]) cylinder(h=3, r=4, $fn=20);\n    }\n}\n\nmodule seat() {\n    // Curved seat with slight indent\n    difference() {\n        translate([0, 0, 0]) scale([1, 0.8, 0.2]) sphere(r=30, $fn=40);\n        translate([0, 0, -5]) cube([60, 50, 10], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Rockers - bottom curved bases\n    translate([0, -35, -5]) rocker_rocker();\n    translate([0, 35, -5]) mirror([0, 1, 0]) rocker_rocker();\n    \n    // Leg assembly - 4 legs connecting rockers to seat\n    translate([-25, -25, 15]) leg();\n    translate([25, -25, 15]) leg();\n    translate([-25, 25, 15]) leg();\n    translate([25, 25, 15]) leg();\n    \n    // Seat\n    translate([0, 0, 40]) seat();\n    \n    // Back support assembly\n    translate([0, -25, 65]) back_support();\n    \n    // Armrests\n    translate([-30, -10, 55]) rotate([0, 0, -15]) armrest();\n    translate([30, -10, 55]) mirror([1, 0, 0]) armrest();\n    \n    // Support bars between legs\n    translate([-25, 0, 25]) cube([4, 50, 4], center=true);\n    translate([25, 0, 25]) cube([4, 50, 4], center=true);\n}\n\n// Scale to appropriate 3D printing size\nscale(0.8) children();",
    "renders": true
  },
  {
    "sports_equipment": "actionfigure",
    "openscad_code": "// Action Figure Office Chair (1:12 scale for 6\" action figures)\n// Overall height: ~55mm, seat height: ~30mm, width: ~45mm, depth: ~45mm\n\nmodule chair_base() {\n    // 5-star caster base\n    difference() {\n        union() {\n            // Central cylinder post\n            cylinder(h=8, d=8, $fn=32);\n            \n            // 5 arms in star pattern\n            for(i=[0:4]) {\n                rotate([0,0,i*72]) \n                translate([0,8,0])\n                cube([20,4,6], center=true);\n            }\n        }\n        \n        // Hollow out center\n        translate([0,0,-1])\n        cylinder(h=10, d=4, $fn=32);\n    }\n}\n\nmodule gas_spring() {\n    // Telescoping gas spring cylinder\n    difference() {\n        cylinder(h=20, d=6, $fn=32);\n        translate([0,0,2])\n        cylinder(h=18, d=4, $fn=32);\n    }\n}\n\nmodule seat_pan() {\n    // Main seat cushion with slight contour\n    difference() {\n        // Overall cushion shape\n        translate([0,0,3])\n        scale([1,1.1,0.3])\n        sphere(d=40, $fn=64);\n        \n        // Flatten bottom\n        translate([0,0,-5])\n        cube([60,60,10], center=true);\n        \n        // Hollow slightly for weight\n        translate([0,0,-1])\n        scale([0.9,0.9,1])\n        sphere(d=38, $fn=64);\n    }\n}\n\nmodule seat_back() {\n    // Ergonomic backrest with lumbar support\n    difference() {\n        union() {\n            // Main back panel\n            translate([0,2,25])\n            scale([1,0.8,1.2])\n            rotate([15,0,0])\n            cube([40,8,35], center=true);\n            \n            // Lumbar curve\n            translate([0,2,20])\n            rotate([15,0,0])\n            scale([0.8,0.6,0.4])\n            sphere(d=30, $fn=64);\n        }\n        \n        // Hollow back\n        translate([0,-2,25])\n        rotate([15,0,0])\n        cube([36,12,30], center=true);\n    }\n}\n\nmodule armrest(side) {\n    // Adjustable armrest with pad\n    translate([side*18,0,12]) {\n        // Support post\n        cylinder(h=10, d=4, $fn=16);\n        \n        // Arm pad\n        translate([0,0,11])\n        rotate([0,20,0])\n        scale([1,2.5,0.5])\n        sphere(d=12, $fn=32);\n    }\n}\n\nmodule caster_wheel() {\n    // Swivel caster wheel\n    rotate([90,0,0])\n    difference() {\n        // Wheel body\n        cylinder(h=6, d=8, $fn=24);\n        \n        // Tread pattern grooves\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n            translate([2,0,0])\n            cube([0.5,8,6], center=true);\n        }\n        \n        // Axle hole\n        rotate([0,90,0])\n        cylinder(h=10, d=2, center=true, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base with casters\n    chair_base();\n    \n    // Add 5 caster wheels\n    for(i=[0:4]) {\n        rotate([0,0,i*72]) \n        translate([20,0,-2])\n        caster_wheel();\n    }\n    \n    // Gas spring\n    translate([0,0,8])\n    gas_spring();\n    \n    // Seat mechanism\n    translate([0,0,28])\n    difference() {\n        cylinder(h=4, d=12, $fn=32);\n        cylinder(h=6, d=8, $fn=32);\n    }\n    \n    // Seat cushion\n    translate([0,0,32])\n    seat_pan();\n    \n    // Backrest support\n    translate([0,-8,34])\n    rotate([0,-10,0])\n    cylinder(h=25, d=6, $fn=16);\n    \n    // Backrest\n    seat_back();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n}",
    "renders": true
  },
  {
    "sports_equipment": "robot",
    "openscad_code": "// Robot Bookshelf Unit\n// Medium complexity 3D printable robot furniture\n// Overall dimensions: 120mm x 80mm x 150mm\n\n// Parameters\nwall_thickness = 2;\nshelf_depth = 80;\nshelf_width = 120;\ntotal_height = 150;\nleg_height = 20;\nshelf_spacing = 40;\n\n// Main module\nmodule robot_bookshelf() {\n    // Robot body - main bookshelf structure\n    union() {\n        // Bottom shelf (robot feet)\n        translate([0, 0, leg_height]) {\n            shelf_unit();\n        }\n        \n        // Middle shelf\n        translate([0, 0, leg_height + shelf_spacing]) {\n            shelf_unit();\n        }\n        \n        // Top shelf\n        translate([0, 0, leg_height + shelf_spacing * 2]) {\n            shelf_unit();\n        }\n        \n        // Robot head - decorative top\n        translate([0, 0, leg_height + shelf_spacing * 3]) {\n            robot_head();\n        }\n        \n        // Robot legs - support structure\n        legs_support();\n        \n        // Side panels with robot arm details\n        side_panels();\n        \n        // Back panel for stability\n        back_panel();\n    }\n}\n\n// Individual shelf module\nmodule shelf_unit() {\n    difference() {\n        // Main shelf platform\n        cube([shelf_width, shelf_depth, wall_thickness], center=true);\n        \n        // Front edge rounding - chamfer for printability\n        translate([0, shelf_depth/2 - wall_thickness/2, 0]) {\n            cube([shelf_width - 4, wall_thickness * 2, wall_thickness * 2], center=true);\n        }\n    }\n}\n\n// Robot head - decorative top section\nmodule robot_head() {\n    // Head base\n    translate([0, 0, 10]) {\n        cube([shelf_width * 0.6, shelf_depth * 0.5, 20], center=true);\n    }\n    \n    // Eyes\n    for(x = [-20, 20]) {\n        translate([x, 0, 25]) {\n            sphere(r=5, $fn=16);\n        }\n    }\n    \n    // Antenna\n    translate([0, 0, 35]) {\n        cylinder(h=15, r=2, center=true, $fn=8);\n    }\n}\n\n// Support legs module\nmodule legs_support() {\n    // Four corner legs\n    for(x = [-shelf_width/2 + 10, shelf_width/2 - 10])\n    for(y = [-shelf_depth/2 + 10, shelf_depth/2 - 10]) {\n        translate([x, y, leg_height/2]) {\n            cylinder(h=leg_height, r=5, center=true, $fn=16);\n        }\n    }\n}\n\n// Side panels with robot arm details\nmodule side_panels() {\n    // Left side panel\n    translate([-shelf_width/2 - wall_thickness/2, 0, total_height/2]) {\n        cube([wall_thickness, shelf_depth, total_height], center=true);\n    }\n    \n    // Right side panel\n    translate([shelf_width/2 + wall_thickness/2, 0, total_height/2]) {\n        cube([wall_thickness, shelf_depth, total_height], center=true);\n    }\n    \n    // Robot arm details on sides\n    for(side = [-1, 1]) {\n        // Upper arm\n        translate([side * (shelf_width/2 + wall_thickness), 0, leg_height + shelf_spacing * 1.5]) {\n            rotate([0, 0, side * 30]) {\n                cube([30, wall_thickness, 10], center=true);\n            }\n        }\n        \n        // Lower arm\n        translate([side * (shelf_width/2 + wall_thickness + 25), 0, leg_height + shelf_spacing * 0.5]) {\n            rotate([0, 0, side * 45]) {\n                cube([25, wall_thickness, 8], center=true);\n            }\n        }\n    }\n}\n\n// Back panel for stability\nmodule back_panel() {\n    translate([0, -shelf_depth/2 - wall_thickness/2, total_height/2]) {\n        cube([shelf_width, wall_thickness, total_height], center=true);\n    }\n}\n\n// Generate the model\nrobot_bookshelf();",
    "renders": true
  },
  {
    "sports_equipment": "stuffedanimal",
    "openscad_code": "// Teddy Bear Chair for stuffed animals\n// Overall dimensions: 70mm W x 80mm D x 90mm H\n// Designed for 3D printing with 2mm walls\n\n$fn = 32;\n\n// Main chair body\nmodule chair_body() {\n    // Seat base - rounded cube\n    translate([0, 0, 40]) \n        minkowski() {\n            cube([60, 70, 10], center = true);\n            sphere(3);\n        }\n    \n    // Backrest - rounded cube with curve\n    translate([0, -25, 65])\n        rotate([10, 0, 0])\n        minkowski() {\n            cube([60, 8, 40], center = true);\n            sphere(2);\n        }\n    \n    // Armrests\n    difference() {\n        union() {\n            // Left armrest\n            translate([-35, 15, 55])\n                rotate([0, 15, 0])\n                minkowski() {\n                    cube([8, 50, 20], center = true);\n                    sphere(2);\n                }\n            // Right armrest\n            translate([35, 15, 55])\n                rotate([0, -15, 0])\n                minkowski() {\n                    cube([8, 50, 20], center = true);\n                    sphere(2);\n                }\n        }\n        // Hollow out armrests for 2mm walls\n        translate([-35, 15, 55])\n            rotate([0, 15, 0])\n            scale([0.6, 0.6, 0.6])\n            minkowski() {\n                cube([8, 50, 20], center = true);\n                sphere(2);\n            }\n        translate([35, 15, 55])\n            rotate([0, -15, 0])\n            scale([0.6, 0.6, 0.6])\n            minkowski() {\n                cube([8, 50, 20], center = true);\n                sphere(2);\n            }\n    }\n}\n\n// Chair legs with paw feet\nmodule legs() {\n    for (x = [-25, 25]) {\n        for (y = [-20, 20]) {\n            // Leg post\n            translate([x, y, 20])\n                cylinder(h = 38, r = 4, center = true);\n            \n            // Paw foot\n            translate([x, y, 2])\n                sphere(8);\n            \n            // Paw pads\n            translate([x, y, 0])\n                cylinder(h = 1, r = 6);\n            for (i = [0:2]) {\n                rotate([0, 0, i*120])\n                translate([x + 4, y, 0])\n                    sphere(1.5);\n            }\n        }\n    }\n}\n\n// Teddy bear head backrest detail\nmodule bear_head() {\n    // Head sphere\n    translate([0, -25, 85])\n        sphere(12);\n    \n    // Ears\n    for (x = [-8, 8]) {\n        translate([x, -25, 95])\n            sphere(6);\n    }\n    \n    // Muzzle\n    translate([0, -31, 85])\n        sphere(6);\n    \n    // Eyes\n    for (x = [-4, 4]) {\n        translate([x, -25, 87])\n            sphere(2);\n    }\n    \n    // Nose\n    translate([0, -33, 87])\n        sphere(1.5);\n}\n\n// Back support structure\nmodule back_support() {\n    difference() {\n        // Main support beam\n        translate([0, -25, 45])\n            rotate([10, 0, 0])\n            cube([10, 8, 40], center = true);\n        \n        // Hollow core\n        translate([0, -25, 45])\n            rotate([10, 0, 0])\n            cube([6, 4, 36], center = true);\n    }\n}\n\n// Cushion details\nmodule cushions() {\n    // Seat cushion\n    difference() {\n        translate([0, 0, 46])\n            minkowski() {\n                cube([56, 66, 6], center = true);\n                sphere(1);\n            }\n        // Button tufts\n        for (x = [-20, 0, 20]) {\n            for (y = [-20, 0, 20]) {\n                translate([x, y, 49])\n                    cylinder(h = 3, r1 = 3, r2 = 1.5);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Hollow main body\n    difference() {\n        union() {\n            chair_body();\n            back_support();\n        }\n        // Interior hollow for 2mm walls\n        scale([0.9, 0.9, 0.9]) {\n            chair_body();\n            back_support();\n        }\n    }\n    \n    // Solid components\n    legs();\n    bear_head();\n    cushions();\n}",
    "renders": true
  },
  {
    "sports_equipment": "marionette",
    "openscad_code": "// Marionette Chair - Realistic Style, Medium Complexity\n// A 1:12 scale dollhouse chair for a marionette puppet\n// Overall dimensions: 45mm W x 40mm D x 75mm H\n\n$fn = 32;\n\n// Main assembly\nmodule chair() {\n    union() {\n        // Chair seat\n        seat();\n        \n        // Chair backrest\n        backrest();\n        \n        // Four legs\n        legs();\n        \n        // Support stretchers between legs\n        stretchers();\n        \n        // Decorative elements\n        details();\n    }\n}\n\n// Seat module - solid block with rounded edges\nmodule seat() {\n    translate([0, 0, 35]) {\n        difference() {\n            // Main seat block\n            rounded_cube([40, 35, 5], 2);\n            \n            // Recessed top surface\n            translate([0, 0, 2.1])\n                rounded_cube([36, 31, 2], 1);\n            \n            // Screw holes for backrest attachment\n            for (x = [-15, 15])\n                translate([x, 0, 0])\n                    cylinder(h=6, r=1.5);\n        }\n    }\n}\n\n// Backrest with vertical slats and top rail\nmodule backrest() {\n    // Backrest posts\n    for (x = [-16, 16]) {\n        translate([x, -14, 52.5]) {\n            rotate([0, 0, 5 * (x > 0 ? -1 : 1)])\n                rounded_cube([4, 4, 30], 1);\n        }\n    }\n    \n    // Top rail\n    translate([0, -14, 67.5])\n        rounded_cube([38, 4, 4], 2);\n    \n    // Vertical slats\n    for (x = [-10, 0, 10]) {\n        translate([x, -12, 52.5])\n            rounded_cube([3, 2, 30], 1);\n    }\n}\n\n// Four tapered legs\nmodule legs() {\n    for (x = [-15, 15])\n        for (y = [-12, 12]) {\n            translate([x, y, 17.5]) {\n                difference() {\n                    // Tapered leg\n                    cylinder(h1=5, h2=2, h=35);\n                    \n                    // Hidden cavity for weight reduction\n                    translate([0, 0, 5])\n                        cylinder(h=25, r=1.5);\n                }\n            }\n        }\n}\n\n// Support stretchers between legs\nmodule stretchers() {\n    // Front stretcher\n    translate([0, 12, 15])\n        rounded_cube([26, 2, 2], 1);\n    \n    // Back stretcher\n    translate([0, -12, 15])\n        rounded_cube([26, 2, 2], 1);\n    \n    // Side stretchers\n    for (y = [-6, 6]) {\n        translate([15, y, 15])\n            rotate([0, 0, 90])\n                rounded_cube([24, 2, 2], 1);\n    }\n}\n\n// Decorative details\nmodule details() {\n    // Carved details on backrest top rail\n    translate([0, -14, 67.5])\n        for (x = [-15:5:15]) {\n            translate([x, 0, 1.5])\n                cylinder(h=0.5, r=1);\n        }\n    \n    // Rounded front edge of seat\n    translate([0, 17.5, 37.5])\n        rotate([90, 0, 0])\n            cylinder(h=40, r=2.5);\n}\n\n// Helper module for rounded cubes\nmodule rounded_cube(size, radius) {\n    x = size[0]; y = size[1]; z = size[2];\n    \n    hull() {\n        for (dx = [radius, x - radius])\n            for (dy = [radius, y - radius])\n                for (dz = [radius, z - radius])\n                    translate([dx, dy, dz])\n                        sphere(r=radius);\n    }\n}\n\n// Render the complete chair\nchair();",
    "renders": true
  },
  {
    "sports_equipment": "figurine",
    "openscad_code": "// Figurine Chair – a miniature, 3D-printable desk chair in realistic style\n// Overall footprint ≈ 50 mm wide × 50 mm deep × 110 mm tall\n// All walls ≥ 2 mm for reliable FDM printing\n\nchair_scale = 1;      // global resize knob (1 = real size listed above)\n\nmodule leg_profile() {             // simple turned-wood leg cross-section\n    difference() {\n        cylinder(h = 1, d = 8, $fn = 20);\n        translate([0, 0, -0.1])\n            cylinder(h = 1.2, d = 4, $fn = 20);   // hollow core saves material\n    }\n}\n\nmodule single_leg(len) {\n    linear_extrude(height = len, scale = [1, 1], $fn = 20)\n        projection() leg_profile();\n}\n\nmodule five_star_base() {\n    // Central hub\n    hub_h = 10;\n    hub_r = 12;\n    cylinder(h = hub_h, r = hub_r, $fn = 30);\n\n    // Five identical spokes\n    spoke_l = 45;\n    spoke_w = 10;\n    spoke_h = hub_h;\n    for (a = [0:72:359]) {\n        rotate([0, 0, a])\n            translate([hub_r - 1, -spoke_w/2, 0])\n                cube([spoke_l, spoke_w, spoke_h]);\n    }\n\n    // Caster wheels (simplified spheres)\n    caster_r = 6;\n    for (a = [0:72:359]) {\n        rotate([0, 0, a])\n            translate([hub_r + spoke_l - caster_r - 2, 0, -caster_r + 1])\n                sphere(r = caster_r, $fn = 20);\n    }\n}\n\nmodule seat_shell() {\n    // Basic cushion shape\n    seat_w = 50;\n    seat_d = 50;\n    seat_h = 8;\n    cushion_top = 6;\n    translate([-seat_w/2, -seat_d/2, 0])\n    minkowski() {\n        cube([seat_w, seat_d, seat_h - cushion_top]);\n        cylinder(h = 0.1, r = cushion_top, $fn = 30); // rounded top edges\n    }\n\n    // Bottom recess for gas cylinder\n    translate([0, 0, -1])\n        cylinder(h = 10, d1 = 20, d2 = 28, $fn = 30);\n}\n\nmodule backrest() {\n    back_w = 46;\n    back_h = 60;\n    back_t = 6;\n    // Slight curvature\n    translate([-back_w/2, -back_t/2, 0])\n        linear_extrude(height = back_h, scale = [1, 1], $fn = 30)\n            offset(r = 3)\n                square([back_w, back_t], center = true);\n\n    // Lumbar support bump\n    lumbar_h = 20;\n    lumbar_d = 10;\n    translate([0, lumbar_d/2 + back_t/2, 15])\n        scale([1, 0.5, 1])\n            sphere(d = lumbar_h, $fn = 30);\n}\n\nmodule armrest() {\n    arm_l = 30;\n    arm_w = 6;\n    arm_h = 20;\n    // Main bar\n    translate([-arm_w/2, 0, 0])\n        cube([arm_w, arm_l, arm_h]);\n\n    // Support post\n    translate([-arm_w/2 - 2, arm_l - 6, -15])\n        cube([arm_w + 4, 6, 15]);\n}\n\nmodule gas_spring() {\n    outer = 12;\n    inner = 8;\n    len = 40;\n    difference() {\n        cylinder(h = len, d = outer, $fn = 20);\n        cylinder(h = len + 0.2, d = inner, $fn = 20);\n    }\n}\n\nmodule chair_assembly() {\n    // Base\n    color(\"silver\")\n        five_star_base();\n\n    // Gas spring\n    color(\"silver\")\n        translate([0, 0, 10])\n            gas_spring();\n\n    // Seat\n    color(\"darkblue\")\n        translate([0, 0, 10 + 40])\n            seat_shell();\n\n    // Backrest upright\n    color(\"darkblue\")\n        translate([0, -25, 10 + 40 + 8])\n            rotate([15, 0, 0])\n                backrest();\n\n    // Armrests\n    color(\"silver\")\n    {\n        translate([25, 0, 10 + 40 + 8])\n            armrest();\n        mirror([1, 0, 0])\n            translate([25, 0, 10 + 40 + 8])\n                armrest();\n    }\n}\n\n// Render\nscale(chair_scale) chair_assembly();",
    "renders": true
  },
  {
    "sports_equipment": "mannequin",
    "openscad_code": "// Realistic Mannequin Furniture - Medium Complexity\n// Dimensions: ~100mm height\n\n// Wall thickness constant\nwall = 2;\n\n// Base plate\nmodule base() {\n    difference() {\n        // Main base\n        cube([40, 40, 4], center=true);\n        // Hollow center\n        translate([0, 0, -1])\n            cube([36, 36, 6], center=true);\n    }\n}\n\n// Torso structure with realistic proportions\nmodule torso() {\n    union() {\n        // Main torso body\n        difference() {\n            // Outer torso\n            translate([0, 0, 2])\n                scale([1, 0.6, 1.2])\n                sphere(d=30);\n            // Hollow inside\n            translate([0, 0, 1.5])\n                scale([0.85, 0.45, 1.05])\n                sphere(d=30);\n        }\n        \n        // Neck base\n        translate([0, 0, 20])\n            cylinder(h=8, d1=12, d2=10);\n    }\n}\n\n// Head with neck connection\nmodule head() {\n    difference() {\n        // Main head sphere\n        translate([0, 0, 30])\n            sphere(d=20);\n        // Hollow inside\n        translate([0, 0, 29])\n            sphere(d=16);\n    }\n}\n\n// Arm module with shoulder joint\nmodule arm(side) {\n    // Shoulder joint\n    translate([side * 15, 0, 18])\n        rotate([0, 0, side * 20])\n        union() {\n            // Upper arm\n            cylinder(h=15, d=8);\n            // Elbow joint\n            translate([0, 0, 15])\n                rotate([0, side * 30, 0])\n                cylinder(h=12, d=7);\n            // Forearm\n            translate([0, 0, 27])\n                rotate([0, side * 20, 0])\n                cylinder(h=10, d=6);\n            \n            // Hand - simplified\n            translate([0, 0, 37])\n                sphere(d=6);\n        }\n    \n    // Hollow arms\n    translate([side * 15, 0, 18])\n        rotate([0, 0, side * 20])\n        union() {\n            cylinder(h=15, d=4);\n            translate([0, 0, 15])\n                rotate([0, side * 30, 0])\n                cylinder(h=12, d=3);\n            translate([0, 0, 27])\n                rotate([0, side * 20, 0])\n                cylinder(h=10, d=2);\n        }\n}\n\n// Leg module with hip joint\nmodule leg(side) {\n    // Hip joint\n    translate([side * 8, 0, 0])\n        rotate([0, side * 10, 0])\n        union() {\n            // Upper leg\n            cylinder(h=20, d=10);\n            // Knee joint\n            translate([0, 0, 20])\n                rotate([0, side * 15, 0])\n                cylinder(h=18, d=8);\n            // Lower leg\n            translate([0, 0, 38])\n                rotate([0, side * 10, 0])\n                cylinder(h=15, d=7);\n            // Foot base\n            translate([0, 0, 53])\n                cube([12, 20, 4], center=true);\n        }\n    \n    // Hollow legs\n    translate([side * 8, 0, 0])\n        rotate([0, side * 10, 0])\n        union() {\n            cylinder(h=20, d=6);\n            translate([0, 0, 20])\n                rotate([0, side * 15, 0])\n                cylinder(h=18, d=4);\n            translate([0, 0, 38])\n                rotate([0, side * 10, 0])\n                cylinder(h=15, d=3);\n        }\n}\n\n// Assembly\nunion() {\n    base();\n    torso();\n    head();\n    \n    // Arms\n    arm(1);  // Right arm\n    arm(-1); // Left arm\n    \n    // Legs\n    leg(1);  // Right leg\n    leg(-1); // Left leg\n}",
    "renders": true
  },
  {
    "sports_equipment": "puppet",
    "openscad_code": "// Puppet Armchair – medium-complexity, realistic style, 3D-printable\n// Overall size ≈ 85 mm tall, 55 mm deep, 60 mm wide\n\n// Wall thickness used everywhere = 2 mm\n$fn = 36;\n\nmodule leg(x, z) {\n    translate([x, 0, z])\n    difference() {\n        cylinder(h = 20, r = 4);              // outer\n        cylinder(h = 22, r = 2);              // hollow core\n    }\n}\n\nmodule back_leg(x, z) {\n    translate([x, 0, z])\n    rotate([15, 0, 0])\n    difference() {\n        cylinder(h = 22, r = 4);              // rear legs lean back\n        cylinder(h = 24, r = 2);\n    }\n}\n\nmodule stretcher(x1, x2, z) {\n    translate([(x1+x2)/2, 0, z])\n    rotate([0, 0, 90])\n    difference() {\n        cube([(x2-x1), 4, 4], center = true);\n        cube([(x2-x1)+2, 2, 2], center = true);\n    }\n}\n\nmodule slat(y) {\n    translate([0, y, 0])\n    cube([60, 4, 2], center = true);\n}\n\ndifference() {\n    // Seat frame\n    union() {\n        // Front rail\n        translate([0, 25, 10])\n        difference() {\n            cube([64, 4, 8], center = true);\n            cube([66, 2, 6], center = true);\n        }\n        // Rear rail\n        translate([0, -25, 10])\n        difference() {\n            cube([64, 4, 8], center = true);\n            cube([66, 2, 6], center = true);\n        }\n        // Side rails\n        translate([30, 0, 10])\n        rotate([0, 0, 90])\n        difference() {\n            cube([50, 4, 8], center = true);\n            cube([52, 2, 6], center = true);\n        }\n        mirror([1, 0, 0]) translate([30, 0, 10])\n        rotate([0, 0, 90])\n        difference() {\n            cube([50, 4, 8], center = true);\n            cube([52, 2, 6], center = true);\n        }\n    }\n    // Leg sockets\n    for (x = [-27, 27]) {\n        translate([x, 25, 0]) cylinder(h = 15, r = 2);\n        translate([x, -25, 0]) cylinder(h = 15, r = 2);\n    }\n}\n\n// Legs\nleg(-27, 0);\nleg(27, 0);\nback_leg(-27, 0);\nback_leg(27, 0);\n\n// Front & side stretchers\nstretcher(-27, 27, 8);\nstretcher(-27, 27, 8); mirror([1, 0, 0]) stretcher(-25, 25, 8);\n\n// Seat slats\nfor (y = [20:-10:-20]) slat(y);\n\n// Back-rest frame\ndifference() {\n    union() {\n        translate([0, -25, 30])\n        difference() {\n            cube([60, 4, 40], center = true);\n            cube([64, 2, 36], center = true);\n        }\n        translate([30, -25, 30])\n        rotate([0, 0, 90])\n        difference() {\n            cube([40, 4, 40], center = true);\n            cube([36, 2, 36], center = true);\n        }\n        mirror([1, 0, 0]) translate([30, -25, 30])\n        rotate([0, 0, 90])\n        difference() {\n            cube([40, 4, 40], center = true);\n            cube([36, 2, 36], center = true);\n        }\n    }\n    // Back spindles holes\n    for (x = [-20:10:20]) {\n        translate([x, -25, 30])\n        cylinder(h = 45, r = 1.5);\n    }\n}\n\n// Back spindles\nfor (x = [-20:10:20]) {\n    translate([x, -25, 30])\n    cylinder(h = 40, r = 1.5);\n}\n\n// Armrests\ntranslate([35, 0, 35])\nrotate([0, 30, 0])\ndifference() {\n    cube([4, 50, 4], center = true);\n    cube([2, 52, 2], center = true);\n}\nmirror([1, 0, 0])\ntranslate([35, 0, 35])\nrotate([0, 30, 0])\ndifference() {\n    cube([4, 50, 4], center = true);\n    cube([2, 52, 2], center = true);\n}",
    "renders": true
  },
  {
    "sports_equipment": "cyborg",
    "openscad_code": "// Cyborg Chair - Realistic Style, Medium Complexity\n// Dimensions: 100mm tall, 80mm wide, 90mm deep\n\n// Parameters\nleg_height = 40;\nseat_height = 45;\nback_height = 55;\nseat_width = 80;\nseat_depth = 90;\nwall_thickness = 2;\n\n// Main module\nmodule cyborg_chair() {\n    // Seat base with cyborg enhancements\n    difference() {\n        // Main seat\n        union() {\n            // Seat platform\n            translate([0, 0, seat_height]) \n                cube([seat_width, seat_depth, wall_thickness], center=true);\n            \n            // Metal frame edges\n            for(x = [-seat_width/2 + wall_thickness, seat_width/2 - wall_thickness]) {\n                for(y = [-seat_depth/2 + wall_thickness, seat_depth/2 - wall_thickness]) {\n                    translate([x, y, seat_height + wall_thickness/2])\n                        cylinder(h=wall_thickness, r=wall_thickness*2, $fn=8);\n                }\n            }\n        }\n        \n        // Ventilation holes\n        for(x = [-seat_width/3, 0, seat_width/3]) {\n            for(y = [-seat_depth/3, 0, seat_depth/3]) {\n                translate([x, y, seat_height + wall_thickness/2])\n                    cylinder(h=wall_thickness+1, r=3, $fn=16);\n            }\n        }\n    }\n    \n    // Backrest with cybernetic spine\n    union() {\n        // Main back panel\n        translate([0, -seat_depth/2 + wall_thickness, seat_height + back_height/2])\n            cube([seat_width - 20, wall_thickness, back_height], center=true);\n        \n        // Spine rods\n        for(i = [0:3]) {\n            translate([0, -seat_depth/2 + wall_thickness/2, \n                      seat_height + 5 + i * 15])\n                rotate([90, 0, 0])\n                    cylinder(h=seat_width - 20, r=wall_thickness, $fn=8);\n        }\n        \n        // Head rest\n        translate([0, -seat_depth/2 + wall_thickness, seat_height + back_height + 5])\n            cube([seat_width/2, wall_thickness*3, 10], center=true);\n    }\n    \n    // Legs with hydraulic details\n    module leg(x_pos, y_pos) {\n        union() {\n            // Main leg post\n            translate([x_pos, y_pos, leg_height/2])\n                cylinder(h=leg_height, r=wall_thickness*3, $fn=12);\n            \n            // Hydraulic cylinder\n            translate([x_pos, y_pos, leg_height/4])\n                cylinder(h=leg_height/2, r=wall_thickness*2, $fn=12);\n            \n            // Base foot\n            translate([x_pos, y_pos, wall_thickness])\n                cube([wall_thickness*6, wall_thickness*6, wall_thickness*2], center=true);\n        }\n    }\n    \n    // Position legs\n    leg_pos = seat_width/2 - 15;\n    leg(-leg_pos, leg_pos);\n    leg(leg_pos, leg_pos);\n    leg(-leg_pos, -leg_pos);\n    leg(leg_pos, -leg_pos);\n    \n    // Armrest with tech panels\n    module armrest(x_pos) {\n        union() {\n            // Main arm\n            translate([x_pos, 0, seat_height + 10])\n                cube([wall_thickness*3, seat_depth - 20, 20], center=true);\n            \n            // Control panel\n            translate([x_pos, seat_depth/4, seat_height + 15])\n                cube([wall_thickness*5, wall_thickness*5, wall_thickness], center=true);\n            \n            // Indicator lights\n            for(i = [-1, 1]) {\n                translate([x_pos, seat_depth/4 + i*3, seat_height + 15 + wall_thickness])\n                    sphere(r=1, $fn=8);\n            }\n        }\n    }\n    \n    armrest(-seat_width/2);\n    armrest(seat_width/2);\n}\n\n// Render the chair\ncyborg_chair();",
    "renders": true
  },
  {
    "sports_equipment": "android",
    "openscad_code": "// Android Lounge Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm (w) x 110mm (d) x 80mm (h)\n\n// Main seat shell\nmodule seat_shell() {\n    difference() {\n        // Main curved shell\n        translate([0, 0, 40]) {\n            scale([1, 1.1, 0.5]) {\n                sphere(d = 100, $fn = 64);\n            }\n        }\n        \n        // Cut bottom flat\n        translate([0, 0, -10]) cube([120, 120, 50], center = true);\n        \n        // Cut back opening\n        translate([0, 30, 40]) cube([80, 60, 50], center = true);\n        \n        // Cut seat opening\n        translate([0, -20, 15]) cube([70, 60, 30], center = true);\n    }\n}\n\n// Android headrest\nmodule android_head() {\n    // Main head sphere\n    translate([0, 40, 70]) sphere(d = 30, $fn = 32);\n    \n    // Antenna\n    translate([0, 40, 87]) cylinder(h = 8, d = 3, $fn = 16);\n    \n    // Eyes\n    for (x = [-8, 8]) {\n        translate([x, 40, 75]) {\n            rotate([0, 90, 0]) cylinder(h = 2, d1 = 5, d2 = 8, $fn = 16);\n        }\n    }\n}\n\n// Structural frame with android styling\nmodule frame() {\n    // Front legs\n    for (x = [-40, 40]) {\n        translate([x, -45, 15]) {\n            difference() {\n                // Main leg\n                cylinder(h = 45, d = 12, $fn = 16);\n                \n                // Groove details\n                for (h = [10, 25, 40]) {\n                    translate([0, 0, h]) cylinder(h = 2, d = 10, $fn = 16);\n                }\n            }\n        }\n    }\n    \n    // Rear legs\n    for (x = [-35, 35]) {\n        translate([x, 45, 15]) {\n            rotate([5, 0, 0]) {\n                cylinder(h = 50, d = 10, $fn = 16);\n            }\n        }\n    }\n    \n    // Cross support bars\n    translate([0, 0, 15]) {\n        // Front-back\n        rotate([90, 0, 0]) {\n            cylinder(h = 90, d = 6, $fn = 16);\n        }\n        // Side-side\n        rotate([0, 90, 0]) {\n            cylinder(h = 80, d = 6, $fn = 16);\n        }\n    }\n}\n\n// Armrests with android styling\nmodule armrests() {\n    for (side = [-1, 1]) {\n        translate([side * 50, 0, 45]) {\n            difference() {\n                // Curved armrest\n                rotate([0, side * 15, 0]) {\n                    hull() {\n                        translate([0, -20, 0]) sphere(d = 10);\n                        translate([0, 20, 0]) sphere(d = 10);\n                    }\n                }\n                \n                // Cut support hole\n                translate([0, 0, -5]) cylinder(h = 20, d = 6, $fn = 16);\n            }\n            \n            // Support post\n            translate([0, 0, 15]) cylinder(h = 25, d = 8, $fn = 16);\n        }\n    }\n}\n\n// Cushion details\nmodule cushions() {\n    // Seat cushion\n    translate([0, -15, 28]) {\n        difference() {\n            scale([1.1, 1, 0.3]) sphere(d = 60, $fn = 32);\n            translate([0, 0, -5]) cube([60, 60, 10], center = true);\n        }\n    }\n    \n    // Back cushion\n    translate([0, 25, 45]) {\n        rotate([20, 0, 0]) {\n            difference() {\n                scale([0.9, 1, 0.4]) sphere(d = 60, $fn = 32);\n                translate([0, 0, -5]) cube([60, 60, 10], center = true);\n            }\n        }\n    }\n    \n    // Cushion texture\n    for (i = [0:3]) {\n        for (j = [0:2]) {\n            translate([-25 + i * 15, -25 + j * 20, 30]) {\n                cylinder(h = 1, d = 3, $fn = 16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    frame();\n    seat_shell();\n    android_head();\n    armrests();\n    cushions();\n}",
    "renders": true
  },
  {
    "sports_equipment": "automaton",
    "openscad_code": "// Automaton Table in Realistic Style\n// A 3D printable table with mechanical automaton features\n\n// Table parameters\ntable_height = 80;\ntable_top = 120;\ntable_depth = 70;\nwall_thickness = 2;\nleg_size = 8;\n\n// Main table module\nmodule automaton_table() {\n    // Table top with gear recess\n    difference() {\n        // Main tabletop\n        cube([table_top, table_depth, wall_thickness], center=true);\n        \n        // Central gear cavity\n        translate([0, 0, -wall_thickness/2])\n            cylinder(h=wall_thickness+1, r=25, $fn=32);\n    }\n    \n    // Front decorative gear\n    translate([0, table_depth/2 + 5, -2])\n        rotate([90, 0, 0])\n            gear(20, 3, 2);\n    \n    // Rear decorative gear\n    translate([0, -table_depth/2 - 5, -2])\n        rotate([-90, 0, 0])\n            gear(20, 3, 2);\n    \n    // Table legs with automaton styling\n    for(pos = [[-table_top/2 + leg_size/2, -table_depth/2 + leg_size/2], \n               [table_top/2 - leg_size/2, -table_depth/2 + leg_size/2],\n               [-table_top/2 + leg_size/2, table_depth/2 - leg_size/2],\n               [table_top/2 - leg_size/2, table_depth/2 - leg_size/2]]) {\n        \n        // Leg with piston detail\n        translate([pos[0], pos[1], -table_height/2])\n            leg_with_piston();\n    }\n    \n    // Side support beams with rivets\n    for(y = [-table_depth/2 + 10, table_depth/2 - 10]) {\n        translate([0, y, -table_height/2 + 20])\n            support_beam();\n    }\n    \n    // Front control panel\n    translate([-table_top/2 - 5, 0, -table_height/2 + 15])\n        control_panel();\n    \n    // Mechanical joints at corners\n    for(x = [-table_top/2 + 15, table_top/2 - 15]) {\n        for(y = [-table_depth/2 + 15, table_depth/2 - 15]) {\n            translate([x, y, -5])\n                mechanical_joint();\n        }\n    }\n}\n\n// Gear module\nmodule gear(teeth, height, thickness) {\n    union() {\n        // Main gear body\n        cylinder(h=height, r=teeth, $fn=32);\n        \n        // Teeth\n        for(i = [0:teeth-1]) {\n            rotate([0, 0, i * 360/teeth])\n                translate([teeth - 1, 0, 0])\n                    cube([2, 2, height], center=true);\n        }\n        \n        // Center hole\n        difference() {\n            cylinder(h=height, r=teeth, $fn=32);\n            cylinder(h=height+1, r=thickness, $fn=32);\n        }\n    }\n}\n\n// Leg with piston detail\nmodule leg_with_piston() {\n    union() {\n        // Main leg\n        cube([leg_size, leg_size, table_height - wall_thickness], center=true);\n        \n        // Piston cylinder\n        translate([0, leg_size, 0])\n            rotate([90, 0, 0])\n                cylinder(h=15, r=3, $fn=16);\n        \n        // Piston rod\n        translate([0, leg_size + 15, 0])\n            cylinder(h=5, r=1.5, $fn=8);\n    }\n}\n\n// Support beam with rivets\nmodule support_beam() {\n    union() {\n        // Main beam\n        cube([table_top - 30, 4, 6], center=true);\n        \n        // Rivets along beam\n        for(x = [-table_top/2 + 20 : 15 : table_top/2 - 20]) {\n            translate([x, 0, 3])\n                cylinder(h=2, r=1.5, $fn=8);\n        }\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    union() {\n        // Panel body\n        cube([6, 20, 15], center=true);\n        \n        // Control knobs\n        for(y = [-5, 0, 5]) {\n            translate([3.5, y, 0])\n                cylinder(h=3, r=2, $fn=16);\n        }\n        \n        // Display screen\n        translate([3.5, 0, 5])\n            cube([1, 8, 5], center=true);\n    }\n}\n\n// Mechanical joint\nmodule mechanical_joint() {\n    difference() {\n        // Joint housing\n        sphere(d=10, $fn=20);\n        \n        // Center hole\n        cylinder(h=12, r=2, $fn=16);\n    }\n}\n\n// Render the table\nautomaton_table();",
    "renders": true
  },
  {
    "sports_equipment": "mech",
    "openscad_code": "// Mech Chair - Realistic Style, Medium Complexity\n// Dimensions: 100mm width x 100mm depth x 120mm height\n\n// Parameters\nchair_width = 100;\nchair_depth = 100;\nchair_height = 120;\nseat_height = 55;\nback_height = 65;\nleg_thickness = 6;\nwall_thickness = 2;\n\n// Main module\nmodule mech_chair() {\n    // Base frame structure\n    difference() {\n        union() {\n            // Four legs with hydraulic cylinder look\n            for(x = [-1, 1])\n            for(y = [-1, 1]) {\n                translate([x * (chair_width/2 - leg_thickness), \n                          y * (chair_depth/2 - leg_thickness), 0])\n                    leg_assembly(seat_height);\n            }\n            \n            // Seat platform\n            translate([0, 0, seat_height - wall_thickness])\n                seat_platform();\n            \n            // Backrest support\n            translate([0, -chair_depth/4, seat_height])\n                backrest_support();\n            \n            // Backrest panel\n            translate([0, -chair_depth/2 + wall_thickness, \n                      seat_height + back_height/2])\n                backrest_panel();\n        }\n        \n        // Remove interior spaces for 3D printing\n        // Hollow legs\n        for(x = [-1, 1])\n        for(y = [-1, 1]) {\n            translate([x * (chair_width/2 - leg_thickness), \n                      y * (chair_depth/2 - leg_thickness), wall_thickness])\n                cylinder(h = seat_height - 2*wall_thickness, \n                        r = leg_thickness/2 - wall_thickness, $fn=16);\n        }\n        \n        // Hollow seat\n        translate([0, 0, seat_height])\n            cube([chair_width - 2*leg_thickness - 2*wall_thickness,\n                  chair_depth - 2*leg_thickness - 2*wall_thickness,\n                  wall_thickness], center=true);\n    }\n    \n    // Add mechanical details\n    mechanical_details();\n}\n\n// Leg assembly with piston detail\nmodule leg_assembly(height) {\n    union() {\n        // Main cylinder\n        cylinder(h = height, r = leg_thickness/2, $fn=16);\n        \n        // Piston rod detail\n        translate([0, 0, height - 5])\n            cylinder(h = 5, r = leg_thickness/3, $fn=16);\n            \n        // Base foot\n        translate([0, 0, -2])\n            cylinder(h = 4, r1 = leg_thickness/2 + 2, r2 = leg_thickness/2, $fn=16);\n    }\n}\n\n// Seat platform with cushion appearance\nmodule seat_platform() {\n    difference() {\n        // Main seat\n        cube([chair_width - leg_thickness, \n              chair_depth - leg_thickness, \n              wall_thickness*2], center=true);\n        \n        // Cushion indent\n        translate([0, 0, -wall_thickness/2])\n            cube([chair_width - leg_thickness - 10, \n                  chair_depth - leg_thickness - 10, \n                  wall_thickness*2], center=true);\n    }\n}\n\n// Backrest support struts\nmodule backrest_support() {\n    for(x = [-chair_width/3, chair_width/3]) {\n        translate([x, 0, back_height/2])\n            cube([wall_thickness*2, chair_depth/4, back_height], center=true);\n    }\n}\n\n// Backrest panel with lumbar support\nmodule backrest_panel() {\n    difference() {\n        // Main backrest\n        cube([chair_width - leg_thickness, \n              wall_thickness*3, \n              back_height], center=true);\n        \n        // Lumbar curve\n        translate([0, 0, -back_height/3])\n            sphere(r = chair_width/2, $fn=32);\n    }\n}\n\n// Mechanical details - bolts and joints\nmodule mechanical_details() {\n    // Seat bolts\n    for(x = [-chair_width/3, chair_width/3])\n    for(y = [-chair_depth/3, chair_depth/3]) {\n        translate([x, y, seat_height + wall_thickness])\n            bolt_head();\n    }\n    \n    // Backrest adjustment mechanism\n    translate([0, -chair_depth/4 + wall_thickness*2, \n              seat_height + back_height/2])\n        rotate([90, 0, 0])\n            cylinder(h = 15, r = wall_thickness*1.5, $fn=16);\n}\n\n// Bolt head detail\nmodule bolt_head() {\n    difference() {\n        cylinder(h = wall_thickness, r = wall_thickness, $fn=6);\n        cylinder(h = wall_thickness + 0.1, r = wall_thickness/2, $fn=16);\n    }\n}\n\n// Render the chair\nmech_chair();",
    "renders": true
  },
  {
    "sports_equipment": "gynoid",
    "openscad_code": "// Gynoid-inspired ergonomic desk chair\n// Dimensions: 120mm tall, 80mm wide, 80mm deep\n\n// Chair base and structure\nmodule chair_base() {\n    // Central pillar\n    cylinder(h=40, d1=15, d2=20, $fn=32);\n    \n    // 5-star base legs\n    for(i=[0:4]) {\n        rotate([0, 0, i*72]) \n            translate([0, 20, 0])\n                cube([40, 8, 5], center=true);\n    }\n    \n    // Caster wheels\n    for(i=[0:4]) {\n        rotate([0, 0, i*72]) \n            translate([0, 38, -2])\n                sphere(d=6, $fn=16);\n    }\n}\n\n// Seat pan with gynoid curves\nmodule seat_pan() {\n    difference() {\n        // Main seat\n        translate([0, 0, 40])\n            scale([1, 1.2, 0.3])\n                sphere(d=60, $fn=64);\n        \n        // Cutout for legs\n        translate([0, 15, 40])\n            cube([50, 30, 20], center=true);\n        \n        // Ventilation holes\n        for(y=[-15:15:15]) {\n            for(x=[-20:10:20]) {\n                translate([x, y, 50])\n                    cylinder(h=10, d=4, $fn=16);\n            }\n        }\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    // Main backrest shell\n    translate([0, -35, 70])\n        rotate([10, 0, 0])\n            difference() {\n                scale([0.8, 1, 1.2])\n                    sphere(d=50, $fn=64);\n                \n                // Lumbar curve\n                translate([0, -5, -10])\n                    scale([0.7, 0.8, 0.9])\n                        sphere(d=40, $fn=64);\n            }\n    \n    // Back support frame\n    translate([0, -35, 75])\n        rotate([10, 0, 0])\n            for(side=[-1, 1]) {\n                translate([side*20, 0, 0])\n                    cube([4, 30, 50], center=true);\n            }\n}\n\n// Armrests with organic curves\nmodule armrests() {\n    for(side=[-1, 1]) {\n        translate([side*28, 5, 55]) {\n            // Support post\n            cylinder(h=25, d=8, $fn=16);\n            \n            // Arm pad\n            translate([0, 0, 25])\n                rotate([0, side*15, 0])\n                    scale([1, 3, 0.4])\n                        sphere(d=12, $fn=32);\n        }\n    }\n}\n\n// Headrest\nmodule headrest() {\n    translate([0, -45, 105])\n        rotate([20, 0, 0])\n            difference() {\n                scale([0.8, 0.7, 0.5])\n                    sphere(d=30, $fn=32);\n                \n                // Neck cutout\n                translate([0, 5, -5])\n                    cube([20, 15, 10], center=true);\n            }\n}\n\n// Assembly\nchair_base();\nseat_pan();\nbackrest();\narmrests();\nheadrest();",
    "renders": true
  },
  {
    "sports_equipment": "drone",
    "openscad_code": "// Drone Furniture - Quadcopter Shelf Unit\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Overall dimensions\ndrone_width = 120;\ndrone_length = 120;\ndrone_height = 60;\n\n// Wall thickness\nwall = 2;\n\nmodule body_frame() {\n    difference() {\n        // Main body - hollowed cube\n        translate([0, 0, drone_height/2])\n            cube([drone_width, drone_length, drone_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, drone_height/2])\n            cube([drone_width-wall*2, drone_length-wall*2, drone_height-wall], center=true);\n    }\n}\n\nmodule motor_pod(x, y) {\n    // Motor pod cylinder\n    translate([x, y, 0])\n        cylinder(h=15, r=12, center=false);\n    \n    // Motor pod top\n    translate([x, y, 15])\n        cylinder(h=3, r=15, center=false);\n    \n    // Arm structure\n    translate([x*0.4, y*0.4, drone_height/2])\n        rotate([0, 0, atan2(y, x)])\n            cube([abs(x*0.6), 8, 6], center=true);\n}\n\nmodule propeller(x, y) {\n    // Propeller hub\n    translate([x, y, 18])\n        cylinder(h=4, r=8, center=false);\n    \n    // Propeller blades (4 blades)\n    for(i=[0:90:270]) {\n        rotate([0, 0, i])\n            translate([x, y+10, 20])\n                cube([2, 20, 1], center=true);\n    }\n}\n\nmodule landing_gear() {\n    // Landing struts\n    translate([drone_width/2-20, drone_length/2-20, 0])\n        cylinder(h=10, r=2, center=false);\n    translate([-drone_width/2+20, drone_length/2-20, 0])\n        cylinder(h=10, r=2, center=false);\n    translate([drone_width/2-20, -drone_length/2+20, 0])\n        cylinder(h=10, r=2, center=false);\n    translate([-drone_width/2+20, -drone_length/2+20, 0])\n        cylinder(h=10, r=2, center=false);\n    \n    // Cross supports\n    translate([0, drone_length/2-20, 5])\n        cube([drone_width-40, 3, 2], center=true);\n    translate([0, -drone_length/2+20, 5])\n        cube([drone_width-40, 3, 2], center=true);\n}\n\nmodule camera_gimbal() {\n    // Camera housing\n    translate([0, 0, -5])\n        difference() {\n            cube([30, 20, 10], center=true);\n            translate([0, 0, 5])\n                cube([26, 16, 10], center=true);\n        }\n    \n    // Gimbal mount\n    translate([0, 0, drone_height/2])\n        cylinder(h=10, r=5, center=true);\n}\n\nmodule shelf_divider() {\n    // Internal shelf\n    translate([0, 0, drone_height/4])\n        difference() {\n            cube([drone_width-wall*4, drone_length-wall*4, wall], center=true);\n            // Cable management holes\n            for(x=[-30:30:30])\n                for(y=[-30:30:30])\n                    translate([x, y, 0])\n                        cylinder(h=wall+1, r=3, center=true);\n        }\n}\n\n// Main assembly\nunion() {\n    // Body structure\n    body_frame();\n    \n    // Motor pods at corners\n    motor_pod(drone_width/2-15, drone_length/2-15);\n    motor_pod(-drone_width/2+15, drone_length/2-15);\n    motor_pod(drone_width/2-15, -drone_length/2+15);\n    motor_pod(-drone_width/2+15, -drone_length/2+15);\n    \n    // Propellers\n    propeller(drone_width/2-15, drone_length/2-15);\n    propeller(-drone_width/2+15, drone_length/2-15);\n    propeller(drone_width/2-15, -drone_length/2+15);\n    propeller(-drone_width/2+15, -drone_length/2+15);\n    \n    // Landing gear\n    landing_gear();\n    \n    // Camera system\n    camera_gimbal();\n    \n    // Internal shelf for storage\n    shelf_divider();\n    \n    // LED indicators\n    translate([drone_width/2-5, drone_length/2-5, drone_height/2+5])\n        sphere(r=3);\n    translate([-drone_width/2+5, -drone_length/2+5, drone_height/2+5])\n        sphere(r=3);\n}",
    "renders": true
  },
  {
    "sports_equipment": "bot",
    "openscad_code": "// Robot Task Chair - realistic style, medium complexity\n// ~120mm tall, 2mm wall thickness, printable without supports\n\n$fa = 2;\n$fs = 0.5;\n\nmodule chairBot() {\n    // Base structure - 5-star caster base\n    union() {\n        // Central pole\n        cylinder(h=40, r=8, $fn=32);\n        \n        // 5 caster arms\n        for (i=[0:4]) {\n            rotate([0,0,i*72])\n                translate([0,0,2])\n                    union() {\n                        // Arm\n                        translate([0,-3,0])\n                            cube([25,6,4]);\n                        // Caster wheel\n                        translate([25,0,-4])\n                            rotate([90,0,0])\n                                cylinder(h=6, r=4, $fn=16);\n                    }\n        }\n    }\n}\n\nmodule seatAssembly() {\n    // Gas lift cylinder\n    translate([0,0,40])\n        cylinder(h=25, r=4, $fn=20);\n    \n    // Seat plate\n    translate([0,0,65])\n        difference() {\n            cube([60,60,4], center=true);\n            // Lightening holes\n            for (x=[-20,0,20])\n                for (y=[-20,0,20])\n                    translate([x,y,-1])\n                        cylinder(h=6, r=3, $fn=16);\n        }\n    \n    // Seat cushion\n    translate([0,0,69])\n        difference() {\n            // Main cushion\n            cube([55,55,12], center=true);\n            // Rounded edges\n            translate([0,0,6])\n                minkowski() {\n                    cube([51,51,0.1], center=true);\n                    cylinder(h=0.1, r=2);\n                }\n            // Ventilation holes\n            for (i=[0:3])\n                rotate([0,0,i*90])\n                    translate([15,0,6])\n                        rotate([90,0,0])\n                            cylinder(h=30, r=2, $fn=12);\n        }\n}\n\nmodule backrest() {\n    // Back support post\n    translate([0,-27.5,69])\n        cube([8,8,60]);\n    \n    // Back frame\n    translate([0,-27.5,120])\n        difference() {\n            // Outer frame\n            cube([50,6,45], center=true);\n            // Inner cutout\n            cube([44,10,39], center=true);\n        }\n    \n    // Lumbar support mesh pattern\n    translate([0,-24.5,115])\n        for (i=[-20:5:20])\n            for (j=[0:5:40])\n                cube([2,2,2]);\n    \n    // Headrest\n    translate([0,-27.5,145])\n        difference() {\n            // Cushion\n            cube([35,25,12], center=true);\n            // Rounded top\n            translate([0,0,6])\n                rotate([90,0,0])\n                    cylinder(h=35, r=6, center=true, $fn=32);\n        }\n}\n\nmodule armrests() {\n    for (side=[-1,1]) {\n        translate([side*35,0,75]) {\n            union() {\n                // Post\n                cube([4,25,20]);\n                // Arm pad\n                translate([0,10,20])\n                    rotate([-10,0,0])\n                        cube([20,4,30]);\n                // Adjustment lever\n                translate([2,20,10])\n                    rotate([0,0,30])\n                        cube([2,12,4]);\n            }\n        }\n    }\n}\n\nmodule botDetails() {\n    // LED strips in base\n    translate([0,0,3])\n        difference() {\n            cylinder(h=2, r=7.5, $fn=32);\n            cylinder(h=3, r=6.5, $fn=32);\n        }\n    \n    // Control panel on armrest\n    translate([35,10,95])\n        cube([8,15,3]);\n    \n    // Cable management\n    translate([0,-20,85])\n        rotate([90,0,0])\n            cylinder(h=30, r=2, $fn=12);\n}\n\n// Main assembly\nunion() {\n    chairBot();\n    seatAssembly();\n    backrest();\n    armrests();\n    botDetails();\n}",
    "renders": true
  },
  {
    "sports_equipment": "toy",
    "openscad_code": "// Toy Rocking Chair - Realistic Style, Medium Complexity\n// Approximate size: 100mm W x 70mm D x 85mm H\n// Designed for 3D printing with 2mm wall thickness\n\n// Main parameters\nseat_width = 60;\nseat_depth = 45;\nseat_thickness = 4;\nback_height = 40;\nleg_height = 35;\nrocker_radius = 85;\nrocker_thickness = 8;\n\n// Slat dimensions\nslat_width = 50;\nslat_thickness = 3;\nslat_spacing = 8;\nnum_slats = 5;\n\n// Armrest dimensions\narmrest_height = 20;\narmrest_width = 8;\narmrest_length = 35;\n\n// Create the complete rocking chair\nunion() {\n    // Rockers (curved base)\n    translate([-seat_width/2 - 5, -leg_height + 5, 0])\n        rocker();\n    \n    // Seat assembly\n    translate([0, 0, leg_height])\n        seat_assembly();\n    \n    // Backrest assembly\n    translate([0, -seat_depth/2 + 5, leg_height + seat_thickness])\n        backrest_assembly();\n    \n    // Armrests\n    translate([-seat_width/2 - armrest_width/2, 0, leg_height + seat_thickness - 5])\n        armrest();\n    mirror([1, 0, 0])\n        translate([-seat_width/2 - armrest_width/2, 0, leg_height + seat_thickness - 5])\n            armrest();\n}\n\n// Module for curved rocker base\nmodule rocker() {\n    difference() {\n        // Main rocker shape\n        union() {\n            // Left rocker\n            translate([0, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=rocker_thickness, r=rocker_radius, $fn=50);\n            \n            // Right rocker\n            translate([seat_width + 10, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=rocker_thickness, r=rocker_radius, $fn=50);\n            \n            // Connecting support\n            translate([0, 0, -rocker_thickness/2])\n                cube([seat_width + 10, rocker_thickness*2, rocker_thickness]);\n            translate([0, 0, rocker_thickness/2])\n                cube([seat_width + 10, rocker_thickness*2, rocker_thickness]);\n        }\n        \n        // Hollow out the rockers\n        translate([0, 0, -1])\n            rotate([90, 0, 0])\n                cylinder(h=rocker_thickness+2, r=rocker_radius-2, $fn=50);\n        translate([seat_width + 10, 0, -1])\n            rotate([90, 0, 0])\n                cylinder(h=rocker_thickness+2, r=rocker_radius-2, $fn=50);\n    }\n}\n\n// Module for seat assembly\nmodule seat_assembly() {\n    // Seat base\n    difference() {\n        cube([seat_width, seat_depth, seat_thickness], center=true);\n        // Hollow out seat\n        translate([0, 0, -1])\n            cube([seat_width-4, seat_depth-4, seat_thickness+2], center=true);\n    }\n    \n    // Seat support beams\n    for(i = [-1, 1]) {\n        translate([i * (seat_width/2 - 8), 0, -leg_height/2])\n            cube([4, seat_depth - 10, leg_height]);\n    }\n}\n\n// Module for backrest slats\nmodule backrest_assembly() {\n    // Backrest frame\n    difference() {\n        cube([seat_width + 6, seat_thickness, back_height], center=true);\n        // Hollow frame\n        translate([0, 0, -1])\n            cube([seat_width + 2, seat_thickness + 2, back_height - 4], center=true);\n    }\n    \n    // Vertical slats\n    for(i = [0:num_slats-1]) {\n        translate([-seat_width/2 + 5 + i * slat_spacing, 0, back_height/2 - 5 - i * 7])\n            cube([slat_thickness, seat_thickness - 1, 25]);\n    }\n    \n    // Top rail\n    translate([0, 0, back_height/2 - 2])\n        cube([seat_width + 6, seat_thickness, 4], center=true);\n}\n\n// Module for armrest\nmodule armrest() {\n    union() {\n        // Vertical support\n        translate([0, armrest_length/2 - 10, armrest_height/2])\n            difference() {\n                cube([armrest_width, armrest_width, armrest_height]);\n                translate([2, 2, 2])\n                    cube([armrest_width-4, armrest_width-4, armrest_height-4]);\n            }\n        \n        // Horizontal armrest\n        translate([0, armrest_length/2, armrest_height - 5])\n            difference() {\n                cube([armrest_width, armrest_length, armrest_width]);\n                translate([2, 2, 2])\n                    cube([armrest_width-4, armrest_length-4, armrest_width-4]);\n            }\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "plushie",
    "openscad_code": "// Plushie Armchair (realistic style, medium complexity)\n// Overall size: ~90mm wide x 85mm deep x 80mm tall\n\n$fn = 36;\n\n// Main parameters\nseat_width = 70;\nseat_depth = 65;\nseat_height = 35;\nback_height = 45;\narmrest_height = 55;\nleg_height = 15;\nwall_thickness = 2;\n\n// Puffy effect scale\npuff_factor = 1.08;\n\nmodule plush_cube(w, d, h, corner_r = 5) {\n    // Create puffy cube with rounded corners\n    hull() {\n        for (x = [-1, 1])\n            for (y = [-1, 1])\n                for (z = [-1, 1])\n                    translate([x * (w/2 - corner_r), \n                              y * (d/2 - corner_r), \n                              z * (h/2 - corner_r)])\n                        sphere(r = corner_r * puff_factor);\n    }\n}\n\nmodule seat_cushion() {\n    difference() {\n        plush_cube(seat_width, seat_depth, seat_height);\n        translate([0, 0, -1])\n            plush_cube(seat_width - wall_thickness*2, \n                      seat_depth - wall_thickness*2, \n                      seat_height + 2);\n    }\n}\n\nmodule back_cushion() {\n    difference() {\n        plush_cube(seat_width, seat_depth * 0.8, back_height);\n        translate([0, 0, -1])\n            plush_cube(seat_width - wall_thickness*2, \n                      seat_depth * 0.8 - wall_thickness*2, \n                      back_height + 2);\n    }\n}\n\nmodule armrest(side) {\n    // Armrest with puffy top\n    translate([side * (seat_width/2 - 10), 0, 0])\n        rotate([0, 0, side * 5])\n        plush_cube(20, seat_depth * 0.7, armrest_height);\n}\n\nmodule leg(x_pos, y_pos) {\n    // Simple cylindrical legs\n    translate([x_pos, y_pos, -leg_height/2])\n        cylinder(h = leg_height, r = 4);\n}\n\nmodule tufting_details() {\n    // Buttons for realistic plush look\n    button_height = 2;\n    for (x = [-20, 0, 20])\n        for (y = [-15, 0, 15]) {\n            translate([x, y, seat_height/2 + button_height/2])\n                cylinder(h = button_height, r = 3);\n        }\n}\n\nmodule back_tufting() {\n    // Vertical seam lines on back\n    for (x = [-25, 0, 25]) {\n        translate([x, 0, back_height/2])\n            cube([2, seat_depth * 0.8, back_height], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0, 0, leg_height + seat_height/2])\n        seat_cushion();\n    \n    // Back\n    translate([0, -seat_depth * 0.1, leg_height + seat_height + back_height/2 - 5])\n        rotate([5, 0, 0])\n        back_cushion();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Legs\n    for (x = [seat_width/2 - 10, -(seat_width/2 - 10)])\n        for (y = [seat_depth/2 - 10, -(seat_depth/2 - 10)])\n            leg(x, y);\n    \n    // Tufting details\n    translate([0, 0, leg_height])\n        tufting_details();\n    \n    translate([0, -seat_depth * 0.1, leg_height + seat_height + back_height/2 - 5])\n        back_tufting();\n}",
    "renders": true
  },
  {
    "sports_equipment": "bear",
    "openscad_code": "// Bear Chair - A realistic-style bear-shaped children's chair\n// Dimensions: ~100mm tall, ~80mm wide, ~90mm deep\n// Wall thickness: 2mm for 3D printability\n\n$fn = 50; // Smooth curves for realistic appearance\n\n// Main module\nmodule bear_chair() {\n    // Bear body serves as seat and backrest\n    bear_body();\n    \n    // Chair legs\n    chair_legs();\n    \n    // Armrests as bear arms\n    bear_arms();\n    \n    // Head as backrest decoration\n    bear_head();\n}\n\n// Bear body (seat and backrest)\nmodule bear_body() {\n    // Seat platform\n    difference() {\n        // Main seat block\n        translate([0, -10, 40])\n            cube([70, 60, 20], center=true);\n        \n        // Hollow seat for weight reduction\n        translate([0, -10, 42])\n            cube([66, 56, 16], center=true);\n    }\n    \n    // Backrest (bear's body)\n    difference() {\n        // Main backrest\n        translate([0, 30, 75])\n            scale([1.2, 1, 1.5])\n            sphere(30);\n        \n        // Hollow backrest\n        translate([0, 30, 75])\n            scale([1.15, 0.95, 1.45])\n            sphere(28);\n    }\n    \n    // Seat cushion detail\n    translate([0, -10, 52])\n        cube([65, 55, 2], center=true);\n}\n\n// Chair legs\nmodule chair_legs() {\n    // Front legs (bear legs)\n    for(x = [-25, 25]) {\n        // Main leg\n        translate([x, -20, 20])\n            cylinder(h=40, r=8);\n        \n        // Foot detail\n        translate([x, -20, 0])\n            sphere(10);\n    }\n    \n    // Back legs (chair supports)\n    for(x = [-25, 25]) {\n        // Main support\n        translate([x, 20, 20])\n            cylinder(h=40, r=8);\n        \n        // Foot pad\n        translate([x, 20, 0])\n            cube([16, 16, 4], center=true);\n    }\n}\n\n// Bear arms as armrests\nmodule bear_arms() {\n    for(side = [-1, 1]) {\n        // Arm structure\n        translate([side * 40, 0, 50])\n            rotate([0, -20 * side, 0])\n            union() {\n                // Upper arm\n                cylinder(h=30, r=6);\n                \n                // Forearm\n                translate([0, 0, -30])\n                    rotate([0, -30, 0])\n                    cylinder(h=25, r=5);\n                \n                // Paw/hand rest\n                translate([0, 0, -55])\n                    sphere(8);\n            }\n    }\n}\n\n// Bear head as backrest decoration\nmodule bear_head() {\n    // Main head\n    difference() {\n        translate([0, 30, 100])\n            sphere(25);\n        \n        // Hollow head\n        translate([0, 30, 100])\n            sphere(22);\n    }\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([side * 15, 30, 115])\n            sphere(8);\n    }\n    \n    // Snout\n    translate([0, 40, 95])\n        scale([1, 1.5, 1])\n        sphere(10);\n    \n    // Nose\n    translate([0, 45, 95])\n        sphere(3);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([side * 10, 25, 105])\n            sphere(3);\n    }\n}\n\n// Create the bear chair\nbear_chair();",
    "renders": true
  },
  {
    "sports_equipment": "bunny",
    "openscad_code": "// Bunny Furniture - Bunny Chair\n// A realistic-style chair shaped like a bunny for children\n// Approximate size: 120mm width x 150mm depth x 200mm height\n\n// Main parameters\nwall_thickness = 2;\nchair_width = 120;\nchair_depth = 150;\nchair_height = 200;\nseat_height = 100;\n\n// Module for rounded edges using hull technique\nmodule rounded_cube(size, radius) {\n    translate([radius, radius, 0])\n    minkowski() {\n        cube([size.x - 2*radius, size.y - 2*radius, size.z]);\n        cylinder(r=radius, h=0.01);\n    }\n}\n\n// Bunny ear module\nmodule bunny_ear(height, width, thickness) {\n    difference() {\n        union() {\n            // Main ear shape\n            translate([0, 0, height/2])\n                scale([1, 0.8, 1])\n                sphere(d=width);\n            \n            // Ear base\n            cylinder(h=height/3, d=width);\n            \n            // Inner ear detail\n            translate([0, thickness/2, height/2])\n                scale([0.7, 0.5, 0.9])\n                sphere(d=width - 4);\n        }\n        \n        // Create ear hole\n        translate([0, -thickness/2 - 1, height/2])\n            scale([0.5, 0.1, 0.8])\n            sphere(d=width - 4);\n    }\n}\n\n// Chair seat module\nmodule chair_seat() {\n    difference() {\n        // Main seat\n        translate([0, 0, seat_height/2])\n            rounded_cube([chair_width, chair_depth, wall_thickness*2], 10);\n        \n        // Seat hole for bunny tail\n        translate([0, -chair_depth/3, seat_height/2 - 1])\n            cylinder(h=wall_thickness*2 + 2, d=40);\n    }\n}\n\n// Bunny head backrest\nmodule bunny_backrest() {\n    // Main backrest\n    translate([0, -chair_depth/3, seat_height + 60])\n        rounded_cube([chair_width - 20, wall_thickness*2, 120], 15);\n    \n    // Bunny ears\n    translate([-chair_width/4, -chair_depth/3 + 5, seat_height + 160])\n        rotate([0, 10, -15])\n        bunny_ear(80, 30, wall_thickness);\n    \n    translate([chair_width/4, -chair_depth/3 + 5, seat_height + 160])\n        rotate([0, 10, 15])\n        bunny_ear(80, 30, wall_thickness);\n    \n    // Bunny face details\n    // Eyes\n    for(x = [-20, 20]) {\n        translate([x, -chair_depth/3 + 10, seat_height + 100])\n            sphere(d=8);\n    }\n    \n    // Nose\n    translate([0, -chair_depth/3 + 15, seat_height + 90])\n        sphere(d=12);\n    \n    // Mouth\n    translate([0, -chair_depth/3 + 20, seat_height + 80])\n        rotate([90, 0, 0])\n        cylinder(h=1, d1=10, d2=0);\n}\n\n// Chair legs\nmodule chair_legs() {\n    leg_height = seat_height - wall_thickness;\n    \n    // Front legs\n    for(x = [-chair_width/2 + 20, chair_width/2 - 20]) {\n        for(y = [chair_depth/2 - 20, -chair_depth/2 + 20]) {\n            translate([x, y, leg_height/2])\n                rounded_cube([15, 15, leg_height], 5);\n        }\n    }\n    \n    // Back legs with bunny feet\n    for(x = [-chair_width/2 + 20, chair_width/2 - 20]) {\n        translate([x, -chair_depth/2 + 30, leg_height/2 - 10])\n            difference() {\n                rounded_cube([25, 20, leg_height + 10], 8);\n                // Toe details\n                for(i = [-1, 0, 1]) {\n                    translate([i * 6, 0, -5])\n                        sphere(d=8);\n                }\n            }\n    }\n}\n\n// Bunny tail\nmodule bunny_tail() {\n    translate([0, -chair_depth/3 - 20, seat_height - wall_thickness - 15])\n        sphere(d=30);\n    \n    // Tail texture\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n            translate([10, 0, 0])\n            sphere(d=3);\n    }\n}\n\n// Armrests\nmodule armrests() {\n    armrest_height = 40;\n    \n    // Left armrest\n    translate([-chair_width/2, 0, seat_height + armrest_height/2])\n        rounded_cube([wall_thickness*2, chair_depth - 40, armrest_height], 10);\n    \n    // Right armrest\n    translate([chair_width/2, 0, seat_height + armrest_height/2])\n        rounded_cube([wall_thickness*2, chair_depth - 40, armrest_height], 10);\n}\n\n// Main assembly\nunion() {\n    chair_seat();\n    bunny_backrest();\n    chair_legs();\n    bunny_tail();\n    armrests();\n}",
    "renders": true
  },
  {
    "sports_equipment": "kitten",
    "openscad_code": "// Kitten-shaped cat condo with realistic proportions\n// Overall dimensions: ~100mm wide x 80mm deep x 120mm tall\n\nmodule kitten_body() {\n    // Main body - oval shape\n    translate([0, 0, 15]) \n        scale([1.5, 1, 1])\n        sphere(r=25, $fn=32);\n    \n    // Chest protrusion\n    translate([25, 0, 15])\n        rotate([0, -15, 0])\n        scale([1.2, 0.8, 0.9])\n        sphere(r=20, $fn=32);\n}\n\nmodule kitten_head() {\n    // Head sphere\n    translate([0, 0, 65])\n        sphere(r=22, $fn=32);\n    \n    // Snout\n    translate([20, 0, 62])\n        scale([1.5, 1, 0.8])\n        sphere(r=10, $fn=32);\n}\n\nmodule kitten_ears() {\n    // Left ear\n    translate([-10, 15, 75])\n        rotate([0, -30, -30])\n        scale([0.5, 1, 1.5])\n        cylinder(h=15, r1=8, r2=4, $fn=3);\n    \n    // Right ear\n    translate([-10, -15, 75])\n        rotate([0, -30, 30])\n        scale([0.5, 1, 1.5])\n        cylinder(h=15, r1=8, r2=4, $fn=3);\n}\n\nmodule kitten_tail() {\n    // Tail - curved cylinder\n    for(i=[0:15:180]) {\n        rotate([0, 0, i])\n        translate([-35 + i*0.2, 0, 5 + sin(i)*8])\n        rotate([90, 0, 0])\n        cylinder(h=2, r=4, $fn=8);\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side=[-1, 1]) {\n        translate([20, side*10, 8])\n            cylinder(h=25, r=6, $fn=16);\n            \n        // Paws\n        translate([20, side*10, 0])\n            sphere(r=8, $fn=16);\n    }\n    \n    // Back legs\n    for(side=[-1, 1]) {\n        translate([-20, side*12, 8])\n            cylinder(h=25, r=7, $fn=16);\n            \n        // Paws\n        translate([-20, side*12, 0])\n            sphere(r=9, $fn=16);\n    }\n}\n\nmodule furniture_features() {\n    // Base platform\n    translate([0, 0, -5])\n        cube([100, 80, 10], center=true);\n    \n    // Entry hole in body\n    translate([0, 0, 25])\n        rotate([0, 90, 0])\n        cylinder(h=50, r=15, $fn=32);\n    \n    // Window details\n    for(side=[-1, 1]) {\n        translate([0, side*30, 40])\n            rotate([0, 90, 0])\n            cylinder(h=3, r=12, $fn=32);\n    }\n    \n    // Support beams inside\n    for(pos=[-20, 0, 20]) {\n        translate([pos, 0, 15])\n            rotate([90, 0, 0])\n            cylinder(h=40, r=2, $fn=8);\n    }\n    \n    // Roof texture - shingles\n    for(x=[-30:10:30])\n        for(y=[-25:10:25])\n            translate([x, y, 85])\n                cube([12, 8, 2], center=true);\n}\n\nmodule whiskers() {\n    // Left whiskers\n    for(angle=[-20:10:20]) {\n        rotate([0, angle, 0])\n        translate([30, 10, 62])\n            cylinder(h=15, r=1, $fn=8);\n    }\n    \n    // Right whiskers\n    for(angle=[-20:10:20]) {\n        rotate([0, angle, 0])\n        translate([30, -10, 62])\n            cylinder(h=15, r=1, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    kitten_body();\n    kitten_head();\n    kitten_ears();\n    kitten_tail();\n    legs();\n    furniture_features();\n    whiskers();\n}",
    "renders": true
  },
  {
    "sports_equipment": "puppy",
    "openscad_code": "// Puppy-shaped stool / small side table\n// Overall size ~100x120x100 mm\n\nmodule leg(x,y,angle) {\n    translate([x,y,18])\n    rotate([0,0,angle])\n    union() {\n        // Upper leg\n        cylinder(h=25,d=12,$fn=20);\n        // Lower leg\n        translate([0,0,-15])\n        cylinder(h=20,d=8,$fn=20);\n        // Paw\n        translate([0,0,-30])\n        sphere(d=10,$fn=16);\n    }\n}\n\nmodule tail() {\n    translate([-28,0,18])\n    rotate([0,-30,0])\n    union() {\n        cylinder(h=25,d=8,$fn=16);\n        sphere(d=10,$fn=16);\n    }\n}\n\nmodule ear(x,y,z,rx) {\n    translate([x,y,z])\n    rotate([rx,0,0])\n    difference() {\n        union() {\n            cylinder(h=20,d1=12,d2=6,$fn=16);\n            sphere(d=12,$fn=16);\n        }\n        translate([0,-5,5])\n        cube([20,20,20],center=true);\n    }\n}\n\nmodule body() {\n    difference() {\n        union() {\n            // Main body\n            translate([0,0,30])\n            scale([1,1.2,0.8])\n            sphere(d=60,$fn=48);\n            // Seat top\n            translate([0,0,58])\n            cylinder(h=8,d=50,$fn=48);\n        }\n        // Hollow interior\n        translate([0,0,18])\n        sphere(d=54,$fn=48);\n    }\n}\n\nmodule head() {\n    translate([40,0,70])\n    union() {\n        // Head\n        sphere(d=35,$fn=32);\n        // Muzzle\n        translate([8,0,-5])\n        sphere(d=15,$fn=16);\n        // Nose\n        translate([15,0,-5])\n        sphere(d=6,$fn=16);\n        // Eyes\n        for(x=[-1,1])\n        translate([5,x*8,2])\n        sphere(d=5,$fn=8);\n        // Ears\n        ear(-5,12,10,30);\n        ear(-5,-12,10,-30);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    // Four legs\n    leg(20,20,20);\n    leg(20,-20,-20);\n    leg(-20,20,-20);\n    leg(-20,-20,20);\n    // Tail\n    tail();\n}\n\n// Bottom support ring for stability\ndifference() {\n    translate([0,0,8])\n    cylinder(h=4,d=60,$fn=48);\n    translate([0,0,6])\n    cylinder(h=8,d=54,$fn=48);\n}",
    "renders": true
  },
  {
    "sports_equipment": "dino",
    "openscad_code": "// Dinosaur-Themed Bookshelf (Brachiosaurus silhouette)\n// Overall footprint ~100 mm wide × 60 mm deep × 120 mm tall\n// Wall thickness 2 mm everywhere for 3D-printability\n\n$fa = 2;\n$fs = 0.5;\n\n// Main module\nmodule dinoBookshelf() {\n    difference() {\n        union() {\n            body();\n            neck();\n            head();\n            tail();\n            fourLegs();\n            shelfSystem();\n        }\n        // Remove all interior hollow space\n        interiorHollow();\n    }\n    // Extra details\n    gripTexture();\n}\n\n// --- Core body shell -------------------------------------------------\nmodule body() {\n    // Central torso box\n    translate([0, 0, 30])\n    scale([1, 0.8, 0.6])\n    cube([60, 40, 40], center = true);\n}\n\n// --- Neck -----------------------------------------------------------\nmodule neck() {\n    color(\"DarkOliveGreen\")\n    for (i = [0:8]) {\n        translate([30 - i*4, 0, 50 + i*6])\n        scale([1 - i*0.07, 1 - i*0.07, 1])\n        rotate([0, -10, 0])\n        cube([8, 8, 8], center = true);\n    }\n}\n\n// --- Head -----------------------------------------------------------\nmodule head() {\n    color(\"DarkOliveGreen\")\n    translate([-5, 0, 105])\n    union() {\n        scale([1, 0.7, 0.8])\n        sphere(d = 18);\n        // Snout\n        translate([8, 0, 0])\n        scale([1.2, 0.7, 0.7])\n        sphere(d = 12);\n    }\n}\n\n// --- Tail -----------------------------------------------------------\nmodule tail() {\n    color(\"DarkOliveGreen\")\n    for (i = [0:12]) {\n        translate([-30 + i*3.5, 0, 25 - i*1.5])\n        scale([1 - i*0.08, 1 - i*0.08, 1 - i*0.08])\n        rotate([0, 10, 0])\n        cube([8, 8, 8], center = true);\n    }\n}\n\n// --- Four Legs ------------------------------------------------------\nmodule fourLegs() {\n    // Front left\n    leg([20, 20, 0]);\n    // Front right\n    leg([20, -20, 0]);\n    // Rear left\n    leg([-20, 20, 0]);\n    // Rear right\n    leg([-20, -20, 0]);\n}\n\nmodule leg(pos) {\n    translate(pos)\n    union() {\n        // Upper leg\n        translate([0, 0, 15])\n        rotate([0, 90, 0])\n        cylinder(h = 22, d1 = 12, d2 = 10, center = true);\n        // Lower leg\n        translate([0, 0, 5])\n        rotate([0, 90, 0])\n        cylinder(h = 20, d1 = 10, d2 = 8, center = true);\n        // Foot\n        translate([0, 0, -5])\n        scale([1, 1.5, 0.5])\n        sphere(d = 12);\n    }\n}\n\n// --- Shelving system -------------------------------------------------\nmodule shelfSystem() {\n    color(\"BurlyWood\") {\n        // Center partition\n        translate([0, 0, 30])\n        cube([58, 2, 36], center = true);\n\n        // Three shelves\n        for (z = [12:12:48]) {\n            translate([0, 0, z])\n            cube([56, 36, 2], center = true);\n        }\n    }\n}\n\n// --- Interior hollow for material saving -----------------------------\nmodule interiorHollow() {\n    // Main cavity\n    translate([0, 0, 30])\n    scale([1, 0.8, 0.6])\n    cube([56, 36, 36], center = true);\n\n    // Neck cavity\n    for (i = [0:8]) {\n        translate([30 - i*4, 0, 50 + i*6])\n        scale([1 - i*0.07, 1 - i*0.07, 1])\n        rotate([0, -10, 0])\n        cube([4, 4, 4], center = true);\n    }\n\n    // Tail cavity\n    for (i = [0:12]) {\n        translate([-30 + i*3.5, 0, 25 - i*1.5])\n        scale([1 - i*0.08, 1 - i*0.08, 1 - i*0.08])\n        rotate([0, 10, 0])\n        cube([4, 4, 4], center = true);\n    }\n\n    // Leg cavities\n    fourLegsCavities();\n}\n\nmodule fourLegsCavities() {\n    legCavity([20, 20, 0]);\n    legCavity([20, -20, 0]);\n    legCavity([-20, 20, 0]);\n    legCavity([-20, -20, 0]);\n}\n\nmodule legCavity(pos) {\n    translate(pos)\n    union() {\n        // Upper leg hollow\n        translate([0, 0, 15])\n        rotate([0, 90, 0])\n        cylinder(h = 22, d1 = 8, d2 = 6, center = true);\n        // Lower leg hollow\n        translate([0, 0, 5])\n        rotate([0, 90, 0])\n        cylinder(h = 20, d1 = 6, d2 = 4, center = true);\n    }\n}\n\n// --- Grip texture (small ridges for book stops) ----------------------\nmodule gripTexture() {\n    for (shelf = [12, 24, 36]) {\n        for (x = [-25:5:25]) {\n            translate([x, 18, shelf + 1.2])\n            cube([0.6, 1, 0.6], center = true);\n            translate([x, -18, shelf + 1.2])\n            cube([0.6, 1, 0.6], center = true);\n        }\n    }\n}\n\n// Render the model\ndinoBookshelf();",
    "renders": true
  },
  {
    "sports_equipment": "dragon",
    "openscad_code": "// Dragon Coat Rack\n// Medium complexity, realistic style, 3D printable\n// Overall dimensions: ~120mm long, 80mm tall, 60mm deep\n\n$fn=24;\n\nmodule body() {\n    // Main body structure - hollow for weight\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0,-5,40]) sphere(d=25);\n            translate([0,-20,15]) sphere(d=20);\n            translate([0,-30,0]) sphere(d=25);\n        }\n        // Hollow interior\n        scale([0.8,0.8,0.8]) hull() {\n            translate([0,-5,40]) sphere(d=25);\n            translate([0,-20,15]) sphere(d=20);\n            translate([0,-30,0]) sphere(d=25);\n        }\n    }\n}\n\nmodule neck() {\n    // Curved neck with coat hooks\n    union() {\n        // Neck structure\n        rotate([0,15,0]) hull() {\n            translate([0,-30,0]) sphere(d=25);\n            translate([0,-35,25]) sphere(d=15);\n            translate([0,-30,45]) sphere(d=12);\n        }\n        \n        // Coat hooks along neck\n        for(z=[15,25,35]) {\n            translate([0,-35,z]) {\n                rotate([0,90,0]) cylinder(h=10, d1=8, d2=6);\n                sphere(d=8);\n            }\n        }\n    }\n}\n\nmodule head() {\n    // Dragon head with functional elements\n    union() {\n        // Basic head shape\n        translate([0,-30,50]) {\n            rotate([0,15,0]) scale([1.2,1,1]) sphere(d=20);\n            \n            // Snout\n            translate([0,-15,0]) scale([0.8,1.5,0.8]) sphere(d=15);\n            \n            // Horns as additional hooks\n            for(a=[-30,30]) {\n                rotate([0,0,a]) translate([0,-8,10]) {\n                    rotate([a,0,0]) cylinder(h=15, d1=6, d2=3);\n                    sphere(d=6);\n                }\n            }\n            \n            // Eyes as countersunk screw holes\n            for(x=[-8,8]) {\n                translate([x,-5,5]) {\n                    rotate([0,90,0]) cylinder(h=10, d1=5, d2=3);\n                }\n            }\n        }\n    }\n}\n\nmodule tail_support() {\n    // Tail doubles as rear support\n    difference() {\n        // Main tail curve\n        hull() {\n            translate([0,-5,0]) sphere(d=25);\n            translate([10,15,-5]) sphere(d=15);\n            translate([15,25,-10]) sphere(d=10);\n        }\n        // Hollow for material saving\n        scale([0.7,0.7,0.7]) hull() {\n            translate([0,-5,0]) sphere(d=25);\n            translate([10,15,-5]) sphere(d=15);\n            translate([15,25,-10]) sphere(d=10);\n        }\n    }\n}\n\nmodule legs() {\n    // Four legs for stability\n    union() {\n        // Front legs\n        for(x=[-10,10]) {\n            translate([x,-20,0]) {\n                // Leg structure\n                hull() {\n                    sphere(d=8);\n                    translate([0,8,-20]) sphere(d=6);\n                }\n                // Foot pad\n                translate([0,8,-20]) rotate([90,0,0]) cylinder(h=3, d1=12, d2=8);\n            }\n        }\n        \n        // Rear legs\n        for(x=[-8,8]) {\n            translate([x,10,0]) {\n                hull() {\n                    sphere(d=8);\n                    translate([0,8,-20]) sphere(d=6);\n                }\n                translate([0,8,-20]) rotate([90,0,0]) cylinder(h=3, d1=12, d2=8);\n            }\n        }\n    }\n}\n\nmodule wings() {\n    // Wing-shaped back supports\n    union() {\n        for(side=[-1,1]) {\n            translate([side*15,0,30]) {\n                rotate([0,side*30,0]) {\n                    // Wing membrane structure\n                    hull() {\n                        translate([0,0,0]) sphere(d=5);\n                        translate([0,-10,15]) sphere(d=3);\n                        translate([0,5,20]) sphere(d=3);\n                        translate([0,15,15]) sphere(d=3);\n                        translate([0,10,0]) sphere(d=5);\n                    }\n                    \n                    // Wing bones as hooks\n                    for(p=[[-10,15],[5,20],[15,15]]) {\n                        translate([0,p[0],p[1]]) {\n                            rotate([0,90,0]) cylinder(h=8, d1=5, d2=3);\n                            sphere(d=5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    head();\n    tail_support();\n    legs();\n    wings();\n}",
    "renders": true
  },
  {
    "sports_equipment": "unicorn",
    "openscad_code": "// Unicorn Children's Chair (Realistic Style, Medium Complexity)\n\nwall = 2;\n\nmodule horn() {\n    // Tapered unicorn horn with spiral texture\n    for (i = [0:5:360]) {\n        rotate([0, 0, i])\n        translate([0, 0, i*0.2])\n        cylinder(h=2, r1=5-i*0.01, r2=4.8-i*0.01);\n    }\n}\n\nmodule ear() {\n    // Pointed unicorn ear\n    rotate([0, -20, 0])\n    scale([1, 0.6, 2])\n    sphere(5);\n}\n\nmodule mane() {\n    // Flowing mane segments\n    for (i = [0:30:150]) {\n        rotate([0, i, 0])\n        translate([0, 0, 8-i*0.05])\n        rotate([0, 15*sin(i), 0])\n        scale([0.8, 0.3, 1.2])\n        sphere(4);\n    }\n}\n\nmodule tail() {\n    // Curved tail\n    rotate([30, 0, 0])\n    for (i = [0:5:40]) {\n        rotate([0, i*2, 0])\n        translate([0, 0, i*0.8])\n        sphere(3);\n    }\n}\n\nmodule leg() {\n    // Sturdy chair leg with rounded hoof\n    union() {\n        cylinder(h=30, r=5);\n        translate([0, 0, -2])\n        scale([1.2, 1.2, 0.5])\n        sphere(5);\n    }\n}\n\nmodule unicorn_head() {\n    // Horse-like head\n    union() {\n        // Main head shape\n        scale([1.2, 1, 1.2])\n        sphere(15);\n        \n        // Muzzle\n        translate([15, 0, -5])\n        scale([1.5, 0.8, 0.8])\n        sphere(10);\n        \n        // Horn\n        translate([0, 0, 18])\n        horn();\n        \n        // Ears\n        translate([5, 8, 12])\n        ear();\n        translate([5, -8, 12])\n        mirror([0, 1, 0])\n        ear();\n        \n        // Mane\n        translate([-10, 0, 10])\n        mane();\n        \n        // Eyes\n        translate([10, 5, 5])\n        sphere(2);\n        translate([10, -5, 5])\n        sphere(2);\n    }\n}\n\nmodule seat() {\n    // Saddle-shaped seat with backrest\n    difference() {\n        // Main seat\n        union() {\n            // Seat base\n            translate([0, 0, 30])\n            scale([40, 35, wall])\n            cube([1, 1, 1], center=true);\n            \n            // Backrest\n            translate([-15, 0, 45])\n            scale([wall, 35, 20])\n            cube([1, 1, 1], center=true);\n            \n            // Side supports\n            translate([0, 18, 37])\n            scale([40, wall, 14])\n            cube([1, 1, 1], center=true);\n            translate([0, -18, 37])\n            scale([40, wall, 14])\n            cube([1, 1, 1], center=true);\n        }\n        \n        // Hollow center for 3D printing\n        translate([0, 0, 30])\n        scale([36, 31, 1])\n        cube([1, 1, wall+1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat structure\n    seat();\n    \n    // Unicorn head as backrest decoration\n    translate([-25, 0, 50])\n    rotate([0, 90, 0])\n    scale([0.8, 0.8, 0.8])\n    unicorn_head();\n    \n    // Legs\n    translate([15, 15, 15])\n    leg();\n    translate([15, -15, 15])\n    leg();\n    translate([-15, 15, 15])\n    leg();\n    translate([-15, -15, 15])\n    leg();\n    \n    // Tail support\n    translate([-35, 0, 30])\n    rotate([0, -30, 0])\n    tail();\n}",
    "renders": true
  },
  {
    "sports_equipment": "pegasus",
    "openscad_code": "// Pegasus Winged Chair\n// A realistic wing-backed armchair with pegasus-themed wing details\n\nchair_width = 80;\nchair_depth = 70;\nchair_height = 100;\nseat_height = 45;\nwall_thickness = 2;\n\nmodule chair_base() {\n    // Main seat platform\n    difference() {\n        cube([chair_width, chair_depth, wall_thickness], center=true);\n        translate([0, 0, -wall_thickness/2])\n            cube([chair_width-4, chair_depth-4, wall_thickness*2], center=true);\n    }\n}\n\nmodule chair_back() {\n    // Curved backrest with pegasus wing styling\n    difference() {\n        // Main backrest frame\n        translate([0, chair_depth/2 - 5, chair_height/2 - seat_height/2])\n            cube([chair_width, wall_thickness, chair_height - seat_height], center=true);\n        \n        // Hollow out back\n        translate([0, chair_depth/2 - 4, chair_height/2 - seat_height/2])\n            cube([chair_width-4, wall_thickness+1, chair_height - seat_height - 4], center=true);\n    }\n    \n    // Wing details\n    for(side = [-1, 1]) {\n        translate([side * chair_width/3, chair_depth/2 - 5, chair_height - seat_height - 10]) {\n            rotate([0, 15, side * 10])\n                difference() {\n                    // Wing shape\n                    union() {\n                        translate([0, 0, 0])\n                            cube([chair_width/4, wall_thickness, chair_height/3], center=true);\n                        translate([side * 10, 0, 15])\n                            rotate([0, 0, side * 30])\n                            cube([chair_width/5, wall_thickness, chair_height/4], center=true);\n                    }\n                    \n                    // Wing feather cutouts\n                    for(i = [1:3]) {\n                        translate([side * (i*3 - 5), 0, -5 + i*8])\n                            rotate([0, 0, side * 20])\n                            cube([5, wall_thickness+1, 10], center=true);\n                    }\n                }\n        }\n    }\n}\n\nmodule chair_legs() {\n    // Four legs with pegasus hoof styling\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (chair_width/2 - 10), y * (chair_depth/2 - 10), -seat_height/2]) {\n                difference() {\n                    // Tapered leg\n                    cylinder(h=seat_height, r1=3, r2=4, $fn=12);\n                    // Hollow core\n                    cylinder(h=seat_height, r1=1, r2=2, $fn=12);\n                }\n                \n                // Hoof detail\n                translate([0, 0, -seat_height/2 - 2])\n                    sphere(d=8, $fn=12);\n            }\n        }\n    }\n}\n\nmodule armrests() {\n    // Wing-styled armrests\n    for(side = [-1, 1]) {\n        translate([side * chair_width/2, 0, 0]) {\n            // Main support\n            difference() {\n                translate([0, 0, 0])\n                    cube([wall_thickness*3, chair_depth/2, seat_height/2], center=true);\n                translate([0, 0, 0])\n                    cube([wall_thickness, chair_depth/2 - 4, seat_height/2 - 4], center=true);\n            }\n            \n            // Wing tip detail\n            translate([side * 5, chair_depth/4, seat_height/4 + 5])\n                rotate([0, 0, side * -20])\n                difference() {\n                    cube([10, wall_thickness*2, 5], center=true);\n                    cube([8, wall_thickness*2 + 1, 3], center=true);\n                }\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Padded seat with quilting pattern\n    difference() {\n        translate([0, 0, wall_thickness/2 + 5])\n            cube([chair_width - 4, chair_depth - 4, 10], center=true);\n        translate([0, 0, wall_thickness/2 + 4])\n            cube([chair_width - 8, chair_depth - 8, 12], center=true);\n    }\n    \n    // Quilting lines\n    for(i = [-1, 0, 1]) {\n        translate([i * 15, 0, wall_thickness/2 + 10.1])\n            cube([2, chair_depth - 8, 0.5], center=true);\n    }\n    for(j = [-1, 0, 1]) {\n        translate([0, j * 15, wall_thickness/2 + 10.1])\n            cube([chair_width - 8, 2, 0.5], center=true);\n    }\n}\n\n// Assemble the chair\nunion() {\n    chair_legs();\n    chair_base();\n    chair_back();\n    armrests();\n    seat_cushion();\n}",
    "renders": true
  },
  {
    "sports_equipment": "warrior",
    "openscad_code": "// Warrior Chair - A throne-like chair with shield back and sword armrests\n// Overall dimensions: 120mm tall, 70mm wide, 60mm deep\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main seat module\nmodule seat() {\n    // Seat base\n    difference() {\n        cube([60, 50, 5], center=true);\n        translate([0, 0, -2.5])\n            cube([56, 46, 6], center=true);\n    }\n    \n    // Seat cushion\n    translate([0, 0, 2.5])\n        scale([1, 1, 0.3])\n            sphere(d=55, $fn=32);\n}\n\n// Shield backrest\nmodule shield_back() {\n    // Main shield body\n    translate([0, 25, 25])\n        rotate([0, 0, 0])\n            difference() {\n                // Outer shield\n                cylinder(h=4, d=40, $fn=32);\n                // Inner cutout\n                translate([0, 0, -1])\n                    cylinder(h=6, d=36, $fn=32);\n            }\n    \n    // Shield boss (center dome)\n    translate([0, 25, 27])\n        sphere(d=10, $fn=32);\n    \n    // Shield arm supports\n    for(i = [-1, 1]) {\n        translate([i * 15, 25, 15])\n            cylinder(h=30, d=4, $fn=16);\n    }\n}\n\n// Sword armrest\nmodule sword_armrest(side) {\n    // Armrest blade\n    translate([side * 30, 0, 15])\n        rotate([0, 0, side * 15])\n            linear_extrude(height=4)\n                polygon(points=[[0,0], [5,30], [-5,30], [0,0]]);\n    \n    // Armrest guard\n    translate([side * 30, 0, 15])\n        rotate([0, 0, side * 15])\n            difference() {\n                cube([20, 8, 4], center=true);\n                translate([0, 0, -1])\n                    cube([16, 4, 6], center=true);\n            }\n    \n    // Support post\n    translate([side * 25, 20, 7.5])\n        cylinder(h=15, d=4, $fn=16);\n}\n\n// Legs with warrior boot design\nmodule legs() {\n    for(x = [-20, 20])\n        for(y = [-15, 15]) {\n            // Main leg post\n            translate([x, y, -15])\n                cylinder(h=30, d=6, $fn=16);\n            \n            // Boot foot\n            translate([x, y, -30])\n                difference() {\n                    scale([1.5, 1, 0.5])\n                        sphere(d=10, $fn=32);\n                    translate([0, 0, 2])\n                        cube([20, 10, 6], center=true);\n                }\n        }\n}\n\n// Decorative rivets\nmodule rivets() {\n    for(pos = [[-20, 20, 27], [20, 20, 27], [0, 20, 35]]) {\n        translate(pos)\n            sphere(d=3, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    seat();\n    \n    // Shield backrest\n    shield_back();\n    \n    // Armrest swords\n    sword_armrest(1);\n    sword_armrest(-1);\n    \n    // Legs\n    legs();\n    \n    // Decorative elements\n    rivets();\n}",
    "renders": true
  },
  {
    "sports_equipment": "knight",
    "openscad_code": "// Knight furniture - Chess knight piece as a functional stool/seat\n// Overall dimensions: 120mm height, 100mm width, 120mm depth\n// Wall thickness: 2mm for 3D printing\n\nseat_diameter = 80;\nseat_thickness = 5;\nbody_height = 60;\nleg_height = 55;\nwall_thickness = 2;\n\n// Main union for the entire furniture piece\nunion() {\n    // Seat surface - circular with slight dome for comfort\n    translate([0, 0, body_height + leg_height]) {\n        difference() {\n            cylinder(h = seat_thickness, d = seat_diameter, $fn = 32);\n            translate([0, 0, -1]) \n                cylinder(h = seat_thickness + 2, d = seat_diameter - wall_thickness*2, $fn = 32);\n        }\n        \n        // Grip texture rings on seat edge\n        for(i = [0:3]) {\n            translate([0, 0, i * 1.2])\n                cylinder(h = 0.5, d = seat_diameter + 1, $fn = 32);\n        }\n    }\n    \n    // Knight body - stylized horse head shape\n    module knight_body() {\n        // Main body cylinder\n        difference() {\n            cylinder(h = body_height, d = 70, $fn = 32);\n            translate([0, 0, -1]) \n                cylinder(h = body_height + 2, d = 70 - wall_thickness*2, $fn = 32);\n        }\n        \n        // Horse head protrusion\n        translate([30, 0, body_height - 20]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h = 40, d = 35, $fn = 16);\n                    translate([0, 0, -1]) \n                        cylinder(h = 42, d = 35 - wall_thickness*2, $fn = 16);\n                }\n            }\n        }\n        \n        // Ear structures (structural supports)\n        translate([35, 15, body_height - 15]) {\n            rotate([0, 30, 0]) {\n                difference() {\n                    cylinder(h = 15, d = 12, $fn = 8);\n                    translate([0, 0, -1]) \n                        cylinder(h = 17, d = 12 - wall_thickness*2, $fn = 8);\n                }\n            }\n        }\n        \n        translate([35, -15, body_height - 15]) {\n            rotate([0, -30, 0]) {\n                difference() {\n                    cylinder(h = 15, d = 12, $fn = 8);\n                    translate([0, 0, -1]) \n                        cylinder(h = 17, d = 12 - wall_thickness*2, $fn = 8);\n                }\n            }\n        }\n        \n        // Eye holes (decorative and weight reduction)\n        translate([45, 8, body_height - 25]) {\n            rotate([0, 90, 0]) \n                cylinder(h = wall_thickness + 2, d = 8, $fn = 16);\n        }\n        \n        translate([45, -8, body_height - 25]) {\n            rotate([0, 90, 0]) \n                cylinder(h = wall_thickness + 2, d = 8, $fn = 16);\n        }\n        \n        // Mane detail as structural ribs\n        for(i = [0:4]) {\n            translate([20 + i * 8, 0, body_height - 10 - i * 3]) {\n                rotate([0, 10, 0]) {\n                    difference() {\n                        cube([15, 3, 8]);\n                        translate([wall_thickness, wall_thickness, wall_thickness]) \n                            cube([15 - wall_thickness*2, 3 - wall_thickness*2, 8 - wall_thickness*2]);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Base legs - four legs for stability\n    module legs() {\n        // Front legs\n        translate([25, 25, 0]) {\n            difference() {\n                cylinder(h = leg_height, d = 20, $fn = 16);\n                translate([0, 0, -1]) \n                    cylinder(h = leg_height + 2, d = 20 - wall_thickness*2, $fn = 16);\n            }\n        }\n        \n        translate([-25, 25, 0]) {\n            difference() {\n                cylinder(h = leg_height, d = 20, $fn = 16);\n                translate([0, 0, -1]) \n                    cylinder(h = leg_height + 2, d = 20 - wall_thickness*2, $fn = 16);\n            }\n        }\n        \n        // Rear legs\n        translate([25, -25, 0]) {\n            difference() {\n                cylinder(h = leg_height, d = 20, $fn = 16);\n                translate([0, 0, -1]) \n                    cylinder(h = leg_height + 2, d = 20 - wall_thickness*2, $fn = 16);\n            }\n        }\n        \n        translate([-25, -25, 0]) {\n            difference() {\n                cylinder(h = leg_height, d = 20, $fn = 16);\n                translate([0, 0, -1]) \n                    cylinder(h = leg_height + 2, d = 20 - wall_thickness*2, $fn = 16);\n            }\n        }\n        \n        // Cross-bracing between legs for structural integrity\n        translate([0, 25, leg_height/2]) {\n            difference() {\n                cube([50, wall_thickness*2, 15]);\n                translate([wall_thickness, 0, wall_thickness]) \n                    cube([50 - wall_thickness*2, wall_thickness*2, 15 - wall_thickness*2]);\n            }\n        }\n        \n        translate([0, -25, leg_height/2]) {\n            difference() {\n                cube([50, wall_thickness*2, 15]);\n                translate([wall_thickness, 0, wall_thickness]) \n                    cube([50 - wall_thickness*2, wall_thickness*2, 15 - wall_thickness*2]);\n            }\n        }\n    }\n    \n    knight_body();\n    legs();\n}",
    "renders": true
  },
  {
    "sports_equipment": "ninja",
    "openscad_code": "// Ninja Throwing Star Coffee Table\n// A functional coffee table shaped like a giant ninja shuriken (throwing star)\n\n// Overall dimensions: 300mm diameter, 450mm height\n\n// Parameters\n$table_diameter = 300;\n$leg_height = 450;\n$leg_thickness = 30;\n$blade_thickness = 8;\n$wall_thickness = 3;\n\nmodule shuriken_blade(length, width, thickness) {\n    // Single blade of the shuriken\n    difference() {\n        // Main blade shape\n        linear_extrude(height = thickness, center = true)\n            polygon(points=[\n                [0, 0],\n                [length * 0.9, width * 0.1],\n                [length, 0],\n                [length * 0.9, -width * 0.1],\n                [0, 0]\n            ]);\n        \n        // Cutout hole pattern for weight reduction\n        for (i = [1:3]) {\n            translate([length * (0.2 + i * 0.2), 0, 0])\n                cylinder(h = thickness + 2, r = 5, center = true);\n        }\n    }\n}\n\nmodule table_top() {\n    // Main circular table top\n    difference() {\n        // Solid cylinder base\n        cylinder(h = $wall_thickness * 2, r = $table_diameter/2, center = true);\n        \n        // Central hole for leg attachment\n        cylinder(h = $wall_thickness * 4, r = $leg_thickness/2 + 5, center = true);\n    }\n    \n    // Add shuriken blades\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([0, 0, 0])\n                shuriken_blade($table_diameter/2 - 10, 40, $blade_thickness);\n    }\n    \n    // Reinforcement ring\n    translate([0, 0, -$wall_thickness])\n        cylinder(h = $wall_thickness, r = $table_diameter/2 - 30, $fn = 100);\n}\n\nmodule table_leg() {\n    // Central support leg with ninja star details\n    union() {\n        // Main cylindrical leg\n        cylinder(h = $leg_height, r = $leg_thickness/2, center = false);\n        \n        // Base plate for stability\n        translate([0, 0, 0])\n            cylinder(h = 10, r = $leg_thickness, center = false);\n        \n        // Ninja star grip pattern\n        for (i = [50:50:$leg_height-50]) {\n            translate([0, 0, i])\n                difference() {\n                    cylinder(h = 5, r = $leg_thickness/2 + 2, center = false);\n                    for (j = [0:7]) {\n                        rotate([0, 0, j * 45])\n                            translate([$leg_thickness/2 - 2, -2, -1])\n                                cube([5, 4, 7]);\n                    }\n                }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, $leg_height])\n    table_top();\n\ntranslate([0, 0, 0])\n    table_leg();\n\n// Hidden support structure for 3D printing\ntranslate([0, 0, $leg_height - 5])\n    difference() {\n        cylinder(h = 10, r = $leg_thickness/2 + 20, center = false);\n        cylinder(h = 12, r = $leg_thickness/2 + 2, center = false);\n    }",
    "renders": true
  },
  {
    "sports_equipment": "samurai",
    "openscad_code": "// Samurai Armor Chair\n// A 3D printable chair inspired by samurai armor pieces\n\n// Parameters\nseat_width = 60;\nseat_depth = 55;\nseat_thickness = 5;\nleg_height = 50;\nleg_thickness = 4;\narmor_plate_thickness = 3;\n\n// Main module\nmodule samurai_chair() {\n    // Seat base - shaped like samurai chest armor\n    difference() {\n        // Main seat\n        translate([0, 0, leg_height])\n            scale([1, 0.9, 0.2])\n            sphere(d=seat_width, $fn=32);\n        \n        // Hollow center\n        translate([0, 0, leg_height-1])\n            scale([0.7, 0.6, 0.5])\n            sphere(d=seat_width-10, $fn=32);\n    }\n    \n    // Seat top surface\n    translate([0, 0, leg_height + seat_thickness])\n        cube([seat_width-10, seat_depth-10, seat_thickness], center=true);\n    \n    // Front armor plate (lap protection)\n    translate([0, seat_depth/2 - 5, leg_height/2 + 10])\n        rotate([90, 0, 0])\n        difference() {\n            cube([seat_width, leg_height, armor_plate_thickness], center=true);\n            // Decorative cutouts\n            for(i = [-2:2]) {\n                translate([i*10, 0, 0])\n                    cube([5, leg_height-10, armor_plate_thickness+2], center=true);\n            }\n        }\n    \n    // Back armor plate (spine protection)\n    translate([0, -seat_depth/2 + 5, leg_height + 25])\n        rotate([90, 0, 0])\n        difference() {\n            cube([seat_width-10, leg_height*1.2, armor_plate_thickness], center=true);\n            // Decorative pattern\n            for(i = [-1:1]) {\n                translate([i*15, 0, 0])\n                    cylinder(h=leg_height, r=3, $fn=20);\n            }\n        }\n    \n    // Legs - shaped like naginata poles\n    module leg(x, y) {\n        translate([x, y, leg_height/2])\n            difference() {\n                // Main leg\n                cylinder(h=leg_height, r=leg_thickness, $fn=8);\n                \n                // Grip texture rings\n                for(i = [0:5]) {\n                    translate([0, 0, -leg_height/2 + i*8 + 2])\n                        cylinder(h=2, r=leg_thickness+1, $fn=8);\n                }\n            }\n    }\n    \n    // Position legs\n    leg(seat_width/2 - leg_thickness - 5, seat_depth/2 - leg_thickness - 5);\n    leg(-seat_width/2 + leg_thickness + 5, seat_depth/2 - leg_thickness - 5);\n    leg(seat_width/2 - leg_thickness - 5, -seat_depth/2 + leg_thickness + 5);\n    leg(-seat_width/2 + leg_thickness + 5, -seat_depth/2 + leg_thickness + 5);\n    \n    // Side armor plates (shoulder guards)\n    module shoulder_guard(x) {\n        translate([x, 0, leg_height + 15])\n            rotate([0, 90, 0])\n            difference() {\n                // Main plate\n                cube([seat_depth-10, 25, armor_plate_thickness], center=true);\n                \n                // Decorative holes\n                for(i = [-1:1]) {\n                    translate([i*15, 0, 0])\n                        cylinder(h=armor_plate_thickness+2, r=3, $fn=20);\n                }\n            }\n    }\n    \n    shoulder_guard(seat_width/2 + 5);\n    shoulder_guard(-seat_width/2 - 5);\n    \n    // Decorative kabuto (helmet) on back\n    translate([0, -seat_depth/2, leg_height + 30])\n        difference() {\n            // Helmet dome\n            sphere(d=20, $fn=32);\n            \n            // Face opening\n            translate([0, 0, -5])\n                cube([15, 10, 10], center=true);\n        }\n    \n    // Shikoro (neck guard) plates\n    for(i = [1:3]) {\n        translate([0, -seat_depth/2 - i*5, leg_height + 30 - i*3])\n            scale([1 - i*0.1, 0.3, 0.1])\n            sphere(d=25, $fn=32);\n    }\n}\n\n// Render the chair\nsamurai_chair();",
    "renders": true
  },
  {
    "sports_equipment": "viking",
    "openscad_code": "// Viking Stool with Runic Carvings\n// Traditional Scandinavian three-legged stool with authentic proportions\n\n$fn = 50; // Smooth curves for 3D printing\n\n// Overall dimensions (realistic adult stool)\nleg_length = 90;\nseat_diameter = 250;\nleg_thickness = 20;\nstretcher_height = 45;\n\n// Module for single leg with dragon head detail\nmodule viking_leg(height, thickness) {\n    // Main leg post - slight taper for authenticity\n    translate([0, 0, height/2])\n        cylinder(h=height, d1=thickness, d2=thickness*0.8, center=true);\n    \n    // Dragon head foot - simplified but recognizable\n    translate([0, 0, height])\n    union() {\n        // Snout\n        translate([0, thickness/2, 0])\n            cube([thickness*0.8, thickness*0.4, thickness*0.6], center=true);\n        \n        // Eyes (carved recesses)\n        for(x = [-thickness/4, thickness/4])\n            translate([x, thickness/2, thickness*0.3])\n                sphere(d=thickness/6, $fn=16);\n    }\n}\n\n// Module for stretcher with runic carvings (simplified as grooves)\nmodule stretcher(length, thickness) {\n    // Main stretcher bar\n    translate([0, 0, 0])\n        cube([length, thickness*0.8, thickness*0.8], center=true);\n    \n    // Carved runic grooves (simplified as notches)\n    for(i = [-length/3, 0, length/3]) {\n        translate([i, 0, thickness*0.4])\n            cube([thickness*0.3, thickness*0.9, thickness*0.3], center=true);\n    }\n}\n\n// Module for seat with traditional round top and carved border\nmodule viking_seat(diameter, thickness) {\n    // Main seat disk\n    cylinder(h=thickness, d=diameter, center=true);\n    \n    // Reinforcement ring underneath\n    translate([0, 0, -thickness/2])\n        cylinder(h=thickness*1.5, d=diameter*0.8, center=true);\n    \n    // Carved border pattern (simple grooves)\n    difference() {\n        cylinder(h=thickness, d=diameter, center=true);\n        translate([0, 0, -thickness/4])\n            cylinder(h=thickness*1.5, d=diameter*0.9, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0, 0, leg_length + 15])\n        viking_seat(seat_diameter, 12);\n    \n    // Three legs at 120 degree intervals\n    for(i = [0:120:240]) {\n        rotate([0, 0, i])\n        translate([seat_diameter/2 * 0.6, 0, 0])\n            rotate([90, 0, 0])\n                viking_leg(leg_length, leg_thickness);\n    }\n    \n    // Lower stretchers connecting legs (forming triangle)\n    for(i = [0:120:240]) {\n        rotate([0, 0, i])\n        translate([seat_diameter/2 * 0.4, 0, stretcher_height])\n            rotate([0, 0, 30])\n                stretcher(seat_diameter * 0.5, leg_thickness);\n    }\n    \n    // Additional center stretcher for stability\n    translate([0, 0, stretcher_height])\n        cylinder(h=2, d=leg_thickness*1.5, center=true);\n}\n\n// Add subtle wood grain texture using small cylinders\nmodule wood_grain() {\n    for(i = [0:30:360]) {\n        rotate([0, 0, i])\n        translate([seat_diameter/2 * 0.95, 0, leg_length + 15])\n            cylinder(h=1, d=2, center=true);\n    }\n}\n\n// Apply wood grain to seat top\ntranslate([0, 0, leg_length + 21])\n    wood_grain();",
    "renders": true
  },
  {
    "sports_equipment": "gladiator",
    "openscad_code": "// Gladiator Shield Chair – realistic, medium complexity\n// Overall footprint ≈ 110 mm × 100 mm × 140 mm (height)\n\n$fa = 2; $fs = 1;\n\n// Main chair module\nmodule chair() {\n    // Seat plate\n    translate([0, 0, 70])\n        cube([100, 100, 4], center = true);\n\n    // Shield-shaped backrest\n    backrest();\n\n    // Curved front apron (decorative gladius silhouette)\n    translate([0, 50, 38])\n        rotate([90, 0, 0])\n            scale([1, 1.2, 1])\n                gladius_silhouette();\n\n    // Four legs with gladius-style cutouts\n    translate([-38, -38, 35]) leg();\n    translate([ 38, -38, 35]) leg();\n    translate([-38,  38, 35]) leg();\n    translate([ 38,  38, 35]) leg();\n}\n\n// Backrest shaped like a rectangular Roman scutum\nmodule backrest() {\n    // Outer rim\n    difference() {\n        translate([0, -50, 110])\n            cube([100, 6, 80], center = true);\n        // Central boss hole (decorative)\n        translate([0, -45, 110])\n            sphere(d = 25);\n    }\n\n    // Vertical slats for strength\n    for (x = [-30, -10, 10, 30])\n        translate([x, -50, 110])\n            cube([6, 6, 80], center = true);\n}\n\n// Leg with gladius-style cutout\nmodule leg() {\n    difference() {\n        cylinder(h = 70, d = 18, center = true);\n        // Cutout profile\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                gladius_silhouette();\n    }\n}\n\n// 2D gladius outline extruded to 2 mm thickness for printable detail\nmodule gladius_silhouette() {\n    linear_extrude(height = 2)\n        difference() {\n            // Main blade\n            hull() {\n                translate([-4, 0]) circle(d = 10);\n                translate([4, 0])  circle(d = 10);\n                translate([0, 30]) circle(d = 6);\n            }\n            // Fuller groove\n            hull() {\n                translate([-1, 0]) circle(d = 3);\n                translate([1, 0])  circle(d = 3);\n                translate([0, 25]) circle(d = 2);\n            }\n        }\n}\n\n// Assemble the chair\nchair();",
    "renders": true
  },
  {
    "sports_equipment": "hero",
    "openscad_code": "// Hero Chair - Realistic Style, Medium Complexity\n// 3D printable office chair with proper proportions and structural details\n\n$fn = 30;\n\n// Chair dimensions (in mm)\nseat_width = 45;\nseat_depth = 45;\nseat_thickness = 3;\nback_height = 55;\nback_width = 42;\nleg_height = 45;\nwheel_radius = 8;\narmrest_height = 18;\n\n// Base cylinder for gas lift\nmodule base_cylinder() {\n    difference() {\n        cylinder(h=15, r1=20, r2=15);\n        translate([0, 0, 2]) cylinder(h=11, r1=18, r2=13);\n    }\n}\n\n// Star base with 5 legs\nmodule star_base() {\n    union() {\n        // Center hub\n        cylinder(h=8, r=15);\n        \n        // Five legs in star pattern\n        for (i = [0:4]) {\n            rotate([0, 0, i*72]) {\n                translate([10, 0, 0]) {\n                    cube([35, 8, 8], center=true);\n                    translate([17.5, 0, -4]) sphere(r=4);\n                }\n            }\n        }\n    }\n}\n\n// Wheel module\nmodule wheel() {\n    rotate([90, 0, 0]) {\n        difference() {\n            cylinder(h=4, r=wheel_radius);\n            translate([0, 0, -1]) cylinder(h=6, r=wheel_radius-2);\n        }\n    }\n}\n\n// Seat cushion with rounded edges\nmodule seat_cushion() {\n    difference() {\n        // Main cushion\n        minkowski() {\n            cube([seat_width, seat_depth, seat_thickness], center=true);\n            sphere(r=3);\n        }\n        \n        // Hollow for weight reduction\n        translate([0, 0, -1]) \n            cube([seat_width-4, seat_depth-4, seat_thickness-1], center=true);\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    difference() {\n        // Main backrest\n        translate([0, -seat_depth/2 + 5, back_height/2 + seat_thickness/2]) {\n            minkowski() {\n                cube([back_width, 8, back_height], center=true);\n                sphere(r=2);\n            }\n        }\n        \n        // Lumbar curve\n        translate([0, -seat_depth/2 + 9, 20]) {\n            rotate([0, 10, 0]) \n                cube([back_width-6, 12, 25], center=true);\n        }\n    }\n}\n\n// Armrest\nmodule armrest(side) {\n    translate([side * (seat_width/2 + 2), 0, seat_thickness + armrest_height/2]) {\n        difference() {\n            // Main armrest\n            union() {\n                // Vertical support\n                translate([0, -seat_depth/4, 0]) \n                    cube([4, 3, armrest_height], center=true);\n                \n                // Horizontal pad\n                translate([0, -seat_depth/4, armrest_height/2]) \n                    cube([5, 20, 3], center=true);\n            }\n            \n            // Screw holes\n            translate([0, -seat_depth/4 - 7, armrest_height/2]) \n                cylinder(h=5, r=1.5, center=true);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, leg_height + 15]) {\n    // Seat\n    seat_cushion();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n}\n\n// Gas lift cylinder\ntranslate([0, 0, 15]) {\n    cylinder(h=leg_height, r=5);\n}\n\n// Star base\ntranslate([0, 0, 7.5]) {\n    star_base();\n}\n\n// Wheels\nfor (i = [0:4]) {\n    rotate([0, 0, i*72]) {\n        translate([27.5, 0, 0]) {\n            wheel();\n        }\n    }\n}\n\n// Base cover\ntranslate([0, 0, 0]) {\n    base_cylinder();\n}",
    "renders": true
  },
  {
    "sports_equipment": "villain",
    "openscad_code": "// Villain Throne Chair – realistic style, medium complexity, 3D-printable (≈100 mm tall)\n\n$fn = 32;      // smooth curves\nwall = 2;      // printable wall thickness\n\nmodule seat_cushion() {\n    // main padded seat block\n    difference() {\n        cube([45, 45, 8], center=true);\n        translate([0, 0, 4])\n            cube([45-wall*2, 45-wall*2, 8], center=true);   // hollow\n    }\n    // tiny surface dimples for upholstery\n    for (x = [-15,-5,5,15])\n        for (y = [-15,-5,5,15])\n            translate([x,y,4.2])\n                sphere(d=2,$fn=8);\n}\n\nmodule backrest_spikes() {\n    // repeating iron spikes along the top edge\n    for (x = [-18:9:18]) {\n        translate([x, -22, 52])\n            rotate([0,0,0])\n                cylinder(h=20, d1=5, d2=1, $fn=8);\n    }\n}\n\nmodule backrest_panel() {\n    // tall back panel with cut-out villain emblem\n    difference() {\n        union() {\n            // outer frame\n            translate([0, -22, 30])\n                cube([46, 6, 50], center=true);\n            // top arch\n            translate([0, -22, 55])\n                rotate([90,0,0])\n                    cylinder(h=46, d=20, center=true);\n        }\n        // emblem cut-out (bat-like silhouette)\n        translate([0, -18.5, 42])\n            scale([1,0.4,1])\n                sphere(d=20);\n        translate([0, -18.5, 42])\n            cube([20, 4, 20], center=true);\n        // hollow shell\n        translate([0, -19, 30])\n            cube([42, 2, 46], center=true);\n    }\n}\n\nmodule armrest(side) {  // side = -1 or 1\n    // curved arm with mini skull cap\n    translate([side*25, 0, 10])\n        rotate([0, side*15, 0])\n            union() {\n                // curved arm\n                hull() {\n                    translate([0, 0, 0])\n                        sphere(d=6);\n                    translate([0, 0, 18])\n                        sphere(d=6);\n                }\n                // skull knob\n                translate([0, 0, 20])\n                    sphere(d=8);\n            }\n}\n\nmodule leg_with_claw() {\n    // front leg ending in claw foot\n    difference() {\n        union() {\n            // main post\n            cylinder(h=40, d=8, center=false);\n            // claw foot\n            translate([0, 0, -8])\n                sphere(d=12);\n            // talons\n            for (a = [45:120:285]) {\n                rotate([0,0,a])\n                    translate([9, 0, -8])\n                        cube([10, 3, 3], center=true);\n            }\n        }\n        // hollow leg\n        translate([0,0,20])\n            cylinder(h=40, d=8-wall*2, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // seat\n    seat_cushion();\n    \n    // backrest\n    backrest_panel();\n    backrest_spikes();\n    \n    // armrests\n    armrest(1);\n    armrest(-1);\n    \n    // legs\n    translate([18, 18, -24]) leg_with_claw();\n    translate([-18, 18, -24]) mirror([1,0,0]) leg_with_claw();\n    translate([18, -18, -24]) leg_with_claw();\n    translate([-18, -18, -24]) mirror([1,0,0]) leg_with_claw();\n}",
    "renders": true
  },
  {
    "sports_equipment": "wizard",
    "openscad_code": "// Wizard's Spellbook Stand\n// A medium-complexity furniture piece for holding ancient tomes\n// Total height: 120mm, width: 90mm, depth: 85mm\n\n$fn = 32;\n\nmodule leg(x, z) {\n    // Single carved wooden leg with octagonal cross-section\n    translate([x, 0, z]) {\n        // Main octagonal shaft\n        cylinder(h = 80, d1 = 12, d2 = 8, $fn = 8);\n        \n        // Carved details - 3 rings\n        for(i = [0:1:2]) {\n            translate([0, 0, 60 - i * 25])\n                cylinder(h = 3, d = 14, $fn = 8);\n        }\n        \n        // Ornate foot\n        translate([0, 0, -3])\n            sphere(d = 18);\n    }\n}\n\nmodule shelf() {\n    // Main platform with raised edges\n    difference() {\n        // Base platform\n        cube([80, 65, 4], center = true);\n        \n        // Recessed center\n        translate([0, 0, -1])\n            cube([76, 61, 6], center = true);\n    }\n    \n    // Raised edge border\n    for(x = [-38, 38]) {\n        translate([x, 0, 2])\n            cube([4, 65, 4], center = true);\n    }\n    for(y = [-30.5, 30.5]) {\n        translate([0, y, 2])\n            cube([80, 3, 4], center = true);\n    }\n}\n\nmodule back_panel() {\n    // Ornate back support with arcane symbols\n    translate([0, -32.5, 42]) {\n        // Main back board\n        cube([70, 4, 45], center = true);\n        \n        // Arched top\n        translate([0, 0, 22.5])\n            scale([1, 0.5, 1])\n                cylinder(h = 4, d = 70, center = true);\n        \n        // Mystical cutout patterns\n        for(i = [-25, -8, 8, 25]) {\n            translate([i, 0, 10])\n                rotate([90, 0, 0])\n                    cylinder(h = 5, d = 12, center = true);\n        }\n    }\n}\n\nmodule book_stop() {\n    // Curved book support at front\n    translate([0, 28, 42]) {\n        difference() {\n            // Main curved support\n            scale([1, 0.3, 1])\n                cylinder(h = 4, d = 60, center = true);\n            \n            // Hollow back for weight reduction\n            translate([0, -3, 0])\n                scale([0.8, 0.5, 0.8])\n                    cylinder(h = 5, d = 60, center = true);\n        }\n    }\n}\n\nmodule star_ornament(x, y, z) {\n    // Small decorative star\n    translate([x, y, z]) {\n        scale([0.5, 0.5, 0.2])\n            for(a = [0:72:360]) {\n                rotate([0, 0, a])\n                    cube([8, 2, 2], center = true);\n            }\n    }\n}\n\n// Main assembly\nunion() {\n    // Four legs\n    leg(-30, 0);\n    leg(30, 0);\n    leg(-30, -40);\n    leg(30, -40);\n    \n    // Bottom stretchers for stability\n    translate([0, -20, 10])\n        cube([70, 4, 4], center = true);\n    translate([0, 20, 10])\n        cube([70, 4, 4], center = true);\n    translate([-30, 0, 10])\n        cube([4, 40, 4], center = true);\n    translate([30, 0, 10])\n        cube([4, 40, 4], center = true);\n    \n    // Main shelf\n    translate([0, 0, 40])\n        shelf();\n    \n    // Back panel\n    back_panel();\n    \n    // Front book stop\n    book_stop();\n    \n    // Decorative stars on corners\n    star_ornament(-35, -35, 44);\n    star_ornament(35, -35, 44);\n    star_ornament(-35, 35, 44);\n    star_ornament(35, 35, 44);\n    \n    // Center star on back panel\n    star_ornament(0, -32.5, 60);\n}",
    "renders": true
  },
  {
    "sports_equipment": "witch",
    "openscad_code": "// Witch's Cauldron Stool\n// A sturdy, three-legged wooden stool with cauldron-shaped seat and mystical details\n// Suitable for 3D printing - all angles < 45 degrees, 2mm minimum thickness\n\n$fn = 32; // Smooth curves for realistic appearance\n\n// Overall dimensions (mm)\nstool_height = 80;\nseat_diameter = 120;\nleg_length = 75;\n\n// Main stool module\nmodule witch_stool() {\n    // Cauldron-shaped seat with realistic proportions\n    difference() {\n        // Main cauldron body - upside down hemisphere\n        translate([0, 0, stool_height - 40])\n        scale([1, 1, 0.6])\n        sphere(d = seat_diameter);\n        \n        // Hollow out the seat\n        translate([0, 0, stool_height - 38])\n        scale([1, 1, 0.6])\n        sphere(d = seat_diameter - 4);\n        \n        // Flat sitting surface\n        translate([0, 0, stool_height - 20])\n        cube([seat_diameter - 4, seat_diameter - 4, 40], center = true);\n    }\n    \n    // Cauldron rim with thickness\n    difference() {\n        translate([0, 0, stool_height - 40])\n        cylinder(h = 8, d1 = seat_diameter + 4, d2 = seat_diameter + 4);\n        translate([0, 0, stool_height - 38])\n        cylinder(h = 12, d1 = seat_diameter, d2 = seat_diameter);\n    }\n    \n    // Three curved legs with realistic taper\n    for (i = [0:120:359]) {\n        rotate([0, 0, i])\n        translate([seat_diameter/2 - 15, 0, 0])\n        rotate([15, 0, 0])\n        leg();\n    }\n    \n    // Mystical runes carved into legs (decorative details)\n    for (i = [0:120:359]) {\n        rotate([0, 0, i])\n        translate([seat_diameter/2 - 20, 0, stool_height/2])\n        rune_carving();\n    }\n    \n    // Central support ring for stability\n    translate([0, 0, stool_height/3])\n    difference() {\n        cylinder(h = 6, d = seat_diameter * 0.7);\n        cylinder(h = 8, d = seat_diameter * 0.7 - 4);\n    }\n}\n\n// Single stool leg module with realistic proportions\nmodule leg() {\n    // Main leg shaft - tapered cylinder\n    difference() {\n        cylinder(h = leg_length, d1 = 20, d2 = 15);\n        // Hollow for material saving\n        cylinder(h = leg_length - 4, d1 = 16, d2 = 11);\n    }\n    \n    // Decorative foot with witchy styling\n    translate([0, 0, -2])\n    difference() {\n        sphere(d = 22);\n        sphere(d = 18);\n    }\n}\n\n// Mystical rune carving details\nmodule rune_carving() {\n    // Simple triangular rune marks\n    for (j = [0:15:45]) {\n        rotate([0, 0, j])\n        translate([0, 0, 0])\n        cube([2, 8, 1.5], center = true);\n    }\n}\n\n// Generate the complete stool\nwitch_stool();",
    "renders": true
  },
  {
    "sports_equipment": "mage",
    "openscad_code": "// Mage's Alchemical Stool - Medium complexity, realistic style\n// Dimensions: 250mm tall, 300mm wide, 300mm deep\n\n// Overall parameters\nstool_height = 250;\nseat_diameter = 300;\nleg_thickness = 12;\nrungs = 4;\nbase_ring_height = 20;\n\n// Seat cushion with mystical symbols\nmodule seat() {\n    // Base seat\n    difference() {\n        cylinder(h=30, d=seat_diameter, $fn=64);\n        translate([0, 0, 25])\n            cylinder(h=10, d=seat_diameter-20, $fn=64);\n    }\n    \n    // Embossed magical symbols on seat surface\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([seat_diameter/2-40, 0, 28])\n        rotate([90, 0, 0])\n        linear_extrude(height=2)\n        text(\"⚡\", size=20, halign=\"center\");\n    }\n}\n\n// Turned leg with mystical runes\nmodule leg() {\n    // Main leg shaft\n    difference() {\n        cylinder(h=stool_height-50, d=leg_thickness*2, $fn=32);\n        \n        // Rune grooves\n        for(i=[0:3]) {\n            translate([0, 0, i*60+20])\n            rotate([0, 0, 45])\n            cube([leg_thickness*2, 2, 10], center=true);\n        }\n    }\n    \n    // Decorative rings\n    for(i=[0:3]) {\n        translate([0, 0, i*60])\n        cylinder(h=5, d=leg_thickness*2.2, $fn=32);\n    }\n    \n    // Tapered foot\n    translate([0, 0, stool_height-50])\n    cylinder(h=30, d1=leg_thickness*2, d2=leg_thickness*3, $fn=32);\n}\n\n// Mystical rung with carved details\nmodule rung(height, diameter) {\n    difference() {\n        cylinder(h=leg_thickness, d=diameter, $fn=64);\n        \n        // Carved spiral pattern\n        for(i=[0:20]) {\n            rotate([0, 0, i*18])\n            translate([diameter/2-3, -leg_thickness/2, -1])\n            cube([6, leg_thickness+2, leg_thickness+2]);\n        }\n    }\n}\n\n// Base support ring with arcane symbols\nmodule base_ring() {\n    difference() {\n        cylinder(h=base_ring_height, d=seat_diameter-40, $fn=128);\n        cylinder(h=base_ring_height+2, d=seat_diameter-80, $fn=64);\n    }\n    \n    // Mystical protrusions\n    for(i=[0:8]) {\n        rotate([0, 0, i*45])\n        translate([(seat_diameter-40)/2-10, 0, base_ring_height/2])\n        rotate([0, 90, 0])\n        cylinder(h=20, d=10, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0, 0, stool_height-30])\n    seat();\n    \n    // Legs\n    for(i=[0:3]) {\n        rotate([0, 0, i*90+45])\n        translate([seat_diameter/2-40, 0, 0])\n        leg();\n    }\n    \n    // Rungs between legs\n    for(i=[0:rungs-1]) {\n        height = (stool_height-50)/rungs*i + 30;\n        diameter = sqrt(pow(seat_diameter-80, 2)/2);\n        translate([0, 0, height])\n        rung(height, diameter);\n    }\n    \n    // Base ring for stability\n    translate([0, 0, 15])\n    base_ring();\n    \n    // Central crystal holder\n    difference() {\n        translate([0, 0, 30])\n        cylinder(h=40, d=50, $fn=32);\n        translate([0, 0, 35])\n        sphere(d=45, $fn=32);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "sorcerer",
    "openscad_code": "// Sorcerer's Spellbook Pedestal - Medium Complexity\n// Realistic style furniture piece for sorcerer theme\n\n$fn = 32;\n\n// Global dimensions\npedestal_height = 100;\npedestal_width = 80;\npedestal_depth = 60;\nwall_thickness = 2;\n\nmodule base_platform() {\n    // Main platform base with rounded corners\n    difference() {\n        // Main block\n        translate([0, 0, 5])\n            cube([pedestal_width, pedestal_depth, 10], center=true);\n        \n        // Rounded edges via subtraction\n        for (x = [-1, 1])\n            for (y = [-1, 1])\n                translate([x * pedestal_width/2, y * pedestal_depth/2, 5])\n                    sphere(r=10);\n    }\n    \n    // Decorative base trim\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([pedestal_width/2 - 5, 0, 2])\n                cylinder(h=6, r1=5, r2=3);\n    }\n}\n\nmodule central_pillar() {\n    // Main support pillar\n    cylinder(h=70, r1=25, r2=20);\n    \n    // Reinforcement rings\n    for (h = [15, 35, 55]) {\n        translate([0, 0, h])\n            cylinder(h=3, r1=28, r2=28);\n    }\n    \n    // Magical rune carvings\n    for (angle = [0:60:300]) {\n        rotate([0, 0, angle])\n            translate([0, 22, 35])\n                cube([3, 4, 30], center=true);\n    }\n}\n\nmodule book_rest() {\n    // Slanted book rest surface\n    rotate([15, 0, 0])\n        translate([0, 0, 70])\n            cube([60, 40, 3], center=true);\n    \n    // Book stops\n    translate([28, 0, 77])\n        cube([4, 40, 8]);\n    translate([-28, 0, 77])\n        cube([4, 40, 8]);\n    \n    // Page holder clips\n    for (x = [-20, 20]) {\n        translate([x, -15, 79])\n            difference() {\n                cube([4, 4, 2]);\n                translate([2, 2, -1])\n                    sphere(r=1.5);\n            }\n    }\n}\n\nmodule crystal_holder() {\n    // Crystal mounting bracket\n    translate([0, 25, 85])\n        rotate([45, 0, 0])\n            difference() {\n                cylinder(h=15, r1=8, r2=6);\n                translate([0, 0, -1])\n                    cylinder(h=17, r1=6, r2=4);\n            }\n    \n    // Support arms\n    for (angle = [0:120:240]) {\n        rotate([0, 0, angle])\n            translate([15, 0, 82])\n                cube([20, 3, 3], center=true);\n    }\n}\n\nmodule decorative_details() {\n    // Side scrollwork\n    for (side = [-1, 1]) {\n        translate([side * 40, 0, 25])\n            rotate([0, 90, 0])\n                for (i = [0:5]) {\n                    translate([0, 0, i * 5])\n                        rotate([0, 0, sin(i * 30) * 15])\n                            cube([2, 2, 4], center=true);\n                }\n    }\n    \n    // Bottom feet\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * 35, y * 25, 0])\n                cylinder(h=5, r1=6, r2=4);\n}\n\n// Main assembly\nunion() {\n    base_platform();\n    \n    translate([0, 0, 10])\n        central_pillar();\n    \n    book_rest();\n    \n    crystal_holder();\n    \n    decorative_details();\n}",
    "renders": true
  },
  {
    "sports_equipment": "archer",
    "openscad_code": "// Archer Furniture - Bow Rack with Arrow Storage\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Overall dimensions\nrack_length = 120;\nrack_height = 80;\nrack_depth = 40;\nwall_thickness = 2;\n\nmodule bow_rack_base() {\n    // Main base platform\n    translate([0, 0, 0])\n        cube([rack_length, rack_depth, wall_thickness], center=true);\n    \n    // Front lip to prevent items from sliding\n    translate([0, rack_depth/2 - wall_thickness/2, rack_height/4])\n        cube([rack_length, wall_thickness, rack_height/2], center=true);\n    \n    // Side supports\n    for(side = [-1, 1]) {\n        translate([side * (rack_length/2 - wall_thickness/2), 0, rack_height/2])\n            cube([wall_thickness, rack_depth, rack_height], center=true);\n    }\n}\n\nmodule bow_hooks() {\n    // Two bow hooks with protective padding\n    for(pos = [-rack_length/3, rack_length/3]) {\n        // Hook base\n        translate([pos, 0, rack_height - 10])\n            rotate([90, 0, 0])\n                cylinder(h=15, r1=5, r2=3);\n        \n        // Hook arm\n        translate([pos, 7, rack_height - 10])\n            rotate([90, 0, 90])\n                cylinder(h=10, r=3);\n        \n        // Protective pad\n        translate([pos, 10, rack_height - 10])\n            sphere(r=4);\n    }\n}\n\nmodule arrow_holder() {\n    // Arrow tube storage\n    translate([-rack_length/2 + 15, 0, rack_height/2])\n        cylinder(h=rack_height, r=10);\n    \n    // Arrow separator grid\n    for(i = [-2:2]) {\n        for(j = [-1:1]) {\n            translate([-rack_length/2 + 15 + i*3, j*3, rack_height/2])\n                cylinder(h=rack_height, r=1);\n        }\n    }\n}\n\nmodule mounting_holes() {\n    // Wall mounting holes\n    for(pos = [-rack_length/3, rack_length/3]) {\n        translate([pos, -rack_depth/2, rack_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=10, r=3);\n    }\n}\n\nmodule non_slip_pads() {\n    // Rubber feet\n    for(x = [-rack_length/2 + 10, rack_length/2 - 10])\n    for(y = [-rack_depth/2 + 10, rack_depth/2 - 10]) {\n        translate([x, y, -wall_thickness/2 - 1])\n            cylinder(h=2, r=5);\n    }\n}\n\n// Assembly\nunion() {\n    bow_rack_base();\n    bow_hooks();\n    arrow_holder();\n    non_slip_pads();\n    \n    // Remove mounting holes\n    difference() {\n        cube([0,0,0]); // Placeholder for union\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "ranger",
    "openscad_code": "// Ranger chair - realistic style with medium complexity\n// Overall dimensions: 80mm wide x 75mm deep x 90mm tall\n\n// Parameters\nleg_width = 4;\nseat_thickness = 3;\nback_thickness = 3;\narmrest_height = 65;\narmrest_width = 6;\nstretcher_height = 20;\nslat_width = 6;\nslat_gap = 3;\n\n// Main seat frame\nmodule seat_frame() {\n    // Seat platform\n    difference() {\n        cube([80, 75, seat_thickness], center=true);\n        \n        // Lightening holes\n        for(x = [-30, -10, 10, 30])\n            for(y = [-25, -5, 15])\n                translate([x, y, 0])\n                    cylinder(h=seat_thickness+1, r=3, center=true);\n    }\n}\n\n// Backrest with slats\nmodule backrest() {\n    translate([0, 27.5, 45])\n        difference() {\n            // Back frame\n            cube([80, back_thickness, 85], center=true);\n            \n            // Slat grooves\n            for(y = [-35, -20, -5, 10, 25])\n                translate([0, y, 0])\n                    cube([60, back_thickness+1, slat_width], center=true);\n        }\n}\n\n// Leg assembly\nmodule leg_assembly() {\n    // Front left leg\n    translate([-36, -33.5, -45])\n        cube([leg_width, leg_width, 90]);\n    \n    // Front right leg\n    translate([36, -33.5, -45])\n        cube([leg_width, leg_width, 90]);\n    \n    // Rear left leg with angle\n    translate([-36, 33.5, -45])\n        rotate([0, 10, 0])\n            cube([leg_width, leg_width, 90]);\n    \n    // Rear right leg with angle\n    translate([36, 33.5, -45])\n        rotate([0, -10, 0])\n            cube([leg_width, leg_width, 90]);\n    \n    // Front stretcher\n    translate([0, -33.5, -stretcher_height])\n        cube([72, leg_width, leg_width]);\n    \n    // Side stretchers\n    translate([-36, 0, -stretcher_height])\n        cube([leg_width, 67, leg_width]);\n    translate([36, 0, -stretcher_height])\n        cube([leg_width, 67, leg_width]);\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-45, 0, armrest_height])\n        difference() {\n            // Main armrest\n            cube([armrest_width, 50, 4]);\n            \n            // Ergonomic curve\n            translate([-3, 15, -2])\n                rotate([10, 0, 0])\n                    cube([armrest_width+6, 20, 8]);\n        }\n    \n    // Right armrest\n    mirror([1, 0, 0])\n        translate([-45, 0, armrest_height])\n            difference() {\n                cube([armrest_width, 50, 4]);\n                translate([-3, 15, -2])\n                    rotate([10, 0, 0])\n                        cube([armrest_width+6, 20, 8]);\n            }\n    \n    // Armrest supports\n    translate([-45, -25, 22.5])\n        cube([armrest_width, leg_width, 45]);\n    translate([45, -25, 22.5])\n        cube([armrest_width, leg_width, 45]);\n}\n\n// Back slats\nmodule back_slats() {\n    for(y = [-35, -20, -5, 10, 25]) {\n        translate([0, 27.5+y, 45])\n            cube([60, back_thickness, slat_width], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    leg_assembly();\n    seat_frame();\n    backrest();\n    back_slats();\n    armrests();\n}",
    "renders": true
  },
  {
    "sports_equipment": "spy",
    "openscad_code": "// SPY DESK LAMP WITH HIDDEN CAMERA\n// Realistic desk lamp with concealed pinhole camera in the shade\n\n// Main dimensions (mm)\nlamp_height = 120;\nbase_d = 80;\nbase_h = 8;\npole_d = 12;\npole_h = 90;\nshade_d = 70;\nshade_h = 40;\nwall_th = 2;\n\nmodule lamp_base() {\n    // Weighted base with subtle anti-slip ring\n    difference() {\n        cylinder(h = base_h, d = base_d, $fn = 64);\n        translate([0, 0, base_h - wall_th]) \n            cylinder(h = wall_th + 0.1, d = base_d - 2*wall_th, $fn = 64);\n    }\n    \n    // Cable exit hole at rear\n    translate([0, base_d/2 - 5, base_h/2]) rotate([90, 0, 0])\n        cylinder(h = 10, d = 6, $fn = 20);\n}\n\nmodule lamp_pole() {\n    // Hollow aluminum pole\n    difference() {\n        cylinder(h = pole_h, d = pole_d, $fn = 32);\n        translate([0, 0, -0.1]) \n            cylinder(h = pole_h + 0.2, d = pole_d - 2*wall_th, $fn = 32);\n    }\n    \n    // Joint connector detail\n    translate([0, 0, pole_h - 5]) \n        cylinder(h = 10, d = 16, $fn = 32);\n}\n\nmodule lamp_shade() {\n    // Classic conical shade with hidden camera\n    difference() {\n        cylinder(h1 = shade_h, h2 = shade_h, d1 = shade_d, d2 = shade_d - 20, $fn = 64);\n        \n        // Inner cavity for light bulb\n        translate([0, 0, wall_th]) \n            cylinder(h1 = shade_h - wall_th, h2 = shade_h - wall_th, \n                     d1 = shade_d - 2*wall_th, d2 = shade_d - 20 - 2*wall_th, $fn = 64);\n        \n        // Pinhole camera opening (front)\n        translate([0, shade_d/2 - 5, shade_h - 10]) \n            rotate([90, 0, 0]) cylinder(h = 3, d = 1.5, $fn = 16);\n    }\n    \n    // Internal camera mount\n    translate([0, shade_d/2 - 10, shade_h - 15]) \n        cube([4, 8, 6], center = true);\n}\n\nmodule lamp_switch() {\n    // Inline switch on pole\n    translate([0, pole_d/2 + 3, pole_h/2]) \n        rotate([90, 0, 0]) \n        difference() {\n            cylinder(h = 12, d = 10, $fn = 32);\n            cylinder(h = 12, d = 6, $fn = 32);\n        }\n}\n\nmodule cable() {\n    // Power cable from base to joint\n    color(\"black\")\n    hull() {\n        translate([0, base_d/2 - 5, base_h/2]) sphere(d = 4);\n        translate([0, pole_d/2, pole_h - 5]) sphere(d = 4);\n    }\n}\n\n// Assembly\nlamp_base();\ntranslate([0, 0, base_h]) lamp_pole();\ntranslate([0, 0, base_h + pole_h]) rotate([30, 0, 0]) lamp_shade();\nlamp_switch();\ncable();",
    "renders": true
  },
  {
    "sports_equipment": "agent",
    "openscad_code": "// Agent Desk Chair - Realistic Style, Medium Complexity\n// Overall size: ~120mm height, 100mm width, 100mm depth\n// Wall thickness: 2mm throughout for 3D printing\n\n// Parameters\nseat_diameter = 60;\nseat_thickness = 4;\nback_height = 50;\nback_width = 50;\nback_thickness = 3;\narmrest_height = 20;\narmrest_width = 8;\narmrest_length = 30;\nbase_radius = 40;\nbase_height = 8;\npole_radius = 4;\npole_height = 40;\nwheel_radius = 8;\nwheel_width = 4;\ncaster_stem_length = 15;\n\n// Main chair module\nmodule desk_chair() {\n    union() {\n        // Seat cushion\n        translate([0, 0, pole_height + base_height + seat_thickness/2])\n            cylinder(h = seat_thickness, r = seat_diameter/2, $fn = 64);\n        \n        // Backrest\n        translate([0, -seat_diameter/2 + back_thickness/2, pole_height + base_height + seat_thickness + back_height/2])\n            rotate([15, 0, 0])\n            cube([back_width, back_thickness, back_height], center = true);\n            \n        // Backrest support pole\n        translate([0, -seat_diameter/2 + back_thickness/2 + 2, pole_height + base_height + seat_thickness + back_height/2 - 10])\n            cylinder(h = back_height - 5, r = 3, $fn = 32);\n        \n        // Armrests\n        // Left armrest\n        translate([-seat_diameter/2 - armrest_width/2, 0, pole_height + base_height + seat_thickness + armrest_height/2])\n            cube([armrest_width, armrest_length, armrest_height], center = true);\n            \n        // Right armrest\n        translate([seat_diameter/2 + armrest_width/2, 0, pole_height + base_height + seat_thickness + armrest_height/2])\n            cube([armrest_width, armrest_length, armrest_height], center = true);\n            \n        // Central pole\n        translate([0, 0, pole_height/2 + base_height])\n            cylinder(h = pole_height, r = pole_radius, $fn = 32);\n            \n        // Star base\n        translate([0, 0, base_height/2])\n            base_with_casters();\n    }\n}\n\n// Star base with 5 casters\nmodule base_with_casters() {\n    union() {\n        // Central hub\n        cylinder(h = base_height, r = base_radius/3, $fn = 32);\n        \n        // Star legs\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([base_radius/2, 0, base_height/2])\n                cube([base_radius, 12, base_height], center = true);\n                \n            // Caster wheels\n            rotate([0, 0, i * 72])\n            translate([base_radius - wheel_radius, 0, -caster_stem_length/2])\n                caster_wheel();\n        }\n    }\n}\n\n// Individual caster wheel\nmodule caster_wheel() {\n    union() {\n        // Stem\n        cylinder(h = caster_stem_length, r = 3, $fn = 16);\n        \n        // Wheel yoke\n        translate([0, 0, -caster_stem_length - wheel_width/2])\n            difference() {\n                cube([wheel_width + 4, 12, wheel_width + 4], center = true);\n                cube([wheel_width + 8, 8, wheel_width + 8], center = true);\n            }\n            \n        // Wheel\n        translate([0, 0, -caster_stem_length - wheel_width/2 - 2])\n            rotate([90, 0, 0])\n            cylinder(h = wheel_width, r = wheel_radius, $fn = 32);\n    }\n}\n\n// Generate the chair\ndesk_chair();",
    "renders": true
  },
  {
    "sports_equipment": "soldier",
    "openscad_code": "// Soldier Chair – OpenSCAD – 2024\n// A compact chair inspired by WWII-era military folding stools.\n// Overall footprint ≈ 170 mm × 190 mm × 220 mm (folded height 30 mm)\n// Wall thickness 2 mm everywhere for reliable 3-D printing.\n\n// GLOBAL PARAMETERS\nseat_w = 170;     // seat width\nseat_d = 190;     // seat depth\nseat_t = 8;       // seat board thickness\nleg_len = 210;    // leg length\nleg_ang = 75;     // splay angle (deg)\nwall = 2;         // uniform wall / strut thickness\ndia = 8;          // rivet / pivot diameter\nrivet_h = 6;\n\n// ---------- HELPERS ----------\nmodule rivet() {\n    cylinder(h = rivet_h, d = dia, $fn = 12);\n}\n\n// ---------- SEAT PANEL ----------\nmodule seat_panel() {\n    difference() {\n        // main board\n        translate([0, 0, seat_t/2])\n            cube([seat_w, seat_d, seat_t], center = true);\n        // lightening slots (longitudinal)\n        for (y = [-seat_d/2 + 20 : 40 : seat_d/2 - 20])\n            translate([0, y, 0])\n                cube([seat_w - 2*wall, 20, seat_t + 0.1], center = true);\n        // hand-grip hole\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h = seat_t + 0.1, d = 30, $fn = 32);\n    }\n}\n\n// ---------- SINGLE LEG ----------\nmodule leg() {\n    difference() {\n        // main tube\n        rotate([90, 0, 0])\n            cylinder(h = leg_len, d = 12, $fn = 20);\n        // lower foot – chamfer\n        translate([0, 0, -leg_len/2])\n            rotate([0, 180, 0])\n                cylinder(h = 10, d1 = 14, d2 = 8, $fn = 20);\n    }\n}\n\n// ---------- LEG FRAME (PAIR) ----------\nmodule leg_frame(side = 1) {\n    // pivot plate on seat\n    translate([side * seat_w/2 - wall/2, 0, seat_t/2])\n        cube([wall, 30, 20], center = true);\n    // legs\n    for (x = [-seat_w/2 + 20, seat_w/2 - 20]) {\n        translate([x, 0, 0])\n            rotate([0, side * leg_ang, 0])\n                leg();\n        // pivot rivet\n        translate([x, 0, seat_t/2 + 10])\n            rivet();\n    }\n    // stretcher bar\n    stretcher_y = cos(leg_ang) * leg_len * 0.5;\n    translate([0, stretcher_y * side, -leg_len/2 + 15])\n        rotate([90, 0, 0])\n            cylinder(h = seat_w - 40, d = 10, $fn = 20);\n}\n\n// ---------- BACKREST ----------\nmodule backrest() {\n    // backrest uprights\n    for (x = [-seat_w/2 + 20, seat_w/2 - 20]) {\n        translate([x, seat_d/2 - 15, seat_t/2 + 100])\n            rotate([90, 0, 0])\n                cylinder(h = 200, d = 10, $fn = 20);\n    }\n    // backrest canvas\n    color(\"olive\")\n    translate([0, seat_d/2 - 15, seat_t/2 + 100])\n        cube([seat_w - 40, 5, 180], center = true);\n}\n\n// ---------- ASSEMBLY ----------\nunion() {\n    seat_panel();\n    leg_frame(1);   // left\n    leg_frame(-1);  // right\n    backrest();\n}",
    "renders": true
  },
  {
    "sports_equipment": "marine",
    "openscad_code": "// Marine Navigation Chair\n// A realistic ship's helmsman chair with pedestal mount\n// Overall height: 120mm, seat height: 70mm\n\n$fn = 32;\n\n// Main assembly\nmodule marine_chair() {\n    // Pedestal base\n    difference() {\n        union() {\n            // Base plate\n            cylinder(h=8, d=80);\n            \n            // Pedestal tube\n            translate([0, 0, 8])\n                cylinder(h=60, d1=60, d2=40);\n        }\n        \n        // Weight reduction holes\n        for(i = [0:120:359]) {\n            rotate([0, 0, i])\n                translate([20, 0, 4])\n                    cylinder(h=10, d=8);\n        }\n    }\n    \n    // Swivel mechanism\n    translate([0, 0, 68])\n        difference() {\n            cylinder(h=12, d=50);\n            cylinder(h=14, d=20);\n        }\n    \n    // Seat base\n    translate([0, 0, 80])\n        difference() {\n            // Main seat pan\n            scale([1.2, 1, 0.4])\n                sphere(d=60);\n            \n            // Bottom cavity\n            translate([0, 0, -5])\n                scale([1.1, 0.9, 1])\n                    sphere(d=50);\n        }\n    \n    // Seat cushion\n    translate([0, 0, 82])\n        difference() {\n            scale([1.15, 0.95, 0.3])\n                sphere(d=60);\n            \n            // Tufted surface pattern\n            for(x = [-15, 0, 15]) {\n                for(y = [-12, 0, 12]) {\n                    translate([x, y, 1])\n                        sphere(d=4);\n                }\n            }\n        }\n    \n    // Backrest post\n    translate([0, -20, 85])\n        rotate([15, 0, 0])\n            cylinder(h=40, d1=20, d2=15);\n    \n    // Backrest\n    translate([0, -35, 115])\n        rotate([15, 0, 0])\n            difference() {\n                // Main backrest\n                scale([1.3, 0.3, 1.2])\n                    sphere(d=50);\n                \n                // Lumbar cutout\n                translate([0, -5, -10])\n                    scale([0.8, 1, 0.7])\n                        sphere(d=40);\n            }\n    \n    // Armrest supports\n    translate([25, 0, 85])\n        cylinder(h=20, d=8);\n    translate([-25, 0, 85])\n        cylinder(h=20, d=8);\n    \n    // Armrests\n    translate([25, 10, 105])\n        rotate([0, 20, 0])\n            scale([1, 0.3, 0.3])\n                sphere(d=30);\n    translate([-25, 10, 105])\n        rotate([0, -20, 0])\n            scale([1, 0.3, 0.3])\n                sphere(d=30);\n    \n    // Mounting bolts (decorative)\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n            translate([35, 0, 0])\n                difference() {\n                    cylinder(h=10, d=12);\n                    cylinder(h=12, d=6);\n                }\n    }\n}\n\nmarine_chair();",
    "renders": true
  },
  {
    "sports_equipment": "pilot",
    "openscad_code": "// Pilot Chair - Realistic Style, Medium Complexity\n// Inspired by classic aviation pilot seats with proper proportions and structural details\n\n$fn = 50;\nwall_thickness = 2;\n\nmodule seat_frame() {\n    // Main seat frame base\n    difference() {\n        // Outer frame\n        cube([80, 70, 8]);\n        // Hollow center\n        translate([wall_thickness, wall_thickness, -1])\n            cube([80-wall_thickness*2, 70-wall_thickness*2, 10]);\n    }\n}\n\nmodule seat_back() {\n    // Curved backrest\n    translate([0, 0, 8]) {\n        difference() {\n            // Main backrest\n            translate([5, 5, 0])\n                cube([70, 60, 45]);\n            // Contour cutout\n            translate([15, 15, 5])\n                cube([50, 40, 40]);\n            // Air vent holes\n            for(i = [1:3]) {\n                translate([20 + i*15, 30, 25])\n                    rotate([0, 90, 0])\n                        cylinder(h=10, d=6);\n            }\n        }\n        \n        // Reinforcement ribs\n        for(i = [0:3]) {\n            translate([10 + i*20, 0, 0])\n                cube([2, 70, 45]);\n        }\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-5, 0, 15]) {\n        difference() {\n            cube([10, 70, 5]);\n            translate([5, 5, -1])\n                cube([wall_thickness, 60, 7]);\n        }\n        // Support strut\n        translate([2, 30, -13])\n            cube([6, 10, 15]);\n    }\n    \n    // Right armrest (mirrored)\n    translate([75, 0, 15]) {\n        mirror([1, 0, 0]) {\n            difference() {\n                cube([10, 70, 5]);\n                translate([5, 5, -1])\n                    cube([wall_thickness, 60, 7]);\n            }\n            // Support strut\n            translate([2, 30, -13])\n                cube([6, 10, 15]);\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Main cushion\n    translate([5, 5, 8]) {\n        difference() {\n            cube([70, 60, 8]);\n            translate([wall_thickness, wall_thickness, -1])\n                cube([70-wall_thickness*2, 60-wall_thickness*2, 10]);\n        }\n        \n        // Cushion tufting\n        for(x = [0:2]) {\n            for(y = [0:1]) {\n                translate([15 + x*25, 15 + y*30, 7.5])\n                    cylinder(h=2, d=8);\n            }\n        }\n    }\n}\n\nmodule adjustment_lever() {\n    // Side lever mechanism\n    translate([-8, 60, 15]) {\n        // Lever base\n        cylinder(h=10, d=8);\n        // Lever arm\n        translate([0, 0, 10])\n            rotate([0, 0, 45])\n                cube([5, 30, 3]);\n    }\n}\n\nmodule headrest() {\n    // Pilot headrest\n    translate([30, 30, 50]) {\n        difference() {\n            // Main headrest\n            cube([20, 30, 15]);\n            // Contoured shape\n            translate([2, 2, 2])\n                cube([16, 26, 11]);\n        }\n        // Support post\n        translate([8, 12, -10])\n            cube([4, 6, 10]);\n    }\n}\n\nmodule seat_belt_mounts() {\n    // Belt anchor points\n    for(pos = [[10, 5, 20], [60, 5, 20]]) {\n        translate(pos)\n            cylinder(h=8, d=6);\n        translate([pos[0], pos[1], pos[2] + 8])\n            sphere(d=8);\n    }\n}\n\n// Assembly\nunion() {\n    seat_frame();\n    seat_back();\n    armrests();\n    seat_cushion();\n    adjustment_lever();\n    headrest();\n    seat_belt_mounts();\n}",
    "renders": true
  },
  {
    "sports_equipment": "captain",
    "openscad_code": "// Captain Chair - Realistic Style, Medium Complexity\n// Dimensions: 120mm height, 70mm width, 65mm depth\n\n$fn = 32;\n\nmodule chair_leg(x, y) {\n    translate([x, y, 0]) {\n        // Main leg post\n        cylinder(h = 100, d = 8);\n        \n        // Foot base\n        translate([0, 0, -2]) \n            cylinder(h = 4, d = 12);\n    }\n}\n\nmodule armrest() {\n    difference() {\n        // Main armrest\n        translate([-5, 0, 0])\n            cube([60, 8, 4]);\n        \n        // Rounded edge\n        translate([50, 4, 2])\n            rotate([0, 90, 0])\n                cylinder(h = 8, d = 4);\n    }\n}\n\nmodule back_support() {\n    // Central back post\n    translate([0, 0, 0])\n        cube([6, 4, 50]);\n    \n    // Horizontal support bars\n    for(z = [10:15:45]) {\n        translate([-25, -2, z])\n            cube([56, 4, 2]);\n    }\n    \n    // Decorative top piece\n    translate([0, -2, 50])\n        cube([40, 4, 8]);\n}\n\nmodule seat_cushion() {\n    difference() {\n        // Main cushion\n        translate([-30, -30, 0])\n            cube([60, 60, 8]);\n        \n        // Rounded edges\n        for(x = [-30, 30]) {\n            for(y = [-30, 30]) {\n                translate([x, y, 0])\n                    sphere(d = 8);\n            }\n        }\n    }\n}\n\nmodule captain_chair() {\n    // Four legs\n    chair_leg(-25, -25);\n    chair_leg(25, -25);\n    chair_leg(-25, 25);\n    chair_leg(25, 25);\n    \n    // Seat assembly\n    translate([0, 0, 100])\n        seat_cushion();\n    \n    // Backrest assembly\n    translate([0, 25, 108])\n        back_support();\n    \n    // Armrests\n    translate([-35, 0, 108])\n        armrest();\n    mirror([1, 0, 0])\n        translate([-35, 0, 108])\n            armrest();\n    \n    // Cross support bars\n    translate([0, 0, 50])\n        cube([50, 2, 5]);\n    translate([0, 0, 50])\n        rotate([0, 0, 90])\n            cube([50, 2, 5]);\n    \n    // Decorative wheel base\n    translate([0, 0, -5])\n        cylinder(h = 5, d = 60);\n    \n    // Five caster wheels\n    for(i = [0:72:360]) {\n        rotate([0, 0, i])\n            translate([25, 0, -10])\n                sphere(d = 8);\n    }\n}\n\n// Render the complete chair\ncaptain_chair();",
    "renders": true
  },
  {
    "sports_equipment": "commander",
    "openscad_code": "// Commander Desk - Realistic Style, Medium Complexity\n// Dimensions: 120mm W x 60mm D x 75mm H\n\n$fn = 32;\n\nmodule desk() {\n    difference() {\n        // Main desktop\n        translate([0, 0, 74]) cube([120, 60, 2], center=true);\n        \n        // Cable management hole\n        translate([0, 20, 75]) cylinder(h=3, r=6);\n    }\n    \n    // Front drawer section\n    difference() {\n        translate([0, 10, 60]) cube([80, 40, 14], center=true);\n        \n        // Drawers\n        for(i = [-1, 1]) {\n            translate([i * 20, 10, 67]) cube([18, 38, 6], center=true);\n            \n            // Drawer handles\n            translate([i * 20, 10, 71]) cube([10, 2, 1], center=true);\n        }\n    }\n    \n    // Side cabinets\n    difference() {\n        translate([-50, 0, 37]) cube([20, 58, 74], center=true);\n        \n        // Cabinet doors\n        translate([-50, -15, 35]) cube([18, 28, 70], center=true);\n        translate([-50, 15, 35]) cube([18, 28, 70], center=true);\n        \n        // Door handles\n        translate([-40, -15, 50]) cube([2, 8, 1], center=true);\n        translate([-40, 15, 50]) cube([2, 8, 1], center=true);\n    }\n    \n    difference() {\n        translate([50, 0, 37]) cube([20, 58, 74], center=true);\n        \n        // Cabinet doors\n        translate([50, -15, 35]) cube([18, 28, 70], center=true);\n        translate([50, 15, 35]) cube([18, 28, 70], center=true);\n        \n        // Door handles\n        translate([60, -15, 50]) cube([2, 8, 1], center=true);\n        translate([60, 15, 50]) cube([2, 8, 1], center=true);\n    }\n    \n    // Legs\n    for(x = [-50, 50])\n    for(y = [-25, 25]) {\n        translate([x, y, 37]) cube([4, 4, 74], center=true);\n    }\n    \n    // Back panel\n    translate([0, 30, 37]) cube([120, 2, 74], center=true);\n    \n    // Keyboard tray slides\n    translate([0, -20, 55]) cube([60, 2, 2], center=true);\n    translate([0, -20, 45]) cube([60, 2, 2], center=true);\n}\n\ndesk();",
    "renders": true
  },
  {
    "sports_equipment": "trooper",
    "openscad_code": "// Trooper Chair - Realistic Style, Medium Complexity\n// A sturdy outdoor chair inspired by military/trooper design\n// Dimensions: 400mm height x 400mm width x 400mm depth\n\n$fn = 50;\nwall_thickness = 2;\n\n// Main module\nmodule trooper_chair() {\n    // Chair frame\n    union() {\n        // Seat frame\n        seat_frame();\n        \n        // Backrest frame\n        backrest_frame();\n        \n        // Leg structure\n        legs();\n        \n        // Support bars\n        support_bars();\n        \n        // Armrests\n        armrests();\n        \n        // Seat surface\n        seat_surface();\n        \n        // Backrest surface\n        backrest_surface();\n    }\n}\n\n// Seat frame - rectangular frame\nmodule seat_frame() {\n    translate([0, 0, 200]) {\n        difference() {\n            // Outer frame\n            cube([400, 400, 20], center = true);\n            // Inner cutout\n            cube([360, 360, 25], center = true);\n        }\n    }\n}\n\n// Backrest frame - slightly angled\nmodule backrest_frame() {\n    translate([0, -180, 350]) {\n        rotate([105, 0, 0]) {\n            difference() {\n                // Outer frame\n                cube([400, 20, 400], center = true);\n                // Inner cutout\n                cube([360, 25, 360], center = true);\n            }\n        }\n    }\n}\n\n// Leg structure - 4 legs with reinforcement\nmodule legs() {\n    // Front left leg\n    translate([-180, 180, 100]) {\n        leg();\n    }\n    \n    // Front right leg\n    translate([180, 180, 100]) {\n        leg();\n    }\n    \n    // Back left leg\n    translate([-180, -180, 100]) {\n        leg();\n    }\n    \n    // Back right leg\n    translate([180, -180, 100]) {\n        leg();\n    }\n}\n\n// Single leg with reinforcement ribs\nmodule leg() {\n    difference() {\n        // Main leg post\n        cube([40, 40, 200], center = true);\n        // Hollow center\n        cube([36, 36, 200], center = true);\n    }\n    \n    // Reinforcement ribs\n    for(i = [-1, 1]) {\n        translate([i * 20, 0, 0]) {\n            rotate([0, 90, 0]) {\n                cube([5, 20, 40], center = true);\n            }\n        }\n        translate([0, i * 20, 0]) {\n            rotate([90, 0, 0]) {\n                cube([20, 5, 40], center = true);\n            }\n        }\n    }\n}\n\n// Support bars between legs\nmodule support_bars() {\n    // Front support\n    translate([0, 180, 100]) {\n        cube([320, wall_thickness, 20], center = true);\n    }\n    \n    // Back support\n    translate([0, -180, 100]) {\n        cube([320, wall_thickness, 20], center = true);\n    }\n    \n    // Left support\n    translate([-180, 0, 100]) {\n        cube([wall_thickness, 360, 20], center = true);\n    }\n    \n    // Right support\n    translate([180, 0, 100]) {\n        cube([wall_thickness, 360, 20], center = true);\n    }\n}\n\n// Armrests with rounded edges\nmodule armrests() {\n    // Left armrest\n    translate([-220, 0, 280]) {\n        armrest();\n    }\n    \n    // Right armrest\n    translate([220, 0, 280]) {\n        mirror([1, 0, 0]) armrest();\n    }\n}\n\n// Single armrest structure\nmodule armrest() {\n    // Main armrest pad\n    translate([-20, 0, 0]) {\n        cube([80, 200, 20], center = true);\n    }\n    \n    // Support post\n    translate([0, 0, 170]) {\n        cube([20, 20, 100], center = true);\n    }\n    \n    // Bracing\n    translate([0, 100, 210]) {\n        rotate([45, 0, 0]) {\n            cube([20, 20, 120], center = true);\n        }\n    }\n}\n\n// Seat surface with drainage holes\nmodule seat_surface() {\n    translate([0, 0, 210]) {\n        difference() {\n            // Main surface\n            cube([360, 360, wall_thickness], center = true);\n            // Drainage holes pattern\n            for(x = [-120, -40, 40, 120]) {\n                for(y = [-120, -40, 40, 120]) {\n                    translate([x, y, 0]) {\n                        cylinder(h = wall_thickness + 1, r = 5, center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Backrest surface with ventilation slots\nmodule backrest_surface() {\n    translate([0, -180, 350]) {\n        rotate([105, 0, 0]) {\n            difference() {\n                // Main surface\n                cube([360, wall_thickness, 360], center = true);\n                // Ventilation slots\n                for(y = [-140:40:140]) {\n                    translate([0, 0, y]) {\n                        cube([300, wall_thickness + 1, 20], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create the chair\ntrooper_chair();",
    "renders": true
  },
  {
    "sports_equipment": "scout",
    "openscad_code": "// Scout folding stool - realistic style, medium complexity\n// Overall size: 320mm (open) / 160mm (folded) x 300mm x 300mm\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main dimensions\nseat_size = 300;\nseat_thick = 12;\nleg_len = 300;\nleg_dia = 20;\nbrace_dia = 10;\nhinge_dia = 25;\nfabric_thick = 2;\n\nmodule leg_segment(len = leg_len, dia = leg_dia) {\n    // Main leg tube\n    difference() {\n        cylinder(h = len, d = dia, center = true);\n        // Hollow tube for weight reduction\n        translate([0, 0, -len/2 + 2])\n            cylinder(h = len - 4, d = dia - 4, center = false);\n    }\n}\n\nmodule hinge_pin(len = 30, dia = 8) {\n    cylinder(h = len, d = dia, center = true);\n}\n\nmodule seat_fabric() {\n    // Canvas seat with stitched edges\n    color(\"darkolivegreen\")\n    difference() {\n        translate([0, 0, seat_thick/2 + fabric_thick/2])\n            cube([seat_size - 20, seat_size - 20, fabric_thick], center = true);\n        \n        // Ventilation holes pattern\n        for (x = [-120:40:120])\n            for (y = [-120:40:120])\n                translate([x, y, 0])\n                    cylinder(h = fabric_thick + 1, d = 8, center = true);\n    }\n}\n\nmodule seat_frame() {\n    // Aluminum frame around fabric\n    color(\"silver\")\n    union() {\n        // Top frame\n        translate([0, 0, seat_thick/2])\n            cube([seat_size, seat_size, seat_thick], center = true);\n        \n        // Rounded edges\n        for (x = [-seat_size/2 + seat_thick/2, seat_size/2 - seat_thick/2])\n            for (y = [-seat_size/2 + seat_thick/2, seat_size/2 - seat_thick/2])\n                translate([x, y, 0])\n                    cylinder(h = seat_thick, d = seat_thick, center = true);\n        \n        // Corner reinforcements\n        for (x = [-seat_size/2 + 15, seat_size/2 - 15])\n            for (y = [-seat_size/2 + 15, seat_size/2 - 15])\n                translate([x, y, -seat_thick/2 - 5])\n                    cylinder(h = 10, d = 30, center = true);\n    }\n}\n\nmodule cross_brace() {\n    // Diagonal brace between legs\n    color(\"silver\")\n    rotate([0, 90, 0])\n        cylinder(h = 220, d = brace_dia, center = true);\n}\n\nmodule leg_assembly(side = 1) {\n    // Complete leg system for one side\n    translate([0, side * (seat_size/2 - leg_dia), 0])\n    rotate([90, 0, 0])\n    union() {\n        // Upper leg segment\n        leg_segment();\n        \n        // Lower leg segment (telescoping)\n        translate([0, 0, leg_len/2 + 50])\n            scale([0.9, 0.9, 0.5])\n                leg_segment();\n        \n        // Foot with rubber pad\n        translate([0, 0, leg_len/2 + 75])\n        union() {\n            cylinder(h = 15, d = 30, center = true);\n            translate([0, 0, 10])\n                cylinder(h = 5, d = 35, center = true);\n        }\n        \n        // Hinge connection to seat\n        translate([0, 0, -leg_len/2 - 15])\n            rotate([90, 0, 0])\n                cylinder(h = 30, d = hinge_dia, center = true);\n    }\n}\n\nmodule support_brace(side = 1) {\n    // Folding support brace\n    color(\"silver\")\n    translate([side * 100, 0, -leg_len/2 + 50])\n    rotate([0, 90, 0])\n    union() {\n        cylinder(h = 120, d = brace_dia, center = true);\n        \n        // Locking mechanism\n        translate([60, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 20, center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Seat assembly\n    translate([0, 0, leg_len/2 + seat_thick/2])\n    union() {\n        seat_frame();\n        seat_fabric();\n    }\n    \n    // Four legs\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * (seat_size/2 - leg_dia), y * (seat_size/2 - leg_dia), 0])\n                leg_assembly(x * y);\n    \n    // Cross braces\n    rotate([0, 0, 45])\n        cross_brace();\n    \n    rotate([0, 0, -45])\n        cross_brace();\n    \n    // Support braces\n    support_brace(1);\n    support_brace(-1);\n    \n    // Carry handle\n    translate([0, seat_size/2 + 20, leg_len/2 + seat_thick/2])\n    rotate([90, 0, 0])\n    union() {\n        cylinder(h = 100, d = 15, center = true);\n        \n        // Handle grips\n        for (i = [-30, 30])\n            translate([i, 0, 0])\n                cylinder(h = 20, d = 18, center = true);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "sniper",
    "openscad_code": "// Sniper-style office chair (realistic, medium complexity)\n// Overall size: ~120mm height, 60mm wide, 70mm deep\n\n// Main seating module\nmodule chair_base() {\n    // Seat cushion - slightly angled back\n    translate([0, 0, 45])\n    rotate([5, 0, 0])\n    cube([50, 55, 8], center=true);\n    \n    // Seat frame structure\n    difference() {\n        translate([0, 0, 42])\n        cube([54, 59, 12], center=true);\n        translate([0, 0, 45])\n        cube([50, 55, 12], center=true);\n    }\n}\n\n// Backrest with ergonomic curve\nmodule backrest() {\n    // Main backrest panel\n    translate([0, -25, 75])\n    rotate([10, 0, 0])\n    cube([45, 8, 55], center=true);\n    \n    // Lumbar support curve\n    translate([0, -21, 65])\n    rotate([10, 0, 0])\n    scale([1, 0.8, 1])\n    sphere(15, $fn=20);\n    \n    // Headrest support\n    translate([0, -28, 105])\n    cylinder(h=15, r=5, center=true);\n    \n    // Headrest\n    translate([0, -30, 115])\n    cube([35, 6, 20], center=true);\n}\n\n// Five-star base with casters\nmodule base() {\n    for(i=[0:72:359]) {\n        rotate([0, 0, i])\n        translate([0, 25, 2])\n        cube([10, 50, 4], center=true);\n    }\n    \n    // Center post\n    translate([0, 0, 25])\n    cylinder(h=45, r1=8, r2=5, center=false);\n    \n    // Gas cylinder housing\n    translate([0, 0, 20])\n    cylinder(h=10, r=10, center=true);\n}\n\n// Armrest modules\nmodule armrest(side) {\n    translate([side*30, 0, 60])\n    union() {\n        // Vertical support\n        cylinder(h=15, r=3, center=true);\n        \n        // Arm pad\n        translate([0, 15, 8])\n        rotate([0, 20, 0])\n        cube([25, 8, 4], center=true);\n    }\n}\n\n// Casters\nmodule caster(pos) {\n    translate(pos)\n    union() {\n        // Wheel\n        rotate([90, 0, 0])\n        cylinder(h=4, r=4, center=true);\n        \n        // Stem\n        translate([0, 0, 2])\n        cylinder(h=8, r=2, center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    chair_base();\n    backrest();\n    base();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Casters on star base\n    for(i=[0:72:359]) {\n        rotate([0, 0, i])\n        caster([0, 50, 0]);\n    }\n}\n\n// Reinforcement ribs under seat\nfor(x=[-20:10:20]) {\n    translate([x, 0, 38])\n    cube([2, 55, 4], center=true);\n}",
    "renders": true
  },
  {
    "sports_equipment": "berserker",
    "openscad_code": "// Berserker-style coffee table with battle-worn details\n// Overall dimensions: 100mm x 60mm x 45mm\n\n// Base thickness for 3D printing\nwall = 2;\n\n// Main tabletop with battle damage\nmodule tabletop() {\n    difference() {\n        // Main table surface\n        translate([0, 0, 43])\n            cube([100, 60, wall], center=true);\n        \n        // Battle scar indentations\n        for(i = [0:3]) {\n            rotate([0, 0, i*45])\n                translate([20 + i*10, -15 + i*5, 42])\n                    cube([8, 3, wall+1], center=true);\n        }\n        \n        // Axe impact marks\n        for(i = [0:2]) {\n            rotate([0, 0, 120*i])\n                translate([30, 20, 42])\n                    cylinder(h=wall+1, r1=3, r2=1, center=true);\n        }\n    }\n}\n\n// Reinforced leg structure\nmodule leg(x_pos, y_pos) {\n    difference() {\n        // Main leg post\n        translate([x_pos, y_pos, 22.5])\n            cube([8, 8, 43], center=true);\n        \n        // Decorative recesses\n        for(i = [0:3]) {\n            translate([x_pos, y_pos, 5 + i*10])\n                cube([6, 6, 3], center=true);\n        }\n    }\n    \n    // Metal band reinforcements\n    for(i = [0:2]) {\n        translate([x_pos, y_pos, 10 + i*15])\n            cube([10, 10, wall], center=true);\n    }\n}\n\n// Cross-beam supports with battle damage\nmodule crossbeam() {\n    // Front beam\n    difference() {\n        translate([0, 25, 20])\n            cube([90, 4, 8], center=true);\n        \n        // Notches from weapon strikes\n        for(i = [0:4]) {\n            translate([-35 + i*20, 25, 20])\n                cube([3, 5, 10], center=true);\n        }\n    }\n    \n    // Side beams\n    rotate([0, 0, 90])\n        translate([0, 35, 20])\n            cube([50, 4, 8], center=true);\n}\n\n// Floor protector pads\nmodule foot(x_pos, y_pos) {\n    translate([x_pos, y_pos, 1])\n        cylinder(h=2, r=4, center=true);\n}\n\n// Assembly\nunion() {\n    // Main table components\n    tabletop();\n    \n    // Four legs\n    leg(-40, -25);\n    leg(40, -25);\n    leg(-40, 25);\n    leg(40, 25);\n    \n    // Structural beams\n    crossbeam();\n    \n    // Protective feet\n    foot(-40, -25);\n    foot(40, -25);\n    foot(-40, 25);\n    foot(40, 25);\n}",
    "renders": true
  },
  {
    "sports_equipment": "barbarian",
    "openscad_code": "// BARBARIAN THRONE - Realistic Style, Medium Complexity\n// Dimensions: 90mm width x 80mm depth x 120mm height\n// Wall thickness: 2mm for 3D printability\n\n// Main seat module\nmodule barbarian_throne() {\n    \n    // Throne base - stone-like foundation\n    translate([0, 0, 0]) {\n        cube([90, 80, 8], center = true);\n    }\n    \n    // Rear legs - thick cylindrical posts\n    for (x = [-35, 35]) {\n        translate([x, -25, 4]) {\n            cylinder(h = 90, r = 6, $fn = 16);\n        }\n    }\n    \n    // Front legs - slightly tapered\n    for (x = [-35, 35]) {\n        translate([x, 25, 4]) {\n            cylinder(h1 = 12, r1 = 6, r2 = 8, $fn = 16);\n        }\n    }\n    \n    // Seat - thick rectangular with rounded edges\n    translate([0, 0, 54]) {\n        difference() {\n            cube([80, 70, 12], center = true);\n            translate([0, 0, 6]) {\n                cube([76, 66, 12], center = true);\n            }\n        }\n    }\n    \n    // Backrest - tall and imposing with skull motifs\n    translate([0, -35, 60]) {\n        cube([80, 8, 60], center = true);\n    }\n    \n    // Skull decorations on backrest\n    for (x = [-30, 0, 30]) {\n        translate([x, -31, 90]) {\n            skull_decoration();\n        }\n    }\n    \n    // Armrest supports - thick curved supports\n    for (x = [-45, 45]) {\n        translate([x, 0, 60]) {\n            rotate([0, 0, x > 0 ? 15 : -15]) {\n                cylinder(h = 40, r = 4, $fn = 12);\n            }\n        }\n    }\n    \n    // Armrests - wide and flat\n    for (x = [-55, 55]) {\n        translate([x, 15, 80]) {\n            cube([20, 8, 4], center = true);\n        }\n    }\n    \n    // Reinforcement bars between legs\n    for (z = [20, 40]) {\n        translate([0, 0, z]) {\n            cube([70, 50, 4], center = true);\n        }\n    }\n}\n\n// Skull decoration module\nmodule skull_decoration() {\n    // Main skull shape\n    union() {\n        // Skull top\n        sphere(r = 8, $fn = 16);\n        \n        // Jaw\n        translate([0, -6, -8]) {\n            cube([12, 8, 6], center = true);\n        }\n        \n        // Eye sockets\n        for (x = [-4, 4]) {\n            translate([x, 2, 2]) {\n                difference() {\n                    sphere(r = 3, $fn = 8);\n                    translate([0, 0, 1]) {\n                        sphere(r = 2, $fn = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the throne\nbarbarian_throne();",
    "renders": true
  },
  {
    "sports_equipment": "monk",
    "openscad_code": "// Monk Chair - Realistic Style, Medium Complexity\n// A simple wooden meditation chair (seiza bench) used by monks\n\n// Overall dimensions\nchair_width = 120;\nchair_depth = 200;\nchair_height = 150;\nseat_thickness = 15;\nleg_thickness = 20;\nbackrest_height = 100;\n\n// Wood color\n$fn = 32;\n\n// Main seat platform with rounded edges\nmodule seat() {\n    difference() {\n        // Main seat\n        translate([0, 0, chair_height - seat_thickness/2])\n            rounded_cube([chair_width, chair_depth, seat_thickness], 5);\n        \n        // Groove for leg positioning\n        translate([0, -chair_depth/4, chair_height - 5])\n            cube([chair_width - 40, 5, 10], center=true);\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(size, radius) {\n    hull() {\n        translate([radius, radius, 0])\n            cylinder(h=size.z, r=radius);\n        translate([size.x - radius, radius, 0])\n            cylinder(h=size.z, r=radius);\n        translate([radius, size.y - radius, 0])\n            cylinder(h=size.z, r=radius);\n        translate([size.x - radius, size.y - radius, 0])\n            cylinder(h=size.z, r=radius);\n    }\n    translate([radius, radius, 0])\n        cube([size.x - 2*radius, size.y - 2*radius, size.z]);\n}\n\n// Tapered legs with mortise detail\nmodule leg(x_pos, y_pos) {\n    // Main leg\n    translate([x_pos, y_pos, chair_height/2 - seat_thickness/2])\n        cylinder(h=chair_height - seat_thickness, r1=leg_thickness/2, r2=leg_thickness/2 * 0.8);\n    \n    // Top tenon detail\n    translate([x_pos, y_pos, chair_height - seat_thickness])\n        cylinder(h=10, r=leg_thickness/2 * 0.7);\n    \n    // Bottom foot pad\n    translate([x_pos, y_pos, 5])\n        cylinder(h=10, r=leg_thickness/2 * 1.1);\n}\n\n// Curved backrest with slats\nmodule backrest() {\n    translate([0, -chair_depth/2 + 10, chair_height - seat_thickness + backrest_height/2])\n        rotate([10, 0, 0])\n        union() {\n            // Frame\n            difference() {\n                rounded_cube([chair_width - 20, 15, backrest_height], 3);\n                translate([0, 0, -5])\n                    rounded_cube([chair_width - 30, 17, backrest_height - 10], 2);\n            }\n            \n            // Slats\n            for(i = [-1:1]) {\n                translate([i * 25, 8, 0])\n                    rounded_cube([8, 10, backrest_height - 20], 2);\n            }\n        }\n}\n\n// Side stretchers for stability\nmodule stretcher() {\n    // Front stretcher\n    translate([0, -chair_depth/2 + 30, 40])\n        rounded_cube([chair_width - 40, 15, leg_thickness], 2);\n    \n    // Side stretchers\n    translate([chair_width/2 - 30, 0, 40])\n        rotate([0, 0, 90])\n        rounded_cube([chair_depth - 60, 15, leg_thickness], 2);\n}\n\n// Assembly\nunion() {\n    color(\"BurlyWood\") {\n        seat();\n        \n        // Four legs\n        leg(chair_width/2 - 30, chair_depth/2 - 30);\n        leg(-chair_width/2 + 30, chair_depth/2 - 30);\n        leg(chair_width/2 - 30, -chair_depth/2 + 30);\n        leg(-chair_width/2 + 30, -chair_depth/2 + 30);\n        \n        stretcher();\n    }\n    \n    color(\"SaddleBrown\") {\n        backrest();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "assassin",
    "openscad_code": "// Assassin-style tactical stool\n// Dimensions: 120mm x 120mm x 450mm (L x W x H)\n\n$fn = 32;\n\nmodule leg_support(x, y, angle) {\n    translate([x, y, 60])\n        rotate([0, 0, angle])\n        difference() {\n            // Main support beam\n            cube([80, 8, 4]);\n            // Hidden blade slot\n            translate([35, 2, 0])\n                cube([30, 4, 4]);\n        }\n}\n\nmodule leg() {\n    // Main leg tube\n    difference() {\n        cylinder(h = 380, r1 = 12, r2 = 10);\n        cylinder(h = 380, r1 = 10, r2 = 8);\n    }\n    \n    // Grip pattern\n    for(i = [0:8]) {\n        rotate([0, 0, i * 45])\n        translate([11, 0, 30 + i * 40])\n            cylinder(h = 2, r = 1);\n    }\n    \n    // Foot pad\n    translate([0, 0, -10])\n        cylinder(h = 10, r1 = 15, r2 = 12);\n}\n\nmodule hidden_blade() {\n    // Blade housing\n    translate([0, 0, 60])\n        cube([30, 4, 4]);\n    \n    // Blade (retracted)\n    translate([15, 2, 62])\n        cube([14, 0.5, 0.5]);\n}\n\nmodule seat_top() {\n    // Main seat\n    difference() {\n        cube([120, 120, 8]);\n        translate([10, 10, 4])\n            cube([100, 100, 4]);\n    }\n    \n    // Perimeter ridge\n    translate([0, 0, 8])\n        cube([120, 6, 4]);\n    translate([0, 0, 8])\n        cube([6, 120, 4]);\n    translate([114, 0, 8])\n        cube([6, 120, 4]);\n    translate([0, 114, 8])\n        cube([120, 6, 4]);\n    \n    // Hidden compartment\n    translate([50, 50, -2])\n        cube([20, 20, 6]);\n}\n\n// Assembly\nunion() {\n    // Seat\n    seat_top();\n    \n    // Legs\n    translate([15, 15, 0])\n        leg();\n    translate([105, 15, 0])\n        leg();\n    translate([15, 105, 0])\n        leg();\n    translate([105, 105, 0])\n        leg();\n    \n    // Support structure\n    leg_support(20, 60, 45);\n    leg_support(100, 60, -45);\n    leg_support(60, 20, -45);\n    leg_support(60, 100, 45);\n    \n    // Hidden blade mechanisms\n    hidden_blade();\n    translate([0, 116, 0])\n        hidden_blade();\n    translate([116, 0, 0])\n        rotate([0, 0, 90])\n        hidden_blade();\n    translate([116, 116, 0])\n        rotate([0, 0, 90])\n        hidden_blade();\n}",
    "renders": true
  },
  {
    "sports_equipment": "rogue",
    "openscad_code": "// Rogue's Assassin's Coffee Table\n// A stealthy, blade-inspired coffee table with hidden compartments and dagger-like legs\n// Overall dimensions: 110mm x 60mm x 45mm (L x W x H)\n\n$fn = 32;  // Smooth curves for 3D printing\nwall_thickness = 2;  // Minimum wall thickness for printing\n\n// Main table top with beveled edges\nmodule table_top() {\n    difference() {\n        // Main top surface\n        translate([-55, -30, 43]) \n            cube([110, 60, 4]);\n        \n        // Bevel the top edges\n        translate([-55, -30, 45]) \n            cube([110, 60, 2]);\n        translate([-53, -28, 43]) \n            cube([106, 56, 4]);\n        \n        // Hidden compartment slot (2mm walls)\n        translate([-45, -20, 41]) \n            cube([20, 40, 2]);\n    }\n}\n\n// Dagger-style leg with reinforced joint\nmodule dagger_leg(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, 0]) {\n        rotate([0, 0, angle]) {\n            // Main blade structure\n            union() {\n                // Blade body\n                translate([-3, -1, 0]) \n                    cube([6, 2, 40]);\n                \n                // Blade edge bevel\n                translate([-3, -1, 38]) \n                    cube([6, 2, 2]);\n                translate([-2.5, -0.5, 38]) \n                    cube([5, 1, 2]);\n                \n                // Reinforcement collar at top\n                translate([-4, -2, 40]) \n                    cube([8, 4, 3]);\n            }\n            \n            // Hidden compartment drawer\n            difference() {\n                translate([0, 0, 20]) {\n                    rotate([90, 0, 0]) {\n                        // Drawer cavity\n                        translate([-8, -8, -1]) \n                            cube([16, 16, 2]);\n                        \n                        // Drawer handle (thin blade grip)\n                        translate([-1, -10, 0]) \n                            cube([2, 4, 1]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Decorative rogue emblem on table surface\nmodule rogue_emblem() {\n    translate([0, 0, 47]) {\n        // Central diamond\n        cube([8, 8, 0.5], center=true);\n        \n        // Crossing daggers\n        rotate([0, 0, 45]) \n            cube([12, 2, 0.5], center=true);\n        rotate([0, 0, -45]) \n            cube([12, 2, 0.5], center=true);\n    }\n}\n\n// Lower support frame connecting legs\nmodule support_frame() {\n    // Front support\n    translate([-45, -25, 5]) \n        cube([90, 2, 2]);\n    \n    // Back support\n    translate([-45, 23, 5]) \n        cube([90, 2, 2]);\n    \n    // Side supports\n    translate([-45, -25, 5]) \n        cube([2, 50, 2]);\n    translate([43, -25, 5]) \n        cube([2, 50, 2]);\n}\n\n// Assembly\nunion() {\n    table_top();\n    \n    // Four dagger legs at corners\n    dagger_leg(-45, -25, 0);\n    dagger_leg(45, -25, 0);\n    dagger_leg(-45, 25, 0);\n    dagger_leg(45, 25, 0);\n    \n    support_frame();\n    \n    rogue_emblem();\n}",
    "renders": true
  },
  {
    "sports_equipment": "thief",
    "openscad_code": "// Thief furniture (a small stealthy side table with hidden compartment)\n// Overall footprint of 120 x 80 mm, height 450 mm, printable on its back\n\n$fn = 32;               // smooth curves\nwall = 2;               // 2 mm wall thickness for 3D-printing\nply  = 3.6;             // plywood sheet thickness (realistic)\n\nmodule leg(x,y,ang) {              // single splayed leg\n    translate([x,y,0])\n    rotate([0,ang,0])\n    linear_extrude(height = 430, center = false, scale = 0.7)\n    offset(r=wall)\n    offset(r=-wall)\n    square([10,10], center=true);\n}\n\nmodule frontPanel() {              // drawer front with hidden fingerprint groove\n    difference() {\n        cube([110, wall, 70]);     // drawer face\n        translate([55, -1, 35])\n        rotate([90,0,0])\n        cylinder(h=60, d=3);       // discrete hidden pull hole\n    }\n}\n\nmodule drawerBox() {               // actual hidden drawer\n    difference() {\n        cube([106, 76, 65]);\n        translate([wall, wall, wall])\n        cube([106-2*wall, 76-2*wall, 65-wall]);\n    }\n}\n\nmodule top() {                     // 18 mm thick table top with rounded edge\n    difference() {\n        minkowski() {\n            cube([120,80,18], center=true);\n            cylinder(h=0.1, r=2);\n        }\n        translate([0,0,-9.1])\n        cube([120-2*wall, 80-2*wall, 20], center=true);\n    }\n}\n\nmodule shelf() {                   // mid-height stealth shelf\n    difference() {\n        cube([110,70,ply], center=true);\n        translate([0,0,-ply/2-0.1])\n        cube([110-2*wall, 70-2*wall, ply+0.2], center=true);\n    }\n}\n\nmodule sidePanel() {               // side panels hiding the drawer cavity\n    difference() {\n        cube([wall, 80, 350]);\n        translate([wall, wall, 150])\n        cube([wall, 80-2*wall, 150]); // lightening cut\n    }\n}\n\n// Assembly\ntranslate([0,0,18/2]) top();\n\n// Four legs splayed 3° for stability\nleg(-50, -35, 3);\nleg( 50, -35,-3);\nleg(-50,  35, 3);\nleg( 50,  35,-3);\n\n// Mid shelf 200 mm above floor\ntranslate([0,0,200]) shelf();\n\n// Drawer cavity between shelf and top\ntranslate([0,0,200+ply+5]) {\n    // left side panel\n    translate([-55,0,0]) sidePanel();\n    // right side panel\n    translate([ 55,0,0]) sidePanel();\n    // back panel\n    translate([0,40,0])\n    rotate([0,90,0])\n    sidePanel();\n    // drawer itself\n    translate([0,0,30]) {\n        drawerBox();\n        // drawer front flush with legs\n        translate([0,-40,0])\n        rotate([90,0,0])\n        frontPanel();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "bandit",
    "openscad_code": "// Bandit-style chair with hidden compartment\n// Overall size: 120mm tall, 60mm wide, 60mm deep\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main seat structure\nmodule seat_structure() {\n    difference() {\n        // Main seat block\n        cube([60, 60, 8]);\n        \n        // Hidden compartment cavity\n        translate([wall, wall, wall])\n            cube([60 - 2*wall, 60 - 2*wall, 6]);\n    }\n}\n\n// Seat cushion with stitched pattern\nmodule seat_cushion() {\n    translate([0, 0, 8])\n    union() {\n        // Base cushion\n        cube([60, 60, 10]);\n        \n        // Stitched pattern\n        for(i = [1:3]) {\n            translate([15*i, 0, 10])\n                cube([0.5, 60, 0.5]);\n            translate([0, 15*i, 10])\n                cube([60, 0.5, 0.5]);\n        }\n    }\n}\n\n// Backrest with bandit mask pattern\nmodule backrest() {\n    translate([0, 45, 18])\n    union() {\n        // Main backrest panel\n        cube([60, 15, 80]);\n        \n        // Mask eye holes\n        translate([20, 7, 60])\n            rotate([0, 90, 0])\n                cylinder(h=5, r=6, $fn=16);\n        translate([40, 7, 60])\n            rotate([0, 90, 0])\n                cylinder(h=5, r=6, $fn=16);\n        \n        // Mask mouth opening\n        translate([30, 7, 45])\n            rotate([0, 90, 0])\n                cylinder(h=5, r=8, $fn=20);\n    }\n}\n\n// Chair legs with reinforced joints\nmodule chair_leg(x, y) {\n    translate([x, y, -40])\n    union() {\n        // Main leg post\n        cylinder(h=40, r=5, $fn=8);\n        \n        // Reinforcement bracket\n        translate([0, 0, 35])\n            rotate([45, 0, 0])\n                cube([10, 10, 5]);\n    }\n}\n\n// Hidden drawer pull (bandana knot)\nmodule drawer_pull() {\n    translate([30, 30, 6])\n    union() {\n        // Pull knob\n        sphere(r=4, $fn=16);\n        \n        // Bandana knot detail\n        translate([0, 0, 2])\n            rotate([90, 0, 0])\n                cylinder(h=6, r=2, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main chair parts\n    seat_structure();\n    seat_cushion();\n    backrest();\n    \n    // Four legs\n    chair_leg(5, 5);\n    chair_leg(55, 5);\n    chair_leg(5, 55);\n    chair_leg(55, 55);\n    \n    // Hidden drawer pull\n    drawer_pull();\n}",
    "renders": true
  },
  {
    "sports_equipment": "outlaw",
    "openscad_code": "// Outlaw's Hideout Chair - A rugged outlaw-style wooden chair with hidden compartments\n// Dimensions: 100mm height, 70mm width, 75mm depth\n// Wall thickness: 2mm throughout for 3D printing\n\n// Main module for the complete outlaw chair\nmodule outlaw_chair() {\n    // Chair assembly\n    union() {\n        // Seat with hidden compartment\n        seat_with_compartment();\n        \n        // Backrest with bullet hole details\n        backrest();\n        \n        // Legs\n        legs();\n        \n        // Armrests\n        armrests();\n        \n        // Support braces\n        braces();\n    }\n}\n\n// Seat with hidden compartment underneath\nmodule seat_with_compartment() {\n    difference() {\n        // Main seat platform (40mm x 70mm x 6mm)\n        translate([0, 0, 34])\n            cube([70, 40, 6], center=true);\n        \n        // Hidden compartment (30mm x 25mm x 3mm)\n        translate([0, 0, 35])\n            cube([30, 25, 3], center=true);\n        \n        // Keyhole for compartment (2mm diameter)\n        translate([12, 0, 37])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=2, $fn=20);\n    }\n    \n    // Seat texture - wooden slats\n    for(i = [-30:10:30]) {\n        translate([i, 0, 37])\n            cube([8, 38, 1], center=true);\n    }\n}\n\n// Backrest with outlaw details\nmodule backrest() {\n    union() {\n        // Main backrest frame (65mm height, 65mm width, 4mm thick)\n        translate([0, -15, 67.5])\n            cube([65, 4, 65], center=true);\n        \n        // Horizontal backrest slats\n        for(h = [45:10:85]) {\n            translate([0, -13, h])\n                cube([55, 3, 8], center=true);\n        }\n        \n        // Bullet holes - outlaw battle scars\n        for(pos = [[-20, -11, 75], [15, -11, 68], [-10, -11, 82]]) {\n            translate(pos)\n                rotate([90, 0, 0])\n                    cylinder(h=5, d=3, $fn=20);\n        }\n        \n        // Wanted poster holder (small ledge)\n        translate([0, -11.5, 90])\n            cube([50, 2, 15], center=true);\n    }\n}\n\n// Chair legs (4 legs with 2mm wall thickness)\nmodule legs() {\n    // Front left leg\n    translate([-30, 15, 17])\n        leg();\n    \n    // Front right leg\n    translate([30, 15, 17])\n        leg();\n    \n    // Back left leg\n    translate([-30, -15, 17])\n        leg();\n    \n    // Back right leg\n    translate([30, -15, 17])\n        leg();\n}\n\n// Individual leg module\nmodule leg() {\n    difference() {\n        // Outer leg (hollow cylinder)\n        cylinder(h=34, d=8, $fn=20);\n        \n        // Inner hollow (6mm diameter, 2mm wall thickness)\n        translate([0, 0, -0.1])\n            cylinder(h=34.2, d=4, $fn=20);\n    }\n}\n\n// Armrests with outlaw styling\nmodule armrests() {\n    // Left armrest\n    translate([-35, 0, 50])\n        rotate([0, 0, 15])\n            armrest();\n    \n    // Right armrest\n    translate([35, 0, 50])\n        rotate([0, 0, -15])\n            armrest();\n}\n\n// Individual armrest module\nmodule armrest() {\n    union() {\n        // Armrest support post\n        translate([0, 0, -8])\n            cylinder(h=16, d=6, $fn=12);\n        \n        // Armrest surface (gun barrel shape)\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=25, d=8, $fn=20);\n        \n        // Carved notches (gun sight references)\n        for(i = [-8:4:8]) {\n            translate([i, 0, -4])\n                cube([1, 8, 2], center=true);\n        }\n    }\n}\n\n// Support braces between legs\nmodule braces() {\n    // Front brace\n    translate([0, 15, 8])\n        cube([60, 2, 4], center=true);\n    \n    // Back brace\n    translate([0, -15, 8])\n        cube([60, 2, 4], center=true);\n    \n    // Side braces\n    translate([-30, 0, 8])\n        rotate([0, 0, 90])\n            cube([30, 2, 4], center=true);\n    \n    translate([30, 0, 8])\n        rotate([0, 0, 90])\n            cube([30, 2, 4], center=true);\n}\n\n// Render the complete chair\noutlaw_chair();",
    "renders": true
  },
  {
    "sports_equipment": "pirate",
    "openscad_code": "// Pirate Barrel Chair - Medium Complexity\n// Realistic style with pirate-themed details\n// Overall size: 100mm diameter x 120mm height\n\n$fn = 32;\n\n// Main barrel body\nmodule barrel_body() {\n    difference() {\n        // Outer barrel\n        cylinder(h = 90, d1 = 100, d2 = 95);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h = 88, d1 = 94, d2 = 89);\n        \n        // Top opening for seat\n        translate([0, 0, 85])\n            cylinder(h = 10, d = 80);\n    }\n}\n\n// Barrel bands\nmodule barrel_bands() {\n    for(i = [1:3]) {\n        translate([0, 0, i * 25])\n            difference() {\n                cylinder(h = 4, d = 102);\n                cylinder(h = 4, d = 98);\n            }\n    }\n}\n\n// Skull and crossbones backrest\nmodule pirate_backrest() {\n    // Back support posts\n    translate([-35, 0, 90])\n        cylinder(h = 40, d = 8);\n    translate([35, 0, 90])\n        cylinder(h = 40, d = 8);\n    \n    // Horizontal support\n    translate([0, 0, 125])\n        cube([80, 4, 4], center = true);\n    \n    // Skull\n    translate([0, -2, 115])\n        sphere(d = 20);\n    \n    // Eye sockets\n    translate([-6, -6, 118])\n        sphere(d = 6);\n    translate([6, -6, 118])\n        sphere(d = 6);\n    \n    // Crossbones\n    rotate([0, 90, 45])\n        translate([0, 0, 115])\n            cylinder(h = 30, d = 3);\n    rotate([0, 90, -45])\n        translate([0, 0, 115])\n            cylinder(h = 30, d = 3);\n}\n\n// Plank seat with gaps\nmodule plank_seat() {\n    for(i = [-2:2]) {\n        translate([i * 15, 0, 87])\n            cube([10, 75, 4], center = true);\n    }\n}\n\n// Barrel stave details\nmodule staves() {\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([48, 0, 45])\n                cube([4, 8, 85], center = true);\n    }\n}\n\n// Treasure chest base support\nmodule treasure_base() {\n    translate([0, 0, -8])\n        difference() {\n            cube([110, 110, 8], center = true);\n            cube([90, 90, 8], center = true);\n        }\n    \n    // Decorative corner pieces\n    for(x = [-1:1:2]) {\n        for(y = [-1:1:2]) {\n            translate([x * 45, y * 45, -4])\n                cube([8, 8, 8], center = true);\n        }\n    }\n}\n\n// Pirate flag detail\nmodule jolly_roger() {\n    // Flag pole\n    translate([0, 55, 100])\n        rotate([90, 0, 0])\n            cylinder(h = 60, d = 3);\n    \n    // Flag\n    translate([0, 55, 130])\n        rotate([90, 0, 0])\n            difference() {\n                cube([30, 40, 2]);\n                // Skull on flag\n                translate([15, 20, 0])\n                    sphere(d = 8);\n                translate([15, 20, 0])\n                    cube([12, 3, 3], center = true);\n                rotate([0, 90, 45])\n                    translate([15, 20, 0])\n                        cube([12, 3, 3], center = true);\n                rotate([0, 90, -45])\n                    translate([15, 20, 0])\n                        cube([12, 3, 3], center = true);\n            }\n}\n\n// Assembly\nunion() {\n    treasure_base();\n    barrel_body();\n    barrel_bands();\n    staves();\n    plank_seat();\n    pirate_backrest();\n    jolly_roger();\n}",
    "renders": true
  },
  {
    "sports_equipment": "cowboy",
    "openscad_code": "// Cowboy saddle stool – 3D-printable, realistic style\n// Overall height ~90 mm, seat Ø120 mm, suitable for FDM printing\n\n$fa = 2; $fs = 0.5;\n\n// Main module\nmodule saddle_stool() {\n    // 2 mm wall thickness everywhere\n    wall = 2;\n\n    // Seat – classic saddle shape\n    union() {\n        // Upper padded part\n        translate([0, 0, 65])\n            saddle_seat(wall);\n\n        // Seat post – steel pipe\n        translate([0, 0, 32.5])\n            rotate([0, 0, 0])\n                cylinder(h = 35, d = 30, $fn = 32);\n\n        // Base – five-point star with horn tips\n        translate([0, 0, 0])\n            rotate([0, 0, 0])\n                base_star(wall);\n    }\n\n    // Decorative conchos on seat skirt\n    for(a = [0:60:359])\n        translate([0, 0, 65])\n            rotate([0, 0, a])\n                translate([50, 0, -7])\n                    cylinder(h = 2, d = 6, $fn = 16);\n}\n\nmodule saddle_seat(w) {\n    // Main cushion\n    difference() {\n        hull() {\n            // front pommel\n            translate([0, 35, 0])\n                scale([1, 1.2, 0.8])\n                    sphere(d = 40);\n            // rear cantle\n            translate([0, -30, 0])\n                scale([1.3, 1, 0.9])\n                    sphere(d = 45);\n            // central seat\n            translate([0, 0, 5])\n                sphere(d = 50);\n        }\n\n        // Hollow for wall thickness\n        hull() {\n            translate([0, 35, w/2])\n                scale([1, 1.2, 0.8])\n                    sphere(d = 40 - 2*w);\n            translate([0, -30, w/2])\n                scale([1.3, 1, 0.9])\n                    sphere(d = 45 - 2*w);\n            translate([0, 0, 5 + w/2])\n                sphere(d = 50 - 2*w);\n        }\n    }\n\n    // Skirt rim\n    difference() {\n        cylinder(h = 8, d = 120, $fn = 64);\n        translate([0, 0, -1])\n            cylinder(h = 10, d = 116, $fn = 64);\n    }\n}\n\nmodule base_star(w) {\n    // Solid star\n    difference() {\n        union() {\n            // Central hub\n            cylinder(h = 8, d = 40, $fn = 32);\n            // Five legs\n            for(a = [0:72:359])\n                rotate([0, 0, a])\n                    translate([35, 0, 4])\n                        cube([70, 12, 8], center = true);\n        }\n        // Hollow hub for light weight\n        translate([0, 0, -1])\n            cylinder(h = 10, d = 36, $fn = 32);\n    }\n}\n\nsaddle_stool();",
    "renders": true
  },
  {
    "sports_equipment": "spaceman",
    "openscad_code": "// Spaceman Table Lamp – realistic style, medium complexity\n// Overall height ≈ 120 mm, base Ø 80 mm, printable without supports\n\n$fn = 36;               // global facet resolution\n\n// ---------- modules ----------\nmodule visor() {\n    // bubble-shaped smoked visor, 2 mm shell\n    difference() {\n        sphere(d = 26);\n        translate([0,0,-1]) sphere(d = 22);\n    }\n}\n\nmodule glove(d = 14, l = 22) {\n    // rounded glove cuff with fingers\n    union() {\n        cylinder(h = l, d1 = d, d2 = d * 0.9);\n        for(i=[0:3]) {\n            rotate([0, 90, i*90]) translate([0, d/2, l/2])\n                cylinder(h = 6, d = 4, $fn = 8);\n        }\n    }\n}\n\nmodule boot(h = 30) {\n    // bulky moon-boot with sole\n    difference() {\n        union() {\n            cylinder(h = h, d = 28);\n            translate([0,0,-2]) cube([30, 14, 4], center = true);\n        }\n        translate([0,0, 2]) cylinder(h = h, d = 26);\n    }\n}\n\nmodule torso() {\n    // life-support backpack + body\n    union() {\n        // backpack\n        translate([-18, 0, 0]) cube([30, 40, 22], center = true);\n        // chest\n        translate([0,0, 11]) cube([40, 36, 26], center = true);\n    }\n}\n\nmodule arm(shoulder_pos) {\n    translate(shoulder_pos) {\n        rotate([-30, 0, 0]) {\n            // upper arm\n            cylinder(h = 28, d = 14);\n            translate([0,0,28]) rotate([30, 0, 0]) {\n                // lower arm\n                cylinder(h = 24, d = 12);\n                translate([0,0,24]) glove();\n            }\n        }\n    }\n}\n\nmodule leg(hip_pos) {\n    translate(hip_pos) {\n        rotate([20, 0, 0]) {\n            // thigh\n            cylinder(h = 32, d = 18);\n            translate([0,0,32]) rotate([-20, 0, 0]) {\n                // shin\n                cylinder(h = 30, d = 16);\n                translate([0,0,30]) boot();\n            }\n        }\n    }\n}\n\nmodule head() {\n    // helmet dome + visor\n    translate([0, 0, 72]) {\n        union() {\n            sphere(d = 30);\n            visor();\n        }\n    }\n}\n\nmodule body() {\n    translate([0, 0, 35]) {\n        union() {\n            torso();\n            arm([20, 22, 20]);\n            arm([20, -22, 20]);\n            leg([0, 12, 0]);\n            leg([0, -12, 0]);\n        }\n    }\n}\n\nmodule lamp_shade() {\n    // downward-sloping ring shade, 2 mm wall\n    difference() {\n        cylinder(h = 24, d1 = 60, d2 = 50);\n        translate([0,0,2]) cylinder(h = 24, d1 = 56, d2 = 46);\n    }\n}\n\nmodule base() {\n    // stable disc with cable notch\n    difference() {\n        cylinder(h = 12, d = 80);\n        translate([40-6, 0, -1]) cube([12, 8, 14], center = true);\n    }\n}\n\n// ---------- assembly ----------\nunion() {\n    base();\n    translate([0,0,12]) {\n        // central pole (thin stand)\n        cylinder(h = 35, d = 8);\n        body();\n        head();\n        // attach shade to hand\n        translate([20, -28, 72+24]) rotate([0, 90, 0]) lamp_shade();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "astronaut",
    "openscad_code": "// Astronaut Bookshelf - Realistic Style, Medium Complexity\n// Dimensions: ~120mm height, 80mm width, 60mm depth\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main body - astronaut torso as bookshelf\nmodule torso() {\n    difference() {\n        // Main torso shape\n        hull() {\n            translate([0, 0, 40]) cylinder(h=60, r1=30, r2=35);\n            translate([0, 0, 0]) cylinder(h=40, r1=25, r2=30);\n        }\n        \n        // Hollow interior for books\n        translate([0, -28, 5]) cube([56, 56, 90], center=true);\n    }\n}\n\n// Helmet as top shelf\nmodule helmet() {\n    difference() {\n        sphere(r=30);\n        // Hollow interior\n        sphere(r=27);\n        // Front opening\n        translate([0, 0, -30]) cube([40, 40, 60], center=true);\n    }\n}\n\n// Arms as side supports\nmodule arm(side) {\n    translate([side * 35, 0, 50]) {\n        rotate([0, 15 * side, 0]) {\n            hull() {\n                sphere(r=10);\n                translate([0, 0, -30]) sphere(r=8);\n            }\n        }\n    }\n}\n\n// Legs as base supports\nmodule leg(side) {\n    translate([side * 20, 0, 0]) {\n        rotate([0, 10 * side, 0]) {\n            hull() {\n                translate([0, 0, 0]) sphere(r=12);\n                translate([0, 0, -25]) sphere(r=10);\n            }\n        }\n    }\n}\n\n// Shelf dividers (3 levels)\nmodule shelves() {\n    for(z = [20, 45, 70]) {\n        translate([0, 0, z]) {\n            difference() {\n                cylinder(h=wall_thickness, r1=34, r2=34);\n                translate([0, -34, -1]) cube([68, 68, wall_thickness+2], center=true);\n            }\n        }\n    }\n}\n\n// Backpack storage compartment\nmodule backpack() {\n    translate([0, 35, 35]) {\n        difference() {\n            cube([40, 15, 50], center=true);\n            cube([36, 11, 46], center=true);\n        }\n    }\n}\n\n// Control panel details\nmodule control_panel() {\n    translate([0, 29, 60]) {\n        difference() {\n            cube([30, 2, 15], center=true);\n            // Buttons\n            for(x = [-10, -5, 0, 5, 10]) {\n                translate([x, 1, 0]) cylinder(h=2, r=1.5);\n            }\n        }\n    }\n}\n\n// Ventilation grills\nmodule vents() {\n    for(z = [25, 35, 55, 65]) {\n        translate([0, 29, z]) {\n            cube([25, wall_thickness, 3], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    torso();\n    translate([0, 0, 100]) helmet();\n    \n    // Structural supports\n    arm(1);\n    arm(-1);\n    leg(1);\n    leg(-1);\n    \n    // Functional elements\n    shelves();\n    backpack();\n    control_panel();\n    vents();\n}\n\n// Base plate for stability\ntranslate([0, 0, -26]) {\n    difference() {\n        cylinder(h=3, r=45);\n        cylinder(h=4, r=43);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "explorer",
    "openscad_code": "// Explorer-style wooden camp stool with folding legs and canvas seat\n// Overall dimensions: ~120mm wide x 80mm deep x 100mm high (folded)\n\n$fn = 32;  // Good quality curves for 3D printing\n\n// Main parameters\nseat_w = 110;      // Seat width\nseat_d = 70;       // Seat depth\nleg_len = 95;      // Leg length\ntube_d = 8;        // Tube diameter\nwall_t = 2;        // Wall thickness for 3D printing\n\nmodule canvas_seat() {\n    // Canvas fabric seat with slight sag\n    translate([0, 0, 2]) {\n        // Main seat panel\n        difference() {\n            cube([seat_w, seat_d, 1.5], center=true);\n            // Add subtle sag by cutting away center\n            translate([0, 0, 0.5]) \n                cube([seat_w*0.8, seat_d*0.8, 2], center=true);\n        }\n        \n        // Reinforcement webbing strips\n        for(x = [-seat_w/3, 0, seat_w/3]) {\n            translate([x, 0, 1.6]) \n                cube([10, seat_d, 0.5], center=true);\n        }\n    }\n}\n\nmodule folding_leg(assemble=true) {\n    // Single folding leg assembly\n    if(assemble) {\n        // Upper pivot block\n        translate([0, 0, leg_len/2 - 5]) {\n            cube([tube_d*1.5, tube_d*1.5, 10], center=true);\n            \n            // Pivot hole\n            rotate([90, 0, 0]) \n                cylinder(h=tube_d*1.5, d=tube_d*0.8, center=true);\n        }\n        \n        // Lower leg tube\n        translate([0, 0, leg_len/2 - 15]) {\n            difference() {\n                cylinder(h=leg_len - 20, d=tube_d, center=true);\n                // Hollow tube for weight reduction\n                cylinder(h=leg_len - 20, d=tube_d - wall_t*2, center=true);\n            }\n        }\n        \n        // Rubber foot\n        translate([0, 0, -leg_len/2 + 2]) {\n            cylinder(h=4, d=tube_d*1.2);\n            sphere(d=tube_d*1.2);\n        }\n    }\n}\n\nmodule support_brace() {\n    // Cross-brace between legs\n    translate([0, 0, leg_len/2 - 30]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h=seat_w*0.9, d=tube_d*0.8, center=true);\n                cylinder(h=seat_w*0.9, d=tube_d*0.8 - wall_t*2, center=true);\n            }\n        }\n    }\n}\n\nmodule explorer_details() {\n    // Brass rivets on canvas\n    for(x = [-seat_w/2 + 8, seat_w/2 - 8])\n    for(y = [-seat_d/2 + 8, seat_d/2 - 8]) {\n        translate([x, y, 3]) \n            cylinder(h=2, d=4, $fn=6);\n    }\n    \n    // Leather straps for folding\n    translate([seat_w/2 - 5, 0, leg_len - 10]) {\n        rotate([90, 0, 0]) {\n            // Strap loop\n            difference() {\n                cube([20, 8, 2], center=true);\n                translate([0, 0, -1]) \n                    cube([16, 4, 4], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Canvas seat\n    color(\"tan\") canvas_seat();\n    \n    // Four folding legs\n    color(\"brown\") {\n        for(x = [-seat_w/2 + 15, seat_w/2 - 15])\n        for(y = [-seat_d/2 + 15, seat_d/2 - 15]) {\n            translate([x, y, 0]) {\n                rotate([0, 15, 0])  // Slight angle for stability\n                    folding_leg();\n            }\n        }\n    }\n    \n    // Support braces\n    color(\"brown\") {\n        support_brace();\n        rotate([0, 0, 90]) support_brace();\n    }\n    \n    // Explorer-style details\n    color(\"goldenrod\") explorer_details();\n}",
    "renders": true
  },
  {
    "sports_equipment": "adventurer",
    "openscad_code": "// Adventurer's Stool - A portable folding camp stool for the wandering explorer\n// Overall dimensions: 220mm wide x 220mm deep x 450mm tall when open\n// All parts designed for 3D printing with 2mm wall thickness and no overhangs >45°\n\n$fn = 50;  // Smooth curves for 3D printing\n\nmodule leg_support(length, width) {\n    // Creates a single leg with support braces\n    difference() {\n        // Main leg tube\n        cylinder(h=length, d=20, center=false);\n        \n        // Hollow out the tube\n        cylinder(h=length+1, d=16, center=false);\n    }\n    \n    // Foot cap for stability\n    translate([0, 0, length-5]) {\n        cylinder(h=5, d=25, center=false);\n    }\n    \n    // Brace connector holes\n    translate([0, 0, length/3]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=25, d=8, center=true);\n        }\n    }\n}\n\nmodule fabric_seat(width, depth) {\n    // Canvas seat with reinforced edges\n    color(\"darkgreen\") {\n        // Main seat panel\n        translate([-width/2, -depth/2, 0]) {\n            cube([width, depth, 3]);\n        }\n        \n        // Reinforced edges\n        for (x = [-width/2, width/2]) {\n            translate([x, 0, 0]) {\n                cube([5, depth, 5]);\n            }\n        }\n        for (y = [-depth/2, depth/2]) {\n            translate([0, y, 0]) {\n                cube([width, 5, 5]);\n            }\n        }\n    }\n}\n\nmodule hinge_joint() {\n    // Simple pin hinge for folding mechanism\n    union() {\n        // Hinge barrel\n        cylinder(h=15, d=12, center=true);\n        \n        // Pin hole\n        cylinder(h=16, d=6, center=true);\n        \n        // Mounting flanges\n        for (angle = [0, 180]) {\n            rotate([0, 0, angle]) {\n                translate([8, 0, 0]) {\n                    cube([10, 5, 15]);\n                }\n            }\n        }\n    }\n}\n\nmodule cross_brace() {\n    // Folding X-brace for stability\n    rotate([0, 0, 45]) {\n        cube([100, 5, 15], center=true);\n    }\n}\n\nmodule adventurer_stool() {\n    // Main assembly\n    \n    // Four legs\n    for (angle = [0, 90, 180, 270]) {\n        rotate([0, 0, angle]) {\n            translate([90, 90, 0]) {\n                leg_support(400, 20);\n            }\n        }\n    }\n    \n    // Seat assembly\n    translate([0, 0, 400]) {\n        fabric_seat(200, 200);\n        \n        // Seat frame\n        difference() {\n            cube([210, 210, 10], center=true);\n            cube([190, 190, 12], center=true);\n        }\n        \n        // Corner brackets\n        for (x = [-95, 95]) {\n            for (y = [-95, 95]) {\n                translate([x, y, -5]) {\n                    hinge_joint();\n                }\n            }\n        }\n    }\n    \n    // Cross braces\n    translate([0, 0, 200]) {\n        cross_brace();\n    }\n    rotate([0, 0, 90]) {\n        translate([0, 0, 200]) {\n            cross_brace();\n        }\n    }\n    \n    // Leather carrying strap\n    color(\"brown\") {\n        translate([0, 0, 380]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=220, d=8, center=true);\n            }\n        }\n    }\n    \n    // Backpack hook\n    translate([0, 110, 420]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h=40, d=15, center=true);\n                cylinder(h=42, d=11, center=true);\n            }\n        }\n    }\n}\n\n// Render the complete stool\nadventurer_stool();",
    "renders": true
  },
  {
    "sports_equipment": "hunter",
    "openscad_code": "// Hunter's Stool with Rifle Rest\n// Realistic style, medium complexity\n\n// Dimensions\nseat_d = 50;\nseat_h = 4;\nleg_h = 45;\nleg_d = 8;\nsupport_d = 5;\nrifle_rest_w = 60;\nrifle_rest_h = 8;\nrifle_rest_d = 12;\ngrip_h = 10;\ngrip_d = 20;\n\n// Main seat\nmodule seat() {\n    // Base seat\n    difference() {\n        cylinder(h = seat_h, d = seat_d, $fn = 64);\n        // Center hole for weight reduction\n        cylinder(h = seat_h + 1, d = seat_d - 8, $fn = 64);\n    }\n    \n    // Reinforcement ring\n    translate([0, 0, seat_h - 2])\n        cylinder(h = 2, d = seat_d + 2, $fn = 64);\n}\n\n// Single leg\nmodule leg(angle) {\n    rotate([0, angle, 0])\n        translate([seat_d/2 - leg_d/2 - 2, 0, -leg_h/2])\n            cylinder(h = leg_h, d = leg_d, $fn = 20);\n}\n\n// Support structure between legs\nmodule leg_support() {\n    for(i = [0:120:359]) {\n        rotate([0, 0, i])\n            translate([seat_d/2 - leg_d, 0, -leg_h/3])\n                rotate([90, 0, 0])\n                    cylinder(h = seat_d - leg_d*2, d = support_d, $fn = 12);\n    }\n}\n\n// Rifle rest with grip texture\nmodule rifle_rest() {\n    // Main rest block\n    translate([seat_d/2 + 10, 0, seat_h + leg_h - rifle_rest_h])\n        cube([rifle_rest_d, rifle_rest_w, rifle_rest_h], center = true);\n    \n    // V-groove for rifle\n    translate([seat_d/2 + 10, 0, seat_h + leg_h - rifle_rest_h/2])\n        rotate([0, 90, 0])\n            cylinder(h = rifle_rest_w, d = rifle_rest_h*2, $fn = 3);\n    \n    // Grip texture on top\n    for(y = [-rifle_rest_w/2 + 3 : 6 : rifle_rest_w/2 - 3]) {\n        translate([seat_d/2 + 10 + rifle_rest_d/2 - 1, y, seat_h + leg_h - 1])\n            cube([2, 3, 2]);\n    }\n    \n    // Support arms\n    translate([seat_d/4, -rifle_rest_w/2, seat_h + leg_h/2])\n        rotate([0, -30, 0])\n            cube([20, 4, 4], center = true);\n    translate([seat_d/4, rifle_rest_w/2, seat_h + leg_h/2])\n        rotate([0, 30, 0])\n            cube([20, 4, 4], center = true);\n}\n\n// Assembly\nunion() {\n    // Seat\n    seat();\n    \n    // Three legs\n    for(angle = [0:120:240]) {\n        leg(angle);\n    }\n    \n    // Leg supports\n    leg_support();\n    \n    // Rifle rest\n    rifle_rest();\n}\n\n// Ground contact pads\nfor(i = [0:120:240]) {\n    rotate([0, 0, i])\n        translate([seat_d/2 - leg_d/2 - 2, 0, -leg_h - 1])\n            cylinder(h = 2, d = leg_d + 4, $fn = 20);\n}",
    "renders": true
  },
  {
    "sports_equipment": "rider",
    "openscad_code": "// Rider Furniture - Modern Saddle Stool\n// 3D printable stool with saddle seat inspired by equestrian design\n// Dimensions: ~120mm height, ~90mm width\n\n// Parameters\n$fn=30;\nseat_width = 90;\nseat_length = 80;\nleg_height = 100;\nleg_diameter = 15;\nstretcher_offset = 40;\nwall_thickness = 2;\n\nmodule saddle_seat() {\n    // Base seat platform\n    difference() {\n        // Main seat shape\n        hull() {\n            translate([-seat_width/2, -seat_length/2, 0])\n                cube([seat_width, seat_length, wall_thickness*3]);\n            translate([-seat_width/2.5, -seat_length/3, wall_thickness*3])\n                cube([seat_width/1.25, seat_length/1.5, wall_thickness]);\n        }\n        \n        // Saddle groove\n        for(i = [0:1]) {\n            translate([i == 0 ? -seat_width/4 : seat_width/4, 0, wall_thickness*2])\n                rotate([0, 30, 0])\n                    cylinder(h=seat_length, r1=seat_width/3, r2=seat_width/4);\n        }\n        \n        // Lightening holes\n        translate([0, 0, -1])\n            cylinder(h=wall_thickness*5, r=seat_width/4);\n    }\n    \n    // Grip texture ridges\n    for(y = [-seat_length/2.5:5:seat_length/2.5]) {\n        translate([0, y, wall_thickness*3.1])\n            cube([seat_width/1.2, 2, 1], center=true);\n    }\n}\n\nmodule leg_with_stretcher(x_offset, y_offset, angle) {\n    // Main leg\n    translate([x_offset, y_offset, 0])\n        cylinder(h=leg_height, d=leg_diameter);\n    \n    // Lower stretcher connection\n    translate([x_offset, y_offset, stretcher_offset])\n        rotate([0, 0, angle])\n            cylinder(h=leg_diameter*3, d=leg_diameter*0.8);\n}\n\nmodule foot_ring() {\n    // Circular support ring\n    difference() {\n        cylinder(h=wall_thickness, r1=seat_width/1.8, r2=seat_width/1.6);\n        cylinder(h=wall_thickness+1, r1=seat_width/1.8-wall_thickness, r2=seat_width/1.6-wall_thickness);\n    }\n    \n    // Connection points\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n            translate([seat_width/1.7, 0, -wall_thickness/2])\n                cube([leg_diameter, leg_diameter, wall_thickness*2]);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0, 0, leg_height])\n        saddle_seat();\n    \n    // Legs\n    leg_positions = [[-seat_width/2.2, -seat_length/2.2, 45],\n                     [seat_width/2.2, -seat_length/2.2, 135],\n                     [seat_width/2.2, seat_length/2.2, -135],\n                     [-seat_width/2.2, seat_length/2.2, -45]];\n    \n    for(pos = leg_positions) {\n        leg_with_stretcher(pos[0], pos[1], pos[2]);\n    }\n    \n    // Foot ring\n    translate([0, 0, stretcher_offset-wall_thickness/2])\n        foot_ring();\n}",
    "renders": true
  },
  {
    "sports_equipment": "jockey",
    "openscad_code": "// Jockey Stool - Realistic style, medium complexity\n// Overall dimensions: 120mm height, 60mm seat diameter\n\n// Parameters\nseat_d = 60;\nseat_h = 8;\nleg_d = 12;\nleg_h = 100;\nstretcher_d = 8;\nfootrest_h = 45;\nbackrest_h = 30;\nbackrest_w = 50;\nwall = 2;\n\n// Main seat\nmodule seat() {\n    // Top cushion with rounded edges\n    difference() {\n        cylinder(h = seat_h, d = seat_d, $fn = 48);\n        translate([0, 0, -0.1])\n            cylinder(h = seat_h + 0.2, d = seat_d - wall*2, $fn = 48);\n    }\n    \n    // Reinforcement ring underneath\n    translate([0, 0, seat_h - wall])\n        cylinder(h = wall, d = seat_d - 10, $fn = 48);\n}\n\n// Jockey-style legs with tapered design\nmodule leg() {\n    // Main leg tube\n    hull() {\n        cylinder(h = leg_h, d1 = leg_d, d2 = leg_d - 4, $fn = 24);\n        translate([0, 0, leg_h])\n            cylinder(h = wall, d = leg_d - 4, $fn = 24);\n    }\n    \n    // Grip rings for jockey stirrup style\n    for(i = [1:3:leg_h-30]) {\n        translate([0, 0, i])\n            cylinder(h = 2, d = leg_d + 2, $fn = 24);\n    }\n}\n\n// Cross-stretcher frame\nmodule stretcher() {\n    // Horizontal stretchers\n    for(angle = [0, 120, 240]) {\n        rotate([0, 0, angle])\n            translate([leg_d/2 + stretcher_d/2, 0, footrest_h])\n                rotate([0, 90, 0])\n                    cylinder(h = leg_d*1.2, d = stretcher_d, $fn = 16);\n    }\n    \n    // Center hub\n    translate([0, 0, footrest_h])\n        cylinder(h = stretcher_d, d = stretcher_d*1.5, $fn = 24);\n}\n\n// Jockey-style backrest with racing number\nmodule backrest() {\n    // Main backrest panel\n    translate([0, 0, leg_h + seat_h])\n        difference() {\n            cube([backrest_w, wall, backrest_h], center = true);\n            translate([0, wall/2 + 0.1, backrest_h/2 - 12])\n                cube([backrest_w/3, wall + 0.2, 24], center = true);\n        }\n    \n    // Number plate detail\n    translate([0, wall/2 + 0.1, leg_h + seat_h + backrest_h/2])\n        cylinder(h = wall + 0.2, d = 20, $fn = 32);\n}\n\n// Assembly\nunion() {\n    // Seat\n    seat();\n    \n    // Legs in tripod arrangement\n    for(angle = [0, 120, 240]) {\n        rotate([0, 0, angle])\n            translate([0, seat_d/2 - leg_d/2, seat_h])\n                leg();\n    }\n    \n    // Stretcher frame\n    stretcher();\n    \n    // Backrest\n    backrest();\n    \n    // Jockey grip handles on sides\n    for(y = [-seat_d/3, seat_d/3]) {\n        translate([seat_d/2 - 5, y, seat_h + 5])\n            rotate([90, 0, 0])\n                cylinder(h = 15, d = 6, $fn = 16);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "driver",
    "openscad_code": "// Driver Furniture - 3D Printable Golf Club Driver\n// Realistic style, medium complexity\n\n// Overall dimensions in mm\ndriver_length = 120;\ndriver_head_width = 68;\ndriver_head_height = 45;\ndriver_head_depth = 88;\nshaft_diameter = 10.5;\ngrip_length = 25;\nhosel_length = 15;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule driver_head() {\n    // Main driver head body\n    difference() {\n        // Outer shell - elliptical shape\n        scale([1, 0.9, 1.2])\n        sphere(d=driver_head_width);\n        \n        // Hollow interior\n        translate([0, 0, 0])\n        scale([0.85, 0.75, 1.05])\n        sphere(d=driver_head_width - 4);\n    }\n    \n    // Face plate with grooves\n    translate([0, 0, driver_head_depth/2 - 2])\n    difference() {\n        cube([driver_head_width - 4, driver_head_height - 8, 4], center=true);\n        \n        // Grooves for realistic face texture\n        for(i = [-driver_head_height/3 : 3 : driver_head_height/3]) {\n            translate([0, i, 1])\n            cube([driver_head_width - 8, 0.8, 2], center=true);\n        }\n    }\n    \n    // Sole plate with weight distribution\n    translate([0, -driver_head_height/2 + 2, 0])\n    difference() {\n        cube([driver_head_width - 8, 6, driver_head_depth - 20], center=true);\n        \n        // Weight ports\n        for(pos = [-driver_head_width/4, 0, driver_head_width/4]) {\n            translate([pos, -1, driver_head_depth/4])\n            cylinder(h=8, d=6);\n        }\n    }\n    \n    // Crown details\n    translate([0, driver_head_height/2 - 4, 0])\n    cube([driver_head_width - 12, 2, driver_head_depth - 16], center=true);\n}\n\nmodule hosel() {\n    // Connection between shaft and head\n    translate([0, 0, -driver_head_depth/2])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=hosel_length, d=shaft_diameter + 4);\n        cylinder(h=hosel_length + 2, d=shaft_diameter);\n    }\n}\n\nmodule shaft() {\n    // Main shaft tube\n    translate([0, 0, -driver_length/2 + hosel_length])\n    cylinder(h=driver_length - hosel_length - grip_length, d=shaft_diameter);\n}\n\nmodule grip() {\n    // Handle grip with texture\n    translate([0, 0, -driver_length + grip_length/2])\n    difference() {\n        // Main grip body\n        cylinder(h=grip_length, d=shaft_diameter + 3);\n        \n        // Hollow core\n        cylinder(h=grip_length + 2, d=shaft_diameter);\n    }\n    \n    // Grip texture rings\n    for(z = [-grip_length/2 + 3 : 3 : grip_length/2 - 3]) {\n        translate([0, 0, z])\n        difference() {\n            cylinder(h=1.5, d=shaft_diameter + 3.5);\n            cylinder(h=2, d=shaft_diameter + 3);\n        }\n    }\n}\n\n// Assemble the driver\nunion() {\n    // Position head at origin\n    driver_head();\n    \n    // Attach hosel\n    hosel();\n    \n    // Add shaft extending upwards\n    shaft();\n    \n    // Add grip at top\n    grip();\n}\n\n// Add alignment aid on crown\ntranslate([0, driver_head_height/2 - 1, driver_head_depth/4])\ncube([1.5, 1, driver_head_depth/3], center=true);\n\n// Add brand badge on back\ntranslate([0, 0, -driver_head_depth/2 + 5])\ndifference() {\n    cube([12, 8, 0.5], center=true);\n    translate([0, 0, -0.3])\n    cube([10, 6, 1], center=true);\n}",
    "renders": true
  },
  {
    "sports_equipment": "mechanic",
    "openscad_code": "// Adjustable Mechanic's Creeper\n// A low-profile wheeled platform for working under vehicles\n// Overall dimensions: 400mm x 200mm x 100mm (when folded)\n\n// Main parameters\n$fn = 20;\nframe_thickness = 4;\npadding_thickness = 8;\nwheel_diameter = 20;\nwheel_width = 8;\n\n// Main platform frame\nmodule platform_frame() {\n    // Bottom frame rails\n    translate([0, 0, padding_thickness])\n    cube([400 - frame_thickness*2, 200 - frame_thickness*2, frame_thickness], center=true);\n    \n    // Side rails\n    translate([0, (200 - frame_thickness)/2, padding_thickness + frame_thickness/2])\n    cube([400 - frame_thickness*2, frame_thickness, frame_thickness], center=true);\n    \n    translate([0, -(200 - frame_thickness)/2, padding_thickness + frame_thickness/2])\n    cube([400 - frame_thickness*2, frame_thickness, frame_thickness], center=true);\n    \n    // Cross supports\n    for(i = [-180, -60, 60, 180]) {\n        translate([i, 0, padding_thickness + frame_thickness/2])\n        cube([frame_thickness, 200 - frame_thickness*2, frame_thickness], center=true);\n    }\n}\n\n// Padded surface\nmodule padded_surface() {\n    translate([0, 0, padding_thickness + frame_thickness + padding_thickness/2])\n    cube([380, 180, padding_thickness], center=true);\n    \n    // Headrest section\n    translate([150, 0, padding_thickness + frame_thickness + padding_thickness + 10])\n    cube([100, 120, 20], center=true);\n}\n\n// Wheel assembly\nmodule wheel_assembly() {\n    // Wheel mounts\n    translate([180, 90, wheel_diameter/2])\n    rotate([0, 0, 45])\n    cube([wheel_width*2, wheel_width*2, 10], center=true);\n    \n    translate([180, -90, wheel_diameter/2])\n    rotate([0, 0, 45])\n    cube([wheel_width*2, wheel_width*2, 10], center=true);\n    \n    translate([-180, 90, wheel_diameter/2])\n    rotate([0, 0, 45])\n    cube([wheel_width*2, wheel_width*2, 10], center=true);\n    \n    translate([-180, -90, wheel_diameter/2])\n    rotate([0, 0, 45])\n    cube([wheel_width*2, wheel_width*2, 10], center=true);\n    \n    // Wheels\n    for(x = [-180, 180]) {\n        for(y = [-90, 90]) {\n            translate([x, y, wheel_diameter/2])\n            rotate([90, 0, 0])\n            cylinder(h=wheel_width, r=wheel_diameter/2, center=true);\n        }\n    }\n}\n\n// Tool tray\nmodule tool_tray() {\n    // Tray base\n    translate([-200, 0, padding_thickness + frame_thickness + 15])\n    cube([100, 160, 15], center=true);\n    \n    // Tray sides\n    difference() {\n        translate([-200, 0, padding_thickness + frame_thickness + 15 + 7.5])\n        cube([100, 160, 15], center=true);\n        translate([-200, 0, padding_thickness + frame_thickness + 15 + 7.5])\n        cube([90, 150, 20], center=true);\n    }\n}\n\n// Handle for pulling\nmodule handle() {\n    // Main handle bar\n    translate([200, 0, padding_thickness + frame_thickness + 20])\n    rotate([90, 0, 0])\n    cylinder(h=150, r=8, center=true);\n    \n    // Mounting brackets\n    translate([200, 75, padding_thickness + frame_thickness + 20])\n    rotate([90, 0, 0])\n    cylinder(h=20, r=12, center=true);\n    \n    translate([200, -75, padding_thickness + frame_thickness + 20])\n    rotate([90, 0, 0])\n    cylinder(h=20, r=12, center=true);\n}\n\n// Assemble the complete creeper\nunion() {\n    platform_frame();\n    padded_surface();\n    wheel_assembly();\n    tool_tray();\n    handle();\n}",
    "renders": true
  },
  {
    "sports_equipment": "inventor",
    "openscad_code": "// Inventor's Adjustable Wooden Drafting Table\n// Realistic style, medium complexity\n// 3D-printable at ~120 mm depth (Z-axis)\n\n// General parameters\ntable_depth = 120;\ntable_width = 100;\ntable_thickness = 2;\n\n// Tabletop angles\nangle_flat = 0;\nangle_draft = 30;\n\n// Leg and frame dimensions\nleg_width = 8;\nleg_depth = 8;\nleg_height = 90;\ncross_bar_d = 5;\n\n// Adjustment hardware\nknob_r = 4;\nknob_h = 3;\n\nmodule tabletop(angle) {\n    // Main top\n    translate([0, 0, leg_height + table_thickness/2])\n    rotate([angle, 0, 0])\n    cube([table_width, table_depth, table_thickness], center = true);\n    \n    // Front lip to hold drawings\n    translate([0, table_depth/2 - table_thickness/2, leg_height + table_thickness/2])\n    rotate([angle, 0, 0])\n    cube([table_width, table_thickness, 5], center = true);\n    \n    // Side rails\n    for (side = [-1, 1]) {\n        translate([side * table_width/2, 0, leg_height + table_thickness/2])\n        rotate([angle, 0, 0])\n        cube([table_thickness, table_depth, 6], center = true);\n    }\n}\n\nmodule leg(x, y) {\n    // Vertical post\n    translate([x, y, leg_height/2])\n    cube([leg_width, leg_depth, leg_height], center = true);\n    \n    // Foot pad\n    translate([x, y, -1])\n    cube([leg_width + 2, leg_depth + 2, 2], center = true);\n}\n\nmodule cross_bar(y, z) {\n    translate([0, y, z])\n    rotate([0, 90, 0])\n    cylinder(h = table_width - leg_width*2, r = cross_bar_d/2, center = true);\n}\n\nmodule hinge(x, y, z) {\n    // Hinge barrel\n    translate([x, y, z])\n    rotate([0, 0, 90])\n    cylinder(h = leg_width, r = 3, center = true);\n    \n    // Hinge pin\n    translate([x, y, z])\n    rotate([0, 0, 90])\n    cylinder(h = leg_width + 2, r = 1, center = true);\n}\n\nmodule adjustment_track(x, y, z) {\n    // Track rail\n    translate([x, y, z])\n    cube([leg_width, 2, 40], center = true);\n    \n    // Teeth for positioning\n    for (i = [0:4]) {\n        translate([x, y - 1, z - 20 + i*10 + 5])\n        cube([leg_width, 2, 1], center = true);\n    }\n}\n\nmodule adjustment_knob(x, y, z) {\n    // Knob\n    translate([x, y, z])\n    cylinder(h = knob_h, r = knob_r, center = true);\n    \n    // Grip ridges\n    for (i = [0:5]) {\n        rotate([0, 0, i*60])\n        translate([knob_r - 0.5, 0, knob_h/2])\n        cube([1, 0.5, knob_h], center = true);\n    }\n}\n\nmodule pencil_ledge() {\n    // Pencil tray\n    translate([0, table_depth/2 - 6, leg_height + 2])\n    cube([table_width - 10, 6, 4], center = true);\n    \n    // Dividers\n    for (i = [-1, 0, 1]) {\n        translate([i * 22, table_depth/2 - 3, leg_height + 2])\n        cube([2, 6, 4], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Tabletop at drafting angle\n    tabletop(angle_draft);\n    \n    // Four legs\n    for (x = [-1, 1])\n    for (y = [-1, 1])\n        leg(x * (table_width/2 - leg_width/2), y * (table_depth/2 - leg_depth/2));\n    \n    // Cross bars for stability\n    cross_bar(table_depth/2 - leg_depth/2, leg_height - 20);\n    cross_bar(-table_depth/2 + leg_depth/2, leg_height - 20);\n    \n    // Hinges connecting tabletop to back legs\n    hinge(table_width/2 - leg_width/2, -table_depth/2 + leg_depth/2, leg_height + table_thickness);\n    hinge(-table_width/2 + leg_width/2, -table_depth/2 + leg_depth/2, leg_height + table_thickness);\n    \n    // Adjustment tracks on front legs\n    adjustment_track(table_width/2 - leg_width/2, table_depth/2 - leg_depth/2, leg_height - 10);\n    adjustment_track(-table_width/2 + leg_width/2, table_depth/2 - leg_depth/2, leg_height - 10);\n    \n    // Adjustment knobs\n    adjustment_knob(table_width/2 - leg_width/2, table_depth/2 - leg_depth/2 + 5, leg_height + 10);\n    adjustment_knob(-table_width/2 + leg_width/2, table_depth/2 - leg_depth/2 + 5, leg_height + 10);\n    \n    // Pencil ledge\n    pencil_ledge();\n}",
    "renders": true
  },
  {
    "sports_equipment": "scientist",
    "openscad_code": "// Scientist Lab Stool with Adjustable Height and Footrest\n// Realistic style, medium complexity\n\n$fn = 50; // Smooth curves\n\n// Overall dimensions\nmodule stool() {\n    // Base parameters\n    base_diameter = 120;\n    base_height = 15;\n    footrest_height = 150;\n    seat_diameter = 320;\n    seat_thickness = 25;\n    leg_diameter = 25;\n    gas_spring_diameter = 35;\n    \n    // Base star with 5 legs\n    union() {\n        // Central base cylinder\n        cylinder(h=base_height, d=base_diameter, center=true);\n        \n        // Five support legs\n        for (i = [0:4]) {\n            rotate([0, 0, i*72]) \n            translate([base_diameter/2 - leg_diameter/2, 0, -base_height/2]) \n            cube([base_diameter/2, leg_diameter, base_height], center=true);\n        }\n        \n        // Caster wheels (simplified as spheres)\n        for (i = [0:4]) {\n            rotate([0, 0, i*72]) \n            translate([base_diameter/2 + 15, 0, -base_height - 10]) \n            sphere(d=25);\n        }\n    }\n}\n\n// Gas spring cylinder\nmodule gas_spring() {\n    cylinder(h=200, d=gas_spring_diameter, center=true);\n    \n    // Adjustment lever\n    translate([gas_spring_diameter/2 + 5, 0, 50]) \n    rotate([0, 90, 0]) \n    cylinder(h=40, d=8);\n}\n\n// Footrest ring\nmodule footrest() {\n    difference() {\n        // Main ring\n        cylinder(h=15, d1=250, d2=260, center=true);\n        \n        // Center hole\n        cylinder(h=20, d=gas_spring_diameter + 10, center=true);\n    }\n    \n    // Support arms to center post\n    for (i = [0:2]) {\n        rotate([0, 0, i*120]) \n        translate([90, 0, 0]) \n        cube([80, 15, 15], center=true);\n    }\n}\n\n// Seat with cushion\nmodule seat() {\n    // Seat base\n    difference() {\n        cylinder(h=seat_thickness, d=seat_diameter, center=true);\n        \n        // Center hole for gas spring\n        cylinder(h=seat_thickness + 2, d=gas_spring_diameter - 5, center=true);\n    }\n    \n    // Cushion top (slightly larger and rounded)\n    translate([0, 0, seat_thickness/2]) \n    cylinder(h=20, d1=seat_diameter + 10, d2=seat_diameter + 5, center=true);\n    \n    // Seat adjustment mechanism\n    translate([0, 0, -seat_thickness/2 - 5]) \n    cylinder(h=15, d=gas_spring_diameter + 20, center=true);\n    \n    // Mounting screws (simplified)\n    for (i = [0:3]) {\n        rotate([0, 0, i*90]) \n        translate([seat_diameter/2 - 20, 0, -seat_thickness/2 - 7]) \n        cylinder(h=5, d=5);\n    }\n}\n\n// Assembly\nunion() {\n    // Base at bottom\n    stool();\n    \n    // Gas spring\n    translate([0, 0, footrest_height/2]) \n    gas_spring();\n    \n    // Footrest\n    translate([0, 0, footrest_height]) \n    footrest();\n    \n    // Seat at top\n    translate([0, 0, footrest_height + 100]) \n    seat();\n}",
    "renders": true
  },
  {
    "sports_equipment": "doctor",
    "openscad_code": "// Doctor's Office Examination Stool\n// Realistic style, medium complexity\n// Approx. 120mm tall\n\n// Parameters\nstool_height = 120;\nseat_diameter = 340;\nseat_thickness = 40;\nbase_diameter = 380;\npole_diameter = 50;\ncaster_diameter = 40;\ncaster_height = 30;\nbackrest_width = 260;\nbackrest_height = 180;\nbackrest_thickness = 20;\nlever_length = 80;\nlever_diameter = 12;\n\n// Main stool assembly\nmodule stool() {\n    // Base with 5 casters\n    union() {\n        difference() {\n            // Main base cylinder\n            cylinder(h=20, d=base_diameter, $fn=64);\n            \n            // Central hole for pole\n            translate([0, 0, -1])\n                cylinder(h=22, d=pole_diameter + 4, $fn=32);\n                \n            // Caster mounting holes\n            for(i = [0:4]) {\n                rotate([0, 0, i * 72])\n                    translate([base_diameter/2 - 30, 0, 10])\n                        rotate([90, 0, 0])\n                            cylinder(h=40, d=20, $fn=16);\n            }\n        }\n        \n        // 5 casters\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n                translate([base_diameter/2 - 30, 0, -caster_height/2])\n                    union() {\n                        // Caster wheel\n                        rotate([90, 0, 0])\n                            cylinder(h=caster_diameter, d=caster_diameter, $fn=16);\n                        \n                        // Caster fork\n                        translate([0, 0, caster_height/2])\n                            difference() {\n                                cylinder(h=caster_height, d1=20, d2=30, $fn=16);\n                                cylinder(h=caster_height + 2, d=10, $fn=16);\n                            }\n                    }\n        }\n    }\n    \n    // Central support pole\n    translate([0, 0, 20])\n        cylinder(h=stool_height - seat_thickness - 20, d=pole_diameter, $fn=32);\n    \n    // Height adjustment mechanism sleeve\n    translate([0, 0, stool_height - seat_thickness - 30])\n        difference() {\n            cylinder(h=40, d=pole_diameter + 10, $fn=32);\n            cylinder(h=42, d=pole_diameter, $fn=32);\n        }\n    \n    // Height adjustment lever\n    translate([pole_diameter/2 + lever_length/2, 0, stool_height - seat_thickness - 20])\n        rotate([0, 90, 0])\n            cylinder(h=lever_length, d=lever_diameter, $fn=16);\n    \n    // Seat cushion\n    translate([0, 0, stool_height - seat_thickness])\n        difference() {\n            // Main seat\n            cylinder(h=seat_thickness, d=seat_diameter, $fn=64);\n            \n            // Ergonomic contour\n            translate([0, 0, -1])\n                cylinder(h=seat_thickness/2 + 2, d1=seat_diameter, d2=seat_diameter - 40, $fn=64);\n            \n            // Central hole\n            translate([0, 0, -1])\n                cylinder(h=seat_thickness + 2, d=30, $fn=32);\n        }\n    \n    // Backrest support pole\n    translate([-seat_diameter/2 + 50, 0, stool_height - 10])\n        cylinder(h=backrest_height, d=25, $fn=16);\n    \n    // Backrest adjustment mechanism\n    translate([-seat_diameter/2 + 50, 0, stool_height + backrest_height/2])\n        difference() {\n            cube([30, 20, backrest_height], center=true);\n            cube([32, 22, backrest_height + 4], center=true);\n        }\n    \n    // Backrest pad\n    translate([-seat_diameter/2 + 50 - backrest_thickness/2, 0, stool_height + backrest_height - 20])\n        difference() {\n            scale([1, 1.2, 1])\n                cube([backrest_thickness, backrest_width, 40], center=true);\n            \n            // Rounded edges\n            translate([-backrest_thickness/2, -backrest_width/2 + 10, 0])\n                sphere(d=backrest_thickness, $fn=16);\n            translate([-backrest_thickness/2, backrest_width/2 - 10, 0])\n                sphere(d=backrest_thickness, $fn=16);\n        }\n}\n\n// Render the stool\nstool();",
    "renders": true
  },
  {
    "sports_equipment": "nurse",
    "openscad_code": "// Nurse Chair - Realistic Style, Medium Complexity\n// 3D printable nurse chair with wheels and adjustable height\n// Overall dimensions: 120mm height, 50mm seat diameter\n\n$fa = 2;\n$fs = 0.5;\n\n// Main assembly\nmodule nurse_chair() {\n    // Base with 5 wheels\n    translate([0, 0, 0]) base_with_wheels();\n    \n    // Gas lift cylinder\n    translate([0, 0, 40]) gas_lift();\n    \n    // Seat mechanism\n    translate([0, 0, 80]) seat_mechanism();\n    \n    // Seat cushion\n    translate([0, 0, 90]) seat_cushion();\n    \n    // Backrest\n    translate([0, -20, 95]) backrest();\n}\n\n// Base with 5 casters\nmodule base_with_wheels() {\n    // Central hub\n    cylinder(h=15, r=25, $fn=32);\n    \n    // Wheel spokes\n    for(i = [0:4]) {\n        rotate([0, 0, i*72]) {\n            // Spoke\n            translate([20, 0, 7.5]) cube([25, 6, 3], center=true);\n            \n            // Caster wheel\n            translate([42, 0, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=8, r=6, $fn=16);\n                    translate([0, 0, -4]) sphere(r=6, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    // Outer cylinder\n    cylinder(h=40, r=10, $fn=32);\n    \n    // Inner cylinder detail\n    translate([0, 0, 2]) cylinder(h=36, r=8, $fn=32);\n    \n    // Adjustment lever\n    translate([10, 0, 35]) rotate([0, 90, 0]) \n        cylinder(h=15, r=2, $fn=16);\n}\n\n// Seat adjustment mechanism\nmodule seat_mechanism() {\n    // Main plate\n    cylinder(h=3, r=20, $fn=32);\n    \n    // Pivot joint\n    translate([0, 0, 3]) cylinder(h=7, r=15, $fn=32);\n    \n    // Adjustment handle\n    translate([15, 15, 3]) rotate([0, 0, 45])\n        cube([2, 20, 4], center=true);\n}\n\n// Seat cushion\nmodule seat_cushion() {\n    difference() {\n        // Main cushion\n        scale([1, 1.2, 0.4]) sphere(r=25, $fn=32);\n        \n        // Remove bottom part to make flat\n        translate([0, 0, -10]) cube([100, 100, 20], center=true);\n    }\n    \n    // Seat edge piping\n    translate([0, 0, 2]) {\n        scale([1, 1.2, 0.35]) sphere(r=25.5, $fn=32);\n        translate([0, 0, -10]) cube([100, 100, 20], center=true);\n    }\n}\n\n// Backrest\nmodule backrest() {\n    // Backrest post\n    translate([0, 0, 0]) cylinder(h=30, r=4, $fn=16);\n    \n    // Backrest cushion\n    translate([0, 15, 25]) {\n        difference() {\n            // Main cushion\n            scale([1, 0.8, 0.6]) sphere(r=25, $fn=32);\n            \n            // Remove bottom part\n            translate([0, 0, -15]) cube([100, 100, 30], center=true);\n        }\n        \n        // Backrest edge piping\n        translate([0, 0, 2]) {\n            scale([1, 0.8, 0.55]) sphere(r=25.5, $fn=32);\n            translate([0, 0, -15]) cube([100, 100, 30], center=true);\n        }\n    }\n}\n\n// Generate the chair\nnurse_chair();",
    "renders": true
  },
  {
    "sports_equipment": "chef",
    "openscad_code": "// Chef's Professional Rolling Kitchen Cart (Medium Complexity)\n// Overall size: ~140mm W x ~90mm D x ~220mm H\n\n$fn = 32;\n\n// Main module\nmodule kitchen_cart() {\n    \n    // Base frame structure\n    difference() {\n        union() {\n            // Bottom shelf\n            translate([0, 0, 10]) cube([120, 80, 4], center = true);\n            \n            // Top work surface\n            translate([0, 0, 210]) cube([130, 90, 6], center = true);\n            \n            // Four corner posts (legs)\n            for(x = [-55, 55])\n                for(y = [-35, 35])\n                    translate([x, y, 110]) \n                        cylinder(h = 200, d = 8, center = true);\n            \n            // Side rails for rigidity\n            translate([0, 35, 60]) cube([122, 4, 8], center = true);\n            translate([0, -35, 60]) cube([122, 4, 8], center = true);\n            translate([55, 0, 60]) cube([4, 78, 8], center = true);\n            translate([-55, 0, 60]) cube([4, 78, 8], center = true);\n        }\n        \n        // Hollow out posts for material saving\n        for(x = [-55, 55])\n            for(y = [-35, 35])\n                translate([x, y, 110]) \n                    cylinder(h = 200, d = 4, center = true);\n    }\n    \n    // Middle shelf with slats\n    translate([0, 0, 110]) {\n        difference() {\n            cube([118, 78, 4], center = true);\n            // Create slat openings\n            for(i = [-40:10:40])\n                translate([i, 0, 0]) cube([8, 82, 6], center = true);\n        }\n    }\n    \n    // Towel bar on one side\n    translate([65, 0, 150]) rotate([90, 0, 0]) \n        cylinder(h = 50, d = 6);\n    \n    // Handle bar on other side\n    translate([-65, 0, 150]) rotate([90, 0, 0]) \n        cylinder(h = 50, d = 6);\n    \n    // Wheels (2 fixed, 2 swivel)\n    // Fixed wheels back\n    for(y = [-30, 30]) {\n        translate([55, y, 5]) {\n            cylinder(h = 4, d = 12);\n            translate([0, 0, -2]) rotate([90, 0, 0]) \n                cylinder(h = 8, d = 8);\n        }\n    }\n    \n    // Swivel wheels front\n    for(y = [-30, 30]) {\n        translate([-55, y, 5]) {\n            cylinder(h = 4, d = 12);\n            translate([0, 0, -2]) rotate([90, 0, 0]) \n                cylinder(h = 8, d = 8);\n        }\n    }\n    \n    // Drawer unit\n    translate([0, 25, 160]) {\n        difference() {\n            // Drawer housing\n            cube([60, 30, 40], center = true);\n            // Drawer cavity\n            translate([0, 0, -5]) cube([56, 26, 34], center = true);\n        }\n        // Drawer front\n        translate([0, 15, 160]) cube([62, 2, 42], center = true);\n        // Drawer handle\n        translate([0, 16, 160]) cube([20, 1, 6], center = true);\n    }\n    \n    // Knife holder block on top\n    translate([40, 0, 213]) {\n        difference() {\n            cube([20, 40, 15], center = true);\n            // Knife slots\n            for(i = [-15:5:15])\n                translate([0, i, 0]) cube([4, 2, 20], center = true);\n        }\n    }\n    \n    // Spice rack on side\n    translate([0, 40, 200]) {\n        // Rack base\n        cube([30, 4, 20], center = true);\n        // Small bottles (simplified)\n        for(i = [-10:5:10])\n            translate([i, 2, 0]) \n                cylinder(h = 12, d = 6);\n    }\n}\n\n// Render the model\nkitchen_cart();",
    "renders": true
  },
  {
    "sports_equipment": "baker",
    "openscad_code": "// Baker Rack - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm W x 40mm D x 100mm H\n\nmodule leg(w, d, h) {\n    // Tapered leg with slight chamfer\n    difference() {\n        cylinder(h=h, d1=w*1.2, d2=w, $fn=8);\n        translate([0, 0, -1])\n            cylinder(h=h+2, d1=w*1.1, d2=w*0.9, $fn=8);\n    }\n}\n\nmodule shelf(w, d, t) {\n    // Shelf with front lip and drainage slots\n    difference() {\n        union() {\n            // Main shelf\n            cube([w, d, t]);\n            // Front lip\n            translate([-w/2, d/2-t, 0])\n                cube([w, t, 5]);\n            // Side lips\n            translate([-w/2, -d/2, 0])\n                cube([t, d, 5]);\n            translate([w/2-t, -d/2, 0])\n                cube([t, d, 5]);\n        }\n        // Drainage slots\n        for(x = [-w/2+5 : 10 : w/2-5]) {\n            translate([x, -d/2+2, -1])\n                cube([2, d-4, t+2]);\n        }\n    }\n}\n\nmodule frame_support(w, d, h) {\n    // Cross-brace between legs\n    cube([w, d, h], center=true);\n}\n\nmodule hook() {\n    // Simple S-hook for utensils\n    rotate([90, 0, 0])\n        difference() {\n            union() {\n                cylinder(h=3, d=4, $fn=16);\n                translate([0, 6, 0])\n                    cylinder(h=3, d=4, $fn=16);\n                rotate_extrude(angle=180, $fn=32)\n                    translate([6, 0, 0])\n                        circle(d=2, $fn=16);\n            }\n            cylinder(h=10, d=2, center=true, $fn=16);\n        }\n}\n\n// Main assembly\nunion() {\n    // Bottom frame\n    translate([0, 0, 5])\n        frame_support(74, 34, 2);\n    \n    // Legs\n    translate([-35, -15, 5]) leg(4, 4, 90);\n    translate([35, -15, 5]) leg(4, 4, 90);\n    translate([-35, 15, 5]) leg(4, 4, 90);\n    translate([35, 15, 5]) leg(4, 4, 90);\n    \n    // Shelves\n    translate([0, 0, 15]) shelf(70, 30, 2);\n    translate([0, 0, 45]) shelf(70, 30, 2);\n    translate([0, 0, 75]) shelf(70, 30, 2);\n    \n    // Back frame supports\n    translate([0, 17, 30]) frame_support(74, 2, 50);\n    translate([0, 17, 60]) frame_support(74, 2, 20);\n    \n    // Side frame supports\n    translate([-35, 0, 30]) rotate([0, 0, 90]) frame_support(30, 2, 50);\n    translate([35, 0, 30]) rotate([0, 0, 90]) frame_support(30, 2, 50);\n    \n    // Top rail\n    translate([0, 17, 95])\n        cube([74, 2, 5], center=true);\n    \n    // Hooks\n    for(x = [-25 : 15 : 25]) {\n        translate([x, 17, 100]) hook();\n    }\n    \n    // Small details - screw heads\n    for(pos = [[-30, -12, 15], [30, -12, 15], [-30, 12, 15], [30, 12, 15]]) {\n        translate(pos)\n            cylinder(h=1, d=4, $fn=12);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "artist",
    "openscad_code": "// Artist Easel - Medium complexity realistic style\n// Overall dimensions: 100mm (H) x 60mm (W) x 70mm (D)\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main easel frame\nmodule easel_frame() {\n    // Left leg\n    translate([-25, 0, 0]) {\n        rotate([0, -10, 0]) {\n            cube([wall_thickness, 15, 95], center = true);\n        }\n    }\n    \n    // Right leg\n    translate([25, 0, 0]) {\n        rotate([0, 10, 0]) {\n            cube([wall_thickness, 15, 95], center = true);\n        }\n    }\n    \n    // Rear support leg\n    translate([0, 30, 0]) {\n        rotate([0, 0, 0]) {\n            cube([wall_thickness, 10, 90], center = true);\n        }\n    }\n}\n\n// Canvas support ledge\nmodule canvas_support() {\n    // Main support bar\n    translate([0, 0, -35]) {\n        cube([50, wall_thickness, 5], center = true);\n    }\n    \n    // Small lip to hold canvas\n    translate([0, 2.5, -35]) {\n        cube([50, 2, 3], center = true);\n    }\n}\n\n// Canvas clamp mechanism\nmodule canvas_clamp() {\n    // Top clamp bar\n    translate([0, 0, 35]) {\n        cube([45, wall_thickness, 5], center = true);\n    }\n    \n    // Clamp screws (simplified)\n    for(x = [-15, 0, 15]) {\n        translate([x, wall_thickness/2 + 2.5, 35]) {\n            cylinder(h = 5, r = 2, center = true);\n        }\n    }\n}\n\n// Cross braces for stability\nmodule cross_braces() {\n    // Lower brace\n    translate([0, 15, -25]) {\n        rotate([0, 0, 30]) {\n            cube([wall_thickness, 35, 3], center = true);\n        }\n    }\n    \n    // Upper brace\n    translate([0, 10, 15]) {\n        rotate([0, 0, -30]) {\n            cube([wall_thickness, 30, 3], center = true);\n        }\n    }\n}\n\n// Adjustment knobs\nmodule adjustment_knobs() {\n    // Left knob\n    translate([-25, -8, 0]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 6, r = 4, center = true);\n        }\n    }\n    \n    // Right knob\n    translate([25, -8, 0]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 6, r = 4, center = true);\n        }\n    }\n}\n\n// Base support feet\nmodule base_feet() {\n    // Front feet\n    translate([-25, 0, -47.5]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = 20, r = 3, center = true);\n        }\n    }\n    \n    translate([25, 0, -47.5]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = 20, r = 3, center = true);\n        }\n    }\n    \n    // Rear foot\n    translate([0, 35, -45]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = 25, r = 3, center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    easel_frame();\n    canvas_support();\n    canvas_clamp();\n    cross_braces();\n    adjustment_knobs();\n    base_feet();\n}",
    "renders": true
  },
  {
    "sports_equipment": "musician",
    "openscad_code": "// Musician Chair - A realistic 3D printable chair designed for musicians\n// Features music stand attachment, cushioned seat, and ergonomic backrest\n// Overall dimensions: 120mm height x 100mm width x 110mm depth\n\n// Chair frame parameters\nseat_height = 45;\nseat_width = 100;\nseat_depth = 110;\nbackrest_height = 75;\nleg_height = seat_height - 12;\nleg_thickness = 8;\n\n// Cushion parameters\ncushion_thickness = 12;\n\n// Music stand parameters\nstand_height = 80;\nstand_width = 60;\nstand_thickness = 3;\n\n// 3D printing parameters\nwall_thickness = 2;\n\nmodule chair_frame() {\n    // Back legs\n    translate([seat_width/2 - leg_thickness/2, seat_depth/2 - leg_thickness/2, 0])\n        cylinder(h=leg_height, d=leg_thickness, $fn=16);\n    translate([-seat_width/2 + leg_thickness/2, seat_depth/2 - leg_thickness/2, 0])\n        cylinder(h=leg_height, d=leg_thickness, $fn=16);\n    \n    // Front legs\n    translate([seat_width/2 - leg_thickness/2, -seat_depth/2 + leg_thickness/2, 0])\n        cylinder(h=leg_height, d=leg_thickness, $fn=16);\n    translate([-seat_width/2 + leg_thickness/2, -seat_depth/2 + leg_thickness/2, 0])\n        cylinder(h=leg_height, d=leg_thickness, $fn=16);\n    \n    // Seat frame\n    translate([0, 0, leg_height])\n        cube([seat_width, seat_depth, wall_thickness], center=true);\n    \n    // Backrest frame\n    translate([0, seat_depth/2 - wall_thickness/2, leg_height + backrest_height/2])\n        cube([seat_width, wall_thickness, backrest_height], center=true);\n    \n    // Cross supports\n    translate([0, 0, leg_height/2])\n        cube([seat_width - leg_thickness, wall_thickness, leg_thickness], center=true);\n    translate([0, 0, leg_height/3])\n        rotate([0, 0, 90])\n            cube([seat_depth - leg_thickness, wall_thickness, leg_thickness], center=true);\n}\n\nmodule cushioned_seat() {\n    // Main cushion\n    translate([0, 0, leg_height + cushion_thickness/2 + wall_thickness/2])\n        cube([seat_width - 10, seat_depth - 10, cushion_thickness], center=true);\n    \n    // Cushion detail - button tufts\n    for(x = [-30, 0, 30])\n        for(y = [-30, 0, 30])\n            translate([x, y, leg_height + cushion_thickness + wall_thickness/2])\n                cylinder(h=2, d=5, $fn=16);\n}\n\nmodule backrest_cushion() {\n    // Main backrest cushion\n    translate([0, seat_depth/2 - 5, leg_height + backrest_height/2])\n        cube([seat_width - 10, 10, backrest_height - 10], center=true);\n    \n    // Lumbar support curve\n    difference() {\n        translate([0, seat_depth/2 - 5, leg_height + 25])\n            cube([seat_width - 10, 12, 30], center=true);\n        translate([0, seat_depth/2 - 2, leg_height + 25])\n            cube([seat_width - 8, 15, 35], center=true);\n    }\n}\n\nmodule music_stand_attachment() {\n    // Vertical pole\n    translate([seat_width/2 + 10, 0, stand_height/2])\n        cylinder(h=stand_height, d=6, $fn=16);\n    \n    // Stand platform\n    translate([seat_width/2 + 10 + stand_width/2, 0, stand_height - 20])\n        cube([stand_width, stand_thickness, stand_height/2], center=true);\n    \n    // Music rest lip\n    translate([seat_width/2 + 10 + stand_width/2, stand_thickness/2 + 2, stand_height - 35])\n        cube([stand_width, 5, 5], center=true);\n    \n    // Support braces\n    translate([seat_width/2 + 10, 0, stand_height/3])\n        rotate([90, 0, 0])\n            cylinder(h=15, d1=6, d2=3, $fn=16);\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    cushioned_seat();\n    backrest_cushion();\n    music_stand_attachment();\n}",
    "renders": true
  },
  {
    "sports_equipment": "dancer",
    "openscad_code": "// Dancer-inspired barstool\n// A graceful, slim-profile barstool that evokes the poise of a ballet dancer\n\n// Overall dimensions\nseat_d = 300;           // seat diameter\nseat_h = 20;            // seat thickness\nleg_top_r = 8;          // leg radius at top\nleg_bottom_r = 12;      // leg radius at bottom\nleg_h = 650;            // leg height\nfootrest_h = 260;       // footrest height from floor\nbackrest_h = 300;       // backrest height above seat\ncrossbar_r = 6;         // crossbar radius\n\n$fn = 36;               // smooth curves\n\n// Build the stool\nunion() {\n    // Seat – gentle cushion with slight dome\n    translate([0, 0, leg_h + seat_h/2])\n        scale([1, 1, 0.5])\n            sphere(d = seat_d);\n\n    // Seat base plate (2 mm thick)\n    translate([0, 0, leg_h])\n        cylinder(h = seat_h, d = seat_d - 8);\n\n    // Four legs in a tapered \"plié\" stance\n    module leg(angle, rot) {\n        translate([0, 0, footrest_h/2])\n            rotate([angle, 0, rot])\n                cylinder(h1 = leg_top_r*2,\n                         h2 = leg_bottom_r*2,\n                         h = leg_h - footrest_h/2);\n    }\n\n    for(a = [0, 90, 180, 270])\n        leg(5, a);\n\n    // Footrest ring – dancer's practice barre\n    translate([0, 0, footrest_h])\n        difference() {\n            cylinder(h = 20, r = seat_d/2 - 20);\n            cylinder(h = 22, r = seat_d/2 - 20 - 8);\n        }\n\n    // Backrest – curved like a dancer's spine\n    translate([0, 0, leg_h + seat_h + backrest_h/2])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = seat_d - 40, r = 15);\n                cylinder(h = seat_d - 38, r = 13);\n            }\n\n    // Crossbars for structural integrity\n    module crossbar(a) {\n        rotate([0, 0, a])\n            rotate([90, 0, 0])\n                cylinder(h = seat_d*0.7, r = crossbar_r);\n    }\n\n    // Two diagonal crossbars\n    crossbar(30);\n    crossbar(120);\n}",
    "renders": true
  },
  {
    "sports_equipment": "prince",
    "openscad_code": "// Prince Throne Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm W x 100mm D x 140mm H\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\nseat_height = 50;\nleg_height = 40;\n\n// Main throne structure\nmodule throne_chair() {\n    // Seat base\n    translate([0, 0, leg_height])\n    cube([80, 60, 8], center = true);\n    \n    // Seat cushion\n    translate([0, 5, leg_height + 8])\n    scale([1, 0.9, 1])\n    sphere(d = 70);\n    \n    // Backrest frame\n    translate([0, -25, leg_height + 45])\n    cube([75, 8, 60], center = true);\n    \n    // Backrest decorative top\n    translate([0, -25, leg_height + 45 + 35])\n    intersection() {\n        cube([85, 10, 25], center = true);\n        sphere(d = 90);\n    }\n    \n    // Left armrest\n    translate([-37, 20, leg_height + 25])\n    cube([8, 40, 30], center = true);\n    \n    // Right armrest\n    translate([37, 20, leg_height + 25])\n    cube([8, 40, 30], center = true);\n    \n    // Legs\n    for(x = [-30, 30])\n    for(y = [-20, 20]) {\n        translate([x, y, leg_height/2])\n        cylinder(h = leg_height, d = 8, center = true);\n    }\n    \n    // Cross support bars\n    translate([0, -20, leg_height - 10])\n    cube([64, 4, 4], center = true);\n    \n    translate([0, 20, leg_height - 10])\n    cube([64, 4, 4], center = true);\n    \n    // Decorative crown on backrest\n    translate([0, -25, leg_height + 45 + 45])\n    crown();\n    \n    // Armrest decorative spheres\n    sphere_pos = [[-37, 38, leg_height + 40], [37, 38, leg_height + 40]];\n    for(pos = sphere_pos) {\n        translate(pos)\n        sphere(d = 12);\n    }\n}\n\n// Crown decoration module\nmodule crown() {\n    union() {\n        // Base ring\n        translate([0, 0, 0])\n        cylinder(h = 3, d = 60, center = true);\n        \n        // Crown points\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([0, 20, 8])\n            cylinder(h = 12, d1 = 3, d2 = 0);\n        }\n        \n        // Center jewel\n        translate([0, 0, 10])\n        sphere(d = 8);\n    }\n}\n\n// Velvet cushion texture simulation\nmodule cushion_texture() {\n    difference() {\n        sphere(d = 70);\n        // Small dimples for fabric texture\n        for(i = [0:8]) {\n            for(j = [0:4]) {\n                rotate([0, 0, i * 45])\n                translate([j * 6 - 15, 0, 30])\n                sphere(d = 3);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    throne_chair();\n    \n    // Replace seat cushion with textured version\n    translate([0, 5, leg_height + 8])\n    scale([1, 0.9, 1])\n    cushion_texture();\n}\n\n// Floor reference (comment out for printing)\n// %cube([200, 200, 1], center = true);",
    "renders": true
  },
  {
    "sports_equipment": "princess",
    "openscad_code": "// Princess Vanity Table (realistic style, medium complexity)\n// Overall size: ~100mm wide x 70mm deep x 120mm tall\n\n$fa = 2;\n$fs = 0.5;\n\nmodule vanity_table() {\n    // Table top with rounded edges\n    difference() {\n        translate([0, 0, 65]) \n            minkowski() {\n                cube([90, 60, 4], center=true);\n                cylinder(r=2, h=0.1, center=true);\n            }\n        \n        // Mirror cutout\n        translate([0, -20, 66]) \n            cube([40, 8, 6], center=true);\n    }\n    \n    // Front drawer\n    translate([0, 15, 52])\n        cube([70, 25, 10], center=true);\n    \n    // Drawer handle\n    translate([0, 28, 57])\n        rotate([90, 0, 0])\n            cylinder(h=8, r1=3, r2=2, center=true);\n    \n    // Legs (4 tapered legs)\n    for(x=[-35, 35])\n        for(y=[-20, 20]) {\n            translate([x, y, 32]) {\n                cylinder(h1=30, r1=4, r2=3);\n            }\n        }\n    \n    // Horizontal supports between legs\n    for(y=[-20, 20]) {\n        translate([0, y, 35])\n            cube([80, 2, 5], center=true);\n    }\n    \n    // Back support panel\n    translate([0, 30, 45])\n        cube([86, 2, 25], center=true);\n    \n    // Mirror frame\n    translate([0, -30, 85])\n        difference() {\n            // Frame body\n            cube([44, 6, 50], center=true);\n            \n            // Mirror opening\n            translate([0, 0, 5])\n                cube([36, 4, 34], center=true);\n        }\n    \n    // Mirror glass (thin plate)\n    translate([0, -28, 100])\n        cube([34, 0.5, 32], center=true);\n    \n    // Decorative scrolls on mirror\n    for(x=[-15, 15])\n        translate([x, -30, 112])\n            rotate([0, 90, 0])\n                cylinder(h=8, r1=2, r2=4);\n    \n    // Queen Anne style feet\n    for(x=[-35, 35])\n        for(y=[-20, 20]) {\n            translate([x, y, 16]) {\n                difference() {\n                    cylinder(h=15, r1=5, r2=4);\n                    translate([0, 2, 0])\n                        cube([10, 6, 15], center=true);\n                }\n            }\n        }\n    \n    // Small jewelry tray on top\n    translate([25, 10, 69])\n        difference() {\n            cube([25, 20, 3], center=true);\n            translate([0, 0, 1])\n                cube([22, 17, 3], center=true);\n        }\n    \n    // Ornate back panel detail\n    translate([0, 27, 55])\n        for(i=[-3:3])\n            translate([i*12, 0, 0])\n                cylinder(h=15, r=2);\n}\n\nvanity_table();",
    "renders": true
  },
  {
    "sports_equipment": "king",
    "openscad_code": "// King Chair - Realistic Medium Complexity\n// Overall dimensions: 80mm width x 90mm depth x 120mm height\n\n$fn = 32;\n\nmodule king_chair() {\n    // Seat base\n    translate([0, 0, 40]) {\n        difference() {\n            // Main seat block\n            cube([70, 80, 4], center = true);\n            \n            // Lightening holes\n            for (x = [-20, 0, 20]) {\n                for (y = [-25, 0, 25]) {\n                    translate([x, y, -1]) \n                        cylinder(h=6, r=8);\n                }\n            }\n        }\n    }\n    \n    // Seat cushion\n    translate([0, 0, 46]) {\n        cube([65, 75, 8], center = true);\n    }\n    \n    // Backrest frame\n    translate([0, -35, 85]) {\n        // Left post\n        translate([-30, 0, 0]) {\n            cube([6, 10, 80], center = true);\n        }\n        // Right post  \n        translate([30, 0, 0]) {\n            cube([6, 10, 80], center = true);\n        }\n        // Top cross bar\n        translate([0, 0, 40]) {\n            cube([66, 8, 6], center = true);\n        }\n        // Mid support\n        translate([0, 0, 20]) {\n            cube([66, 8, 4], center = true);\n        }\n    }\n    \n    // Backrest slats\n    for (i = [-20, -10, 0, 10, 20]) {\n        translate([i, -35, 70]) {\n            cube([8, 6, 30], center = true);\n        }\n    }\n    \n    // Leg assemblies\n    module leg_assembly(x_pos, y_pos) {\n        translate([x_pos, y_pos, 20]) {\n            // Main leg\n            cube([8, 8, 40], center = true);\n            \n            // Front brace\n            if (y_pos > 0) {\n                translate([0, 15, -15]) {\n                    cube([8, 30, 6], center = true);\n                }\n            }\n            \n            // Side brace\n            if (abs(x_pos) > 20) {\n                translate([(x_pos > 0 ? 15 : -15), 0, -15]) {\n                    cube([30, 8, 6], center = true);\n                }\n            }\n            \n            // Foot pad\n            translate([0, 0, -22]) {\n                cube([12, 12, 4], center = true);\n            }\n        }\n    }\n    \n    // Position legs\n    leg_assembly(-30, 30);\n    leg_assembly(30, 30);\n    leg_assembly(-30, -30);\n    leg_assembly(30, -30);\n    \n    // Armrests\n    module armrest(x_pos) {\n        translate([x_pos, 20, 65]) {\n            // Support post\n            cube([6, 6, 50], center = true);\n            \n            // Arm pad\n            translate([0, 15, 20]) {\n                cube([50, 30, 6], center = true);\n            }\n            \n            // Reinforcement strut\n            translate([0, 10, 5]) {\n                cube([40, 6, 4], center = true);\n            }\n        }\n    }\n    \n    armrest(-35);\n    armrest(35);\n    \n    // Ornamentation - crown detail on backrest\n    translate([0, -35, 105]) {\n        // Central sphere\n        sphere(r=8);\n        \n        // Crown points\n        for (angle = [0:60:300]) {\n            rotate([0, 0, angle]) \n                translate([12, 0, 3]) {\n                    rotate([90, 0, 0])\n                        cylinder(h=8, r1=4, r2=0);\n                }\n        }\n    }\n}\n\n// Generate the chair\nking_chair();",
    "renders": true
  },
  {
    "sports_equipment": "queen",
    "openscad_code": "// Queen Bed Frame - Realistic Medium Complexity\n// Overall dimensions: 120mm x 160mm x 55mm (scaled for printing)\n\n$fn = 32;\n\n// Main bed frame module\nmodule queen_bed() {\n    // Bed dimensions\n    bed_width = 120;\n    bed_length = 160;\n    bed_height = 55;\n    mattress_thickness = 12;\n    \n    // Headboard\n    translate([0, bed_length/2 - 10, bed_height - 25]) {\n        // Main headboard panel\n        difference() {\n            cube([bed_width + 8, 8, 35], center=true);\n            // Decorative cutouts\n            for(i = [-2:2]) {\n                translate([i * 25, 0, 10]) {\n                    cube([15, 12, 25], center=true);\n                }\n            }\n        }\n        // Top rail\n        translate([0, 0, 17.5]) {\n            cube([bed_width + 12, 12, 6], center=true);\n        }\n        // Posts\n        translate([-bed_width/2 - 2, 0, 0]) {\n            cylinder(h=35, r=4);\n        }\n        translate([bed_width/2 + 2, 0, 0]) {\n            cylinder(h=35, r=4);\n        }\n    }\n    \n    // Footboard\n    translate([0, -bed_length/2 + 10, bed_height - 18]) {\n        difference() {\n            cube([bed_width + 4, 8, 20], center=true);\n            // Center cutout\n            translate([0, 0, 0]) {\n                cube([60, 12, 16], center=true);\n            }\n        }\n        // Posts\n        translate([-bed_width/2, 0, 0]) {\n            cylinder(h=20, r=3);\n        }\n        translate([bed_width/2, 0, 0]) {\n            cylinder(h=20, r=3);\n        }\n    }\n    \n    // Side rails\n    for(side = [-1, 1]) {\n        translate([side * bed_width/2, 0, bed_height - 15]) {\n            rotate([0, 0, 90]) {\n                cube([bed_length - 20, 6, 15]);\n            }\n        }\n    }\n    \n    // Support slats\n    for(i = [-7:7]) {\n        translate([i * 15, 0, bed_height - 12]) {\n            cube([10, bed_length - 40, 2], center=true);\n        }\n    }\n    \n    // Legs\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (bed_width/2 - 10), y * (bed_length/2 - 15), bed_height/2 - 12]) {\n                cylinder(h=24, r=4);\n            }\n        }\n    }\n    \n    // Mattress\n    translate([0, 0, bed_height - 6]) {\n        cube([bed_width - 4, bed_length - 4, mattress_thickness], center=true);\n    }\n    \n    // Pillows (2)\n    for(p = [-1, 1]) {\n        translate([p * 20, bed_length/2 - 30, bed_height + 6]) {\n            scale([1, 0.7, 0.4]) {\n                sphere(r=15);\n            }\n        }\n    }\n    \n    // Blanket\n    translate([0, -bed_length/4, bed_height + 4]) {\n        cube([bed_width - 8, bed_length/2, 2], center=true);\n    }\n}\n\n// Render the bed\nqueen_bed();",
    "renders": true
  },
  {
    "sports_equipment": "emperor",
    "openscad_code": "// Emperor Chair - Realistic Style - Medium Complexity\n// A regal throne with armrests, backrest, and cushioned seat\n\n// Overall dimensions\nchair_width = 60;\nchair_depth = 55;\nchair_height = 85;\nseat_height = 45;\narmrest_height = 65;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main seat platform\nmodule seat_platform() {\n    difference() {\n        // Main seat base\n        translate([0, 0, seat_height/2]) {\n            cube([chair_width - 10, chair_depth - 5, seat_height/2], center=true);\n        }\n        \n        // Hollow out for printability\n        translate([0, 0, seat_height/2]) {\n            cube([chair_width - 10 - 2*wall_thickness, \n                  chair_depth - 5 - 2*wall_thickness, \n                  seat_height/2], center=true);\n        }\n    }\n}\n\n// Cushion on seat\nmodule seat_cushion() {\n    translate([0, 0, seat_height + 3]) {\n        difference() {\n            cube([chair_width - 15, chair_depth - 10, 6], center=true);\n            // Cushion top rounding\n            translate([0, 0, 3]) {\n                cube([chair_width - 15, chair_depth - 10, 6], center=true);\n            }\n        }\n    }\n}\n\n// Backrest with decorative elements\nmodule backrest() {\n    // Main backrest panel\n    translate([0, -chair_depth/2 + 5, chair_height/2 + seat_height/2]) {\n        difference() {\n            cube([chair_width - 5, wall_thickness, chair_height - seat_height], center=true);\n            // Hollow out\n            cube([chair_width - 5 - 2*wall_thickness, \n                  wall_thickness, \n                  chair_height - seat_height - 2*wall_thickness], center=true);\n        }\n    }\n    \n    // Decorative top arch\n    translate([0, -chair_depth/2 + 5, chair_height - 5]) {\n        difference() {\n            rotate([90, 0, 0]) {\n                cylinder(h=chair_width/2, r1=chair_width/4, r2=chair_width/4, center=true);\n            }\n            // Hollow arch\n            rotate([90, 0, 0]) {\n                cylinder(h=chair_width/2 - 2*wall_thickness, \n                        r1=chair_width/4 - wall_thickness, \n                        r2=chair_width/4 - wall_thickness, \n                        center=true);\n            }\n        }\n    }\n}\n\n// Armrest support structure\nmodule armrest_support(side) {\n    x_pos = side * (chair_width/2 - 10);\n    \n    // Vertical support\n    translate([x_pos, 0, armrest_height/2]) {\n        difference() {\n            cube([8, chair_depth/3, armrest_height], center=true);\n            cube([8 - 2*wall_thickness, chair_depth/3 - 2*wall_thickness, \n                  armrest_height - 2*wall_thickness], center=true);\n        }\n    }\n    \n    // Armrest top\n    translate([x_pos, chair_depth/6, armrest_height - 2]) {\n        difference() {\n            cube([12, chair_depth/4, 4], center=true);\n            cube([12 - 2*wall_thickness, chair_depth/4 - 2*wall_thickness, 4], center=true);\n        }\n    }\n}\n\n// Leg structure with decorative feet\nmodule leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, seat_height/4]) {\n        difference() {\n            cylinder(h=seat_height, r=4, center=true);\n            cylinder(h=seat_height, r=4 - wall_thickness, center=true);\n        }\n    }\n    \n    // Decorative foot base\n    translate([x_pos, y_pos, 2]) {\n        difference() {\n            cylinder(h=4, r1=6, r2=4, center=true);\n            cylinder(h=4, r1=6 - wall_thickness, r2=4 - wall_thickness, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main seat\n    seat_platform();\n    seat_cushion();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests (left and right)\n    armrest_support(-1);\n    armrest_support(1);\n    \n    // Legs at corners\n    leg(chair_width/2 - 8, chair_depth/2 - 8);\n    leg(-chair_width/2 + 8, chair_depth/2 - 8);\n    leg(chair_width/2 - 8, -chair_depth/2 + 8);\n    leg(-chair_width/2 + 8, -chair_depth/2 + 8);\n}",
    "renders": true
  },
  {
    "sports_equipment": "empress",
    "openscad_code": "// Empress Chair - Realistic style, medium complexity\n// Overall dimensions: 100mm width x 95mm depth x 110mm height\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main seating module\nmodule seat() {\n    // Seat cushion\n    translate([0, 0, 40]) \n        cube([80, 75, 10], center=true);\n    \n    // Seat frame\n    translate([0, 0, 34]) \n        difference() {\n            cube([84, 79, 6], center=true);\n            translate([0, 0, -1]) \n                cube([80-wall*2, 75-wall*2, 8], center=true);\n        }\n}\n\n// Backrest module with curved top\nmodule backrest() {\n    // Main backrest panel\n    translate([0, -32, 74]) \n        cube([76, 6, 60], center=true);\n    \n    // Curved top rail\n    translate([0, -32, 104]) \n        difference() {\n            cylinder(h=6, d=76, center=true);\n            translate([0, 0, -1]) \n                cylinder(h=8, d=76-wall*2, center=true);\n        }\n    \n    // Decorative back splats\n    for(i = [-30:15:30]) {\n        translate([i, -32, 74]) \n            cube([8, 6, 50], center=true);\n    }\n}\n\n// Legs module\nmodule legs() {\n    // Front legs\n    translate([-35, 30, 20]) \n        cylinder(h=40, d=6, center=true);\n    translate([35, 30, 20]) \n        cylinder(h=40, d=6, center=true);\n    \n    // Rear legs\n    translate([-35, -30, 20]) \n        cylinder(h=40, d=6, center=true);\n    translate([35, -30, 20]) \n        cylinder(h=40, d=6, center=true);\n    \n    // Side stretchers\n    translate([0, 30, 8]) \n        cube([64, 4, 4], center=true);\n    translate([0, -30, 8]) \n        cube([64, 4, 4], center=true);\n    \n    // Front to back stretchers\n    translate([-35, 0, 8]) \n        cube([4, 60, 4], center=true);\n    translate([35, 0, 8]) \n        cube([4, 60, 4], center=true);\n}\n\n// Armrests module\nmodule armrests() {\n    // Left armrest\n    translate([-45, 0, 60]) \n        union() {\n            // Support post\n            cylinder(h=20, d=4, center=true);\n            // Rest\n            translate([0, 15, 10]) \n                cube([6, 30, 4], center=true);\n        }\n    \n    // Right armrest\n    translate([45, 0, 60]) \n        union() {\n            // Support post\n            cylinder(h=20, d=4, center=true);\n            // Rest\n            translate([0, 15, 10]) \n                cube([6, 30, 4], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    seat();\n    backrest();\n    legs();\n    armrests();\n}",
    "renders": true
  },
  {
    "sports_equipment": "knightess",
    "openscad_code": "// Knightess Chair - Realistic Style, Medium Complexity\n// A chair inspired by medieval armor with feminine curves\n\n$fn = 60;  // Smooth curves for realistic appearance\nwall = 2;  // 2mm wall thickness for 3D printing\n\nmodule leg() {\n    // Tapered leg with armor plating texture\n    difference() {\n        cylinder(h = 45, d1 = 12, d2 = 8, center = false);\n        // Grip texture grooves\n        for(i = [5:10:40]) {\n            translate([0, 0, i]) \n                cylinder(h = 1.5, d = 11, center = false);\n        }\n    }\n}\n\nmodule armor_plate(x, y, angle) {\n    // Decorative armor plate with rivets\n    translate([x, y, 0])\n    rotate([0, 0, angle]) {\n        difference() {\n            cube([25, 8, 3], center = true);\n            // Rivet holes\n            for(rx = [-8, 8]) {\n                translate([rx, 0, 1.5])\n                    cylinder(h = 4, d = 3, center = true);\n            }\n        }\n    }\n}\n\nmodule backrest() {\n    // Shield-shaped backrest with feminine curves\n    difference() {\n        // Main backrest shape\n        hull() {\n            translate([0, 0, 0])\n                cylinder(h = 35, d = 5);\n            translate([0, 100, 0])\n                cylinder(h = 35, d = 5);\n            translate([0, 200, 0])\n                cylinder(h = 35, d = 5);\n        }\n        \n        // Cut to shield shape\n        translate([0, 100, -20])\n            cube([150, 200, 80], center = true);\n        \n        // Decorative cutout at top\n        translate([0, 200, 15])\n            cylinder(h = 10, d = 30, center = true);\n    }\n    \n    // Armor plates on backrest\n    armor_plate(0, 50, 0);\n    armor_plate(0, 100, 5);\n    armor_plate(0, 150, -5);\n    \n    // Structural support bars\n    for(y = [30:30:170]) {\n        translate([0, y, 0])\n            cube([wall, 25, 35], center = true);\n    }\n}\n\nmodule seat() {\n    // Curved seat with side supports\n    difference() {\n        // Main seat platform\n        hull() {\n            translate([-80, -100, 0])\n                cylinder(h = wall, d = 10);\n            translate([80, -100, 0])\n                cylinder(h = wall, d = 10);\n            translate([-80, 100, 0])\n                cylinder(h = wall, d = 10);\n            translate([80, 100, 0])\n                cylinder(h = wall, d = 10);\n        }\n        \n        // Gentle curve for comfort\n        translate([0, 0, -2])\n            sphere(d = 200);\n    }\n    \n    // Side armor panels\n    difference() {\n        translate([85, 0, 15])\n            cube([wall, 180, 30], center = true);\n        // Decorative cutouts\n        for(i = [-60:30:60]) {\n            translate([85, i, 15])\n                cylinder(h = wall + 1, d = 15, center = true);\n        }\n    }\n    \n    mirror([1, 0, 0])\n        translate([85, 0, 15])\n            cube([wall, 180, 30], center = true);\n}\n\n// Main assembly\nunion() {\n    // Seat\n    seat();\n    \n    // Backrest\n    translate([0, 100, 35])\n        rotate([90, 0, 0])\n            backrest();\n    \n    // Legs with proper joints\n    translate([-65, -80, -45]) leg();\n    translate([65, -80, -45]) leg();\n    translate([-65, 80, -45]) leg();\n    translate([65, 80, -45]) leg();\n    \n    // Cross-bracing for stability\n    translate([0, 0, -30])\n        rotate([0, 90, 0])\n            cylinder(h = 130, d = 8, center = true);\n    translate([0, 0, -30])\n        rotate([0, 0, 90])\n            cylinder(h = 160, d = 8, center = true);\n    \n    // Decorative crest at back\n    translate([0, 200, 60])\n        union() {\n            // Crest base\n            cube([40, wall, 25], center = true);\n            // Fleur-de-lis detail\n            translate([0, wall/2, 12])\n                cylinder(h = wall, d1 = 20, d2 = 5, center = true);\n        }\n}",
    "renders": true
  },
  {
    "sports_equipment": "guardian",
    "openscad_code": "// OpenSCAD Guardian Chair – realistic style, medium complexity\n// Overall footprint 120 mm (depth) × 120 mm (width) × 140 mm (height)\n\n$fn = 32;          // good print resolution\nwall = 2;          // 3D-printable wall thickness\n\nmodule leg(x, y) {\n    // one back leg, slanted for stability\n    translate([x, y, 0]) rotate([5, 0, 0])\n        cylinder(h = 100, r = 6, $fn = 16);\n}\n\nmodule seat() {\n    // seat plate with slight ergonomic curvature\n    translate([0, 0, 100]) rotate([5, 0, 0]) {\n        difference() {\n            // main seat surface\n            cube([110, 110, wall], center = true);\n            // remove underside to save material\n            cube([106, 106, wall + 1], center = true);\n        }\n    }\n}\n\nmodule backrest() {\n    // curved high back with vertical slats\n    translate([0, 0, 125]) rotate([15, 0, 0]) {\n        difference() {\n            // outer shell\n            cube([110, wall, 60], center = true);\n            // hollow inner part\n            cube([106, wall + 1, 56], center = true);\n        }\n        // decorative vertical slats\n        for (i = [-40:20:40]) {\n            translate([i, 0, 0])\n                cube([4, wall + 0.1, 56], center = true);\n        }\n    }\n}\n\nmodule armrest() {\n    // side armrest with gentle curve\n    translate([0, 55, 120]) rotate([0, 0, -5])\n        cube([80, wall, 20], center = true);\n}\n\nmodule support_ring() {\n    // strengthening ring under seat\n    translate([0, 0, 95]) {\n        difference() {\n            cylinder(h = wall, r = 50);\n            cylinder(h = wall + 0.2, r = 48);\n        }\n    }\n}\n\nmodule guardian_symbol() {\n    // embossed emblem on backrest – simple shield outline\n    translate([0, wall/2 + 0.1, 125]) rotate([15, 0, 0]) {\n        linear_extrude(height = 0.6) offset(1) {\n            polygon(points = [[-10, -12], [10, -12], [10, 0], [0, 12], [-10, 0]]);\n        }\n    }\n}\n\n// main assembly\nunion() {\n    // four legs\n    for (x = [-45, 45]) {\n        leg(x, -45);\n        leg(x, 45);\n    }\n\n    support_ring();\n    seat();\n    backrest();\n\n    // left & right armrests\n    mirror([0, 1, 0]) armrest();\n\n    // guardian marking\n    guardian_symbol();\n}",
    "renders": true
  },
  {
    "sports_equipment": "protector",
    "openscad_code": "// Furniture Leg Protector for 3D Printing\n// Medium complexity, realistic style\n// Overall size ~80mm height, fits 25mm diameter furniture leg\n\n// Main parameters\n$fn = 50;\nwall_thickness = 2;\nleg_diameter = 25;\nprotector_height = 80;\nbase_thickness = 5;\ngrip_ring_height = 10;\ngrip_ring_count = 3;\n\n// Main protector body\nmodule protector_body() {\n    difference() {\n        // Outer shell\n        cylinder(h=protector_height, d=leg_diameter + 2*wall_thickness + 8, center=false);\n        \n        // Inner cavity for furniture leg\n        translate([0, 0, base_thickness])\n            cylinder(h=protector_height - base_thickness, d=leg_diameter + 1, center=false);\n        \n        // Bottom opening\n        translate([0, 0, -1])\n            cylinder(h=2, d=leg_diameter - 5, center=false);\n    }\n}\n\n// Base pad with grip pattern\nmodule base_pad() {\n    difference() {\n        // Main base\n        cylinder(h=base_thickness, d=leg_diameter + 2*wall_thickness + 12, center=false);\n        \n        // Recessed center\n        translate([0, 0, 2])\n            cylinder(h=base_thickness, d=leg_diameter + wall_thickness, center=false);\n    }\n    \n    // Grip rings\n    for(i=[0:grip_ring_count-1]) {\n        translate([0, 0, 1 + (base_thickness-2)*i/(grip_ring_count-1)])\n            difference() {\n                cylinder(h=1.5, d=leg_diameter + 2*wall_thickness + 12 - 2*i, center=false);\n                cylinder(h=2, d=leg_diameter + 2*wall_thickness + 8 - 2*i, center=false);\n            }\n    }\n}\n\n// Reinforcement ribs\nmodule reinforcement_ribs() {\n    for(angle=[0:45:359]) {\n        rotate([0, 0, angle])\n            translate([leg_diameter/2 + wall_thickness + 2, -wall_thickness, base_thickness])\n                cube([wall_thickness*2, wall_thickness, protector_height - base_thickness - 5]);\n    }\n}\n\n// Top rim for structural integrity\nmodule top_rim() {\n    difference() {\n        cylinder(h=4, d=leg_diameter + 2*wall_thickness + 8, center=false);\n        translate([0, 0, -1])\n            cylinder(h=6, d=leg_diameter + wall_thickness + 2, center=false);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    protector_body();\n    \n    // Base pad at bottom\n    base_pad();\n    \n    // Reinforcement ribs\n    reinforcement_ribs();\n    \n    // Top rim\n    translate([0, 0, protector_height - 4])\n        top_rim();\n}\n\n// Optional: Add small drainage hole\ntranslate([0, (leg_diameter + wall_thickness)/2, base_thickness + 2])\n    rotate([90, 0, 0])\n        cylinder(h=wall_thickness*2, d=3, center=true);",
    "renders": true
  },
  {
    "sports_equipment": "defender",
    "openscad_code": "// Defender-style bar stool with backrest and footrest\n// Overall height: 120mm, seat height: 75mm, suitable for 3D printing\n\nmodule leg(x, y) {\n    // Single leg with 2mm wall thickness\n    difference() {\n        cylinder(h = 75, d = 12, $fn = 20);\n        translate([0, 0, 2])\n            cylinder(h = 73, d = 8, $fn = 20);\n    }\n}\n\nmodule footrest_ring() {\n    // Circular footrest at 40mm height\n    difference() {\n        cylinder(h = 8, d = 40, $fn = 40);\n        translate([0, 0, 2])\n            cylinder(h = 6, d = 36, $fn = 40);\n    }\n}\n\nmodule seat_cushion() {\n    // Padded seat with defender-style grip pattern\n    difference() {\n        // Main seat\n        translate([0, 0, 75])\n            cylinder(h = 10, d = 34, $fn = 40);\n        \n        // Remove center for wall thickness\n        translate([0, 0, 77])\n            cylinder(h = 8, d = 30, $fn = 40);\n    }\n    \n    // Grip texture pattern\n    for(i = [0:5:359]) {\n        rotate([0, 0, i])\n            translate([12, 0, 83])\n                cube([1, 2, 1], center = true);\n    }\n}\n\nmodule backrest_post() {\n    // Curved backrest support post\n    translate([0, -15, 85])\n        rotate([15, 0, 0])\n            cylinder(h = 35, d = 8, $fn = 20);\n}\n\nmodule backrest_panel() {\n    // Contoured backrest with defender styling\n    difference() {\n        // Main backrest\n        translate([0, -15, 102])\n            rotate([15, 0, 0])\n                cube([28, 3, 20], center = true);\n        \n        // Cutouts for weight reduction and style\n        for(x = [-10:10:10]) {\n            translate([x, -14, 102])\n                rotate([15, 0, 0])\n                    cube([6, 4, 12], center = true);\n        }\n    }\n}\n\nmodule base_support() {\n    // Four-point base for stability\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n            translate([0, 20, 0])\n                leg(0, 0);\n    }\n}\n\n// Assemble the stool\nunion() {\n    // Base structure\n    base_support();\n    \n    // Central column\n    translate([0, 0, 0])\n        leg(0, 0);\n    \n    // Footrest\n    translate([0, 0, 40])\n        footrest_ring();\n    \n    // Seat\n    seat_cushion();\n    \n    // Backrest assembly\n    translate([0, 0, 0]) {\n        backrest_post();\n        backrest_panel();\n    }\n    \n    // Reinforcement ring\n    translate([0, 0, 10])\n        difference() {\n            cylinder(h = 5, d = 30, $fn = 40);\n            translate([0, 0, 1])\n                cylinder(h = 4, d = 26, $fn = 40);\n        }\n}",
    "renders": true
  },
  {
    "sports_equipment": "champion",
    "openscad_code": "// Championship Trophy Chair - Realistic Style\n// Overall dimensions: 100mm W x 110mm D x 130mm H\n\n// Chair base and legs\nmodule chair_base() {\n    // Main seat platform\n    difference() {\n        cube([80, 90, 8], center=true);\n        translate([0, 0, 4])\n            cube([76, 86, 8], center=true);\n    }\n    \n    // Four legs with chamfered edges\n    for (x = [-35, 35])\n        for (y = [-40, 40]) {\n            translate([x, y, -55])\n                cylinder(h=58, r1=4, r2=4.5, $fn=16);\n        }\n}\n\n// Trophy cup backrest\nmodule trophy_cup() {\n    // Main cup body\n    difference() {\n        cylinder(h=60, r1=35, r2=30, $fn=64);\n        translate([0, 0, 2])\n            cylinder(h=56, r1=33, r2=28, $fn=64);\n    }\n    \n    // Trophy handles (two symmetrical handles)\n    for (side = [-1, 1]) {\n        translate([side * 32, 0, 30])\n            rotate([0, 0, side * 30])\n            difference() {\n                cylinder(h=25, r1=7, r2=5, $fn=16);\n                translate([0, -10, 0])\n                    cube([20, 20, 25], center=true);\n            }\n    }\n    \n    // Cup rim detail\n    translate([0, 0, 60])\n        cylinder(h=3, r1=36, r2=34, $fn=64);\n}\n\n// Championship belt seat cushion\nmodule championship_belt() {\n    // Main cushion\n    difference() {\n        translate([0, 0, 4])\n            cube([70, 80, 12], center=true);\n        translate([0, 0, 10])\n            cube([66, 76, 12], center=true);\n    }\n    \n    // Belt buckle detail\n    translate([0, 0, 10])\n        difference() {\n            cube([25, 15, 3], center=true);\n            translate([0, 0, 1.5])\n                cube([20, 10, 3], center=true);\n        }\n    \n    // Side plates\n    for (x = [-25, 25])\n        translate([x, 0, 10])\n            cube([10, 12, 2], center=true);\n}\n\n// Victory laurel wreath decoration\nmodule laurel_wreath() {\n    rotate([90, 0, 0])\n    translate([0, 0, -35])\n    difference() {\n        cylinder(h=5, r1=38, r2=38, $fn=64);\n        cylinder(h=6, r1=34, r2=34, $fn=64);\n    }\n    \n    // Laurel leaves (simplified)\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([36, 0, -2.5])\n            scale([1, 0.6, 0.3])\n                sphere(r=6, $fn=8);\n    }\n}\n\n// Number 1 detail on back\nmodule number_one() {\n    translate([0, 8, 45])\n    rotate([0, 10, 0])\n    linear_extrude(height=3)\n        text(\"1\", size=20, halign=\"center\", valign=\"center\");\n}\n\n// Assembly\nunion() {\n    // Chair structure\n    chair_base();\n    \n    // Seat cushion\n    championship_belt();\n    \n    // Trophy backrest\n    translate([0, -45, 64])\n        trophy_cup();\n    \n    // Decorative elements\n    translate([0, -45, 64])\n        laurel_wreath();\n    \n    translate([0, -45, 64])\n        number_one();\n    \n    // Support struts between backrest and seat\n    for (x = [-25, 25]) {\n        translate([x, -20, 40])\n            cube([4, 25, 4], center=true);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "slayer",
    "openscad_code": "// Slayer (Table Tennis / Ping-Pong Paddle) – 3D-printable furniture item\n// Realistic style, medium complexity\n\n// Parameters ----------------------------------------------------------\nblade_w   = 82;   // blade width\nblade_h   = 150;  // blade height\nblade_t   = 5;    // blade thickness\nhandle_l  = 100;  // handle length\nhandle_w  = 25;   // handle width at top\nhandle_t  = 18;   // handle thickness\nwall      = 2;    // wall thickness for printing\nedge_r    = 2;    // rounded edge radius\ngrip_d    = 2;    // grip ring depth\ngrip_step = 6;    // vertical spacing between grip rings\ngrip_cnt  = 10;   // number of grip rings\n\n// Main model ----------------------------------------------------------\nunion() {\n    // Blade\n    difference() {\n        // Outer blade\n        rounded_blade();\n        // Hollow cavity inside blade\n        translate([0,0,wall])\n            scale([(blade_w-2*wall)/blade_w,\n                   (blade_h-2*wall)/blade_h,\n                   1])\n                rounded_blade();\n    }\n\n    // Handle\n    translate([0,-blade_h/2-handle_l/2,0])\n        rotate([90,0,0])\n            handle();\n}\n\n// Modules -------------------------------------------------------------\nmodule rounded_blade() {\n    // Blade with rounded top corners\n    difference() {\n        cube([blade_w, blade_h, blade_t], center=true);\n        // Cut sharp bottom corners\n        translate([0, blade_h/2-10, 0])\n            cube([blade_w+1, 20, blade_t+1], center=true);\n    }\n    // Add rounded top corners\n    translate([0, -blade_h/2+edge_r, 0])\n        cylinder(h=blade_t+0.1, r=edge_r, center=true, $fn=32);\n    mirror([0,1,0])\n        translate([0, -blade_h/2+edge_r, 0])\n            cylinder(h=blade_t+0.1, r=edge_r, center=true, $fn=32);\n}\n\nmodule handle() {\n    union() {\n        // Tapered handle body\n        hull() {\n            translate([0,0,0])\n                cube([handle_w, handle_t, wall], center=true);\n            translate([0,-handle_l+wall,0])\n                cube([handle_w*0.8, handle_t*0.8, wall], center=true);\n        }\n\n        // Grip rings\n        for(i=[0:grip_cnt-1]) {\n            z = -i*grip_step - grip_step/2;\n            translate([0,z,0])\n                difference() {\n                    hull() {\n                        translate([0,0,0])\n                            cube([handle_w+0.2, handle_t+0.2, wall], center=true);\n                        translate([0,-grip_step/2,0])\n                            cube([handle_w*0.9, handle_t*0.9, wall], center=true);\n                    }\n                    // Groove\n                    translate([0,z,0])\n                        cube([handle_w+0.4, handle_t+0.4, wall+0.2], center=true);\n                }\n        }\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "seeker",
    "openscad_code": "// Seeker stool (Harry Potter style quidditch-inspired)\n// Overall footprint ≈ 90 mm diameter, height ≈ 115 mm\n// Wall thickness ≥ 2 mm for every load-bearing part\n\n$fn = 36;  // smooth curves for printing\n\n// Main stool module\nmodule seeker_stool() {\n    union() {\n        // central column – broom-handle\n        translate([0, 0, 2])\n            cylinder(h = 100, d = 24, $fn = 32);\n\n        // footrest ring – broom tail twigs\n        translate([0, 0, 30])\n            rotate([90, 0, 0])\n                torus(ro = 36, ri = 5);\n\n        // seat disk – stylised snitch wings\n        translate([0, 0, 102])\n            union() {\n                // seat platform\n                cylinder(h = 10, d = 90);\n\n                // two wing supports\n                for (a = [0, 180])\n                    rotate([0, 0, a])\n                        translate([0, 45, 5])\n                            wing_support();\n            }\n\n        // three legs – aerodynamic struts\n        for (i = [0 : 120 : 240])\n            rotate([0, 0, i])\n                translate([28, 0, 0])\n                    leg();\n    }\n}\n\n// Torus primitive for footrest\nmodule torus(ro, ri) {\n    rotate_extrude()\n        translate([ro, 0])\n            circle(r = ri);\n}\n\n// Wing support (curved backrest)\nmodule wing_support() {\n    difference() {\n        union() {\n            // main beam\n            rotate([0, 90, 0])\n                cylinder(h = 40, d = 8);\n            // fillet\n            translate([0, 0, 20])\n                sphere(d = 8);\n        }\n        // cutout for weight saving\n        rotate([0, 90, 0])\n            cylinder(h = 42, d = 4);\n    }\n}\n\n// Leg module\nmodule leg() {\n    difference() {\n        hull() {\n            // top joint\n            translate([0, 0, 100])\n                sphere(d = 10);\n\n            // bottom foot\n            translate([0, 0, 2])\n                sphere(d = 12);\n        }\n        // hollow core\n        hull() {\n            translate([0, 0, 100])\n                sphere(d = 6);\n            translate([0, 0, 2])\n                sphere(d = 8);\n        }\n    }\n}\n\n// Add grip texture rings on broom handle\nmodule grip_rings() {\n    for (z = [10 : 10 : 90])\n        translate([0, 0, z])\n            cylinder(h = 2, d = 26);\n}\n\n// Assembly\nseeker_stool();\ngrip_rings();",
    "renders": true
  },
  {
    "sports_equipment": "keeper",
    "openscad_code": "// Keeper Furniture - Goalkeeper Glove Display Stand\n// Realistic style, medium complexity, 3D printable\n\n// Dimensions (mm)\n$fn = 32;\nwall = 2;\nbase_w = 80;\nbase_d = 60;\nbase_h = 8;\npost_w = 12;\npost_h = 120;\narm_w = 6;\narm_l = 35;\nglove_w = 45;\nglove_h = 35;\nglove_d = 20;\n\nmodule base() {\n    difference() {\n        // Main base\n        cube([base_w, base_d, base_h], center=true);\n        \n        // Cable channel underneath\n        translate([0, 0, -base_h/2 + 1])\n            cube([base_w - 8, 8, 2], center=true);\n        \n        // Mounting holes\n        for(x = [-30, 30])\n            for(y = [-20, 20])\n                translate([x, y, 0])\n                    cylinder(h=base_h+1, r=2.5, center=true);\n    }\n}\n\nmodule post() {\n    // Main post\n    translate([0, 0, base_h/2 + post_h/2])\n        cube([post_w, post_w, post_h], center=true);\n    \n    // Reinforcement ribs\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n            translate([post_w/2 - 1, 0, base_h/2 + post_h/4])\n                cube([2, post_w, post_h/2], center=true);\n    }\n}\n\nmodule glove_holder() {\n    // Mounting arm\n    translate([0, post_w/2 + arm_l/2, base_h/2 + post_h - 15])\n        cube([arm_w, arm_l, arm_w], center=true);\n    \n    // Glove support plate\n    translate([0, post_w/2 + arm_l, base_h/2 + post_h - 15])\n    difference() {\n        cube([glove_w + 8, 4, glove_h + 8], center=true);\n        \n        // Finger grooves\n        for(i = [-2:1:2]) {\n            translate([i * 8, 0, glove_h/2 - 5])\n                cube([6, 5, 2], center=true);\n        }\n    }\n    \n    // Thumb rest\n    rotate([0, -15, 0])\n    translate([-glove_w/2 - 5, post_w/2 + arm_l - 5, base_h/2 + post_h - 20])\n        cube([8, 8, 8]);\n    \n    // Palm support curve\n    translate([0, post_w/2 + arm_l + 2, base_h/2 + post_h - 15 - glove_h/4])\n    difference() {\n        cube([glove_w, glove_d, glove_h], center=true);\n        \n        // Hollow for glove\n        translate([0, -glove_d/4, 0])\n            cube([glove_w - 4, glove_d - 2, glove_h - 4], center=true);\n    }\n    \n    // Safety lip\n    translate([0, post_w/2 + arm_l + glove_d/2 + 1, base_h/2 + post_h - 15])\n        cube([glove_w + 4, 2, glove_h + 4], center=true);\n}\n\n// Assembly\nunion() {\n    base();\n    post();\n    glove_holder();\n    \n    // Brand label\n    translate([0, 0, base_h/2 + 2])\n        cube([30, 2, 8], center=true);\n}",
    "renders": true
  },
  {
    "sports_equipment": "watcher",
    "openscad_code": "// Watcher (Security Camera) Furniture Module\n// Medium complexity realistic style\n\n$fn = 50;\n\n// Main body dimensions\nbody_width = 40;\nbody_height = 50;\nbody_depth = 80;\n\n// Base dimensions\nbase_diameter = 60;\nbase_height = 15;\n\n// Lens dimensions\nlens_diameter = 30;\nlens_length = 20;\n\n// Wall thickness\nwall_thickness = 2;\n\n// Mounting bracket dimensions\nbracket_width = 80;\nbracket_height = 10;\nbracket_depth = 20;\n\nmodule camera_body() {\n    difference() {\n        // Main outer shell\n        translate([0, 0, body_depth/2])\n            cube([body_width, body_height, body_depth], center=true);\n        \n        // Inner cavity for electronics\n        translate([0, 0, body_depth/2])\n            cube([body_width-wall_thickness*2, body_height-wall_thickness*2, body_depth], center=true);\n        \n        // Lens hole\n        translate([0, 0, body_depth])\n            cylinder(h=lens_length+5, d=lens_diameter+wall_thickness*2, center=true);\n    }\n}\n\nmodule camera_base() {\n    // Rotating base\n    difference() {\n        cylinder(h=base_height, d=base_diameter, center=true);\n        cylinder(h=base_height+1, d=base_diameter-wall_thickness*4, center=true);\n    }\n    \n    // Mounting holes\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([base_diameter/2-10, 0, 0])\n                cylinder(h=base_height+2, d=3, center=true);\n    }\n}\n\nmodule camera_lens() {\n    // Outer lens barrel\n    difference() {\n        translate([0, 0, body_depth+lens_length/2])\n            cylinder(h=lens_length, d=lens_diameter, center=true);\n        translate([0, 0, body_depth+lens_length/2])\n            cylinder(h=lens_length+1, d=lens_diameter-wall_thickness*2, center=true);\n    }\n    \n    // Lens front element\n    translate([0, 0, body_depth+lens_length])\n        cylinder(h=2, d=lens_diameter, center=false);\n    \n    // IR LEDs around lens\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n            translate([lens_diameter/2+3, 0, body_depth+lens_length/3])\n                cylinder(h=2, d=4, center=false);\n    }\n}\n\nmodule status_indicator() {\n    // LED indicator on top\n    translate([0, body_height/2-3, body_depth/3])\n        cylinder(h=3, d=6, center=false);\n}\n\nmodule antenna() {\n    // WiFi antenna\n    translate([body_width/2+2, body_height/4, body_depth/2])\n        rotate([90, 0, 0])\n            cylinder(h=20, d=3, center=false);\n}\n\nmodule wall_mount() {\n    // Mounting bracket\n    difference() {\n        translate([0, -bracket_height/2, -bracket_depth/2])\n            cube([bracket_width, bracket_height, bracket_depth], center=true);\n        \n        // Cable routing channel\n        translate([0, -bracket_height/2, -bracket_depth/2])\n            cube([bracket_width-wall_thickness*2, bracket_height-wall_thickness*2, bracket_depth], center=true);\n    }\n    \n    // Mounting slots\n    for(i=[-1:1]) {\n        translate([i*25, 0, 0])\n            cube([5, bracket_height+2, 10], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Wall mount bracket\n    wall_mount();\n    \n    // Base attached to bracket\n    translate([0, -bracket_height/2-base_height/2, bracket_depth/2])\n        camera_base();\n    \n    // Camera body on base\n    translate([0, -bracket_height/2-base_height-body_height/2, bracket_depth/2+base_diameter/4])\n        rotate([0, 30, 0])\n            union() {\n                camera_body();\n                camera_lens();\n                status_indicator();\n                antenna();\n            }\n}",
    "renders": true
  },
  {
    "sports_equipment": "messenger",
    "openscad_code": "// Messenger furniture (postal delivery box) - realistic style, medium complexity\n\n$fn = 32;\nwall_thickness = 2;\nmain_width = 80;\nmain_height = 60;\nmain_depth = 40;\n\nmodule main_box() {\n    difference() {\n        // Outer shell\n        translate([-wall_thickness, -wall_thickness, -wall_thickness])\n            cube([main_width + 2*wall_thickness, main_height + 2*wall_thickness, main_depth + 2*wall_thickness]);\n        \n        // Inner cavity\n        translate([0, 0, 0])\n            cube([main_width, main_height, main_depth]);\n    }\n}\n\nmodule slot() {\n    slot_width = 60;\n    slot_height = 3;\n    translate([(main_width - slot_width)/2, main_height - 5, -1])\n        cube([slot_width, slot_height, main_depth + 2]);\n}\n\nmodule door() {\n    door_thickness = 2;\n    door_width = main_width - 4;\n    door_height = main_height - 10;\n    \n    translate([2, 2, -door_thickness]) {\n        // Door panel\n        cube([door_width, door_height, door_thickness]);\n        \n        // Handle\n        translate([door_width - 12, door_height/2 - 3, -3])\n            cylinder(h=6, r=2);\n    }\n}\n\nmodule hinges() {\n    for(i = [0:1]) {\n        translate([5 + i*(main_width - 14), 0, -4])\n            rotate([0, 90, 0])\n                cylinder(h=8, r=2);\n    }\n}\n\nmodule mounting_holes() {\n    hole_radius = 2.5;\n    hole_depth = 5;\n    \n    for(pos = [[10, 10], [main_width - 10, 10], [10, main_height - 10], [main_width - 10, main_height - 10]]) {\n        translate([pos[0], pos[1], -hole_depth])\n            cylinder(h=hole_depth + 1, r=hole_radius);\n    }\n}\n\nmodule address_label() {\n    label_width = 50;\n    label_height = 25;\n    label_depth = 1;\n    \n    translate([(main_width - label_width)/2, 15, main_depth])\n        cube([label_width, label_height, label_depth]);\n}\n\nmodule rain_shield() {\n    shield_width = main_width + 10;\n    shield_height = 5;\n    shield_depth = main_depth + 10;\n    \n    translate([-5, main_height + 2, -5])\n        cube([shield_width, shield_height, shield_depth]);\n}\n\nmodule ventilation_holes() {\n    hole_radius = 1.5;\n    for(y = [15:15:main_height - 15]) {\n        for(z = [5:10:main_depth - 5]) {\n            translate([-1, y, z])\n                rotate([0, 90, 0])\n                    cylinder(h=3, r=hole_radius);\n        }\n    }\n}\n\nunion() {\n    main_box();\n    slot();\n    door();\n    hinges();\n    address_label();\n    rain_shield();\n    ventilation_holes();\n    \n    difference() {\n        // Final assembly\n        union() {\n            main_box();\n            door();\n            rain_shield();\n        }\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "guide",
    "openscad_code": "// Guide Furniture - Modern Chair with Integrated Book Guide\n// Overall dimensions: 120mm height x 80mm width x 90mm depth\n// 3D printable with 2mm wall thickness, no overhangs\n\nwall_thickness = 2;\nseat_height = 45;\nback_height = 120;\nwidth = 80;\ndepth = 90;\n\nmodule rounded_cube(size, radius) {\n    hull() {\n        for (dx = [0, size.x - radius*2])\n            for (dy = [0, size.y - radius*2])\n                for (dz = [0, size.z - radius*2])\n                    translate([dx + radius, dy + radius, dz + radius])\n                        sphere(r = radius);\n    }\n}\n\nmodule chair_leg(x_pos, z_pos) {\n    translate([x_pos, depth/2 - wall_thickness - 5, z_pos])\n        rounded_cube([wall_thickness*2, wall_thickness*2, seat_height - z_pos], 2);\n}\n\nmodule back_support() {\n    // Main back panel\n    difference() {\n        translate([-wall_thickness/2, -depth/2, seat_height])\n            rounded_cube([width + wall_thickness, wall_thickness, back_height - seat_height], 3);\n        \n        // Cutout for book guide slot\n        translate([width/2 - 15, -depth/2 - 1, seat_height + 20])\n            cube([30, wall_thickness + 2, back_height - seat_height - 40]);\n    }\n    \n    // Book guide rails\n    for (y = [0, 15, 30]) {\n        translate([width/2 - 15, -depth/2 - wall_thickness, seat_height + 20 + y])\n            cube([30, wall_thickness*2, 2]);\n    }\n}\n\nmodule seat_surface() {\n    difference() {\n        translate([-width/2, -depth/2, seat_height - wall_thickness])\n            rounded_cube([width, depth, wall_thickness], 3);\n        \n        // Ventilation holes\n        for (x = [-30, -10, 10, 30])\n            for (y = [-30, -10, 10, 30])\n                translate([x, y, seat_height - wall_thickness])\n                    cylinder(h = wall_thickness + 1, r = 3, $fn = 16);\n    }\n}\n\nmodule front_support() {\n    translate([-width/2 - wall_thickness/2, depth/2 - wall_thickness, 0])\n        rounded_cube([width + wall_thickness, wall_thickness, seat_height], 3);\n}\n\nmodule side_support(is_left) {\n    x = is_left ? -width/2 - wall_thickness/2 : width/2 - wall_thickness/2;\n    translate([x, -depth/2, 0])\n        rounded_cube([wall_thickness, depth, seat_height], 3);\n}\n\n// Main assembly\nunion() {\n    // Chair structure\n    chair_leg(-width/2 + wall_thickness, 0);\n    chair_leg(width/2 - wall_thickness, 0);\n    chair_leg(-width/2 + wall_thickness, seat_height - 30);\n    chair_leg(width/2 - wall_thickness, seat_height - 30);\n    \n    // Surfaces\n    seat_surface();\n    back_support();\n    front_support();\n    side_support(true);\n    side_support(false);\n    \n    // Book guide detail - small lip at front\n    translate([width/2 - 15, depth/2 - 5, seat_height + 20])\n        cube([30, 5, 2]);\n}",
    "renders": true
  },
  {
    "sports_equipment": "companion",
    "openscad_code": "// Companion Furniture - Realistic Medium Complexity\n// A sturdy side-table stool companion with cross-brace support structure\n// Dimensions: 120mm height, 90mm diameter top\n\n// Overall dimensions\nstool_height = 120;\nseat_diameter = 90;\nleg_thickness = 6;\nbrace_thickness = 4;\n\n// Create the complete stool\nmodule stool_companion() {\n    // Seat with slight dome top\n    translate([0, 0, stool_height - 4]) {\n        // Main seat disk\n        cylinder(h = 8, d = seat_diameter, $fn = 32);\n        \n        // Domed top surface\n        translate([0, 0, 8]) {\n            scale([1, 1, 0.3]) {\n                sphere(d = seat_diameter, $fn = 32);\n            }\n        }\n        \n        // Under-seat reinforcement ring\n        translate([0, 0, -2]) {\n            cylinder(h = 4, d1 = seat_diameter - 6, d2 = seat_diameter - 4, $fn = 32);\n        }\n    }\n    \n    // Four legs with cross-bracing\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            // Main leg\n            translate([seat_diameter/2 - leg_thickness, -leg_thickness/2, 0]) {\n                cube([leg_thickness, leg_thickness, stool_height - 8]);\n            }\n            \n            // Foot pad\n            translate([seat_diameter/2 - leg_thickness, -leg_thickness/2, -2]) {\n                cube([leg_thickness, leg_thickness, 2]);\n            }\n            \n            // Lower cross brace\n            if (i < 2) {\n                rotate([0, 0, 45]) {\n                    translate([seat_diameter/2 - leg_thickness, -brace_thickness/2, stool_height/3]) {\n                        cube([seat_diameter/1.5, brace_thickness, brace_thickness]);\n                    }\n                }\n            }\n            \n            // Upper cross brace (perpendicular to lower)\n            if (i >= 2) {\n                rotate([0, 0, -45]) {\n                    translate([-seat_diameter/3, -brace_thickness/2, stool_height*2/3]) {\n                        cube([seat_diameter/1.5, brace_thickness, brace_thickness]);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Central support column for stability\n    translate([0, 0, 0]) {\n        cylinder(h = stool_height - 12, d = 12, $fn = 16);\n    }\n    \n    // Base ring for stability\n    translate([0, 0, -1]) {\n        cylinder(h = 3, d = seat_diameter * 0.8, $fn = 32);\n    }\n    \n    // Corner gussets for leg reinforcement\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45]) {\n            translate([seat_diameter/2 - leg_thickness - 2, -2, stool_height/2]) {\n                cube([4, 4, stool_height/2]);\n            }\n        }\n    }\n}\n\n// Render the stool\nstool_companion();",
    "renders": true
  },
  {
    "sports_equipment": "friend",
    "openscad_code": "// Friend furniture - Modern minimalist stool with friendly face\n// Overall dimensions: 120mm height, 220mm diameter seat\n\n// Parameters\nseat_diameter = 220;\nseat_thickness = 8;\nleg_height = 100;\nleg_diameter = 15;\nleg_count = 3;\nwall_thickness = 2;\n\n// Friendly face parameters\neye_size = 20;\neye_spacing = 40;\nmouth_width = 60;\nmouth_height = 10;\n\nmodule stool_base() {\n    // Central support hub\n    difference() {\n        cylinder(h=seat_thickness+5, d=40, center=true);\n        cylinder(h=seat_thickness+7, d=36, center=true);\n    }\n}\n\nmodule stool_leg() {\n    // Single leg with rounded bottom\n    difference() {\n        union() {\n            cylinder(h=leg_height, d=leg_diameter, center=false);\n            translate([0,0,leg_height-3]) \n                sphere(d=leg_diameter+2);\n        }\n        // Hollow core\n        cylinder(h=leg_height+3, d=leg_diameter-wall_thickness*2, center=false);\n    }\n}\n\nmodule stool_seat() {\n    // Main seat with friendly face\n    difference() {\n        // Solid seat\n        cylinder(h=seat_thickness, d=seat_diameter, center=true);\n        \n        // Hollow bottom\n        translate([0,0,-seat_thickness/2+wall_thickness])\n            cylinder(h=seat_thickness, d=seat_diameter-wall_thickness*2, center=true);\n        \n        // Friendly eyes\n        translate([-eye_spacing/2, -seat_diameter/4, seat_thickness/2])\n            sphere(d=eye_size);\n        translate([eye_spacing/2, -seat_diameter/4, seat_thickness/2])\n            sphere(d=eye_size);\n        \n        // Friendly smile\n        translate([0, 0, seat_thickness/2])\n            rotate([90,0,0])\n                cylinder(h=mouth_height, d1=mouth_width, d2=mouth_width-10, center=false);\n    }\n    \n    // Eye details (pupils)\n    translate([-eye_spacing/2, -seat_diameter/4-5, seat_thickness/2+1])\n        sphere(d=eye_size/3);\n    translate([eye_spacing/2, -seat_diameter/4-5, seat_thickness/2+1])\n        sphere(d=eye_size/3);\n}\n\n// Assembly\nunion() {\n    // Seat with face\n    translate([0,0,leg_height+seat_thickness/2])\n        stool_seat();\n    \n    // Support hub\n    translate([0,0,leg_height])\n        stool_base();\n    \n    // Legs\n    for(i = [0:leg_count-1]) {\n        angle = i * 360 / leg_count;\n        translate([0,0,0])\n            rotate([0,0,angle])\n                translate([30,0,0])\n                    stool_leg();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "block",
    "openscad_code": "// OpenSCAD code for a realistic wooden toy block furniture piece\n// A stackable alphabet block that doubles as a small storage stool for kids\n// Overall size: 90 x 90 x 90 mm (toy block proportions)\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main dimensions\nblock_size = 90;\nhole_size = 60;\n\n// Letter relief height\nletter_height = 3;\n\n// Rounded edge radius\nedge_radius = 5;\n\n// Create a single rounded corner cube\nmodule rounded_cube(size, radius) {\n    h = radius * 2;\n    cube([size[0], size[1], size[2]], center = true);\n    \n    // Add corner spheres\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            for (z = [-1, 1]) {\n                translate([x * (size[0]/2 - radius), \n                          y * (size[1]/2 - radius), \n                          z * (size[2]/2 - radius)]) {\n                    sphere(r = radius);\n                }\n            }\n        }\n    }\n}\n\n// Create hollow block with rounded edges\nmodule hollow_block(outer_size, inner_size, wall_thickness) {\n    difference() {\n        // Outer rounded cube\n        rounded_cube([outer_size, outer_size, outer_size], edge_radius);\n        \n        // Inner hollow space (slightly smaller for wall thickness)\n        translate([0, 0, wall_thickness/2]) {\n            rounded_cube([inner_size, inner_size, inner_size - wall_thickness], edge_radius - wall_thickness/2);\n        }\n    }\n}\n\n// Create letter 'A' extrusion\nmodule letter_a() {\n    // Main vertical bars\n    for (x = [-15, 15]) {\n        translate([x, -10, -letter_height/2]) {\n            cube([10, 30, letter_height], center = true);\n        }\n    }\n    \n    // Horizontal bar\n    translate([0, 5, -letter_height/2]) {\n        cube([40, 10, letter_height], center = true);\n    }\n    \n    // Triangle top\n    difference() {\n        translate([0, -10, -letter_height/2]) {\n            cube([50, 10, letter_height], center = true);\n        }\n        \n        // Cut triangle shape\n        translate([0, -20, -letter_height/2 - 1]) {\n            rotate([0, 0, 45]) {\n                cube([20, 20, letter_height + 2], center = true);\n            }\n        }\n        translate([-20, -20, -letter_height/2 - 1]) {\n            rotate([0, 0, -45]) {\n                cube([20, 20, letter_height + 2], center = true);\n            }\n        }\n    }\n}\n\n// Create grip texture pattern\nmodule grip_pattern(side_length) {\n    spacing = 8;\n    depth = 1;\n    \n    for (x = [-side_length/2 + spacing : spacing : side_length/2 - spacing]) {\n        for (y = [-side_length/2 + spacing : spacing : side_length/2 - spacing]) {\n            translate([x, y, -depth/2]) {\n                cylinder(h = depth, r = 2, $fn = 12);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base hollow block\n    hollow_block(block_size, hole_size, wall);\n    \n    // Top letter 'A'\n    translate([0, 0, block_size/2 + letter_height/2]) {\n        letter_a();\n    }\n    \n    // Grip textures on sides\n    for (side = [0 : 90 : 270]) {\n        rotate([0, 0, side]) {\n            translate([block_size/2 + 0.1, 0, 0]) {\n                rotate([0, 90, 0]) {\n                    grip_pattern(block_size * 0.8);\n                }\n            }\n        }\n    }\n    \n    // Reinforcement ribs inside\n    difference() {\n        for (i = [-1, 1]) {\n            translate([i * (hole_size/2 - wall), 0, 0]) {\n                cube([wall, hole_size - wall*2, block_size - wall*2], center = true);\n            }\n        }\n        \n        // Keep hollow space clear\n        translate([0, 0, -wall/2]) {\n            cube([hole_size + wall*2, hole_size + wall*2, block_size + wall], center = true);\n        }\n    }\n    \n    // Stackable peg on bottom\n    translate([0, 0, -block_size/2 - 2]) {\n        cylinder(h = 4, r1 = 15, r2 = 12, $fn = 20);\n    }\n    \n    // Matching hole on top for stacking\n    translate([0, 0, block_size/2 + 1]) {\n        cylinder(h = 6, r = 15.5, $fn = 20);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "brick",
    "openscad_code": "// Brick-style modular stool\n// Realistic style with medium complexity\n// 3D-printable, no overhangs, 2 mm walls\n\n// Overall dimensions\nlength = 120;\nwidth = 60;\nheight = 45;\nwall = 2;\n\n// Brick parameters\nstud_d = 12;\nstud_h = 3;\nstud_spacing = 20;\n\n// Create the main hollow brick body\nmodule brick_body() {\n    difference() {\n        // Outer shell\n        cube([length, width, height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, wall/2])\n            cube([length - 2*wall, width - 2*wall, height - wall], center = true);\n    }\n}\n\n// Generate studs on top surface\nmodule studs() {\n    for (x = [-(floor(length/stud_spacing)/2)*stud_spacing : stud_spacing : \n             (floor(length/stud_spacing)/2)*stud_spacing]) {\n        for (y = [-(floor(width/stud_spacing)/2)*stud_spacing : stud_spacing : \n                 (floor(width/stud_spacing)/2)*stud_spacing]) {\n            translate([x, y, height/2])\n                cylinder(d = stud_d, h = stud_h, $fn = 16);\n        }\n    }\n}\n\n// Generate stud holes on bottom surface\nmodule stud_holes() {\n    for (x = [-(floor(length/stud_spacing)/2)*stud_spacing : stud_spacing : \n             (floor(length/stud_spacing)/2)*stud_spacing]) {\n        for (y = [-(floor(width/stud_spacing)/2)*stud_spacing : stud_spacing : \n                 (floor(width/stud_spacing)/2)*stud_spacing]) {\n            translate([x, y, -height/2])\n                cylinder(d = stud_d + 0.5, h = stud_h + 1, $fn = 16);\n        }\n    }\n}\n\n// Reinforcement ribs inside the brick\nmodule ribs() {\n    // Longitudinal ribs\n    for (x = [-(floor(length/30)/2)*30 : 30 : (floor(length/30)/2)*30]) {\n        translate([x, 0, 0])\n            cube([wall, width - 2*wall, height - 2*wall], center = true);\n    }\n    \n    // Transverse ribs\n    for (y = [-(floor(width/30)/2)*30 : 30 : (floor(width/30)/2)*30]) {\n        translate([0, y, 0])\n            cube([length - 2*wall, wall, height - 2*wall], center = true);\n    }\n}\n\n// Corner fillets for realistic appearance\nmodule corner_fillets() {\n    radius = 3;\n    \n    difference() {\n        // Outer fillets\n        union() {\n            brick_body();\n            studs();\n        }\n        \n        // Remove sharp corners\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                for (z = [-1, 1]) {\n                    translate([x*(length/2 - radius), \n                              y*(width/2 - radius), \n                              z*(height/2 - radius)])\n                        sphere(r = radius, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main brick structure\n    difference() {\n        corner_fillets();\n        \n        // Remove stud holes from bottom\n        translate([0, 0, -height/2 - 1])\n            cube([length + 1, width + 1, stud_h + 2], center = true);\n        \n        // Add stud holes\n        translate([0, 0, -height/2])\n            stud_holes();\n    }\n    \n    // Interior reinforcement (only visible in section view)\n    %ribs();\n}\n\n// Optional: Add slight chamfer to bottom edge for printability\ndifference() {\n    // Main body\n    children();\n    \n    // Chamfer\n    translate([0, 0, -height/2 - 0.1])\n        cube([length + 2, width + 2, 2], center = true);\n    \n    translate([0, 0, -height/2 + 1])\n        cube([length - 2, width - 2, 2], center = true);\n}",
    "renders": true
  },
  {
    "sports_equipment": "lego",
    "openscad_code": "// LEGO-Compatible Office Chair (realistic, medium complexity)\n// Approx. 70x70x110 mm – single print, no support needed\n\nstud_d  = 4.8;      // stud outer diameter\nstud_h  = 1.8;      // stud height\ntube_d  = 4.6;      // anti-stud tube diameter\ntube_h  = 2.8;      // anti-stud tube height\nwall    = 2;        // printable wall thickness\npitch   = 8;        // brick pitch\n\n// ---- helper: single round stud ----\nmodule stud() {\n    cylinder(h = stud_h, d = stud_d, $fn = 32);\n}\n\n// ---- helper: underside anti-stud tube ----\nmodule anti_stud() {\n    translate([0, 0, -tube_h])\n        cylinder(h = tube_h, d = tube_d, $fn = 32);\n}\n\n// ---- helper: 2×2 plate (with studs top & tubes bottom) ----\nmodule plate_2x2() {\n    size = 2*pitch;\n    height = wall + tube_h;\n    difference() {\n        union() {\n            // main block\n            translate([-size/2, -size/2, 0])\n                cube([size, size, height]);\n            // studs\n            for (i = [0:1])\n                for (j = [0:1])\n                    translate([(i-0.5)*pitch, (j-0.5)*pitch, height])\n                        stud();\n        }\n        // anti-studs\n        for (i = [0:1])\n            for (j = [0:1])\n                translate([(i-0.5)*pitch, (j-0.5)*pitch, height])\n                    anti_stud();\n    }\n}\n\n// ---- seat cushion ----\nmodule seat() {\n    width  = 10*pitch;   // 80 mm\n    depth  = 8*pitch;    // 64 mm\n    height = 3*pitch;    // 24 mm incl. studs\n    difference() {\n        // basic cushion block\n        translate([-width/2, -depth/2, 0])\n            cube([width, depth, height]);\n        // underside tubes\n        for (i = [0:9])\n            for (j = [0:7])\n                translate([(i-4.5)*pitch, (j-3.5)*pitch, 0])\n                    anti_stud();\n    }\n    // top studs\n    for (i = [0:9])\n        for (j = [0:7])\n            translate([(i-4.5)*pitch, (j-3.5)*pitch, height])\n                stud();\n}\n\n// ---- backrest ----\nmodule backrest() {\n    width  = 10*pitch;\n    height = 10*pitch;\n    thickness = 2*pitch;\n    translate([0, 0, 3*pitch])   // sits on rear edge of seat\n        rotate([90, 0, 0])\n            difference() {\n                translate([-width/2, 0, -thickness/2])\n                    cube([width, height, thickness]);\n                // anti-studs for attachment\n                for (i = [0:9])\n                    for (j = [0:9])\n                        translate([(i-4.5)*pitch, j*pitch, 0])\n                            anti_stud();\n            }\n}\n\n// ---- 5-star base ----\nmodule base() {\n    arm_length = 4*pitch;\n    arm_width  = 2*pitch;\n    arm_thick  = 1.5*pitch;\n    hub_r      = 3*pitch/2;\n    hub_h      = 2*pitch;\n    \n    // central hub\n    cylinder(h = hub_h, r = hub_r, $fn = 32);\n    \n    // five arms\n    for (a = [0:72:359]) {\n        rotate([0, 0, a])\n            translate([hub_r-arm_width/2, 0, 0])\n                cube([arm_length+arm_width/2, arm_width, arm_thick]);\n    }\n    \n    // rollers (simple cylinders)\n    for (a = [0:72:359]) {\n        rotate([0, 0, a])\n            translate([hub_r+arm_length, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = arm_width, r = arm_thick/2, $fn = 16);\n    }\n}\n\n// ---- gas lift column ----\nmodule gas_lift() {\n    column_r = pitch;\n    column_h = 8*pitch;\n    cylinder(h = column_h, r = column_r, $fn = 32);\n}\n\n// ---- final assembly ----\ntranslate([0, 0, 0]) base();\ntranslate([0, 0, 2*pitch]) gas_lift();\ntranslate([0, 0, 10*pitch]) seat();\ntranslate([0, -3.5*pitch, 10*pitch]) backrest();",
    "renders": true
  },
  {
    "sports_equipment": "scaffold",
    "openscad_code": "// Scaffold Bookshelf (realistic style, medium complexity)\n// Overall dimensions: 120mm W x 150mm H x 60mm D\n\n// Parameters\n$fn = 32;\nwall = 2; // 2mm wall thickness for 3D printing\nleg_size = 8; // Scaffold leg tube diameter\nshelf_thk = 4; // Shelf thickness\nshelf_w = 116; // Shelf width\nshelf_d = 56; // Shelf depth\nshelf_h = 35; // Vertical spacing between shelves\nnum_shelves = 4;\n\n// Scaffold tube module (hollow cylinder)\nmodule tube(h=100, d=8, wall=2) {\n    difference() {\n        cylinder(h=h, d=d);\n        translate([0,0,-0.1]) cylinder(h=h+0.2, d=d-wall*2);\n    }\n}\n\n// Scaffold joint with 4-way connection\nmodule joint() {\n    union() {\n        // Center sphere\n        sphere(d=leg_size+2);\n        \n        // Four connector tubes\n        rotate([0,90,0]) tube(h=leg_size/2+2, d=leg_size, wall=wall);\n        rotate([0,-90,0]) tube(h=leg_size/2+2, d=leg_size, wall=wall);\n        rotate([90,0,0]) tube(h=leg_size/2+2, d=leg_size, wall=wall);\n        rotate([-90,0,0]) tube(h=leg_size/2+2, d=leg_size, wall=wall);\n    }\n}\n\n// Scaffold shelf with supporting frame\nmodule shelf(w, d, thk, leg_d) {\n    // Main shelf board\n    translate([0,0,thk/2]) cube([w, d, thk], center=true);\n    \n    // Front cross brace\n    translate([0, d/2-leg_d/2, -leg_d/2]) \n        cube([w-leg_d*2, leg_d, leg_d], center=true);\n    \n    // Back cross brace\n    translate([0, -d/2+leg_d/2, -leg_d/2]) \n        cube([w-leg_d*2, leg_d, leg_d], center=true);\n    \n    // Side cross braces\n    translate([w/2-leg_d/2, 0, -leg_d/2]) \n        cube([leg_d, d-leg_d*2, leg_d], center=true);\n    translate([-w/2+leg_d/2, 0, -leg_d/2]) \n        cube([leg_d, d-leg_d*2, leg_d], center=true);\n}\n\n// Vertical leg assembly\nmodule leg_assembly(h_total, shelf_spacing, num_shelves, leg_d) {\n    // Calculate leg segments\n    num_segments = num_shelves + 1;\n    segment_h = h_total / num_segments;\n    \n    // Create legs for each corner\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*(shelf_w-leg_d)/2, y*(shelf_d-leg_d)/2, 0]) {\n                // Vertical tube\n                tube(h=h_total, d=leg_d, wall=wall);\n                \n                // Add joints at shelf levels\n                for(i = [0:num_shelves]) {\n                    translate([0,0,i*segment_h]) joint();\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\ntranslate([0,0,leg_size/2]) {\n    // Scaffold frame\n    leg_assembly(\n        h_total = num_shelves * shelf_h + leg_size, \n        shelf_spacing = shelf_h, \n        num_shelves = num_shelves, \n        leg_d = leg_size\n    );\n    \n    // Shelves\n    for(i = [1:num_shelves]) {\n        translate([0,0,i*leg_size/2 + (i-0.5)*shelf_h]) \n            shelf(shelf_w, shelf_d, shelf_thk, leg_size);\n    }\n    \n    // Base stabilizers\n    translate([0,0,leg_size/2]) {\n        // Front base\n        translate([0, shelf_d/2-leg_size/2, 0])\n            tube(h=shelf_w-leg_size, d=leg_size, wall=wall);\n        \n        // Back base\n        translate([0, -shelf_d/2+leg_size/2, 0])\n            tube(h=shelf_w-leg_size, d=leg_size, wall=wall);\n        \n        // Side bases\n        rotate([90,0,0])\n            translate([0, shelf_d/2-leg_size/2, 0])\n            tube(h=shelf_d-leg_size, d=leg_size, wall=wall);\n        \n        rotate([90,0,0])\n            translate([0, -shelf_d/2+leg_size/2, 0])\n            tube(h=shelf_d-leg_size, d=leg_size, wall=wall);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "ladder",
    "openscad_code": "// Realistic 3D-printable step-ladder furniture\n// Overall height 120 mm, width 40 mm, depth 20 mm\n// Wall thickness 2 mm everywhere for reliable printing\n\n$fn = 32;               // Smooth curves\n\n// Parameters\nladder_h = 120;         // Total height\nladder_w = 40;          // Outer width\nladder_d = 20;          // Depth\nrail_t = 2;             // Wall thickness\nrungs = 5;              // Number of steps\nstep_h = ladder_h/rungs;\n\n// Main module\nmodule ladder() {\n    // Left rail\n    translate([-ladder_w/2, 0, 0])\n        rail();\n\n    // Right rail\n    translate([ladder_w/2, 0, 0])\n        rail();\n\n    // Rungs\n    for(i=[0:rungs-1])\n        translate([0, 0, i*step_h + rail_t])\n            rung();\n    \n    // Anti-slip feet caps\n    foot_cap([-ladder_w/2 + rail_t/2, 0, 0]);\n    foot_cap([ladder_w/2 - rail_t/2, 0, 0]);\n    foot_cap([-ladder_w/2 + rail_t/2, 0, ladder_h - rail_t]);\n    foot_cap([ladder_w/2 - rail_t/2, 0, ladder_h - rail_t]);\n}\n\n// Single vertical rail\nmodule rail() {\n    difference() {\n        // Outer rail\n        cube([rail_t, ladder_d, ladder_h], center=true);\n        \n        // Inner cavity for weight saving\n        translate([0, 0, rail_t/2])\n            cube([rail_t - 1, ladder_d - 2, ladder_h - rail_t], center=true);\n    }\n}\n\n// Single horizontal rung\nmodule rung() {\n    difference() {\n        // Outer rung\n        cube([ladder_w - rail_t, ladder_d, rail_t], center=true);\n        \n        // Underside cavity\n        translate([0, 0, -rail_t/2 + 0.5])\n            cube([ladder_w - rail_t - 1, ladder_d - 2, rail_t - 1], center=true);\n    }\n}\n\n// Rubber-like foot cap\nmodule foot_cap(pos) {\n    translate(pos)\n    difference() {\n        // Cap body\n        cylinder(h = 2, r1 = 3, r2 = 2.5, center=true);\n        \n        // Socket cavity\n        translate([0, 0, 0.5])\n            cylinder(h = 3, r = 1.5, center=true);\n    }\n}\n\n// Render the ladder\nladder();",
    "renders": true
  },
  {
    "sports_equipment": "crane",
    "openscad_code": "// Crane Furniture - Medium Complexity Realistic Style\n// Overall dimensions: 100mm x 80mm x 120mm (L x W x H)\n\n$fn = 32;\n\n// Base parameters\nbase_width = 80;\nbase_depth = 60;\nbase_height = 8;\nwall_thickness = 2;\n\n// Tower parameters\ntower_width = 12;\ntower_height = 70;\ntower_x = 40;\ntower_z = base_height;\n\n// Boom parameters\nboom_length = 60;\nboom_width = 8;\nboom_height = 6;\nboom_angle = 30;\n\n// Counterweight parameters\ncounter_size = 15;\ncounter_weight = 20;\n\n// Hook parameters\nhook_radius = 3;\nhook_length = 15;\ncable_length = 35;\n\nmodule base() {\n    // Main base platform\n    difference() {\n        cube([base_width, base_depth, base_height], center=true);\n        \n        // Cable routing hole\n        translate([tower_x - 5, 0, -base_height/2])\n            cylinder(h=base_height+1, r=3);\n            \n        // Weight reduction cutouts\n        for(i = [-1, 1]) {\n            translate([i*20, i*15, -base_height/2])\n                cube([15, 20, base_height+1], center=true);\n        }\n    }\n    \n    // Base reinforcement ribs\n    for(i = [-1, 1]) {\n        translate([tower_x + i*20, 0, base_height/2 - wall_thickness])\n            cube([wall_thickness, base_depth - 10, 5]);\n    }\n}\n\nmodule tower() {\n    // Main tower structure\n    difference() {\n        translate([tower_x, 0, tower_z + tower_height/2])\n            cube([tower_width, tower_width, tower_height], center=true);\n            \n        // Internal hollow for weight reduction\n        translate([tower_x, 0, tower_z + tower_height/2])\n            cube([tower_width - 2*wall_thickness, \n                  tower_width - 2*wall_thickness, \n                  tower_height - wall_thickness], center=true);\n    }\n    \n    // Tower base reinforcement\n    translate([tower_x, 0, base_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=tower_width*1.5, r1=tower_width*0.75, r2=tower_width*0.5);\n}\n\nmodule counterweight() {\n    // Counterweight block\n    translate([tower_x - counter_size/2 - tower_width/2, \n               0, \n               tower_z + tower_height - counter_size/2])\n        cube([counter_size, counter_size, counter_size], center=true);\n        \n    // Counterweight support bracket\n    translate([tower_x - tower_width/2 - counter_weight/2, \n               0, \n               tower_z + tower_height - counter_weight/2])\n        cube([counter_weight, counter_size + 4, counter_weight], center=true);\n}\n\nmodule boom() {\n    // Boom pivot point\n    translate([tower_x + tower_width/2, 0, tower_z + tower_height])\n        rotate([0, 0, -boom_angle])\n            union() {\n                // Main boom arm\n                translate([boom_length/2, 0, 0])\n                    cube([boom_length, boom_width, boom_height], center=true);\n                    \n                // Boom reinforcement struts\n                for(i = [-1, 1]) {\n                    translate([boom_length/3, i*boom_width/2, 0])\n                        rotate([0, 90, -30])\n                            cylinder(h=boom_length/2, r=boom_width/4);\n                }\n                \n                // Boom tip pulley housing\n                translate([boom_length, 0, -boom_height/2])\n                    difference() {\n                        cube([boom_width*1.5, boom_width*1.5, boom_height*2], center=true);\n                        translate([0, 0, -boom_height])\n                            cylinder(h=boom_height*2+1, r=boom_width/3);\n                    }\n            }\n}\n\nmodule hook_assembly() {\n    // Cable from boom tip\n    translate([tower_x + tower_width/2 + cos(boom_angle)*boom_length, \n               0, \n               tower_z + tower_height - sin(boom_angle)*boom_length])\n        rotate([90, 0, 0])\n            cylinder(h=cable_length, r=0.5);\n            \n    // Hook block\n    translate([tower_x + tower_width/2 + cos(boom_angle)*boom_length, \n               0, \n               tower_z + tower_height - sin(boom_angle)*boom_length - cable_length])\n        difference() {\n            cube([hook_radius*2, hook_radius*2, hook_length], center=true);\n            translate([0, 0, -hook_length/2 - 1])\n                cylinder(h=hook_length+2, r=hook_radius*0.75);\n        }\n            \n    // Hook\n    translate([tower_x + tower_width/2 + cos(boom_angle)*boom_length, \n               hook_radius, \n               tower_z + tower_height - sin(boom_angle)*boom_length - cable_length - hook_length])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=hook_radius*3, r=hook_radius, center=true);\n                translate([0, 0, -hook_radius*3/2])\n                    cube([hook_radius*2, hook_radius*2, hook_radius*3+1], center=true);\n            }\n}\n\nmodule operator_cab() {\n    // Operator cab on tower\n    translate([tower_x + tower_width/2, 0, tower_z + tower_height*0.6])\n        difference() {\n            cube([tower_width*2, tower_width*1.5, tower_width*1.5], center=true);\n            \n            // Cab window\n            translate([tower_width, 0, tower_width/4])\n                cube([wall_thickness+1, tower_width*1.2, tower_width/2], center=true);\n                \n            // Cab door\n            translate([0, -tower_width*0.75 - wall_thickness/2, 0])\n                cube([tower_width*1.8, wall_thickness+1, tower_width*1.5], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    base();\n    tower();\n    counterweight();\n    boom();\n    hook_assembly();\n    operator_cab();\n}",
    "renders": true
  },
  {
    "sports_equipment": "hoist",
    "openscad_code": "// Hoist furniture item (engine hoist / shop crane style)\n// Realistic medium-complexity OpenSCAD model\n\n$fn = 32;\n\n// Main dimensions (in mm)\nbase_width = 80;\nbase_depth = 60;\nbase_height = 10;\nmast_height = 120;\nboom_length = 100;\nboom_diameter = 8;\nleg_width = 15;\nleg_thickness = 8;\nwheel_diameter = 12;\nwheel_thickness = 6;\n\n// Structural supports\nsupport_thickness = 3;\njoint_radius = 4;\n\nmodule wheel() {\n    // Wheel assembly with axle pin\n    difference() {\n        union() {\n            cylinder(h = wheel_thickness, d = wheel_diameter, center = true);\n            translate([0, 0, wheel_thickness/2 + 1])\n                cylinder(h = 2, d = wheel_diameter * 0.6);\n        }\n        // Axle hole\n        translate([0, 0, -wheel_thickness/2 - 1])\n            cylinder(h = wheel_thickness + 2, d = 4);\n    }\n}\n\nmodule base_frame() {\n    // Main rectangular base with structural reinforcement\n    difference() {\n        // Main base plate\n        cube([base_width, base_depth, base_height], center = true);\n        \n        // Lightening holes\n        for(x = [-base_width/3, 0, base_width/3])\n            for(y = [-base_depth/3, 0, base_depth/3])\n                translate([x, y, -1])\n                    cylinder(h = base_height + 2, d = 8);\n    }\n    \n    // Structural ribs underneath\n    for(x = [-base_width/2 + leg_width/2, base_width/2 - leg_width/2])\n        translate([x, 0, -base_height/2 - support_thickness/2])\n            cube([leg_width, base_depth * 0.8, support_thickness], center = true);\n}\n\nmodule support_leg(side) {\n    // Angled support leg with wheel mount\n    translate([side * (base_width/2 - leg_width/2), 0, -base_height/2]) {\n        rotate([0, side * 15, 0])\n            cube([leg_width, leg_thickness, mast_height * 0.7], center = true);\n        \n        // Wheel mount bracket\n        translate([0, 0, -mast_height * 0.35 - wheel_diameter/2 - 2])\n            rotate([90, 0, 0])\n                wheel();\n    }\n}\n\nmodule mast() {\n    // Vertical support mast with reinforcement plates\n    difference() {\n        // Main mast tube\n        translate([0, 0, mast_height/2])\n            cylinder(h = mast_height, d = 12);\n        \n        // Internal bore\n        translate([0, 0, -1])\n            cylinder(h = mast_height + 2, d = 8);\n    }\n    \n    // Base mounting plate\n    translate([0, 0, 0])\n        cube([20, 20, 4], center = true);\n    \n    // Reinforcement gussets\n    for(angle = [0:90:270])\n        rotate([0, 0, angle])\n            translate([10, 0, 2])\n                cube([8, 3, 6], center = true);\n}\n\nmodule boom() {\n    // Main lifting boom with I-beam profile\n    translate([boom_length/2, 0, mast_height - 20]) {\n        rotate([0, -30, 0]) {\n            // I-beam web\n            cube([boom_length, 3, boom_diameter], center = true);\n            \n            // Top flange\n            translate([0, 0, boom_diameter/2 + 1.5])\n                cube([boom_length, 3, 3], center = true);\n            \n            // Bottom flange\n            translate([0, 0, -boom_diameter/2 - 1.5])\n                cube([boom_length, 3, 3], center = true);\n            \n            // Hook mounting point\n            translate([boom_length * 0.8, 0, -boom_diameter/2 - 5])\n                cylinder(h = 10, d = 6);\n        }\n    }\n}\n\nmodule hydraulic_cylinder() {\n    // Telescoping hydraulic assembly\n    translate([0, -15, mast_height * 0.4]) {\n        rotate([0, 30, 0]) {\n            // Outer cylinder\n            cylinder(h = 50, d = 10);\n            \n            // Inner rod\n            translate([0, 0, 50])\n                cylinder(h = 30, d = 6);\n            \n            // Pivot mounts\n            sphere(d = 10);\n            translate([0, 0, 80])\n                sphere(d = 8);\n        }\n    }\n}\n\nmodule operator_handle() {\n    // Pump handle with grip texture\n    translate([-15, -25, mast_height * 0.3]) {\n        rotate([0, 0, -45]) {\n            // Main handle tube\n            cylinder(h = 30, d = 6);\n            \n            // Grip rings\n            for(i = [5:5:25])\n                translate([0, 0, i])\n                    cylinder(h = 2, d = 8);\n            \n            // Pump lever pivot\n            translate([0, -5, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 10, d = 4);\n        }\n    }\n}\n\n// Assemble the hoist\nunion() {\n    base_frame();\n    \n    // Support legs with wheels\n    support_leg(1);\n    support_leg(-1);\n    \n    // Main structure\n    mast();\n    boom();\n    hydraulic_cylinder();\n    operator_handle();\n}",
    "renders": true
  },
  {
    "sports_equipment": "mixer",
    "openscad_code": "// KitchenAid-Style Stand Mixer Furniture (Medium Complexity)\n// Overall size: 100mm x 150mm x 120mm (W x D x H)\n\nmodule mixer_base() {\n    // Main base housing\n    difference() {\n        cube([90, 140, 35], center=true);\n        translate([0, 0, 17])\n            cube([86, 136, 35], center=true);\n    }\n}\n\nmodule mixer_body() {\n    // Curved body shell\n    hull() {\n        translate([0, 0, 30])\n            cube([60, 55, 70], center=true);\n        translate([0, 0, 50])\n            cube([55, 50, 50], center=true);\n    }\n    \n    // Front control panel\n    translate([-32, 0, 40])\n        cube([5, 30, 20], center=true);\n}\n\nmodule mixer_head() {\n    // Main motor housing\n    translate([0, 0, 85])\n        rotate([0, 15, 0])\n        difference() {\n            cube([70, 65, 40], center=true);\n            translate([0, 0, 20])\n                cube([66, 61, 40], center=true);\n        }\n    \n    // Head lock lever\n    translate([0, 40, 95])\n        rotate([0, 15, 0])\n        cylinder(h=15, r=5, center=true);\n}\n\nmodule bowl() {\n    // Mixing bowl\n    translate([0, -20, 35])\n        difference() {\n            cylinder(h=45, r=35, center=false);\n            translate([0, 0, 2])\n                cylinder(h=45, r=33, center=false);\n        }\n}\n\nmodule attachments() {\n    // Whisk attachment\n    translate([0, -20, 80])\n        cylinder(h=40, r=3, center=false);\n    \n    // Whisk wires\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n        translate([5, -20, 85])\n            cylinder(h=30, r=1.5, center=false);\n    }\n}\n\nmodule feet() {\n    // Rubber feet at corners\n    for(x=[-35, 35])\n    for(y=[-60, 60])\n        translate([x, y, -17.5])\n            cylinder(h=4, r=4, center=false);\n}\n\nmodule speed_control() {\n    // Speed adjustment lever\n    translate([-29, 0, 45])\n    rotate([0, 0, 30])\n    difference() {\n        cube([2, 12, 8], center=true);\n        translate([0, 0, 4])\n            cube([1.5, 11, 7], center=true);\n    }\n}\n\nmodule logo_plate() {\n    // Brand plate on front\n    translate([0, 35, 40])\n        cube([25, 2, 10], center=true);\n}\n\n// Assembly\nunion() {\n    mixer_base();\n    mixer_body();\n    mixer_head();\n    bowl();\n    attachments();\n    feet();\n    speed_control();\n    logo_plate();\n    \n    // Reinforcement ribs\n    for(y=[-40, 0, 40]) {\n        translate([0, y, 20])\n            cube([80, 2, 20], center=true);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "shovel",
    "openscad_code": "// Shovel furniture item - realistic style, medium complexity\n// 3D printable at roughly 100mm handle length\n\n// Overall dimensions\nhandle_length = 100;\nhandle_diameter = 8;\nblade_width = 35;\nblade_length = 45;\nblade_thickness = 2;\nsocket_length = 25;\nsocket_diameter = 10;\n\n// Handle grip texture module\nmodule grip_texture() {\n    for(i = [0:5:handle_length-20]) {\n        translate([0, 0, i])\n        difference() {\n            cylinder(h=3, d=handle_diameter+1, $fn=32);\n            cylinder(h=3.5, d=handle_diameter-1, $fn=32);\n        }\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    // Main handle shaft\n    cylinder(h=handle_length, d=handle_diameter, $fn=32);\n    \n    // Grip area\n    translate([0, 0, handle_length-25])\n    grip_texture();\n    \n    // End cap\n    translate([0, 0, handle_length])\n    sphere(d=handle_diameter+2, $fn=32);\n}\n\n// Socket connecting handle to blade\nmodule socket() {\n    difference() {\n        // Main socket tube\n        cylinder(h=socket_length, d=socket_diameter, $fn=32);\n        \n        // Tapered interior\n        translate([0, 0, -0.5])\n        cylinder(h=socket_length+1, d1=handle_diameter-1, d2=handle_diameter+1, $fn=32);\n    }\n    \n    // Reinforcement rings\n    for(i = [0:8:20]) {\n        translate([0, 0, i])\n        cylinder(h=2, d=socket_diameter+3, $fn=32);\n    }\n}\n\n// Shovel blade with realistic curves\nmodule blade() {\n    union() {\n        // Main blade body\n        translate([-blade_width/2, 0, 0])\n        linear_extrude(height=blade_thickness, convexity=10)\n        polygon(points=[\n            [0, 0],\n            [blade_width, 0],\n            [blade_width-5, blade_length],\n            [blade_width/2, blade_length+5],\n            [5, blade_length],\n            [0, 0]\n        ]);\n        \n        // Strengthening ribs on back\n        translate([0, 0, blade_thickness])\n        for(i = [-1, 0, 1]) {\n            translate([i*blade_width/4, blade_length/2, 0])\n            cube([2, blade_length/2, 3]);\n        }\n        \n        // Central spine\n        translate([0, 0, blade_thickness])\n        cube([3, blade_length+5, 5]);\n    }\n}\n\n// Step plate for foot\nmodule step_plate() {\n    translate([-blade_width/2-2, 5, blade_thickness])\n    cube([blade_width+4, 8, 2]);\n}\n\n// Full shovel assembly\nmodule shovel() {\n    union() {\n        // Handle\n        translate([0, 0, 0])\n        handle();\n        \n        // Socket\n        translate([0, 0, 0])\n        rotate([90, 0, 0])\n        socket();\n        \n        // Blade assembly\n        translate([0, socket_length, 0])\n        rotate([0, 90, 0])\n        union() {\n            blade();\n            step_plate();\n        }\n    }\n}\n\n// Generate the model\nshovel();",
    "renders": true
  },
  {
    "sports_equipment": "trowel",
    "openscad_code": "// Trowel Furniture Item - Realistic Style, Medium Complexity\n// A decorative trowel-shaped shelf bracket or wall-mounted organizer\n\n// Parameters\n$fn = 64;\nwall_thickness = 2;\nblade_length = 80;\nblade_width = 55;\nblade_thickness = 3;\nhandle_length = 70;\nhandle_diameter = 20;\nmount_hole_diameter = 5;\n\n// Main module\nmodule trowel_furniture() {\n    // Blade component\n    union() {\n        // Main blade body\n        difference() {\n            // Tapered blade shape\n            hull() {\n                translate([0, 0, blade_thickness/2])\n                    cube([blade_length, blade_width, blade_thickness], center=true);\n                translate([blade_length/2 - 15, 0, blade_thickness/2])\n                    cube([30, blade_width * 0.7, blade_thickness], center=true);\n            }\n            \n            // Rounded blade tip\n            translate([blade_length/2 - 5, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=20, r1=5, r2=0);\n        }\n        \n        // Blade reinforcement ribs\n        for(i = [-1, 1]) {\n            translate([10, i * blade_width/4, 0])\n                cube([blade_length * 0.6, wall_thickness, blade_thickness + 1], center=true);\n        }\n        \n        // Decorative groove pattern\n        for(i = [1:5]) {\n            translate([i * 12 - blade_length/2 + 10, 0, blade_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(h=blade_width * 0.8, r=1, $fn=16);\n        }\n    }\n    \n    // Handle component\n    translate([-blade_length/2 - handle_length/2 - 5, 0, 0])\n        union() {\n            // Main handle cylinder\n            rotate([0, 90, 0])\n                cylinder(h=handle_length, r=handle_diameter/2);\n            \n            // Handle grip texture rings\n            for(i = [0:5]) {\n                translate([-i * 10 - 5, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=3, r=handle_diameter/2 + 1);\n            }\n            \n            // Handle end cap\n            translate([-handle_length, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=5, r1=handle_diameter/2, r2=handle_diameter/2 - 2);\n        }\n    \n    // Mounting bracket\n    translate([-blade_length/2 - 30, 0, blade_thickness/2 + 5])\n        union() {\n            // Bracket base\n            cube([15, blade_width * 0.4, 10], center=true);\n            \n            // Mounting holes\n            for(i = [-1, 1]) {\n                translate([0, i * 12, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=20, r=mount_hole_diameter/2, $fn=32);\n            }\n        }\n    \n    // Shelf support arms\n    for(i = [-1, 1]) {\n        translate([blade_length/4, i * blade_width/3, blade_thickness/2 + 10])\n            union() {\n                // Vertical support\n                cube([wall_thickness, wall_thickness, 15]);\n                \n                // Horizontal shelf support\n                translate([0, 0, 15])\n                    cube([blade_length/3, wall_thickness * 2, wall_thickness]);\n            }\n    }\n}\n\n// Generate the model\ntrowel_furniture();",
    "renders": true
  },
  {
    "sports_equipment": "level",
    "openscad_code": "// OpenSCAD 3D printable level – realistic style, medium complexity\n// Overall length: 120 mm, width: 25 mm, thickness: 12 mm\n// Wall thickness ≥ 2 mm everywhere, printable without supports\n\n// ---------- Parameters ----------\nbody_len = 120;\nbody_w   = 25;\nbody_h   = 12;\n\nwall = 2;               // shell / wall thickness\nvial_d = 8;             // diameter of spirit vials\nvial_h = 2;             // height of vial windows\ngrip_pitch = 4;         // distance between grip ridges\ngrip_h = 0.8;           // height of grip ridges\nscrew_d = 3;            // mounting screw hole diameter\nscrew_head_d = 6;       // countersink for screw head\nscrew_depth = 4;\n\n// ---------- Main body ----------\nmodule level_body() {\n    difference() {\n        // outer block\n        cube([body_len, body_w, body_h], center = true);\n\n        // hollow core\n        translate([0, 0, wall/2])\n            cube([body_len - 2*wall, body_w - 2*wall, body_h - wall], center = true);\n\n        // three view windows for vials\n        translate([-body_len/3, 0, 0])\n            cube([vial_h*2, body_w - 2*wall, body_h], center = true);\n        translate([0, 0, 0])\n            cube([vial_h*2, body_w - 2*wall, body_h], center = true);\n        translate([body_len/3, 0, 0])\n            cube([vial_h*2, body_w - 2*wall, body_h], center = true);\n\n        // mounting hole at center\n        rotate([90, 0, 0])\n            cylinder(h = body_w + 0.1, d = screw_d, center = true, $fn = 20);\n        rotate([90, 0, 0])\n            cylinder(h = body_w + 0.1, d = screw_head_d, center = true, $fn = 20);\n    }\n}\n\n// ---------- Spirit vials ----------\nmodule vial(pos) {\n    // clear acrylic tube\n    translate(pos)\n        difference() {\n            cylinder(h = body_w - 2*wall, d = vial_d, center = true, $fn = 20);\n            cylinder(h = body_w - 2*wall + 0.2, d = vial_d - 2*wall, center = true, $fn = 20);\n        }\n    // bubble (air pocket)\n    translate(pos + [0, 0, 0])\n        scale([1, 0.4, 1])\n            sphere(d = vial_d/3, $fn = 16);\n}\n\n// ---------- End caps ----------\nmodule end_cap(side) {\n    translate([side * (body_len/2 + wall/2), 0, 0])\n        cube([wall, body_w, body_h], center = true);\n}\n\n// ---------- Grip ridges on top and bottom ----------\nmodule grip_pattern() {\n    for (i = [-body_len/2 + grip_pitch : grip_pitch : body_len/2 - grip_pitch]) {\n        translate([i, 0, body_h/2 - grip_h/2])\n            cube([grip_pitch*0.6, body_w - 2*wall, grip_h], center = true);\n        translate([i, 0, -body_h/2 + grip_h/2])\n            cube([grip_pitch*0.6, body_w - 2*wall, grip_h], center = true);\n    }\n}\n\n// ---------- Assembly ----------\nunion() {\n    level_body();\n    end_cap(-1);  // left cap\n    end_cap(1);   // right cap\n    grip_pattern();\n    vial([-body_len/3, 0, 0]);\n    vial([0, 0, 0]);\n    vial([body_len/3, 0, 0]);\n}",
    "renders": true
  },
  {
    "sports_equipment": "plumb",
    "openscad_code": "// PLUMB FURNITURE – realistic style, medium complexity\n// A plumb bob re-imagined as a small decorative side-table / stool\n// Overall size ≈ 130 mm tall, 100 mm diameter at widest\n\n// Parameters ---------------------------------------------------------\nth = 2;          // wall / plate thickness\nr_body = 48;     // radius of the plumb bob body\nh_body = 90;     // height of the plumb bob body  \nr_neck = 6;      // radius of hanging neck\nh_neck = 12;\nh_top = 8;       // thickness of top plate / seat\nr_top = 50;      // radius of the seat\nr_base = 40;     // radius of the foot ring\nh_base = 10;     // height of foot ring\ngrip_r = 1.5;    // radius of grip ribs\ngrip_n = 24;     // number of grip ribs\ngrip_h = 60;     // height of grip zone\n$fn = 48;\n\n// Utility module: grip ribs around a cylinder ------------------------\nmodule grip_ribs(r_outer, h_zone, ribs) {\n    for(i=[0:ribs-1])\n        rotate([0,0,i*360/ribs])\n            translate([r_outer,0,0])\n                rotate([0,90,0])\n                    cylinder(h=1, r=grip_r, center=true);\n}\n\n// Main body ----------------------------------------------------------\nmodule plumb_body() {\n    difference() {\n        // outer shell\n        union() {\n            // pointed bob\n            cylinder(h=h_body, r1=r_body, r2=0, center=false);\n            // neck\n            translate([0,0,h_body])\n                cylinder(h=h_neck, r=r_neck, center=false);\n        }\n        // hollow inside for printing\n        translate([0,0,th])\n            cylinder(h=h_body-th, r1=r_body-th, r2=0, center=false);\n    }\n    // grip texture\n    translate([0,0,h_body-grip_h/2])\n        grip_ribs(r_body, grip_h, grip_n);\n}\n\n// Seat / top plate ---------------------------------------------------\nmodule seat() {\n    difference() {\n        // solid disc\n        cylinder(h=h_top, r=r_top, center=false);\n        // central hole for neck\n        translate([0,0,-1])\n            cylinder(h=h_top+2, r=r_neck+1, center=false);\n    }\n}\n\n// Base ring for stability -------------------------------------------\nmodule base_ring() {\n    difference() {\n        cylinder(h=h_base, r=r_base, center=false);\n        cylinder(h=h_base+1, r=r_base-th, center=false);\n    }\n}\n\n// Assembly -----------------------------------------------------------\nunion() {\n    // base\n    base_ring();\n    // body\n    translate([0,0,h_base])\n        plumb_body();\n    // seat\n    translate([0,0,h_base+h_body+h_neck])\n        seat();\n}",
    "renders": true
  },
  {
    "sports_equipment": "beam",
    "openscad_code": "// Beam furniture - coffee table with I-beam support structure\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Main dimensions\ntable_length = 120;\ntable_width = 70;\ntable_height = 45;\nbeam_height = 30;\nbeam_width = 40;\nbeam_thickness = 3;\nflange_thickness = 4;\nleg_height = table_height - beam_height - 2;\n\n// Wood texture parameters\ngroove_width = 1.5;\ngroove_depth = 0.5;\ngroove_spacing = 8;\n\n// Bolt details\nbolt_radius = 2;\nbolt_head_radius = 3.5;\nbolt_head_height = 2;\n\n// Wood color simulation\ncolor([0.4, 0.25, 0.15]);\n\n// Main tabletop\nmodule tabletop() {\n    difference() {\n        // Main tabletop\n        cube([table_length, table_width, 2], center=true);\n        \n        // Wood grain grooves on top\n        for (i = [-table_length/2 + groove_spacing : groove_spacing : table_length/2 - groove_spacing]) {\n            translate([i, -table_width/2, 1]) {\n                cube([groove_width, table_width, groove_depth + 0.1]);\n            }\n        }\n        \n        // Rounded edges - subtract corner cylinders\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([x * (table_length/2 - 1), y * (table_width/2 - 1), 0]) {\n                    cylinder(h=3, r=1, center=true);\n                }\n            }\n        }\n    }\n}\n\n// I-beam support structure\nmodule i_beam() {\n    difference() {\n        union() {\n            // Top flange\n            translate([0, 0, beam_height/2 - flange_thickness/2]) {\n                cube([table_length - 20, beam_width, flange_thickness], center=true);\n            }\n            \n            // Web\n            translate([0, 0, 0]) {\n                cube([table_length - 20, beam_thickness, beam_height - 2*flange_thickness], center=true);\n            }\n            \n            // Bottom flange\n            translate([0, 0, -beam_height/2 + flange_thickness/2]) {\n                cube([table_length - 20, beam_width, flange_thickness], center=true);\n            }\n        }\n        \n        // Lightening holes in web\n        for (i = [-table_length/2 + 30 : 20 : table_length/2 - 30]) {\n            translate([i, 0, 0]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=beam_thickness + 1, r=6, center=true);\n                }\n            }\n        }\n        \n        // Rounded edges on flanges\n        for (x = [-1, 1]) {\n            for (z = [-1, 1]) {\n                translate([x * (table_length/2 - 10), 0, z * (beam_height/2 - flange_thickness/2)]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=beam_width, r=2, center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Leg structure\nmodule leg(x_pos, y_pos) {\n    // Main leg post\n    translate([x_pos, y_pos, -leg_height/2 - beam_height/2 - 1]) {\n        difference() {\n            cube([6, 6, leg_height], center=true);\n            \n            // Corner rounding\n            for (x = [-1, 1]) {\n                for (y = [-1, 1]) {\n                    translate([x * 2.5, y * 2.5, 0]) {\n                        cylinder(h=6, r=1.5, center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Gusset plates for stability\n    translate([x_pos, y_pos, -beam_height/2 - leg_height/4]) {\n        difference() {\n            union() {\n                // Side gusset\n                translate([x_pos > 0 ? 3 : -3, 0, 0]) {\n                    rotate([0, 0, x_pos > 0 ? 0 : 180]) {\n                        cube([6, 2, leg_height/2], center=true);\n                    }\n                }\n                \n                // Front/back gusset\n                translate([0, y_pos > 0 ? 3 : -3, 0]) {\n                    rotate([0, 0, y_pos > 0 ? 90 : -90]) {\n                        cube([6, 2, leg_height/2], center=true);\n                    }\n                }\n            }\n            \n            // Cut excess\n            translate([0, 0, -leg_height/2]) {\n                cube([20, 20, leg_height/2 + 1], center=true);\n            }\n        }\n    }\n    \n    // Bolt detail\n    color([0.3, 0.3, 0.3])\n    translate([x_pos, y_pos, -beam_height/2 - 5]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=10, r=bolt_radius, center=true);\n            translate([0, 0, 5]) {\n                cylinder(h=bolt_head_height, r=bolt_head_radius);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, table_height - 1]) {\n    tabletop();\n}\n\ntranslate([0, 0, beam_height/2 + leg_height/2 + 1]) {\n    i_beam();\n}\n\n// Four legs\nfor (x = [-1, 1]) {\n    for (y = [-1, 1]) {\n        leg(x * (table_length/2 - 15), y * (table_width/2 - 15));\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "joist",
    "openscad_code": "// Joist Furniture Item - Realistic Style\n// A structural wooden joist with metal bracket joints and realistic proportions\n\n// Overall dimensions\njoist_length = 120;\njoist_width = 40;\njoist_height = 60;\n\n// Wood texture parameters\ngroove_depth = 0.5;\ngroove_width = 2;\ngroove_spacing = 5;\n\n// Metal bracket dimensions\nbracket_thickness = 2;\nbracket_width = 30;\nbracket_height = 40;\nbracket_length = 20;\n\n// Screw holes\nscrew_radius = 1.5;\nscrew_depth = 3;\n\nmodule wood_texture(direction = \"horizontal\") {\n    if (direction == \"horizontal\") {\n        for (i = [0:groove_spacing:joist_length]) {\n            translate([i, 0, -groove_depth/2])\n                cube([groove_width, joist_width, groove_depth]);\n        }\n    } else {\n        for (i = [0:groove_spacing:joist_width]) {\n            translate([0, i, -groove_depth/2])\n                cube([joist_length, groove_width, groove_depth]);\n        }\n    }\n}\n\nmodule screw_holes() {\n    translate([bracket_length/4, bracket_width/4, -screw_depth])\n        cylinder(r=screw_radius, h=screw_depth+1);\n    translate([bracket_length*3/4, bracket_width/4, -screw_depth])\n        cylinder(r=screw_radius, h=screw_depth+1);\n    translate([bracket_length/4, bracket_width*3/4, -screw_depth])\n        cylinder(r=screw_radius, h=screw_depth+1);\n    translate([bracket_length*3/4, bracket_width*3/4, -screw_depth])\n        cylinder(r=screw_radius, h=screw_depth+1);\n}\n\nmodule metal_bracket() {\n    difference() {\n        // Main bracket body\n        translate([-bracket_thickness, 0, 0])\n            cube([bracket_thickness, bracket_width, bracket_height]);\n        \n        // Screw holes\n        screw_holes();\n        \n        // Chamfer edges\n        translate([-bracket_thickness-1, -1, -1])\n            cube([bracket_thickness+2, 2, bracket_height+2]);\n        translate([-bracket_thickness-1, bracket_width-1, -1])\n            cube([bracket_thickness+2, 2, bracket_height+2]);\n    }\n}\n\nmodule joist_body() {\n    difference() {\n        // Main joist\n        translate([0, 0, 0])\n            cube([joist_length, joist_width, joist_height]);\n        \n        // Create wood texture on top\n        translate([0, 0, joist_height])\n            wood_texture(\"horizontal\");\n        \n        // Wood texture on sides\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                translate([0, 0, -joist_width])\n                    wood_texture(\"vertical\");\n        \n        // Rounded edges (subtle)\n        translate([-1, -1, -1])\n            cube([joist_length+2, 2, joist_height+2]);\n        translate([-1, joist_width-1, -1])\n            cube([joist_length+2, 2, joist_height+2]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main joist\n    joist_body();\n    \n    // Left bracket\n    translate([0, (joist_width-bracket_width)/2, 0])\n        metal_bracket();\n    \n    // Right bracket\n    translate([joist_length-bracket_length, (joist_width-bracket_width)/2, 0])\n        mirror([1, 0, 0])\n            metal_bracket();\n    \n    // Center support plates\n    translate([joist_length/2-10, -2, joist_height/2-5])\n        cube([20, 4, 10]);\n    translate([joist_length/2-10, joist_width-2, joist_height/2-5])\n        cube([20, 4, 10]);\n}",
    "renders": true
  },
  {
    "sports_equipment": "stud",
    "openscad_code": "// Stud Furniture - Realistic Style\n// A 2x4 stud used as a furniture leg with joints and mounting features\n\nstud_length = 100;\nstud_width = 38;\nstud_thickness = 89;\nwall_thickness = 2;\n\nmodule wood_texture(height, width, depth) {\n    // Creates wood grain texture using small cylinders\n    for (i = [0:2:height]) {\n        translate([0, i - height/2, 0])\n            rotate([0, 90, 0])\n                cylinder(h=width, d=0.5, $fn=8);\n    }\n}\n\nmodule stud_body() {\n    difference() {\n        // Main stud body\n        cube([stud_thickness, stud_width, stud_length], center=true);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 0])\n            cube([stud_thickness-wall_thickness*2, stud_width-wall_thickness*2, stud_length-4], center=true);\n    }\n}\n\nmodule rounded_edges() {\n    // Add rounded edges to make it more realistic\n    hull() {\n        translate([stud_thickness/2-2, stud_width/2-2, stud_length/2-2])\n            sphere(d=4, $fn=16);\n        translate([-stud_thickness/2+2, stud_width/2-2, stud_length/2-2])\n            sphere(d=4, $fn=16);\n        translate([stud_thickness/2-2, -stud_width/2+2, stud_length/2-2])\n            sphere(d=4, $fn=16);\n        translate([-stud_thickness/2+2, -stud_width/2+2, stud_length/2-2])\n            sphere(d=4, $fn=16);\n    }\n}\n\nmodule mounting_plate() {\n    // Top mounting plate with screw holes\n    difference() {\n        translate([0, 0, stud_length/2 + 3])\n            cube([50, 30, 6], center=true);\n        \n        // Screw holes\n        for (x = [-15, 15]) {\n            for (y = [-8, 8]) {\n                translate([x, y, stud_length/2 + 6.1])\n                    cylinder(h=7, d=3.5, $fn=16);\n            }\n        }\n    }\n}\n\nmodule bottom_cap() {\n    // Protective bottom cap\n    difference() {\n        translate([0, 0, -stud_length/2 - 2])\n            cube([stud_thickness + 4, stud_width + 4, 4], center=true);\n        \n        // Recess for stud\n        translate([0, 0, -stud_length/2 - 1.9])\n            cube([stud_thickness, stud_width, 4.2], center=true);\n    }\n}\n\nmodule grain_detail() {\n    // Wood grain on all four sides\n    translate([0, 0, 0]) {\n        // Front face grain\n        translate([0, stud_width/2 + 0.1, 0])\n            wood_texture(stud_length, stud_thickness, 0.2);\n        \n        // Back face grain\n        translate([0, -stud_width/2 - 0.1, 0])\n            rotate([0, 180, 0])\n                wood_texture(stud_length, stud_thickness, 0.2);\n        \n        // Left face grain\n        translate([stud_thickness/2 + 0.1, 0, 0])\n            rotate([0, 0, 90])\n                wood_texture(stud_length, stud_width, 0.2);\n        \n        // Right face grain\n        translate([-stud_thickness/2 - 0.1, 0, 0])\n            rotate([0, 0, -90])\n                wood_texture(stud_length, stud_width, 0.2);\n    }\n}\n\nmodule joint_details() {\n    // Mortise and tenon style joints\n    translate([0, 0, stud_length/2 - 20]) {\n        difference() {\n            cube([10, stud_width, 10], center=true);\n            cube([8, stud_width-4, 12], center=true);\n        }\n    }\n    \n    translate([0, 0, -stud_length/2 + 20]) {\n        difference() {\n            cube([10, stud_width, 10], center=true);\n            cube([8, stud_width-4, 12], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    stud_body();\n    grain_detail();\n    mounting_plate();\n    bottom_cap();\n    joint_details();\n}",
    "renders": true
  },
  {
    "sports_equipment": "truss",
    "openscad_code": "// Truss-style side table\n// Dimensions: 120mm L x 80mm W x 100mm H\n// Features triangular truss structure with tabletop and cross-bracing\n\n// Parameters\ntable_length = 120;\ntable_width = 80;\ntable_height = 100;\nleg_size = 6;\nbracing_size = 3;\ntabletop_thickness = 4;\nwall_thickness = 2;\n\n// Main module\nmodule truss_table() {\n    // Base frame\n    union() {\n        // Tabletop\n        translate([0, 0, table_height]) {\n            cube([table_length, table_width, tabletop_thickness], center = true);\n        }\n        \n        // Leg assemblies - one at each corner\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([x * (table_length/2 - leg_size), \n                          y * (table_width/2 - leg_size), 0]) {\n                    leg_assembly(table_height - tabletop_thickness/2);\n                }\n            }\n        }\n        \n        // Side cross-bracing\n        for (i = [-1, 1]) {\n            // Long side bracing\n            translate([0, i * (table_width/2 - 15), table_height/2]) {\n                rotate([0, 90, 0]) {\n                    triangular_brace(table_length - 30, bracing_size);\n                }\n            }\n            \n            // Short side bracing\n            translate([i * (table_length/2 - 15), 0, table_height/2]) {\n                rotate([90, 0, 0]) {\n                    triangular_brace(table_width - 30, bracing_size);\n                }\n            }\n        }\n        \n        // Bottom shelf supports\n        for (x = [-1, 1]) {\n            translate([x * (table_length/2 - 20), 0, 30]) {\n                cube([leg_size, table_width - 40, wall_thickness], center = true);\n            }\n        }\n        for (y = [-1, 1]) {\n            translate([0, y * (table_width/2 - 20), 30]) {\n                cube([table_length - 40, leg_size, wall_thickness], center = true);\n            }\n        }\n    }\n}\n\n// Single leg assembly with triangular bracing\nmodule leg_assembly(height) {\n    // Main vertical leg\n    cylinder(h = height, r = leg_size, center = false, $fn = 8);\n    \n    // Triangular support brackets\n    for (angle = [0, 90, 180, 270]) {\n        rotate([0, 0, angle]) {\n            translate([leg_size, 0, height - 15]) {\n                rotate([0, 90, 0]) {\n                    triangular_brace(20, bracing_size);\n                }\n            }\n        }\n    }\n}\n\n// Triangular truss brace\nmodule triangular_brace(length, thickness) {\n    // Main diagonal member\n    rotate([0, 0, 30]) {\n        cube([length, thickness, thickness], center = true);\n    }\n    \n    // Second diagonal member\n    rotate([0, 0, -30]) {\n        cube([length, thickness, thickness], center = true);\n    }\n    \n    // Horizontal tie\n    translate([length/4, 0, 0]) {\n        cube([length/2, thickness, thickness], center = true);\n    }\n}\n\n// Central support column\nmodule center_support() {\n    translate([0, 0, table_height/2]) {\n        cylinder(h = table_height, r = leg_size * 1.5, center = true, $fn = 8);\n    }\n}\n\n// Generate the table\ntruss_table();",
    "renders": true
  },
  {
    "sports_equipment": "rebar",
    "openscad_code": "// Rebar Stool - Realistic Style, Medium Complexity\n// 3D printable rebar furniture piece with proper proportions and structural details\n\n// Parameters\nrod_diameter = 4;\nseat_diameter = 80;\nseat_thickness = 3;\nleg_length = 70;\nfoot_diameter = 12;\nfoot_height = 2;\njoint_diameter = 6;\njoint_height = 4;\nrib_thickness = 2;\ngrip_height = 1;\ngrip_spacing = 8;\n\n// Main stool assembly\nmodule rebar_stool() {\n    // Seat\n    union() {\n        // Seat base\n        cylinder(h=seat_thickness, d=seat_diameter, $fn=64);\n        \n        // Seat ribs\n        for (i = [0:45:135]) {\n            rotate([0, 0, i])\n            translate([-seat_diameter/2 + rod_diameter/2, -rod_diameter/2, seat_thickness/2])\n            cube([seat_diameter - rod_diameter, rod_diameter, seat_thickness]);\n        }\n        \n        // Grip texture on seat\n        for (r = [20:20:seat_diameter/2 - 10]) {\n            for (a = [0:15:359]) {\n                rotate([0, 0, a])\n                translate([r, -rib_thickness/2, seat_thickness - grip_height])\n                cube([grip_spacing, rib_thickness, grip_height]);\n            }\n        }\n    }\n    \n    // Leg assembly\n    for (i = [0:120:359]) {\n        rotate([0, 0, i])\n        translate([0, 0, -leg_length/2 - seat_thickness/2])\n        rebar_leg();\n    }\n}\n\n// Single rebar leg with realistic details\nmodule rebar_leg() {\n    translate([seat_diameter/2 - rod_diameter, 0, 0])\n    union() {\n        // Main leg rod\n        cylinder(h=leg_length, d=rod_diameter, $fn=16);\n        \n        // Joint connection to seat\n        translate([0, 0, leg_length/2])\n        cylinder(h=joint_height, d=joint_diameter, $fn=16);\n        \n        // Joint connection to foot\n        translate([0, 0, -leg_length/2])\n        cylinder(h=joint_height, d=joint_diameter, $fn=16);\n        \n        // Foot base\n        translate([0, 0, -leg_length/2 - foot_height/2])\n        cylinder(h=foot_height, d=foot_diameter, $fn=32);\n        \n        // Rebar texture rings\n        for (z = [-leg_length/2 + 5:5:leg_length/2 - 5]) {\n            translate([0, 0, z])\n            difference() {\n                cylinder(h=0.5, d=rod_diameter + 0.5, $fn=16);\n                cylinder(h=1, d=rod_diameter - 0.5, $fn=16);\n            }\n        }\n        \n        // Support ribs\n        rotate([0, 90, 0])\n        translate([-rod_diameter/2, -rod_diameter/2, 0])\n        cube([rod_diameter, leg_length, rod_diameter]);\n    }\n}\n\n// Render the stool centered\ntranslate([0, 0, leg_length/2 + seat_thickness/2])\nrebar_stool();",
    "renders": true
  },
  {
    "sports_equipment": "concrete",
    "openscad_code": "// Concrete Stool with Reinforced Base\n// Realistic style, medium complexity\n\n// Overall dimensions\nstool_height = 85;\nseat_diameter = 300;\nleg_width = 40;\nbase_thickness = 15;\nwall_thickness = 3;\n\n// Reinforcement bars\nrebar_diameter = 8;\nrebar_spacing = 40;\n\nmodule seat() {\n    difference() {\n        // Main seat disk\n        cylinder(h=wall_thickness, d=seat_diameter, $fn=100);\n        \n        // Center hole for weight reduction\n        cylinder(h=wall_thickness+1, d=40, $fn=32);\n        \n        // Drainage holes around edge\n        for(i=[0:7]) {\n            rotate([0, 0, i*45]) \n            translate([seat_diameter/2-20, 0, 0])\n            cylinder(h=wall_thickness+1, d=6, $fn=16);\n        }\n    }\n}\n\nmodule leg() {\n    difference() {\n        // Main leg block\n        translate([-leg_width/2, -leg_width/2, 0])\n        cube([leg_width, leg_width, stool_height-wall_thickness-base_thickness]);\n        \n        // Weight reduction holes\n        translate([0, 0, stool_height/4])\n        cube([leg_width-wall_thickness*2, leg_width-wall_thickness*2, leg_width-wall_thickness*2], center=true);\n        \n        translate([0, 0, stool_height*3/4])\n        cube([leg_width-wall_thickness*2, leg_width-wall_thickness*2, leg_width-wall_thickness*2], center=true);\n    }\n}\n\nmodule reinforced_base() {\n    difference() {\n        // Base plate\n        cylinder(h=base_thickness, d=seat_diameter+20, $fn=100);\n        \n        // Center hole\n        cylinder(h=base_thickness+1, d=60, $fn=32);\n    }\n    \n    // Reinforcement ribs\n    for(i=[0:3]) {\n        rotate([0, 0, i*90]) \n        translate([0, 0, base_thickness/2])\n        cube([seat_diameter+20, wall_thickness, base_thickness], center=true);\n    }\n}\n\nmodule rebar_grid() {\n    // Horizontal rebars in seat\n    for(i=[-seat_diameter/2+rebar_spacing:rebar_spacing:seat_diameter/2-rebar_spacing]) {\n        translate([i, 0, wall_thickness/2])\n        rotate([90, 0, 0])\n        cylinder(h=seat_diameter-40, d=rebar_diameter, $fn=16);\n    }\n    \n    // Vertical rebars in legs\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([seat_diameter/4-10, 0, stool_height/2])\n        cylinder(h=stool_height-wall_thickness-base_thickness, d=rebar_diameter, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0, 0, stool_height-wall_thickness])\n    seat();\n    \n    // Legs\n    for(i=[0:3]) {\n        rotate([0, 0, i*90]) \n        translate([seat_diameter/3, 0, base_thickness])\n        leg();\n    }\n    \n    // Base\n    translate([0, 0, 0])\n    reinforced_base();\n    \n    // Rebar reinforcement (visible for concrete look)\n    rebar_grid();\n}",
    "renders": true
  },
  {
    "sports_equipment": "mortar",
    "openscad_code": "// Realistic 3D-Printable Mortar Furniture Item\n// Medium complexity with structural details and grip features\n\n// Overall dimensions\nmortar_height = 80;\nmortar_diameter = 60;\nwall_thickness = 2;\nbase_thickness = 4;\n\n// Base module with anti-slip rings\nmodule mortar_base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=base_thickness, d=mortar_diameter+4, $fn=64);\n        \n        // Center hole for weight reduction\n        cylinder(h=base_thickness+0.1, d=mortar_diameter-4, $fn=64);\n    }\n    \n    // Anti-slip rings\n    for(i=[1:3]) {\n        translate([0, 0, base_thickness-0.5-i*1.2])\n            cylinder(h=0.8, d=mortar_diameter+4-i*2, $fn=64);\n    }\n}\n\n// Main body with reinforced rim\nmodule mortar_body() {\n    // Main body\n    difference() {\n        cylinder(h=mortar_height, d=mortar_diameter, $fn=64);\n        translate([0, 0, wall_thickness])\n            cylinder(h=mortar_height-wall_thickness+0.1, d=mortar_diameter-wall_thickness*2, $fn=64);\n    }\n    \n    // Reinforced rim\n    translate([0, 0, mortar_height-4])\n        cylinder(h=4, d=mortar_diameter+2, $fn=64);\n    \n    // Grip texture rings\n    for(i=[1:6]) {\n        translate([0, 0, mortar_height-8-i*8])\n            difference() {\n                cylinder(h=1, d=mortar_diameter+0.5, $fn=64);\n                cylinder(h=1.2, d=mortar_diameter-1, $fn=64);\n            }\n    }\n}\n\n// Internal pouring spout\nmodule pouring_spout() {\n    translate([0, 0, mortar_height-10])\n        cylinder(h=10, d1=mortar_diameter-wall_thickness*2, d2=mortar_diameter-wall_thickness*2-2, $fn=32);\n}\n\n// Handle supports\nmodule handle_supports() {\n    // Left support\n    translate([-mortar_diameter/2-3, 0, mortar_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=6, d=4, $fn=16);\n    \n    // Right support\n    translate([mortar_diameter/2+3, 0, mortar_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=6, d=4, $fn=16);\n    \n    // Handle bar\n    translate([0, 0, mortar_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=mortar_diameter+6, d=3, $fn=16);\n}\n\n// Pestle holder indentations\nmodule pestle_holders() {\n    for(angle=[0:120:359]) {\n        rotate([0, 0, angle])\n            translate([mortar_diameter/2-3, 0, mortar_height-15])\n                rotate([90, 0, 0])\n                    cylinder(h=4, d1=5, d2=3, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    mortar_base();\n    \n    // Body\n    translate([0, 0, base_thickness])\n        union() {\n            mortar_body();\n            pouring_spout();\n            handle_supports();\n            pestle_holders();\n        }\n}",
    "renders": true
  },
  {
    "sports_equipment": "grout",
    "openscad_code": "// Grout Furniture – a small, low side-table inspired by the grout lines between tiles\n// Overall footprint 120 mm x 120 mm, height 45 mm\n// All walls 2 mm thick for reliable FDM printing without supports\n\n// Main tile-top (hollow box)\nmodule tile_top(size = [120,120,6], wall = 2){\n    difference(){\n        cube(size,center=true);                // outer block\n        translate([0,0,-wall/2])\n            cube([size.x-2*wall,size.y-2*wall,wall+1],center=true); // inner cavity\n    }\n}\n\n// Grout line – thin raised ridge\nmodule grout_line(len, thick = 2, height = 2){\n    cube([len,thick,height],center=true);\n}\n\n// Four legs (hollow cylinders)\nmodule leg(h = 39, od = 10, wall = 2){\n    difference(){\n        cylinder(h=h,d=od,center=true,$fn=32);\n        translate([0,0,-1])\n            cylinder(h=h+2,d=od-2*wall,center=true,$fn=32);\n    }\n}\n\n// Simple cross-brace between legs for realism\nmodule brace(len = 80){\n    cube([len,2,4],center=true);\n}\n\n// Assemble the table\nunion(){\n    // top\n    translate([0,0,22.5]) tile_top();\n\n    // grout pattern on top surface (raised 0.5 mm)\n    for(i=[-1,1]){\n        translate([i*60,0,25.75])\n            grout_line(120,2,0.5);\n        translate([0,i*60,25.75])\n            grout_line(120,2,0.5);\n        translate([i*30,0,25.75])\n            grout_line(120,2,0.5);\n        translate([0,i*30,25.75])\n            grout_line(120,2,0.5);\n    }\n\n    // legs at corners (inset by 10 mm)\n    for(x=[-1,1])\n        for(y=[-1,1])\n            translate([x*50,y*50,19.5])\n                leg();\n\n    // lateral braces between legs\n    translate([0,50,4])  rotate([0,0,90]) brace(100);\n    translate([0,-50,4]) rotate([0,0,90]) brace(100);\n    translate([50,0,4])  brace(100);\n    translate([-50,0,4]) brace(100);\n}",
    "renders": true
  },
  {
    "sports_equipment": "stucco",
    "openscad_code": "// Stucco Garden Bench\n// Realistic style, medium complexity\n// Overall dimensions: 120 x 50 x 45 mm\n\n$fn = 50;\nwall_thickness = 2;\n\nmodule bench_seat() {\n    // Main seat plank\n    difference() {\n        cube([110, 45, 5], center = true);\n        // Carved grooves for water drainage\n        for (i = [-20:10:20]) {\n            translate([i, 0, 2.5])\n                cube([8, 43, 1], center = true);\n        }\n    }\n}\n\nmodule bench_leg(x_pos) {\n    // Single leg assembly\n    translate([x_pos, 0, -20]) {\n        // Main leg post\n        difference() {\n            cube([6, 40, 40], center = true);\n            // Hollow center for material savings\n            cube([2, 36, 36], center = true);\n        }\n        \n        // Decorative foot base\n        translate([0, 0, -21])\n            difference() {\n                cube([10, 44, 4], center = true);\n                cube([6, 40, 5], center = true);\n            }\n        \n        // Top support bracket\n        translate([0, 0, 10])\n            difference() {\n                cube([8, 42, 6], center = true);\n                cube([4, 38, 7], center = true);\n            }\n    }\n}\n\nmodule back_support() {\n    // Backrest assembly\n    translate([0, -22, 15]) {\n        // Main backrest panel\n        difference() {\n            cube([110, 6, 30], center = true);\n            // Decorative cutouts\n            for (x = [-40:20:40]) {\n                translate([x, 0, 0])\n                    cylinder(h = 7, r = 4, center = true);\n            }\n            // Hollow back\n            cube([106, 2, 26], center = true);\n        }\n        \n        // Support slats\n        for (x = [-40:20:40]) {\n            translate([x, 8, 0])\n                difference() {\n                    cube([4, 16, 30], center = true);\n                    cube([2, 14, 28], center = true);\n                }\n        }\n    }\n}\n\nmodule armrest(x_pos) {\n    // Armrest with support\n    translate([x_pos, 22, 5]) {\n        // Horizontal armrest\n        difference() {\n            cube([8, 25, 4], center = true);\n            cube([4, 23, 3], center = true);\n        }\n        \n        // Vertical support post\n        translate([0, 10, -10])\n            difference() {\n                cube([6, 6, 20], center = true);\n                cube([2, 2, 18], center = true);\n            }\n        \n        // Decorative cap\n        translate([0, 0, 7])\n            sphere(d = 8);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0, 0, 2.5])\n        bench_seat();\n    \n    // Legs\n    bench_leg(-45);\n    bench_leg(45);\n    \n    // Backrest\n    back_support();\n    \n    // Armrests\n    armrest(-45);\n    armrest(45);\n}\n\n// Ground contact pads\nfor (x = [-45, 45]) {\n    translate([x, 0, -43])\n        cylinder(h = 2, r = 6);\n}",
    "renders": true
  },
  {
    "sports_equipment": "plaster",
    "openscad_code": "// Plaster chair for dollhouse in realistic style\n// Overall size: 60mm wide x 55mm deep x 75mm tall\n// Wall thickness: 2mm throughout for 3D printing\n\n// Main seat\nmodule seat() {\n    difference() {\n        cube([60, 55, 4], center=true);           // seat surface\n        translate([0,0,2])                       // hollow underside\n        cube([56, 51, 4], center=true);\n    }\n}\n\n// Backrest with slats\nmodule backrest() {\n    translate([0, 27.5, 37.5])                   // position at back of seat\n    difference() {\n        cube([58, 4, 70], center=true);          // main backrest\n        translate([0,0,35])                      // hollow back\n        cube([54, 4, 66], center=true);\n        \n        // Decorative slat openings\n        for (i = [-20:10:20]) {\n            translate([i, 0, 10])\n            cube([6, 4, 45], center=true);\n        }\n    }\n}\n\n// Front left leg\nmodule leg_front_left() {\n    translate([-25, -22.5, -33.5])               // position under seat corner\n    difference() {\n        cube([8, 8, 67], center=true);           // leg block\n        translate([0,0,-31.5])                   // hollow bottom\n        cube([4, 4, 63], center=true);\n    }\n}\n\n// Front right leg\nmodule leg_front_right() {\n    translate([25, -22.5, -33.5])                // mirror of front left\n    difference() {\n        cube([8, 8, 67], center=true);\n        translate([0,0,-31.5])\n        cube([4, 4, 63], center=true);\n    }\n}\n\n// Rear legs (with backrest support)\nmodule leg_rear() {\n    translate([0, 27.5, -33.5])                  // position under backrest\n    difference() {\n        cube([58, 8, 67], center=true);          // continuous rear support\n        translate([0,0,-31.5])                   // hollow bottom section\n        cube([54, 4, 63], center=true);\n    }\n}\n\n// Support stretchers between legs\nmodule stretchers() {\n    // Front stretcher\n    translate([0, -22.5, -55])\n    difference() {\n        cube([46, 6, 6], center=true);\n        translate([0,0,0])\n        cube([42, 2, 2], center=true);\n    }\n    \n    // Side stretchers\n    translate([-25, 2.5, -55])\n    difference() {\n        rotate([0,0,90])\n        cube([50, 6, 6], center=true);\n        rotate([0,0,90])\n        cube([46, 2, 2], center=true);\n    }\n    \n    translate([25, 2.5, -55])\n    difference() {\n        rotate([0,0,90])\n        cube([50, 6, 6], center=true);\n        rotate([0,0,90])\n        cube([46, 2, 2], center=true);\n    }\n}\n\n// Assembly of all parts\nunion() {\n    seat();\n    backrest();\n    leg_front_left();\n    leg_front_right();\n    leg_rear();\n    stretchers();\n}",
    "renders": true
  },
  {
    "sports_equipment": "drywall",
    "openscad_code": "// Drywall Sheet Holder - Realistic Style, Medium Complexity\n// Holds a standard 1/2\" drywall sheet vertically for transport/storage\n\n$fn = 24;\nwall_thickness = 2;\nscale_factor = 3; // Scale down for 3D printing\n\nmodule frame_side() {\n    // Main vertical frame member\n    translate([0, 0, 0])\n        cube([4*scale_factor, 15*scale_factor, 120*scale_factor]);\n    \n    // Front support brace\n    translate([0, 15*scale_factor, 20*scale_factor])\n        cube([4*scale_factor, 2*scale_factor, 80*scale_factor]);\n    \n    // Rear support brace\n    translate([0, -2*scale_factor, 40*scale_factor])\n        cube([4*scale_factor, 2*scale_factor, 60*scale_factor]);\n    \n    // Base foot\n    translate([-2*scale_factor, -5*scale_factor, 0])\n        cube([8*scale_factor, 25*scale_factor, 4*scale_factor]);\n    \n    // Top handle\n    translate([0, 5*scale_factor, 120*scale_factor])\n        cube([4*scale_factor, 5*scale_factor, 15*scale_factor]);\n    translate([0, 5*scale_factor, 135*scale_factor])\n        cube([4*scale_factor, 10*scale_factor, 4*scale_factor]);\n}\n\nmodule cross_brace() {\n    // Horizontal cross member with rounded edges\n    difference() {\n        translate([-2*scale_factor, 0, 60*scale_factor])\n            cube([100*scale_factor, 4*scale_factor, 8*scale_factor]);\n        \n        // Rounded ends\n        for(i = [0, 1]) {\n            translate([i*100*scale_factor - 2*scale_factor, 0, 60*scale_factor])\n                rotate([0, 90, 0])\n                    cylinder(h=4*scale_factor, r=2*scale_factor);\n        }\n    }\n}\n\nmodule drywall_support() {\n    // Main support ledge for drywall sheet\n    difference() {\n        translate([15*scale_factor, 5*scale_factor, 10*scale_factor])\n            cube([70*scale_factor, 3*scale_factor, 100*scale_factor]);\n        \n        // Grip texture pattern\n        for(x = [0:5:65]) {\n            for(z = [0:5:95]) {\n                translate([15*scale_factor + x + 2.5*scale_factor, 5*scale_factor, 10*scale_factor + z + 2.5*scale_factor])\n                    cylinder(h=3.5*scale_factor, r=1*scale_factor);\n            }\n        }\n    }\n    \n    // Side supports to prevent sideways movement\n    for(side = [0, 1]) {\n        translate([15*scale_factor + (side*65*scale_factor), 2*scale_factor, 10*scale_factor])\n            cube([5*scale_factor, 6*scale_factor, 100*scale_factor]);\n    }\n}\n\nmodule wheel_assembly() {\n    // Wheel mount bracket\n    translate([-4*scale_factor, -8*scale_factor, 4*scale_factor])\n        cube([8*scale_factor, 8*scale_factor, 6*scale_factor]);\n    \n    // Wheel axle\n    translate([0, -12*scale_factor, 7*scale_factor])\n        rotate([90, 0, 0])\n            cylinder(h=4*scale_factor, r=1*scale_factor);\n    \n    // Wheel\n    translate([0, -12*scale_factor, 7*scale_factor])\n        rotate([90, 0, 0])\n            cylinder(h=3*scale_factor, r=6*scale_factor);\n}\n\n// Main assembly\nunion() {\n    // Left frame\n    frame_side();\n    \n    // Right frame (mirrored)\n    translate([85*scale_factor, 0, 0])\n        mirror([1, 0, 0])\n            frame_side();\n    \n    // Cross braces (2x)\n    cross_brace();\n    translate([0, 0, 90*scale_factor])\n        cross_brace();\n    \n    // Drywall support system\n    drywall_support();\n    \n    // Wheels (2x)\n    wheel_assembly();\n    translate([85*scale_factor, 0, 0])\n        wheel_assembly();\n    \n    // Center support strut\n    translate([42.5*scale_factor, -1*scale_factor, 50*scale_factor])\n        cube([2*scale_factor, 2*scale_factor, 50*scale_factor]);\n}",
    "renders": true
  },
  {
    "sports_equipment": "plywood",
    "openscad_code": "// Plywood Rocking Chair - Medium Complexity\n// Overall dimensions: 100mm height x 80mm width x 120mm depth\n\nplywood_thickness = 2;\nseat_width = 70;\nseat_depth = 50;\nback_height = 40;\nrocker_radius = 120;\nchair_height = 100;\n\nmodule plywood_layer(w, d, h) {\n    color(\"burlywood\") \n    cube([w, d, h], center=true);\n}\n\nmodule rounded_edge_cube(w, d, h, r) {\n    difference() {\n        cube([w, d, h], center=true);\n        translate([w/2-r, d/2-r, h/2-r]) sphere(r=r);\n        translate([-w/2+r, d/2-r, h/2-r]) sphere(r=r);\n        translate([w/2-r, -d/2+r, h/2-r]) sphere(r=r);\n        translate([-w/2+r, -d/2+r, h/2-r]) sphere(r=r);\n        translate([w/2-r, d/2-r, -h/2+r]) sphere(r=r);\n        translate([-w/2+r, d/2-r, -h/2+r]) sphere(r=r);\n        translate([w/2-r, -d/2+r, -h/2+r]) sphere(r=r);\n        translate([-w/2+r, -d/2+r, -h/2+r]) sphere(r=r);\n    }\n}\n\nmodule rocker_base() {\n    // Left rocker\n    translate([-seat_width/2 - 5, 0, -chair_height/2 + rocker_radius - 10]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=seat_width + 10, r=rocker_radius, center=true);\n                translate([0, 0, -plywood_thickness]) \n                cylinder(h=seat_width + 12, r=rocker_radius - plywood_thickness, center=true);\n            }\n        }\n    }\n    \n    // Right rocker\n    translate([seat_width/2 + 5, 0, -chair_height/2 + rocker_radius - 10]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=seat_width + 10, r=rocker_radius, center=true);\n                translate([0, 0, -plywood_thickness]) \n                cylinder(h=seat_width + 12, r=rocker_radius - plywood_thickness, center=true);\n            }\n        }\n    }\n}\n\nmodule seat_supports() {\n    // Front left support\n    translate([-seat_width/2 + 10, seat_depth/2 - 10, -chair_height/2 + 20]) {\n        rotate([0, 45, 0]) \n        plywood_layer(5, 50, plywood_thickness);\n    }\n    \n    // Front right support\n    translate([seat_width/2 - 10, seat_depth/2 - 10, -chair_height/2 + 20]) {\n        rotate([0, -45, 0]) \n        plywood_layer(5, 50, plywood_thickness);\n    }\n    \n    // Back left support\n    translate([-seat_width/2 + 10, -seat_depth/2 + 10, -chair_height/2 + 20 + back_height]) {\n        rotate([0, -45, 0]) \n        plywood_layer(5, 50, plywood_thickness);\n    }\n    \n    // Back right support\n    translate([seat_width/2 - 10, -seat_depth/2 + 10, -chair_height/2 + 20 + back_height]) {\n        rotate([0, 45, 0]) \n        plywood_layer(5, 50, plywood_thickness);\n    }\n}\n\nmodule back_slats() {\n    for(i = [-1:1]) {\n        translate([i * seat_width/3, -seat_depth/2 + 5, -chair_height/2 + 60]) {\n            plywood_layer(plywood_thickness, 40, back_height - 10);\n        }\n    }\n}\n\nmodule seat_surface() {\n    // Main seat\n    translate([0, 0, -chair_height/2 + 20]) {\n        rounded_edge_cube(seat_width, seat_depth, plywood_thickness, 5);\n    }\n    \n    // Backrest\n    translate([0, -seat_depth/2 + 5, -chair_height/2 + 60]) {\n        rotate([15, 0, 0]) \n        rounded_edge_cube(seat_width, plywood_thickness, back_height - 10, 5);\n    }\n}\n\nunion() {\n    rocker_base();\n    seat_supports();\n    seat_surface();\n    back_slats();\n    \n    // Armrests\n    translate([-seat_width/2 - 5, 0, -chair_height/2 + 40]) {\n        rotate([0, 0, 30]) \n        plywood_layer(plywood_thickness, 30, 15);\n    }\n    \n    translate([seat_width/2 + 5, 0, -chair_height/2 + 40]) {\n        rotate([0, 0, -30]) \n        plywood_layer(plywood_thickness, 30, 15);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "timber",
    "openscad_code": "// Timber furniture stool with realistic proportions and joinery details\n// Overall height 90mm, seat 260x220mm - suitable for 3D printing\n\n$fn = 32;  // Smooth curves for printing\n\n// Main parameters\nseat_width = 260;\nseat_depth = 220;\nseat_thickness = 12;\nleg_height = 78;\nleg_width = 28;\nleg_depth = 30;\nstretcher_size = 20;\nfoot_depth = 8;\n\nmodule stool() {\n    union() {\n        // Seat with rounded edges\n        translate([0, 0, leg_height + seat_thickness/2])\n            difference() {\n                rounded_box(seat_width, seat_depth, seat_thickness, 6);\n                \n                // Handle cutout\n                translate([0, -seat_depth/2 + 20, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=seat_thickness+2, r=15, center=true);\n            }\n        \n        // Four legs with taper\n        for (x = [-1, 1])\n            for (y = [-1, 1])\n                translate([x * (seat_width/2 - leg_width), \n                          y * (seat_depth/2 - leg_depth), \n                          leg_height/2])\n                    tapered_leg(leg_width, leg_depth, leg_height - foot_depth, 0.85);\n        \n        // Side stretchers\n        translate([0, 0, leg_height/3])\n            union() {\n                // Long stretchers\n                cube([seat_width - leg_width*2 - 10, stretcher_size, stretcher_size], center=true);\n                // Short stretchers\n                translate([0, 0, 0])\n                    rotate([0, 0, 90])\n                        cube([seat_depth - leg_depth*2 - 10, stretcher_size, stretcher_size], center=true);\n            }\n        \n        // Footrest ring\n        translate([0, 0, leg_height/2])\n            difference() {\n                cylinder(h=foot_depth, r=seat_width/2 - 20);\n                cylinder(h=foot_depth+2, r=seat_width/2 - 30);\n            }\n        \n        // Corner brackets for strength\n        corner_brackets();\n    }\n}\n\nmodule rounded_box(w, d, h, radius) {\n    difference() {\n        cube([w, d, h], center=true);\n        for (x = [-1, 1])\n            for (y = [-1, 1])\n                for (z = [-1, 1])\n                    translate([x*(w/2-radius), y*(d/2-radius), z*(h/2-radius)])\n                        sphere(r=radius);\n    }\n}\n\nmodule tapered_leg(w, d, h, taper) {\n    linear_extrude(height=h, scale=taper, center=true)\n        square([w, d], center=true);\n}\n\nmodule corner_brackets() {\n    bracket_size = 15;\n    bracket_thickness = 4;\n    \n    for (x = [-1, 1])\n        for (y = [-1, 1]) {\n            // Inside corner brackets\n            translate([x * (seat_width/2 - leg_width - bracket_size/2), \n                      y * (seat_depth/2 - leg_depth - bracket_size/2), \n                      leg_height - bracket_size])\n                rotate([0, 0, 45 * x * y])\n                    cube([bracket_size, bracket_thickness, bracket_size], center=true);\n        }\n}\n\n// Wood grain texture on seat surface\nmodule wood_grain() {\n    for (i = [-seat_width/2:5:seat_width/2]) {\n        translate([i, -seat_depth/2, leg_height + seat_thickness + 0.1])\n            rotate([90, 0, 0])\n                cylinder(h=seat_depth, r=0.5, center=false);\n    }\n}\n\n// Assembly\nstool();\nwood_grain();",
    "renders": true
  },
  {
    "sports_equipment": "steel",
    "openscad_code": "// Steel Bar Stool - Realistic style, medium complexity\n// Overall height: 80mm, seat diameter: 40mm\n\n// Parameters\nseat_diameter = 40;\nseat_thickness = 3;\nleg_diameter = 4;\nleg_height = 65;\nfootrest_height = 30;\ncrossbar_diameter = 2.5;\n\n// Main module\nmodule steel_bar_stool() {\n    // Steel seat with slight cushion contour\n    translate([0, 0, leg_height + seat_thickness/2])\n    difference() {\n        // Main seat\n        cylinder(d=seat_diameter, h=seat_thickness, $fn=64);\n        \n        // Cushion indentation\n        translate([0, 0, -0.1])\n        cylinder(d=seat_diameter - 8, h=seat_thickness - 0.5, $fn=64);\n        \n        // Drainage hole\n        translate([0, 0, -0.1])\n        cylinder(d=3, h=seat_thickness + 0.2, $fn=32);\n    }\n    \n    // Legs - 4 legs in square arrangement\n    for (i = [0:3]) {\n        angle = i * 90;\n        x_pos = cos(angle) * (seat_diameter/2 - leg_diameter);\n        y_pos = sin(angle) * (seat_diameter/2 - leg_diameter);\n        \n        // Main leg\n        translate([x_pos, y_pos, leg_height/2])\n        cylinder(d=leg_diameter, h=leg_height, $fn=32);\n        \n        // Leg base - wider foot for stability\n        translate([x_pos, y_pos, 1])\n        cylinder(d1=leg_diameter + 2, d2=leg_diameter, h=4, $fn=32);\n    }\n    \n    // Crossbars for structural support\n    // Front crossbar\n    translate([0, (seat_diameter/2 - leg_diameter), footrest_height/2 + 2])\n    rotate([0, 90, 0])\n    cylinder(d=crossbar_diameter, h=seat_diameter - 2*leg_diameter, $fn=32);\n    \n    // Back crossbar\n    translate([0, -(seat_diameter/2 - leg_diameter), footrest_height/2 + 2])\n    rotate([0, 90, 0])\n    cylinder(d=crossbar_diameter, h=seat_diameter - 2*leg_diameter, $fn=32);\n    \n    // Left crossbar\n    translate([-(seat_diameter/2 - leg_diameter), 0, footrest_height/2 + 2])\n    rotate([90, 0, 0])\n    cylinder(d=crossbar_diameter, h=seat_diameter - 2*leg_diameter, $fn=32);\n    \n    // Right crossbar\n    translate([(seat_diameter/2 - leg_diameter), 0, footrest_height/2 + 2])\n    rotate([90, 0, 0])\n    cylinder(d=crossbar_diameter, h=seat_diameter - 2*leg_diameter, $fn=32);\n    \n    // Central support rod\n    translate([0, 0, leg_height/2])\n    cylinder(d=3, h=leg_height - 2, $fn=32);\n    \n    // Footrest ring\n    translate([0, 0, footrest_height])\n    rotate_extrude($fn=128)\n    translate([seat_diameter/2 - 10, 0, 0])\n    circle(d=crossbar_diameter);\n    \n    // Weld spots at joints\n    for (i = [0:3]) {\n        angle = i * 90;\n        x_pos = cos(angle) * (seat_diameter/2 - leg_diameter);\n        y_pos = sin(angle) * (seat_diameter/2 - leg_diameter);\n        \n        // Seat-leg welds\n        translate([x_pos, y_pos, leg_height + seat_thickness - 1])\n        sphere(d=2.5);\n        \n        // Leg-crossbar welds\n        weld_x = (i < 2) ? 0 : ((i == 2) ? -(seat_diameter/2 - leg_diameter) : (seat_diameter/2 - leg_diameter));\n        weld_y = (i >= 2) ? 0 : ((i == 0) ? (seat_diameter/2 - leg_diameter) : -(seat_diameter/2 - leg_diameter));\n        \n        translate([weld_x, weld_y, footrest_height/2 + 2])\n        sphere(d=2);\n    }\n}\n\n// Render the stool\nsteel_bar_stool();",
    "renders": true
  },
  {
    "sports_equipment": "aluminum",
    "openscad_code": "// Aluminum step-stool / side table\n// Overall footprint: 200 mm × 180 mm, 220 mm tall\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Top plate with decorative cut-outs\nmodule top_plate() {\n    difference() {\n        cube([200, 180, wall], center=true);\n        // Four lightening ovals\n        for (x = [-60, 60])\n            for (y = [-60, 60])\n                translate([x, y, -1])\n                    scale([1, 0.6, 1])\n                        cylinder(h=wall+2, d=30, center=true, $fn=64);\n        // Central hand hole\n        translate([0, 0, -1])\n            cylinder(h=wall+2, d=25, center=true, $fn=64);\n    }\n}\n\n// Single ribbed leg\nmodule leg() {\n    // Outer shell\n    difference() {\n        cube([40, 40, 220-wall], center=true);\n        translate([0, 0, wall])\n            cube([40-wall*2, 40-wall*2, 220-wall*2], center=true);\n    }\n    // Internal ribs every 15 mm\n    for (z = [-100:15:100])\n        translate([0, 0, z])\n            cube([40-wall*2, wall, 2], center=true);\n}\n\n// Gusset brace between legs\nmodule gusset() {\n    linear_extrude(height = wall)\n        polygon(points=[[0,0],[20,0],[0,20]]);\n}\n\n// Assembly\nunion() {\n    // Top\n    translate([0, 0, 110-wall/2])\n        top_plate();\n\n    // Four legs\n    for (x = [-80, 80])\n        for (y = [-70, 70])\n            translate([x, y, 0])\n                leg();\n\n    // Corner gussets\n    for (x = [-80, 80])\n        for (y = [-70, 70])\n            translate([x+20*sign(x), y+20*sign(y), 90])\n                rotate([0, 0, 45*sign(x)*sign(y)])\n                    gusset();\n\n    // Lower stretcher frame\n    difference() {\n        cube([160, 140, wall], center=true);\n        cube([160-wall*2, 140-wall*2, wall+2], center=true);\n    }\n    translate([0, 0, -110+wall/2])\n        children();\n}",
    "renders": true
  },
  {
    "sports_equipment": "copper",
    "openscad_code": "// Copper accent side table with tripod base and round top\n// Overall height 120 mm, top diameter 150 mm, suitable for 3D printing\n\n$fn = 60;\n\nmodule leg() {\n    // Single leg profile with 2 mm wall thickness\n    union() {\n        // Central tube\n        cylinder(h = 100, r1 = 8, r2 = 5);\n        \n        // Foot pad\n        translate([0, 0, 100])\n            cylinder(h = 3, r = 10);\n    }\n}\n\nmodule copper_table() {\n    // Main top surface\n    translate([0, 0, 100])\n    union() {\n        // Table top disc 150 mm diameter, 2 mm thick\n        cylinder(h = 2, r = 75);\n        \n        // Reinforcement ring under top\n        translate([0, 0, -2])\n            cylinder(h = 4, r = 70);\n        \n        // Center hub for leg attachment\n        translate([0, 0, -6])\n            cylinder(h = 6, r = 15);\n    }\n    \n    // Three legs at 120 degree angles\n    for (i = [0:120:240]) {\n        rotate([0, 0, i])\n        translate([50, 0, 0])\n        rotate([75, 0, 0])\n        leg();\n    }\n    \n    // Decorative copper ring around top edge\n    translate([0, 0, 102])\n    difference() {\n        cylinder(h = 4, r = 76);\n        cylinder(h = 4, r = 72);\n    }\n    \n    // Center support struts between legs\n    for (i = [0:120:240]) {\n        rotate([0, 0, i])\n        translate([25, 0, 50])\n        rotate([90, 0, 90])\n        cylinder(h = 50, r = 3);\n    }\n}\n\n// Render the complete table\ncopper_table();",
    "renders": true
  },
  {
    "sports_equipment": "pipe",
    "openscad_code": "// Pipe Furniture - Modern Pipe Leg Stool\n// Realistic style with medium complexity\n\n$fn = 36;\n\n// Overall dimensions\nseat_diameter = 60;\nseat_thickness = 4;\nleg_height = 70;\nleg_outer_diameter = 8;\nleg_inner_diameter = 6;\nfoot_diameter = 12;\nfoot_height = 3;\ncrossbar_diameter = 5;\njoint_diameter = 10;\njoint_height = 8;\n\nmodule pipe_segment(height, outer_d, inner_d) {\n    difference() {\n        cylinder(h=height, d=outer_d);\n        translate([0, 0, -0.1])\n            cylinder(h=height + 0.2, d=inner_d);\n    }\n}\n\nmodule pipe_joint() {\n    difference() {\n        cylinder(h=joint_height, d=joint_diameter);\n        translate([0, 0, -0.1])\n            cylinder(h=joint_height + 0.2, d=leg_inner_diameter);\n    }\n}\n\nmodule foot() {\n    difference() {\n        cylinder(h=foot_height, d=foot_diameter);\n        translate([0, 0, -0.1])\n            cylinder(h=foot_height + 0.2, d=leg_inner_diameter);\n    }\n}\n\nmodule stool_leg() {\n    union() {\n        // Main leg pipe\n        pipe_segment(leg_height, leg_outer_diameter, leg_inner_diameter);\n        \n        // Foot at bottom\n        translate([0, 0, leg_height])\n            foot();\n    }\n}\n\nmodule crossbar(length) {\n    rotate([90, 0, 0])\n        pipe_segment(length, crossbar_diameter, crossbar_diameter - 2);\n}\n\nmodule seat() {\n    difference() {\n        // Main seat\n        cylinder(h=seat_thickness, d=seat_diameter);\n        \n        // Lightening holes\n        for(i = [1:3]) {\n            rotate([0, 0, i * 120])\n                translate([seat_diameter/2 - 15, 0, 0])\n                    cylinder(h=seat_thickness + 0.2, d=8);\n        }\n        \n        // Center hole\n        translate([0, 0, -0.1])\n            cylinder(h=seat_thickness + 0.2, d=20);\n    }\n    \n    // Rounded edge\n    translate([0, 0, seat_thickness])\n        cylinder(h=2, d1=seat_diameter, d2=seat_diameter - 4);\n}\n\nmodule stool() {\n    union() {\n        // Seat\n        translate([0, 0, leg_height + joint_height + seat_thickness/2])\n            seat();\n        \n        // Legs with joints\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90 + 45])\n                translate([seat_diameter/2 - 10, 0, 0])\n                    union() {\n                        // Joint connector\n                        translate([0, 0, leg_height])\n                            pipe_joint();\n                        \n                        // Leg\n                        translate([0, 0, joint_height])\n                            stool_leg();\n                    }\n        }\n        \n        // Crossbars\n        translate([seat_diameter/2 - 10, 0, leg_height/2 + joint_height])\n            rotate([0, 0, 45])\n                crossbar((seat_diameter - 20) * sqrt(2) - joint_diameter);\n        \n        translate([0, seat_diameter/2 - 10, leg_height/2 + joint_height])\n            rotate([0, 0, 135])\n                crossbar((seat_diameter - 20) * sqrt(2) - joint_diameter);\n    }\n}\n\n// Render the complete stool\nstool();",
    "renders": true
  },
  {
    "sports_equipment": "wire",
    "openscad_code": "// Wire-frame Modern Bar-Stool (realistic, medium complexity)\n// Overall height: 100 mm, footprint 240 × 240 mm\n// All metal rods rendered as cylinders with 2 mm wall thickness\n\n$fn = 50;\n\n/* ---------- Parameters ---------- */\nseat_d = 240;             // seat diameter\nseat_h = 20;              // seat thickness\nleg_ang = 15;             // outward leg angle\nleg_r = 6;                // leg rod radius\nring_r = 5;               // foot-ring rod radius\nh_seat = 100;             // top of seat from ground\nh_ring = 45;              // height of foot-ring from ground\n\n/* ---------- Modules ---------- */\n\nmodule seat_top() {\n    // Cushioned seat with subtle taper\n    difference() {\n        cylinder(h = seat_h, d = seat_d, center = true);\n        translate([0,0,-seat_h/2+0.1])\n            cylinder(h = seat_h+0.2, d = seat_d-20, center = true);\n    }\n}\n\nmodule leg() {\n    // Single splayed leg\n    rotate([0, leg_ang, 0])\n        cylinder(h = h_seat/cos(leg_ang), r = leg_r, center = false);\n}\n\nmodule legs_group() {\n    // Four legs rotated around center\n    for(a = [0:90:270])\n        rotate([0,0,a])\n            translate([seat_d/2-leg_r, 0, 0])\n                leg();\n}\n\nmodule foot_ring() {\n    // Circular foot-ring + four short spokes\n    // Main ring\n    rotate_extrude()\n        translate(seat_d/2 - leg_r - 2)  // radius to ring center\n            circle(r = ring_r);\n    \n    // Spokes connecting ring to legs\n    for(a = [45:90:315])\n        rotate([0,0,a])\n            translate([seat_d/2 - leg_r - 2, 0, 0])\n                rotate([90,0,0])\n                    cylinder(h = 2*ring_r, r = ring_r, center = true);\n}\n\nmodule bracing_rods() {\n    // Cross bracing wires between legs\n    // front-left to back-right\n    translate([seat_d/2-leg_r, -seat_d/2+leg_r, h_ring])\n        rotate([0, -leg_ang, 45])\n            cylinder(h = (seat_d-2*leg_r)*sqrt(2)*cos(leg_ang), r = 3, center = false);\n    \n    // front-right to back-left\n    translate([-seat_d/2+leg_r, -seat_d/2+leg_r, h_ring])\n        rotate([0, -leg_ang, -45])\n            cylinder(h = (seat_d-2*leg_r)*sqrt(2)*cos(leg_ang), r = 3, center = false);\n}\n\n/* ---------- Assembly ---------- */\nunion() {\n    // Seat\n    translate([0,0,h_seat])\n        seat_top();\n    \n    // Legs\n    legs_group();\n    \n    // Foot-ring at fixed height\n    translate([0,0,h_ring])\n        foot_ring();\n    \n    // Bracing wires\n    bracing_rods();\n}",
    "renders": true
  },
  {
    "sports_equipment": "duct",
    "openscad_code": "// Duct Furniture - Modern Air Vent Shelf Unit\n// Realistic medium-complexity 3D printable furniture piece\n\nwall_thickness = 2;\nduct_width = 120;\nduct_height = 80;\nduct_depth = 100;\nshelf_thickness = 3;\n\n// Main duct body with hollow interior\nmodule duct_body() {\n    difference() {\n        // Outer shell\n        cube([duct_width, duct_depth, duct_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 0])\n            cube([duct_width-wall_thickness*2, duct_depth-wall_thickness, duct_height-wall_thickness*2], center=true);\n    }\n}\n\n// Vent slats with realistic angle\nmodule vent_slats() {\n    slat_width = 3;\n    slat_gap = 5;\n    slat_angle = 30;\n    num_slats = floor((duct_height-20)/(slat_width+slat_gap));\n    \n    for(i = [0:num_slats-1]) {\n        translate([0, duct_depth/2 - wall_thickness, \n                  duct_height/2 - 10 - i*(slat_width+slat_gap)])\n            rotate([slat_angle, 0, 0])\n                cube([duct_width-wall_thickness*4, slat_width, slat_width], center=true);\n    }\n}\n\n// Mounting brackets\nmodule mounting_brackets() {\n    bracket_length = 15;\n    bracket_width = 20;\n    bracket_thickness = 4;\n    \n    // Top brackets\n    translate([-duct_width/2 + 10, duct_depth/2, duct_height/2 - bracket_width/2])\n        cube([bracket_length, bracket_thickness, bracket_width]);\n    \n    translate([duct_width/2 - 10, duct_depth/2, duct_height/2 - bracket_width/2])\n        cube([bracket_length, bracket_thickness, bracket_width]);\n    \n    // Bottom brackets\n    translate([-duct_width/2 + 10, duct_depth/2, -duct_height/2 + bracket_width/2])\n        cube([bracket_length, bracket_thickness, bracket_width]);\n    \n    translate([duct_width/2 - 10, duct_depth/2, -duct_height/2 + bracket_width/2])\n        cube([bracket_length, bracket_thickness, bracket_width]);\n}\n\n// Internal shelf system\nmodule internal_shelf() {\n    shelf_width = duct_width - wall_thickness*4;\n    shelf_depth = duct_depth - wall_thickness*2;\n    \n    translate([0, 0, 0])\n        cube([shelf_width, shelf_depth, shelf_thickness], center=true);\n    \n    // Shelf supports\n    translate([-shelf_width/2 + 5, 0, -shelf_thickness/2 - 5])\n        cube([wall_thickness*2, shelf_depth - 10, 10]);\n    \n    translate([shelf_width/2 - 5, 0, -shelf_thickness/2 - 5])\n        cube([wall_thickness*2, shelf_depth - 10, 10]);\n}\n\n// Front grill pattern\nmodule front_grill() {\n    grill_height = 5;\n    bar_width = 3;\n    bar_gap = 8;\n    num_bars = floor((duct_width-20)/(bar_width+bar_gap));\n    \n    difference() {\n        // Grill frame\n        translate([0, duct_depth/2 - wall_thickness/2, 0])\n            cube([duct_width-wall_thickness*2, wall_thickness, duct_height-wall_thickness*2], center=true);\n        \n        // Horizontal slots\n        for(i = [0:num_bars-1]) {\n            translate([-duct_width/2 + 10 + i*(bar_width+bar_gap) + bar_width/2, \n                      duct_depth/2 - wall_thickness, 0])\n                cube([bar_gap, wall_thickness+1, duct_height-wall_thickness*2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main duct structure\n    duct_body();\n    \n    // Ventilation elements\n    vent_slats();\n    \n    // Mounting system\n    mounting_brackets();\n    \n    // Internal storage\n    internal_shelf();\n    \n    // Decorative grill\n    front_grill();\n}",
    "renders": true
  },
  {
    "sports_equipment": "insulation",
    "openscad_code": "// Insulation Furniture - Insulated Coffee Table with Built-in Cooler\n// Medium complexity realistic style with 2mm walls for 3D printing\n\n$fn = 32;\n\n// Main dimensions (mm)\ntable_length = 120;\ntable_width = 80;\ntable_height = 45;\nwall_thickness = 2;\ninsulation_thickness = 8;\n\n// Module for rounded corner cube\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(dx = [0, size.x - radius*2])\n            for(dy = [0, size.y - radius*2])\n                for(dz = [0, size.z - radius*2])\n                    translate([dx + radius, dy + radius, dz + radius])\n                        sphere(r = radius);\n    }\n}\n\n// Tabletop with insulation cavity\nmodule tabletop() {\n    difference() {\n        // Outer shell\n        rounded_cube([table_length, table_width, wall_thickness*2], 5);\n        \n        // Inner cavity for insulation\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            rounded_cube([table_length-wall_thickness*2, table_width-wall_thickness*2, wall_thickness], 3);\n    }\n}\n\n// Insulation layer (foam pattern)\nmodule insulation_core() {\n    translate([wall_thickness, wall_thickness, wall_thickness]) {\n        difference() {\n            rounded_cube([table_length-wall_thickness*2, table_width-wall_thickness*2, wall_thickness], 3);\n            \n            // Foam bubble pattern\n            for(x = [5:15:table_length-wall_thickness*2-5])\n                for(y = [5:15:table_width-wall_thickness*2-5])\n                    translate([x, y, wall_thickness/2])\n                        sphere(d = 8, $fn=16);\n        }\n    }\n}\n\n// Leg structure with thermal break\nmodule leg(x_pos, y_pos) {\n    // Outer leg\n    translate([x_pos, y_pos, -table_height/2]) {\n        rounded_cube([8, 8, table_height], 2);\n    }\n    \n    // Inner thermal break\n    translate([x_pos+2, y_pos+2, -table_height/2+2]) {\n        rounded_cube([4, 4, table_height-4], 1);\n    }\n}\n\n// Cooling compartment lid\nmodule cooler_lid() {\n    translate([table_length/2-25, table_width/2-15, wall_thickness*2+1]) {\n        difference() {\n            rounded_cube([50, 30, 3], 2);\n            translate([2, 2, -0.5])\n                rounded_cube([46, 26, 4], 1);\n        }\n        \n        // Handle\n        translate([25, 15, 3])\n            rotate([90, 0, 0])\n                cylinder(h=10, d=4);\n    }\n}\n\n// Cooling compartment\nmodule cooling_compartment() {\n    translate([table_length/2-25, table_width/2-15, wall_thickness*2]) {\n        difference() {\n            rounded_cube([50, 30, 20], 3);\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                rounded_cube([50-wall_thickness*2, 30-wall_thickness*2, 20-wall_thickness], 2);\n        }\n        \n        // Drainage holes\n        for(x = [10:20:40])\n            translate([x, 2, 0])\n                cylinder(h=wall_thickness, d=3);\n    }\n}\n\n// Assembly\nunion() {\n    // Tabletop\n    tabletop();\n    \n    // Insulation\n    insulation_core();\n    \n    // Legs at corners\n    for(x = [10, table_length-18])\n        for(y = [10, table_width-18])\n            leg(x, y);\n    \n    // Cooling compartment\n    cooling_compartment();\n    \n    // Lid (positioned as if open)\n    translate([0, 0, 0])\n        cooler_lid();\n    \n    // Surface texture for grip\n    for(x = [5:10:table_length-5])\n        for(y = [5:10:table_width-5])\n            if((x+y)%20 == 0)\n                translate([x, y, wall_thickness*2+0.1])\n                    cylinder(h=0.5, d=3);\n}",
    "renders": true
  },
  {
    "sports_equipment": "tar",
    "openscad_code": "// Realistic TAR (TAR - Traditional Armchair Reimagined) furniture\n// Overall dimensions: 120mm x 110mm x 140mm (W x D x H)\n\n// Main parameters\nchair_width = 120;\nchair_depth = 110;\nchair_height = 140;\nseat_height = 75;\nleg_thickness = 8;\nback_height = 65;\narmrest_height = 100;\n\n// Seat module\nmodule seat() {\n    difference() {\n        // Main seat block\n        translate([0, 0, seat_height/2])\n            cube([chair_width - 20, chair_depth - 20, 8], center=true);\n        \n        // Seat cushion contour\n        translate([0, 0, seat_height/2 + 4])\n            cube([chair_width - 24, chair_depth - 24, 2], center=true);\n    }\n}\n\n// Backrest module with slats\nmodule backrest() {\n    union() {\n        // Backrest frame\n        translate([0, -(chair_depth/2 - 15), seat_height + back_height/2])\n            cube([chair_width - 20, 8, back_height], center=true);\n        \n        // Vertical slats\n        for (i = [-40:20:40]) {\n            translate([i, -(chair_depth/2 - 15), seat_height + back_height/2])\n                cube([6, 4, back_height - 10], center=true);\n        }\n    }\n}\n\n// Armrest module\nmodule armrest(side) {\n    translate([side * (chair_width/2 - 15), 0, armrest_height/2]) {\n        // Main armrest support\n        cube([8, chair_depth/2 - 10, armrest_height - seat_height], center=true);\n        \n        // Armrest top\n        translate([0, (chair_depth/2 - 25)/2, (armrest_height - seat_height)/2])\n            cube([12, chair_depth/2 - 20, 6], center=true);\n    }\n}\n\n// Leg module with stretchers\nmodule legs() {\n    // Front legs\n    translate([-(chair_width/2 - 15), chair_depth/2 - 15, seat_height/2])\n        cylinder(h=seat_height, r=leg_thickness/2, center=true);\n    translate([(chair_width/2 - 15), chair_depth/2 - 15, seat_height/2])\n        cylinder(h=seat_height, r=leg_thickness/2, center=true);\n    \n    // Back legs\n    translate([-(chair_width/2 - 15), -(chair_depth/2 - 15), seat_height/2])\n        cylinder(h=seat_height, r=leg_thickness/2, center=true);\n    translate([(chair_width/2 - 15), -(chair_depth/2 - 15), seat_height/2])\n        cylinder(h=seat_height, r=leg_thickness/2, center=true);\n    \n    // Side stretchers\n    translate([0, chair_depth/2 - 15, seat_height/3])\n        cube([chair_width - 30, 4, 4], center=true);\n    translate([0, -(chair_depth/2 - 15), seat_height/3])\n        cube([chair_width - 30, 4, 4], center=true);\n    \n    // Front-back stretchers\n    translate([-(chair_width/2 - 15), 0, seat_height/3])\n        rotate([90, 0, 0])\n            cylinder(h=chair_depth - 30, r=2, center=true);\n    translate([(chair_width/2 - 15), 0, seat_height/3])\n        rotate([90, 0, 0])\n            cylinder(h=chair_depth - 30, r=2, center=true);\n}\n\n// Assembly\nunion() {\n    // Main components\n    seat();\n    backrest();\n    armrest(1);\n    armrest(-1);\n    legs();\n}\n\n// Optional: Add subtle rounding to edges for realistic look\nmodule rounded_edge(x, y, z, r) {\n    translate([x, y, z])\n        sphere(r=r);\n}",
    "renders": true
  },
  {
    "sports_equipment": "felt",
    "openscad_code": "// Felt Desk Organizer - Realistic Style (Medium Complexity)\n// Dimensions: 150mm x 100mm x 120mm (LxWxH)\n\n// Global parameters\nwall_thickness = 2;\nfelt_thickness = 2.5;\ncorner_radius = 3;\n\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(x = [radius, size[0]-radius])\n            for(y = [radius, size[1]-radius])\n                for(z = [radius, size[2]-radius])\n                    translate([x,y,z]) sphere(r=radius);\n    }\n}\n\n// Base tray with rounded corners\nmodule base_tray() {\n    difference() {\n        rounded_cube([150, 100, 30], corner_radius);\n        translate([wall_thickness, wall_thickness, wall_thickness+5])\n            rounded_cube([150-2*wall_thickness, 100-2*wall_thickness, 30-wall_thickness], corner_radius-1);\n    }\n}\n\n// Horizontal divider with pen slots\nmodule horizontal_divider() {\n    translate([0, 0, 30]) {\n        difference() {\n            cube([150, 100, felt_thickness]);\n            \n            // Pen slots (8mm diameter)\n            for(i = [0:4]) {\n                translate([15 + i*25, 70, -1]) \n                    cylinder(h=felt_thickness+2, d=8.5);\n            }\n            \n            // Larger slot for scissors\n            translate([125, 50, -1])\n                cylinder(h=felt_thickness+2, d=15);\n        }\n    }\n}\n\n// Vertical dividers\nmodule vertical_dividers() {\n    // Left divider\n    translate([40, 0, 30+felt_thickness])\n        cube([felt_thickness, 100, 90]);\n    \n    // Right divider\n    translate([110, 0, 30+felt_thickness])\n        cube([felt_thickness, 100, 90]);\n}\n\n// Phone stand area\nmodule phone_stand() {\n    translate([5, 5, 30+felt_thickness]) {\n        difference() {\n            cube([35, 90, 25]);\n            // Phone slot (15mm wide, 10mm deep)\n            translate([2, 10, 12])\n                cube([31, 15, 15]);\n            // Cable routing hole\n            translate([17.5, 85, 10])\n                cylinder(h=15, d=8);\n        }\n    }\n}\n\n// Card holder slots\nmodule card_slots() {\n    translate([115, 5, 30+felt_thickness]) {\n        // Base\n        cube([30, 90, 15]);\n        \n        // Individual slots\n        for(i = [0:3]) {\n            translate([2, 5 + i*20, 0]) {\n                difference() {\n                    cube([26, 18, 15]);\n                    translate([1, 1, 1])\n                        cube([24, 16, 15]);\n                }\n            }\n        }\n    }\n}\n\n// Reinforcement ribs on bottom\nmodule bottom_ribs() {\n    translate([0, 0, 0]) {\n        for(i = [1:4]) {\n            translate([20 + i*25, wall_thickness, 0])\n                cube([3, 100-2*wall_thickness, 5]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_tray();\n    bottom_ribs();\n    horizontal_divider();\n    vertical_dividers();\n    phone_stand();\n    card_slots();\n}",
    "renders": true
  },
  {
    "sports_equipment": "roofing",
    "openscad_code": "// Roof ridge furniture – a 1:200 scale ridge cap with integrated ventilator\n// Suitable for architectural models or garden-railway scenery\n// All walls 2 mm thick, no overhangs >45°, ready for FDM printing\n\n$fa = 2; $fs = 0.5;\n\n// Overall dimensions (mm)\nridge_length = 120;\nridge_width  = 30;\nridge_height = 20;\n\nmodule ridge_cap(){\n    // Main inverted-U profile\n    difference(){\n        // Outer shell\n        translate([0,0,ridge_height/2])\n            cube([ridge_length+4, ridge_width, ridge_height], center=true);\n        // Inner cavity\n        translate([0,0,ridge_height/2-1])\n            cube([ridge_length+6, ridge_width-4, ridge_height-2], center=true);\n    }\n}\n\nmodule vent_slots(){\n    // Series of vertical vent openings along the ridge\n    slot_w = 2;\n    slot_h = 6;\n    slot_step = 8; \n    for(i=[-ridge_length/2+slot_step : slot_step : ridge_length/2-slot_step]){\n        translate([i,0,ridge_height-3])\n            cube([slot_w, ridge_width-4, slot_h], center=true);\n    }\n}\n\nmodule joint_pins(){\n    // Two cylindrical pins at each end for interlocking ridge sections\n    pin_r = 3;\n    pin_h = 8;\n    for(side=[-1,1]){\n        translate([side*(ridge_length/2+1), 0, ridge_height/2+1]){\n            cylinder(h=pin_h, r=pin_r, center=true);\n        }\n    }\n}\n\nmodule nail_heads(){\n    // Decorative nail heads along flanges for realism\n    head_r = 1.5;\n    head_step = 15;\n    for(i=[-ridge_length/2+head_step : head_step : ridge_length/2-head_step]){\n        for(y=[-ridge_width/2+2, ridge_width/2-2]){\n            translate([i, y, ridge_height-0.5])\n                cylinder(h=1, r=head_r);\n        }\n    }\n}\n\n// Assembly\nunion(){\n    ridge_cap();\n    vent_slots();\n    joint_pins();\n    nail_heads();\n}",
    "renders": true
  },
  {
    "sports_equipment": "shingle",
    "openscad_code": "// Shingle-style outdoor bench (miniature furniture piece)\n// Realistic style, medium complexity, 3D-printable\n\n// Overall dimensions (mm)\nbench_length = 120;\nbench_width = 45;\nbench_height = 55;\nleg_thickness = 4;\nseat_thickness = 3;\nbackrest_height = 35;\n\n// Shingle parameters\nshingle_width = 12;\nshingle_overlap = 3;\nshingle_thickness = 1.5;\n\n// Materials\nwood_color = \"BurlyWood\";\nmetal_color = \"SlateGray\";\n\nmodule shingle_piece(w, l, t, overlap) {\n    // Individual wooden shingle with slight taper\n    difference() {\n        cube([w, l, t], center=true);\n        translate([0, -l/2 + 1, t/2])\n            rotate([0, 10, 0])\n            cube([w*1.2, l, t*2], center=true);\n    }\n}\n\nmodule seat_with_shingles() {\n    union() {\n        // Base seat frame\n        difference() {\n            cube([bench_length, bench_width, seat_thickness], center=true);\n            translate([0, 0, -seat_thickness/2 + 0.5])\n                cube([bench_length - 4, bench_width - 4, seat_thickness + 1], center=true);\n        }\n        \n        // Shingles on seat surface\n        for(i = [0:ceil(bench_length/shingle_width)-1]) {\n            translate([-bench_length/2 + i*shingle_width + shingle_width/2, 0, seat_thickness/2 + shingle_thickness/2])\n                shingle_piece(shingle_width - 1, bench_width - 4, shingle_thickness, shingle_overlap);\n        }\n    }\n}\n\nmodule backrest_with_shingles() {\n    union() {\n        // Backrest frame\n        difference() {\n            cube([bench_length, seat_thickness, backrest_height], center=true);\n            translate([0, -seat_thickness/2 + 0.5, 0])\n                cube([bench_length - 4, seat_thickness + 1, backrest_height - 4], center=true);\n        }\n        \n        // Shingles on backrest\n        for(i = [0:ceil(backrest_height/shingle_width)-1]) {\n            translate([-bench_length/2 + i*shingle_width + shingle_width/2, 0, -backrest_height/2 + i*shingle_width + shingle_width/2])\n                rotate([90, 0, 0])\n                shingle_piece(shingle_width - 1, seat_thickness - 2, shingle_thickness, shingle_overlap);\n        }\n    }\n}\n\nmodule bench_leg(x_pos, z_pos) {\n    // Decorative shingle-style leg\n    union() {\n        // Main leg post\n        translate([x_pos, 0, z_pos])\n            cube([leg_thickness, bench_width - 10, bench_height/2], center=true);\n        \n        // Shingle detailing on legs\n        for(i = [0:3]) {\n            translate([x_pos, 0, z_pos - bench_height/4 + i*8])\n                rotate([0, 90, 0])\n                shingle_piece(leg_thickness*0.8, bench_width - 12, 1, 0);\n        }\n        \n        // Base support\n        translate([x_pos, 0, -bench_height/2 + leg_thickness/2])\n            cube([leg_thickness + 2, bench_width - 8, leg_thickness], center=true);\n    }\n}\n\nmodule support_brace() {\n    // Cross-brace between legs\n    difference() {\n        cube([bench_length - leg_thickness*2 - 8, leg_thickness, leg_thickness], center=true);\n        translate([0, 0, -leg_thickness/2])\n            cube([bench_length - leg_thickness*2 - 12, leg_thickness + 2, leg_thickness + 1], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Seat\n    translate([0, 0, bench_height/2 - seat_thickness/2])\n        seat_with_shingles();\n    \n    // Backrest\n    translate([0, -bench_width/2 + seat_thickness/2, bench_height/2 + backrest_height/2 - seat_thickness])\n        rotate([90, 0, 0])\n        backrest_with_shingles();\n    \n    // Legs\n    bench_leg(-bench_length/2 + leg_thickness/2 + 5, 0);\n    bench_leg(bench_length/2 - leg_thickness/2 - 5, 0);\n    \n    // Support braces\n    translate([0, -bench_width/4, 0])\n        support_brace();\n    translate([0, bench_width/4, 0])\n        support_brace();\n}",
    "renders": true
  },
  {
    "sports_equipment": "tile",
    "openscad_code": "// Tile furniture - 3D printable modular tile with realistic styling\n// Medium complexity decorative tile that can be used as furniture or wall feature\n\n// Overall dimensions\ntile_width = 100;\ntile_height = 100;\ntile_thickness = 8;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Base tile body\nmodule base_tile() {\n    difference() {\n        // Main tile body\n        cube([tile_width, tile_height, tile_thickness], center=true);\n        \n        // Hollow out center for material savings\n        translate([0, 0, -1])\n            cube([tile_width - wall_thickness*2, tile_height - wall_thickness*2, tile_thickness + 2], center=true);\n    }\n}\n\n// Decorative frame around tile edge\nmodule frame() {\n    difference() {\n        // Outer frame\n        cube([tile_width, tile_height, tile_thickness], center=true);\n        \n        // Inner cutout\n        cube([tile_width - 8, tile_height - 8, tile_thickness + 2], center=true);\n    }\n}\n\n// Corner brackets for structural reinforcement\nmodule corner_bracket(x_pos, y_pos) {\n    translate([x_pos, y_pos, 0]) {\n        difference() {\n            // Bracket body\n            cube([10, 10, wall_thickness], center=true);\n            \n            // Rounded inner corner\n            translate([2.5, 2.5, -1])\n                cylinder(h=wall_thickness + 2, r=3, $fn=16);\n        }\n    }\n}\n\n// Middle support rib\nmodule support_rib() {\n    translate([0, 0, 0]) {\n        cube([tile_width - 16, wall_thickness, wall_thickness], center=true);\n    }\n}\n\n// Surface texture pattern - geometric relief\nmodule surface_pattern() {\n    // Grid of small raised squares\n    for(x = [-40:20:40]) {\n        for(y = [-40:20:40]) {\n            translate([x, y, tile_thickness/2 - 0.5]) {\n                cube([6, 6, 1], center=true);\n            }\n        }\n    }\n    \n    // Central decorative element\n    translate([0, 0, tile_thickness/2 - 1]) {\n        difference() {\n            cylinder(h=2, r=15, $fn=32);\n            cylinder(h=3, r=10, $fn=32);\n        }\n    }\n}\n\n// Mounting holes for wall attachment\nmodule mounting_holes() {\n    hole_offset = 40;\n    hole_depth = 3;\n    \n    for(x = [-hole_offset, hole_offset]) {\n        for(y = [-hole_offset, hole_offset]) {\n            translate([x, y, -tile_thickness/2]) {\n                cylinder(h=hole_depth, r=2, $fn=16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main tile\n    base_tile();\n    \n    // Frame overlay\n    frame();\n    \n    // Corner brackets\n    corner_bracket(-tile_width/2 + 5, -tile_height/2 + 5);\n    corner_bracket(tile_width/2 - 5, -tile_height/2 + 5);\n    corner_bracket(-tile_width/2 + 5, tile_height/2 - 5);\n    corner_bracket(tile_width/2 - 5, tile_height/2 - 5);\n    \n    // Support ribs\n    support_rib();\n    rotate([0, 0, 90]) support_rib();\n    \n    // Surface decoration\n    surface_pattern();\n    \n    // Mounting holes (subtract from model)\n    difference() {\n        children();\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "slate",
    "openscad_code": "// Slate furniture - a wall-mounted floating shelf unit made of slate\n// Overall dimensions: 120mm wide x 80mm deep x 35mm tall\n\n// Parameters\nslate_thickness = 4;\nwall_thickness = 2;\noverall_width = 120;\noverall_depth = 80;\noverall_height = 35;\nnum_shelves = 3;\nmount_hole_diameter = 6;\nmount_hole_depth = 4;\n\n// Main module\nmodule slate_shelf_unit() {\n    // Generate shelves with gaps\n    shelf_spacing = (overall_height - slate_thickness * num_shelves) / (num_shelves + 1);\n    \n    // Side walls for structural support\n    difference() {\n        union() {\n            // Left side wall\n            translate([-wall_thickness, 0, 0])\n                cube([wall_thickness, overall_depth, overall_height]);\n            \n            // Right side wall\n            translate([overall_width, 0, 0])\n                cube([wall_thickness, overall_depth, overall_height]);\n            \n            // Back wall with mounting features\n            translate([0, overall_depth - wall_thickness, 0])\n                cube([overall_width + wall_thickness*2, wall_thickness, overall_height]);\n            \n            // Generate slate shelves\n            for (i = [0:num_shelves-1]) {\n                translate([0, 0, shelf_spacing + i * (slate_thickness + shelf_spacing)])\n                    cube([overall_width + wall_thickness*2, overall_depth, slate_thickness]);\n            }\n        }\n        \n        // Mounting holes in back wall\n        for (x = [30, 90]) {\n            translate([x, overall_depth - wall_thickness/2, overall_height - 10])\n                rotate([90, 0, 0])\n                    cylinder(h=wall_thickness*2, d=mount_hole_diameter, $fn=20);\n        }\n        \n        // Keyhole slots for mounting\n        for (x = [30, 90]) {\n            translate([x, overall_depth - wall_thickness/2, overall_height - 10])\n                rotate([90, 0, 0]) {\n                    // Main hole\n                    cylinder(h=wall_thickness*2, d=mount_hole_diameter, $fn=20);\n                    // Slot\n                    translate([0, 0, -wall_thickness])\n                        cube([mount_hole_diameter*1.5, mount_hole_diameter, wall_thickness*3], center=true);\n                }\n        }\n    }\n    \n    // Add subtle texture lines on slate surfaces\n    for (i = [0:num_shelves-1]) {\n        shelf_z = shelf_spacing + i * (slate_thickness + shelf_spacing) + slate_thickness/2;\n        for (line = [10:10:overall_width-10]) {\n            translate([line, 5, shelf_z])\n                cube([0.5, overall_depth-10, 0.2]);\n        }\n    }\n    \n    // Chamfer edges slightly for realistic appearance\n    edge_chamfer();\n}\n\nmodule edge_chamfer() {\n    // Add small 45-degree chamfers on visible edges\n    chamfer_size = 0.5;\n    \n    // Top edges of side walls\n    translate([-wall_thickness, 0, overall_height - chamfer_size])\n        cube([wall_thickness, overall_depth, chamfer_size]);\n    translate([overall_width, 0, overall_height - chamfer_size])\n        cube([wall_thickness, overall_depth, chamfer_size]);\n    \n    // Front edges of side walls\n    translate([-wall_thickness, 0, 0])\n        cube([wall_thickness, chamfer_size, overall_height]);\n    translate([overall_width, 0, 0])\n        cube([wall_thickness, chamfer_size, overall_height]);\n}\n\n// Render the shelf unit\nslate_shelf_unit();",
    "renders": true
  },
  {
    "sports_equipment": "gravel",
    "openscad_code": "// Gravel Chair (Realistic Style - Medium Complexity)\n// A modern outdoor chair inspired by gravel/stone aesthetics\n\n// Overall dimensions\nchair_width = 120;\nchair_depth = 100;\nchair_height = 85;\nseat_height = 45;\nwall_thickness = 2;\n\n// Module for rounded cube (gravel-like stones)\nmodule rounded_cube(size, radius) {\n    hull() {\n        for (dx = [0, size.x - radius*2])\n            for (dy = [0, size.y - radius*2])\n                for (dz = [0, size.z - radius*2])\n                    translate([dx + radius, dy + radius, dz + radius])\n                        sphere(r = radius);\n    }\n}\n\n// Gravel-textured surface pattern\nmodule gravel_texture(width, depth, height) {\n    difference() {\n        cube([width, depth, height]);\n        // Create gravel-like indentations\n        for (i = [0:5:width-5]) {\n            for (j = [0:5:depth-5]) {\n                translate([i + 2.5, j + 2.5, height - 1])\n                    sphere(r = 1.5);\n            }\n        }\n    }\n}\n\n// Chair legs with gravel texture\nmodule chair_leg(x_pos, y_pos) {\n    // Main leg structure\n    translate([x_pos, y_pos, 0]) {\n        // Leg base (wider for stability)\n        rounded_cube([8, 8, seat_height], 2);\n        \n        // Gravel texture bands\n        translate([0, 0, 10]) gravel_texture(8, 8, 2);\n        translate([0, 0, 25]) gravel_texture(8, 8, 2);\n        translate([0, 0, 40]) gravel_texture(8, 8, 2);\n    }\n}\n\n// Seat surface with drainage holes\nmodule seat_surface() {\n    difference() {\n        // Main seat\n        translate([-chair_width/2, -chair_depth/2, seat_height])\n            rounded_cube([chair_width, chair_depth, 4], 3);\n        \n        // Drainage holes\n        for (i = [-40:20:40]) {\n            for (j = [-30:20:30]) {\n                translate([i, j, seat_height + 2])\n                    cylinder(h = 5, r = 2, $fn = 16);\n            }\n        }\n        \n        // Center cutout for comfort\n        translate([0, 0, seat_height + 2])\n            cylinder(h = 5, r = 15, $fn = 32);\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    translate([-chair_width/2 + 5, -chair_depth/2 + 20, seat_height + 4]) {\n        // Main backrest panel\n        difference() {\n            rounded_cube([chair_width - 10, 5, chair_height - seat_height - 4], 4);\n            \n            // Ventilation slots\n            for (i = [seat_height + 10:15:chair_height - 10]) {\n                translate([0, 2.5, i])\n                    cube([chair_width - 10, 6, 8]);\n            }\n        }\n        \n        // Gravel texture accent\n        translate([0, -1, 10]) gravel_texture(chair_width - 10, 5, 2);\n    }\n}\n\n// Armrests\nmodule armrest(side) {\n    translate([side * (chair_width/2 - 10), -chair_depth/2 + 15, seat_height + 10]) {\n        // Armrest support\n        rotate([0, -10, 0])\n            rounded_cube([5, 30, 15], 2);\n        \n        // Top surface\n        translate([0, 15, 15])\n            rounded_cube([5, 20, 3], 2);\n    }\n}\n\n// Assembly\nunion() {\n    // Four legs\n    chair_leg(-chair_width/2 + 10, -chair_depth/2 + 10);\n    chair_leg(chair_width/2 - 10, -chair_depth/2 + 10);\n    chair_leg(-chair_width/2 + 10, chair_depth/2 - 10);\n    chair_leg(chair_width/2 - 10, chair_depth/2 - 10);\n    \n    // Seat\n    seat_surface();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Reinforcement bars between legs\n    translate([0, -chair_depth/2 + 10, 20])\n        rounded_cube([chair_width - 20, 5, 3], 2);\n    translate([0, chair_depth/2 - 10, 20])\n        rounded_cube([chair_width - 20, 5, 3], 2);\n}",
    "renders": true
  },
  {
    "sports_equipment": "sand",
    "openscad_code": "// Sand furniture - Sand Castle Table\n// Realistic style, medium complexity, 3D printable design\n\n// Overall dimensions\ntable_length = 100;\ntable_width = 80;\ntable_height = 60;\nwall_thickness = 2;\n\n// Module for castle tower legs\nmodule castle_tower(height, radius) {\n    // Main tower body\n    difference() {\n        cylinder(h=height, r=radius, $fn=32);\n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            cylinder(h=height-wall_thickness, r=radius-wall_thickness, $fn=32);\n    }\n    \n    // Battlements at top\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n            translate([radius-1, 0, height-4])\n                cube([2, 2, 4]);\n    }\n    \n    // Door opening\n    translate([0, -radius, 0])\n        rotate([90, 0, 0])\n            cylinder(h=wall_thickness*2, r=radius/2, $fn=16);\n}\n\n// Module for crenellated table edge\nmodule table_top() {\n    // Main tabletop\n    difference() {\n        cube([table_length, table_width, wall_thickness*2]);\n        // Hollow underside\n        translate([wall_thickness, wall_thickness, wall_thickness*2])\n            cube([table_length-wall_thickness*2, table_width-wall_thickness*2, wall_thickness]);\n    }\n    \n    // Crenellations along edges\n    crenel_width = 6;\n    crenel_gap = 8;\n    \n    // Long edges\n    for(x=[crenel_width:crenel_width+crenel_gap:table_length-crenel_width]) {\n        translate([x, 0, wall_thickness*2])\n            cube([crenel_width, 3, 5]);\n        translate([x, table_width-3, wall_thickness*2])\n            cube([crenel_width, 3, 5]);\n    }\n    \n    // Short edges\n    for(y=[crenel_width:crenel_width+crenel_gap:table_width-crenel_width]) {\n        translate([0, y, wall_thickness*2])\n            cube([3, crenel_width, 5]);\n        translate([table_length-3, y, wall_thickness*2])\n            cube([3, crenel_width, 5]);\n    }\n}\n\n// Module for sand texture pattern\nmodule sand_texture(base_x, base_y, base_z, size_x, size_y) {\n    // Create bumpy sand texture with small spheres\n    sphere_radius = 0.5;\n    spacing = 1.5;\n    \n    for(x=[0:spacing:size_x]) {\n        for(y=[0:spacing:size_y]) {\n            translate([base_x+x, base_y+y, base_z+sphere_radius])\n                sphere(r=sphere_radius);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Table top with castle battlements\n    table_top();\n    \n    // Castle tower legs at corners\n    leg_radius = 8;\n    leg_height = table_height - wall_thickness*2;\n    \n    // Front left leg\n    translate([leg_radius+5, leg_radius+5, 0])\n        castle_tower(leg_height, leg_radius);\n    \n    // Front right leg\n    translate([table_length-leg_radius-5, leg_radius+5, 0])\n        castle_tower(leg_height, leg_radius);\n    \n    // Back left leg\n    translate([leg_radius+5, table_width-leg_radius-5, 0])\n        castle_tower(leg_height, leg_radius);\n    \n    // Back right leg\n    translate([table_length-leg_radius-5, table_width-leg_radius-5, 0])\n        castle_tower(leg_height, leg_radius);\n    \n    // Sand texture on table surface\n    translate([wall_thickness, wall_thickness, wall_thickness*2])\n        sand_texture(0, 0, 0, \n                    table_length-wall_thickness*2, \n                    table_width-wall_thickness*2);\n    \n    // Cross support beams between legs\n    beam_height = 5;\n    difference() {\n        // Front beam\n        translate([leg_radius+5, leg_radius+5, leg_height/2])\n            cube([table_length-(leg_radius+5)*2, wall_thickness*2, beam_height]);\n        \n        // Hollow center\n        translate([leg_radius+5+wall_thickness, leg_radius+5+wall_thickness, leg_height/2+wall_thickness])\n            cube([table_length-(leg_radius+5)*2-wall_thickness*2, wall_thickness, beam_height-wall_thickness*2]);\n    }\n    \n    difference() {\n        // Side beam\n        translate([leg_radius+5, leg_radius+5, leg_height/2])\n            rotate([0, 0, 90])\n                cube([table_width-(leg_radius+5)*2, wall_thickness*2, beam_height]);\n        \n        // Hollow center\n        translate([leg_radius+5+wall_thickness, leg_radius+5+wall_thickness, leg_height/2+wall_thickness])\n            rotate([0, 0, 90])\n                cube([table_width-(leg_radius+5)*2-wall_thickness*2, wall_thickness, beam_height-wall_thickness*2]);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "cement",
    "openscad_code": "// Cement Side Table – medium-detail, 3D-printable\n// Overall footprint 80 mm × 80 mm × 90 mm (h)\n\n// Wall thickness constant\nwall = 2;\n\n// Top surface with subtle texture pattern\nmodule textured_tabletop() {\n    difference() {\n        // Main slab\n        cube([80, 80, 8], center = true);\n\n        // Recessed 2 mm deep grid for cement texture\n        for (x = [-35:10:35])\n            for (y = [-35:10:35])\n                translate([x, y, 3])\n                    cube([8, 8, 6], center = true);\n    }\n}\n\n// One hollow tapered cement leg\nmodule leg() {\n    difference() {\n        // Tapered column\n        cylinder(h1 = 70, h2 = 70, r1 = 5, r2 = 7, center = false);\n\n        // Inner void\n        translate([0, 0, wall])\n            cylinder(h = 70 - wall, r = 5 - wall);\n    }\n}\n\n// Reinforcing ring inside the top for print strength\nmodule top_ring() {\n    difference() {\n        cylinder(h = 8, r = 38, center = true);\n        cylinder(h = 9, r = 36 - wall, center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 45])\n    union() {\n        // Tabletop centered at z = 45\n        translate([0, 0, 0])\n            textured_tabletop();\n\n        // Reinforcing ring\n        translate([0, 0, -4])\n            top_ring();\n\n        // Four legs inset 12 mm from each corner\n        for (dx = [-1, 1], dy = [-1, 1])\n            translate([dx * 28, dy * 28, -45 + 4])\n                leg();\n    }",
    "renders": true
  },
  {
    "sports_equipment": "aggregate",
    "openscad_code": "// Aggregate Coffee Table - Realistic Style\n// Dimensions: 120mm x 80mm x 45mm\n\n$fn = 50;\n\n// Main tabletop - oval shape with rounded edges\nmodule tabletop() {\n    difference() {\n        // Main oval top\n        scale([1.2, 0.8, 0.1])\n            cylinder(h=4, d=100);\n        \n        // Hollow center for printing\n        translate([0, 0, -1])\n            scale([1.15, 0.75, 1])\n                cylinder(h=6, d=96);\n    }\n}\n\n// Table legs - tapered cylinders with joints\nmodule leg() {\n    // Leg body\n    cylinder(h1=35, h2=35, r1=6, r2=4);\n    \n    // Joint connection at top\n    translate([0, 0, 35])\n        cylinder(h=5, r=7);\n}\n\n// Cross support bar between legs\nmodule support_bar(length) {\n    difference() {\n        // Main bar\n        cube([length, 8, 6]);\n        \n        // Hollow for printing\n        translate([2, 2, 2])\n            cube([length-4, 4, 2]);\n    }\n}\n\n// Decorative aggregate surface texture\nmodule aggregate_texture() {\n    // Pattern of small spheres to simulate aggregate\n    for (x = [-45:10:45]) {\n        for (y = [-30:10:30]) {\n            if (x*x/2025 + y*y/900 <= 1) {\n                translate([x, y, 3.5])\n                    sphere(d=2 + (x%4)*0.5);\n            }\n        }\n    }\n}\n\n// Leg assembly with support bars\nmodule leg_assembly() {\n    // Front left leg\n    translate([-45, -30, 0])\n        leg();\n    \n    // Front right leg\n    translate([45, -30, 0])\n        leg();\n    \n    // Back left leg\n    translate([-45, 30, 0])\n        leg();\n    \n    // Back right leg\n    translate([45, 30, 0])\n        leg();\n    \n    // Side support bars\n    translate([-45, -30, 15])\n        rotate([0, 0, 90])\n            support_bar(60);\n    \n    translate([45, -30, 15])\n        rotate([0, 0, 90])\n            support_bar(60);\n    \n    // Front/back support bars\n    translate([0, -30, 10])\n        support_bar(90);\n    \n    translate([0, 30, 10])\n        support_bar(90);\n}\n\n// Main assembly\nunion() {\n    // Tabletop with aggregate surface\n    translate([0, 0, 40])\n        union() {\n            tabletop();\n            aggregate_texture();\n        };\n    \n    // Leg structure\n    leg_assembly();\n    \n    // Floor protectors on legs\n    translate([-45, -30, -0.5])\n        cylinder(h=1, r=5);\n    translate([45, -30, -0.5])\n        cylinder(h=1, r=5);\n    translate([-45, 30, -0.5])\n        cylinder(h=1, r=5);\n    translate([45, 30, -0.5])\n        cylinder(h=1, r=5);\n}",
    "renders": true
  },
  {
    "sports_equipment": "nail",
    "openscad_code": "// Nail Furniture - Realistic Style\n// A decorative furniture piece shaped like a giant nail, suitable as a stool or side table\n\n// Overall dimensions\nnail_height = 120;\nhead_diameter = 60;\nshank_diameter = 20;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Module for creating the nail head with furniture characteristics\nmodule nail_head() {\n    // Main head disk\n    difference() {\n        cylinder(h=15, d=head_diameter, $fn=60);\n        \n        // Top surface indentation for aesthetics and grip\n        translate([0, 0, 13])\n            cylinder(h=3, d=head_diameter*0.8, $fn=60);\n        \n        // Center hole for weight reduction\n        translate([0, 0, -1])\n            cylinder(h=17, d=head_diameter*0.3, $fn=30);\n    }\n    \n    // Grip ridges on top surface\n    for (i = [1:6]) {\n        rotate([0, 0, i*60])\n            translate([head_diameter*0.35, 0, 14.5])\n                cube([head_diameter*0.1, 3, 1], center=true);\n    }\n    \n    // Structural reinforcement ring underneath\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h=5, d=head_diameter*0.9, $fn=50);\n            cylinder(h=6, d=head_diameter*0.7, $fn=30);\n        }\n}\n\n// Module for creating the nail shank as furniture support\nmodule nail_shank() {\n    // Main hollow cylinder for 3D printing\n    difference() {\n        cylinder(h=nail_height-15, d=shank_diameter, $fn=40);\n        translate([0, 0, -1])\n            cylinder(h=nail_height-13, d=shank_diameter-wall_thickness*2, $fn=30);\n    }\n    \n    // Structural ribs for strength\n    for (i = [1:4]) {\n        rotate([0, 0, i*90])\n            translate([0, shank_diameter/2-wall_thickness, 0])\n                cube([wall_thickness*2, wall_thickness, nail_height-15], center=true);\n    }\n}\n\n// Module for creating the nail tip with furniture base\nmodule nail_tip() {\n    // Modified cone tip for stability\n    difference() {\n        cylinder(h1=shank_diameter*1.5, h2=0, r1=shank_diameter/2, r2=shank_diameter/4, $fn=30);\n        \n        // Hollow interior\n        cylinder(h1=shank_diameter*1.5, h2=0, r1=shank_diameter/2-wall_thickness, r2=shank_diameter/4, $fn=30);\n    }\n    \n    // Base ring for floor protection\n    translate([0, 0, shank_diameter*1.5])\n        difference() {\n            cylinder(h=5, d=shank_diameter*1.3, $fn=40);\n            cylinder(h=6, d=shank_diameter, $fn=30);\n        }\n}\n\n// Main assembly\nunion() {\n    // Place nail head on top\n    translate([0, 0, nail_height-15])\n        nail_head();\n    \n    // Center shank\n    nail_shank();\n    \n    // Tip at bottom\n    translate([0, 0, -shank_diameter*1.5])\n        nail_tip();\n}",
    "renders": true
  },
  {
    "sports_equipment": "screw",
    "openscad_code": "// Screw-shaped stool / side table\n// Overall height 120 mm, Ø120 mm head, Ø30 mm thread\n// Designed for 3D printing – no support needed when printed upside-down\n\n$fn = 72;               // global circle resolution\n\n// ---------- PARAMETERS ----------\nhead_d      = 120;      // screw head diameter\nhead_h      = 18;       // screw head thickness\nshaft_d     = 30;       // threaded shaft diameter\nshaft_h     = 102;      // threaded shaft height\nthreads     = 8;        // number of thread turns\ngrip_knurls = 24;       // number of knurls around head edge\nwall_t      = 2.0;      // shell thickness for printing\n\n// ---------- MODULES --------------\n\n// Hex socket in screw head\nmodule hex_socket(hex_d = head_d*0.35, hex_h = head_h*0.7){\n    linear_extrude(hex_h, center=false)\n        circle(d = hex_d, $fn = 6);\n}\n\n// Threaded shaft (helical ridge printed as over-hang-free ramp)\nmodule thread_ridge(radius, turns, pitch, height, thickness){\n    for (i=[0:turns-1]){\n        rotate([0,0,i*360/turns])\n            translate([0,0,i*pitch/turns])\n                cylinder(h = pitch/turns + 0.1,\n                         r1 = radius,\n                         r2 = radius + thickness,\n                         center=false);\n    }\n}\n\n// Grip knurls around head perimeter\nmodule knurls(count, head_r, head_h, knurl_w = 4, knurl_d = 1.5){\n    for(i=[0:count-1]){\n        rotate([0,0,i*360/count])\n            translate([head_r - knurl_d/2, 0, head_h/2])\n                cube([knurl_d, knurl_w, head_h], center=true);\n    }\n}\n\n// ---------- MAIN MODEL ------------\n\n// Overall stool as one printable part\ndifference(){\n    union(){\n        // Screw head solid\n        cylinder(h = head_h, d = head_d, center=false);\n        \n        // Shaft solid\n        cylinder(h = shaft_h, d = shaft_d, center=false);\n        \n        // Thread ridges\n        translate([0,0,head_h])\n            thread_ridge(radius   = shaft_d/2,\n                         turns    = threads,\n                         pitch    = shaft_h,\n                         height   = shaft_h,\n                         thickness = wall_t);\n                         \n        // Grip knurls\n        knurls(count   = grip_knurls,\n               head_r  = head_d/2,\n               head_h  = head_h);\n    }\n    \n    // Hollow interior\n    translate([0,0,-0.1])\n        cylinder(h = head_h + shaft_h + 0.2,\n                 d = head_d - 2*wall_t,\n                 center=false);\n    \n    // Hex socket for tool / coin\n    translate([0,0,head_h - head_h*0.7 - 0.1])\n        hex_socket();\n}\n\n// Optional rubber-foot cavity (optional print-in insert)\ntranslate([0,0,-0.1])\n    cylinder(h = 5, d = shaft_d - 2*wall_t, center=false);",
    "renders": true
  },
  {
    "sports_equipment": "bracket",
    "openscad_code": "// Shelf Bracket - 3D Printable Furniture Bracket\n// Medium complexity realistic style bracket for supporting shelves\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\nbracket_width = 60;\nbracket_height = 100;\nbracket_depth = 80;\nwall_thickness = 2.5;\nscrew_hole_diameter = 4;\nscrew_head_diameter = 8;\n\nmodule bracket_base() {\n    // Main L-shaped bracket body\n    difference() {\n        union() {\n            // Vertical wall mount plate\n            translate([0, 0, 0])\n                cube([bracket_width, wall_thickness, bracket_height]);\n            \n            // Horizontal shelf support\n            translate([0, 0, 0])\n                cube([bracket_width, bracket_depth, wall_thickness]);\n            \n            // Reinforcement gusset\n            for (i = [0:2:bracket_width-2]) {\n                translate([i, 0, 0])\n                    cube([2, bracket_depth, wall_thickness]);\n            }\n            \n            // Front support rib\n            translate([0, bracket_depth-wall_thickness, 0])\n                cube([bracket_width, wall_thickness, bracket_height]);\n        }\n        \n        // Screw holes in vertical plate\n        translate([bracket_width/4, -1, bracket_height*0.75])\n            rotate([90, 0, 0])\n                cylinder(h=5, d=screw_hole_diameter);\n                \n        translate([bracket_width*3/4, -1, bracket_height*0.75])\n            rotate([90, 0, 0])\n                cylinder(h=5, d=screw_hole_diameter);\n                \n        translate([bracket_width/4, -1, bracket_height*0.25])\n            rotate([90, 0, 0])\n                cylinder(h=5, d=screw_hole_diameter);\n                \n        translate([bracket_width*3/4, -1, bracket_height*0.25])\n            rotate([90, 0, 0])\n                cylinder(h=5, d=screw_hole_diameter);\n        \n        // Counterbore for screw heads\n        translate([bracket_width/4, -2, bracket_height*0.75])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=screw_head_diameter);\n                \n        translate([bracket_width*3/4, -2, bracket_height*0.75])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=screw_head_diameter);\n                \n        translate([bracket_width/4, -2, bracket_height*0.25])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=screw_head_diameter);\n                \n        translate([bracket_width*3/4, -2, bracket_height*0.25])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=screw_head_diameter);\n        \n        // Screw holes in horizontal plate\n        translate([bracket_width/4, bracket_depth/4, -1])\n            cylinder(h=5, d=screw_hole_diameter);\n            \n        translate([bracket_width*3/4, bracket_depth/4, -1])\n            cylinder(h=5, d=screw_hole_diameter);\n            \n        translate([bracket_width/4, bracket_depth*3/4, -1])\n            cylinder(h=5, d=screw_hole_diameter);\n            \n        translate([bracket_width*3/4, bracket_depth*3/4, -1])\n            cylinder(h=5, d=screw_hole_diameter);\n        \n        // Counterbore for horizontal plate screws\n        translate([bracket_width/4, bracket_depth/4, -3])\n            cylinder(h=3, d=screw_head_diameter);\n            \n        translate([bracket_width*3/4, bracket_depth/4, -3])\n            cylinder(h=3, d=screw_head_diameter);\n            \n        translate([bracket_width/4, bracket_depth*3/4, -3])\n            cylinder(h=3, d=screw_head_diameter);\n            \n        translate([bracket_width*3/4, bracket_depth*3/4, -3])\n            cylinder(h=3, d=screw_head_diameter);\n    }\n}\n\nmodule corner_reinforcement() {\n    // Triangular reinforcement at the corner\n    difference() {\n        union() {\n            // Main triangular gusset\n            polyhedron(\n                points = [\n                    [0, 0, 0],\n                    [0, bracket_depth, 0],\n                    [0, 0, bracket_height],\n                    [bracket_width, 0, 0],\n                    [bracket_width, bracket_depth, 0],\n                    [bracket_width, 0, bracket_height]\n                ],\n                faces = [\n                    [0, 1, 2],  // Left triangle\n                    [3, 5, 4],  // Right triangle\n                    [0, 3, 1],  // Bottom\n                    [1, 4, 2],  // Front\n                    [2, 5, 0],  // Back\n                    [1, 3, 4],  // Diagonal\n                    [2, 4, 5]   // Diagonal\n                ]\n            );\n        }\n        \n        // Lightening holes in gusset\n        translate([bracket_width/2, bracket_depth/2, bracket_height/2])\n            rotate([45, 0, 45])\n                cube([10, 10, 10], center=true);\n    }\n}\n\nmodule decorative_edges() {\n    // Rounded edges for aesthetic appeal\n    translate([0, bracket_depth, bracket_height])\n        rotate([90, 0, 0])\n            cylinder(h=wall_thickness, d=wall_thickness*2);\n            \n    translate([bracket_width, bracket_depth, bracket_height])\n        rotate([90, 0, 0])\n            cylinder(h=wall_thickness, d=wall_thickness*2);\n}\n\n// Assembly\nunion() {\n    bracket_base();\n    corner_reinforcement();\n    decorative_edges();\n}",
    "renders": true
  },
  {
    "sports_equipment": "plate",
    "openscad_code": "// Realistic Furniture Plate – 3D printable tray / serving plate\n// Medium complexity, built from primitives only\n\n// Dimensions (mm)\nplate_d = 180;\nplate_h = 15;\nrim_h = 6;\nwall_t = 2;          // printable wall thickness\nfoot_clear = 3;      // clearance under plate\nfoot_h = 5;\n\n// Overall plate body\nmodule plate_body()\n{\n    difference()\n    {\n        // Main disc with slight taper\n        cylinder(h = plate_h, d1 = plate_d, d2 = plate_d - 4, $fn = 120);\n\n        // Hollow cavity\n        translate([0, 0, wall_t])\n            cylinder(h = plate_h - wall_t + 0.1,\n                     d1 = plate_d - 2*wall_t,\n                     d2 = plate_d - 2*wall_t - 4,\n                     $fn = 120);\n    }\n}\n\n// Raised rim with gentle curve\nmodule raised_rim()\n{\n    difference()\n    {\n        // Outer rim ring\n        translate([0, 0, plate_h - rim_h])\n            cylinder(h = rim_h + 0.1, d = plate_d, $fn = 120);\n\n        // Inner cut for rim\n        translate([0, 0, plate_h - rim_h])\n            cylinder(h = rim_h + 0.2, d = plate_d - 2*wall_t, $fn = 120);\n    }\n\n    // Optional finger-grip notches (4x evenly spaced)\n    for (a = [0:90:270])\n        rotate([0, 0, a])\n            translate([(plate_d - wall_t)/2 - 4, 0, plate_h - rim_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h = 8, d = 4, $fn = 20);\n}\n\n// Structural feet to lift plate off table\nmodule support_feet()\n{\n    foot_d = 12;\n    foot_r = foot_d/2;\n    foot_pos = plate_d/2 - foot_d;\n\n    for (a = [45:90:315])\n    {\n        rotate([0, 0, a])\n            translate([foot_pos, 0, 0])\n                difference()\n                {\n                    // Foot cylinder\n                    cylinder(h = foot_h, d = foot_d, $fn = 30);\n\n                    // Screw recess\n                    translate([0, 0, -0.1])\n                        cylinder(h = foot_h/2, d = 4, $fn = 20);\n                }\n    }\n}\n\n// Grip texture pattern on underside\nmodule underside_texture()\n{\n    n_circles = 5;        // concentric rings\n    spacing = (plate_d/2 - wall_t - 10)/n_circles;\n\n    // Concentric ribs for stiffness & grip\n    for (i = [1:n_circles])\n    {\n        rib_d = plate_d - 2*wall_t - 2*i*spacing;\n        translate([0, 0, foot_clear + foot_h - 0.2])\n            cylinder(h = 0.5, d = rib_d, $fn = 120);\n    }\n\n    // Radial ribs\n    n_radial = 8;\n    for (a = [0:360/n_radial:359])\n        rotate([0, 0, a])\n            translate([0, 0, foot_clear + foot_h - 0.2])\n                cube([plate_d/2 - wall_t - 10, 1, 0.5], center = true);\n}\n\n// Assembly\nunion()\n{\n    plate_body();\n    raised_rim();\n    support_feet();\n    underside_texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "hinge",
    "openscad_code": "// Furniture Door Hinge - Medium Complexity Realistic Style\n// Overall dimensions: 120mm x 60mm x 20mm\n\n// Configuration\n$fn = 32;\nhinge_length = 120;\nleaf_width = 60;\nleaf_thickness = 4;\nknuckle_diameter = 20;\nknuckle_length = 30;\npin_diameter = 4;\nscrew_diameter = 4;\nscrew_head_diameter = 8;\nscrew_length = 12;\nscrew_count = 6;\nwall_thickness = 2;\n\n// Screw module\nmodule screw() {\n    translate([0, 0, screw_length/2]) {\n        union() {\n            // Screw head\n            cylinder(h=2, d=screw_head_diameter);\n            // Screw shaft\n            cylinder(h=screw_length, d=screw_diameter);\n        }\n    }\n}\n\n// Hinge leaf with screw holes\nmodule hinge_leaf(offset, mirrored=false) {\n    angle = mirrored ? 180 : 0;\n    \n    rotate([0, 0, angle]) {\n        // Main leaf body\n        difference() {\n            // Leaf plate\n            translate([0, -leaf_width/2, leaf_thickness/2]) {\n                cube([hinge_length/2, leaf_width, leaf_thickness]);\n            }\n            \n            // Screw holes\n            for(i = [0:screw_count/2-1]) {\n                x_pos = (i+0.5) * (hinge_length/2) / (screw_count/2);\n                translate([x_pos, -leaf_width/4, 0]) {\n                    screw();\n                }\n                translate([x_pos, leaf_width/4, 0]) {\n                    screw();\n                }\n            }\n            \n            // Chamfered edge near knuckle\n            translate([hinge_length/2 - 5, -leaf_width/2, -1]) {\n                cube([10, leaf_width, leaf_thickness+2]);\n            }\n        }\n        \n        // Reinforcement ribs\n        for(i = [0:2]) {\n            x_pos = (i+1) * (hinge_length/2) / 4;\n            translate([x_pos, -leaf_width/2 + wall_thickness, 0]) {\n                cube([wall_thickness*2, leaf_width - wall_thickness*2, leaf_thickness]);\n            }\n        }\n    }\n}\n\n// Knuckle pin\nmodule pin() {\n    translate([0, 0, knuckle_length/2]) {\n        cylinder(h=knuckle_length, d=pin_diameter);\n    }\n}\n\n// Knuckle segment\nmodule knuckle_segment(height, offset) {\n    translate([0, 0, offset + height/2]) {\n        difference() {\n            cylinder(h=height, d=knuckle_diameter);\n            // Hole for pin\n            cylinder(h=height+1, d=pin_diameter+0.5);\n        }\n    }\n}\n\n// Complete hinge assembly\nmodule hinge() {\n    // Left leaf with knuckles\n    translate([0, 0, 0]) {\n        hinge_leaf(0, false);\n        \n        // Knuckles on left leaf (odd positions)\n        for(i = [0:2]) {\n            translate([hinge_length/2, 0, i * knuckle_length/3]) {\n                knuckle_segment(knuckle_length/3, 0);\n            }\n        }\n    }\n    \n    // Right leaf with knuckles\n    translate([0, leaf_width, 0]) {\n        hinge_leaf(0, true);\n        \n        // Knuckles on right leaf (even positions)\n        for(i = [0:1]) {\n            translate([hinge_length/2, 0, i * knuckle_length/3 + knuckle_length/6]) {\n                knuckle_segment(knuckle_length/3, 0);\n            }\n        }\n    }\n    \n    // Central pin\n    translate([hinge_length/2, leaf_width/2, 0]) {\n        pin();\n    }\n}\n\n// Render the complete hinge\nhinge();",
    "renders": true
  },
  {
    "sports_equipment": "lock",
    "openscad_code": "// Realistic Lock Furniture Model (Medium Complexity)\n// A functional-looking lock with keyhole, shackle and body details\n// Sized for 3D printing: 40mm x 30mm x 12mm\n\n// Main parameters\nlock_width = 40;\nlock_height = 30;\nlock_thickness = 12;\nshackle_diameter = 5;\nshackle_clearance = 8;\nwall_thickness = 2;\n\n// Main lock body\nmodule lock_body() {\n    difference() {\n        // Outer rounded body\n        translate([0, 0, lock_thickness/2])\n            minkowski() {\n                cube([lock_width, lock_height, lock_thickness], center=true);\n                sphere(wall_thickness/2);\n            }\n        \n        // Inner cavity for mechanism\n        translate([0, 0, lock_thickness/2])\n            cube([lock_width-wall_thickness*2, lock_height-wall_thickness*2, lock_thickness+1], center=true);\n        \n        // Keyhole slot\n        translate([0, -lock_height/4, lock_thickness/2])\n            rotate([0, 0, 0])\n                linear_extrude(height=lock_thickness+1) {\n                    union() {\n                        circle(r=3);\n                        translate([0, -4, 0])\n                            square([2, 8], center=true);\n                    }\n                }\n    }\n}\n\n// Shackle (U-shaped bar)\nmodule shackle() {\n    // Left post\n    translate([-lock_width/4, lock_height/2, lock_thickness/2])\n        cylinder(h=shackle_clearance+lock_thickness/2, d=shackle_diameter, center=false);\n    \n    // Right post (shorter, for key insertion)\n    translate([lock_width/4, lock_height/2, lock_thickness/2])\n        cylinder(h=shackle_clearance, d=shackle_diameter, center=false);\n    \n    // Top curved part\n    translate([0, lock_height/2 + shackle_clearance + shackle_diameter/2, lock_thickness/2])\n        rotate([90, 0, 0])\n            difference() {\n                // Outer torus\n                torus(r1=lock_width/2-shackle_diameter/2, r2=shackle_diameter/2);\n                // Cut bottom half\n                translate([0, 0, -shackle_diameter/2-1])\n                    cube([lock_width*2, shackle_diameter*2, shackle_diameter], center=true);\n            }\n}\n\n// Helper module for torus\nmodule torus(r1, r2) {\n    rotate_extrude()\n        translate([r1, 0, 0])\n            circle(r=r2);\n}\n\n// Lock mechanism details\nmodule mechanism_details() {\n    // Screw holes\n    for(i=[-1, 1]) {\n        translate([i*lock_width/3, 0, lock_thickness/2])\n            cylinder(h=lock_thickness, d=3, center=true);\n    }\n    \n    // Grip texture lines on sides\n    for(i=[0:5]) {\n        translate([lock_width/2+0.1, -lock_height/2 + i*5, lock_thickness/2])\n            cube([0.2, 3, lock_thickness-2], center=true);\n        translate([-lock_width/2-0.1, -lock_height/2 + i*5, lock_thickness/2])\n            cube([0.2, 3, lock_thickness-2], center=true);\n    }\n}\n\n// Assemble the lock\nunion() {\n    // Main body\n    lock_body();\n    \n    // Shackle\n    shackle();\n    \n    // Details\n    mechanism_details();\n    \n    // Brand label area\n    translate([0, 0, lock_thickness-0.5])\n        cube([lock_width/2, lock_height/4, 1], center=true);\n}",
    "renders": true
  },
  {
    "sports_equipment": "handle",
    "openscad_code": "// Realistic furniture drawer pull handle\n// Medium complexity with proper proportions and 3D-printable design\n\n$fn = 64;  // Smooth curves for realistic appearance\n\n// Main parameters\nhandle_length = 120;\nhandle_height = 35;\nmounting_plate_width = 30;\nmounting_plate_height = 20;\nwall_thickness = 2;\nscrew_hole_diameter = 4;\nscrew_head_diameter = 8;\ngrip_radius = 8;\n\nmodule mounting_plate() {\n    // Main plate with rounded edges\n    difference() {\n        // Outer rounded plate\n        translate([0, 0, mounting_plate_height/2])\n            minkowski() {\n                cube([mounting_plate_width, mounting_plate_width, mounting_plate_height], center=true);\n                sphere(r=2);\n            }\n        \n        // Counterbored screw hole\n        translate([0, 0, -1])\n            cylinder(h=mounting_plate_height+2, d=screw_head_diameter, center=true);\n        translate([0, 0, mounting_plate_height/2])\n            cylinder(h=mounting_plate_height+2, d=screw_hole_diameter, center=true);\n    }\n}\n\nmodule grip_texture() {\n    // Knurled texture pattern for better grip\n    for (i = [0:3:120]) {\n        rotate([0, 0, i])\n            translate([0, 0, 0])\n                cylinder(h=grip_radius*2, d=0.5, center=true);\n    }\n}\n\nmodule handle_bar() {\n    // Main curved handle bar\n    difference() {\n        // Outer smooth handle\n        hull() {\n            // Left curved section\n            translate([-handle_length/2 + grip_radius, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=grip_radius*2, r=grip_radius, center=true);\n            \n            // Center straight section\n            translate([0, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=handle_length - grip_radius*2, r=grip_radius, center=true);\n            \n            // Right curved section\n            translate([handle_length/2 - grip_radius, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=grip_radius*2, r=grip_radius, center=true);\n        }\n        \n        // Hollow center for material savings\n        scale([0.7, 0.7, 0.7])\n            hull() {\n                translate([-handle_length/2 + grip_radius, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=grip_radius*2, r=grip_radius, center=true);\n                translate([0, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=handle_length - grip_radius*2, r=grip_radius, center=true);\n                translate([handle_length/2 - grip_radius, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=grip_radius*2, r=grip_radius, center=true);\n            }\n    }\n    \n    // Add grip texture on center section\n    intersection() {\n        grip_texture();\n        translate([0, 0, 0])\n            cube([handle_length - grip_radius*4, grip_radius*2, grip_radius*2], center=true);\n    }\n}\n\nmodule support_arm(side) {\n    // Curved support arm connecting handle to mounting plate\n    mirror([side, 0, 0]) {\n        // Main curved support\n        hull() {\n            // Top connection to handle\n            translate([handle_length/2 - grip_radius, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=wall_thickness*2, r=wall_thickness*2, center=true);\n            \n            // Bottom connection to plate\n            translate([mounting_plate_width/2, 0, -handle_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h=wall_thickness*2, r=wall_thickness*2, center=true);\n        }\n        \n        // Reinforcement rib\n        translate([handle_length/2 - grip_radius - mounting_plate_width/2, 0, -handle_height/4])\n            rotate([0, 0, atan2(handle_height/2, handle_length/2 - grip_radius - mounting_plate_width/2)])\n                cube([sqrt(pow(handle_height/2, 2) + pow(handle_length/2 - grip_radius - mounting_plate_width/2, 2)), wall_thickness*1.5, wall_thickness*3], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Left mounting plate\n    translate([-handle_length/2 + mounting_plate_width/2, 0, -handle_height/2])\n        mounting_plate();\n    \n    // Right mounting plate\n    translate([handle_length/2 - mounting_plate_width/2, 0, -handle_height/2])\n        mounting_plate();\n    \n    // Main handle bar\n    translate([0, 0, 0])\n        handle_bar();\n    \n    // Left support arm\n    support_arm(1);\n    \n    // Right support arm\n    support_arm(-1);\n}",
    "renders": true
  },
  {
    "sports_equipment": "knob",
    "openscad_code": "// Realistic furniture knob - medium complexity\n// Overall dimensions: 50mm wide, 35mm tall, 50mm deep\n// 3D printable with 2mm wall thickness and no overhangs\n\nmodule knob_base() {\n    // Main cylindrical base - 40mm diameter, 20mm height\n    cylinder(h=20, d=40, $fn=60);\n    \n    // Base flange for furniture mounting - 50mm diameter, 4mm thick\n    translate([0, 0, -4])\n        cylinder(h=4, d=50, $fn=60);\n}\n\nmodule grip_pattern() {\n    // Create 8 grip ridges around the knob\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n            translate([18, 0, 10])\n                // Each ridge is 2mm wide, 1mm tall, 8mm long\n                cube([2, 8, 1], center=true);\n    }\n}\n\nmodule finger_indent() {\n    // Create ergonomic finger indent on top\n    translate([0, 0, 20])\n        // Indent is 2mm deep, 30mm wide\n        difference() {\n            cylinder(h=15, d=30, $fn=60);\n            translate([0, 0, -1])\n                cylinder(h=17, d=26, $fn=60);\n        }\n}\n\nmodule mounting_hole() {\n    // Central mounting hole - 4mm diameter, 24mm deep\n    translate([0, 0, -10])\n        cylinder(h=34, d=4, $fn=30);\n    \n    // Countersink for screw head - 8mm diameter, 2mm deep\n    translate([0, 0, 20])\n        cylinder(h=2, d1=8, d2=4, $fn=30);\n}\n\nmodule structural_ribs() {\n    // Internal strengthening ribs - 2mm thick\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([0, 0, 10])\n                cube([30, 2, 18], center=true);\n    }\n}\n\nmodule decorative_ring() {\n    // Decorative ring detail at base of grip\n    translate([0, 0, 8])\n        difference() {\n            cylinder(h=2, d=44, $fn=60);\n            cylinder(h=2.2, d=40, $fn=60);\n        }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        knob_base();\n        \n        // Grip section - 30mm diameter, 15mm height\n        translate([0, 0, 20])\n            cylinder(h=15, d=30, $fn=60);\n        \n        grip_pattern();\n        \n        finger_indent();\n        \n        decorative_ring();\n        \n        // Internal structure for strength\n        structural_ribs();\n    }\n    \n    // Remove mounting hole\n    mounting_hole();\n    \n    // Remove internal material for material savings\n    translate([0, 0, 5])\n        cylinder(h=15, d=34, $fn=60);\n}",
    "renders": true
  },
  {
    "sports_equipment": "window",
    "openscad_code": "// Window Frame Furniture - Realistic Style\n// A 3D printable window frame with movable sash and handle\n\n// Overall dimensions (mm)\nframe_width = 100;\nframe_height = 120;\nframe_depth = 15;\nwall_thickness = 2;\n\n// Sash dimensions\nsash_gap = 2;\nsash_width = frame_width - 2*wall_thickness - 2*sash_gap;\nsash_height = frame_height - 2*wall_thickness - 2*sash_gap;\nsash_depth = 8;\n\n// Handle dimensions\nhandle_length = 15;\nhandle_diameter = 4;\nhandle_base_diameter = 8;\n\n// Window pane muntins\nmuntin_width = 1.5;\nmuntin_count = 2;\n\n// Module for outer frame\nmodule outer_frame() {\n    difference() {\n        // Main frame body\n        cube([frame_width, frame_height, frame_depth], center=true);\n        \n        // Inner cutout\n        translate([0, 0, -1])\n            cube([frame_width - 2*wall_thickness, \n                  frame_height - 2*wall_thickness, \n                  frame_depth + 2], center=true);\n    }\n    \n    // Frame corners reinforcement\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*(frame_width/2 - wall_thickness), \n                      y*(frame_height/2 - wall_thickness), \n                      0])\n                cube([wall_thickness*2, wall_thickness*2, frame_depth], center=true);\n        }\n    }\n}\n\n// Module for window sash\nmodule window_sash() {\n    translate([0, 0, (frame_depth - sash_depth)/2 + 1]) {\n        // Sash outer frame\n        difference() {\n            cube([sash_width, sash_height, sash_depth], center=true);\n            \n            // Inner pane area\n            translate([0, 0, -1])\n                cube([sash_width - 2*wall_thickness, \n                      sash_height - 2*wall_thickness, \n                      sash_depth + 2], center=true);\n        }\n        \n        // Horizontal muntins\n        for(i = [-1, 1]) {\n            translate([0, i*sash_height/6, 0])\n                cube([sash_width - 2*wall_thickness, muntin_width, sash_depth], center=true);\n        }\n        \n        // Vertical muntin\n        cube([muntin_width, sash_height - 2*wall_thickness, sash_depth], center=true);\n        \n        // Pane surface (thin)\n        translate([0, 0, sash_depth/2 - 0.5])\n            cube([sash_width - 2*wall_thickness - 1, \n                  sash_height - 2*wall_thickness - 1, \n                  1], center=true);\n    }\n}\n\n// Module for window handle\nmodule window_handle() {\n    translate([sash_width/2 - wall_thickness, \n               sash_height/2 - wall_thickness, \n               (frame_depth + sash_depth)/2 + 2]) {\n        \n        // Handle base\n        cylinder(h=3, d=handle_base_diameter, $fn=20);\n        \n        // Handle shaft\n        translate([handle_length/2, 0, 3])\n            rotate([0, 90, 0])\n                cylinder(h=handle_length, d=handle_diameter, $fn=16);\n        \n        // Handle grip\n        translate([handle_length, 0, 3])\n            sphere(d=handle_diameter*1.2, $fn=16);\n    }\n}\n\n// Module for mounting brackets\nmodule mounting_brackets() {\n    bracket_size = 8;\n    bracket_thickness = 3;\n    \n    for(pos = [[-frame_width/2 + 10, frame_height/2 - 5, 0], \n               [frame_width/2 - 10, frame_height/2 - 5, 0],\n               [-frame_width/2 + 10, -frame_height/2 + 5, 0], \n               [frame_width/2 - 10, -frame_height/2 + 5, 0]]) {\n        \n        translate(pos)\n            cube([bracket_size, bracket_thickness, frame_depth], center=true);\n        \n        translate([pos[0], pos[1], frame_depth/2 + 2])\n            cylinder(h=4, d=4, $fn=12);\n    }\n}\n\n// Assembly\nunion() {\n    // Main frame\n    outer_frame();\n    \n    // Mounting brackets\n    mounting_brackets();\n    \n    // Window sash with handle\n    union() {\n        window_sash();\n        window_handle();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "door",
    "openscad_code": "// Door Furniture - Realistic Style with Medium Complexity\n// A 3D printable door model with frame, panels, handle and hinges\n\n// Overall dimensions (mm)\ndoor_width = 80;\ndoor_height = 120;\ndoor_thickness = 4;\nframe_thickness = 3;\n\n// Panel details\npanel_inset = 1.5;\npanel_border = 6;\npanel_bevel = 0.5;\n\n// Handle dimensions\nhandle_radius = 4;\nhandle_length = 15;\nhandle_base_radius = 6;\nhandle_base_height = 3;\n\n// Hinge dimensions\nhinge_width = 8;\nhinge_height = 12;\nhinge_thickness = 2;\nhinge_screw_radius = 1;\nhinge_count = 3;\n\n// Door panel module\nmodule door_panel(x, y, width, height) {\n    // Main panel with inset\n    difference() {\n        // Outer panel\n        translate([x, y, 0])\n            cube([width, height, door_thickness], center=true);\n        \n        // Inner inset\n        translate([x, y, panel_inset/2])\n            cube([width - panel_border*2, height - panel_border*2, door_thickness + 0.1], center=true);\n        \n        // Beveled edges\n        translate([x, y, door_thickness/2 - panel_bevel])\n            cube([width - panel_border*2 - 2, height - panel_border*2 - 2, panel_bevel*2], center=true);\n    }\n}\n\n// Door handle module\nmodule door_handle() {\n    // Handle base\n    translate([door_width/2 - handle_base_radius - 2, door_height/2, door_thickness/2 + handle_base_height/2])\n        cylinder(h=handle_base_height, r=handle_base_radius, $fn=32);\n    \n    // Handle grip\n    translate([door_width/2 - handle_base_radius - 2, door_height/2, door_thickness/2 + handle_base_height + handle_length/2])\n        rotate([90, 0, 0])\n            cylinder(h=handle_length, r=handle_radius, $fn=16);\n}\n\n// Hinge module\nmodule door_hinge(y_pos) {\n    // Main hinge plate\n    translate([-door_width/2 - hinge_thickness/2, y_pos, 0])\n        cube([hinge_thickness, hinge_height, door_thickness], center=true);\n    \n    // Hinge pin (simplified)\n    translate([-door_width/2 - hinge_thickness - 1, y_pos, 0])\n        cylinder(h=door_thickness + 2, r=1.5, center=true, $fn=16);\n    \n    // Screws\n    for(screw_y = [-hinge_height/3, 0, hinge_height/3]) {\n        translate([-door_width/2 - hinge_thickness/2, y_pos + screw_y, door_thickness/4])\n            cylinder(h=hinge_thickness + 0.1, r=hinge_screw_radius, $fn=8);\n        translate([-door_width/2 - hinge_thickness/2, y_pos + screw_y, -door_thickness/4])\n            cylinder(h=hinge_thickness + 0.1, r=hinge_screw_radius, $fn=8);\n    }\n}\n\n// Main door assembly\nmodule door_assembly() {\n    // Door frame\n    difference() {\n        // Outer frame\n        cube([door_width + frame_thickness*2, door_height + frame_thickness*2, door_thickness + frame_thickness*2], center=true);\n        \n        // Inner opening\n        cube([door_width, door_height, door_thickness + frame_thickness*2 + 0.1], center=true);\n    }\n    \n    // Door itself\n    translate([0, 0, 0])\n        cube([door_width, door_height, door_thickness], center=true);\n    \n    // Raised panels\n    door_panel(0, door_height/4, door_width - 20, door_height/3);\n    door_panel(0, -door_height/4, door_width - 20, door_height/3);\n    \n    // Door handle\n    door_handle();\n    \n    // Hinges\n    for(i = [0:hinge_count-1]) {\n        y_pos = -door_height/2 + door_height/(hinge_count+1) * (i+1);\n        door_hinge(y_pos);\n    }\n    \n    // Panel molding details\n    translate([0, door_height/2 - 10, door_thickness/2 + 0.1])\n        cube([door_width - 10, 2, 1], center=true);\n    translate([0, -door_height/2 + 10, door_thickness/2 + 0.1])\n        cube([door_width - 10, 2, 1], center=true);\n}\n\n// Render the door\ndoor_assembly();",
    "renders": true
  },
  {
    "sports_equipment": "frame",
    "openscad_code": "// Bed Frame - Realistic Style with Medium Complexity\n// Designed for 3D printing, 120mm length\n\n// Frame dimensions\nframe_length = 120;\nframe_width = 80;\nframe_height = 30;\npost_thickness = 4;\nrail_thickness = 3;\nslat_width = 8;\nslat_thickness = 2;\nleg_height = 20;\nleg_width = 6;\n\n// Main bed frame module\nmodule bed_frame() {\n    // Four corner posts\n    for (x = [0, frame_length - post_thickness]) {\n        for (y = [0, frame_width - post_thickness]) {\n            translate([x, y, 0])\n                post();\n        }\n    }\n    \n    // Side rails\n    translate([post_thickness/2, 0, frame_height - rail_thickness])\n        cube([frame_length - post_thickness, rail_thickness, rail_thickness]);\n    \n    translate([post_thickness/2, frame_width - rail_thickness, frame_height - rail_thickness])\n        cube([frame_length - post_thickness, rail_thickness, rail_thickness]);\n    \n    // End rails\n    translate([0, post_thickness/2, frame_height - rail_thickness])\n        cube([rail_thickness, frame_width - post_thickness, rail_thickness]);\n    \n    translate([frame_length - rail_thickness, post_thickness/2, frame_height - rail_thickness])\n        cube([rail_thickness, frame_width - post_thickness, rail_thickness]);\n    \n    // Support legs\n    for (x = [25, 95]) {\n        for (y = [20, 60]) {\n            translate([x - leg_width/2, y - leg_width/2, 0])\n                leg();\n        }\n    }\n    \n    // Slats\n    for (x = [20:10:100]) {\n        translate([x, 5, frame_height - slat_thickness])\n            slat();\n    }\n    \n    // Center support beam\n    translate([frame_length/2 - 2, 0, frame_height - rail_thickness - 2])\n        cube([4, frame_width, 4]);\n}\n\n// Corner post with rounded edges\nmodule post() {\n    difference() {\n        cube([post_thickness, post_thickness, frame_height]);\n        \n        // Rounded edges\n        translate([-1, -1, -1])\n            cube([2, 2, frame_height + 2]);\n        translate([post_thickness - 1, -1, -1])\n            cube([2, 2, frame_height + 2]);\n        translate([-1, post_thickness - 1, -1])\n            cube([2, 2, frame_height + 2]);\n        translate([post_thickness - 1, post_thickness - 1, -1])\n            cube([2, 2, frame_height + 2]);\n    }\n}\n\n// Support leg with taper\nmodule leg() {\n    difference() {\n        union() {\n            // Main leg\n            translate([0, 0, 0])\n                cube([leg_width, leg_width, leg_height]);\n            \n            // Foot pad\n            translate([-1, -1, -1])\n                cube([leg_width + 2, leg_width + 2, 1]);\n        }\n        \n        // Taper cut\n        translate([leg_width/2, leg_width/2, 0])\n            rotate([0, 0, 45])\n            cube([leg_width*1.5, leg_width*1.5, leg_height + 2]);\n    }\n}\n\n// Slat with chamfered edges\nmodule slat() {\n    difference() {\n        cube([slat_width, frame_width - 10, slat_thickness]);\n        \n        // Chamfer edges\n        for (i = [0, slat_width - 1]) {\n            translate([i, 0, 0])\n                cube([1, 1, 1]);\n            translate([i, frame_width - 11, 0])\n                cube([1, 1, 1]);\n        }\n    }\n}\n\n// Assembly\nbed_frame();",
    "renders": true
  },
  {
    "sports_equipment": "sill",
    "openscad_code": "// Window sill furniture piece\n// Dimensions: 120mm wide x 20mm deep x 30mm tall\n\n// Main sill body with realistic proportions\nmodule sill_body() {\n    // Top surface with slight slope for water drainage\n    difference() {\n        // Main block\n        cube([120, 20, 25]);\n        \n        // Drainage groove (1mm deep)\n        translate([5, 10, 24])\n            cube([110, 1, 1]);\n    }\n}\n\n// Front lip to prevent items from falling\nmodule front_lip() {\n    translate([0, -1, 0])\n        cube([120, 3, 15]);\n}\n\n// Support brackets underneath\nmodule support_bracket(x_pos) {\n    translate([x_pos, 10, 0]) {\n        // Main bracket shape\n        difference() {\n            union() {\n                // Vertical support\n                cube([8, 2, 20]);\n                \n                // Angled support\n                translate([0, 0, 20])\n                    rotate([0, -45, 0])\n                        cube([8, 2, 14]);\n            }\n            \n            // Lightening holes for material savings\n            translate([4, 1, 10])\n                cylinder(h=3, r=2);\n            translate([4, 1, 5])\n                cylinder(h=3, r=1.5);\n        }\n    }\n}\n\n// Rear wall mounting flange\nmodule mounting_flange() {\n    translate([-2, 15, 0])\n        cube([124, 7, 10]);\n    \n    // Screw holes for mounting\n    for(x = [15:30:105]) {\n        translate([x, 18.5, 5])\n            cylinder(h=10, r=1.5);\n    }\n}\n\n// Textured grip pattern on top surface\nmodule grip_pattern() {\n    for(x = [10:5:110]) {\n        for(y = [5:5:15]) {\n            translate([x, y, 25.1])\n                cube([0.5, 0.5, 0.3]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    sill_body();\n    front_lip();\n    mounting_flange();\n    \n    // Support brackets - two for stability\n    support_bracket(20);\n    support_bracket(92);\n    \n    // Grip texture\n    grip_pattern();\n}",
    "renders": true
  },
  {
    "sports_equipment": "lintel",
    "openscad_code": "// Lintel Furniture Item - Realistic Style\n// A decorative wooden lintel with carved details and structural joints\n\n$fn = 50;\n\n// Main dimensions\nlength = 120;\nheight = 25;\ndepth = 18;\nwall_thickness = 2;\n\nmodule lintel_body() {\n    // Main beam\n    difference() {\n        cube([length, depth, height], center=true);\n        \n        // Hollow out interior\n        translate([0, 0, 0])\n            cube([length - wall_thickness*2, depth - wall_thickness*2, height - wall_thickness*2], center=true);\n    }\n}\n\nmodule decorative_carving() {\n    // Carved groove pattern on front face\n    for(i = [0:4]) {\n        translate([i * 25 - 50, depth/2 - 1, 0])\n            cube([2, 1, height - 4], center=true);\n    }\n    \n    // Decorative circles\n    for(i = [0:3]) {\n        translate([i * 30 - 45, depth/2 - 1, height/2 - 5])\n            cylinder(h=1, r=3, center=true);\n    }\n}\n\nmodule support_blocks() {\n    // Left support block\n    translate([-length/2 + 8, 0, -height/2 - 8])\n        difference() {\n            cube([16, depth + 4, 16], center=true);\n            translate([0, 0, 8])\n                cube([12, depth, 8], center=true);\n        }\n    \n    // Right support block\n    translate([length/2 - 8, 0, -height/2 - 8])\n        difference() {\n            cube([16, depth + 4, 16], center=true);\n            translate([0, 0, 8])\n                cube([12, depth, 8], center=true);\n        }\n}\n\nmodule mortise_tenon_joints() {\n    // Top mortises for upper connection\n    translate([-length/3, 0, height/2 - 1])\n        cube([8, depth - 4, 2], center=true);\n    \n    translate([length/3, 0, height/2 - 1])\n        cube([8, depth - 4, 2], center=true);\n    \n    // Side tenons\n    translate([-length/2 + 1, 0, 0])\n        cube([2, depth - 4, height - 8], center=true);\n    \n    translate([length/2 - 1, 0, 0])\n        cube([2, depth - 4, height - 8], center=true);\n}\n\nmodule wood_grain_texture() {\n    // Subtle grain lines on top surface\n    for(i = [0:20]) {\n        translate([i * 6 - 60, 0, height/2 - 0.5])\n            cube([0.5, depth - 2, 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    lintel_body();\n    support_blocks();\n    \n    // Details\n    translate([0, 0, 0])\n        union() {\n            decorative_carving();\n            mortise_tenon_joints();\n            wood_grain_texture();\n        }\n    \n    // Additional structural reinforcement\n    translate([0, 0, -height/2 - 8])\n        cube([length + 4, depth + 8, 2], center=true);\n}",
    "renders": true
  },
  {
    "sports_equipment": "column",
    "openscad_code": "// Column Furniture - Realistic Medium Complexity\n// A decorative column with fluted shaft, ornate capital and base\n// Designed for 3D printing with no overhangs\n\n// Overall dimensions\nheight = 100;\nbase_diameter = 40;\nshaft_diameter = 30;\ncapital_diameter = 45;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule fluted_shaft() {\n    difference() {\n        // Main shaft cylinder\n        cylinder(h=height*0.6, d=shaft_diameter, $fn=60);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=height*0.6+2, d=shaft_diameter-wall*2, $fn=60);\n            \n        // Create fluting grooves\n        for(i=[0:11]) {\n            rotate([0, 0, i*30])\n                translate([shaft_diameter/2-wall, -wall/2, -1])\n                    cube([wall*2, wall, height*0.6+2]);\n        }\n    }\n}\n\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=height*0.15, d=base_diameter, $fn=60);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=height*0.15+2, d=base_diameter-wall*2, $fn=60);\n            \n        // Decorative ring at top\n        translate([0, 0, height*0.15-3])\n            difference() {\n                cylinder(h=3, d=base_diameter-5, $fn=60);\n                cylinder(h=3, d=base_diameter-15, $fn=60);\n            }\n    }\n}\n\nmodule capital() {\n    difference() {\n        // Main capital cylinder\n        cylinder(h=height*0.25, d=capital_diameter, $fn=60);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=height*0.25+2, d=capital_diameter-wall*2, $fn=60);\n            \n        // Decorative molding\n        translate([0, 0, height*0.25-8])\n            difference() {\n                cylinder(h=8, d=capital_diameter-5, $fn=60);\n                cylinder(h=8, d=capital_diameter-15, $fn=60);\n            }\n            \n        // Top decorative edge\n        translate([0, 0, height*0.25-2])\n            difference() {\n                cylinder(h=2, d=capital_diameter+2, $fn=60);\n                cylinder(h=2, d=capital_diameter-2, $fn=60);\n            }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    base();\n    \ntranslate([0, 0, height*0.15])\n    fluted_shaft();\n    \ntranslate([0, 0, height*0.15+height*0.6])\n    capital();",
    "renders": true
  },
  {
    "sports_equipment": "pillar",
    "openscad_code": "// Realistic Pillar Furniture Item - OpenSCAD\n// Medium complexity pillar with furniture characteristics\n// Height: 100mm, Base: 40mm diameter\n\n// Parameters\npillar_height = 100;\nbase_diameter = 40;\nwall_thickness = 2;\nsegments = 32;\n\n// Main module\nmodule pillar_furniture() {\n    // Base plate for stability\n    translate([0, 0, 0])\n        cylinder(h=5, d=base_diameter, $fn=segments);\n    \n    // Bottom decorative ring\n    translate([0, 0, 5])\n        difference() {\n            cylinder(h=8, d=base_diameter + 6, $fn=segments);\n            cylinder(h=8, d=base_diameter - 2, $fn=segments);\n        }\n    \n    // Main pillar body\n    difference() {\n        // Outer cylinder\n        translate([0, 0, 13])\n            cylinder(h=pillar_height - 26, d=base_diameter, $fn=segments);\n        \n        // Inner hollow for printability\n        translate([0, 0, 13])\n            cylinder(h=pillar_height - 26, d=base_diameter - wall_thickness*2, $fn=segments);\n    }\n    \n    // Middle support ring with decorative notches\n    translate([0, 0, 50])\n        difference() {\n            union() {\n                cylinder(h=4, d=base_diameter + 4, $fn=segments);\n                // Decorative notches\n                for(i=[0:segments/4-1]) {\n                    rotate([0, 0, i*90])\n                        translate([base_diameter/2 + 1, 0, 0])\n                            cube([6, 2, 4], center=true);\n                }\n            }\n            cylinder(h=4, d=base_diameter - 2, $fn=segments);\n        }\n    \n    // Top decorative ring\n    translate([0, 0, pillar_height - 13])\n        difference() {\n            cylinder(h=8, d=base_diameter + 6, $fn=segments);\n            cylinder(h=8, d=base_diameter - 2, $fn=segments);\n        }\n    \n    // Top plate with mounting holes\n    translate([0, 0, pillar_height - 5])\n        difference() {\n            cylinder(h=5, d=base_diameter, $fn=segments);\n            // Mounting holes for furniture attachment\n            for(i=[0:3]) {\n                rotate([0, 0, i*90 + 45])\n                    translate([base_diameter/3, 0, 2.5])\n                        cylinder(h=5, d=3, $fn=8);\n            }\n            // Central hole\n            cylinder(h=5, d=8, $fn=segments);\n        }\n    \n    // Vertical reinforcement ribs\n    for(i=[0:segments/8-1]) {\n        rotate([0, 0, i*45])\n            translate([0, (base_diameter - wall_thickness)/2, pillar_height/2])\n                cube([wall_thickness, base_diameter - wall_thickness, pillar_height - 26], center=true);\n    }\n    \n    // Bottom grip texture\n    translate([0, 0, 8])\n        for(i=[0:segments-1]) {\n            rotate([0, 0, i*360/segments])\n                translate([base_diameter/2 - 1, 0, 0])\n                    cube([wall_thickness, 1, 35], center=true);\n        }\n}\n\n// Render the pillar\npillar_furniture();",
    "renders": true
  },
  {
    "sports_equipment": "arch",
    "openscad_code": "// Arch-style bookshelf (realistic style)\n// Overall size: 120mm wide x 30mm deep x 100mm high\n\nwall_thickness = 2;\nshelf_thickness = 3;\nwidth = 120;\ndepth = 30;\nheight = 100;\n\nmodule rounded_cube(size, radius, center = false) {\n    x = size.x;\n    y = size.y;\n    z = size.z;\n    \n    hull() {\n        translate([radius, radius, radius])\n            cube([x - 2*radius, y - 2*radius, z - 2*radius], center);\n        translate([0, radius, radius])\n            sphere(r = radius);\n        translate([x, radius, radius])\n            sphere(r = radius);\n        translate([0, y - radius, radius])\n            sphere(r = radius);\n        translate([x, y - radius, radius])\n            sphere(r = radius);\n        translate([0, radius, z - radius])\n            sphere(r = radius);\n        translate([x, radius, z - radius])\n            sphere(r = radius);\n        translate([0, y - radius, z - radius])\n            sphere(r = radius);\n        translate([x, y - radius, z - radius])\n            sphere(r = radius);\n    }\n}\n\n// Main arch frame\nmodule arch_frame() {\n    difference() {\n        // Outer arch\n        hull() {\n            translate([wall_thickness, wall_thickness, 0])\n                cube([width - 2*wall_thickness, wall_thickness, height - wall_thickness]);\n            translate([wall_thickness, depth - 2*wall_thickness, 0])\n                cube([width - 2*wall_thickness, wall_thickness, height - wall_thickness]);\n            translate([wall_thickness, wall_thickness, height - wall_thickness])\n                cylinder(h = wall_thickness, d = width - 2*wall_thickness);\n            translate([wall_thickness, depth - 2*wall_thickness, height - wall_thickness])\n                cylinder(h = wall_thickness, d = width - 2*wall_thickness);\n        }\n        \n        // Inner arch cutout\n        translate([wall_thickness*2, wall_thickness*2, wall_thickness])\n            cube([width - 4*wall_thickness, depth - 4*wall_thickness, height - 2*wall_thickness]);\n        \n        // Arch curve cutout\n        translate([wall_thickness*2, wall_thickness*2, 0])\n            cylinder(h = height - wall_thickness, d = width - 4*wall_thickness);\n    }\n}\n\n// Bookshelf shelves\nmodule shelves() {\n    for (i = [0:3]) {\n        shelf_height = 15 + i * 20;\n        translate([wall_thickness*2, wall_thickness*2, shelf_height])\n            rounded_cube([width - 4*wall_thickness, depth - 4*wall_thickness, shelf_thickness], 1);\n    }\n}\n\n// Base support legs\nmodule legs() {\n    // Front legs\n    translate([wall_thickness*2, wall_thickness*2, 0])\n        rounded_cube([wall_thickness*2, wall_thickness*2, 15], 1);\n    translate([width - 4*wall_thickness, wall_thickness*2, 0])\n        rounded_cube([wall_thickness*2, wall_thickness*2, 15], 1);\n    \n    // Back legs\n    translate([wall_thickness*2, depth - 4*wall_thickness, 0])\n        rounded_cube([wall_thickness*2, wall_thickness*2, 15], 1);\n    translate([width - 4*wall_thickness, depth - 4*wall_thickness, 0])\n        rounded_cube([wall_thickness*2, wall_thickness*2, 15], 1);\n}\n\n// Decorative back panel with cutouts\nmodule back_panel() {\n    difference() {\n        translate([wall_thickness, wall_thickness*2, wall_thickness*5])\n            rounded_cube([wall_thickness, depth - 4*wall_thickness, height - wall_thickness*6], 1);\n        \n        // Decorative cutouts\n        for (i = [0:3]) {\n            cutout_height = 20 + i * 20;\n            translate([wall_thickness + 0.5, wall_thickness*2 + 2, cutout_height])\n                cube([wall_thickness, depth - 8*wall_thickness, 8]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    arch_frame();\n    shelves();\n    legs();\n    back_panel();\n}",
    "renders": true
  },
  {
    "sports_equipment": "vault",
    "openscad_code": "// Medium-complexity realistic vault furniture (gymnastics vault box)\n// Overall size: 120 mm long × 60 mm wide × 45 mm high\n// Wall thickness: 2 mm everywhere for 3D printability\n\n// Base module with fillets created by subtracted cylinders\nmodule base_block() {\n    difference() {\n        // Main body\n        cube([120, 60, 35], center = true);\n        // Front & back edge fillets\n        translate([0, 0, 17.5])\n            rotate([0, 90, 0])\n                cylinder(h = 122, r = 4, center = true);\n        // Side edge fillets\n        translate([0, 0, 17.5])\n            rotate([90, 0, 0])\n                cylinder(h = 62, r = 4, center = true);\n    }\n}\n\n// Reinforcing ribs under the base\nmodule ribs() {\n    for (x = [-40, 0, 40]) {\n        translate([x, 0, -19])\n            cube([2, 56, 8], center = true);\n    }\n}\n\n// Landing pad with rounded top\nmodule landing_pad() {\n    difference() {\n        // Main pad\n        translate([0, 0, 37.5])\n            cube([118, 58, 5], center = true);\n        // Top rounding\n        translate([0, 0, 40])\n            minkowski() {\n                cube([118, 58, 0.1], center = true);\n                cylinder(h = 0.1, r = 2);\n            }\n    }\n}\n\n// Steel spring simulation as slanted cylinders\nmodule springs(count = 6) {\n    for (i = [0 : count - 1]) {\n        angle = (i % 2 == 0) ? 10 : -10;\n        y = -25 + i * 10;\n        translate([0, y, 20])\n            rotate([0, angle, 0])\n                cylinder(h = 30, r = 2.5, center = true);\n    }\n}\n\n// Handles on the sides for carrying\nmodule handles() {\n    for (side = [-1, 1]) {\n        translate([0, side * 32, 10]) {\n            // Handle grip\n            rotate([90, 0, 0])\n                cylinder(h = 20, r = 3, center = true);\n            // Mounting blocks\n            translate([0, 0, 10])\n                cube([8, 8, 6], center = true);\n            translate([0, 0, -10])\n                cube([8, 8, 6], center = true);\n        }\n    }\n}\n\n// Anti-slip pad texture on top\nmodule grip_texture() {\n    for (x = [-55 : 11 : 55]) {\n        for (y = [-25 : 11 : 25]) {\n            translate([x, y, 40.1])\n                cylinder(h = 0.8, r = 2.5);\n        }\n    }\n}\n\n// Union all parts together\nunion() {\n    difference() {\n        union() {\n            base_block();\n            ribs();\n            landing_pad();\n        }\n        // Hollowing out the base for material saving\n        translate([0, 0, -2])\n            cube([116, 56, 31], center = true);\n    }\n    springs();\n    handles();\n    grip_texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "dome",
    "openscad_code": "// Geodesic Dome Furniture - Compact Reading Nook\n// Overall footprint: Ø120 mm × 100 mm height\n// Wall thickness: 2 mm throughout\n\n$fa = 2; $fs = 0.5;\n\n// Main parameters\nbase_r = 60;      // base radius\nwall_t = 2;       // wall thickness\nrib_w  = 4;       // rib width\nseat_h = 20;      // seat ring height\ndoor_h = 65;      // door arch height\n\nmodule geodesic_band(r, h, t){\n    // top and bottom rings\n    difference(){\n        cylinder(h=h, r=r+t/2, $fn=60);\n        translate([0,0,-1]) cylinder(h=h+2, r=r-t/2, $fn=60);\n    }\n}\n\nmodule rib_segment(r, h, t, angle){\n    rotate([0, angle, 0])\n        translate([0,0,-h/2])\n            cube([t, rib_w, h], center=true);\n}\n\nmodule dome_shell(){\n    // lower band\n    geodesic_band(base_r, seat_h, wall_t);\n    \n    // upper dome (spherical cap)\n    difference(){\n        sphere(r=base_r, $fn=120);\n        translate([0,0, -base_r+seat_h]) cube([base_r*2.2, base_r*2.2, base_r*2], center=true);\n    }\n    \n    // remove interior\n    translate([0,0,seat_h/2])\n        difference(){\n            sphere(r=base_r-wall_t, $fn=120);\n            translate([0,0,-base_r+seat_h-wall_t]) cube([base_r*2, base_r*2, base_r*2], center=true);\n        }\n    \n    // structural ribs (6 meridian ribs)\n    for(a=[0:60:359])\n        rib_segment(base_r, seat_h+base_r, wall_t, a);\n}\n\nmodule door_arch(){\n    // cut archway\n    difference(){\n        cube([base_r*2, wall_t*2, door_h*2], center=true);\n        translate([0,0,door_h/2])\n            rotate_extrude(angle=180, $fn=60)\n                translate([base_r-wall_t,0,0]) circle(r=door_h/2-wall_t, $fn=60);\n    }\n}\n\nmodule seat_pad(){\n    // cushioned ring seat\n    translate([0,0,seat_h-wall_t/2]){\n        difference(){\n            cylinder(h=wall_t*2, r=base_r-wall_t*2, $fn=60);\n            cylinder(h=wall_t*2+1, r=base_r-wall_t*4, $fn=60);\n        }\n    }\n}\n\nmodule floor_grid(){\n    // hexagonal floor pattern for printability\n    module hex(r){\n        for(i=[0:5])\n            rotate([0,0,i*60]) translate([r,0,0]) cube([r*2, wall_t, wall_t*2], center=true);\n    }\n    translate([0,0,1])\n        linear_extrude(height=wall_t)\n            hex(base_r/3);\n}\n\nunion(){\n    // main dome structure\n    dome_shell();\n    \n    // cut door opening\n    translate([base_r-wall_t/2,0,seat_h])\n        rotate([90,0,0])\n            door_arch();\n    \n    // interior components\n    seat_pad();\n    floor_grid();\n}",
    "renders": true
  },
  {
    "sports_equipment": "slab",
    "openscad_code": "// Slab-style coffee table (realistic, medium complexity)\n// Overall dimensions: 120 mm (L) × 60 mm (W) × 45 mm (H)\n\n// Parameters\ntable_length = 120;\ntable_width  = 60;\ntable_height = 45;\nslab_thick   = 12;\nwall         = 2;\nleg_thick    = 8;\nedge_rad     = 3;\npin_d        = 4;\n\n// Main slab tabletop with rounded edges\nmodule tabletop() {\n    difference() {\n        // Full block\n        translate([0, 0, table_height - slab_thick])\n            cube([table_length, table_width, slab_thick], center = true);\n        \n        // Round long edges (Y direction)\n        for (x = [-table_length/2 + edge_rad, table_length/2 - edge_rad])\n            translate([x, 0, table_height - slab_thick/2])\n                rotate([0, 90, 0])\n                    cylinder(r = edge_rad, h = wall, center = true);\n        \n        // Round short edges (X direction)\n        for (y = [-table_width/2 + edge_rad, table_width/2 - edge_rad])\n            translate([0, y, table_height - slab_thick/2])\n                rotate([90, 0, 0])\n                    cylinder(r = edge_rad, h = wall, center = true);\n        \n        // Corner spheres\n        for (x = [-table_length/2 + edge_rad, table_length/2 - edge_rad])\n            for (y = [-table_width/2 + edge_rad, table_width/2 - edge_rad])\n                translate([x, y, table_height - slab_thick + edge_rad])\n                    sphere(r = edge_rad);\n    }\n}\n\n// Chamfered leg with built-in dowel joint\nmodule leg(x_pos, y_pos) {\n    difference() {\n        // Main leg block\n        translate([x_pos, y_pos, table_height/2 - slab_thick/2])\n            cube([leg_thick, leg_thick, table_height - slab_thick], center = true);\n        \n        // Top chamfer\n        translate([x_pos, y_pos, table_height - slab_thick - 1])\n            rotate([0, 45, 0])\n                cube([leg_thick*sqrt(2), leg_thick*sqrt(2), 3], center = true);\n        \n        // Bottom chamfer\n        translate([x_pos, y_pos, 1])\n            rotate([0, -45, 0])\n                cube([leg_thick*sqrt(2), leg_thick*sqrt(2), 3], center = true);\n    }\n    \n    // Dowel pin protruding for joint\n    translate([x_pos, y_pos, table_height - slab_thick])\n        cylinder(d = pin_d, h = 6, $fn = 12);\n}\n\n// Hidden support frame between legs\nmodule frame() {\n    // Long rails\n    for (y = [-table_width/2 + leg_thick/2, table_width/2 - leg_thick/2])\n        translate([0, y, table_height/2 - slab_thick/2])\n            cube([table_length - leg_thick, wall, table_height - slab_thick], center = true);\n    \n    // Short rails\n    for (x = [-table_length/2 + leg_thick/2, table_length/2 - leg_thick/2])\n        translate([x, 0, table_height/2 - slab_thick/2])\n            cube([wall, table_width - leg_thick, table_height - slab_thick], center = true);\n}\n\n// Assembly\nunion() {\n    tabletop();\n    \n    // Legs with realistic proportions\n    leg( table_length/2 - leg_thick/2,  table_width/2 - leg_thick/2);\n    leg(-table_length/2 + leg_thick/2,  table_width/2 - leg_thick/2);\n    leg( table_length/2 - leg_thick/2, -table_width/2 + leg_thick/2);\n    leg(-table_length/2 + leg_thick/2, -table_width/2 + leg_thick/2);\n    \n    // Internal frame for strength\n    frame();\n}",
    "renders": true
  },
  {
    "sports_equipment": "foundation",
    "openscad_code": "// Foundation Furniture - Realistic Style Foundation Box\n// A foundation box used in furniture assembly - provides structural support\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Overall dimensions\nwidth = 80;\ndepth = 60;\nheight = 40;\nwall_thickness = 2;\n\n// Corner radius for rounded edges\ncorner_radius = 5;\n\n// Screw hole parameters\nscrew_diameter = 3;\nscrew_head_diameter = 6;\nscrew_head_depth = 3;\n\n// Grid pattern for top surface\ngrid_spacing = 8;\ngrid_width = 1;\ngrid_height = 1;\n\nmodule foundation_box() {\n    difference() {\n        // Main box body with rounded edges\n        rounded_box(width, depth, height, corner_radius);\n        \n        // Hollow out the inside\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            rounded_box(\n                width - 2*wall_thickness,\n                depth - 2*wall_thickness,\n                height - wall_thickness,\n                corner_radius - wall_thickness\n            );\n        \n        // Screw holes in corners - top side\n        for(x = [width/4, -width/4]) {\n            for(y = [depth/4, -depth/4]) {\n                translate([x + width/2, y + depth/2, -1])\n                    cylinder(h = height + 2, d = screw_diameter, center = false);\n                translate([x + width/2, y + depth/2, height - screw_head_depth])\n                    cylinder(h = screw_head_depth + 1, d = screw_head_diameter, center = false);\n            }\n        }\n        \n        // Mounting holes on bottom\n        for(x = [-width/3, 0, width/3]) {\n            for(y = [-depth/3, 0, depth/3]) {\n                if(!(x == 0 && y == 0)) {  // Skip center hole for structure\n                    translate([x + width/2, y + depth/2, height - wall_thickness])\n                        cylinder(h = wall_thickness + 1, d = screw_diameter, center = false);\n                }\n            }\n        }\n        \n        // Cable access slot on back\n        translate([width/2 - 15, -1, height/2])\n            rotate([0, 90, 0])\n                cylinder(h = 30, d = 8, center = true);\n    }\n    \n    // Reinforcement ribs inside\n    for(i = [1:3]) {\n        translate([i * width/4, wall_thickness, wall_thickness + height/2])\n            cube([wall_thickness, depth - 2*wall_thickness, height - 2*wall_thickness - 5]);\n    }\n    \n    // Grid pattern on top for grip\n    for(x = [grid_spacing:width - grid_spacing:grid_spacing]) {\n        translate([x, wall_thickness, height - grid_height/2])\n            cube([grid_width, depth - 2*wall_thickness, grid_height]);\n    }\n    for(y = [grid_spacing:depth - grid_spacing:grid_spacing]) {\n        translate([wall_thickness, y, height - grid_height/2])\n            cube([width - 2*wall_thickness, grid_width, grid_height]);\n    }\n    \n    // Identification label recess\n    translate([width/2 - 15, depth - wall_thickness - 10, height - 2])\n        cube([30, 8, 1]);\n}\n\nmodule rounded_box(w, d, h, r) {\n    hull() {\n        for(x = [r, w-r]) {\n            for(y = [r, d-r]) {\n                translate([x, y, 0])\n                    cylinder(h = h, r = r, center = false);\n            }\n        }\n    }\n}\n\n// Assembly - show the foundation box\nfoundation_box();",
    "renders": true
  },
  {
    "sports_equipment": "footing",
    "openscad_code": "// Furniture foot - realistic style, medium complexity\n// A sturdy tapered foot with mounting plate and decorative ring\n// Overall height 60mm, base diameter 35mm, suitable for small furniture\n\nmodule foot_body() {\n    // Main tapered body - slightly domed top, flared base\n    difference() {\n        // Outer tapered shape\n        cylinder(h = 50, r1 = 12, r2 = 17, $fn = 32);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 2])\n            cylinder(h = 46, r1 = 10, r2 = 15, $fn = 32);\n    }\n    \n    // Rounded top dome\n    translate([0, 0, 50])\n        scale([1, 1, 0.4])\n            sphere(r = 12, $fn = 32);\n}\n\nmodule mounting_plate() {\n    // Top mounting plate with screw holes\n    difference() {\n        // Plate body\n        cylinder(h = 8, r = 15, $fn = 32);\n        \n        // Central hole for bolt access\n        cylinder(h = 10, r = 6, $fn = 32);\n        \n        // Three screw holes at 120 degree intervals\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([10, 0, -1])\n                    cylinder(h = 10, r = 2.2, $fn = 16);\n        }\n    }\n    \n    // Counterbore for screw heads\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([10, 0, -1])\n                cylinder(h = 4, r = 4, $fn = 16);\n    }\n}\n\nmodule decorative_ring() {\n    // Decorative ring around upper body\n    difference() {\n        // Outer ring\n        cylinder(h = 6, r = 19, $fn = 64);\n        \n        // Inner cutout\n        cylinder(h = 8, r = 17.5, $fn = 64);\n    }\n}\n\nmodule grip_texture() {\n    // Vertical grip ribs around lower section\n    for(i = [0:35]) {\n        rotate([0, 0, i * 10])\n            translate([16.5, 0, 0])\n                cube([3, 1.5, 25], center = true);\n    }\n}\n\nmodule base_pad() {\n    // Anti-slip base pad\n    difference() {\n        // Main pad\n        cylinder(h = 4, r = 17.5, $fn = 32);\n        \n        // Relief pattern for flexibility\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([9, 0, -1])\n                    cube([18, 2, 6], center = true);\n        }\n    }\n}\n\n// Assemble the foot\nunion() {\n    // Mounting plate on top\n    translate([0, 0, 58])\n        mounting_plate();\n    \n    // Decorative ring\n    translate([0, 0, 42])\n        decorative_ring();\n    \n    // Main body\n    foot_body();\n    \n    // Grip texture on lower section\n    translate([0, 0, 10])\n        grip_texture();\n    \n    // Base pad\n    base_pad();\n}",
    "renders": true
  },
  {
    "sports_equipment": "pier",
    "openscad_code": "// Pier Bench - 3D printable medium-complexity OpenSCAD model\n// Dimensions: 120 x 40 x 35 mm (length x width x height)\n\n// Parameters\nbench_length = 120;\nbench_width = 40;\nbench_height = 35;\nleg_height = 32;\nleg_thickness = 4;\nseat_thickness = 3;\nback_height = 15;\nback_thickness = 2;\nslat_width = 8;\nslat_gap = 2;\nsupport_radius = 2;\n\n// Main assembly\nmodule pier_bench() {\n    union() {\n        // Seat slats\n        seat_assembly();\n        \n        // Leg frames\n        translate([bench_length/2 - 5, 0, 0]) leg_frame();\n        translate([-bench_length/2 + 5, 0, 0]) leg_frame();\n        \n        // Backrest\n        back_assembly();\n        \n        // Support braces\n        translate([0, bench_width/2 - 2, leg_height/2 + 5]) support_brace();\n        translate([0, -bench_width/2 + 2, leg_height/2 + 5]) support_brace();\n    }\n}\n\n// Seat with slats\nmodule seat_assembly() {\n    for(i = [0:6]) {\n        translate([-bench_length/2 + i*(slat_width + slat_gap) + slat_width/2, 0, leg_height + seat_thickness/2]) {\n            cube([slat_width, bench_width, seat_thickness], center=true);\n        }\n    }\n}\n\n// Leg frame structure\nmodule leg_frame() {\n    difference() {\n        union() {\n            // Front leg\n            cube([leg_thickness, bench_width - 4, leg_height], center=true);\n            \n            // Back leg\n            translate([0, 0, 0]) {\n                rotate([15, 0, 0]) {\n                    cube([leg_thickness, bench_width - 4, leg_height], center=true);\n                }\n            }\n            \n            // Top connector\n            translate([0, 0, leg_height - leg_thickness/2]) {\n                rotate([90, 0, 0]) {\n                    cube([leg_thickness, bench_width - 4, leg_thickness], center=true);\n                }\n            }\n            \n            // Bottom connector\n            translate([0, 0, leg_thickness/2]) {\n                rotate([90, 0, 0]) {\n                    cube([leg_thickness, bench_width - 4, leg_thickness], center=true);\n                }\n            }\n        }\n        \n        // Lightening holes\n        translate([0, 0, leg_height/2]) {\n            cylinder(h=leg_thickness+1, r=3, center=true);\n        }\n    }\n}\n\n// Backrest assembly\nmodule back_assembly() {\n    // Back posts\n    translate([bench_length/2 - 8, bench_width/2 - 3, leg_height + seat_thickness + back_height/2]) {\n        cube([back_thickness*2, back_thickness*2, back_height], center=true);\n    }\n    translate([bench_length/2 - 8, -bench_width/2 + 3, leg_height + seat_thickness + back_height/2]) {\n        cube([back_thickness*2, back_thickness*2, back_height], center=true);\n    }\n    translate([-bench_length/2 + 8, bench_width/2 - 3, leg_height + seat_thickness + back_height/2]) {\n        cube([back_thickness*2, back_thickness*2, back_height], center=true);\n    }\n    translate([-bench_length/2 + 8, -bench_width/2 + 3, leg_height + seat_thickness + back_height/2]) {\n        cube([back_thickness*2, back_thickness*2, back_height], center=true);\n    }\n    \n    // Back slats\n    for(i = [0:4]) {\n        translate([-bench_length/2 + 12 + i*(bench_length-24)/4, 0, leg_height + seat_thickness + back_height - 3]) {\n            cube([(bench_length-24)/4 - 2, bench_width - 6, back_thickness], center=true);\n        }\n    }\n}\n\n// Diagonal support braces\nmodule support_brace() {\n    rotate([0, 45, 0]) {\n        cylinder(h=bench_width/2, r=support_radius, center=true);\n    }\n}\n\n// Render the bench\npier_bench();",
    "renders": true
  },
  {
    "sports_equipment": "beamform",
    "openscad_code": "// Beamform Stool - Realistic Style\n// Overall dimensions: 120mm diameter x 450mm height\n\n// Parameters\nseat_diameter = 120;\nseat_thickness = 8;\nleg_length = 380;\nleg_diameter = 20;\nfoot_diameter = 30;\nfoot_height = 5;\nstretcher_height = 200;\nstretcher_diameter = 15;\n\nmodule stool_assembly() {\n    union() {\n        // Seat - solid cylinder with rounded edges\n        difference() {\n            cylinder(h=seat_thickness, d=seat_diameter, $fn=60);\n            translate([0, 0, -0.1])\n                cylinder(h=seat_thickness+0.2, d=seat_diameter-4, $fn=60);\n        }\n        \n        // Leg mounts - 4 legs at 45 degree positions\n        for (i = [0:3]) {\n            rotate([0, 0, i*90+45])\n                translate([seat_diameter/2 - leg_diameter/2 - 10, 0, -leg_length/2 - seat_thickness/2])\n                    cylinder(h=leg_length, d=leg_diameter, $fn=20);\n        }\n        \n        // Stretchers between legs - lower ring\n        for (i = [0:3]) {\n            rotate([0, 0, i*90+45])\n                translate([seat_diameter/2 - leg_diameter/2 - 10, 0, -stretcher_height])\n                rotate([90, 0, 0])\n                    cylinder(h=seat_diameter*0.6, d=stretcher_diameter, $fn=20);\n        }\n        \n        // Feet - wider bases for stability\n        for (i = [0:3]) {\n            rotate([0, 0, i*90+45])\n                translate([seat_diameter/2 - leg_diameter/2 - 10, 0, -leg_length - seat_thickness/2])\n                    cylinder(h=foot_height, d=foot_diameter, $fn=30);\n        }\n        \n        // Center support column for additional stability\n        translate([0, 0, -leg_length/2 - seat_thickness/2])\n            cylinder(h=leg_length, d=stretcher_diameter*1.5, $fn=20);\n    }\n}\n\n// Main stool\nstool_assembly();",
    "renders": true
  },
  {
    "sports_equipment": "shoring",
    "openscad_code": "// Shoring Furniture (Adjustable Sawhorse / Support Stand)\n// Overall dimensions: ~120mm height, 80mm width, 100mm depth\n\n// Parameters\n$fn = 32;\nwall = 2;\npost_r = 4;\npost_h = 100;\nbase_w = 80;\nbase_d = 100;\ntop_w = 70;\ntop_d = 90;\n\n// Main module\nmodule shoring() {\n    // Base frame\n    difference() {\n        // Base outer frame\n        cube([base_w, base_d, wall], center=true);\n        // Cutout center\n        translate([0, 0, -wall/2 - 0.1])\n            cube([base_w - wall*2, base_d - wall*2, wall + 0.2], center=true);\n    }\n    \n    // Top support frame\n    translate([0, 0, post_h])\n    difference() {\n        // Top frame\n        cube([top_w, top_d, wall], center=true);\n        // Cutout center\n        translate([0, 0, -wall/2 - 0.1])\n            cube([top_w - wall*2, top_d - wall*2, wall + 0.2], center=true);\n    }\n    \n    // Vertical support posts at corners\n    module post(x, y) {\n        translate([x, y, 0])\n            cylinder(h = post_h, r = post_r, center=false);\n    }\n    \n    // Corner posts\n    post(base_w/2 - post_r, base_d/2 - post_r);\n    post(-base_w/2 + post_r, base_d/2 - post_r);\n    post(base_w/2 - post_r, -base_d/2 + post_r);\n    post(-base_w/2 + post_r, -base_d/2 + post_r);\n    \n    // Diagonal bracing\n    module brace(x1, y1, x2, y2, z) {\n        hull() {\n            translate([x1, y1, z])\n                sphere(r = post_r/2);\n            translate([x2, y2, z + 20])\n                sphere(r = post_r/2);\n        }\n    }\n    \n    // Add diagonal braces between posts\n    brace(base_w/2 - post_r, base_d/2 - post_r, -base_w/2 + post_r, base_d/2 - post_r, 20);\n    brace(-base_w/2 + post_r, base_d/2 - post_r, -base_w/2 + post_r, -base_d/2 + post_r, 40);\n    brace(base_w/2 - post_r, -base_d/2 + post_r, base_w/2 - post_r, base_d/2 - post_r, 60);\n    brace(-base_w/2 + post_r, -base_d/2 + post_r, base_w/2 - post_r, -base_d/2 + post_r, 30);\n    \n    // Adjustable height support holes (peg holes)\n    for (i = [1:4:25]) {\n        translate([0, base_d/2 - post_r - 5, i * 4])\n            rotate([90, 0, 0])\n                cylinder(h = wall*2, r = 1.5, center=true);\n    }\n    \n    // Grip texture on top surface\n    module grip_line(y) {\n        translate([0, y, post_h + wall/2 + 0.1])\n            cube([top_w - wall*4, 0.5, 0.5], center=true);\n    }\n    \n    for (y = [-top_d/2 + wall*2 : 2 : top_d/2 - wall*2]) {\n        grip_line(y);\n    }\n    \n    // Reinforcement gussets at joints\n    module gusset(x, y) {\n        translate([x, y, post_r])\n            rotate([0, 45, 0])\n                cube([wall*2, wall*2, post_r*2], center=true);\n    }\n    \n    gusset(base_w/2 - post_r, base_d/2 - post_r);\n    gusset(-base_w/2 + post_r, base_d/2 - post_r);\n    gusset(base_w/2 - post_r, -base_d/2 + post_r);\n    gusset(-base_w/2 + post_r, -base_d/2 + post_r);\n}\n\n// Render the shoring\nshoring();",
    "renders": true
  },
  {
    "sports_equipment": "bracing",
    "openscad_code": "// Furniture L-brace corner bracket\n// Overall size: 80 mm x 80 mm x 25 mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Outer dimensions\nL = 80;\nH = 80;\nT = 25;\n\n// Screw holes\nscrew_d = 5;\nscrew_head_d = 9;\nscrew_head_h = 3;\nscrew_space = 15;\n\n// Ribs\nrib_h = 2;\nrib_count = 3;\n\n// Grip texture parameters\ngrip_w = 1;\ngrip_d = 0.5;\ngrip_pitch = 3;\n\nmodule main_body() {\n    difference() {\n        // Main L-shaped block\n        union() {\n            cube([L, T, H]);\n            translate([0, 0, 0]) cube([T, L, H]);\n        }\n        \n        // Internal cavity\n        translate([wall, wall, wall])\n        cube([L - wall, T - 2*wall, H - 2*wall]);\n        \n        translate([wall, wall, wall])\n        cube([T - 2*wall, L - wall, H - 2*wall]);\n        \n        // Chamfer inside corner\n        translate([wall, wall, wall])\n        rotate([0, 0, 45])\n        cube([sqrt(2)*wall*1.5, sqrt(2)*wall*1.5, H - 2*wall]);\n    }\n}\n\nmodule screw_holes() {\n    // Bottom arm holes\n    for (x = [screw_space, L - screw_space]) {\n        translate([x, T/2, screw_space])\n        rotate([90, 0, 0])\n        cylinder(h = T, d = screw_d, $fn = 20);\n        \n        translate([x, T/2, screw_space])\n        rotate([90, 0, 0])\n        cylinder(h = screw_head_h + 1, d = screw_head_d, $fn = 20);\n    }\n    \n    // Vertical arm holes\n    for (z = [screw_space, H - screw_space]) {\n        translate([screw_space, T/2, z])\n        rotate([0, 90, 0])\n        cylinder(h = T, d = screw_d, $fn = 20);\n        \n        translate([screw_space, T/2, z])\n        rotate([0, 90, 0])\n        cylinder(h = screw_head_h + 1, d = screw_head_d, $fn = 20);\n    }\n}\n\nmodule ribs() {\n    // Horizontal ribs on vertical face\n    for (i = [1 : rib_count - 1]) {\n        translate([wall, wall, i * (H - 2*wall) / rib_count])\n        cube([T - 2*wall, L - 2*wall, rib_h]);\n    }\n    \n    // Vertical ribs on bottom face\n    for (i = [1 : rib_count - 1]) {\n        translate([i * (L - 2*wall) / rib_count, wall, wall])\n        cube([rib_h, T - 2*wall, H - 2*wall]);\n    }\n}\n\nmodule grip_texture() {\n    // Texture on outer faces\n    // Bottom face\n    for (x = [grip_pitch : grip_pitch : L - 2*wall]) {\n        translate([x, T - grip_d, wall])\n        cube([grip_w, grip_d, H - 2*wall]);\n    }\n    \n    // Vertical face\n    for (z = [grip_pitch : grip_pitch : H - 2*wall]) {\n        translate([T - grip_d, wall, z])\n        cube([grip_d, L - 2*wall, grip_w]);\n    }\n}\n\n// Assemble the brace\nunion() {\n    main_body();\n    ribs();\n    grip_texture();\n    screw_holes();\n}",
    "renders": true
  },
  {
    "sports_equipment": "screed",
    "openscad_code": "$fa = 1;\n$fs = 0.5;\n\n// overall dimensions\nlength = 100;\nwidth = 20;\ndepth = 5;\n\n// wall thickness\nwall = 2;\n\n// handle geometry\nhandle_len = 30;\nhandle_d = 8;\n\n// grip ring ribs\nrib_w = 1.5;\nrib_h = 0.8;\nrib_gap = 3;\nrib_num = floor(handle_len / (rib_w + rib_gap));\n\n// edge radius\nedge_r = 2;\n\nmodule screed_body() {\n    difference() {\n        // main plate\n        translate([0, 0, depth/2])\n            minkowski() {\n                cube([length, width, depth], center = true);\n                cylinder(r = edge_r, h = 0.01, center = true);\n            }\n\n        // inner hollow\n        translate([0, 0, depth/2 + 0.01])\n            cube([length - 2*wall, width - 2*wall, depth + 0.02], center = true);\n    }\n}\n\nmodule handle() {\n    difference() {\n        // main handle tube\n        translate([-handle_len/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = handle_len, d = handle_d, center = true);\n\n        // inner hole\n        translate([-handle_len/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = handle_len + 0.02, d = handle_d - 2*wall, center = true);\n    }\n}\n\nmodule grip_rings() {\n    for (i = [0 : rib_num - 1]) {\n        translate([-handle_len/2 + rib_w/2 + i*(rib_w + rib_gap), 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = rib_w, d = handle_d + 2*rib_h, center = true);\n    }\n}\n\nmodule joint_block() {\n    // connector block between plate and handle\n    difference() {\n        union() {\n            translate([length/2 - wall, 0, -depth/2 - handle_d/2 - 1])\n                cube([wall*2, handle_d, handle_d + 1], center = true);\n            translate([length/2 - wall, 0, -depth/2 - handle_d/2 - 1])\n                rotate([0, 45, 0])\n                    cube([wall*sqrt(2), handle_d, wall*sqrt(2)], center = true);\n        }\n        // screw hole for optional attachment\n        translate([length/2 + 2, 0, -depth/2 - handle_d/2 - 1])\n            rotate([0, 0, 90])\n                cylinder(h = 5, d = 3, center = true);\n    }\n}\n\n// assembly\nunion() {\n    screed_body();\n    handle();\n    grip_rings();\n    joint_block();\n    // mirror handle for two-handed version\n    mirror([1, 0, 0]) {\n        handle();\n        grip_rings();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "float",
    "openscad_code": "// Realistic Pool Float Furniture - Inflatable Lounger\n// Dimensions: 120mm x 60mm x 30mm (printable size)\n\n// Main parameters\nwall_thickness = 2;\noverall_length = 120;\noverall_width = 60;\noverall_height = 30;\n\n// Create the main float body\nmodule float_body() {\n    // Main inflatable chamber\n    difference() {\n        // Outer rounded shape\n        hull() {\n            // Front rounded end\n            translate([overall_length/2 - overall_width/2, 0, 0])\n                scale([overall_width/2, overall_width/2, overall_height/2])\n                    sphere(d=1, $fn=30);\n            \n            // Rear rounded end\n            translate([-overall_length/2 + overall_width/2, 0, 0])\n                scale([overall_width/2, overall_width/2, overall_height/2])\n                    sphere(d=1, $fn=30);\n            \n            // Central section\n            translate([0, 0, 0])\n                cube([overall_length - overall_width, overall_width, overall_height], center=true);\n        }\n        \n        // Hollow out the interior\n        scale([0.93, 0.93, 0.86])\n            hull() {\n                translate([overall_length/2 - overall_width/2, 0, 0])\n                    scale([overall_width/2, overall_width/2, overall_height/2])\n                        sphere(d=1, $fn=30);\n                \n                translate([-overall_length/2 + overall_width/2, 0, 0])\n                    scale([overall_width/2, overall_width/2, overall_height/2])\n                        sphere(d=1, $fn=30);\n                \n                translate([0, 0, 0])\n                    cube([overall_length - overall_width, overall_width, overall_height], center=true);\n            }\n    }\n}\n\n// Headrest with ergonomic curve\nmodule headrest() {\n    translate([-overall_length/2 + 10, 0, overall_height/2]) {\n        difference() {\n            // Curved headrest shape\n            scale([20, overall_width - 10, 15])\n                sphere(d=1, $fn=30);\n            \n            // Hollow interior\n            scale([0.85, 0.85, 0.7])\n                translate([0, 0, 0])\n                    scale([20, overall_width - 10, 15])\n                        sphere(d=1, $fn=30);\n        }\n    }\n}\n\n// Side handles for carrying\nmodule handles() {\n    for(side = [-1, 1]) {\n        translate([0, side * (overall_width/2 - 5), 0]) {\n            // Handle base\n            cube([60, 8, 8], center=true);\n            \n            // Handle grip holes\n            for(i = [-1, 1]) {\n                translate([i * 20, side * 4, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=10, r=3, center=true);\n            }\n        }\n    }\n}\n\n// Inflation valve detail\nmodule valve() {\n    translate([overall_length/2 - 15, 0, overall_height/2 + 2]) {\n        // Valve base\n        cylinder(h=4, r=6, $fn=20);\n        \n        // Valve cap\n        translate([0, 0, 4])\n            cylinder(h=2, r=5, $fn=20);\n        \n        // Valve stem\n        translate([0, 0, -2])\n            cylinder(h=2, r=3, $fn=20);\n    }\n}\n\n// Textured surface pattern for grip\nmodule surface_texture() {\n    // Top surface texture\n    translate([0, 0, overall_height/2 + 1]) {\n        for(x = [-overall_length/2 + 10:10:overall_length/2 - 10]) {\n            for(y = [-overall_width/2 + 5:5:overall_width/2 - 5]) {\n                translate([x, y, 0])\n                    cube([3, 3, 0.5], center=true);\n            }\n        }\n    }\n    \n    // Bottom surface texture\n    translate([0, 0, -overall_height/2 - 0.5]) {\n        for(x = [-overall_length/2 + 10:15:overall_length/2 - 10]) {\n            for(y = [-overall_width/2 + 5:8:overall_width/2 - 5]) {\n                translate([x, y, 0])\n                    cube([5, 1, 1], center=true);\n            }\n        }\n    }\n}\n\n// Cup holder recess\nmodule cup_holder() {\n    translate([overall_length/4, 0, overall_height/2 - 5]) {\n        difference() {\n            // Raised cup holder rim\n            cylinder(h=3, r=12, $fn=30);\n            \n            // Cup recess\n            translate([0, 0, -2])\n                cylinder(h=5, r=10, $fn=30);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Main float components\n    float_body();\n    headrest();\n    \n    // Furniture features\n    valve();\n    cup_holder();\n    \n    // Add handles as separate printable parts\n    %handles();\n    \n    // Add surface texture\n    surface_texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "tamp",
    "openscad_code": "// Tamp furniture - Realistic style, medium complexity\n// A coffee tamp with ergonomic handle and base for countertop storage\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Overall dimensions\nbase_diameter = 60;\nbase_height = 15;\ntamp_diameter = 58;\ntamp_height = 25;\nhandle_length = 80;\nhandle_diameter = 30;\n\n// Furniture-specific proportions\nmodule tamp_stand() {\n    // Base platform with rounded edges\n    difference() {\n        // Main base cylinder\n        cylinder(h=base_height, d=base_diameter);\n        \n        // Recess for tamp head (2mm wall thickness)\n        translate([0, 0, 5])\n            cylinder(h=base_height, d=tamp_diameter-4);\n        \n        // Drainage channels\n        for (i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([base_diameter/2 - 5, 0, 0])\n                    cube([10, 3, base_height], center=true);\n        }\n    }\n    \n    // Decorative ring detail\n    translate([0, 0, base_height - 3])\n        cylinder(h=3, d=base_diameter + 2);\n}\n\nmodule ergonomic_handle() {\n    // Main handle body - tapered for grip\n    hull() {\n        // Top grip section\n        translate([0, 0, handle_length - 10])\n            sphere(d=handle_diameter - 5);\n            \n        // Bottom transition\n        translate([0, 0, 0])\n            sphere(d=handle_diameter);\n    }\n    \n    // Grip texture rings\n    for (i = [10:10:handle_length - 15]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(h=2, d=handle_diameter + 1);\n                cylinder(h=3, d=handle_diameter - 2);\n            }\n    }\n}\n\nmodule tamp_head() {\n    // Flat tamping surface\n    difference() {\n        cylinder(h=tamp_height, d=tamp_diameter);\n        \n        // Slight convex curve for better tamping\n        translate([0, 0, tamp_height - 2])\n            sphere(d=tamp_diameter + 10);\n    }\n    \n    // Connection to handle\n    translate([0, 0, tamp_height])\n        cylinder(h=8, d=handle_diameter - 5);\n}\n\n// Assembly\nunion() {\n    // Tamp head\n    translate([0, 0, base_height + 5])\n        tamp_head();\n    \n    // Handle\n    translate([0, 0, base_height + 5 + tamp_height + 8])\n        rotate([180, 0, 0])\n            ergonomic_handle();\n    \n    // Storage base/stand\n    tamp_stand();\n}\n\n// Anti-slip pads on base\nfor (i = [0:90:270]) {\n    rotate([0, 0, i])\n        translate([base_diameter/2 - 8, 0, 0])\n            cylinder(h=2, d=4);\n}",
    "renders": true
  },
  {
    "sports_equipment": "rammer",
    "openscad_code": "// Rammer (Tamper) - Furniture for soil compaction\n// Overall size: 120mm tall, 50mm wide, 30mm deep\n\n$fn = 30;\n\nmodule handle() {\n    // Main handle shaft - 2mm wall thickness hollow cylinder\n    difference() {\n        cylinder(h = 80, d1 = 20, d2 = 18);\n        translate([0, 0, 2])\n            cylinder(h = 76, d1 = 16, d2 = 14);\n    }\n    \n    // Grip texture - raised rings\n    for(i = [0:8]) {\n        translate([0, 0, 10 + i * 8])\n            rotate([0, 0, 0])\n            cylinder(h = 2, d = 22);\n    }\n}\n\nmodule head() {\n    // Main compaction plate - 50x30mm base with 2mm walls\n    difference() {\n        cube([50, 30, 15], center = true);\n        translate([0, 0, 2])\n            cube([46, 26, 11], center = true);\n    }\n    \n    // Reinforcement ribs on bottom\n    for(x = [-20:10:20]) {\n        translate([x, 0, -7.5])\n            cube([8, 28, 1]);\n    }\n    \n    // Side reinforcements\n    difference() {\n        translate([0, 0, 7.5])\n            cube([54, 34, 6], center = true);\n        translate([0, 0, 7.5])\n            cube([50, 30, 6], center = true);\n    }\n}\n\nmodule connection_joint() {\n    // Tapered connection between handle and head\n    difference() {\n        translate([0, 0, 0])\n            cylinder(h = 15, d1 = 18, d2 = 40);\n        translate([0, 0, 2])\n            cylinder(h = 11, d1 = 14, d2 = 36);\n    }\n    \n    // Structural gussets\n    for(angle = [0:120:240]) {\n        rotate([0, 0, angle])\n            translate([15, 0, 7.5])\n            cube([10, 2, 15], center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 40])\n    handle();\n\ntranslate([0, 0, 7.5])\n    connection_joint();\n\ntranslate([0, 0, -15])\n    head();",
    "renders": true
  },
  {
    "sports_equipment": "compactor",
    "openscad_code": "// Compactor furniture item - medium complexity realistic style\n// Wall-mounted fold-down compacting table with support arms\n\nwall_thickness = 2;\ntable_width = 80;\ntable_depth = 60;\ntable_thickness = 4;\nsupport_arm_length = 45;\nsupport_arm_width = 6;\nsupport_arm_thickness = 4;\nhinge_radius = 3;\nhinge_length = 12;\nmounting_plate_width = 70;\nmounting_plate_height = 20;\nmounting_plate_thickness = 3;\nleg_length = 25;\nleg_width = 4;\nleg_thickness = 4;\nstopper_height = 3;\nstopper_width = 8;\n\nmodule mounting_plate() {\n    difference() {\n        // Main plate\n        translate([-mounting_plate_width/2, 0, -mounting_plate_height/2])\n            cube([mounting_plate_width, mounting_plate_thickness, mounting_plate_height]);\n        \n        // Screw holes\n        for (y = [-mounting_plate_height/2 + 5, mounting_plate_height/2 - 5]) {\n            translate([-mounting_plate_width/2 + 10, 0, y])\n                rotate([0, 90, 0])\n                    cylinder(h=mounting_plate_thickness+1, r=2, center=true);\n            translate([mounting_plate_width/2 - 10, 0, y])\n                rotate([0, 90, 0])\n                    cylinder(h=mounting_plate_thickness+1, r=2, center=true);\n        }\n    }\n}\n\nmodule hinge() {\n    difference() {\n        cylinder(h=hinge_length, r=hinge_radius, center=true);\n        translate([0, -hinge_radius-1, 0])\n            cube([hinge_radius*2, hinge_radius*2+2, hinge_length+2], center=true);\n    }\n}\n\nmodule table_top() {\n    difference() {\n        // Main table surface\n        translate([-table_width/2, -table_depth, -table_thickness/2])\n            cube([table_width, table_depth, table_thickness]);\n        \n        // Lightening holes\n        for (x = [-table_width/2 + 15, 0, table_width/2 - 15]) {\n            for (y = [-table_depth + 15, -table_depth + 30]) {\n                translate([x, y, 0])\n                    cylinder(h=table_thickness+1, r=3, center=true);\n            }\n        }\n        \n        // Edge rounding simulation\n        translate([-table_width/2, -table_depth, -table_thickness/2-1])\n            cube([table_width, 2, table_thickness+2]);\n    }\n}\n\nmodule support_arm() {\n    union() {\n        // Main arm\n        translate([0, -support_arm_length/2, 0])\n            cube([support_arm_width, support_arm_length, support_arm_thickness], center=true);\n        \n        // Gusset for strength\n        translate([0, -support_arm_length + 5, -support_arm_thickness/2 - 2])\n            cube([support_arm_width, 10, 2]);\n        \n        // Hinge connection\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=support_arm_width+1, r=hinge_radius, center=true);\n    }\n}\n\nmodule folding_leg() {\n    union() {\n        // Leg\n        translate([0, -leg_length/2, 0])\n            cube([leg_width, leg_length, leg_thickness], center=true);\n        \n        // Foot pad\n        translate([0, -leg_length + 1, -leg_thickness/2 - 1])\n            cube([leg_width + 2, 2, 1]);\n    }\n}\n\nmodule stopper() {\n    translate([-stopper_width/2, -1, -stopper_height/2])\n        cube([stopper_width, wall_thickness, stopper_height]);\n}\n\n// Assembly\nunion() {\n    // Wall mounting plate\n    translate([0, 0, 0])\n        mounting_plate();\n    \n    // Left hinge\n    translate([-table_width/2 + 5, mounting_plate_thickness/2, 0])\n        rotate([0, 90, 0])\n            hinge();\n    \n    // Right hinge\n    translate([table_width/2 - 5, mounting_plate_thickness/2, 0])\n        rotate([0, 90, 0])\n            hinge();\n    \n    // Table top\n    translate([0, mounting_plate_thickness/2 + hinge_radius, 0])\n        rotate([90, 0, 0])\n            table_top();\n    \n    // Left support arm (folded position)\n    translate([-table_width/2 + 10, mounting_plate_thickness/2 + hinge_radius + table_thickness/2, 0])\n        rotate([90, 0, 0])\n            support_arm();\n    \n    // Right support arm (folded position)\n    translate([table_width/2 - 10, mounting_plate_thickness/2 + hinge_radius + table_thickness/2, 0])\n        rotate([90, 0, 0])\n            support_arm();\n    \n    // Left folding leg (stowed)\n    translate([-table_width/2 + 10, -table_depth + 5, -table_thickness/2 - leg_thickness/2])\n        rotate([90, 0, 0])\n            folding_leg();\n    \n    // Right folding leg (stowed)\n    translate([table_width/2 - 10, -table_depth + 5, -table_thickness/2 - leg_thickness/2])\n        rotate([90, 0, 0])\n            folding_leg();\n    \n    // Stoppers\n    translate([-table_width/2 - 5, mounting_plate_thickness/2, mounting_plate_height/2 - 5])\n        stopper();\n    translate([table_width/2 + 5 - stopper_width, mounting_plate_thickness/2, mounting_plate_height/2 - 5])\n        stopper();\n}",
    "renders": true
  },
  {
    "sports_equipment": "excavator",
    "openscad_code": "// Excavator Furniture - Medium Complexity Realistic Style\n// Dimensions: 120mm x 70mm x 95mm (L x W x H)\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body module\nmodule excavator_body() {\n    // Main chassis\n    difference() {\n        cube([80, 50, 30], center=true);\n        translate([0, 0, 15])\n            cube([76, 46, 26], center=true);\n    }\n    \n    // Operator cabin\n    translate([-15, 0, 15])\n    difference() {\n        cube([35, 40, 35], center=true);\n        // Window cutouts\n        translate([0, 20, 10])\n            cube([32, 2, 28], center=true);\n        translate([0, -20, 10])\n            cube([32, 2, 28], center=true);\n    }\n    \n    // Cabin roof\n    translate([-15, 0, 32.5])\n        cube([37, 42, 5], center=true);\n}\n\n// Track system\nmodule track_assembly(side) {\n    translate([0, side * 35, -10])\n    union() {\n        // Main track frame\n        cube([85, 15, 18], center=true);\n        \n        // Track pads\n        for(i = [-35:10:35]) {\n            translate([i, 0, -9])\n                cube([8, 17, 2], center=true);\n        }\n        \n        // Drive sprocket\n        translate([-40, 0, 0])\n            cylinder(h=15, r=7, center=true);\n    }\n}\n\n// Boom assembly\nmodule boom_assembly() {\n    // Boom base pivot\n    translate([40, 0, 15])\n    rotate([0, 0, 45])\n    union() {\n        // Boom base\n        difference() {\n            cube([15, 15, 15], center=true);\n            translate([0, 0, 7.5])\n                cube([11, 11, 11], center=true);\n        }\n        \n        // Boom arm\n        translate([15, 0, 0])\n        rotate([0, -30, 0])\n        union() {\n            // Main boom\n            cube([50, 10, 10], center=true);\n            \n            // Boom cylinder\n            translate([25, 0, -8])\n                cylinder(h=30, r=3, center=true);\n        }\n        \n        // Stick arm\n        translate([40, 0, -20])\n        rotate([0, 30, 0])\n        union() {\n            cube([40, 8, 8], center=true);\n            \n            // Bucket cylinder\n            translate([20, 0, -6])\n                cylinder(h=25, r=2.5, center=true);\n        }\n        \n        // Bucket\n        translate([60, 0, -30])\n        rotate([0, 60, 0])\n        difference() {\n            // Bucket body\n            union() {\n                cube([20, 12, 15], center=true);\n                translate([10, 0, -7.5])\n                    cube([10, 12, 15], center=true);\n            }\n            \n            // Bucket cavity\n            translate([5, 0, 0])\n                cube([18, 10, 11], center=true);\n        }\n    }\n}\n\n// Counterweight\nmodule counterweight() {\n    translate([-40, 0, 10])\n    difference() {\n        cube([25, 35, 25], center=true);\n        translate([-2, 0, 12.5])\n            cube([21, 31, 21], center=true);\n    }\n}\n\n// Engine compartment details\nmodule engine_details() {\n    translate([-25, 0, 15])\n    union() {\n        // Exhaust pipe\n        translate([0, 15, 15])\n            cylinder(h=25, r=3, center=true);\n            \n        // Hydraulic tank\n        translate([0, -10, 5])\n            cube([20, 15, 10], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    excavator_body();\n    track_assembly(1);\n    track_assembly(-1);\n    boom_assembly();\n    counterweight();\n    engine_details();\n    \n    // Stabilizer legs (furniture legs)\n    translate([30, 25, -18])\n        cylinder(h=15, r=5, center=true);\n    translate([30, -25, -18])\n        cylinder(h=15, r=5, center=true);\n    translate([-30, 25, -18])\n        cylinder(h=15, r=5, center=true);\n    translate([-30, -25, -18])\n        cylinder(h=15, r=5, center=true);\n}",
    "renders": true
  },
  {
    "sports_equipment": "bulldozer",
    "openscad_code": "// Bulldozer Furniture - Medium Complexity Realistic Style\n// A functional bookshelf shaped like a bulldozer\n\n// Overall scale factor for 3D printing - target 100mm length\nscale_factor = 0.5;\n\n// Main body dimensions\nbody_length = 100 * scale_factor;\nbody_width = 60 * scale_factor;\nbody_height = 40 * scale_factor;\nwall_thickness = 2 * scale_factor;\n\n// Track dimensions\ntrack_width = 8 * scale_factor;\ntrack_height = 6 * scale_factor;\nwheel_radius = 5 * scale_factor;\n\n// Blade dimensions\nblade_width = 70 * scale_factor;\nblade_height = 35 * scale_factor;\nblade_thickness = 3 * scale_factor;\n\n// Bookshelf cavity\nshelf_height = 30 * scale_factor;\nshelf_depth = 20 * scale_factor;\n\n// Module for creating rounded rectangles\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(x = [radius, size[0]-radius])\n            for(y = [radius, size[1]-radius])\n                for(z = [radius, size[2]-radius])\n                    translate([x,y,z]) sphere(r=radius);\n    }\n}\n\n// Main body structure with bookshelf cavity\nmodule bulldozer_body() {\n    difference() {\n        // Outer body shell\n        rounded_cube([body_length, body_width, body_height], wall_thickness);\n        \n        // Bookshelf cavity\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            rounded_cube([body_length-wall_thickness*2, body_width-wall_thickness*2, shelf_height], wall_thickness);\n        \n        // Front opening\n        translate([body_length-1, wall_thickness, wall_thickness])\n            cube([wall_thickness+1, body_width-wall_thickness*2, shelf_height]);\n    }\n    \n    // Bottom shelf for structural support\n    translate([wall_thickness, wall_thickness, wall_thickness + shelf_height/2])\n        rounded_cube([body_length-wall_thickness*2, body_width-wall_thickness*2, wall_thickness], wall_thickness);\n}\n\n// Track system with wheels\nmodule track_system() {\n    // Left track\n    translate([-track_width, body_width/2 + track_width/2, wheel_radius])\n        track_assembly();\n    \n    // Right track\n    translate([-track_width, -body_width/2 - track_width/2, wheel_radius])\n        track_assembly();\n}\n\nmodule track_assembly() {\n    union() {\n        // Track belt\n        difference() {\n            rounded_cube([body_length + 10*scale_factor, track_width, track_height], wall_thickness);\n            // Hollow out track\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                rounded_cube([body_length + 10*scale_factor - wall_thickness*2, track_width - wall_thickness*2, track_height - wall_thickness*2], wall_thickness);\n        }\n        \n        // Wheels\n        for(i = [0:2]) {\n            translate([i * (body_length/3) + 5*scale_factor, track_width/2, track_height/2 + wheel_radius])\n                rotate([90, 0, 0])\n                    cylinder(h=track_width, r=wheel_radius, center=true);\n            \n            translate([i * (body_length/3) + 5*scale_factor, track_width/2, track_height/2 - wheel_radius])\n                rotate([90, 0, 0])\n                    cylinder(h=track_width, r=wheel_radius, center=true);\n        }\n    }\n}\n\n// Bulldozer blade with bookshelf support\nmodule bulldozer_blade() {\n    union() {\n        // Main blade\n        translate([body_length + blade_thickness/2, 0, blade_height/2])\n            rounded_cube([blade_thickness, blade_width, blade_height], wall_thickness);\n        \n        // Blade supports\n        translate([body_length - 5*scale_factor, 0, blade_height/2])\n            rotate([0, 0, 45])\n                rounded_cube([15*scale_factor, wall_thickness*2, wall_thickness*2], wall_thickness);\n        \n        translate([body_length - 5*scale_factor, 0, blade_height/2])\n            rotate([0, 0, -45])\n                rounded_cube([15*scale_factor, wall_thickness*2, wall_thickness*2], wall_thickness);\n    }\n}\n\n// Cab detail with window opening\nmodule operator_cab() {\n    difference() {\n        // Cab structure\n        translate([body_length/3, 0, body_height + 15*scale_factor/2])\n            rounded_cube([body_length/2, body_width*0.8, 15*scale_factor], wall_thickness);\n        \n        // Window opening\n        translate([body_length/3 + wall_thickness, 0, body_height + 15*scale_factor/2])\n            rounded_cube([body_length/2 - wall_thickness*2, body_width*0.8 - wall_thickness*2, 15*scale_factor - wall_thickness*2], wall_thickness);\n    }\n}\n\n// Exhaust pipe\nmodule exhaust_pipe() {\n    translate([body_length/4, body_width/2 - wall_thickness, body_height + 15*scale_factor])\n        cylinder(h=10*scale_factor, r=wall_thickness, center=false);\n}\n\n// Assembly\nunion() {\n    bulldozer_body();\n    track_system();\n    bulldozer_blade();\n    operator_cab();\n    exhaust_pipe();\n}",
    "renders": true
  },
  {
    "sports_equipment": "loader",
    "openscad_code": "// Loader furniture - realistic style, medium complexity\n// Dimensions: ~120mm length, 80mm width, 80mm height\n// Wall thickness: 2mm throughout\n\n$fn = 32;\n\n// Main body frame\nmodule loader_body() {\n    // Base frame - hollow for 3D printing\n    difference() {\n        // Outer shell\n        cube([110, 75, 30], center=true);\n        // Hollow interior\n        translate([0, 0, 2])\n        cube([106, 71, 26], center=true);\n    }\n    \n    // Side walls with structural ribs\n    for(side = [-1, 1]) {\n        translate([0, side*35, 15])\n        difference() {\n            cube([108, 8, 30], center=true);\n            translate([0, 0, 2])\n            cube([104, 4, 26], center=true);\n        }\n    }\n}\n\n// Front loader arms\nmodule loader_arms() {\n    // Left arm\n    translate([-40, -25, 15])\n    rotate([0, 0, 15])\n    difference() {\n        cube([50, 8, 8], center=true);\n        translate([0, 0, 2])\n        cube([46, 4, 4], center=true);\n    }\n    \n    // Right arm\n    translate([-40, 25, 15])\n    rotate([0, 0, -15])\n    difference() {\n        cube([50, 8, 8], center=true);\n        translate([0, 0, 2])\n        cube([46, 4, 4], center=true);\n    }\n}\n\n// Loader bucket\nmodule loader_bucket() {\n    translate([-60, 0, 15])\n    union() {\n        // Main bucket shell\n        difference() {\n            // Outer curved bucket\n            translate([5, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=60, r1=25, r2=20);\n            \n            // Inner hollow\n            translate([7, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=56, r1=23, r2=18);\n            \n            // Cut back to create bucket shape\n            translate([0, 0, -20])\n            cube([40, 60, 40], center=true);\n        }\n        \n        // Bucket edge reinforcement\n        translate([10, 0, 25])\n        rotate([90, 0, 0])\n        cylinder(h=55, r1=2, r2=2);\n        \n        translate([10, 0, -25])\n        rotate([90, 0, 0])\n    cylinder(h=55, r1=2, r2=2);\n    }\n}\n\n// Support frame\nmodule support_frame() {\n    // Rear support\n    translate([45, 0, -5])\n    difference() {\n        cube([20, 70, 20], center=true);\n        translate([0, 0, 2])\n        cube([16, 66, 16], center=true);\n    }\n    \n    // Vertical supports\n    for(pos = [-25, 25]) {\n        translate([20, pos, -10])\n        difference() {\n            cube([8, 8, 40], center=true);\n            translate([0, 0, 2])\n            cube([4, 4, 36], center=true);\n        }\n    }\n}\n\n// Cabin structure\nmodule cabin() {\n    translate([15, 0, 25])\n    union() {\n        // Cabin base\n        difference() {\n            cube([40, 50, 35], center=true);\n            translate([0, 0, 2])\n            cube([36, 46, 31], center=true);\n        }\n        \n        // Roof\n        translate([0, 0, 20])\n        difference() {\n            cube([42, 52, 4], center=true);\n            translate([0, 0, 2])\n            cube([38, 48, 4], center=true);\n        }\n        \n        // Cabin pillars (4 corners)\n        for(x = [-15, 15])\n        for(y = [-20, 20]) {\n            translate([x, y, 10])\n            difference() {\n                cylinder(h=20, r=3);\n                translate([0, 0, 2])\n                cylinder(h=16, r=1);\n            }\n        }\n    }\n}\n\n// Wheels\nmodule wheels() {\n    for(side = [-1, 1]) {\n        for(pos = [-30, 30]) {\n            translate([pos, side*40, -15])\n            union() {\n                // Tire\n                difference() {\n                    cylinder(h=15, r=12, center=true);\n                    translate([0, 0, -6])\n                    cylinder(h=15, r=10, center=true);\n                }\n                \n                // Rim\n                color(\"silver\")\n                translate([0, 0, -7])\n                cylinder(h=4, r=8);\n                \n                // Hub\n                color(\"gray\")\n                translate([0, 0, -7])\n                cylinder(h=5, r=6);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    loader_body();\n    loader_arms();\n    loader_bucket();\n    support_frame();\n    cabin();\n    wheels();\n}",
    "renders": true
  },
  {
    "sports_equipment": "grader",
    "openscad_code": "// Grader furniture (construction-themed children's furniture)\n// A toy box styled as a construction grader with functional storage\n\n$fn = 32;  // Smooth curves for 3D printing\nwall_thickness = 2;  // Standard 3D printable wall thickness\nscale_factor = 1.2;  // Scale for 3D printing\n\n// Overall dimensions (scaled for furniture use)\nlength = 120 * scale_factor;\nwidth = 60 * scale_factor;\nheight = 45 * scale_factor;\n\n// Main body module - storage compartment\nmodule body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, height/2])\n                cube([length, width, height], center=true);\n            translate([0, 0, height/4])\n                cube([length*0.9, width*0.85, height*0.5], center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, height/2 + wall_thickness])\n            cube([length - 2*wall_thickness, width - 2*wall_thickness, height - wall_thickness], center=true);\n        \n        // Top opening for toy storage\n        translate([0, 0, height - wall_thickness])\n            cube([length*0.8, width*0.7, wall_thickness*2], center=true);\n    }\n}\n\n// Grader blade module - functional lid/seat\nmodule blade() {\n    // Blade assembly\n    translate([length/2 - 10, 0, height - 5])\n    rotate([0, 0, 0])\n    union() {\n        // Main blade\n        difference() {\n            translate([0, 0, 0])\n                cube([25, width*0.9, 8], center=true);\n            \n            // Blade curve\n            translate([5, 0, 2])\n                cube([15, width*0.7, 12], center=true);\n        }\n        \n        // Blade supports\n        for (y = [-width/3, 0, width/3]) {\n            translate([0, y, -4])\n                cube([5, 8, 8], center=true);\n        }\n    }\n}\n\n// Wheels module\nmodule wheel(radius, width, position) {\n    translate(position)\n    rotate([90, 0, 0])\n    difference() {\n        // Tire\n        cylinder(h=width, r=radius, center=true);\n        \n        // Hub cutout\n        cylinder(h=width+1, r=radius*0.4, center=true);\n    }\n}\n\n// Wheels assembly\nmodule wheels() {\n    // Rear wheels (dual)\n    for (x = [-length/3, -length/4]) {\n        for (y = [-width/2 - 8, width/2 + 8]) {\n            color(\"black\")\n            wheel(10, 6, [x, y, 10]);\n            \n            // Hub cap\n            color(\"gray\")\n            translate([x, y, 10])\n            rotate([90, 0, 0])\n            cylinder(h=1, r=4, center=true);\n        }\n    }\n    \n    // Front steering wheels\n    for (y = [-width/2 - 6, width/2 + 6]) {\n        color(\"black\")\n        wheel(8, 5, [length/3, y, 8]);\n        \n        // Hub cap\n        color(\"gray\")\n        translate([length/3, y, 8])\n        rotate([90, 0, 0])\n        cylinder(h=1, r=3, center=true);\n    }\n}\n\n// Cabin details\nmodule cabin() {\n    // Cabin structure\n    translate([-length/4, 0, height - 15])\n    difference() {\n        // Main cabin\n        cube([30, width*0.7, 20], center=true);\n        \n        // Windows\n        translate([5, 0, 5])\n            cube([10, width*0.5, 8], center=true);\n    }\n    \n    // Roof detail\n    translate([-length/4, 0, height + 5])\n        cube([32, width*0.6, 2], center=true);\n    \n    // Exhaust pipe\n    translate([-length/3, width/3, height - 5])\n        cylinder(h=15, r=2);\n}\n\n// Grader arm details\nmodule arm() {\n    // Main arm\n    translate([-length/4, 0, height - 10])\n    rotate([0, 0, -20])\n    cube([length/2, 6, 4], center=false);\n    \n    // Support braces\n    translate([0, width/4, height - 15])\n    rotate([0, 0, 45])\n    cube([20, 4, 4], center=false);\n    \n    translate([0, -width/4, height - 15])\n    rotate([0, 0, -45])\n    cube([20, 4, 4], center=false);\n}\n\n// Assembly\nunion() {\n    // Main body in construction yellow\n    color(\"yellow\")\n    body();\n    \n    // Grader blade\n    color(\"yellow\")\n    blade();\n    \n    // Cabin\n    color(\"yellow\")\n    cabin();\n    \n    // Structural arms\n    color(\"black\")\n    arm();\n    \n    // Wheels\n    wheels();\n    \n    // Safety edge rounding on top\n    color(\"yellow\")\n    translate([0, 0, height - 2])\n    cube([length*0.8, width*0.7, 4], center=true);\n}",
    "renders": true
  },
  {
    "sports_equipment": "paver",
    "openscad_code": "$fa = 1;\n$fs = 1;\n\n// Overall dimensions (mm)\npaver_len = 100;\npaver_wid = 50;\npaver_thk = 20;\nwall_thk  = 2;\n\nmodule paver_base() {\n    difference() {\n        // Main brick body\n        cube([paver_len, paver_wid, paver_thk], center = true);\n\n        // Central hollow cavity\n        translate([0, 0, wall_thk/2])\n            cube([paver_len - 2*wall_thk, paver_wid - 2*wall_thk, paver_thk], center = true);\n\n        // Drainage slots on top\n        for (x = [-40:20:40])\n            translate([x, 0, paver_thk/2 - 0.5])\n                cube([4, paver_wid - 6, 1], center = true);\n    }\n}\n\n// Connector nubs on top\nmodule top_nubs() {\n    for (x = [-30, 0, 30])\n        for (y = [-15, 0, 15])\n            translate([x, y, paver_thk/2])\n                cylinder(h = 3, r = 3, $fn = 12);\n}\n\n// Matching sockets underneath\nmodule bottom_sockets() {\n    for (x = [-30, 0, 30])\n        for (y = [-15, 0, 15])\n            translate([x, y, -paver_thk/2])\n                rotate([180, 0, 0])\n                    cylinder(h = 3.5, r = 3.2, $fn = 12);\n}\n\n// Corner chamfers for smoother printing\nmodule chamfers() {\n    union() {\n        // Top chamfers\n        translate([ paver_len/2 - 2,  paver_wid/2 - 2,  paver_thk/2])\n            cylinder(h = 4, r = 2, $fn = 8);\n        translate([-paver_len/2 + 2,  paver_wid/2 - 2,  paver_thk/2])\n            cylinder(h = 4, r = 2, $fn = 8);\n        translate([ paver_len/2 - 2, -paver_wid/2 + 2,  paver_thk/2])\n            cylinder(h = 4, r = 2, $fn = 8);\n        translate([-paver_len/2 + 2, -paver_wid/2 + 2,  paver_thk/2])\n            cylinder(h = 4, r = 2, $fn = 8);\n\n        // Bottom chamfers\n        translate([ paver_len/2 - 2,  paver_wid/2 - 2, -paver_thk/2])\n            cylinder(h = 4, r = 2, $fn = 8);\n        translate([-paver_len/2 + 2,  paver_wid/2 - 2, -paver_thk/2])\n            cylinder(h = 4, r = 2, $fn = 8);\n        translate([ paver_len/2 - 2, -paver_wid/2 + 2, -paver_thk/2])\n            cylinder(h = 4, r = 2, $fn = 8);\n        translate([-paver_len/2 + 2, -paver_wid/2 + 2, -paver_thk/2])\n            cylinder(h = 4, r = 2, $fn = 8);\n    }\n}\n\n// Grip texture on top surface\nmodule grip_texture() {\n    for (x = [-45:5:45])\n        for (y = [-22.5:5:22.5])\n            translate([x, y, paver_thk/2])\n                cube([1, 1, 0.5], center = true);\n}\n\n// Final assembly\nunion() {\n    paver_base();\n    top_nubs();\n    difference() {\n        cube([paver_len, paver_wid, paver_thk], center = true);\n        chamfers();\n    }\n    difference() {\n        translate([0, 0, -paver_thk/2 + 0.01])\n            cube([paver_len, paver_wid, paver_thk], center = true);\n        bottom_sockets();\n    }\n    grip_texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "roller",
    "openscad_code": "// Roller furniture - a rolling office chair base\n// Overall size: ~120mm diameter x 50mm high\n\n// Main parameters\n$fn = 50;\nwheel_diameter = 20;\nwheel_width = 8;\nwheel_count = 5;\narm_length = 40;\ncenter_hub_d = 25;\ncenter_hub_h = 15;\ncaster_pin_d = 10;\ncaster_pin_h = 20;\n\n// Main module\nmodule roller_base() {\n    // Center hub with mounting hole\n    difference() {\n        cylinder(d=center_hub_d, h=center_hub_h);\n        cylinder(d=10, h=center_hub_h + 1);\n    }\n    \n    // Caster mounting pin\n    translate([0, 0, center_hub_h]) {\n        cylinder(d=caster_pin_d, h=caster_pin_h);\n    }\n    \n    // Wheel arms\n    for(i = [0:wheel_count-1]) {\n        rotate([0, 0, i * 360/wheel_count]) {\n            // Arm structure\n            translate([arm_length/2, 0, center_hub_h/2]) {\n                cube([arm_length, 8, center_hub_h], center=true);\n            }\n            \n            // Caster fork\n            translate([arm_length, 0, 0]) {\n                // Fork arms\n                rotate([0, 90, 0]) {\n                    translate([0, -wheel_width/2 - 2, 0]) {\n                        cube([wheel_width/2 + 2, 4, 12]);\n                    }\n                    translate([0, wheel_width/2 + 2, 0]) {\n                        cube([wheel_width/2 + 2, 4, 12]);\n                    }\n                }\n                \n                // Wheel axle\n                rotate([0, 90, 0]) {\n                    translate([0, 0, -wheel_width/2 - 2]) {\n                        cylinder(d=3, h=wheel_width + 4);\n                    }\n                }\n                \n                // Wheel\n                translate([0, 0, -wheel_width/2]) {\n                    rotate([0, 90, 0]) {\n                        difference() {\n                            cylinder(d=wheel_diameter, h=wheel_width);\n                            // Tread pattern\n                            for(j = [0:7]) {\n                                rotate([0, 0, j * 45]) {\n                                    translate([wheel_diameter/2 - 1, -wheel_width/2 - 1, 0]) {\n                                        cube([2, wheel_width + 2, 2]);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Strengthening ribs between arms\n    for(i = [0:wheel_count-1]) {\n        rotate([0, 0, i * 360/wheel_count + 360/wheel_count/2]) {\n            translate([arm_length * 0.7, 0, center_hub_h/2]) {\n                cube([arm_length * 0.5, 6, center_hub_h * 0.7], center=true);\n            }\n        }\n    }\n}\n\n// Render the base\nroller_base();",
    "renders": true
  },
  {
    "sports_equipment": "breaker",
    "openscad_code": "// Breaker (Circuit Breaker) Furniture Item\n// Realistic style, medium complexity\n// Dimensions: 110mm x 70mm x 80mm\n\n// Main parameters\nwall_thickness = 2;\nbreaker_width = 110;\nbreaker_height = 70;\nbreaker_depth = 80;\n\n// Base enclosure\nmodule base_enclosure() {\n    difference() {\n        // Main box\n        cube([breaker_width, breaker_depth, breaker_height], center=false);\n        \n        // Hollow inside\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([breaker_width-wall_thickness*2, breaker_depth-wall_thickness*2, breaker_height-wall_thickness*2], center=false);\n    }\n}\n\n// Mounting rail\nmodule mounting_rail() {\n    translate([5, -2, 20])\n        cube([breaker_width-10, 4, 5]);\n}\n\n// DIN rail clips\nmodule din_clips() {\n    for(x = [15, breaker_width-25]) {\n        translate([x, -2, 10]) {\n            difference() {\n                cube([10, 4, 10]);\n                translate([2, -1, 2])\n                    cube([6, 6, 6]);\n            }\n        }\n    }\n}\n\n// Main switch lever\nmodule main_switch() {\n    translate([breaker_width/2-5, breaker_depth+2, breaker_height/2+5]) {\n        // Switch base\n        cube([10, 5, 15]);\n        \n        // Switch lever\n        translate([5, 3, 7.5]) {\n            rotate([0, 90, 0])\n                cylinder(h=20, d1=3, d2=6);\n        }\n    }\n}\n\n// Terminal screws\nmodule terminal_screw(x_pos) {\n    translate([x_pos, -3, 35]) {\n        // Screw head\n        cylinder(h=3, d=6, $fn=6);\n        \n        // Screw shaft\n        translate([0, -5, -2])\n            cylinder(h=8, d=3);\n    }\n}\n\n// Rating label\nmodule rating_label() {\n    translate([breaker_width/2-15, breaker_depth-wall_thickness-0.1, breaker_height/2-10]) {\n        cube([30, 0.5, 20]);\n    }\n}\n\n// Ventilation slots\nmodule ventilation_slots() {\n    for(y = [10:10:50]) {\n        translate([breaker_width-wall_thickness-0.1, y, 20]) {\n            cube([0.5, 8, 30]);\n        }\n    }\n}\n\n// Connection terminals\nmodule terminals() {\n    // Top terminals\n    for(x = [20, breaker_width-40]) {\n        translate([x, -wall_thickness-0.1, breaker_height-15]) {\n            cube([6, 2, 6]);\n        }\n    }\n    \n    // Bottom terminals\n    for(x = [20, breaker_width-40]) {\n        translate([x, -wall_thickness-0.1, 15]) {\n            cube([6, 2, 6]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    base_enclosure();\n    \n    // Mounting hardware\n    mounting_rail();\n    din_clips();\n    \n    // Switch mechanism\n    main_switch();\n    \n    // Connection points\n    terminals();\n    \n    // Details\n    rating_label();\n    ventilation_slots();\n    \n    // Terminal screws\n    terminal_screw(25);\n    terminal_screw(breaker_width-25);\n    terminal_screw(25);\n    terminal_screw(breaker_width-25);\n}",
    "renders": true
  },
  {
    "sports_equipment": "drill",
    "openscad_code": "// Furniture-style drill stand (realistic, medium complexity)\n\n$fn = 50;\n\n// Overall dimensions\ndrill_length = 120;\ndrill_diameter = 28;\nhandle_length = 80;\nhandle_diameter = 22;\nstand_base_height = 15;\nstand_base_width = 80;\nstand_base_depth = 60;\n\nmodule drill_body() {\n    // Main cylindrical body\n    rotate([0, 0, 0])\n    difference() {\n        cylinder(h = drill_length, d = drill_diameter, center = false);\n        \n        // Hollow interior for weight reduction\n        translate([0, 0, 5])\n        cylinder(h = drill_length - 10, d = drill_diameter - 4, center = false);\n    }\n    \n    // Chuck assembly at front\n    translate([0, 0, drill_length])\n    union() {\n        // Chuck body\n        cylinder(h = 15, d = 16, center = false);\n        \n        // Chuck teeth\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120])\n            translate([0, 5.5, 7.5])\n            cube([3, 4, 6], center = true);\n        }\n    }\n    \n    // Motor vent slots\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([drill_diameter/2 - 2, 0, drill_length/2])\n        cube([4, 3, 20], center = true);\n    }\n}\n\nmodule drill_handle() {\n    // Pistol grip handle\n    translate([-(handle_diameter/2 + 5), -handle_length/2, -15])\n    rotate([90, 0, 0])\n    difference() {\n        // Main grip\n        cylinder(h = handle_length, d = handle_diameter, center = true);\n        \n        // Grip texture grooves\n        for (i = [0:4]) {\n            translate([0, 0, -handle_length/2 + i * 15 + 10])\n            rotate([0, 90, 0])\n            cylinder(h = handle_diameter + 2, d = 2, center = true);\n        }\n    }\n    \n    // Trigger guard\n    translate([-(handle_diameter/2 + 8), -handle_length/2 + 20, -5])\n    difference() {\n        cube([8, 25, 12], center = false);\n        translate([2, 2, 2])\n        cube([4, 21, 8], center = false);\n    }\n}\n\nmodule battery_pack() {\n    // Rechargeable battery pack\n    translate([-(handle_diameter/2 + 5), -handle_length/2 - 20, -15])\n    rotate([90, 0, 0])\n    difference() {\n        cube([25, 40, 30], center = true);\n        \n        // Battery release button\n        translate([0, 0, -15])\n        cube([8, 5, 3], center = true);\n    }\n}\n\nmodule stand_base() {\n    // Furniture-style base with rounded edges\n    difference() {\n        // Main base platform\n        translate([0, 0, -stand_base_height/2])\n        minkowski() {\n            cube([stand_base_width, stand_base_depth, stand_base_height - 6], center = true);\n            cylinder(h = 0.1, d = 6, center = true);\n        }\n        \n        // Cable management hole\n        translate([0, 0, -stand_base_height/2])\n        cylinder(h = stand_base_height + 1, d = 12, center = true);\n        \n        // Weight reduction cavities\n        for (i = [-1:1]) {\n            for (j = [-1:1]) {\n                translate([i * 20, j * 15, -stand_base_height/2 + 2])\n                cube([12, 10, stand_base_height - 4], center = true);\n            }\n        }\n    }\n    \n    // Anti-slip pads\n    for (i = [-1, 1]) {\n        for (j = [-1, 1]) {\n            translate([i * 30, j * 22, -stand_base_height + 1])\n            cylinder(h = 2, d = 8, center = false);\n        }\n    }\n}\n\nmodule drill_stand() {\n    // Vertical support post\n    translate([0, 0, stand_base_height/2])\n    difference() {\n        cylinder(h = 70, d = 16, center = false);\n        cylinder(h = 70, d = 12, center = false);\n    }\n    \n    // Drill cradle/holder\n    translate([0, 0, stand_base_height/2 + 65])\n    difference() {\n        // Cradle base\n        cube([50, 35, 8], center = true);\n        \n        // Drill seat cavity\n        translate([0, 0, -2])\n        cylinder(h = 12, d = 32, center = true);\n        \n        // Cable routing slot\n        translate([25, 0, 0])\n        cube([10, 12, 20], center = true);\n    }\n    \n    // Support arms\n    rotate([0, 0, 45])\n    translate([0, 0, stand_base_height/2 + 40])\n    cube([5, 40, 5], center = true);\n    \n    rotate([0, 0, -45])\n    translate([0, 0, stand_base_height/2 + 40])\n    cube([5, 40, 5], center = true);\n}\n\n// Assembly\nunion() {\n    // Drill stand assembly\n    stand_base();\n    drill_stand();\n    \n    // Drill (positioned in stand)\n    translate([0, 0, stand_base_height/2 + 75])\n    rotate([90, 0, 0])\n    union() {\n        drill_body();\n        drill_handle();\n        battery_pack();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "saw",
    "openscad_code": "// OpenSCAD code for a realistic saw furniture item (decorative wall-mounted saw shelf)\n// Overall size: ~120 mm tall, ~60 mm wide, ~20 mm deep\n\n$fn = 50;  // Global smoothness for curved surfaces\n\n// Main module\nmodule sawShelf() {\n    // Main blade body\n    union() {\n        bladeBody();\n        handle();\n        mountingBracket();\n    }\n}\n\n// Blade body with teeth detail\nmodule bladeBody() {\n    // Main blade plate (2mm thick)\n    difference() {\n        // Blade plate\n        translate([0, 0, 9])\n            scale([0.6, 1, 0.02])\n                cube([100, 100, 100], center=true);\n        \n        // Cut slot for handle\n        translate([0, -30, 0])\n            cube([30, 60, 5], center=true);\n    }\n    \n    // Teeth details (simplified)\n    for (i = [-45:5:45]) {\n        translate([i*0.6, 48, 9])\n            rotate([0, 0, 30])\n                cube([2, 3, 2], center=true);\n    }\n    \n    // Blade spine reinforcement\n    translate([0, 0, 11])\n        scale([0.6, 0.1, 0.02])\n            cube([100, 100, 100], center=true);\n}\n\n// Ergonomic handle with grip texture\nmodule handle() {\n    // Main handle body\n    difference() {\n        // Handle core\n        rotate([0, 90, 0])\n            cylinder(h=40, r1=8, r2=6);\n        \n        // Grip grooves\n        for (i = [0:2:20]) {\n            rotate([0, 90, 0])\n                translate([i-10, 0, 0])\n                    cylinder(h=10, r1=8.5, r2=6.5);\n        }\n    }\n    \n    // Handle end cap\n    translate([0, -25, 0])\n        sphere(8);\n    \n    // Handle ferrule (metal band)\n    translate([0, 15, 0])\n        cylinder(h=5, r=9);\n}\n\n// Wall mounting bracket\nmodule mountingBracket() {\n    // Main bracket\n    translate([-20, 0, 10])\n        rotate([0, 90, 0])\n            difference() {\n                // Bracket body\n                cube([20, 40, 4], center=true);\n                \n                // Mounting holes\n                translate([0, 12, 0])\n                    cylinder(h=5, r=2);\n                translate([0, -12, 0])\n                    cylinder(h=5, r=2);\n            }\n    \n    // Shelf platform\n    translate([5, 25, 10])\n        cube([50, 10, 2]);\n    \n    // Support ribs\n    for (x = [-15:10:15]) {\n        translate([x, 30, 5])\n            cube([2, 10, 10]);\n    }\n}\n\n// Generate the model\nsawShelf();",
    "renders": true
  },
  {
    "sports_equipment": "router",
    "openscad_code": "// Router Furniture Item - Realistic Style with Medium Complexity\n// Dimensions: 120mm x 80mm x 45mm (realistic router body)\n\n// Module for creating rounded edges\nmodule rounded_cube(size, radius, center=false) {\n    translate([0, 0, center ? -size[2]/2 : 0])\n    minkowski() {\n        cube([size[0]-2*radius, size[1]-2*radius, size[2]-2*radius], center=true);\n        sphere(r=radius);\n    }\n}\n\n// Main router body\nmodule router_body() {\n    difference() {\n        // Main housing\n        rounded_cube([120, 80, 45], 6, true);\n        \n        // Cooling vents on top\n        for(i = [-40:10:40]) {\n            translate([i, 0, 20])\n            cube([8, 76, 5], center=true);\n        }\n        \n        // Side vents\n        for(i = [-15:8:15]) {\n            translate([60, i, 0])\n            rotate([0, 90, 0])\n            cube([5, 20, 3], center=true);\n        }\n    }\n}\n\n// Router base plate\nmodule base_plate() {\n    difference() {\n        // Main plate\n        translate([0, 0, -25])\n        rounded_cube([110, 70, 5], 3, true);\n        \n        // Central hole for bit\n        translate([0, 0, -27.5])\n        cylinder(h=10, r=15, center=true);\n        \n        // Adjustment slots\n        for(angle = [0:90:270]) {\n            rotate([0, 0, angle])\n            translate([35, 0, -27.5])\n            cube([30, 8, 10], center=true);\n        }\n    }\n}\n\n// Motor housing\nmodule motor_housing() {\n    translate([0, 0, 25])\n    difference() {\n        rounded_cube([90, 60, 35], 5, true);\n        \n        // Power cable entry\n        translate([-40, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=15, r=8, center=true);\n    }\n}\n\n// Handles\nmodule handles() {\n    // Left handle\n    translate([0, -50, 0])\n    rotate([0, 0, -15])\n    difference() {\n        rounded_cube([15, 60, 25], 3, true);\n        // Grip texture\n        for(i = [-20:5:20]) {\n            translate([0, i, 10])\n            cube([13, 3, 5], center=true);\n        }\n    }\n    \n    // Right handle\n    translate([0, 50, 0])\n    rotate([0, 0, 15])\n    difference() {\n        rounded_cube([15, 60, 25], 3, true);\n        // Grip texture\n        for(i = [-20:5:20]) {\n            translate([0, i, 10])\n            cube([13, 3, 5], center=true);\n        }\n    }\n}\n\n// Depth adjustment wheel\nmodule depth_wheel() {\n    translate([0, 0, -40])\n    difference() {\n        cylinder(h=10, r=20, center=true);\n        // Knurling pattern\n        for(i = [0:15:360]) {\n            rotate([0, 0, i])\n            translate([18, 0, 0])\n            cube([4, 2, 10], center=true);\n        }\n    }\n}\n\n// Bit collet\nmodule collet() {\n    translate([0, 0, -35])\n    difference() {\n        cylinder(h=15, r=12, center=true);\n        translate([0, 0, -5])\n        cylinder(h=25, r=6, center=true);\n    }\n}\n\n// Power switch\nmodule power_switch() {\n    translate([50, 0, 35])\n    difference() {\n        rounded_cube([20, 15, 8], 2, true);\n        translate([5, 0, 0])\n        cube([10, 11, 4], center=true);\n    }\n}\n\n// LED work light\nmodule work_light() {\n    translate([0, 35, -15])\n    difference() {\n        sphere(r=8);\n        translate([0, 0, -5])\n        sphere(r=6);\n    }\n}\n\n// Assembly\nunion() {\n    router_body();\n    base_plate();\n    motor_housing();\n    handles();\n    depth_wheel();\n    collet();\n    power_switch();\n    work_light();\n}",
    "renders": true
  },
  {
    "sports_equipment": "planer",
    "openscad_code": "$fn = 32;\n\n// Overall dimensions\nwidth = 80;\ndepth = 60;\nheight = 45;\n\n// Wall thickness\nwall = 2;\n\n// Main body\ndifference() {\n    cube([width, depth, height]);\n    translate([wall, wall, wall])\n        cube([width - 2*wall, depth - 2*wall, height - wall]);\n}\n\n// Top surface with planer bed\ndifference() {\n    translate([0, 0, height])\n        cube([width, depth, wall]);\n    translate([wall*3, wall*3, height])\n        cube([width - 6*wall, depth - 6*wall, wall]);\n}\n\n// Front handle\ntranslate([width/2 - 20, -5, height/2])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 40, r = 4);\n        translate([0, 0, wall])\n            cylinder(h = 40 - 2*wall, r = 4 - wall);\n    }\n\n// Rear handle\ntranslate([width/2 + 20, depth + 5, height/2])\n    rotate([0, -90, 0])\n    difference() {\n        cylinder(h = 40, r = 4);\n        translate([0, 0, wall])\n            cylinder(h = 40 - 2*wall, r = 4 - wall);\n    }\n\n// Side grips pattern\nmodule grip_pattern(x, y) {\n    for (i = [0:3]) {\n        translate([x + i*10, y, height/2])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 20, r = 2);\n                translate([0, 0, wall])\n                    cylinder(h = 20 - wall, r = 2 - wall);\n            }\n    }\n}\n\ngrip_pattern(5, 5);\ngrip_pattern(5, depth - 25);\n\n// Adjustment wheel\ntranslate([width + 5, depth/2, height/4])\n    difference() {\n        cylinder(h = 10, r = 8);\n        translate([0, 0, wall])\n            cylinder(h = 10 - wall, r = 8 - wall);\n        for (i = [0:5]) {\n            rotate([0, 0, i*60])\n                translate([0, 0, 5])\n                    cube([2, 6, 10], center = true);\n        }\n    }\n\n// Motor housing\ntranslate([width/4, depth/2, height/2])\n    difference() {\n        cube([width/2, depth/3, height/3]);\n        translate([wall, wall, wall])\n            cube([width/2 - 2*wall, depth/3 - 2*wall, height/3 - 2*wall]);\n    }\n\n// Exhaust port\ntranslate([width/2, depth - wall, height/2])\n    difference() {\n        cube([width/3, wall, height/4]);\n        translate([wall, 0, wall])\n            cube([width/3 - 2*wall, wall, height/4 - 2*wall]);\n    }\n\n// Support feet\nmodule foot(x, y) {\n    translate([x, y, -5])\n        difference() {\n            cylinder(h = 5, r = 3);\n            translate([0, 0, wall])\n                cylinder(h = 5 - wall, r = 3 - wall);\n        }\n}\n\nfoot(10, 10);\nfoot(width - 10, 10);\nfoot(10, depth - 10);\nfoot(width - 10, depth - 10);",
    "renders": true
  },
  {
    "sports_equipment": "sander",
    "openscad_code": "// Electric Belt Sander Furniture Item\n// Realistic style, medium complexity\n\n// Overall dimensions\nlength = 120;\nwidth = 70;\nheight = 80;\n\n// Wall thickness\nwall = 2;\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Main housing\n        translate([0, 0, height/2])\n            cube([length, width, height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, height/2])\n            cube([length-wall*2, width-wall*2, height-wall*2], center=true);\n        \n        // Belt opening - top\n        translate([0, width/4, height-wall])\n            cube([length*0.8, width/2, wall*2], center=true);\n        \n        // Belt opening - bottom\n        translate([0, -width/4, wall])\n            cube([length*0.8, width/2, wall*2], center=true);\n    }\n}\n\n// Motor housing\nmodule motor_housing() {\n    translate([-length/2 + 25, 0, height/4])\n        difference() {\n            cylinder(h=height/2, r=25, center=true);\n            cylinder(h=height/2 + 2, r=23, center=true);\n        }\n}\n\n// Handle grip\nmodule handle() {\n    translate([length/2 - 15, 0, height*0.7])\n    union() {\n        // Handle base\n        rotate([0, 90, 0])\n            cylinder(h=30, r=12, center=true);\n        \n        // Grip texture rings\n        for(i = [-10:5:10]) {\n            translate([i, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=1.5, r=13, center=true);\n        }\n    }\n}\n\n// Belt rollers\nmodule rollers() {\n    // Front roller\n    translate([length/2 - 10, 0, height/2])\n        cylinder(h=width-wall*2, r=10, center=true);\n    \n    // Rear roller\n    translate([-length/2 + 10, 0, height/2])\n        cylinder(h=width-wall*2, r=10, center=true);\n    \n    // Front roller support\n    translate([length/2 - 10, 0, height/2])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=wall, center=true);\n    \n    // Rear roller support\n    translate([-length/2 + 10, 0, height/2])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=wall, center=true);\n}\n\n// Sanding belt\nmodule belt() {\n    color(\"tan\")\n    translate([0, 0, height/2])\n        cube([length - 10, width - wall*4, 2], center=true);\n}\n\n// Power cord\nmodule power_cord() {\n    translate([-length/2 - 15, 0, height/4])\n    union() {\n        // Cord entry\n        cylinder(h=wall*2, r=wall, center=true);\n        \n        // Cord segments\n        for(i = [0:5:30]) {\n            translate([-i, 0, 0])\n                rotate([0, 0, i*5])\n                    cylinder(h=5, r=wall/2, center=true);\n        }\n    }\n}\n\n// Control switch\nmodule switch() {\n    translate([length/2 - 20, width/2 - wall, height*0.6])\n    union() {\n        // Switch housing\n        cube([15, wall*2, 8]);\n        \n        // Switch lever\n        translate([5, wall, 4])\n            cube([5, wall, 4]);\n    }\n}\n\n// Assembly\nmain_body();\nmotor_housing();\nhandle();\nrollers();\nbelt();\npower_cord();\nswitch();",
    "renders": true
  },
  {
    "sports_equipment": "welder",
    "openscad_code": "// Welder Workbench Cart\n// A realistic mobile welding workbench with storage shelves and gas bottle holder\n\n// Overall dimensions: 120mm(W) x 80mm(D) x 100mm(H)\n\n// Parameters\n$fa = 1;\n$fs = 0.4;\n\n// Main dimensions\nbase_w = 120;\nbase_d = 80;\nbase_h = 100;\nwall_t = 2;\nshelf_h = 30;\ncaster_d = 15;\n\n// Module for caster wheels\nmodule caster() {\n    // Wheel\n    rotate([90, 0, 0])\n    cylinder(h=caster_d, d=caster_d, $fn=20);\n    \n    // Mounting plate\n    translate([0, 0, caster_d/2])\n    cube([10, 10, wall_t], center=true);\n    \n    // Axle\n    translate([0, 0, caster_d/2])\n    rotate([0, 90, 0])\n    cylinder(h=12, d=3, center=true);\n}\n\n// Module for perforated shelf pattern\nmodule shelf_holes() {\n    for(x=[-40:10:40])\n        for(y=[-25:10:25])\n            translate([x, y, 0])\n            cylinder(h=wall_t+1, d=3);\n}\n\n// Main workbench frame\nmodule workbench_frame() {\n    // Base frame\n    difference() {\n        // Outer frame\n        cube([base_w, base_d, wall_t]);\n        \n        // Inner cutout for weight reduction\n        translate([wall_t, wall_t, -1])\n        cube([base_w-2*wall_t, base_d-2*wall_t, wall_t+2]);\n    }\n    \n    // Vertical posts at corners\n    for(x=[-1, 1])\n        for(y=[-1, 1])\n            translate([x*(base_w/2-wall_t/2), y*(base_d/2-wall_t/2), base_h/2])\n            cube([wall_t, wall_t, base_h], center=true);\n    \n    // Top frame\n    translate([0, 0, base_h-wall_t])\n    difference() {\n        cube([base_w, base_d, wall_t]);\n        translate([wall_t, wall_t, -1])\n        cube([base_w-2*wall_t, base_d-2*wall_t, wall_t+2]);\n    }\n}\n\n// Shelves\nmodule shelves() {\n    // Middle shelf\n    translate([0, 0, shelf_h])\n    difference() {\n        cube([base_w-2*wall_t-10, base_d-2*wall_t-10, wall_t], center=true);\n        shelf_holes();\n    }\n    \n    // Bottom shelf\n    translate([0, 0, wall_t])\n    difference() {\n        cube([base_w-2*wall_t-10, base_d-2*wall_t-10, wall_t], center=true);\n        shelf_holes();\n    }\n}\n\n// Gas bottle holder (cylindrical cage)\nmodule bottle_holder() {\n    // Base ring\n    translate([base_w/2-20, 0, base_h/2+20])\n    rotate([90, 0, 0])\n    cylinder(h=wall_t, d=30, center=true);\n    \n    // Vertical bars\n    for(angle=[0:45:315])\n        rotate([0, 0, angle])\n        translate([base_w/2-20, 15, 0])\n        cube([wall_t, 30, base_h/2]);\n    \n    // Top ring\n    translate([base_w/2-20, 0, base_h-5])\n    rotate([90, 0, 0])\n    cylinder(h=wall_t, d=30, center=true);\n}\n\n// Welding torch holder clips\nmodule torch_holders() {\n    // Left side holder\n    translate([-base_w/2+5, 0, base_h-20])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=15, d=10, center=true);\n        translate([0, 0, -6])\n        cylinder(h=12, d=6);\n    }\n    \n    // Right side holder\n    translate([base_w/2-5, 0, base_h-20])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=15, d=10, center=true);\n        translate([0, 0, -6])\n        cylinder(h=12, d=6);\n    }\n}\n\n// Caster wheels assembly\nmodule casters() {\n    // Front casters\n    translate([base_w/2-15, base_d/2-10, wall_t/2])\n    caster();\n    translate([-base_w/2+15, base_d/2-10, wall_t/2])\n    caster();\n    \n    // Rear casters (fixed)\n    translate([base_w/2-15, -base_d/2+10, wall_t/2])\n    caster();\n    translate([-base_w/2+15, -base_d/2+10, wall_t/2])\n    caster();\n}\n\n// Assembly\nunion() {\n    workbench_frame();\n    shelves();\n    bottle_holder();\n    torch_holders();\n    casters();\n}",
    "renders": true
  },
  {
    "sports_equipment": "torch",
    "openscad_code": "// Realistic Torch Furniture Item - Medium Complexity\n// Wall thickness: 2mm, Total height: 120mm\n\n$fn = 50;\n\n// Main module\nmodule torch() {\n    // Torch handle assembly\n    union() {\n        // Handle grip\n        handle_grip();\n        \n        // Fuel canister housing\n        fuel_canister();\n        \n        // Head assembly\n        torch_head();\n        \n        // Mounting bracket for furniture use\n        mounting_bracket();\n    }\n}\n\n// Handle grip with texture\nmodule handle_grip() {\n    difference() {\n        // Main handle cylinder\n        cylinder(h=70, d=25);\n        \n        // Grip rings - subtract for texture\n        for(i=[5:10:65]) {\n            translate([0, 0, i])\n                cylinder(h=2, d=23);\n        }\n    }\n    \n    // Bottom cap\n    translate([0, 0, -1])\n        cylinder(h=3, d=28);\n}\n\n// Fuel canister housing\nmodule fuel_canister() {\n    translate([0, 0, 70]) {\n        // Outer housing\n        difference() {\n            cylinder(h=25, d=30);\n            \n            // Inner cavity for fuel\n            cylinder(h=23, d=26);\n        }\n        \n        // Top rim\n        translate([0, 0, 25])\n            cylinder(h=3, d=32);\n    }\n}\n\n// Torch head with reflector\nmodule torch_head() {\n    translate([0, 0, 98]) {\n        // Reflector cone\n        difference() {\n            cylinder(h1=20, h2=15, r1=25, r2=20);\n            cylinder(h1=20, h2=15, r1=23, r2=18);\n        }\n        \n        // Lens\n        translate([0, 0, 15])\n            cylinder(h=2, d=40);\n        \n        // Protective cage\n        cage_bars();\n    }\n}\n\n// Protective cage around head\nmodule cage_bars() {\n    for(i=[0:30:359]) {\n        rotate([0, 0, i])\n            translate([22, 0, 10])\n                cylinder(h=20, d=2);\n    }\n}\n\n// Furniture mounting bracket\nmodule mounting_bracket() {\n    // Base plate\n    translate([0, -20, 35]) {\n        difference() {\n            cube([40, 10, 4], center=true);\n            // Mounting holes\n            for(x=[-15:30:15]) {\n                translate([x, 0, -1])\n                    cylinder(h=6, d=3);\n            }\n        }\n        \n        // Support arms\n        translate([-15, 0, 2]) {\n            cube([3, 20, 50]);\n            translate([30, 0, 0])\n                cube([3, 20, 50]);\n        }\n        \n        // Clamp ring\n        translate([0, 15, 50])\n            difference() {\n                cylinder(h=10, d=35);\n                cylinder(h=12, d=27);\n            }\n    }\n}\n\n// Generate the torch\ntorch();",
    "renders": true
  },
  {
    "sports_equipment": "blower",
    "openscad_code": "// Blower furniture item - OpenSCAD code\n// Realistic style, medium complexity\n\n// Overall dimensions\nblower_length = 120;\nblower_width = 80;\nblower_height = 60;\nwall_thickness = 2;\n\n// Main blower body\nmodule blower_body() {\n    difference() {\n        // Main housing\n        cube([blower_length, blower_width, blower_height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n            cube([blower_length-2*wall_thickness, blower_width-2*wall_thickness, blower_height-wall_thickness], center=true);\n        \n        // Air intake\n        translate([-blower_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=blower_width, r=blower_width/2-5, center=true);\n        \n        // Air outlet\n        translate([blower_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=blower_width/2, r=blower_width/3, center=true);\n    }\n}\n\n// Handle for carrying\nmodule handle() {\n    translate([0, blower_width/2+10, blower_height/2-5])\n        difference() {\n            // Handle grip\n            cube([40, 20, 10], center=true);\n            \n            // Grip hole\n            translate([0, -5, 0])\n                cube([30, 10, 8], center=true);\n        }\n}\n\n// Control panel\nmodule control_panel() {\n    translate([-20, 0, blower_height/2+1])\n        union() {\n            // Panel base\n            cube([40, 30, 3], center=true);\n            \n            // Power button\n            translate([-10, 0, 2])\n                cylinder(h=2, r=3);\n            \n            // Speed dial\n            translate([10, 0, 2])\n                cylinder(h=3, r=5);\n            \n            // LED indicator\n            translate([0, 10, 2])\n                cube([3, 3, 1], center=true);\n        }\n}\n\n// Ventilation slots\nmodule ventilation_slots() {\n    for (i = [-2:1:2]) {\n        translate([i*20, 0, -blower_height/2-1])\n            cube([15, blower_width-20, 3], center=true);\n    }\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    foot_positions = [\n        [-blower_length/2+10, -blower_width/2+10],\n        [blower_length/2-10, -blower_width/2+10],\n        [-blower_length/2+10, blower_width/2-10],\n        [blower_length/2-10, blower_width/2-10]\n    ];\n    \n    for (pos = foot_positions) {\n        translate([pos[0], pos[1], -blower_height/2-2])\n            cylinder(h=3, r=5);\n    }\n}\n\n// Motor housing detail\nmodule motor_housing() {\n    translate([0, 0, 0])\n        difference() {\n            // Cylindrical housing\n            rotate([90, 0, 0])\n                cylinder(h=blower_width-20, r=blower_height/2-10, center=true);\n            \n            // Cooling holes\n            for (i = [0:45:315]) {\n                rotate([90, 0, i])\n                    translate([blower_height/2-15, 0, 0])\n                        cylinder(h=20, r=3);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    blower_body();\n    handle();\n    control_panel();\n    ventilation_slots();\n    rubber_feet();\n    motor_housing();\n}",
    "renders": true
  },
  {
    "sports_equipment": "compressor",
    "openscad_code": "// Compressor Furniture - Realistic Medium Complexity\n// Overall dimensions: 80mm x 60mm x 120mm\n\n// Main body module\nmodule compressor_body() {\n    // Main tank cylinder - 2mm wall thickness\n    difference() {\n        // Outer cylinder\n        cylinder(h=80, d=50, $fn=50);\n        // Inner hollow\n        translate([0, 0, 2])\n            cylinder(h=78, d=46, $fn=50);\n    }\n}\n\n// Motor housing module\nmodule motor_housing() {\n    // Motor block\n    translate([-30, -15, 80])\n        cube([30, 30, 25]);\n    \n    // Motor cooling fins\n    for(i = [0:4]) {\n        translate([-28, -12 + i*6, 82])\n            cube([26, 2, 20]);\n    }\n}\n\n// Pressure gauge module\nmodule pressure_gauge() {\n    // Gauge body\n    translate([25, 0, 85])\n        cylinder(h=8, d=12, $fn=20);\n    \n    // Gauge face\n    translate([25, 0, 93])\n        cylinder(h=1, d=10, $fn=20);\n    \n    // Gauge needle\n    translate([25, 0, 94])\n        rotate([90, 0, 45])\n            cube([0.5, 4, 0.5]);\n}\n\n// Handle module\nmodule handle() {\n    // Handle bar\n    translate([0, 0, 110])\n        rotate([90, 0, 0])\n            cylinder(h=60, d=8, $fn=20);\n    \n    // Handle grips\n    translate([0, -30, 110])\n        cylinder(h=10, d=10, $fn=20);\n    translate([0, 30, 110])\n        cylinder(h=10, d=10, $fn=20);\n}\n\n// Base frame module\nmodule base_frame() {\n    // Front support\n    translate([0, -25, -5])\n        cube([50, 5, 5]);\n    \n    // Rear support\n    translate([0, 25, -5])\n        cube([50, 5, 5]);\n    \n    // Side supports\n    translate([-25, 0, -5])\n        cube([5, 50, 5]);\n    translate([25, 0, -5])\n        cube([5, 50, 5]);\n}\n\n// Wheels module\nmodule wheels() {\n    // Left wheel\n    translate([-20, -30, -8])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=12, $fn=20);\n    \n    // Right wheel\n    translate([-20, 30, -8])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=12, $fn=20);\n    \n    // Axle\n    translate([-20, 0, -8])\n        rotate([90, 0, 0])\n            cylinder(h=60, d=4, $fn=10);\n}\n\n// Air outlet module\nmodule air_outlet() {\n    // Outlet pipe\n    translate([0, -25, 70])\n        rotate([0, 90, 0])\n            cylinder(h=15, d=6, $fn=20);\n    \n    // Quick connector\n    translate([0, -40, 70])\n        cylinder(h=8, d=8, $fn=20);\n}\n\n// Safety valve\nmodule safety_valve() {\n    translate([20, 20, 85])\n        cylinder(h=10, d=6, $fn=20);\n    \n    // Valve cap\n    translate([20, 20, 95])\n        sphere(d=8, $fn=20);\n}\n\n// Assembly\nunion() {\n    // Main components\n    compressor_body();\n    motor_housing();\n    pressure_gauge();\n    handle();\n    base_frame();\n    wheels();\n    air_outlet();\n    safety_valve();\n    \n    // Feet pads\n    translate([-20, -20, -2])\n        cylinder(h=2, d=8, $fn=20);\n    translate([20, -20, -2])\n        cylinder(h=2, d=8, $fn=20);\n    translate([-20, 20, -2])\n        cylinder(h=2, d=8, $fn=20);\n    translate([20, 20, -2])\n        cylinder(h=2, d=8, $fn=20);\n}",
    "renders": true
  },
  {
    "sports_equipment": "generator",
    "openscad_code": "// Generator Furniture - Medium Complexity\n// Realistic style portable generator unit with furniture characteristics\n\n$fn = 50;  // Smooth curves\n\n// Main dimensions\nbody_width = 80;\nbody_depth = 60;\nbody_height = 70;\nhandle_height = 30;\nwheel_diameter = 20;\nwall_thickness = 2;\n\n// Main body module\nmodule generator_body() {\n    // Outer shell\n    difference() {\n        cube([body_width, body_depth, body_height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n            cube([\n                body_width - 2*wall_thickness,\n                body_depth - 2*wall_thickness,\n                body_height - wall_thickness\n            ], center = true);\n    }\n    \n    // Top control panel\n    translate([0, -body_depth/2 + 5, body_height/2 - 1])\n        cube([body_width - 20, 10, 2], center = true);\n    \n    // Front exhaust pipe\n    translate([body_width/2 - 5, 0, body_height/4])\n        rotate([0, 90, 0])\n            cylinder(h = 15, r1 = 4, r2 = 3);\n    \n    // Side ventilation slots\n    for(i = [-2:2]) {\n        translate([body_width/2 - wall_thickness, i * 10, 0])\n            cube([wall_thickness + 1, 5, 20], center = true);\n    }\n}\n\n// Handle module\nmodule handle() {\n    // Handle support posts\n    translate([-body_width/2 + 10, 0, body_height/2 + handle_height/2])\n        cylinder(h = handle_height, r = 3);\n    translate([body_width/2 - 10, 0, body_height/2 + handle_height/2])\n        cylinder(h = handle_height, r = 3);\n    \n    // Handle grip\n    translate([0, 0, body_height/2 + handle_height])\n        rotate([90, 0, 0])\n            cylinder(h = body_width - 20, r = 3);\n}\n\n// Wheels module\nmodule wheels() {\n    // Left wheel\n    translate([-body_width/2 - 5, body_depth/2 - 5, -body_height/2 + wheel_diameter/2])\n        rotate([90, 0, 0])\n            cylinder(h = 5, r = wheel_diameter/2);\n    \n    // Right wheel\n    translate([body_width/2 + 5, body_depth/2 - 5, -body_height/2 + wheel_diameter/2])\n        rotate([90, 0, 0])\n            cylinder(h = 5, r = wheel_diameter/2);\n    \n    // Axle\n    translate([0, body_depth/2 - 5, -body_height/2 + wheel_diameter/2])\n        rotate([90, 0, 0])\n            cylinder(h = body_width + 20, r = 2);\n}\n\n// Base frame\nmodule base_frame() {\n    // Bottom frame\n    translate([0, 0, -body_height/2 - 1])\n        cube([body_width + 10, body_depth + 10, 2], center = true);\n    \n    // Corner supports\n    for(x = [-body_width/2 + 5, body_width/2 - 5]) {\n        for(y = [-body_depth/2 + 5, body_depth/2 - 5]) {\n            translate([x, y, -body_height/2 - 2])\n                cylinder(h = 4, r = 3);\n        }\n    }\n}\n\n// Control panel details\nmodule control_panel() {\n    // Panel surface\n    color(\"darkgray\")\n    translate([0, -body_depth/2 + 5, body_height/2 + 1])\n        cube([body_width - 20, 8, 1], center = true);\n    \n    // Power switch\n    translate([-body_width/4, -body_depth/2 + 5, body_height/2 + 2])\n        cylinder(h = 2, r = 3);\n    \n    // Indicator lights\n    for(i = [0:2]) {\n        translate([i * 8 - 8, -body_depth/2 + 5, body_height/2 + 2])\n            sphere(r = 1.5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    base_frame();\n    \n    // Main components\n    generator_body();\n    handle();\n    wheels();\n    \n    // Details\n    control_panel();\n    \n    // Fuel cap\n    translate([body_width/4, body_depth/4, body_height/2 + 2])\n        cylinder(h = 3, r = 5);\n    \n    // Rubber feet\n    for(x = [-body_width/2 + 10, body_width/2 - 10]) {\n        for(y = [-body_depth/2 + 10, body_depth/2 - 10]) {\n            translate([x, y, -body_height/2 - 1])\n                cylinder(h = 2, r = 4);\n        }\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "transformer",
    "openscad_code": "// Transformer Chair-Bench - Opens from chair to bench\n// Overall dimensions: 120mm (L) x 50mm (W) x 75mm (H) when open as bench\n\n$fn = 32;  // Smooth curves\n\n// Main module\nmodule transformer_furniture() {\n    \n    // Chair mode - backrest up\n    translate([0, 0, 0]) {\n        chair_mode();\n    }\n    \n    // Bench mode - backrest folded down\n    translate([140, 0, 0]) {\n        bench_mode();\n    }\n}\n\n// Chair configuration\nmodule chair_mode() {\n    // Seat frame\n    difference() {\n        cube([60, 50, 4], center=true);\n        translate([0, 0, -2.1]) cube([56, 46, 4], center=true);\n    }\n    \n    // Seat slats\n    for(i = [-20:10:20]) {\n        translate([i, 0, 2]) cube([8, 46, 2]);\n    }\n    \n    // Front legs\n    for(x = [-25, 25]) {\n        translate([x, -20, -37.5]) {\n            difference() {\n                cube([4, 4, 75], center=true);\n                translate([0, 0, -37.6]) cube([3.6, 3.6, 75], center=true);\n            }\n        }\n    }\n    \n    // Back legs with hinge\n    for(x = [-25, 25]) {\n        translate([x, 20, -37.5]) {\n            difference() {\n                cube([4, 4, 75], center=true);\n                translate([0, 0, -37.6]) cube([3.6, 3.6, 75], center=true);\n            }\n        }\n        // Hinge cylinder\n        translate([x, 22, 0]) rotate([90, 0, 0]) cylinder(h=4, d=3, center=true);\n    }\n    \n    // Backrest\n    translate([0, 26, 30]) {\n        difference() {\n            cube([56, 4, 60], center=true);\n            translate([0, -2.1, 0]) cube([52, 4, 56], center=true);\n        }\n        // Backrest slats\n        for(i = [-20:10:20]) {\n            translate([i, 0, 0]) cube([8, 4, 56]);\n        }\n    }\n}\n\n// Bench configuration\nmodule bench_mode() {\n    // Extended seat frame\n    difference() {\n        cube([120, 50, 4], center=true);\n        translate([0, 0, -2.1]) cube([116, 46, 4], center=true);\n    }\n    \n    // Bench slats\n    for(i = [-50:10:50]) {\n        translate([i, 0, 2]) cube([8, 46, 2]);\n    }\n    \n    // Support legs\n    for(pos = [[-55, -20, -35], [-55, 20, -35], [55, -20, -35], [55, 20, -35]]) {\n        translate(pos) {\n            difference() {\n                cube([4, 4, 70], center=true);\n                translate([0, 0, -35.1]) cube([3.6, 3.6, 70], center=true);\n            }\n        }\n    }\n    \n    // Hinge plates\n    for(x = [-25, 25]) {\n        translate([x, 0, 2]) {\n            difference() {\n                cube([8, 50, 2], center=true);\n                translate([0, 0, -2.1]) cube([7.6, 46, 2], center=true);\n            }\n        }\n    }\n    \n    // Support braces\n    difference() {\n        translate([0, 0, -35]) cube([116, 2, 2], center=true);\n        translate([0, 0, -36.1]) cube([112, 1.6, 2], center=true);\n    }\n}\n\n// Render the transformer\ntransformer_furniture();",
    "renders": true
  },
  {
    "sports_equipment": "panel",
    "openscad_code": "// Medium-complexity OpenSCAD model of a realistic wall-mounted modular shelf panel\n// Overall footprint ≈ 120 mm × 80 mm × 18 mm, printable without supports\n\nmodule dowel(r=2.5, h=8) {          // wooden dowel for knock-down joints\n    cylinder(r=r, h=h, $fn=12);\n}\n\nmodule slot(x=6, y=30, depth=4) {    // vertical cable slot\n    translate([0, -depth, 0])\n        cube([x, depth, y], center=true);\n}\n\nmodule keyhole(x=6, y=3, depth=2) {  // wall-hanging keyhole pocket\n    translate([0, 0, -depth/2])\n        cube([x, y, depth], center=true);\n}\n\nmodule back_panel() {                // main load-bearing panel\n    difference() {\n        // solid panel body\n        cube([120, 80, 8], center=true);\n        \n        // cable management slots (left & right)\n        translate([-40, 0, 0]) slot();\n        translate([ 40, 0, 0]) slot();\n        \n        // four keyhole pockets for wall screws\n        translate([-45, 30, 3])  rotate([0, 90, 0]) keyhole();\n        translate([ 45, 30, 3])  rotate([0, 90, 0]) keyhole();\n        translate([-45, -30, 3]) rotate([0, 90, 0]) keyhole();\n        translate([ 45, -30, 3]) rotate([0, 90, 0]) keyhole();\n    }\n}\n\nmodule front_cover() {              // decorative outer shell (2 mm wall)\n    difference() {\n        translate([0, 0, 5])\n            cube([120, 80, 2], center=true);\n        \n        // expose cable slots in front face\n        translate([-40, 0, 5]) slot();\n        translate([ 40, 0, 5]) slot();\n    }\n}\n\nmodule edge_band() {                // rounded edge banding for realism\n    hull() {\n        translate([0, 0, -3]) cube([124, 84, 2], center=true);\n        translate([0, 0,  7]) cube([120, 80, 2], center=true);\n    }\n}\n\nmodule connector_block() {          // metal cam-lock housing\n    difference() {\n        translate([0, 0, 8]) cube([12, 12, 6], center=true);\n        translate([0, 0, 8]) cylinder(r=4, h=7, $fn=20);\n    }\n}\n\nmodule shelf_pin_holes() {          // 5 mm shelf-support holes on 32 mm system\n    for (z = [-32, 0, 32]) {\n        translate([0, 0, z])\n            rotate([0, 90, 0])\n                cylinder(r=2.5, h=120, $fn=12);\n    }\n}\n\n// Assembly\nunion() {\n    back_panel();\n    front_cover();\n    edge_band();\n    \n    // two connector blocks on top edge (left & right)\n    translate([-40, 40, 0]) connector_block();\n    translate([ 40, 40, 0]) connector_block();\n    \n    // drill shelf-pin hole pattern on both side edges\n    difference() {\n        children();\n        translate([-60, 0, 0]) shelf_pin_holes();\n        translate([ 60, 0, 0]) shelf_pin_holes();\n    }\n}\n\n// Optional accessories: two loose dowels for knock-down assembly\ntranslate([0, 0, -20]) dowel();",
    "renders": true
  },
  {
    "sports_equipment": "outlet",
    "openscad_code": "// Outlet furniture - Power outlet with mounting frame\n// Realistic style, medium complexity\n\n// Dimensions in mm\noutlet_width = 70;\noutlet_height = 120;\noutlet_depth = 25;\nwall_thickness = 2;\nmounting_hole_diameter = 4;\nmounting_hole_spacing = 60;\n\n// Main outlet body\nmodule outlet_body() {\n    difference() {\n        // Main frame\n        cube([outlet_width, outlet_height, outlet_depth], center=true);\n        \n        // Front recess for plugs\n        translate([0, 0, outlet_depth/2 - wall_thickness])\n            cube([outlet_width - 8, outlet_height - 8, wall_thickness + 1], center=true);\n        \n        // Inner cavity for wiring\n        translate([0, 0, 0])\n            cube([outlet_width - 4, outlet_height - 4, outlet_depth - wall_thickness], center=true);\n    }\n}\n\n// Mounting ears\nmodule mounting_ears() {\n    for(y = [-mounting_hole_spacing/2, mounting_hole_spacing/2]) {\n        translate([outlet_width/2 + 8, y, 0])\n            union() {\n                // Ear body\n                cube([16, 12, outlet_depth], center=true);\n                \n                // Mounting hole\n                translate([0, 0, -outlet_depth/2])\n                    cylinder(h=outlet_depth + 1, r=mounting_hole_diameter/2, $fn=20);\n            }\n        \n        translate([-outlet_width/2 - 8, y, 0])\n            mirror([1, 0, 0])\n                union() {\n                    cube([16, 12, outlet_depth], center=true);\n                    translate([0, 0, -outlet_depth/2])\n                        cylinder(h=outlet_depth + 1, r=mounting_hole_diameter/2, $fn=20);\n                }\n    }\n}\n\n// Outlet slots\nmodule outlet_slots() {\n    // Top outlet\n    translate([0, outlet_height/4, outlet_depth/2 - wall_thickness/2])\n        for(angle = [0, 120, 240]) {\n            rotate([0, 0, angle])\n                translate([0, 6, 0])\n                    cube([2.5, 12, wall_thickness + 1], center=true);\n        }\n    \n    // Bottom outlet\n    translate([0, -outlet_height/4, outlet_depth/2 - wall_thickness/2])\n        for(angle = [0, 120, 240]) {\n            rotate([0, 0, angle])\n                translate([0, 6, 0])\n                    cube([2.5, 12, wall_thickness + 1], center=true);\n        }\n}\n\n// Screw holes for faceplate\nmodule faceplate_screw_holes() {\n    translate([outlet_width/2 - 10, outlet_height/2 - 10, outlet_depth/2 - wall_thickness])\n        cylinder(h=wall_thickness + 1, r=1.5, $fn=20);\n    \n    translate([-outlet_width/2 + 10, outlet_height/2 - 10, outlet_depth/2 - wall_thickness])\n        cylinder(h=wall_thickness + 1, r=1.5, $fn=20);\n    \n    translate([outlet_width/2 - 10, -outlet_height/2 + 10, outlet_depth/2 - wall_thickness])\n        cylinder(h=wall_thickness + 1, r=1.5, $fn=20);\n    \n    translate([-outlet_width/2 + 10, -outlet_height/2 + 10, outlet_depth/2 - wall_thickness])\n        cylinder(h=wall_thickness + 1, r=1.5, $fn=20);\n}\n\n// Ground hole\nmodule ground_hole() {\n    // Central ground hole\n    translate([0, 0, outlet_depth/2 - wall_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=wall_thickness + 1, r=3.5, $fn=20);\n}\n\n// Cable entry hole\nmodule cable_entry() {\n    translate([0, -outlet_height/2, 0])\n        rotate([90, 0, 0])\n            cylinder(h=wall_thickness*2, r=8, $fn=20);\n}\n\n// Main assembly\nunion() {\n    outlet_body();\n    mounting_ears();\n    outlet_slots();\n    ground_hole();\n    cable_entry();\n    \n    // Remove faceplate screw holes\n    difference() {\n        children();\n        faceplate_screw_holes();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "switch",
    "openscad_code": "// Switch furniture item - realistic style, medium complexity\n// A wall-mounted light switch with faceplate and toggle switch\n\n// Overall dimensions\nswitch_width = 70;\nswitch_height = 115;\nswitch_depth = 25;\nplate_thickness = 2.5;\ntoggle_height = 12;\ntoggle_width = 8;\ntoggle_depth = 18;\n\n// Wall plate module\nmodule wall_plate() {\n    difference() {\n        // Main plate\n        cube([switch_width, switch_height, plate_thickness], center=true);\n        \n        // Screw holes (top and bottom)\n        translate([0, (switch_height/2 - 20), -1])\n            cylinder(h=plate_thickness+2, r=2.5, center=true, $fn=16);\n        translate([0, -(switch_height/2 - 20), -1])\n            cylinder(h=plate_thickness+2, r=2.5, center=true, $fn=16);\n            \n        // Toggle opening\n        translate([0, 0, -1])\n            cube([toggle_width + 8, toggle_depth + 4, plate_thickness + 2], center=true);\n    }\n}\n\n// Toggle switch module\nmodule toggle_switch() {\n    // Base pivot\n    translate([0, 0, plate_thickness/2])\n        cylinder(h=6, r=4, center=true, $fn=20);\n    \n    // Toggle lever\n    translate([0, 0, plate_thickness/2 + toggle_height/2])\n        cube([toggle_width, toggle_depth, toggle_height], center=true);\n    \n    // Rounded top\n    translate([0, 0, plate_thickness/2 + toggle_height + 2])\n        sphere(r=toggle_width/2, $fn=20);\n}\n\n// Back box for mounting\nmodule back_box() {\n    difference() {\n        // Main box\n        translate([0, 0, -switch_depth/2])\n            cube([switch_width - 8, switch_height - 8, switch_depth], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -switch_depth/2 + 2])\n            cube([switch_width - 12, switch_height - 12, switch_depth - 1], center=true);\n            \n        // Wire entry holes\n        translate([0, (switch_height/2 - 10), -switch_depth/2])\n            rotate([90, 0, 0])\n                cylinder(h=10, r=4, center=true, $fn=16);\n        translate([0, -(switch_height/2 - 10), -switch_depth/2])\n            rotate([90, 0, 0])\n                cylinder(h=10, r=4, center=true, $fn=16);\n    }\n}\n\n// Mounting tabs\nmodule mounting_tabs() {\n    for(y = [-(switch_height/2 - 20), (switch_height/2 - 20)]) {\n        translate([-(switch_width/2 - 3), y, -switch_depth/2 - 3])\n            cube([6, 6, 6]);\n        translate([(switch_width/2 - 3), y, -switch_depth/2 - 3])\n            cube([6, 6, 6]);\n    }\n}\n\n// Texture details on toggle\nmodule toggle_texture() {\n    for(i = [-1:1]) {\n        translate([0, i * 4, plate_thickness/2 + toggle_height/2])\n            cube([toggle_width - 1, 1, toggle_height - 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Back box\n    color(\"lightgray\")\n        back_box();\n    \n    // Mounting tabs\n    color(\"darkgray\")\n        mounting_tabs();\n    \n    // Wall plate\n    color(\"ivory\")\n        translate([0, 0, switch_depth/2 + plate_thickness/2])\n            wall_plate();\n    \n    // Toggle switch\n    color(\"ivory\")\n        translate([0, 0, switch_depth/2 + plate_thickness])\n            union() {\n                toggle_switch();\n                toggle_texture();\n            }\n}",
    "renders": true
  },
  {
    "sports_equipment": "fixture",
    "openscad_code": "$fn = 32;\n\n// Overall dimensions (mm)\nwidth = 80;\ndepth = 40;\nheight = 100;\n\n// Wall thickness\nwall = 2;\n\nmodule shelf(dx, dy, dz) {\n    difference() {\n        cube([dx, dy, dz]);\n        translate([wall, wall, wall])\n            cube([dx-2*wall, dy-2*wall, dz-2*wall]);\n    }\n}\n\nmodule side_panel(dx, dy, dz) {\n    difference() {\n        cube([dx, dy, dz]);\n        translate([wall, wall, wall])\n            cube([dx-2*wall, dy-2*wall, dz-2*wall]);\n    }\n}\n\nmodule back_panel(dx, dy, dz) {\n    difference() {\n        cube([dx, dy, dz]);\n        translate([wall, wall, wall])\n            cube([dx-2*wall, dy-2*wall, dz-2*wall]);\n    }\n}\n\nmodule leg(rx, ry, h) {\n    difference() {\n        cylinder(h = h, r1 = rx, r2 = rx);\n        translate([wall, 0, wall])\n            cylinder(h = h-2*wall, r1 = rx-wall, r2 = rx-wall);\n    }\n}\n\nmodule handle(d, h) {\n    cylinder(h = h, r = d/2);\n}\n\n// Assemble the bookcase\nunion() {\n    // Bottom shelf\n    translate([0, 0, 0])\n        shelf(width, depth, wall);\n\n    // Top shelf\n    translate([0, 0, height-wall])\n        shelf(width, depth, wall);\n\n    // Middle shelf\n    translate([0, 0, height/2])\n        shelf(width, depth, wall);\n\n    // Left side panel\n    translate([0, 0, 0])\n        side_panel(wall, depth, height);\n\n    // Right side panel\n    translate([width-wall, 0, 0])\n        side_panel(wall, depth, height);\n\n    // Back panel\n    translate([0, depth-wall, 0])\n        back_panel(width, wall, height);\n\n    // Legs\n    translate([wall, wall, 0])\n        leg(3, 3, 5);\n    translate([width-wall-6, wall, 0])\n        leg(3, 3, 5);\n    translate([wall, depth-wall-6, 0])\n        leg(3, 3, 5);\n    translate([width-wall-6, depth-wall-6, 0])\n        leg(3, 3, 5);\n\n    // Handle\n    translate([width/2, -3, height/2])\n        rotate([90, 0, 0])\n            handle(5, 20);\n}",
    "renders": true
  },
  {
    "sports_equipment": "valve",
    "openscad_code": "// Valve Furniture - Realistic Style\n// Dimensions: 50mm x 50mm x 120mm (medium size for 3D printing)\n\nmodule valve_handle() {\n    // Central hub\n    difference() {\n        cylinder(h=8, d=12, $fn=32);\n        cylinder(h=10, d=4, $fn=32);\n    }\n    \n    // Handle spokes (4 arms)\n    for (i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([8, -2, 4])\n                cube([20, 4, 8]);\n    }\n    \n    // Grip ring\n    rotate([0, 0, 45])\n        translate([18, -2, 4])\n            cube([4, 4, 8]);\n    rotate([0, 0, 135])\n        translate([18, -2, 4])\n            cube([4, 4, 8]);\n    rotate([0, 0, 225])\n        translate([18, -2, 4])\n            cube([4, 4, 8]);\n    rotate([0, 0, 315])\n        translate([18, -2, 4])\n            cube([4, 4, 8]);\n}\n\nmodule valve_stem() {\n    // Stem body\n    cylinder(h=40, d=10, $fn=32);\n    \n    // Thread detail (simulated)\n    for (i = [0:5]) {\n        translate([0, 0, 5+i*5])\n            cylinder(h=1, d=11.5, $fn=32);\n    }\n}\n\nmodule valve_body() {\n    // Main body\n    difference() {\n        cylinder(h=30, d1=40, d2=35, $fn=32);\n        cylinder(h=32, d1=30, d2=25, $fn=32);\n    }\n    \n    // Flange rings\n    translate([0, 0, 0])\n        cylinder(h=4, d=50, $fn=32);\n    translate([0, 0, 26])\n        cylinder(h=4, d=45, $fn=32);\n    \n    // Bolt holes (4 holes)\n    for (i = [0:3]) {\n        rotate([0, 0, i*90+45])\n            translate([20, 0, -1])\n                cylinder(h=6, d=6, $fn=16);\n    }\n}\n\nmodule valve_ports() {\n    // Inlet port\n    rotate([90, 0, 0])\n        translate([0, 0, -15])\n            cylinder(h=15, d1=35, d2=30, $fn=32);\n    \n    // Outlet port\n    rotate([-90, 0, 0])\n        translate([0, 0, -15])\n            cylinder(h=15, d1=35, d2=30, $fn=32);\n    \n    // Port flanges\n    rotate([90, 0, 0])\n        translate([0, 0, -18])\n            cylinder(h=3, d=45, $fn=32);\n    rotate([-90, 0, 0])\n        translate([0, 0, -18])\n            cylinder(h=3, d=45, $fn=32);\n    \n    // Port bolt holes (4 holes each)\n    for (i = [0:3]) {\n        rotate([90, 0, i*90])\n            translate([18, 0, -19])\n                cylinder(h=5, d=5, $fn=16);\n        rotate([-90, 0, i*90])\n            translate([18, 0, -19])\n                cylinder(h=5, d=5, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Valve body\n    translate([0, 0, 0])\n        valve_body();\n    \n    // Valve ports\n    valve_ports();\n    \n    // Valve stem\n    translate([0, 0, 30])\n        valve_stem();\n    \n    // Valve handle\n    translate([0, 0, 70])\n        valve_handle();\n}\n\n// Base support for furniture stability\ntranslate([0, 0, -4])\n    cylinder(h=2, d=50, $fn=32);",
    "renders": true
  },
  {
    "sports_equipment": "tank",
    "openscad_code": "// Tank Furniture - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm long x ~70mm wide x ~70mm tall\n\n// Tank body module\nmodule tank_body() {\n    // Main body - elongated rounded shape\n    difference() {\n        union() {\n            // Central hull section\n            hull() {\n                translate([0, 0, 15]) cylinder(h=40, r1=25, r2=25, $fn=50);\n                translate([0, 0, 25]) scale([1.8, 1, 1]) sphere(r=25, $fn=50);\n            }\n            \n            // Front slope\n            translate([-35, 0, 25]) rotate([0, 10, 0]) \n                cube([40, 50, 15], center=true);\n                \n            // Rear slope\n            translate([35, 0, 25]) rotate([0, -10, 0]) \n                cube([40, 50, 15], center=true);\n        }\n        \n        // Turret hole\n        translate([0, 0, 50]) cylinder(h=20, r=15, $fn=30);\n        \n        // Underside clearance\n        translate([0, 0, 5]) cube([120, 80, 10], center=true);\n    }\n}\n\n// Turret module\nmodule turret() {\n    union() {\n        // Turret base\n        translate([0, 0, 50]) cylinder(h=15, r=20, $fn=30);\n        \n        // Turret top\n        translate([0, 0, 65]) cylinder(h=12, r1=18, r2=20, $fn=30);\n        \n        // Main gun barrel\n        translate([25, 0, 71]) rotate([0, 10, 0])\n            cylinder(h=40, r=4, $fn=16);\n            \n        // Gun mantlet\n        translate([15, 0, 71]) rotate([0, 10, 0])\n            cube([20, 12, 8], center=true);\n    }\n}\n\n// Track module with tread details\nmodule track(side) {\n    y_pos = side * 30;\n    \n    difference() {\n        // Track base\n        union() {\n            // Main track\n            translate([0, y_pos, 12]) cube([100, 15, 24], center=true);\n            \n            // Front wheel cover\n            translate([-45, y_pos, 12]) cylinder(h=15, r=12, $fn=20);\n            \n            // Rear wheel cover\n            translate([45, y_pos, 12]) cylinder(h=15, r=12, $fn=20);\n            \n            // Road wheels\n            for(x = [-30, -15, 0, 15, 30])\n                translate([x, y_pos, 12]) cylinder(h=15, r=10, $fn=20);\n        }\n        \n        // Tread pattern cuts\n        for(x = [-45:5:45])\n            translate([x, y_pos + (side * 7.5), 12])\n                cube([3, 15, 24], center=true);\n    }\n}\n\n// Engine deck details\nmodule engine_deck() {\n    // Rear engine grille\n    difference() {\n        translate([40, 0, 50]) cube([20, 50, 8], center=true);\n        \n        // Grille slots\n        for(y = [-20:4:20])\n            translate([40, y, 54]) cube([20, 2, 4], center=true);\n    }\n    \n    // Fuel tanks\n    for(side = [-1, 1]) {\n        translate([30, side * 35, 40]) \n            cylinder(h=20, r=6, $fn=12);\n    }\n}\n\n// Hatch details\nmodule hatches() {\n    // Commander's hatch\n    difference() {\n        translate([5, 0, 77]) cylinder(h=3, r=8, $fn=8);\n        translate([5, 0, 78]) cube([14, 2, 3], center=true);\n    }\n    \n    // Driver's hatch\n    difference() {\n        translate([-25, 0, 45]) rotate([0, 10, 0])\n            cube([20, 30, 3], center=true);\n        translate([-25, 0, 47]) rotate([0, 10, 0])\n            cube([16, 26, 4], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Central structure\n    tank_body();\n    \n    // Tracks\n    track(-1);  // Left track\n    track(1);   // Right track\n    \n    // Turret assembly\n    turret();\n    \n    // Details\n    engine_deck();\n    hatches();\n}",
    "renders": true
  },
  {
    "sports_equipment": "radiator",
    "openscad_code": "// Classic Cast-Iron Radiator – realistic, medium complexity\n// Overall footprint 100 mm W × 50 mm D × 90 mm H, wall-thickness 2 mm, printable without supports.\n\n$fn = 24;               // moderate facetting for realism\nwall = 2;               // uniform 2 mm wall everywhere\nbase_h = 6;             // height of the base feet\nsect_w = 6;             // width of one fin/section\nsect_gap = 3;           // gap between fins\nsect_deep = 42;         // depth of radiator body\nsect_h  = 80;           // height of radiator body\nn_sect  = 8;            // number of fins\n\n// Total width = (n_sect*sect_w) + ((n_sect-1)*sect_gap)\ntotal_w = n_sect*sect_w + (n_sect-1)*sect_gap;\n\n// Helper: one vertical water channel with rounded ends (capsule shape)\nmodule water_channel(h, r) {\n    union() {\n        translate([0, 0, h/2]) cylinder(h = h - 2*r, r = r);\n        translate([0, 0, r]) sphere(r = r);\n        translate([0, 0, h - r]) sphere(r = r);\n    }\n}\n\n// Helper: one outer fin shell with internal hollow\nmodule fin_shell(w, d, h, wall) {\n    difference() {\n        cube([w, d, h], center = true);               // outer\n        translate([0, 0, -wall/2])\n            cube([w - 2*wall, d - wall, h - wall], center = true); // inner void\n    }\n}\n\n// One complete radiator section (fin + two water channels)\nmodule one_section() {\n    union() {\n        // Left water channel\n        translate([-sect_w/2 + 3, 0, 0])\n            water_channel(sect_h - 2*base_h, 4);\n\n        // Right water channel\n        translate([ sect_w/2 - 3, 0, 0])\n            water_channel(sect_h - 2*base_h, 4);\n\n        // Decorative fin shell\n        translate([0, 0, base_h + (sect_h - 2*base_h)/2])\n            fin_shell(sect_w, sect_deep, sect_h - 2*base_h, wall);\n\n        // Top cap plate\n        translate([0, 0, sect_h - wall/2])\n            cube([sect_w, sect_deep, wall], center = true);\n\n        // Bottom cap plate\n        translate([0, 0, base_h + wall/2])\n            cube([sect_w, sect_deep, wall], center = true);\n    }\n}\n\n// Decorative base feet (two per end)\nmodule feet() {\n    foot_w = 10;\n    foot_d = sect_deep + 6;\n    foot_h = base_h;\n    for (x = [-total_w/2 + foot_w/2, total_w/2 - foot_w/2])\n        translate([x, 0, foot_h/2])\n            difference() {\n                cube([foot_w, foot_d, foot_h], center = true);\n                translate([0, 0, wall/2])\n                    cube([foot_w - 2*wall, foot_d - 2*wall, foot_h], center = true);\n            }\n}\n\n// Side pipe connectors (dummy plugs)\nmodule side_plugs() {\n    plug_r = 5;\n    plug_l = 8;\n    for (side = [-1, 1])\n        translate([side * (total_w/2 + plug_l/2), 0, base_h + 15])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h = plug_l, r = plug_r);\n                    cylinder(h = plug_l + 0.1, r = plug_r - wall);\n                }\n}\n\n// Assembly\nunion() {\n    // Array of sections\n    for (i = [0 : n_sect-1]) {\n        x_pos = -total_w/2 + sect_w/2 + i*(sect_w + sect_gap);\n        translate([x_pos, 0, 0])\n            one_section();\n    }\n\n    // Feet under first and last sections\n    feet();\n\n    // Side pipe plugs\n    side_plugs();\n}",
    "renders": true
  },
  {
    "sports_equipment": "ductwork",
    "openscad_code": "// Ductwork Shelf Unit - Industrial Style Furniture\n// Realistic medium-complexity furniture piece with ductwork aesthetic\n\nwall_thickness = 2;\nmodule_size = 60;\nduct_diameter = 25;\nduct_height = 40;\n\n// Main rectangular frame structure\nmodule frame() {\n    difference() {\n        // Outer frame\n        cube([module_size, module_size, module_size], center=true);\n        \n        // Hollow out interior\n        translate([0, 0, 0])\n            cube([module_size-wall_thickness*2, module_size-wall_thickness*2, module_size-wall_thickness*2], center=true);\n    }\n}\n\n// Round duct connector with flanges\nmodule duct_connector(x, y, z, rotation) {\n    translate([x, y, z]) {\n        rotate([0, rotation, 0]) {\n            // Main duct body\n            difference() {\n                cylinder(h=duct_height, d=duct_diameter+wall_thickness*2, center=true);\n                cylinder(h=duct_height+1, d=duct_diameter, center=true);\n            }\n            \n            // Front flange\n            translate([0, 0, duct_height/2])\n                cylinder(h=wall_thickness, d=duct_diameter+8, center=true);\n            \n            // Back flange\n            translate([0, 0, -duct_height/2])\n                cylinder(h=wall_thickness, d=duct_diameter+8, center=true);\n            \n            // Bolt holes on flange\n            for(i=[0:45:315]) {\n                rotate([0, 0, i]) {\n                    translate([duct_diameter/2+4, 0, duct_height/2+wall_thickness/2])\n                        cylinder(h=wall_thickness+1, d=3, center=true);\n                    translate([duct_diameter/2+4, 0, -duct_height/2-wall_thickness/2])\n                        cylinder(h=wall_thickness+1, d=3, center=true);\n                }\n            }\n            \n            // Support brackets\n            translate([0, -duct_diameter/2-2, 0])\n                cube([wall_thickness*2, 4, duct_height], center=true);\n            translate([0, duct_diameter/2+2, 0])\n                cube([wall_thickness*2, 4, duct_height], center=true);\n        }\n    }\n}\n\n// Shelf support brackets\nmodule shelf_bracket(x, y, z) {\n    translate([x, y, z]) {\n        // Main bracket\n        rotate([90, 0, 0]) {\n            difference() {\n                cube([15, wall_thickness*4, 10], center=true);\n                translate([0, 0, 5])\n                    cube([13, wall_thickness*2, 10], center=true);\n            }\n        }\n        \n        // Gusset support\n        rotate([0, 45, 0]) {\n            translate([0, -3, 0])\n                cube([wall_thickness*2, 8, 8], center=true);\n        }\n    }\n}\n\n// Vented shelf panel\nmodule shelf_panel() {\n    translate([0, 0, -module_size/4]) {\n        difference() {\n            // Main shelf\n            cube([module_size-wall_thickness*4, module_size-wall_thickness*4, wall_thickness], center=true);\n            \n            // Ventilation slots\n            for(x=[-20:10:20]) {\n                for(y=[-20:10:20]) {\n                    translate([x, y, 0])\n                        cube([4, 1, wall_thickness+1], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Corner reinforcement plates\nmodule corner_plate(x, y, z) {\n    translate([x, y, z]) {\n        rotate([0, 0, 45]) {\n            difference() {\n                cube([8, 8, wall_thickness], center=true);\n                cylinder(h=wall_thickness+1, d=2, center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main frame\n    frame();\n    \n    // Duct connectors\n    duct_connector(module_size/2, 0, 0, 90);\n    duct_connector(-module_size/2, 0, 0, -90);\n    duct_connector(0, module_size/2, 0, 0);\n    duct_connector(0, -module_size/2, 0, 180);\n    \n    // Shelf brackets (4 corners)\n    shelf_bracket(module_size/3, module_size/3, -module_size/4);\n    shelf_bracket(-module_size/3, module_size/3, -module_size/4);\n    shelf_bracket(module_size/3, -module_size/3, -module_size/4);\n    shelf_bracket(-module_size/3, -module_size/3, -module_size/4);\n    \n    // Shelf panel\n    shelf_panel();\n    \n    // Corner reinforcements\n    corner_plate(module_size/2-wall_thickness, module_size/2-wall_thickness, module_size/2-wall_thickness);\n    corner_plate(-module_size/2+wall_thickness, module_size/2-wall_thickness, module_size/2-wall_thickness);\n    corner_plate(module_size/2-wall_thickness, -module_size/2+wall_thickness, module_size/2-wall_thickness);\n    corner_plate(-module_size/2+wall_thickness, -module_size/2+wall_thickness, module_size/2-wall_thickness);\n    \n    // Mounting holes on back\n    translate([0, -module_size/2+wall_thickness, module_size/4]) {\n        cylinder(h=wall_thickness*2, d=4, center=true);\n    }\n    translate([0, -module_size/2+wall_thickness, -module_size/4]) {\n        cylinder(h=wall_thickness*2, d=4, center=true);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "vent",
    "openscad_code": "// Air Vent Furniture - Realistic Style, Medium Complexity\n// 3D printable ventilation grate with furniture-grade appearance\n\n// Parameters\noverall_width = 120;\noverall_height = 80;\noverall_depth = 25;\nwall_thickness = 2;\ngrate_thickness = 2;\nvent_opening = 0.8;  // 80% open area\n\n// Main frame structure\nmodule vent_frame() {\n    // Outer frame\n    difference() {\n        // Main outer frame\n        cube([overall_width, overall_height, overall_depth], center=true);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cube([overall_width-wall_thickness*2, overall_height-wall_thickness*2, overall_depth+2], center=true);\n    }\n    \n    // Back mounting flange\n    translate([0, 0, -overall_depth/2 + wall_thickness/2])\n        cube([overall_width+6, overall_height+6, wall_thickness], center=true);\n}\n\n// Vent slats with realistic angle\nmodule vent_slats() {\n    slat_width = 3;\n    slat_spacing = 6;\n    slat_count = floor((overall_height-wall_thickness*2)/slat_spacing);\n    slat_angle = 30;  // degrees\n    \n    for(i = [0:slat_count-1]) {\n        translate([\n            0,\n            -overall_height/2 + wall_thickness + slat_spacing/2 + i*slat_spacing,\n            0\n        ]) {\n            rotate([slat_angle, 0, 0])\n                cube([\n                    overall_width-wall_thickness*2-4,\n                    slat_width,\n                    grate_thickness\n                ], center=true);\n        }\n    }\n}\n\n// Decorative corner brackets\nmodule corner_brackets() {\n    bracket_size = 8;\n    bracket_thickness = 3;\n    \n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([\n                x*(overall_width/2 - bracket_size/2),\n                y*(overall_height/2 - bracket_size/2),\n                0\n            ]) {\n                // Main bracket body\n                cube([bracket_size, bracket_size, overall_depth], center=true);\n                \n                // Decorative cutout\n                translate([0, 0, -bracket_thickness/2])\n                    cylinder(h=bracket_thickness+1, r=bracket_size/3, center=true);\n            }\n        }\n    }\n}\n\n// Mounting holes for screws\nmodule mounting_holes() {\n    hole_diameter = 4;\n    hole_depth = 10;\n    \n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([\n                x*(overall_width/2 + 20),\n                y*(overall_height/2 + 20),\n                -overall_depth/2\n            ]) {\n                cylinder(h=hole_depth, d=hole_diameter, center=false);\n            }\n        }\n    }\n}\n\n// Grip texture on sides\nmodule side_texture() {\n    texture_width = 1;\n    texture_depth = 1;\n    texture_spacing = 3;\n    texture_count = floor(overall_depth/texture_spacing);\n    \n    for(i = [0:texture_count-1]) {\n        for(side = [-1, 1]) {\n            translate([\n                side*(overall_width/2 - wall_thickness/2),\n                0,\n                -overall_depth/2 + texture_spacing/2 + i*texture_spacing\n            ]) {\n                cube([wall_thickness, overall_height-wall_thickness*2, texture_depth], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main frame\n    vent_frame();\n    \n    // Vent slats\n    vent_slats();\n    \n    // Corner brackets\n    corner_brackets();\n    \n    // Side texture\n    side_texture();\n}\n\n// Remove mounting holes\ndifference() {\n    children();\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "sports_equipment": "grille",
    "openscad_code": "// Realistic Grille Furniture (Vent Cover)\n// Dimensions: 120 x 80 x 15 mm overall\n\n// Main parameters\ngrille_width = 120;\ngrille_height = 80;\ngrille_depth = 15;\nwall_thickness = 2;\nslat_width = 4;\nslat_gap = 3;\nframe_width = 8;\n\n// Frame module\nmodule frame() {\n    difference() {\n        // Outer frame\n        cube([grille_width, grille_height, grille_depth]);\n        \n        // Hollow center\n        translate([frame_width, frame_width, -1])\n            cube([grille_width - 2*frame_width, grille_height - 2*frame_width, grille_depth + 2]);\n    }\n}\n\n// Slat module with rounded edges\nmodule slat(length) {\n    difference() {\n        // Main slat body\n        cube([length, slat_width, grille_depth - 2*wall_thickness]);\n        \n        // Rounded top edge\n        translate([wall_thickness, -0.1, grille_depth - 2*wall_thickness - 0.1])\n            cube([length - 2*wall_thickness, slat_width + 0.2, 2]);\n            \n        // Rounded bottom edge\n        translate([wall_thickness, -0.1, -1.9])\n            cube([length - 2*wall_thickness, slat_width + 0.2, 2]);\n    }\n}\n\n// Mounting tabs\nmodule mounting_tab() {\n    translate([-frame_width/2, -frame_width/2, grille_depth/2])\n        rotate([90, 0, 0])\n            cylinder(h=frame_width, r=frame_width/2, $fn=16);\n}\n\n// Screw holes\nmodule screw_hole() {\n    translate([0, 0, -1])\n        cylinder(h=grille_depth + 2, r=1.5, $fn=16);\n}\n\n// Generate horizontal slats\nmodule horizontal_slats() {\n    num_slats = floor((grille_height - 2*frame_width) / (slat_width + slat_gap));\n    for (i = [0:num_slats-1]) {\n        translate([frame_width, frame_width + i*(slat_width + slat_gap), wall_thickness])\n            slat(grille_width - 2*frame_width);\n    }\n}\n\n// Generate vertical support ribs\nmodule vertical_supports() {\n    num_supports = 3;\n    spacing = (grille_width - 2*frame_width) / (num_supports + 1);\n    for (i = [1:num_supports]) {\n        translate([frame_width + i*spacing - slat_width/2, frame_width, wall_thickness])\n            cube([slat_width, grille_height - 2*frame_width, grille_depth - 2*wall_thickness]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main frame\n    frame();\n    \n    // Horizontal slats\n    horizontal_slats();\n    \n    // Vertical supports for structure\n    vertical_supports();\n    \n    // Mounting tabs at corners\n    translate([0, 0, 0])\n        mounting_tab();\n    translate([grille_width - frame_width, 0, 0])\n        mounting_tab();\n    translate([0, grille_height - frame_width, 0])\n        mounting_tab();\n    translate([grille_width - frame_width, grille_height - frame_width, 0])\n        mounting_tab();\n}\n\n// Screw holes in mounting tabs\ndifference() {\n    children();\n    \n    // Corner holes\n    translate([frame_width/2, frame_width/2, grille_depth/2])\n        screw_hole();\n    translate([grille_width - frame_width/2, frame_width/2, grille_depth/2])\n        screw_hole();\n    translate([frame_width/2, grille_height - frame_width/2, grille_depth/2])\n        screw_hole();\n    translate([grille_width - frame_width/2, grille_height - frame_width/2, grille_depth/2])\n        screw_hole();\n}",
    "renders": true
  },
  {
    "sports_equipment": "headlight",
    "openscad_code": "// Furniture Headlight Lamp\n// Realistic style, medium complexity\n// Dimensions: 120mm wide x 80mm deep x 100mm tall\n\n// Main parameters\nwall_thickness = 2;\nheadlight_diameter = 80;\nheadlight_depth = 40;\nbase_width = 120;\nbase_depth = 80;\nbase_height = 15;\nmount_hole_diameter = 6;\n\n// Main headlight assembly\nmodule headlight_lamp() {\n    difference() {\n        union() {\n            // Base platform\n            base_platform();\n            \n            // Main headlight housing\n            headlight_housing();\n            \n            // Mounting brackets\n            mounting_brackets();\n            \n            // Cooling fins\n            cooling_fins();\n        }\n        \n        // Inner cavity for electronics\n        inner_cavity();\n        \n        // Mounting holes\n        mounting_holes();\n        \n        // Light opening\n        light_opening();\n    }\n}\n\n// Base platform with furniture-style details\nmodule base_platform() {\n    // Main base\n    translate([0, 0, base_height/2])\n        cube([base_width, base_depth, base_height], center=true);\n    \n    // Front chamfer\n    translate([0, -base_depth/2 + 5, 5])\n        cube([base_width - 20, 10, 10], center=true);\n    \n    // Side supports\n    for(x = [-base_width/2 + 15, base_width/2 - 15]) {\n        translate([x, 0, base_height + 7.5])\n            cube([10, base_depth - 10, 15], center=true);\n    }\n}\n\n// Main headlight housing\nmodule headlight_housing() {\n    translate([0, 0, base_height + headlight_depth/2])\n        rotate([0, 90, 0])\n        difference() {\n            // Outer shell\n            cylinder(h=headlight_diameter, d=headlight_diameter, center=true);\n            \n            // Decorative rings\n            for(i = [1:3]) {\n                translate([0, 0, headlight_diameter/2 - i*5])\n                    cylinder(h=2, d=headlight_diameter - i*10, center=true);\n            }\n        }\n}\n\n// Mounting brackets\nmodule mounting_brackets() {\n    // Left bracket\n    translate([-base_width/2 + 10, 0, base_height + headlight_depth/2])\n        cube([20, 10, headlight_depth], center=true);\n    \n    // Right bracket\n    translate([base_width/2 - 10, 0, base_height + headlight_depth/2])\n        cube([20, 10, headlight_depth], center=true);\n}\n\n// Cooling fins for heat dissipation\nmodule cooling_fins() {\n    for(i = [-3:3]) {\n        if(i != 0) {\n            translate([0, i*8, base_height + headlight_depth + 5])\n                cube([headlight_diameter - 20, 2, 10], center=true);\n        }\n    }\n}\n\n// Inner cavity for electronics\nmodule inner_cavity() {\n    translate([0, 0, base_height + headlight_depth/2])\n        rotate([0, 90, 0])\n        cylinder(h=headlight_diameter - wall_thickness*2, \n                d=headlight_diameter - wall_thickness*2, \n                center=true);\n    \n    // Wiring channel\n    translate([0, -base_depth/2, base_height/2])\n        cube([20, base_depth/2, base_height], center=true);\n}\n\n// Mounting holes for furniture attachment\nmodule mounting_holes() {\n    for(x = [-base_width/2 + 20, base_width/2 - 20])\n        for(y = [-base_depth/2 + 20, base_depth/2 - 20]) {\n            translate([x, y, 0])\n                cylinder(h=base_height + 1, d=mount_hole_diameter, center=true);\n        }\n}\n\n// Light opening with lens seat\nmodule light_opening() {\n    translate([0, headlight_depth/2, base_height + headlight_depth/2])\n        rotate([0, 90, 0])\n        cylinder(h=headlight_diameter + 10, \n                d=headlight_diameter - wall_thickness*4, \n                center=true);\n}\n\n// Generate the model\nheadlight_lamp();",
    "renders": true
  },
  {
    "sports_equipment": "taillight",
    "openscad_code": "// Taillight Furniture - Realistic Style, Medium Complexity\n// Dimensions: 120mm x 35mm x 80mm\n\n$fn=30;\n\n// Main housing\nmodule housing() {\n    difference() {\n        // Main body\n        translate([0, 0, 40])\n            cube([120, 35, 80], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 40])\n            cube([116, 31, 76], center=true);\n    }\n}\n\n// Mounting bracket\nmodule bracket() {\n    translate([0, 20, 0])\n        rotate([90, 0, 0])\n            cylinder(h=20, r1=10, r2=10);\n    \n    translate([0, 20, 0])\n        rotate([90, 0, 0])\n            cylinder(h=15, r1=12, r2=12);\n    \n    difference() {\n        translate([0, 20, 0])\n            rotate([90, 0, 0])\n                cylinder(h=15, r1=12, r2=12);\n        \n        translate([0, 20, -1])\n            rotate([90, 0, 0])\n                cylinder(h=17, r1=8, r2=8);\n    }\n}\n\n// Light lens\nmodule lens() {\n    // Red lens\n    translate([0, 0, 80])\n        cube([110, 31, 2], center=true);\n    \n    // Lens ridges\n    for(i = [-50:10:50]) {\n        translate([i, 0, 81])\n            cube([8, 29, 1], center=true);\n    }\n}\n\n// Reflector elements\nmodule reflectors() {\n    // Left reflector\n    translate([-40, 0, 40])\n        rotate([0, 0, 0])\n            cylinder(h=2, r=15);\n    \n    // Right reflector\n    translate([40, 0, 40])\n        rotate([0, 0, 0])\n            cylinder(h=2, r=15);\n}\n\n// Wiring channel\nmodule wire_channel() {\n    difference() {\n        // Channel base\n        translate([0, 0, 10])\n            cube([20, 35, 20], center=true);\n        \n        // Channel hole\n        translate([0, 0, 10])\n            cube([16, 31, 20], center=true);\n    }\n}\n\n// Screw holes for mounting\nmodule screw_holes() {\n    // Top holes\n    translate([-50, 0, 80])\n        rotate([0, 0, 0])\n            cylinder(h=5, r=2);\n    \n    translate([50, 0, 80])\n        rotate([0, 0, 0])\n            cylinder(h=5, r=2);\n    \n    // Bottom holes\n    translate([-50, 0, 10])\n        rotate([0, 0, 0])\n            cylinder(h=5, r=2);\n    \n    translate([50, 0, 10])\n        rotate([0, 0, 0])\n            cylinder(h=5, r=2);\n}\n\n// Assembly\nunion() {\n    housing();\n    bracket();\n    lens();\n    reflectors();\n    wire_channel();\n    \n    difference() {\n        housing();\n        screw_holes();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "windshield",
    "openscad_code": "// Windshield furniture piece - medium complexity realistic style\n// Overall dimensions: 120mm wide x 50mm deep x 80mm tall\n\n// Main windshield module\nmodule windshield() {\n    // Base frame structure\n    difference() {\n        // Outer frame\n        union() {\n            // Left post\n            translate([-59, 0, 0])\n                cube([4, 50, 80], center=true);\n            // Right post\n            translate([59, 0, 0])\n                cube([4, 50, 80], center=true);\n            // Bottom rail\n            translate([0, 0, -38])\n                cube([120, 50, 4], center=true);\n            // Top rail\n            translate([0, 0, 38])\n                cube([120, 50, 4], center=true);\n        }\n        \n        // Hollow out frame interior\n        translate([0, 0, 0])\n            cube([110, 54, 74], center=true);\n    }\n    \n    // Glass pane\n    difference() {\n        // Main glass\n        translate([0, 0, 0])\n            cube([116, 2, 76], center=true);\n        \n        // Chamfer edges for realistic look\n        translate([0, -2, 0])\n            cube([118, 4, 78], center=true);\n    }\n    \n    // Support brackets (4 corners)\n    for(x = [-55, 55])\n    for(z = [-35, 35]) {\n        translate([x, 25, z])\n            rotate([0, 45, 0])\n            difference() {\n                cube([6, 4, 6], center=true);\n                translate([0, -3, 0])\n                    cube([4, 4, 4], center=true);\n            }\n    }\n    \n    // Mounting bases\n    for(x = [-50, 50]) {\n        // Base plates\n        translate([x, 30, -40])\n            difference() {\n                cube([20, 8, 4], center=true);\n                // Screw holes\n                for(sx = [-7, 7])\n                for(sz = [-1, 1])\n                    translate([sx, 5, sz])\n                        cylinder(h=5, r=2, center=true);\n            }\n    }\n    \n    // Windshield wiper mounts\n    translate([-40, 1, 20])\n        cylinder(h=4, r=3, center=true);\n    translate([40, 1, 20])\n        cylinder(h=4, r=3, center=true);\n    \n    // Strengthening ribs on back\n    for(i = [-30, -10, 10, 30]) {\n        translate([i, -25, 0])\n            cube([2, 48, 60], center=true);\n    }\n    \n    // Realistic edge details\n    for(x = [-58, 58]) {\n        translate([x, 0, -38])\n            difference() {\n                cylinder(h=4, r=2.5, center=true);\n                translate([0, 0, -2])\n                    cylinder(h=8, r=1.5, center=true);\n            }\n        translate([x, 0, 38])\n            difference() {\n                cylinder(h=4, r=2.5, center=true);\n                translate([0, 0, -2])\n                    cylinder(h=8, r=1.5, center=true);\n            }\n    }\n}\n\n// Generate the windshield\nwindshield();",
    "renders": true
  },
  {
    "sports_equipment": "bumper",
    "openscad_code": "// Bumper furniture - corner guard for table edges\n// Dimensions: 100mm x 100mm x 50mm (L-shaped corner guard)\n\nmodule bumper_base() {\n    // Main L-shaped base structure\n    difference() {\n        // Outer L-shape\n        union() {\n            translate([0, 0, 0]) cube([100, 50, 50]);\n            translate([0, 0, 0]) cube([50, 100, 50]);\n        }\n        \n        // Inner L-shape cutout\n        translate([2, 2, 2]) {\n            union() {\n                cube([96, 46, 46]);\n                cube([46, 96, 46]);\n            }\n        }\n    }\n}\n\nmodule grip_pattern() {\n    // Create grip texture on top surface\n    for (x = [10:20:90]) {\n        for (y = [10:20:90]) {\n            if ((x <= 50 || y <= 50) && (x >= 2 && y >= 2)) {\n                translate([x, y, 48]) {\n                    cube([2, 2, 4], center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule mounting_holes() {\n    // Mounting holes for screws\n    hole_positions = [\n        [15, 15, 25],\n        [85, 15, 25],\n        [15, 85, 25]\n    ];\n    \n    for (pos = hole_positions) {\n        translate(pos) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 50, r = 3, $fn = 16);\n            }\n        }\n    }\n}\n\nmodule chamfer_edges() {\n    // Add 45-degree chamfers to outer edges\n    difference() {\n        children();\n        \n        // Top edge chamfers\n        translate([48, 48, 50]) rotate([0, 0, 45]) cube([100, 100, 4]);\n        translate([48, -2, 50]) rotate([0, 0, 45]) cube([100, 100, 4]);\n        translate([-2, 48, 50]) rotate([0, 0, 45]) cube([100, 100, 4]);\n        \n        // Side edge chamfers\n        translate([50, 50, 25]) rotate([0, 45, 0]) cube([4, 100, 50]);\n        translate([50, -2, 25]) rotate([0, 45, 0]) cube([4, 100, 50]);\n        translate([-2, 50, 25]) rotate([0, 45, 0]) cube([4, 100, 50]);\n    }\n}\n\nmodule corner_radius() {\n    // Add radius to inner corner for better fit\n    difference() {\n        children();\n        \n        translate([50, 50, 25]) {\n            rotate([0, 0, 45]) {\n                cylinder(h = 50, r = 5, $fn = 32);\n            }\n        }\n    }\n}\n\nmodule bumper_assembly() {\n    // Combine all components\n    difference() {\n        union() {\n            // Main structure with chamfers\n            chamfer_edges() bumper_base();\n            \n            // Grip pattern\n            grip_pattern();\n        }\n        \n        // Mounting holes\n        mounting_holes();\n        \n        // Corner radius\n        corner_radius();\n    }\n}\n\n// Render the final bumper\nbumper_assembly();",
    "renders": true
  },
  {
    "sports_equipment": "fender",
    "openscad_code": "// Fender furniture item - Realistic style, medium complexity\n// Wall-mounted bike fender shelf for hallway storage\n\n// Overall dimensions\nfender_width = 120;\nfender_height = 80;\nfender_depth = 45;\nwall_thickness = 2;\nshelf_thickness = 3;\n\n// Fender curve parameters\ncurve_segments = 36;\nfender_radius = fender_width * 0.4;\n\n// Mounting bracket parameters\nbracket_width = 30;\nbracket_height = 15;\nbracket_depth = 10;\nbracket_hole_diameter = 5;\n\n// Grip texture parameters\ngrip_width = 3;\ngrip_height = 1;\ngrip_spacing = 6;\n\n// Main fender body module\nmodule fender_body() {\n    difference() {\n        // Outer curved shell\n        linear_extrude(height = fender_depth, convexity = 10)\n        difference() {\n            // Outer curve\n            offset(r = wall_thickness)\n            intersection() {\n                circle(r = fender_radius, $fn = curve_segments);\n                square([fender_width, fender_height * 0.8], center = true);\n            }\n            \n            // Inner cutout\n            offset(r = -wall_thickness)\n            intersection() {\n                circle(r = fender_radius - wall_thickness, $fn = curve_segments);\n                square([fender_width - wall_thickness * 2, fender_height * 0.8 - wall_thickness * 2], center = true);\n            }\n        }\n        \n        // Bottom shelf cutout\n        translate([0, -fender_height * 0.4, 0])\n        cube([fender_width - wall_thickness * 4, wall_thickness, fender_depth], center = true);\n    }\n}\n\n// Grip texture on top surface\nmodule grip_texture() {\n    for (i = [-fender_width/2 + grip_spacing : grip_spacing : fender_width/2 - grip_spacing]) {\n        translate([i, -fender_height * 0.2, fender_depth - grip_height])\n        cube([grip_width, fender_height * 0.6, grip_height], center = true);\n    }\n}\n\n// Mounting brackets\nmodule mounting_brackets() {\n    for (x = [-fender_width/3, fender_width/3]) {\n        // Bracket body\n        translate([x, -fender_height * 0.3, -bracket_depth/2])\n        difference() {\n            cube([bracket_width, bracket_height, bracket_depth], center = true);\n            \n            // Mounting holes\n            translate([0, 0, -bracket_depth/2 - 1])\n            cylinder(h = bracket_depth + 2, r = bracket_hole_diameter/2, $fn = 16, center = true);\n        }\n        \n        // Reinforcement ribs\n        translate([x, -fender_height * 0.3 + bracket_height/2, 0])\n        cube([bracket_width * 0.8, wall_thickness, bracket_depth * 0.8], center = true);\n    }\n}\n\n// Shelf support structure\nmodule shelf_support() {\n    // Main shelf\n    translate([0, fender_height * 0.3, fender_depth/2 - shelf_thickness/2])\n    cube([fender_width * 0.9, shelf_thickness * 2, fender_depth], center = true);\n    \n    // Support ribs underneath\n    for (x = [-fender_width/3, 0, fender_width/3]) {\n        translate([x, fender_height * 0.3 - shelf_thickness, fender_depth/2 - fender_depth/4])\n        cube([5, shelf_thickness * 3, fender_depth/2], center = true);\n    }\n}\n\n// Drainage holes\nmodule drainage_holes() {\n    for (x = [-fender_width/4, fender_width/4]) {\n        translate([x, -fender_height * 0.3, fender_depth - 1])\n        rotate([90, 0, 0])\n        cylinder(h = 5, r = 2, $fn = 16);\n    }\n}\n\n// Assembly\nunion() {\n    // Main fender structure\n    fender_body();\n    \n    // Add grip texture\n    grip_texture();\n    \n    // Add mounting brackets\n    mounting_brackets();\n    \n    // Add shelf support\n    shelf_support();\n    \n    // Add drainage holes\n    drainage_holes();\n}",
    "renders": true
  },
  {
    "sports_equipment": "hood",
    "openscad_code": "// Kitchen Range Hood - Realistic Style, Medium Complexity\n// Dimensions: ~120mm wide, 80mm deep, 100mm tall\n\n// Overall dimensions\nwidth = 120;\ndepth = 80;\nheight = 100;\nwall_thickness = 2;\n\n// Main hood body\nmodule hood_body() {\n    // Outer shell - tapered chimney style\n    difference() {\n        // Main tapered body\n        union() {\n            // Top chimney section\n            translate([0, 0, height * 0.7])\n                cube([width * 0.6, depth * 0.6, height * 0.3], center = true);\n            \n            // Transition section\n            translate([0, 0, height * 0.35])\n                cube([width * 0.8, depth * 0.8, height * 0.5], center = true);\n            \n            // Main hood bottom\n            translate([0, 0, height * 0.15])\n                cube([width, depth, height * 0.3], center = true);\n        }\n        \n        // Inner hollow space\n        translate([0, 0, height * 0.5])\n            cube([width - wall_thickness*2, depth - wall_thickness*2, height * 0.5], center = true);\n    }\n}\n\n// Ventilation grille\nmodule grille() {\n    // Grille frame\n    translate([0, 0, height * 0.15])\n        difference() {\n            cube([width * 0.9, depth * 0.2, 3], center = true);\n            cube([width * 0.85, depth * 0.15, 4], center = true);\n        }\n    \n    // Horizontal slats\n    for (i = [-3:1:3]) {\n        translate([i * 8, 0, height * 0.15])\n            cube([3, depth * 0.15, 2], center = true);\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    translate([width * 0.35, 0, height * 0.5])\n        difference() {\n            // Panel housing\n            cube([width * 0.15, depth * 0.5, 10], center = true);\n            \n            // Buttons (3 round buttons)\n            for (i = [-1:1:1]) {\n                translate([0, i * 10, 3])\n                    cylinder(h = 12, r = 4, center = true);\n            }\n        }\n}\n\n// Mounting bracket\nmodule mounting_bracket() {\n    // Back mounting plate\n    translate([0, -depth/2 - wall_thickness, height * 0.6])\n        cube([width * 0.8, wall_thickness, height * 0.4], center = true);\n    \n    // Support brackets\n    for (x = [-width * 0.3, width * 0.3]) {\n        translate([x, -depth/2 - wall_thickness/2, height * 0.4])\n            rotate([0, 45, 0])\n                cube([wall_thickness * 3, wall_thickness * 3, wall_thickness * 10]);\n    }\n}\n\n// Light fixtures (LED strips)\nmodule lights() {\n    translate([0, depth * 0.3, height * 0.2])\n        difference() {\n            // Light housing\n            cube([width * 0.7, 4, 6], center = true);\n            // Light diffuser\n            translate([0, 0, -1])\n                cube([width * 0.65, 3.5, 4], center = true);\n        }\n}\n\n// Exhaust pipe connection\nmodule exhaust_connection() {\n    translate([0, 0, height])\n        difference() {\n            // Outer pipe\n            cylinder(h = 20, r = width * 0.25, center = false);\n            // Inner pipe\n            cylinder(h = 21, r = width * 0.25 - wall_thickness, center = false);\n        }\n}\n\n// Assembly\nunion() {\n    hood_body();\n    grille();\n    control_panel();\n    mounting_bracket();\n    lights();\n    exhaust_connection();\n}",
    "renders": true
  },
  {
    "sports_equipment": "trunk",
    "openscad_code": "// Realistic 3D printable trunk (medium complexity)\n// Overall size: 120mm x 80mm x 65mm (L x W x H)\n\n$fn=50;  // Smooth curves\n\n// Main module\nmodule trunk() {\n    difference() {\n        union() {\n            // Main body\n            rounded_box([120,80,60], 5);\n            \n            // Bottom base\n            translate([0,0,-2.5])\n                rounded_box([118,78,5], 5);\n            \n            // Metal corner reinforcements\n            for(x=[-55,55])\n            for(y=[-35,35]) {\n                translate([x,y,30])\n                    rotate([0,0,45])\n                    cube([8,8,4], center=true);\n            }\n            \n            // Hinge barrel (back side)\n            translate([0,-40,30])\n                cylinder(h=122, r=4, center=true);\n            \n            // Handle recesses on sides\n            for(side=[-1,1]) {\n                translate([60*side,0,25])\n                    handle_cutout();\n            }\n            \n            // Wood grain texture on top\n            translate([0,0,30.1])\n                wood_grain();\n        }\n        \n        // Handle holes\n        for(side=[-1,1]) {\n            translate([60*side,0,25])\n                rotate([90,0,0])\n                    cylinder(h=30, r=6, center=true);\n        }\n        \n        // Lock keyhole\n        translate([0,35,15])\n            rotate([90,0,0])\n                cylinder(h=10, r=2);\n    }\n}\n\n// Rounded box primitive\nmodule rounded_box(size, radius) {\n    sz = size[2]/2;\n    hull() {\n        for(x=[-1,1])\n        for(y=[-1,1])\n        for(z=[-1,1]) {\n            translate([x*(size[0]/2-radius), y*(size[1]/2-radius), z*sz])\n                sphere(r=radius);\n        }\n    }\n}\n\n// Handle recess detail\nmodule handle_cutout() {\n    difference() {\n        translate([0,0,0])\n            cube([15,30,8], center=true);\n        \n        translate([0,0,2])\n            cube([13,28,6], center=true);\n    }\n}\n\n// Wood grain texture pattern\nmodule wood_grain() {\n    for(i=[-50:5:50]) {\n        translate([i,0,0])\n            cube([0.5,78,0.3]);\n    }\n    for(i=[-35:5:35]) {\n        translate([0,i,0])\n            cube([118,0.5,0.2]);\n    }\n}\n\n// Generate the trunk\ntrunk();",
    "renders": true
  },
  {
    "sports_equipment": "mirror",
    "openscad_code": "// Wall-mounted dressing mirror with wooden frame and shelf\n// Overall dimensions: 120mm (H) × 80mm (W) × 25mm (D)\n\n$fn = 32;  // Smooth curves\n\nmodule frame_profile() {\n    // 2 mm thick frame profile with rounded front edge\n    difference() {\n        cube([8, 8, 2], center = false);\n        translate([0, 0, -0.1])\n            cube([8, 8, 2.2], center = false);\n    }\n}\n\nmodule frame_piece(length, angle = 0) {\n    rotate([0, 0, angle])\n        for (i = [0:1:length-1])\n            translate([i, 0, 0])\n                frame_profile();\n}\n\nmodule mirror_glass(width, height) {\n    // 2 mm thick mirror glass\n    translate([4, 4, 2])\n        cube([width - 8, height - 8, 2]);\n}\n\nmodule frame(width, height) {\n    // Assemble wooden frame\n    union() {\n        // Top and bottom rails\n        translate([0, 0, 0])\n            frame_piece(width);\n        translate([0, height - 8, 0])\n            frame_piece(width);\n        \n        // Left and right stiles\n        translate([0, 0, 0])\n            rotate([0, 0, 90])\n                frame_piece(height);\n        translate([width - 8, 0, 0])\n            rotate([0, 0, 90])\n                frame_piece(height);\n    }\n}\n\nmodule wall_mounts() {\n    // Two keyhole mounts for wall hanging\n    for (x = [30, 50]) {\n        translate([x, 60, 2])\n            cube([6, 20, 2]);\n        translate([x + 1, 61, 2])\n            cube([4, 8, 2]);\n        translate([x + 1, 61, 3])\n            cylinder(h = 2, d = 4);\n        translate([x + 1, 69, 3])\n            cylinder(h = 2, d = 4);\n    }\n}\n\nmodule shelf_supports() {\n    // Triangular shelf brackets\n    for (x = [25, 55]) {\n        translate([x, 0, 0]) {\n            polyhedron(\n                points = [[0, 0, 0], [0, 20, 0], [0, 20, 20], [10, 0, 0], [10, 20, 0], [10, 20, 20]],\n                faces = [[0, 1, 2], [3, 5, 4], [0, 3, 4, 1], [1, 4, 5, 2], [0, 2, 5, 3]]\n            );\n        }\n    }\n}\n\nmodule shelf() {\n    // 2 mm thick shelf with rounded front edge\n    translate([15, 20, 20])\n        difference() {\n            cube([50, 20, 2]);\n            translate([0, 18, 0])\n                cube([50, 4, 2]);\n            translate([-0.1, 18, -0.1])\n                cylinder(h = 2.2, d = 4);\n            translate([50.1, 18, -0.1])\n                cylinder(h = 2.2, d = 4);\n        }\n}\n\n// Main assembly\nunion() {\n    // Mirror frame\n    frame(80, 120);\n    \n    // Mirror glass\n    mirror_glass(80, 120);\n    \n    // Wall mounts\n    wall_mounts();\n    \n    // Shelf supports and shelf\n    shelf_supports();\n    shelf();\n}",
    "renders": true
  },
  {
    "sports_equipment": "seatbelt",
    "openscad_code": "// Seatbelt Chair - Realistic Medium Complexity\n// Inspired by automotive seatbelt furniture design\n\n// Overall dimensions\nchair_width = 120;\nchair_depth = 100;\nchair_height = 140;\nbelt_width = 25;\nwall_thickness = 2;\n\n// Frame module\nmodule frame_base() {\n    // Main frame base - flat platform\n    difference() {\n        cube([chair_width, chair_depth, 5], center=true);\n        translate([0, 0, 2.5])\n            cube([chair_width-4, chair_depth-4, 5.1], center=true);\n    }\n}\n\n// Seatbelt webbing module\nmodule seatbelt_webbing() {\n    color(\"darkblue\")\n    // Bottom belt - seat support\n    translate([0, -20, 3]) {\n        cube([chair_width-40, belt_width, 3], center=true);\n    }\n    \n    // Back belt - lumbar support\n    translate([0, 20, chair_height/2]) {\n        rotate([90, 0, 0])\n        cube([chair_width-40, belt_width, chair_height/2], center=true);\n    }\n    \n    // Side belts - armrest supports\n    for(side = [-1, 1]) {\n        translate([side * (chair_width/2 - 15), 0, chair_height/4]) {\n            rotate([90, 90, 0])\n            cube([chair_height/2, belt_width, 3], center=true);\n        }\n    }\n}\n\n// Belt buckle detail\nmodule buckle() {\n    color(\"silver\")\n    // Main buckle body\n    translate([0, -30, belt_width/2 + 3]) {\n        difference() {\n            cube([belt_width+4, 15, belt_width], center=true);\n            translate([0, 0, -1])\n                cube([belt_width, 11, belt_width+2], center=true);\n        }\n    }\n    \n    // Buckle prong\n    translate([0, -22, belt_width/2 + 3])\n        cylinder(h=15, r=1.5, center=true);\n}\n\n// Frame support posts\nmodule support_posts() {\n    // Back posts\n    for(x = [-chair_width/2 + 15, chair_width/2 - 15]) {\n        translate([x, 25, chair_height/4]) {\n            difference() {\n                cylinder(h=chair_height/2, r=5, center=true);\n                cylinder(h=chair_height/2 + 1, r=3, center=true);\n            }\n        }\n    }\n    \n    // Front posts\n    for(x = [-chair_width/2 + 20, chair_width/2 - 20]) {\n        translate([x, -25, 10]) {\n            difference() {\n                cylinder(h=20, r=5, center=true);\n                cylinder(h=21, r=3, center=true);\n            }\n        }\n    }\n}\n\n// Belt texture details\nmodule belt_texture() {\n    // Horizontal stitching detail\n    for(y = [-chair_depth/2 + 10 : 5 : chair_depth/2 - 10]) {\n        translate([0, y, 4.5]) {\n            color(\"black\")\n            for(x = [-chair_width/2 + 25 : 10 : chair_width/2 - 25]) {\n                translate([x, 0, 0])\n                    cube([1, belt_width/6, 0.5], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    frame_base();\n    support_posts();\n    seatbelt_webbing();\n    buckle();\n    belt_texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "airbag",
    "openscad_code": "// Airbag Furniture – 3D-printable inflatable stool / side-table\n// Overall footprint ≈ 100 mm diameter, height ≈ 120 mm\n// Wall thickness 2 mm, printable on FDM without support\n\n// Parameters\nwall = 2;               // uniform shell thickness for printability\ndia = 100;              // outer diameter of inflated torus\ntube_r = 22;            // tube radius of torus\nh_center = 75;          // height of torus center line\nseat_d = 60;            // diameter of central seating membrane\nseat_t = 2;             // membrane thickness\nvalve_l = 12;           // valve body length\nvalve_r = 4;            // valve body radius\nbase_clear = 0.2;       // printing clearance for bottom base\nsegs = 48;              // smoothness of curves\n\n// Main body: torus (inflated ring)\nmodule torus_body() {\n    difference() {\n        // outer skin\n        rotate_extrude($fn = segs)\n            translate([dia/2, 0, 0])\n                circle(r = tube_r, $fn = segs);\n        // hollow inside\n        rotate_extrude($fn = segs)\n            translate([dia/2, 0, 0])\n                circle(r = tube_r - wall, $fn = segs);\n    }\n}\n\n// Central seating membrane\nmodule seat_membrane() {\n    translate([0, 0, h_center])\n        difference() {\n            cylinder(h = seat_t, r = seat_d/2, $fn = segs);\n            translate([0, 0, -base_clear])\n                cylinder(h = seat_t + 2*base_clear, r = seat_d/2 - wall, $fn = segs);\n        }\n}\n\n// Reinforcing ridges on torus surface for realistic look and print strength\nmodule ridges() {\n    for (a = [0 : 45 : 359]) {\n        rotate([0, 0, a])\n            translate([dia/2, 0, h_center])\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h = tube_r*2, r = 1.5, $fn = 8);\n                        translate([0, 0, wall])\n                            cylinder(h = tube_r*2 - 2*wall, r = 0.5, $fn = 8);\n                    }\n    }\n}\n\n// One-way inflation valve stub\nmodule valve() {\n    translate([dia/2 + tube_r - wall/2, 0, h_center + tube_r - wall - 1])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = valve_l, r = valve_r, $fn = 16);\n                translate([0, 0, wall])\n                    cylinder(h = valve_l, r = valve_r - wall, $fn = 16);\n            }\n}\n\n// Simple flat base ring to avoid rocking on uneven beds\nmodule base_ring() {\n    difference() {\n        cylinder(h = wall, r = dia/2 + tube_r, $fn = segs);\n        cylinder(h = wall + base_clear, r = dia/2 + tube_r - wall, $fn = segs);\n    }\n}\n\n// Assembly\ntranslate([0, 0, wall]) {\n    union() {\n        torus_body();\n        seat_membrane();\n        ridges();\n        valve();\n    }\n}\nbase_ring();",
    "renders": true
  },
  {
    "sports_equipment": "dashboard",
    "openscad_code": "// Dashboard furniture item - Console Table with integrated dashboard design\n// Overall dimensions: 120mm x 40mm x 75mm (L x W x H)\n\n// Parameters\ntable_length = 120;\ntable_width = 40;\ntable_height = 75;\nwall_thickness = 2;\nleg_size = 8;\n\n// Main table top with dashboard features\nmodule table_top() {\n    difference() {\n        // Main tabletop slab\n        cube([table_length, table_width, wall_thickness]);\n        \n        // Instrument panel recess\n        translate([table_length/4, table_width/4, -0.1])\n            cube([table_length/2, table_width/2, wall_thickness+0.2]);\n        \n        // Ventilation slots\n        for(i = [10:10:table_length-20]) {\n            translate([i, 5, -0.1])\n                cube([2, 30, wall_thickness+0.2]);\n        }\n    }\n}\n\n// Dashboard display screen\nmodule display_screen() {\n    translate([table_length/2 - 15, table_width/2 - 10, wall_thickness])\n    difference() {\n        cube([30, 20, 1]);\n        translate([1, 1, -0.1])\n            cube([28, 18, 1.2]);\n    }\n}\n\n// Control buttons panel\nmodule control_buttons() {\n    for(row = [0:1:2]) {\n        for(col = [0:1:3]) {\n            translate([table_length/4 + 5 + col*8, table_width/4 + 5 + row*8, wall_thickness+1])\n                cylinder(h=2, r=2, $fn=16);\n        }\n    }\n}\n\n// LED indicator lights\nmodule indicator_lights() {\n    translate([table_length*0.75, table_width/2, wall_thickness+0.5])\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n            translate([8, 0, 0])\n                cylinder(h=1, r=1.5, $fn=8);\n    }\n}\n\n// Structural legs with support bars\nmodule legs() {\n    // Front legs\n    translate([10, 5, -leg_size])\n        cube([leg_size, leg_size, leg_size+wall_thickness]);\n    \n    translate([table_length-10-leg_size, 5, -leg_size])\n        cube([leg_size, leg_size, leg_size+wall_thickness]);\n    \n    // Back legs\n    translate([10, table_width-leg_size-5, -leg_size])\n        cube([leg_size, leg_size, leg_size+wall_thickness]);\n    \n    translate([table_length-10-leg_size, table_width-leg_size-5, -leg_size])\n        cube([leg_size, leg_size, leg_size+wall_thickness]);\n}\n\n// Lower support shelf\nmodule support_shelf() {\n    translate([0, 0, -leg_size/2])\n    difference() {\n        cube([table_length, table_width, wall_thickness]);\n        \n        // Cable management holes\n        translate([table_length/4, table_width/2, -0.1])\n            cylinder(h=wall_thickness+0.2, r=5, $fn=32);\n        \n        translate([3*table_length/4, table_width/2, -0.1])\n            cylinder(h=wall_thickness+0.2, r=5, $fn=32);\n    }\n}\n\n// Side panels for structural support\nmodule side_panels() {\n    // Left panel\n    translate([5, 0, -leg_size/2])\n        cube([wall_thickness, table_width, leg_size]);\n    \n    // Right panel\n    translate([table_length-5-wall_thickness, 0, -leg_size/2])\n        cube([wall_thickness, table_width, leg_size]);\n}\n\n// Assembly\nunion() {\n    // Main structure\n    table_top();\n    legs();\n    support_shelf();\n    side_panels();\n    \n    // Dashboard features\n    display_screen();\n    control_buttons();\n    indicator_lights();\n}",
    "renders": true
  },
  {
    "sports_equipment": "steering",
    "openscad_code": "// Steering Wheel Desk Mount\n// A clamp-on desk steering wheel stand for racing sim setups\n// ~120mm wide, prints without supports\n\n// Parameters\nwheel_d = 110;           // Steering wheel diameter\nwheel_t = 8;             // Wheel thickness\ngrip_d = 24;             // Grip diameter\nhub_d = 30;              // Hub diameter\nspoke_w = 6;             // Spoke width\nspoke_t = 5;             // Spoke thickness\nclamp_w = 120;           // Clamp width\nclamp_h = 40;            // Clamp height\nclamp_t = 15;            // Clamp thickness\nbolt_d = 6;              // Bolt diameter\n\n// Main wheel assembly\nmodule steering_wheel() {\n    difference() {\n        // Outer wheel rim\n        cylinder(d=wheel_d, h=wheel_t, center=true, $fn=64);\n        \n        // Inner cutout\n        cylinder(d=wheel_d-2*grip_d, h=wheel_t+1, center=true, $fn=64);\n    }\n    \n    // Central hub\n    translate([0,0,0])\n        cylinder(d=hub_d, h=wheel_t+2, center=true, $fn=32);\n    \n    // Spokes - 3 equally spaced\n    for(i=[0:120:359]) {\n        rotate([0,0,i])\n            translate([(hub_d+spoke_w)/2, 0, 0])\n                cube([(wheel_d-hub_d)/2 - grip_d/2, spoke_t, wheel_t], center=true);\n    }\n    \n    // Grip texture rings\n    for(i=[-1:1]) {\n        translate([0,0,i*2.5])\n            difference() {\n                cylinder(d=wheel_d+1, h=1.5, center=true, $fn=64);\n                cylinder(d=wheel_d-2, h=2, center=true, $fn=64);\n            }\n    }\n}\n\n// Clamp mechanism\nmodule desk_clamp() {\n    // Main clamp body\n    difference() {\n        // Lower clamp half\n        translate([0, -clamp_h/2, 0])\n            cube([clamp_w, clamp_h, clamp_t], center=true);\n        \n        // Desk slot (80mm wide, 20mm deep)\n        translate([0, -clamp_h/4, 0])\n            cube([80, clamp_h/2, 25], center=true);\n        \n        // Mounting holes\n        for(x=[-40, 40]) {\n            translate([x, -clamp_h/2, 0])\n                cylinder(d=bolt_d+1, h=clamp_t+2, center=true, $fn=12);\n        }\n    }\n    \n    // Upper clamp half with hinge\n    translate([0, clamp_h/2 - 20, 0])\n        difference() {\n            cube([clamp_w, 40, clamp_t], center=true);\n            // Hinge pin hole\n            translate([clamp_w/2 - 10, -20, 0])\n                rotate([90,0,0])\n                    cylinder(d=4, h=20, center=true, $fn=8);\n        }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    steering_wheel();\n\ntranslate([0, -clamp_h - 20, -wheel_t/2 - clamp_t/2])\n    desk_clamp();\n\n// Reinforcement ribs\nmodule rib(x, y) {\n    translate([x, y, 0])\n        rotate([0,90,0])\n            cylinder(d=8, h=20, center=true, $fn=12);\n}\n\n// Connect wheel to clamp with support arms\ntranslate([0, -25, 0])\n    cube([30, 50, 8], center=true);\n\nfor(x=[-15, 15]) {\n    rib(x, -50);\n}",
    "renders": true
  },
  {
    "sports_equipment": "brake",
    "openscad_code": "// Brake Furniture - Realistic Style, Medium Complexity\n// A furniture piece inspired by automotive brake caliper, sized as a shelf bracket or bookend\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Overall dimensions\nbrake_width = 80;\nbrake_height = 60;\nbrake_depth = 40;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule brake_body() {\n    difference() {\n        // Main caliper body\n        union() {\n            // Central block\n            translate([-brake_width/2, -brake_height/2, 0])\n                cube([brake_width, brake_height, brake_depth]);\n            \n            // Top reinforcement rib\n            translate([-brake_width/2 + 10, brake_height/2 - wall, brake_depth/2])\n                cube([brake_width - 20, wall, brake_depth/2 + wall]);\n            \n            // Bottom reinforcement rib\n            translate([-brake_width/2 + 10, -brake_height/2, brake_depth/2])\n                cube([brake_width - 20, wall, brake_depth/2 + wall]);\n                \n            // Mounting flanges\n            translate([-brake_width/2 - 5, -10, 0])\n                cube([10, 20, wall]);\n            translate([brake_width/2 - 5, -10, 0])\n                cube([10, 20, wall]);\n        }\n        \n        // Cylinder bores (2 pistons)\n        for(i = [-1, 1]) {\n            translate([i * brake_width/4, 0, -wall])\n                cylinder(h = brake_depth + 2*wall, r = 12);\n        }\n        \n        // Weight reduction cutouts\n        translate([-brake_width/2 + 15, -brake_height/2 + 15, wall])\n            cube([brake_width - 30, brake_height - 30, brake_depth - 2*wall]);\n            \n        // Cable routing channel\n        translate([0, brake_height/2 - wall, brake_depth/2])\n            rotate([90, 0, 0])\n                cylinder(h = brake_height, r = 5);\n    }\n}\n\nmodule brake_pads() {\n    // Generate brake pads\n    for(i = [-1, 1]) {\n        // Pad backing plate\n        translate([i * brake_width/4, 0, 0])\n            cube([25, 35, 4], center = true);\n            \n        // Friction material\n        translate([i * brake_width/4, 0, 2])\n            cube([23, 33, 3], center = true);\n    }\n}\n\nmodule mounting_holes() {\n    // Mounting holes for furniture attachment\n    translate([-brake_width/2 - 5, 0, wall/2])\n        rotate([90, 0, 0])\n            cylinder(h = 20, r = 3);\n            \n    translate([brake_width/2 + 5, 0, wall/2])\n        rotate([90, 0, 0])\n            cylinder(h = 20, r = 3);\n            \n    // Additional mounting holes on back\n    for(x = [-30, 30]) {\n        translate([x, -brake_height/2 + 10, brake_depth/2])\n            rotate([0, 90, 0])\n                cylinder(h = 20, r = 3);\n    }\n}\n\nmodule grip_texture() {\n    // Add grip pattern on contact surfaces\n    for(y = [-20:5:20]) {\n        for(z = [5:5:brake_depth-5]) {\n            translate([-brake_width/2 + 2, y, z])\n                cube([wall, 2, 2]);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    brake_body();\n    brake_pads();\n    grip_texture();\n}\n\n// Remove mounting holes\ndifference() {\n    children();\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "sports_equipment": "accelerator",
    "openscad_code": "// Accelerator stool – realistic style, medium complexity\n// Overall footprint ≈ 120 mm diameter, height 110 mm\n// 2 mm wall thickness everywhere for 3D-printability\n\n$fn = 36;               // smooth curves\n\n// --- Parameters -------------------------------------------------\nseat_d       = 80;      // diameter of seat cushion\nseat_h       = 12;      // thickness of seat cushion\nleg_len      = 85;      // vertical length of one leg\nleg_r        = 4;       // leg radius\nleg_wall     = 2;       // wall thickness of hollow legs\nnum_legs     = 3;       // tripod for accelerator look\nfoot_r       = 8;       // radius of foot pads\nfoot_h       = 5;       // height of foot pads\nreinf_h      = 15;      // height of lower reinforcement ring\nring_r       = 35;      // radius of ring\ngrip_r       = 2.5;     // radius of grip dents\ngrip_deep    = 1.5;     // depth of grip dents\n// ---------------------------------------------------------------\n\n// Module: hollow cylinder with wall thickness\nmodule hollow_cyl(or, ir, h, center = false) {\n    difference() {\n        cylinder(r = or, h = h, center = center);\n        cylinder(r = or - leg_wall, h = h + 0.2, center = center);\n    }\n}\n\n// Module: padded seat with grip texture\nmodule seat() {\n    // main cushion\n    difference() {\n        cylinder(r = seat_d/2, h = seat_h);\n        // hollow underside to reduce weight\n        translate([0, 0, 2])\n            cylinder(r = seat_d/2 - leg_wall, h = seat_h);\n    }\n    // grip dents on top surface\n    for(a = [0: 60: 359])\n        rotate([0, 0, a])\n            translate([seat_d/2 - grip_r - 6, 0, seat_h])\n                rotate([90, 0, 0])\n                    cylinder(r = grip_r, h = grip_deep);\n}\n\n// Module: single leg with foot\nmodule leg() {\n    // hollow tube\n    hollow_cyl(leg_r, leg_r - leg_wall, leg_len);\n    // foot pad\n    translate([0, 0, -leg_len/2 - foot_h/2])\n        cylinder(r = foot_r, h = foot_h);\n}\n\n// Module: lower reinforcement ring\nmodule ring() {\n    difference() {\n        cylinder(r = ring_r + 4, h = reinf_h);\n        cylinder(r = ring_r, h = reinf_h + 0.2);\n    }\n}\n\n// Main assembly\nunion() {\n    // seat\n    translate([0, 0, leg_len + seat_h/2])\n        seat();\n\n    // legs in tripod arrangement\n    for(i = [0: num_legs-1]) {\n        angle = i * 120;\n        rotate([0, 0, angle])\n            translate([ring_r, 0, leg_len/2])\n                leg();\n    }\n\n    // lower reinforcement ring\n    translate([0, 0, leg_len*0.3])\n        ring();\n}",
    "renders": true
  },
  {
    "sports_equipment": "clutch",
    "openscad_code": "// Clutch-style handbag with furniture-inspired joinery\n// Overall dimensions: 120 x 70 x 45 mm\n\n$fn = 30;\n\nmodule clutch_body() {\n    difference() {\n        // Main body - slightly curved top\n        hull() {\n            translate([-58, -33, 0]) cube([116, 66, 2]);\n            translate([-58, -33, 40]) cube([116, 66, 2]);\n            translate([-55, -30, 43]) cube([110, 60, 2]);\n        }\n        \n        // Hollow interior with 2mm walls\n        translate([-55, -28, 2]) cube([110, 56, 38]);\n    }\n}\n\nmodule base_frame() {\n    // Furniture-style base frame\n    difference() {\n        // Outer frame\n        hull() {\n            translate([-60, -35, 0]) cube([120, 70, 4]);\n            translate([-58, -33, 0]) cube([116, 66, 6]);\n        }\n        \n        // Inner cutout\n        translate([-58, -33, 0]) cube([116, 66, 10]);\n    }\n}\n\nmodule handle_mount() {\n    // Furniture-inspired mortise-and-tenon style handle mounts\n    translate([-45, 0, 43]) {\n        difference() {\n            cube([12, 25, 8]);\n            translate([2, 2, 2]) cube([8, 21, 6]);\n        }\n    }\n    \n    translate([33, 0, 43]) {\n        difference() {\n            cube([12, 25, 8]);\n            translate([2, 2, 2]) cube([8, 21, 6]);\n        }\n    }\n}\n\nmodule handle() {\n    // Bent wood style handle\n    translate([-40, 12.5, 51]) {\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=80, r=4);\n            translate([0, 0, 2]) cylinder(h=80, r=2);\n        }\n    }\n}\n\nmodule grip_texture() {\n    // Diamond pattern grip texture on sides\n    for (x = [-50:10:50]) {\n        for (y = [-25:10:25]) {\n            if ((x+y) % 20 == 0) {\n                translate([x, y, 41]) \n                scale([1, 0.7, 0.3]) \n                cylinder(h=2, r=3);\n            }\n        }\n    }\n}\n\nmodule clasp_detail() {\n    // Furniture-style clasp mechanism\n    translate([0, -32, 42]) {\n        difference() {\n            union() {\n                cube([20, 4, 6]);\n                translate([8, -2, 3]) cube([4, 8, 2]);\n            }\n            translate([2, 0.5, 2]) cube([16, 3, 4]);\n        }\n    }\n}\n\nmodule support_ribs() {\n    // Internal support structure like furniture bracing\n    for (i = [-40:20:40]) {\n        translate([i, -28, 2]) cube([2, 56, 38]);\n    }\n    for (j = [-20:20:20]) {\n        translate([-55, j, 2]) cube([110, 2, 38]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    clutch_body();\n    base_frame();\n    \n    // Handle system\n    handle_mount();\n    handle();\n    \n    // Details\n    grip_texture();\n    clasp_detail();\n    \n    // Internal structure (visible through opening)\n    support_ribs();\n}",
    "renders": true
  },
  {
    "sports_equipment": "gearbox",
    "openscad_code": "// Gearbox Furniture - Medium Complexity\n// A 3D printable gearbox-shaped furniture piece with structural elements\n\n$fn = 48;\nwall_thickness = 2;\n\n// Main dimensions\ngearbox_length = 80;\ngearbox_width = 60;\ngearbox_height = 50;\nmount_plate_thickness = 4;\nleg_height = 40;\n\n// Module for gear teeth\nmodule gear_teeth(count=12, radius=25, height=10, tooth_height=3) {\n    for (i = [0:count-1]) {\n        rotate([0, 0, i * 360/count]) \n            translate([radius, -tooth_height/2, 0])\n                cube([tooth_height*2, tooth_height, height]);\n    }\n}\n\n// Module for mounting plate with holes\nmodule mounting_plate(width, length, thickness, hole_diameter=4) {\n    difference() {\n        cube([width, length, thickness], center=true);\n        \n        // Mounting holes pattern\n        for (x = [-width/3, 0, width/3]) {\n            for (y = [-length/3, 0, length/3]) {\n                translate([x, y, -thickness/2 - 0.1])\n                    cylinder(h=thickness+0.2, d=hole_diameter, center=true);\n            }\n        }\n    }\n}\n\n// Module for structural rib\nmodule rib(width, height, thickness) {\n    cube([width, thickness, height]);\n}\n\n// Main gearbox body\nmodule gearbox_body() {\n    difference() {\n        // Main housing\n        union() {\n            // Central housing\n            translate([0, 0, gearbox_height/2])\n                cube([gearbox_length, gearbox_width, gearbox_height], center=true);\n            \n            // End caps\n            translate([-gearbox_length/2, 0, gearbox_height/2])\n                cube([wall_thickness*2, gearbox_width, gearbox_height], center=true);\n            translate([gearbox_length/2, 0, gearbox_height/2])\n                cube([wall_thickness*2, gearbox_width, gearbox_height], center=true);\n            \n            // Top and bottom reinforcement\n            translate([0, 0, wall_thickness])\n                cube([gearbox_length + wall_thickness*2, gearbox_width + wall_thickness*2, wall_thickness*2], center=true);\n            translate([0, 0, gearbox_height - wall_thickness])\n                cube([gearbox_length + wall_thickness*2, gearbox_width + wall_thickness*2, wall_thickness*2], center=true);\n        }\n        \n        // Internal cavity\n        translate([0, 0, gearbox_height/2])\n            cube([gearbox_length - wall_thickness*2, gearbox_width - wall_thickness*2, gearbox_height - wall_thickness*2], center=true);\n        \n        // Shaft holes\n        translate([-gearbox_length/4, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=gearbox_width + 1, d=8, center=true);\n        translate([gearbox_length/4, 0, gearbox_height])\n            rotate([90, 0, 0])\n                cylinder(h=gearbox_width + 1, d=8, center=true);\n    }\n}\n\n// Gear detail on top\nmodule gear_detail() {\n    translate([0, 0, gearbox_height + 2])\n    difference() {\n        union() {\n            cylinder(h=8, r=20);\n            gear_teeth(count=16, radius=20, height=8, tooth_height=5);\n        }\n        cylinder(h=10, r=8);\n    }\n}\n\n// Support legs\nmodule legs() {\n    for (x = [-gearbox_length/3, gearbox_length/3]) {\n        for (y = [-gearbox_width/3, gearbox_width/3]) {\n            translate([x, y, -leg_height/2])\n                union() {\n                    cube([8, 8, leg_height], center=true);\n                    // Leg reinforcement\n                    translate([-2, -2, -leg_height/2])\n                        cube([4, 4, leg_height], center=true);\n                }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    gearbox_body();\n    \n    // Top gear detail\n    gear_detail();\n    \n    // Mounting plates\n    translate([0, 0, -wall_thickness/2])\n        mounting_plate(gearbox_length - 10, gearbox_width - 10, mount_plate_thickness);\n    translate([0, 0, gearbox_height + mount_plate_thickness/2])\n        mounting_plate(gearbox_length - 10, gearbox_width - 10, mount_plate_thickness);\n    \n    // Structural ribs\n    rib(gearbox_length - 10, gearbox_height/2, wall_thickness);\n    mirror([1, 0, 0]) rib(gearbox_length - 10, gearbox_height/2, wall_thickness);\n    rotate([0, 0, 90]) {\n        rib(gearbox_width - 10, gearbox_height/2, wall_thickness);\n        mirror([1, 0, 0]) rib(gearbox_width - 10, gearbox_height/2, wall_thickness);\n    }\n    \n    // Support legs\n    legs();\n}",
    "renders": true
  },
  {
    "sports_equipment": "engine",
    "openscad_code": "// Engine Block – furniture-style decorative engine\n// Overall footprint ~120 mm × 80 mm × 100 mm\n\n$fn = 50;              // smooth curves\nwall = 2;              // printable wall thickness\n\n// Helper to round a cylinder\nmodule roundCylinder(h, r1, r2) {\n    cylinder(h=h, r1=r1, r2=r2, center=false);\n}\n\n// Main block ----------------------------------------------------\nmodule engineBlock() {\n    difference() {\n        // Basic block\n        cube([80, 60, 70], center=true);\n        // Light-weighting cavity\n        translate([0,0,2])\n            cube([76-wall*2, 56-wall*2, 66-wall*2], center=true);\n    }\n}\n\n// Cylinder head -------------------------------------------------\nmodule cylinderHead() {\n    difference() {\n        translate([0, 0, 70/2 + 25/2])\n            cube([84, 64, 25], center=true);\n        translate([0,0,70/2 + 25/2])\n            cube([80-wall*2, 60-wall*2, 30], center=true);\n    }\n}\n\n// Four cylinder bores ------------------------------------------\nmodule cylinders() {\n    for (x = [-25, -8, 8, 25]) {\n        translate([x, 0, 70/2 + 25])\n            difference() {\n                roundCylinder(h=30, r1=12, r2=12);\n                roundCylinder(h=35, r1=10, r2=10);\n            }\n    }\n}\n\n// Oil pan -------------------------------------------------------\nmodule oilPan() {\n    difference() {\n        translate([0, 0, -70/2 - 15/2])\n            cube([78, 58, 15], center=true);\n        translate([0,0,-70/2 - 15/2 - 1])\n            cube([74-wall*2, 54-wall*2, 20], center=true);\n    }\n}\n\n// Exhaust manifold ---------------------------------------------\nmodule exhaustManifold() {\n    for (i = [0:3]) {\n        angle = 35;\n        translate([40, -25 + i*16, 70/2 - 20])\n            rotate([0, angle, 0])\n                difference() {\n                    roundCylinder(h=40, r1=6, r2=6);\n                    roundCylinder(h=45, r1=4, r4=4);\n                }\n    }\n}\n\n// Intake manifold ----------------------------------------------\nmodule intakeManifold() {\n    translate([-40, 0, 70/2 - 10])\n        difference() {\n            cube([20, 50, 25], center=true);\n            cube([22, 46, 21], center=true);\n        }\n}\n\n// Motor mounts --------------------------------------------------\nmodule motorMounts() {\n    for (side = [-1, 1]) {\n        translate([side*40, 0, 0])\n            cube([wall*2, 30, 15], center=true);\n    }\n}\n\n// Pulley & belt -------------------------------------------------\nmodule pulley() {\n    translate([0, 40, 0])\n        difference() {\n            cylinder(h=25, r=20, center=true);\n            cylinder(h=30, r=15, center=true);\n        }\n}\n\n// Assembly ------------------------------------------------------\nunion() {\n    engineBlock();\n    cylinderHead();\n    cylinders();\n    oilPan();\n    exhaustManifold();\n    intakeManifold();\n    motorMounts();\n    pulley();\n}",
    "renders": true
  },
  {
    "sports_equipment": "battery",
    "openscad_code": "// Battery Furniture - Modern End Table in the Shape of a D-Cell Battery\n// Overall dimensions: 150mm height, 80mm diameter\n\n// Parameters\nbattery_height = 150;\nbattery_diameter = 80;\nwall_thickness = 2;\nsegments = 64;\n\n// Main battery body - hollow cylinder\nmodule battery_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=battery_height, d=battery_diameter, $fn=segments);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            cylinder(h=battery_height - 2*wall_thickness, d=battery_diameter - 2*wall_thickness, $fn=segments);\n    }\n}\n\n// Positive terminal - raised button on top\nmodule positive_terminal() {\n    translate([0, 0, battery_height])\n        cylinder(h=5, d1=20, d2=25, $fn=segments);\n}\n\n// Negative terminal - flat base with slight recess\nmodule negative_terminal() {\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h=3, d=battery_diameter, $fn=segments);\n            translate([0, 0, 0])\n                cylinder(h=3, d=battery_diameter - 20, $fn=segments);\n        }\n}\n\n// Structural ribs inside for support\nmodule internal_structures() {\n    // Vertical ribs for strength\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([0, (battery_diameter - 2*wall_thickness)/4, wall_thickness])\n                cube([wall_thickness, (battery_diameter - 2*wall_thickness)/2, battery_height - 2*wall_thickness], center=true);\n    }\n    \n    // Horizontal support rings\n    for(h=[battery_height/4, battery_height/2, 3*battery_height/4]) {\n        translate([0, 0, h])\n            difference() {\n                cylinder(h=wall_thickness, d=battery_diameter - 2*wall_thickness - 5, $fn=segments);\n                cylinder(h=wall_thickness, d=battery_diameter - 2*wall_thickness - 10, $fn=segments);\n            }\n    }\n}\n\n// Furniture-specific features - tabletop surface\nmodule tabletop() {\n    // Flat top surface integrated into battery shape\n    translate([0, 0, battery_height - 5])\n        cylinder(h=5, d=battery_diameter - 10, $fn=segments);\n}\n\n// Grip texture rings around the body\nmodule grip_texture() {\n    for(h=[10:15:battery_height-20]) {\n        translate([0, 0, h])\n            difference() {\n                cylinder(h=2, d=battery_diameter + 0.5, $fn=segments);\n                cylinder(h=2, d=battery_diameter - 2, $fn=segments);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    battery_body();\n    positive_terminal();\n    negative_terminal();\n    internal_structures();\n    tabletop();\n    grip_texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "alternator",
    "openscad_code": "// Alternator Lamp - Furniture Item\n// Realistic style, medium complexity\n// Overall size: 120mm tall, 80mm wide, 80mm deep\n\n// Parameters\nwall_thickness = 2;\nbase_width = 80;\nbase_depth = 80;\nbase_height = 15;\nbody_diameter = 60;\nbody_height = 70;\npulley_diameter = 30;\npulley_thickness = 15;\nshaft_diameter = 8;\nshaft_length = 25;\nmount_hole_diameter = 4;\nmount_hole_spacing = 60;\n\n// Base module with mounting holes\nmodule base() {\n    difference() {\n        // Main base\n        cube([base_width, base_depth, base_height], center=true);\n        \n        // Mounting holes\n        for (i = [0:1]) {\n            translate([mount_hole_spacing/2 - i*mount_hole_spacing, 0, -base_height/2])\n                cylinder(h=base_height+1, d=mount_hole_diameter, center=true);\n        }\n    }\n}\n\n// Alternator body with fins\nmodule alternator_body() {\n    // Main cylindrical body\n    cylinder(h=body_height, d=body_diameter, center=true);\n    \n    // Cooling fins\n    for (i = [0:11]) {\n        rotate([0, 0, i*30])\n            translate([body_diameter/2 - 2, 0, -body_height/2])\n                cube([4, 8, body_height], center=true);\n    }\n}\n\n// Pulley assembly\nmodule pulley() {\n    // Main pulley\n    cylinder(h=pulley_thickness, d=pulley_diameter, center=true);\n    \n    // Pulley grooves\n    for (i = [-1:1]) {\n        translate([0, 0, i*4])\n            cylinder(h=2, d=pulley_diameter-4, center=true);\n    }\n}\n\n// Shaft\nmodule shaft() {\n    cylinder(h=shaft_length, d=shaft_diameter, center=true);\n}\n\n// Terminal block\nmodule terminal_block() {\n    translate([body_diameter/2 - 10, 0, body_height/4])\n        cube([20, 15, 10], center=true);\n}\n\n// Lamp shade mount\nmodule lamp_mount() {\n    translate([0, 0, body_height/2 + 15])\n        cylinder(h=30, d1=40, d2=60, center=true);\n}\n\n// Wire exit detail\nmodule wire_exit() {\n    translate([body_diameter/2 - 5, 0, -body_height/3])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=5, center=true);\n}\n\n// Main assembly\nunion() {\n    // Base\n    translate([0, 0, -base_height/2])\n        base();\n    \n    // Alternator body\n    translate([0, 0, base_height/2 + body_height/2])\n        alternator_body();\n    \n    // Pulley\n    translate([0, 0, base_height/2 + body_height + pulley_thickness/2])\n        pulley();\n    \n    // Shaft\n    translate([0, 0, base_height/2 + body_height + pulley_thickness + shaft_length/2])\n        shaft();\n    \n    // Terminal block\n    translate([0, 0, base_height/2 + body_height/2])\n        terminal_block();\n    \n    // Lamp mount\n    translate([0, 0, base_height/2])\n        lamp_mount();\n    \n    // Wire exit\n    translate([0, 0, base_height/2 + body_height/2])\n        wire_exit();\n}",
    "renders": true
  },
  {
    "sports_equipment": "muffler",
    "openscad_code": "// Muffler furniture - medium complexity realistic style\n// Overall dimensions: 120mm length x 60mm width x 60mm height\n\nmodule muffler_body() {\n    // Main cylindrical body with wall thickness\n    difference() {\n        cylinder(h=100, d=50, $fn=64);\n        translate([0, 0, -1])\n            cylinder(h=102, d=46, $fn=64);\n    }\n}\n\nmodule inlet_pipe() {\n    // Left inlet pipe\n    translate([-45, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=25, d=20, $fn=32);\n    \n    // Inlet flange\n    translate([-45, 0, -2])\n        rotate([90, 0, 0])\n            cylinder(h=4, d=30, $fn=32);\n}\n\nmodule outlet_pipe() {\n    // Right outlet pipe\n    translate([45, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=25, d=20, $fn=32);\n    \n    // Outlet flange\n    translate([45, 0, -2])\n        rotate([90, 0, 0])\n            cylinder(h=4, d=30, $fn=32);\n}\n\nmodule mounting_brackets() {\n    // Top mounting brackets\n    for(i = [-1, 1]) {\n        translate([0, i*25, 30])\n            cube([8, 4, 15], center=true);\n    }\n    \n    // Bracket holes\n    for(i = [-1, 1]) {\n        translate([0, i*25, 37])\n            cylinder(h=8, d=4, center=true, $fn=16);\n    }\n}\n\nmodule heat_shield() {\n    // Perforated heat shield\n    difference() {\n        // Main shield\n        translate([0, 0, 25])\n            cube([80, 55, 2], center=true);\n        \n        // Perforation holes\n        for(x = [-30:10:30]) {\n            for(y = [-20:10:20]) {\n                translate([x, y, 26])\n                    cylinder(h=3, d=3, $fn=8);\n            }\n        }\n    }\n}\n\nmodule structural_ribs() {\n    // Reinforcement ribs along body\n    for(i = [-30:20:30]) {\n        translate([i, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=50, d=3, $fn=16);\n    }\n}\n\nmodule end_caps() {\n    // Left end cap\n    translate([-50, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=2, d=50, $fn=64);\n    \n    // Right end cap\n    translate([50, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=2, d=50, $fn=64);\n}\n\nmodule baffle_plates() {\n    // Internal baffles for realistic appearance\n    for(i = [-25:25:25]) {\n        translate([i, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=1, d=48, $fn=64);\n    }\n}\n\n// Assembly\nunion() {\n    muffler_body();\n    inlet_pipe();\n    outlet_pipe();\n    mounting_brackets();\n    heat_shield();\n    structural_ribs();\n    end_caps();\n    baffle_plates();\n}",
    "renders": true
  },
  {
    "sports_equipment": "exhaust",
    "openscad_code": "$fn = 50;\n\n// Exhaust furniture – 3D printable wall shelf shaped like a motorcycle exhaust\n// Overall print size: 100 mm long × 60 mm deep × 80 mm tall\n\n// Main body shell – hollow cylinder with wall thickness 2 mm\nmodule exhaust_body() {\n    difference() {\n        cylinder(h = 90, d = 60);          // outer cylinder\n        translate([0, 0, -1])\n            cylinder(h = 92, d = 56);      // inner hollow\n    }\n}\n\n// Front perforated grill plate\nmodule front_grill() {\n    difference() {\n        translate([0, 0, 90])\n            cylinder(h = 2, d = 60);       // grill plate\n        for (a = [0:30:359])               // 12 holes Ø5 mm\n            rotate([0, 0, a])\n                translate([20, 0, 90])\n                    cylinder(h = 3, d = 5);\n    }\n}\n\n// Rear mounting plate with keyhole slots for wall screws\nmodule rear_mount() {\n    difference() {\n        translate([0, 0, -5])\n            cube([80, 60, 5], center = true);\n        // two keyholes 4 mm wide for M4 screws\n        translate([-20, 0, -5.5])\n            cylinder(h = 6, d = 8);\n        translate([-20, 0, -5.5])\n            cube([15, 4, 6], center = true);\n        translate([20, 0, -5.5])\n            cylinder(h = 6, d = 8);\n        translate([20, 0, -5.5])\n            cube([15, 4, 6], center = true);\n    }\n}\n\n// Heat shield fins – thin radial ribs for aesthetics\nmodule heat_shield() {\n    for (i = [1:6]) {\n        rotate([0, 0, i * 60])\n            translate([30, 0, 0])\n                cube([2, 4, 90], center = true);\n    }\n}\n\n// Exhaust hanger brackets (structural shelf supports)\nmodule hanger_brackets() {\n    // left bracket\n    translate([-35, 0, 45])\n        rotate([0, 90, 0])\n            cylinder(h = 20, d = 8);\n    translate([-35, 0, 45])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 20, d = 8);\n                cylinder(h = 22, d = 4);\n            }\n    // right bracket\n    translate([35, 0, 45])\n        rotate([0, 90, 0])\n            cylinder(h = 20, d = 8);\n    translate([35, 0, 45])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 20, d = 8);\n                cylinder(h = 22, d = 4);\n            }\n}\n\n// Assembly\nunion() {\n    exhaust_body();\n    front_grill();\n    rear_mount();\n    heat_shield();\n    hanger_brackets();\n}",
    "renders": true
  },
  {
    "sports_equipment": "chassis",
    "openscad_code": "// Furniture Chassis - Modern TV Stand Base\n// Overall dimensions: 120mm wide x 40mm deep x 60mm tall\n\nmodule frame_side() {\n    // Side frame profile - 30x60mm rectangle with rounded corners\n    difference() {\n        // Main frame body\n        cube([30, 40, 60]);\n        \n        // Cutout for weight reduction\n        translate([5, 5, 10])\n        cube([20, 30, 40]);\n        \n        // Cable management hole (10mm diameter, 15mm from bottom)\n        translate([15, -1, 15])\n        rotate([0, 90, 0])\n        cylinder(h=42, r=5, $fn=20);\n    }\n}\n\nmodule frame_support() {\n    // Horizontal support beam\n    difference() {\n        cube([120, 40, 8]);\n        \n        // Weight reduction pattern\n        for(x = [10:20:110]) {\n            translate([x, 5, 2])\n            cube([10, 30, 4]);\n        }\n    }\n}\n\nmodule leg() {\n    // Tapered leg with foot\n    union() {\n        // Upper leg section\n        cylinder(h=50, r1=4, r2=3, $fn=16);\n        \n        // Foot pad\n        translate([0, 0, -2])\n        cylinder(h=4, r1=5, r2=5, $fn=16);\n        \n        // Internal support rib\n        translate([-2, 0, 0])\n        cube([4, 2, 50]);\n    }\n}\n\nmodule shelf_support() {\n    // Shelf bracket with reinforcement\n    union() {\n        // Main bracket\n        translate([0, 0, 0])\n        cube([20, 3, 15]);\n        \n        // Triangular gusset\n        translate([0, 3, 0])\n        polyhedron(\n            points=[[0,0,0], [20,0,0], [20,0,15], [0,10,0], [20,10,0], [20,10,15]],\n            faces=[[0,1,2], [3,4,5], [0,3,4,1], [1,4,5,2], [0,2,5,3], [0,1,4,3]]\n        );\n    }\n}\n\nmodule back_panel() {\n    // Perforated back panel for ventilation\n    difference() {\n        // Main panel\n        translate([0, 38, 0])\n        cube([120, 2, 60]);\n        \n        // Ventilation holes\n        for(y = [10:10:50]) {\n            for(x = [10:10:110]) {\n                translate([x, 38, y])\n                cylinder(h=3, r=3, $fn=8);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Left frame\n    translate([0, 0, 0])\n    frame_side();\n    \n    // Right frame\n    translate([90, 0, 0])\n    mirror([1,0,0])\n    frame_side();\n    \n    // Bottom support\n    translate([0, 0, 0])\n    frame_support();\n    \n    // Top support\n    translate([0, 0, 52])\n    frame_support();\n    \n    // Legs - 4 corners\n    translate([10, 5, -4])\n    leg();\n    translate([110, 5, -4])\n    leg();\n    translate([10, 35, -4])\n    leg();\n    translate([110, 35, -4])\n    leg();\n    \n    // Shelf supports - 2 per side\n    for(x = [20, 100]) {\n        translate([x, 20, 25])\n        shelf_support();\n    }\n    \n    // Back panel\n    back_panel();\n    \n    // Cable management tray\n    translate([10, 10, 10])\n    difference() {\n        cube([100, 20, 8]);\n        translate([5, 5, 2])\n        cube([90, 10, 4]);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "suspension",
    "openscad_code": "// Suspension furniture - Hanging chair frame\n// Realistic style, medium complexity\n\n// Parameters\nchair_width = 45;\nchair_depth = 30;\nchair_height = 50;\nrod_diameter = 8;\nrope_diameter = 3;\nframe_thickness = 2;\nseat_thickness = 3;\n\n// Main frame module\nmodule chair_frame() {\n    // Top support rod\n    translate([0, 0, chair_height]) \n        cylinder(h=chair_width, d=rod_diameter, center=true);\n    \n    // Side frame - left\n    translate([-chair_width/2 + frame_thickness/2, 0, chair_height/2]) \n        cube([frame_thickness, chair_depth*0.8, chair_height]);\n    \n    // Side frame - right\n    translate([chair_width/2 - frame_thickness/2, 0, chair_height/2]) \n        cube([frame_thickness, chair_depth*0.8, chair_height]);\n    \n    // Back frame\n    translate([0, -chair_depth/2 + frame_thickness/2, chair_height/2]) \n        cube([chair_width - frame_thickness*2, frame_thickness, chair_height]);\n    \n    // Bottom frame\n    translate([0, 0, frame_thickness/2]) \n        cube([chair_width - frame_thickness*2, chair_depth - frame_thickness*2, frame_thickness]);\n}\n\n// Seat mesh\nmodule seat_mesh() {\n    // Seat surface\n    translate([0, 0, frame_thickness + seat_thickness/2])\n        cube([chair_width - frame_thickness*4, chair_depth - frame_thickness*4, seat_thickness]);\n    \n    // Weave pattern\n    for(i = [-10:2:10]) {\n        translate([i, 0, frame_thickness + seat_thickness + 0.5])\n            cube([0.5, chair_depth - frame_thickness*4 - 2, 1]);\n    }\n    for(j = [-5:2:5]) {\n        translate([0, j, frame_thickness + seat_thickness + 0.5])\n            cube([chair_width - frame_thickness*4 - 2, 0.5, 1]);\n    }\n}\n\n// Rope attachments\nmodule rope_attachments() {\n    // Left rope\n    translate([-chair_width/2 + 5, chair_depth/2 - 5, chair_height + rod_diameter/2 + 2])\n        cylinder(h=10, d=rope_diameter);\n    translate([-chair_width/2 + 5, chair_depth/2 - 5, chair_height + rod_diameter/2 + 7])\n        sphere(d=rope_diameter*1.5);\n    \n    // Right rope\n    translate([chair_width/2 - 5, chair_depth/2 - 5, chair_height + rod_diameter/2 + 2])\n        cylinder(h=10, d=rope_diameter);\n    translate([chair_width/2 - 5, chair_depth/2 - 5, chair_height + rod_diameter/2 + 7])\n        sphere(d=rope_diameter*1.5);\n    \n    // Front ropes\n    for(pos = [-chair_width/3, chair_width/3]) {\n        translate([pos, -chair_depth/2 + 5, chair_height + rod_diameter/2 + 2])\n            cylinder(h=10, d=rope_diameter);\n        translate([pos, -chair_depth/2 + 5, chair_height + rod_diameter/2 + 7])\n            sphere(d=rope_diameter*1.5);\n    }\n}\n\n// Back support\nmodule back_support() {\n    // Backrest frame\n    translate([0, -chair_depth/2 + frame_thickness*2, chair_height/2 + 5])\n        cube([chair_width - frame_thickness*6, frame_thickness, chair_height/2]);\n    \n    // Support bars\n    for(pos = [-chair_width/4, 0, chair_width/4]) {\n        translate([pos, -chair_depth/2 + frame_thickness*2, chair_height/4 + 5])\n            cube([frame_thickness, frame_thickness, chair_height/2]);\n    }\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    seat_mesh();\n    rope_attachments();\n    back_support();\n}",
    "renders": true
  },
  {
    "sports_equipment": "spring",
    "openscad_code": "// Spring Chair - A 3D printable spring-inspired furniture piece\n// Combines a helical spring base with a seating platform\n\n// Parameters for printability and proportions\nspring_radius = 20;\nspring_height = 80;\nspring_wire_diameter = 4;\nspring_coils = 8;\nseat_thickness = 2;\nleg_thickness = 3;\n\nmodule spring_coil() {\n    // Creates one revolution of the spring\n    for (i = [0:spring_coils * 20]) {\n        rotate([0, 0, i * 18])\n        translate([spring_radius, 0, i * spring_height / (spring_coils * 20)])\n        rotate([90, 0, 0])\n        cylinder(h = spring_wire_diameter, d = spring_wire_diameter, $fn = 8);\n    }\n}\n\nmodule spring_base() {\n    // Bottom support ring for stability\n    difference() {\n        cylinder(h = spring_wire_diameter * 2, r = spring_radius + spring_wire_diameter, $fn = 32);\n        cylinder(h = spring_wire_diameter * 2 + 1, r = spring_radius - spring_wire_diameter, $fn = 32);\n    }\n}\n\nmodule seat_platform() {\n    // Circular seat with grip texture\n    difference() {\n        // Main seat\n        cylinder(h = seat_thickness, r = spring_radius + 15, $fn = 32);\n        \n        // Central hole for spring attachment\n        cylinder(h = seat_thickness + 1, r = spring_radius - 5, $fn = 32);\n    }\n    \n    // Grip texture rings\n    for (ring = [1:3]) {\n        translate([0, 0, seat_thickness - 0.5])\n        cylinder(h = 1, r = (spring_radius + 15) * (0.8 + ring * 0.05), $fn = 32);\n    }\n}\n\nmodule spring_supports() {\n    // Vertical supports connecting spring to seat\n    for (angle = [0:120:359]) {\n        rotate([0, 0, angle])\n        translate([spring_radius - 5, 0, spring_height])\n        rotate([90, 0, 0])\n        cylinder(h = 10, d = leg_thickness, $fn = 6);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    translate([0, 0, 0])\n    spring_base();\n    \n    // Main spring structure\n    translate([0, 0, spring_wire_diameter * 2])\n    spring_coil();\n    \n    // Seat platform\n    translate([0, 0, spring_height + spring_wire_diameter * 2])\n    seat_platform();\n    \n    // Support legs\n    spring_supports();\n}\n\n// Hidden support cylinder for 3D printing (removable after print)\ntranslate([0, 0, spring_wire_diameter * 2])\ncylinder(h = spring_height - 5, r = spring_wire_diameter, $fn = 6);",
    "renders": true
  },
  {
    "sports_equipment": "shock",
    "openscad_code": "// Shock absorber furniture stool\n// Overall dimensions: ~140mm diameter, ~120mm height\n// Wall thickness: 2mm throughout\n\n$fn=50;\n\nmodule shock_stool() {\n    // Base cylinder - outer shell\n    difference() {\n        cylinder(h=120, d=140);\n        translate([0,0,2])\n            cylinder(h=116, d=136);\n    }\n    \n    // Top seat surface\n    translate([0,0,118])\n    difference() {\n        cylinder(h=4, d=140);\n        translate([0,0,2])\n            cylinder(h=2, d=136);\n    }\n    \n    // Internal spring structure\n    for(i=[0:5:110]) {\n        translate([0,0,i+5])\n        rotate([0,0,i*30])\n        spring_coil();\n    }\n    \n    // Top mounting plate\n    translate([0,0,110])\n    difference() {\n        cylinder(h=8, d=120);\n        translate([0,0,2])\n            cylinder(h=6, d=116);\n    }\n    \n    // Bottom mounting plate\n    translate([0,0,0])\n    difference() {\n        cylinder(h=8, d=120);\n        translate([0,0,2])\n            cylinder(h=6, d=116);\n    }\n    \n    // Reinforcement ribs\n    for(angle=[0:30:330]) {\n        rotate([0,0,angle])\n        translate([55,0,4])\n        rib_structure();\n    }\n    \n    // Grip texture rings on outer shell\n    for(i=[10:15:100]) {\n        translate([0,0,i])\n        difference() {\n            cylinder(h=2, d=144);\n            cylinder(h=2, d=140);\n        }\n    }\n    \n    // Air valve detail\n    translate([60,0,60])\n    rotate([0,90,0])\n    cylinder(h=8, d=6);\n    \n    translate([60,0,60])\n    rotate([0,90,0])\n    cylinder(h=4, d=3);\n}\n\nmodule spring_coil() {\n    // Single coil of the spring\n    torus(60, 2, 2);\n}\n\nmodule torus(outer, inner, height) {\n    rotate_extrude()\n    translate([outer-inner, 0])\n    circle(r=inner);\n}\n\nmodule rib_structure() {\n    // Vertical strengthening rib\n    difference() {\n        cube([10, 4, 112]);\n        translate([2,2,2])\n        cube([6, 0, 108]);\n    }\n}\n\nshock_stool();",
    "renders": true
  },
  {
    "sports_equipment": "tire",
    "openscad_code": "// Tire Stool - Realistic style, medium complexity\n// Dimensions: 90mm diameter tire, 100mm height, 2mm wall thickness\n\nmodule tire_base() {\n    // Main torus tire body\n    difference() {\n        // Outer tire\n        rotate_extrude($fn=64)\n            translate([45, 0, 0])\n                circle(r=12);\n        \n        // Inner hole\n        rotate_extrude($fn=64)\n            translate([30, 0, 0])\n                circle(r=12);\n    }\n}\n\nmodule tire_tread() {\n    // Tread pattern - repeating blocks around tire\n    for (i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n            translate([45, 0, 15])\n                cube([8, 2, 4], center=true);\n    }\n}\n\nmodule seat_platform() {\n    // Top seating surface\n    difference() {\n        // Main seat\n        cylinder(h=4, r=40, $fn=32);\n        \n        // Lightening holes\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([25, 0, -1])\n                    cylinder(h=6, r=8, $fn=16);\n        }\n    }\n}\n\nmodule support_leg() {\n    // Central support column\n    difference() {\n        cylinder(h=60, r=15, $fn=32);\n        \n        // Hollow center for weight reduction\n        cylinder(h=62, r=12, $fn=32);\n    }\n}\n\nmodule leg_base() {\n    // Bottom support flange\n    difference() {\n        cylinder(h=6, r=35, $fn=32);\n        \n        // Mounting holes\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([25, 0, -1])\n                    cylinder(h=8, r=3, $fn=16);\n        }\n    }\n}\n\nmodule tire_texture() {\n    // Sidewall texture lines\n    for (j = [0:1]) {\n        translate([0, 0, j * 30 - 15])\n            for (i = [0:31]) {\n                rotate([0, 0, i * 11.25])\n                    translate([40, 0, 0])\n                        cube([0.5, 0.5, 2], center=true);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Tire assembly\n    union() {\n        tire_base();\n        tire_tread();\n        tire_texture();\n    }\n    \n    // Seating structure\n    translate([0, 0, 30]) {\n        seat_platform();\n        support_leg();\n    }\n    \n    // Base\n    translate([0, 0, -36]) {\n        leg_base();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "wheel",
    "openscad_code": "// Wheel Furniture Item - Office Chair Caster Wheel\n// Realistic style, medium complexity\n// Overall dimensions: ~60mm diameter x 75mm height\n\n// Parameters\n$fn = 32;\nwheel_diameter = 50;\nwheel_width = 20;\ntire_thickness = 4;\nhub_diameter = 20;\naxle_diameter = 8;\nfork_width = 12;\nfork_height = 40;\nstem_diameter = 10;\nstem_length = 25;\nbearing_balls = 8;\nbearing_ball_diameter = 3;\n\n// Main wheel assembly\nmodule wheel_assembly() {\n    // Tire with tread pattern\n    difference() {\n        union() {\n            // Main tire\n            cylinder(d=wheel_diameter, h=wheel_width, center=true);\n            \n            // Tread pattern - raised ribs\n            for(i=[-wheel_width/2+2 : 4 : wheel_width/2-2]) {\n                translate([0, 0, i])\n                    cylinder(d=wheel_diameter+1, h=1, center=true);\n            }\n        }\n        \n        // Remove center for hub\n        cylinder(d=hub_diameter, h=wheel_width+2, center=true);\n    }\n    \n    // Hub\n    translate([0, 0, 0])\n        cylinder(d=hub_diameter, h=wheel_width-2, center=true);\n    \n    // Ball bearings\n    for(i=[0:360/bearing_balls:359]) {\n        rotate([0, 0, i])\n            translate([(hub_diameter-axle_diameter)/4, 0, 0])\n                sphere(d=bearing_ball_diameter, center=true);\n    }\n    \n    // Axle hole\n    rotate([90, 0, 0])\n        cylinder(d=axle_diameter, h=wheel_width+2, center=true);\n}\n\n// Fork assembly\nmodule fork_assembly() {\n    // Fork arms\n    translate([0, 0, -fork_height/2])\n        cylinder(d=fork_width, h=fork_height, center=true);\n    \n    // Fork arms - side supports\n    translate([wheel_diameter/2+fork_width/2, 0, -fork_height/2])\n        cube([fork_width, fork_width, fork_height], center=true);\n    \n    mirror([1, 0, 0])\n        translate([wheel_diameter/2+fork_width/2, 0, -fork_height/2])\n            cube([fork_width, fork_width, fork_height], center=true);\n    \n    // Axle pin\n    translate([0, 0, -fork_height])\n        rotate([90, 0, 0])\n            cylinder(d=axle_diameter, h=fork_width*2, center=true);\n    \n    // Fork crown\n    translate([0, 0, -fork_height])\n        cylinder(d=fork_width*2, h=fork_width, center=true);\n    \n    // Stem socket\n    translate([0, 0, -fork_height-fork_width/2])\n        cylinder(d=fork_width*1.5, h=fork_width/2, center=true);\n}\n\n// Swivel stem\nmodule swivel_stem() {\n    // Stem\n    translate([0, 0, -fork_height-fork_width])\n        cylinder(d=stem_diameter, h=stem_length, center=false);\n    \n    // Stem connector\n    translate([0, 0, -fork_height-fork_width-stem_length/2])\n        cylinder(d=stem_diameter*1.5, h=stem_length/2, center=true);\n    \n    // Locking groove\n    translate([0, 0, -fork_height-fork_width-stem_length/4])\n        cylinder(d=stem_diameter-2, h=stem_length/8, center=true);\n}\n\n// Assembly\nunion() {\n    // Wheel\n    translate([0, 0, 0])\n        wheel_assembly();\n    \n    // Fork\n    translate([0, 0, 0])\n        fork_assembly();\n    \n    // Swivel stem\n    translate([0, 0, 0])\n        swivel_stem();\n    \n    // Brake pad (optional furniture feature)\n    translate([0, wheel_diameter/2+2, -wheel_width/2-2])\n        cube([wheel_width, 4, wheel_width/2], center=false);\n}",
    "renders": true
  },
  {
    "sports_equipment": "hubcap",
    "openscad_code": "// Hubcap Furniture - Wall-mounted shelf with hubcap design\n// Overall diameter: 120mm, depth: 35mm\n\n$fn = 36;\n\n// Main hubcap dish\nmodule hubcap_dish() {\n    difference() {\n        // Outer dish shape\n        cylinder(h = 30, r1 = 60, r2 = 55);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = 30, r1 = 58, r2 = 53);\n    }\n}\n\n// Central mounting boss\nmodule mounting_boss() {\n    difference() {\n        // Boss cylinder\n        translate([0, 0, 0])\n            cylinder(h = 32, r = 15);\n        \n        // Mounting holes pattern\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n                translate([10, 0, 15])\n                    rotate([90, 0, 0])\n                        cylinder(h = 20, r = 3);\n        }\n        \n        // Central through hole\n        translate([0, 0, -1])\n            cylinder(h = 34, r = 5);\n    }\n}\n\n// Spoke-like shelf supports\nmodule shelf_supports() {\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([30, -3, 30])\n                cube([25, 6, 3]);\n        }\n    }\n}\n\n// Circular shelf surface\nmodule shelf_surface() {\n    difference() {\n        // Main shelf\n        translate([0, 0, 33])\n            cylinder(h = 2, r = 55);\n        \n        // Lightening holes\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([30, 0, 33])\n                    cylinder(h = 3, r = 8);\n        }\n    }\n}\n\n// Rim detail with grip texture\nmodule rim_detail() {\n    difference() {\n        // Outer rim\n        translate([0, 0, 0])\n            cylinder(h = 5, r = 60);\n        \n        // Grip grooves\n        for(i = [0:35]) {\n            rotate([0, 0, i * 10])\n                translate([58, -1, 0])\n                    cube([2, 2, 5]);\n        }\n    }\n}\n\n// Back mounting plate\nmodule mounting_plate() {\n    difference() {\n        // Plate\n        translate([0, 0, -2])\n            cylinder(h = 2, r = 50);\n        \n        // Keyhole slots for wall mounting\n        translate([20, 0, -2.5])\n            rotate([0, 0, 0])\n                cube([15, 6, 3]);\n        translate([20, 0, -2.5])\n            cylinder(h = 3, r = 3);\n        \n        translate([-20, 0, -2.5])\n            rotate([0, 0, 180])\n                cube([15, 6, 3]);\n        translate([-20, 0, -2.5])\n            cylinder(h = 3, r = 3);\n    }\n}\n\n// Assembly\nunion() {\n    hubcap_dish();\n    mounting_boss();\n    shelf_supports();\n    shelf_surface();\n    rim_detail();\n    mounting_plate();\n}",
    "renders": true
  },
  {
    "sports_equipment": "axle",
    "openscad_code": "// Axle Furniture - Barbell Weight Storage Rack\n// Realistic medium complexity OpenSCAD model\n// Dimensions: 120mm width x 80mm depth x 100mm height\n\n$fn = 32;\n\n// Main dimensions\nrack_width = 120;\nrack_depth = 80;\nrack_height = 100;\nwall_thickness = 2;\n\n// Barbell axle dimensions\naxle_diameter = 25;\naxle_length = 110;\ngrip_length = 80;\ncollar_diameter = 30;\ncollar_thickness = 5;\n\n// Base dimensions\nbase_height = 8;\nbase_width = rack_width;\nbase_depth = rack_depth;\n\n// Support post dimensions\npost_width = 4;\npost_height = rack_height - base_height;\npost_depth = rack_depth - 20;\n\n// Weight plate dimensions\nplate_diameter = 35;\nplate_thickness = 3;\nplate_hole = axle_diameter + 2;\n\nmodule base() {\n    difference() {\n        // Main base\n        translate([0, 0, base_height/2])\n            cube([base_width, base_depth, base_height], center=true);\n        \n        // Lightening holes\n        for (x = [-40, 0, 40]) {\n            for (y = [-25, 0, 25]) {\n                if (abs(x) + abs(y) > 20) {\n                    translate([x, y, base_height/2])\n                        cylinder(h=base_height+1, d=6, center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule support_post(x_pos) {\n    difference() {\n        // Main post\n        translate([x_pos, 0, rack_height - post_height/2])\n            cube([post_width, post_depth, post_height], center=true);\n        \n        // Cable management holes\n        translate([x_pos, 0, rack_height - 30])\n            rotate([0, 90, 0])\n                cylinder(h=post_width+1, d=6, center=true);\n    }\n}\n\nmodule axle_support(x_pos) {\n    // Main cradle\n    difference() {\n        translate([x_pos, 0, rack_height - 10])\n            cube([30, 20, 20], center=true);\n        \n        // Semicircular cutout for axle\n        translate([x_pos, 0, rack_height - 20])\n            rotate([90, 0, 0])\n                cylinder(h=30+1, d=axle_diameter+4, center=true);\n    }\n    \n    // Grip texture ridges\n    for (i = [-2:2]) {\n        translate([x_pos + i*5, 0, rack_height - 5])\n            cube([1, 22, 10], center=true);\n    }\n}\n\nmodule weight_plate() {\n    difference() {\n        // Main plate\n        cylinder(h=plate_thickness, d=plate_diameter, center=true);\n        \n        // Center hole\n        cylinder(h=plate_thickness+1, d=plate_hole, center=true);\n        \n        // Grip holes\n        for (i = [0:5]) {\n            rotate([0, 0, i*60])\n                translate([plate_diameter/2 - 5, 0, 0])\n                    cylinder(h=plate_thickness+1, d=3, center=true);\n        }\n    }\n}\n\nmodule axle_bar() {\n    // Main shaft\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=axle_length, d=axle_diameter, center=true);\n    \n    // Collars\n    translate([grip_length/2 + collar_thickness/2, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=collar_thickness, d=collar_diameter, center=true);\n    \n    translate([-grip_length/2 - collar_thickness/2, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=collar_thickness, d=collar_diameter, center=true);\n    \n    // Knurling texture on grip areas\n    for (i = [-grip_length/2 + 5:5:grip_length/2 - 5]) {\n        rotate([0, 0, 45])\n            translate([i, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=1, d=axle_diameter+0.5, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Support posts\n    support_post(-rack_width/2 + 20);\n    support_post(rack_width/2 - 20);\n    \n    // Axle supports\n    axle_support(-rack_width/2 + 20);\n    axle_support(rack_width/2 - 20);\n    \n    // Weight plates stored on pegs\n    translate([-rack_width/2 - 10, 0, 30])\n        weight_plate();\n    \n    translate([-rack_width/2 - 10, 0, 35])\n        weight_plate();\n    \n    translate([rack_width/2 + 10, 0, 30])\n        weight_plate();\n    \n    translate([rack_width/2 + 10, 0, 35])\n        weight_plate();\n    \n    // Barbell axle resting on supports\n    translate([0, 0, rack_height])\n        axle_bar();\n}",
    "renders": true
  },
  {
    "sports_equipment": "driveshaft",
    "openscad_code": "// Driveshaft Desk Lamp - Realistic Style\n// A functional desk lamp base shaped like a driveshaft\n// Total height: 120mm, base diameter: 60mm\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main module\nmodule driveshaft_lamp() {\n    // Central shaft assembly\n    union() {\n        // Main driveshaft tube\n        driveshaft_tube();\n        \n        // Universal joints at ends\n        universal_joint(0);  // Bottom\n        universal_joint(100);  // Top\n        \n        // Mounting brackets\n        mounting_brackets();\n        \n        // Base plate with cable hole\n        base_plate();\n    }\n}\n\n// Main driveshaft tube with realistic details\nmodule driveshaft_tube() {\n    difference() {\n        // Outer tube - 60mm diameter, 2mm wall thickness\n        cylinder(h=100, d1=60, d2=58);  // Slight taper for realism\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h=102, d=56);\n        \n        // Balance holes for realistic appearance\n        for(i = [10:20:90]) {\n            rotate([0, 90, 0])\n                translate([0, i, 0])\n                    rotate([0, 0, 45])\n                        cube([4, 4, 58], center=true);\n        }\n    }\n    \n    // Reinforcement rings\n    for(pos = [5, 25, 50, 75, 95]) {\n        translate([0, 0, pos])\n            cylinder(h=3, d=64);\n    }\n}\n\n// Universal joint with realistic yokes\nmodule universal_joint(z_pos) {\n    translate([0, 0, z_pos]) {\n        // Main yoke body\n        difference() {\n            // Outer yoke\n            union() {\n                // Side arms\n                for(angle = [0:90:270]) {\n                    rotate([0, 0, angle])\n                        translate([22, 0, 0])\n                            cube([20, 8, 8], center=true);\n                }\n                \n                // Center boss\n                cylinder(h=16, d=30);\n            }\n            \n            // Bearing holes\n            for(angle = [0:90:270]) {\n                rotate([0, 0, angle])\n                    translate([32, 0, 0])\n                        rotate([0, 90, 0])\n                            cylinder(h=15, d=6);\n            }\n            \n            // Center hole for wiring\n            cylinder(h=20, d=12);\n        }\n        \n        // Cross journal\n        if(z_pos == 0) {\n            // Bottom joint - flatter\n            difference() {\n                cube([35, 8, 8], center=true);\n                cube([30, 6, 6], center=true);\n            }\n        } else {\n            // Top joint - socket for lamp\n            difference() {\n                cylinder(h=15, d=25);\n                cylinder(h=20, d=20);\n            }\n        }\n    }\n}\n\n// Mounting brackets with realistic bolt holes\nmodule mounting_brackets() {\n    // Bottom bracket\n    translate([0, 0, 2]) {\n        difference() {\n            // Bracket body\n            cube([80, 20, 8], center=true);\n            \n            // Mounting slots\n            for(x = [-30, 30]) {\n                translate([x, 0, -1])\n                    cube([8, 12, 10]);\n            }\n        }\n    }\n    \n    // Top bracket (lamp mount)\n    translate([0, 0, 108]) {\n        difference() {\n            // Bracket body\n            cube([70, 15, 6], center=true);\n            \n            // Center hole for lamp rod\n            cylinder(h=8, d=12);\n            \n            // Mounting holes\n            for(x = [-25, 25]) {\n                translate([x, 0, -1])\n                    cylinder(h=8, d=4);\n            }\n        }\n    }\n}\n\n// Heavy base plate for stability\nmodule base_plate() {\n    difference() {\n        // Base disc\n        cylinder(h=8, d=80);\n        \n        // Cable channel\n        translate([30, 0, 4])\n            rotate([0, 90, 0])\n                cylinder(h=60, d=8);\n        \n        // Ventilation slots\n        for(angle = [0:45:315]) {\n            rotate([0, 0, angle])\n                translate([25, 0, 4])\n                    cube([20, 3, 8]);\n        }\n    }\n}\n\n// Generate the model\ndriveshaft_lamp();",
    "renders": true
  },
  {
    "sports_equipment": "propeller",
    "openscad_code": "// Propeller Side Table\n// Realistic style, medium complexity\n\n// Overall dimensions\ntable_height = 450;\nprop_diameter = 400;\nhub_height = 100;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Propeller blade module\nmodule blade(length, width, thickness) {\n    // Tapered blade shape\n    linear_extrude(height = thickness, convexity = 10)\n    polygon(points=[\n        [0, 0],\n        [length * 0.1, width * 0.3],\n        [length * 0.8, width * 0.9],\n        [length, width * 0.2],\n        [length * 0.95, 0],\n        [length * 0.9, -width * 0.1],\n        [length * 0.7, -width * 0.2],\n        [length * 0.5, -width * 0.15],\n        [length * 0.3, -width * 0.1],\n        [length * 0.1, -width * 0.05]\n    ]);\n}\n\n// Hub module\nmodule hub(radius, height) {\n    difference() {\n        // Main hub cylinder\n        cylinder(h = height, r = radius, $fn = 32);\n        \n        // Central hole\n        cylinder(h = height + 2, r = radius * 0.3, $fn = 32);\n        \n        // Mounting holes\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([radius * 0.7, 0, -1])\n            cylinder(h = height + 2, r = 3, $fn = 16);\n        }\n    }\n}\n\n// Table leg module\nmodule table_leg(height, width) {\n    // Tapered leg\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n            cylinder(h = height * 0.3, r1 = width, r2 = width * 0.8, $fn = 16);\n            translate([0, 0, height * 0.7])\n            cylinder(h = height * 0.3, r1 = width * 0.8, r2 = width * 0.6, $fn = 16);\n        }\n        \n        // Hollow center\n        translate([0, 0, wall])\n        cylinder(h = height - wall * 2, r = width - wall, $fn = 16);\n    }\n}\n\n// Propeller blade with twist\nmodule twisted_blade(length, width, thickness) {\n    union() {\n        // Main blade\n        blade(length, width, thickness);\n        \n        // Reinforcement ribs\n        for (i = [0.2:0.2:0.8]) {\n            translate([length * i, 0, thickness/2])\n            rotate([90, 0, 0])\n            cylinder(h = width * 0.8, r = wall, $fn = 8);\n        }\n        \n        // Grip texture on top\n        for (i = [0.1:0.1:0.9]) {\n            for (j = [-0.4:0.1:0.4]) {\n                translate([length * i, j * width, thickness])\n                cube([length * 0.05, width * 0.05, wall]);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Central hub\n    translate([0, 0, table_height - hub_height/2])\n    hub(prop_diameter * 0.15, hub_height);\n    \n    // Three propeller blades as table top\n    for (i = [0:120:240]) {\n        rotate([0, 0, i])\n        translate([0, 0, table_height])\n        twisted_blade(prop_diameter * 0.45, prop_diameter * 0.15, wall * 2);\n    }\n    \n    // Three table legs\n    for (i = [60:120:360]) {\n        rotate([0, 0, i])\n        translate([prop_diameter * 0.3, 0, 0])\n        table_leg(table_height - hub_height/2, 15);\n    }\n    \n    // Lower support ring\n    translate([0, 0, table_height * 0.3])\n    difference() {\n        cylinder(h = wall * 2, r = prop_diameter * 0.35, $fn = 32);\n        cylinder(h = wall * 3, r = prop_diameter * 0.35 - wall, $fn = 32);\n    }\n    \n    // Upper support ring\n    translate([0, 0, table_height * 0.7])\n    difference() {\n        cylinder(h = wall * 2, r = prop_diameter * 0.3, $fn = 32);\n        cylinder(h = wall * 3, r = prop_diameter * 0.3 - wall, $fn = 32);\n    }\n    \n    // Support struts\n    for (i = [0:60:360]) {\n        rotate([0, 0, i])\n        translate([prop_diameter * 0.25, -wall/2, table_height * 0.3])\n        cube([prop_diameter * 0.1, wall, table_height * 0.4]);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "rudder",
    "openscad_code": "// Realistic Rudder Furniture Item\n// Medium complexity with furniture-style construction\n\nwall_thickness = 2;\nscale_factor = 3;\n\n// Main rudder blade\nmodule rudder_blade() {\n    // Tapered blade shape\n    hull() {\n        translate([0, 0, 0])\n            cube([80, 6, 120], center=true);\n        translate([0, 0, 60])\n            cube([60, 5, 1], center=true);\n    }\n    \n    // Blade reinforcement ribs\n    for(i = [0:20:100]) {\n        translate([0, 0, i-50])\n            cube([75, 8, 3], center=true);\n    }\n}\n\n// Furniture-style mounting bracket system\nmodule mounting_bracket() {\n    // Main bracket plate\n    difference() {\n        cube([40, 30, 4], center=true);\n        translate([0, 0, -2.1])\n            cube([36, 26, 5], center=true);\n    }\n    \n    // Support gussets\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, 15])\n            rotate([0, side * 30, 0])\n            cube([3, 28, 25], center=true);\n    }\n    \n    // Mounting holes\n    for(x = [-12, 12])\n        for(y = [-8, 8])\n            translate([x, y, 0])\n                cylinder(h=5, r=2, center=true);\n}\n\n// Handle grip assembly\nmodule handle_grip() {\n    // Main handle shaft\n    cylinder(h=60, r=8, center=true);\n    \n    // Grip texture rings\n    for(z = [-25:5:25]) {\n        translate([0, 0, z])\n            cylinder(h=2, r=9, center=true);\n    }\n    \n    // End cap\n    translate([0, 0, 32])\n        cylinder(h=8, r=10, center=true);\n    \n    // Ferrule joint\n    translate([0, 0, -35])\n        cylinder(h=15, r=6, center=true);\n}\n\n// Rudder post with furniture-style joints\nmodule rudder_post() {\n    // Main post\n    cylinder(h=80, r=5, center=true);\n    \n    // Decorative collar\n    translate([0, 0, -30])\n        cylinder(h=8, r=8, center=true);\n    \n    // Joint reinforcement rings\n    for(pos = [-20, 0, 20]) {\n        translate([0, 0, pos])\n            cylinder(h=3, r=6, center=true);\n    }\n}\n\n// Base furniture mount\nmodule furniture_base() {\n    // Main base plate\n    cube([100, 20, 5], center=true);\n    \n    // Edge trim\n    difference() {\n        translate([0, 0, 2.5])\n            cube([104, 24, 3], center=true);\n        translate([0, 0, 2.4])\n            cube([100, 20, 4], center=true);\n    }\n    \n    // Support blocks\n    for(side = [-1, 1]) {\n        translate([side * 40, 0, 0])\n            cube([15, 18, 5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Rudder assembly\n    translate([0, 0, 60])\n        rotate([0, 0, 0])\n        union() {\n            rudder_blade();\n            translate([0, 0, -70])\n                rudder_post();\n        }\n    \n    // Handle assembly\n    translate([0, 0, -120])\n        rotate([0, 90, 0])\n        handle_grip();\n    \n    // Furniture mounting system\n    translate([0, 0, -150])\n        union() {\n            mounting_bracket();\n            translate([0, 0, -10])\n                furniture_base();\n        }\n}\n\n// Additional furniture-style details\n// Cable management hooks\nfor(angle = [0:120:240]) {\n    rotate([0, 0, angle])\n        translate([30, 0, -145])\n            difference() {\n                rotate([90, 0, 0])\n                    cylinder(h=15, r=3, center=true);\n                translate([0, 0, -8])\n                    cube([6, 6, 16], center=true);\n            }\n}",
    "renders": true
  },
  {
    "sports_equipment": "winch",
    "openscad_code": "// Winch Furniture - Realistic Style, Medium Complexity\n// A wall-mounted winch used for storing and organizing ropes/cables in a gym or workshop setting\n\n// Main parameters\nwinch_diameter = 40;\nwinch_length = 80;\nwall_plate_width = 100;\nwall_plate_height = 120;\nhandle_length = 60;\n\n// Wall mounting plate with reinforced corners\nmodule wall_plate() {\n    difference() {\n        // Main plate\n        translate([-wall_plate_width/2, -wall_plate_height/2, -5])\n            cube([wall_plate_width, wall_plate_height, 5]);\n        \n        // Mounting holes (4 corners)\n        for(x = [-1, 1])\n        for(y = [-1, 1])\n            translate([x * 35, y * 45, -6])\n                cylinder(h=7, r=4, $fn=20);\n        \n        // Center hole for axle\n        translate([0, 0, -6])\n            cylinder(h=7, r=6, $fn=20);\n    }\n}\n\n// Winch drum with cable guide grooves\nmodule winch_drum() {\n    difference() {\n        // Main drum\n        cylinder(h=winch_length, r=winch_diameter/2, $fn=50);\n        \n        // Cable grooves (helical pattern)\n        for(i = [0:10:winch_length-10]) {\n            rotate([0, 90, 0])\n            translate([0, i-winch_length/2, 0])\n                rotate([0, 0, 30*i])\n                cylinder(h=winch_diameter/2, r=2, $fn=20);\n        }\n        \n        // Axle hole\n        rotate([0, 90, 0])\n            cylinder(h=winch_diameter, r=4, $fn=20);\n    }\n}\n\n// Crank handle with ergonomic grip\nmodule crank_handle() {\n    union() {\n        // Main handle shaft\n        rotate([0, 90, 0])\n            cylinder(h=handle_length, r=3, $fn=20);\n        \n        // Handle grip (knurled surface)\n        translate([handle_length, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=20, r=8, $fn=20);\n        \n        // Grip texture rings\n        for(i = [-8:4:8]) {\n            translate([handle_length, i, 0])\n                rotate([0, 90, 0])\n                cylinder(h=2, r=9, $fn=20);\n        }\n        \n        // Connection hub to axle\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=15, r=6, $fn=20);\n    }\n}\n\n// Support bracket with gusset reinforcement\nmodule support_bracket() {\n    difference() {\n        union() {\n            // Main bracket arm\n            translate([-5, -20, 0])\n                cube([10, 40, 25]);\n            \n            // Gusset reinforcement\n            translate([-15, -15, 0])\n                cube([30, 10, 25]);\n            \n            // Top mounting flange\n            translate([-20, -5, 20])\n                cube([40, 10, 5]);\n        }\n        \n        // Axle hole\n        translate([0, 0, 12.5])\n            rotate([90, 0, 0])\n            cylinder(h=30, r=4.5, $fn=20);\n    }\n}\n\n// Cable guide roller\nmodule cable_guide() {\n    rotate([90, 0, 0])\n    difference() {\n        // Main roller\n        cylinder(h=15, r=8, $fn=30);\n        \n        // Axle hole\n        cylinder(h=16, r=2, $fn=20);\n        \n        // Groove for cable\n        translate([0, 0, -1])\n            cylinder(h=17, r=6, $fn=30);\n    }\n}\n\n// Assembly\nmodule winch_assembly() {\n    // Wall plate\n    wall_plate();\n    \n    // Support bracket\n    translate([0, 0, 5])\n        support_bracket();\n    \n    // Winch drum (mounted on bracket)\n    translate([0, 0, 30])\n        winch_drum();\n    \n    // Crank handle\n    translate([winch_length/2 + 10, 0, 30])\n        rotate([0, 0, 45])\n        crank_handle();\n    \n    // Cable guide roller\n    translate([0, 30, 15])\n        cable_guide();\n}\n\n// Render the complete winch\nwinch_assembly();",
    "renders": true
  },
  {
    "sports_equipment": "pylon",
    "openscad_code": "// Realistic pylon stool - medium complexity\n// Dimensions: 120mm height, 150mm diameter seat, 200mm base footprint\n\n// Parameters\nbase_width = 200;\nbase_height = 10;\npylon_height = 80;\npylon_width = 120;\nseat_diameter = 150;\nseat_thickness = 20;\nwall_thickness = 2;\ngrip_depth = 1;\n\n// Main assembly\nunion() {\n    // Base plate\n    translate([0, 0, base_height/2])\n        cube([base_width, base_width, base_height], center=true);\n    \n    // Pylon body with beveled top\n    difference() {\n        // Main pylon structure\n        translate([0, 0, base_height + pylon_height/2])\n            cube([pylon_width, pylon_width, pylon_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, base_height + pylon_height/2])\n            cube([pylon_width - wall_thickness*2, pylon_width - wall_thickness*2, pylon_height - wall_thickness], center=true);\n        \n        // Bevel top edges\n        translate([0, 0, base_height + pylon_height - wall_thickness])\n            cube([pylon_width + 2, pylon_width + 2, wall_thickness], center=true);\n    }\n    \n    // Seat cushion\n    difference() {\n        // Main seat\n        translate([0, 0, base_height + pylon_height + seat_thickness/2])\n            cylinder(h=seat_thickness, d=seat_diameter, center=true);\n        \n        // Hollow bottom\n        translate([0, 0, base_height + pylon_height + wall_thickness/2])\n            cylinder(h=seat_thickness - wall_thickness, d=seat_diameter - wall_thickness*2, center=true);\n    }\n    \n    // Structural ribs connecting pylon to base\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([base_width/2 - 10, 0, base_height/2])\n                cube([20, wall_thickness*3, base_height], center=true);\n    }\n    \n    // Grip texture on pylon sides\n    module grip_pattern() {\n        for(y=[-pylon_width/2 + 10:pylon_width/2 - 10:20]) {\n            for(z=[base_height + 10:base_height + pylon_height - 10:15]) {\n                translate([pylon_width/2 - grip_depth/2, y, z])\n                    cube([grip_depth, 15, 2], center=true);\n            }\n        }\n    }\n    \n    grip_pattern();\n    rotate([0, 0, 90]) grip_pattern();\n    rotate([0, 0, 180]) grip_pattern();\n    rotate([0, 0, 270]) grip_pattern();\n    \n    // Corner reinforcements\n    for(x=[-1:1:1]) {\n        for(y=[-1:1:1]) {\n            translate([x*(base_width/2 - 10), y*(base_width/2 - 10), base_height + pylon_height/2])\n                cylinder(h=pylon_height, d=20, center=true);\n        }\n    }\n    \n    // Drainage holes in base\n    for(i=[0:1:3]) {\n        rotate([0, 0, i*45])\n            translate([base_width/2 - 10, 0, base_height/2])\n                cylinder(h=base_height + 2, d=5, center=true);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "wing",
    "openscad_code": "// Wing furniture - A decorative wing-shaped shelf bracket\n// Dimensions: 120mm wide x 80mm tall x 20mm deep\n\n// Main wing body with aerodynamic profile\nmodule wing_body() {\n    // Central spine\n    translate([0, 0, 9]) {\n        hull() {\n            translate([-5, 0, 0]) cube([10, 80, 2]);\n            translate([-3, 75, 0]) cube([6, 5, 2]);\n        }\n    }\n    \n    // Upper wing surface\n    difference() {\n        // Main upper curve\n        translate([-40, 10, 10]) {\n            scale([1, 1, 0.3]) {\n                cylinder(h = 20, r1 = 40, r2 = 20, $fn = 50);\n            }\n        }\n        \n        // Cut away bottom half\n        translate([-40, 10, 10]) cube([80, 80, 20]);\n        \n        // Taper end\n        translate([35, 60, 10]) rotate([0, 0, -30]) cube([40, 30, 20]);\n    }\n    \n    // Lower wing surface\n    mirror([0, 0, 1]) {\n        difference() {\n            // Main lower curve\n            translate([-40, 10, 10]) {\n                scale([1, 1, 0.3]) {\n                    cylinder(h = 20, r1 = 40, r2 = 20, $fn = 50);\n                }\n            }\n            \n            // Cut away top half\n            translate([-40, 10, 10]) cube([80, 80, 20]);\n            translate([35, 60, 10]) rotate([0, 0, -30]) cube([40, 30, 20]);\n        }\n    }\n}\n\n// Wing ribs for structure\nmodule wing_ribs() {\n    for (y = [15:15:70]) {\n        // Upper rib\n        translate([-35, y, 10]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h = 2, r = 3, $fn = 20);\n                    translate([0, 0, -1]) cylinder(h = 4, r = 2, $fn = 20);\n                }\n            }\n        }\n        \n        // Lower rib\n        translate([-35, y, 9]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h = 2, r = 3, $fn = 20);\n                    translate([0, 0, -1]) cylinder(h = 4, r = 2, $fn = 20);\n                }\n            }\n        }\n    }\n}\n\n// Mounting plate for wall attachment\nmodule mounting_plate() {\n    difference() {\n        // Main plate\n        translate([-3, 0, 0]) cube([6, 20, 20]);\n        \n        // Screw holes\n        translate([0, 5, 10]) cylinder(h = 20, r = 2, $fn = 20);\n        translate([0, 15, 10]) cylinder(h = 20, r = 2, $fn = 20);\n    }\n}\n\n// Feather texture details\nmodule feather_details() {\n    for (i = [0:3]) {\n        angle = i * 15;\n        y_pos = 25 + i * 12;\n        \n        // Upper feathers\n        translate([0, y_pos, 11]) {\n            rotate([0, 0, angle]) {\n                scale([0.8, 1, 0.2]) {\n                    cube([15, 8, 2], center = true);\n                }\n            }\n        }\n        \n        // Lower feathers\n        translate([0, y_pos, 8]) {\n            rotate([0, 0, angle]) {\n                scale([0.8, 1, 0.2]) {\n                    cube([15, 8, 2], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Wing body\n    wing_body();\n    \n    // Structural ribs\n    wing_ribs();\n    \n    // Mounting hardware\n    mounting_plate();\n    \n    // Decorative feather details\n    feather_details();\n}",
    "renders": true
  },
  {
    "sports_equipment": "aileron",
    "openscad_code": "// Aileron Coffee Table - Realistic style, medium complexity\n// Modeled after aircraft control surface turned into furniture\n// Overall size: 120mm x 60mm x 45mm (length x width x height)\n\n// Main wing surface\nmodule wing_surface() {\n    difference() {\n        // Main wing body\n        hull() {\n            translate([-60, -30, 0]) cube([120, 60, 4]);\n            translate([-60, -30, 35]) cube([120, 60, 2]);\n        }\n        \n        // Trailing edge taper\n        translate([-60, -30, 0]) rotate([0, 7, 0]) \n            cube([130, 65, 40]);\n    }\n}\n\n// Structural ribs inside wing\nmodule wing_ribs() {\n    for (i = [-40, -20, 0, 20, 40]) {\n        translate([i, -30, 4]) cube([2, 60, 31]);\n    }\n}\n\n// Aileron control surface\nmodule aileron_surface() {\n    difference() {\n        // Main aileron body\n        hull() {\n            translate([40, -30, 4]) cube([20, 60, 2]);\n            translate([40, -30, 25]) cube([20, 60, 1]);\n        }\n        \n        // Leading edge curve\n        translate([40, -30, 4]) rotate([0, -10, 0])\n            cube([25, 65, 25]);\n    }\n}\n\n// Hinge mechanism\nmodule hinges() {\n    for (y = [-20, 0, 20]) {\n        // Upper hinge plate\n        translate([39.5, y-3, 4]) cube([3, 6, 2]);\n        \n        // Lower hinge plate\n        translate([39.5, y-3, 22]) cube([3, 6, 2]);\n        \n        // Hinge pin\n        translate([41, y, 4]) cylinder(h=18, r=1.5, $fn=8);\n    }\n}\n\n// Table legs\nmodule legs() {\n    // Front left leg\n    translate([-55, -25, -40]) {\n        cylinder(h=40, r=3, $fn=12);\n        translate([0, 0, -2]) sphere(r=3.5, $fn=12);\n    }\n    \n    // Front right leg\n    translate([-55, 25, -40]) {\n        cylinder(h=40, r=3, $fn=12);\n        translate([0, 0, -2]) sphere(r=3.5, $fn=12);\n    }\n    \n    // Rear left leg\n    translate([55, -25, -40]) {\n        cylinder(h=40, r=3, $fn=12);\n        translate([0, 0, -2]) sphere(r=3.5, $fn=12);\n    }\n    \n    // Rear right leg\n    translate([55, 25, -40]) {\n        cylinder(h=40, r=3, $fn=12);\n        translate([0, 0, -2]) sphere(r=3.5, $fn=12);\n    }\n}\n\n// Support frame between legs\nmodule support_frame() {\n    // Front support\n    translate([-55, -25, -20]) cube([110, 2, 2]);\n    \n    // Rear support\n    translate([-55, 23, -20]) cube([110, 2, 2]);\n    \n    // Left support\n    translate([-55, -25, -20]) cube([2, 50, 2]);\n    \n    // Right support\n    translate([53, -25, -20]) cube([2, 50, 2]);\n}\n\n// Surface texture pattern\nmodule wing_texture() {\n    for (x = [-50:10:50]) {\n        for (y = [-25:10:25]) {\n            translate([x, y, 4.1]) \n                cylinder(h=0.5, r=1, $fn=6);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main wing assembly\n    union() {\n        wing_surface();\n        wing_ribs();\n        wing_texture();\n    }\n    \n    // Aileron with hinges\n    union() {\n        aileron_surface();\n        hinges();\n    }\n    \n    // Furniture support structure\n    union() {\n        legs();\n        support_frame();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "flap",
    "openscad_code": "// Flap Furniture - Realistic Style\n// Medium complexity wall-mounted flap shelf with hinge mechanism\n\nwall_thickness = 2;\nflap_width = 120;\nflap_height = 80;\nflap_depth = 100;\nsupport_length = 40;\nhinge_diameter = 8;\nhinge_length = 110;\n\nmodule flap_shelf() {\n    // Main flap panel\n    difference() {\n        // Outer shell\n        cube([flap_width, flap_depth, wall_thickness], center=true);\n        \n        // Lightening holes pattern\n        for (x = [-40:30:40]) {\n            for (y = [-30:30:30]) {\n                translate([x, y, 0])\n                    cylinder(h=wall_thickness+1, r=8, $fn=20);\n            }\n        }\n    }\n}\n\nmodule support_brackets() {\n    // Left support bracket\n    translate([-flap_width/2 - 5, 0, 0])\n        rotate([0, 90, 0])\n            difference() {\n                cube([support_length, 15, wall_thickness*2]);\n                translate([5, 5, -1])\n                    cube([support_length-10, 5, wall_thickness*2+2]);\n            }\n    \n    // Right support bracket\n    translate([flap_width/2 + 5, 0, 0])\n        rotate([0, 90, 0])\n            difference() {\n                cube([support_length, 15, wall_thickness*2]);\n                translate([5, 5, -1])\n                    cube([support_length-10, 5, wall_thickness*2+2]);\n            }\n}\n\nmodule hinge_assembly() {\n    // Hinge barrel left\n    translate([-flap_width/2 - 10, flap_depth/2 - 5, 0])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=hinge_diameter/2, $fn=20);\n    \n    // Hinge barrel right\n    translate([flap_width/2 + 10, flap_depth/2 - 5, 0])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=hinge_diameter/2, $fn=20);\n    \n    // Hinge pin left\n    translate([-flap_width/2 - 10, flap_depth/2 - 5, 0])\n        rotate([90, 0, 0])\n            cylinder(h=25, r=hinge_diameter/4, $fn=10);\n    \n    // Hinge pin right\n    translate([flap_width/2 + 10, flap_depth/2 - 5, 0])\n        rotate([90, 0, 0])\n            cylinder(h=25, r=hinge_diameter/4, $fn=10);\n}\n\nmodule mounting_plate() {\n    // Wall mounting plate\n    translate([0, flap_depth/2 + support_length/2, 0])\n        difference() {\n            cube([hinge_length, wall_thickness*4, 15], center=true);\n            \n            // Mounting holes\n            for (x = [-40:40:40]) {\n                translate([x, 0, 0])\n                    cylinder(h=wall_thickness*4+1, r=3, $fn=20);\n            }\n        }\n}\n\nmodule edge_detail() {\n    // Rounded front edge\n    translate([0, -flap_depth/2, 0])\n        rotate([90, 0, 0])\n            cylinder(h=flap_width, r=wall_thickness, $fn=30);\n}\n\nmodule stop_blocks() {\n    // Left stop block\n    translate([-flap_width/2 + 10, flap_depth/2, -wall_thickness])\n        cube([20, 10, wall_thickness*3]);\n    \n    // Right stop block\n    translate([flap_width/2 - 10, flap_depth/2, -wall_thickness])\n        cube([20, 10, wall_thickness*3]);\n}\n\n// Assemble all components\nunion() {\n    // Main flap assembly\n    translate([0, 0, wall_thickness/2])\n        union() {\n            flap_shelf();\n            edge_detail();\n            stop_blocks();\n        }\n    \n    // Support mechanism\n    support_brackets();\n    \n    // Hinge system\n    hinge_assembly();\n    \n    // Wall mounting\n    mounting_plate();\n}",
    "renders": true
  },
  {
    "sports_equipment": "elevator",
    "openscad_code": "// OpenSCAD Realistic Medium-Complexity Elevator Furniture\n// Overall printable size: 60 mm x 40 mm x 80 mm (WxDxH)\n\n// Parameters\nwall = 2;              // 3D-printable wall thickness\nscaleFactor = 0.8;     // Adjust to fit printer bed\n\n// Main elevator module\nmodule elevator() {\n    union() {\n        // Outer car shell\n        translate([0,0,wall]) cube([60,40,80], center=true);\n\n        // Door opening cutout\n        difference() {\n            translate([0,0,0])\n                cube([60,40,80], center=true);\n            translate([0,-20.1,40])\n                cube([30,wall+0.2,60], center=true);\n        }\n\n        // Floor base plate\n        translate([0,0,wall/2]) cube([60,40,wall], center=true);\n\n        // Ceiling plate\n        translate([0,0,80-wall/2]) cube([60,40,wall], center=true);\n\n        // Back wall\n        translate([0,20-wall/2,40]) cube([60,wall,80], center=true);\n\n        // Left wall\n        translate([-30+wall/2,0,40]) cube([wall,40,80], center=true);\n\n        // Right wall\n        translate([30-wall/2,0,40]) cube([wall,40,80], center=true);\n\n        // Hand rail\n        translate([20,18,50]) rotate([0,90,0])\n            cylinder(h=30, r=wall, $fn=20);\n\n        // Control panel\n        difference() {\n            translate([25,19,60]) cube([6,wall,10], center=true);\n            for (y=[-3:3:3])\n                for (z=[-3:3:3])\n                    translate([25+wall/2,20-0.1,60+y+z])\n                        cube([wall+0.2,wall,2]);\n        }\n\n        // Ventilation grate on ceiling\n        difference() {\n            translate([0,0,80-wall/2]) cube([30,20,wall], center=true);\n            for (x=[-10:5:10])\n                for (y=[-5:3:5])\n                    translate([x,y,80-wall/2+0.1])\n                        cube([2,1,wall+0.2], center=true);\n        }\n\n        // Floor pattern tiles\n        for (x=[-25:10:25])\n            for (y=[-15:10:15])\n                translate([x,y,wall+0.1])\n                    cube([8,8,0.5], center=true);\n\n        // Door tracks on floor\n        translate([0,-20+wall/2,wall+0.2]) cube([32,wall,1], center=true);\n        translate([0,-20+wall/2,80-wall-0.2]) cube([32,wall,1], center=true);\n    }\n}\n\n// Scale and render the elevator\nscale([scaleFactor, scaleFactor, scaleFactor])\n    elevator();",
    "renders": true
  },
  {
    "sports_equipment": "cockpit",
    "openscad_code": "// Cockpit Console with Chair and Controls\n// Overall size: ~100mm wide x 80mm deep x 60mm tall\n\n// Main console body\nmodule console_body() {\n    difference() {\n        // Main console shell\n        cube([90, 75, 40], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 5])\n            cube([86, 71, 35], center=true);\n    }\n}\n\n// Control panel with buttons and displays\nmodule control_panel() {\n    translate([0, 35, 20])\n    difference() {\n        // Panel base\n        cube([80, 4, 15], center=true);\n        \n        // Display screen cutout\n        translate([0, 0, 5])\n            cube([50, 2, 8], center=true);\n        \n        // Button holes\n        for(x = [-30:15:30]) {\n            translate([x, 0, -3])\n                cylinder(h=5, r=2.5, center=true);\n        }\n    }\n}\n\n// Display screen\nmodule display() {\n    translate([0, 37, 25])\n        cube([48, 1, 6], center=true);\n}\n\n// Control buttons\nmodule buttons() {\n    for(x = [-30:15:30]) {\n        translate([x, 37, 20])\n            cylinder(h=4, r=2, center=true);\n    }\n}\n\n// Side support structures\nmodule side_support() {\n    translate([45, 0, 0]) {\n        // Left support\n        cube([4, 75, 40], center=true);\n        \n        // Reinforcement ribs\n        for(z = [-15:10:15]) {\n            translate([2, 0, z])\n                cube([2, 75, 2], center=true);\n        }\n    }\n    \n    mirror([1, 0, 0])\n        side_support();\n}\n\n// Pilot chair\nmodule chair() {\n    translate([0, -25, 0])\n    union() {\n        // Seat base\n        translate([0, 0, 5])\n            cube([40, 35, 4], center=true);\n        \n        // Seat back\n        translate([0, -12, 20])\n            rotate([20, 0, 0])\n            cube([38, 4, 30], center=true);\n        \n        // Seat sides\n        translate([18, 0, 10])\n            cube([4, 35, 20], center=true);\n        \n        mirror([1, 0, 0])\n            translate([18, 0, 10])\n                cube([4, 35, 20], center=true);\n        \n        // Chair legs\n        for(x = [-15:30:15]) {\n            for(y = [10:20:10]) {\n                translate([x, y, 2])\n                    cylinder(h=6, r=2, center=true);\n            }\n        }\n    }\n}\n\n// Armrest controls\nmodule armrest_controls() {\n    translate([25, -10, 15])\n    union() {\n        // Armrest\n        cube([8, 30, 4], center=true);\n        \n        // Joystick base\n        translate([0, 10, 3])\n            cylinder(h=6, r=4, center=true);\n        \n        // Joystick\n        translate([0, 10, 9])\n            cylinder(h=12, r=1.5, center=true);\n    }\n    \n    mirror([1, 0, 0])\n        armrest_controls();\n}\n\n// Main assembly\nunion() {\n    // Console base\n    console_body();\n    \n    // Structural supports\n    side_support();\n    \n    // Controls and displays\n    control_panel();\n    display();\n    buttons();\n    \n    // Chair assembly\n    chair();\n    \n    // Armrest controls\n    armrest_controls();\n}",
    "renders": true
  },
  {
    "sports_equipment": "fuselage",
    "openscad_code": "// Fuselage Furniture - Side Table / Stool\n// Modelled as a stylized aircraft fuselage turned into furniture\n// Realistic style with medium complexity\n// Dimensions: 120mm length x 50mm width x 45mm height\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main fuselage body module\nmodule fuselage_body() {\n    // Outer shell - streamlined fuselage shape\n    hull() {\n        // Nose cone\n        translate([0, 0, 20])\n            scale([1, 0.8, 0.6])\n                sphere(d=40);\n        // Main body\n        translate([0, 0, 0])\n            scale([1, 0.9, 1])\n                sphere(d=45);\n        // Tail taper\n        translate([50, 0, 15])\n            scale([0.6, 0.7, 0.5])\n                sphere(d=35);\n    }\n}\n\n// Create hollow fuselage with proper wall thickness\nmodule hollow_fuselage() {\n    difference() {\n        fuselage_body();\n        // Inner hollow space\n        scale([0.9, 0.8, 0.85])\n            translate([0, 0, 2])\n                fuselage_body();\n    }\n}\n\n// Wing supports (furniture legs)\nmodule wing_support(x_pos) {\n    translate([x_pos, 0, 0]) {\n        // Main support strut\n        rotate([90, 0, 0])\n            cylinder(h=45, d1=8, d2=6);\n        // Base pad\n        translate([0, 0, -22.5])\n            cylinder(h=3, d=12);\n    }\n}\n\n// Cockpit detail (storage compartment)\nmodule cockpit_storage() {\n    translate([-35, 0, 25]) {\n        // Storage hatch\n        difference() {\n            // Hatch frame\n            rotate([90, 0, 0])\n                cylinder(h=wall, d=20);\n            // Hatch opening\n            rotate([90, 0, 0])\n                cylinder(h=wall+1, d=16);\n        }\n        // Handle\n        translate([0, 0, -8])\n            cube([10, wall, 3], center=true);\n    }\n}\n\n// Panel lines for realistic detail\nmodule panel_lines() {\n    for(i = [-40:10:40]) {\n        // Longitudinal panel lines\n        translate([i, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=50, d=0.5);\n    }\n    for(i = [-20:5:25]) {\n        // Circumferential panel lines\n        translate([0, 0, i])\n            rotate([90, 0, 0])\n                cylinder(h=50, d=0.5);\n    }\n}\n\n// Tail fin (backrest support)\nmodule tail_fin() {\n    translate([45, 0, 25]) {\n        // Main fin\n        rotate([0, 10, 0])\n            cube([20, wall, 30], center=true);\n        // Horizontal stabilizer (shelf)\n        rotate([0, 90, 0])\n            cylinder(h=40, d=wall);\n    }\n}\n\n// Landing gear pads (furniture feet)\nmodule landing_gear() {\n    // Front gear\n    translate([-40, 0, -22.5])\n        cylinder(h=3, d=8);\n    \n    // Main gear pairs\n    for(side = [-1, 1]) {\n        translate([20, side*20, -22.5])\n            cylinder(h=3, d=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main fuselage structure\n    hollow_fuselage();\n    \n    // Furniture legs (wing supports)\n    wing_support(-30);\n    wing_support(30);\n    \n    // Storage compartment\n    cockpit_storage();\n    \n    // Backrest support\n    tail_fin();\n    \n    // Leveling feet\n    landing_gear();\n    \n    // Surface details\n    panel_lines();\n}",
    "renders": true
  },
  {
    "sports_equipment": "landinggear",
    "openscad_code": "// Landing-Gear Furniture – stylized aircraft landing gear scaled to sit beside a sofa\n// Overall footprint ≈ 120 mm long × 100 mm wide × 130 mm tall\n// Designed for 3-D printing: walls ≥ 2 mm, no large unsupported overhangs\n\n$fn=32;               // smooth curves\n\n// ---------- Parameters ----------\nwall   = 2;           // printable wall thickness\ndia    = 12;          // leg/strut diameter\nscaleF = 1;           // global scale (1 = real size)\n\n// ---------- Utility module for hollow cylinders ----------\nmodule hollow_cylinder(h, r, wall_thk=wall) {\n    difference() {\n        cylinder(h=h, r=r);\n        translate([0,0,-1]) cylinder(h=h+2, r=r-wall_thk);\n    }\n}\n\n// ---------- Main Oleo Strut ----------\nmodule oleo_strut() {\n    // outer cylinder (lower leg)\n    translate([0,0,0]) hollow_cylinder(h=55, r=dia/2);\n\n    // inner piston (upper leg)\n    translate([0,0,55]) hollow_cylinder(h=45, r=dia/2-1);\n\n    // piston rod end\n    translate([0,0,55+45]) cylinder(h=8, r=dia/2-1);\n\n    // torque-link scissors\n    for(i=[0,1]) {\n        rotate([0,0,i*180]) translate([0,0,27]) {\n            difference() {\n                cube([wall, 30, 55], center=true);\n                translate([0,0,27.5]) cube([wall+2, 32, 55-2*wall], center=true);\n            }\n        }\n    }\n}\n\n// ---------- Wheel ----------\nmodule wheel() {\n    // tire\n    rotate([90,0,0]) {\n        difference() {\n            cylinder(h=20, r=28);\n            translate([0,0,-1]) cylinder(h=22, r=28-wall);\n        }\n\n        // rim hub\n        cylinder(h=22, r=20);\n        for(i=[0:5:359]) {\n            rotate([0,0,i]) translate([20-3,0,11]) rotate([90,0,0])\n                cylinder(h=5, r=2);\n        }\n    }\n}\n\n// ---------- Y-shaped Axle ----------\nmodule axle() {\n    // horizontal tube\n    rotate([90,0,0]) hollow_cylinder(h=70, r=dia/2);\n\n    // diagonal braces to strut\n    for(side=[-1,1]) {\n        translate([0,side*35,0]) rotate([0,30*side,0]) hollow_cylinder(h=40, r=dia/2-1);\n    }\n}\n\n// ---------- Shock-absorber fairing ----------\nmodule fairing() {\n    hull() {\n        translate([0,0,40]) sphere(d=18);\n        translate([0,0,20]) sphere(d=24);\n    }\n}\n\n// ---------- Furniture base plate (stands on floor) ----------\nmodule base_plate() {\n    difference() {\n        translate([0,0,-wall/2]) cube([100,80,wall], center=true);\n        translate([0,0,-wall]) cube([100-2*wall,80-2*wall,wall+1], center=true);\n    }\n}\n\n// ---------- Assembly ----------\nunion() {\n    // base plate\n    base_plate();\n\n    // strut assembly\n    translate([0,0,wall]) oleo_strut();\n\n    // axle + wheels\n    translate([0,0,8]) {\n        axle();\n        translate([0,-35,0]) wheel();\n        translate([0, 35,0]) wheel();\n    }\n\n    // decorative fairing\n    translate([0,0,30]) fairing();\n}",
    "renders": true
  },
  {
    "sports_equipment": "rotor",
    "openscad_code": "// Rotor Furniture - Medium Complexity\n// A stylized rotor-shaped side table with realistic proportions\n\n$fn = 64;\n\n// Overall dimensions\nrotor_diameter = 120;\nrotor_height = 45;\nbase_height = 25;\nwall_thickness = 2;\n\n// Main rotor table top\nmodule rotor_top() {\n    difference() {\n        // Main circular top\n        cylinder(h = rotor_height, r = rotor_diameter/2, center = true);\n        \n        // Central hub hole\n        cylinder(h = rotor_height + 1, r = 12, center = true);\n        \n        // Airfoil cutouts - 6 blades\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([rotor_diameter/4, 0, 0])\n                    rotate([0, 0, 30])\n                        cube([rotor_diameter/2, 15, rotor_height + 1], center = true);\n            }\n        }\n    }\n    \n    // Reinforcement ring\n    difference() {\n        cylinder(h = wall_thickness, r1 = rotor_diameter/2 - 5, r2 = rotor_diameter/2 - 3, center = true);\n        translate([0, 0, wall_thickness/2])\n            cylinder(h = wall_thickness + 1, r = rotor_diameter/2 - 8, center = true);\n    }\n}\n\n// Central hub structure\nmodule central_hub() {\n    // Main hub cylinder\n    difference() {\n        cylinder(h = rotor_height + base_height, r = 14, center = false);\n        cylinder(h = rotor_height + base_height + 1, r = 10, center = false);\n    }\n    \n    // Hub cap\n    translate([0, 0, rotor_height + base_height])\n        cylinder(h = 5, r1 = 16, r2 = 14, center = false);\n}\n\n// Base support structure\nmodule base_support() {\n    // Main base cylinder\n    cylinder(h = base_height, r = rotor_diameter/3, center = false);\n    \n    // Structural ribs\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120]) {\n            translate([0, 0, 0])\n                cube([rotor_diameter/3 - 5, wall_thickness * 2, base_height], center = true);\n        }\n    }\n    \n    // Base ring\n    translate([0, 0, base_height - wall_thickness])\n        cylinder(h = wall_thickness, r = rotor_diameter/3, center = false);\n}\n\n// Grip texture on top surface\nmodule grip_texture() {\n    // Concentric rings for grip\n    for (r = [30:10:50]) {\n        translate([0, 0, rotor_height/2 + 0.5])\n            cylinder(h = 0.5, r = r, r2 = r - 0.5, center = true);\n    }\n    \n    // Radial grip lines\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30]) {\n            translate([rotor_diameter/4, 0, rotor_height/2 + 0.5])\n                cube([rotor_diameter/2, 1, 0.5], center = true);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, base_height])\n    rotor_top();\n\ncentral_hub();\n\ntranslate([0, 0, 0])\n    base_support();\n\ntranslate([0, 0, 0])\n    grip_texture();",
    "renders": true
  },
  {
    "sports_equipment": "blade",
    "openscad_code": "// Blade Furniture - Realistic Style, Medium Complexity\n// 3D printable blade furniture piece with structural elements\n\n// Overall dimensions\nblade_length = 120;\nblade_width = 30;\nblade_thickness = 2.5;\n\n// Handle dimensions\nhandle_length = 40;\nhandle_diameter = 12;\n\n// Guard dimensions\nguard_length = 35;\nguard_width = 25;\nguard_thickness = 3;\n\n// Base dimensions\nbase_length = 50;\nbase_width = 40;\nbase_height = 10;\n\n// Support dimensions\nsupport_height = 80;\nsupport_width = 8;\nsupport_thickness = 3;\n\nmodule blade_furniture() {\n    // Base platform\n    difference() {\n        // Main base\n        translate([0, 0, 0])\n            cube([base_length, base_width, base_height], center=true);\n        \n        // Decorative cutouts in base\n        for(i = [-1, 1]) {\n            translate([i * 15, 0, -base_height/2 + 2])\n                cube([5, 20, 6], center=true);\n        }\n    }\n    \n    // Central support post\n    difference() {\n        // Main support\n        translate([0, 0, base_height/2 + support_height/2])\n            cube([support_width, support_thickness, support_height], center=true);\n        \n        // Cabling channel\n        translate([0, 0, base_height/2 + 20])\n            cylinder(h=support_height-40, r=2, center=true);\n    }\n    \n    // Blade holder assembly\n    union() {\n        // Main blade support\n        translate([0, 0, base_height + support_height + blade_length/2 - 10])\n            cube([blade_width + 4, blade_thickness + 4, blade_length], center=true);\n        \n        // Blade guides\n        for(i = [-1, 1]) {\n            translate([i * (blade_width/2 + 2), 0, base_height + support_height + blade_length/2 - 10])\n                cube([2, blade_thickness + 8, blade_length], center=true);\n        }\n        \n        // Guard mount\n        translate([0, 0, base_height + support_height + blade_length - 5])\n            difference() {\n                cube([guard_length + 6, guard_width + 6, 8], center=true);\n                cube([guard_length, guard_width, 12], center=true);\n            }\n    }\n    \n    // Handle rest\n    translate([0, -handle_diameter/2 - 2, base_height + support_height + 10])\n    difference() {\n        cube([handle_diameter + 4, handle_diameter + 4, handle_length/2], center=true);\n        cylinder(h=handle_length/2 + 2, r=handle_diameter/2 + 1, center=true);\n    }\n    \n    // Optional stabilizing feet\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * 20, y * 15, -base_height/2 - 1])\n                cube([8, 8, 2], center=true);\n        }\n    }\n    \n    // Cable management clips\n    for(z = [base_height/2 + 20, base_height + support_height - 20]) {\n        translate([support_width/2 + 3, 0, z])\n            difference() {\n                cube([6, 3, 10], center=true);\n                cylinder(h=12, r=2, center=true);\n            }\n    }\n}\n\n// Render the complete furniture piece\nblade_furniture();",
    "renders": true
  },
  {
    "sports_equipment": "rotorhead",
    "openscad_code": "// Rotorhead Furniture Item - Realistic Style, Medium Complexity\n// Overall dimensions ~120mm wide x 80mm deep x 100mm tall\n\n$fn = 32;\n\n// Main body hub\nmodule hub() {\n    // Central cylindrical hub\n    cylinder(h=25, d1=35, d2=30, center=true);\n    \n    // Top flange\n    translate([0,0,12.5])\n        cylinder(h=5, d=45, center=true);\n    \n    // Bottom flange\n    translate([0,0,-12.5])\n        cylinder(h=5, d=45, center=true);\n}\n\n// Blade grip with furniture joint styling\nmodule blade_grip() {\n    difference() {\n        // Main grip body\n        union() {\n            // Grip cylinder\n            translate([0,-30,0])\n                rotate([90,0,0])\n                    cylinder(h=60, d=12, center=true);\n            \n            // Grip base\n            translate([0,-30,0])\n                rotate([90,0,0])\n                    cylinder(h=20, d=20, center=true);\n        }\n        \n        // Grip texture holes (furniture detail)\n        for(i=[0:3]) {\n            rotate([0,90,i*90])\n                translate([0,-30,0])\n                    rotate([90,0,0])\n                        cylinder(h=22, d=2, center=true);\n        }\n    }\n}\n\n// Swashplate base\nmodule swashplate() {\n    difference() {\n        // Main plate\n        cylinder(h=8, d=60, center=true);\n        \n        // Central hole\n        cylinder(h=10, d=20, center=true);\n        \n        // Control arm holes\n        for(i=[0:2]) {\n            rotate([0,0,i*120])\n                translate([22,0,0])\n                    cylinder(h=10, d=4, center=true);\n        }\n    }\n}\n\n// Control rod\nmodule control_rod() {\n    // Rod shaft\n    cylinder(h=35, d=4, center=true);\n    \n    // Ball joint top\n    translate([0,0,17.5])\n        sphere(d=8);\n    \n    // Ball joint bottom\n    translate([0,0,-17.5])\n        sphere(d=8);\n}\n\n// Main rotor shaft\nmodule rotor_shaft() {\n    cylinder(h=40, d=8, center=true);\n}\n\n// Assemble the rotorhead\nunion() {\n    // Central hub\n    hub();\n    \n    // Rotor shaft\n    translate([0,0,20])\n        rotor_shaft();\n    \n    // Attach blade grips (4 blades)\n    for(i=[0:3]) {\n        rotate([0,0,i*90])\n            translate([17.5,0,0])\n                blade_grip();\n    }\n    \n    // Swashplate below\n    translate([0,0,-20])\n        swashplate();\n    \n    // Control rods\n    for(i=[0:2]) {\n        rotate([0,0,i*120])\n            translate([22,0,-7])\n                rotate([45,0,0])\n                    control_rod();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "swashplate",
    "openscad_code": "// Swashplate Furniture Item - Realistic Style\n// Dimensions: ~120mm diameter, 80mm height\n\n// Configuration\n$fn = 32;\nwall_thickness = 2;\ndiameter = 120;\nheight = 80;\nbase_height = 15;\nbearing_diameter = 20;\n\n// Main swashplate base\nmodule swashplate_base() {\n    // Outer ring structure\n    difference() {\n        cylinder(h=base_height, d=diameter);\n        cylinder(h=base_height+1, d=diameter-wall_thickness*2);\n    }\n    \n    // Top surface with slight taper\n    translate([0, 0, base_height-2])\n    difference() {\n        cylinder(h=4, d1=diameter, d2=diameter-4);\n        cylinder(h=5, d=diameter-wall_thickness*2);\n    }\n}\n\n// Ball bearing housing\nmodule bearing_housing() {\n    // Main bearing ring\n    difference() {\n        cylinder(h=10, d=bearing_diameter+wall_thickness*2);\n        cylinder(h=11, d=bearing_diameter);\n    }\n    \n    // Bearing support arms\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([diameter/2-15, 0, 0])\n        cube([30, 8, 10], center=true);\n    }\n}\n\n// Control arm mounts\nmodule control_mounts() {\n    // Four mounting points at 90 degrees\n    for(i=[0:3]) {\n        rotate([0, 0, i*90+45])\n        translate([diameter/2-10, 0, base_height/2])\n        union() {\n            // Mounting block\n            cube([20, 12, 12], center=true);\n            \n            // Screw hole\n            rotate([0, 90, 0])\n            translate([0, 0, -6])\n            cylinder(h=12, d=3.5, center=true);\n        }\n    }\n}\n\n// Structural ribs for strength\nmodule structural_ribs() {\n    // Diagonal reinforcement ribs\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([0, 0, base_height/2])\n        cube([diameter*0.7, wall_thickness, base_height], center=true);\n    }\n}\n\n// Grip texture on outer surface\nmodule grip_texture() {\n    // Knurled pattern around circumference\n    for(i=[0:71]) {\n        rotate([0, 0, i*5])\n        translate([diameter/2, 0, base_height/2])\n        cube([1, 1.5, base_height-2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    swashplate_base();\n    \n    translate([0, 0, base_height])\n    bearing_housing();\n    \n    // Structural elements\n    control_mounts();\n    structural_ribs();\n    \n    // Surface details\n    grip_texture();\n}\n\n// Central support column\ntranslate([0, 0, -height/2+base_height/2])\ndifference() {\n    cylinder(h=height, d=30);\n    cylinder(h=height+1, d=26);\n}",
    "renders": true
  },
  {
    "sports_equipment": "skid",
    "openscad_code": "// Skid Furniture (Skid Coffee Table)\n// Realistic style, medium complexity\n// Overall size: 120mm x 80mm x 45mm\n\n// Global parameters\ntable_length = 120;\ntable_width = 80;\ntable_height = 45;\nwall_thickness = 2;\nskid_width = 8;\nskid_height = 12;\n\n// Wood color\ncolor(\"BurlyWood\") {\n\n// Main tabletop\nmodule tabletop() {\n    difference() {\n        // Main slab\n        cube([table_length, table_width, 5]);\n        \n        // Slight chamfer on edges\n        translate([-0.5, -0.5, 4])\n            cube([table_length+1, table_width+1, 2]);\n    }\n}\n\n// Skid runners\nmodule skid_runner(length, position) {\n    translate([position, 0, 0]) {\n        // Bottom skid base\n        cube([skid_width, table_width, skid_height]);\n        \n        // Top support block\n        translate([1, 1, skid_height])\n            cube([skid_width-2, table_width-2, 8]);\n    }\n}\n\n// Cross support beams\nmodule cross_beam() {\n    translate([skid_width, 5, skid_height-2])\n        cube([table_length-skid_width*2, 3, 4]);\n    translate([skid_width, table_width-8, skid_height-2])\n        cube([table_length-skid_width*2, 3, 4]);\n}\n\n// Corner brackets\nmodule corner_bracket(x_pos, y_pos) {\n    translate([x_pos, y_pos, skid_height+8]) {\n        // Vertical support\n        cube([5, 5, 5]);\n        \n        // Diagonal brace\n        translate([0, 0, 5])\n            rotate([45, 0, 0])\n                cube([5, 5, 7]);\n    }\n}\n\n// Assembly\nunion() {\n    // Tabletop\n    translate([0, 0, table_height-5])\n        tabletop();\n    \n    // Skid runners - front and back\n    skid_runner(skid_width, 0);\n    skid_runner(table_length-skid_width*2, 0);\n    \n    // Cross support beams\n    cross_beam();\n    \n    // Corner brackets for structural support\n    corner_bracket(10, 10);\n    corner_bracket(table_length-15, 10);\n    corner_bracket(10, table_width-15);\n    corner_bracket(table_length-15, table_width-15);\n    \n    // Additional middle support\n    translate([table_length/2-4, 0, 0])\n        cube([8, table_width, skid_height]);\n    \n    // Skid grooves for realistic look\n    for (i = [1:3]) {\n        translate([skid_width+2, i*20+10, skid_height-6])\n            cube([table_length-skid_width*2-4, 2, 2]);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "keel",
    "openscad_code": "// Keel furniture piece - a stylized keel-shaped bookshelf/display unit\n// Overall dimensions: 120mm tall x 80mm deep x 60mm wide\n// Wall thickness: 2mm throughout for 3D printability\n\n// Main parameters\nkeel_height = 120;\nkeel_width = 60;\nkeel_depth = 80;\nwall_thickness = 2;\nshelf_count = 4;\n\n// Base module for the keel structure\nmodule keel_base() {\n    // Main keel body - tapered from bottom to top\n    translate([0, 0, keel_height/2])\n    scale([1, 0.7, 1])\n    rotate([90, 0, 0])\n    cylinder(h=keel_height, r1=keel_width/2, r2=keel_width/4, $fn=6);\n}\n\n// Hollow out the keel body\nmodule keel_hollow() {\n    translate([0, 0, keel_height/2])\n    scale([1, 0.7, 1])\n    rotate([90, 0, 0])\n    cylinder(h=keel_height+2, r1=keel_width/2-wall_thickness, r2=keel_width/4-wall_thickness, $fn=6);\n}\n\n// Shelf supports - keel-style structural ribs\nmodule shelf_supports() {\n    for(i = [1:shelf_count-1]) {\n        z_pos = (i * keel_height / shelf_count);\n        \n        // Front support rib\n        translate([0, -keel_depth/4, z_pos])\n        rotate([0, 90, 0])\n        cylinder(h=keel_depth/2, r=wall_thickness*1.5, $fn=8);\n        \n        // Rear support rib\n        translate([0, keel_depth/4, z_pos])\n        rotate([0, 90, 0])\n        cylinder(h=keel_depth/2, r=wall_thickness*1.5, $fn=8);\n    }\n}\n\n// Individual shelf\nmodule shelf(height) {\n    shelf_width = keel_width * (1 - height/keel_height * 0.5);\n    \n    difference() {\n        // Main shelf platform\n        translate([0, 0, height])\n        cube([shelf_width-wall_thickness*2, keel_depth-wall_thickness*2, wall_thickness], center=true);\n        \n        // Lightening holes for weight reduction\n        for(x = [-shelf_width/4, 0, shelf_width/4]) {\n            for(y = [-keel_depth/4, 0, keel_depth/4]) {\n                translate([x, y, height])\n                cylinder(h=wall_thickness+1, r=3, $fn=16);\n            }\n        }\n    }\n}\n\n// Base stabilizer - keel fin inspired\nmodule base_fin() {\n    // Main fin\n    translate([0, -keel_depth/2 - 5, 0])\n    rotate([90, 0, 0])\n    cylinder(h=10, r1=keel_width/3, r2=keel_width/6, $fn=3);\n    \n    // Support struts\n    for(angle = [0:120:240]) {\n        rotate([0, 0, angle])\n        translate([keel_width/4, -keel_depth/2 - 2.5, 0])\n        rotate([90, 0, 0])\n        cylinder(h=5, r1=wall_thickness*1.5, r2=wall_thickness, $fn=6);\n    }\n}\n\n// Assembly\nunion() {\n    // Main keel structure\n    difference() {\n        keel_base();\n        keel_hollow();\n    }\n    \n    // Shelf supports\n    shelf_supports();\n    \n    // Shelves\n    for(i = [1:shelf_count-1]) {\n        shelf(i * keel_height / shelf_count);\n    }\n    \n    // Base fin for stability\n    base_fin();\n    \n    // Top cap\n    translate([0, 0, keel_height])\n    cylinder(h=wall_thickness*2, r1=keel_width/4, r2=keel_width/4+2, $fn=6);\n    \n    // Decorative keel spine\n    translate([0, 0, keel_height/2])\n    rotate([0, 90, 0])\n    scale([1, 1, 0.5])\n    cylinder(h=keel_height, r=wall_thickness, $fn=4);\n}",
    "renders": true
  },
  {
    "sports_equipment": "hull",
    "openscad_code": "// Hull Furniture - Realistic Style, Medium Complexity\n// A streamlined storage bench inspired by boat hull shapes\n\n// Overall dimensions (mm)\nlength = 120;\nwidth = 40;\nheight = 45;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule hull_shell() {\n    difference() {\n        // Main hull body\n        hull() {\n            // Bottom curve\n            translate([0, 0, wall]) \n                scale([1, 1, 0.3]) \n                    sphere(d=width-wall*2, $fn=50);\n            \n            // Top edge\n            translate([0, 0, height-wall]) \n                cube([length-wall*2, width-wall*2, 0.1], center=true);\n        }\n        \n        // Hollow interior\n        hull() {\n            translate([0, 0, wall*2]) \n                scale([1, 1, 0.3]) \n                    sphere(d=width-wall*4, $fn=50);\n            translate([0, 0, height-wall*2]) \n                cube([length-wall*4, width-wall*4, 0.1], center=true);\n        }\n    }\n}\n\nmodule deck_planking() {\n    // Simulated wood deck planks\n    plank_width = 4;\n    gap = 1;\n    for(i = [-length/2+10 : plank_width+gap : length/2-10]) {\n        translate([i, 0, height-wall*1.5]) \n            cube([plank_width, width-wall*2, wall/2], center=true);\n    }\n}\n\nmodule structural_ribs() {\n    // Internal support ribs for strength\n    rib_thickness = 2;\n    for(pos = [-length/3, 0, length/3]) {\n        translate([pos, 0, height/2]) \n            rotate([0, 90, 0]) \n                cylinder(h=width-wall*2, r1=height/3, r2=height/4, $fn=30);\n    }\n}\n\nmodule storage_hatch() {\n    // Top storage access\n    hatch_length = length/2;\n    hatch_width = width/2;\n    \n    // Hatch frame\n    difference() {\n        translate([0, 0, height-wall]) \n            cube([hatch_length+wall, hatch_width+wall, wall*2], center=true);\n        translate([0, 0, height-wall/2]) \n            cube([hatch_length, hatch_width, wall*3], center=true);\n    }\n    \n    // Handle\n    translate([0, 0, height+wall/2]) \n        cylinder(h=wall*1.5, r=wall, $fn=20);\n}\n\nmodule base_supports() {\n    // Four support feet\n    foot_size = 6;\n    positions = [[-length/2+10, -width/2+5], \n                 [length/2-10, -width/2+5],\n                 [-length/2+10, width/2-5],\n                 [length/2-10, width/2-5]];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], 0]) {\n            difference() {\n                sphere(d=foot_size, $fn=30);\n                translate([0, 0, -foot_size]) \n                    cylinder(h=foot_size, d=foot_size-wall*2, $fn=30);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    hull_shell();\n    deck_planking();\n    structural_ribs();\n    storage_hatch();\n    base_supports();\n}",
    "renders": true
  },
  {
    "sports_equipment": "deck",
    "openscad_code": "// Modular Deck Chair – OpenSCAD, 3D-printable\n// Overall size ≈ 110 x 60 x 95 mm (L x W x H)\n\n// Parameters\nseat_w = 60;        // seat width\nseat_d = 55;        // seat depth\nseat_t = 2;         // seat thickness\nleg_h = 40;         // front leg height\nback_h = 50;        // back-rest height above seat\nslat_w = 8;         // width of each slat\nslat_gap = 3;       // gap between slats\nback_angle = 105;   // back-rest recline in degrees\nwall = 2;           // uniform wall / frame thickness\n\n// Helper module: rounded cuboid (no overhangs)\nmodule roundedCube(size, r) {\n    hull() {\n        translate([r,r,r]) sphere(r);\n        translate([size.x-r,r,r]) sphere(r);\n        translate([r,size.y-r,r]) sphere(r);\n        translate([size.x-r,size.y-r,r]) sphere(r);\n        translate([r,r,size.z-r]) sphere(r);\n        translate([size.x-r,r,size.z-r]) sphere(r);\n        translate([r,size.y-r,size.z-r]) sphere(r);\n        translate([size.x-r,size.y-r,size.z-r]) sphere(r);\n    }\n}\n\n// Seat frame\nmodule seatFrame() {\n    difference() {\n        // outer frame\n        roundedCube([seat_w, seat_d, seat_t], 3);\n        // cavity for slats\n        translate([wall, wall, -0.1])\n            cube([seat_w-2*wall, seat_d-2*wall, seat_t+0.2]);\n    }\n}\n\n// Slats in seat\nmodule seatSlats() {\n    n = floor((seat_d-2*wall)/(slat_w+slat_gap));\n    for (i=[0:n-1]) {\n        translate([wall,\n                   wall + i*(slat_w+slat_gap),\n                   seat_t/2])\n            cube([seat_w-2*wall, slat_w, seat_t]);\n    }\n}\n\n// Front legs\nmodule frontLegs() {\n    for (x=[wall, seat_w-wall]) {\n        translate([x-wall/2, seat_d-wall, 0])\n            roundedCube([wall, wall, leg_h], 2);\n    }\n}\n\n// Back legs + back-rest support\nmodule backLegs() {\n    for (x=[wall, seat_w-wall]) {\n        rotate([0, back_angle-90, 0])\n            translate([x-wall/2, 0, 0])\n                roundedCube([wall, wall, back_h], 2);\n    }\n}\n\n// Back-rest slats\nmodule backSlats() {\n    n = floor((seat_w-2*wall)/(slat_w+slat_gap));\n    for (i=[0:n-1]) {\n        rotate([0, back_angle-90, 0])\n            translate([wall + i*(slat_w+slat_gap), 0, seat_t])\n                cube([slat_w, wall, back_h]);\n    }\n}\n\n// Arm rest\nmodule armRests() {\n    arm_h = 20;\n    arm_d = seat_d*0.6;\n    for (x=[0:1]) {\n        mirror([x,0,0]) {\n            translate([seat_w/2*pow(-1,x), seat_d-arm_d, arm_h])\n                roundedCube([wall, arm_d, wall], 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    seatFrame();\n    seatSlats();\n    frontLegs();\n    backLegs();\n    backSlats();\n    armRests();\n}",
    "renders": true
  },
  {
    "sports_equipment": "mast",
    "openscad_code": "// Windsurfing Mast Base with Mast Tube and Universal Joint\n// Realistic style, medium complexity, 3D printable\n\n$fn = 36;\n\n// Main dimensions\nbase_diameter = 40;\nbase_height = 8;\nmast_tube_diameter = 30;\nmast_tube_height = 80;\nwall_thickness = 2;\npin_diameter = 8;\npin_length = 20;\n\n// Create the base plate\nmodule base_plate() {\n    difference() {\n        // Solid base cylinder\n        cylinder(h = base_height, d = base_diameter, center = true);\n        \n        // Central hole for universal joint pin\n        translate([0, 0, -base_height/2])\n            cylinder(h = base_height + 1, d = pin_diameter + 2, center = false);\n        \n        // Screw holes around base (4 holes for mounting)\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([base_diameter/2 - 8, 0, -base_height/2])\n                    cylinder(h = base_height + 1, d = 4, center = false);\n        }\n    }\n}\n\n// Create mast tube with grip texture\nmodule mast_tube() {\n    difference() {\n        // Outer tube\n        cylinder(h = mast_tube_height, d = mast_tube_diameter, center = false);\n        \n        // Inner hollow tube\n        translate([0, 0, -1])\n            cylinder(h = mast_tube_height + 2, d = mast_tube_diameter - wall_thickness*2, center = false);\n        \n        // Bottom chamfer\n        translate([0, 0, -1])\n            cylinder(h = 5, d1 = mast_tube_diameter, d2 = mast_tube_diameter - wall_thickness*2, center = false);\n    }\n    \n    // Grip rings around tube\n    for (i = [1:4]) {\n        translate([0, 0, i * (mast_tube_height/5)])\n            difference() {\n                cylinder(h = 2, d = mast_tube_diameter + 1, center = true);\n                cylinder(h = 2.1, d = mast_tube_diameter - 1, center = true);\n            }\n    }\n}\n\n// Universal joint pin assembly\nmodule universal_joint() {\n    // Main pin\n    translate([0, 0, -pin_length/2])\n        cylinder(h = pin_length, d = pin_diameter, center = true);\n    \n    // Cross pin for U-joint\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = pin_diameter + 4, d = pin_diameter/2, center = true);\n    \n    // Reinforcement rings\n    translate([0, 0, pin_length/4])\n        cylinder(h = 3, d = pin_diameter + 4, center = true);\n    \n    translate([0, 0, -pin_length/4])\n        cylinder(h = 3, d = pin_diameter + 4, center = true);\n}\n\n// Mast base assembly\nmodule mast_base_assembly() {\n    // Base plate\n    translate([0, 0, base_height/2])\n        base_plate();\n    \n    // Mast tube\n    translate([0, 0, base_height])\n        mast_tube();\n    \n    // Universal joint pin\n    translate([0, 0, 0])\n        universal_joint();\n}\n\n// Create the complete mast furniture item\nmast_base_assembly();",
    "renders": true
  },
  {
    "sports_equipment": "rigging",
    "openscad_code": "// Rigging furniture - Rowing Machine Seat Rigging\n// Overall dimensions: 120mm x 80mm x 50mm\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main module\nmodule rowing_rigging() {\n    // Main frame rail\n    linear_extrude(height = 6)\n    offset(r = wall_thickness)\n    polygon([\n        [0, 0], [120, 0], [120, 20], [0, 20]\n    ]);\n    \n    // Front support bracket\n    translate([10, 10, -20])\n    cube([15, 60, 20]);\n    \n    // Rear support bracket  \n    translate([95, 10, -20])\n    cube([15, 60, 20]);\n    \n    // Seat rollers - 4 wheels\n    for(x = [25, 45, 65, 85])\n    translate([x, 30, 6])\n    roller_assembly();\n    \n    // Guide rail top\n    translate([0, 8, 6])\n    cube([120, 4, 2]);\n    \n    // Mounting holes\n    for(pos = [[20, 5], [100, 5]])\n    translate([pos[0], pos[1], -19])\n    cylinder(h = 22, r = 3);\n    \n    // Structural ribs\n    for(x = [0:20:100])\n    translate([x, 0, -10])\n    rib_support();\n    \n    // Foot stretcher mounting points\n    translate([5, 70, 0])\n    stretcher_mount();\n    translate([115, 70, 0])\n    mirror([1,0,0])\n    stretcher_mount();\n}\n\n// Roller wheel assembly\nmodule roller_assembly() {\n    // Wheel\n    rotate([90, 0, 0])\n    cylinder(h = 10, r = 6);\n    \n    // Axle pin\n    cylinder(h = 12, r = 2);\n    \n    // Bearing housing\n    difference() {\n        translate([-8, -8, 0])\n        cube([16, 16, 6]);\n        translate([0, 0, -0.1])\n        cylinder(h = 6.2, r = 7);\n    }\n}\n\n// Structural support rib\nmodule rib_support() {\n    difference() {\n        union() {\n            translate([0, 10, 0])\n            cube([20, wall_thickness, 10]);\n            \n            translate([5, 0, 0])\n            cube([wall_thickness, 10, 10]);\n            \n            translate([15, 0, 0])\n            cube([wall_thickness, 10, 10]);\n        }\n        \n        // Lightening holes\n        for(pos = [[10, 5, 5], [5, 5, 5], [15, 5, 5]])\n        translate(pos)\n        sphere(r = 1.5);\n    }\n}\n\n// Foot stretcher mounting bracket\nmodule stretcher_mount() {\n    difference() {\n        union() {\n            // Main bracket\n            translate([-5, 0, 0])\n            cube([10, 15, 10]);\n            \n            // Reinforcement gusset\n            rotate([0, -45, 0])\n            translate([0, 0, 0])\n            cube([10, 15, 2]);\n        }\n        \n        // Mounting slot\n        translate([0, 7.5, 5])\n        rotate([0, 90, 0])\n        cylinder(h = 12, r = 2);\n    }\n}\n\n// Generate the model\nrowing_rigging();",
    "renders": true
  },
  {
    "sports_equipment": "compass",
    "openscad_code": "// Compass Furniture - Realistic Style\n// Size: ~120mm diameter, designed for tabletop display\n\n// Overall parameters\ncompass_diameter = 120;\ncompass_height = 15;\nwall_thickness = 2;\n\n// Base plate\nmodule base_plate() {\n    difference() {\n        // Main circular base\n        cylinder(h=compass_height, d=compass_diameter, $fn=100);\n        \n        // Hollow out center\n        translate([0, 0, wall_thickness])\n            cylinder(h=compass_height-wall_thickness, d=compass_diameter-wall_thickness*2, $fn=100);\n        \n        // Add drainage holes for 3D printing\n        for(i=[0:5:355]) {\n            rotate([0, 0, i])\n                translate([compass_diameter/2-7, 0, compass_height-1])\n                    cylinder(h=2, d=3, $fn=12);\n        }\n    }\n}\n\n// Compass rose face\nmodule compass_rose() {\n    // Background disk\n    color(\"antique_white\")\n    difference() {\n        cylinder(h=1, d=compass_diameter-wall_thickness*2-4, $fn=100);\n        \n        // Central pivot hole\n        translate([0, 0, -0.1])\n            cylinder(h=1.2, d=6, $fn=20);\n    }\n    \n    // Cardinal points text bases (simplified as blocks)\n    translate([0, compass_diameter/2-20, 0.5])\n        cube([8, 12, 1], center=true);\n    translate([0, -(compass_diameter/2-20), 0.5])\n        cube([8, 12, 1], center=true);\n    translate([compass_diameter/2-20, 0, 0.5])\n        cube([12, 8, 1], center=true);\n    translate([-(compass_diameter/2-20), 0, 0.5])\n        cube([12, 8, 1], center=true);\n    \n    // Degree markers\n    for(i=[0:30:330]) {\n        rotate([0, 0, i])\n            translate([compass_diameter/2-wall_thickness*2-12, 0, 0.5])\n                cube([1, 4, 1], center=true);\n    }\n}\n\n// Needle assembly\nmodule compass_needle() {\n    // Pivot post\n    translate([0, 0, 1])\n        cylinder(h=3, d=4, $fn=20);\n    \n    // Needle body\n    translate([0, 0, 2])\n        rotate([0, 0, 15]) // Pointing 15 degrees for aesthetic\n        union() {\n            // North half (red)\n            color(\"red\")\n            translate([0, 20, 0])\n                cube([4, 40, 2], center=true);\n            \n            // South half\n            color(\"darkslategray\")\n            translate([0, -20, 0])\n                cube([4, 40, 2], center=true);\n            \n            // Decorative circles\n            translate([0, 25, 1])\n                sphere(d=8, $fn=20);\n            translate([0, -25, 1])\n                sphere(d=8, $fn=20);\n            \n            // Central hub\n            translate([0, 0, 1])\n                cylinder(h=4, d=10, $fn=30);\n        }\n}\n\n// Support legs for furniture stability\nmodule support_legs() {\n    leg_height = 8;\n    leg_width = 6;\n    \n    for(i=[45, 135, 225, 315]) {\n        rotate([0, 0, i])\n            translate([compass_diameter/2-10, 0, -leg_height])\n                difference() {\n                    // Main leg\n                    cube([leg_width, leg_width, leg_height], center=true);\n                    \n                    // Hollow for material saving\n                    translate([0, 0, leg_height/2-1])\n                        cube([leg_width-wall_thickness*2, leg_width-wall_thickness*2, leg_height-2], center=true);\n                }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    base_plate();\n    support_legs();\n    \n    // Top components\n    translate([0, 0, compass_height-1])\n        union() {\n            compass_rose();\n            compass_needle();\n        }\n    \n    // Furniture-style decorative ring\n    translate([0, 0, compass_height-2])\n        difference() {\n            cylinder(h=2, d=compass_diameter-wall_thickness, $fn=100);\n            cylinder(h=2, d=compass_diameter-wall_thickness*4, $fn=100);\n        }\n}",
    "renders": true
  },
  {
    "sports_equipment": "radar",
    "openscad_code": "// Radar furniture - Wall-mounted radar display unit\n// Realistic medium complexity version\n\nradar_diameter = 120;\nbase_width = 80;\nbase_height = 100;\nwall_thickness = 2;\n\nmodule radar_base() {\n    // Main wall mounting plate\n    difference() {\n        cube([base_width, base_height, wall_thickness], center=true);\n        \n        // Mounting holes\n        for(x = [-30, 30])\n            for(y = [-40, 40])\n                translate([x, y, 0])\n                    cylinder(h=wall_thickness+1, d=5, center=true, $fn=20);\n    }\n}\n\nmodule radar_arm() {\n    // Supporting arm structure\n    translate([0, base_height/2 - wall_thickness, wall_thickness/2]) {\n        union() {\n            // Main arm\n            cube([10, 20, 15], center=true);\n            \n            // Reinforcement gussets\n            for(side = [-1, 1])\n                translate([side*5, -5, 7.5])\n                    rotate([0, side*45, 0])\n                        cube([wall_thickness, 10, 10], center=true);\n        }\n    }\n}\n\nmodule radar_dish() {\n    // Radar dish assembly\n    translate([0, base_height/2 - wall_thickness + 20, 15]) {\n        rotate([0, 0, 0]) {\n            // Dish support ring\n            rotate_extrude(angle=360, $fn=60)\n                translate([radar_diameter/2 - 10, 0, 0])\n                    square([wall_thickness, 15]);\n            \n            // Parabolic dish\n            difference() {\n                rotate_extrude(angle=360, $fn=60)\n                    translate([radar_diameter/2 - 5, 0, 0])\n                        circle(r=radar_diameter/2 - 5);\n                \n                // Dish cavity\n                rotate_extrude(angle=360, $fn=60)\n                    translate([radar_diameter/2 - 5, 0, 0])\n                        scale([1, 0.3])\n                            circle(r=radar_diameter/2 - 7);\n            }\n            \n            // Central antenna array\n            translate([0, 0, 15])\n                cylinder(h=20, d=8, center=false, $fn=20);\n            \n            // Radial support struts\n            for(i = [0:11]) {\n                rotate([0, 0, i*30])\n                    translate([radar_diameter/2 - 15, 0, 7.5])\n                        cube([radar_diameter/2 - 15, wall_thickness, 15], center=true);\n            }\n        }\n    }\n}\n\nmodule control_panel() {\n    // Control interface below radar\n    translate([0, -base_height/2 + wall_thickness + 10, wall_thickness/2]) {\n        // Main panel housing\n        cube([60, 20, 8], center=true);\n        \n        // Display screen\n        translate([0, 0, 4.1])\n            color([0.1, 0.1, 0.1])\n                cube([50, 15, 0.5], center=true);\n        \n        // Control knobs\n        for(x = [-20, -10, 0, 10, 20])\n            translate([x, 0, 8.1])\n                cylinder(h=3, d=4, center=false, $fn=16);\n    }\n}\n\nmodule cable_management() {\n    // Cable routing channels\n    translate([base_width/2 - wall_thickness, 0, wall_thickness/2]) {\n        rotate([0, 90, 0])\n            cylinder(h=base_height - 20, d=6, center=false, $fn=20);\n    }\n    \n    // Cable clips\n    for(y = [-30, -10, 10, 30])\n        translate([base_width/2 - 5, y, wall_thickness/2])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=10, d=8, center=true, $fn=20);\n                    cylinder(h=11, d=6, center=true, $fn=20);\n                }\n}\n\n// Assembly\nunion() {\n    radar_base();\n    radar_arm();\n    radar_dish();\n    control_panel();\n    cable_management();\n}",
    "renders": true
  },
  {
    "sports_equipment": "sonar",
    "openscad_code": "// Sonar Transducer Furniture Piece\n// A realistic 3D printable sonar transducer designed as furniture accent\n// Overall dimensions: 120mm diameter, 80mm height\n\n$fn = 36;\n\nmodule sonar_base() {\n    // Main cylindrical base with 2mm wall thickness\n    difference() {\n        cylinder(h=20, d=120);\n        cylinder(h=20, d=116);\n    }\n    \n    // Base mounting flange with 4 holes\n    difference() {\n        translate([0, 0, -2])\n            cylinder(h=4, d=130);\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([55, 0, -3])\n                    cylinder(h=6, d=4);\n        }\n    }\n}\n\nmodule sonar_body() {\n    // Main body - tapered cylinder\n    translate([0, 0, 20])\n    difference() {\n        cylinder(h=40, d1=120, d2=80);\n        cylinder(h=40, d1=116, d2=76);\n    }\n    \n    // Structural ribs for strength\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([0, 0, 20])\n                linear_extrude(height=40, scale=0.67)\n                    square([2, 60], center=true);\n    }\n}\n\nmodule transducer_array() {\n    // Array of transducer elements\n    translate([0, 0, 60])\n    difference() {\n        cylinder(h=15, d=80);\n        cylinder(h=15, d=76);\n    }\n    \n    // Individual transducer cones\n    for(r=[0:2]) {\n        for(a=[0:7]) {\n            rotate([0, 0, a*45])\n                translate([r*20+10, 0, 60])\n                    cone(12, 6, 3);\n        }\n    }\n}\n\nmodule cone(h, r1, r2) {\n    cylinder(h=h, d1=r1*2, d2=r2*2);\n}\n\nmodule cable_gland() {\n    // Cable entry port\n    translate([0, 0, 75])\n    difference() {\n        cylinder(h=10, d=20);\n        cylinder(h=10, d=16);\n    }\n    \n    // Cable strain relief details\n    translate([0, 0, 75])\n    for(i=[0:3]) {\n        translate([0, 0, i*2])\n            cylinder(h=1, d=18+i);\n    }\n}\n\nmodule mounting_brackets() {\n    // Furniture mounting brackets\n    for(i=[0:3]) {\n        rotate([0, 0, i*120])\n            translate([65, 0, 10])\n                bracket();\n    }\n}\n\nmodule bracket() {\n    // L-shaped bracket for furniture mounting\n    difference() {\n        union() {\n            translate([0, -5, 0])\n                cube([30, 10, 5]);\n            translate([25, -5, 0])\n                cube([5, 10, 30]);\n        }\n        translate([0, -3, 2])\n            cube([26, 6, 3]);\n        translate([27, -3, 2])\n            cube([3, 6, 26]);\n    }\n}\n\n// Assembly\nunion() {\n    sonar_base();\n    sonar_body();\n    transducer_array();\n    cable_gland();\n    mounting_brackets();\n}",
    "renders": true
  },
  {
    "sports_equipment": "gps",
    "openscad_code": "// GPS Navigation Mount Furniture\n// A wall-mounted GPS holder with cable management and storage\n\nwall_thickness = 2;\nmount_depth = 15;\nmount_width = 60;\nmount_height = 90;\n\ngps_width = 50;\ngps_height = 80;\ngps_thickness = 8;\n\n// Main mounting plate\nmodule mounting_plate() {\n    difference() {\n        // Main plate\n        cube([mount_width, mount_height, wall_thickness]);\n        \n        // Mounting holes - 3 holes in triangular pattern\n        for (y = [20, 70]) {\n            translate([mount_width/2, y, -1]) \n                cylinder(h=wall_thickness+2, r=2.5);\n        }\n        translate([10, 45, -1]) \n            cylinder(h=wall_thickness+2, r=2.5);\n    }\n}\n\n// GPS holder frame\nmodule gps_holder() {\n    difference() {\n        // Outer frame\n        translate([-wall_thickness, -wall_thickness, wall_thickness])\n            cube([gps_width+2*wall_thickness, gps_height+2*wall_thickness, gps_thickness+wall_thickness]);\n        \n        // Inner pocket for GPS\n        translate([0, 0, wall_thickness+1])\n            cube([gps_width, gps_height, gps_thickness+2]);\n        \n        // Cable slot\n        translate([gps_width-5, gps_height/2-2, wall_thickness+1])\n            cube([10, 4, gps_thickness]);\n    }\n}\n\n// Charging cable management\nmodule cable_holders() {\n    // Bottom cable guide\n    translate([mount_width/2-5, mount_height+5, wall_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=10, r=3);\n    \n    // Side cable clips\n    for (y = [20, 50, 80]) {\n        translate([mount_width+2, y, wall_thickness/2])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=6, r=4);\n                    translate([0, -2, 0])\n                        cube([8, 4, 6]);\n                }\n    }\n}\n\n// Ventilation slots for cooling\nmodule ventilation() {\n    for (x = [5:10:gps_width-15]) {\n        translate([x, wall_thickness-1, wall_thickness+gps_thickness/2])\n            cube([3, gps_height-2*wall_thickness, 2]);\n    }\n}\n\n// Rubber grip strips\nmodule grip_strips() {\n    // Left grip\n    translate([-wall_thickness-1, 10, wall_thickness+2])\n        cube([wall_thickness, 60, 2]);\n    \n    // Right grip\n    translate([gps_width+1, 10, wall_thickness+2])\n        cube([wall_thickness, 60, 2]);\n    \n    // Bottom support lip\n    translate([0, gps_height+wall_thickness, wall_thickness])\n        cube([gps_width, wall_thickness, 3]);\n}\n\n// Assembly\nunion() {\n    mounting_plate();\n    \n    translate([(mount_width-gps_width)/2, (mount_height-gps_height)/2, 0]) {\n        gps_holder();\n        ventilation();\n        grip_strips();\n    }\n    \n    cable_holders();\n}",
    "renders": true
  },
  {
    "sports_equipment": "transponder",
    "openscad_code": "// Transponder furniture item - realistic style, medium complexity\n// Overall dimensions: 120mm x 80mm x 35mm\n\n// Main housing module\nmodule transponder_body() {\n    // Main case with rounded edges\n    difference() {\n        // Outer shell - 2mm wall thickness\n        minkowski() {\n            cube([116, 76, 31], center=true);\n            sphere(r=2, $fn=16);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([112, 72, 27], center=true);\n            sphere(r=1.5, $fn=16);\n        }\n    }\n}\n\n// Display screen module\nmodule display_screen() {\n    translate([0, 25, 15.5]) {\n        difference() {\n            // Screen bezel\n            cube([60, 40, 2], center=true);\n            // Screen recess\n            translate([0, 0, -0.5])\n                cube([56, 36, 3], center=true);\n        }\n    }\n}\n\n// Button array module\nmodule buttons() {\n    // 3x3 button grid\n    for (x = [-20, 0, 20]) {\n        for (y = [-20, 0, 20]) {\n            translate([x, -25, 16]) {\n                difference() {\n                    // Button housing\n                    cylinder(h=2, r=6, $fn=16);\n                    // Button top\n                    cylinder(h=3, r=4.5, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Antenna module\nmodule antenna() {\n    translate([0, 0, 17]) {\n        // Main antenna housing\n        difference() {\n            cylinder(h=15, r=5, center=true, $fn=16);\n            cylinder(h=16, r=3.5, center=true, $fn=16);\n        }\n        \n        // Antenna cap\n        translate([0, 0, 7.5])\n            sphere(r=5.5, $fn=16);\n            \n        // Antenna details - concentric rings\n        for (i = [1:3]) {\n            translate([0, 0, 2.5*i])\n                difference() {\n                    cylinder(h=1, r=4.5 + 0.5*i, $fn=16);\n                    cylinder(h=1.5, r=4.4 + 0.5*i, $fn=16);\n                }\n        }\n    }\n}\n\n// Side grips module\nmodule side_grips() {\n    // Left grip\n    translate([-58, 0, 0]) {\n        for (i = [-35:7:35]) {\n            translate([0, i, 0]) {\n                cube([2, 5, 30], center=true);\n            }\n        }\n    }\n    \n    // Right grip\n    translate([58, 0, 0]) {\n        for (i = [-35:7:35]) {\n            translate([0, i, 0]) {\n                cube([2, 5, 30], center=true);\n            }\n        }\n    }\n}\n\n// Mounting bracket module\nmodule mounting_bracket() {\n    // Bracket base\n    translate([0, 0, -18]) {\n        difference() {\n            cube([80, 60, 4], center=true);\n            // Screw holes\n            for (x = [-30, 30]) {\n                for (y = [-20, 20]) {\n                    translate([x, y, -1])\n                        cylinder(h=6, r=2.5, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// LED indicators module\nmodule led_indicators() {\n    // Power LED\n    translate([-40, 35, 16]) {\n        cylinder(h=1, r=3, $fn=16);\n    }\n    \n    // Status LEDs\n    for (i = [0:2]) {\n        translate([30 + i*15, 35, 16]) {\n            cylinder(h=1, r=3, $fn=16);\n        }\n    }\n}\n\n// Assemble the complete transponder\nunion() {\n    transponder_body();\n    display_screen();\n    buttons();\n    antenna();\n    side_grips();\n    mounting_bracket();\n    led_indicators();\n}",
    "renders": true
  },
  {
    "sports_equipment": "autopilot",
    "openscad_code": "// Autopilot control yoke furniture piece (realistic style, medium complexity)\n// Wall-mounted shelf/display unit shaped like a flight yoke with throttle quadrant\n\n$fn = 32;\n\n// Overall dimensions (mm)\nyoke_width = 120;\nyoke_height = 80;\nyoke_thickness = 25;\nmount_depth = 30;\nthrottle_height = 40;\n\n// Main yoke body - structural frame\nmodule yoke_frame() {\n    difference() {\n        // Outer shell with proper wall thickness\n        hull() {\n            translate([-yoke_width/2, -yoke_height/2, 0])\n                cube([yoke_width, yoke_height, yoke_thickness]);\n            translate([-yoke_width/2 + 10, -yoke_height/2 + 10, 0])\n                cube([yoke_width - 20, yoke_height - 20, yoke_thickness]);\n        }\n        \n        // Hollow center for weight reduction\n        translate([-yoke_width/2 + 12, -yoke_height/2 + 12, 2])\n            cube([yoke_width - 24, yoke_height - 24, yoke_thickness - 4]);\n            \n        // Mounting holes for wall attachment (5mm diameter)\n        translate([-yoke_width/2 + 15, 0, yoke_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=20, d=5);\n        translate([yoke_width/2 - 15, 0, yoke_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=20, d=5);\n    }\n}\n\n// Control wheel grips\nmodule control_grips() {\n    // Left grip\n    translate([-yoke_width/2 + 10, -yoke_height/2 - 5, yoke_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=8);\n    \n    // Right grip        \n    translate([yoke_width/2 - 10, -yoke_height/2 - 5, yoke_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=8);\n            \n    // Center grip detail\n    translate([0, -yoke_height/2 - 8, yoke_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=12, d=10);\n}\n\n// Throttle quadrant module\nmodule throttle_quadrant() {\n    // Base mount\n    translate([0, yoke_height/2 + 10, 0])\n        cube([40, 20, throttle_height], center=true);\n    \n    // Throttle levers (3 pieces)\n    for(i = [-1:1]) {\n        translate([i * 10, yoke_height/2 + 20, throttle_height/2])\n            rotate([0, 30 * i, 0])\n                cube([3, 25, 3], center=true);\n    }\n}\n\n// Button panel details\nmodule button_panel() {\n    // Panel base\n    translate([0, -yoke_height/4, yoke_thickness - 4])\n        cube([30, 15, 2], center=true);\n    \n    // Buttons (array of 4 small cylinders)\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * 8, -yoke_height/4 + y * 4, yoke_thickness - 2])\n                cylinder(h=2, d=4);\n        }\n    }\n}\n\n// Structural mounting bracket\nmodule mounting_bracket() {\n    // Vertical support\n    translate([0, 0, -mount_depth/2 - 2])\n        cube([yoke_width - 40, 8, mount_depth], center=true);\n    \n    // Horizontal reinforcement\n    translate([0, yoke_height/4, -mount_depth/2 - 2])\n        cube([8, yoke_height/2, mount_depth], center=true);\n}\n\n// Generate the complete autopilot furniture piece\nunion() {\n    yoke_frame();\n    control_grips();\n    throttle_quadrant();\n    button_panel();\n    mounting_bracket();\n}",
    "renders": true
  },
  {
    "sports_equipment": "throttle",
    "openscad_code": "// Realistic throttle furniture – medium complexity\n// Overall printable size ≈ 110 mm long, 60 mm wide, 70 mm tall\n// All walls ≥ 2 mm for reliable FDM printing\n\n$fn = 36;\n\n// Main throttle body (hollowed cylinder)\nmodule throttle_body() {\n    difference() {\n        cylinder(h = 100, d = 50);           // outer shell\n        translate([0, 0, 2])\n            cylinder(h = 96, d = 46);        // inner hollow\n    }\n}\n\n// Grip rings – 3 evenly spaced ridges for tactile feedback\nmodule grip_rings() {\n    for (z = [20, 50, 80]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 4, d = 56);     // ridge\n                cylinder(h = 5, d = 50.1);   // cut flush with body\n            }\n    }\n}\n\n// Throttle lever arm\nmodule lever() {\n    translate([-10, 0, 105])\n        rotate([90, 0, 0])\n            union() {\n                // Lever shaft\n                cylinder(h = 40, d = 12);\n                // Hand grip ball\n                translate([0, 0, 44])\n                    sphere(d = 18);\n                // Grip dimples for fingers\n                for (a = [0:120:240])\n                    rotate([0, 0, a])\n                        translate([0, 9, 44])\n                            sphere(d = 3);\n            }\n}\n\n// Base plate with screw holes\nmodule base() {\n    difference() {\n        // Plate\n        translate([0, 0, -5])\n            cube([80, 60, 5], center = true);\n        // Chamfer edges\n        translate([0, 0, -2.5])\n            minkowski() {\n                cube([76, 56, 0.1], center = true);\n                cylinder(h = 0.1, d = 4);\n            }\n        // Four mounting holes Ø4 mm\n        for (p = [[-30, -22], [30, -22], [-30, 22], [30, 22]])\n            translate(concat(p, [-2.5]))\n                cylinder(h = 6, d = 4);\n    }\n}\n\n// Structural ribs inside body for stiffness\nmodule ribs() {\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n            translate([0, 0, 50])\n                cube([2, 23, 96], center = true);\n    }\n}\n\n// Final assembly\nunion() {\n    color(\"silver\")\n        throttle_body();\n    color(\"darkgray\")\n        grip_rings();\n    color(\"black\")\n        lever();\n    color(\"dimgray\")\n        base();\n    color(\"lightgray\")\n        ribs();\n}",
    "renders": true
  },
  {
    "sports_equipment": "joystick",
    "openscad_code": "// Joystick Furniture Item - Realistic Style\n// Medium complexity 3D printable joystick with furniture characteristics\n\n// Dimensions in mm\nbase_d = 80;\nbase_h = 12;\nneck_h = 35;\nneck_d = 25;\ngrip_h = 65;\ngrip_d = 32;\nball_d = 22;\nwall_t = 2;\n\n// Main furniture base structure\nmodule base_structure() {\n    // Main circular base\n    cylinder(h=base_h, d=base_d, $fn=64);\n    \n    // Furniture-style feet for stability\n    difference() {\n        cylinder(h=base_h, d=base_d+4, $fn=64);\n        translate([0,0,wall_t]) \n            cylinder(h=base_h, d=base_d-2, $fn=64);\n    }\n    \n    // Decorative concentric rings\n    for(i=[1:3]) {\n        translate([0,0,base_h-i*2])\n            cylinder(h=1, d=base_d-i*8, $fn=64);\n    }\n}\n\n// Supporting neck structure\nmodule neck_structure() {\n    translate([0,0,base_h]) {\n        // Main neck cylinder\n        difference() {\n            cylinder(h=neck_h, d=neck_d+wall_t*2, $fn=32);\n            translate([0,0,wall_t])\n                cylinder(h=neck_h, d=neck_d, $fn=32);\n        }\n        \n        // Reinforcement rings\n        for(i=[0:2]) {\n            translate([0,0,i*neck_h/3])\n                cylinder(h=wall_t*1.5, d=neck_d+wall_t*4, $fn=32);\n        }\n    }\n}\n\n// Grip assembly with furniture-quality joints\nmodule grip_assembly() {\n    translate([0,0,base_h+neck_h]) {\n        // Main grip body\n        difference() {\n            cylinder(h=grip_h, d=grip_d, $fn=32);\n            translate([0,0,wall_t])\n                cylinder(h=grip_h-wall_t, d=grip_d-wall_t*2, $fn=32);\n        }\n        \n        // Furniture-style grip texture\n        for(i=[0:7]) {\n            rotate([0,0,i*45])\n                translate([grip_d/2-wall_t, 0, wall_t])\n                    cube([wall_t*2, grip_d/4, grip_h-wall_t*2], center=true);\n        }\n        \n        // Top cap\n        translate([0,0,grip_h])\n            cylinder(h=wall_t*2, d=grip_d+wall_t, $fn=32);\n    }\n}\n\n// Ball top with furniture-style finish\nmodule ball_top() {\n    translate([0,0,base_h+neck_h+grip_h]) {\n        // Main ball\n        sphere(d=ball_d, $fn=32);\n        \n        // Furniture-grade cap detail\n        translate([0,0,-wall_t])\n            cylinder(h=wall_t*2, d=ball_d-wall_t, $fn=32);\n        \n        // Alignment reference\n        translate([0,ball_d/4,0])\n            cube([wall_t*1.5, wall_t, wall_t*1.5], center=true);\n    }\n}\n\n// Button modules for furniture-style controls\nmodule buttons() {\n    // Top button\n    translate([grip_d/3, 0, base_h+neck_h+grip_h/3]) {\n        difference() {\n            cylinder(h=wall_t*3, d=wall_t*5, $fn=16);\n            translate([0,0,wall_t])\n                cylinder(h=wall_t, d=wall_t*3, $fn=16);\n        }\n    }\n    \n    // Side buttons array\n    for(pos=[[-grip_d/3, grip_d/4, base_h+neck_h+grip_h/2],\n             [grip_d/3, grip_d/4, base_h+neck_h+grip_h/2]]) {\n        translate(pos) {\n            difference() {\n                cylinder(h=wall_t*2.5, d=wall_t*4, $fn=16);\n                translate([0,0,wall_t])\n                    cylinder(h=wall_t, d=wall_t*2, $fn=16);\n            }\n        }\n    }\n}\n\n// Cable management furniture feature\nmodule cable_exit() {\n    translate([0,-base_d/2-2,base_h/2]) {\n        rotate([90,0,0]) {\n            difference() {\n                cylinder(h=15, d=wall_t*6, $fn=16);\n                translate([0,0,wall_t])\n                    cylinder(h=15, d=wall_t*3, $fn=16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_structure();\n    neck_structure();\n    grip_assembly();\n    ball_top();\n    buttons();\n    cable_exit();\n}",
    "renders": true
  },
  {
    "sports_equipment": "yoke",
    "openscad_code": "// Yoke furniture item - OpenSCAD\n// Realistic style, medium complexity\n// 3D printable with 2mm wall thickness\n\n// Overall dimensions\nyoke_width = 120;\nyoke_height = 80;\nyoke_thickness = 8;\nhandle_diameter = 12;\nhandle_length = 60;\nbase_thickness = 4;\n\n// Main yoke arch module\nmodule yoke_arch() {\n    // Left arch\n    translate([-yoke_width/2, 0, 0])\n        difference() {\n            // Outer arch\n            linear_extrude(height=yoke_thickness)\n                offset(r=5)\n                    polygon(points=[\n                        [0, 0],\n                        [0, yoke_height*0.8],\n                        [yoke_width/4, yoke_height],\n                        [yoke_width/2, yoke_height*0.9],\n                        [yoke_width/2, 0]\n                    ]);\n            \n            // Inner cutout\n            translate([2, 2, 0])\n                linear_extrude(height=yoke_thickness+1)\n                    offset(r=3)\n                        polygon(points=[\n                            [0, 0],\n                            [0, yoke_height*0.8-5],\n                            [yoke_width/4-3, yoke_height-5],\n                            [yoke_width/2-4, yoke_height*0.9-5],\n                            [yoke_width/2-4, 0]\n                        ]);\n        }\n    \n    // Right arch (mirror)\n    mirror([1, 0, 0])\n        translate([-yoke_width/2, 0, 0])\n            difference() {\n                // Outer arch\n                linear_extrude(height=yoke_thickness)\n                    offset(r=5)\n                        polygon(points=[\n                            [0, 0],\n                            [0, yoke_height*0.8],\n                            [yoke_width/4, yoke_height],\n                            [yoke_width/2, yoke_height*0.9],\n                            [yoke_width/2, 0]\n                        ]);\n                \n                // Inner cutout\n                translate([2, 2, 0])\n                    linear_extrude(height=yoke_thickness+1)\n                        offset(r=3)\n                            polygon(points=[\n                                [0, 0],\n                                [0, yoke_height*0.8-5],\n                                [yoke_width/4-3, yoke_height-5],\n                                [yoke_width/2-4, yoke_height*0.9-5],\n                                [yoke_width/2-4, 0]\n                            ]);\n            }\n}\n\n// Handle grip texture\nmodule grip_texture() {\n    for(i = [0:5:handle_length-10]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(h=2, d=handle_diameter, $fn=20);\n                cylinder(h=2.1, d=handle_diameter-4, $fn=20);\n            }\n    }\n}\n\n// Central handle\nmodule central_handle() {\n    // Main handle\n    translate([0, -handle_length/2, yoke_height/2])\n        rotate([90, 0, 0])\n            union() {\n                // Handle body\n                cylinder(h=handle_length, d=handle_diameter, $fn=20);\n                \n                // End caps\n                translate([0, 0, -1])\n                    cylinder(h=2, d=handle_diameter+2, $fn=20);\n                translate([0, 0, handle_length+1])\n                    cylinder(h=2, d=handle_diameter+2, $fn=20);\n                \n                // Grip texture\n                grip_texture();\n            }\n    \n    // Reinforcement rings\n    translate([0, 0, yoke_height/2-5])\n        cylinder(h=10, d=handle_diameter+8, $fn=20);\n}\n\n// Mounting brackets\nmodule mounting_brackets() {\n    // Left bracket\n    translate([-yoke_width/2+10, -5, yoke_height/2-5])\n        union() {\n            // Base plate\n            cube([20, 10, base_thickness]);\n            \n            // Screw holes\n            for(x = [5, 15]) {\n                for(y = [2.5, 7.5]) {\n                    translate([x, y, -1])\n                        cylinder(h=base_thickness+2, d=3, $fn=8);\n                }\n            }\n        }\n    \n    // Right bracket\n    translate([yoke_width/2-30, -5, yoke_height/2-5])\n        union() {\n            // Base plate\n            cube([20, 10, base_thickness]);\n            \n            // Screw holes\n            for(x = [5, 15]) {\n                for(y = [2.5, 7.5]) {\n                    translate([x, y, -1])\n                        cylinder(h=base_thickness+2, d=3, $fn=8);\n                }\n            }\n        }\n}\n\n// Assembly\nunion() {\n    yoke_arch();\n    central_handle();\n    mounting_brackets();\n}",
    "renders": true
  },
  {
    "sports_equipment": "pedal",
    "openscad_code": "// Pedal furniture - a bicycle pedal with furniture-style joinery\n// Overall dimensions: 90mm x 60mm x 30mm\n\n$fn = 32;\npedal_width = 90;\npedal_depth = 60;\npedal_height = 30;\naxle_diameter = 12;\naxle_length = 20;\nwall_thickness = 2;\ngrip_spacing = 5;\ngrip_height = 1.5;\n\n// Main pedal body with mortise-and-tenon style joints\nmodule pedal_body() {\n    difference() {\n        // Main block with rounded edges\n        union() {\n            // Center platform\n            translate([0, 0, pedal_height/2])\n                minkowski() {\n                    cube([pedal_width-10, pedal_depth-10, pedal_height-wall_thickness], center=true);\n                    sphere(r=3);\n                }\n            \n            // Front tenon joint\n            translate([pedal_width/2-5, 0, pedal_height/2])\n                cube([10, pedal_depth-20, pedal_height], center=true);\n            \n            // Rear tenon joint\n            translate([-pedal_width/2+5, 0, pedal_height/2])\n                cube([10, pedal_depth-20, pedal_height], center=true);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, pedal_height/2])\n            cube([pedal_width-14, pedal_depth-14, pedal_height+2], center=true);\n        \n        // Axle hole\n        rotate([0, 90, 0])\n            translate([0, 0, pedal_height/2])\n                cylinder(h=pedal_width+10, d=axle_diameter+wall_thickness, center=true);\n    }\n}\n\n// Grip pattern using furniture-style slats\nmodule grip_pattern() {\n    for (i = [-pedal_width/2+10: grip_spacing: pedal_width/2-10]) {\n        translate([i, 0, pedal_height-grip_height/2])\n            cube([3, pedal_depth-20, grip_height], center=true);\n    }\n    for (j = [-pedal_depth/2+10: grip_spacing: pedal_depth/2-10]) {\n        translate([0, j, pedal_height-grip_height/2])\n            cube([pedal_width-20, 3, grip_height], center=true);\n    }\n}\n\n// Structural support ribs (furniture-style bracing)\nmodule support_ribs() {\n    // Longitudinal rib\n    translate([0, 0, pedal_height/2])\n        cube([pedal_width-10, wall_thickness, pedal_height-wall_thickness], center=true);\n    \n    // Transverse ribs\n    for (k = [-pedal_width/4, pedal_width/4]) {\n        translate([k, 0, pedal_height/2])\n            cube([wall_thickness, pedal_depth-10, pedal_height-wall_thickness], center=true);\n    }\n}\n\n// Axle assembly with bearing seats\nmodule axle_assembly() {\n    // Main axle\n    rotate([0, 90, 0])\n        translate([0, 0, pedal_height/2])\n            cylinder(h=axle_length, d=axle_diameter, center=true);\n    \n    // Bearing seats (furniture-style turned details)\n    for (l = [-1, 1]) {\n        rotate([0, 90, 0])\n            translate([l*(axle_length/2-5), 0, pedal_height/2])\n                cylinder(h=4, d=axle_diameter+4, center=true);\n    }\n    \n    // End cap\n    rotate([0, 90, 0])\n        translate([axle_length/2+2, 0, pedal_height/2])\n            cylinder(h=3, d=axle_diameter+2, center=true);\n}\n\n// Assembly\nunion() {\n    // Main pedal structure\n    union() {\n        pedal_body();\n        grip_pattern();\n        support_ribs();\n    }\n    \n    // Axle and hardware\n    axle_assembly();\n}",
    "renders": true
  },
  {
    "sports_equipment": "seat",
    "openscad_code": "// Realistic style medium-complexity 3D-printable seat furniture\n// Overall size ~80 mm width x 70 mm depth x 90 mm height\n\n// Wall thickness = 2 mm\nwall = 2;\n\n// Seat cushion\nmodule seat() {\n    // Main cushion block\n    difference() {\n        cube([60, 60, 8], center = true);\n        translate([0, 0, 4])\n            cube([56, 56, 8], center = true); // Hollow inside\n    }\n    // Rounded edges via spheres\n    for (x = [-28, 28])\n        for (y = [-28, 28])\n            translate([x, y, -4])\n                sphere(d = 8, $fn = 16);\n    // Small button tufts\n    for (pos = [[-20, -20], [20, -20], [-20, 20], [20, 20]])\n        translate([pos[0], pos[1], 5])\n            cylinder(h = 2, d1 = 6, d2 = 4);\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    // Main back panel\n    difference() {\n        cube([60, 8, 60], center = true);\n        translate([0, 4, 0])\n            cube([56, 8, 56], center = true);\n    }\n    // Curved top\n    translate([0, 0, 30])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d = 60, $fn = 64);\n    // Lumbar curve\n    translate([0, 5, -10])\n        cube([56, 4, 36], center = true);\n}\n\n// Leg frame\nmodule legs() {\n    // Front legs\n    for (x = [-24, 24])\n        translate([x, -24, -45])\n            difference() {\n                cylinder(h = 45, d = 8, $fn = 16);\n                translate([0, 0, -1])\n                    cylinder(h = 47, d = 4, $fn = 16);\n            }\n    // Rear legs\n    for (x = [-24, 24])\n        translate([x, 24, -45])\n            difference() {\n                cylinder(h = 45, d = 8, $fn = 16);\n                translate([0, 0, -1])\n                    cylinder(h = 47, d = 4, $fn = 16);\n            }\n    // Side stretchers\n    for (y = [-24, 24])\n        translate([0, y, -35])\n            rotate([90, 0, 0])\n                cylinder(h = 48, d = 6, $fn = 16);\n    // Front stretcher\n    translate([0, -24, -25])\n        rotate([0, 90, 0])\n            cylinder(h = 48, d = 6, $fn = 16);\n}\n\n// Assembly\ntranslate([0, 0, 4])\n    seat();\ntranslate([0, -34, 34])\n    backrest();\nlegs();",
    "renders": true
  },
  {
    "sports_equipment": "lifevest",
    "openscad_code": "$fn=30;\n\n// Lifevest furniture - medium complexity\n// 3D printable with 2mm walls, no overhangs\n\n// Main dimensions\nvest_width = 80;\nvest_height = 100;\nvest_thickness = 30;\nwall_thickness = 2;\n\nmodule lifevest_body() {\n    difference() {\n        // Main vest body - front panel\n        hull() {\n            translate([0, vest_height/2, vest_thickness/2])\n                cube([vest_width*0.9, vest_height*0.6, vest_thickness], center=true);\n            translate([0, vest_height*0.8, vest_thickness/2])\n                cube([vest_width*0.7, vest_height*0.4, vest_thickness], center=true);\n        }\n        \n        // Neck hole\n        translate([0, vest_height*0.75, vest_thickness/2])\n            rotate([90,0,0])\n            cylinder(h=vest_thickness+2, r=vest_width*0.15, center=true);\n        \n        // Arm holes\n        translate([vest_width*0.35, vest_height*0.5, vest_thickness/2])\n            rotate([90,0,0])\n            cylinder(h=vest_thickness+2, r=vest_width*0.12, center=true);\n        mirror([1,0,0])\n            translate([vest_width*0.35, vest_height*0.5, vest_thickness/2])\n            rotate([90,0,0])\n            cylinder(h=vest_thickness+2, r=vest_width*0.12, center=true);\n            \n        // Hollow interior\n        translate([0, vest_height*0.6, vest_thickness/2])\n            cube([vest_width*0.8-wall_thickness*2, vest_height*0.8-wall_thickness*2, vest_thickness-wall_thickness*2], center=true);\n    }\n}\n\nmodule straps() {\n    // Waist strap loops\n    for(y=[vest_height*0.3, vest_height*0.5]) {\n        translate([0, y, -vest_thickness/2-1])\n            cube([vest_width*0.8, 4, 4], center=true);\n    }\n    \n    // Buckle detail\n    translate([0, vest_height*0.3, -vest_thickness/2-3])\n        cube([10, 6, 2], center=true);\n}\n\nmodule flotation_cells() {\n    // Front flotation sections\n    for(x=[-vest_width*0.3, vest_width*0.3]) {\n        for(y=[vest_height*0.4, vest_height*0.7]) {\n            translate([x, y, vest_thickness/2+1])\n                cube([vest_width*0.25, vest_height*0.2, 2], center=true);\n        }\n    }\n}\n\nmodule back_support() {\n    // Furniture base support\n    translate([0, vest_height*0.5, -vest_thickness/2-5])\n        cube([vest_width*1.1, vest_height*0.8, 5], center=true);\n    \n    // Support ribs\n    for(x=[-vest_width*0.4, 0, vest_width*0.4]) {\n        translate([x, vest_height*0.5, -vest_thickness/2-2.5])\n            cube([2, vest_height*0.7, 2.5], center=true);\n    }\n}\n\nmodule grip_texture() {\n    // Textured surface for grip\n    for(x=[-vest_width*0.4:5:vest_width*0.4]) {\n        for(y=[vest_height*0.2:5:vest_height*0.8]) {\n            translate([x, y, vest_thickness/2+2.1])\n                cube([3, 3, 0.5], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    lifevest_body();\n    straps();\n    flotation_cells();\n    back_support();\n    grip_texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "raft",
    "openscad_code": "// Raft Furniture - Realistic Style\n// Dimensions: 120mm x 80mm x 25mm\n\n// Parameters\nraft_length = 120;\nraft_width = 80;\nraft_height = 6;\nlog_diameter = 8;\nlog_spacing = 2;\nframe_thickness = 3;\nsupport_thickness = 2;\n\n// Main raft body - collection of logs\nmodule raft_body() {\n    difference() {\n        // Main logs\n        union() {\n            for (i = [0:9]) {\n                translate([0, -35 + i * 8, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = raft_length, d = log_diameter, $fn = 20);\n            }\n        }\n        \n        // Taper front logs\n        translate([-30, -35, -1])\n            cube([30, 10, log_diameter + 2]);\n        translate([-30, 37, -1])\n            cube([30, 10, log_diameter + 2]);\n    }\n}\n\n// Outer frame for structural support\nmodule frame() {\n    // Side frames\n    difference() {\n        translate([0, -40, -2])\n            cube([raft_length, frame_thickness, log_diameter + 4]);\n        translate([0, -40, -2])\n            cube([10, frame_thickness, log_diameter + 4]);\n    }\n    \n    difference() {\n        translate([0, 40 - frame_thickness, -2])\n            cube([raft_length, frame_thickness, log_diameter + 4]);\n        translate([0, 40 - frame_thickness, -2])\n            cube([10, frame_thickness, log_diameter + 4]);\n    }\n    \n    // Front and back cross members\n    translate([-60 + frame_thickness/2, 0, -2])\n        cube([frame_thickness, raft_width, log_diameter + 4]);\n    \n    translate([60 - frame_thickness/2, 0, -2])\n        cube([frame_thickness, raft_width, log_diameter + 4]);\n}\n\n// Support beams underneath\nmodule supports() {\n    // Lengthwise support\n    translate([0, 0, -log_diameter/2 - support_thickness])\n        cube([raft_length - 20, support_thickness, support_thickness]);\n    \n    // Cross supports\n    for (x = [-40:20:40]) {\n        translate([x, 0, -log_diameter/2 - support_thickness])\n            cube([support_thickness, raft_width - 10, support_thickness]);\n    }\n}\n\n// Rope details around perimeter\nmodule rope_details() {\n    rope_diameter = 1.5;\n    \n    // Side ropes\n    for (x = [-55:10:55]) {\n        translate([x, -40 + frame_thickness/2, log_diameter/2 + 1])\n            rotate([90, 0, 0])\n                cylinder(h = frame_thickness, d = rope_diameter, $fn = 8);\n        translate([x, 40 - frame_thickness/2, log_diameter/2 + 1])\n            rotate([90, 0, 0])\n                cylinder(h = frame_thickness, d = rope_diameter, $fn = 8);\n    }\n    \n    // Front/back ropes\n    for (y = [-35:10:35]) {\n        translate([-60 + frame_thickness/2, y, log_diameter/2 + 1])\n            rotate([0, 90, 0])\n                cylinder(h = frame_thickness, d = rope_diameter, $fn = 8);\n        translate([60 - frame_thickness/2, y, log_diameter/2 + 1])\n            rotate([0, 90, 0])\n                cylinder(h = frame_thickness, d = rope_diameter, $fn = 8);\n    }\n}\n\n// Grip texture on top surface\nmodule grip_texture() {\n    for (x = [-50:5:50]) {\n        for (y = [-35:5:35]) {\n            translate([x, y, log_diameter/2 + 0.5])\n                sphere(d = 1.2, $fn = 8);\n        }\n    }\n}\n\n// Assemble the raft\nunion() {\n    raft_body();\n    frame();\n    supports();\n    rope_details();\n    grip_texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "extinguisher",
    "openscad_code": "// Fire Extinguisher Furniture Item\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Main parameters\next_height = 140;\next_diameter = 60;\nwall_thickness = 2;\n\nmodule extinguisher_body() {\n    // Main cylinder body\n    difference() {\n        cylinder(h=ext_height, d=ext_diameter, center=false);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            cylinder(h=ext_height - wall_thickness, d=ext_diameter - 2*wall_thickness, center=false);\n    }\n    \n    // Bottom base plate\n    translate([0, 0, -wall_thickness])\n        cylinder(h=wall_thickness, d=ext_diameter + 4, center=false);\n}\n\nmodule pressure_gauge() {\n    // Gauge housing\n    translate([ext_diameter/2 + 8, 0, ext_height - 30])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=10, d=20, center=false);\n            translate([0, 0, wall_thickness])\n                cylinder(h=10, d=16, center=false);\n        }\n    \n    // Gauge face\n    translate([ext_diameter/2 + 13, 0, ext_height - 30])\n        rotate([90, 0, 0])\n        color(\"white\")\n            cylinder(h=1, d=14, center=false);\n}\n\nmodule handle_assembly() {\n    // Main handle\n    translate([0, 0, ext_height - 15])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=50, d=12, center=false);\n            translate([0, 0, wall_thickness])\n                cylinder(h=50, d=8, center=false);\n        }\n    \n    // Handle grip\n    translate([25, 0, ext_height - 15])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=20, d=15, center=false);\n            translate([0, 0, wall_thickness])\n                cylinder(h=20, d=11, center=false);\n        }\n    \n    // Safety pin hole\n    translate([0, 6, ext_height - 12])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=3, center=false);\n}\n\nmodule nozzle_assembly() {\n    // Nozzle pipe\n    translate([0, ext_diameter/2, ext_height - 10])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=40, d=8, center=false);\n            translate([0, 0, wall_thickness])\n                cylinder(h=40, d=4, center=false);\n        }\n    \n    // Nozzle tip\n    translate([0, ext_diameter/2 + 40, ext_height - 10])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=8, d=12, center=false);\n            translate([0, 0, wall_thickness])\n                cylinder(h=8, d=8, center=false);\n        }\n}\n\nmodule mounting_bracket() {\n    // Top bracket\n    translate([0, -ext_diameter/2 - 5, ext_height - 20])\n        cube([ext_diameter + 10, 10, 5], center=true);\n    \n    // Bottom bracket\n    translate([0, -ext_diameter/2 - 5, 20])\n        cube([ext_diameter + 10, 10, 5], center=true);\n    \n    // Mounting holes\n    for(i = [-1, 1]) {\n        translate([i * 25, -ext_diameter/2 - 5, ext_height - 17.5])\n            cylinder(h=6, d=4, center=true);\n        translate([i * 25, -ext_diameter/2 - 5, 22.5])\n            cylinder(h=6, d=4, center=true);\n    }\n}\n\nmodule instruction_label() {\n    // Label area\n    color(\"white\")\n    translate([ext_diameter/2 - 1, -15, 40])\n        cube([2, 30, 60], center=false);\n    \n    // Text area (represented as grooves)\n    for(i = [0:3]) {\n        translate([ext_diameter/2 - 0.5, -12 + i*7, 45])\n            cube([1, 25, 1], center=false);\n    }\n}\n\n// Assemble the extinguisher\nunion() {\n    // Main body\n    color(\"red\")\n    extinguisher_body();\n    \n    // Furniture mounting system\n    color(\"gray\")\n    mounting_bracket();\n    \n    // Functional components\n    color(\"black\")\n    handle_assembly();\n    \n    color(\"black\")\n    nozzle_assembly();\n    \n    pressure_gauge();\n    \n    // Label\n    instruction_label();\n}",
    "renders": true
  },
  {
    "sports_equipment": "beacon",
    "openscad_code": "// Beacon Furniture – a floor-standing reading lamp with beacon-style housing\n// Overall height 140 mm, footprint 80 mm, wall thickness 2 mm\n\n$fn = 36;                              // good circle quality while keeping poly-count low\n\n// Main module\nmodule beacon_furniture() {\n\n    // ---------- Base ----------\n    // Heavy circular base, 2 mm thick, 80 mm diameter\n    difference() {\n        cylinder(h = 4, d = 80, center = false);\n        cylinder(h = 5, d = 76, center = false);   // hollow inside, 2 mm walls\n    }\n\n    // Central column rises 100 mm\n    translate([0, 0, 4])\n        difference() {\n            cylinder(h = 100, d = 20, center = false);\n            cylinder(h = 101, d = 16, center = false); // 2 mm walls\n        }\n\n    // ---------- Beacon head ----------\n    translate([0, 0, 104])\n    difference() {\n        // Outer lantern shell – classic beacon dome\n        sphere(d = 60);\n        sphere(d = 56);          // 2 mm shell\n    }\n\n    // Inner light diffuser cylinder inside beacon\n    translate([0, 0, 104])\n        color(\"lemonchiffon\", 0.4)\n        cylinder(h = 30, d = 52, center = true);\n\n    // ---------- Vent ring ----------\n    // Perforated band for heat dissipation\n    translate([0, 0, 104])\n    difference() {\n        cylinder(h = 8, d = 62, center = true);\n        cylinder(h = 10, d = 60, center = true);\n        // vent slots using loop\n        for (a = [0 : 30 : 330]) {\n            rotate([0, 0, a])\n                translate([29, 0, 0])\n                    cube([5, 2, 10], center = true);\n        }\n    }\n\n    // ---------- Handle ----------\n    // Sturdy semicircular handle on top for portability\n    translate([0, 0, 134])\n    rotate([90, 0, 0])\n        difference() {\n            torus(8, 3);            // major radius 8, minor 3\n            cube([50, 50, 10], center = true); // cut bottom half\n        }\n\n    // ---------- Feet ----------\n    // Three small rubber feet under base\n    for (a = [0 : 120 : 240]) {\n        rotate([0, 0, a])\n            translate([32, 0, -1])\n                cylinder(h = 3, d = 8, center = false);\n    }\n}\n\n// Helper module for torus (handle)\nmodule torus(R, r) {\n    rotate_extrude()\n        translate([R, 0, 0])\n            circle(r);\n}\n\n// Render\nbeacon_furniture();",
    "renders": true
  },
  {
    "sports_equipment": "strobe",
    "openscad_code": "// Strobe Furniture - Realistic Medium Complexity OpenSCAD Model\n// A modern strobe light fixture designed as furniture piece\n// Overall dimensions: 120mm x 80mm x 150mm\n\n// Main parameters\n$fn = 32;\nwall_thickness = 2;\nbase_width = 80;\nbase_depth = 60;\nbase_height = 15;\nbody_width = 70;\nbody_depth = 50;\nbody_height = 100;\nhead_diameter = 60;\nhead_height = 30;\nlens_thickness = 3;\n\n// Base module with cable entry\nmodule base() {\n    difference() {\n        // Main base block\n        cube([base_width, base_depth, base_height], center=true);\n        \n        // Cable entry hole at back\n        translate([0, -base_depth/2 - 1, 0])\n            rotate([90, 0, 0])\n                cylinder(h=base_depth/2 + 2, r=5, center=true);\n        \n        // Mounting holes\n        for(x = [-30, 30])\n            for(y = [-20, 20])\n                translate([x, y, -base_height/2 - 1])\n                    cylinder(h=wall_thickness + 2, r=2.5, center=true);\n    }\n}\n\n// Ventilation slots module\nmodule ventilation_slots() {\n    slot_width = 2;\n    slot_height = 8;\n    slot_spacing = 6;\n    \n    for(i = [-4:4]) {\n        translate([i * slot_spacing, 0, 0])\n            cube([slot_width, body_depth + 2, slot_height], center=true);\n    }\n}\n\n// Main body with vents\nmodule body() {\n    difference() {\n        // Main body\n        cube([body_width, body_depth, body_height], center=true);\n        \n        // Top cavity for head\n        translate([0, 0, body_height/2 - head_height/2])\n            cylinder(h=head_height + 1, r=head_diameter/2 + 1, center=true);\n        \n        // Ventilation pattern on sides\n        translate([body_width/2 + 1, 0, body_height/4])\n            rotate([0, 90, 0])\n                ventilation_slots();\n        \n        translate([-body_width/2 - 1, 0, body_height/4])\n            rotate([0, 90, 0])\n                ventilation_slots();\n    }\n}\n\n// Adjustable head assembly\nmodule head() {\n    // Mounting yoke\n    translate([0, 0, body_height/2 + head_height/2])\n        union() {\n            // Yoke arms\n            difference() {\n                // Left arm\n                translate([-head_diameter/2 - 5, 0, 0])\n                    cube([10, 8, head_height], center=true);\n                translate([-head_diameter/2 - 5, 0, head_height/2 - 2])\n                    rotate([90, 0, 0])\n                        cylinder(h=10, r=2.5, center=true);\n                \n                // Right arm\n                translate([head_diameter/2 + 5, 0, 0])\n                    cube([10, 8, head_height], center=true);\n                translate([head_diameter/2 + 5, 0, head_height/2 - 2])\n                    rotate([90, 0, 0])\n                        cylinder(h=10, r=2.5, center=true);\n            }\n            \n            // Strobe head\n            translate([0, 0, head_height/2])\n                difference() {\n                    // Main head housing\n                    cylinder(h=head_height, r=head_diameter/2, center=true);\n                    \n                    // LED array cavity\n                    translate([0, 0, head_height/2 - lens_thickness/2])\n                        cylinder(h=lens_thickness + 1, r=head_diameter/2 - 6, center=true);\n                    \n                    // Cooling fins\n                    for(i = [0:30:359]) {\n                        rotate([0, 0, i])\n                            translate([head_diameter/2 - 3, 0, 0])\n                                cube([6, 1, head_height - 4], center=true);\n                    }\n                }\n                \n            // Fresnel lens\n            translate([0, 0, head_height/2 + lens_thickness/2])\n                cylinder(h=lens_thickness, r=head_diameter/2 - 6, center=true);\n                \n            // Control knob\n            translate([head_diameter/2 + 8, 0, head_height/2])\n                cylinder(h=8, r=4, center=true);\n        }\n}\n\n// Assembly\nunion() {\n    base();\n    body();\n    head();\n}\n\n// Control panel on back\ntranslate([0, body_depth/2 + 1, body_height/4])\n    cube([30, 2, 15], center=true);\n\n// Status LEDs\nfor(i = [-1:1]) {\n    translate([i * 8, body_depth/2 + 2, body_height/4 + 5])\n        sphere(r=2);\n}",
    "renders": true
  },
  {
    "sports_equipment": "turbine",
    "openscad_code": "// Turbine Coffee Table - Realistic Style\n// Dimensions: 150mm diameter x 45mm height\n\nwall_thickness = 2;\ncenter_hub_d = 30;\nblade_count = 6;\nblade_length = 50;\nblade_width = 20;\nblade_thickness = 3;\ntable_top_thickness = 4;\nleg_height = 30;\nleg_width = 8;\n\nmodule turbine_blade() {\n    difference() {\n        // Main blade body\n        translate([0, blade_length/2, 0])\n            cube([blade_width, blade_length, blade_thickness], center=true);\n        \n        // Taper the tip\n        translate([0, blade_length - 5, 0])\n            cube([blade_width, 10, blade_thickness + 0.1], center=true);\n    }\n    \n    // Add structural rib\n    translate([0, blade_length/4, blade_thickness/2 + 0.5])\n        cube([blade_width - 4, blade_length/2, 1]);\n}\n\nmodule center_hub() {\n    difference() {\n        cylinder(h=table_top_thickness + 4, d=center_hub_d, center=true);\n        cylinder(h=table_top_thickness + 5, d=center_hub_d - wall_thickness*2, center=true);\n    }\n    \n    // Hub cap detail\n    translate([0, 0, table_top_thickness/2 + 2])\n        cylinder(h=2, d=center_hub_d + 4, center=false);\n}\n\nmodule blade_assembly() {\n    for(i = [0:blade_count-1]) {\n        rotate([0, 0, i * 360/blade_count])\n            translate([0, center_hub_d/2 + 5, 0])\n                turbine_blade();\n    }\n}\n\nmodule table_top() {\n    difference() {\n        cylinder(h=table_top_thickness, d=150, center=true);\n        cylinder(h=table_top_thickness + 1, d=146, center=true);\n    }\n    \n    // Edge detail\n    translate([0, 0, -table_top_thickness/2])\n        cylinder(h=1, d=150, center=false);\n}\n\nmodule leg_support() {\n    difference() {\n        cube([leg_width, leg_width, leg_height]);\n        translate([leg_width/2, leg_width/2, leg_height/2])\n            cylinder(h=leg_height + 0.1, d=leg_width - wall_thickness*2, center=true);\n    }\n    \n    // Base pad\n    translate([-1, -1, -1])\n        cube([leg_width + 2, leg_width + 2, 2]);\n}\n\nmodule legs() {\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([60, 60, -leg_height/2 - table_top_thickness/2])\n                leg_support();\n    }\n}\n\n// Assembly\nunion() {\n    // Table top with turbine design\n    translate([0, 0, 0])\n        table_top();\n    \n    // Turbine blades integrated into table top\n    translate([0, 0, table_top_thickness/2])\n        blade_assembly();\n    \n    // Center hub\n    translate([0, 0, table_top_thickness/2])\n        center_hub();\n    \n    // Support legs\n    legs();\n}",
    "renders": true
  },
  {
    "sports_equipment": "intake",
    "openscad_code": "// Table-top air-intake unit / passive ventilation grill for furniture\n// Overall size: 120 mm x 80 mm x 30 mm\n// 2 mm wall thickness everywhere for reliable FDM printing\n\n$fn = 36;               // smooth curves\n\nmodule main_housing() {\n    difference() {\n        // outer shell\n        cube([120, 80, 30], center = true);\n\n        // hollow cavity leaving 2 mm walls\n        translate([0, 0, 1])\n            cube([120-4, 80-4, 30-2], center = true);\n    }\n}\n\nmodule front_grill() {\n    // vertical slats\n    for (x = [-50:10:50]) {\n        translate([x, 0, 0])\n            cube([2, 76, 28], center = true);\n    }\n}\n\nmodule rear_grill() {\n    // horizontal slats\n    for (y = [-30:10:30]) {\n        translate([0, y, 0])\n            cube([116, 2, 28], center = true);\n    }\n}\n\nmodule screw_posts() {\n    // 4 mounting posts for M3 screws\n    for (pos = [[-50, -30, 0], [-50, 30, 0], [50, -30, 0], [50, 30, 0]]) {\n        translate(pos)\n            cylinder(h = 30, d = 6, center = true);\n    }\n}\n\nmodule screw_holes() {\n    // 3 mm clearance holes through posts\n    for (pos = [[-50, -30, 0], [-50, 30, 0], [50, -30, 0], [50, 30, 0]]) {\n        translate(pos)\n            cylinder(h = 32, d = 3.2, center = true);\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        main_housing();\n        front_grill();\n        rear_grill();\n        screw_posts();\n    }\n    screw_holes();\n}",
    "renders": true
  },
  {
    "sports_equipment": "nozzle",
    "openscad_code": "// Nozzle Furniture - Realistic Style, Medium Complexity\n// 3D printable nozzle with furniture characteristics\n\n// Parameters\nnozzle_length = 80;\nnozzle_diameter = 35;\nwall_thickness = 2;\ngrip_length = 30;\nbase_diameter = 60;\n\n// Main nozzle body module\nmodule nozzle_body() {\n    difference() {\n        // Outer shell\n        cylinder(h=nozzle_length, d1=nozzle_diameter, d2=nozzle_diameter*0.6, $fn=64);\n        \n        // Inner hollow space\n        translate([0, 0, wall_thickness])\n            cylinder(h=nozzle_length-wall_thickness*2, d1=nozzle_diameter-wall_thickness*2, d2=nozzle_diameter*0.6-wall_thickness*2, $fn=64);\n    }\n}\n\n// Grip texture module\nmodule grip_texture() {\n    for(i = [0:5:grip_length-5]) {\n        rotate([0, 0, i*10])\n            translate([0, 0, nozzle_length-grip_length+i])\n                difference() {\n                    cylinder(h=2, d=nozzle_diameter+0.5, $fn=64);\n                    cylinder(h=2.5, d=nozzle_diameter-1, $fn=64);\n                }\n    }\n}\n\n// Base connector module\nmodule base_connector() {\n    // Main base plate\n    cylinder(h=8, d=base_diameter, $fn=64);\n    \n    // Reinforcement ribs\n    for(i = [0:45:360]) {\n        rotate([0, 0, i])\n            translate([base_diameter/2-6, 0, 0])\n                cube([12, 3, 8], center=true);\n    }\n    \n    // Mounting holes\n    for(i = [0:120:360]) {\n        rotate([0, 0, i])\n            translate([base_diameter/2-10, 0, 0])\n            cylinder(h=10, d=4, $fn=32);\n    }\n}\n\n// Joint mechanism module\nmodule joint_mechanism() {\n    // Ball joint socket\n    translate([0, 0, 8])\n        difference() {\n            sphere(d=20, $fn=32);\n            sphere(d=16, $fn=32);\n        }\n    \n    // Locking ring\n    translate([0, 0, 12])\n        difference() {\n            cylinder(h=4, d=22, $fn=64);\n            cylinder(h=5, d=18, $fn=64);\n        }\n}\n\n// Furniture-style base with legs\nmodule furniture_base() {\n    // Central column\n    cylinder(h=25, d=15, $fn=32);\n    \n    // Support legs\n    for(i = [0:90:360]) {\n        rotate([0, 0, i])\n            translate([12, 0, 0])\n                cube([25, 8, 25], center=true);\n    }\n    \n    // Cross braces\n    for(i = [0:90:360]) {\n        rotate([0, 0, i+45])\n            translate([18, 0, 12])\n                cube([35, 6, 6], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main nozzle\n    translate([0, 0, 33])\n        nozzle_body();\n    \n    // Grip texture\n    grip_texture();\n    \n    // Joint mechanism\n    translate([0, 0, 33])\n        joint_mechanism();\n    \n    // Base connector\n    translate([0, 0, 25])\n        base_connector();\n    \n    // Furniture base\n    furniture_base();\n}",
    "renders": true
  },
  {
    "sports_equipment": "afterburner",
    "openscad_code": "// Afterburner Desk Lamp / Table Accent\n// Inspired by jet-engine afterburner furniture piece\n// 3D printable, no overhangs >45°, 2 mm walls\n\n// Overall size 120 mm tall, 60 mm diameter\n\nmodule afterburner_furniture() {\n    difference() {\n        union() {\n            // Outer cowling\n            cylinder(h=100, d1=60, d2=45, $fn=80);\n\n            // Exhaust petals – 12 identical, arranged radially\n            for (i = [0:11]) {\n                rotate([0, 0, i*30])\n                    translate([0, 27, 90])\n                        petal();\n            }\n\n            // Fuel ring (structural band)\n            translate([0, 0, 75])\n                cylinder(h=6, d=64, $fn=80);\n\n            // Base plate with screw holes\n            translate([0, 0, -2])\n                cylinder(h=12, d=70, $fn=80);\n\n            // Inner liner visible through petals\n            translate([0, 0, 10])\n                cylinder(h=85, d1=40, d2=30, $fn=60);\n            \n            // Flame holder simulated as grill\n            translate([0, 0, 50])\n                grill();\n        }\n\n        // Hollow out cowling\n        translate([0, 0, 0])\n            cylinder(h=102, d1=56, d2=41, $fn=80);\n\n        // Hollow out base for wiring\n        translate([0, 0, -1])\n            cylinder(h=15, d=40, $fn=60);\n\n        // Screw holes in base\n        for (a = [0:120:359]) {\n            rotate([0, 0, a])\n                translate([25, 0, -1])\n                    cylinder(h=15, d=4, $fn=16);\n        }\n    }\n}\n\n// Single exhaust petal\nmodule petal() {\n    difference() {\n        // Main petal body\n        translate([0, 0, 0])\n            rotate([20, 0, 0])\n                cube([6, 2, 15], center=true);\n        // Taper tip\n        translate([0, 0, 7.5])\n            rotate([20, 0, 0])\n                cube([8, 2.2, 8], center=true);\n    }\n}\n\n// Flame holder grill\nmodule grill() {\n    difference() {\n        cylinder(h=4, d=38, $fn=60);\n        for (i = [0:45:179]) {\n            rotate([0, 0, i])\n                translate([0, 0, -1])\n                    cube([40, 3, 6], center=true);\n        }\n    }\n}\n\nafterburner_furniture();",
    "renders": true
  },
  {
    "sports_equipment": "spoiler",
    "openscad_code": "// Wall-mounted motorsport-style shelf / spoiler\n// Overall footprint ~110 mm wide, 80 mm deep, 120 mm tall\n\n$fa = 2;\n$fs = 0.5;\n\n// Main wing surface\nmodule wing_surface() {\n    difference() {\n        // Main tapered plank\n        translate([-55, 0, 0])\n            cube([110, 80, 4]);\n        \n        // Trailing edge taper (lightening cuts)\n        for (i = [-48:12:48])\n            translate([i, 70, -1])\n                cube([10, 12, 6]);\n        \n        // Speed-hole pattern (decorative & weight reduction)\n        for (x = [-40:20:40])\n            for (y = [10:15:60])\n                translate([x, y, -1])\n                    cylinder(h = 6, r = 4, $fn = 20);\n    }\n}\n\n// Central support rib (reinforces wing)\nmodule support_rib() {\n    translate([0, 30, -25])\n        cube([4, 50, 50]);\n}\n\n// Endplates (aerodynamic & shelf sides)\nmodule endplate(side = 1) {\n    translate([side * 57, 0, 0])\n        rotate([0, -90, 0])\n        linear_extrude(height = 4, convexity = 10)\n        polygon(points = [[0, 0], [0, 120], [30, 90], [30, 30]]);\n}\n\n// Gurney flap (small lip for down-force look & book stop)\nmodule gurney_flap() {\n    translate([-55, 80, 4])\n        cube([110, 4, 6]);\n}\n\n// Mounting bracket (wall screw points)\nmodule mount_bracket() {\n    difference() {\n        // Bracket body\n        translate([-8, 20, -30])\n            cube([16, 30, 10]);\n        \n        // Screw holes 5 mm diameter\n        for (x = [-4, 4])\n            translate([x, 35, -27])\n                rotate([90, 0, 0])\n                    cylinder(h = 15, r = 2.5, $fn = 20);\n    }\n}\n\n// Assembly\nunion() {\n    wing_surface();\n    support_rib();\n    mirror([1, 0, 0]) endplate(-1);\n    endplate(1);\n    gurney_flap();\n    mount_bracket();\n}",
    "renders": true
  },
  {
    "sports_equipment": "airbrake",
    "openscad_code": "// Airbrake furniture - stylized side table inspired by automotive airbrake wings\n// Overall dimensions: 120mm width x 60mm depth x 45mm height\n\n$fn = 32;\n\n// Main wing profile\nmodule wing_profile() {\n    difference() {\n        // Main wing body - slightly curved top surface\n        hull() {\n            translate([-60, 0, 0]) cylinder(h=2, r=2);\n            translate([60, 0, 0]) cylinder(h=2, r=2);\n            translate([-55, 25, 2]) cylinder(h=1, r=2);\n            translate([55, 25, 2]) cylinder(h=1, r=2);\n        }\n        \n        // Cut lightening holes\n        for (x = [-40, -20, 0, 20, 40]) {\n            translate([x, 12, -1]) cylinder(h=4, r=4);\n        }\n    }\n}\n\n// End plate with mounting points\nmodule end_plate(side) {\n    translate([side * 60, 0, 0]) {\n        // Main plate\n        difference() {\n            cube([4, 30, 25], center=false);\n            \n            // Mounting holes\n            for (z = [5, 15, 20]) {\n                translate([2, 15, z]) rotate([0, 90, 0]) cylinder(h=4, r=1.5);\n            }\n            \n            // Chamfer\n            translate([0, 2, 0]) cube([4, 26, 2]);\n            translate([0, 2, 23]) cube([4, 26, 2]);\n        }\n        \n        // Support ribs\n        for (y = [5, 25]) {\n            translate([0, y, 0]) cube([2, 0.5, 25]);\n        }\n    }\n}\n\n// Support struts\nmodule support_strut(x_pos, angle) {\n    translate([x_pos, 15, 0]) {\n        rotate([0, angle, 0]) {\n            // Main strut\n            difference() {\n                cube([2, 8, 35]);\n                \n                // Cable channel\n                translate([1, 4, 30]) rotate([90, 0, 0]) cylinder(h=5, r=1);\n            }\n            \n            // Base plate\n            translate([-1, -1, -2]) cube([4, 10, 2]);\n        }\n    }\n}\n\n// Grip texture pattern\nmodule grip_texture() {\n    for (x = [-50:10:50]) {\n        for (y = [5:5:20]) {\n            translate([x, y, 3]) cube([0.5, 2, 0.5]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main wing assembly\n    translate([0, 0, 8]) {\n        // Wing core\n        wing_profile();\n        \n        // Add thickness\n        translate([0, 0, -2]) scale([1, 1, 1]) wing_profile();\n        \n        // Grip texture on top\n        grip_texture();\n    }\n    \n    // End plates\n    end_plate(1);\n    end_plate(-1);\n    \n    // Support structure\n    support_strut(-30, 15);\n    support_strut(30, -15);\n    \n    // Central spine\n    translate([0, 13, -2]) cube([120, 4, 10]);\n    \n    // Base feet\n    for (x = [-50, 50]) {\n        translate([x, 15, -5]) {\n            difference() {\n                cube([10, 8, 5]);\n                translate([2, 2, -1]) cylinder(h=7, r=1.5);\n                translate([8, 2, -1]) cylinder(h=7, r=1.5);\n                translate([2, 6, -1]) cylinder(h=7, r=1.5);\n                translate([8, 6, -1]) cylinder(h=7, r=1.5);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "slat",
    "openscad_code": "// Slat-style oak stool (realistic, medium complexity)\n// Overall: 280 mm wide × 200 mm deep × 220 mm high\n// Suitable for 3D-printing at 50 % scale\n\n// Wall thickness for prints\nwall = 2;               // mm\n\n// Overall outer dimensions\nW = 280;                // mm\nD = 200;                // mm\nH = 220;                // mm\n\n// Slat parameters\nslat_w = 18;            // mm\nslat_gap = 8;           // mm\nslat_r = 1;             // mm edge radius\n\n// Number of slats across width\nn_slat = floor((W - wall) / (slat_w + slat_gap));\n\n// Helper module for rounded-edge slat\nmodule rounded_slat(l, w, h, r) {\n    hull() {\n        for (dx = [r, w - r], dy = [r, h - r])\n            translate([dx, dy, 0])\n                cylinder(h = l, r = r, center = true);\n    }\n}\n\n// Seat top with through-slats\nmodule seat() {\n    difference() {\n        // Solid top plate\n        translate([0, 0, H - wall])\n            cube([W, D, wall], center = true);\n\n        // Grooves for slats\n        for (i = [0 : n_slat - 1]) {\n            x = -W/2 + wall/2 + i*(slat_w + slat_gap) + slat_w/2;\n            translate([x, 0, H - wall])\n                cube([slat_w - 1, D + 2, wall + 2], center = true);\n        }\n    }\n\n    // Individual slats\n    for (i = [0 : n_slat - 1]) {\n        x = -W/2 + wall/2 + i*(slat_w + slat_gap) + slat_w/2;\n        translate([x, 0, H - wall/2])\n            rounded_slat(wall, slat_w, D - 2*wall, slat_r);\n    }\n}\n\n// Side frame with horizontal stretchers\nmodule side_frame(left = true) {\n    x = left ? -W/2 + wall/2 : W/2 - wall/2;\n    \n    // Front leg\n    translate([x, -D/2 + wall/2, H/2])\n        rounded_slat(H, wall, wall, wall/2);\n\n    // Rear leg\n    translate([x, D/2 - wall/2, H/2])\n        rounded_slat(H, wall, wall, wall/2);\n\n    // Top stretcher\n    translate([x, 0, H - wall])\n        rounded_slat(wall, wall, D - wall, wall/2);\n\n    // Mid stretcher\n    translate([x, 0, H/2])\n        rounded_slat(wall, wall, D - wall, wall/2);\n\n    // Lower stretcher\n    translate([x, 0, wall])\n        rounded_slat(wall, wall, D - wall, wall/2);\n}\n\n// Front / back rails\nmodule end_rail(front = true) {\n    y = front ? -D/2 + wall/2 : D/2 - wall/2;\n    \n    // Top rail\n    translate([0, y, H - wall])\n        rounded_slat(wall, W - wall, wall, wall/2);\n\n    // Mid rail\n    translate([0, y, H/2])\n        rounded_slat(wall, W - wall, wall, wall/2);\n\n    // Bottom rail (foot rest)\n    translate([0, y, wall])\n        rounded_slat(wall, W - wall, wall, wall/2);\n}\n\n// Main assembly\nunion() {\n    seat();\n    side_frame(true);\n    side_frame(false);\n    end_rail(true);\n    end_rail(false);\n}",
    "renders": true
  },
  {
    "sports_equipment": "fairing",
    "openscad_code": "$fa = 1;\n$fs = 0.4;\n\nmodule fairing_shell() {\n    // Outer shell: elongated teardrop\n    hull() {\n        translate([0, 0, 10]) \n            sphere(d = 30);\n        translate([0, 0, 100]) \n            sphere(d = 60);\n        translate([0, 0, 190]) \n            sphere(d = 30);\n    }\n}\n\nmodule fairing_inner() {\n    // Hollow cavity with 2 mm walls\n    difference() {\n        fairing_shell();\n        translate([0, 0, -5]) \n            scale([0.88, 0.88, 0.9]) \n                fairing_shell();\n    }\n}\n\nmodule vent_holes() {\n    // Ventilation holes on sides\n    for (z = [30:30:150]) {\n        rotate([0, 90, 0]) \n            translate([0, 0, z]) \n                cylinder(h = 15, d = 8, $fn = 20);\n    }\n}\n\nmodule mounting_flange() {\n    // Mounting flange at rear\n    difference() {\n        translate([0, 0, 190]) \n            cylinder(h = 10, d = 50, $fn = 60);\n        translate([0, 0, 180]) \n            cylinder(h = 15, d = 35, $fn = 60);\n    }\n}\n\nmodule fairing_clip() {\n    // Quick-release clip\n    difference() {\n        union() {\n            translate([0, 0, 120]) \n                cube([25, 5, 30], center = true);\n            translate([0, -10, 120]) \n                rotate([90, 0, 0]) \n                    cylinder(h = 15, d = 8, $fn = 20);\n        }\n        translate([0, 0, 120]) \n            cube([20, 6, 25], center = true);\n    }\n}\n\nmodule surface_detail() {\n    // Subtle surface ridges for stiffness\n    for (z = [20:15:180]) {\n        rotate([0, 0, 0]) {\n            intersection() {\n                translate([0, 0, z]) \n                    scale([1, 1, 0.5]) \n                        sphere(d = 60);\n                fairing_shell();\n            }\n        }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        fairing_inner();\n        mounting_flange();\n        fairing_clip();\n        surface_detail();\n    }\n    vent_holes();\n}",
    "renders": true
  },
  {
    "sports_equipment": "nacelle",
    "openscad_code": "// Nacelle Chair (Realistic Style, Medium Complexity)\n// Overall dimensions: 110mm width x 120mm depth x 85mm height\n\n$fn = 32;\n\n// Main parameters\nseat_width = 100;\nseat_depth = 110;\nback_height = 85;\nleg_height = 45;\nwall_thickness = 2;\n\nmodule seat_surface() {\n    // Main seat shell with ergonomic curve\n    difference() {\n        hull() {\n            translate([-seat_width/2, -seat_depth/2, 0])\n                cube([seat_width, seat_depth, 8]);\n            translate([-seat_width/2, -seat_depth/2+20, -5])\n                cube([seat_width, seat_depth-40, 8]);\n        }\n        \n        // Remove bottom for printing\n        translate([-seat_width/2-1, -seat_depth/2-1, -6])\n            cube([seat_width+2, seat_depth+2, 10]);\n    }\n}\n\nmodule backrest() {\n    // Curved backrest shell\n    difference() {\n        hull() {\n            translate([-seat_width/2, -seat_depth/2, back_height])\n                cube([seat_width, 6, back_height-15]);\n            translate([-seat_width/2+10, -seat_depth/2+5, back_height-10])\n                cube([seat_width-20, 6, back_height-15]);\n        }\n        \n        // Hollow interior\n        translate([-seat_width/2+wall_thickness, -seat_depth/2+6, back_height-10])\n            cube([seat_width-wall_thickness*2, wall_thickness, back_height-20]);\n    }\n    \n    // Support ribs\n    for(i=[-35:35:70]) {\n        translate([i, -seat_depth/2+3, back_height-25])\n            rotate([90, 0, 0])\n                cylinder(h=20, d1=4, d2=2);\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(x=[-seat_width/2+15, seat_width/2-15]) {\n        translate([x, seat_depth/2-15, 0])\n            cylinder(h=leg_height, d=8);\n        translate([x, seat_depth/2-15, leg_height-2])\n            sphere(d=8);\n    }\n    \n    // Rear legs with backrest support\n    for(x=[-seat_width/2+15, seat_width/2-15]) {\n        translate([x, -seat_depth/2+15, 0])\n            cylinder(h=leg_height, d=8);\n        translate([x, -seat_depth/2+15, leg_height-2])\n            sphere(d=8);\n        // Support strut\n        translate([x, -seat_depth/2+15, leg_height-10])\n            rotate([90, 0, 0])\n                cylinder(h=seat_depth-30, d=6);\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-seat_width/2-5, 0, 35])\n        rotate([0, 15, 0])\n            difference() {\n                hull() {\n                    cube([8, seat_depth-20, 15]);\n                    translate([0, 5, 15])\n                        cube([8, seat_depth-30, 10]);\n                }\n                translate([2, 5, 8])\n                    cube([4, seat_depth-30, 15]);\n            }\n    \n    // Right armrest\n    translate([seat_width/2-3, 0, 35])\n        rotate([0, -15, 0])\n            difference() {\n                hull() {\n                    cube([8, seat_depth-20, 15]);\n                    translate([0, 5, 15])\n                        cube([8, seat_depth-30, 10]);\n                }\n                translate([2, 5, 8])\n                    cube([4, seat_depth-30, 15]);\n            }\n}\n\nmodule ventilation_holes() {\n    // Seat ventilation pattern\n    for(x=[-30:15:30]) {\n        for(y=[-30:15:30]) {\n            translate([x, y, 0])\n                cylinder(h=10, d=4);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Seat structure\n    difference() {\n        seat_surface();\n        ventilation_holes();\n    }\n    \n    // Backrest\n    backrest();\n    \n    // Support structure\n    legs();\n    \n    // Armrests\n    armrests();\n    \n    // Cross bracing\n    translate([0, 0, 15])\n        rotate([90, 0, 0])\n            cylinder(h=seat_width-30, d=5);\n}",
    "renders": true
  },
  {
    "sports_equipment": "cowling",
    "openscad_code": "// Cowling Furniture - Engine Cowling Inspired Chair\n// Dimensions: 120mm length x 80mm width x 100mm height\n\n$fn = 36; // Smooth curves for printing\n\n// Main cowling shell\nmodule cowling_shell() {\n    difference() {\n        // Main body - elliptical cylinder\n        scale([1, 0.8, 1])\n        cylinder(h = 100, r1 = 40, r2 = 35);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n        scale([1, 0.8, 1])\n        cylinder(h = 102, r1 = 38, r2 = 33);\n        \n        // Front opening - intake\n        translate([0, 0, 99])\n        scale([1, 0.8, 1])\n        cylinder(h = 5, r1 = 25, r2 = 25);\n        \n        // Rear opening\n        translate([0, 0, -1])\n        scale([1, 0.8, 1])\n        cylinder(h = 5, r1 = 30, r2 = 30);\n    }\n}\n\n// Structural frame inside\nmodule internal_frame() {\n    // Central spine\n    translate([0, 0, 0])\n    cube([4, 80, 98], center = true);\n    \n    // Cross supports\n    for(z = [20:20:80]) {\n        translate([0, 0, z])\n        cube([60, 4, 2], center = true);\n    }\n}\n\n// Seat surface\nmodule seat_surface() {\n    // Curved seat base\n    translate([0, 0, 85])\n    rotate([90, 0, 0])\n    scale([1.2, 1, 1])\n    cylinder(h = 2, r1 = 35, r2 = 35);\n    \n    // Comfort padding layers\n    translate([0, 0, 87])\n    rotate([90, 0, 0])\n    scale([1.1, 0.9, 1])\n    cylinder(h = 3, r1 = 33, r2 = 33);\n}\n\n// Ventilation slots\nmodule ventilation_slots() {\n    for(angle = [45:15:135]) {\n        rotate([0, 0, angle])\n        translate([30, 0, 50])\n        rotate([0, 90, 0])\n        cube([2, 15, 5]);\n    }\n}\n\n// Mounting brackets for legs\nmodule leg_mounts() {\n    // Front mounts\n    translate([25, 30, 10])\n    cylinder(h = 8, r = 6);\n    translate([25, -30, 10])\n    cylinder(h = 8, r = 6);\n    \n    // Rear mounts\n    translate([-25, 30, 10])\n    cylinder(h = 8, r = 6);\n    translate([-25, -30, 10])\n    cylinder(h = 8, r = 6);\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    for(i = [1:3]) {\n        rotate_extrude()\n        translate([39, 0, i * 25])\n        circle(r = 1.5);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    cowling_shell();\n    \n    // Internal support\n    internal_frame();\n    \n    // Seating area\n    seat_surface();\n    \n    // Ventilation\n    ventilation_slots();\n    \n    // Furniture mounting points\n    leg_mounts();\n    \n    // Structural ribs\n    ribs();\n}\n\n// Base plate for stability\ntranslate([0, 0, -2])\ncube([50, 70, 2], center = true);",
    "renders": true
  },
  {
    "sports_equipment": "strut",
    "openscad_code": "// Modular Strut Furniture Support Bar\n// Realistic style strut with furniture-grade joints and wall thickness optimized for 3D printing (2 mm walls)\n\n$fn = 50; // Smooth curves for realistic appearance\n\n// Overall dimensions (mm) – fits within 120 mm length\nstrut_length = 100;\nstrut_width = 20;\nstrut_height = 20;\nwall_thickness = 2;\n\n// Joint dimensions\njoint_depth = 8;\njoint_diameter = 14;\nbolt_hole_diameter = 5;\n\n// Grip texture parameters\ngrip_width = 3;\ngrip_depth = 1;\ngrip_spacing = 6;\nnum_grips = floor(strut_length / grip_spacing) - 2;\n\n// Main strut body module\nmodule strut_body() {\n    difference() {\n        // Main hollow rectangular tube\n        difference() {\n            // Outer shell\n            cube([strut_length, strut_width, strut_height], center = true);\n            // Inner hollow space\n            translate([0, 0, 0])\n            cube([strut_length + 0.2, strut_width - 2*wall_thickness, strut_height - 2*wall_thickness], center = true);\n        }\n        \n        // Grip textures (subtractive for realistic grip pattern)\n        for (i = [1:num_grips]) {\n            translate([-strut_length/2 + i*grip_spacing, 0, strut_height/2 - grip_depth/2])\n            cube([grip_width, strut_width + 0.2, grip_depth], center = true);\n        }\n    }\n}\n\n// Furniture joint connector (one end)\nmodule joint_end() {\n    difference() {\n        union() {\n            // Cylindrical joint protrusion\n            translate([strut_length/2, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = joint_depth, d = joint_diameter, center = true);\n            \n            // Reinforcement fillet\n            translate([strut_length/2 - joint_depth/2, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = joint_depth*2, d1 = strut_width, d2 = joint_diameter, center = true);\n        }\n        \n        // Central bolt hole\n        translate([strut_length/2 + joint_depth/2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = joint_depth + 2, d = bolt_hole_diameter, center = true);\n    }\n}\n\n// Counter-joint (other end, recessed)\nmodule counter_joint_end() {\n    difference() {\n        strut_body();\n        \n        // Recessed joint cavity\n        translate([-strut_length/2 - joint_depth/2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = joint_depth + 1, d = joint_diameter + 0.2, center = true);\n        \n        // Bolt access hole\n        translate([-strut_length/2 - joint_depth, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = joint_depth + 2, d = bolt_hole_diameter + 0.2, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main strut with left joint\n    strut_body();\n    joint_end();\n    \n    // Right counter-joint end\n    counter_joint_end();\n}",
    "renders": true
  },
  {
    "sports_equipment": "spar",
    "openscad_code": "// OpenSCAD model: Realistic spar-style furniture – a lightweight aluminum-look wall-mounted coat rack\n// Inspired by aircraft wing spars. 100 mm long, 50 mm high, 25 mm deep.\n// 3 mm wall thickness for FDM printing, no overhangs >45°.\n\n// Overall dimensions\nrack_length = 100;\nrack_height = 50;\nrack_depth  = 25;\n\n// Wall thickness\nwall = 2;\n\n// Number of coat hooks\nhooks = 4;\n\n// Mounting screw hole diameter\nmount_d = 5;\n\n// Main hollow spar body\nmodule spar_body() {\n    difference() {\n        // Outer rounded spar\n        hull() {\n            translate([-rack_length/2, 0, 0])\n                cube([rack_length, rack_height, rack_depth], center=true);\n            translate([-rack_length/2, 0, rack_depth/2 - 2])\n                cube([rack_length, rack_height-4, 4], center=true);\n        }\n        // Inner hollow cavity\n        translate([0, 0, -1])\n            cube([rack_length - 2*wall, rack_height - 2*wall, rack_depth + 2], center=true);\n    }\n}\n\n// Lightening holes along spar web\nmodule lightening_holes() {\n    for (i = [-rack_length/2 + 10 : 20 : rack_length/2 - 10]) {\n        translate([i, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=rack_depth, d=6, $fn=20);\n    }\n}\n\n// Hooks (aerodynamic teardrop)\nmodule hook() {\n    difference() {\n        hull() {\n            cylinder(h=wall+1, d1=6, d2=4, $fn=16);\n            translate([0, 12, 0])\n                sphere(d=4, $fn=16);\n        }\n        // Hollow inside for weight saving\n        cylinder(h=20, d=2, $fn=16);\n    }\n}\n\n// Mounting holes for screws\nmodule mounting_holes() {\n    for (x = [-rack_length/2 + 10, rack_length/2 - 10]) {\n        translate([x, rack_height/2 - wall, 0])\n            rotate([90, 0, 0])\n                cylinder(h=rack_depth, d=mount_d, $fn=16);\n    }\n}\n\n// Grip texture strips along top\nmodule grip_strips() {\n    for (i = [-rack_length/2 + 5 : 10 : rack_length/2 - 5]) {\n        translate([i, rack_height/2 - wall/2, 0])\n            cube([4, wall, rack_depth - 2*wall], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    spar_body();\n    difference() {\n        spar_body();\n        lightening_holes();\n        mounting_holes();\n    }\n    grip_strips();\n    // Position hooks\n    for (i = [-rack_length/2 + 15 : (rack_length - 30)/(hooks - 1) : rack_length/2 - 15]) {\n        translate([i, -rack_height/2 + wall, rack_depth/2])\n            rotate([90, 0, 0])\n                hook();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "rib",
    "openscad_code": "// OpenSCAD Rib Chair – Realistic Style, Medium Complexity\n// A 3D-printable single rib element that can be used as a chair backrest or decorative furniture piece\n\n$fn = 36; // Smooth curves for 3D printing\n\n// Overall dimensions\nrib_length   = 120; // mm\nrib_height   = 55;\nrib_thick    = 2.2; // Wall thickness for printing\ngroove_depth = 1.0;\n\n// Central spine curve parameters\ncontrol_points = [\n    [0, 0, 0],\n    [rib_length*0.25, rib_height*0.35, 0],\n    [rib_length*0.75, rib_height*0.35, 0],\n    [rib_length, 0, 0]\n];\n\n// Helper: scale vector\nfunction scale_v(v, s) = [v.x*s, v.y*s, v.z*s];\n\n// Create a single rib segment between two points\nmodule rib_segment(p1, p2, width = rib_thick*2) {\n    len   = norm(p2 - p1);\n    angle = atan2(p2.y - p1.y, p2.x - p1.x);\n    translate(p1)\n    rotate([0, 0, angle])\n    linear_extrude(height = width, center = true, convexity = 4)\n    polygon(points = [\n        [0, -rib_thick/2],\n        [len, -rib_thick/2],\n        [len,  rib_thick/2],\n        [0,  rib_thick/2]\n    ]);\n}\n\n// Main rib body with curved spine\nmodule main_rib() {\n    difference() {\n        union() {\n            // Central spine using stepped segments\n            for (i = [0:1:len(control_points)-2]) {\n                p1 = control_points[i];\n                p2 = control_points[i+1];\n                rib_segment(p1, p2);\n            }\n\n            // Upper flange for structural support\n            translate([0, rib_height*0.9, 0])\n            cube([rib_length, rib_thick, rib_height*0.1], center = false);\n\n            // Lower flange for joints\n            translate([0, -rib_thick, 0])\n            cube([rib_length, rib_thick, rib_height*0.1], center = false);\n\n            // End caps\n            translate([0, 0, -rib_thick/2])\n            cylinder(h = rib_thick, r = rib_thick*1.2, center = true);\n            translate([rib_length, 0, -rib_thick/2])\n            cylinder(h = rib_thick, r = rib_thick*1.2, center = true);\n\n            // Grip texture ridges\n            for (x = [rib_length*0.1:rib_length*0.15:rib_length*0.9]) {\n                translate([x, rib_height*0.1, 0])\n                cube([rib_thick*0.6, rib_height*0.8, rib_thick*1.5], center = true);\n            }\n        }\n\n        // Lightening holes\n        for (i = [1:1:len(control_points)-2]) {\n            p = control_points[i];\n            translate([p.x, p.y, 0])\n            cylinder(h = rib_thick + 0.2, r = rib_thick*1.5, center = true);\n        }\n    }\n}\n\n// Mounting brackets for furniture integration\nmodule mounting_brackets() {\n    // Left bracket\n    translate([-rib_thick*3, -rib_thick*2, -rib_thick/2])\n    cube([rib_thick*2, rib_thick*4, rib_thick]);\n\n    // Right bracket\n    translate([rib_length + rib_thick, -rib_thick*2, -rib_thick/2])\n    cube([rib_thick*2, rib_thick*4, rib_thick]);\n}\n\n// Assembly\nmain_rib();\nmounting_brackets();",
    "renders": true
  },
  {
    "sports_equipment": "bulkhead",
    "openscad_code": "// Realistic Bulkhead Furniture (Wall-Mounted Storage Cabinet)\n// Overall size: 120mm wide x 100mm tall x 60mm deep\n// 2mm wall thickness throughout for 3D printing\n\nwall_thickness = 2;  // mm\nwidth = 120;\nheight = 100;\ndepth = 60;\n\nmodule bulkhead_body() {\n    difference() {\n        // Main outer shell\n        translate([0, 0, depth/2])\n            cube([width, height, depth], center=true);\n        \n        // Hollow out interior\n        translate([0, 0, depth/2 + wall_thickness])\n            cube([width - 2*wall_thickness, height - 2*wall_thickness, depth - wall_thickness], center=true);\n    }\n}\n\nmodule door() {\n    // Door panel with 2mm clearance\n    translate([0, -height/2 + wall_thickness, depth/2 - wall_thickness])\n        cube([width - 4*wall_thickness, height - 6*wall_thickness, wall_thickness]);\n    \n    // Door handle - cylindrical\n    translate([width/2 - 15, -height/2 + wall_thickness + 10, depth/2 - wall_thickness - 5])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=8, $fn=20);\n}\n\nmodule shelf_supports() {\n    // Generate 3 shelf supports on each side\n    for(i = [0:1:2]) {\n        // Left side supports\n        translate([-width/2 + wall_thickness/2, -height/2 + 25 + i*25, depth/2 - 10 - i*5])\n            rotate([0, 90, 0])\n                cylinder(h=wall_thickness*2, r=wall_thickness*2, $fn=10);\n        \n        // Right side supports\n        translate([width/2 - wall_thickness/2, -height/2 + 25 + i*25, depth/2 - 10 - i*5])\n            rotate([0, 90, 0])\n                cylinder(h=wall_thickness*2, r=wall_thickness*2, $fn=10);\n    }\n}\n\nmodule shelves() {\n    // Generate 3 shelves\n    for(i = [0:1:2]) {\n        translate([0, -height/2 + 27 + i*25, depth/2 - 10 - i*5])\n            cube([width - 4*wall_thickness, wall_thickness, depth - 20 - i*10], center=true);\n    }\n}\n\nmodule mounting_holes() {\n    // Keyhole mounting slots on back\n    translate([-width/2 + 20, height/2 - 15, -depth/2 + wall_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=wall_thickness + 1, d1=8, d2=4, $fn=20);\n    \n    translate([width/2 - 20, height/2 - 15, -depth/2 + wall_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=wall_thickness + 1, d1=8, d2=4, $fn=20);\n    \n    translate([0, height/2 - 15, -depth/2 + wall_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=wall_thickness + 1, d1=8, d2=4, $fn=20);\n}\n\nmodule ventilation_slots() {\n    // Ventilation slots on top\n    for(i = [0:1:4]) {\n        translate([-width/2 + 15 + i*20, height/2 - wall_thickness/2, depth/2 - 10])\n            rotate([90, 0, 0])\n                cube([15, wall_thickness, 5]);\n    }\n    \n    // Ventilation on bottom\n    for(i = [0:1:4]) {\n        translate([-width/2 + 15 + i*20, -height/2 + wall_thickness/2, depth/2 - 10])\n            rotate([90, 0, 0])\n                cube([15, wall_thickness, 5]);\n    }\n}\n\nmodule back_panel() {\n    // Remove back panel for mounting access\n    translate([0, 0, -depth/2 + wall_thickness/2])\n        cube([width - 2*wall_thickness, height - 2*wall_thickness, wall_thickness], center=true);\n}\n\n// Assembly\nunion() {\n    bulkhead_body();\n    \n    // Add door with hinges\n    translate([0, 0, 0])\n        door();\n    \n    shelf_supports();\n    shelves();\n    \n    // Add ventilation\n    ventilation_slots();\n    \n    // Remove mounting holes from back\n    difference() {\n        children();\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "stringer",
    "openscad_code": "// Stringer Furniture (Step Stool) - Realistic Style, Medium Complexity\n\n// Overall dimensions (mm)\nwidth = 120;\ndepth = 80;\nheight = 100;\nthickness = 2;\n\n// Step dimensions\nstep1_height = 50;\nstep2_height = 100;\nstep_depth = 35;\n\n// Rail dimensions\nrail_height = 15;\nrail_diameter = 8;\n\nmodule step(position, step_width, step_depth, step_thickness) {\n    // Main step platform\n    translate([position[0], position[1], position[2]])\n        cube([step_width, step_depth, step_thickness], center=true);\n    \n    // Front edge rounding with small cylinder\n    translate([position[0], position[1] + step_depth/2 - step_thickness/2, position[2] + step_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=step_width, r=step_thickness/2, center=true);\n}\n\nmodule stringer_side() {\n    // Left stringer profile\n    linear_extrude(height=thickness)\n        polygon(points=[\n            [0, 0],                    // Bottom front\n            [0, height],               // Top front\n            [step_depth, height],      // Top step level\n            [step_depth, step1_height],// First step height\n            [step_depth*2, step1_height],// First step depth\n            [step_depth*2, 0],         // Bottom back\n            [thickness, 0],            // Thickness compensation\n            [thickness, step1_height - thickness],// Inner cut\n            [step_depth*2 - thickness, step1_height - thickness],\n            [step_depth*2 - thickness, thickness],\n            [step_depth + thickness, thickness],\n            [step_depth + thickness, height - thickness],\n            [thickness, height - thickness],\n            [thickness, thickness]\n        ]);\n}\n\nmodule support_rail(x_pos, y_pos, z_pos) {\n    // Vertical support rail\n    translate([x_pos, y_pos, z_pos])\n        cylinder(h=height - rail_height, r=rail_diameter/2, center=false);\n    \n    // Top cap for rail\n    translate([x_pos, y_pos, height - rail_height/2])\n        sphere(r=rail_diameter/2);\n}\n\nmodule grip_pattern(base_x, base_y, base_z) {\n    // Anti-slip grip pattern on steps\n    for (i = [-width/2 + 10 : 10 : width/2 - 10]) {\n        translate([i, base_y, base_z + thickness + 0.5])\n            cube([2, step_depth - 10, 1], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Left stringer\n    translate([0, -depth/2, 0])\n        stringer_side();\n    \n    // Right stringer (mirrored)\n    translate([width, -depth/2, 0])\n        mirror([1, 0, 0])\n            stringer_side();\n    \n    // Bottom front support\n    translate([width/2, -depth/2, 0])\n        cube([width - thickness*2, thickness, step1_height], center=true);\n    \n    // Bottom back support\n    translate([width/2, depth/2 - thickness, 0])\n        cube([width - thickness*2, thickness, step1_height], center=true);\n    \n    // First step\n    step([width/2, -depth/2 + step_depth/2, step1_height + thickness/2], \n         width - thickness*2, step_depth - thickness, thickness);\n    \n    // Second step\n    step([width/2, -depth/2 + step_depth + step_depth/2, step2_height + thickness/2], \n         width - thickness*2, step_depth - thickness, thickness);\n    \n    // Support rails\n    support_rail(thickness*2, -depth/2 + thickness*2, rail_height);\n    support_rail(width - thickness*2, -depth/2 + thickness*2, rail_height);\n    support_rail(thickness*2, depth/2 - thickness*2, rail_height);\n    support_rail(width - thickness*2, depth/2 - thickness*2, rail_height);\n    \n    // Grip patterns on steps\n    grip_pattern(0, -depth/2 + step_depth/2, step1_height);\n    grip_pattern(0, -depth/2 + step_depth*1.5, step2_height);\n}",
    "renders": true
  },
  {
    "sports_equipment": "skin",
    "openscad_code": "// Skin Chair - Realistic style, medium complexity\n// A modern minimalist chair with a stretched leather skin seat and backrest\n\n// Overall dimensions\nchair_width = 120;\nchair_depth = 140;\nchair_height = 140;\nseat_height = 75;\n\n// Material thicknesses\nframe_diameter = 8;\nskin_thickness = 2;\nleg_thickness = 15;\n\n// Create the complete chair\nmodule chair() {\n    // Chair frame structure\n    union() {\n        // Front legs\n        translate([-chair_width/2 + leg_thickness/2, 0, 0])\n            leg(seat_height);\n        translate([chair_width/2 - leg_thickness/2, 0, 0])\n            leg(seat_height);\n        \n        // Back legs\n        translate([-chair_width/2 + leg_thickness/2, chair_depth - leg_thickness, 0])\n            leg(chair_height);\n        translate([chair_width/2 - leg_thickness/2, chair_depth - leg_thickness, 0])\n            leg(chair_height);\n        \n        // Backrest frame\n        backrest_frame();\n        \n        // Seat frame\n        seat_frame();\n        \n        // Skin seat surface\n        skin_seat();\n        \n        // Skin backrest surface\n        skin_backrest();\n        \n        // Support bars\n        support_bars();\n    }\n}\n\n// Create a single leg\nmodule leg(height) {\n    difference() {\n        // Main leg structure\n        cylinder(h = height, d = leg_thickness, $fn = 20);\n        \n        // Hollow center for material saving\n        translate([0, 0, skin_thickness])\n            cylinder(h = height - skin_thickness*2, d = leg_thickness - skin_thickness*2, $fn = 20);\n    }\n}\n\n// Create the backrest frame\nmodule backrest_frame() {\n    // Left vertical bar\n    translate([-chair_width/2 + leg_thickness/2, chair_depth - leg_thickness, seat_height])\n        cylinder(h = chair_height - seat_height, d = frame_diameter, $fn = 16);\n    \n    // Right vertical bar\n    translate([chair_width/2 - leg_thickness/2, chair_depth - leg_thickness, seat_height])\n        cylinder(h = chair_height - seat_height, d = frame_diameter, $fn = 16);\n    \n    // Top horizontal bar\n    translate([0, chair_depth - leg_thickness, chair_height])\n        rotate([90, 0, 0])\n            cylinder(h = chair_width - leg_thickness, d = frame_diameter, $fn = 16);\n}\n\n// Create the seat frame\nmodule seat_frame() {\n    // Front horizontal bar\n    translate([0, 0, seat_height])\n        rotate([90, 0, 0])\n            cylinder(h = chair_width - leg_thickness, d = frame_diameter, $fn = 16);\n    \n    // Side bars\n    translate([-chair_width/2 + leg_thickness/2, chair_depth/2, seat_height/2 + leg_thickness/2])\n        rotate([0, 90, 0])\n            cylinder(h = chair_depth, d = frame_diameter, $fn = 16);\n    translate([chair_width/2 - leg_thickness/2, chair_depth/2, seat_height/2 + leg_thickness/2])\n        rotate([0, 90, 0])\n            cylinder(h = chair_depth, d = frame_diameter, $fn = 16);\n}\n\n// Create the skin seat surface with realistic stretching\nmodule skin_seat() {\n    // Main seat surface\n    difference() {\n        // Base skin\n        translate([0, chair_depth/2, seat_height - skin_thickness/2])\n            cube([chair_width - frame_diameter*2, chair_depth - frame_diameter*2, skin_thickness], center = true);\n        \n        // Grip texture pattern\n        for (x = [-chair_width/2 + 20 : 10 : chair_width/2 - 20]) {\n            for (y = [10 : 10 : chair_depth - 10]) {\n                translate([x, y, seat_height - skin_thickness])\n                    cube([2, 2, skin_thickness + 0.1], center = true);\n            }\n        }\n    }\n}\n\n// Create the skin backrest surface\nmodule skin_backrest() {\n    // Backrest surface\n    difference() {\n        // Base skin\n        translate([0, chair_depth - leg_thickness - frame_diameter, (chair_height + seat_height)/2])\n            cube([chair_width - frame_diameter*2, skin_thickness, chair_height - seat_height - frame_diameter*2], center = true);\n        \n        // Aerodynamic ventilation holes\n        for (i = [1:3]) {\n            translate([0, chair_depth - leg_thickness - frame_diameter - skin_thickness/2, \n                      seat_height + (chair_height - seat_height)/4 * i])\n                cylinder(h = skin_thickness + 0.1, d = 8, $fn = 20);\n        }\n        \n        // Grip texture pattern\n        for (x = [-chair_width/2 + 20 : 12 : chair_width/2 - 20]) {\n            for (z = [seat_height + 10 : 10 : chair_height - 10]) {\n                translate([x, chair_depth - leg_thickness - frame_diameter - skin_thickness/2, z])\n                    cube([2, skin_thickness + 0.1, 2], center = true);\n            }\n        }\n    }\n}\n\n// Create support bars for stability\nmodule support_bars() {\n    // Front to back support\n    translate([chair_width/4, chair_depth/2, leg_thickness/2])\n        rotate([0, 90, 0])\n            cylinder(h = sqrt(pow(chair_depth - leg_thickness, 2) + pow(seat_height, 2)), \n                    d = frame_diameter - 2, $fn = 12);\n    \n    translate([-chair_width/4, chair_depth/2, leg_thickness/2])\n        rotate([0, 90, 0])\n            cylinder(h = sqrt(pow(chair_depth - leg_thickness, 2) + pow(seat_height, 2)), \n                    d = frame_diameter - 2, $fn = 12);\n}\n\n// Render the chair\nchair();",
    "renders": true
  },
  {
    "sports_equipment": "rivet",
    "openscad_code": "// Rivet Furniture - Realistic Style Medium Complexity\n// A structural rivet with furniture-grade proportions and printable design\n\n$fn = 50;\nwall = 2;           // 2mm wall thickness for 3D printing\nrivet_d = 40;       // Main rivet diameter (40mm)\nrivet_h = 80;       // Total height (80mm)\nhead_d = 60;        // Furniture-grade oversized head (60mm)\nhead_h = 12;        // Head height (12mm)\ngrip_h = 8;         // Grip texture height\ngrip_ridges = 20;   // Number of grip ridges\nbase_r = 3;         // Base fillet radius\npin_d = 12;         // Center pin diameter\npin_h = 30;         // Pin protrusion height\n\n// Main rivet body - cylindrical with proper wall thickness\nmodule rivet_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = rivet_h - head_h, d = rivet_d, center = false);\n        \n        // Hollow center - ensure 2mm walls\n        translate([0, 0, wall]) \n            cylinder(h = rivet_h - head_h - wall, d = rivet_d - (2*wall), center = false);\n    }\n}\n\n// Furniture-grade oversized head with grip texture\nmodule rivet_head() {\n    difference() {\n        // Main head cylinder\n        translate([0, 0, rivet_h - head_h])\n            cylinder(h = head_h, d = head_d, center = false);\n            \n        // Hollow underside - maintain wall thickness\n        translate([0, 0, rivet_h - head_h + wall])\n            cylinder(h = head_h - wall, d = head_d - (2*wall), center = false);\n    }\n    \n    // Grip texture ridges for furniture handling\n    for(i = [0 : grip_ridges-1]) {\n        rotate([0, 0, i * 360/grip_ridges])\n            translate([head_d/2 - wall, 0, rivet_h - head_h + grip_h/2])\n                cube([wall, 2, grip_h], center = true);\n    }\n}\n\n// Structural center pin for joint strength\nmodule center_pin() {\n    // Main pin\n    translate([0, 0, -pin_h/2])\n        cylinder(h = pin_h + rivet_h, d = pin_d, center = false);\n        \n    // Pin head (furniture joint connection)\n    translate([0, 0, rivet_h - head_h/2])\n        cylinder(h = head_h/2, d = pin_d + 4, center = false);\n}\n\n// Base with furniture-grade fillet for smooth contact\nmodule base_fillet() {\n    // Create smooth base transition\n    translate([0, 0, 0])\n        cylinder(h = base_r, d = rivet_d + base_r*2, center = false);\n        \n    // Remove excess for smooth curve\n    difference() {\n        cylinder(h = base_r, d = rivet_d + base_r*2, center = false);\n        translate([0, 0, -base_r])\n            cylinder(h = base_r*2, d = rivet_d, center = false);\n    }\n}\n\n// Assembly of the complete rivet furniture piece\nunion() {\n    // Main components\n    rivet_body();\n    rivet_head();\n    center_pin();\n    base_fillet();\n    \n    // Furniture-specific structural reinforcements\n    translate([0, 0, rivet_h/2])\n        difference() {\n            // Outer reinforcement ring\n            cylinder(h = rivet_h/3, d = rivet_d + 6, center = true);\n            // Hollow center\n            cylinder(h = rivet_h/3 + 1, d = rivet_d, center = true);\n        }\n}",
    "renders": true
  },
  {
    "sports_equipment": "sealant",
    "openscad_code": "// Sealant furniture - 3D printable sealant tube holder\n// Realistic style, medium complexity\n\n$fn = 32; // Smooth curves for 3D printing\n\n// Main dimensions (mm)\ntube_diameter = 32;\ntube_length = 120;\nholder_height = 120;\nbase_width = 60;\nbase_depth = 60;\nwall_thickness = 2;\n\n// Base module\nmodule base() {\n    // Main base platform\n    difference() {\n        cube([base_width, base_depth, 10], center=true);\n        \n        // Weight reduction holes\n        for (x = [-20, 0, 20]) {\n            for (y = [-20, 0, 20]) {\n                translate([x, y, 4])\n                    cylinder(h=8, d=8, center=true);\n            }\n        }\n    }\n    \n    // Corner reinforcements\n    for (x = [-base_width/2 + 5, base_width/2 - 5]) {\n        for (y = [-base_depth/2 + 5, base_depth/2 - 5]) {\n            translate([x, y, 0])\n                cylinder(h=10, d=6, center=true);\n        }\n    }\n}\n\n// Tube holder main body\nmodule tube_holder() {\n    // Main tube cavity\n    difference() {\n        // Outer shell\n        translate([0, 0, holder_height/2 + 5])\n            cylinder(h=holder_height, d=tube_diameter + 8, center=true);\n        \n        // Inner cavity for tube\n        translate([0, 0, holder_height/2 + 5])\n            cylinder(h=holder_height + 2, d=tube_diameter + 1, center=true);\n        \n        // Front opening for tube access\n        translate([0, tube_diameter/2 + 4, holder_height/2 + 5])\n            cube([tube_diameter + 8, tube_diameter + 8, holder_height + 2], center=true);\n    }\n    \n    // Support ribs for strength\n    for (angle = [0:120:359]) {\n        rotate([0, 0, angle])\n            translate([0, 0, holder_height/2 + 5])\n                cube([wall_thickness, tube_diameter/2 + 4, holder_height], center=true);\n    }\n}\n\n// Nozzle rest\nmodule nozzle_rest() {\n    translate([0, -base_depth/2 - 10, holder_height + 5])\n        difference() {\n            // Main rest block\n            cube([30, 20, 10], center=true);\n            \n            // Nozzle groove\n            translate([0, 0, -3])\n                cube([8, 20, 10], center=true);\n        }\n}\n\n// Grip texture on base\nmodule grip_texture() {\n    for (x = [-25:5:25]) {\n        for (y = [-25:5:25]) {\n            translate([x, y, 5.5])\n                cylinder(h=1, d=3, center=true);\n        }\n    }\n}\n\n// Tube retention clip\nmodule retention_clip() {\n    translate([0, tube_diameter/2 + 4, holder_height/2 + 5])\n        difference() {\n            // Main clip body\n            union() {\n                translate([0, 5, 0])\n                    cube([tube_diameter + 6, 10, 20], center=true);\n                translate([0, 10, 5])\n                    cube([tube_diameter + 6, 10, 10], center=true);\n            }\n            \n            // Clip gap\n            translate([0, 5, 0])\n                cube([tube_diameter + 2, 12, 22], center=true);\n        }\n}\n\n// Label holder\nmodule label_holder() {\n    translate([tube_diameter/2 + 4, 0, holder_height/2 + 5])\n        difference() {\n            // Label frame\n            cube([20, 40, 2], center=true);\n            \n            // Label recess\n            translate([0, 0, -1])\n                cube([18, 38, 2], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    base();\n    translate([0, 0, 5])\n        tube_holder();\n    nozzle_rest();\n    grip_texture();\n    retention_clip();\n    label_holder();\n}",
    "renders": true
  },
  {
    "sports_equipment": "gasket",
    "openscad_code": "// Gasket Furniture - Modern Stool Base\n// A 3D printable gasket-style stool base with structural joints\n// Overall dimensions: 100mm diameter, 40mm height\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\nouter_diameter = 100;\ninner_diameter = 80;\nheight = 40;\ngasket_segments = 8;\nbolt_hole_diameter = 6;\nbolt_hole_depth = 10;\n\n// Main gasket body\nmodule gasket_base() {\n    difference() {\n        // Outer cylinder with rounded edges\n        union() {\n            cylinder(h=height, d=outer_diameter, center=true);\n            translate([0, 0, height/2 - 2])\n                cylinder(h=4, d1=outer_diameter, d2=outer_diameter-4, center=false);\n            translate([0, 0, -height/2 + 2])\n                cylinder(h=4, d1=outer_diameter-4, d2=outer_diameter, center=false);\n        }\n        \n        // Inner hollow\n        cylinder(h=height + 2, d=inner_diameter, center=true);\n    }\n}\n\n// Structural reinforcement ribs\nmodule reinforcement_ribs() {\n    for(i = [0 : 360/gasket_segments : 359]) {\n        rotate([0, 0, i])\n        translate([0, (outer_diameter + inner_diameter)/4, 0])\n        cube([(outer_diameter - inner_diameter)/2 - 1, wall_thickness*2, height - 4], center=true);\n    }\n}\n\n// Bolt holes for furniture attachment\nmodule bolt_holes() {\n    for(i = [45 : 360/gasket_segments : 359]) {\n        rotate([0, 0, i])\n        translate([(outer_diameter + inner_diameter)/4, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=bolt_hole_depth + 2, d=bolt_hole_diameter, center=true);\n    }\n}\n\n// Grip texture pattern on top surface\nmodule grip_texture() {\n    difference() {\n        // Top surface with slight dome\n        translate([0, 0, height/2 - 1])\n        cylinder(h=2, d=outer_diameter - 4, center=false);\n        \n        // Concentric grooves for grip\n        for(r = [inner_diameter/2 + 5 : 5 : outer_diameter/2 - 5]) {\n            cylinder(h=3, d=r*2, center=true);\n        }\n    }\n}\n\n// Anti-slip pads base\nmodule anti_slip_pads() {\n    for(i = [0 : 90 : 270]) {\n        rotate([0, 0, i])\n        translate([outer_diameter/2 - 10, 0, -height/2])\n        cylinder(h=3, d=8, center=false);\n    }\n}\n\n// Assembly\nunion() {\n    // Main gasket structure\n    gasket_base();\n    \n    // Add reinforcement\n    translate([0, 0, 0])\n    reinforcement_ribs();\n    \n    // Add bolt holes\n    bolt_holes();\n    \n    // Add grip texture on top\n    grip_texture();\n    \n    // Add anti-slip pads on bottom\n    anti_slip_pads();\n}",
    "renders": true
  },
  {
    "sports_equipment": "bearing",
    "openscad_code": "// Bearing-themed side table\n// Outer race diameter 100 mm, inner race diameter 60 mm, height 50 mm\n// Legs integrated into the bearing structure for furniture use\n\n$fn = 50;  // Smooth curves for printability\n\nmodule bearing_table() {\n    // Main bearing outer race\n    difference() {\n        cylinder(h = 50, d = 100, center = true);  // Outer cylinder\n        cylinder(h = 52, d = 96, center = true);   // Hollow center\n    }\n\n    // Bearing inner race\n    difference() {\n        cylinder(h = 50, d = 60, center = true);   // Inner cylinder\n        cylinder(h = 52, d = 56, center = true);   // Hollow center\n    }\n\n    // Ball bearings (12 balls evenly spaced)\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([40, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 10, d = 10, center = true);  // Ball shape\n    }\n\n    // Table legs (4 legs integrated into bearing structure)\n    for (angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n            translate([45, 0, -30])\n                cylinder(h = 60, d = 8, center = false);  // Leg post\n    }\n\n    // Leg base plates for stability\n    for (angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n            translate([45, 0, -60])\n                cube([20, 20, 4], center = true);  // Base plate\n    }\n\n    // Top surface - glass insert simulation\n    difference() {\n        cylinder(h = 3, d = 98, center = true);\n        translate([0, 0, 1.5])\n            cylinder(h = 3, d = 58, center = true);\n    }\n    \n    // Structural ribs between races\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([35, 0, 0])\n                cube([30, 4, 46], center = true);\n    }\n\n    // Grip texture rings on outer surface\n    for (z = [-20:5:20]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 2, d = 100, center = true);\n                cylinder(h = 2.1, d = 98, center = true);\n            }\n    }\n}\n\n// Render the table\nbearing_table();",
    "renders": true
  },
  {
    "sports_equipment": "bushing",
    "openscad_code": "// Furniture Bushing for 3D Printing\n// Medium complexity realistic bushing with furniture characteristics\n\n// Main parameters\nbushing_diameter = 40;\nbushing_height = 30;\nwall_thickness = 2;\nflange_diameter = 60;\nflange_thickness = 5;\nbolt_hole_diameter = 8;\nbolt_head_diameter = 15;\nbolt_head_depth = 3;\ngrip_ridges = 24;\nridge_height = 1;\n\n// Main cylindrical body\nmodule main_body() {\n    difference() {\n        // Outer cylinder with slight taper\n        cylinder(h = bushing_height, d1 = bushing_diameter, d2 = bushing_diameter - 2, $fn = 64);\n        \n        // Central hole\n        translate([0, 0, -1])\n            cylinder(h = bushing_height + 2, d = bushing_diameter - 2*wall_thickness, $fn = 64);\n    }\n}\n\n// Top flange for furniture mounting\nmodule top_flange() {\n    difference() {\n        // Main flange disc\n        cylinder(h = flange_thickness, d = flange_diameter, $fn = 64);\n        \n        // Counterbore for bolt head\n        translate([0, 0, -1])\n            cylinder(h = bolt_head_depth + 1, d = bolt_head_diameter, $fn = 32);\n        \n        // Through hole for bolt\n        translate([0, 0, -1])\n            cylinder(h = flange_thickness + 2, d = bolt_hole_diameter, $fn = 32);\n    }\n}\n\n// Grip ridges for hand tightening\nmodule grip_ridges() {\n    for(i = [0:grip_ridges-1]) {\n        rotate([0, 0, i * 360/grip_ridges])\n            translate([bushing_diameter/2 - ridge_height/2, 0, 0])\n                cube([ridge_height, 2, bushing_height], center = true);\n    }\n}\n\n// Furniture mounting tabs\nmodule mounting_tabs() {\n    // Tab 1\n    translate([flange_diameter/2 - 10, 0, flange_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 6, $fn = 16);\n    \n    // Tab 2 (opposite side)\n    translate([-flange_diameter/2 + 10, 0, flange_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 6, $fn = 16);\n    \n    // Tab 3 (90 degrees)\n    translate([0, flange_diameter/2 - 10, flange_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 6, $fn = 16);\n    \n    // Tab 4 (opposite)\n    translate([0, -flange_diameter/2 + 10, flange_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 6, $fn = 16);\n}\n\n// Structural reinforcement ribs\nmodule reinforcement_ribs() {\n    // Rib 1\n    translate([0, 0, bushing_height/2])\n        rotate([0, 90, 0])\n            cube([bushing_height, 3, wall_thickness*2], center = true);\n    \n    // Rib 2 (90 degrees)\n    translate([0, 0, bushing_height/2])\n        rotate([90, 0, 0])\n            cube([3, bushing_height, wall_thickness*2], center = true);\n}\n\n// Main assembly\nunion() {\n    // Main body with grip texture\n    union() {\n        main_body();\n        grip_ridges();\n    }\n    \n    // Top flange\n    translate([0, 0, bushing_height])\n        top_flange();\n    \n    // Mounting tabs\n    translate([0, 0, bushing_height])\n        mounting_tabs();\n    \n    // Reinforcement ribs inside flange\n    translate([0, 0, bushing_height])\n        reinforcement_ribs();\n}",
    "renders": true
  },
  {
    "sports_equipment": "piston",
    "openscad_code": "// Piston-styled side table\n// Overall height 120 mm, diameter 100 mm\n// Wall thickness 2 mm throughout for 3D-printability\n\nmodule piston_base() {\n    // Main cylinder body\n    difference() {\n        cylinder(h=100, d=100, $fn=100);\n        translate([0,0,2])\n            cylinder(h=98, d=96, $fn=100);  // 2 mm wall\n    }\n\n    // Internal ribs for stiffness (4 ribs)\n    for (a=[0:90:270]) {\n        rotate([0,0,a])\n            translate([0,0,2])\n                cube([4, 48, 96], center=true);\n    }\n}\n\nmodule piston_head() {\n    // Piston crown (table top)\n    difference() {\n        cylinder(h=6, d=104, $fn=100);              // Top plate slightly wider\n        translate([0,0,2])\n            cylinder(h=4, d=100, $fn=100);          // Recess for aesthetics\n    }\n\n    // Piston rings detail (decorative grooves)\n    for (h=[1.5, 3.5]) {\n        translate([0,0,h])\n            difference() {\n                cylinder(h=0.5, d=104, $fn=100);\n                cylinder(h=0.5, d=102, $fn=100);\n            }\n    }\n}\n\nmodule connecting_rod_base() {\n    // Simulated connecting rod big end as structural foot\n    difference() {\n        cylinder(h=20, d=40, $fn=60);\n        translate([0,0,2])\n            cylinder(h=18, d=36, $fn=60);\n    }\n\n    // Bolt heads detail (8 evenly spaced)\n    for (a=[0:45:315]) {\n        rotate([0,0,a])\n            translate([19,0,10])\n                rotate([0,90,0])\n                    cylinder(h=4, d=6, $fn=6);  // Hex bolt\n    }\n}\n\nmodule cooling_fins() {\n    // Cooling fins turned into decorative outer shell\n    for (h=[10:10:90]) {\n        translate([0,0,h])\n            difference() {\n                cylinder(h=3, d=104, $fn=100);\n                cylinder(h=3, d=98, $fn=100);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    piston_base();\n    \n    // Add decorative cooling fins\n    cooling_fins();\n    \n    // Foot detail\n    translate([0,0,-18])\n        connecting_rod_base();\n    \n    // Top surface (table top)\n    translate([0,0,100])\n        piston_head();\n}",
    "renders": true
  },
  {
    "sports_equipment": "camshaft",
    "openscad_code": "// Camshaft Furniture - Realistic Style (Medium Complexity)\n// A camshaft-inspired coffee table leg with functional joints\n\n// Global parameters\n$fn = 32;\nwall_thickness = 2;\nscale_factor = 1.2;\n\n// Main shaft dimensions\nshaft_length = 100;\nshaft_diameter = 12;\ncam_lobe_height = 8;\ncam_base_radius = 8;\n\n// Joint dimensions\njoint_diameter = 16;\njoint_length = 10;\nmounting_hole_diameter = 4;\nmounting_hole_depth = 8;\n\n// Base plate\nbase_plate_length = 40;\nbase_plate_width = 30;\nbase_plate_height = 5;\n\n// Support rib\nrib_width = 3;\nrib_height = 15;\nrib_length = 35;\n\n// Cam lobe module with realistic proportions\nmodule cam_lobe(rotation = 0, position = 0) {\n    translate([0, 0, position * 15]) {\n        rotate([0, 0, rotation]) {\n            difference() {\n                union() {\n                    // Main cam lobe body\n                    cylinder(h = cam_lobe_height, r = cam_base_radius + cam_lobe_height, center = true);\n                    \n                    // Transition fillet\n                    translate([0, 0, -cam_lobe_height/2 - 1])\n                        cylinder(h = 2, r1 = cam_base_radius + cam_lobe_height, r2 = cam_base_radius);\n                }\n                \n                // Central bore for shaft\n                cylinder(h = cam_lobe_height + 2, r = shaft_diameter/2, center = true);\n                \n                // Weight reduction cutouts\n                for(i = [30:60:360]) {\n                    rotate([0, 0, i]) {\n                        translate([cam_base_radius + 2, 0, 0])\n                            cylinder(h = cam_lobe_height, r = 2, center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Joint connector module\nmodule joint_connector() {\n    difference() {\n        // Main joint body\n        cylinder(h = joint_length, r = joint_diameter/2);\n        \n        // Central hole\n        cylinder(h = joint_length + 2, r = shaft_diameter/2 + wall_thickness);\n        \n        // Mounting holes\n        for(i = [45:90:315]) {\n            rotate([0, 0, i]) {\n                translate([joint_diameter/2 - 3, 0, joint_length/2])\n                    rotate([90, 0, 0])\n                        cylinder(h = mounting_hole_depth, r = mounting_hole_diameter/2);\n            }\n        }\n        \n        // Chamfer\n        translate([0, 0, -1])\n            cylinder(h = 2, r1 = joint_diameter/2 + 1, r2 = joint_diameter/2 - 1);\n    }\n}\n\n// Main shaft with keyway\nmodule main_shaft() {\n    difference() {\n        // Main shaft cylinder\n        cylinder(h = shaft_length, r = shaft_diameter/2, center = true);\n        \n        // Keyway slot\n        translate([0, shaft_diameter/2 - 1, 0])\n            cube([2, 2, shaft_length + 2], center = true);\n        \n        // Grip texture grooves\n        for(i = [-shaft_length/2 + 5:5:shaft_length/2 - 5]) {\n            translate([0, 0, i])\n                cylinder(h = 1, r = shaft_diameter/2 + 0.2);\n        }\n    }\n}\n\n// Base plate assembly\nmodule base_assembly() {\n    difference() {\n        union() {\n            // Main base plate\n            translate([0, 0, -base_plate_height/2])\n                cube([base_plate_length, base_plate_width, base_plate_height], center = true);\n            \n            // Support ribs\n            for(i = [-1, 1]) {\n                translate([i * 10, 0, -base_plate_height - rib_height/2])\n                    cube([rib_width, rib_length, rib_height], center = true);\n            }\n            \n            // Corner reinforcements\n            for(x = [-1, 1]) {\n                for(y = [-1, 1]) {\n                    translate([x * (base_plate_length/2 - 5), y * (base_plate_width/2 - 5), -base_plate_height])\n                        cylinder(h = 8, r = 5);\n                }\n            }\n        }\n        \n        // Mounting holes in base\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x * 15, y * 10, -base_plate_height - 2])\n                    cylinder(h = base_plate_height + 4, r = 2.5);\n            }\n        }\n    }\n}\n\n// Complete camshaft furniture leg assembly\nmodule camshaft_leg() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Base assembly\n            base_assembly();\n            \n            // Shaft holder\n            translate([0, 0, base_plate_height/2])\n                cylinder(h = joint_length, r = joint_diameter/2 + wall_thickness);\n            \n            // Main shaft\n            translate([0, 0, base_plate_height + joint_length/2])\n                rotate([90, 0, 0])\n                    main_shaft();\n            \n            // Cam lobes\n            for(i = [0:3]) {\n                rotate([90, 0, 0])\n                    cam_lobe(i * 90, i);\n            }\n            \n            // Top joint connector\n            translate([0, 0, base_plate_height + joint_length + shaft_length])\n                rotate([90, 0, 0])\n                    joint_connector();\n        }\n    }\n}\n\n// Render the model\ncamshaft_leg();",
    "renders": true
  },
  {
    "sports_equipment": "crankshaft",
    "openscad_code": "// Crankshaft coffee table\n// Dimensions in mm\nwall = 2;\nrod_d = 16;\njournal_d = 10;\ncrank_len = 30;\nweb_th = 6;\ntable_top = 120;\n\nmodule crank_web(x=0, angle=0){\n    translate([x,0,0])\n    rotate([0,0,angle])\n    difference(){\n        // main web\n        cube([web_th, rod_d+4, rod_d+4], center=true);\n        // journal hole\n        rotate([90,0,0])\n        cylinder(h=web_th+1, d=journal_d, center=true, $fn=32);\n        // main bearing hole\n        rotate([90,0,0])\n        translate([crank_len/2,0,0])\n        cylinder(h=web_th+1, d=rod_d, center=true, $fn=32);\n        rotate([90,0,0])\n        translate([-crank_len/2,0,0])\n        cylinder(h=web_th+1, d=rod_d, center=true, $fn=32);\n    }\n}\n\nmodule crank_rod(len, ang){\n    rotate([0,0,ang])\n    union(){\n        // main rod\n        rotate([90,0,0])\n        cylinder(h=len, d=rod_d, center=true, $fn=32);\n        // end journals\n        translate([0,0,len/2])\n        rotate([90,0,0])\n        cylinder(h=web_th, d=rod_d+2, center=true, $fn=32);\n        translate([0,0,-len/2])\n        rotate([90,0,0])\n        cylinder(h=web_th, d=rod_d+2, center=true, $fn=32);\n    }\n}\n\nmodule crankshaft(){\n    // central main bearing\n    rotate([90,0,0])\n    cylinder(h=web_th*4, d=rod_d+4, center=true, $fn=32);\n    \n    // left crank\n    crank_web(-web_th*2, 0);\n    crank_rod(crank_len, 0);\n    crank_web(-web_th*2-crank_len, 0);\n    \n    // middle crank 90 deg\n    crank_web(web_th*2, 90);\n    crank_rod(crank_len, 90);\n    crank_web(web_th*2+crank_len, 90);\n    \n    // right crank 180 deg\n    crank_web(web_th*2+crank_len*2+web_th*2, 180);\n    crank_rod(crank_len, 180);\n    crank_web(web_th*2+crank_len*2+web_th*2+crank_len, 180);\n    \n    // far right main bearing\n    translate([web_th*2+crank_len*2+web_th*2+crank_len*2+web_th*2,0,0])\n    rotate([90,0,0])\n    cylinder(h=web_th*4, d=rod_d+4, center=true, $fn=32);\n}\n\nmodule table_top(){\n    difference(){\n        // main top\n        cube([table_top, 60, 8], center=true);\n        // counterbore for crank attachment\n        translate([0,0,4])\n        cylinder(h=5, d=rod_d+8, center=true, $fn=32);\n    }\n}\n\nmodule legs(){\n    for(i=[-1,1]){\n        translate([i*table_top/2*0.7, 0, -20])\n        cube([8, 8, 40], center=true);\n    }\n}\n\nunion(){\n    // crankshaft base\n    crankshaft();\n    \n    // table assembly\n    translate([0,0,rod_d/2+4])\n    table_top();\n    \n    translate([0,0,rod_d/2+4+4])\n    legs();\n}",
    "renders": true
  },
  {
    "sports_equipment": "top",
    "openscad_code": "// Realistic spinning top with furniture-style turned post and ball-bearing tip\n// Overall height ~110 mm, max diameter ~60 mm, 2 mm walls for 3D printing\n\n$fn = 64;  // smooth curves for realism\n\n// ---------- Main assembly ----------\nunion() {\n    // Decorative finial on top\n    translate([0,0,105]) sphere(d=8);\n\n    // Turned wooden post (furniture spindle style)\n    turned_post();\n\n    // Toroidal flywheel ring (adds spin momentum)\n    translate([0,0,55]) difference() {\n        rotate_extrude() translate([22,0,0]) circle(r=5);  // ring body\n        rotate_extrude() translate([22,0,0]) circle(r=3);  // hollow core\n    }\n\n    // Conical spinning body\n    translate([0,0,20]) cylinder(h=35, r1=30, r2=15);\n\n    // Ball-bearing tip for low friction\n    translate([0,0,0]) sphere(d=8);\n}\n\n// ---------- Turned post module ----------\nmodule turned_post() {\n    difference() {\n        // Outer profile\n        rotate_extrude() polygon(points=[\n            [0,0], [4,0], [4,15], [3.5,25], [4.5,30],\n            [4,50], [5,60], [4.5,70], [3,80], [3,90], [0,100]\n        ]);\n\n        // Axial bore for 2 mm wall\n        translate([0,0,-1]) cylinder(h=102, d=4);\n    }\n}\n\n// ---------- Grip texture on cone body ----------\nmodule grip_texture() {\n    // Raised concentric rings for finger grip\n    for (z=[22:3:52]) {\n        translate([0,0,z]) difference() {\n            cylinder(h=1.2, r1=29.2-0.6*(z-22), r2=28.8-0.6*(z-22));\n            cylinder(h=1.4, r1=28.6-0.6*(z-22), r2=28.2-0.6*(z-22));\n        }\n    }\n}\n\n// Apply grip texture\ntranslate([0,0,0]) grip_texture();\n\n// ---------- Chamfers for printability ----------\ntranslate([0,0,20]) cylinder(h=2, r1=30.5, r2=30);  // top chamfer\ntranslate([0,0,18]) cylinder(h=2, r1=15, r2=15.5);   // bottom chamfer",
    "renders": true
  },
  {
    "sports_equipment": "kite",
    "openscad_code": "// Kite Chair - Realistic style, medium complexity\n// A dining chair inspired by kite shapes and aerodynamic lines\n\n// Overall dimensions\nchair_width = 110;\nchair_depth = 110;\nchair_height = 180;\nseat_height = 90;\nback_angle = 15; // degrees\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule kite_shape(width, height, thickness) {\n    // Create a diamond/kite shaped base\n    hull() {\n        cube([thickness, thickness, thickness], center=true);\n        translate([width/2, 0, 0]) cube([thickness, thickness, thickness], center=true);\n        translate([-width/2, 0, 0]) cube([thickness, thickness, thickness], center=true);\n        translate([0, height/2, 0]) cube([thickness, thickness, thickness], center=true);\n        translate([0, -height/2, 0]) cube([thickness, thickness, thickness], center=true);\n    }\n}\n\nmodule chair_back() {\n    // Main kite-shaped backrest\n    color(\"lightgray\")\n    translate([0, 0, seat_height + 20])\n    rotate([back_angle, 0, 0])\n    linear_extrude(height=wall_thickness)\n    kite_shape(chair_width * 0.8, chair_height - seat_height - 20, wall_thickness);\n    \n    // Support struts\n    for(i = [-1, 0, 1]) {\n        translate([i * 25, -10, seat_height + 10])\n        rotate([back_angle, 0, 0])\n        cylinder(h=50, r=wall_thickness, $fn=8);\n    }\n}\n\nmodule chair_seat() {\n    // Kite-shaped seat\n    color(\"lightblue\")\n    translate([0, 0, seat_height])\n    linear_extrude(height=wall_thickness)\n    kite_shape(chair_width * 0.7, chair_depth * 0.7, wall_thickness);\n    \n    // Seat support frame\n    color(\"gray\")\n    translate([0, 0, seat_height - wall_thickness])\n    linear_extrude(height=wall_thickness)\n    kite_shape(chair_width * 0.65, chair_depth * 0.65, wall_thickness);\n}\n\nmodule chair_legs() {\n    // Four legs in kite configuration\n    leg_positions = [\n        [30, 30, 0],\n        [-30, 30, 0],\n        [30, -30, 0],\n        [-30, -30, 0]\n    ];\n    \n    for(pos = leg_positions) {\n        translate(pos)\n        cylinder(h=seat_height, r=wall_thickness * 2, $fn=8);\n    }\n    \n    // Cross bracing\n    color(\"darkgray\")\n    // Front to back\n    translate([0, 0, seat_height/2])\n    cube([wall_thickness, 60, wall_thickness]);\n    \n    // Side to side\n    translate([0, 0, seat_height/2])\n    cube([60, wall_thickness, wall_thickness]);\n}\n\nmodule armrests() {\n    // Aerodynamic armrests\n    color(\"lightgray\")\n    for(side = [-1, 1]) {\n        translate([side * 45, 0, seat_height + 15])\n        rotate([0, 0, 45 * side])\n        linear_extrude(height=wall_thickness)\n        kite_shape(40, 15, wall_thickness);\n        \n        // Support posts\n        translate([side * 45, 25, seat_height + 5])\n        cylinder(h=20, r=wall_thickness, $fn=8);\n    }\n}\n\n// Assemble the chair\nunion() {\n    chair_back();\n    chair_seat();\n    chair_legs();\n    armrests();\n}\n\n// Add feet pads for stability\nfor(pos = [[30, 30, 0], [-30, 30, 0], [30, -30, 0], [-30, -30, 0]]) {\n    translate([pos[0], pos[1], 0])\n    cylinder(h=wall_thickness, r=wall_thickness * 3, $fn=16);\n}",
    "renders": true
  },
  {
    "sports_equipment": "jacks",
    "openscad_code": "// Jacks Furniture - Realistic Style\n// A decorative table inspired by the classic jacks toy\n\n// Main parameters\n$fn = 32;\nleg_length = 60;\nsphere_radius = 25;\narm_length = 40;\ntable_top_thickness = 8;\ntable_top_radius = 80;\nwall_thickness = 2;\n\nmodule jack_sphere() {\n    // Hollow sphere with 2mm walls for 3D printing\n    difference() {\n        sphere(r = sphere_radius);\n        sphere(r = sphere_radius - wall_thickness);\n    }\n}\n\nmodule jack_arm() {\n    // Cylindrical arm with rounded ends\n    hull() {\n        translate([0, 0, arm_length/2]) sphere(r = 8);\n        translate([0, 0, -arm_length/2]) sphere(r = 8);\n    }\n    // Hollow cylinder\n    difference() {\n        cylinder(h = arm_length, r1 = 8, r2 = 8);\n        cylinder(h = arm_length + 0.1, r1 = 6, r2 = 6);\n    }\n}\n\nmodule jack_component() {\n    // Single jack component with sphere and 6 arms\n    union() {\n        // Central sphere\n        jack_sphere();\n        \n        // Six arms in 3D space\n        for(i = [0:5]) {\n            // Calculate arm positions using spherical coordinates\n            theta = i * 60;  // Around Z axis\n            phi = (i % 2) * 90;  // Alternate between XY plane and Z axis\n            \n            // Rotate and position each arm\n            rotate([0, phi, theta])\n                translate([0, 0, sphere_radius + arm_length/2])\n                    jack_arm();\n        }\n    }\n}\n\nmodule table_top() {\n    // Circular table top with slight bevel\n    difference() {\n        // Main top\n        cylinder(h = table_top_thickness, r = table_top_radius);\n        // Hollow center\n        cylinder(h = table_top_thickness + 0.1, r = table_top_radius - wall_thickness);\n    }\n    \n    // Top surface detail - subtle concentric rings for grip\n    for(i = [1:4]) {\n        radius = table_top_radius - (i * 8);\n        translate([0, 0, table_top_thickness - 1])\n            cylinder(h = 1, r = radius, $fn = 64);\n    }\n}\n\nmodule jack_leg() {\n    // Single jack leg with joint\n    // Base sphere\n    translate([0, 0, leg_length/2]) jack_sphere();\n    \n    // Leg shaft\n    difference() {\n        cylinder(h = leg_length - sphere_radius, r = 6);\n        cylinder(h = leg_length - sphere_radius + 0.1, r = 4);\n    }\n    \n    // Foot pad for stability\n    translate([0, 0, -leg_length/2 + 5])\n        cylinder(h = 5, r = 8);\n}\n\nmodule jack_base() {\n    // Four jack legs arranged symmetrically\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([30, 30, 0])\n                rotate([15, 0, 0])\n                    jack_leg();\n    }\n}\n\n// Main assembly\nunion() {\n    // Table top\n    translate([0, 0, leg_length + sphere_radius + table_top_thickness/2])\n        table_top();\n    \n    // Central jack structure\n    translate([0, 0, leg_length + sphere_radius])\n        jack_component();\n    \n    // Supporting base\n    translate([0, 0, leg_length/2])\n        jack_base();\n}",
    "renders": true
  },
  {
    "sports_equipment": "marbles",
    "openscad_code": "// Marbles Coffee Table\n// Realistic style, medium complexity\n// Overall dimensions: 200 x 120 x 45 mm (scaled down for 3D printing)\n\n// Parameters\ntable_length = 100;\ntable_width = 60;\ntable_height = 22.5;\nleg_thickness = 3;\ntop_thickness = 3;\nmarble_radius = 5;\nmarble_rows = 5;\nmarble_cols = 8;\nsupport_width = 4;\n\n// Main table structure\nmodule marble_table() {\n    // Table top with marble inlays\n    difference() {\n        // Main top\n        translate([0, 0, table_height - top_thickness/2])\n            cube([table_length, table_width, top_thickness], center=true);\n        \n        // Marble recesses\n        for (i = [0:marble_cols-1]) {\n            for (j = [0:marble_rows-1]) {\n                translate([\n                    -table_length/2 + 15 + i * 10,\n                    -table_width/2 + 10 + j * 10,\n                    table_height - top_thickness\n                ])\n                    sphere(r=marble_radius, $fn=20);\n            }\n        }\n    }\n    \n    // Marbles in recesses\n    for (i = [0:marble_cols-1]) {\n        for (j = [0:marble_rows-1]) {\n            translate([\n                -table_length/2 + 15 + i * 10,\n                -table_width/2 + 10 + j * 10,\n                table_height - top_thickness + marble_radius - 0.5\n            ])\n                color(\"white\")\n                    sphere(r=marble_radius - 0.5, $fn=20);\n        }\n    }\n    \n    // Table legs with marble accents\n    module leg(x, y) {\n        difference() {\n            // Main leg\n            translate([x, y, table_height/2 - top_thickness/2])\n                cube([leg_thickness, leg_thickness, table_height - top_thickness], center=true);\n            \n            // Marble cavity\n            translate([x, y, table_height/4])\n                sphere(r=marble_radius - 0.5, $fn=20);\n        }\n        \n        // Marble in leg\n        translate([x, y, table_height/4])\n            color(\"red\")\n                sphere(r=marble_radius - 1, $fn=20);\n    }\n    \n    // Position legs\n    leg(-table_length/2 + leg_thickness/2, -table_width/2 + leg_thickness/2);\n    leg(table_length/2 - leg_thickness/2, -table_width/2 + leg_thickness/2);\n    leg(-table_length/2 + leg_thickness/2, table_width/2 - leg_thickness/2);\n    leg(table_length/2 - leg_thickness/2, table_width/2 - leg_thickness/2);\n    \n    // Lower support frame with marble trim\n    // Long supports\n    translate([0, -table_width/2 + support_width/2, table_height/4])\n        cube([table_length - leg_thickness*2, support_width, leg_thickness], center=true);\n    translate([0, table_width/2 - support_width/2, table_height/4])\n        cube([table_length - leg_thickness*2, support_width, leg_thickness], center=true);\n    \n    // Short supports\n    translate([-table_length/2 + support_width/2, 0, table_height/4])\n        cube([support_width, table_width - leg_thickness*2, leg_thickness], center=true);\n    translate([table_length/2 - support_width/2, 0, table_height/4])\n        cube([support_width, table_width - leg_thickness*2, leg_thickness], center=true);\n    \n    // Decorative marbles on support frame\n    for (i = [1:3]) {\n        translate([\n            -table_length/2 + 15 + i * 20,\n            -table_width/2 + support_width/2,\n            table_height/4 + leg_thickness/2 + marble_radius\n        ])\n            color(\"blue\")\n                sphere(r=marble_radius - 1.5, $fn=20);\n        \n        translate([\n            -table_length/2 + 15 + i * 20,\n            table_width/2 - support_width/2,\n            table_height/4 + leg_thickness/2 + marble_radius\n        ])\n            color(\"blue\")\n                sphere(r=marble_radius - 1.5, $fn=20);\n    }\n}\n\n// Render the table\nmarble_table();",
    "renders": true
  },
  {
    "sports_equipment": "hoop",
    "openscad_code": "// Hoop-back chair in realistic style\n// Seat diameter: 100 mm, total height: 120 mm\n// Print-friendly: 2 mm walls, no steep overhangs\n\n// Parameters\nseat_d = 100;           // seat diameter\nseat_h = 8;             // seat thickness\nleg_h = 60;             // leg height\nhoop_r = 60;            // hoop back radius\nhoop_t = 8;             // hoop thickness\nhoop_w = 4;             // hoop width\nleg_t = 6;              // leg thickness\nbraces = 4;             // number of bracing legs under seat\n\nmodule chair() {\n    // Seat disk\n    difference() {\n        cylinder(h = seat_h, d = seat_d, $fn = 60);\n        // Lighten with concentric grooves\n        for (i = [1:2:5])\n            translate([0, 0, -0.1])\n                cylinder(h = seat_h + 0.2, d = seat_d - i*10, $fn = 60);\n    }\n\n    // Legs\n    for (a = [0:90:270])\n        rotate([0, 0, a])\n            translate([seat_d/2 * 0.7, 0, -leg_h])\n                cube([leg_t, leg_t, leg_h], center = true);\n\n    // Hoop back\n    difference() {\n        // Outer ring\n        rotate_extrude(angle = 180, $fn = 100)\n            translate([hoop_r, 0, 0])\n                square([hoop_w, hoop_t]);\n        // Inner cutout\n        rotate_extrude(angle = 180, $fn = 100)\n            translate([hoop_r - 2, 0, 0])\n                square([hoop_w + 2, hoop_t + 2]);\n    }\n\n    // Hoop posts\n    for (x = [-hoop_r + hoop_w/2, hoop_r - hoop_w/2])\n        translate([x, 0, seat_h])\n            rotate([90, 0, 0])\n                cylinder(h = hoop_r - seat_h, d = leg_t, $fn = 20);\n\n    // Bracing struts under seat\n    for (a = [45:90:315])\n        rotate([0, 0, a])\n            translate([seat_d/2 * 0.35, 0, -leg_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h = seat_d * 0.7, d = 3, $fn = 8);\n\n    // Seat surface texture: radial grooves\n    for (a = [0:15:360])\n        rotate([0, 0, a])\n            translate([seat_d/2 - 5, 0, seat_h/2])\n                cube([10, 1.5, seat_h + 0.2], center = true);\n}\n\nchair();",
    "renders": true
  },
  {
    "sports_equipment": "whip",
    "openscad_code": "// Whip Furniture - Medium Complexity\n// Realistic style, 3D printable whip with furniture characteristics\n\n// Parameters\nhandle_length = 80;\nhandle_diameter = 12;\nwhip_length = 120;\nwhip_thickness = 4;\njoint_thickness = 3;\ngrip_ring_count = 8;\n\n// Main handle module\nmodule handle() {\n    difference() {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings - subtracted for texture\n        for(i = [1:grip_ring_count-1]) {\n            translate([0, 0, i * (handle_length/grip_ring_count)])\n            cylinder(h=2, d=handle_diameter + 1, $fn=32);\n        }\n        \n        // End cap hole for hanging\n        translate([0, 0, handle_length])\n        rotate([180, 0, 0])\n        cylinder(h=5, d=6, $fn=32);\n    }\n    \n    // Grip rings - added back as ridges\n    for(i = [1:grip_ring_count-1]) {\n        translate([0, 0, i * (handle_length/grip_ring_count) - 1])\n        cylinder(h=2, d=handle_diameter + 2, $fn=32);\n    }\n    \n    // End cap\n    translate([0, 0, handle_length])\n    cylinder(h=3, d=handle_diameter + 2, $fn=32);\n}\n\n// Whip segments with joints\nmodule whip_segment(length, thickness, taper) {\n    // Main whip body\n    hull() {\n        translate([0, 0, 0])\n        sphere(d=thickness, $fn=16);\n        \n        translate([0, 0, length])\n        sphere(d=thickness * taper, $fn=16);\n    }\n    \n    // Structural joint\n    if(length > 10) {\n        translate([0, 0, length/2])\n        cylinder(h=joint_thickness, d=thickness * 0.8, $fn=16);\n    }\n}\n\n// Main whip assembly\nmodule whip_assembly() {\n    union() {\n        // Handle\n        translate([0, 0, 0])\n        handle();\n        \n        // Whip segments with progressive tapering\n        current_length = whip_length;\n        current_thickness = whip_thickness;\n        current_pos = handle_length;\n        \n        // First segment\n        translate([0, 0, current_pos])\n        whip_segment(current_length * 0.3, current_thickness, 0.8);\n        current_pos += current_length * 0.3;\n        current_thickness *= 0.8;\n        \n        // Second segment\n        translate([0, 0, current_pos])\n        whip_segment(current_length * 0.3, current_thickness, 0.7);\n        current_pos += current_length * 0.3;\n        current_thickness *= 0.7;\n        \n        // Third segment\n        translate([0, 0, current_pos])\n        whip_segment(current_length * 0.4, current_thickness, 0.5);\n        current_pos += current_length * 0.4;\n        \n        // Tip detail\n        translate([0, 0, current_pos])\n        sphere(d=current_thickness * 0.5, $fn=16);\n    }\n}\n\n// Base support structure for furniture mounting\nmodule base_support() {\n    difference() {\n        // Main base\n        translate([-15, -15, -5])\n        cube([30, 30, 5]);\n        \n        // Mounting hole\n        translate([0, 0, -2.5])\n        cylinder(h=10, d=6, $fn=32);\n    }\n    \n    // Reinforcement ribs\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n        translate([7, 0, -2.5])\n        cube([10, 2, 3]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main whip\n    whip_assembly();\n    \n    // Optional base support (can be removed for standalone whip)\n    // translate([0, 0, -5])\n    // base_support();\n}\n\n// Scale for 3D printing\nscale([1, 1, 1])",
    "renders": true
  },
  {
    "sports_equipment": "bow",
    "openscad_code": "// Realistic Bow Furniture Item - Medium Complexity\n// Overall dimensions: ~130mm long x 20mm wide x 5mm thick\n\n// Bow parameters\nbow_length = 130;\nbow_width = 20;\nbow_thickness = 5;\ngrip_length = 40;\ngrip_width = 12;\ngrip_thickness = 6;\n\n// String parameters\nstring_diameter = 1.5;\nstring_tension = 0.8;\n\n// Limb parameters\nlimb_taper = 0.6;\nlimb_curve = 25;\n\n// Arrow rest parameters\nrest_width = 8;\nrest_height = 3;\nrest_length = 15;\n\n// Sight pin parameters\npin_diameter = 2;\npin_height = 5;\npin_count = 3;\n\nmodule bow_grip() {\n    // Main grip body with ergonomic shaping\n    difference() {\n        // Base grip shape\n        translate([0, 0, -grip_thickness/2])\n            cube([grip_length, grip_width, grip_thickness], center=true);\n        \n        // Finger grooves\n        for (i = [-1, 0, 1]) {\n            translate([i * 8, 0, -grip_thickness/2 + 1])\n                rotate([0, 90, 0])\n                    cylinder(h=grip_width, r=2, $fn=20);\n        }\n        \n        // Thumb rest indentation\n        translate([grip_length/2 - 8, 0, grip_thickness/2 - 1])\n            cube([6, grip_width, 2], center=true);\n    }\n    \n    // Grip texture ridges\n    for (i = [-2:2]) {\n        translate([i * 8, 0, grip_thickness/2])\n            cube([4, grip_width - 2, 0.5], center=true);\n    }\n}\n\nmodule upper_limb() {\n    // Tapered limb with recurve\n    translate([grip_length/2 + 5, 0, 0])\n        rotate([0, limb_curve, 0])\n            linear_extrude(height=bow_thickness, convexity=10)\n                polygon(points=[\n                    [0, -bow_width/2],\n                    [0, bow_width/2],\n                    [bow_length/2 - grip_length/2 - 10, bow_width/2 * limb_taper],\n                    [bow_length/2 - grip_length/2 - 10, -bow_width/2 * limb_taper]\n                ]);\n}\n\nmodule lower_limb() {\n    mirror([0, 0, 1])\n        upper_limb();\n}\n\nmodule bow_string() {\n    // String from upper limb tip to lower limb tip\n    hull() {\n        // Upper attachment\n        translate([bow_length/2 - 5, 0, bow_thickness/2])\n            cylinder(h=string_diameter, r=string_diameter/2, $fn=8);\n        \n        // Lower attachment  \n        translate([-bow_length/2 + 5, 0, bow_thickness/2])\n            cylinder(h=string_diameter, r=string_diameter/2, $fn=8);\n    }\n    \n    // Serving (string reinforcement)\n    translate([0, 0, bow_thickness/2 - string_diameter/2])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=string_diameter * 1.2, center=true, $fn=16);\n}\n\nmodule arrow_rest() {\n    // Elevated arrow rest\n    translate([grip_length/2 - 5, grip_width/2 + rest_width/2, -rest_height/2])\n        cube([rest_length, rest_width, rest_height]);\n    \n    // Rest support brace\n    translate([grip_length/2 + 5, grip_width/2, -rest_height - 1])\n        cube([5, rest_width/2, 3]);\n}\n\nmodule sight_pins() {\n    // Sight bracket\n    translate([grip_length/2 - 10, -grip_width/2 - 10, bow_thickness/2])\n        cube([20, 10, 2]);\n    \n    // Individual pins\n    for (i = [0:pin_count-1]) {\n        translate([grip_length/2 - 15 + i * 5, -grip_width/2 - 10, bow_thickness/2 + pin_height/2])\n            cylinder(h=pin_height, r=pin_diameter/2, $fn=12);\n    }\n}\n\n// Main assembly\nunion() {\n    // Grip assembly\n    bow_grip();\n    \n    // Limbs\n    upper_limb();\n    lower_limb();\n    \n    // String\n    color(\"silver\")\n        bow_string();\n    \n    // Arrow rest\n    arrow_rest();\n    \n    // Sight pins\n    sight_pins();\n    \n    // Limb reinforcement tips\n    translate([bow_length/2 - 3, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=bow_width, r=3, $fn=20);\n    \n    translate([-bow_length/2 + 3, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=bow_width, r=3, $fn=20);\n}",
    "renders": true
  },
  {
    "sports_equipment": "sword",
    "openscad_code": "// Realistic sword furniture piece – wall-mounted display sword\n// ~120 mm total length, 3D-printable with 2 mm walls and no severe overhangs\n// All dimensions in mm\n\nblade_length  = 90;\nblade_width   = 18;\nblade_thick   = 2.5;\n\nguard_width   = 40;\nguard_thick   = 4;\n\ngrip_length   = 28;\ngrip_diam     = 12;\n\npommel_diam   = 18;\npommel_length = 12;\n\nwall_thick    = 2;           // generic wall thickness for printability\n$fn = 32;                    // nice curves without overload\n\n// ---------- Blade ----------\nmodule blade() {\n    // fuller (groove)\n    difference() {\n        // main blade\n        linear_extrude(height = blade_length, center = true, scale = [0.1,1])\n            polygon([[0,0],[blade_width/2,0],[blade_width/2-4, blade_length/2],[0,blade_length]]);\n        // fuller groove\n        translate([0,0,blade_length/2-blade_thick/2-0.1])\n            cube([blade_width*0.3, blade_length*0.7, blade_thick+0.2], center=true);\n    }\n    // add thickness\n    linear_extrude(height = blade_thick, center = true, scale = [1,1])\n        offset(r = wall_thick)\n            polygon([[0,0],[blade_width/2,0],[blade_width/2-4, blade_length/2],[0,blade_length]]);\n}\n\n// ---------- Guard ----------\nmodule guard() {\n    difference() {\n        union() {\n            // main bar\n            cube([guard_width, guard_thick, blade_thick*2], center=true);\n            // decorative disks\n            for(i=[-1,1])\n                translate([i*guard_width/3, 0, 0])\n                    cylinder(h=guard_thick+1, d=guard_thick*2.2, center=true);\n        }\n        // central hole for tang\n        cylinder(h=guard_thick+2, d=grip_diam, center=true);\n    }\n}\n\n// ---------- Grip ----------\nmodule grip() {\n    // core\n    cylinder(h=grip_length, d=grip_diam, center=true);\n    // grip rings\n    for(z=[-grip_length/2+4 : 5 : grip_length/2-4])\n        translate([0,0,z])\n            cylinder(h=2, d=grip_diam+2, center=true);\n}\n\n// ---------- Pommel ----------\nmodule pommel() {\n    union() {\n        cylinder(h=pommel_length*0.6, d=pommel_diam, center=true);\n        translate([0,0,pommel_length/2])\n            cylinder(h=pommel_length*0.4, d=pommel_diam*0.8);\n    }\n}\n\n// ---------- Assembly ----------\nmodule sword() {\n    union() {\n        // blade\n        translate([0,0,blade_length/2])\n            blade();\n        // guard\n        translate([0,0,blade_length])\n            guard();\n        // grip\n        translate([0,0,blade_length+grip_length/2])\n            grip();\n        // pommel\n        translate([0,0,blade_length+grip_length+pommel_length/2])\n            pommel();\n    }\n}\n\n// Display the sword horizontally, guard down\nrotate([0,90,0])\n    sword();",
    "renders": true
  },
  {
    "sports_equipment": "shield",
    "openscad_code": "// Realistic shield furniture - medium complexity OpenSCAD design\n// Overall dimensions: 120mm height, 80mm width, 30mm depth\n\nmodule shield_body() {\n    // Main shield plate - slightly curved\n    difference() {\n        // Curved back plate\n        translate([0, 0, -15])\n        scale([1, 1, 0.3])\n        sphere(d=100, $fn=64);\n        \n        // Cut to shield shape\n        translate([0, 0, -25])\n        cube([120, 80, 20], center=true);\n        \n        // Taper bottom\n        translate([0, -50, -25])\n        rotate([0, 10, 0])\n        cube([120, 100, 20], center=true);\n    }\n}\n\nmodule shield_rim() {\n    // Metal rim around edge\n    difference() {\n        // Outer rim\n        translate([0, 0, 0])\n        linear_extrude(height=4)\n        offset(delta=2)\n        polygon([\n            [-40, -60], [40, -60], [45, -30], [45, 30], [40, 60],\n            [0, 65], [-40, 60], [-45, 30], [-45, -30]\n        ]);\n        \n        // Inner cutout\n        translate([0, 0, -1])\n        linear_extrude(height=6)\n        polygon([\n            [-38, -58], [38, -58], [43, -28], [43, 28], [38, 58],\n            [0, 63], [-38, 58], [-43, 28], [-43, -28]\n        ]);\n    }\n}\n\nmodule handle_assembly() {\n    // Central handle grip\n    translate([0, -20, -10])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=60, d=25, $fn=32);\n        // Grip texture\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5])\n            translate([0, 0, -1])\n            cube([25, 3, 62], center=true);\n        }\n    }\n    \n    // Handle brackets\n    for(pos = [-20, 20]) {\n        translate([0, pos, -5])\n        cube([8, 4, 10], center=true);\n    }\n}\n\nmodule boss_detail() {\n    // Central dome boss\n    difference() {\n        translate([0, 0, 8])\n        scale([1, 1, 0.6])\n        sphere(d=35, $fn=32);\n        \n        // Rivet details\n        for(angle = [0:45:315]) {\n            rotate([0, 0, angle])\n            translate([12, 0, 7])\n            cylinder(h=3, d=4, $fn=12);\n        }\n    }\n}\n\nmodule support_struts() {\n    // Structural support struts on back\n    for(y = [-30, 0, 30]) {\n        translate([0, y, -12])\n        rotate([0, 10, 0])\n        cube([4, 8, 20], center=true);\n    }\n}\n\nmodule mounting_holes() {\n    // Wall mounting points\n    for(pos = [[-30, 40], [30, 40]]) {\n        translate([pos[0], pos[1], 10])\n        rotate([90, 0, 0])\n        cylinder(h=20, d=5, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    // Main shield\n    shield_body();\n    \n    // Rim detail\n    translate([0, 0, 2])\n    shield_rim();\n    \n    // Boss\n    boss_detail();\n    \n    // Back side details\n    translate([0, 0, 0])\n    handle_assembly();\n    \n    translate([0, 0, 0])\n    support_struts();\n    \n    // Mounting hardware\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "sports_equipment": "lance",
    "openscad_code": "// OpenSCAD code for a realistic lance furniture item (wall-mounted display lance)\n// Total length 42 cm (420 mm) but scaled to 120 mm for 3D printing\n\nlance_scale = 120 / 420;\n\nmodule lance() {\n    // Main shaft with 2 mm wall thickness\n    difference() {\n        cylinder(h = 420 * lance_scale, d = 25 * lance_scale, center = true);\n        cylinder(h = 422 * lance_scale, d = 21 * lance_scale, center = true);\n    }\n\n    // Grip section with raised rings for texture\n    translate([0, 0, -150 * lance_scale]) {\n        for (i = [0:5]) {\n            translate([0, 0, i * 15 * lance_scale]) {\n                cylinder(h = 5 * lance_scale, d = 28 * lance_scale);\n            }\n        }\n    }\n\n    // Spear head - conical tip with reinforcing ridge\n    translate([0, 0, 220 * lance_scale]) {\n        // Main point\n        cylinder(h = 60 * lance_scale, d1 = 25 * lance_scale, d2 = 0);\n        \n        // Ridge reinforcement\n        cylinder(h = 15 * lance_scale, d = 30 * lance_scale);\n    }\n\n    // Cross guard / hand guard\n    translate([0, 0, 180 * lance_scale]) {\n        difference() {\n            cube([50 * lance_scale, 5 * lance_scale, 15 * lance_scale], center = true);\n            cube([46 * lance_scale, 6 * lance_scale, 16 * lance_scale], center = true);\n        }\n    }\n\n    // Wall mount bracket\n    translate([0, -15 * lance_scale, -200 * lance_scale]) {\n        union() {\n            // Main bracket\n            cube([35 * lance_scale, 30 * lance_scale, 8 * lance_scale], center = true);\n            \n            // Screw holes\n            for (x = [-10, 10]) {\n                translate([x * lance_scale, -10 * lance_scale, 0]) {\n                    cylinder(h = 10 * lance_scale, d = 4 * lance_scale);\n                }\n            }\n        }\n    }\n\n    // Decorative collar near base\n    translate([0, 0, -200 * lance_scale]) {\n        cylinder(h = 10 * lance_scale, d = 30 * lance_scale);\n        translate([0, 0, -5 * lance_scale]) {\n            cylinder(h = 5 * lance_scale, d = 32 * lance_scale);\n        }\n    }\n\n    // Engraved rings for decoration\n    for (z = [-100, -50, 0, 50, 100]) {\n        translate([0, 0, z * lance_scale]) {\n            difference() {\n                cylinder(h = 3 * lance_scale, d = 26 * lance_scale);\n                cylinder(h = 4 * lance_scale, d = 24 * lance_scale);\n            }\n        }\n    }\n}\n\n// Display stand base for furniture use\nmodule stand() {\n    // Base plate\n    translate([0, 0, -210 * lance_scale]) {\n        cube([80 * lance_scale, 40 * lance_scale, 5 * lance_scale], center = true);\n        \n        // Mounting posts\n        for (x = [-25, 25]) {\n            translate([x * lance_scale, 0, 2.5 * lance_scale]) {\n                cylinder(h = 15 * lance_scale, d = 8 * lance_scale);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    lance();\n    stand();\n}",
    "renders": true
  },
  {
    "sports_equipment": "spear",
    "openscad_code": "// Spear Furniture - Realistic Medium Complexity\n// Overall length: 150mm, diameter: 20mm at widest\n\n// Constants\nshaft_d = 12;\nshaft_l = 120;\nhead_l = 30;\nguard_w = 25;\nguard_t = 3;\ngrip_l = 50;\ngrip_d = 16;\nwall = 2;\n\nmodule shaft() {\n    // Main shaft with hollow core\n    difference() {\n        cylinder(h=shaft_l, d=shaft_d, $fn=32);\n        translate([0, 0, -1])\n            cylinder(h=shaft_l+2, d=shaft_d-wall*2, $fn=32);\n    }\n}\n\nmodule spear_head() {\n    // Triangular spear head with central ridge\n    union() {\n        // Main blade - tapered triangular prism\n        linear_extrude(height=head_l, scale=[0.1, 1], center=false)\n            polygon(points=[[0,0], [head_l/2, 0], [0, head_l/4]]);\n        \n        mirror([0, 1, 0])\n            linear_extrude(height=head_l, scale=[0.1, 1], center=false)\n                polygon(points=[[0,0], [head_l/2, 0], [0, head_l/4]]);\n        \n        // Central reinforcing ridge\n        translate([0, -head_l/8, head_l/2])\n            rotate([0, 90, 0])\n                cylinder(h=head_l/4, d=2, $fn=8);\n    }\n}\n\nmodule hand_guard() {\n    // Circular guard plate\n    difference() {\n        cylinder(h=guard_t, d=guard_w, $fn=64);\n        translate([0, 0, -1])\n            cylinder(h=guard_t+2, d=shaft_d, $fn=32);\n    }\n    \n    // Reinforcement ribs\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n            translate([guard_w/4, 0, 0])\n                cube([guard_w/2, 2, guard_t], center=true);\n    }\n}\n\nmodule grip_texture() {\n    // Textured grip area with rings\n    difference() {\n        translate([0, 0, shaft_l-grip_l])\n            cylinder(h=grip_l, d=grip_d, $fn=32);\n            \n        // Grip grooves\n        for(i=[0:5:grip_l-5]) {\n            translate([0, 0, shaft_l-grip_l+i])\n                cylinder(h=2, d=grip_d-2, $fn=32);\n        }\n        \n        // Hollow core continues through grip\n        translate([0, 0, shaft_l-grip_l-1])\n            cylinder(h=grip_l+2, d=grip_d-wall*2, $fn=32);\n    }\n}\n\nmodule butt_cap() {\n    // Weighted butt cap\n    difference() {\n        translate([0, 0, -5])\n            cylinder(h=10, d=shaft_d+4, $fn=32);\n            \n        // Tapered end\n        translate([0, 0, -5])\n            cylinder(h=10, d1=shaft_d+4, d2=shaft_d, $fn=32);\n            \n        // Hollow interior\n        translate([0, 0, -6])\n            cylinder(h=12, d=shaft_d, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Main shaft\n    shaft();\n    \n    // Spear head\n    translate([0, 0, shaft_l])\n        rotate([0, 90, 0])\n            spear_head();\n    \n    // Hand guard\n    translate([0, 0, shaft_l-grip_l-5])\n        hand_guard();\n    \n    // Textured grip\n    grip_texture();\n    \n    // Butt cap\n    butt_cap();\n}",
    "renders": true
  },
  {
    "sports_equipment": "axe",
    "openscad_code": "// Axe furniture piece - stylized shelf bracket in shape of an axe\n// Overall size ~120mm, designed for 3D printing with 2mm walls\n\n$fn = 32;  // Resolution for curves\n\n// Main parameters\nhandle_length = 90;\nhandle_diameter = 12;\nblade_length = 60;\nblade_width = 35;\nblade_thickness = 5;\nwall_thickness = 2;\n\nmodule axe_bracket() {\n    // Handle - hollow cylinder for cable management\n    difference() {\n        cylinder(h=handle_length, d=handle_diameter, center=false);\n        translate([0, 0, wall_thickness]) \n            cylinder(h=handle_length-2*wall_thickness, d=handle_diameter-2*wall_thickness, center=false);\n    }\n    \n    // Grip texture - rings around handle\n    for(i = [1:6:handle_length-wall_thickness]) {\n        translate([0, 0, i]) \n            cylinder(h=3, d=handle_diameter+2, center=false);\n    }\n    \n    // Handle end cap with mounting hole\n    translate([0, 0, handle_length]) {\n        difference() {\n            cylinder(h=8, d=handle_diameter+6, center=false);\n            translate([0, 0, wall_thickness]) \n                cylinder(h=6, d=handle_diameter, center=false);\n            translate([0, 0, -1]) \n                cylinder(h=10, d=4, center=false);  // Screw hole\n        }\n    }\n    \n    // Axe head connection to handle\n    translate([0, 0, handle_length-15]) {\n        difference() {\n            cylinder(h=20, d=handle_diameter+8, center=false);\n            translate([0, 0, wall_thickness]) \n                cylinder(h=20-2*wall_thickness, d=handle_diameter+4, center=false);\n        }\n    }\n    \n    // Axe blade - shelf support surface\n    translate([0, handle_diameter/2 + blade_width/2, handle_length-35]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                // Main blade shape\n                union() {\n                    // Blade body\n                    cube([blade_length, blade_width, blade_thickness], center=true);\n                    \n                    // Curved top edge\n                    translate([blade_length/2-10, 0, blade_thickness/2]) \n                        rotate([0, 90, 0]) \n                            cylinder(h=20, r=10, center=true);\n                }\n                \n                // Lightening holes in blade\n                for(x = [-20:15:20]) {\n                    for(y = [-10:10:10]) {\n                        translate([x, y, 0]) \n                            cylinder(h=blade_thickness+1, d=6, center=true);\n                    }\n                }\n                \n                // Mounting slot\n                translate([0, 0, blade_thickness/2]) \n                    cube([blade_length-20, 8, blade_thickness+1], center=true);\n            }\n        }\n    }\n    \n    // Decorative edge reinforcement\n    translate([0, handle_diameter/2 + blade_width/2 + blade_thickness/2 + 1, handle_length-35]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cube([blade_length+10, 3, blade_thickness+4], center=true);\n                translate([0, 0, -2]) \n                    cube([blade_length+15, 5, blade_thickness], center=true);\n            }\n        }\n    }\n    \n    // Wall mounting bracket\n    translate([0, -handle_diameter/2 - 10, handle_length/2]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                // Main bracket\n                cube([20, handle_length-20, 15], center=true);\n                \n                // Screw holes\n                for(z = [-30:20:30]) {\n                    translate([0, z, 0]) \n                        cylinder(h=21, d=4, center=true);\n                }\n                \n                // Cable management hole\n                translate([-5, 0, 0]) \n                    cylinder(h=21, d=10, center=true);\n            }\n        }\n    }\n}\n\n// Generate the model\naxe_bracket();",
    "renders": true
  },
  {
    "sports_equipment": "anvil",
    "openscad_code": "// Anvil-style bench/table leg module\n// Realistic proportions with furniture-appropriate adaptations\n// Overall height: 100mm, suitable for small bench or table leg\n// Wall thickness: 2mm throughout\n\n// Base pad for stability\nmodule anvil_base() {\n    difference() {\n        // Main base plate\n        translate([0, 0, -2]) cube([60, 40, 4], center=true);\n        \n        // Lightening holes (reduce weight)\n        for (x = [-20, 0, 20]) {\n            translate([x, 0, -1.5]) cylinder(h=5, r=3, center=true);\n        }\n    }\n}\n\n// Main anvil body with horn\nmodule anvil_body() {\n    union() {\n        // Central block (table top support)\n        translate([0, 0, 25]) cube([50, 35, 50], center=true);\n        \n        // Tapered horn (decorative front support)\n        hull() {\n            translate([-25, 0, 45]) sphere(r=8);\n            translate([-45, 0, 25]) sphere(r=12);\n            translate([-45, 0, 5]) sphere(r=8);\n        }\n        \n        // Rear support pillar\n        translate([20, 0, 35]) cube([20, 30, 70], center=true);\n        \n        // Side reinforcement ribs\n        for (y = [-12, 12]) {\n            translate([0, y, 15]) cube([46, 3, 30], center=true);\n        }\n    }\n}\n\n// Top plate (furniture contact surface)\nmodule furniture_top() {\n    difference() {\n        // Main plate with rounded edges\n        minkowski() {\n            cube([55, 40, 6], center=true);\n            sphere(r=2);\n        }\n        \n        // Mounting holes for tabletop attachment\n        for (x = [-20, 20]) {\n            for (y = [-12, 12]) {\n                translate([x, y, 0]) cylinder(h=10, r=2.5, center=true);\n            }\n        }\n        \n        // Weight reduction cavity\n        translate([0, 0, 2]) cube([45, 30, 3], center=true);\n    }\n}\n\n// Hardie hole (tool storage feature)\nmodule hardie_hole() {\n    translate([15, 0, 48]) {\n        rotate([0, 90, 0]) {\n            // Square hole with fillet\n            minkowski() {\n                cube([8, 8, 20], center=true);\n                sphere(r=1);\n            }\n        }\n    }\n}\n\n// Pritchel hole (cable management feature)\nmodule pritchel_hole() {\n    translate([-10, 0, 48]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=20, r=4, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    anvil_base();\n    \n    // Main structure\n    anvil_body();\n    \n    // Top surface\n    translate([0, 0, 75]) furniture_top();\n    \n    // Functional holes\n    hardie_hole();\n    pritchel_hole();\n    \n    // Additional furniture joints\n    // Corner brackets for extra stability\n    for (x = [-20, 20]) {\n        for (y = [-15, 15]) {\n            translate([x, y, 5]) {\n                rotate([0, 0, 45]) {\n                    cube([4, 4, 10], center=true);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "chisel",
    "openscad_code": "// Realistic 3D printable chisel furniture item\n// Medium complexity with wall thickness 2 mm\n// Designed for 3D printing without support\n\n// Overall dimensions\nchisel_length = 120;      // Total length\nhandle_length = 70;       // Handle section\nblade_length = 50;        // Blade section\nhandle_dia = 20;          // Handle diameter\nblade_width = 25;         // Blade width at base\nblade_thickness = 3;      // Blade thickness\nblade_taper = 1.5;        // Blade taper factor\n\n// Handle grip details\ngrip_ring_dia = 22;\ngrip_ring_width = 3;\ngrip_ring_count = 5;\n\n// Ferrule details\nferrule_length = 15;\nferrule_dia = 22;\n\n// Blade bevel angle\nbevel_angle = 25;\n\n// Wall thickness\nwall = 2;\n\n// Main module\nmodule chisel_furniture() {\n    union() {\n        // Handle\n        translate([0, 0, handle_length/2])\n            handle();\n        \n        // Ferrule\n        translate([0, 0, handle_length - ferrule_length/2])\n            ferrule();\n        \n        // Blade\n        translate([0, 0, -blade_length/2])\n            blade();\n    }\n}\n\n// Handle module with grip rings\nmodule handle() {\n    difference() {\n        // Main handle body (hollow)\n        difference() {\n            cylinder(h=handle_length, d=handle_dia, $fn=32);\n            translate([0, 0, wall])\n                cylinder(h=handle_length-wall*2, d=handle_dia-wall*2, $fn=32);\n        }\n        \n        // Grip rings\n        for(i = [1:grip_ring_count]) {\n            translate([0, 0, wall + i*(handle_length-wall*2)/(grip_ring_count+1) - grip_ring_width/2])\n                cylinder(h=grip_ring_width, d=grip_ring_dia+wall*2, $fn=32);\n        }\n    }\n}\n\n// Metal ferrule\nmodule ferrule() {\n    difference() {\n        // Outer ferrule\n        cylinder(h=ferrule_length, d=ferrule_dia, $fn=32);\n        \n        // Inner hollow\n        translate([0, 0, wall])\n            cylinder(h=ferrule_length-wall*2, d=ferrule_dia-wall*2, $fn=32);\n    }\n}\n\n// Blade module with beveled edge\nmodule blade() {\n    difference() {\n        union() {\n            // Blade base\n            translate([0, 0, blade_length/2])\n                cube([blade_width, blade_thickness, blade_length], center=true);\n            \n            // Tapered blade tip\n            translate([0, 0, -blade_length/2 + blade_taper])\n                scale([1 - blade_taper/blade_length, 1, blade_taper/blade_length])\n                    cube([blade_width, blade_thickness, blade_taper], center=true);\n        }\n        \n        // Bevel cuts on blade tip\n        rotate([0, bevel_angle, 0])\n            translate([blade_width/2, 0, -blade_length])\n                cube([blade_width*2, blade_thickness*2, blade_length], center=true);\n        \n        rotate([0, -bevel_angle, 0])\n            translate([-blade_width/2, 0, -blade_length])\n                cube([blade_width*2, blade_thickness*2, blade_length], center=true);\n    }\n}\n\n// Render the chisel\nchisel_furniture();",
    "renders": true
  },
  {
    "sports_equipment": "plane",
    "openscad_code": "// Realistic 3D printable model of a paper airplane desk ornament\n// Wing span ≈ 120 mm, length ≈ 130 mm, thickness ≈ 18 mm\n\nwall = 2;            // 3D-printable wall thickness\nscale = 1;           // global scale factor\n\nmodule body() {\n    difference() {\n        // Main fuselage block\n        translate([0,0,9])\n            cube([130,22,18], center=true);\n        \n        // Tapered nose\n        for (i=[1:5])\n            translate([65-i*10,0,9])\n                rotate([0,0,5])\n                    cube([20,22.5,18.5], center=true);\n        \n        // Cockpit recess\n        translate([35,0,18])\n            cube([45,18,6], center=true);\n        \n        // Tail slot\n        translate([-55,0,9])\n            cube([20,22.5,18.5], center=true);\n    }\n}\n\nmodule wing() {\n    difference() {\n        // Main wing panel\n        translate([0,0,0])\n            linear_extrude(height=4, center=true, convexity=10)\n                polygon(points=[[0,0],[60,0],[90,30],[60,60],[0,60],[-30,30]]);\n        \n        // Wing root cutout\n        translate([0,0,0])\n            cube([130,22,6], center=true);\n        \n        // Lightening holes\n        for (x=[20:30:80])\n            for (y=[-20:20:20])\n                translate([x,y,0])\n                    cylinder(h=5, d=8, center=true, $fn=16);\n    }\n}\n\nmodule tail() {\n    union() {\n        // Vertical stabilizer\n        translate([-65,0,9+4])\n            rotate([90,0,0])\n                difference() {\n                    linear_extrude(height=4, center=true)\n                        polygon(points=[[0,0],[0,25],[-20,35],[-40,25],[-40,0]]);\n                    translate([-20,17,0])\n                        cube([8,12,6], center=true);\n                }\n        \n        // Horizontal stabilizers\n        mirror([0,1,0])\n            translate([-65,0,9])\n                difference() {\n                    linear_extrude(height=4, center=true)\n                        polygon(points=[[0,0],[-25,0],[-35,20],[-25,40],[0,40]]);\n                    translate([-17,20,0])\n                        cube([6,12,6], center=true);\n                }\n    }\n}\n\nmodule joints() {\n    // Wing fillets\n    hull() {\n        translate([0,11,9])\n            sphere(d=6, $fn=16);\n        translate([0,11,4])\n            sphere(d=6, $fn=16);\n    }\n    hull() {\n        translate([0,-11,9])\n            sphere(d=6, $fn=16);\n        translate([0,-11,4])\n            sphere(d=6, $fn=16);\n    }\n}\n\n// Assembly\nscale([scale,scale,scale]) {\n    body();\n    wing();\n    tail();\n    joints();\n}",
    "renders": true
  },
  {
    "sports_equipment": "file",
    "openscad_code": "// File Cabinet - Realistic Style, Medium Complexity\n// Overall dimensions: 60mm W x 120mm H x 40mm D\n\n// Wall thickness\nwall = 2;\n\n// Main cabinet body\nmodule cabinet_body() {\n    // Outer shell\n    difference() {\n        // Main box\n        cube([60, 120, 40], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall])\n            cube([60-wall*2, 120-wall*2, 40-wall], center=true);\n    }\n}\n\n// File drawer\nmodule drawer(height, position) {\n    // Drawer front\n    difference() {\n        // Front panel\n        translate([0, position, 18])\n            cube([56, height-2, 4], center=true);\n        \n        // Drawer pull handle recess\n        translate([-20, position, 20.5])\n            cube([20, 10, 1], center=true);\n    }\n    \n    // Drawer pull handle\n    difference() {\n        // Handle base\n        translate([-30, position, 21])\n            cube([6, 14, 6], center=true);\n        \n        // Handle hole\n        translate([-30, position, 23])\n            cube([4, 10, 4], center=true);\n    }\n    \n    // Drawer sides\n    translate([0, position, 0])\n        cube([54, height-2, 34], center=true);\n}\n\n// Drawer dividers\nmodule drawer_divider(y_pos) {\n    translate([0, y_pos, 0])\n        cube([52, 1, 30], center=true);\n}\n\n// Cabinet top detail\nmodule top_detail() {\n    // Top lip\n    translate([0, 60, 21])\n        cube([64, 4, 2], center=true);\n}\n\n// Cabinet base\nmodule base() {\n    // Front base\n    translate([0, -62, -18])\n        cube([64, 4, 4], center=true);\n    \n    // Side bases\n    translate([32, -58, -18])\n        cube([4, 12, 4], center=true);\n    \n    translate([-32, -58, -18])\n        cube([4, 12, 4], center=true);\n}\n\n// File label holders\nmodule label_holder(y_pos) {\n    // Label frame\n    translate([20, y_pos, 20.5])\n        cube([12, 8, 0.5], center=true);\n    \n    // Label recess\n    translate([20, y_pos, 21])\n        cube([10, 6, 0.3], center=true);\n}\n\n// Main assembly\nunion() {\n    // Cabinet structure\n    cabinet_body();\n    \n    // Top and base details\n    top_detail();\n    base();\n    \n    // Drawers - 3 drawers total\n    drawer(30, 45);\n    drawer(30, 15);\n    drawer(30, -15);\n    \n    // Drawer dividers\n    drawer_divider(30);\n    drawer_divider(0);\n    \n    // Label holders for each drawer\n    label_holder(45);\n    label_holder(15);\n    label_holder(-15);\n}",
    "renders": true
  },
  {
    "sports_equipment": "awl",
    "openscad_code": "// AWL - Medium complexity realistic furniture tool\n// Overall length: 120 mm, printable without supports\n\n// Parameters\nhandle_length = 70;\nhandle_diameter = 12;\ngrip_ring_width = 4;\ngrip_ring_depth = 1;\nrings = 6;\n\nshank_length = 40;\nshank_diameter = 6;\n\ntaper_length = 10;\ntip_diameter = 1;\n\nwall = 2;\n\nmodule handle_grip() {\n    difference() {\n        // Main handle cylinder\n        cylinder(h = handle_length, d = handle_diameter, $fn = 32);\n        \n        // Grip rings carved into handle\n        for (i = [0 : rings - 1]) {\n            translate([0, 0, grip_ring_width/2 + i * (handle_length/rings)])\n                cylinder(h = grip_ring_width, d = handle_diameter - grip_ring_depth*2, $fn = 32);\n        }\n    }\n}\n\nmodule shank() {\n    // Cylindrical shank\n    cylinder(h = shank_length + taper_length, d = shank_diameter, $fn = 32);\n}\n\nmodule tapered_tip() {\n    // Tapered tip ending in sharp point\n    cylinder(h1 = tip_diameter, h2 = shank_diameter, h = taper_length, $fn = 16);\n}\n\nmodule awl_assembly() {\n    union() {\n        // Handle grip section\n        handle_grip();\n        \n        // Transition collar between handle and shank\n        translate([0, 0, handle_length])\n            cylinder(h = 3, d1 = handle_diameter, d2 = shank_diameter, $fn = 32);\n        \n        // Shank section\n        translate([0, 0, handle_length + 3])\n            shank();\n        \n        // Tapered tip\n        translate([0, 0, handle_length + 3 + shank_length])\n            tapered_tip();\n    }\n}\n\n// Render the awl\nawl_assembly();",
    "renders": true
  },
  {
    "sports_equipment": "loom",
    "openscad_code": "// Miniature Loom Furniture - Realistic Style\n// Overall dimensions: 120mm x 80mm x 100mm\n\n// Main parameters\nframe_width = 120;\nframe_depth = 80;\nframe_height = 100;\nwall_thickness = 2;\nbeam_diameter = 6;\nthread_thickness = 0.8;\n\n// Main frame assembly\nmodule loom_frame() {\n    // Base frame\n    difference() {\n        cube([frame_width, frame_depth, wall_thickness], center=true);\n        translate([0, 0, -wall_thickness/2 - 0.1])\n            cube([frame_width - 2*wall_thickness, frame_depth - 2*wall_thickness, wall_thickness + 0.2], center=true);\n    }\n    \n    // Vertical posts (4 corners)\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x * (frame_width/2 - wall_thickness/2), \n                  y * (frame_depth/2 - wall_thickness/2), \n                  frame_height/2])\n            cube([wall_thickness, wall_thickness, frame_height], center=true);\n    }\n    \n    // Top frame\n    translate([0, 0, frame_height - wall_thickness/2])\n        cube([frame_width, frame_depth, wall_thickness], center=true);\n}\n\n// Warp beam (front roller)\nmodule warp_beam() {\n    translate([0, frame_depth/2 - 10, 20])\n        rotate([90, 0, 0])\n            cylinder(h=frame_width - 20, d=beam_diameter, center=true);\n    \n    // Beam supports\n    for(side = [-1, 1]) {\n        translate([side * (frame_width/2 - 10), frame_depth/2 - 10, 20])\n            cube([wall_thickness*2, wall_thickness*2, 15], center=true);\n    }\n}\n\n// Cloth beam (back roller)\nmodule cloth_beam() {\n    translate([0, -frame_depth/2 + 10, 20])\n        rotate([90, 0, 0])\n            cylinder(h=frame_width - 20, d=beam_diameter, center=true);\n    \n    // Beam supports\n    for(side = [-1, 1]) {\n        translate([side * (frame_width/2 - 10), -frame_depth/2 + 10, 20])\n            cube([wall_thickness*2, wall_thickness*2, 15], center=true);\n    }\n}\n\n// Heddles frame\nmodule heddles() {\n    // Heddle frames (upper and lower)\n    for(z = [40, 60]) {\n        translate([0, 0, z])\n            difference() {\n                cube([frame_width - 30, frame_depth - 30, wall_thickness], center=true);\n                translate([0, 0, -wall_thickness/2 - 0.1])\n                    cube([frame_width - 35, frame_depth - 35, wall_thickness + 0.2], center=true);\n            }\n    }\n    \n    // Heddle wires\n    for(i = [-5:5]) {\n        translate([i * 8, 0, 50])\n            cube([wall_thickness, frame_depth - 30, 20], center=true);\n    }\n}\n\n// Shuttle race\nmodule shuttle_race() {\n    translate([0, 0, 30])\n        difference() {\n            cube([frame_width - 20, 10, wall_thickness], center=true);\n            translate([0, 0, -wall_thickness/2 - 0.1])\n                cube([frame_width - 25, 6, wall_thickness + 0.2], center=true);\n        }\n}\n\n// Treadles\nmodule treadles() {\n    for(i = [-1, 0, 1]) {\n        translate([i * 20, 0, 8])\n            rotate([20, 0, 0])\n                cube([15, frame_depth - 10, wall_thickness], center=true);\n    }\n}\n\n// Warp threads\nmodule warp_threads() {\n    for(i = [-20:20]) {\n        color(\"tan\")\n        translate([i * 2.5, frame_depth/2 - 10, 20])\n            cylinder(h=frame_height - 40, d=thread_thickness, center=false);\n    }\n}\n\n// Assembly\nunion() {\n    loom_frame();\n    warp_beam();\n    cloth_beam();\n    heddles();\n    shuttle_race();\n    treadles();\n    warp_threads();\n}\n\n// Support feet for stability\nfor(x = [-1, 1])\nfor(y = [-1, 1]) {\n    translate([x * (frame_width/2 - 10), y * (frame_depth/2 - 10), -5])\n        cylinder(h=10, d=8, center=false);\n}",
    "renders": true
  },
  {
    "sports_equipment": "spindle",
    "openscad_code": "// Realistic Spindle Furniture Item - Medium Complexity\n// Approx 100mm height, 3D printable with 2mm walls\n\n$fn = 36;\n\n// Main parameters\nspindle_height = 100;\nspindle_radius = 20;\nbase_height = 15;\ngrip_height = 30;\nthread_diameter = 8;\nwall_thickness = 2;\n\nmodule spindle_base() {\n    // Wide stable base with chamfered edges\n    difference() {\n        cylinder(h=base_height, r1=spindle_radius*1.2, r2=spindle_radius*1.1);\n        \n        // Hollow center\n        translate([0, 0, wall_thickness])\n            cylinder(h=base_height, r1=spindle_radius*1.2-wall_thickness, r2=spindle_radius*1.1-wall_thickness);\n        \n        // Fillets for printability\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([spindle_radius*0.9, 0, base_height-wall_thickness])\n                    cube([wall_thickness*2, wall_thickness*4, wall_thickness], center=true);\n        }\n    }\n}\n\nmodule threaded_rod() {\n    // Central threaded rod structure\n    difference() {\n        cylinder(h=spindle_height-base_height, r=thread_diameter/2);\n        cylinder(h=spindle_height-base_height, r=thread_diameter/2-wall_thickness);\n    }\n    \n    // Thread details (simplified for printing)\n    for(i=[0:20]) {\n        translate([0, 0, base_height + i*(spindle_height-base_height)/20])\n            rotate([0, 0, i*30])\n                difference() {\n                    cylinder(h=2, r=thread_diameter/2+1);\n                    cylinder(h=2, r=thread_diameter/2);\n                }\n    }\n}\n\nmodule grip_section() {\n    // Textured grip area with ergonomic shaping\n    difference() {\n        cylinder(h=grip_height, r1=spindle_radius*0.9, r2=spindle_radius*0.8);\n        \n        // Hollow grip\n        translate([0, 0, wall_thickness])\n            cylinder(h=grip_height, r1=spindle_radius*0.9-wall_thickness, r2=spindle_radius*0.8-wall_thickness);\n        \n        // Grip texture rings\n        for(i=[1:6]) {\n            translate([0, 0, base_height + i*grip_height/7])\n                difference() {\n                    cylinder(h=2, r=spindle_radius*0.9+1);\n                    cylinder(h=2, r=spindle_radius*0.9);\n                }\n        }\n    }\n}\n\nmodule yarn_guide() {\n    // Hook at top for guiding yarn\n    translate([0, 0, spindle_height])\n        rotate([90, 0, 0])\n            difference() {\n                // Hook body\n                cylinder(h=15, r=4);\n                translate([0, 0, -1])\n                    cylinder(h=17, r=2);\n                \n                // Hook opening\n                translate([0, 15, 7.5])\n                    rotate([0, 90, 0])\n                        cylinder(h=10, r=3);\n            }\n}\n\nmodule support_whorl() {\n    // Decorative support whorl\n    translate([0, 0, base_height + grip_height/2])\n        difference() {\n            cylinder(h=8, r=spindle_radius*1.3);\n            \n            // Cutouts for style and weight reduction\n            for(i=[0:5]) {\n                rotate([0, 0, i*60])\n                    translate([spindle_radius*0.9, 0, -1])\n                        cube([spindle_radius*0.5, 4, 10], center=true);\n            }\n            \n            // Central hole\n            cylinder(h=10, r=spindle_radius*0.5);\n        }\n}\n\n// Assembly\nunion() {\n    spindle_base();\n    \n    translate([0, 0, base_height])\n        grip_section();\n    \n    translate([0, 0, base_height + grip_height])\n        threaded_rod();\n    \n    translate([0, 0, base_height + grip_height/2])\n        support_whorl();\n    \n    yarn_guide();\n    \n    // Reinforcement ribs\n    for(i=[0:3]) {\n        rotate([0, 0, i*120])\n            translate([spindle_radius*0.6, 0, base_height/2])\n                cube([wall_thickness*2, 8, base_height], center=true);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "distaff",
    "openscad_code": "// Distaff furniture piece - traditional spinning tool with furniture-like stand\n// Overall height ~120mm, suitable for tabletop display\n\ndistaff_height = 120;\ndistaff_width = 25;\nbase_size = 60;\n\nmodule textured_grip(diameter, height, segments=24) {\n    // Create a grip section with raised rings for better handling\n    for (i = [0:3:height-3]) {\n        translate([0, 0, i]) \n            cylinder(h=2, d=diameter+4, $fn=segments);\n    }\n    // Main shaft with slight taper\n    cylinder(h=height, d1=diameter, d2=diameter-2, $fn=segments);\n}\n\nmodule distaff_shaft() {\n    // Main vertical shaft with furniture-style construction\n    difference() {\n        union() {\n            // Tapered shaft body\n            cylinder(h=distaff_height*0.7, d1=distaff_width, d2=distaff_width-6, $fn=24);\n            \n            // Grip section at top third\n            translate([0, 0, distaff_height*0.5])\n                textured_grip(distaff_width-4, distaff_height*0.2);\n        }\n        \n        // Hollow center for weight reduction\n        translate([0, 0, -1])\n            cylinder(h=distaff_height*0.7+2, d=distaff_width-8, $fn=24);\n    }\n}\n\nmodule decorative_finial() {\n    // Traditional turned-wood style finial\n    union() {\n        // Decorative knob\n        translate([0, 0, distaff_height*0.7])\n            sphere(d=12, $fn=16);\n        \n        // Transitional collar\n        translate([0, 0, distaff_height*0.7-5])\n            cylinder(h=5, d1=8, d2=12, $fn=16);\n    }\n}\n\nmodule distaff_fork() {\n    // Forked top for holding fiber\n    translate([0, 0, distaff_height*0.7+6]) {\n        // Main fork base\n        cylinder(h=8, d=10, $fn=12);\n        \n        // Two curved tines\n        for (angle = [30, 150]) {\n            rotate([0, 0, angle])\n                translate([8, 0, 4])\n                    rotate([90, 0, 0])\n                        cylinder(h=25, d=4, $fn=8);\n        }\n    }\n}\n\nmodule furniture_base() {\n    // Stable furniture-style base with three feet\n    union() {\n        // Central column\n        cylinder(h=35, d=20, $fn=24);\n        \n        // Three decorative feet with furniture proportions\n        for (i = [0:120:360]) {\n            rotate([0, 0, i])\n                translate([25, 0, 0])\n                    cube([30, 8, 10], center=true);\n        }\n        \n        // Base platform\n        translate([0, 0, -5])\n            cylinder(h=5, d=base_size, $fn=48);\n    }\n}\n\nmodule joint_connection() {\n    // Furniture-style mortise and tenon joint\n    difference() {\n        // Tenon on shaft\n        translate([0, 0, 0])\n            cylinder(h=15, d=18, $fn=24);\n        \n        // Mortise in base\n        translate([0, 0, 35])\n            cylinder(h=20, d=16, $fn=24);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base with furniture construction\n    furniture_base();\n    \n    // Joint connection\n    joint_connection();\n    \n    // Main shaft assembly\n    translate([0, 0, 35])\n        union() {\n            distaff_shaft();\n            decorative_finial();\n            distaff_fork();\n        };\n}",
    "renders": true
  },
  {
    "sports_equipment": "shuttle",
    "openscad_code": "// Shuttlecock Furniture Item - Realistic Style\n// Medium complexity 3D printable shuttlecock with furniture-grade details\n\n// Overall dimensions\nshuttle_length = 120;\nshuttle_base_dia = 35;\nshuttle_cork_dia = 25;\nshuttle_cork_height = 20;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Base module for shuttle structure\nmodule shuttle_base() {\n    // Main cork base with hollow center\n    difference() {\n        // Outer cork shape\n        union() {\n            cylinder(h=shuttle_cork_height, d=shuttle_cork_dia, $fn=32);\n            // Beveled top edge\n            translate([0, 0, shuttle_cork_height-2])\n                cylinder(h=2, d1=shuttle_cork_dia, d2=shuttle_cork_dia-4, $fn=32);\n        }\n        // Hollow center\n        cylinder(h=shuttle_cork_height+1, d=shuttle_cork_dia-wall*2, $fn=32);\n    }\n}\n\n// Feather skirt structure\nmodule feather_skirt() {\n    // Outer skirt cone\n    difference() {\n        // Main skirt shape\n        union() {\n            cylinder(h=shuttle_length-shuttle_cork_height, \n                    d1=shuttle_base_dia, \n                    d2=shuttle_base_dia*0.8, \n                    $fn=32);\n            // Reinforcement ring at base\n            translate([0, 0, -1])\n                cylinder(h=3, d=shuttle_base_dia+4, $fn=32);\n        }\n        // Inner hollow\n        cylinder(h=shuttle_length-shuttle_cork_height+2, \n                d1=shuttle_base_dia-wall*2, \n                d2=shuttle_base_dia*0.8-wall*2, \n                $fn=32);\n    }\n}\n\n// Feather details with realistic texture\nmodule feather_details() {\n    // Number of feather segments\n    segments = 16;\n    \n    for(i=[0:segments-1]) {\n        rotate([0, 0, i*360/segments]) {\n            // Main feather vane\n            translate([0, shuttle_base_dia/2-wall, shuttle_cork_height])\n                rotate([90, 0, 0])\n                    linear_extrude(height=wall*0.8)\n                        polygon(points=[\n                            [0, 0],\n                            [0, shuttle_length-shuttle_cork_height-5],\n                            [-1.5, shuttle_length-shuttle_cork_height-3],\n                            [-3, shuttle_length-shuttle_cork_height-10],\n                            [-1.5, 0]\n                        ]);\n            \n            // Feather rib detail\n            translate([0, shuttle_base_dia/2-wall-0.5, shuttle_cork_height+2])\n                rotate([90, 0, 0])\n                    cylinder(h=shuttle_length-shuttle_cork_height-7, d=0.8, $fn=8);\n        }\n    }\n}\n\n// Structural support ring\nmodule support_ring() {\n    // Middle reinforcement ring\n    translate([0, 0, shuttle_cork_height + (shuttle_length-shuttle_cork_height)/2])\n        difference() {\n            cylinder(h=wall*1.5, d=shuttle_base_dia*0.9, $fn=32);\n            cylinder(h=wall*1.5+1, d=shuttle_base_dia*0.9-wall*2, $fn=32);\n        }\n}\n\n// Furniture-grade base pad\nmodule base_pad() {\n    // Anti-slip rubber base\n    translate([0, 0, -1])\n        cylinder(h=1.5, d=shuttle_cork_dia+2, $fn=32);\n    \n    // Traction pattern\n    for(i=[0:5]) {\n        rotate([0, 0, i*30])\n            translate([shuttle_cork_dia/2-3, 0, -0.5])\n                cube([6, 1, 1], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Core structure\n    shuttle_base();\n    translate([0, 0, shuttle_cork_height])\n        feather_skirt();\n    \n    // Details and supports\n    feather_details();\n    support_ring();\n    base_pad();\n}\n\n// Print orientation indicator\ntranslate([0, 0, -5])\n    cube([3, 3, 3], center=true);",
    "renders": true
  },
  {
    "sports_equipment": "cart",
    "openscad_code": "// Rolling utility cart\n// Medium-complexity, realistic style, 3D-printable\n\n$fn = 36;\n\n// Overall bounding box: 110 x 60 x 80 mm\n\nmodule wheel(d=20, width=8) {\n    difference() {\n        cylinder(h=width, d=d, center=true);      // tire\n        cylinder(h=width+0.2, d=d-4, center=true); // rim hole\n    }\n    // Rim spokes\n    for(i=[0:3]) {\n        rotate([0,0,i*90])\n            cube([d-10, 2, width+0.1], center=true);\n    }\n}\n\nmodule axle() {\n    difference() {\n        cylinder(h=68, d=6, center=true);         // axle rod\n        cylinder(h=70, d=3, center=true);         // hollow center\n    }\n}\n\nmodule shelf() {\n    difference() {\n        cube([100, 60, 2]);                       // shelf plate\n        // Grid of lightening holes\n        for(i=[15:30:85]) {\n            for(j=[15:30:45]) {\n                translate([i, j, -1])\n                    cylinder(h=4, d=8);\n            }\n        }\n    }\n}\n\nmodule frame_side() {\n    difference() {\n        cube([2, 60, 78]);                        // upright\n        // Rounded top via negative cylinder\n        translate([1, 30, 78])\n            rotate([0,90,0])\n                cylinder(h=2.2, d=60);\n    }\n}\n\nmodule handle() {\n    difference() {\n        translate([-10, 30, 80])\n            cube([12, 2, 25]);                    // vertical grip post\n        translate([-5, 30, 80])\n            rotate([90,0,0])\n                cylinder(h=12, d=2);               // roundover\n    }\n    difference() {\n        translate([-10, 30, 105])\n            rotate([90,0,0])\n                cylinder(h=60, d=20);              // grip bar\n        translate([-10, 30, 105])\n            rotate([90,0,0])\n                cylinder(h=60.2, d=16);            // hollow grip\n    }\n}\n\n// Assembly\nunion() {\n    // Shelves\n    translate([0, 0, 2])\n        shelf();\n    translate([0, 0, 40])\n        shelf();\n    translate([0, 0, 78])\n        shelf();\n\n    // Frame sides\n    frame_side();\n    translate([98, 0, 0])\n        mirror([1,0,0])\n            frame_side();\n\n    // Front/back rails\n    translate([50, 0, 20])\n        cube([104, 2, 2]);\n    translate([50, 58, 20])\n        cube([104, 2, 2]);\n    translate([50, 0, 58])\n        cube([104, 2, 2]);\n    translate([50, 58, 58])\n        cube([104, 2, 2]);\n\n    // Handle\n    handle();\n\n    // Wheels + axles\n    translate([10, 5, 0])\n        wheel();\n    translate([10, 55, 0])\n        wheel();\n    translate([90, 5, 0])\n        wheel();\n    translate([90, 55, 0])\n        wheel();\n\n    translate([10, 30, 0])\n        rotate([0,90,0])\n            axle();\n    translate([90, 30, 0])\n        rotate([0,90,0])\n            axle();\n}",
    "renders": true
  },
  {
    "sports_equipment": "sleigh",
    "openscad_code": "// Sleigh furniture - medium complexity realistic style\n// Overall dimensions ~120mm long x 60mm wide x 50mm high\n\nmodule sleigh_base() {\n    // Main curved runners with 2mm wall thickness\n    difference() {\n        // Outer shell\n        scale([1, 0.3, 0.15])\n            sphere(r=60, $fn=50);\n        \n        // Inner hollow for 2mm walls\n        translate([0, 0, 2])\n            scale([0.96, 0.26, 0.11])\n                sphere(r=60, $fn=50);\n        \n        // Flat bottom cut\n        translate([0, 0, -10])\n            cube([200, 200, 20], center=true);\n    }\n}\n\nmodule seat_support() {\n    // Two support ribs under seat\n    for (x = [-25, 25]) {\n        translate([x, 0, 25])\n            rotate([0, 90, 0])\n                cylinder(h=40, r1=8, r2=8, $fn=20);\n    }\n}\n\nmodule seat_platform() {\n    // Main seating area with slight curve\n    translate([0, 0, 35])\n        difference() {\n            // Seat base\n            scale([1, 0.6, 0.1])\n                sphere(r=50, $fn=30);\n            \n            // Hollow underneath\n            translate([0, 0, -2])\n                scale([0.9, 0.5, 0.08])\n                    sphere(r=50, $fn=30);\n        }\n}\n\nmodule backrest() {\n    // Curved backrest with slats\n    translate([0, -25, 45])\n        rotate([15, 0, 0])\n            difference() {\n                // Outer backrest shell\n                scale([0.8, 0.2, 0.3])\n                    sphere(r=50, $fn=30);\n                \n                // Inner hollow\n                translate([0, 0, 2])\n                    scale([0.75, 0.15, 0.25])\n                        sphere(r=50, $fn=30);\n            }\n    \n    // Backrest slats\n    for (x = [-20:10:20]) {\n        translate([x, -28, 42])\n            cube([6, 2, 25]);\n    }\n}\n\nmodule arm_rests() {\n    // Left arm rest\n    translate([-45, 0, 40])\n        rotate([0, 15, 0])\n            difference() {\n                cylinder(h=30, r1=5, r2=5, $fn=20);\n                translate([0, 0, -2])\n                    cylinder(h=34, r1=3, r2=3, $fn=20);\n            }\n    \n    // Right arm rest\n    translate([45, 0, 40])\n        rotate([0, -15, 0])\n            difference() {\n                cylinder(h=30, r1=5, r2=5, $fn=20);\n                translate([0, 0, -2])\n                    cylinder(h=34, r1=3, r2=3, $fn=20);\n            }\n}\n\nmodule front_support() {\n    // Front cross brace\n    translate([0, 30, 15])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=60, r1=4, r2=4, $fn=20);\n                translate([0, 0, -2])\n                    cylinder(h=64, r1=2, r2=2, $fn=20);\n            }\n}\n\nmodule decorative_details() {\n    // Front decorative curl\n    translate([0, 55, 5])\n        rotate([0, 0, 180])\n            difference() {\n                scale([0.3, 0.3, 0.3])\n                    cylinder(h=15, r1=15, r2=0, $fn=30);\n                translate([0, 0, -1])\n                    scale([0.25, 0.25, 0.35])\n                        cylinder(h=17, r1=12, r2=0, $fn=30);\n            }\n    \n    // Runner edge details\n    for (y = [-50:25:50]) {\n        translate([0, y, 8])\n            rotate([90, 0, 0])\n                cylinder(h=2, r1=3, r2=3, $fn=20);\n    }\n}\n\n// Assemble the sleigh\nunion() {\n    sleigh_base();\n    seat_support();\n    seat_platform();\n    backrest();\n    arm_rests();\n    front_support();\n    decorative_details();\n}",
    "renders": true
  },
  {
    "sports_equipment": "sledge",
    "openscad_code": "// Sledge Furniture - Realistic Medium Complexity\n// Overall dimensions: ~120mm long x 50mm wide x 30mm tall\n\n// Parameters\nseat_length = 80;\nseat_width = 40;\nseat_thickness = 3;\nrunner_height = 15;\nrunner_thickness = 4;\nbackrest_height = 25;\nleg_height = 12;\n\nmodule sledge_seat() {\n    // Main seat platform with rounded edges\n    hull() {\n        translate([0, 0, seat_thickness/2])\n            cube([seat_length, seat_width, seat_thickness], center=true);\n        translate([0, 0, seat_thickness/2 + 1])\n            cube([seat_length-4, seat_width-4, seat_thickness], center=true);\n    }\n    \n    // Grip texture pattern on seat surface\n    for (i = [-seat_length/2 + 5 : 5 : seat_length/2 - 5]) {\n        for (j = [-seat_width/2 + 5 : 5 : seat_width/2 - 5]) {\n            translate([i, j, seat_thickness + 0.5])\n                cube([3, 3, 0.5], center=true);\n        }\n    }\n}\n\nmodule runners() {\n    // Left runner with curved front\n    translate([-seat_length/2 + 10, -seat_width/2 - runner_thickness/2, runner_height/2])\n        union() {\n            // Main runner body\n            cube([seat_length - 15, runner_thickness, runner_height], center=true);\n            \n            // Curved front\n            translate([seat_length/2 - 12, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=runner_thickness, r=runner_height/2, center=true);\n            \n            // Rear support block\n            translate([-seat_length/2 + 5, 0, runner_height/2])\n                cube([10, runner_thickness, runner_height]);\n        }\n    \n    // Right runner (mirrored)\n    mirror([0, 1, 0])\n        children();\n}\n\nmodule backrest() {\n    // Backrest frame\n    translate([-seat_length/2 + 5, 0, seat_thickness + backrest_height/2])\n        union() {\n            // Vertical supports\n            for (y = [-seat_width/2 + 5, seat_width/2 - 5]) {\n                translate([0, y, 0])\n                    cube([2, 2, backrest_height], center=true);\n            }\n            \n            // Horizontal slats\n            for (z = [seat_thickness + 5 : 6 : seat_thickness + backrest_height - 5]) {\n                translate([0, 0, z])\n                    cube([20, seat_width - 10, 2], center=true);\n            }\n            \n            // Top rail\n            translate([0, 0, seat_thickness + backrest_height])\n                cube([20, seat_width - 6, 3], center=true);\n        }\n}\n\nmodule legs() {\n    // Front legs\n    translate([seat_length/2 - 10, -seat_width/2 + 5, leg_height/2])\n        cube([4, 4, leg_height], center=true);\n    translate([seat_length/2 - 10, seat_width/2 - 5, leg_height/2])\n        cube([4, 4, leg_height], center=true);\n    \n    // Rear legs\n    translate([-seat_length/2 + 10, -seat_width/2 + 5, leg_height/2])\n        cube([4, 4, leg_height], center=true);\n    translate([-seat_length/2 + 10, seat_width/2 - 5, leg_height/2])\n        cube([4, 4, leg_height], center=true);\n}\n\nmodule reinforcement_braces() {\n    // Cross braces between runners\n    translate([0, 0, runner_height - 2])\n        cube([seat_length - 20, seat_width + runner_thickness, 2], center=true);\n    \n    // Diagonal side braces\n    translate([0, -seat_width/2 - runner_thickness/2, runner_height/2])\n        rotate([0, 0, 45])\n            cube([seat_length - 30, 2, runner_height - 4], center=true);\n    translate([0, seat_width/2 + runner_thickness/2, runner_height/2])\n        rotate([0, 0, -45])\n            cube([seat_length - 30, 2, runner_height - 4], center=true);\n}\n\n// Main assembly\nunion() {\n    // Seat\n    sledge_seat();\n    \n    // Runners with braces\n    union() {\n        runners();\n        reinforcement_braces();\n    }\n    \n    // Backrest\n    backrest();\n    \n    // Support legs\n    legs();\n}",
    "renders": true
  },
  {
    "sports_equipment": "plough",
    "openscad_code": "// Plough Furniture (Wall-Mounted Coat Rack inspired by traditional plough)\n// Overall size: ~120 mm wide, ~90 mm high, ~50 mm deep\n// Wall thickness: 2 mm to be 3D-print friendly\n\n$fn = 48;  // Smooth curves\n\n// Main module\nmodule plough_rack() {\n\n    // ----------------------------------------------------------\n    // 1. Central beam (plough body)\n    // ----------------------------------------------------------\n    color(\"Peru\")\n    difference() {\n        // Full beam\n        translate([0, 0, 30])\n            cube([100, 20, 5], center = true);\n        // Mounting key-holes (2× centered)\n        for (x = [-30, 30])\n            translate([x, 0, 2.5])\n                rotate([90, 0, 0])\n                    cylinder(h = 6, d1 = 8, d2 = 5, center = true);\n    }\n\n    // ----------------------------------------------------------\n    // 2. Handle (curved grip beam)\n    // ----------------------------------------------------------\n    color(\"SaddleBrown\")\n    translate([-55, 0, 45])\n        rotate([0, 90, 0])\n            rotate_extrude(angle = 90)\n                translate([15, 0])\n                    circle(r = 5);\n\n    // ----------------------------------------------------------\n    // 3. Hooks (plough share-inspired coat hooks)\n    // ----------------------------------------------------------\n    module hook_pair(offset_z) {\n        // Left hook\n        translate([-25, 0, offset_z])\n            hook();\n        // Right hook (mirrored)\n        translate([25, 0, offset_z])\n            mirror([1, 0, 0])\n                hook();\n    }\n\n    module hook() {\n        // Hook body\n        hull() {\n            translate([0, 0, 0])\n                sphere(r = 4);\n            translate([0, 12, -8])\n                sphere(r = 3);\n        }\n        // Tip ball\n        translate([0, 18, -8])\n            sphere(r = 3);\n    }\n\n    // Add four hook pairs along the beam\n    for (z = [28, 18, 8, -2])\n        hook_pair(z);\n\n    // ----------------------------------------------------------\n    // 4. Support brackets (plough legs)\n    // ----------------------------------------------------------\n    module bracket(x_pos) {\n        color(\"BurlyWood\")\n        difference() {\n            hull() {\n                translate([x_pos, 0, 25])\n                    sphere(r = 6);\n                translate([x_pos, 0, -5])\n                    sphere(r = 4);\n                translate([x_pos, 25, 12])\n                    sphere(r = 4);\n            }\n            // Remove inner material to reduce weight\n            translate([x_pos, 10, 10])\n                cube([12, 20, 25], center = true);\n        }\n    }\n\n    // Add two brackets\n    bracket(-45);\n    bracket(45);\n\n    // ----------------------------------------------------------\n    // 5. Reinforcement strut (mini beam)\n    // ----------------------------------------------------------\n    color(\"Peru\")\n    translate([0, 25, 12])\n        rotate([90, 0, 0])\n            cylinder(h = 90, r = 3, center = true);\n}\n\n// Render the model\nplough_rack();",
    "renders": true
  },
  {
    "sports_equipment": "harrow",
    "openscad_code": "// Harrow Furniture - Realistic Style (Medium Complexity)\n// A decorative harrow-style table with structural frame and tabletop\n\n// Parameters\ntable_length = 120;\ntable_width = 70;\ntable_height = 45;\nframe_thickness = 3;\nleg_thickness = 4;\ntine_count = 8;\ntine_thickness = 2;\ntine_length = 40;\ntine_spacing = 12;\n\n// Main assembly\nmodule harrow_table() {\n    // Base frame structure\n    difference() {\n        union() {\n            // Long side frame members\n            translate([-table_length/2, -table_width/2, 0])\n                cube([table_length, frame_thickness, table_height]);\n            translate([-table_length/2, table_width/2-frame_thickness, 0])\n                cube([table_length, frame_thickness, table_height]);\n            \n            // Short side frame members\n            translate([-table_length/2, -table_width/2, 0])\n                cube([frame_thickness, table_width, table_height]);\n            translate([table_length/2-frame_thickness, -table_width/2, 0])\n                cube([frame_thickness, table_width, table_height]);\n            \n            // Leg posts at corners\n            for(x=[-1,1])\n            for(y=[-1,1])\n                translate([x*table_length/2, y*table_width/2, 0])\n                    cylinder(h=table_height, r=leg_thickness, $fn=8);\n            \n            // Center support beam\n            translate([-table_length/2, -frame_thickness/2, table_height/2])\n                cube([table_length, frame_thickness, frame_thickness*3]);\n            \n            // Harrow tines (angled supports)\n            for(i=[0:tine_count-1]) {\n                translate([-table_length/2 + 10 + i*tine_spacing, -table_width/2 + 10, 5])\n                    rotate([15, 0, 0])\n                        cube([tine_thickness, tine_length, tine_thickness]);\n            }\n            \n            for(i=[0:tine_count-1]) {\n                translate([-table_length/2 + 10 + i*tine_spacing, table_width/2 - 10 - tine_length, 5])\n                    rotate([15, 0, 180])\n                        cube([tine_thickness, tine_length, tine_thickness]);\n            }\n        }\n        \n        // Hollow out frame for material savings\n        translate([-table_length/2+frame_thickness, -table_width/2+frame_thickness, frame_thickness])\n            cube([table_length-2*frame_thickness, table_width-2*frame_thickness, table_height-2*frame_thickness]);\n        \n        // Remove material between legs\n        for(x=[-1,1])\n        for(y=[-1,1])\n            translate([x*table_length/2, y*table_width/2, 0])\n                cylinder(h=table_height, r=leg_thickness-frame_thickness, $fn=8);\n    }\n    \n    // Tabletop surface\n    translate([-table_length/2+5, -table_width/2+5, table_height-2])\n        cube([table_length-10, table_width-10, frame_thickness]);\n    \n    // Decorative harrow disk details on tabletop\n    for(i=[0:3])\n    for(j=[0:1])\n        translate([-table_length/3 + i*20, -table_width/4 + j*table_width/2, table_height])\n            cylinder(h=1, r=5, $fn=16);\n    \n    // Reinforcement ribs\n    for(i=[0:2])\n        translate([-table_length/3 + i*table_length/3, -table_width/2+5, table_height/2])\n            rotate([0, 90, 0])\n                cube([table_width-10, frame_thickness, table_height/2-5]);\n}\n\n// Render the table\nharrow_table();",
    "renders": true
  },
  {
    "sports_equipment": "scythe",
    "openscad_code": "// Scythe Furniture Item - Realistic Style, Medium Complexity\n// Overall dimensions: ~100mm tall, ~80mm wide\n\n// Parameters\nhandle_diameter = 8;\nhandle_length = 80;\nblade_thickness = 2;\nblade_width = 12;\nblade_length = 70;\ngrip_length = 25;\ngrip_diameter = 10;\n\n// Handle with grip texture\nmodule handle() {\n    // Main handle shaft\n    cylinder(d=handle_diameter, h=handle_length, $fn=20);\n    \n    // Grip section with rings\n    for(i = [0:5:grip_length-5]) {\n        translate([0, 0, handle_length - grip_length + i])\n            cylinder(d=grip_diameter, h=3, $fn=20);\n    }\n    \n    // End cap\n    translate([0, 0, handle_length])\n        cylinder(d=handle_diameter+2, h=4, $fn=20);\n}\n\n// Curved blade with realistic proportions\nmodule blade() {\n    // Main blade body - curved shape\n    difference() {\n        // Outer curve\n        translate([0, 0, -blade_thickness/2])\n            linear_extrude(height=blade_thickness)\n                polygon(points=[\n                    [0, 0],\n                    [blade_length*0.3, -blade_width*0.8],\n                    [blade_length*0.7, -blade_width*1.2],\n                    [blade_length, -blade_width*0.6],\n                    [blade_length*0.95, -blade_width*0.3],\n                    [blade_length*0.85, 0],\n                    [blade_length*0.7, blade_width*0.3],\n                    [blade_length*0.4, blade_width*0.5],\n                    [0, blade_width*0.4]\n                ]);\n        \n        // Inner cutting edge curve\n        translate([0, 0, -blade_thickness/2 - 0.1])\n            linear_extrude(height=blade_thickness + 0.2)\n                polygon(points=[\n                    [blade_length*0.15, -blade_width*0.2],\n                    [blade_length*0.5, -blade_width*0.6],\n                    [blade_length*0.85, -blade_width*0.3],\n                    [blade_length*0.8, 0],\n                    [blade_length*0.65, blade_width*0.2],\n                    [blade_length*0.3, blade_width*0.3]\n                ]);\n    }\n    \n    // Reinforcement ridge along back\n    translate([0, 0, -blade_thickness/2 - 1])\n        linear_extrude(height=2)\n            polygon(points=[\n                [0, blade_width*0.4],\n                [blade_length*0.3, blade_width*0.6],\n                [blade_length*0.7, blade_width*0.3],\n                [blade_length*0.85, 0],\n                [blade_length*0.7, -blade_width*0.3],\n                [blade_length*0.3, -blade_width*0.5],\n                [0, -blade_width*0.4]\n            ]);\n}\n\n// Connection bracket between handle and blade\nmodule connection_bracket() {\n    // Main bracket body\n    translate([0, 0, -handle_diameter/2 - 3])\n        cube([handle_diameter*1.5, handle_diameter*2, 6], center=true);\n    \n    // Mounting holes for blade attachment\n    for(x = [-3, 3]) {\n        translate([x, 0, -handle_diameter/2 - 4])\n            cylinder(d=2, h=8, $fn=8);\n    }\n}\n\n// Assemble the scythe\nmodule scythe() {\n    // Handle assembly\n    union() {\n        // Main handle\n        translate([0, 0, 0])\n            handle();\n        \n        // Connection bracket at top\n        translate([0, 0, handle_length - 10])\n            connection_bracket();\n        \n        // Blade attached to bracket\n        translate([0, handle_diameter, handle_length - 10])\n            rotate([0, 90, 0])\n                blade();\n    }\n}\n\n// Render the complete scythe\nscythe();",
    "renders": true
  },
  {
    "sports_equipment": "sickle",
    "openscad_code": "// Sickle Furniture - Wall-Mounted Coat Hook\n// Realistic style, medium complexity\n// Overall dimensions: ~140mm tall x 60mm deep x 15mm thick\n\n// Parameters\nhook_thickness = 3;\nwall_plate_width = 60;\nwall_plate_height = 80;\nwall_plate_depth = 15;\nblade_radius = 35;\nblade_thickness = 3;\nhandle_length = 100;\nhandle_radius = 6;\ngrip_rings = 8;\n\n// Wall mounting plate with screw holes\nmodule wall_plate() {\n    difference() {\n        // Main plate\n        cube([wall_plate_width, wall_plate_depth, wall_plate_height], center=true);\n        \n        // Two screw holes\n        translate([20, 0, 25]) cylinder(h=wall_plate_depth+1, r=2, center=true, $fn=20);\n        translate([-20, 0, 25]) cylinder(h=wall_plate_depth+1, r=2, center=true, $fn=20);\n        \n        // Keyhole slots\n        translate([20, 0, -25]) cylinder(h=wall_plate_depth+1, r=3.5, center=true, $fn=20);\n        translate([-20, 0, -25]) cylinder(h=wall_plate_depth+1, r=3.5, center=true, $fn=20);\n        translate([20, 0, -28]) cube([7, wall_plate_depth+1, 6], center=true);\n        translate([-20, 0, -28]) cube([7, wall_plate_depth+1, 6], center=true);\n    }\n}\n\n// Curved blade hook\nmodule blade() {\n    difference() {\n        // Outer blade curve\n        translate([0, -blade_thickness/2, 0]) \n            rotate([0, 90, 0]) \n                cylinder(h=blade_thickness, r=blade_radius, center=true, $fn=100);\n        \n        // Inner blade curve\n        translate([0, -blade_thickness/2, 0]) \n            rotate([0, 90, 0]) \n                cylinder(h=blade_thickness+1, r=blade_radius-12, center=true, $fn=100);\n        \n        // Flat back\n        translate([0, -blade_thickness-1, 0]) cube([blade_radius*2+2, blade_thickness+2, blade_thickness*2], center=true);\n        \n        // Smooth end\n        translate([blade_radius-5, 0, 0]) sphere(r=5, $fn=20);\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    union() {\n        // Main handle cylinder\n        rotate([90, 0, 0]) \n            cylinder(h=handle_length, r=handle_radius, center=true, $fn=32);\n        \n        // Grip rings\n        for(i = [0:grip_rings-1]) {\n            translate([0, 0, -handle_length/2 + (i+0.5)*(handle_length/grip_rings)]) \n                cylinder(h=2, r=handle_radius+1, center=true, $fn=32);\n        }\n        \n        // End cap\n        translate([0, 0, -handle_length/2-2]) \n            sphere(r=handle_radius+1, $fn=32);\n    }\n}\n\n// Reinforcement bracket\nmodule bracket() {\n    difference() {\n        union() {\n            // Main bracket\n            translate([0, 0, 0]) \n                rotate([45, 0, 0]) \n                    cube([20, 8, 20], center=true);\n            \n            // Gussets\n            translate([10, 0, 0]) \n                rotate([0, 0, 45]) \n                    cube([5, 8, 5], center=true);\n            translate([-10, 0, 0]) \n                rotate([0, 0, 45]) \n                    cube([5, 8, 5], center=true);\n        }\n        \n        // Lightening holes\n        translate([7, 0, 0]) cylinder(h=10, r=2, center=true, $fn=16);\n        translate([-7, 0, 0]) cylinder(h=10, r=2, center=true, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    // Wall plate\n    wall_plate();\n    \n    // Blade hook\n    translate([0, wall_plate_depth/2 + blade_thickness/2, wall_plate_height/2 - 10]) \n        blade();\n    \n    // Handle\n    translate([0, wall_plate_depth/2 + handle_radius, -wall_plate_height/2 + 15]) \n        rotate([0, 90, 0]) \n            handle();\n    \n    // Bracket connections\n    translate([0, wall_plate_depth/2, wall_plate_height/2 - 25]) \n        bracket();\n    translate([0, wall_plate_depth/2, -wall_plate_height/2 + 25]) \n        bracket();\n}",
    "renders": true
  },
  {
    "sports_equipment": "flail",
    "openscad_code": "// Realistic Flail Furniture - 3D Printable OpenSCAD Model\n// Overall size: ~120mm length\n\n// Parameters\nhandle_length = 100;\nhandle_diameter = 12;\nchain_link_length = 8;\nchain_link_diameter = 3;\nspike_ball_diameter = 25;\nspike_length = 8;\nwall_thickness = 2;\n$fn = 32;\n\n// Main module\nmodule flail() {\n    // Handle with grip texture\n    translate([0, 0, handle_length/2])\n        handle();\n    \n    // Chain connection point\n    translate([0, 0, handle_length])\n        connection_ring();\n    \n    // Chain links\n    for(i = [1:4]) {\n        translate([0, 0, handle_length + (i * chain_link_length)])\n            chain_link();\n    }\n    \n    // Spiked ball\n    translate([0, 0, handle_length + 5 * chain_link_length])\n        spiked_ball();\n}\n\n// Handle with grip rings\nmodule handle() {\n    difference() {\n        // Main handle tube\n        cylinder(h=handle_length, d=handle_diameter, center=true);\n        \n        // Grip rings carved out\n        for(i = [1:8]) {\n            translate([0, 0, -handle_length/2 + i * 10])\n                cylinder(h=2, d=handle_diameter - wall_thickness, center=true);\n        }\n    }\n    \n    // End cap\n    translate([0, 0, handle_length/2 + 2])\n        cylinder(h=4, d=handle_diameter + 2, center=true);\n}\n\n// Connection ring for chain\nmodule connection_ring() {\n    rotate([90, 0, 0])\n        difference() {\n            cylinder(h=6, d=10, center=true);\n            cylinder(h=8, d=6, center=true);\n        }\n}\n\n// Individual chain link\nmodule chain_link() {\n    rotate([90, 0, 0]) {\n        difference() {\n            // Outer cylinder\n            cylinder(h=chain_link_length, d=chain_link_diameter + 2, center=true);\n            // Inner hole\n            cylinder(h=chain_link_length + 1, d=chain_link_diameter, center=true);\n        }\n    }\n}\n\n// Spiked ball\nmodule spiked_ball() {\n    union() {\n        // Main ball\n        sphere(d=spike_ball_diameter);\n        \n        // Spikes - 8 around equator\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([spike_ball_diameter/2 + spike_length/2, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=spike_length, d=4, center=true);\n        }\n        \n        // Spikes - 4 vertical\n        for(i = [0:3]) {\n            rotate([i * 90, 0, 0])\n                translate([0, 0, spike_ball_diameter/2 + spike_length/2])\n                    cylinder(h=spike_length, d=4, center=true);\n        }\n    }\n}\n\n// Generate the model\nflail();",
    "renders": true
  },
  {
    "sports_equipment": "fork",
    "openscad_code": "// Fork Furniture - Realistic Style, Medium Complexity\n// A dining fork designed as furniture, 3D printable with proper wall thickness\n// Overall dimensions: ~30mm wide, 150mm long, 10mm thick\n\n// Wall thickness constant\nwall = 2;\n\n// Fork handle parameters\nhandle_len = 100;\nhandle_w = 12;\nhandle_h = 8;\n\n// Fork head parameters\nhead_len = 50;\nhead_w = 30;\nhead_h = 6;\ntine_count = 4;\ntine_w = 3;\ntine_gap = 2.5;\n\n// Joint parameters\njoint_r = 6;\njoint_h = 10;\n\nmodule fork_handle() {\n    // Main handle with ergonomic grip\n    translate([0, 0, handle_h/2])\n        difference() {\n            // Handle body with rounded edges\n            minkowski() {\n                cube([handle_len, handle_w, handle_h], center=true);\n                sphere(r=2);\n            }\n            \n            // Grip texture - shallow grooves\n            for(i = [-1:1]) {\n                translate([i*15-15, 0, handle_h/2-1])\n                    cube([20, handle_w-2, 2], center=true);\n            }\n            \n            // Hanging hole\n            translate([handle_len/2-15, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=handle_w+2, r=3, center=true);\n        }\n}\n\nmodule fork_joint() {\n    // Transition piece between handle and head\n    translate([handle_len/2-joint_r, 0, 0])\n        union() {\n            // Main joint cylinder\n            cylinder(h=joint_h, r=joint_r, center=true);\n            \n            // Reinforcement rings\n            for(i = [-1, 1]) {\n                translate([0, 0, i*joint_h/3])\n                    cylinder(h=2, r=joint_r+1, center=true);\n            }\n        }\n}\n\nmodule fork_head() {\n    // Fork head with tines\n    translate([handle_len/2+head_len/2-joint_r, 0, 0])\n        union() {\n            // Base plate\n            translate([0, 0, head_h/2])\n                cube([head_len, head_w, head_h], center=true);\n            \n            // Individual tines\n            for(i = [0:tine_count-1]) {\n                y_pos = -head_w/2 + tine_w/2 + i*(tine_w + tine_gap) + tine_gap/2;\n                \n                // Tine base\n                translate([0, y_pos, head_h/2])\n                    cube([head_len, tine_w, head_h], center=true);\n                \n                // Tine tip - tapered\n                translate([head_len/2-tine_w, y_pos, head_h/2])\n                    scale([1, 0.5, 1])\n                        rotate([0, 0, -45])\n                            cube([tine_w*2, tine_w*2, head_h], center=true);\n            }\n            \n            // Structural ribs between tines\n            for(i = [1:tine_count-1]) {\n                y_pos = -head_w/2 + i*(tine_w + tine_gap);\n                translate([0, y_pos, 0])\n                    cube([head_len, tine_gap, head_h], center=true);\n            }\n        }\n}\n\n// Base support for furniture stability\nmodule base_support() {\n    translate([0, 0, -handle_h/2-1])\n        cube([handle_len+head_len, head_w+4, 2], center=true);\n}\n\n// Assembly\nunion() {\n    fork_handle();\n    fork_joint();\n    fork_head();\n    base_support();\n}",
    "renders": true
  },
  {
    "sports_equipment": "spade",
    "openscad_code": "// Spade Furniture - Realistic Style, Medium Complexity\n// Dimensions: ~120mm tall, proper wall thickness for 3D printing\n\n// Parameters\nhandle_d = 12;\nhandle_l = 80;\ngrip_d = 14;\ngrip_l = 25;\nshaft_d = 8;\nshaft_l = 45;\nsocket_d = 16;\nsocket_l = 20;\nblade_w = 85;\nblade_h = 60;\nblade_t = 2.5;\n\n// Main assembly\nmodule spade_furniture() {\n    union() {\n        // Handle with grip texture\n        translate([0, 0, shaft_l + socket_l + blade_h - handle_l]) \n            handle();\n        \n        // Shaft\n        translate([0, 0, socket_l + blade_h]) \n            cylinder(h=shaft_l, d=shaft_d, $fn=32);\n        \n        // Socket connection\n        translate([0, 0, blade_h]) \n            socket();\n        \n        // Blade with step detail\n        blade();\n        \n        // Structural reinforcement ribs\n        reinforcement();\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    difference() {\n        // Main handle\n        union() {\n            cylinder(h=handle_l - grip_l, d=handle_d, $fn=32);\n            translate([0, 0, handle_l - grip_l]) \n                cylinder(h=grip_l, d=grip_d, $fn=32);\n        }\n        \n        // Grip texture grooves\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) \n                translate([handle_d/2 - 1, 0, handle_l - grip_l + 5]) \n                    cube([2, grip_d, grip_l - 10], center=true);\n        }\n        \n        // End cap detail\n        translate([0, 0, handle_l]) \n            cylinder(h=5, d1=handle_d, d2=handle_d - 2, $fn=32);\n    }\n}\n\n// Socket for blade connection\nmodule socket() {\n    difference() {\n        cylinder(h=socket_l, d=socket_d, $fn=32);\n        \n        // Internal shaft hole\n        translate([0, 0, -1]) \n            cylinder(h=socket_l + 2, d=shaft_d + 0.5, $fn=32);\n        \n        // Mounting screw holes\n        for(i = [0:1]) {\n            translate([0, socket_d/2 - 3, 5 + i * 10]) \n                rotate([90, 0, 0]) \n                    cylinder(h=10, d=3, $fn=16);\n        }\n    }\n}\n\n// Blade with realistic shape\nmodule blade() {\n    difference() {\n        // Main blade body\n        union() {\n            // Curved blade\n            linear_extrude(height=blade_t) {\n                difference() {\n                    // Outer shape\n                    polygon([\n                        [0, 0],\n                        [blade_w/2, 0],\n                        [blade_w/2 - 5, blade_h * 0.3],\n                        [blade_w/2 - 10, blade_h * 0.6],\n                        [blade_w/2 - 15, blade_h],\n                        [0, blade_h],\n                        [-blade_w/2 + 15, blade_h],\n                        [-blade_w/2 + 10, blade_h * 0.6],\n                        [-blade_w/2 + 5, blade_h * 0.3],\n                        [-blade_w/2, 0]\n                    ]);\n                    \n                    // Inner curve\n                    offset(r=-3) {\n                        polygon([\n                            [0, 0],\n                            [blade_w/2 - 20, 0],\n                            [blade_w/2 - 25, blade_h * 0.3],\n                            [blade_w/2 - 30, blade_h * 0.6],\n                            [blade_w/2 - 35, blade_h],\n                            [0, blade_h - 5],\n                            [-blade_w/2 + 35, blade_h],\n                            [-blade_w/2 + 30, blade_h * 0.6],\n                            [-blade_w/2 + 25, blade_h * 0.3],\n                            [-blade_w/2 + 20, 0]\n                        ]);\n                    }\n                }\n            }\n            \n            // Center spine\n            translate([0, 0, 0]) \n                cube([5, blade_h, blade_t + 1], center=false);\n        }\n        \n        // Drainage hole\n        translate([0, blade_h * 0.4, -1]) \n            cylinder(h=blade_t + 2, d=6, $fn=32);\n    }\n}\n\n// Structural reinforcement ribs\nmodule reinforcement() {\n    for(i = [-1:1]) {\n        translate([i * 20, blade_h - 5, blade_t/2]) \n            rotate([90, 0, 0]) \n                cylinder(h=10, d=3, $fn=16);\n    }\n}\n\n// Generate the model\nspade_furniture();",
    "renders": true
  },
  {
    "sports_equipment": "bucket",
    "openscad_code": "// Furniture-style Bucket (Medium Detail)\n// Dimensions: 80mm diameter, 90mm height, 2mm wall thickness\n\n$fn = 36;\n\nmodule bucket_body() {\n    difference() {\n        // Outer wall\n        cylinder(h = 80, d1 = 80, d2 = 70);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = 78, d1 = 76, d2 = 66);\n    }\n}\n\nmodule bottom_base() {\n    difference() {\n        // Base disk\n        cylinder(h = 4, d = 80);\n        \n        // Weight reduction holes\n        for (i = [1:6]) {\n            rotate([0, 0, i * 60])\n                translate([25, 0, 1])\n                    cylinder(h = 3, d = 8);\n        }\n    }\n}\n\nmodule handle_mount() {\n    // Mounting brackets for handle\n    translate([0, 40, 70])\n        rotate([90, 0, 0])\n            difference() {\n                // Bracket body\n                cylinder(h = 8, d = 12);\n                \n                // Screw hole\n                cylinder(h = 9, d = 4);\n            }\n}\n\nmodule handle() {\n    // Handle grip\n    translate([0, 0, 85])\n        rotate([0, 0, 0])\n            difference() {\n                // Main handle arc\n                rotate_extrude(angle = 180, $fn = 32)\n                    translate([38, 0, 0])\n                        circle(d = 8);\n                \n                // Grip texture grooves\n                for (i = [-20:5:20]) {\n                    rotate([0, i, 0])\n                        translate([38, 0, -4])\n                            cube([16, 1, 8], center = true);\n                }\n            }\n}\n\nmodule reinforcement_ring() {\n    // Structural ring at top\n    translate([0, 0, 78])\n        difference() {\n            cylinder(h = 6, d1 = 84, d2 = 82);\n            cylinder(h = 7, d1 = 78, d2 = 76);\n        }\n}\n\nmodule furniture_feet() {\n    // Furniture-style feet for stability\n    for (i = [0:90:270]) {\n        rotate([0, 0, i])\n            translate([30, 30, -2])\n                difference() {\n                    // Foot base\n                    cube([12, 12, 4], center = true);\n                    \n                    // Rounded corners\n                    translate([4, 4, 0])\n                        cylinder(h = 5, d = 8);\n                    translate([-4, 4, 0])\n                        cylinder(h = 5, d = 8);\n                    translate([4, -4, 0])\n                        cylinder(h = 5, d = 8);\n                    translate([-4, -4, 0])\n                        cylinder(h = 5, d = 8);\n                }\n    }\n}\n\n// Assembly\nunion() {\n    // Main bucket\n    bucket_body();\n    \n    // Base\n    translate([0, 0, -4])\n        bottom_base();\n    \n    // Reinforcement\n    reinforcement_ring();\n    \n    // Handle mounts (both sides)\n    handle_mount();\n    mirror([0, 1, 0])\n        handle_mount();\n    \n    // Handle\n    handle();\n    \n    // Furniture feet\n    furniture_feet();\n}",
    "renders": true
  },
  {
    "sports_equipment": "ladle",
    "openscad_code": "// Ladle furniture item - realistic style, medium complexity\n// 3D printable ladle with wall thickness ~2mm\n\n// Parameters\n$fn = 50;  // Smooth curves\nhandle_length = 120;\nhandle_diameter = 12;\nbowl_radius = 35;\nbowl_depth = 30;\nwall_thickness = 2;\n\n// Main ladle module\nmodule ladle() {\n    // Handle with grip texture\n    handle();\n    \n    // Bowl with pouring spout\n    bowl();\n    \n    // Transition joint\n    joint();\n}\n\n// Handle module with grip rings\nmodule handle() {\n    // Main handle tube - hollow\n    difference() {\n        // Outer handle\n        translate([0, 0, handle_length/2])\n            cylinder(h=handle_length, d=handle_diameter, center=true);\n        \n        // Inner hollow\n        translate([0, 0, handle_length/2])\n            cylinder(h=handle_length+2, d=handle_diameter-wall_thickness*2, center=true);\n    }\n    \n    // Grip rings for furniture-style handling\n    for(i = [1:8:handle_length-20]) {\n        translate([0, 0, i+10])\n            cylinder(h=3, d=handle_diameter+3, $fn=20);\n    }\n    \n    // End cap\n    translate([0, 0, handle_length-1])\n        cylinder(h=2, d=handle_diameter+1);\n}\n\n// Bowl module with realistic curve\nmodule bowl() {\n    // Outer bowl\n    difference() {\n        // Main bowl shape\n        translate([0, 0, 0])\n            sphere(r=bowl_radius);\n        \n        // Flatten bottom\n        translate([0, 0, -bowl_radius])\n            cube([bowl_radius*2, bowl_radius*2, bowl_radius], center=true);\n        \n        // Inner hollow\n        translate([0, 0, wall_thickness])\n            sphere(r=bowl_radius-wall_thickness);\n    }\n    \n    // Pouring spout\n    translate([bowl_radius-5, 0, 5])\n        rotate([0, 90, 0])\n            cylinder(h=15, r1=8, r2=5);\n}\n\n// Joint connecting handle to bowl\nmodule joint() {\n    // Reinforcement ring\n    translate([0, 0, bowl_radius-5])\n        rotate([90, 0, 0])\n            cylinder(h=15, r1=handle_diameter/2+3, r2=handle_diameter/2+5);\n    \n    // Smooth transition\n    hull() {\n        translate([0, 0, bowl_radius-5])\n            sphere(d=handle_diameter+4);\n        translate([0, 0, handle_length/2-10])\n            sphere(d=handle_diameter);\n    }\n}\n\n// Position the ladle for printing\nrotate([0, -90, 0])\n    translate([0, 0, -bowl_radius])\n        ladle();",
    "renders": true
  },
  {
    "sports_equipment": "pot",
    "openscad_code": "// Realistic Pot Furniture Item\n// Medium complexity OpenSCAD model\n// Wall thickness: 2mm for 3D printing\n// Overall dimensions: 80mm diameter x 70mm height\n\n// Main parameters\npot_diameter = 80;\npot_height = 70;\nwall_thickness = 2;\nbase_thickness = 4;\n\n// Create the main pot body\nmodule pot_body() {\n    difference() {\n        // Outer shell - tapered cylinder\n        cylinder(h=pot_height, d1=pot_diameter, d2=pot_diameter*0.85, $fn=64);\n        \n        // Inner hollow space\n        translate([0, 0, base_thickness])\n        cylinder(h=pot_height-base_thickness, d1=pot_diameter-wall_thickness*2, d2=pot_diameter*0.85-wall_thickness*2, $fn=64);\n    }\n}\n\n// Create drainage holes pattern\nmodule drainage_holes() {\n    // Base drainage holes\n    for(i=[-20:20:20]) {\n        for(j=[-20:20:20]) {\n            if(abs(i) + abs(j) > 10) {\n                translate([i, j, 0])\n                cylinder(h=base_thickness+1, d=3, $fn=16);\n            }\n        }\n    }\n}\n\n// Create rim detail\nmodule pot_rim() {\n    // Upper rim with slight lip\n    translate([0, 0, pot_height-3])\n    difference() {\n        cylinder(h=3, d=pot_diameter+4, $fn=64);\n        cylinder(h=3, d=pot_diameter, $fn=64);\n    }\n}\n\n// Create side handles\nmodule handles() {\n    // Left handle\n    translate([-pot_diameter/2-5, 0, pot_height/2])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=12, d=6, $fn=16);\n        cylinder(h=12, d=3, $fn=16);\n    }\n    \n    // Right handle\n    translate([pot_diameter/2+5, 0, pot_height/2])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=12, d=6, $fn=16);\n        cylinder(h=12, d=3, $fn=16);\n    }\n}\n\n// Create decorative band around middle\nmodule decorative_band() {\n    translate([0, 0, pot_height/2])\n    difference() {\n        cylinder(h=4, d=pot_diameter+2, $fn=64);\n        cylinder(h=4, d=pot_diameter-2, $fn=64);\n    }\n}\n\n// Create textured surface pattern\nmodule surface_texture() {\n    // Vertical grooves for grip\n    for(angle=[0:15:359]) {\n        rotate([0, 0, angle])\n        translate([pot_diameter/2-1, 0, 5])\n        cube([2, 1, pot_height-10], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    pot_body();\n    \n    // Drainage system\n    difference() {\n        // Keep the base solid for subtraction\n        translate([0, 0, 0])\n        cube([pot_diameter, pot_diameter, base_thickness], center=true);\n        drainage_holes();\n    }\n    \n    // Structural and decorative elements\n    pot_rim();\n    handles();\n    decorative_band();\n    \n    // Surface details\n    intersection() {\n        pot_body();\n        surface_texture();\n    }\n}\n\n// Add feet for stability\nmodule feet() {\n    for(pos=[[-25, -25], [25, -25], [-25, 25], [25, 25]]) {\n        translate([pos[0], pos[1], -3])\n        cylinder(h=3, d=8, $fn=16);\n    }\n}\n\n// Attach feet\nfeet();",
    "renders": true
  },
  {
    "sports_equipment": "pan",
    "openscad_code": "// Pan - realistic style, medium complexity\n// A miniature kitchen pan suitable for dollhouse furniture or playset\n\n// Overall dimensions in mm\npan_diameter = 80;\npan_height = 25;\nhandle_length = 60;\nhandle_diameter = 12;\nwall_thickness = 2;\n\n// Main pan body - cylindrical with rounded bottom\nmodule pan_body() {\n    difference() {\n        // Outer shape - cylinder with rounded bottom\n        union() {\n            cylinder(h=pan_height, d=pan_diameter, $fn=64);\n            translate([0, 0, -pan_height/10])\n                sphere(d=pan_diameter, $fn=64);\n        }\n        \n        // Inner cavity for cooking surface\n        translate([0, 0, -pan_height/8])\n            cylinder(h=pan_height*1.2, d=pan_diameter-wall_thickness*2, $fn=64);\n        translate([0, 0, -pan_height/4])\n            sphere(d=pan_diameter-wall_thickness*2, $fn=64);\n    }\n}\n\n// Pan rim/lip\nmodule pan_rim() {\n    difference() {\n        // Outer rim\n        cylinder(h=wall_thickness*1.5, d=pan_diameter+wall_thickness, $fn=64);\n        \n        // Inner cutout\n        cylinder(h=wall_thickness*2, d=pan_diameter, $fn=64);\n    }\n}\n\n// Handle connection point\nmodule handle_base() {\n    translate([pan_diameter/2 - wall_thickness, 0, pan_height/2]) {\n        rotate([90, 0, 0])\n            cylinder(h=pan_diameter/4, d=wall_thickness*4, $fn=32);\n    }\n}\n\n// Main handle with grip texture\nmodule handle() {\n    translate([pan_diameter/2 + handle_length/2, 0, pan_height/2]) {\n        rotate([0, 0, 0]) {\n            // Handle shaft\n            cylinder(h=handle_length, d=handle_diameter, $fn=32);\n            \n            // Grip rings for texture\n            for(i = [1:handle_length/8 - 1]) {\n                translate([0, 0, i*8 - handle_length/2])\n                    cylinder(h=2, d=handle_diameter+2, $fn=32);\n            }\n            \n            // Handle end cap\n            translate([0, 0, handle_length/2])\n                sphere(d=handle_diameter*1.2, $fn=32);\n        }\n    }\n}\n\n// Hanging hole in handle\nmodule hanging_hole() {\n    translate([pan_diameter/2 + handle_length*0.8, 0, pan_height/2]) {\n        rotate([90, 0, 0])\n            cylinder(h=handle_diameter*1.5, d=4, $fn=16);\n    }\n}\n\n// Pan bottom heat diffuser pattern\nmodule bottom_pattern() {\n    translate([0, 0, -pan_height/4]) {\n        for(i = [0:5]) {\n            rotate([0, 0, i*30])\n                translate([pan_diameter/3, 0, 0])\n                    cylinder(h=1, d=pan_diameter/8, $fn=6);\n        }\n    }\n}\n\n// Assemble the complete pan\nunion() {\n    // Main components\n    pan_body();\n    translate([0, 0, pan_height-wall_thickness/2])\n        pan_rim();\n    handle_base();\n    handle();\n    \n    // Add bottom details\n    bottom_pattern();\n    \n    // Remove hanging hole\n    difference() {\n        children();\n        hanging_hole();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "griddle",
    "openscad_code": "// Realistic Griddle Furniture (Medium Complexity)\n// Dimensions: 120 x 80 x 55 mm\n// Wall thickness: 2mm throughout\n\n// Main module\nmodule griddle() {\n    // Base frame structure\n    base_frame();\n    \n    // Griddle top plate\n    griddle_top();\n    \n    // Side handles\n    left_handle();\n    right_handle();\n    \n    // Support legs\n    legs();\n    \n    // Heat diffuser plate\n    diffuser();\n}\n\n// Base frame structure\nmodule base_frame() {\n    // Bottom frame rails\n    translate([0, 0, 5]) {\n        // Front rail\n        cube([120, 8, 10], center=true);\n        // Back rail\n        translate([0, 72, 0]) cube([120, 8, 10], center=true);\n        // Left rail\n        translate([-56, 40, 0]) cube([8, 80, 10], center=true);\n        // Right rail\n        translate([56, 40, 0]) cube([8, 80, 10], center=true);\n    }\n    \n    // Corner brackets\n    for(x = [-50, 50])\n        for(y = [20, 60]) {\n            translate([x, y, 10]) {\n                difference() {\n                    cube([12, 12, 4], center=true);\n                    translate([0, 0, -2]) cylinder(h=5, r=3, center=true);\n                }\n            }\n        }\n}\n\n// Griddle top cooking surface\nmodule griddle_top() {\n    // Main plate\n    translate([0, 40, 28]) {\n        difference() {\n            // Solid plate\n            cube([110, 70, 4], center=true);\n            \n            // Drain channel\n            translate([0, -30, -1]) cube([100, 8, 6], center=true);\n            \n            // Drain hole\n            translate([45, -30, -1]) cylinder(h=5, r=4, center=true);\n        }\n        \n        // Cooking surface texture\n        for(x = [-45:15:45])\n            for(y = [-25:10:25]) {\n                translate([x, y, 2.1]) {\n                    difference() {\n                        cube([8, 6, 0.5], center=true);\n                        translate([0, 0, -0.2]) cube([7, 5, 0.9], center=true);\n                    }\n                }\n            }\n    }\n    \n    // Side walls\n    translate([0, 40, 30]) {\n        // Front wall\n        translate([0, -35, 0]) cube([110, 2, 8], center=true);\n        // Back wall\n        translate([0, 35, 0]) cube([110, 2, 8], center=true);\n        // Left wall\n        translate([-55, 0, 0]) cube([2, 70, 8], center=true);\n        // Right wall\n        translate([55, 0, 0]) cube([2, 70, 8], center=true);\n    }\n}\n\n// Left handle\nmodule left_handle() {\n    translate([-65, 40, 35]) {\n        // Handle grip\n        rotate([0, 90, 0]) cylinder(h=20, r=4, center=true);\n        \n        // Mounting bracket\n        translate([0, 0, -8]) cube([10, 8, 8], center=true);\n        \n        // Grip texture rings\n        for(z = [-8:4:8]) {\n            translate([0, 0, z]) rotate([0, 90, 0]) \n                cylinder(h=1, r=4.5, center=true);\n        }\n    }\n}\n\n// Right handle\nmodule right_handle() {\n    mirror([1, 0, 0]) left_handle();\n}\n\n// Support legs\nmodule legs() {\n    // Generate 4 legs at corners\n    for(x = [-45, 45])\n        for(y = [15, 65]) {\n            translate([x, y, 0]) leg();\n        }\n}\n\n// Single leg module\nmodule leg() {\n    // Main leg post\n    cylinder(h=25, r=4, center=false);\n    \n    // Foot pad\n    translate([0, 0, -1]) \n        cylinder(h=3, r=6, center=false);\n    \n    // Reinforcement gusset\n    translate([0, 0, 15]) {\n        difference() {\n            cube([8, 8, 8], center=true);\n            cylinder(h=9, r=4, center=true);\n        }\n    }\n}\n\n// Heat diffuser plate\nmodule diffuser() {\n    translate([0, 40, 15]) {\n        // Perforated plate\n        cube([100, 60, 2], center=true);\n        \n        // Ventilation holes\n        for(x = [-40:10:40])\n            for(y = [-20:10:20]) {\n                translate([x, y, 0]) \n                    cylinder(h=3, r=3, center=true);\n            }\n    }\n}\n\n// Render the griddle\ngriddle();",
    "renders": true
  },
  {
    "sports_equipment": "pestle",
    "openscad_code": "// Pestle Furniture - Realistic Style, Medium Complexity\n// A functional pestle designed as a furniture item with proper proportions and details\n\n$fn = 64;\n\n// Overall dimensions\npestle_length = 120;\npestle_max_diameter = 35;\nhandle_length = 80;\nbase_length = 40;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule pestle_handle() {\n    // Main handle with ergonomic grip\n    difference() {\n        // Main handle cylinder\n        cylinder(h = handle_length, d = 30, center = false);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 5])\n            cylinder(h = handle_length - 10, d = 30 - (2 * wall_thickness), center = false);\n        \n        // Rounded top\n        translate([0, 0, handle_length])\n            sphere(d = 30);\n    }\n    \n    // Grip rings for better handling\n    for(i = [1:5]) {\n        translate([0, 0, i * 12])\n            difference() {\n                cylinder(h = 3, d1 = 32, d2 = 32);\n                cylinder(h = 3, d1 = 28, d2 = 28);\n            }\n    }\n}\n\nmodule pestle_base() {\n    // Tapered grinding base\n    difference() {\n        // Outer shape - tapered cylinder\n        cylinder(h = base_length, d1 = pestle_max_diameter, d2 = 25, center = false);\n        \n        // Hollow interior\n        translate([0, 0, 5])\n            cylinder(h = base_length - 10, d1 = pestle_max_diameter - (2 * wall_thickness), d2 = 25 - (2 * wall_thickness), center = false);\n        \n        // Rounded bottom for smooth grinding\n        translate([0, 0, base_length])\n            sphere(d = 25);\n    }\n    \n    // Reinforcement rings for structural integrity\n    translate([0, 0, 10])\n        difference() {\n            cylinder(h = 2, d = pestle_max_diameter + 4);\n            cylinder(h = 2, d = pestle_max_diameter - 2);\n        }\n    \n    translate([0, 0, 25])\n        difference() {\n            cylinder(h = 2, d = 32);\n            cylinder(h = 2, d = 28);\n        }\n}\n\nmodule joint_connector() {\n    // Connecting joint between handle and base\n    difference() {\n        // Main connector\n        cylinder(h = 15, d1 = 30, d2 = pestle_max_diameter, center = false);\n        \n        // Hollow center\n        cylinder(h = 15, d1 = 30 - (2 * wall_thickness), d2 = pestle_max_diameter - (2 * wall_thickness), center = false);\n    }\n    \n    // Structural ribs for strength\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([-2, 0, 0])\n                cube([4, 16, 15]);\n    }\n}\n\n// Assemble the complete pestle\nunion() {\n    // Handle section\n    pestle_handle();\n    \n    // Connector section\n    translate([0, 0, handle_length - 5])\n        joint_connector();\n    \n    // Base section\n    translate([0, 0, handle_length + 10])\n        pestle_base();\n}",
    "renders": true
  },
  {
    "sports_equipment": "mill",
    "openscad_code": "// Traditional Windmill Furniture Piece\n// A decorative windmill-inspired shelving unit\n\n// Overall dimensions\nmill_height = 120;\nbase_width = 60;\nbase_depth = 60;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Base structure\nmodule base_structure() {\n    // Main base platform\n    difference() {\n        cube([base_width, base_depth, 10], center=true);\n        translate([0, 0, 5])\n            cube([base_width-wall_thickness*2, base_depth-wall_thickness*2, 10], center=true);\n    }\n    \n    // Corner posts\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x*25, y*25, 5])\n            cylinder(h=20, r=3, center=true);\n    }\n}\n\n// Central post\nmodule central_post() {\n    translate([0, 0, 60])\n        cylinder(h=mill_height-10, r=8, center=true);\n}\n\n// Shelves\nmodule shelves() {\n    shelf_positions = [20, 45, 70, 95];\n    for(pos = shelf_positions) {\n        translate([0, 0, pos])\n            difference() {\n                cube([50, 50, 3], center=true);\n                translate([0, 0, 1.5])\n                    cube([46, 46, 3], center=true);\n            }\n    }\n}\n\n// Mill blades\nmodule mill_blades() {\n    blade_length = 35;\n    blade_width = 8;\n    blade_thickness = 2;\n    \n    // Hub\n    translate([0, 0, mill_height])\n        cylinder(h=8, r=6, center=true);\n    \n    // Four blades\n    for(i = [0:90:270]) {\n        rotate([0, 0, i])\n        translate([blade_length/2, 0, mill_height])\n            cube([blade_length, blade_width, blade_thickness], center=true);\n    }\n}\n\n// Roof structure\nmodule roof() {\n    // Main roof\n    translate([0, 0, mill_height+15])\n        cylinder(h1=20, h2=0, r1=25, r2=5, center=true);\n    \n    // Roof ridge cap\n    translate([0, 0, mill_height+25])\n        sphere(r=3);\n}\n\n// Decorative braces\nmodule braces() {\n    // Diagonal braces between posts\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x*20, y*20, 10])\n            rotate([0, 0, atan(40/20)])\n            cube([sqrt(20*20+40*40), 3, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base and structure\n    base_structure();\n    \n    // Central support\n    central_post();\n    \n    // Shelving system\n    shelves();\n    \n    // Windmill mechanism\n    mill_blades();\n    \n    // Roof\n    roof();\n    \n    // Bracing\n    braces();\n}",
    "renders": true
  },
  {
    "sports_equipment": "quern",
    "openscad_code": "// Quern furniture - traditional hand mill for grinding grain\n// Overall dimensions: 120mm diameter x 80mm height\n\n$fn = 36;\n\n// Main parameters\nbase_dia = 120;\nbase_h = 15;\nstone_dia = 100;\nstone_h = 25;\nhandle_len = 40;\nhandle_dia = 8;\nwall_thickness = 2;\n\n// Base structure with furniture legs\nmodule base_structure() {\n    // Main circular base\n    cylinder(h=base_h, d=base_dia);\n    \n    // Four support legs for stability\n    for(i=[0:90:270]) {\n        rotate([0,0,i])\n        translate([base_dia/2 - 10, 0, 0])\n        cube([20, 15, base_h + 5], center=true);\n    }\n    \n    // Center support post\n    cylinder(h=base_h + 10, d=30, center=true);\n    \n    // Collection trough around base\n    difference() {\n        cylinder(h=base_h - 5, d=base_dia + 20);\n        translate([0,0,wall_thickness])\n        cylinder(h=base_h - 5, d=base_dia + 16);\n    }\n}\n\n// Lower millstone\nmodule lower_stone() {\n    difference() {\n        // Main stone body\n        cylinder(h=stone_h, d=stone_dia);\n        \n        // Grinding surface depression\n        translate([0,0,wall_thickness])\n        cylinder(h=stone_h - wall_thickness, d=stone_dia - 20);\n        \n        // Central feed hole\n        cylinder(h=stone_h, d=10, center=true);\n    }\n    \n    // Decorative grooves\n    for(i=[0:30:330]) {\n        rotate([0,0,i])\n        translate([stone_dia/2 - 5, 0, stone_h/2])\n        cube([10, 2, stone_h - 4], center=true);\n    }\n}\n\n// Upper millstone\nmodule upper_stone() {\n    difference() {\n        // Main stone body\n        cylinder(h=stone_h, d=stone_dia - 5);\n        \n        // Central hole for grain feed\n        cylinder(h=stone_h, d=12, center=true);\n        \n        // Handle mounting hole\n        translate([stone_dia/2 - 15, 0, stone_h/2])\n        rotate([90,0,0])\n        cylinder(h=20, d=handle_dia + 2);\n    }\n    \n    // Grinding surface texture\n    for(i=[0:45:315]) {\n        rotate([0,0,i])\n        translate([0, 0, 0])\n        cube([stone_dia - 10, 1, 1], center=true);\n    }\n}\n\n// Operating handle\nmodule handle() {\n    // Main handle bar\n    rotate([90,0,0])\n    cylinder(h=handle_len, d=handle_dia);\n    \n    // Handle grip\n    translate([handle_len - 10, 0, 0])\n    rotate([0,90,0])\n    cylinder(h=15, d=12);\n    \n    // Support brace\n    translate([0,0,-5])\n    rotate([0,90,0])\n    cylinder(h=10, d=handle_dia);\n}\n\n// Assembly\nunion() {\n    // Base with legs\n    base_structure();\n    \n    // Lower stone on base\n    translate([0,0,base_h + 5])\n    lower_stone();\n    \n    // Upper stone\n    translate([0,0,base_h + stone_h + 10])\n    upper_stone();\n    \n    // Handle attached to upper stone\n    translate([stone_dia/2 - 15, 0, base_h + stone_h + 10 + stone_h/2])\n    rotate([0,0,45])\n    handle();\n}\n\n// Grain feed funnel\ntranslate([0,0,base_h + stone_h*2 + 20])\ndifference() {\n    cylinder(h=20, d1=30, d2=15);\n    cylinder(h=21, d=11, center=true);\n}",
    "renders": true
  },
  {
    "sports_equipment": "press",
    "openscad_code": "// Press furniture - bench press frame with weight storage\n// Designed for strength training, 3D printable at ~120mm width\n\n// Overall dimensions\nbench_width = 120;\nbench_depth = 60;\nbench_height = 70;\n\n// Wall thickness\nwall = 2;\n\n// Base frame - main support structure\nmodule base_frame() {\n    // Main horizontal support beam\n    translate([0, 0, wall]) \n        cube([bench_width, wall*3, wall*4]);\n    \n    // Left vertical support\n    translate([wall, wall, wall*5]) \n        cube([wall*3, bench_depth-wall*2, bench_height-wall*5]);\n    \n    // Right vertical support\n    translate([bench_width-wall*4, wall, wall*5]) \n        cube([wall*3, bench_depth-wall*2, bench_height-wall*5]);\n    \n    // Rear support brace\n    translate([wall, bench_depth-wall*3, wall*5]) \n        cube([bench_width-wall*2, wall*3, wall*4]);\n}\n\n// Weight storage pegs\nmodule weight_pegs() {\n    for(i = [0:3]) {\n        // Left side pegs\n        translate([wall*2, wall*2, bench_height-wall*10-i*12]) \n            rotate([0, 90, 0]) \n                cylinder(h=wall*8, r=wall, $fn=8);\n        \n        // Right side pegs\n        translate([bench_width-wall*3, wall*2, bench_height-wall*10-i*12]) \n            rotate([0, 90, 0]) \n                cylinder(h=wall*8, r=wall, $fn=8);\n    }\n}\n\n// Bench top pad\nmodule bench_pad() {\n    // Main pad\n    translate([bench_width/2-20, bench_depth/2-15, wall*5]) \n        cube([40, 30, wall*3]);\n    \n    // Pad support brackets\n    translate([bench_width/2-25, bench_depth/2-20, wall*4]) \n        cube([wall*2, 40, wall*2]);\n    \n    translate([bench_width/2+23, bench_depth/2-20, wall*4]) \n        cube([wall*2, 40, wall*2]);\n}\n\n// Barbell support arms\nmodule barbell_supports() {\n    // Left support arm\n    translate([wall*2, bench_depth/2, bench_height-wall*6]) \n        cube([wall*4, wall*2, wall*6]);\n    \n    // Right support arm\n    translate([bench_width-wall*6, bench_depth/2, bench_height-wall*6]) \n        cube([wall*4, wall*2, wall*6]);\n    \n    // Support arm gussets\n    translate([wall*3, bench_depth/2-wall, bench_height-wall*7]) \n        cube([wall*2, wall*4, wall*2]);\n    \n    translate([bench_width-wall*5, bench_depth/2-wall, bench_height-wall*7]) \n        cube([wall*2, wall*4, wall*2]);\n}\n\n// Feet pads for stability\nmodule feet_pads() {\n    for(x = [wall, bench_width-wall*5]) {\n        for(y = [wall, bench_depth-wall*5]) {\n            translate([x, y, 0]) \n                cube([wall*5, wall*5, wall]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_frame();\n    weight_pegs();\n    bench_pad();\n    barbell_supports();\n    feet_pads();\n}",
    "renders": true
  },
  {
    "sports_equipment": "grinder",
    "openscad_code": "// Realistic 3D-printable herb-grinder furniture (Ø60 mm, 3-piece, 2 mm walls)\n\n$fn = 36;                // Smooth curves\n\n// ---------- global dimensions ----------\ngrind_d    = 60;         // outer Ø\ngrind_h    = 55;         // total height\nwall       = 2;          // printable wall thickness\nteeth_h    = 6;          // pyramid teeth height\nknurl_h    = 8;          // grip band height\n\n// ---------- module: knurled grip ring ----------\nmodule grip_band(od, h) {\n    difference() {\n        cylinder(d = od, h = h, center = true);            // main band\n        for (i = [0:30:359])                               // 12 grooves\n            rotate([0, 0, i])\n                translate([od/2 - 1.5, 0, 0])\n                    cube([3, 3, h + 0.2], center = true);\n    }\n}\n\n// ---------- module: cutting pyramid tooth ----------\nmodule tooth() {\n    linear_extrude(height = teeth_h, scale = 0.2, center = false)\n        circle(d = 4.5, $fn = 3);                          // triangle base\n}\n\n// ---------- module: toothed grinding plate ----------\nmodule plate(teeth_up = true) {\n    difference() {\n        cylinder(d = grind_d - 2*wall, h = 3, center = true);        // solid plate\n        // magnet cavity\n        translate([0, 0, teeth_up ? -1.5 : 1.5])\n            cylinder(d = 8, h = 5, center = true);\n    }\n    // teeth\n    for (r = [10:12:30])                                           // 3 rings\n        for (a = [0:30:359])\n            rotate([0, 0, a])\n                translate([r, 0, teeth_up ? 1.5 : -teeth_h-1.5])\n                    tooth();\n}\n\n// ---------- module: screen tray ----------\nmodule tray() {\n    difference() {\n        cylinder(d = grind_d, h = 12, center = true);               // tray body\n        // inner cone for kief funnel\n        translate([0, 0, 1])\n            cylinder(d1 = grind_d - 2*wall, d2 = grind_d/3, h = 10, center = true);\n        // screen recess\n        translate([0, 0, 5.5])\n            cylinder(d = grind_d - 2*wall, h = wall, center = true);\n    }\n}\n\n// ---------- module: main body shell ----------\nmodule body_shell(h) {\n    difference() {\n        cylinder(d = grind_d, h = h, center = true);                // outer\n        translate([0, 0, 0])\n            cylinder(d = grind_d - 2*wall, h = h + 1, center = true); // inner\n    }\n}\n\n// ---------- assembly ----------\ntranslate([0, 0, 30]) {\n    // top cap\n    union() {\n        body_shell(knurl_h + wall);\n        translate([0, 0, knurl_h/2 + wall/2])\n            grip_band(grind_d + 1, knurl_h);\n    }\n    // top grinding section\n    translate([0, 0, -knurl_h/2 - 10])\n        body_shell(20);\n    translate([0, 0, -knurl_h - 11])\n        plate(true);\n\n    // mid section / screen tray\n    translate([0, 0, -knurl_h - 22])\n        tray();\n    translate([0, 0, -knurl_h - 27])\n        plate(false);\n\n    // bottom kief catcher\n    translate([0, 0, -knurl_h - 39])\n        body_shell(16);\n    translate([0, 0, -knurl_h - 47])\n        cylinder(d = grind_d - 2*wall, h = 12, center = true);\n}",
    "renders": true
  },
  {
    "sports_equipment": "sifter",
    "openscad_code": "// Sifter Furniture - OpenSCAD Model\n// Realistic style, medium complexity coffee table with sifter-like storage compartment\n\n// Overall dimensions\ntable_length = 120;\ntable_width = 60;\ntable_height = 45;\nwall_thickness = 2;\n\n// Sifter compartment dimensions\nsifter_length = 100;\nsifter_width = 40;\nsifter_depth = 8;\nmesh_hole_diameter = 3;\nmesh_spacing = 6;\n\n// Leg dimensions\nleg_size = 4;\nleg_height = 40;\n\n// Support frame dimensions\nframe_thickness = 3;\n\n// Main tabletop with sifter compartment\nmodule tabletop() {\n    difference() {\n        // Main tabletop\n        cube([table_length, table_width, wall_thickness]);\n        \n        // Cut out sifter compartment\n        translate([10, 10, -1])\n            cube([sifter_length, sifter_width, sifter_depth + 2]);\n    }\n    \n    // Add bottom mesh layer\n    translate([10, 10, wall_thickness])\n        mesh_layer();\n}\n\n// Create mesh layer for sifter bottom\nmodule mesh_layer() {\n    // Outer frame\n    difference() {\n        cube([sifter_length, sifter_width, wall_thickness]);\n        \n        // Holes for mesh\n        for (x = [mesh_spacing/2 : mesh_spacing : sifter_length - mesh_spacing/2]) {\n            for (y = [mesh_spacing/2 : mesh_spacing : sifter_width - mesh_spacing/2]) {\n                translate([x, y, -1])\n                    cylinder(h = wall_thickness + 2, d = mesh_hole_diameter, $fn = 16);\n            }\n        }\n    }\n}\n\n// Support frame structure\nmodule support_frame() {\n    // Long side rails\n    translate([0, 0, leg_height - frame_thickness])\n        cube([table_length, frame_thickness, frame_thickness]);\n    translate([0, table_width - frame_thickness, leg_height - frame_thickness])\n        cube([table_length, frame_thickness, frame_thickness]);\n    \n    // Short side rails\n    translate([0, 0, leg_height - frame_thickness])\n        cube([frame_thickness, table_width, frame_thickness]);\n    translate([table_length - frame_thickness, 0, leg_height - frame_thickness])\n        cube([frame_thickness, table_width, frame_thickness]);\n}\n\n// Table leg\nmodule leg(x, y) {\n    translate([x, y, 0])\n        cube([leg_size, leg_size, leg_height]);\n}\n\n// Corner braces for stability\nmodule corner_brace(x, y) {\n    translate([x, y, leg_height - frame_thickness])\n    rotate([45, 0, 0])\n        cube([frame_thickness * 1.5, frame_thickness * 1.5, frame_thickness * 2]);\n}\n\n// Assembly\nunion() {\n    // Tabletop\n    translate([0, 0, leg_height + frame_thickness])\n        tabletop();\n    \n    // Support frame\n    support_frame();\n    \n    // Legs\n    leg(0, 0);\n    leg(table_length - leg_size, 0);\n    leg(0, table_width - leg_size);\n    leg(table_length - leg_size, table_width - leg_size);\n    \n    // Corner braces\n    corner_brace(0, 0);\n    corner_brace(table_length - frame_thickness * 1.5, 0);\n    corner_brace(0, table_width - frame_thickness * 1.5);\n    corner_brace(table_length - frame_thickness * 1.5, table_width - frame_thickness * 1.5);\n}",
    "renders": true
  },
  {
    "sports_equipment": "sieve",
    "openscad_code": "// Sieve Furniture - Mesh Storage Basket with Legs\n// Realistic style with medium complexity\n\n// Main parameters\n$fn = 32;\nwall_thickness = 2;\nmesh_thickness = 1.5;\nleg_height = 30;\nbasket_diameter = 80;\nbasket_height = 40;\nmesh_size = 5;\nmesh_gap = 2;\n\nmodule basket_wall() {\n    difference() {\n        // Outer wall\n        cylinder(h=basket_height, d=basket_diameter, center=false);\n        \n        // Inner hollow\n        translate([0, 0, wall_thickness])\n            cylinder(h=basket_height+1, d=basket_diameter-wall_thickness*2, center=false);\n    }\n}\n\nmodule mesh_bottom() {\n    // Create mesh pattern\n    difference() {\n        // Solid bottom\n        translate([0, 0, wall_thickness])\n            cylinder(h=mesh_thickness, d=basket_diameter-wall_thickness*2, center=false);\n        \n        // Holes for mesh\n        for(x = [-basket_diameter/2+mesh_size : mesh_size+mesh_gap : basket_diameter/2-mesh_size]) {\n            for(y = [-basket_diameter/2+mesh_size : mesh_size+mesh_gap : basket_diameter/2-mesh_size]) {\n                if(sqrt(x*x + y*y) < basket_diameter/2-wall_thickness-mesh_size) {\n                    translate([x, y, wall_thickness])\n                        cube([mesh_gap, mesh_gap, mesh_thickness+1], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule rim() {\n    // Top rim for structural integrity\n    translate([0, 0, basket_height-wall_thickness])\n        cylinder(h=wall_thickness*2, d=basket_diameter+wall_thickness, center=false);\n}\n\nmodule leg_base() {\n    // Single leg base with joint connection\n    difference() {\n        // Main leg cylinder\n        cylinder(h=leg_height, d=8, center=false);\n        \n        // Screw hole for attachment\n        translate([0, 0, -1])\n            cylinder(h=leg_height+2, d=3, center=false);\n        \n        // Chamfer bottom\n        translate([0, 0, leg_height-3])\n            cylinder(h=3, d1=8, d2=6, center=false);\n    }\n}\n\nmodule leg_support() {\n    // Support brace between legs\n    rotate([90, 0, 0])\n        cylinder(h=30, d=4, center=true);\n}\n\nmodule furniture_leg(angle) {\n    // Position and rotate leg\n    rotate([0, 0, angle])\n        translate([basket_diameter/2-wall_thickness, 0, 0])\n            leg_base();\n}\n\nmodule grip_texture() {\n    // Add texture to rim for grip\n    for(i = [0:15:359]) {\n        rotate([0, 0, i])\n            translate([basket_diameter/2+wall_thickness/2, 0, basket_height])\n                cube([wall_thickness, 1, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main basket\n    union() {\n        basket_wall();\n        mesh_bottom();\n        rim();\n        grip_texture();\n    }\n    \n    // Four legs\n    for(i = [0:90:270]) {\n        furniture_leg(i);\n    }\n    \n    // Cross supports between legs\n    for(i = [45:90:315]) {\n        rotate([0, 0, i])\n            translate([basket_diameter/2-10, 0, leg_height/2])\n                leg_support();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "crate",
    "openscad_code": "// Realistic Crate-style Furniture – OpenSCAD\n// A medium-complexity 3D-printable wooden crate that doubles as a small side table / storage cube\n\n// General parameters\nwall = 2;               // 2 mm printable wall thickness\nouter = 120;            // Overall cube side length (120 mm)\ninner = outer - 2*wall; // Inner cavity size\nslatW = 14;             // Width of each plank slat\nslatG = 3;              // Gap between slats\nslats = floor(outer/(slatW+slatG)); // Number of slats per face\n\n// Wood plank module with optional nail holes\nmodule plank(len, wid, thick, nail=false) {\n    difference() {\n        cube([len, wid, thick], center=true);\n        if(nail)\n            for(x=[-len/3, len/3])\n                translate([x, 0, thick/2 - 0.5])\n                    cylinder(h=2, d=2.5, $fn=8);\n    }\n}\n\n// Slatted panel for realistic crate look\nmodule slatted_panel(len, wid, thick, vert=false) {\n    for(i=[0:slats-1]) {\n        translate(vert ? [0, i*(slatW+slatG), 0]\n                       : [i*(slatW+slatG), 0, 0])\n            plank(slatW, vert?len:wid, thick, true);\n    }\n}\n\n// Corner post with dovetail-style joint suggestion\nmodule corner_post(h) {\n    difference() {\n        cube([wall*3, wall*3, h], center=true);\n        translate([0,0,-h/2-1])\n            cube([wall*2.2, wall*2.2, h+2], center=true);\n    }\n}\n\n// Main crate body\nmodule crate() {\n    // Bottom plate\n    translate([0,0,-outer/2+wall/2])\n        slatted_panel(outer, outer, wall);\n\n    // Left & right walls\n    for(side=[-1,1])\n        translate([0, side*outer/2, 0])\n            rotate([90,0,0])\n                slatted_panel(outer, outer, wall, vert=true);\n\n    // Front & back walls\n    for(side=[-1,1])\n        translate([side*outer/2, 0, 0])\n            rotate([0,90,0])\n                slatted_panel(outer, outer, wall, vert=true);\n\n    // Four corner posts for structural realism\n    for(x=[-1,1], y=[-1,1])\n        translate([x*outer/2, y*outer/2, 0])\n            corner_post(outer);\n\n    // Optional internal rebate lip for stacking / lid\n    difference() {\n        translate([0,0,outer/2-wall-2])\n            cube([inner, inner, 2], center=true);\n    }\n}\n\n// Assemble\ncrate();",
    "renders": true
  },
  {
    "sports_equipment": "barrel",
    "openscad_code": "// Barrel Stool – 3D-printable, realistic style\n// Overall height: 90 mm, Ø 120 mm\n// 2 mm wall thickness, printed upside-down (no over-hangs)\n\n$fn = 48;          // Smooth curves for realistic look\nwall = 2;          // Constant wall thickness\n\n//-------------------- Main barrel body --------------------\nmodule barrel_body(){\n    // Outer staves\n    difference(){\n        cylinder(h = 80, d = 120, center = false);\n        // Hollow inside\n        translate([0,0,-1])\n            cylinder(h = 82, d = 120 - 2*wall, center = false);\n    }\n    \n    // Top rim\n    translate([0,0,80])\n        difference(){\n            cylinder(h = 6, d = 120 + 2*wall, center = false);\n            cylinder(h = 7, d = 120, center = false);\n        }\n    \n    // Bottom rim\n    difference(){\n        cylinder(h = 6, d = 120 + 2*wall, center = false);\n        cylinder(h = 7, d = 120, center = false);\n    }\n}\n\n//-------------------- Metal hoops --------------------------\nmodule hoop(z_pos, thick = 4){\n    color(\"silver\")\n    difference(){\n        cylinder(h = thick, d = 122 + 2*wall, center = false);\n        cylinder(h = thick + 1, d = 120, center = false);\n    }\n    translate([0,0,z_pos])\n        children();\n}\n\n//-------------------- Stave indents (realistic bands) ------\nmodule stave_lines(){\n    for(i = [0:11]){\n        rotate([0,0,i*30])\n            translate([60 - wall/2, -1, 0])\n                cube([wall, 2, 80]);\n    }\n}\n\n//-------------------- Legs (furniture structure) ----------\nmodule legs(){\n    for(a = [45, 135, 225, 315]){\n        rotate([0,0,a])\n            translate([42, -5, -20])\n                cube([10, 10, 20], center = false);\n    }\n}\n\n//-------------------- Seat cushion ------------------------\nmodule seat(){\n    translate([0,0,86])\n        difference(){\n            // Cushion\n            cylinder(h = 12, d = 110, center = false);\n            // Top dome\n            translate([0,0,12])\n                sphere(d = 110);\n            // Hollow\n            translate([0,0,-1])\n                cylinder(h = 14, d = 110 - 2*wall, center = false);\n        }\n}\n\n//-------------------- Assembly ----------------------------\nunion(){\n    barrel_body();\n    stave_lines();\n    \n    // Two metal hoops\n    hoop(15);\n    hoop(60);\n\n    // Structural legs\n    legs();\n    \n    // Seat cushion\n    seat();\n}",
    "renders": true
  },
  {
    "sports_equipment": "cask",
    "openscad_code": "// Realistic Cask Furniture\n// Medium complexity OpenSCAD model\n\n$fn = 36;\n\n// Overall dimensions\ncask_length = 100;\ncask_diameter = 60;\nwall_thickness = 2;\n\n// Stave dimensions\nstave_width = 12;\nstave_count = 12;\nhoop_width = 8;\nhoop_thickness = 4;\n\n// Base dimensions\nbase_height = 15;\nbase_width = 70;\n\n// Tap dimensions\ntap_length = 20;\ntap_diameter = 8;\n\n// Wood texture\ntexture_depth = 0.5;\ntexture_spacing = 3;\n\nmodule wood_texture(width, height) {\n    for (i = [0:ceil(height/texture_spacing)]) {\n        translate([0, 0, -texture_depth/2]) \n            cube([width, 0.5, texture_depth], center = true);\n        translate([0, texture_spacing * i, 0]) \n            cube([width, 0.5, texture_depth], center = true);\n    }\n}\n\nmodule stave(length, width, height) {\n    difference() {\n        // Main stave with curved outer surface\n        hull() {\n            translate([-width/2, -height/2, -length/2]) \n                cube([width, height/2, length]);\n            translate([-width/2, 0, -length/2]) \n                cube([width, height, length]);\n            translate([-width/2, height/2, -length/2]) \n                cube([width, height/2, length]);\n        }\n        \n        // Inner hollow\n        translate([0, 0, 0]) \n            scale([0.8, 0.8, 1.1]) \n            cube([width, height, length], center = true);\n            \n        // Add wood texture\n        translate([0, 0, length/2 + 1]) \n            rotate([90, 0, 0]) \n            wood_texture(width, height);\n    }\n}\n\nmodule metal_hoop(radius, width, thickness) {\n    difference() {\n        cylinder(h = width, r = radius + wall_thickness, center = true);\n        cylinder(h = width + 2, r = radius, center = true);\n    }\n}\n\nmodule cask_body() {\n    union() {\n        // Create staves\n        for (i = [0:stave_count-1]) {\n            rotate([0, 0, i * 360/stave_count]) \n                translate([0, cask_diameter/2 - stave_width/2, 0]) \n                    stave(cask_length, stave_width, wall_thickness * 2);\n        }\n        \n        // Front and back caps\n        translate([0, 0, -cask_length/2 - wall_thickness/2]) \n            cylinder(h = wall_thickness, r = cask_diameter/2, center = true);\n        translate([0, 0, cask_length/2 + wall_thickness/2]) \n            cylinder(h = wall_thickness, r = cask_diameter/2, center = true);\n    }\n}\n\nmodule hoops() {\n    // Front hoop\n    translate([0, 0, -cask_length/2 + 10]) \n        metal_hoop(cask_diameter/2, hoop_width, hoop_thickness);\n    \n    // Center hoops\n    translate([0, 0, 0]) \n        metal_hoop(cask_diameter/2, hoop_width, hoop_thickness);\n    \n    // Back hoop\n    translate([0, 0, cask_length/2 - 10]) \n        metal_hoop(cask_diameter/2, hoop_width, hoop_thickness);\n}\n\nmodule tap() {\n    translate([0, 0, cask_length/2 + tap_length/2]) \n    rotate([90, 0, 0]) {\n        // Tap handle\n        cylinder(h = tap_length, r = tap_diameter/2);\n        \n        // Tap base\n        translate([0, 0, -tap_length/4]) \n            cylinder(h = tap_diameter, r1 = tap_diameter/2, r2 = tap_diameter/1.5);\n            \n        // Handle grip\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90]) \n                translate([tap_diameter/2 + 1, 0, tap_length - 5]) \n                    cube([2, 1, 5], center = true);\n        }\n    }\n}\n\nmodule base() {\n    difference() {\n        // Main base\n        cube([base_width, base_height, cask_length + 20], center = true);\n        \n        // Cutout for cask\n        translate([0, base_height/4, 0]) \n            cylinder(h = cask_length + 25, r = cask_diameter/2 + 5, center = true);\n    }\n    \n    // Support beams\n    for (i = [-1, 1]) {\n        translate([i * base_width/4, -base_height/2, 0]) \n            cube([base_width/6, base_height/2, cask_length + 15], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Cask on base\n    translate([0, base_height/2 + cask_diameter/4, 0]) {\n        cask_body();\n        hoops();\n        tap();\n    }\n    \n    // Base\n    base();\n}",
    "renders": true
  },
  {
    "sports_equipment": "keg",
    "openscad_code": "// Keg Furniture - Realistic Style, Medium Complexity\n// 3D printable keg stool/chair with structural details\n\n// Overall dimensions (scaled for furniture)\nkeg_diameter = 80;\nkeg_height = 100;\nwall_thickness = 2;\n\n// Main keg body module\nmodule keg_body() {\n    // Outer shell with bands\n    difference() {\n        cylinder(h=keg_height, d=keg_diameter, $fn=100);\n        \n        // Hollow center\n        translate([0, 0, wall_thickness])\n            cylinder(h=keg_height-wall_thickness*2, d=keg_diameter-wall_thickness*2, $fn=100);\n    }\n    \n    // Top and bottom reinforcement rings\n    translate([0, 0, 0])\n        cylinder(h=wall_thickness*2, d=keg_diameter+wall_thickness, $fn=100);\n    \n    translate([0, 0, keg_height-wall_thickness*2])\n        cylinder(h=wall_thickness*2, d=keg_diameter+wall_thickness, $fn=100);\n}\n\n// Metal bands around keg\nmodule metal_bands() {\n    band_height = 4;\n    band_offset = keg_height/4;\n    \n    for (i = [1:3]) {\n        translate([0, 0, band_offset * i])\n            difference() {\n                cylinder(h=band_height, d=keg_diameter+wall_thickness*2, $fn=100);\n                cylinder(h=band_height+0.1, d=keg_diameter, $fn=100);\n            }\n    }\n}\n\n// Top surface/seat\nmodule keg_top() {\n    // Seat cushion area\n    difference() {\n        cylinder(h=wall_thickness*3, d=keg_diameter-wall_thickness*2, $fn=100);\n        \n        // Slight indentation for comfort\n        translate([0, 0, wall_thickness])\n            cylinder(h=wall_thickness*2, d=keg_diameter-wall_thickness*4, $fn=100);\n    }\n    \n    // Central valve detail (decorative)\n    translate([0, 0, wall_thickness*3])\n        cylinder(h=wall_thickness*2, d=10, $fn=20);\n}\n\n// Internal support structure\nmodule internal_supports() {\n    // Cross braces for strength\n    brace_width = 2;\n    \n    translate([0, 0, keg_height/2])\n        rotate([90, 0, 0])\n            cube([keg_diameter-wall_thickness*4, brace_width, keg_height/2], center=true);\n    \n    translate([0, 0, keg_height/2])\n        rotate([0, 90, 0])\n            cube([brace_width, keg_diameter-wall_thickness*4, keg_height/2], center=true);\n}\n\n// Base reinforcement\nmodule base_support() {\n    // Wider base for stability\n    translate([0, 0, -wall_thickness*2])\n        cylinder(h=wall_thickness*4, d=keg_diameter+wall_thickness*4, $fn=100);\n    \n    // Anti-slip texture rings\n    for (i = [1:5]) {\n        rotate([0, 0, i*15])\n            translate([0, keg_diameter/2 + wall_thickness, -wall_thickness])\n                cube([wall_thickness*2, wall_thickness*4, wall_thickness*2]);\n    }\n}\n\n// Wood texture simulation\nmodule wood_texture() {\n    // Subtle grain effect using small cylinders\n    for (i = [0:5:keg_height]) {\n        translate([0, 0, i])\n            rotate([0, 0, i*5])\n                cylinder(h=0.5, d=keg_diameter-wall_thickness, $fn=6);\n    }\n}\n\n// Assembly\nunion() {\n    // Main keg structure\n    keg_body();\n    \n    // Metal bands for realistic look\n    metal_bands();\n    \n    // Seat top\n    translate([0, 0, keg_height])\n        keg_top();\n    \n    // Internal supports\n    internal_supports();\n    \n    // Base support\n    base_support();\n    \n    // Optional wood texture\n    wood_texture();\n}",
    "renders": true
  },
  {
    "sports_equipment": "jar",
    "openscad_code": "// Jar Furniture - Medium complexity realistic style\n// Dimensions: ~80mm diameter, ~100mm height, 2mm wall thickness\n\n// Parameters\n$fn = 36;\njar_diameter = 80;\njar_height = 100;\nwall_thickness = 2;\nbase_height = 8;\nlip_height = 5;\ngrip_depth = 1.5;\n\n// Main jar body module\nmodule jar_body() {\n    difference() {\n        // Outer shell\n        cylinder(h=jar_height, d=jar_diameter, center=false);\n        \n        // Inner cavity\n        translate([0, 0, base_height])\n        cylinder(h=jar_height-base_height, d=jar_diameter-wall_thickness*2, center=false);\n    }\n}\n\n// Base with reinforced ring\nmodule jar_base() {\n    difference() {\n        // Solid base\n        cylinder(h=base_height, d=jar_diameter+4, center=false);\n        \n        // Recessed bottom\n        translate([0, 0, 2])\n        cylinder(h=base_height-2, d=jar_diameter-4, center=false);\n    }\n}\n\n// Top lip with pouring spout\nmodule jar_lip() {\n    // Main lip\n    translate([0, 0, jar_height])\n    difference() {\n        cylinder(h=lip_height, d=jar_diameter+6, center=false);\n        \n        // Inner opening\n        translate([0, 0, -1])\n        cylinder(h=lip_height+2, d=jar_diameter-wall_thickness*2, center=false);\n    }\n    \n    // Pouring spout\n    translate([jar_diameter/2+3, 0, jar_height+lip_height/2])\n    rotate([0, 90, 0])\n    cylinder(h=8, d1=12, d2=8, center=true);\n}\n\n// Grip texture rings\nmodule grip_rings() {\n    for(i=[1:4]) {\n        translate([0, 0, i*20+10])\n        difference() {\n            // Outer ring\n            cylinder(h=3, d=jar_diameter+0.5, center=false);\n            \n            // Inner cut\n            cylinder(h=3.5, d=jar_diameter-grip_depth*2, center=false);\n        }\n    }\n}\n\n// Structural support ribs\nmodule support_ribs() {\n    for(angle=[0:45:315]) {\n        rotate([0, 0, angle])\n        translate([jar_diameter/2-2, 0, base_height/2])\n        cube([4, 2, base_height], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    jar_base();\n    \n    // Support ribs between base and body\n    support_ribs();\n    \n    // Main body\n    jar_body();\n    \n    // Grip texture\n    grip_rings();\n    \n    // Top lip and spout\n    jar_lip();\n}",
    "renders": true
  },
  {
    "sports_equipment": "jug",
    "openscad_code": "// Jug Furniture - Realistic Medium Complexity\n// A stylized jug that doubles as small furniture (vase/planter)\n\n// Parameters\nwall_thickness = 2;        // 3D printable wall thickness\nbase_height = 15;          // Base height\nbody_height = 90;          // Main body height\nneck_height = 25;          // Neck transition height\nspout_length = 35;         // Spout extension length\nhandle_clearance = 25;     // Handle grip space\noverall_scale = 0.8;       // Scale for furniture use\n\nmodule jug_base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=base_height, r1=35, r2=32, $fn=64);\n        \n        // Hollow out base\n        translate([0, 0, -1])\n            cylinder(h=base_height+2, r1=33, r2=30, $fn=64);\n    }\n}\n\nmodule jug_body() {\n    difference() {\n        // Main body - elliptical cylinder\n        scale([1, 1.2, 1])\n        cylinder(h=body_height, r1=32, r2=38, $fn=128);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n        scale([1, 1.2, 1])\n        cylinder(h=body_height+2, r1=30, r2=36, $fn=128);\n    }\n}\n\nmodule jug_neck() {\n    difference() {\n        // Neck transition\n        cylinder(h=neck_height, r1=38, r2=22, $fn=64);\n        \n        // Hollow neck\n        translate([0, 0, -1])\n            cylinder(h=neck_height+2, r1=36, r2=20, $fn=64);\n    }\n}\n\nmodule jug_spout() {\n    // Spout main tube\n    translate([0, 0, body_height+neck_height-5])\n    rotate([0, 90, 0])\n    difference() {\n        // Outer spout\n        rotate_extrude($fn=32)\n            translate([25, 0, 0])\n            circle(r=6);\n        \n        // Inner hollow\n        rotate_extrude($fn=32)\n            translate([25, 0, 0])\n            circle(r=4);\n    }\n    \n    // Spout support struts (furniture-style)\n    for(i=[0:120:240]) {\n        rotate([0, 0, i])\n        translate([20, 0, body_height+neck_height-5])\n        rotate([0, 90, 0])\n        cylinder(h=15, r=2, $fn=8);\n    }\n}\n\nmodule jug_handle() {\n    // Handle grip area\n    translate([-45, 0, body_height/2+base_height])\n    rotate([90, 0, 0])\n    difference() {\n        // Handle outer\n        rotate_extrude($fn=32)\n            translate([45, 0, 0])\n            offset(r=4)\n            polygon(points=[[0, -handle_clearance/2], [0, handle_clearance/2], [10, 15], [20, 15]]);\n        \n        // Handle inner\n        rotate_extrude($fn=32)\n            translate([45, 0, 0])\n            offset(r=2)\n            polygon(points=[[0, -handle_clearance/2], [0, handle_clearance/2], [10, 15], [20, 15]]);\n    }\n    \n    // Handle base supports (furniture-style joints)\n    translate([-35, 0, base_height+10])\n    cylinder(h=body_height-20, r=3, $fn=8);\n    \n    translate([-35, 0, body_height+neck_height-10])\n    cylinder(h=10, r=3, $fn=8);\n}\n\nmodule jug_rim() {\n    // Top rim for furniture aesthetics\n    translate([0, 0, body_height+neck_height])\n    difference() {\n        cylinder(h=8, r1=23, r2=25, $fn=64);\n        cylinder(h=10, r1=21, r2=23, $fn=64);\n    }\n}\n\n// Assembly\nscale([overall_scale, overall_scale, overall_scale]) {\n    union() {\n        jug_base();\n        jug_body();\n        jug_neck();\n        jug_rim();\n        jug_spout();\n        jug_handle();\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "flask",
    "openscad_code": "// Flask Furniture - OpenSCAD Code\n// Realistic style, medium complexity\n// 3D printable flask-shaped side table with storage\n\n// Overall dimensions\nflask_height = 120;\nflask_body_width = 80;\nneck_width = 30;\nbase_thickness = 5;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule flask_shell() {\n    difference() {\n        // Outer flask shape\n        union() {\n            // Main body - spherical bottom\n            translate([0, 0, flask_height * 0.3]) \n            sphere(d = flask_body_width);\n            \n            // Cylindrical neck\n            translate([0, 0, flask_height * 0.7])\n            cylinder(h = flask_height * 0.4, d1 = neck_width, d2 = neck_width * 0.8, $fn = 32);\n            \n            // Base platform\n            translate([0, 0, 0])\n            cylinder(h = base_thickness, d = flask_body_width * 1.2, $fn = 32);\n        }\n        \n        // Hollow interior\n        translate([0, 0, flask_height * 0.3 + wall]) \n        sphere(d = flask_body_width - wall * 2);\n        \n        translate([0, 0, flask_height * 0.7])\n        cylinder(h = flask_height * 0.4 + wall, d1 = neck_width - wall * 2, d2 = neck_width * 0.8 - wall * 2, $fn = 32);\n        \n        // Top opening\n        translate([0, 0, flask_height - wall])\n        cylinder(h = wall * 2, d = neck_width * 0.8 + wall, $fn = 32);\n    }\n}\n\nmodule table_legs() {\n    // Four legs supporting the flask\n    leg_height = flask_height * 0.3;\n    leg_width = 6;\n    \n    for(angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n        translate([flask_body_width * 0.45, 0, 0])\n        cube([leg_width, leg_width, leg_height], center = true);\n    }\n}\n\nmodule support_ring() {\n    // Structural ring around flask body\n    translate([0, 0, flask_height * 0.3])\n    difference() {\n        cylinder(h = wall * 3, d = flask_body_width + 4, $fn = 32);\n        cylinder(h = wall * 4, d = flask_body_width, $fn = 32);\n    }\n}\n\nmodule grip_texture() {\n    // Raised dots for grip on neck\n    dot_height = 1;\n    dot_radius = 1.5;\n    \n    for(i = [1:8]) {\n        rotate([0, 0, i * 45])\n        translate([neck_width * 0.45, 0, flask_height * 0.85])\n        sphere(d = dot_radius * 2);\n    }\n}\n\nmodule storage_shelf() {\n    // Lower shelf between legs\n    shelf_height = flask_height * 0.15;\n    shelf_size = flask_body_width * 0.9;\n    \n    translate([0, 0, shelf_height])\n    cube([shelf_size, shelf_size, wall], center = true);\n}\n\n// Assembly\nunion() {\n    // Main furniture structure\n    flask_shell();\n    table_legs();\n    support_ring();\n    storage_shelf();\n    \n    // Additional details\n    grip_texture();\n    \n    // Leveling feet\n    foot_size = 8;\n    for(angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n        translate([flask_body_width * 0.45, 0, -1])\n        cylinder(h = 2, d = foot_size, $fn = 16);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "bottle",
    "openscad_code": "// Bottle-Shaped Side Table - Realistic Style\n// Overall height: 120mm, suitable for 3D printing\n\nwall = 2;  // 2mm wall thickness for 3D printing\nbase_r = 35;  // Bottle base radius\ntop_r = 25;   // Bottle neck radius\nheight = 120;  // Total height\nsegments = 64;  // Smooth curves\n\n// Main bottle body - hollow cylinder with rounded top\nmodule bottle_body() {\n    difference() {\n        // Outer shape - tapered cylinder\n        cylinder(h=height*0.7, r1=base_r, r2=base_r*0.85, $fn=segments);\n        \n        // Inner hollow space\n        translate([0, 0, wall])\n        cylinder(h=height*0.7-wall, r1=base_r-wall, r2=base_r*0.85-wall, $fn=segments);\n        \n        // Close bottom\n        translate([0, 0, -0.1])\n        cylinder(h=wall+0.2, r=base_r, $fn=segments);\n    }\n}\n\n// Bottle neck - smaller cylinder\nmodule bottle_neck() {\n    difference() {\n        // Outer neck\n        translate([0, 0, height*0.7])\n        cylinder(h=height*0.2, r=top_r, $fn=segments);\n        \n        // Inner neck\n        translate([0, 0, height*0.7+wall])\n        cylinder(h=height*0.2-wall, r=top_r-wall, $fn=segments);\n    }\n}\n\n// Bottle cap - removable furniture top surface\nmodule bottle_cap() {\n    difference() {\n        // Main cap\n        translate([0, 0, height*0.9])\n        cylinder(h=height*0.1+wall, r=top_r+3, $fn=segments);\n        \n        // Hollow space for storage\n        translate([0, 0, height*0.9+wall])\n        cylinder(h=height*0.1, r=top_r+1, $fn=segments);\n    }\n    \n    // Grip ridges around cap\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([top_r+3.5, 0, height*0.94])\n        cube([2, 5, height*0.04], center=true);\n    }\n}\n\n// Structural support ribs inside bottle\nmodule support_ribs() {\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([0, 0, height*0.35])\n        cube([wall*2, base_r*0.8, height*0.5], center=true);\n    }\n}\n\n// Base reinforcement ring\nmodule base_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h=wall*2, r=base_r+5, $fn=segments);\n        \n        // Inner cutout\n        cylinder(h=wall*2+0.2, r=base_r, $fn=segments);\n    }\n}\n\n// Assembly\nunion() {\n    // Base ring\n    translate([0, 0, -wall])\n    base_ring();\n    \n    // Main bottle structure\n    difference() {\n        union() {\n            bottle_body();\n            bottle_neck();\n            bottle_cap();\n        }\n        \n        // Support ribs for structural integrity\n        support_ribs();\n    }\n    \n    // Furniture feet - anti-slip pads\n    translate([0, 0, -wall*2])\n    cylinder(h=wall, r=base_r+5, $fn=segments);\n    \n    // Cap handle for easy removal\n    translate([0, 0, height+wall])\n    rotate([90, 0, 0])\n    cylinder(h=20, r=3, $fn=16);\n}",
    "renders": true
  },
  {
    "sports_equipment": "vial",
    "openscad_code": "// Vial Furniture - A stylized vial-shaped side table\n// Medium complexity realistic style\n// Dimensions: 120mm height x 60mm diameter\n\n$fn = 32; // Smooth curves\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Overall dimensions\nvial_height = 120;\nvial_diameter = 60;\nbase_height = 15;\nneck_height = 25;\n\n// Main vial body - hollow cylinder with rounded base\nmodule vial_body() {\n    difference() {\n        // Outer shell\n        union() {\n            // Cylindrical part\n            cylinder(h = vial_height - neck_height, d = vial_diameter);\n            // Rounded bottom\n            translate([0, 0, 0])\n                scale([1, 1, 0.5])\n                sphere(d = vial_diameter);\n            // Neck\n            translate([0, 0, vial_height - neck_height])\n                cylinder(h = neck_height, d1 = vial_diameter * 0.7, d2 = vial_diameter * 0.4);\n        }\n        \n        // Inner hollow space\n        translate([0, 0, -1])\n            cylinder(h = vial_height - neck_height + 2, d = vial_diameter - wall*2);\n        translate([0, 0, -1])\n            scale([1, 1, 0.5])\n            sphere(d = vial_diameter - wall*2);\n        translate([0, 0, vial_height - neck_height])\n            cylinder(h = neck_height + 1, d1 = (vial_diameter - wall*2) * 0.7, d2 = (vial_diameter - wall*2) * 0.4);\n    }\n}\n\n// Base ring for stability\nmodule stabilizing_base() {\n    difference() {\n        // Outer ring\n        cylinder(h = base_height, d = vial_diameter * 1.3);\n        // Inner cutout\n        cylinder(h = base_height + 1, d = vial_diameter);\n    }\n}\n\n// Structural ribs inside for support\nmodule internal_supports() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([0, (vial_diameter/2) - wall - 5, 20])\n                cube([wall, 10, vial_height - 40], center = true);\n    }\n}\n\n// Grip texture rings around neck\nmodule grip_rings() {\n    for (i = [0:4]) {\n        translate([0, 0, vial_height - neck_height + 5 + i * 4])\n            difference() {\n                cylinder(h = 2, d = vial_diameter * 0.4 + 1);\n                cylinder(h = 3, d = vial_diameter * 0.4 - 1);\n            }\n    }\n}\n\n// Table surface inside vial opening\nmodule table_surface() {\n    // Internal shelf at comfortable height\n    translate([0, 0, 80])\n        difference() {\n            cylinder(h = wall, d = vial_diameter - wall*2 - 4);\n            // Cable management hole\n            cylinder(h = wall + 1, d = 15);\n        }\n}\n\n// Assembly\nunion() {\n    // Main components\n    vial_body();\n    \n    // Furniture elements\n    translate([0, 0, 0])\n        stabilizing_base();\n    \n    // Internal structure\n    translate([0, 0, 0])\n        internal_supports();\n    \n    translate([0, 0, 0])\n        table_surface();\n    \n    // Details\n    translate([0, 0, 0])\n        grip_rings();\n}",
    "renders": true
  },
  {
    "sports_equipment": "horn",
    "openscad_code": "// Horn Furniture - Realistic Style\n// A 3D printable horn-shaped side table with structural elements\n\n// Main Parameters\n$fn = 32;\nwall_thickness = 2;\nscale_factor = 1.2;\n\n// Horn body module\nmodule horn_body() {\n    // Main horn shell - created from stacked ellipses\n    difference() {\n        union() {\n            for (i = [0:5:100]) {\n                translate([0, 0, i*0.8]) {\n                    scale([1 + i*0.008, 1 + i*0.006, 1]) {\n                        cylinder(h=3, d1=30 - i*0.15, d2=30 - (i-5)*0.15);\n                    }\n                }\n            }\n        }\n        \n        // Hollow out the horn\n        translate([0, 0, wall_thickness]) {\n            cylinder(h=85, d1=25, d2=10);\n        }\n    }\n}\n\n// Horn bell flare\nmodule bell_flare() {\n    difference() {\n        union() {\n            // Main bell shape\n            translate([0, 0, -10]) {\n                cylinder(h=15, d1=45, d2=35);\n            }\n            \n            // Bell rim detail\n            translate([0, 0, -12]) {\n                cylinder(h=3, d=47);\n            }\n        }\n        \n        // Bell hollow\n        translate([0, 0, -12]) {\n            cylinder(h=17, d=40);\n        }\n    }\n}\n\n// Valve cluster structure\nmodule valve_cluster() {\n    // Main valve block\n    translate([0, 18, 40]) {\n        difference() {\n            cube([20, 15, 25], center=true);\n            translate([0, 0, 10]) {\n                cube([16, 11, 20], center=true);\n            }\n        }\n    }\n    \n    // Three valve pistons\n    for (i = [-1:1]) {\n        translate([i * 6, 18, 52]) {\n            difference() {\n                cylinder(h=12, d=6);\n                translate([0, 0, wall_thickness]) {\n                    cylinder(h=10, d=2);\n                }\n            }\n        }\n    }\n}\n\n// Support legs structure\nmodule legs() {\n    // Three curved support legs\n    for (angle = [0:120:240]) {\n        rotate([0, 0, angle]) {\n            translate([15, 0, -12]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h=50, d=8);\n                        translate([0, 0, wall_thickness]) {\n                            cylinder(h=48, d=4);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Base ring for stability\n    translate([0, 0, -12]) {\n        difference() {\n            cylinder(h=wall_thickness, d=90);\n            cylinder(h=wall_thickness+1, d=86);\n        }\n    }\n}\n\n// Grip texture on bell\nmodule bell_texture() {\n    for (i = [0:15:360]) {\n        rotate([0, 0, i]) {\n            translate([22, 0, -8]) {\n                cube([1, 1, 8]);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main horn structure\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            horn_body();\n            bell_flare();\n            valve_cluster();\n            bell_texture();\n        }\n    }\n    \n    // Furniture legs\n    legs();\n}\n\n// Table top surface\ndifference() {\n    translate([0, 0, 80]) {\n        cylinder(h=wall_thickness, d=50);\n    }\n    translate([0, 0, 80-wall_thickness]) {\n        cylinder(h=wall_thickness+1, d=46);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "drum",
    "openscad_code": "// Drum Furniture - Accent Side Table\n// Realistic medium-complexity design suitable for 3D printing\n\n// Overall dimensions\ntable_height = 450;\ndrum_diam = 400;\ndrum_height = 100;\nleg_height = 350;\nleg_diam = 25;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main drum shell\nmodule drum_shell() {\n    difference() {\n        // Outer shell\n        cylinder(h = drum_height, d = drum_diam, $fn = 128);\n        \n        // Hollow interior\n        translate([0, 0, wall])\n            cylinder(h = drum_height - wall, d = drum_diam - 2*wall, $fn = 128);\n        \n        // Bottom opening\n        translate([0, 0, -1])\n            cylinder(h = wall + 2, d = drum_diam - 20, $fn = 128);\n    }\n}\n\n// Drum top surface with furniture finish\nmodule drum_top() {\n    difference() {\n        // Solid top\n        cylinder(h = 8, d = drum_diam, $fn = 128);\n        \n        // Chamfer edges\n        translate([0, 0, -1])\n            cylinder(h = 10, d = drum_diam - 10, $fn = 128);\n    }\n    \n    // Wood grain texture circles\n    for (r = [50:50:drum_diam/2 - 20]) {\n        color(\"brown\")\n        translate([0, 0, 7.9])\n        cylinder(h = 0.2, d = 2*r, $fn = 64);\n    }\n}\n\n// Drum base ring for stability\nmodule base_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h = 15, d = drum_diam - 10, $fn = 128);\n        \n        // Inner hollow\n        translate([0, 0, wall])\n            cylinder(h = 15 - wall, d = drum_diam - 10 - 2*wall, $fn = 128);\n    }\n}\n\n// Furniture leg with joint detail\nmodule leg() {\n    // Main leg tube\n    cylinder(h = leg_height, d = leg_diam, $fn = 32);\n    \n    // Joint collar at top\n    translate([0, 0, leg_height - 10])\n        cylinder(h = 10, d = leg_diam + 6, $fn = 32);\n    \n    // Tapered foot\n    translate([0, 0, -5])\n        cylinder(h = 15, d1 = leg_diam + 2, d2 = leg_diam - 2, $fn = 32);\n}\n\n// Leg mounting bracket\nmodule leg_bracket() {\n    difference() {\n        // Main bracket\n        cube([30, 30, 15], center = true);\n        \n        // Screw hole\n        translate([0, 0, -8])\n            cylinder(h = 20, d = 6, $fn = 16);\n    }\n}\n\n// Assembly\ntranslate([0, 0, leg_height])\n    drum_shell();\n\ntranslate([0, 0, leg_height + drum_height])\n    drum_top();\n\ntranslate([0, 0, 0])\n    base_ring();\n\n// Four legs in furniture style\nfor (angle = [45:90:315]) {\n    rotate([0, 0, angle])\n    translate([drum_diam/2 - 30, 0, 0])\n    rotate([90, 0, 0])\n    leg();\n    \n    // Mounting brackets\n    rotate([0, 0, angle])\n    translate([drum_diam/2 - 30, 0, leg_height - 7.5])\n    leg_bracket();\n}\n\n// Center support cross\ntranslate([0, 0, leg_height/2])\n    rotate([0, 0, 45])\n    cube([drum_diam - 60, 10, 10], center = true);",
    "renders": true
  },
  {
    "sports_equipment": "flute",
    "openscad_code": "// Flute Furniture Item - Realistic Style with Medium Complexity\n// Total length ~120mm, wall thickness 2mm for 3D printing\n\n// Main parameters\nflute_length = 120;\nbody_diameter = 12;\nwall_thickness = 2;\n\n// Mouthpiece parameters\nmouthpiece_length = 15;\nmouthpiece_diameter = 10;\nlip_plate_width = 14;\nlip_plate_thickness = 3;\n\n// Keys parameters\nkey_diameter = 6;\nkey_height = 4;\nkey_spacing = 10;\nkey_rows = 6;\n\n// Structural supports\nsupport_ring_height = 3;\nsupport_ring_spacing = 25;\n\n// Create main flute body with hollow interior\nmodule flute_body() {\n    difference() {\n        // Outer body\n        cylinder(h=flute_length, d=body_diameter, $fn=32);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h=flute_length+2, d=body_diameter-2*wall_thickness, $fn=32);\n    }\n}\n\n// Create mouthpiece with lip plate\nmodule mouthpiece() {\n    union() {\n        // Main mouthpiece tube\n        translate([0, 0, -mouthpiece_length])\n            cylinder(h=mouthpiece_length, d=mouthpiece_diameter, $fn=32);\n        \n        // Lip plate\n        translate([0, -lip_plate_width/2, -mouthpiece_length])\n            cube([lip_plate_thickness, lip_plate_width, mouthpiece_diameter*0.8]);\n        \n        // Air channel\n        translate([0, 0, -mouthpiece_length+3])\n            rotate([90, 0, 0])\n            cylinder(h=5, d1=mouthpiece_diameter-4, d2=mouthpiece_diameter-6, $fn=16);\n    }\n}\n\n// Create tone holes\nmodule tone_holes() {\n    for(i = [1:key_rows]) {\n        translate([0, 0, -mouthpiece_length-i*key_spacing])\n            rotate([0, 90, 0])\n            cylinder(h=body_diameter, d=4, $fn=16);\n    }\n}\n\n// Create keys with realistic mechanism\nmodule keys() {\n    for(i = [1:key_rows]) {\n        // Key cap\n        translate([body_diameter/2+2, 0, -mouthpiece_length-i*key_spacing])\n            rotate([90, 0, 0])\n            cylinder(h=key_height, d=key_diameter, $fn=16);\n        \n        // Key arm\n        translate([body_diameter/2+1, 0, -mouthpiece_length-i*key_spacing])\n            rotate([90, 0, 0])\n            cube([key_diameter/2, key_diameter/4, 8]);\n    }\n}\n\n// Create support rings for structural integrity\nmodule support_rings() {\n    for(i = [0:2]) {\n        translate([0, 0, -mouthpiece_length-support_ring_spacing*i])\n            cylinder(h=support_ring_height, d1=body_diameter+4, d2=body_diameter+2, $fn=32);\n    }\n}\n\n// Create foot joint\nmodule foot_joint() {\n    translate([0, 0, -flute_length+5])\n        cylinder(h=15, d1=body_diameter, d2=body_diameter-2, $fn=32);\n}\n\n// Assembly the complete flute\nunion() {\n    // Main body\n    flute_body();\n    \n    // Mouthpiece\n    mouthpiece();\n    \n    // Tone holes\n    tone_holes();\n    \n    // Keys\n    keys();\n    \n    // Support rings\n    support_rings();\n    \n    // Foot joint\n    foot_joint();\n}",
    "renders": true
  },
  {
    "sports_equipment": "lyre",
    "openscad_code": "// Lyre Furniture - Realistic Style with Medium Complexity\n// Dimensions approximately 100mm x 60mm x 25mm\n\n// Main parameters\n$fn = 32;\nwall_thickness = 2.0;\nlyre_width = 100;\nlyre_height = 90;\nlyre_depth = 25;\nbody_thickness = 3;\n\nmodule lyre_body() {\n    // Main frame - two curved arms\n    difference() {\n        union() {\n            // Left arm\n            translate([-lyre_width/2 + 5, 0, 0]) {\n                rotate([0, 0, -15]) {\n                    cylinder(h=lyre_height, d1=8, d2=6);\n                }\n            }\n            \n            // Right arm\n            translate([lyre_width/2 - 5, 0, 0]) {\n                rotate([0, 0, 15]) {\n                    cylinder(h=lyre_height, d1=8, d2=6);\n                }\n            }\n            \n            // Bottom crossbar\n            translate([0, -lyre_height/2 + 5, 0]) {\n                cube([lyre_width - 30, 4, 4], center=true);\n            }\n            \n            // Top crossbar\n            translate([0, lyre_height/2 - 15, 0]) {\n                cube([lyre_width - 20, 4, 4], center=true);\n            }\n        }\n        \n        // Hollow out the arms\n        translate([-lyre_width/2 + 5, 0, 0]) {\n            rotate([0, 0, -15]) {\n                cylinder(h=lyre_height + 2, d1=4, d2=2);\n            }\n        }\n        \n        translate([lyre_width/2 - 5, 0, 0]) {\n            rotate([0, 0, 15]) {\n                cylinder(h=lyre_height + 2, d1=4, d2=2);\n            }\n        }\n    }\n}\n\nmodule sound_box() {\n    // Resonating chamber at bottom\n    translate([0, -lyre_height/2 + 15, 0]) {\n        difference() {\n            // Main box\n            scale([1.2, 0.8, 0.6]) {\n                sphere(d=30);\n            }\n            \n            // Hollow interior\n            translate([0, 0, -2]) {\n                scale([1.1, 0.7, 0.5]) {\n                    sphere(d=25);\n                }\n            }\n            \n            // Sound hole\n            translate([0, 5, 2]) {\n                cylinder(h=5, d=8);\n            }\n        }\n    }\n}\n\nmodule strings() {\n    // Create 6 strings from top to bottom\n    for(i = [-2.5, -1.5, -0.5, 0.5, 1.5, 2.5]) {\n        translate([i * 5, lyre_height/2 - 15, 0]) {\n            cylinder(h=lyre_height - 20, d=0.8);\n        }\n    }\n    \n    // String anchors at bottom\n    for(i = [-2.5, -1.5, -0.5, 0.5, 1.5, 2.5]) {\n        translate([i * 5, -lyre_height/2 + 5, 0]) {\n            cylinder(h=2, d=2);\n        }\n    }\n}\n\nmodule decorative_details() {\n    // Scroll at top\n    translate([0, lyre_height/2 - 5, 0]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=8, d=12);\n                cylinder(h=10, d=8);\n            }\n        }\n    }\n    \n    // Side decorations\n    translate([-lyre_width/2 - 2, 0, 0]) {\n        rotate([0, 0, 90]) {\n            cylinder(h=15, d=3);\n        }\n    }\n    \n    translate([lyre_width/2 + 2, 0, 0]) {\n        rotate([0, 0, 90]) {\n            cylinder(h=15, d=3);\n        }\n    }\n}\n\nmodule base_support() {\n    // Flat base for stability\n    translate([0, -lyre_height/2, -lyre_depth/2]) {\n        cube([lyre_width + 10, 5, lyre_depth], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    base_support();\n    \n    translate([0, 0, lyre_depth/2 - body_thickness/2]) {\n        union() {\n            lyre_body();\n            sound_box();\n            strings();\n            decorative_details();\n        }\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "harp",
    "openscad_code": "// Harp Furniture - Realistic Style with Medium Complexity\n// Overall dimensions: ~120mm height\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\nscale_factor = 0.8;\n\n// Main module\nmodule harp() {\n    // Sound box\n    sound_box();\n    \n    // Neck and pillar\n    neck_pillar();\n    \n    // Strings\n    strings();\n    \n    // Base support\n    base_support();\n    \n    // Decorative details\n    decorative_elements();\n}\n\n// Sound box (resonating chamber)\nmodule sound_box() {\n    // Main body - curved back\n    translate([0, -15, 30]) rotate([0, 0, 0]) {\n        // Back curved shell\n        difference() {\n            union() {\n                // Main curved back\n                scale([1, 0.7, 1]) cylinder(h = 70, r = 25);\n                // Flat front face\n                translate([0, 0, 0]) cube([50, wall_thickness, 70], center = true);\n            }\n            // Hollow interior\n            translate([0, 0, 0]) scale([0.92, 0.65, 0.95]) cylinder(h = 69, r = 24);\n        }\n    }\n    \n    // Sound hole\n    translate([0, -10, 50]) rotate([90, 0, 0]) {\n        cylinder(h = wall_thickness + 1, r1 = 8, r2 = 6);\n    }\n}\n\n// Neck and pillar structure\nmodule neck_pillar() {\n    // Curved neck\n    translate([0, 20, 100]) rotate([0, 0, 0]) {\n        difference() {\n            // Main neck curve\n            union() {\n                translate([0, 0, 0]) rotate([0, 0, -30]) cube([8, 8, 60], center = true);\n                translate([0, 15, 30]) rotate([0, 0, -45]) cube([8, 8, 40], center = true);\n            }\n            // Hollow through\n            translate([0, 0, 0]) rotate([0, 0, -30]) cube([4, 4, 61], center = true);\n            translate([0, 15, 30]) rotate([0, 0, -45]) cube([4, 4, 41], center = true);\n        }\n    }\n    \n    // Pillar\n    translate([20, -5, 0]) {\n        difference() {\n            // Main pillar\n            cylinder(h = 98, r = 4);\n            // Hollow interior\n            translate([0, 0, 1]) cylinder(h = 96, r = 2);\n        }\n        \n        // Connection to neck\n        translate([-10, 10, 95]) rotate([0, 0, 30]) cube([15, 8, 8], center = true);\n    }\n}\n\n// Strings\nmodule strings() {\n    for(i = [0:20]) {\n        translate([0, -10 + i * 0.8 - 10, 20 + i * 2.5]) {\n            rotate([0, 0, 0]) {\n                cylinder(h = 80 - i * 1.5, r = 0.5, center = true);\n            }\n        }\n    }\n}\n\n// Base support\nmodule base_support() {\n    // Main base\n    translate([0, 0, 0]) {\n        difference() {\n            // Solid base\n            cube([40, 30, 8], center = true);\n            // Hollow bottom\n            translate([0, 0, 4]) cube([36, 26, 4], center = true);\n        }\n        \n        // Feet\n        translate([-15, -10, 0]) cylinder(h = 4, r = 3);\n        translate([15, -10, 0]) cylinder(h = 4, r = 3);\n        translate([-15, 10, 0]) cylinder(h = 4, r = 3);\n        translate([15, 10, 0]) cylinder(h = 4, r = 3);\n    }\n}\n\n// Decorative elements\nmodule decorative_elements() {\n    // Scroll detail on neck\n    translate([0, 30, 100]) {\n        sphere(r = 6);\n    }\n    \n    // Ribs on sound box\n    for(i = [1:4]) {\n        translate([0, -15, 10 + i * 15]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 50, r = 0.5, center = true);\n            }\n        }\n    }\n}\n\n// Scale and render\nscale([scale_factor, scale_factor, scale_factor]) harp();",
    "renders": true
  },
  {
    "sports_equipment": "lute",
    "openscad_code": "// Lute furniture item - medium complexity realistic style\n// 3D printable with 2mm wall thickness, ~100mm long\n\n// Parameters\n$fn = 50;\nbody_length = 80;\nbody_width = 40;\nbody_depth = 20;\nneck_length = 50;\nneck_width = 12;\nneck_thickness = 8;\nheadstock_length = 25;\nheadstock_width = 15;\nsound_hole_diameter = 18;\nwall_thickness = 2;\nbridge_height = 3;\nbridge_width = 25;\nbridge_length = 8;\n\nmodule lute_body() {\n    // Main pear-shaped body\n    difference() {\n        // Outer shell\n        hull() {\n            scale([1, 0.8, 1]) sphere(d = body_width);\n            translate([body_length * 0.7, 0, 0]) scale([1.3, 1, 0.8]) sphere(d = body_width * 1.2);\n            translate([body_length * 0.3, 0, 0]) cylinder(h = body_depth, d = body_width * 0.8);\n        }\n        \n        // Inner cavity\n        translate([0, 0, -1]) scale([0.9, 0.9, 1.2]) hull() {\n            scale([0.8, 0.7, 1]) sphere(d = body_width - wall_thickness * 2);\n            translate([body_length * 0.7, 0, 0]) scale([1.2, 0.9, 0.7]) sphere(d = body_width - wall_thickness * 2);\n        }\n        \n        // Sound hole\n        translate([body_length * 0.4, 0, body_depth/2]) \n            rotate([90, 0, 0]) \n            cylinder(h = body_depth + 2, d = sound_hole_diameter, center = true);\n    }\n}\n\nmodule neck() {\n    // Neck with fingerboard\n    difference() {\n        // Main neck\n        hull() {\n            translate([0, 0, 0]) cube([neck_length, neck_width, neck_thickness], center = true);\n            translate([neck_length * 0.8, 0, neck_thickness * 0.4]) \n                cube([neck_length * 0.4, neck_width * 0.9, neck_thickness * 1.5], center = true);\n        }\n        \n        // Truss rod channel\n        translate([neck_length/2, 0, neck_thickness/2 - 2]) \n            cube([neck_length - 10, 4, 3], center = true);\n    }\n    \n    // Frets\n    for(i = [1:12]) {\n        translate([i * (neck_length/13) - neck_length/2, 0, neck_thickness/2 + 0.5]) \n            cube([1, neck_width - 2, 1], center = true);\n    }\n}\n\nmodule headstock() {\n    // Tuning head\n    difference() {\n        // Headstock shape\n        translate([0, 0, 0]) \n            cube([headstock_length, headstock_width, neck_thickness * 1.2], center = true);\n        \n        // Peg holes\n        for(i = [0:3]) {\n            translate([-headstock_length/2 + 5 + i * 5, \n                      headstock_width/2 - 3, 0]) \n                rotate([90, 0, 0]) \n                cylinder(h = headstock_width, d = 3, center = true);\n            translate([-headstock_length/2 + 5 + i * 5, \n                      -headstock_width/2 + 3, 0]) \n                rotate([90, 0, 0]) \n                cylinder(h = headstock_width, d = 3, center = true);\n        }\n    }\n}\n\nmodule bridge() {\n    // String bridge on body\n    translate([body_length * 0.6, 0, body_depth/2 + bridge_height/2]) {\n        difference() {\n            cube([bridge_length, bridge_width, bridge_height], center = true);\n            // String grooves\n            for(i = [0:5]) {\n                translate([0, -bridge_width/2 + 4 + i * 3.5, bridge_height/2]) \n                    cube([bridge_length + 1, 1, 2], center = true);\n            }\n        }\n    }\n}\n\nmodule tailpiece() {\n    // Tailpiece for string anchoring\n    translate([body_length * 0.3, 0, body_depth/2 - 2]) {\n        hull() {\n            cube([8, 8, 2], center = true);\n            translate([-3, 0, 0]) cube([2, 6, 3], center = true);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    // Main body\n    lute_body();\n    \n    // Neck assembly\n    translate([-body_length * 0.2, 0, body_depth/2 + neck_thickness/2]) \n        rotate([0, -10, 0]) neck();\n    \n    // Headstock\n    translate([-body_length * 0.2 - neck_length, 0, body_depth/2 + neck_thickness/2]) \n        rotate([0, -10, 0]) headstock();\n    \n    // Bridge\n    bridge();\n    \n    // Tailpiece\n    tailpiece();\n    \n    // Decorative rosette around sound hole\n    translate([body_length * 0.4, 0, body_depth/2]) {\n        difference() {\n            cylinder(h = 1, d = sound_hole_diameter + 8);\n            cylinder(h = 2, d = sound_hole_diameter + 6);\n        }\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "fiddle",
    "openscad_code": "// Fiddle Chair - Realistic Style, Medium Complexity\n// A chair inspired by the curved shape of a violin (fiddle)\n\n// Chair dimensions (mm)\nchair_height = 85;\nseat_height = 45;\nseat_width = 50;\nseat_depth = 45;\nback_height = 40;\nleg_thickness = 4;\n\n// Violin-inspired proportions\nviolin_body_width = seat_width * 0.8;\nviolin_body_length = seat_depth * 1.2;\nscroll_radius = 8;\n\n// Main chair module\nmodule fiddle_chair() {\n    // Chair legs - violin bow inspired\n    difference() {\n        // Four legs\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([x * (seat_width/2 - leg_thickness), \n                          y * (seat_depth/2 - leg_thickness), 0])\n                    cylinder(h = seat_height, r = leg_thickness, $fn = 8);\n            }\n        }\n        // Cutouts for violin bow shape\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([x * (seat_width/2 - leg_thickness), \n                          y * (seat_depth/2 - leg_thickness), seat_height/2])\n                    rotate([90, 0, 0])\n                        cylinder(h = leg_thickness * 2, r = leg_thickness * 0.7, $fn = 6);\n            }\n        }\n    }\n    \n    // Seat - violin body shape\n    translate([0, 0, seat_height])\n        violin_body();\n    \n    // Backrest - violin neck and scroll\n    translate([0, -seat_depth/2 + 5, seat_height + back_height/2])\n        rotate([0, 0, 0])\n            violin_neck();\n}\n\n// Violin body shaped seat\nmodule violin_body() {\n    // Main body\n    hull() {\n        // Upper bout\n        translate([0, violin_body_length/3, 0])\n            scale([0.7, 0.8, 0.3])\n                sphere(r = violin_body_width/2, $fn = 32);\n        \n        // C-bouts (waist)\n        translate([0, 0, 0])\n            scale([0.5, 0.6, 0.3])\n                sphere(r = violin_body_width/2, $fn = 32);\n        \n        // Lower bout\n        translate([0, -violin_body_length/3, 0])\n            scale([1, 1, 0.3])\n                sphere(r = violin_body_width/2, $fn = 32);\n    }\n    \n    // F-holes (decorative cutouts)\n    translate([violin_body_width/4, 0, 1])\n        rotate([0, 0, 15])\n            f_hole();\n    translate([-violin_body_width/4, 0, 1])\n        mirror([1, 0, 0])\n            rotate([0, 0, 15])\n                f_hole();\n    \n    // Bridge-like support\n    translate([0, 0, 2])\n        cube([violin_body_width * 0.8, 3, 2], center = true);\n}\n\n// F-hole shape\nmodule f_hole() {\n    difference() {\n        // Main shape\n        union() {\n            // Upper circle\n            translate([0, 8, 0])\n                cylinder(h = 3, r = 2, $fn = 16);\n            \n            // Lower circle\n            translate([0, -8, 0])\n                cylinder(h = 3, r = 3, $fn = 16);\n            \n            // Connecting stem\n            hull() {\n                translate([0, 6, 0])\n                    sphere(r = 1.5, $fn = 16);\n                translate([0, -6, 0])\n                    sphere(r = 2, $fn = 16);\n            }\n        }\n        \n        // Center cutout\n        translate([0, 0, -1])\n            cube([1, 16, 5], center = true);\n    }\n}\n\n// Violin neck and scroll backrest\nmodule violin_neck() {\n    // Neck shaft\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                cube([6, 4, back_height * 0.7], center = true);\n            translate([0, -back_height * 0.3, back_height * 0.3])\n                cube([4, 3, 4], center = true);\n        }\n        \n        // Fingerboard relief\n        translate([0, -back_height * 0.1, back_height * 0.35])\n            cube([5, 6, 2], center = true);\n    }\n    \n    // Scroll\n    translate([0, -back_height * 0.5, back_height * 0.7])\n        rotate([90, 0, 0])\n            difference() {\n                // Main scroll\n                union() {\n                    for (i = [0:15]) {\n                        rotate([0, 0, i * 22.5])\n                            translate([scroll_radius * cos(i * 0.8), \n                                      scroll_radius * sin(i * 0.8), \n                                      i * 1.2])\n                                sphere(r = 3.5 - i * 0.15, $fn = 16);\n                    }\n                }\n                \n                // Center hole\n                cylinder(h = 20, r = 2, $fn = 16);\n            }\n    \n    // Pegbox details\n    translate([0, -back_height * 0.4, back_height * 0.5])\n        for (i = [-1, 1]) {\n            rotate([0, 90, 0])\n                translate([i * 2, 0, 0])\n                    cylinder(h = 3, r = 1.5, $fn = 8);\n        }\n}\n\n// Assembly\nfiddle_chair();",
    "renders": true
  },
  {
    "sports_equipment": "bell",
    "openscad_code": "// Bell furniture piece – a small table whose base is an inverted bell\n// Overall height ≈ 80 mm, tabletop Ø 100 mm – suitable for 3D printing\n\nwall = 2;               // uniform printable wall thickness\nbase_r = 35;            // bell mouth radius\nbase_h = 45;            // height of bell body\ntabletop_r = 50;        // tabletop radius\ntabletop_th = 4;        // tabletop thickness\nleg_n = 4;              // number of legs inside bell\nleg_r = 3;              // leg radius\nleg_h = 35;             // leg length\n\n// ---- main module ----\nmodule bell_table() {\n    // hollow bell body (inverted)\n    difference() {\n        union() {\n            // outer bell shell\n            cylinder(h = base_h, r1 = base_r, r2 = base_r * 0.7, center = false);\n            // bell top dome cap\n            translate([0, 0, base_h])\n                sphere(r = base_r * 0.7);\n        }\n        // hollow it out\n        translate([0, 0, wall])\n            cylinder(h = base_h + wall, r1 = base_r - wall, r2 = base_r * 0.7 - wall);\n        translate([0, 0, base_h])\n            sphere(r = base_r * 0.7 - wall);\n    }\n\n    // tabletop\n    translate([0, 0, base_h + base_r * 0.7 - wall])\n        difference() {\n            cylinder(h = tabletop_th, r = tabletop_r, center = false);\n            translate([0, 0, wall])\n                cylinder(h = tabletop_th, r = tabletop_r - wall);\n        }\n\n    // legs inside bell for structure (no overhangs)\n    for (i = [0 : leg_n - 1])\n        rotate([0, 0, i * 360 / leg_n])\n            translate([base_r * 0.6, 0, wall])\n                cylinder(h = leg_h, r = leg_r, center = false);\n}\n\n// render\nbell_table();",
    "renders": true
  },
  {
    "sports_equipment": "rattle",
    "openscad_code": "// Baby Rattle Furniture - Realistic Style\n// Combines a classic baby rattle with furniture-like structural elements\n\n$fn = 32; // Smooth curves for 3D printing\n\n// Main dimensions\nrattle_length = 120;\nhandle_length = 60;\nhandle_diameter = 18;\nball_diameter = 35;\nwall_thickness = 2;\n\nmodule handle() {\n    // Main handle with ergonomic grip\n    difference() {\n        // Outer handle\n        cylinder(h=handle_length, d=handle_diameter, center=true);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 0])\n            cylinder(h=handle_length+2, d=handle_diameter-wall_thickness*2, center=true);\n    }\n    \n    // Grip rings for better hold\n    for(i = [-20:10:20]) {\n        translate([0, 0, i]) {\n            difference() {\n                cylinder(h=4, d=handle_diameter+2, center=true);\n                cylinder(h=6, d=handle_diameter, center=true);\n            }\n        }\n    }\n}\n\nmodule furniture_base() {\n    // Chair-like base structure\n    translate([0, 0, -handle_length/2-10]) {\n        // Four legs\n        for(x = [-15, 15]) {\n            for(y = [-15, 15]) {\n                translate([x, y, -5]) {\n                    // Tapered legs\n                    cylinder(h1=10, h2=8, r1=3, r2=2);\n                }\n            }\n        }\n        \n        // Cross support beams\n        for(i = [-12, 12]) {\n            translate([i, 0, -5]) {\n                rotate([0, 90, 0])\n                    cube([30, 2, 2], center=true);\n            }\n            translate([0, i, -5]) {\n                rotate([90, 0, 0])\n                    cube([2, 30, 2], center=true);\n            }\n        }\n    }\n}\n\nmodule rattle_balls() {\n    // Two hollow balls with internal rattling beads\n    for(pos = [-1, 1]) {\n        translate([0, 0, pos * (handle_length/2 + ball_diameter/2)]) {\n            difference() {\n                // Outer ball\n                sphere(d=ball_diameter);\n                \n                // Inner cavity\n                sphere(d=ball_diameter-wall_thickness*2);\n                \n                // Connection hole to handle\n                rotate([0, 90, 0])\n                    cylinder(h=ball_diameter, d=handle_diameter+2, center=true);\n            }\n            \n            // Internal rattling beads\n            for(i = [0:45:315]) {\n                rotate([0, 0, i]) {\n                    translate([0, 0, 5]) {\n                        sphere(d=4);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule structural_joints() {\n    // Reinforced joints between balls and handle\n    for(pos = [-1, 1]) {\n        translate([0, 0, pos * (handle_length/2)]) {\n            difference() {\n                cylinder(h=ball_diameter/2, d=handle_diameter+4, center=true);\n                cylinder(h=ball_diameter/2+2, d=handle_diameter, center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main rattle structure\n    color(\"LightBlue\") {\n        handle();\n        translate([0, 0, 0]) {\n            rattle_balls();\n            structural_joints();\n        }\n    }\n    \n    // Furniture base\n    color(\"Wood\") {\n        furniture_base();\n    }\n}\n\n// Additional furniture details\ntranslate([0, 0, handle_length/2+ball_diameter+5]) {\n    // Small table-like platform on top\n    cube([ball_diameter+10, ball_diameter+10, 2], center=true);\n    \n    // Decorative spindles\n    for(x = [-10, 0, 10]) {\n        for(y = [-10, 0, 10]) {\n            if(!(x == 0 && y == 0)) {\n                translate([x, y, 0]) {\n                    cylinder(h=8, d=2);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "trumpet",
    "openscad_code": "// Trumpet Furniture Item - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm length, 40mm height, 40mm width\n\n$fn = 32;  // Smooth curves for 3D printing\nwall = 2;  // Wall thickness for 3D printing\n\n// Main body module\nmodule trumpet() {\n    // Bell flare\n    union() {\n        // Bell base\n        translate([0, 0, 0])\n            cylinder(h = 15, r1 = 20, r2 = 25);\n        \n        // Bell flare extension\n        translate([0, 0, 15])\n            cylinder(h = 20, r1 = 25, r2 = 35);\n        \n        // Bell rim\n        translate([0, 0, 35])\n            cylinder(h = 3, r1 = 35, r2 = 36);\n    }\n    \n    // Lead pipe\n    translate([-50, 0, 20])\n        rotate([0, 90, 0])\n            cylinder(h = 50, r = 3, wall);\n    \n    // Main tuning slide\n    translate([10, 0, 20])\n        rotate([0, 0, 0])\n            cylinder(h = 30, r = 4, wall);\n    \n    // First valve section\n    translate([40, 0, 15]) {\n        // Valve casing\n        for(i = [-1, 0, 1]) {\n            translate([0, i * 12, 0])\n                cylinder(h = 25, r = 6, wall);\n        }\n        \n        // Valve tubing between casings\n        translate([0, -6, 12.5])\n            rotate([90, 0, 0])\n                cylinder(h = 12, r = 3, wall);\n        translate([0, 6, 12.5])\n            rotate([90, 0, 0])\n                cylinder(h = 12, r = 3, wall);\n    }\n    \n    // Second valve slide\n    translate([55, -15, 15])\n        rotate([0, 30, 0])\n            cylinder(h = 20, r = 3, wall);\n    \n    // Third valve slide\n    translate([55, 15, 15])\n        rotate([0, -30, 0])\n            cylinder(h = 20, r = 3, wall);\n    \n    // Mouthpiece receiver\n    difference() {\n        translate([-60, 0, 20])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r = 4, wall);\n        \n        // Hollow center\n        translate([-60, 0, 20])\n            rotate([0, 90, 0])\n                cylinder(h = 11, r = 2);\n    }\n    \n    // Water keys\n    translate([35, -12, 8])\n        rotate([0, 90, 0])\n            cylinder(h = 8, r = 1.5, wall);\n    \n    translate([35, 12, 8])\n        rotate([0, 90, 0])\n            cylinder(h = 8, r = 1.5, wall);\n    \n    // Finger rings\n    // First valve ring\n    translate([40, -20, 30])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 5, r = 5, wall);\n                cylinder(h = 6, r = 3);\n            }\n    \n    // Third valve ring\n    translate([40, 20, 30])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 5, r = 5, wall);\n                cylinder(h = 6, r = 3);\n            }\n    \n    // Support braces\n    // Bell to valve brace\n    translate([20, 0, 25])\n        rotate([0, 0, 0])\n            cylinder(h = 20, r = 1.5, wall);\n    \n    // Valve to leadpipe brace\n    translate([0, 0, 20])\n        rotate([0, 45, 0])\n            cylinder(h = 15, r = 1.5, wall);\n    \n    // Valve support feet\n    translate([45, 0, 0]) {\n        cube([10, 30, 2], center = true);\n    }\n}\n\n// Render the trumpet\ntrumpet();",
    "renders": true
  },
  {
    "sports_equipment": "bugle",
    "openscad_code": "// Bugle Furniture Item - Realistic Style, Medium Complexity\n// Overall dimensions: ~110mm length x 50mm height x 30mm width\n// Wall thickness: 2mm for 3D printing\n\n// Main bugle body with realistic proportions\nmodule bugle_body() {\n    // Main bell section - conical flare\n    difference() {\n        // Outer bell flare\n        for(i = [0:10]) {\n            translate([0, 0, i*2])\n            cylinder(h=2, d1=20 + i*2.5, d2=22 + i*2.5, $fn=32);\n        }\n        \n        // Inner bell cavity\n        for(i = [0:10]) {\n            translate([0, 0, i*2 + 0.5])\n            cylinder(h=2, d1=16 + i*2.5, d2=18 + i*2.5, $fn=32);\n        }\n    }\n    \n    // Main tube body - cylindrical section\n    difference() {\n        // Outer tube\n        translate([0, 0, 20])\n        cylinder(h=60, d=16, $fn=32);\n        \n        // Inner tube cavity\n        translate([0, 0, 20.5])\n        cylinder(h=59, d=12, $fn=32);\n    }\n    \n    // Mouthpiece receiver\n    difference() {\n        // Outer receiver\n        translate([0, 0, 80])\n        cylinder(h=15, d=12, $fn=32);\n        \n        // Inner receiver cavity\n        translate([0, 0, 80.5])\n        cylinder(h=14, d=8, $fn=32);\n    }\n}\n\n// Valve section with realistic furniture-style joints\nmodule valve_section() {\n    translate([-15, 0, 45])\n    rotate([0, 90, 0])\n    difference() {\n        // Valve casing\n        cylinder(h=30, d=12, $fn=32);\n        \n        // Valve bore\n        cylinder(h=30, d=8, $fn=32);\n    }\n    \n    // Valve caps - furniture-style decorative elements\n    for(i = [0:2]) {\n        translate([-15 + i*10, 0, 45])\n        rotate([0, 90, 0])\n        cylinder(h=3, d=14, $fn=32);\n    }\n    \n    // Valve stems - structural supports\n    for(i = [0:2]) {\n        translate([-15 + i*10, 0, 50])\n        rotate([0, 90, 0])\n        cylinder(h=8, d=4, $fn=16);\n    }\n}\n\n// Bell brace - furniture-style structural support\nmodule bell_brace() {\n    // Upper brace\n    translate([-5, 8, 15])\n    rotate([30, 0, 0])\n    cube([30, 2, 8]);\n    \n    // Lower brace\n    translate([-5, -10, 15])\n    rotate([-30, 0, 0])\n    cube([30, 2, 8]);\n    \n    // Side braces for stability\n    translate([10, 0, 25])\n    rotate([0, 0, 45])\n    cube([20, 2, 8]);\n}\n\n// Mouthpiece - removable furniture component\nmodule mouthpiece() {\n    translate([0, 0, 95])\n    difference() {\n        // Mouthpiece cup\n        cylinder(h=8, d1=12, d2=10, $fn=32);\n        \n        // Cup cavity\n        translate([0, 0, 0.5])\n        cylinder(h=7.5, d1=10, d2=8, $fn=32);\n    }\n    \n    // Mouthpiece shank\n    translate([0, 0, 103])\n    difference() {\n        cylinder(h=12, d=8, $fn=32);\n        cylinder(h=12, d=6, $fn=32);\n    }\n}\n\n// Water key - functional furniture detail\nmodule water_key() {\n    translate([0, 12, 35])\n    rotate([0, 90, 0])\n    difference() {\n        // Key lever\n        cube([15, 3, 2]);\n        \n        // Key hole\n        translate([7, 1.5, 1])\n        cylinder(h=3, d=1.5, $fn=16);\n    }\n    \n    // Key spring support\n    translate([0, 12, 35])\n    cube([2, 2, 2]);\n}\n\n// Main assembly\nunion() {\n    // Bugle body\n    bugle_body();\n    \n    // Valve section\n    valve_section();\n    \n    // Bell brace\n    bell_brace();\n    \n    // Water key\n    water_key();\n    \n    // Mouthpiece (can be printed separately)\n    // Uncomment for single print: mouthpiece();\n}\n\n// Add subtle grip texture on valve section\nmodule grip_texture() {\n    for(i = [0:5]) {\n        translate([-15, 0, 45 + i*4])\n        rotate([0, 90, 0])\n        cylinder(h=1, d=13, $fn=32);\n    }\n}\n\n// Apply grip texture\ntranslate([0, 0, 0])\ngrip_texture();",
    "renders": true
  },
  {
    "sports_equipment": "tambourine",
    "openscad_code": "// Tambourine furniture item (wall-mounted coat rack version)\n// Overall dimensions: 200mm diameter, 50mm depth\n\n$fn = 36;\n\n// Main tambourine ring structure\nmodule tambourine_ring() {\n    difference() {\n        // Outer ring body - 2mm wall thickness\n        cylinder(h=50, d=200, center=true);\n        \n        // Hollow center - 196mm diameter leaves 2mm walls\n        cylinder(h=52, d=196, center=true);\n    }\n}\n\n// Jingles (metal cymbals)\nmodule jingle(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, 0])\n    rotate([90, 0, angle])\n    union() {\n        // Jingle disk\n        cylinder(h=1.5, d=25);\n        \n        // Mounting hole\n        translate([0, 0, -1])\n        cylinder(h=3.5, d=4);\n    }\n}\n\n// Mounting bracket for wall attachment\nmodule mounting_bracket() {\n    // Back plate\n    translate([0, 100, 0])\n    cube([60, 5, 40], center=true);\n    \n    // Screw holes\n    for(i = [-1, 1]) {\n        translate([i * 20, 100, 0])\n        cylinder(h=6, d=6);\n    }\n}\n\n// Grip texture on outer edge\nmodule grip_texture() {\n    // Raised ridges for grip\n    for(i = [0:15:360]) {\n        rotate([0, 0, i])\n        translate([100, 0, 0])\n        cube([2, 8, 50], center=true);\n    }\n}\n\n// Coat hooks integrated into tambourine\nmodule coat_hook(angle) {\n    rotate([0, 0, angle])\n    translate([100, 0, 15])\n    union() {\n        // Hook base\n        cube([8, 8, 30], center=true);\n        \n        // Hook curve\n        translate([4, 0, -15])\n        rotate([90, 0, 0])\n        cylinder(h=8, d=8);\n        \n        // Hook tip\n        translate([4, 0, -25])\n        sphere(d=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Tambourine body\n    tambourine_ring();\n    \n    // Add grip texture\n    grip_texture();\n    \n    // Jingles around the perimeter\n    for(i = [0:30:330]) {\n        jingle(cos(i)*95, sin(i)*95, i);\n    }\n    \n    // Mounting bracket\n    mounting_bracket();\n    \n    // Coat hooks (4 evenly spaced)\n    for(i = [45:90:315]) {\n        coat_hook(i);\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "cymbal",
    "openscad_code": "// Cymbal Holder Furniture - Realistic Style, Medium Complexity\n// Dimensions: 120mm wide x 80mm deep x 100mm tall\n\n// Base module for the cymbal holder\nmodule cymbal_holder() {\n    // Base platform with rubber feet\n    difference() {\n        cube([80, 60, 8], center=true);\n        // Rubber feet indentations\n        for (x = [-30, 30])\n            for (y = [-20, 20])\n                translate([x, y, 3.5])\n                    cylinder(h=5, d=8, $fn=20);\n    }\n    \n    // Central support post\n    translate([0, 0, 4])\n        cylinder(h=85, d=12, $fn=32);\n    \n    // Support post reinforcement ring\n    translate([0, 0, 15])\n        cylinder(h=5, d=18, $fn=32);\n    \n    // Adjustable height mechanism\n    translate([0, 0, 70])\n        difference() {\n            cylinder(h=15, d=16, $fn=32);\n            // Height adjustment holes\n            for (z = [0:3:12])\n                translate([8, 0, z+1.5])\n                    rotate([0, 90, 0])\n                        cylinder(h=16, d=3, $fn=20);\n        }\n    \n    // Top cymbal arm\n    translate([0, 0, 89])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=25, d=10, $fn=32);\n                // Cable routing channel\n                translate([0, 10, -5])\n                    cube([6, 20, 4], center=true);\n            }\n    \n    // Cymbal mounting pad\n    translate([0, -20, 89])\n        difference() {\n            cylinder(h=3, d=20, $fn=32);\n            // Mounting hole\n            translate([0, 0, -0.5])\n                cylinder(h=4, d=6, $fn=20);\n        }\n    \n    // Side support braces\n    for (angle = [30, 150])\n        rotate([0, 0, angle])\n            translate([20, 0, 30])\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h=45, d=5, $fn=20);\n                        // Lightening hole\n                        translate([0, 0, 20])\n                            cylinder(h=10, d=3, $fn=16);\n                    }\n    \n    // Cable management hooks\n    translate([30, 25, 60])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=10, d=8, $fn=20);\n                // Hook slot\n                translate([0, 0, -5])\n                    cube([4, 10, 10], center=true);\n            }\n    \n    translate([-30, 25, 60])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=10, d=8, $fn=20);\n                translate([0, 0, -5])\n                    cube([4, 10, 10], center=true);\n            }\n    \n    // Bottom rubber feet\n    color(\"darkgray\")\n    for (x = [-30, 30])\n        for (y = [-20, 20])\n            translate([x, y, 0])\n                cylinder(h=3, d=8, $fn=20);\n}\n\n// Main assembly\ncymbal_holder();\n\n// Optional cymbal (separate print)\nmodule cymbal() {\n    // Cymbal body\n    difference() {\n        cylinder(h=2, d=50, $fn=64);\n        // Center hole\n        translate([0, 0, -0.5])\n            cylinder(h=3, d=8, $fn=20);\n    }\n    \n    // Cymbal taper\n    translate([0, 0, 2])\n        cylinder(h=1, d1=50, d2=48, $fn=64);\n    \n    // Groove details\n    for (r = [15:5:45])\n        translate([0, 0, 1])\n            difference() {\n                cylinder(h=0.5, d=r*2+1, $fn=64);\n                cylinder(h=0.5, d=r*2-1, $fn=64);\n            }\n    \n    // Bell area\n    translate([0, 0, 1])\n        cylinder(h=3, d1=20, d2=16, $fn=32);\n}\n\n// Position cymbal above holder\ntranslate([0, -35, 95])\n    cymbal();",
    "renders": true
  },
  {
    "sports_equipment": "gong",
    "openscad_code": "// Gong furniture piece - realistic style\n// Medium complexity 3D printable model\n\n// Overall dimensions (mm)\ngong_diameter = 100;\ngong_thickness = 3;\nframe_height = 80;\nbase_width = 120;\nbase_depth = 60;\nbase_thickness = 8;\n\n// Wall thickness for 3D printing\nwall_thick = 2;\n\nmodule gong_frame() {\n    // Main frame uprights\n    difference() {\n        // Outer frame\n        cube([wall_thick, frame_height, base_depth], center=true);\n        // Hollow center\n        translate([wall_thick/2, 0, 0])\n            cube([wall_thick-0.4, frame_height-4, base_depth-4], center=true);\n    }\n    \n    // Cross support at top\n    translate([0, frame_height/2 - wall_thick/2, 0])\n    difference() {\n        cube([base_width, wall_thick, base_depth], center=true);\n        cube([base_width-4, wall_thick-0.4, base_depth-4], center=true);\n    }\n    \n    // Second upright\n    translate([base_width/2 - wall_thick/2, -frame_height/2 + wall_thick/2, 0])\n    rotate([0, 0, 90])\n    difference() {\n        cube([wall_thick, frame_height, base_depth], center=true);\n        translate([wall_thick/2, 0, 0])\n            cube([wall_thick-0.4, frame_height-4, base_depth-4], center=true);\n    }\n}\n\nmodule gong_base() {\n    // Main base platform\n    difference() {\n        cube([base_width, base_thickness, base_depth], center=true);\n        // Hollow underside\n        translate([0, -base_thickness/2 + wall_thick/2, 0])\n            cube([base_width-4, wall_thick, base_depth-4], center=true);\n    }\n    \n    // Decorative corner feet\n    for(x=[-base_width/2 + 10, base_width/2 - 10]) {\n        for(z=[-base_depth/2 + 10, base_depth/2 - 10]) {\n            translate([x, -base_thickness/2, z])\n                cylinder(h=base_thickness, r1=6, r2=4, center=false);\n        }\n    }\n}\n\nmodule gong_disk() {\n    // Main gong surface\n    difference() {\n        cylinder(h=gong_thickness, r=gong_diameter/2, center=true);\n        // Central hole for mallet cord\n        cylinder(h=gong_thickness+1, r=2, center=true);\n    }\n    \n    // Concentric rings for acoustic properties\n    for(i=[1:3]) {\n        translate([0, 0, gong_thickness/2 - 0.5])\n            difference() {\n                cylinder(h=1, r=gong_diameter/2 - i*8, center=true);\n                cylinder(h=1.5, r=gong_diameter/2 - i*8 - 1, center=true);\n            }\n    }\n    \n    // Mounting bracket\n    translate([0, frame_height/2 - gong_thickness/2 - 5, 0])\n    difference() {\n        cube([gong_diameter/4, 10, gong_thickness], center=true);\n        translate([0, 5, 0])\n            cube([gong_diameter/4 - 2*wall_thick, 10-0.4, gong_thickness-0.4], center=true);\n    }\n}\n\nmodule gong_mallet() {\n    // Mallet handle\n    translate([base_width/2 + 15, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h=50, r=3, center=true);\n    \n    // Mallet head\n    translate([base_width/2 + 15, 0, 25])\n    sphere(r=6);\n    \n    // Mallet rest bracket\n    translate([base_width/2 + 15, 0, -base_thickness/2])\n    difference() {\n        cube([8, 8, 10], center=true);\n        cylinder(h=11, r=3.5, center=true);\n    }\n}\n\n// Assembly\ngong_base();\ntranslate([0, base_thickness/2 + frame_height/2, 0])\ngong_frame();\ntranslate([0, frame_height/2, 0])\ngong_disk();\ngong_mallet();",
    "renders": true
  },
  {
    "sports_equipment": "castanets",
    "openscad_code": "// Castanets furniture item\n// Realistic style, medium complexity\n// Size: ~90mm x ~30mm x ~15mm\n\n// Overall parameters\nshell_thickness = 2;\nbody_length = 90;\nbody_width = 30;\nbody_height = 15;\ngrip_depth = 3;\ngrip_spacing = 6;\n\n// Joint parameters\nhinge_radius = 4;\nhinge_length = 12;\nhinge_clearance = 0.5;\n\n// Handle parameters\nhandle_length = 35;\nhandle_width = 8;\n\n// Sound chamber\nchamber_depth = 2;\nchamber_offset = 5;\n\nmodule castanet_half() {\n    // Main body shell\n    difference() {\n        // Outer shell\n        union() {\n            // Main body\n            translate([0, 0, body_height/2])\n                cube([body_length, body_width, body_height], center=true);\n            \n            // Handle extension\n            translate([-(body_length/2 + handle_length/2), 0, -handle_width/2])\n                cube([handle_length, handle_width, handle_width]);\n        }\n        \n        // Inner cavity\n        translate([0, 0, body_height/2])\n            cube([body_length - 2*shell_thickness, \n                  body_width - 2*shell_thickness, \n                  body_height - shell_thickness], center=true);\n        \n        // Sound chamber\n        translate([body_length/2 - chamber_offset - chamber_depth/2, 0, 0])\n            cube([chamber_depth, body_width - 4*shell_thickness, body_height - 2*shell_thickness], center=true);\n    }\n    \n    // Grip texture on handle\n    for(i = [0:3]) {\n        translate([-(body_length/2 + 5 + i*grip_spacing), 0, handle_width/2])\n            cube([grip_depth, handle_width - 2, 1], center=true);\n    }\n    \n    // Hinge hole\n    translate([body_length/2 - 5, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=body_width, r=hinge_radius + hinge_clearance, center=true);\n    \n    // Decorative edge detail\n    translate([0, 0, body_height - 1])\n        cube([body_length, body_width, 1], center=true);\n}\n\n// Mirror assembly\nmodule castanets() {\n    // First half\n    castanet_half();\n    \n    // Second half - rotated 180 degrees around hinge\n    translate([body_length - 10, 0, 0])\n        rotate([0, 180, 0])\n            castanet_half();\n    \n    // Hinge pin\n    translate([body_length/2 - 5, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=body_width + 2, r=hinge_radius, center=true);\n    \n    // Stopping pad - prevents over-closure\n    translate([body_length/2 - 8, 0, body_height/2 + 1])\n        cube([4, body_width - 4, 1], center=true);\n}\n\n// Render the castanets\ncastanets();",
    "renders": true
  },
  {
    "sports_equipment": "accordion",
    "openscad_code": "// Accordion Furniture Item\n// Realistic style, medium complexity\n// Dimensions approximately 110mm x 65mm x 40mm\n\n$fn = 32;\n\nmodule accordion_body() {\n    // Main bellows body with hexagonal cross-section\n    translate([0, 0, 20]) {\n        difference() {\n            // Hexagonal prism for bellows\n            linear_extrude(height = 30, twist = 5) {\n                circle(d = 50, $fn = 6);\n            }\n            \n            // Hollow center\n            translate([0, 0, -1]) {\n                linear_extrude(height = 32) {\n                    circle(d = 46, $fn = 6);\n                }\n            }\n        }\n    }\n}\n\nmodule bellows_folds() {\n    // Create accordion folds\n    for (i = [0:2:28]) {\n        translate([0, 0, 20 + i]) {\n            rotate([0, 0, i * 2]) {\n                difference() {\n                    cylinder(h = 2, d1 = 52, d2 = 54, center = true);\n                    cylinder(h = 3, d1 = 48, d2 = 50, center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule left_keyboard() {\n    // Left hand keyboard\n    translate([-35, 0, 35]) {\n        difference() {\n            // Main keyboard housing\n            cube([25, 40, 15], center = true);\n            // Hollow interior\n            translate([5, 0, 0]) {\n                cube([21, 36, 16], center = true);\n            }\n        }\n        \n        // Black keys\n        for (i = [-15, -10, -5, 0, 5, 10, 15]) {\n            translate([-25, i, 42]) {\n                cube([3, 3, 8], center = true);\n            }\n        }\n        \n        // White keys\n        for (i = [-17.5:2.5:17.5]) {\n            translate([-25, i, 42]) {\n                cube([2.5, 2, 6], center = true);\n            }\n        }\n    }\n}\n\nmodule right_keyboard() {\n    // Right hand keyboard\n    translate([35, 0, 35]) {\n        difference() {\n            // Main keyboard housing\n            cube([25, 60, 15], center = true);\n            // Hollow interior\n            translate([-5, 0, 0]) {\n                cube([21, 56, 16], center = true);\n            }\n        }\n        \n        // Piano keys\n        for (i = [-27.5:2.5:27.5]) {\n            if (i % 5 != 0) {\n                translate([25, i, 42]) {\n                    cube([2, 1.5, 6], center = true);\n                }\n            } else {\n                translate([25, i, 42]) {\n                    cube([2, 1.5, 4], center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule straps() {\n    // Shoulder straps\n    color(\"darkbrown\") {\n        translate([0, 0, 45]) {\n            // Left strap\n            translate([-20, 0, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 30, d = 3, center = true);\n                }\n            }\n            // Right strap\n            translate([20, 0, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 30, d = 3, center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule air_button() {\n    // Air release button\n    translate([0, 30, 35]) {\n        cylinder(h = 8, d = 6, center = true);\n        translate([0, 0, 4]) {\n            sphere(d = 6);\n        }\n    }\n}\n\nmodule bass_buttons() {\n    // Bass buttons on left side\n    translate([-45, 0, 25]) {\n        for (row = [0:3]) {\n            for (col = [0:3]) {\n                translate([-5 + row * 3.5, -5 + col * 3.5, 0]) {\n                    cylinder(h = 2, d = 3, center = true);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Central bellows\n    accordion_body();\n    bellows_folds();\n    \n    // Keyboards\n    left_keyboard();\n    right_keyboard();\n    \n    // Controls\n    air_button();\n    bass_buttons();\n    \n    // Decorative elements\n    // Grill on right side\n    translate([30, 0, 25]) {\n        for (i = [-20:4:20]) {\n            translate([0, i, 0]) {\n                cube([0.5, 2, 10], center = true);\n            }\n        }\n    }\n    \n    // Base support\n    translate([0, 0, 10]) {\n        difference() {\n            cube([70, 70, 4], center = true);\n            cube([45, 45, 5], center = true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "sports_equipment": "concertina",
    "openscad_code": "// Concertina Furniture – 3D-printable decorative box shaped like a traditional English concertina\n// Overall size: 120 mm long × 80 mm deep × 60 mm tall\n// Wall thickness: 2 mm everywhere to be printable without supports\n// No overhangs steeper than 45°; all bridges ≤ 2 mm\n\n$fn = 32;               // Good curves for realism\n\n// Main body – hollowed-out shell\nmodule body() {\n    difference() {\n        // outer rounded box\n        minkowski() {\n            cube([110, 70, 40], center = true);\n            sphere(5);\n        }\n\n        // inner cavity – 2 mm walls\n        translate([0, 0, -2])\n            minkowski() {\n                cube([106, 66, 38], center = true);\n                sphere(3);\n            }\n    }\n}\n\n// End plates with screw-hole details\nmodule end_plate(pos) {\n    translate([pos, 0, 0]) {\n        difference() {\n            cylinder(h = 6, d = 70);\n            cylinder(h = 7, d = 66);   // hollow center\n        }\n        // decorative bolts in a circle\n        for(a = [0:45:315])\n            rotate([0, 0, a])\n                translate([30, 0, 3])\n                    cylinder(h = 7, d = 3, $fn = 6);\n    }\n}\n\n// Foldable bellows – represented as stacked rings\nmodule bellows() {\n    // 8 folds, 2 mm thick each, 2 mm gaps = 32 mm span\n    for(i = [-3.5:1:3.5]) {\n        translate([0, 0, i * 4])\n            difference() {\n                cylinder(h = 2, d1 = 90, d2 = 88);  // slight taper\n                cylinder(h = 3, d = 86);            // hollow\n            }\n    }\n}\n\n// Palm rest / handle block on top\nmodule handle() {\n    translate([0, 0, 25])\n        difference() {\n            // ergonomic rounded bar\n            minkowski() {\n                cube([50, 15, 8], center = true);\n                sphere(3);\n            }\n            // finger groove\n            cube([45, 11, 9], center = true);\n        }\n}\n\n// Decorative buttons on one end (air button & keys)\nmodule buttons() {\n    // air button\n    translate([55, 0, 5])\n        cylinder(h = 4, d = 8);\n\n    // 10 keys in two rows\n    for(y = [-10, 10])\n        for(x = [40, 45, 50])\n            translate([x, y, 5])\n                cylinder(h = 3, d = 6);\n}\n\n// Assembly\nunion() {\n    body();\n    end_plate(-55);\n    end_plate(55);\n    bellows();\n    handle();\n    buttons();\n}",
    "renders": true
  },
  {
    "sports_equipment": "harmonica",
    "openscad_code": "// Harmonika Furniture - Realistic Style\n// Medium complexity 3D printable harmonica-shaped side table\n\n// Global parameters\nbody_length = 120;\nbody_width = 40;\nbody_height = 30;\nwall_thickness = 2;\nhole_diameter = 4;\nhole_spacing = 6;\nleg_height = 400;\nleg_diameter = 20;\n\nmodule harmonica_body() {\n    // Main body shell\n    difference() {\n        // Outer shell\n        cube([body_length, body_width, body_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness/2])\n            cube([body_length-wall_thickness*2, body_width-wall_thickness*2, body_height], center=true);\n    }\n    \n    // Air holes on top\n    for(i = [-5:5]) {\n        translate([i*hole_spacing, 0, body_height/2])\n            cylinder(h=wall_thickness+1, d=hole_diameter, $fn=16);\n    }\n    \n    // Front cover plate\n    translate([0, body_width/2+wall_thickness/2, 0])\n        cube([body_length-10, wall_thickness, body_height-4], center=true);\n    \n    // Rear cover plate\n    translate([0, -body_width/2-wall_thickness/2, 0])\n        cube([body_length-10, wall_thickness, body_height-4], center=true);\n}\n\nmodule mouthpiece() {\n    // Front mouthpiece\n    translate([body_length/2+5, 0, 0])\n        cube([10, body_width-8, body_height-8], center=true);\n    \n    // Mouthpiece opening\n    difference() {\n        translate([body_length/2+10, 0, 0])\n            cube([5, body_width-12, body_height-12], center=true);\n        \n        translate([body_length/2+10, 0, 0])\n            cube([6, body_width-16, body_height-16], center=true);\n    }\n}\n\nmodule support_frame() {\n    // Central support beam\n    translate([0, 0, -leg_height/2-body_height/2])\n        cube([body_length-20, 20, leg_height], center=true);\n    \n    // Legs\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x*body_length/3, y*body_width/3, -leg_height-body_height/2])\n            cylinder(h=leg_height, d=leg_diameter, $fn=32);\n    }\n    \n    // Cross braces\n    translate([0, body_width/3, -leg_height/2-body_height/2])\n        rotate([90, 0, 0])\n        cylinder(h=body_length*2/3, d=5, center=true, $fn=16);\n    \n    translate([0, -body_width/3, -leg_height/2-body_height/2])\n        rotate([90, 0, 0])\n        cylinder(h=body_length*2/3, d=5, center=true, $fn=16);\n}\n\nmodule table_top() {\n    // Glass top supports\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x*body_length/3, y*body_width/3, body_height/2+2])\n            cylinder(h=4, d=8, $fn=16);\n    }\n    \n    // Glass top\n    translate([0, 0, body_height/2+8])\n        cube([body_length+20, body_width+20, 2], center=true);\n}\n\n// Assembly\nunion() {\n    harmonica_body();\n    mouthpiece();\n    support_frame();\n    table_top();\n}",
    "renders": true
  },
  {
    "sports_equipment": "kazoo",
    "openscad_code": "// Furniture-style Kazoo - OpenSCAD\n// A medium-complexity 3D printable kazoo designed as a small furniture piece\n// Combines musical functionality with structural furniture elements\n\n$fn = 32;\nwall_thickness = 2;\nkazoo_length = 120;\nkazoo_width = 35;\nkazoo_height = 25;\n\n// Main body with furniture-style construction\nmodule kazoo_body() {\n    // Base frame structure (like a drawer front)\n    difference() {\n        // Main body - flat rectangular base\n        cube([kazoo_length, kazoo_width, kazoo_height], center=true);\n        \n        // Hollow interior for sound chamber\n        translate([0, 0, 0])\n            cube([kazoo_length - wall_thickness*2, \n                  kazoo_width - wall_thickness*2, \n                  kazoo_height - wall_thickness], center=true);\n    }\n}\n\n// Mouthpiece with furniture-style joint detail\nmodule mouthpiece() {\n    // Tapered connection piece\n    translate([-kazoo_length/2 - 15, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=30, r1=kazoo_height/2 - 5, r2=kazoo_height/2 - 2);\n    \n    // Furniture-style mounting plate\n    translate([-kazoo_length/2 - 2, 0, 0])\n        cube([4, kazoo_width - 10, kazoo_height], center=true);\n}\n\n// Membrane holder - furniture drawer pull style\nmodule membrane_assembly() {\n    // Main holder - decorative drawer pull design\n    translate([kazoo_length/4, 0, kazoo_height/2])\n        difference() {\n            cylinder(h=8, r=12);\n            cylinder(h=10, r=8);\n        }\n    \n    // Support posts - like table legs\n    for(i = [-1, 1]) {\n        translate([kazoo_length/4 + 8*i, 8*i, kazoo_height/2 - 4])\n            cylinder(h=4, r=2);\n    }\n    \n    // Membrane grill - furniture vent style\n    translate([kazoo_length/4, 0, kazoo_height/2 + 4])\n        difference() {\n            cube([16, 16, 2], center=true);\n            for(x = [-6, -2, 2, 6]) {\n                for(y = [-6, -2, 2, 6]) {\n                    translate([x, y, -1])\n                        cylinder(h=4, r=1);\n                }\n            }\n        }\n}\n\n// Structural reinforcement ribs - furniture style bracing\nmodule reinforcement_ribs() {\n    // Side braces - like chair rails\n    for(pos = [-kazoo_length/3, 0, kazoo_length/3]) {\n        translate([pos, 0, -kazoo_height/2 + 2])\n            cube([2, kazoo_width - 4, 4], center=true);\n    }\n    \n    // End caps - furniture foot detail\n    translate([-kazoo_length/2 + 5, 0, -kazoo_height/2 + 2])\n        cube([10, kazoo_width - 6, 4], center=true);\n    \n    translate([kazoo_length/2 - 5, 0, -kazoo_height/2 + 2])\n        cube([10, kazoo_width - 6, 4], center=true);\n}\n\n// Sound holes with furniture-style trim\nmodule sound_holes() {\n    // Main sound exit - framed opening\n    translate([kazoo_length/2 - 10, 0, 0])\n        difference() {\n            // Frame\n            cube([20, kazoo_width - 6, kazoo_height - 6], center=true);\n            // Opening\n            cube([16, kazoo_width - 10, kazoo_height - 10], center=true);\n        }\n    \n    // Side vents - decorative slots like cabinet details\n    for(i = [-1, 1]) {\n        translate([0, i*(kazoo_width/2 - 3), 0])\n            cube([kazoo_length - 20, 2, kazoo_height - 8], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    kazoo_body();\n    mouthpiece();\n    membrane_assembly();\n    reinforcement_ribs();\n    sound_holes();\n}",
    "renders": true
  },
  {
    "sports_equipment": "zither",
    "openscad_code": "// Zither Furniture - Realistic Style, Medium Complexity\n// A decorative zither table with string details and structural legs\n\n// Global parameters\nzither_length = 120;\nzither_width = 60;\nzither_thickness = 8;\nleg_height = 40;\nwall_thickness = 2;\n\n// Main zither body module\nmodule zither_body() {\n    difference() {\n        // Main body\n        cube([zither_length, zither_width, zither_thickness], center=true);\n        \n        // Hollow cavity inside\n        translate([0, 0, -1])\n            cube([zither_length-4, zither_width-4, zither_thickness-2], center=true);\n    }\n}\n\n// Sound hole module\nmodule sound_hole() {\n    translate([0, 0, zither_thickness/2])\n        cylinder(h=wall_thickness+1, r=15, $fn=32);\n}\n\n// Bridge module for strings\nmodule bridge() {\n    // Main bridge\n    translate([zither_length/3, 0, zither_thickness/2])\n        cube([4, zither_width-10, 3], center=true);\n    \n    // Bridge pins\n    for (i = [-3:3]) {\n        translate([zither_length/3 + 2, i*8, zither_thickness/2 + 2])\n            cylinder(h=2, r=1, $fn=8);\n    }\n}\n\n// Peg box module\nmodule peg_box() {\n    // Peg box structure\n    translate([-zither_length/2 - 15, 0, 0])\n        cube([30, 20, 10], center=true);\n    \n    // Peg holes\n    for (i = [-2:2]) {\n        translate([-zither_length/2 - 15, i*4, 5])\n            cylinder(h=20, r=1.5, $fn=8);\n    }\n}\n\n// String module with realistic spacing\nmodule strings() {\n    num_strings = 12;\n    string_spacing = (zither_width - 10) / (num_strings - 1);\n    \n    for (i = [0:num_strings-1]) {\n        // String from peg box to bridge\n        translate([-zither_length/2, -zither_width/2 + 5 + i*string_spacing, zither_thickness/2 + 1])\n            cube([zither_length, 0.5, 0.5]);\n        \n        // String from bridge to tail\n        translate([zither_length/3 + 2, -zither_width/2 + 5 + i*string_spacing, zither_thickness/2 + 1])\n            cube([zither_length/2 - zither_length/3 - 5, 0.5, 0.5]);\n    }\n}\n\n// Decorative rosette pattern\nmodule rosette() {\n    for (i = [0:7]) {\n        rotate([0, 0, i*45])\n            translate([0, 10, zither_thickness/2])\n                cube([2, 8, 1], center=true);\n    }\n}\n\n// Furniture leg module\nmodule leg() {\n    // Main leg\n    cylinder(h=leg_height, r=3, $fn=12);\n    \n    // Leg support crossbar\n    translate([10, 0, leg_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=1.5, $fn=8);\n}\n\n// Assembly\ntranslate([0, 0, leg_height + zither_thickness/2]) {\n    // Main zither body\n    zither_body();\n    \n    // Sound hole with rosette\n    difference() {\n        sound_hole();\n        rosette();\n    }\n    \n    // Bridge and strings\n    bridge();\n    strings();\n    \n    // Peg box\n    peg_box();\n}\n\n// Four legs at corners\ntranslate([-zither_length/2 + 10, -zither_width/2 + 10, 0])\n    leg();\ntranslate([zither_length/2 - 10, -zither_width/2 + 10, 0])\n    leg();\ntranslate([-zither_length/2 + 10, zither_width/2 - 10, 0])\n    leg();\ntranslate([zither_length/2 - 10, zither_width/2 - 10, 0])\n    leg();",
    "renders": true
  },
  {
    "sports_equipment": "dulcimer",
    "openscad_code": "// Dulcimer Furniture - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm length x 45mm width x 12mm height\n\n// Main body - hollowed soundbox\nmodule soundbox() {\n    difference() {\n        // Outer shell\n        cube([120, 45, 12], center=true);\n        \n        // Inner cavity (leaving 2mm walls)\n        translate([0, 0, 1])\n        cube([116, 41, 10], center=true);\n    }\n}\n\n// Sound holes - traditional f-holes\nmodule f_hole() {\n    // Left side of f\n    translate([-2, 0, 0])\n    cylinder(h=3, r=1.5, $fn=20);\n    \n    // Right side of f\n    translate([2, 0, 0])\n    cylinder(h=3, r=1.5, $fn=20);\n    \n    // Connecting bar\n    translate([0, 0, 0])\n    cube([4, 0.8, 3], center=true);\n}\n\n// Bridge support\nmodule bridge() {\n    // Main bridge body\n    translate([0, 0, 6.5])\n    cube([8, 40, 3], center=true);\n    \n    // Bridge feet for support\n    translate([0, -18, 5.5])\n    cube([6, 3, 1], center=true);\n    translate([0, 18, 5.5])\n    cube([6, 3, 1], center=true);\n}\n\n// Tuning pegs\nmodule tuning_peg(x_pos) {\n    translate([x_pos, 22, 0])\n    rotate([90, 0, 0])\n    cylinder(h=8, r=1, $fn=12);\n    \n    // Peg head\n    translate([x_pos, 23, 0])\n    rotate([90, 0, 0])\n    cylinder(h=3, r=2, $fn=8);\n}\n\n// String anchor pins\nmodule anchor_pin(x_pos) {\n    translate([x_pos, -22, 0])\n    cylinder(h=3, r=1, $fn=8);\n}\n\n// Main assembly\nunion() {\n    // Soundbox\n    soundbox();\n    \n    // Sound holes on top\n    translate([-30, 0, 6.1])\n    f_hole();\n    translate([30, 0, 6.1])\n    mirror([1, 0, 0])\n    f_hole();\n    \n    // Bridge\n    bridge();\n    \n    // Tuning pegs (4 on each side)\n    for(i = [0:3]) {\n        x_pos = 40 - i * 15;\n        tuning_peg(x_pos);\n    }\n    \n    // Anchor pins (4 on each side)\n    for(i = [0:3]) {\n        x_pos = 40 - i * 15;\n        anchor_pin(x_pos);\n    }\n    \n    // Decorative end pieces\n    translate([60, 0, 0])\n    cube([4, 45, 2], center=true);\n    translate([-60, 0, 0])\n    cube([4, 45, 2], center=true);\n    \n    // Fret markers\n    for(i = [1:5]) {\n        fret_pos = 50 - i * 15;\n        translate([fret_pos, 0, 6.1])\n        cylinder(h=0.5, r=0.5, $fn=8);\n    }\n}",
    "renders": true
  }
]